{"file_name": "/home/qj213/afp-2021-10-22/thys/AutoFocus-Stream/AF_Stream.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/AutoFocus-Stream", "problem_names": ["lemma not_NoMsg_eq: \"(m \\<noteq> \\<NoMsg>) = (\\<exists>x. m = \\<Msg> x)\"", "lemma not_Msg_eq: \"(\\<forall>x. m \\<noteq> \\<Msg> x) = (m = \\<NoMsg>) \"", "lemma is_NoMsg_message_af_conv: \"is_NoMsg m = (case m of \\<NoMsg> \\<Rightarrow> True | \\<Msg> x \\<Rightarrow> False)\"", "lemma is_NoMsg_message_af_conv2: \"is_NoMsg m = (m = \\<NoMsg>)\"", "lemma is_Msg_message_af_conv: \"is_Msg m = (case m of \\<NoMsg> \\<Rightarrow> False | \\<Msg> x \\<Rightarrow> True)\"", "lemma is_Msg_message_af_conv2: \"is_Msg m = (m \\<noteq> \\<NoMsg>)\"", "lemma not_is_NoMsg: \"(\\<not> is_NoMsg m) = is_Msg m\"", "lemma not_is_Msg: \"(\\<not> is_Msg m) = is_NoMsg m\"", "lemma \"is_NoMsg (\\<NoMsg>::(nat message_af))\"", "lemma \"is_NoMsg (\\<NoMsg>::(nat message_af), \\<NoMsg>::(nat message_af))\"", "lemma \"is_NoMsg (\\<NoMsg>::(nat message_af), \\<NoMsg>::(nat message_af), \\<NoMsg>::(nat message_af))\"", "lemma \"is_Msg (\\<NoMsg>::(nat message_af), \\<Msg> (1::nat), \\<NoMsg>::(nat message_af))\"", "lemma \"is_NoMsg {\\<NoMsg>::(nat message_af), \\<NoMsg>}\"", "lemma \"is_Msg {\\<NoMsg>::(nat message_af), \\<Msg> 1}\"", "lemma \"is_NoMsg \\<lparr> Field1 = \\<NoMsg>, Field2 = \\<NoMsg>, Field3 = \\<NoMsg> \\<rparr>\"", "lemma \"is_Msg  \\<lparr> Field1 = \\<NoMsg>, Field2 = Msg 1, Field3 = \\<NoMsg> \\<rparr>\"", "lemma untime_eq_filter[rule_format]: \"\n  map (\\<lambda>x. \\<Msg> x) (untime s) = filter (\\<lambda>x. x \\<noteq> \\<NoMsg>) s\"", "lemma untime_length_eq_untime_length_cnt: \"\n  untime_length s = untime_length_cnt s\"", "lemma untime_length_filter_eq_untime_length: \"\n  untime_length_filter s = untime_length s\"", "lemma untime_empty_conv: \"(untime s = []) = (\\<forall>n<length s. s ! n = \\<NoMsg>)\"", "lemma untime_not_empty_conv: \"(untime s \\<noteq> []) = (\\<exists>n<length s. s ! n \\<noteq> \\<NoMsg>)\"", "lemma untime_nth_eq_filter: \"\n  n < untime_length s \\<Longrightarrow>\n  \\<Msg> (untime s ! n) = (filter (\\<lambda>x. x \\<noteq> \\<NoMsg>) s) ! n\"", "lemma untime_hd_eq_filter_hd: \"\n  untime s \\<noteq> [] \\<Longrightarrow>\n  \\<Msg> (hd (untime s)) = hd (filter (\\<lambda>x. x \\<noteq> \\<NoMsg>) s)\"", "lemma untime_last_eq_filter_last: \"\n  untime s \\<noteq> [] \\<Longrightarrow>\n  \\<Msg> (last (untime s)) = last (filter (\\<lambda>x. x \\<noteq> \\<NoMsg>) s)\"", "lemma length_f_expand_Suc[simp]: \"length (f_expand_Suc xs k) = length xs * Suc k\"", "lemma i_expand_if: \"\n  f \\<odot>\\<^sub>i k = (if k = 0 then (\\<lambda>n. \\<NoMsg>) else\n    (\\<lambda>n. if n mod k = 0 then f (n div k) else \\<NoMsg>))\"", "lemma f_expand_one: \"0 < k \\<Longrightarrow> [a] \\<odot>\\<^sub>f k = a # \\<NoMsg>\\<^bsup>k - Suc 0\\<^esup>\"", "lemma f_expand_0[simp]: \"xs \\<odot>\\<^sub>f 0 = []\"", "lemma i_expand_0[simp]: \"f \\<odot>\\<^sub>i 0 = (\\<lambda>n. \\<NoMsg>)\"", "lemma f_expand_gr0_f_expand_Suc: \"0 < k \\<Longrightarrow> xs \\<odot>\\<^sub>f k = f_expand_Suc xs (k - Suc 0)\"", "lemma i_expand_gr0_i_expand_Suc: \"0 < k \\<Longrightarrow> f \\<odot>\\<^sub>i k = i_expand_Suc f (k - Suc 0)\"", "lemma i_expand_gr0: \"\n  0 < k \\<Longrightarrow> f \\<odot>\\<^sub>i k = (\\<lambda>n. if n mod k = 0 then f (n div k) else \\<NoMsg>)\"", "lemma f_expand_1[simp]: \"xs \\<odot>\\<^sub>f Suc 0 = xs\"", "lemma i_expand_1[simp]: \"f \\<odot>\\<^sub>i Suc 0 = f\"", "lemma f_expand_length[simp]: \"length (xs \\<odot>\\<^sub>f k) = length xs * k\"", "lemma f_expand_empty_conv: \"(xs \\<odot>\\<^sub>f k = []) = (xs = [] \\<or> k = 0)\"", "lemma f_expand_not_empty_conv: \"(xs \\<odot>\\<^sub>f k \\<noteq> []) = (xs \\<noteq> [] \\<and> 0 < k)\"", "lemma f_expand_Cons: \"\n  0 < k \\<Longrightarrow> (x # xs) \\<odot>\\<^sub>f k = x # \\<NoMsg>\\<^bsup>k - Suc 0\\<^esup> @ (xs \\<odot>\\<^sub>f k)\"", "lemma f_expand_append[simp]: \"\\<And>ys. (xs @ ys) \\<odot>\\<^sub>f k = (xs \\<odot>\\<^sub>f k) @ (ys \\<odot>\\<^sub>f k)\"", "lemma f_expand_snoc: \"\n  0 < k \\<Longrightarrow> (xs @ [x]) \\<odot>\\<^sub>f k = xs \\<odot>\\<^sub>f k @ x # replicate (k - Suc 0) \\<NoMsg>\"", "lemma f_expand_nth_mult: \"\\<And>n.\n  \\<lbrakk> n < length xs; 0 < k \\<rbrakk> \\<Longrightarrow> (xs \\<odot>\\<^sub>f k) ! (n * k) = xs ! n\"", "lemma i_expand_nth_mult: \"0 < k \\<Longrightarrow> (f \\<odot>\\<^sub>i k) (n * k) = f n\"", "lemma f_expand_nth_if: \"\\<And>n.\n  n < length xs * k \\<Longrightarrow>\n  (xs \\<odot>\\<^sub>f k) ! n = (if n mod k = 0 then xs ! (n div k) else \\<NoMsg>)\"", "lemma f_expand_nth_0_upto_k_minus_1_if: \"\n  \\<lbrakk> t < length xs; n = t * k + i; i < k \\<rbrakk> \\<Longrightarrow>\n  (xs \\<odot>\\<^sub>f k) ! n = (if i = 0 then xs ! t else \\<NoMsg>)\"", "lemma f_expand_take_mult: \"xs \\<odot>\\<^sub>f k \\<down> (n * k) = (xs \\<down> n) \\<odot>\\<^sub>f k\"", "lemma f_expand_take_mod: \"\n  n mod k = 0 \\<Longrightarrow> xs \\<odot>\\<^sub>f k \\<down> n = xs \\<down> (n div k) \\<odot>\\<^sub>f k\"", "lemma f_expand_drop_mult: \"xs \\<odot>\\<^sub>f k \\<up> (n * k) = (xs \\<up> n) \\<odot>\\<^sub>f k\"", "lemma f_expand_drop_mod: \"\n  n mod k = 0 \\<Longrightarrow> xs \\<odot>\\<^sub>f k \\<up> n = xs \\<up> (n div k) \\<odot>\\<^sub>f k\"", "lemma f_expand_take_mult_Suc: \"\n  \\<lbrakk> n < length xs; i < k \\<rbrakk> \\<Longrightarrow>\n  xs \\<odot>\\<^sub>f k \\<down> (n * k + Suc i) = (xs \\<down> n) \\<odot>\\<^sub>f k @ (xs ! n # \\<NoMsg>\\<^bsup>i\\<^esup>)\"", "lemma f_expand_take_Suc: \"\n  n < length xs * k \\<Longrightarrow>\n  xs \\<odot>\\<^sub>f k \\<down> Suc n = (xs \\<down> (n div k)) \\<odot>\\<^sub>f k @ (xs ! (n div k) # \\<NoMsg>\\<^bsup>n mod k\\<^esup>)\"", "lemma i_expand_nth_if: \"\n  0 < k \\<Longrightarrow> (f \\<odot>\\<^sub>i k) n = (if n mod k = 0 then f (n div k) else \\<NoMsg>)\"", "lemma i_expand_nth_0_upto_k_minus_1_if: \"\n  \\<lbrakk> n = t * k + i; i < k \\<rbrakk> \\<Longrightarrow>\n  (f \\<odot>\\<^sub>i k) n = (if i = 0 then f t else \\<NoMsg>)\"", "lemma i_expand_i_take_mult: \"f \\<odot>\\<^sub>i k \\<Down> (n * k) = (f \\<Down> n) \\<odot>\\<^sub>f k\"", "lemma i_expand_i_take_mod: \"\n  n mod k = 0 \\<Longrightarrow> f \\<odot>\\<^sub>i k \\<Down> n = f \\<Down> (n div k) \\<odot>\\<^sub>f k\"", "lemma i_expand_i_drop_mult: \"(f \\<odot>\\<^sub>i k) \\<Up> (n * k) = (f \\<Up> n) \\<odot>\\<^sub>i k\"", "lemma i_expand_i_drop_mod: \"\n  n mod k = 0 \\<Longrightarrow> f \\<odot>\\<^sub>i k \\<Up> n = f \\<Up> (n div k) \\<odot>\\<^sub>i k\"", "lemma i_expand_i_take_mult_Suc: \"\n  i < k \\<Longrightarrow> f \\<odot>\\<^sub>i k \\<Down> (n * k + Suc i) = (f \\<Down> n) \\<odot>\\<^sub>f k @ (f n # \\<NoMsg>\\<^bsup>i\\<^esup>)\"", "lemma i_expand_i_take_Suc: \"\n  0 < k \\<Longrightarrow> f \\<odot>\\<^sub>i k \\<Down> Suc n = (f \\<Down> (n div k)) \\<odot>\\<^sub>f k @ (f (n div k) # \\<NoMsg>\\<^bsup>n mod k\\<^esup>)\"", "lemma f_expand_nth_interval_eq_nth_append_replicate_NoMsg[rule_format]: \"\n  \\<lbrakk> 0 < k; t < length xs; t * k \\<le> t1; t1 \\<le> t * k + k - Suc 0 \\<rbrakk> \\<Longrightarrow>\n  xs \\<odot>\\<^sub>f k \\<down> Suc t1 \\<up> (t * k) = xs ! t # \\<NoMsg>\\<^bsup>t1 - t * k\\<^esup>\"", "lemma f_expand_nth_interval_eq_replicate_NoMsg: \"\n  \\<lbrakk> 0 < k; t * k < t1; t1 \\<le> t2; t2 \\<le> t * k + k; t2 \\<le> length xs * k\\<rbrakk> \\<Longrightarrow>\n  xs \\<odot>\\<^sub>f k \\<down> t2 \\<up> t1 = \\<NoMsg>\\<^bsup>t2 - t1\\<^esup>\"", "lemma i_expand_nth_interval_eq_nth_append_replicate_NoMsg[rule_format]: \"\n  \\<lbrakk> 0 < k; t * k \\<le> t1; t1 \\<le> t * k + k - Suc 0 \\<rbrakk> \\<Longrightarrow>\n  f \\<odot>\\<^sub>i k \\<Down> Suc t1 \\<up> (t * k) = f t # \\<NoMsg>\\<^bsup>t1 - t * k\\<^esup>\"", "lemma i_expand_nth_interval_eq_replicate_NoMsg: \"\n  \\<lbrakk> 0 < k; t * k < t1; t1 \\<le> t2; t2 \\<le> t * k + k \\<rbrakk> \\<Longrightarrow>\n  f \\<odot>\\<^sub>i k \\<Down> t2 \\<up> t1 = \\<NoMsg>\\<^bsup>t2 - t1\\<^esup>\"", "lemma f_expand_replicate_NoMsg[simp]: \"(\\<NoMsg>\\<^bsup>n\\<^esup>) \\<odot>\\<^sub>f k =  \\<NoMsg>\\<^bsup>n * k\\<^esup>\"", "lemma i_expand_const_NoMsg[simp]: \"(\\<lambda>n. \\<NoMsg>) \\<odot>\\<^sub>i k = (\\<lambda>n. \\<NoMsg>)\"", "lemma f_expand_assoc: \"xs \\<odot>\\<^sub>f a \\<odot>\\<^sub>f b = xs \\<odot>\\<^sub>f (a * b)\"", "lemma i_expand_assoc: \"f \\<odot>\\<^sub>i a \\<odot>\\<^sub>i b = f \\<odot>\\<^sub>i (a * b)\"", "lemma f_expand_commute: \"xs \\<odot>\\<^sub>f a \\<odot>\\<^sub>f b = xs \\<odot>\\<^sub>f b \\<odot>\\<^sub>f a\"", "lemma i_expand_commute: \"f \\<odot>\\<^sub>i a \\<odot>\\<^sub>i b = f \\<odot>\\<^sub>i b \\<odot>\\<^sub>i a\"", "lemma i_expand_i_append: \"(xs \\<frown> f) \\<odot>\\<^sub>i k = xs \\<odot>\\<^sub>f k \\<frown> (f \\<odot>\\<^sub>i k)\"", "lemma f_expand_eq_conv: \"\n  0 < k \\<Longrightarrow> (xs \\<odot>\\<^sub>f k = ys \\<odot>\\<^sub>f k) = (xs = ys)\"", "lemma i_expand_eq_conv: \"\n  0 < k \\<Longrightarrow> (f \\<odot>\\<^sub>i k = g \\<odot>\\<^sub>i k) = (f = g)\"", "lemma f_expand_eq_conv': \"\n  (xs' \\<odot>\\<^sub>f k = xs) =\n  (length xs' * k = length xs \\<and>\n  (\\<forall>i<length xs. xs ! i = (if i mod k = 0 then xs' ! (i div k) else \\<NoMsg>)))\"", "lemma i_expand_eq_conv': \"\n  0 < k \\<Longrightarrow> (f' \\<odot>\\<^sub>i k = f) =\n  (\\<forall>i. f i = (if i mod k = 0 then f' (i div k) else \\<NoMsg>))\"", "lemma f_aggregate_0[simp]: \"f_aggregate xs 0 ag = []\"", "lemma f_aggregate_1: \"\n  (\\<And>x. ag [x] = x) \\<Longrightarrow>\n  f_aggregate xs (Suc 0) ag = xs\"", "lemma f_aggregate_Nil[simp]: \"f_aggregate [] k ag = []\"", "lemma f_aggregate_length[simp]: \"length (f_aggregate xs k ag) = length xs div k\"", "lemma f_aggregate_empty_conv: \"\n  0 < k \\<Longrightarrow> (f_aggregate xs k ag = []) = (length xs < k)\"", "lemma f_aggregate_one: \"\n  \\<lbrakk> 0 < k; length xs = k \\<rbrakk> \\<Longrightarrow> f_aggregate xs k ag = [ag xs]\"", "lemma f_aggregate_Cons: \"\n  \\<lbrakk> 0 < k; length xs = k \\<rbrakk> \\<Longrightarrow>\n  f_aggregate (xs @ ys) k ag = ag xs # (f_aggregate ys k ag)\"", "lemma f_aggregate_eq_f_aggregate_take: \"\n  f_aggregate (xs \\<down> (length xs div k * k)) k ag = f_aggregate xs k ag\"", "lemma f_aggregate_nth: \"\n  n < length xs div k \\<Longrightarrow>\n  (f_aggregate xs k ag) ! n = ag (xs \\<up> (n * k) \\<down> k)\"", "lemma f_aggregate_nth_eq_sublist_list: \"\n  n < length xs div k \\<Longrightarrow>\n  (f_aggregate xs k ag) ! n = ag (sublist_list xs [n * k..<n * k + k])\"", "lemma f_aggregate_take_nth: \"\n  \\<And>xs m. \\<lbrakk> n < length xs div k; n < m div k \\<rbrakk> \\<Longrightarrow>\n  f_aggregate (xs \\<down> m) k ag ! n = f_aggregate xs k ag ! n\"", "lemma f_aggregate_hd: \"\n  \\<lbrakk> 0 < k; k \\<le> length xs \\<rbrakk> \\<Longrightarrow>\n  hd (f_aggregate xs k ag) = ag (xs \\<down> k)\"", "lemma f_aggregate_append_mod: \"\n  length xs mod k = 0 \\<Longrightarrow>\n  f_aggregate (xs @ ys) k ag =\n  f_aggregate xs k ag @ f_aggregate ys k ag\"", "lemma f_aggregate_append_mult: \"\n  length xs = m * k \\<Longrightarrow>\n  f_aggregate (xs @ ys) k ag =\n  f_aggregate xs k ag @ f_aggregate ys k ag\"", "lemma f_aggregate_snoc: \"\n  \\<lbrakk> 0 < k; length ys = k; length xs mod k = 0 \\<rbrakk> \\<Longrightarrow>\n  f_aggregate (xs @ ys) k ag = f_aggregate xs k ag @ [ag ys]\"", "lemma f_aggregate_take: \"\n  f_aggregate (xs \\<down> n) k ag = f_aggregate xs k ag \\<down> (n div k)\"", "lemma f_aggregate_take_mult: \"\n  f_aggregate (xs \\<down> (n * k)) k ag = f_aggregate xs k ag \\<down> n\"", "lemma f_aggregate_drop_mult: \"\n  f_aggregate (xs \\<up> (n * k)) k ag = f_aggregate xs k ag \\<up> n\"", "lemma f_aggregate_drop_mod: \"\n  n mod k = 0 \\<Longrightarrow> f_aggregate (xs \\<up> n) k ag = f_aggregate xs k ag \\<up> (n div k)\"", "lemma f_aggregate_assoc: \"\n  (\\<And>xs. length xs mod a = 0 \\<Longrightarrow> ag (f_aggregate xs a ag) = ag xs) \\<Longrightarrow>\n  f_aggregate (f_aggregate xs a ag) b ag = f_aggregate xs (a * b) ag\"", "lemma f_aggregate_commute: \"\n  \\<lbrakk> \\<And>xs. length xs mod a = 0 \\<Longrightarrow> ag (f_aggregate xs a ag) = ag xs;\n    \\<And>xs. length xs mod b = 0 \\<Longrightarrow> ag (f_aggregate xs b ag) = ag xs \\<rbrakk> \\<Longrightarrow>\n  f_aggregate (f_aggregate xs a ag) b ag = f_aggregate (f_aggregate xs b ag) a ag\"", "lemma i_aggregate_0[simp]: \"i_aggregate f 0 ag = (\\<lambda>x. ag [])\"", "lemma i_aggregate_1: \"(\\<And>x. ag [x] = x) \\<Longrightarrow> i_aggregate f (Suc 0) ag = f\"", "lemma i_aggregate_nth: \"i_aggregate f k ag n = ag (f \\<Up> (n * k) \\<Down> k)\"", "lemma i_aggregate_hd: \"i_aggregate f k ag 0 = ag (f \\<Down> k)\"", "lemma i_aggregate_nth_eq_map: \"i_aggregate f k ag n = ag (map f [n * k..<n * k + k])\"", "lemma i_aggregate_i_append_mod: \"\n  length xs mod k = 0 \\<Longrightarrow>\n  i_aggregate (xs \\<frown> f) k ag = f_aggregate xs k ag \\<frown> i_aggregate f k ag\"", "lemma i_aggregate_i_append_mult: \"\n  length xs = m * k \\<Longrightarrow>\n  i_aggregate (xs \\<frown> f) k ag = f_aggregate xs k ag \\<frown> i_aggregate f k ag\"", "lemma i_aggregate_Cons: \"\n  \\<lbrakk> 0 < k; length xs = k \\<rbrakk> \\<Longrightarrow>\n  i_aggregate (xs \\<frown> f) k ag = [ag xs] \\<frown> (i_aggregate f k ag)\"", "lemma i_aggregate_take_nth: \"\n  n < m div k \\<Longrightarrow> f_aggregate (f \\<Down> m) k ag ! n = i_aggregate f k ag n\"", "lemma i_aggregate_i_take: \"\n  f_aggregate (f \\<Down> n) k ag = i_aggregate f k ag \\<Down> (n div k)\"", "lemma i_aggregate_i_take_mult: \"\n  0 < k \\<Longrightarrow> f_aggregate (f \\<Down> (n * k)) k ag = i_aggregate f k ag \\<Down> n\"", "lemma i_aggregate_i_drop_mult: \"\n  i_aggregate (f \\<Up> (n * k)) k ag = i_aggregate f k ag \\<Up> n\"", "lemma i_aggregate_i_drop_mod: \"\n  n mod k = 0 \\<Longrightarrow>\n  i_aggregate (f \\<Up> n) k ag = i_aggregate f k ag \\<Up> (n div k)\"", "lemma i_aggregate_assoc: \"\n  \\<lbrakk> 0 < a; 0 < b;\n    \\<And>xs. length xs mod a = 0 \\<Longrightarrow> ag (f_aggregate xs a ag) = ag xs \\<rbrakk> \\<Longrightarrow>\n  i_aggregate (i_aggregate f a ag) b ag = i_aggregate f (a * b) ag\"", "lemma i_aggregate_commute: \"\n  \\<lbrakk> 0 < a; 0 < b;\n    \\<And>xs. length xs mod a = 0 \\<Longrightarrow> ag (f_aggregate xs a ag) = ag xs;\n    \\<And>xs. length xs mod b = 0 \\<Longrightarrow> ag (f_aggregate xs b ag) = ag xs \\<rbrakk> \\<Longrightarrow>\n  i_aggregate (i_aggregate xs a ag) b ag = i_aggregate (i_aggregate xs b ag) a ag\"", "lemmas f_shrink_defs = f_shrink_def f_aggregate_def", "lemmas i_shrink_defs = i_shrink_def i_aggregate_def", "lemma last_message_Nil: \"last_message [] = \\<NoMsg>\"", "lemma last_message_one: \"last_message [m] = m\"", "lemma last_message_replicate: \"0 < n \\<Longrightarrow> last_message (m\\<^bsup>n\\<^esup>) = m\"", "lemma last_message_replicate_NoMsg: \"last_message (\\<NoMsg>\\<^bsup>n\\<^esup>) = \\<NoMsg>\"", "lemma last_message_Cons_NoMsg: \"last_message (\\<NoMsg> # xs) = last_message xs\"", "lemma last_message_append_one: \"\n  last_message (xs @ [m]) = (if m = \\<NoMsg> then last_message xs else m)\"", "lemma last_message_append: \"\\<And>xs.\n  last_message (xs @ ys) = (\n  if last_message ys = \\<NoMsg> then last_message xs else last_message ys)\"", "lemma last_message_replicate_NoMsg_append: \"\n  last_message (\\<NoMsg>\\<^bsup>n\\<^esup> @ xs) = last_message xs\"", "lemma last_message_NoMsg_conv: \"\n  (last_message xs = \\<NoMsg>) = (\\<forall>i<length xs. xs ! i = \\<NoMsg>)\"", "lemma last_message_not_NoMsg_conv: \"\n  (last_message xs \\<noteq> \\<NoMsg>) = (\\<exists>i<length xs. xs ! i \\<noteq> \\<NoMsg>)\"", "lemma not_NoMsg_imp_last_message: \"\n  \\<lbrakk> i < length xs; xs ! i \\<noteq> \\<NoMsg> \\<rbrakk> \\<Longrightarrow> last_message xs \\<noteq> \\<NoMsg>\"", "lemma last_message_exists_nth: \"\n  last_message xs \\<noteq> \\<NoMsg> \\<Longrightarrow>\n  \\<exists>i<length xs. last_message xs = xs ! i \\<and> (\\<forall>j<length xs. i < j \\<longrightarrow> xs ! j = \\<NoMsg>)\"", "lemma last_message_exists_nth': \"\n  last_message xs \\<noteq> \\<NoMsg> \\<Longrightarrow> \\<exists>i<length xs. last_message xs = xs ! i\"", "lemma last_messageI2_aux: \"\\<And>i.\n  \\<lbrakk> i < length xs; xs ! i \\<noteq> \\<NoMsg>;\n    \\<forall>j. i < j \\<and> j < length xs \\<longrightarrow> xs ! j = \\<NoMsg> \\<rbrakk> \\<Longrightarrow>\n  last_message xs = xs ! i\"", "lemma last_messageI2: \"\n  \\<lbrakk> i < length xs; xs ! i \\<noteq> \\<NoMsg>;\n    \\<And>j. \\<lbrakk> i < j; j < length xs \\<rbrakk> \\<Longrightarrow> xs ! j = \\<NoMsg> \\<rbrakk> \\<Longrightarrow>\n  last_message xs = xs ! i\"", "lemma last_messageI: \"\n  \\<lbrakk> m \\<noteq> \\<NoMsg>; i < length xs; xs ! i = m;\n    \\<And>j. \\<lbrakk> i < j; j < length xs \\<rbrakk> \\<Longrightarrow> xs ! j = \\<NoMsg> \\<rbrakk> \\<Longrightarrow>\n  last_message xs = m\"", "lemma last_message_Msg_eq_last: \"\n  \\<lbrakk> xs \\<noteq> []; last xs \\<noteq> \\<NoMsg> \\<rbrakk> \\<Longrightarrow> last_message xs = last xs\"", "lemma last_message_conv: \"\n  m \\<noteq> \\<NoMsg> \\<Longrightarrow>\n  (last_message xs = m) =\n  (\\<exists>i<length xs. xs ! i = m \\<and> (\\<forall>j<length xs. i < j \\<longrightarrow> xs ! j = \\<NoMsg>))\"", "lemma last_message_conv_if: \"\n  (last_message xs = m) =\n  (if m = \\<NoMsg> then \\<forall>i<length xs. xs ! i = \\<NoMsg>\n   else \\<exists>i<length xs. xs ! i = m \\<and> (\\<forall>j<length xs. i < j \\<longrightarrow> xs ! j = \\<NoMsg>))\"", "lemma last_message_not_NoMsg_eq_conv: \"\n  \\<lbrakk> last_message xs \\<noteq> \\<NoMsg>; last_message ys \\<noteq> \\<NoMsg> \\<rbrakk> \\<Longrightarrow>\n  (last_message xs = last_message ys) =\n  (\\<exists>i j. i < length xs \\<and> j < length ys \\<and> xs ! i \\<noteq> \\<NoMsg> \\<and>\n         xs ! i = ys ! j \\<and>\n         (\\<forall>n<length xs. i < n \\<longrightarrow> xs ! n = \\<NoMsg>) \\<and>\n         (\\<forall>n<length ys. j < n \\<longrightarrow> ys ! n = \\<NoMsg>))\"", "lemma f_shrink_0[simp]: \"xs \\<div>\\<^sub>f 0 = []\"", "lemma f_shrink_1[simp]: \"xs \\<div>\\<^sub>f Suc 0 = xs\"", "lemma f_shrink_Nil[simp]: \"[] \\<div>\\<^sub>f k = []\"", "lemma f_shrink_length: \"length (xs \\<div>\\<^sub>f k) = length xs div k\"", "lemma f_shrink_empty_conv: \"0 < k \\<Longrightarrow> (xs \\<div>\\<^sub>f k = []) = (length xs < k)\"", "lemma f_shrink_Cons: \"\n  \\<lbrakk> 0 < k; length xs = k \\<rbrakk> \\<Longrightarrow> (xs @ ys) \\<div>\\<^sub>f k = last_message xs # (ys \\<div>\\<^sub>f k)\"", "lemma f_shrink_one: \"\n  \\<lbrakk> 0 < k; length xs = k \\<rbrakk> \\<Longrightarrow> xs \\<div>\\<^sub>f k = [last_message xs]\"", "lemma f_shrink_eq_f_shrink_take: \"\n  xs \\<down> (length xs div k * k) \\<div>\\<^sub>f k = xs \\<div>\\<^sub>f k\"", "lemma f_shrink_nth: \"\n  n < length xs div k \\<Longrightarrow>\n  (xs \\<div>\\<^sub>f k) ! n = last_message (xs \\<up> (n * k) \\<down> k)\"", "lemma f_shrink_nth_eq_sublist_list: \"\n  n < length xs div k \\<Longrightarrow>\n  (xs \\<div>\\<^sub>f k) ! n = last_message (sublist_list xs [n * k..<n * k + k])\"", "lemma f_shrink_take_nth: \"\n  \\<lbrakk> n < length xs div k; n < m div k \\<rbrakk> \\<Longrightarrow> (xs \\<down> m) \\<div>\\<^sub>f k ! n = xs \\<div>\\<^sub>f k ! n\"", "lemma f_shrink_hd: \"\n  \\<lbrakk> 0 < k; k \\<le> length xs \\<rbrakk> \\<Longrightarrow> hd (xs \\<div>\\<^sub>f k) = last_message (xs \\<down> k)\"", "lemma f_shrink_append_mod: \"\n  length xs mod k = 0 \\<Longrightarrow> (xs @ ys) \\<div>\\<^sub>f k = xs \\<div>\\<^sub>f k @ (ys \\<div>\\<^sub>f k)\"", "lemma f_shrink_append_mult: \"\n  length xs = m * k \\<Longrightarrow> (xs @ ys) \\<div>\\<^sub>f k = xs \\<div>\\<^sub>f k @ (ys \\<div>\\<^sub>f k)\"", "lemma f_shrink_snoc: \"\n  \\<lbrakk> 0 < k; length ys = k; length xs mod k = 0 \\<rbrakk> \\<Longrightarrow>\n  (xs @ ys) \\<div>\\<^sub>f k = xs \\<div>\\<^sub>f k @ [last_message ys]\"", "lemma f_shrink_last_message[rule_format]: \"\n  length xs mod k = 0 \\<longrightarrow> last_message (xs \\<div>\\<^sub>f k) = last_message xs\"", "lemma f_shrink_replicate: \"m\\<^bsup>n\\<^esup> \\<div>\\<^sub>f k = m\\<^bsup>n div k\\<^esup>\"", "lemma f_shrink_f_expand_id: \"0 < k \\<Longrightarrow> xs \\<odot>\\<^sub>f k \\<div>\\<^sub>f k = xs\"", "lemma f_expand_f_shrink_id_take[rule_format]: \"\n  \\<lbrakk> \\<forall>i<length xs. 0 < i mod k \\<longrightarrow> xs ! i = \\<NoMsg> \\<rbrakk> \\<Longrightarrow>\n  xs \\<div>\\<^sub>f k \\<odot>\\<^sub>f k = xs \\<down> (length xs div k * k)\"", "lemma f_shrink_take: \"\n  xs \\<down> n \\<div>\\<^sub>f k = xs \\<div>\\<^sub>f k \\<down> (n div k)\"", "lemma f_shrink_take_mult: \"xs \\<down> (n * k) \\<div>\\<^sub>f k = xs \\<div>\\<^sub>f k \\<down> n\"", "lemma f_shrink_drop_mult: \"xs \\<up> (n * k) \\<div>\\<^sub>f k = xs \\<div>\\<^sub>f k \\<up> n\"", "lemma f_shrink_drop_mod: \"\n  n mod k = 0 \\<Longrightarrow> xs \\<up> n \\<div>\\<^sub>f k = xs \\<div>\\<^sub>f k \\<up> (n div k)\"", "lemma f_shrink_eq_conv: \"\n  (xs \\<div>\\<^sub>f k1 = ys \\<div>\\<^sub>f k2) =\n  (length xs div k1 = length ys div k2 \\<and>\n  (\\<forall>i<length xs div k1.\n      last_message (xs \\<up> (i * k1) \\<down> k1) = last_message (ys \\<up> (i * k2) \\<down> k2)))\"", "lemma f_shrink_eq_conv': \"\n  (xs' \\<div>\\<^sub>f k = xs) =\n  (length xs' div k = length xs \\<and>\n  (\\<forall>i<length xs.\n      if xs ! i = \\<NoMsg> then (\\<forall>j<k. xs' ! (i * k + j) = \\<NoMsg>)\n      else (\\<exists>n<k. xs' ! (i * k + n) = xs ! i \\<and>\n                  (\\<forall>j<k. n < j \\<longrightarrow> xs' ! (i * k + j) = \\<NoMsg>))))\"", "lemma f_shrink_assoc: \"xs \\<div>\\<^sub>f a \\<div>\\<^sub>f b = xs \\<div>\\<^sub>f (a * b)\"", "lemma f_shrink_commute: \"xs \\<div>\\<^sub>f a \\<div>\\<^sub>f b = xs \\<div>\\<^sub>f b \\<div>\\<^sub>f a\"", "lemma i_shrink_0[simp]: \"f \\<div>\\<^sub>i 0 = (\\<lambda>n. \\<NoMsg>)\"", "lemma i_shrink_1[simp]: \"f \\<div>\\<^sub>i Suc 0 = f\"", "lemma i_shrink_nth: \"(f \\<div>\\<^sub>i k) n = last_message (f \\<Up> (n * k) \\<Down> k)\"", "lemma i_shrink_nth_eq_map: \"(f \\<div>\\<^sub>i k) n = last_message (map f [n * k..<n * k + k])\"", "lemma i_shrink_hd: \"(f \\<div>\\<^sub>i k) 0 = last_message (f \\<Down> k)\"", "lemma i_shrink_i_append_mod: \"\n  length xs mod k = 0 \\<Longrightarrow> (xs \\<frown> f) \\<div>\\<^sub>i k = xs \\<div>\\<^sub>f k \\<frown> (f \\<div>\\<^sub>i k)\"", "lemma i_shrink_i_append_mult: \"\n  length xs = m * k \\<Longrightarrow> (xs \\<frown> f) \\<div>\\<^sub>i k = xs \\<div>\\<^sub>f k \\<frown> (f \\<div>\\<^sub>i k)\"", "lemma i_shrink_Cons: \"\n  \\<lbrakk> 0 < k; length xs = k \\<rbrakk> \\<Longrightarrow> (xs \\<frown> f) \\<div>\\<^sub>i k = [last_message xs] \\<frown> (f \\<div>\\<^sub>i k)\"", "lemma i_shrink_take_nth: \"\n  n < m div k \\<Longrightarrow> (f \\<Down> m) \\<div>\\<^sub>f k ! n = (f \\<div>\\<^sub>i k) n\"", "lemma i_shrink_const[simp]: \"0 < k \\<Longrightarrow> (\\<lambda>x. m) \\<div>\\<^sub>i k = (\\<lambda>x. m)\"", "lemma i_shrink_const_NoMsg[simp]: \"(\\<lambda>x. \\<NoMsg>) \\<div>\\<^sub>i k = (\\<lambda>x. \\<NoMsg>)\"", "lemma i_shrink_i_expand_id: \"0 < k \\<Longrightarrow> f \\<odot>\\<^sub>i k \\<div>\\<^sub>i k = f\"", "lemma i_shrink_i_take_mult: \"0 < k \\<Longrightarrow> f \\<Down> (n * k) \\<div>\\<^sub>f k = f \\<div>\\<^sub>i k \\<Down> n\"", "lemma i_shrink_i_take: \"\n  f \\<Down> n \\<div>\\<^sub>f k = f \\<div>\\<^sub>i k \\<Down> (n div k)\"", "lemma i_shrink_i_drop_mult: \"f \\<Up> (n * k) \\<div>\\<^sub>i k = f \\<div>\\<^sub>i k \\<Up> n\"", "lemma i_shrink_i_drop_mod: \"\n  n mod k = 0 \\<Longrightarrow> f \\<Up> n \\<div>\\<^sub>i k = f \\<div>\\<^sub>i k \\<Up> (n div k)\"", "lemma i_shrink_eq_conv: \"\n  (f \\<div>\\<^sub>i k1 = g \\<div>\\<^sub>i k2) =\n  (\\<forall>i. last_message (f \\<Up> (i * k1) \\<Down> k1) =\n       last_message (g \\<Up> (i * k2) \\<Down> k2))\"", "lemma i_shrink_eq_conv': \"\n  (f' \\<div>\\<^sub>i k = f) =\n  (\\<forall>i. if f i = \\<NoMsg> then \\<forall>j<k. f' (i * k + j) = \\<NoMsg>\n       else \\<exists>n<k. f' (i * k + n) = f i \\<and>\n                    (\\<forall>j<k. n < j \\<longrightarrow> f' (i * k + j) = \\<NoMsg>))\"", "lemma i_shrink_assoc: \"f \\<div>\\<^sub>i a \\<div>\\<^sub>i b = f \\<div>\\<^sub>i (a * b)\"", "lemma i_shrink_commute: \"f \\<div>\\<^sub>i a \\<div>\\<^sub>i b = f \\<div>\\<^sub>i b \\<div>\\<^sub>i a\"", "lemma last_message_hold_init_length[simp]: \"\n  \\<And>m. length (last_message_hold_init xs m) = length xs\"", "lemma last_message_hold_init_nth: \"\n  \\<And>i m. i < length xs \\<Longrightarrow>\n  (last_message_hold_init xs m) ! i = last_message (m # xs \\<down> Suc i)\"", "lemma last_message_hold_init_snoc: \"\n  last_message_hold_init (xs @ [x]) m =\n  last_message_hold_init xs m @\n    [if x = \\<NoMsg> then last_message (m # xs) else x]\"", "lemma last_message_hold_init_append[rule_format]: \"\n  \\<And>xs m. last_message_hold_init (xs @ ys) m =\n  last_message_hold_init xs m @ last_message_hold_init ys (last_message (m # xs))\"", "lemma last_message_hold_length[simp]: \"length (last_message_hold xs) = length xs\"", "lemma last_message_hold_Nil[simp]: \"last_message_hold [] = []\"", "lemma last_message_hold_one[simp]: \"last_message_hold [x] = [x]\"", "lemma last_message_hold_nth: \"\n  i < length xs \\<Longrightarrow> last_message_hold xs ! i = last_message (xs \\<down> Suc i)\"", "lemma last_message_hold_last: \"\n  xs \\<noteq> [] \\<Longrightarrow> last (last_message_hold xs) = last_message xs\"", "lemma last_message_hold_take: \"\n  last_message_hold xs \\<down> n = last_message_hold (xs \\<down> n)\"", "lemma last_message_hold_snoc: \"\n  last_message_hold (xs @ [x]) =\n  last_message_hold xs @ [if x = \\<NoMsg> then last_message xs else x]\"", "lemma last_message_hold_append: \"\n  last_message_hold (xs @ ys) =\n  last_message_hold xs @ last_message_hold_init ys (last_message xs)\"", "lemma last_message_hold_append': \"\n  last_message_hold (xs @ ys) =\n  last_message_hold xs @ tl (last_message_hold (last_message xs # ys))\"", "lemma last_message_last_message_hold[simp]: \"\n  last_message (last_message_hold xs) = last_message xs\"", "lemma last_message_hold_idem[simp]: \"\n  last_message_hold (last_message_hold xs) = last_message_hold xs\"", "lemma f_last_message_hold_0[simp]: \"xs \\<longmapsto>\\<^sub>f 0 = last_message_hold xs\"", "lemma f_last_message_hold_1[simp]: \"xs \\<longmapsto>\\<^sub>f (Suc 0) = xs\"", "lemma f_last_message_hold_Nil[simp]: \"[] \\<longmapsto>\\<^sub>f k = []\"", "lemma f_last_message_hold_length[simp]: \"length (xs \\<longmapsto>\\<^sub>f k) = length xs\"", "lemma f_last_message_hold_le: \"length xs \\<le> k \\<Longrightarrow> xs \\<longmapsto>\\<^sub>f k = last_message_hold xs\"", "lemma f_last_message_hold_append_mult: \"\n  length xs = m * k \\<Longrightarrow> (xs @ ys) \\<longmapsto>\\<^sub>f k = xs \\<longmapsto>\\<^sub>f k @ (ys \\<longmapsto>\\<^sub>f k)\"", "lemma f_last_message_hold_append_mod: \"\n  length xs mod k = 0 \\<Longrightarrow> (xs @ ys) \\<longmapsto>\\<^sub>f k = xs \\<longmapsto>\\<^sub>f k @ (ys \\<longmapsto>\\<^sub>f k)\"", "lemma f_last_message_hold_nth[rule_format]: \"\n  \\<forall>n. n < length xs \\<longrightarrow> xs \\<longmapsto>\\<^sub>f k ! n = last_message (xs \\<up> (n div k * k) \\<down> Suc (n mod k))\"", "lemma f_last_message_hold_take: \"xs \\<down> n \\<longmapsto>\\<^sub>f k = xs \\<longmapsto>\\<^sub>f k \\<down> n\"", "lemma f_last_message_hold_drop_mult: \"\n  xs \\<up> (n * k) \\<longmapsto>\\<^sub>f k = xs \\<longmapsto>\\<^sub>f k \\<up> (n * k)\"", "lemma f_last_message_hold_drop_mod: \"\n  n mod k = 0 \\<Longrightarrow> xs \\<up> n \\<longmapsto>\\<^sub>f k = xs \\<longmapsto>\\<^sub>f k \\<up> n\"", "lemma f_last_message_hold_idem: \"xs \\<longmapsto>\\<^sub>f k \\<longmapsto>\\<^sub>f k = xs \\<longmapsto>\\<^sub>f k\"", "lemma f_shrink_nth_eq_f_last_message_hold_last: \"\n  n < length xs div k \\<Longrightarrow> xs \\<div>\\<^sub>f k ! n = last (xs \\<longmapsto>\\<^sub>f k \\<up> (n * k) \\<down> k)\"", "lemma f_shrink_nth_eq_f_last_message_hold_nth: \"\n  n < length xs div k \\<Longrightarrow> xs \\<div>\\<^sub>f k ! n = xs \\<longmapsto>\\<^sub>f k ! (n * k + k - Suc 0)\"", "lemma last_message_f_last_message_hold: \"\n  last_message (xs \\<longmapsto>\\<^sub>f k) = last_message xs\"", "lemma i_last_message_hold_0[simp]: \"f \\<longmapsto>\\<^sub>i 0 = (\\<lambda>n. last_message (f \\<Down> Suc n))\"", "lemma i_last_message_hold_1[simp]: \"f \\<longmapsto>\\<^sub>i Suc 0 = f\"", "lemma i_last_message_hold_nth: \"\n  (f \\<longmapsto>\\<^sub>i k) n = last_message (f \\<Up> (n - n mod k) \\<Down> Suc (n mod k))\"", "lemma i_last_message_hold_i_append_mult: \"\n  length xs = m * k \\<Longrightarrow> (xs \\<frown> f) \\<longmapsto>\\<^sub>i k = (xs \\<longmapsto>\\<^sub>f k) \\<frown> (f \\<longmapsto>\\<^sub>i k)\"", "lemma i_last_message_hold_i_append_mod: \"\n  length xs mod k = 0 \\<Longrightarrow> (xs \\<frown> f) \\<longmapsto>\\<^sub>i k = (xs \\<longmapsto>\\<^sub>f k) \\<frown> (f \\<longmapsto>\\<^sub>i k)\"", "lemma i_last_message_hold_i_take: \"f \\<Down> n \\<longmapsto>\\<^sub>f k = (f \\<longmapsto>\\<^sub>i k) \\<Down> n\"", "lemma i_last_message_hold_i_drop_mult: \"\n  f \\<Up> (n * k) \\<longmapsto>\\<^sub>i k = f \\<longmapsto>\\<^sub>i k \\<Up> (n * k)\"", "lemma i_last_message_hold_i_drop_mod: \"\n  n mod k = 0 \\<Longrightarrow> f \\<Up> n \\<longmapsto>\\<^sub>i k = f \\<longmapsto>\\<^sub>i k \\<Up> n\"", "lemma i_last_message_hold_idem: \"f \\<longmapsto>\\<^sub>i k \\<longmapsto>\\<^sub>i k = f \\<longmapsto>\\<^sub>i k\"", "lemma i_shrink_nth_eq_i_last_message_hold_nth: \"\n  0 < k \\<Longrightarrow> (f \\<div>\\<^sub>i k) n = (f \\<longmapsto>\\<^sub>i k) (n * k + k - Suc 0)\"", "lemma i_shrink_nth_eq_i_last_message_hold_last: \"\n  0 < k \\<Longrightarrow> (f \\<div>\\<^sub>i k) n = last (f \\<longmapsto>\\<^sub>i k \\<Up> (n * k) \\<Down> k)\"", "lemma f_shrink_last_0[simp]: \"xs \\<div>\\<^bsub>fl\\<^esub> 0 = []\"", "lemma f_shrink_last_1[simp]: \"xs \\<div>\\<^bsub>fl\\<^esub> Suc 0 = xs\"", "lemma f_shrink_last_Nil[simp]: \"[] \\<div>\\<^bsub>fl\\<^esub> k = []\"", "lemma f_shrink_last_length: \"length (xs \\<div>\\<^bsub>fl\\<^esub> k) = length xs div k\"", "lemma f_shrink_last_empty_conv: \"\n  0 < k \\<Longrightarrow> (xs \\<div>\\<^bsub>fl\\<^esub> k = []) = (length xs < k)\"", "lemma f_shrink_last_Cons: \"\n  \\<lbrakk> 0 < k;\n length xs = k \\<rbrakk> \\<Longrightarrow> (xs @ ys) \\<div>\\<^bsub>fl\\<^esub> k = last xs # (ys \\<div>\\<^bsub>fl\\<^esub> k)\"", "lemma f_shrink_last_one: \"\n  \\<lbrakk> 0 < k; length xs = k \\<rbrakk> \\<Longrightarrow> xs \\<div>\\<^bsub>fl\\<^esub> k = [last xs]\"", "lemma f_shrink_last_eq_f_shrink_last_take: \"\n  xs \\<down> (length xs div k * k) \\<div>\\<^bsub>fl\\<^esub> k = xs \\<div>\\<^bsub>fl\\<^esub> k\"", "lemma f_shrink_last_nth: \"\n  n < length xs div k \\<Longrightarrow> (xs \\<div>\\<^bsub>fl\\<^esub> k) ! n = xs ! (n * k + k - Suc 0)\"", "lemma f_shrink_last_hd: \"\n  \\<lbrakk> 0 < k; k \\<le> length xs \\<rbrakk> \\<Longrightarrow> hd (xs \\<div>\\<^bsub>fl\\<^esub> k) = xs ! (k - Suc 0)\"", "lemma f_shrink_last_map: \"(map f xs) \\<div>\\<^bsub>fl\\<^esub> k = map f (xs \\<div>\\<^bsub>fl\\<^esub> k)\"", "lemma f_shrink_last_append_mod: \"\n  length xs mod k = 0 \\<Longrightarrow> (xs @ ys) \\<div>\\<^bsub>fl\\<^esub> k = xs \\<div>\\<^bsub>fl\\<^esub> k @ (ys \\<div>\\<^bsub>fl\\<^esub> k)\"", "lemma f_shrink_last_append_mult: \"\n  length xs = m * k \\<Longrightarrow> (xs @ ys) \\<div>\\<^bsub>fl\\<^esub> k = xs \\<div>\\<^bsub>fl\\<^esub> k @ (ys \\<div>\\<^bsub>fl\\<^esub> k)\"", "lemma f_shrink_last_snoc: \"\n  \\<lbrakk> 0 < k; length ys = k; length xs mod k = 0 \\<rbrakk> \\<Longrightarrow>\n  (xs @ ys) \\<div>\\<^bsub>fl\\<^esub> k = xs \\<div>\\<^bsub>fl\\<^esub> k @ [last ys]\"", "lemma f_shrink_last_last: \"\n  length xs mod k = 0 \\<Longrightarrow> last (xs \\<div>\\<^bsub>fl\\<^esub> k) = last xs\"", "lemma f_shrink_last_replicate: \"m\\<^bsup>n\\<^esup> \\<div>\\<^bsub>fl\\<^esub> k = m\\<^bsup>n div k\\<^esup>\"", "lemma f_shrink_last_take: \"\n  xs \\<down> n \\<div>\\<^bsub>fl\\<^esub> k = xs \\<div>\\<^bsub>fl\\<^esub> k \\<down> (n div k)\"", "lemma f_shrink_last_take_mult: \"xs \\<down> (n * k) \\<div>\\<^bsub>fl\\<^esub> k = xs \\<div>\\<^bsub>fl\\<^esub> k \\<down> n\"", "lemma f_shrink_last_drop_mult: \"xs \\<up> (n * k) \\<div>\\<^bsub>fl\\<^esub> k = xs \\<div>\\<^bsub>fl\\<^esub> k \\<up> n\"", "lemma f_shrink_last_drop_mod: \"\n  n mod k = 0 \\<Longrightarrow> xs \\<up> n \\<div>\\<^bsub>fl\\<^esub> k = xs \\<div>\\<^bsub>fl\\<^esub> k \\<up> (n div k)\"", "lemma f_shrink_last_assoc: \"xs \\<div>\\<^bsub>fl\\<^esub> a \\<div>\\<^bsub>fl\\<^esub> b = xs \\<div>\\<^bsub>fl\\<^esub> (a * b)\"", "lemma f_shrink_last_commute: \"xs \\<div>\\<^bsub>fl\\<^esub> a \\<div>\\<^bsub>fl\\<^esub> b = xs \\<div>\\<^bsub>fl\\<^esub> b \\<div>\\<^bsub>fl\\<^esub> a\"", "lemma i_shrink_last_1[simp]: \"f \\<div>\\<^bsub>il\\<^esub> Suc 0 = f\"", "lemma i_shrink_last_nth: \"0 < k \\<Longrightarrow> (f \\<div>\\<^bsub>il\\<^esub> k) n =  f (n * k + k - Suc 0)\"", "lemma i_shrink_last_nth': \"0 < k \\<Longrightarrow> (f \\<div>\\<^bsub>il\\<^esub> k) n =  f (Suc n * k - Suc 0)\"", "lemma i_shrink_last_hd: \"(f \\<div>\\<^bsub>il\\<^esub> k) 0 = last (f \\<Down> k)\"", "lemma i_shrink_last_o: \"0 < k \\<Longrightarrow> (f \\<circ> g) \\<div>\\<^bsub>il\\<^esub> k = f \\<circ> (g \\<div>\\<^bsub>il\\<^esub> k)\"", "lemma i_shrink_last_i_append_mod: \"\n  length xs mod k = 0 \\<Longrightarrow> (xs \\<frown> f) \\<div>\\<^bsub>il\\<^esub> k = xs \\<div>\\<^bsub>fl\\<^esub> k \\<frown> (f \\<div>\\<^bsub>il\\<^esub> k)\"", "lemma i_shrink_last_i_append_mult: \"\n  length xs = m * k \\<Longrightarrow> (xs \\<frown> f) \\<div>\\<^bsub>il\\<^esub> k = xs \\<div>\\<^bsub>fl\\<^esub> k \\<frown> (f \\<div>\\<^bsub>il\\<^esub> k)\"", "lemma i_shrink_last_Cons: \"\n  \\<lbrakk> 0 < k; length xs = k \\<rbrakk> \\<Longrightarrow> (xs \\<frown> f) \\<div>\\<^bsub>il\\<^esub> k = [last xs] \\<frown> (f \\<div>\\<^bsub>il\\<^esub> k)\"", "lemma i_shrink_last_const: \"0 < k \\<Longrightarrow> (\\<lambda>x. m) \\<div>\\<^bsub>il\\<^esub> k = (\\<lambda>x. m)\"", "lemma i_shrink_last_i_take_mult: \"\n  0 < k \\<Longrightarrow> f \\<Down> (n * k) \\<div>\\<^bsub>fl\\<^esub> k = f \\<div>\\<^bsub>il\\<^esub> k \\<Down> n\"", "lemma i_shrink_last_i_take: \"\n  f \\<Down> n \\<div>\\<^bsub>fl\\<^esub> k = f \\<div>\\<^bsub>il\\<^esub> k \\<Down> (n div k)\"", "lemma i_shrink_last_i_drop_mult: \"f \\<Up> (n * k) \\<div>\\<^bsub>il\\<^esub> k = f \\<div>\\<^bsub>il\\<^esub> k \\<Up> n\"", "lemma i_shrink_last_i_drop_mod: \"\n  n mod k = 0 \\<Longrightarrow> f \\<Up> n \\<div>\\<^bsub>il\\<^esub> k = f \\<div>\\<^bsub>il\\<^esub> k \\<Up> (n div k)\"", "lemma i_shrink_last_assoc: \"f \\<div>\\<^bsub>il\\<^esub> a \\<div>\\<^bsub>il\\<^esub> b = f \\<div>\\<^bsub>il\\<^esub> (a * b)\"", "lemma i_shrink_last_commute: \"f \\<div>\\<^bsub>il\\<^esub> a \\<div>\\<^bsub>il\\<^esub> b = f \\<div>\\<^bsub>il\\<^esub> b \\<div>\\<^bsub>il\\<^esub> a\"", "lemma f_shrink_eq_f_last_message_hold_shrink_last: \"\n  xs \\<div>\\<^sub>f k = xs \\<longmapsto>\\<^sub>f k \\<div>\\<^bsub>fl\\<^esub> k\"", "lemma i_shrink_eq_i_last_message_hold_shrink_last: \"\n  0 < k \\<Longrightarrow> f \\<div>\\<^sub>i k = f \\<longmapsto>\\<^sub>i k \\<div>\\<^bsub>il\\<^esub> k\""], "translations": [["", "lemma not_NoMsg_eq: \"(m \\<noteq> \\<NoMsg>) = (\\<exists>x. m = \\<Msg> x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (m \\<noteq> NoMsg) = (\\<exists>x. m = Msg x)", "by (case_tac m, simp_all)"], ["", "lemma not_Msg_eq: \"(\\<forall>x. m \\<noteq> \\<Msg> x) = (m = \\<NoMsg>) \""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>x. m \\<noteq> Msg x) = (m = NoMsg)", "by (case_tac m, simp_all)"], ["", "primrec the_af :: \"'a message_af \\<Rightarrow> 'a\"\n  where \"the_af (\\<Msg> x) = x\""], ["", "text \\<open>\n  By this definition one can determine,\n  whether data elements of different data structures with messages,\n  especially product types of arbitrary sizes and records,\n  are pointwise equal to NoMsg, i.e., contain only NoMsg entries.\\<close>"], ["", "consts is_NoMsg :: \"'a \\<Rightarrow> bool\""], ["", "overloading is_NoMsg \\<equiv> \"is_NoMsg :: 'a message_af \\<Rightarrow> bool\"\nbegin"], ["", "primrec is_NoMsg :: \"'a message_af \\<Rightarrow> bool\"\nwhere\n  \"is_NoMsg \\<NoMsg> = True\"\n| \"is_NoMsg (\\<Msg> x) = False\""], ["", "end"], ["", "overloading is_NoMsg \\<equiv> \"is_NoMsg :: ('a \\<times> 'b) \\<Rightarrow> bool\"\nbegin"], ["", "definition is_NoMsg_tuple_def  :\n  \"is_NoMsg (p::'a \\<times> 'b) \\<equiv> (is_NoMsg (fst p) \\<and> is_NoMsg (snd p))\""], ["", "end"], ["", "overloading is_NoMsg \\<equiv> \"is_NoMsg :: 'a set \\<Rightarrow> bool\"\nbegin"], ["", "definition is_NoMsg_set_def :\n  \"is_NoMsg (A::'a set) \\<equiv> (\\<forall>x\\<in>A. is_NoMsg x)\""], ["", "end"], ["", "record SomeRecordExample =\n  Field1 :: \"nat message_af\"\n  Field2 :: \"int message_af\"\n  Field3 :: \"int message_af\""], ["", "overloading is_NoMsg \\<equiv> \"is_NoMsg :: 'a SomeRecordExample_scheme \\<Rightarrow> bool\"\nbegin"], ["", "definition is_NoMsg_SomeRecordExample_def :\n  \"is_NoMsg (r:: 'a SomeRecordExample_scheme) \\<equiv>\n    Field1 r = \\<NoMsg> \\<and> Field2 r = \\<NoMsg> \\<and> Field3 r = \\<NoMsg>\""], ["", "end"], ["", "definition is_Msg :: \"'a \\<Rightarrow> bool\"\n  where \"is_Msg x \\<equiv> (\\<not> is_NoMsg x)\""], ["", "lemma is_NoMsg_message_af_conv: \"is_NoMsg m = (case m of \\<NoMsg> \\<Rightarrow> True | \\<Msg> x \\<Rightarrow> False)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_NoMsg m =\n    (case m of NoMsg \\<Rightarrow> True | Msg x \\<Rightarrow> False)", "by (case_tac m, simp+)"], ["", "lemma is_NoMsg_message_af_conv2: \"is_NoMsg m = (m = \\<NoMsg>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_NoMsg m = (m = NoMsg)", "by (case_tac m, simp+)"], ["", "lemma is_Msg_message_af_conv: \"is_Msg m = (case m of \\<NoMsg> \\<Rightarrow> False | \\<Msg> x \\<Rightarrow> True)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_Msg m =\n    (case m of NoMsg \\<Rightarrow> False | Msg x \\<Rightarrow> True)", "by (unfold is_Msg_def, case_tac m, simp+)"], ["", "lemma is_Msg_message_af_conv2: \"is_Msg m = (m \\<noteq> \\<NoMsg>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_Msg m = (m \\<noteq> NoMsg)", "by (unfold is_Msg_def, case_tac m, simp+)"], ["", "text \\<open>Collection for definitions for \\<open>is_NoMsg\\<close>.\\<close>"], ["", "named_theorems is_NoMsg_defs"], ["", "declare\n  is_NoMsg_tuple_def[is_NoMsg_defs]\n  is_NoMsg_set_def [is_NoMsg_defs]\n  is_NoMsg_SomeRecordExample_def[is_NoMsg_defs]\n  is_Msg_def[is_NoMsg_defs]"], ["", "lemma not_is_NoMsg: \"(\\<not> is_NoMsg m) = is_Msg m\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<not> is_NoMsg m) = is_Msg m", "by (simp add: is_NoMsg_defs)"], ["", "lemma not_is_Msg: \"(\\<not> is_Msg m) = is_NoMsg m\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<not> is_Msg m) = is_NoMsg m", "by (simp add: is_NoMsg_defs)"], ["", "lemma \"is_NoMsg (\\<NoMsg>::(nat message_af))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_NoMsg NoMsg", "by simp"], ["", "lemma \"is_NoMsg (\\<NoMsg>::(nat message_af), \\<NoMsg>::(nat message_af))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_NoMsg (NoMsg, NoMsg)", "by (simp add: is_NoMsg_defs)"], ["", "lemma \"is_NoMsg (\\<NoMsg>::(nat message_af), \\<NoMsg>::(nat message_af), \\<NoMsg>::(nat message_af))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_NoMsg (NoMsg, NoMsg, NoMsg)", "by (simp add: is_NoMsg_defs)"], ["", "lemma \"is_Msg (\\<NoMsg>::(nat message_af), \\<Msg> (1::nat), \\<NoMsg>::(nat message_af))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_Msg (NoMsg, Msg 1, NoMsg)", "by (simp add: is_NoMsg_defs)"], ["", "lemma \"is_NoMsg {\\<NoMsg>::(nat message_af), \\<NoMsg>}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_NoMsg {NoMsg, NoMsg}", "by (simp add: is_NoMsg_defs)"], ["", "lemma \"is_Msg {\\<NoMsg>::(nat message_af), \\<Msg> 1}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_Msg {NoMsg, Msg 1}", "by (simp add: is_NoMsg_defs)"], ["", "lemma \"is_NoMsg \\<lparr> Field1 = \\<NoMsg>, Field2 = \\<NoMsg>, Field3 = \\<NoMsg> \\<rparr>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_NoMsg \\<lparr>Field1 = NoMsg, Field2 = NoMsg, Field3 = NoMsg\\<rparr>", "by (simp add: is_NoMsg_defs)"], ["", "lemma \"is_Msg  \\<lparr> Field1 = \\<NoMsg>, Field2 = Msg 1, Field3 = \\<NoMsg> \\<rparr>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_Msg \\<lparr>Field1 = NoMsg, Field2 = Msg 1, Field3 = NoMsg\\<rparr>", "by (simp add: is_NoMsg_defs)"], ["", "subsubsection \\<open>Time abstraction\\<close>"], ["", "(* Time abstraction:\n   Extracts non-empty messages from a stream =\n   time abstraction for time-synchronous streams*)"], ["", "primrec untime :: \"'a fstream_af \\<Rightarrow> 'a list\" (*(\"\\<registered>_\" 100)*)\nwhere\n  \"untime [] = []\"\n| \"untime (x#xs) =\n    (if x = \\<NoMsg>\n     then (untime xs)\n     else (the_af x) # (untime xs))\""], ["", "lemma untime_eq_filter[rule_format]: \"\n  map (\\<lambda>x. \\<Msg> x) (untime s) = filter (\\<lambda>x. x \\<noteq> \\<NoMsg>) s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. map Msg (untime s) = filter (\\<lambda>x. x \\<noteq> NoMsg) s", "apply (induct s, simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a s.\n       map Msg (untime s) =\n       filter (\\<lambda>x. x \\<noteq> NoMsg) s \\<Longrightarrow>\n       map Msg (untime (a # s)) =\n       filter (\\<lambda>x. x \\<noteq> NoMsg) (a # s)", "apply (case_tac a, simp_all)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "text \\<open>The following lemma involves @{term the_af} function\n  and thus is some more limited than the previous lemma\\<close>"], ["", "corollary untime_eq_filter2[rule_format]: \"\n  untime s = map (\\<lambda>x. the_af x) (filter (\\<lambda>x. x \\<noteq> \\<NoMsg>) s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. untime s = map the_af (filter (\\<lambda>x. x \\<noteq> NoMsg) s)", "by (induct s, simp_all)"], ["", "definition untime_length :: \"'a fstream_af \\<Rightarrow> nat\"\n  where \"untime_length s \\<equiv> length (untime s)\""], ["", "primrec untime_length_cnt :: \"'a fstream_af \\<Rightarrow> nat\"\nwhere\n  \"untime_length_cnt [] = 0\"\n| \"untime_length_cnt (x # xs) =\n    (if x = \\<NoMsg> then 0 else Suc 0) + untime_length_cnt xs\""], ["", "lemma untime_length_eq_untime_length_cnt: \"\n  untime_length s = untime_length_cnt s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. untime_length s = untime_length_cnt s", "by (induct s, simp_all add: untime_length_def)"], ["", "definition untime_length_filter :: \"'a fstream_af \\<Rightarrow> nat\"\n  where \"untime_length_filter s \\<equiv> length (filter (\\<lambda>x. x \\<noteq> \\<NoMsg>) s)\""], ["", "lemma untime_length_filter_eq_untime_length: \"\n  untime_length_filter s = untime_length s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. untime_length_filter s = untime_length s", "apply (unfold untime_length_def untime_length_filter_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. length (filter (\\<lambda>x. x \\<noteq> NoMsg) s) = length (untime s)", "apply (simp add: untime_eq_filter2)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma untime_empty_conv: \"(untime s = []) = (\\<forall>n<length s. s ! n = \\<NoMsg>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (untime s = []) = (\\<forall>n<length s. s ! n = NoMsg)", "apply (induct s)"], ["proof (prove)\ngoal (2 subgoals):\n 1. (untime [] = []) = (\\<forall>n<length []. [] ! n = NoMsg)\n 2. \\<And>a s.\n       (untime s = []) =\n       (\\<forall>n<length s. s ! n = NoMsg) \\<Longrightarrow>\n       (untime (a # s) = []) =\n       (\\<forall>n<length (a # s). (a # s) ! n = NoMsg)", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a s.\n       (untime s = []) =\n       (\\<forall>n<length s. s ! n = NoMsg) \\<Longrightarrow>\n       (untime (a # s) = []) =\n       (\\<forall>n<length (a # s). (a # s) ! n = NoMsg)", "apply (force simp add: nth.simps split: nat.split)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma untime_not_empty_conv: \"(untime s \\<noteq> []) = (\\<exists>n<length s. s ! n \\<noteq> \\<NoMsg>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (untime s \\<noteq> []) = (\\<exists>n<length s. s ! n \\<noteq> NoMsg)", "by (simp add: untime_empty_conv)"], ["", "corollary untime_empty_imp_NoMsg[rule_format]: \"\n  \\<lbrakk> untime s = []; n < length s \\<rbrakk> \\<Longrightarrow> s ! n = \\<NoMsg>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>untime s = []; n < length s\\<rbrakk>\n    \\<Longrightarrow> s ! n = NoMsg", "by (rule untime_empty_conv[THEN iffD1, rule_format])"], ["", "lemma untime_nth_eq_filter: \"\n  n < untime_length s \\<Longrightarrow>\n  \\<Msg> (untime s ! n) = (filter (\\<lambda>x. x \\<noteq> \\<NoMsg>) s) ! n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. n < untime_length s \\<Longrightarrow>\n    Msg (untime s ! n) = filter (\\<lambda>x. x \\<noteq> NoMsg) s ! n", "by (simp add: untime_eq_filter[symmetric] untime_length_def)"], ["", "corollary untime_nth_eq_filter2: \"\n  n < untime_length s \\<Longrightarrow>\n  untime s ! n = the_af ((filter (\\<lambda>x. x \\<noteq> \\<NoMsg>) s) ! n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. n < untime_length s \\<Longrightarrow>\n    untime s ! n = the_af (filter (\\<lambda>x. x \\<noteq> NoMsg) s ! n)", "by (simp add: untime_length_def untime_nth_eq_filter[symmetric])"], ["", "lemma untime_hd_eq_filter_hd: \"\n  untime s \\<noteq> [] \\<Longrightarrow>\n  \\<Msg> (hd (untime s)) = hd (filter (\\<lambda>x. x \\<noteq> \\<NoMsg>) s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. untime s \\<noteq> [] \\<Longrightarrow>\n    Msg (hd (untime s)) = hd (filter (\\<lambda>x. x \\<noteq> NoMsg) s)", "by (simp add: untime_eq_filter[symmetric] hd_eq_first[symmetric])"], ["", "corollary untime_hd_eq_filter_hd2: \"\n  untime s \\<noteq> [] \\<Longrightarrow>\n  hd (untime s) = the_af (hd (filter (\\<lambda>x. x \\<noteq> \\<NoMsg>) s))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. untime s \\<noteq> [] \\<Longrightarrow>\n    hd (untime s) = the_af (hd (filter (\\<lambda>x. x \\<noteq> NoMsg) s))", "by (simp add: untime_hd_eq_filter_hd[symmetric])"], ["", "lemma untime_last_eq_filter_last: \"\n  untime s \\<noteq> [] \\<Longrightarrow>\n  \\<Msg> (last (untime s)) = last (filter (\\<lambda>x. x \\<noteq> \\<NoMsg>) s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. untime s \\<noteq> [] \\<Longrightarrow>\n    Msg (last (untime s)) = last (filter (\\<lambda>x. x \\<noteq> NoMsg) s)", "by (simp add: untime_eq_filter[symmetric] last_nth)"], ["", "corollary untime_last_eq_filter_last2: \"\n  untime s \\<noteq> [] \\<Longrightarrow>\n  last (untime s) = the_af (last (filter (\\<lambda>x. x \\<noteq> \\<NoMsg>) s))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. untime s \\<noteq> [] \\<Longrightarrow>\n    last (untime s) =\n    the_af (last (filter (\\<lambda>x. x \\<noteq> NoMsg) s))", "by (simp add: untime_last_eq_filter_last[symmetric])"], ["", "subsection \\<open>Expanding and compressing lists and streams\\<close>"], ["", "subsubsection \\<open>Expanding message streams\\<close>"], ["", "primrec f_expand :: \"'a fstream_af \\<Rightarrow> nat \\<Rightarrow> 'a fstream_af\" (infixl \"\\<odot>\\<^sub>f\" 100)\nwhere\n  f_expand_Nil: \"[] \\<odot>\\<^sub>f k = []\"\n| f_expand_Cons: \"(x # xs) \\<odot>\\<^sub>f k =\n    (if 0 < k then x # \\<NoMsg>\\<^bsup>k - Suc 0\\<^esup> @ (xs \\<odot>\\<^sub>f k) else [])\""], ["", "definition i_expand :: \"'a istream_af \\<Rightarrow> nat \\<Rightarrow> 'a istream_af\" (infixl \"\\<odot>\\<^sub>i\" 100)\nwhere\n  \"i_expand \\<equiv> \\<lambda>f k n.\n   (if k = 0 then \\<NoMsg> else\n    if n mod k = 0 then f (n div k) else \\<NoMsg>)\""], ["", "primrec f_expand_Suc :: \"'a fstream_af \\<Rightarrow> nat \\<Rightarrow> 'a fstream_af\" (infixl \"\\<odot>\\<^bsub>fSuc\\<^esub>\" 100)\nwhere\n  \"f_expand_Suc [] k = []\"\n| \"f_expand_Suc (x # xs) k = x # \\<NoMsg>\\<^bsup>k\\<^esup> @ (f_expand_Suc xs k)\""], ["", "definition i_expand_Suc :: \"'a istream_af \\<Rightarrow> nat \\<Rightarrow> 'a istream_af\" (infixl \"\\<odot>\\<^bsub>iSuc\\<^esub>\" 100)\n  where \"i_expand_Suc \\<equiv> \\<lambda>f k n. if n mod (Suc k) = 0 then f (n div (Suc k)) else \\<NoMsg>\""], ["", "notation\n  f_expand  (infixl \"\\<odot>\" 100) and\n  i_expand  (infixl \"\\<odot>\" 100)"], ["", "lemma length_f_expand_Suc[simp]: \"length (f_expand_Suc xs k) = length xs * Suc k\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length (xs \\<odot>\\<^bsub>fSuc\\<^esub> k) = length xs * Suc k", "by (induct xs, simp+)"], ["", "lemma i_expand_if: \"\n  f \\<odot>\\<^sub>i k = (if k = 0 then (\\<lambda>n. \\<NoMsg>) else\n    (\\<lambda>n. if n mod k = 0 then f (n div k) else \\<NoMsg>))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f \\<odot> k =\n    (if k = 0 then \\<lambda>n. NoMsg\n     else (\\<lambda>n. if n mod k = 0 then f (n div k) else NoMsg))", "by (simp add: i_expand_def ilist_eq_iff)"], ["", "lemma f_expand_one: \"0 < k \\<Longrightarrow> [a] \\<odot>\\<^sub>f k = a # \\<NoMsg>\\<^bsup>k - Suc 0\\<^esup>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < k \\<Longrightarrow>\n    [a] \\<odot> k = a # NoMsg\\<^bsup>k - Suc 0\\<^esup>", "by simp"], ["", "lemma f_expand_0[simp]: \"xs \\<odot>\\<^sub>f 0 = []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. xs \\<odot> 0 = []", "by (induct xs, simp+)"], ["", "corollary f_expand_0_is_zero_element: \"xs \\<odot>\\<^sub>f 0 = ys \\<odot>\\<^sub>f 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. xs \\<odot> 0 = ys \\<odot> 0", "by simp"], ["", "lemma i_expand_0[simp]: \"f \\<odot>\\<^sub>i 0 = (\\<lambda>n. \\<NoMsg>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f \\<odot> 0 = (\\<lambda>n. NoMsg)", "by (simp add: i_expand_def)"], ["", "corollary i_expand_0_is_zero_element: \"f \\<odot>\\<^sub>i 0 = g \\<odot>\\<^sub>i 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f \\<odot> 0 = g \\<odot> 0", "by simp"], ["", "lemma f_expand_gr0_f_expand_Suc: \"0 < k \\<Longrightarrow> xs \\<odot>\\<^sub>f k = f_expand_Suc xs (k - Suc 0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < k \\<Longrightarrow>\n    xs \\<odot> k = xs \\<odot>\\<^bsub>fSuc\\<^esub> (k - Suc 0)", "by (induct xs, simp+)"], ["", "lemma i_expand_gr0_i_expand_Suc: \"0 < k \\<Longrightarrow> f \\<odot>\\<^sub>i k = i_expand_Suc f (k - Suc 0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < k \\<Longrightarrow>\n    f \\<odot> k = f \\<odot>\\<^bsub>iSuc\\<^esub> (k - Suc 0)", "by (simp add: i_expand_def i_expand_Suc_def ilist_eq_iff)"], ["", "lemma i_expand_gr0: \"\n  0 < k \\<Longrightarrow> f \\<odot>\\<^sub>i k = (\\<lambda>n. if n mod k = 0 then f (n div k) else \\<NoMsg>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < k \\<Longrightarrow>\n    f \\<odot> k = (\\<lambda>n. if n mod k = 0 then f (n div k) else NoMsg)", "by (simp add: i_expand_if)"], ["", "lemma f_expand_1[simp]: \"xs \\<odot>\\<^sub>f Suc 0 = xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. xs \\<odot> Suc 0 = xs", "by (induct xs, simp+)"], ["", "lemma i_expand_1[simp]: \"f \\<odot>\\<^sub>i Suc 0 = f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f \\<odot> Suc 0 = f", "by (simp add: i_expand_gr0)"], ["", "lemma f_expand_length[simp]: \"length (xs \\<odot>\\<^sub>f k) = length xs * k\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length (xs \\<odot> k) = length xs * k", "apply (case_tac k, simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>nat.\n       k = Suc nat \\<Longrightarrow> length (xs \\<odot> k) = length xs * k", "apply (simp add: f_expand_gr0_f_expand_Suc)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma f_expand_empty_conv: \"(xs \\<odot>\\<^sub>f k = []) = (xs = [] \\<or> k = 0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (xs \\<odot> k = []) = (xs = [] \\<or> k = 0)", "by (simp add: length_0_conv[symmetric] del: length_0_conv)"], ["", "lemma f_expand_not_empty_conv: \"(xs \\<odot>\\<^sub>f k \\<noteq> []) = (xs \\<noteq> [] \\<and> 0 < k)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (xs \\<odot> k \\<noteq> []) = (xs \\<noteq> [] \\<and> 0 < k)", "by (simp add: f_expand_empty_conv)"], ["", "lemma f_expand_Cons: \"\n  0 < k \\<Longrightarrow> (x # xs) \\<odot>\\<^sub>f k = x # \\<NoMsg>\\<^bsup>k - Suc 0\\<^esup> @ (xs \\<odot>\\<^sub>f k)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < k \\<Longrightarrow>\n    (x # xs) \\<odot> k = x # NoMsg\\<^bsup>k - Suc 0\\<^esup> @ xs \\<odot> k", "by simp"], ["", "lemma f_expand_append[simp]: \"\\<And>ys. (xs @ ys) \\<odot>\\<^sub>f k = (xs \\<odot>\\<^sub>f k) @ (ys \\<odot>\\<^sub>f k)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>ys. (xs @ ys) \\<odot> k = xs \\<odot> k @ ys \\<odot> k", "apply (case_tac \"k = 0\", simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>ys.\n       k \\<noteq> 0 \\<Longrightarrow>\n       (xs @ ys) \\<odot> k = xs \\<odot> k @ ys \\<odot> k", "apply (induct xs, simp+)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma f_expand_snoc: \"\n  0 < k \\<Longrightarrow> (xs @ [x]) \\<odot>\\<^sub>f k = xs \\<odot>\\<^sub>f k @ x # replicate (k - Suc 0) \\<NoMsg>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < k \\<Longrightarrow>\n    (xs @ [x]) \\<odot> k = xs \\<odot> k @ x # NoMsg\\<^bsup>k - Suc 0\\<^esup>", "by simp"], ["", "lemma f_expand_nth_mult: \"\\<And>n.\n  \\<lbrakk> n < length xs; 0 < k \\<rbrakk> \\<Longrightarrow> (xs \\<odot>\\<^sub>f k) ! (n * k) = xs ! n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>n < length xs; 0 < k\\<rbrakk>\n       \\<Longrightarrow> xs \\<odot> k ! (n * k) = xs ! n", "apply (induct xs)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>n.\n       \\<lbrakk>n < length []; 0 < k\\<rbrakk>\n       \\<Longrightarrow> [] \\<odot> k ! (n * k) = [] ! n\n 2. \\<And>a xs n.\n       \\<lbrakk>\\<And>n.\n                   \\<lbrakk>n < length xs; 0 < k\\<rbrakk>\n                   \\<Longrightarrow> xs \\<odot> k ! (n * k) = xs ! n;\n        n < length (a # xs); 0 < k\\<rbrakk>\n       \\<Longrightarrow> (a # xs) \\<odot> k ! (n * k) = (a # xs) ! n", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a xs n.\n       \\<lbrakk>\\<And>n.\n                   \\<lbrakk>n < length xs; 0 < k\\<rbrakk>\n                   \\<Longrightarrow> xs \\<odot> k ! (n * k) = xs ! n;\n        n < length (a # xs); 0 < k\\<rbrakk>\n       \\<Longrightarrow> (a # xs) \\<odot> k ! (n * k) = (a # xs) ! n", "apply (case_tac n, simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a xs n nat.\n       \\<lbrakk>\\<And>n.\n                   \\<lbrakk>n < length xs; 0 < k\\<rbrakk>\n                   \\<Longrightarrow> xs \\<odot> k ! (n * k) = xs ! n;\n        n < length (a # xs); 0 < k; n = Suc nat\\<rbrakk>\n       \\<Longrightarrow> (a # xs) \\<odot> k ! (n * k) = (a # xs) ! n", "apply (simp add: nth_append append_Cons[symmetric] del: append_Cons)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma i_expand_nth_mult: \"0 < k \\<Longrightarrow> (f \\<odot>\\<^sub>i k) (n * k) = f n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < k \\<Longrightarrow> (f \\<odot> k) (n * k) = f n", "by (simp add: i_expand_gr0)"], ["", "lemma f_expand_nth_if: \"\\<And>n.\n  n < length xs * k \\<Longrightarrow>\n  (xs \\<odot>\\<^sub>f k) ! n = (if n mod k = 0 then xs ! (n div k) else \\<NoMsg>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n.\n       n < length xs * k \\<Longrightarrow>\n       xs \\<odot> k ! n = (if n mod k = 0 then xs ! (n div k) else NoMsg)", "apply (case_tac \"k = 0\", simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>n < length xs * k; k \\<noteq> 0\\<rbrakk>\n       \\<Longrightarrow> xs \\<odot> k ! n =\n                         (if n mod k = 0 then xs ! (n div k) else NoMsg)", "apply (simp, intro conjI impI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>n.\n       \\<lbrakk>n < length xs * k; 0 < k; n mod k = 0\\<rbrakk>\n       \\<Longrightarrow> xs \\<odot> k ! n = xs ! (n div k)\n 2. \\<And>n.\n       \\<lbrakk>n < length xs * k; 0 < k; 0 < n mod k\\<rbrakk>\n       \\<Longrightarrow> xs \\<odot> k ! n = NoMsg", "apply (clarsimp simp: f_expand_nth_mult mult.commute[of k] elim!: dvdE)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>n < length xs * k; 0 < k; 0 < n mod k\\<rbrakk>\n       \\<Longrightarrow> xs \\<odot> k ! n = NoMsg", "apply (induct xs, simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a xs n.\n       \\<lbrakk>\\<And>n.\n                   \\<lbrakk>n < length xs * k; 0 < k; 0 < n mod k\\<rbrakk>\n                   \\<Longrightarrow> xs \\<odot> k ! n = NoMsg;\n        n < length (a # xs) * k; 0 < k; 0 < n mod k\\<rbrakk>\n       \\<Longrightarrow> (a # xs) \\<odot> k ! n = NoMsg", "apply (simp add: nth_append append_Cons[symmetric] del: append_Cons)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a xs n.\n       \\<lbrakk>\\<And>n.\n                   \\<lbrakk>n < length xs * k; 0 < n mod k\\<rbrakk>\n                   \\<Longrightarrow> xs \\<odot> k ! n = NoMsg;\n        n < k + length xs * k; 0 < k; 0 < n mod k\\<rbrakk>\n       \\<Longrightarrow> (n < k \\<longrightarrow>\n                          (a # NoMsg\\<^bsup>k - Suc 0\\<^esup>) ! n =\n                          NoMsg) \\<and>\n                         (\\<not> n < k \\<longrightarrow>\n                          xs \\<odot> k ! (n - k) = NoMsg)", "apply (intro conjI impI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a xs n.\n       \\<lbrakk>\\<And>n.\n                   \\<lbrakk>n < length xs * k; 0 < n mod k\\<rbrakk>\n                   \\<Longrightarrow> xs \\<odot> k ! n = NoMsg;\n        n < k + length xs * k; 0 < k; 0 < n mod k; n < k\\<rbrakk>\n       \\<Longrightarrow> (a # NoMsg\\<^bsup>k - Suc 0\\<^esup>) ! n = NoMsg\n 2. \\<And>a xs n.\n       \\<lbrakk>\\<And>n.\n                   \\<lbrakk>n < length xs * k; 0 < n mod k\\<rbrakk>\n                   \\<Longrightarrow> xs \\<odot> k ! n = NoMsg;\n        n < k + length xs * k; 0 < k; 0 < n mod k; \\<not> n < k\\<rbrakk>\n       \\<Longrightarrow> xs \\<odot> k ! (n - k) = NoMsg", "apply (simp add: nth_Cons')"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a xs n.\n       \\<lbrakk>\\<And>n.\n                   \\<lbrakk>n < length xs * k; 0 < n mod k\\<rbrakk>\n                   \\<Longrightarrow> xs \\<odot> k ! n = NoMsg;\n        n < k + length xs * k; 0 < k; 0 < n mod k; \\<not> n < k\\<rbrakk>\n       \\<Longrightarrow> xs \\<odot> k ! (n - k) = NoMsg", "apply (case_tac \"length xs = 0\", simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a xs n.\n       \\<lbrakk>\\<And>n.\n                   \\<lbrakk>n < length xs * k; 0 < n mod k\\<rbrakk>\n                   \\<Longrightarrow> xs \\<odot> k ! n = NoMsg;\n        n < k + length xs * k; 0 < k; 0 < n mod k; \\<not> n < k;\n        length xs \\<noteq> 0\\<rbrakk>\n       \\<Longrightarrow> xs \\<odot> k ! (n - k) = NoMsg", "apply (simp add: add.commute[of k] diff_less_conv[symmetric] mod_diff_self2)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "corollary f_expand_nth_mod_eq_0: \"\n  \\<lbrakk> n < length xs * k; n mod k = 0 \\<rbrakk> \\<Longrightarrow> (xs \\<odot>\\<^sub>f k) ! n = xs ! (n div k)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>n < length xs * k; n mod k = 0\\<rbrakk>\n    \\<Longrightarrow> xs \\<odot> k ! n = xs ! (n div k)", "by (simp add: f_expand_nth_if)"], ["", "corollary f_expand_nth_mod_neq_0: \"\n  \\<lbrakk> n < length xs * k; 0 < n mod k \\<rbrakk> \\<Longrightarrow> (xs \\<odot>\\<^sub>f k) ! n = \\<NoMsg>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>n < length xs * k; 0 < n mod k\\<rbrakk>\n    \\<Longrightarrow> xs \\<odot> k ! n = NoMsg", "by (simp add: f_expand_nth_if)"], ["", "lemma f_expand_nth_0_upto_k_minus_1_if: \"\n  \\<lbrakk> t < length xs; n = t * k + i; i < k \\<rbrakk> \\<Longrightarrow>\n  (xs \\<odot>\\<^sub>f k) ! n = (if i = 0 then xs ! t else \\<NoMsg>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>t < length xs; n = t * k + i; i < k\\<rbrakk>\n    \\<Longrightarrow> xs \\<odot> k ! n = (if i = 0 then xs ! t else NoMsg)", "apply (subst f_expand_nth_if)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>t < length xs; n = t * k + i; i < k\\<rbrakk>\n    \\<Longrightarrow> n < length xs * k\n 2. \\<lbrakk>t < length xs; n = t * k + i; i < k\\<rbrakk>\n    \\<Longrightarrow> (if n mod k = 0 then xs ! (n div k) else NoMsg) =\n                      (if i = 0 then xs ! t else NoMsg)", "apply (drule Suc_leI[of t])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>n = t * k + i; i < k; Suc t \\<le> length xs\\<rbrakk>\n    \\<Longrightarrow> n < length xs * k\n 2. \\<lbrakk>t < length xs; n = t * k + i; i < k\\<rbrakk>\n    \\<Longrightarrow> (if n mod k = 0 then xs ! (n div k) else NoMsg) =\n                      (if i = 0 then xs ! t else NoMsg)", "apply (drule mult_le_mono1[of _ _ k])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>n = t * k + i; i < k; Suc t * k \\<le> length xs * k\\<rbrakk>\n    \\<Longrightarrow> n < length xs * k\n 2. \\<lbrakk>t < length xs; n = t * k + i; i < k\\<rbrakk>\n    \\<Longrightarrow> (if n mod k = 0 then xs ! (n div k) else NoMsg) =\n                      (if i = 0 then xs ! t else NoMsg)", "apply simp+"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma f_expand_take_mult: \"xs \\<odot>\\<^sub>f k \\<down> (n * k) = (xs \\<down> n) \\<odot>\\<^sub>f k\""], ["proof (prove)\ngoal (1 subgoal):\n 1. xs \\<odot> k \\<down> (n * k) = xs \\<down> n \\<odot> k", "apply (clarsimp simp add: list_eq_iff min_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i.\n       \\<lbrakk>\\<not> length xs \\<le> n; 0 < k; i < n * k\\<rbrakk>\n       \\<Longrightarrow> xs \\<odot> k ! i = xs \\<down> n \\<odot> k ! i", "apply (rename_tac i)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i.\n       \\<lbrakk>\\<not> length xs \\<le> n; 0 < k; i < n * k\\<rbrakk>\n       \\<Longrightarrow> xs \\<odot> k ! i = xs \\<down> n \\<odot> k ! i", "apply (case_tac \"\\<not> i < n * k\", simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i.\n       \\<lbrakk>\\<not> length xs \\<le> n; 0 < k; i < n * k;\n        \\<not> \\<not> i < n * k\\<rbrakk>\n       \\<Longrightarrow> xs \\<odot> k ! i = xs \\<down> n \\<odot> k ! i", "apply (subgoal_tac \"i < length xs * k\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>i.\n       \\<lbrakk>\\<not> length xs \\<le> n; 0 < k; i < n * k;\n        \\<not> \\<not> i < n * k; i < length xs * k\\<rbrakk>\n       \\<Longrightarrow> xs \\<odot> k ! i = xs \\<down> n \\<odot> k ! i\n 2. \\<And>i.\n       \\<lbrakk>\\<not> length xs \\<le> n; 0 < k; i < n * k;\n        \\<not> \\<not> i < n * k\\<rbrakk>\n       \\<Longrightarrow> i < length xs * k", "prefer 2"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>i.\n       \\<lbrakk>\\<not> length xs \\<le> n; 0 < k; i < n * k;\n        \\<not> \\<not> i < n * k\\<rbrakk>\n       \\<Longrightarrow> i < length xs * k\n 2. \\<And>i.\n       \\<lbrakk>\\<not> length xs \\<le> n; 0 < k; i < n * k;\n        \\<not> \\<not> i < n * k; i < length xs * k\\<rbrakk>\n       \\<Longrightarrow> xs \\<odot> k ! i = xs \\<down> n \\<odot> k ! i", "apply (rule_tac y=\"n * k\" in order_le_less_trans, simp+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i.\n       \\<lbrakk>\\<not> length xs \\<le> n; 0 < k; i < n * k;\n        i < length xs * k\\<rbrakk>\n       \\<Longrightarrow> xs \\<odot> k ! i = xs \\<down> n \\<odot> k ! i", "apply (clarsimp simp: f_expand_nth_if elim!: dvdE)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma f_expand_take_mod: \"\n  n mod k = 0 \\<Longrightarrow> xs \\<odot>\\<^sub>f k \\<down> n = xs \\<down> (n div k) \\<odot>\\<^sub>f k\""], ["proof (prove)\ngoal (1 subgoal):\n 1. n mod k = 0 \\<Longrightarrow>\n    xs \\<odot> k \\<down> n = xs \\<down> (n div k) \\<odot> k", "by (clarsimp simp: mult.commute[of k] f_expand_take_mult elim!: dvdE)"], ["", "lemma f_expand_drop_mult: \"xs \\<odot>\\<^sub>f k \\<up> (n * k) = (xs \\<up> n) \\<odot>\\<^sub>f k\""], ["proof (prove)\ngoal (1 subgoal):\n 1. xs \\<odot> k \\<up> (n * k) = xs \\<up> n \\<odot> k", "apply (insert arg_cong[OF append_take_drop_id, of \"\\<lambda>x. x \\<odot>\\<^sub>f k\" n xs])"], ["proof (prove)\ngoal (1 subgoal):\n 1. (xs \\<down> n @ xs \\<up> n) \\<odot> k = xs \\<odot> k \\<Longrightarrow>\n    xs \\<odot> k \\<up> (n * k) = xs \\<up> n \\<odot> k", "apply (drule ssubst[OF append_take_drop_id, of _ \"xs \\<odot>\\<^sub>f k\" \"n * k\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. (xs \\<down> n @ xs \\<up> n) \\<odot> k =\n    xs \\<odot> k \\<down> (n * k) @\n    xs \\<odot> k \\<up> (n * k) \\<Longrightarrow>\n    xs \\<odot> k \\<up> (n * k) = xs \\<up> n \\<odot> k", "apply (simp only: f_expand_append)"], ["proof (prove)\ngoal (1 subgoal):\n 1. xs \\<down> n \\<odot> k @ xs \\<up> n \\<odot> k =\n    xs \\<odot> k \\<down> (n * k) @\n    xs \\<odot> k \\<up> (n * k) \\<Longrightarrow>\n    xs \\<odot> k \\<up> (n * k) = xs \\<up> n \\<odot> k", "apply (simp only: f_expand_take_mult)"], ["proof (prove)\ngoal (1 subgoal):\n 1. xs \\<down> n \\<odot> k @ xs \\<up> n \\<odot> k =\n    xs \\<down> n \\<odot> k @ xs \\<odot> k \\<up> (n * k) \\<Longrightarrow>\n    xs \\<odot> k \\<up> (n * k) = xs \\<up> n \\<odot> k", "apply simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma f_expand_drop_mod: \"\n  n mod k = 0 \\<Longrightarrow> xs \\<odot>\\<^sub>f k \\<up> n = xs \\<up> (n div k) \\<odot>\\<^sub>f k\""], ["proof (prove)\ngoal (1 subgoal):\n 1. n mod k = 0 \\<Longrightarrow>\n    xs \\<odot> k \\<up> n = xs \\<up> (n div k) \\<odot> k", "by (clarsimp simp: mult.commute[of k] f_expand_drop_mult elim!: dvdE)"], ["", "lemma f_expand_take_mult_Suc: \"\n  \\<lbrakk> n < length xs; i < k \\<rbrakk> \\<Longrightarrow>\n  xs \\<odot>\\<^sub>f k \\<down> (n * k + Suc i) = (xs \\<down> n) \\<odot>\\<^sub>f k @ (xs ! n # \\<NoMsg>\\<^bsup>i\\<^esup>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>n < length xs; i < k\\<rbrakk>\n    \\<Longrightarrow> xs \\<odot> k \\<down> (n * k + Suc i) =\n                      xs \\<down> n \\<odot> k @\n                      xs ! n # NoMsg\\<^bsup>i\\<^esup>", "apply (subgoal_tac \"n * k + Suc i \\<le> length xs * k\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>n < length xs; i < k;\n     n * k + Suc i \\<le> length xs * k\\<rbrakk>\n    \\<Longrightarrow> xs \\<odot> k \\<down> (n * k + Suc i) =\n                      xs \\<down> n \\<odot> k @\n                      xs ! n # NoMsg\\<^bsup>i\\<^esup>\n 2. \\<lbrakk>n < length xs; i < k\\<rbrakk>\n    \\<Longrightarrow> n * k + Suc i \\<le> length xs * k", "prefer 2"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>n < length xs; i < k\\<rbrakk>\n    \\<Longrightarrow> n * k + Suc i \\<le> length xs * k\n 2. \\<lbrakk>n < length xs; i < k;\n     n * k + Suc i \\<le> length xs * k\\<rbrakk>\n    \\<Longrightarrow> xs \\<odot> k \\<down> (n * k + Suc i) =\n                      xs \\<down> n \\<odot> k @\n                      xs ! n # NoMsg\\<^bsup>i\\<^esup>", "apply (drule Suc_leI[of n])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>i < k; Suc n \\<le> length xs\\<rbrakk>\n    \\<Longrightarrow> n * k + Suc i \\<le> length xs * k\n 2. \\<lbrakk>n < length xs; i < k;\n     n * k + Suc i \\<le> length xs * k\\<rbrakk>\n    \\<Longrightarrow> xs \\<odot> k \\<down> (n * k + Suc i) =\n                      xs \\<down> n \\<odot> k @\n                      xs ! n # NoMsg\\<^bsup>i\\<^esup>", "apply (drule mult_le_mono1[of \"Suc n\" _ k])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>i < k; Suc n * k \\<le> length xs * k\\<rbrakk>\n    \\<Longrightarrow> n * k + Suc i \\<le> length xs * k\n 2. \\<lbrakk>n < length xs; i < k;\n     n * k + Suc i \\<le> length xs * k\\<rbrakk>\n    \\<Longrightarrow> xs \\<odot> k \\<down> (n * k + Suc i) =\n                      xs \\<down> n \\<odot> k @\n                      xs ! n # NoMsg\\<^bsup>i\\<^esup>", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>n < length xs; i < k;\n     n * k + Suc i \\<le> length xs * k\\<rbrakk>\n    \\<Longrightarrow> xs \\<odot> k \\<down> (n * k + Suc i) =\n                      xs \\<down> n \\<odot> k @\n                      xs ! n # NoMsg\\<^bsup>i\\<^esup>", "apply (clarsimp simp: list_eq_iff min_eqR nth_append f_expand_nth_if min_def nth_Cons' elim!: dvdE)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>ka.\n       \\<lbrakk>n < length xs; i < k; Suc (n * k + i) \\<le> length xs * k;\n        ka \\<noteq> n; \\<not> ka < n; k * ka < Suc (n * k + i)\\<rbrakk>\n       \\<Longrightarrow> xs ! ka = NoMsg", "apply (simp add: mult.commute[of k] linorder_not_less)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>ka.\n       \\<lbrakk>n < length xs; i < k; Suc (n * k + i) \\<le> length xs * k;\n        ka \\<noteq> n; n \\<le> ka; ka * k < Suc (n * k + i)\\<rbrakk>\n       \\<Longrightarrow> xs ! ka = NoMsg", "apply (drule_tac n=ka in le_neq_implies_less, simp+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>ka.\n       \\<lbrakk>n < length xs; i < k; Suc (n * k + i) \\<le> length xs * k;\n        ka * k < Suc (n * k + i); n < ka\\<rbrakk>\n       \\<Longrightarrow> xs ! ka = NoMsg", "apply (drule_tac n=ka in Suc_leI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>ka.\n       \\<lbrakk>n < length xs; i < k; Suc (n * k + i) \\<le> length xs * k;\n        ka * k < Suc (n * k + i); Suc n \\<le> ka\\<rbrakk>\n       \\<Longrightarrow> xs ! ka = NoMsg", "apply (drule_tac j=ka in mult_le_mono1[of _ _ k])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>ka.\n       \\<lbrakk>n < length xs; i < k; Suc (n * k + i) \\<le> length xs * k;\n        ka * k < Suc (n * k + i); Suc n * k \\<le> ka * k\\<rbrakk>\n       \\<Longrightarrow> xs ! ka = NoMsg", "apply simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma f_expand_take_Suc: \"\n  n < length xs * k \\<Longrightarrow>\n  xs \\<odot>\\<^sub>f k \\<down> Suc n = (xs \\<down> (n div k)) \\<odot>\\<^sub>f k @ (xs ! (n div k) # \\<NoMsg>\\<^bsup>n mod k\\<^esup>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. n < length xs * k \\<Longrightarrow>\n    xs \\<odot> k \\<down> Suc n =\n    xs \\<down> (n div k) \\<odot> k @\n    xs ! (n div k) # NoMsg\\<^bsup>n mod k\\<^esup>", "apply (case_tac \"k = 0\", simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>n < length xs * k; k \\<noteq> 0\\<rbrakk>\n    \\<Longrightarrow> xs \\<odot> k \\<down> Suc n =\n                      xs \\<down> (n div k) \\<odot> k @\n                      xs ! (n div k) # NoMsg\\<^bsup>n mod k\\<^esup>", "apply (insert f_expand_take_mult_Suc[of \"n div k\" xs \"n mod k\" k])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>n < length xs * k; k \\<noteq> 0;\n     \\<lbrakk>n div k < length xs; n mod k < k\\<rbrakk>\n     \\<Longrightarrow> xs \\<odot> k \\<down> (n div k * k + Suc (n mod k)) =\n                       xs \\<down> (n div k) \\<odot> k @\n                       xs ! (n div k) #\n                       NoMsg\\<^bsup>n mod k\\<^esup>\\<rbrakk>\n    \\<Longrightarrow> xs \\<odot> k \\<down> Suc n =\n                      xs \\<down> (n div k) \\<odot> k @\n                      xs ! (n div k) # NoMsg\\<^bsup>n mod k\\<^esup>", "apply (simp add: div_less_conv)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma i_expand_nth_if: \"\n  0 < k \\<Longrightarrow> (f \\<odot>\\<^sub>i k) n = (if n mod k = 0 then f (n div k) else \\<NoMsg>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < k \\<Longrightarrow>\n    (f \\<odot> k) n = (if n mod k = 0 then f (n div k) else NoMsg)", "by (simp add: i_expand_gr0)"], ["", "corollary i_expand_nth_mod_eq_0: \"\n  \\<lbrakk> 0 < k; n mod k = 0 \\<rbrakk> \\<Longrightarrow> (f \\<odot>\\<^sub>i k) n = f (n div k)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>0 < k; n mod k = 0\\<rbrakk>\n    \\<Longrightarrow> (f \\<odot> k) n = f (n div k)", "by (simp add: i_expand_gr0)"], ["", "corollary i_expand_nth_mod_neq_0: \"\n  0 < n mod k \\<Longrightarrow> (f \\<odot>\\<^sub>i k) n = \\<NoMsg>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < n mod k \\<Longrightarrow> (f \\<odot> k) n = NoMsg", "apply (case_tac \"k = 0\", simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>0 < n mod k; k \\<noteq> 0\\<rbrakk>\n    \\<Longrightarrow> (f \\<odot> k) n = NoMsg", "apply (simp add: i_expand_gr0)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma i_expand_nth_0_upto_k_minus_1_if: \"\n  \\<lbrakk> n = t * k + i; i < k \\<rbrakk> \\<Longrightarrow>\n  (f \\<odot>\\<^sub>i k) n = (if i = 0 then f t else \\<NoMsg>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>n = t * k + i; i < k\\<rbrakk>\n    \\<Longrightarrow> (f \\<odot> k) n = (if i = 0 then f t else NoMsg)", "by (simp add: i_expand_nth_if)"], ["", "lemma i_expand_i_take_mult: \"f \\<odot>\\<^sub>i k \\<Down> (n * k) = (f \\<Down> n) \\<odot>\\<^sub>f k\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f \\<odot> k \\<Down> (n * k) = f \\<Down> n \\<odot> k", "apply (case_tac \"k = 0\", simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. k \\<noteq> 0 \\<Longrightarrow>\n    f \\<odot> k \\<Down> (n * k) = f \\<Down> n \\<odot> k", "apply (clarsimp simp: list_eq_iff i_expand_nth_if f_expand_nth_if elim!: dvdE)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma i_expand_i_take_mod: \"\n  n mod k = 0 \\<Longrightarrow> f \\<odot>\\<^sub>i k \\<Down> n = f \\<Down> (n div k) \\<odot>\\<^sub>f k\""], ["proof (prove)\ngoal (1 subgoal):\n 1. n mod k = 0 \\<Longrightarrow>\n    f \\<odot> k \\<Down> n = f \\<Down> (n div k) \\<odot> k", "by (clarsimp simp: mult.commute[of k] i_expand_i_take_mult elim!: dvdE)"], ["", "lemma i_expand_i_drop_mult: \"(f \\<odot>\\<^sub>i k) \\<Up> (n * k) = (f \\<Up> n) \\<odot>\\<^sub>i k\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f \\<odot> k \\<Up> (n * k) = f \\<Up> n \\<odot> k", "apply (case_tac \"k = 0\", simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. k \\<noteq> 0 \\<Longrightarrow>\n    f \\<odot> k \\<Up> (n * k) = f \\<Up> n \\<odot> k", "apply (clarsimp simp: ilist_eq_iff i_expand_nth_if)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma i_expand_i_drop_mod: \"\n  n mod k = 0 \\<Longrightarrow> f \\<odot>\\<^sub>i k \\<Up> n = f \\<Up> (n div k) \\<odot>\\<^sub>i k\""], ["proof (prove)\ngoal (1 subgoal):\n 1. n mod k = 0 \\<Longrightarrow>\n    f \\<odot> k \\<Up> n = f \\<Up> (n div k) \\<odot> k", "by (clarsimp simp: mult.commute[of k] i_expand_i_drop_mult elim!: dvdE)"], ["", "lemma i_expand_i_take_mult_Suc: \"\n  i < k \\<Longrightarrow> f \\<odot>\\<^sub>i k \\<Down> (n * k + Suc i) = (f \\<Down> n) \\<odot>\\<^sub>f k @ (f n # \\<NoMsg>\\<^bsup>i\\<^esup>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. i < k \\<Longrightarrow>\n    f \\<odot> k \\<Down> (n * k + Suc i) =\n    f \\<Down> n \\<odot> k @ f n # NoMsg\\<^bsup>i\\<^esup>", "apply (clarsimp simp: list_eq_iff, rename_tac i')"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i'.\n       \\<lbrakk>i < k; i' < Suc (n * k + i)\\<rbrakk>\n       \\<Longrightarrow> (f \\<odot> k) i' =\n                         (f \\<Down> n \\<odot> k @\n                          f n # NoMsg\\<^bsup>i\\<^esup>) !\n                         i'", "apply (clarsimp simp: i_expand_nth_if f_expand_nth_if nth_append nth_Cons' elim!: dvdE)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>ka.\n       \\<lbrakk>i < k; k * ka < Suc (n * k + i); ka \\<noteq> n;\n        \\<not> ka < n\\<rbrakk>\n       \\<Longrightarrow> f ka = NoMsg", "apply (simp add: linorder_not_less mult.commute[of k])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>ka.\n       \\<lbrakk>i < k; ka * k < Suc (n * k + i); ka \\<noteq> n;\n        n \\<le> ka\\<rbrakk>\n       \\<Longrightarrow> f ka = NoMsg", "apply (drule_tac n=ka in le_neq_implies_less, simp+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>ka.\n       \\<lbrakk>i < k; ka * k < Suc (n * k + i); n < ka\\<rbrakk>\n       \\<Longrightarrow> f ka = NoMsg", "apply (drule_tac n=ka in Suc_leI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>ka.\n       \\<lbrakk>i < k; ka * k < Suc (n * k + i); Suc n \\<le> ka\\<rbrakk>\n       \\<Longrightarrow> f ka = NoMsg", "apply (drule_tac j=ka in mult_le_mono1[of _ _ k])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>ka.\n       \\<lbrakk>i < k; ka * k < Suc (n * k + i);\n        Suc n * k \\<le> ka * k\\<rbrakk>\n       \\<Longrightarrow> f ka = NoMsg", "apply simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma i_expand_i_take_Suc: \"\n  0 < k \\<Longrightarrow> f \\<odot>\\<^sub>i k \\<Down> Suc n = (f \\<Down> (n div k)) \\<odot>\\<^sub>f k @ (f (n div k) # \\<NoMsg>\\<^bsup>n mod k\\<^esup>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < k \\<Longrightarrow>\n    f \\<odot> k \\<Down> Suc n =\n    f \\<Down> (n div k) \\<odot> k @\n    f (n div k) # NoMsg\\<^bsup>n mod k\\<^esup>", "apply (insert i_expand_i_take_mult_Suc[of \"n mod k\" k \"n div k\" f])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>0 < k;\n     n mod k < k \\<Longrightarrow>\n     f \\<odot> k \\<Down> (n div k * k + Suc (n mod k)) =\n     f \\<Down> (n div k) \\<odot> k @\n     f (n div k) # NoMsg\\<^bsup>n mod k\\<^esup>\\<rbrakk>\n    \\<Longrightarrow> f \\<odot> k \\<Down> Suc n =\n                      f \\<Down> (n div k) \\<odot> k @\n                      f (n div k) # NoMsg\\<^bsup>n mod k\\<^esup>", "apply simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma f_expand_nth_interval_eq_nth_append_replicate_NoMsg[rule_format]: \"\n  \\<lbrakk> 0 < k; t < length xs; t * k \\<le> t1; t1 \\<le> t * k + k - Suc 0 \\<rbrakk> \\<Longrightarrow>\n  xs \\<odot>\\<^sub>f k \\<down> Suc t1 \\<up> (t * k) = xs ! t # \\<NoMsg>\\<^bsup>t1 - t * k\\<^esup>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>0 < k; t < length xs; t * k \\<le> t1;\n     t1 \\<le> t * k + k - Suc 0\\<rbrakk>\n    \\<Longrightarrow> xs \\<odot> k \\<down> Suc t1 \\<up> (t * k) =\n                      xs ! t # NoMsg\\<^bsup>t1 - t * k\\<^esup>", "apply (rule_tac t=\"Suc t1\" and s=\"t * k + Suc (t1 - t * k)\" in subst, simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>0 < k; t < length xs; t * k \\<le> t1;\n     t1 \\<le> t * k + k - Suc 0\\<rbrakk>\n    \\<Longrightarrow> xs \\<odot> k \\<down> (t * k + Suc (t1 - t * k)) \\<up>\n                      (t * k) =\n                      xs ! t # NoMsg\\<^bsup>t1 - t * k\\<^esup>", "apply (subst f_expand_take_mult_Suc)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>0 < k; t < length xs; t * k \\<le> t1;\n     t1 \\<le> t * k + k - Suc 0\\<rbrakk>\n    \\<Longrightarrow> t < length xs\n 2. \\<lbrakk>0 < k; t < length xs; t * k \\<le> t1;\n     t1 \\<le> t * k + k - Suc 0\\<rbrakk>\n    \\<Longrightarrow> t1 - t * k < k\n 3. \\<lbrakk>0 < k; t < length xs; t * k \\<le> t1;\n     t1 \\<le> t * k + k - Suc 0\\<rbrakk>\n    \\<Longrightarrow> (xs \\<down> t \\<odot> k @\n                       xs ! t # NoMsg\\<^bsup>t1 - t * k\\<^esup>) \\<up>\n                      (t * k) =\n                      xs ! t # NoMsg\\<^bsup>t1 - t * k\\<^esup>", "apply simp+"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma f_expand_nth_interval_eq_replicate_NoMsg: \"\n  \\<lbrakk> 0 < k; t * k < t1; t1 \\<le> t2; t2 \\<le> t * k + k; t2 \\<le> length xs * k\\<rbrakk> \\<Longrightarrow>\n  xs \\<odot>\\<^sub>f k \\<down> t2 \\<up> t1 = \\<NoMsg>\\<^bsup>t2 - t1\\<^esup>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>0 < k; t * k < t1; t1 \\<le> t2; t2 \\<le> t * k + k;\n     t2 \\<le> length xs * k\\<rbrakk>\n    \\<Longrightarrow> xs \\<odot> k \\<down> t2 \\<up> t1 =\n                      NoMsg\\<^bsup>t2 - t1\\<^esup>", "apply (clarsimp simp: list_eq_iff min_eqR f_expand_nth_if elim!: dvdE, rename_tac i q)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i q.\n       \\<lbrakk>t * k < t1; t1 \\<le> t2; t2 \\<le> t * k + k;\n        t2 \\<le> length xs * k; t1 + i = k * q; i < t2 - t1\\<rbrakk>\n       \\<Longrightarrow> xs ! q = NoMsg", "apply (drule_tac i=i and k=t1 in add_less_mono2, simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i q.\n       \\<lbrakk>t * k < t1; t2 \\<le> t * k + k; t2 \\<le> length xs * k;\n        t1 + i = k * q; k * q < t2\\<rbrakk>\n       \\<Longrightarrow> xs ! q = NoMsg", "apply (drule_tac i=\"t * k\" and j=t1 and m=i in trans_less_add1)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i q.\n       \\<lbrakk>t2 \\<le> t * k + k; t2 \\<le> length xs * k; t1 + i = k * q;\n        k * q < t2; t * k < t1 + i\\<rbrakk>\n       \\<Longrightarrow> xs ! q = NoMsg", "apply (drule_tac x=\"t * k\" and y=\"t1 + i\" and m=k in less_mod_eq_imp_add_divisor_le, simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i q.\n       \\<lbrakk>t2 \\<le> t * k + k; t2 \\<le> length xs * k; t1 + i = k * q;\n        k * q < t2; t * k + k \\<le> t1 + i\\<rbrakk>\n       \\<Longrightarrow> xs ! q = NoMsg", "apply simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma i_expand_nth_interval_eq_nth_append_replicate_NoMsg[rule_format]: \"\n  \\<lbrakk> 0 < k; t * k \\<le> t1; t1 \\<le> t * k + k - Suc 0 \\<rbrakk> \\<Longrightarrow>\n  f \\<odot>\\<^sub>i k \\<Down> Suc t1 \\<up> (t * k) = f t # \\<NoMsg>\\<^bsup>t1 - t * k\\<^esup>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>0 < k; t * k \\<le> t1; t1 \\<le> t * k + k - Suc 0\\<rbrakk>\n    \\<Longrightarrow> f \\<odot> k \\<Down> Suc t1 \\<up> (t * k) =\n                      f t # NoMsg\\<^bsup>t1 - t * k\\<^esup>", "by (simp add: list_eq_iff Suc_diff_le i_expand_nth_if nth_Cons')"], ["", "lemma i_expand_nth_interval_eq_replicate_NoMsg: \"\n  \\<lbrakk> 0 < k; t * k < t1; t1 \\<le> t2; t2 \\<le> t * k + k \\<rbrakk> \\<Longrightarrow>\n  f \\<odot>\\<^sub>i k \\<Down> t2 \\<up> t1 = \\<NoMsg>\\<^bsup>t2 - t1\\<^esup>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>0 < k; t * k < t1; t1 \\<le> t2; t2 \\<le> t * k + k\\<rbrakk>\n    \\<Longrightarrow> f \\<odot> k \\<Down> t2 \\<up> t1 =\n                      NoMsg\\<^bsup>t2 - t1\\<^esup>", "apply (clarsimp simp: list_eq_iff i_expand_nth_if add.commute[of k])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i.\n       \\<lbrakk>t * k < t1; t1 \\<le> t2; t2 \\<le> t * k + k; k dvd t1 + i;\n        i < t2 - t1\\<rbrakk>\n       \\<Longrightarrow> f ((t1 + i) div k) = NoMsg", "apply (drule_tac i=i and k=t1 in add_less_mono2, simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i.\n       \\<lbrakk>t * k < t1; t2 \\<le> t * k + k; k dvd t1 + i;\n        t1 + i < t2\\<rbrakk>\n       \\<Longrightarrow> f ((t1 + i) div k) = NoMsg", "apply (drule_tac i=\"t * k\" and j=t1 and m=i in trans_less_add1)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i.\n       \\<lbrakk>t2 \\<le> t * k + k; k dvd t1 + i; t1 + i < t2;\n        t * k < t1 + i\\<rbrakk>\n       \\<Longrightarrow> f ((t1 + i) div k) = NoMsg", "apply (drule_tac x=\"t * k\" and y=\"t1 + i\" and m=k in less_mod_eq_imp_add_divisor_le, simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i.\n       \\<lbrakk>t2 \\<le> t * k + k; k dvd t1 + i; t1 + i < t2;\n        t * k + k \\<le> t1 + i\\<rbrakk>\n       \\<Longrightarrow> f ((t1 + i) div k) = NoMsg", "apply simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma f_expand_replicate_NoMsg[simp]: \"(\\<NoMsg>\\<^bsup>n\\<^esup>) \\<odot>\\<^sub>f k =  \\<NoMsg>\\<^bsup>n * k\\<^esup>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. NoMsg\\<^bsup>n\\<^esup> \\<odot> k = NoMsg\\<^bsup>n * k\\<^esup>", "by (clarsimp simp: list_eq_iff f_expand_nth_if elim!: dvdE)"], ["", "lemma i_expand_const_NoMsg[simp]: \"(\\<lambda>n. \\<NoMsg>) \\<odot>\\<^sub>i k = (\\<lambda>n. \\<NoMsg>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>n. NoMsg) \\<odot> k = (\\<lambda>n. NoMsg)", "by (simp add: i_expand_def ilist_eq_iff)"], ["", "lemma f_expand_assoc: \"xs \\<odot>\\<^sub>f a \\<odot>\\<^sub>f b = xs \\<odot>\\<^sub>f (a * b)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. xs \\<odot> a \\<odot> b = xs \\<odot> (a * b)", "apply (induct xs)"], ["proof (prove)\ngoal (2 subgoals):\n 1. [] \\<odot> a \\<odot> b = [] \\<odot> (a * b)\n 2. \\<And>aa xs.\n       xs \\<odot> a \\<odot> b = xs \\<odot> (a * b) \\<Longrightarrow>\n       (aa # xs) \\<odot> a \\<odot> b = (aa # xs) \\<odot> (a * b)", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>aa xs.\n       xs \\<odot> a \\<odot> b = xs \\<odot> (a * b) \\<Longrightarrow>\n       (aa # xs) \\<odot> a \\<odot> b = (aa # xs) \\<odot> (a * b)", "apply (simp add: replicate_add[symmetric] diff_mult_distrib)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma i_expand_assoc: \"f \\<odot>\\<^sub>i a \\<odot>\\<^sub>i b = f \\<odot>\\<^sub>i (a * b)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f \\<odot> a \\<odot> b = f \\<odot> (a * b)", "by (fastforce simp: i_expand_def ilist_eq_iff)"], ["", "lemma f_expand_commute: \"xs \\<odot>\\<^sub>f a \\<odot>\\<^sub>f b = xs \\<odot>\\<^sub>f b \\<odot>\\<^sub>f a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. xs \\<odot> a \\<odot> b = xs \\<odot> b \\<odot> a", "by (simp add: f_expand_assoc mult.commute[of b])"], ["", "lemma i_expand_commute: \"f \\<odot>\\<^sub>i a \\<odot>\\<^sub>i b = f \\<odot>\\<^sub>i b \\<odot>\\<^sub>i a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f \\<odot> a \\<odot> b = f \\<odot> b \\<odot> a", "by (simp add: i_expand_assoc mult.commute[of b])"], ["", "lemma i_expand_i_append: \"(xs \\<frown> f) \\<odot>\\<^sub>i k = xs \\<odot>\\<^sub>f k \\<frown> (f \\<odot>\\<^sub>i k)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (xs \\<frown> f) \\<odot> k = xs \\<odot> k \\<frown> f \\<odot> k", "apply (case_tac \"k = 0\", simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. k \\<noteq> 0 \\<Longrightarrow>\n    (xs \\<frown> f) \\<odot> k = xs \\<odot> k \\<frown> f \\<odot> k", "apply (clarsimp simp add: ilist_eq_iff i_expand_gr0 i_append_nth)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       0 < k \\<Longrightarrow>\n       (x div k < length xs \\<longrightarrow>\n        (x mod k = 0 \\<longrightarrow>\n         ((x - length xs * k) mod k = 0 \\<longrightarrow>\n          (x < length xs * k \\<longrightarrow>\n           xs ! (x div k) = xs \\<odot> k ! x) \\<and>\n          (\\<not> x < length xs * k \\<longrightarrow>\n           xs ! (x div k) = f ((x - length xs * k) div k))) \\<and>\n         (0 < (x - length xs * k) mod k \\<longrightarrow>\n          (x < length xs * k \\<longrightarrow>\n           xs ! (x div k) = xs \\<odot> k ! x) \\<and>\n          (\\<not> x < length xs * k \\<longrightarrow>\n           xs ! (x div k) = NoMsg))) \\<and>\n        (0 < x mod k \\<longrightarrow>\n         ((x - length xs * k) mod k = 0 \\<longrightarrow>\n          (x < length xs * k \\<longrightarrow>\n           NoMsg = xs \\<odot> k ! x) \\<and>\n          (\\<not> x < length xs * k \\<longrightarrow>\n           NoMsg = f ((x - length xs * k) div k))) \\<and>\n         (0 < (x - length xs * k) mod k \\<longrightarrow>\n          x < length xs * k \\<longrightarrow>\n          NoMsg = xs \\<odot> k ! x))) \\<and>\n       (\\<not> x div k < length xs \\<longrightarrow>\n        (x mod k = 0 \\<longrightarrow>\n         ((x - length xs * k) mod k = 0 \\<longrightarrow>\n          (x < length xs * k \\<longrightarrow>\n           f (x div k - length xs) = xs \\<odot> k ! x) \\<and>\n          (\\<not> x < length xs * k \\<longrightarrow>\n           f (x div k - length xs) = f ((x - length xs * k) div k))) \\<and>\n         (0 < (x - length xs * k) mod k \\<longrightarrow>\n          (x < length xs * k \\<longrightarrow>\n           f (x div k - length xs) = xs \\<odot> k ! x) \\<and>\n          (\\<not> x < length xs * k \\<longrightarrow>\n           f (x div k - length xs) = NoMsg))) \\<and>\n        (0 < x mod k \\<longrightarrow>\n         ((x - length xs * k) mod k = 0 \\<longrightarrow>\n          (x < length xs * k \\<longrightarrow>\n           NoMsg = xs \\<odot> k ! x) \\<and>\n          (\\<not> x < length xs * k \\<longrightarrow>\n           NoMsg = f ((x - length xs * k) div k))) \\<and>\n         (0 < (x - length xs * k) mod k \\<longrightarrow>\n          x < length xs * k \\<longrightarrow> NoMsg = xs \\<odot> k ! x)))", "apply (case_tac \"x < length xs * k\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>0 < k; x < length xs * k\\<rbrakk>\n       \\<Longrightarrow> (x div k < length xs \\<longrightarrow>\n                          (x mod k = 0 \\<longrightarrow>\n                           ((x - length xs * k) mod k = 0 \\<longrightarrow>\n                            (x < length xs * k \\<longrightarrow>\n                             xs ! (x div k) = xs \\<odot> k ! x) \\<and>\n                            (\\<not> x < length xs * k \\<longrightarrow>\n                             xs ! (x div k) =\n                             f ((x - length xs * k) div k))) \\<and>\n                           (0 < (x - length xs * k) mod k \\<longrightarrow>\n                            (x < length xs * k \\<longrightarrow>\n                             xs ! (x div k) = xs \\<odot> k ! x) \\<and>\n                            (\\<not> x < length xs * k \\<longrightarrow>\n                             xs ! (x div k) = NoMsg))) \\<and>\n                          (0 < x mod k \\<longrightarrow>\n                           ((x - length xs * k) mod k = 0 \\<longrightarrow>\n                            (x < length xs * k \\<longrightarrow>\n                             NoMsg = xs \\<odot> k ! x) \\<and>\n                            (\\<not> x < length xs * k \\<longrightarrow>\n                             NoMsg = f ((x - length xs * k) div k))) \\<and>\n                           (0 < (x - length xs * k) mod k \\<longrightarrow>\n                            x < length xs * k \\<longrightarrow>\n                            NoMsg = xs \\<odot> k ! x))) \\<and>\n                         (\\<not> x div k < length xs \\<longrightarrow>\n                          (x mod k = 0 \\<longrightarrow>\n                           ((x - length xs * k) mod k = 0 \\<longrightarrow>\n                            (x < length xs * k \\<longrightarrow>\n                             f (x div k - length xs) =\n                             xs \\<odot> k ! x) \\<and>\n                            (\\<not> x < length xs * k \\<longrightarrow>\n                             f (x div k - length xs) =\n                             f ((x - length xs * k) div k))) \\<and>\n                           (0 < (x - length xs * k) mod k \\<longrightarrow>\n                            (x < length xs * k \\<longrightarrow>\n                             f (x div k - length xs) =\n                             xs \\<odot> k ! x) \\<and>\n                            (\\<not> x < length xs * k \\<longrightarrow>\n                             f (x div k - length xs) = NoMsg))) \\<and>\n                          (0 < x mod k \\<longrightarrow>\n                           ((x - length xs * k) mod k = 0 \\<longrightarrow>\n                            (x < length xs * k \\<longrightarrow>\n                             NoMsg = xs \\<odot> k ! x) \\<and>\n                            (\\<not> x < length xs * k \\<longrightarrow>\n                             NoMsg = f ((x - length xs * k) div k))) \\<and>\n                           (0 < (x - length xs * k) mod k \\<longrightarrow>\n                            x < length xs * k \\<longrightarrow>\n                            NoMsg = xs \\<odot> k ! x)))\n 2. \\<And>x.\n       \\<lbrakk>0 < k; \\<not> x < length xs * k\\<rbrakk>\n       \\<Longrightarrow> (x div k < length xs \\<longrightarrow>\n                          (x mod k = 0 \\<longrightarrow>\n                           ((x - length xs * k) mod k = 0 \\<longrightarrow>\n                            (x < length xs * k \\<longrightarrow>\n                             xs ! (x div k) = xs \\<odot> k ! x) \\<and>\n                            (\\<not> x < length xs * k \\<longrightarrow>\n                             xs ! (x div k) =\n                             f ((x - length xs * k) div k))) \\<and>\n                           (0 < (x - length xs * k) mod k \\<longrightarrow>\n                            (x < length xs * k \\<longrightarrow>\n                             xs ! (x div k) = xs \\<odot> k ! x) \\<and>\n                            (\\<not> x < length xs * k \\<longrightarrow>\n                             xs ! (x div k) = NoMsg))) \\<and>\n                          (0 < x mod k \\<longrightarrow>\n                           ((x - length xs * k) mod k = 0 \\<longrightarrow>\n                            (x < length xs * k \\<longrightarrow>\n                             NoMsg = xs \\<odot> k ! x) \\<and>\n                            (\\<not> x < length xs * k \\<longrightarrow>\n                             NoMsg = f ((x - length xs * k) div k))) \\<and>\n                           (0 < (x - length xs * k) mod k \\<longrightarrow>\n                            x < length xs * k \\<longrightarrow>\n                            NoMsg = xs \\<odot> k ! x))) \\<and>\n                         (\\<not> x div k < length xs \\<longrightarrow>\n                          (x mod k = 0 \\<longrightarrow>\n                           ((x - length xs * k) mod k = 0 \\<longrightarrow>\n                            (x < length xs * k \\<longrightarrow>\n                             f (x div k - length xs) =\n                             xs \\<odot> k ! x) \\<and>\n                            (\\<not> x < length xs * k \\<longrightarrow>\n                             f (x div k - length xs) =\n                             f ((x - length xs * k) div k))) \\<and>\n                           (0 < (x - length xs * k) mod k \\<longrightarrow>\n                            (x < length xs * k \\<longrightarrow>\n                             f (x div k - length xs) =\n                             xs \\<odot> k ! x) \\<and>\n                            (\\<not> x < length xs * k \\<longrightarrow>\n                             f (x div k - length xs) = NoMsg))) \\<and>\n                          (0 < x mod k \\<longrightarrow>\n                           ((x - length xs * k) mod k = 0 \\<longrightarrow>\n                            (x < length xs * k \\<longrightarrow>\n                             NoMsg = xs \\<odot> k ! x) \\<and>\n                            (\\<not> x < length xs * k \\<longrightarrow>\n                             NoMsg = f ((x - length xs * k) div k))) \\<and>\n                           (0 < (x - length xs * k) mod k \\<longrightarrow>\n                            x < length xs * k \\<longrightarrow>\n                            NoMsg = xs \\<odot> k ! x)))", "apply (frule_tac n=x and k=\"length xs\" in div_less_conv[THEN iffD2, of k, rule_format], simp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>0 < k; x < length xs * k; x div k < length xs\\<rbrakk>\n       \\<Longrightarrow> (x div k < length xs \\<longrightarrow>\n                          (x mod k = 0 \\<longrightarrow>\n                           ((x - length xs * k) mod k = 0 \\<longrightarrow>\n                            (x < length xs * k \\<longrightarrow>\n                             xs ! (x div k) = xs \\<odot> k ! x) \\<and>\n                            (\\<not> x < length xs * k \\<longrightarrow>\n                             xs ! (x div k) =\n                             f ((x - length xs * k) div k))) \\<and>\n                           (0 < (x - length xs * k) mod k \\<longrightarrow>\n                            (x < length xs * k \\<longrightarrow>\n                             xs ! (x div k) = xs \\<odot> k ! x) \\<and>\n                            (\\<not> x < length xs * k \\<longrightarrow>\n                             xs ! (x div k) = NoMsg))) \\<and>\n                          (0 < x mod k \\<longrightarrow>\n                           ((x - length xs * k) mod k = 0 \\<longrightarrow>\n                            (x < length xs * k \\<longrightarrow>\n                             NoMsg = xs \\<odot> k ! x) \\<and>\n                            (\\<not> x < length xs * k \\<longrightarrow>\n                             NoMsg = f ((x - length xs * k) div k))) \\<and>\n                           (0 < (x - length xs * k) mod k \\<longrightarrow>\n                            x < length xs * k \\<longrightarrow>\n                            NoMsg = xs \\<odot> k ! x))) \\<and>\n                         (\\<not> x div k < length xs \\<longrightarrow>\n                          (x mod k = 0 \\<longrightarrow>\n                           ((x - length xs * k) mod k = 0 \\<longrightarrow>\n                            (x < length xs * k \\<longrightarrow>\n                             f (x div k - length xs) =\n                             xs \\<odot> k ! x) \\<and>\n                            (\\<not> x < length xs * k \\<longrightarrow>\n                             f (x div k - length xs) =\n                             f ((x - length xs * k) div k))) \\<and>\n                           (0 < (x - length xs * k) mod k \\<longrightarrow>\n                            (x < length xs * k \\<longrightarrow>\n                             f (x div k - length xs) =\n                             xs \\<odot> k ! x) \\<and>\n                            (\\<not> x < length xs * k \\<longrightarrow>\n                             f (x div k - length xs) = NoMsg))) \\<and>\n                          (0 < x mod k \\<longrightarrow>\n                           ((x - length xs * k) mod k = 0 \\<longrightarrow>\n                            (x < length xs * k \\<longrightarrow>\n                             NoMsg = xs \\<odot> k ! x) \\<and>\n                            (\\<not> x < length xs * k \\<longrightarrow>\n                             NoMsg = f ((x - length xs * k) div k))) \\<and>\n                           (0 < (x - length xs * k) mod k \\<longrightarrow>\n                            x < length xs * k \\<longrightarrow>\n                            NoMsg = xs \\<odot> k ! x)))\n 2. \\<And>x.\n       \\<lbrakk>0 < k; \\<not> x < length xs * k\\<rbrakk>\n       \\<Longrightarrow> (x div k < length xs \\<longrightarrow>\n                          (x mod k = 0 \\<longrightarrow>\n                           ((x - length xs * k) mod k = 0 \\<longrightarrow>\n                            (x < length xs * k \\<longrightarrow>\n                             xs ! (x div k) = xs \\<odot> k ! x) \\<and>\n                            (\\<not> x < length xs * k \\<longrightarrow>\n                             xs ! (x div k) =\n                             f ((x - length xs * k) div k))) \\<and>\n                           (0 < (x - length xs * k) mod k \\<longrightarrow>\n                            (x < length xs * k \\<longrightarrow>\n                             xs ! (x div k) = xs \\<odot> k ! x) \\<and>\n                            (\\<not> x < length xs * k \\<longrightarrow>\n                             xs ! (x div k) = NoMsg))) \\<and>\n                          (0 < x mod k \\<longrightarrow>\n                           ((x - length xs * k) mod k = 0 \\<longrightarrow>\n                            (x < length xs * k \\<longrightarrow>\n                             NoMsg = xs \\<odot> k ! x) \\<and>\n                            (\\<not> x < length xs * k \\<longrightarrow>\n                             NoMsg = f ((x - length xs * k) div k))) \\<and>\n                           (0 < (x - length xs * k) mod k \\<longrightarrow>\n                            x < length xs * k \\<longrightarrow>\n                            NoMsg = xs \\<odot> k ! x))) \\<and>\n                         (\\<not> x div k < length xs \\<longrightarrow>\n                          (x mod k = 0 \\<longrightarrow>\n                           ((x - length xs * k) mod k = 0 \\<longrightarrow>\n                            (x < length xs * k \\<longrightarrow>\n                             f (x div k - length xs) =\n                             xs \\<odot> k ! x) \\<and>\n                            (\\<not> x < length xs * k \\<longrightarrow>\n                             f (x div k - length xs) =\n                             f ((x - length xs * k) div k))) \\<and>\n                           (0 < (x - length xs * k) mod k \\<longrightarrow>\n                            (x < length xs * k \\<longrightarrow>\n                             f (x div k - length xs) =\n                             xs \\<odot> k ! x) \\<and>\n                            (\\<not> x < length xs * k \\<longrightarrow>\n                             f (x div k - length xs) = NoMsg))) \\<and>\n                          (0 < x mod k \\<longrightarrow>\n                           ((x - length xs * k) mod k = 0 \\<longrightarrow>\n                            (x < length xs * k \\<longrightarrow>\n                             NoMsg = xs \\<odot> k ! x) \\<and>\n                            (\\<not> x < length xs * k \\<longrightarrow>\n                             NoMsg = f ((x - length xs * k) div k))) \\<and>\n                           (0 < (x - length xs * k) mod k \\<longrightarrow>\n                            x < length xs * k \\<longrightarrow>\n                            NoMsg = xs \\<odot> k ! x)))", "apply (simp add: f_expand_nth_if)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>0 < k; \\<not> x < length xs * k\\<rbrakk>\n       \\<Longrightarrow> (x div k < length xs \\<longrightarrow>\n                          (x mod k = 0 \\<longrightarrow>\n                           ((x - length xs * k) mod k = 0 \\<longrightarrow>\n                            (x < length xs * k \\<longrightarrow>\n                             xs ! (x div k) = xs \\<odot> k ! x) \\<and>\n                            (\\<not> x < length xs * k \\<longrightarrow>\n                             xs ! (x div k) =\n                             f ((x - length xs * k) div k))) \\<and>\n                           (0 < (x - length xs * k) mod k \\<longrightarrow>\n                            (x < length xs * k \\<longrightarrow>\n                             xs ! (x div k) = xs \\<odot> k ! x) \\<and>\n                            (\\<not> x < length xs * k \\<longrightarrow>\n                             xs ! (x div k) = NoMsg))) \\<and>\n                          (0 < x mod k \\<longrightarrow>\n                           ((x - length xs * k) mod k = 0 \\<longrightarrow>\n                            (x < length xs * k \\<longrightarrow>\n                             NoMsg = xs \\<odot> k ! x) \\<and>\n                            (\\<not> x < length xs * k \\<longrightarrow>\n                             NoMsg = f ((x - length xs * k) div k))) \\<and>\n                           (0 < (x - length xs * k) mod k \\<longrightarrow>\n                            x < length xs * k \\<longrightarrow>\n                            NoMsg = xs \\<odot> k ! x))) \\<and>\n                         (\\<not> x div k < length xs \\<longrightarrow>\n                          (x mod k = 0 \\<longrightarrow>\n                           ((x - length xs * k) mod k = 0 \\<longrightarrow>\n                            (x < length xs * k \\<longrightarrow>\n                             f (x div k - length xs) =\n                             xs \\<odot> k ! x) \\<and>\n                            (\\<not> x < length xs * k \\<longrightarrow>\n                             f (x div k - length xs) =\n                             f ((x - length xs * k) div k))) \\<and>\n                           (0 < (x - length xs * k) mod k \\<longrightarrow>\n                            (x < length xs * k \\<longrightarrow>\n                             f (x div k - length xs) =\n                             xs \\<odot> k ! x) \\<and>\n                            (\\<not> x < length xs * k \\<longrightarrow>\n                             f (x div k - length xs) = NoMsg))) \\<and>\n                          (0 < x mod k \\<longrightarrow>\n                           ((x - length xs * k) mod k = 0 \\<longrightarrow>\n                            (x < length xs * k \\<longrightarrow>\n                             NoMsg = xs \\<odot> k ! x) \\<and>\n                            (\\<not> x < length xs * k \\<longrightarrow>\n                             NoMsg = f ((x - length xs * k) div k))) \\<and>\n                           (0 < (x - length xs * k) mod k \\<longrightarrow>\n                            x < length xs * k \\<longrightarrow>\n                            NoMsg = xs \\<odot> k ! x)))", "apply (simp add: linorder_not_less)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>0 < k; length xs * k \\<le> x\\<rbrakk>\n       \\<Longrightarrow> (x div k < length xs \\<longrightarrow>\n                          (x mod k = 0 \\<longrightarrow>\n                           ((x - length xs * k) mod k = 0 \\<longrightarrow>\n                            xs ! (x div k) =\n                            f ((x - length xs * k) div k)) \\<and>\n                           (0 < (x - length xs * k) mod k \\<longrightarrow>\n                            xs ! (x div k) = NoMsg)) \\<and>\n                          (0 < x mod k \\<longrightarrow>\n                           (x - length xs * k) mod k = 0 \\<longrightarrow>\n                           NoMsg = f ((x - length xs * k) div k))) \\<and>\n                         (length xs \\<le> x div k \\<longrightarrow>\n                          (x mod k = 0 \\<longrightarrow>\n                           ((x - length xs * k) mod k = 0 \\<longrightarrow>\n                            f (x div k - length xs) =\n                            f ((x - length xs * k) div k)) \\<and>\n                           (0 < (x - length xs * k) mod k \\<longrightarrow>\n                            f (x div k - length xs) = NoMsg)) \\<and>\n                          (0 < x mod k \\<longrightarrow>\n                           (x - length xs * k) mod k = 0 \\<longrightarrow>\n                           NoMsg = f ((x - length xs * k) div k)))", "apply (frule div_le_mono[of _ _ k])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>0 < k; length xs * k \\<le> x;\n        length xs * k div k \\<le> x div k\\<rbrakk>\n       \\<Longrightarrow> (x div k < length xs \\<longrightarrow>\n                          (x mod k = 0 \\<longrightarrow>\n                           ((x - length xs * k) mod k = 0 \\<longrightarrow>\n                            xs ! (x div k) =\n                            f ((x - length xs * k) div k)) \\<and>\n                           (0 < (x - length xs * k) mod k \\<longrightarrow>\n                            xs ! (x div k) = NoMsg)) \\<and>\n                          (0 < x mod k \\<longrightarrow>\n                           (x - length xs * k) mod k = 0 \\<longrightarrow>\n                           NoMsg = f ((x - length xs * k) div k))) \\<and>\n                         (length xs \\<le> x div k \\<longrightarrow>\n                          (x mod k = 0 \\<longrightarrow>\n                           ((x - length xs * k) mod k = 0 \\<longrightarrow>\n                            f (x div k - length xs) =\n                            f ((x - length xs * k) div k)) \\<and>\n                           (0 < (x - length xs * k) mod k \\<longrightarrow>\n                            f (x div k - length xs) = NoMsg)) \\<and>\n                          (0 < x mod k \\<longrightarrow>\n                           (x - length xs * k) mod k = 0 \\<longrightarrow>\n                           NoMsg = f ((x - length xs * k) div k)))", "apply (simp add: mod_diff_mult_self1 div_diff_mult_self1)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma f_expand_eq_conv: \"\n  0 < k \\<Longrightarrow> (xs \\<odot>\\<^sub>f k = ys \\<odot>\\<^sub>f k) = (xs = ys)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < k \\<Longrightarrow> (xs \\<odot> k = ys \\<odot> k) = (xs = ys)", "apply (rule iffI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>0 < k; xs \\<odot> k = ys \\<odot> k\\<rbrakk>\n    \\<Longrightarrow> xs = ys\n 2. \\<lbrakk>0 < k; xs = ys\\<rbrakk>\n    \\<Longrightarrow> xs \\<odot> k = ys \\<odot> k", "apply (clarsimp simp: list_eq_iff, rename_tac i)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>i.\n       \\<lbrakk>0 < k; length xs = length ys;\n        \\<forall>i<length ys * k. xs \\<odot> k ! i = ys \\<odot> k ! i;\n        i < length ys\\<rbrakk>\n       \\<Longrightarrow> xs ! i = ys ! i\n 2. \\<lbrakk>0 < k; xs = ys\\<rbrakk>\n    \\<Longrightarrow> xs \\<odot> k = ys \\<odot> k", "apply (drule_tac x=\"i * k\" in spec)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>i.\n       \\<lbrakk>0 < k; length xs = length ys; i < length ys;\n        i * k < length ys * k \\<longrightarrow>\n        xs \\<odot> k ! (i * k) = ys \\<odot> k ! (i * k)\\<rbrakk>\n       \\<Longrightarrow> xs ! i = ys ! i\n 2. \\<lbrakk>0 < k; xs = ys\\<rbrakk>\n    \\<Longrightarrow> xs \\<odot> k = ys \\<odot> k", "apply (simp add: f_expand_nth_mult)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>0 < k; xs = ys\\<rbrakk>\n    \\<Longrightarrow> xs \\<odot> k = ys \\<odot> k", "apply simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma i_expand_eq_conv: \"\n  0 < k \\<Longrightarrow> (f \\<odot>\\<^sub>i k = g \\<odot>\\<^sub>i k) = (f = g)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < k \\<Longrightarrow> (f \\<odot> k = g \\<odot> k) = (f = g)", "apply (rule iffI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>0 < k; f \\<odot> k = g \\<odot> k\\<rbrakk>\n    \\<Longrightarrow> f = g\n 2. \\<lbrakk>0 < k; f = g\\<rbrakk>\n    \\<Longrightarrow> f \\<odot> k = g \\<odot> k", "apply (clarsimp simp: ilist_eq_iff, rename_tac i)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>i.\n       \\<lbrakk>0 < k;\n        \\<forall>x. (f \\<odot> k) x = (g \\<odot> k) x\\<rbrakk>\n       \\<Longrightarrow> f i = g i\n 2. \\<lbrakk>0 < k; f = g\\<rbrakk>\n    \\<Longrightarrow> f \\<odot> k = g \\<odot> k", "apply (drule_tac x=\"i * k\" in spec)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>i.\n       \\<lbrakk>0 < k;\n        (f \\<odot> k) (i * k) = (g \\<odot> k) (i * k)\\<rbrakk>\n       \\<Longrightarrow> f i = g i\n 2. \\<lbrakk>0 < k; f = g\\<rbrakk>\n    \\<Longrightarrow> f \\<odot> k = g \\<odot> k", "apply (simp add: i_expand_nth_mult)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>0 < k; f = g\\<rbrakk>\n    \\<Longrightarrow> f \\<odot> k = g \\<odot> k", "apply simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma f_expand_eq_conv': \"\n  (xs' \\<odot>\\<^sub>f k = xs) =\n  (length xs' * k = length xs \\<and>\n  (\\<forall>i<length xs. xs ! i = (if i mod k = 0 then xs' ! (i div k) else \\<NoMsg>)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (xs' \\<odot> k = xs) =\n    (length xs' * k = length xs \\<and>\n     (\\<forall>i<length xs.\n         xs ! i = (if i mod k = 0 then xs' ! (i div k) else NoMsg)))", "by (fastforce simp: list_eq_iff f_expand_nth_if)"], ["", "lemma i_expand_eq_conv': \"\n  0 < k \\<Longrightarrow> (f' \\<odot>\\<^sub>i k = f) =\n  (\\<forall>i. f i = (if i mod k = 0 then f' (i div k) else \\<NoMsg>))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < k \\<Longrightarrow>\n    (f' \\<odot> k = f) =\n    (\\<forall>i. f i = (if i mod k = 0 then f' (i div k) else NoMsg))", "by (fastforce simp: ilist_eq_iff i_expand_nth_if)"], ["", "subsubsection \\<open>Aggregating lists\\<close>"], ["", "definition f_aggregate :: \"'a list \\<Rightarrow> nat \\<Rightarrow> ('a list \\<Rightarrow> 'a) \\<Rightarrow> 'a list\"\n  where \"f_aggregate s k ag \\<equiv> map ag (list_slice s k)\""], ["", "definition i_aggregate :: \"'a ilist \\<Rightarrow> nat \\<Rightarrow> ('a list \\<Rightarrow> 'a) \\<Rightarrow> 'a ilist\"\n  where \"i_aggregate s k ag \\<equiv> \\<lambda>n. ag (s \\<Up> (n * k) \\<Down> k)\""], ["", "lemma f_aggregate_0[simp]: \"f_aggregate xs 0 ag = []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f_aggregate xs 0 ag = []", "by (simp add: f_aggregate_def list_slice_0)"], ["", "lemma f_aggregate_1: \"\n  (\\<And>x. ag [x] = x) \\<Longrightarrow>\n  f_aggregate xs (Suc 0) ag = xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>x. ag [x] = x) \\<Longrightarrow> f_aggregate xs (Suc 0) ag = xs", "by (simp add: list_eq_iff f_aggregate_def list_slice_1)"], ["", "lemma f_aggregate_Nil[simp]: \"f_aggregate [] k ag = []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f_aggregate [] k ag = []", "by (simp add: f_aggregate_def list_slice_Nil)"], ["", "lemma f_aggregate_length[simp]: \"length (f_aggregate xs k ag) = length xs div k\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length (f_aggregate xs k ag) = length xs div k", "by (simp add: f_aggregate_def list_slice_length)"], ["", "lemma f_aggregate_empty_conv: \"\n  0 < k \\<Longrightarrow> (f_aggregate xs k ag = []) = (length xs < k)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < k \\<Longrightarrow> (f_aggregate xs k ag = []) = (length xs < k)", "by (simp add: length_0_conv[symmetric] div_eq_0_conv' del: length_0_conv )"], ["", "lemma f_aggregate_one: \"\n  \\<lbrakk> 0 < k; length xs = k \\<rbrakk> \\<Longrightarrow> f_aggregate xs k ag = [ag xs]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>0 < k; length xs = k\\<rbrakk>\n    \\<Longrightarrow> f_aggregate xs k ag = [ag xs]", "by (simp add: f_aggregate_def list_slice_def)"], ["", "lemma f_aggregate_Cons: \"\n  \\<lbrakk> 0 < k; length xs = k \\<rbrakk> \\<Longrightarrow>\n  f_aggregate (xs @ ys) k ag = ag xs # (f_aggregate ys k ag)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>0 < k; length xs = k\\<rbrakk>\n    \\<Longrightarrow> f_aggregate (xs @ ys) k ag =\n                      ag xs # f_aggregate ys k ag", "by (simp add: f_aggregate_def list_slice_def)"], ["", "lemma f_aggregate_eq_f_aggregate_take: \"\n  f_aggregate (xs \\<down> (length xs div k * k)) k ag = f_aggregate xs k ag\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f_aggregate (xs \\<down> (length xs div k * k)) k ag =\n    f_aggregate xs k ag", "by (simp add: f_aggregate_def list_slice_eq_list_slice_take)"], ["", "lemma f_aggregate_nth: \"\n  n < length xs div k \\<Longrightarrow>\n  (f_aggregate xs k ag) ! n = ag (xs \\<up> (n * k) \\<down> k)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. n < length xs div k \\<Longrightarrow>\n    f_aggregate xs k ag ! n = ag (xs \\<up> (n * k) \\<down> k)", "by (simp add: f_aggregate_def list_slice_length list_slice_nth)"], ["", "lemma f_aggregate_nth_eq_sublist_list: \"\n  n < length xs div k \\<Longrightarrow>\n  (f_aggregate xs k ag) ! n = ag (sublist_list xs [n * k..<n * k + k])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. n < length xs div k \\<Longrightarrow>\n    f_aggregate xs k ag ! n = ag (sublist_list xs [n * k..<n * k + k])", "apply (frule less_div_imp_mult_add_divisor_le)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>n < length xs div k; n * k + k \\<le> length xs\\<rbrakk>\n    \\<Longrightarrow> f_aggregate xs k ag ! n =\n                      ag (sublist_list xs [n * k..<n * k + k])", "apply (simp add: f_aggregate_nth take_drop_eq_sublist_list)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma f_aggregate_take_nth: \"\n  \\<And>xs m. \\<lbrakk> n < length xs div k; n < m div k \\<rbrakk> \\<Longrightarrow>\n  f_aggregate (xs \\<down> m) k ag ! n = f_aggregate xs k ag ! n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xs m.\n       \\<lbrakk>n < length xs div k; n < m div k\\<rbrakk>\n       \\<Longrightarrow> f_aggregate (xs \\<down> m) k ag ! n =\n                         f_aggregate xs k ag ! n", "apply (simp add: f_aggregate_nth drop_take)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xs m.\n       \\<lbrakk>n < length xs div k; n < m div k\\<rbrakk>\n       \\<Longrightarrow> ag (xs \\<up> (n * k) \\<down> min k (m - n * k)) =\n                         ag (xs \\<up> (n * k) \\<down> k)", "apply (drule_tac n=m in less_div_imp_mult_add_divisor_le)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xs m.\n       \\<lbrakk>n < length xs div k; n * k + k \\<le> m\\<rbrakk>\n       \\<Longrightarrow> ag (xs \\<up> (n * k) \\<down> min k (m - n * k)) =\n                         ag (xs \\<up> (n * k) \\<down> k)", "apply (simp add: min_eqL)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma f_aggregate_hd: \"\n  \\<lbrakk> 0 < k; k \\<le> length xs \\<rbrakk> \\<Longrightarrow>\n  hd (f_aggregate xs k ag) = ag (xs \\<down> k)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>0 < k; k \\<le> length xs\\<rbrakk>\n    \\<Longrightarrow> hd (f_aggregate xs k ag) = ag (xs \\<down> k)", "apply (drule div_le_mono[of _ _ k])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>0 < k; k div k \\<le> length xs div k\\<rbrakk>\n    \\<Longrightarrow> hd (f_aggregate xs k ag) = ag (xs \\<down> k)", "apply (simp add: Suc_le_eq)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>0 < k; 0 < length xs div k\\<rbrakk>\n    \\<Longrightarrow> hd (f_aggregate xs k ag) = ag (xs \\<down> k)", "apply (subst hd_eq_first[symmetric])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>0 < k; 0 < length xs div k\\<rbrakk>\n    \\<Longrightarrow> f_aggregate xs k ag \\<noteq> []\n 2. \\<lbrakk>0 < k; 0 < length xs div k\\<rbrakk>\n    \\<Longrightarrow> f_aggregate xs k ag ! 0 = ag (xs \\<down> k)", "apply (simp add: length_greater_0_conv[symmetric])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>0 < k; 0 < length xs div k\\<rbrakk>\n    \\<Longrightarrow> f_aggregate xs k ag ! 0 = ag (xs \\<down> k)", "apply (simp add: f_aggregate_nth)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma f_aggregate_append_mod: \"\n  length xs mod k = 0 \\<Longrightarrow>\n  f_aggregate (xs @ ys) k ag =\n  f_aggregate xs k ag @ f_aggregate ys k ag\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length xs mod k = 0 \\<Longrightarrow>\n    f_aggregate (xs @ ys) k ag = f_aggregate xs k ag @ f_aggregate ys k ag", "by (simp add: f_aggregate_def list_slice_append_mod)"], ["", "lemma f_aggregate_append_mult: \"\n  length xs = m * k \\<Longrightarrow>\n  f_aggregate (xs @ ys) k ag =\n  f_aggregate xs k ag @ f_aggregate ys k ag\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length xs = m * k \\<Longrightarrow>\n    f_aggregate (xs @ ys) k ag = f_aggregate xs k ag @ f_aggregate ys k ag", "by (simp add: f_aggregate_append_mod)"], ["", "lemma f_aggregate_snoc: \"\n  \\<lbrakk> 0 < k; length ys = k; length xs mod k = 0 \\<rbrakk> \\<Longrightarrow>\n  f_aggregate (xs @ ys) k ag = f_aggregate xs k ag @ [ag ys]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>0 < k; length ys = k; length xs mod k = 0\\<rbrakk>\n    \\<Longrightarrow> f_aggregate (xs @ ys) k ag =\n                      f_aggregate xs k ag @ [ag ys]", "by (simp add: f_aggregate_append_mod f_aggregate_one)"], ["", "lemma f_aggregate_take: \"\n  f_aggregate (xs \\<down> n) k ag = f_aggregate xs k ag \\<down> (n div k)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f_aggregate (xs \\<down> n) k ag = f_aggregate xs k ag \\<down> (n div k)", "apply (case_tac \"k = 0\", simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. k \\<noteq> 0 \\<Longrightarrow>\n    f_aggregate (xs \\<down> n) k ag = f_aggregate xs k ag \\<down> (n div k)", "apply (simp add: list_eq_iff)"], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < k \\<Longrightarrow>\n    min (length xs) n div k = min (length xs div k) (n div k) \\<and>\n    (\\<forall>i<min (length xs) n div k.\n        f_aggregate (xs \\<down> n) k ag ! i =\n        f_aggregate xs k ag \\<down> (n div k) ! i)", "apply (case_tac \"length xs \\<le> n\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>0 < k; length xs \\<le> n\\<rbrakk>\n    \\<Longrightarrow> min (length xs) n div k =\n                      min (length xs div k) (n div k) \\<and>\n                      (\\<forall>i<min (length xs) n div k.\n                          f_aggregate (xs \\<down> n) k ag ! i =\n                          f_aggregate xs k ag \\<down> (n div k) ! i)\n 2. \\<lbrakk>0 < k; \\<not> length xs \\<le> n\\<rbrakk>\n    \\<Longrightarrow> min (length xs) n div k =\n                      min (length xs div k) (n div k) \\<and>\n                      (\\<forall>i<min (length xs) n div k.\n                          f_aggregate (xs \\<down> n) k ag ! i =\n                          f_aggregate xs k ag \\<down> (n div k) ! i)", "apply (simp add: min_eqL div_le_mono f_aggregate_nth)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>0 < k; \\<not> length xs \\<le> n\\<rbrakk>\n    \\<Longrightarrow> min (length xs) n div k =\n                      min (length xs div k) (n div k) \\<and>\n                      (\\<forall>i<min (length xs) n div k.\n                          f_aggregate (xs \\<down> n) k ag ! i =\n                          f_aggregate xs k ag \\<down> (n div k) ! i)", "apply (clarsimp simp: linorder_not_le min_eqR div_le_mono f_aggregate_nth drop_take)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i.\n       \\<lbrakk>0 < k; n < length xs; i < n div k\\<rbrakk>\n       \\<Longrightarrow> ag (xs \\<up> (i * k) \\<down> min k (n - i * k)) =\n                         f_aggregate xs k ag ! i", "apply (frule less_div_imp_mult_add_divisor_le)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i.\n       \\<lbrakk>0 < k; n < length xs; i < n div k;\n        i * k + k \\<le> n\\<rbrakk>\n       \\<Longrightarrow> ag (xs \\<up> (i * k) \\<down> min k (n - i * k)) =\n                         f_aggregate xs k ag ! i", "apply (simp add: min_eqL)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i.\n       \\<lbrakk>0 < k; n < length xs; i < n div k;\n        i * k + k \\<le> n\\<rbrakk>\n       \\<Longrightarrow> ag (xs \\<up> (i * k) \\<down> k) =\n                         f_aggregate xs k ag ! i", "apply (subgoal_tac \"i < length xs div k\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>i.\n       \\<lbrakk>0 < k; n < length xs; i < n div k; i * k + k \\<le> n;\n        i < length xs div k\\<rbrakk>\n       \\<Longrightarrow> ag (xs \\<up> (i * k) \\<down> k) =\n                         f_aggregate xs k ag ! i\n 2. \\<And>i.\n       \\<lbrakk>0 < k; n < length xs; i < n div k;\n        i * k + k \\<le> n\\<rbrakk>\n       \\<Longrightarrow> i < length xs div k", "prefer 2"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>i.\n       \\<lbrakk>0 < k; n < length xs; i < n div k;\n        i * k + k \\<le> n\\<rbrakk>\n       \\<Longrightarrow> i < length xs div k\n 2. \\<And>i.\n       \\<lbrakk>0 < k; n < length xs; i < n div k; i * k + k \\<le> n;\n        i < length xs div k\\<rbrakk>\n       \\<Longrightarrow> ag (xs \\<up> (i * k) \\<down> k) =\n                         f_aggregate xs k ag ! i", "apply (drule_tac y=n in order_le_less_trans, assumption)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>i.\n       \\<lbrakk>0 < k; n < length xs; i < n div k;\n        i * k + k < length xs\\<rbrakk>\n       \\<Longrightarrow> i < length xs div k\n 2. \\<And>i.\n       \\<lbrakk>0 < k; n < length xs; i < n div k; i * k + k \\<le> n;\n        i < length xs div k\\<rbrakk>\n       \\<Longrightarrow> ag (xs \\<up> (i * k) \\<down> k) =\n                         f_aggregate xs k ag ! i", "apply (drule_tac m=\"i * k + k\" and k=k in div_le_mono[OF less_imp_le])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>i.\n       \\<lbrakk>0 < k; n < length xs; i < n div k;\n        (i * k + k) div k \\<le> length xs div k\\<rbrakk>\n       \\<Longrightarrow> i < length xs div k\n 2. \\<And>i.\n       \\<lbrakk>0 < k; n < length xs; i < n div k; i * k + k \\<le> n;\n        i < length xs div k\\<rbrakk>\n       \\<Longrightarrow> ag (xs \\<up> (i * k) \\<down> k) =\n                         f_aggregate xs k ag ! i", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i.\n       \\<lbrakk>0 < k; n < length xs; i < n div k; i * k + k \\<le> n;\n        i < length xs div k\\<rbrakk>\n       \\<Longrightarrow> ag (xs \\<up> (i * k) \\<down> k) =\n                         f_aggregate xs k ag ! i", "apply (simp add: f_aggregate_nth)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma f_aggregate_take_mult: \"\n  f_aggregate (xs \\<down> (n * k)) k ag = f_aggregate xs k ag \\<down> n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f_aggregate (xs \\<down> (n * k)) k ag = f_aggregate xs k ag \\<down> n", "by (simp add: f_aggregate_take)"], ["", "lemma f_aggregate_drop_mult: \"\n  f_aggregate (xs \\<up> (n * k)) k ag = f_aggregate xs k ag \\<up> n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f_aggregate (xs \\<up> (n * k)) k ag = f_aggregate xs k ag \\<up> n", "by (simp add: list_eq_iff div_diff_mult_self1 f_aggregate_nth add_mult_distrib add.commute[of \"n * k\"])"], ["", "lemma f_aggregate_drop_mod: \"\n  n mod k = 0 \\<Longrightarrow> f_aggregate (xs \\<up> n) k ag = f_aggregate xs k ag \\<up> (n div k)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. n mod k = 0 \\<Longrightarrow>\n    f_aggregate (xs \\<up> n) k ag = f_aggregate xs k ag \\<up> (n div k)", "by (clarsimp simp: mult.commute[of k] f_aggregate_drop_mult elim!: dvdE)"], ["", "lemma f_aggregate_assoc: \"\n  (\\<And>xs. length xs mod a = 0 \\<Longrightarrow> ag (f_aggregate xs a ag) = ag xs) \\<Longrightarrow>\n  f_aggregate (f_aggregate xs a ag) b ag = f_aggregate xs (a * b) ag\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>xs.\n        length xs mod a = 0 \\<Longrightarrow>\n        ag (f_aggregate xs a ag) = ag xs) \\<Longrightarrow>\n    f_aggregate (f_aggregate xs a ag) b ag = f_aggregate xs (a * b) ag", "apply (clarsimp simp add: list_eq_iff div_mult2_eq f_aggregate_nth, rename_tac i)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i.\n       \\<lbrakk>\\<And>xs.\n                   length xs mod a = 0 \\<Longrightarrow>\n                   ag (f_aggregate xs a ag) = ag xs;\n        i < length xs div a div b\\<rbrakk>\n       \\<Longrightarrow> ag (f_aggregate xs a ag \\<up> (i * b) \\<down> b) =\n                         ag (xs \\<up> (i * (a * b)) \\<down> (a * b))", "apply (simp add: take_drop f_aggregate_take_mult[symmetric])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i.\n       \\<lbrakk>\\<And>xs.\n                   length xs mod a = 0 \\<Longrightarrow>\n                   ag (f_aggregate xs a ag) = ag xs;\n        i < length xs div a div b\\<rbrakk>\n       \\<Longrightarrow> ag (f_aggregate (xs \\<down> ((b + i * b) * a)) a\n                              ag \\<up>\n                             (i * b)) =\n                         ag (xs \\<down> (a * b + i * (a * b)) \\<up>\n                             (i * (a * b)))", "apply (simp add: add_mult_distrib2 mult.commute[of _ a] f_aggregate_drop_mult[symmetric] mult.assoc[symmetric])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i.\n       \\<lbrakk>\\<And>xs.\n                   length xs mod a = 0 \\<Longrightarrow>\n                   ag (f_aggregate xs a ag) = ag xs;\n        i < length xs div a div b\\<rbrakk>\n       \\<Longrightarrow> ag (f_aggregate\n                              (xs \\<down> (a * b + a * i * b) \\<up>\n                               (a * i * b))\n                              a ag) =\n                         ag (xs \\<down> (a * b + a * i * b) \\<up>\n                             (a * i * b))", "apply (drule_tac x=\"(xs \\<down> (a * b + a * i * b) \\<up> (a * i * b))\" in meta_spec)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i.\n       \\<lbrakk>i < length xs div a div b;\n        length (xs \\<down> (a * b + a * i * b) \\<up> (a * i * b)) mod a =\n        0 \\<Longrightarrow>\n        ag (f_aggregate (xs \\<down> (a * b + a * i * b) \\<up> (a * i * b)) a\n             ag) =\n        ag (xs \\<down> (a * b + a * i * b) \\<up> (a * i * b))\\<rbrakk>\n       \\<Longrightarrow> ag (f_aggregate\n                              (xs \\<down> (a * b + a * i * b) \\<up>\n                               (a * i * b))\n                              a ag) =\n                         ag (xs \\<down> (a * b + a * i * b) \\<up>\n                             (a * i * b))", "apply (subgoal_tac \"a * b + a * i * b \\<le> length xs\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>i.\n       \\<lbrakk>i < length xs div a div b;\n        length (xs \\<down> (a * b + a * i * b) \\<up> (a * i * b)) mod a =\n        0 \\<Longrightarrow>\n        ag (f_aggregate (xs \\<down> (a * b + a * i * b) \\<up> (a * i * b)) a\n             ag) =\n        ag (xs \\<down> (a * b + a * i * b) \\<up> (a * i * b));\n        a * b + a * i * b \\<le> length xs\\<rbrakk>\n       \\<Longrightarrow> ag (f_aggregate\n                              (xs \\<down> (a * b + a * i * b) \\<up>\n                               (a * i * b))\n                              a ag) =\n                         ag (xs \\<down> (a * b + a * i * b) \\<up>\n                             (a * i * b))\n 2. \\<And>i.\n       \\<lbrakk>i < length xs div a div b;\n        length (xs \\<down> (a * b + a * i * b) \\<up> (a * i * b)) mod a =\n        0 \\<Longrightarrow>\n        ag (f_aggregate (xs \\<down> (a * b + a * i * b) \\<up> (a * i * b)) a\n             ag) =\n        ag (xs \\<down> (a * b + a * i * b) \\<up> (a * i * b))\\<rbrakk>\n       \\<Longrightarrow> a * b + a * i * b \\<le> length xs", "prefer 2"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>i.\n       \\<lbrakk>i < length xs div a div b;\n        length (xs \\<down> (a * b + a * i * b) \\<up> (a * i * b)) mod a =\n        0 \\<Longrightarrow>\n        ag (f_aggregate (xs \\<down> (a * b + a * i * b) \\<up> (a * i * b)) a\n             ag) =\n        ag (xs \\<down> (a * b + a * i * b) \\<up> (a * i * b))\\<rbrakk>\n       \\<Longrightarrow> a * b + a * i * b \\<le> length xs\n 2. \\<And>i.\n       \\<lbrakk>i < length xs div a div b;\n        length (xs \\<down> (a * b + a * i * b) \\<up> (a * i * b)) mod a =\n        0 \\<Longrightarrow>\n        ag (f_aggregate (xs \\<down> (a * b + a * i * b) \\<up> (a * i * b)) a\n             ag) =\n        ag (xs \\<down> (a * b + a * i * b) \\<up> (a * i * b));\n        a * b + a * i * b \\<le> length xs\\<rbrakk>\n       \\<Longrightarrow> ag (f_aggregate\n                              (xs \\<down> (a * b + a * i * b) \\<up>\n                               (a * i * b))\n                              a ag) =\n                         ag (xs \\<down> (a * b + a * i * b) \\<up>\n                             (a * i * b))", "apply (simp add: div_mult2_eq[symmetric])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>i.\n       \\<lbrakk>i < length xs div (a * b);\n        (min (length xs) (a * b + a * i * b) - a * i * b) mod a =\n        0 \\<Longrightarrow>\n        ag (f_aggregate (xs \\<down> (a * b + a * i * b) \\<up> (a * i * b)) a\n             ag) =\n        ag (xs \\<down> (a * b + a * i * b) \\<up> (a * i * b))\\<rbrakk>\n       \\<Longrightarrow> a * b + a * i * b \\<le> length xs\n 2. \\<And>i.\n       \\<lbrakk>i < length xs div a div b;\n        length (xs \\<down> (a * b + a * i * b) \\<up> (a * i * b)) mod a =\n        0 \\<Longrightarrow>\n        ag (f_aggregate (xs \\<down> (a * b + a * i * b) \\<up> (a * i * b)) a\n             ag) =\n        ag (xs \\<down> (a * b + a * i * b) \\<up> (a * i * b));\n        a * b + a * i * b \\<le> length xs\\<rbrakk>\n       \\<Longrightarrow> ag (f_aggregate\n                              (xs \\<down> (a * b + a * i * b) \\<up>\n                               (a * i * b))\n                              a ag) =\n                         ag (xs \\<down> (a * b + a * i * b) \\<up>\n                             (a * i * b))", "apply (drule_tac x=i in less_div_imp_mult_add_divisor_le)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>i.\n       \\<lbrakk>(min (length xs) (a * b + a * i * b) - a * i * b) mod a =\n                0 \\<Longrightarrow>\n                ag (f_aggregate\n                     (xs \\<down> (a * b + a * i * b) \\<up> (a * i * b)) a\n                     ag) =\n                ag (xs \\<down> (a * b + a * i * b) \\<up> (a * i * b));\n        i * (a * b) + a * b \\<le> length xs\\<rbrakk>\n       \\<Longrightarrow> a * b + a * i * b \\<le> length xs\n 2. \\<And>i.\n       \\<lbrakk>i < length xs div a div b;\n        length (xs \\<down> (a * b + a * i * b) \\<up> (a * i * b)) mod a =\n        0 \\<Longrightarrow>\n        ag (f_aggregate (xs \\<down> (a * b + a * i * b) \\<up> (a * i * b)) a\n             ag) =\n        ag (xs \\<down> (a * b + a * i * b) \\<up> (a * i * b));\n        a * b + a * i * b \\<le> length xs\\<rbrakk>\n       \\<Longrightarrow> ag (f_aggregate\n                              (xs \\<down> (a * b + a * i * b) \\<up>\n                               (a * i * b))\n                              a ag) =\n                         ag (xs \\<down> (a * b + a * i * b) \\<up>\n                             (a * i * b))", "apply (simp add: mult.assoc[symmetric] mult.commute[of _ a] add.commute[of _ \"a * b\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i.\n       \\<lbrakk>i < length xs div a div b;\n        length (xs \\<down> (a * b + a * i * b) \\<up> (a * i * b)) mod a =\n        0 \\<Longrightarrow>\n        ag (f_aggregate (xs \\<down> (a * b + a * i * b) \\<up> (a * i * b)) a\n             ag) =\n        ag (xs \\<down> (a * b + a * i * b) \\<up> (a * i * b));\n        a * b + a * i * b \\<le> length xs\\<rbrakk>\n       \\<Longrightarrow> ag (f_aggregate\n                              (xs \\<down> (a * b + a * i * b) \\<up>\n                               (a * i * b))\n                              a ag) =\n                         ag (xs \\<down> (a * b + a * i * b) \\<up>\n                             (a * i * b))", "apply (simp add: min_eqR)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma f_aggregate_commute: \"\n  \\<lbrakk> \\<And>xs. length xs mod a = 0 \\<Longrightarrow> ag (f_aggregate xs a ag) = ag xs;\n    \\<And>xs. length xs mod b = 0 \\<Longrightarrow> ag (f_aggregate xs b ag) = ag xs \\<rbrakk> \\<Longrightarrow>\n  f_aggregate (f_aggregate xs a ag) b ag = f_aggregate (f_aggregate xs b ag) a ag\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>xs.\n                length xs mod a = 0 \\<Longrightarrow>\n                ag (f_aggregate xs a ag) = ag xs;\n     \\<And>xs.\n        length xs mod b = 0 \\<Longrightarrow>\n        ag (f_aggregate xs b ag) = ag xs\\<rbrakk>\n    \\<Longrightarrow> f_aggregate (f_aggregate xs a ag) b ag =\n                      f_aggregate (f_aggregate xs b ag) a ag", "by (simp add: f_aggregate_assoc mult.commute[of _ b])"], ["", "lemma i_aggregate_0[simp]: \"i_aggregate f 0 ag = (\\<lambda>x. ag [])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. i_aggregate f 0 ag = (\\<lambda>x. ag [])", "by (simp add: i_aggregate_def)"], ["", "lemma i_aggregate_1: \"(\\<And>x. ag [x] = x) \\<Longrightarrow> i_aggregate f (Suc 0) ag = f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>x. ag [x] = x) \\<Longrightarrow> i_aggregate f (Suc 0) ag = f", "by (simp add: i_aggregate_def i_take_first)"], ["", "lemma i_aggregate_nth: \"i_aggregate f k ag n = ag (f \\<Up> (n * k) \\<Down> k)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. i_aggregate f k ag n = ag (f \\<Up> (n * k) \\<Down> k)", "by (simp add: i_aggregate_def)"], ["", "lemma i_aggregate_hd: \"i_aggregate f k ag 0 = ag (f \\<Down> k)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. i_aggregate f k ag 0 = ag (f \\<Down> k)", "by (simp add: i_aggregate_nth)"], ["", "lemma i_aggregate_nth_eq_map: \"i_aggregate f k ag n = ag (map f [n * k..<n * k + k])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. i_aggregate f k ag n = ag (map f [n * k..<n * k + k])", "by (simp add: i_aggregate_nth i_take_drop_eq_map)"], ["", "lemma i_aggregate_i_append_mod: \"\n  length xs mod k = 0 \\<Longrightarrow>\n  i_aggregate (xs \\<frown> f) k ag = f_aggregate xs k ag \\<frown> i_aggregate f k ag\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length xs mod k = 0 \\<Longrightarrow>\n    i_aggregate (xs \\<frown> f) k ag =\n    f_aggregate xs k ag \\<frown> i_aggregate f k ag", "apply (clarsimp simp: ilist_eq_iff i_aggregate_nth i_append_nth f_aggregate_nth mult.commute[of k] diff_mult_distrib elim!: dvdE, rename_tac i n)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i n.\n       \\<lbrakk>length xs = i * k; 0 < k; n < i\\<rbrakk>\n       \\<Longrightarrow> ag (xs \\<up> (n * k) \\<down> k @\n                             f \\<Down> (k + n * k - i * k)) =\n                         ag (xs \\<up> (n * k) \\<down> k)", "apply (drule_tac n=i in Suc_leI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i n.\n       \\<lbrakk>length xs = i * k; 0 < k; Suc n \\<le> i\\<rbrakk>\n       \\<Longrightarrow> ag (xs \\<up> (n * k) \\<down> k @\n                             f \\<Down> (k + n * k - i * k)) =\n                         ag (xs \\<up> (n * k) \\<down> k)", "apply (drule mult_le_mono1[of _ _ k])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i n.\n       \\<lbrakk>length xs = i * k; 0 < k; Suc n * k \\<le> i * k\\<rbrakk>\n       \\<Longrightarrow> ag (xs \\<up> (n * k) \\<down> k @\n                             f \\<Down> (k + n * k - i * k)) =\n                         ag (xs \\<up> (n * k) \\<down> k)", "apply simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma i_aggregate_i_append_mult: \"\n  length xs = m * k \\<Longrightarrow>\n  i_aggregate (xs \\<frown> f) k ag = f_aggregate xs k ag \\<frown> i_aggregate f k ag\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length xs = m * k \\<Longrightarrow>\n    i_aggregate (xs \\<frown> f) k ag =\n    f_aggregate xs k ag \\<frown> i_aggregate f k ag", "by (rule i_aggregate_i_append_mod, simp)"], ["", "lemma i_aggregate_Cons: \"\n  \\<lbrakk> 0 < k; length xs = k \\<rbrakk> \\<Longrightarrow>\n  i_aggregate (xs \\<frown> f) k ag = [ag xs] \\<frown> (i_aggregate f k ag)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>0 < k; length xs = k\\<rbrakk>\n    \\<Longrightarrow> i_aggregate (xs \\<frown> f) k ag =\n                      [ag xs] \\<frown> i_aggregate f k ag", "apply (insert i_aggregate_i_append_mod[of xs k f ag], simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>0 < k; length xs = k;\n     i_aggregate (xs \\<frown> f) k ag =\n     f_aggregate xs k ag \\<frown> i_aggregate f k ag\\<rbrakk>\n    \\<Longrightarrow> f_aggregate xs k ag = [ag xs]", "apply (simp add: f_aggregate_def list_slice_div_eq_1)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma i_aggregate_take_nth: \"\n  n < m div k \\<Longrightarrow> f_aggregate (f \\<Down> m) k ag ! n = i_aggregate f k ag n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. n < m div k \\<Longrightarrow>\n    f_aggregate (f \\<Down> m) k ag ! n = i_aggregate f k ag n", "apply (simp add: f_aggregate_nth i_aggregate_nth)"], ["proof (prove)\ngoal (1 subgoal):\n 1. n < m div k \\<Longrightarrow>\n    ag (f \\<Down> m \\<up> (n * k) \\<down> k) =\n    ag (f \\<Up> (n * k) \\<Down> k)", "apply (drule less_div_imp_mult_add_divisor_le)"], ["proof (prove)\ngoal (1 subgoal):\n 1. n * k + k \\<le> m \\<Longrightarrow>\n    ag (f \\<Down> m \\<up> (n * k) \\<down> k) =\n    ag (f \\<Up> (n * k) \\<Down> k)", "apply (simp add: i_take_drop_map i_take_drop_eq_map take_map)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma i_aggregate_i_take: \"\n  f_aggregate (f \\<Down> n) k ag = i_aggregate f k ag \\<Down> (n div k)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f_aggregate (f \\<Down> n) k ag = i_aggregate f k ag \\<Down> (n div k)", "by (simp add: list_eq_iff i_aggregate_take_nth)"], ["", "lemma i_aggregate_i_take_mult: \"\n  0 < k \\<Longrightarrow> f_aggregate (f \\<Down> (n * k)) k ag = i_aggregate f k ag \\<Down> n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < k \\<Longrightarrow>\n    f_aggregate (f \\<Down> (n * k)) k ag = i_aggregate f k ag \\<Down> n", "by (simp add: i_aggregate_i_take)"], ["", "lemma i_aggregate_i_drop_mult: \"\n  i_aggregate (f \\<Up> (n * k)) k ag = i_aggregate f k ag \\<Up> n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. i_aggregate (f \\<Up> (n * k)) k ag = i_aggregate f k ag \\<Up> n", "by (simp add: ilist_eq_iff i_aggregate_nth add_mult_distrib)"], ["", "lemma i_aggregate_i_drop_mod: \"\n  n mod k = 0 \\<Longrightarrow>\n  i_aggregate (f \\<Up> n) k ag = i_aggregate f k ag \\<Up> (n div k)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. n mod k = 0 \\<Longrightarrow>\n    i_aggregate (f \\<Up> n) k ag = i_aggregate f k ag \\<Up> (n div k)", "by (clarsimp simp: mult.commute[of k] i_aggregate_i_drop_mult ilist_eq_iff elim!: dvdE)"], ["", "lemma i_aggregate_assoc: \"\n  \\<lbrakk> 0 < a; 0 < b;\n    \\<And>xs. length xs mod a = 0 \\<Longrightarrow> ag (f_aggregate xs a ag) = ag xs \\<rbrakk> \\<Longrightarrow>\n  i_aggregate (i_aggregate f a ag) b ag = i_aggregate f (a * b) ag\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>0 < a; 0 < b;\n     \\<And>xs.\n        length xs mod a = 0 \\<Longrightarrow>\n        ag (f_aggregate xs a ag) = ag xs\\<rbrakk>\n    \\<Longrightarrow> i_aggregate (i_aggregate f a ag) b ag =\n                      i_aggregate f (a * b) ag", "apply (simp add: ilist_eq_iff i_aggregate_nth)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>0 < a; 0 < b;\n     \\<And>xs.\n        length xs mod a = 0 \\<Longrightarrow>\n        ag (f_aggregate xs a ag) = ag xs\\<rbrakk>\n    \\<Longrightarrow> \\<forall>x.\n                         ag (i_aggregate f a ag \\<Up> (x * b) \\<Down> b) =\n                         ag (f \\<Up> (x * (a * b)) \\<Down> (a * b))", "apply (simp add: i_aggregate_i_drop_mult[symmetric] i_aggregate_i_take_mult[symmetric] mult.commute[of a] mult.assoc)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma i_aggregate_commute: \"\n  \\<lbrakk> 0 < a; 0 < b;\n    \\<And>xs. length xs mod a = 0 \\<Longrightarrow> ag (f_aggregate xs a ag) = ag xs;\n    \\<And>xs. length xs mod b = 0 \\<Longrightarrow> ag (f_aggregate xs b ag) = ag xs \\<rbrakk> \\<Longrightarrow>\n  i_aggregate (i_aggregate xs a ag) b ag = i_aggregate (i_aggregate xs b ag) a ag\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>0 < a; 0 < b;\n     \\<And>xs.\n        length xs mod a = 0 \\<Longrightarrow>\n        ag (f_aggregate xs a ag) = ag xs;\n     \\<And>xs.\n        length xs mod b = 0 \\<Longrightarrow>\n        ag (f_aggregate xs b ag) = ag xs\\<rbrakk>\n    \\<Longrightarrow> i_aggregate (i_aggregate xs a ag) b ag =\n                      i_aggregate (i_aggregate xs b ag) a ag", "by (simp add: i_aggregate_assoc mult.commute[of _ b])"], ["", "subsubsection \\<open>Compressing message streams\\<close>"], ["", "text \\<open>Determines the last non-empty message.\\<close>"], ["", "primrec last_message :: \"'a fstream_af \\<Rightarrow> 'a message_af\"\nwhere\n  \"last_message [] = \\<NoMsg>\"\n| \"last_message (x # xs) = (if last_message xs = \\<NoMsg> then x else last_message xs)\""], ["", "definition f_shrink :: \"'a fstream_af \\<Rightarrow> nat \\<Rightarrow> 'a fstream_af\" (infixl \"\\<div>\\<^sub>f\" 100)\n  where \"f_shrink xs k \\<equiv> f_aggregate xs k last_message\""], ["", "definition i_shrink :: \"'a istream_af \\<Rightarrow> nat \\<Rightarrow> 'a istream_af\" (infixl \"\\<div>\\<^sub>i\" 100)\n  where \"i_shrink f k \\<equiv> i_aggregate f k last_message\""], ["", "notation\n  f_shrink  (infixl \"\\<div>\" 100) and\n  i_shrink  (infixl \"\\<div>\" 100)"], ["", "lemmas f_shrink_defs = f_shrink_def f_aggregate_def"], ["", "lemmas i_shrink_defs = i_shrink_def i_aggregate_def"], ["", "lemma last_message_Nil: \"last_message [] = \\<NoMsg>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. last_message [] = NoMsg", "by simp"], ["", "lemma last_message_one: \"last_message [m] = m\""], ["proof (prove)\ngoal (1 subgoal):\n 1. last_message [m] = m", "by simp"], ["", "lemma last_message_replicate: \"0 < n \\<Longrightarrow> last_message (m\\<^bsup>n\\<^esup>) = m\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < n \\<Longrightarrow> last_message m\\<^bsup>n\\<^esup> = m", "apply (induct n, simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>0 < n \\<Longrightarrow> last_message m\\<^bsup>n\\<^esup> = m;\n        0 < Suc n\\<rbrakk>\n       \\<Longrightarrow> last_message m\\<^bsup>Suc n\\<^esup> = m", "apply (case_tac n, simp+)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma last_message_replicate_NoMsg: \"last_message (\\<NoMsg>\\<^bsup>n\\<^esup>) = \\<NoMsg>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. last_message NoMsg\\<^bsup>n\\<^esup> = NoMsg", "apply (case_tac \"n = 0\", simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. n \\<noteq> 0 \\<Longrightarrow>\n    last_message NoMsg\\<^bsup>n\\<^esup> = NoMsg", "apply (simp add: last_message_replicate)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma last_message_Cons_NoMsg: \"last_message (\\<NoMsg> # xs) = last_message xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. last_message (NoMsg # xs) = last_message xs", "by simp"], ["", "lemma last_message_append_one: \"\n  last_message (xs @ [m]) = (if m = \\<NoMsg> then last_message xs else m)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. last_message (xs @ [m]) = (if m = NoMsg then last_message xs else m)", "apply (induct xs, simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a xs.\n       last_message (xs @ [m]) =\n       (if m = NoMsg then last_message xs else m) \\<Longrightarrow>\n       last_message ((a # xs) @ [m]) =\n       (if m = NoMsg then last_message (a # xs) else m)", "apply (case_tac \"m = \\<NoMsg>\", simp+)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma last_message_append: \"\\<And>xs.\n  last_message (xs @ ys) = (\n  if last_message ys = \\<NoMsg> then last_message xs else last_message ys)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xs.\n       last_message (xs @ ys) =\n       (if last_message ys = NoMsg then last_message xs\n        else last_message ys)", "apply (induct ys, simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a ys xs.\n       (\\<And>xs.\n           last_message (xs @ ys) =\n           (if last_message ys = NoMsg then last_message xs\n            else last_message ys)) \\<Longrightarrow>\n       last_message (xs @ a # ys) =\n       (if last_message (a # ys) = NoMsg then last_message xs\n        else last_message (a # ys))", "apply (drule_tac x=\"xs @ [a]\" in meta_spec)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a ys xs.\n       last_message ((xs @ [a]) @ ys) =\n       (if last_message ys = NoMsg then last_message (xs @ [a])\n        else last_message ys) \\<Longrightarrow>\n       last_message (xs @ a # ys) =\n       (if last_message (a # ys) = NoMsg then last_message xs\n        else last_message (a # ys))", "apply (simp add: last_message_append_one)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "corollary last_message_append_replicate_NoMsg: \"\n  last_message (xs @ \\<NoMsg>\\<^bsup>n\\<^esup>) = last_message xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. last_message (xs @ NoMsg\\<^bsup>n\\<^esup>) = last_message xs", "by (simp add: last_message_append last_message_replicate_NoMsg)"], ["", "lemma last_message_replicate_NoMsg_append: \"\n  last_message (\\<NoMsg>\\<^bsup>n\\<^esup> @ xs) = last_message xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. last_message (NoMsg\\<^bsup>n\\<^esup> @ xs) = last_message xs", "by (simp add: last_message_append last_message_replicate_NoMsg)"], ["", "lemma last_message_NoMsg_conv: \"\n  (last_message xs = \\<NoMsg>) = (\\<forall>i<length xs. xs ! i = \\<NoMsg>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (last_message xs = NoMsg) = (\\<forall>i<length xs. xs ! i = NoMsg)", "apply (induct xs, simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a xs.\n       (last_message xs = NoMsg) =\n       (\\<forall>i<length xs. xs ! i = NoMsg) \\<Longrightarrow>\n       (last_message (a # xs) = NoMsg) =\n       (\\<forall>i<length (a # xs). (a # xs) ! i = NoMsg)", "apply (simp add: nth_Cons')"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a xs.\n       (last_message xs = NoMsg) =\n       (\\<forall>i<length xs. xs ! i = NoMsg) \\<Longrightarrow>\n       (\\<exists>i<length xs. xs ! i \\<noteq> NoMsg) \\<longrightarrow>\n       (\\<forall>i<length xs. xs ! i = NoMsg) =\n       (\\<forall>i.\n           (i = 0 \\<longrightarrow> a = NoMsg) \\<and>\n           (0 < i \\<longrightarrow>\n            i < Suc (length xs) \\<longrightarrow> xs ! (i - Suc 0) = NoMsg))", "apply (safe, simp_all)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a xs i ia ib.\n       \\<lbrakk>i < length xs; xs ! i \\<noteq> NoMsg;\n        last_message xs \\<noteq> NoMsg; ia < length xs;\n        xs ! ia \\<noteq> NoMsg;\n        \\<forall>i.\n           (i = 0 \\<longrightarrow> a = NoMsg) \\<and>\n           (0 < i \\<longrightarrow>\n            i < Suc (length xs) \\<longrightarrow> xs ! (i - Suc 0) = NoMsg);\n        ib < length xs\\<rbrakk>\n       \\<Longrightarrow> xs ! ib = NoMsg", "apply (rename_tac i)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a xs ia iaa i.\n       \\<lbrakk>ia < length xs; xs ! ia \\<noteq> NoMsg;\n        last_message xs \\<noteq> NoMsg; iaa < length xs;\n        xs ! iaa \\<noteq> NoMsg;\n        \\<forall>i.\n           (i = 0 \\<longrightarrow> a = NoMsg) \\<and>\n           (0 < i \\<longrightarrow>\n            i < Suc (length xs) \\<longrightarrow> xs ! (i - Suc 0) = NoMsg);\n        i < length xs\\<rbrakk>\n       \\<Longrightarrow> xs ! i = NoMsg", "apply (drule_tac x=\"Suc i\" in spec)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a xs ia iaa i.\n       \\<lbrakk>ia < length xs; xs ! ia \\<noteq> NoMsg;\n        last_message xs \\<noteq> NoMsg; iaa < length xs;\n        xs ! iaa \\<noteq> NoMsg; i < length xs;\n        (Suc i = 0 \\<longrightarrow> a = NoMsg) \\<and>\n        (0 < Suc i \\<longrightarrow>\n         Suc i < Suc (length xs) \\<longrightarrow>\n         xs ! (Suc i - Suc 0) = NoMsg)\\<rbrakk>\n       \\<Longrightarrow> xs ! i = NoMsg", "apply simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma last_message_not_NoMsg_conv: \"\n  (last_message xs \\<noteq> \\<NoMsg>) = (\\<exists>i<length xs. xs ! i \\<noteq> \\<NoMsg>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (last_message xs \\<noteq> NoMsg) =\n    (\\<exists>i<length xs. xs ! i \\<noteq> NoMsg)", "by (simp add: last_message_NoMsg_conv)"], ["", "lemma not_NoMsg_imp_last_message: \"\n  \\<lbrakk> i < length xs; xs ! i \\<noteq> \\<NoMsg> \\<rbrakk> \\<Longrightarrow> last_message xs \\<noteq> \\<NoMsg>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>i < length xs; xs ! i \\<noteq> NoMsg\\<rbrakk>\n    \\<Longrightarrow> last_message xs \\<noteq> NoMsg", "by (rule last_message_not_NoMsg_conv[THEN iffD2, OF exI, OF conjI])"], ["", "lemma last_message_exists_nth: \"\n  last_message xs \\<noteq> \\<NoMsg> \\<Longrightarrow>\n  \\<exists>i<length xs. last_message xs = xs ! i \\<and> (\\<forall>j<length xs. i < j \\<longrightarrow> xs ! j = \\<NoMsg>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. last_message xs \\<noteq> NoMsg \\<Longrightarrow>\n    \\<exists>i<length xs.\n       last_message xs = xs ! i \\<and>\n       (\\<forall>j<length xs. i < j \\<longrightarrow> xs ! j = NoMsg)", "apply (induct xs, simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a xs.\n       \\<lbrakk>last_message xs \\<noteq> NoMsg \\<Longrightarrow>\n                \\<exists>i<length xs.\n                   last_message xs = xs ! i \\<and>\n                   (\\<forall>j<length xs.\n                       i < j \\<longrightarrow> xs ! j = NoMsg);\n        last_message (a # xs) \\<noteq> NoMsg\\<rbrakk>\n       \\<Longrightarrow> \\<exists>i<length (a # xs).\n                            last_message (a # xs) = (a # xs) ! i \\<and>\n                            (\\<forall>j<length (a # xs).\n                                i < j \\<longrightarrow>\n                                (a # xs) ! j = NoMsg)", "apply (rename_tac a xs)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a xs.\n       \\<lbrakk>last_message xs \\<noteq> NoMsg \\<Longrightarrow>\n                \\<exists>i<length xs.\n                   last_message xs = xs ! i \\<and>\n                   (\\<forall>j<length xs.\n                       i < j \\<longrightarrow> xs ! j = NoMsg);\n        last_message (a # xs) \\<noteq> NoMsg\\<rbrakk>\n       \\<Longrightarrow> \\<exists>i<length (a # xs).\n                            last_message (a # xs) = (a # xs) ! i \\<and>\n                            (\\<forall>j<length (a # xs).\n                                i < j \\<longrightarrow>\n                                (a # xs) ! j = NoMsg)", "apply (case_tac \"last_message xs = \\<NoMsg>\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a xs.\n       \\<lbrakk>last_message xs \\<noteq> NoMsg \\<Longrightarrow>\n                \\<exists>i<length xs.\n                   last_message xs = xs ! i \\<and>\n                   (\\<forall>j<length xs.\n                       i < j \\<longrightarrow> xs ! j = NoMsg);\n        last_message (a # xs) \\<noteq> NoMsg;\n        last_message xs = NoMsg\\<rbrakk>\n       \\<Longrightarrow> \\<exists>i<length (a # xs).\n                            last_message (a # xs) = (a # xs) ! i \\<and>\n                            (\\<forall>j<length (a # xs).\n                                i < j \\<longrightarrow>\n                                (a # xs) ! j = NoMsg)\n 2. \\<And>a xs.\n       \\<lbrakk>last_message xs \\<noteq> NoMsg \\<Longrightarrow>\n                \\<exists>i<length xs.\n                   last_message xs = xs ! i \\<and>\n                   (\\<forall>j<length xs.\n                       i < j \\<longrightarrow> xs ! j = NoMsg);\n        last_message (a # xs) \\<noteq> NoMsg;\n        last_message xs \\<noteq> NoMsg\\<rbrakk>\n       \\<Longrightarrow> \\<exists>i<length (a # xs).\n                            last_message (a # xs) = (a # xs) ! i \\<and>\n                            (\\<forall>j<length (a # xs).\n                                i < j \\<longrightarrow>\n                                (a # xs) ! j = NoMsg)", "apply (rule_tac x=0 in exI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a xs.\n       \\<lbrakk>last_message xs \\<noteq> NoMsg \\<Longrightarrow>\n                \\<exists>i<length xs.\n                   last_message xs = xs ! i \\<and>\n                   (\\<forall>j<length xs.\n                       i < j \\<longrightarrow> xs ! j = NoMsg);\n        last_message (a # xs) \\<noteq> NoMsg;\n        last_message xs = NoMsg\\<rbrakk>\n       \\<Longrightarrow> 0 < length (a # xs) \\<and>\n                         last_message (a # xs) = (a # xs) ! 0 \\<and>\n                         (\\<forall>j<length (a # xs).\n                             0 < j \\<longrightarrow> (a # xs) ! j = NoMsg)\n 2. \\<And>a xs.\n       \\<lbrakk>last_message xs \\<noteq> NoMsg \\<Longrightarrow>\n                \\<exists>i<length xs.\n                   last_message xs = xs ! i \\<and>\n                   (\\<forall>j<length xs.\n                       i < j \\<longrightarrow> xs ! j = NoMsg);\n        last_message (a # xs) \\<noteq> NoMsg;\n        last_message xs \\<noteq> NoMsg\\<rbrakk>\n       \\<Longrightarrow> \\<exists>i<length (a # xs).\n                            last_message (a # xs) = (a # xs) ! i \\<and>\n                            (\\<forall>j<length (a # xs).\n                                i < j \\<longrightarrow>\n                                (a # xs) ! j = NoMsg)", "apply clarsimp"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a xs j.\n       \\<lbrakk>a \\<noteq> NoMsg; last_message xs = NoMsg;\n        j < Suc (length xs); 0 < j\\<rbrakk>\n       \\<Longrightarrow> xs ! (j - Suc 0) = NoMsg\n 2. \\<And>a xs.\n       \\<lbrakk>last_message xs \\<noteq> NoMsg \\<Longrightarrow>\n                \\<exists>i<length xs.\n                   last_message xs = xs ! i \\<and>\n                   (\\<forall>j<length xs.\n                       i < j \\<longrightarrow> xs ! j = NoMsg);\n        last_message (a # xs) \\<noteq> NoMsg;\n        last_message xs \\<noteq> NoMsg\\<rbrakk>\n       \\<Longrightarrow> \\<exists>i<length (a # xs).\n                            last_message (a # xs) = (a # xs) ! i \\<and>\n                            (\\<forall>j<length (a # xs).\n                                i < j \\<longrightarrow>\n                                (a # xs) ! j = NoMsg)", "apply (rename_tac j, case_tac j, simp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a xs j nat.\n       \\<lbrakk>a \\<noteq> NoMsg; last_message xs = NoMsg;\n        j < Suc (length xs); 0 < j; j = Suc nat\\<rbrakk>\n       \\<Longrightarrow> xs ! (j - Suc 0) = NoMsg\n 2. \\<And>a xs.\n       \\<lbrakk>last_message xs \\<noteq> NoMsg \\<Longrightarrow>\n                \\<exists>i<length xs.\n                   last_message xs = xs ! i \\<and>\n                   (\\<forall>j<length xs.\n                       i < j \\<longrightarrow> xs ! j = NoMsg);\n        last_message (a # xs) \\<noteq> NoMsg;\n        last_message xs \\<noteq> NoMsg\\<rbrakk>\n       \\<Longrightarrow> \\<exists>i<length (a # xs).\n                            last_message (a # xs) = (a # xs) ! i \\<and>\n                            (\\<forall>j<length (a # xs).\n                                i < j \\<longrightarrow>\n                                (a # xs) ! j = NoMsg)", "apply (simp add: last_message_NoMsg_conv)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a xs.\n       \\<lbrakk>last_message xs \\<noteq> NoMsg \\<Longrightarrow>\n                \\<exists>i<length xs.\n                   last_message xs = xs ! i \\<and>\n                   (\\<forall>j<length xs.\n                       i < j \\<longrightarrow> xs ! j = NoMsg);\n        last_message (a # xs) \\<noteq> NoMsg;\n        last_message xs \\<noteq> NoMsg\\<rbrakk>\n       \\<Longrightarrow> \\<exists>i<length (a # xs).\n                            last_message (a # xs) = (a # xs) ! i \\<and>\n                            (\\<forall>j<length (a # xs).\n                                i < j \\<longrightarrow>\n                                (a # xs) ! j = NoMsg)", "apply (rule ccontr)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a xs.\n       \\<lbrakk>last_message xs \\<noteq> NoMsg \\<Longrightarrow>\n                \\<exists>i<length xs.\n                   last_message xs = xs ! i \\<and>\n                   (\\<forall>j<length xs.\n                       i < j \\<longrightarrow> xs ! j = NoMsg);\n        last_message (a # xs) \\<noteq> NoMsg;\n        last_message xs \\<noteq> NoMsg;\n        \\<not> (\\<exists>i<length (a # xs).\n                   last_message (a # xs) = (a # xs) ! i \\<and>\n                   (\\<forall>j<length (a # xs).\n                       i < j \\<longrightarrow>\n                       (a # xs) ! j = NoMsg))\\<rbrakk>\n       \\<Longrightarrow> False", "apply (clarsimp, rename_tac i)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a xs i.\n       \\<lbrakk>xs ! i \\<noteq> NoMsg;\n        \\<forall>ia.\n           xs ! i = (a # xs) ! ia \\<longrightarrow>\n           ia < Suc (length xs) \\<longrightarrow>\n           (\\<exists>j<Suc (length xs).\n               ia < j \\<and> xs ! (j - Suc 0) \\<noteq> NoMsg);\n        i < length xs; last_message xs = xs ! i;\n        \\<forall>j<length xs.\n           i < j \\<longrightarrow> xs ! j = NoMsg\\<rbrakk>\n       \\<Longrightarrow> False", "apply (drule_tac x=\"Suc i\" in spec)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a xs i.\n       \\<lbrakk>xs ! i \\<noteq> NoMsg; i < length xs;\n        last_message xs = xs ! i;\n        \\<forall>j<length xs. i < j \\<longrightarrow> xs ! j = NoMsg;\n        xs ! i = (a # xs) ! Suc i \\<longrightarrow>\n        Suc i < Suc (length xs) \\<longrightarrow>\n        (\\<exists>j<Suc (length xs).\n            Suc i < j \\<and> xs ! (j - Suc 0) \\<noteq> NoMsg)\\<rbrakk>\n       \\<Longrightarrow> False", "apply (clarsimp simp: nth_Cons')"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma last_message_exists_nth': \"\n  last_message xs \\<noteq> \\<NoMsg> \\<Longrightarrow> \\<exists>i<length xs. last_message xs = xs ! i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. last_message xs \\<noteq> NoMsg \\<Longrightarrow>\n    \\<exists>i<length xs. last_message xs = xs ! i", "by (blast dest: last_message_exists_nth)"], ["", "lemma last_messageI2_aux: \"\\<And>i.\n  \\<lbrakk> i < length xs; xs ! i \\<noteq> \\<NoMsg>;\n    \\<forall>j. i < j \\<and> j < length xs \\<longrightarrow> xs ! j = \\<NoMsg> \\<rbrakk> \\<Longrightarrow>\n  last_message xs = xs ! i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i.\n       \\<lbrakk>i < length xs; xs ! i \\<noteq> NoMsg;\n        \\<forall>j.\n           i < j \\<and> j < length xs \\<longrightarrow>\n           xs ! j = NoMsg\\<rbrakk>\n       \\<Longrightarrow> last_message xs = xs ! i", "apply (induct xs, simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a xs i.\n       \\<lbrakk>\\<And>i.\n                   \\<lbrakk>i < length xs; xs ! i \\<noteq> NoMsg;\n                    \\<forall>j.\n                       i < j \\<and> j < length xs \\<longrightarrow>\n                       xs ! j = NoMsg\\<rbrakk>\n                   \\<Longrightarrow> last_message xs = xs ! i;\n        i < length (a # xs); (a # xs) ! i \\<noteq> NoMsg;\n        \\<forall>j.\n           i < j \\<and> j < length (a # xs) \\<longrightarrow>\n           (a # xs) ! j = NoMsg\\<rbrakk>\n       \\<Longrightarrow> last_message (a # xs) = (a # xs) ! i", "apply (simp add: nth_Cons')"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a xs i.\n       \\<lbrakk>\\<And>i.\n                   \\<lbrakk>i < length xs; xs ! i \\<noteq> NoMsg;\n                    \\<forall>j.\n                       i < j \\<and> j < length xs \\<longrightarrow>\n                       xs ! j = NoMsg\\<rbrakk>\n                   \\<Longrightarrow> last_message xs = xs ! i;\n        i < Suc (length xs);\n        (if i = 0 then a else xs ! (i - 1)) \\<noteq> NoMsg;\n        \\<forall>j.\n           i < j \\<and> j < Suc (length xs) \\<longrightarrow>\n           xs ! (j - Suc 0) = NoMsg\\<rbrakk>\n       \\<Longrightarrow> (last_message xs = NoMsg \\<longrightarrow>\n                          0 < i \\<longrightarrow>\n                          a = xs ! (i - Suc 0)) \\<and>\n                         (last_message xs \\<noteq> NoMsg \\<longrightarrow>\n                          (i = 0 \\<longrightarrow>\n                           last_message xs = a) \\<and>\n                          (0 < i \\<longrightarrow>\n                           last_message xs = xs ! (i - Suc 0)))", "apply (case_tac i)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a xs i.\n       \\<lbrakk>\\<And>i.\n                   \\<lbrakk>i < length xs; xs ! i \\<noteq> NoMsg;\n                    \\<forall>j.\n                       i < j \\<and> j < length xs \\<longrightarrow>\n                       xs ! j = NoMsg\\<rbrakk>\n                   \\<Longrightarrow> last_message xs = xs ! i;\n        i < Suc (length xs);\n        (if i = 0 then a else xs ! (i - 1)) \\<noteq> NoMsg;\n        \\<forall>j.\n           i < j \\<and> j < Suc (length xs) \\<longrightarrow>\n           xs ! (j - Suc 0) = NoMsg;\n        i = 0\\<rbrakk>\n       \\<Longrightarrow> (last_message xs = NoMsg \\<longrightarrow>\n                          0 < i \\<longrightarrow>\n                          a = xs ! (i - Suc 0)) \\<and>\n                         (last_message xs \\<noteq> NoMsg \\<longrightarrow>\n                          (i = 0 \\<longrightarrow>\n                           last_message xs = a) \\<and>\n                          (0 < i \\<longrightarrow>\n                           last_message xs = xs ! (i - Suc 0)))\n 2. \\<And>a xs i nat.\n       \\<lbrakk>\\<And>i.\n                   \\<lbrakk>i < length xs; xs ! i \\<noteq> NoMsg;\n                    \\<forall>j.\n                       i < j \\<and> j < length xs \\<longrightarrow>\n                       xs ! j = NoMsg\\<rbrakk>\n                   \\<Longrightarrow> last_message xs = xs ! i;\n        i < Suc (length xs);\n        (if i = 0 then a else xs ! (i - 1)) \\<noteq> NoMsg;\n        \\<forall>j.\n           i < j \\<and> j < Suc (length xs) \\<longrightarrow>\n           xs ! (j - Suc 0) = NoMsg;\n        i = Suc nat\\<rbrakk>\n       \\<Longrightarrow> (last_message xs = NoMsg \\<longrightarrow>\n                          0 < i \\<longrightarrow>\n                          a = xs ! (i - Suc 0)) \\<and>\n                         (last_message xs \\<noteq> NoMsg \\<longrightarrow>\n                          (i = 0 \\<longrightarrow>\n                           last_message xs = a) \\<and>\n                          (0 < i \\<longrightarrow>\n                           last_message xs = xs ! (i - Suc 0)))", "apply simp"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a xs i.\n       \\<lbrakk>\\<And>i.\n                   \\<lbrakk>i < length xs; xs ! i \\<noteq> NoMsg;\n                    \\<forall>j.\n                       i < j \\<and> j < length xs \\<longrightarrow>\n                       xs ! j = NoMsg\\<rbrakk>\n                   \\<Longrightarrow> last_message xs = xs ! i;\n        a \\<noteq> NoMsg;\n        \\<forall>j.\n           0 < j \\<and> j < Suc (length xs) \\<longrightarrow>\n           xs ! (j - Suc 0) = NoMsg;\n        i = 0\\<rbrakk>\n       \\<Longrightarrow> last_message xs \\<noteq> NoMsg \\<longrightarrow>\n                         last_message xs = a\n 2. \\<And>a xs i nat.\n       \\<lbrakk>\\<And>i.\n                   \\<lbrakk>i < length xs; xs ! i \\<noteq> NoMsg;\n                    \\<forall>j.\n                       i < j \\<and> j < length xs \\<longrightarrow>\n                       xs ! j = NoMsg\\<rbrakk>\n                   \\<Longrightarrow> last_message xs = xs ! i;\n        i < Suc (length xs);\n        (if i = 0 then a else xs ! (i - 1)) \\<noteq> NoMsg;\n        \\<forall>j.\n           i < j \\<and> j < Suc (length xs) \\<longrightarrow>\n           xs ! (j - Suc 0) = NoMsg;\n        i = Suc nat\\<rbrakk>\n       \\<Longrightarrow> (last_message xs = NoMsg \\<longrightarrow>\n                          0 < i \\<longrightarrow>\n                          a = xs ! (i - Suc 0)) \\<and>\n                         (last_message xs \\<noteq> NoMsg \\<longrightarrow>\n                          (i = 0 \\<longrightarrow>\n                           last_message xs = a) \\<and>\n                          (0 < i \\<longrightarrow>\n                           last_message xs = xs ! (i - Suc 0)))", "apply (subgoal_tac \"\\<forall>j. j < length xs \\<longrightarrow> xs ! j = \\<NoMsg>\")"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>a xs i.\n       \\<lbrakk>\\<And>i.\n                   \\<lbrakk>i < length xs; xs ! i \\<noteq> NoMsg;\n                    \\<forall>j.\n                       i < j \\<and> j < length xs \\<longrightarrow>\n                       xs ! j = NoMsg\\<rbrakk>\n                   \\<Longrightarrow> last_message xs = xs ! i;\n        a \\<noteq> NoMsg;\n        \\<forall>j.\n           0 < j \\<and> j < Suc (length xs) \\<longrightarrow>\n           xs ! (j - Suc 0) = NoMsg;\n        i = 0; \\<forall>j<length xs. xs ! j = NoMsg\\<rbrakk>\n       \\<Longrightarrow> last_message xs \\<noteq> NoMsg \\<longrightarrow>\n                         last_message xs = a\n 2. \\<And>a xs i.\n       \\<lbrakk>\\<And>i.\n                   \\<lbrakk>i < length xs; xs ! i \\<noteq> NoMsg;\n                    \\<forall>j.\n                       i < j \\<and> j < length xs \\<longrightarrow>\n                       xs ! j = NoMsg\\<rbrakk>\n                   \\<Longrightarrow> last_message xs = xs ! i;\n        a \\<noteq> NoMsg;\n        \\<forall>j.\n           0 < j \\<and> j < Suc (length xs) \\<longrightarrow>\n           xs ! (j - Suc 0) = NoMsg;\n        i = 0\\<rbrakk>\n       \\<Longrightarrow> \\<forall>j<length xs. xs ! j = NoMsg\n 3. \\<And>a xs i nat.\n       \\<lbrakk>\\<And>i.\n                   \\<lbrakk>i < length xs; xs ! i \\<noteq> NoMsg;\n                    \\<forall>j.\n                       i < j \\<and> j < length xs \\<longrightarrow>\n                       xs ! j = NoMsg\\<rbrakk>\n                   \\<Longrightarrow> last_message xs = xs ! i;\n        i < Suc (length xs);\n        (if i = 0 then a else xs ! (i - 1)) \\<noteq> NoMsg;\n        \\<forall>j.\n           i < j \\<and> j < Suc (length xs) \\<longrightarrow>\n           xs ! (j - Suc 0) = NoMsg;\n        i = Suc nat\\<rbrakk>\n       \\<Longrightarrow> (last_message xs = NoMsg \\<longrightarrow>\n                          0 < i \\<longrightarrow>\n                          a = xs ! (i - Suc 0)) \\<and>\n                         (last_message xs \\<noteq> NoMsg \\<longrightarrow>\n                          (i = 0 \\<longrightarrow>\n                           last_message xs = a) \\<and>\n                          (0 < i \\<longrightarrow>\n                           last_message xs = xs ! (i - Suc 0)))", "prefer 2"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>a xs i.\n       \\<lbrakk>\\<And>i.\n                   \\<lbrakk>i < length xs; xs ! i \\<noteq> NoMsg;\n                    \\<forall>j.\n                       i < j \\<and> j < length xs \\<longrightarrow>\n                       xs ! j = NoMsg\\<rbrakk>\n                   \\<Longrightarrow> last_message xs = xs ! i;\n        a \\<noteq> NoMsg;\n        \\<forall>j.\n           0 < j \\<and> j < Suc (length xs) \\<longrightarrow>\n           xs ! (j - Suc 0) = NoMsg;\n        i = 0\\<rbrakk>\n       \\<Longrightarrow> \\<forall>j<length xs. xs ! j = NoMsg\n 2. \\<And>a xs i.\n       \\<lbrakk>\\<And>i.\n                   \\<lbrakk>i < length xs; xs ! i \\<noteq> NoMsg;\n                    \\<forall>j.\n                       i < j \\<and> j < length xs \\<longrightarrow>\n                       xs ! j = NoMsg\\<rbrakk>\n                   \\<Longrightarrow> last_message xs = xs ! i;\n        a \\<noteq> NoMsg;\n        \\<forall>j.\n           0 < j \\<and> j < Suc (length xs) \\<longrightarrow>\n           xs ! (j - Suc 0) = NoMsg;\n        i = 0; \\<forall>j<length xs. xs ! j = NoMsg\\<rbrakk>\n       \\<Longrightarrow> last_message xs \\<noteq> NoMsg \\<longrightarrow>\n                         last_message xs = a\n 3. \\<And>a xs i nat.\n       \\<lbrakk>\\<And>i.\n                   \\<lbrakk>i < length xs; xs ! i \\<noteq> NoMsg;\n                    \\<forall>j.\n                       i < j \\<and> j < length xs \\<longrightarrow>\n                       xs ! j = NoMsg\\<rbrakk>\n                   \\<Longrightarrow> last_message xs = xs ! i;\n        i < Suc (length xs);\n        (if i = 0 then a else xs ! (i - 1)) \\<noteq> NoMsg;\n        \\<forall>j.\n           i < j \\<and> j < Suc (length xs) \\<longrightarrow>\n           xs ! (j - Suc 0) = NoMsg;\n        i = Suc nat\\<rbrakk>\n       \\<Longrightarrow> (last_message xs = NoMsg \\<longrightarrow>\n                          0 < i \\<longrightarrow>\n                          a = xs ! (i - Suc 0)) \\<and>\n                         (last_message xs \\<noteq> NoMsg \\<longrightarrow>\n                          (i = 0 \\<longrightarrow>\n                           last_message xs = a) \\<and>\n                          (0 < i \\<longrightarrow>\n                           last_message xs = xs ! (i - Suc 0)))", "apply (clarify, drule_tac x=\"Suc j\" in spec)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>a xs i j.\n       \\<lbrakk>\\<And>i.\n                   \\<lbrakk>i < length xs; xs ! i \\<noteq> NoMsg;\n                    \\<forall>j.\n                       i < j \\<and> j < length xs \\<longrightarrow>\n                       xs ! j = NoMsg\\<rbrakk>\n                   \\<Longrightarrow> last_message xs = xs ! i;\n        a \\<noteq> NoMsg; j < length xs;\n        0 < Suc j \\<and> Suc j < Suc (length xs) \\<longrightarrow>\n        xs ! (Suc j - Suc 0) = NoMsg\\<rbrakk>\n       \\<Longrightarrow> xs ! j = NoMsg\n 2. \\<And>a xs i.\n       \\<lbrakk>\\<And>i.\n                   \\<lbrakk>i < length xs; xs ! i \\<noteq> NoMsg;\n                    \\<forall>j.\n                       i < j \\<and> j < length xs \\<longrightarrow>\n                       xs ! j = NoMsg\\<rbrakk>\n                   \\<Longrightarrow> last_message xs = xs ! i;\n        a \\<noteq> NoMsg;\n        \\<forall>j.\n           0 < j \\<and> j < Suc (length xs) \\<longrightarrow>\n           xs ! (j - Suc 0) = NoMsg;\n        i = 0; \\<forall>j<length xs. xs ! j = NoMsg\\<rbrakk>\n       \\<Longrightarrow> last_message xs \\<noteq> NoMsg \\<longrightarrow>\n                         last_message xs = a\n 3. \\<And>a xs i nat.\n       \\<lbrakk>\\<And>i.\n                   \\<lbrakk>i < length xs; xs ! i \\<noteq> NoMsg;\n                    \\<forall>j.\n                       i < j \\<and> j < length xs \\<longrightarrow>\n                       xs ! j = NoMsg\\<rbrakk>\n                   \\<Longrightarrow> last_message xs = xs ! i;\n        i < Suc (length xs);\n        (if i = 0 then a else xs ! (i - 1)) \\<noteq> NoMsg;\n        \\<forall>j.\n           i < j \\<and> j < Suc (length xs) \\<longrightarrow>\n           xs ! (j - Suc 0) = NoMsg;\n        i = Suc nat\\<rbrakk>\n       \\<Longrightarrow> (last_message xs = NoMsg \\<longrightarrow>\n                          0 < i \\<longrightarrow>\n                          a = xs ! (i - Suc 0)) \\<and>\n                         (last_message xs \\<noteq> NoMsg \\<longrightarrow>\n                          (i = 0 \\<longrightarrow>\n                           last_message xs = a) \\<and>\n                          (0 < i \\<longrightarrow>\n                           last_message xs = xs ! (i - Suc 0)))", "apply simp"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a xs i.\n       \\<lbrakk>\\<And>i.\n                   \\<lbrakk>i < length xs; xs ! i \\<noteq> NoMsg;\n                    \\<forall>j.\n                       i < j \\<and> j < length xs \\<longrightarrow>\n                       xs ! j = NoMsg\\<rbrakk>\n                   \\<Longrightarrow> last_message xs = xs ! i;\n        a \\<noteq> NoMsg;\n        \\<forall>j.\n           0 < j \\<and> j < Suc (length xs) \\<longrightarrow>\n           xs ! (j - Suc 0) = NoMsg;\n        i = 0; \\<forall>j<length xs. xs ! j = NoMsg\\<rbrakk>\n       \\<Longrightarrow> last_message xs \\<noteq> NoMsg \\<longrightarrow>\n                         last_message xs = a\n 2. \\<And>a xs i nat.\n       \\<lbrakk>\\<And>i.\n                   \\<lbrakk>i < length xs; xs ! i \\<noteq> NoMsg;\n                    \\<forall>j.\n                       i < j \\<and> j < length xs \\<longrightarrow>\n                       xs ! j = NoMsg\\<rbrakk>\n                   \\<Longrightarrow> last_message xs = xs ! i;\n        i < Suc (length xs);\n        (if i = 0 then a else xs ! (i - 1)) \\<noteq> NoMsg;\n        \\<forall>j.\n           i < j \\<and> j < Suc (length xs) \\<longrightarrow>\n           xs ! (j - Suc 0) = NoMsg;\n        i = Suc nat\\<rbrakk>\n       \\<Longrightarrow> (last_message xs = NoMsg \\<longrightarrow>\n                          0 < i \\<longrightarrow>\n                          a = xs ! (i - Suc 0)) \\<and>\n                         (last_message xs \\<noteq> NoMsg \\<longrightarrow>\n                          (i = 0 \\<longrightarrow>\n                           last_message xs = a) \\<and>\n                          (0 < i \\<longrightarrow>\n                           last_message xs = xs ! (i - Suc 0)))", "apply (simp add: last_message_NoMsg_conv)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a xs i nat.\n       \\<lbrakk>\\<And>i.\n                   \\<lbrakk>i < length xs; xs ! i \\<noteq> NoMsg;\n                    \\<forall>j.\n                       i < j \\<and> j < length xs \\<longrightarrow>\n                       xs ! j = NoMsg\\<rbrakk>\n                   \\<Longrightarrow> last_message xs = xs ! i;\n        i < Suc (length xs);\n        (if i = 0 then a else xs ! (i - 1)) \\<noteq> NoMsg;\n        \\<forall>j.\n           i < j \\<and> j < Suc (length xs) \\<longrightarrow>\n           xs ! (j - Suc 0) = NoMsg;\n        i = Suc nat\\<rbrakk>\n       \\<Longrightarrow> (last_message xs = NoMsg \\<longrightarrow>\n                          0 < i \\<longrightarrow>\n                          a = xs ! (i - Suc 0)) \\<and>\n                         (last_message xs \\<noteq> NoMsg \\<longrightarrow>\n                          (i = 0 \\<longrightarrow>\n                           last_message xs = a) \\<and>\n                          (0 < i \\<longrightarrow>\n                           last_message xs = xs ! (i - Suc 0)))", "apply clarsimp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a xs nat.\n       \\<lbrakk>\\<And>i.\n                   \\<lbrakk>i < length xs; xs ! i \\<noteq> NoMsg;\n                    \\<forall>j.\n                       i < j \\<and> j < length xs \\<longrightarrow>\n                       xs ! j = NoMsg\\<rbrakk>\n                   \\<Longrightarrow> last_message xs = xs ! i;\n        nat < length xs; xs ! nat \\<noteq> NoMsg;\n        \\<forall>j.\n           Suc nat < j \\<and> j < Suc (length xs) \\<longrightarrow>\n           xs ! (j - Suc 0) = NoMsg\\<rbrakk>\n       \\<Longrightarrow> (last_message xs = NoMsg \\<longrightarrow>\n                          a = xs ! nat) \\<and>\n                         (last_message xs \\<noteq> NoMsg \\<longrightarrow>\n                          last_message xs = xs ! nat)", "apply (rename_tac i)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a xs i.\n       \\<lbrakk>\\<And>i.\n                   \\<lbrakk>i < length xs; xs ! i \\<noteq> NoMsg;\n                    \\<forall>j.\n                       i < j \\<and> j < length xs \\<longrightarrow>\n                       xs ! j = NoMsg\\<rbrakk>\n                   \\<Longrightarrow> last_message xs = xs ! i;\n        i < length xs; xs ! i \\<noteq> NoMsg;\n        \\<forall>j.\n           Suc i < j \\<and> j < Suc (length xs) \\<longrightarrow>\n           xs ! (j - Suc 0) = NoMsg\\<rbrakk>\n       \\<Longrightarrow> (last_message xs = NoMsg \\<longrightarrow>\n                          a = xs ! i) \\<and>\n                         (last_message xs \\<noteq> NoMsg \\<longrightarrow>\n                          last_message xs = xs ! i)", "apply (intro conjI impI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a xs i.\n       \\<lbrakk>\\<And>i.\n                   \\<lbrakk>i < length xs; xs ! i \\<noteq> NoMsg;\n                    \\<forall>j.\n                       i < j \\<and> j < length xs \\<longrightarrow>\n                       xs ! j = NoMsg\\<rbrakk>\n                   \\<Longrightarrow> last_message xs = xs ! i;\n        i < length xs; xs ! i \\<noteq> NoMsg;\n        \\<forall>j.\n           Suc i < j \\<and> j < Suc (length xs) \\<longrightarrow>\n           xs ! (j - Suc 0) = NoMsg;\n        last_message xs = NoMsg\\<rbrakk>\n       \\<Longrightarrow> a = xs ! i\n 2. \\<And>a xs i.\n       \\<lbrakk>\\<And>i.\n                   \\<lbrakk>i < length xs; xs ! i \\<noteq> NoMsg;\n                    \\<forall>j.\n                       i < j \\<and> j < length xs \\<longrightarrow>\n                       xs ! j = NoMsg\\<rbrakk>\n                   \\<Longrightarrow> last_message xs = xs ! i;\n        i < length xs; xs ! i \\<noteq> NoMsg;\n        \\<forall>j.\n           Suc i < j \\<and> j < Suc (length xs) \\<longrightarrow>\n           xs ! (j - Suc 0) = NoMsg;\n        last_message xs \\<noteq> NoMsg\\<rbrakk>\n       \\<Longrightarrow> last_message xs = xs ! i", "apply (simp add: not_NoMsg_imp_last_message)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a xs i.\n       \\<lbrakk>\\<And>i.\n                   \\<lbrakk>i < length xs; xs ! i \\<noteq> NoMsg;\n                    \\<forall>j.\n                       i < j \\<and> j < length xs \\<longrightarrow>\n                       xs ! j = NoMsg\\<rbrakk>\n                   \\<Longrightarrow> last_message xs = xs ! i;\n        i < length xs; xs ! i \\<noteq> NoMsg;\n        \\<forall>j.\n           Suc i < j \\<and> j < Suc (length xs) \\<longrightarrow>\n           xs ! (j - Suc 0) = NoMsg;\n        last_message xs \\<noteq> NoMsg\\<rbrakk>\n       \\<Longrightarrow> last_message xs = xs ! i", "apply (subgoal_tac \"\\<forall>j. i < j \\<and> j < length xs \\<longrightarrow> xs ! j = \\<NoMsg>\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a xs i.\n       \\<lbrakk>\\<And>i.\n                   \\<lbrakk>i < length xs; xs ! i \\<noteq> NoMsg;\n                    \\<forall>j.\n                       i < j \\<and> j < length xs \\<longrightarrow>\n                       xs ! j = NoMsg\\<rbrakk>\n                   \\<Longrightarrow> last_message xs = xs ! i;\n        i < length xs; xs ! i \\<noteq> NoMsg;\n        \\<forall>j.\n           Suc i < j \\<and> j < Suc (length xs) \\<longrightarrow>\n           xs ! (j - Suc 0) = NoMsg;\n        last_message xs \\<noteq> NoMsg;\n        \\<forall>j.\n           i < j \\<and> j < length xs \\<longrightarrow>\n           xs ! j = NoMsg\\<rbrakk>\n       \\<Longrightarrow> last_message xs = xs ! i\n 2. \\<And>a xs i.\n       \\<lbrakk>\\<And>i.\n                   \\<lbrakk>i < length xs; xs ! i \\<noteq> NoMsg;\n                    \\<forall>j.\n                       i < j \\<and> j < length xs \\<longrightarrow>\n                       xs ! j = NoMsg\\<rbrakk>\n                   \\<Longrightarrow> last_message xs = xs ! i;\n        i < length xs; xs ! i \\<noteq> NoMsg;\n        \\<forall>j.\n           Suc i < j \\<and> j < Suc (length xs) \\<longrightarrow>\n           xs ! (j - Suc 0) = NoMsg;\n        last_message xs \\<noteq> NoMsg\\<rbrakk>\n       \\<Longrightarrow> \\<forall>j.\n                            i < j \\<and> j < length xs \\<longrightarrow>\n                            xs ! j = NoMsg", "prefer 2"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a xs i.\n       \\<lbrakk>\\<And>i.\n                   \\<lbrakk>i < length xs; xs ! i \\<noteq> NoMsg;\n                    \\<forall>j.\n                       i < j \\<and> j < length xs \\<longrightarrow>\n                       xs ! j = NoMsg\\<rbrakk>\n                   \\<Longrightarrow> last_message xs = xs ! i;\n        i < length xs; xs ! i \\<noteq> NoMsg;\n        \\<forall>j.\n           Suc i < j \\<and> j < Suc (length xs) \\<longrightarrow>\n           xs ! (j - Suc 0) = NoMsg;\n        last_message xs \\<noteq> NoMsg\\<rbrakk>\n       \\<Longrightarrow> \\<forall>j.\n                            i < j \\<and> j < length xs \\<longrightarrow>\n                            xs ! j = NoMsg\n 2. \\<And>a xs i.\n       \\<lbrakk>\\<And>i.\n                   \\<lbrakk>i < length xs; xs ! i \\<noteq> NoMsg;\n                    \\<forall>j.\n                       i < j \\<and> j < length xs \\<longrightarrow>\n                       xs ! j = NoMsg\\<rbrakk>\n                   \\<Longrightarrow> last_message xs = xs ! i;\n        i < length xs; xs ! i \\<noteq> NoMsg;\n        \\<forall>j.\n           Suc i < j \\<and> j < Suc (length xs) \\<longrightarrow>\n           xs ! (j - Suc 0) = NoMsg;\n        last_message xs \\<noteq> NoMsg;\n        \\<forall>j.\n           i < j \\<and> j < length xs \\<longrightarrow>\n           xs ! j = NoMsg\\<rbrakk>\n       \\<Longrightarrow> last_message xs = xs ! i", "apply (clarify, drule_tac x=\"Suc j\" in spec)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a xs i j.\n       \\<lbrakk>\\<And>i.\n                   \\<lbrakk>i < length xs; xs ! i \\<noteq> NoMsg;\n                    \\<forall>j.\n                       i < j \\<and> j < length xs \\<longrightarrow>\n                       xs ! j = NoMsg\\<rbrakk>\n                   \\<Longrightarrow> last_message xs = xs ! i;\n        i < length xs; xs ! i \\<noteq> NoMsg;\n        last_message xs \\<noteq> NoMsg; i < j; j < length xs;\n        Suc i < Suc j \\<and> Suc j < Suc (length xs) \\<longrightarrow>\n        xs ! (Suc j - Suc 0) = NoMsg\\<rbrakk>\n       \\<Longrightarrow> xs ! j = NoMsg\n 2. \\<And>a xs i.\n       \\<lbrakk>\\<And>i.\n                   \\<lbrakk>i < length xs; xs ! i \\<noteq> NoMsg;\n                    \\<forall>j.\n                       i < j \\<and> j < length xs \\<longrightarrow>\n                       xs ! j = NoMsg\\<rbrakk>\n                   \\<Longrightarrow> last_message xs = xs ! i;\n        i < length xs; xs ! i \\<noteq> NoMsg;\n        \\<forall>j.\n           Suc i < j \\<and> j < Suc (length xs) \\<longrightarrow>\n           xs ! (j - Suc 0) = NoMsg;\n        last_message xs \\<noteq> NoMsg;\n        \\<forall>j.\n           i < j \\<and> j < length xs \\<longrightarrow>\n           xs ! j = NoMsg\\<rbrakk>\n       \\<Longrightarrow> last_message xs = xs ! i", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a xs i.\n       \\<lbrakk>\\<And>i.\n                   \\<lbrakk>i < length xs; xs ! i \\<noteq> NoMsg;\n                    \\<forall>j.\n                       i < j \\<and> j < length xs \\<longrightarrow>\n                       xs ! j = NoMsg\\<rbrakk>\n                   \\<Longrightarrow> last_message xs = xs ! i;\n        i < length xs; xs ! i \\<noteq> NoMsg;\n        \\<forall>j.\n           Suc i < j \\<and> j < Suc (length xs) \\<longrightarrow>\n           xs ! (j - Suc 0) = NoMsg;\n        last_message xs \\<noteq> NoMsg;\n        \\<forall>j.\n           i < j \\<and> j < length xs \\<longrightarrow>\n           xs ! j = NoMsg\\<rbrakk>\n       \\<Longrightarrow> last_message xs = xs ! i", "apply simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma last_messageI2: \"\n  \\<lbrakk> i < length xs; xs ! i \\<noteq> \\<NoMsg>;\n    \\<And>j. \\<lbrakk> i < j; j < length xs \\<rbrakk> \\<Longrightarrow> xs ! j = \\<NoMsg> \\<rbrakk> \\<Longrightarrow>\n  last_message xs = xs ! i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>i < length xs; xs ! i \\<noteq> NoMsg;\n     \\<And>j.\n        \\<lbrakk>i < j; j < length xs\\<rbrakk>\n        \\<Longrightarrow> xs ! j = NoMsg\\<rbrakk>\n    \\<Longrightarrow> last_message xs = xs ! i", "by (blast intro: last_messageI2_aux)"], ["", "lemma last_messageI: \"\n  \\<lbrakk> m \\<noteq> \\<NoMsg>; i < length xs; xs ! i = m;\n    \\<And>j. \\<lbrakk> i < j; j < length xs \\<rbrakk> \\<Longrightarrow> xs ! j = \\<NoMsg> \\<rbrakk> \\<Longrightarrow>\n  last_message xs = m\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>m \\<noteq> NoMsg; i < length xs; xs ! i = m;\n     \\<And>j.\n        \\<lbrakk>i < j; j < length xs\\<rbrakk>\n        \\<Longrightarrow> xs ! j = NoMsg\\<rbrakk>\n    \\<Longrightarrow> last_message xs = m", "by (blast intro: last_messageI2)"], ["", "lemma last_message_Msg_eq_last: \"\n  \\<lbrakk> xs \\<noteq> []; last xs \\<noteq> \\<NoMsg> \\<rbrakk> \\<Longrightarrow> last_message xs = last xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>xs \\<noteq> []; last xs \\<noteq> NoMsg\\<rbrakk>\n    \\<Longrightarrow> last_message xs = last xs", "by (simp add: last_nth last_messageI2)"], ["", "lemma last_message_conv: \"\n  m \\<noteq> \\<NoMsg> \\<Longrightarrow>\n  (last_message xs = m) =\n  (\\<exists>i<length xs. xs ! i = m \\<and> (\\<forall>j<length xs. i < j \\<longrightarrow> xs ! j = \\<NoMsg>))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. m \\<noteq> NoMsg \\<Longrightarrow>\n    (last_message xs = m) =\n    (\\<exists>i<length xs.\n        xs ! i = m \\<and>\n        (\\<forall>j<length xs. i < j \\<longrightarrow> xs ! j = NoMsg))", "apply (rule iffI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>m \\<noteq> NoMsg; last_message xs = m\\<rbrakk>\n    \\<Longrightarrow> \\<exists>i<length xs.\n                         xs ! i = m \\<and>\n                         (\\<forall>j<length xs.\n                             i < j \\<longrightarrow> xs ! j = NoMsg)\n 2. \\<lbrakk>m \\<noteq> NoMsg;\n     \\<exists>i<length xs.\n        xs ! i = m \\<and>\n        (\\<forall>j<length xs.\n            i < j \\<longrightarrow> xs ! j = NoMsg)\\<rbrakk>\n    \\<Longrightarrow> last_message xs = m", "apply (cut_tac xs=xs in last_message_exists_nth, simp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>m \\<noteq> NoMsg; last_message xs = m;\n     \\<exists>i<length xs.\n        last_message xs = xs ! i \\<and>\n        (\\<forall>j<length xs.\n            i < j \\<longrightarrow> xs ! j = NoMsg)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>i<length xs.\n                         xs ! i = m \\<and>\n                         (\\<forall>j<length xs.\n                             i < j \\<longrightarrow> xs ! j = NoMsg)\n 2. \\<lbrakk>m \\<noteq> NoMsg;\n     \\<exists>i<length xs.\n        xs ! i = m \\<and>\n        (\\<forall>j<length xs.\n            i < j \\<longrightarrow> xs ! j = NoMsg)\\<rbrakk>\n    \\<Longrightarrow> last_message xs = m", "apply clarify"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>i.\n       \\<lbrakk>last_message xs \\<noteq> NoMsg; m = last_message xs;\n        i < length xs; last_message xs = xs ! i;\n        \\<forall>j<length xs.\n           i < j \\<longrightarrow> xs ! j = NoMsg\\<rbrakk>\n       \\<Longrightarrow> \\<exists>i<length xs.\n                            xs ! i = last_message xs \\<and>\n                            (\\<forall>j<length xs.\n                                i < j \\<longrightarrow> xs ! j = NoMsg)\n 2. \\<lbrakk>m \\<noteq> NoMsg;\n     \\<exists>i<length xs.\n        xs ! i = m \\<and>\n        (\\<forall>j<length xs.\n            i < j \\<longrightarrow> xs ! j = NoMsg)\\<rbrakk>\n    \\<Longrightarrow> last_message xs = m", "apply (rule_tac x=i in exI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>i.\n       \\<lbrakk>last_message xs \\<noteq> NoMsg; m = last_message xs;\n        i < length xs; last_message xs = xs ! i;\n        \\<forall>j<length xs.\n           i < j \\<longrightarrow> xs ! j = NoMsg\\<rbrakk>\n       \\<Longrightarrow> i < length xs \\<and>\n                         xs ! i = last_message xs \\<and>\n                         (\\<forall>j<length xs.\n                             i < j \\<longrightarrow> xs ! j = NoMsg)\n 2. \\<lbrakk>m \\<noteq> NoMsg;\n     \\<exists>i<length xs.\n        xs ! i = m \\<and>\n        (\\<forall>j<length xs.\n            i < j \\<longrightarrow> xs ! j = NoMsg)\\<rbrakk>\n    \\<Longrightarrow> last_message xs = m", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>m \\<noteq> NoMsg;\n     \\<exists>i<length xs.\n        xs ! i = m \\<and>\n        (\\<forall>j<length xs.\n            i < j \\<longrightarrow> xs ! j = NoMsg)\\<rbrakk>\n    \\<Longrightarrow> last_message xs = m", "apply (clarsimp simp: last_messageI)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma last_message_conv_if: \"\n  (last_message xs = m) =\n  (if m = \\<NoMsg> then \\<forall>i<length xs. xs ! i = \\<NoMsg>\n   else \\<exists>i<length xs. xs ! i = m \\<and> (\\<forall>j<length xs. i < j \\<longrightarrow> xs ! j = \\<NoMsg>))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (last_message xs = m) =\n    (if m = NoMsg then \\<forall>i<length xs. xs ! i = NoMsg\n     else \\<exists>i<length xs.\n             xs ! i = m \\<and>\n             (\\<forall>j<length xs. i < j \\<longrightarrow> xs ! j = NoMsg))", "by (simp add: last_message_NoMsg_conv last_message_conv)"], ["", "lemma last_message_not_NoMsg_eq_conv: \"\n  \\<lbrakk> last_message xs \\<noteq> \\<NoMsg>; last_message ys \\<noteq> \\<NoMsg> \\<rbrakk> \\<Longrightarrow>\n  (last_message xs = last_message ys) =\n  (\\<exists>i j. i < length xs \\<and> j < length ys \\<and> xs ! i \\<noteq> \\<NoMsg> \\<and>\n         xs ! i = ys ! j \\<and>\n         (\\<forall>n<length xs. i < n \\<longrightarrow> xs ! n = \\<NoMsg>) \\<and>\n         (\\<forall>n<length ys. j < n \\<longrightarrow> ys ! n = \\<NoMsg>))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>last_message xs \\<noteq> NoMsg;\n     last_message ys \\<noteq> NoMsg\\<rbrakk>\n    \\<Longrightarrow> (last_message xs = last_message ys) =\n                      (\\<exists>i j.\n                          i < length xs \\<and>\n                          j < length ys \\<and>\n                          xs ! i \\<noteq> NoMsg \\<and>\n                          xs ! i = ys ! j \\<and>\n                          (\\<forall>n<length xs.\n                              i < n \\<longrightarrow> xs ! n = NoMsg) \\<and>\n                          (\\<forall>n<length ys.\n                              j < n \\<longrightarrow> ys ! n = NoMsg))", "apply (simp add: last_message_conv[where m=\"last_message ys\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>last_message xs \\<noteq> NoMsg;\n     last_message ys \\<noteq> NoMsg\\<rbrakk>\n    \\<Longrightarrow> (\\<exists>i<length xs.\n                          xs ! i = last_message ys \\<and>\n                          (\\<forall>j<length xs.\n                              i < j \\<longrightarrow> xs ! j = NoMsg)) =\n                      (\\<exists>i<length xs.\n                          \\<exists>j<length ys.\n                             xs ! i \\<noteq> NoMsg \\<and>\n                             xs ! i = ys ! j \\<and>\n                             (\\<forall>n<length xs.\n                                 i < n \\<longrightarrow>\n                                 xs ! n = NoMsg) \\<and>\n                             (\\<forall>n<length ys.\n                                 j < n \\<longrightarrow> ys ! n = NoMsg))", "apply (frule last_message_exists_nth[of xs])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>last_message xs \\<noteq> NoMsg; last_message ys \\<noteq> NoMsg;\n     \\<exists>i<length xs.\n        last_message xs = xs ! i \\<and>\n        (\\<forall>j<length xs.\n            i < j \\<longrightarrow> xs ! j = NoMsg)\\<rbrakk>\n    \\<Longrightarrow> (\\<exists>i<length xs.\n                          xs ! i = last_message ys \\<and>\n                          (\\<forall>j<length xs.\n                              i < j \\<longrightarrow> xs ! j = NoMsg)) =\n                      (\\<exists>i<length xs.\n                          \\<exists>j<length ys.\n                             xs ! i \\<noteq> NoMsg \\<and>\n                             xs ! i = ys ! j \\<and>\n                             (\\<forall>n<length xs.\n                                 i < n \\<longrightarrow>\n                                 xs ! n = NoMsg) \\<and>\n                             (\\<forall>n<length ys.\n                                 j < n \\<longrightarrow> ys ! n = NoMsg))", "apply (frule last_message_exists_nth[of ys])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>last_message xs \\<noteq> NoMsg; last_message ys \\<noteq> NoMsg;\n     \\<exists>i<length xs.\n        last_message xs = xs ! i \\<and>\n        (\\<forall>j<length xs. i < j \\<longrightarrow> xs ! j = NoMsg);\n     \\<exists>i<length ys.\n        last_message ys = ys ! i \\<and>\n        (\\<forall>j<length ys.\n            i < j \\<longrightarrow> ys ! j = NoMsg)\\<rbrakk>\n    \\<Longrightarrow> (\\<exists>i<length xs.\n                          xs ! i = last_message ys \\<and>\n                          (\\<forall>j<length xs.\n                              i < j \\<longrightarrow> xs ! j = NoMsg)) =\n                      (\\<exists>i<length xs.\n                          \\<exists>j<length ys.\n                             xs ! i \\<noteq> NoMsg \\<and>\n                             xs ! i = ys ! j \\<and>\n                             (\\<forall>n<length xs.\n                                 i < n \\<longrightarrow>\n                                 xs ! n = NoMsg) \\<and>\n                             (\\<forall>n<length ys.\n                                 j < n \\<longrightarrow> ys ! n = NoMsg))", "apply (rule iffI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>last_message xs \\<noteq> NoMsg; last_message ys \\<noteq> NoMsg;\n     \\<exists>i<length xs.\n        last_message xs = xs ! i \\<and>\n        (\\<forall>j<length xs. i < j \\<longrightarrow> xs ! j = NoMsg);\n     \\<exists>i<length ys.\n        last_message ys = ys ! i \\<and>\n        (\\<forall>j<length ys. i < j \\<longrightarrow> ys ! j = NoMsg);\n     \\<exists>i<length xs.\n        xs ! i = last_message ys \\<and>\n        (\\<forall>j<length xs.\n            i < j \\<longrightarrow> xs ! j = NoMsg)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>i<length xs.\n                         \\<exists>j<length ys.\n                            xs ! i \\<noteq> NoMsg \\<and>\n                            xs ! i = ys ! j \\<and>\n                            (\\<forall>n<length xs.\n                                i < n \\<longrightarrow>\n                                xs ! n = NoMsg) \\<and>\n                            (\\<forall>n<length ys.\n                                j < n \\<longrightarrow> ys ! n = NoMsg)\n 2. \\<lbrakk>last_message xs \\<noteq> NoMsg; last_message ys \\<noteq> NoMsg;\n     \\<exists>i<length xs.\n        last_message xs = xs ! i \\<and>\n        (\\<forall>j<length xs. i < j \\<longrightarrow> xs ! j = NoMsg);\n     \\<exists>i<length ys.\n        last_message ys = ys ! i \\<and>\n        (\\<forall>j<length ys. i < j \\<longrightarrow> ys ! j = NoMsg);\n     \\<exists>i<length xs.\n        \\<exists>j<length ys.\n           xs ! i \\<noteq> NoMsg \\<and>\n           xs ! i = ys ! j \\<and>\n           (\\<forall>n<length xs.\n               i < n \\<longrightarrow> xs ! n = NoMsg) \\<and>\n           (\\<forall>n<length ys.\n               j < n \\<longrightarrow> ys ! n = NoMsg)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>i<length xs.\n                         xs ! i = last_message ys \\<and>\n                         (\\<forall>j<length xs.\n                             i < j \\<longrightarrow> xs ! j = NoMsg)", "apply (clarsimp, rename_tac i j)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>ia i j.\n       \\<lbrakk>xs ! ia \\<noteq> NoMsg; ys ! i \\<noteq> NoMsg;\n        ia < length xs; i < length ys; j < length xs;\n        last_message xs = xs ! ia;\n        \\<forall>j<length xs. ia < j \\<longrightarrow> xs ! j = NoMsg;\n        last_message ys = ys ! i;\n        \\<forall>j<length ys. i < j \\<longrightarrow> ys ! j = NoMsg;\n        xs ! j = ys ! i;\n        \\<forall>ja<length xs.\n           j < ja \\<longrightarrow> xs ! ja = NoMsg\\<rbrakk>\n       \\<Longrightarrow> \\<exists>i<length xs.\n                            \\<exists>j<length ys.\n                               xs ! i \\<noteq> NoMsg \\<and>\n                               xs ! i = ys ! j \\<and>\n                               (\\<forall>n<length xs.\n                                   i < n \\<longrightarrow>\n                                   xs ! n = NoMsg) \\<and>\n                               (\\<forall>n<length ys.\n                                   j < n \\<longrightarrow> ys ! n = NoMsg)\n 2. \\<lbrakk>last_message xs \\<noteq> NoMsg; last_message ys \\<noteq> NoMsg;\n     \\<exists>i<length xs.\n        last_message xs = xs ! i \\<and>\n        (\\<forall>j<length xs. i < j \\<longrightarrow> xs ! j = NoMsg);\n     \\<exists>i<length ys.\n        last_message ys = ys ! i \\<and>\n        (\\<forall>j<length ys. i < j \\<longrightarrow> ys ! j = NoMsg);\n     \\<exists>i<length xs.\n        \\<exists>j<length ys.\n           xs ! i \\<noteq> NoMsg \\<and>\n           xs ! i = ys ! j \\<and>\n           (\\<forall>n<length xs.\n               i < n \\<longrightarrow> xs ! n = NoMsg) \\<and>\n           (\\<forall>n<length ys.\n               j < n \\<longrightarrow> ys ! n = NoMsg)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>i<length xs.\n                         xs ! i = last_message ys \\<and>\n                         (\\<forall>j<length xs.\n                             i < j \\<longrightarrow> xs ! j = NoMsg)", "apply (rule_tac x=j in exI, simp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>ia i j.\n       \\<lbrakk>xs ! ia \\<noteq> NoMsg; ys ! i \\<noteq> NoMsg;\n        ia < length xs; i < length ys; j < length xs;\n        last_message xs = xs ! ia;\n        \\<forall>j<length xs. ia < j \\<longrightarrow> xs ! j = NoMsg;\n        last_message ys = ys ! i;\n        \\<forall>j<length ys. i < j \\<longrightarrow> ys ! j = NoMsg;\n        xs ! j = ys ! i;\n        \\<forall>ja<length xs.\n           j < ja \\<longrightarrow> xs ! ja = NoMsg\\<rbrakk>\n       \\<Longrightarrow> \\<exists>j<length ys.\n                            ys ! i = ys ! j \\<and>\n                            (\\<forall>n<length ys.\n                                j < n \\<longrightarrow> ys ! n = NoMsg)\n 2. \\<lbrakk>last_message xs \\<noteq> NoMsg; last_message ys \\<noteq> NoMsg;\n     \\<exists>i<length xs.\n        last_message xs = xs ! i \\<and>\n        (\\<forall>j<length xs. i < j \\<longrightarrow> xs ! j = NoMsg);\n     \\<exists>i<length ys.\n        last_message ys = ys ! i \\<and>\n        (\\<forall>j<length ys. i < j \\<longrightarrow> ys ! j = NoMsg);\n     \\<exists>i<length xs.\n        \\<exists>j<length ys.\n           xs ! i \\<noteq> NoMsg \\<and>\n           xs ! i = ys ! j \\<and>\n           (\\<forall>n<length xs.\n               i < n \\<longrightarrow> xs ! n = NoMsg) \\<and>\n           (\\<forall>n<length ys.\n               j < n \\<longrightarrow> ys ! n = NoMsg)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>i<length xs.\n                         xs ! i = last_message ys \\<and>\n                         (\\<forall>j<length xs.\n                             i < j \\<longrightarrow> xs ! j = NoMsg)", "apply (rule_tac x=i in exI, simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>last_message xs \\<noteq> NoMsg; last_message ys \\<noteq> NoMsg;\n     \\<exists>i<length xs.\n        last_message xs = xs ! i \\<and>\n        (\\<forall>j<length xs. i < j \\<longrightarrow> xs ! j = NoMsg);\n     \\<exists>i<length ys.\n        last_message ys = ys ! i \\<and>\n        (\\<forall>j<length ys. i < j \\<longrightarrow> ys ! j = NoMsg);\n     \\<exists>i<length xs.\n        \\<exists>j<length ys.\n           xs ! i \\<noteq> NoMsg \\<and>\n           xs ! i = ys ! j \\<and>\n           (\\<forall>n<length xs.\n               i < n \\<longrightarrow> xs ! n = NoMsg) \\<and>\n           (\\<forall>n<length ys.\n               j < n \\<longrightarrow> ys ! n = NoMsg)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>i<length xs.\n                         xs ! i = last_message ys \\<and>\n                         (\\<forall>j<length xs.\n                             i < j \\<longrightarrow> xs ! j = NoMsg)", "apply (clarsimp, rename_tac i1 j1 i j)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i1 j1 i j.\n       \\<lbrakk>xs ! i1 \\<noteq> NoMsg; ys ! j1 \\<noteq> NoMsg;\n        i1 < length xs; j1 < length ys; i < length xs;\n        last_message xs = xs ! i1;\n        \\<forall>j<length xs. i1 < j \\<longrightarrow> xs ! j = NoMsg;\n        last_message ys = ys ! j1;\n        \\<forall>j<length ys. j1 < j \\<longrightarrow> ys ! j = NoMsg;\n        j < length ys; ys ! j \\<noteq> NoMsg; xs ! i = ys ! j;\n        \\<forall>n<length xs. i < n \\<longrightarrow> xs ! n = NoMsg;\n        \\<forall>n<length ys.\n           j < n \\<longrightarrow> ys ! n = NoMsg\\<rbrakk>\n       \\<Longrightarrow> \\<exists>i<length xs.\n                            xs ! i = ys ! j1 \\<and>\n                            (\\<forall>j<length xs.\n                                i < j \\<longrightarrow> xs ! j = NoMsg)", "apply (rule_tac x=i in exI, simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i1 j1 i j.\n       \\<lbrakk>xs ! i1 \\<noteq> NoMsg; ys ! j1 \\<noteq> NoMsg;\n        i1 < length xs; j1 < length ys; i < length xs;\n        last_message xs = xs ! i1;\n        \\<forall>j<length xs. i1 < j \\<longrightarrow> xs ! j = NoMsg;\n        last_message ys = ys ! j1;\n        \\<forall>j<length ys. j1 < j \\<longrightarrow> ys ! j = NoMsg;\n        j < length ys; ys ! j \\<noteq> NoMsg; xs ! i = ys ! j;\n        \\<forall>n<length xs. i < n \\<longrightarrow> xs ! n = NoMsg;\n        \\<forall>n<length ys.\n           j < n \\<longrightarrow> ys ! n = NoMsg\\<rbrakk>\n       \\<Longrightarrow> ys ! j = ys ! j1", "apply (subgoal_tac \"last_message ys = ys ! j\", simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i1 j1 i j.\n       \\<lbrakk>xs ! i1 \\<noteq> NoMsg; ys ! j1 \\<noteq> NoMsg;\n        i1 < length xs; j1 < length ys; i < length xs;\n        last_message xs = xs ! i1;\n        \\<forall>j<length xs. i1 < j \\<longrightarrow> xs ! j = NoMsg;\n        last_message ys = ys ! j1;\n        \\<forall>j<length ys. j1 < j \\<longrightarrow> ys ! j = NoMsg;\n        j < length ys; ys ! j \\<noteq> NoMsg; xs ! i = ys ! j;\n        \\<forall>n<length xs. i < n \\<longrightarrow> xs ! n = NoMsg;\n        \\<forall>n<length ys.\n           j < n \\<longrightarrow> ys ! n = NoMsg\\<rbrakk>\n       \\<Longrightarrow> last_message ys = ys ! j", "apply (rule last_messageI2)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>i1 j1 i j.\n       \\<lbrakk>xs ! i1 \\<noteq> NoMsg; ys ! j1 \\<noteq> NoMsg;\n        i1 < length xs; j1 < length ys; i < length xs;\n        last_message xs = xs ! i1;\n        \\<forall>j<length xs. i1 < j \\<longrightarrow> xs ! j = NoMsg;\n        last_message ys = ys ! j1;\n        \\<forall>j<length ys. j1 < j \\<longrightarrow> ys ! j = NoMsg;\n        j < length ys; ys ! j \\<noteq> NoMsg; xs ! i = ys ! j;\n        \\<forall>n<length xs. i < n \\<longrightarrow> xs ! n = NoMsg;\n        \\<forall>n<length ys.\n           j < n \\<longrightarrow> ys ! n = NoMsg\\<rbrakk>\n       \\<Longrightarrow> j < length ys\n 2. \\<And>i1 j1 i j.\n       \\<lbrakk>xs ! i1 \\<noteq> NoMsg; ys ! j1 \\<noteq> NoMsg;\n        i1 < length xs; j1 < length ys; i < length xs;\n        last_message xs = xs ! i1;\n        \\<forall>j<length xs. i1 < j \\<longrightarrow> xs ! j = NoMsg;\n        last_message ys = ys ! j1;\n        \\<forall>j<length ys. j1 < j \\<longrightarrow> ys ! j = NoMsg;\n        j < length ys; ys ! j \\<noteq> NoMsg; xs ! i = ys ! j;\n        \\<forall>n<length xs. i < n \\<longrightarrow> xs ! n = NoMsg;\n        \\<forall>n<length ys.\n           j < n \\<longrightarrow> ys ! n = NoMsg\\<rbrakk>\n       \\<Longrightarrow> ys ! j \\<noteq> NoMsg\n 3. \\<And>i1 j1 i j ja.\n       \\<lbrakk>xs ! i1 \\<noteq> NoMsg; ys ! j1 \\<noteq> NoMsg;\n        i1 < length xs; j1 < length ys; i < length xs;\n        last_message xs = xs ! i1;\n        \\<forall>j<length xs. i1 < j \\<longrightarrow> xs ! j = NoMsg;\n        last_message ys = ys ! j1;\n        \\<forall>j<length ys. j1 < j \\<longrightarrow> ys ! j = NoMsg;\n        j < length ys; ys ! j \\<noteq> NoMsg; xs ! i = ys ! j;\n        \\<forall>n<length xs. i < n \\<longrightarrow> xs ! n = NoMsg;\n        \\<forall>n<length ys. j < n \\<longrightarrow> ys ! n = NoMsg;\n        j < ja; ja < length ys\\<rbrakk>\n       \\<Longrightarrow> ys ! ja = NoMsg", "apply simp+"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma f_shrink_0[simp]: \"xs \\<div>\\<^sub>f 0 = []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. xs \\<div> 0 = []", "by (simp add: f_shrink_defs list_slice_0)"], ["", "lemma f_shrink_1[simp]: \"xs \\<div>\\<^sub>f Suc 0 = xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. xs \\<div> Suc 0 = xs", "by (simp add: f_shrink_def f_aggregate_1)"], ["", "lemma f_shrink_Nil[simp]: \"[] \\<div>\\<^sub>f k = []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. [] \\<div> k = []", "by (simp add: f_shrink_def list_slice_Nil)"], ["", "lemma f_shrink_length: \"length (xs \\<div>\\<^sub>f k) = length xs div k\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length (xs \\<div> k) = length xs div k", "by (simp add: f_shrink_def)"], ["", "lemma f_shrink_empty_conv: \"0 < k \\<Longrightarrow> (xs \\<div>\\<^sub>f k = []) = (length xs < k)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < k \\<Longrightarrow> (xs \\<div> k = []) = (length xs < k)", "by (simp add: f_shrink_def f_aggregate_empty_conv)"], ["", "lemma f_shrink_Cons: \"\n  \\<lbrakk> 0 < k; length xs = k \\<rbrakk> \\<Longrightarrow> (xs @ ys) \\<div>\\<^sub>f k = last_message xs # (ys \\<div>\\<^sub>f k)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>0 < k; length xs = k\\<rbrakk>\n    \\<Longrightarrow> (xs @ ys) \\<div> k = last_message xs # ys \\<div> k", "by (simp add: f_shrink_def f_aggregate_Cons)"], ["", "lemma f_shrink_one: \"\n  \\<lbrakk> 0 < k; length xs = k \\<rbrakk> \\<Longrightarrow> xs \\<div>\\<^sub>f k = [last_message xs]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>0 < k; length xs = k\\<rbrakk>\n    \\<Longrightarrow> xs \\<div> k = [last_message xs]", "by (simp add: f_shrink_def f_aggregate_one)"], ["", "lemma f_shrink_eq_f_shrink_take: \"\n  xs \\<down> (length xs div k * k) \\<div>\\<^sub>f k = xs \\<div>\\<^sub>f k\""], ["proof (prove)\ngoal (1 subgoal):\n 1. xs \\<down> (length xs div k * k) \\<div> k = xs \\<div> k", "by (simp add: f_shrink_defs list_slice_eq_list_slice_take)"], ["", "lemma f_shrink_nth: \"\n  n < length xs div k \\<Longrightarrow>\n  (xs \\<div>\\<^sub>f k) ! n = last_message (xs \\<up> (n * k) \\<down> k)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. n < length xs div k \\<Longrightarrow>\n    xs \\<div> k ! n = last_message (xs \\<up> (n * k) \\<down> k)", "by (simp add: f_shrink_def f_aggregate_nth)"], ["", "lemma f_shrink_nth_eq_sublist_list: \"\n  n < length xs div k \\<Longrightarrow>\n  (xs \\<div>\\<^sub>f k) ! n = last_message (sublist_list xs [n * k..<n * k + k])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. n < length xs div k \\<Longrightarrow>\n    xs \\<div> k ! n = last_message (sublist_list xs [n * k..<n * k + k])", "by (simp add: f_shrink_def f_aggregate_nth_eq_sublist_list)"], ["", "lemma f_shrink_take_nth: \"\n  \\<lbrakk> n < length xs div k; n < m div k \\<rbrakk> \\<Longrightarrow> (xs \\<down> m) \\<div>\\<^sub>f k ! n = xs \\<div>\\<^sub>f k ! n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>n < length xs div k; n < m div k\\<rbrakk>\n    \\<Longrightarrow> xs \\<down> m \\<div> k ! n = xs \\<div> k ! n", "by (simp add: f_shrink_def f_aggregate_take_nth)"], ["", "lemma f_shrink_hd: \"\n  \\<lbrakk> 0 < k; k \\<le> length xs \\<rbrakk> \\<Longrightarrow> hd (xs \\<div>\\<^sub>f k) = last_message (xs \\<down> k)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>0 < k; k \\<le> length xs\\<rbrakk>\n    \\<Longrightarrow> hd (xs \\<div> k) = last_message (xs \\<down> k)", "by (simp add: f_shrink_def f_aggregate_hd)"], ["", "lemma f_shrink_append_mod: \"\n  length xs mod k = 0 \\<Longrightarrow> (xs @ ys) \\<div>\\<^sub>f k = xs \\<div>\\<^sub>f k @ (ys \\<div>\\<^sub>f k)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length xs mod k = 0 \\<Longrightarrow>\n    (xs @ ys) \\<div> k = xs \\<div> k @ ys \\<div> k", "by (simp add: f_shrink_defs list_slice_append_mod)"], ["", "lemma f_shrink_append_mult: \"\n  length xs = m * k \\<Longrightarrow> (xs @ ys) \\<div>\\<^sub>f k = xs \\<div>\\<^sub>f k @ (ys \\<div>\\<^sub>f k)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length xs = m * k \\<Longrightarrow>\n    (xs @ ys) \\<div> k = xs \\<div> k @ ys \\<div> k", "by (simp add: f_shrink_append_mod)"], ["", "lemma f_shrink_snoc: \"\n  \\<lbrakk> 0 < k; length ys = k; length xs mod k = 0 \\<rbrakk> \\<Longrightarrow>\n  (xs @ ys) \\<div>\\<^sub>f k = xs \\<div>\\<^sub>f k @ [last_message ys]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>0 < k; length ys = k; length xs mod k = 0\\<rbrakk>\n    \\<Longrightarrow> (xs @ ys) \\<div> k = xs \\<div> k @ [last_message ys]", "by (simp add: f_shrink_append_mod f_shrink_one)"], ["", "lemma f_shrink_last_message[rule_format]: \"\n  length xs mod k = 0 \\<longrightarrow> last_message (xs \\<div>\\<^sub>f k) = last_message xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length xs mod k = 0 \\<longrightarrow>\n    last_message (xs \\<div> k) = last_message xs", "apply (case_tac \"k = 0\", simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. k \\<noteq> 0 \\<Longrightarrow>\n    length xs mod k = 0 \\<longrightarrow>\n    last_message (xs \\<div> k) = last_message xs", "apply (rule append_constant_length_induct[of k])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>ys.\n       \\<lbrakk>k \\<noteq> 0; k = 0 \\<or> length ys < k\\<rbrakk>\n       \\<Longrightarrow> length ys mod k = 0 \\<longrightarrow>\n                         last_message (ys \\<div> k) = last_message ys\n 2. \\<And>xs ys.\n       \\<lbrakk>k \\<noteq> 0; length xs = k;\n        length ys mod k = 0 \\<longrightarrow>\n        last_message (ys \\<div> k) = last_message ys\\<rbrakk>\n       \\<Longrightarrow> length (xs @ ys) mod k = 0 \\<longrightarrow>\n                         last_message ((xs @ ys) \\<div> k) =\n                         last_message (xs @ ys)", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xs ys.\n       \\<lbrakk>k \\<noteq> 0; length xs = k;\n        length ys mod k = 0 \\<longrightarrow>\n        last_message (ys \\<div> k) = last_message ys\\<rbrakk>\n       \\<Longrightarrow> length (xs @ ys) mod k = 0 \\<longrightarrow>\n                         last_message ((xs @ ys) \\<div> k) =\n                         last_message (xs @ ys)", "apply (simp add: f_shrink_Cons last_message_append)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma f_shrink_replicate: \"m\\<^bsup>n\\<^esup> \\<div>\\<^sub>f k = m\\<^bsup>n div k\\<^esup>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. m\\<^bsup>n\\<^esup> \\<div> k = m\\<^bsup>n div k\\<^esup>", "apply (case_tac \"k = 0\", simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. k \\<noteq> 0 \\<Longrightarrow>\n    m\\<^bsup>n\\<^esup> \\<div> k = m\\<^bsup>n div k\\<^esup>", "apply (case_tac \"n < k\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>k \\<noteq> 0; n < k\\<rbrakk>\n    \\<Longrightarrow> m\\<^bsup>n\\<^esup> \\<div> k = m\\<^bsup>n div k\\<^esup>\n 2. \\<lbrakk>k \\<noteq> 0; \\<not> n < k\\<rbrakk>\n    \\<Longrightarrow> m\\<^bsup>n\\<^esup> \\<div> k = m\\<^bsup>n div k\\<^esup>", "apply (simp add: f_shrink_empty_conv)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>k \\<noteq> 0; \\<not> n < k\\<rbrakk>\n    \\<Longrightarrow> m\\<^bsup>n\\<^esup> \\<div> k = m\\<^bsup>n div k\\<^esup>", "apply (clarsimp simp: list_eq_iff f_shrink_length f_shrink_nth)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i.\n       \\<lbrakk>0 < k; \\<not> n < k; i < n div k\\<rbrakk>\n       \\<Longrightarrow> last_message m\\<^bsup>min k (n - i * k)\\<^esup> = m", "apply (rule last_message_replicate)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i.\n       \\<lbrakk>0 < k; \\<not> n < k; i < n div k\\<rbrakk>\n       \\<Longrightarrow> 0 < min k (n - i * k)", "apply (clarsimp simp: min_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i.\n       \\<lbrakk>\\<not> n < k; i < n div k; \\<not> k \\<le> n - i * k\\<rbrakk>\n       \\<Longrightarrow> i * k < n", "apply (drule mult_less_mono1[of _ \"n div k\" k], simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i.\n       \\<lbrakk>\\<not> n < k; \\<not> k \\<le> n - i * k;\n        i * k < n div k * k\\<rbrakk>\n       \\<Longrightarrow> i * k < n", "apply (simp add: div_mult_cancel)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma f_shrink_f_expand_id: \"0 < k \\<Longrightarrow> xs \\<odot>\\<^sub>f k \\<div>\\<^sub>f k = xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < k \\<Longrightarrow> xs \\<odot> k \\<div> k = xs", "apply (simp add: list_eq_iff)"], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < k \\<Longrightarrow>\n    length (xs \\<odot> k \\<div> k) = length xs \\<and>\n    (\\<forall>i<length (xs \\<odot> k \\<div> k).\n        xs \\<odot> k \\<div> k ! i = xs ! i)", "apply (simp add: f_shrink_length f_shrink_nth f_expand_drop_mult f_expand_take_mod drop_take_1 last_message_replicate_NoMsg)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma f_expand_f_shrink_id_take[rule_format]: \"\n  \\<lbrakk> \\<forall>i<length xs. 0 < i mod k \\<longrightarrow> xs ! i = \\<NoMsg> \\<rbrakk> \\<Longrightarrow>\n  xs \\<div>\\<^sub>f k \\<odot>\\<^sub>f k = xs \\<down> (length xs div k * k)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>i<length xs.\n       0 < i mod k \\<longrightarrow> xs ! i = NoMsg \\<Longrightarrow>\n    xs \\<div> k \\<odot> k = xs \\<down> (length xs div k * k)", "apply (case_tac \"k = 0\", simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>i<length xs.\n                0 < i mod k \\<longrightarrow> xs ! i = NoMsg;\n     k \\<noteq> 0\\<rbrakk>\n    \\<Longrightarrow> xs \\<div> k \\<odot> k =\n                      xs \\<down> (length xs div k * k)", "apply (induct xs rule: append_constant_length_induct[of k])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>ys.\n       \\<lbrakk>k = 0 \\<or> length ys < k;\n        \\<forall>i<length ys. 0 < i mod k \\<longrightarrow> ys ! i = NoMsg;\n        k \\<noteq> 0\\<rbrakk>\n       \\<Longrightarrow> ys \\<div> k \\<odot> k =\n                         ys \\<down> (length ys div k * k)\n 2. \\<And>xs ys.\n       \\<lbrakk>length xs = k;\n        \\<lbrakk>\\<forall>i<length ys.\n                    0 < i mod k \\<longrightarrow> ys ! i = NoMsg;\n         k \\<noteq> 0\\<rbrakk>\n        \\<Longrightarrow> ys \\<div> k \\<odot> k =\n                          ys \\<down> (length ys div k * k);\n        \\<forall>i<length (xs @ ys).\n           0 < i mod k \\<longrightarrow> (xs @ ys) ! i = NoMsg;\n        k \\<noteq> 0\\<rbrakk>\n       \\<Longrightarrow> (xs @ ys) \\<div> k \\<odot> k =\n                         (xs @ ys) \\<down> (length (xs @ ys) div k * k)", "apply (simp add: f_shrink_empty_conv[symmetric])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xs ys.\n       \\<lbrakk>length xs = k;\n        \\<lbrakk>\\<forall>i<length ys.\n                    0 < i mod k \\<longrightarrow> ys ! i = NoMsg;\n         k \\<noteq> 0\\<rbrakk>\n        \\<Longrightarrow> ys \\<div> k \\<odot> k =\n                          ys \\<down> (length ys div k * k);\n        \\<forall>i<length (xs @ ys).\n           0 < i mod k \\<longrightarrow> (xs @ ys) ! i = NoMsg;\n        k \\<noteq> 0\\<rbrakk>\n       \\<Longrightarrow> (xs @ ys) \\<div> k \\<odot> k =\n                         (xs @ ys) \\<down> (length (xs @ ys) div k * k)", "apply (drule meta_mp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>xs ys.\n       \\<lbrakk>length xs = k;\n        \\<forall>i<length (xs @ ys).\n           0 < i mod k \\<longrightarrow> (xs @ ys) ! i = NoMsg;\n        k \\<noteq> 0\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<length ys.\n                            0 < i mod k \\<longrightarrow> ys ! i = NoMsg\n 2. \\<And>xs ys.\n       \\<lbrakk>length xs = k;\n        \\<forall>i<length (xs @ ys).\n           0 < i mod k \\<longrightarrow> (xs @ ys) ! i = NoMsg;\n        k \\<noteq> 0;\n        k \\<noteq> 0 \\<Longrightarrow>\n        ys \\<div> k \\<odot> k = ys \\<down> (length ys div k * k)\\<rbrakk>\n       \\<Longrightarrow> (xs @ ys) \\<div> k \\<odot> k =\n                         (xs @ ys) \\<down> (length (xs @ ys) div k * k)", "apply clarify"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>xs ys i.\n       \\<lbrakk>\\<forall>i<length (xs @ ys).\n                   0 < i mod length xs \\<longrightarrow>\n                   (xs @ ys) ! i = NoMsg;\n        k = length xs; xs \\<noteq> []; i < length ys;\n        0 < i mod length xs\\<rbrakk>\n       \\<Longrightarrow> ys ! i = NoMsg\n 2. \\<And>xs ys.\n       \\<lbrakk>length xs = k;\n        \\<forall>i<length (xs @ ys).\n           0 < i mod k \\<longrightarrow> (xs @ ys) ! i = NoMsg;\n        k \\<noteq> 0;\n        k \\<noteq> 0 \\<Longrightarrow>\n        ys \\<div> k \\<odot> k = ys \\<down> (length ys div k * k)\\<rbrakk>\n       \\<Longrightarrow> (xs @ ys) \\<div> k \\<odot> k =\n                         (xs @ ys) \\<down> (length (xs @ ys) div k * k)", "apply (drule_tac x=\"length xs + i\" in spec, simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xs ys.\n       \\<lbrakk>length xs = k;\n        \\<forall>i<length (xs @ ys).\n           0 < i mod k \\<longrightarrow> (xs @ ys) ! i = NoMsg;\n        k \\<noteq> 0;\n        k \\<noteq> 0 \\<Longrightarrow>\n        ys \\<div> k \\<odot> k = ys \\<down> (length ys div k * k)\\<rbrakk>\n       \\<Longrightarrow> (xs @ ys) \\<div> k \\<odot> k =\n                         (xs @ ys) \\<down> (length (xs @ ys) div k * k)", "apply (simp add: f_shrink_append_mod)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xs ys.\n       \\<lbrakk>length xs = k;\n        \\<forall>i<k + length ys.\n           0 < i mod k \\<longrightarrow> (xs @ ys) ! i = NoMsg;\n        0 < k;\n        ys \\<div> k \\<odot> k = ys \\<down> (length ys div k * k)\\<rbrakk>\n       \\<Longrightarrow> xs \\<div> k \\<odot> k = xs", "apply (rule_tac t=xs and s=\"(xs ! 0) # replicate (k - Suc 0) \\<NoMsg>\" in subst)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>xs ys.\n       \\<lbrakk>length xs = k;\n        \\<forall>i<k + length ys.\n           0 < i mod k \\<longrightarrow> (xs @ ys) ! i = NoMsg;\n        0 < k;\n        ys \\<div> k \\<odot> k = ys \\<down> (length ys div k * k)\\<rbrakk>\n       \\<Longrightarrow> xs ! 0 # NoMsg\\<^bsup>k - Suc 0\\<^esup> = xs\n 2. \\<And>xs ys.\n       \\<lbrakk>length xs = k;\n        \\<forall>i<k + length ys.\n           0 < i mod k \\<longrightarrow> (xs @ ys) ! i = NoMsg;\n        0 < k;\n        ys \\<div> k \\<odot> k = ys \\<down> (length ys div k * k)\\<rbrakk>\n       \\<Longrightarrow> (xs ! 0 # NoMsg\\<^bsup>k - Suc 0\\<^esup>) \\<div>\n                         k \\<odot>\n                         k =\n                         xs ! 0 # NoMsg\\<^bsup>k - Suc 0\\<^esup>", "apply (simp (no_asm_simp) add: list_eq_iff nth_Cons')"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>xs ys.\n       \\<lbrakk>length xs = k;\n        \\<forall>i<k + length ys.\n           0 < i mod k \\<longrightarrow> (xs @ ys) ! i = NoMsg;\n        0 < k;\n        ys \\<div> k \\<odot> k = ys \\<down> (length ys div k * k)\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i>0.\n                            i < k \\<longrightarrow> NoMsg = xs ! i\n 2. \\<And>xs ys.\n       \\<lbrakk>length xs = k;\n        \\<forall>i<k + length ys.\n           0 < i mod k \\<longrightarrow> (xs @ ys) ! i = NoMsg;\n        0 < k;\n        ys \\<div> k \\<odot> k = ys \\<down> (length ys div k * k)\\<rbrakk>\n       \\<Longrightarrow> (xs ! 0 # NoMsg\\<^bsup>k - Suc 0\\<^esup>) \\<div>\n                         k \\<odot>\n                         k =\n                         xs ! 0 # NoMsg\\<^bsup>k - Suc 0\\<^esup>", "apply (clarify, rename_tac i)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>xs ys i.\n       \\<lbrakk>\\<forall>i<length xs + length ys.\n                   0 < i mod length xs \\<longrightarrow>\n                   (xs @ ys) ! i = NoMsg;\n        ys \\<div> length xs \\<odot> length xs =\n        ys \\<down> (length ys div length xs * length xs);\n        k = length xs; xs \\<noteq> []; 0 < i; i < length xs\\<rbrakk>\n       \\<Longrightarrow> NoMsg = xs ! i\n 2. \\<And>xs ys.\n       \\<lbrakk>length xs = k;\n        \\<forall>i<k + length ys.\n           0 < i mod k \\<longrightarrow> (xs @ ys) ! i = NoMsg;\n        0 < k;\n        ys \\<div> k \\<odot> k = ys \\<down> (length ys div k * k)\\<rbrakk>\n       \\<Longrightarrow> (xs ! 0 # NoMsg\\<^bsup>k - Suc 0\\<^esup>) \\<div>\n                         k \\<odot>\n                         k =\n                         xs ! 0 # NoMsg\\<^bsup>k - Suc 0\\<^esup>", "apply (drule_tac x=i in spec)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>xs ys i.\n       \\<lbrakk>ys \\<div> length xs \\<odot> length xs =\n                ys \\<down> (length ys div length xs * length xs);\n        k = length xs; xs \\<noteq> []; 0 < i; i < length xs;\n        i < length xs + length ys \\<longrightarrow>\n        0 < i mod length xs \\<longrightarrow> (xs @ ys) ! i = NoMsg\\<rbrakk>\n       \\<Longrightarrow> NoMsg = xs ! i\n 2. \\<And>xs ys.\n       \\<lbrakk>length xs = k;\n        \\<forall>i<k + length ys.\n           0 < i mod k \\<longrightarrow> (xs @ ys) ! i = NoMsg;\n        0 < k;\n        ys \\<div> k \\<odot> k = ys \\<down> (length ys div k * k)\\<rbrakk>\n       \\<Longrightarrow> (xs ! 0 # NoMsg\\<^bsup>k - Suc 0\\<^esup>) \\<div>\n                         k \\<odot>\n                         k =\n                         xs ! 0 # NoMsg\\<^bsup>k - Suc 0\\<^esup>", "apply (simp add: nth_append)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xs ys.\n       \\<lbrakk>length xs = k;\n        \\<forall>i<k + length ys.\n           0 < i mod k \\<longrightarrow> (xs @ ys) ! i = NoMsg;\n        0 < k;\n        ys \\<div> k \\<odot> k = ys \\<down> (length ys div k * k)\\<rbrakk>\n       \\<Longrightarrow> (xs ! 0 # NoMsg\\<^bsup>k - Suc 0\\<^esup>) \\<div>\n                         k \\<odot>\n                         k =\n                         xs ! 0 # NoMsg\\<^bsup>k - Suc 0\\<^esup>", "apply (simp (no_asm_simp) add: list_eq_iff)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xs ys.\n       \\<lbrakk>length xs = k;\n        \\<forall>i<k + length ys.\n           0 < i mod k \\<longrightarrow> (xs @ ys) ! i = NoMsg;\n        0 < k;\n        ys \\<div> k \\<odot> k = ys \\<down> (length ys div k * k)\\<rbrakk>\n       \\<Longrightarrow> length\n                          ((xs ! 0 # NoMsg\\<^bsup>k - Suc 0\\<^esup>) \\<div>\n                           k) =\n                         Suc 0 \\<and>\n                         (\\<forall>i<length\n((xs ! 0 # NoMsg\\<^bsup>k - Suc 0\\<^esup>) \\<div> k) *\n                                     k.\n                             (xs ! 0 #\n                              NoMsg\\<^bsup>k - Suc 0\\<^esup>) \\<div>\n                             k \\<odot>\n                             k !\n                             i =\n                             (xs ! 0 # NoMsg\\<^bsup>k - Suc 0\\<^esup>) ! i)", "apply (clarsimp simp: f_shrink_length f_expand_nth_if f_shrink_nth last_message_replicate_NoMsg nth_Cons')"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "corollary f_expand_f_shrink_id_mod_0: \"\n  \\<lbrakk> length xs mod k = 0;\n    \\<And>i. \\<lbrakk> i < length xs; 0 < i mod k \\<rbrakk> \\<Longrightarrow> xs ! i = \\<NoMsg> \\<rbrakk> \\<Longrightarrow>\n  xs \\<div>\\<^sub>f k \\<odot>\\<^sub>f k = xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>length xs mod k = 0;\n     \\<And>i.\n        \\<lbrakk>i < length xs; 0 < i mod k\\<rbrakk>\n        \\<Longrightarrow> xs ! i = NoMsg\\<rbrakk>\n    \\<Longrightarrow> xs \\<div> k \\<odot> k = xs", "by (clarsimp simp: f_expand_f_shrink_id_take)"], ["", "lemma f_shrink_take: \"\n  xs \\<down> n \\<div>\\<^sub>f k = xs \\<div>\\<^sub>f k \\<down> (n div k)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. xs \\<down> n \\<div> k = xs \\<div> k \\<down> (n div k)", "by (simp add: f_shrink_def f_aggregate_take)"], ["", "lemma f_shrink_take_mult: \"xs \\<down> (n * k) \\<div>\\<^sub>f k = xs \\<div>\\<^sub>f k \\<down> n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. xs \\<down> (n * k) \\<div> k = xs \\<div> k \\<down> n", "by (simp add: f_shrink_def f_aggregate_take_mult)"], ["", "lemma f_shrink_drop_mult: \"xs \\<up> (n * k) \\<div>\\<^sub>f k = xs \\<div>\\<^sub>f k \\<up> n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. xs \\<up> (n * k) \\<div> k = xs \\<div> k \\<up> n", "by (simp add: f_shrink_def f_aggregate_drop_mult)"], ["", "lemma f_shrink_drop_mod: \"\n  n mod k = 0 \\<Longrightarrow> xs \\<up> n \\<div>\\<^sub>f k = xs \\<div>\\<^sub>f k \\<up> (n div k)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. n mod k = 0 \\<Longrightarrow>\n    xs \\<up> n \\<div> k = xs \\<div> k \\<up> (n div k)", "by (simp add: f_shrink_def f_aggregate_drop_mod)"], ["", "lemma f_shrink_eq_conv: \"\n  (xs \\<div>\\<^sub>f k1 = ys \\<div>\\<^sub>f k2) =\n  (length xs div k1 = length ys div k2 \\<and>\n  (\\<forall>i<length xs div k1.\n      last_message (xs \\<up> (i * k1) \\<down> k1) = last_message (ys \\<up> (i * k2) \\<down> k2)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (xs \\<div> k1 = ys \\<div> k2) =\n    (length xs div k1 = length ys div k2 \\<and>\n     (\\<forall>i<length xs div k1.\n         last_message (xs \\<up> (i * k1) \\<down> k1) =\n         last_message (ys \\<up> (i * k2) \\<down> k2)))", "apply (case_tac \"k1 = 0\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. k1 = 0 \\<Longrightarrow>\n    (xs \\<div> k1 = ys \\<div> k2) =\n    (length xs div k1 = length ys div k2 \\<and>\n     (\\<forall>i<length xs div k1.\n         last_message (xs \\<up> (i * k1) \\<down> k1) =\n         last_message (ys \\<up> (i * k2) \\<down> k2)))\n 2. k1 \\<noteq> 0 \\<Longrightarrow>\n    (xs \\<div> k1 = ys \\<div> k2) =\n    (length xs div k1 = length ys div k2 \\<and>\n     (\\<forall>i<length xs div k1.\n         last_message (xs \\<up> (i * k1) \\<down> k1) =\n         last_message (ys \\<up> (i * k2) \\<down> k2)))", "apply (simp add: eq_commute[of \"[]\"] length_0_conv[symmetric] f_shrink_length del: length_0_conv)"], ["proof (prove)\ngoal (1 subgoal):\n 1. k1 \\<noteq> 0 \\<Longrightarrow>\n    (xs \\<div> k1 = ys \\<div> k2) =\n    (length xs div k1 = length ys div k2 \\<and>\n     (\\<forall>i<length xs div k1.\n         last_message (xs \\<up> (i * k1) \\<down> k1) =\n         last_message (ys \\<up> (i * k2) \\<down> k2)))", "apply (case_tac \"k2 = 0\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>k1 \\<noteq> 0; k2 = 0\\<rbrakk>\n    \\<Longrightarrow> (xs \\<div> k1 = ys \\<div> k2) =\n                      (length xs div k1 = length ys div k2 \\<and>\n                       (\\<forall>i<length xs div k1.\n                           last_message (xs \\<up> (i * k1) \\<down> k1) =\n                           last_message (ys \\<up> (i * k2) \\<down> k2)))\n 2. \\<lbrakk>k1 \\<noteq> 0; k2 \\<noteq> 0\\<rbrakk>\n    \\<Longrightarrow> (xs \\<div> k1 = ys \\<div> k2) =\n                      (length xs div k1 = length ys div k2 \\<and>\n                       (\\<forall>i<length xs div k1.\n                           last_message (xs \\<up> (i * k1) \\<down> k1) =\n                           last_message (ys \\<up> (i * k2) \\<down> k2)))", "apply (fastforce simp: f_shrink_empty_conv div_eq_0_conv')"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>k1 \\<noteq> 0; k2 \\<noteq> 0\\<rbrakk>\n    \\<Longrightarrow> (xs \\<div> k1 = ys \\<div> k2) =\n                      (length xs div k1 = length ys div k2 \\<and>\n                       (\\<forall>i<length xs div k1.\n                           last_message (xs \\<up> (i * k1) \\<down> k1) =\n                           last_message (ys \\<up> (i * k2) \\<down> k2)))", "apply (simp add: list_eq_iff f_shrink_length)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>0 < k1; 0 < k2\\<rbrakk>\n    \\<Longrightarrow> (length xs div k1 = length ys div k2 \\<and>\n                       (\\<forall>i<length xs div k1.\n                           xs \\<div> k1 ! i = ys \\<div> k2 ! i)) =\n                      (length xs div k1 = length ys div k2 \\<and>\n                       (\\<forall>i<length xs div k1.\n                           last_message (xs \\<up> (i * k1) \\<down> k1) =\n                           last_message (ys \\<up> (i * k2) \\<down> k2)))", "apply (rule conj_cong, simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>0 < k1; 0 < k2; length xs div k1 = length ys div k2\\<rbrakk>\n    \\<Longrightarrow> (\\<forall>i<length xs div k1.\n                          xs \\<div> k1 ! i = ys \\<div> k2 ! i) =\n                      (\\<forall>i<length xs div k1.\n                          last_message (xs \\<up> (i * k1) \\<down> k1) =\n                          last_message (ys \\<up> (i * k2) \\<down> k2))", "apply (rule all_imp_eqI, simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i.\n       \\<lbrakk>0 < k1; 0 < k2; length xs div k1 = length ys div k2;\n        i < length xs div k1\\<rbrakk>\n       \\<Longrightarrow> (xs \\<div> k1 ! i = ys \\<div> k2 ! i) =\n                         (last_message (xs \\<up> (i * k1) \\<down> k1) =\n                          last_message (ys \\<up> (i * k2) \\<down> k2))", "apply (simp add: f_shrink_nth)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma f_shrink_eq_conv': \"\n  (xs' \\<div>\\<^sub>f k = xs) =\n  (length xs' div k = length xs \\<and>\n  (\\<forall>i<length xs.\n      if xs ! i = \\<NoMsg> then (\\<forall>j<k. xs' ! (i * k + j) = \\<NoMsg>)\n      else (\\<exists>n<k. xs' ! (i * k + n) = xs ! i \\<and>\n                  (\\<forall>j<k. n < j \\<longrightarrow> xs' ! (i * k + j) = \\<NoMsg>))))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (xs' \\<div> k = xs) =\n    (length xs' div k = length xs \\<and>\n     (\\<forall>i<length xs.\n         if xs ! i = NoMsg then \\<forall>j<k. xs' ! (i * k + j) = NoMsg\n         else \\<exists>n<k.\n                 xs' ! (i * k + n) = xs ! i \\<and>\n                 (\\<forall>j<k.\n                     n < j \\<longrightarrow> xs' ! (i * k + j) = NoMsg)))", "apply (case_tac \"k = 0\", fastforce)"], ["proof (prove)\ngoal (1 subgoal):\n 1. k \\<noteq> 0 \\<Longrightarrow>\n    (xs' \\<div> k = xs) =\n    (length xs' div k = length xs \\<and>\n     (\\<forall>i<length xs.\n         if xs ! i = NoMsg then \\<forall>j<k. xs' ! (i * k + j) = NoMsg\n         else \\<exists>n<k.\n                 xs' ! (i * k + n) = xs ! i \\<and>\n                 (\\<forall>j<k.\n                     n < j \\<longrightarrow> xs' ! (i * k + j) = NoMsg)))", "apply (simp add: list_eq_iff f_shrink_length split del: if_split)"], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < k \\<Longrightarrow>\n    (length xs' div k = length xs \\<and>\n     (\\<forall>i<length xs' div k. xs' \\<div> k ! i = xs ! i)) =\n    (length xs' div k = length xs \\<and>\n     (\\<forall>i<length xs.\n         if xs ! i = NoMsg then \\<forall>j<k. xs' ! (i * k + j) = NoMsg\n         else \\<exists>n<k.\n                 xs' ! (i * k + n) = xs ! i \\<and>\n                 (\\<forall>j<k.\n                     n < j \\<longrightarrow> xs' ! (i * k + j) = NoMsg)))", "apply (rule conj_cong, simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>0 < k; length xs' div k = length xs\\<rbrakk>\n    \\<Longrightarrow> (\\<forall>i<length xs' div k.\n                          xs' \\<div> k ! i = xs ! i) =\n                      (\\<forall>i<length xs.\n                          if xs ! i = NoMsg\n                          then \\<forall>j<k. xs' ! (i * k + j) = NoMsg\n                          else \\<exists>n<k.\n                                  xs' ! (i * k + n) = xs ! i \\<and>\n                                  (\\<forall>j<k.\nn < j \\<longrightarrow> xs' ! (i * k + j) = NoMsg))", "apply (rule all_imp_eqI, simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i.\n       \\<lbrakk>0 < k; length xs' div k = length xs;\n        i < length xs' div k\\<rbrakk>\n       \\<Longrightarrow> (xs' \\<div> k ! i = xs ! i) =\n                         (if xs ! i = NoMsg\n                          then \\<forall>j<k. xs' ! (i * k + j) = NoMsg\n                          else \\<exists>n<k.\n                                  xs' ! (i * k + n) = xs ! i \\<and>\n                                  (\\<forall>j<k.\nn < j \\<longrightarrow> xs' ! (i * k + j) = NoMsg))", "apply (cut_tac x=i in less_div_imp_mult_add_divisor_le[of _ \"length xs'\" k], simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i.\n       \\<lbrakk>0 < k; length xs' div k = length xs; i < length xs' div k;\n        i * k + k \\<le> length xs'\\<rbrakk>\n       \\<Longrightarrow> (xs' \\<div> k ! i = xs ! i) =\n                         (if xs ! i = NoMsg\n                          then \\<forall>j<k. xs' ! (i * k + j) = NoMsg\n                          else \\<exists>n<k.\n                                  xs' ! (i * k + n) = xs ! i \\<and>\n                                  (\\<forall>j<k.\nn < j \\<longrightarrow> xs' ! (i * k + j) = NoMsg))", "apply (clarsimp simp: f_shrink_nth last_message_conv_if min_eqR)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i.\n       \\<lbrakk>0 < k; length xs' div k = length xs; i < length xs;\n        i * k + k \\<le> length xs'; xs ! i \\<noteq> NoMsg\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>ia<k.\n                             xs' \\<up> (i * k) \\<down> k ! ia =\n                             xs ! i \\<and>\n                             (\\<forall>j<k.\n                                 ia < j \\<longrightarrow>\n                                 xs' ! (i * k + j) = NoMsg)) =\n                         (\\<exists>n<k.\n                             xs' ! (i * k + n) = xs ! i \\<and>\n                             (\\<forall>j<k.\n                                 n < j \\<longrightarrow>\n                                 xs' ! (i * k + j) = NoMsg))", "apply (rule ex_imp_eqI, simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i ia.\n       \\<lbrakk>0 < k; length xs' div k = length xs; i < length xs;\n        i * k + k \\<le> length xs'; xs ! i \\<noteq> NoMsg; ia < k\\<rbrakk>\n       \\<Longrightarrow> (xs' \\<up> (i * k) \\<down> k ! ia = xs ! i \\<and>\n                          (\\<forall>j<k.\n                              ia < j \\<longrightarrow>\n                              xs' ! (i * k + j) = NoMsg)) =\n                         (xs' ! (i * k + ia) = xs ! i \\<and>\n                          (\\<forall>j<k.\n                              ia < j \\<longrightarrow>\n                              xs' ! (i * k + j) = NoMsg))", "apply simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma f_shrink_assoc: \"xs \\<div>\\<^sub>f a \\<div>\\<^sub>f b = xs \\<div>\\<^sub>f (a * b)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. xs \\<div> a \\<div> b = xs \\<div> (a * b)", "by (unfold f_shrink_def, rule f_aggregate_assoc, fold f_shrink_def, rule f_shrink_last_message)"], ["", "lemma f_shrink_commute: \"xs \\<div>\\<^sub>f a \\<div>\\<^sub>f b = xs \\<div>\\<^sub>f b \\<div>\\<^sub>f a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. xs \\<div> a \\<div> b = xs \\<div> b \\<div> a", "by (simp add: f_shrink_assoc mult.commute[of a])"], ["", "lemma i_shrink_0[simp]: \"f \\<div>\\<^sub>i 0 = (\\<lambda>n. \\<NoMsg>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f \\<div> 0 = (\\<lambda>n. NoMsg)", "by (simp add: i_shrink_defs)"], ["", "lemma i_shrink_1[simp]: \"f \\<div>\\<^sub>i Suc 0 = f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f \\<div> Suc 0 = f", "by (simp add: i_shrink_def i_aggregate_1)"], ["", "lemma i_shrink_nth: \"(f \\<div>\\<^sub>i k) n = last_message (f \\<Up> (n * k) \\<Down> k)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (f \\<div> k) n = last_message (f \\<Up> (n * k) \\<Down> k)", "by (simp add: i_shrink_defs)"], ["", "lemma i_shrink_nth_eq_map: \"(f \\<div>\\<^sub>i k) n = last_message (map f [n * k..<n * k + k])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (f \\<div> k) n = last_message (map f [n * k..<n * k + k])", "by (simp add: i_shrink_def i_aggregate_nth_eq_map)"], ["", "lemma i_shrink_hd: \"(f \\<div>\\<^sub>i k) 0 = last_message (f \\<Down> k)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (f \\<div> k) 0 = last_message (f \\<Down> k)", "by (simp add: i_shrink_nth)"], ["", "lemma i_shrink_i_append_mod: \"\n  length xs mod k = 0 \\<Longrightarrow> (xs \\<frown> f) \\<div>\\<^sub>i k = xs \\<div>\\<^sub>f k \\<frown> (f \\<div>\\<^sub>i k)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length xs mod k = 0 \\<Longrightarrow>\n    (xs \\<frown> f) \\<div> k = xs \\<div> k \\<frown> f \\<div> k", "by (simp add: f_shrink_def i_shrink_def i_aggregate_i_append_mod)"], ["", "lemma i_shrink_i_append_mult: \"\n  length xs = m * k \\<Longrightarrow> (xs \\<frown> f) \\<div>\\<^sub>i k = xs \\<div>\\<^sub>f k \\<frown> (f \\<div>\\<^sub>i k)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length xs = m * k \\<Longrightarrow>\n    (xs \\<frown> f) \\<div> k = xs \\<div> k \\<frown> f \\<div> k", "by (simp add: i_shrink_i_append_mod)"], ["", "lemma i_shrink_Cons: \"\n  \\<lbrakk> 0 < k; length xs = k \\<rbrakk> \\<Longrightarrow> (xs \\<frown> f) \\<div>\\<^sub>i k = [last_message xs] \\<frown> (f \\<div>\\<^sub>i k)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>0 < k; length xs = k\\<rbrakk>\n    \\<Longrightarrow> (xs \\<frown> f) \\<div> k =\n                      [last_message xs] \\<frown> f \\<div> k", "by (simp add: f_shrink_def i_shrink_def i_aggregate_Cons)"], ["", "lemma i_shrink_take_nth: \"\n  n < m div k \\<Longrightarrow> (f \\<Down> m) \\<div>\\<^sub>f k ! n = (f \\<div>\\<^sub>i k) n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. n < m div k \\<Longrightarrow> f \\<Down> m \\<div> k ! n = (f \\<div> k) n", "by (simp add: f_shrink_def i_shrink_def i_aggregate_take_nth)"], ["", "lemma i_shrink_const[simp]: \"0 < k \\<Longrightarrow> (\\<lambda>x. m) \\<div>\\<^sub>i k = (\\<lambda>x. m)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < k \\<Longrightarrow> (\\<lambda>x. m) \\<div> k = (\\<lambda>x. m)", "by (simp add: ilist_eq_iff i_shrink_nth last_message_replicate)"], ["", "lemma i_shrink_const_NoMsg[simp]: \"(\\<lambda>x. \\<NoMsg>) \\<div>\\<^sub>i k = (\\<lambda>x. \\<NoMsg>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>x. NoMsg) \\<div> k = (\\<lambda>x. NoMsg)", "by (case_tac \"k = 0\", simp+)"], ["", "lemma i_shrink_i_expand_id: \"0 < k \\<Longrightarrow> f \\<odot>\\<^sub>i k \\<div>\\<^sub>i k = f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < k \\<Longrightarrow> f \\<odot> k \\<div> k = f", "by (simp add: ilist_eq_iff i_shrink_nth i_expand_i_drop_mult i_expand_i_take_mod i_drop_i_take_1 last_message_replicate_NoMsg)"], ["", "lemma i_shrink_i_take_mult: \"0 < k \\<Longrightarrow> f \\<Down> (n * k) \\<div>\\<^sub>f k = f \\<div>\\<^sub>i k \\<Down> n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < k \\<Longrightarrow>\n    f \\<Down> (n * k) \\<div> k = f \\<div> k \\<Down> n", "by (simp add: f_shrink_def i_shrink_def i_aggregate_i_take_mult)"], ["", "lemma i_shrink_i_take: \"\n  f \\<Down> n \\<div>\\<^sub>f k = f \\<div>\\<^sub>i k \\<Down> (n div k)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f \\<Down> n \\<div> k = f \\<div> k \\<Down> (n div k)", "by (simp add: f_shrink_def i_shrink_def i_aggregate_i_take)"], ["", "lemma i_shrink_i_drop_mult: \"f \\<Up> (n * k) \\<div>\\<^sub>i k = f \\<div>\\<^sub>i k \\<Up> n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f \\<Up> (n * k) \\<div> k = f \\<div> k \\<Up> n", "by (simp add: f_shrink_def i_shrink_def i_aggregate_i_drop_mult)"], ["", "lemma i_shrink_i_drop_mod: \"\n  n mod k = 0 \\<Longrightarrow> f \\<Up> n \\<div>\\<^sub>i k = f \\<div>\\<^sub>i k \\<Up> (n div k)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. n mod k = 0 \\<Longrightarrow>\n    f \\<Up> n \\<div> k = f \\<div> k \\<Up> (n div k)", "by (simp add: f_shrink_def i_shrink_def i_aggregate_i_drop_mod)"], ["", "lemma i_shrink_eq_conv: \"\n  (f \\<div>\\<^sub>i k1 = g \\<div>\\<^sub>i k2) =\n  (\\<forall>i. last_message (f \\<Up> (i * k1) \\<Down> k1) =\n       last_message (g \\<Up> (i * k2) \\<Down> k2))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (f \\<div> k1 = g \\<div> k2) =\n    (\\<forall>i.\n        last_message (f \\<Up> (i * k1) \\<Down> k1) =\n        last_message (g \\<Up> (i * k2) \\<Down> k2))", "by (simp add: ilist_eq_iff i_shrink_nth)"], ["", "lemma i_shrink_eq_conv': \"\n  (f' \\<div>\\<^sub>i k = f) =\n  (\\<forall>i. if f i = \\<NoMsg> then \\<forall>j<k. f' (i * k + j) = \\<NoMsg>\n       else \\<exists>n<k. f' (i * k + n) = f i \\<and>\n                    (\\<forall>j<k. n < j \\<longrightarrow> f' (i * k + j) = \\<NoMsg>))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (f' \\<div> k = f) =\n    (\\<forall>i.\n        if f i = NoMsg then \\<forall>j<k. f' (i * k + j) = NoMsg\n        else \\<exists>n<k.\n                f' (i * k + n) = f i \\<and>\n                (\\<forall>j<k.\n                    n < j \\<longrightarrow> f' (i * k + j) = NoMsg))", "apply (simp add: ilist_eq_iff)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>x. (f' \\<div> k) x = f x) =\n    (\\<forall>i.\n        (f i = NoMsg \\<longrightarrow>\n         (\\<forall>j<k. f' (i * k + j) = NoMsg)) \\<and>\n        (f i \\<noteq> NoMsg \\<longrightarrow>\n         (\\<exists>n<k.\n             f' (i * k + n) = f i \\<and>\n             (\\<forall>j<k.\n                 n < j \\<longrightarrow> f' (i * k + j) = NoMsg))))", "apply (case_tac \"k = 0\", fastforce)"], ["proof (prove)\ngoal (1 subgoal):\n 1. k \\<noteq> 0 \\<Longrightarrow>\n    (\\<forall>x. (f' \\<div> k) x = f x) =\n    (\\<forall>i.\n        (f i = NoMsg \\<longrightarrow>\n         (\\<forall>j<k. f' (i * k + j) = NoMsg)) \\<and>\n        (f i \\<noteq> NoMsg \\<longrightarrow>\n         (\\<exists>n<k.\n             f' (i * k + n) = f i \\<and>\n             (\\<forall>j<k.\n                 n < j \\<longrightarrow> f' (i * k + j) = NoMsg))))", "apply (rule all_eqI, rename_tac i)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i.\n       k \\<noteq> 0 \\<Longrightarrow>\n       ((f' \\<div> k) i = f i) =\n       ((f i = NoMsg \\<longrightarrow>\n         (\\<forall>j<k. f' (i * k + j) = NoMsg)) \\<and>\n        (f i \\<noteq> NoMsg \\<longrightarrow>\n         (\\<exists>n<k.\n             f' (i * k + n) = f i \\<and>\n             (\\<forall>j<k.\n                 n < j \\<longrightarrow> f' (i * k + j) = NoMsg))))", "apply (simp add: i_shrink_nth)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i.\n       0 < k \\<Longrightarrow>\n       (last_message (f' \\<Up> (i * k) \\<Down> k) = f i) =\n       ((f i = NoMsg \\<longrightarrow>\n         (\\<forall>j<k. f' (i * k + j) = NoMsg)) \\<and>\n        (f i \\<noteq> NoMsg \\<longrightarrow>\n         (\\<exists>n<k.\n             f' (i * k + n) = f i \\<and>\n             (\\<forall>j<k.\n                 n < j \\<longrightarrow> f' (i * k + j) = NoMsg))))", "apply (case_tac \"f i = NoMsg\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>i.\n       \\<lbrakk>0 < k; f i = NoMsg\\<rbrakk>\n       \\<Longrightarrow> (last_message (f' \\<Up> (i * k) \\<Down> k) = f i) =\n                         ((f i = NoMsg \\<longrightarrow>\n                           (\\<forall>j<k. f' (i * k + j) = NoMsg)) \\<and>\n                          (f i \\<noteq> NoMsg \\<longrightarrow>\n                           (\\<exists>n<k.\n                               f' (i * k + n) = f i \\<and>\n                               (\\<forall>j<k.\n                                   n < j \\<longrightarrow>\n                                   f' (i * k + j) = NoMsg))))\n 2. \\<And>i.\n       \\<lbrakk>0 < k; f i \\<noteq> NoMsg\\<rbrakk>\n       \\<Longrightarrow> (last_message (f' \\<Up> (i * k) \\<Down> k) = f i) =\n                         ((f i = NoMsg \\<longrightarrow>\n                           (\\<forall>j<k. f' (i * k + j) = NoMsg)) \\<and>\n                          (f i \\<noteq> NoMsg \\<longrightarrow>\n                           (\\<exists>n<k.\n                               f' (i * k + n) = f i \\<and>\n                               (\\<forall>j<k.\n                                   n < j \\<longrightarrow>\n                                   f' (i * k + j) = NoMsg))))", "apply (simp add: last_message_NoMsg_conv)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i.\n       \\<lbrakk>0 < k; f i \\<noteq> NoMsg\\<rbrakk>\n       \\<Longrightarrow> (last_message (f' \\<Up> (i * k) \\<Down> k) = f i) =\n                         ((f i = NoMsg \\<longrightarrow>\n                           (\\<forall>j<k. f' (i * k + j) = NoMsg)) \\<and>\n                          (f i \\<noteq> NoMsg \\<longrightarrow>\n                           (\\<exists>n<k.\n                               f' (i * k + n) = f i \\<and>\n                               (\\<forall>j<k.\n                                   n < j \\<longrightarrow>\n                                   f' (i * k + j) = NoMsg))))", "apply (force simp add: last_message_conv)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma i_shrink_assoc: \"f \\<div>\\<^sub>i a \\<div>\\<^sub>i b = f \\<div>\\<^sub>i (a * b)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f \\<div> a \\<div> b = f \\<div> (a * b)", "apply (case_tac \"a = 0\", simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<noteq> 0 \\<Longrightarrow> f \\<div> a \\<div> b = f \\<div> (a * b)", "apply (case_tac \"b = 0\", simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<noteq> 0; b \\<noteq> 0\\<rbrakk>\n    \\<Longrightarrow> f \\<div> a \\<div> b = f \\<div> (a * b)", "apply (unfold i_shrink_def, rule i_aggregate_assoc, simp+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xs.\n       \\<lbrakk>0 < a; 0 < b; length xs mod a = 0\\<rbrakk>\n       \\<Longrightarrow> last_message (f_aggregate xs a last_message) =\n                         last_message xs", "apply (fold f_shrink_def, simp add: f_shrink_last_message)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma i_shrink_commute: \"f \\<div>\\<^sub>i a \\<div>\\<^sub>i b = f \\<div>\\<^sub>i b \\<div>\\<^sub>i a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f \\<div> a \\<div> b = f \\<div> b \\<div> a", "by (simp add: i_shrink_assoc mult.commute[of a])"], ["", "subsubsection \\<open>Holding last messages in everly cycle of a stream\\<close>"], ["", "primrec last_message_hold_init :: \"'a fstream_af \\<Rightarrow> 'a message_af \\<Rightarrow> 'a fstream_af\"\nwhere\n  \"last_message_hold_init [] m = []\"\n| \"last_message_hold_init (x # xs) m =\n    (if x = \\<NoMsg> then m else x) #\n    (last_message_hold_init xs (if x = \\<NoMsg> then m else x))\""], ["", "definition last_message_hold :: \"'a fstream_af \\<Rightarrow> 'a fstream_af\"\n  where \"last_message_hold xs \\<equiv> last_message_hold_init xs \\<NoMsg>\""], ["", "lemma last_message_hold_init_length[simp]: \"\n  \\<And>m. length (last_message_hold_init xs m) = length xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>m. length (last_message_hold_init xs m) = length xs", "by (induct xs, simp+)"], ["", "lemma last_message_hold_init_nth: \"\n  \\<And>i m. i < length xs \\<Longrightarrow>\n  (last_message_hold_init xs m) ! i = last_message (m # xs \\<down> Suc i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i m.\n       i < length xs \\<Longrightarrow>\n       last_message_hold_init xs m ! i = last_message (m # xs \\<down> Suc i)", "apply (induct xs, simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a xs i m.\n       \\<lbrakk>\\<And>i m.\n                   i < length xs \\<Longrightarrow>\n                   last_message_hold_init xs m ! i =\n                   last_message (m # xs \\<down> Suc i);\n        i < length (a # xs)\\<rbrakk>\n       \\<Longrightarrow> last_message_hold_init (a # xs) m ! i =\n                         last_message (m # (a # xs) \\<down> Suc i)", "apply (simp add: nth_Cons')"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma last_message_hold_init_snoc: \"\n  last_message_hold_init (xs @ [x]) m =\n  last_message_hold_init xs m @\n    [if x = \\<NoMsg> then last_message (m # xs) else x]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. last_message_hold_init (xs @ [x]) m =\n    last_message_hold_init xs m @\n    [if x = NoMsg then last_message (m # xs) else x]", "by (simp add: list_eq_iff nth_append last_message_hold_init_nth last_message_append)"], ["", "lemma last_message_hold_init_append[rule_format]: \"\n  \\<And>xs m. last_message_hold_init (xs @ ys) m =\n  last_message_hold_init xs m @ last_message_hold_init ys (last_message (m # xs))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xs m.\n       last_message_hold_init (xs @ ys) m =\n       last_message_hold_init xs m @\n       last_message_hold_init ys (last_message (m # xs))", "apply (induct ys, simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a ys xs m.\n       (\\<And>xs m.\n           last_message_hold_init (xs @ ys) m =\n           last_message_hold_init xs m @\n           last_message_hold_init ys\n            (last_message (m # xs))) \\<Longrightarrow>\n       last_message_hold_init (xs @ a # ys) m =\n       last_message_hold_init xs m @\n       last_message_hold_init (a # ys) (last_message (m # xs))", "apply (rule_tac x=a in subst[OF append_eq_Cons, rule_format])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a ys xs m.\n       (\\<And>xs m.\n           last_message_hold_init (xs @ ys) m =\n           last_message_hold_init xs m @\n           last_message_hold_init ys\n            (last_message (m # xs))) \\<Longrightarrow>\n       last_message_hold_init (xs @ [a] @ ys) m =\n       last_message_hold_init xs m @\n       last_message_hold_init ([a] @ ys) (last_message (m # xs))", "apply (simp only: append_Cons[symmetric] append_assoc[symmetric])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a ys xs m.\n       (\\<And>xs m.\n           last_message_hold_init (xs @ ys) m =\n           last_message_hold_init xs m @\n           last_message_hold_init ys\n            (last_message (m # xs))) \\<Longrightarrow>\n       last_message_hold_init (xs @ [a]) m @\n       last_message_hold_init ys (last_message ((m # xs) @ [a])) =\n       (last_message_hold_init xs m @\n        last_message_hold_init [a] (last_message (m # xs))) @\n       last_message_hold_init ys (last_message [last_message (m # xs), a])", "apply (simp add: last_message_hold_init_snoc last_message_append)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma last_message_hold_length[simp]: \"length (last_message_hold xs) = length xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length (last_message_hold xs) = length xs", "by (simp add: last_message_hold_def)"], ["", "lemma last_message_hold_Nil[simp]: \"last_message_hold [] = []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. last_message_hold [] = []", "by (simp add: last_message_hold_def)"], ["", "lemma last_message_hold_one[simp]: \"last_message_hold [x] = [x]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. last_message_hold [x] = [x]", "by (simp add: last_message_hold_def)"], ["", "lemma last_message_hold_nth: \"\n  i < length xs \\<Longrightarrow> last_message_hold xs ! i = last_message (xs \\<down> Suc i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. i < length xs \\<Longrightarrow>\n    last_message_hold xs ! i = last_message (xs \\<down> Suc i)", "by (simp add: last_message_hold_def last_message_hold_init_nth)"], ["", "lemma last_message_hold_last: \"\n  xs \\<noteq> [] \\<Longrightarrow> last (last_message_hold xs) = last_message xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. xs \\<noteq> [] \\<Longrightarrow>\n    last (last_message_hold xs) = last_message xs", "apply (subgoal_tac \"last_message_hold xs \\<noteq> []\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>xs \\<noteq> []; last_message_hold xs \\<noteq> []\\<rbrakk>\n    \\<Longrightarrow> last (last_message_hold xs) = last_message xs\n 2. xs \\<noteq> [] \\<Longrightarrow> last_message_hold xs \\<noteq> []", "prefer 2"], ["proof (prove)\ngoal (2 subgoals):\n 1. xs \\<noteq> [] \\<Longrightarrow> last_message_hold xs \\<noteq> []\n 2. \\<lbrakk>xs \\<noteq> []; last_message_hold xs \\<noteq> []\\<rbrakk>\n    \\<Longrightarrow> last (last_message_hold xs) = last_message xs", "apply (simp add: length_greater_0_conv[symmetric] del: length_greater_0_conv)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>xs \\<noteq> []; last_message_hold xs \\<noteq> []\\<rbrakk>\n    \\<Longrightarrow> last (last_message_hold xs) = last_message xs", "apply (simp add: last_nth last_message_hold_nth length_greater_0_conv[symmetric] del: length_greater_0_conv)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma last_message_hold_take: \"\n  last_message_hold xs \\<down> n = last_message_hold (xs \\<down> n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. last_message_hold xs \\<down> n = last_message_hold (xs \\<down> n)", "apply (case_tac \"length xs \\<le> n\", simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> length xs \\<le> n \\<Longrightarrow>\n    last_message_hold xs \\<down> n = last_message_hold (xs \\<down> n)", "apply (simp add: list_eq_iff last_message_hold_nth min_eqL)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma last_message_hold_snoc: \"\n  last_message_hold (xs @ [x]) =\n  last_message_hold xs @ [if x = \\<NoMsg> then last_message xs else x]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. last_message_hold (xs @ [x]) =\n    last_message_hold xs @ [if x = NoMsg then last_message xs else x]", "by (simp add: last_message_hold_def last_message_hold_init_snoc)"], ["", "lemma last_message_hold_append: \"\n  last_message_hold (xs @ ys) =\n  last_message_hold xs @ last_message_hold_init ys (last_message xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. last_message_hold (xs @ ys) =\n    last_message_hold xs @ last_message_hold_init ys (last_message xs)", "by (simp add: last_message_hold_def last_message_hold_init_append)"], ["", "lemma last_message_hold_append': \"\n  last_message_hold (xs @ ys) =\n  last_message_hold xs @ tl (last_message_hold (last_message xs # ys))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. last_message_hold (xs @ ys) =\n    last_message_hold xs @ tl (last_message_hold (last_message xs # ys))", "apply (simp add: last_message_hold_append)"], ["proof (prove)\ngoal (1 subgoal):\n 1. last_message_hold_init ys (last_message xs) =\n    tl (last_message_hold (last_message xs # ys))", "apply (simp add: last_message_hold_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma last_message_last_message_hold[simp]: \"\n  last_message (last_message_hold xs) = last_message xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. last_message (last_message_hold xs) = last_message xs", "apply (induct xs rule: rev_induct, simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x xs.\n       last_message (last_message_hold xs) =\n       last_message xs \\<Longrightarrow>\n       last_message (last_message_hold (xs @ [x])) = last_message (xs @ [x])", "apply (simp add: last_message_hold_snoc last_message_append)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma last_message_hold_idem[simp]: \"\n  last_message_hold (last_message_hold xs) = last_message_hold xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. last_message_hold (last_message_hold xs) = last_message_hold xs", "by (simp add: list_eq_iff last_message_hold_nth last_message_hold_take)"], ["", "text \\<open>\n  Returns for each point in time the currently last non-empty message\n  of the current stream cycle of length \\<open>k\\<close>.\\<close>"], ["", "definition f_last_message_hold :: \"'a fstream_af \\<Rightarrow> nat \\<Rightarrow> 'a fstream_af\" (infixl \"\\<longmapsto>\\<^sub>f\" 100)\n  where \"f_last_message_hold xs k \\<equiv> concat (map last_message_hold (list_slice2 xs k))\""], ["", "definition i_last_message_hold :: \"'a istream_af \\<Rightarrow> nat \\<Rightarrow> 'a istream_af\" (infixl \"\\<longmapsto>\\<^sub>i\" 100)\n  where \"i_last_message_hold f k \\<equiv> \\<lambda>n. last_message (f \\<Up> (n - n mod k) \\<Down> Suc (n mod k))\""], ["", "notation\n  f_last_message_hold  (infixl \"\\<longmapsto>\" 100) and\n  i_last_message_hold  (infixl \"\\<longmapsto>\" 100)"], ["", "lemma f_last_message_hold_0[simp]: \"xs \\<longmapsto>\\<^sub>f 0 = last_message_hold xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. xs \\<longmapsto> 0 = last_message_hold xs", "by (simp add: f_last_message_hold_def list_slice2_0)"], ["", "lemma f_last_message_hold_1[simp]: \"xs \\<longmapsto>\\<^sub>f (Suc 0) = xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. xs \\<longmapsto> Suc 0 = xs", "apply (simp add: f_last_message_hold_def list_slice2_1)"], ["proof (prove)\ngoal (1 subgoal):\n 1. concat (map (last_message_hold \\<circ> (\\<lambda>x. [x])) xs) = xs", "apply (induct xs, simp+)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma f_last_message_hold_Nil[simp]: \"[] \\<longmapsto>\\<^sub>f k = []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. [] \\<longmapsto> k = []", "by (simp add: f_last_message_hold_def list_slice2_Nil)"], ["", "lemma f_last_message_hold_length[simp]: \"length (xs \\<longmapsto>\\<^sub>f k) = length xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length (xs \\<longmapsto> k) = length xs", "apply (case_tac \"k = 0\", simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. k \\<noteq> 0 \\<Longrightarrow> length (xs \\<longmapsto> k) = length xs", "apply (simp add: f_last_message_hold_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < k \\<Longrightarrow>\n    length (concat (map last_message_hold (list_slice2 xs k))) = length xs", "apply (induct xs rule: append_constant_length_induct[of k])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>ys.\n       \\<lbrakk>k = 0 \\<or> length ys < k; 0 < k\\<rbrakk>\n       \\<Longrightarrow> length\n                          (concat\n                            (map last_message_hold (list_slice2 ys k))) =\n                         length ys\n 2. \\<And>xs ys.\n       \\<lbrakk>length xs = k;\n        0 < k \\<Longrightarrow>\n        length (concat (map last_message_hold (list_slice2 ys k))) =\n        length ys;\n        0 < k\\<rbrakk>\n       \\<Longrightarrow> length\n                          (concat\n                            (map last_message_hold\n                              (list_slice2 (xs @ ys) k))) =\n                         length (xs @ ys)", "apply (simp add: list_slice2_le)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xs ys.\n       \\<lbrakk>length xs = k;\n        0 < k \\<Longrightarrow>\n        length (concat (map last_message_hold (list_slice2 ys k))) =\n        length ys;\n        0 < k\\<rbrakk>\n       \\<Longrightarrow> length\n                          (concat\n                            (map last_message_hold\n                              (list_slice2 (xs @ ys) k))) =\n                         length (xs @ ys)", "apply (simp add: list_slice2_append_mod list_slice2_mod_0 list_slice_div_eq_1)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma f_last_message_hold_le: \"length xs \\<le> k \\<Longrightarrow> xs \\<longmapsto>\\<^sub>f k = last_message_hold xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length xs \\<le> k \\<Longrightarrow>\n    xs \\<longmapsto> k = last_message_hold xs", "by (simp add: f_last_message_hold_def list_slice2_le)"], ["", "lemma f_last_message_hold_append_mult: \"\n  length xs = m * k \\<Longrightarrow> (xs @ ys) \\<longmapsto>\\<^sub>f k = xs \\<longmapsto>\\<^sub>f k @ (ys \\<longmapsto>\\<^sub>f k)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length xs = m * k \\<Longrightarrow>\n    (xs @ ys) \\<longmapsto> k = xs \\<longmapsto> k @ ys \\<longmapsto> k", "by (simp add: f_last_message_hold_def list_slice2_append_mod)"], ["", "lemma f_last_message_hold_append_mod: \"\n  length xs mod k = 0 \\<Longrightarrow> (xs @ ys) \\<longmapsto>\\<^sub>f k = xs \\<longmapsto>\\<^sub>f k @ (ys \\<longmapsto>\\<^sub>f k)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length xs mod k = 0 \\<Longrightarrow>\n    (xs @ ys) \\<longmapsto> k = xs \\<longmapsto> k @ ys \\<longmapsto> k", "by (simp add: f_last_message_hold_def list_slice2_append_mod)"], ["", "lemma f_last_message_hold_nth[rule_format]: \"\n  \\<forall>n. n < length xs \\<longrightarrow> xs \\<longmapsto>\\<^sub>f k ! n = last_message (xs \\<up> (n div k * k) \\<down> Suc (n mod k))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>n<length xs.\n       xs \\<longmapsto> k ! n =\n       last_message (xs \\<up> (n div k * k) \\<down> Suc (n mod k))", "apply (case_tac \"k = 0\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. k = 0 \\<Longrightarrow>\n    \\<forall>n<length xs.\n       xs \\<longmapsto> k ! n =\n       last_message (xs \\<up> (n div k * k) \\<down> Suc (n mod k))\n 2. k \\<noteq> 0 \\<Longrightarrow>\n    \\<forall>n<length xs.\n       xs \\<longmapsto> k ! n =\n       last_message (xs \\<up> (n div k * k) \\<down> Suc (n mod k))", "apply (simp add: last_message_hold_nth)"], ["proof (prove)\ngoal (1 subgoal):\n 1. k \\<noteq> 0 \\<Longrightarrow>\n    \\<forall>n<length xs.\n       xs \\<longmapsto> k ! n =\n       last_message (xs \\<up> (n div k * k) \\<down> Suc (n mod k))", "apply (induct xs rule: append_constant_length_induct[of k])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>ys.\n       \\<lbrakk>k = 0 \\<or> length ys < k; k \\<noteq> 0\\<rbrakk>\n       \\<Longrightarrow> \\<forall>n<length ys.\n                            ys \\<longmapsto> k ! n =\n                            last_message\n                             (ys \\<up> (n div k * k) \\<down> Suc (n mod k))\n 2. \\<And>xs ys.\n       \\<lbrakk>length xs = k;\n        k \\<noteq> 0 \\<Longrightarrow>\n        \\<forall>n<length ys.\n           ys \\<longmapsto> k ! n =\n           last_message (ys \\<up> (n div k * k) \\<down> Suc (n mod k));\n        k \\<noteq> 0\\<rbrakk>\n       \\<Longrightarrow> \\<forall>n<length (xs @ ys).\n                            (xs @ ys) \\<longmapsto> k ! n =\n                            last_message\n                             ((xs @ ys) \\<up> (n div k * k) \\<down>\n                              Suc (n mod k))", "apply (simp add: f_last_message_hold_def list_slice2_le last_message_hold_nth)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xs ys.\n       \\<lbrakk>length xs = k;\n        k \\<noteq> 0 \\<Longrightarrow>\n        \\<forall>n<length ys.\n           ys \\<longmapsto> k ! n =\n           last_message (ys \\<up> (n div k * k) \\<down> Suc (n mod k));\n        k \\<noteq> 0\\<rbrakk>\n       \\<Longrightarrow> \\<forall>n<length (xs @ ys).\n                            (xs @ ys) \\<longmapsto> k ! n =\n                            last_message\n                             ((xs @ ys) \\<up> (n div k * k) \\<down>\n                              Suc (n mod k))", "apply (simp add: f_last_message_hold_append_mod nth_append)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xs ys.\n       \\<lbrakk>length xs = k;\n        \\<forall>n<length ys.\n           ys \\<longmapsto> k ! n =\n           last_message (ys \\<up> (n div k * k) \\<down> Suc (n mod k));\n        0 < k\\<rbrakk>\n       \\<Longrightarrow> \\<forall>n.\n                            (n < k \\<longrightarrow>\n                             xs \\<longmapsto> k ! n =\n                             last_message (xs \\<down> Suc n)) \\<and>\n                            (\\<not> n < k \\<longrightarrow>\n                             n < k + length ys \\<longrightarrow>\n                             last_message\n                              (ys \\<up> ((n - k) div k * k) \\<down>\n                               Suc ((n - k) mod k)) =\n                             last_message\n                              (xs \\<up> (n div k * k) \\<down>\n                               Suc (n mod k) @\n                               ys \\<up> (n div k * k - k) \\<down>\n                               (Suc (n mod k) - (k - n div k * k))))", "apply (intro allI conjI impI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>xs ys n.\n       \\<lbrakk>length xs = k;\n        \\<forall>n<length ys.\n           ys \\<longmapsto> k ! n =\n           last_message (ys \\<up> (n div k * k) \\<down> Suc (n mod k));\n        0 < k; n < k\\<rbrakk>\n       \\<Longrightarrow> xs \\<longmapsto> k ! n =\n                         last_message (xs \\<down> Suc n)\n 2. \\<And>xs ys n.\n       \\<lbrakk>length xs = k;\n        \\<forall>n<length ys.\n           ys \\<longmapsto> k ! n =\n           last_message (ys \\<up> (n div k * k) \\<down> Suc (n mod k));\n        0 < k; \\<not> n < k; n < k + length ys\\<rbrakk>\n       \\<Longrightarrow> last_message\n                          (ys \\<up> ((n - k) div k * k) \\<down>\n                           Suc ((n - k) mod k)) =\n                         last_message\n                          (xs \\<up> (n div k * k) \\<down> Suc (n mod k) @\n                           ys \\<up> (n div k * k - k) \\<down>\n                           (Suc (n mod k) - (k - n div k * k)))", "apply (simp add: f_last_message_hold_def list_slice2_mod_0 list_slice_div_eq_1 last_message_hold_nth)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xs ys n.\n       \\<lbrakk>length xs = k;\n        \\<forall>n<length ys.\n           ys \\<longmapsto> k ! n =\n           last_message (ys \\<up> (n div k * k) \\<down> Suc (n mod k));\n        0 < k; \\<not> n < k; n < k + length ys\\<rbrakk>\n       \\<Longrightarrow> last_message\n                          (ys \\<up> ((n - k) div k * k) \\<down>\n                           Suc ((n - k) mod k)) =\n                         last_message\n                          (xs \\<up> (n div k * k) \\<down> Suc (n mod k) @\n                           ys \\<up> (n div k * k - k) \\<down>\n                           (Suc (n mod k) - (k - n div k * k)))", "apply (case_tac \"n < k\", simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xs ys n.\n       \\<lbrakk>length xs = k;\n        \\<forall>n<length ys.\n           ys \\<longmapsto> k ! n =\n           last_message (ys \\<up> (n div k * k) \\<down> Suc (n mod k));\n        0 < k; \\<not> n < k; n < k + length ys; \\<not> n < k\\<rbrakk>\n       \\<Longrightarrow> last_message\n                          (ys \\<up> ((n - k) div k * k) \\<down>\n                           Suc ((n - k) mod k)) =\n                         last_message\n                          (xs \\<up> (n div k * k) \\<down> Suc (n mod k) @\n                           ys \\<up> (n div k * k - k) \\<down>\n                           (Suc (n mod k) - (k - n div k * k)))", "apply (simp add: linorder_not_less last_message_append div_mult_cancel)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xs ys n.\n       \\<lbrakk>length xs = k;\n        \\<forall>n<length ys.\n           ys \\<longmapsto> k ! n =\n           last_message (ys \\<up> (n - n mod k) \\<down> Suc (n mod k));\n        0 < k; n < k + length ys; k \\<le> n\\<rbrakk>\n       \\<Longrightarrow> (last_message\n                           (ys \\<up> (n - (n mod k + k)) \\<down>\n                            (Suc (n mod k) - (k + n mod k - n))) =\n                          NoMsg \\<longrightarrow>\n                          last_message\n                           (ys \\<up> (n - (k + (n - k) mod k)) \\<down>\n                            Suc ((n - k) mod k)) =\n                          last_message (xs \\<up> (n - n mod k))) \\<and>\n                         (last_message\n                           (ys \\<up> (n - (n mod k + k)) \\<down>\n                            (Suc (n mod k) - (k + n mod k - n))) \\<noteq>\n                          NoMsg \\<longrightarrow>\n                          last_message\n                           (ys \\<up> (n - (k + (n - k) mod k)) \\<down>\n                            Suc ((n - k) mod k)) =\n                          last_message\n                           (ys \\<up> (n - (n mod k + k)) \\<down>\n                            (Suc (n mod k) - (k + n mod k - n))))", "apply (subgoal_tac \"k + n mod k \\<le> n\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>xs ys n.\n       \\<lbrakk>length xs = k;\n        \\<forall>n<length ys.\n           ys \\<longmapsto> k ! n =\n           last_message (ys \\<up> (n - n mod k) \\<down> Suc (n mod k));\n        0 < k; n < k + length ys; k \\<le> n; k + n mod k \\<le> n\\<rbrakk>\n       \\<Longrightarrow> (last_message\n                           (ys \\<up> (n - (n mod k + k)) \\<down>\n                            (Suc (n mod k) - (k + n mod k - n))) =\n                          NoMsg \\<longrightarrow>\n                          last_message\n                           (ys \\<up> (n - (k + (n - k) mod k)) \\<down>\n                            Suc ((n - k) mod k)) =\n                          last_message (xs \\<up> (n - n mod k))) \\<and>\n                         (last_message\n                           (ys \\<up> (n - (n mod k + k)) \\<down>\n                            (Suc (n mod k) - (k + n mod k - n))) \\<noteq>\n                          NoMsg \\<longrightarrow>\n                          last_message\n                           (ys \\<up> (n - (k + (n - k) mod k)) \\<down>\n                            Suc ((n - k) mod k)) =\n                          last_message\n                           (ys \\<up> (n - (n mod k + k)) \\<down>\n                            (Suc (n mod k) - (k + n mod k - n))))\n 2. \\<And>xs ys n.\n       \\<lbrakk>length xs = k;\n        \\<forall>n<length ys.\n           ys \\<longmapsto> k ! n =\n           last_message (ys \\<up> (n - n mod k) \\<down> Suc (n mod k));\n        0 < k; n < k + length ys; k \\<le> n\\<rbrakk>\n       \\<Longrightarrow> k + n mod k \\<le> n", "prefer 2"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>xs ys n.\n       \\<lbrakk>length xs = k;\n        \\<forall>n<length ys.\n           ys \\<longmapsto> k ! n =\n           last_message (ys \\<up> (n - n mod k) \\<down> Suc (n mod k));\n        0 < k; n < k + length ys; k \\<le> n\\<rbrakk>\n       \\<Longrightarrow> k + n mod k \\<le> n\n 2. \\<And>xs ys n.\n       \\<lbrakk>length xs = k;\n        \\<forall>n<length ys.\n           ys \\<longmapsto> k ! n =\n           last_message (ys \\<up> (n - n mod k) \\<down> Suc (n mod k));\n        0 < k; n < k + length ys; k \\<le> n; k + n mod k \\<le> n\\<rbrakk>\n       \\<Longrightarrow> (last_message\n                           (ys \\<up> (n - (n mod k + k)) \\<down>\n                            (Suc (n mod k) - (k + n mod k - n))) =\n                          NoMsg \\<longrightarrow>\n                          last_message\n                           (ys \\<up> (n - (k + (n - k) mod k)) \\<down>\n                            Suc ((n - k) mod k)) =\n                          last_message (xs \\<up> (n - n mod k))) \\<and>\n                         (last_message\n                           (ys \\<up> (n - (n mod k + k)) \\<down>\n                            (Suc (n mod k) - (k + n mod k - n))) \\<noteq>\n                          NoMsg \\<longrightarrow>\n                          last_message\n                           (ys \\<up> (n - (k + (n - k) mod k)) \\<down>\n                            Suc ((n - k) mod k)) =\n                          last_message\n                           (ys \\<up> (n - (n mod k + k)) \\<down>\n                            (Suc (n mod k) - (k + n mod k - n))))", "apply (drule div_le_mono[of _ _ k], drule mult_le_mono1[of _ _ k])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>xs ys n.\n       \\<lbrakk>length xs = k;\n        \\<forall>n<length ys.\n           ys \\<longmapsto> k ! n =\n           last_message (ys \\<up> (n - n mod k) \\<down> Suc (n mod k));\n        0 < k; n < k + length ys; k div k * k \\<le> n div k * k\\<rbrakk>\n       \\<Longrightarrow> k + n mod k \\<le> n\n 2. \\<And>xs ys n.\n       \\<lbrakk>length xs = k;\n        \\<forall>n<length ys.\n           ys \\<longmapsto> k ! n =\n           last_message (ys \\<up> (n - n mod k) \\<down> Suc (n mod k));\n        0 < k; n < k + length ys; k \\<le> n; k + n mod k \\<le> n\\<rbrakk>\n       \\<Longrightarrow> (last_message\n                           (ys \\<up> (n - (n mod k + k)) \\<down>\n                            (Suc (n mod k) - (k + n mod k - n))) =\n                          NoMsg \\<longrightarrow>\n                          last_message\n                           (ys \\<up> (n - (k + (n - k) mod k)) \\<down>\n                            Suc ((n - k) mod k)) =\n                          last_message (xs \\<up> (n - n mod k))) \\<and>\n                         (last_message\n                           (ys \\<up> (n - (n mod k + k)) \\<down>\n                            (Suc (n mod k) - (k + n mod k - n))) \\<noteq>\n                          NoMsg \\<longrightarrow>\n                          last_message\n                           (ys \\<up> (n - (k + (n - k) mod k)) \\<down>\n                            Suc ((n - k) mod k)) =\n                          last_message\n                           (ys \\<up> (n - (n mod k + k)) \\<down>\n                            (Suc (n mod k) - (k + n mod k - n))))", "apply (simp add: div_mult_cancel)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xs ys n.\n       \\<lbrakk>length xs = k;\n        \\<forall>n<length ys.\n           ys \\<longmapsto> k ! n =\n           last_message (ys \\<up> (n - n mod k) \\<down> Suc (n mod k));\n        0 < k; n < k + length ys; k \\<le> n; k + n mod k \\<le> n\\<rbrakk>\n       \\<Longrightarrow> (last_message\n                           (ys \\<up> (n - (n mod k + k)) \\<down>\n                            (Suc (n mod k) - (k + n mod k - n))) =\n                          NoMsg \\<longrightarrow>\n                          last_message\n                           (ys \\<up> (n - (k + (n - k) mod k)) \\<down>\n                            Suc ((n - k) mod k)) =\n                          last_message (xs \\<up> (n - n mod k))) \\<and>\n                         (last_message\n                           (ys \\<up> (n - (n mod k + k)) \\<down>\n                            (Suc (n mod k) - (k + n mod k - n))) \\<noteq>\n                          NoMsg \\<longrightarrow>\n                          last_message\n                           (ys \\<up> (n - (k + (n - k) mod k)) \\<down>\n                            Suc ((n - k) mod k)) =\n                          last_message\n                           (ys \\<up> (n - (n mod k + k)) \\<down>\n                            (Suc (n mod k) - (k + n mod k - n))))", "apply (simp add: mod_diff_self2 add.commute[of k])"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma f_last_message_hold_take: \"xs \\<down> n \\<longmapsto>\\<^sub>f k = xs \\<longmapsto>\\<^sub>f k \\<down> n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. xs \\<down> n \\<longmapsto> k = xs \\<longmapsto> k \\<down> n", "by (clarsimp simp: list_eq_iff f_last_message_hold_nth drop_take div_mult_cancel min_eqL)"], ["", "lemma f_last_message_hold_drop_mult: \"\n  xs \\<up> (n * k) \\<longmapsto>\\<^sub>f k = xs \\<longmapsto>\\<^sub>f k \\<up> (n * k)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. xs \\<up> (n * k) \\<longmapsto> k = xs \\<longmapsto> k \\<up> (n * k)", "apply (rule subst[OF append_take_drop_id, of _ \"n * k\" xs])"], ["proof (prove)\ngoal (1 subgoal):\n 1. (xs \\<down> (n * k) @ xs \\<up> (n * k)) \\<up> (n * k) \\<longmapsto> k =\n    (xs \\<down> (n * k) @ xs \\<up> (n * k)) \\<longmapsto> k \\<up> (n * k)", "apply (case_tac \"length xs \\<le> n * k\", simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> length xs \\<le> n * k \\<Longrightarrow>\n    (xs \\<down> (n * k) @ xs \\<up> (n * k)) \\<up> (n * k) \\<longmapsto> k =\n    (xs \\<down> (n * k) @ xs \\<up> (n * k)) \\<longmapsto> k \\<up> (n * k)", "apply (simp add: f_last_message_hold_append_mod min_eqR del: append_take_drop_id)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma f_last_message_hold_drop_mod: \"\n  n mod k = 0 \\<Longrightarrow> xs \\<up> n \\<longmapsto>\\<^sub>f k = xs \\<longmapsto>\\<^sub>f k \\<up> n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. n mod k = 0 \\<Longrightarrow>\n    xs \\<up> n \\<longmapsto> k = xs \\<longmapsto> k \\<up> n", "by (clarsimp simp: mult.commute[of k] f_last_message_hold_drop_mult elim!: dvdE)"], ["", "lemma f_last_message_hold_idem: \"xs \\<longmapsto>\\<^sub>f k \\<longmapsto>\\<^sub>f k = xs \\<longmapsto>\\<^sub>f k\""], ["proof (prove)\ngoal (1 subgoal):\n 1. xs \\<longmapsto> k \\<longmapsto> k = xs \\<longmapsto> k", "apply (case_tac \"k = 0\", simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. k \\<noteq> 0 \\<Longrightarrow>\n    xs \\<longmapsto> k \\<longmapsto> k = xs \\<longmapsto> k", "apply (simp add: list_eq_iff f_last_message_hold_nth f_last_message_hold_drop_mod[symmetric] f_last_message_hold_take[symmetric])"], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < k \\<Longrightarrow>\n    \\<forall>i<length xs.\n       last_message\n        (xs \\<up> (i div k * k) \\<down> Suc (i mod k) \\<longmapsto> k) =\n       last_message (xs \\<up> (i div k * k) \\<down> Suc (i mod k))", "apply (simp add: f_last_message_hold_le min.coboundedI2 Suc_mod_le_divisor)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma f_shrink_nth_eq_f_last_message_hold_last: \"\n  n < length xs div k \\<Longrightarrow> xs \\<div>\\<^sub>f k ! n = last (xs \\<longmapsto>\\<^sub>f k \\<up> (n * k) \\<down> k)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. n < length xs div k \\<Longrightarrow>\n    xs \\<div> k ! n = last (xs \\<longmapsto> k \\<up> (n * k) \\<down> k)", "apply (case_tac \"k = 0\", simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>n < length xs div k; k \\<noteq> 0\\<rbrakk>\n    \\<Longrightarrow> xs \\<div> k ! n =\n                      last (xs \\<longmapsto> k \\<up> (n * k) \\<down> k)", "apply (case_tac \"xs = []\", simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>n < length xs div k; k \\<noteq> 0; xs \\<noteq> []\\<rbrakk>\n    \\<Longrightarrow> xs \\<div> k ! n =\n                      last (xs \\<longmapsto> k \\<up> (n * k) \\<down> k)", "apply (simp add: f_shrink_nth f_last_message_hold_drop_mult[symmetric] f_last_message_hold_take[symmetric])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>n < length xs div k; 0 < k; xs \\<noteq> []\\<rbrakk>\n    \\<Longrightarrow> last_message (xs \\<up> (n * k) \\<down> k) =\n                      last (xs \\<up> (n * k) \\<down> k \\<longmapsto> k)", "apply (drule less_div_imp_mult_add_divisor_le)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>0 < k; xs \\<noteq> []; n * k + k \\<le> length xs\\<rbrakk>\n    \\<Longrightarrow> last_message (xs \\<up> (n * k) \\<down> k) =\n                      last (xs \\<up> (n * k) \\<down> k \\<longmapsto> k)", "apply (simp add: f_last_message_hold_le last_message_hold_last)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma f_shrink_nth_eq_f_last_message_hold_nth: \"\n  n < length xs div k \\<Longrightarrow> xs \\<div>\\<^sub>f k ! n = xs \\<longmapsto>\\<^sub>f k ! (n * k + k - Suc 0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. n < length xs div k \\<Longrightarrow>\n    xs \\<div> k ! n = xs \\<longmapsto> k ! (n * k + k - Suc 0)", "apply (case_tac \"k = 0\", simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>n < length xs div k; k \\<noteq> 0\\<rbrakk>\n    \\<Longrightarrow> xs \\<div> k ! n =\n                      xs \\<longmapsto> k ! (n * k + k - Suc 0)", "apply (simp add: f_shrink_nth_eq_f_last_message_hold_last)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>n < length xs div k; 0 < k\\<rbrakk>\n    \\<Longrightarrow> last (xs \\<longmapsto> k \\<up> (n * k) \\<down> k) =\n                      xs \\<longmapsto> k ! (n * k + k - Suc 0)", "apply (frule less_div_imp_mult_add_divisor_le)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>n < length xs div k; 0 < k; n * k + k \\<le> length xs\\<rbrakk>\n    \\<Longrightarrow> last (xs \\<longmapsto> k \\<up> (n * k) \\<down> k) =\n                      xs \\<longmapsto> k ! (n * k + k - Suc 0)", "apply (simp add: last_nth min_eqR)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma last_message_f_last_message_hold: \"\n  last_message (xs \\<longmapsto>\\<^sub>f k) = last_message xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. last_message (xs \\<longmapsto> k) = last_message xs", "apply (case_tac \"k = 0\", simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. k \\<noteq> 0 \\<Longrightarrow>\n    last_message (xs \\<longmapsto> k) = last_message xs", "apply (induct xs rule: append_constant_length_induct[of k])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>ys.\n       \\<lbrakk>k = 0 \\<or> length ys < k; k \\<noteq> 0\\<rbrakk>\n       \\<Longrightarrow> last_message (ys \\<longmapsto> k) = last_message ys\n 2. \\<And>xs ys.\n       \\<lbrakk>length xs = k;\n        k \\<noteq> 0 \\<Longrightarrow>\n        last_message (ys \\<longmapsto> k) = last_message ys;\n        k \\<noteq> 0\\<rbrakk>\n       \\<Longrightarrow> last_message ((xs @ ys) \\<longmapsto> k) =\n                         last_message (xs @ ys)", "apply (simp add: f_last_message_hold_le)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xs ys.\n       \\<lbrakk>length xs = k;\n        k \\<noteq> 0 \\<Longrightarrow>\n        last_message (ys \\<longmapsto> k) = last_message ys;\n        k \\<noteq> 0\\<rbrakk>\n       \\<Longrightarrow> last_message ((xs @ ys) \\<longmapsto> k) =\n                         last_message (xs @ ys)", "apply (simp add: f_last_message_hold_append_mult last_message_append f_last_message_hold_le)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma i_last_message_hold_0[simp]: \"f \\<longmapsto>\\<^sub>i 0 = (\\<lambda>n. last_message (f \\<Down> Suc n))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f \\<longmapsto> 0 = (\\<lambda>n. last_message (f \\<Down> Suc n))", "by (simp add: i_last_message_hold_def)"], ["", "lemma i_last_message_hold_1[simp]: \"f \\<longmapsto>\\<^sub>i Suc 0 = f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f \\<longmapsto> Suc 0 = f", "by (simp add: i_last_message_hold_def i_drop_i_take_1)"], ["", "lemma i_last_message_hold_nth: \"\n  (f \\<longmapsto>\\<^sub>i k) n = last_message (f \\<Up> (n - n mod k) \\<Down> Suc (n mod k))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (f \\<longmapsto> k) n =\n    last_message (f \\<Up> (n - n mod k) \\<Down> Suc (n mod k))", "by (simp add: i_last_message_hold_def)"], ["", "lemma i_last_message_hold_i_append_mult: \"\n  length xs = m * k \\<Longrightarrow> (xs \\<frown> f) \\<longmapsto>\\<^sub>i k = (xs \\<longmapsto>\\<^sub>f k) \\<frown> (f \\<longmapsto>\\<^sub>i k)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length xs = m * k \\<Longrightarrow>\n    (xs \\<frown> f) \\<longmapsto> k =\n    xs \\<longmapsto> k \\<frown> f \\<longmapsto> k", "apply (case_tac \"k = 0\", simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>length xs = m * k; k \\<noteq> 0\\<rbrakk>\n    \\<Longrightarrow> (xs \\<frown> f) \\<longmapsto> k =\n                      xs \\<longmapsto> k \\<frown> f \\<longmapsto> k", "apply (clarsimp simp: ilist_eq_iff i_last_message_hold_nth i_append_nth f_last_message_hold_nth div_mult_cancel linorder_not_less)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>length xs = m * k; 0 < k; m * k \\<le> x\\<rbrakk>\n       \\<Longrightarrow> last_message\n                          (xs \\<up> (x - x mod k) @\n                           f \\<Up> (x - (x mod k + m * k)) \\<Down>\n                           (Suc (x mod k) - (m * k + x mod k - x))) =\n                         last_message\n                          (f \\<Up> (x - (m * k + (x - m * k) mod k)) \\<Down>\n                           Suc ((x - m * k) mod k))", "apply (subgoal_tac \"length xs \\<le> x - x mod k\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>length xs = m * k; 0 < k; m * k \\<le> x;\n        length xs \\<le> x - x mod k\\<rbrakk>\n       \\<Longrightarrow> last_message\n                          (xs \\<up> (x - x mod k) @\n                           f \\<Up> (x - (x mod k + m * k)) \\<Down>\n                           (Suc (x mod k) - (m * k + x mod k - x))) =\n                         last_message\n                          (f \\<Up> (x - (m * k + (x - m * k) mod k)) \\<Down>\n                           Suc ((x - m * k) mod k))\n 2. \\<And>x.\n       \\<lbrakk>length xs = m * k; 0 < k; m * k \\<le> x\\<rbrakk>\n       \\<Longrightarrow> length xs \\<le> x - x mod k", "prefer 2"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>length xs = m * k; 0 < k; m * k \\<le> x\\<rbrakk>\n       \\<Longrightarrow> length xs \\<le> x - x mod k\n 2. \\<And>x.\n       \\<lbrakk>length xs = m * k; 0 < k; m * k \\<le> x;\n        length xs \\<le> x - x mod k\\<rbrakk>\n       \\<Longrightarrow> last_message\n                          (xs \\<up> (x - x mod k) @\n                           f \\<Up> (x - (x mod k + m * k)) \\<Down>\n                           (Suc (x mod k) - (m * k + x mod k - x))) =\n                         last_message\n                          (f \\<Up> (x - (m * k + (x - m * k) mod k)) \\<Down>\n                           Suc ((x - m * k) mod k))", "apply (drule div_le_mono[of _ _ k])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>length xs = m * k; 0 < k; m * k div k \\<le> x div k\\<rbrakk>\n       \\<Longrightarrow> length xs \\<le> x - x mod k\n 2. \\<And>x.\n       \\<lbrakk>length xs = m * k; 0 < k; m * k \\<le> x;\n        length xs \\<le> x - x mod k\\<rbrakk>\n       \\<Longrightarrow> last_message\n                          (xs \\<up> (x - x mod k) @\n                           f \\<Up> (x - (x mod k + m * k)) \\<Down>\n                           (Suc (x mod k) - (m * k + x mod k - x))) =\n                         last_message\n                          (f \\<Up> (x - (m * k + (x - m * k) mod k)) \\<Down>\n                           Suc ((x - m * k) mod k))", "apply (simp add: div_mult_cancel[symmetric])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>length xs = m * k; 0 < k; m * k \\<le> x;\n        length xs \\<le> x - x mod k\\<rbrakk>\n       \\<Longrightarrow> last_message\n                          (xs \\<up> (x - x mod k) @\n                           f \\<Up> (x - (x mod k + m * k)) \\<Down>\n                           (Suc (x mod k) - (m * k + x mod k - x))) =\n                         last_message\n                          (f \\<Up> (x - (m * k + (x - m * k) mod k)) \\<Down>\n                           Suc ((x - m * k) mod k))", "apply (simp add: mod_diff_mult_self1)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>length xs = m * k; 0 < k; m * k \\<le> x;\n        m * k \\<le> x - x mod k\\<rbrakk>\n       \\<Longrightarrow> last_message\n                          (f \\<Up> (x - (x mod k + m * k)) \\<Down>\n                           (Suc (x mod k) - (m * k + x mod k - x))) =\n                         last_message\n                          (f \\<Up> (x - (m * k + x mod k)) \\<Down>\n                           Suc (x mod k))", "apply (drule_tac j=\"x - x mod k\" and k=\"x mod k\" in add_le_mono1)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>length xs = m * k; 0 < k; m * k \\<le> x;\n        m * k + x mod k \\<le> x - x mod k + x mod k\\<rbrakk>\n       \\<Longrightarrow> last_message\n                          (f \\<Up> (x - (x mod k + m * k)) \\<Down>\n                           (Suc (x mod k) - (m * k + x mod k - x))) =\n                         last_message\n                          (f \\<Up> (x - (m * k + x mod k)) \\<Down>\n                           Suc (x mod k))", "apply (simp add: add.commute[of \"m * k\"])"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma i_last_message_hold_i_append_mod: \"\n  length xs mod k = 0 \\<Longrightarrow> (xs \\<frown> f) \\<longmapsto>\\<^sub>i k = (xs \\<longmapsto>\\<^sub>f k) \\<frown> (f \\<longmapsto>\\<^sub>i k)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length xs mod k = 0 \\<Longrightarrow>\n    (xs \\<frown> f) \\<longmapsto> k =\n    xs \\<longmapsto> k \\<frown> f \\<longmapsto> k", "by (clarsimp simp: mult.commute[of k] elim!: dvdE, rule i_last_message_hold_i_append_mult)"], ["", "lemma i_last_message_hold_i_take: \"f \\<Down> n \\<longmapsto>\\<^sub>f k = (f \\<longmapsto>\\<^sub>i k) \\<Down> n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f \\<Down> n \\<longmapsto> k = f \\<longmapsto> k \\<Down> n", "by (simp add: list_eq_iff f_last_message_hold_nth i_last_message_hold_nth div_mult_cancel i_take_drop min_eqR)"], ["", "lemma i_last_message_hold_i_drop_mult: \"\n  f \\<Up> (n * k) \\<longmapsto>\\<^sub>i k = f \\<longmapsto>\\<^sub>i k \\<Up> (n * k)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f \\<Up> (n * k) \\<longmapsto> k = f \\<longmapsto> k \\<Up> (n * k)", "by (simp add: ilist_eq_iff i_last_message_hold_nth)"], ["", "lemma i_last_message_hold_i_drop_mod: \"\n  n mod k = 0 \\<Longrightarrow> f \\<Up> n \\<longmapsto>\\<^sub>i k = f \\<longmapsto>\\<^sub>i k \\<Up> n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. n mod k = 0 \\<Longrightarrow>\n    f \\<Up> n \\<longmapsto> k = f \\<longmapsto> k \\<Up> n", "by (clarsimp simp: mult.commute[of k] elim!: dvdE, rule i_last_message_hold_i_drop_mult)"], ["", "lemma i_last_message_hold_idem: \"f \\<longmapsto>\\<^sub>i k \\<longmapsto>\\<^sub>i k = f \\<longmapsto>\\<^sub>i k\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f \\<longmapsto> k \\<longmapsto> k = f \\<longmapsto> k", "by (simp add: ilist_eq_iff i_last_message_hold_nth minus_mod_eq_mult_div i_last_message_hold_i_drop_mod[symmetric] i_last_message_hold_i_take[symmetric] last_message_f_last_message_hold)"], ["", "lemma i_shrink_nth_eq_i_last_message_hold_nth: \"\n  0 < k \\<Longrightarrow> (f \\<div>\\<^sub>i k) n = (f \\<longmapsto>\\<^sub>i k) (n * k + k - Suc 0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < k \\<Longrightarrow>\n    (f \\<div> k) n = (f \\<longmapsto> k) (n * k + k - Suc 0)", "apply (simp add: i_shrink_nth i_last_message_hold_nth)"], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < k \\<Longrightarrow>\n    last_message (f \\<Up> (n * k) \\<Down> k) =\n    last_message\n     (f \\<Up> (n * k + k - Suc ((n * k + k - Suc 0) mod k)) \\<Down>\n      Suc ((n * k + k - Suc 0) mod k))", "apply (simp add: diff_add_assoc del: add_diff_assoc)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma i_shrink_nth_eq_i_last_message_hold_last: \"\n  0 < k \\<Longrightarrow> (f \\<div>\\<^sub>i k) n = last (f \\<longmapsto>\\<^sub>i k \\<Up> (n * k) \\<Down> k)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < k \\<Longrightarrow>\n    (f \\<div> k) n = last (f \\<longmapsto> k \\<Up> (n * k) \\<Down> k)", "by (simp add: last_nth i_shrink_nth_eq_i_last_message_hold_nth)"], ["", "subsubsection \\<open>Compressing lists\\<close>"], ["", "text \\<open>\n  Lists/Non-message streams\n  do not have to permit the empty message \\<open>\\<NoMsg>\\<close>\n  to be element.\n  Thus, they are compressed by factor @{term k}\n  by just aggregating every sequence of length k\n  to its last element.\\<close>"], ["", "definition f_shrink_last :: \"'a list \\<Rightarrow> nat \\<Rightarrow> 'a list\"   (infixl \"\\<div>\\<^bsub>fl\\<^esub>\" 100)\n  where \"f_shrink_last xs k \\<equiv> f_aggregate xs k last\""], ["", "definition i_shrink_last :: \"'a ilist \\<Rightarrow> nat \\<Rightarrow> 'a ilist\" (infixl \"\\<div>\\<^bsub>il\\<^esub>\" 100)\n  where \"i_shrink_last f k \\<equiv> i_aggregate f k last\""], ["", "notation\n  f_shrink_last  (infixl \"\\<div>\\<^sub>l\" 100) and\n  i_shrink_last  (infixl \"\\<div>\\<^sub>l\" 100)"], ["", "lemma f_shrink_last_0[simp]: \"xs \\<div>\\<^bsub>fl\\<^esub> 0 = []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. xs \\<div>\\<^sub>l 0 = []", "by (simp add: f_shrink_last_def f_aggregate_def list_slice_0)"], ["", "lemma f_shrink_last_1[simp]: \"xs \\<div>\\<^bsub>fl\\<^esub> Suc 0 = xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. xs \\<div>\\<^sub>l Suc 0 = xs", "by (simp add: f_shrink_last_def f_aggregate_1)"], ["", "lemma f_shrink_last_Nil[simp]: \"[] \\<div>\\<^bsub>fl\\<^esub> k = []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. [] \\<div>\\<^sub>l k = []", "by (simp add: f_shrink_last_def f_aggregate_def list_slice_Nil)"], ["", "lemma f_shrink_last_length: \"length (xs \\<div>\\<^bsub>fl\\<^esub> k) = length xs div k\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length (xs \\<div>\\<^sub>l k) = length xs div k", "by (simp add: f_shrink_last_def)"], ["", "lemma f_shrink_last_empty_conv: \"\n  0 < k \\<Longrightarrow> (xs \\<div>\\<^bsub>fl\\<^esub> k = []) = (length xs < k)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < k \\<Longrightarrow> (xs \\<div>\\<^sub>l k = []) = (length xs < k)", "by (simp add: f_shrink_last_def f_aggregate_empty_conv)"], ["", "lemma f_shrink_last_Cons: \"\n  \\<lbrakk> 0 < k;\n length xs = k \\<rbrakk> \\<Longrightarrow> (xs @ ys) \\<div>\\<^bsub>fl\\<^esub> k = last xs # (ys \\<div>\\<^bsub>fl\\<^esub> k)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>0 < k; length xs = k\\<rbrakk>\n    \\<Longrightarrow> (xs @ ys) \\<div>\\<^sub>l k =\n                      last xs # ys \\<div>\\<^sub>l k", "by (simp add: f_shrink_last_def f_aggregate_Cons)"], ["", "lemma f_shrink_last_one: \"\n  \\<lbrakk> 0 < k; length xs = k \\<rbrakk> \\<Longrightarrow> xs \\<div>\\<^bsub>fl\\<^esub> k = [last xs]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>0 < k; length xs = k\\<rbrakk>\n    \\<Longrightarrow> xs \\<div>\\<^sub>l k = [last xs]", "by (simp add: f_shrink_last_def f_aggregate_one)"], ["", "lemma f_shrink_last_eq_f_shrink_last_take: \"\n  xs \\<down> (length xs div k * k) \\<div>\\<^bsub>fl\\<^esub> k = xs \\<div>\\<^bsub>fl\\<^esub> k\""], ["proof (prove)\ngoal (1 subgoal):\n 1. xs \\<down> (length xs div k * k) \\<div>\\<^sub>l k = xs \\<div>\\<^sub>l k", "by (simp add: f_shrink_last_def f_aggregate_eq_f_aggregate_take)"], ["", "lemma f_shrink_last_nth: \"\n  n < length xs div k \\<Longrightarrow> (xs \\<div>\\<^bsub>fl\\<^esub> k) ! n = xs ! (n * k + k - Suc 0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. n < length xs div k \\<Longrightarrow>\n    xs \\<div>\\<^sub>l k ! n = xs ! (n * k + k - Suc 0)", "apply (case_tac \"k = 0\", simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>n < length xs div k; k \\<noteq> 0\\<rbrakk>\n    \\<Longrightarrow> xs \\<div>\\<^sub>l k ! n = xs ! (n * k + k - Suc 0)", "apply (frule less_div_imp_mult_add_divisor_le)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>n < length xs div k; k \\<noteq> 0;\n     n * k + k \\<le> length xs\\<rbrakk>\n    \\<Longrightarrow> xs \\<div>\\<^sub>l k ! n = xs ! (n * k + k - Suc 0)", "apply (simp add: f_shrink_last_def f_aggregate_nth last_take2)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "corollary f_shrink_last_nth': \"\n  n < length xs div k \\<Longrightarrow> (xs \\<div>\\<^bsub>fl\\<^esub> k) ! n = xs ! (Suc n * k - Suc 0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. n < length xs div k \\<Longrightarrow>\n    xs \\<div>\\<^sub>l k ! n = xs ! (Suc n * k - Suc 0)", "by (simp add: f_shrink_last_nth add.commute[of k])"], ["", "lemma f_shrink_last_hd: \"\n  \\<lbrakk> 0 < k; k \\<le> length xs \\<rbrakk> \\<Longrightarrow> hd (xs \\<div>\\<^bsub>fl\\<^esub> k) = xs ! (k - Suc 0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>0 < k; k \\<le> length xs\\<rbrakk>\n    \\<Longrightarrow> hd (xs \\<div>\\<^sub>l k) = xs ! (k - Suc 0)", "by (simp add: f_shrink_last_def f_aggregate_hd last_take2)"], ["", "lemma f_shrink_last_map: \"(map f xs) \\<div>\\<^bsub>fl\\<^esub> k = map f (xs \\<div>\\<^bsub>fl\\<^esub> k)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. map f xs \\<div>\\<^sub>l k = map f (xs \\<div>\\<^sub>l k)", "apply (case_tac \"k = 0\", simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. k \\<noteq> 0 \\<Longrightarrow>\n    map f xs \\<div>\\<^sub>l k = map f (xs \\<div>\\<^sub>l k)", "apply (clarsimp simp: list_eq_iff f_shrink_last_length)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i.\n       \\<lbrakk>0 < k; i < length xs div k\\<rbrakk>\n       \\<Longrightarrow> map f xs \\<div>\\<^sub>l k ! i =\n                         f (xs \\<div>\\<^sub>l k ! i)", "apply (frule less_div_imp_mult_add_divisor_le)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i.\n       \\<lbrakk>0 < k; i < length xs div k;\n        i * k + k \\<le> length xs\\<rbrakk>\n       \\<Longrightarrow> map f xs \\<div>\\<^sub>l k ! i =\n                         f (xs \\<div>\\<^sub>l k ! i)", "apply (simp add: f_shrink_last_nth)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma f_shrink_last_append_mod: \"\n  length xs mod k = 0 \\<Longrightarrow> (xs @ ys) \\<div>\\<^bsub>fl\\<^esub> k = xs \\<div>\\<^bsub>fl\\<^esub> k @ (ys \\<div>\\<^bsub>fl\\<^esub> k)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length xs mod k = 0 \\<Longrightarrow>\n    (xs @ ys) \\<div>\\<^sub>l k = xs \\<div>\\<^sub>l k @ ys \\<div>\\<^sub>l k", "by (simp add: f_shrink_last_def f_aggregate_append_mod)"], ["", "lemma f_shrink_last_append_mult: \"\n  length xs = m * k \\<Longrightarrow> (xs @ ys) \\<div>\\<^bsub>fl\\<^esub> k = xs \\<div>\\<^bsub>fl\\<^esub> k @ (ys \\<div>\\<^bsub>fl\\<^esub> k)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length xs = m * k \\<Longrightarrow>\n    (xs @ ys) \\<div>\\<^sub>l k = xs \\<div>\\<^sub>l k @ ys \\<div>\\<^sub>l k", "by (unfold f_shrink_last_def, rule f_aggregate_append_mult)"], ["", "lemma f_shrink_last_snoc: \"\n  \\<lbrakk> 0 < k; length ys = k; length xs mod k = 0 \\<rbrakk> \\<Longrightarrow>\n  (xs @ ys) \\<div>\\<^bsub>fl\\<^esub> k = xs \\<div>\\<^bsub>fl\\<^esub> k @ [last ys]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>0 < k; length ys = k; length xs mod k = 0\\<rbrakk>\n    \\<Longrightarrow> (xs @ ys) \\<div>\\<^sub>l k =\n                      xs \\<div>\\<^sub>l k @ [last ys]", "by (simp add: f_shrink_last_append_mod f_shrink_last_one)"], ["", "lemma f_shrink_last_last: \"\n  length xs mod k = 0 \\<Longrightarrow> last (xs \\<div>\\<^bsub>fl\\<^esub> k) = last xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length xs mod k = 0 \\<Longrightarrow>\n    last (xs \\<div>\\<^sub>l k) = last xs", "apply (case_tac \"k = 0\", simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>length xs mod k = 0; k \\<noteq> 0\\<rbrakk>\n    \\<Longrightarrow> last (xs \\<div>\\<^sub>l k) = last xs", "apply (case_tac \"xs = []\", simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>length xs mod k = 0; k \\<noteq> 0; xs \\<noteq> []\\<rbrakk>\n    \\<Longrightarrow> last (xs \\<div>\\<^sub>l k) = last xs", "apply (subgoal_tac \"k \\<le> length xs\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>length xs mod k = 0; k \\<noteq> 0; xs \\<noteq> [];\n     k \\<le> length xs\\<rbrakk>\n    \\<Longrightarrow> last (xs \\<div>\\<^sub>l k) = last xs\n 2. \\<lbrakk>length xs mod k = 0; k \\<noteq> 0; xs \\<noteq> []\\<rbrakk>\n    \\<Longrightarrow> k \\<le> length xs", "prefer 2"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>length xs mod k = 0; k \\<noteq> 0; xs \\<noteq> []\\<rbrakk>\n    \\<Longrightarrow> k \\<le> length xs\n 2. \\<lbrakk>length xs mod k = 0; k \\<noteq> 0; xs \\<noteq> [];\n     k \\<le> length xs\\<rbrakk>\n    \\<Longrightarrow> last (xs \\<div>\\<^sub>l k) = last xs", "apply (rule ccontr, simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>length xs mod k = 0; k \\<noteq> 0; xs \\<noteq> [];\n     k \\<le> length xs\\<rbrakk>\n    \\<Longrightarrow> last (xs \\<div>\\<^sub>l k) = last xs", "apply (rule subst[OF append_take_drop_id[of \"length xs - k\" xs]])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>length xs mod k = 0; k \\<noteq> 0; xs \\<noteq> [];\n     k \\<le> length xs\\<rbrakk>\n    \\<Longrightarrow> last\n                       ((xs \\<down> (length xs - k) @\n                         xs \\<up> (length xs - k)) \\<div>\\<^sub>l\n                        k) =\n                      last\n                       (xs \\<down> (length xs - k) @\n                        xs \\<up> (length xs - k))", "apply (subst f_shrink_last_snoc)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<lbrakk>length xs mod k = 0; k \\<noteq> 0; xs \\<noteq> [];\n     k \\<le> length xs\\<rbrakk>\n    \\<Longrightarrow> 0 < k\n 2. \\<lbrakk>length xs mod k = 0; k \\<noteq> 0; xs \\<noteq> [];\n     k \\<le> length xs\\<rbrakk>\n    \\<Longrightarrow> length (xs \\<up> (length xs - k)) = k\n 3. \\<lbrakk>length xs mod k = 0; k \\<noteq> 0; xs \\<noteq> [];\n     k \\<le> length xs\\<rbrakk>\n    \\<Longrightarrow> length (xs \\<down> (length xs - k)) mod k = 0\n 4. \\<lbrakk>length xs mod k = 0; k \\<noteq> 0; xs \\<noteq> [];\n     k \\<le> length xs\\<rbrakk>\n    \\<Longrightarrow> last\n                       (xs \\<down> (length xs - k) \\<div>\\<^sub>l k @\n                        [last (xs \\<up> (length xs - k))]) =\n                      last\n                       (xs \\<down> (length xs - k) @\n                        xs \\<up> (length xs - k))", "apply (simp add: min_eqR mod_diff_self2)+"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma f_shrink_last_replicate: \"m\\<^bsup>n\\<^esup> \\<div>\\<^bsub>fl\\<^esub> k = m\\<^bsup>n div k\\<^esup>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. m\\<^bsup>n\\<^esup> \\<div>\\<^sub>l k = m\\<^bsup>n div k\\<^esup>", "apply (case_tac \"k = 0\", simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. k \\<noteq> 0 \\<Longrightarrow>\n    m\\<^bsup>n\\<^esup> \\<div>\\<^sub>l k = m\\<^bsup>n div k\\<^esup>", "apply (clarsimp simp: list_eq_iff f_shrink_last_length)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i.\n       \\<lbrakk>0 < k; i < n div k\\<rbrakk>\n       \\<Longrightarrow> m\\<^bsup>n\\<^esup> \\<div>\\<^sub>l k ! i = m", "apply (frule less_div_imp_mult_add_divisor_le)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i.\n       \\<lbrakk>0 < k; i < n div k; i * k + k \\<le> n\\<rbrakk>\n       \\<Longrightarrow> m\\<^bsup>n\\<^esup> \\<div>\\<^sub>l k ! i = m", "apply (simp add: f_shrink_last_nth)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma f_shrink_last_take: \"\n  xs \\<down> n \\<div>\\<^bsub>fl\\<^esub> k = xs \\<div>\\<^bsub>fl\\<^esub> k \\<down> (n div k)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. xs \\<down> n \\<div>\\<^sub>l k = xs \\<div>\\<^sub>l k \\<down> (n div k)", "by (unfold f_shrink_last_def, rule f_aggregate_take)"], ["", "lemma f_shrink_last_take_mult: \"xs \\<down> (n * k) \\<div>\\<^bsub>fl\\<^esub> k = xs \\<div>\\<^bsub>fl\\<^esub> k \\<down> n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. xs \\<down> (n * k) \\<div>\\<^sub>l k = xs \\<div>\\<^sub>l k \\<down> n", "by (unfold f_shrink_last_def, rule f_aggregate_take_mult)"], ["", "lemma f_shrink_last_drop_mult: \"xs \\<up> (n * k) \\<div>\\<^bsub>fl\\<^esub> k = xs \\<div>\\<^bsub>fl\\<^esub> k \\<up> n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. xs \\<up> (n * k) \\<div>\\<^sub>l k = xs \\<div>\\<^sub>l k \\<up> n", "by (unfold f_shrink_last_def, rule f_aggregate_drop_mult)"], ["", "lemma f_shrink_last_drop_mod: \"\n  n mod k = 0 \\<Longrightarrow> xs \\<up> n \\<div>\\<^bsub>fl\\<^esub> k = xs \\<div>\\<^bsub>fl\\<^esub> k \\<up> (n div k)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. n mod k = 0 \\<Longrightarrow>\n    xs \\<up> n \\<div>\\<^sub>l k = xs \\<div>\\<^sub>l k \\<up> (n div k)", "by (unfold f_shrink_last_def, rule f_aggregate_drop_mod)"], ["", "lemma f_shrink_last_assoc: \"xs \\<div>\\<^bsub>fl\\<^esub> a \\<div>\\<^bsub>fl\\<^esub> b = xs \\<div>\\<^bsub>fl\\<^esub> (a * b)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. xs \\<div>\\<^sub>l a \\<div>\\<^sub>l b = xs \\<div>\\<^sub>l (a * b)", "by (unfold f_shrink_last_def, rule f_aggregate_assoc, fold f_shrink_last_def, rule f_shrink_last_last)"], ["", "lemma f_shrink_last_commute: \"xs \\<div>\\<^bsub>fl\\<^esub> a \\<div>\\<^bsub>fl\\<^esub> b = xs \\<div>\\<^bsub>fl\\<^esub> b \\<div>\\<^bsub>fl\\<^esub> a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. xs \\<div>\\<^sub>l a \\<div>\\<^sub>l b =\n    xs \\<div>\\<^sub>l b \\<div>\\<^sub>l a", "by (simp add: f_shrink_last_assoc mult.commute[of a])"], ["", "lemma i_shrink_last_1[simp]: \"f \\<div>\\<^bsub>il\\<^esub> Suc 0 = f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f \\<div>\\<^sub>l Suc 0 = f", "by (simp add: i_shrink_last_def i_aggregate_1)"], ["", "lemma i_shrink_last_nth: \"0 < k \\<Longrightarrow> (f \\<div>\\<^bsub>il\\<^esub> k) n =  f (n * k + k - Suc 0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < k \\<Longrightarrow> (f \\<div>\\<^sub>l k) n = f (n * k + k - Suc 0)", "by (simp add: i_shrink_last_def i_aggregate_nth last_i_take2)"], ["", "lemma i_shrink_last_nth': \"0 < k \\<Longrightarrow> (f \\<div>\\<^bsub>il\\<^esub> k) n =  f (Suc n * k - Suc 0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < k \\<Longrightarrow> (f \\<div>\\<^sub>l k) n = f (Suc n * k - Suc 0)", "by (simp add: i_shrink_last_nth add.commute[of k])"], ["", "lemma i_shrink_last_hd: \"(f \\<div>\\<^bsub>il\\<^esub> k) 0 = last (f \\<Down> k)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (f \\<div>\\<^sub>l k) 0 = last (f \\<Down> k)", "apply (case_tac \"k = 0\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. k = 0 \\<Longrightarrow> (f \\<div>\\<^sub>l k) 0 = last (f \\<Down> k)\n 2. k \\<noteq> 0 \\<Longrightarrow>\n    (f \\<div>\\<^sub>l k) 0 = last (f \\<Down> k)", "apply (simp add: i_shrink_last_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. k \\<noteq> 0 \\<Longrightarrow>\n    (f \\<div>\\<^sub>l k) 0 = last (f \\<Down> k)", "apply (simp add: i_shrink_last_nth last_i_take2)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma i_shrink_last_o: \"0 < k \\<Longrightarrow> (f \\<circ> g) \\<div>\\<^bsub>il\\<^esub> k = f \\<circ> (g \\<div>\\<^bsub>il\\<^esub> k)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < k \\<Longrightarrow>\n    (f \\<circ> g) \\<div>\\<^sub>l k = f \\<circ> g \\<div>\\<^sub>l k", "by (simp add: ilist_eq_iff i_shrink_last_nth)"], ["", "lemma i_shrink_last_i_append_mod: \"\n  length xs mod k = 0 \\<Longrightarrow> (xs \\<frown> f) \\<div>\\<^bsub>il\\<^esub> k = xs \\<div>\\<^bsub>fl\\<^esub> k \\<frown> (f \\<div>\\<^bsub>il\\<^esub> k)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length xs mod k = 0 \\<Longrightarrow>\n    (xs \\<frown> f) \\<div>\\<^sub>l k =\n    xs \\<div>\\<^sub>l k \\<frown> f \\<div>\\<^sub>l k", "by (simp add: f_shrink_last_def i_shrink_last_def i_aggregate_i_append_mod)"], ["", "lemma i_shrink_last_i_append_mult: \"\n  length xs = m * k \\<Longrightarrow> (xs \\<frown> f) \\<div>\\<^bsub>il\\<^esub> k = xs \\<div>\\<^bsub>fl\\<^esub> k \\<frown> (f \\<div>\\<^bsub>il\\<^esub> k)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length xs = m * k \\<Longrightarrow>\n    (xs \\<frown> f) \\<div>\\<^sub>l k =\n    xs \\<div>\\<^sub>l k \\<frown> f \\<div>\\<^sub>l k", "by (simp add: i_shrink_last_i_append_mod)"], ["", "lemma i_shrink_last_Cons: \"\n  \\<lbrakk> 0 < k; length xs = k \\<rbrakk> \\<Longrightarrow> (xs \\<frown> f) \\<div>\\<^bsub>il\\<^esub> k = [last xs] \\<frown> (f \\<div>\\<^bsub>il\\<^esub> k)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>0 < k; length xs = k\\<rbrakk>\n    \\<Longrightarrow> (xs \\<frown> f) \\<div>\\<^sub>l k =\n                      [last xs] \\<frown> f \\<div>\\<^sub>l k", "by (simp add: f_shrink_last_def i_shrink_last_def i_aggregate_Cons)"], ["", "lemma i_shrink_last_const: \"0 < k \\<Longrightarrow> (\\<lambda>x. m) \\<div>\\<^bsub>il\\<^esub> k = (\\<lambda>x. m)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < k \\<Longrightarrow>\n    (\\<lambda>x. m) \\<div>\\<^sub>l k = (\\<lambda>x. m)", "by (simp add: ilist_eq_iff i_shrink_last_nth)"], ["", "lemma i_shrink_last_i_take_mult: \"\n  0 < k \\<Longrightarrow> f \\<Down> (n * k) \\<div>\\<^bsub>fl\\<^esub> k = f \\<div>\\<^bsub>il\\<^esub> k \\<Down> n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < k \\<Longrightarrow>\n    f \\<Down> (n * k) \\<div>\\<^sub>l k = f \\<div>\\<^sub>l k \\<Down> n", "by (simp add: f_shrink_last_def i_shrink_last_def i_aggregate_i_take_mult)"], ["", "lemma i_shrink_last_i_take: \"\n  f \\<Down> n \\<div>\\<^bsub>fl\\<^esub> k = f \\<div>\\<^bsub>il\\<^esub> k \\<Down> (n div k)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f \\<Down> n \\<div>\\<^sub>l k = f \\<div>\\<^sub>l k \\<Down> (n div k)", "by (simp add: f_shrink_last_def i_shrink_last_def i_aggregate_i_take)"], ["", "lemma i_shrink_last_i_drop_mult: \"f \\<Up> (n * k) \\<div>\\<^bsub>il\\<^esub> k = f \\<div>\\<^bsub>il\\<^esub> k \\<Up> n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f \\<Up> (n * k) \\<div>\\<^sub>l k = f \\<div>\\<^sub>l k \\<Up> n", "by (simp add: f_shrink_last_def i_shrink_last_def i_aggregate_i_drop_mult)"], ["", "lemma i_shrink_last_i_drop_mod: \"\n  n mod k = 0 \\<Longrightarrow> f \\<Up> n \\<div>\\<^bsub>il\\<^esub> k = f \\<div>\\<^bsub>il\\<^esub> k \\<Up> (n div k)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. n mod k = 0 \\<Longrightarrow>\n    f \\<Up> n \\<div>\\<^sub>l k = f \\<div>\\<^sub>l k \\<Up> (n div k)", "by (simp add: f_shrink_last_def i_shrink_last_def i_aggregate_i_drop_mod)"], ["", "lemma i_shrink_last_assoc: \"f \\<div>\\<^bsub>il\\<^esub> a \\<div>\\<^bsub>il\\<^esub> b = f \\<div>\\<^bsub>il\\<^esub> (a * b)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f \\<div>\\<^sub>l a \\<div>\\<^sub>l b = f \\<div>\\<^sub>l (a * b)", "apply (unfold i_shrink_last_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. i_aggregate (i_aggregate f a last) b last = i_aggregate f (a * b) last", "apply (case_tac \"b = 0\", simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. b \\<noteq> 0 \\<Longrightarrow>\n    i_aggregate (i_aggregate f a last) b last = i_aggregate f (a * b) last", "apply (case_tac \"a = 0\", simp add: i_aggregate_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>b \\<noteq> 0; a \\<noteq> 0\\<rbrakk>\n    \\<Longrightarrow> i_aggregate (i_aggregate f a last) b last =\n                      i_aggregate f (a * b) last", "apply (simp add: i_aggregate_assoc f_shrink_last_last[unfolded f_shrink_last_def])"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma i_shrink_last_commute: \"f \\<div>\\<^bsub>il\\<^esub> a \\<div>\\<^bsub>il\\<^esub> b = f \\<div>\\<^bsub>il\\<^esub> b \\<div>\\<^bsub>il\\<^esub> a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f \\<div>\\<^sub>l a \\<div>\\<^sub>l b =\n    f \\<div>\\<^sub>l b \\<div>\\<^sub>l a", "by (simp add: i_shrink_last_assoc mult.commute[of a])"], ["", "text \\<open>\n  Shrinking a message stream with \\<open>last_message\\<close> as aggregation function\n  corresponds to shrinking the stream holding last message in each cycle\n  with \\<open>last\\<close> as aggregation function.\\<close>"], ["", "lemma f_shrink_eq_f_last_message_hold_shrink_last: \"\n  xs \\<div>\\<^sub>f k = xs \\<longmapsto>\\<^sub>f k \\<div>\\<^bsub>fl\\<^esub> k\""], ["proof (prove)\ngoal (1 subgoal):\n 1. xs \\<div> k = xs \\<longmapsto> k \\<div>\\<^sub>l k", "by (simp add: list_eq_iff f_shrink_length f_shrink_last_length f_shrink_nth_eq_f_last_message_hold_nth f_shrink_last_nth)"], ["", "lemma i_shrink_eq_i_last_message_hold_shrink_last: \"\n  0 < k \\<Longrightarrow> f \\<div>\\<^sub>i k = f \\<longmapsto>\\<^sub>i k \\<div>\\<^bsub>il\\<^esub> k\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < k \\<Longrightarrow> f \\<div> k = f \\<longmapsto> k \\<div>\\<^sub>l k", "by (simp add: ilist_eq_iff i_shrink_last_nth i_shrink_nth_eq_i_last_message_hold_nth)"], ["", "end"]]}