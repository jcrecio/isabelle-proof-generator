{"file_name": "/home/qj213/afp-2021-10-22/thys/AutoFocus-Stream/ListSlice.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/AutoFocus-Stream", "problem_names": ["lemma list_slice_aux_length: \"\\<And>xs. length (list_slice_aux xs k n) = n\"", "lemma list_slice_aux_nth: \"\n \\<And>m xs. m < n \\<Longrightarrow> (list_slice_aux xs k n) ! m = (xs \\<up> (m * k) \\<down> k)\"", "lemma list_slice_length: \"length (list_slice xs k) = length xs div k\"", "lemma list_slice_0: \"list_slice xs 0 = []\"", "lemma list_slice_1: \"list_slice xs (Suc 0) = map (\\<lambda>x. [x]) xs\"", "lemma list_slice_less: \"length xs < k \\<Longrightarrow> list_slice xs k = []\"", "lemma list_slice_Nil: \"list_slice [] k = []\"", "lemma list_slice_nth: \"\n  m < length xs div k \\<Longrightarrow> list_slice xs k ! m = xs \\<up> (m * k) \\<down> k\"", "lemma list_slice_nth_length: \"\n  m < length xs div k \\<Longrightarrow> length ((list_slice xs k) ! m) = k\"", "lemma list_slice_nth_eq_sublist_list: \"\n  m < length xs div k \\<Longrightarrow> list_slice xs k ! m = sublist_list xs [m * k..<m * k + k]\"", "lemma list_slice_nth_nth: \"\n  \\<lbrakk> m < length xs div k; n < k \\<rbrakk> \\<Longrightarrow> \n  (list_slice xs k) ! m ! n = xs ! (m * k + n)\"", "lemma list_slice_nth_nth_rev: \"\n  n < length xs div k * k \\<Longrightarrow>\n  (list_slice xs k) ! (n div k) ! (n mod k) = xs ! n\"", "lemma list_slice_eq_list_slice_take: \"\n  list_slice (xs \\<down> (length xs div k * k)) k = list_slice xs k\"", "lemma list_slice_append_mult: \"\n  \\<And>xs. length xs = m * k \\<Longrightarrow>\n  list_slice (xs @ ys) k = list_slice xs k @ list_slice ys k\"", "lemma list_slice_append_mod: \"\n  length xs mod k = 0 \\<Longrightarrow>\n  list_slice (xs @ ys) k = list_slice xs k @ list_slice ys k\"", "lemma list_slice_div_eq_1[rule_format]: \"\n  length xs div k = Suc 0 \\<Longrightarrow> list_slice xs k = [take k xs]\"", "lemma list_slice_div_eq_Suc[rule_format]: \"\n  length xs div k = Suc n \\<Longrightarrow>\n  list_slice xs k = list_slice (xs \\<down> (n * k)) k @ [xs \\<up> (n * k) \\<down> k]\"", "lemma list_slice2_mod_0: \"\n  length xs mod k = 0 \\<Longrightarrow> list_slice2 xs k = list_slice xs k\"", "lemma list_slice2_mod_gr0: \"\n  0 < length xs mod k \\<Longrightarrow> list_slice2 xs k = list_slice xs k @ [xs \\<up> (length xs div k * k)]\"", "lemma list_slice2_length: \"\n  length (list_slice2 xs k) = (\n  if length xs mod k = 0 then length xs div k else Suc (length xs div k))\"", "lemma list_slice2_0: \"\n  list_slice2 xs 0 = (if (length xs = 0) then [] else [xs])\"", "lemma list_slice2_1: \"list_slice2 xs (Suc 0) = map (\\<lambda>x. [x]) xs\"", "lemma list_slice2_le: \"\n  length xs \\<le> k \\<Longrightarrow> list_slice2 xs k = (if length xs = 0 then [] else [xs])\"", "lemma list_slice2_Nil: \"list_slice2 [] k = []\"", "lemma list_slice2_list_slice_nth: \"\n  m < length xs div k \\<Longrightarrow> list_slice2 xs k ! m = list_slice xs k ! m\"", "lemma list_slice2_last: \"\n  \\<lbrakk> length xs mod k > 0; m = length xs div k \\<rbrakk> \\<Longrightarrow>\n  list_slice2 xs k ! m = xs \\<up> (length xs div k * k)\"", "lemma list_slice2_nth: \"\n  \\<lbrakk> m < length xs div k \\<rbrakk> \\<Longrightarrow> \n  list_slice2 xs k ! m = xs \\<up> (m * k) \\<down> k\"", "lemma list_slice2_nth_length_eq1: \"\n  m < length xs div k \\<Longrightarrow> length (list_slice2 xs k ! m) = k\"", "lemma list_slice2_nth_length_eq2: \"\n  \\<lbrakk> length xs mod k > 0; m = length xs div k \\<rbrakk> \\<Longrightarrow> \n  length (list_slice2 xs k ! m) = length xs mod k\"", "lemma list_slice2_nth_nth_eq1: \"\n  \\<lbrakk> m < length xs div k; n < k \\<rbrakk> \\<Longrightarrow> \n  (list_slice2 xs k) ! m ! n = xs ! (m * k + n)\"", "lemma list_slice2_nth_nth_eq2: \"\n  \\<lbrakk> m = length xs div k; n < length xs mod k \\<rbrakk> \\<Longrightarrow> \n  (list_slice2 xs k) ! m ! n = xs ! (m * k + n)\"", "lemma list_slice2_nth_nth_rev: \"\n  n < length xs \\<Longrightarrow> (list_slice2 xs k) ! (n div k) ! (n mod k) = xs ! n\"", "lemma list_slice2_append_mult: \"\n  length xs = m * k \\<Longrightarrow>\n  list_slice2 (xs @ ys) k = list_slice2 xs k @ list_slice2 ys k\"", "lemma list_slice2_append_mod: \"\n  length xs mod k = 0 \\<Longrightarrow>\n  list_slice2 (xs @ ys) k = list_slice2 xs k @ list_slice2 ys k\"", "lemma ilist_slice_nth: \"\n  (ilist_slice f k) m = map f [m * k..<Suc m * k]\"", "lemma ilist_slice_nth_length: \"length ((ilist_slice f k) m) = k\"", "lemma ilist_slice_nth_nth: \"\n  n < k \\<Longrightarrow> (ilist_slice f k) m ! n = f (m * k + n)\"", "lemma ilist_slice_nth_nth_rev: \"\n  0 < k \\<Longrightarrow> (ilist_slice f k) (n div k) ! (n mod k) = f n\"", "lemma list_slice_concat: \"\n  concat (list_slice xs k) = xs \\<down> (length xs div k * k)\"\n  (is \"?P xs k\")", "lemma list_slice_unslice_mult: \"\n  length xs = m * k \\<Longrightarrow> concat (list_slice xs k) = xs\"", "lemma ilist_slice_unslice: \"0 < k \\<Longrightarrow> ilist_unslice (ilist_slice f k) = f\"", "lemma i_take_ilist_slice_eq_list_slice: \"\n  0 < k \\<Longrightarrow> ilist_slice f k \\<Down> n = list_slice (f \\<Down> (n * k)) k\"", "lemma list_slice_i_take_eq_i_take_ilist_slice: \"\n  list_slice (f \\<Down> n) k = ilist_slice f k \\<Down> (n div k)\"", "lemma ilist_slice_i_append_mod: \"\n  length xs mod k = 0 \\<Longrightarrow> \n  ilist_slice (xs \\<frown> f) k = list_slice xs k \\<frown> ilist_slice f k\""], "translations": [["", "lemma list_slice_aux_length: \"\\<And>xs. length (list_slice_aux xs k n) = n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xs. length (list_slice_aux xs k n) = n", "by (induct n, simp+)"], ["", "lemma list_slice_aux_nth: \"\n \\<And>m xs. m < n \\<Longrightarrow> (list_slice_aux xs k n) ! m = (xs \\<up> (m * k) \\<down> k)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>m xs.\n       m < n \\<Longrightarrow>\n       list_slice_aux xs k n ! m = xs \\<up> (m * k) \\<down> k", "apply (induct n)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>m xs.\n       m < 0 \\<Longrightarrow>\n       list_slice_aux xs k 0 ! m = xs \\<up> (m * k) \\<down> k\n 2. \\<And>n m xs.\n       \\<lbrakk>\\<And>m xs.\n                   m < n \\<Longrightarrow>\n                   list_slice_aux xs k n ! m = xs \\<up> (m * k) \\<down> k;\n        m < Suc n\\<rbrakk>\n       \\<Longrightarrow> list_slice_aux xs k (Suc n) ! m =\n                         xs \\<up> (m * k) \\<down> k", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n m xs.\n       \\<lbrakk>\\<And>m xs.\n                   m < n \\<Longrightarrow>\n                   list_slice_aux xs k n ! m = xs \\<up> (m * k) \\<down> k;\n        m < Suc n\\<rbrakk>\n       \\<Longrightarrow> list_slice_aux xs k (Suc n) ! m =\n                         xs \\<up> (m * k) \\<down> k", "apply (simp add: nth_Cons' diff_mult_distrib)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma list_slice_length: \"length (list_slice xs k) = length xs div k\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length (list_slice xs k) = length xs div k", "by (simp add: list_slice_def list_slice_aux_length)"], ["", "lemma list_slice_0: \"list_slice xs 0 = []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. list_slice xs 0 = []", "by (simp add: list_slice_def)"], ["", "lemma list_slice_1: \"list_slice xs (Suc 0) = map (\\<lambda>x. [x]) xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. list_slice xs (Suc 0) = map (\\<lambda>x. [x]) xs", "by (fastforce simp: list_eq_iff list_slice_def list_slice_aux_nth list_slice_aux_length)"], ["", "lemma list_slice_less: \"length xs < k \\<Longrightarrow> list_slice xs k = []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length xs < k \\<Longrightarrow> list_slice xs k = []", "by (simp add: list_slice_def)"], ["", "lemma list_slice_Nil: \"list_slice [] k = []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. list_slice [] k = []", "by (simp add: list_slice_def)"], ["", "lemma list_slice_nth: \"\n  m < length xs div k \\<Longrightarrow> list_slice xs k ! m = xs \\<up> (m * k) \\<down> k\""], ["proof (prove)\ngoal (1 subgoal):\n 1. m < length xs div k \\<Longrightarrow>\n    list_slice xs k ! m = xs \\<up> (m * k) \\<down> k", "by (simp add: list_slice_def list_slice_aux_nth)"], ["", "lemma list_slice_nth_length: \"\n  m < length xs div k \\<Longrightarrow> length ((list_slice xs k) ! m) = k\""], ["proof (prove)\ngoal (1 subgoal):\n 1. m < length xs div k \\<Longrightarrow> length (list_slice xs k ! m) = k", "apply (case_tac \"length xs < k\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>m < length xs div k; length xs < k\\<rbrakk>\n    \\<Longrightarrow> length (list_slice xs k ! m) = k\n 2. \\<lbrakk>m < length xs div k; \\<not> length xs < k\\<rbrakk>\n    \\<Longrightarrow> length (list_slice xs k ! m) = k", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>m < length xs div k; \\<not> length xs < k\\<rbrakk>\n    \\<Longrightarrow> length (list_slice xs k ! m) = k", "apply (simp add: list_slice_nth)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>m < length xs div k; \\<not> length xs < k\\<rbrakk>\n    \\<Longrightarrow> min (length xs - m * k) k = k", "thm less_div_imp_mult_add_divisor_le"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>m < length xs div k; \\<not> length xs < k\\<rbrakk>\n    \\<Longrightarrow> min (length xs - m * k) k = k", "apply (drule less_div_imp_mult_add_divisor_le)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<not> length xs < k; m * k + k \\<le> length xs\\<rbrakk>\n    \\<Longrightarrow> min (length xs - m * k) k = k", "apply simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma list_slice_nth_eq_sublist_list: \"\n  m < length xs div k \\<Longrightarrow> list_slice xs k ! m = sublist_list xs [m * k..<m * k + k]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. m < length xs div k \\<Longrightarrow>\n    list_slice xs k ! m = sublist_list xs [m * k..<m * k + k]", "apply (simp add: list_slice_nth)"], ["proof (prove)\ngoal (1 subgoal):\n 1. m < length xs div k \\<Longrightarrow>\n    xs \\<up> (m * k) \\<down> k = sublist_list xs [m * k..<m * k + k]", "apply (rule take_drop_eq_sublist_list)"], ["proof (prove)\ngoal (1 subgoal):\n 1. m < length xs div k \\<Longrightarrow> m * k + k \\<le> length xs", "apply (rule less_div_imp_mult_add_divisor_le, assumption+)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma list_slice_nth_nth: \"\n  \\<lbrakk> m < length xs div k; n < k \\<rbrakk> \\<Longrightarrow> \n  (list_slice xs k) ! m ! n = xs ! (m * k + n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>m < length xs div k; n < k\\<rbrakk>\n    \\<Longrightarrow> list_slice xs k ! m ! n = xs ! (m * k + n)", "apply (frule list_slice_nth_length[of m xs k])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>m < length xs div k; n < k;\n     length (list_slice xs k ! m) = k\\<rbrakk>\n    \\<Longrightarrow> list_slice xs k ! m ! n = xs ! (m * k + n)", "apply (simp add: list_slice_nth)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma list_slice_nth_nth_rev: \"\n  n < length xs div k * k \\<Longrightarrow>\n  (list_slice xs k) ! (n div k) ! (n mod k) = xs ! n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. n < length xs div k * k \\<Longrightarrow>\n    list_slice xs k ! (n div k) ! (n mod k) = xs ! n", "apply (case_tac \"k = 0\", simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>n < length xs div k * k; k \\<noteq> 0\\<rbrakk>\n    \\<Longrightarrow> list_slice xs k ! (n div k) ! (n mod k) = xs ! n", "apply (simp add: list_slice_nth_nth div_less_conv)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma list_slice_eq_list_slice_take: \"\n  list_slice (xs \\<down> (length xs div k * k)) k = list_slice xs k\""], ["proof (prove)\ngoal (1 subgoal):\n 1. list_slice (xs \\<down> (length xs div k * k)) k = list_slice xs k", "apply (case_tac \"k = 0\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. k = 0 \\<Longrightarrow>\n    list_slice (xs \\<down> (length xs div k * k)) k = list_slice xs k\n 2. k \\<noteq> 0 \\<Longrightarrow>\n    list_slice (xs \\<down> (length xs div k * k)) k = list_slice xs k", "apply (simp add: list_slice_0)"], ["proof (prove)\ngoal (1 subgoal):\n 1. k \\<noteq> 0 \\<Longrightarrow>\n    list_slice (xs \\<down> (length xs div k * k)) k = list_slice xs k", "apply (simp add: list_eq_iff list_slice_length)"], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < k \\<Longrightarrow>\n    min (length xs) (length xs div k * k) div k = length xs div k \\<and>\n    (\\<forall>i<min (length xs) (length xs div k * k) div k.\n        length (list_slice (xs \\<down> (length xs div k * k)) k ! i) =\n        length (list_slice xs k ! i) \\<and>\n        (\\<forall>ia<length\n                      (list_slice (xs \\<down> (length xs div k * k)) k ! i).\n            list_slice (xs \\<down> (length xs div k * k)) k ! i ! ia =\n            list_slice xs k ! i ! ia))", "apply (simp add: div_mult_le min_eqR list_slice_nth)"], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < k \\<Longrightarrow>\n    \\<forall>i<length xs div k.\n       min (length xs div k * k - i * k) k =\n       min (length xs - i * k) k \\<and>\n       (\\<forall>ia.\n           ia < length xs div k * k - i * k \\<and> ia < k \\<longrightarrow>\n           xs \\<down> (length xs div k * k) ! (i * k + ia) =\n           xs \\<up> (i * k) ! ia)", "apply (clarify, rename_tac i)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i.\n       \\<lbrakk>0 < k; i < length xs div k\\<rbrakk>\n       \\<Longrightarrow> min (length xs div k * k - i * k) k =\n                         min (length xs - i * k) k \\<and>\n                         (\\<forall>ia.\n                             ia < length xs div k * k - i * k \\<and>\n                             ia < k \\<longrightarrow>\n                             xs \\<down> (length xs div k * k) !\n                             (i * k + ia) =\n                             xs \\<up> (i * k) ! ia)", "apply (subgoal_tac \"k \\<le> length xs div k * k - i * k\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>i.\n       \\<lbrakk>0 < k; i < length xs div k;\n        k \\<le> length xs div k * k - i * k\\<rbrakk>\n       \\<Longrightarrow> min (length xs div k * k - i * k) k =\n                         min (length xs - i * k) k \\<and>\n                         (\\<forall>ia.\n                             ia < length xs div k * k - i * k \\<and>\n                             ia < k \\<longrightarrow>\n                             xs \\<down> (length xs div k * k) !\n                             (i * k + ia) =\n                             xs \\<up> (i * k) ! ia)\n 2. \\<And>i.\n       \\<lbrakk>0 < k; i < length xs div k\\<rbrakk>\n       \\<Longrightarrow> k \\<le> length xs div k * k - i * k", "prefer 2"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>i.\n       \\<lbrakk>0 < k; i < length xs div k\\<rbrakk>\n       \\<Longrightarrow> k \\<le> length xs div k * k - i * k\n 2. \\<And>i.\n       \\<lbrakk>0 < k; i < length xs div k;\n        k \\<le> length xs div k * k - i * k\\<rbrakk>\n       \\<Longrightarrow> min (length xs div k * k - i * k) k =\n                         min (length xs - i * k) k \\<and>\n                         (\\<forall>ia.\n                             ia < length xs div k * k - i * k \\<and>\n                             ia < k \\<longrightarrow>\n                             xs \\<down> (length xs div k * k) !\n                             (i * k + ia) =\n                             xs \\<up> (i * k) ! ia)", "apply (drule_tac m=i in Suc_leI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>i.\n       \\<lbrakk>0 < k; Suc i \\<le> length xs div k\\<rbrakk>\n       \\<Longrightarrow> k \\<le> length xs div k * k - i * k\n 2. \\<And>i.\n       \\<lbrakk>0 < k; i < length xs div k;\n        k \\<le> length xs div k * k - i * k\\<rbrakk>\n       \\<Longrightarrow> min (length xs div k * k - i * k) k =\n                         min (length xs - i * k) k \\<and>\n                         (\\<forall>ia.\n                             ia < length xs div k * k - i * k \\<and>\n                             ia < k \\<longrightarrow>\n                             xs \\<down> (length xs div k * k) !\n                             (i * k + ia) =\n                             xs \\<up> (i * k) ! ia)", "apply (drule mult_le_mono1[of _ _ k])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>i.\n       \\<lbrakk>0 < k; Suc i * k \\<le> length xs div k * k\\<rbrakk>\n       \\<Longrightarrow> k \\<le> length xs div k * k - i * k\n 2. \\<And>i.\n       \\<lbrakk>0 < k; i < length xs div k;\n        k \\<le> length xs div k * k - i * k\\<rbrakk>\n       \\<Longrightarrow> min (length xs div k * k - i * k) k =\n                         min (length xs - i * k) k \\<and>\n                         (\\<forall>ia.\n                             ia < length xs div k * k - i * k \\<and>\n                             ia < k \\<longrightarrow>\n                             xs \\<down> (length xs div k * k) !\n                             (i * k + ia) =\n                             xs \\<up> (i * k) ! ia)", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i.\n       \\<lbrakk>0 < k; i < length xs div k;\n        k \\<le> length xs div k * k - i * k\\<rbrakk>\n       \\<Longrightarrow> min (length xs div k * k - i * k) k =\n                         min (length xs - i * k) k \\<and>\n                         (\\<forall>ia.\n                             ia < length xs div k * k - i * k \\<and>\n                             ia < k \\<longrightarrow>\n                             xs \\<down> (length xs div k * k) !\n                             (i * k + ia) =\n                             xs \\<up> (i * k) ! ia)", "apply (subgoal_tac \"length xs div k * k - i * k \\<le> length xs - i * k\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>i.\n       \\<lbrakk>0 < k; i < length xs div k;\n        k \\<le> length xs div k * k - i * k;\n        length xs div k * k - i * k \\<le> length xs - i * k\\<rbrakk>\n       \\<Longrightarrow> min (length xs div k * k - i * k) k =\n                         min (length xs - i * k) k \\<and>\n                         (\\<forall>ia.\n                             ia < length xs div k * k - i * k \\<and>\n                             ia < k \\<longrightarrow>\n                             xs \\<down> (length xs div k * k) !\n                             (i * k + ia) =\n                             xs \\<up> (i * k) ! ia)\n 2. \\<And>i.\n       \\<lbrakk>0 < k; i < length xs div k;\n        k \\<le> length xs div k * k - i * k\\<rbrakk>\n       \\<Longrightarrow> length xs div k * k - i * k \\<le> length xs - i * k", "prefer 2"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>i.\n       \\<lbrakk>0 < k; i < length xs div k;\n        k \\<le> length xs div k * k - i * k\\<rbrakk>\n       \\<Longrightarrow> length xs div k * k - i * k \\<le> length xs - i * k\n 2. \\<And>i.\n       \\<lbrakk>0 < k; i < length xs div k;\n        k \\<le> length xs div k * k - i * k;\n        length xs div k * k - i * k \\<le> length xs - i * k\\<rbrakk>\n       \\<Longrightarrow> min (length xs div k * k - i * k) k =\n                         min (length xs - i * k) k \\<and>\n                         (\\<forall>ia.\n                             ia < length xs div k * k - i * k \\<and>\n                             ia < k \\<longrightarrow>\n                             xs \\<down> (length xs div k * k) !\n                             (i * k + ia) =\n                             xs \\<up> (i * k) ! ia)", "apply (simp add: div_mult_cancel)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i.\n       \\<lbrakk>0 < k; i < length xs div k;\n        k \\<le> length xs div k * k - i * k;\n        length xs div k * k - i * k \\<le> length xs - i * k\\<rbrakk>\n       \\<Longrightarrow> min (length xs div k * k - i * k) k =\n                         min (length xs - i * k) k \\<and>\n                         (\\<forall>ia.\n                             ia < length xs div k * k - i * k \\<and>\n                             ia < k \\<longrightarrow>\n                             xs \\<down> (length xs div k * k) !\n                             (i * k + ia) =\n                             xs \\<up> (i * k) ! ia)", "apply (simp add: min_eqR)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i.\n       \\<lbrakk>0 < k; i < length xs div k;\n        k \\<le> length xs div k * k - i * k;\n        length xs div k * k - i * k \\<le> length xs - i * k\\<rbrakk>\n       \\<Longrightarrow> \\<forall>ia.\n                            ia < length xs div k * k - i * k \\<and>\n                            ia < k \\<longrightarrow>\n                            xs \\<down> (length xs div k * k) !\n                            (i * k + ia) =\n                            xs ! (i * k + ia)", "by (simp add: less_diff_conv)"], ["", "lemma list_slice_append_mult: \"\n  \\<And>xs. length xs = m * k \\<Longrightarrow>\n  list_slice (xs @ ys) k = list_slice xs k @ list_slice ys k\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xs.\n       length xs = m * k \\<Longrightarrow>\n       list_slice (xs @ ys) k = list_slice xs k @ list_slice ys k", "apply (case_tac \"k = 0\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>xs.\n       \\<lbrakk>length xs = m * k; k = 0\\<rbrakk>\n       \\<Longrightarrow> list_slice (xs @ ys) k =\n                         list_slice xs k @ list_slice ys k\n 2. \\<And>xs.\n       \\<lbrakk>length xs = m * k; k \\<noteq> 0\\<rbrakk>\n       \\<Longrightarrow> list_slice (xs @ ys) k =\n                         list_slice xs k @ list_slice ys k", "apply (simp add: list_slice_0)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xs.\n       \\<lbrakk>length xs = m * k; k \\<noteq> 0\\<rbrakk>\n       \\<Longrightarrow> list_slice (xs @ ys) k =\n                         list_slice xs k @ list_slice ys k", "apply (induct m)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>xs.\n       \\<lbrakk>length xs = 0 * k; k \\<noteq> 0\\<rbrakk>\n       \\<Longrightarrow> list_slice (xs @ ys) k =\n                         list_slice xs k @ list_slice ys k\n 2. \\<And>m xs.\n       \\<lbrakk>\\<And>xs.\n                   \\<lbrakk>length xs = m * k; k \\<noteq> 0\\<rbrakk>\n                   \\<Longrightarrow> list_slice (xs @ ys) k =\n                                     list_slice xs k @ list_slice ys k;\n        length xs = Suc m * k; k \\<noteq> 0\\<rbrakk>\n       \\<Longrightarrow> list_slice (xs @ ys) k =\n                         list_slice xs k @ list_slice ys k", "apply (simp add: list_slice_Nil)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>m xs.\n       \\<lbrakk>\\<And>xs.\n                   \\<lbrakk>length xs = m * k; k \\<noteq> 0\\<rbrakk>\n                   \\<Longrightarrow> list_slice (xs @ ys) k =\n                                     list_slice xs k @ list_slice ys k;\n        length xs = Suc m * k; k \\<noteq> 0\\<rbrakk>\n       \\<Longrightarrow> list_slice (xs @ ys) k =\n                         list_slice xs k @ list_slice ys k", "apply (simp add: list_slice_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>m xs.\n       \\<lbrakk>\\<And>xs.\n                   length xs = m * k \\<Longrightarrow>\n                   list_slice_aux (xs @ ys) k (m + length ys div k) =\n                   list_slice_aux xs k m @\n                   list_slice_aux ys k (length ys div k);\n        length xs = k + m * k; 0 < k\\<rbrakk>\n       \\<Longrightarrow> list_slice_aux (xs @ ys) k\n                          ((k + m * k + length ys) div k) =\n                         xs \\<down> k #\n                         list_slice_aux (xs \\<up> k) k m @\n                         list_slice_aux ys k (length ys div k)", "apply (simp add: list_slice_def add.commute[of _ \"length ys\"] add.assoc[symmetric])"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma list_slice_append_mod: \"\n  length xs mod k = 0 \\<Longrightarrow>\n  list_slice (xs @ ys) k = list_slice xs k @ list_slice ys k\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length xs mod k = 0 \\<Longrightarrow>\n    list_slice (xs @ ys) k = list_slice xs k @ list_slice ys k", "by (auto intro: list_slice_append_mult elim!: dvdE)"], ["", "lemma list_slice_div_eq_1[rule_format]: \"\n  length xs div k = Suc 0 \\<Longrightarrow> list_slice xs k = [take k xs]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length xs div k = Suc 0 \\<Longrightarrow>\n    list_slice xs k = [xs \\<down> k]", "by (simp add: list_slice_def)"], ["", "lemma list_slice_div_eq_Suc[rule_format]: \"\n  length xs div k = Suc n \\<Longrightarrow>\n  list_slice xs k = list_slice (xs \\<down> (n * k)) k @ [xs \\<up> (n * k) \\<down> k]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length xs div k = Suc n \\<Longrightarrow>\n    list_slice xs k =\n    list_slice (xs \\<down> (n * k)) k @ [xs \\<up> (n * k) \\<down> k]", "apply (case_tac \"k = 0\", simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>length xs div k = Suc n; k \\<noteq> 0\\<rbrakk>\n    \\<Longrightarrow> list_slice xs k =\n                      list_slice (xs \\<down> (n * k)) k @\n                      [xs \\<up> (n * k) \\<down> k]", "apply (subgoal_tac \"n * k < length xs\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>length xs div k = Suc n; k \\<noteq> 0;\n     n * k < length xs\\<rbrakk>\n    \\<Longrightarrow> list_slice xs k =\n                      list_slice (xs \\<down> (n * k)) k @\n                      [xs \\<up> (n * k) \\<down> k]\n 2. \\<lbrakk>length xs div k = Suc n; k \\<noteq> 0\\<rbrakk>\n    \\<Longrightarrow> n * k < length xs", "prefer 2"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>length xs div k = Suc n; k \\<noteq> 0\\<rbrakk>\n    \\<Longrightarrow> n * k < length xs\n 2. \\<lbrakk>length xs div k = Suc n; k \\<noteq> 0;\n     n * k < length xs\\<rbrakk>\n    \\<Longrightarrow> list_slice xs k =\n                      list_slice (xs \\<down> (n * k)) k @\n                      [xs \\<up> (n * k) \\<down> k]", "apply (case_tac \"length xs = 0\", simp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>length xs div k = Suc n; k \\<noteq> 0;\n     length xs \\<noteq> 0\\<rbrakk>\n    \\<Longrightarrow> n * k < length xs\n 2. \\<lbrakk>length xs div k = Suc n; k \\<noteq> 0;\n     n * k < length xs\\<rbrakk>\n    \\<Longrightarrow> list_slice xs k =\n                      list_slice (xs \\<down> (n * k)) k @\n                      [xs \\<up> (n * k) \\<down> k]", "apply (drule_tac arg_cong[where f=\"\\<lambda>x. x - Suc 0\"], drule sym)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>k \\<noteq> 0; length xs \\<noteq> 0;\n     Suc n - Suc 0 = length xs div k - Suc 0\\<rbrakk>\n    \\<Longrightarrow> n * k < length xs\n 2. \\<lbrakk>length xs div k = Suc n; k \\<noteq> 0;\n     n * k < length xs\\<rbrakk>\n    \\<Longrightarrow> list_slice xs k =\n                      list_slice (xs \\<down> (n * k)) k @\n                      [xs \\<up> (n * k) \\<down> k]", "apply (simp add: diff_mult_distrib div_mult_cancel)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>length xs div k = Suc n; k \\<noteq> 0;\n     n * k < length xs\\<rbrakk>\n    \\<Longrightarrow> list_slice xs k =\n                      list_slice (xs \\<down> (n * k)) k @\n                      [xs \\<up> (n * k) \\<down> k]", "apply (insert list_slice_append_mult[of \"take (n * k) xs\" n k \"drop (n * k) xs\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>length xs div k = Suc n; k \\<noteq> 0; n * k < length xs;\n     length (xs \\<down> (n * k)) = n * k \\<Longrightarrow>\n     list_slice (xs \\<down> (n * k) @ xs \\<up> (n * k)) k =\n     list_slice (xs \\<down> (n * k)) k @\n     list_slice (xs \\<up> (n * k)) k\\<rbrakk>\n    \\<Longrightarrow> list_slice xs k =\n                      list_slice (xs \\<down> (n * k)) k @\n                      [xs \\<up> (n * k) \\<down> k]", "apply (simp add: min_eqR)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>length xs div k = Suc n; 0 < k; n * k < length xs;\n     list_slice xs k =\n     list_slice (xs \\<down> (n * k)) k @\n     list_slice (xs \\<up> (n * k)) k\\<rbrakk>\n    \\<Longrightarrow> list_slice (xs \\<up> (n * k)) k =\n                      [xs \\<up> (n * k) \\<down> k]", "apply (rule list_slice_div_eq_1)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>length xs div k = Suc n; 0 < k; n * k < length xs;\n     list_slice xs k =\n     list_slice (xs \\<down> (n * k)) k @\n     list_slice (xs \\<up> (n * k)) k\\<rbrakk>\n    \\<Longrightarrow> length (xs \\<up> (n * k)) div k = Suc 0", "apply (simp add: div_diff_mult_self1)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma list_slice2_mod_0: \"\n  length xs mod k = 0 \\<Longrightarrow> list_slice2 xs k = list_slice xs k\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length xs mod k = 0 \\<Longrightarrow> list_slice2 xs k = list_slice xs k", "by (simp add: list_slice2_def)"], ["", "lemma list_slice2_mod_gr0: \"\n  0 < length xs mod k \\<Longrightarrow> list_slice2 xs k = list_slice xs k @ [xs \\<up> (length xs div k * k)]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < length xs mod k \\<Longrightarrow>\n    list_slice2 xs k = list_slice xs k @ [xs \\<up> (length xs div k * k)]", "by (simp add: list_slice2_def)"], ["", "lemma list_slice2_length: \"\n  length (list_slice2 xs k) = (\n  if length xs mod k = 0 then length xs div k else Suc (length xs div k))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length (list_slice2 xs k) =\n    (if length xs mod k = 0 then length xs div k else Suc (length xs div k))", "by (simp add: list_slice2_def list_slice_length)"], ["", "lemma list_slice2_0: \"\n  list_slice2 xs 0 = (if (length xs = 0) then [] else [xs])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. list_slice2 xs 0 = (if length xs = 0 then [] else [xs])", "by (simp add: list_slice2_def list_slice_0)"], ["", "lemma list_slice2_1: \"list_slice2 xs (Suc 0) = map (\\<lambda>x. [x]) xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. list_slice2 xs (Suc 0) = map (\\<lambda>x. [x]) xs", "by (simp add: list_slice2_def list_slice_1)"], ["", "lemma list_slice2_le: \"\n  length xs \\<le> k \\<Longrightarrow> list_slice2 xs k = (if length xs = 0 then [] else [xs])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length xs \\<le> k \\<Longrightarrow>\n    list_slice2 xs k = (if length xs = 0 then [] else [xs])", "apply (case_tac \"k = 0\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>length xs \\<le> k; k = 0\\<rbrakk>\n    \\<Longrightarrow> list_slice2 xs k =\n                      (if length xs = 0 then [] else [xs])\n 2. \\<lbrakk>length xs \\<le> k; k \\<noteq> 0\\<rbrakk>\n    \\<Longrightarrow> list_slice2 xs k =\n                      (if length xs = 0 then [] else [xs])", "apply (simp add: list_slice2_0)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>length xs \\<le> k; k \\<noteq> 0\\<rbrakk>\n    \\<Longrightarrow> list_slice2 xs k =\n                      (if length xs = 0 then [] else [xs])", "apply (drule order_le_less[THEN iffD1], erule disjE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>k \\<noteq> 0; length xs < k\\<rbrakk>\n    \\<Longrightarrow> list_slice2 xs k =\n                      (if length xs = 0 then [] else [xs])\n 2. \\<lbrakk>k \\<noteq> 0; length xs = k\\<rbrakk>\n    \\<Longrightarrow> list_slice2 xs k =\n                      (if length xs = 0 then [] else [xs])", "apply (simp add: list_slice2_def list_slice_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>k \\<noteq> 0; length xs = k\\<rbrakk>\n    \\<Longrightarrow> list_slice2 xs k =\n                      (if length xs = 0 then [] else [xs])", "apply (simp add: list_slice2_def list_slice_div_eq_1)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma list_slice2_Nil: \"list_slice2 [] k = []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. list_slice2 [] k = []", "by (simp add: list_slice2_def list_slice_Nil)"], ["", "lemma list_slice2_list_slice_nth: \"\n  m < length xs div k \\<Longrightarrow> list_slice2 xs k ! m = list_slice xs k ! m\""], ["proof (prove)\ngoal (1 subgoal):\n 1. m < length xs div k \\<Longrightarrow>\n    list_slice2 xs k ! m = list_slice xs k ! m", "by (simp add: list_slice2_def list_slice_length nth_append)"], ["", "lemma list_slice2_last: \"\n  \\<lbrakk> length xs mod k > 0; m = length xs div k \\<rbrakk> \\<Longrightarrow>\n  list_slice2 xs k ! m = xs \\<up> (length xs div k * k)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>0 < length xs mod k; m = length xs div k\\<rbrakk>\n    \\<Longrightarrow> list_slice2 xs k ! m = xs \\<up> (length xs div k * k)", "by (simp add: list_slice2_def nth_append list_slice_length)"], ["", "lemma list_slice2_nth: \"\n  \\<lbrakk> m < length xs div k \\<rbrakk> \\<Longrightarrow> \n  list_slice2 xs k ! m = xs \\<up> (m * k) \\<down> k\""], ["proof (prove)\ngoal (1 subgoal):\n 1. m < length xs div k \\<Longrightarrow>\n    list_slice2 xs k ! m = xs \\<up> (m * k) \\<down> k", "by (simp add: list_slice2_def list_slice_length nth_append list_slice_nth)"], ["", "lemma list_slice2_nth_length_eq1: \"\n  m < length xs div k \\<Longrightarrow> length (list_slice2 xs k ! m) = k\""], ["proof (prove)\ngoal (1 subgoal):\n 1. m < length xs div k \\<Longrightarrow> length (list_slice2 xs k ! m) = k", "by (simp add: list_slice2_def nth_append list_slice_length list_slice_nth_length)"], ["", "lemma list_slice2_nth_length_eq2: \"\n  \\<lbrakk> length xs mod k > 0; m = length xs div k \\<rbrakk> \\<Longrightarrow> \n  length (list_slice2 xs k ! m) = length xs mod k\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>0 < length xs mod k; m = length xs div k\\<rbrakk>\n    \\<Longrightarrow> length (list_slice2 xs k ! m) = length xs mod k", "by (simp add: list_slice2_def list_slice_length nth_append minus_div_mult_eq_mod [symmetric])"], ["", "lemma list_slice2_nth_nth_eq1: \"\n  \\<lbrakk> m < length xs div k; n < k \\<rbrakk> \\<Longrightarrow> \n  (list_slice2 xs k) ! m ! n = xs ! (m * k + n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>m < length xs div k; n < k\\<rbrakk>\n    \\<Longrightarrow> list_slice2 xs k ! m ! n = xs ! (m * k + n)", "by (simp add: list_slice2_list_slice_nth list_slice_nth_nth)"], ["", "lemma list_slice2_nth_nth_eq2: \"\n  \\<lbrakk> m = length xs div k; n < length xs mod k \\<rbrakk> \\<Longrightarrow> \n  (list_slice2 xs k) ! m ! n = xs ! (m * k + n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>m = length xs div k; n < length xs mod k\\<rbrakk>\n    \\<Longrightarrow> list_slice2 xs k ! m ! n = xs ! (m * k + n)", "by (simp add: mult.commute[of _ k] minus_mod_eq_mult_div [symmetric] list_slice2_last)"], ["", "lemma list_slice2_nth_nth_rev: \"\n  n < length xs \\<Longrightarrow> (list_slice2 xs k) ! (n div k) ! (n mod k) = xs ! n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. n < length xs \\<Longrightarrow>\n    list_slice2 xs k ! (n div k) ! (n mod k) = xs ! n", "apply (case_tac \"k = 0\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>n < length xs; k = 0\\<rbrakk>\n    \\<Longrightarrow> list_slice2 xs k ! (n div k) ! (n mod k) = xs ! n\n 2. \\<lbrakk>n < length xs; k \\<noteq> 0\\<rbrakk>\n    \\<Longrightarrow> list_slice2 xs k ! (n div k) ! (n mod k) = xs ! n", "apply (clarsimp simp: list_slice2_0)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>n < length xs; k \\<noteq> 0\\<rbrakk>\n    \\<Longrightarrow> list_slice2 xs k ! (n div k) ! (n mod k) = xs ! n", "apply (case_tac \"n div k < length xs div k\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>n < length xs; k \\<noteq> 0; n div k < length xs div k\\<rbrakk>\n    \\<Longrightarrow> list_slice2 xs k ! (n div k) ! (n mod k) = xs ! n\n 2. \\<lbrakk>n < length xs; k \\<noteq> 0;\n     \\<not> n div k < length xs div k\\<rbrakk>\n    \\<Longrightarrow> list_slice2 xs k ! (n div k) ! (n mod k) = xs ! n", "apply (simp add: list_slice2_nth_nth_eq1)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>n < length xs; k \\<noteq> 0;\n     \\<not> n div k < length xs div k\\<rbrakk>\n    \\<Longrightarrow> list_slice2 xs k ! (n div k) ! (n mod k) = xs ! n", "apply (frule div_le_mono[OF less_imp_le, of _ _ k])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>n < length xs; k \\<noteq> 0; \\<not> n div k < length xs div k;\n     n div k \\<le> length xs div k\\<rbrakk>\n    \\<Longrightarrow> list_slice2 xs k ! (n div k) ! (n mod k) = xs ! n", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>n < length xs; 0 < k; n div k = length xs div k\\<rbrakk>\n    \\<Longrightarrow> list_slice2 xs k ! (length xs div k) ! (n mod k) =\n                      xs ! n", "apply (drule sym)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>n < length xs; 0 < k; length xs div k = n div k\\<rbrakk>\n    \\<Longrightarrow> list_slice2 xs k ! (length xs div k) ! (n mod k) =\n                      xs ! n", "apply (subgoal_tac \"n mod k < length xs mod k\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>n < length xs; 0 < k; length xs div k = n div k;\n     n mod k < length xs mod k\\<rbrakk>\n    \\<Longrightarrow> list_slice2 xs k ! (length xs div k) ! (n mod k) =\n                      xs ! n\n 2. \\<lbrakk>n < length xs; 0 < k; length xs div k = n div k\\<rbrakk>\n    \\<Longrightarrow> n mod k < length xs mod k", "prefer 2"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>n < length xs; 0 < k; length xs div k = n div k\\<rbrakk>\n    \\<Longrightarrow> n mod k < length xs mod k\n 2. \\<lbrakk>n < length xs; 0 < k; length xs div k = n div k;\n     n mod k < length xs mod k\\<rbrakk>\n    \\<Longrightarrow> list_slice2 xs k ! (length xs div k) ! (n mod k) =\n                      xs ! n", "apply (rule ccontr)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>n < length xs; 0 < k; length xs div k = n div k;\n     \\<not> n mod k < length xs mod k\\<rbrakk>\n    \\<Longrightarrow> False\n 2. \\<lbrakk>n < length xs; 0 < k; length xs div k = n div k;\n     n mod k < length xs mod k\\<rbrakk>\n    \\<Longrightarrow> list_slice2 xs k ! (length xs div k) ! (n mod k) =\n                      xs ! n", "apply (simp add: linorder_not_less)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>n < length xs; 0 < k; length xs div k = n div k;\n     length xs mod k \\<le> n mod k\\<rbrakk>\n    \\<Longrightarrow> False\n 2. \\<lbrakk>n < length xs; 0 < k; length xs div k = n div k;\n     n mod k < length xs mod k\\<rbrakk>\n    \\<Longrightarrow> list_slice2 xs k ! (length xs div k) ! (n mod k) =\n                      xs ! n", "apply (drule less_mod_ge_imp_div_less[of n \"length xs\" k], simp+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>n < length xs; 0 < k; length xs div k = n div k;\n     n mod k < length xs mod k\\<rbrakk>\n    \\<Longrightarrow> list_slice2 xs k ! (n div k) ! (n mod k) = xs ! n", "apply (simp add: list_slice2_nth_nth_eq2)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma list_slice2_append_mult: \"\n  length xs = m * k \\<Longrightarrow>\n  list_slice2 (xs @ ys) k = list_slice2 xs k @ list_slice2 ys k\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length xs = m * k \\<Longrightarrow>\n    list_slice2 (xs @ ys) k = list_slice2 xs k @ list_slice2 ys k", "apply (case_tac \"k = 0\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>length xs = m * k; k = 0\\<rbrakk>\n    \\<Longrightarrow> list_slice2 (xs @ ys) k =\n                      list_slice2 xs k @ list_slice2 ys k\n 2. \\<lbrakk>length xs = m * k; k \\<noteq> 0\\<rbrakk>\n    \\<Longrightarrow> list_slice2 (xs @ ys) k =\n                      list_slice2 xs k @ list_slice2 ys k", "apply (simp add: list_slice2_0)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>length xs = m * k; k \\<noteq> 0\\<rbrakk>\n    \\<Longrightarrow> list_slice2 (xs @ ys) k =\n                      list_slice2 xs k @ list_slice2 ys k", "apply (clarsimp simp: list_slice2_def list_slice_append_mult)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>length xs = m * k; 0 < k; 0 < length ys mod k\\<rbrakk>\n    \\<Longrightarrow> ys \\<up> ((m + length ys div k) * k - m * k) =\n                      ys \\<up> (length ys div k * k)", "apply (simp add: add.commute[of \"m * k\"] add_mult_distrib)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma list_slice2_append_mod: \"\n  length xs mod k = 0 \\<Longrightarrow>\n  list_slice2 (xs @ ys) k = list_slice2 xs k @ list_slice2 ys k\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length xs mod k = 0 \\<Longrightarrow>\n    list_slice2 (xs @ ys) k = list_slice2 xs k @ list_slice2 ys k", "by (auto intro: list_slice2_append_mult elim!: dvdE)"], ["", "lemma ilist_slice_nth: \"\n  (ilist_slice f k) m = map f [m * k..<Suc m * k]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ilist_slice f k m = map f [m * k..<Suc m * k]", "by (simp add: ilist_slice_def)"], ["", "lemma ilist_slice_nth_length: \"length ((ilist_slice f k) m) = k\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length (ilist_slice f k m) = k", "by (simp add: ilist_slice_def)"], ["", "lemma ilist_slice_nth_nth: \"\n  n < k \\<Longrightarrow> (ilist_slice f k) m ! n = f (m * k + n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. n < k \\<Longrightarrow> ilist_slice f k m ! n = f (m * k + n)", "by (simp add: ilist_slice_def)"], ["", "lemma ilist_slice_nth_nth_rev: \"\n  0 < k \\<Longrightarrow> (ilist_slice f k) (n div k) ! (n mod k) = f n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < k \\<Longrightarrow> ilist_slice f k (n div k) ! (n mod k) = f n", "by (simp add: ilist_slice_nth_nth)"], ["", "lemma list_slice_concat: \"\n  concat (list_slice xs k) = xs \\<down> (length xs div k * k)\"\n  (is \"?P xs k\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. concat (list_slice xs k) = xs \\<down> (length xs div k * k)", "apply (case_tac \"k = 0\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. k = 0 \\<Longrightarrow>\n    concat (list_slice xs k) = xs \\<down> (length xs div k * k)\n 2. k \\<noteq> 0 \\<Longrightarrow>\n    concat (list_slice xs k) = xs \\<down> (length xs div k * k)", "apply (simp add: list_slice_0)"], ["proof (prove)\ngoal (1 subgoal):\n 1. k \\<noteq> 0 \\<Longrightarrow>\n    concat (list_slice xs k) = xs \\<down> (length xs div k * k)", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < k \\<Longrightarrow>\n    concat (list_slice xs k) = xs \\<down> (length xs div k * k)", "apply (subgoal_tac \"\\<And>m. \\<forall>xs. length xs div k = m \\<longrightarrow> ?P xs k\", simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>m.\n       0 < k \\<Longrightarrow>\n       \\<forall>xs.\n          length xs div k = m \\<longrightarrow>\n          concat (list_slice xs k) = xs \\<down> (length xs div k * k)", "apply (induct_tac m)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>m.\n       0 < k \\<Longrightarrow>\n       \\<forall>xs.\n          length xs div k = 0 \\<longrightarrow>\n          concat (list_slice xs k) = xs \\<down> (length xs div k * k)\n 2. \\<And>m n.\n       \\<lbrakk>0 < k;\n        \\<forall>xs.\n           length xs div k = n \\<longrightarrow>\n           concat (list_slice xs k) =\n           xs \\<down> (length xs div k * k)\\<rbrakk>\n       \\<Longrightarrow> \\<forall>xs.\n                            length xs div k = Suc n \\<longrightarrow>\n                            concat (list_slice xs k) =\n                            xs \\<down> (length xs div k * k)", "apply (intro allI impI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>m xs.\n       \\<lbrakk>0 < k; length xs div k = 0\\<rbrakk>\n       \\<Longrightarrow> concat (list_slice xs k) =\n                         xs \\<down> (length xs div k * k)\n 2. \\<And>m n.\n       \\<lbrakk>0 < k;\n        \\<forall>xs.\n           length xs div k = n \\<longrightarrow>\n           concat (list_slice xs k) =\n           xs \\<down> (length xs div k * k)\\<rbrakk>\n       \\<Longrightarrow> \\<forall>xs.\n                            length xs div k = Suc n \\<longrightarrow>\n                            concat (list_slice xs k) =\n                            xs \\<down> (length xs div k * k)", "apply (simp add: in_set_conv_nth div_eq_0_conv' list_slice_less)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>m n.\n       \\<lbrakk>0 < k;\n        \\<forall>xs.\n           length xs div k = n \\<longrightarrow>\n           concat (list_slice xs k) =\n           xs \\<down> (length xs div k * k)\\<rbrakk>\n       \\<Longrightarrow> \\<forall>xs.\n                            length xs div k = Suc n \\<longrightarrow>\n                            concat (list_slice xs k) =\n                            xs \\<down> (length xs div k * k)", "apply clarify"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>m n xs.\n       \\<lbrakk>0 < k;\n        \\<forall>xs.\n           length xs div k = n \\<longrightarrow>\n           concat (list_slice xs k) = xs \\<down> (length xs div k * k);\n        length xs div k = Suc n\\<rbrakk>\n       \\<Longrightarrow> concat (list_slice xs k) =\n                         xs \\<down> (length xs div k * k)", "apply (simp add: add.commute[of k])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n xs.\n       \\<lbrakk>0 < k;\n        \\<forall>xs.\n           length xs div k = n \\<longrightarrow>\n           concat (list_slice xs k) = xs \\<down> (n * k);\n        length xs div k = Suc n\\<rbrakk>\n       \\<Longrightarrow> concat (list_slice xs k) = xs \\<down> (n * k + k)", "apply (subgoal_tac \"n * k + k \\<le> length xs\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>n xs.\n       \\<lbrakk>0 < k;\n        \\<forall>xs.\n           length xs div k = n \\<longrightarrow>\n           concat (list_slice xs k) = xs \\<down> (n * k);\n        length xs div k = Suc n; n * k + k \\<le> length xs\\<rbrakk>\n       \\<Longrightarrow> concat (list_slice xs k) = xs \\<down> (n * k + k)\n 2. \\<And>n xs.\n       \\<lbrakk>0 < k;\n        \\<forall>xs.\n           length xs div k = n \\<longrightarrow>\n           concat (list_slice xs k) = xs \\<down> (n * k);\n        length xs div k = Suc n\\<rbrakk>\n       \\<Longrightarrow> n * k + k \\<le> length xs", "prefer 2"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>n xs.\n       \\<lbrakk>0 < k;\n        \\<forall>xs.\n           length xs div k = n \\<longrightarrow>\n           concat (list_slice xs k) = xs \\<down> (n * k);\n        length xs div k = Suc n\\<rbrakk>\n       \\<Longrightarrow> n * k + k \\<le> length xs\n 2. \\<And>n xs.\n       \\<lbrakk>0 < k;\n        \\<forall>xs.\n           length xs div k = n \\<longrightarrow>\n           concat (list_slice xs k) = xs \\<down> (n * k);\n        length xs div k = Suc n; n * k + k \\<le> length xs\\<rbrakk>\n       \\<Longrightarrow> concat (list_slice xs k) = xs \\<down> (n * k + k)", "apply (simp add: le_less_div_conv[symmetric])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n xs.\n       \\<lbrakk>0 < k;\n        \\<forall>xs.\n           length xs div k = n \\<longrightarrow>\n           concat (list_slice xs k) = xs \\<down> (n * k);\n        length xs div k = Suc n; n * k + k \\<le> length xs\\<rbrakk>\n       \\<Longrightarrow> concat (list_slice xs k) = xs \\<down> (n * k + k)", "apply (simp add: list_slice_div_eq_Suc)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n xs.\n       \\<lbrakk>0 < k;\n        \\<forall>xs.\n           length xs div k = n \\<longrightarrow>\n           concat (list_slice xs k) = xs \\<down> (n * k);\n        length xs div k = Suc n; n * k + k \\<le> length xs\\<rbrakk>\n       \\<Longrightarrow> concat (list_slice (xs \\<down> (n * k)) k) @\n                         xs \\<up> (n * k) \\<down> k =\n                         xs \\<down> (n * k + k)", "apply (drule_tac x=\"xs \\<down> (n * k)\" in spec)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n xs.\n       \\<lbrakk>0 < k; length xs div k = Suc n; n * k + k \\<le> length xs;\n        length (xs \\<down> (n * k)) div k = n \\<longrightarrow>\n        concat (list_slice (xs \\<down> (n * k)) k) =\n        xs \\<down> (n * k) \\<down> (n * k)\\<rbrakk>\n       \\<Longrightarrow> concat (list_slice (xs \\<down> (n * k)) k) @\n                         xs \\<up> (n * k) \\<down> k =\n                         xs \\<down> (n * k + k)", "apply (simp add: min_eqR)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n xs.\n       \\<lbrakk>0 < k; length xs div k = Suc n; n * k + k \\<le> length xs;\n        concat (list_slice (xs \\<down> (n * k)) k) =\n        xs \\<down> (n * k)\\<rbrakk>\n       \\<Longrightarrow> xs \\<down> (n * k) @ xs \\<up> (n * k) \\<down> k =\n                         xs \\<down> (n * k + k)", "apply (simp add: take_add)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma list_slice_unslice_mult: \"\n  length xs = m * k \\<Longrightarrow> concat (list_slice xs k) = xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length xs = m * k \\<Longrightarrow> concat (list_slice xs k) = xs", "apply (case_tac \"k = 0\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>length xs = m * k; k = 0\\<rbrakk>\n    \\<Longrightarrow> concat (list_slice xs k) = xs\n 2. \\<lbrakk>length xs = m * k; k \\<noteq> 0\\<rbrakk>\n    \\<Longrightarrow> concat (list_slice xs k) = xs", "apply (simp add: list_slice_Nil)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>length xs = m * k; k \\<noteq> 0\\<rbrakk>\n    \\<Longrightarrow> concat (list_slice xs k) = xs", "apply (simp add: list_slice_concat)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma ilist_slice_unslice: \"0 < k \\<Longrightarrow> ilist_unslice (ilist_slice f k) = f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < k \\<Longrightarrow> ilist_unslice (ilist_slice f k) = f", "by (simp add: ilist_unslice_def ilist_slice_nth_length ilist_slice_nth_nth)"], ["", "lemma i_take_ilist_slice_eq_list_slice: \"\n  0 < k \\<Longrightarrow> ilist_slice f k \\<Down> n = list_slice (f \\<Down> (n * k)) k\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < k \\<Longrightarrow>\n    ilist_slice f k \\<Down> n = list_slice (f \\<Down> (n * k)) k", "apply (simp add: list_eq_iff list_slice_length ilist_slice_nth list_slice_nth)"], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < k \\<Longrightarrow>\n    \\<forall>i<n.\n       k = min (n * k - i * k) k \\<and>\n       (\\<forall>ia<k. f (i * k + ia) = f \\<Down> (n * k) ! (i * k + ia))", "apply (clarify, rename_tac i)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i.\n       \\<lbrakk>0 < k; i < n\\<rbrakk>\n       \\<Longrightarrow> k = min (n * k - i * k) k \\<and>\n                         (\\<forall>ia<k.\n                             f (i * k + ia) =\n                             f \\<Down> (n * k) ! (i * k + ia))", "apply (subgoal_tac \"k \\<le> n * k - i * k\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>i.\n       \\<lbrakk>0 < k; i < n; k \\<le> n * k - i * k\\<rbrakk>\n       \\<Longrightarrow> k = min (n * k - i * k) k \\<and>\n                         (\\<forall>ia<k.\n                             f (i * k + ia) =\n                             f \\<Down> (n * k) ! (i * k + ia))\n 2. \\<And>i.\n       \\<lbrakk>0 < k; i < n\\<rbrakk>\n       \\<Longrightarrow> k \\<le> n * k - i * k", "prefer 2"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>i.\n       \\<lbrakk>0 < k; i < n\\<rbrakk>\n       \\<Longrightarrow> k \\<le> n * k - i * k\n 2. \\<And>i.\n       \\<lbrakk>0 < k; i < n; k \\<le> n * k - i * k\\<rbrakk>\n       \\<Longrightarrow> k = min (n * k - i * k) k \\<and>\n                         (\\<forall>ia<k.\n                             f (i * k + ia) =\n                             f \\<Down> (n * k) ! (i * k + ia))", "apply (drule_tac m=i in Suc_leI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>i.\n       \\<lbrakk>0 < k; Suc i \\<le> n\\<rbrakk>\n       \\<Longrightarrow> k \\<le> n * k - i * k\n 2. \\<And>i.\n       \\<lbrakk>0 < k; i < n; k \\<le> n * k - i * k\\<rbrakk>\n       \\<Longrightarrow> k = min (n * k - i * k) k \\<and>\n                         (\\<forall>ia<k.\n                             f (i * k + ia) =\n                             f \\<Down> (n * k) ! (i * k + ia))", "apply (drule mult_le_mono1[of _ _ k])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>i.\n       \\<lbrakk>0 < k; Suc i * k \\<le> n * k\\<rbrakk>\n       \\<Longrightarrow> k \\<le> n * k - i * k\n 2. \\<And>i.\n       \\<lbrakk>0 < k; i < n; k \\<le> n * k - i * k\\<rbrakk>\n       \\<Longrightarrow> k = min (n * k - i * k) k \\<and>\n                         (\\<forall>ia<k.\n                             f (i * k + ia) =\n                             f \\<Down> (n * k) ! (i * k + ia))", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i.\n       \\<lbrakk>0 < k; i < n; k \\<le> n * k - i * k\\<rbrakk>\n       \\<Longrightarrow> k = min (n * k - i * k) k \\<and>\n                         (\\<forall>ia<k.\n                             f (i * k + ia) =\n                             f \\<Down> (n * k) ! (i * k + ia))", "apply simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma list_slice_i_take_eq_i_take_ilist_slice: \"\n  list_slice (f \\<Down> n) k = ilist_slice f k \\<Down> (n div k)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. list_slice (f \\<Down> n) k = ilist_slice f k \\<Down> (n div k)", "apply (case_tac \"k = 0\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. k = 0 \\<Longrightarrow>\n    list_slice (f \\<Down> n) k = ilist_slice f k \\<Down> (n div k)\n 2. k \\<noteq> 0 \\<Longrightarrow>\n    list_slice (f \\<Down> n) k = ilist_slice f k \\<Down> (n div k)", "apply (simp add: list_slice_0)"], ["proof (prove)\ngoal (1 subgoal):\n 1. k \\<noteq> 0 \\<Longrightarrow>\n    list_slice (f \\<Down> n) k = ilist_slice f k \\<Down> (n div k)", "apply (simp add: i_take_ilist_slice_eq_list_slice)"], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < k \\<Longrightarrow>\n    list_slice (f \\<Down> n) k = list_slice (f \\<Down> (n div k * k)) k", "apply (subst list_slice_eq_list_slice_take[of \"f \\<Down> n\", symmetric])"], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < k \\<Longrightarrow>\n    list_slice (f \\<Down> n \\<down> (length (f \\<Down> n) div k * k)) k =\n    list_slice (f \\<Down> (n div k * k)) k", "apply (simp add: div_mult_le min_eqR)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma ilist_slice_i_append_mod: \"\n  length xs mod k = 0 \\<Longrightarrow> \n  ilist_slice (xs \\<frown> f) k = list_slice xs k \\<frown> ilist_slice f k\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length xs mod k = 0 \\<Longrightarrow>\n    ilist_slice (xs \\<frown> f) k = list_slice xs k \\<frown> ilist_slice f k", "apply (simp add: ilist_eq_iff ilist_slice_nth i_append_nth list_slice_length)"], ["proof (prove)\ngoal (1 subgoal):\n 1. length xs mod k = 0 \\<Longrightarrow>\n    \\<forall>x.\n       (x < length xs div k \\<longrightarrow>\n        map (xs \\<frown> f) [x * k..<k + x * k] =\n        list_slice xs k ! x) \\<and>\n       (\\<not> x < length xs div k \\<longrightarrow>\n        map (xs \\<frown> f) [x * k..<k + x * k] =\n        map f [(x - length xs div k) * k..<k + (x - length xs div k) * k])", "apply (clarsimp simp: mult.commute[of k] elim!: dvdE, rename_tac n i)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n i.\n       \\<lbrakk>length xs = n * k; 0 < k\\<rbrakk>\n       \\<Longrightarrow> (i < n \\<longrightarrow>\n                          map (xs \\<frown> f) [i * k..<k + i * k] =\n                          list_slice xs k ! i) \\<and>\n                         (\\<not> i < n \\<longrightarrow>\n                          map (xs \\<frown> f) [i * k..<k + i * k] =\n                          map f [(i - n) * k..<k + (i - n) * k])", "apply (intro conjI impI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>n i.\n       \\<lbrakk>length xs = n * k; 0 < k; i < n\\<rbrakk>\n       \\<Longrightarrow> map (xs \\<frown> f) [i * k..<k + i * k] =\n                         list_slice xs k ! i\n 2. \\<And>n i.\n       \\<lbrakk>length xs = n * k; 0 < k; \\<not> i < n\\<rbrakk>\n       \\<Longrightarrow> map (xs \\<frown> f) [i * k..<k + i * k] =\n                         map f [(i - n) * k..<k + (i - n) * k]", "apply (simp add: list_slice_nth)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>n i.\n       \\<lbrakk>length xs = n * k; 0 < k; i < n\\<rbrakk>\n       \\<Longrightarrow> map (xs \\<frown> f) [i * k..<k + i * k] =\n                         xs \\<up> (i * k) \\<down> k\n 2. \\<And>n i.\n       \\<lbrakk>length xs = n * k; 0 < k; \\<not> i < n\\<rbrakk>\n       \\<Longrightarrow> map (xs \\<frown> f) [i * k..<k + i * k] =\n                         map f [(i - n) * k..<k + (i - n) * k]", "apply (subgoal_tac \"k \\<le> n * k - i * k\")"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>n i.\n       \\<lbrakk>length xs = n * k; 0 < k; i < n;\n        k \\<le> n * k - i * k\\<rbrakk>\n       \\<Longrightarrow> map (xs \\<frown> f) [i * k..<k + i * k] =\n                         xs \\<up> (i * k) \\<down> k\n 2. \\<And>n i.\n       \\<lbrakk>length xs = n * k; 0 < k; i < n\\<rbrakk>\n       \\<Longrightarrow> k \\<le> n * k - i * k\n 3. \\<And>n i.\n       \\<lbrakk>length xs = n * k; 0 < k; \\<not> i < n\\<rbrakk>\n       \\<Longrightarrow> map (xs \\<frown> f) [i * k..<k + i * k] =\n                         map f [(i - n) * k..<k + (i - n) * k]", "prefer 2"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>n i.\n       \\<lbrakk>length xs = n * k; 0 < k; i < n\\<rbrakk>\n       \\<Longrightarrow> k \\<le> n * k - i * k\n 2. \\<And>n i.\n       \\<lbrakk>length xs = n * k; 0 < k; i < n;\n        k \\<le> n * k - i * k\\<rbrakk>\n       \\<Longrightarrow> map (xs \\<frown> f) [i * k..<k + i * k] =\n                         xs \\<up> (i * k) \\<down> k\n 3. \\<And>n i.\n       \\<lbrakk>length xs = n * k; 0 < k; \\<not> i < n\\<rbrakk>\n       \\<Longrightarrow> map (xs \\<frown> f) [i * k..<k + i * k] =\n                         map f [(i - n) * k..<k + (i - n) * k]", "apply (drule_tac m=i in Suc_leI)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>n i.\n       \\<lbrakk>length xs = n * k; 0 < k; Suc i \\<le> n\\<rbrakk>\n       \\<Longrightarrow> k \\<le> n * k - i * k\n 2. \\<And>n i.\n       \\<lbrakk>length xs = n * k; 0 < k; i < n;\n        k \\<le> n * k - i * k\\<rbrakk>\n       \\<Longrightarrow> map (xs \\<frown> f) [i * k..<k + i * k] =\n                         xs \\<up> (i * k) \\<down> k\n 3. \\<And>n i.\n       \\<lbrakk>length xs = n * k; 0 < k; \\<not> i < n\\<rbrakk>\n       \\<Longrightarrow> map (xs \\<frown> f) [i * k..<k + i * k] =\n                         map f [(i - n) * k..<k + (i - n) * k]", "apply (drule mult_le_mono1[of _ _ k])"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>n i.\n       \\<lbrakk>length xs = n * k; 0 < k; Suc i * k \\<le> n * k\\<rbrakk>\n       \\<Longrightarrow> k \\<le> n * k - i * k\n 2. \\<And>n i.\n       \\<lbrakk>length xs = n * k; 0 < k; i < n;\n        k \\<le> n * k - i * k\\<rbrakk>\n       \\<Longrightarrow> map (xs \\<frown> f) [i * k..<k + i * k] =\n                         xs \\<up> (i * k) \\<down> k\n 3. \\<And>n i.\n       \\<lbrakk>length xs = n * k; 0 < k; \\<not> i < n\\<rbrakk>\n       \\<Longrightarrow> map (xs \\<frown> f) [i * k..<k + i * k] =\n                         map f [(i - n) * k..<k + (i - n) * k]", "apply simp"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>n i.\n       \\<lbrakk>length xs = n * k; 0 < k; i < n;\n        k \\<le> n * k - i * k\\<rbrakk>\n       \\<Longrightarrow> map (xs \\<frown> f) [i * k..<k + i * k] =\n                         xs \\<up> (i * k) \\<down> k\n 2. \\<And>n i.\n       \\<lbrakk>length xs = n * k; 0 < k; \\<not> i < n\\<rbrakk>\n       \\<Longrightarrow> map (xs \\<frown> f) [i * k..<k + i * k] =\n                         map f [(i - n) * k..<k + (i - n) * k]", "apply (fastforce simp: list_eq_iff i_append_nth min_eqR)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n i.\n       \\<lbrakk>length xs = n * k; 0 < k; \\<not> i < n\\<rbrakk>\n       \\<Longrightarrow> map (xs \\<frown> f) [i * k..<k + i * k] =\n                         map f [(i - n) * k..<k + (i - n) * k]", "apply (simp add: ilist_eq_iff list_eq_iff i_append_nth linorder_not_less)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n i.\n       \\<lbrakk>length xs = n * k; 0 < k; n \\<le> i\\<rbrakk>\n       \\<Longrightarrow> \\<forall>ia.\n                            (i * k + ia < n * k \\<longrightarrow>\n                             ia < k \\<longrightarrow>\n                             xs ! (i * k + ia) =\n                             f ((i - n) * k + ia)) \\<and>\n                            (n * k \\<le> i * k + ia \\<longrightarrow>\n                             ia < k \\<longrightarrow>\n                             f (i * k + ia - n * k) = f ((i - n) * k + ia))", "apply (clarify, rename_tac j)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n i j.\n       \\<lbrakk>length xs = n * k; 0 < k; n \\<le> i\\<rbrakk>\n       \\<Longrightarrow> (i * k + j < n * k \\<longrightarrow>\n                          j < k \\<longrightarrow>\n                          xs ! (i * k + j) = f ((i - n) * k + j)) \\<and>\n                         (n * k \\<le> i * k + j \\<longrightarrow>\n                          j < k \\<longrightarrow>\n                          f (i * k + j - n * k) = f ((i - n) * k + j))", "apply (subgoal_tac \"n * k \\<le> i * k + j\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>n i j.\n       \\<lbrakk>length xs = n * k; 0 < k; n \\<le> i;\n        n * k \\<le> i * k + j\\<rbrakk>\n       \\<Longrightarrow> (i * k + j < n * k \\<longrightarrow>\n                          j < k \\<longrightarrow>\n                          xs ! (i * k + j) = f ((i - n) * k + j)) \\<and>\n                         (n * k \\<le> i * k + j \\<longrightarrow>\n                          j < k \\<longrightarrow>\n                          f (i * k + j - n * k) = f ((i - n) * k + j))\n 2. \\<And>n i j.\n       \\<lbrakk>length xs = n * k; 0 < k; n \\<le> i\\<rbrakk>\n       \\<Longrightarrow> n * k \\<le> i * k + j", "prefer 2"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>n i j.\n       \\<lbrakk>length xs = n * k; 0 < k; n \\<le> i\\<rbrakk>\n       \\<Longrightarrow> n * k \\<le> i * k + j\n 2. \\<And>n i j.\n       \\<lbrakk>length xs = n * k; 0 < k; n \\<le> i;\n        n * k \\<le> i * k + j\\<rbrakk>\n       \\<Longrightarrow> (i * k + j < n * k \\<longrightarrow>\n                          j < k \\<longrightarrow>\n                          xs ! (i * k + j) = f ((i - n) * k + j)) \\<and>\n                         (n * k \\<le> i * k + j \\<longrightarrow>\n                          j < k \\<longrightarrow>\n                          f (i * k + j - n * k) = f ((i - n) * k + j))", "apply (simp add: trans_le_add1)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n i j.\n       \\<lbrakk>length xs = n * k; 0 < k; n \\<le> i;\n        n * k \\<le> i * k + j\\<rbrakk>\n       \\<Longrightarrow> (i * k + j < n * k \\<longrightarrow>\n                          j < k \\<longrightarrow>\n                          xs ! (i * k + j) = f ((i - n) * k + j)) \\<and>\n                         (n * k \\<le> i * k + j \\<longrightarrow>\n                          j < k \\<longrightarrow>\n                          f (i * k + j - n * k) = f ((i - n) * k + j))", "apply (simp add: diff_mult_distrib)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "corollary ilist_slice_append_mult: \"\n  length xs = m * k \\<Longrightarrow> \n  ilist_slice (xs \\<frown> f) k = list_slice xs k \\<frown> ilist_slice f k\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length xs = m * k \\<Longrightarrow>\n    ilist_slice (xs \\<frown> f) k = list_slice xs k \\<frown> ilist_slice f k", "by (simp add: ilist_slice_i_append_mod)"], ["", "end"]]}