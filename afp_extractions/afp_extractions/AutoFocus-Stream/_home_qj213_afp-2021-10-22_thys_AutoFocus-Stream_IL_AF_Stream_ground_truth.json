{"file_name": "/home/qj213/afp-2021-10-22/thys/AutoFocus-Stream/IL_AF_Stream.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/AutoFocus-Stream", "problem_names": ["lemma f_join_aux_length: \"\n  \\<And>n. length (f_join_aux xs n I) = card (I \\<inter> {n..<n + length xs})\"", "lemma f_join_aux_nth[rule_format]: \"\n  \\<forall>n i. i < card (I \\<inter> {n..<n + length xs}) \\<longrightarrow>\n  (f_join_aux xs n I) ! i = xs ! (((I \\<inter> {n..<n + length xs}) \\<rightarrow> i) - n)\"", "lemma f_join_length: \"length (xs \\<Join>\\<^sub>f I) = card (I \\<down>< length xs)\"", "lemma f_join_nth: \"n < length (xs \\<Join>\\<^sub>f I) \\<Longrightarrow> (xs \\<Join>\\<^sub>f I) ! n = xs ! (I \\<rightarrow> n)\"", "lemma f_join_nth2: \"n < card (I \\<down>< length xs) \\<Longrightarrow> (xs \\<Join>\\<^sub>f I) ! n = xs ! (I \\<rightarrow> n)\"", "lemma f_join_empty: \"xs \\<Join>\\<^sub>f {} = []\"", "lemma f_join_Nil: \"[] \\<Join>\\<^sub>f I = []\"", "lemma f_join_Nil_conv: \"(xs \\<Join>\\<^sub>f I = []) = (I \\<down>< length xs = {})\"", "lemma f_join_Nil_conv': \"(xs \\<Join>\\<^sub>f I = []) = (\\<forall>i<length xs. i \\<notin> I)\"", "lemma f_join_all_conv: \"(xs \\<Join>\\<^sub>f I = xs) = ({..<length xs} \\<subseteq> I)\"", "lemma f_join_all: \"{..<length xs} \\<subseteq> I \\<Longrightarrow> xs \\<Join>\\<^sub>f I = xs\"", "lemma f_join_union: \"\n  \\<lbrakk> finite A; Max A < iMin B \\<rbrakk> \\<Longrightarrow> xs \\<Join>\\<^sub>f (A \\<union> B) = xs \\<Join>\\<^sub>f A @ (xs \\<Join>\\<^sub>f B)\"", "lemma f_join_singleton_if: \"\n  xs \\<Join>\\<^sub>f {n} = (if n < length xs then [xs ! n] else [])\"", "lemma f_join_insert: \"\n  n < length xs \\<Longrightarrow>\n  xs \\<Join>\\<^sub>f insert n I = xs \\<Join>\\<^sub>f (I \\<down>< n) @ (xs ! n) # (xs \\<Join>\\<^sub>f (I \\<down>> n))\"", "lemma f_join_snoc: \"\n  (xs @ [x]) \\<Join>\\<^sub>f I =\n  xs \\<Join>\\<^sub>f I @ (if length xs \\<in> I then [x] else [])\"", "lemma f_join_append: \"\n  (xs @ ys) \\<Join>\\<^sub>f I = xs \\<Join>\\<^sub>f I @ ys \\<Join>\\<^sub>f (I \\<oplus>- (length xs))\"", "lemma take_f_join_eq1: \"\n  n < card (I \\<down>< length xs) \\<Longrightarrow>\n  (xs \\<Join>\\<^sub>f I) \\<down> n = xs \\<Join>\\<^sub>f (I \\<down>< (I \\<rightarrow> n))\"", "lemma take_f_join_eq2: \"\n  card (I \\<down>< length xs) \\<le> n \\<Longrightarrow> (xs \\<Join>\\<^sub>f I) \\<down> n = xs \\<Join>\\<^sub>f I\"", "lemma take_f_join_if: \"\n  (xs \\<Join>\\<^sub>f I) \\<down> n =\n  (if n < card (I \\<down>< length xs) then xs \\<Join>\\<^sub>f (I \\<down>< (I \\<rightarrow> n)) else xs \\<Join>\\<^sub>f I)\"", "lemma drop_f_join_eq1: \"\n  n < card (I \\<down>< length xs) \\<Longrightarrow>\n  (xs \\<Join>\\<^sub>f I) \\<up> n = xs \\<Join>\\<^sub>f (I \\<down>\\<ge> (I \\<rightarrow> n))\"", "lemma drop_f_join_eq2: \"\n  card (I \\<down>< length xs) \\<le> n \\<Longrightarrow> (xs \\<Join>\\<^sub>f I) \\<up> n = []\"", "lemma drop_f_join_if: \"\n  (xs \\<Join>\\<^sub>f I) \\<up> n =\n  (if n < card (I \\<down>< length xs) then xs \\<Join>\\<^sub>f (I \\<down>\\<ge> (I \\<rightarrow> n)) else [])\"", "lemma f_join_take: \"xs \\<down> n \\<Join>\\<^sub>f I = xs \\<Join>\\<^sub>f (I \\<down>< n)\"", "lemma f_join_drop: \"xs \\<up> n \\<Join>\\<^sub>f I = xs \\<Join>\\<^sub>f (I \\<oplus> n)\"", "lemma cut_less_eq_imp_f_join_eq: \"\n  A \\<down>< length xs = B \\<down>< length xs \\<Longrightarrow> xs \\<Join>\\<^sub>f A = xs \\<Join>\\<^sub>f B\"", "lemma take_Suc_Max_eq_imp_f_join_eq: \"\n  \\<lbrakk> finite I; xs \\<down> Suc (Max I) = ys \\<down> Suc (Max I) \\<rbrakk> \\<Longrightarrow>\n  xs \\<Join>\\<^sub>f I = ys \\<Join>\\<^sub>f I\"", "lemma i_join_nth: \"(f \\<Join>\\<^sub>i I) n = f (I \\<rightarrow> n)\"", "lemma i_join_UNIV: \"f \\<Join>\\<^sub>i UNIV = f\"", "lemma i_join_union: \"\n  \\<lbrakk> finite A; Max A < iMin B; B \\<noteq> {} \\<rbrakk> \\<Longrightarrow>\n  f \\<Join>\\<^sub>i (A \\<union> B) = (f \\<Down> Suc (Max A) \\<Join>\\<^sub>f A) \\<frown> (f \\<Join>\\<^sub>i B)\"", "lemma i_join_singleton: \"f \\<Join>\\<^sub>i {a} = (\\<lambda>n. f a)\"", "lemma i_join_insert: \"\n  f \\<Join>\\<^sub>i (insert n I) =\n  (f \\<Down> n) \\<Join>\\<^sub>f (I \\<down>< n) \\<frown> [f n] \\<frown> (\n    if I \\<down>> n = {} then (\\<lambda>x. f n) else f \\<Join>\\<^sub>i (I \\<down>> n))\"", "lemma i_join_i_append: \"\n  infinite I \\<Longrightarrow> (xs \\<frown> f) \\<Join>\\<^sub>i I = (xs \\<Join>\\<^sub>f I) \\<frown> (f \\<Join>\\<^sub>i (I \\<oplus>- length xs))\"", "lemma i_take_i_join: \"infinite I \\<Longrightarrow> f \\<Join>\\<^sub>i I \\<Down> n = f \\<Down> (I \\<rightarrow> n) \\<Join>\\<^sub>f I\"", "lemma i_drop_i_join: \"I \\<noteq> {} \\<Longrightarrow> f \\<Join>\\<^sub>i I \\<Up> n = f \\<Join>\\<^sub>i (I \\<down>\\<ge> (I \\<rightarrow> n))\"", "lemma i_join_i_take: \"f \\<Down> n \\<Join>\\<^sub>f I = f \\<Join>\\<^sub>i I \\<Down> card (I \\<down>< n)\"", "lemma i_join_i_drop: \"I \\<noteq> {} \\<Longrightarrow> f \\<Up> n \\<Join>\\<^sub>i I = f \\<Join>\\<^sub>i (I \\<oplus> n)\"", "lemma i_join_finite_nth_ge_card_eq_nth_Max: \"\n  \\<lbrakk> finite I; I \\<noteq> {}; card I \\<le> Suc n \\<rbrakk> \\<Longrightarrow> (f \\<Join>\\<^sub>i I) n = f (Max I)\"", "lemma i_join_finite_i_drop_card_eq_const_nth_Max: \"\n  \\<lbrakk> finite I; I \\<noteq> {} \\<rbrakk> \\<Longrightarrow> (f \\<Join>\\<^sub>i I) \\<Up> (card I) = (\\<lambda>n. f (Max I))\"", "lemma i_join_finite_i_append_nth_Max_conv: \"\n  \\<lbrakk> finite I; I \\<noteq> {} \\<rbrakk> \\<Longrightarrow> (f \\<Join>\\<^sub>i I) = f \\<Down> Suc (Max I) \\<Join>\\<^sub>f I \\<frown> (\\<lambda>n. f (Max I))\"", "lemma i_f_join_length: \"finite I \\<Longrightarrow> length (f \\<Join>\\<^bsub>i-f\\<^esub> I) = card I\"", "lemma i_f_join_nth: \"n < card I \\<Longrightarrow> f \\<Join>\\<^bsub>i-f\\<^esub> I ! n = f (I \\<rightarrow> n)\"", "lemma i_f_join_empty: \"f \\<Join>\\<^bsub>i-f\\<^esub> {} = []\"", "lemma i_f_join_eq_i_join_i_take: \"\n  finite I \\<Longrightarrow> f \\<Join>\\<^bsub>i-f\\<^esub> I = f \\<Join>\\<^sub>i I \\<Down> (card I)\"", "lemma i_f_join_union: \"\n  \\<lbrakk> finite A; finite B; Max A < iMin B \\<rbrakk> \\<Longrightarrow>\n  f \\<Join>\\<^bsub>i-f\\<^esub> (A \\<union> B) = f \\<Join>\\<^bsub>i-f\\<^esub> A @ f \\<Join>\\<^bsub>i-f\\<^esub> B\"", "lemma i_f_join_singleton: \"f \\<Join>\\<^bsub>i-f\\<^esub> {n} = [f n]\"", "lemma i_f_join_insert: \"\n  finite I \\<Longrightarrow>\n  f \\<Join>\\<^bsub>i-f\\<^esub> insert n I = f \\<Join>\\<^bsub>i-f\\<^esub> (I \\<down>< n) @ f n # f \\<Join>\\<^bsub>i-f\\<^esub> (I \\<down>> n)\"", "lemma take_i_f_join_eq1: \"\n  n < card I \\<Longrightarrow> f \\<Join>\\<^bsub>i-f\\<^esub> I \\<down> n = f \\<Join>\\<^bsub>i-f\\<^esub> (I \\<down>< (I \\<rightarrow> n))\"", "lemma take_i_f_join_eq2: \"\n  \\<lbrakk> finite I; card I \\<le> n \\<rbrakk> \\<Longrightarrow> f \\<Join>\\<^bsub>i-f\\<^esub> I \\<down> n = f \\<Join>\\<^bsub>i-f\\<^esub> I\"", "lemma take_i_f_join_if: \"\n  finite I \\<Longrightarrow>\n  f \\<Join>\\<^bsub>i-f\\<^esub> I \\<down> n = (if n < card I then f \\<Join>\\<^bsub>i-f\\<^esub> (I \\<down>< (I \\<rightarrow> n)) else f \\<Join>\\<^bsub>i-f\\<^esub> I)\"", "lemma drop_i_f_join_eq1: \"\n  n < card I \\<Longrightarrow> f \\<Join>\\<^bsub>i-f\\<^esub> I \\<up> n = f \\<Join>\\<^bsub>i-f\\<^esub> (I \\<down>\\<ge> (I \\<rightarrow> n))\"", "lemma drop_i_f_join_eq2: \"\n  \\<lbrakk> finite I; card I \\<le> n \\<rbrakk> \\<Longrightarrow> f \\<Join>\\<^bsub>i-f\\<^esub> I \\<up> n = []\"", "lemma drop_i_f_join_if: \"\n  finite I \\<Longrightarrow>\n  f \\<Join>\\<^bsub>i-f\\<^esub> I \\<up> n = (if n < card I then f \\<Join>\\<^bsub>i-f\\<^esub> (I \\<down>\\<ge> (I \\<rightarrow> n)) else [])\"", "lemma i_f_join_i_drop: \"\n  finite I \\<Longrightarrow> f \\<Up> n \\<Join>\\<^bsub>i-f\\<^esub> I = f \\<Join>\\<^bsub>i-f\\<^esub> (I \\<oplus> n)\"", "lemma i_take_Suc_Max_eq_imp_i_f_join_eq: \"\n  f \\<Down> Suc (Max I) = g \\<Down> Suc (Max I) \\<Longrightarrow> f \\<Join>\\<^bsub>i-f\\<^esub> I = g \\<Join>\\<^bsub>i-f\\<^esub> I\"", "lemma i_take_i_join_eq_i_f_join: \"\n  infinite I \\<Longrightarrow> f \\<Join>\\<^sub>i I \\<Down> n = f \\<Join>\\<^bsub>i-f\\<^esub> (I \\<down>< (I \\<rightarrow> n))\"", "lemma f_join_iFROM: \"xs \\<Join>\\<^sub>f [n\\<dots>] = xs \\<up> n\"", "lemma i_join_iFROM: \"f \\<Join>\\<^sub>i [n\\<dots>] = f \\<Up> n\"", "lemma f_join_iIN: \"xs \\<Join>\\<^sub>f [n\\<dots>,d] = xs \\<up> n \\<down> Suc d\"", "lemma i_f_join_iIN: \"f \\<Join>\\<^bsub>i-f\\<^esub> [n\\<dots>,d] = f \\<Up> n \\<Down> Suc d\"", "lemma f_join_iTILL: \"xs \\<Join>\\<^sub>f [\\<dots>n] = xs \\<down> (Suc n)\"", "lemma i_f_join_iTILL: \"f \\<Join>\\<^bsub>i-f\\<^esub> [\\<dots>n] = f \\<Down> Suc n\"", "lemma f_join_f_expand_iT_Mult: \"\n  0 < k \\<Longrightarrow> xs \\<odot>\\<^sub>f k \\<Join>\\<^sub>f (I \\<otimes> k) = xs \\<Join>\\<^sub>f I\"", "lemma i_join_i_expand_iT_Mult: \"\n  \\<lbrakk> 0 < k; I \\<noteq> {} \\<rbrakk> \\<Longrightarrow> f \\<odot>\\<^sub>i k \\<Join>\\<^sub>i (I \\<otimes> k) = f \\<Join>\\<^sub>i I\"", "lemma i_f_join_i_expand_iT_Mult: \"\n  \\<lbrakk> 0 < k; finite I \\<rbrakk> \\<Longrightarrow> f \\<odot>\\<^sub>i k \\<Join>\\<^bsub>i-f\\<^esub> (I \\<otimes> k) = f \\<Join>\\<^bsub>i-f\\<^esub> I\"", "lemma f_join_f_shrink_iT_Plus_iT_Div_mod: \"\n  \\<lbrakk> 0 < k; \\<forall>x\\<in>I. x mod k = 0 \\<rbrakk> \\<Longrightarrow>\n  (xs \\<longmapsto>\\<^sub>f k) \\<Join>\\<^sub>f (I \\<oplus> (k - 1)) = xs \\<div>\\<^sub>f k \\<Join>\\<^sub>f (I \\<oslash> k)\"", "lemma i_join_i_shrink_iT_Plus_iT_Div_mod: \"\n  \\<lbrakk> 0 < k; I \\<noteq> {}; \\<forall>x\\<in>I. x mod k = 0 \\<rbrakk> \\<Longrightarrow>\n  (f \\<longmapsto>\\<^sub>i k) \\<Join>\\<^sub>i (I \\<oplus> (k - 1))= f \\<div>\\<^sub>i k \\<Join>\\<^sub>i (I \\<oslash> k)\"", "lemma i_f_join_i_shrink_iT_Plus_iT_Div_mod: \"\n  \\<lbrakk> 0 < k; finite I; \\<forall>x\\<in>I. x mod k = 0 \\<rbrakk> \\<Longrightarrow>\n  (f \\<longmapsto>\\<^sub>i k) \\<Join>\\<^bsub>i-f\\<^esub> (I \\<oplus> (k - 1))= f \\<div>\\<^sub>i k \\<Join>\\<^bsub>i-f\\<^esub> (I \\<oslash> k)\"", "lemma f_join_f_shrink_iT_Div_mod: \"\n  \\<lbrakk> 0 < k; \\<forall>x\\<in>I. x mod k = k - 1 \\<rbrakk> \\<Longrightarrow>\n  (xs \\<longmapsto>\\<^sub>f k) \\<Join>\\<^sub>f I = xs \\<div>\\<^sub>f k \\<Join>\\<^sub>f (I \\<oslash> k)\"", "lemma i_join_i_shrink_iT_Div_mod: \"\n  \\<lbrakk> 0 < k; I \\<noteq> {}; \\<forall>x\\<in>I. x mod k = k - 1 \\<rbrakk> \\<Longrightarrow>\n  (f \\<longmapsto>\\<^sub>i k) \\<Join>\\<^sub>i I= f \\<div>\\<^sub>i k \\<Join>\\<^sub>i (I \\<oslash> k)\"", "lemma i_f_join_i_shrink_iT_Div_mod: \"\n  \\<lbrakk> 0 < k; finite I; \\<forall>x\\<in>I. x mod k = k - 1 \\<rbrakk> \\<Longrightarrow>\n  (f \\<longmapsto>\\<^sub>i k) \\<Join>\\<^bsub>i-f\\<^esub> I = f \\<div>\\<^sub>i k \\<Join>\\<^bsub>i-f\\<^esub> (I \\<oslash> k)\"", "lemma f_join_f_expand_iMOD: \"\n  0 < k \\<Longrightarrow> xs \\<odot>\\<^sub>f k \\<Join>\\<^sub>f [n * k, mod k] = xs \\<Join>\\<^sub>f [n\\<dots>]\"", "lemma f_join_f_expand_iMODb: \"\n  0 < k \\<Longrightarrow> xs \\<odot>\\<^sub>f k \\<Join>\\<^sub>f [n * k, mod k, d] = xs \\<Join>\\<^sub>f [n\\<dots>,d]\"", "lemma i_join_i_expand_iMOD: \"\n  0 < k \\<Longrightarrow> f \\<odot>\\<^sub>i k \\<Join>\\<^sub>i [n * k, mod k] = f \\<Join>\\<^sub>i [n\\<dots>]\"", "lemma i_join_i_expand_iMODb: \"\n  0 < k \\<Longrightarrow> f \\<odot>\\<^sub>i k \\<Join>\\<^sub>i [n * k, mod k, d] = f \\<Join>\\<^sub>i [n\\<dots>,d]\"", "lemma i_f_join_i_expand_iMODb: \"\n  0 < k \\<Longrightarrow> f \\<odot>\\<^sub>i k \\<Join>\\<^bsub>i-f\\<^esub> [n * k, mod k, d] = f \\<Join>\\<^bsub>i-f\\<^esub> [n\\<dots>,d]\"", "lemma f_join_f_shrink_iMOD: \"\n  0 < k \\<Longrightarrow> (xs \\<longmapsto>\\<^sub>f k) \\<Join>\\<^sub>f [n * k + (k - 1), mod k] = xs \\<div>\\<^sub>f k \\<Join>\\<^sub>f [n\\<dots>]\"", "lemma f_join_f_shrink_iMODb: \"\n  0 < k \\<Longrightarrow> (xs \\<longmapsto>\\<^sub>f k) \\<Join>\\<^sub>f [n * k + (k - 1), mod k, d] = xs \\<div>\\<^sub>f k \\<Join>\\<^sub>f [n\\<dots>,d]\"", "lemma i_join_i_shrink_iMOD: \"\n  0 < k \\<Longrightarrow> (f \\<longmapsto>\\<^sub>i k) \\<Join>\\<^sub>i [n * k + (k - 1), mod k] = f \\<div>\\<^sub>i k \\<Join>\\<^sub>i [n\\<dots>]\"", "lemma i_f_join_i_shrink_iMODb: \"\n  0 < k \\<Longrightarrow> (f \\<longmapsto>\\<^sub>i k) \\<Join>\\<^bsub>i-f\\<^esub> [n * k + (k - 1), mod k, d] = f \\<div>\\<^sub>i k \\<Join>\\<^bsub>i-f\\<^esub> [n\\<dots>,d]\"", "lemma i_shrink_eq_NoMsg_iAll_conv: \"\n  0 < k \\<Longrightarrow> ((s \\<div>\\<^sub>i k) t = \\<NoMsg>) = (\\<box> t1 [t * k\\<dots>,k - Suc 0]. s t1 = \\<NoMsg>)\"", "lemma i_shrink_eq_NoMsg_iAll_conv2: \"\n  0 < k \\<Longrightarrow> ((s \\<div>\\<^sub>i k) t = \\<NoMsg>) = (\\<box> t1 [\\<dots>k - 1] \\<oplus> (t * k). s t1 = \\<NoMsg>)\"", "lemma i_shrink_eq_Msg_iEx_iAll_conv: \"\n  \\<lbrakk> 0 < k; m \\<noteq> \\<NoMsg> \\<rbrakk> \\<Longrightarrow>\n  ((s \\<div>\\<^sub>i k) t = m) =\n  (\\<diamond> t1 [t * k\\<dots>,k - Suc 0]. s t1 = m \\<and>\n    (\\<box> t2 [Suc t1\\<dots>]. t2 \\<le> t * k + k - Suc 0 \\<longrightarrow> s t2 = \\<NoMsg>))\"", "lemma i_shrink_eq_Msg_iEx_iAll_conv2: \"\n  \\<lbrakk> 0 < k; m \\<noteq> \\<NoMsg> \\<rbrakk> \\<Longrightarrow>\n  ((s \\<div>\\<^sub>i k) t = m) =\n  (\\<diamond> t1 [\\<dots>k - 1] \\<oplus> (t * k). s t1 = m \\<and>\n    (\\<box> t2 [1\\<dots>] \\<oplus> t1 . t2 \\<le> t * k + k - 1 \\<longrightarrow> s t2 = \\<NoMsg>))\"", "lemma i_shrink_eq_Msg_iEx_iAll_cut_greater_conv: \"\n  \\<lbrakk> 0 < k; m \\<noteq> \\<NoMsg> \\<rbrakk> \\<Longrightarrow>\n  ((s \\<div>\\<^sub>i k) t = m) =\n  (\\<diamond> t1 [t * k\\<dots>,k - Suc 0]. s t1 = m \\<and>\n    (\\<box> t2 [t * k\\<dots>,k - Suc 0] \\<down>> t1. s t2 = \\<NoMsg>))\"", "lemma i_shrink_eq_Msg_iEx_iAll_cut_greater_conv2: \"\n  \\<lbrakk> 0 < k; m \\<noteq> \\<NoMsg> \\<rbrakk> \\<Longrightarrow>\n  ((s \\<div>\\<^sub>i k) t = m) =\n  (\\<diamond> t1 [\\<dots>k - 1] \\<oplus> (t * k). s t1 = m \\<and>\n    (\\<box> t2 ([\\<dots>k - 1] \\<oplus> (t * k)) \\<down>> t1. s t2 = \\<NoMsg>))\"", "lemma i_shrink_eq_Msg_iSince_conv: \"\n  \\<lbrakk> 0 < k; m \\<noteq> \\<NoMsg> \\<rbrakk> \\<Longrightarrow>\n  ((s \\<div>\\<^sub>i k) t = m) =\n  (s t2 = \\<NoMsg>. t2 \\<S> t1 [t * k\\<dots>,k - Suc 0]. s t1 = m)\"", "lemma i_shrink_eq_Msg_iSince_conv2: \"\n  \\<lbrakk> 0 < k; m \\<noteq> \\<NoMsg> \\<rbrakk> \\<Longrightarrow>\n  ((s \\<div>\\<^sub>i k) t = m) =\n  (s t2 = \\<NoMsg>. t2 \\<S> t1 [\\<dots>k - 1] \\<oplus> (t * k). s t1 = m)\"", "lemma iT_Mult_iAll_i_expand_nth_iff:\n  \"0 < k \\<Longrightarrow> (\\<box> t (I \\<otimes> k). P ((f \\<odot>\\<^sub>i k) t)) = (\\<box> t I. P (f t))\"", "lemma i_shrink_eq_NoMsg_iAll_start_event_conv: \"\n  \\<lbrakk> 0 < k; \\<And>t. event t = (t mod k = 0); t0 = t * k \\<rbrakk> \\<Longrightarrow>\n  ((s \\<div>\\<^sub>i k) t = \\<NoMsg>) =\n  (s t0 = \\<NoMsg> \\<and> (\\<circle> t' t0 [0\\<dots>]. (s t1 = \\<NoMsg>. t1 \\<U> t2 ([0\\<dots>] \\<oplus> t'). event t2)))\"", "lemma i_shrink_eq_Msg_iUntil_start_event_conv: \"\n  \\<lbrakk> 0 < k; m \\<noteq> \\<NoMsg>; \\<And>t. event t = (t mod k = 0); t0 = t * k \\<rbrakk> \\<Longrightarrow>\n  ((s \\<div>\\<^sub>i k) t = m) = (\n  (s t0 = m \\<and> (\\<circle> t' t0 [0\\<dots>]. (s t1 = \\<NoMsg>. t1 \\<U> t2 ([0\\<dots>] \\<oplus> t'). event t2))) \\<or>\n  (\\<circle> t' t0 [0\\<dots>]. (\\<not> event t1. t1 \\<U> t2 ([0\\<dots>] \\<oplus> t'). (\n    s t2 = m \\<and> \\<not> event t2 \\<and> (\\<circle> t'' t2 [0\\<dots>].\n      (s t3 = \\<NoMsg>. t3 \\<U> t4 ([0\\<dots>] \\<oplus> t''). event t4))))))\"", "lemma i_shrink_eq_NoMsg_iAll_finish_event_conv: \"\n  \\<lbrakk> 1 < k; \\<And>t. event t = (t mod k = k - 1); t0 = t * k \\<rbrakk> \\<Longrightarrow>\n  ((s \\<div>\\<^sub>i k) t = \\<NoMsg>) =\n  (s t0 = \\<NoMsg> \\<and> (\\<circle> t' t0 [0\\<dots>]. (s t1 = \\<NoMsg>. t1 \\<U> t2 ([0\\<dots>] \\<oplus> t'). (event t2 \\<and> s t2 = \\<NoMsg>))))\"", "lemma i_shrink_eq_Msg_iUntil_finish_event_conv: \"\n  \\<lbrakk> 1 < k; m \\<noteq> \\<NoMsg>; \\<And>t. event t = (t mod k = k - 1); t0 = t * k \\<rbrakk> \\<Longrightarrow>\n  ((s \\<div>\\<^sub>i k) t = m) = (\n  (\\<not> event t1. t1 \\<U> t2 ([0\\<dots>] \\<oplus> t0). event t2 \\<and> s t2 = m) \\<or>\n  (\\<not> event t1. t1 \\<U> t2 ([0\\<dots>] \\<oplus> t0). (\\<not> event t2 \\<and> s t2 = m \\<and> (\n    \\<circle> t' t2 [0\\<dots>]. (s t3 = \\<NoMsg>. t3 \\<U> t4 ([0\\<dots>] \\<oplus> t'). event t4 \\<and> s t4 = \\<NoMsg>)))))\""], "translations": [["", "lemma f_join_aux_length: \"\n  \\<And>n. length (f_join_aux xs n I) = card (I \\<inter> {n..<n + length xs})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n.\n       length (f_join_aux xs n I) = card (I \\<inter> {n..<n + length xs})", "apply (induct xs, simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a xs n.\n       (\\<And>n.\n           length (f_join_aux xs n I) =\n           card (I \\<inter> {n..<n + length xs})) \\<Longrightarrow>\n       length (f_join_aux (a # xs) n I) =\n       card (I \\<inter> {n..<n + length (a # xs)})", "apply (simp add: atLeastLessThan_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xs n.\n       (\\<And>n.\n           length (f_join_aux xs n I) =\n           card\n            (I \\<inter>\n             ({n..} \\<inter> {..<n + length xs}))) \\<Longrightarrow>\n       (n \\<in> I \\<longrightarrow>\n        Suc (card\n              (I \\<inter> ({Suc n..} \\<inter> {..<Suc (n + length xs)}))) =\n        card (I \\<inter> ({n..} \\<inter> {..<Suc (n + length xs)}))) \\<and>\n       (n \\<notin> I \\<longrightarrow>\n        card (I \\<inter> ({Suc n..} \\<inter> {..<Suc (n + length xs)})) =\n        card (I \\<inter> ({n..} \\<inter> {..<Suc (n + length xs)})))", "apply (rule_tac t=\"{n..}\" and s=\"insert n {Suc n..}\" in subst, fastforce)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xs n.\n       (\\<And>n.\n           length (f_join_aux xs n I) =\n           card\n            (I \\<inter>\n             ({n..} \\<inter> {..<n + length xs}))) \\<Longrightarrow>\n       (n \\<in> I \\<longrightarrow>\n        Suc (card\n              (I \\<inter> ({Suc n..} \\<inter> {..<Suc (n + length xs)}))) =\n        card\n         (I \\<inter>\n          (insert n {Suc n..} \\<inter> {..<Suc (n + length xs)}))) \\<and>\n       (n \\<notin> I \\<longrightarrow>\n        card (I \\<inter> ({Suc n..} \\<inter> {..<Suc (n + length xs)})) =\n        card\n         (I \\<inter>\n          (insert n {Suc n..} \\<inter> {..<Suc (n + length xs)})))", "apply simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma f_join_aux_nth[rule_format]: \"\n  \\<forall>n i. i < card (I \\<inter> {n..<n + length xs}) \\<longrightarrow>\n  (f_join_aux xs n I) ! i = xs ! (((I \\<inter> {n..<n + length xs}) \\<rightarrow> i) - n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>n i.\n       i < card (I \\<inter> {n..<n + length xs}) \\<longrightarrow>\n       f_join_aux xs n I ! i =\n       xs ! (((I \\<inter> {n..<n + length xs}) \\<rightarrow> i) - n)", "apply (induct xs, simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a xs.\n       \\<forall>n i.\n          i < card (I \\<inter> {n..<n + length xs}) \\<longrightarrow>\n          f_join_aux xs n I ! i =\n          xs !\n          (((I \\<inter> {n..<n + length xs}) \\<rightarrow> i) -\n           n) \\<Longrightarrow>\n       \\<forall>n i.\n          i < card (I \\<inter> {n..<n + length (a # xs)}) \\<longrightarrow>\n          f_join_aux (a # xs) n I ! i =\n          (a # xs) !\n          (((I \\<inter> {n..<n + length (a # xs)}) \\<rightarrow> i) - n)", "apply (clarsimp split del: if_split)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a xs n i.\n       \\<lbrakk>\\<forall>n i.\n                   i < card\n                        (I \\<inter> {n..<n + length xs}) \\<longrightarrow>\n                   f_join_aux xs n I ! i =\n                   xs !\n                   (((I \\<inter> {n..<n + length xs}) \\<rightarrow> i) - n);\n        i < card (I \\<inter> {n..<Suc (n + length xs)})\\<rbrakk>\n       \\<Longrightarrow> ((if n \\<in> I then [a] else []) @\n                          f_join_aux xs (Suc n) I) !\n                         i =\n                         (a # xs) !\n                         (((I \\<inter>\n                            {n..<Suc (n + length xs)}) \\<rightarrow> i) -\n                          n)", "apply (subgoal_tac \"{n..<Suc (n + length xs)} = insert n {Suc n..<Suc (n + length xs)}\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a xs n i.\n       \\<lbrakk>\\<forall>n i.\n                   i < card\n                        (I \\<inter> {n..<n + length xs}) \\<longrightarrow>\n                   f_join_aux xs n I ! i =\n                   xs !\n                   (((I \\<inter> {n..<n + length xs}) \\<rightarrow> i) - n);\n        i < card (I \\<inter> {n..<Suc (n + length xs)});\n        {n..<Suc (n + length xs)} =\n        insert n {Suc n..<Suc (n + length xs)}\\<rbrakk>\n       \\<Longrightarrow> ((if n \\<in> I then [a] else []) @\n                          f_join_aux xs (Suc n) I) !\n                         i =\n                         (a # xs) !\n                         (((I \\<inter>\n                            {n..<Suc (n + length xs)}) \\<rightarrow> i) -\n                          n)\n 2. \\<And>a xs n i.\n       \\<lbrakk>\\<forall>n i.\n                   i < card\n                        (I \\<inter> {n..<n + length xs}) \\<longrightarrow>\n                   f_join_aux xs n I ! i =\n                   xs !\n                   (((I \\<inter> {n..<n + length xs}) \\<rightarrow> i) - n);\n        i < card (I \\<inter> {n..<Suc (n + length xs)})\\<rbrakk>\n       \\<Longrightarrow> {n..<Suc (n + length xs)} =\n                         insert n {Suc n..<Suc (n + length xs)}", "prefer 2"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a xs n i.\n       \\<lbrakk>\\<forall>n i.\n                   i < card\n                        (I \\<inter> {n..<n + length xs}) \\<longrightarrow>\n                   f_join_aux xs n I ! i =\n                   xs !\n                   (((I \\<inter> {n..<n + length xs}) \\<rightarrow> i) - n);\n        i < card (I \\<inter> {n..<Suc (n + length xs)})\\<rbrakk>\n       \\<Longrightarrow> {n..<Suc (n + length xs)} =\n                         insert n {Suc n..<Suc (n + length xs)}\n 2. \\<And>a xs n i.\n       \\<lbrakk>\\<forall>n i.\n                   i < card\n                        (I \\<inter> {n..<n + length xs}) \\<longrightarrow>\n                   f_join_aux xs n I ! i =\n                   xs !\n                   (((I \\<inter> {n..<n + length xs}) \\<rightarrow> i) - n);\n        i < card (I \\<inter> {n..<Suc (n + length xs)});\n        {n..<Suc (n + length xs)} =\n        insert n {Suc n..<Suc (n + length xs)}\\<rbrakk>\n       \\<Longrightarrow> ((if n \\<in> I then [a] else []) @\n                          f_join_aux xs (Suc n) I) !\n                         i =\n                         (a # xs) !\n                         (((I \\<inter>\n                            {n..<Suc (n + length xs)}) \\<rightarrow> i) -\n                          n)", "apply fastforce"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a xs n i.\n       \\<lbrakk>\\<forall>n i.\n                   i < card\n                        (I \\<inter> {n..<n + length xs}) \\<longrightarrow>\n                   f_join_aux xs n I ! i =\n                   xs !\n                   (((I \\<inter> {n..<n + length xs}) \\<rightarrow> i) - n);\n        i < card (I \\<inter> {n..<Suc (n + length xs)});\n        {n..<Suc (n + length xs)} =\n        insert n {Suc n..<Suc (n + length xs)}\\<rbrakk>\n       \\<Longrightarrow> ((if n \\<in> I then [a] else []) @\n                          f_join_aux xs (Suc n) I) !\n                         i =\n                         (a # xs) !\n                         (((I \\<inter>\n                            {n..<Suc (n + length xs)}) \\<rightarrow> i) -\n                          n)", "apply (frule card_gr0_imp_not_empty[OF gr_implies_gr0])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a xs n i.\n       \\<lbrakk>\\<forall>n i.\n                   i < card\n                        (I \\<inter> {n..<n + length xs}) \\<longrightarrow>\n                   f_join_aux xs n I ! i =\n                   xs !\n                   (((I \\<inter> {n..<n + length xs}) \\<rightarrow> i) - n);\n        i < card (I \\<inter> {n..<Suc (n + length xs)});\n        {n..<Suc (n + length xs)} = insert n {Suc n..<Suc (n + length xs)};\n        I \\<inter> {n..<Suc (n + length xs)} \\<noteq> {}\\<rbrakk>\n       \\<Longrightarrow> ((if n \\<in> I then [a] else []) @\n                          f_join_aux xs (Suc n) I) !\n                         i =\n                         (a # xs) !\n                         (((I \\<inter>\n                            {n..<Suc (n + length xs)}) \\<rightarrow> i) -\n                          n)", "apply (case_tac \"n \\<in> I\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a xs n i.\n       \\<lbrakk>\\<forall>n i.\n                   i < card\n                        (I \\<inter> {n..<n + length xs}) \\<longrightarrow>\n                   f_join_aux xs n I ! i =\n                   xs !\n                   (((I \\<inter> {n..<n + length xs}) \\<rightarrow> i) - n);\n        i < card (I \\<inter> {n..<Suc (n + length xs)});\n        {n..<Suc (n + length xs)} = insert n {Suc n..<Suc (n + length xs)};\n        I \\<inter> {n..<Suc (n + length xs)} \\<noteq> {}; n \\<in> I\\<rbrakk>\n       \\<Longrightarrow> ((if n \\<in> I then [a] else []) @\n                          f_join_aux xs (Suc n) I) !\n                         i =\n                         (a # xs) !\n                         (((I \\<inter>\n                            {n..<Suc (n + length xs)}) \\<rightarrow> i) -\n                          n)\n 2. \\<And>a xs n i.\n       \\<lbrakk>\\<forall>n i.\n                   i < card\n                        (I \\<inter> {n..<n + length xs}) \\<longrightarrow>\n                   f_join_aux xs n I ! i =\n                   xs !\n                   (((I \\<inter> {n..<n + length xs}) \\<rightarrow> i) - n);\n        i < card (I \\<inter> {n..<Suc (n + length xs)});\n        {n..<Suc (n + length xs)} = insert n {Suc n..<Suc (n + length xs)};\n        I \\<inter> {n..<Suc (n + length xs)} \\<noteq> {};\n        n \\<notin> I\\<rbrakk>\n       \\<Longrightarrow> ((if n \\<in> I then [a] else []) @\n                          f_join_aux xs (Suc n) I) !\n                         i =\n                         (a # xs) !\n                         (((I \\<inter>\n                            {n..<Suc (n + length xs)}) \\<rightarrow> i) -\n                          n)", "prefer 2"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a xs n i.\n       \\<lbrakk>\\<forall>n i.\n                   i < card\n                        (I \\<inter> {n..<n + length xs}) \\<longrightarrow>\n                   f_join_aux xs n I ! i =\n                   xs !\n                   (((I \\<inter> {n..<n + length xs}) \\<rightarrow> i) - n);\n        i < card (I \\<inter> {n..<Suc (n + length xs)});\n        {n..<Suc (n + length xs)} = insert n {Suc n..<Suc (n + length xs)};\n        I \\<inter> {n..<Suc (n + length xs)} \\<noteq> {};\n        n \\<notin> I\\<rbrakk>\n       \\<Longrightarrow> ((if n \\<in> I then [a] else []) @\n                          f_join_aux xs (Suc n) I) !\n                         i =\n                         (a # xs) !\n                         (((I \\<inter>\n                            {n..<Suc (n + length xs)}) \\<rightarrow> i) -\n                          n)\n 2. \\<And>a xs n i.\n       \\<lbrakk>\\<forall>n i.\n                   i < card\n                        (I \\<inter> {n..<n + length xs}) \\<longrightarrow>\n                   f_join_aux xs n I ! i =\n                   xs !\n                   (((I \\<inter> {n..<n + length xs}) \\<rightarrow> i) - n);\n        i < card (I \\<inter> {n..<Suc (n + length xs)});\n        {n..<Suc (n + length xs)} = insert n {Suc n..<Suc (n + length xs)};\n        I \\<inter> {n..<Suc (n + length xs)} \\<noteq> {}; n \\<in> I\\<rbrakk>\n       \\<Longrightarrow> ((if n \\<in> I then [a] else []) @\n                          f_join_aux xs (Suc n) I) !\n                         i =\n                         (a # xs) !\n                         (((I \\<inter>\n                            {n..<Suc (n + length xs)}) \\<rightarrow> i) -\n                          n)", "apply (simp add: nth_Cons')"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a xs n i.\n       \\<lbrakk>\\<forall>n i.\n                   i < card\n                        (I \\<inter> {n..<n + length xs}) \\<longrightarrow>\n                   f_join_aux xs n I ! i =\n                   xs !\n                   (((I \\<inter> {n..<n + length xs}) \\<rightarrow> i) - n);\n        i < card (I \\<inter> {Suc n..<Suc (n + length xs)});\n        {n..<Suc (n + length xs)} = insert n {Suc n..<Suc (n + length xs)};\n        I \\<inter> {Suc n..<Suc (n + length xs)} \\<noteq> {};\n        n \\<notin> I\\<rbrakk>\n       \\<Longrightarrow> (I \\<inter>\n                          {Suc n..<Suc (n + length xs)}) \\<rightarrow> i\n                         \\<le> n \\<longrightarrow>\n                         xs ! 0 = a\n 2. \\<And>a xs n i.\n       \\<lbrakk>\\<forall>n i.\n                   i < card\n                        (I \\<inter> {n..<n + length xs}) \\<longrightarrow>\n                   f_join_aux xs n I ! i =\n                   xs !\n                   (((I \\<inter> {n..<n + length xs}) \\<rightarrow> i) - n);\n        i < card (I \\<inter> {n..<Suc (n + length xs)});\n        {n..<Suc (n + length xs)} = insert n {Suc n..<Suc (n + length xs)};\n        I \\<inter> {n..<Suc (n + length xs)} \\<noteq> {}; n \\<in> I\\<rbrakk>\n       \\<Longrightarrow> ((if n \\<in> I then [a] else []) @\n                          f_join_aux xs (Suc n) I) !\n                         i =\n                         (a # xs) !\n                         (((I \\<inter>\n                            {n..<Suc (n + length xs)}) \\<rightarrow> i) -\n                          n)", "apply (subgoal_tac \"Suc n \\<le> (I \\<inter> {Suc n..<Suc (n + length xs)}) \\<rightarrow> i\", simp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a xs n i.\n       \\<lbrakk>\\<forall>n i.\n                   i < card\n                        (I \\<inter> {n..<n + length xs}) \\<longrightarrow>\n                   f_join_aux xs n I ! i =\n                   xs !\n                   (((I \\<inter> {n..<n + length xs}) \\<rightarrow> i) - n);\n        i < card (I \\<inter> {Suc n..<Suc (n + length xs)});\n        {n..<Suc (n + length xs)} = insert n {Suc n..<Suc (n + length xs)};\n        I \\<inter> {Suc n..<Suc (n + length xs)} \\<noteq> {};\n        n \\<notin> I\\<rbrakk>\n       \\<Longrightarrow> Suc n\n                         \\<le> (I \\<inter>\n                                {Suc n..<Suc\n    (n + length xs)}) \\<rightarrow> i\n 2. \\<And>a xs n i.\n       \\<lbrakk>\\<forall>n i.\n                   i < card\n                        (I \\<inter> {n..<n + length xs}) \\<longrightarrow>\n                   f_join_aux xs n I ! i =\n                   xs !\n                   (((I \\<inter> {n..<n + length xs}) \\<rightarrow> i) - n);\n        i < card (I \\<inter> {n..<Suc (n + length xs)});\n        {n..<Suc (n + length xs)} = insert n {Suc n..<Suc (n + length xs)};\n        I \\<inter> {n..<Suc (n + length xs)} \\<noteq> {}; n \\<in> I\\<rbrakk>\n       \\<Longrightarrow> ((if n \\<in> I then [a] else []) @\n                          f_join_aux xs (Suc n) I) !\n                         i =\n                         (a # xs) !\n                         (((I \\<inter>\n                            {n..<Suc (n + length xs)}) \\<rightarrow> i) -\n                          n)", "apply (rule order_trans[OF _ iMin_le[OF inext_nth_closed]])"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>a xs n i.\n       \\<lbrakk>\\<forall>n i.\n                   i < card\n                        (I \\<inter> {n..<n + length xs}) \\<longrightarrow>\n                   f_join_aux xs n I ! i =\n                   xs !\n                   (((I \\<inter> {n..<n + length xs}) \\<rightarrow> i) - n);\n        i < card (I \\<inter> {Suc n..<Suc (n + length xs)});\n        {n..<Suc (n + length xs)} = insert n {Suc n..<Suc (n + length xs)};\n        I \\<inter> {Suc n..<Suc (n + length xs)} \\<noteq> {};\n        n \\<notin> I\\<rbrakk>\n       \\<Longrightarrow> Suc n\n                         \\<le> iMin\n                                (I \\<inter> {Suc n..<Suc (n + length xs)})\n 2. \\<And>a xs n i.\n       \\<lbrakk>\\<forall>n i.\n                   i < card\n                        (I \\<inter> {n..<n + length xs}) \\<longrightarrow>\n                   f_join_aux xs n I ! i =\n                   xs !\n                   (((I \\<inter> {n..<n + length xs}) \\<rightarrow> i) - n);\n        i < card (I \\<inter> {Suc n..<Suc (n + length xs)});\n        {n..<Suc (n + length xs)} = insert n {Suc n..<Suc (n + length xs)};\n        I \\<inter> {Suc n..<Suc (n + length xs)} \\<noteq> {};\n        n \\<notin> I\\<rbrakk>\n       \\<Longrightarrow> I \\<inter> {Suc n..<Suc (n + length xs)} \\<noteq>\n                         {}\n 3. \\<And>a xs n i.\n       \\<lbrakk>\\<forall>n i.\n                   i < card\n                        (I \\<inter> {n..<n + length xs}) \\<longrightarrow>\n                   f_join_aux xs n I ! i =\n                   xs !\n                   (((I \\<inter> {n..<n + length xs}) \\<rightarrow> i) - n);\n        i < card (I \\<inter> {n..<Suc (n + length xs)});\n        {n..<Suc (n + length xs)} = insert n {Suc n..<Suc (n + length xs)};\n        I \\<inter> {n..<Suc (n + length xs)} \\<noteq> {}; n \\<in> I\\<rbrakk>\n       \\<Longrightarrow> ((if n \\<in> I then [a] else []) @\n                          f_join_aux xs (Suc n) I) !\n                         i =\n                         (a # xs) !\n                         (((I \\<inter>\n                            {n..<Suc (n + length xs)}) \\<rightarrow> i) -\n                          n)", "apply (rule order_trans[OF _ iMin_Int_ge2])"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>a xs n i.\n       \\<lbrakk>\\<forall>n i.\n                   i < card\n                        (I \\<inter> {n..<n + length xs}) \\<longrightarrow>\n                   f_join_aux xs n I ! i =\n                   xs !\n                   (((I \\<inter> {n..<n + length xs}) \\<rightarrow> i) - n);\n        i < card (I \\<inter> {Suc n..<Suc (n + length xs)});\n        {n..<Suc (n + length xs)} = insert n {Suc n..<Suc (n + length xs)};\n        I \\<inter> {Suc n..<Suc (n + length xs)} \\<noteq> {};\n        n \\<notin> I\\<rbrakk>\n       \\<Longrightarrow> Suc n \\<le> iMin {Suc n..<Suc (n + length xs)}\n 2. \\<And>a xs n i.\n       \\<lbrakk>\\<forall>n i.\n                   i < card\n                        (I \\<inter> {n..<n + length xs}) \\<longrightarrow>\n                   f_join_aux xs n I ! i =\n                   xs !\n                   (((I \\<inter> {n..<n + length xs}) \\<rightarrow> i) - n);\n        i < card (I \\<inter> {Suc n..<Suc (n + length xs)});\n        {n..<Suc (n + length xs)} = insert n {Suc n..<Suc (n + length xs)};\n        I \\<inter> {Suc n..<Suc (n + length xs)} \\<noteq> {};\n        n \\<notin> I\\<rbrakk>\n       \\<Longrightarrow> I \\<inter> {Suc n..<Suc (n + length xs)} \\<noteq>\n                         {}\n 3. \\<And>a xs n i.\n       \\<lbrakk>\\<forall>n i.\n                   i < card\n                        (I \\<inter> {n..<n + length xs}) \\<longrightarrow>\n                   f_join_aux xs n I ! i =\n                   xs !\n                   (((I \\<inter> {n..<n + length xs}) \\<rightarrow> i) - n);\n        i < card (I \\<inter> {Suc n..<Suc (n + length xs)});\n        {n..<Suc (n + length xs)} = insert n {Suc n..<Suc (n + length xs)};\n        I \\<inter> {Suc n..<Suc (n + length xs)} \\<noteq> {};\n        n \\<notin> I\\<rbrakk>\n       \\<Longrightarrow> I \\<inter> {Suc n..<Suc (n + length xs)} \\<noteq>\n                         {}\n 4. \\<And>a xs n i.\n       \\<lbrakk>\\<forall>n i.\n                   i < card\n                        (I \\<inter> {n..<n + length xs}) \\<longrightarrow>\n                   f_join_aux xs n I ! i =\n                   xs !\n                   (((I \\<inter> {n..<n + length xs}) \\<rightarrow> i) - n);\n        i < card (I \\<inter> {n..<Suc (n + length xs)});\n        {n..<Suc (n + length xs)} = insert n {Suc n..<Suc (n + length xs)};\n        I \\<inter> {n..<Suc (n + length xs)} \\<noteq> {}; n \\<in> I\\<rbrakk>\n       \\<Longrightarrow> ((if n \\<in> I then [a] else []) @\n                          f_join_aux xs (Suc n) I) !\n                         i =\n                         (a # xs) !\n                         (((I \\<inter>\n                            {n..<Suc (n + length xs)}) \\<rightarrow> i) -\n                          n)", "apply (subgoal_tac \"n < n + length xs\")"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>a xs n i.\n       \\<lbrakk>\\<forall>n i.\n                   i < card\n                        (I \\<inter> {n..<n + length xs}) \\<longrightarrow>\n                   f_join_aux xs n I ! i =\n                   xs !\n                   (((I \\<inter> {n..<n + length xs}) \\<rightarrow> i) - n);\n        i < card (I \\<inter> {Suc n..<Suc (n + length xs)});\n        {n..<Suc (n + length xs)} = insert n {Suc n..<Suc (n + length xs)};\n        I \\<inter> {Suc n..<Suc (n + length xs)} \\<noteq> {}; n \\<notin> I;\n        n < n + length xs\\<rbrakk>\n       \\<Longrightarrow> Suc n \\<le> iMin {Suc n..<Suc (n + length xs)}\n 2. \\<And>a xs n i.\n       \\<lbrakk>\\<forall>n i.\n                   i < card\n                        (I \\<inter> {n..<n + length xs}) \\<longrightarrow>\n                   f_join_aux xs n I ! i =\n                   xs !\n                   (((I \\<inter> {n..<n + length xs}) \\<rightarrow> i) - n);\n        i < card (I \\<inter> {Suc n..<Suc (n + length xs)});\n        {n..<Suc (n + length xs)} = insert n {Suc n..<Suc (n + length xs)};\n        I \\<inter> {Suc n..<Suc (n + length xs)} \\<noteq> {};\n        n \\<notin> I\\<rbrakk>\n       \\<Longrightarrow> n < n + length xs\n 3. \\<And>a xs n i.\n       \\<lbrakk>\\<forall>n i.\n                   i < card\n                        (I \\<inter> {n..<n + length xs}) \\<longrightarrow>\n                   f_join_aux xs n I ! i =\n                   xs !\n                   (((I \\<inter> {n..<n + length xs}) \\<rightarrow> i) - n);\n        i < card (I \\<inter> {Suc n..<Suc (n + length xs)});\n        {n..<Suc (n + length xs)} = insert n {Suc n..<Suc (n + length xs)};\n        I \\<inter> {Suc n..<Suc (n + length xs)} \\<noteq> {};\n        n \\<notin> I\\<rbrakk>\n       \\<Longrightarrow> I \\<inter> {Suc n..<Suc (n + length xs)} \\<noteq>\n                         {}\n 4. \\<And>a xs n i.\n       \\<lbrakk>\\<forall>n i.\n                   i < card\n                        (I \\<inter> {n..<n + length xs}) \\<longrightarrow>\n                   f_join_aux xs n I ! i =\n                   xs !\n                   (((I \\<inter> {n..<n + length xs}) \\<rightarrow> i) - n);\n        i < card (I \\<inter> {Suc n..<Suc (n + length xs)});\n        {n..<Suc (n + length xs)} = insert n {Suc n..<Suc (n + length xs)};\n        I \\<inter> {Suc n..<Suc (n + length xs)} \\<noteq> {};\n        n \\<notin> I\\<rbrakk>\n       \\<Longrightarrow> I \\<inter> {Suc n..<Suc (n + length xs)} \\<noteq>\n                         {}\n 5. \\<And>a xs n i.\n       \\<lbrakk>\\<forall>n i.\n                   i < card\n                        (I \\<inter> {n..<n + length xs}) \\<longrightarrow>\n                   f_join_aux xs n I ! i =\n                   xs !\n                   (((I \\<inter> {n..<n + length xs}) \\<rightarrow> i) - n);\n        i < card (I \\<inter> {n..<Suc (n + length xs)});\n        {n..<Suc (n + length xs)} = insert n {Suc n..<Suc (n + length xs)};\n        I \\<inter> {n..<Suc (n + length xs)} \\<noteq> {}; n \\<in> I\\<rbrakk>\n       \\<Longrightarrow> ((if n \\<in> I then [a] else []) @\n                          f_join_aux xs (Suc n) I) !\n                         i =\n                         (a # xs) !\n                         (((I \\<inter>\n                            {n..<Suc (n + length xs)}) \\<rightarrow> i) -\n                          n)", "prefer 2"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>a xs n i.\n       \\<lbrakk>\\<forall>n i.\n                   i < card\n                        (I \\<inter> {n..<n + length xs}) \\<longrightarrow>\n                   f_join_aux xs n I ! i =\n                   xs !\n                   (((I \\<inter> {n..<n + length xs}) \\<rightarrow> i) - n);\n        i < card (I \\<inter> {Suc n..<Suc (n + length xs)});\n        {n..<Suc (n + length xs)} = insert n {Suc n..<Suc (n + length xs)};\n        I \\<inter> {Suc n..<Suc (n + length xs)} \\<noteq> {};\n        n \\<notin> I\\<rbrakk>\n       \\<Longrightarrow> n < n + length xs\n 2. \\<And>a xs n i.\n       \\<lbrakk>\\<forall>n i.\n                   i < card\n                        (I \\<inter> {n..<n + length xs}) \\<longrightarrow>\n                   f_join_aux xs n I ! i =\n                   xs !\n                   (((I \\<inter> {n..<n + length xs}) \\<rightarrow> i) - n);\n        i < card (I \\<inter> {Suc n..<Suc (n + length xs)});\n        {n..<Suc (n + length xs)} = insert n {Suc n..<Suc (n + length xs)};\n        I \\<inter> {Suc n..<Suc (n + length xs)} \\<noteq> {}; n \\<notin> I;\n        n < n + length xs\\<rbrakk>\n       \\<Longrightarrow> Suc n \\<le> iMin {Suc n..<Suc (n + length xs)}\n 3. \\<And>a xs n i.\n       \\<lbrakk>\\<forall>n i.\n                   i < card\n                        (I \\<inter> {n..<n + length xs}) \\<longrightarrow>\n                   f_join_aux xs n I ! i =\n                   xs !\n                   (((I \\<inter> {n..<n + length xs}) \\<rightarrow> i) - n);\n        i < card (I \\<inter> {Suc n..<Suc (n + length xs)});\n        {n..<Suc (n + length xs)} = insert n {Suc n..<Suc (n + length xs)};\n        I \\<inter> {Suc n..<Suc (n + length xs)} \\<noteq> {};\n        n \\<notin> I\\<rbrakk>\n       \\<Longrightarrow> I \\<inter> {Suc n..<Suc (n + length xs)} \\<noteq>\n                         {}\n 4. \\<And>a xs n i.\n       \\<lbrakk>\\<forall>n i.\n                   i < card\n                        (I \\<inter> {n..<n + length xs}) \\<longrightarrow>\n                   f_join_aux xs n I ! i =\n                   xs !\n                   (((I \\<inter> {n..<n + length xs}) \\<rightarrow> i) - n);\n        i < card (I \\<inter> {Suc n..<Suc (n + length xs)});\n        {n..<Suc (n + length xs)} = insert n {Suc n..<Suc (n + length xs)};\n        I \\<inter> {Suc n..<Suc (n + length xs)} \\<noteq> {};\n        n \\<notin> I\\<rbrakk>\n       \\<Longrightarrow> I \\<inter> {Suc n..<Suc (n + length xs)} \\<noteq>\n                         {}\n 5. \\<And>a xs n i.\n       \\<lbrakk>\\<forall>n i.\n                   i < card\n                        (I \\<inter> {n..<n + length xs}) \\<longrightarrow>\n                   f_join_aux xs n I ! i =\n                   xs !\n                   (((I \\<inter> {n..<n + length xs}) \\<rightarrow> i) - n);\n        i < card (I \\<inter> {n..<Suc (n + length xs)});\n        {n..<Suc (n + length xs)} = insert n {Suc n..<Suc (n + length xs)};\n        I \\<inter> {n..<Suc (n + length xs)} \\<noteq> {}; n \\<in> I\\<rbrakk>\n       \\<Longrightarrow> ((if n \\<in> I then [a] else []) @\n                          f_join_aux xs (Suc n) I) !\n                         i =\n                         (a # xs) !\n                         (((I \\<inter>\n                            {n..<Suc (n + length xs)}) \\<rightarrow> i) -\n                          n)", "apply (rule ccontr, simp)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>a xs n i.\n       \\<lbrakk>\\<forall>n i.\n                   i < card\n                        (I \\<inter> {n..<n + length xs}) \\<longrightarrow>\n                   f_join_aux xs n I ! i =\n                   xs !\n                   (((I \\<inter> {n..<n + length xs}) \\<rightarrow> i) - n);\n        i < card (I \\<inter> {Suc n..<Suc (n + length xs)});\n        {n..<Suc (n + length xs)} = insert n {Suc n..<Suc (n + length xs)};\n        I \\<inter> {Suc n..<Suc (n + length xs)} \\<noteq> {}; n \\<notin> I;\n        n < n + length xs\\<rbrakk>\n       \\<Longrightarrow> Suc n \\<le> iMin {Suc n..<Suc (n + length xs)}\n 2. \\<And>a xs n i.\n       \\<lbrakk>\\<forall>n i.\n                   i < card\n                        (I \\<inter> {n..<n + length xs}) \\<longrightarrow>\n                   f_join_aux xs n I ! i =\n                   xs !\n                   (((I \\<inter> {n..<n + length xs}) \\<rightarrow> i) - n);\n        i < card (I \\<inter> {Suc n..<Suc (n + length xs)});\n        {n..<Suc (n + length xs)} = insert n {Suc n..<Suc (n + length xs)};\n        I \\<inter> {Suc n..<Suc (n + length xs)} \\<noteq> {};\n        n \\<notin> I\\<rbrakk>\n       \\<Longrightarrow> I \\<inter> {Suc n..<Suc (n + length xs)} \\<noteq>\n                         {}\n 3. \\<And>a xs n i.\n       \\<lbrakk>\\<forall>n i.\n                   i < card\n                        (I \\<inter> {n..<n + length xs}) \\<longrightarrow>\n                   f_join_aux xs n I ! i =\n                   xs !\n                   (((I \\<inter> {n..<n + length xs}) \\<rightarrow> i) - n);\n        i < card (I \\<inter> {Suc n..<Suc (n + length xs)});\n        {n..<Suc (n + length xs)} = insert n {Suc n..<Suc (n + length xs)};\n        I \\<inter> {Suc n..<Suc (n + length xs)} \\<noteq> {};\n        n \\<notin> I\\<rbrakk>\n       \\<Longrightarrow> I \\<inter> {Suc n..<Suc (n + length xs)} \\<noteq>\n                         {}\n 4. \\<And>a xs n i.\n       \\<lbrakk>\\<forall>n i.\n                   i < card\n                        (I \\<inter> {n..<n + length xs}) \\<longrightarrow>\n                   f_join_aux xs n I ! i =\n                   xs !\n                   (((I \\<inter> {n..<n + length xs}) \\<rightarrow> i) - n);\n        i < card (I \\<inter> {n..<Suc (n + length xs)});\n        {n..<Suc (n + length xs)} = insert n {Suc n..<Suc (n + length xs)};\n        I \\<inter> {n..<Suc (n + length xs)} \\<noteq> {}; n \\<in> I\\<rbrakk>\n       \\<Longrightarrow> ((if n \\<in> I then [a] else []) @\n                          f_join_aux xs (Suc n) I) !\n                         i =\n                         (a # xs) !\n                         (((I \\<inter>\n                            {n..<Suc (n + length xs)}) \\<rightarrow> i) -\n                          n)", "apply (simp add: iMin_atLeastLessThan)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>a xs n i.\n       \\<lbrakk>\\<forall>n i.\n                   i < card\n                        (I \\<inter> {n..<n + length xs}) \\<longrightarrow>\n                   f_join_aux xs n I ! i =\n                   xs !\n                   (((I \\<inter> {n..<n + length xs}) \\<rightarrow> i) - n);\n        i < card (I \\<inter> {Suc n..<Suc (n + length xs)});\n        {n..<Suc (n + length xs)} = insert n {Suc n..<Suc (n + length xs)};\n        I \\<inter> {Suc n..<Suc (n + length xs)} \\<noteq> {};\n        n \\<notin> I\\<rbrakk>\n       \\<Longrightarrow> I \\<inter> {Suc n..<Suc (n + length xs)} \\<noteq>\n                         {}\n 2. \\<And>a xs n i.\n       \\<lbrakk>\\<forall>n i.\n                   i < card\n                        (I \\<inter> {n..<n + length xs}) \\<longrightarrow>\n                   f_join_aux xs n I ! i =\n                   xs !\n                   (((I \\<inter> {n..<n + length xs}) \\<rightarrow> i) - n);\n        i < card (I \\<inter> {Suc n..<Suc (n + length xs)});\n        {n..<Suc (n + length xs)} = insert n {Suc n..<Suc (n + length xs)};\n        I \\<inter> {Suc n..<Suc (n + length xs)} \\<noteq> {};\n        n \\<notin> I\\<rbrakk>\n       \\<Longrightarrow> I \\<inter> {Suc n..<Suc (n + length xs)} \\<noteq>\n                         {}\n 3. \\<And>a xs n i.\n       \\<lbrakk>\\<forall>n i.\n                   i < card\n                        (I \\<inter> {n..<n + length xs}) \\<longrightarrow>\n                   f_join_aux xs n I ! i =\n                   xs !\n                   (((I \\<inter> {n..<n + length xs}) \\<rightarrow> i) - n);\n        i < card (I \\<inter> {n..<Suc (n + length xs)});\n        {n..<Suc (n + length xs)} = insert n {Suc n..<Suc (n + length xs)};\n        I \\<inter> {n..<Suc (n + length xs)} \\<noteq> {}; n \\<in> I\\<rbrakk>\n       \\<Longrightarrow> ((if n \\<in> I then [a] else []) @\n                          f_join_aux xs (Suc n) I) !\n                         i =\n                         (a # xs) !\n                         (((I \\<inter>\n                            {n..<Suc (n + length xs)}) \\<rightarrow> i) -\n                          n)", "apply assumption+"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a xs n i.\n       \\<lbrakk>\\<forall>n i.\n                   i < card\n                        (I \\<inter> {n..<n + length xs}) \\<longrightarrow>\n                   f_join_aux xs n I ! i =\n                   xs !\n                   (((I \\<inter> {n..<n + length xs}) \\<rightarrow> i) - n);\n        i < card (I \\<inter> {n..<Suc (n + length xs)});\n        {n..<Suc (n + length xs)} = insert n {Suc n..<Suc (n + length xs)};\n        I \\<inter> {n..<Suc (n + length xs)} \\<noteq> {}; n \\<in> I\\<rbrakk>\n       \\<Longrightarrow> ((if n \\<in> I then [a] else []) @\n                          f_join_aux xs (Suc n) I) !\n                         i =\n                         (a # xs) !\n                         (((I \\<inter>\n                            {n..<Suc (n + length xs)}) \\<rightarrow> i) -\n                          n)", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a xs n i.\n       \\<lbrakk>\\<forall>n i.\n                   i < card\n                        (I \\<inter> {n..<n + length xs}) \\<longrightarrow>\n                   f_join_aux xs n I ! i =\n                   xs !\n                   (((I \\<inter> {n..<n + length xs}) \\<rightarrow> i) - n);\n        i < Suc (card (I \\<inter> {Suc n..<Suc (n + length xs)}));\n        {n..<Suc (n + length xs)} = insert n {Suc n..<Suc (n + length xs)};\n        n \\<in> I\\<rbrakk>\n       \\<Longrightarrow> (a # f_join_aux xs (Suc n) I) ! i =\n                         (a # xs) !\n                         ((insert n\n                            (I \\<inter>\n                             {Suc n..<Suc\n (n + length xs)}) \\<rightarrow> i) -\n                          n)", "apply (case_tac \"I \\<inter> {Suc n..<Suc (n + length xs)} = {}\", simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a xs n i.\n       \\<lbrakk>\\<forall>n i.\n                   i < card\n                        (I \\<inter> {n..<n + length xs}) \\<longrightarrow>\n                   f_join_aux xs n I ! i =\n                   xs !\n                   (((I \\<inter> {n..<n + length xs}) \\<rightarrow> i) - n);\n        i < Suc (card (I \\<inter> {Suc n..<Suc (n + length xs)}));\n        {n..<Suc (n + length xs)} = insert n {Suc n..<Suc (n + length xs)};\n        n \\<in> I;\n        I \\<inter> {Suc n..<Suc (n + length xs)} \\<noteq> {}\\<rbrakk>\n       \\<Longrightarrow> (a # f_join_aux xs (Suc n) I) ! i =\n                         (a # xs) !\n                         ((insert n\n                            (I \\<inter>\n                             {Suc n..<Suc\n (n + length xs)}) \\<rightarrow> i) -\n                          n)", "apply (case_tac i)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a xs n i.\n       \\<lbrakk>\\<forall>n i.\n                   i < card\n                        (I \\<inter> {n..<n + length xs}) \\<longrightarrow>\n                   f_join_aux xs n I ! i =\n                   xs !\n                   (((I \\<inter> {n..<n + length xs}) \\<rightarrow> i) - n);\n        i < Suc (card (I \\<inter> {Suc n..<Suc (n + length xs)}));\n        {n..<Suc (n + length xs)} = insert n {Suc n..<Suc (n + length xs)};\n        n \\<in> I; I \\<inter> {Suc n..<Suc (n + length xs)} \\<noteq> {};\n        i = 0\\<rbrakk>\n       \\<Longrightarrow> (a # f_join_aux xs (Suc n) I) ! i =\n                         (a # xs) !\n                         ((insert n\n                            (I \\<inter>\n                             {Suc n..<Suc\n (n + length xs)}) \\<rightarrow> i) -\n                          n)\n 2. \\<And>a xs n i nat.\n       \\<lbrakk>\\<forall>n i.\n                   i < card\n                        (I \\<inter> {n..<n + length xs}) \\<longrightarrow>\n                   f_join_aux xs n I ! i =\n                   xs !\n                   (((I \\<inter> {n..<n + length xs}) \\<rightarrow> i) - n);\n        i < Suc (card (I \\<inter> {Suc n..<Suc (n + length xs)}));\n        {n..<Suc (n + length xs)} = insert n {Suc n..<Suc (n + length xs)};\n        n \\<in> I; I \\<inter> {Suc n..<Suc (n + length xs)} \\<noteq> {};\n        i = Suc nat\\<rbrakk>\n       \\<Longrightarrow> (a # f_join_aux xs (Suc n) I) ! i =\n                         (a # xs) !\n                         ((insert n\n                            (I \\<inter>\n                             {Suc n..<Suc\n (n + length xs)}) \\<rightarrow> i) -\n                          n)", "apply (simp add: iMin_insert)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a xs n i nat.\n       \\<lbrakk>\\<forall>n i.\n                   i < card\n                        (I \\<inter> {n..<n + length xs}) \\<longrightarrow>\n                   f_join_aux xs n I ! i =\n                   xs !\n                   (((I \\<inter> {n..<n + length xs}) \\<rightarrow> i) - n);\n        i < Suc (card (I \\<inter> {Suc n..<Suc (n + length xs)}));\n        {n..<Suc (n + length xs)} = insert n {Suc n..<Suc (n + length xs)};\n        n \\<in> I; I \\<inter> {Suc n..<Suc (n + length xs)} \\<noteq> {};\n        i = Suc nat\\<rbrakk>\n       \\<Longrightarrow> (a # f_join_aux xs (Suc n) I) ! i =\n                         (a # xs) !\n                         ((insert n\n                            (I \\<inter>\n                             {Suc n..<Suc\n (n + length xs)}) \\<rightarrow> i) -\n                          n)", "apply (subgoal_tac \"Suc n \\<le> iMin {Suc n..<Suc (n + length xs)}\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a xs n i nat.\n       \\<lbrakk>\\<forall>n i.\n                   i < card\n                        (I \\<inter> {n..<n + length xs}) \\<longrightarrow>\n                   f_join_aux xs n I ! i =\n                   xs !\n                   (((I \\<inter> {n..<n + length xs}) \\<rightarrow> i) - n);\n        i < Suc (card (I \\<inter> {Suc n..<Suc (n + length xs)}));\n        {n..<Suc (n + length xs)} = insert n {Suc n..<Suc (n + length xs)};\n        n \\<in> I; I \\<inter> {Suc n..<Suc (n + length xs)} \\<noteq> {};\n        i = Suc nat; Suc n \\<le> iMin {Suc n..<Suc (n + length xs)}\\<rbrakk>\n       \\<Longrightarrow> (a # f_join_aux xs (Suc n) I) ! i =\n                         (a # xs) !\n                         ((insert n\n                            (I \\<inter>\n                             {Suc n..<Suc\n (n + length xs)}) \\<rightarrow> i) -\n                          n)\n 2. \\<And>a xs n i nat.\n       \\<lbrakk>\\<forall>n i.\n                   i < card\n                        (I \\<inter> {n..<n + length xs}) \\<longrightarrow>\n                   f_join_aux xs n I ! i =\n                   xs !\n                   (((I \\<inter> {n..<n + length xs}) \\<rightarrow> i) - n);\n        i < Suc (card (I \\<inter> {Suc n..<Suc (n + length xs)}));\n        {n..<Suc (n + length xs)} = insert n {Suc n..<Suc (n + length xs)};\n        n \\<in> I; I \\<inter> {Suc n..<Suc (n + length xs)} \\<noteq> {};\n        i = Suc nat\\<rbrakk>\n       \\<Longrightarrow> Suc n \\<le> iMin {Suc n..<Suc (n + length xs)}", "prefer 2"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a xs n i nat.\n       \\<lbrakk>\\<forall>n i.\n                   i < card\n                        (I \\<inter> {n..<n + length xs}) \\<longrightarrow>\n                   f_join_aux xs n I ! i =\n                   xs !\n                   (((I \\<inter> {n..<n + length xs}) \\<rightarrow> i) - n);\n        i < Suc (card (I \\<inter> {Suc n..<Suc (n + length xs)}));\n        {n..<Suc (n + length xs)} = insert n {Suc n..<Suc (n + length xs)};\n        n \\<in> I; I \\<inter> {Suc n..<Suc (n + length xs)} \\<noteq> {};\n        i = Suc nat\\<rbrakk>\n       \\<Longrightarrow> Suc n \\<le> iMin {Suc n..<Suc (n + length xs)}\n 2. \\<And>a xs n i nat.\n       \\<lbrakk>\\<forall>n i.\n                   i < card\n                        (I \\<inter> {n..<n + length xs}) \\<longrightarrow>\n                   f_join_aux xs n I ! i =\n                   xs !\n                   (((I \\<inter> {n..<n + length xs}) \\<rightarrow> i) - n);\n        i < Suc (card (I \\<inter> {Suc n..<Suc (n + length xs)}));\n        {n..<Suc (n + length xs)} = insert n {Suc n..<Suc (n + length xs)};\n        n \\<in> I; I \\<inter> {Suc n..<Suc (n + length xs)} \\<noteq> {};\n        i = Suc nat; Suc n \\<le> iMin {Suc n..<Suc (n + length xs)}\\<rbrakk>\n       \\<Longrightarrow> (a # f_join_aux xs (Suc n) I) ! i =\n                         (a # xs) !\n                         ((insert n\n                            (I \\<inter>\n                             {Suc n..<Suc\n (n + length xs)}) \\<rightarrow> i) -\n                          n)", "apply (subgoal_tac \"n < n + length xs\")"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>a xs n i nat.\n       \\<lbrakk>\\<forall>n i.\n                   i < card\n                        (I \\<inter> {n..<n + length xs}) \\<longrightarrow>\n                   f_join_aux xs n I ! i =\n                   xs !\n                   (((I \\<inter> {n..<n + length xs}) \\<rightarrow> i) - n);\n        i < Suc (card (I \\<inter> {Suc n..<Suc (n + length xs)}));\n        {n..<Suc (n + length xs)} = insert n {Suc n..<Suc (n + length xs)};\n        n \\<in> I; I \\<inter> {Suc n..<Suc (n + length xs)} \\<noteq> {};\n        i = Suc nat; n < n + length xs\\<rbrakk>\n       \\<Longrightarrow> Suc n \\<le> iMin {Suc n..<Suc (n + length xs)}\n 2. \\<And>a xs n i nat.\n       \\<lbrakk>\\<forall>n i.\n                   i < card\n                        (I \\<inter> {n..<n + length xs}) \\<longrightarrow>\n                   f_join_aux xs n I ! i =\n                   xs !\n                   (((I \\<inter> {n..<n + length xs}) \\<rightarrow> i) - n);\n        i < Suc (card (I \\<inter> {Suc n..<Suc (n + length xs)}));\n        {n..<Suc (n + length xs)} = insert n {Suc n..<Suc (n + length xs)};\n        n \\<in> I; I \\<inter> {Suc n..<Suc (n + length xs)} \\<noteq> {};\n        i = Suc nat\\<rbrakk>\n       \\<Longrightarrow> n < n + length xs\n 3. \\<And>a xs n i nat.\n       \\<lbrakk>\\<forall>n i.\n                   i < card\n                        (I \\<inter> {n..<n + length xs}) \\<longrightarrow>\n                   f_join_aux xs n I ! i =\n                   xs !\n                   (((I \\<inter> {n..<n + length xs}) \\<rightarrow> i) - n);\n        i < Suc (card (I \\<inter> {Suc n..<Suc (n + length xs)}));\n        {n..<Suc (n + length xs)} = insert n {Suc n..<Suc (n + length xs)};\n        n \\<in> I; I \\<inter> {Suc n..<Suc (n + length xs)} \\<noteq> {};\n        i = Suc nat; Suc n \\<le> iMin {Suc n..<Suc (n + length xs)}\\<rbrakk>\n       \\<Longrightarrow> (a # f_join_aux xs (Suc n) I) ! i =\n                         (a # xs) !\n                         ((insert n\n                            (I \\<inter>\n                             {Suc n..<Suc\n (n + length xs)}) \\<rightarrow> i) -\n                          n)", "prefer 2"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>a xs n i nat.\n       \\<lbrakk>\\<forall>n i.\n                   i < card\n                        (I \\<inter> {n..<n + length xs}) \\<longrightarrow>\n                   f_join_aux xs n I ! i =\n                   xs !\n                   (((I \\<inter> {n..<n + length xs}) \\<rightarrow> i) - n);\n        i < Suc (card (I \\<inter> {Suc n..<Suc (n + length xs)}));\n        {n..<Suc (n + length xs)} = insert n {Suc n..<Suc (n + length xs)};\n        n \\<in> I; I \\<inter> {Suc n..<Suc (n + length xs)} \\<noteq> {};\n        i = Suc nat\\<rbrakk>\n       \\<Longrightarrow> n < n + length xs\n 2. \\<And>a xs n i nat.\n       \\<lbrakk>\\<forall>n i.\n                   i < card\n                        (I \\<inter> {n..<n + length xs}) \\<longrightarrow>\n                   f_join_aux xs n I ! i =\n                   xs !\n                   (((I \\<inter> {n..<n + length xs}) \\<rightarrow> i) - n);\n        i < Suc (card (I \\<inter> {Suc n..<Suc (n + length xs)}));\n        {n..<Suc (n + length xs)} = insert n {Suc n..<Suc (n + length xs)};\n        n \\<in> I; I \\<inter> {Suc n..<Suc (n + length xs)} \\<noteq> {};\n        i = Suc nat; n < n + length xs\\<rbrakk>\n       \\<Longrightarrow> Suc n \\<le> iMin {Suc n..<Suc (n + length xs)}\n 3. \\<And>a xs n i nat.\n       \\<lbrakk>\\<forall>n i.\n                   i < card\n                        (I \\<inter> {n..<n + length xs}) \\<longrightarrow>\n                   f_join_aux xs n I ! i =\n                   xs !\n                   (((I \\<inter> {n..<n + length xs}) \\<rightarrow> i) - n);\n        i < Suc (card (I \\<inter> {Suc n..<Suc (n + length xs)}));\n        {n..<Suc (n + length xs)} = insert n {Suc n..<Suc (n + length xs)};\n        n \\<in> I; I \\<inter> {Suc n..<Suc (n + length xs)} \\<noteq> {};\n        i = Suc nat; Suc n \\<le> iMin {Suc n..<Suc (n + length xs)}\\<rbrakk>\n       \\<Longrightarrow> (a # f_join_aux xs (Suc n) I) ! i =\n                         (a # xs) !\n                         ((insert n\n                            (I \\<inter>\n                             {Suc n..<Suc\n (n + length xs)}) \\<rightarrow> i) -\n                          n)", "apply (rule ccontr, simp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a xs n i nat.\n       \\<lbrakk>\\<forall>n i.\n                   i < card\n                        (I \\<inter> {n..<n + length xs}) \\<longrightarrow>\n                   f_join_aux xs n I ! i =\n                   xs !\n                   (((I \\<inter> {n..<n + length xs}) \\<rightarrow> i) - n);\n        i < Suc (card (I \\<inter> {Suc n..<Suc (n + length xs)}));\n        {n..<Suc (n + length xs)} = insert n {Suc n..<Suc (n + length xs)};\n        n \\<in> I; I \\<inter> {Suc n..<Suc (n + length xs)} \\<noteq> {};\n        i = Suc nat; n < n + length xs\\<rbrakk>\n       \\<Longrightarrow> Suc n \\<le> iMin {Suc n..<Suc (n + length xs)}\n 2. \\<And>a xs n i nat.\n       \\<lbrakk>\\<forall>n i.\n                   i < card\n                        (I \\<inter> {n..<n + length xs}) \\<longrightarrow>\n                   f_join_aux xs n I ! i =\n                   xs !\n                   (((I \\<inter> {n..<n + length xs}) \\<rightarrow> i) - n);\n        i < Suc (card (I \\<inter> {Suc n..<Suc (n + length xs)}));\n        {n..<Suc (n + length xs)} = insert n {Suc n..<Suc (n + length xs)};\n        n \\<in> I; I \\<inter> {Suc n..<Suc (n + length xs)} \\<noteq> {};\n        i = Suc nat; Suc n \\<le> iMin {Suc n..<Suc (n + length xs)}\\<rbrakk>\n       \\<Longrightarrow> (a # f_join_aux xs (Suc n) I) ! i =\n                         (a # xs) !\n                         ((insert n\n                            (I \\<inter>\n                             {Suc n..<Suc\n (n + length xs)}) \\<rightarrow> i) -\n                          n)", "apply (simp add: iMin_atLeastLessThan)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a xs n i nat.\n       \\<lbrakk>\\<forall>n i.\n                   i < card\n                        (I \\<inter> {n..<n + length xs}) \\<longrightarrow>\n                   f_join_aux xs n I ! i =\n                   xs !\n                   (((I \\<inter> {n..<n + length xs}) \\<rightarrow> i) - n);\n        i < Suc (card (I \\<inter> {Suc n..<Suc (n + length xs)}));\n        {n..<Suc (n + length xs)} = insert n {Suc n..<Suc (n + length xs)};\n        n \\<in> I; I \\<inter> {Suc n..<Suc (n + length xs)} \\<noteq> {};\n        i = Suc nat; Suc n \\<le> iMin {Suc n..<Suc (n + length xs)}\\<rbrakk>\n       \\<Longrightarrow> (a # f_join_aux xs (Suc n) I) ! i =\n                         (a # xs) !\n                         ((insert n\n                            (I \\<inter>\n                             {Suc n..<Suc\n (n + length xs)}) \\<rightarrow> i) -\n                          n)", "apply (rename_tac i1)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a xs n i i1.\n       \\<lbrakk>\\<forall>n i.\n                   i < card\n                        (I \\<inter> {n..<n + length xs}) \\<longrightarrow>\n                   f_join_aux xs n I ! i =\n                   xs !\n                   (((I \\<inter> {n..<n + length xs}) \\<rightarrow> i) - n);\n        i < Suc (card (I \\<inter> {Suc n..<Suc (n + length xs)}));\n        {n..<Suc (n + length xs)} = insert n {Suc n..<Suc (n + length xs)};\n        n \\<in> I; I \\<inter> {Suc n..<Suc (n + length xs)} \\<noteq> {};\n        i = Suc i1; Suc n \\<le> iMin {Suc n..<Suc (n + length xs)}\\<rbrakk>\n       \\<Longrightarrow> (a # f_join_aux xs (Suc n) I) ! i =\n                         (a # xs) !\n                         ((insert n\n                            (I \\<inter>\n                             {Suc n..<Suc\n (n + length xs)}) \\<rightarrow> i) -\n                          n)", "apply (simp del: inext_nth.simps)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a xs n i i1.\n       \\<lbrakk>\\<forall>n i.\n                   i < card\n                        (I \\<inter> {n..<n + length xs}) \\<longrightarrow>\n                   f_join_aux xs n I ! i =\n                   xs !\n                   (((I \\<inter> {n..<n + length xs}) \\<rightarrow> i) - n);\n        i1 < card (I \\<inter> {Suc n..<Suc (n + length xs)});\n        {n..<Suc (n + length xs)} = insert n {Suc n..<Suc (n + length xs)};\n        n \\<in> I; I \\<inter> {Suc n..<Suc (n + length xs)} \\<noteq> {};\n        i = Suc i1; Suc n \\<le> iMin {Suc n..<Suc (n + length xs)}\\<rbrakk>\n       \\<Longrightarrow> xs !\n                         (((I \\<inter>\n                            {Suc n..<Suc\n(n + length xs)}) \\<rightarrow> i1) -\n                          Suc n) =\n                         (a # xs) !\n                         ((insert n\n                            (I \\<inter>\n                             {Suc n..<Suc\n (n + length xs)}) \\<rightarrow> Suc i1) -\n                          n)", "apply (subst inext_nth_insert_Suc)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>a xs n i i1.\n       \\<lbrakk>\\<forall>n i.\n                   i < card\n                        (I \\<inter> {n..<n + length xs}) \\<longrightarrow>\n                   f_join_aux xs n I ! i =\n                   xs !\n                   (((I \\<inter> {n..<n + length xs}) \\<rightarrow> i) - n);\n        i1 < card (I \\<inter> {Suc n..<Suc (n + length xs)});\n        {n..<Suc (n + length xs)} = insert n {Suc n..<Suc (n + length xs)};\n        n \\<in> I; I \\<inter> {Suc n..<Suc (n + length xs)} \\<noteq> {};\n        i = Suc i1; Suc n \\<le> iMin {Suc n..<Suc (n + length xs)}\\<rbrakk>\n       \\<Longrightarrow> I \\<inter> {Suc n..<Suc (n + length xs)} \\<noteq>\n                         {}\n 2. \\<And>a xs n i i1.\n       \\<lbrakk>\\<forall>n i.\n                   i < card\n                        (I \\<inter> {n..<n + length xs}) \\<longrightarrow>\n                   f_join_aux xs n I ! i =\n                   xs !\n                   (((I \\<inter> {n..<n + length xs}) \\<rightarrow> i) - n);\n        i1 < card (I \\<inter> {Suc n..<Suc (n + length xs)});\n        {n..<Suc (n + length xs)} = insert n {Suc n..<Suc (n + length xs)};\n        n \\<in> I; I \\<inter> {Suc n..<Suc (n + length xs)} \\<noteq> {};\n        i = Suc i1; Suc n \\<le> iMin {Suc n..<Suc (n + length xs)}\\<rbrakk>\n       \\<Longrightarrow> n < iMin (I \\<inter> {Suc n..<Suc (n + length xs)})\n 3. \\<And>a xs n i i1.\n       \\<lbrakk>\\<forall>n i.\n                   i < card\n                        (I \\<inter> {n..<n + length xs}) \\<longrightarrow>\n                   f_join_aux xs n I ! i =\n                   xs !\n                   (((I \\<inter> {n..<n + length xs}) \\<rightarrow> i) - n);\n        i1 < card (I \\<inter> {Suc n..<Suc (n + length xs)});\n        {n..<Suc (n + length xs)} = insert n {Suc n..<Suc (n + length xs)};\n        n \\<in> I; I \\<inter> {Suc n..<Suc (n + length xs)} \\<noteq> {};\n        i = Suc i1; Suc n \\<le> iMin {Suc n..<Suc (n + length xs)}\\<rbrakk>\n       \\<Longrightarrow> xs !\n                         (((I \\<inter>\n                            {Suc n..<Suc\n(n + length xs)}) \\<rightarrow> i1) -\n                          Suc n) =\n                         (a # xs) !\n                         (((I \\<inter>\n                            {Suc n..<Suc\n(n + length xs)}) \\<rightarrow> i1) -\n                          n)", "apply simp"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a xs n i i1.\n       \\<lbrakk>\\<forall>n i.\n                   i < card\n                        (I \\<inter> {n..<n + length xs}) \\<longrightarrow>\n                   f_join_aux xs n I ! i =\n                   xs !\n                   (((I \\<inter> {n..<n + length xs}) \\<rightarrow> i) - n);\n        i1 < card (I \\<inter> {Suc n..<Suc (n + length xs)});\n        {n..<Suc (n + length xs)} = insert n {Suc n..<Suc (n + length xs)};\n        n \\<in> I; I \\<inter> {Suc n..<Suc (n + length xs)} \\<noteq> {};\n        i = Suc i1; Suc n \\<le> iMin {Suc n..<Suc (n + length xs)}\\<rbrakk>\n       \\<Longrightarrow> n < iMin (I \\<inter> {Suc n..<Suc (n + length xs)})\n 2. \\<And>a xs n i i1.\n       \\<lbrakk>\\<forall>n i.\n                   i < card\n                        (I \\<inter> {n..<n + length xs}) \\<longrightarrow>\n                   f_join_aux xs n I ! i =\n                   xs !\n                   (((I \\<inter> {n..<n + length xs}) \\<rightarrow> i) - n);\n        i1 < card (I \\<inter> {Suc n..<Suc (n + length xs)});\n        {n..<Suc (n + length xs)} = insert n {Suc n..<Suc (n + length xs)};\n        n \\<in> I; I \\<inter> {Suc n..<Suc (n + length xs)} \\<noteq> {};\n        i = Suc i1; Suc n \\<le> iMin {Suc n..<Suc (n + length xs)}\\<rbrakk>\n       \\<Longrightarrow> xs !\n                         (((I \\<inter>\n                            {Suc n..<Suc\n(n + length xs)}) \\<rightarrow> i1) -\n                          Suc n) =\n                         (a # xs) !\n                         (((I \\<inter>\n                            {Suc n..<Suc\n(n + length xs)}) \\<rightarrow> i1) -\n                          n)", "apply (rule Suc_le_lessD)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a xs n i i1.\n       \\<lbrakk>\\<forall>n i.\n                   i < card\n                        (I \\<inter> {n..<n + length xs}) \\<longrightarrow>\n                   f_join_aux xs n I ! i =\n                   xs !\n                   (((I \\<inter> {n..<n + length xs}) \\<rightarrow> i) - n);\n        i1 < card (I \\<inter> {Suc n..<Suc (n + length xs)});\n        {n..<Suc (n + length xs)} = insert n {Suc n..<Suc (n + length xs)};\n        n \\<in> I; I \\<inter> {Suc n..<Suc (n + length xs)} \\<noteq> {};\n        i = Suc i1; Suc n \\<le> iMin {Suc n..<Suc (n + length xs)}\\<rbrakk>\n       \\<Longrightarrow> Suc n\n                         \\<le> iMin\n                                (I \\<inter> {Suc n..<Suc (n + length xs)})\n 2. \\<And>a xs n i i1.\n       \\<lbrakk>\\<forall>n i.\n                   i < card\n                        (I \\<inter> {n..<n + length xs}) \\<longrightarrow>\n                   f_join_aux xs n I ! i =\n                   xs !\n                   (((I \\<inter> {n..<n + length xs}) \\<rightarrow> i) - n);\n        i1 < card (I \\<inter> {Suc n..<Suc (n + length xs)});\n        {n..<Suc (n + length xs)} = insert n {Suc n..<Suc (n + length xs)};\n        n \\<in> I; I \\<inter> {Suc n..<Suc (n + length xs)} \\<noteq> {};\n        i = Suc i1; Suc n \\<le> iMin {Suc n..<Suc (n + length xs)}\\<rbrakk>\n       \\<Longrightarrow> xs !\n                         (((I \\<inter>\n                            {Suc n..<Suc\n(n + length xs)}) \\<rightarrow> i1) -\n                          Suc n) =\n                         (a # xs) !\n                         (((I \\<inter>\n                            {Suc n..<Suc\n(n + length xs)}) \\<rightarrow> i1) -\n                          n)", "apply (rule order_trans[OF _ iMin_Int_ge2])"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>a xs n i i1.\n       \\<lbrakk>\\<forall>n i.\n                   i < card\n                        (I \\<inter> {n..<n + length xs}) \\<longrightarrow>\n                   f_join_aux xs n I ! i =\n                   xs !\n                   (((I \\<inter> {n..<n + length xs}) \\<rightarrow> i) - n);\n        i1 < card (I \\<inter> {Suc n..<Suc (n + length xs)});\n        {n..<Suc (n + length xs)} = insert n {Suc n..<Suc (n + length xs)};\n        n \\<in> I; I \\<inter> {Suc n..<Suc (n + length xs)} \\<noteq> {};\n        i = Suc i1; Suc n \\<le> iMin {Suc n..<Suc (n + length xs)}\\<rbrakk>\n       \\<Longrightarrow> Suc n \\<le> iMin {Suc n..<Suc (n + length xs)}\n 2. \\<And>a xs n i i1.\n       \\<lbrakk>\\<forall>n i.\n                   i < card\n                        (I \\<inter> {n..<n + length xs}) \\<longrightarrow>\n                   f_join_aux xs n I ! i =\n                   xs !\n                   (((I \\<inter> {n..<n + length xs}) \\<rightarrow> i) - n);\n        i1 < card (I \\<inter> {Suc n..<Suc (n + length xs)});\n        {n..<Suc (n + length xs)} = insert n {Suc n..<Suc (n + length xs)};\n        n \\<in> I; I \\<inter> {Suc n..<Suc (n + length xs)} \\<noteq> {};\n        i = Suc i1; Suc n \\<le> iMin {Suc n..<Suc (n + length xs)}\\<rbrakk>\n       \\<Longrightarrow> I \\<inter> {Suc n..<Suc (n + length xs)} \\<noteq>\n                         {}\n 3. \\<And>a xs n i i1.\n       \\<lbrakk>\\<forall>n i.\n                   i < card\n                        (I \\<inter> {n..<n + length xs}) \\<longrightarrow>\n                   f_join_aux xs n I ! i =\n                   xs !\n                   (((I \\<inter> {n..<n + length xs}) \\<rightarrow> i) - n);\n        i1 < card (I \\<inter> {Suc n..<Suc (n + length xs)});\n        {n..<Suc (n + length xs)} = insert n {Suc n..<Suc (n + length xs)};\n        n \\<in> I; I \\<inter> {Suc n..<Suc (n + length xs)} \\<noteq> {};\n        i = Suc i1; Suc n \\<le> iMin {Suc n..<Suc (n + length xs)}\\<rbrakk>\n       \\<Longrightarrow> xs !\n                         (((I \\<inter>\n                            {Suc n..<Suc\n(n + length xs)}) \\<rightarrow> i1) -\n                          Suc n) =\n                         (a # xs) !\n                         (((I \\<inter>\n                            {Suc n..<Suc\n(n + length xs)}) \\<rightarrow> i1) -\n                          n)", "apply assumption+"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a xs n i i1.\n       \\<lbrakk>\\<forall>n i.\n                   i < card\n                        (I \\<inter> {n..<n + length xs}) \\<longrightarrow>\n                   f_join_aux xs n I ! i =\n                   xs !\n                   (((I \\<inter> {n..<n + length xs}) \\<rightarrow> i) - n);\n        i1 < card (I \\<inter> {Suc n..<Suc (n + length xs)});\n        {n..<Suc (n + length xs)} = insert n {Suc n..<Suc (n + length xs)};\n        n \\<in> I; I \\<inter> {Suc n..<Suc (n + length xs)} \\<noteq> {};\n        i = Suc i1; Suc n \\<le> iMin {Suc n..<Suc (n + length xs)}\\<rbrakk>\n       \\<Longrightarrow> xs !\n                         (((I \\<inter>\n                            {Suc n..<Suc\n(n + length xs)}) \\<rightarrow> i1) -\n                          Suc n) =\n                         (a # xs) !\n                         (((I \\<inter>\n                            {Suc n..<Suc\n(n + length xs)}) \\<rightarrow> i1) -\n                          n)", "apply (simp add: nth_Cons')"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a xs n i i1.\n       \\<lbrakk>\\<forall>n i.\n                   i < card\n                        (I \\<inter> {n..<n + length xs}) \\<longrightarrow>\n                   f_join_aux xs n I ! i =\n                   xs !\n                   (((I \\<inter> {n..<n + length xs}) \\<rightarrow> i) - n);\n        i1 < card (I \\<inter> {Suc n..<Suc (n + length xs)});\n        {n..<Suc (n + length xs)} = insert n {Suc n..<Suc (n + length xs)};\n        n \\<in> I; I \\<inter> {Suc n..<Suc (n + length xs)} \\<noteq> {};\n        i = Suc i1; Suc n \\<le> iMin {Suc n..<Suc (n + length xs)}\\<rbrakk>\n       \\<Longrightarrow> (I \\<inter>\n                          {Suc n..<Suc (n + length xs)}) \\<rightarrow> i1\n                         \\<le> n \\<longrightarrow>\n                         xs ! 0 = a", "apply (subgoal_tac \"Suc n \\<le> (I \\<inter> {Suc n..<Suc (n + length xs)}) \\<rightarrow> i1\", simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a xs n i i1.\n       \\<lbrakk>\\<forall>n i.\n                   i < card\n                        (I \\<inter> {n..<n + length xs}) \\<longrightarrow>\n                   f_join_aux xs n I ! i =\n                   xs !\n                   (((I \\<inter> {n..<n + length xs}) \\<rightarrow> i) - n);\n        i1 < card (I \\<inter> {Suc n..<Suc (n + length xs)});\n        {n..<Suc (n + length xs)} = insert n {Suc n..<Suc (n + length xs)};\n        n \\<in> I; I \\<inter> {Suc n..<Suc (n + length xs)} \\<noteq> {};\n        i = Suc i1; Suc n \\<le> iMin {Suc n..<Suc (n + length xs)}\\<rbrakk>\n       \\<Longrightarrow> Suc n\n                         \\<le> (I \\<inter>\n                                {Suc n..<Suc\n    (n + length xs)}) \\<rightarrow> i1", "apply (rule order_trans[OF _ iMin_le[OF inext_nth_closed]])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a xs n i i1.\n       \\<lbrakk>\\<forall>n i.\n                   i < card\n                        (I \\<inter> {n..<n + length xs}) \\<longrightarrow>\n                   f_join_aux xs n I ! i =\n                   xs !\n                   (((I \\<inter> {n..<n + length xs}) \\<rightarrow> i) - n);\n        i1 < card (I \\<inter> {Suc n..<Suc (n + length xs)});\n        {n..<Suc (n + length xs)} = insert n {Suc n..<Suc (n + length xs)};\n        n \\<in> I; I \\<inter> {Suc n..<Suc (n + length xs)} \\<noteq> {};\n        i = Suc i1; Suc n \\<le> iMin {Suc n..<Suc (n + length xs)}\\<rbrakk>\n       \\<Longrightarrow> Suc n\n                         \\<le> iMin\n                                (I \\<inter> {Suc n..<Suc (n + length xs)})\n 2. \\<And>a xs n i i1.\n       \\<lbrakk>\\<forall>n i.\n                   i < card\n                        (I \\<inter> {n..<n + length xs}) \\<longrightarrow>\n                   f_join_aux xs n I ! i =\n                   xs !\n                   (((I \\<inter> {n..<n + length xs}) \\<rightarrow> i) - n);\n        i1 < card (I \\<inter> {Suc n..<Suc (n + length xs)});\n        {n..<Suc (n + length xs)} = insert n {Suc n..<Suc (n + length xs)};\n        n \\<in> I; I \\<inter> {Suc n..<Suc (n + length xs)} \\<noteq> {};\n        i = Suc i1; Suc n \\<le> iMin {Suc n..<Suc (n + length xs)}\\<rbrakk>\n       \\<Longrightarrow> I \\<inter> {Suc n..<Suc (n + length xs)} \\<noteq>\n                         {}", "apply (rule order_trans[OF _ iMin_Int_ge2])"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>a xs n i i1.\n       \\<lbrakk>\\<forall>n i.\n                   i < card\n                        (I \\<inter> {n..<n + length xs}) \\<longrightarrow>\n                   f_join_aux xs n I ! i =\n                   xs !\n                   (((I \\<inter> {n..<n + length xs}) \\<rightarrow> i) - n);\n        i1 < card (I \\<inter> {Suc n..<Suc (n + length xs)});\n        {n..<Suc (n + length xs)} = insert n {Suc n..<Suc (n + length xs)};\n        n \\<in> I; I \\<inter> {Suc n..<Suc (n + length xs)} \\<noteq> {};\n        i = Suc i1; Suc n \\<le> iMin {Suc n..<Suc (n + length xs)}\\<rbrakk>\n       \\<Longrightarrow> Suc n \\<le> iMin {Suc n..<Suc (n + length xs)}\n 2. \\<And>a xs n i i1.\n       \\<lbrakk>\\<forall>n i.\n                   i < card\n                        (I \\<inter> {n..<n + length xs}) \\<longrightarrow>\n                   f_join_aux xs n I ! i =\n                   xs !\n                   (((I \\<inter> {n..<n + length xs}) \\<rightarrow> i) - n);\n        i1 < card (I \\<inter> {Suc n..<Suc (n + length xs)});\n        {n..<Suc (n + length xs)} = insert n {Suc n..<Suc (n + length xs)};\n        n \\<in> I; I \\<inter> {Suc n..<Suc (n + length xs)} \\<noteq> {};\n        i = Suc i1; Suc n \\<le> iMin {Suc n..<Suc (n + length xs)}\\<rbrakk>\n       \\<Longrightarrow> I \\<inter> {Suc n..<Suc (n + length xs)} \\<noteq>\n                         {}\n 3. \\<And>a xs n i i1.\n       \\<lbrakk>\\<forall>n i.\n                   i < card\n                        (I \\<inter> {n..<n + length xs}) \\<longrightarrow>\n                   f_join_aux xs n I ! i =\n                   xs !\n                   (((I \\<inter> {n..<n + length xs}) \\<rightarrow> i) - n);\n        i1 < card (I \\<inter> {Suc n..<Suc (n + length xs)});\n        {n..<Suc (n + length xs)} = insert n {Suc n..<Suc (n + length xs)};\n        n \\<in> I; I \\<inter> {Suc n..<Suc (n + length xs)} \\<noteq> {};\n        i = Suc i1; Suc n \\<le> iMin {Suc n..<Suc (n + length xs)}\\<rbrakk>\n       \\<Longrightarrow> I \\<inter> {Suc n..<Suc (n + length xs)} \\<noteq>\n                         {}", "apply assumption+"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "text \\<open>Joining finite streams and intervals\\<close>"], ["", "(*<*)\n(*\nlemma \"[(0::nat),10,20,30,40] \\<Join>\\<^sub>f {1,4} = [10,40]\"\nby (simp add: f_join_def)\n*)\n(*>*)"], ["", "lemma f_join_length: \"length (xs \\<Join>\\<^sub>f I) = card (I \\<down>< length xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length (xs \\<Join>\\<^sub> I) = card (I \\<down>< length xs)", "by (simp add: f_join_def f_join_aux_length atLeast0LessThan cut_less_Int_conv)"], ["", "lemma f_join_nth: \"n < length (xs \\<Join>\\<^sub>f I) \\<Longrightarrow> (xs \\<Join>\\<^sub>f I) ! n = xs ! (I \\<rightarrow> n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. n < length (xs \\<Join>\\<^sub> I) \\<Longrightarrow>\n    xs \\<Join>\\<^sub> I ! n = xs ! (I \\<rightarrow> n)", "apply (simp add: f_join_length)"], ["proof (prove)\ngoal (1 subgoal):\n 1. n < card (I \\<down>< length xs) \\<Longrightarrow>\n    xs \\<Join>\\<^sub> I ! n = xs ! (I \\<rightarrow> n)", "apply (unfold f_join_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. n < card (I \\<down>< length xs) \\<Longrightarrow>\n    f_join_aux xs 0 I ! n = xs ! (I \\<rightarrow> n)", "apply (drule back_subst[OF _ cut_less_Int_conv])"], ["proof (prove)\ngoal (1 subgoal):\n 1. n < card (I \\<inter> {..<length xs}) \\<Longrightarrow>\n    f_join_aux xs 0 I ! n = xs ! (I \\<rightarrow> n)", "apply (simp add: f_join_aux_nth atLeast0LessThan cut_less_Int_conv[symmetric] inext_nth_cut_less_eq)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma f_join_nth2: \"n < card (I \\<down>< length xs) \\<Longrightarrow> (xs \\<Join>\\<^sub>f I) ! n = xs ! (I \\<rightarrow> n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. n < card (I \\<down>< length xs) \\<Longrightarrow>\n    xs \\<Join>\\<^sub> I ! n = xs ! (I \\<rightarrow> n)", "by (simp add: f_join_nth f_join_length)"], ["", "lemma f_join_empty: \"xs \\<Join>\\<^sub>f {} = []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. xs \\<Join>\\<^sub> {} = []", "by (simp add: length_0_conv[symmetric] f_join_length cut_less_empty del: length_0_conv)"], ["", "lemma f_join_Nil: \"[] \\<Join>\\<^sub>f I = []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. [] \\<Join>\\<^sub> I = []", "by (simp add: length_0_conv[symmetric] f_join_length cut_less_0_empty del: length_0_conv)"], ["", "lemma f_join_Nil_conv: \"(xs \\<Join>\\<^sub>f I = []) = (I \\<down>< length xs = {})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (xs \\<Join>\\<^sub> I = []) = (I \\<down>< length xs = {})", "by (simp add: length_0_conv[symmetric] f_join_length card_0_eq[OF nat_cut_less_finite] del: length_0_conv)"], ["", "lemma f_join_Nil_conv': \"(xs \\<Join>\\<^sub>f I = []) = (\\<forall>i<length xs. i \\<notin> I)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (xs \\<Join>\\<^sub> I = []) = (\\<forall>i<length xs. i \\<notin> I)", "by (fastforce simp: f_join_Nil_conv)"], ["", "lemma f_join_all_conv: \"(xs \\<Join>\\<^sub>f I = xs) = ({..<length xs} \\<subseteq> I)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (xs \\<Join>\\<^sub> I = xs) = ({..<length xs} \\<subseteq> I)", "apply (case_tac \"length xs = 0\", simp add: f_join_Nil)"], ["proof (prove)\ngoal (1 subgoal):\n 1. length xs \\<noteq> 0 \\<Longrightarrow>\n    (xs \\<Join>\\<^sub> I = xs) = ({..<length xs} \\<subseteq> I)", "apply (rule iffI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>length xs \\<noteq> 0; xs \\<Join>\\<^sub> I = xs\\<rbrakk>\n    \\<Longrightarrow> {..<length xs} \\<subseteq> I\n 2. \\<lbrakk>length xs \\<noteq> 0; {..<length xs} \\<subseteq> I\\<rbrakk>\n    \\<Longrightarrow> xs \\<Join>\\<^sub> I = xs", "apply (rule subsetI, rename_tac t)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>t.\n       \\<lbrakk>length xs \\<noteq> 0; xs \\<Join>\\<^sub> I = xs;\n        t \\<in> {..<length xs}\\<rbrakk>\n       \\<Longrightarrow> t \\<in> I\n 2. \\<lbrakk>length xs \\<noteq> 0; {..<length xs} \\<subseteq> I\\<rbrakk>\n    \\<Longrightarrow> xs \\<Join>\\<^sub> I = xs", "apply (clarsimp simp: list_eq_iff[of _ xs] f_join_length)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>t.\n       \\<lbrakk>xs \\<noteq> []; t < length xs;\n        card (I \\<down>< length xs) = length xs;\n        \\<forall>i<length xs. xs \\<Join>\\<^sub> I ! i = xs ! i\\<rbrakk>\n       \\<Longrightarrow> t \\<in> I\n 2. \\<lbrakk>length xs \\<noteq> 0; {..<length xs} \\<subseteq> I\\<rbrakk>\n    \\<Longrightarrow> xs \\<Join>\\<^sub> I = xs", "apply (rule ccontr)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>t.\n       \\<lbrakk>xs \\<noteq> []; t < length xs;\n        card (I \\<down>< length xs) = length xs;\n        \\<forall>i<length xs. xs \\<Join>\\<^sub> I ! i = xs ! i;\n        t \\<notin> I\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<lbrakk>length xs \\<noteq> 0; {..<length xs} \\<subseteq> I\\<rbrakk>\n    \\<Longrightarrow> xs \\<Join>\\<^sub> I = xs", "apply (subgoal_tac \"I \\<down>< length xs \\<subset> {..<length xs}\")"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>t.\n       \\<lbrakk>xs \\<noteq> []; t < length xs;\n        card (I \\<down>< length xs) = length xs;\n        \\<forall>i<length xs. xs \\<Join>\\<^sub> I ! i = xs ! i;\n        t \\<notin> I; I \\<down>< length xs \\<subset> {..<length xs}\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>t.\n       \\<lbrakk>xs \\<noteq> []; t < length xs;\n        card (I \\<down>< length xs) = length xs;\n        \\<forall>i<length xs. xs \\<Join>\\<^sub> I ! i = xs ! i;\n        t \\<notin> I\\<rbrakk>\n       \\<Longrightarrow> I \\<down>< length xs \\<subset> {..<length xs}\n 3. \\<lbrakk>length xs \\<noteq> 0; {..<length xs} \\<subseteq> I\\<rbrakk>\n    \\<Longrightarrow> xs \\<Join>\\<^sub> I = xs", "prefer 2"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>t.\n       \\<lbrakk>xs \\<noteq> []; t < length xs;\n        card (I \\<down>< length xs) = length xs;\n        \\<forall>i<length xs. xs \\<Join>\\<^sub> I ! i = xs ! i;\n        t \\<notin> I\\<rbrakk>\n       \\<Longrightarrow> I \\<down>< length xs \\<subset> {..<length xs}\n 2. \\<And>t.\n       \\<lbrakk>xs \\<noteq> []; t < length xs;\n        card (I \\<down>< length xs) = length xs;\n        \\<forall>i<length xs. xs \\<Join>\\<^sub> I ! i = xs ! i;\n        t \\<notin> I; I \\<down>< length xs \\<subset> {..<length xs}\\<rbrakk>\n       \\<Longrightarrow> False\n 3. \\<lbrakk>length xs \\<noteq> 0; {..<length xs} \\<subseteq> I\\<rbrakk>\n    \\<Longrightarrow> xs \\<Join>\\<^sub> I = xs", "apply blast"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>t.\n       \\<lbrakk>xs \\<noteq> []; t < length xs;\n        card (I \\<down>< length xs) = length xs;\n        \\<forall>i<length xs. xs \\<Join>\\<^sub> I ! i = xs ! i;\n        t \\<notin> I; I \\<down>< length xs \\<subset> {..<length xs}\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<lbrakk>length xs \\<noteq> 0; {..<length xs} \\<subseteq> I\\<rbrakk>\n    \\<Longrightarrow> xs \\<Join>\\<^sub> I = xs", "apply (drule psubset_card_mono[OF finite_lessThan])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>t.\n       \\<lbrakk>xs \\<noteq> []; t < length xs;\n        card (I \\<down>< length xs) = length xs;\n        \\<forall>i<length xs. xs \\<Join>\\<^sub> I ! i = xs ! i;\n        t \\<notin> I;\n        card (I \\<down>< length xs) < card {..<length xs}\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<lbrakk>length xs \\<noteq> 0; {..<length xs} \\<subseteq> I\\<rbrakk>\n    \\<Longrightarrow> xs \\<Join>\\<^sub> I = xs", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>length xs \\<noteq> 0; {..<length xs} \\<subseteq> I\\<rbrakk>\n    \\<Longrightarrow> xs \\<Join>\\<^sub> I = xs", "apply (subgoal_tac \"length (xs \\<Join>\\<^sub>f I) = length xs\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>length xs \\<noteq> 0; {..<length xs} \\<subseteq> I;\n     length (xs \\<Join>\\<^sub> I) = length xs\\<rbrakk>\n    \\<Longrightarrow> xs \\<Join>\\<^sub> I = xs\n 2. \\<lbrakk>length xs \\<noteq> 0; {..<length xs} \\<subseteq> I\\<rbrakk>\n    \\<Longrightarrow> length (xs \\<Join>\\<^sub> I) = length xs", "prefer 2"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>length xs \\<noteq> 0; {..<length xs} \\<subseteq> I\\<rbrakk>\n    \\<Longrightarrow> length (xs \\<Join>\\<^sub> I) = length xs\n 2. \\<lbrakk>length xs \\<noteq> 0; {..<length xs} \\<subseteq> I;\n     length (xs \\<Join>\\<^sub> I) = length xs\\<rbrakk>\n    \\<Longrightarrow> xs \\<Join>\\<^sub> I = xs", "apply (simp add: f_join_length cut_less_Int_conv Int_absorb1)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>length xs \\<noteq> 0; {..<length xs} \\<subseteq> I;\n     length (xs \\<Join>\\<^sub> I) = length xs\\<rbrakk>\n    \\<Longrightarrow> xs \\<Join>\\<^sub> I = xs", "apply (clarsimp simp: list_eq_iff[of _ xs] f_join_nth)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i.\n       \\<lbrakk>xs \\<noteq> []; {..<length xs} \\<subseteq> I;\n        length (xs \\<Join>\\<^sub> I) = length xs; i < length xs\\<rbrakk>\n       \\<Longrightarrow> xs ! (I \\<rightarrow> i) = xs ! i", "apply (rule arg_cong[where f=\"(!) xs\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i.\n       \\<lbrakk>xs \\<noteq> []; {..<length xs} \\<subseteq> I;\n        length (xs \\<Join>\\<^sub> I) = length xs; i < length xs\\<rbrakk>\n       \\<Longrightarrow> I \\<rightarrow> i = i", "apply (subgoal_tac \"I \\<down>< length xs = {..<length xs}\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>i.\n       \\<lbrakk>xs \\<noteq> []; {..<length xs} \\<subseteq> I;\n        length (xs \\<Join>\\<^sub> I) = length xs; i < length xs;\n        I \\<down>< length xs = {..<length xs}\\<rbrakk>\n       \\<Longrightarrow> I \\<rightarrow> i = i\n 2. \\<And>i.\n       \\<lbrakk>xs \\<noteq> []; {..<length xs} \\<subseteq> I;\n        length (xs \\<Join>\\<^sub> I) = length xs; i < length xs\\<rbrakk>\n       \\<Longrightarrow> I \\<down>< length xs = {..<length xs}", "prefer 2"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>i.\n       \\<lbrakk>xs \\<noteq> []; {..<length xs} \\<subseteq> I;\n        length (xs \\<Join>\\<^sub> I) = length xs; i < length xs\\<rbrakk>\n       \\<Longrightarrow> I \\<down>< length xs = {..<length xs}\n 2. \\<And>i.\n       \\<lbrakk>xs \\<noteq> []; {..<length xs} \\<subseteq> I;\n        length (xs \\<Join>\\<^sub> I) = length xs; i < length xs;\n        I \\<down>< length xs = {..<length xs}\\<rbrakk>\n       \\<Longrightarrow> I \\<rightarrow> i = i", "apply fastforce"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i.\n       \\<lbrakk>xs \\<noteq> []; {..<length xs} \\<subseteq> I;\n        length (xs \\<Join>\\<^sub> I) = length xs; i < length xs;\n        I \\<down>< length xs = {..<length xs}\\<rbrakk>\n       \\<Longrightarrow> I \\<rightarrow> i = i", "apply (subst inext_nth_cut_less_eq[where t=\"length xs\", symmetric], simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i.\n       \\<lbrakk>xs \\<noteq> []; {..<length xs} \\<subseteq> I;\n        length (xs \\<Join>\\<^sub> I) = length xs; i < length xs;\n        I \\<down>< length xs = {..<length xs}\\<rbrakk>\n       \\<Longrightarrow> I \\<down>< length xs \\<rightarrow> i = i", "apply (simp add: inext_nth_lessThan)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma f_join_all: \"{..<length xs} \\<subseteq> I \\<Longrightarrow> xs \\<Join>\\<^sub>f I = xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {..<length xs} \\<subseteq> I \\<Longrightarrow> xs \\<Join>\\<^sub> I = xs", "by (rule f_join_all_conv[THEN iffD2])"], ["", "corollary f_join_UNIV: \"xs \\<Join>\\<^sub>f UNIV = xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. xs \\<Join>\\<^sub> UNIV = xs", "by (simp add: f_join_all)"], ["", "lemma f_join_union: \"\n  \\<lbrakk> finite A; Max A < iMin B \\<rbrakk> \\<Longrightarrow> xs \\<Join>\\<^sub>f (A \\<union> B) = xs \\<Join>\\<^sub>f A @ (xs \\<Join>\\<^sub>f B)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite A; Max A < iMin B\\<rbrakk>\n    \\<Longrightarrow> xs \\<Join>\\<^sub> (A \\<union> B) =\n                      xs \\<Join>\\<^sub> A @ xs \\<Join>\\<^sub> B", "apply (case_tac \"A = {}\", simp add: f_join_empty)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite A; Max A < iMin B; A \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> xs \\<Join>\\<^sub> (A \\<union> B) =\n                      xs \\<Join>\\<^sub> A @ xs \\<Join>\\<^sub> B", "apply (case_tac \"B = {}\", simp add: f_join_empty)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite A; Max A < iMin B; A \\<noteq> {}; B \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> xs \\<Join>\\<^sub> (A \\<union> B) =\n                      xs \\<Join>\\<^sub> A @ xs \\<Join>\\<^sub> B", "apply (frule Max_less_iMin_imp_disjoint, assumption)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite A; Max A < iMin B; A \\<noteq> {}; B \\<noteq> {};\n     A \\<inter> B = {}\\<rbrakk>\n    \\<Longrightarrow> xs \\<Join>\\<^sub> (A \\<union> B) =\n                      xs \\<Join>\\<^sub> A @ xs \\<Join>\\<^sub> B", "apply (simp add: list_eq_iff f_join_length cut_less_Un del: Max_less_iff)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite A; Max A < iMin B; A \\<noteq> {}; B \\<noteq> {};\n     A \\<inter> B = {}\\<rbrakk>\n    \\<Longrightarrow> card\n                       (A \\<down>< length xs \\<union>\n                        B \\<down>< length xs) =\n                      card (A \\<down>< length xs) +\n                      card (B \\<down>< length xs) \\<and>\n                      (\\<forall>i<card\n                                   (A \\<down>< length xs \\<union>\n                                    B \\<down>< length xs).\n                          xs \\<Join>\\<^sub> (A \\<union> B) ! i =\n                          (xs \\<Join>\\<^sub> A @ xs \\<Join>\\<^sub> B) ! i)", "apply (subgoal_tac \"A \\<down>< length xs \\<inter> B \\<down>< length xs = {}\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>finite A; Max A < iMin B; A \\<noteq> {}; B \\<noteq> {};\n     A \\<inter> B = {};\n     A \\<down>< length xs \\<inter> B \\<down>< length xs = {}\\<rbrakk>\n    \\<Longrightarrow> card\n                       (A \\<down>< length xs \\<union>\n                        B \\<down>< length xs) =\n                      card (A \\<down>< length xs) +\n                      card (B \\<down>< length xs) \\<and>\n                      (\\<forall>i<card\n                                   (A \\<down>< length xs \\<union>\n                                    B \\<down>< length xs).\n                          xs \\<Join>\\<^sub> (A \\<union> B) ! i =\n                          (xs \\<Join>\\<^sub> A @ xs \\<Join>\\<^sub> B) ! i)\n 2. \\<lbrakk>finite A; Max A < iMin B; A \\<noteq> {}; B \\<noteq> {};\n     A \\<inter> B = {}\\<rbrakk>\n    \\<Longrightarrow> A \\<down>< length xs \\<inter> B \\<down>< length xs =\n                      {}", "prefer 2"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>finite A; Max A < iMin B; A \\<noteq> {}; B \\<noteq> {};\n     A \\<inter> B = {}\\<rbrakk>\n    \\<Longrightarrow> A \\<down>< length xs \\<inter> B \\<down>< length xs =\n                      {}\n 2. \\<lbrakk>finite A; Max A < iMin B; A \\<noteq> {}; B \\<noteq> {};\n     A \\<inter> B = {};\n     A \\<down>< length xs \\<inter> B \\<down>< length xs = {}\\<rbrakk>\n    \\<Longrightarrow> card\n                       (A \\<down>< length xs \\<union>\n                        B \\<down>< length xs) =\n                      card (A \\<down>< length xs) +\n                      card (B \\<down>< length xs) \\<and>\n                      (\\<forall>i<card\n                                   (A \\<down>< length xs \\<union>\n                                    B \\<down>< length xs).\n                          xs \\<Join>\\<^sub> (A \\<union> B) ! i =\n                          (xs \\<Join>\\<^sub> A @ xs \\<Join>\\<^sub> B) ! i)", "apply (simp add: cut_less_Int[symmetric] cut_less_empty)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite A; Max A < iMin B; A \\<noteq> {}; B \\<noteq> {};\n     A \\<inter> B = {};\n     A \\<down>< length xs \\<inter> B \\<down>< length xs = {}\\<rbrakk>\n    \\<Longrightarrow> card\n                       (A \\<down>< length xs \\<union>\n                        B \\<down>< length xs) =\n                      card (A \\<down>< length xs) +\n                      card (B \\<down>< length xs) \\<and>\n                      (\\<forall>i<card\n                                   (A \\<down>< length xs \\<union>\n                                    B \\<down>< length xs).\n                          xs \\<Join>\\<^sub> (A \\<union> B) ! i =\n                          (xs \\<Join>\\<^sub> A @ xs \\<Join>\\<^sub> B) ! i)", "apply (frule card_Un_disjoint[OF nat_cut_less_finite nat_cut_less_finite])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite A; Max A < iMin B; A \\<noteq> {}; B \\<noteq> {};\n     A \\<inter> B = {};\n     A \\<down>< length xs \\<inter> B \\<down>< length xs = {};\n     card (A \\<down>< length xs \\<union> B \\<down>< length xs) =\n     card (A \\<down>< length xs) + card (B \\<down>< length xs)\\<rbrakk>\n    \\<Longrightarrow> card\n                       (A \\<down>< length xs \\<union>\n                        B \\<down>< length xs) =\n                      card (A \\<down>< length xs) +\n                      card (B \\<down>< length xs) \\<and>\n                      (\\<forall>i<card\n                                   (A \\<down>< length xs \\<union>\n                                    B \\<down>< length xs).\n                          xs \\<Join>\\<^sub> (A \\<union> B) ! i =\n                          (xs \\<Join>\\<^sub> A @ xs \\<Join>\\<^sub> B) ! i)", "apply (clarsimp simp del: Max_less_iff)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i.\n       \\<lbrakk>finite A; Max A < iMin B; A \\<noteq> {}; B \\<noteq> {};\n        A \\<inter> B = {};\n        A \\<down>< length xs \\<inter> B \\<down>< length xs = {};\n        card (A \\<down>< length xs \\<union> B \\<down>< length xs) =\n        card (A \\<down>< length xs) + card (B \\<down>< length xs);\n        i < card (A \\<down>< length xs) +\n            card (B \\<down>< length xs)\\<rbrakk>\n       \\<Longrightarrow> xs \\<Join>\\<^sub> (A \\<union> B) ! i =\n                         (xs \\<Join>\\<^sub> A @ xs \\<Join>\\<^sub> B) ! i", "apply (subst f_join_nth)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>i.\n       \\<lbrakk>finite A; Max A < iMin B; A \\<noteq> {}; B \\<noteq> {};\n        A \\<inter> B = {};\n        A \\<down>< length xs \\<inter> B \\<down>< length xs = {};\n        card (A \\<down>< length xs \\<union> B \\<down>< length xs) =\n        card (A \\<down>< length xs) + card (B \\<down>< length xs);\n        i < card (A \\<down>< length xs) +\n            card (B \\<down>< length xs)\\<rbrakk>\n       \\<Longrightarrow> i < length (xs \\<Join>\\<^sub> (A \\<union> B))\n 2. \\<And>i.\n       \\<lbrakk>finite A; Max A < iMin B; A \\<noteq> {}; B \\<noteq> {};\n        A \\<inter> B = {};\n        A \\<down>< length xs \\<inter> B \\<down>< length xs = {};\n        card (A \\<down>< length xs \\<union> B \\<down>< length xs) =\n        card (A \\<down>< length xs) + card (B \\<down>< length xs);\n        i < card (A \\<down>< length xs) +\n            card (B \\<down>< length xs)\\<rbrakk>\n       \\<Longrightarrow> xs ! ((A \\<union> B) \\<rightarrow> i) =\n                         (xs \\<Join>\\<^sub> A @ xs \\<Join>\\<^sub> B) ! i", "apply (simp add: f_join_length cut_less_Un)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i.\n       \\<lbrakk>finite A; Max A < iMin B; A \\<noteq> {}; B \\<noteq> {};\n        A \\<inter> B = {};\n        A \\<down>< length xs \\<inter> B \\<down>< length xs = {};\n        card (A \\<down>< length xs \\<union> B \\<down>< length xs) =\n        card (A \\<down>< length xs) + card (B \\<down>< length xs);\n        i < card (A \\<down>< length xs) +\n            card (B \\<down>< length xs)\\<rbrakk>\n       \\<Longrightarrow> xs ! ((A \\<union> B) \\<rightarrow> i) =\n                         (xs \\<Join>\\<^sub> A @ xs \\<Join>\\<^sub> B) ! i", "apply (simp add: nth_append f_join_length del: Max_less_iff, intro conjI impI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>i.\n       \\<lbrakk>finite A; Max A < iMin B; A \\<noteq> {}; B \\<noteq> {};\n        A \\<inter> B = {};\n        A \\<down>< length xs \\<inter> B \\<down>< length xs = {};\n        card (A \\<down>< length xs \\<union> B \\<down>< length xs) =\n        card (A \\<down>< length xs) + card (B \\<down>< length xs);\n        i < card (A \\<down>< length xs) + card (B \\<down>< length xs);\n        i < card (A \\<down>< length xs)\\<rbrakk>\n       \\<Longrightarrow> xs ! ((A \\<union> B) \\<rightarrow> i) =\n                         xs \\<Join>\\<^sub> A ! i\n 2. \\<And>i.\n       \\<lbrakk>finite A; Max A < iMin B; A \\<noteq> {}; B \\<noteq> {};\n        A \\<inter> B = {};\n        A \\<down>< length xs \\<inter> B \\<down>< length xs = {};\n        card (A \\<down>< length xs \\<union> B \\<down>< length xs) =\n        card (A \\<down>< length xs) + card (B \\<down>< length xs);\n        i < card (A \\<down>< length xs) + card (B \\<down>< length xs);\n        \\<not> i < card (A \\<down>< length xs)\\<rbrakk>\n       \\<Longrightarrow> xs ! ((A \\<union> B) \\<rightarrow> i) =\n                         xs \\<Join>\\<^sub> B !\n                         (i - card (A \\<down>< length xs))", "apply (simp add: f_join_nth f_join_length del: Max_less_iff)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>i.\n       \\<lbrakk>finite A; Max A < iMin B; A \\<noteq> {}; B \\<noteq> {};\n        A \\<inter> B = {};\n        A \\<down>< length xs \\<inter> B \\<down>< length xs = {};\n        card (A \\<down>< length xs \\<union> B \\<down>< length xs) =\n        card (A \\<down>< length xs) + card (B \\<down>< length xs);\n        i < card (A \\<down>< length xs)\\<rbrakk>\n       \\<Longrightarrow> xs ! ((A \\<union> B) \\<rightarrow> i) =\n                         xs ! (A \\<rightarrow> i)\n 2. \\<And>i.\n       \\<lbrakk>finite A; Max A < iMin B; A \\<noteq> {}; B \\<noteq> {};\n        A \\<inter> B = {};\n        A \\<down>< length xs \\<inter> B \\<down>< length xs = {};\n        card (A \\<down>< length xs \\<union> B \\<down>< length xs) =\n        card (A \\<down>< length xs) + card (B \\<down>< length xs);\n        i < card (A \\<down>< length xs) + card (B \\<down>< length xs);\n        \\<not> i < card (A \\<down>< length xs)\\<rbrakk>\n       \\<Longrightarrow> xs ! ((A \\<union> B) \\<rightarrow> i) =\n                         xs \\<Join>\\<^sub> B !\n                         (i - card (A \\<down>< length xs))", "apply (rule ssubst[OF inext_nth_card_append_eq1], assumption)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>i.\n       \\<lbrakk>finite A; Max A < iMin B; A \\<noteq> {}; B \\<noteq> {};\n        A \\<inter> B = {};\n        A \\<down>< length xs \\<inter> B \\<down>< length xs = {};\n        card (A \\<down>< length xs \\<union> B \\<down>< length xs) =\n        card (A \\<down>< length xs) + card (B \\<down>< length xs);\n        i < card (A \\<down>< length xs)\\<rbrakk>\n       \\<Longrightarrow> i < card A\n 2. \\<And>i.\n       \\<lbrakk>finite A; Max A < iMin B; A \\<noteq> {}; B \\<noteq> {};\n        A \\<inter> B = {};\n        A \\<down>< length xs \\<inter> B \\<down>< length xs = {};\n        card (A \\<down>< length xs \\<union> B \\<down>< length xs) =\n        card (A \\<down>< length xs) + card (B \\<down>< length xs);\n        i < card (A \\<down>< length xs)\\<rbrakk>\n       \\<Longrightarrow> xs ! (A \\<rightarrow> i) = xs ! (A \\<rightarrow> i)\n 3. \\<And>i.\n       \\<lbrakk>finite A; Max A < iMin B; A \\<noteq> {}; B \\<noteq> {};\n        A \\<inter> B = {};\n        A \\<down>< length xs \\<inter> B \\<down>< length xs = {};\n        card (A \\<down>< length xs \\<union> B \\<down>< length xs) =\n        card (A \\<down>< length xs) + card (B \\<down>< length xs);\n        i < card (A \\<down>< length xs) + card (B \\<down>< length xs);\n        \\<not> i < card (A \\<down>< length xs)\\<rbrakk>\n       \\<Longrightarrow> xs ! ((A \\<union> B) \\<rightarrow> i) =\n                         xs \\<Join>\\<^sub> B !\n                         (i - card (A \\<down>< length xs))", "apply (rule order_less_le_trans[OF _ cut_less_card], assumption+)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>i.\n       \\<lbrakk>finite A; Max A < iMin B; A \\<noteq> {}; B \\<noteq> {};\n        A \\<inter> B = {};\n        A \\<down>< length xs \\<inter> B \\<down>< length xs = {};\n        card (A \\<down>< length xs \\<union> B \\<down>< length xs) =\n        card (A \\<down>< length xs) + card (B \\<down>< length xs);\n        i < card (A \\<down>< length xs)\\<rbrakk>\n       \\<Longrightarrow> xs ! (A \\<rightarrow> i) = xs ! (A \\<rightarrow> i)\n 2. \\<And>i.\n       \\<lbrakk>finite A; Max A < iMin B; A \\<noteq> {}; B \\<noteq> {};\n        A \\<inter> B = {};\n        A \\<down>< length xs \\<inter> B \\<down>< length xs = {};\n        card (A \\<down>< length xs \\<union> B \\<down>< length xs) =\n        card (A \\<down>< length xs) + card (B \\<down>< length xs);\n        i < card (A \\<down>< length xs) + card (B \\<down>< length xs);\n        \\<not> i < card (A \\<down>< length xs)\\<rbrakk>\n       \\<Longrightarrow> xs ! ((A \\<union> B) \\<rightarrow> i) =\n                         xs \\<Join>\\<^sub> B !\n                         (i - card (A \\<down>< length xs))", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i.\n       \\<lbrakk>finite A; Max A < iMin B; A \\<noteq> {}; B \\<noteq> {};\n        A \\<inter> B = {};\n        A \\<down>< length xs \\<inter> B \\<down>< length xs = {};\n        card (A \\<down>< length xs \\<union> B \\<down>< length xs) =\n        card (A \\<down>< length xs) + card (B \\<down>< length xs);\n        i < card (A \\<down>< length xs) + card (B \\<down>< length xs);\n        \\<not> i < card (A \\<down>< length xs)\\<rbrakk>\n       \\<Longrightarrow> xs ! ((A \\<union> B) \\<rightarrow> i) =\n                         xs \\<Join>\\<^sub> B !\n                         (i - card (A \\<down>< length xs))", "apply (subst f_join_nth)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>i.\n       \\<lbrakk>finite A; Max A < iMin B; A \\<noteq> {}; B \\<noteq> {};\n        A \\<inter> B = {};\n        A \\<down>< length xs \\<inter> B \\<down>< length xs = {};\n        card (A \\<down>< length xs \\<union> B \\<down>< length xs) =\n        card (A \\<down>< length xs) + card (B \\<down>< length xs);\n        i < card (A \\<down>< length xs) + card (B \\<down>< length xs);\n        \\<not> i < card (A \\<down>< length xs)\\<rbrakk>\n       \\<Longrightarrow> i - card (A \\<down>< length xs)\n                         < length (xs \\<Join>\\<^sub> B)\n 2. \\<And>i.\n       \\<lbrakk>finite A; Max A < iMin B; A \\<noteq> {}; B \\<noteq> {};\n        A \\<inter> B = {};\n        A \\<down>< length xs \\<inter> B \\<down>< length xs = {};\n        card (A \\<down>< length xs \\<union> B \\<down>< length xs) =\n        card (A \\<down>< length xs) + card (B \\<down>< length xs);\n        i < card (A \\<down>< length xs) + card (B \\<down>< length xs);\n        \\<not> i < card (A \\<down>< length xs)\\<rbrakk>\n       \\<Longrightarrow> xs ! ((A \\<union> B) \\<rightarrow> i) =\n                         xs !\n                         (B \\<rightarrow> (i - card (A \\<down>< length xs)))", "apply (simp add: f_join_length)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i.\n       \\<lbrakk>finite A; Max A < iMin B; A \\<noteq> {}; B \\<noteq> {};\n        A \\<inter> B = {};\n        A \\<down>< length xs \\<inter> B \\<down>< length xs = {};\n        card (A \\<down>< length xs \\<union> B \\<down>< length xs) =\n        card (A \\<down>< length xs) + card (B \\<down>< length xs);\n        i < card (A \\<down>< length xs) + card (B \\<down>< length xs);\n        \\<not> i < card (A \\<down>< length xs)\\<rbrakk>\n       \\<Longrightarrow> xs ! ((A \\<union> B) \\<rightarrow> i) =\n                         xs !\n                         (B \\<rightarrow> (i - card (A \\<down>< length xs)))", "apply (subgoal_tac \"iMin B < length xs\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>i.\n       \\<lbrakk>finite A; Max A < iMin B; A \\<noteq> {}; B \\<noteq> {};\n        A \\<inter> B = {};\n        A \\<down>< length xs \\<inter> B \\<down>< length xs = {};\n        card (A \\<down>< length xs \\<union> B \\<down>< length xs) =\n        card (A \\<down>< length xs) + card (B \\<down>< length xs);\n        i < card (A \\<down>< length xs) + card (B \\<down>< length xs);\n        \\<not> i < card (A \\<down>< length xs); iMin B < length xs\\<rbrakk>\n       \\<Longrightarrow> xs ! ((A \\<union> B) \\<rightarrow> i) =\n                         xs !\n                         (B \\<rightarrow> (i - card (A \\<down>< length xs)))\n 2. \\<And>i.\n       \\<lbrakk>finite A; Max A < iMin B; A \\<noteq> {}; B \\<noteq> {};\n        A \\<inter> B = {};\n        A \\<down>< length xs \\<inter> B \\<down>< length xs = {};\n        card (A \\<down>< length xs \\<union> B \\<down>< length xs) =\n        card (A \\<down>< length xs) + card (B \\<down>< length xs);\n        i < card (A \\<down>< length xs) + card (B \\<down>< length xs);\n        \\<not> i < card (A \\<down>< length xs)\\<rbrakk>\n       \\<Longrightarrow> iMin B < length xs", "prefer 2"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>i.\n       \\<lbrakk>finite A; Max A < iMin B; A \\<noteq> {}; B \\<noteq> {};\n        A \\<inter> B = {};\n        A \\<down>< length xs \\<inter> B \\<down>< length xs = {};\n        card (A \\<down>< length xs \\<union> B \\<down>< length xs) =\n        card (A \\<down>< length xs) + card (B \\<down>< length xs);\n        i < card (A \\<down>< length xs) + card (B \\<down>< length xs);\n        \\<not> i < card (A \\<down>< length xs)\\<rbrakk>\n       \\<Longrightarrow> iMin B < length xs\n 2. \\<And>i.\n       \\<lbrakk>finite A; Max A < iMin B; A \\<noteq> {}; B \\<noteq> {};\n        A \\<inter> B = {};\n        A \\<down>< length xs \\<inter> B \\<down>< length xs = {};\n        card (A \\<down>< length xs \\<union> B \\<down>< length xs) =\n        card (A \\<down>< length xs) + card (B \\<down>< length xs);\n        i < card (A \\<down>< length xs) + card (B \\<down>< length xs);\n        \\<not> i < card (A \\<down>< length xs); iMin B < length xs\\<rbrakk>\n       \\<Longrightarrow> xs ! ((A \\<union> B) \\<rightarrow> i) =\n                         xs !\n                         (B \\<rightarrow> (i - card (A \\<down>< length xs)))", "apply (rule ccontr)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>i.\n       \\<lbrakk>finite A; Max A < iMin B; A \\<noteq> {}; B \\<noteq> {};\n        A \\<inter> B = {};\n        A \\<down>< length xs \\<inter> B \\<down>< length xs = {};\n        card (A \\<down>< length xs \\<union> B \\<down>< length xs) =\n        card (A \\<down>< length xs) + card (B \\<down>< length xs);\n        i < card (A \\<down>< length xs) + card (B \\<down>< length xs);\n        \\<not> i < card (A \\<down>< length xs);\n        \\<not> iMin B < length xs\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>i.\n       \\<lbrakk>finite A; Max A < iMin B; A \\<noteq> {}; B \\<noteq> {};\n        A \\<inter> B = {};\n        A \\<down>< length xs \\<inter> B \\<down>< length xs = {};\n        card (A \\<down>< length xs \\<union> B \\<down>< length xs) =\n        card (A \\<down>< length xs) + card (B \\<down>< length xs);\n        i < card (A \\<down>< length xs) + card (B \\<down>< length xs);\n        \\<not> i < card (A \\<down>< length xs); iMin B < length xs\\<rbrakk>\n       \\<Longrightarrow> xs ! ((A \\<union> B) \\<rightarrow> i) =\n                         xs !\n                         (B \\<rightarrow> (i - card (A \\<down>< length xs)))", "apply (simp add: linorder_not_less cut_less_Min_empty)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i.\n       \\<lbrakk>finite A; Max A < iMin B; A \\<noteq> {}; B \\<noteq> {};\n        A \\<inter> B = {};\n        A \\<down>< length xs \\<inter> B \\<down>< length xs = {};\n        card (A \\<down>< length xs \\<union> B \\<down>< length xs) =\n        card (A \\<down>< length xs) + card (B \\<down>< length xs);\n        i < card (A \\<down>< length xs) + card (B \\<down>< length xs);\n        \\<not> i < card (A \\<down>< length xs); iMin B < length xs\\<rbrakk>\n       \\<Longrightarrow> xs ! ((A \\<union> B) \\<rightarrow> i) =\n                         xs !\n                         (B \\<rightarrow> (i - card (A \\<down>< length xs)))", "apply (frule order_less_trans, assumption)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i.\n       \\<lbrakk>finite A; Max A < iMin B; A \\<noteq> {}; B \\<noteq> {};\n        A \\<inter> B = {};\n        A \\<down>< length xs \\<inter> B \\<down>< length xs = {};\n        card (A \\<down>< length xs \\<union> B \\<down>< length xs) =\n        card (A \\<down>< length xs) + card (B \\<down>< length xs);\n        i < card (A \\<down>< length xs) + card (B \\<down>< length xs);\n        \\<not> i < card (A \\<down>< length xs); iMin B < length xs;\n        Max A < length xs\\<rbrakk>\n       \\<Longrightarrow> xs ! ((A \\<union> B) \\<rightarrow> i) =\n                         xs !\n                         (B \\<rightarrow> (i - card (A \\<down>< length xs)))", "apply (rule arg_cong[where f=\"\\<lambda>x. xs ! x\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i.\n       \\<lbrakk>finite A; Max A < iMin B; A \\<noteq> {}; B \\<noteq> {};\n        A \\<inter> B = {};\n        A \\<down>< length xs \\<inter> B \\<down>< length xs = {};\n        card (A \\<down>< length xs \\<union> B \\<down>< length xs) =\n        card (A \\<down>< length xs) + card (B \\<down>< length xs);\n        i < card (A \\<down>< length xs) + card (B \\<down>< length xs);\n        \\<not> i < card (A \\<down>< length xs); iMin B < length xs;\n        Max A < length xs\\<rbrakk>\n       \\<Longrightarrow> (A \\<union> B) \\<rightarrow> i =\n                         B \\<rightarrow> (i - card (A \\<down>< length xs))", "apply (simp add: cut_less_Max_all inext_nth_card_append_eq2)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma f_join_singleton_if: \"\n  xs \\<Join>\\<^sub>f {n} = (if n < length xs then [xs ! n] else [])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. xs \\<Join>\\<^sub> {n} = (if n < length xs then [xs ! n] else [])", "apply (clarsimp simp: list_eq_iff f_join_length cut_less_singleton)"], ["proof (prove)\ngoal (1 subgoal):\n 1. n < length xs \\<Longrightarrow> xs \\<Join>\\<^sub> {n} ! 0 = xs ! n", "apply (insert f_join_nth[of 0 xs \"{n}\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>n < length xs;\n     0 < length (xs \\<Join>\\<^sub> {n}) \\<Longrightarrow>\n     xs \\<Join>\\<^sub> {n} ! 0 = xs ! ({n} \\<rightarrow> 0)\\<rbrakk>\n    \\<Longrightarrow> xs \\<Join>\\<^sub> {n} ! 0 = xs ! n", "apply (simp add: f_join_length cut_less_singleton)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma f_join_insert: \"\n  n < length xs \\<Longrightarrow>\n  xs \\<Join>\\<^sub>f insert n I = xs \\<Join>\\<^sub>f (I \\<down>< n) @ (xs ! n) # (xs \\<Join>\\<^sub>f (I \\<down>> n))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. n < length xs \\<Longrightarrow>\n    xs \\<Join>\\<^sub> insert n I =\n    xs \\<Join>\\<^sub> (I \\<down>< n) @\n    xs ! n # xs \\<Join>\\<^sub> (I \\<down>> n)", "apply (rule_tac t=\"insert n I\" and s=\"(I \\<down>< n) \\<union> {n} \\<union> (I \\<down>> n)\" in subst, fastforce)"], ["proof (prove)\ngoal (1 subgoal):\n 1. n < length xs \\<Longrightarrow>\n    xs \\<Join>\\<^sub> (I \\<down>< n \\<union> {n} \\<union> I \\<down>> n) =\n    xs \\<Join>\\<^sub> (I \\<down>< n) @\n    xs ! n # xs \\<Join>\\<^sub> (I \\<down>> n)", "apply (insert nat_cut_less_finite[of I n])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>n < length xs; finite (I \\<down>< n)\\<rbrakk>\n    \\<Longrightarrow> xs \\<Join>\\<^sub>\n                      (I \\<down>< n \\<union> {n} \\<union> I \\<down>> n) =\n                      xs \\<Join>\\<^sub> (I \\<down>< n) @\n                      xs ! n # xs \\<Join>\\<^sub> (I \\<down>> n)", "apply (case_tac \"I \\<down>> n = {}\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>n < length xs; finite (I \\<down>< n);\n     I \\<down>> n = {}\\<rbrakk>\n    \\<Longrightarrow> xs \\<Join>\\<^sub>\n                      (I \\<down>< n \\<union> {n} \\<union> I \\<down>> n) =\n                      xs \\<Join>\\<^sub> (I \\<down>< n) @\n                      xs ! n # xs \\<Join>\\<^sub> (I \\<down>> n)\n 2. \\<lbrakk>n < length xs; finite (I \\<down>< n);\n     I \\<down>> n \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> xs \\<Join>\\<^sub>\n                      (I \\<down>< n \\<union> {n} \\<union> I \\<down>> n) =\n                      xs \\<Join>\\<^sub> (I \\<down>< n) @\n                      xs ! n # xs \\<Join>\\<^sub> (I \\<down>> n)", "apply (simp add: f_join_empty del: Un_insert_right)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>n < length xs; finite (I \\<down>< n);\n     I \\<down>> n = {}\\<rbrakk>\n    \\<Longrightarrow> xs \\<Join>\\<^sub> (I \\<down>< n \\<union> {n}) =\n                      xs \\<Join>\\<^sub> (I \\<down>< n) @ [xs ! n]\n 2. \\<lbrakk>n < length xs; finite (I \\<down>< n);\n     I \\<down>> n \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> xs \\<Join>\\<^sub>\n                      (I \\<down>< n \\<union> {n} \\<union> I \\<down>> n) =\n                      xs \\<Join>\\<^sub> (I \\<down>< n) @\n                      xs ! n # xs \\<Join>\\<^sub> (I \\<down>> n)", "apply (case_tac \"I \\<down>< n = {}\")"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>n < length xs; finite (I \\<down>< n); I \\<down>> n = {};\n     I \\<down>< n = {}\\<rbrakk>\n    \\<Longrightarrow> xs \\<Join>\\<^sub> (I \\<down>< n \\<union> {n}) =\n                      xs \\<Join>\\<^sub> (I \\<down>< n) @ [xs ! n]\n 2. \\<lbrakk>n < length xs; finite (I \\<down>< n); I \\<down>> n = {};\n     I \\<down>< n \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> xs \\<Join>\\<^sub> (I \\<down>< n \\<union> {n}) =\n                      xs \\<Join>\\<^sub> (I \\<down>< n) @ [xs ! n]\n 3. \\<lbrakk>n < length xs; finite (I \\<down>< n);\n     I \\<down>> n \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> xs \\<Join>\\<^sub>\n                      (I \\<down>< n \\<union> {n} \\<union> I \\<down>> n) =\n                      xs \\<Join>\\<^sub> (I \\<down>< n) @\n                      xs ! n # xs \\<Join>\\<^sub> (I \\<down>> n)", "apply (simp add: f_join_empty f_join_singleton_if)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>n < length xs; finite (I \\<down>< n); I \\<down>> n = {};\n     I \\<down>< n \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> xs \\<Join>\\<^sub> (I \\<down>< n \\<union> {n}) =\n                      xs \\<Join>\\<^sub> (I \\<down>< n) @ [xs ! n]\n 2. \\<lbrakk>n < length xs; finite (I \\<down>< n);\n     I \\<down>> n \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> xs \\<Join>\\<^sub>\n                      (I \\<down>< n \\<union> {n} \\<union> I \\<down>> n) =\n                      xs \\<Join>\\<^sub> (I \\<down>< n) @\n                      xs ! n # xs \\<Join>\\<^sub> (I \\<down>> n)", "apply (subgoal_tac \"Max (I \\<down>< n) < iMin {n}\")"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>n < length xs; finite (I \\<down>< n); I \\<down>> n = {};\n     I \\<down>< n \\<noteq> {}; Max (I \\<down>< n) < iMin {n}\\<rbrakk>\n    \\<Longrightarrow> xs \\<Join>\\<^sub> (I \\<down>< n \\<union> {n}) =\n                      xs \\<Join>\\<^sub> (I \\<down>< n) @ [xs ! n]\n 2. \\<lbrakk>n < length xs; finite (I \\<down>< n); I \\<down>> n = {};\n     I \\<down>< n \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> Max (I \\<down>< n) < iMin {n}\n 3. \\<lbrakk>n < length xs; finite (I \\<down>< n);\n     I \\<down>> n \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> xs \\<Join>\\<^sub>\n                      (I \\<down>< n \\<union> {n} \\<union> I \\<down>> n) =\n                      xs \\<Join>\\<^sub> (I \\<down>< n) @\n                      xs ! n # xs \\<Join>\\<^sub> (I \\<down>> n)", "prefer 2"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>n < length xs; finite (I \\<down>< n); I \\<down>> n = {};\n     I \\<down>< n \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> Max (I \\<down>< n) < iMin {n}\n 2. \\<lbrakk>n < length xs; finite (I \\<down>< n); I \\<down>> n = {};\n     I \\<down>< n \\<noteq> {}; Max (I \\<down>< n) < iMin {n}\\<rbrakk>\n    \\<Longrightarrow> xs \\<Join>\\<^sub> (I \\<down>< n \\<union> {n}) =\n                      xs \\<Join>\\<^sub> (I \\<down>< n) @ [xs ! n]\n 3. \\<lbrakk>n < length xs; finite (I \\<down>< n);\n     I \\<down>> n \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> xs \\<Join>\\<^sub>\n                      (I \\<down>< n \\<union> {n} \\<union> I \\<down>> n) =\n                      xs \\<Join>\\<^sub> (I \\<down>< n) @\n                      xs ! n # xs \\<Join>\\<^sub> (I \\<down>> n)", "apply (simp add: cut_less_mem_iff)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>n < length xs; finite (I \\<down>< n); I \\<down>> n = {};\n     I \\<down>< n \\<noteq> {}; Max (I \\<down>< n) < iMin {n}\\<rbrakk>\n    \\<Longrightarrow> xs \\<Join>\\<^sub> (I \\<down>< n \\<union> {n}) =\n                      xs \\<Join>\\<^sub> (I \\<down>< n) @ [xs ! n]\n 2. \\<lbrakk>n < length xs; finite (I \\<down>< n);\n     I \\<down>> n \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> xs \\<Join>\\<^sub>\n                      (I \\<down>< n \\<union> {n} \\<union> I \\<down>> n) =\n                      xs \\<Join>\\<^sub> (I \\<down>< n) @\n                      xs ! n # xs \\<Join>\\<^sub> (I \\<down>> n)", "apply (simp add: f_join_union f_join_singleton_if del: Un_insert_right)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>n < length xs; finite (I \\<down>< n);\n     I \\<down>> n \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> xs \\<Join>\\<^sub>\n                      (I \\<down>< n \\<union> {n} \\<union> I \\<down>> n) =\n                      xs \\<Join>\\<^sub> (I \\<down>< n) @\n                      xs ! n # xs \\<Join>\\<^sub> (I \\<down>> n)", "apply (subgoal_tac \"Max {n} < iMin (I \\<down>> n)\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>n < length xs; finite (I \\<down>< n); I \\<down>> n \\<noteq> {};\n     Max {n} < iMin (I \\<down>> n)\\<rbrakk>\n    \\<Longrightarrow> xs \\<Join>\\<^sub>\n                      (I \\<down>< n \\<union> {n} \\<union> I \\<down>> n) =\n                      xs \\<Join>\\<^sub> (I \\<down>< n) @\n                      xs ! n # xs \\<Join>\\<^sub> (I \\<down>> n)\n 2. \\<lbrakk>n < length xs; finite (I \\<down>< n);\n     I \\<down>> n \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> Max {n} < iMin (I \\<down>> n)", "prefer 2"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>n < length xs; finite (I \\<down>< n);\n     I \\<down>> n \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> Max {n} < iMin (I \\<down>> n)\n 2. \\<lbrakk>n < length xs; finite (I \\<down>< n); I \\<down>> n \\<noteq> {};\n     Max {n} < iMin (I \\<down>> n)\\<rbrakk>\n    \\<Longrightarrow> xs \\<Join>\\<^sub>\n                      (I \\<down>< n \\<union> {n} \\<union> I \\<down>> n) =\n                      xs \\<Join>\\<^sub> (I \\<down>< n) @\n                      xs ! n # xs \\<Join>\\<^sub> (I \\<down>> n)", "apply (simp add: iMin_gr_iff cut_greater_mem_iff)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>n < length xs; finite (I \\<down>< n); I \\<down>> n \\<noteq> {};\n     Max {n} < iMin (I \\<down>> n)\\<rbrakk>\n    \\<Longrightarrow> xs \\<Join>\\<^sub>\n                      (I \\<down>< n \\<union> {n} \\<union> I \\<down>> n) =\n                      xs \\<Join>\\<^sub> (I \\<down>< n) @\n                      xs ! n # xs \\<Join>\\<^sub> (I \\<down>> n)", "apply (case_tac \"I \\<down>< n = {}\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>n < length xs; finite (I \\<down>< n); I \\<down>> n \\<noteq> {};\n     Max {n} < iMin (I \\<down>> n); I \\<down>< n = {}\\<rbrakk>\n    \\<Longrightarrow> xs \\<Join>\\<^sub>\n                      (I \\<down>< n \\<union> {n} \\<union> I \\<down>> n) =\n                      xs \\<Join>\\<^sub> (I \\<down>< n) @\n                      xs ! n # xs \\<Join>\\<^sub> (I \\<down>> n)\n 2. \\<lbrakk>n < length xs; finite (I \\<down>< n); I \\<down>> n \\<noteq> {};\n     Max {n} < iMin (I \\<down>> n); I \\<down>< n \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> xs \\<Join>\\<^sub>\n                      (I \\<down>< n \\<union> {n} \\<union> I \\<down>> n) =\n                      xs \\<Join>\\<^sub> (I \\<down>< n) @\n                      xs ! n # xs \\<Join>\\<^sub> (I \\<down>> n)", "apply (simp add: f_join_empty f_join_union f_join_singleton_if del: Un_insert_left)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>n < length xs; finite (I \\<down>< n); I \\<down>> n \\<noteq> {};\n     Max {n} < iMin (I \\<down>> n); I \\<down>< n \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> xs \\<Join>\\<^sub>\n                      (I \\<down>< n \\<union> {n} \\<union> I \\<down>> n) =\n                      xs \\<Join>\\<^sub> (I \\<down>< n) @\n                      xs ! n # xs \\<Join>\\<^sub> (I \\<down>> n)", "apply (subgoal_tac \"Max (I \\<down>< n) < iMin {n}\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>n < length xs; finite (I \\<down>< n); I \\<down>> n \\<noteq> {};\n     Max {n} < iMin (I \\<down>> n); I \\<down>< n \\<noteq> {};\n     Max (I \\<down>< n) < iMin {n}\\<rbrakk>\n    \\<Longrightarrow> xs \\<Join>\\<^sub>\n                      (I \\<down>< n \\<union> {n} \\<union> I \\<down>> n) =\n                      xs \\<Join>\\<^sub> (I \\<down>< n) @\n                      xs ! n # xs \\<Join>\\<^sub> (I \\<down>> n)\n 2. \\<lbrakk>n < length xs; finite (I \\<down>< n); I \\<down>> n \\<noteq> {};\n     Max {n} < iMin (I \\<down>> n); I \\<down>< n \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> Max (I \\<down>< n) < iMin {n}", "prefer 2"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>n < length xs; finite (I \\<down>< n); I \\<down>> n \\<noteq> {};\n     Max {n} < iMin (I \\<down>> n); I \\<down>< n \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> Max (I \\<down>< n) < iMin {n}\n 2. \\<lbrakk>n < length xs; finite (I \\<down>< n); I \\<down>> n \\<noteq> {};\n     Max {n} < iMin (I \\<down>> n); I \\<down>< n \\<noteq> {};\n     Max (I \\<down>< n) < iMin {n}\\<rbrakk>\n    \\<Longrightarrow> xs \\<Join>\\<^sub>\n                      (I \\<down>< n \\<union> {n} \\<union> I \\<down>> n) =\n                      xs \\<Join>\\<^sub> (I \\<down>< n) @\n                      xs ! n # xs \\<Join>\\<^sub> (I \\<down>> n)", "apply (simp add: cut_less_mem_iff)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>n < length xs; finite (I \\<down>< n); I \\<down>> n \\<noteq> {};\n     Max {n} < iMin (I \\<down>> n); I \\<down>< n \\<noteq> {};\n     Max (I \\<down>< n) < iMin {n}\\<rbrakk>\n    \\<Longrightarrow> xs \\<Join>\\<^sub>\n                      (I \\<down>< n \\<union> {n} \\<union> I \\<down>> n) =\n                      xs \\<Join>\\<^sub> (I \\<down>< n) @\n                      xs ! n # xs \\<Join>\\<^sub> (I \\<down>> n)", "apply (subgoal_tac \"Max (I \\<down>< n \\<union> {n}) < iMin (I \\<down>> n)\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>n < length xs; finite (I \\<down>< n); I \\<down>> n \\<noteq> {};\n     Max {n} < iMin (I \\<down>> n); I \\<down>< n \\<noteq> {};\n     Max (I \\<down>< n) < iMin {n};\n     Max (I \\<down>< n \\<union> {n}) < iMin (I \\<down>> n)\\<rbrakk>\n    \\<Longrightarrow> xs \\<Join>\\<^sub>\n                      (I \\<down>< n \\<union> {n} \\<union> I \\<down>> n) =\n                      xs \\<Join>\\<^sub> (I \\<down>< n) @\n                      xs ! n # xs \\<Join>\\<^sub> (I \\<down>> n)\n 2. \\<lbrakk>n < length xs; finite (I \\<down>< n); I \\<down>> n \\<noteq> {};\n     Max {n} < iMin (I \\<down>> n); I \\<down>< n \\<noteq> {};\n     Max (I \\<down>< n) < iMin {n}\\<rbrakk>\n    \\<Longrightarrow> Max (I \\<down>< n \\<union> {n}) < iMin (I \\<down>> n)", "prefer 2"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>n < length xs; finite (I \\<down>< n); I \\<down>> n \\<noteq> {};\n     Max {n} < iMin (I \\<down>> n); I \\<down>< n \\<noteq> {};\n     Max (I \\<down>< n) < iMin {n}\\<rbrakk>\n    \\<Longrightarrow> Max (I \\<down>< n \\<union> {n}) < iMin (I \\<down>> n)\n 2. \\<lbrakk>n < length xs; finite (I \\<down>< n); I \\<down>> n \\<noteq> {};\n     Max {n} < iMin (I \\<down>> n); I \\<down>< n \\<noteq> {};\n     Max (I \\<down>< n) < iMin {n};\n     Max (I \\<down>< n \\<union> {n}) < iMin (I \\<down>> n)\\<rbrakk>\n    \\<Longrightarrow> xs \\<Join>\\<^sub>\n                      (I \\<down>< n \\<union> {n} \\<union> I \\<down>> n) =\n                      xs \\<Join>\\<^sub> (I \\<down>< n) @\n                      xs ! n # xs \\<Join>\\<^sub> (I \\<down>> n)", "apply (simp add: iMin_gr_iff i_cut_mem_iff)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>n < length xs; finite (I \\<down>< n); I \\<down>> n \\<noteq> {};\n     Max {n} < iMin (I \\<down>> n); I \\<down>< n \\<noteq> {};\n     Max (I \\<down>< n) < iMin {n};\n     Max (I \\<down>< n \\<union> {n}) < iMin (I \\<down>> n)\\<rbrakk>\n    \\<Longrightarrow> xs \\<Join>\\<^sub>\n                      (I \\<down>< n \\<union> {n} \\<union> I \\<down>> n) =\n                      xs \\<Join>\\<^sub> (I \\<down>< n) @\n                      xs ! n # xs \\<Join>\\<^sub> (I \\<down>> n)", "apply (simp add: f_join_union f_join_singleton_if del: Un_insert_right)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma f_join_snoc: \"\n  (xs @ [x]) \\<Join>\\<^sub>f I =\n  xs \\<Join>\\<^sub>f I @ (if length xs \\<in> I then [x] else [])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (xs @ [x]) \\<Join>\\<^sub> I =\n    xs \\<Join>\\<^sub> I @ (if length xs \\<in> I then [x] else [])", "apply (simp add: list_eq_iff f_join_length)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (length xs \\<in> I \\<longrightarrow>\n     card (I \\<down>< Suc (length xs)) =\n     Suc (card (I \\<down>< length xs)) \\<and>\n     (\\<forall>i<card (I \\<down>< Suc (length xs)).\n         (xs @ [x]) \\<Join>\\<^sub> I ! i =\n         (xs \\<Join>\\<^sub> I @ [x]) ! i)) \\<and>\n    (length xs \\<notin> I \\<longrightarrow>\n     card (I \\<down>< Suc (length xs)) = card (I \\<down>< length xs) \\<and>\n     (\\<forall>i<card (I \\<down>< Suc (length xs)).\n         (xs @ [x]) \\<Join>\\<^sub> I ! i = xs \\<Join>\\<^sub> I ! i))", "apply (subgoal_tac \"\n  card (I \\<down>< Suc (length xs)) =\n  card (I \\<down>< length xs) + (if length xs \\<in> I then Suc 0 else 0)\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. card (I \\<down>< Suc (length xs)) =\n    card (I \\<down>< length xs) +\n    (if length xs \\<in> I then Suc 0 else 0) \\<Longrightarrow>\n    (length xs \\<in> I \\<longrightarrow>\n     card (I \\<down>< Suc (length xs)) =\n     Suc (card (I \\<down>< length xs)) \\<and>\n     (\\<forall>i<card (I \\<down>< Suc (length xs)).\n         (xs @ [x]) \\<Join>\\<^sub> I ! i =\n         (xs \\<Join>\\<^sub> I @ [x]) ! i)) \\<and>\n    (length xs \\<notin> I \\<longrightarrow>\n     card (I \\<down>< Suc (length xs)) = card (I \\<down>< length xs) \\<and>\n     (\\<forall>i<card (I \\<down>< Suc (length xs)).\n         (xs @ [x]) \\<Join>\\<^sub> I ! i = xs \\<Join>\\<^sub> I ! i))\n 2. card (I \\<down>< Suc (length xs)) =\n    card (I \\<down>< length xs) + (if length xs \\<in> I then Suc 0 else 0)", "prefer 2"], ["proof (prove)\ngoal (2 subgoals):\n 1. card (I \\<down>< Suc (length xs)) =\n    card (I \\<down>< length xs) + (if length xs \\<in> I then Suc 0 else 0)\n 2. card (I \\<down>< Suc (length xs)) =\n    card (I \\<down>< length xs) +\n    (if length xs \\<in> I then Suc 0 else 0) \\<Longrightarrow>\n    (length xs \\<in> I \\<longrightarrow>\n     card (I \\<down>< Suc (length xs)) =\n     Suc (card (I \\<down>< length xs)) \\<and>\n     (\\<forall>i<card (I \\<down>< Suc (length xs)).\n         (xs @ [x]) \\<Join>\\<^sub> I ! i =\n         (xs \\<Join>\\<^sub> I @ [x]) ! i)) \\<and>\n    (length xs \\<notin> I \\<longrightarrow>\n     card (I \\<down>< Suc (length xs)) = card (I \\<down>< length xs) \\<and>\n     (\\<forall>i<card (I \\<down>< Suc (length xs)).\n         (xs @ [x]) \\<Join>\\<^sub> I ! i = xs \\<Join>\\<^sub> I ! i))", "apply (simp add: nat_cut_le_less_conv[symmetric] cut_le_less_conv_if)"], ["proof (prove)\ngoal (2 subgoals):\n 1. length xs \\<in> I \\<longrightarrow>\n    card (insert (length xs) (I \\<down>< length xs)) =\n    Suc (card (I \\<down>< length xs))\n 2. card (I \\<down>< Suc (length xs)) =\n    card (I \\<down>< length xs) +\n    (if length xs \\<in> I then Suc 0 else 0) \\<Longrightarrow>\n    (length xs \\<in> I \\<longrightarrow>\n     card (I \\<down>< Suc (length xs)) =\n     Suc (card (I \\<down>< length xs)) \\<and>\n     (\\<forall>i<card (I \\<down>< Suc (length xs)).\n         (xs @ [x]) \\<Join>\\<^sub> I ! i =\n         (xs \\<Join>\\<^sub> I @ [x]) ! i)) \\<and>\n    (length xs \\<notin> I \\<longrightarrow>\n     card (I \\<down>< Suc (length xs)) = card (I \\<down>< length xs) \\<and>\n     (\\<forall>i<card (I \\<down>< Suc (length xs)).\n         (xs @ [x]) \\<Join>\\<^sub> I ! i = xs \\<Join>\\<^sub> I ! i))", "apply (simp add: card_insert_if[OF nat_cut_less_finite] cut_less_mem_iff)"], ["proof (prove)\ngoal (1 subgoal):\n 1. card (I \\<down>< Suc (length xs)) =\n    card (I \\<down>< length xs) +\n    (if length xs \\<in> I then Suc 0 else 0) \\<Longrightarrow>\n    (length xs \\<in> I \\<longrightarrow>\n     card (I \\<down>< Suc (length xs)) =\n     Suc (card (I \\<down>< length xs)) \\<and>\n     (\\<forall>i<card (I \\<down>< Suc (length xs)).\n         (xs @ [x]) \\<Join>\\<^sub> I ! i =\n         (xs \\<Join>\\<^sub> I @ [x]) ! i)) \\<and>\n    (length xs \\<notin> I \\<longrightarrow>\n     card (I \\<down>< Suc (length xs)) = card (I \\<down>< length xs) \\<and>\n     (\\<forall>i<card (I \\<down>< Suc (length xs)).\n         (xs @ [x]) \\<Join>\\<^sub> I ! i = xs \\<Join>\\<^sub> I ! i))", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. card (I \\<down>< Suc (length xs)) =\n    card (I \\<down>< length xs) +\n    (if length xs \\<in> I then Suc 0 else 0) \\<Longrightarrow>\n    (length xs \\<in> I \\<longrightarrow>\n     (\\<forall>i<Suc (card (I \\<down>< length xs)).\n         (xs @ [x]) \\<Join>\\<^sub> I ! i =\n         (xs \\<Join>\\<^sub> I @ [x]) ! i)) \\<and>\n    (length xs \\<notin> I \\<longrightarrow>\n     (\\<forall>i<card (I \\<down>< length xs).\n         (xs @ [x]) \\<Join>\\<^sub> I ! i = xs \\<Join>\\<^sub> I ! i))", "apply (case_tac \"length xs \\<in> I\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>card (I \\<down>< Suc (length xs)) =\n             card (I \\<down>< length xs) +\n             (if length xs \\<in> I then Suc 0 else 0);\n     length xs \\<in> I\\<rbrakk>\n    \\<Longrightarrow> (length xs \\<in> I \\<longrightarrow>\n                       (\\<forall>i<Suc (card (I \\<down>< length xs)).\n                           (xs @ [x]) \\<Join>\\<^sub> I ! i =\n                           (xs \\<Join>\\<^sub> I @ [x]) ! i)) \\<and>\n                      (length xs \\<notin> I \\<longrightarrow>\n                       (\\<forall>i<card (I \\<down>< length xs).\n                           (xs @ [x]) \\<Join>\\<^sub> I ! i =\n                           xs \\<Join>\\<^sub> I ! i))\n 2. \\<lbrakk>card (I \\<down>< Suc (length xs)) =\n             card (I \\<down>< length xs) +\n             (if length xs \\<in> I then Suc 0 else 0);\n     length xs \\<notin> I\\<rbrakk>\n    \\<Longrightarrow> (length xs \\<in> I \\<longrightarrow>\n                       (\\<forall>i<Suc (card (I \\<down>< length xs)).\n                           (xs @ [x]) \\<Join>\\<^sub> I ! i =\n                           (xs \\<Join>\\<^sub> I @ [x]) ! i)) \\<and>\n                      (length xs \\<notin> I \\<longrightarrow>\n                       (\\<forall>i<card (I \\<down>< length xs).\n                           (xs @ [x]) \\<Join>\\<^sub> I ! i =\n                           xs \\<Join>\\<^sub> I ! i))", "apply (clarsimp simp: f_join_length)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>i.\n       \\<lbrakk>card (I \\<down>< Suc (length xs)) =\n                Suc (card (I \\<down>< length xs));\n        length xs \\<in> I; i < Suc (card (I \\<down>< length xs))\\<rbrakk>\n       \\<Longrightarrow> (xs @ [x]) \\<Join>\\<^sub> I ! i =\n                         (xs \\<Join>\\<^sub> I @ [x]) ! i\n 2. \\<lbrakk>card (I \\<down>< Suc (length xs)) =\n             card (I \\<down>< length xs) +\n             (if length xs \\<in> I then Suc 0 else 0);\n     length xs \\<notin> I\\<rbrakk>\n    \\<Longrightarrow> (length xs \\<in> I \\<longrightarrow>\n                       (\\<forall>i<Suc (card (I \\<down>< length xs)).\n                           (xs @ [x]) \\<Join>\\<^sub> I ! i =\n                           (xs \\<Join>\\<^sub> I @ [x]) ! i)) \\<and>\n                      (length xs \\<notin> I \\<longrightarrow>\n                       (\\<forall>i<card (I \\<down>< length xs).\n                           (xs @ [x]) \\<Join>\\<^sub> I ! i =\n                           xs \\<Join>\\<^sub> I ! i))", "apply (simp add: nth_append f_join_length, intro conjI impI)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>i.\n       \\<lbrakk>card (I \\<down>< Suc (length xs)) =\n                Suc (card (I \\<down>< length xs));\n        length xs \\<in> I; i < Suc (card (I \\<down>< length xs));\n        i < card (I \\<down>< length xs)\\<rbrakk>\n       \\<Longrightarrow> (xs @ [x]) \\<Join>\\<^sub> I ! i =\n                         xs \\<Join>\\<^sub> I ! i\n 2. \\<And>i.\n       \\<lbrakk>card (I \\<down>< Suc (length xs)) =\n                Suc (card (I \\<down>< length xs));\n        length xs \\<in> I; i < Suc (card (I \\<down>< length xs));\n        \\<not> i < card (I \\<down>< length xs)\\<rbrakk>\n       \\<Longrightarrow> (xs @ [x]) \\<Join>\\<^sub> I ! i = x\n 3. \\<lbrakk>card (I \\<down>< Suc (length xs)) =\n             card (I \\<down>< length xs) +\n             (if length xs \\<in> I then Suc 0 else 0);\n     length xs \\<notin> I\\<rbrakk>\n    \\<Longrightarrow> (length xs \\<in> I \\<longrightarrow>\n                       (\\<forall>i<Suc (card (I \\<down>< length xs)).\n                           (xs @ [x]) \\<Join>\\<^sub> I ! i =\n                           (xs \\<Join>\\<^sub> I @ [x]) ! i)) \\<and>\n                      (length xs \\<notin> I \\<longrightarrow>\n                       (\\<forall>i<card (I \\<down>< length xs).\n                           (xs @ [x]) \\<Join>\\<^sub> I ! i =\n                           xs \\<Join>\\<^sub> I ! i))", "apply (subst f_join_nth[of _ \"xs @ [x]\"])"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>i.\n       \\<lbrakk>card (I \\<down>< Suc (length xs)) =\n                Suc (card (I \\<down>< length xs));\n        length xs \\<in> I; i < Suc (card (I \\<down>< length xs));\n        i < card (I \\<down>< length xs)\\<rbrakk>\n       \\<Longrightarrow> i < length ((xs @ [x]) \\<Join>\\<^sub> I)\n 2. \\<And>i.\n       \\<lbrakk>card (I \\<down>< Suc (length xs)) =\n                Suc (card (I \\<down>< length xs));\n        length xs \\<in> I; i < Suc (card (I \\<down>< length xs));\n        i < card (I \\<down>< length xs)\\<rbrakk>\n       \\<Longrightarrow> (xs @ [x]) ! (I \\<rightarrow> i) =\n                         xs \\<Join>\\<^sub> I ! i\n 3. \\<And>i.\n       \\<lbrakk>card (I \\<down>< Suc (length xs)) =\n                Suc (card (I \\<down>< length xs));\n        length xs \\<in> I; i < Suc (card (I \\<down>< length xs));\n        \\<not> i < card (I \\<down>< length xs)\\<rbrakk>\n       \\<Longrightarrow> (xs @ [x]) \\<Join>\\<^sub> I ! i = x\n 4. \\<lbrakk>card (I \\<down>< Suc (length xs)) =\n             card (I \\<down>< length xs) +\n             (if length xs \\<in> I then Suc 0 else 0);\n     length xs \\<notin> I\\<rbrakk>\n    \\<Longrightarrow> (length xs \\<in> I \\<longrightarrow>\n                       (\\<forall>i<Suc (card (I \\<down>< length xs)).\n                           (xs @ [x]) \\<Join>\\<^sub> I ! i =\n                           (xs \\<Join>\\<^sub> I @ [x]) ! i)) \\<and>\n                      (length xs \\<notin> I \\<longrightarrow>\n                       (\\<forall>i<card (I \\<down>< length xs).\n                           (xs @ [x]) \\<Join>\\<^sub> I ! i =\n                           xs \\<Join>\\<^sub> I ! i))", "apply (simp add: f_join_length)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>i.\n       \\<lbrakk>card (I \\<down>< Suc (length xs)) =\n                Suc (card (I \\<down>< length xs));\n        length xs \\<in> I; i < Suc (card (I \\<down>< length xs));\n        i < card (I \\<down>< length xs)\\<rbrakk>\n       \\<Longrightarrow> (xs @ [x]) ! (I \\<rightarrow> i) =\n                         xs \\<Join>\\<^sub> I ! i\n 2. \\<And>i.\n       \\<lbrakk>card (I \\<down>< Suc (length xs)) =\n                Suc (card (I \\<down>< length xs));\n        length xs \\<in> I; i < Suc (card (I \\<down>< length xs));\n        \\<not> i < card (I \\<down>< length xs)\\<rbrakk>\n       \\<Longrightarrow> (xs @ [x]) \\<Join>\\<^sub> I ! i = x\n 3. \\<lbrakk>card (I \\<down>< Suc (length xs)) =\n             card (I \\<down>< length xs) +\n             (if length xs \\<in> I then Suc 0 else 0);\n     length xs \\<notin> I\\<rbrakk>\n    \\<Longrightarrow> (length xs \\<in> I \\<longrightarrow>\n                       (\\<forall>i<Suc (card (I \\<down>< length xs)).\n                           (xs @ [x]) \\<Join>\\<^sub> I ! i =\n                           (xs \\<Join>\\<^sub> I @ [x]) ! i)) \\<and>\n                      (length xs \\<notin> I \\<longrightarrow>\n                       (\\<forall>i<card (I \\<down>< length xs).\n                           (xs @ [x]) \\<Join>\\<^sub> I ! i =\n                           xs \\<Join>\\<^sub> I ! i))", "apply (simp add: nth_append less_card_cut_less_imp_inext_nth_less)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>i.\n       \\<lbrakk>card (I \\<down>< Suc (length xs)) =\n                Suc (card (I \\<down>< length xs));\n        length xs \\<in> I; i < card (I \\<down>< length xs)\\<rbrakk>\n       \\<Longrightarrow> xs ! (I \\<rightarrow> i) = xs \\<Join>\\<^sub> I ! i\n 2. \\<And>i.\n       \\<lbrakk>card (I \\<down>< Suc (length xs)) =\n                Suc (card (I \\<down>< length xs));\n        length xs \\<in> I; i < Suc (card (I \\<down>< length xs));\n        \\<not> i < card (I \\<down>< length xs)\\<rbrakk>\n       \\<Longrightarrow> (xs @ [x]) \\<Join>\\<^sub> I ! i = x\n 3. \\<lbrakk>card (I \\<down>< Suc (length xs)) =\n             card (I \\<down>< length xs) +\n             (if length xs \\<in> I then Suc 0 else 0);\n     length xs \\<notin> I\\<rbrakk>\n    \\<Longrightarrow> (length xs \\<in> I \\<longrightarrow>\n                       (\\<forall>i<Suc (card (I \\<down>< length xs)).\n                           (xs @ [x]) \\<Join>\\<^sub> I ! i =\n                           (xs \\<Join>\\<^sub> I @ [x]) ! i)) \\<and>\n                      (length xs \\<notin> I \\<longrightarrow>\n                       (\\<forall>i<card (I \\<down>< length xs).\n                           (xs @ [x]) \\<Join>\\<^sub> I ! i =\n                           xs \\<Join>\\<^sub> I ! i))", "apply (simp add: f_join_nth f_join_length)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>i.\n       \\<lbrakk>card (I \\<down>< Suc (length xs)) =\n                Suc (card (I \\<down>< length xs));\n        length xs \\<in> I; i < Suc (card (I \\<down>< length xs));\n        \\<not> i < card (I \\<down>< length xs)\\<rbrakk>\n       \\<Longrightarrow> (xs @ [x]) \\<Join>\\<^sub> I ! i = x\n 2. \\<lbrakk>card (I \\<down>< Suc (length xs)) =\n             card (I \\<down>< length xs) +\n             (if length xs \\<in> I then Suc 0 else 0);\n     length xs \\<notin> I\\<rbrakk>\n    \\<Longrightarrow> (length xs \\<in> I \\<longrightarrow>\n                       (\\<forall>i<Suc (card (I \\<down>< length xs)).\n                           (xs @ [x]) \\<Join>\\<^sub> I ! i =\n                           (xs \\<Join>\\<^sub> I @ [x]) ! i)) \\<and>\n                      (length xs \\<notin> I \\<longrightarrow>\n                       (\\<forall>i<card (I \\<down>< length xs).\n                           (xs @ [x]) \\<Join>\\<^sub> I ! i =\n                           xs \\<Join>\\<^sub> I ! i))", "apply (simp add: linorder_not_less less_Suc_eq_le)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>i.\n       \\<lbrakk>card (I \\<down>< Suc (length xs)) =\n                Suc (card (I \\<down>< length xs));\n        length xs \\<in> I; i = card (I \\<down>< length xs)\\<rbrakk>\n       \\<Longrightarrow> (xs @ [x]) \\<Join>\\<^sub> I !\n                         card (I \\<down>< length xs) =\n                         x\n 2. \\<lbrakk>card (I \\<down>< Suc (length xs)) =\n             card (I \\<down>< length xs) +\n             (if length xs \\<in> I then Suc 0 else 0);\n     length xs \\<notin> I\\<rbrakk>\n    \\<Longrightarrow> (length xs \\<in> I \\<longrightarrow>\n                       (\\<forall>i<Suc (card (I \\<down>< length xs)).\n                           (xs @ [x]) \\<Join>\\<^sub> I ! i =\n                           (xs \\<Join>\\<^sub> I @ [x]) ! i)) \\<and>\n                      (length xs \\<notin> I \\<longrightarrow>\n                       (\\<forall>i<card (I \\<down>< length xs).\n                           (xs @ [x]) \\<Join>\\<^sub> I ! i =\n                           xs \\<Join>\\<^sub> I ! i))", "apply (subst f_join_nth)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>i.\n       \\<lbrakk>card (I \\<down>< Suc (length xs)) =\n                Suc (card (I \\<down>< length xs));\n        length xs \\<in> I; i = card (I \\<down>< length xs)\\<rbrakk>\n       \\<Longrightarrow> card (I \\<down>< length xs)\n                         < length ((xs @ [x]) \\<Join>\\<^sub> I)\n 2. \\<And>i.\n       \\<lbrakk>card (I \\<down>< Suc (length xs)) =\n                Suc (card (I \\<down>< length xs));\n        length xs \\<in> I; i = card (I \\<down>< length xs)\\<rbrakk>\n       \\<Longrightarrow> (xs @ [x]) !\n                         (I \\<rightarrow> card (I \\<down>< length xs)) =\n                         x\n 3. \\<lbrakk>card (I \\<down>< Suc (length xs)) =\n             card (I \\<down>< length xs) +\n             (if length xs \\<in> I then Suc 0 else 0);\n     length xs \\<notin> I\\<rbrakk>\n    \\<Longrightarrow> (length xs \\<in> I \\<longrightarrow>\n                       (\\<forall>i<Suc (card (I \\<down>< length xs)).\n                           (xs @ [x]) \\<Join>\\<^sub> I ! i =\n                           (xs \\<Join>\\<^sub> I @ [x]) ! i)) \\<and>\n                      (length xs \\<notin> I \\<longrightarrow>\n                       (\\<forall>i<card (I \\<down>< length xs).\n                           (xs @ [x]) \\<Join>\\<^sub> I ! i =\n                           xs \\<Join>\\<^sub> I ! i))", "apply (simp add: f_join_length)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>i.\n       \\<lbrakk>card (I \\<down>< Suc (length xs)) =\n                Suc (card (I \\<down>< length xs));\n        length xs \\<in> I; i = card (I \\<down>< length xs)\\<rbrakk>\n       \\<Longrightarrow> (xs @ [x]) !\n                         (I \\<rightarrow> card (I \\<down>< length xs)) =\n                         x\n 2. \\<lbrakk>card (I \\<down>< Suc (length xs)) =\n             card (I \\<down>< length xs) +\n             (if length xs \\<in> I then Suc 0 else 0);\n     length xs \\<notin> I\\<rbrakk>\n    \\<Longrightarrow> (length xs \\<in> I \\<longrightarrow>\n                       (\\<forall>i<Suc (card (I \\<down>< length xs)).\n                           (xs @ [x]) \\<Join>\\<^sub> I ! i =\n                           (xs \\<Join>\\<^sub> I @ [x]) ! i)) \\<and>\n                      (length xs \\<notin> I \\<longrightarrow>\n                       (\\<forall>i<card (I \\<down>< length xs).\n                           (xs @ [x]) \\<Join>\\<^sub> I ! i =\n                           xs \\<Join>\\<^sub> I ! i))", "apply (subgoal_tac \"I \\<rightarrow> i = length xs\")"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>i.\n       \\<lbrakk>card (I \\<down>< Suc (length xs)) =\n                Suc (card (I \\<down>< length xs));\n        length xs \\<in> I; i = card (I \\<down>< length xs);\n        I \\<rightarrow> i = length xs\\<rbrakk>\n       \\<Longrightarrow> (xs @ [x]) !\n                         (I \\<rightarrow> card (I \\<down>< length xs)) =\n                         x\n 2. \\<And>i.\n       \\<lbrakk>card (I \\<down>< Suc (length xs)) =\n                Suc (card (I \\<down>< length xs));\n        length xs \\<in> I; i = card (I \\<down>< length xs)\\<rbrakk>\n       \\<Longrightarrow> I \\<rightarrow> i = length xs\n 3. \\<lbrakk>card (I \\<down>< Suc (length xs)) =\n             card (I \\<down>< length xs) +\n             (if length xs \\<in> I then Suc 0 else 0);\n     length xs \\<notin> I\\<rbrakk>\n    \\<Longrightarrow> (length xs \\<in> I \\<longrightarrow>\n                       (\\<forall>i<Suc (card (I \\<down>< length xs)).\n                           (xs @ [x]) \\<Join>\\<^sub> I ! i =\n                           (xs \\<Join>\\<^sub> I @ [x]) ! i)) \\<and>\n                      (length xs \\<notin> I \\<longrightarrow>\n                       (\\<forall>i<card (I \\<down>< length xs).\n                           (xs @ [x]) \\<Join>\\<^sub> I ! i =\n                           xs \\<Join>\\<^sub> I ! i))", "prefer 2"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>i.\n       \\<lbrakk>card (I \\<down>< Suc (length xs)) =\n                Suc (card (I \\<down>< length xs));\n        length xs \\<in> I; i = card (I \\<down>< length xs)\\<rbrakk>\n       \\<Longrightarrow> I \\<rightarrow> i = length xs\n 2. \\<And>i.\n       \\<lbrakk>card (I \\<down>< Suc (length xs)) =\n                Suc (card (I \\<down>< length xs));\n        length xs \\<in> I; i = card (I \\<down>< length xs);\n        I \\<rightarrow> i = length xs\\<rbrakk>\n       \\<Longrightarrow> (xs @ [x]) !\n                         (I \\<rightarrow> card (I \\<down>< length xs)) =\n                         x\n 3. \\<lbrakk>card (I \\<down>< Suc (length xs)) =\n             card (I \\<down>< length xs) +\n             (if length xs \\<in> I then Suc 0 else 0);\n     length xs \\<notin> I\\<rbrakk>\n    \\<Longrightarrow> (length xs \\<in> I \\<longrightarrow>\n                       (\\<forall>i<Suc (card (I \\<down>< length xs)).\n                           (xs @ [x]) \\<Join>\\<^sub> I ! i =\n                           (xs \\<Join>\\<^sub> I @ [x]) ! i)) \\<and>\n                      (length xs \\<notin> I \\<longrightarrow>\n                       (\\<forall>i<card (I \\<down>< length xs).\n                           (xs @ [x]) \\<Join>\\<^sub> I ! i =\n                           xs \\<Join>\\<^sub> I ! i))", "apply (rule_tac t=\"length xs\" and s=\"Max (I \\<down>< Suc (length xs))\" in subst)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>i.\n       \\<lbrakk>card (I \\<down>< Suc (length xs)) =\n                Suc (card (I \\<down>< length xs));\n        length xs \\<in> I; i = card (I \\<down>< length xs)\\<rbrakk>\n       \\<Longrightarrow> Max (I \\<down>< Suc (length xs)) = length xs\n 2. \\<And>i.\n       \\<lbrakk>card (I \\<down>< Suc (length xs)) =\n                Suc (card (I \\<down>< length xs));\n        length xs \\<in> I; i = card (I \\<down>< length xs)\\<rbrakk>\n       \\<Longrightarrow> I \\<rightarrow> i =\n                         Max (I \\<down>< Suc (length xs))\n 3. \\<And>i.\n       \\<lbrakk>card (I \\<down>< Suc (length xs)) =\n                Suc (card (I \\<down>< length xs));\n        length xs \\<in> I; i = card (I \\<down>< length xs);\n        I \\<rightarrow> i = length xs\\<rbrakk>\n       \\<Longrightarrow> (xs @ [x]) !\n                         (I \\<rightarrow> card (I \\<down>< length xs)) =\n                         x\n 4. \\<lbrakk>card (I \\<down>< Suc (length xs)) =\n             card (I \\<down>< length xs) +\n             (if length xs \\<in> I then Suc 0 else 0);\n     length xs \\<notin> I\\<rbrakk>\n    \\<Longrightarrow> (length xs \\<in> I \\<longrightarrow>\n                       (\\<forall>i<Suc (card (I \\<down>< length xs)).\n                           (xs @ [x]) \\<Join>\\<^sub> I ! i =\n                           (xs \\<Join>\\<^sub> I @ [x]) ! i)) \\<and>\n                      (length xs \\<notin> I \\<longrightarrow>\n                       (\\<forall>i<card (I \\<down>< length xs).\n                           (xs @ [x]) \\<Join>\\<^sub> I ! i =\n                           xs \\<Join>\\<^sub> I ! i))", "apply (rule Max_equality[OF _ nat_cut_less_finite])"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>i.\n       \\<lbrakk>card (I \\<down>< Suc (length xs)) =\n                Suc (card (I \\<down>< length xs));\n        length xs \\<in> I; i = card (I \\<down>< length xs)\\<rbrakk>\n       \\<Longrightarrow> length xs \\<in> I \\<down>< Suc (length xs)\n 2. \\<And>i x.\n       \\<lbrakk>card (I \\<down>< Suc (length xs)) =\n                Suc (card (I \\<down>< length xs));\n        length xs \\<in> I; i = card (I \\<down>< length xs);\n        x \\<in> I \\<down>< Suc (length xs)\\<rbrakk>\n       \\<Longrightarrow> x \\<le> length xs\n 3. \\<And>i.\n       \\<lbrakk>card (I \\<down>< Suc (length xs)) =\n                Suc (card (I \\<down>< length xs));\n        length xs \\<in> I; i = card (I \\<down>< length xs)\\<rbrakk>\n       \\<Longrightarrow> I \\<rightarrow> i =\n                         Max (I \\<down>< Suc (length xs))\n 4. \\<And>i.\n       \\<lbrakk>card (I \\<down>< Suc (length xs)) =\n                Suc (card (I \\<down>< length xs));\n        length xs \\<in> I; i = card (I \\<down>< length xs);\n        I \\<rightarrow> i = length xs\\<rbrakk>\n       \\<Longrightarrow> (xs @ [x]) !\n                         (I \\<rightarrow> card (I \\<down>< length xs)) =\n                         x\n 5. \\<lbrakk>card (I \\<down>< Suc (length xs)) =\n             card (I \\<down>< length xs) +\n             (if length xs \\<in> I then Suc 0 else 0);\n     length xs \\<notin> I\\<rbrakk>\n    \\<Longrightarrow> (length xs \\<in> I \\<longrightarrow>\n                       (\\<forall>i<Suc (card (I \\<down>< length xs)).\n                           (xs @ [x]) \\<Join>\\<^sub> I ! i =\n                           (xs \\<Join>\\<^sub> I @ [x]) ! i)) \\<and>\n                      (length xs \\<notin> I \\<longrightarrow>\n                       (\\<forall>i<card (I \\<down>< length xs).\n                           (xs @ [x]) \\<Join>\\<^sub> I ! i =\n                           xs \\<Join>\\<^sub> I ! i))", "apply (simp add: cut_less_mem_iff)+"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>i.\n       \\<lbrakk>card (I \\<down>< Suc (length xs)) =\n                Suc (card (I \\<down>< length xs));\n        length xs \\<in> I; i = card (I \\<down>< length xs)\\<rbrakk>\n       \\<Longrightarrow> I \\<rightarrow> card (I \\<down>< length xs) =\n                         Max (I \\<down>< Suc (length xs))\n 2. \\<And>i.\n       \\<lbrakk>card (I \\<down>< Suc (length xs)) =\n                Suc (card (I \\<down>< length xs));\n        length xs \\<in> I; i = card (I \\<down>< length xs);\n        I \\<rightarrow> i = length xs\\<rbrakk>\n       \\<Longrightarrow> (xs @ [x]) !\n                         (I \\<rightarrow> card (I \\<down>< length xs)) =\n                         x\n 3. \\<lbrakk>card (I \\<down>< Suc (length xs)) =\n             card (I \\<down>< length xs) +\n             (if length xs \\<in> I then Suc 0 else 0);\n     length xs \\<notin> I\\<rbrakk>\n    \\<Longrightarrow> (length xs \\<in> I \\<longrightarrow>\n                       (\\<forall>i<Suc (card (I \\<down>< length xs)).\n                           (xs @ [x]) \\<Join>\\<^sub> I ! i =\n                           (xs \\<Join>\\<^sub> I @ [x]) ! i)) \\<and>\n                      (length xs \\<notin> I \\<longrightarrow>\n                       (\\<forall>i<card (I \\<down>< length xs).\n                           (xs @ [x]) \\<Join>\\<^sub> I ! i =\n                           xs \\<Join>\\<^sub> I ! i))", "apply (subst inext_nth_cut_less_eq[of _ _ \"Suc (length xs)\", symmetric], simp)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>i.\n       \\<lbrakk>card (I \\<down>< Suc (length xs)) =\n                Suc (card (I \\<down>< length xs));\n        length xs \\<in> I; i = card (I \\<down>< length xs)\\<rbrakk>\n       \\<Longrightarrow> I \\<down><\n                         Suc (length\n                               xs) \\<rightarrow> card\n            (I \\<down>< length xs) =\n                         Max (I \\<down>< Suc (length xs))\n 2. \\<And>i.\n       \\<lbrakk>card (I \\<down>< Suc (length xs)) =\n                Suc (card (I \\<down>< length xs));\n        length xs \\<in> I; i = card (I \\<down>< length xs);\n        I \\<rightarrow> i = length xs\\<rbrakk>\n       \\<Longrightarrow> (xs @ [x]) !\n                         (I \\<rightarrow> card (I \\<down>< length xs)) =\n                         x\n 3. \\<lbrakk>card (I \\<down>< Suc (length xs)) =\n             card (I \\<down>< length xs) +\n             (if length xs \\<in> I then Suc 0 else 0);\n     length xs \\<notin> I\\<rbrakk>\n    \\<Longrightarrow> (length xs \\<in> I \\<longrightarrow>\n                       (\\<forall>i<Suc (card (I \\<down>< length xs)).\n                           (xs @ [x]) \\<Join>\\<^sub> I ! i =\n                           (xs \\<Join>\\<^sub> I @ [x]) ! i)) \\<and>\n                      (length xs \\<notin> I \\<longrightarrow>\n                       (\\<forall>i<card (I \\<down>< length xs).\n                           (xs @ [x]) \\<Join>\\<^sub> I ! i =\n                           xs \\<Join>\\<^sub> I ! i))", "apply (rule inext_nth_card_Max[OF nat_cut_less_finite])"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>i.\n       \\<lbrakk>card (I \\<down>< Suc (length xs)) =\n                Suc (card (I \\<down>< length xs));\n        length xs \\<in> I; i = card (I \\<down>< length xs)\\<rbrakk>\n       \\<Longrightarrow> I \\<down>< Suc (length xs) \\<noteq> {}\n 2. \\<And>i.\n       \\<lbrakk>card (I \\<down>< Suc (length xs)) =\n                Suc (card (I \\<down>< length xs));\n        length xs \\<in> I; i = card (I \\<down>< length xs)\\<rbrakk>\n       \\<Longrightarrow> card (I \\<down>< Suc (length xs))\n                         \\<le> Suc (card (I \\<down>< length xs))\n 3. \\<And>i.\n       \\<lbrakk>card (I \\<down>< Suc (length xs)) =\n                Suc (card (I \\<down>< length xs));\n        length xs \\<in> I; i = card (I \\<down>< length xs);\n        I \\<rightarrow> i = length xs\\<rbrakk>\n       \\<Longrightarrow> (xs @ [x]) !\n                         (I \\<rightarrow> card (I \\<down>< length xs)) =\n                         x\n 4. \\<lbrakk>card (I \\<down>< Suc (length xs)) =\n             card (I \\<down>< length xs) +\n             (if length xs \\<in> I then Suc 0 else 0);\n     length xs \\<notin> I\\<rbrakk>\n    \\<Longrightarrow> (length xs \\<in> I \\<longrightarrow>\n                       (\\<forall>i<Suc (card (I \\<down>< length xs)).\n                           (xs @ [x]) \\<Join>\\<^sub> I ! i =\n                           (xs \\<Join>\\<^sub> I @ [x]) ! i)) \\<and>\n                      (length xs \\<notin> I \\<longrightarrow>\n                       (\\<forall>i<card (I \\<down>< length xs).\n                           (xs @ [x]) \\<Join>\\<^sub> I ! i =\n                           xs \\<Join>\\<^sub> I ! i))", "apply (simp add: card_gr0_imp_not_empty)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>i.\n       \\<lbrakk>card (I \\<down>< Suc (length xs)) =\n                Suc (card (I \\<down>< length xs));\n        length xs \\<in> I; i = card (I \\<down>< length xs)\\<rbrakk>\n       \\<Longrightarrow> card (I \\<down>< Suc (length xs))\n                         \\<le> Suc (card (I \\<down>< length xs))\n 2. \\<And>i.\n       \\<lbrakk>card (I \\<down>< Suc (length xs)) =\n                Suc (card (I \\<down>< length xs));\n        length xs \\<in> I; i = card (I \\<down>< length xs);\n        I \\<rightarrow> i = length xs\\<rbrakk>\n       \\<Longrightarrow> (xs @ [x]) !\n                         (I \\<rightarrow> card (I \\<down>< length xs)) =\n                         x\n 3. \\<lbrakk>card (I \\<down>< Suc (length xs)) =\n             card (I \\<down>< length xs) +\n             (if length xs \\<in> I then Suc 0 else 0);\n     length xs \\<notin> I\\<rbrakk>\n    \\<Longrightarrow> (length xs \\<in> I \\<longrightarrow>\n                       (\\<forall>i<Suc (card (I \\<down>< length xs)).\n                           (xs @ [x]) \\<Join>\\<^sub> I ! i =\n                           (xs \\<Join>\\<^sub> I @ [x]) ! i)) \\<and>\n                      (length xs \\<notin> I \\<longrightarrow>\n                       (\\<forall>i<card (I \\<down>< length xs).\n                           (xs @ [x]) \\<Join>\\<^sub> I ! i =\n                           xs \\<Join>\\<^sub> I ! i))", "apply simp+"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>card (I \\<down>< Suc (length xs)) =\n             card (I \\<down>< length xs);\n     length xs \\<notin> I\\<rbrakk>\n    \\<Longrightarrow> \\<forall>i<card (I \\<down>< length xs).\n                         (xs @ [x]) \\<Join>\\<^sub> I ! i =\n                         xs \\<Join>\\<^sub> I ! i", "apply (simp add: f_join_nth f_join_length)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>card (I \\<down>< Suc (length xs)) =\n             card (I \\<down>< length xs);\n     length xs \\<notin> I\\<rbrakk>\n    \\<Longrightarrow> \\<forall>i<card (I \\<down>< length xs).\n                         (xs @ [x]) ! (I \\<rightarrow> i) =\n                         xs ! (I \\<rightarrow> i)", "apply (simp add: nth_append less_card_cut_less_imp_inext_nth_less)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "(*<*)\n(*\nlemma \"\n  let xs = [0::nat,10,20,30]; ys =[100,110,120,130]; I = {0,2,4,6} in\n  (xs @ ys) \\<Join>\\<^sub>f I = xs \\<Join>\\<^sub>f I @ (ys \\<Join>\\<^sub>f (I \\<oplus>- (length xs)))\"\nby (simp add: Let_def f_join_def iT_Plus_neg_def)\n*)\n(*>*)"], ["", "lemma f_join_append: \"\n  (xs @ ys) \\<Join>\\<^sub>f I = xs \\<Join>\\<^sub>f I @ ys \\<Join>\\<^sub>f (I \\<oplus>- (length xs))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (xs @ ys) \\<Join>\\<^sub> I =\n    xs \\<Join>\\<^sub> I @ ys \\<Join>\\<^sub> (I \\<oplus>- length xs)", "apply (induct ys rule: rev_induct)"], ["proof (prove)\ngoal (2 subgoals):\n 1. (xs @ []) \\<Join>\\<^sub> I =\n    xs \\<Join>\\<^sub> I @ [] \\<Join>\\<^sub> (I \\<oplus>- length xs)\n 2. \\<And>x xsa.\n       (xs @ xsa) \\<Join>\\<^sub> I =\n       xs \\<Join>\\<^sub> I @\n       xsa \\<Join>\\<^sub> (I \\<oplus>- length xs) \\<Longrightarrow>\n       (xs @ xsa @ [x]) \\<Join>\\<^sub> I =\n       xs \\<Join>\\<^sub> I @\n       (xsa @ [x]) \\<Join>\\<^sub> (I \\<oplus>- length xs)", "apply (simp add: f_join_Nil)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x xsa.\n       (xs @ xsa) \\<Join>\\<^sub> I =\n       xs \\<Join>\\<^sub> I @\n       xsa \\<Join>\\<^sub> (I \\<oplus>- length xs) \\<Longrightarrow>\n       (xs @ xsa @ [x]) \\<Join>\\<^sub> I =\n       xs \\<Join>\\<^sub> I @\n       (xsa @ [x]) \\<Join>\\<^sub> (I \\<oplus>- length xs)", "apply (simp add: append_assoc[symmetric] f_join_snoc del: append_assoc)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xsa.\n       (xs @ xsa) \\<Join>\\<^sub> I =\n       xs \\<Join>\\<^sub> I @\n       xsa \\<Join>\\<^sub> (I \\<oplus>- length xs) \\<Longrightarrow>\n       (length xs + length xsa \\<in> I \\<longrightarrow>\n        length xsa \\<in> I \\<oplus>- length xs) \\<and>\n       (length xs + length xsa \\<notin> I \\<longrightarrow>\n        length xsa \\<notin> I \\<oplus>- length xs)", "apply (simp add: iT_Plus_neg_mem_iff add.commute[of \"length xs\"])"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma take_f_join_eq1: \"\n  n < card (I \\<down>< length xs) \\<Longrightarrow>\n  (xs \\<Join>\\<^sub>f I) \\<down> n = xs \\<Join>\\<^sub>f (I \\<down>< (I \\<rightarrow> n))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. n < card (I \\<down>< length xs) \\<Longrightarrow>\n    xs \\<Join>\\<^sub> I \\<down> n =\n    xs \\<Join>\\<^sub> (I \\<down>< (I \\<rightarrow> n))", "apply (frule less_card_cut_less_imp_inext_nth_less)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>n < card (I \\<down>< length xs);\n     I \\<rightarrow> n < length xs\\<rbrakk>\n    \\<Longrightarrow> xs \\<Join>\\<^sub> I \\<down> n =\n                      xs \\<Join>\\<^sub> (I \\<down>< (I \\<rightarrow> n))", "apply (simp add: list_eq_iff f_join_length cut_cut_less min_eqR)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>n < card (I \\<down>< length xs);\n     I \\<rightarrow> n < length xs\\<rbrakk>\n    \\<Longrightarrow> n =\n                      card\n                       (I \\<down><\n                        min (I \\<rightarrow> n) (length xs)) \\<and>\n                      (\\<forall>i<n.\n                          xs \\<Join>\\<^sub> I ! i =\n                          xs \\<Join>\\<^sub>\n                          (I \\<down>< (I \\<rightarrow> n)) !\n                          i)", "apply (subgoal_tac \"n < card I \\<or> infinite I\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>n < card (I \\<down>< length xs); I \\<rightarrow> n < length xs;\n     n < card I \\<or> infinite I\\<rbrakk>\n    \\<Longrightarrow> n =\n                      card\n                       (I \\<down><\n                        min (I \\<rightarrow> n) (length xs)) \\<and>\n                      (\\<forall>i<n.\n                          xs \\<Join>\\<^sub> I ! i =\n                          xs \\<Join>\\<^sub>\n                          (I \\<down>< (I \\<rightarrow> n)) !\n                          i)\n 2. \\<lbrakk>n < card (I \\<down>< length xs);\n     I \\<rightarrow> n < length xs\\<rbrakk>\n    \\<Longrightarrow> n < card I \\<or> infinite I", "prefer 2"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>n < card (I \\<down>< length xs);\n     I \\<rightarrow> n < length xs\\<rbrakk>\n    \\<Longrightarrow> n < card I \\<or> infinite I\n 2. \\<lbrakk>n < card (I \\<down>< length xs); I \\<rightarrow> n < length xs;\n     n < card I \\<or> infinite I\\<rbrakk>\n    \\<Longrightarrow> n =\n                      card\n                       (I \\<down><\n                        min (I \\<rightarrow> n) (length xs)) \\<and>\n                      (\\<forall>i<n.\n                          xs \\<Join>\\<^sub> I ! i =\n                          xs \\<Join>\\<^sub>\n                          (I \\<down>< (I \\<rightarrow> n)) !\n                          i)", "apply (case_tac \"finite I\")"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>n < card (I \\<down>< length xs); I \\<rightarrow> n < length xs;\n     finite I\\<rbrakk>\n    \\<Longrightarrow> n < card I \\<or> infinite I\n 2. \\<lbrakk>n < card (I \\<down>< length xs); I \\<rightarrow> n < length xs;\n     infinite I\\<rbrakk>\n    \\<Longrightarrow> n < card I \\<or> infinite I\n 3. \\<lbrakk>n < card (I \\<down>< length xs); I \\<rightarrow> n < length xs;\n     n < card I \\<or> infinite I\\<rbrakk>\n    \\<Longrightarrow> n =\n                      card\n                       (I \\<down><\n                        min (I \\<rightarrow> n) (length xs)) \\<and>\n                      (\\<forall>i<n.\n                          xs \\<Join>\\<^sub> I ! i =\n                          xs \\<Join>\\<^sub>\n                          (I \\<down>< (I \\<rightarrow> n)) !\n                          i)", "apply (drule order_less_le_trans[OF _ cut_less_card], simp+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>n < card (I \\<down>< length xs); I \\<rightarrow> n < length xs;\n     n < card I \\<or> infinite I\\<rbrakk>\n    \\<Longrightarrow> n =\n                      card\n                       (I \\<down><\n                        min (I \\<rightarrow> n) (length xs)) \\<and>\n                      (\\<forall>i<n.\n                          xs \\<Join>\\<^sub> I ! i =\n                          xs \\<Join>\\<^sub>\n                          (I \\<down>< (I \\<rightarrow> n)) !\n                          i)", "apply (simp add: min_eqL cut_less_inext_nth_card_eq1)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>n < card (I \\<down>< length xs); I \\<rightarrow> n < length xs;\n     n < card I \\<or> infinite I\\<rbrakk>\n    \\<Longrightarrow> \\<forall>i<n.\n                         xs \\<Join>\\<^sub> I ! i =\n                         xs \\<Join>\\<^sub>\n                         (I \\<down>< (I \\<rightarrow> n)) !\n                         i", "apply clarify"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i.\n       \\<lbrakk>n < card (I \\<down>< length xs);\n        I \\<rightarrow> n < length xs; n < card I \\<or> infinite I;\n        i < n\\<rbrakk>\n       \\<Longrightarrow> xs \\<Join>\\<^sub> I ! i =\n                         xs \\<Join>\\<^sub>\n                         (I \\<down>< (I \\<rightarrow> n)) !\n                         i", "apply (subst f_join_nth)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>i.\n       \\<lbrakk>n < card (I \\<down>< length xs);\n        I \\<rightarrow> n < length xs; n < card I \\<or> infinite I;\n        i < n\\<rbrakk>\n       \\<Longrightarrow> i < length (xs \\<Join>\\<^sub> I)\n 2. \\<And>i.\n       \\<lbrakk>n < card (I \\<down>< length xs);\n        I \\<rightarrow> n < length xs; n < card I \\<or> infinite I;\n        i < n\\<rbrakk>\n       \\<Longrightarrow> xs ! (I \\<rightarrow> i) =\n                         xs \\<Join>\\<^sub>\n                         (I \\<down>< (I \\<rightarrow> n)) !\n                         i", "apply (simp add: f_join_length)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i.\n       \\<lbrakk>n < card (I \\<down>< length xs);\n        I \\<rightarrow> n < length xs; n < card I \\<or> infinite I;\n        i < n\\<rbrakk>\n       \\<Longrightarrow> xs ! (I \\<rightarrow> i) =\n                         xs \\<Join>\\<^sub>\n                         (I \\<down>< (I \\<rightarrow> n)) !\n                         i", "apply (subst f_join_nth)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>i.\n       \\<lbrakk>n < card (I \\<down>< length xs);\n        I \\<rightarrow> n < length xs; n < card I \\<or> infinite I;\n        i < n\\<rbrakk>\n       \\<Longrightarrow> i < length\n                              (xs \\<Join>\\<^sub>\n                               (I \\<down>< (I \\<rightarrow> n)))\n 2. \\<And>i.\n       \\<lbrakk>n < card (I \\<down>< length xs);\n        I \\<rightarrow> n < length xs; n < card I \\<or> infinite I;\n        i < n\\<rbrakk>\n       \\<Longrightarrow> xs ! (I \\<rightarrow> i) =\n                         xs !\n                         (I \\<down>< (I \\<rightarrow> n) \\<rightarrow> i)", "apply (simp add: f_join_length cut_cut_less min_eqL)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>i.\n       \\<lbrakk>n < card (I \\<down>< length xs);\n        I \\<rightarrow> n < length xs; n < card I \\<or> infinite I;\n        i < n\\<rbrakk>\n       \\<Longrightarrow> i < card (I \\<down>< (I \\<rightarrow> n))\n 2. \\<And>i.\n       \\<lbrakk>n < card (I \\<down>< length xs);\n        I \\<rightarrow> n < length xs; n < card I \\<or> infinite I;\n        i < n\\<rbrakk>\n       \\<Longrightarrow> xs ! (I \\<rightarrow> i) =\n                         xs !\n                         (I \\<down>< (I \\<rightarrow> n) \\<rightarrow> i)", "apply (simp add: cut_less_inext_nth_card_eq1)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i.\n       \\<lbrakk>n < card (I \\<down>< length xs);\n        I \\<rightarrow> n < length xs; n < card I \\<or> infinite I;\n        i < n\\<rbrakk>\n       \\<Longrightarrow> xs ! (I \\<rightarrow> i) =\n                         xs !\n                         (I \\<down>< (I \\<rightarrow> n) \\<rightarrow> i)", "apply (simp add: cut_less_inext_nth_card_eq1 inext_nth_cut_less_eq)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma take_f_join_eq2: \"\n  card (I \\<down>< length xs) \\<le> n \\<Longrightarrow> (xs \\<Join>\\<^sub>f I) \\<down> n = xs \\<Join>\\<^sub>f I\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card (I \\<down>< length xs) \\<le> n \\<Longrightarrow>\n    xs \\<Join>\\<^sub> I \\<down> n = xs \\<Join>\\<^sub> I", "by (simp add: f_join_length)"], ["", "lemma take_f_join_if: \"\n  (xs \\<Join>\\<^sub>f I) \\<down> n =\n  (if n < card (I \\<down>< length xs) then xs \\<Join>\\<^sub>f (I \\<down>< (I \\<rightarrow> n)) else xs \\<Join>\\<^sub>f I)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. xs \\<Join>\\<^sub> I \\<down> n =\n    (if n < card (I \\<down>< length xs)\n     then xs \\<Join>\\<^sub> (I \\<down>< (I \\<rightarrow> n))\n     else xs \\<Join>\\<^sub> I)", "by (simp add: take_f_join_eq1 take_f_join_eq2)"], ["", "lemma drop_f_join_eq1: \"\n  n < card (I \\<down>< length xs) \\<Longrightarrow>\n  (xs \\<Join>\\<^sub>f I) \\<up> n = xs \\<Join>\\<^sub>f (I \\<down>\\<ge> (I \\<rightarrow> n))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. n < card (I \\<down>< length xs) \\<Longrightarrow>\n    xs \\<Join>\\<^sub> I \\<up> n =\n    xs \\<Join>\\<^sub> (I \\<down>\\<ge> (I \\<rightarrow> n))", "apply (case_tac \"I = {}\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>n < card (I \\<down>< length xs); I = {}\\<rbrakk>\n    \\<Longrightarrow> xs \\<Join>\\<^sub> I \\<up> n =\n                      xs \\<Join>\\<^sub> (I \\<down>\\<ge> (I \\<rightarrow> n))\n 2. \\<lbrakk>n < card (I \\<down>< length xs); I \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> xs \\<Join>\\<^sub> I \\<up> n =\n                      xs \\<Join>\\<^sub> (I \\<down>\\<ge> (I \\<rightarrow> n))", "apply (simp add: cut_less_empty)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>n < card (I \\<down>< length xs); I \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> xs \\<Join>\\<^sub> I \\<up> n =\n                      xs \\<Join>\\<^sub> (I \\<down>\\<ge> (I \\<rightarrow> n))", "apply (case_tac \"I \\<down>< length xs = {}\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>n < card (I \\<down>< length xs); I \\<noteq> {};\n     I \\<down>< length xs = {}\\<rbrakk>\n    \\<Longrightarrow> xs \\<Join>\\<^sub> I \\<up> n =\n                      xs \\<Join>\\<^sub> (I \\<down>\\<ge> (I \\<rightarrow> n))\n 2. \\<lbrakk>n < card (I \\<down>< length xs); I \\<noteq> {};\n     I \\<down>< length xs \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> xs \\<Join>\\<^sub> I \\<up> n =\n                      xs \\<Join>\\<^sub> (I \\<down>\\<ge> (I \\<rightarrow> n))", "apply (simp add: cut_less_empty)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>n < card (I \\<down>< length xs); I \\<noteq> {};\n     I \\<down>< length xs \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> xs \\<Join>\\<^sub> I \\<up> n =\n                      xs \\<Join>\\<^sub> (I \\<down>\\<ge> (I \\<rightarrow> n))", "apply (rule same_append_eq[THEN iffD1, of \"xs \\<Join>\\<^sub>f I \\<down> n\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>n < card (I \\<down>< length xs); I \\<noteq> {};\n     I \\<down>< length xs \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> xs \\<Join>\\<^sub> I \\<down> n @\n                      xs \\<Join>\\<^sub> I \\<up> n =\n                      xs \\<Join>\\<^sub> I \\<down> n @\n                      xs \\<Join>\\<^sub> (I \\<down>\\<ge> (I \\<rightarrow> n))", "txt \\<open>First, a simplification step without \\<open>take_f_join_eq1\\<close> required for correct transformation, in order to eliminate \\<open>(xs \\<Join>\\<^sub>f I) \\<down> n\\<close> in the equation.\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>n < card (I \\<down>< length xs); I \\<noteq> {};\n     I \\<down>< length xs \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> xs \\<Join>\\<^sub> I \\<down> n @\n                      xs \\<Join>\\<^sub> I \\<up> n =\n                      xs \\<Join>\\<^sub> I \\<down> n @\n                      xs \\<Join>\\<^sub> (I \\<down>\\<ge> (I \\<rightarrow> n))", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>n < card (I \\<down>< length xs); I \\<noteq> {};\n     I \\<down>< length xs \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> xs \\<Join>\\<^sub> I =\n                      xs \\<Join>\\<^sub> I \\<down> n @\n                      xs \\<Join>\\<^sub> (I \\<down>\\<ge> (I \\<rightarrow> n))", "txt \\<open>Now, \\<open>take_f_join_eq1\\<close> can be applied\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>n < card (I \\<down>< length xs); I \\<noteq> {};\n     I \\<down>< length xs \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> xs \\<Join>\\<^sub> I =\n                      xs \\<Join>\\<^sub> I \\<down> n @\n                      xs \\<Join>\\<^sub> (I \\<down>\\<ge> (I \\<rightarrow> n))", "apply (simp add: take_f_join_eq1)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>n < card (I \\<down>< length xs); I \\<noteq> {};\n     I \\<down>< length xs \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> xs \\<Join>\\<^sub> I =\n                      xs \\<Join>\\<^sub> (I \\<down>< (I \\<rightarrow> n)) @\n                      xs \\<Join>\\<^sub> (I \\<down>\\<ge> (I \\<rightarrow> n))", "apply (case_tac \"I \\<down>< (I \\<rightarrow> n) = {}\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>n < card (I \\<down>< length xs); I \\<noteq> {};\n     I \\<down>< length xs \\<noteq> {};\n     I \\<down>< (I \\<rightarrow> n) = {}\\<rbrakk>\n    \\<Longrightarrow> xs \\<Join>\\<^sub> I =\n                      xs \\<Join>\\<^sub> (I \\<down>< (I \\<rightarrow> n)) @\n                      xs \\<Join>\\<^sub> (I \\<down>\\<ge> (I \\<rightarrow> n))\n 2. \\<lbrakk>n < card (I \\<down>< length xs); I \\<noteq> {};\n     I \\<down>< length xs \\<noteq> {};\n     I \\<down>< (I \\<rightarrow> n) \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> xs \\<Join>\\<^sub> I =\n                      xs \\<Join>\\<^sub> (I \\<down>< (I \\<rightarrow> n)) @\n                      xs \\<Join>\\<^sub> (I \\<down>\\<ge> (I \\<rightarrow> n))", "apply (simp add: f_join_empty)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>n < card (I \\<down>< length xs); I \\<noteq> {};\n     I \\<down>< length xs \\<noteq> {};\n     I \\<down>< (I \\<rightarrow> n) = {}\\<rbrakk>\n    \\<Longrightarrow> xs \\<Join>\\<^sub> I =\n                      xs \\<Join>\\<^sub> (I \\<down>\\<ge> (I \\<rightarrow> n))\n 2. \\<lbrakk>n < card (I \\<down>< length xs); I \\<noteq> {};\n     I \\<down>< length xs \\<noteq> {};\n     I \\<down>< (I \\<rightarrow> n) \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> xs \\<Join>\\<^sub> I =\n                      xs \\<Join>\\<^sub> (I \\<down>< (I \\<rightarrow> n)) @\n                      xs \\<Join>\\<^sub> (I \\<down>\\<ge> (I \\<rightarrow> n))", "apply (rule_tac t= \"I \\<rightarrow> n\" and s=\"iMin I\" in subst)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>n < card (I \\<down>< length xs); I \\<noteq> {};\n     I \\<down>< length xs \\<noteq> {};\n     I \\<down>< (I \\<rightarrow> n) = {}\\<rbrakk>\n    \\<Longrightarrow> iMin I = I \\<rightarrow> n\n 2. \\<lbrakk>n < card (I \\<down>< length xs); I \\<noteq> {};\n     I \\<down>< length xs \\<noteq> {};\n     I \\<down>< (I \\<rightarrow> n) = {}\\<rbrakk>\n    \\<Longrightarrow> xs \\<Join>\\<^sub> I =\n                      xs \\<Join>\\<^sub> (I \\<down>\\<ge> iMin I)\n 3. \\<lbrakk>n < card (I \\<down>< length xs); I \\<noteq> {};\n     I \\<down>< length xs \\<noteq> {};\n     I \\<down>< (I \\<rightarrow> n) \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> xs \\<Join>\\<^sub> I =\n                      xs \\<Join>\\<^sub> (I \\<down>< (I \\<rightarrow> n)) @\n                      xs \\<Join>\\<^sub> (I \\<down>\\<ge> (I \\<rightarrow> n))", "apply (rule ccontr)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>n < card (I \\<down>< length xs); I \\<noteq> {};\n     I \\<down>< length xs \\<noteq> {}; I \\<down>< (I \\<rightarrow> n) = {};\n     iMin I \\<noteq> I \\<rightarrow> n\\<rbrakk>\n    \\<Longrightarrow> False\n 2. \\<lbrakk>n < card (I \\<down>< length xs); I \\<noteq> {};\n     I \\<down>< length xs \\<noteq> {};\n     I \\<down>< (I \\<rightarrow> n) = {}\\<rbrakk>\n    \\<Longrightarrow> xs \\<Join>\\<^sub> I =\n                      xs \\<Join>\\<^sub> (I \\<down>\\<ge> iMin I)\n 3. \\<lbrakk>n < card (I \\<down>< length xs); I \\<noteq> {};\n     I \\<down>< length xs \\<noteq> {};\n     I \\<down>< (I \\<rightarrow> n) \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> xs \\<Join>\\<^sub> I =\n                      xs \\<Join>\\<^sub> (I \\<down>< (I \\<rightarrow> n)) @\n                      xs \\<Join>\\<^sub> (I \\<down>\\<ge> (I \\<rightarrow> n))", "apply (drule neq_le_trans[of \"iMin I\"])"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<lbrakk>n < card (I \\<down>< length xs); I \\<noteq> {};\n     I \\<down>< length xs \\<noteq> {};\n     I \\<down>< (I \\<rightarrow> n) = {}\\<rbrakk>\n    \\<Longrightarrow> iMin I \\<le> I \\<rightarrow> n\n 2. \\<lbrakk>n < card (I \\<down>< length xs); I \\<noteq> {};\n     I \\<down>< length xs \\<noteq> {}; I \\<down>< (I \\<rightarrow> n) = {};\n     iMin I < I \\<rightarrow> n\\<rbrakk>\n    \\<Longrightarrow> False\n 3. \\<lbrakk>n < card (I \\<down>< length xs); I \\<noteq> {};\n     I \\<down>< length xs \\<noteq> {};\n     I \\<down>< (I \\<rightarrow> n) = {}\\<rbrakk>\n    \\<Longrightarrow> xs \\<Join>\\<^sub> I =\n                      xs \\<Join>\\<^sub> (I \\<down>\\<ge> iMin I)\n 4. \\<lbrakk>n < card (I \\<down>< length xs); I \\<noteq> {};\n     I \\<down>< length xs \\<noteq> {};\n     I \\<down>< (I \\<rightarrow> n) \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> xs \\<Join>\\<^sub> I =\n                      xs \\<Join>\\<^sub> (I \\<down>< (I \\<rightarrow> n)) @\n                      xs \\<Join>\\<^sub> (I \\<down>\\<ge> (I \\<rightarrow> n))", "apply (simp add: iMin_le[OF inext_nth_closed])"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>n < card (I \\<down>< length xs); I \\<noteq> {};\n     I \\<down>< length xs \\<noteq> {}; I \\<down>< (I \\<rightarrow> n) = {};\n     iMin I < I \\<rightarrow> n\\<rbrakk>\n    \\<Longrightarrow> False\n 2. \\<lbrakk>n < card (I \\<down>< length xs); I \\<noteq> {};\n     I \\<down>< length xs \\<noteq> {};\n     I \\<down>< (I \\<rightarrow> n) = {}\\<rbrakk>\n    \\<Longrightarrow> xs \\<Join>\\<^sub> I =\n                      xs \\<Join>\\<^sub> (I \\<down>\\<ge> iMin I)\n 3. \\<lbrakk>n < card (I \\<down>< length xs); I \\<noteq> {};\n     I \\<down>< length xs \\<noteq> {};\n     I \\<down>< (I \\<rightarrow> n) \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> xs \\<Join>\\<^sub> I =\n                      xs \\<Join>\\<^sub> (I \\<down>< (I \\<rightarrow> n)) @\n                      xs \\<Join>\\<^sub> (I \\<down>\\<ge> (I \\<rightarrow> n))", "apply (simp add: cut_less_Min_not_empty)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>n < card (I \\<down>< length xs); I \\<noteq> {};\n     I \\<down>< length xs \\<noteq> {};\n     I \\<down>< (I \\<rightarrow> n) = {}\\<rbrakk>\n    \\<Longrightarrow> xs \\<Join>\\<^sub> I =\n                      xs \\<Join>\\<^sub> (I \\<down>\\<ge> iMin I)\n 2. \\<lbrakk>n < card (I \\<down>< length xs); I \\<noteq> {};\n     I \\<down>< length xs \\<noteq> {};\n     I \\<down>< (I \\<rightarrow> n) \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> xs \\<Join>\\<^sub> I =\n                      xs \\<Join>\\<^sub> (I \\<down>< (I \\<rightarrow> n)) @\n                      xs \\<Join>\\<^sub> (I \\<down>\\<ge> (I \\<rightarrow> n))", "apply (simp add: cut_ge_Min_all)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>n < card (I \\<down>< length xs); I \\<noteq> {};\n     I \\<down>< length xs \\<noteq> {};\n     I \\<down>< (I \\<rightarrow> n) \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> xs \\<Join>\\<^sub> I =\n                      xs \\<Join>\\<^sub> (I \\<down>< (I \\<rightarrow> n)) @\n                      xs \\<Join>\\<^sub> (I \\<down>\\<ge> (I \\<rightarrow> n))", "apply (subst f_join_union[OF nat_cut_less_finite, symmetric])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>n < card (I \\<down>< length xs); I \\<noteq> {};\n     I \\<down>< length xs \\<noteq> {};\n     I \\<down>< (I \\<rightarrow> n) \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> Max (I \\<down>< (I \\<rightarrow> n))\n                      < iMin (I \\<down>\\<ge> (I \\<rightarrow> n))\n 2. \\<lbrakk>n < card (I \\<down>< length xs); I \\<noteq> {};\n     I \\<down>< length xs \\<noteq> {};\n     I \\<down>< (I \\<rightarrow> n) \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> xs \\<Join>\\<^sub> I =\n                      xs \\<Join>\\<^sub>\n                      (I \\<down>< (I \\<rightarrow> n) \\<union>\n                       I \\<down>\\<ge> (I \\<rightarrow> n))", "apply (subgoal_tac \"I \\<down>\\<ge> (I \\<rightarrow> n) \\<noteq> {}\")"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>n < card (I \\<down>< length xs); I \\<noteq> {};\n     I \\<down>< length xs \\<noteq> {};\n     I \\<down>< (I \\<rightarrow> n) \\<noteq> {};\n     I \\<down>\\<ge> (I \\<rightarrow> n) \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> Max (I \\<down>< (I \\<rightarrow> n))\n                      < iMin (I \\<down>\\<ge> (I \\<rightarrow> n))\n 2. \\<lbrakk>n < card (I \\<down>< length xs); I \\<noteq> {};\n     I \\<down>< length xs \\<noteq> {};\n     I \\<down>< (I \\<rightarrow> n) \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> I \\<down>\\<ge> (I \\<rightarrow> n) \\<noteq> {}\n 3. \\<lbrakk>n < card (I \\<down>< length xs); I \\<noteq> {};\n     I \\<down>< length xs \\<noteq> {};\n     I \\<down>< (I \\<rightarrow> n) \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> xs \\<Join>\\<^sub> I =\n                      xs \\<Join>\\<^sub>\n                      (I \\<down>< (I \\<rightarrow> n) \\<union>\n                       I \\<down>\\<ge> (I \\<rightarrow> n))", "prefer 2"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>n < card (I \\<down>< length xs); I \\<noteq> {};\n     I \\<down>< length xs \\<noteq> {};\n     I \\<down>< (I \\<rightarrow> n) \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> I \\<down>\\<ge> (I \\<rightarrow> n) \\<noteq> {}\n 2. \\<lbrakk>n < card (I \\<down>< length xs); I \\<noteq> {};\n     I \\<down>< length xs \\<noteq> {};\n     I \\<down>< (I \\<rightarrow> n) \\<noteq> {};\n     I \\<down>\\<ge> (I \\<rightarrow> n) \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> Max (I \\<down>< (I \\<rightarrow> n))\n                      < iMin (I \\<down>\\<ge> (I \\<rightarrow> n))\n 3. \\<lbrakk>n < card (I \\<down>< length xs); I \\<noteq> {};\n     I \\<down>< length xs \\<noteq> {};\n     I \\<down>< (I \\<rightarrow> n) \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> xs \\<Join>\\<^sub> I =\n                      xs \\<Join>\\<^sub>\n                      (I \\<down>< (I \\<rightarrow> n) \\<union>\n                       I \\<down>\\<ge> (I \\<rightarrow> n))", "apply (simp add: cut_ge_not_empty_iff)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>n < card (I \\<down>< length xs); I \\<noteq> {};\n     I \\<down>< length xs \\<noteq> {};\n     I \\<down>< (I \\<rightarrow> n) \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> \\<exists>x\\<in>I. I \\<rightarrow> n \\<le> x\n 2. \\<lbrakk>n < card (I \\<down>< length xs); I \\<noteq> {};\n     I \\<down>< length xs \\<noteq> {};\n     I \\<down>< (I \\<rightarrow> n) \\<noteq> {};\n     I \\<down>\\<ge> (I \\<rightarrow> n) \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> Max (I \\<down>< (I \\<rightarrow> n))\n                      < iMin (I \\<down>\\<ge> (I \\<rightarrow> n))\n 3. \\<lbrakk>n < card (I \\<down>< length xs); I \\<noteq> {};\n     I \\<down>< length xs \\<noteq> {};\n     I \\<down>< (I \\<rightarrow> n) \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> xs \\<Join>\\<^sub> I =\n                      xs \\<Join>\\<^sub>\n                      (I \\<down>< (I \\<rightarrow> n) \\<union>\n                       I \\<down>\\<ge> (I \\<rightarrow> n))", "apply (blast intro: inext_nth_closed)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>n < card (I \\<down>< length xs); I \\<noteq> {};\n     I \\<down>< length xs \\<noteq> {};\n     I \\<down>< (I \\<rightarrow> n) \\<noteq> {};\n     I \\<down>\\<ge> (I \\<rightarrow> n) \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> Max (I \\<down>< (I \\<rightarrow> n))\n                      < iMin (I \\<down>\\<ge> (I \\<rightarrow> n))\n 2. \\<lbrakk>n < card (I \\<down>< length xs); I \\<noteq> {};\n     I \\<down>< length xs \\<noteq> {};\n     I \\<down>< (I \\<rightarrow> n) \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> xs \\<Join>\\<^sub> I =\n                      xs \\<Join>\\<^sub>\n                      (I \\<down>< (I \\<rightarrow> n) \\<union>\n                       I \\<down>\\<ge> (I \\<rightarrow> n))", "apply (simp add: nat_cut_less_finite i_cut_mem_iff iMin_gr_iff)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>n < card (I \\<down>< length xs); I \\<noteq> {};\n     I \\<down>< length xs \\<noteq> {};\n     I \\<down>< (I \\<rightarrow> n) \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> xs \\<Join>\\<^sub> I =\n                      xs \\<Join>\\<^sub>\n                      (I \\<down>< (I \\<rightarrow> n) \\<union>\n                       I \\<down>\\<ge> (I \\<rightarrow> n))", "apply (simp add: cut_less_cut_ge_ident)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma drop_f_join_eq2: \"\n  card (I \\<down>< length xs) \\<le> n \\<Longrightarrow> (xs \\<Join>\\<^sub>f I) \\<up> n = []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card (I \\<down>< length xs) \\<le> n \\<Longrightarrow>\n    xs \\<Join>\\<^sub> I \\<up> n = []", "by (simp add: f_join_length)"], ["", "lemma drop_f_join_if: \"\n  (xs \\<Join>\\<^sub>f I) \\<up> n =\n  (if n < card (I \\<down>< length xs) then xs \\<Join>\\<^sub>f (I \\<down>\\<ge> (I \\<rightarrow> n)) else [])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. xs \\<Join>\\<^sub> I \\<up> n =\n    (if n < card (I \\<down>< length xs)\n     then xs \\<Join>\\<^sub> (I \\<down>\\<ge> (I \\<rightarrow> n)) else [])", "by (simp add: drop_f_join_eq1 drop_f_join_eq2)"], ["", "lemma f_join_take: \"xs \\<down> n \\<Join>\\<^sub>f I = xs \\<Join>\\<^sub>f (I \\<down>< n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. xs \\<down> n \\<Join>\\<^sub> I = xs \\<Join>\\<^sub> (I \\<down>< n)", "apply (clarsimp simp: list_eq_iff f_join_length cut_cut_less min.commute)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i.\n       i < card (I \\<down>< min n (length xs)) \\<Longrightarrow>\n       xs \\<down> n \\<Join>\\<^sub> I ! i =\n       xs \\<Join>\\<^sub> (I \\<down>< n) ! i", "apply (simp add: f_join_nth f_join_length cut_cut_less min.commute)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i.\n       i < card (I \\<down>< min n (length xs)) \\<Longrightarrow>\n       xs \\<down> n ! (I \\<rightarrow> i) =\n       xs ! (I \\<down>< n \\<rightarrow> i)", "apply (case_tac \"n < length xs\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>i.\n       \\<lbrakk>i < card (I \\<down>< min n (length xs));\n        n < length xs\\<rbrakk>\n       \\<Longrightarrow> xs \\<down> n ! (I \\<rightarrow> i) =\n                         xs ! (I \\<down>< n \\<rightarrow> i)\n 2. \\<And>i.\n       \\<lbrakk>i < card (I \\<down>< min n (length xs));\n        \\<not> n < length xs\\<rbrakk>\n       \\<Longrightarrow> xs \\<down> n ! (I \\<rightarrow> i) =\n                         xs ! (I \\<down>< n \\<rightarrow> i)", "apply (simp add: min_eqL inext_nth_cut_less_eq)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>i.\n       \\<lbrakk>i < card (I \\<down>< n); n < length xs\\<rbrakk>\n       \\<Longrightarrow> xs \\<down> n ! (I \\<rightarrow> i) =\n                         xs ! (I \\<rightarrow> i)\n 2. \\<And>i.\n       \\<lbrakk>i < card (I \\<down>< min n (length xs));\n        \\<not> n < length xs\\<rbrakk>\n       \\<Longrightarrow> xs \\<down> n ! (I \\<rightarrow> i) =\n                         xs ! (I \\<down>< n \\<rightarrow> i)", "apply (simp add: less_card_cut_less_imp_inext_nth_less)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i.\n       \\<lbrakk>i < card (I \\<down>< min n (length xs));\n        \\<not> n < length xs\\<rbrakk>\n       \\<Longrightarrow> xs \\<down> n ! (I \\<rightarrow> i) =\n                         xs ! (I \\<down>< n \\<rightarrow> i)", "apply (simp add: min_eqR linorder_not_less)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i.\n       \\<lbrakk>i < card (I \\<down>< length xs); length xs \\<le> n\\<rbrakk>\n       \\<Longrightarrow> xs ! (I \\<rightarrow> i) =\n                         xs ! (I \\<down>< n \\<rightarrow> i)", "apply (subst inext_nth_cut_less_eq)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>i.\n       \\<lbrakk>i < card (I \\<down>< length xs); length xs \\<le> n\\<rbrakk>\n       \\<Longrightarrow> i < card (I \\<down>< n)\n 2. \\<And>i.\n       \\<lbrakk>i < card (I \\<down>< length xs); length xs \\<le> n\\<rbrakk>\n       \\<Longrightarrow> xs ! (I \\<rightarrow> i) = xs ! (I \\<rightarrow> i)", "apply (rule order_less_le_trans, assumption)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>i.\n       \\<lbrakk>i < card (I \\<down>< length xs); length xs \\<le> n\\<rbrakk>\n       \\<Longrightarrow> card (I \\<down>< length xs)\n                         \\<le> card (I \\<down>< n)\n 2. \\<And>i.\n       \\<lbrakk>i < card (I \\<down>< length xs); length xs \\<le> n\\<rbrakk>\n       \\<Longrightarrow> xs ! (I \\<rightarrow> i) = xs ! (I \\<rightarrow> i)", "apply (rule card_mono[OF nat_cut_less_finite cut_less_mono], assumption)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i.\n       \\<lbrakk>i < card (I \\<down>< length xs); length xs \\<le> n\\<rbrakk>\n       \\<Longrightarrow> xs ! (I \\<rightarrow> i) = xs ! (I \\<rightarrow> i)", "apply simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma f_join_drop: \"xs \\<up> n \\<Join>\\<^sub>f I = xs \\<Join>\\<^sub>f (I \\<oplus> n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. xs \\<up> n \\<Join>\\<^sub> I = xs \\<Join>\\<^sub> (I \\<oplus> n)", "apply (case_tac \"length xs \\<le> n\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. length xs \\<le> n \\<Longrightarrow>\n    xs \\<up> n \\<Join>\\<^sub> I = xs \\<Join>\\<^sub> (I \\<oplus> n)\n 2. \\<not> length xs \\<le> n \\<Longrightarrow>\n    xs \\<up> n \\<Join>\\<^sub> I = xs \\<Join>\\<^sub> (I \\<oplus> n)", "apply (simp add: f_join_Nil)"], ["proof (prove)\ngoal (2 subgoals):\n 1. length xs \\<le> n \\<Longrightarrow>\n    [] = xs \\<Join>\\<^sub> (I \\<oplus> n)\n 2. \\<not> length xs \\<le> n \\<Longrightarrow>\n    xs \\<up> n \\<Join>\\<^sub> I = xs \\<Join>\\<^sub> (I \\<oplus> n)", "apply (rule sym)"], ["proof (prove)\ngoal (2 subgoals):\n 1. length xs \\<le> n \\<Longrightarrow>\n    xs \\<Join>\\<^sub> (I \\<oplus> n) = []\n 2. \\<not> length xs \\<le> n \\<Longrightarrow>\n    xs \\<up> n \\<Join>\\<^sub> I = xs \\<Join>\\<^sub> (I \\<oplus> n)", "apply (simp add: f_join_Nil_conv' iT_Plus_mem_iff)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> length xs \\<le> n \\<Longrightarrow>\n    xs \\<up> n \\<Join>\\<^sub> I = xs \\<Join>\\<^sub> (I \\<oplus> n)", "apply (rule subst[OF append_take_drop_id, of \"\\<lambda>x. xs \\<up> n \\<Join>\\<^sub>f I = x \\<Join>\\<^sub>f (I \\<oplus> n)\" n])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> length xs \\<le> n \\<Longrightarrow>\n    xs \\<up> n \\<Join>\\<^sub> I =\n    (xs \\<down> n @ xs \\<up> n) \\<Join>\\<^sub> (I \\<oplus> n)", "apply (simp only: f_join_append)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> length xs \\<le> n \\<Longrightarrow>\n    xs \\<up> n \\<Join>\\<^sub> I =\n    xs \\<down> n \\<Join>\\<^sub> (I \\<oplus> n) @\n    xs \\<up> n \\<Join>\\<^sub> (I \\<oplus> n \\<oplus>- length (xs \\<down> n))", "apply (simp add: f_join_take min_eqR)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> length xs \\<le> n \\<Longrightarrow>\n    xs \\<up> n \\<Join>\\<^sub> I =\n    xs \\<Join>\\<^sub> ((I \\<oplus> n) \\<down>< n) @\n    xs \\<up> n \\<Join>\\<^sub> (I \\<oplus> n \\<oplus>- n)", "apply (simp add: iT_Plus_Plus_neg_inverse)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> length xs \\<le> n \\<Longrightarrow>\n    xs \\<Join>\\<^sub> ((I \\<oplus> n) \\<down>< n) = []", "apply (rule_tac t=\"(I \\<oplus> n) \\<down>< n\" and s=\"{}\" in subst)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<not> length xs \\<le> n \\<Longrightarrow>\n    {} = (I \\<oplus> n) \\<down>< n\n 2. \\<not> length xs \\<le> n \\<Longrightarrow> xs \\<Join>\\<^sub> {} = []", "apply (rule sym)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<not> length xs \\<le> n \\<Longrightarrow>\n    (I \\<oplus> n) \\<down>< n = {}\n 2. \\<not> length xs \\<le> n \\<Longrightarrow> xs \\<Join>\\<^sub> {} = []", "apply (simp add: cut_less_empty_iff iT_Plus_mem_iff)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> length xs \\<le> n \\<Longrightarrow> xs \\<Join>\\<^sub> {} = []", "apply (simp add: f_join_empty)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma cut_less_eq_imp_f_join_eq: \"\n  A \\<down>< length xs = B \\<down>< length xs \\<Longrightarrow> xs \\<Join>\\<^sub>f A = xs \\<Join>\\<^sub>f B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A \\<down>< length xs = B \\<down>< length xs \\<Longrightarrow>\n    xs \\<Join>\\<^sub> A = xs \\<Join>\\<^sub> B", "apply (clarsimp simp: list_eq_iff f_join_length f_join_nth)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i.\n       \\<lbrakk>A \\<down>< length xs = B \\<down>< length xs;\n        i < card (B \\<down>< length xs)\\<rbrakk>\n       \\<Longrightarrow> xs ! (A \\<rightarrow> i) = xs ! (B \\<rightarrow> i)", "apply (rule subst[OF inext_nth_cut_less_eq, of _ A \"length xs\"], simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i.\n       \\<lbrakk>A \\<down>< length xs = B \\<down>< length xs;\n        i < card (B \\<down>< length xs)\\<rbrakk>\n       \\<Longrightarrow> xs ! (A \\<down>< length xs \\<rightarrow> i) =\n                         xs ! (B \\<rightarrow> i)", "apply (rule subst[OF inext_nth_cut_less_eq, of _ B \"length xs\"], simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i.\n       \\<lbrakk>A \\<down>< length xs = B \\<down>< length xs;\n        i < card (B \\<down>< length xs)\\<rbrakk>\n       \\<Longrightarrow> xs ! (A \\<down>< length xs \\<rightarrow> i) =\n                         xs ! (B \\<down>< length xs \\<rightarrow> i)", "apply simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "corollary f_join_cut_less_eq: \"\n  length xs \\<le> t \\<Longrightarrow> xs \\<Join>\\<^sub>f (I \\<down>< t) = xs \\<Join>\\<^sub>f I\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length xs \\<le> t \\<Longrightarrow>\n    xs \\<Join>\\<^sub> (I \\<down>< t) = xs \\<Join>\\<^sub> I", "apply (rule cut_less_eq_imp_f_join_eq)"], ["proof (prove)\ngoal (1 subgoal):\n 1. length xs \\<le> t \\<Longrightarrow>\n    I \\<down>< t \\<down>< length xs = I \\<down>< length xs", "apply (simp add: cut_cut_less min_eqR)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma take_Suc_Max_eq_imp_f_join_eq: \"\n  \\<lbrakk> finite I; xs \\<down> Suc (Max I) = ys \\<down> Suc (Max I) \\<rbrakk> \\<Longrightarrow>\n  xs \\<Join>\\<^sub>f I = ys \\<Join>\\<^sub>f I\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite I;\n     xs \\<down> Suc (Max I) = ys \\<down> Suc (Max I)\\<rbrakk>\n    \\<Longrightarrow> xs \\<Join>\\<^sub> I = ys \\<Join>\\<^sub> I", "apply (case_tac \"I = {}\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>finite I; xs \\<down> Suc (Max I) = ys \\<down> Suc (Max I);\n     I = {}\\<rbrakk>\n    \\<Longrightarrow> xs \\<Join>\\<^sub> I = ys \\<Join>\\<^sub> I\n 2. \\<lbrakk>finite I; xs \\<down> Suc (Max I) = ys \\<down> Suc (Max I);\n     I \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> xs \\<Join>\\<^sub> I = ys \\<Join>\\<^sub> I", "apply (simp add: f_join_empty)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite I; xs \\<down> Suc (Max I) = ys \\<down> Suc (Max I);\n     I \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> xs \\<Join>\\<^sub> I = ys \\<Join>\\<^sub> I", "apply (simp add: list_eq_iff f_join_length)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite I;\n     min (length xs) (Suc (Max I)) = min (length ys) (Suc (Max I)) \\<and>\n     (\\<forall>i.\n         i < length xs \\<and> i < Suc (Max I) \\<longrightarrow>\n         xs ! i = ys ! i);\n     I \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> card (I \\<down>< length xs) =\n                      card (I \\<down>< length ys) \\<and>\n                      (\\<forall>i<card (I \\<down>< length xs).\n                          xs \\<Join>\\<^sub> I ! i = ys \\<Join>\\<^sub> I ! i)", "apply (case_tac \"length xs < Suc (Max I)\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>finite I;\n     min (length xs) (Suc (Max I)) = min (length ys) (Suc (Max I)) \\<and>\n     (\\<forall>i.\n         i < length xs \\<and> i < Suc (Max I) \\<longrightarrow>\n         xs ! i = ys ! i);\n     I \\<noteq> {}; length xs < Suc (Max I)\\<rbrakk>\n    \\<Longrightarrow> card (I \\<down>< length xs) =\n                      card (I \\<down>< length ys) \\<and>\n                      (\\<forall>i<card (I \\<down>< length xs).\n                          xs \\<Join>\\<^sub> I ! i = ys \\<Join>\\<^sub> I ! i)\n 2. \\<lbrakk>finite I;\n     min (length xs) (Suc (Max I)) = min (length ys) (Suc (Max I)) \\<and>\n     (\\<forall>i.\n         i < length xs \\<and> i < Suc (Max I) \\<longrightarrow>\n         xs ! i = ys ! i);\n     I \\<noteq> {}; \\<not> length xs < Suc (Max I)\\<rbrakk>\n    \\<Longrightarrow> card (I \\<down>< length xs) =\n                      card (I \\<down>< length ys) \\<and>\n                      (\\<forall>i<card (I \\<down>< length xs).\n                          xs \\<Join>\\<^sub> I ! i = ys \\<Join>\\<^sub> I ! i)", "apply (case_tac \"length ys < Suc (Max I)\")"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>finite I;\n     min (length xs) (Suc (Max I)) = min (length ys) (Suc (Max I)) \\<and>\n     (\\<forall>i.\n         i < length xs \\<and> i < Suc (Max I) \\<longrightarrow>\n         xs ! i = ys ! i);\n     I \\<noteq> {}; length xs < Suc (Max I);\n     length ys < Suc (Max I)\\<rbrakk>\n    \\<Longrightarrow> card (I \\<down>< length xs) =\n                      card (I \\<down>< length ys) \\<and>\n                      (\\<forall>i<card (I \\<down>< length xs).\n                          xs \\<Join>\\<^sub> I ! i = ys \\<Join>\\<^sub> I ! i)\n 2. \\<lbrakk>finite I;\n     min (length xs) (Suc (Max I)) = min (length ys) (Suc (Max I)) \\<and>\n     (\\<forall>i.\n         i < length xs \\<and> i < Suc (Max I) \\<longrightarrow>\n         xs ! i = ys ! i);\n     I \\<noteq> {}; length xs < Suc (Max I);\n     \\<not> length ys < Suc (Max I)\\<rbrakk>\n    \\<Longrightarrow> card (I \\<down>< length xs) =\n                      card (I \\<down>< length ys) \\<and>\n                      (\\<forall>i<card (I \\<down>< length xs).\n                          xs \\<Join>\\<^sub> I ! i = ys \\<Join>\\<^sub> I ! i)\n 3. \\<lbrakk>finite I;\n     min (length xs) (Suc (Max I)) = min (length ys) (Suc (Max I)) \\<and>\n     (\\<forall>i.\n         i < length xs \\<and> i < Suc (Max I) \\<longrightarrow>\n         xs ! i = ys ! i);\n     I \\<noteq> {}; \\<not> length xs < Suc (Max I)\\<rbrakk>\n    \\<Longrightarrow> card (I \\<down>< length xs) =\n                      card (I \\<down>< length ys) \\<and>\n                      (\\<forall>i<card (I \\<down>< length xs).\n                          xs \\<Join>\\<^sub> I ! i = ys \\<Join>\\<^sub> I ! i)", "apply (clarsimp simp: min_eqL, rename_tac i)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>i.\n       \\<lbrakk>finite I; I \\<noteq> {}; length ys < Suc (Max I);\n        length xs = length ys;\n        \\<forall>i.\n           i < length ys \\<and> i < Suc (Max I) \\<longrightarrow>\n           xs ! i = ys ! i;\n        i < card (I \\<down>< length ys)\\<rbrakk>\n       \\<Longrightarrow> xs \\<Join>\\<^sub> I ! i = ys \\<Join>\\<^sub> I ! i\n 2. \\<lbrakk>finite I;\n     min (length xs) (Suc (Max I)) = min (length ys) (Suc (Max I)) \\<and>\n     (\\<forall>i.\n         i < length xs \\<and> i < Suc (Max I) \\<longrightarrow>\n         xs ! i = ys ! i);\n     I \\<noteq> {}; length xs < Suc (Max I);\n     \\<not> length ys < Suc (Max I)\\<rbrakk>\n    \\<Longrightarrow> card (I \\<down>< length xs) =\n                      card (I \\<down>< length ys) \\<and>\n                      (\\<forall>i<card (I \\<down>< length xs).\n                          xs \\<Join>\\<^sub> I ! i = ys \\<Join>\\<^sub> I ! i)\n 3. \\<lbrakk>finite I;\n     min (length xs) (Suc (Max I)) = min (length ys) (Suc (Max I)) \\<and>\n     (\\<forall>i.\n         i < length xs \\<and> i < Suc (Max I) \\<longrightarrow>\n         xs ! i = ys ! i);\n     I \\<noteq> {}; \\<not> length xs < Suc (Max I)\\<rbrakk>\n    \\<Longrightarrow> card (I \\<down>< length xs) =\n                      card (I \\<down>< length ys) \\<and>\n                      (\\<forall>i<card (I \\<down>< length xs).\n                          xs \\<Join>\\<^sub> I ! i = ys \\<Join>\\<^sub> I ! i)", "apply (simp add: f_join_nth2)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>i.\n       \\<lbrakk>finite I; I \\<noteq> {}; length ys < Suc (Max I);\n        length xs = length ys;\n        \\<forall>i.\n           i < length ys \\<and> i < Suc (Max I) \\<longrightarrow>\n           xs ! i = ys ! i;\n        i < card (I \\<down>< length ys)\\<rbrakk>\n       \\<Longrightarrow> xs ! (I \\<rightarrow> i) = ys ! (I \\<rightarrow> i)\n 2. \\<lbrakk>finite I;\n     min (length xs) (Suc (Max I)) = min (length ys) (Suc (Max I)) \\<and>\n     (\\<forall>i.\n         i < length xs \\<and> i < Suc (Max I) \\<longrightarrow>\n         xs ! i = ys ! i);\n     I \\<noteq> {}; length xs < Suc (Max I);\n     \\<not> length ys < Suc (Max I)\\<rbrakk>\n    \\<Longrightarrow> card (I \\<down>< length xs) =\n                      card (I \\<down>< length ys) \\<and>\n                      (\\<forall>i<card (I \\<down>< length xs).\n                          xs \\<Join>\\<^sub> I ! i = ys \\<Join>\\<^sub> I ! i)\n 3. \\<lbrakk>finite I;\n     min (length xs) (Suc (Max I)) = min (length ys) (Suc (Max I)) \\<and>\n     (\\<forall>i.\n         i < length xs \\<and> i < Suc (Max I) \\<longrightarrow>\n         xs ! i = ys ! i);\n     I \\<noteq> {}; \\<not> length xs < Suc (Max I)\\<rbrakk>\n    \\<Longrightarrow> card (I \\<down>< length xs) =\n                      card (I \\<down>< length ys) \\<and>\n                      (\\<forall>i<card (I \\<down>< length xs).\n                          xs \\<Join>\\<^sub> I ! i = ys \\<Join>\\<^sub> I ! i)", "apply (drule_tac x=\"I \\<rightarrow> i\" in spec)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>i.\n       \\<lbrakk>finite I; I \\<noteq> {}; length ys < Suc (Max I);\n        length xs = length ys; i < card (I \\<down>< length ys);\n        I \\<rightarrow> i < length ys \\<and>\n        I \\<rightarrow> i < Suc (Max I) \\<longrightarrow>\n        xs ! (I \\<rightarrow> i) = ys ! (I \\<rightarrow> i)\\<rbrakk>\n       \\<Longrightarrow> xs ! (I \\<rightarrow> i) = ys ! (I \\<rightarrow> i)\n 2. \\<lbrakk>finite I;\n     min (length xs) (Suc (Max I)) = min (length ys) (Suc (Max I)) \\<and>\n     (\\<forall>i.\n         i < length xs \\<and> i < Suc (Max I) \\<longrightarrow>\n         xs ! i = ys ! i);\n     I \\<noteq> {}; length xs < Suc (Max I);\n     \\<not> length ys < Suc (Max I)\\<rbrakk>\n    \\<Longrightarrow> card (I \\<down>< length xs) =\n                      card (I \\<down>< length ys) \\<and>\n                      (\\<forall>i<card (I \\<down>< length xs).\n                          xs \\<Join>\\<^sub> I ! i = ys \\<Join>\\<^sub> I ! i)\n 3. \\<lbrakk>finite I;\n     min (length xs) (Suc (Max I)) = min (length ys) (Suc (Max I)) \\<and>\n     (\\<forall>i.\n         i < length xs \\<and> i < Suc (Max I) \\<longrightarrow>\n         xs ! i = ys ! i);\n     I \\<noteq> {}; \\<not> length xs < Suc (Max I)\\<rbrakk>\n    \\<Longrightarrow> card (I \\<down>< length xs) =\n                      card (I \\<down>< length ys) \\<and>\n                      (\\<forall>i<card (I \\<down>< length xs).\n                          xs \\<Join>\\<^sub> I ! i = ys \\<Join>\\<^sub> I ! i)", "apply (subgoal_tac \"I \\<rightarrow> i < length ys\")"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>i.\n       \\<lbrakk>finite I; I \\<noteq> {}; length ys < Suc (Max I);\n        length xs = length ys; i < card (I \\<down>< length ys);\n        I \\<rightarrow> i < length ys \\<and>\n        I \\<rightarrow> i < Suc (Max I) \\<longrightarrow>\n        xs ! (I \\<rightarrow> i) = ys ! (I \\<rightarrow> i);\n        I \\<rightarrow> i < length ys\\<rbrakk>\n       \\<Longrightarrow> xs ! (I \\<rightarrow> i) = ys ! (I \\<rightarrow> i)\n 2. \\<And>i.\n       \\<lbrakk>finite I; I \\<noteq> {}; length ys < Suc (Max I);\n        length xs = length ys; i < card (I \\<down>< length ys);\n        I \\<rightarrow> i < length ys \\<and>\n        I \\<rightarrow> i < Suc (Max I) \\<longrightarrow>\n        xs ! (I \\<rightarrow> i) = ys ! (I \\<rightarrow> i)\\<rbrakk>\n       \\<Longrightarrow> I \\<rightarrow> i < length ys\n 3. \\<lbrakk>finite I;\n     min (length xs) (Suc (Max I)) = min (length ys) (Suc (Max I)) \\<and>\n     (\\<forall>i.\n         i < length xs \\<and> i < Suc (Max I) \\<longrightarrow>\n         xs ! i = ys ! i);\n     I \\<noteq> {}; length xs < Suc (Max I);\n     \\<not> length ys < Suc (Max I)\\<rbrakk>\n    \\<Longrightarrow> card (I \\<down>< length xs) =\n                      card (I \\<down>< length ys) \\<and>\n                      (\\<forall>i<card (I \\<down>< length xs).\n                          xs \\<Join>\\<^sub> I ! i = ys \\<Join>\\<^sub> I ! i)\n 4. \\<lbrakk>finite I;\n     min (length xs) (Suc (Max I)) = min (length ys) (Suc (Max I)) \\<and>\n     (\\<forall>i.\n         i < length xs \\<and> i < Suc (Max I) \\<longrightarrow>\n         xs ! i = ys ! i);\n     I \\<noteq> {}; \\<not> length xs < Suc (Max I)\\<rbrakk>\n    \\<Longrightarrow> card (I \\<down>< length xs) =\n                      card (I \\<down>< length ys) \\<and>\n                      (\\<forall>i<card (I \\<down>< length xs).\n                          xs \\<Join>\\<^sub> I ! i = ys \\<Join>\\<^sub> I ! i)", "prefer 2"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>i.\n       \\<lbrakk>finite I; I \\<noteq> {}; length ys < Suc (Max I);\n        length xs = length ys; i < card (I \\<down>< length ys);\n        I \\<rightarrow> i < length ys \\<and>\n        I \\<rightarrow> i < Suc (Max I) \\<longrightarrow>\n        xs ! (I \\<rightarrow> i) = ys ! (I \\<rightarrow> i)\\<rbrakk>\n       \\<Longrightarrow> I \\<rightarrow> i < length ys\n 2. \\<And>i.\n       \\<lbrakk>finite I; I \\<noteq> {}; length ys < Suc (Max I);\n        length xs = length ys; i < card (I \\<down>< length ys);\n        I \\<rightarrow> i < length ys \\<and>\n        I \\<rightarrow> i < Suc (Max I) \\<longrightarrow>\n        xs ! (I \\<rightarrow> i) = ys ! (I \\<rightarrow> i);\n        I \\<rightarrow> i < length ys\\<rbrakk>\n       \\<Longrightarrow> xs ! (I \\<rightarrow> i) = ys ! (I \\<rightarrow> i)\n 3. \\<lbrakk>finite I;\n     min (length xs) (Suc (Max I)) = min (length ys) (Suc (Max I)) \\<and>\n     (\\<forall>i.\n         i < length xs \\<and> i < Suc (Max I) \\<longrightarrow>\n         xs ! i = ys ! i);\n     I \\<noteq> {}; length xs < Suc (Max I);\n     \\<not> length ys < Suc (Max I)\\<rbrakk>\n    \\<Longrightarrow> card (I \\<down>< length xs) =\n                      card (I \\<down>< length ys) \\<and>\n                      (\\<forall>i<card (I \\<down>< length xs).\n                          xs \\<Join>\\<^sub> I ! i = ys \\<Join>\\<^sub> I ! i)\n 4. \\<lbrakk>finite I;\n     min (length xs) (Suc (Max I)) = min (length ys) (Suc (Max I)) \\<and>\n     (\\<forall>i.\n         i < length xs \\<and> i < Suc (Max I) \\<longrightarrow>\n         xs ! i = ys ! i);\n     I \\<noteq> {}; \\<not> length xs < Suc (Max I)\\<rbrakk>\n    \\<Longrightarrow> card (I \\<down>< length xs) =\n                      card (I \\<down>< length ys) \\<and>\n                      (\\<forall>i<card (I \\<down>< length xs).\n                          xs \\<Join>\\<^sub> I ! i = ys \\<Join>\\<^sub> I ! i)", "apply (rule less_card_cut_less_imp_inext_nth_less, simp)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>i.\n       \\<lbrakk>finite I; I \\<noteq> {}; length ys < Suc (Max I);\n        length xs = length ys; i < card (I \\<down>< length ys);\n        I \\<rightarrow> i < length ys \\<and>\n        I \\<rightarrow> i < Suc (Max I) \\<longrightarrow>\n        xs ! (I \\<rightarrow> i) = ys ! (I \\<rightarrow> i);\n        I \\<rightarrow> i < length ys\\<rbrakk>\n       \\<Longrightarrow> xs ! (I \\<rightarrow> i) = ys ! (I \\<rightarrow> i)\n 2. \\<lbrakk>finite I;\n     min (length xs) (Suc (Max I)) = min (length ys) (Suc (Max I)) \\<and>\n     (\\<forall>i.\n         i < length xs \\<and> i < Suc (Max I) \\<longrightarrow>\n         xs ! i = ys ! i);\n     I \\<noteq> {}; length xs < Suc (Max I);\n     \\<not> length ys < Suc (Max I)\\<rbrakk>\n    \\<Longrightarrow> card (I \\<down>< length xs) =\n                      card (I \\<down>< length ys) \\<and>\n                      (\\<forall>i<card (I \\<down>< length xs).\n                          xs \\<Join>\\<^sub> I ! i = ys \\<Join>\\<^sub> I ! i)\n 3. \\<lbrakk>finite I;\n     min (length xs) (Suc (Max I)) = min (length ys) (Suc (Max I)) \\<and>\n     (\\<forall>i.\n         i < length xs \\<and> i < Suc (Max I) \\<longrightarrow>\n         xs ! i = ys ! i);\n     I \\<noteq> {}; \\<not> length xs < Suc (Max I)\\<rbrakk>\n    \\<Longrightarrow> card (I \\<down>< length xs) =\n                      card (I \\<down>< length ys) \\<and>\n                      (\\<forall>i<card (I \\<down>< length xs).\n                          xs \\<Join>\\<^sub> I ! i = ys \\<Join>\\<^sub> I ! i)", "apply simp"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>finite I;\n     min (length xs) (Suc (Max I)) = min (length ys) (Suc (Max I)) \\<and>\n     (\\<forall>i.\n         i < length xs \\<and> i < Suc (Max I) \\<longrightarrow>\n         xs ! i = ys ! i);\n     I \\<noteq> {}; length xs < Suc (Max I);\n     \\<not> length ys < Suc (Max I)\\<rbrakk>\n    \\<Longrightarrow> card (I \\<down>< length xs) =\n                      card (I \\<down>< length ys) \\<and>\n                      (\\<forall>i<card (I \\<down>< length xs).\n                          xs \\<Join>\\<^sub> I ! i = ys \\<Join>\\<^sub> I ! i)\n 2. \\<lbrakk>finite I;\n     min (length xs) (Suc (Max I)) = min (length ys) (Suc (Max I)) \\<and>\n     (\\<forall>i.\n         i < length xs \\<and> i < Suc (Max I) \\<longrightarrow>\n         xs ! i = ys ! i);\n     I \\<noteq> {}; \\<not> length xs < Suc (Max I)\\<rbrakk>\n    \\<Longrightarrow> card (I \\<down>< length xs) =\n                      card (I \\<down>< length ys) \\<and>\n                      (\\<forall>i<card (I \\<down>< length xs).\n                          xs \\<Join>\\<^sub> I ! i = ys \\<Join>\\<^sub> I ! i)", "apply (simp add: min_eq)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite I;\n     min (length xs) (Suc (Max I)) = min (length ys) (Suc (Max I)) \\<and>\n     (\\<forall>i.\n         i < length xs \\<and> i < Suc (Max I) \\<longrightarrow>\n         xs ! i = ys ! i);\n     I \\<noteq> {}; \\<not> length xs < Suc (Max I)\\<rbrakk>\n    \\<Longrightarrow> card (I \\<down>< length xs) =\n                      card (I \\<down>< length ys) \\<and>\n                      (\\<forall>i<card (I \\<down>< length xs).\n                          xs \\<Join>\\<^sub> I ! i = ys \\<Join>\\<^sub> I ! i)", "apply (case_tac \"length ys < Suc (Max I)\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>finite I;\n     min (length xs) (Suc (Max I)) = min (length ys) (Suc (Max I)) \\<and>\n     (\\<forall>i.\n         i < length xs \\<and> i < Suc (Max I) \\<longrightarrow>\n         xs ! i = ys ! i);\n     I \\<noteq> {}; \\<not> length xs < Suc (Max I);\n     length ys < Suc (Max I)\\<rbrakk>\n    \\<Longrightarrow> card (I \\<down>< length xs) =\n                      card (I \\<down>< length ys) \\<and>\n                      (\\<forall>i<card (I \\<down>< length xs).\n                          xs \\<Join>\\<^sub> I ! i = ys \\<Join>\\<^sub> I ! i)\n 2. \\<lbrakk>finite I;\n     min (length xs) (Suc (Max I)) = min (length ys) (Suc (Max I)) \\<and>\n     (\\<forall>i.\n         i < length xs \\<and> i < Suc (Max I) \\<longrightarrow>\n         xs ! i = ys ! i);\n     I \\<noteq> {}; \\<not> length xs < Suc (Max I);\n     \\<not> length ys < Suc (Max I)\\<rbrakk>\n    \\<Longrightarrow> card (I \\<down>< length xs) =\n                      card (I \\<down>< length ys) \\<and>\n                      (\\<forall>i<card (I \\<down>< length xs).\n                          xs \\<Join>\\<^sub> I ! i = ys \\<Join>\\<^sub> I ! i)", "apply (simp add: min_eq)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite I;\n     min (length xs) (Suc (Max I)) = min (length ys) (Suc (Max I)) \\<and>\n     (\\<forall>i.\n         i < length xs \\<and> i < Suc (Max I) \\<longrightarrow>\n         xs ! i = ys ! i);\n     I \\<noteq> {}; \\<not> length xs < Suc (Max I);\n     \\<not> length ys < Suc (Max I)\\<rbrakk>\n    \\<Longrightarrow> card (I \\<down>< length xs) =\n                      card (I \\<down>< length ys) \\<and>\n                      (\\<forall>i<card (I \\<down>< length xs).\n                          xs \\<Join>\\<^sub> I ! i = ys \\<Join>\\<^sub> I ! i)", "apply (simp add: linorder_not_less min_eqR Suc_le_eq del: Max_less_iff)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite I;\n     \\<forall>i.\n        i < length xs \\<and> i < Suc (Max I) \\<longrightarrow>\n        xs ! i = ys ! i;\n     I \\<noteq> {}; Max I < length xs; Max I < length ys\\<rbrakk>\n    \\<Longrightarrow> card (I \\<down>< length xs) =\n                      card (I \\<down>< length ys) \\<and>\n                      (\\<forall>i<card (I \\<down>< length xs).\n                          xs \\<Join>\\<^sub> I ! i = ys \\<Join>\\<^sub> I ! i)", "apply (subgoal_tac \"I \\<down>< length xs = I \\<down>< length ys\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>finite I;\n     \\<forall>i.\n        i < length xs \\<and> i < Suc (Max I) \\<longrightarrow>\n        xs ! i = ys ! i;\n     I \\<noteq> {}; Max I < length xs; Max I < length ys;\n     I \\<down>< length xs = I \\<down>< length ys\\<rbrakk>\n    \\<Longrightarrow> card (I \\<down>< length xs) =\n                      card (I \\<down>< length ys) \\<and>\n                      (\\<forall>i<card (I \\<down>< length xs).\n                          xs \\<Join>\\<^sub> I ! i = ys \\<Join>\\<^sub> I ! i)\n 2. \\<lbrakk>finite I;\n     \\<forall>i.\n        i < length xs \\<and> i < Suc (Max I) \\<longrightarrow>\n        xs ! i = ys ! i;\n     I \\<noteq> {}; Max I < length xs; Max I < length ys\\<rbrakk>\n    \\<Longrightarrow> I \\<down>< length xs = I \\<down>< length ys", "prefer 2"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>finite I;\n     \\<forall>i.\n        i < length xs \\<and> i < Suc (Max I) \\<longrightarrow>\n        xs ! i = ys ! i;\n     I \\<noteq> {}; Max I < length xs; Max I < length ys\\<rbrakk>\n    \\<Longrightarrow> I \\<down>< length xs = I \\<down>< length ys\n 2. \\<lbrakk>finite I;\n     \\<forall>i.\n        i < length xs \\<and> i < Suc (Max I) \\<longrightarrow>\n        xs ! i = ys ! i;\n     I \\<noteq> {}; Max I < length xs; Max I < length ys;\n     I \\<down>< length xs = I \\<down>< length ys\\<rbrakk>\n    \\<Longrightarrow> card (I \\<down>< length xs) =\n                      card (I \\<down>< length ys) \\<and>\n                      (\\<forall>i<card (I \\<down>< length xs).\n                          xs \\<Join>\\<^sub> I ! i = ys \\<Join>\\<^sub> I ! i)", "apply (simp add: cut_less_Max_all)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite I;\n     \\<forall>i.\n        i < length xs \\<and> i < Suc (Max I) \\<longrightarrow>\n        xs ! i = ys ! i;\n     I \\<noteq> {}; Max I < length xs; Max I < length ys;\n     I \\<down>< length xs = I \\<down>< length ys\\<rbrakk>\n    \\<Longrightarrow> card (I \\<down>< length xs) =\n                      card (I \\<down>< length ys) \\<and>\n                      (\\<forall>i<card (I \\<down>< length xs).\n                          xs \\<Join>\\<^sub> I ! i = ys \\<Join>\\<^sub> I ! i)", "apply (clarsimp simp: f_join_nth2 simp del: Max_less_iff, rename_tac i)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i.\n       \\<lbrakk>finite I;\n        \\<forall>i.\n           i < length xs \\<and> i < Suc (Max I) \\<longrightarrow>\n           xs ! i = ys ! i;\n        I \\<noteq> {}; Max I < length xs; Max I < length ys;\n        I \\<down>< length xs = I \\<down>< length ys;\n        i < card (I \\<down>< length ys)\\<rbrakk>\n       \\<Longrightarrow> xs ! (I \\<rightarrow> i) = ys ! (I \\<rightarrow> i)", "apply (drule_tac x=\"I \\<rightarrow> i\" in spec)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i.\n       \\<lbrakk>finite I; I \\<noteq> {}; Max I < length xs;\n        Max I < length ys; I \\<down>< length xs = I \\<down>< length ys;\n        i < card (I \\<down>< length ys);\n        I \\<rightarrow> i < length xs \\<and>\n        I \\<rightarrow> i < Suc (Max I) \\<longrightarrow>\n        xs ! (I \\<rightarrow> i) = ys ! (I \\<rightarrow> i)\\<rbrakk>\n       \\<Longrightarrow> xs ! (I \\<rightarrow> i) = ys ! (I \\<rightarrow> i)", "apply (subgoal_tac \"I \\<rightarrow> i < Suc (Max I)\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>i.\n       \\<lbrakk>finite I; I \\<noteq> {}; Max I < length xs;\n        Max I < length ys; I \\<down>< length xs = I \\<down>< length ys;\n        i < card (I \\<down>< length ys);\n        I \\<rightarrow> i < length xs \\<and>\n        I \\<rightarrow> i < Suc (Max I) \\<longrightarrow>\n        xs ! (I \\<rightarrow> i) = ys ! (I \\<rightarrow> i);\n        I \\<rightarrow> i < Suc (Max I)\\<rbrakk>\n       \\<Longrightarrow> xs ! (I \\<rightarrow> i) = ys ! (I \\<rightarrow> i)\n 2. \\<And>i.\n       \\<lbrakk>finite I; I \\<noteq> {}; Max I < length xs;\n        Max I < length ys; I \\<down>< length xs = I \\<down>< length ys;\n        i < card (I \\<down>< length ys);\n        I \\<rightarrow> i < length xs \\<and>\n        I \\<rightarrow> i < Suc (Max I) \\<longrightarrow>\n        xs ! (I \\<rightarrow> i) = ys ! (I \\<rightarrow> i)\\<rbrakk>\n       \\<Longrightarrow> I \\<rightarrow> i < Suc (Max I)", "prefer 2"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>i.\n       \\<lbrakk>finite I; I \\<noteq> {}; Max I < length xs;\n        Max I < length ys; I \\<down>< length xs = I \\<down>< length ys;\n        i < card (I \\<down>< length ys);\n        I \\<rightarrow> i < length xs \\<and>\n        I \\<rightarrow> i < Suc (Max I) \\<longrightarrow>\n        xs ! (I \\<rightarrow> i) = ys ! (I \\<rightarrow> i)\\<rbrakk>\n       \\<Longrightarrow> I \\<rightarrow> i < Suc (Max I)\n 2. \\<And>i.\n       \\<lbrakk>finite I; I \\<noteq> {}; Max I < length xs;\n        Max I < length ys; I \\<down>< length xs = I \\<down>< length ys;\n        i < card (I \\<down>< length ys);\n        I \\<rightarrow> i < length xs \\<and>\n        I \\<rightarrow> i < Suc (Max I) \\<longrightarrow>\n        xs ! (I \\<rightarrow> i) = ys ! (I \\<rightarrow> i);\n        I \\<rightarrow> i < Suc (Max I)\\<rbrakk>\n       \\<Longrightarrow> xs ! (I \\<rightarrow> i) = ys ! (I \\<rightarrow> i)", "apply (simp add: less_Suc_eq_le inext_nth_closed)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i.\n       \\<lbrakk>finite I; I \\<noteq> {}; Max I < length xs;\n        Max I < length ys; I \\<down>< length xs = I \\<down>< length ys;\n        i < card (I \\<down>< length ys);\n        I \\<rightarrow> i < length xs \\<and>\n        I \\<rightarrow> i < Suc (Max I) \\<longrightarrow>\n        xs ! (I \\<rightarrow> i) = ys ! (I \\<rightarrow> i);\n        I \\<rightarrow> i < Suc (Max I)\\<rbrakk>\n       \\<Longrightarrow> xs ! (I \\<rightarrow> i) = ys ! (I \\<rightarrow> i)", "apply (simp del: Max_less_iff)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "corollary f_join_take_Suc_Max_eq: \"\n  finite I \\<Longrightarrow> xs \\<down> Suc (Max I) \\<Join>\\<^sub>f I = xs \\<Join>\\<^sub>f I\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite I \\<Longrightarrow>\n    xs \\<down> Suc (Max I) \\<Join>\\<^sub> I = xs \\<Join>\\<^sub> I", "by (rule take_Suc_Max_eq_imp_f_join_eq, simp+)"], ["", "text \\<open>Joining infinite streams and infinite intervals\\<close>"], ["", "lemma i_join_nth: \"(f \\<Join>\\<^sub>i I) n = f (I \\<rightarrow> n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (f \\<Join>\\<^sub> I) n = f (I \\<rightarrow> n)", "by (simp add: i_join_def)"], ["", "lemma i_join_UNIV: \"f \\<Join>\\<^sub>i UNIV = f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f \\<Join>\\<^sub> UNIV = f", "by (simp add: ilist_eq_iff i_join_nth inext_nth_UNIV)"], ["", "lemma i_join_union: \"\n  \\<lbrakk> finite A; Max A < iMin B; B \\<noteq> {} \\<rbrakk> \\<Longrightarrow>\n  f \\<Join>\\<^sub>i (A \\<union> B) = (f \\<Down> Suc (Max A) \\<Join>\\<^sub>f A) \\<frown> (f \\<Join>\\<^sub>i B)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite A; Max A < iMin B; B \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> f \\<Join>\\<^sub> (A \\<union> B) =\n                      f \\<Down> Suc (Max A) \\<Join>\\<^sub> A \\<frown>\n                      f \\<Join>\\<^sub> B", "apply (case_tac \"A = {}\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>finite A; Max A < iMin B; B \\<noteq> {}; A = {}\\<rbrakk>\n    \\<Longrightarrow> f \\<Join>\\<^sub> (A \\<union> B) =\n                      f \\<Down> Suc (Max A) \\<Join>\\<^sub> A \\<frown>\n                      f \\<Join>\\<^sub> B\n 2. \\<lbrakk>finite A; Max A < iMin B; B \\<noteq> {}; A \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> f \\<Join>\\<^sub> (A \\<union> B) =\n                      f \\<Down> Suc (Max A) \\<Join>\\<^sub> A \\<frown>\n                      f \\<Join>\\<^sub> B", "apply (simp add: f_join_empty)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite A; Max A < iMin B; B \\<noteq> {}; A \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> f \\<Join>\\<^sub> (A \\<union> B) =\n                      f \\<Down> Suc (Max A) \\<Join>\\<^sub> A \\<frown>\n                      f \\<Join>\\<^sub> B", "apply (simp (no_asm) add: ilist_eq_iff, clarify)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>finite A; Max A < iMin B; B \\<noteq> {};\n        A \\<noteq> {}\\<rbrakk>\n       \\<Longrightarrow> (f \\<Join>\\<^sub> (A \\<union> B)) x =\n                         (f \\<Down> Suc (Max A) \\<Join>\\<^sub> A \\<frown>\n                          f \\<Join>\\<^sub> B)\n                          x", "apply (simp add: i_join_nth i_append_nth f_join_length del: Max_less_iff)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>finite A; Max A < iMin B; B \\<noteq> {};\n        A \\<noteq> {}\\<rbrakk>\n       \\<Longrightarrow> (x < card\n                               (A \\<down>< Suc (Max A)) \\<longrightarrow>\n                          f ((A \\<union> B) \\<rightarrow> x) =\n                          f \\<Down> Suc (Max A) \\<Join>\\<^sub> A ! x) \\<and>\n                         (\\<not> x < card\n(A \\<down>< Suc (Max A)) \\<longrightarrow>\n                          f ((A \\<union> B) \\<rightarrow> x) =\n                          f (B \\<rightarrow> (x -\n        card (A \\<down>< Suc (Max A)))))", "apply (subgoal_tac \"A \\<down>< Suc (Max A) = A\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>finite A; Max A < iMin B; B \\<noteq> {}; A \\<noteq> {};\n        A \\<down>< Suc (Max A) = A\\<rbrakk>\n       \\<Longrightarrow> (x < card\n                               (A \\<down>< Suc (Max A)) \\<longrightarrow>\n                          f ((A \\<union> B) \\<rightarrow> x) =\n                          f \\<Down> Suc (Max A) \\<Join>\\<^sub> A ! x) \\<and>\n                         (\\<not> x < card\n(A \\<down>< Suc (Max A)) \\<longrightarrow>\n                          f ((A \\<union> B) \\<rightarrow> x) =\n                          f (B \\<rightarrow> (x -\n        card (A \\<down>< Suc (Max A)))))\n 2. \\<And>x.\n       \\<lbrakk>finite A; Max A < iMin B; B \\<noteq> {};\n        A \\<noteq> {}\\<rbrakk>\n       \\<Longrightarrow> A \\<down>< Suc (Max A) = A", "prefer 2"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>finite A; Max A < iMin B; B \\<noteq> {};\n        A \\<noteq> {}\\<rbrakk>\n       \\<Longrightarrow> A \\<down>< Suc (Max A) = A\n 2. \\<And>x.\n       \\<lbrakk>finite A; Max A < iMin B; B \\<noteq> {}; A \\<noteq> {};\n        A \\<down>< Suc (Max A) = A\\<rbrakk>\n       \\<Longrightarrow> (x < card\n                               (A \\<down>< Suc (Max A)) \\<longrightarrow>\n                          f ((A \\<union> B) \\<rightarrow> x) =\n                          f \\<Down> Suc (Max A) \\<Join>\\<^sub> A ! x) \\<and>\n                         (\\<not> x < card\n(A \\<down>< Suc (Max A)) \\<longrightarrow>\n                          f ((A \\<union> B) \\<rightarrow> x) =\n                          f (B \\<rightarrow> (x -\n        card (A \\<down>< Suc (Max A)))))", "apply (simp add: nat_cut_le_less_conv[symmetric] cut_le_Max_all)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>finite A; Max A < iMin B; B \\<noteq> {}; A \\<noteq> {};\n        A \\<down>< Suc (Max A) = A\\<rbrakk>\n       \\<Longrightarrow> (x < card\n                               (A \\<down>< Suc (Max A)) \\<longrightarrow>\n                          f ((A \\<union> B) \\<rightarrow> x) =\n                          f \\<Down> Suc (Max A) \\<Join>\\<^sub> A ! x) \\<and>\n                         (\\<not> x < card\n(A \\<down>< Suc (Max A)) \\<longrightarrow>\n                          f ((A \\<union> B) \\<rightarrow> x) =\n                          f (B \\<rightarrow> (x -\n        card (A \\<down>< Suc (Max A)))))", "apply (simp del: Max_less_iff, intro conjI impI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>finite A; Max A < iMin B; B \\<noteq> {}; A \\<noteq> {};\n        A \\<down>< Suc (Max A) = A; x < card A\\<rbrakk>\n       \\<Longrightarrow> f ((A \\<union> B) \\<rightarrow> x) =\n                         f \\<Down> Suc (Max A) \\<Join>\\<^sub> A ! x\n 2. \\<And>x.\n       \\<lbrakk>finite A; Max A < iMin B; B \\<noteq> {}; A \\<noteq> {};\n        A \\<down>< Suc (Max A) = A; \\<not> x < card A\\<rbrakk>\n       \\<Longrightarrow> f ((A \\<union> B) \\<rightarrow> x) =\n                         f (B \\<rightarrow> (x - card A))", "apply (simp add: inext_nth_card_append_eq1)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>finite A; \\<forall>a\\<in>A. a < iMin B; B \\<noteq> {};\n        A \\<noteq> {}; A \\<down>< Suc (Max A) = A; x < card A\\<rbrakk>\n       \\<Longrightarrow> f (A \\<rightarrow> x) =\n                         f \\<Down> Suc (Max A) \\<Join>\\<^sub> A ! x\n 2. \\<And>x.\n       \\<lbrakk>finite A; Max A < iMin B; B \\<noteq> {}; A \\<noteq> {};\n        A \\<down>< Suc (Max A) = A; \\<not> x < card A\\<rbrakk>\n       \\<Longrightarrow> f ((A \\<union> B) \\<rightarrow> x) =\n                         f (B \\<rightarrow> (x - card A))", "apply (simp add: f_join_nth f_join_length)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>finite A; \\<forall>a\\<in>A. a < iMin B; B \\<noteq> {};\n        A \\<noteq> {}; A \\<down>< Suc (Max A) = A; x < card A\\<rbrakk>\n       \\<Longrightarrow> f (A \\<rightarrow> x) =\n                         f \\<Down> Suc (Max A) ! (A \\<rightarrow> x)\n 2. \\<And>x.\n       \\<lbrakk>finite A; Max A < iMin B; B \\<noteq> {}; A \\<noteq> {};\n        A \\<down>< Suc (Max A) = A; \\<not> x < card A\\<rbrakk>\n       \\<Longrightarrow> f ((A \\<union> B) \\<rightarrow> x) =\n                         f (B \\<rightarrow> (x - card A))", "apply (simp add: less_card_cut_less_imp_inext_nth_less)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>finite A; Max A < iMin B; B \\<noteq> {}; A \\<noteq> {};\n        A \\<down>< Suc (Max A) = A; \\<not> x < card A\\<rbrakk>\n       \\<Longrightarrow> f ((A \\<union> B) \\<rightarrow> x) =\n                         f (B \\<rightarrow> (x - card A))", "apply (simp add: inext_nth_card_append_eq2)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma i_join_singleton: \"f \\<Join>\\<^sub>i {a} = (\\<lambda>n. f a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f \\<Join>\\<^sub> {a} = (\\<lambda>n. f a)", "by (simp add: ilist_eq_iff i_join_nth inext_nth_singleton)"], ["", "lemma i_join_insert: \"\n  f \\<Join>\\<^sub>i (insert n I) =\n  (f \\<Down> n) \\<Join>\\<^sub>f (I \\<down>< n) \\<frown> [f n] \\<frown> (\n    if I \\<down>> n = {} then (\\<lambda>x. f n) else f \\<Join>\\<^sub>i (I \\<down>> n))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f \\<Join>\\<^sub> insert n I =\n    f \\<Down> n \\<Join>\\<^sub> (I \\<down>< n) \\<frown>\n    [f n] \\<frown>\n    (if I \\<down>> n = {} then \\<lambda>x. f n\n     else f \\<Join>\\<^sub> (I \\<down>> n))", "apply (rule ssubst[OF insert_eq_cut_less_cut_greater])"], ["proof (prove)\ngoal (1 subgoal):\n 1. f \\<Join>\\<^sub> (I \\<down>< n \\<union> {n} \\<union> I \\<down>> n) =\n    f \\<Down> n \\<Join>\\<^sub> (I \\<down>< n) \\<frown>\n    [f n] \\<frown>\n    (if I \\<down>> n = {} then \\<lambda>x. f n\n     else f \\<Join>\\<^sub> (I \\<down>> n))", "apply (case_tac \"I \\<down>< n = {}\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. I \\<down>< n = {} \\<Longrightarrow>\n    f \\<Join>\\<^sub> (I \\<down>< n \\<union> {n} \\<union> I \\<down>> n) =\n    f \\<Down> n \\<Join>\\<^sub> (I \\<down>< n) \\<frown>\n    [f n] \\<frown>\n    (if I \\<down>> n = {} then \\<lambda>x. f n\n     else f \\<Join>\\<^sub> (I \\<down>> n))\n 2. I \\<down>< n \\<noteq> {} \\<Longrightarrow>\n    f \\<Join>\\<^sub> (I \\<down>< n \\<union> {n} \\<union> I \\<down>> n) =\n    f \\<Down> n \\<Join>\\<^sub> (I \\<down>< n) \\<frown>\n    [f n] \\<frown>\n    (if I \\<down>> n = {} then \\<lambda>x. f n\n     else f \\<Join>\\<^sub> (I \\<down>> n))", "apply (simp add: f_join_empty, intro conjI impI)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>I \\<down>< n = {}; I \\<down>> n = {}\\<rbrakk>\n    \\<Longrightarrow> f \\<Join>\\<^sub> {n} =\n                      [f n] \\<frown> (\\<lambda>x. f n)\n 2. \\<lbrakk>I \\<down>< n = {}; I \\<down>> n \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> f \\<Join>\\<^sub> insert n (I \\<down>> n) =\n                      [f n] \\<frown> f \\<Join>\\<^sub> (I \\<down>> n)\n 3. I \\<down>< n \\<noteq> {} \\<Longrightarrow>\n    f \\<Join>\\<^sub> (I \\<down>< n \\<union> {n} \\<union> I \\<down>> n) =\n    f \\<Down> n \\<Join>\\<^sub> (I \\<down>< n) \\<frown>\n    [f n] \\<frown>\n    (if I \\<down>> n = {} then \\<lambda>x. f n\n     else f \\<Join>\\<^sub> (I \\<down>> n))", "apply (simp add: i_join_singleton ilist_eq_iff i_append_nth)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>I \\<down>< n = {}; I \\<down>> n \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> f \\<Join>\\<^sub> insert n (I \\<down>> n) =\n                      [f n] \\<frown> f \\<Join>\\<^sub> (I \\<down>> n)\n 2. I \\<down>< n \\<noteq> {} \\<Longrightarrow>\n    f \\<Join>\\<^sub> (I \\<down>< n \\<union> {n} \\<union> I \\<down>> n) =\n    f \\<Down> n \\<Join>\\<^sub> (I \\<down>< n) \\<frown>\n    [f n] \\<frown>\n    (if I \\<down>> n = {} then \\<lambda>x. f n\n     else f \\<Join>\\<^sub> (I \\<down>> n))", "apply (subgoal_tac \"Max {n} < iMin (I \\<down>> n)\")"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>I \\<down>< n = {}; I \\<down>> n \\<noteq> {};\n     Max {n} < iMin (I \\<down>> n)\\<rbrakk>\n    \\<Longrightarrow> f \\<Join>\\<^sub> insert n (I \\<down>> n) =\n                      [f n] \\<frown> f \\<Join>\\<^sub> (I \\<down>> n)\n 2. \\<lbrakk>I \\<down>< n = {}; I \\<down>> n \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> Max {n} < iMin (I \\<down>> n)\n 3. I \\<down>< n \\<noteq> {} \\<Longrightarrow>\n    f \\<Join>\\<^sub> (I \\<down>< n \\<union> {n} \\<union> I \\<down>> n) =\n    f \\<Down> n \\<Join>\\<^sub> (I \\<down>< n) \\<frown>\n    [f n] \\<frown>\n    (if I \\<down>> n = {} then \\<lambda>x. f n\n     else f \\<Join>\\<^sub> (I \\<down>> n))", "prefer 2"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>I \\<down>< n = {}; I \\<down>> n \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> Max {n} < iMin (I \\<down>> n)\n 2. \\<lbrakk>I \\<down>< n = {}; I \\<down>> n \\<noteq> {};\n     Max {n} < iMin (I \\<down>> n)\\<rbrakk>\n    \\<Longrightarrow> f \\<Join>\\<^sub> insert n (I \\<down>> n) =\n                      [f n] \\<frown> f \\<Join>\\<^sub> (I \\<down>> n)\n 3. I \\<down>< n \\<noteq> {} \\<Longrightarrow>\n    f \\<Join>\\<^sub> (I \\<down>< n \\<union> {n} \\<union> I \\<down>> n) =\n    f \\<Down> n \\<Join>\\<^sub> (I \\<down>< n) \\<frown>\n    [f n] \\<frown>\n    (if I \\<down>> n = {} then \\<lambda>x. f n\n     else f \\<Join>\\<^sub> (I \\<down>> n))", "apply (simp add: cut_greater_Min_greater)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>I \\<down>< n = {}; I \\<down>> n \\<noteq> {};\n     Max {n} < iMin (I \\<down>> n)\\<rbrakk>\n    \\<Longrightarrow> f \\<Join>\\<^sub> insert n (I \\<down>> n) =\n                      [f n] \\<frown> f \\<Join>\\<^sub> (I \\<down>> n)\n 2. I \\<down>< n \\<noteq> {} \\<Longrightarrow>\n    f \\<Join>\\<^sub> (I \\<down>< n \\<union> {n} \\<union> I \\<down>> n) =\n    f \\<Down> n \\<Join>\\<^sub> (I \\<down>< n) \\<frown>\n    [f n] \\<frown>\n    (if I \\<down>> n = {} then \\<lambda>x. f n\n     else f \\<Join>\\<^sub> (I \\<down>> n))", "apply simp"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>I \\<down>< n = {}; I \\<down>> n \\<noteq> {};\n     n < iMin (I \\<down>> n)\\<rbrakk>\n    \\<Longrightarrow> f \\<Join>\\<^sub> insert n (I \\<down>> n) =\n                      [f n] \\<frown> f \\<Join>\\<^sub> (I \\<down>> n)\n 2. I \\<down>< n \\<noteq> {} \\<Longrightarrow>\n    f \\<Join>\\<^sub> (I \\<down>< n \\<union> {n} \\<union> I \\<down>> n) =\n    f \\<Down> n \\<Join>\\<^sub> (I \\<down>< n) \\<frown>\n    [f n] \\<frown>\n    (if I \\<down>> n = {} then \\<lambda>x. f n\n     else f \\<Join>\\<^sub> (I \\<down>> n))", "apply (subst insert_is_Un)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>I \\<down>< n = {}; I \\<down>> n \\<noteq> {};\n     n < iMin (I \\<down>> n)\\<rbrakk>\n    \\<Longrightarrow> f \\<Join>\\<^sub> ({n} \\<union> I \\<down>> n) =\n                      [f n] \\<frown> f \\<Join>\\<^sub> (I \\<down>> n)\n 2. I \\<down>< n \\<noteq> {} \\<Longrightarrow>\n    f \\<Join>\\<^sub> (I \\<down>< n \\<union> {n} \\<union> I \\<down>> n) =\n    f \\<Down> n \\<Join>\\<^sub> (I \\<down>< n) \\<frown>\n    [f n] \\<frown>\n    (if I \\<down>> n = {} then \\<lambda>x. f n\n     else f \\<Join>\\<^sub> (I \\<down>> n))", "apply (subst i_join_union[OF singleton_finite])"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<lbrakk>I \\<down>< n = {}; I \\<down>> n \\<noteq> {};\n     n < iMin (I \\<down>> n)\\<rbrakk>\n    \\<Longrightarrow> Max {n} < iMin (I \\<down>> n)\n 2. \\<lbrakk>I \\<down>< n = {}; I \\<down>> n \\<noteq> {};\n     n < iMin (I \\<down>> n)\\<rbrakk>\n    \\<Longrightarrow> I \\<down>> n \\<noteq> {}\n 3. \\<lbrakk>I \\<down>< n = {}; I \\<down>> n \\<noteq> {};\n     n < iMin (I \\<down>> n)\\<rbrakk>\n    \\<Longrightarrow> f \\<Down> Suc (Max {n}) \\<Join>\\<^sub> {n} \\<frown>\n                      f \\<Join>\\<^sub> (I \\<down>> n) =\n                      [f n] \\<frown> f \\<Join>\\<^sub> (I \\<down>> n)\n 4. I \\<down>< n \\<noteq> {} \\<Longrightarrow>\n    f \\<Join>\\<^sub> (I \\<down>< n \\<union> {n} \\<union> I \\<down>> n) =\n    f \\<Down> n \\<Join>\\<^sub> (I \\<down>< n) \\<frown>\n    [f n] \\<frown>\n    (if I \\<down>> n = {} then \\<lambda>x. f n\n     else f \\<Join>\\<^sub> (I \\<down>> n))", "apply (simp add: f_join_singleton_if)+"], ["proof (prove)\ngoal (1 subgoal):\n 1. I \\<down>< n \\<noteq> {} \\<Longrightarrow>\n    (I \\<down>> n = {} \\<longrightarrow>\n     f \\<Join>\\<^sub> insert n (I \\<down>< n) =\n     (f \\<Down> n \\<Join>\\<^sub> (I \\<down>< n) @ [f n]) \\<frown>\n     (\\<lambda>x. f n)) \\<and>\n    (I \\<down>> n \\<noteq> {} \\<longrightarrow>\n     f \\<Join>\\<^sub> insert n (I \\<down>< n \\<union> I \\<down>> n) =\n     (f \\<Down> n \\<Join>\\<^sub> (I \\<down>< n) @ [f n]) \\<frown>\n     f \\<Join>\\<^sub> (I \\<down>> n))", "apply (intro conjI impI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>I \\<down>< n \\<noteq> {}; I \\<down>> n = {}\\<rbrakk>\n    \\<Longrightarrow> f \\<Join>\\<^sub> insert n (I \\<down>< n) =\n                      (f \\<Down> n \\<Join>\\<^sub> (I \\<down>< n) @\n                       [f n]) \\<frown>\n                      (\\<lambda>x. f n)\n 2. \\<lbrakk>I \\<down>< n \\<noteq> {}; I \\<down>> n \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> f \\<Join>\\<^sub>\n                      insert n (I \\<down>< n \\<union> I \\<down>> n) =\n                      (f \\<Down> n \\<Join>\\<^sub> (I \\<down>< n) @\n                       [f n]) \\<frown>\n                      f \\<Join>\\<^sub> (I \\<down>> n)", "apply (subgoal_tac \"Max (I \\<down>< n) < iMin {n}\")"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>I \\<down>< n \\<noteq> {}; I \\<down>> n = {};\n     Max (I \\<down>< n) < iMin {n}\\<rbrakk>\n    \\<Longrightarrow> f \\<Join>\\<^sub> insert n (I \\<down>< n) =\n                      (f \\<Down> n \\<Join>\\<^sub> (I \\<down>< n) @\n                       [f n]) \\<frown>\n                      (\\<lambda>x. f n)\n 2. \\<lbrakk>I \\<down>< n \\<noteq> {}; I \\<down>> n = {}\\<rbrakk>\n    \\<Longrightarrow> Max (I \\<down>< n) < iMin {n}\n 3. \\<lbrakk>I \\<down>< n \\<noteq> {}; I \\<down>> n \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> f \\<Join>\\<^sub>\n                      insert n (I \\<down>< n \\<union> I \\<down>> n) =\n                      (f \\<Down> n \\<Join>\\<^sub> (I \\<down>< n) @\n                       [f n]) \\<frown>\n                      f \\<Join>\\<^sub> (I \\<down>> n)", "prefer 2"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>I \\<down>< n \\<noteq> {}; I \\<down>> n = {}\\<rbrakk>\n    \\<Longrightarrow> Max (I \\<down>< n) < iMin {n}\n 2. \\<lbrakk>I \\<down>< n \\<noteq> {}; I \\<down>> n = {};\n     Max (I \\<down>< n) < iMin {n}\\<rbrakk>\n    \\<Longrightarrow> f \\<Join>\\<^sub> insert n (I \\<down>< n) =\n                      (f \\<Down> n \\<Join>\\<^sub> (I \\<down>< n) @\n                       [f n]) \\<frown>\n                      (\\<lambda>x. f n)\n 3. \\<lbrakk>I \\<down>< n \\<noteq> {}; I \\<down>> n \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> f \\<Join>\\<^sub>\n                      insert n (I \\<down>< n \\<union> I \\<down>> n) =\n                      (f \\<Down> n \\<Join>\\<^sub> (I \\<down>< n) @\n                       [f n]) \\<frown>\n                      f \\<Join>\\<^sub> (I \\<down>> n)", "apply (simp add: nat_cut_less_Max_less)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>I \\<down>< n \\<noteq> {}; I \\<down>> n = {};\n     Max (I \\<down>< n) < iMin {n}\\<rbrakk>\n    \\<Longrightarrow> f \\<Join>\\<^sub> insert n (I \\<down>< n) =\n                      (f \\<Down> n \\<Join>\\<^sub> (I \\<down>< n) @\n                       [f n]) \\<frown>\n                      (\\<lambda>x. f n)\n 2. \\<lbrakk>I \\<down>< n \\<noteq> {}; I \\<down>> n \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> f \\<Join>\\<^sub>\n                      insert n (I \\<down>< n \\<union> I \\<down>> n) =\n                      (f \\<Down> n \\<Join>\\<^sub> (I \\<down>< n) @\n                       [f n]) \\<frown>\n                      f \\<Join>\\<^sub> (I \\<down>> n)", "apply (rule_tac t=\"insert n (I \\<down>< n)\" and s=\"(I \\<down>< n) \\<union> {n}\" in subst, simp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>I \\<down>< n \\<noteq> {}; I \\<down>> n = {};\n     Max (I \\<down>< n) < iMin {n}\\<rbrakk>\n    \\<Longrightarrow> f \\<Join>\\<^sub> (I \\<down>< n \\<union> {n}) =\n                      (f \\<Down> n \\<Join>\\<^sub> (I \\<down>< n) @\n                       [f n]) \\<frown>\n                      (\\<lambda>x. f n)\n 2. \\<lbrakk>I \\<down>< n \\<noteq> {}; I \\<down>> n \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> f \\<Join>\\<^sub>\n                      insert n (I \\<down>< n \\<union> I \\<down>> n) =\n                      (f \\<Down> n \\<Join>\\<^sub> (I \\<down>< n) @\n                       [f n]) \\<frown>\n                      f \\<Join>\\<^sub> (I \\<down>> n)", "apply (subst i_join_union[OF nat_cut_less_finite _ singleton_not_empty], simp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>I \\<down>< n \\<noteq> {}; I \\<down>> n = {};\n     Max (I \\<down>< n) < iMin {n}\\<rbrakk>\n    \\<Longrightarrow> f \\<Down> Suc (Max (I \\<down>< n)) \\<Join>\\<^sub>\n                      (I \\<down>< n) \\<frown>\n                      f \\<Join>\\<^sub> {n} =\n                      (f \\<Down> n \\<Join>\\<^sub> (I \\<down>< n) @\n                       [f n]) \\<frown>\n                      (\\<lambda>x. f n)\n 2. \\<lbrakk>I \\<down>< n \\<noteq> {}; I \\<down>> n \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> f \\<Join>\\<^sub>\n                      insert n (I \\<down>< n \\<union> I \\<down>> n) =\n                      (f \\<Down> n \\<Join>\\<^sub> (I \\<down>< n) @\n                       [f n]) \\<frown>\n                      f \\<Join>\\<^sub> (I \\<down>> n)", "apply (simp add: i_join_singleton)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>I \\<down>< n \\<noteq> {}; I \\<down>> n = {};\n     Max (I \\<down>< n) < n\\<rbrakk>\n    \\<Longrightarrow> f \\<Down> Suc (Max (I \\<down>< n)) \\<Join>\\<^sub>\n                      (I \\<down>< n) \\<frown>\n                      (\\<lambda>a. f n) =\n                      (f \\<Down> n \\<Join>\\<^sub> (I \\<down>< n) @\n                       [f n]) \\<frown>\n                      (\\<lambda>x. f n)\n 2. \\<lbrakk>I \\<down>< n \\<noteq> {}; I \\<down>> n \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> f \\<Join>\\<^sub>\n                      insert n (I \\<down>< n \\<union> I \\<down>> n) =\n                      (f \\<Down> n \\<Join>\\<^sub> (I \\<down>< n) @\n                       [f n]) \\<frown>\n                      f \\<Join>\\<^sub> (I \\<down>> n)", "apply (rule_tac s=\"\\<lambda>x. f n\" and t=\"[f n] \\<frown> (\\<lambda>x. f n)\" in subst)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>I \\<down>< n \\<noteq> {}; I \\<down>> n = {};\n     Max (I \\<down>< n) < n\\<rbrakk>\n    \\<Longrightarrow> (\\<lambda>x. f n) = [f n] \\<frown> (\\<lambda>x. f n)\n 2. \\<lbrakk>I \\<down>< n \\<noteq> {}; I \\<down>> n = {};\n     Max (I \\<down>< n) < n\\<rbrakk>\n    \\<Longrightarrow> f \\<Down> Suc (Max (I \\<down>< n)) \\<Join>\\<^sub>\n                      (I \\<down>< n) \\<frown>\n                      (\\<lambda>a. f n) =\n                      (f \\<Down> n \\<Join>\\<^sub> (I \\<down>< n) @\n                       [f n]) \\<frown>\n                      (\\<lambda>x. f n)\n 3. \\<lbrakk>I \\<down>< n \\<noteq> {}; I \\<down>> n \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> f \\<Join>\\<^sub>\n                      insert n (I \\<down>< n \\<union> I \\<down>> n) =\n                      (f \\<Down> n \\<Join>\\<^sub> (I \\<down>< n) @\n                       [f n]) \\<frown>\n                      f \\<Join>\\<^sub> (I \\<down>> n)", "apply (simp add: ilist_eq_iff i_append_nth)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>I \\<down>< n \\<noteq> {}; I \\<down>> n = {};\n     Max (I \\<down>< n) < n\\<rbrakk>\n    \\<Longrightarrow> f \\<Down> Suc (Max (I \\<down>< n)) \\<Join>\\<^sub>\n                      (I \\<down>< n) \\<frown>\n                      (\\<lambda>a. f n) =\n                      (f \\<Down> n \\<Join>\\<^sub> (I \\<down>< n) @\n                       [f n]) \\<frown>\n                      (\\<lambda>x. f n)\n 2. \\<lbrakk>I \\<down>< n \\<noteq> {}; I \\<down>> n \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> f \\<Join>\\<^sub>\n                      insert n (I \\<down>< n \\<union> I \\<down>> n) =\n                      (f \\<Down> n \\<Join>\\<^sub> (I \\<down>< n) @\n                       [f n]) \\<frown>\n                      f \\<Join>\\<^sub> (I \\<down>> n)", "apply (subst i_append_assoc[symmetric])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>I \\<down>< n \\<noteq> {}; I \\<down>> n = {};\n     Max (I \\<down>< n) < n\\<rbrakk>\n    \\<Longrightarrow> f \\<Down> Suc (Max (I \\<down>< n)) \\<Join>\\<^sub>\n                      (I \\<down>< n) \\<frown>\n                      (\\<lambda>a. f n) =\n                      f \\<Down> n \\<Join>\\<^sub> (I \\<down>< n) \\<frown>\n                      [f n] \\<frown> (\\<lambda>x. f n)\n 2. \\<lbrakk>I \\<down>< n \\<noteq> {}; I \\<down>> n \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> f \\<Join>\\<^sub>\n                      insert n (I \\<down>< n \\<union> I \\<down>> n) =\n                      (f \\<Down> n \\<Join>\\<^sub> (I \\<down>< n) @\n                       [f n]) \\<frown>\n                      f \\<Join>\\<^sub> (I \\<down>> n)", "apply (rule_tac t=\"[f n] \\<frown> (\\<lambda>x. f n)\" and s=\"(\\<lambda>x. f n)\" in subst)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>I \\<down>< n \\<noteq> {}; I \\<down>> n = {};\n     Max (I \\<down>< n) < n\\<rbrakk>\n    \\<Longrightarrow> (\\<lambda>x. f n) = [f n] \\<frown> (\\<lambda>x. f n)\n 2. \\<lbrakk>I \\<down>< n \\<noteq> {}; I \\<down>> n = {};\n     Max (I \\<down>< n) < n\\<rbrakk>\n    \\<Longrightarrow> f \\<Down> Suc (Max (I \\<down>< n)) \\<Join>\\<^sub>\n                      (I \\<down>< n) \\<frown>\n                      (\\<lambda>a. f n) =\n                      f \\<Down> n \\<Join>\\<^sub> (I \\<down>< n) \\<frown>\n                      (\\<lambda>a. f n)\n 3. \\<lbrakk>I \\<down>< n \\<noteq> {}; I \\<down>> n \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> f \\<Join>\\<^sub>\n                      insert n (I \\<down>< n \\<union> I \\<down>> n) =\n                      (f \\<Down> n \\<Join>\\<^sub> (I \\<down>< n) @\n                       [f n]) \\<frown>\n                      f \\<Join>\\<^sub> (I \\<down>> n)", "apply (simp add: ilist_eq_iff i_append_nth)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>I \\<down>< n \\<noteq> {}; I \\<down>> n = {};\n     Max (I \\<down>< n) < n\\<rbrakk>\n    \\<Longrightarrow> f \\<Down> Suc (Max (I \\<down>< n)) \\<Join>\\<^sub>\n                      (I \\<down>< n) \\<frown>\n                      (\\<lambda>a. f n) =\n                      f \\<Down> n \\<Join>\\<^sub> (I \\<down>< n) \\<frown>\n                      (\\<lambda>a. f n)\n 2. \\<lbrakk>I \\<down>< n \\<noteq> {}; I \\<down>> n \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> f \\<Join>\\<^sub>\n                      insert n (I \\<down>< n \\<union> I \\<down>> n) =\n                      (f \\<Down> n \\<Join>\\<^sub> (I \\<down>< n) @\n                       [f n]) \\<frown>\n                      f \\<Join>\\<^sub> (I \\<down>> n)", "apply (rule arg_cong)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>I \\<down>< n \\<noteq> {}; I \\<down>> n = {};\n     Max (I \\<down>< n) < n\\<rbrakk>\n    \\<Longrightarrow> f \\<Down> Suc (Max (I \\<down>< n)) \\<Join>\\<^sub>\n                      (I \\<down>< n) =\n                      f \\<Down> n \\<Join>\\<^sub> (I \\<down>< n)\n 2. \\<lbrakk>I \\<down>< n \\<noteq> {}; I \\<down>> n \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> f \\<Join>\\<^sub>\n                      insert n (I \\<down>< n \\<union> I \\<down>> n) =\n                      (f \\<Down> n \\<Join>\\<^sub> (I \\<down>< n) @\n                       [f n]) \\<frown>\n                      f \\<Join>\\<^sub> (I \\<down>> n)", "apply (simp add: take_Suc_Max_eq_imp_f_join_eq[OF nat_cut_less_finite] min_eqR)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>I \\<down>< n \\<noteq> {}; I \\<down>> n \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> f \\<Join>\\<^sub>\n                      insert n (I \\<down>< n \\<union> I \\<down>> n) =\n                      (f \\<Down> n \\<Join>\\<^sub> (I \\<down>< n) @\n                       [f n]) \\<frown>\n                      f \\<Join>\\<^sub> (I \\<down>> n)", "apply (subgoal_tac \"Max (I \\<down>< n) < iMin {n} \\<and> Max {n} < iMin (I \\<down>> n)\", elim conjE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>I \\<down>< n \\<noteq> {}; I \\<down>> n \\<noteq> {};\n     Max (I \\<down>< n) < iMin {n}; Max {n} < iMin (I \\<down>> n)\\<rbrakk>\n    \\<Longrightarrow> f \\<Join>\\<^sub>\n                      insert n (I \\<down>< n \\<union> I \\<down>> n) =\n                      (f \\<Down> n \\<Join>\\<^sub> (I \\<down>< n) @\n                       [f n]) \\<frown>\n                      f \\<Join>\\<^sub> (I \\<down>> n)\n 2. \\<lbrakk>I \\<down>< n \\<noteq> {}; I \\<down>> n \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> Max (I \\<down>< n) < iMin {n} \\<and>\n                      Max {n} < iMin (I \\<down>> n)", "prefer 2"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>I \\<down>< n \\<noteq> {}; I \\<down>> n \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> Max (I \\<down>< n) < iMin {n} \\<and>\n                      Max {n} < iMin (I \\<down>> n)\n 2. \\<lbrakk>I \\<down>< n \\<noteq> {}; I \\<down>> n \\<noteq> {};\n     Max (I \\<down>< n) < iMin {n}; Max {n} < iMin (I \\<down>> n)\\<rbrakk>\n    \\<Longrightarrow> f \\<Join>\\<^sub>\n                      insert n (I \\<down>< n \\<union> I \\<down>> n) =\n                      (f \\<Down> n \\<Join>\\<^sub> (I \\<down>< n) @\n                       [f n]) \\<frown>\n                      f \\<Join>\\<^sub> (I \\<down>> n)", "apply (simp add: cut_greater_Min_greater nat_cut_less_Max_less)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>I \\<down>< n \\<noteq> {}; I \\<down>> n \\<noteq> {};\n     Max (I \\<down>< n) < iMin {n}; Max {n} < iMin (I \\<down>> n)\\<rbrakk>\n    \\<Longrightarrow> f \\<Join>\\<^sub>\n                      insert n (I \\<down>< n \\<union> I \\<down>> n) =\n                      (f \\<Down> n \\<Join>\\<^sub> (I \\<down>< n) @\n                       [f n]) \\<frown>\n                      f \\<Join>\\<^sub> (I \\<down>> n)", "apply (rule_tac t=\"insert n (I \\<down>< n \\<union> I \\<down>> n)\" and s=\"(I \\<down>< n \\<union> ({n} \\<union> I \\<down>> n))\" in subst, simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>I \\<down>< n \\<noteq> {}; I \\<down>> n \\<noteq> {};\n     Max (I \\<down>< n) < iMin {n}; Max {n} < iMin (I \\<down>> n)\\<rbrakk>\n    \\<Longrightarrow> f \\<Join>\\<^sub>\n                      (I \\<down>< n \\<union> ({n} \\<union> I \\<down>> n)) =\n                      (f \\<Down> n \\<Join>\\<^sub> (I \\<down>< n) @\n                       [f n]) \\<frown>\n                      f \\<Join>\\<^sub> (I \\<down>> n)", "apply (subgoal_tac \"({n} \\<union> I \\<down>> n) \\<noteq> {} \\<and> Max (I \\<down>< n) < iMin ({n} \\<union> I \\<down>> n)\", elim conjE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>I \\<down>< n \\<noteq> {}; I \\<down>> n \\<noteq> {};\n     Max (I \\<down>< n) < iMin {n}; Max {n} < iMin (I \\<down>> n);\n     {n} \\<union> I \\<down>> n \\<noteq> {};\n     Max (I \\<down>< n) < iMin ({n} \\<union> I \\<down>> n)\\<rbrakk>\n    \\<Longrightarrow> f \\<Join>\\<^sub>\n                      (I \\<down>< n \\<union> ({n} \\<union> I \\<down>> n)) =\n                      (f \\<Down> n \\<Join>\\<^sub> (I \\<down>< n) @\n                       [f n]) \\<frown>\n                      f \\<Join>\\<^sub> (I \\<down>> n)\n 2. \\<lbrakk>I \\<down>< n \\<noteq> {}; I \\<down>> n \\<noteq> {};\n     Max (I \\<down>< n) < iMin {n}; Max {n} < iMin (I \\<down>> n)\\<rbrakk>\n    \\<Longrightarrow> {n} \\<union> I \\<down>> n \\<noteq> {} \\<and>\n                      Max (I \\<down>< n) < iMin ({n} \\<union> I \\<down>> n)", "prefer 2"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>I \\<down>< n \\<noteq> {}; I \\<down>> n \\<noteq> {};\n     Max (I \\<down>< n) < iMin {n}; Max {n} < iMin (I \\<down>> n)\\<rbrakk>\n    \\<Longrightarrow> {n} \\<union> I \\<down>> n \\<noteq> {} \\<and>\n                      Max (I \\<down>< n) < iMin ({n} \\<union> I \\<down>> n)\n 2. \\<lbrakk>I \\<down>< n \\<noteq> {}; I \\<down>> n \\<noteq> {};\n     Max (I \\<down>< n) < iMin {n}; Max {n} < iMin (I \\<down>> n);\n     {n} \\<union> I \\<down>> n \\<noteq> {};\n     Max (I \\<down>< n) < iMin ({n} \\<union> I \\<down>> n)\\<rbrakk>\n    \\<Longrightarrow> f \\<Join>\\<^sub>\n                      (I \\<down>< n \\<union> ({n} \\<union> I \\<down>> n)) =\n                      (f \\<Down> n \\<Join>\\<^sub> (I \\<down>< n) @\n                       [f n]) \\<frown>\n                      f \\<Join>\\<^sub> (I \\<down>> n)", "apply (simp add: iMin_insert)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>I \\<down>< n \\<noteq> {}; I \\<down>> n \\<noteq> {};\n     Max (I \\<down>< n) < iMin {n}; Max {n} < iMin (I \\<down>> n);\n     {n} \\<union> I \\<down>> n \\<noteq> {};\n     Max (I \\<down>< n) < iMin ({n} \\<union> I \\<down>> n)\\<rbrakk>\n    \\<Longrightarrow> f \\<Join>\\<^sub>\n                      (I \\<down>< n \\<union> ({n} \\<union> I \\<down>> n)) =\n                      (f \\<Down> n \\<Join>\\<^sub> (I \\<down>< n) @\n                       [f n]) \\<frown>\n                      f \\<Join>\\<^sub> (I \\<down>> n)", "apply (simp add: i_join_union nat_cut_less_finite singleton_finite del: Un_insert_left Un_insert_right Max_less_iff)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>I \\<down>< n \\<noteq> {}; I \\<down>> n \\<noteq> {};\n     Max (I \\<down>< n) < n; n < iMin (I \\<down>> n);\n     Max (I \\<down>< n) < iMin ({n} \\<union> I \\<down>> n)\\<rbrakk>\n    \\<Longrightarrow> (f \\<Down> Suc (Max (I \\<down>< n)) \\<Join>\\<^sub>\n                       (I \\<down>< n) @\n                       f \\<Down> Suc n \\<Join>\\<^sub> {n}) \\<frown>\n                      f \\<Join>\\<^sub> (I \\<down>> n) =\n                      (f \\<Down> n \\<Join>\\<^sub> (I \\<down>< n) @\n                       [f n]) \\<frown>\n                      f \\<Join>\\<^sub> (I \\<down>> n)", "apply (simp add: f_join_singleton_if)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>I \\<down>< n \\<noteq> {}; I \\<down>> n \\<noteq> {};\n     Max (I \\<down>< n) < n; n < iMin (I \\<down>> n);\n     Max (I \\<down>< n) < iMin (insert n (I \\<down>> n))\\<rbrakk>\n    \\<Longrightarrow> (f \\<Down> Suc (Max (I \\<down>< n)) \\<Join>\\<^sub>\n                       (I \\<down>< n) @\n                       [f n]) \\<frown>\n                      f \\<Join>\\<^sub> (I \\<down>> n) =\n                      (f \\<Down> n \\<Join>\\<^sub> (I \\<down>< n) @\n                       [f n]) \\<frown>\n                      f \\<Join>\\<^sub> (I \\<down>> n)", "apply (rule arg_cong)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>I \\<down>< n \\<noteq> {}; I \\<down>> n \\<noteq> {};\n     Max (I \\<down>< n) < n; n < iMin (I \\<down>> n);\n     Max (I \\<down>< n) < iMin (insert n (I \\<down>> n))\\<rbrakk>\n    \\<Longrightarrow> f \\<Down> Suc (Max (I \\<down>< n)) \\<Join>\\<^sub>\n                      (I \\<down>< n) @\n                      [f n] =\n                      f \\<Down> n \\<Join>\\<^sub> (I \\<down>< n) @ [f n]", "apply (simp add: take_Suc_Max_eq_imp_f_join_eq[OF nat_cut_less_finite] min_eqR)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma i_join_i_append: \"\n  infinite I \\<Longrightarrow> (xs \\<frown> f) \\<Join>\\<^sub>i I = (xs \\<Join>\\<^sub>f I) \\<frown> (f \\<Join>\\<^sub>i (I \\<oplus>- length xs))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. infinite I \\<Longrightarrow>\n    (xs \\<frown> f) \\<Join>\\<^sub> I =\n    xs \\<Join>\\<^sub> I \\<frown> f \\<Join>\\<^sub> (I \\<oplus>- length xs)", "apply (clarsimp simp: ilist_eq_iff)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       infinite I \\<Longrightarrow>\n       ((xs \\<frown> f) \\<Join>\\<^sub> I) x =\n       (xs \\<Join>\\<^sub> I \\<frown>\n        f \\<Join>\\<^sub> (I \\<oplus>- length xs))\n        x", "apply (simp add: i_join_nth i_append_nth f_join_length)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       infinite I \\<Longrightarrow>\n       (I \\<rightarrow> x < length xs \\<longrightarrow>\n        (x < card (I \\<down>< length xs) \\<longrightarrow>\n         xs ! (I \\<rightarrow> x) = xs \\<Join>\\<^sub> I ! x) \\<and>\n        (\\<not> x < card (I \\<down>< length xs) \\<longrightarrow>\n         xs ! (I \\<rightarrow> x) =\n         f ((I \\<oplus>-\n             length\n              xs) \\<rightarrow> (x - card (I \\<down>< length xs))))) \\<and>\n       (\\<not> I \\<rightarrow> x < length xs \\<longrightarrow>\n        (x < card (I \\<down>< length xs) \\<longrightarrow>\n         f ((I \\<rightarrow> x) - length xs) =\n         xs \\<Join>\\<^sub> I ! x) \\<and>\n        (\\<not> x < card (I \\<down>< length xs) \\<longrightarrow>\n         f ((I \\<rightarrow> x) - length xs) =\n         f ((I \\<oplus>-\n             length xs) \\<rightarrow> (x - card (I \\<down>< length xs)))))", "apply (subgoal_tac \"I \\<down>\\<ge> length xs \\<noteq> {}\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>infinite I; I \\<down>\\<ge> length xs \\<noteq> {}\\<rbrakk>\n       \\<Longrightarrow> (I \\<rightarrow> x < length xs \\<longrightarrow>\n                          (x < card (I \\<down>< length xs) \\<longrightarrow>\n                           xs ! (I \\<rightarrow> x) =\n                           xs \\<Join>\\<^sub> I ! x) \\<and>\n                          (\\<not> x < card\n (I \\<down>< length xs) \\<longrightarrow>\n                           xs ! (I \\<rightarrow> x) =\n                           f ((I \\<oplus>-\n                               length\n                                xs) \\<rightarrow> (x -\n             card (I \\<down>< length xs))))) \\<and>\n                         (\\<not> I \\<rightarrow> x\n                                 < length xs \\<longrightarrow>\n                          (x < card (I \\<down>< length xs) \\<longrightarrow>\n                           f ((I \\<rightarrow> x) - length xs) =\n                           xs \\<Join>\\<^sub> I ! x) \\<and>\n                          (\\<not> x < card\n (I \\<down>< length xs) \\<longrightarrow>\n                           f ((I \\<rightarrow> x) - length xs) =\n                           f ((I \\<oplus>-\n                               length\n                                xs) \\<rightarrow> (x -\n             card (I \\<down>< length xs)))))\n 2. \\<And>x.\n       infinite I \\<Longrightarrow> I \\<down>\\<ge> length xs \\<noteq> {}", "prefer 2"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       infinite I \\<Longrightarrow> I \\<down>\\<ge> length xs \\<noteq> {}\n 2. \\<And>x.\n       \\<lbrakk>infinite I; I \\<down>\\<ge> length xs \\<noteq> {}\\<rbrakk>\n       \\<Longrightarrow> (I \\<rightarrow> x < length xs \\<longrightarrow>\n                          (x < card (I \\<down>< length xs) \\<longrightarrow>\n                           xs ! (I \\<rightarrow> x) =\n                           xs \\<Join>\\<^sub> I ! x) \\<and>\n                          (\\<not> x < card\n (I \\<down>< length xs) \\<longrightarrow>\n                           xs ! (I \\<rightarrow> x) =\n                           f ((I \\<oplus>-\n                               length\n                                xs) \\<rightarrow> (x -\n             card (I \\<down>< length xs))))) \\<and>\n                         (\\<not> I \\<rightarrow> x\n                                 < length xs \\<longrightarrow>\n                          (x < card (I \\<down>< length xs) \\<longrightarrow>\n                           f ((I \\<rightarrow> x) - length xs) =\n                           xs \\<Join>\\<^sub> I ! x) \\<and>\n                          (\\<not> x < card\n (I \\<down>< length xs) \\<longrightarrow>\n                           f ((I \\<rightarrow> x) - length xs) =\n                           f ((I \\<oplus>-\n                               length\n                                xs) \\<rightarrow> (x -\n             card (I \\<down>< length xs)))))", "apply (fastforce simp: cut_ge_not_empty_iff infinite_nat_iff_unbounded_le)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>infinite I; I \\<down>\\<ge> length xs \\<noteq> {}\\<rbrakk>\n       \\<Longrightarrow> (I \\<rightarrow> x < length xs \\<longrightarrow>\n                          (x < card (I \\<down>< length xs) \\<longrightarrow>\n                           xs ! (I \\<rightarrow> x) =\n                           xs \\<Join>\\<^sub> I ! x) \\<and>\n                          (\\<not> x < card\n (I \\<down>< length xs) \\<longrightarrow>\n                           xs ! (I \\<rightarrow> x) =\n                           f ((I \\<oplus>-\n                               length\n                                xs) \\<rightarrow> (x -\n             card (I \\<down>< length xs))))) \\<and>\n                         (\\<not> I \\<rightarrow> x\n                                 < length xs \\<longrightarrow>\n                          (x < card (I \\<down>< length xs) \\<longrightarrow>\n                           f ((I \\<rightarrow> x) - length xs) =\n                           xs \\<Join>\\<^sub> I ! x) \\<and>\n                          (\\<not> x < card\n (I \\<down>< length xs) \\<longrightarrow>\n                           f ((I \\<rightarrow> x) - length xs) =\n                           f ((I \\<oplus>-\n                               length\n                                xs) \\<rightarrow> (x -\n             card (I \\<down>< length xs)))))", "apply (simp add: inext_nth_less_less_card_conv)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>infinite I; I \\<down>\\<ge> length xs \\<noteq> {}\\<rbrakk>\n       \\<Longrightarrow> (x < card (I \\<down>< length xs) \\<longrightarrow>\n                          xs ! (I \\<rightarrow> x) =\n                          xs \\<Join>\\<^sub> I ! x) \\<and>\n                         (\\<not> x < card\n(I \\<down>< length xs) \\<longrightarrow>\n                          f ((I \\<rightarrow> x) - length xs) =\n                          f ((I \\<oplus>-\n                              length\n                               xs) \\<rightarrow> (x -\n            card (I \\<down>< length xs))))", "apply (intro conjI impI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>infinite I; I \\<down>\\<ge> length xs \\<noteq> {};\n        x < card (I \\<down>< length xs)\\<rbrakk>\n       \\<Longrightarrow> xs ! (I \\<rightarrow> x) = xs \\<Join>\\<^sub> I ! x\n 2. \\<And>x.\n       \\<lbrakk>infinite I; I \\<down>\\<ge> length xs \\<noteq> {};\n        \\<not> x < card (I \\<down>< length xs)\\<rbrakk>\n       \\<Longrightarrow> f ((I \\<rightarrow> x) - length xs) =\n                         f ((I \\<oplus>-\n                             length\n                              xs) \\<rightarrow> (x -\n           card (I \\<down>< length xs)))", "apply (simp add: f_join_nth f_join_length)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>infinite I; I \\<down>\\<ge> length xs \\<noteq> {};\n        \\<not> x < card (I \\<down>< length xs)\\<rbrakk>\n       \\<Longrightarrow> f ((I \\<rightarrow> x) - length xs) =\n                         f ((I \\<oplus>-\n                             length\n                              xs) \\<rightarrow> (x -\n           card (I \\<down>< length xs)))", "apply (subgoal_tac \"I \\<oplus>- length xs \\<noteq> {}\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>infinite I; I \\<down>\\<ge> length xs \\<noteq> {};\n        \\<not> x < card (I \\<down>< length xs);\n        I \\<oplus>- length xs \\<noteq> {}\\<rbrakk>\n       \\<Longrightarrow> f ((I \\<rightarrow> x) - length xs) =\n                         f ((I \\<oplus>-\n                             length\n                              xs) \\<rightarrow> (x -\n           card (I \\<down>< length xs)))\n 2. \\<And>x.\n       \\<lbrakk>infinite I; I \\<down>\\<ge> length xs \\<noteq> {};\n        \\<not> x < card (I \\<down>< length xs)\\<rbrakk>\n       \\<Longrightarrow> I \\<oplus>- length xs \\<noteq> {}", "prefer 2"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>infinite I; I \\<down>\\<ge> length xs \\<noteq> {};\n        \\<not> x < card (I \\<down>< length xs)\\<rbrakk>\n       \\<Longrightarrow> I \\<oplus>- length xs \\<noteq> {}\n 2. \\<And>x.\n       \\<lbrakk>infinite I; I \\<down>\\<ge> length xs \\<noteq> {};\n        \\<not> x < card (I \\<down>< length xs);\n        I \\<oplus>- length xs \\<noteq> {}\\<rbrakk>\n       \\<Longrightarrow> f ((I \\<rightarrow> x) - length xs) =\n                         f ((I \\<oplus>-\n                             length\n                              xs) \\<rightarrow> (x -\n           card (I \\<down>< length xs)))", "apply (simp add: iT_Plus_neg_empty_iff infinite_imp_nonempty)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>infinite I; I \\<down>\\<ge> length xs \\<noteq> {};\n        \\<not> x < card (I \\<down>< length xs);\n        I \\<oplus>- length xs \\<noteq> {}\\<rbrakk>\n       \\<Longrightarrow> f ((I \\<rightarrow> x) - length xs) =\n                         f ((I \\<oplus>-\n                             length\n                              xs) \\<rightarrow> (x -\n           card (I \\<down>< length xs)))", "apply (simp add: iT_Plus_neg_inext_nth)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>infinite I; I \\<down>\\<ge> length xs \\<noteq> {};\n        \\<not> x < card (I \\<down>< length xs);\n        I \\<oplus>- length xs \\<noteq> {}\\<rbrakk>\n       \\<Longrightarrow> f ((I \\<rightarrow> x) - length xs) =\n                         f ((I \\<down>\\<ge>\n                             length\n                              xs \\<rightarrow> (x -\n          card (I \\<down>< length xs))) -\n                            length xs)", "apply (case_tac \"I \\<down>< length xs = {}\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>infinite I; I \\<down>\\<ge> length xs \\<noteq> {};\n        \\<not> x < card (I \\<down>< length xs);\n        I \\<oplus>- length xs \\<noteq> {};\n        I \\<down>< length xs = {}\\<rbrakk>\n       \\<Longrightarrow> f ((I \\<rightarrow> x) - length xs) =\n                         f ((I \\<down>\\<ge>\n                             length\n                              xs \\<rightarrow> (x -\n          card (I \\<down>< length xs))) -\n                            length xs)\n 2. \\<And>x.\n       \\<lbrakk>infinite I; I \\<down>\\<ge> length xs \\<noteq> {};\n        \\<not> x < card (I \\<down>< length xs);\n        I \\<oplus>- length xs \\<noteq> {};\n        I \\<down>< length xs \\<noteq> {}\\<rbrakk>\n       \\<Longrightarrow> f ((I \\<rightarrow> x) - length xs) =\n                         f ((I \\<down>\\<ge>\n                             length\n                              xs \\<rightarrow> (x -\n          card (I \\<down>< length xs))) -\n                            length xs)", "apply (frule cut_less_empty_iff[THEN iffD1, THEN cut_ge_all_iff[THEN iffD2]])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>infinite I; I \\<down>\\<ge> length xs \\<noteq> {};\n        \\<not> x < card (I \\<down>< length xs);\n        I \\<oplus>- length xs \\<noteq> {}; I \\<down>< length xs = {};\n        I \\<down>\\<ge> length xs = I\\<rbrakk>\n       \\<Longrightarrow> f ((I \\<rightarrow> x) - length xs) =\n                         f ((I \\<down>\\<ge>\n                             length\n                              xs \\<rightarrow> (x -\n          card (I \\<down>< length xs))) -\n                            length xs)\n 2. \\<And>x.\n       \\<lbrakk>infinite I; I \\<down>\\<ge> length xs \\<noteq> {};\n        \\<not> x < card (I \\<down>< length xs);\n        I \\<oplus>- length xs \\<noteq> {};\n        I \\<down>< length xs \\<noteq> {}\\<rbrakk>\n       \\<Longrightarrow> f ((I \\<rightarrow> x) - length xs) =\n                         f ((I \\<down>\\<ge>\n                             length\n                              xs \\<rightarrow> (x -\n          card (I \\<down>< length xs))) -\n                            length xs)", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>infinite I; I \\<down>\\<ge> length xs \\<noteq> {};\n        \\<not> x < card (I \\<down>< length xs);\n        I \\<oplus>- length xs \\<noteq> {};\n        I \\<down>< length xs \\<noteq> {}\\<rbrakk>\n       \\<Longrightarrow> f ((I \\<rightarrow> x) - length xs) =\n                         f ((I \\<down>\\<ge>\n                             length\n                              xs \\<rightarrow> (x -\n          card (I \\<down>< length xs))) -\n                            length xs)", "apply (rule subst[OF inext_nth_card_append_eq2, OF nat_cut_less_finite], simp+)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>infinite I; I \\<down>\\<ge> length xs \\<noteq> {};\n        \\<not> x < card (I \\<down>< length xs);\n        I \\<oplus>- length xs \\<noteq> {};\n        I \\<down>< length xs \\<noteq> {}\\<rbrakk>\n       \\<Longrightarrow> Max (I \\<down>< length xs)\n                         < iMin (I \\<down>\\<ge> length xs)\n 2. \\<And>x.\n       \\<lbrakk>infinite I; I \\<down>\\<ge> length xs \\<noteq> {};\n        \\<not> x < card (I \\<down>< length xs);\n        I \\<oplus>- length xs \\<noteq> {};\n        I \\<down>< length xs \\<noteq> {}\\<rbrakk>\n       \\<Longrightarrow> card (I \\<down>< length xs) \\<le> x\n 3. \\<And>x.\n       \\<lbrakk>infinite I; I \\<down>\\<ge> length xs \\<noteq> {};\n        \\<not> x < card (I \\<down>< length xs);\n        I \\<oplus>- length xs \\<noteq> {};\n        I \\<down>< length xs \\<noteq> {}\\<rbrakk>\n       \\<Longrightarrow> f ((I \\<rightarrow> x) - length xs) =\n                         f (((I \\<down>< length xs \\<union>\n                              I \\<down>\\<ge> length xs) \\<rightarrow> x) -\n                            length xs)", "apply (simp add: less_imp_Max_less_iMin[OF nat_cut_less_finite] i_cut_mem_iff)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>infinite I; I \\<down>\\<ge> length xs \\<noteq> {};\n        \\<not> x < card (I \\<down>< length xs);\n        I \\<oplus>- length xs \\<noteq> {};\n        I \\<down>< length xs \\<noteq> {}\\<rbrakk>\n       \\<Longrightarrow> card (I \\<down>< length xs) \\<le> x\n 2. \\<And>x.\n       \\<lbrakk>infinite I; I \\<down>\\<ge> length xs \\<noteq> {};\n        \\<not> x < card (I \\<down>< length xs);\n        I \\<oplus>- length xs \\<noteq> {};\n        I \\<down>< length xs \\<noteq> {}\\<rbrakk>\n       \\<Longrightarrow> f ((I \\<rightarrow> x) - length xs) =\n                         f (((I \\<down>< length xs \\<union>\n                              I \\<down>\\<ge> length xs) \\<rightarrow> x) -\n                            length xs)", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>infinite I; I \\<down>\\<ge> length xs \\<noteq> {};\n        \\<not> x < card (I \\<down>< length xs);\n        I \\<oplus>- length xs \\<noteq> {};\n        I \\<down>< length xs \\<noteq> {}\\<rbrakk>\n       \\<Longrightarrow> f ((I \\<rightarrow> x) - length xs) =\n                         f (((I \\<down>< length xs \\<union>\n                              I \\<down>\\<ge> length xs) \\<rightarrow> x) -\n                            length xs)", "apply (simp add: cut_less_cut_ge_ident)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma i_take_i_join: \"infinite I \\<Longrightarrow> f \\<Join>\\<^sub>i I \\<Down> n = f \\<Down> (I \\<rightarrow> n) \\<Join>\\<^sub>f I\""], ["proof (prove)\ngoal (1 subgoal):\n 1. infinite I \\<Longrightarrow>\n    f \\<Join>\\<^sub> I \\<Down> n =\n    f \\<Down> (I \\<rightarrow> n) \\<Join>\\<^sub> I", "apply (clarsimp simp: list_eq_iff f_join_length cut_less_inext_nth_card_eq1, rename_tac i)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i.\n       \\<lbrakk>infinite I; i < n\\<rbrakk>\n       \\<Longrightarrow> (f \\<Join>\\<^sub> I) i =\n                         f \\<Down> (I \\<rightarrow> n) \\<Join>\\<^sub> I ! i", "apply (simp add: i_join_nth)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i.\n       \\<lbrakk>infinite I; i < n\\<rbrakk>\n       \\<Longrightarrow> f (I \\<rightarrow> i) =\n                         f \\<Down> (I \\<rightarrow> n) \\<Join>\\<^sub> I ! i", "apply (frule inext_nth_mono2_infin[THEN iffD2], assumption)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i.\n       \\<lbrakk>infinite I; i < n;\n        I \\<rightarrow> i < I \\<rightarrow> n\\<rbrakk>\n       \\<Longrightarrow> f (I \\<rightarrow> i) =\n                         f \\<Down> (I \\<rightarrow> n) \\<Join>\\<^sub> I ! i", "apply (rule_tac t=\"f (I \\<rightarrow> i)\" and s=\"f \\<Down> (I \\<rightarrow> n) ! (I \\<rightarrow> i)\" in subst, simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i.\n       \\<lbrakk>infinite I; i < n;\n        I \\<rightarrow> i < I \\<rightarrow> n\\<rbrakk>\n       \\<Longrightarrow> f \\<Down> (I \\<rightarrow> n) !\n                         (I \\<rightarrow> i) =\n                         f \\<Down> (I \\<rightarrow> n) \\<Join>\\<^sub> I ! i", "apply (rule sym, rule f_join_nth)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i.\n       \\<lbrakk>infinite I; i < n;\n        I \\<rightarrow> i < I \\<rightarrow> n\\<rbrakk>\n       \\<Longrightarrow> i < length\n                              (f \\<Down> (I \\<rightarrow> n) \\<Join>\\<^sub>\n                               I)", "apply (simp add: f_join_length)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i.\n       \\<lbrakk>infinite I; i < n;\n        I \\<rightarrow> i < I \\<rightarrow> n\\<rbrakk>\n       \\<Longrightarrow> i < card (I \\<down>< (I \\<rightarrow> n))", "apply (simp add: inext_nth_less_less_card_conv[OF nat_cut_ge_infinite_not_empty])"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma i_drop_i_join: \"I \\<noteq> {} \\<Longrightarrow> f \\<Join>\\<^sub>i I \\<Up> n = f \\<Join>\\<^sub>i (I \\<down>\\<ge> (I \\<rightarrow> n))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. I \\<noteq> {} \\<Longrightarrow>\n    f \\<Join>\\<^sub> I \\<Up> n =\n    f \\<Join>\\<^sub> (I \\<down>\\<ge> (I \\<rightarrow> n))", "apply (simp (no_asm) add: ilist_eq_iff)"], ["proof (prove)\ngoal (1 subgoal):\n 1. I \\<noteq> {} \\<Longrightarrow>\n    \\<forall>x.\n       (f \\<Join>\\<^sub> I) (n + x) =\n       (f \\<Join>\\<^sub> (I \\<down>\\<ge> (I \\<rightarrow> n))) x", "apply (simp add: i_join_nth inext_nth_cut_ge_inext_nth)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma i_join_i_take: \"f \\<Down> n \\<Join>\\<^sub>f I = f \\<Join>\\<^sub>i I \\<Down> card (I \\<down>< n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f \\<Down> n \\<Join>\\<^sub> I =\n    f \\<Join>\\<^sub> I \\<Down> card (I \\<down>< n)", "apply (clarsimp simp: list_eq_iff f_join_length)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i.\n       i < card (I \\<down>< n) \\<Longrightarrow>\n       f \\<Down> n \\<Join>\\<^sub> I ! i = (f \\<Join>\\<^sub> I) i", "apply (frule less_card_cut_less_imp_inext_nth_less)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i.\n       \\<lbrakk>i < card (I \\<down>< n); I \\<rightarrow> i < n\\<rbrakk>\n       \\<Longrightarrow> f \\<Down> n \\<Join>\\<^sub> I ! i =\n                         (f \\<Join>\\<^sub> I) i", "apply (simp add: i_join_nth f_join_length f_join_nth)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma i_join_i_drop: \"I \\<noteq> {} \\<Longrightarrow> f \\<Up> n \\<Join>\\<^sub>i I = f \\<Join>\\<^sub>i (I \\<oplus> n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. I \\<noteq> {} \\<Longrightarrow>\n    f \\<Up> n \\<Join>\\<^sub> I = f \\<Join>\\<^sub> (I \\<oplus> n)", "apply (simp (no_asm) add: ilist_eq_iff)"], ["proof (prove)\ngoal (1 subgoal):\n 1. I \\<noteq> {} \\<Longrightarrow>\n    \\<forall>x.\n       (f \\<Up> n \\<Join>\\<^sub> I) x = (f \\<Join>\\<^sub> (I \\<oplus> n)) x", "apply (simp add: i_join_nth iT_Plus_inext_nth add.commute[of _ n])"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma i_join_finite_nth_ge_card_eq_nth_Max: \"\n  \\<lbrakk> finite I; I \\<noteq> {}; card I \\<le> Suc n \\<rbrakk> \\<Longrightarrow> (f \\<Join>\\<^sub>i I) n = f (Max I)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite I; I \\<noteq> {}; card I \\<le> Suc n\\<rbrakk>\n    \\<Longrightarrow> (f \\<Join>\\<^sub> I) n = f (Max I)", "by (simp add: i_join_nth inext_nth_card_Max)"], ["", "lemma i_join_finite_i_drop_card_eq_const_nth_Max: \"\n  \\<lbrakk> finite I; I \\<noteq> {} \\<rbrakk> \\<Longrightarrow> (f \\<Join>\\<^sub>i I) \\<Up> (card I) = (\\<lambda>n. f (Max I))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite I; I \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> f \\<Join>\\<^sub> I \\<Up> card I =\n                      (\\<lambda>n. f (Max I))", "by (simp add: ilist_eq_iff i_join_finite_nth_ge_card_eq_nth_Max)"], ["", "lemma i_join_finite_i_append_nth_Max_conv: \"\n  \\<lbrakk> finite I; I \\<noteq> {} \\<rbrakk> \\<Longrightarrow> (f \\<Join>\\<^sub>i I) = f \\<Down> Suc (Max I) \\<Join>\\<^sub>f I \\<frown> (\\<lambda>n. f (Max I))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite I; I \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> f \\<Join>\\<^sub> I =\n                      f \\<Down> Suc (Max I) \\<Join>\\<^sub> I \\<frown>\n                      (\\<lambda>n. f (Max I))", "apply (simp (no_asm) add: ilist_eq_iff, clarify)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>finite I; I \\<noteq> {}\\<rbrakk>\n       \\<Longrightarrow> (f \\<Join>\\<^sub> I) x =\n                         (f \\<Down> Suc (Max I) \\<Join>\\<^sub> I \\<frown>\n                          (\\<lambda>n. f (Max I)))\n                          x", "apply (subgoal_tac \"I \\<down>< (Suc (Max I)) = I\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>finite I; I \\<noteq> {}; I \\<down>< Suc (Max I) = I\\<rbrakk>\n       \\<Longrightarrow> (f \\<Join>\\<^sub> I) x =\n                         (f \\<Down> Suc (Max I) \\<Join>\\<^sub> I \\<frown>\n                          (\\<lambda>n. f (Max I)))\n                          x\n 2. \\<And>x.\n       \\<lbrakk>finite I; I \\<noteq> {}\\<rbrakk>\n       \\<Longrightarrow> I \\<down>< Suc (Max I) = I", "prefer 2"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>finite I; I \\<noteq> {}\\<rbrakk>\n       \\<Longrightarrow> I \\<down>< Suc (Max I) = I\n 2. \\<And>x.\n       \\<lbrakk>finite I; I \\<noteq> {}; I \\<down>< Suc (Max I) = I\\<rbrakk>\n       \\<Longrightarrow> (f \\<Join>\\<^sub> I) x =\n                         (f \\<Down> Suc (Max I) \\<Join>\\<^sub> I \\<frown>\n                          (\\<lambda>n. f (Max I)))\n                          x", "apply (simp add: nat_cut_le_less_conv[symmetric] cut_le_Max_all)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>finite I; I \\<noteq> {}; I \\<down>< Suc (Max I) = I\\<rbrakk>\n       \\<Longrightarrow> (f \\<Join>\\<^sub> I) x =\n                         (f \\<Down> Suc (Max I) \\<Join>\\<^sub> I \\<frown>\n                          (\\<lambda>n. f (Max I)))\n                          x", "apply (simp add: i_append_nth i_join_nth f_join_length)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>finite I; I \\<noteq> {}; I \\<down>< Suc (Max I) = I\\<rbrakk>\n       \\<Longrightarrow> (x < card I \\<longrightarrow>\n                          f (I \\<rightarrow> x) =\n                          f \\<Down> Suc (Max I) \\<Join>\\<^sub> I ! x) \\<and>\n                         (\\<not> x < card I \\<longrightarrow>\n                          f (I \\<rightarrow> x) = f (Max I))", "apply (intro conjI impI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>finite I; I \\<noteq> {}; I \\<down>< Suc (Max I) = I;\n        x < card I\\<rbrakk>\n       \\<Longrightarrow> f (I \\<rightarrow> x) =\n                         f \\<Down> Suc (Max I) \\<Join>\\<^sub> I ! x\n 2. \\<And>x.\n       \\<lbrakk>finite I; I \\<noteq> {}; I \\<down>< Suc (Max I) = I;\n        \\<not> x < card I\\<rbrakk>\n       \\<Longrightarrow> f (I \\<rightarrow> x) = f (Max I)", "apply (simp add: f_join_nth f_join_length)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>finite I; I \\<noteq> {}; I \\<down>< Suc (Max I) = I;\n        x < card I\\<rbrakk>\n       \\<Longrightarrow> f (I \\<rightarrow> x) =\n                         f \\<Down> Suc (Max I) ! (I \\<rightarrow> x)\n 2. \\<And>x.\n       \\<lbrakk>finite I; I \\<noteq> {}; I \\<down>< Suc (Max I) = I;\n        \\<not> x < card I\\<rbrakk>\n       \\<Longrightarrow> f (I \\<rightarrow> x) = f (Max I)", "apply (rule sym, rule i_take_nth)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>finite I; I \\<noteq> {}; I \\<down>< Suc (Max I) = I;\n        x < card I\\<rbrakk>\n       \\<Longrightarrow> I \\<rightarrow> x < Suc (Max I)\n 2. \\<And>x.\n       \\<lbrakk>finite I; I \\<noteq> {}; I \\<down>< Suc (Max I) = I;\n        \\<not> x < card I\\<rbrakk>\n       \\<Longrightarrow> f (I \\<rightarrow> x) = f (Max I)", "apply (simp add: less_card_cut_less_imp_inext_nth_less)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>finite I; I \\<noteq> {}; I \\<down>< Suc (Max I) = I;\n        \\<not> x < card I\\<rbrakk>\n       \\<Longrightarrow> f (I \\<rightarrow> x) = f (Max I)", "apply (simp add: inext_nth_card_Max)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "text \\<open>Joining infinite streams and finite intervals\\<close>"], ["", "lemma i_f_join_length: \"finite I \\<Longrightarrow> length (f \\<Join>\\<^bsub>i-f\\<^esub> I) = card I\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite I \\<Longrightarrow> length (f \\<Join>\\<^sub> I) = card I", "apply (simp add: i_f_join_def f_join_length)"], ["proof (prove)\ngoal (1 subgoal):\n 1. finite I \\<Longrightarrow> card (I \\<down>< Suc (Max I)) = card I", "apply (simp add: nat_cut_le_less_conv[symmetric] cut_le_Max_all)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma i_f_join_nth: \"n < card I \\<Longrightarrow> f \\<Join>\\<^bsub>i-f\\<^esub> I ! n = f (I \\<rightarrow> n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. n < card I \\<Longrightarrow>\n    f \\<Join>\\<^sub> I ! n = f (I \\<rightarrow> n)", "apply (frule card_gr0_imp_finite[OF gr_implies_gr0])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>n < card I; finite I\\<rbrakk>\n    \\<Longrightarrow> f \\<Join>\\<^sub> I ! n = f (I \\<rightarrow> n)", "apply (frule card_gr0_imp_not_empty[OF gr_implies_gr0])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>n < card I; finite I; I \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> f \\<Join>\\<^sub> I ! n = f (I \\<rightarrow> n)", "apply (simp add: i_f_join_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>n < card I; finite I; I \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> f \\<Down> Suc (Max I) \\<Join>\\<^sub> I ! n =\n                      f (I \\<rightarrow> n)", "apply (subst i_take_nth[ of \"I \\<rightarrow> n\" \"Suc (Max I)\" f, symmetric])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>n < card I; finite I; I \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> I \\<rightarrow> n < Suc (Max I)\n 2. \\<lbrakk>n < card I; finite I; I \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> f \\<Down> Suc (Max I) \\<Join>\\<^sub> I ! n =\n                      f \\<Down> Suc (Max I) ! (I \\<rightarrow> n)", "apply (rule le_imp_less_Suc)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>n < card I; finite I; I \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> I \\<rightarrow> n \\<le> Max I\n 2. \\<lbrakk>n < card I; finite I; I \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> f \\<Down> Suc (Max I) \\<Join>\\<^sub> I ! n =\n                      f \\<Down> Suc (Max I) ! (I \\<rightarrow> n)", "apply (simp add: Max_ge[OF _ inext_nth_closed])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>n < card I; finite I; I \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> f \\<Down> Suc (Max I) \\<Join>\\<^sub> I ! n =\n                      f \\<Down> Suc (Max I) ! (I \\<rightarrow> n)", "apply (simp add: f_join_nth2 nat_cut_le_less_conv[symmetric] cut_le_Max_all)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma i_f_join_empty: \"f \\<Join>\\<^bsub>i-f\\<^esub> {} = []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f \\<Join>\\<^sub> {} = []", "by (simp add: i_f_join_def f_join_empty)"], ["", "lemma i_f_join_eq_i_join_i_take: \"\n  finite I \\<Longrightarrow> f \\<Join>\\<^bsub>i-f\\<^esub> I = f \\<Join>\\<^sub>i I \\<Down> (card I)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite I \\<Longrightarrow>\n    f \\<Join>\\<^sub> I = f \\<Join>\\<^sub> I \\<Down> card I", "apply (simp add: i_f_join_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. finite I \\<Longrightarrow>\n    f \\<Down> Suc (Max I) \\<Join>\\<^sub> I =\n    f \\<Join>\\<^sub> I \\<Down> card I", "apply (simp add: i_join_i_take nat_cut_le_less_conv[symmetric] cut_le_Max_all)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma i_f_join_union: \"\n  \\<lbrakk> finite A; finite B; Max A < iMin B \\<rbrakk> \\<Longrightarrow>\n  f \\<Join>\\<^bsub>i-f\\<^esub> (A \\<union> B) = f \\<Join>\\<^bsub>i-f\\<^esub> A @ f \\<Join>\\<^bsub>i-f\\<^esub> B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite A; finite B; Max A < iMin B\\<rbrakk>\n    \\<Longrightarrow> f \\<Join>\\<^sub> (A \\<union> B) =\n                      f \\<Join>\\<^sub> A @ f \\<Join>\\<^sub> B", "apply (case_tac \"A = {}\", simp add: i_f_join_empty)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite A; finite B; Max A < iMin B; A \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> f \\<Join>\\<^sub> (A \\<union> B) =\n                      f \\<Join>\\<^sub> A @ f \\<Join>\\<^sub> B", "apply (case_tac \"B = {}\", simp add: i_f_join_empty)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite A; finite B; Max A < iMin B; A \\<noteq> {};\n     B \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> f \\<Join>\\<^sub> (A \\<union> B) =\n                      f \\<Join>\\<^sub> A @ f \\<Join>\\<^sub> B", "apply (simp add: i_f_join_def f_join_union del: Max_less_iff)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite A; finite B; Max A < iMin B; A \\<noteq> {};\n     B \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> f \\<Down> Suc (Max (A \\<union> B)) \\<Join>\\<^sub> A @\n                      f \\<Down> Suc (Max (A \\<union> B)) \\<Join>\\<^sub> B =\n                      f \\<Down> Suc (Max A) \\<Join>\\<^sub> A @\n                      f \\<Down> Suc (Max B) \\<Join>\\<^sub> B", "apply (subgoal_tac \"Max A < Max B\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>finite A; finite B; Max A < iMin B; A \\<noteq> {};\n     B \\<noteq> {}; Max A < Max B\\<rbrakk>\n    \\<Longrightarrow> f \\<Down> Suc (Max (A \\<union> B)) \\<Join>\\<^sub> A @\n                      f \\<Down> Suc (Max (A \\<union> B)) \\<Join>\\<^sub> B =\n                      f \\<Down> Suc (Max A) \\<Join>\\<^sub> A @\n                      f \\<Down> Suc (Max B) \\<Join>\\<^sub> B\n 2. \\<lbrakk>finite A; finite B; Max A < iMin B; A \\<noteq> {};\n     B \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> Max A < Max B", "prefer 2"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>finite A; finite B; Max A < iMin B; A \\<noteq> {};\n     B \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> Max A < Max B\n 2. \\<lbrakk>finite A; finite B; Max A < iMin B; A \\<noteq> {};\n     B \\<noteq> {}; Max A < Max B\\<rbrakk>\n    \\<Longrightarrow> f \\<Down> Suc (Max (A \\<union> B)) \\<Join>\\<^sub> A @\n                      f \\<Down> Suc (Max (A \\<union> B)) \\<Join>\\<^sub> B =\n                      f \\<Down> Suc (Max A) \\<Join>\\<^sub> A @\n                      f \\<Down> Suc (Max B) \\<Join>\\<^sub> B", "apply (rule order_less_le_trans[OF _ iMin_le_Max], assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite A; finite B; Max A < iMin B; A \\<noteq> {};\n     B \\<noteq> {}; Max A < Max B\\<rbrakk>\n    \\<Longrightarrow> f \\<Down> Suc (Max (A \\<union> B)) \\<Join>\\<^sub> A @\n                      f \\<Down> Suc (Max (A \\<union> B)) \\<Join>\\<^sub> B =\n                      f \\<Down> Suc (Max A) \\<Join>\\<^sub> A @\n                      f \\<Down> Suc (Max B) \\<Join>\\<^sub> B", "apply (simp add: Max_Un max_eqR[OF less_imp_le])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite A; finite B; \\<forall>a\\<in>A. a < iMin B;\n     A \\<noteq> {}; B \\<noteq> {}; \\<forall>a\\<in>A. a < Max B\\<rbrakk>\n    \\<Longrightarrow> f \\<Down> Suc (Max B) \\<Join>\\<^sub> A =\n                      f \\<Down> Suc (Max A) \\<Join>\\<^sub> A", "apply (rule take_Suc_Max_eq_imp_f_join_eq, assumption)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite A; finite B; \\<forall>a\\<in>A. a < iMin B;\n     A \\<noteq> {}; B \\<noteq> {}; \\<forall>a\\<in>A. a < Max B\\<rbrakk>\n    \\<Longrightarrow> f \\<Down> Suc (Max B) \\<down> Suc (Max A) =\n                      f \\<Down> Suc (Max A) \\<down> Suc (Max A)", "apply (simp add: min_eqR[OF less_imp_le])"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma i_f_join_singleton: \"f \\<Join>\\<^bsub>i-f\\<^esub> {n} = [f n]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f \\<Join>\\<^sub> {n} = [f n]", "by (simp add: i_f_join_def f_join_singleton_if)"], ["", "lemma i_f_join_insert: \"\n  finite I \\<Longrightarrow>\n  f \\<Join>\\<^bsub>i-f\\<^esub> insert n I = f \\<Join>\\<^bsub>i-f\\<^esub> (I \\<down>< n) @ f n # f \\<Join>\\<^bsub>i-f\\<^esub> (I \\<down>> n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite I \\<Longrightarrow>\n    f \\<Join>\\<^sub> insert n I =\n    f \\<Join>\\<^sub> (I \\<down>< n) @ f n # f \\<Join>\\<^sub> (I \\<down>> n)", "apply (case_tac \"I = {}\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>finite I; I = {}\\<rbrakk>\n    \\<Longrightarrow> f \\<Join>\\<^sub> insert n I =\n                      f \\<Join>\\<^sub> (I \\<down>< n) @\n                      f n # f \\<Join>\\<^sub> (I \\<down>> n)\n 2. \\<lbrakk>finite I; I \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> f \\<Join>\\<^sub> insert n I =\n                      f \\<Join>\\<^sub> (I \\<down>< n) @\n                      f n # f \\<Join>\\<^sub> (I \\<down>> n)", "apply (simp add: i_f_join_singleton i_cut_empty i_f_join_empty)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite I; I \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> f \\<Join>\\<^sub> insert n I =\n                      f \\<Join>\\<^sub> (I \\<down>< n) @\n                      f n # f \\<Join>\\<^sub> (I \\<down>> n)", "(*\napply (subgoal_tac \"n < Suc (Max (insert n I))\")\n prefer 2\n apply simp\napply (frule less_Suc_eq_le[THEN iffD1])*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite I; I \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> f \\<Join>\\<^sub> insert n I =\n                      f \\<Join>\\<^sub> (I \\<down>< n) @\n                      f n # f \\<Join>\\<^sub> (I \\<down>> n)", "apply (simp add: i_f_join_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite I; I \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> f \\<Down> Suc (max n (Max I)) \\<Join>\\<^sub>\n                      insert n I =\n                      f \\<Down> Suc (Max (I \\<down>< n)) \\<Join>\\<^sub>\n                      (I \\<down>< n) @\n                      f n #\n                      f \\<Down> Suc (Max (I \\<down>> n)) \\<Join>\\<^sub>\n                      (I \\<down>> n)", "apply (simp add: f_join_insert)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite I; I \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> f \\<Down> Suc (max n (Max I)) \\<Join>\\<^sub>\n                      (I \\<down>< n) @\n                      f n #\n                      f \\<Down> Suc (max n (Max I)) \\<Join>\\<^sub>\n                      (I \\<down>> n) =\n                      f \\<Down> Suc (Max (I \\<down>< n)) \\<Join>\\<^sub>\n                      (I \\<down>< n) @\n                      f n #\n                      f \\<Down> Suc (Max (I \\<down>> n)) \\<Join>\\<^sub>\n                      (I \\<down>> n)", "apply (frule cut_greater_finite[of _ n])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite I; I \\<noteq> {}; finite (I \\<down>> n)\\<rbrakk>\n    \\<Longrightarrow> f \\<Down> Suc (max n (Max I)) \\<Join>\\<^sub>\n                      (I \\<down>< n) @\n                      f n #\n                      f \\<Down> Suc (max n (Max I)) \\<Join>\\<^sub>\n                      (I \\<down>> n) =\n                      f \\<Down> Suc (Max (I \\<down>< n)) \\<Join>\\<^sub>\n                      (I \\<down>< n) @\n                      f n #\n                      f \\<Down> Suc (Max (I \\<down>> n)) \\<Join>\\<^sub>\n                      (I \\<down>> n)", "apply (case_tac \"I \\<down>> n = {}\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>finite I; I \\<noteq> {}; finite (I \\<down>> n);\n     I \\<down>> n = {}\\<rbrakk>\n    \\<Longrightarrow> f \\<Down> Suc (max n (Max I)) \\<Join>\\<^sub>\n                      (I \\<down>< n) @\n                      f n #\n                      f \\<Down> Suc (max n (Max I)) \\<Join>\\<^sub>\n                      (I \\<down>> n) =\n                      f \\<Down> Suc (Max (I \\<down>< n)) \\<Join>\\<^sub>\n                      (I \\<down>< n) @\n                      f n #\n                      f \\<Down> Suc (Max (I \\<down>> n)) \\<Join>\\<^sub>\n                      (I \\<down>> n)\n 2. \\<lbrakk>finite I; I \\<noteq> {}; finite (I \\<down>> n);\n     I \\<down>> n \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> f \\<Down> Suc (max n (Max I)) \\<Join>\\<^sub>\n                      (I \\<down>< n) @\n                      f n #\n                      f \\<Down> Suc (max n (Max I)) \\<Join>\\<^sub>\n                      (I \\<down>> n) =\n                      f \\<Down> Suc (Max (I \\<down>< n)) \\<Join>\\<^sub>\n                      (I \\<down>< n) @\n                      f n #\n                      f \\<Down> Suc (Max (I \\<down>> n)) \\<Join>\\<^sub>\n                      (I \\<down>> n)", "apply (simp add: f_join_empty)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>finite I; I \\<noteq> {}; I \\<down>> n = {}\\<rbrakk>\n    \\<Longrightarrow> f \\<Down> Suc (max n (Max I)) \\<Join>\\<^sub>\n                      (I \\<down>< n) =\n                      f \\<Down> Suc (Max (I \\<down>< n)) \\<Join>\\<^sub>\n                      (I \\<down>< n)\n 2. \\<lbrakk>finite I; I \\<noteq> {}; finite (I \\<down>> n);\n     I \\<down>> n \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> f \\<Down> Suc (max n (Max I)) \\<Join>\\<^sub>\n                      (I \\<down>< n) @\n                      f n #\n                      f \\<Down> Suc (max n (Max I)) \\<Join>\\<^sub>\n                      (I \\<down>> n) =\n                      f \\<Down> Suc (Max (I \\<down>< n)) \\<Join>\\<^sub>\n                      (I \\<down>< n) @\n                      f n #\n                      f \\<Down> Suc (Max (I \\<down>> n)) \\<Join>\\<^sub>\n                      (I \\<down>> n)", "apply (case_tac \"I \\<down>< n = {}\")"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>finite I; I \\<noteq> {}; I \\<down>> n = {};\n     I \\<down>< n = {}\\<rbrakk>\n    \\<Longrightarrow> f \\<Down> Suc (max n (Max I)) \\<Join>\\<^sub>\n                      (I \\<down>< n) =\n                      f \\<Down> Suc (Max (I \\<down>< n)) \\<Join>\\<^sub>\n                      (I \\<down>< n)\n 2. \\<lbrakk>finite I; I \\<noteq> {}; I \\<down>> n = {};\n     I \\<down>< n \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> f \\<Down> Suc (max n (Max I)) \\<Join>\\<^sub>\n                      (I \\<down>< n) =\n                      f \\<Down> Suc (Max (I \\<down>< n)) \\<Join>\\<^sub>\n                      (I \\<down>< n)\n 3. \\<lbrakk>finite I; I \\<noteq> {}; finite (I \\<down>> n);\n     I \\<down>> n \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> f \\<Down> Suc (max n (Max I)) \\<Join>\\<^sub>\n                      (I \\<down>< n) @\n                      f n #\n                      f \\<Down> Suc (max n (Max I)) \\<Join>\\<^sub>\n                      (I \\<down>> n) =\n                      f \\<Down> Suc (Max (I \\<down>< n)) \\<Join>\\<^sub>\n                      (I \\<down>< n) @\n                      f n #\n                      f \\<Down> Suc (Max (I \\<down>> n)) \\<Join>\\<^sub>\n                      (I \\<down>> n)", "apply (simp add: f_join_empty)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>finite I; I \\<noteq> {}; I \\<down>> n = {};\n     I \\<down>< n \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> f \\<Down> Suc (max n (Max I)) \\<Join>\\<^sub>\n                      (I \\<down>< n) =\n                      f \\<Down> Suc (Max (I \\<down>< n)) \\<Join>\\<^sub>\n                      (I \\<down>< n)\n 2. \\<lbrakk>finite I; I \\<noteq> {}; finite (I \\<down>> n);\n     I \\<down>> n \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> f \\<Down> Suc (max n (Max I)) \\<Join>\\<^sub>\n                      (I \\<down>< n) @\n                      f n #\n                      f \\<Down> Suc (max n (Max I)) \\<Join>\\<^sub>\n                      (I \\<down>> n) =\n                      f \\<Down> Suc (Max (I \\<down>< n)) \\<Join>\\<^sub>\n                      (I \\<down>< n) @\n                      f n #\n                      f \\<Down> Suc (Max (I \\<down>> n)) \\<Join>\\<^sub>\n                      (I \\<down>> n)", "apply (rule take_Suc_Max_eq_imp_f_join_eq[OF nat_cut_less_finite])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>finite I; I \\<noteq> {}; I \\<down>> n = {};\n     I \\<down>< n \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> f \\<Down> Suc (max n (Max I)) \\<down>\n                      Suc (Max (I \\<down>< n)) =\n                      f \\<Down> Suc (Max (I \\<down>< n)) \\<down>\n                      Suc (Max (I \\<down>< n))\n 2. \\<lbrakk>finite I; I \\<noteq> {}; finite (I \\<down>> n);\n     I \\<down>> n \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> f \\<Down> Suc (max n (Max I)) \\<Join>\\<^sub>\n                      (I \\<down>< n) @\n                      f n #\n                      f \\<Down> Suc (max n (Max I)) \\<Join>\\<^sub>\n                      (I \\<down>> n) =\n                      f \\<Down> Suc (Max (I \\<down>< n)) \\<Join>\\<^sub>\n                      (I \\<down>< n) @\n                      f n #\n                      f \\<Down> Suc (Max (I \\<down>> n)) \\<Join>\\<^sub>\n                      (I \\<down>> n)", "apply simp"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>finite I; I \\<noteq> {}; I \\<down>> n = {};\n     I \\<down>< n \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> f \\<Down>\n                      Suc (min (max n (Max I)) (Max (I \\<down>< n))) =\n                      f \\<Down> Suc (Max (I \\<down>< n))\n 2. \\<lbrakk>finite I; I \\<noteq> {}; finite (I \\<down>> n);\n     I \\<down>> n \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> f \\<Down> Suc (max n (Max I)) \\<Join>\\<^sub>\n                      (I \\<down>< n) @\n                      f n #\n                      f \\<Down> Suc (max n (Max I)) \\<Join>\\<^sub>\n                      (I \\<down>> n) =\n                      f \\<Down> Suc (Max (I \\<down>< n)) \\<Join>\\<^sub>\n                      (I \\<down>< n) @\n                      f n #\n                      f \\<Down> Suc (Max (I \\<down>> n)) \\<Join>\\<^sub>\n                      (I \\<down>> n)", "apply (rule arg_cong[where f=\"\\<lambda>x. f \\<Down> x\"])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>finite I; I \\<noteq> {}; I \\<down>> n = {};\n     I \\<down>< n \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> Suc (min (max n (Max I)) (Max (I \\<down>< n))) =\n                      Suc (Max (I \\<down>< n))\n 2. \\<lbrakk>finite I; I \\<noteq> {}; finite (I \\<down>> n);\n     I \\<down>> n \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> f \\<Down> Suc (max n (Max I)) \\<Join>\\<^sub>\n                      (I \\<down>< n) @\n                      f n #\n                      f \\<Down> Suc (max n (Max I)) \\<Join>\\<^sub>\n                      (I \\<down>> n) =\n                      f \\<Down> Suc (Max (I \\<down>< n)) \\<Join>\\<^sub>\n                      (I \\<down>< n) @\n                      f n #\n                      f \\<Down> Suc (Max (I \\<down>> n)) \\<Join>\\<^sub>\n                      (I \\<down>> n)", "apply simp"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>finite I; I \\<noteq> {}; I \\<down>> n = {};\n     I \\<down>< n \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> min (max n (Max I)) (Max (I \\<down>< n)) =\n                      Max (I \\<down>< n)\n 2. \\<lbrakk>finite I; I \\<noteq> {}; finite (I \\<down>> n);\n     I \\<down>> n \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> f \\<Down> Suc (max n (Max I)) \\<Join>\\<^sub>\n                      (I \\<down>< n) @\n                      f n #\n                      f \\<Down> Suc (max n (Max I)) \\<Join>\\<^sub>\n                      (I \\<down>> n) =\n                      f \\<Down> Suc (Max (I \\<down>< n)) \\<Join>\\<^sub>\n                      (I \\<down>< n) @\n                      f n #\n                      f \\<Down> Suc (Max (I \\<down>> n)) \\<Join>\\<^sub>\n                      (I \\<down>> n)", "apply (rule min_eqR, rule max.coboundedI1, rule less_imp_le)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>finite I; I \\<noteq> {}; I \\<down>> n = {};\n     I \\<down>< n \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> Max (I \\<down>< n) < n\n 2. \\<lbrakk>finite I; I \\<noteq> {}; finite (I \\<down>> n);\n     I \\<down>> n \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> f \\<Down> Suc (max n (Max I)) \\<Join>\\<^sub>\n                      (I \\<down>< n) @\n                      f n #\n                      f \\<Down> Suc (max n (Max I)) \\<Join>\\<^sub>\n                      (I \\<down>> n) =\n                      f \\<Down> Suc (Max (I \\<down>< n)) \\<Join>\\<^sub>\n                      (I \\<down>< n) @\n                      f n #\n                      f \\<Down> Suc (Max (I \\<down>> n)) \\<Join>\\<^sub>\n                      (I \\<down>> n)", "apply (simp add: nat_cut_less_Max_less)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite I; I \\<noteq> {}; finite (I \\<down>> n);\n     I \\<down>> n \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> f \\<Down> Suc (max n (Max I)) \\<Join>\\<^sub>\n                      (I \\<down>< n) @\n                      f n #\n                      f \\<Down> Suc (max n (Max I)) \\<Join>\\<^sub>\n                      (I \\<down>> n) =\n                      f \\<Down> Suc (Max (I \\<down>< n)) \\<Join>\\<^sub>\n                      (I \\<down>< n) @\n                      f n #\n                      f \\<Down> Suc (Max (I \\<down>> n)) \\<Join>\\<^sub>\n                      (I \\<down>> n)", "apply (simp add: cut_greater_Max_eq)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite I; I \\<noteq> {}; finite (I \\<down>> n);\n     I \\<down>> n \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> f \\<Down> Suc (max n (Max I)) \\<Join>\\<^sub>\n                      (I \\<down>< n) @\n                      f n #\n                      f \\<Down> Suc (max n (Max I)) \\<Join>\\<^sub>\n                      (I \\<down>> n) =\n                      f \\<Down> Suc (Max (I \\<down>< n)) \\<Join>\\<^sub>\n                      (I \\<down>< n) @\n                      f n #\n                      f \\<Down> Suc (Max I) \\<Join>\\<^sub> (I \\<down>> n)", "apply (subgoal_tac \"n < Max I\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>finite I; I \\<noteq> {}; finite (I \\<down>> n);\n     I \\<down>> n \\<noteq> {}; n < Max I\\<rbrakk>\n    \\<Longrightarrow> f \\<Down> Suc (max n (Max I)) \\<Join>\\<^sub>\n                      (I \\<down>< n) @\n                      f n #\n                      f \\<Down> Suc (max n (Max I)) \\<Join>\\<^sub>\n                      (I \\<down>> n) =\n                      f \\<Down> Suc (Max (I \\<down>< n)) \\<Join>\\<^sub>\n                      (I \\<down>< n) @\n                      f n #\n                      f \\<Down> Suc (Max I) \\<Join>\\<^sub> (I \\<down>> n)\n 2. \\<lbrakk>finite I; I \\<noteq> {}; finite (I \\<down>> n);\n     I \\<down>> n \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> n < Max I", "prefer 2"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>finite I; I \\<noteq> {}; finite (I \\<down>> n);\n     I \\<down>> n \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> n < Max I\n 2. \\<lbrakk>finite I; I \\<noteq> {}; finite (I \\<down>> n);\n     I \\<down>> n \\<noteq> {}; n < Max I\\<rbrakk>\n    \\<Longrightarrow> f \\<Down> Suc (max n (Max I)) \\<Join>\\<^sub>\n                      (I \\<down>< n) @\n                      f n #\n                      f \\<Down> Suc (max n (Max I)) \\<Join>\\<^sub>\n                      (I \\<down>> n) =\n                      f \\<Down> Suc (Max (I \\<down>< n)) \\<Join>\\<^sub>\n                      (I \\<down>< n) @\n                      f n #\n                      f \\<Down> Suc (Max I) \\<Join>\\<^sub> (I \\<down>> n)", "apply (rule ccontr)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>finite I; I \\<noteq> {}; finite (I \\<down>> n);\n     I \\<down>> n \\<noteq> {}; \\<not> n < Max I\\<rbrakk>\n    \\<Longrightarrow> False\n 2. \\<lbrakk>finite I; I \\<noteq> {}; finite (I \\<down>> n);\n     I \\<down>> n \\<noteq> {}; n < Max I\\<rbrakk>\n    \\<Longrightarrow> f \\<Down> Suc (max n (Max I)) \\<Join>\\<^sub>\n                      (I \\<down>< n) @\n                      f n #\n                      f \\<Down> Suc (max n (Max I)) \\<Join>\\<^sub>\n                      (I \\<down>> n) =\n                      f \\<Down> Suc (Max (I \\<down>< n)) \\<Join>\\<^sub>\n                      (I \\<down>< n) @\n                      f n #\n                      f \\<Down> Suc (Max I) \\<Join>\\<^sub> (I \\<down>> n)", "apply (simp add: linorder_not_less cut_greater_Max_empty)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite I; I \\<noteq> {}; finite (I \\<down>> n);\n     I \\<down>> n \\<noteq> {}; n < Max I\\<rbrakk>\n    \\<Longrightarrow> f \\<Down> Suc (max n (Max I)) \\<Join>\\<^sub>\n                      (I \\<down>< n) @\n                      f n #\n                      f \\<Down> Suc (max n (Max I)) \\<Join>\\<^sub>\n                      (I \\<down>> n) =\n                      f \\<Down> Suc (Max (I \\<down>< n)) \\<Join>\\<^sub>\n                      (I \\<down>< n) @\n                      f n #\n                      f \\<Down> Suc (Max I) \\<Join>\\<^sub> (I \\<down>> n)", "apply (simp add: max_eqR[OF less_imp_le])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite I; I \\<noteq> {}; finite (I \\<down>> n);\n     I \\<down>> n \\<noteq> {}; n < Max I\\<rbrakk>\n    \\<Longrightarrow> f \\<Down> Suc (Max I) \\<Join>\\<^sub> (I \\<down>< n) =\n                      f \\<Down> Suc (Max (I \\<down>< n)) \\<Join>\\<^sub>\n                      (I \\<down>< n)", "apply (case_tac \"I \\<down>< n = {}\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>finite I; I \\<noteq> {}; finite (I \\<down>> n);\n     I \\<down>> n \\<noteq> {}; n < Max I; I \\<down>< n = {}\\<rbrakk>\n    \\<Longrightarrow> f \\<Down> Suc (Max I) \\<Join>\\<^sub> (I \\<down>< n) =\n                      f \\<Down> Suc (Max (I \\<down>< n)) \\<Join>\\<^sub>\n                      (I \\<down>< n)\n 2. \\<lbrakk>finite I; I \\<noteq> {}; finite (I \\<down>> n);\n     I \\<down>> n \\<noteq> {}; n < Max I; I \\<down>< n \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> f \\<Down> Suc (Max I) \\<Join>\\<^sub> (I \\<down>< n) =\n                      f \\<Down> Suc (Max (I \\<down>< n)) \\<Join>\\<^sub>\n                      (I \\<down>< n)", "apply (simp add: f_join_empty)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite I; I \\<noteq> {}; finite (I \\<down>> n);\n     I \\<down>> n \\<noteq> {}; n < Max I; I \\<down>< n \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> f \\<Down> Suc (Max I) \\<Join>\\<^sub> (I \\<down>< n) =\n                      f \\<Down> Suc (Max (I \\<down>< n)) \\<Join>\\<^sub>\n                      (I \\<down>< n)", "apply (rule take_Suc_Max_eq_imp_f_join_eq[OF nat_cut_less_finite])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite I; I \\<noteq> {}; finite (I \\<down>> n);\n     I \\<down>> n \\<noteq> {}; n < Max I; I \\<down>< n \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> f \\<Down> Suc (Max I) \\<down>\n                      Suc (Max (I \\<down>< n)) =\n                      f \\<Down> Suc (Max (I \\<down>< n)) \\<down>\n                      Suc (Max (I \\<down>< n))", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite I; I \\<noteq> {}; finite (I \\<down>> n);\n     I \\<down>> n \\<noteq> {}; n < Max I; I \\<down>< n \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> f \\<Down> Suc (min (Max I) (Max (I \\<down>< n))) =\n                      f \\<Down> Suc (Max (I \\<down>< n))", "apply (rule arg_cong[where f=\"\\<lambda>x. f \\<Down> x\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite I; I \\<noteq> {}; finite (I \\<down>> n);\n     I \\<down>> n \\<noteq> {}; n < Max I; I \\<down>< n \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> Suc (min (Max I) (Max (I \\<down>< n))) =\n                      Suc (Max (I \\<down>< n))", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite I; I \\<noteq> {}; finite (I \\<down>> n);\n     I \\<down>> n \\<noteq> {}; n < Max I; I \\<down>< n \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> min (Max I) (Max (I \\<down>< n)) = Max (I \\<down>< n)", "apply (rule min_eqR)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite I; I \\<noteq> {}; finite (I \\<down>> n);\n     I \\<down>> n \\<noteq> {}; n < Max I; I \\<down>< n \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> Max (I \\<down>< n) \\<le> Max I", "apply (blast intro: Max_subset)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma take_i_f_join_eq1: \"\n  n < card I \\<Longrightarrow> f \\<Join>\\<^bsub>i-f\\<^esub> I \\<down> n = f \\<Join>\\<^bsub>i-f\\<^esub> (I \\<down>< (I \\<rightarrow> n))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. n < card I \\<Longrightarrow>\n    f \\<Join>\\<^sub> I \\<down> n =\n    f \\<Join>\\<^sub> (I \\<down>< (I \\<rightarrow> n))", "apply (frule card_ge_0_finite[OF gr_implies_gr0])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>n < card I; finite I\\<rbrakk>\n    \\<Longrightarrow> f \\<Join>\\<^sub> I \\<down> n =\n                      f \\<Join>\\<^sub> (I \\<down>< (I \\<rightarrow> n))", "apply (case_tac \"I = {}\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>n < card I; finite I; I = {}\\<rbrakk>\n    \\<Longrightarrow> f \\<Join>\\<^sub> I \\<down> n =\n                      f \\<Join>\\<^sub> (I \\<down>< (I \\<rightarrow> n))\n 2. \\<lbrakk>n < card I; finite I; I \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> f \\<Join>\\<^sub> I \\<down> n =\n                      f \\<Join>\\<^sub> (I \\<down>< (I \\<rightarrow> n))", "apply (simp add: cut_less_empty i_f_join_empty)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>n < card I; finite I; I \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> f \\<Join>\\<^sub> I \\<down> n =\n                      f \\<Join>\\<^sub> (I \\<down>< (I \\<rightarrow> n))", "apply (subgoal_tac \"n < card (I \\<down>< Suc (Max I))\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>n < card I; finite I; I \\<noteq> {};\n     n < card (I \\<down>< Suc (Max I))\\<rbrakk>\n    \\<Longrightarrow> f \\<Join>\\<^sub> I \\<down> n =\n                      f \\<Join>\\<^sub> (I \\<down>< (I \\<rightarrow> n))\n 2. \\<lbrakk>n < card I; finite I; I \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> n < card (I \\<down>< Suc (Max I))", "prefer 2"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>n < card I; finite I; I \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> n < card (I \\<down>< Suc (Max I))\n 2. \\<lbrakk>n < card I; finite I; I \\<noteq> {};\n     n < card (I \\<down>< Suc (Max I))\\<rbrakk>\n    \\<Longrightarrow> f \\<Join>\\<^sub> I \\<down> n =\n                      f \\<Join>\\<^sub> (I \\<down>< (I \\<rightarrow> n))", "apply (simp add: cut_less_Max_all)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>n < card I; finite I; I \\<noteq> {};\n     n < card (I \\<down>< Suc (Max I))\\<rbrakk>\n    \\<Longrightarrow> f \\<Join>\\<^sub> I \\<down> n =\n                      f \\<Join>\\<^sub> (I \\<down>< (I \\<rightarrow> n))", "apply (simp add: i_f_join_def take_f_join_eq1)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>n < card I; finite I; I \\<noteq> {};\n     n < card (I \\<down>< Suc (Max I))\\<rbrakk>\n    \\<Longrightarrow> f \\<Down> Suc (Max I) \\<Join>\\<^sub>\n                      (I \\<down>< (I \\<rightarrow> n)) =\n                      f \\<Down>\n                      Suc (Max (I \\<down><\n                                (I \\<rightarrow> n))) \\<Join>\\<^sub>\n                      (I \\<down>< (I \\<rightarrow> n))", "apply (case_tac \"I \\<down>< (I \\<rightarrow> n) = {}\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>n < card I; finite I; I \\<noteq> {};\n     n < card (I \\<down>< Suc (Max I));\n     I \\<down>< (I \\<rightarrow> n) = {}\\<rbrakk>\n    \\<Longrightarrow> f \\<Down> Suc (Max I) \\<Join>\\<^sub>\n                      (I \\<down>< (I \\<rightarrow> n)) =\n                      f \\<Down>\n                      Suc (Max (I \\<down><\n                                (I \\<rightarrow> n))) \\<Join>\\<^sub>\n                      (I \\<down>< (I \\<rightarrow> n))\n 2. \\<lbrakk>n < card I; finite I; I \\<noteq> {};\n     n < card (I \\<down>< Suc (Max I));\n     I \\<down>< (I \\<rightarrow> n) \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> f \\<Down> Suc (Max I) \\<Join>\\<^sub>\n                      (I \\<down>< (I \\<rightarrow> n)) =\n                      f \\<Down>\n                      Suc (Max (I \\<down><\n                                (I \\<rightarrow> n))) \\<Join>\\<^sub>\n                      (I \\<down>< (I \\<rightarrow> n))", "apply (simp add: f_join_empty)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>n < card I; finite I; I \\<noteq> {};\n     n < card (I \\<down>< Suc (Max I));\n     I \\<down>< (I \\<rightarrow> n) \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> f \\<Down> Suc (Max I) \\<Join>\\<^sub>\n                      (I \\<down>< (I \\<rightarrow> n)) =\n                      f \\<Down>\n                      Suc (Max (I \\<down><\n                                (I \\<rightarrow> n))) \\<Join>\\<^sub>\n                      (I \\<down>< (I \\<rightarrow> n))", "apply (rule take_Suc_Max_eq_imp_f_join_eq[OF nat_cut_less_finite])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>n < card I; finite I; I \\<noteq> {};\n     n < card (I \\<down>< Suc (Max I));\n     I \\<down>< (I \\<rightarrow> n) \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> f \\<Down> Suc (Max I) \\<down>\n                      Suc (Max (I \\<down>< (I \\<rightarrow> n))) =\n                      f \\<Down>\n                      Suc (Max (I \\<down>< (I \\<rightarrow> n))) \\<down>\n                      Suc (Max (I \\<down>< (I \\<rightarrow> n)))", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>n < card I; finite I; I \\<noteq> {};\n     n < card (I \\<down>< Suc (Max I));\n     I \\<down>< (I \\<rightarrow> n) \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> f \\<Down>\n                      Suc (min (Max I)\n                            (Max (I \\<down>< (I \\<rightarrow> n)))) =\n                      f \\<Down> Suc (Max (I \\<down>< (I \\<rightarrow> n)))", "apply (rule arg_cong[where f=\"\\<lambda>x. f \\<Down> x\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>n < card I; finite I; I \\<noteq> {};\n     n < card (I \\<down>< Suc (Max I));\n     I \\<down>< (I \\<rightarrow> n) \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> Suc (min (Max I)\n                            (Max (I \\<down>< (I \\<rightarrow> n)))) =\n                      Suc (Max (I \\<down>< (I \\<rightarrow> n)))", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>n < card I; finite I; I \\<noteq> {};\n     n < card (I \\<down>< Suc (Max I));\n     I \\<down>< (I \\<rightarrow> n) \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> min (Max I) (Max (I \\<down>< (I \\<rightarrow> n))) =\n                      Max (I \\<down>< (I \\<rightarrow> n))", "apply (rule min_eqR)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>n < card I; finite I; I \\<noteq> {};\n     n < card (I \\<down>< Suc (Max I));\n     I \\<down>< (I \\<rightarrow> n) \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> Max (I \\<down>< (I \\<rightarrow> n)) \\<le> Max I", "apply (rule order_trans[OF less_imp_le[OF cut_less_Max_less]])"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>n < card I; finite I; I \\<noteq> {};\n     n < card (I \\<down>< Suc (Max I));\n     I \\<down>< (I \\<rightarrow> n) \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> finite (I \\<down>< (I \\<rightarrow> n))\n 2. \\<lbrakk>n < card I; finite I; I \\<noteq> {};\n     n < card (I \\<down>< Suc (Max I));\n     I \\<down>< (I \\<rightarrow> n) \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> I \\<down>< (I \\<rightarrow> n) \\<noteq> {}\n 3. \\<lbrakk>n < card I; finite I; I \\<noteq> {};\n     n < card (I \\<down>< Suc (Max I));\n     I \\<down>< (I \\<rightarrow> n) \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> I \\<rightarrow> n \\<le> Max I", "apply (simp add: nat_cut_less_finite inext_nth_closed)+"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma take_i_f_join_eq2: \"\n  \\<lbrakk> finite I; card I \\<le> n \\<rbrakk> \\<Longrightarrow> f \\<Join>\\<^bsub>i-f\\<^esub> I \\<down> n = f \\<Join>\\<^bsub>i-f\\<^esub> I\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite I; card I \\<le> n\\<rbrakk>\n    \\<Longrightarrow> f \\<Join>\\<^sub> I \\<down> n = f \\<Join>\\<^sub> I", "apply (case_tac \"I = {}\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>finite I; card I \\<le> n; I = {}\\<rbrakk>\n    \\<Longrightarrow> f \\<Join>\\<^sub> I \\<down> n = f \\<Join>\\<^sub> I\n 2. \\<lbrakk>finite I; card I \\<le> n; I \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> f \\<Join>\\<^sub> I \\<down> n = f \\<Join>\\<^sub> I", "apply (simp add: cut_less_empty i_f_join_empty)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite I; card I \\<le> n; I \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> f \\<Join>\\<^sub> I \\<down> n = f \\<Join>\\<^sub> I", "apply (simp add: i_f_join_def take_f_join_eq2 cut_less_Max_all)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma take_i_f_join_if: \"\n  finite I \\<Longrightarrow>\n  f \\<Join>\\<^bsub>i-f\\<^esub> I \\<down> n = (if n < card I then f \\<Join>\\<^bsub>i-f\\<^esub> (I \\<down>< (I \\<rightarrow> n)) else f \\<Join>\\<^bsub>i-f\\<^esub> I)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite I \\<Longrightarrow>\n    f \\<Join>\\<^sub> I \\<down> n =\n    (if n < card I then f \\<Join>\\<^sub> (I \\<down>< (I \\<rightarrow> n))\n     else f \\<Join>\\<^sub> I)", "by (simp add: take_i_f_join_eq1 take_i_f_join_eq2)"], ["", "lemma drop_i_f_join_eq1: \"\n  n < card I \\<Longrightarrow> f \\<Join>\\<^bsub>i-f\\<^esub> I \\<up> n = f \\<Join>\\<^bsub>i-f\\<^esub> (I \\<down>\\<ge> (I \\<rightarrow> n))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. n < card I \\<Longrightarrow>\n    f \\<Join>\\<^sub> I \\<up> n =\n    f \\<Join>\\<^sub> (I \\<down>\\<ge> (I \\<rightarrow> n))", "apply (frule card_ge_0_finite[OF gr_implies_gr0])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>n < card I; finite I\\<rbrakk>\n    \\<Longrightarrow> f \\<Join>\\<^sub> I \\<up> n =\n                      f \\<Join>\\<^sub> (I \\<down>\\<ge> (I \\<rightarrow> n))", "apply (case_tac \"I = {}\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>n < card I; finite I; I = {}\\<rbrakk>\n    \\<Longrightarrow> f \\<Join>\\<^sub> I \\<up> n =\n                      f \\<Join>\\<^sub> (I \\<down>\\<ge> (I \\<rightarrow> n))\n 2. \\<lbrakk>n < card I; finite I; I \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> f \\<Join>\\<^sub> I \\<up> n =\n                      f \\<Join>\\<^sub> (I \\<down>\\<ge> (I \\<rightarrow> n))", "apply (simp add: cut_ge_empty i_f_join_empty)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>n < card I; finite I; I \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> f \\<Join>\\<^sub> I \\<up> n =\n                      f \\<Join>\\<^sub> (I \\<down>\\<ge> (I \\<rightarrow> n))", "apply (subgoal_tac \"n < card (I \\<down>< Suc (Max I))\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>n < card I; finite I; I \\<noteq> {};\n     n < card (I \\<down>< Suc (Max I))\\<rbrakk>\n    \\<Longrightarrow> f \\<Join>\\<^sub> I \\<up> n =\n                      f \\<Join>\\<^sub> (I \\<down>\\<ge> (I \\<rightarrow> n))\n 2. \\<lbrakk>n < card I; finite I; I \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> n < card (I \\<down>< Suc (Max I))", "prefer 2"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>n < card I; finite I; I \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> n < card (I \\<down>< Suc (Max I))\n 2. \\<lbrakk>n < card I; finite I; I \\<noteq> {};\n     n < card (I \\<down>< Suc (Max I))\\<rbrakk>\n    \\<Longrightarrow> f \\<Join>\\<^sub> I \\<up> n =\n                      f \\<Join>\\<^sub> (I \\<down>\\<ge> (I \\<rightarrow> n))", "apply (simp add: cut_less_Max_all)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>n < card I; finite I; I \\<noteq> {};\n     n < card (I \\<down>< Suc (Max I))\\<rbrakk>\n    \\<Longrightarrow> f \\<Join>\\<^sub> I \\<up> n =\n                      f \\<Join>\\<^sub> (I \\<down>\\<ge> (I \\<rightarrow> n))", "apply (simp add: i_f_join_def drop_f_join_eq1)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>n < card I; finite I; I \\<noteq> {};\n     n < card (I \\<down>< Suc (Max I))\\<rbrakk>\n    \\<Longrightarrow> f \\<Down> Suc (Max I) \\<Join>\\<^sub>\n                      (I \\<down>\\<ge> (I \\<rightarrow> n)) =\n                      f \\<Down>\n                      Suc (Max (I \\<down>\\<ge>\n                                (I \\<rightarrow> n))) \\<Join>\\<^sub>\n                      (I \\<down>\\<ge> (I \\<rightarrow> n))", "apply (subgoal_tac \"I \\<down>\\<ge> (I \\<rightarrow> n) \\<noteq> {}\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>n < card I; finite I; I \\<noteq> {};\n     n < card (I \\<down>< Suc (Max I));\n     I \\<down>\\<ge> (I \\<rightarrow> n) \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> f \\<Down> Suc (Max I) \\<Join>\\<^sub>\n                      (I \\<down>\\<ge> (I \\<rightarrow> n)) =\n                      f \\<Down>\n                      Suc (Max (I \\<down>\\<ge>\n                                (I \\<rightarrow> n))) \\<Join>\\<^sub>\n                      (I \\<down>\\<ge> (I \\<rightarrow> n))\n 2. \\<lbrakk>n < card I; finite I; I \\<noteq> {};\n     n < card (I \\<down>< Suc (Max I))\\<rbrakk>\n    \\<Longrightarrow> I \\<down>\\<ge> (I \\<rightarrow> n) \\<noteq> {}", "prefer 2"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>n < card I; finite I; I \\<noteq> {};\n     n < card (I \\<down>< Suc (Max I))\\<rbrakk>\n    \\<Longrightarrow> I \\<down>\\<ge> (I \\<rightarrow> n) \\<noteq> {}\n 2. \\<lbrakk>n < card I; finite I; I \\<noteq> {};\n     n < card (I \\<down>< Suc (Max I));\n     I \\<down>\\<ge> (I \\<rightarrow> n) \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> f \\<Down> Suc (Max I) \\<Join>\\<^sub>\n                      (I \\<down>\\<ge> (I \\<rightarrow> n)) =\n                      f \\<Down>\n                      Suc (Max (I \\<down>\\<ge>\n                                (I \\<rightarrow> n))) \\<Join>\\<^sub>\n                      (I \\<down>\\<ge> (I \\<rightarrow> n))", "apply (rule in_imp_not_empty[of \"I \\<rightarrow> n\"])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>n < card I; finite I; I \\<noteq> {};\n     n < card (I \\<down>< Suc (Max I))\\<rbrakk>\n    \\<Longrightarrow> I \\<rightarrow> n\n                      \\<in> I \\<down>\\<ge> (I \\<rightarrow> n)\n 2. \\<lbrakk>n < card I; finite I; I \\<noteq> {};\n     n < card (I \\<down>< Suc (Max I));\n     I \\<down>\\<ge> (I \\<rightarrow> n) \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> f \\<Down> Suc (Max I) \\<Join>\\<^sub>\n                      (I \\<down>\\<ge> (I \\<rightarrow> n)) =\n                      f \\<Down>\n                      Suc (Max (I \\<down>\\<ge>\n                                (I \\<rightarrow> n))) \\<Join>\\<^sub>\n                      (I \\<down>\\<ge> (I \\<rightarrow> n))", "apply (simp add: cut_ge_mem_iff inext_nth_closed)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>n < card I; finite I; I \\<noteq> {};\n     n < card (I \\<down>< Suc (Max I));\n     I \\<down>\\<ge> (I \\<rightarrow> n) \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> f \\<Down> Suc (Max I) \\<Join>\\<^sub>\n                      (I \\<down>\\<ge> (I \\<rightarrow> n)) =\n                      f \\<Down>\n                      Suc (Max (I \\<down>\\<ge>\n                                (I \\<rightarrow> n))) \\<Join>\\<^sub>\n                      (I \\<down>\\<ge> (I \\<rightarrow> n))", "apply (rule take_Suc_Max_eq_imp_f_join_eq)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>n < card I; finite I; I \\<noteq> {};\n     n < card (I \\<down>< Suc (Max I));\n     I \\<down>\\<ge> (I \\<rightarrow> n) \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> finite (I \\<down>\\<ge> (I \\<rightarrow> n))\n 2. \\<lbrakk>n < card I; finite I; I \\<noteq> {};\n     n < card (I \\<down>< Suc (Max I));\n     I \\<down>\\<ge> (I \\<rightarrow> n) \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> f \\<Down> Suc (Max I) \\<down>\n                      Suc (Max (I \\<down>\\<ge> (I \\<rightarrow> n))) =\n                      f \\<Down>\n                      Suc (Max (I \\<down>\\<ge> (I \\<rightarrow> n))) \\<down>\n                      Suc (Max (I \\<down>\\<ge> (I \\<rightarrow> n)))", "apply (rule cut_ge_finite, assumption)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>n < card I; finite I; I \\<noteq> {};\n     n < card (I \\<down>< Suc (Max I));\n     I \\<down>\\<ge> (I \\<rightarrow> n) \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> f \\<Down> Suc (Max I) \\<down>\n                      Suc (Max (I \\<down>\\<ge> (I \\<rightarrow> n))) =\n                      f \\<Down>\n                      Suc (Max (I \\<down>\\<ge> (I \\<rightarrow> n))) \\<down>\n                      Suc (Max (I \\<down>\\<ge> (I \\<rightarrow> n)))", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>n < card I; finite I; I \\<noteq> {};\n     n < card (I \\<down>< Suc (Max I));\n     I \\<down>\\<ge> (I \\<rightarrow> n) \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> f \\<Down>\n                      Suc (min (Max I)\n                            (Max (I \\<down>\\<ge> (I \\<rightarrow> n)))) =\n                      f \\<Down>\n                      Suc (Max (I \\<down>\\<ge> (I \\<rightarrow> n)))", "apply (rule arg_cong[where f=\"\\<lambda>x. f \\<Down> x\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>n < card I; finite I; I \\<noteq> {};\n     n < card (I \\<down>< Suc (Max I));\n     I \\<down>\\<ge> (I \\<rightarrow> n) \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> Suc (min (Max I)\n                            (Max (I \\<down>\\<ge> (I \\<rightarrow> n)))) =\n                      Suc (Max (I \\<down>\\<ge> (I \\<rightarrow> n)))", "apply (simp add: min_eqR cut_ge_Max_eq)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma drop_i_f_join_eq2: \"\n  \\<lbrakk> finite I; card I \\<le> n \\<rbrakk> \\<Longrightarrow> f \\<Join>\\<^bsub>i-f\\<^esub> I \\<up> n = []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite I; card I \\<le> n\\<rbrakk>\n    \\<Longrightarrow> f \\<Join>\\<^sub> I \\<up> n = []", "by (simp add: i_f_join_length)"], ["", "lemma drop_i_f_join_if: \"\n  finite I \\<Longrightarrow>\n  f \\<Join>\\<^bsub>i-f\\<^esub> I \\<up> n = (if n < card I then f \\<Join>\\<^bsub>i-f\\<^esub> (I \\<down>\\<ge> (I \\<rightarrow> n)) else [])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite I \\<Longrightarrow>\n    f \\<Join>\\<^sub> I \\<up> n =\n    (if n < card I\n     then f \\<Join>\\<^sub> (I \\<down>\\<ge> (I \\<rightarrow> n)) else [])", "by (simp add: drop_i_f_join_eq1 drop_i_f_join_eq2)"], ["", "lemma i_f_join_i_drop: \"\n  finite I \\<Longrightarrow> f \\<Up> n \\<Join>\\<^bsub>i-f\\<^esub> I = f \\<Join>\\<^bsub>i-f\\<^esub> (I \\<oplus> n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite I \\<Longrightarrow>\n    f \\<Up> n \\<Join>\\<^sub> I = f \\<Join>\\<^sub> (I \\<oplus> n)", "apply (case_tac \"I = {}\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>finite I; I = {}\\<rbrakk>\n    \\<Longrightarrow> f \\<Up> n \\<Join>\\<^sub> I =\n                      f \\<Join>\\<^sub> (I \\<oplus> n)\n 2. \\<lbrakk>finite I; I \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> f \\<Up> n \\<Join>\\<^sub> I =\n                      f \\<Join>\\<^sub> (I \\<oplus> n)", "apply (simp add: iT_Plus_empty i_f_join_empty)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite I; I \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> f \\<Up> n \\<Join>\\<^sub> I =\n                      f \\<Join>\\<^sub> (I \\<oplus> n)", "apply (simp add: i_f_join_def iT_Plus_Max)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite I; I \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> f \\<Up> n \\<Down> Suc (Max I) \\<Join>\\<^sub> I =\n                      f \\<Down> Suc (Max I + n) \\<Join>\\<^sub>\n                      (I \\<oplus> n)", "apply (simp add: i_take_i_drop f_join_drop)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma i_take_Suc_Max_eq_imp_i_f_join_eq: \"\n  f \\<Down> Suc (Max I) = g \\<Down> Suc (Max I) \\<Longrightarrow> f \\<Join>\\<^bsub>i-f\\<^esub> I = g \\<Join>\\<^bsub>i-f\\<^esub> I\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f \\<Down> Suc (Max I) = g \\<Down> Suc (Max I) \\<Longrightarrow>\n    f \\<Join>\\<^sub> I = g \\<Join>\\<^sub> I", "by (simp add: i_f_join_def)"], ["", "lemma i_take_i_join_eq_i_f_join: \"\n  infinite I \\<Longrightarrow> f \\<Join>\\<^sub>i I \\<Down> n = f \\<Join>\\<^bsub>i-f\\<^esub> (I \\<down>< (I \\<rightarrow> n))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. infinite I \\<Longrightarrow>\n    f \\<Join>\\<^sub> I \\<Down> n =\n    f \\<Join>\\<^sub> (I \\<down>< (I \\<rightarrow> n))", "apply (frule infinite_imp_nonempty)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>infinite I; I \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> f \\<Join>\\<^sub> I \\<Down> n =\n                      f \\<Join>\\<^sub> (I \\<down>< (I \\<rightarrow> n))", "apply (case_tac \"n = 0\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>infinite I; I \\<noteq> {}; n = 0\\<rbrakk>\n    \\<Longrightarrow> f \\<Join>\\<^sub> I \\<Down> n =\n                      f \\<Join>\\<^sub> (I \\<down>< (I \\<rightarrow> n))\n 2. \\<lbrakk>infinite I; I \\<noteq> {}; n \\<noteq> 0\\<rbrakk>\n    \\<Longrightarrow> f \\<Join>\\<^sub> I \\<Down> n =\n                      f \\<Join>\\<^sub> (I \\<down>< (I \\<rightarrow> n))", "apply (simp add: cut_less_Min_empty i_f_join_empty)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>infinite I; I \\<noteq> {}; n \\<noteq> 0\\<rbrakk>\n    \\<Longrightarrow> f \\<Join>\\<^sub> I \\<Down> n =\n                      f \\<Join>\\<^sub> (I \\<down>< (I \\<rightarrow> n))", "apply (frule inext_nth_gr_Min_conv_infinite[THEN iffD2], simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>infinite I; I \\<noteq> {}; n \\<noteq> 0;\n     iMin I < I \\<rightarrow> n\\<rbrakk>\n    \\<Longrightarrow> f \\<Join>\\<^sub> I \\<Down> n =\n                      f \\<Join>\\<^sub> (I \\<down>< (I \\<rightarrow> n))", "apply (simp add: i_take_i_join i_f_join_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>infinite I; I \\<noteq> {}; 0 < n;\n     iMin I < I \\<rightarrow> n\\<rbrakk>\n    \\<Longrightarrow> f \\<Down> (I \\<rightarrow> n) \\<Join>\\<^sub> I =\n                      f \\<Down>\n                      Suc (Max (I \\<down><\n                                (I \\<rightarrow> n))) \\<Join>\\<^sub>\n                      (I \\<down>< (I \\<rightarrow> n))", "apply (subgoal_tac \"Suc (Max (I \\<down>< (I \\<rightarrow> n))) \\<le> I \\<rightarrow> n\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>infinite I; I \\<noteq> {}; 0 < n; iMin I < I \\<rightarrow> n;\n     Suc (Max (I \\<down>< (I \\<rightarrow> n)))\n     \\<le> I \\<rightarrow> n\\<rbrakk>\n    \\<Longrightarrow> f \\<Down> (I \\<rightarrow> n) \\<Join>\\<^sub> I =\n                      f \\<Down>\n                      Suc (Max (I \\<down><\n                                (I \\<rightarrow> n))) \\<Join>\\<^sub>\n                      (I \\<down>< (I \\<rightarrow> n))\n 2. \\<lbrakk>infinite I; I \\<noteq> {}; 0 < n;\n     iMin I < I \\<rightarrow> n\\<rbrakk>\n    \\<Longrightarrow> Suc (Max (I \\<down>< (I \\<rightarrow> n)))\n                      \\<le> I \\<rightarrow> n", "prefer 2"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>infinite I; I \\<noteq> {}; 0 < n;\n     iMin I < I \\<rightarrow> n\\<rbrakk>\n    \\<Longrightarrow> Suc (Max (I \\<down>< (I \\<rightarrow> n)))\n                      \\<le> I \\<rightarrow> n\n 2. \\<lbrakk>infinite I; I \\<noteq> {}; 0 < n; iMin I < I \\<rightarrow> n;\n     Suc (Max (I \\<down>< (I \\<rightarrow> n)))\n     \\<le> I \\<rightarrow> n\\<rbrakk>\n    \\<Longrightarrow> f \\<Down> (I \\<rightarrow> n) \\<Join>\\<^sub> I =\n                      f \\<Down>\n                      Suc (Max (I \\<down><\n                                (I \\<rightarrow> n))) \\<Join>\\<^sub>\n                      (I \\<down>< (I \\<rightarrow> n))", "apply (rule Suc_leI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>infinite I; I \\<noteq> {}; 0 < n;\n     iMin I < I \\<rightarrow> n\\<rbrakk>\n    \\<Longrightarrow> Max (I \\<down>< (I \\<rightarrow> n))\n                      < I \\<rightarrow> n\n 2. \\<lbrakk>infinite I; I \\<noteq> {}; 0 < n; iMin I < I \\<rightarrow> n;\n     Suc (Max (I \\<down>< (I \\<rightarrow> n)))\n     \\<le> I \\<rightarrow> n\\<rbrakk>\n    \\<Longrightarrow> f \\<Down> (I \\<rightarrow> n) \\<Join>\\<^sub> I =\n                      f \\<Down>\n                      Suc (Max (I \\<down><\n                                (I \\<rightarrow> n))) \\<Join>\\<^sub>\n                      (I \\<down>< (I \\<rightarrow> n))", "apply (rule nat_cut_less_Max_less)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>infinite I; I \\<noteq> {}; 0 < n;\n     iMin I < I \\<rightarrow> n\\<rbrakk>\n    \\<Longrightarrow> I \\<down>< (I \\<rightarrow> n) \\<noteq> {}\n 2. \\<lbrakk>infinite I; I \\<noteq> {}; 0 < n; iMin I < I \\<rightarrow> n;\n     Suc (Max (I \\<down>< (I \\<rightarrow> n)))\n     \\<le> I \\<rightarrow> n\\<rbrakk>\n    \\<Longrightarrow> f \\<Down> (I \\<rightarrow> n) \\<Join>\\<^sub> I =\n                      f \\<Down>\n                      Suc (Max (I \\<down><\n                                (I \\<rightarrow> n))) \\<Join>\\<^sub>\n                      (I \\<down>< (I \\<rightarrow> n))", "apply (simp add: cut_less_Min_not_empty)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>infinite I; I \\<noteq> {}; 0 < n; iMin I < I \\<rightarrow> n;\n     Suc (Max (I \\<down>< (I \\<rightarrow> n)))\n     \\<le> I \\<rightarrow> n\\<rbrakk>\n    \\<Longrightarrow> f \\<Down> (I \\<rightarrow> n) \\<Join>\\<^sub> I =\n                      f \\<Down>\n                      Suc (Max (I \\<down><\n                                (I \\<rightarrow> n))) \\<Join>\\<^sub>\n                      (I \\<down>< (I \\<rightarrow> n))", "apply (simp add: f_join_cut_less_eq)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>infinite I; I \\<noteq> {}; 0 < n; iMin I < I \\<rightarrow> n;\n     Suc (Max (I \\<down>< (I \\<rightarrow> n)))\n     \\<le> I \\<rightarrow> n\\<rbrakk>\n    \\<Longrightarrow> f \\<Down> (I \\<rightarrow> n) \\<Join>\\<^sub> I =\n                      f \\<Down>\n                      Suc (Max (I \\<down><\n                                (I \\<rightarrow> n))) \\<Join>\\<^sub>\n                      I", "apply (simp add: i_join_i_take)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>infinite I; I \\<noteq> {}; 0 < n; iMin I < I \\<rightarrow> n;\n     Suc (Max (I \\<down>< (I \\<rightarrow> n)))\n     \\<le> I \\<rightarrow> n\\<rbrakk>\n    \\<Longrightarrow> f \\<Join>\\<^sub> I \\<Down>\n                      card (I \\<down>< (I \\<rightarrow> n)) =\n                      f \\<Join>\\<^sub> I \\<Down>\n                      card\n                       (I \\<down><\n                        Suc (Max (I \\<down>< (I \\<rightarrow> n))))", "apply (rule arg_cong[where f=\"\\<lambda>x. f \\<Join>\\<^sub>i I \\<Down> card x\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>infinite I; I \\<noteq> {}; 0 < n; iMin I < I \\<rightarrow> n;\n     Suc (Max (I \\<down>< (I \\<rightarrow> n)))\n     \\<le> I \\<rightarrow> n\\<rbrakk>\n    \\<Longrightarrow> I \\<down>< (I \\<rightarrow> n) =\n                      I \\<down>< Suc (Max (I \\<down>< (I \\<rightarrow> n)))", "apply (clarsimp simp: gr0_conv_Suc)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>m.\n       \\<lbrakk>infinite I; I \\<noteq> {};\n        iMin I < inext (I \\<rightarrow> m) I;\n        Suc (Max (I \\<down>< inext (I \\<rightarrow> m) I))\n        \\<le> inext (I \\<rightarrow> m) I;\n        n = Suc m\\<rbrakk>\n       \\<Longrightarrow> I \\<down>< inext (I \\<rightarrow> m) I =\n                         I \\<down><\n                         Suc (Max (I \\<down>< inext (I \\<rightarrow> m) I))", "apply (simp add: cut_le_less_inext_conv[OF inext_nth_closed, symmetric])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>m.\n       \\<lbrakk>infinite I; I \\<noteq> {};\n        iMin I < inext (I \\<rightarrow> m) I;\n        Suc (Max (I \\<down>\\<le> (I \\<rightarrow> m)))\n        \\<le> inext (I \\<rightarrow> m) I;\n        n = Suc m\\<rbrakk>\n       \\<Longrightarrow> I \\<down>\\<le> (I \\<rightarrow> m) =\n                         I \\<down><\n                         Suc (Max (I \\<down>\\<le> (I \\<rightarrow> m)))", "apply (simp add: nat_cut_le_less_conv[symmetric])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>m.\n       \\<lbrakk>infinite I; I \\<noteq> {};\n        iMin I < inext (I \\<rightarrow> m) I;\n        Suc (Max (I \\<down>\\<le> (I \\<rightarrow> m)))\n        \\<le> inext (I \\<rightarrow> m) I;\n        n = Suc m\\<rbrakk>\n       \\<Longrightarrow> I \\<down>\\<le> (I \\<rightarrow> m) =\n                         I \\<down>\\<le>\n                         Max (I \\<down>\\<le> (I \\<rightarrow> m))", "apply (rule arg_cong[where f=\"\\<lambda>x. I \\<down>\\<le> x\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>m.\n       \\<lbrakk>infinite I; I \\<noteq> {};\n        iMin I < inext (I \\<rightarrow> m) I;\n        Suc (Max (I \\<down>\\<le> (I \\<rightarrow> m)))\n        \\<le> inext (I \\<rightarrow> m) I;\n        n = Suc m\\<rbrakk>\n       \\<Longrightarrow> I \\<rightarrow> m =\n                         Max (I \\<down>\\<le> (I \\<rightarrow> m))", "apply (rule sym, rule Max_equality[OF _ nat_cut_le_finite])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>m.\n       \\<lbrakk>infinite I; I \\<noteq> {};\n        iMin I < inext (I \\<rightarrow> m) I;\n        Suc (Max (I \\<down>\\<le> (I \\<rightarrow> m)))\n        \\<le> inext (I \\<rightarrow> m) I;\n        n = Suc m\\<rbrakk>\n       \\<Longrightarrow> I \\<rightarrow> m\n                         \\<in> I \\<down>\\<le> (I \\<rightarrow> m)\n 2. \\<And>m x.\n       \\<lbrakk>infinite I; I \\<noteq> {};\n        iMin I < inext (I \\<rightarrow> m) I;\n        Suc (Max (I \\<down>\\<le> (I \\<rightarrow> m)))\n        \\<le> inext (I \\<rightarrow> m) I;\n        n = Suc m; x \\<in> I \\<down>\\<le> (I \\<rightarrow> m)\\<rbrakk>\n       \\<Longrightarrow> x \\<le> I \\<rightarrow> m", "apply (simp add: cut_le_mem_iff inext_nth_closed)+"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "subsubsection \\<open>Results for intervals from \\<open>IL_Interval\\<close>\\<close>"], ["", "lemma f_join_iFROM: \"xs \\<Join>\\<^sub>f [n\\<dots>] = xs \\<up> n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. xs \\<Join>\\<^sub> [n\\<dots>] = xs \\<up> n", "apply (clarsimp simp: list_eq_iff f_join_length iFROM_cut_less iIN_card Suc_diff_Suc)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i.\n       \\<lbrakk>\\<not> length xs \\<le> n; i < length xs - n\\<rbrakk>\n       \\<Longrightarrow> xs \\<Join>\\<^sub> [n\\<dots>] ! i = xs ! (n + i)", "apply (subst f_join_nth2)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>i.\n       \\<lbrakk>\\<not> length xs \\<le> n; i < length xs - n\\<rbrakk>\n       \\<Longrightarrow> i < card ([n\\<dots>] \\<down>< length xs)\n 2. \\<And>i.\n       \\<lbrakk>\\<not> length xs \\<le> n; i < length xs - n\\<rbrakk>\n       \\<Longrightarrow> xs ! ([n\\<dots>] \\<rightarrow> i) = xs ! (n + i)", "apply (simp add: iFROM_cut_less iIN_card)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i.\n       \\<lbrakk>\\<not> length xs \\<le> n; i < length xs - n\\<rbrakk>\n       \\<Longrightarrow> xs ! ([n\\<dots>] \\<rightarrow> i) = xs ! (n + i)", "apply (simp add: iFROM_inext_nth)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma i_join_iFROM: \"f \\<Join>\\<^sub>i [n\\<dots>] = f \\<Up> n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f \\<Join>\\<^sub> [n\\<dots>] = f \\<Up> n", "by (simp add: ilist_eq_iff i_join_nth iFROM_inext_nth)"], ["", "lemma f_join_iIN: \"xs \\<Join>\\<^sub>f [n\\<dots>,d] = xs \\<up> n \\<down> Suc d\""], ["proof (prove)\ngoal (1 subgoal):\n 1. xs \\<Join>\\<^sub> [n\\<dots>,d] = xs \\<up> n \\<down> Suc d", "apply (simp add: list_eq_iff f_join_length iIN_cut_less iIN_card Suc_diff_Suc min_eq)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (length xs \\<le> n + d \\<longrightarrow>\n     \\<not> length xs \\<le> n \\<longrightarrow>\n     (\\<forall>i<length xs - n.\n         xs \\<Join>\\<^sub> [n\\<dots>,d] ! i = xs ! (n + i))) \\<and>\n    (\\<not> length xs \\<le> n + d \\<longrightarrow>\n     (\\<forall>i<Suc d. xs \\<Join>\\<^sub> [n\\<dots>,d] ! i = xs ! (n + i)))", "apply (simp add: f_join_nth2 iIN_cut_less iIN_card iIN_inext_nth)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma i_f_join_iIN: \"f \\<Join>\\<^bsub>i-f\\<^esub> [n\\<dots>,d] = f \\<Up> n \\<Down> Suc d\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f \\<Join>\\<^sub> [n\\<dots>,d] = f \\<Up> n \\<Down> Suc d", "by (simp add: i_f_join_def f_join_iIN iIN_Max i_take_drop)"], ["", "lemma f_join_iTILL: \"xs \\<Join>\\<^sub>f [\\<dots>n] = xs \\<down> (Suc n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. xs \\<Join>\\<^sub> [\\<dots>n] = xs \\<down> Suc n", "by (simp add: iIN_0_iTILL_conv[symmetric] f_join_iIN)"], ["", "lemma i_f_join_iTILL: \"f \\<Join>\\<^bsub>i-f\\<^esub> [\\<dots>n] = f \\<Down> Suc n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f \\<Join>\\<^sub> [\\<dots>n] = f \\<Down> Suc n", "by (simp add: iIN_0_iTILL_conv[symmetric] i_f_join_iIN)"], ["", "lemma f_join_f_expand_iT_Mult: \"\n  0 < k \\<Longrightarrow> xs \\<odot>\\<^sub>f k \\<Join>\\<^sub>f (I \\<otimes> k) = xs \\<Join>\\<^sub>f I\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < k \\<Longrightarrow>\n    xs \\<odot> k \\<Join>\\<^sub> (I \\<otimes> k) = xs \\<Join>\\<^sub> I", "apply (case_tac \"I = {}\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>0 < k; I = {}\\<rbrakk>\n    \\<Longrightarrow> xs \\<odot> k \\<Join>\\<^sub> (I \\<otimes> k) =\n                      xs \\<Join>\\<^sub> I\n 2. \\<lbrakk>0 < k; I \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> xs \\<odot> k \\<Join>\\<^sub> (I \\<otimes> k) =\n                      xs \\<Join>\\<^sub> I", "apply (simp add: iT_Mult_empty f_join_empty)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>0 < k; I \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> xs \\<odot> k \\<Join>\\<^sub> (I \\<otimes> k) =\n                      xs \\<Join>\\<^sub> I", "apply (simp add: list_eq_iff f_join_length)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>0 < k; I \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> card ((I \\<otimes> k) \\<down>< (length xs * k)) =\n                      card (I \\<down>< length xs) \\<and>\n                      (\\<forall>i<card\n                                   ((I \\<otimes> k) \\<down><\n                                    (length xs * k)).\n                          xs \\<odot> k \\<Join>\\<^sub> (I \\<otimes> k) ! i =\n                          xs \\<Join>\\<^sub> I ! i)", "apply (clarsimp simp: iT_Mult_cut_less2 iT_Mult_card)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i.\n       \\<lbrakk>0 < k; I \\<noteq> {};\n        i < card (I \\<down>< length xs)\\<rbrakk>\n       \\<Longrightarrow> xs \\<odot> k \\<Join>\\<^sub> (I \\<otimes> k) ! i =\n                         xs \\<Join>\\<^sub> I ! i", "apply (simp add: f_join_nth2 iT_Mult_cut_less2 iT_Mult_card)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i.\n       \\<lbrakk>0 < k; I \\<noteq> {};\n        i < card (I \\<down>< length xs)\\<rbrakk>\n       \\<Longrightarrow> xs \\<odot> k ! ((I \\<otimes> k) \\<rightarrow> i) =\n                         xs ! (I \\<rightarrow> i)", "apply (drule less_card_cut_less_imp_inext_nth_less)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i.\n       \\<lbrakk>0 < k; I \\<noteq> {}; I \\<rightarrow> i < length xs\\<rbrakk>\n       \\<Longrightarrow> xs \\<odot> k ! ((I \\<otimes> k) \\<rightarrow> i) =\n                         xs ! (I \\<rightarrow> i)", "apply (simp add: iT_Mult_inext_nth f_expand_nth_mult)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma i_join_i_expand_iT_Mult: \"\n  \\<lbrakk> 0 < k; I \\<noteq> {} \\<rbrakk> \\<Longrightarrow> f \\<odot>\\<^sub>i k \\<Join>\\<^sub>i (I \\<otimes> k) = f \\<Join>\\<^sub>i I\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>0 < k; I \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> f \\<odot> k \\<Join>\\<^sub> (I \\<otimes> k) =\n                      f \\<Join>\\<^sub> I", "apply (simp (no_asm) add: ilist_eq_iff, clarify)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>0 < k; I \\<noteq> {}\\<rbrakk>\n       \\<Longrightarrow> (f \\<odot> k \\<Join>\\<^sub> (I \\<otimes> k)) x =\n                         (f \\<Join>\\<^sub> I) x", "apply (simp add: i_join_nth iT_Mult_inext_nth i_expand_nth_mult)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma i_f_join_i_expand_iT_Mult: \"\n  \\<lbrakk> 0 < k; finite I \\<rbrakk> \\<Longrightarrow> f \\<odot>\\<^sub>i k \\<Join>\\<^bsub>i-f\\<^esub> (I \\<otimes> k) = f \\<Join>\\<^bsub>i-f\\<^esub> I\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>0 < k; finite I\\<rbrakk>\n    \\<Longrightarrow> f \\<odot> k \\<Join>\\<^sub> (I \\<otimes> k) =\n                      f \\<Join>\\<^sub> I", "apply (case_tac \"I = {}\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>0 < k; finite I; I = {}\\<rbrakk>\n    \\<Longrightarrow> f \\<odot> k \\<Join>\\<^sub> (I \\<otimes> k) =\n                      f \\<Join>\\<^sub> I\n 2. \\<lbrakk>0 < k; finite I; I \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> f \\<odot> k \\<Join>\\<^sub> (I \\<otimes> k) =\n                      f \\<Join>\\<^sub> I", "apply (simp add: iT_Mult_empty i_f_join_empty)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>0 < k; finite I; I \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> f \\<odot> k \\<Join>\\<^sub> (I \\<otimes> k) =\n                      f \\<Join>\\<^sub> I", "apply (clarsimp simp: list_eq_iff i_f_join_length iT_Mult_finite_iff iT_Mult_not_empty iT_Mult_card)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i.\n       \\<lbrakk>0 < k; finite I; I \\<noteq> {}; i < card I\\<rbrakk>\n       \\<Longrightarrow> f \\<odot> k \\<Join>\\<^sub> (I \\<otimes> k) ! i =\n                         f \\<Join>\\<^sub> I ! i", "apply (simp add: i_f_join_nth iT_Mult_card iT_Mult_inext_nth i_expand_nth_mult)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma f_join_f_shrink_iT_Plus_iT_Div_mod: \"\n  \\<lbrakk> 0 < k; \\<forall>x\\<in>I. x mod k = 0 \\<rbrakk> \\<Longrightarrow>\n  (xs \\<longmapsto>\\<^sub>f k) \\<Join>\\<^sub>f (I \\<oplus> (k - 1)) = xs \\<div>\\<^sub>f k \\<Join>\\<^sub>f (I \\<oslash> k)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>0 < k; \\<forall>x\\<in>I. x mod k = 0\\<rbrakk>\n    \\<Longrightarrow> xs \\<longmapsto> k \\<Join>\\<^sub> (I \\<oplus> k - 1) =\n                      xs \\<div> k \\<Join>\\<^sub> (I \\<oslash> k)", "apply (case_tac \"I = {}\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>0 < k; \\<forall>x\\<in>I. x mod k = 0; I = {}\\<rbrakk>\n    \\<Longrightarrow> xs \\<longmapsto> k \\<Join>\\<^sub> (I \\<oplus> k - 1) =\n                      xs \\<div> k \\<Join>\\<^sub> (I \\<oslash> k)\n 2. \\<lbrakk>0 < k; \\<forall>x\\<in>I. x mod k = 0; I \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> xs \\<longmapsto> k \\<Join>\\<^sub> (I \\<oplus> k - 1) =\n                      xs \\<div> k \\<Join>\\<^sub> (I \\<oslash> k)", "apply (simp add: iT_Plus_empty iT_Div_empty f_join_empty)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>0 < k; \\<forall>x\\<in>I. x mod k = 0; I \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> xs \\<longmapsto> k \\<Join>\\<^sub> (I \\<oplus> k - 1) =\n                      xs \\<div> k \\<Join>\\<^sub> (I \\<oslash> k)", "apply (simp add: list_eq_iff f_join_length f_shrink_length)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>0 < k; \\<forall>x\\<in>I. x mod k = 0; I \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> card ((I \\<oplus> k - Suc 0) \\<down>< length xs) =\n                      card\n                       ((I \\<oslash> k) \\<down>< (length xs div k)) \\<and>\n                      (\\<forall>i<card\n                                   ((I \\<oplus> k - Suc 0) \\<down><\n                                    length xs).\n                          xs \\<longmapsto> k \\<Join>\\<^sub>\n                          (I \\<oplus> k - Suc 0) !\n                          i =\n                          xs \\<div> k \\<Join>\\<^sub> (I \\<oslash> k) ! i)", "apply (subgoal_tac \"Suc (length xs) - k \\<le> length xs - length xs mod k\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>0 < k; \\<forall>x\\<in>I. x mod k = 0; I \\<noteq> {};\n     Suc (length xs) - k \\<le> length xs - length xs mod k\\<rbrakk>\n    \\<Longrightarrow> card ((I \\<oplus> k - Suc 0) \\<down>< length xs) =\n                      card\n                       ((I \\<oslash> k) \\<down>< (length xs div k)) \\<and>\n                      (\\<forall>i<card\n                                   ((I \\<oplus> k - Suc 0) \\<down><\n                                    length xs).\n                          xs \\<longmapsto> k \\<Join>\\<^sub>\n                          (I \\<oplus> k - Suc 0) !\n                          i =\n                          xs \\<div> k \\<Join>\\<^sub> (I \\<oslash> k) ! i)\n 2. \\<lbrakk>0 < k; \\<forall>x\\<in>I. x mod k = 0; I \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> Suc (length xs) - k \\<le> length xs - length xs mod k", "prefer 2"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>0 < k; \\<forall>x\\<in>I. x mod k = 0; I \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> Suc (length xs) - k \\<le> length xs - length xs mod k\n 2. \\<lbrakk>0 < k; \\<forall>x\\<in>I. x mod k = 0; I \\<noteq> {};\n     Suc (length xs) - k \\<le> length xs - length xs mod k\\<rbrakk>\n    \\<Longrightarrow> card ((I \\<oplus> k - Suc 0) \\<down>< length xs) =\n                      card\n                       ((I \\<oslash> k) \\<down>< (length xs div k)) \\<and>\n                      (\\<forall>i<card\n                                   ((I \\<oplus> k - Suc 0) \\<down><\n                                    length xs).\n                          xs \\<longmapsto> k \\<Join>\\<^sub>\n                          (I \\<oplus> k - Suc 0) !\n                          i =\n                          xs \\<div> k \\<Join>\\<^sub> (I \\<oslash> k) ! i)", "apply (case_tac \"length xs < k\", simp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>0 < k; \\<forall>x\\<in>I. x mod k = 0; I \\<noteq> {};\n     \\<not> length xs < k\\<rbrakk>\n    \\<Longrightarrow> Suc (length xs) - k \\<le> length xs - length xs mod k\n 2. \\<lbrakk>0 < k; \\<forall>x\\<in>I. x mod k = 0; I \\<noteq> {};\n     Suc (length xs) - k \\<le> length xs - length xs mod k\\<rbrakk>\n    \\<Longrightarrow> card ((I \\<oplus> k - Suc 0) \\<down>< length xs) =\n                      card\n                       ((I \\<oslash> k) \\<down>< (length xs div k)) \\<and>\n                      (\\<forall>i<card\n                                   ((I \\<oplus> k - Suc 0) \\<down><\n                                    length xs).\n                          xs \\<longmapsto> k \\<Join>\\<^sub>\n                          (I \\<oplus> k - Suc 0) !\n                          i =\n                          xs \\<div> k \\<Join>\\<^sub> (I \\<oslash> k) ! i)", "apply (simp add: Suc_diff_le linorder_not_less)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>0 < k; \\<forall>x\\<in>I. x mod k = 0; I \\<noteq> {};\n     k \\<le> length xs\\<rbrakk>\n    \\<Longrightarrow> Suc (length xs - k) \\<le> length xs - length xs mod k\n 2. \\<lbrakk>0 < k; \\<forall>x\\<in>I. x mod k = 0; I \\<noteq> {};\n     Suc (length xs) - k \\<le> length xs - length xs mod k\\<rbrakk>\n    \\<Longrightarrow> card ((I \\<oplus> k - Suc 0) \\<down>< length xs) =\n                      card\n                       ((I \\<oslash> k) \\<down>< (length xs div k)) \\<and>\n                      (\\<forall>i<card\n                                   ((I \\<oplus> k - Suc 0) \\<down><\n                                    length xs).\n                          xs \\<longmapsto> k \\<Join>\\<^sub>\n                          (I \\<oplus> k - Suc 0) !\n                          i =\n                          xs \\<div> k \\<Join>\\<^sub> (I \\<oslash> k) ! i)", "apply (rule Suc_leI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>0 < k; \\<forall>x\\<in>I. x mod k = 0; I \\<noteq> {};\n     k \\<le> length xs\\<rbrakk>\n    \\<Longrightarrow> length xs - k < length xs - length xs mod k\n 2. \\<lbrakk>0 < k; \\<forall>x\\<in>I. x mod k = 0; I \\<noteq> {};\n     Suc (length xs) - k \\<le> length xs - length xs mod k\\<rbrakk>\n    \\<Longrightarrow> card ((I \\<oplus> k - Suc 0) \\<down>< length xs) =\n                      card\n                       ((I \\<oslash> k) \\<down>< (length xs div k)) \\<and>\n                      (\\<forall>i<card\n                                   ((I \\<oplus> k - Suc 0) \\<down><\n                                    length xs).\n                          xs \\<longmapsto> k \\<Join>\\<^sub>\n                          (I \\<oplus> k - Suc 0) !\n                          i =\n                          xs \\<div> k \\<Join>\\<^sub> (I \\<oslash> k) ! i)", "apply (rule diff_less_mono2, simp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>0 < k; \\<forall>x\\<in>I. x mod k = 0; I \\<noteq> {};\n     k \\<le> length xs\\<rbrakk>\n    \\<Longrightarrow> length xs mod k < length xs\n 2. \\<lbrakk>0 < k; \\<forall>x\\<in>I. x mod k = 0; I \\<noteq> {};\n     Suc (length xs) - k \\<le> length xs - length xs mod k\\<rbrakk>\n    \\<Longrightarrow> card ((I \\<oplus> k - Suc 0) \\<down>< length xs) =\n                      card\n                       ((I \\<oslash> k) \\<down>< (length xs div k)) \\<and>\n                      (\\<forall>i<card\n                                   ((I \\<oplus> k - Suc 0) \\<down><\n                                    length xs).\n                          xs \\<longmapsto> k \\<Join>\\<^sub>\n                          (I \\<oplus> k - Suc 0) !\n                          i =\n                          xs \\<div> k \\<Join>\\<^sub> (I \\<oslash> k) ! i)", "apply (rule order_less_le_trans[OF mod_less_divisor], assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>0 < k; \\<forall>x\\<in>I. x mod k = 0; I \\<noteq> {};\n     Suc (length xs) - k \\<le> length xs - length xs mod k\\<rbrakk>\n    \\<Longrightarrow> card ((I \\<oplus> k - Suc 0) \\<down>< length xs) =\n                      card\n                       ((I \\<oslash> k) \\<down>< (length xs div k)) \\<and>\n                      (\\<forall>i<card\n                                   ((I \\<oplus> k - Suc 0) \\<down><\n                                    length xs).\n                          xs \\<longmapsto> k \\<Join>\\<^sub>\n                          (I \\<oplus> k - Suc 0) !\n                          i =\n                          xs \\<div> k \\<Join>\\<^sub> (I \\<oslash> k) ! i)", "apply (rule context_conjI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>0 < k; \\<forall>x\\<in>I. x mod k = 0; I \\<noteq> {};\n     Suc (length xs) - k \\<le> length xs - length xs mod k\\<rbrakk>\n    \\<Longrightarrow> card ((I \\<oplus> k - Suc 0) \\<down>< length xs) =\n                      card ((I \\<oslash> k) \\<down>< (length xs div k))\n 2. \\<lbrakk>0 < k; \\<forall>x\\<in>I. x mod k = 0; I \\<noteq> {};\n     Suc (length xs) - k \\<le> length xs - length xs mod k;\n     card ((I \\<oplus> k - Suc 0) \\<down>< length xs) =\n     card ((I \\<oslash> k) \\<down>< (length xs div k))\\<rbrakk>\n    \\<Longrightarrow> \\<forall>i<card\n                                  ((I \\<oplus> k - Suc 0) \\<down><\n                                   length xs).\n                         xs \\<longmapsto> k \\<Join>\\<^sub>\n                         (I \\<oplus> k - Suc 0) !\n                         i =\n                         xs \\<div> k \\<Join>\\<^sub> (I \\<oslash> k) ! i", "apply (simp add: iT_Plus_cut_less iT_Div_cut_less2 iT_Plus_card)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>0 < k; \\<forall>x\\<in>I. x mod k = 0; I \\<noteq> {};\n     Suc (length xs) - k \\<le> length xs - length xs mod k\\<rbrakk>\n    \\<Longrightarrow> card (I \\<down>< (Suc (length xs) - k)) =\n                      card\n                       (I \\<down>< (length xs - length xs mod k) \\<oslash>\n                        k)\n 2. \\<lbrakk>0 < k; \\<forall>x\\<in>I. x mod k = 0; I \\<noteq> {};\n     Suc (length xs) - k \\<le> length xs - length xs mod k;\n     card ((I \\<oplus> k - Suc 0) \\<down>< length xs) =\n     card ((I \\<oslash> k) \\<down>< (length xs div k))\\<rbrakk>\n    \\<Longrightarrow> \\<forall>i<card\n                                  ((I \\<oplus> k - Suc 0) \\<down><\n                                   length xs).\n                         xs \\<longmapsto> k \\<Join>\\<^sub>\n                         (I \\<oplus> k - Suc 0) !\n                         i =\n                         xs \\<div> k \\<Join>\\<^sub> (I \\<oslash> k) ! i", "apply (subst iT_Div_card_inj_on)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>0 < k; \\<forall>x\\<in>I. x mod k = 0; I \\<noteq> {};\n     Suc (length xs) - k \\<le> length xs - length xs mod k\\<rbrakk>\n    \\<Longrightarrow> inj_on (\\<lambda>n. n div k)\n                       (I \\<down>< (length xs - length xs mod k))\n 2. \\<lbrakk>0 < k; \\<forall>x\\<in>I. x mod k = 0; I \\<noteq> {};\n     Suc (length xs) - k \\<le> length xs - length xs mod k\\<rbrakk>\n    \\<Longrightarrow> card (I \\<down>< (Suc (length xs) - k)) =\n                      card (I \\<down>< (length xs - length xs mod k))\n 3. \\<lbrakk>0 < k; \\<forall>x\\<in>I. x mod k = 0; I \\<noteq> {};\n     Suc (length xs) - k \\<le> length xs - length xs mod k;\n     card ((I \\<oplus> k - Suc 0) \\<down>< length xs) =\n     card ((I \\<oslash> k) \\<down>< (length xs div k))\\<rbrakk>\n    \\<Longrightarrow> \\<forall>i<card\n                                  ((I \\<oplus> k - Suc 0) \\<down><\n                                   length xs).\n                         xs \\<longmapsto> k \\<Join>\\<^sub>\n                         (I \\<oplus> k - Suc 0) !\n                         i =\n                         xs \\<div> k \\<Join>\\<^sub> (I \\<oslash> k) ! i", "apply (rule mod_eq_imp_div_right_inj_on)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<lbrakk>0 < k; \\<forall>x\\<in>I. x mod k = 0; I \\<noteq> {};\n     Suc (length xs) - k \\<le> length xs - length xs mod k\\<rbrakk>\n    \\<Longrightarrow> 0 < k\n 2. \\<lbrakk>0 < k; \\<forall>x\\<in>I. x mod k = 0; I \\<noteq> {};\n     Suc (length xs) - k \\<le> length xs - length xs mod k\\<rbrakk>\n    \\<Longrightarrow> \\<forall>n\\<in>I \\<down><\n                                     (length xs - length xs mod k).\n                         \\<forall>y\\<in>I \\<down><\n  (length xs - length xs mod k).\n                            n mod k = y mod k\n 3. \\<lbrakk>0 < k; \\<forall>x\\<in>I. x mod k = 0; I \\<noteq> {};\n     Suc (length xs) - k \\<le> length xs - length xs mod k\\<rbrakk>\n    \\<Longrightarrow> card (I \\<down>< (Suc (length xs) - k)) =\n                      card (I \\<down>< (length xs - length xs mod k))\n 4. \\<lbrakk>0 < k; \\<forall>x\\<in>I. x mod k = 0; I \\<noteq> {};\n     Suc (length xs) - k \\<le> length xs - length xs mod k;\n     card ((I \\<oplus> k - Suc 0) \\<down>< length xs) =\n     card ((I \\<oslash> k) \\<down>< (length xs div k))\\<rbrakk>\n    \\<Longrightarrow> \\<forall>i<card\n                                  ((I \\<oplus> k - Suc 0) \\<down><\n                                   length xs).\n                         xs \\<longmapsto> k \\<Join>\\<^sub>\n                         (I \\<oplus> k - Suc 0) !\n                         i =\n                         xs \\<div> k \\<Join>\\<^sub> (I \\<oslash> k) ! i", "apply clarsimp+"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>0 < k; \\<forall>x\\<in>I. x mod k = 0; I \\<noteq> {};\n     Suc (length xs) - k \\<le> length xs - length xs mod k\\<rbrakk>\n    \\<Longrightarrow> card (I \\<down>< (Suc (length xs) - k)) =\n                      card (I \\<down>< (length xs - length xs mod k))\n 2. \\<lbrakk>0 < k; \\<forall>x\\<in>I. x mod k = 0; I \\<noteq> {};\n     Suc (length xs) - k \\<le> length xs - length xs mod k;\n     card ((I \\<oplus> k - Suc 0) \\<down>< length xs) =\n     card ((I \\<oslash> k) \\<down>< (length xs div k))\\<rbrakk>\n    \\<Longrightarrow> \\<forall>i<card\n                                  ((I \\<oplus> k - Suc 0) \\<down><\n                                   length xs).\n                         xs \\<longmapsto> k \\<Join>\\<^sub>\n                         (I \\<oplus> k - Suc 0) !\n                         i =\n                         xs \\<div> k \\<Join>\\<^sub> (I \\<oslash> k) ! i", "apply (rule arg_cong[where f=card])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>0 < k; \\<forall>x\\<in>I. x mod k = 0; I \\<noteq> {};\n     Suc (length xs) - k \\<le> length xs - length xs mod k\\<rbrakk>\n    \\<Longrightarrow> I \\<down>< (Suc (length xs) - k) =\n                      I \\<down>< (length xs - length xs mod k)\n 2. \\<lbrakk>0 < k; \\<forall>x\\<in>I. x mod k = 0; I \\<noteq> {};\n     Suc (length xs) - k \\<le> length xs - length xs mod k;\n     card ((I \\<oplus> k - Suc 0) \\<down>< length xs) =\n     card ((I \\<oslash> k) \\<down>< (length xs div k))\\<rbrakk>\n    \\<Longrightarrow> \\<forall>i<card\n                                  ((I \\<oplus> k - Suc 0) \\<down><\n                                   length xs).\n                         xs \\<longmapsto> k \\<Join>\\<^sub>\n                         (I \\<oplus> k - Suc 0) !\n                         i =\n                         xs \\<div> k \\<Join>\\<^sub> (I \\<oslash> k) ! i", "apply (simp (no_asm_simp) add: set_eq_iff cut_less_mem_iff, clarify)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>0 < k; \\<forall>x\\<in>I. x mod k = 0; I \\<noteq> {};\n        Suc (length xs) - k \\<le> length xs - length xs mod k\\<rbrakk>\n       \\<Longrightarrow> (x \\<in> I \\<and> x < Suc (length xs) - k) =\n                         (x \\<in> I \\<and> x < length xs - length xs mod k)\n 2. \\<lbrakk>0 < k; \\<forall>x\\<in>I. x mod k = 0; I \\<noteq> {};\n     Suc (length xs) - k \\<le> length xs - length xs mod k;\n     card ((I \\<oplus> k - Suc 0) \\<down>< length xs) =\n     card ((I \\<oslash> k) \\<down>< (length xs div k))\\<rbrakk>\n    \\<Longrightarrow> \\<forall>i<card\n                                  ((I \\<oplus> k - Suc 0) \\<down><\n                                   length xs).\n                         xs \\<longmapsto> k \\<Join>\\<^sub>\n                         (I \\<oplus> k - Suc 0) !\n                         i =\n                         xs \\<div> k \\<Join>\\<^sub> (I \\<oslash> k) ! i", "apply (rule conj_cong, simp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>0 < k; \\<forall>x\\<in>I. x mod k = 0; I \\<noteq> {};\n        Suc (length xs) - k \\<le> length xs - length xs mod k;\n        x \\<in> I\\<rbrakk>\n       \\<Longrightarrow> (x < Suc (length xs) - k) =\n                         (x < length xs - length xs mod k)\n 2. \\<lbrakk>0 < k; \\<forall>x\\<in>I. x mod k = 0; I \\<noteq> {};\n     Suc (length xs) - k \\<le> length xs - length xs mod k;\n     card ((I \\<oplus> k - Suc 0) \\<down>< length xs) =\n     card ((I \\<oslash> k) \\<down>< (length xs div k))\\<rbrakk>\n    \\<Longrightarrow> \\<forall>i<card\n                                  ((I \\<oplus> k - Suc 0) \\<down><\n                                   length xs).\n                         xs \\<longmapsto> k \\<Join>\\<^sub>\n                         (I \\<oplus> k - Suc 0) !\n                         i =\n                         xs \\<div> k \\<Join>\\<^sub> (I \\<oslash> k) ! i", "apply (rule iffI)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>0 < k; \\<forall>x\\<in>I. x mod k = 0; I \\<noteq> {};\n        Suc (length xs) - k \\<le> length xs - length xs mod k; x \\<in> I;\n        x < Suc (length xs) - k\\<rbrakk>\n       \\<Longrightarrow> x < length xs - length xs mod k\n 2. \\<And>x.\n       \\<lbrakk>0 < k; \\<forall>x\\<in>I. x mod k = 0; I \\<noteq> {};\n        Suc (length xs) - k \\<le> length xs - length xs mod k; x \\<in> I;\n        x < length xs - length xs mod k\\<rbrakk>\n       \\<Longrightarrow> x < Suc (length xs) - k\n 3. \\<lbrakk>0 < k; \\<forall>x\\<in>I. x mod k = 0; I \\<noteq> {};\n     Suc (length xs) - k \\<le> length xs - length xs mod k;\n     card ((I \\<oplus> k - Suc 0) \\<down>< length xs) =\n     card ((I \\<oslash> k) \\<down>< (length xs div k))\\<rbrakk>\n    \\<Longrightarrow> \\<forall>i<card\n                                  ((I \\<oplus> k - Suc 0) \\<down><\n                                   length xs).\n                         xs \\<longmapsto> k \\<Join>\\<^sub>\n                         (I \\<oplus> k - Suc 0) !\n                         i =\n                         xs \\<div> k \\<Join>\\<^sub> (I \\<oslash> k) ! i", "apply simp"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>0 < k; \\<forall>x\\<in>I. x mod k = 0; I \\<noteq> {};\n        Suc (length xs) - k \\<le> length xs - length xs mod k; x \\<in> I;\n        x < length xs - length xs mod k\\<rbrakk>\n       \\<Longrightarrow> x < Suc (length xs) - k\n 2. \\<lbrakk>0 < k; \\<forall>x\\<in>I. x mod k = 0; I \\<noteq> {};\n     Suc (length xs) - k \\<le> length xs - length xs mod k;\n     card ((I \\<oplus> k - Suc 0) \\<down>< length xs) =\n     card ((I \\<oslash> k) \\<down>< (length xs div k))\\<rbrakk>\n    \\<Longrightarrow> \\<forall>i<card\n                                  ((I \\<oplus> k - Suc 0) \\<down><\n                                   length xs).\n                         xs \\<longmapsto> k \\<Join>\\<^sub>\n                         (I \\<oplus> k - Suc 0) !\n                         i =\n                         xs \\<div> k \\<Join>\\<^sub> (I \\<oslash> k) ! i", "apply (frule_tac x=x and m=k in less_mod_eq_imp_add_divisor_le)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>0 < k; \\<forall>x\\<in>I. x mod k = 0; I \\<noteq> {};\n        Suc (length xs) - k \\<le> length xs - length xs mod k; x \\<in> I;\n        x < length xs - length xs mod k\\<rbrakk>\n       \\<Longrightarrow> x mod k = (length xs - length xs mod k) mod k\n 2. \\<And>x.\n       \\<lbrakk>0 < k; \\<forall>x\\<in>I. x mod k = 0; I \\<noteq> {};\n        Suc (length xs) - k \\<le> length xs - length xs mod k; x \\<in> I;\n        x < length xs - length xs mod k;\n        x + k \\<le> length xs - length xs mod k\\<rbrakk>\n       \\<Longrightarrow> x < Suc (length xs) - k\n 3. \\<lbrakk>0 < k; \\<forall>x\\<in>I. x mod k = 0; I \\<noteq> {};\n     Suc (length xs) - k \\<le> length xs - length xs mod k;\n     card ((I \\<oplus> k - Suc 0) \\<down>< length xs) =\n     card ((I \\<oslash> k) \\<down>< (length xs div k))\\<rbrakk>\n    \\<Longrightarrow> \\<forall>i<card\n                                  ((I \\<oplus> k - Suc 0) \\<down><\n                                   length xs).\n                         xs \\<longmapsto> k \\<Join>\\<^sub>\n                         (I \\<oplus> k - Suc 0) !\n                         i =\n                         xs \\<div> k \\<Join>\\<^sub> (I \\<oslash> k) ! i", "apply (simp add: mod_diff_right_eq [symmetric])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>0 < k; \\<forall>x\\<in>I. x mod k = 0; I \\<noteq> {};\n        Suc (length xs) - k \\<le> length xs - length xs mod k; x \\<in> I;\n        x < length xs - length xs mod k;\n        x + k \\<le> length xs - length xs mod k\\<rbrakk>\n       \\<Longrightarrow> x < Suc (length xs) - k\n 2. \\<lbrakk>0 < k; \\<forall>x\\<in>I. x mod k = 0; I \\<noteq> {};\n     Suc (length xs) - k \\<le> length xs - length xs mod k;\n     card ((I \\<oplus> k - Suc 0) \\<down>< length xs) =\n     card ((I \\<oslash> k) \\<down>< (length xs div k))\\<rbrakk>\n    \\<Longrightarrow> \\<forall>i<card\n                                  ((I \\<oplus> k - Suc 0) \\<down><\n                                   length xs).\n                         xs \\<longmapsto> k \\<Join>\\<^sub>\n                         (I \\<oplus> k - Suc 0) !\n                         i =\n                         xs \\<div> k \\<Join>\\<^sub> (I \\<oslash> k) ! i", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>0 < k; \\<forall>x\\<in>I. x mod k = 0; I \\<noteq> {};\n     Suc (length xs) - k \\<le> length xs - length xs mod k;\n     card ((I \\<oplus> k - Suc 0) \\<down>< length xs) =\n     card ((I \\<oslash> k) \\<down>< (length xs div k))\\<rbrakk>\n    \\<Longrightarrow> \\<forall>i<card\n                                  ((I \\<oplus> k - Suc 0) \\<down><\n                                   length xs).\n                         xs \\<longmapsto> k \\<Join>\\<^sub>\n                         (I \\<oplus> k - Suc 0) !\n                         i =\n                         xs \\<div> k \\<Join>\\<^sub> (I \\<oslash> k) ! i", "apply (clarsimp simp: f_join_nth f_join_length f_shrink_length)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i.\n       \\<lbrakk>0 < k; \\<forall>x\\<in>I. x mod k = 0; I \\<noteq> {};\n        Suc (length xs) - k \\<le> length xs - length xs mod k;\n        card ((I \\<oplus> k - Suc 0) \\<down>< length xs) =\n        card ((I \\<oslash> k) \\<down>< (length xs div k));\n        i < card ((I \\<oslash> k) \\<down>< (length xs div k))\\<rbrakk>\n       \\<Longrightarrow> xs \\<longmapsto> k !\n                         ((I \\<oplus> k - Suc 0) \\<rightarrow> i) =\n                         xs \\<div> k ! ((I \\<oslash> k) \\<rightarrow> i)", "apply (simp add: iT_Plus_inext_nth iT_Plus_not_empty)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i.\n       \\<lbrakk>0 < k; \\<forall>x\\<in>I. x mod k = 0; I \\<noteq> {};\n        Suc (length xs) - k \\<le> length xs - length xs mod k;\n        card ((I \\<oplus> k - Suc 0) \\<down>< length xs) =\n        card ((I \\<oslash> k) \\<down>< (length xs div k));\n        i < card ((I \\<oslash> k) \\<down>< (length xs div k))\\<rbrakk>\n       \\<Longrightarrow> xs \\<longmapsto> k !\n                         ((I \\<rightarrow> i) + k - Suc 0) =\n                         xs \\<div> k ! ((I \\<oslash> k) \\<rightarrow> i)", "apply (simp add: iT_Div_mod_inext_nth)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i.\n       \\<lbrakk>0 < k; \\<forall>x\\<in>I. x mod k = 0; I \\<noteq> {};\n        Suc (length xs) - k \\<le> length xs - length xs mod k;\n        card ((I \\<oplus> k - Suc 0) \\<down>< length xs) =\n        card ((I \\<oslash> k) \\<down>< (length xs div k));\n        i < card ((I \\<oslash> k) \\<down>< (length xs div k))\\<rbrakk>\n       \\<Longrightarrow> xs \\<longmapsto> k !\n                         ((I \\<rightarrow> i) + k - Suc 0) =\n                         xs \\<div> k ! ((I \\<rightarrow> i) div k)", "apply (subst f_shrink_nth_eq_f_last_message_hold_nth)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>i.\n       \\<lbrakk>0 < k; \\<forall>x\\<in>I. x mod k = 0; I \\<noteq> {};\n        Suc (length xs) - k \\<le> length xs - length xs mod k;\n        card ((I \\<oplus> k - Suc 0) \\<down>< length xs) =\n        card ((I \\<oslash> k) \\<down>< (length xs div k));\n        i < card ((I \\<oslash> k) \\<down>< (length xs div k))\\<rbrakk>\n       \\<Longrightarrow> (I \\<rightarrow> i) div k < length xs div k\n 2. \\<And>i.\n       \\<lbrakk>0 < k; \\<forall>x\\<in>I. x mod k = 0; I \\<noteq> {};\n        Suc (length xs) - k \\<le> length xs - length xs mod k;\n        card ((I \\<oplus> k - Suc 0) \\<down>< length xs) =\n        card ((I \\<oslash> k) \\<down>< (length xs div k));\n        i < card ((I \\<oslash> k) \\<down>< (length xs div k))\\<rbrakk>\n       \\<Longrightarrow> xs \\<longmapsto> k !\n                         ((I \\<rightarrow> i) + k - Suc 0) =\n                         xs \\<longmapsto> k !\n                         ((I \\<rightarrow> i) div k * k + k - Suc 0)", "apply (drule sym, simp, thin_tac \"card x = card y\" for x y)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>i.\n       \\<lbrakk>0 < k; \\<forall>x\\<in>I. x mod k = 0; I \\<noteq> {};\n        Suc (length xs) - k \\<le> length xs - length xs mod k;\n        i < card ((I \\<oplus> k - Suc 0) \\<down>< length xs)\\<rbrakk>\n       \\<Longrightarrow> (I \\<rightarrow> i) div k < length xs div k\n 2. \\<And>i.\n       \\<lbrakk>0 < k; \\<forall>x\\<in>I. x mod k = 0; I \\<noteq> {};\n        Suc (length xs) - k \\<le> length xs - length xs mod k;\n        card ((I \\<oplus> k - Suc 0) \\<down>< length xs) =\n        card ((I \\<oslash> k) \\<down>< (length xs div k));\n        i < card ((I \\<oslash> k) \\<down>< (length xs div k))\\<rbrakk>\n       \\<Longrightarrow> xs \\<longmapsto> k !\n                         ((I \\<rightarrow> i) + k - Suc 0) =\n                         xs \\<longmapsto> k !\n                         ((I \\<rightarrow> i) div k * k + k - Suc 0)", "apply (simp add: iT_Plus_cut_less iT_Plus_card)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>i.\n       \\<lbrakk>0 < k; \\<forall>x\\<in>I. x mod k = 0; I \\<noteq> {};\n        Suc (length xs) - k \\<le> length xs - length xs mod k;\n        i < card (I \\<down>< (Suc (length xs) - k))\\<rbrakk>\n       \\<Longrightarrow> (I \\<rightarrow> i) div k < length xs div k\n 2. \\<And>i.\n       \\<lbrakk>0 < k; \\<forall>x\\<in>I. x mod k = 0; I \\<noteq> {};\n        Suc (length xs) - k \\<le> length xs - length xs mod k;\n        card ((I \\<oplus> k - Suc 0) \\<down>< length xs) =\n        card ((I \\<oslash> k) \\<down>< (length xs div k));\n        i < card ((I \\<oslash> k) \\<down>< (length xs div k))\\<rbrakk>\n       \\<Longrightarrow> xs \\<longmapsto> k !\n                         ((I \\<rightarrow> i) + k - Suc 0) =\n                         xs \\<longmapsto> k !\n                         ((I \\<rightarrow> i) div k * k + k - Suc 0)", "apply (rule less_mult_imp_div_less)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>i.\n       \\<lbrakk>0 < k; \\<forall>x\\<in>I. x mod k = 0; I \\<noteq> {};\n        Suc (length xs) - k \\<le> length xs - length xs mod k;\n        i < card (I \\<down>< (Suc (length xs) - k))\\<rbrakk>\n       \\<Longrightarrow> I \\<rightarrow> i < length xs div k * k\n 2. \\<And>i.\n       \\<lbrakk>0 < k; \\<forall>x\\<in>I. x mod k = 0; I \\<noteq> {};\n        Suc (length xs) - k \\<le> length xs - length xs mod k;\n        card ((I \\<oplus> k - Suc 0) \\<down>< length xs) =\n        card ((I \\<oslash> k) \\<down>< (length xs div k));\n        i < card ((I \\<oslash> k) \\<down>< (length xs div k))\\<rbrakk>\n       \\<Longrightarrow> xs \\<longmapsto> k !\n                         ((I \\<rightarrow> i) + k - Suc 0) =\n                         xs \\<longmapsto> k !\n                         ((I \\<rightarrow> i) div k * k + k - Suc 0)", "apply (rule less_le_trans[OF less_card_cut_less_imp_inext_nth_less], assumption)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>i.\n       \\<lbrakk>0 < k; \\<forall>x\\<in>I. x mod k = 0; I \\<noteq> {};\n        Suc (length xs) - k \\<le> length xs - length xs mod k;\n        i < card (I \\<down>< (Suc (length xs) - k))\\<rbrakk>\n       \\<Longrightarrow> Suc (length xs) - k \\<le> length xs div k * k\n 2. \\<And>i.\n       \\<lbrakk>0 < k; \\<forall>x\\<in>I. x mod k = 0; I \\<noteq> {};\n        Suc (length xs) - k \\<le> length xs - length xs mod k;\n        card ((I \\<oplus> k - Suc 0) \\<down>< length xs) =\n        card ((I \\<oslash> k) \\<down>< (length xs div k));\n        i < card ((I \\<oslash> k) \\<down>< (length xs div k))\\<rbrakk>\n       \\<Longrightarrow> xs \\<longmapsto> k !\n                         ((I \\<rightarrow> i) + k - Suc 0) =\n                         xs \\<longmapsto> k !\n                         ((I \\<rightarrow> i) div k * k + k - Suc 0)", "apply (simp add: div_mult_cancel)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i.\n       \\<lbrakk>0 < k; \\<forall>x\\<in>I. x mod k = 0; I \\<noteq> {};\n        Suc (length xs) - k \\<le> length xs - length xs mod k;\n        card ((I \\<oplus> k - Suc 0) \\<down>< length xs) =\n        card ((I \\<oslash> k) \\<down>< (length xs div k));\n        i < card ((I \\<oslash> k) \\<down>< (length xs div k))\\<rbrakk>\n       \\<Longrightarrow> xs \\<longmapsto> k !\n                         ((I \\<rightarrow> i) + k - Suc 0) =\n                         xs \\<longmapsto> k !\n                         ((I \\<rightarrow> i) div k * k + k - Suc 0)", "apply (simp add: div_mult_cancel inext_nth_closed)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma i_join_i_shrink_iT_Plus_iT_Div_mod: \"\n  \\<lbrakk> 0 < k; I \\<noteq> {}; \\<forall>x\\<in>I. x mod k = 0 \\<rbrakk> \\<Longrightarrow>\n  (f \\<longmapsto>\\<^sub>i k) \\<Join>\\<^sub>i (I \\<oplus> (k - 1))= f \\<div>\\<^sub>i k \\<Join>\\<^sub>i (I \\<oslash> k)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>0 < k; I \\<noteq> {}; \\<forall>x\\<in>I. x mod k = 0\\<rbrakk>\n    \\<Longrightarrow> f \\<longmapsto> k \\<Join>\\<^sub> (I \\<oplus> k - 1) =\n                      f \\<div> k \\<Join>\\<^sub> (I \\<oslash> k)", "apply (simp (no_asm) add: ilist_eq_iff, clarify)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>0 < k; I \\<noteq> {}; \\<forall>x\\<in>I. x mod k = 0\\<rbrakk>\n       \\<Longrightarrow> (f \\<longmapsto> k \\<Join>\\<^sub>\n                          (I \\<oplus> k - Suc 0))\n                          x =\n                         (f \\<div> k \\<Join>\\<^sub> (I \\<oslash> k)) x", "apply (simp add: i_join_nth)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>0 < k; I \\<noteq> {}; \\<forall>x\\<in>I. x mod k = 0\\<rbrakk>\n       \\<Longrightarrow> (f \\<longmapsto> k)\n                          ((I \\<oplus> k - Suc 0) \\<rightarrow> x) =\n                         (f \\<div> k) ((I \\<oslash> k) \\<rightarrow> x)", "apply (simp add: i_shrink_nth_eq_i_last_message_hold_nth)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>0 < k; I \\<noteq> {}; \\<forall>x\\<in>I. x mod k = 0\\<rbrakk>\n       \\<Longrightarrow> (f \\<longmapsto> k)\n                          ((I \\<oplus> k - Suc 0) \\<rightarrow> x) =\n                         (f \\<longmapsto> k)\n                          (((I \\<oslash> k) \\<rightarrow> x) * k + k -\n                           Suc 0)", "apply (simp add: iT_Plus_inext_nth iT_Div_mod_inext_nth)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>0 < k; I \\<noteq> {}; \\<forall>x\\<in>I. x mod k = 0\\<rbrakk>\n       \\<Longrightarrow> (f \\<longmapsto> k)\n                          ((I \\<rightarrow> x) + k - Suc 0) =\n                         (f \\<longmapsto> k)\n                          ((I \\<rightarrow> x) div k * k + k - Suc 0)", "apply (drule_tac x=\"I \\<rightarrow> x\" in bspec)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>0 < k; I \\<noteq> {}\\<rbrakk>\n       \\<Longrightarrow> I \\<rightarrow> x \\<in> I\n 2. \\<And>x.\n       \\<lbrakk>0 < k; I \\<noteq> {}; (I \\<rightarrow> x) mod k = 0\\<rbrakk>\n       \\<Longrightarrow> (f \\<longmapsto> k)\n                          ((I \\<rightarrow> x) + k - Suc 0) =\n                         (f \\<longmapsto> k)\n                          ((I \\<rightarrow> x) div k * k + k - Suc 0)", "apply (simp add: inext_nth_closed)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>0 < k; I \\<noteq> {}; (I \\<rightarrow> x) mod k = 0\\<rbrakk>\n       \\<Longrightarrow> (f \\<longmapsto> k)\n                          ((I \\<rightarrow> x) + k - Suc 0) =\n                         (f \\<longmapsto> k)\n                          ((I \\<rightarrow> x) div k * k + k - Suc 0)", "apply (simp add: mod_0_div_mult_cancel)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma i_f_join_i_shrink_iT_Plus_iT_Div_mod: \"\n  \\<lbrakk> 0 < k; finite I; \\<forall>x\\<in>I. x mod k = 0 \\<rbrakk> \\<Longrightarrow>\n  (f \\<longmapsto>\\<^sub>i k) \\<Join>\\<^bsub>i-f\\<^esub> (I \\<oplus> (k - 1))= f \\<div>\\<^sub>i k \\<Join>\\<^bsub>i-f\\<^esub> (I \\<oslash> k)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>0 < k; finite I; \\<forall>x\\<in>I. x mod k = 0\\<rbrakk>\n    \\<Longrightarrow> f \\<longmapsto> k \\<Join>\\<^sub> (I \\<oplus> k - 1) =\n                      f \\<div> k \\<Join>\\<^sub> (I \\<oslash> k)", "apply (case_tac \"I = {}\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>0 < k; finite I; \\<forall>x\\<in>I. x mod k = 0; I = {}\\<rbrakk>\n    \\<Longrightarrow> f \\<longmapsto> k \\<Join>\\<^sub> (I \\<oplus> k - 1) =\n                      f \\<div> k \\<Join>\\<^sub> (I \\<oslash> k)\n 2. \\<lbrakk>0 < k; finite I; \\<forall>x\\<in>I. x mod k = 0;\n     I \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> f \\<longmapsto> k \\<Join>\\<^sub> (I \\<oplus> k - 1) =\n                      f \\<div> k \\<Join>\\<^sub> (I \\<oslash> k)", "apply (simp add: iT_Plus_empty iT_Div_empty i_f_join_empty)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>0 < k; finite I; \\<forall>x\\<in>I. x mod k = 0;\n     I \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> f \\<longmapsto> k \\<Join>\\<^sub> (I \\<oplus> k - 1) =\n                      f \\<div> k \\<Join>\\<^sub> (I \\<oslash> k)", "apply (simp add: i_f_join_def iT_Plus_Max iT_Div_Max)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>0 < k; finite I; \\<forall>x\\<in>I. x mod k = 0;\n     I \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> f \\<longmapsto> k \\<Down> (Max I + k) \\<Join>\\<^sub>\n                      (I \\<oplus> k - Suc 0) =\n                      f \\<div> k \\<Down> Suc (Max I div k) \\<Join>\\<^sub>\n                      (I \\<oslash> k)", "apply (simp add: i_last_message_hold_i_take[symmetric] i_shrink_i_take_mult[symmetric])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>0 < k; finite I; \\<forall>x\\<in>I. x mod k = 0;\n     I \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> f \\<Down> (Max I + k) \\<longmapsto> k \\<Join>\\<^sub>\n                      (I \\<oplus> k - Suc 0) =\n                      f \\<Down> (k + Max I div k * k) \\<div>\n                      k \\<Join>\\<^sub>\n                      (I \\<oslash> k)", "apply (simp add: add.commute[of k])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>0 < k; finite I; \\<forall>x\\<in>I. x mod k = 0;\n     I \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> f \\<Down> (Max I + k) \\<longmapsto> k \\<Join>\\<^sub>\n                      (I \\<oplus> k - Suc 0) =\n                      f \\<Down> (Max I div k * k + k) \\<div>\n                      k \\<Join>\\<^sub>\n                      (I \\<oslash> k)", "apply (simp add: mod_0_div_mult_cancel[THEN iffD1])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>0 < k; finite I; \\<forall>x\\<in>I. x mod k = 0;\n     I \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> f \\<Down> (Max I + k) \\<longmapsto> k \\<Join>\\<^sub>\n                      (I \\<oplus> k - Suc 0) =\n                      f \\<Down> (Max I + k) \\<div> k \\<Join>\\<^sub>\n                      (I \\<oslash> k)", "apply (simp add: f_join_f_shrink_iT_Plus_iT_Div_mod[unfolded One_nat_def])"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "corollary f_join_f_shrink_iT_Plus_iT_Div_mod_subst: \"\n  \\<lbrakk> 0 < k; \\<forall>x\\<in>I. x mod k = 0;\n    A = I \\<oplus> (k - 1); B = I \\<oslash> k \\<rbrakk> \\<Longrightarrow>\n  (xs \\<longmapsto>\\<^sub>f k) \\<Join>\\<^sub>f A = xs \\<div>\\<^sub>f k \\<Join>\\<^sub>f B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>0 < k; \\<forall>x\\<in>I. x mod k = 0; A = I \\<oplus> k - 1;\n     B = I \\<oslash> k\\<rbrakk>\n    \\<Longrightarrow> xs \\<longmapsto> k \\<Join>\\<^sub> A =\n                      xs \\<div> k \\<Join>\\<^sub> B", "by (simp add: f_join_f_shrink_iT_Plus_iT_Div_mod[unfolded One_nat_def])"], ["", "corollary i_join_i_shrink_iT_Plus_iT_Div_mod_subst: \"\n  \\<lbrakk> 0 < k; I \\<noteq> {}; \\<forall>x\\<in>I. x mod k = 0;\n    A = I \\<oplus> (k - 1); B = I \\<oslash> k \\<rbrakk> \\<Longrightarrow>\n  (f \\<longmapsto>\\<^sub>i k) \\<Join>\\<^sub>i A = f \\<div>\\<^sub>i k \\<Join>\\<^sub>i B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>0 < k; I \\<noteq> {}; \\<forall>x\\<in>I. x mod k = 0;\n     A = I \\<oplus> k - 1; B = I \\<oslash> k\\<rbrakk>\n    \\<Longrightarrow> f \\<longmapsto> k \\<Join>\\<^sub> A =\n                      f \\<div> k \\<Join>\\<^sub> B", "by (simp add: i_join_i_shrink_iT_Plus_iT_Div_mod[unfolded One_nat_def])"], ["", "corollary i_f_join_i_shrink_iT_Plus_iT_Div_mod_subst: \"\n  \\<lbrakk> 0 < k; finite I; \\<forall>x\\<in>I. x mod k = 0;\n    A = I \\<oplus> (k - 1); B = I \\<oslash> k \\<rbrakk> \\<Longrightarrow>\n  (f \\<longmapsto>\\<^sub>i k) \\<Join>\\<^bsub>i-f\\<^esub> A= f \\<div>\\<^sub>i k \\<Join>\\<^bsub>i-f\\<^esub> B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>0 < k; finite I; \\<forall>x\\<in>I. x mod k = 0;\n     A = I \\<oplus> k - 1; B = I \\<oslash> k\\<rbrakk>\n    \\<Longrightarrow> f \\<longmapsto> k \\<Join>\\<^sub> A =\n                      f \\<div> k \\<Join>\\<^sub> B", "by (simp add: i_f_join_i_shrink_iT_Plus_iT_Div_mod[unfolded One_nat_def])"], ["", "lemma f_join_f_shrink_iT_Div_mod: \"\n  \\<lbrakk> 0 < k; \\<forall>x\\<in>I. x mod k = k - 1 \\<rbrakk> \\<Longrightarrow>\n  (xs \\<longmapsto>\\<^sub>f k) \\<Join>\\<^sub>f I = xs \\<div>\\<^sub>f k \\<Join>\\<^sub>f (I \\<oslash> k)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>0 < k; \\<forall>x\\<in>I. x mod k = k - 1\\<rbrakk>\n    \\<Longrightarrow> xs \\<longmapsto> k \\<Join>\\<^sub> I =\n                      xs \\<div> k \\<Join>\\<^sub> (I \\<oslash> k)", "apply (case_tac \"I = {}\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>0 < k; \\<forall>x\\<in>I. x mod k = k - 1; I = {}\\<rbrakk>\n    \\<Longrightarrow> xs \\<longmapsto> k \\<Join>\\<^sub> I =\n                      xs \\<div> k \\<Join>\\<^sub> (I \\<oslash> k)\n 2. \\<lbrakk>0 < k; \\<forall>x\\<in>I. x mod k = k - 1;\n     I \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> xs \\<longmapsto> k \\<Join>\\<^sub> I =\n                      xs \\<div> k \\<Join>\\<^sub> (I \\<oslash> k)", "apply (simp add: iT_Div_empty f_join_empty)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>0 < k; \\<forall>x\\<in>I. x mod k = k - 1;\n     I \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> xs \\<longmapsto> k \\<Join>\\<^sub> I =\n                      xs \\<div> k \\<Join>\\<^sub> (I \\<oslash> k)", "apply (frule Suc_leI, drule order_le_imp_less_or_eq, erule disjE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>0 < k; \\<forall>x\\<in>I. x mod k = k - 1; I \\<noteq> {};\n     Suc 0 < k\\<rbrakk>\n    \\<Longrightarrow> xs \\<longmapsto> k \\<Join>\\<^sub> I =\n                      xs \\<div> k \\<Join>\\<^sub> (I \\<oslash> k)\n 2. \\<lbrakk>0 < k; \\<forall>x\\<in>I. x mod k = k - 1; I \\<noteq> {};\n     Suc 0 = k\\<rbrakk>\n    \\<Longrightarrow> xs \\<longmapsto> k \\<Join>\\<^sub> I =\n                      xs \\<div> k \\<Join>\\<^sub> (I \\<oslash> k)", "prefer 2"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>0 < k; \\<forall>x\\<in>I. x mod k = k - 1; I \\<noteq> {};\n     Suc 0 = k\\<rbrakk>\n    \\<Longrightarrow> xs \\<longmapsto> k \\<Join>\\<^sub> I =\n                      xs \\<div> k \\<Join>\\<^sub> (I \\<oslash> k)\n 2. \\<lbrakk>0 < k; \\<forall>x\\<in>I. x mod k = k - 1; I \\<noteq> {};\n     Suc 0 < k\\<rbrakk>\n    \\<Longrightarrow> xs \\<longmapsto> k \\<Join>\\<^sub> I =\n                      xs \\<div> k \\<Join>\\<^sub> (I \\<oslash> k)", "apply (drule sym, simp add: iT_Div_1)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>0 < k; \\<forall>x\\<in>I. x mod k = k - 1; I \\<noteq> {};\n     Suc 0 < k\\<rbrakk>\n    \\<Longrightarrow> xs \\<longmapsto> k \\<Join>\\<^sub> I =\n                      xs \\<div> k \\<Join>\\<^sub> (I \\<oslash> k)", "apply (rule_tac t=I and s=\"I \\<oplus>- (k - 1) \\<oplus> (k - 1)\" in subst)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>0 < k; \\<forall>x\\<in>I. x mod k = k - 1; I \\<noteq> {};\n     Suc 0 < k\\<rbrakk>\n    \\<Longrightarrow> I \\<oplus>- k - 1 \\<oplus> k - 1 = I\n 2. \\<lbrakk>0 < k; \\<forall>x\\<in>I. x mod k = k - 1; I \\<noteq> {};\n     Suc 0 < k\\<rbrakk>\n    \\<Longrightarrow> xs \\<longmapsto> k \\<Join>\\<^sub>\n                      (I \\<oplus>- k - 1 \\<oplus> k - 1) =\n                      xs \\<div> k \\<Join>\\<^sub>\n                      (I \\<oplus>- k - 1 \\<oplus> k - 1 \\<oslash> k)", "apply (rule iT_Plus_neg_Plus_le_inverse)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>0 < k; \\<forall>x\\<in>I. x mod k = k - 1; I \\<noteq> {};\n     Suc 0 < k\\<rbrakk>\n    \\<Longrightarrow> k - 1 \\<le> iMin I\n 2. \\<lbrakk>0 < k; \\<forall>x\\<in>I. x mod k = k - 1; I \\<noteq> {};\n     Suc 0 < k\\<rbrakk>\n    \\<Longrightarrow> xs \\<longmapsto> k \\<Join>\\<^sub>\n                      (I \\<oplus>- k - 1 \\<oplus> k - 1) =\n                      xs \\<div> k \\<Join>\\<^sub>\n                      (I \\<oplus>- k - 1 \\<oplus> k - 1 \\<oslash> k)", "apply (rule ccontr)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>0 < k; \\<forall>x\\<in>I. x mod k = k - 1; I \\<noteq> {};\n     Suc 0 < k; \\<not> k - 1 \\<le> iMin I\\<rbrakk>\n    \\<Longrightarrow> False\n 2. \\<lbrakk>0 < k; \\<forall>x\\<in>I. x mod k = k - 1; I \\<noteq> {};\n     Suc 0 < k\\<rbrakk>\n    \\<Longrightarrow> xs \\<longmapsto> k \\<Join>\\<^sub>\n                      (I \\<oplus>- k - 1 \\<oplus> k - 1) =\n                      xs \\<div> k \\<Join>\\<^sub>\n                      (I \\<oplus>- k - 1 \\<oplus> k - 1 \\<oslash> k)", "apply (drule_tac x=\"iMin I\" in bspec, simp add: iMinI_ex2)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>0 < k; I \\<noteq> {}; Suc 0 < k; \\<not> k - 1 \\<le> iMin I;\n     iMin I mod k = k - 1\\<rbrakk>\n    \\<Longrightarrow> False\n 2. \\<lbrakk>0 < k; \\<forall>x\\<in>I. x mod k = k - 1; I \\<noteq> {};\n     Suc 0 < k\\<rbrakk>\n    \\<Longrightarrow> xs \\<longmapsto> k \\<Join>\\<^sub>\n                      (I \\<oplus>- k - 1 \\<oplus> k - 1) =\n                      xs \\<div> k \\<Join>\\<^sub>\n                      (I \\<oplus>- k - 1 \\<oplus> k - 1 \\<oslash> k)", "apply (simp add: iMinI_ex2)+"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>x\\<in>I. x mod k = k - Suc 0; I \\<noteq> {};\n     Suc 0 < k\\<rbrakk>\n    \\<Longrightarrow> xs \\<longmapsto> k \\<Join>\\<^sub>\n                      (I \\<oplus>- k - Suc 0 \\<oplus> k - Suc 0) =\n                      xs \\<div> k \\<Join>\\<^sub>\n                      (I \\<oplus>- k - Suc 0 \\<oplus> k - Suc 0 \\<oslash> k)", "apply (subgoal_tac \"\\<And>x. x + k - Suc 0 \\<in> I \\<Longrightarrow> x mod k = 0\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<forall>x\\<in>I. x mod k = k - Suc 0; I \\<noteq> {};\n     Suc 0 < k;\n     \\<And>x. x + k - Suc 0 \\<in> I \\<Longrightarrow> x mod k = 0\\<rbrakk>\n    \\<Longrightarrow> xs \\<longmapsto> k \\<Join>\\<^sub>\n                      (I \\<oplus>- k - Suc 0 \\<oplus> k - Suc 0) =\n                      xs \\<div> k \\<Join>\\<^sub>\n                      (I \\<oplus>- k - Suc 0 \\<oplus> k - Suc 0 \\<oslash> k)\n 2. \\<And>x.\n       \\<lbrakk>\\<forall>x\\<in>I. x mod k = k - Suc 0; I \\<noteq> {};\n        Suc 0 < k; x + k - Suc 0 \\<in> I\\<rbrakk>\n       \\<Longrightarrow> x mod k = 0", "prefer 2"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>\\<forall>x\\<in>I. x mod k = k - Suc 0; I \\<noteq> {};\n        Suc 0 < k; x + k - Suc 0 \\<in> I\\<rbrakk>\n       \\<Longrightarrow> x mod k = 0\n 2. \\<lbrakk>\\<forall>x\\<in>I. x mod k = k - Suc 0; I \\<noteq> {};\n     Suc 0 < k;\n     \\<And>x. x + k - Suc 0 \\<in> I \\<Longrightarrow> x mod k = 0\\<rbrakk>\n    \\<Longrightarrow> xs \\<longmapsto> k \\<Join>\\<^sub>\n                      (I \\<oplus>- k - Suc 0 \\<oplus> k - Suc 0) =\n                      xs \\<div> k \\<Join>\\<^sub>\n                      (I \\<oplus>- k - Suc 0 \\<oplus> k - Suc 0 \\<oslash> k)", "apply (rule mod_add_eq_imp_mod_0[THEN iffD1, of \"k - Suc 0\"])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>\\<forall>x\\<in>I. x mod k = k - Suc 0; I \\<noteq> {};\n        Suc 0 < k; x + k - Suc 0 \\<in> I\\<rbrakk>\n       \\<Longrightarrow> (k - Suc 0 + x) mod k = (k - Suc 0) mod k\n 2. \\<lbrakk>\\<forall>x\\<in>I. x mod k = k - Suc 0; I \\<noteq> {};\n     Suc 0 < k;\n     \\<And>x. x + k - Suc 0 \\<in> I \\<Longrightarrow> x mod k = 0\\<rbrakk>\n    \\<Longrightarrow> xs \\<longmapsto> k \\<Join>\\<^sub>\n                      (I \\<oplus>- k - Suc 0 \\<oplus> k - Suc 0) =\n                      xs \\<div> k \\<Join>\\<^sub>\n                      (I \\<oplus>- k - Suc 0 \\<oplus> k - Suc 0 \\<oslash> k)", "apply (simp add: add.commute[of k])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>x\\<in>I. x mod k = k - Suc 0; I \\<noteq> {};\n     Suc 0 < k;\n     \\<And>x. x + k - Suc 0 \\<in> I \\<Longrightarrow> x mod k = 0\\<rbrakk>\n    \\<Longrightarrow> xs \\<longmapsto> k \\<Join>\\<^sub>\n                      (I \\<oplus>- k - Suc 0 \\<oplus> k - Suc 0) =\n                      xs \\<div> k \\<Join>\\<^sub>\n                      (I \\<oplus>- k - Suc 0 \\<oplus> k - Suc 0 \\<oslash> k)", "apply (subst iT_Plus_Div_distrib_mod_less)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<forall>x\\<in>I. x mod k = k - Suc 0; I \\<noteq> {};\n     Suc 0 < k;\n     \\<And>x. x + k - Suc 0 \\<in> I \\<Longrightarrow> x mod k = 0\\<rbrakk>\n    \\<Longrightarrow> \\<forall>x\\<in>I \\<oplus>- k - Suc 0.\n                         x mod k + (k - Suc 0) mod k < k\n 2. \\<lbrakk>\\<forall>x\\<in>I. x mod k = k - Suc 0; I \\<noteq> {};\n     Suc 0 < k;\n     \\<And>x. x + k - Suc 0 \\<in> I \\<Longrightarrow> x mod k = 0\\<rbrakk>\n    \\<Longrightarrow> xs \\<longmapsto> k \\<Join>\\<^sub>\n                      (I \\<oplus>- k - Suc 0 \\<oplus> k - Suc 0) =\n                      xs \\<div> k \\<Join>\\<^sub>\n                      (I \\<oplus>- k - Suc 0 \\<oslash> k \\<oplus>\n                       (k - Suc 0) div k)", "apply (clarsimp simp: iT_Plus_neg_mem_iff)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>x\\<in>I. x mod k = k - Suc 0; I \\<noteq> {};\n     Suc 0 < k;\n     \\<And>x. x + k - Suc 0 \\<in> I \\<Longrightarrow> x mod k = 0\\<rbrakk>\n    \\<Longrightarrow> xs \\<longmapsto> k \\<Join>\\<^sub>\n                      (I \\<oplus>- k - Suc 0 \\<oplus> k - Suc 0) =\n                      xs \\<div> k \\<Join>\\<^sub>\n                      (I \\<oplus>- k - Suc 0 \\<oslash> k \\<oplus>\n                       (k - Suc 0) div k)", "apply (simp add: iT_Plus_0)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>x\\<in>I. x mod k = k - Suc 0; I \\<noteq> {};\n     Suc 0 < k;\n     \\<And>x. x + k - Suc 0 \\<in> I \\<Longrightarrow> x mod k = 0\\<rbrakk>\n    \\<Longrightarrow> xs \\<longmapsto> k \\<Join>\\<^sub>\n                      (I \\<oplus>- k - Suc 0 \\<oplus> k - Suc 0) =\n                      xs \\<div> k \\<Join>\\<^sub>\n                      (I \\<oplus>- k - Suc 0 \\<oslash> k)", "apply (rule f_join_f_shrink_iT_Plus_iT_Div_mod[unfolded One_nat_def], simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>x\\<in>I. x mod k = k - Suc 0; I \\<noteq> {};\n     Suc 0 < k;\n     \\<And>x. x + k - Suc 0 \\<in> I \\<Longrightarrow> x mod k = 0\\<rbrakk>\n    \\<Longrightarrow> \\<forall>x\\<in>I \\<oplus>- k - Suc 0. x mod k = 0", "apply (simp add: iT_Plus_neg_mem_iff)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma i_join_i_shrink_iT_Div_mod: \"\n  \\<lbrakk> 0 < k; I \\<noteq> {}; \\<forall>x\\<in>I. x mod k = k - 1 \\<rbrakk> \\<Longrightarrow>\n  (f \\<longmapsto>\\<^sub>i k) \\<Join>\\<^sub>i I= f \\<div>\\<^sub>i k \\<Join>\\<^sub>i (I \\<oslash> k)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>0 < k; I \\<noteq> {};\n     \\<forall>x\\<in>I. x mod k = k - 1\\<rbrakk>\n    \\<Longrightarrow> f \\<longmapsto> k \\<Join>\\<^sub> I =\n                      f \\<div> k \\<Join>\\<^sub> (I \\<oslash> k)", "apply (simp (no_asm) add: ilist_eq_iff, clarify)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>0 < k; I \\<noteq> {};\n        \\<forall>x\\<in>I. x mod k = k - 1\\<rbrakk>\n       \\<Longrightarrow> (f \\<longmapsto> k \\<Join>\\<^sub> I) x =\n                         (f \\<div> k \\<Join>\\<^sub> (I \\<oslash> k)) x", "apply (simp add: i_join_nth)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>0 < k; I \\<noteq> {};\n        \\<forall>x\\<in>I. x mod k = k - Suc 0\\<rbrakk>\n       \\<Longrightarrow> (f \\<longmapsto> k) (I \\<rightarrow> x) =\n                         (f \\<div> k) ((I \\<oslash> k) \\<rightarrow> x)", "apply (simp add: i_shrink_nth_eq_i_last_message_hold_nth)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>0 < k; I \\<noteq> {};\n        \\<forall>x\\<in>I. x mod k = k - Suc 0\\<rbrakk>\n       \\<Longrightarrow> (f \\<longmapsto> k) (I \\<rightarrow> x) =\n                         (f \\<longmapsto> k)\n                          (((I \\<oslash> k) \\<rightarrow> x) * k + k -\n                           Suc 0)", "apply (simp add: iT_Div_mod_inext_nth)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>0 < k; I \\<noteq> {};\n        \\<forall>x\\<in>I. x mod k = k - Suc 0\\<rbrakk>\n       \\<Longrightarrow> (f \\<longmapsto> k) (I \\<rightarrow> x) =\n                         (f \\<longmapsto> k)\n                          ((I \\<rightarrow> x) div k * k + k - Suc 0)", "apply (drule_tac x=\"I \\<rightarrow> x\" in bspec)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>0 < k; I \\<noteq> {}\\<rbrakk>\n       \\<Longrightarrow> I \\<rightarrow> x \\<in> I\n 2. \\<And>x.\n       \\<lbrakk>0 < k; I \\<noteq> {};\n        (I \\<rightarrow> x) mod k = k - Suc 0\\<rbrakk>\n       \\<Longrightarrow> (f \\<longmapsto> k) (I \\<rightarrow> x) =\n                         (f \\<longmapsto> k)\n                          ((I \\<rightarrow> x) div k * k + k - Suc 0)", "apply (rule inext_nth_closed, assumption)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>0 < k; I \\<noteq> {};\n        (I \\<rightarrow> x) mod k = k - Suc 0\\<rbrakk>\n       \\<Longrightarrow> (f \\<longmapsto> k) (I \\<rightarrow> x) =\n                         (f \\<longmapsto> k)\n                          ((I \\<rightarrow> x) div k * k + k - Suc 0)", "apply (simp add: div_mult_cancel)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>0 < k; I \\<noteq> {};\n        (I \\<rightarrow> x) mod k = k - Suc 0\\<rbrakk>\n       \\<Longrightarrow> (f \\<longmapsto> k) (I \\<rightarrow> x) =\n                         (f \\<longmapsto> k)\n                          (Suc (I \\<rightarrow> x) - k + k - Suc 0)", "apply (subgoal_tac \"k - Suc 0 \\<le> I \\<rightarrow> x \")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>0 < k; I \\<noteq> {}; (I \\<rightarrow> x) mod k = k - Suc 0;\n        k - Suc 0 \\<le> I \\<rightarrow> x\\<rbrakk>\n       \\<Longrightarrow> (f \\<longmapsto> k) (I \\<rightarrow> x) =\n                         (f \\<longmapsto> k)\n                          (Suc (I \\<rightarrow> x) - k + k - Suc 0)\n 2. \\<And>x.\n       \\<lbrakk>0 < k; I \\<noteq> {};\n        (I \\<rightarrow> x) mod k = k - Suc 0\\<rbrakk>\n       \\<Longrightarrow> k - Suc 0 \\<le> I \\<rightarrow> x", "prefer 2"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>0 < k; I \\<noteq> {};\n        (I \\<rightarrow> x) mod k = k - Suc 0\\<rbrakk>\n       \\<Longrightarrow> k - Suc 0 \\<le> I \\<rightarrow> x\n 2. \\<And>x.\n       \\<lbrakk>0 < k; I \\<noteq> {}; (I \\<rightarrow> x) mod k = k - Suc 0;\n        k - Suc 0 \\<le> I \\<rightarrow> x\\<rbrakk>\n       \\<Longrightarrow> (f \\<longmapsto> k) (I \\<rightarrow> x) =\n                         (f \\<longmapsto> k)\n                          (Suc (I \\<rightarrow> x) - k + k - Suc 0)", "apply (rule order_trans[OF _ mod_le_dividend[where n=k]])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>0 < k; I \\<noteq> {};\n        (I \\<rightarrow> x) mod k = k - Suc 0\\<rbrakk>\n       \\<Longrightarrow> k - Suc 0 \\<le> (I \\<rightarrow> x) mod k\n 2. \\<And>x.\n       \\<lbrakk>0 < k; I \\<noteq> {}; (I \\<rightarrow> x) mod k = k - Suc 0;\n        k - Suc 0 \\<le> I \\<rightarrow> x\\<rbrakk>\n       \\<Longrightarrow> (f \\<longmapsto> k) (I \\<rightarrow> x) =\n                         (f \\<longmapsto> k)\n                          (Suc (I \\<rightarrow> x) - k + k - Suc 0)", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>0 < k; I \\<noteq> {}; (I \\<rightarrow> x) mod k = k - Suc 0;\n        k - Suc 0 \\<le> I \\<rightarrow> x\\<rbrakk>\n       \\<Longrightarrow> (f \\<longmapsto> k) (I \\<rightarrow> x) =\n                         (f \\<longmapsto> k)\n                          (Suc (I \\<rightarrow> x) - k + k - Suc 0)", "apply simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma i_f_join_i_shrink_iT_Div_mod: \"\n  \\<lbrakk> 0 < k; finite I; \\<forall>x\\<in>I. x mod k = k - 1 \\<rbrakk> \\<Longrightarrow>\n  (f \\<longmapsto>\\<^sub>i k) \\<Join>\\<^bsub>i-f\\<^esub> I = f \\<div>\\<^sub>i k \\<Join>\\<^bsub>i-f\\<^esub> (I \\<oslash> k)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>0 < k; finite I; \\<forall>x\\<in>I. x mod k = k - 1\\<rbrakk>\n    \\<Longrightarrow> f \\<longmapsto> k \\<Join>\\<^sub> I =\n                      f \\<div> k \\<Join>\\<^sub> (I \\<oslash> k)", "apply (case_tac \"I = {}\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>0 < k; finite I; \\<forall>x\\<in>I. x mod k = k - 1;\n     I = {}\\<rbrakk>\n    \\<Longrightarrow> f \\<longmapsto> k \\<Join>\\<^sub> I =\n                      f \\<div> k \\<Join>\\<^sub> (I \\<oslash> k)\n 2. \\<lbrakk>0 < k; finite I; \\<forall>x\\<in>I. x mod k = k - 1;\n     I \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> f \\<longmapsto> k \\<Join>\\<^sub> I =\n                      f \\<div> k \\<Join>\\<^sub> (I \\<oslash> k)", "apply (simp add: iT_Plus_empty iT_Div_empty i_f_join_empty)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>0 < k; finite I; \\<forall>x\\<in>I. x mod k = k - 1;\n     I \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> f \\<longmapsto> k \\<Join>\\<^sub> I =\n                      f \\<div> k \\<Join>\\<^sub> (I \\<oslash> k)", "apply (simp add: i_f_join_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>0 < k; finite I; \\<forall>x\\<in>I. x mod k = k - Suc 0;\n     I \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> f \\<longmapsto> k \\<Down> Suc (Max I) \\<Join>\\<^sub>\n                      I =\n                      f \\<div> k \\<Down>\n                      Suc (Max (I \\<oslash> k)) \\<Join>\\<^sub>\n                      (I \\<oslash> k)", "apply (simp add: iT_Div_Max)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>0 < k; finite I; \\<forall>x\\<in>I. x mod k = k - Suc 0;\n     I \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> f \\<longmapsto> k \\<Down> Suc (Max I) \\<Join>\\<^sub>\n                      I =\n                      f \\<div> k \\<Down> Suc (Max I div k) \\<Join>\\<^sub>\n                      (I \\<oslash> k)", "apply (simp add: i_last_message_hold_i_take[symmetric] i_shrink_i_take_mult[symmetric] add.commute[of k])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>0 < k; finite I; \\<forall>x\\<in>I. x mod k = k - Suc 0;\n     I \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> f \\<Down> Suc (Max I) \\<longmapsto> k \\<Join>\\<^sub>\n                      I =\n                      f \\<Down> (Max I div k * k + k) \\<div>\n                      k \\<Join>\\<^sub>\n                      (I \\<oslash> k)", "apply (simp add: div_mult_cancel)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>0 < k; finite I; \\<forall>x\\<in>I. x mod k = k - Suc 0;\n     I \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> f \\<Down> Suc (Max I) \\<longmapsto> k \\<Join>\\<^sub>\n                      I =\n                      f \\<Down> (Suc (Max I) - k + k) \\<div>\n                      k \\<Join>\\<^sub>\n                      (I \\<oslash> k)", "apply (subgoal_tac \"k - Suc 0 \\<le> Max I\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>0 < k; finite I; \\<forall>x\\<in>I. x mod k = k - Suc 0;\n     I \\<noteq> {}; k - Suc 0 \\<le> Max I\\<rbrakk>\n    \\<Longrightarrow> f \\<Down> Suc (Max I) \\<longmapsto> k \\<Join>\\<^sub>\n                      I =\n                      f \\<Down> (Suc (Max I) - k + k) \\<div>\n                      k \\<Join>\\<^sub>\n                      (I \\<oslash> k)\n 2. \\<lbrakk>0 < k; finite I; \\<forall>x\\<in>I. x mod k = k - Suc 0;\n     I \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> k - Suc 0 \\<le> Max I", "prefer 2"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>0 < k; finite I; \\<forall>x\\<in>I. x mod k = k - Suc 0;\n     I \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> k - Suc 0 \\<le> Max I\n 2. \\<lbrakk>0 < k; finite I; \\<forall>x\\<in>I. x mod k = k - Suc 0;\n     I \\<noteq> {}; k - Suc 0 \\<le> Max I\\<rbrakk>\n    \\<Longrightarrow> f \\<Down> Suc (Max I) \\<longmapsto> k \\<Join>\\<^sub>\n                      I =\n                      f \\<Down> (Suc (Max I) - k + k) \\<div>\n                      k \\<Join>\\<^sub>\n                      (I \\<oslash> k)", "apply (rule order_trans[OF _ mod_le_dividend[where n=k]])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>0 < k; finite I; \\<forall>x\\<in>I. x mod k = k - Suc 0;\n     I \\<noteq> {}\\<rbrakk>\n    \\<Longrightarrow> k - Suc 0 \\<le> Max I mod k\n 2. \\<lbrakk>0 < k; finite I; \\<forall>x\\<in>I. x mod k = k - Suc 0;\n     I \\<noteq> {}; k - Suc 0 \\<le> Max I\\<rbrakk>\n    \\<Longrightarrow> f \\<Down> Suc (Max I) \\<longmapsto> k \\<Join>\\<^sub>\n                      I =\n                      f \\<Down> (Suc (Max I) - k + k) \\<div>\n                      k \\<Join>\\<^sub>\n                      (I \\<oslash> k)", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>0 < k; finite I; \\<forall>x\\<in>I. x mod k = k - Suc 0;\n     I \\<noteq> {}; k - Suc 0 \\<le> Max I\\<rbrakk>\n    \\<Longrightarrow> f \\<Down> Suc (Max I) \\<longmapsto> k \\<Join>\\<^sub>\n                      I =\n                      f \\<Down> (Suc (Max I) - k + k) \\<div>\n                      k \\<Join>\\<^sub>\n                      (I \\<oslash> k)", "apply (simp add: f_join_f_shrink_iT_Div_mod)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma f_join_f_expand_iMOD: \"\n  0 < k \\<Longrightarrow> xs \\<odot>\\<^sub>f k \\<Join>\\<^sub>f [n * k, mod k] = xs \\<Join>\\<^sub>f [n\\<dots>]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < k \\<Longrightarrow>\n    xs \\<odot> k \\<Join>\\<^sub> [ n * k, mod k ] =\n    xs \\<Join>\\<^sub> [n\\<dots>]", "by (subst iFROM_mult[symmetric], rule f_join_f_expand_iT_Mult)"], ["", "corollary f_join_f_expand_iMOD_0: \"\n  0 < k \\<Longrightarrow> xs \\<odot>\\<^sub>f k \\<Join>\\<^sub>f [0, mod k] = xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < k \\<Longrightarrow> xs \\<odot> k \\<Join>\\<^sub> [ 0, mod k ] = xs", "apply (drule f_join_f_expand_iMOD[of k xs 0])"], ["proof (prove)\ngoal (1 subgoal):\n 1. xs \\<odot> k \\<Join>\\<^sub> [ 0 * k, mod k ] =\n    xs \\<Join>\\<^sub> [0\\<dots>] \\<Longrightarrow>\n    xs \\<odot> k \\<Join>\\<^sub> [ 0, mod k ] = xs", "apply (simp add: iFROM_0 f_join_UNIV)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma f_join_f_expand_iMODb: \"\n  0 < k \\<Longrightarrow> xs \\<odot>\\<^sub>f k \\<Join>\\<^sub>f [n * k, mod k, d] = xs \\<Join>\\<^sub>f [n\\<dots>,d]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < k \\<Longrightarrow>\n    xs \\<odot> k \\<Join>\\<^sub> [ n * k, mod k, d ] =\n    xs \\<Join>\\<^sub> [n\\<dots>,d]", "by (subst iIN_mult[symmetric], rule f_join_f_expand_iT_Mult)"], ["", "corollary f_join_f_expand_iMODb_0: \"\n  0 < k \\<Longrightarrow> xs \\<odot>\\<^sub>f k \\<Join>\\<^sub>f [0, mod k, n] = xs \\<Join>\\<^sub>f [\\<dots>n]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < k \\<Longrightarrow>\n    xs \\<odot> k \\<Join>\\<^sub> [ 0, mod k, n ] =\n    xs \\<Join>\\<^sub> [\\<dots>n]", "apply (drule f_join_f_expand_iMODb[of k xs 0 n])"], ["proof (prove)\ngoal (1 subgoal):\n 1. xs \\<odot> k \\<Join>\\<^sub> [ 0 * k, mod k, n ] =\n    xs \\<Join>\\<^sub> [0\\<dots>,n] \\<Longrightarrow>\n    xs \\<odot> k \\<Join>\\<^sub> [ 0, mod k, n ] =\n    xs \\<Join>\\<^sub> [\\<dots>n]", "apply (simp add: iIN_0_iTILL_conv)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma i_join_i_expand_iMOD: \"\n  0 < k \\<Longrightarrow> f \\<odot>\\<^sub>i k \\<Join>\\<^sub>i [n * k, mod k] = f \\<Join>\\<^sub>i [n\\<dots>]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < k \\<Longrightarrow>\n    f \\<odot> k \\<Join>\\<^sub> [ n * k, mod k ] =\n    f \\<Join>\\<^sub> [n\\<dots>]", "by (subst iFROM_mult[symmetric], rule i_join_i_expand_iT_Mult[OF _ iFROM_not_empty])"], ["", "corollary i_join_i_expand_iMOD_0: \"\n  0 < k \\<Longrightarrow> f \\<odot>\\<^sub>i k \\<Join>\\<^sub>i [0, mod k] = f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < k \\<Longrightarrow> f \\<odot> k \\<Join>\\<^sub> [ 0, mod k ] = f", "apply (drule i_join_i_expand_iMOD[of k f 0])"], ["proof (prove)\ngoal (1 subgoal):\n 1. f \\<odot> k \\<Join>\\<^sub> [ 0 * k, mod k ] =\n    f \\<Join>\\<^sub> [0\\<dots>] \\<Longrightarrow>\n    f \\<odot> k \\<Join>\\<^sub> [ 0, mod k ] = f", "apply (simp add: iFROM_0 i_join_UNIV)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma i_join_i_expand_iMODb: \"\n  0 < k \\<Longrightarrow> f \\<odot>\\<^sub>i k \\<Join>\\<^sub>i [n * k, mod k, d] = f \\<Join>\\<^sub>i [n\\<dots>,d]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < k \\<Longrightarrow>\n    f \\<odot> k \\<Join>\\<^sub> [ n * k, mod k, d ] =\n    f \\<Join>\\<^sub> [n\\<dots>,d]", "by (subst iIN_mult[symmetric], rule i_join_i_expand_iT_Mult[OF _ iIN_not_empty])"], ["", "corollary i_join_i_expand_iMODb_0: \"\n  0 < k \\<Longrightarrow> f \\<odot>\\<^sub>i k \\<Join>\\<^sub>i [0, mod k, n] = f \\<Join>\\<^sub>i [\\<dots>n]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < k \\<Longrightarrow>\n    f \\<odot> k \\<Join>\\<^sub> [ 0, mod k, n ] = f \\<Join>\\<^sub> [\\<dots>n]", "apply (drule i_join_i_expand_iMODb[of k f 0 n])"], ["proof (prove)\ngoal (1 subgoal):\n 1. f \\<odot> k \\<Join>\\<^sub> [ 0 * k, mod k, n ] =\n    f \\<Join>\\<^sub> [0\\<dots>,n] \\<Longrightarrow>\n    f \\<odot> k \\<Join>\\<^sub> [ 0, mod k, n ] = f \\<Join>\\<^sub> [\\<dots>n]", "apply (simp add: iIN_0_iTILL_conv)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma i_f_join_i_expand_iMODb: \"\n  0 < k \\<Longrightarrow> f \\<odot>\\<^sub>i k \\<Join>\\<^bsub>i-f\\<^esub> [n * k, mod k, d] = f \\<Join>\\<^bsub>i-f\\<^esub> [n\\<dots>,d]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < k \\<Longrightarrow>\n    f \\<odot> k \\<Join>\\<^sub> [ n * k, mod k, d ] =\n    f \\<Join>\\<^sub> [n\\<dots>,d]", "by (subst iIN_mult[symmetric], rule i_f_join_i_expand_iT_Mult[OF _ iIN_finite])"], ["", "corollary i_f_join_i_expand_iMODb_0: \"\n  0 < k \\<Longrightarrow> f \\<odot>\\<^sub>i k \\<Join>\\<^bsub>i-f\\<^esub> [0, mod k, n] = f \\<Join>\\<^bsub>i-f\\<^esub> [\\<dots>n]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < k \\<Longrightarrow>\n    f \\<odot> k \\<Join>\\<^sub> [ 0, mod k, n ] = f \\<Join>\\<^sub> [\\<dots>n]", "apply (drule i_f_join_i_expand_iMODb[of k f 0 n])"], ["proof (prove)\ngoal (1 subgoal):\n 1. f \\<odot> k \\<Join>\\<^sub> [ 0 * k, mod k, n ] =\n    f \\<Join>\\<^sub> [0\\<dots>,n] \\<Longrightarrow>\n    f \\<odot> k \\<Join>\\<^sub> [ 0, mod k, n ] = f \\<Join>\\<^sub> [\\<dots>n]", "apply (simp add: iIN_0_iTILL_conv)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma f_join_f_shrink_iMOD: \"\n  0 < k \\<Longrightarrow> (xs \\<longmapsto>\\<^sub>f k) \\<Join>\\<^sub>f [n * k + (k - 1), mod k] = xs \\<div>\\<^sub>f k \\<Join>\\<^sub>f [n\\<dots>]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < k \\<Longrightarrow>\n    xs \\<longmapsto> k \\<Join>\\<^sub> [ n * k + (k - 1), mod k ] =\n    xs \\<div> k \\<Join>\\<^sub> [n\\<dots>]", "apply (rule f_join_f_shrink_iT_Plus_iT_Div_mod_subst[where I=\"[n * k, mod k]\"])"], ["proof (prove)\ngoal (4 subgoals):\n 1. 0 < k \\<Longrightarrow> 0 < k\n 2. 0 < k \\<Longrightarrow> \\<forall>x\\<in>[ n * k, mod k ]. x mod k = 0\n 3. 0 < k \\<Longrightarrow>\n    [ n * k + (k - 1), mod k ] = [ n * k, mod k ] \\<oplus> k - 1\n 4. 0 < k \\<Longrightarrow> [n\\<dots>] = [ n * k, mod k ] \\<oslash> k", "apply (simp add: iMOD_iff iMOD_add iMOD_div_ge)+"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "corollary f_join_f_shrink_iMOD_0: \"\n  0 < k \\<Longrightarrow> (xs \\<longmapsto>\\<^sub>f k) \\<Join>\\<^sub>f [k - 1, mod k] = xs \\<div>\\<^sub>f k\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < k \\<Longrightarrow>\n    xs \\<longmapsto> k \\<Join>\\<^sub> [ k - 1, mod k ] = xs \\<div> k", "apply (frule f_join_f_shrink_iMOD[of k xs 0])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>0 < k;\n     xs \\<longmapsto> k \\<Join>\\<^sub> [ 0 * k + (k - 1), mod k ] =\n     xs \\<div> k \\<Join>\\<^sub> [0\\<dots>]\\<rbrakk>\n    \\<Longrightarrow> xs \\<longmapsto> k \\<Join>\\<^sub> [ k - 1, mod k ] =\n                      xs \\<div> k", "apply (simp add: iFROM_0 f_join_UNIV)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma f_join_f_shrink_iMODb: \"\n  0 < k \\<Longrightarrow> (xs \\<longmapsto>\\<^sub>f k) \\<Join>\\<^sub>f [n * k + (k - 1), mod k, d] = xs \\<div>\\<^sub>f k \\<Join>\\<^sub>f [n\\<dots>,d]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < k \\<Longrightarrow>\n    xs \\<longmapsto> k \\<Join>\\<^sub> [ n * k + (k - 1), mod k, d ] =\n    xs \\<div> k \\<Join>\\<^sub> [n\\<dots>,d]", "apply (rule f_join_f_shrink_iT_Plus_iT_Div_mod_subst[where I=\"[n * k, mod k, d]\"])"], ["proof (prove)\ngoal (4 subgoals):\n 1. 0 < k \\<Longrightarrow> 0 < k\n 2. 0 < k \\<Longrightarrow> \\<forall>x\\<in>[ n * k, mod k, d ]. x mod k = 0\n 3. 0 < k \\<Longrightarrow>\n    [ n * k + (k - 1), mod k, d ] = [ n * k, mod k, d ] \\<oplus> k - 1\n 4. 0 < k \\<Longrightarrow> [n\\<dots>,d] = [ n * k, mod k, d ] \\<oslash> k", "apply (simp add: iMODb_iff iMODb_add iMODb_div_ge)+"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "corollary f_join_f_shrink_iMODb_0: \"\n  0 < k \\<Longrightarrow> (xs \\<longmapsto>\\<^sub>f k) \\<Join>\\<^sub>f [k - 1, mod k, n] = xs \\<div>\\<^sub>f k \\<Join>\\<^sub>f [\\<dots>n]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < k \\<Longrightarrow>\n    xs \\<longmapsto> k \\<Join>\\<^sub> [ k - 1, mod k, n ] =\n    xs \\<div> k \\<Join>\\<^sub> [\\<dots>n]", "apply (frule f_join_f_shrink_iMODb[of k xs 0 n])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>0 < k;\n     xs \\<longmapsto> k \\<Join>\\<^sub> [ 0 * k + (k - 1), mod k, n ] =\n     xs \\<div> k \\<Join>\\<^sub> [0\\<dots>,n]\\<rbrakk>\n    \\<Longrightarrow> xs \\<longmapsto> k \\<Join>\\<^sub>\n                      [ k - 1, mod k, n ] =\n                      xs \\<div> k \\<Join>\\<^sub> [\\<dots>n]", "apply (simp add: iIN_0_iTILL_conv)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma i_join_i_shrink_iMOD: \"\n  0 < k \\<Longrightarrow> (f \\<longmapsto>\\<^sub>i k) \\<Join>\\<^sub>i [n * k + (k - 1), mod k] = f \\<div>\\<^sub>i k \\<Join>\\<^sub>i [n\\<dots>]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < k \\<Longrightarrow>\n    f \\<longmapsto> k \\<Join>\\<^sub> [ n * k + (k - 1), mod k ] =\n    f \\<div> k \\<Join>\\<^sub> [n\\<dots>]", "apply (rule i_join_i_shrink_iT_Plus_iT_Div_mod_subst[where I=\"[n * k, mod k]\"])"], ["proof (prove)\ngoal (5 subgoals):\n 1. 0 < k \\<Longrightarrow> 0 < k\n 2. 0 < k \\<Longrightarrow> [ n * k, mod k ] \\<noteq> {}\n 3. 0 < k \\<Longrightarrow> \\<forall>x\\<in>[ n * k, mod k ]. x mod k = 0\n 4. 0 < k \\<Longrightarrow>\n    [ n * k + (k - 1), mod k ] = [ n * k, mod k ] \\<oplus> k - 1\n 5. 0 < k \\<Longrightarrow> [n\\<dots>] = [ n * k, mod k ] \\<oslash> k", "apply (simp add: iMOD_not_empty iMOD_iff iMOD_add iMOD_div_ge)+"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "corollary i_join_i_shrink_iMOD_0: \"\n  0 < k \\<Longrightarrow> (f \\<longmapsto>\\<^sub>i k) \\<Join>\\<^sub>i [k - 1, mod k] = f \\<div>\\<^sub>i k\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < k \\<Longrightarrow>\n    f \\<longmapsto> k \\<Join>\\<^sub> [ k - 1, mod k ] = f \\<div> k", "apply (frule i_join_i_shrink_iMOD[of k f 0])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>0 < k;\n     f \\<longmapsto> k \\<Join>\\<^sub> [ 0 * k + (k - 1), mod k ] =\n     f \\<div> k \\<Join>\\<^sub> [0\\<dots>]\\<rbrakk>\n    \\<Longrightarrow> f \\<longmapsto> k \\<Join>\\<^sub> [ k - 1, mod k ] =\n                      f \\<div> k", "apply (simp add: iFROM_0 i_join_UNIV)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma i_f_join_i_shrink_iMODb: \"\n  0 < k \\<Longrightarrow> (f \\<longmapsto>\\<^sub>i k) \\<Join>\\<^bsub>i-f\\<^esub> [n * k + (k - 1), mod k, d] = f \\<div>\\<^sub>i k \\<Join>\\<^bsub>i-f\\<^esub> [n\\<dots>,d]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < k \\<Longrightarrow>\n    f \\<longmapsto> k \\<Join>\\<^sub> [ n * k + (k - 1), mod k, d ] =\n    f \\<div> k \\<Join>\\<^sub> [n\\<dots>,d]", "apply (rule i_f_join_i_shrink_iT_Plus_iT_Div_mod_subst[where I=\"[n * k, mod k, d]\"])"], ["proof (prove)\ngoal (5 subgoals):\n 1. 0 < k \\<Longrightarrow> 0 < k\n 2. 0 < k \\<Longrightarrow> finite [ n * k, mod k, d ]\n 3. 0 < k \\<Longrightarrow> \\<forall>x\\<in>[ n * k, mod k, d ]. x mod k = 0\n 4. 0 < k \\<Longrightarrow>\n    [ n * k + (k - 1), mod k, d ] = [ n * k, mod k, d ] \\<oplus> k - 1\n 5. 0 < k \\<Longrightarrow> [n\\<dots>,d] = [ n * k, mod k, d ] \\<oslash> k", "apply (simp add: iMODb_finite iMODb_iff iMODb_add iMODb_div_ge)+"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "corollary i_f_join_i_shrink_iMODb_0: \"\n  0 < k \\<Longrightarrow> (f \\<longmapsto>\\<^sub>i k) \\<Join>\\<^bsub>i-f\\<^esub> [k - 1, mod k, n] = f \\<div>\\<^sub>i k \\<Join>\\<^bsub>i-f\\<^esub> [\\<dots>n]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < k \\<Longrightarrow>\n    f \\<longmapsto> k \\<Join>\\<^sub> [ k - 1, mod k, n ] =\n    f \\<div> k \\<Join>\\<^sub> [\\<dots>n]", "apply (frule i_f_join_i_shrink_iMODb[of k f 0 n])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>0 < k;\n     f \\<longmapsto> k \\<Join>\\<^sub> [ 0 * k + (k - 1), mod k, n ] =\n     f \\<div> k \\<Join>\\<^sub> [0\\<dots>,n]\\<rbrakk>\n    \\<Longrightarrow> f \\<longmapsto> k \\<Join>\\<^sub> [ k - 1, mod k, n ] =\n                      f \\<div> k \\<Join>\\<^sub> [\\<dots>n]", "apply (simp add: iIN_0_iTILL_conv i_join_UNIV)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "subsection \\<open>Streams and temporal operators\\<close>"], ["", "lemma i_shrink_eq_NoMsg_iAll_conv: \"\n  0 < k \\<Longrightarrow> ((s \\<div>\\<^sub>i k) t = \\<NoMsg>) = (\\<box> t1 [t * k\\<dots>,k - Suc 0]. s t1 = \\<NoMsg>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < k \\<Longrightarrow>\n    ((s \\<div> k) t = NoMsg) =\n    (\\<box> t1 [t * k\\<dots>,k - Suc 0]. s t1 = NoMsg)", "apply (simp add: i_shrink_nth last_message_NoMsg_conv iAll_def Ball_def iIN_iff)"], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < k \\<Longrightarrow>\n    (\\<forall>i<k. s (t * k + i) = NoMsg) =\n    (\\<forall>x.\n        t * k \\<le> x \\<and> x \\<le> t * k + k - Suc 0 \\<longrightarrow>\n        s x = NoMsg)", "apply (rule iffI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>0 < k; \\<forall>i<k. s (t * k + i) = NoMsg\\<rbrakk>\n    \\<Longrightarrow> \\<forall>x.\n                         t * k \\<le> x \\<and>\n                         x \\<le> t * k + k - Suc 0 \\<longrightarrow>\n                         s x = NoMsg\n 2. \\<lbrakk>0 < k;\n     \\<forall>x.\n        t * k \\<le> x \\<and> x \\<le> t * k + k - Suc 0 \\<longrightarrow>\n        s x = NoMsg\\<rbrakk>\n    \\<Longrightarrow> \\<forall>i<k. s (t * k + i) = NoMsg", "apply (clarify, rename_tac i)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>i.\n       \\<lbrakk>0 < k; \\<forall>i<k. s (t * k + i) = NoMsg; t * k \\<le> i;\n        i \\<le> t * k + k - Suc 0\\<rbrakk>\n       \\<Longrightarrow> s i = NoMsg\n 2. \\<lbrakk>0 < k;\n     \\<forall>x.\n        t * k \\<le> x \\<and> x \\<le> t * k + k - Suc 0 \\<longrightarrow>\n        s x = NoMsg\\<rbrakk>\n    \\<Longrightarrow> \\<forall>i<k. s (t * k + i) = NoMsg", "apply (drule_tac x=\"i - t * k\" in spec)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>i.\n       \\<lbrakk>0 < k; t * k \\<le> i; i \\<le> t * k + k - Suc 0;\n        i - t * k < k \\<longrightarrow>\n        s (t * k + (i - t * k)) = NoMsg\\<rbrakk>\n       \\<Longrightarrow> s i = NoMsg\n 2. \\<lbrakk>0 < k;\n     \\<forall>x.\n        t * k \\<le> x \\<and> x \\<le> t * k + k - Suc 0 \\<longrightarrow>\n        s x = NoMsg\\<rbrakk>\n    \\<Longrightarrow> \\<forall>i<k. s (t * k + i) = NoMsg", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>0 < k;\n     \\<forall>x.\n        t * k \\<le> x \\<and> x \\<le> t * k + k - Suc 0 \\<longrightarrow>\n        s x = NoMsg\\<rbrakk>\n    \\<Longrightarrow> \\<forall>i<k. s (t * k + i) = NoMsg", "apply (clarify, rename_tac i)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i.\n       \\<lbrakk>0 < k;\n        \\<forall>x.\n           t * k \\<le> x \\<and> x \\<le> t * k + k - Suc 0 \\<longrightarrow>\n           s x = NoMsg;\n        i < k\\<rbrakk>\n       \\<Longrightarrow> s (t * k + i) = NoMsg", "apply (drule_tac x=\"t * k + i\" in spec)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i.\n       \\<lbrakk>0 < k; i < k;\n        t * k \\<le> t * k + i \\<and>\n        t * k + i \\<le> t * k + k - Suc 0 \\<longrightarrow>\n        s (t * k + i) = NoMsg\\<rbrakk>\n       \\<Longrightarrow> s (t * k + i) = NoMsg", "apply simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma i_shrink_eq_NoMsg_iAll_conv2: \"\n  0 < k \\<Longrightarrow> ((s \\<div>\\<^sub>i k) t = \\<NoMsg>) = (\\<box> t1 [\\<dots>k - 1] \\<oplus> (t * k). s t1 = \\<NoMsg>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < k \\<Longrightarrow>\n    ((s \\<div> k) t = NoMsg) =\n    (\\<box> t1 [\\<dots>k - 1] \\<oplus> t * k. s t1 = NoMsg)", "by (simp add: iT_add i_shrink_eq_NoMsg_iAll_conv)"], ["", "lemma i_shrink_eq_Msg_iEx_iAll_conv: \"\n  \\<lbrakk> 0 < k; m \\<noteq> \\<NoMsg> \\<rbrakk> \\<Longrightarrow>\n  ((s \\<div>\\<^sub>i k) t = m) =\n  (\\<diamond> t1 [t * k\\<dots>,k - Suc 0]. s t1 = m \\<and>\n    (\\<box> t2 [Suc t1\\<dots>]. t2 \\<le> t * k + k - Suc 0 \\<longrightarrow> s t2 = \\<NoMsg>))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>0 < k; m \\<noteq> NoMsg\\<rbrakk>\n    \\<Longrightarrow> ((s \\<div> k) t = m) =\n                      (\\<diamond> t1 [t * k\\<dots>,k - Suc 0].\n                          s t1 = m \\<and>\n                          (\\<box> t2 [Suc t1\\<dots>].\n                              t2 \\<le> t * k + k - Suc 0 \\<longrightarrow>\n                              s t2 = NoMsg))", "apply (simp add: i_shrink_nth last_message_conv)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>0 < k; m \\<noteq> NoMsg\\<rbrakk>\n    \\<Longrightarrow> (\\<exists>i<k.\n                          s \\<Up> (t * k) \\<Down> k ! i = m \\<and>\n                          (\\<forall>j<k.\n                              i < j \\<longrightarrow>\n                              s (t * k + j) = NoMsg)) =\n                      (\\<diamond> t1 [t * k\\<dots>,k - Suc 0].\n                          s t1 = m \\<and>\n                          (\\<box> t2 [Suc t1\\<dots>].\n                              t2 \\<le> t * k + k - Suc 0 \\<longrightarrow>\n                              s t2 = NoMsg))", "apply (simp add: iAll_def iEx_def Ball_def Bex_def iIN_iff iFROM_iff)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>0 < k; m \\<noteq> NoMsg\\<rbrakk>\n    \\<Longrightarrow> (\\<exists>i<k.\n                          s \\<Up> (t * k) \\<Down> k ! i = m \\<and>\n                          (\\<forall>j<k.\n                              i < j \\<longrightarrow>\n                              s (t * k + j) = NoMsg)) =\n                      (\\<exists>x\\<ge>t * k.\n                          x \\<le> t * k + k - Suc 0 \\<and>\n                          s x = m \\<and>\n                          (\\<forall>xa\\<ge>Suc x.\n                              xa \\<le> t * k + k - Suc 0 \\<longrightarrow>\n                              s xa = NoMsg))", "apply (rule iffI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>0 < k; m \\<noteq> NoMsg;\n     \\<exists>i<k.\n        s \\<Up> (t * k) \\<Down> k ! i = m \\<and>\n        (\\<forall>j<k.\n            i < j \\<longrightarrow> s (t * k + j) = NoMsg)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>x\\<ge>t * k.\n                         x \\<le> t * k + k - Suc 0 \\<and>\n                         s x = m \\<and>\n                         (\\<forall>xa\\<ge>Suc x.\n                             xa \\<le> t * k + k - Suc 0 \\<longrightarrow>\n                             s xa = NoMsg)\n 2. \\<lbrakk>0 < k; m \\<noteq> NoMsg;\n     \\<exists>x\\<ge>t * k.\n        x \\<le> t * k + k - Suc 0 \\<and>\n        s x = m \\<and>\n        (\\<forall>xa\\<ge>Suc x.\n            xa \\<le> t * k + k - Suc 0 \\<longrightarrow>\n            s xa = NoMsg)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>i<k.\n                         s \\<Up> (t * k) \\<Down> k ! i = m \\<and>\n                         (\\<forall>j<k.\n                             i < j \\<longrightarrow> s (t * k + j) = NoMsg)", "apply (clarsimp, rename_tac i)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>i.\n       \\<lbrakk>s (t * k + i) \\<noteq> NoMsg; i < k;\n        \\<forall>j<k. i < j \\<longrightarrow> s (t * k + j) = NoMsg;\n        m = s (t * k + i)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x\\<ge>t * k.\n                            x \\<le> t * k + k - Suc 0 \\<and>\n                            s x = s (t * k + i) \\<and>\n                            (\\<forall>xa\\<ge>Suc x.\n                                xa \\<le> t * k + k - Suc 0 \\<longrightarrow>\n                                s xa = NoMsg)\n 2. \\<lbrakk>0 < k; m \\<noteq> NoMsg;\n     \\<exists>x\\<ge>t * k.\n        x \\<le> t * k + k - Suc 0 \\<and>\n        s x = m \\<and>\n        (\\<forall>xa\\<ge>Suc x.\n            xa \\<le> t * k + k - Suc 0 \\<longrightarrow>\n            s xa = NoMsg)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>i<k.\n                         s \\<Up> (t * k) \\<Down> k ! i = m \\<and>\n                         (\\<forall>j<k.\n                             i < j \\<longrightarrow> s (t * k + j) = NoMsg)", "apply (rule_tac x=\"t * k + i\" in exI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>i.\n       \\<lbrakk>s (t * k + i) \\<noteq> NoMsg; i < k;\n        \\<forall>j<k. i < j \\<longrightarrow> s (t * k + j) = NoMsg;\n        m = s (t * k + i)\\<rbrakk>\n       \\<Longrightarrow> t * k \\<le> t * k + i \\<and>\n                         t * k + i \\<le> t * k + k - Suc 0 \\<and>\n                         s (t * k + i) = s (t * k + i) \\<and>\n                         (\\<forall>x\\<ge>Suc (t * k + i).\n                             x \\<le> t * k + k - Suc 0 \\<longrightarrow>\n                             s x = NoMsg)\n 2. \\<lbrakk>0 < k; m \\<noteq> NoMsg;\n     \\<exists>x\\<ge>t * k.\n        x \\<le> t * k + k - Suc 0 \\<and>\n        s x = m \\<and>\n        (\\<forall>xa\\<ge>Suc x.\n            xa \\<le> t * k + k - Suc 0 \\<longrightarrow>\n            s xa = NoMsg)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>i<k.\n                         s \\<Up> (t * k) \\<Down> k ! i = m \\<and>\n                         (\\<forall>j<k.\n                             i < j \\<longrightarrow> s (t * k + j) = NoMsg)", "apply (simp add: diff_add_assoc less_imp_le_pred del: add_diff_assoc)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>i.\n       \\<lbrakk>s (t * k + i) \\<noteq> NoMsg; i < k;\n        \\<forall>j<k. i < j \\<longrightarrow> s (t * k + j) = NoMsg;\n        m = s (t * k + i)\\<rbrakk>\n       \\<Longrightarrow> \\<forall>x\\<ge>Suc (t * k + i).\n                            x \\<le> t * k + (k - Suc 0) \\<longrightarrow>\n                            s x = NoMsg\n 2. \\<lbrakk>0 < k; m \\<noteq> NoMsg;\n     \\<exists>x\\<ge>t * k.\n        x \\<le> t * k + k - Suc 0 \\<and>\n        s x = m \\<and>\n        (\\<forall>xa\\<ge>Suc x.\n            xa \\<le> t * k + k - Suc 0 \\<longrightarrow>\n            s xa = NoMsg)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>i<k.\n                         s \\<Up> (t * k) \\<Down> k ! i = m \\<and>\n                         (\\<forall>j<k.\n                             i < j \\<longrightarrow> s (t * k + j) = NoMsg)", "apply (clarsimp, rename_tac j)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>i j.\n       \\<lbrakk>s (t * k + i) \\<noteq> NoMsg; i < k;\n        \\<forall>j<k. i < j \\<longrightarrow> s (t * k + j) = NoMsg;\n        m = s (t * k + i); Suc (t * k + i) \\<le> j;\n        j \\<le> t * k + k - Suc 0\\<rbrakk>\n       \\<Longrightarrow> s j = NoMsg\n 2. \\<lbrakk>0 < k; m \\<noteq> NoMsg;\n     \\<exists>x\\<ge>t * k.\n        x \\<le> t * k + k - Suc 0 \\<and>\n        s x = m \\<and>\n        (\\<forall>xa\\<ge>Suc x.\n            xa \\<le> t * k + k - Suc 0 \\<longrightarrow>\n            s xa = NoMsg)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>i<k.\n                         s \\<Up> (t * k) \\<Down> k ! i = m \\<and>\n                         (\\<forall>j<k.\n                             i < j \\<longrightarrow> s (t * k + j) = NoMsg)", "apply (drule_tac x=\"j - t * k\" in spec)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>i j.\n       \\<lbrakk>s (t * k + i) \\<noteq> NoMsg; i < k; m = s (t * k + i);\n        Suc (t * k + i) \\<le> j; j \\<le> t * k + k - Suc 0;\n        j - t * k < k \\<longrightarrow>\n        i < j - t * k \\<longrightarrow>\n        s (t * k + (j - t * k)) = NoMsg\\<rbrakk>\n       \\<Longrightarrow> s j = NoMsg\n 2. \\<lbrakk>0 < k; m \\<noteq> NoMsg;\n     \\<exists>x\\<ge>t * k.\n        x \\<le> t * k + k - Suc 0 \\<and>\n        s x = m \\<and>\n        (\\<forall>xa\\<ge>Suc x.\n            xa \\<le> t * k + k - Suc 0 \\<longrightarrow>\n            s xa = NoMsg)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>i<k.\n                         s \\<Up> (t * k) \\<Down> k ! i = m \\<and>\n                         (\\<forall>j<k.\n                             i < j \\<longrightarrow> s (t * k + j) = NoMsg)", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>0 < k; m \\<noteq> NoMsg;\n     \\<exists>x\\<ge>t * k.\n        x \\<le> t * k + k - Suc 0 \\<and>\n        s x = m \\<and>\n        (\\<forall>xa\\<ge>Suc x.\n            xa \\<le> t * k + k - Suc 0 \\<longrightarrow>\n            s xa = NoMsg)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>i<k.\n                         s \\<Up> (t * k) \\<Down> k ! i = m \\<and>\n                         (\\<forall>j<k.\n                             i < j \\<longrightarrow> s (t * k + j) = NoMsg)", "apply (clarsimp, rename_tac i)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i.\n       \\<lbrakk>0 < k; s i \\<noteq> NoMsg; t * k \\<le> i;\n        i \\<le> t * k + k - Suc 0;\n        \\<forall>x\\<ge>Suc i.\n           x \\<le> t * k + k - Suc 0 \\<longrightarrow> s x = NoMsg;\n        m = s i\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ia<k.\n                            s \\<Up> (t * k) \\<Down> k ! ia = s i \\<and>\n                            (\\<forall>j<k.\n                                ia < j \\<longrightarrow>\n                                s (t * k + j) = NoMsg)", "apply (rule_tac x=\"i - t * k\" in exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i.\n       \\<lbrakk>0 < k; s i \\<noteq> NoMsg; t * k \\<le> i;\n        i \\<le> t * k + k - Suc 0;\n        \\<forall>x\\<ge>Suc i.\n           x \\<le> t * k + k - Suc 0 \\<longrightarrow> s x = NoMsg;\n        m = s i\\<rbrakk>\n       \\<Longrightarrow> i - t * k < k \\<and>\n                         s \\<Up> (t * k) \\<Down> k ! (i - t * k) =\n                         s i \\<and>\n                         (\\<forall>j<k.\n                             i - t * k < j \\<longrightarrow>\n                             s (t * k + j) = NoMsg)", "apply simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma i_shrink_eq_Msg_iEx_iAll_conv2: \"\n  \\<lbrakk> 0 < k; m \\<noteq> \\<NoMsg> \\<rbrakk> \\<Longrightarrow>\n  ((s \\<div>\\<^sub>i k) t = m) =\n  (\\<diamond> t1 [\\<dots>k - 1] \\<oplus> (t * k). s t1 = m \\<and>\n    (\\<box> t2 [1\\<dots>] \\<oplus> t1 . t2 \\<le> t * k + k - 1 \\<longrightarrow> s t2 = \\<NoMsg>))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>0 < k; m \\<noteq> NoMsg\\<rbrakk>\n    \\<Longrightarrow> ((s \\<div> k) t = m) =\n                      (\\<diamond> t1 [\\<dots>k - 1] \\<oplus> t * k.\n                          s t1 = m \\<and>\n                          (\\<box> t2 [1\\<dots>] \\<oplus> t1.\n                              t2 \\<le> t * k + k - 1 \\<longrightarrow>\n                              s t2 = NoMsg))", "by (simp add: iT_add i_shrink_eq_Msg_iEx_iAll_conv)"], ["", "lemma i_shrink_eq_Msg_iEx_iAll_cut_greater_conv: \"\n  \\<lbrakk> 0 < k; m \\<noteq> \\<NoMsg> \\<rbrakk> \\<Longrightarrow>\n  ((s \\<div>\\<^sub>i k) t = m) =\n  (\\<diamond> t1 [t * k\\<dots>,k - Suc 0]. s t1 = m \\<and>\n    (\\<box> t2 [t * k\\<dots>,k - Suc 0] \\<down>> t1. s t2 = \\<NoMsg>))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>0 < k; m \\<noteq> NoMsg\\<rbrakk>\n    \\<Longrightarrow> ((s \\<div> k) t = m) =\n                      (\\<diamond> t1 [t * k\\<dots>,k - Suc 0].\n                          s t1 = m \\<and>\n                          (\\<box> t2 [t * k\\<dots>,k - Suc 0] \\<down>> t1.\n                              s t2 = NoMsg))", "apply (simp add: i_shrink_eq_Msg_iEx_iAll_conv)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>0 < k; m \\<noteq> NoMsg\\<rbrakk>\n    \\<Longrightarrow> (\\<diamond> t1 [t * k\\<dots>,k - Suc 0].\n                          s t1 = m \\<and>\n                          (\\<box> t2 [Suc t1\\<dots>].\n                              t2 \\<le> t * k + k - Suc 0 \\<longrightarrow>\n                              s t2 = NoMsg)) =\n                      (\\<diamond> t1 [t * k\\<dots>,k - Suc 0].\n                          s t1 = m \\<and>\n                          (\\<box> t2 [t * k\\<dots>,k - Suc 0] \\<down>> t1.\n                              s t2 = NoMsg))", "apply (simp add: iIN_cut_greater iEx_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>0 < k; m \\<noteq> NoMsg\\<rbrakk>\n    \\<Longrightarrow> (\\<exists>ta\\<in>[t * k\\<dots>,k - Suc 0].\n                          s ta = m \\<and>\n                          (\\<box> t2 [Suc ta\\<dots>].\n                              t2 \\<le> t * k + k - Suc 0 \\<longrightarrow>\n                              s t2 = NoMsg)) =\n                      (\\<exists>ta\\<in>[t * k\\<dots>,k - Suc 0].\n                          (ta < t * k + k - Suc 0 \\<longrightarrow>\n                           (ta < t * k \\<longrightarrow>\n                            s ta = m \\<and>\n                            (\\<box> t2 [t * k\\<dots>,k - Suc 0].\n                                s t2 = NoMsg)) \\<and>\n                           (\\<not> ta < t * k \\<longrightarrow>\n                            s ta = m \\<and>\n                            (\\<box> t2 [Suc\n   ta\\<dots>,t * k + k - Suc (Suc ta)].\n                                s t2 = NoMsg))) \\<and>\n                          (\\<not> ta < t * k + k - Suc 0 \\<longrightarrow>\n                           (ta < t * k \\<longrightarrow>\n                            s ta = m \\<and>\n                            (\\<box> t2 [t * k\\<dots>,0].\n                                s t2 = NoMsg)) \\<and>\n                           (\\<not> ta < t * k \\<longrightarrow> s ta = m)))", "apply (rule bex_cong2[OF subset_refl])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>0 < k; m \\<noteq> NoMsg\\<rbrakk>\n    \\<Longrightarrow> \\<forall>ta\\<in>[t * k\\<dots>,k - Suc 0].\n                         (s ta = m \\<and>\n                          (\\<box> t2 [Suc ta\\<dots>].\n                              t2 \\<le> t * k + k - Suc 0 \\<longrightarrow>\n                              s t2 = NoMsg)) =\n                         ((ta < t * k + k - Suc 0 \\<longrightarrow>\n                           (ta < t * k \\<longrightarrow>\n                            s ta = m \\<and>\n                            (\\<box> t2 [t * k\\<dots>,k - Suc 0].\n                                s t2 = NoMsg)) \\<and>\n                           (\\<not> ta < t * k \\<longrightarrow>\n                            s ta = m \\<and>\n                            (\\<box> t2 [Suc\n   ta\\<dots>,t * k + k - Suc (Suc ta)].\n                                s t2 = NoMsg))) \\<and>\n                          (\\<not> ta < t * k + k - Suc 0 \\<longrightarrow>\n                           (ta < t * k \\<longrightarrow>\n                            s ta = m \\<and>\n                            (\\<box> t2 [t * k\\<dots>,0].\n                                s t2 = NoMsg)) \\<and>\n                           (\\<not> ta < t * k \\<longrightarrow> s ta = m)))", "apply (force simp: iAll_def Ball_def iT_iff)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma i_shrink_eq_Msg_iEx_iAll_cut_greater_conv2: \"\n  \\<lbrakk> 0 < k; m \\<noteq> \\<NoMsg> \\<rbrakk> \\<Longrightarrow>\n  ((s \\<div>\\<^sub>i k) t = m) =\n  (\\<diamond> t1 [\\<dots>k - 1] \\<oplus> (t * k). s t1 = m \\<and>\n    (\\<box> t2 ([\\<dots>k - 1] \\<oplus> (t * k)) \\<down>> t1. s t2 = \\<NoMsg>))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>0 < k; m \\<noteq> NoMsg\\<rbrakk>\n    \\<Longrightarrow> ((s \\<div> k) t = m) =\n                      (\\<diamond> t1 [\\<dots>k - 1] \\<oplus> t * k.\n                          s t1 = m \\<and>\n                          (\\<box> t2 ([\\<dots>k - 1] \\<oplus>\nt * k) \\<down>>\n                                     t1.\n                              s t2 = NoMsg))", "by (simp add: iT_add i_shrink_eq_Msg_iEx_iAll_cut_greater_conv)"], ["", "lemma i_shrink_eq_Msg_iSince_conv: \"\n  \\<lbrakk> 0 < k; m \\<noteq> \\<NoMsg> \\<rbrakk> \\<Longrightarrow>\n  ((s \\<div>\\<^sub>i k) t = m) =\n  (s t2 = \\<NoMsg>. t2 \\<S> t1 [t * k\\<dots>,k - Suc 0]. s t1 = m)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>0 < k; m \\<noteq> NoMsg\\<rbrakk>\n    \\<Longrightarrow> ((s \\<div> k) t = m) =\n                      (s t2 = NoMsg. t2 \\<S> t1 [t * k\\<dots>,k - Suc 0].\n                       s t1 = m)", "by (simp add: iSince_def iIN_cut_greater i_shrink_eq_Msg_iEx_iAll_cut_greater_conv)"], ["", "lemma i_shrink_eq_Msg_iSince_conv2: \"\n  \\<lbrakk> 0 < k; m \\<noteq> \\<NoMsg> \\<rbrakk> \\<Longrightarrow>\n  ((s \\<div>\\<^sub>i k) t = m) =\n  (s t2 = \\<NoMsg>. t2 \\<S> t1 [\\<dots>k - 1] \\<oplus> (t * k). s t1 = m)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>0 < k; m \\<noteq> NoMsg\\<rbrakk>\n    \\<Longrightarrow> ((s \\<div> k) t = m) =\n                      (s t2 = NoMsg.\n                       t2 \\<S> t1 [\\<dots>k - 1] \\<oplus> t * k. s t1 = m)", "by (simp add: iT_add i_shrink_eq_Msg_iSince_conv)"], ["", "lemma iT_Mult_iAll_i_expand_nth_iff:\n  \"0 < k \\<Longrightarrow> (\\<box> t (I \\<otimes> k). P ((f \\<odot>\\<^sub>i k) t)) = (\\<box> t I. P (f t))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < k \\<Longrightarrow>\n    (\\<box> t I \\<otimes> k. P ((f \\<odot> k) t)) = (\\<box> t I. P (f t))", "apply (rule iffI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>0 < k; \\<box> t I \\<otimes> k. P ((f \\<odot> k) t)\\<rbrakk>\n    \\<Longrightarrow> \\<box> t I. P (f t)\n 2. \\<lbrakk>0 < k; \\<box> t I. P (f t)\\<rbrakk>\n    \\<Longrightarrow> \\<box> t I \\<otimes> k. P ((f \\<odot> k) t)", "apply clarify"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>t.\n       \\<lbrakk>0 < k; \\<box> t I \\<otimes> k. P ((f \\<odot> k) t);\n        t \\<in> I\\<rbrakk>\n       \\<Longrightarrow> P (f t)\n 2. \\<lbrakk>0 < k; \\<box> t I. P (f t)\\<rbrakk>\n    \\<Longrightarrow> \\<box> t I \\<otimes> k. P ((f \\<odot> k) t)", "apply (drule_tac t=\"t * k\" in ispec)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>t.\n       \\<lbrakk>0 < k; t \\<in> I\\<rbrakk>\n       \\<Longrightarrow> t * k \\<in> I \\<otimes> k\n 2. \\<And>t.\n       \\<lbrakk>0 < k; t \\<in> I; P ((f \\<odot> k) (t * k))\\<rbrakk>\n       \\<Longrightarrow> P (f t)\n 3. \\<lbrakk>0 < k; \\<box> t I. P (f t)\\<rbrakk>\n    \\<Longrightarrow> \\<box> t I \\<otimes> k. P ((f \\<odot> k) t)", "apply (simp add: iT_Mult_mem_iff2)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>t.\n       \\<lbrakk>0 < k; t \\<in> I; P ((f \\<odot> k) (t * k))\\<rbrakk>\n       \\<Longrightarrow> P (f t)\n 2. \\<lbrakk>0 < k; \\<box> t I. P (f t)\\<rbrakk>\n    \\<Longrightarrow> \\<box> t I \\<otimes> k. P ((f \\<odot> k) t)", "apply (simp add: i_expand_nth_mult)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>0 < k; \\<box> t I. P (f t)\\<rbrakk>\n    \\<Longrightarrow> \\<box> t I \\<otimes> k. P ((f \\<odot> k) t)", "apply (fastforce simp: iT_Mult_mem_iff mult.commute[of k] i_expand_nth_mod_eq_0)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "text \\<open>Streams and temporal operators cycle start/finish events\\<close>"], ["", "lemma i_shrink_eq_NoMsg_iAll_start_event_conv: \"\n  \\<lbrakk> 0 < k; \\<And>t. event t = (t mod k = 0); t0 = t * k \\<rbrakk> \\<Longrightarrow>\n  ((s \\<div>\\<^sub>i k) t = \\<NoMsg>) =\n  (s t0 = \\<NoMsg> \\<and> (\\<circle> t' t0 [0\\<dots>]. (s t1 = \\<NoMsg>. t1 \\<U> t2 ([0\\<dots>] \\<oplus> t'). event t2)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>0 < k; \\<And>t. event t = (t mod k = 0); t0 = t * k\\<rbrakk>\n    \\<Longrightarrow> ((s \\<div> k) t = NoMsg) =\n                      (s t0 = NoMsg \\<and>\n                       (\\<circle> t' t0 [0\\<dots>].\n                           s t1 = NoMsg. t1 \\<U> t2 [0\\<dots>] \\<oplus> t'.\n                           event t2))", "apply (case_tac \"k = Suc 0\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>0 < k; \\<And>t. event t = (t mod k = 0); t0 = t * k;\n     k = Suc 0\\<rbrakk>\n    \\<Longrightarrow> ((s \\<div> k) t = NoMsg) =\n                      (s t0 = NoMsg \\<and>\n                       (\\<circle> t' t0 [0\\<dots>].\n                           s t1 = NoMsg. t1 \\<U> t2 [0\\<dots>] \\<oplus> t'.\n                           event t2))\n 2. \\<lbrakk>0 < k; \\<And>t. event t = (t mod k = 0); t0 = t * k;\n     k \\<noteq> Suc 0\\<rbrakk>\n    \\<Longrightarrow> ((s \\<div> k) t = NoMsg) =\n                      (s t0 = NoMsg \\<and>\n                       (\\<circle> t' t0 [0\\<dots>].\n                           s t1 = NoMsg. t1 \\<U> t2 [0\\<dots>] \\<oplus> t'.\n                           event t2))", "apply (simp add: iT_add iT_not_empty iNext_True)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>0 < k; \\<And>t. event t = (t mod k = 0); t0 = t * k;\n     k \\<noteq> Suc 0\\<rbrakk>\n    \\<Longrightarrow> ((s \\<div> k) t = NoMsg) =\n                      (s t0 = NoMsg \\<and>\n                       (\\<circle> t' t0 [0\\<dots>].\n                           s t1 = NoMsg. t1 \\<U> t2 [0\\<dots>] \\<oplus> t'.\n                           event t2))", "apply (drule neq_le_trans[OF not_sym], simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>0 < k; \\<And>t. event t = (t mod k = 0); t0 = t * k;\n     Suc 0 < k\\<rbrakk>\n    \\<Longrightarrow> ((s \\<div> k) t = NoMsg) =\n                      (s t0 = NoMsg \\<and>\n                       (\\<circle> t' t0 [0\\<dots>].\n                           s t1 = NoMsg. t1 \\<U> t2 [0\\<dots>] \\<oplus> t'.\n                           event t2))", "apply (simp add: i_shrink_eq_NoMsg_iAll_conv iTL_defs Ball_def Bex_def iT_add iT_iff iFROM_cut_less iFROM_inext)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>t. event t = (t mod k = 0); t0 = t * k;\n     Suc 0 < k\\<rbrakk>\n    \\<Longrightarrow> (\\<forall>x.\n                          t * k \\<le> x \\<and>\n                          x \\<le> t * k + k - Suc 0 \\<longrightarrow>\n                          s x = NoMsg) =\n                      (s (t * k) = NoMsg \\<and>\n                       (\\<exists>x.\n                           (x = Suc (t * k) \\<longrightarrow>\n                            Suc (t * k) mod k = 0) \\<and>\n                           (x \\<noteq> Suc (t * k) \\<longrightarrow>\n                            Suc (t * k) \\<le> x \\<and>\n                            x mod k = 0 \\<and>\n                            (\\<forall>xa.\n                                Suc (t * k) \\<le> xa \\<and>\n                                xa \\<le> Suc\n    (t * k + (x - Suc (Suc (t * k)))) \\<longrightarrow>\n                                s xa = NoMsg))))", "apply (rule iffI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>t. event t = (t mod k = 0); t0 = t * k; Suc 0 < k;\n     \\<forall>x.\n        t * k \\<le> x \\<and> x \\<le> t * k + k - Suc 0 \\<longrightarrow>\n        s x = NoMsg\\<rbrakk>\n    \\<Longrightarrow> s (t * k) = NoMsg \\<and>\n                      (\\<exists>x.\n                          (x = Suc (t * k) \\<longrightarrow>\n                           Suc (t * k) mod k = 0) \\<and>\n                          (x \\<noteq> Suc (t * k) \\<longrightarrow>\n                           Suc (t * k) \\<le> x \\<and>\n                           x mod k = 0 \\<and>\n                           (\\<forall>xa.\n                               Suc (t * k) \\<le> xa \\<and>\n                               xa \\<le> Suc\n   (t * k + (x - Suc (Suc (t * k)))) \\<longrightarrow>\n                               s xa = NoMsg)))\n 2. \\<lbrakk>\\<And>t. event t = (t mod k = 0); t0 = t * k; Suc 0 < k;\n     s (t * k) = NoMsg \\<and>\n     (\\<exists>x.\n         (x = Suc (t * k) \\<longrightarrow> Suc (t * k) mod k = 0) \\<and>\n         (x \\<noteq> Suc (t * k) \\<longrightarrow>\n          Suc (t * k) \\<le> x \\<and>\n          x mod k = 0 \\<and>\n          (\\<forall>xa.\n              Suc (t * k) \\<le> xa \\<and>\n              xa \\<le> Suc (t * k +\n                            (x - Suc (Suc (t * k)))) \\<longrightarrow>\n              s xa = NoMsg)))\\<rbrakk>\n    \\<Longrightarrow> \\<forall>x.\n                         t * k \\<le> x \\<and>\n                         x \\<le> t * k + k - Suc 0 \\<longrightarrow>\n                         s x = NoMsg", "apply simp"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>t. event t = (t mod k = 0); t0 = t * k; Suc 0 < k;\n     \\<forall>x.\n        t * k \\<le> x \\<and> x \\<le> t * k + k - Suc 0 \\<longrightarrow>\n        s x = NoMsg\\<rbrakk>\n    \\<Longrightarrow> \\<exists>x.\n                         (x = Suc (t * k) \\<longrightarrow>\n                          Suc (t * k) mod k = 0) \\<and>\n                         (x \\<noteq> Suc (t * k) \\<longrightarrow>\n                          Suc (t * k) \\<le> x \\<and>\n                          x mod k = 0 \\<and>\n                          (\\<forall>xa.\n                              Suc (t * k) \\<le> xa \\<and>\n                              xa \\<le> Suc\n  (t * k + (x - Suc (Suc (t * k)))) \\<longrightarrow>\n                              s xa = NoMsg))\n 2. \\<lbrakk>\\<And>t. event t = (t mod k = 0); t0 = t * k; Suc 0 < k;\n     s (t * k) = NoMsg \\<and>\n     (\\<exists>x.\n         (x = Suc (t * k) \\<longrightarrow> Suc (t * k) mod k = 0) \\<and>\n         (x \\<noteq> Suc (t * k) \\<longrightarrow>\n          Suc (t * k) \\<le> x \\<and>\n          x mod k = 0 \\<and>\n          (\\<forall>xa.\n              Suc (t * k) \\<le> xa \\<and>\n              xa \\<le> Suc (t * k +\n                            (x - Suc (Suc (t * k)))) \\<longrightarrow>\n              s xa = NoMsg)))\\<rbrakk>\n    \\<Longrightarrow> \\<forall>x.\n                         t * k \\<le> x \\<and>\n                         x \\<le> t * k + k - Suc 0 \\<longrightarrow>\n                         s x = NoMsg", "apply (rule_tac x=\"t * k + k\" in exI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>t. event t = (t mod k = 0); t0 = t * k; Suc 0 < k;\n     \\<forall>x.\n        t * k \\<le> x \\<and> x \\<le> t * k + k - Suc 0 \\<longrightarrow>\n        s x = NoMsg\\<rbrakk>\n    \\<Longrightarrow> (t * k + k = Suc (t * k) \\<longrightarrow>\n                       Suc (t * k) mod k = 0) \\<and>\n                      (t * k + k \\<noteq> Suc (t * k) \\<longrightarrow>\n                       Suc (t * k) \\<le> t * k + k \\<and>\n                       (t * k + k) mod k = 0 \\<and>\n                       (\\<forall>x.\n                           Suc (t * k) \\<le> x \\<and>\n                           x \\<le> Suc (t * k +\n  (t * k + k - Suc (Suc (t * k)))) \\<longrightarrow>\n                           s x = NoMsg))\n 2. \\<lbrakk>\\<And>t. event t = (t mod k = 0); t0 = t * k; Suc 0 < k;\n     s (t * k) = NoMsg \\<and>\n     (\\<exists>x.\n         (x = Suc (t * k) \\<longrightarrow> Suc (t * k) mod k = 0) \\<and>\n         (x \\<noteq> Suc (t * k) \\<longrightarrow>\n          Suc (t * k) \\<le> x \\<and>\n          x mod k = 0 \\<and>\n          (\\<forall>xa.\n              Suc (t * k) \\<le> xa \\<and>\n              xa \\<le> Suc (t * k +\n                            (x - Suc (Suc (t * k)))) \\<longrightarrow>\n              s xa = NoMsg)))\\<rbrakk>\n    \\<Longrightarrow> \\<forall>x.\n                         t * k \\<le> x \\<and>\n                         x \\<le> t * k + k - Suc 0 \\<longrightarrow>\n                         s x = NoMsg", "apply fastforce"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>t. event t = (t mod k = 0); t0 = t * k; Suc 0 < k;\n     s (t * k) = NoMsg \\<and>\n     (\\<exists>x.\n         (x = Suc (t * k) \\<longrightarrow> Suc (t * k) mod k = 0) \\<and>\n         (x \\<noteq> Suc (t * k) \\<longrightarrow>\n          Suc (t * k) \\<le> x \\<and>\n          x mod k = 0 \\<and>\n          (\\<forall>xa.\n              Suc (t * k) \\<le> xa \\<and>\n              xa \\<le> Suc (t * k +\n                            (x - Suc (Suc (t * k)))) \\<longrightarrow>\n              s xa = NoMsg)))\\<rbrakk>\n    \\<Longrightarrow> \\<forall>x.\n                         t * k \\<le> x \\<and>\n                         x \\<le> t * k + k - Suc 0 \\<longrightarrow>\n                         s x = NoMsg", "apply (clarify elim!: dvdE, rename_tac x1 x2)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x1 x2.\n       \\<lbrakk>\\<And>t. event t = (t mod k = 0); t0 = t * k; Suc 0 < k;\n        s (t * k) = NoMsg;\n        x2 = Suc (t * k) \\<longrightarrow> Suc (t * k) mod k = 0;\n        x2 \\<noteq> Suc (t * k) \\<longrightarrow>\n        Suc (t * k) \\<le> x2 \\<and>\n        x2 mod k = 0 \\<and>\n        (\\<forall>x.\n            Suc (t * k) \\<le> x \\<and>\n            x \\<le> Suc (t * k + (x2 - Suc (Suc (t * k)))) \\<longrightarrow>\n            s x = NoMsg);\n        t * k \\<le> x1; x1 \\<le> t * k + k - Suc 0\\<rbrakk>\n       \\<Longrightarrow> s x1 = NoMsg", "apply (case_tac \"x2 = Suc (t * k)\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x1 x2.\n       \\<lbrakk>\\<And>t. event t = (t mod k = 0); t0 = t * k; Suc 0 < k;\n        s (t * k) = NoMsg;\n        x2 = Suc (t * k) \\<longrightarrow> Suc (t * k) mod k = 0;\n        x2 \\<noteq> Suc (t * k) \\<longrightarrow>\n        Suc (t * k) \\<le> x2 \\<and>\n        x2 mod k = 0 \\<and>\n        (\\<forall>x.\n            Suc (t * k) \\<le> x \\<and>\n            x \\<le> Suc (t * k + (x2 - Suc (Suc (t * k)))) \\<longrightarrow>\n            s x = NoMsg);\n        t * k \\<le> x1; x1 \\<le> t * k + k - Suc 0;\n        x2 = Suc (t * k)\\<rbrakk>\n       \\<Longrightarrow> s x1 = NoMsg\n 2. \\<And>x1 x2.\n       \\<lbrakk>\\<And>t. event t = (t mod k = 0); t0 = t * k; Suc 0 < k;\n        s (t * k) = NoMsg;\n        x2 = Suc (t * k) \\<longrightarrow> Suc (t * k) mod k = 0;\n        x2 \\<noteq> Suc (t * k) \\<longrightarrow>\n        Suc (t * k) \\<le> x2 \\<and>\n        x2 mod k = 0 \\<and>\n        (\\<forall>x.\n            Suc (t * k) \\<le> x \\<and>\n            x \\<le> Suc (t * k + (x2 - Suc (Suc (t * k)))) \\<longrightarrow>\n            s x = NoMsg);\n        t * k \\<le> x1; x1 \\<le> t * k + k - Suc 0;\n        x2 \\<noteq> Suc (t * k)\\<rbrakk>\n       \\<Longrightarrow> s x1 = NoMsg", "apply (simp add: mod_Suc)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x1 x2.\n       \\<lbrakk>\\<And>t. event t = (t mod k = 0); t0 = t * k; Suc 0 < k;\n        s (t * k) = NoMsg;\n        x2 = Suc (t * k) \\<longrightarrow> Suc (t * k) mod k = 0;\n        x2 \\<noteq> Suc (t * k) \\<longrightarrow>\n        Suc (t * k) \\<le> x2 \\<and>\n        x2 mod k = 0 \\<and>\n        (\\<forall>x.\n            Suc (t * k) \\<le> x \\<and>\n            x \\<le> Suc (t * k + (x2 - Suc (Suc (t * k)))) \\<longrightarrow>\n            s x = NoMsg);\n        t * k \\<le> x1; x1 \\<le> t * k + k - Suc 0;\n        x2 \\<noteq> Suc (t * k)\\<rbrakk>\n       \\<Longrightarrow> s x1 = NoMsg", "apply (clarsimp elim!: dvdE, rename_tac q)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x1 q.\n       \\<lbrakk>\\<And>t. event t = (t mod k = 0); t0 = t * k; Suc 0 < k;\n        s (t * k) = NoMsg; t * k \\<le> x1; x1 \\<le> t * k + k - Suc 0;\n        k * q \\<noteq> Suc (t * k); Suc (t * k) \\<le> k * q;\n        \\<forall>x.\n           Suc (t * k) \\<le> x \\<and>\n           x \\<le> Suc (k * q - 2) \\<longrightarrow>\n           s x = NoMsg\\<rbrakk>\n       \\<Longrightarrow> s x1 = NoMsg", "apply (drule_tac y=x1 in order_le_imp_less_or_eq, erule disjE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x1 q.\n       \\<lbrakk>\\<And>t. event t = (t mod k = 0); t0 = t * k; Suc 0 < k;\n        s (t * k) = NoMsg; x1 \\<le> t * k + k - Suc 0;\n        k * q \\<noteq> Suc (t * k); Suc (t * k) \\<le> k * q;\n        \\<forall>x.\n           Suc (t * k) \\<le> x \\<and>\n           x \\<le> Suc (k * q - 2) \\<longrightarrow>\n           s x = NoMsg;\n        t * k < x1\\<rbrakk>\n       \\<Longrightarrow> s x1 = NoMsg\n 2. \\<And>x1 q.\n       \\<lbrakk>\\<And>t. event t = (t mod k = 0); t0 = t * k; Suc 0 < k;\n        s (t * k) = NoMsg; x1 \\<le> t * k + k - Suc 0;\n        k * q \\<noteq> Suc (t * k); Suc (t * k) \\<le> k * q;\n        \\<forall>x.\n           Suc (t * k) \\<le> x \\<and>\n           x \\<le> Suc (k * q - 2) \\<longrightarrow>\n           s x = NoMsg;\n        t * k = x1\\<rbrakk>\n       \\<Longrightarrow> s x1 = NoMsg", "prefer 2"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x1 q.\n       \\<lbrakk>\\<And>t. event t = (t mod k = 0); t0 = t * k; Suc 0 < k;\n        s (t * k) = NoMsg; x1 \\<le> t * k + k - Suc 0;\n        k * q \\<noteq> Suc (t * k); Suc (t * k) \\<le> k * q;\n        \\<forall>x.\n           Suc (t * k) \\<le> x \\<and>\n           x \\<le> Suc (k * q - 2) \\<longrightarrow>\n           s x = NoMsg;\n        t * k = x1\\<rbrakk>\n       \\<Longrightarrow> s x1 = NoMsg\n 2. \\<And>x1 q.\n       \\<lbrakk>\\<And>t. event t = (t mod k = 0); t0 = t * k; Suc 0 < k;\n        s (t * k) = NoMsg; x1 \\<le> t * k + k - Suc 0;\n        k * q \\<noteq> Suc (t * k); Suc (t * k) \\<le> k * q;\n        \\<forall>x.\n           Suc (t * k) \\<le> x \\<and>\n           x \\<le> Suc (k * q - 2) \\<longrightarrow>\n           s x = NoMsg;\n        t * k < x1\\<rbrakk>\n       \\<Longrightarrow> s x1 = NoMsg", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x1 q.\n       \\<lbrakk>\\<And>t. event t = (t mod k = 0); t0 = t * k; Suc 0 < k;\n        s (t * k) = NoMsg; x1 \\<le> t * k + k - Suc 0;\n        k * q \\<noteq> Suc (t * k); Suc (t * k) \\<le> k * q;\n        \\<forall>x.\n           Suc (t * k) \\<le> x \\<and>\n           x \\<le> Suc (k * q - 2) \\<longrightarrow>\n           s x = NoMsg;\n        t * k < x1\\<rbrakk>\n       \\<Longrightarrow> s x1 = NoMsg", "apply (drule_tac x=x1 in spec)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x1 q.\n       \\<lbrakk>\\<And>t. event t = (t mod k = 0); t0 = t * k; Suc 0 < k;\n        s (t * k) = NoMsg; x1 \\<le> t * k + k - Suc 0;\n        k * q \\<noteq> Suc (t * k); Suc (t * k) \\<le> k * q; t * k < x1;\n        Suc (t * k) \\<le> x1 \\<and>\n        x1 \\<le> Suc (k * q - 2) \\<longrightarrow>\n        s x1 = NoMsg\\<rbrakk>\n       \\<Longrightarrow> s x1 = NoMsg", "apply (simp add: mult.commute[of k])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x1 q.\n       \\<lbrakk>\\<And>t. event t = (t mod k = 0); t0 = t * k; Suc 0 < k;\n        s (t * k) = NoMsg; x1 \\<le> t * k + k - Suc 0;\n        q * k \\<noteq> Suc (t * k); Suc (t * k) \\<le> q * k; t * k < x1;\n        x1 \\<le> Suc (q * k - 2) \\<longrightarrow> s x1 = NoMsg\\<rbrakk>\n       \\<Longrightarrow> s x1 = NoMsg", "apply (drule Suc_le_lessD)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x1 q.\n       \\<lbrakk>\\<And>t. event t = (t mod k = 0); t0 = t * k; Suc 0 < k;\n        s (t * k) = NoMsg; x1 \\<le> t * k + k - Suc 0;\n        q * k \\<noteq> Suc (t * k); t * k < x1;\n        x1 \\<le> Suc (q * k - 2) \\<longrightarrow> s x1 = NoMsg;\n        t * k < q * k\\<rbrakk>\n       \\<Longrightarrow> s x1 = NoMsg", "apply (drule_tac y=\"q * k\" and m=k in less_mod_eq_imp_add_divisor_le, simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x1 q.\n       \\<lbrakk>\\<And>t. event t = (t mod k = 0); t0 = t * k; Suc 0 < k;\n        s (t * k) = NoMsg; x1 \\<le> t * k + k - Suc 0;\n        q * k \\<noteq> Suc (t * k); t * k < x1;\n        x1 \\<le> Suc (q * k - 2) \\<longrightarrow> s x1 = NoMsg;\n        t * k + k \\<le> q * k\\<rbrakk>\n       \\<Longrightarrow> s x1 = NoMsg", "apply simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma i_shrink_eq_Msg_iUntil_start_event_conv: \"\n  \\<lbrakk> 0 < k; m \\<noteq> \\<NoMsg>; \\<And>t. event t = (t mod k = 0); t0 = t * k \\<rbrakk> \\<Longrightarrow>\n  ((s \\<div>\\<^sub>i k) t = m) = (\n  (s t0 = m \\<and> (\\<circle> t' t0 [0\\<dots>]. (s t1 = \\<NoMsg>. t1 \\<U> t2 ([0\\<dots>] \\<oplus> t'). event t2))) \\<or>\n  (\\<circle> t' t0 [0\\<dots>]. (\\<not> event t1. t1 \\<U> t2 ([0\\<dots>] \\<oplus> t'). (\n    s t2 = m \\<and> \\<not> event t2 \\<and> (\\<circle> t'' t2 [0\\<dots>].\n      (s t3 = \\<NoMsg>. t3 \\<U> t4 ([0\\<dots>] \\<oplus> t''). event t4))))))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>0 < k; m \\<noteq> NoMsg; \\<And>t. event t = (t mod k = 0);\n     t0 = t * k\\<rbrakk>\n    \\<Longrightarrow> ((s \\<div> k) t = m) =\n                      (s t0 = m \\<and>\n                       (\\<circle> t' t0 [0\\<dots>].\n                           s t1 = NoMsg. t1 \\<U> t2 [0\\<dots>] \\<oplus> t'.\n                           event t2) \\<or>\n                       (\\<circle> t' t0 [0\\<dots>].\n                           \\<not> event t1.\n                           t1 \\<U> t2 [0\\<dots>] \\<oplus> t'.\n                           s t2 = m \\<and>\n                           \\<not> event t2 \\<and>\n                           (\\<circle> t'' t2 [0\\<dots>].\n                               s t3 = NoMsg.\n                               t3 \\<U> t4 [0\\<dots>] \\<oplus> t''.\n                               event t4)))", "apply (case_tac \"k = Suc 0\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>0 < k; m \\<noteq> NoMsg; \\<And>t. event t = (t mod k = 0);\n     t0 = t * k; k = Suc 0\\<rbrakk>\n    \\<Longrightarrow> ((s \\<div> k) t = m) =\n                      (s t0 = m \\<and>\n                       (\\<circle> t' t0 [0\\<dots>].\n                           s t1 = NoMsg. t1 \\<U> t2 [0\\<dots>] \\<oplus> t'.\n                           event t2) \\<or>\n                       (\\<circle> t' t0 [0\\<dots>].\n                           \\<not> event t1.\n                           t1 \\<U> t2 [0\\<dots>] \\<oplus> t'.\n                           s t2 = m \\<and>\n                           \\<not> event t2 \\<and>\n                           (\\<circle> t'' t2 [0\\<dots>].\n                               s t3 = NoMsg.\n                               t3 \\<U> t4 [0\\<dots>] \\<oplus> t''.\n                               event t4)))\n 2. \\<lbrakk>0 < k; m \\<noteq> NoMsg; \\<And>t. event t = (t mod k = 0);\n     t0 = t * k; k \\<noteq> Suc 0\\<rbrakk>\n    \\<Longrightarrow> ((s \\<div> k) t = m) =\n                      (s t0 = m \\<and>\n                       (\\<circle> t' t0 [0\\<dots>].\n                           s t1 = NoMsg. t1 \\<U> t2 [0\\<dots>] \\<oplus> t'.\n                           event t2) \\<or>\n                       (\\<circle> t' t0 [0\\<dots>].\n                           \\<not> event t1.\n                           t1 \\<U> t2 [0\\<dots>] \\<oplus> t'.\n                           s t2 = m \\<and>\n                           \\<not> event t2 \\<and>\n                           (\\<circle> t'' t2 [0\\<dots>].\n                               s t3 = NoMsg.\n                               t3 \\<U> t4 [0\\<dots>] \\<oplus> t''.\n                               event t4)))", "apply (simp add: iT_add iT_not_empty iNext_iff)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>0 < k; m \\<noteq> NoMsg; \\<And>t. event t = (t mod k = 0);\n     t0 = t * k; k \\<noteq> Suc 0\\<rbrakk>\n    \\<Longrightarrow> ((s \\<div> k) t = m) =\n                      (s t0 = m \\<and>\n                       (\\<circle> t' t0 [0\\<dots>].\n                           s t1 = NoMsg. t1 \\<U> t2 [0\\<dots>] \\<oplus> t'.\n                           event t2) \\<or>\n                       (\\<circle> t' t0 [0\\<dots>].\n                           \\<not> event t1.\n                           t1 \\<U> t2 [0\\<dots>] \\<oplus> t'.\n                           s t2 = m \\<and>\n                           \\<not> event t2 \\<and>\n                           (\\<circle> t'' t2 [0\\<dots>].\n                               s t3 = NoMsg.\n                               t3 \\<U> t4 [0\\<dots>] \\<oplus> t''.\n                               event t4)))", "apply (drule neq_le_trans[OF not_sym], simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>0 < k; m \\<noteq> NoMsg; \\<And>t. event t = (t mod k = 0);\n     t0 = t * k; Suc 0 < k\\<rbrakk>\n    \\<Longrightarrow> ((s \\<div> k) t = m) =\n                      (s t0 = m \\<and>\n                       (\\<circle> t' t0 [0\\<dots>].\n                           s t1 = NoMsg. t1 \\<U> t2 [0\\<dots>] \\<oplus> t'.\n                           event t2) \\<or>\n                       (\\<circle> t' t0 [0\\<dots>].\n                           \\<not> event t1.\n                           t1 \\<U> t2 [0\\<dots>] \\<oplus> t'.\n                           s t2 = m \\<and>\n                           \\<not> event t2 \\<and>\n                           (\\<circle> t'' t2 [0\\<dots>].\n                               s t3 = NoMsg.\n                               t3 \\<U> t4 [0\\<dots>] \\<oplus> t''.\n                               event t4)))", "apply (simp add: i_shrink_eq_Msg_iSince_conv iTL_defs iT_add iT_cut_greater iT_cut_less Ball_def Bex_def iT_iff iFROM_inext)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>m \\<noteq> NoMsg; \\<And>t. event t = (t mod k = 0); t0 = t * k;\n     Suc 0 < k\\<rbrakk>\n    \\<Longrightarrow> (\\<exists>x.\n                          (x < t * k + k - Suc 0 \\<longrightarrow>\n                           t * k \\<le> x \\<and>\n                           s x = m \\<and>\n                           (\\<forall>xa.\n                               Suc x \\<le> xa \\<and>\n                               xa \\<le> Suc\n   (t * k + k - 2) \\<longrightarrow>\n                               s xa = NoMsg)) \\<and>\n                          (\\<not> x < t * k + k - Suc 0 \\<longrightarrow>\n                           t * k \\<le> x \\<and>\n                           x = t * k + k - Suc 0 \\<and> s x = m)) =\n                      (s (t * k) = m \\<and>\n                       (\\<exists>x.\n                           (x = Suc (t * k) \\<longrightarrow>\n                            Suc (t * k) mod k = 0) \\<and>\n                           (x \\<noteq> Suc (t * k) \\<longrightarrow>\n                            Suc (t * k) \\<le> x \\<and>\n                            x mod k = 0 \\<and>\n                            (\\<forall>xa.\n                                Suc (t * k) \\<le> xa \\<and>\n                                xa \\<le> Suc\n    (t * k + (x - Suc (Suc (t * k)))) \\<longrightarrow>\n                                s xa = NoMsg))) \\<or>\n                       (\\<exists>x.\n                           (x = Suc (t * k) \\<longrightarrow>\n                            s (Suc (t * k)) = m \\<and>\n                            0 < Suc (t * k) mod k \\<and>\n                            (\\<exists>x.\n                                (x = Suc (Suc (t * k)) \\<longrightarrow>\n                                 Suc (Suc (t * k)) mod k = 0) \\<and>\n                                (x \\<noteq>\n                                 Suc (Suc (t * k)) \\<longrightarrow>\n                                 Suc (Suc (t * k)) \\<le> x \\<and>\n                                 x mod k = 0 \\<and>\n                                 (\\<forall>xa.\n                                     Suc (Suc (t * k)) \\<le> xa \\<and>\n                                     xa \\<le> Suc\n         (Suc (t * k + (x - Suc (Suc (Suc (t * k)))))) \\<longrightarrow>\n                                     s xa = NoMsg)))) \\<and>\n                           (x \\<noteq> Suc (t * k) \\<longrightarrow>\n                            Suc (t * k) \\<le> x \\<and>\n                            s x = m \\<and>\n                            0 < x mod k \\<and>\n                            (\\<exists>xa.\n                                (xa = Suc x \\<longrightarrow>\n                                 Suc x mod k = 0) \\<and>\n                                (xa \\<noteq> Suc x \\<longrightarrow>\n                                 Suc x \\<le> xa \\<and>\n                                 xa mod k = 0 \\<and>\n                                 (\\<forall>xb.\n                                     Suc x \\<le> xb \\<and>\n                                     xb \\<le> Suc\n         (x + (xa - Suc (Suc x))) \\<longrightarrow>\n                                     s xb = NoMsg))) \\<and>\n                            (\\<forall>xa.\n                                Suc (t * k) \\<le> xa \\<and>\n                                xa \\<le> Suc\n    (t * k + (x - Suc (Suc (t * k)))) \\<longrightarrow>\n                                0 < xa mod k))))", "apply (rule_tac t=\"Suc (t * k + k - 2)\" and s=\"t * k + k - Suc 0\" in subst, simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>m \\<noteq> NoMsg; \\<And>t. event t = (t mod k = 0); t0 = t * k;\n     Suc 0 < k\\<rbrakk>\n    \\<Longrightarrow> (\\<exists>x.\n                          (x < t * k + k - Suc 0 \\<longrightarrow>\n                           t * k \\<le> x \\<and>\n                           s x = m \\<and>\n                           (\\<forall>xa.\n                               Suc x \\<le> xa \\<and>\n                               xa \\<le> t * k + k - Suc 0 \\<longrightarrow>\n                               s xa = NoMsg)) \\<and>\n                          (\\<not> x < t * k + k - Suc 0 \\<longrightarrow>\n                           t * k \\<le> x \\<and>\n                           x = t * k + k - Suc 0 \\<and> s x = m)) =\n                      (s (t * k) = m \\<and>\n                       (\\<exists>x.\n                           (x = Suc (t * k) \\<longrightarrow>\n                            Suc (t * k) mod k = 0) \\<and>\n                           (x \\<noteq> Suc (t * k) \\<longrightarrow>\n                            Suc (t * k) \\<le> x \\<and>\n                            x mod k = 0 \\<and>\n                            (\\<forall>xa.\n                                Suc (t * k) \\<le> xa \\<and>\n                                xa \\<le> Suc\n    (t * k + (x - Suc (Suc (t * k)))) \\<longrightarrow>\n                                s xa = NoMsg))) \\<or>\n                       (\\<exists>x.\n                           (x = Suc (t * k) \\<longrightarrow>\n                            s (Suc (t * k)) = m \\<and>\n                            0 < Suc (t * k) mod k \\<and>\n                            (\\<exists>x.\n                                (x = Suc (Suc (t * k)) \\<longrightarrow>\n                                 Suc (Suc (t * k)) mod k = 0) \\<and>\n                                (x \\<noteq>\n                                 Suc (Suc (t * k)) \\<longrightarrow>\n                                 Suc (Suc (t * k)) \\<le> x \\<and>\n                                 x mod k = 0 \\<and>\n                                 (\\<forall>xa.\n                                     Suc (Suc (t * k)) \\<le> xa \\<and>\n                                     xa \\<le> Suc\n         (Suc (t * k + (x - Suc (Suc (Suc (t * k)))))) \\<longrightarrow>\n                                     s xa = NoMsg)))) \\<and>\n                           (x \\<noteq> Suc (t * k) \\<longrightarrow>\n                            Suc (t * k) \\<le> x \\<and>\n                            s x = m \\<and>\n                            0 < x mod k \\<and>\n                            (\\<exists>xa.\n                                (xa = Suc x \\<longrightarrow>\n                                 Suc x mod k = 0) \\<and>\n                                (xa \\<noteq> Suc x \\<longrightarrow>\n                                 Suc x \\<le> xa \\<and>\n                                 xa mod k = 0 \\<and>\n                                 (\\<forall>xb.\n                                     Suc x \\<le> xb \\<and>\n                                     xb \\<le> Suc\n         (x + (xa - Suc (Suc x))) \\<longrightarrow>\n                                     s xb = NoMsg))) \\<and>\n                            (\\<forall>xa.\n                                Suc (t * k) \\<le> xa \\<and>\n                                xa \\<le> Suc\n    (t * k + (x - Suc (Suc (t * k)))) \\<longrightarrow>\n                                0 < xa mod k))))", "apply (rule iffI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>m \\<noteq> NoMsg; \\<And>t. event t = (t mod k = 0); t0 = t * k;\n     Suc 0 < k;\n     \\<exists>x.\n        (x < t * k + k - Suc 0 \\<longrightarrow>\n         t * k \\<le> x \\<and>\n         s x = m \\<and>\n         (\\<forall>xa.\n             Suc x \\<le> xa \\<and>\n             xa \\<le> t * k + k - Suc 0 \\<longrightarrow>\n             s xa = NoMsg)) \\<and>\n        (\\<not> x < t * k + k - Suc 0 \\<longrightarrow>\n         t * k \\<le> x \\<and> x = t * k + k - Suc 0 \\<and> s x = m)\\<rbrakk>\n    \\<Longrightarrow> s (t * k) = m \\<and>\n                      (\\<exists>x.\n                          (x = Suc (t * k) \\<longrightarrow>\n                           Suc (t * k) mod k = 0) \\<and>\n                          (x \\<noteq> Suc (t * k) \\<longrightarrow>\n                           Suc (t * k) \\<le> x \\<and>\n                           x mod k = 0 \\<and>\n                           (\\<forall>xa.\n                               Suc (t * k) \\<le> xa \\<and>\n                               xa \\<le> Suc\n   (t * k + (x - Suc (Suc (t * k)))) \\<longrightarrow>\n                               s xa = NoMsg))) \\<or>\n                      (\\<exists>x.\n                          (x = Suc (t * k) \\<longrightarrow>\n                           s (Suc (t * k)) = m \\<and>\n                           0 < Suc (t * k) mod k \\<and>\n                           (\\<exists>x.\n                               (x = Suc (Suc (t * k)) \\<longrightarrow>\n                                Suc (Suc (t * k)) mod k = 0) \\<and>\n                               (x \\<noteq>\n                                Suc (Suc (t * k)) \\<longrightarrow>\n                                Suc (Suc (t * k)) \\<le> x \\<and>\n                                x mod k = 0 \\<and>\n                                (\\<forall>xa.\n                                    Suc (Suc (t * k)) \\<le> xa \\<and>\n                                    xa \\<le> Suc\n        (Suc (t * k + (x - Suc (Suc (Suc (t * k)))))) \\<longrightarrow>\n                                    s xa = NoMsg)))) \\<and>\n                          (x \\<noteq> Suc (t * k) \\<longrightarrow>\n                           Suc (t * k) \\<le> x \\<and>\n                           s x = m \\<and>\n                           0 < x mod k \\<and>\n                           (\\<exists>xa.\n                               (xa = Suc x \\<longrightarrow>\n                                Suc x mod k = 0) \\<and>\n                               (xa \\<noteq> Suc x \\<longrightarrow>\n                                Suc x \\<le> xa \\<and>\n                                xa mod k = 0 \\<and>\n                                (\\<forall>xb.\n                                    Suc x \\<le> xb \\<and>\n                                    xb \\<le> Suc\n        (x + (xa - Suc (Suc x))) \\<longrightarrow>\n                                    s xb = NoMsg))) \\<and>\n                           (\\<forall>xa.\n                               Suc (t * k) \\<le> xa \\<and>\n                               xa \\<le> Suc\n   (t * k + (x - Suc (Suc (t * k)))) \\<longrightarrow>\n                               0 < xa mod k)))\n 2. \\<lbrakk>m \\<noteq> NoMsg; \\<And>t. event t = (t mod k = 0); t0 = t * k;\n     Suc 0 < k;\n     s (t * k) = m \\<and>\n     (\\<exists>x.\n         (x = Suc (t * k) \\<longrightarrow> Suc (t * k) mod k = 0) \\<and>\n         (x \\<noteq> Suc (t * k) \\<longrightarrow>\n          Suc (t * k) \\<le> x \\<and>\n          x mod k = 0 \\<and>\n          (\\<forall>xa.\n              Suc (t * k) \\<le> xa \\<and>\n              xa \\<le> Suc (t * k +\n                            (x - Suc (Suc (t * k)))) \\<longrightarrow>\n              s xa = NoMsg))) \\<or>\n     (\\<exists>x.\n         (x = Suc (t * k) \\<longrightarrow>\n          s (Suc (t * k)) = m \\<and>\n          0 < Suc (t * k) mod k \\<and>\n          (\\<exists>x.\n              (x = Suc (Suc (t * k)) \\<longrightarrow>\n               Suc (Suc (t * k)) mod k = 0) \\<and>\n              (x \\<noteq> Suc (Suc (t * k)) \\<longrightarrow>\n               Suc (Suc (t * k)) \\<le> x \\<and>\n               x mod k = 0 \\<and>\n               (\\<forall>xa.\n                   Suc (Suc (t * k)) \\<le> xa \\<and>\n                   xa \\<le> Suc (Suc (t * k +\n(x - Suc (Suc (Suc (t * k)))))) \\<longrightarrow>\n                   s xa = NoMsg)))) \\<and>\n         (x \\<noteq> Suc (t * k) \\<longrightarrow>\n          Suc (t * k) \\<le> x \\<and>\n          s x = m \\<and>\n          0 < x mod k \\<and>\n          (\\<exists>xa.\n              (xa = Suc x \\<longrightarrow> Suc x mod k = 0) \\<and>\n              (xa \\<noteq> Suc x \\<longrightarrow>\n               Suc x \\<le> xa \\<and>\n               xa mod k = 0 \\<and>\n               (\\<forall>xb.\n                   Suc x \\<le> xb \\<and>\n                   xb \\<le> Suc (x + (xa - Suc (Suc x))) \\<longrightarrow>\n                   s xb = NoMsg))) \\<and>\n          (\\<forall>xa.\n              Suc (t * k) \\<le> xa \\<and>\n              xa \\<le> Suc (t * k +\n                            (x - Suc (Suc (t * k)))) \\<longrightarrow>\n              0 < xa mod k)))\\<rbrakk>\n    \\<Longrightarrow> \\<exists>x.\n                         (x < t * k + k - Suc 0 \\<longrightarrow>\n                          t * k \\<le> x \\<and>\n                          s x = m \\<and>\n                          (\\<forall>xa.\n                              Suc x \\<le> xa \\<and>\n                              xa \\<le> t * k + k - Suc 0 \\<longrightarrow>\n                              s xa = NoMsg)) \\<and>\n                         (\\<not> x < t * k + k - Suc 0 \\<longrightarrow>\n                          t * k \\<le> x \\<and>\n                          x = t * k + k - Suc 0 \\<and> s x = m)", "apply (elim exE conjE, rename_tac i)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>i.\n       \\<lbrakk>m \\<noteq> NoMsg; \\<And>t. event t = (t mod k = 0);\n        t0 = t * k; Suc 0 < k;\n        i < t * k + k - Suc 0 \\<longrightarrow>\n        t * k \\<le> i \\<and>\n        s i = m \\<and>\n        (\\<forall>x.\n            Suc i \\<le> x \\<and> x \\<le> t * k + k - Suc 0 \\<longrightarrow>\n            s x = NoMsg);\n        \\<not> i < t * k + k - Suc 0 \\<longrightarrow>\n        t * k \\<le> i \\<and> i = t * k + k - Suc 0 \\<and> s i = m\\<rbrakk>\n       \\<Longrightarrow> s (t * k) = m \\<and>\n                         (\\<exists>x.\n                             (x = Suc (t * k) \\<longrightarrow>\n                              Suc (t * k) mod k = 0) \\<and>\n                             (x \\<noteq> Suc (t * k) \\<longrightarrow>\n                              Suc (t * k) \\<le> x \\<and>\n                              x mod k = 0 \\<and>\n                              (\\<forall>xa.\n                                  Suc (t * k) \\<le> xa \\<and>\n                                  xa \\<le> Suc\n      (t * k + (x - Suc (Suc (t * k)))) \\<longrightarrow>\n                                  s xa = NoMsg))) \\<or>\n                         (\\<exists>x.\n                             (x = Suc (t * k) \\<longrightarrow>\n                              s (Suc (t * k)) = m \\<and>\n                              0 < Suc (t * k) mod k \\<and>\n                              (\\<exists>x.\n                                  (x = Suc (Suc (t * k)) \\<longrightarrow>\n                                   Suc (Suc (t * k)) mod k = 0) \\<and>\n                                  (x \\<noteq>\n                                   Suc (Suc (t * k)) \\<longrightarrow>\n                                   Suc (Suc (t * k)) \\<le> x \\<and>\n                                   x mod k = 0 \\<and>\n                                   (\\<forall>xa.\n Suc (Suc (t * k)) \\<le> xa \\<and>\n xa \\<le> Suc (Suc (t * k +\n                    (x - Suc (Suc (Suc (t * k)))))) \\<longrightarrow>\n s xa = NoMsg)))) \\<and>\n                             (x \\<noteq> Suc (t * k) \\<longrightarrow>\n                              Suc (t * k) \\<le> x \\<and>\n                              s x = m \\<and>\n                              0 < x mod k \\<and>\n                              (\\<exists>xa.\n                                  (xa = Suc x \\<longrightarrow>\n                                   Suc x mod k = 0) \\<and>\n                                  (xa \\<noteq> Suc x \\<longrightarrow>\n                                   Suc x \\<le> xa \\<and>\n                                   xa mod k = 0 \\<and>\n                                   (\\<forall>xb.\n Suc x \\<le> xb \\<and>\n xb \\<le> Suc (x + (xa - Suc (Suc x))) \\<longrightarrow>\n s xb = NoMsg))) \\<and>\n                              (\\<forall>xa.\n                                  Suc (t * k) \\<le> xa \\<and>\n                                  xa \\<le> Suc\n      (t * k + (x - Suc (Suc (t * k)))) \\<longrightarrow>\n                                  0 < xa mod k)))\n 2. \\<lbrakk>m \\<noteq> NoMsg; \\<And>t. event t = (t mod k = 0); t0 = t * k;\n     Suc 0 < k;\n     s (t * k) = m \\<and>\n     (\\<exists>x.\n         (x = Suc (t * k) \\<longrightarrow> Suc (t * k) mod k = 0) \\<and>\n         (x \\<noteq> Suc (t * k) \\<longrightarrow>\n          Suc (t * k) \\<le> x \\<and>\n          x mod k = 0 \\<and>\n          (\\<forall>xa.\n              Suc (t * k) \\<le> xa \\<and>\n              xa \\<le> Suc (t * k +\n                            (x - Suc (Suc (t * k)))) \\<longrightarrow>\n              s xa = NoMsg))) \\<or>\n     (\\<exists>x.\n         (x = Suc (t * k) \\<longrightarrow>\n          s (Suc (t * k)) = m \\<and>\n          0 < Suc (t * k) mod k \\<and>\n          (\\<exists>x.\n              (x = Suc (Suc (t * k)) \\<longrightarrow>\n               Suc (Suc (t * k)) mod k = 0) \\<and>\n              (x \\<noteq> Suc (Suc (t * k)) \\<longrightarrow>\n               Suc (Suc (t * k)) \\<le> x \\<and>\n               x mod k = 0 \\<and>\n               (\\<forall>xa.\n                   Suc (Suc (t * k)) \\<le> xa \\<and>\n                   xa \\<le> Suc (Suc (t * k +\n(x - Suc (Suc (Suc (t * k)))))) \\<longrightarrow>\n                   s xa = NoMsg)))) \\<and>\n         (x \\<noteq> Suc (t * k) \\<longrightarrow>\n          Suc (t * k) \\<le> x \\<and>\n          s x = m \\<and>\n          0 < x mod k \\<and>\n          (\\<exists>xa.\n              (xa = Suc x \\<longrightarrow> Suc x mod k = 0) \\<and>\n              (xa \\<noteq> Suc x \\<longrightarrow>\n               Suc x \\<le> xa \\<and>\n               xa mod k = 0 \\<and>\n               (\\<forall>xb.\n                   Suc x \\<le> xb \\<and>\n                   xb \\<le> Suc (x + (xa - Suc (Suc x))) \\<longrightarrow>\n                   s xb = NoMsg))) \\<and>\n          (\\<forall>xa.\n              Suc (t * k) \\<le> xa \\<and>\n              xa \\<le> Suc (t * k +\n                            (x - Suc (Suc (t * k)))) \\<longrightarrow>\n              0 < xa mod k)))\\<rbrakk>\n    \\<Longrightarrow> \\<exists>x.\n                         (x < t * k + k - Suc 0 \\<longrightarrow>\n                          t * k \\<le> x \\<and>\n                          s x = m \\<and>\n                          (\\<forall>xa.\n                              Suc x \\<le> xa \\<and>\n                              xa \\<le> t * k + k - Suc 0 \\<longrightarrow>\n                              s xa = NoMsg)) \\<and>\n                         (\\<not> x < t * k + k - Suc 0 \\<longrightarrow>\n                          t * k \\<le> x \\<and>\n                          x = t * k + k - Suc 0 \\<and> s x = m)", "apply (case_tac \"i = t * k\")"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>i.\n       \\<lbrakk>m \\<noteq> NoMsg; \\<And>t. event t = (t mod k = 0);\n        t0 = t * k; Suc 0 < k;\n        i < t * k + k - Suc 0 \\<longrightarrow>\n        t * k \\<le> i \\<and>\n        s i = m \\<and>\n        (\\<forall>x.\n            Suc i \\<le> x \\<and> x \\<le> t * k + k - Suc 0 \\<longrightarrow>\n            s x = NoMsg);\n        \\<not> i < t * k + k - Suc 0 \\<longrightarrow>\n        t * k \\<le> i \\<and> i = t * k + k - Suc 0 \\<and> s i = m;\n        i = t * k\\<rbrakk>\n       \\<Longrightarrow> s (t * k) = m \\<and>\n                         (\\<exists>x.\n                             (x = Suc (t * k) \\<longrightarrow>\n                              Suc (t * k) mod k = 0) \\<and>\n                             (x \\<noteq> Suc (t * k) \\<longrightarrow>\n                              Suc (t * k) \\<le> x \\<and>\n                              x mod k = 0 \\<and>\n                              (\\<forall>xa.\n                                  Suc (t * k) \\<le> xa \\<and>\n                                  xa \\<le> Suc\n      (t * k + (x - Suc (Suc (t * k)))) \\<longrightarrow>\n                                  s xa = NoMsg))) \\<or>\n                         (\\<exists>x.\n                             (x = Suc (t * k) \\<longrightarrow>\n                              s (Suc (t * k)) = m \\<and>\n                              0 < Suc (t * k) mod k \\<and>\n                              (\\<exists>x.\n                                  (x = Suc (Suc (t * k)) \\<longrightarrow>\n                                   Suc (Suc (t * k)) mod k = 0) \\<and>\n                                  (x \\<noteq>\n                                   Suc (Suc (t * k)) \\<longrightarrow>\n                                   Suc (Suc (t * k)) \\<le> x \\<and>\n                                   x mod k = 0 \\<and>\n                                   (\\<forall>xa.\n Suc (Suc (t * k)) \\<le> xa \\<and>\n xa \\<le> Suc (Suc (t * k +\n                    (x - Suc (Suc (Suc (t * k)))))) \\<longrightarrow>\n s xa = NoMsg)))) \\<and>\n                             (x \\<noteq> Suc (t * k) \\<longrightarrow>\n                              Suc (t * k) \\<le> x \\<and>\n                              s x = m \\<and>\n                              0 < x mod k \\<and>\n                              (\\<exists>xa.\n                                  (xa = Suc x \\<longrightarrow>\n                                   Suc x mod k = 0) \\<and>\n                                  (xa \\<noteq> Suc x \\<longrightarrow>\n                                   Suc x \\<le> xa \\<and>\n                                   xa mod k = 0 \\<and>\n                                   (\\<forall>xb.\n Suc x \\<le> xb \\<and>\n xb \\<le> Suc (x + (xa - Suc (Suc x))) \\<longrightarrow>\n s xb = NoMsg))) \\<and>\n                              (\\<forall>xa.\n                                  Suc (t * k) \\<le> xa \\<and>\n                                  xa \\<le> Suc\n      (t * k + (x - Suc (Suc (t * k)))) \\<longrightarrow>\n                                  0 < xa mod k)))\n 2. \\<And>i.\n       \\<lbrakk>m \\<noteq> NoMsg; \\<And>t. event t = (t mod k = 0);\n        t0 = t * k; Suc 0 < k;\n        i < t * k + k - Suc 0 \\<longrightarrow>\n        t * k \\<le> i \\<and>\n        s i = m \\<and>\n        (\\<forall>x.\n            Suc i \\<le> x \\<and> x \\<le> t * k + k - Suc 0 \\<longrightarrow>\n            s x = NoMsg);\n        \\<not> i < t * k + k - Suc 0 \\<longrightarrow>\n        t * k \\<le> i \\<and> i = t * k + k - Suc 0 \\<and> s i = m;\n        i \\<noteq> t * k\\<rbrakk>\n       \\<Longrightarrow> s (t * k) = m \\<and>\n                         (\\<exists>x.\n                             (x = Suc (t * k) \\<longrightarrow>\n                              Suc (t * k) mod k = 0) \\<and>\n                             (x \\<noteq> Suc (t * k) \\<longrightarrow>\n                              Suc (t * k) \\<le> x \\<and>\n                              x mod k = 0 \\<and>\n                              (\\<forall>xa.\n                                  Suc (t * k) \\<le> xa \\<and>\n                                  xa \\<le> Suc\n      (t * k + (x - Suc (Suc (t * k)))) \\<longrightarrow>\n                                  s xa = NoMsg))) \\<or>\n                         (\\<exists>x.\n                             (x = Suc (t * k) \\<longrightarrow>\n                              s (Suc (t * k)) = m \\<and>\n                              0 < Suc (t * k) mod k \\<and>\n                              (\\<exists>x.\n                                  (x = Suc (Suc (t * k)) \\<longrightarrow>\n                                   Suc (Suc (t * k)) mod k = 0) \\<and>\n                                  (x \\<noteq>\n                                   Suc (Suc (t * k)) \\<longrightarrow>\n                                   Suc (Suc (t * k)) \\<le> x \\<and>\n                                   x mod k = 0 \\<and>\n                                   (\\<forall>xa.\n Suc (Suc (t * k)) \\<le> xa \\<and>\n xa \\<le> Suc (Suc (t * k +\n                    (x - Suc (Suc (Suc (t * k)))))) \\<longrightarrow>\n s xa = NoMsg)))) \\<and>\n                             (x \\<noteq> Suc (t * k) \\<longrightarrow>\n                              Suc (t * k) \\<le> x \\<and>\n                              s x = m \\<and>\n                              0 < x mod k \\<and>\n                              (\\<exists>xa.\n                                  (xa = Suc x \\<longrightarrow>\n                                   Suc x mod k = 0) \\<and>\n                                  (xa \\<noteq> Suc x \\<longrightarrow>\n                                   Suc x \\<le> xa \\<and>\n                                   xa mod k = 0 \\<and>\n                                   (\\<forall>xb.\n Suc x \\<le> xb \\<and>\n xb \\<le> Suc (x + (xa - Suc (Suc x))) \\<longrightarrow>\n s xb = NoMsg))) \\<and>\n                              (\\<forall>xa.\n                                  Suc (t * k) \\<le> xa \\<and>\n                                  xa \\<le> Suc\n      (t * k + (x - Suc (Suc (t * k)))) \\<longrightarrow>\n                                  0 < xa mod k)))\n 3. \\<lbrakk>m \\<noteq> NoMsg; \\<And>t. event t = (t mod k = 0); t0 = t * k;\n     Suc 0 < k;\n     s (t * k) = m \\<and>\n     (\\<exists>x.\n         (x = Suc (t * k) \\<longrightarrow> Suc (t * k) mod k = 0) \\<and>\n         (x \\<noteq> Suc (t * k) \\<longrightarrow>\n          Suc (t * k) \\<le> x \\<and>\n          x mod k = 0 \\<and>\n          (\\<forall>xa.\n              Suc (t * k) \\<le> xa \\<and>\n              xa \\<le> Suc (t * k +\n                            (x - Suc (Suc (t * k)))) \\<longrightarrow>\n              s xa = NoMsg))) \\<or>\n     (\\<exists>x.\n         (x = Suc (t * k) \\<longrightarrow>\n          s (Suc (t * k)) = m \\<and>\n          0 < Suc (t * k) mod k \\<and>\n          (\\<exists>x.\n              (x = Suc (Suc (t * k)) \\<longrightarrow>\n               Suc (Suc (t * k)) mod k = 0) \\<and>\n              (x \\<noteq> Suc (Suc (t * k)) \\<longrightarrow>\n               Suc (Suc (t * k)) \\<le> x \\<and>\n               x mod k = 0 \\<and>\n               (\\<forall>xa.\n                   Suc (Suc (t * k)) \\<le> xa \\<and>\n                   xa \\<le> Suc (Suc (t * k +\n(x - Suc (Suc (Suc (t * k)))))) \\<longrightarrow>\n                   s xa = NoMsg)))) \\<and>\n         (x \\<noteq> Suc (t * k) \\<longrightarrow>\n          Suc (t * k) \\<le> x \\<and>\n          s x = m \\<and>\n          0 < x mod k \\<and>\n          (\\<exists>xa.\n              (xa = Suc x \\<longrightarrow> Suc x mod k = 0) \\<and>\n              (xa \\<noteq> Suc x \\<longrightarrow>\n               Suc x \\<le> xa \\<and>\n               xa mod k = 0 \\<and>\n               (\\<forall>xb.\n                   Suc x \\<le> xb \\<and>\n                   xb \\<le> Suc (x + (xa - Suc (Suc x))) \\<longrightarrow>\n                   s xb = NoMsg))) \\<and>\n          (\\<forall>xa.\n              Suc (t * k) \\<le> xa \\<and>\n              xa \\<le> Suc (t * k +\n                            (x - Suc (Suc (t * k)))) \\<longrightarrow>\n              0 < xa mod k)))\\<rbrakk>\n    \\<Longrightarrow> \\<exists>x.\n                         (x < t * k + k - Suc 0 \\<longrightarrow>\n                          t * k \\<le> x \\<and>\n                          s x = m \\<and>\n                          (\\<forall>xa.\n                              Suc x \\<le> xa \\<and>\n                              xa \\<le> t * k + k - Suc 0 \\<longrightarrow>\n                              s xa = NoMsg)) \\<and>\n                         (\\<not> x < t * k + k - Suc 0 \\<longrightarrow>\n                          t * k \\<le> x \\<and>\n                          x = t * k + k - Suc 0 \\<and> s x = m)", "apply (rule disjI1)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>i.\n       \\<lbrakk>m \\<noteq> NoMsg; \\<And>t. event t = (t mod k = 0);\n        t0 = t * k; Suc 0 < k;\n        i < t * k + k - Suc 0 \\<longrightarrow>\n        t * k \\<le> i \\<and>\n        s i = m \\<and>\n        (\\<forall>x.\n            Suc i \\<le> x \\<and> x \\<le> t * k + k - Suc 0 \\<longrightarrow>\n            s x = NoMsg);\n        \\<not> i < t * k + k - Suc 0 \\<longrightarrow>\n        t * k \\<le> i \\<and> i = t * k + k - Suc 0 \\<and> s i = m;\n        i = t * k\\<rbrakk>\n       \\<Longrightarrow> s (t * k) = m \\<and>\n                         (\\<exists>x.\n                             (x = Suc (t * k) \\<longrightarrow>\n                              Suc (t * k) mod k = 0) \\<and>\n                             (x \\<noteq> Suc (t * k) \\<longrightarrow>\n                              Suc (t * k) \\<le> x \\<and>\n                              x mod k = 0 \\<and>\n                              (\\<forall>xa.\n                                  Suc (t * k) \\<le> xa \\<and>\n                                  xa \\<le> Suc\n      (t * k + (x - Suc (Suc (t * k)))) \\<longrightarrow>\n                                  s xa = NoMsg)))\n 2. \\<And>i.\n       \\<lbrakk>m \\<noteq> NoMsg; \\<And>t. event t = (t mod k = 0);\n        t0 = t * k; Suc 0 < k;\n        i < t * k + k - Suc 0 \\<longrightarrow>\n        t * k \\<le> i \\<and>\n        s i = m \\<and>\n        (\\<forall>x.\n            Suc i \\<le> x \\<and> x \\<le> t * k + k - Suc 0 \\<longrightarrow>\n            s x = NoMsg);\n        \\<not> i < t * k + k - Suc 0 \\<longrightarrow>\n        t * k \\<le> i \\<and> i = t * k + k - Suc 0 \\<and> s i = m;\n        i \\<noteq> t * k\\<rbrakk>\n       \\<Longrightarrow> s (t * k) = m \\<and>\n                         (\\<exists>x.\n                             (x = Suc (t * k) \\<longrightarrow>\n                              Suc (t * k) mod k = 0) \\<and>\n                             (x \\<noteq> Suc (t * k) \\<longrightarrow>\n                              Suc (t * k) \\<le> x \\<and>\n                              x mod k = 0 \\<and>\n                              (\\<forall>xa.\n                                  Suc (t * k) \\<le> xa \\<and>\n                                  xa \\<le> Suc\n      (t * k + (x - Suc (Suc (t * k)))) \\<longrightarrow>\n                                  s xa = NoMsg))) \\<or>\n                         (\\<exists>x.\n                             (x = Suc (t * k) \\<longrightarrow>\n                              s (Suc (t * k)) = m \\<and>\n                              0 < Suc (t * k) mod k \\<and>\n                              (\\<exists>x.\n                                  (x = Suc (Suc (t * k)) \\<longrightarrow>\n                                   Suc (Suc (t * k)) mod k = 0) \\<and>\n                                  (x \\<noteq>\n                                   Suc (Suc (t * k)) \\<longrightarrow>\n                                   Suc (Suc (t * k)) \\<le> x \\<and>\n                                   x mod k = 0 \\<and>\n                                   (\\<forall>xa.\n Suc (Suc (t * k)) \\<le> xa \\<and>\n xa \\<le> Suc (Suc (t * k +\n                    (x - Suc (Suc (Suc (t * k)))))) \\<longrightarrow>\n s xa = NoMsg)))) \\<and>\n                             (x \\<noteq> Suc (t * k) \\<longrightarrow>\n                              Suc (t * k) \\<le> x \\<and>\n                              s x = m \\<and>\n                              0 < x mod k \\<and>\n                              (\\<exists>xa.\n                                  (xa = Suc x \\<longrightarrow>\n                                   Suc x mod k = 0) \\<and>\n                                  (xa \\<noteq> Suc x \\<longrightarrow>\n                                   Suc x \\<le> xa \\<and>\n                                   xa mod k = 0 \\<and>\n                                   (\\<forall>xb.\n Suc x \\<le> xb \\<and>\n xb \\<le> Suc (x + (xa - Suc (Suc x))) \\<longrightarrow>\n s xb = NoMsg))) \\<and>\n                              (\\<forall>xa.\n                                  Suc (t * k) \\<le> xa \\<and>\n                                  xa \\<le> Suc\n      (t * k + (x - Suc (Suc (t * k)))) \\<longrightarrow>\n                                  0 < xa mod k)))\n 3. \\<lbrakk>m \\<noteq> NoMsg; \\<And>t. event t = (t mod k = 0); t0 = t * k;\n     Suc 0 < k;\n     s (t * k) = m \\<and>\n     (\\<exists>x.\n         (x = Suc (t * k) \\<longrightarrow> Suc (t * k) mod k = 0) \\<and>\n         (x \\<noteq> Suc (t * k) \\<longrightarrow>\n          Suc (t * k) \\<le> x \\<and>\n          x mod k = 0 \\<and>\n          (\\<forall>xa.\n              Suc (t * k) \\<le> xa \\<and>\n              xa \\<le> Suc (t * k +\n                            (x - Suc (Suc (t * k)))) \\<longrightarrow>\n              s xa = NoMsg))) \\<or>\n     (\\<exists>x.\n         (x = Suc (t * k) \\<longrightarrow>\n          s (Suc (t * k)) = m \\<and>\n          0 < Suc (t * k) mod k \\<and>\n          (\\<exists>x.\n              (x = Suc (Suc (t * k)) \\<longrightarrow>\n               Suc (Suc (t * k)) mod k = 0) \\<and>\n              (x \\<noteq> Suc (Suc (t * k)) \\<longrightarrow>\n               Suc (Suc (t * k)) \\<le> x \\<and>\n               x mod k = 0 \\<and>\n               (\\<forall>xa.\n                   Suc (Suc (t * k)) \\<le> xa \\<and>\n                   xa \\<le> Suc (Suc (t * k +\n(x - Suc (Suc (Suc (t * k)))))) \\<longrightarrow>\n                   s xa = NoMsg)))) \\<and>\n         (x \\<noteq> Suc (t * k) \\<longrightarrow>\n          Suc (t * k) \\<le> x \\<and>\n          s x = m \\<and>\n          0 < x mod k \\<and>\n          (\\<exists>xa.\n              (xa = Suc x \\<longrightarrow> Suc x mod k = 0) \\<and>\n              (xa \\<noteq> Suc x \\<longrightarrow>\n               Suc x \\<le> xa \\<and>\n               xa mod k = 0 \\<and>\n               (\\<forall>xb.\n                   Suc x \\<le> xb \\<and>\n                   xb \\<le> Suc (x + (xa - Suc (Suc x))) \\<longrightarrow>\n                   s xb = NoMsg))) \\<and>\n          (\\<forall>xa.\n              Suc (t * k) \\<le> xa \\<and>\n              xa \\<le> Suc (t * k +\n                            (x - Suc (Suc (t * k)))) \\<longrightarrow>\n              0 < xa mod k)))\\<rbrakk>\n    \\<Longrightarrow> \\<exists>x.\n                         (x < t * k + k - Suc 0 \\<longrightarrow>\n                          t * k \\<le> x \\<and>\n                          s x = m \\<and>\n                          (\\<forall>xa.\n                              Suc x \\<le> xa \\<and>\n                              xa \\<le> t * k + k - Suc 0 \\<longrightarrow>\n                              s xa = NoMsg)) \\<and>\n                         (\\<not> x < t * k + k - Suc 0 \\<longrightarrow>\n                          t * k \\<le> x \\<and>\n                          x = t * k + k - Suc 0 \\<and> s x = m)", "apply simp"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>i.\n       \\<lbrakk>m \\<noteq> NoMsg; \\<And>t. event t = (t mod k = 0);\n        t0 = t * k; Suc 0 < k;\n        s (t * k) = m \\<and>\n        (\\<forall>x.\n            Suc (t * k) \\<le> x \\<and>\n            x \\<le> t * k + k - Suc 0 \\<longrightarrow>\n            s x = NoMsg);\n        t * k < t * k + k - Suc 0; i = t * k\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x.\n                            (x = Suc (t * k) \\<longrightarrow>\n                             Suc (t * k) mod k = 0) \\<and>\n                            (x \\<noteq> Suc (t * k) \\<longrightarrow>\n                             Suc (t * k) \\<le> x \\<and>\n                             x mod k = 0 \\<and>\n                             (\\<forall>xa.\n                                 Suc (t * k) \\<le> xa \\<and>\n                                 xa \\<le> Suc\n     (t * k + (x - Suc (Suc (t * k)))) \\<longrightarrow>\n                                 s xa = NoMsg))\n 2. \\<And>i.\n       \\<lbrakk>m \\<noteq> NoMsg; \\<And>t. event t = (t mod k = 0);\n        t0 = t * k; Suc 0 < k;\n        i < t * k + k - Suc 0 \\<longrightarrow>\n        t * k \\<le> i \\<and>\n        s i = m \\<and>\n        (\\<forall>x.\n            Suc i \\<le> x \\<and> x \\<le> t * k + k - Suc 0 \\<longrightarrow>\n            s x = NoMsg);\n        \\<not> i < t * k + k - Suc 0 \\<longrightarrow>\n        t * k \\<le> i \\<and> i = t * k + k - Suc 0 \\<and> s i = m;\n        i \\<noteq> t * k\\<rbrakk>\n       \\<Longrightarrow> s (t * k) = m \\<and>\n                         (\\<exists>x.\n                             (x = Suc (t * k) \\<longrightarrow>\n                              Suc (t * k) mod k = 0) \\<and>\n                             (x \\<noteq> Suc (t * k) \\<longrightarrow>\n                              Suc (t * k) \\<le> x \\<and>\n                              x mod k = 0 \\<and>\n                              (\\<forall>xa.\n                                  Suc (t * k) \\<le> xa \\<and>\n                                  xa \\<le> Suc\n      (t * k + (x - Suc (Suc (t * k)))) \\<longrightarrow>\n                                  s xa = NoMsg))) \\<or>\n                         (\\<exists>x.\n                             (x = Suc (t * k) \\<longrightarrow>\n                              s (Suc (t * k)) = m \\<and>\n                              0 < Suc (t * k) mod k \\<and>\n                              (\\<exists>x.\n                                  (x = Suc (Suc (t * k)) \\<longrightarrow>\n                                   Suc (Suc (t * k)) mod k = 0) \\<and>\n                                  (x \\<noteq>\n                                   Suc (Suc (t * k)) \\<longrightarrow>\n                                   Suc (Suc (t * k)) \\<le> x \\<and>\n                                   x mod k = 0 \\<and>\n                                   (\\<forall>xa.\n Suc (Suc (t * k)) \\<le> xa \\<and>\n xa \\<le> Suc (Suc (t * k +\n                    (x - Suc (Suc (Suc (t * k)))))) \\<longrightarrow>\n s xa = NoMsg)))) \\<and>\n                             (x \\<noteq> Suc (t * k) \\<longrightarrow>\n                              Suc (t * k) \\<le> x \\<and>\n                              s x = m \\<and>\n                              0 < x mod k \\<and>\n                              (\\<exists>xa.\n                                  (xa = Suc x \\<longrightarrow>\n                                   Suc x mod k = 0) \\<and>\n                                  (xa \\<noteq> Suc x \\<longrightarrow>\n                                   Suc x \\<le> xa \\<and>\n                                   xa mod k = 0 \\<and>\n                                   (\\<forall>xb.\n Suc x \\<le> xb \\<and>\n xb \\<le> Suc (x + (xa - Suc (Suc x))) \\<longrightarrow>\n s xb = NoMsg))) \\<and>\n                              (\\<forall>xa.\n                                  Suc (t * k) \\<le> xa \\<and>\n                                  xa \\<le> Suc\n      (t * k + (x - Suc (Suc (t * k)))) \\<longrightarrow>\n                                  0 < xa mod k)))\n 3. \\<lbrakk>m \\<noteq> NoMsg; \\<And>t. event t = (t mod k = 0); t0 = t * k;\n     Suc 0 < k;\n     s (t * k) = m \\<and>\n     (\\<exists>x.\n         (x = Suc (t * k) \\<longrightarrow> Suc (t * k) mod k = 0) \\<and>\n         (x \\<noteq> Suc (t * k) \\<longrightarrow>\n          Suc (t * k) \\<le> x \\<and>\n          x mod k = 0 \\<and>\n          (\\<forall>xa.\n              Suc (t * k) \\<le> xa \\<and>\n              xa \\<le> Suc (t * k +\n                            (x - Suc (Suc (t * k)))) \\<longrightarrow>\n              s xa = NoMsg))) \\<or>\n     (\\<exists>x.\n         (x = Suc (t * k) \\<longrightarrow>\n          s (Suc (t * k)) = m \\<and>\n          0 < Suc (t * k) mod k \\<and>\n          (\\<exists>x.\n              (x = Suc (Suc (t * k)) \\<longrightarrow>\n               Suc (Suc (t * k)) mod k = 0) \\<and>\n              (x \\<noteq> Suc (Suc (t * k)) \\<longrightarrow>\n               Suc (Suc (t * k)) \\<le> x \\<and>\n               x mod k = 0 \\<and>\n               (\\<forall>xa.\n                   Suc (Suc (t * k)) \\<le> xa \\<and>\n                   xa \\<le> Suc (Suc (t * k +\n(x - Suc (Suc (Suc (t * k)))))) \\<longrightarrow>\n                   s xa = NoMsg)))) \\<and>\n         (x \\<noteq> Suc (t * k) \\<longrightarrow>\n          Suc (t * k) \\<le> x \\<and>\n          s x = m \\<and>\n          0 < x mod k \\<and>\n          (\\<exists>xa.\n              (xa = Suc x \\<longrightarrow> Suc x mod k = 0) \\<and>\n              (xa \\<noteq> Suc x \\<longrightarrow>\n               Suc x \\<le> xa \\<and>\n               xa mod k = 0 \\<and>\n               (\\<forall>xb.\n                   Suc x \\<le> xb \\<and>\n                   xb \\<le> Suc (x + (xa - Suc (Suc x))) \\<longrightarrow>\n                   s xb = NoMsg))) \\<and>\n          (\\<forall>xa.\n              Suc (t * k) \\<le> xa \\<and>\n              xa \\<le> Suc (t * k +\n                            (x - Suc (Suc (t * k)))) \\<longrightarrow>\n              0 < xa mod k)))\\<rbrakk>\n    \\<Longrightarrow> \\<exists>x.\n                         (x < t * k + k - Suc 0 \\<longrightarrow>\n                          t * k \\<le> x \\<and>\n                          s x = m \\<and>\n                          (\\<forall>xa.\n                              Suc x \\<le> xa \\<and>\n                              xa \\<le> t * k + k - Suc 0 \\<longrightarrow>\n                              s xa = NoMsg)) \\<and>\n                         (\\<not> x < t * k + k - Suc 0 \\<longrightarrow>\n                          t * k \\<le> x \\<and>\n                          x = t * k + k - Suc 0 \\<and> s x = m)", "apply (rule_tac x=\"t * k + k\" in exI)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>i.\n       \\<lbrakk>m \\<noteq> NoMsg; \\<And>t. event t = (t mod k = 0);\n        t0 = t * k; Suc 0 < k;\n        s (t * k) = m \\<and>\n        (\\<forall>x.\n            Suc (t * k) \\<le> x \\<and>\n            x \\<le> t * k + k - Suc 0 \\<longrightarrow>\n            s x = NoMsg);\n        t * k < t * k + k - Suc 0; i = t * k\\<rbrakk>\n       \\<Longrightarrow> (t * k + k = Suc (t * k) \\<longrightarrow>\n                          Suc (t * k) mod k = 0) \\<and>\n                         (t * k + k \\<noteq> Suc (t * k) \\<longrightarrow>\n                          Suc (t * k) \\<le> t * k + k \\<and>\n                          (t * k + k) mod k = 0 \\<and>\n                          (\\<forall>x.\n                              Suc (t * k) \\<le> x \\<and>\n                              x \\<le> Suc\n (t * k + (t * k + k - Suc (Suc (t * k)))) \\<longrightarrow>\n                              s x = NoMsg))\n 2. \\<And>i.\n       \\<lbrakk>m \\<noteq> NoMsg; \\<And>t. event t = (t mod k = 0);\n        t0 = t * k; Suc 0 < k;\n        i < t * k + k - Suc 0 \\<longrightarrow>\n        t * k \\<le> i \\<and>\n        s i = m \\<and>\n        (\\<forall>x.\n            Suc i \\<le> x \\<and> x \\<le> t * k + k - Suc 0 \\<longrightarrow>\n            s x = NoMsg);\n        \\<not> i < t * k + k - Suc 0 \\<longrightarrow>\n        t * k \\<le> i \\<and> i = t * k + k - Suc 0 \\<and> s i = m;\n        i \\<noteq> t * k\\<rbrakk>\n       \\<Longrightarrow> s (t * k) = m \\<and>\n                         (\\<exists>x.\n                             (x = Suc (t * k) \\<longrightarrow>\n                              Suc (t * k) mod k = 0) \\<and>\n                             (x \\<noteq> Suc (t * k) \\<longrightarrow>\n                              Suc (t * k) \\<le> x \\<and>\n                              x mod k = 0 \\<and>\n                              (\\<forall>xa.\n                                  Suc (t * k) \\<le> xa \\<and>\n                                  xa \\<le> Suc\n      (t * k + (x - Suc (Suc (t * k)))) \\<longrightarrow>\n                                  s xa = NoMsg))) \\<or>\n                         (\\<exists>x.\n                             (x = Suc (t * k) \\<longrightarrow>\n                              s (Suc (t * k)) = m \\<and>\n                              0 < Suc (t * k) mod k \\<and>\n                              (\\<exists>x.\n                                  (x = Suc (Suc (t * k)) \\<longrightarrow>\n                                   Suc (Suc (t * k)) mod k = 0) \\<and>\n                                  (x \\<noteq>\n                                   Suc (Suc (t * k)) \\<longrightarrow>\n                                   Suc (Suc (t * k)) \\<le> x \\<and>\n                                   x mod k = 0 \\<and>\n                                   (\\<forall>xa.\n Suc (Suc (t * k)) \\<le> xa \\<and>\n xa \\<le> Suc (Suc (t * k +\n                    (x - Suc (Suc (Suc (t * k)))))) \\<longrightarrow>\n s xa = NoMsg)))) \\<and>\n                             (x \\<noteq> Suc (t * k) \\<longrightarrow>\n                              Suc (t * k) \\<le> x \\<and>\n                              s x = m \\<and>\n                              0 < x mod k \\<and>\n                              (\\<exists>xa.\n                                  (xa = Suc x \\<longrightarrow>\n                                   Suc x mod k = 0) \\<and>\n                                  (xa \\<noteq> Suc x \\<longrightarrow>\n                                   Suc x \\<le> xa \\<and>\n                                   xa mod k = 0 \\<and>\n                                   (\\<forall>xb.\n Suc x \\<le> xb \\<and>\n xb \\<le> Suc (x + (xa - Suc (Suc x))) \\<longrightarrow>\n s xb = NoMsg))) \\<and>\n                              (\\<forall>xa.\n                                  Suc (t * k) \\<le> xa \\<and>\n                                  xa \\<le> Suc\n      (t * k + (x - Suc (Suc (t * k)))) \\<longrightarrow>\n                                  0 < xa mod k)))\n 3. \\<lbrakk>m \\<noteq> NoMsg; \\<And>t. event t = (t mod k = 0); t0 = t * k;\n     Suc 0 < k;\n     s (t * k) = m \\<and>\n     (\\<exists>x.\n         (x = Suc (t * k) \\<longrightarrow> Suc (t * k) mod k = 0) \\<and>\n         (x \\<noteq> Suc (t * k) \\<longrightarrow>\n          Suc (t * k) \\<le> x \\<and>\n          x mod k = 0 \\<and>\n          (\\<forall>xa.\n              Suc (t * k) \\<le> xa \\<and>\n              xa \\<le> Suc (t * k +\n                            (x - Suc (Suc (t * k)))) \\<longrightarrow>\n              s xa = NoMsg))) \\<or>\n     (\\<exists>x.\n         (x = Suc (t * k) \\<longrightarrow>\n          s (Suc (t * k)) = m \\<and>\n          0 < Suc (t * k) mod k \\<and>\n          (\\<exists>x.\n              (x = Suc (Suc (t * k)) \\<longrightarrow>\n               Suc (Suc (t * k)) mod k = 0) \\<and>\n              (x \\<noteq> Suc (Suc (t * k)) \\<longrightarrow>\n               Suc (Suc (t * k)) \\<le> x \\<and>\n               x mod k = 0 \\<and>\n               (\\<forall>xa.\n                   Suc (Suc (t * k)) \\<le> xa \\<and>\n                   xa \\<le> Suc (Suc (t * k +\n(x - Suc (Suc (Suc (t * k)))))) \\<longrightarrow>\n                   s xa = NoMsg)))) \\<and>\n         (x \\<noteq> Suc (t * k) \\<longrightarrow>\n          Suc (t * k) \\<le> x \\<and>\n          s x = m \\<and>\n          0 < x mod k \\<and>\n          (\\<exists>xa.\n              (xa = Suc x \\<longrightarrow> Suc x mod k = 0) \\<and>\n              (xa \\<noteq> Suc x \\<longrightarrow>\n               Suc x \\<le> xa \\<and>\n               xa mod k = 0 \\<and>\n               (\\<forall>xb.\n                   Suc x \\<le> xb \\<and>\n                   xb \\<le> Suc (x + (xa - Suc (Suc x))) \\<longrightarrow>\n                   s xb = NoMsg))) \\<and>\n          (\\<forall>xa.\n              Suc (t * k) \\<le> xa \\<and>\n              xa \\<le> Suc (t * k +\n                            (x - Suc (Suc (t * k)))) \\<longrightarrow>\n              0 < xa mod k)))\\<rbrakk>\n    \\<Longrightarrow> \\<exists>x.\n                         (x < t * k + k - Suc 0 \\<longrightarrow>\n                          t * k \\<le> x \\<and>\n                          s x = m \\<and>\n                          (\\<forall>xa.\n                              Suc x \\<le> xa \\<and>\n                              xa \\<le> t * k + k - Suc 0 \\<longrightarrow>\n                              s xa = NoMsg)) \\<and>\n                         (\\<not> x < t * k + k - Suc 0 \\<longrightarrow>\n                          t * k \\<le> x \\<and>\n                          x = t * k + k - Suc 0 \\<and> s x = m)", "apply force"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>i.\n       \\<lbrakk>m \\<noteq> NoMsg; \\<And>t. event t = (t mod k = 0);\n        t0 = t * k; Suc 0 < k;\n        i < t * k + k - Suc 0 \\<longrightarrow>\n        t * k \\<le> i \\<and>\n        s i = m \\<and>\n        (\\<forall>x.\n            Suc i \\<le> x \\<and> x \\<le> t * k + k - Suc 0 \\<longrightarrow>\n            s x = NoMsg);\n        \\<not> i < t * k + k - Suc 0 \\<longrightarrow>\n        t * k \\<le> i \\<and> i = t * k + k - Suc 0 \\<and> s i = m;\n        i \\<noteq> t * k\\<rbrakk>\n       \\<Longrightarrow> s (t * k) = m \\<and>\n                         (\\<exists>x.\n                             (x = Suc (t * k) \\<longrightarrow>\n                              Suc (t * k) mod k = 0) \\<and>\n                             (x \\<noteq> Suc (t * k) \\<longrightarrow>\n                              Suc (t * k) \\<le> x \\<and>\n                              x mod k = 0 \\<and>\n                              (\\<forall>xa.\n                                  Suc (t * k) \\<le> xa \\<and>\n                                  xa \\<le> Suc\n      (t * k + (x - Suc (Suc (t * k)))) \\<longrightarrow>\n                                  s xa = NoMsg))) \\<or>\n                         (\\<exists>x.\n                             (x = Suc (t * k) \\<longrightarrow>\n                              s (Suc (t * k)) = m \\<and>\n                              0 < Suc (t * k) mod k \\<and>\n                              (\\<exists>x.\n                                  (x = Suc (Suc (t * k)) \\<longrightarrow>\n                                   Suc (Suc (t * k)) mod k = 0) \\<and>\n                                  (x \\<noteq>\n                                   Suc (Suc (t * k)) \\<longrightarrow>\n                                   Suc (Suc (t * k)) \\<le> x \\<and>\n                                   x mod k = 0 \\<and>\n                                   (\\<forall>xa.\n Suc (Suc (t * k)) \\<le> xa \\<and>\n xa \\<le> Suc (Suc (t * k +\n                    (x - Suc (Suc (Suc (t * k)))))) \\<longrightarrow>\n s xa = NoMsg)))) \\<and>\n                             (x \\<noteq> Suc (t * k) \\<longrightarrow>\n                              Suc (t * k) \\<le> x \\<and>\n                              s x = m \\<and>\n                              0 < x mod k \\<and>\n                              (\\<exists>xa.\n                                  (xa = Suc x \\<longrightarrow>\n                                   Suc x mod k = 0) \\<and>\n                                  (xa \\<noteq> Suc x \\<longrightarrow>\n                                   Suc x \\<le> xa \\<and>\n                                   xa mod k = 0 \\<and>\n                                   (\\<forall>xb.\n Suc x \\<le> xb \\<and>\n xb \\<le> Suc (x + (xa - Suc (Suc x))) \\<longrightarrow>\n s xb = NoMsg))) \\<and>\n                              (\\<forall>xa.\n                                  Suc (t * k) \\<le> xa \\<and>\n                                  xa \\<le> Suc\n      (t * k + (x - Suc (Suc (t * k)))) \\<longrightarrow>\n                                  0 < xa mod k)))\n 2. \\<lbrakk>m \\<noteq> NoMsg; \\<And>t. event t = (t mod k = 0); t0 = t * k;\n     Suc 0 < k;\n     s (t * k) = m \\<and>\n     (\\<exists>x.\n         (x = Suc (t * k) \\<longrightarrow> Suc (t * k) mod k = 0) \\<and>\n         (x \\<noteq> Suc (t * k) \\<longrightarrow>\n          Suc (t * k) \\<le> x \\<and>\n          x mod k = 0 \\<and>\n          (\\<forall>xa.\n              Suc (t * k) \\<le> xa \\<and>\n              xa \\<le> Suc (t * k +\n                            (x - Suc (Suc (t * k)))) \\<longrightarrow>\n              s xa = NoMsg))) \\<or>\n     (\\<exists>x.\n         (x = Suc (t * k) \\<longrightarrow>\n          s (Suc (t * k)) = m \\<and>\n          0 < Suc (t * k) mod k \\<and>\n          (\\<exists>x.\n              (x = Suc (Suc (t * k)) \\<longrightarrow>\n               Suc (Suc (t * k)) mod k = 0) \\<and>\n              (x \\<noteq> Suc (Suc (t * k)) \\<longrightarrow>\n               Suc (Suc (t * k)) \\<le> x \\<and>\n               x mod k = 0 \\<and>\n               (\\<forall>xa.\n                   Suc (Suc (t * k)) \\<le> xa \\<and>\n                   xa \\<le> Suc (Suc (t * k +\n(x - Suc (Suc (Suc (t * k)))))) \\<longrightarrow>\n                   s xa = NoMsg)))) \\<and>\n         (x \\<noteq> Suc (t * k) \\<longrightarrow>\n          Suc (t * k) \\<le> x \\<and>\n          s x = m \\<and>\n          0 < x mod k \\<and>\n          (\\<exists>xa.\n              (xa = Suc x \\<longrightarrow> Suc x mod k = 0) \\<and>\n              (xa \\<noteq> Suc x \\<longrightarrow>\n               Suc x \\<le> xa \\<and>\n               xa mod k = 0 \\<and>\n               (\\<forall>xb.\n                   Suc x \\<le> xb \\<and>\n                   xb \\<le> Suc (x + (xa - Suc (Suc x))) \\<longrightarrow>\n                   s xb = NoMsg))) \\<and>\n          (\\<forall>xa.\n              Suc (t * k) \\<le> xa \\<and>\n              xa \\<le> Suc (t * k +\n                            (x - Suc (Suc (t * k)))) \\<longrightarrow>\n              0 < xa mod k)))\\<rbrakk>\n    \\<Longrightarrow> \\<exists>x.\n                         (x < t * k + k - Suc 0 \\<longrightarrow>\n                          t * k \\<le> x \\<and>\n                          s x = m \\<and>\n                          (\\<forall>xa.\n                              Suc x \\<le> xa \\<and>\n                              xa \\<le> t * k + k - Suc 0 \\<longrightarrow>\n                              s xa = NoMsg)) \\<and>\n                         (\\<not> x < t * k + k - Suc 0 \\<longrightarrow>\n                          t * k \\<le> x \\<and>\n                          x = t * k + k - Suc 0 \\<and> s x = m)", "apply (rule disjI2)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>i.\n       \\<lbrakk>m \\<noteq> NoMsg; \\<And>t. event t = (t mod k = 0);\n        t0 = t * k; Suc 0 < k;\n        i < t * k + k - Suc 0 \\<longrightarrow>\n        t * k \\<le> i \\<and>\n        s i = m \\<and>\n        (\\<forall>x.\n            Suc i \\<le> x \\<and> x \\<le> t * k + k - Suc 0 \\<longrightarrow>\n            s x = NoMsg);\n        \\<not> i < t * k + k - Suc 0 \\<longrightarrow>\n        t * k \\<le> i \\<and> i = t * k + k - Suc 0 \\<and> s i = m;\n        i \\<noteq> t * k\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x.\n                            (x = Suc (t * k) \\<longrightarrow>\n                             s (Suc (t * k)) = m \\<and>\n                             0 < Suc (t * k) mod k \\<and>\n                             (\\<exists>x.\n                                 (x = Suc (Suc (t * k)) \\<longrightarrow>\n                                  Suc (Suc (t * k)) mod k = 0) \\<and>\n                                 (x \\<noteq>\n                                  Suc (Suc (t * k)) \\<longrightarrow>\n                                  Suc (Suc (t * k)) \\<le> x \\<and>\n                                  x mod k = 0 \\<and>\n                                  (\\<forall>xa.\nSuc (Suc (t * k)) \\<le> xa \\<and>\nxa \\<le> Suc (Suc (t * k + (x - Suc (Suc (Suc (t * k)))))) \\<longrightarrow>\ns xa = NoMsg)))) \\<and>\n                            (x \\<noteq> Suc (t * k) \\<longrightarrow>\n                             Suc (t * k) \\<le> x \\<and>\n                             s x = m \\<and>\n                             0 < x mod k \\<and>\n                             (\\<exists>xa.\n                                 (xa = Suc x \\<longrightarrow>\n                                  Suc x mod k = 0) \\<and>\n                                 (xa \\<noteq> Suc x \\<longrightarrow>\n                                  Suc x \\<le> xa \\<and>\n                                  xa mod k = 0 \\<and>\n                                  (\\<forall>xb.\nSuc x \\<le> xb \\<and>\nxb \\<le> Suc (x + (xa - Suc (Suc x))) \\<longrightarrow>\ns xb = NoMsg))) \\<and>\n                             (\\<forall>xa.\n                                 Suc (t * k) \\<le> xa \\<and>\n                                 xa \\<le> Suc\n     (t * k + (x - Suc (Suc (t * k)))) \\<longrightarrow>\n                                 0 < xa mod k))\n 2. \\<lbrakk>m \\<noteq> NoMsg; \\<And>t. event t = (t mod k = 0); t0 = t * k;\n     Suc 0 < k;\n     s (t * k) = m \\<and>\n     (\\<exists>x.\n         (x = Suc (t * k) \\<longrightarrow> Suc (t * k) mod k = 0) \\<and>\n         (x \\<noteq> Suc (t * k) \\<longrightarrow>\n          Suc (t * k) \\<le> x \\<and>\n          x mod k = 0 \\<and>\n          (\\<forall>xa.\n              Suc (t * k) \\<le> xa \\<and>\n              xa \\<le> Suc (t * k +\n                            (x - Suc (Suc (t * k)))) \\<longrightarrow>\n              s xa = NoMsg))) \\<or>\n     (\\<exists>x.\n         (x = Suc (t * k) \\<longrightarrow>\n          s (Suc (t * k)) = m \\<and>\n          0 < Suc (t * k) mod k \\<and>\n          (\\<exists>x.\n              (x = Suc (Suc (t * k)) \\<longrightarrow>\n               Suc (Suc (t * k)) mod k = 0) \\<and>\n              (x \\<noteq> Suc (Suc (t * k)) \\<longrightarrow>\n               Suc (Suc (t * k)) \\<le> x \\<and>\n               x mod k = 0 \\<and>\n               (\\<forall>xa.\n                   Suc (Suc (t * k)) \\<le> xa \\<and>\n                   xa \\<le> Suc (Suc (t * k +\n(x - Suc (Suc (Suc (t * k)))))) \\<longrightarrow>\n                   s xa = NoMsg)))) \\<and>\n         (x \\<noteq> Suc (t * k) \\<longrightarrow>\n          Suc (t * k) \\<le> x \\<and>\n          s x = m \\<and>\n          0 < x mod k \\<and>\n          (\\<exists>xa.\n              (xa = Suc x \\<longrightarrow> Suc x mod k = 0) \\<and>\n              (xa \\<noteq> Suc x \\<longrightarrow>\n               Suc x \\<le> xa \\<and>\n               xa mod k = 0 \\<and>\n               (\\<forall>xb.\n                   Suc x \\<le> xb \\<and>\n                   xb \\<le> Suc (x + (xa - Suc (Suc x))) \\<longrightarrow>\n                   s xb = NoMsg))) \\<and>\n          (\\<forall>xa.\n              Suc (t * k) \\<le> xa \\<and>\n              xa \\<le> Suc (t * k +\n                            (x - Suc (Suc (t * k)))) \\<longrightarrow>\n              0 < xa mod k)))\\<rbrakk>\n    \\<Longrightarrow> \\<exists>x.\n                         (x < t * k + k - Suc 0 \\<longrightarrow>\n                          t * k \\<le> x \\<and>\n                          s x = m \\<and>\n                          (\\<forall>xa.\n                              Suc x \\<le> xa \\<and>\n                              xa \\<le> t * k + k - Suc 0 \\<longrightarrow>\n                              s xa = NoMsg)) \\<and>\n                         (\\<not> x < t * k + k - Suc 0 \\<longrightarrow>\n                          t * k \\<le> x \\<and>\n                          x = t * k + k - Suc 0 \\<and> s x = m)", "apply (rule_tac x=i in exI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>i.\n       \\<lbrakk>m \\<noteq> NoMsg; \\<And>t. event t = (t mod k = 0);\n        t0 = t * k; Suc 0 < k;\n        i < t * k + k - Suc 0 \\<longrightarrow>\n        t * k \\<le> i \\<and>\n        s i = m \\<and>\n        (\\<forall>x.\n            Suc i \\<le> x \\<and> x \\<le> t * k + k - Suc 0 \\<longrightarrow>\n            s x = NoMsg);\n        \\<not> i < t * k + k - Suc 0 \\<longrightarrow>\n        t * k \\<le> i \\<and> i = t * k + k - Suc 0 \\<and> s i = m;\n        i \\<noteq> t * k\\<rbrakk>\n       \\<Longrightarrow> (i = Suc (t * k) \\<longrightarrow>\n                          s (Suc (t * k)) = m \\<and>\n                          0 < Suc (t * k) mod k \\<and>\n                          (\\<exists>x.\n                              (x = Suc (Suc (t * k)) \\<longrightarrow>\n                               Suc (Suc (t * k)) mod k = 0) \\<and>\n                              (x \\<noteq>\n                               Suc (Suc (t * k)) \\<longrightarrow>\n                               Suc (Suc (t * k)) \\<le> x \\<and>\n                               x mod k = 0 \\<and>\n                               (\\<forall>xa.\n                                   Suc (Suc (t * k)) \\<le> xa \\<and>\n                                   xa \\<le> Suc\n       (Suc (t * k + (x - Suc (Suc (Suc (t * k)))))) \\<longrightarrow>\n                                   s xa = NoMsg)))) \\<and>\n                         (i \\<noteq> Suc (t * k) \\<longrightarrow>\n                          Suc (t * k) \\<le> i \\<and>\n                          s i = m \\<and>\n                          0 < i mod k \\<and>\n                          (\\<exists>x.\n                              (x = Suc i \\<longrightarrow>\n                               Suc i mod k = 0) \\<and>\n                              (x \\<noteq> Suc i \\<longrightarrow>\n                               Suc i \\<le> x \\<and>\n                               x mod k = 0 \\<and>\n                               (\\<forall>xa.\n                                   Suc i \\<le> xa \\<and>\n                                   xa \\<le> Suc\n       (i + (x - Suc (Suc i))) \\<longrightarrow>\n                                   s xa = NoMsg))) \\<and>\n                          (\\<forall>x.\n                              Suc (t * k) \\<le> x \\<and>\n                              x \\<le> Suc\n (t * k + (i - Suc (Suc (t * k)))) \\<longrightarrow>\n                              0 < x mod k))\n 2. \\<lbrakk>m \\<noteq> NoMsg; \\<And>t. event t = (t mod k = 0); t0 = t * k;\n     Suc 0 < k;\n     s (t * k) = m \\<and>\n     (\\<exists>x.\n         (x = Suc (t * k) \\<longrightarrow> Suc (t * k) mod k = 0) \\<and>\n         (x \\<noteq> Suc (t * k) \\<longrightarrow>\n          Suc (t * k) \\<le> x \\<and>\n          x mod k = 0 \\<and>\n          (\\<forall>xa.\n              Suc (t * k) \\<le> xa \\<and>\n              xa \\<le> Suc (t * k +\n                            (x - Suc (Suc (t * k)))) \\<longrightarrow>\n              s xa = NoMsg))) \\<or>\n     (\\<exists>x.\n         (x = Suc (t * k) \\<longrightarrow>\n          s (Suc (t * k)) = m \\<and>\n          0 < Suc (t * k) mod k \\<and>\n          (\\<exists>x.\n              (x = Suc (Suc (t * k)) \\<longrightarrow>\n               Suc (Suc (t * k)) mod k = 0) \\<and>\n              (x \\<noteq> Suc (Suc (t * k)) \\<longrightarrow>\n               Suc (Suc (t * k)) \\<le> x \\<and>\n               x mod k = 0 \\<and>\n               (\\<forall>xa.\n                   Suc (Suc (t * k)) \\<le> xa \\<and>\n                   xa \\<le> Suc (Suc (t * k +\n(x - Suc (Suc (Suc (t * k)))))) \\<longrightarrow>\n                   s xa = NoMsg)))) \\<and>\n         (x \\<noteq> Suc (t * k) \\<longrightarrow>\n          Suc (t * k) \\<le> x \\<and>\n          s x = m \\<and>\n          0 < x mod k \\<and>\n          (\\<exists>xa.\n              (xa = Suc x \\<longrightarrow> Suc x mod k = 0) \\<and>\n              (xa \\<noteq> Suc x \\<longrightarrow>\n               Suc x \\<le> xa \\<and>\n               xa mod k = 0 \\<and>\n               (\\<forall>xb.\n                   Suc x \\<le> xb \\<and>\n                   xb \\<le> Suc (x + (xa - Suc (Suc x))) \\<longrightarrow>\n                   s xb = NoMsg))) \\<and>\n          (\\<forall>xa.\n              Suc (t * k) \\<le> xa \\<and>\n              xa \\<le> Suc (t * k +\n                            (x - Suc (Suc (t * k)))) \\<longrightarrow>\n              0 < xa mod k)))\\<rbrakk>\n    \\<Longrightarrow> \\<exists>x.\n                         (x < t * k + k - Suc 0 \\<longrightarrow>\n                          t * k \\<le> x \\<and>\n                          s x = m \\<and>\n                          (\\<forall>xa.\n                              Suc x \\<le> xa \\<and>\n                              xa \\<le> t * k + k - Suc 0 \\<longrightarrow>\n                              s xa = NoMsg)) \\<and>\n                         (\\<not> x < t * k + k - Suc 0 \\<longrightarrow>\n                          t * k \\<le> x \\<and>\n                          x = t * k + k - Suc 0 \\<and> s x = m)", "apply (case_tac \"i = Suc (t * k)\")"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>i.\n       \\<lbrakk>m \\<noteq> NoMsg; \\<And>t. event t = (t mod k = 0);\n        t0 = t * k; Suc 0 < k;\n        i < t * k + k - Suc 0 \\<longrightarrow>\n        t * k \\<le> i \\<and>\n        s i = m \\<and>\n        (\\<forall>x.\n            Suc i \\<le> x \\<and> x \\<le> t * k + k - Suc 0 \\<longrightarrow>\n            s x = NoMsg);\n        \\<not> i < t * k + k - Suc 0 \\<longrightarrow>\n        t * k \\<le> i \\<and> i = t * k + k - Suc 0 \\<and> s i = m;\n        i \\<noteq> t * k; i = Suc (t * k)\\<rbrakk>\n       \\<Longrightarrow> (i = Suc (t * k) \\<longrightarrow>\n                          s (Suc (t * k)) = m \\<and>\n                          0 < Suc (t * k) mod k \\<and>\n                          (\\<exists>x.\n                              (x = Suc (Suc (t * k)) \\<longrightarrow>\n                               Suc (Suc (t * k)) mod k = 0) \\<and>\n                              (x \\<noteq>\n                               Suc (Suc (t * k)) \\<longrightarrow>\n                               Suc (Suc (t * k)) \\<le> x \\<and>\n                               x mod k = 0 \\<and>\n                               (\\<forall>xa.\n                                   Suc (Suc (t * k)) \\<le> xa \\<and>\n                                   xa \\<le> Suc\n       (Suc (t * k + (x - Suc (Suc (Suc (t * k)))))) \\<longrightarrow>\n                                   s xa = NoMsg)))) \\<and>\n                         (i \\<noteq> Suc (t * k) \\<longrightarrow>\n                          Suc (t * k) \\<le> i \\<and>\n                          s i = m \\<and>\n                          0 < i mod k \\<and>\n                          (\\<exists>x.\n                              (x = Suc i \\<longrightarrow>\n                               Suc i mod k = 0) \\<and>\n                              (x \\<noteq> Suc i \\<longrightarrow>\n                               Suc i \\<le> x \\<and>\n                               x mod k = 0 \\<and>\n                               (\\<forall>xa.\n                                   Suc i \\<le> xa \\<and>\n                                   xa \\<le> Suc\n       (i + (x - Suc (Suc i))) \\<longrightarrow>\n                                   s xa = NoMsg))) \\<and>\n                          (\\<forall>x.\n                              Suc (t * k) \\<le> x \\<and>\n                              x \\<le> Suc\n (t * k + (i - Suc (Suc (t * k)))) \\<longrightarrow>\n                              0 < x mod k))\n 2. \\<And>i.\n       \\<lbrakk>m \\<noteq> NoMsg; \\<And>t. event t = (t mod k = 0);\n        t0 = t * k; Suc 0 < k;\n        i < t * k + k - Suc 0 \\<longrightarrow>\n        t * k \\<le> i \\<and>\n        s i = m \\<and>\n        (\\<forall>x.\n            Suc i \\<le> x \\<and> x \\<le> t * k + k - Suc 0 \\<longrightarrow>\n            s x = NoMsg);\n        \\<not> i < t * k + k - Suc 0 \\<longrightarrow>\n        t * k \\<le> i \\<and> i = t * k + k - Suc 0 \\<and> s i = m;\n        i \\<noteq> t * k; i \\<noteq> Suc (t * k)\\<rbrakk>\n       \\<Longrightarrow> (i = Suc (t * k) \\<longrightarrow>\n                          s (Suc (t * k)) = m \\<and>\n                          0 < Suc (t * k) mod k \\<and>\n                          (\\<exists>x.\n                              (x = Suc (Suc (t * k)) \\<longrightarrow>\n                               Suc (Suc (t * k)) mod k = 0) \\<and>\n                              (x \\<noteq>\n                               Suc (Suc (t * k)) \\<longrightarrow>\n                               Suc (Suc (t * k)) \\<le> x \\<and>\n                               x mod k = 0 \\<and>\n                               (\\<forall>xa.\n                                   Suc (Suc (t * k)) \\<le> xa \\<and>\n                                   xa \\<le> Suc\n       (Suc (t * k + (x - Suc (Suc (Suc (t * k)))))) \\<longrightarrow>\n                                   s xa = NoMsg)))) \\<and>\n                         (i \\<noteq> Suc (t * k) \\<longrightarrow>\n                          Suc (t * k) \\<le> i \\<and>\n                          s i = m \\<and>\n                          0 < i mod k \\<and>\n                          (\\<exists>x.\n                              (x = Suc i \\<longrightarrow>\n                               Suc i mod k = 0) \\<and>\n                              (x \\<noteq> Suc i \\<longrightarrow>\n                               Suc i \\<le> x \\<and>\n                               x mod k = 0 \\<and>\n                               (\\<forall>xa.\n                                   Suc i \\<le> xa \\<and>\n                                   xa \\<le> Suc\n       (i + (x - Suc (Suc i))) \\<longrightarrow>\n                                   s xa = NoMsg))) \\<and>\n                          (\\<forall>x.\n                              Suc (t * k) \\<le> x \\<and>\n                              x \\<le> Suc\n (t * k + (i - Suc (Suc (t * k)))) \\<longrightarrow>\n                              0 < x mod k))\n 3. \\<lbrakk>m \\<noteq> NoMsg; \\<And>t. event t = (t mod k = 0); t0 = t * k;\n     Suc 0 < k;\n     s (t * k) = m \\<and>\n     (\\<exists>x.\n         (x = Suc (t * k) \\<longrightarrow> Suc (t * k) mod k = 0) \\<and>\n         (x \\<noteq> Suc (t * k) \\<longrightarrow>\n          Suc (t * k) \\<le> x \\<and>\n          x mod k = 0 \\<and>\n          (\\<forall>xa.\n              Suc (t * k) \\<le> xa \\<and>\n              xa \\<le> Suc (t * k +\n                            (x - Suc (Suc (t * k)))) \\<longrightarrow>\n              s xa = NoMsg))) \\<or>\n     (\\<exists>x.\n         (x = Suc (t * k) \\<longrightarrow>\n          s (Suc (t * k)) = m \\<and>\n          0 < Suc (t * k) mod k \\<and>\n          (\\<exists>x.\n              (x = Suc (Suc (t * k)) \\<longrightarrow>\n               Suc (Suc (t * k)) mod k = 0) \\<and>\n              (x \\<noteq> Suc (Suc (t * k)) \\<longrightarrow>\n               Suc (Suc (t * k)) \\<le> x \\<and>\n               x mod k = 0 \\<and>\n               (\\<forall>xa.\n                   Suc (Suc (t * k)) \\<le> xa \\<and>\n                   xa \\<le> Suc (Suc (t * k +\n(x - Suc (Suc (Suc (t * k)))))) \\<longrightarrow>\n                   s xa = NoMsg)))) \\<and>\n         (x \\<noteq> Suc (t * k) \\<longrightarrow>\n          Suc (t * k) \\<le> x \\<and>\n          s x = m \\<and>\n          0 < x mod k \\<and>\n          (\\<exists>xa.\n              (xa = Suc x \\<longrightarrow> Suc x mod k = 0) \\<and>\n              (xa \\<noteq> Suc x \\<longrightarrow>\n               Suc x \\<le> xa \\<and>\n               xa mod k = 0 \\<and>\n               (\\<forall>xb.\n                   Suc x \\<le> xb \\<and>\n                   xb \\<le> Suc (x + (xa - Suc (Suc x))) \\<longrightarrow>\n                   s xb = NoMsg))) \\<and>\n          (\\<forall>xa.\n              Suc (t * k) \\<le> xa \\<and>\n              xa \\<le> Suc (t * k +\n                            (x - Suc (Suc (t * k)))) \\<longrightarrow>\n              0 < xa mod k)))\\<rbrakk>\n    \\<Longrightarrow> \\<exists>x.\n                         (x < t * k + k - Suc 0 \\<longrightarrow>\n                          t * k \\<le> x \\<and>\n                          s x = m \\<and>\n                          (\\<forall>xa.\n                              Suc x \\<le> xa \\<and>\n                              xa \\<le> t * k + k - Suc 0 \\<longrightarrow>\n                              s xa = NoMsg)) \\<and>\n                         (\\<not> x < t * k + k - Suc 0 \\<longrightarrow>\n                          t * k \\<le> x \\<and>\n                          x = t * k + k - Suc 0 \\<and> s x = m)", "apply simp"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>i.\n       \\<lbrakk>m \\<noteq> NoMsg; \\<And>t. event t = (t mod k = 0);\n        t0 = t * k; Suc 0 < k;\n        Suc (t * k) < t * k + k - Suc 0 \\<longrightarrow>\n        s (Suc (t * k)) = m \\<and>\n        (\\<forall>x.\n            Suc (Suc (t * k)) \\<le> x \\<and>\n            x \\<le> t * k + k - Suc 0 \\<longrightarrow>\n            s x = NoMsg);\n        \\<not> Suc (t * k) < t * k + k - Suc 0 \\<longrightarrow>\n        Suc (t * k) = t * k + k - Suc 0 \\<and> s (Suc (t * k)) = m;\n        i = Suc (t * k)\\<rbrakk>\n       \\<Longrightarrow> s (Suc (t * k)) = m \\<and>\n                         0 < Suc (t * k) mod k \\<and>\n                         (\\<exists>x.\n                             (x = Suc (Suc (t * k)) \\<longrightarrow>\n                              Suc (Suc (t * k)) mod k = 0) \\<and>\n                             (x \\<noteq> Suc (Suc (t * k)) \\<longrightarrow>\n                              Suc (Suc (t * k)) \\<le> x \\<and>\n                              x mod k = 0 \\<and>\n                              (\\<forall>xa.\n                                  Suc (Suc (t * k)) \\<le> xa \\<and>\n                                  xa \\<le> Suc\n      (Suc (t * k + (x - Suc (Suc (Suc (t * k)))))) \\<longrightarrow>\n                                  s xa = NoMsg)))\n 2. \\<And>i.\n       \\<lbrakk>m \\<noteq> NoMsg; \\<And>t. event t = (t mod k = 0);\n        t0 = t * k; Suc 0 < k;\n        i < t * k + k - Suc 0 \\<longrightarrow>\n        t * k \\<le> i \\<and>\n        s i = m \\<and>\n        (\\<forall>x.\n            Suc i \\<le> x \\<and> x \\<le> t * k + k - Suc 0 \\<longrightarrow>\n            s x = NoMsg);\n        \\<not> i < t * k + k - Suc 0 \\<longrightarrow>\n        t * k \\<le> i \\<and> i = t * k + k - Suc 0 \\<and> s i = m;\n        i \\<noteq> t * k; i \\<noteq> Suc (t * k)\\<rbrakk>\n       \\<Longrightarrow> (i = Suc (t * k) \\<longrightarrow>\n                          s (Suc (t * k)) = m \\<and>\n                          0 < Suc (t * k) mod k \\<and>\n                          (\\<exists>x.\n                              (x = Suc (Suc (t * k)) \\<longrightarrow>\n                               Suc (Suc (t * k)) mod k = 0) \\<and>\n                              (x \\<noteq>\n                               Suc (Suc (t * k)) \\<longrightarrow>\n                               Suc (Suc (t * k)) \\<le> x \\<and>\n                               x mod k = 0 \\<and>\n                               (\\<forall>xa.\n                                   Suc (Suc (t * k)) \\<le> xa \\<and>\n                                   xa \\<le> Suc\n       (Suc (t * k + (x - Suc (Suc (Suc (t * k)))))) \\<longrightarrow>\n                                   s xa = NoMsg)))) \\<and>\n                         (i \\<noteq> Suc (t * k) \\<longrightarrow>\n                          Suc (t * k) \\<le> i \\<and>\n                          s i = m \\<and>\n                          0 < i mod k \\<and>\n                          (\\<exists>x.\n                              (x = Suc i \\<longrightarrow>\n                               Suc i mod k = 0) \\<and>\n                              (x \\<noteq> Suc i \\<longrightarrow>\n                               Suc i \\<le> x \\<and>\n                               x mod k = 0 \\<and>\n                               (\\<forall>xa.\n                                   Suc i \\<le> xa \\<and>\n                                   xa \\<le> Suc\n       (i + (x - Suc (Suc i))) \\<longrightarrow>\n                                   s xa = NoMsg))) \\<and>\n                          (\\<forall>x.\n                              Suc (t * k) \\<le> x \\<and>\n                              x \\<le> Suc\n (t * k + (i - Suc (Suc (t * k)))) \\<longrightarrow>\n                              0 < x mod k))\n 3. \\<lbrakk>m \\<noteq> NoMsg; \\<And>t. event t = (t mod k = 0); t0 = t * k;\n     Suc 0 < k;\n     s (t * k) = m \\<and>\n     (\\<exists>x.\n         (x = Suc (t * k) \\<longrightarrow> Suc (t * k) mod k = 0) \\<and>\n         (x \\<noteq> Suc (t * k) \\<longrightarrow>\n          Suc (t * k) \\<le> x \\<and>\n          x mod k = 0 \\<and>\n          (\\<forall>xa.\n              Suc (t * k) \\<le> xa \\<and>\n              xa \\<le> Suc (t * k +\n                            (x - Suc (Suc (t * k)))) \\<longrightarrow>\n              s xa = NoMsg))) \\<or>\n     (\\<exists>x.\n         (x = Suc (t * k) \\<longrightarrow>\n          s (Suc (t * k)) = m \\<and>\n          0 < Suc (t * k) mod k \\<and>\n          (\\<exists>x.\n              (x = Suc (Suc (t * k)) \\<longrightarrow>\n               Suc (Suc (t * k)) mod k = 0) \\<and>\n              (x \\<noteq> Suc (Suc (t * k)) \\<longrightarrow>\n               Suc (Suc (t * k)) \\<le> x \\<and>\n               x mod k = 0 \\<and>\n               (\\<forall>xa.\n                   Suc (Suc (t * k)) \\<le> xa \\<and>\n                   xa \\<le> Suc (Suc (t * k +\n(x - Suc (Suc (Suc (t * k)))))) \\<longrightarrow>\n                   s xa = NoMsg)))) \\<and>\n         (x \\<noteq> Suc (t * k) \\<longrightarrow>\n          Suc (t * k) \\<le> x \\<and>\n          s x = m \\<and>\n          0 < x mod k \\<and>\n          (\\<exists>xa.\n              (xa = Suc x \\<longrightarrow> Suc x mod k = 0) \\<and>\n              (xa \\<noteq> Suc x \\<longrightarrow>\n               Suc x \\<le> xa \\<and>\n               xa mod k = 0 \\<and>\n               (\\<forall>xb.\n                   Suc x \\<le> xb \\<and>\n                   xb \\<le> Suc (x + (xa - Suc (Suc x))) \\<longrightarrow>\n                   s xb = NoMsg))) \\<and>\n          (\\<forall>xa.\n              Suc (t * k) \\<le> xa \\<and>\n              xa \\<le> Suc (t * k +\n                            (x - Suc (Suc (t * k)))) \\<longrightarrow>\n              0 < xa mod k)))\\<rbrakk>\n    \\<Longrightarrow> \\<exists>x.\n                         (x < t * k + k - Suc 0 \\<longrightarrow>\n                          t * k \\<le> x \\<and>\n                          s x = m \\<and>\n                          (\\<forall>xa.\n                              Suc x \\<le> xa \\<and>\n                              xa \\<le> t * k + k - Suc 0 \\<longrightarrow>\n                              s xa = NoMsg)) \\<and>\n                         (\\<not> x < t * k + k - Suc 0 \\<longrightarrow>\n                          t * k \\<le> x \\<and>\n                          x = t * k + k - Suc 0 \\<and> s x = m)", "apply (case_tac \"Suc (t * k) < t * k + k - Suc 0\")"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>i.\n       \\<lbrakk>m \\<noteq> NoMsg; \\<And>t. event t = (t mod k = 0);\n        t0 = t * k; Suc 0 < k;\n        Suc (t * k) < t * k + k - Suc 0 \\<longrightarrow>\n        s (Suc (t * k)) = m \\<and>\n        (\\<forall>x.\n            Suc (Suc (t * k)) \\<le> x \\<and>\n            x \\<le> t * k + k - Suc 0 \\<longrightarrow>\n            s x = NoMsg);\n        \\<not> Suc (t * k) < t * k + k - Suc 0 \\<longrightarrow>\n        Suc (t * k) = t * k + k - Suc 0 \\<and> s (Suc (t * k)) = m;\n        i = Suc (t * k); Suc (t * k) < t * k + k - Suc 0\\<rbrakk>\n       \\<Longrightarrow> s (Suc (t * k)) = m \\<and>\n                         0 < Suc (t * k) mod k \\<and>\n                         (\\<exists>x.\n                             (x = Suc (Suc (t * k)) \\<longrightarrow>\n                              Suc (Suc (t * k)) mod k = 0) \\<and>\n                             (x \\<noteq> Suc (Suc (t * k)) \\<longrightarrow>\n                              Suc (Suc (t * k)) \\<le> x \\<and>\n                              x mod k = 0 \\<and>\n                              (\\<forall>xa.\n                                  Suc (Suc (t * k)) \\<le> xa \\<and>\n                                  xa \\<le> Suc\n      (Suc (t * k + (x - Suc (Suc (Suc (t * k)))))) \\<longrightarrow>\n                                  s xa = NoMsg)))\n 2. \\<And>i.\n       \\<lbrakk>m \\<noteq> NoMsg; \\<And>t. event t = (t mod k = 0);\n        t0 = t * k; Suc 0 < k;\n        Suc (t * k) < t * k + k - Suc 0 \\<longrightarrow>\n        s (Suc (t * k)) = m \\<and>\n        (\\<forall>x.\n            Suc (Suc (t * k)) \\<le> x \\<and>\n            x \\<le> t * k + k - Suc 0 \\<longrightarrow>\n            s x = NoMsg);\n        \\<not> Suc (t * k) < t * k + k - Suc 0 \\<longrightarrow>\n        Suc (t * k) = t * k + k - Suc 0 \\<and> s (Suc (t * k)) = m;\n        i = Suc (t * k); \\<not> Suc (t * k) < t * k + k - Suc 0\\<rbrakk>\n       \\<Longrightarrow> s (Suc (t * k)) = m \\<and>\n                         0 < Suc (t * k) mod k \\<and>\n                         (\\<exists>x.\n                             (x = Suc (Suc (t * k)) \\<longrightarrow>\n                              Suc (Suc (t * k)) mod k = 0) \\<and>\n                             (x \\<noteq> Suc (Suc (t * k)) \\<longrightarrow>\n                              Suc (Suc (t * k)) \\<le> x \\<and>\n                              x mod k = 0 \\<and>\n                              (\\<forall>xa.\n                                  Suc (Suc (t * k)) \\<le> xa \\<and>\n                                  xa \\<le> Suc\n      (Suc (t * k + (x - Suc (Suc (Suc (t * k)))))) \\<longrightarrow>\n                                  s xa = NoMsg)))\n 3. \\<And>i.\n       \\<lbrakk>m \\<noteq> NoMsg; \\<And>t. event t = (t mod k = 0);\n        t0 = t * k; Suc 0 < k;\n        i < t * k + k - Suc 0 \\<longrightarrow>\n        t * k \\<le> i \\<and>\n        s i = m \\<and>\n        (\\<forall>x.\n            Suc i \\<le> x \\<and> x \\<le> t * k + k - Suc 0 \\<longrightarrow>\n            s x = NoMsg);\n        \\<not> i < t * k + k - Suc 0 \\<longrightarrow>\n        t * k \\<le> i \\<and> i = t * k + k - Suc 0 \\<and> s i = m;\n        i \\<noteq> t * k; i \\<noteq> Suc (t * k)\\<rbrakk>\n       \\<Longrightarrow> (i = Suc (t * k) \\<longrightarrow>\n                          s (Suc (t * k)) = m \\<and>\n                          0 < Suc (t * k) mod k \\<and>\n                          (\\<exists>x.\n                              (x = Suc (Suc (t * k)) \\<longrightarrow>\n                               Suc (Suc (t * k)) mod k = 0) \\<and>\n                              (x \\<noteq>\n                               Suc (Suc (t * k)) \\<longrightarrow>\n                               Suc (Suc (t * k)) \\<le> x \\<and>\n                               x mod k = 0 \\<and>\n                               (\\<forall>xa.\n                                   Suc (Suc (t * k)) \\<le> xa \\<and>\n                                   xa \\<le> Suc\n       (Suc (t * k + (x - Suc (Suc (Suc (t * k)))))) \\<longrightarrow>\n                                   s xa = NoMsg)))) \\<and>\n                         (i \\<noteq> Suc (t * k) \\<longrightarrow>\n                          Suc (t * k) \\<le> i \\<and>\n                          s i = m \\<and>\n                          0 < i mod k \\<and>\n                          (\\<exists>x.\n                              (x = Suc i \\<longrightarrow>\n                               Suc i mod k = 0) \\<and>\n                              (x \\<noteq> Suc i \\<longrightarrow>\n                               Suc i \\<le> x \\<and>\n                               x mod k = 0 \\<and>\n                               (\\<forall>xa.\n                                   Suc i \\<le> xa \\<and>\n                                   xa \\<le> Suc\n       (i + (x - Suc (Suc i))) \\<longrightarrow>\n                                   s xa = NoMsg))) \\<and>\n                          (\\<forall>x.\n                              Suc (t * k) \\<le> x \\<and>\n                              x \\<le> Suc\n (t * k + (i - Suc (Suc (t * k)))) \\<longrightarrow>\n                              0 < x mod k))\n 4. \\<lbrakk>m \\<noteq> NoMsg; \\<And>t. event t = (t mod k = 0); t0 = t * k;\n     Suc 0 < k;\n     s (t * k) = m \\<and>\n     (\\<exists>x.\n         (x = Suc (t * k) \\<longrightarrow> Suc (t * k) mod k = 0) \\<and>\n         (x \\<noteq> Suc (t * k) \\<longrightarrow>\n          Suc (t * k) \\<le> x \\<and>\n          x mod k = 0 \\<and>\n          (\\<forall>xa.\n              Suc (t * k) \\<le> xa \\<and>\n              xa \\<le> Suc (t * k +\n                            (x - Suc (Suc (t * k)))) \\<longrightarrow>\n              s xa = NoMsg))) \\<or>\n     (\\<exists>x.\n         (x = Suc (t * k) \\<longrightarrow>\n          s (Suc (t * k)) = m \\<and>\n          0 < Suc (t * k) mod k \\<and>\n          (\\<exists>x.\n              (x = Suc (Suc (t * k)) \\<longrightarrow>\n               Suc (Suc (t * k)) mod k = 0) \\<and>\n              (x \\<noteq> Suc (Suc (t * k)) \\<longrightarrow>\n               Suc (Suc (t * k)) \\<le> x \\<and>\n               x mod k = 0 \\<and>\n               (\\<forall>xa.\n                   Suc (Suc (t * k)) \\<le> xa \\<and>\n                   xa \\<le> Suc (Suc (t * k +\n(x - Suc (Suc (Suc (t * k)))))) \\<longrightarrow>\n                   s xa = NoMsg)))) \\<and>\n         (x \\<noteq> Suc (t * k) \\<longrightarrow>\n          Suc (t * k) \\<le> x \\<and>\n          s x = m \\<and>\n          0 < x mod k \\<and>\n          (\\<exists>xa.\n              (xa = Suc x \\<longrightarrow> Suc x mod k = 0) \\<and>\n              (xa \\<noteq> Suc x \\<longrightarrow>\n               Suc x \\<le> xa \\<and>\n               xa mod k = 0 \\<and>\n               (\\<forall>xb.\n                   Suc x \\<le> xb \\<and>\n                   xb \\<le> Suc (x + (xa - Suc (Suc x))) \\<longrightarrow>\n                   s xb = NoMsg))) \\<and>\n          (\\<forall>xa.\n              Suc (t * k) \\<le> xa \\<and>\n              xa \\<le> Suc (t * k +\n                            (x - Suc (Suc (t * k)))) \\<longrightarrow>\n              0 < xa mod k)))\\<rbrakk>\n    \\<Longrightarrow> \\<exists>x.\n                         (x < t * k + k - Suc 0 \\<longrightarrow>\n                          t * k \\<le> x \\<and>\n                          s x = m \\<and>\n                          (\\<forall>xa.\n                              Suc x \\<le> xa \\<and>\n                              xa \\<le> t * k + k - Suc 0 \\<longrightarrow>\n                              s xa = NoMsg)) \\<and>\n                         (\\<not> x < t * k + k - Suc 0 \\<longrightarrow>\n                          t * k \\<le> x \\<and>\n                          x = t * k + k - Suc 0 \\<and> s x = m)", "apply (clarsimp simp: mod_Suc)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<lbrakk>s (Suc (t * k)) \\<noteq> NoMsg;\n     \\<And>t. event t = (t mod k = 0); t0 = t * k; Suc 0 < k;\n     Suc (t * k) < t * k + k - Suc 0;\n     \\<forall>x.\n        Suc (Suc (t * k)) \\<le> x \\<and>\n        x \\<le> t * k + k - Suc 0 \\<longrightarrow>\n        s x = NoMsg;\n     m = s (Suc (t * k))\\<rbrakk>\n    \\<Longrightarrow> (Suc (Suc 0) = k \\<longrightarrow>\n                       (\\<exists>x.\n                           x \\<noteq> Suc (Suc (t * k)) \\<longrightarrow>\n                           Suc (Suc (t * k)) \\<le> x)) \\<and>\n                      (Suc (Suc 0) \\<noteq> k \\<longrightarrow>\n                       (\\<exists>x.\n                           x \\<noteq> Suc (Suc (t * k)) \\<and>\n                           (x \\<noteq> Suc (Suc (t * k)) \\<longrightarrow>\n                            Suc (Suc (t * k)) \\<le> x \\<and>\n                            x mod k = 0 \\<and>\n                            (\\<forall>xa.\n                                Suc (Suc (t * k)) \\<le> xa \\<and>\n                                xa \\<le> Suc\n    (Suc (t * k + (x - Suc (Suc (Suc (t * k)))))) \\<longrightarrow>\n                                s xa = NoMsg))))\n 2. \\<And>i.\n       \\<lbrakk>m \\<noteq> NoMsg; \\<And>t. event t = (t mod k = 0);\n        t0 = t * k; Suc 0 < k;\n        Suc (t * k) < t * k + k - Suc 0 \\<longrightarrow>\n        s (Suc (t * k)) = m \\<and>\n        (\\<forall>x.\n            Suc (Suc (t * k)) \\<le> x \\<and>\n            x \\<le> t * k + k - Suc 0 \\<longrightarrow>\n            s x = NoMsg);\n        \\<not> Suc (t * k) < t * k + k - Suc 0 \\<longrightarrow>\n        Suc (t * k) = t * k + k - Suc 0 \\<and> s (Suc (t * k)) = m;\n        i = Suc (t * k); \\<not> Suc (t * k) < t * k + k - Suc 0\\<rbrakk>\n       \\<Longrightarrow> s (Suc (t * k)) = m \\<and>\n                         0 < Suc (t * k) mod k \\<and>\n                         (\\<exists>x.\n                             (x = Suc (Suc (t * k)) \\<longrightarrow>\n                              Suc (Suc (t * k)) mod k = 0) \\<and>\n                             (x \\<noteq> Suc (Suc (t * k)) \\<longrightarrow>\n                              Suc (Suc (t * k)) \\<le> x \\<and>\n                              x mod k = 0 \\<and>\n                              (\\<forall>xa.\n                                  Suc (Suc (t * k)) \\<le> xa \\<and>\n                                  xa \\<le> Suc\n      (Suc (t * k + (x - Suc (Suc (Suc (t * k)))))) \\<longrightarrow>\n                                  s xa = NoMsg)))\n 3. \\<And>i.\n       \\<lbrakk>m \\<noteq> NoMsg; \\<And>t. event t = (t mod k = 0);\n        t0 = t * k; Suc 0 < k;\n        i < t * k + k - Suc 0 \\<longrightarrow>\n        t * k \\<le> i \\<and>\n        s i = m \\<and>\n        (\\<forall>x.\n            Suc i \\<le> x \\<and> x \\<le> t * k + k - Suc 0 \\<longrightarrow>\n            s x = NoMsg);\n        \\<not> i < t * k + k - Suc 0 \\<longrightarrow>\n        t * k \\<le> i \\<and> i = t * k + k - Suc 0 \\<and> s i = m;\n        i \\<noteq> t * k; i \\<noteq> Suc (t * k)\\<rbrakk>\n       \\<Longrightarrow> (i = Suc (t * k) \\<longrightarrow>\n                          s (Suc (t * k)) = m \\<and>\n                          0 < Suc (t * k) mod k \\<and>\n                          (\\<exists>x.\n                              (x = Suc (Suc (t * k)) \\<longrightarrow>\n                               Suc (Suc (t * k)) mod k = 0) \\<and>\n                              (x \\<noteq>\n                               Suc (Suc (t * k)) \\<longrightarrow>\n                               Suc (Suc (t * k)) \\<le> x \\<and>\n                               x mod k = 0 \\<and>\n                               (\\<forall>xa.\n                                   Suc (Suc (t * k)) \\<le> xa \\<and>\n                                   xa \\<le> Suc\n       (Suc (t * k + (x - Suc (Suc (Suc (t * k)))))) \\<longrightarrow>\n                                   s xa = NoMsg)))) \\<and>\n                         (i \\<noteq> Suc (t * k) \\<longrightarrow>\n                          Suc (t * k) \\<le> i \\<and>\n                          s i = m \\<and>\n                          0 < i mod k \\<and>\n                          (\\<exists>x.\n                              (x = Suc i \\<longrightarrow>\n                               Suc i mod k = 0) \\<and>\n                              (x \\<noteq> Suc i \\<longrightarrow>\n                               Suc i \\<le> x \\<and>\n                               x mod k = 0 \\<and>\n                               (\\<forall>xa.\n                                   Suc i \\<le> xa \\<and>\n                                   xa \\<le> Suc\n       (i + (x - Suc (Suc i))) \\<longrightarrow>\n                                   s xa = NoMsg))) \\<and>\n                          (\\<forall>x.\n                              Suc (t * k) \\<le> x \\<and>\n                              x \\<le> Suc\n (t * k + (i - Suc (Suc (t * k)))) \\<longrightarrow>\n                              0 < x mod k))\n 4. \\<lbrakk>m \\<noteq> NoMsg; \\<And>t. event t = (t mod k = 0); t0 = t * k;\n     Suc 0 < k;\n     s (t * k) = m \\<and>\n     (\\<exists>x.\n         (x = Suc (t * k) \\<longrightarrow> Suc (t * k) mod k = 0) \\<and>\n         (x \\<noteq> Suc (t * k) \\<longrightarrow>\n          Suc (t * k) \\<le> x \\<and>\n          x mod k = 0 \\<and>\n          (\\<forall>xa.\n              Suc (t * k) \\<le> xa \\<and>\n              xa \\<le> Suc (t * k +\n                            (x - Suc (Suc (t * k)))) \\<longrightarrow>\n              s xa = NoMsg))) \\<or>\n     (\\<exists>x.\n         (x = Suc (t * k) \\<longrightarrow>\n          s (Suc (t * k)) = m \\<and>\n          0 < Suc (t * k) mod k \\<and>\n          (\\<exists>x.\n              (x = Suc (Suc (t * k)) \\<longrightarrow>\n               Suc (Suc (t * k)) mod k = 0) \\<and>\n              (x \\<noteq> Suc (Suc (t * k)) \\<longrightarrow>\n               Suc (Suc (t * k)) \\<le> x \\<and>\n               x mod k = 0 \\<and>\n               (\\<forall>xa.\n                   Suc (Suc (t * k)) \\<le> xa \\<and>\n                   xa \\<le> Suc (Suc (t * k +\n(x - Suc (Suc (Suc (t * k)))))) \\<longrightarrow>\n                   s xa = NoMsg)))) \\<and>\n         (x \\<noteq> Suc (t * k) \\<longrightarrow>\n          Suc (t * k) \\<le> x \\<and>\n          s x = m \\<and>\n          0 < x mod k \\<and>\n          (\\<exists>xa.\n              (xa = Suc x \\<longrightarrow> Suc x mod k = 0) \\<and>\n              (xa \\<noteq> Suc x \\<longrightarrow>\n               Suc x \\<le> xa \\<and>\n               xa mod k = 0 \\<and>\n               (\\<forall>xb.\n                   Suc x \\<le> xb \\<and>\n                   xb \\<le> Suc (x + (xa - Suc (Suc x))) \\<longrightarrow>\n                   s xb = NoMsg))) \\<and>\n          (\\<forall>xa.\n              Suc (t * k) \\<le> xa \\<and>\n              xa \\<le> Suc (t * k +\n                            (x - Suc (Suc (t * k)))) \\<longrightarrow>\n              0 < xa mod k)))\\<rbrakk>\n    \\<Longrightarrow> \\<exists>x.\n                         (x < t * k + k - Suc 0 \\<longrightarrow>\n                          t * k \\<le> x \\<and>\n                          s x = m \\<and>\n                          (\\<forall>xa.\n                              Suc x \\<le> xa \\<and>\n                              xa \\<le> t * k + k - Suc 0 \\<longrightarrow>\n                              s xa = NoMsg)) \\<and>\n                         (\\<not> x < t * k + k - Suc 0 \\<longrightarrow>\n                          t * k \\<le> x \\<and>\n                          x = t * k + k - Suc 0 \\<and> s x = m)", "apply (case_tac \"k = Suc (Suc 0)\", simp)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<lbrakk>s (Suc (t * k)) \\<noteq> NoMsg;\n     \\<And>t. event t = (t mod k = 0); t0 = t * k; Suc 0 < k;\n     Suc (t * k) < t * k + k - Suc 0;\n     \\<forall>x.\n        Suc (Suc (t * k)) \\<le> x \\<and>\n        x \\<le> t * k + k - Suc 0 \\<longrightarrow>\n        s x = NoMsg;\n     m = s (Suc (t * k)); k \\<noteq> Suc (Suc 0)\\<rbrakk>\n    \\<Longrightarrow> (Suc (Suc 0) = k \\<longrightarrow>\n                       (\\<exists>x.\n                           x \\<noteq> Suc (Suc (t * k)) \\<longrightarrow>\n                           Suc (Suc (t * k)) \\<le> x)) \\<and>\n                      (Suc (Suc 0) \\<noteq> k \\<longrightarrow>\n                       (\\<exists>x.\n                           x \\<noteq> Suc (Suc (t * k)) \\<and>\n                           (x \\<noteq> Suc (Suc (t * k)) \\<longrightarrow>\n                            Suc (Suc (t * k)) \\<le> x \\<and>\n                            x mod k = 0 \\<and>\n                            (\\<forall>xa.\n                                Suc (Suc (t * k)) \\<le> xa \\<and>\n                                xa \\<le> Suc\n    (Suc (t * k + (x - Suc (Suc (Suc (t * k)))))) \\<longrightarrow>\n                                s xa = NoMsg))))\n 2. \\<And>i.\n       \\<lbrakk>m \\<noteq> NoMsg; \\<And>t. event t = (t mod k = 0);\n        t0 = t * k; Suc 0 < k;\n        Suc (t * k) < t * k + k - Suc 0 \\<longrightarrow>\n        s (Suc (t * k)) = m \\<and>\n        (\\<forall>x.\n            Suc (Suc (t * k)) \\<le> x \\<and>\n            x \\<le> t * k + k - Suc 0 \\<longrightarrow>\n            s x = NoMsg);\n        \\<not> Suc (t * k) < t * k + k - Suc 0 \\<longrightarrow>\n        Suc (t * k) = t * k + k - Suc 0 \\<and> s (Suc (t * k)) = m;\n        i = Suc (t * k); \\<not> Suc (t * k) < t * k + k - Suc 0\\<rbrakk>\n       \\<Longrightarrow> s (Suc (t * k)) = m \\<and>\n                         0 < Suc (t * k) mod k \\<and>\n                         (\\<exists>x.\n                             (x = Suc (Suc (t * k)) \\<longrightarrow>\n                              Suc (Suc (t * k)) mod k = 0) \\<and>\n                             (x \\<noteq> Suc (Suc (t * k)) \\<longrightarrow>\n                              Suc (Suc (t * k)) \\<le> x \\<and>\n                              x mod k = 0 \\<and>\n                              (\\<forall>xa.\n                                  Suc (Suc (t * k)) \\<le> xa \\<and>\n                                  xa \\<le> Suc\n      (Suc (t * k + (x - Suc (Suc (Suc (t * k)))))) \\<longrightarrow>\n                                  s xa = NoMsg)))\n 3. \\<And>i.\n       \\<lbrakk>m \\<noteq> NoMsg; \\<And>t. event t = (t mod k = 0);\n        t0 = t * k; Suc 0 < k;\n        i < t * k + k - Suc 0 \\<longrightarrow>\n        t * k \\<le> i \\<and>\n        s i = m \\<and>\n        (\\<forall>x.\n            Suc i \\<le> x \\<and> x \\<le> t * k + k - Suc 0 \\<longrightarrow>\n            s x = NoMsg);\n        \\<not> i < t * k + k - Suc 0 \\<longrightarrow>\n        t * k \\<le> i \\<and> i = t * k + k - Suc 0 \\<and> s i = m;\n        i \\<noteq> t * k; i \\<noteq> Suc (t * k)\\<rbrakk>\n       \\<Longrightarrow> (i = Suc (t * k) \\<longrightarrow>\n                          s (Suc (t * k)) = m \\<and>\n                          0 < Suc (t * k) mod k \\<and>\n                          (\\<exists>x.\n                              (x = Suc (Suc (t * k)) \\<longrightarrow>\n                               Suc (Suc (t * k)) mod k = 0) \\<and>\n                              (x \\<noteq>\n                               Suc (Suc (t * k)) \\<longrightarrow>\n                               Suc (Suc (t * k)) \\<le> x \\<and>\n                               x mod k = 0 \\<and>\n                               (\\<forall>xa.\n                                   Suc (Suc (t * k)) \\<le> xa \\<and>\n                                   xa \\<le> Suc\n       (Suc (t * k + (x - Suc (Suc (Suc (t * k)))))) \\<longrightarrow>\n                                   s xa = NoMsg)))) \\<and>\n                         (i \\<noteq> Suc (t * k) \\<longrightarrow>\n                          Suc (t * k) \\<le> i \\<and>\n                          s i = m \\<and>\n                          0 < i mod k \\<and>\n                          (\\<exists>x.\n                              (x = Suc i \\<longrightarrow>\n                               Suc i mod k = 0) \\<and>\n                              (x \\<noteq> Suc i \\<longrightarrow>\n                               Suc i \\<le> x \\<and>\n                               x mod k = 0 \\<and>\n                               (\\<forall>xa.\n                                   Suc i \\<le> xa \\<and>\n                                   xa \\<le> Suc\n       (i + (x - Suc (Suc i))) \\<longrightarrow>\n                                   s xa = NoMsg))) \\<and>\n                          (\\<forall>x.\n                              Suc (t * k) \\<le> x \\<and>\n                              x \\<le> Suc\n (t * k + (i - Suc (Suc (t * k)))) \\<longrightarrow>\n                              0 < x mod k))\n 4. \\<lbrakk>m \\<noteq> NoMsg; \\<And>t. event t = (t mod k = 0); t0 = t * k;\n     Suc 0 < k;\n     s (t * k) = m \\<and>\n     (\\<exists>x.\n         (x = Suc (t * k) \\<longrightarrow> Suc (t * k) mod k = 0) \\<and>\n         (x \\<noteq> Suc (t * k) \\<longrightarrow>\n          Suc (t * k) \\<le> x \\<and>\n          x mod k = 0 \\<and>\n          (\\<forall>xa.\n              Suc (t * k) \\<le> xa \\<and>\n              xa \\<le> Suc (t * k +\n                            (x - Suc (Suc (t * k)))) \\<longrightarrow>\n              s xa = NoMsg))) \\<or>\n     (\\<exists>x.\n         (x = Suc (t * k) \\<longrightarrow>\n          s (Suc (t * k)) = m \\<and>\n          0 < Suc (t * k) mod k \\<and>\n          (\\<exists>x.\n              (x = Suc (Suc (t * k)) \\<longrightarrow>\n               Suc (Suc (t * k)) mod k = 0) \\<and>\n              (x \\<noteq> Suc (Suc (t * k)) \\<longrightarrow>\n               Suc (Suc (t * k)) \\<le> x \\<and>\n               x mod k = 0 \\<and>\n               (\\<forall>xa.\n                   Suc (Suc (t * k)) \\<le> xa \\<and>\n                   xa \\<le> Suc (Suc (t * k +\n(x - Suc (Suc (Suc (t * k)))))) \\<longrightarrow>\n                   s xa = NoMsg)))) \\<and>\n         (x \\<noteq> Suc (t * k) \\<longrightarrow>\n          Suc (t * k) \\<le> x \\<and>\n          s x = m \\<and>\n          0 < x mod k \\<and>\n          (\\<exists>xa.\n              (xa = Suc x \\<longrightarrow> Suc x mod k = 0) \\<and>\n              (xa \\<noteq> Suc x \\<longrightarrow>\n               Suc x \\<le> xa \\<and>\n               xa mod k = 0 \\<and>\n               (\\<forall>xb.\n                   Suc x \\<le> xb \\<and>\n                   xb \\<le> Suc (x + (xa - Suc (Suc x))) \\<longrightarrow>\n                   s xb = NoMsg))) \\<and>\n          (\\<forall>xa.\n              Suc (t * k) \\<le> xa \\<and>\n              xa \\<le> Suc (t * k +\n                            (x - Suc (Suc (t * k)))) \\<longrightarrow>\n              0 < xa mod k)))\\<rbrakk>\n    \\<Longrightarrow> \\<exists>x.\n                         (x < t * k + k - Suc 0 \\<longrightarrow>\n                          t * k \\<le> x \\<and>\n                          s x = m \\<and>\n                          (\\<forall>xa.\n                              Suc x \\<le> xa \\<and>\n                              xa \\<le> t * k + k - Suc 0 \\<longrightarrow>\n                              s xa = NoMsg)) \\<and>\n                         (\\<not> x < t * k + k - Suc 0 \\<longrightarrow>\n                          t * k \\<le> x \\<and>\n                          x = t * k + k - Suc 0 \\<and> s x = m)", "apply simp"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<lbrakk>s (Suc (t * k)) \\<noteq> NoMsg;\n     \\<And>t. event t = (t mod k = 0); t0 = t * k; Suc 0 < k;\n     Suc (t * k) < t * k + k - Suc 0;\n     \\<forall>x.\n        Suc (Suc (t * k)) \\<le> x \\<and>\n        x \\<le> t * k + k - Suc 0 \\<longrightarrow>\n        s x = NoMsg;\n     m = s (Suc (t * k)); k \\<noteq> Suc (Suc 0)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>x.\n                         x \\<noteq> Suc (Suc (t * k)) \\<and>\n                         (x \\<noteq> Suc (Suc (t * k)) \\<longrightarrow>\n                          Suc (Suc (t * k)) \\<le> x \\<and>\n                          x mod k = 0 \\<and>\n                          (\\<forall>xa.\n                              Suc (Suc (t * k)) \\<le> xa \\<and>\n                              xa \\<le> Suc\n  (Suc (t * k + (x - Suc (Suc (Suc (t * k)))))) \\<longrightarrow>\n                              s xa = NoMsg))\n 2. \\<And>i.\n       \\<lbrakk>m \\<noteq> NoMsg; \\<And>t. event t = (t mod k = 0);\n        t0 = t * k; Suc 0 < k;\n        Suc (t * k) < t * k + k - Suc 0 \\<longrightarrow>\n        s (Suc (t * k)) = m \\<and>\n        (\\<forall>x.\n            Suc (Suc (t * k)) \\<le> x \\<and>\n            x \\<le> t * k + k - Suc 0 \\<longrightarrow>\n            s x = NoMsg);\n        \\<not> Suc (t * k) < t * k + k - Suc 0 \\<longrightarrow>\n        Suc (t * k) = t * k + k - Suc 0 \\<and> s (Suc (t * k)) = m;\n        i = Suc (t * k); \\<not> Suc (t * k) < t * k + k - Suc 0\\<rbrakk>\n       \\<Longrightarrow> s (Suc (t * k)) = m \\<and>\n                         0 < Suc (t * k) mod k \\<and>\n                         (\\<exists>x.\n                             (x = Suc (Suc (t * k)) \\<longrightarrow>\n                              Suc (Suc (t * k)) mod k = 0) \\<and>\n                             (x \\<noteq> Suc (Suc (t * k)) \\<longrightarrow>\n                              Suc (Suc (t * k)) \\<le> x \\<and>\n                              x mod k = 0 \\<and>\n                              (\\<forall>xa.\n                                  Suc (Suc (t * k)) \\<le> xa \\<and>\n                                  xa \\<le> Suc\n      (Suc (t * k + (x - Suc (Suc (Suc (t * k)))))) \\<longrightarrow>\n                                  s xa = NoMsg)))\n 3. \\<And>i.\n       \\<lbrakk>m \\<noteq> NoMsg; \\<And>t. event t = (t mod k = 0);\n        t0 = t * k; Suc 0 < k;\n        i < t * k + k - Suc 0 \\<longrightarrow>\n        t * k \\<le> i \\<and>\n        s i = m \\<and>\n        (\\<forall>x.\n            Suc i \\<le> x \\<and> x \\<le> t * k + k - Suc 0 \\<longrightarrow>\n            s x = NoMsg);\n        \\<not> i < t * k + k - Suc 0 \\<longrightarrow>\n        t * k \\<le> i \\<and> i = t * k + k - Suc 0 \\<and> s i = m;\n        i \\<noteq> t * k; i \\<noteq> Suc (t * k)\\<rbrakk>\n       \\<Longrightarrow> (i = Suc (t * k) \\<longrightarrow>\n                          s (Suc (t * k)) = m \\<and>\n                          0 < Suc (t * k) mod k \\<and>\n                          (\\<exists>x.\n                              (x = Suc (Suc (t * k)) \\<longrightarrow>\n                               Suc (Suc (t * k)) mod k = 0) \\<and>\n                              (x \\<noteq>\n                               Suc (Suc (t * k)) \\<longrightarrow>\n                               Suc (Suc (t * k)) \\<le> x \\<and>\n                               x mod k = 0 \\<and>\n                               (\\<forall>xa.\n                                   Suc (Suc (t * k)) \\<le> xa \\<and>\n                                   xa \\<le> Suc\n       (Suc (t * k + (x - Suc (Suc (Suc (t * k)))))) \\<longrightarrow>\n                                   s xa = NoMsg)))) \\<and>\n                         (i \\<noteq> Suc (t * k) \\<longrightarrow>\n                          Suc (t * k) \\<le> i \\<and>\n                          s i = m \\<and>\n                          0 < i mod k \\<and>\n                          (\\<exists>x.\n                              (x = Suc i \\<longrightarrow>\n                               Suc i mod k = 0) \\<and>\n                              (x \\<noteq> Suc i \\<longrightarrow>\n                               Suc i \\<le> x \\<and>\n                               x mod k = 0 \\<and>\n                               (\\<forall>xa.\n                                   Suc i \\<le> xa \\<and>\n                                   xa \\<le> Suc\n       (i + (x - Suc (Suc i))) \\<longrightarrow>\n                                   s xa = NoMsg))) \\<and>\n                          (\\<forall>x.\n                              Suc (t * k) \\<le> x \\<and>\n                              x \\<le> Suc\n (t * k + (i - Suc (Suc (t * k)))) \\<longrightarrow>\n                              0 < x mod k))\n 4. \\<lbrakk>m \\<noteq> NoMsg; \\<And>t. event t = (t mod k = 0); t0 = t * k;\n     Suc 0 < k;\n     s (t * k) = m \\<and>\n     (\\<exists>x.\n         (x = Suc (t * k) \\<longrightarrow> Suc (t * k) mod k = 0) \\<and>\n         (x \\<noteq> Suc (t * k) \\<longrightarrow>\n          Suc (t * k) \\<le> x \\<and>\n          x mod k = 0 \\<and>\n          (\\<forall>xa.\n              Suc (t * k) \\<le> xa \\<and>\n              xa \\<le> Suc (t * k +\n                            (x - Suc (Suc (t * k)))) \\<longrightarrow>\n              s xa = NoMsg))) \\<or>\n     (\\<exists>x.\n         (x = Suc (t * k) \\<longrightarrow>\n          s (Suc (t * k)) = m \\<and>\n          0 < Suc (t * k) mod k \\<and>\n          (\\<exists>x.\n              (x = Suc (Suc (t * k)) \\<longrightarrow>\n               Suc (Suc (t * k)) mod k = 0) \\<and>\n              (x \\<noteq> Suc (Suc (t * k)) \\<longrightarrow>\n               Suc (Suc (t * k)) \\<le> x \\<and>\n               x mod k = 0 \\<and>\n               (\\<forall>xa.\n                   Suc (Suc (t * k)) \\<le> xa \\<and>\n                   xa \\<le> Suc (Suc (t * k +\n(x - Suc (Suc (Suc (t * k)))))) \\<longrightarrow>\n                   s xa = NoMsg)))) \\<and>\n         (x \\<noteq> Suc (t * k) \\<longrightarrow>\n          Suc (t * k) \\<le> x \\<and>\n          s x = m \\<and>\n          0 < x mod k \\<and>\n          (\\<exists>xa.\n              (xa = Suc x \\<longrightarrow> Suc x mod k = 0) \\<and>\n              (xa \\<noteq> Suc x \\<longrightarrow>\n               Suc x \\<le> xa \\<and>\n               xa mod k = 0 \\<and>\n               (\\<forall>xb.\n                   Suc x \\<le> xb \\<and>\n                   xb \\<le> Suc (x + (xa - Suc (Suc x))) \\<longrightarrow>\n                   s xb = NoMsg))) \\<and>\n          (\\<forall>xa.\n              Suc (t * k) \\<le> xa \\<and>\n              xa \\<le> Suc (t * k +\n                            (x - Suc (Suc (t * k)))) \\<longrightarrow>\n              0 < xa mod k)))\\<rbrakk>\n    \\<Longrightarrow> \\<exists>x.\n                         (x < t * k + k - Suc 0 \\<longrightarrow>\n                          t * k \\<le> x \\<and>\n                          s x = m \\<and>\n                          (\\<forall>xa.\n                              Suc x \\<le> xa \\<and>\n                              xa \\<le> t * k + k - Suc 0 \\<longrightarrow>\n                              s xa = NoMsg)) \\<and>\n                         (\\<not> x < t * k + k - Suc 0 \\<longrightarrow>\n                          t * k \\<le> x \\<and>\n                          x = t * k + k - Suc 0 \\<and> s x = m)", "apply (rule_tac x=\"t * k + k\" in exI)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<lbrakk>s (Suc (t * k)) \\<noteq> NoMsg;\n     \\<And>t. event t = (t mod k = 0); t0 = t * k; Suc 0 < k;\n     Suc (t * k) < t * k + k - Suc 0;\n     \\<forall>x.\n        Suc (Suc (t * k)) \\<le> x \\<and>\n        x \\<le> t * k + k - Suc 0 \\<longrightarrow>\n        s x = NoMsg;\n     m = s (Suc (t * k)); k \\<noteq> Suc (Suc 0)\\<rbrakk>\n    \\<Longrightarrow> t * k + k \\<noteq> Suc (Suc (t * k)) \\<and>\n                      (t * k + k \\<noteq>\n                       Suc (Suc (t * k)) \\<longrightarrow>\n                       Suc (Suc (t * k)) \\<le> t * k + k \\<and>\n                       (t * k + k) mod k = 0 \\<and>\n                       (\\<forall>x.\n                           Suc (Suc (t * k)) \\<le> x \\<and>\n                           x \\<le> Suc (Suc\n   (t * k + (t * k + k - Suc (Suc (Suc (t * k)))))) \\<longrightarrow>\n                           s x = NoMsg))\n 2. \\<And>i.\n       \\<lbrakk>m \\<noteq> NoMsg; \\<And>t. event t = (t mod k = 0);\n        t0 = t * k; Suc 0 < k;\n        Suc (t * k) < t * k + k - Suc 0 \\<longrightarrow>\n        s (Suc (t * k)) = m \\<and>\n        (\\<forall>x.\n            Suc (Suc (t * k)) \\<le> x \\<and>\n            x \\<le> t * k + k - Suc 0 \\<longrightarrow>\n            s x = NoMsg);\n        \\<not> Suc (t * k) < t * k + k - Suc 0 \\<longrightarrow>\n        Suc (t * k) = t * k + k - Suc 0 \\<and> s (Suc (t * k)) = m;\n        i = Suc (t * k); \\<not> Suc (t * k) < t * k + k - Suc 0\\<rbrakk>\n       \\<Longrightarrow> s (Suc (t * k)) = m \\<and>\n                         0 < Suc (t * k) mod k \\<and>\n                         (\\<exists>x.\n                             (x = Suc (Suc (t * k)) \\<longrightarrow>\n                              Suc (Suc (t * k)) mod k = 0) \\<and>\n                             (x \\<noteq> Suc (Suc (t * k)) \\<longrightarrow>\n                              Suc (Suc (t * k)) \\<le> x \\<and>\n                              x mod k = 0 \\<and>\n                              (\\<forall>xa.\n                                  Suc (Suc (t * k)) \\<le> xa \\<and>\n                                  xa \\<le> Suc\n      (Suc (t * k + (x - Suc (Suc (Suc (t * k)))))) \\<longrightarrow>\n                                  s xa = NoMsg)))\n 3. \\<And>i.\n       \\<lbrakk>m \\<noteq> NoMsg; \\<And>t. event t = (t mod k = 0);\n        t0 = t * k; Suc 0 < k;\n        i < t * k + k - Suc 0 \\<longrightarrow>\n        t * k \\<le> i \\<and>\n        s i = m \\<and>\n        (\\<forall>x.\n            Suc i \\<le> x \\<and> x \\<le> t * k + k - Suc 0 \\<longrightarrow>\n            s x = NoMsg);\n        \\<not> i < t * k + k - Suc 0 \\<longrightarrow>\n        t * k \\<le> i \\<and> i = t * k + k - Suc 0 \\<and> s i = m;\n        i \\<noteq> t * k; i \\<noteq> Suc (t * k)\\<rbrakk>\n       \\<Longrightarrow> (i = Suc (t * k) \\<longrightarrow>\n                          s (Suc (t * k)) = m \\<and>\n                          0 < Suc (t * k) mod k \\<and>\n                          (\\<exists>x.\n                              (x = Suc (Suc (t * k)) \\<longrightarrow>\n                               Suc (Suc (t * k)) mod k = 0) \\<and>\n                              (x \\<noteq>\n                               Suc (Suc (t * k)) \\<longrightarrow>\n                               Suc (Suc (t * k)) \\<le> x \\<and>\n                               x mod k = 0 \\<and>\n                               (\\<forall>xa.\n                                   Suc (Suc (t * k)) \\<le> xa \\<and>\n                                   xa \\<le> Suc\n       (Suc (t * k + (x - Suc (Suc (Suc (t * k)))))) \\<longrightarrow>\n                                   s xa = NoMsg)))) \\<and>\n                         (i \\<noteq> Suc (t * k) \\<longrightarrow>\n                          Suc (t * k) \\<le> i \\<and>\n                          s i = m \\<and>\n                          0 < i mod k \\<and>\n                          (\\<exists>x.\n                              (x = Suc i \\<longrightarrow>\n                               Suc i mod k = 0) \\<and>\n                              (x \\<noteq> Suc i \\<longrightarrow>\n                               Suc i \\<le> x \\<and>\n                               x mod k = 0 \\<and>\n                               (\\<forall>xa.\n                                   Suc i \\<le> xa \\<and>\n                                   xa \\<le> Suc\n       (i + (x - Suc (Suc i))) \\<longrightarrow>\n                                   s xa = NoMsg))) \\<and>\n                          (\\<forall>x.\n                              Suc (t * k) \\<le> x \\<and>\n                              x \\<le> Suc\n (t * k + (i - Suc (Suc (t * k)))) \\<longrightarrow>\n                              0 < x mod k))\n 4. \\<lbrakk>m \\<noteq> NoMsg; \\<And>t. event t = (t mod k = 0); t0 = t * k;\n     Suc 0 < k;\n     s (t * k) = m \\<and>\n     (\\<exists>x.\n         (x = Suc (t * k) \\<longrightarrow> Suc (t * k) mod k = 0) \\<and>\n         (x \\<noteq> Suc (t * k) \\<longrightarrow>\n          Suc (t * k) \\<le> x \\<and>\n          x mod k = 0 \\<and>\n          (\\<forall>xa.\n              Suc (t * k) \\<le> xa \\<and>\n              xa \\<le> Suc (t * k +\n                            (x - Suc (Suc (t * k)))) \\<longrightarrow>\n              s xa = NoMsg))) \\<or>\n     (\\<exists>x.\n         (x = Suc (t * k) \\<longrightarrow>\n          s (Suc (t * k)) = m \\<and>\n          0 < Suc (t * k) mod k \\<and>\n          (\\<exists>x.\n              (x = Suc (Suc (t * k)) \\<longrightarrow>\n               Suc (Suc (t * k)) mod k = 0) \\<and>\n              (x \\<noteq> Suc (Suc (t * k)) \\<longrightarrow>\n               Suc (Suc (t * k)) \\<le> x \\<and>\n               x mod k = 0 \\<and>\n               (\\<forall>xa.\n                   Suc (Suc (t * k)) \\<le> xa \\<and>\n                   xa \\<le> Suc (Suc (t * k +\n(x - Suc (Suc (Suc (t * k)))))) \\<longrightarrow>\n                   s xa = NoMsg)))) \\<and>\n         (x \\<noteq> Suc (t * k) \\<longrightarrow>\n          Suc (t * k) \\<le> x \\<and>\n          s x = m \\<and>\n          0 < x mod k \\<and>\n          (\\<exists>xa.\n              (xa = Suc x \\<longrightarrow> Suc x mod k = 0) \\<and>\n              (xa \\<noteq> Suc x \\<longrightarrow>\n               Suc x \\<le> xa \\<and>\n               xa mod k = 0 \\<and>\n               (\\<forall>xb.\n                   Suc x \\<le> xb \\<and>\n                   xb \\<le> Suc (x + (xa - Suc (Suc x))) \\<longrightarrow>\n                   s xb = NoMsg))) \\<and>\n          (\\<forall>xa.\n              Suc (t * k) \\<le> xa \\<and>\n              xa \\<le> Suc (t * k +\n                            (x - Suc (Suc (t * k)))) \\<longrightarrow>\n              0 < xa mod k)))\\<rbrakk>\n    \\<Longrightarrow> \\<exists>x.\n                         (x < t * k + k - Suc 0 \\<longrightarrow>\n                          t * k \\<le> x \\<and>\n                          s x = m \\<and>\n                          (\\<forall>xa.\n                              Suc x \\<le> xa \\<and>\n                              xa \\<le> t * k + k - Suc 0 \\<longrightarrow>\n                              s xa = NoMsg)) \\<and>\n                         (\\<not> x < t * k + k - Suc 0 \\<longrightarrow>\n                          t * k \\<le> x \\<and>\n                          x = t * k + k - Suc 0 \\<and> s x = m)", "apply force"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>i.\n       \\<lbrakk>m \\<noteq> NoMsg; \\<And>t. event t = (t mod k = 0);\n        t0 = t * k; Suc 0 < k;\n        Suc (t * k) < t * k + k - Suc 0 \\<longrightarrow>\n        s (Suc (t * k)) = m \\<and>\n        (\\<forall>x.\n            Suc (Suc (t * k)) \\<le> x \\<and>\n            x \\<le> t * k + k - Suc 0 \\<longrightarrow>\n            s x = NoMsg);\n        \\<not> Suc (t * k) < t * k + k - Suc 0 \\<longrightarrow>\n        Suc (t * k) = t * k + k - Suc 0 \\<and> s (Suc (t * k)) = m;\n        i = Suc (t * k); \\<not> Suc (t * k) < t * k + k - Suc 0\\<rbrakk>\n       \\<Longrightarrow> s (Suc (t * k)) = m \\<and>\n                         0 < Suc (t * k) mod k \\<and>\n                         (\\<exists>x.\n                             (x = Suc (Suc (t * k)) \\<longrightarrow>\n                              Suc (Suc (t * k)) mod k = 0) \\<and>\n                             (x \\<noteq> Suc (Suc (t * k)) \\<longrightarrow>\n                              Suc (Suc (t * k)) \\<le> x \\<and>\n                              x mod k = 0 \\<and>\n                              (\\<forall>xa.\n                                  Suc (Suc (t * k)) \\<le> xa \\<and>\n                                  xa \\<le> Suc\n      (Suc (t * k + (x - Suc (Suc (Suc (t * k)))))) \\<longrightarrow>\n                                  s xa = NoMsg)))\n 2. \\<And>i.\n       \\<lbrakk>m \\<noteq> NoMsg; \\<And>t. event t = (t mod k = 0);\n        t0 = t * k; Suc 0 < k;\n        i < t * k + k - Suc 0 \\<longrightarrow>\n        t * k \\<le> i \\<and>\n        s i = m \\<and>\n        (\\<forall>x.\n            Suc i \\<le> x \\<and> x \\<le> t * k + k - Suc 0 \\<longrightarrow>\n            s x = NoMsg);\n        \\<not> i < t * k + k - Suc 0 \\<longrightarrow>\n        t * k \\<le> i \\<and> i = t * k + k - Suc 0 \\<and> s i = m;\n        i \\<noteq> t * k; i \\<noteq> Suc (t * k)\\<rbrakk>\n       \\<Longrightarrow> (i = Suc (t * k) \\<longrightarrow>\n                          s (Suc (t * k)) = m \\<and>\n                          0 < Suc (t * k) mod k \\<and>\n                          (\\<exists>x.\n                              (x = Suc (Suc (t * k)) \\<longrightarrow>\n                               Suc (Suc (t * k)) mod k = 0) \\<and>\n                              (x \\<noteq>\n                               Suc (Suc (t * k)) \\<longrightarrow>\n                               Suc (Suc (t * k)) \\<le> x \\<and>\n                               x mod k = 0 \\<and>\n                               (\\<forall>xa.\n                                   Suc (Suc (t * k)) \\<le> xa \\<and>\n                                   xa \\<le> Suc\n       (Suc (t * k + (x - Suc (Suc (Suc (t * k)))))) \\<longrightarrow>\n                                   s xa = NoMsg)))) \\<and>\n                         (i \\<noteq> Suc (t * k) \\<longrightarrow>\n                          Suc (t * k) \\<le> i \\<and>\n                          s i = m \\<and>\n                          0 < i mod k \\<and>\n                          (\\<exists>x.\n                              (x = Suc i \\<longrightarrow>\n                               Suc i mod k = 0) \\<and>\n                              (x \\<noteq> Suc i \\<longrightarrow>\n                               Suc i \\<le> x \\<and>\n                               x mod k = 0 \\<and>\n                               (\\<forall>xa.\n                                   Suc i \\<le> xa \\<and>\n                                   xa \\<le> Suc\n       (i + (x - Suc (Suc i))) \\<longrightarrow>\n                                   s xa = NoMsg))) \\<and>\n                          (\\<forall>x.\n                              Suc (t * k) \\<le> x \\<and>\n                              x \\<le> Suc\n (t * k + (i - Suc (Suc (t * k)))) \\<longrightarrow>\n                              0 < x mod k))\n 3. \\<lbrakk>m \\<noteq> NoMsg; \\<And>t. event t = (t mod k = 0); t0 = t * k;\n     Suc 0 < k;\n     s (t * k) = m \\<and>\n     (\\<exists>x.\n         (x = Suc (t * k) \\<longrightarrow> Suc (t * k) mod k = 0) \\<and>\n         (x \\<noteq> Suc (t * k) \\<longrightarrow>\n          Suc (t * k) \\<le> x \\<and>\n          x mod k = 0 \\<and>\n          (\\<forall>xa.\n              Suc (t * k) \\<le> xa \\<and>\n              xa \\<le> Suc (t * k +\n                            (x - Suc (Suc (t * k)))) \\<longrightarrow>\n              s xa = NoMsg))) \\<or>\n     (\\<exists>x.\n         (x = Suc (t * k) \\<longrightarrow>\n          s (Suc (t * k)) = m \\<and>\n          0 < Suc (t * k) mod k \\<and>\n          (\\<exists>x.\n              (x = Suc (Suc (t * k)) \\<longrightarrow>\n               Suc (Suc (t * k)) mod k = 0) \\<and>\n              (x \\<noteq> Suc (Suc (t * k)) \\<longrightarrow>\n               Suc (Suc (t * k)) \\<le> x \\<and>\n               x mod k = 0 \\<and>\n               (\\<forall>xa.\n                   Suc (Suc (t * k)) \\<le> xa \\<and>\n                   xa \\<le> Suc (Suc (t * k +\n(x - Suc (Suc (Suc (t * k)))))) \\<longrightarrow>\n                   s xa = NoMsg)))) \\<and>\n         (x \\<noteq> Suc (t * k) \\<longrightarrow>\n          Suc (t * k) \\<le> x \\<and>\n          s x = m \\<and>\n          0 < x mod k \\<and>\n          (\\<exists>xa.\n              (xa = Suc x \\<longrightarrow> Suc x mod k = 0) \\<and>\n              (xa \\<noteq> Suc x \\<longrightarrow>\n               Suc x \\<le> xa \\<and>\n               xa mod k = 0 \\<and>\n               (\\<forall>xb.\n                   Suc x \\<le> xb \\<and>\n                   xb \\<le> Suc (x + (xa - Suc (Suc x))) \\<longrightarrow>\n                   s xb = NoMsg))) \\<and>\n          (\\<forall>xa.\n              Suc (t * k) \\<le> xa \\<and>\n              xa \\<le> Suc (t * k +\n                            (x - Suc (Suc (t * k)))) \\<longrightarrow>\n              0 < xa mod k)))\\<rbrakk>\n    \\<Longrightarrow> \\<exists>x.\n                         (x < t * k + k - Suc 0 \\<longrightarrow>\n                          t * k \\<le> x \\<and>\n                          s x = m \\<and>\n                          (\\<forall>xa.\n                              Suc x \\<le> xa \\<and>\n                              xa \\<le> t * k + k - Suc 0 \\<longrightarrow>\n                              s xa = NoMsg)) \\<and>\n                         (\\<not> x < t * k + k - Suc 0 \\<longrightarrow>\n                          t * k \\<le> x \\<and>\n                          x = t * k + k - Suc 0 \\<and> s x = m)", "apply clarsimp"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>s (t * k + k - Suc 0) \\<noteq> NoMsg;\n     \\<And>t. event t = (t mod k = 0); t0 = t * k; Suc 0 < k;\n     Suc (t * k) = t * k + k - Suc 0; m = s (t * k + k - Suc 0)\\<rbrakk>\n    \\<Longrightarrow> 0 < (t * k + k - Suc 0) mod k \\<and>\n                      (\\<exists>x.\n                          x \\<noteq> t * k + k \\<longrightarrow>\n                          t * k + k \\<le> x \\<and>\n                          x mod k = 0 \\<and>\n                          (\\<forall>xa.\n                              t * k + k \\<le> xa \\<and>\n                              xa \\<le> Suc\n  (Suc (t * k + (x - Suc (t * k + k)))) \\<longrightarrow>\n                              s xa = NoMsg))\n 2. \\<And>i.\n       \\<lbrakk>m \\<noteq> NoMsg; \\<And>t. event t = (t mod k = 0);\n        t0 = t * k; Suc 0 < k;\n        i < t * k + k - Suc 0 \\<longrightarrow>\n        t * k \\<le> i \\<and>\n        s i = m \\<and>\n        (\\<forall>x.\n            Suc i \\<le> x \\<and> x \\<le> t * k + k - Suc 0 \\<longrightarrow>\n            s x = NoMsg);\n        \\<not> i < t * k + k - Suc 0 \\<longrightarrow>\n        t * k \\<le> i \\<and> i = t * k + k - Suc 0 \\<and> s i = m;\n        i \\<noteq> t * k; i \\<noteq> Suc (t * k)\\<rbrakk>\n       \\<Longrightarrow> (i = Suc (t * k) \\<longrightarrow>\n                          s (Suc (t * k)) = m \\<and>\n                          0 < Suc (t * k) mod k \\<and>\n                          (\\<exists>x.\n                              (x = Suc (Suc (t * k)) \\<longrightarrow>\n                               Suc (Suc (t * k)) mod k = 0) \\<and>\n                              (x \\<noteq>\n                               Suc (Suc (t * k)) \\<longrightarrow>\n                               Suc (Suc (t * k)) \\<le> x \\<and>\n                               x mod k = 0 \\<and>\n                               (\\<forall>xa.\n                                   Suc (Suc (t * k)) \\<le> xa \\<and>\n                                   xa \\<le> Suc\n       (Suc (t * k + (x - Suc (Suc (Suc (t * k)))))) \\<longrightarrow>\n                                   s xa = NoMsg)))) \\<and>\n                         (i \\<noteq> Suc (t * k) \\<longrightarrow>\n                          Suc (t * k) \\<le> i \\<and>\n                          s i = m \\<and>\n                          0 < i mod k \\<and>\n                          (\\<exists>x.\n                              (x = Suc i \\<longrightarrow>\n                               Suc i mod k = 0) \\<and>\n                              (x \\<noteq> Suc i \\<longrightarrow>\n                               Suc i \\<le> x \\<and>\n                               x mod k = 0 \\<and>\n                               (\\<forall>xa.\n                                   Suc i \\<le> xa \\<and>\n                                   xa \\<le> Suc\n       (i + (x - Suc (Suc i))) \\<longrightarrow>\n                                   s xa = NoMsg))) \\<and>\n                          (\\<forall>x.\n                              Suc (t * k) \\<le> x \\<and>\n                              x \\<le> Suc\n (t * k + (i - Suc (Suc (t * k)))) \\<longrightarrow>\n                              0 < x mod k))\n 3. \\<lbrakk>m \\<noteq> NoMsg; \\<And>t. event t = (t mod k = 0); t0 = t * k;\n     Suc 0 < k;\n     s (t * k) = m \\<and>\n     (\\<exists>x.\n         (x = Suc (t * k) \\<longrightarrow> Suc (t * k) mod k = 0) \\<and>\n         (x \\<noteq> Suc (t * k) \\<longrightarrow>\n          Suc (t * k) \\<le> x \\<and>\n          x mod k = 0 \\<and>\n          (\\<forall>xa.\n              Suc (t * k) \\<le> xa \\<and>\n              xa \\<le> Suc (t * k +\n                            (x - Suc (Suc (t * k)))) \\<longrightarrow>\n              s xa = NoMsg))) \\<or>\n     (\\<exists>x.\n         (x = Suc (t * k) \\<longrightarrow>\n          s (Suc (t * k)) = m \\<and>\n          0 < Suc (t * k) mod k \\<and>\n          (\\<exists>x.\n              (x = Suc (Suc (t * k)) \\<longrightarrow>\n               Suc (Suc (t * k)) mod k = 0) \\<and>\n              (x \\<noteq> Suc (Suc (t * k)) \\<longrightarrow>\n               Suc (Suc (t * k)) \\<le> x \\<and>\n               x mod k = 0 \\<and>\n               (\\<forall>xa.\n                   Suc (Suc (t * k)) \\<le> xa \\<and>\n                   xa \\<le> Suc (Suc (t * k +\n(x - Suc (Suc (Suc (t * k)))))) \\<longrightarrow>\n                   s xa = NoMsg)))) \\<and>\n         (x \\<noteq> Suc (t * k) \\<longrightarrow>\n          Suc (t * k) \\<le> x \\<and>\n          s x = m \\<and>\n          0 < x mod k \\<and>\n          (\\<exists>xa.\n              (xa = Suc x \\<longrightarrow> Suc x mod k = 0) \\<and>\n              (xa \\<noteq> Suc x \\<longrightarrow>\n               Suc x \\<le> xa \\<and>\n               xa mod k = 0 \\<and>\n               (\\<forall>xb.\n                   Suc x \\<le> xb \\<and>\n                   xb \\<le> Suc (x + (xa - Suc (Suc x))) \\<longrightarrow>\n                   s xb = NoMsg))) \\<and>\n          (\\<forall>xa.\n              Suc (t * k) \\<le> xa \\<and>\n              xa \\<le> Suc (t * k +\n                            (x - Suc (Suc (t * k)))) \\<longrightarrow>\n              0 < xa mod k)))\\<rbrakk>\n    \\<Longrightarrow> \\<exists>x.\n                         (x < t * k + k - Suc 0 \\<longrightarrow>\n                          t * k \\<le> x \\<and>\n                          s x = m \\<and>\n                          (\\<forall>xa.\n                              Suc x \\<le> xa \\<and>\n                              xa \\<le> t * k + k - Suc 0 \\<longrightarrow>\n                              s xa = NoMsg)) \\<and>\n                         (\\<not> x < t * k + k - Suc 0 \\<longrightarrow>\n                          t * k \\<le> x \\<and>\n                          x = t * k + k - Suc 0 \\<and> s x = m)", "apply (subgoal_tac \"k = Suc (Suc 0)\")"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<lbrakk>s (t * k + k - Suc 0) \\<noteq> NoMsg;\n     \\<And>t. event t = (t mod k = 0); t0 = t * k; Suc 0 < k;\n     Suc (t * k) = t * k + k - Suc 0; m = s (t * k + k - Suc 0);\n     k = Suc (Suc 0)\\<rbrakk>\n    \\<Longrightarrow> 0 < (t * k + k - Suc 0) mod k \\<and>\n                      (\\<exists>x.\n                          x \\<noteq> t * k + k \\<longrightarrow>\n                          t * k + k \\<le> x \\<and>\n                          x mod k = 0 \\<and>\n                          (\\<forall>xa.\n                              t * k + k \\<le> xa \\<and>\n                              xa \\<le> Suc\n  (Suc (t * k + (x - Suc (t * k + k)))) \\<longrightarrow>\n                              s xa = NoMsg))\n 2. \\<lbrakk>s (t * k + k - Suc 0) \\<noteq> NoMsg;\n     \\<And>t. event t = (t mod k = 0); t0 = t * k; Suc 0 < k;\n     Suc (t * k) = t * k + k - Suc 0; m = s (t * k + k - Suc 0)\\<rbrakk>\n    \\<Longrightarrow> k = Suc (Suc 0)\n 3. \\<And>i.\n       \\<lbrakk>m \\<noteq> NoMsg; \\<And>t. event t = (t mod k = 0);\n        t0 = t * k; Suc 0 < k;\n        i < t * k + k - Suc 0 \\<longrightarrow>\n        t * k \\<le> i \\<and>\n        s i = m \\<and>\n        (\\<forall>x.\n            Suc i \\<le> x \\<and> x \\<le> t * k + k - Suc 0 \\<longrightarrow>\n            s x = NoMsg);\n        \\<not> i < t * k + k - Suc 0 \\<longrightarrow>\n        t * k \\<le> i \\<and> i = t * k + k - Suc 0 \\<and> s i = m;\n        i \\<noteq> t * k; i \\<noteq> Suc (t * k)\\<rbrakk>\n       \\<Longrightarrow> (i = Suc (t * k) \\<longrightarrow>\n                          s (Suc (t * k)) = m \\<and>\n                          0 < Suc (t * k) mod k \\<and>\n                          (\\<exists>x.\n                              (x = Suc (Suc (t * k)) \\<longrightarrow>\n                               Suc (Suc (t * k)) mod k = 0) \\<and>\n                              (x \\<noteq>\n                               Suc (Suc (t * k)) \\<longrightarrow>\n                               Suc (Suc (t * k)) \\<le> x \\<and>\n                               x mod k = 0 \\<and>\n                               (\\<forall>xa.\n                                   Suc (Suc (t * k)) \\<le> xa \\<and>\n                                   xa \\<le> Suc\n       (Suc (t * k + (x - Suc (Suc (Suc (t * k)))))) \\<longrightarrow>\n                                   s xa = NoMsg)))) \\<and>\n                         (i \\<noteq> Suc (t * k) \\<longrightarrow>\n                          Suc (t * k) \\<le> i \\<and>\n                          s i = m \\<and>\n                          0 < i mod k \\<and>\n                          (\\<exists>x.\n                              (x = Suc i \\<longrightarrow>\n                               Suc i mod k = 0) \\<and>\n                              (x \\<noteq> Suc i \\<longrightarrow>\n                               Suc i \\<le> x \\<and>\n                               x mod k = 0 \\<and>\n                               (\\<forall>xa.\n                                   Suc i \\<le> xa \\<and>\n                                   xa \\<le> Suc\n       (i + (x - Suc (Suc i))) \\<longrightarrow>\n                                   s xa = NoMsg))) \\<and>\n                          (\\<forall>x.\n                              Suc (t * k) \\<le> x \\<and>\n                              x \\<le> Suc\n (t * k + (i - Suc (Suc (t * k)))) \\<longrightarrow>\n                              0 < x mod k))\n 4. \\<lbrakk>m \\<noteq> NoMsg; \\<And>t. event t = (t mod k = 0); t0 = t * k;\n     Suc 0 < k;\n     s (t * k) = m \\<and>\n     (\\<exists>x.\n         (x = Suc (t * k) \\<longrightarrow> Suc (t * k) mod k = 0) \\<and>\n         (x \\<noteq> Suc (t * k) \\<longrightarrow>\n          Suc (t * k) \\<le> x \\<and>\n          x mod k = 0 \\<and>\n          (\\<forall>xa.\n              Suc (t * k) \\<le> xa \\<and>\n              xa \\<le> Suc (t * k +\n                            (x - Suc (Suc (t * k)))) \\<longrightarrow>\n              s xa = NoMsg))) \\<or>\n     (\\<exists>x.\n         (x = Suc (t * k) \\<longrightarrow>\n          s (Suc (t * k)) = m \\<and>\n          0 < Suc (t * k) mod k \\<and>\n          (\\<exists>x.\n              (x = Suc (Suc (t * k)) \\<longrightarrow>\n               Suc (Suc (t * k)) mod k = 0) \\<and>\n              (x \\<noteq> Suc (Suc (t * k)) \\<longrightarrow>\n               Suc (Suc (t * k)) \\<le> x \\<and>\n               x mod k = 0 \\<and>\n               (\\<forall>xa.\n                   Suc (Suc (t * k)) \\<le> xa \\<and>\n                   xa \\<le> Suc (Suc (t * k +\n(x - Suc (Suc (Suc (t * k)))))) \\<longrightarrow>\n                   s xa = NoMsg)))) \\<and>\n         (x \\<noteq> Suc (t * k) \\<longrightarrow>\n          Suc (t * k) \\<le> x \\<and>\n          s x = m \\<and>\n          0 < x mod k \\<and>\n          (\\<exists>xa.\n              (xa = Suc x \\<longrightarrow> Suc x mod k = 0) \\<and>\n              (xa \\<noteq> Suc x \\<longrightarrow>\n               Suc x \\<le> xa \\<and>\n               xa mod k = 0 \\<and>\n               (\\<forall>xb.\n                   Suc x \\<le> xb \\<and>\n                   xb \\<le> Suc (x + (xa - Suc (Suc x))) \\<longrightarrow>\n                   s xb = NoMsg))) \\<and>\n          (\\<forall>xa.\n              Suc (t * k) \\<le> xa \\<and>\n              xa \\<le> Suc (t * k +\n                            (x - Suc (Suc (t * k)))) \\<longrightarrow>\n              0 < xa mod k)))\\<rbrakk>\n    \\<Longrightarrow> \\<exists>x.\n                         (x < t * k + k - Suc 0 \\<longrightarrow>\n                          t * k \\<le> x \\<and>\n                          s x = m \\<and>\n                          (\\<forall>xa.\n                              Suc x \\<le> xa \\<and>\n                              xa \\<le> t * k + k - Suc 0 \\<longrightarrow>\n                              s xa = NoMsg)) \\<and>\n                         (\\<not> x < t * k + k - Suc 0 \\<longrightarrow>\n                          t * k \\<le> x \\<and>\n                          x = t * k + k - Suc 0 \\<and> s x = m)", "prefer 2"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<lbrakk>s (t * k + k - Suc 0) \\<noteq> NoMsg;\n     \\<And>t. event t = (t mod k = 0); t0 = t * k; Suc 0 < k;\n     Suc (t * k) = t * k + k - Suc 0; m = s (t * k + k - Suc 0)\\<rbrakk>\n    \\<Longrightarrow> k = Suc (Suc 0)\n 2. \\<lbrakk>s (t * k + k - Suc 0) \\<noteq> NoMsg;\n     \\<And>t. event t = (t mod k = 0); t0 = t * k; Suc 0 < k;\n     Suc (t * k) = t * k + k - Suc 0; m = s (t * k + k - Suc 0);\n     k = Suc (Suc 0)\\<rbrakk>\n    \\<Longrightarrow> 0 < (t * k + k - Suc 0) mod k \\<and>\n                      (\\<exists>x.\n                          x \\<noteq> t * k + k \\<longrightarrow>\n                          t * k + k \\<le> x \\<and>\n                          x mod k = 0 \\<and>\n                          (\\<forall>xa.\n                              t * k + k \\<le> xa \\<and>\n                              xa \\<le> Suc\n  (Suc (t * k + (x - Suc (t * k + k)))) \\<longrightarrow>\n                              s xa = NoMsg))\n 3. \\<And>i.\n       \\<lbrakk>m \\<noteq> NoMsg; \\<And>t. event t = (t mod k = 0);\n        t0 = t * k; Suc 0 < k;\n        i < t * k + k - Suc 0 \\<longrightarrow>\n        t * k \\<le> i \\<and>\n        s i = m \\<and>\n        (\\<forall>x.\n            Suc i \\<le> x \\<and> x \\<le> t * k + k - Suc 0 \\<longrightarrow>\n            s x = NoMsg);\n        \\<not> i < t * k + k - Suc 0 \\<longrightarrow>\n        t * k \\<le> i \\<and> i = t * k + k - Suc 0 \\<and> s i = m;\n        i \\<noteq> t * k; i \\<noteq> Suc (t * k)\\<rbrakk>\n       \\<Longrightarrow> (i = Suc (t * k) \\<longrightarrow>\n                          s (Suc (t * k)) = m \\<and>\n                          0 < Suc (t * k) mod k \\<and>\n                          (\\<exists>x.\n                              (x = Suc (Suc (t * k)) \\<longrightarrow>\n                               Suc (Suc (t * k)) mod k = 0) \\<and>\n                              (x \\<noteq>\n                               Suc (Suc (t * k)) \\<longrightarrow>\n                               Suc (Suc (t * k)) \\<le> x \\<and>\n                               x mod k = 0 \\<and>\n                               (\\<forall>xa.\n                                   Suc (Suc (t * k)) \\<le> xa \\<and>\n                                   xa \\<le> Suc\n       (Suc (t * k + (x - Suc (Suc (Suc (t * k)))))) \\<longrightarrow>\n                                   s xa = NoMsg)))) \\<and>\n                         (i \\<noteq> Suc (t * k) \\<longrightarrow>\n                          Suc (t * k) \\<le> i \\<and>\n                          s i = m \\<and>\n                          0 < i mod k \\<and>\n                          (\\<exists>x.\n                              (x = Suc i \\<longrightarrow>\n                               Suc i mod k = 0) \\<and>\n                              (x \\<noteq> Suc i \\<longrightarrow>\n                               Suc i \\<le> x \\<and>\n                               x mod k = 0 \\<and>\n                               (\\<forall>xa.\n                                   Suc i \\<le> xa \\<and>\n                                   xa \\<le> Suc\n       (i + (x - Suc (Suc i))) \\<longrightarrow>\n                                   s xa = NoMsg))) \\<and>\n                          (\\<forall>x.\n                              Suc (t * k) \\<le> x \\<and>\n                              x \\<le> Suc\n (t * k + (i - Suc (Suc (t * k)))) \\<longrightarrow>\n                              0 < x mod k))\n 4. \\<lbrakk>m \\<noteq> NoMsg; \\<And>t. event t = (t mod k = 0); t0 = t * k;\n     Suc 0 < k;\n     s (t * k) = m \\<and>\n     (\\<exists>x.\n         (x = Suc (t * k) \\<longrightarrow> Suc (t * k) mod k = 0) \\<and>\n         (x \\<noteq> Suc (t * k) \\<longrightarrow>\n          Suc (t * k) \\<le> x \\<and>\n          x mod k = 0 \\<and>\n          (\\<forall>xa.\n              Suc (t * k) \\<le> xa \\<and>\n              xa \\<le> Suc (t * k +\n                            (x - Suc (Suc (t * k)))) \\<longrightarrow>\n              s xa = NoMsg))) \\<or>\n     (\\<exists>x.\n         (x = Suc (t * k) \\<longrightarrow>\n          s (Suc (t * k)) = m \\<and>\n          0 < Suc (t * k) mod k \\<and>\n          (\\<exists>x.\n              (x = Suc (Suc (t * k)) \\<longrightarrow>\n               Suc (Suc (t * k)) mod k = 0) \\<and>\n              (x \\<noteq> Suc (Suc (t * k)) \\<longrightarrow>\n               Suc (Suc (t * k)) \\<le> x \\<and>\n               x mod k = 0 \\<and>\n               (\\<forall>xa.\n                   Suc (Suc (t * k)) \\<le> xa \\<and>\n                   xa \\<le> Suc (Suc (t * k +\n(x - Suc (Suc (Suc (t * k)))))) \\<longrightarrow>\n                   s xa = NoMsg)))) \\<and>\n         (x \\<noteq> Suc (t * k) \\<longrightarrow>\n          Suc (t * k) \\<le> x \\<and>\n          s x = m \\<and>\n          0 < x mod k \\<and>\n          (\\<exists>xa.\n              (xa = Suc x \\<longrightarrow> Suc x mod k = 0) \\<and>\n              (xa \\<noteq> Suc x \\<longrightarrow>\n               Suc x \\<le> xa \\<and>\n               xa mod k = 0 \\<and>\n               (\\<forall>xb.\n                   Suc x \\<le> xb \\<and>\n                   xb \\<le> Suc (x + (xa - Suc (Suc x))) \\<longrightarrow>\n                   s xb = NoMsg))) \\<and>\n          (\\<forall>xa.\n              Suc (t * k) \\<le> xa \\<and>\n              xa \\<le> Suc (t * k +\n                            (x - Suc (Suc (t * k)))) \\<longrightarrow>\n              0 < xa mod k)))\\<rbrakk>\n    \\<Longrightarrow> \\<exists>x.\n                         (x < t * k + k - Suc 0 \\<longrightarrow>\n                          t * k \\<le> x \\<and>\n                          s x = m \\<and>\n                          (\\<forall>xa.\n                              Suc x \\<le> xa \\<and>\n                              xa \\<le> t * k + k - Suc 0 \\<longrightarrow>\n                              s xa = NoMsg)) \\<and>\n                         (\\<not> x < t * k + k - Suc 0 \\<longrightarrow>\n                          t * k \\<le> x \\<and>\n                          x = t * k + k - Suc 0 \\<and> s x = m)", "apply simp"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>s (t * k + k - Suc 0) \\<noteq> NoMsg;\n     \\<And>t. event t = (t mod k = 0); t0 = t * k; Suc 0 < k;\n     Suc (t * k) = t * k + k - Suc 0; m = s (t * k + k - Suc 0);\n     k = Suc (Suc 0)\\<rbrakk>\n    \\<Longrightarrow> 0 < (t * k + k - Suc 0) mod k \\<and>\n                      (\\<exists>x.\n                          x \\<noteq> t * k + k \\<longrightarrow>\n                          t * k + k \\<le> x \\<and>\n                          x mod k = 0 \\<and>\n                          (\\<forall>xa.\n                              t * k + k \\<le> xa \\<and>\n                              xa \\<le> Suc\n  (Suc (t * k + (x - Suc (t * k + k)))) \\<longrightarrow>\n                              s xa = NoMsg))\n 2. \\<And>i.\n       \\<lbrakk>m \\<noteq> NoMsg; \\<And>t. event t = (t mod k = 0);\n        t0 = t * k; Suc 0 < k;\n        i < t * k + k - Suc 0 \\<longrightarrow>\n        t * k \\<le> i \\<and>\n        s i = m \\<and>\n        (\\<forall>x.\n            Suc i \\<le> x \\<and> x \\<le> t * k + k - Suc 0 \\<longrightarrow>\n            s x = NoMsg);\n        \\<not> i < t * k + k - Suc 0 \\<longrightarrow>\n        t * k \\<le> i \\<and> i = t * k + k - Suc 0 \\<and> s i = m;\n        i \\<noteq> t * k; i \\<noteq> Suc (t * k)\\<rbrakk>\n       \\<Longrightarrow> (i = Suc (t * k) \\<longrightarrow>\n                          s (Suc (t * k)) = m \\<and>\n                          0 < Suc (t * k) mod k \\<and>\n                          (\\<exists>x.\n                              (x = Suc (Suc (t * k)) \\<longrightarrow>\n                               Suc (Suc (t * k)) mod k = 0) \\<and>\n                              (x \\<noteq>\n                               Suc (Suc (t * k)) \\<longrightarrow>\n                               Suc (Suc (t * k)) \\<le> x \\<and>\n                               x mod k = 0 \\<and>\n                               (\\<forall>xa.\n                                   Suc (Suc (t * k)) \\<le> xa \\<and>\n                                   xa \\<le> Suc\n       (Suc (t * k + (x - Suc (Suc (Suc (t * k)))))) \\<longrightarrow>\n                                   s xa = NoMsg)))) \\<and>\n                         (i \\<noteq> Suc (t * k) \\<longrightarrow>\n                          Suc (t * k) \\<le> i \\<and>\n                          s i = m \\<and>\n                          0 < i mod k \\<and>\n                          (\\<exists>x.\n                              (x = Suc i \\<longrightarrow>\n                               Suc i mod k = 0) \\<and>\n                              (x \\<noteq> Suc i \\<longrightarrow>\n                               Suc i \\<le> x \\<and>\n                               x mod k = 0 \\<and>\n                               (\\<forall>xa.\n                                   Suc i \\<le> xa \\<and>\n                                   xa \\<le> Suc\n       (i + (x - Suc (Suc i))) \\<longrightarrow>\n                                   s xa = NoMsg))) \\<and>\n                          (\\<forall>x.\n                              Suc (t * k) \\<le> x \\<and>\n                              x \\<le> Suc\n (t * k + (i - Suc (Suc (t * k)))) \\<longrightarrow>\n                              0 < x mod k))\n 3. \\<lbrakk>m \\<noteq> NoMsg; \\<And>t. event t = (t mod k = 0); t0 = t * k;\n     Suc 0 < k;\n     s (t * k) = m \\<and>\n     (\\<exists>x.\n         (x = Suc (t * k) \\<longrightarrow> Suc (t * k) mod k = 0) \\<and>\n         (x \\<noteq> Suc (t * k) \\<longrightarrow>\n          Suc (t * k) \\<le> x \\<and>\n          x mod k = 0 \\<and>\n          (\\<forall>xa.\n              Suc (t * k) \\<le> xa \\<and>\n              xa \\<le> Suc (t * k +\n                            (x - Suc (Suc (t * k)))) \\<longrightarrow>\n              s xa = NoMsg))) \\<or>\n     (\\<exists>x.\n         (x = Suc (t * k) \\<longrightarrow>\n          s (Suc (t * k)) = m \\<and>\n          0 < Suc (t * k) mod k \\<and>\n          (\\<exists>x.\n              (x = Suc (Suc (t * k)) \\<longrightarrow>\n               Suc (Suc (t * k)) mod k = 0) \\<and>\n              (x \\<noteq> Suc (Suc (t * k)) \\<longrightarrow>\n               Suc (Suc (t * k)) \\<le> x \\<and>\n               x mod k = 0 \\<and>\n               (\\<forall>xa.\n                   Suc (Suc (t * k)) \\<le> xa \\<and>\n                   xa \\<le> Suc (Suc (t * k +\n(x - Suc (Suc (Suc (t * k)))))) \\<longrightarrow>\n                   s xa = NoMsg)))) \\<and>\n         (x \\<noteq> Suc (t * k) \\<longrightarrow>\n          Suc (t * k) \\<le> x \\<and>\n          s x = m \\<and>\n          0 < x mod k \\<and>\n          (\\<exists>xa.\n              (xa = Suc x \\<longrightarrow> Suc x mod k = 0) \\<and>\n              (xa \\<noteq> Suc x \\<longrightarrow>\n               Suc x \\<le> xa \\<and>\n               xa mod k = 0 \\<and>\n               (\\<forall>xb.\n                   Suc x \\<le> xb \\<and>\n                   xb \\<le> Suc (x + (xa - Suc (Suc x))) \\<longrightarrow>\n                   s xb = NoMsg))) \\<and>\n          (\\<forall>xa.\n              Suc (t * k) \\<le> xa \\<and>\n              xa \\<le> Suc (t * k +\n                            (x - Suc (Suc (t * k)))) \\<longrightarrow>\n              0 < xa mod k)))\\<rbrakk>\n    \\<Longrightarrow> \\<exists>x.\n                         (x < t * k + k - Suc 0 \\<longrightarrow>\n                          t * k \\<le> x \\<and>\n                          s x = m \\<and>\n                          (\\<forall>xa.\n                              Suc x \\<le> xa \\<and>\n                              xa \\<le> t * k + k - Suc 0 \\<longrightarrow>\n                              s xa = NoMsg)) \\<and>\n                         (\\<not> x < t * k + k - Suc 0 \\<longrightarrow>\n                          t * k \\<le> x \\<and>\n                          x = t * k + k - Suc 0 \\<and> s x = m)", "apply (simp add: mod_Suc)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>s (Suc (t + t)) \\<noteq> NoMsg;\n     \\<And>t. event t = (t mod Suc (Suc 0) = 0); t0 = t + t;\n     m = s (Suc (t + t)); k = Suc (Suc 0)\\<rbrakk>\n    \\<Longrightarrow> (t + t) mod Suc (Suc 0) \\<noteq> Suc 0 \\<and>\n                      ((t + t) mod Suc (Suc 0) \\<noteq>\n                       Suc 0 \\<longrightarrow>\n                       (\\<exists>x.\n                           x \\<noteq> Suc (Suc (t + t)) \\<longrightarrow>\n                           Suc (Suc (t + t)) \\<le> x \\<and>\n                           x mod Suc (Suc 0) = 0 \\<and>\n                           (\\<forall>xa.\n                               Suc (Suc (t + t)) \\<le> xa \\<and>\n                               xa \\<le> Suc\n   (Suc (t + t + (x - Suc (Suc (Suc (t + t)))))) \\<longrightarrow>\n                               s xa = NoMsg)))\n 2. \\<And>i.\n       \\<lbrakk>m \\<noteq> NoMsg; \\<And>t. event t = (t mod k = 0);\n        t0 = t * k; Suc 0 < k;\n        i < t * k + k - Suc 0 \\<longrightarrow>\n        t * k \\<le> i \\<and>\n        s i = m \\<and>\n        (\\<forall>x.\n            Suc i \\<le> x \\<and> x \\<le> t * k + k - Suc 0 \\<longrightarrow>\n            s x = NoMsg);\n        \\<not> i < t * k + k - Suc 0 \\<longrightarrow>\n        t * k \\<le> i \\<and> i = t * k + k - Suc 0 \\<and> s i = m;\n        i \\<noteq> t * k; i \\<noteq> Suc (t * k)\\<rbrakk>\n       \\<Longrightarrow> (i = Suc (t * k) \\<longrightarrow>\n                          s (Suc (t * k)) = m \\<and>\n                          0 < Suc (t * k) mod k \\<and>\n                          (\\<exists>x.\n                              (x = Suc (Suc (t * k)) \\<longrightarrow>\n                               Suc (Suc (t * k)) mod k = 0) \\<and>\n                              (x \\<noteq>\n                               Suc (Suc (t * k)) \\<longrightarrow>\n                               Suc (Suc (t * k)) \\<le> x \\<and>\n                               x mod k = 0 \\<and>\n                               (\\<forall>xa.\n                                   Suc (Suc (t * k)) \\<le> xa \\<and>\n                                   xa \\<le> Suc\n       (Suc (t * k + (x - Suc (Suc (Suc (t * k)))))) \\<longrightarrow>\n                                   s xa = NoMsg)))) \\<and>\n                         (i \\<noteq> Suc (t * k) \\<longrightarrow>\n                          Suc (t * k) \\<le> i \\<and>\n                          s i = m \\<and>\n                          0 < i mod k \\<and>\n                          (\\<exists>x.\n                              (x = Suc i \\<longrightarrow>\n                               Suc i mod k = 0) \\<and>\n                              (x \\<noteq> Suc i \\<longrightarrow>\n                               Suc i \\<le> x \\<and>\n                               x mod k = 0 \\<and>\n                               (\\<forall>xa.\n                                   Suc i \\<le> xa \\<and>\n                                   xa \\<le> Suc\n       (i + (x - Suc (Suc i))) \\<longrightarrow>\n                                   s xa = NoMsg))) \\<and>\n                          (\\<forall>x.\n                              Suc (t * k) \\<le> x \\<and>\n                              x \\<le> Suc\n (t * k + (i - Suc (Suc (t * k)))) \\<longrightarrow>\n                              0 < x mod k))\n 3. \\<lbrakk>m \\<noteq> NoMsg; \\<And>t. event t = (t mod k = 0); t0 = t * k;\n     Suc 0 < k;\n     s (t * k) = m \\<and>\n     (\\<exists>x.\n         (x = Suc (t * k) \\<longrightarrow> Suc (t * k) mod k = 0) \\<and>\n         (x \\<noteq> Suc (t * k) \\<longrightarrow>\n          Suc (t * k) \\<le> x \\<and>\n          x mod k = 0 \\<and>\n          (\\<forall>xa.\n              Suc (t * k) \\<le> xa \\<and>\n              xa \\<le> Suc (t * k +\n                            (x - Suc (Suc (t * k)))) \\<longrightarrow>\n              s xa = NoMsg))) \\<or>\n     (\\<exists>x.\n         (x = Suc (t * k) \\<longrightarrow>\n          s (Suc (t * k)) = m \\<and>\n          0 < Suc (t * k) mod k \\<and>\n          (\\<exists>x.\n              (x = Suc (Suc (t * k)) \\<longrightarrow>\n               Suc (Suc (t * k)) mod k = 0) \\<and>\n              (x \\<noteq> Suc (Suc (t * k)) \\<longrightarrow>\n               Suc (Suc (t * k)) \\<le> x \\<and>\n               x mod k = 0 \\<and>\n               (\\<forall>xa.\n                   Suc (Suc (t * k)) \\<le> xa \\<and>\n                   xa \\<le> Suc (Suc (t * k +\n(x - Suc (Suc (Suc (t * k)))))) \\<longrightarrow>\n                   s xa = NoMsg)))) \\<and>\n         (x \\<noteq> Suc (t * k) \\<longrightarrow>\n          Suc (t * k) \\<le> x \\<and>\n          s x = m \\<and>\n          0 < x mod k \\<and>\n          (\\<exists>xa.\n              (xa = Suc x \\<longrightarrow> Suc x mod k = 0) \\<and>\n              (xa \\<noteq> Suc x \\<longrightarrow>\n               Suc x \\<le> xa \\<and>\n               xa mod k = 0 \\<and>\n               (\\<forall>xb.\n                   Suc x \\<le> xb \\<and>\n                   xb \\<le> Suc (x + (xa - Suc (Suc x))) \\<longrightarrow>\n                   s xb = NoMsg))) \\<and>\n          (\\<forall>xa.\n              Suc (t * k) \\<le> xa \\<and>\n              xa \\<le> Suc (t * k +\n                            (x - Suc (Suc (t * k)))) \\<longrightarrow>\n              0 < xa mod k)))\\<rbrakk>\n    \\<Longrightarrow> \\<exists>x.\n                         (x < t * k + k - Suc 0 \\<longrightarrow>\n                          t * k \\<le> x \\<and>\n                          s x = m \\<and>\n                          (\\<forall>xa.\n                              Suc x \\<le> xa \\<and>\n                              xa \\<le> t * k + k - Suc 0 \\<longrightarrow>\n                              s xa = NoMsg)) \\<and>\n                         (\\<not> x < t * k + k - Suc 0 \\<longrightarrow>\n                          t * k \\<le> x \\<and>\n                          x = t * k + k - Suc 0 \\<and> s x = m)", "apply (simp add: mult_2_right[symmetric] numeral_2_eq_2 del: mult_Suc_right)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>s (Suc (t * Suc (Suc 0))) \\<noteq> NoMsg;\n     \\<And>t. event t = (t mod Suc (Suc 0) = 0); t0 = t * Suc (Suc 0);\n     m = s (Suc (t * Suc (Suc 0))); k = Suc (Suc 0)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>x.\n                         x \\<noteq>\n                         Suc (Suc (t * Suc (Suc 0))) \\<longrightarrow>\n                         Suc (Suc (t * Suc (Suc 0))) \\<le> x \\<and>\n                         x mod Suc (Suc 0) = 0 \\<and>\n                         (\\<forall>xa.\n                             Suc (Suc (t * Suc (Suc 0))) \\<le> xa \\<and>\n                             xa \\<le> Suc\n (Suc (t * Suc (Suc 0) +\n       (x - Suc (Suc (Suc (t * Suc (Suc 0))))))) \\<longrightarrow>\n                             s xa = NoMsg)\n 2. \\<And>i.\n       \\<lbrakk>m \\<noteq> NoMsg; \\<And>t. event t = (t mod k = 0);\n        t0 = t * k; Suc 0 < k;\n        i < t * k + k - Suc 0 \\<longrightarrow>\n        t * k \\<le> i \\<and>\n        s i = m \\<and>\n        (\\<forall>x.\n            Suc i \\<le> x \\<and> x \\<le> t * k + k - Suc 0 \\<longrightarrow>\n            s x = NoMsg);\n        \\<not> i < t * k + k - Suc 0 \\<longrightarrow>\n        t * k \\<le> i \\<and> i = t * k + k - Suc 0 \\<and> s i = m;\n        i \\<noteq> t * k; i \\<noteq> Suc (t * k)\\<rbrakk>\n       \\<Longrightarrow> (i = Suc (t * k) \\<longrightarrow>\n                          s (Suc (t * k)) = m \\<and>\n                          0 < Suc (t * k) mod k \\<and>\n                          (\\<exists>x.\n                              (x = Suc (Suc (t * k)) \\<longrightarrow>\n                               Suc (Suc (t * k)) mod k = 0) \\<and>\n                              (x \\<noteq>\n                               Suc (Suc (t * k)) \\<longrightarrow>\n                               Suc (Suc (t * k)) \\<le> x \\<and>\n                               x mod k = 0 \\<and>\n                               (\\<forall>xa.\n                                   Suc (Suc (t * k)) \\<le> xa \\<and>\n                                   xa \\<le> Suc\n       (Suc (t * k + (x - Suc (Suc (Suc (t * k)))))) \\<longrightarrow>\n                                   s xa = NoMsg)))) \\<and>\n                         (i \\<noteq> Suc (t * k) \\<longrightarrow>\n                          Suc (t * k) \\<le> i \\<and>\n                          s i = m \\<and>\n                          0 < i mod k \\<and>\n                          (\\<exists>x.\n                              (x = Suc i \\<longrightarrow>\n                               Suc i mod k = 0) \\<and>\n                              (x \\<noteq> Suc i \\<longrightarrow>\n                               Suc i \\<le> x \\<and>\n                               x mod k = 0 \\<and>\n                               (\\<forall>xa.\n                                   Suc i \\<le> xa \\<and>\n                                   xa \\<le> Suc\n       (i + (x - Suc (Suc i))) \\<longrightarrow>\n                                   s xa = NoMsg))) \\<and>\n                          (\\<forall>x.\n                              Suc (t * k) \\<le> x \\<and>\n                              x \\<le> Suc\n (t * k + (i - Suc (Suc (t * k)))) \\<longrightarrow>\n                              0 < x mod k))\n 3. \\<lbrakk>m \\<noteq> NoMsg; \\<And>t. event t = (t mod k = 0); t0 = t * k;\n     Suc 0 < k;\n     s (t * k) = m \\<and>\n     (\\<exists>x.\n         (x = Suc (t * k) \\<longrightarrow> Suc (t * k) mod k = 0) \\<and>\n         (x \\<noteq> Suc (t * k) \\<longrightarrow>\n          Suc (t * k) \\<le> x \\<and>\n          x mod k = 0 \\<and>\n          (\\<forall>xa.\n              Suc (t * k) \\<le> xa \\<and>\n              xa \\<le> Suc (t * k +\n                            (x - Suc (Suc (t * k)))) \\<longrightarrow>\n              s xa = NoMsg))) \\<or>\n     (\\<exists>x.\n         (x = Suc (t * k) \\<longrightarrow>\n          s (Suc (t * k)) = m \\<and>\n          0 < Suc (t * k) mod k \\<and>\n          (\\<exists>x.\n              (x = Suc (Suc (t * k)) \\<longrightarrow>\n               Suc (Suc (t * k)) mod k = 0) \\<and>\n              (x \\<noteq> Suc (Suc (t * k)) \\<longrightarrow>\n               Suc (Suc (t * k)) \\<le> x \\<and>\n               x mod k = 0 \\<and>\n               (\\<forall>xa.\n                   Suc (Suc (t * k)) \\<le> xa \\<and>\n                   xa \\<le> Suc (Suc (t * k +\n(x - Suc (Suc (Suc (t * k)))))) \\<longrightarrow>\n                   s xa = NoMsg)))) \\<and>\n         (x \\<noteq> Suc (t * k) \\<longrightarrow>\n          Suc (t * k) \\<le> x \\<and>\n          s x = m \\<and>\n          0 < x mod k \\<and>\n          (\\<exists>xa.\n              (xa = Suc x \\<longrightarrow> Suc x mod k = 0) \\<and>\n              (xa \\<noteq> Suc x \\<longrightarrow>\n               Suc x \\<le> xa \\<and>\n               xa mod k = 0 \\<and>\n               (\\<forall>xb.\n                   Suc x \\<le> xb \\<and>\n                   xb \\<le> Suc (x + (xa - Suc (Suc x))) \\<longrightarrow>\n                   s xb = NoMsg))) \\<and>\n          (\\<forall>xa.\n              Suc (t * k) \\<le> xa \\<and>\n              xa \\<le> Suc (t * k +\n                            (x - Suc (Suc (t * k)))) \\<longrightarrow>\n              0 < xa mod k)))\\<rbrakk>\n    \\<Longrightarrow> \\<exists>x.\n                         (x < t * k + k - Suc 0 \\<longrightarrow>\n                          t * k \\<le> x \\<and>\n                          s x = m \\<and>\n                          (\\<forall>xa.\n                              Suc x \\<le> xa \\<and>\n                              xa \\<le> t * k + k - Suc 0 \\<longrightarrow>\n                              s xa = NoMsg)) \\<and>\n                         (\\<not> x < t * k + k - Suc 0 \\<longrightarrow>\n                          t * k \\<le> x \\<and>\n                          x = t * k + k - Suc 0 \\<and> s x = m)", "apply (rule_tac x=\"t * k + k\" in exI)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>s (Suc (t * Suc (Suc 0))) \\<noteq> NoMsg;\n     \\<And>t. event t = (t mod Suc (Suc 0) = 0); t0 = t * Suc (Suc 0);\n     m = s (Suc (t * Suc (Suc 0))); k = Suc (Suc 0)\\<rbrakk>\n    \\<Longrightarrow> t * k + k \\<noteq>\n                      Suc (Suc (t * Suc (Suc 0))) \\<longrightarrow>\n                      Suc (Suc (t * Suc (Suc 0))) \\<le> t * k + k \\<and>\n                      (t * k + k) mod Suc (Suc 0) = 0 \\<and>\n                      (\\<forall>x.\n                          Suc (Suc (t * Suc (Suc 0))) \\<le> x \\<and>\n                          x \\<le> Suc (Suc\n  (t * Suc (Suc 0) +\n   (t * k + k - Suc (Suc (Suc (t * Suc (Suc 0))))))) \\<longrightarrow>\n                          s x = NoMsg)\n 2. \\<And>i.\n       \\<lbrakk>m \\<noteq> NoMsg; \\<And>t. event t = (t mod k = 0);\n        t0 = t * k; Suc 0 < k;\n        i < t * k + k - Suc 0 \\<longrightarrow>\n        t * k \\<le> i \\<and>\n        s i = m \\<and>\n        (\\<forall>x.\n            Suc i \\<le> x \\<and> x \\<le> t * k + k - Suc 0 \\<longrightarrow>\n            s x = NoMsg);\n        \\<not> i < t * k + k - Suc 0 \\<longrightarrow>\n        t * k \\<le> i \\<and> i = t * k + k - Suc 0 \\<and> s i = m;\n        i \\<noteq> t * k; i \\<noteq> Suc (t * k)\\<rbrakk>\n       \\<Longrightarrow> (i = Suc (t * k) \\<longrightarrow>\n                          s (Suc (t * k)) = m \\<and>\n                          0 < Suc (t * k) mod k \\<and>\n                          (\\<exists>x.\n                              (x = Suc (Suc (t * k)) \\<longrightarrow>\n                               Suc (Suc (t * k)) mod k = 0) \\<and>\n                              (x \\<noteq>\n                               Suc (Suc (t * k)) \\<longrightarrow>\n                               Suc (Suc (t * k)) \\<le> x \\<and>\n                               x mod k = 0 \\<and>\n                               (\\<forall>xa.\n                                   Suc (Suc (t * k)) \\<le> xa \\<and>\n                                   xa \\<le> Suc\n       (Suc (t * k + (x - Suc (Suc (Suc (t * k)))))) \\<longrightarrow>\n                                   s xa = NoMsg)))) \\<and>\n                         (i \\<noteq> Suc (t * k) \\<longrightarrow>\n                          Suc (t * k) \\<le> i \\<and>\n                          s i = m \\<and>\n                          0 < i mod k \\<and>\n                          (\\<exists>x.\n                              (x = Suc i \\<longrightarrow>\n                               Suc i mod k = 0) \\<and>\n                              (x \\<noteq> Suc i \\<longrightarrow>\n                               Suc i \\<le> x \\<and>\n                               x mod k = 0 \\<and>\n                               (\\<forall>xa.\n                                   Suc i \\<le> xa \\<and>\n                                   xa \\<le> Suc\n       (i + (x - Suc (Suc i))) \\<longrightarrow>\n                                   s xa = NoMsg))) \\<and>\n                          (\\<forall>x.\n                              Suc (t * k) \\<le> x \\<and>\n                              x \\<le> Suc\n (t * k + (i - Suc (Suc (t * k)))) \\<longrightarrow>\n                              0 < x mod k))\n 3. \\<lbrakk>m \\<noteq> NoMsg; \\<And>t. event t = (t mod k = 0); t0 = t * k;\n     Suc 0 < k;\n     s (t * k) = m \\<and>\n     (\\<exists>x.\n         (x = Suc (t * k) \\<longrightarrow> Suc (t * k) mod k = 0) \\<and>\n         (x \\<noteq> Suc (t * k) \\<longrightarrow>\n          Suc (t * k) \\<le> x \\<and>\n          x mod k = 0 \\<and>\n          (\\<forall>xa.\n              Suc (t * k) \\<le> xa \\<and>\n              xa \\<le> Suc (t * k +\n                            (x - Suc (Suc (t * k)))) \\<longrightarrow>\n              s xa = NoMsg))) \\<or>\n     (\\<exists>x.\n         (x = Suc (t * k) \\<longrightarrow>\n          s (Suc (t * k)) = m \\<and>\n          0 < Suc (t * k) mod k \\<and>\n          (\\<exists>x.\n              (x = Suc (Suc (t * k)) \\<longrightarrow>\n               Suc (Suc (t * k)) mod k = 0) \\<and>\n              (x \\<noteq> Suc (Suc (t * k)) \\<longrightarrow>\n               Suc (Suc (t * k)) \\<le> x \\<and>\n               x mod k = 0 \\<and>\n               (\\<forall>xa.\n                   Suc (Suc (t * k)) \\<le> xa \\<and>\n                   xa \\<le> Suc (Suc (t * k +\n(x - Suc (Suc (Suc (t * k)))))) \\<longrightarrow>\n                   s xa = NoMsg)))) \\<and>\n         (x \\<noteq> Suc (t * k) \\<longrightarrow>\n          Suc (t * k) \\<le> x \\<and>\n          s x = m \\<and>\n          0 < x mod k \\<and>\n          (\\<exists>xa.\n              (xa = Suc x \\<longrightarrow> Suc x mod k = 0) \\<and>\n              (xa \\<noteq> Suc x \\<longrightarrow>\n               Suc x \\<le> xa \\<and>\n               xa mod k = 0 \\<and>\n               (\\<forall>xb.\n                   Suc x \\<le> xb \\<and>\n                   xb \\<le> Suc (x + (xa - Suc (Suc x))) \\<longrightarrow>\n                   s xb = NoMsg))) \\<and>\n          (\\<forall>xa.\n              Suc (t * k) \\<le> xa \\<and>\n              xa \\<le> Suc (t * k +\n                            (x - Suc (Suc (t * k)))) \\<longrightarrow>\n              0 < xa mod k)))\\<rbrakk>\n    \\<Longrightarrow> \\<exists>x.\n                         (x < t * k + k - Suc 0 \\<longrightarrow>\n                          t * k \\<le> x \\<and>\n                          s x = m \\<and>\n                          (\\<forall>xa.\n                              Suc x \\<le> xa \\<and>\n                              xa \\<le> t * k + k - Suc 0 \\<longrightarrow>\n                              s xa = NoMsg)) \\<and>\n                         (\\<not> x < t * k + k - Suc 0 \\<longrightarrow>\n                          t * k \\<le> x \\<and>\n                          x = t * k + k - Suc 0 \\<and> s x = m)", "apply simp"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>i.\n       \\<lbrakk>m \\<noteq> NoMsg; \\<And>t. event t = (t mod k = 0);\n        t0 = t * k; Suc 0 < k;\n        i < t * k + k - Suc 0 \\<longrightarrow>\n        t * k \\<le> i \\<and>\n        s i = m \\<and>\n        (\\<forall>x.\n            Suc i \\<le> x \\<and> x \\<le> t * k + k - Suc 0 \\<longrightarrow>\n            s x = NoMsg);\n        \\<not> i < t * k + k - Suc 0 \\<longrightarrow>\n        t * k \\<le> i \\<and> i = t * k + k - Suc 0 \\<and> s i = m;\n        i \\<noteq> t * k; i \\<noteq> Suc (t * k)\\<rbrakk>\n       \\<Longrightarrow> (i = Suc (t * k) \\<longrightarrow>\n                          s (Suc (t * k)) = m \\<and>\n                          0 < Suc (t * k) mod k \\<and>\n                          (\\<exists>x.\n                              (x = Suc (Suc (t * k)) \\<longrightarrow>\n                               Suc (Suc (t * k)) mod k = 0) \\<and>\n                              (x \\<noteq>\n                               Suc (Suc (t * k)) \\<longrightarrow>\n                               Suc (Suc (t * k)) \\<le> x \\<and>\n                               x mod k = 0 \\<and>\n                               (\\<forall>xa.\n                                   Suc (Suc (t * k)) \\<le> xa \\<and>\n                                   xa \\<le> Suc\n       (Suc (t * k + (x - Suc (Suc (Suc (t * k)))))) \\<longrightarrow>\n                                   s xa = NoMsg)))) \\<and>\n                         (i \\<noteq> Suc (t * k) \\<longrightarrow>\n                          Suc (t * k) \\<le> i \\<and>\n                          s i = m \\<and>\n                          0 < i mod k \\<and>\n                          (\\<exists>x.\n                              (x = Suc i \\<longrightarrow>\n                               Suc i mod k = 0) \\<and>\n                              (x \\<noteq> Suc i \\<longrightarrow>\n                               Suc i \\<le> x \\<and>\n                               x mod k = 0 \\<and>\n                               (\\<forall>xa.\n                                   Suc i \\<le> xa \\<and>\n                                   xa \\<le> Suc\n       (i + (x - Suc (Suc i))) \\<longrightarrow>\n                                   s xa = NoMsg))) \\<and>\n                          (\\<forall>x.\n                              Suc (t * k) \\<le> x \\<and>\n                              x \\<le> Suc\n (t * k + (i - Suc (Suc (t * k)))) \\<longrightarrow>\n                              0 < x mod k))\n 2. \\<lbrakk>m \\<noteq> NoMsg; \\<And>t. event t = (t mod k = 0); t0 = t * k;\n     Suc 0 < k;\n     s (t * k) = m \\<and>\n     (\\<exists>x.\n         (x = Suc (t * k) \\<longrightarrow> Suc (t * k) mod k = 0) \\<and>\n         (x \\<noteq> Suc (t * k) \\<longrightarrow>\n          Suc (t * k) \\<le> x \\<and>\n          x mod k = 0 \\<and>\n          (\\<forall>xa.\n              Suc (t * k) \\<le> xa \\<and>\n              xa \\<le> Suc (t * k +\n                            (x - Suc (Suc (t * k)))) \\<longrightarrow>\n              s xa = NoMsg))) \\<or>\n     (\\<exists>x.\n         (x = Suc (t * k) \\<longrightarrow>\n          s (Suc (t * k)) = m \\<and>\n          0 < Suc (t * k) mod k \\<and>\n          (\\<exists>x.\n              (x = Suc (Suc (t * k)) \\<longrightarrow>\n               Suc (Suc (t * k)) mod k = 0) \\<and>\n              (x \\<noteq> Suc (Suc (t * k)) \\<longrightarrow>\n               Suc (Suc (t * k)) \\<le> x \\<and>\n               x mod k = 0 \\<and>\n               (\\<forall>xa.\n                   Suc (Suc (t * k)) \\<le> xa \\<and>\n                   xa \\<le> Suc (Suc (t * k +\n(x - Suc (Suc (Suc (t * k)))))) \\<longrightarrow>\n                   s xa = NoMsg)))) \\<and>\n         (x \\<noteq> Suc (t * k) \\<longrightarrow>\n          Suc (t * k) \\<le> x \\<and>\n          s x = m \\<and>\n          0 < x mod k \\<and>\n          (\\<exists>xa.\n              (xa = Suc x \\<longrightarrow> Suc x mod k = 0) \\<and>\n              (xa \\<noteq> Suc x \\<longrightarrow>\n               Suc x \\<le> xa \\<and>\n               xa mod k = 0 \\<and>\n               (\\<forall>xb.\n                   Suc x \\<le> xb \\<and>\n                   xb \\<le> Suc (x + (xa - Suc (Suc x))) \\<longrightarrow>\n                   s xb = NoMsg))) \\<and>\n          (\\<forall>xa.\n              Suc (t * k) \\<le> xa \\<and>\n              xa \\<le> Suc (t * k +\n                            (x - Suc (Suc (t * k)))) \\<longrightarrow>\n              0 < xa mod k)))\\<rbrakk>\n    \\<Longrightarrow> \\<exists>x.\n                         (x < t * k + k - Suc 0 \\<longrightarrow>\n                          t * k \\<le> x \\<and>\n                          s x = m \\<and>\n                          (\\<forall>xa.\n                              Suc x \\<le> xa \\<and>\n                              xa \\<le> t * k + k - Suc 0 \\<longrightarrow>\n                              s xa = NoMsg)) \\<and>\n                         (\\<not> x < t * k + k - Suc 0 \\<longrightarrow>\n                          t * k \\<le> x \\<and>\n                          x = t * k + k - Suc 0 \\<and> s x = m)", "apply simp"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>i.\n       \\<lbrakk>m \\<noteq> NoMsg; \\<And>t. event t = (t mod k = 0);\n        t0 = t * k; Suc 0 < k;\n        i < t * k + k - Suc 0 \\<longrightarrow>\n        t * k \\<le> i \\<and>\n        s i = m \\<and>\n        (\\<forall>x.\n            Suc i \\<le> x \\<and> x \\<le> t * k + k - Suc 0 \\<longrightarrow>\n            s x = NoMsg);\n        \\<not> i < t * k + k - Suc 0 \\<longrightarrow>\n        t * k \\<le> i \\<and> i = t * k + k - Suc 0 \\<and> s i = m;\n        i \\<noteq> t * k; i \\<noteq> Suc (t * k)\\<rbrakk>\n       \\<Longrightarrow> Suc (t * k) \\<le> i \\<and>\n                         s i = m \\<and>\n                         0 < i mod k \\<and>\n                         (\\<exists>x.\n                             (x = Suc i \\<longrightarrow>\n                              Suc i mod k = 0) \\<and>\n                             (x \\<noteq> Suc i \\<longrightarrow>\n                              Suc i \\<le> x \\<and>\n                              x mod k = 0 \\<and>\n                              (\\<forall>xa.\n                                  Suc i \\<le> xa \\<and>\n                                  xa \\<le> Suc\n      (i + (x - Suc (Suc i))) \\<longrightarrow>\n                                  s xa = NoMsg))) \\<and>\n                         (\\<forall>x.\n                             Suc (t * k) \\<le> x \\<and>\n                             x \\<le> Suc\n(t * k + (i - Suc (Suc (t * k)))) \\<longrightarrow>\n                             0 < x mod k)\n 2. \\<lbrakk>m \\<noteq> NoMsg; \\<And>t. event t = (t mod k = 0); t0 = t * k;\n     Suc 0 < k;\n     s (t * k) = m \\<and>\n     (\\<exists>x.\n         (x = Suc (t * k) \\<longrightarrow> Suc (t * k) mod k = 0) \\<and>\n         (x \\<noteq> Suc (t * k) \\<longrightarrow>\n          Suc (t * k) \\<le> x \\<and>\n          x mod k = 0 \\<and>\n          (\\<forall>xa.\n              Suc (t * k) \\<le> xa \\<and>\n              xa \\<le> Suc (t * k +\n                            (x - Suc (Suc (t * k)))) \\<longrightarrow>\n              s xa = NoMsg))) \\<or>\n     (\\<exists>x.\n         (x = Suc (t * k) \\<longrightarrow>\n          s (Suc (t * k)) = m \\<and>\n          0 < Suc (t * k) mod k \\<and>\n          (\\<exists>x.\n              (x = Suc (Suc (t * k)) \\<longrightarrow>\n               Suc (Suc (t * k)) mod k = 0) \\<and>\n              (x \\<noteq> Suc (Suc (t * k)) \\<longrightarrow>\n               Suc (Suc (t * k)) \\<le> x \\<and>\n               x mod k = 0 \\<and>\n               (\\<forall>xa.\n                   Suc (Suc (t * k)) \\<le> xa \\<and>\n                   xa \\<le> Suc (Suc (t * k +\n(x - Suc (Suc (Suc (t * k)))))) \\<longrightarrow>\n                   s xa = NoMsg)))) \\<and>\n         (x \\<noteq> Suc (t * k) \\<longrightarrow>\n          Suc (t * k) \\<le> x \\<and>\n          s x = m \\<and>\n          0 < x mod k \\<and>\n          (\\<exists>xa.\n              (xa = Suc x \\<longrightarrow> Suc x mod k = 0) \\<and>\n              (xa \\<noteq> Suc x \\<longrightarrow>\n               Suc x \\<le> xa \\<and>\n               xa mod k = 0 \\<and>\n               (\\<forall>xb.\n                   Suc x \\<le> xb \\<and>\n                   xb \\<le> Suc (x + (xa - Suc (Suc x))) \\<longrightarrow>\n                   s xb = NoMsg))) \\<and>\n          (\\<forall>xa.\n              Suc (t * k) \\<le> xa \\<and>\n              xa \\<le> Suc (t * k +\n                            (x - Suc (Suc (t * k)))) \\<longrightarrow>\n              0 < xa mod k)))\\<rbrakk>\n    \\<Longrightarrow> \\<exists>x.\n                         (x < t * k + k - Suc 0 \\<longrightarrow>\n                          t * k \\<le> x \\<and>\n                          s x = m \\<and>\n                          (\\<forall>xa.\n                              Suc x \\<le> xa \\<and>\n                              xa \\<le> t * k + k - Suc 0 \\<longrightarrow>\n                              s xa = NoMsg)) \\<and>\n                         (\\<not> x < t * k + k - Suc 0 \\<longrightarrow>\n                          t * k \\<le> x \\<and>\n                          x = t * k + k - Suc 0 \\<and> s x = m)", "apply (subgoal_tac \"Suc (t * k) \\<le> i\")"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>i.\n       \\<lbrakk>m \\<noteq> NoMsg; \\<And>t. event t = (t mod k = 0);\n        t0 = t * k; Suc 0 < k;\n        i < t * k + k - Suc 0 \\<longrightarrow>\n        t * k \\<le> i \\<and>\n        s i = m \\<and>\n        (\\<forall>x.\n            Suc i \\<le> x \\<and> x \\<le> t * k + k - Suc 0 \\<longrightarrow>\n            s x = NoMsg);\n        \\<not> i < t * k + k - Suc 0 \\<longrightarrow>\n        t * k \\<le> i \\<and> i = t * k + k - Suc 0 \\<and> s i = m;\n        i \\<noteq> t * k; i \\<noteq> Suc (t * k);\n        Suc (t * k) \\<le> i\\<rbrakk>\n       \\<Longrightarrow> Suc (t * k) \\<le> i \\<and>\n                         s i = m \\<and>\n                         0 < i mod k \\<and>\n                         (\\<exists>x.\n                             (x = Suc i \\<longrightarrow>\n                              Suc i mod k = 0) \\<and>\n                             (x \\<noteq> Suc i \\<longrightarrow>\n                              Suc i \\<le> x \\<and>\n                              x mod k = 0 \\<and>\n                              (\\<forall>xa.\n                                  Suc i \\<le> xa \\<and>\n                                  xa \\<le> Suc\n      (i + (x - Suc (Suc i))) \\<longrightarrow>\n                                  s xa = NoMsg))) \\<and>\n                         (\\<forall>x.\n                             Suc (t * k) \\<le> x \\<and>\n                             x \\<le> Suc\n(t * k + (i - Suc (Suc (t * k)))) \\<longrightarrow>\n                             0 < x mod k)\n 2. \\<And>i.\n       \\<lbrakk>m \\<noteq> NoMsg; \\<And>t. event t = (t mod k = 0);\n        t0 = t * k; Suc 0 < k;\n        i < t * k + k - Suc 0 \\<longrightarrow>\n        t * k \\<le> i \\<and>\n        s i = m \\<and>\n        (\\<forall>x.\n            Suc i \\<le> x \\<and> x \\<le> t * k + k - Suc 0 \\<longrightarrow>\n            s x = NoMsg);\n        \\<not> i < t * k + k - Suc 0 \\<longrightarrow>\n        t * k \\<le> i \\<and> i = t * k + k - Suc 0 \\<and> s i = m;\n        i \\<noteq> t * k; i \\<noteq> Suc (t * k)\\<rbrakk>\n       \\<Longrightarrow> Suc (t * k) \\<le> i\n 3. \\<lbrakk>m \\<noteq> NoMsg; \\<And>t. event t = (t mod k = 0); t0 = t * k;\n     Suc 0 < k;\n     s (t * k) = m \\<and>\n     (\\<exists>x.\n         (x = Suc (t * k) \\<longrightarrow> Suc (t * k) mod k = 0) \\<and>\n         (x \\<noteq> Suc (t * k) \\<longrightarrow>\n          Suc (t * k) \\<le> x \\<and>\n          x mod k = 0 \\<and>\n          (\\<forall>xa.\n              Suc (t * k) \\<le> xa \\<and>\n              xa \\<le> Suc (t * k +\n                            (x - Suc (Suc (t * k)))) \\<longrightarrow>\n              s xa = NoMsg))) \\<or>\n     (\\<exists>x.\n         (x = Suc (t * k) \\<longrightarrow>\n          s (Suc (t * k)) = m \\<and>\n          0 < Suc (t * k) mod k \\<and>\n          (\\<exists>x.\n              (x = Suc (Suc (t * k)) \\<longrightarrow>\n               Suc (Suc (t * k)) mod k = 0) \\<and>\n              (x \\<noteq> Suc (Suc (t * k)) \\<longrightarrow>\n               Suc (Suc (t * k)) \\<le> x \\<and>\n               x mod k = 0 \\<and>\n               (\\<forall>xa.\n                   Suc (Suc (t * k)) \\<le> xa \\<and>\n                   xa \\<le> Suc (Suc (t * k +\n(x - Suc (Suc (Suc (t * k)))))) \\<longrightarrow>\n                   s xa = NoMsg)))) \\<and>\n         (x \\<noteq> Suc (t * k) \\<longrightarrow>\n          Suc (t * k) \\<le> x \\<and>\n          s x = m \\<and>\n          0 < x mod k \\<and>\n          (\\<exists>xa.\n              (xa = Suc x \\<longrightarrow> Suc x mod k = 0) \\<and>\n              (xa \\<noteq> Suc x \\<longrightarrow>\n               Suc x \\<le> xa \\<and>\n               xa mod k = 0 \\<and>\n               (\\<forall>xb.\n                   Suc x \\<le> xb \\<and>\n                   xb \\<le> Suc (x + (xa - Suc (Suc x))) \\<longrightarrow>\n                   s xb = NoMsg))) \\<and>\n          (\\<forall>xa.\n              Suc (t * k) \\<le> xa \\<and>\n              xa \\<le> Suc (t * k +\n                            (x - Suc (Suc (t * k)))) \\<longrightarrow>\n              0 < xa mod k)))\\<rbrakk>\n    \\<Longrightarrow> \\<exists>x.\n                         (x < t * k + k - Suc 0 \\<longrightarrow>\n                          t * k \\<le> x \\<and>\n                          s x = m \\<and>\n                          (\\<forall>xa.\n                              Suc x \\<le> xa \\<and>\n                              xa \\<le> t * k + k - Suc 0 \\<longrightarrow>\n                              s xa = NoMsg)) \\<and>\n                         (\\<not> x < t * k + k - Suc 0 \\<longrightarrow>\n                          t * k \\<le> x \\<and>\n                          x = t * k + k - Suc 0 \\<and> s x = m)", "prefer 2"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>i.\n       \\<lbrakk>m \\<noteq> NoMsg; \\<And>t. event t = (t mod k = 0);\n        t0 = t * k; Suc 0 < k;\n        i < t * k + k - Suc 0 \\<longrightarrow>\n        t * k \\<le> i \\<and>\n        s i = m \\<and>\n        (\\<forall>x.\n            Suc i \\<le> x \\<and> x \\<le> t * k + k - Suc 0 \\<longrightarrow>\n            s x = NoMsg);\n        \\<not> i < t * k + k - Suc 0 \\<longrightarrow>\n        t * k \\<le> i \\<and> i = t * k + k - Suc 0 \\<and> s i = m;\n        i \\<noteq> t * k; i \\<noteq> Suc (t * k)\\<rbrakk>\n       \\<Longrightarrow> Suc (t * k) \\<le> i\n 2. \\<And>i.\n       \\<lbrakk>m \\<noteq> NoMsg; \\<And>t. event t = (t mod k = 0);\n        t0 = t * k; Suc 0 < k;\n        i < t * k + k - Suc 0 \\<longrightarrow>\n        t * k \\<le> i \\<and>\n        s i = m \\<and>\n        (\\<forall>x.\n            Suc i \\<le> x \\<and> x \\<le> t * k + k - Suc 0 \\<longrightarrow>\n            s x = NoMsg);\n        \\<not> i < t * k + k - Suc 0 \\<longrightarrow>\n        t * k \\<le> i \\<and> i = t * k + k - Suc 0 \\<and> s i = m;\n        i \\<noteq> t * k; i \\<noteq> Suc (t * k);\n        Suc (t * k) \\<le> i\\<rbrakk>\n       \\<Longrightarrow> Suc (t * k) \\<le> i \\<and>\n                         s i = m \\<and>\n                         0 < i mod k \\<and>\n                         (\\<exists>x.\n                             (x = Suc i \\<longrightarrow>\n                              Suc i mod k = 0) \\<and>\n                             (x \\<noteq> Suc i \\<longrightarrow>\n                              Suc i \\<le> x \\<and>\n                              x mod k = 0 \\<and>\n                              (\\<forall>xa.\n                                  Suc i \\<le> xa \\<and>\n                                  xa \\<le> Suc\n      (i + (x - Suc (Suc i))) \\<longrightarrow>\n                                  s xa = NoMsg))) \\<and>\n                         (\\<forall>x.\n                             Suc (t * k) \\<le> x \\<and>\n                             x \\<le> Suc\n(t * k + (i - Suc (Suc (t * k)))) \\<longrightarrow>\n                             0 < x mod k)\n 3. \\<lbrakk>m \\<noteq> NoMsg; \\<And>t. event t = (t mod k = 0); t0 = t * k;\n     Suc 0 < k;\n     s (t * k) = m \\<and>\n     (\\<exists>x.\n         (x = Suc (t * k) \\<longrightarrow> Suc (t * k) mod k = 0) \\<and>\n         (x \\<noteq> Suc (t * k) \\<longrightarrow>\n          Suc (t * k) \\<le> x \\<and>\n          x mod k = 0 \\<and>\n          (\\<forall>xa.\n              Suc (t * k) \\<le> xa \\<and>\n              xa \\<le> Suc (t * k +\n                            (x - Suc (Suc (t * k)))) \\<longrightarrow>\n              s xa = NoMsg))) \\<or>\n     (\\<exists>x.\n         (x = Suc (t * k) \\<longrightarrow>\n          s (Suc (t * k)) = m \\<and>\n          0 < Suc (t * k) mod k \\<and>\n          (\\<exists>x.\n              (x = Suc (Suc (t * k)) \\<longrightarrow>\n               Suc (Suc (t * k)) mod k = 0) \\<and>\n              (x \\<noteq> Suc (Suc (t * k)) \\<longrightarrow>\n               Suc (Suc (t * k)) \\<le> x \\<and>\n               x mod k = 0 \\<and>\n               (\\<forall>xa.\n                   Suc (Suc (t * k)) \\<le> xa \\<and>\n                   xa \\<le> Suc (Suc (t * k +\n(x - Suc (Suc (Suc (t * k)))))) \\<longrightarrow>\n                   s xa = NoMsg)))) \\<and>\n         (x \\<noteq> Suc (t * k) \\<longrightarrow>\n          Suc (t * k) \\<le> x \\<and>\n          s x = m \\<and>\n          0 < x mod k \\<and>\n          (\\<exists>xa.\n              (xa = Suc x \\<longrightarrow> Suc x mod k = 0) \\<and>\n              (xa \\<noteq> Suc x \\<longrightarrow>\n               Suc x \\<le> xa \\<and>\n               xa mod k = 0 \\<and>\n               (\\<forall>xb.\n                   Suc x \\<le> xb \\<and>\n                   xb \\<le> Suc (x + (xa - Suc (Suc x))) \\<longrightarrow>\n                   s xb = NoMsg))) \\<and>\n          (\\<forall>xa.\n              Suc (t * k) \\<le> xa \\<and>\n              xa \\<le> Suc (t * k +\n                            (x - Suc (Suc (t * k)))) \\<longrightarrow>\n              0 < xa mod k)))\\<rbrakk>\n    \\<Longrightarrow> \\<exists>x.\n                         (x < t * k + k - Suc 0 \\<longrightarrow>\n                          t * k \\<le> x \\<and>\n                          s x = m \\<and>\n                          (\\<forall>xa.\n                              Suc x \\<le> xa \\<and>\n                              xa \\<le> t * k + k - Suc 0 \\<longrightarrow>\n                              s xa = NoMsg)) \\<and>\n                         (\\<not> x < t * k + k - Suc 0 \\<longrightarrow>\n                          t * k \\<le> x \\<and>\n                          x = t * k + k - Suc 0 \\<and> s x = m)", "apply (rule ccontr, simp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>i.\n       \\<lbrakk>m \\<noteq> NoMsg; \\<And>t. event t = (t mod k = 0);\n        t0 = t * k; Suc 0 < k;\n        i < t * k + k - Suc 0 \\<longrightarrow>\n        t * k \\<le> i \\<and>\n        s i = m \\<and>\n        (\\<forall>x.\n            Suc i \\<le> x \\<and> x \\<le> t * k + k - Suc 0 \\<longrightarrow>\n            s x = NoMsg);\n        \\<not> i < t * k + k - Suc 0 \\<longrightarrow>\n        t * k \\<le> i \\<and> i = t * k + k - Suc 0 \\<and> s i = m;\n        i \\<noteq> t * k; i \\<noteq> Suc (t * k);\n        Suc (t * k) \\<le> i\\<rbrakk>\n       \\<Longrightarrow> Suc (t * k) \\<le> i \\<and>\n                         s i = m \\<and>\n                         0 < i mod k \\<and>\n                         (\\<exists>x.\n                             (x = Suc i \\<longrightarrow>\n                              Suc i mod k = 0) \\<and>\n                             (x \\<noteq> Suc i \\<longrightarrow>\n                              Suc i \\<le> x \\<and>\n                              x mod k = 0 \\<and>\n                              (\\<forall>xa.\n                                  Suc i \\<le> xa \\<and>\n                                  xa \\<le> Suc\n      (i + (x - Suc (Suc i))) \\<longrightarrow>\n                                  s xa = NoMsg))) \\<and>\n                         (\\<forall>x.\n                             Suc (t * k) \\<le> x \\<and>\n                             x \\<le> Suc\n(t * k + (i - Suc (Suc (t * k)))) \\<longrightarrow>\n                             0 < x mod k)\n 2. \\<lbrakk>m \\<noteq> NoMsg; \\<And>t. event t = (t mod k = 0); t0 = t * k;\n     Suc 0 < k;\n     s (t * k) = m \\<and>\n     (\\<exists>x.\n         (x = Suc (t * k) \\<longrightarrow> Suc (t * k) mod k = 0) \\<and>\n         (x \\<noteq> Suc (t * k) \\<longrightarrow>\n          Suc (t * k) \\<le> x \\<and>\n          x mod k = 0 \\<and>\n          (\\<forall>xa.\n              Suc (t * k) \\<le> xa \\<and>\n              xa \\<le> Suc (t * k +\n                            (x - Suc (Suc (t * k)))) \\<longrightarrow>\n              s xa = NoMsg))) \\<or>\n     (\\<exists>x.\n         (x = Suc (t * k) \\<longrightarrow>\n          s (Suc (t * k)) = m \\<and>\n          0 < Suc (t * k) mod k \\<and>\n          (\\<exists>x.\n              (x = Suc (Suc (t * k)) \\<longrightarrow>\n               Suc (Suc (t * k)) mod k = 0) \\<and>\n              (x \\<noteq> Suc (Suc (t * k)) \\<longrightarrow>\n               Suc (Suc (t * k)) \\<le> x \\<and>\n               x mod k = 0 \\<and>\n               (\\<forall>xa.\n                   Suc (Suc (t * k)) \\<le> xa \\<and>\n                   xa \\<le> Suc (Suc (t * k +\n(x - Suc (Suc (Suc (t * k)))))) \\<longrightarrow>\n                   s xa = NoMsg)))) \\<and>\n         (x \\<noteq> Suc (t * k) \\<longrightarrow>\n          Suc (t * k) \\<le> x \\<and>\n          s x = m \\<and>\n          0 < x mod k \\<and>\n          (\\<exists>xa.\n              (xa = Suc x \\<longrightarrow> Suc x mod k = 0) \\<and>\n              (xa \\<noteq> Suc x \\<longrightarrow>\n               Suc x \\<le> xa \\<and>\n               xa mod k = 0 \\<and>\n               (\\<forall>xb.\n                   Suc x \\<le> xb \\<and>\n                   xb \\<le> Suc (x + (xa - Suc (Suc x))) \\<longrightarrow>\n                   s xb = NoMsg))) \\<and>\n          (\\<forall>xa.\n              Suc (t * k) \\<le> xa \\<and>\n              xa \\<le> Suc (t * k +\n                            (x - Suc (Suc (t * k)))) \\<longrightarrow>\n              0 < xa mod k)))\\<rbrakk>\n    \\<Longrightarrow> \\<exists>x.\n                         (x < t * k + k - Suc 0 \\<longrightarrow>\n                          t * k \\<le> x \\<and>\n                          s x = m \\<and>\n                          (\\<forall>xa.\n                              Suc x \\<le> xa \\<and>\n                              xa \\<le> t * k + k - Suc 0 \\<longrightarrow>\n                              s xa = NoMsg)) \\<and>\n                         (\\<not> x < t * k + k - Suc 0 \\<longrightarrow>\n                          t * k \\<le> x \\<and>\n                          x = t * k + k - Suc 0 \\<and> s x = m)", "apply simp"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>i.\n       \\<lbrakk>m \\<noteq> NoMsg; \\<And>t. event t = (t mod k = 0);\n        t0 = t * k; Suc 0 < k;\n        i < t * k + k - Suc 0 \\<longrightarrow>\n        s i = m \\<and>\n        (\\<forall>x.\n            Suc i \\<le> x \\<and> x \\<le> t * k + k - Suc 0 \\<longrightarrow>\n            s x = NoMsg);\n        \\<not> i < t * k + k - Suc 0 \\<longrightarrow>\n        i = t * k + k - Suc 0 \\<and> s i = m;\n        i \\<noteq> Suc (t * k); Suc (t * k) \\<le> i\\<rbrakk>\n       \\<Longrightarrow> s i = m \\<and>\n                         0 < i mod k \\<and>\n                         (\\<exists>x.\n                             (x = Suc i \\<longrightarrow>\n                              Suc i mod k = 0) \\<and>\n                             (x \\<noteq> Suc i \\<longrightarrow>\n                              Suc i \\<le> x \\<and>\n                              x mod k = 0 \\<and>\n                              (\\<forall>xa.\n                                  Suc i \\<le> xa \\<and>\n                                  xa \\<le> Suc\n      (i + (x - Suc (Suc i))) \\<longrightarrow>\n                                  s xa = NoMsg))) \\<and>\n                         (\\<forall>x.\n                             Suc (t * k) \\<le> x \\<and>\n                             x \\<le> Suc (i - 2) \\<longrightarrow>\n                             0 < x mod k)\n 2. \\<lbrakk>m \\<noteq> NoMsg; \\<And>t. event t = (t mod k = 0); t0 = t * k;\n     Suc 0 < k;\n     s (t * k) = m \\<and>\n     (\\<exists>x.\n         (x = Suc (t * k) \\<longrightarrow> Suc (t * k) mod k = 0) \\<and>\n         (x \\<noteq> Suc (t * k) \\<longrightarrow>\n          Suc (t * k) \\<le> x \\<and>\n          x mod k = 0 \\<and>\n          (\\<forall>xa.\n              Suc (t * k) \\<le> xa \\<and>\n              xa \\<le> Suc (t * k +\n                            (x - Suc (Suc (t * k)))) \\<longrightarrow>\n              s xa = NoMsg))) \\<or>\n     (\\<exists>x.\n         (x = Suc (t * k) \\<longrightarrow>\n          s (Suc (t * k)) = m \\<and>\n          0 < Suc (t * k) mod k \\<and>\n          (\\<exists>x.\n              (x = Suc (Suc (t * k)) \\<longrightarrow>\n               Suc (Suc (t * k)) mod k = 0) \\<and>\n              (x \\<noteq> Suc (Suc (t * k)) \\<longrightarrow>\n               Suc (Suc (t * k)) \\<le> x \\<and>\n               x mod k = 0 \\<and>\n               (\\<forall>xa.\n                   Suc (Suc (t * k)) \\<le> xa \\<and>\n                   xa \\<le> Suc (Suc (t * k +\n(x - Suc (Suc (Suc (t * k)))))) \\<longrightarrow>\n                   s xa = NoMsg)))) \\<and>\n         (x \\<noteq> Suc (t * k) \\<longrightarrow>\n          Suc (t * k) \\<le> x \\<and>\n          s x = m \\<and>\n          0 < x mod k \\<and>\n          (\\<exists>xa.\n              (xa = Suc x \\<longrightarrow> Suc x mod k = 0) \\<and>\n              (xa \\<noteq> Suc x \\<longrightarrow>\n               Suc x \\<le> xa \\<and>\n               xa mod k = 0 \\<and>\n               (\\<forall>xb.\n                   Suc x \\<le> xb \\<and>\n                   xb \\<le> Suc (x + (xa - Suc (Suc x))) \\<longrightarrow>\n                   s xb = NoMsg))) \\<and>\n          (\\<forall>xa.\n              Suc (t * k) \\<le> xa \\<and>\n              xa \\<le> Suc (t * k +\n                            (x - Suc (Suc (t * k)))) \\<longrightarrow>\n              0 < xa mod k)))\\<rbrakk>\n    \\<Longrightarrow> \\<exists>x.\n                         (x < t * k + k - Suc 0 \\<longrightarrow>\n                          t * k \\<le> x \\<and>\n                          s x = m \\<and>\n                          (\\<forall>xa.\n                              Suc x \\<le> xa \\<and>\n                              xa \\<le> t * k + k - Suc 0 \\<longrightarrow>\n                              s xa = NoMsg)) \\<and>\n                         (\\<not> x < t * k + k - Suc 0 \\<longrightarrow>\n                          t * k \\<le> x \\<and>\n                          x = t * k + k - Suc 0 \\<and> s x = m)", "apply (case_tac \"i < t * k + k - Suc 0\")"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>i.\n       \\<lbrakk>m \\<noteq> NoMsg; \\<And>t. event t = (t mod k = 0);\n        t0 = t * k; Suc 0 < k;\n        i < t * k + k - Suc 0 \\<longrightarrow>\n        s i = m \\<and>\n        (\\<forall>x.\n            Suc i \\<le> x \\<and> x \\<le> t * k + k - Suc 0 \\<longrightarrow>\n            s x = NoMsg);\n        \\<not> i < t * k + k - Suc 0 \\<longrightarrow>\n        i = t * k + k - Suc 0 \\<and> s i = m;\n        i \\<noteq> Suc (t * k); Suc (t * k) \\<le> i;\n        i < t * k + k - Suc 0\\<rbrakk>\n       \\<Longrightarrow> s i = m \\<and>\n                         0 < i mod k \\<and>\n                         (\\<exists>x.\n                             (x = Suc i \\<longrightarrow>\n                              Suc i mod k = 0) \\<and>\n                             (x \\<noteq> Suc i \\<longrightarrow>\n                              Suc i \\<le> x \\<and>\n                              x mod k = 0 \\<and>\n                              (\\<forall>xa.\n                                  Suc i \\<le> xa \\<and>\n                                  xa \\<le> Suc\n      (i + (x - Suc (Suc i))) \\<longrightarrow>\n                                  s xa = NoMsg))) \\<and>\n                         (\\<forall>x.\n                             Suc (t * k) \\<le> x \\<and>\n                             x \\<le> Suc (i - 2) \\<longrightarrow>\n                             0 < x mod k)\n 2. \\<And>i.\n       \\<lbrakk>m \\<noteq> NoMsg; \\<And>t. event t = (t mod k = 0);\n        t0 = t * k; Suc 0 < k;\n        i < t * k + k - Suc 0 \\<longrightarrow>\n        s i = m \\<and>\n        (\\<forall>x.\n            Suc i \\<le> x \\<and> x \\<le> t * k + k - Suc 0 \\<longrightarrow>\n            s x = NoMsg);\n        \\<not> i < t * k + k - Suc 0 \\<longrightarrow>\n        i = t * k + k - Suc 0 \\<and> s i = m;\n        i \\<noteq> Suc (t * k); Suc (t * k) \\<le> i;\n        \\<not> i < t * k + k - Suc 0\\<rbrakk>\n       \\<Longrightarrow> s i = m \\<and>\n                         0 < i mod k \\<and>\n                         (\\<exists>x.\n                             (x = Suc i \\<longrightarrow>\n                              Suc i mod k = 0) \\<and>\n                             (x \\<noteq> Suc i \\<longrightarrow>\n                              Suc i \\<le> x \\<and>\n                              x mod k = 0 \\<and>\n                              (\\<forall>xa.\n                                  Suc i \\<le> xa \\<and>\n                                  xa \\<le> Suc\n      (i + (x - Suc (Suc i))) \\<longrightarrow>\n                                  s xa = NoMsg))) \\<and>\n                         (\\<forall>x.\n                             Suc (t * k) \\<le> x \\<and>\n                             x \\<le> Suc (i - 2) \\<longrightarrow>\n                             0 < x mod k)\n 3. \\<lbrakk>m \\<noteq> NoMsg; \\<And>t. event t = (t mod k = 0); t0 = t * k;\n     Suc 0 < k;\n     s (t * k) = m \\<and>\n     (\\<exists>x.\n         (x = Suc (t * k) \\<longrightarrow> Suc (t * k) mod k = 0) \\<and>\n         (x \\<noteq> Suc (t * k) \\<longrightarrow>\n          Suc (t * k) \\<le> x \\<and>\n          x mod k = 0 \\<and>\n          (\\<forall>xa.\n              Suc (t * k) \\<le> xa \\<and>\n              xa \\<le> Suc (t * k +\n                            (x - Suc (Suc (t * k)))) \\<longrightarrow>\n              s xa = NoMsg))) \\<or>\n     (\\<exists>x.\n         (x = Suc (t * k) \\<longrightarrow>\n          s (Suc (t * k)) = m \\<and>\n          0 < Suc (t * k) mod k \\<and>\n          (\\<exists>x.\n              (x = Suc (Suc (t * k)) \\<longrightarrow>\n               Suc (Suc (t * k)) mod k = 0) \\<and>\n              (x \\<noteq> Suc (Suc (t * k)) \\<longrightarrow>\n               Suc (Suc (t * k)) \\<le> x \\<and>\n               x mod k = 0 \\<and>\n               (\\<forall>xa.\n                   Suc (Suc (t * k)) \\<le> xa \\<and>\n                   xa \\<le> Suc (Suc (t * k +\n(x - Suc (Suc (Suc (t * k)))))) \\<longrightarrow>\n                   s xa = NoMsg)))) \\<and>\n         (x \\<noteq> Suc (t * k) \\<longrightarrow>\n          Suc (t * k) \\<le> x \\<and>\n          s x = m \\<and>\n          0 < x mod k \\<and>\n          (\\<exists>xa.\n              (xa = Suc x \\<longrightarrow> Suc x mod k = 0) \\<and>\n              (xa \\<noteq> Suc x \\<longrightarrow>\n               Suc x \\<le> xa \\<and>\n               xa mod k = 0 \\<and>\n               (\\<forall>xb.\n                   Suc x \\<le> xb \\<and>\n                   xb \\<le> Suc (x + (xa - Suc (Suc x))) \\<longrightarrow>\n                   s xb = NoMsg))) \\<and>\n          (\\<forall>xa.\n              Suc (t * k) \\<le> xa \\<and>\n              xa \\<le> Suc (t * k +\n                            (x - Suc (Suc (t * k)))) \\<longrightarrow>\n              0 < xa mod k)))\\<rbrakk>\n    \\<Longrightarrow> \\<exists>x.\n                         (x < t * k + k - Suc 0 \\<longrightarrow>\n                          t * k \\<le> x \\<and>\n                          s x = m \\<and>\n                          (\\<forall>xa.\n                              Suc x \\<le> xa \\<and>\n                              xa \\<le> t * k + k - Suc 0 \\<longrightarrow>\n                              s xa = NoMsg)) \\<and>\n                         (\\<not> x < t * k + k - Suc 0 \\<longrightarrow>\n                          t * k \\<le> x \\<and>\n                          x = t * k + k - Suc 0 \\<and> s x = m)", "apply clarsimp"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>i.\n       \\<lbrakk>s i \\<noteq> NoMsg; \\<And>t. event t = (t mod k = 0);\n        t0 = t * k; Suc 0 < k; i \\<noteq> Suc (t * k); Suc (t * k) \\<le> i;\n        i < t * k + k - Suc 0;\n        \\<forall>x.\n           Suc i \\<le> x \\<and> x \\<le> t * k + k - Suc 0 \\<longrightarrow>\n           s x = NoMsg;\n        m = s i\\<rbrakk>\n       \\<Longrightarrow> 0 < i mod k \\<and>\n                         (\\<exists>x.\n                             (x = Suc i \\<longrightarrow>\n                              Suc i mod k = 0) \\<and>\n                             (x \\<noteq> Suc i \\<longrightarrow>\n                              Suc i \\<le> x \\<and>\n                              x mod k = 0 \\<and>\n                              (\\<forall>xa.\n                                  Suc i \\<le> xa \\<and>\n                                  xa \\<le> Suc\n      (i + (x - Suc (Suc i))) \\<longrightarrow>\n                                  s xa = NoMsg))) \\<and>\n                         (\\<forall>x.\n                             Suc (t * k) \\<le> x \\<and>\n                             x \\<le> Suc (i - 2) \\<longrightarrow>\n                             0 < x mod k)\n 2. \\<And>i.\n       \\<lbrakk>m \\<noteq> NoMsg; \\<And>t. event t = (t mod k = 0);\n        t0 = t * k; Suc 0 < k;\n        i < t * k + k - Suc 0 \\<longrightarrow>\n        s i = m \\<and>\n        (\\<forall>x.\n            Suc i \\<le> x \\<and> x \\<le> t * k + k - Suc 0 \\<longrightarrow>\n            s x = NoMsg);\n        \\<not> i < t * k + k - Suc 0 \\<longrightarrow>\n        i = t * k + k - Suc 0 \\<and> s i = m;\n        i \\<noteq> Suc (t * k); Suc (t * k) \\<le> i;\n        \\<not> i < t * k + k - Suc 0\\<rbrakk>\n       \\<Longrightarrow> s i = m \\<and>\n                         0 < i mod k \\<and>\n                         (\\<exists>x.\n                             (x = Suc i \\<longrightarrow>\n                              Suc i mod k = 0) \\<and>\n                             (x \\<noteq> Suc i \\<longrightarrow>\n                              Suc i \\<le> x \\<and>\n                              x mod k = 0 \\<and>\n                              (\\<forall>xa.\n                                  Suc i \\<le> xa \\<and>\n                                  xa \\<le> Suc\n      (i + (x - Suc (Suc i))) \\<longrightarrow>\n                                  s xa = NoMsg))) \\<and>\n                         (\\<forall>x.\n                             Suc (t * k) \\<le> x \\<and>\n                             x \\<le> Suc (i - 2) \\<longrightarrow>\n                             0 < x mod k)\n 3. \\<lbrakk>m \\<noteq> NoMsg; \\<And>t. event t = (t mod k = 0); t0 = t * k;\n     Suc 0 < k;\n     s (t * k) = m \\<and>\n     (\\<exists>x.\n         (x = Suc (t * k) \\<longrightarrow> Suc (t * k) mod k = 0) \\<and>\n         (x \\<noteq> Suc (t * k) \\<longrightarrow>\n          Suc (t * k) \\<le> x \\<and>\n          x mod k = 0 \\<and>\n          (\\<forall>xa.\n              Suc (t * k) \\<le> xa \\<and>\n              xa \\<le> Suc (t * k +\n                            (x - Suc (Suc (t * k)))) \\<longrightarrow>\n              s xa = NoMsg))) \\<or>\n     (\\<exists>x.\n         (x = Suc (t * k) \\<longrightarrow>\n          s (Suc (t * k)) = m \\<and>\n          0 < Suc (t * k) mod k \\<and>\n          (\\<exists>x.\n              (x = Suc (Suc (t * k)) \\<longrightarrow>\n               Suc (Suc (t * k)) mod k = 0) \\<and>\n              (x \\<noteq> Suc (Suc (t * k)) \\<longrightarrow>\n               Suc (Suc (t * k)) \\<le> x \\<and>\n               x mod k = 0 \\<and>\n               (\\<forall>xa.\n                   Suc (Suc (t * k)) \\<le> xa \\<and>\n                   xa \\<le> Suc (Suc (t * k +\n(x - Suc (Suc (Suc (t * k)))))) \\<longrightarrow>\n                   s xa = NoMsg)))) \\<and>\n         (x \\<noteq> Suc (t * k) \\<longrightarrow>\n          Suc (t * k) \\<le> x \\<and>\n          s x = m \\<and>\n          0 < x mod k \\<and>\n          (\\<exists>xa.\n              (xa = Suc x \\<longrightarrow> Suc x mod k = 0) \\<and>\n              (xa \\<noteq> Suc x \\<longrightarrow>\n               Suc x \\<le> xa \\<and>\n               xa mod k = 0 \\<and>\n               (\\<forall>xb.\n                   Suc x \\<le> xb \\<and>\n                   xb \\<le> Suc (x + (xa - Suc (Suc x))) \\<longrightarrow>\n                   s xb = NoMsg))) \\<and>\n          (\\<forall>xa.\n              Suc (t * k) \\<le> xa \\<and>\n              xa \\<le> Suc (t * k +\n                            (x - Suc (Suc (t * k)))) \\<longrightarrow>\n              0 < xa mod k)))\\<rbrakk>\n    \\<Longrightarrow> \\<exists>x.\n                         (x < t * k + k - Suc 0 \\<longrightarrow>\n                          t * k \\<le> x \\<and>\n                          s x = m \\<and>\n                          (\\<forall>xa.\n                              Suc x \\<le> xa \\<and>\n                              xa \\<le> t * k + k - Suc 0 \\<longrightarrow>\n                              s xa = NoMsg)) \\<and>\n                         (\\<not> x < t * k + k - Suc 0 \\<longrightarrow>\n                          t * k \\<le> x \\<and>\n                          x = t * k + k - Suc 0 \\<and> s x = m)", "apply (subgoal_tac \"0 < i mod k\")"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>i.\n       \\<lbrakk>s i \\<noteq> NoMsg; \\<And>t. event t = (t mod k = 0);\n        t0 = t * k; Suc 0 < k; i \\<noteq> Suc (t * k); Suc (t * k) \\<le> i;\n        i < t * k + k - Suc 0;\n        \\<forall>x.\n           Suc i \\<le> x \\<and> x \\<le> t * k + k - Suc 0 \\<longrightarrow>\n           s x = NoMsg;\n        m = s i; 0 < i mod k\\<rbrakk>\n       \\<Longrightarrow> 0 < i mod k \\<and>\n                         (\\<exists>x.\n                             (x = Suc i \\<longrightarrow>\n                              Suc i mod k = 0) \\<and>\n                             (x \\<noteq> Suc i \\<longrightarrow>\n                              Suc i \\<le> x \\<and>\n                              x mod k = 0 \\<and>\n                              (\\<forall>xa.\n                                  Suc i \\<le> xa \\<and>\n                                  xa \\<le> Suc\n      (i + (x - Suc (Suc i))) \\<longrightarrow>\n                                  s xa = NoMsg))) \\<and>\n                         (\\<forall>x.\n                             Suc (t * k) \\<le> x \\<and>\n                             x \\<le> Suc (i - 2) \\<longrightarrow>\n                             0 < x mod k)\n 2. \\<And>i.\n       \\<lbrakk>s i \\<noteq> NoMsg; \\<And>t. event t = (t mod k = 0);\n        t0 = t * k; Suc 0 < k; i \\<noteq> Suc (t * k); Suc (t * k) \\<le> i;\n        i < t * k + k - Suc 0;\n        \\<forall>x.\n           Suc i \\<le> x \\<and> x \\<le> t * k + k - Suc 0 \\<longrightarrow>\n           s x = NoMsg;\n        m = s i\\<rbrakk>\n       \\<Longrightarrow> 0 < i mod k\n 3. \\<And>i.\n       \\<lbrakk>m \\<noteq> NoMsg; \\<And>t. event t = (t mod k = 0);\n        t0 = t * k; Suc 0 < k;\n        i < t * k + k - Suc 0 \\<longrightarrow>\n        s i = m \\<and>\n        (\\<forall>x.\n            Suc i \\<le> x \\<and> x \\<le> t * k + k - Suc 0 \\<longrightarrow>\n            s x = NoMsg);\n        \\<not> i < t * k + k - Suc 0 \\<longrightarrow>\n        i = t * k + k - Suc 0 \\<and> s i = m;\n        i \\<noteq> Suc (t * k); Suc (t * k) \\<le> i;\n        \\<not> i < t * k + k - Suc 0\\<rbrakk>\n       \\<Longrightarrow> s i = m \\<and>\n                         0 < i mod k \\<and>\n                         (\\<exists>x.\n                             (x = Suc i \\<longrightarrow>\n                              Suc i mod k = 0) \\<and>\n                             (x \\<noteq> Suc i \\<longrightarrow>\n                              Suc i \\<le> x \\<and>\n                              x mod k = 0 \\<and>\n                              (\\<forall>xa.\n                                  Suc i \\<le> xa \\<and>\n                                  xa \\<le> Suc\n      (i + (x - Suc (Suc i))) \\<longrightarrow>\n                                  s xa = NoMsg))) \\<and>\n                         (\\<forall>x.\n                             Suc (t * k) \\<le> x \\<and>\n                             x \\<le> Suc (i - 2) \\<longrightarrow>\n                             0 < x mod k)\n 4. \\<lbrakk>m \\<noteq> NoMsg; \\<And>t. event t = (t mod k = 0); t0 = t * k;\n     Suc 0 < k;\n     s (t * k) = m \\<and>\n     (\\<exists>x.\n         (x = Suc (t * k) \\<longrightarrow> Suc (t * k) mod k = 0) \\<and>\n         (x \\<noteq> Suc (t * k) \\<longrightarrow>\n          Suc (t * k) \\<le> x \\<and>\n          x mod k = 0 \\<and>\n          (\\<forall>xa.\n              Suc (t * k) \\<le> xa \\<and>\n              xa \\<le> Suc (t * k +\n                            (x - Suc (Suc (t * k)))) \\<longrightarrow>\n              s xa = NoMsg))) \\<or>\n     (\\<exists>x.\n         (x = Suc (t * k) \\<longrightarrow>\n          s (Suc (t * k)) = m \\<and>\n          0 < Suc (t * k) mod k \\<and>\n          (\\<exists>x.\n              (x = Suc (Suc (t * k)) \\<longrightarrow>\n               Suc (Suc (t * k)) mod k = 0) \\<and>\n              (x \\<noteq> Suc (Suc (t * k)) \\<longrightarrow>\n               Suc (Suc (t * k)) \\<le> x \\<and>\n               x mod k = 0 \\<and>\n               (\\<forall>xa.\n                   Suc (Suc (t * k)) \\<le> xa \\<and>\n                   xa \\<le> Suc (Suc (t * k +\n(x - Suc (Suc (Suc (t * k)))))) \\<longrightarrow>\n                   s xa = NoMsg)))) \\<and>\n         (x \\<noteq> Suc (t * k) \\<longrightarrow>\n          Suc (t * k) \\<le> x \\<and>\n          s x = m \\<and>\n          0 < x mod k \\<and>\n          (\\<exists>xa.\n              (xa = Suc x \\<longrightarrow> Suc x mod k = 0) \\<and>\n              (xa \\<noteq> Suc x \\<longrightarrow>\n               Suc x \\<le> xa \\<and>\n               xa mod k = 0 \\<and>\n               (\\<forall>xb.\n                   Suc x \\<le> xb \\<and>\n                   xb \\<le> Suc (x + (xa - Suc (Suc x))) \\<longrightarrow>\n                   s xb = NoMsg))) \\<and>\n          (\\<forall>xa.\n              Suc (t * k) \\<le> xa \\<and>\n              xa \\<le> Suc (t * k +\n                            (x - Suc (Suc (t * k)))) \\<longrightarrow>\n              0 < xa mod k)))\\<rbrakk>\n    \\<Longrightarrow> \\<exists>x.\n                         (x < t * k + k - Suc 0 \\<longrightarrow>\n                          t * k \\<le> x \\<and>\n                          s x = m \\<and>\n                          (\\<forall>xa.\n                              Suc x \\<le> xa \\<and>\n                              xa \\<le> t * k + k - Suc 0 \\<longrightarrow>\n                              s xa = NoMsg)) \\<and>\n                         (\\<not> x < t * k + k - Suc 0 \\<longrightarrow>\n                          t * k \\<le> x \\<and>\n                          x = t * k + k - Suc 0 \\<and> s x = m)", "prefer 2"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>i.\n       \\<lbrakk>s i \\<noteq> NoMsg; \\<And>t. event t = (t mod k = 0);\n        t0 = t * k; Suc 0 < k; i \\<noteq> Suc (t * k); Suc (t * k) \\<le> i;\n        i < t * k + k - Suc 0;\n        \\<forall>x.\n           Suc i \\<le> x \\<and> x \\<le> t * k + k - Suc 0 \\<longrightarrow>\n           s x = NoMsg;\n        m = s i\\<rbrakk>\n       \\<Longrightarrow> 0 < i mod k\n 2. \\<And>i.\n       \\<lbrakk>s i \\<noteq> NoMsg; \\<And>t. event t = (t mod k = 0);\n        t0 = t * k; Suc 0 < k; i \\<noteq> Suc (t * k); Suc (t * k) \\<le> i;\n        i < t * k + k - Suc 0;\n        \\<forall>x.\n           Suc i \\<le> x \\<and> x \\<le> t * k + k - Suc 0 \\<longrightarrow>\n           s x = NoMsg;\n        m = s i; 0 < i mod k\\<rbrakk>\n       \\<Longrightarrow> 0 < i mod k \\<and>\n                         (\\<exists>x.\n                             (x = Suc i \\<longrightarrow>\n                              Suc i mod k = 0) \\<and>\n                             (x \\<noteq> Suc i \\<longrightarrow>\n                              Suc i \\<le> x \\<and>\n                              x mod k = 0 \\<and>\n                              (\\<forall>xa.\n                                  Suc i \\<le> xa \\<and>\n                                  xa \\<le> Suc\n      (i + (x - Suc (Suc i))) \\<longrightarrow>\n                                  s xa = NoMsg))) \\<and>\n                         (\\<forall>x.\n                             Suc (t * k) \\<le> x \\<and>\n                             x \\<le> Suc (i - 2) \\<longrightarrow>\n                             0 < x mod k)\n 3. \\<And>i.\n       \\<lbrakk>m \\<noteq> NoMsg; \\<And>t. event t = (t mod k = 0);\n        t0 = t * k; Suc 0 < k;\n        i < t * k + k - Suc 0 \\<longrightarrow>\n        s i = m \\<and>\n        (\\<forall>x.\n            Suc i \\<le> x \\<and> x \\<le> t * k + k - Suc 0 \\<longrightarrow>\n            s x = NoMsg);\n        \\<not> i < t * k + k - Suc 0 \\<longrightarrow>\n        i = t * k + k - Suc 0 \\<and> s i = m;\n        i \\<noteq> Suc (t * k); Suc (t * k) \\<le> i;\n        \\<not> i < t * k + k - Suc 0\\<rbrakk>\n       \\<Longrightarrow> s i = m \\<and>\n                         0 < i mod k \\<and>\n                         (\\<exists>x.\n                             (x = Suc i \\<longrightarrow>\n                              Suc i mod k = 0) \\<and>\n                             (x \\<noteq> Suc i \\<longrightarrow>\n                              Suc i \\<le> x \\<and>\n                              x mod k = 0 \\<and>\n                              (\\<forall>xa.\n                                  Suc i \\<le> xa \\<and>\n                                  xa \\<le> Suc\n      (i + (x - Suc (Suc i))) \\<longrightarrow>\n                                  s xa = NoMsg))) \\<and>\n                         (\\<forall>x.\n                             Suc (t * k) \\<le> x \\<and>\n                             x \\<le> Suc (i - 2) \\<longrightarrow>\n                             0 < x mod k)\n 4. \\<lbrakk>m \\<noteq> NoMsg; \\<And>t. event t = (t mod k = 0); t0 = t * k;\n     Suc 0 < k;\n     s (t * k) = m \\<and>\n     (\\<exists>x.\n         (x = Suc (t * k) \\<longrightarrow> Suc (t * k) mod k = 0) \\<and>\n         (x \\<noteq> Suc (t * k) \\<longrightarrow>\n          Suc (t * k) \\<le> x \\<and>\n          x mod k = 0 \\<and>\n          (\\<forall>xa.\n              Suc (t * k) \\<le> xa \\<and>\n              xa \\<le> Suc (t * k +\n                            (x - Suc (Suc (t * k)))) \\<longrightarrow>\n              s xa = NoMsg))) \\<or>\n     (\\<exists>x.\n         (x = Suc (t * k) \\<longrightarrow>\n          s (Suc (t * k)) = m \\<and>\n          0 < Suc (t * k) mod k \\<and>\n          (\\<exists>x.\n              (x = Suc (Suc (t * k)) \\<longrightarrow>\n               Suc (Suc (t * k)) mod k = 0) \\<and>\n              (x \\<noteq> Suc (Suc (t * k)) \\<longrightarrow>\n               Suc (Suc (t * k)) \\<le> x \\<and>\n               x mod k = 0 \\<and>\n               (\\<forall>xa.\n                   Suc (Suc (t * k)) \\<le> xa \\<and>\n                   xa \\<le> Suc (Suc (t * k +\n(x - Suc (Suc (Suc (t * k)))))) \\<longrightarrow>\n                   s xa = NoMsg)))) \\<and>\n         (x \\<noteq> Suc (t * k) \\<longrightarrow>\n          Suc (t * k) \\<le> x \\<and>\n          s x = m \\<and>\n          0 < x mod k \\<and>\n          (\\<exists>xa.\n              (xa = Suc x \\<longrightarrow> Suc x mod k = 0) \\<and>\n              (xa \\<noteq> Suc x \\<longrightarrow>\n               Suc x \\<le> xa \\<and>\n               xa mod k = 0 \\<and>\n               (\\<forall>xb.\n                   Suc x \\<le> xb \\<and>\n                   xb \\<le> Suc (x + (xa - Suc (Suc x))) \\<longrightarrow>\n                   s xb = NoMsg))) \\<and>\n          (\\<forall>xa.\n              Suc (t * k) \\<le> xa \\<and>\n              xa \\<le> Suc (t * k +\n                            (x - Suc (Suc (t * k)))) \\<longrightarrow>\n              0 < xa mod k)))\\<rbrakk>\n    \\<Longrightarrow> \\<exists>x.\n                         (x < t * k + k - Suc 0 \\<longrightarrow>\n                          t * k \\<le> x \\<and>\n                          s x = m \\<and>\n                          (\\<forall>xa.\n                              Suc x \\<le> xa \\<and>\n                              xa \\<le> t * k + k - Suc 0 \\<longrightarrow>\n                              s xa = NoMsg)) \\<and>\n                         (\\<not> x < t * k + k - Suc 0 \\<longrightarrow>\n                          t * k \\<le> x \\<and>\n                          x = t * k + k - Suc 0 \\<and> s x = m)", "apply (simp add: mult.commute[of t])"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>i.\n       \\<lbrakk>s i \\<noteq> NoMsg; \\<And>t. event t = (t mod k = 0);\n        t0 = k * t; Suc 0 < k; i \\<noteq> Suc (k * t); Suc (k * t) \\<le> i;\n        i < k * t + k - Suc 0;\n        \\<forall>x.\n           Suc i \\<le> x \\<and> x \\<le> k * t + k - Suc 0 \\<longrightarrow>\n           s x = NoMsg;\n        m = s i\\<rbrakk>\n       \\<Longrightarrow> 0 < i mod k\n 2. \\<And>i.\n       \\<lbrakk>s i \\<noteq> NoMsg; \\<And>t. event t = (t mod k = 0);\n        t0 = t * k; Suc 0 < k; i \\<noteq> Suc (t * k); Suc (t * k) \\<le> i;\n        i < t * k + k - Suc 0;\n        \\<forall>x.\n           Suc i \\<le> x \\<and> x \\<le> t * k + k - Suc 0 \\<longrightarrow>\n           s x = NoMsg;\n        m = s i; 0 < i mod k\\<rbrakk>\n       \\<Longrightarrow> 0 < i mod k \\<and>\n                         (\\<exists>x.\n                             (x = Suc i \\<longrightarrow>\n                              Suc i mod k = 0) \\<and>\n                             (x \\<noteq> Suc i \\<longrightarrow>\n                              Suc i \\<le> x \\<and>\n                              x mod k = 0 \\<and>\n                              (\\<forall>xa.\n                                  Suc i \\<le> xa \\<and>\n                                  xa \\<le> Suc\n      (i + (x - Suc (Suc i))) \\<longrightarrow>\n                                  s xa = NoMsg))) \\<and>\n                         (\\<forall>x.\n                             Suc (t * k) \\<le> x \\<and>\n                             x \\<le> Suc (i - 2) \\<longrightarrow>\n                             0 < x mod k)\n 3. \\<And>i.\n       \\<lbrakk>m \\<noteq> NoMsg; \\<And>t. event t = (t mod k = 0);\n        t0 = t * k; Suc 0 < k;\n        i < t * k + k - Suc 0 \\<longrightarrow>\n        s i = m \\<and>\n        (\\<forall>x.\n            Suc i \\<le> x \\<and> x \\<le> t * k + k - Suc 0 \\<longrightarrow>\n            s x = NoMsg);\n        \\<not> i < t * k + k - Suc 0 \\<longrightarrow>\n        i = t * k + k - Suc 0 \\<and> s i = m;\n        i \\<noteq> Suc (t * k); Suc (t * k) \\<le> i;\n        \\<not> i < t * k + k - Suc 0\\<rbrakk>\n       \\<Longrightarrow> s i = m \\<and>\n                         0 < i mod k \\<and>\n                         (\\<exists>x.\n                             (x = Suc i \\<longrightarrow>\n                              Suc i mod k = 0) \\<and>\n                             (x \\<noteq> Suc i \\<longrightarrow>\n                              Suc i \\<le> x \\<and>\n                              x mod k = 0 \\<and>\n                              (\\<forall>xa.\n                                  Suc i \\<le> xa \\<and>\n                                  xa \\<le> Suc\n      (i + (x - Suc (Suc i))) \\<longrightarrow>\n                                  s xa = NoMsg))) \\<and>\n                         (\\<forall>x.\n                             Suc (t * k) \\<le> x \\<and>\n                             x \\<le> Suc (i - 2) \\<longrightarrow>\n                             0 < x mod k)\n 4. \\<lbrakk>m \\<noteq> NoMsg; \\<And>t. event t = (t mod k = 0); t0 = t * k;\n     Suc 0 < k;\n     s (t * k) = m \\<and>\n     (\\<exists>x.\n         (x = Suc (t * k) \\<longrightarrow> Suc (t * k) mod k = 0) \\<and>\n         (x \\<noteq> Suc (t * k) \\<longrightarrow>\n          Suc (t * k) \\<le> x \\<and>\n          x mod k = 0 \\<and>\n          (\\<forall>xa.\n              Suc (t * k) \\<le> xa \\<and>\n              xa \\<le> Suc (t * k +\n                            (x - Suc (Suc (t * k)))) \\<longrightarrow>\n              s xa = NoMsg))) \\<or>\n     (\\<exists>x.\n         (x = Suc (t * k) \\<longrightarrow>\n          s (Suc (t * k)) = m \\<and>\n          0 < Suc (t * k) mod k \\<and>\n          (\\<exists>x.\n              (x = Suc (Suc (t * k)) \\<longrightarrow>\n               Suc (Suc (t * k)) mod k = 0) \\<and>\n              (x \\<noteq> Suc (Suc (t * k)) \\<longrightarrow>\n               Suc (Suc (t * k)) \\<le> x \\<and>\n               x mod k = 0 \\<and>\n               (\\<forall>xa.\n                   Suc (Suc (t * k)) \\<le> xa \\<and>\n                   xa \\<le> Suc (Suc (t * k +\n(x - Suc (Suc (Suc (t * k)))))) \\<longrightarrow>\n                   s xa = NoMsg)))) \\<and>\n         (x \\<noteq> Suc (t * k) \\<longrightarrow>\n          Suc (t * k) \\<le> x \\<and>\n          s x = m \\<and>\n          0 < x mod k \\<and>\n          (\\<exists>xa.\n              (xa = Suc x \\<longrightarrow> Suc x mod k = 0) \\<and>\n              (xa \\<noteq> Suc x \\<longrightarrow>\n               Suc x \\<le> xa \\<and>\n               xa mod k = 0 \\<and>\n               (\\<forall>xb.\n                   Suc x \\<le> xb \\<and>\n                   xb \\<le> Suc (x + (xa - Suc (Suc x))) \\<longrightarrow>\n                   s xb = NoMsg))) \\<and>\n          (\\<forall>xa.\n              Suc (t * k) \\<le> xa \\<and>\n              xa \\<le> Suc (t * k +\n                            (x - Suc (Suc (t * k)))) \\<longrightarrow>\n              0 < xa mod k)))\\<rbrakk>\n    \\<Longrightarrow> \\<exists>x.\n                         (x < t * k + k - Suc 0 \\<longrightarrow>\n                          t * k \\<le> x \\<and>\n                          s x = m \\<and>\n                          (\\<forall>xa.\n                              Suc x \\<le> xa \\<and>\n                              xa \\<le> t * k + k - Suc 0 \\<longrightarrow>\n                              s xa = NoMsg)) \\<and>\n                         (\\<not> x < t * k + k - Suc 0 \\<longrightarrow>\n                          t * k \\<le> x \\<and>\n                          x = t * k + k - Suc 0 \\<and> s x = m)", "apply (rule between_imp_mod_gr0[OF Suc_le_lessD], simp+)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>i.\n       \\<lbrakk>s i \\<noteq> NoMsg; \\<And>t. event t = (t mod k = 0);\n        t0 = t * k; Suc 0 < k; i \\<noteq> Suc (t * k); Suc (t * k) \\<le> i;\n        i < t * k + k - Suc 0;\n        \\<forall>x.\n           Suc i \\<le> x \\<and> x \\<le> t * k + k - Suc 0 \\<longrightarrow>\n           s x = NoMsg;\n        m = s i; 0 < i mod k\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>x.\n                             (x = Suc i \\<longrightarrow>\n                              Suc i mod k = 0) \\<and>\n                             (x \\<noteq> Suc i \\<longrightarrow>\n                              Suc i \\<le> x \\<and>\n                              x mod k = 0 \\<and>\n                              (\\<forall>xa.\n                                  Suc i \\<le> xa \\<and>\n                                  xa \\<le> Suc\n      (i + (x - Suc (Suc i))) \\<longrightarrow>\n                                  s xa = NoMsg))) \\<and>\n                         (\\<forall>x.\n                             Suc (t * k) \\<le> x \\<and>\n                             x \\<le> Suc (i - 2) \\<longrightarrow>\n                             0 < x mod k)\n 2. \\<And>i.\n       \\<lbrakk>m \\<noteq> NoMsg; \\<And>t. event t = (t mod k = 0);\n        t0 = t * k; Suc 0 < k;\n        i < t * k + k - Suc 0 \\<longrightarrow>\n        s i = m \\<and>\n        (\\<forall>x.\n            Suc i \\<le> x \\<and> x \\<le> t * k + k - Suc 0 \\<longrightarrow>\n            s x = NoMsg);\n        \\<not> i < t * k + k - Suc 0 \\<longrightarrow>\n        i = t * k + k - Suc 0 \\<and> s i = m;\n        i \\<noteq> Suc (t * k); Suc (t * k) \\<le> i;\n        \\<not> i < t * k + k - Suc 0\\<rbrakk>\n       \\<Longrightarrow> s i = m \\<and>\n                         0 < i mod k \\<and>\n                         (\\<exists>x.\n                             (x = Suc i \\<longrightarrow>\n                              Suc i mod k = 0) \\<and>\n                             (x \\<noteq> Suc i \\<longrightarrow>\n                              Suc i \\<le> x \\<and>\n                              x mod k = 0 \\<and>\n                              (\\<forall>xa.\n                                  Suc i \\<le> xa \\<and>\n                                  xa \\<le> Suc\n      (i + (x - Suc (Suc i))) \\<longrightarrow>\n                                  s xa = NoMsg))) \\<and>\n                         (\\<forall>x.\n                             Suc (t * k) \\<le> x \\<and>\n                             x \\<le> Suc (i - 2) \\<longrightarrow>\n                             0 < x mod k)\n 3. \\<lbrakk>m \\<noteq> NoMsg; \\<And>t. event t = (t mod k = 0); t0 = t * k;\n     Suc 0 < k;\n     s (t * k) = m \\<and>\n     (\\<exists>x.\n         (x = Suc (t * k) \\<longrightarrow> Suc (t * k) mod k = 0) \\<and>\n         (x \\<noteq> Suc (t * k) \\<longrightarrow>\n          Suc (t * k) \\<le> x \\<and>\n          x mod k = 0 \\<and>\n          (\\<forall>xa.\n              Suc (t * k) \\<le> xa \\<and>\n              xa \\<le> Suc (t * k +\n                            (x - Suc (Suc (t * k)))) \\<longrightarrow>\n              s xa = NoMsg))) \\<or>\n     (\\<exists>x.\n         (x = Suc (t * k) \\<longrightarrow>\n          s (Suc (t * k)) = m \\<and>\n          0 < Suc (t * k) mod k \\<and>\n          (\\<exists>x.\n              (x = Suc (Suc (t * k)) \\<longrightarrow>\n               Suc (Suc (t * k)) mod k = 0) \\<and>\n              (x \\<noteq> Suc (Suc (t * k)) \\<longrightarrow>\n               Suc (Suc (t * k)) \\<le> x \\<and>\n               x mod k = 0 \\<and>\n               (\\<forall>xa.\n                   Suc (Suc (t * k)) \\<le> xa \\<and>\n                   xa \\<le> Suc (Suc (t * k +\n(x - Suc (Suc (Suc (t * k)))))) \\<longrightarrow>\n                   s xa = NoMsg)))) \\<and>\n         (x \\<noteq> Suc (t * k) \\<longrightarrow>\n          Suc (t * k) \\<le> x \\<and>\n          s x = m \\<and>\n          0 < x mod k \\<and>\n          (\\<exists>xa.\n              (xa = Suc x \\<longrightarrow> Suc x mod k = 0) \\<and>\n              (xa \\<noteq> Suc x \\<longrightarrow>\n               Suc x \\<le> xa \\<and>\n               xa mod k = 0 \\<and>\n               (\\<forall>xb.\n                   Suc x \\<le> xb \\<and>\n                   xb \\<le> Suc (x + (xa - Suc (Suc x))) \\<longrightarrow>\n                   s xb = NoMsg))) \\<and>\n          (\\<forall>xa.\n              Suc (t * k) \\<le> xa \\<and>\n              xa \\<le> Suc (t * k +\n                            (x - Suc (Suc (t * k)))) \\<longrightarrow>\n              0 < xa mod k)))\\<rbrakk>\n    \\<Longrightarrow> \\<exists>x.\n                         (x < t * k + k - Suc 0 \\<longrightarrow>\n                          t * k \\<le> x \\<and>\n                          s x = m \\<and>\n                          (\\<forall>xa.\n                              Suc x \\<le> xa \\<and>\n                              xa \\<le> t * k + k - Suc 0 \\<longrightarrow>\n                              s xa = NoMsg)) \\<and>\n                         (\\<not> x < t * k + k - Suc 0 \\<longrightarrow>\n                          t * k \\<le> x \\<and>\n                          x = t * k + k - Suc 0 \\<and> s x = m)", "apply (rule conjI)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>i.\n       \\<lbrakk>s i \\<noteq> NoMsg; \\<And>t. event t = (t mod k = 0);\n        t0 = t * k; Suc 0 < k; i \\<noteq> Suc (t * k); Suc (t * k) \\<le> i;\n        i < t * k + k - Suc 0;\n        \\<forall>x.\n           Suc i \\<le> x \\<and> x \\<le> t * k + k - Suc 0 \\<longrightarrow>\n           s x = NoMsg;\n        m = s i; 0 < i mod k\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x.\n                            (x = Suc i \\<longrightarrow>\n                             Suc i mod k = 0) \\<and>\n                            (x \\<noteq> Suc i \\<longrightarrow>\n                             Suc i \\<le> x \\<and>\n                             x mod k = 0 \\<and>\n                             (\\<forall>xa.\n                                 Suc i \\<le> xa \\<and>\n                                 xa \\<le> Suc\n     (i + (x - Suc (Suc i))) \\<longrightarrow>\n                                 s xa = NoMsg))\n 2. \\<And>i.\n       \\<lbrakk>s i \\<noteq> NoMsg; \\<And>t. event t = (t mod k = 0);\n        t0 = t * k; Suc 0 < k; i \\<noteq> Suc (t * k); Suc (t * k) \\<le> i;\n        i < t * k + k - Suc 0;\n        \\<forall>x.\n           Suc i \\<le> x \\<and> x \\<le> t * k + k - Suc 0 \\<longrightarrow>\n           s x = NoMsg;\n        m = s i; 0 < i mod k\\<rbrakk>\n       \\<Longrightarrow> \\<forall>x.\n                            Suc (t * k) \\<le> x \\<and>\n                            x \\<le> Suc (i - 2) \\<longrightarrow>\n                            0 < x mod k\n 3. \\<And>i.\n       \\<lbrakk>m \\<noteq> NoMsg; \\<And>t. event t = (t mod k = 0);\n        t0 = t * k; Suc 0 < k;\n        i < t * k + k - Suc 0 \\<longrightarrow>\n        s i = m \\<and>\n        (\\<forall>x.\n            Suc i \\<le> x \\<and> x \\<le> t * k + k - Suc 0 \\<longrightarrow>\n            s x = NoMsg);\n        \\<not> i < t * k + k - Suc 0 \\<longrightarrow>\n        i = t * k + k - Suc 0 \\<and> s i = m;\n        i \\<noteq> Suc (t * k); Suc (t * k) \\<le> i;\n        \\<not> i < t * k + k - Suc 0\\<rbrakk>\n       \\<Longrightarrow> s i = m \\<and>\n                         0 < i mod k \\<and>\n                         (\\<exists>x.\n                             (x = Suc i \\<longrightarrow>\n                              Suc i mod k = 0) \\<and>\n                             (x \\<noteq> Suc i \\<longrightarrow>\n                              Suc i \\<le> x \\<and>\n                              x mod k = 0 \\<and>\n                              (\\<forall>xa.\n                                  Suc i \\<le> xa \\<and>\n                                  xa \\<le> Suc\n      (i + (x - Suc (Suc i))) \\<longrightarrow>\n                                  s xa = NoMsg))) \\<and>\n                         (\\<forall>x.\n                             Suc (t * k) \\<le> x \\<and>\n                             x \\<le> Suc (i - 2) \\<longrightarrow>\n                             0 < x mod k)\n 4. \\<lbrakk>m \\<noteq> NoMsg; \\<And>t. event t = (t mod k = 0); t0 = t * k;\n     Suc 0 < k;\n     s (t * k) = m \\<and>\n     (\\<exists>x.\n         (x = Suc (t * k) \\<longrightarrow> Suc (t * k) mod k = 0) \\<and>\n         (x \\<noteq> Suc (t * k) \\<longrightarrow>\n          Suc (t * k) \\<le> x \\<and>\n          x mod k = 0 \\<and>\n          (\\<forall>xa.\n              Suc (t * k) \\<le> xa \\<and>\n              xa \\<le> Suc (t * k +\n                            (x - Suc (Suc (t * k)))) \\<longrightarrow>\n              s xa = NoMsg))) \\<or>\n     (\\<exists>x.\n         (x = Suc (t * k) \\<longrightarrow>\n          s (Suc (t * k)) = m \\<and>\n          0 < Suc (t * k) mod k \\<and>\n          (\\<exists>x.\n              (x = Suc (Suc (t * k)) \\<longrightarrow>\n               Suc (Suc (t * k)) mod k = 0) \\<and>\n              (x \\<noteq> Suc (Suc (t * k)) \\<longrightarrow>\n               Suc (Suc (t * k)) \\<le> x \\<and>\n               x mod k = 0 \\<and>\n               (\\<forall>xa.\n                   Suc (Suc (t * k)) \\<le> xa \\<and>\n                   xa \\<le> Suc (Suc (t * k +\n(x - Suc (Suc (Suc (t * k)))))) \\<longrightarrow>\n                   s xa = NoMsg)))) \\<and>\n         (x \\<noteq> Suc (t * k) \\<longrightarrow>\n          Suc (t * k) \\<le> x \\<and>\n          s x = m \\<and>\n          0 < x mod k \\<and>\n          (\\<exists>xa.\n              (xa = Suc x \\<longrightarrow> Suc x mod k = 0) \\<and>\n              (xa \\<noteq> Suc x \\<longrightarrow>\n               Suc x \\<le> xa \\<and>\n               xa mod k = 0 \\<and>\n               (\\<forall>xb.\n                   Suc x \\<le> xb \\<and>\n                   xb \\<le> Suc (x + (xa - Suc (Suc x))) \\<longrightarrow>\n                   s xb = NoMsg))) \\<and>\n          (\\<forall>xa.\n              Suc (t * k) \\<le> xa \\<and>\n              xa \\<le> Suc (t * k +\n                            (x - Suc (Suc (t * k)))) \\<longrightarrow>\n              0 < xa mod k)))\\<rbrakk>\n    \\<Longrightarrow> \\<exists>x.\n                         (x < t * k + k - Suc 0 \\<longrightarrow>\n                          t * k \\<le> x \\<and>\n                          s x = m \\<and>\n                          (\\<forall>xa.\n                              Suc x \\<le> xa \\<and>\n                              xa \\<le> t * k + k - Suc 0 \\<longrightarrow>\n                              s xa = NoMsg)) \\<and>\n                         (\\<not> x < t * k + k - Suc 0 \\<longrightarrow>\n                          t * k \\<le> x \\<and>\n                          x = t * k + k - Suc 0 \\<and> s x = m)", "apply (rule_tac x=\"t * k + k\" in exI)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>i.\n       \\<lbrakk>s i \\<noteq> NoMsg; \\<And>t. event t = (t mod k = 0);\n        t0 = t * k; Suc 0 < k; i \\<noteq> Suc (t * k); Suc (t * k) \\<le> i;\n        i < t * k + k - Suc 0;\n        \\<forall>x.\n           Suc i \\<le> x \\<and> x \\<le> t * k + k - Suc 0 \\<longrightarrow>\n           s x = NoMsg;\n        m = s i; 0 < i mod k\\<rbrakk>\n       \\<Longrightarrow> (t * k + k = Suc i \\<longrightarrow>\n                          Suc i mod k = 0) \\<and>\n                         (t * k + k \\<noteq> Suc i \\<longrightarrow>\n                          Suc i \\<le> t * k + k \\<and>\n                          (t * k + k) mod k = 0 \\<and>\n                          (\\<forall>x.\n                              Suc i \\<le> x \\<and>\n                              x \\<le> Suc\n (i + (t * k + k - Suc (Suc i))) \\<longrightarrow>\n                              s x = NoMsg))\n 2. \\<And>i.\n       \\<lbrakk>s i \\<noteq> NoMsg; \\<And>t. event t = (t mod k = 0);\n        t0 = t * k; Suc 0 < k; i \\<noteq> Suc (t * k); Suc (t * k) \\<le> i;\n        i < t * k + k - Suc 0;\n        \\<forall>x.\n           Suc i \\<le> x \\<and> x \\<le> t * k + k - Suc 0 \\<longrightarrow>\n           s x = NoMsg;\n        m = s i; 0 < i mod k\\<rbrakk>\n       \\<Longrightarrow> \\<forall>x.\n                            Suc (t * k) \\<le> x \\<and>\n                            x \\<le> Suc (i - 2) \\<longrightarrow>\n                            0 < x mod k\n 3. \\<And>i.\n       \\<lbrakk>m \\<noteq> NoMsg; \\<And>t. event t = (t mod k = 0);\n        t0 = t * k; Suc 0 < k;\n        i < t * k + k - Suc 0 \\<longrightarrow>\n        s i = m \\<and>\n        (\\<forall>x.\n            Suc i \\<le> x \\<and> x \\<le> t * k + k - Suc 0 \\<longrightarrow>\n            s x = NoMsg);\n        \\<not> i < t * k + k - Suc 0 \\<longrightarrow>\n        i = t * k + k - Suc 0 \\<and> s i = m;\n        i \\<noteq> Suc (t * k); Suc (t * k) \\<le> i;\n        \\<not> i < t * k + k - Suc 0\\<rbrakk>\n       \\<Longrightarrow> s i = m \\<and>\n                         0 < i mod k \\<and>\n                         (\\<exists>x.\n                             (x = Suc i \\<longrightarrow>\n                              Suc i mod k = 0) \\<and>\n                             (x \\<noteq> Suc i \\<longrightarrow>\n                              Suc i \\<le> x \\<and>\n                              x mod k = 0 \\<and>\n                              (\\<forall>xa.\n                                  Suc i \\<le> xa \\<and>\n                                  xa \\<le> Suc\n      (i + (x - Suc (Suc i))) \\<longrightarrow>\n                                  s xa = NoMsg))) \\<and>\n                         (\\<forall>x.\n                             Suc (t * k) \\<le> x \\<and>\n                             x \\<le> Suc (i - 2) \\<longrightarrow>\n                             0 < x mod k)\n 4. \\<lbrakk>m \\<noteq> NoMsg; \\<And>t. event t = (t mod k = 0); t0 = t * k;\n     Suc 0 < k;\n     s (t * k) = m \\<and>\n     (\\<exists>x.\n         (x = Suc (t * k) \\<longrightarrow> Suc (t * k) mod k = 0) \\<and>\n         (x \\<noteq> Suc (t * k) \\<longrightarrow>\n          Suc (t * k) \\<le> x \\<and>\n          x mod k = 0 \\<and>\n          (\\<forall>xa.\n              Suc (t * k) \\<le> xa \\<and>\n              xa \\<le> Suc (t * k +\n                            (x - Suc (Suc (t * k)))) \\<longrightarrow>\n              s xa = NoMsg))) \\<or>\n     (\\<exists>x.\n         (x = Suc (t * k) \\<longrightarrow>\n          s (Suc (t * k)) = m \\<and>\n          0 < Suc (t * k) mod k \\<and>\n          (\\<exists>x.\n              (x = Suc (Suc (t * k)) \\<longrightarrow>\n               Suc (Suc (t * k)) mod k = 0) \\<and>\n              (x \\<noteq> Suc (Suc (t * k)) \\<longrightarrow>\n               Suc (Suc (t * k)) \\<le> x \\<and>\n               x mod k = 0 \\<and>\n               (\\<forall>xa.\n                   Suc (Suc (t * k)) \\<le> xa \\<and>\n                   xa \\<le> Suc (Suc (t * k +\n(x - Suc (Suc (Suc (t * k)))))) \\<longrightarrow>\n                   s xa = NoMsg)))) \\<and>\n         (x \\<noteq> Suc (t * k) \\<longrightarrow>\n          Suc (t * k) \\<le> x \\<and>\n          s x = m \\<and>\n          0 < x mod k \\<and>\n          (\\<exists>xa.\n              (xa = Suc x \\<longrightarrow> Suc x mod k = 0) \\<and>\n              (xa \\<noteq> Suc x \\<longrightarrow>\n               Suc x \\<le> xa \\<and>\n               xa mod k = 0 \\<and>\n               (\\<forall>xb.\n                   Suc x \\<le> xb \\<and>\n                   xb \\<le> Suc (x + (xa - Suc (Suc x))) \\<longrightarrow>\n                   s xb = NoMsg))) \\<and>\n          (\\<forall>xa.\n              Suc (t * k) \\<le> xa \\<and>\n              xa \\<le> Suc (t * k +\n                            (x - Suc (Suc (t * k)))) \\<longrightarrow>\n              0 < xa mod k)))\\<rbrakk>\n    \\<Longrightarrow> \\<exists>x.\n                         (x < t * k + k - Suc 0 \\<longrightarrow>\n                          t * k \\<le> x \\<and>\n                          s x = m \\<and>\n                          (\\<forall>xa.\n                              Suc x \\<le> xa \\<and>\n                              xa \\<le> t * k + k - Suc 0 \\<longrightarrow>\n                              s xa = NoMsg)) \\<and>\n                         (\\<not> x < t * k + k - Suc 0 \\<longrightarrow>\n                          t * k \\<le> x \\<and>\n                          x = t * k + k - Suc 0 \\<and> s x = m)", "apply force"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>i.\n       \\<lbrakk>s i \\<noteq> NoMsg; \\<And>t. event t = (t mod k = 0);\n        t0 = t * k; Suc 0 < k; i \\<noteq> Suc (t * k); Suc (t * k) \\<le> i;\n        i < t * k + k - Suc 0;\n        \\<forall>x.\n           Suc i \\<le> x \\<and> x \\<le> t * k + k - Suc 0 \\<longrightarrow>\n           s x = NoMsg;\n        m = s i; 0 < i mod k\\<rbrakk>\n       \\<Longrightarrow> \\<forall>x.\n                            Suc (t * k) \\<le> x \\<and>\n                            x \\<le> Suc (i - 2) \\<longrightarrow>\n                            0 < x mod k\n 2. \\<And>i.\n       \\<lbrakk>m \\<noteq> NoMsg; \\<And>t. event t = (t mod k = 0);\n        t0 = t * k; Suc 0 < k;\n        i < t * k + k - Suc 0 \\<longrightarrow>\n        s i = m \\<and>\n        (\\<forall>x.\n            Suc i \\<le> x \\<and> x \\<le> t * k + k - Suc 0 \\<longrightarrow>\n            s x = NoMsg);\n        \\<not> i < t * k + k - Suc 0 \\<longrightarrow>\n        i = t * k + k - Suc 0 \\<and> s i = m;\n        i \\<noteq> Suc (t * k); Suc (t * k) \\<le> i;\n        \\<not> i < t * k + k - Suc 0\\<rbrakk>\n       \\<Longrightarrow> s i = m \\<and>\n                         0 < i mod k \\<and>\n                         (\\<exists>x.\n                             (x = Suc i \\<longrightarrow>\n                              Suc i mod k = 0) \\<and>\n                             (x \\<noteq> Suc i \\<longrightarrow>\n                              Suc i \\<le> x \\<and>\n                              x mod k = 0 \\<and>\n                              (\\<forall>xa.\n                                  Suc i \\<le> xa \\<and>\n                                  xa \\<le> Suc\n      (i + (x - Suc (Suc i))) \\<longrightarrow>\n                                  s xa = NoMsg))) \\<and>\n                         (\\<forall>x.\n                             Suc (t * k) \\<le> x \\<and>\n                             x \\<le> Suc (i - 2) \\<longrightarrow>\n                             0 < x mod k)\n 3. \\<lbrakk>m \\<noteq> NoMsg; \\<And>t. event t = (t mod k = 0); t0 = t * k;\n     Suc 0 < k;\n     s (t * k) = m \\<and>\n     (\\<exists>x.\n         (x = Suc (t * k) \\<longrightarrow> Suc (t * k) mod k = 0) \\<and>\n         (x \\<noteq> Suc (t * k) \\<longrightarrow>\n          Suc (t * k) \\<le> x \\<and>\n          x mod k = 0 \\<and>\n          (\\<forall>xa.\n              Suc (t * k) \\<le> xa \\<and>\n              xa \\<le> Suc (t * k +\n                            (x - Suc (Suc (t * k)))) \\<longrightarrow>\n              s xa = NoMsg))) \\<or>\n     (\\<exists>x.\n         (x = Suc (t * k) \\<longrightarrow>\n          s (Suc (t * k)) = m \\<and>\n          0 < Suc (t * k) mod k \\<and>\n          (\\<exists>x.\n              (x = Suc (Suc (t * k)) \\<longrightarrow>\n               Suc (Suc (t * k)) mod k = 0) \\<and>\n              (x \\<noteq> Suc (Suc (t * k)) \\<longrightarrow>\n               Suc (Suc (t * k)) \\<le> x \\<and>\n               x mod k = 0 \\<and>\n               (\\<forall>xa.\n                   Suc (Suc (t * k)) \\<le> xa \\<and>\n                   xa \\<le> Suc (Suc (t * k +\n(x - Suc (Suc (Suc (t * k)))))) \\<longrightarrow>\n                   s xa = NoMsg)))) \\<and>\n         (x \\<noteq> Suc (t * k) \\<longrightarrow>\n          Suc (t * k) \\<le> x \\<and>\n          s x = m \\<and>\n          0 < x mod k \\<and>\n          (\\<exists>xa.\n              (xa = Suc x \\<longrightarrow> Suc x mod k = 0) \\<and>\n              (xa \\<noteq> Suc x \\<longrightarrow>\n               Suc x \\<le> xa \\<and>\n               xa mod k = 0 \\<and>\n               (\\<forall>xb.\n                   Suc x \\<le> xb \\<and>\n                   xb \\<le> Suc (x + (xa - Suc (Suc x))) \\<longrightarrow>\n                   s xb = NoMsg))) \\<and>\n          (\\<forall>xa.\n              Suc (t * k) \\<le> xa \\<and>\n              xa \\<le> Suc (t * k +\n                            (x - Suc (Suc (t * k)))) \\<longrightarrow>\n              0 < xa mod k)))\\<rbrakk>\n    \\<Longrightarrow> \\<exists>x.\n                         (x < t * k + k - Suc 0 \\<longrightarrow>\n                          t * k \\<le> x \\<and>\n                          s x = m \\<and>\n                          (\\<forall>xa.\n                              Suc x \\<le> xa \\<and>\n                              xa \\<le> t * k + k - Suc 0 \\<longrightarrow>\n                              s xa = NoMsg)) \\<and>\n                         (\\<not> x < t * k + k - Suc 0 \\<longrightarrow>\n                          t * k \\<le> x \\<and>\n                          x = t * k + k - Suc 0 \\<and> s x = m)", "apply clarify"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>i x.\n       \\<lbrakk>s i \\<noteq> NoMsg; \\<And>t. event t = (t mod k = 0);\n        t0 = t * k; Suc 0 < k; i \\<noteq> Suc (t * k); Suc (t * k) \\<le> i;\n        i < t * k + k - Suc 0;\n        \\<forall>x.\n           Suc i \\<le> x \\<and> x \\<le> t * k + k - Suc 0 \\<longrightarrow>\n           s x = NoMsg;\n        m = s i; 0 < i mod k; Suc (t * k) \\<le> x;\n        x \\<le> Suc (i - 2)\\<rbrakk>\n       \\<Longrightarrow> 0 < x mod k\n 2. \\<And>i.\n       \\<lbrakk>m \\<noteq> NoMsg; \\<And>t. event t = (t mod k = 0);\n        t0 = t * k; Suc 0 < k;\n        i < t * k + k - Suc 0 \\<longrightarrow>\n        s i = m \\<and>\n        (\\<forall>x.\n            Suc i \\<le> x \\<and> x \\<le> t * k + k - Suc 0 \\<longrightarrow>\n            s x = NoMsg);\n        \\<not> i < t * k + k - Suc 0 \\<longrightarrow>\n        i = t * k + k - Suc 0 \\<and> s i = m;\n        i \\<noteq> Suc (t * k); Suc (t * k) \\<le> i;\n        \\<not> i < t * k + k - Suc 0\\<rbrakk>\n       \\<Longrightarrow> s i = m \\<and>\n                         0 < i mod k \\<and>\n                         (\\<exists>x.\n                             (x = Suc i \\<longrightarrow>\n                              Suc i mod k = 0) \\<and>\n                             (x \\<noteq> Suc i \\<longrightarrow>\n                              Suc i \\<le> x \\<and>\n                              x mod k = 0 \\<and>\n                              (\\<forall>xa.\n                                  Suc i \\<le> xa \\<and>\n                                  xa \\<le> Suc\n      (i + (x - Suc (Suc i))) \\<longrightarrow>\n                                  s xa = NoMsg))) \\<and>\n                         (\\<forall>x.\n                             Suc (t * k) \\<le> x \\<and>\n                             x \\<le> Suc (i - 2) \\<longrightarrow>\n                             0 < x mod k)\n 3. \\<lbrakk>m \\<noteq> NoMsg; \\<And>t. event t = (t mod k = 0); t0 = t * k;\n     Suc 0 < k;\n     s (t * k) = m \\<and>\n     (\\<exists>x.\n         (x = Suc (t * k) \\<longrightarrow> Suc (t * k) mod k = 0) \\<and>\n         (x \\<noteq> Suc (t * k) \\<longrightarrow>\n          Suc (t * k) \\<le> x \\<and>\n          x mod k = 0 \\<and>\n          (\\<forall>xa.\n              Suc (t * k) \\<le> xa \\<and>\n              xa \\<le> Suc (t * k +\n                            (x - Suc (Suc (t * k)))) \\<longrightarrow>\n              s xa = NoMsg))) \\<or>\n     (\\<exists>x.\n         (x = Suc (t * k) \\<longrightarrow>\n          s (Suc (t * k)) = m \\<and>\n          0 < Suc (t * k) mod k \\<and>\n          (\\<exists>x.\n              (x = Suc (Suc (t * k)) \\<longrightarrow>\n               Suc (Suc (t * k)) mod k = 0) \\<and>\n              (x \\<noteq> Suc (Suc (t * k)) \\<longrightarrow>\n               Suc (Suc (t * k)) \\<le> x \\<and>\n               x mod k = 0 \\<and>\n               (\\<forall>xa.\n                   Suc (Suc (t * k)) \\<le> xa \\<and>\n                   xa \\<le> Suc (Suc (t * k +\n(x - Suc (Suc (Suc (t * k)))))) \\<longrightarrow>\n                   s xa = NoMsg)))) \\<and>\n         (x \\<noteq> Suc (t * k) \\<longrightarrow>\n          Suc (t * k) \\<le> x \\<and>\n          s x = m \\<and>\n          0 < x mod k \\<and>\n          (\\<exists>xa.\n              (xa = Suc x \\<longrightarrow> Suc x mod k = 0) \\<and>\n              (xa \\<noteq> Suc x \\<longrightarrow>\n               Suc x \\<le> xa \\<and>\n               xa mod k = 0 \\<and>\n               (\\<forall>xb.\n                   Suc x \\<le> xb \\<and>\n                   xb \\<le> Suc (x + (xa - Suc (Suc x))) \\<longrightarrow>\n                   s xb = NoMsg))) \\<and>\n          (\\<forall>xa.\n              Suc (t * k) \\<le> xa \\<and>\n              xa \\<le> Suc (t * k +\n                            (x - Suc (Suc (t * k)))) \\<longrightarrow>\n              0 < xa mod k)))\\<rbrakk>\n    \\<Longrightarrow> \\<exists>x.\n                         (x < t * k + k - Suc 0 \\<longrightarrow>\n                          t * k \\<le> x \\<and>\n                          s x = m \\<and>\n                          (\\<forall>xa.\n                              Suc x \\<le> xa \\<and>\n                              xa \\<le> t * k + k - Suc 0 \\<longrightarrow>\n                              s xa = NoMsg)) \\<and>\n                         (\\<not> x < t * k + k - Suc 0 \\<longrightarrow>\n                          t * k \\<le> x \\<and>\n                          x = t * k + k - Suc 0 \\<and> s x = m)", "apply (simp add: mult.commute[of t])"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>i x.\n       \\<lbrakk>s i \\<noteq> NoMsg; \\<And>t. event t = (t mod k = 0);\n        t0 = k * t; Suc 0 < k; i \\<noteq> Suc (k * t); Suc (k * t) \\<le> i;\n        i < k * t + k - Suc 0;\n        \\<forall>x.\n           Suc i \\<le> x \\<and> x \\<le> k * t + k - Suc 0 \\<longrightarrow>\n           s x = NoMsg;\n        m = s i; 0 < i mod k; Suc (k * t) \\<le> x;\n        x \\<le> Suc (i - 2)\\<rbrakk>\n       \\<Longrightarrow> 0 < x mod k\n 2. \\<And>i.\n       \\<lbrakk>m \\<noteq> NoMsg; \\<And>t. event t = (t mod k = 0);\n        t0 = t * k; Suc 0 < k;\n        i < t * k + k - Suc 0 \\<longrightarrow>\n        s i = m \\<and>\n        (\\<forall>x.\n            Suc i \\<le> x \\<and> x \\<le> t * k + k - Suc 0 \\<longrightarrow>\n            s x = NoMsg);\n        \\<not> i < t * k + k - Suc 0 \\<longrightarrow>\n        i = t * k + k - Suc 0 \\<and> s i = m;\n        i \\<noteq> Suc (t * k); Suc (t * k) \\<le> i;\n        \\<not> i < t * k + k - Suc 0\\<rbrakk>\n       \\<Longrightarrow> s i = m \\<and>\n                         0 < i mod k \\<and>\n                         (\\<exists>x.\n                             (x = Suc i \\<longrightarrow>\n                              Suc i mod k = 0) \\<and>\n                             (x \\<noteq> Suc i \\<longrightarrow>\n                              Suc i \\<le> x \\<and>\n                              x mod k = 0 \\<and>\n                              (\\<forall>xa.\n                                  Suc i \\<le> xa \\<and>\n                                  xa \\<le> Suc\n      (i + (x - Suc (Suc i))) \\<longrightarrow>\n                                  s xa = NoMsg))) \\<and>\n                         (\\<forall>x.\n                             Suc (t * k) \\<le> x \\<and>\n                             x \\<le> Suc (i - 2) \\<longrightarrow>\n                             0 < x mod k)\n 3. \\<lbrakk>m \\<noteq> NoMsg; \\<And>t. event t = (t mod k = 0); t0 = t * k;\n     Suc 0 < k;\n     s (t * k) = m \\<and>\n     (\\<exists>x.\n         (x = Suc (t * k) \\<longrightarrow> Suc (t * k) mod k = 0) \\<and>\n         (x \\<noteq> Suc (t * k) \\<longrightarrow>\n          Suc (t * k) \\<le> x \\<and>\n          x mod k = 0 \\<and>\n          (\\<forall>xa.\n              Suc (t * k) \\<le> xa \\<and>\n              xa \\<le> Suc (t * k +\n                            (x - Suc (Suc (t * k)))) \\<longrightarrow>\n              s xa = NoMsg))) \\<or>\n     (\\<exists>x.\n         (x = Suc (t * k) \\<longrightarrow>\n          s (Suc (t * k)) = m \\<and>\n          0 < Suc (t * k) mod k \\<and>\n          (\\<exists>x.\n              (x = Suc (Suc (t * k)) \\<longrightarrow>\n               Suc (Suc (t * k)) mod k = 0) \\<and>\n              (x \\<noteq> Suc (Suc (t * k)) \\<longrightarrow>\n               Suc (Suc (t * k)) \\<le> x \\<and>\n               x mod k = 0 \\<and>\n               (\\<forall>xa.\n                   Suc (Suc (t * k)) \\<le> xa \\<and>\n                   xa \\<le> Suc (Suc (t * k +\n(x - Suc (Suc (Suc (t * k)))))) \\<longrightarrow>\n                   s xa = NoMsg)))) \\<and>\n         (x \\<noteq> Suc (t * k) \\<longrightarrow>\n          Suc (t * k) \\<le> x \\<and>\n          s x = m \\<and>\n          0 < x mod k \\<and>\n          (\\<exists>xa.\n              (xa = Suc x \\<longrightarrow> Suc x mod k = 0) \\<and>\n              (xa \\<noteq> Suc x \\<longrightarrow>\n               Suc x \\<le> xa \\<and>\n               xa mod k = 0 \\<and>\n               (\\<forall>xb.\n                   Suc x \\<le> xb \\<and>\n                   xb \\<le> Suc (x + (xa - Suc (Suc x))) \\<longrightarrow>\n                   s xb = NoMsg))) \\<and>\n          (\\<forall>xa.\n              Suc (t * k) \\<le> xa \\<and>\n              xa \\<le> Suc (t * k +\n                            (x - Suc (Suc (t * k)))) \\<longrightarrow>\n              0 < xa mod k)))\\<rbrakk>\n    \\<Longrightarrow> \\<exists>x.\n                         (x < t * k + k - Suc 0 \\<longrightarrow>\n                          t * k \\<le> x \\<and>\n                          s x = m \\<and>\n                          (\\<forall>xa.\n                              Suc x \\<le> xa \\<and>\n                              xa \\<le> t * k + k - Suc 0 \\<longrightarrow>\n                              s xa = NoMsg)) \\<and>\n                         (\\<not> x < t * k + k - Suc 0 \\<longrightarrow>\n                          t * k \\<le> x \\<and>\n                          x = t * k + k - Suc 0 \\<and> s x = m)", "apply (rule between_imp_mod_gr0[OF Suc_le_lessD], assumption)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>i x.\n       \\<lbrakk>s i \\<noteq> NoMsg; \\<And>t. event t = (t mod k = 0);\n        t0 = k * t; Suc 0 < k; i \\<noteq> Suc (k * t); Suc (k * t) \\<le> i;\n        i < k * t + k - Suc 0;\n        \\<forall>x.\n           Suc i \\<le> x \\<and> x \\<le> k * t + k - Suc 0 \\<longrightarrow>\n           s x = NoMsg;\n        m = s i; 0 < i mod k; Suc (k * t) \\<le> x;\n        x \\<le> Suc (i - 2)\\<rbrakk>\n       \\<Longrightarrow> x < k * t + k\n 2. \\<And>i.\n       \\<lbrakk>m \\<noteq> NoMsg; \\<And>t. event t = (t mod k = 0);\n        t0 = t * k; Suc 0 < k;\n        i < t * k + k - Suc 0 \\<longrightarrow>\n        s i = m \\<and>\n        (\\<forall>x.\n            Suc i \\<le> x \\<and> x \\<le> t * k + k - Suc 0 \\<longrightarrow>\n            s x = NoMsg);\n        \\<not> i < t * k + k - Suc 0 \\<longrightarrow>\n        i = t * k + k - Suc 0 \\<and> s i = m;\n        i \\<noteq> Suc (t * k); Suc (t * k) \\<le> i;\n        \\<not> i < t * k + k - Suc 0\\<rbrakk>\n       \\<Longrightarrow> s i = m \\<and>\n                         0 < i mod k \\<and>\n                         (\\<exists>x.\n                             (x = Suc i \\<longrightarrow>\n                              Suc i mod k = 0) \\<and>\n                             (x \\<noteq> Suc i \\<longrightarrow>\n                              Suc i \\<le> x \\<and>\n                              x mod k = 0 \\<and>\n                              (\\<forall>xa.\n                                  Suc i \\<le> xa \\<and>\n                                  xa \\<le> Suc\n      (i + (x - Suc (Suc i))) \\<longrightarrow>\n                                  s xa = NoMsg))) \\<and>\n                         (\\<forall>x.\n                             Suc (t * k) \\<le> x \\<and>\n                             x \\<le> Suc (i - 2) \\<longrightarrow>\n                             0 < x mod k)\n 3. \\<lbrakk>m \\<noteq> NoMsg; \\<And>t. event t = (t mod k = 0); t0 = t * k;\n     Suc 0 < k;\n     s (t * k) = m \\<and>\n     (\\<exists>x.\n         (x = Suc (t * k) \\<longrightarrow> Suc (t * k) mod k = 0) \\<and>\n         (x \\<noteq> Suc (t * k) \\<longrightarrow>\n          Suc (t * k) \\<le> x \\<and>\n          x mod k = 0 \\<and>\n          (\\<forall>xa.\n              Suc (t * k) \\<le> xa \\<and>\n              xa \\<le> Suc (t * k +\n                            (x - Suc (Suc (t * k)))) \\<longrightarrow>\n              s xa = NoMsg))) \\<or>\n     (\\<exists>x.\n         (x = Suc (t * k) \\<longrightarrow>\n          s (Suc (t * k)) = m \\<and>\n          0 < Suc (t * k) mod k \\<and>\n          (\\<exists>x.\n              (x = Suc (Suc (t * k)) \\<longrightarrow>\n               Suc (Suc (t * k)) mod k = 0) \\<and>\n              (x \\<noteq> Suc (Suc (t * k)) \\<longrightarrow>\n               Suc (Suc (t * k)) \\<le> x \\<and>\n               x mod k = 0 \\<and>\n               (\\<forall>xa.\n                   Suc (Suc (t * k)) \\<le> xa \\<and>\n                   xa \\<le> Suc (Suc (t * k +\n(x - Suc (Suc (Suc (t * k)))))) \\<longrightarrow>\n                   s xa = NoMsg)))) \\<and>\n         (x \\<noteq> Suc (t * k) \\<longrightarrow>\n          Suc (t * k) \\<le> x \\<and>\n          s x = m \\<and>\n          0 < x mod k \\<and>\n          (\\<exists>xa.\n              (xa = Suc x \\<longrightarrow> Suc x mod k = 0) \\<and>\n              (xa \\<noteq> Suc x \\<longrightarrow>\n               Suc x \\<le> xa \\<and>\n               xa mod k = 0 \\<and>\n               (\\<forall>xb.\n                   Suc x \\<le> xb \\<and>\n                   xb \\<le> Suc (x + (xa - Suc (Suc x))) \\<longrightarrow>\n                   s xb = NoMsg))) \\<and>\n          (\\<forall>xa.\n              Suc (t * k) \\<le> xa \\<and>\n              xa \\<le> Suc (t * k +\n                            (x - Suc (Suc (t * k)))) \\<longrightarrow>\n              0 < xa mod k)))\\<rbrakk>\n    \\<Longrightarrow> \\<exists>x.\n                         (x < t * k + k - Suc 0 \\<longrightarrow>\n                          t * k \\<le> x \\<and>\n                          s x = m \\<and>\n                          (\\<forall>xa.\n                              Suc x \\<le> xa \\<and>\n                              xa \\<le> t * k + k - Suc 0 \\<longrightarrow>\n                              s xa = NoMsg)) \\<and>\n                         (\\<not> x < t * k + k - Suc 0 \\<longrightarrow>\n                          t * k \\<le> x \\<and>\n                          x = t * k + k - Suc 0 \\<and> s x = m)", "apply simp"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>i.\n       \\<lbrakk>m \\<noteq> NoMsg; \\<And>t. event t = (t mod k = 0);\n        t0 = t * k; Suc 0 < k;\n        i < t * k + k - Suc 0 \\<longrightarrow>\n        s i = m \\<and>\n        (\\<forall>x.\n            Suc i \\<le> x \\<and> x \\<le> t * k + k - Suc 0 \\<longrightarrow>\n            s x = NoMsg);\n        \\<not> i < t * k + k - Suc 0 \\<longrightarrow>\n        i = t * k + k - Suc 0 \\<and> s i = m;\n        i \\<noteq> Suc (t * k); Suc (t * k) \\<le> i;\n        \\<not> i < t * k + k - Suc 0\\<rbrakk>\n       \\<Longrightarrow> s i = m \\<and>\n                         0 < i mod k \\<and>\n                         (\\<exists>x.\n                             (x = Suc i \\<longrightarrow>\n                              Suc i mod k = 0) \\<and>\n                             (x \\<noteq> Suc i \\<longrightarrow>\n                              Suc i \\<le> x \\<and>\n                              x mod k = 0 \\<and>\n                              (\\<forall>xa.\n                                  Suc i \\<le> xa \\<and>\n                                  xa \\<le> Suc\n      (i + (x - Suc (Suc i))) \\<longrightarrow>\n                                  s xa = NoMsg))) \\<and>\n                         (\\<forall>x.\n                             Suc (t * k) \\<le> x \\<and>\n                             x \\<le> Suc (i - 2) \\<longrightarrow>\n                             0 < x mod k)\n 2. \\<lbrakk>m \\<noteq> NoMsg; \\<And>t. event t = (t mod k = 0); t0 = t * k;\n     Suc 0 < k;\n     s (t * k) = m \\<and>\n     (\\<exists>x.\n         (x = Suc (t * k) \\<longrightarrow> Suc (t * k) mod k = 0) \\<and>\n         (x \\<noteq> Suc (t * k) \\<longrightarrow>\n          Suc (t * k) \\<le> x \\<and>\n          x mod k = 0 \\<and>\n          (\\<forall>xa.\n              Suc (t * k) \\<le> xa \\<and>\n              xa \\<le> Suc (t * k +\n                            (x - Suc (Suc (t * k)))) \\<longrightarrow>\n              s xa = NoMsg))) \\<or>\n     (\\<exists>x.\n         (x = Suc (t * k) \\<longrightarrow>\n          s (Suc (t * k)) = m \\<and>\n          0 < Suc (t * k) mod k \\<and>\n          (\\<exists>x.\n              (x = Suc (Suc (t * k)) \\<longrightarrow>\n               Suc (Suc (t * k)) mod k = 0) \\<and>\n              (x \\<noteq> Suc (Suc (t * k)) \\<longrightarrow>\n               Suc (Suc (t * k)) \\<le> x \\<and>\n               x mod k = 0 \\<and>\n               (\\<forall>xa.\n                   Suc (Suc (t * k)) \\<le> xa \\<and>\n                   xa \\<le> Suc (Suc (t * k +\n(x - Suc (Suc (Suc (t * k)))))) \\<longrightarrow>\n                   s xa = NoMsg)))) \\<and>\n         (x \\<noteq> Suc (t * k) \\<longrightarrow>\n          Suc (t * k) \\<le> x \\<and>\n          s x = m \\<and>\n          0 < x mod k \\<and>\n          (\\<exists>xa.\n              (xa = Suc x \\<longrightarrow> Suc x mod k = 0) \\<and>\n              (xa \\<noteq> Suc x \\<longrightarrow>\n               Suc x \\<le> xa \\<and>\n               xa mod k = 0 \\<and>\n               (\\<forall>xb.\n                   Suc x \\<le> xb \\<and>\n                   xb \\<le> Suc (x + (xa - Suc (Suc x))) \\<longrightarrow>\n                   s xb = NoMsg))) \\<and>\n          (\\<forall>xa.\n              Suc (t * k) \\<le> xa \\<and>\n              xa \\<le> Suc (t * k +\n                            (x - Suc (Suc (t * k)))) \\<longrightarrow>\n              0 < xa mod k)))\\<rbrakk>\n    \\<Longrightarrow> \\<exists>x.\n                         (x < t * k + k - Suc 0 \\<longrightarrow>\n                          t * k \\<le> x \\<and>\n                          s x = m \\<and>\n                          (\\<forall>xa.\n                              Suc x \\<le> xa \\<and>\n                              xa \\<le> t * k + k - Suc 0 \\<longrightarrow>\n                              s xa = NoMsg)) \\<and>\n                         (\\<not> x < t * k + k - Suc 0 \\<longrightarrow>\n                          t * k \\<le> x \\<and>\n                          x = t * k + k - Suc 0 \\<and> s x = m)", "apply clarsimp"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>s (t * k + k - Suc 0) \\<noteq> NoMsg;\n     \\<And>t. event t = (t mod k = 0); t0 = t * k; Suc 0 < k;\n     t * k + k - Suc 0 \\<noteq> Suc (t * k);\n     Suc (t * k) \\<le> t * k + k - Suc 0; m = s (t * k + k - Suc 0)\\<rbrakk>\n    \\<Longrightarrow> 0 < (t * k + k - Suc 0) mod k \\<and>\n                      (\\<exists>x.\n                          x \\<noteq> t * k + k \\<longrightarrow>\n                          t * k + k \\<le> x \\<and>\n                          x mod k = 0 \\<and>\n                          (\\<forall>xa.\n                              t * k + k \\<le> xa \\<and>\n                              xa \\<le> t * k + k +\n (x - Suc (t * k + k)) \\<longrightarrow>\n                              s xa = NoMsg)) \\<and>\n                      (\\<forall>x.\n                          Suc (t * k) \\<le> x \\<and>\n                          x \\<le> Suc (t * k + k -\n Suc (Suc (Suc 0))) \\<longrightarrow>\n                          0 < x mod k)\n 2. \\<lbrakk>m \\<noteq> NoMsg; \\<And>t. event t = (t mod k = 0); t0 = t * k;\n     Suc 0 < k;\n     s (t * k) = m \\<and>\n     (\\<exists>x.\n         (x = Suc (t * k) \\<longrightarrow> Suc (t * k) mod k = 0) \\<and>\n         (x \\<noteq> Suc (t * k) \\<longrightarrow>\n          Suc (t * k) \\<le> x \\<and>\n          x mod k = 0 \\<and>\n          (\\<forall>xa.\n              Suc (t * k) \\<le> xa \\<and>\n              xa \\<le> Suc (t * k +\n                            (x - Suc (Suc (t * k)))) \\<longrightarrow>\n              s xa = NoMsg))) \\<or>\n     (\\<exists>x.\n         (x = Suc (t * k) \\<longrightarrow>\n          s (Suc (t * k)) = m \\<and>\n          0 < Suc (t * k) mod k \\<and>\n          (\\<exists>x.\n              (x = Suc (Suc (t * k)) \\<longrightarrow>\n               Suc (Suc (t * k)) mod k = 0) \\<and>\n              (x \\<noteq> Suc (Suc (t * k)) \\<longrightarrow>\n               Suc (Suc (t * k)) \\<le> x \\<and>\n               x mod k = 0 \\<and>\n               (\\<forall>xa.\n                   Suc (Suc (t * k)) \\<le> xa \\<and>\n                   xa \\<le> Suc (Suc (t * k +\n(x - Suc (Suc (Suc (t * k)))))) \\<longrightarrow>\n                   s xa = NoMsg)))) \\<and>\n         (x \\<noteq> Suc (t * k) \\<longrightarrow>\n          Suc (t * k) \\<le> x \\<and>\n          s x = m \\<and>\n          0 < x mod k \\<and>\n          (\\<exists>xa.\n              (xa = Suc x \\<longrightarrow> Suc x mod k = 0) \\<and>\n              (xa \\<noteq> Suc x \\<longrightarrow>\n               Suc x \\<le> xa \\<and>\n               xa mod k = 0 \\<and>\n               (\\<forall>xb.\n                   Suc x \\<le> xb \\<and>\n                   xb \\<le> Suc (x + (xa - Suc (Suc x))) \\<longrightarrow>\n                   s xb = NoMsg))) \\<and>\n          (\\<forall>xa.\n              Suc (t * k) \\<le> xa \\<and>\n              xa \\<le> Suc (t * k +\n                            (x - Suc (Suc (t * k)))) \\<longrightarrow>\n              0 < xa mod k)))\\<rbrakk>\n    \\<Longrightarrow> \\<exists>x.\n                         (x < t * k + k - Suc 0 \\<longrightarrow>\n                          t * k \\<le> x \\<and>\n                          s x = m \\<and>\n                          (\\<forall>xa.\n                              Suc x \\<le> xa \\<and>\n                              xa \\<le> t * k + k - Suc 0 \\<longrightarrow>\n                              s xa = NoMsg)) \\<and>\n                         (\\<not> x < t * k + k - Suc 0 \\<longrightarrow>\n                          t * k \\<le> x \\<and>\n                          x = t * k + k - Suc 0 \\<and> s x = m)", "apply (subgoal_tac \"Suc (Suc 0) < k\")"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>s (t * k + k - Suc 0) \\<noteq> NoMsg;\n     \\<And>t. event t = (t mod k = 0); t0 = t * k; Suc 0 < k;\n     t * k + k - Suc 0 \\<noteq> Suc (t * k);\n     Suc (t * k) \\<le> t * k + k - Suc 0; m = s (t * k + k - Suc 0);\n     Suc (Suc 0) < k\\<rbrakk>\n    \\<Longrightarrow> 0 < (t * k + k - Suc 0) mod k \\<and>\n                      (\\<exists>x.\n                          x \\<noteq> t * k + k \\<longrightarrow>\n                          t * k + k \\<le> x \\<and>\n                          x mod k = 0 \\<and>\n                          (\\<forall>xa.\n                              t * k + k \\<le> xa \\<and>\n                              xa \\<le> t * k + k +\n (x - Suc (t * k + k)) \\<longrightarrow>\n                              s xa = NoMsg)) \\<and>\n                      (\\<forall>x.\n                          Suc (t * k) \\<le> x \\<and>\n                          x \\<le> Suc (t * k + k -\n Suc (Suc (Suc 0))) \\<longrightarrow>\n                          0 < x mod k)\n 2. \\<lbrakk>s (t * k + k - Suc 0) \\<noteq> NoMsg;\n     \\<And>t. event t = (t mod k = 0); t0 = t * k; Suc 0 < k;\n     t * k + k - Suc 0 \\<noteq> Suc (t * k);\n     Suc (t * k) \\<le> t * k + k - Suc 0; m = s (t * k + k - Suc 0)\\<rbrakk>\n    \\<Longrightarrow> Suc (Suc 0) < k\n 3. \\<lbrakk>m \\<noteq> NoMsg; \\<And>t. event t = (t mod k = 0); t0 = t * k;\n     Suc 0 < k;\n     s (t * k) = m \\<and>\n     (\\<exists>x.\n         (x = Suc (t * k) \\<longrightarrow> Suc (t * k) mod k = 0) \\<and>\n         (x \\<noteq> Suc (t * k) \\<longrightarrow>\n          Suc (t * k) \\<le> x \\<and>\n          x mod k = 0 \\<and>\n          (\\<forall>xa.\n              Suc (t * k) \\<le> xa \\<and>\n              xa \\<le> Suc (t * k +\n                            (x - Suc (Suc (t * k)))) \\<longrightarrow>\n              s xa = NoMsg))) \\<or>\n     (\\<exists>x.\n         (x = Suc (t * k) \\<longrightarrow>\n          s (Suc (t * k)) = m \\<and>\n          0 < Suc (t * k) mod k \\<and>\n          (\\<exists>x.\n              (x = Suc (Suc (t * k)) \\<longrightarrow>\n               Suc (Suc (t * k)) mod k = 0) \\<and>\n              (x \\<noteq> Suc (Suc (t * k)) \\<longrightarrow>\n               Suc (Suc (t * k)) \\<le> x \\<and>\n               x mod k = 0 \\<and>\n               (\\<forall>xa.\n                   Suc (Suc (t * k)) \\<le> xa \\<and>\n                   xa \\<le> Suc (Suc (t * k +\n(x - Suc (Suc (Suc (t * k)))))) \\<longrightarrow>\n                   s xa = NoMsg)))) \\<and>\n         (x \\<noteq> Suc (t * k) \\<longrightarrow>\n          Suc (t * k) \\<le> x \\<and>\n          s x = m \\<and>\n          0 < x mod k \\<and>\n          (\\<exists>xa.\n              (xa = Suc x \\<longrightarrow> Suc x mod k = 0) \\<and>\n              (xa \\<noteq> Suc x \\<longrightarrow>\n               Suc x \\<le> xa \\<and>\n               xa mod k = 0 \\<and>\n               (\\<forall>xb.\n                   Suc x \\<le> xb \\<and>\n                   xb \\<le> Suc (x + (xa - Suc (Suc x))) \\<longrightarrow>\n                   s xb = NoMsg))) \\<and>\n          (\\<forall>xa.\n              Suc (t * k) \\<le> xa \\<and>\n              xa \\<le> Suc (t * k +\n                            (x - Suc (Suc (t * k)))) \\<longrightarrow>\n              0 < xa mod k)))\\<rbrakk>\n    \\<Longrightarrow> \\<exists>x.\n                         (x < t * k + k - Suc 0 \\<longrightarrow>\n                          t * k \\<le> x \\<and>\n                          s x = m \\<and>\n                          (\\<forall>xa.\n                              Suc x \\<le> xa \\<and>\n                              xa \\<le> t * k + k - Suc 0 \\<longrightarrow>\n                              s xa = NoMsg)) \\<and>\n                         (\\<not> x < t * k + k - Suc 0 \\<longrightarrow>\n                          t * k \\<le> x \\<and>\n                          x = t * k + k - Suc 0 \\<and> s x = m)", "prefer 2"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>s (t * k + k - Suc 0) \\<noteq> NoMsg;\n     \\<And>t. event t = (t mod k = 0); t0 = t * k; Suc 0 < k;\n     t * k + k - Suc 0 \\<noteq> Suc (t * k);\n     Suc (t * k) \\<le> t * k + k - Suc 0; m = s (t * k + k - Suc 0)\\<rbrakk>\n    \\<Longrightarrow> Suc (Suc 0) < k\n 2. \\<lbrakk>s (t * k + k - Suc 0) \\<noteq> NoMsg;\n     \\<And>t. event t = (t mod k = 0); t0 = t * k; Suc 0 < k;\n     t * k + k - Suc 0 \\<noteq> Suc (t * k);\n     Suc (t * k) \\<le> t * k + k - Suc 0; m = s (t * k + k - Suc 0);\n     Suc (Suc 0) < k\\<rbrakk>\n    \\<Longrightarrow> 0 < (t * k + k - Suc 0) mod k \\<and>\n                      (\\<exists>x.\n                          x \\<noteq> t * k + k \\<longrightarrow>\n                          t * k + k \\<le> x \\<and>\n                          x mod k = 0 \\<and>\n                          (\\<forall>xa.\n                              t * k + k \\<le> xa \\<and>\n                              xa \\<le> t * k + k +\n (x - Suc (t * k + k)) \\<longrightarrow>\n                              s xa = NoMsg)) \\<and>\n                      (\\<forall>x.\n                          Suc (t * k) \\<le> x \\<and>\n                          x \\<le> Suc (t * k + k -\n Suc (Suc (Suc 0))) \\<longrightarrow>\n                          0 < x mod k)\n 3. \\<lbrakk>m \\<noteq> NoMsg; \\<And>t. event t = (t mod k = 0); t0 = t * k;\n     Suc 0 < k;\n     s (t * k) = m \\<and>\n     (\\<exists>x.\n         (x = Suc (t * k) \\<longrightarrow> Suc (t * k) mod k = 0) \\<and>\n         (x \\<noteq> Suc (t * k) \\<longrightarrow>\n          Suc (t * k) \\<le> x \\<and>\n          x mod k = 0 \\<and>\n          (\\<forall>xa.\n              Suc (t * k) \\<le> xa \\<and>\n              xa \\<le> Suc (t * k +\n                            (x - Suc (Suc (t * k)))) \\<longrightarrow>\n              s xa = NoMsg))) \\<or>\n     (\\<exists>x.\n         (x = Suc (t * k) \\<longrightarrow>\n          s (Suc (t * k)) = m \\<and>\n          0 < Suc (t * k) mod k \\<and>\n          (\\<exists>x.\n              (x = Suc (Suc (t * k)) \\<longrightarrow>\n               Suc (Suc (t * k)) mod k = 0) \\<and>\n              (x \\<noteq> Suc (Suc (t * k)) \\<longrightarrow>\n               Suc (Suc (t * k)) \\<le> x \\<and>\n               x mod k = 0 \\<and>\n               (\\<forall>xa.\n                   Suc (Suc (t * k)) \\<le> xa \\<and>\n                   xa \\<le> Suc (Suc (t * k +\n(x - Suc (Suc (Suc (t * k)))))) \\<longrightarrow>\n                   s xa = NoMsg)))) \\<and>\n         (x \\<noteq> Suc (t * k) \\<longrightarrow>\n          Suc (t * k) \\<le> x \\<and>\n          s x = m \\<and>\n          0 < x mod k \\<and>\n          (\\<exists>xa.\n              (xa = Suc x \\<longrightarrow> Suc x mod k = 0) \\<and>\n              (xa \\<noteq> Suc x \\<longrightarrow>\n               Suc x \\<le> xa \\<and>\n               xa mod k = 0 \\<and>\n               (\\<forall>xb.\n                   Suc x \\<le> xb \\<and>\n                   xb \\<le> Suc (x + (xa - Suc (Suc x))) \\<longrightarrow>\n                   s xb = NoMsg))) \\<and>\n          (\\<forall>xa.\n              Suc (t * k) \\<le> xa \\<and>\n              xa \\<le> Suc (t * k +\n                            (x - Suc (Suc (t * k)))) \\<longrightarrow>\n              0 < xa mod k)))\\<rbrakk>\n    \\<Longrightarrow> \\<exists>x.\n                         (x < t * k + k - Suc 0 \\<longrightarrow>\n                          t * k \\<le> x \\<and>\n                          s x = m \\<and>\n                          (\\<forall>xa.\n                              Suc x \\<le> xa \\<and>\n                              xa \\<le> t * k + k - Suc 0 \\<longrightarrow>\n                              s xa = NoMsg)) \\<and>\n                         (\\<not> x < t * k + k - Suc 0 \\<longrightarrow>\n                          t * k \\<le> x \\<and>\n                          x = t * k + k - Suc 0 \\<and> s x = m)", "apply simp"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>s (t * k + k - Suc 0) \\<noteq> NoMsg;\n     \\<And>t. event t = (t mod k = 0); t0 = t * k; Suc 0 < k;\n     t * k + k - Suc 0 \\<noteq> Suc (t * k);\n     Suc (t * k) \\<le> t * k + k - Suc 0; m = s (t * k + k - Suc 0);\n     Suc (Suc 0) < k\\<rbrakk>\n    \\<Longrightarrow> 0 < (t * k + k - Suc 0) mod k \\<and>\n                      (\\<exists>x.\n                          x \\<noteq> t * k + k \\<longrightarrow>\n                          t * k + k \\<le> x \\<and>\n                          x mod k = 0 \\<and>\n                          (\\<forall>xa.\n                              t * k + k \\<le> xa \\<and>\n                              xa \\<le> t * k + k +\n (x - Suc (t * k + k)) \\<longrightarrow>\n                              s xa = NoMsg)) \\<and>\n                      (\\<forall>x.\n                          Suc (t * k) \\<le> x \\<and>\n                          x \\<le> Suc (t * k + k -\n Suc (Suc (Suc 0))) \\<longrightarrow>\n                          0 < x mod k)\n 2. \\<lbrakk>m \\<noteq> NoMsg; \\<And>t. event t = (t mod k = 0); t0 = t * k;\n     Suc 0 < k;\n     s (t * k) = m \\<and>\n     (\\<exists>x.\n         (x = Suc (t * k) \\<longrightarrow> Suc (t * k) mod k = 0) \\<and>\n         (x \\<noteq> Suc (t * k) \\<longrightarrow>\n          Suc (t * k) \\<le> x \\<and>\n          x mod k = 0 \\<and>\n          (\\<forall>xa.\n              Suc (t * k) \\<le> xa \\<and>\n              xa \\<le> Suc (t * k +\n                            (x - Suc (Suc (t * k)))) \\<longrightarrow>\n              s xa = NoMsg))) \\<or>\n     (\\<exists>x.\n         (x = Suc (t * k) \\<longrightarrow>\n          s (Suc (t * k)) = m \\<and>\n          0 < Suc (t * k) mod k \\<and>\n          (\\<exists>x.\n              (x = Suc (Suc (t * k)) \\<longrightarrow>\n               Suc (Suc (t * k)) mod k = 0) \\<and>\n              (x \\<noteq> Suc (Suc (t * k)) \\<longrightarrow>\n               Suc (Suc (t * k)) \\<le> x \\<and>\n               x mod k = 0 \\<and>\n               (\\<forall>xa.\n                   Suc (Suc (t * k)) \\<le> xa \\<and>\n                   xa \\<le> Suc (Suc (t * k +\n(x - Suc (Suc (Suc (t * k)))))) \\<longrightarrow>\n                   s xa = NoMsg)))) \\<and>\n         (x \\<noteq> Suc (t * k) \\<longrightarrow>\n          Suc (t * k) \\<le> x \\<and>\n          s x = m \\<and>\n          0 < x mod k \\<and>\n          (\\<exists>xa.\n              (xa = Suc x \\<longrightarrow> Suc x mod k = 0) \\<and>\n              (xa \\<noteq> Suc x \\<longrightarrow>\n               Suc x \\<le> xa \\<and>\n               xa mod k = 0 \\<and>\n               (\\<forall>xb.\n                   Suc x \\<le> xb \\<and>\n                   xb \\<le> Suc (x + (xa - Suc (Suc x))) \\<longrightarrow>\n                   s xb = NoMsg))) \\<and>\n          (\\<forall>xa.\n              Suc (t * k) \\<le> xa \\<and>\n              xa \\<le> Suc (t * k +\n                            (x - Suc (Suc (t * k)))) \\<longrightarrow>\n              0 < xa mod k)))\\<rbrakk>\n    \\<Longrightarrow> \\<exists>x.\n                         (x < t * k + k - Suc 0 \\<longrightarrow>\n                          t * k \\<le> x \\<and>\n                          s x = m \\<and>\n                          (\\<forall>xa.\n                              Suc x \\<le> xa \\<and>\n                              xa \\<le> t * k + k - Suc 0 \\<longrightarrow>\n                              s xa = NoMsg)) \\<and>\n                         (\\<not> x < t * k + k - Suc 0 \\<longrightarrow>\n                          t * k \\<le> x \\<and>\n                          x = t * k + k - Suc 0 \\<and> s x = m)", "apply (simp add: mod_0_imp_mod_pred)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>s (t * k + k - Suc 0) \\<noteq> NoMsg;\n     \\<And>t. event t = (t mod k = 0); t0 = t * k;\n     t * k + k - Suc 0 \\<noteq> Suc (t * k);\n     Suc (t * k) \\<le> t * k + k - Suc 0; m = s (t * k + k - Suc 0);\n     Suc (Suc 0) < k\\<rbrakk>\n    \\<Longrightarrow> (\\<exists>x.\n                          x \\<noteq> t * k + k \\<longrightarrow>\n                          t * k + k \\<le> x \\<and>\n                          x mod k = 0 \\<and>\n                          (\\<forall>xa.\n                              t * k + k \\<le> xa \\<and>\n                              xa \\<le> t * k + k +\n (x - Suc (t * k + k)) \\<longrightarrow>\n                              s xa = NoMsg)) \\<and>\n                      (\\<forall>x.\n                          Suc (t * k) \\<le> x \\<and>\n                          x \\<le> Suc (t * k + k -\n Suc (Suc (Suc 0))) \\<longrightarrow>\n                          0 < x mod k)\n 2. \\<lbrakk>m \\<noteq> NoMsg; \\<And>t. event t = (t mod k = 0); t0 = t * k;\n     Suc 0 < k;\n     s (t * k) = m \\<and>\n     (\\<exists>x.\n         (x = Suc (t * k) \\<longrightarrow> Suc (t * k) mod k = 0) \\<and>\n         (x \\<noteq> Suc (t * k) \\<longrightarrow>\n          Suc (t * k) \\<le> x \\<and>\n          x mod k = 0 \\<and>\n          (\\<forall>xa.\n              Suc (t * k) \\<le> xa \\<and>\n              xa \\<le> Suc (t * k +\n                            (x - Suc (Suc (t * k)))) \\<longrightarrow>\n              s xa = NoMsg))) \\<or>\n     (\\<exists>x.\n         (x = Suc (t * k) \\<longrightarrow>\n          s (Suc (t * k)) = m \\<and>\n          0 < Suc (t * k) mod k \\<and>\n          (\\<exists>x.\n              (x = Suc (Suc (t * k)) \\<longrightarrow>\n               Suc (Suc (t * k)) mod k = 0) \\<and>\n              (x \\<noteq> Suc (Suc (t * k)) \\<longrightarrow>\n               Suc (Suc (t * k)) \\<le> x \\<and>\n               x mod k = 0 \\<and>\n               (\\<forall>xa.\n                   Suc (Suc (t * k)) \\<le> xa \\<and>\n                   xa \\<le> Suc (Suc (t * k +\n(x - Suc (Suc (Suc (t * k)))))) \\<longrightarrow>\n                   s xa = NoMsg)))) \\<and>\n         (x \\<noteq> Suc (t * k) \\<longrightarrow>\n          Suc (t * k) \\<le> x \\<and>\n          s x = m \\<and>\n          0 < x mod k \\<and>\n          (\\<exists>xa.\n              (xa = Suc x \\<longrightarrow> Suc x mod k = 0) \\<and>\n              (xa \\<noteq> Suc x \\<longrightarrow>\n               Suc x \\<le> xa \\<and>\n               xa mod k = 0 \\<and>\n               (\\<forall>xb.\n                   Suc x \\<le> xb \\<and>\n                   xb \\<le> Suc (x + (xa - Suc (Suc x))) \\<longrightarrow>\n                   s xb = NoMsg))) \\<and>\n          (\\<forall>xa.\n              Suc (t * k) \\<le> xa \\<and>\n              xa \\<le> Suc (t * k +\n                            (x - Suc (Suc (t * k)))) \\<longrightarrow>\n              0 < xa mod k)))\\<rbrakk>\n    \\<Longrightarrow> \\<exists>x.\n                         (x < t * k + k - Suc 0 \\<longrightarrow>\n                          t * k \\<le> x \\<and>\n                          s x = m \\<and>\n                          (\\<forall>xa.\n                              Suc x \\<le> xa \\<and>\n                              xa \\<le> t * k + k - Suc 0 \\<longrightarrow>\n                              s xa = NoMsg)) \\<and>\n                         (\\<not> x < t * k + k - Suc 0 \\<longrightarrow>\n                          t * k \\<le> x \\<and>\n                          x = t * k + k - Suc 0 \\<and> s x = m)", "apply (rule conjI, blast)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>s (t * k + k - Suc 0) \\<noteq> NoMsg;\n     \\<And>t. event t = (t mod k = 0); t0 = t * k;\n     t * k + k - Suc 0 \\<noteq> Suc (t * k);\n     Suc (t * k) \\<le> t * k + k - Suc 0; m = s (t * k + k - Suc 0);\n     Suc (Suc 0) < k\\<rbrakk>\n    \\<Longrightarrow> \\<forall>x.\n                         Suc (t * k) \\<le> x \\<and>\n                         x \\<le> Suc (t * k + k -\nSuc (Suc (Suc 0))) \\<longrightarrow>\n                         0 < x mod k\n 2. \\<lbrakk>m \\<noteq> NoMsg; \\<And>t. event t = (t mod k = 0); t0 = t * k;\n     Suc 0 < k;\n     s (t * k) = m \\<and>\n     (\\<exists>x.\n         (x = Suc (t * k) \\<longrightarrow> Suc (t * k) mod k = 0) \\<and>\n         (x \\<noteq> Suc (t * k) \\<longrightarrow>\n          Suc (t * k) \\<le> x \\<and>\n          x mod k = 0 \\<and>\n          (\\<forall>xa.\n              Suc (t * k) \\<le> xa \\<and>\n              xa \\<le> Suc (t * k +\n                            (x - Suc (Suc (t * k)))) \\<longrightarrow>\n              s xa = NoMsg))) \\<or>\n     (\\<exists>x.\n         (x = Suc (t * k) \\<longrightarrow>\n          s (Suc (t * k)) = m \\<and>\n          0 < Suc (t * k) mod k \\<and>\n          (\\<exists>x.\n              (x = Suc (Suc (t * k)) \\<longrightarrow>\n               Suc (Suc (t * k)) mod k = 0) \\<and>\n              (x \\<noteq> Suc (Suc (t * k)) \\<longrightarrow>\n               Suc (Suc (t * k)) \\<le> x \\<and>\n               x mod k = 0 \\<and>\n               (\\<forall>xa.\n                   Suc (Suc (t * k)) \\<le> xa \\<and>\n                   xa \\<le> Suc (Suc (t * k +\n(x - Suc (Suc (Suc (t * k)))))) \\<longrightarrow>\n                   s xa = NoMsg)))) \\<and>\n         (x \\<noteq> Suc (t * k) \\<longrightarrow>\n          Suc (t * k) \\<le> x \\<and>\n          s x = m \\<and>\n          0 < x mod k \\<and>\n          (\\<exists>xa.\n              (xa = Suc x \\<longrightarrow> Suc x mod k = 0) \\<and>\n              (xa \\<noteq> Suc x \\<longrightarrow>\n               Suc x \\<le> xa \\<and>\n               xa mod k = 0 \\<and>\n               (\\<forall>xb.\n                   Suc x \\<le> xb \\<and>\n                   xb \\<le> Suc (x + (xa - Suc (Suc x))) \\<longrightarrow>\n                   s xb = NoMsg))) \\<and>\n          (\\<forall>xa.\n              Suc (t * k) \\<le> xa \\<and>\n              xa \\<le> Suc (t * k +\n                            (x - Suc (Suc (t * k)))) \\<longrightarrow>\n              0 < xa mod k)))\\<rbrakk>\n    \\<Longrightarrow> \\<exists>x.\n                         (x < t * k + k - Suc 0 \\<longrightarrow>\n                          t * k \\<le> x \\<and>\n                          s x = m \\<and>\n                          (\\<forall>xa.\n                              Suc x \\<le> xa \\<and>\n                              xa \\<le> t * k + k - Suc 0 \\<longrightarrow>\n                              s xa = NoMsg)) \\<and>\n                         (\\<not> x < t * k + k - Suc 0 \\<longrightarrow>\n                          t * k \\<le> x \\<and>\n                          x = t * k + k - Suc 0 \\<and> s x = m)", "apply clarify"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>s (t * k + k - Suc 0) \\<noteq> NoMsg;\n        \\<And>t. event t = (t mod k = 0); t0 = t * k;\n        t * k + k - Suc 0 \\<noteq> Suc (t * k);\n        Suc (t * k) \\<le> t * k + k - Suc 0; m = s (t * k + k - Suc 0);\n        Suc (Suc 0) < k; Suc (t * k) \\<le> x;\n        x \\<le> Suc (t * k + k - Suc (Suc (Suc 0)))\\<rbrakk>\n       \\<Longrightarrow> 0 < x mod k\n 2. \\<lbrakk>m \\<noteq> NoMsg; \\<And>t. event t = (t mod k = 0); t0 = t * k;\n     Suc 0 < k;\n     s (t * k) = m \\<and>\n     (\\<exists>x.\n         (x = Suc (t * k) \\<longrightarrow> Suc (t * k) mod k = 0) \\<and>\n         (x \\<noteq> Suc (t * k) \\<longrightarrow>\n          Suc (t * k) \\<le> x \\<and>\n          x mod k = 0 \\<and>\n          (\\<forall>xa.\n              Suc (t * k) \\<le> xa \\<and>\n              xa \\<le> Suc (t * k +\n                            (x - Suc (Suc (t * k)))) \\<longrightarrow>\n              s xa = NoMsg))) \\<or>\n     (\\<exists>x.\n         (x = Suc (t * k) \\<longrightarrow>\n          s (Suc (t * k)) = m \\<and>\n          0 < Suc (t * k) mod k \\<and>\n          (\\<exists>x.\n              (x = Suc (Suc (t * k)) \\<longrightarrow>\n               Suc (Suc (t * k)) mod k = 0) \\<and>\n              (x \\<noteq> Suc (Suc (t * k)) \\<longrightarrow>\n               Suc (Suc (t * k)) \\<le> x \\<and>\n               x mod k = 0 \\<and>\n               (\\<forall>xa.\n                   Suc (Suc (t * k)) \\<le> xa \\<and>\n                   xa \\<le> Suc (Suc (t * k +\n(x - Suc (Suc (Suc (t * k)))))) \\<longrightarrow>\n                   s xa = NoMsg)))) \\<and>\n         (x \\<noteq> Suc (t * k) \\<longrightarrow>\n          Suc (t * k) \\<le> x \\<and>\n          s x = m \\<and>\n          0 < x mod k \\<and>\n          (\\<exists>xa.\n              (xa = Suc x \\<longrightarrow> Suc x mod k = 0) \\<and>\n              (xa \\<noteq> Suc x \\<longrightarrow>\n               Suc x \\<le> xa \\<and>\n               xa mod k = 0 \\<and>\n               (\\<forall>xb.\n                   Suc x \\<le> xb \\<and>\n                   xb \\<le> Suc (x + (xa - Suc (Suc x))) \\<longrightarrow>\n                   s xb = NoMsg))) \\<and>\n          (\\<forall>xa.\n              Suc (t * k) \\<le> xa \\<and>\n              xa \\<le> Suc (t * k +\n                            (x - Suc (Suc (t * k)))) \\<longrightarrow>\n              0 < xa mod k)))\\<rbrakk>\n    \\<Longrightarrow> \\<exists>x.\n                         (x < t * k + k - Suc 0 \\<longrightarrow>\n                          t * k \\<le> x \\<and>\n                          s x = m \\<and>\n                          (\\<forall>xa.\n                              Suc x \\<le> xa \\<and>\n                              xa \\<le> t * k + k - Suc 0 \\<longrightarrow>\n                              s xa = NoMsg)) \\<and>\n                         (\\<not> x < t * k + k - Suc 0 \\<longrightarrow>\n                          t * k \\<le> x \\<and>\n                          x = t * k + k - Suc 0 \\<and> s x = m)", "apply (simp add: mult.commute[of t])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>s (k * t + k - Suc 0) \\<noteq> NoMsg;\n        \\<And>t. event t = (t mod k = 0); t0 = k * t;\n        k * t + k - Suc 0 \\<noteq> Suc (k * t);\n        Suc (k * t) \\<le> k * t + k - Suc 0; m = s (k * t + k - Suc 0);\n        Suc (Suc 0) < k; Suc (k * t) \\<le> x;\n        x \\<le> Suc (k * t + k - Suc (Suc (Suc 0)))\\<rbrakk>\n       \\<Longrightarrow> 0 < x mod k\n 2. \\<lbrakk>m \\<noteq> NoMsg; \\<And>t. event t = (t mod k = 0); t0 = t * k;\n     Suc 0 < k;\n     s (t * k) = m \\<and>\n     (\\<exists>x.\n         (x = Suc (t * k) \\<longrightarrow> Suc (t * k) mod k = 0) \\<and>\n         (x \\<noteq> Suc (t * k) \\<longrightarrow>\n          Suc (t * k) \\<le> x \\<and>\n          x mod k = 0 \\<and>\n          (\\<forall>xa.\n              Suc (t * k) \\<le> xa \\<and>\n              xa \\<le> Suc (t * k +\n                            (x - Suc (Suc (t * k)))) \\<longrightarrow>\n              s xa = NoMsg))) \\<or>\n     (\\<exists>x.\n         (x = Suc (t * k) \\<longrightarrow>\n          s (Suc (t * k)) = m \\<and>\n          0 < Suc (t * k) mod k \\<and>\n          (\\<exists>x.\n              (x = Suc (Suc (t * k)) \\<longrightarrow>\n               Suc (Suc (t * k)) mod k = 0) \\<and>\n              (x \\<noteq> Suc (Suc (t * k)) \\<longrightarrow>\n               Suc (Suc (t * k)) \\<le> x \\<and>\n               x mod k = 0 \\<and>\n               (\\<forall>xa.\n                   Suc (Suc (t * k)) \\<le> xa \\<and>\n                   xa \\<le> Suc (Suc (t * k +\n(x - Suc (Suc (Suc (t * k)))))) \\<longrightarrow>\n                   s xa = NoMsg)))) \\<and>\n         (x \\<noteq> Suc (t * k) \\<longrightarrow>\n          Suc (t * k) \\<le> x \\<and>\n          s x = m \\<and>\n          0 < x mod k \\<and>\n          (\\<exists>xa.\n              (xa = Suc x \\<longrightarrow> Suc x mod k = 0) \\<and>\n              (xa \\<noteq> Suc x \\<longrightarrow>\n               Suc x \\<le> xa \\<and>\n               xa mod k = 0 \\<and>\n               (\\<forall>xb.\n                   Suc x \\<le> xb \\<and>\n                   xb \\<le> Suc (x + (xa - Suc (Suc x))) \\<longrightarrow>\n                   s xb = NoMsg))) \\<and>\n          (\\<forall>xa.\n              Suc (t * k) \\<le> xa \\<and>\n              xa \\<le> Suc (t * k +\n                            (x - Suc (Suc (t * k)))) \\<longrightarrow>\n              0 < xa mod k)))\\<rbrakk>\n    \\<Longrightarrow> \\<exists>x.\n                         (x < t * k + k - Suc 0 \\<longrightarrow>\n                          t * k \\<le> x \\<and>\n                          s x = m \\<and>\n                          (\\<forall>xa.\n                              Suc x \\<le> xa \\<and>\n                              xa \\<le> t * k + k - Suc 0 \\<longrightarrow>\n                              s xa = NoMsg)) \\<and>\n                         (\\<not> x < t * k + k - Suc 0 \\<longrightarrow>\n                          t * k \\<le> x \\<and>\n                          x = t * k + k - Suc 0 \\<and> s x = m)", "apply (rule between_imp_mod_gr0[OF Suc_le_lessD], assumption)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>s (k * t + k - Suc 0) \\<noteq> NoMsg;\n        \\<And>t. event t = (t mod k = 0); t0 = k * t;\n        k * t + k - Suc 0 \\<noteq> Suc (k * t);\n        Suc (k * t) \\<le> k * t + k - Suc 0; m = s (k * t + k - Suc 0);\n        Suc (Suc 0) < k; Suc (k * t) \\<le> x;\n        x \\<le> Suc (k * t + k - Suc (Suc (Suc 0)))\\<rbrakk>\n       \\<Longrightarrow> x < k * t + k\n 2. \\<lbrakk>m \\<noteq> NoMsg; \\<And>t. event t = (t mod k = 0); t0 = t * k;\n     Suc 0 < k;\n     s (t * k) = m \\<and>\n     (\\<exists>x.\n         (x = Suc (t * k) \\<longrightarrow> Suc (t * k) mod k = 0) \\<and>\n         (x \\<noteq> Suc (t * k) \\<longrightarrow>\n          Suc (t * k) \\<le> x \\<and>\n          x mod k = 0 \\<and>\n          (\\<forall>xa.\n              Suc (t * k) \\<le> xa \\<and>\n              xa \\<le> Suc (t * k +\n                            (x - Suc (Suc (t * k)))) \\<longrightarrow>\n              s xa = NoMsg))) \\<or>\n     (\\<exists>x.\n         (x = Suc (t * k) \\<longrightarrow>\n          s (Suc (t * k)) = m \\<and>\n          0 < Suc (t * k) mod k \\<and>\n          (\\<exists>x.\n              (x = Suc (Suc (t * k)) \\<longrightarrow>\n               Suc (Suc (t * k)) mod k = 0) \\<and>\n              (x \\<noteq> Suc (Suc (t * k)) \\<longrightarrow>\n               Suc (Suc (t * k)) \\<le> x \\<and>\n               x mod k = 0 \\<and>\n               (\\<forall>xa.\n                   Suc (Suc (t * k)) \\<le> xa \\<and>\n                   xa \\<le> Suc (Suc (t * k +\n(x - Suc (Suc (Suc (t * k)))))) \\<longrightarrow>\n                   s xa = NoMsg)))) \\<and>\n         (x \\<noteq> Suc (t * k) \\<longrightarrow>\n          Suc (t * k) \\<le> x \\<and>\n          s x = m \\<and>\n          0 < x mod k \\<and>\n          (\\<exists>xa.\n              (xa = Suc x \\<longrightarrow> Suc x mod k = 0) \\<and>\n              (xa \\<noteq> Suc x \\<longrightarrow>\n               Suc x \\<le> xa \\<and>\n               xa mod k = 0 \\<and>\n               (\\<forall>xb.\n                   Suc x \\<le> xb \\<and>\n                   xb \\<le> Suc (x + (xa - Suc (Suc x))) \\<longrightarrow>\n                   s xb = NoMsg))) \\<and>\n          (\\<forall>xa.\n              Suc (t * k) \\<le> xa \\<and>\n              xa \\<le> Suc (t * k +\n                            (x - Suc (Suc (t * k)))) \\<longrightarrow>\n              0 < xa mod k)))\\<rbrakk>\n    \\<Longrightarrow> \\<exists>x.\n                         (x < t * k + k - Suc 0 \\<longrightarrow>\n                          t * k \\<le> x \\<and>\n                          s x = m \\<and>\n                          (\\<forall>xa.\n                              Suc x \\<le> xa \\<and>\n                              xa \\<le> t * k + k - Suc 0 \\<longrightarrow>\n                              s xa = NoMsg)) \\<and>\n                         (\\<not> x < t * k + k - Suc 0 \\<longrightarrow>\n                          t * k \\<le> x \\<and>\n                          x = t * k + k - Suc 0 \\<and> s x = m)", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>m \\<noteq> NoMsg; \\<And>t. event t = (t mod k = 0); t0 = t * k;\n     Suc 0 < k;\n     s (t * k) = m \\<and>\n     (\\<exists>x.\n         (x = Suc (t * k) \\<longrightarrow> Suc (t * k) mod k = 0) \\<and>\n         (x \\<noteq> Suc (t * k) \\<longrightarrow>\n          Suc (t * k) \\<le> x \\<and>\n          x mod k = 0 \\<and>\n          (\\<forall>xa.\n              Suc (t * k) \\<le> xa \\<and>\n              xa \\<le> Suc (t * k +\n                            (x - Suc (Suc (t * k)))) \\<longrightarrow>\n              s xa = NoMsg))) \\<or>\n     (\\<exists>x.\n         (x = Suc (t * k) \\<longrightarrow>\n          s (Suc (t * k)) = m \\<and>\n          0 < Suc (t * k) mod k \\<and>\n          (\\<exists>x.\n              (x = Suc (Suc (t * k)) \\<longrightarrow>\n               Suc (Suc (t * k)) mod k = 0) \\<and>\n              (x \\<noteq> Suc (Suc (t * k)) \\<longrightarrow>\n               Suc (Suc (t * k)) \\<le> x \\<and>\n               x mod k = 0 \\<and>\n               (\\<forall>xa.\n                   Suc (Suc (t * k)) \\<le> xa \\<and>\n                   xa \\<le> Suc (Suc (t * k +\n(x - Suc (Suc (Suc (t * k)))))) \\<longrightarrow>\n                   s xa = NoMsg)))) \\<and>\n         (x \\<noteq> Suc (t * k) \\<longrightarrow>\n          Suc (t * k) \\<le> x \\<and>\n          s x = m \\<and>\n          0 < x mod k \\<and>\n          (\\<exists>xa.\n              (xa = Suc x \\<longrightarrow> Suc x mod k = 0) \\<and>\n              (xa \\<noteq> Suc x \\<longrightarrow>\n               Suc x \\<le> xa \\<and>\n               xa mod k = 0 \\<and>\n               (\\<forall>xb.\n                   Suc x \\<le> xb \\<and>\n                   xb \\<le> Suc (x + (xa - Suc (Suc x))) \\<longrightarrow>\n                   s xb = NoMsg))) \\<and>\n          (\\<forall>xa.\n              Suc (t * k) \\<le> xa \\<and>\n              xa \\<le> Suc (t * k +\n                            (x - Suc (Suc (t * k)))) \\<longrightarrow>\n              0 < xa mod k)))\\<rbrakk>\n    \\<Longrightarrow> \\<exists>x.\n                         (x < t * k + k - Suc 0 \\<longrightarrow>\n                          t * k \\<le> x \\<and>\n                          s x = m \\<and>\n                          (\\<forall>xa.\n                              Suc x \\<le> xa \\<and>\n                              xa \\<le> t * k + k - Suc 0 \\<longrightarrow>\n                              s xa = NoMsg)) \\<and>\n                         (\\<not> x < t * k + k - Suc 0 \\<longrightarrow>\n                          t * k \\<le> x \\<and>\n                          x = t * k + k - Suc 0 \\<and> s x = m)", "apply (simp add: mod_Suc)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>m \\<noteq> NoMsg; \\<And>t. event t = (t mod k = 0); t0 = t * k;\n     Suc 0 < k;\n     s (t * k) = m \\<and>\n     (\\<exists>x.\n         x \\<noteq> Suc (t * k) \\<and>\n         (x \\<noteq> Suc (t * k) \\<longrightarrow>\n          Suc (t * k) \\<le> x \\<and>\n          x mod k = 0 \\<and>\n          (\\<forall>xa.\n              Suc (t * k) \\<le> xa \\<and>\n              xa \\<le> Suc (t * k +\n                            (x - Suc (Suc (t * k)))) \\<longrightarrow>\n              s xa = NoMsg))) \\<or>\n     (\\<exists>x.\n         (x = Suc (t * k) \\<longrightarrow>\n          s (Suc (t * k)) = m \\<and>\n          (\\<exists>x.\n              (x = Suc (Suc (t * k)) \\<longrightarrow>\n               (if Suc (Suc 0) = k then 0 else Suc (Suc (t * k) mod k)) =\n               0) \\<and>\n              (x \\<noteq> Suc (Suc (t * k)) \\<longrightarrow>\n               Suc (Suc (t * k)) \\<le> x \\<and>\n               x mod k = 0 \\<and>\n               (\\<forall>xa.\n                   Suc (Suc (t * k)) \\<le> xa \\<and>\n                   xa \\<le> Suc (Suc (t * k +\n(x - Suc (Suc (Suc (t * k)))))) \\<longrightarrow>\n                   s xa = NoMsg)))) \\<and>\n         (x \\<noteq> Suc (t * k) \\<longrightarrow>\n          Suc (t * k) \\<le> x \\<and>\n          s x = m \\<and>\n          0 < x mod k \\<and>\n          (\\<exists>xa.\n              (xa = Suc x \\<longrightarrow>\n               (if Suc (x mod k) = k then 0 else Suc (x mod k)) = 0) \\<and>\n              (xa \\<noteq> Suc x \\<longrightarrow>\n               Suc x \\<le> xa \\<and>\n               xa mod k = 0 \\<and>\n               (\\<forall>xb.\n                   Suc x \\<le> xb \\<and>\n                   xb \\<le> Suc (x + (xa - Suc (Suc x))) \\<longrightarrow>\n                   s xb = NoMsg))) \\<and>\n          (\\<forall>xa.\n              Suc (t * k) \\<le> xa \\<and>\n              xa \\<le> Suc (t * k +\n                            (x - Suc (Suc (t * k)))) \\<longrightarrow>\n              0 < xa mod k)))\\<rbrakk>\n    \\<Longrightarrow> \\<exists>x.\n                         (x < t * k + k - Suc 0 \\<longrightarrow>\n                          t * k \\<le> x \\<and>\n                          s x = m \\<and>\n                          (\\<forall>xa.\n                              Suc x \\<le> xa \\<and>\n                              xa \\<le> t * k + k - Suc 0 \\<longrightarrow>\n                              s xa = NoMsg)) \\<and>\n                         (\\<not> x < t * k + k - Suc 0 \\<longrightarrow>\n                          t * k \\<le> x \\<and>\n                          x = t * k + k - Suc 0 \\<and> s x = m)", "apply (erule disjE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>m \\<noteq> NoMsg; \\<And>t. event t = (t mod k = 0); t0 = t * k;\n     Suc 0 < k;\n     s (t * k) = m \\<and>\n     (\\<exists>x.\n         x \\<noteq> Suc (t * k) \\<and>\n         (x \\<noteq> Suc (t * k) \\<longrightarrow>\n          Suc (t * k) \\<le> x \\<and>\n          x mod k = 0 \\<and>\n          (\\<forall>xa.\n              Suc (t * k) \\<le> xa \\<and>\n              xa \\<le> Suc (t * k +\n                            (x - Suc (Suc (t * k)))) \\<longrightarrow>\n              s xa = NoMsg)))\\<rbrakk>\n    \\<Longrightarrow> \\<exists>x.\n                         (x < t * k + k - Suc 0 \\<longrightarrow>\n                          t * k \\<le> x \\<and>\n                          s x = m \\<and>\n                          (\\<forall>xa.\n                              Suc x \\<le> xa \\<and>\n                              xa \\<le> t * k + k - Suc 0 \\<longrightarrow>\n                              s xa = NoMsg)) \\<and>\n                         (\\<not> x < t * k + k - Suc 0 \\<longrightarrow>\n                          t * k \\<le> x \\<and>\n                          x = t * k + k - Suc 0 \\<and> s x = m)\n 2. \\<lbrakk>m \\<noteq> NoMsg; \\<And>t. event t = (t mod k = 0); t0 = t * k;\n     Suc 0 < k;\n     \\<exists>x.\n        (x = Suc (t * k) \\<longrightarrow>\n         s (Suc (t * k)) = m \\<and>\n         (\\<exists>x.\n             (x = Suc (Suc (t * k)) \\<longrightarrow>\n              (if Suc (Suc 0) = k then 0 else Suc (Suc (t * k) mod k)) =\n              0) \\<and>\n             (x \\<noteq> Suc (Suc (t * k)) \\<longrightarrow>\n              Suc (Suc (t * k)) \\<le> x \\<and>\n              x mod k = 0 \\<and>\n              (\\<forall>xa.\n                  Suc (Suc (t * k)) \\<le> xa \\<and>\n                  xa \\<le> Suc (Suc (t * k +\n                                     (x -\nSuc (Suc (Suc (t * k)))))) \\<longrightarrow>\n                  s xa = NoMsg)))) \\<and>\n        (x \\<noteq> Suc (t * k) \\<longrightarrow>\n         Suc (t * k) \\<le> x \\<and>\n         s x = m \\<and>\n         0 < x mod k \\<and>\n         (\\<exists>xa.\n             (xa = Suc x \\<longrightarrow>\n              (if Suc (x mod k) = k then 0 else Suc (x mod k)) = 0) \\<and>\n             (xa \\<noteq> Suc x \\<longrightarrow>\n              Suc x \\<le> xa \\<and>\n              xa mod k = 0 \\<and>\n              (\\<forall>xb.\n                  Suc x \\<le> xb \\<and>\n                  xb \\<le> Suc (x + (xa - Suc (Suc x))) \\<longrightarrow>\n                  s xb = NoMsg))) \\<and>\n         (\\<forall>xa.\n             Suc (t * k) \\<le> xa \\<and>\n             xa \\<le> Suc (t * k +\n                           (x - Suc (Suc (t * k)))) \\<longrightarrow>\n             0 < xa mod k))\\<rbrakk>\n    \\<Longrightarrow> \\<exists>x.\n                         (x < t * k + k - Suc 0 \\<longrightarrow>\n                          t * k \\<le> x \\<and>\n                          s x = m \\<and>\n                          (\\<forall>xa.\n                              Suc x \\<le> xa \\<and>\n                              xa \\<le> t * k + k - Suc 0 \\<longrightarrow>\n                              s xa = NoMsg)) \\<and>\n                         (\\<not> x < t * k + k - Suc 0 \\<longrightarrow>\n                          t * k \\<le> x \\<and>\n                          x = t * k + k - Suc 0 \\<and> s x = m)", "apply (clarsimp simp: mult.commute[of k] elim!: dvdE, rename_tac i)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>i.\n       \\<lbrakk>s (t * k) \\<noteq> NoMsg; \\<And>t. event t = (t mod k = 0);\n        t0 = t * k; Suc 0 < k; m = s (t * k); i * k \\<noteq> Suc (t * k);\n        Suc (t * k) \\<le> i * k;\n        \\<forall>x.\n           Suc (t * k) \\<le> x \\<and>\n           x \\<le> Suc (i * k - 2) \\<longrightarrow>\n           s x = NoMsg\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x.\n                            (x < t * k + k - Suc 0 \\<longrightarrow>\n                             t * k \\<le> x \\<and>\n                             s x = s (t * k) \\<and>\n                             (\\<forall>xa.\n                                 Suc x \\<le> xa \\<and>\n                                 xa \\<le> t * k + k -\n    Suc 0 \\<longrightarrow>\n                                 s xa = NoMsg)) \\<and>\n                            (\\<not> x < t * k + k - Suc 0 \\<longrightarrow>\n                             t * k \\<le> x \\<and>\n                             x = t * k + k - Suc 0 \\<and> s x = s (t * k))\n 2. \\<lbrakk>m \\<noteq> NoMsg; \\<And>t. event t = (t mod k = 0); t0 = t * k;\n     Suc 0 < k;\n     \\<exists>x.\n        (x = Suc (t * k) \\<longrightarrow>\n         s (Suc (t * k)) = m \\<and>\n         (\\<exists>x.\n             (x = Suc (Suc (t * k)) \\<longrightarrow>\n              (if Suc (Suc 0) = k then 0 else Suc (Suc (t * k) mod k)) =\n              0) \\<and>\n             (x \\<noteq> Suc (Suc (t * k)) \\<longrightarrow>\n              Suc (Suc (t * k)) \\<le> x \\<and>\n              x mod k = 0 \\<and>\n              (\\<forall>xa.\n                  Suc (Suc (t * k)) \\<le> xa \\<and>\n                  xa \\<le> Suc (Suc (t * k +\n                                     (x -\nSuc (Suc (Suc (t * k)))))) \\<longrightarrow>\n                  s xa = NoMsg)))) \\<and>\n        (x \\<noteq> Suc (t * k) \\<longrightarrow>\n         Suc (t * k) \\<le> x \\<and>\n         s x = m \\<and>\n         0 < x mod k \\<and>\n         (\\<exists>xa.\n             (xa = Suc x \\<longrightarrow>\n              (if Suc (x mod k) = k then 0 else Suc (x mod k)) = 0) \\<and>\n             (xa \\<noteq> Suc x \\<longrightarrow>\n              Suc x \\<le> xa \\<and>\n              xa mod k = 0 \\<and>\n              (\\<forall>xb.\n                  Suc x \\<le> xb \\<and>\n                  xb \\<le> Suc (x + (xa - Suc (Suc x))) \\<longrightarrow>\n                  s xb = NoMsg))) \\<and>\n         (\\<forall>xa.\n             Suc (t * k) \\<le> xa \\<and>\n             xa \\<le> Suc (t * k +\n                           (x - Suc (Suc (t * k)))) \\<longrightarrow>\n             0 < xa mod k))\\<rbrakk>\n    \\<Longrightarrow> \\<exists>x.\n                         (x < t * k + k - Suc 0 \\<longrightarrow>\n                          t * k \\<le> x \\<and>\n                          s x = m \\<and>\n                          (\\<forall>xa.\n                              Suc x \\<le> xa \\<and>\n                              xa \\<le> t * k + k - Suc 0 \\<longrightarrow>\n                              s xa = NoMsg)) \\<and>\n                         (\\<not> x < t * k + k - Suc 0 \\<longrightarrow>\n                          t * k \\<le> x \\<and>\n                          x = t * k + k - Suc 0 \\<and> s x = m)", "apply (subgoal_tac \"t < i\")"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>i.\n       \\<lbrakk>s (t * k) \\<noteq> NoMsg; \\<And>t. event t = (t mod k = 0);\n        t0 = t * k; Suc 0 < k; m = s (t * k); i * k \\<noteq> Suc (t * k);\n        Suc (t * k) \\<le> i * k;\n        \\<forall>x.\n           Suc (t * k) \\<le> x \\<and>\n           x \\<le> Suc (i * k - 2) \\<longrightarrow>\n           s x = NoMsg;\n        t < i\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x.\n                            (x < t * k + k - Suc 0 \\<longrightarrow>\n                             t * k \\<le> x \\<and>\n                             s x = s (t * k) \\<and>\n                             (\\<forall>xa.\n                                 Suc x \\<le> xa \\<and>\n                                 xa \\<le> t * k + k -\n    Suc 0 \\<longrightarrow>\n                                 s xa = NoMsg)) \\<and>\n                            (\\<not> x < t * k + k - Suc 0 \\<longrightarrow>\n                             t * k \\<le> x \\<and>\n                             x = t * k + k - Suc 0 \\<and> s x = s (t * k))\n 2. \\<And>i.\n       \\<lbrakk>s (t * k) \\<noteq> NoMsg; \\<And>t. event t = (t mod k = 0);\n        t0 = t * k; Suc 0 < k; m = s (t * k); i * k \\<noteq> Suc (t * k);\n        Suc (t * k) \\<le> i * k;\n        \\<forall>x.\n           Suc (t * k) \\<le> x \\<and>\n           x \\<le> Suc (i * k - 2) \\<longrightarrow>\n           s x = NoMsg\\<rbrakk>\n       \\<Longrightarrow> t < i\n 3. \\<lbrakk>m \\<noteq> NoMsg; \\<And>t. event t = (t mod k = 0); t0 = t * k;\n     Suc 0 < k;\n     \\<exists>x.\n        (x = Suc (t * k) \\<longrightarrow>\n         s (Suc (t * k)) = m \\<and>\n         (\\<exists>x.\n             (x = Suc (Suc (t * k)) \\<longrightarrow>\n              (if Suc (Suc 0) = k then 0 else Suc (Suc (t * k) mod k)) =\n              0) \\<and>\n             (x \\<noteq> Suc (Suc (t * k)) \\<longrightarrow>\n              Suc (Suc (t * k)) \\<le> x \\<and>\n              x mod k = 0 \\<and>\n              (\\<forall>xa.\n                  Suc (Suc (t * k)) \\<le> xa \\<and>\n                  xa \\<le> Suc (Suc (t * k +\n                                     (x -\nSuc (Suc (Suc (t * k)))))) \\<longrightarrow>\n                  s xa = NoMsg)))) \\<and>\n        (x \\<noteq> Suc (t * k) \\<longrightarrow>\n         Suc (t * k) \\<le> x \\<and>\n         s x = m \\<and>\n         0 < x mod k \\<and>\n         (\\<exists>xa.\n             (xa = Suc x \\<longrightarrow>\n              (if Suc (x mod k) = k then 0 else Suc (x mod k)) = 0) \\<and>\n             (xa \\<noteq> Suc x \\<longrightarrow>\n              Suc x \\<le> xa \\<and>\n              xa mod k = 0 \\<and>\n              (\\<forall>xb.\n                  Suc x \\<le> xb \\<and>\n                  xb \\<le> Suc (x + (xa - Suc (Suc x))) \\<longrightarrow>\n                  s xb = NoMsg))) \\<and>\n         (\\<forall>xa.\n             Suc (t * k) \\<le> xa \\<and>\n             xa \\<le> Suc (t * k +\n                           (x - Suc (Suc (t * k)))) \\<longrightarrow>\n             0 < xa mod k))\\<rbrakk>\n    \\<Longrightarrow> \\<exists>x.\n                         (x < t * k + k - Suc 0 \\<longrightarrow>\n                          t * k \\<le> x \\<and>\n                          s x = m \\<and>\n                          (\\<forall>xa.\n                              Suc x \\<le> xa \\<and>\n                              xa \\<le> t * k + k - Suc 0 \\<longrightarrow>\n                              s xa = NoMsg)) \\<and>\n                         (\\<not> x < t * k + k - Suc 0 \\<longrightarrow>\n                          t * k \\<le> x \\<and>\n                          x = t * k + k - Suc 0 \\<and> s x = m)", "prefer 2"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>i.\n       \\<lbrakk>s (t * k) \\<noteq> NoMsg; \\<And>t. event t = (t mod k = 0);\n        t0 = t * k; Suc 0 < k; m = s (t * k); i * k \\<noteq> Suc (t * k);\n        Suc (t * k) \\<le> i * k;\n        \\<forall>x.\n           Suc (t * k) \\<le> x \\<and>\n           x \\<le> Suc (i * k - 2) \\<longrightarrow>\n           s x = NoMsg\\<rbrakk>\n       \\<Longrightarrow> t < i\n 2. \\<And>i.\n       \\<lbrakk>s (t * k) \\<noteq> NoMsg; \\<And>t. event t = (t mod k = 0);\n        t0 = t * k; Suc 0 < k; m = s (t * k); i * k \\<noteq> Suc (t * k);\n        Suc (t * k) \\<le> i * k;\n        \\<forall>x.\n           Suc (t * k) \\<le> x \\<and>\n           x \\<le> Suc (i * k - 2) \\<longrightarrow>\n           s x = NoMsg;\n        t < i\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x.\n                            (x < t * k + k - Suc 0 \\<longrightarrow>\n                             t * k \\<le> x \\<and>\n                             s x = s (t * k) \\<and>\n                             (\\<forall>xa.\n                                 Suc x \\<le> xa \\<and>\n                                 xa \\<le> t * k + k -\n    Suc 0 \\<longrightarrow>\n                                 s xa = NoMsg)) \\<and>\n                            (\\<not> x < t * k + k - Suc 0 \\<longrightarrow>\n                             t * k \\<le> x \\<and>\n                             x = t * k + k - Suc 0 \\<and> s x = s (t * k))\n 3. \\<lbrakk>m \\<noteq> NoMsg; \\<And>t. event t = (t mod k = 0); t0 = t * k;\n     Suc 0 < k;\n     \\<exists>x.\n        (x = Suc (t * k) \\<longrightarrow>\n         s (Suc (t * k)) = m \\<and>\n         (\\<exists>x.\n             (x = Suc (Suc (t * k)) \\<longrightarrow>\n              (if Suc (Suc 0) = k then 0 else Suc (Suc (t * k) mod k)) =\n              0) \\<and>\n             (x \\<noteq> Suc (Suc (t * k)) \\<longrightarrow>\n              Suc (Suc (t * k)) \\<le> x \\<and>\n              x mod k = 0 \\<and>\n              (\\<forall>xa.\n                  Suc (Suc (t * k)) \\<le> xa \\<and>\n                  xa \\<le> Suc (Suc (t * k +\n                                     (x -\nSuc (Suc (Suc (t * k)))))) \\<longrightarrow>\n                  s xa = NoMsg)))) \\<and>\n        (x \\<noteq> Suc (t * k) \\<longrightarrow>\n         Suc (t * k) \\<le> x \\<and>\n         s x = m \\<and>\n         0 < x mod k \\<and>\n         (\\<exists>xa.\n             (xa = Suc x \\<longrightarrow>\n              (if Suc (x mod k) = k then 0 else Suc (x mod k)) = 0) \\<and>\n             (xa \\<noteq> Suc x \\<longrightarrow>\n              Suc x \\<le> xa \\<and>\n              xa mod k = 0 \\<and>\n              (\\<forall>xb.\n                  Suc x \\<le> xb \\<and>\n                  xb \\<le> Suc (x + (xa - Suc (Suc x))) \\<longrightarrow>\n                  s xb = NoMsg))) \\<and>\n         (\\<forall>xa.\n             Suc (t * k) \\<le> xa \\<and>\n             xa \\<le> Suc (t * k +\n                           (x - Suc (Suc (t * k)))) \\<longrightarrow>\n             0 < xa mod k))\\<rbrakk>\n    \\<Longrightarrow> \\<exists>x.\n                         (x < t * k + k - Suc 0 \\<longrightarrow>\n                          t * k \\<le> x \\<and>\n                          s x = m \\<and>\n                          (\\<forall>xa.\n                              Suc x \\<le> xa \\<and>\n                              xa \\<le> t * k + k - Suc 0 \\<longrightarrow>\n                              s xa = NoMsg)) \\<and>\n                         (\\<not> x < t * k + k - Suc 0 \\<longrightarrow>\n                          t * k \\<le> x \\<and>\n                          x = t * k + k - Suc 0 \\<and> s x = m)", "apply (rule ccontr)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>i.\n       \\<lbrakk>s (t * k) \\<noteq> NoMsg; \\<And>t. event t = (t mod k = 0);\n        t0 = t * k; Suc 0 < k; m = s (t * k); i * k \\<noteq> Suc (t * k);\n        Suc (t * k) \\<le> i * k;\n        \\<forall>x.\n           Suc (t * k) \\<le> x \\<and>\n           x \\<le> Suc (i * k - 2) \\<longrightarrow>\n           s x = NoMsg;\n        \\<not> t < i\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>i.\n       \\<lbrakk>s (t * k) \\<noteq> NoMsg; \\<And>t. event t = (t mod k = 0);\n        t0 = t * k; Suc 0 < k; m = s (t * k); i * k \\<noteq> Suc (t * k);\n        Suc (t * k) \\<le> i * k;\n        \\<forall>x.\n           Suc (t * k) \\<le> x \\<and>\n           x \\<le> Suc (i * k - 2) \\<longrightarrow>\n           s x = NoMsg;\n        t < i\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x.\n                            (x < t * k + k - Suc 0 \\<longrightarrow>\n                             t * k \\<le> x \\<and>\n                             s x = s (t * k) \\<and>\n                             (\\<forall>xa.\n                                 Suc x \\<le> xa \\<and>\n                                 xa \\<le> t * k + k -\n    Suc 0 \\<longrightarrow>\n                                 s xa = NoMsg)) \\<and>\n                            (\\<not> x < t * k + k - Suc 0 \\<longrightarrow>\n                             t * k \\<le> x \\<and>\n                             x = t * k + k - Suc 0 \\<and> s x = s (t * k))\n 3. \\<lbrakk>m \\<noteq> NoMsg; \\<And>t. event t = (t mod k = 0); t0 = t * k;\n     Suc 0 < k;\n     \\<exists>x.\n        (x = Suc (t * k) \\<longrightarrow>\n         s (Suc (t * k)) = m \\<and>\n         (\\<exists>x.\n             (x = Suc (Suc (t * k)) \\<longrightarrow>\n              (if Suc (Suc 0) = k then 0 else Suc (Suc (t * k) mod k)) =\n              0) \\<and>\n             (x \\<noteq> Suc (Suc (t * k)) \\<longrightarrow>\n              Suc (Suc (t * k)) \\<le> x \\<and>\n              x mod k = 0 \\<and>\n              (\\<forall>xa.\n                  Suc (Suc (t * k)) \\<le> xa \\<and>\n                  xa \\<le> Suc (Suc (t * k +\n                                     (x -\nSuc (Suc (Suc (t * k)))))) \\<longrightarrow>\n                  s xa = NoMsg)))) \\<and>\n        (x \\<noteq> Suc (t * k) \\<longrightarrow>\n         Suc (t * k) \\<le> x \\<and>\n         s x = m \\<and>\n         0 < x mod k \\<and>\n         (\\<exists>xa.\n             (xa = Suc x \\<longrightarrow>\n              (if Suc (x mod k) = k then 0 else Suc (x mod k)) = 0) \\<and>\n             (xa \\<noteq> Suc x \\<longrightarrow>\n              Suc x \\<le> xa \\<and>\n              xa mod k = 0 \\<and>\n              (\\<forall>xb.\n                  Suc x \\<le> xb \\<and>\n                  xb \\<le> Suc (x + (xa - Suc (Suc x))) \\<longrightarrow>\n                  s xb = NoMsg))) \\<and>\n         (\\<forall>xa.\n             Suc (t * k) \\<le> xa \\<and>\n             xa \\<le> Suc (t * k +\n                           (x - Suc (Suc (t * k)))) \\<longrightarrow>\n             0 < xa mod k))\\<rbrakk>\n    \\<Longrightarrow> \\<exists>x.\n                         (x < t * k + k - Suc 0 \\<longrightarrow>\n                          t * k \\<le> x \\<and>\n                          s x = m \\<and>\n                          (\\<forall>xa.\n                              Suc x \\<le> xa \\<and>\n                              xa \\<le> t * k + k - Suc 0 \\<longrightarrow>\n                              s xa = NoMsg)) \\<and>\n                         (\\<not> x < t * k + k - Suc 0 \\<longrightarrow>\n                          t * k \\<le> x \\<and>\n                          x = t * k + k - Suc 0 \\<and> s x = m)", "apply (simp add: linorder_not_less)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>i.\n       \\<lbrakk>s (t * k) \\<noteq> NoMsg; \\<And>t. event t = (t mod k = 0);\n        t0 = t * k; Suc 0 < k; m = s (t * k); i * k \\<noteq> Suc (t * k);\n        Suc (t * k) \\<le> i * k;\n        \\<forall>x.\n           Suc (t * k) \\<le> x \\<and>\n           x \\<le> Suc (i * k - 2) \\<longrightarrow>\n           s x = NoMsg;\n        i \\<le> t\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>i.\n       \\<lbrakk>s (t * k) \\<noteq> NoMsg; \\<And>t. event t = (t mod k = 0);\n        t0 = t * k; Suc 0 < k; m = s (t * k); i * k \\<noteq> Suc (t * k);\n        Suc (t * k) \\<le> i * k;\n        \\<forall>x.\n           Suc (t * k) \\<le> x \\<and>\n           x \\<le> Suc (i * k - 2) \\<longrightarrow>\n           s x = NoMsg;\n        t < i\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x.\n                            (x < t * k + k - Suc 0 \\<longrightarrow>\n                             t * k \\<le> x \\<and>\n                             s x = s (t * k) \\<and>\n                             (\\<forall>xa.\n                                 Suc x \\<le> xa \\<and>\n                                 xa \\<le> t * k + k -\n    Suc 0 \\<longrightarrow>\n                                 s xa = NoMsg)) \\<and>\n                            (\\<not> x < t * k + k - Suc 0 \\<longrightarrow>\n                             t * k \\<le> x \\<and>\n                             x = t * k + k - Suc 0 \\<and> s x = s (t * k))\n 3. \\<lbrakk>m \\<noteq> NoMsg; \\<And>t. event t = (t mod k = 0); t0 = t * k;\n     Suc 0 < k;\n     \\<exists>x.\n        (x = Suc (t * k) \\<longrightarrow>\n         s (Suc (t * k)) = m \\<and>\n         (\\<exists>x.\n             (x = Suc (Suc (t * k)) \\<longrightarrow>\n              (if Suc (Suc 0) = k then 0 else Suc (Suc (t * k) mod k)) =\n              0) \\<and>\n             (x \\<noteq> Suc (Suc (t * k)) \\<longrightarrow>\n              Suc (Suc (t * k)) \\<le> x \\<and>\n              x mod k = 0 \\<and>\n              (\\<forall>xa.\n                  Suc (Suc (t * k)) \\<le> xa \\<and>\n                  xa \\<le> Suc (Suc (t * k +\n                                     (x -\nSuc (Suc (Suc (t * k)))))) \\<longrightarrow>\n                  s xa = NoMsg)))) \\<and>\n        (x \\<noteq> Suc (t * k) \\<longrightarrow>\n         Suc (t * k) \\<le> x \\<and>\n         s x = m \\<and>\n         0 < x mod k \\<and>\n         (\\<exists>xa.\n             (xa = Suc x \\<longrightarrow>\n              (if Suc (x mod k) = k then 0 else Suc (x mod k)) = 0) \\<and>\n             (xa \\<noteq> Suc x \\<longrightarrow>\n              Suc x \\<le> xa \\<and>\n              xa mod k = 0 \\<and>\n              (\\<forall>xb.\n                  Suc x \\<le> xb \\<and>\n                  xb \\<le> Suc (x + (xa - Suc (Suc x))) \\<longrightarrow>\n                  s xb = NoMsg))) \\<and>\n         (\\<forall>xa.\n             Suc (t * k) \\<le> xa \\<and>\n             xa \\<le> Suc (t * k +\n                           (x - Suc (Suc (t * k)))) \\<longrightarrow>\n             0 < xa mod k))\\<rbrakk>\n    \\<Longrightarrow> \\<exists>x.\n                         (x < t * k + k - Suc 0 \\<longrightarrow>\n                          t * k \\<le> x \\<and>\n                          s x = m \\<and>\n                          (\\<forall>xa.\n                              Suc x \\<le> xa \\<and>\n                              xa \\<le> t * k + k - Suc 0 \\<longrightarrow>\n                              s xa = NoMsg)) \\<and>\n                         (\\<not> x < t * k + k - Suc 0 \\<longrightarrow>\n                          t * k \\<le> x \\<and>\n                          x = t * k + k - Suc 0 \\<and> s x = m)", "apply (drule_tac i=i and k=k in mult_le_mono1)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>i.\n       \\<lbrakk>s (t * k) \\<noteq> NoMsg; \\<And>t. event t = (t mod k = 0);\n        t0 = t * k; Suc 0 < k; m = s (t * k); i * k \\<noteq> Suc (t * k);\n        Suc (t * k) \\<le> i * k;\n        \\<forall>x.\n           Suc (t * k) \\<le> x \\<and>\n           x \\<le> Suc (i * k - 2) \\<longrightarrow>\n           s x = NoMsg;\n        i * k \\<le> t * k\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>i.\n       \\<lbrakk>s (t * k) \\<noteq> NoMsg; \\<And>t. event t = (t mod k = 0);\n        t0 = t * k; Suc 0 < k; m = s (t * k); i * k \\<noteq> Suc (t * k);\n        Suc (t * k) \\<le> i * k;\n        \\<forall>x.\n           Suc (t * k) \\<le> x \\<and>\n           x \\<le> Suc (i * k - 2) \\<longrightarrow>\n           s x = NoMsg;\n        t < i\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x.\n                            (x < t * k + k - Suc 0 \\<longrightarrow>\n                             t * k \\<le> x \\<and>\n                             s x = s (t * k) \\<and>\n                             (\\<forall>xa.\n                                 Suc x \\<le> xa \\<and>\n                                 xa \\<le> t * k + k -\n    Suc 0 \\<longrightarrow>\n                                 s xa = NoMsg)) \\<and>\n                            (\\<not> x < t * k + k - Suc 0 \\<longrightarrow>\n                             t * k \\<le> x \\<and>\n                             x = t * k + k - Suc 0 \\<and> s x = s (t * k))\n 3. \\<lbrakk>m \\<noteq> NoMsg; \\<And>t. event t = (t mod k = 0); t0 = t * k;\n     Suc 0 < k;\n     \\<exists>x.\n        (x = Suc (t * k) \\<longrightarrow>\n         s (Suc (t * k)) = m \\<and>\n         (\\<exists>x.\n             (x = Suc (Suc (t * k)) \\<longrightarrow>\n              (if Suc (Suc 0) = k then 0 else Suc (Suc (t * k) mod k)) =\n              0) \\<and>\n             (x \\<noteq> Suc (Suc (t * k)) \\<longrightarrow>\n              Suc (Suc (t * k)) \\<le> x \\<and>\n              x mod k = 0 \\<and>\n              (\\<forall>xa.\n                  Suc (Suc (t * k)) \\<le> xa \\<and>\n                  xa \\<le> Suc (Suc (t * k +\n                                     (x -\nSuc (Suc (Suc (t * k)))))) \\<longrightarrow>\n                  s xa = NoMsg)))) \\<and>\n        (x \\<noteq> Suc (t * k) \\<longrightarrow>\n         Suc (t * k) \\<le> x \\<and>\n         s x = m \\<and>\n         0 < x mod k \\<and>\n         (\\<exists>xa.\n             (xa = Suc x \\<longrightarrow>\n              (if Suc (x mod k) = k then 0 else Suc (x mod k)) = 0) \\<and>\n             (xa \\<noteq> Suc x \\<longrightarrow>\n              Suc x \\<le> xa \\<and>\n              xa mod k = 0 \\<and>\n              (\\<forall>xb.\n                  Suc x \\<le> xb \\<and>\n                  xb \\<le> Suc (x + (xa - Suc (Suc x))) \\<longrightarrow>\n                  s xb = NoMsg))) \\<and>\n         (\\<forall>xa.\n             Suc (t * k) \\<le> xa \\<and>\n             xa \\<le> Suc (t * k +\n                           (x - Suc (Suc (t * k)))) \\<longrightarrow>\n             0 < xa mod k))\\<rbrakk>\n    \\<Longrightarrow> \\<exists>x.\n                         (x < t * k + k - Suc 0 \\<longrightarrow>\n                          t * k \\<le> x \\<and>\n                          s x = m \\<and>\n                          (\\<forall>xa.\n                              Suc x \\<le> xa \\<and>\n                              xa \\<le> t * k + k - Suc 0 \\<longrightarrow>\n                              s xa = NoMsg)) \\<and>\n                         (\\<not> x < t * k + k - Suc 0 \\<longrightarrow>\n                          t * k \\<le> x \\<and>\n                          x = t * k + k - Suc 0 \\<and> s x = m)", "apply simp"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>i.\n       \\<lbrakk>s (t * k) \\<noteq> NoMsg; \\<And>t. event t = (t mod k = 0);\n        t0 = t * k; Suc 0 < k; m = s (t * k); i * k \\<noteq> Suc (t * k);\n        Suc (t * k) \\<le> i * k;\n        \\<forall>x.\n           Suc (t * k) \\<le> x \\<and>\n           x \\<le> Suc (i * k - 2) \\<longrightarrow>\n           s x = NoMsg;\n        t < i\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x.\n                            (x < t * k + k - Suc 0 \\<longrightarrow>\n                             t * k \\<le> x \\<and>\n                             s x = s (t * k) \\<and>\n                             (\\<forall>xa.\n                                 Suc x \\<le> xa \\<and>\n                                 xa \\<le> t * k + k -\n    Suc 0 \\<longrightarrow>\n                                 s xa = NoMsg)) \\<and>\n                            (\\<not> x < t * k + k - Suc 0 \\<longrightarrow>\n                             t * k \\<le> x \\<and>\n                             x = t * k + k - Suc 0 \\<and> s x = s (t * k))\n 2. \\<lbrakk>m \\<noteq> NoMsg; \\<And>t. event t = (t mod k = 0); t0 = t * k;\n     Suc 0 < k;\n     \\<exists>x.\n        (x = Suc (t * k) \\<longrightarrow>\n         s (Suc (t * k)) = m \\<and>\n         (\\<exists>x.\n             (x = Suc (Suc (t * k)) \\<longrightarrow>\n              (if Suc (Suc 0) = k then 0 else Suc (Suc (t * k) mod k)) =\n              0) \\<and>\n             (x \\<noteq> Suc (Suc (t * k)) \\<longrightarrow>\n              Suc (Suc (t * k)) \\<le> x \\<and>\n              x mod k = 0 \\<and>\n              (\\<forall>xa.\n                  Suc (Suc (t * k)) \\<le> xa \\<and>\n                  xa \\<le> Suc (Suc (t * k +\n                                     (x -\nSuc (Suc (Suc (t * k)))))) \\<longrightarrow>\n                  s xa = NoMsg)))) \\<and>\n        (x \\<noteq> Suc (t * k) \\<longrightarrow>\n         Suc (t * k) \\<le> x \\<and>\n         s x = m \\<and>\n         0 < x mod k \\<and>\n         (\\<exists>xa.\n             (xa = Suc x \\<longrightarrow>\n              (if Suc (x mod k) = k then 0 else Suc (x mod k)) = 0) \\<and>\n             (xa \\<noteq> Suc x \\<longrightarrow>\n              Suc x \\<le> xa \\<and>\n              xa mod k = 0 \\<and>\n              (\\<forall>xb.\n                  Suc x \\<le> xb \\<and>\n                  xb \\<le> Suc (x + (xa - Suc (Suc x))) \\<longrightarrow>\n                  s xb = NoMsg))) \\<and>\n         (\\<forall>xa.\n             Suc (t * k) \\<le> xa \\<and>\n             xa \\<le> Suc (t * k +\n                           (x - Suc (Suc (t * k)))) \\<longrightarrow>\n             0 < xa mod k))\\<rbrakk>\n    \\<Longrightarrow> \\<exists>x.\n                         (x < t * k + k - Suc 0 \\<longrightarrow>\n                          t * k \\<le> x \\<and>\n                          s x = m \\<and>\n                          (\\<forall>xa.\n                              Suc x \\<le> xa \\<and>\n                              xa \\<le> t * k + k - Suc 0 \\<longrightarrow>\n                              s xa = NoMsg)) \\<and>\n                         (\\<not> x < t * k + k - Suc 0 \\<longrightarrow>\n                          t * k \\<le> x \\<and>\n                          x = t * k + k - Suc 0 \\<and> s x = m)", "apply (rule_tac x=\"t * k\" in exI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>i.\n       \\<lbrakk>s (t * k) \\<noteq> NoMsg; \\<And>t. event t = (t mod k = 0);\n        t0 = t * k; Suc 0 < k; m = s (t * k); i * k \\<noteq> Suc (t * k);\n        Suc (t * k) \\<le> i * k;\n        \\<forall>x.\n           Suc (t * k) \\<le> x \\<and>\n           x \\<le> Suc (i * k - 2) \\<longrightarrow>\n           s x = NoMsg;\n        t < i\\<rbrakk>\n       \\<Longrightarrow> (t * k < t * k + k - Suc 0 \\<longrightarrow>\n                          t * k \\<le> t * k \\<and>\n                          s (t * k) = s (t * k) \\<and>\n                          (\\<forall>x.\n                              Suc (t * k) \\<le> x \\<and>\n                              x \\<le> t * k + k - Suc 0 \\<longrightarrow>\n                              s x = NoMsg)) \\<and>\n                         (\\<not> t * k < t * k + k - Suc 0 \\<longrightarrow>\n                          t * k \\<le> t * k \\<and>\n                          t * k = t * k + k - Suc 0 \\<and>\n                          s (t * k) = s (t * k))\n 2. \\<lbrakk>m \\<noteq> NoMsg; \\<And>t. event t = (t mod k = 0); t0 = t * k;\n     Suc 0 < k;\n     \\<exists>x.\n        (x = Suc (t * k) \\<longrightarrow>\n         s (Suc (t * k)) = m \\<and>\n         (\\<exists>x.\n             (x = Suc (Suc (t * k)) \\<longrightarrow>\n              (if Suc (Suc 0) = k then 0 else Suc (Suc (t * k) mod k)) =\n              0) \\<and>\n             (x \\<noteq> Suc (Suc (t * k)) \\<longrightarrow>\n              Suc (Suc (t * k)) \\<le> x \\<and>\n              x mod k = 0 \\<and>\n              (\\<forall>xa.\n                  Suc (Suc (t * k)) \\<le> xa \\<and>\n                  xa \\<le> Suc (Suc (t * k +\n                                     (x -\nSuc (Suc (Suc (t * k)))))) \\<longrightarrow>\n                  s xa = NoMsg)))) \\<and>\n        (x \\<noteq> Suc (t * k) \\<longrightarrow>\n         Suc (t * k) \\<le> x \\<and>\n         s x = m \\<and>\n         0 < x mod k \\<and>\n         (\\<exists>xa.\n             (xa = Suc x \\<longrightarrow>\n              (if Suc (x mod k) = k then 0 else Suc (x mod k)) = 0) \\<and>\n             (xa \\<noteq> Suc x \\<longrightarrow>\n              Suc x \\<le> xa \\<and>\n              xa mod k = 0 \\<and>\n              (\\<forall>xb.\n                  Suc x \\<le> xb \\<and>\n                  xb \\<le> Suc (x + (xa - Suc (Suc x))) \\<longrightarrow>\n                  s xb = NoMsg))) \\<and>\n         (\\<forall>xa.\n             Suc (t * k) \\<le> xa \\<and>\n             xa \\<le> Suc (t * k +\n                           (x - Suc (Suc (t * k)))) \\<longrightarrow>\n             0 < xa mod k))\\<rbrakk>\n    \\<Longrightarrow> \\<exists>x.\n                         (x < t * k + k - Suc 0 \\<longrightarrow>\n                          t * k \\<le> x \\<and>\n                          s x = m \\<and>\n                          (\\<forall>xa.\n                              Suc x \\<le> xa \\<and>\n                              xa \\<le> t * k + k - Suc 0 \\<longrightarrow>\n                              s xa = NoMsg)) \\<and>\n                         (\\<not> x < t * k + k - Suc 0 \\<longrightarrow>\n                          t * k \\<le> x \\<and>\n                          x = t * k + k - Suc 0 \\<and> s x = m)", "apply simp"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>i.\n       \\<lbrakk>s (t * k) \\<noteq> NoMsg; \\<And>t. event t = (t mod k = 0);\n        t0 = t * k; Suc 0 < k; m = s (t * k); i * k \\<noteq> Suc (t * k);\n        Suc (t * k) \\<le> i * k;\n        \\<forall>x.\n           Suc (t * k) \\<le> x \\<and>\n           x \\<le> Suc (i * k - 2) \\<longrightarrow>\n           s x = NoMsg;\n        t < i\\<rbrakk>\n       \\<Longrightarrow> (t * k < t * k + k - Suc 0 \\<longrightarrow>\n                          (\\<forall>x.\n                              Suc (t * k) \\<le> x \\<and>\n                              x \\<le> t * k + k - Suc 0 \\<longrightarrow>\n                              s x = NoMsg)) \\<and>\n                         (\\<not> t * k < t * k + k - Suc 0 \\<longrightarrow>\n                          t = 0)\n 2. \\<lbrakk>m \\<noteq> NoMsg; \\<And>t. event t = (t mod k = 0); t0 = t * k;\n     Suc 0 < k;\n     \\<exists>x.\n        (x = Suc (t * k) \\<longrightarrow>\n         s (Suc (t * k)) = m \\<and>\n         (\\<exists>x.\n             (x = Suc (Suc (t * k)) \\<longrightarrow>\n              (if Suc (Suc 0) = k then 0 else Suc (Suc (t * k) mod k)) =\n              0) \\<and>\n             (x \\<noteq> Suc (Suc (t * k)) \\<longrightarrow>\n              Suc (Suc (t * k)) \\<le> x \\<and>\n              x mod k = 0 \\<and>\n              (\\<forall>xa.\n                  Suc (Suc (t * k)) \\<le> xa \\<and>\n                  xa \\<le> Suc (Suc (t * k +\n                                     (x -\nSuc (Suc (Suc (t * k)))))) \\<longrightarrow>\n                  s xa = NoMsg)))) \\<and>\n        (x \\<noteq> Suc (t * k) \\<longrightarrow>\n         Suc (t * k) \\<le> x \\<and>\n         s x = m \\<and>\n         0 < x mod k \\<and>\n         (\\<exists>xa.\n             (xa = Suc x \\<longrightarrow>\n              (if Suc (x mod k) = k then 0 else Suc (x mod k)) = 0) \\<and>\n             (xa \\<noteq> Suc x \\<longrightarrow>\n              Suc x \\<le> xa \\<and>\n              xa mod k = 0 \\<and>\n              (\\<forall>xb.\n                  Suc x \\<le> xb \\<and>\n                  xb \\<le> Suc (x + (xa - Suc (Suc x))) \\<longrightarrow>\n                  s xb = NoMsg))) \\<and>\n         (\\<forall>xa.\n             Suc (t * k) \\<le> xa \\<and>\n             xa \\<le> Suc (t * k +\n                           (x - Suc (Suc (t * k)))) \\<longrightarrow>\n             0 < xa mod k))\\<rbrakk>\n    \\<Longrightarrow> \\<exists>x.\n                         (x < t * k + k - Suc 0 \\<longrightarrow>\n                          t * k \\<le> x \\<and>\n                          s x = m \\<and>\n                          (\\<forall>xa.\n                              Suc x \\<le> xa \\<and>\n                              xa \\<le> t * k + k - Suc 0 \\<longrightarrow>\n                              s xa = NoMsg)) \\<and>\n                         (\\<not> x < t * k + k - Suc 0 \\<longrightarrow>\n                          t * k \\<le> x \\<and>\n                          x = t * k + k - Suc 0 \\<and> s x = m)", "apply (subgoal_tac \"t * k < t * k + k - Suc 0\")"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>i.\n       \\<lbrakk>s (t * k) \\<noteq> NoMsg; \\<And>t. event t = (t mod k = 0);\n        t0 = t * k; Suc 0 < k; m = s (t * k); i * k \\<noteq> Suc (t * k);\n        Suc (t * k) \\<le> i * k;\n        \\<forall>x.\n           Suc (t * k) \\<le> x \\<and>\n           x \\<le> Suc (i * k - 2) \\<longrightarrow>\n           s x = NoMsg;\n        t < i; t * k < t * k + k - Suc 0\\<rbrakk>\n       \\<Longrightarrow> (t * k < t * k + k - Suc 0 \\<longrightarrow>\n                          (\\<forall>x.\n                              Suc (t * k) \\<le> x \\<and>\n                              x \\<le> t * k + k - Suc 0 \\<longrightarrow>\n                              s x = NoMsg)) \\<and>\n                         (\\<not> t * k < t * k + k - Suc 0 \\<longrightarrow>\n                          t = 0)\n 2. \\<And>i.\n       \\<lbrakk>s (t * k) \\<noteq> NoMsg; \\<And>t. event t = (t mod k = 0);\n        t0 = t * k; Suc 0 < k; m = s (t * k); i * k \\<noteq> Suc (t * k);\n        Suc (t * k) \\<le> i * k;\n        \\<forall>x.\n           Suc (t * k) \\<le> x \\<and>\n           x \\<le> Suc (i * k - 2) \\<longrightarrow>\n           s x = NoMsg;\n        t < i\\<rbrakk>\n       \\<Longrightarrow> t * k < t * k + k - Suc 0\n 3. \\<lbrakk>m \\<noteq> NoMsg; \\<And>t. event t = (t mod k = 0); t0 = t * k;\n     Suc 0 < k;\n     \\<exists>x.\n        (x = Suc (t * k) \\<longrightarrow>\n         s (Suc (t * k)) = m \\<and>\n         (\\<exists>x.\n             (x = Suc (Suc (t * k)) \\<longrightarrow>\n              (if Suc (Suc 0) = k then 0 else Suc (Suc (t * k) mod k)) =\n              0) \\<and>\n             (x \\<noteq> Suc (Suc (t * k)) \\<longrightarrow>\n              Suc (Suc (t * k)) \\<le> x \\<and>\n              x mod k = 0 \\<and>\n              (\\<forall>xa.\n                  Suc (Suc (t * k)) \\<le> xa \\<and>\n                  xa \\<le> Suc (Suc (t * k +\n                                     (x -\nSuc (Suc (Suc (t * k)))))) \\<longrightarrow>\n                  s xa = NoMsg)))) \\<and>\n        (x \\<noteq> Suc (t * k) \\<longrightarrow>\n         Suc (t * k) \\<le> x \\<and>\n         s x = m \\<and>\n         0 < x mod k \\<and>\n         (\\<exists>xa.\n             (xa = Suc x \\<longrightarrow>\n              (if Suc (x mod k) = k then 0 else Suc (x mod k)) = 0) \\<and>\n             (xa \\<noteq> Suc x \\<longrightarrow>\n              Suc x \\<le> xa \\<and>\n              xa mod k = 0 \\<and>\n              (\\<forall>xb.\n                  Suc x \\<le> xb \\<and>\n                  xb \\<le> Suc (x + (xa - Suc (Suc x))) \\<longrightarrow>\n                  s xb = NoMsg))) \\<and>\n         (\\<forall>xa.\n             Suc (t * k) \\<le> xa \\<and>\n             xa \\<le> Suc (t * k +\n                           (x - Suc (Suc (t * k)))) \\<longrightarrow>\n             0 < xa mod k))\\<rbrakk>\n    \\<Longrightarrow> \\<exists>x.\n                         (x < t * k + k - Suc 0 \\<longrightarrow>\n                          t * k \\<le> x \\<and>\n                          s x = m \\<and>\n                          (\\<forall>xa.\n                              Suc x \\<le> xa \\<and>\n                              xa \\<le> t * k + k - Suc 0 \\<longrightarrow>\n                              s xa = NoMsg)) \\<and>\n                         (\\<not> x < t * k + k - Suc 0 \\<longrightarrow>\n                          t * k \\<le> x \\<and>\n                          x = t * k + k - Suc 0 \\<and> s x = m)", "prefer 2"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>i.\n       \\<lbrakk>s (t * k) \\<noteq> NoMsg; \\<And>t. event t = (t mod k = 0);\n        t0 = t * k; Suc 0 < k; m = s (t * k); i * k \\<noteq> Suc (t * k);\n        Suc (t * k) \\<le> i * k;\n        \\<forall>x.\n           Suc (t * k) \\<le> x \\<and>\n           x \\<le> Suc (i * k - 2) \\<longrightarrow>\n           s x = NoMsg;\n        t < i\\<rbrakk>\n       \\<Longrightarrow> t * k < t * k + k - Suc 0\n 2. \\<And>i.\n       \\<lbrakk>s (t * k) \\<noteq> NoMsg; \\<And>t. event t = (t mod k = 0);\n        t0 = t * k; Suc 0 < k; m = s (t * k); i * k \\<noteq> Suc (t * k);\n        Suc (t * k) \\<le> i * k;\n        \\<forall>x.\n           Suc (t * k) \\<le> x \\<and>\n           x \\<le> Suc (i * k - 2) \\<longrightarrow>\n           s x = NoMsg;\n        t < i; t * k < t * k + k - Suc 0\\<rbrakk>\n       \\<Longrightarrow> (t * k < t * k + k - Suc 0 \\<longrightarrow>\n                          (\\<forall>x.\n                              Suc (t * k) \\<le> x \\<and>\n                              x \\<le> t * k + k - Suc 0 \\<longrightarrow>\n                              s x = NoMsg)) \\<and>\n                         (\\<not> t * k < t * k + k - Suc 0 \\<longrightarrow>\n                          t = 0)\n 3. \\<lbrakk>m \\<noteq> NoMsg; \\<And>t. event t = (t mod k = 0); t0 = t * k;\n     Suc 0 < k;\n     \\<exists>x.\n        (x = Suc (t * k) \\<longrightarrow>\n         s (Suc (t * k)) = m \\<and>\n         (\\<exists>x.\n             (x = Suc (Suc (t * k)) \\<longrightarrow>\n              (if Suc (Suc 0) = k then 0 else Suc (Suc (t * k) mod k)) =\n              0) \\<and>\n             (x \\<noteq> Suc (Suc (t * k)) \\<longrightarrow>\n              Suc (Suc (t * k)) \\<le> x \\<and>\n              x mod k = 0 \\<and>\n              (\\<forall>xa.\n                  Suc (Suc (t * k)) \\<le> xa \\<and>\n                  xa \\<le> Suc (Suc (t * k +\n                                     (x -\nSuc (Suc (Suc (t * k)))))) \\<longrightarrow>\n                  s xa = NoMsg)))) \\<and>\n        (x \\<noteq> Suc (t * k) \\<longrightarrow>\n         Suc (t * k) \\<le> x \\<and>\n         s x = m \\<and>\n         0 < x mod k \\<and>\n         (\\<exists>xa.\n             (xa = Suc x \\<longrightarrow>\n              (if Suc (x mod k) = k then 0 else Suc (x mod k)) = 0) \\<and>\n             (xa \\<noteq> Suc x \\<longrightarrow>\n              Suc x \\<le> xa \\<and>\n              xa mod k = 0 \\<and>\n              (\\<forall>xb.\n                  Suc x \\<le> xb \\<and>\n                  xb \\<le> Suc (x + (xa - Suc (Suc x))) \\<longrightarrow>\n                  s xb = NoMsg))) \\<and>\n         (\\<forall>xa.\n             Suc (t * k) \\<le> xa \\<and>\n             xa \\<le> Suc (t * k +\n                           (x - Suc (Suc (t * k)))) \\<longrightarrow>\n             0 < xa mod k))\\<rbrakk>\n    \\<Longrightarrow> \\<exists>x.\n                         (x < t * k + k - Suc 0 \\<longrightarrow>\n                          t * k \\<le> x \\<and>\n                          s x = m \\<and>\n                          (\\<forall>xa.\n                              Suc x \\<le> xa \\<and>\n                              xa \\<le> t * k + k - Suc 0 \\<longrightarrow>\n                              s xa = NoMsg)) \\<and>\n                         (\\<not> x < t * k + k - Suc 0 \\<longrightarrow>\n                          t * k \\<le> x \\<and>\n                          x = t * k + k - Suc 0 \\<and> s x = m)", "apply simp"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>i.\n       \\<lbrakk>s (t * k) \\<noteq> NoMsg; \\<And>t. event t = (t mod k = 0);\n        t0 = t * k; Suc 0 < k; m = s (t * k); i * k \\<noteq> Suc (t * k);\n        Suc (t * k) \\<le> i * k;\n        \\<forall>x.\n           Suc (t * k) \\<le> x \\<and>\n           x \\<le> Suc (i * k - 2) \\<longrightarrow>\n           s x = NoMsg;\n        t < i; t * k < t * k + k - Suc 0\\<rbrakk>\n       \\<Longrightarrow> (t * k < t * k + k - Suc 0 \\<longrightarrow>\n                          (\\<forall>x.\n                              Suc (t * k) \\<le> x \\<and>\n                              x \\<le> t * k + k - Suc 0 \\<longrightarrow>\n                              s x = NoMsg)) \\<and>\n                         (\\<not> t * k < t * k + k - Suc 0 \\<longrightarrow>\n                          t = 0)\n 2. \\<lbrakk>m \\<noteq> NoMsg; \\<And>t. event t = (t mod k = 0); t0 = t * k;\n     Suc 0 < k;\n     \\<exists>x.\n        (x = Suc (t * k) \\<longrightarrow>\n         s (Suc (t * k)) = m \\<and>\n         (\\<exists>x.\n             (x = Suc (Suc (t * k)) \\<longrightarrow>\n              (if Suc (Suc 0) = k then 0 else Suc (Suc (t * k) mod k)) =\n              0) \\<and>\n             (x \\<noteq> Suc (Suc (t * k)) \\<longrightarrow>\n              Suc (Suc (t * k)) \\<le> x \\<and>\n              x mod k = 0 \\<and>\n              (\\<forall>xa.\n                  Suc (Suc (t * k)) \\<le> xa \\<and>\n                  xa \\<le> Suc (Suc (t * k +\n                                     (x -\nSuc (Suc (Suc (t * k)))))) \\<longrightarrow>\n                  s xa = NoMsg)))) \\<and>\n        (x \\<noteq> Suc (t * k) \\<longrightarrow>\n         Suc (t * k) \\<le> x \\<and>\n         s x = m \\<and>\n         0 < x mod k \\<and>\n         (\\<exists>xa.\n             (xa = Suc x \\<longrightarrow>\n              (if Suc (x mod k) = k then 0 else Suc (x mod k)) = 0) \\<and>\n             (xa \\<noteq> Suc x \\<longrightarrow>\n              Suc x \\<le> xa \\<and>\n              xa mod k = 0 \\<and>\n              (\\<forall>xb.\n                  Suc x \\<le> xb \\<and>\n                  xb \\<le> Suc (x + (xa - Suc (Suc x))) \\<longrightarrow>\n                  s xb = NoMsg))) \\<and>\n         (\\<forall>xa.\n             Suc (t * k) \\<le> xa \\<and>\n             xa \\<le> Suc (t * k +\n                           (x - Suc (Suc (t * k)))) \\<longrightarrow>\n             0 < xa mod k))\\<rbrakk>\n    \\<Longrightarrow> \\<exists>x.\n                         (x < t * k + k - Suc 0 \\<longrightarrow>\n                          t * k \\<le> x \\<and>\n                          s x = m \\<and>\n                          (\\<forall>xa.\n                              Suc x \\<le> xa \\<and>\n                              xa \\<le> t * k + k - Suc 0 \\<longrightarrow>\n                              s xa = NoMsg)) \\<and>\n                         (\\<not> x < t * k + k - Suc 0 \\<longrightarrow>\n                          t * k \\<le> x \\<and>\n                          x = t * k + k - Suc 0 \\<and> s x = m)", "apply (clarsimp, rename_tac j)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>i j.\n       \\<lbrakk>s (t * k) \\<noteq> NoMsg; \\<And>t. event t = (t mod k = 0);\n        t0 = t * k; Suc 0 < k; m = s (t * k); i * k \\<noteq> Suc (t * k);\n        Suc (t * k) \\<le> i * k;\n        \\<forall>x.\n           Suc (t * k) \\<le> x \\<and>\n           x \\<le> Suc (i * k - 2) \\<longrightarrow>\n           s x = NoMsg;\n        t < i; Suc (t * k) \\<le> j; j \\<le> t * k + k - Suc 0\\<rbrakk>\n       \\<Longrightarrow> s j = NoMsg\n 2. \\<lbrakk>m \\<noteq> NoMsg; \\<And>t. event t = (t mod k = 0); t0 = t * k;\n     Suc 0 < k;\n     \\<exists>x.\n        (x = Suc (t * k) \\<longrightarrow>\n         s (Suc (t * k)) = m \\<and>\n         (\\<exists>x.\n             (x = Suc (Suc (t * k)) \\<longrightarrow>\n              (if Suc (Suc 0) = k then 0 else Suc (Suc (t * k) mod k)) =\n              0) \\<and>\n             (x \\<noteq> Suc (Suc (t * k)) \\<longrightarrow>\n              Suc (Suc (t * k)) \\<le> x \\<and>\n              x mod k = 0 \\<and>\n              (\\<forall>xa.\n                  Suc (Suc (t * k)) \\<le> xa \\<and>\n                  xa \\<le> Suc (Suc (t * k +\n                                     (x -\nSuc (Suc (Suc (t * k)))))) \\<longrightarrow>\n                  s xa = NoMsg)))) \\<and>\n        (x \\<noteq> Suc (t * k) \\<longrightarrow>\n         Suc (t * k) \\<le> x \\<and>\n         s x = m \\<and>\n         0 < x mod k \\<and>\n         (\\<exists>xa.\n             (xa = Suc x \\<longrightarrow>\n              (if Suc (x mod k) = k then 0 else Suc (x mod k)) = 0) \\<and>\n             (xa \\<noteq> Suc x \\<longrightarrow>\n              Suc x \\<le> xa \\<and>\n              xa mod k = 0 \\<and>\n              (\\<forall>xb.\n                  Suc x \\<le> xb \\<and>\n                  xb \\<le> Suc (x + (xa - Suc (Suc x))) \\<longrightarrow>\n                  s xb = NoMsg))) \\<and>\n         (\\<forall>xa.\n             Suc (t * k) \\<le> xa \\<and>\n             xa \\<le> Suc (t * k +\n                           (x - Suc (Suc (t * k)))) \\<longrightarrow>\n             0 < xa mod k))\\<rbrakk>\n    \\<Longrightarrow> \\<exists>x.\n                         (x < t * k + k - Suc 0 \\<longrightarrow>\n                          t * k \\<le> x \\<and>\n                          s x = m \\<and>\n                          (\\<forall>xa.\n                              Suc x \\<le> xa \\<and>\n                              xa \\<le> t * k + k - Suc 0 \\<longrightarrow>\n                              s xa = NoMsg)) \\<and>\n                         (\\<not> x < t * k + k - Suc 0 \\<longrightarrow>\n                          t * k \\<le> x \\<and>\n                          x = t * k + k - Suc 0 \\<and> s x = m)", "apply (drule_tac x=j in spec)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>i j.\n       \\<lbrakk>s (t * k) \\<noteq> NoMsg; \\<And>t. event t = (t mod k = 0);\n        t0 = t * k; Suc 0 < k; m = s (t * k); i * k \\<noteq> Suc (t * k);\n        Suc (t * k) \\<le> i * k; t < i; Suc (t * k) \\<le> j;\n        j \\<le> t * k + k - Suc 0;\n        Suc (t * k) \\<le> j \\<and> j \\<le> Suc (i * k - 2) \\<longrightarrow>\n        s j = NoMsg\\<rbrakk>\n       \\<Longrightarrow> s j = NoMsg\n 2. \\<lbrakk>m \\<noteq> NoMsg; \\<And>t. event t = (t mod k = 0); t0 = t * k;\n     Suc 0 < k;\n     \\<exists>x.\n        (x = Suc (t * k) \\<longrightarrow>\n         s (Suc (t * k)) = m \\<and>\n         (\\<exists>x.\n             (x = Suc (Suc (t * k)) \\<longrightarrow>\n              (if Suc (Suc 0) = k then 0 else Suc (Suc (t * k) mod k)) =\n              0) \\<and>\n             (x \\<noteq> Suc (Suc (t * k)) \\<longrightarrow>\n              Suc (Suc (t * k)) \\<le> x \\<and>\n              x mod k = 0 \\<and>\n              (\\<forall>xa.\n                  Suc (Suc (t * k)) \\<le> xa \\<and>\n                  xa \\<le> Suc (Suc (t * k +\n                                     (x -\nSuc (Suc (Suc (t * k)))))) \\<longrightarrow>\n                  s xa = NoMsg)))) \\<and>\n        (x \\<noteq> Suc (t * k) \\<longrightarrow>\n         Suc (t * k) \\<le> x \\<and>\n         s x = m \\<and>\n         0 < x mod k \\<and>\n         (\\<exists>xa.\n             (xa = Suc x \\<longrightarrow>\n              (if Suc (x mod k) = k then 0 else Suc (x mod k)) = 0) \\<and>\n             (xa \\<noteq> Suc x \\<longrightarrow>\n              Suc x \\<le> xa \\<and>\n              xa mod k = 0 \\<and>\n              (\\<forall>xb.\n                  Suc x \\<le> xb \\<and>\n                  xb \\<le> Suc (x + (xa - Suc (Suc x))) \\<longrightarrow>\n                  s xb = NoMsg))) \\<and>\n         (\\<forall>xa.\n             Suc (t * k) \\<le> xa \\<and>\n             xa \\<le> Suc (t * k +\n                           (x - Suc (Suc (t * k)))) \\<longrightarrow>\n             0 < xa mod k))\\<rbrakk>\n    \\<Longrightarrow> \\<exists>x.\n                         (x < t * k + k - Suc 0 \\<longrightarrow>\n                          t * k \\<le> x \\<and>\n                          s x = m \\<and>\n                          (\\<forall>xa.\n                              Suc x \\<le> xa \\<and>\n                              xa \\<le> t * k + k - Suc 0 \\<longrightarrow>\n                              s xa = NoMsg)) \\<and>\n                         (\\<not> x < t * k + k - Suc 0 \\<longrightarrow>\n                          t * k \\<le> x \\<and>\n                          x = t * k + k - Suc 0 \\<and> s x = m)", "apply (simp add: numeral_2_eq_2 Suc_diff_Suc)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>i j.\n       \\<lbrakk>s (t * k) \\<noteq> NoMsg; \\<And>t. event t = (t mod k = 0);\n        t0 = t * k; Suc 0 < k; m = s (t * k); i * k \\<noteq> Suc (t * k);\n        Suc (t * k) \\<le> i * k; t < i; Suc (t * k) \\<le> j;\n        j \\<le> t * k + k - Suc 0;\n        j \\<le> i * k - Suc 0 \\<longrightarrow> s j = NoMsg\\<rbrakk>\n       \\<Longrightarrow> s j = NoMsg\n 2. \\<lbrakk>m \\<noteq> NoMsg; \\<And>t. event t = (t mod k = 0); t0 = t * k;\n     Suc 0 < k;\n     \\<exists>x.\n        (x = Suc (t * k) \\<longrightarrow>\n         s (Suc (t * k)) = m \\<and>\n         (\\<exists>x.\n             (x = Suc (Suc (t * k)) \\<longrightarrow>\n              (if Suc (Suc 0) = k then 0 else Suc (Suc (t * k) mod k)) =\n              0) \\<and>\n             (x \\<noteq> Suc (Suc (t * k)) \\<longrightarrow>\n              Suc (Suc (t * k)) \\<le> x \\<and>\n              x mod k = 0 \\<and>\n              (\\<forall>xa.\n                  Suc (Suc (t * k)) \\<le> xa \\<and>\n                  xa \\<le> Suc (Suc (t * k +\n                                     (x -\nSuc (Suc (Suc (t * k)))))) \\<longrightarrow>\n                  s xa = NoMsg)))) \\<and>\n        (x \\<noteq> Suc (t * k) \\<longrightarrow>\n         Suc (t * k) \\<le> x \\<and>\n         s x = m \\<and>\n         0 < x mod k \\<and>\n         (\\<exists>xa.\n             (xa = Suc x \\<longrightarrow>\n              (if Suc (x mod k) = k then 0 else Suc (x mod k)) = 0) \\<and>\n             (xa \\<noteq> Suc x \\<longrightarrow>\n              Suc x \\<le> xa \\<and>\n              xa mod k = 0 \\<and>\n              (\\<forall>xb.\n                  Suc x \\<le> xb \\<and>\n                  xb \\<le> Suc (x + (xa - Suc (Suc x))) \\<longrightarrow>\n                  s xb = NoMsg))) \\<and>\n         (\\<forall>xa.\n             Suc (t * k) \\<le> xa \\<and>\n             xa \\<le> Suc (t * k +\n                           (x - Suc (Suc (t * k)))) \\<longrightarrow>\n             0 < xa mod k))\\<rbrakk>\n    \\<Longrightarrow> \\<exists>x.\n                         (x < t * k + k - Suc 0 \\<longrightarrow>\n                          t * k \\<le> x \\<and>\n                          s x = m \\<and>\n                          (\\<forall>xa.\n                              Suc x \\<le> xa \\<and>\n                              xa \\<le> t * k + k - Suc 0 \\<longrightarrow>\n                              s xa = NoMsg)) \\<and>\n                         (\\<not> x < t * k + k - Suc 0 \\<longrightarrow>\n                          t * k \\<le> x \\<and>\n                          x = t * k + k - Suc 0 \\<and> s x = m)", "apply (drule mp)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>i j.\n       \\<lbrakk>s (t * k) \\<noteq> NoMsg; \\<And>t. event t = (t mod k = 0);\n        t0 = t * k; Suc 0 < k; m = s (t * k); i * k \\<noteq> Suc (t * k);\n        Suc (t * k) \\<le> i * k; t < i; Suc (t * k) \\<le> j;\n        j \\<le> t * k + k - Suc 0\\<rbrakk>\n       \\<Longrightarrow> j \\<le> i * k - Suc 0\n 2. \\<And>i j.\n       \\<lbrakk>s (t * k) \\<noteq> NoMsg; \\<And>t. event t = (t mod k = 0);\n        t0 = t * k; Suc 0 < k; m = s (t * k); i * k \\<noteq> Suc (t * k);\n        Suc (t * k) \\<le> i * k; t < i; Suc (t * k) \\<le> j;\n        j \\<le> t * k + k - Suc 0; s j = NoMsg\\<rbrakk>\n       \\<Longrightarrow> s j = NoMsg\n 3. \\<lbrakk>m \\<noteq> NoMsg; \\<And>t. event t = (t mod k = 0); t0 = t * k;\n     Suc 0 < k;\n     \\<exists>x.\n        (x = Suc (t * k) \\<longrightarrow>\n         s (Suc (t * k)) = m \\<and>\n         (\\<exists>x.\n             (x = Suc (Suc (t * k)) \\<longrightarrow>\n              (if Suc (Suc 0) = k then 0 else Suc (Suc (t * k) mod k)) =\n              0) \\<and>\n             (x \\<noteq> Suc (Suc (t * k)) \\<longrightarrow>\n              Suc (Suc (t * k)) \\<le> x \\<and>\n              x mod k = 0 \\<and>\n              (\\<forall>xa.\n                  Suc (Suc (t * k)) \\<le> xa \\<and>\n                  xa \\<le> Suc (Suc (t * k +\n                                     (x -\nSuc (Suc (Suc (t * k)))))) \\<longrightarrow>\n                  s xa = NoMsg)))) \\<and>\n        (x \\<noteq> Suc (t * k) \\<longrightarrow>\n         Suc (t * k) \\<le> x \\<and>\n         s x = m \\<and>\n         0 < x mod k \\<and>\n         (\\<exists>xa.\n             (xa = Suc x \\<longrightarrow>\n              (if Suc (x mod k) = k then 0 else Suc (x mod k)) = 0) \\<and>\n             (xa \\<noteq> Suc x \\<longrightarrow>\n              Suc x \\<le> xa \\<and>\n              xa mod k = 0 \\<and>\n              (\\<forall>xb.\n                  Suc x \\<le> xb \\<and>\n                  xb \\<le> Suc (x + (xa - Suc (Suc x))) \\<longrightarrow>\n                  s xb = NoMsg))) \\<and>\n         (\\<forall>xa.\n             Suc (t * k) \\<le> xa \\<and>\n             xa \\<le> Suc (t * k +\n                           (x - Suc (Suc (t * k)))) \\<longrightarrow>\n             0 < xa mod k))\\<rbrakk>\n    \\<Longrightarrow> \\<exists>x.\n                         (x < t * k + k - Suc 0 \\<longrightarrow>\n                          t * k \\<le> x \\<and>\n                          s x = m \\<and>\n                          (\\<forall>xa.\n                              Suc x \\<le> xa \\<and>\n                              xa \\<le> t * k + k - Suc 0 \\<longrightarrow>\n                              s xa = NoMsg)) \\<and>\n                         (\\<not> x < t * k + k - Suc 0 \\<longrightarrow>\n                          t * k \\<le> x \\<and>\n                          x = t * k + k - Suc 0 \\<and> s x = m)", "apply (rule order_trans, assumption)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>i j.\n       \\<lbrakk>s (t * k) \\<noteq> NoMsg; \\<And>t. event t = (t mod k = 0);\n        t0 = t * k; Suc 0 < k; m = s (t * k); i * k \\<noteq> Suc (t * k);\n        Suc (t * k) \\<le> i * k; t < i; Suc (t * k) \\<le> j;\n        j \\<le> t * k + k - Suc 0\\<rbrakk>\n       \\<Longrightarrow> t * k + k - Suc 0 \\<le> i * k - Suc 0\n 2. \\<And>i j.\n       \\<lbrakk>s (t * k) \\<noteq> NoMsg; \\<And>t. event t = (t mod k = 0);\n        t0 = t * k; Suc 0 < k; m = s (t * k); i * k \\<noteq> Suc (t * k);\n        Suc (t * k) \\<le> i * k; t < i; Suc (t * k) \\<le> j;\n        j \\<le> t * k + k - Suc 0; s j = NoMsg\\<rbrakk>\n       \\<Longrightarrow> s j = NoMsg\n 3. \\<lbrakk>m \\<noteq> NoMsg; \\<And>t. event t = (t mod k = 0); t0 = t * k;\n     Suc 0 < k;\n     \\<exists>x.\n        (x = Suc (t * k) \\<longrightarrow>\n         s (Suc (t * k)) = m \\<and>\n         (\\<exists>x.\n             (x = Suc (Suc (t * k)) \\<longrightarrow>\n              (if Suc (Suc 0) = k then 0 else Suc (Suc (t * k) mod k)) =\n              0) \\<and>\n             (x \\<noteq> Suc (Suc (t * k)) \\<longrightarrow>\n              Suc (Suc (t * k)) \\<le> x \\<and>\n              x mod k = 0 \\<and>\n              (\\<forall>xa.\n                  Suc (Suc (t * k)) \\<le> xa \\<and>\n                  xa \\<le> Suc (Suc (t * k +\n                                     (x -\nSuc (Suc (Suc (t * k)))))) \\<longrightarrow>\n                  s xa = NoMsg)))) \\<and>\n        (x \\<noteq> Suc (t * k) \\<longrightarrow>\n         Suc (t * k) \\<le> x \\<and>\n         s x = m \\<and>\n         0 < x mod k \\<and>\n         (\\<exists>xa.\n             (xa = Suc x \\<longrightarrow>\n              (if Suc (x mod k) = k then 0 else Suc (x mod k)) = 0) \\<and>\n             (xa \\<noteq> Suc x \\<longrightarrow>\n              Suc x \\<le> xa \\<and>\n              xa mod k = 0 \\<and>\n              (\\<forall>xb.\n                  Suc x \\<le> xb \\<and>\n                  xb \\<le> Suc (x + (xa - Suc (Suc x))) \\<longrightarrow>\n                  s xb = NoMsg))) \\<and>\n         (\\<forall>xa.\n             Suc (t * k) \\<le> xa \\<and>\n             xa \\<le> Suc (t * k +\n                           (x - Suc (Suc (t * k)))) \\<longrightarrow>\n             0 < xa mod k))\\<rbrakk>\n    \\<Longrightarrow> \\<exists>x.\n                         (x < t * k + k - Suc 0 \\<longrightarrow>\n                          t * k \\<le> x \\<and>\n                          s x = m \\<and>\n                          (\\<forall>xa.\n                              Suc x \\<le> xa \\<and>\n                              xa \\<le> t * k + k - Suc 0 \\<longrightarrow>\n                              s xa = NoMsg)) \\<and>\n                         (\\<not> x < t * k + k - Suc 0 \\<longrightarrow>\n                          t * k \\<le> x \\<and>\n                          x = t * k + k - Suc 0 \\<and> s x = m)", "apply (drule_tac m=t and n=i in Suc_leI)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>i j.\n       \\<lbrakk>s (t * k) \\<noteq> NoMsg; \\<And>t. event t = (t mod k = 0);\n        t0 = t * k; Suc 0 < k; m = s (t * k); i * k \\<noteq> Suc (t * k);\n        Suc (t * k) \\<le> i * k; Suc (t * k) \\<le> j;\n        j \\<le> t * k + k - Suc 0; Suc t \\<le> i\\<rbrakk>\n       \\<Longrightarrow> t * k + k - Suc 0 \\<le> i * k - Suc 0\n 2. \\<And>i j.\n       \\<lbrakk>s (t * k) \\<noteq> NoMsg; \\<And>t. event t = (t mod k = 0);\n        t0 = t * k; Suc 0 < k; m = s (t * k); i * k \\<noteq> Suc (t * k);\n        Suc (t * k) \\<le> i * k; t < i; Suc (t * k) \\<le> j;\n        j \\<le> t * k + k - Suc 0; s j = NoMsg\\<rbrakk>\n       \\<Longrightarrow> s j = NoMsg\n 3. \\<lbrakk>m \\<noteq> NoMsg; \\<And>t. event t = (t mod k = 0); t0 = t * k;\n     Suc 0 < k;\n     \\<exists>x.\n        (x = Suc (t * k) \\<longrightarrow>\n         s (Suc (t * k)) = m \\<and>\n         (\\<exists>x.\n             (x = Suc (Suc (t * k)) \\<longrightarrow>\n              (if Suc (Suc 0) = k then 0 else Suc (Suc (t * k) mod k)) =\n              0) \\<and>\n             (x \\<noteq> Suc (Suc (t * k)) \\<longrightarrow>\n              Suc (Suc (t * k)) \\<le> x \\<and>\n              x mod k = 0 \\<and>\n              (\\<forall>xa.\n                  Suc (Suc (t * k)) \\<le> xa \\<and>\n                  xa \\<le> Suc (Suc (t * k +\n                                     (x -\nSuc (Suc (Suc (t * k)))))) \\<longrightarrow>\n                  s xa = NoMsg)))) \\<and>\n        (x \\<noteq> Suc (t * k) \\<longrightarrow>\n         Suc (t * k) \\<le> x \\<and>\n         s x = m \\<and>\n         0 < x mod k \\<and>\n         (\\<exists>xa.\n             (xa = Suc x \\<longrightarrow>\n              (if Suc (x mod k) = k then 0 else Suc (x mod k)) = 0) \\<and>\n             (xa \\<noteq> Suc x \\<longrightarrow>\n              Suc x \\<le> xa \\<and>\n              xa mod k = 0 \\<and>\n              (\\<forall>xb.\n                  Suc x \\<le> xb \\<and>\n                  xb \\<le> Suc (x + (xa - Suc (Suc x))) \\<longrightarrow>\n                  s xb = NoMsg))) \\<and>\n         (\\<forall>xa.\n             Suc (t * k) \\<le> xa \\<and>\n             xa \\<le> Suc (t * k +\n                           (x - Suc (Suc (t * k)))) \\<longrightarrow>\n             0 < xa mod k))\\<rbrakk>\n    \\<Longrightarrow> \\<exists>x.\n                         (x < t * k + k - Suc 0 \\<longrightarrow>\n                          t * k \\<le> x \\<and>\n                          s x = m \\<and>\n                          (\\<forall>xa.\n                              Suc x \\<le> xa \\<and>\n                              xa \\<le> t * k + k - Suc 0 \\<longrightarrow>\n                              s xa = NoMsg)) \\<and>\n                         (\\<not> x < t * k + k - Suc 0 \\<longrightarrow>\n                          t * k \\<le> x \\<and>\n                          x = t * k + k - Suc 0 \\<and> s x = m)", "apply (drule mult_le_mono1[of \"Suc t\"_ k])"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>i j.\n       \\<lbrakk>s (t * k) \\<noteq> NoMsg; \\<And>t. event t = (t mod k = 0);\n        t0 = t * k; Suc 0 < k; m = s (t * k); i * k \\<noteq> Suc (t * k);\n        Suc (t * k) \\<le> i * k; Suc (t * k) \\<le> j;\n        j \\<le> t * k + k - Suc 0; Suc t * k \\<le> i * k\\<rbrakk>\n       \\<Longrightarrow> t * k + k - Suc 0 \\<le> i * k - Suc 0\n 2. \\<And>i j.\n       \\<lbrakk>s (t * k) \\<noteq> NoMsg; \\<And>t. event t = (t mod k = 0);\n        t0 = t * k; Suc 0 < k; m = s (t * k); i * k \\<noteq> Suc (t * k);\n        Suc (t * k) \\<le> i * k; t < i; Suc (t * k) \\<le> j;\n        j \\<le> t * k + k - Suc 0; s j = NoMsg\\<rbrakk>\n       \\<Longrightarrow> s j = NoMsg\n 3. \\<lbrakk>m \\<noteq> NoMsg; \\<And>t. event t = (t mod k = 0); t0 = t * k;\n     Suc 0 < k;\n     \\<exists>x.\n        (x = Suc (t * k) \\<longrightarrow>\n         s (Suc (t * k)) = m \\<and>\n         (\\<exists>x.\n             (x = Suc (Suc (t * k)) \\<longrightarrow>\n              (if Suc (Suc 0) = k then 0 else Suc (Suc (t * k) mod k)) =\n              0) \\<and>\n             (x \\<noteq> Suc (Suc (t * k)) \\<longrightarrow>\n              Suc (Suc (t * k)) \\<le> x \\<and>\n              x mod k = 0 \\<and>\n              (\\<forall>xa.\n                  Suc (Suc (t * k)) \\<le> xa \\<and>\n                  xa \\<le> Suc (Suc (t * k +\n                                     (x -\nSuc (Suc (Suc (t * k)))))) \\<longrightarrow>\n                  s xa = NoMsg)))) \\<and>\n        (x \\<noteq> Suc (t * k) \\<longrightarrow>\n         Suc (t * k) \\<le> x \\<and>\n         s x = m \\<and>\n         0 < x mod k \\<and>\n         (\\<exists>xa.\n             (xa = Suc x \\<longrightarrow>\n              (if Suc (x mod k) = k then 0 else Suc (x mod k)) = 0) \\<and>\n             (xa \\<noteq> Suc x \\<longrightarrow>\n              Suc x \\<le> xa \\<and>\n              xa mod k = 0 \\<and>\n              (\\<forall>xb.\n                  Suc x \\<le> xb \\<and>\n                  xb \\<le> Suc (x + (xa - Suc (Suc x))) \\<longrightarrow>\n                  s xb = NoMsg))) \\<and>\n         (\\<forall>xa.\n             Suc (t * k) \\<le> xa \\<and>\n             xa \\<le> Suc (t * k +\n                           (x - Suc (Suc (t * k)))) \\<longrightarrow>\n             0 < xa mod k))\\<rbrakk>\n    \\<Longrightarrow> \\<exists>x.\n                         (x < t * k + k - Suc 0 \\<longrightarrow>\n                          t * k \\<le> x \\<and>\n                          s x = m \\<and>\n                          (\\<forall>xa.\n                              Suc x \\<le> xa \\<and>\n                              xa \\<le> t * k + k - Suc 0 \\<longrightarrow>\n                              s xa = NoMsg)) \\<and>\n                         (\\<not> x < t * k + k - Suc 0 \\<longrightarrow>\n                          t * k \\<le> x \\<and>\n                          x = t * k + k - Suc 0 \\<and> s x = m)", "apply simp"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>i j.\n       \\<lbrakk>s (t * k) \\<noteq> NoMsg; \\<And>t. event t = (t mod k = 0);\n        t0 = t * k; Suc 0 < k; m = s (t * k); i * k \\<noteq> Suc (t * k);\n        Suc (t * k) \\<le> i * k; t < i; Suc (t * k) \\<le> j;\n        j \\<le> t * k + k - Suc 0; s j = NoMsg\\<rbrakk>\n       \\<Longrightarrow> s j = NoMsg\n 2. \\<lbrakk>m \\<noteq> NoMsg; \\<And>t. event t = (t mod k = 0); t0 = t * k;\n     Suc 0 < k;\n     \\<exists>x.\n        (x = Suc (t * k) \\<longrightarrow>\n         s (Suc (t * k)) = m \\<and>\n         (\\<exists>x.\n             (x = Suc (Suc (t * k)) \\<longrightarrow>\n              (if Suc (Suc 0) = k then 0 else Suc (Suc (t * k) mod k)) =\n              0) \\<and>\n             (x \\<noteq> Suc (Suc (t * k)) \\<longrightarrow>\n              Suc (Suc (t * k)) \\<le> x \\<and>\n              x mod k = 0 \\<and>\n              (\\<forall>xa.\n                  Suc (Suc (t * k)) \\<le> xa \\<and>\n                  xa \\<le> Suc (Suc (t * k +\n                                     (x -\nSuc (Suc (Suc (t * k)))))) \\<longrightarrow>\n                  s xa = NoMsg)))) \\<and>\n        (x \\<noteq> Suc (t * k) \\<longrightarrow>\n         Suc (t * k) \\<le> x \\<and>\n         s x = m \\<and>\n         0 < x mod k \\<and>\n         (\\<exists>xa.\n             (xa = Suc x \\<longrightarrow>\n              (if Suc (x mod k) = k then 0 else Suc (x mod k)) = 0) \\<and>\n             (xa \\<noteq> Suc x \\<longrightarrow>\n              Suc x \\<le> xa \\<and>\n              xa mod k = 0 \\<and>\n              (\\<forall>xb.\n                  Suc x \\<le> xb \\<and>\n                  xb \\<le> Suc (x + (xa - Suc (Suc x))) \\<longrightarrow>\n                  s xb = NoMsg))) \\<and>\n         (\\<forall>xa.\n             Suc (t * k) \\<le> xa \\<and>\n             xa \\<le> Suc (t * k +\n                           (x - Suc (Suc (t * k)))) \\<longrightarrow>\n             0 < xa mod k))\\<rbrakk>\n    \\<Longrightarrow> \\<exists>x.\n                         (x < t * k + k - Suc 0 \\<longrightarrow>\n                          t * k \\<le> x \\<and>\n                          s x = m \\<and>\n                          (\\<forall>xa.\n                              Suc x \\<le> xa \\<and>\n                              xa \\<le> t * k + k - Suc 0 \\<longrightarrow>\n                              s xa = NoMsg)) \\<and>\n                         (\\<not> x < t * k + k - Suc 0 \\<longrightarrow>\n                          t * k \\<le> x \\<and>\n                          x = t * k + k - Suc 0 \\<and> s x = m)", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>m \\<noteq> NoMsg; \\<And>t. event t = (t mod k = 0); t0 = t * k;\n     Suc 0 < k;\n     \\<exists>x.\n        (x = Suc (t * k) \\<longrightarrow>\n         s (Suc (t * k)) = m \\<and>\n         (\\<exists>x.\n             (x = Suc (Suc (t * k)) \\<longrightarrow>\n              (if Suc (Suc 0) = k then 0 else Suc (Suc (t * k) mod k)) =\n              0) \\<and>\n             (x \\<noteq> Suc (Suc (t * k)) \\<longrightarrow>\n              Suc (Suc (t * k)) \\<le> x \\<and>\n              x mod k = 0 \\<and>\n              (\\<forall>xa.\n                  Suc (Suc (t * k)) \\<le> xa \\<and>\n                  xa \\<le> Suc (Suc (t * k +\n                                     (x -\nSuc (Suc (Suc (t * k)))))) \\<longrightarrow>\n                  s xa = NoMsg)))) \\<and>\n        (x \\<noteq> Suc (t * k) \\<longrightarrow>\n         Suc (t * k) \\<le> x \\<and>\n         s x = m \\<and>\n         0 < x mod k \\<and>\n         (\\<exists>xa.\n             (xa = Suc x \\<longrightarrow>\n              (if Suc (x mod k) = k then 0 else Suc (x mod k)) = 0) \\<and>\n             (xa \\<noteq> Suc x \\<longrightarrow>\n              Suc x \\<le> xa \\<and>\n              xa mod k = 0 \\<and>\n              (\\<forall>xb.\n                  Suc x \\<le> xb \\<and>\n                  xb \\<le> Suc (x + (xa - Suc (Suc x))) \\<longrightarrow>\n                  s xb = NoMsg))) \\<and>\n         (\\<forall>xa.\n             Suc (t * k) \\<le> xa \\<and>\n             xa \\<le> Suc (t * k +\n                           (x - Suc (Suc (t * k)))) \\<longrightarrow>\n             0 < xa mod k))\\<rbrakk>\n    \\<Longrightarrow> \\<exists>x.\n                         (x < t * k + k - Suc 0 \\<longrightarrow>\n                          t * k \\<le> x \\<and>\n                          s x = m \\<and>\n                          (\\<forall>xa.\n                              Suc x \\<le> xa \\<and>\n                              xa \\<le> t * k + k - Suc 0 \\<longrightarrow>\n                              s xa = NoMsg)) \\<and>\n                         (\\<not> x < t * k + k - Suc 0 \\<longrightarrow>\n                          t * k \\<le> x \\<and>\n                          x = t * k + k - Suc 0 \\<and> s x = m)", "apply (clarsimp, rename_tac i)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i.\n       \\<lbrakk>m \\<noteq> NoMsg; \\<And>t. event t = (t mod k = 0);\n        t0 = t * k; Suc 0 < k;\n        i = Suc (t * k) \\<longrightarrow>\n        s (Suc (t * k)) = m \\<and>\n        (\\<exists>x.\n            (x = Suc (Suc (t * k)) \\<longrightarrow>\n             (if Suc (Suc 0) = k then 0 else Suc (Suc (t * k) mod k)) =\n             0) \\<and>\n            (x \\<noteq> Suc (Suc (t * k)) \\<longrightarrow>\n             Suc (Suc (t * k)) \\<le> x \\<and>\n             x mod k = 0 \\<and>\n             (\\<forall>xa.\n                 Suc (Suc (t * k)) \\<le> xa \\<and>\n                 xa \\<le> Suc (Suc (t * k +\n                                    (x -\n                                     Suc\n(Suc (Suc (t * k)))))) \\<longrightarrow>\n                 s xa = NoMsg)));\n        i \\<noteq> Suc (t * k) \\<longrightarrow>\n        Suc (t * k) \\<le> i \\<and>\n        s i = m \\<and>\n        0 < i mod k \\<and>\n        (\\<exists>x.\n            (x = Suc i \\<longrightarrow>\n             (if Suc (i mod k) = k then 0 else Suc (i mod k)) = 0) \\<and>\n            (x \\<noteq> Suc i \\<longrightarrow>\n             Suc i \\<le> x \\<and>\n             x mod k = 0 \\<and>\n             (\\<forall>xa.\n                 Suc i \\<le> xa \\<and>\n                 xa \\<le> Suc (i + (x - Suc (Suc i))) \\<longrightarrow>\n                 s xa = NoMsg))) \\<and>\n        (\\<forall>x.\n            Suc (t * k) \\<le> x \\<and>\n            x \\<le> Suc (t * k + (i - Suc (Suc (t * k)))) \\<longrightarrow>\n            0 < x mod k)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x.\n                            (x < t * k + k - Suc 0 \\<longrightarrow>\n                             t * k \\<le> x \\<and>\n                             s x = m \\<and>\n                             (\\<forall>xa.\n                                 Suc x \\<le> xa \\<and>\n                                 xa \\<le> t * k + k -\n    Suc 0 \\<longrightarrow>\n                                 s xa = NoMsg)) \\<and>\n                            (\\<not> x < t * k + k - Suc 0 \\<longrightarrow>\n                             t * k \\<le> x \\<and>\n                             x = t * k + k - Suc 0 \\<and> s x = m)", "apply (case_tac \"i = Suc (t * k)\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>i.\n       \\<lbrakk>m \\<noteq> NoMsg; \\<And>t. event t = (t mod k = 0);\n        t0 = t * k; Suc 0 < k;\n        i = Suc (t * k) \\<longrightarrow>\n        s (Suc (t * k)) = m \\<and>\n        (\\<exists>x.\n            (x = Suc (Suc (t * k)) \\<longrightarrow>\n             (if Suc (Suc 0) = k then 0 else Suc (Suc (t * k) mod k)) =\n             0) \\<and>\n            (x \\<noteq> Suc (Suc (t * k)) \\<longrightarrow>\n             Suc (Suc (t * k)) \\<le> x \\<and>\n             x mod k = 0 \\<and>\n             (\\<forall>xa.\n                 Suc (Suc (t * k)) \\<le> xa \\<and>\n                 xa \\<le> Suc (Suc (t * k +\n                                    (x -\n                                     Suc\n(Suc (Suc (t * k)))))) \\<longrightarrow>\n                 s xa = NoMsg)));\n        i \\<noteq> Suc (t * k) \\<longrightarrow>\n        Suc (t * k) \\<le> i \\<and>\n        s i = m \\<and>\n        0 < i mod k \\<and>\n        (\\<exists>x.\n            (x = Suc i \\<longrightarrow>\n             (if Suc (i mod k) = k then 0 else Suc (i mod k)) = 0) \\<and>\n            (x \\<noteq> Suc i \\<longrightarrow>\n             Suc i \\<le> x \\<and>\n             x mod k = 0 \\<and>\n             (\\<forall>xa.\n                 Suc i \\<le> xa \\<and>\n                 xa \\<le> Suc (i + (x - Suc (Suc i))) \\<longrightarrow>\n                 s xa = NoMsg))) \\<and>\n        (\\<forall>x.\n            Suc (t * k) \\<le> x \\<and>\n            x \\<le> Suc (t * k + (i - Suc (Suc (t * k)))) \\<longrightarrow>\n            0 < x mod k);\n        i = Suc (t * k)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x.\n                            (x < t * k + k - Suc 0 \\<longrightarrow>\n                             t * k \\<le> x \\<and>\n                             s x = m \\<and>\n                             (\\<forall>xa.\n                                 Suc x \\<le> xa \\<and>\n                                 xa \\<le> t * k + k -\n    Suc 0 \\<longrightarrow>\n                                 s xa = NoMsg)) \\<and>\n                            (\\<not> x < t * k + k - Suc 0 \\<longrightarrow>\n                             t * k \\<le> x \\<and>\n                             x = t * k + k - Suc 0 \\<and> s x = m)\n 2. \\<And>i.\n       \\<lbrakk>m \\<noteq> NoMsg; \\<And>t. event t = (t mod k = 0);\n        t0 = t * k; Suc 0 < k;\n        i = Suc (t * k) \\<longrightarrow>\n        s (Suc (t * k)) = m \\<and>\n        (\\<exists>x.\n            (x = Suc (Suc (t * k)) \\<longrightarrow>\n             (if Suc (Suc 0) = k then 0 else Suc (Suc (t * k) mod k)) =\n             0) \\<and>\n            (x \\<noteq> Suc (Suc (t * k)) \\<longrightarrow>\n             Suc (Suc (t * k)) \\<le> x \\<and>\n             x mod k = 0 \\<and>\n             (\\<forall>xa.\n                 Suc (Suc (t * k)) \\<le> xa \\<and>\n                 xa \\<le> Suc (Suc (t * k +\n                                    (x -\n                                     Suc\n(Suc (Suc (t * k)))))) \\<longrightarrow>\n                 s xa = NoMsg)));\n        i \\<noteq> Suc (t * k) \\<longrightarrow>\n        Suc (t * k) \\<le> i \\<and>\n        s i = m \\<and>\n        0 < i mod k \\<and>\n        (\\<exists>x.\n            (x = Suc i \\<longrightarrow>\n             (if Suc (i mod k) = k then 0 else Suc (i mod k)) = 0) \\<and>\n            (x \\<noteq> Suc i \\<longrightarrow>\n             Suc i \\<le> x \\<and>\n             x mod k = 0 \\<and>\n             (\\<forall>xa.\n                 Suc i \\<le> xa \\<and>\n                 xa \\<le> Suc (i + (x - Suc (Suc i))) \\<longrightarrow>\n                 s xa = NoMsg))) \\<and>\n        (\\<forall>x.\n            Suc (t * k) \\<le> x \\<and>\n            x \\<le> Suc (t * k + (i - Suc (Suc (t * k)))) \\<longrightarrow>\n            0 < x mod k);\n        i \\<noteq> Suc (t * k)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x.\n                            (x < t * k + k - Suc 0 \\<longrightarrow>\n                             t * k \\<le> x \\<and>\n                             s x = m \\<and>\n                             (\\<forall>xa.\n                                 Suc x \\<le> xa \\<and>\n                                 xa \\<le> t * k + k -\n    Suc 0 \\<longrightarrow>\n                                 s xa = NoMsg)) \\<and>\n                            (\\<not> x < t * k + k - Suc 0 \\<longrightarrow>\n                             t * k \\<le> x \\<and>\n                             x = t * k + k - Suc 0 \\<and> s x = m)", "apply (clarsimp, rename_tac i1)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>i1.\n       \\<lbrakk>s (Suc (t * k)) \\<noteq> NoMsg;\n        \\<And>t. event t = (t mod k = 0); t0 = t * k; Suc 0 < k;\n        m = s (Suc (t * k));\n        i1 = Suc (Suc (t * k)) \\<longrightarrow>\n        (if Suc (Suc 0) = k then 0 else Suc (Suc (t * k) mod k)) = 0;\n        i1 \\<noteq> Suc (Suc (t * k)) \\<longrightarrow>\n        Suc (Suc (t * k)) \\<le> i1 \\<and>\n        i1 mod k = 0 \\<and>\n        (\\<forall>x.\n            Suc (Suc (t * k)) \\<le> x \\<and>\n            x \\<le> Suc (Suc (t * k +\n                              (i1 -\n                               Suc (Suc (Suc (t * k)))))) \\<longrightarrow>\n            s x = NoMsg)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x.\n                            (x < t * k + k - Suc 0 \\<longrightarrow>\n                             t * k \\<le> x \\<and>\n                             s x = s (Suc (t * k)) \\<and>\n                             (\\<forall>xa.\n                                 Suc x \\<le> xa \\<and>\n                                 xa \\<le> t * k + k -\n    Suc 0 \\<longrightarrow>\n                                 s xa = NoMsg)) \\<and>\n                            (\\<not> x < t * k + k - Suc 0 \\<longrightarrow>\n                             t * k \\<le> x \\<and>\n                             x = t * k + k - Suc 0 \\<and>\n                             s x = s (Suc (t * k)))\n 2. \\<And>i.\n       \\<lbrakk>m \\<noteq> NoMsg; \\<And>t. event t = (t mod k = 0);\n        t0 = t * k; Suc 0 < k;\n        i = Suc (t * k) \\<longrightarrow>\n        s (Suc (t * k)) = m \\<and>\n        (\\<exists>x.\n            (x = Suc (Suc (t * k)) \\<longrightarrow>\n             (if Suc (Suc 0) = k then 0 else Suc (Suc (t * k) mod k)) =\n             0) \\<and>\n            (x \\<noteq> Suc (Suc (t * k)) \\<longrightarrow>\n             Suc (Suc (t * k)) \\<le> x \\<and>\n             x mod k = 0 \\<and>\n             (\\<forall>xa.\n                 Suc (Suc (t * k)) \\<le> xa \\<and>\n                 xa \\<le> Suc (Suc (t * k +\n                                    (x -\n                                     Suc\n(Suc (Suc (t * k)))))) \\<longrightarrow>\n                 s xa = NoMsg)));\n        i \\<noteq> Suc (t * k) \\<longrightarrow>\n        Suc (t * k) \\<le> i \\<and>\n        s i = m \\<and>\n        0 < i mod k \\<and>\n        (\\<exists>x.\n            (x = Suc i \\<longrightarrow>\n             (if Suc (i mod k) = k then 0 else Suc (i mod k)) = 0) \\<and>\n            (x \\<noteq> Suc i \\<longrightarrow>\n             Suc i \\<le> x \\<and>\n             x mod k = 0 \\<and>\n             (\\<forall>xa.\n                 Suc i \\<le> xa \\<and>\n                 xa \\<le> Suc (i + (x - Suc (Suc i))) \\<longrightarrow>\n                 s xa = NoMsg))) \\<and>\n        (\\<forall>x.\n            Suc (t * k) \\<le> x \\<and>\n            x \\<le> Suc (t * k + (i - Suc (Suc (t * k)))) \\<longrightarrow>\n            0 < x mod k);\n        i \\<noteq> Suc (t * k)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x.\n                            (x < t * k + k - Suc 0 \\<longrightarrow>\n                             t * k \\<le> x \\<and>\n                             s x = m \\<and>\n                             (\\<forall>xa.\n                                 Suc x \\<le> xa \\<and>\n                                 xa \\<le> t * k + k -\n    Suc 0 \\<longrightarrow>\n                                 s xa = NoMsg)) \\<and>\n                            (\\<not> x < t * k + k - Suc 0 \\<longrightarrow>\n                             t * k \\<le> x \\<and>\n                             x = t * k + k - Suc 0 \\<and> s x = m)", "apply (rule_tac x=\"Suc (t * k)\" in exI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>i1.\n       \\<lbrakk>s (Suc (t * k)) \\<noteq> NoMsg;\n        \\<And>t. event t = (t mod k = 0); t0 = t * k; Suc 0 < k;\n        m = s (Suc (t * k));\n        i1 = Suc (Suc (t * k)) \\<longrightarrow>\n        (if Suc (Suc 0) = k then 0 else Suc (Suc (t * k) mod k)) = 0;\n        i1 \\<noteq> Suc (Suc (t * k)) \\<longrightarrow>\n        Suc (Suc (t * k)) \\<le> i1 \\<and>\n        i1 mod k = 0 \\<and>\n        (\\<forall>x.\n            Suc (Suc (t * k)) \\<le> x \\<and>\n            x \\<le> Suc (Suc (t * k +\n                              (i1 -\n                               Suc (Suc (Suc (t * k)))))) \\<longrightarrow>\n            s x = NoMsg)\\<rbrakk>\n       \\<Longrightarrow> (Suc (t * k) < t * k + k - Suc 0 \\<longrightarrow>\n                          t * k \\<le> Suc (t * k) \\<and>\n                          s (Suc (t * k)) = s (Suc (t * k)) \\<and>\n                          (\\<forall>x.\n                              Suc (Suc (t * k)) \\<le> x \\<and>\n                              x \\<le> t * k + k - Suc 0 \\<longrightarrow>\n                              s x = NoMsg)) \\<and>\n                         (\\<not> Suc (t * k)\n                                 < t * k + k - Suc 0 \\<longrightarrow>\n                          t * k \\<le> Suc (t * k) \\<and>\n                          Suc (t * k) = t * k + k - Suc 0 \\<and>\n                          s (Suc (t * k)) = s (Suc (t * k)))\n 2. \\<And>i.\n       \\<lbrakk>m \\<noteq> NoMsg; \\<And>t. event t = (t mod k = 0);\n        t0 = t * k; Suc 0 < k;\n        i = Suc (t * k) \\<longrightarrow>\n        s (Suc (t * k)) = m \\<and>\n        (\\<exists>x.\n            (x = Suc (Suc (t * k)) \\<longrightarrow>\n             (if Suc (Suc 0) = k then 0 else Suc (Suc (t * k) mod k)) =\n             0) \\<and>\n            (x \\<noteq> Suc (Suc (t * k)) \\<longrightarrow>\n             Suc (Suc (t * k)) \\<le> x \\<and>\n             x mod k = 0 \\<and>\n             (\\<forall>xa.\n                 Suc (Suc (t * k)) \\<le> xa \\<and>\n                 xa \\<le> Suc (Suc (t * k +\n                                    (x -\n                                     Suc\n(Suc (Suc (t * k)))))) \\<longrightarrow>\n                 s xa = NoMsg)));\n        i \\<noteq> Suc (t * k) \\<longrightarrow>\n        Suc (t * k) \\<le> i \\<and>\n        s i = m \\<and>\n        0 < i mod k \\<and>\n        (\\<exists>x.\n            (x = Suc i \\<longrightarrow>\n             (if Suc (i mod k) = k then 0 else Suc (i mod k)) = 0) \\<and>\n            (x \\<noteq> Suc i \\<longrightarrow>\n             Suc i \\<le> x \\<and>\n             x mod k = 0 \\<and>\n             (\\<forall>xa.\n                 Suc i \\<le> xa \\<and>\n                 xa \\<le> Suc (i + (x - Suc (Suc i))) \\<longrightarrow>\n                 s xa = NoMsg))) \\<and>\n        (\\<forall>x.\n            Suc (t * k) \\<le> x \\<and>\n            x \\<le> Suc (t * k + (i - Suc (Suc (t * k)))) \\<longrightarrow>\n            0 < x mod k);\n        i \\<noteq> Suc (t * k)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x.\n                            (x < t * k + k - Suc 0 \\<longrightarrow>\n                             t * k \\<le> x \\<and>\n                             s x = m \\<and>\n                             (\\<forall>xa.\n                                 Suc x \\<le> xa \\<and>\n                                 xa \\<le> t * k + k -\n    Suc 0 \\<longrightarrow>\n                                 s xa = NoMsg)) \\<and>\n                            (\\<not> x < t * k + k - Suc 0 \\<longrightarrow>\n                             t * k \\<le> x \\<and>\n                             x = t * k + k - Suc 0 \\<and> s x = m)", "apply simp"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>i1.\n       \\<lbrakk>s (Suc (t * k)) \\<noteq> NoMsg;\n        \\<And>t. event t = (t mod k = 0); t0 = t * k; Suc 0 < k;\n        m = s (Suc (t * k));\n        i1 = Suc (Suc (t * k)) \\<longrightarrow>\n        (if Suc (Suc 0) = k then 0 else Suc (Suc (t * k) mod k)) = 0;\n        i1 \\<noteq> Suc (Suc (t * k)) \\<longrightarrow>\n        Suc (Suc (t * k)) \\<le> i1 \\<and>\n        i1 mod k = 0 \\<and>\n        (\\<forall>x.\n            Suc (Suc (t * k)) \\<le> x \\<and>\n            x \\<le> Suc (Suc (t * k +\n                              (i1 -\n                               Suc (Suc (Suc (t * k)))))) \\<longrightarrow>\n            s x = NoMsg)\\<rbrakk>\n       \\<Longrightarrow> (Suc (t * k) < t * k + k - Suc 0 \\<longrightarrow>\n                          (\\<forall>x.\n                              Suc (Suc (t * k)) \\<le> x \\<and>\n                              x \\<le> t * k + k - Suc 0 \\<longrightarrow>\n                              s x = NoMsg)) \\<and>\n                         (\\<not> Suc (t * k)\n                                 < t * k + k - Suc 0 \\<longrightarrow>\n                          Suc (t * k) = t * k + k - Suc 0)\n 2. \\<And>i.\n       \\<lbrakk>m \\<noteq> NoMsg; \\<And>t. event t = (t mod k = 0);\n        t0 = t * k; Suc 0 < k;\n        i = Suc (t * k) \\<longrightarrow>\n        s (Suc (t * k)) = m \\<and>\n        (\\<exists>x.\n            (x = Suc (Suc (t * k)) \\<longrightarrow>\n             (if Suc (Suc 0) = k then 0 else Suc (Suc (t * k) mod k)) =\n             0) \\<and>\n            (x \\<noteq> Suc (Suc (t * k)) \\<longrightarrow>\n             Suc (Suc (t * k)) \\<le> x \\<and>\n             x mod k = 0 \\<and>\n             (\\<forall>xa.\n                 Suc (Suc (t * k)) \\<le> xa \\<and>\n                 xa \\<le> Suc (Suc (t * k +\n                                    (x -\n                                     Suc\n(Suc (Suc (t * k)))))) \\<longrightarrow>\n                 s xa = NoMsg)));\n        i \\<noteq> Suc (t * k) \\<longrightarrow>\n        Suc (t * k) \\<le> i \\<and>\n        s i = m \\<and>\n        0 < i mod k \\<and>\n        (\\<exists>x.\n            (x = Suc i \\<longrightarrow>\n             (if Suc (i mod k) = k then 0 else Suc (i mod k)) = 0) \\<and>\n            (x \\<noteq> Suc i \\<longrightarrow>\n             Suc i \\<le> x \\<and>\n             x mod k = 0 \\<and>\n             (\\<forall>xa.\n                 Suc i \\<le> xa \\<and>\n                 xa \\<le> Suc (i + (x - Suc (Suc i))) \\<longrightarrow>\n                 s xa = NoMsg))) \\<and>\n        (\\<forall>x.\n            Suc (t * k) \\<le> x \\<and>\n            x \\<le> Suc (t * k + (i - Suc (Suc (t * k)))) \\<longrightarrow>\n            0 < x mod k);\n        i \\<noteq> Suc (t * k)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x.\n                            (x < t * k + k - Suc 0 \\<longrightarrow>\n                             t * k \\<le> x \\<and>\n                             s x = m \\<and>\n                             (\\<forall>xa.\n                                 Suc x \\<le> xa \\<and>\n                                 xa \\<le> t * k + k -\n    Suc 0 \\<longrightarrow>\n                                 s xa = NoMsg)) \\<and>\n                            (\\<not> x < t * k + k - Suc 0 \\<longrightarrow>\n                             t * k \\<le> x \\<and>\n                             x = t * k + k - Suc 0 \\<and> s x = m)", "apply (case_tac \"k = Suc (Suc 0)\", simp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>i1.\n       \\<lbrakk>s (Suc (t * k)) \\<noteq> NoMsg;\n        \\<And>t. event t = (t mod k = 0); t0 = t * k; Suc 0 < k;\n        m = s (Suc (t * k));\n        i1 = Suc (Suc (t * k)) \\<longrightarrow>\n        (if Suc (Suc 0) = k then 0 else Suc (Suc (t * k) mod k)) = 0;\n        i1 \\<noteq> Suc (Suc (t * k)) \\<longrightarrow>\n        Suc (Suc (t * k)) \\<le> i1 \\<and>\n        i1 mod k = 0 \\<and>\n        (\\<forall>x.\n            Suc (Suc (t * k)) \\<le> x \\<and>\n            x \\<le> Suc (Suc (t * k +\n                              (i1 -\n                               Suc (Suc (Suc (t * k)))))) \\<longrightarrow>\n            s x = NoMsg);\n        k \\<noteq> Suc (Suc 0)\\<rbrakk>\n       \\<Longrightarrow> (Suc (t * k) < t * k + k - Suc 0 \\<longrightarrow>\n                          (\\<forall>x.\n                              Suc (Suc (t * k)) \\<le> x \\<and>\n                              x \\<le> t * k + k - Suc 0 \\<longrightarrow>\n                              s x = NoMsg)) \\<and>\n                         (\\<not> Suc (t * k)\n                                 < t * k + k - Suc 0 \\<longrightarrow>\n                          Suc (t * k) = t * k + k - Suc 0)\n 2. \\<And>i.\n       \\<lbrakk>m \\<noteq> NoMsg; \\<And>t. event t = (t mod k = 0);\n        t0 = t * k; Suc 0 < k;\n        i = Suc (t * k) \\<longrightarrow>\n        s (Suc (t * k)) = m \\<and>\n        (\\<exists>x.\n            (x = Suc (Suc (t * k)) \\<longrightarrow>\n             (if Suc (Suc 0) = k then 0 else Suc (Suc (t * k) mod k)) =\n             0) \\<and>\n            (x \\<noteq> Suc (Suc (t * k)) \\<longrightarrow>\n             Suc (Suc (t * k)) \\<le> x \\<and>\n             x mod k = 0 \\<and>\n             (\\<forall>xa.\n                 Suc (Suc (t * k)) \\<le> xa \\<and>\n                 xa \\<le> Suc (Suc (t * k +\n                                    (x -\n                                     Suc\n(Suc (Suc (t * k)))))) \\<longrightarrow>\n                 s xa = NoMsg)));\n        i \\<noteq> Suc (t * k) \\<longrightarrow>\n        Suc (t * k) \\<le> i \\<and>\n        s i = m \\<and>\n        0 < i mod k \\<and>\n        (\\<exists>x.\n            (x = Suc i \\<longrightarrow>\n             (if Suc (i mod k) = k then 0 else Suc (i mod k)) = 0) \\<and>\n            (x \\<noteq> Suc i \\<longrightarrow>\n             Suc i \\<le> x \\<and>\n             x mod k = 0 \\<and>\n             (\\<forall>xa.\n                 Suc i \\<le> xa \\<and>\n                 xa \\<le> Suc (i + (x - Suc (Suc i))) \\<longrightarrow>\n                 s xa = NoMsg))) \\<and>\n        (\\<forall>x.\n            Suc (t * k) \\<le> x \\<and>\n            x \\<le> Suc (t * k + (i - Suc (Suc (t * k)))) \\<longrightarrow>\n            0 < x mod k);\n        i \\<noteq> Suc (t * k)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x.\n                            (x < t * k + k - Suc 0 \\<longrightarrow>\n                             t * k \\<le> x \\<and>\n                             s x = m \\<and>\n                             (\\<forall>xa.\n                                 Suc x \\<le> xa \\<and>\n                                 xa \\<le> t * k + k -\n    Suc 0 \\<longrightarrow>\n                                 s xa = NoMsg)) \\<and>\n                            (\\<not> x < t * k + k - Suc 0 \\<longrightarrow>\n                             t * k \\<le> x \\<and>\n                             x = t * k + k - Suc 0 \\<and> s x = m)", "apply (clarsimp simp: mult.commute[of k] elim!: dvdE, rename_tac q)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>q.\n       \\<lbrakk>s (Suc (t * k)) \\<noteq> NoMsg;\n        \\<And>t. event t = (t mod k = 0); t0 = t * k; Suc 0 < k;\n        m = s (Suc (t * k)); q * k \\<noteq> Suc (Suc (t * k));\n        k \\<noteq> Suc (Suc 0); Suc (Suc (t * k)) \\<le> q * k;\n        \\<forall>x.\n           Suc (Suc (t * k)) \\<le> x \\<and>\n           x \\<le> Suc (Suc (q * k - 3)) \\<longrightarrow>\n           s x = NoMsg\\<rbrakk>\n       \\<Longrightarrow> (Suc (t * k) < t * k + k - Suc 0 \\<longrightarrow>\n                          (\\<forall>x.\n                              Suc (Suc (t * k)) \\<le> x \\<and>\n                              x \\<le> t * k + k - Suc 0 \\<longrightarrow>\n                              s x = NoMsg)) \\<and>\n                         Suc (t * k) < t * k + k - Suc 0\n 2. \\<And>i.\n       \\<lbrakk>m \\<noteq> NoMsg; \\<And>t. event t = (t mod k = 0);\n        t0 = t * k; Suc 0 < k;\n        i = Suc (t * k) \\<longrightarrow>\n        s (Suc (t * k)) = m \\<and>\n        (\\<exists>x.\n            (x = Suc (Suc (t * k)) \\<longrightarrow>\n             (if Suc (Suc 0) = k then 0 else Suc (Suc (t * k) mod k)) =\n             0) \\<and>\n            (x \\<noteq> Suc (Suc (t * k)) \\<longrightarrow>\n             Suc (Suc (t * k)) \\<le> x \\<and>\n             x mod k = 0 \\<and>\n             (\\<forall>xa.\n                 Suc (Suc (t * k)) \\<le> xa \\<and>\n                 xa \\<le> Suc (Suc (t * k +\n                                    (x -\n                                     Suc\n(Suc (Suc (t * k)))))) \\<longrightarrow>\n                 s xa = NoMsg)));\n        i \\<noteq> Suc (t * k) \\<longrightarrow>\n        Suc (t * k) \\<le> i \\<and>\n        s i = m \\<and>\n        0 < i mod k \\<and>\n        (\\<exists>x.\n            (x = Suc i \\<longrightarrow>\n             (if Suc (i mod k) = k then 0 else Suc (i mod k)) = 0) \\<and>\n            (x \\<noteq> Suc i \\<longrightarrow>\n             Suc i \\<le> x \\<and>\n             x mod k = 0 \\<and>\n             (\\<forall>xa.\n                 Suc i \\<le> xa \\<and>\n                 xa \\<le> Suc (i + (x - Suc (Suc i))) \\<longrightarrow>\n                 s xa = NoMsg))) \\<and>\n        (\\<forall>x.\n            Suc (t * k) \\<le> x \\<and>\n            x \\<le> Suc (t * k + (i - Suc (Suc (t * k)))) \\<longrightarrow>\n            0 < x mod k);\n        i \\<noteq> Suc (t * k)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x.\n                            (x < t * k + k - Suc 0 \\<longrightarrow>\n                             t * k \\<le> x \\<and>\n                             s x = m \\<and>\n                             (\\<forall>xa.\n                                 Suc x \\<le> xa \\<and>\n                                 xa \\<le> t * k + k -\n    Suc 0 \\<longrightarrow>\n                                 s xa = NoMsg)) \\<and>\n                            (\\<not> x < t * k + k - Suc 0 \\<longrightarrow>\n                             t * k \\<le> x \\<and>\n                             x = t * k + k - Suc 0 \\<and> s x = m)", "apply (subgoal_tac \"Suc (t * k) < t * k + k - Suc 0\")"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>q.\n       \\<lbrakk>s (Suc (t * k)) \\<noteq> NoMsg;\n        \\<And>t. event t = (t mod k = 0); t0 = t * k; Suc 0 < k;\n        m = s (Suc (t * k)); q * k \\<noteq> Suc (Suc (t * k));\n        k \\<noteq> Suc (Suc 0); Suc (Suc (t * k)) \\<le> q * k;\n        \\<forall>x.\n           Suc (Suc (t * k)) \\<le> x \\<and>\n           x \\<le> Suc (Suc (q * k - 3)) \\<longrightarrow>\n           s x = NoMsg;\n        Suc (t * k) < t * k + k - Suc 0\\<rbrakk>\n       \\<Longrightarrow> (Suc (t * k) < t * k + k - Suc 0 \\<longrightarrow>\n                          (\\<forall>x.\n                              Suc (Suc (t * k)) \\<le> x \\<and>\n                              x \\<le> t * k + k - Suc 0 \\<longrightarrow>\n                              s x = NoMsg)) \\<and>\n                         Suc (t * k) < t * k + k - Suc 0\n 2. \\<And>q.\n       \\<lbrakk>s (Suc (t * k)) \\<noteq> NoMsg;\n        \\<And>t. event t = (t mod k = 0); t0 = t * k; Suc 0 < k;\n        m = s (Suc (t * k)); q * k \\<noteq> Suc (Suc (t * k));\n        k \\<noteq> Suc (Suc 0); Suc (Suc (t * k)) \\<le> q * k;\n        \\<forall>x.\n           Suc (Suc (t * k)) \\<le> x \\<and>\n           x \\<le> Suc (Suc (q * k - 3)) \\<longrightarrow>\n           s x = NoMsg\\<rbrakk>\n       \\<Longrightarrow> Suc (t * k) < t * k + k - Suc 0\n 3. \\<And>i.\n       \\<lbrakk>m \\<noteq> NoMsg; \\<And>t. event t = (t mod k = 0);\n        t0 = t * k; Suc 0 < k;\n        i = Suc (t * k) \\<longrightarrow>\n        s (Suc (t * k)) = m \\<and>\n        (\\<exists>x.\n            (x = Suc (Suc (t * k)) \\<longrightarrow>\n             (if Suc (Suc 0) = k then 0 else Suc (Suc (t * k) mod k)) =\n             0) \\<and>\n            (x \\<noteq> Suc (Suc (t * k)) \\<longrightarrow>\n             Suc (Suc (t * k)) \\<le> x \\<and>\n             x mod k = 0 \\<and>\n             (\\<forall>xa.\n                 Suc (Suc (t * k)) \\<le> xa \\<and>\n                 xa \\<le> Suc (Suc (t * k +\n                                    (x -\n                                     Suc\n(Suc (Suc (t * k)))))) \\<longrightarrow>\n                 s xa = NoMsg)));\n        i \\<noteq> Suc (t * k) \\<longrightarrow>\n        Suc (t * k) \\<le> i \\<and>\n        s i = m \\<and>\n        0 < i mod k \\<and>\n        (\\<exists>x.\n            (x = Suc i \\<longrightarrow>\n             (if Suc (i mod k) = k then 0 else Suc (i mod k)) = 0) \\<and>\n            (x \\<noteq> Suc i \\<longrightarrow>\n             Suc i \\<le> x \\<and>\n             x mod k = 0 \\<and>\n             (\\<forall>xa.\n                 Suc i \\<le> xa \\<and>\n                 xa \\<le> Suc (i + (x - Suc (Suc i))) \\<longrightarrow>\n                 s xa = NoMsg))) \\<and>\n        (\\<forall>x.\n            Suc (t * k) \\<le> x \\<and>\n            x \\<le> Suc (t * k + (i - Suc (Suc (t * k)))) \\<longrightarrow>\n            0 < x mod k);\n        i \\<noteq> Suc (t * k)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x.\n                            (x < t * k + k - Suc 0 \\<longrightarrow>\n                             t * k \\<le> x \\<and>\n                             s x = m \\<and>\n                             (\\<forall>xa.\n                                 Suc x \\<le> xa \\<and>\n                                 xa \\<le> t * k + k -\n    Suc 0 \\<longrightarrow>\n                                 s xa = NoMsg)) \\<and>\n                            (\\<not> x < t * k + k - Suc 0 \\<longrightarrow>\n                             t * k \\<le> x \\<and>\n                             x = t * k + k - Suc 0 \\<and> s x = m)", "prefer 2"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>q.\n       \\<lbrakk>s (Suc (t * k)) \\<noteq> NoMsg;\n        \\<And>t. event t = (t mod k = 0); t0 = t * k; Suc 0 < k;\n        m = s (Suc (t * k)); q * k \\<noteq> Suc (Suc (t * k));\n        k \\<noteq> Suc (Suc 0); Suc (Suc (t * k)) \\<le> q * k;\n        \\<forall>x.\n           Suc (Suc (t * k)) \\<le> x \\<and>\n           x \\<le> Suc (Suc (q * k - 3)) \\<longrightarrow>\n           s x = NoMsg\\<rbrakk>\n       \\<Longrightarrow> Suc (t * k) < t * k + k - Suc 0\n 2. \\<And>q.\n       \\<lbrakk>s (Suc (t * k)) \\<noteq> NoMsg;\n        \\<And>t. event t = (t mod k = 0); t0 = t * k; Suc 0 < k;\n        m = s (Suc (t * k)); q * k \\<noteq> Suc (Suc (t * k));\n        k \\<noteq> Suc (Suc 0); Suc (Suc (t * k)) \\<le> q * k;\n        \\<forall>x.\n           Suc (Suc (t * k)) \\<le> x \\<and>\n           x \\<le> Suc (Suc (q * k - 3)) \\<longrightarrow>\n           s x = NoMsg;\n        Suc (t * k) < t * k + k - Suc 0\\<rbrakk>\n       \\<Longrightarrow> (Suc (t * k) < t * k + k - Suc 0 \\<longrightarrow>\n                          (\\<forall>x.\n                              Suc (Suc (t * k)) \\<le> x \\<and>\n                              x \\<le> t * k + k - Suc 0 \\<longrightarrow>\n                              s x = NoMsg)) \\<and>\n                         Suc (t * k) < t * k + k - Suc 0\n 3. \\<And>i.\n       \\<lbrakk>m \\<noteq> NoMsg; \\<And>t. event t = (t mod k = 0);\n        t0 = t * k; Suc 0 < k;\n        i = Suc (t * k) \\<longrightarrow>\n        s (Suc (t * k)) = m \\<and>\n        (\\<exists>x.\n            (x = Suc (Suc (t * k)) \\<longrightarrow>\n             (if Suc (Suc 0) = k then 0 else Suc (Suc (t * k) mod k)) =\n             0) \\<and>\n            (x \\<noteq> Suc (Suc (t * k)) \\<longrightarrow>\n             Suc (Suc (t * k)) \\<le> x \\<and>\n             x mod k = 0 \\<and>\n             (\\<forall>xa.\n                 Suc (Suc (t * k)) \\<le> xa \\<and>\n                 xa \\<le> Suc (Suc (t * k +\n                                    (x -\n                                     Suc\n(Suc (Suc (t * k)))))) \\<longrightarrow>\n                 s xa = NoMsg)));\n        i \\<noteq> Suc (t * k) \\<longrightarrow>\n        Suc (t * k) \\<le> i \\<and>\n        s i = m \\<and>\n        0 < i mod k \\<and>\n        (\\<exists>x.\n            (x = Suc i \\<longrightarrow>\n             (if Suc (i mod k) = k then 0 else Suc (i mod k)) = 0) \\<and>\n            (x \\<noteq> Suc i \\<longrightarrow>\n             Suc i \\<le> x \\<and>\n             x mod k = 0 \\<and>\n             (\\<forall>xa.\n                 Suc i \\<le> xa \\<and>\n                 xa \\<le> Suc (i + (x - Suc (Suc i))) \\<longrightarrow>\n                 s xa = NoMsg))) \\<and>\n        (\\<forall>x.\n            Suc (t * k) \\<le> x \\<and>\n            x \\<le> Suc (t * k + (i - Suc (Suc (t * k)))) \\<longrightarrow>\n            0 < x mod k);\n        i \\<noteq> Suc (t * k)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x.\n                            (x < t * k + k - Suc 0 \\<longrightarrow>\n                             t * k \\<le> x \\<and>\n                             s x = m \\<and>\n                             (\\<forall>xa.\n                                 Suc x \\<le> xa \\<and>\n                                 xa \\<le> t * k + k -\n    Suc 0 \\<longrightarrow>\n                                 s xa = NoMsg)) \\<and>\n                            (\\<not> x < t * k + k - Suc 0 \\<longrightarrow>\n                             t * k \\<le> x \\<and>\n                             x = t * k + k - Suc 0 \\<and> s x = m)", "apply simp"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>q.\n       \\<lbrakk>s (Suc (t * k)) \\<noteq> NoMsg;\n        \\<And>t. event t = (t mod k = 0); t0 = t * k; Suc 0 < k;\n        m = s (Suc (t * k)); q * k \\<noteq> Suc (Suc (t * k));\n        k \\<noteq> Suc (Suc 0); Suc (Suc (t * k)) \\<le> q * k;\n        \\<forall>x.\n           Suc (Suc (t * k)) \\<le> x \\<and>\n           x \\<le> Suc (Suc (q * k - 3)) \\<longrightarrow>\n           s x = NoMsg;\n        Suc (t * k) < t * k + k - Suc 0\\<rbrakk>\n       \\<Longrightarrow> (Suc (t * k) < t * k + k - Suc 0 \\<longrightarrow>\n                          (\\<forall>x.\n                              Suc (Suc (t * k)) \\<le> x \\<and>\n                              x \\<le> t * k + k - Suc 0 \\<longrightarrow>\n                              s x = NoMsg)) \\<and>\n                         Suc (t * k) < t * k + k - Suc 0\n 2. \\<And>i.\n       \\<lbrakk>m \\<noteq> NoMsg; \\<And>t. event t = (t mod k = 0);\n        t0 = t * k; Suc 0 < k;\n        i = Suc (t * k) \\<longrightarrow>\n        s (Suc (t * k)) = m \\<and>\n        (\\<exists>x.\n            (x = Suc (Suc (t * k)) \\<longrightarrow>\n             (if Suc (Suc 0) = k then 0 else Suc (Suc (t * k) mod k)) =\n             0) \\<and>\n            (x \\<noteq> Suc (Suc (t * k)) \\<longrightarrow>\n             Suc (Suc (t * k)) \\<le> x \\<and>\n             x mod k = 0 \\<and>\n             (\\<forall>xa.\n                 Suc (Suc (t * k)) \\<le> xa \\<and>\n                 xa \\<le> Suc (Suc (t * k +\n                                    (x -\n                                     Suc\n(Suc (Suc (t * k)))))) \\<longrightarrow>\n                 s xa = NoMsg)));\n        i \\<noteq> Suc (t * k) \\<longrightarrow>\n        Suc (t * k) \\<le> i \\<and>\n        s i = m \\<and>\n        0 < i mod k \\<and>\n        (\\<exists>x.\n            (x = Suc i \\<longrightarrow>\n             (if Suc (i mod k) = k then 0 else Suc (i mod k)) = 0) \\<and>\n            (x \\<noteq> Suc i \\<longrightarrow>\n             Suc i \\<le> x \\<and>\n             x mod k = 0 \\<and>\n             (\\<forall>xa.\n                 Suc i \\<le> xa \\<and>\n                 xa \\<le> Suc (i + (x - Suc (Suc i))) \\<longrightarrow>\n                 s xa = NoMsg))) \\<and>\n        (\\<forall>x.\n            Suc (t * k) \\<le> x \\<and>\n            x \\<le> Suc (t * k + (i - Suc (Suc (t * k)))) \\<longrightarrow>\n            0 < x mod k);\n        i \\<noteq> Suc (t * k)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x.\n                            (x < t * k + k - Suc 0 \\<longrightarrow>\n                             t * k \\<le> x \\<and>\n                             s x = m \\<and>\n                             (\\<forall>xa.\n                                 Suc x \\<le> xa \\<and>\n                                 xa \\<le> t * k + k -\n    Suc 0 \\<longrightarrow>\n                                 s xa = NoMsg)) \\<and>\n                            (\\<not> x < t * k + k - Suc 0 \\<longrightarrow>\n                             t * k \\<le> x \\<and>\n                             x = t * k + k - Suc 0 \\<and> s x = m)", "apply (clarsimp elim!: dvdE, rename_tac j)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>q j.\n       \\<lbrakk>s (Suc (t * k)) \\<noteq> NoMsg;\n        \\<And>t. event t = (t mod k = 0); t0 = t * k; Suc 0 < k;\n        m = s (Suc (t * k)); q * k \\<noteq> Suc (Suc (t * k));\n        k \\<noteq> Suc (Suc 0); Suc (Suc (t * k)) \\<le> q * k;\n        \\<forall>x.\n           Suc (Suc (t * k)) \\<le> x \\<and>\n           x \\<le> Suc (Suc (q * k - 3)) \\<longrightarrow>\n           s x = NoMsg;\n        Suc (Suc (t * k)) \\<le> j; j \\<le> t * k + k - Suc 0\\<rbrakk>\n       \\<Longrightarrow> s j = NoMsg\n 2. \\<And>i.\n       \\<lbrakk>m \\<noteq> NoMsg; \\<And>t. event t = (t mod k = 0);\n        t0 = t * k; Suc 0 < k;\n        i = Suc (t * k) \\<longrightarrow>\n        s (Suc (t * k)) = m \\<and>\n        (\\<exists>x.\n            (x = Suc (Suc (t * k)) \\<longrightarrow>\n             (if Suc (Suc 0) = k then 0 else Suc (Suc (t * k) mod k)) =\n             0) \\<and>\n            (x \\<noteq> Suc (Suc (t * k)) \\<longrightarrow>\n             Suc (Suc (t * k)) \\<le> x \\<and>\n             x mod k = 0 \\<and>\n             (\\<forall>xa.\n                 Suc (Suc (t * k)) \\<le> xa \\<and>\n                 xa \\<le> Suc (Suc (t * k +\n                                    (x -\n                                     Suc\n(Suc (Suc (t * k)))))) \\<longrightarrow>\n                 s xa = NoMsg)));\n        i \\<noteq> Suc (t * k) \\<longrightarrow>\n        Suc (t * k) \\<le> i \\<and>\n        s i = m \\<and>\n        0 < i mod k \\<and>\n        (\\<exists>x.\n            (x = Suc i \\<longrightarrow>\n             (if Suc (i mod k) = k then 0 else Suc (i mod k)) = 0) \\<and>\n            (x \\<noteq> Suc i \\<longrightarrow>\n             Suc i \\<le> x \\<and>\n             x mod k = 0 \\<and>\n             (\\<forall>xa.\n                 Suc i \\<le> xa \\<and>\n                 xa \\<le> Suc (i + (x - Suc (Suc i))) \\<longrightarrow>\n                 s xa = NoMsg))) \\<and>\n        (\\<forall>x.\n            Suc (t * k) \\<le> x \\<and>\n            x \\<le> Suc (t * k + (i - Suc (Suc (t * k)))) \\<longrightarrow>\n            0 < x mod k);\n        i \\<noteq> Suc (t * k)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x.\n                            (x < t * k + k - Suc 0 \\<longrightarrow>\n                             t * k \\<le> x \\<and>\n                             s x = m \\<and>\n                             (\\<forall>xa.\n                                 Suc x \\<le> xa \\<and>\n                                 xa \\<le> t * k + k -\n    Suc 0 \\<longrightarrow>\n                                 s xa = NoMsg)) \\<and>\n                            (\\<not> x < t * k + k - Suc 0 \\<longrightarrow>\n                             t * k \\<le> x \\<and>\n                             x = t * k + k - Suc 0 \\<and> s x = m)", "apply (drule_tac x=j in spec)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>q j.\n       \\<lbrakk>s (Suc (t * k)) \\<noteq> NoMsg;\n        \\<And>t. event t = (t mod k = 0); t0 = t * k; Suc 0 < k;\n        m = s (Suc (t * k)); q * k \\<noteq> Suc (Suc (t * k));\n        k \\<noteq> Suc (Suc 0); Suc (Suc (t * k)) \\<le> q * k;\n        Suc (Suc (t * k)) \\<le> j; j \\<le> t * k + k - Suc 0;\n        Suc (Suc (t * k)) \\<le> j \\<and>\n        j \\<le> Suc (Suc (q * k - 3)) \\<longrightarrow>\n        s j = NoMsg\\<rbrakk>\n       \\<Longrightarrow> s j = NoMsg\n 2. \\<And>i.\n       \\<lbrakk>m \\<noteq> NoMsg; \\<And>t. event t = (t mod k = 0);\n        t0 = t * k; Suc 0 < k;\n        i = Suc (t * k) \\<longrightarrow>\n        s (Suc (t * k)) = m \\<and>\n        (\\<exists>x.\n            (x = Suc (Suc (t * k)) \\<longrightarrow>\n             (if Suc (Suc 0) = k then 0 else Suc (Suc (t * k) mod k)) =\n             0) \\<and>\n            (x \\<noteq> Suc (Suc (t * k)) \\<longrightarrow>\n             Suc (Suc (t * k)) \\<le> x \\<and>\n             x mod k = 0 \\<and>\n             (\\<forall>xa.\n                 Suc (Suc (t * k)) \\<le> xa \\<and>\n                 xa \\<le> Suc (Suc (t * k +\n                                    (x -\n                                     Suc\n(Suc (Suc (t * k)))))) \\<longrightarrow>\n                 s xa = NoMsg)));\n        i \\<noteq> Suc (t * k) \\<longrightarrow>\n        Suc (t * k) \\<le> i \\<and>\n        s i = m \\<and>\n        0 < i mod k \\<and>\n        (\\<exists>x.\n            (x = Suc i \\<longrightarrow>\n             (if Suc (i mod k) = k then 0 else Suc (i mod k)) = 0) \\<and>\n            (x \\<noteq> Suc i \\<longrightarrow>\n             Suc i \\<le> x \\<and>\n             x mod k = 0 \\<and>\n             (\\<forall>xa.\n                 Suc i \\<le> xa \\<and>\n                 xa \\<le> Suc (i + (x - Suc (Suc i))) \\<longrightarrow>\n                 s xa = NoMsg))) \\<and>\n        (\\<forall>x.\n            Suc (t * k) \\<le> x \\<and>\n            x \\<le> Suc (t * k + (i - Suc (Suc (t * k)))) \\<longrightarrow>\n            0 < x mod k);\n        i \\<noteq> Suc (t * k)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x.\n                            (x < t * k + k - Suc 0 \\<longrightarrow>\n                             t * k \\<le> x \\<and>\n                             s x = m \\<and>\n                             (\\<forall>xa.\n                                 Suc x \\<le> xa \\<and>\n                                 xa \\<le> t * k + k -\n    Suc 0 \\<longrightarrow>\n                                 s xa = NoMsg)) \\<and>\n                            (\\<not> x < t * k + k - Suc 0 \\<longrightarrow>\n                             t * k \\<le> x \\<and>\n                             x = t * k + k - Suc 0 \\<and> s x = m)", "apply (simp add: numeral_3_eq_3 Suc_diff_Suc)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>q j.\n       \\<lbrakk>s (Suc (t * k)) \\<noteq> NoMsg;\n        \\<And>t. event t = (t mod k = 0); t0 = t * k; Suc 0 < k;\n        m = s (Suc (t * k)); q * k \\<noteq> Suc (Suc (t * k));\n        k \\<noteq> Suc (Suc 0); Suc (Suc (t * k)) \\<le> q * k;\n        Suc (Suc (t * k)) \\<le> j; j \\<le> t * k + k - Suc 0;\n        j \\<le> q * k - Suc 0 \\<longrightarrow> s j = NoMsg\\<rbrakk>\n       \\<Longrightarrow> s j = NoMsg\n 2. \\<And>i.\n       \\<lbrakk>m \\<noteq> NoMsg; \\<And>t. event t = (t mod k = 0);\n        t0 = t * k; Suc 0 < k;\n        i = Suc (t * k) \\<longrightarrow>\n        s (Suc (t * k)) = m \\<and>\n        (\\<exists>x.\n            (x = Suc (Suc (t * k)) \\<longrightarrow>\n             (if Suc (Suc 0) = k then 0 else Suc (Suc (t * k) mod k)) =\n             0) \\<and>\n            (x \\<noteq> Suc (Suc (t * k)) \\<longrightarrow>\n             Suc (Suc (t * k)) \\<le> x \\<and>\n             x mod k = 0 \\<and>\n             (\\<forall>xa.\n                 Suc (Suc (t * k)) \\<le> xa \\<and>\n                 xa \\<le> Suc (Suc (t * k +\n                                    (x -\n                                     Suc\n(Suc (Suc (t * k)))))) \\<longrightarrow>\n                 s xa = NoMsg)));\n        i \\<noteq> Suc (t * k) \\<longrightarrow>\n        Suc (t * k) \\<le> i \\<and>\n        s i = m \\<and>\n        0 < i mod k \\<and>\n        (\\<exists>x.\n            (x = Suc i \\<longrightarrow>\n             (if Suc (i mod k) = k then 0 else Suc (i mod k)) = 0) \\<and>\n            (x \\<noteq> Suc i \\<longrightarrow>\n             Suc i \\<le> x \\<and>\n             x mod k = 0 \\<and>\n             (\\<forall>xa.\n                 Suc i \\<le> xa \\<and>\n                 xa \\<le> Suc (i + (x - Suc (Suc i))) \\<longrightarrow>\n                 s xa = NoMsg))) \\<and>\n        (\\<forall>x.\n            Suc (t * k) \\<le> x \\<and>\n            x \\<le> Suc (t * k + (i - Suc (Suc (t * k)))) \\<longrightarrow>\n            0 < x mod k);\n        i \\<noteq> Suc (t * k)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x.\n                            (x < t * k + k - Suc 0 \\<longrightarrow>\n                             t * k \\<le> x \\<and>\n                             s x = m \\<and>\n                             (\\<forall>xa.\n                                 Suc x \\<le> xa \\<and>\n                                 xa \\<le> t * k + k -\n    Suc 0 \\<longrightarrow>\n                                 s xa = NoMsg)) \\<and>\n                            (\\<not> x < t * k + k - Suc 0 \\<longrightarrow>\n                             t * k \\<le> x \\<and>\n                             x = t * k + k - Suc 0 \\<and> s x = m)", "apply (subgoal_tac \"t * k + k \\<le> q * k\")"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>q j.\n       \\<lbrakk>s (Suc (t * k)) \\<noteq> NoMsg;\n        \\<And>t. event t = (t mod k = 0); t0 = t * k; Suc 0 < k;\n        m = s (Suc (t * k)); q * k \\<noteq> Suc (Suc (t * k));\n        k \\<noteq> Suc (Suc 0); Suc (Suc (t * k)) \\<le> q * k;\n        Suc (Suc (t * k)) \\<le> j; j \\<le> t * k + k - Suc 0;\n        j \\<le> q * k - Suc 0 \\<longrightarrow> s j = NoMsg;\n        t * k + k \\<le> q * k\\<rbrakk>\n       \\<Longrightarrow> s j = NoMsg\n 2. \\<And>q j.\n       \\<lbrakk>s (Suc (t * k)) \\<noteq> NoMsg;\n        \\<And>t. event t = (t mod k = 0); t0 = t * k; Suc 0 < k;\n        m = s (Suc (t * k)); q * k \\<noteq> Suc (Suc (t * k));\n        k \\<noteq> Suc (Suc 0); Suc (Suc (t * k)) \\<le> q * k;\n        Suc (Suc (t * k)) \\<le> j; j \\<le> t * k + k - Suc 0;\n        j \\<le> q * k - Suc 0 \\<longrightarrow> s j = NoMsg\\<rbrakk>\n       \\<Longrightarrow> t * k + k \\<le> q * k\n 3. \\<And>i.\n       \\<lbrakk>m \\<noteq> NoMsg; \\<And>t. event t = (t mod k = 0);\n        t0 = t * k; Suc 0 < k;\n        i = Suc (t * k) \\<longrightarrow>\n        s (Suc (t * k)) = m \\<and>\n        (\\<exists>x.\n            (x = Suc (Suc (t * k)) \\<longrightarrow>\n             (if Suc (Suc 0) = k then 0 else Suc (Suc (t * k) mod k)) =\n             0) \\<and>\n            (x \\<noteq> Suc (Suc (t * k)) \\<longrightarrow>\n             Suc (Suc (t * k)) \\<le> x \\<and>\n             x mod k = 0 \\<and>\n             (\\<forall>xa.\n                 Suc (Suc (t * k)) \\<le> xa \\<and>\n                 xa \\<le> Suc (Suc (t * k +\n                                    (x -\n                                     Suc\n(Suc (Suc (t * k)))))) \\<longrightarrow>\n                 s xa = NoMsg)));\n        i \\<noteq> Suc (t * k) \\<longrightarrow>\n        Suc (t * k) \\<le> i \\<and>\n        s i = m \\<and>\n        0 < i mod k \\<and>\n        (\\<exists>x.\n            (x = Suc i \\<longrightarrow>\n             (if Suc (i mod k) = k then 0 else Suc (i mod k)) = 0) \\<and>\n            (x \\<noteq> Suc i \\<longrightarrow>\n             Suc i \\<le> x \\<and>\n             x mod k = 0 \\<and>\n             (\\<forall>xa.\n                 Suc i \\<le> xa \\<and>\n                 xa \\<le> Suc (i + (x - Suc (Suc i))) \\<longrightarrow>\n                 s xa = NoMsg))) \\<and>\n        (\\<forall>x.\n            Suc (t * k) \\<le> x \\<and>\n            x \\<le> Suc (t * k + (i - Suc (Suc (t * k)))) \\<longrightarrow>\n            0 < x mod k);\n        i \\<noteq> Suc (t * k)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x.\n                            (x < t * k + k - Suc 0 \\<longrightarrow>\n                             t * k \\<le> x \\<and>\n                             s x = m \\<and>\n                             (\\<forall>xa.\n                                 Suc x \\<le> xa \\<and>\n                                 xa \\<le> t * k + k -\n    Suc 0 \\<longrightarrow>\n                                 s xa = NoMsg)) \\<and>\n                            (\\<not> x < t * k + k - Suc 0 \\<longrightarrow>\n                             t * k \\<le> x \\<and>\n                             x = t * k + k - Suc 0 \\<and> s x = m)", "prefer 2"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>q j.\n       \\<lbrakk>s (Suc (t * k)) \\<noteq> NoMsg;\n        \\<And>t. event t = (t mod k = 0); t0 = t * k; Suc 0 < k;\n        m = s (Suc (t * k)); q * k \\<noteq> Suc (Suc (t * k));\n        k \\<noteq> Suc (Suc 0); Suc (Suc (t * k)) \\<le> q * k;\n        Suc (Suc (t * k)) \\<le> j; j \\<le> t * k + k - Suc 0;\n        j \\<le> q * k - Suc 0 \\<longrightarrow> s j = NoMsg\\<rbrakk>\n       \\<Longrightarrow> t * k + k \\<le> q * k\n 2. \\<And>q j.\n       \\<lbrakk>s (Suc (t * k)) \\<noteq> NoMsg;\n        \\<And>t. event t = (t mod k = 0); t0 = t * k; Suc 0 < k;\n        m = s (Suc (t * k)); q * k \\<noteq> Suc (Suc (t * k));\n        k \\<noteq> Suc (Suc 0); Suc (Suc (t * k)) \\<le> q * k;\n        Suc (Suc (t * k)) \\<le> j; j \\<le> t * k + k - Suc 0;\n        j \\<le> q * k - Suc 0 \\<longrightarrow> s j = NoMsg;\n        t * k + k \\<le> q * k\\<rbrakk>\n       \\<Longrightarrow> s j = NoMsg\n 3. \\<And>i.\n       \\<lbrakk>m \\<noteq> NoMsg; \\<And>t. event t = (t mod k = 0);\n        t0 = t * k; Suc 0 < k;\n        i = Suc (t * k) \\<longrightarrow>\n        s (Suc (t * k)) = m \\<and>\n        (\\<exists>x.\n            (x = Suc (Suc (t * k)) \\<longrightarrow>\n             (if Suc (Suc 0) = k then 0 else Suc (Suc (t * k) mod k)) =\n             0) \\<and>\n            (x \\<noteq> Suc (Suc (t * k)) \\<longrightarrow>\n             Suc (Suc (t * k)) \\<le> x \\<and>\n             x mod k = 0 \\<and>\n             (\\<forall>xa.\n                 Suc (Suc (t * k)) \\<le> xa \\<and>\n                 xa \\<le> Suc (Suc (t * k +\n                                    (x -\n                                     Suc\n(Suc (Suc (t * k)))))) \\<longrightarrow>\n                 s xa = NoMsg)));\n        i \\<noteq> Suc (t * k) \\<longrightarrow>\n        Suc (t * k) \\<le> i \\<and>\n        s i = m \\<and>\n        0 < i mod k \\<and>\n        (\\<exists>x.\n            (x = Suc i \\<longrightarrow>\n             (if Suc (i mod k) = k then 0 else Suc (i mod k)) = 0) \\<and>\n            (x \\<noteq> Suc i \\<longrightarrow>\n             Suc i \\<le> x \\<and>\n             x mod k = 0 \\<and>\n             (\\<forall>xa.\n                 Suc i \\<le> xa \\<and>\n                 xa \\<le> Suc (i + (x - Suc (Suc i))) \\<longrightarrow>\n                 s xa = NoMsg))) \\<and>\n        (\\<forall>x.\n            Suc (t * k) \\<le> x \\<and>\n            x \\<le> Suc (t * k + (i - Suc (Suc (t * k)))) \\<longrightarrow>\n            0 < x mod k);\n        i \\<noteq> Suc (t * k)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x.\n                            (x < t * k + k - Suc 0 \\<longrightarrow>\n                             t * k \\<le> x \\<and>\n                             s x = m \\<and>\n                             (\\<forall>xa.\n                                 Suc x \\<le> xa \\<and>\n                                 xa \\<le> t * k + k -\n    Suc 0 \\<longrightarrow>\n                                 s xa = NoMsg)) \\<and>\n                            (\\<not> x < t * k + k - Suc 0 \\<longrightarrow>\n                             t * k \\<le> x \\<and>\n                             x = t * k + k - Suc 0 \\<and> s x = m)", "apply (rule less_mod_eq_imp_add_divisor_le)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>q j.\n       \\<lbrakk>s (Suc (t * k)) \\<noteq> NoMsg;\n        \\<And>t. event t = (t mod k = 0); t0 = t * k; Suc 0 < k;\n        m = s (Suc (t * k)); q * k \\<noteq> Suc (Suc (t * k));\n        k \\<noteq> Suc (Suc 0); Suc (Suc (t * k)) \\<le> q * k;\n        Suc (Suc (t * k)) \\<le> j; j \\<le> t * k + k - Suc 0;\n        j \\<le> q * k - Suc 0 \\<longrightarrow> s j = NoMsg\\<rbrakk>\n       \\<Longrightarrow> t * k < q * k\n 2. \\<And>q j.\n       \\<lbrakk>s (Suc (t * k)) \\<noteq> NoMsg;\n        \\<And>t. event t = (t mod k = 0); t0 = t * k; Suc 0 < k;\n        m = s (Suc (t * k)); q * k \\<noteq> Suc (Suc (t * k));\n        k \\<noteq> Suc (Suc 0); Suc (Suc (t * k)) \\<le> q * k;\n        Suc (Suc (t * k)) \\<le> j; j \\<le> t * k + k - Suc 0;\n        j \\<le> q * k - Suc 0 \\<longrightarrow> s j = NoMsg\\<rbrakk>\n       \\<Longrightarrow> t * k mod k = q * k mod k\n 3. \\<And>q j.\n       \\<lbrakk>s (Suc (t * k)) \\<noteq> NoMsg;\n        \\<And>t. event t = (t mod k = 0); t0 = t * k; Suc 0 < k;\n        m = s (Suc (t * k)); q * k \\<noteq> Suc (Suc (t * k));\n        k \\<noteq> Suc (Suc 0); Suc (Suc (t * k)) \\<le> q * k;\n        Suc (Suc (t * k)) \\<le> j; j \\<le> t * k + k - Suc 0;\n        j \\<le> q * k - Suc 0 \\<longrightarrow> s j = NoMsg;\n        t * k + k \\<le> q * k\\<rbrakk>\n       \\<Longrightarrow> s j = NoMsg\n 4. \\<And>i.\n       \\<lbrakk>m \\<noteq> NoMsg; \\<And>t. event t = (t mod k = 0);\n        t0 = t * k; Suc 0 < k;\n        i = Suc (t * k) \\<longrightarrow>\n        s (Suc (t * k)) = m \\<and>\n        (\\<exists>x.\n            (x = Suc (Suc (t * k)) \\<longrightarrow>\n             (if Suc (Suc 0) = k then 0 else Suc (Suc (t * k) mod k)) =\n             0) \\<and>\n            (x \\<noteq> Suc (Suc (t * k)) \\<longrightarrow>\n             Suc (Suc (t * k)) \\<le> x \\<and>\n             x mod k = 0 \\<and>\n             (\\<forall>xa.\n                 Suc (Suc (t * k)) \\<le> xa \\<and>\n                 xa \\<le> Suc (Suc (t * k +\n                                    (x -\n                                     Suc\n(Suc (Suc (t * k)))))) \\<longrightarrow>\n                 s xa = NoMsg)));\n        i \\<noteq> Suc (t * k) \\<longrightarrow>\n        Suc (t * k) \\<le> i \\<and>\n        s i = m \\<and>\n        0 < i mod k \\<and>\n        (\\<exists>x.\n            (x = Suc i \\<longrightarrow>\n             (if Suc (i mod k) = k then 0 else Suc (i mod k)) = 0) \\<and>\n            (x \\<noteq> Suc i \\<longrightarrow>\n             Suc i \\<le> x \\<and>\n             x mod k = 0 \\<and>\n             (\\<forall>xa.\n                 Suc i \\<le> xa \\<and>\n                 xa \\<le> Suc (i + (x - Suc (Suc i))) \\<longrightarrow>\n                 s xa = NoMsg))) \\<and>\n        (\\<forall>x.\n            Suc (t * k) \\<le> x \\<and>\n            x \\<le> Suc (t * k + (i - Suc (Suc (t * k)))) \\<longrightarrow>\n            0 < x mod k);\n        i \\<noteq> Suc (t * k)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x.\n                            (x < t * k + k - Suc 0 \\<longrightarrow>\n                             t * k \\<le> x \\<and>\n                             s x = m \\<and>\n                             (\\<forall>xa.\n                                 Suc x \\<le> xa \\<and>\n                                 xa \\<le> t * k + k -\n    Suc 0 \\<longrightarrow>\n                                 s xa = NoMsg)) \\<and>\n                            (\\<not> x < t * k + k - Suc 0 \\<longrightarrow>\n                             t * k \\<le> x \\<and>\n                             x = t * k + k - Suc 0 \\<and> s x = m)", "apply (rule Suc_le_lessD, simp)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>q j.\n       \\<lbrakk>s (Suc (t * k)) \\<noteq> NoMsg;\n        \\<And>t. event t = (t mod k = 0); t0 = t * k; Suc 0 < k;\n        m = s (Suc (t * k)); q * k \\<noteq> Suc (Suc (t * k));\n        k \\<noteq> Suc (Suc 0); Suc (Suc (t * k)) \\<le> q * k;\n        Suc (Suc (t * k)) \\<le> j; j \\<le> t * k + k - Suc 0;\n        j \\<le> q * k - Suc 0 \\<longrightarrow> s j = NoMsg\\<rbrakk>\n       \\<Longrightarrow> t * k mod k = q * k mod k\n 2. \\<And>q j.\n       \\<lbrakk>s (Suc (t * k)) \\<noteq> NoMsg;\n        \\<And>t. event t = (t mod k = 0); t0 = t * k; Suc 0 < k;\n        m = s (Suc (t * k)); q * k \\<noteq> Suc (Suc (t * k));\n        k \\<noteq> Suc (Suc 0); Suc (Suc (t * k)) \\<le> q * k;\n        Suc (Suc (t * k)) \\<le> j; j \\<le> t * k + k - Suc 0;\n        j \\<le> q * k - Suc 0 \\<longrightarrow> s j = NoMsg;\n        t * k + k \\<le> q * k\\<rbrakk>\n       \\<Longrightarrow> s j = NoMsg\n 3. \\<And>i.\n       \\<lbrakk>m \\<noteq> NoMsg; \\<And>t. event t = (t mod k = 0);\n        t0 = t * k; Suc 0 < k;\n        i = Suc (t * k) \\<longrightarrow>\n        s (Suc (t * k)) = m \\<and>\n        (\\<exists>x.\n            (x = Suc (Suc (t * k)) \\<longrightarrow>\n             (if Suc (Suc 0) = k then 0 else Suc (Suc (t * k) mod k)) =\n             0) \\<and>\n            (x \\<noteq> Suc (Suc (t * k)) \\<longrightarrow>\n             Suc (Suc (t * k)) \\<le> x \\<and>\n             x mod k = 0 \\<and>\n             (\\<forall>xa.\n                 Suc (Suc (t * k)) \\<le> xa \\<and>\n                 xa \\<le> Suc (Suc (t * k +\n                                    (x -\n                                     Suc\n(Suc (Suc (t * k)))))) \\<longrightarrow>\n                 s xa = NoMsg)));\n        i \\<noteq> Suc (t * k) \\<longrightarrow>\n        Suc (t * k) \\<le> i \\<and>\n        s i = m \\<and>\n        0 < i mod k \\<and>\n        (\\<exists>x.\n            (x = Suc i \\<longrightarrow>\n             (if Suc (i mod k) = k then 0 else Suc (i mod k)) = 0) \\<and>\n            (x \\<noteq> Suc i \\<longrightarrow>\n             Suc i \\<le> x \\<and>\n             x mod k = 0 \\<and>\n             (\\<forall>xa.\n                 Suc i \\<le> xa \\<and>\n                 xa \\<le> Suc (i + (x - Suc (Suc i))) \\<longrightarrow>\n                 s xa = NoMsg))) \\<and>\n        (\\<forall>x.\n            Suc (t * k) \\<le> x \\<and>\n            x \\<le> Suc (t * k + (i - Suc (Suc (t * k)))) \\<longrightarrow>\n            0 < x mod k);\n        i \\<noteq> Suc (t * k)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x.\n                            (x < t * k + k - Suc 0 \\<longrightarrow>\n                             t * k \\<le> x \\<and>\n                             s x = m \\<and>\n                             (\\<forall>xa.\n                                 Suc x \\<le> xa \\<and>\n                                 xa \\<le> t * k + k -\n    Suc 0 \\<longrightarrow>\n                                 s xa = NoMsg)) \\<and>\n                            (\\<not> x < t * k + k - Suc 0 \\<longrightarrow>\n                             t * k \\<le> x \\<and>\n                             x = t * k + k - Suc 0 \\<and> s x = m)", "apply simp"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>q j.\n       \\<lbrakk>s (Suc (t * k)) \\<noteq> NoMsg;\n        \\<And>t. event t = (t mod k = 0); t0 = t * k; Suc 0 < k;\n        m = s (Suc (t * k)); q * k \\<noteq> Suc (Suc (t * k));\n        k \\<noteq> Suc (Suc 0); Suc (Suc (t * k)) \\<le> q * k;\n        Suc (Suc (t * k)) \\<le> j; j \\<le> t * k + k - Suc 0;\n        j \\<le> q * k - Suc 0 \\<longrightarrow> s j = NoMsg;\n        t * k + k \\<le> q * k\\<rbrakk>\n       \\<Longrightarrow> s j = NoMsg\n 2. \\<And>i.\n       \\<lbrakk>m \\<noteq> NoMsg; \\<And>t. event t = (t mod k = 0);\n        t0 = t * k; Suc 0 < k;\n        i = Suc (t * k) \\<longrightarrow>\n        s (Suc (t * k)) = m \\<and>\n        (\\<exists>x.\n            (x = Suc (Suc (t * k)) \\<longrightarrow>\n             (if Suc (Suc 0) = k then 0 else Suc (Suc (t * k) mod k)) =\n             0) \\<and>\n            (x \\<noteq> Suc (Suc (t * k)) \\<longrightarrow>\n             Suc (Suc (t * k)) \\<le> x \\<and>\n             x mod k = 0 \\<and>\n             (\\<forall>xa.\n                 Suc (Suc (t * k)) \\<le> xa \\<and>\n                 xa \\<le> Suc (Suc (t * k +\n                                    (x -\n                                     Suc\n(Suc (Suc (t * k)))))) \\<longrightarrow>\n                 s xa = NoMsg)));\n        i \\<noteq> Suc (t * k) \\<longrightarrow>\n        Suc (t * k) \\<le> i \\<and>\n        s i = m \\<and>\n        0 < i mod k \\<and>\n        (\\<exists>x.\n            (x = Suc i \\<longrightarrow>\n             (if Suc (i mod k) = k then 0 else Suc (i mod k)) = 0) \\<and>\n            (x \\<noteq> Suc i \\<longrightarrow>\n             Suc i \\<le> x \\<and>\n             x mod k = 0 \\<and>\n             (\\<forall>xa.\n                 Suc i \\<le> xa \\<and>\n                 xa \\<le> Suc (i + (x - Suc (Suc i))) \\<longrightarrow>\n                 s xa = NoMsg))) \\<and>\n        (\\<forall>x.\n            Suc (t * k) \\<le> x \\<and>\n            x \\<le> Suc (t * k + (i - Suc (Suc (t * k)))) \\<longrightarrow>\n            0 < x mod k);\n        i \\<noteq> Suc (t * k)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x.\n                            (x < t * k + k - Suc 0 \\<longrightarrow>\n                             t * k \\<le> x \\<and>\n                             s x = m \\<and>\n                             (\\<forall>xa.\n                                 Suc x \\<le> xa \\<and>\n                                 xa \\<le> t * k + k -\n    Suc 0 \\<longrightarrow>\n                                 s xa = NoMsg)) \\<and>\n                            (\\<not> x < t * k + k - Suc 0 \\<longrightarrow>\n                             t * k \\<le> x \\<and>\n                             x = t * k + k - Suc 0 \\<and> s x = m)", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i.\n       \\<lbrakk>m \\<noteq> NoMsg; \\<And>t. event t = (t mod k = 0);\n        t0 = t * k; Suc 0 < k;\n        i = Suc (t * k) \\<longrightarrow>\n        s (Suc (t * k)) = m \\<and>\n        (\\<exists>x.\n            (x = Suc (Suc (t * k)) \\<longrightarrow>\n             (if Suc (Suc 0) = k then 0 else Suc (Suc (t * k) mod k)) =\n             0) \\<and>\n            (x \\<noteq> Suc (Suc (t * k)) \\<longrightarrow>\n             Suc (Suc (t * k)) \\<le> x \\<and>\n             x mod k = 0 \\<and>\n             (\\<forall>xa.\n                 Suc (Suc (t * k)) \\<le> xa \\<and>\n                 xa \\<le> Suc (Suc (t * k +\n                                    (x -\n                                     Suc\n(Suc (Suc (t * k)))))) \\<longrightarrow>\n                 s xa = NoMsg)));\n        i \\<noteq> Suc (t * k) \\<longrightarrow>\n        Suc (t * k) \\<le> i \\<and>\n        s i = m \\<and>\n        0 < i mod k \\<and>\n        (\\<exists>x.\n            (x = Suc i \\<longrightarrow>\n             (if Suc (i mod k) = k then 0 else Suc (i mod k)) = 0) \\<and>\n            (x \\<noteq> Suc i \\<longrightarrow>\n             Suc i \\<le> x \\<and>\n             x mod k = 0 \\<and>\n             (\\<forall>xa.\n                 Suc i \\<le> xa \\<and>\n                 xa \\<le> Suc (i + (x - Suc (Suc i))) \\<longrightarrow>\n                 s xa = NoMsg))) \\<and>\n        (\\<forall>x.\n            Suc (t * k) \\<le> x \\<and>\n            x \\<le> Suc (t * k + (i - Suc (Suc (t * k)))) \\<longrightarrow>\n            0 < x mod k);\n        i \\<noteq> Suc (t * k)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x.\n                            (x < t * k + k - Suc 0 \\<longrightarrow>\n                             t * k \\<le> x \\<and>\n                             s x = m \\<and>\n                             (\\<forall>xa.\n                                 Suc x \\<le> xa \\<and>\n                                 xa \\<le> t * k + k -\n    Suc 0 \\<longrightarrow>\n                                 s xa = NoMsg)) \\<and>\n                            (\\<not> x < t * k + k - Suc 0 \\<longrightarrow>\n                             t * k \\<le> x \\<and>\n                             x = t * k + k - Suc 0 \\<and> s x = m)", "apply (clarsimp, rename_tac i1)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i i1.\n       \\<lbrakk>s i \\<noteq> NoMsg; \\<And>t. event t = (t mod k = 0);\n        t0 = t * k; Suc 0 < k; i \\<noteq> Suc (t * k); Suc (t * k) \\<le> i;\n        m = s i; 0 < i mod k;\n        \\<forall>x.\n           Suc (t * k) \\<le> x \\<and> x \\<le> Suc (i - 2) \\<longrightarrow>\n           0 < x mod k;\n        i1 = Suc i \\<longrightarrow>\n        (if Suc (i mod k) = k then 0 else Suc (i mod k)) = 0;\n        i1 \\<noteq> Suc i \\<longrightarrow>\n        Suc i \\<le> i1 \\<and>\n        i1 mod k = 0 \\<and>\n        (\\<forall>x.\n            Suc i \\<le> x \\<and>\n            x \\<le> Suc (i + (i1 - Suc (Suc i))) \\<longrightarrow>\n            s x = NoMsg)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x.\n                            (x < t * k + k - Suc 0 \\<longrightarrow>\n                             t * k \\<le> x \\<and>\n                             s x = s i \\<and>\n                             (\\<forall>xa.\n                                 Suc x \\<le> xa \\<and>\n                                 xa \\<le> t * k + k -\n    Suc 0 \\<longrightarrow>\n                                 s xa = NoMsg)) \\<and>\n                            (\\<not> x < t * k + k - Suc 0 \\<longrightarrow>\n                             t * k \\<le> x \\<and>\n                             x = t * k + k - Suc 0 \\<and> s x = s i)", "apply (rule_tac x=i in exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i i1.\n       \\<lbrakk>s i \\<noteq> NoMsg; \\<And>t. event t = (t mod k = 0);\n        t0 = t * k; Suc 0 < k; i \\<noteq> Suc (t * k); Suc (t * k) \\<le> i;\n        m = s i; 0 < i mod k;\n        \\<forall>x.\n           Suc (t * k) \\<le> x \\<and> x \\<le> Suc (i - 2) \\<longrightarrow>\n           0 < x mod k;\n        i1 = Suc i \\<longrightarrow>\n        (if Suc (i mod k) = k then 0 else Suc (i mod k)) = 0;\n        i1 \\<noteq> Suc i \\<longrightarrow>\n        Suc i \\<le> i1 \\<and>\n        i1 mod k = 0 \\<and>\n        (\\<forall>x.\n            Suc i \\<le> x \\<and>\n            x \\<le> Suc (i + (i1 - Suc (Suc i))) \\<longrightarrow>\n            s x = NoMsg)\\<rbrakk>\n       \\<Longrightarrow> (i < t * k + k - Suc 0 \\<longrightarrow>\n                          t * k \\<le> i \\<and>\n                          s i = s i \\<and>\n                          (\\<forall>x.\n                              Suc i \\<le> x \\<and>\n                              x \\<le> t * k + k - Suc 0 \\<longrightarrow>\n                              s x = NoMsg)) \\<and>\n                         (\\<not> i < t * k + k - Suc 0 \\<longrightarrow>\n                          t * k \\<le> i \\<and>\n                          i = t * k + k - Suc 0 \\<and> s i = s i)", "apply (simp add: numeral_2_eq_2 Suc_diff_Suc)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i i1.\n       \\<lbrakk>s i \\<noteq> NoMsg; \\<And>t. event t = (t mod k = 0);\n        t0 = t * k; Suc 0 < k; i \\<noteq> Suc (t * k); Suc (t * k) \\<le> i;\n        m = s i; 0 < i mod k;\n        \\<forall>x.\n           Suc (t * k) \\<le> x \\<and> x \\<le> i - Suc 0 \\<longrightarrow>\n           0 < x mod k;\n        i1 = Suc i \\<longrightarrow>\n        (if Suc (i mod k) = k then 0 else Suc (i mod k)) = 0;\n        i1 \\<noteq> Suc i \\<longrightarrow>\n        Suc i \\<le> i1 \\<and>\n        i1 mod k = 0 \\<and>\n        (\\<forall>x.\n            Suc i \\<le> x \\<and>\n            x \\<le> Suc (i + (i1 - Suc (Suc i))) \\<longrightarrow>\n            s x = NoMsg)\\<rbrakk>\n       \\<Longrightarrow> (i < t * k + k - Suc 0 \\<longrightarrow>\n                          (\\<forall>x.\n                              Suc i \\<le> x \\<and>\n                              x \\<le> t * k + k - Suc 0 \\<longrightarrow>\n                              s x = NoMsg)) \\<and>\n                         (\\<not> i < t * k + k - Suc 0 \\<longrightarrow>\n                          i = t * k + k - Suc 0)", "apply (case_tac \"i1 = Suc i\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>i i1.\n       \\<lbrakk>s i \\<noteq> NoMsg; \\<And>t. event t = (t mod k = 0);\n        t0 = t * k; Suc 0 < k; i \\<noteq> Suc (t * k); Suc (t * k) \\<le> i;\n        m = s i; 0 < i mod k;\n        \\<forall>x.\n           Suc (t * k) \\<le> x \\<and> x \\<le> i - Suc 0 \\<longrightarrow>\n           0 < x mod k;\n        i1 = Suc i \\<longrightarrow>\n        (if Suc (i mod k) = k then 0 else Suc (i mod k)) = 0;\n        i1 \\<noteq> Suc i \\<longrightarrow>\n        Suc i \\<le> i1 \\<and>\n        i1 mod k = 0 \\<and>\n        (\\<forall>x.\n            Suc i \\<le> x \\<and>\n            x \\<le> Suc (i + (i1 - Suc (Suc i))) \\<longrightarrow>\n            s x = NoMsg);\n        i1 = Suc i\\<rbrakk>\n       \\<Longrightarrow> (i < t * k + k - Suc 0 \\<longrightarrow>\n                          (\\<forall>x.\n                              Suc i \\<le> x \\<and>\n                              x \\<le> t * k + k - Suc 0 \\<longrightarrow>\n                              s x = NoMsg)) \\<and>\n                         (\\<not> i < t * k + k - Suc 0 \\<longrightarrow>\n                          i = t * k + k - Suc 0)\n 2. \\<And>i i1.\n       \\<lbrakk>s i \\<noteq> NoMsg; \\<And>t. event t = (t mod k = 0);\n        t0 = t * k; Suc 0 < k; i \\<noteq> Suc (t * k); Suc (t * k) \\<le> i;\n        m = s i; 0 < i mod k;\n        \\<forall>x.\n           Suc (t * k) \\<le> x \\<and> x \\<le> i - Suc 0 \\<longrightarrow>\n           0 < x mod k;\n        i1 = Suc i \\<longrightarrow>\n        (if Suc (i mod k) = k then 0 else Suc (i mod k)) = 0;\n        i1 \\<noteq> Suc i \\<longrightarrow>\n        Suc i \\<le> i1 \\<and>\n        i1 mod k = 0 \\<and>\n        (\\<forall>x.\n            Suc i \\<le> x \\<and>\n            x \\<le> Suc (i + (i1 - Suc (Suc i))) \\<longrightarrow>\n            s x = NoMsg);\n        i1 \\<noteq> Suc i\\<rbrakk>\n       \\<Longrightarrow> (i < t * k + k - Suc 0 \\<longrightarrow>\n                          (\\<forall>x.\n                              Suc i \\<le> x \\<and>\n                              x \\<le> t * k + k - Suc 0 \\<longrightarrow>\n                              s x = NoMsg)) \\<and>\n                         (\\<not> i < t * k + k - Suc 0 \\<longrightarrow>\n                          i = t * k + k - Suc 0)", "apply simp"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>i i1.\n       \\<lbrakk>s i \\<noteq> NoMsg; \\<And>t. event t = (t mod k = 0);\n        t0 = t * k; Suc 0 < k; i \\<noteq> Suc (t * k); Suc (t * k) \\<le> i;\n        m = s i; 0 < i mod k;\n        \\<forall>x.\n           Suc (t * k) \\<le> x \\<and> x \\<le> i - Suc 0 \\<longrightarrow>\n           0 < x mod k;\n        (if Suc (i mod k) = k then 0 else Suc (i mod k)) = 0;\n        i1 = Suc i\\<rbrakk>\n       \\<Longrightarrow> (i < t * k + k - Suc 0 \\<longrightarrow>\n                          (\\<forall>x.\n                              Suc i \\<le> x \\<and>\n                              x \\<le> t * k + k - Suc 0 \\<longrightarrow>\n                              s x = NoMsg)) \\<and>\n                         (\\<not> i < t * k + k - Suc 0 \\<longrightarrow>\n                          i = t * k + k - Suc 0)\n 2. \\<And>i i1.\n       \\<lbrakk>s i \\<noteq> NoMsg; \\<And>t. event t = (t mod k = 0);\n        t0 = t * k; Suc 0 < k; i \\<noteq> Suc (t * k); Suc (t * k) \\<le> i;\n        m = s i; 0 < i mod k;\n        \\<forall>x.\n           Suc (t * k) \\<le> x \\<and> x \\<le> i - Suc 0 \\<longrightarrow>\n           0 < x mod k;\n        i1 = Suc i \\<longrightarrow>\n        (if Suc (i mod k) = k then 0 else Suc (i mod k)) = 0;\n        i1 \\<noteq> Suc i \\<longrightarrow>\n        Suc i \\<le> i1 \\<and>\n        i1 mod k = 0 \\<and>\n        (\\<forall>x.\n            Suc i \\<le> x \\<and>\n            x \\<le> Suc (i + (i1 - Suc (Suc i))) \\<longrightarrow>\n            s x = NoMsg);\n        i1 \\<noteq> Suc i\\<rbrakk>\n       \\<Longrightarrow> (i < t * k + k - Suc 0 \\<longrightarrow>\n                          (\\<forall>x.\n                              Suc i \\<le> x \\<and>\n                              x \\<le> t * k + k - Suc 0 \\<longrightarrow>\n                              s x = NoMsg)) \\<and>\n                         (\\<not> i < t * k + k - Suc 0 \\<longrightarrow>\n                          i = t * k + k - Suc 0)", "apply (case_tac \"Suc (i mod k) = k\")"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>i i1.\n       \\<lbrakk>s i \\<noteq> NoMsg; \\<And>t. event t = (t mod k = 0);\n        t0 = t * k; Suc 0 < k; i \\<noteq> Suc (t * k); Suc (t * k) \\<le> i;\n        m = s i; 0 < i mod k;\n        \\<forall>x.\n           Suc (t * k) \\<le> x \\<and> x \\<le> i - Suc 0 \\<longrightarrow>\n           0 < x mod k;\n        (if Suc (i mod k) = k then 0 else Suc (i mod k)) = 0; i1 = Suc i;\n        Suc (i mod k) = k\\<rbrakk>\n       \\<Longrightarrow> (i < t * k + k - Suc 0 \\<longrightarrow>\n                          (\\<forall>x.\n                              Suc i \\<le> x \\<and>\n                              x \\<le> t * k + k - Suc 0 \\<longrightarrow>\n                              s x = NoMsg)) \\<and>\n                         (\\<not> i < t * k + k - Suc 0 \\<longrightarrow>\n                          i = t * k + k - Suc 0)\n 2. \\<And>i i1.\n       \\<lbrakk>s i \\<noteq> NoMsg; \\<And>t. event t = (t mod k = 0);\n        t0 = t * k; Suc 0 < k; i \\<noteq> Suc (t * k); Suc (t * k) \\<le> i;\n        m = s i; 0 < i mod k;\n        \\<forall>x.\n           Suc (t * k) \\<le> x \\<and> x \\<le> i - Suc 0 \\<longrightarrow>\n           0 < x mod k;\n        (if Suc (i mod k) = k then 0 else Suc (i mod k)) = 0; i1 = Suc i;\n        Suc (i mod k) \\<noteq> k\\<rbrakk>\n       \\<Longrightarrow> (i < t * k + k - Suc 0 \\<longrightarrow>\n                          (\\<forall>x.\n                              Suc i \\<le> x \\<and>\n                              x \\<le> t * k + k - Suc 0 \\<longrightarrow>\n                              s x = NoMsg)) \\<and>\n                         (\\<not> i < t * k + k - Suc 0 \\<longrightarrow>\n                          i = t * k + k - Suc 0)\n 3. \\<And>i i1.\n       \\<lbrakk>s i \\<noteq> NoMsg; \\<And>t. event t = (t mod k = 0);\n        t0 = t * k; Suc 0 < k; i \\<noteq> Suc (t * k); Suc (t * k) \\<le> i;\n        m = s i; 0 < i mod k;\n        \\<forall>x.\n           Suc (t * k) \\<le> x \\<and> x \\<le> i - Suc 0 \\<longrightarrow>\n           0 < x mod k;\n        i1 = Suc i \\<longrightarrow>\n        (if Suc (i mod k) = k then 0 else Suc (i mod k)) = 0;\n        i1 \\<noteq> Suc i \\<longrightarrow>\n        Suc i \\<le> i1 \\<and>\n        i1 mod k = 0 \\<and>\n        (\\<forall>x.\n            Suc i \\<le> x \\<and>\n            x \\<le> Suc (i + (i1 - Suc (Suc i))) \\<longrightarrow>\n            s x = NoMsg);\n        i1 \\<noteq> Suc i\\<rbrakk>\n       \\<Longrightarrow> (i < t * k + k - Suc 0 \\<longrightarrow>\n                          (\\<forall>x.\n                              Suc i \\<le> x \\<and>\n                              x \\<le> t * k + k - Suc 0 \\<longrightarrow>\n                              s x = NoMsg)) \\<and>\n                         (\\<not> i < t * k + k - Suc 0 \\<longrightarrow>\n                          i = t * k + k - Suc 0)", "apply simp"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>i i1.\n       \\<lbrakk>s i \\<noteq> NoMsg; \\<And>t. event t = (t mod k = 0);\n        t0 = t * k; i \\<noteq> Suc (t * k); Suc (t * k) \\<le> i; m = s i;\n        0 < i mod k;\n        \\<forall>x.\n           Suc (t * k) \\<le> x \\<and> x \\<le> i - Suc 0 \\<longrightarrow>\n           0 < x mod k;\n        i1 = Suc i; Suc (i mod k) = k\\<rbrakk>\n       \\<Longrightarrow> (i < t * k + k - Suc 0 \\<longrightarrow>\n                          (\\<forall>x.\n                              Suc i \\<le> x \\<and>\n                              x \\<le> t * k + k - Suc 0 \\<longrightarrow>\n                              s x = NoMsg)) \\<and>\n                         (\\<not> i < t * k + k - Suc 0 \\<longrightarrow>\n                          i = t * k + k - Suc 0)\n 2. \\<And>i i1.\n       \\<lbrakk>s i \\<noteq> NoMsg; \\<And>t. event t = (t mod k = 0);\n        t0 = t * k; Suc 0 < k; i \\<noteq> Suc (t * k); Suc (t * k) \\<le> i;\n        m = s i; 0 < i mod k;\n        \\<forall>x.\n           Suc (t * k) \\<le> x \\<and> x \\<le> i - Suc 0 \\<longrightarrow>\n           0 < x mod k;\n        (if Suc (i mod k) = k then 0 else Suc (i mod k)) = 0; i1 = Suc i;\n        Suc (i mod k) \\<noteq> k\\<rbrakk>\n       \\<Longrightarrow> (i < t * k + k - Suc 0 \\<longrightarrow>\n                          (\\<forall>x.\n                              Suc i \\<le> x \\<and>\n                              x \\<le> t * k + k - Suc 0 \\<longrightarrow>\n                              s x = NoMsg)) \\<and>\n                         (\\<not> i < t * k + k - Suc 0 \\<longrightarrow>\n                          i = t * k + k - Suc 0)\n 3. \\<And>i i1.\n       \\<lbrakk>s i \\<noteq> NoMsg; \\<And>t. event t = (t mod k = 0);\n        t0 = t * k; Suc 0 < k; i \\<noteq> Suc (t * k); Suc (t * k) \\<le> i;\n        m = s i; 0 < i mod k;\n        \\<forall>x.\n           Suc (t * k) \\<le> x \\<and> x \\<le> i - Suc 0 \\<longrightarrow>\n           0 < x mod k;\n        i1 = Suc i \\<longrightarrow>\n        (if Suc (i mod k) = k then 0 else Suc (i mod k)) = 0;\n        i1 \\<noteq> Suc i \\<longrightarrow>\n        Suc i \\<le> i1 \\<and>\n        i1 mod k = 0 \\<and>\n        (\\<forall>x.\n            Suc i \\<le> x \\<and>\n            x \\<le> Suc (i + (i1 - Suc (Suc i))) \\<longrightarrow>\n            s x = NoMsg);\n        i1 \\<noteq> Suc i\\<rbrakk>\n       \\<Longrightarrow> (i < t * k + k - Suc 0 \\<longrightarrow>\n                          (\\<forall>x.\n                              Suc i \\<le> x \\<and>\n                              x \\<le> t * k + k - Suc 0 \\<longrightarrow>\n                              s x = NoMsg)) \\<and>\n                         (\\<not> i < t * k + k - Suc 0 \\<longrightarrow>\n                          i = t * k + k - Suc 0)", "apply (subgoal_tac \"i \\<le> t * k + k - Suc 0\")"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>i i1.\n       \\<lbrakk>s i \\<noteq> NoMsg; \\<And>t. event t = (t mod k = 0);\n        t0 = t * k; i \\<noteq> Suc (t * k); Suc (t * k) \\<le> i; m = s i;\n        0 < i mod k;\n        \\<forall>x.\n           Suc (t * k) \\<le> x \\<and> x \\<le> i - Suc 0 \\<longrightarrow>\n           0 < x mod k;\n        i1 = Suc i; Suc (i mod k) = k; i \\<le> t * k + k - Suc 0\\<rbrakk>\n       \\<Longrightarrow> (i < t * k + k - Suc 0 \\<longrightarrow>\n                          (\\<forall>x.\n                              Suc i \\<le> x \\<and>\n                              x \\<le> t * k + k - Suc 0 \\<longrightarrow>\n                              s x = NoMsg)) \\<and>\n                         (\\<not> i < t * k + k - Suc 0 \\<longrightarrow>\n                          i = t * k + k - Suc 0)\n 2. \\<And>i i1.\n       \\<lbrakk>s i \\<noteq> NoMsg; \\<And>t. event t = (t mod k = 0);\n        t0 = t * k; i \\<noteq> Suc (t * k); Suc (t * k) \\<le> i; m = s i;\n        0 < i mod k;\n        \\<forall>x.\n           Suc (t * k) \\<le> x \\<and> x \\<le> i - Suc 0 \\<longrightarrow>\n           0 < x mod k;\n        i1 = Suc i; Suc (i mod k) = k\\<rbrakk>\n       \\<Longrightarrow> i \\<le> t * k + k - Suc 0\n 3. \\<And>i i1.\n       \\<lbrakk>s i \\<noteq> NoMsg; \\<And>t. event t = (t mod k = 0);\n        t0 = t * k; Suc 0 < k; i \\<noteq> Suc (t * k); Suc (t * k) \\<le> i;\n        m = s i; 0 < i mod k;\n        \\<forall>x.\n           Suc (t * k) \\<le> x \\<and> x \\<le> i - Suc 0 \\<longrightarrow>\n           0 < x mod k;\n        (if Suc (i mod k) = k then 0 else Suc (i mod k)) = 0; i1 = Suc i;\n        Suc (i mod k) \\<noteq> k\\<rbrakk>\n       \\<Longrightarrow> (i < t * k + k - Suc 0 \\<longrightarrow>\n                          (\\<forall>x.\n                              Suc i \\<le> x \\<and>\n                              x \\<le> t * k + k - Suc 0 \\<longrightarrow>\n                              s x = NoMsg)) \\<and>\n                         (\\<not> i < t * k + k - Suc 0 \\<longrightarrow>\n                          i = t * k + k - Suc 0)\n 4. \\<And>i i1.\n       \\<lbrakk>s i \\<noteq> NoMsg; \\<And>t. event t = (t mod k = 0);\n        t0 = t * k; Suc 0 < k; i \\<noteq> Suc (t * k); Suc (t * k) \\<le> i;\n        m = s i; 0 < i mod k;\n        \\<forall>x.\n           Suc (t * k) \\<le> x \\<and> x \\<le> i - Suc 0 \\<longrightarrow>\n           0 < x mod k;\n        i1 = Suc i \\<longrightarrow>\n        (if Suc (i mod k) = k then 0 else Suc (i mod k)) = 0;\n        i1 \\<noteq> Suc i \\<longrightarrow>\n        Suc i \\<le> i1 \\<and>\n        i1 mod k = 0 \\<and>\n        (\\<forall>x.\n            Suc i \\<le> x \\<and>\n            x \\<le> Suc (i + (i1 - Suc (Suc i))) \\<longrightarrow>\n            s x = NoMsg);\n        i1 \\<noteq> Suc i\\<rbrakk>\n       \\<Longrightarrow> (i < t * k + k - Suc 0 \\<longrightarrow>\n                          (\\<forall>x.\n                              Suc i \\<le> x \\<and>\n                              x \\<le> t * k + k - Suc 0 \\<longrightarrow>\n                              s x = NoMsg)) \\<and>\n                         (\\<not> i < t * k + k - Suc 0 \\<longrightarrow>\n                          i = t * k + k - Suc 0)", "prefer 2"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>i i1.\n       \\<lbrakk>s i \\<noteq> NoMsg; \\<And>t. event t = (t mod k = 0);\n        t0 = t * k; i \\<noteq> Suc (t * k); Suc (t * k) \\<le> i; m = s i;\n        0 < i mod k;\n        \\<forall>x.\n           Suc (t * k) \\<le> x \\<and> x \\<le> i - Suc 0 \\<longrightarrow>\n           0 < x mod k;\n        i1 = Suc i; Suc (i mod k) = k\\<rbrakk>\n       \\<Longrightarrow> i \\<le> t * k + k - Suc 0\n 2. \\<And>i i1.\n       \\<lbrakk>s i \\<noteq> NoMsg; \\<And>t. event t = (t mod k = 0);\n        t0 = t * k; i \\<noteq> Suc (t * k); Suc (t * k) \\<le> i; m = s i;\n        0 < i mod k;\n        \\<forall>x.\n           Suc (t * k) \\<le> x \\<and> x \\<le> i - Suc 0 \\<longrightarrow>\n           0 < x mod k;\n        i1 = Suc i; Suc (i mod k) = k; i \\<le> t * k + k - Suc 0\\<rbrakk>\n       \\<Longrightarrow> (i < t * k + k - Suc 0 \\<longrightarrow>\n                          (\\<forall>x.\n                              Suc i \\<le> x \\<and>\n                              x \\<le> t * k + k - Suc 0 \\<longrightarrow>\n                              s x = NoMsg)) \\<and>\n                         (\\<not> i < t * k + k - Suc 0 \\<longrightarrow>\n                          i = t * k + k - Suc 0)\n 3. \\<And>i i1.\n       \\<lbrakk>s i \\<noteq> NoMsg; \\<And>t. event t = (t mod k = 0);\n        t0 = t * k; Suc 0 < k; i \\<noteq> Suc (t * k); Suc (t * k) \\<le> i;\n        m = s i; 0 < i mod k;\n        \\<forall>x.\n           Suc (t * k) \\<le> x \\<and> x \\<le> i - Suc 0 \\<longrightarrow>\n           0 < x mod k;\n        (if Suc (i mod k) = k then 0 else Suc (i mod k)) = 0; i1 = Suc i;\n        Suc (i mod k) \\<noteq> k\\<rbrakk>\n       \\<Longrightarrow> (i < t * k + k - Suc 0 \\<longrightarrow>\n                          (\\<forall>x.\n                              Suc i \\<le> x \\<and>\n                              x \\<le> t * k + k - Suc 0 \\<longrightarrow>\n                              s x = NoMsg)) \\<and>\n                         (\\<not> i < t * k + k - Suc 0 \\<longrightarrow>\n                          i = t * k + k - Suc 0)\n 4. \\<And>i i1.\n       \\<lbrakk>s i \\<noteq> NoMsg; \\<And>t. event t = (t mod k = 0);\n        t0 = t * k; Suc 0 < k; i \\<noteq> Suc (t * k); Suc (t * k) \\<le> i;\n        m = s i; 0 < i mod k;\n        \\<forall>x.\n           Suc (t * k) \\<le> x \\<and> x \\<le> i - Suc 0 \\<longrightarrow>\n           0 < x mod k;\n        i1 = Suc i \\<longrightarrow>\n        (if Suc (i mod k) = k then 0 else Suc (i mod k)) = 0;\n        i1 \\<noteq> Suc i \\<longrightarrow>\n        Suc i \\<le> i1 \\<and>\n        i1 mod k = 0 \\<and>\n        (\\<forall>x.\n            Suc i \\<le> x \\<and>\n            x \\<le> Suc (i + (i1 - Suc (Suc i))) \\<longrightarrow>\n            s x = NoMsg);\n        i1 \\<noteq> Suc i\\<rbrakk>\n       \\<Longrightarrow> (i < t * k + k - Suc 0 \\<longrightarrow>\n                          (\\<forall>x.\n                              Suc i \\<le> x \\<and>\n                              x \\<le> t * k + k - Suc 0 \\<longrightarrow>\n                              s x = NoMsg)) \\<and>\n                         (\\<not> i < t * k + k - Suc 0 \\<longrightarrow>\n                          i = t * k + k - Suc 0)", "apply (rule ccontr)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>i i1.\n       \\<lbrakk>s i \\<noteq> NoMsg; \\<And>t. event t = (t mod k = 0);\n        t0 = t * k; i \\<noteq> Suc (t * k); Suc (t * k) \\<le> i; m = s i;\n        0 < i mod k;\n        \\<forall>x.\n           Suc (t * k) \\<le> x \\<and> x \\<le> i - Suc 0 \\<longrightarrow>\n           0 < x mod k;\n        i1 = Suc i; Suc (i mod k) = k;\n        \\<not> i \\<le> t * k + k - Suc 0\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>i i1.\n       \\<lbrakk>s i \\<noteq> NoMsg; \\<And>t. event t = (t mod k = 0);\n        t0 = t * k; i \\<noteq> Suc (t * k); Suc (t * k) \\<le> i; m = s i;\n        0 < i mod k;\n        \\<forall>x.\n           Suc (t * k) \\<le> x \\<and> x \\<le> i - Suc 0 \\<longrightarrow>\n           0 < x mod k;\n        i1 = Suc i; Suc (i mod k) = k; i \\<le> t * k + k - Suc 0\\<rbrakk>\n       \\<Longrightarrow> (i < t * k + k - Suc 0 \\<longrightarrow>\n                          (\\<forall>x.\n                              Suc i \\<le> x \\<and>\n                              x \\<le> t * k + k - Suc 0 \\<longrightarrow>\n                              s x = NoMsg)) \\<and>\n                         (\\<not> i < t * k + k - Suc 0 \\<longrightarrow>\n                          i = t * k + k - Suc 0)\n 3. \\<And>i i1.\n       \\<lbrakk>s i \\<noteq> NoMsg; \\<And>t. event t = (t mod k = 0);\n        t0 = t * k; Suc 0 < k; i \\<noteq> Suc (t * k); Suc (t * k) \\<le> i;\n        m = s i; 0 < i mod k;\n        \\<forall>x.\n           Suc (t * k) \\<le> x \\<and> x \\<le> i - Suc 0 \\<longrightarrow>\n           0 < x mod k;\n        (if Suc (i mod k) = k then 0 else Suc (i mod k)) = 0; i1 = Suc i;\n        Suc (i mod k) \\<noteq> k\\<rbrakk>\n       \\<Longrightarrow> (i < t * k + k - Suc 0 \\<longrightarrow>\n                          (\\<forall>x.\n                              Suc i \\<le> x \\<and>\n                              x \\<le> t * k + k - Suc 0 \\<longrightarrow>\n                              s x = NoMsg)) \\<and>\n                         (\\<not> i < t * k + k - Suc 0 \\<longrightarrow>\n                          i = t * k + k - Suc 0)\n 4. \\<And>i i1.\n       \\<lbrakk>s i \\<noteq> NoMsg; \\<And>t. event t = (t mod k = 0);\n        t0 = t * k; Suc 0 < k; i \\<noteq> Suc (t * k); Suc (t * k) \\<le> i;\n        m = s i; 0 < i mod k;\n        \\<forall>x.\n           Suc (t * k) \\<le> x \\<and> x \\<le> i - Suc 0 \\<longrightarrow>\n           0 < x mod k;\n        i1 = Suc i \\<longrightarrow>\n        (if Suc (i mod k) = k then 0 else Suc (i mod k)) = 0;\n        i1 \\<noteq> Suc i \\<longrightarrow>\n        Suc i \\<le> i1 \\<and>\n        i1 mod k = 0 \\<and>\n        (\\<forall>x.\n            Suc i \\<le> x \\<and>\n            x \\<le> Suc (i + (i1 - Suc (Suc i))) \\<longrightarrow>\n            s x = NoMsg);\n        i1 \\<noteq> Suc i\\<rbrakk>\n       \\<Longrightarrow> (i < t * k + k - Suc 0 \\<longrightarrow>\n                          (\\<forall>x.\n                              Suc i \\<le> x \\<and>\n                              x \\<le> t * k + k - Suc 0 \\<longrightarrow>\n                              s x = NoMsg)) \\<and>\n                         (\\<not> i < t * k + k - Suc 0 \\<longrightarrow>\n                          i = t * k + k - Suc 0)", "apply (drule_tac x=\"t * k + k\" in spec)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>i i1.\n       \\<lbrakk>s i \\<noteq> NoMsg; \\<And>t. event t = (t mod k = 0);\n        t0 = t * k; i \\<noteq> Suc (t * k); Suc (t * k) \\<le> i; m = s i;\n        0 < i mod k; i1 = Suc i; Suc (i mod k) = k;\n        \\<not> i \\<le> t * k + k - Suc 0;\n        Suc (t * k) \\<le> t * k + k \\<and>\n        t * k + k \\<le> i - Suc 0 \\<longrightarrow>\n        0 < (t * k + k) mod k\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>i i1.\n       \\<lbrakk>s i \\<noteq> NoMsg; \\<And>t. event t = (t mod k = 0);\n        t0 = t * k; i \\<noteq> Suc (t * k); Suc (t * k) \\<le> i; m = s i;\n        0 < i mod k;\n        \\<forall>x.\n           Suc (t * k) \\<le> x \\<and> x \\<le> i - Suc 0 \\<longrightarrow>\n           0 < x mod k;\n        i1 = Suc i; Suc (i mod k) = k; i \\<le> t * k + k - Suc 0\\<rbrakk>\n       \\<Longrightarrow> (i < t * k + k - Suc 0 \\<longrightarrow>\n                          (\\<forall>x.\n                              Suc i \\<le> x \\<and>\n                              x \\<le> t * k + k - Suc 0 \\<longrightarrow>\n                              s x = NoMsg)) \\<and>\n                         (\\<not> i < t * k + k - Suc 0 \\<longrightarrow>\n                          i = t * k + k - Suc 0)\n 3. \\<And>i i1.\n       \\<lbrakk>s i \\<noteq> NoMsg; \\<And>t. event t = (t mod k = 0);\n        t0 = t * k; Suc 0 < k; i \\<noteq> Suc (t * k); Suc (t * k) \\<le> i;\n        m = s i; 0 < i mod k;\n        \\<forall>x.\n           Suc (t * k) \\<le> x \\<and> x \\<le> i - Suc 0 \\<longrightarrow>\n           0 < x mod k;\n        (if Suc (i mod k) = k then 0 else Suc (i mod k)) = 0; i1 = Suc i;\n        Suc (i mod k) \\<noteq> k\\<rbrakk>\n       \\<Longrightarrow> (i < t * k + k - Suc 0 \\<longrightarrow>\n                          (\\<forall>x.\n                              Suc i \\<le> x \\<and>\n                              x \\<le> t * k + k - Suc 0 \\<longrightarrow>\n                              s x = NoMsg)) \\<and>\n                         (\\<not> i < t * k + k - Suc 0 \\<longrightarrow>\n                          i = t * k + k - Suc 0)\n 4. \\<And>i i1.\n       \\<lbrakk>s i \\<noteq> NoMsg; \\<And>t. event t = (t mod k = 0);\n        t0 = t * k; Suc 0 < k; i \\<noteq> Suc (t * k); Suc (t * k) \\<le> i;\n        m = s i; 0 < i mod k;\n        \\<forall>x.\n           Suc (t * k) \\<le> x \\<and> x \\<le> i - Suc 0 \\<longrightarrow>\n           0 < x mod k;\n        i1 = Suc i \\<longrightarrow>\n        (if Suc (i mod k) = k then 0 else Suc (i mod k)) = 0;\n        i1 \\<noteq> Suc i \\<longrightarrow>\n        Suc i \\<le> i1 \\<and>\n        i1 mod k = 0 \\<and>\n        (\\<forall>x.\n            Suc i \\<le> x \\<and>\n            x \\<le> Suc (i + (i1 - Suc (Suc i))) \\<longrightarrow>\n            s x = NoMsg);\n        i1 \\<noteq> Suc i\\<rbrakk>\n       \\<Longrightarrow> (i < t * k + k - Suc 0 \\<longrightarrow>\n                          (\\<forall>x.\n                              Suc i \\<le> x \\<and>\n                              x \\<le> t * k + k - Suc 0 \\<longrightarrow>\n                              s x = NoMsg)) \\<and>\n                         (\\<not> i < t * k + k - Suc 0 \\<longrightarrow>\n                          i = t * k + k - Suc 0)", "apply (simp add: linorder_not_le)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>i i1.\n       \\<lbrakk>s i \\<noteq> NoMsg; \\<And>t. event t = (t mod k = 0);\n        t0 = t * k; i \\<noteq> Suc (t * k); Suc (t * k) \\<le> i; m = s i;\n        0 < i mod k; i1 = Suc i; Suc (i mod k) = k; t * k + k - Suc 0 < i;\n        i - Suc 0 < t * k + k\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>i i1.\n       \\<lbrakk>s i \\<noteq> NoMsg; \\<And>t. event t = (t mod k = 0);\n        t0 = t * k; i \\<noteq> Suc (t * k); Suc (t * k) \\<le> i; m = s i;\n        0 < i mod k;\n        \\<forall>x.\n           Suc (t * k) \\<le> x \\<and> x \\<le> i - Suc 0 \\<longrightarrow>\n           0 < x mod k;\n        i1 = Suc i; Suc (i mod k) = k; i \\<le> t * k + k - Suc 0\\<rbrakk>\n       \\<Longrightarrow> (i < t * k + k - Suc 0 \\<longrightarrow>\n                          (\\<forall>x.\n                              Suc i \\<le> x \\<and>\n                              x \\<le> t * k + k - Suc 0 \\<longrightarrow>\n                              s x = NoMsg)) \\<and>\n                         (\\<not> i < t * k + k - Suc 0 \\<longrightarrow>\n                          i = t * k + k - Suc 0)\n 3. \\<And>i i1.\n       \\<lbrakk>s i \\<noteq> NoMsg; \\<And>t. event t = (t mod k = 0);\n        t0 = t * k; Suc 0 < k; i \\<noteq> Suc (t * k); Suc (t * k) \\<le> i;\n        m = s i; 0 < i mod k;\n        \\<forall>x.\n           Suc (t * k) \\<le> x \\<and> x \\<le> i - Suc 0 \\<longrightarrow>\n           0 < x mod k;\n        (if Suc (i mod k) = k then 0 else Suc (i mod k)) = 0; i1 = Suc i;\n        Suc (i mod k) \\<noteq> k\\<rbrakk>\n       \\<Longrightarrow> (i < t * k + k - Suc 0 \\<longrightarrow>\n                          (\\<forall>x.\n                              Suc i \\<le> x \\<and>\n                              x \\<le> t * k + k - Suc 0 \\<longrightarrow>\n                              s x = NoMsg)) \\<and>\n                         (\\<not> i < t * k + k - Suc 0 \\<longrightarrow>\n                          i = t * k + k - Suc 0)\n 4. \\<And>i i1.\n       \\<lbrakk>s i \\<noteq> NoMsg; \\<And>t. event t = (t mod k = 0);\n        t0 = t * k; Suc 0 < k; i \\<noteq> Suc (t * k); Suc (t * k) \\<le> i;\n        m = s i; 0 < i mod k;\n        \\<forall>x.\n           Suc (t * k) \\<le> x \\<and> x \\<le> i - Suc 0 \\<longrightarrow>\n           0 < x mod k;\n        i1 = Suc i \\<longrightarrow>\n        (if Suc (i mod k) = k then 0 else Suc (i mod k)) = 0;\n        i1 \\<noteq> Suc i \\<longrightarrow>\n        Suc i \\<le> i1 \\<and>\n        i1 mod k = 0 \\<and>\n        (\\<forall>x.\n            Suc i \\<le> x \\<and>\n            x \\<le> Suc (i + (i1 - Suc (Suc i))) \\<longrightarrow>\n            s x = NoMsg);\n        i1 \\<noteq> Suc i\\<rbrakk>\n       \\<Longrightarrow> (i < t * k + k - Suc 0 \\<longrightarrow>\n                          (\\<forall>x.\n                              Suc i \\<le> x \\<and>\n                              x \\<le> t * k + k - Suc 0 \\<longrightarrow>\n                              s x = NoMsg)) \\<and>\n                         (\\<not> i < t * k + k - Suc 0 \\<longrightarrow>\n                          i = t * k + k - Suc 0)", "apply (drule pred_less_imp_le)+"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>i i1.\n       \\<lbrakk>s i \\<noteq> NoMsg; \\<And>t. event t = (t mod k = 0);\n        t0 = t * k; i \\<noteq> Suc (t * k); Suc (t * k) \\<le> i; m = s i;\n        0 < i mod k; i1 = Suc i; Suc (i mod k) = k; t * k + k \\<le> i;\n        i \\<le> t * k + k\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>i i1.\n       \\<lbrakk>s i \\<noteq> NoMsg; \\<And>t. event t = (t mod k = 0);\n        t0 = t * k; i \\<noteq> Suc (t * k); Suc (t * k) \\<le> i; m = s i;\n        0 < i mod k;\n        \\<forall>x.\n           Suc (t * k) \\<le> x \\<and> x \\<le> i - Suc 0 \\<longrightarrow>\n           0 < x mod k;\n        i1 = Suc i; Suc (i mod k) = k; i \\<le> t * k + k - Suc 0\\<rbrakk>\n       \\<Longrightarrow> (i < t * k + k - Suc 0 \\<longrightarrow>\n                          (\\<forall>x.\n                              Suc i \\<le> x \\<and>\n                              x \\<le> t * k + k - Suc 0 \\<longrightarrow>\n                              s x = NoMsg)) \\<and>\n                         (\\<not> i < t * k + k - Suc 0 \\<longrightarrow>\n                          i = t * k + k - Suc 0)\n 3. \\<And>i i1.\n       \\<lbrakk>s i \\<noteq> NoMsg; \\<And>t. event t = (t mod k = 0);\n        t0 = t * k; Suc 0 < k; i \\<noteq> Suc (t * k); Suc (t * k) \\<le> i;\n        m = s i; 0 < i mod k;\n        \\<forall>x.\n           Suc (t * k) \\<le> x \\<and> x \\<le> i - Suc 0 \\<longrightarrow>\n           0 < x mod k;\n        (if Suc (i mod k) = k then 0 else Suc (i mod k)) = 0; i1 = Suc i;\n        Suc (i mod k) \\<noteq> k\\<rbrakk>\n       \\<Longrightarrow> (i < t * k + k - Suc 0 \\<longrightarrow>\n                          (\\<forall>x.\n                              Suc i \\<le> x \\<and>\n                              x \\<le> t * k + k - Suc 0 \\<longrightarrow>\n                              s x = NoMsg)) \\<and>\n                         (\\<not> i < t * k + k - Suc 0 \\<longrightarrow>\n                          i = t * k + k - Suc 0)\n 4. \\<And>i i1.\n       \\<lbrakk>s i \\<noteq> NoMsg; \\<And>t. event t = (t mod k = 0);\n        t0 = t * k; Suc 0 < k; i \\<noteq> Suc (t * k); Suc (t * k) \\<le> i;\n        m = s i; 0 < i mod k;\n        \\<forall>x.\n           Suc (t * k) \\<le> x \\<and> x \\<le> i - Suc 0 \\<longrightarrow>\n           0 < x mod k;\n        i1 = Suc i \\<longrightarrow>\n        (if Suc (i mod k) = k then 0 else Suc (i mod k)) = 0;\n        i1 \\<noteq> Suc i \\<longrightarrow>\n        Suc i \\<le> i1 \\<and>\n        i1 mod k = 0 \\<and>\n        (\\<forall>x.\n            Suc i \\<le> x \\<and>\n            x \\<le> Suc (i + (i1 - Suc (Suc i))) \\<longrightarrow>\n            s x = NoMsg);\n        i1 \\<noteq> Suc i\\<rbrakk>\n       \\<Longrightarrow> (i < t * k + k - Suc 0 \\<longrightarrow>\n                          (\\<forall>x.\n                              Suc i \\<le> x \\<and>\n                              x \\<le> t * k + k - Suc 0 \\<longrightarrow>\n                              s x = NoMsg)) \\<and>\n                         (\\<not> i < t * k + k - Suc 0 \\<longrightarrow>\n                          i = t * k + k - Suc 0)", "apply clarsimp"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>i i1.\n       \\<lbrakk>s i \\<noteq> NoMsg; \\<And>t. event t = (t mod k = 0);\n        t0 = t * k; i \\<noteq> Suc (t * k); Suc (t * k) \\<le> i; m = s i;\n        0 < i mod k;\n        \\<forall>x.\n           Suc (t * k) \\<le> x \\<and> x \\<le> i - Suc 0 \\<longrightarrow>\n           0 < x mod k;\n        i1 = Suc i; Suc (i mod k) = k; i \\<le> t * k + k - Suc 0\\<rbrakk>\n       \\<Longrightarrow> (i < t * k + k - Suc 0 \\<longrightarrow>\n                          (\\<forall>x.\n                              Suc i \\<le> x \\<and>\n                              x \\<le> t * k + k - Suc 0 \\<longrightarrow>\n                              s x = NoMsg)) \\<and>\n                         (\\<not> i < t * k + k - Suc 0 \\<longrightarrow>\n                          i = t * k + k - Suc 0)\n 2. \\<And>i i1.\n       \\<lbrakk>s i \\<noteq> NoMsg; \\<And>t. event t = (t mod k = 0);\n        t0 = t * k; Suc 0 < k; i \\<noteq> Suc (t * k); Suc (t * k) \\<le> i;\n        m = s i; 0 < i mod k;\n        \\<forall>x.\n           Suc (t * k) \\<le> x \\<and> x \\<le> i - Suc 0 \\<longrightarrow>\n           0 < x mod k;\n        (if Suc (i mod k) = k then 0 else Suc (i mod k)) = 0; i1 = Suc i;\n        Suc (i mod k) \\<noteq> k\\<rbrakk>\n       \\<Longrightarrow> (i < t * k + k - Suc 0 \\<longrightarrow>\n                          (\\<forall>x.\n                              Suc i \\<le> x \\<and>\n                              x \\<le> t * k + k - Suc 0 \\<longrightarrow>\n                              s x = NoMsg)) \\<and>\n                         (\\<not> i < t * k + k - Suc 0 \\<longrightarrow>\n                          i = t * k + k - Suc 0)\n 3. \\<And>i i1.\n       \\<lbrakk>s i \\<noteq> NoMsg; \\<And>t. event t = (t mod k = 0);\n        t0 = t * k; Suc 0 < k; i \\<noteq> Suc (t * k); Suc (t * k) \\<le> i;\n        m = s i; 0 < i mod k;\n        \\<forall>x.\n           Suc (t * k) \\<le> x \\<and> x \\<le> i - Suc 0 \\<longrightarrow>\n           0 < x mod k;\n        i1 = Suc i \\<longrightarrow>\n        (if Suc (i mod k) = k then 0 else Suc (i mod k)) = 0;\n        i1 \\<noteq> Suc i \\<longrightarrow>\n        Suc i \\<le> i1 \\<and>\n        i1 mod k = 0 \\<and>\n        (\\<forall>x.\n            Suc i \\<le> x \\<and>\n            x \\<le> Suc (i + (i1 - Suc (Suc i))) \\<longrightarrow>\n            s x = NoMsg);\n        i1 \\<noteq> Suc i\\<rbrakk>\n       \\<Longrightarrow> (i < t * k + k - Suc 0 \\<longrightarrow>\n                          (\\<forall>x.\n                              Suc i \\<le> x \\<and>\n                              x \\<le> t * k + k - Suc 0 \\<longrightarrow>\n                              s x = NoMsg)) \\<and>\n                         (\\<not> i < t * k + k - Suc 0 \\<longrightarrow>\n                          i = t * k + k - Suc 0)", "apply simp"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>i i1.\n       \\<lbrakk>s i \\<noteq> NoMsg; \\<And>t. event t = (t mod k = 0);\n        t0 = t * k; i \\<noteq> Suc (t * k); Suc (t * k) \\<le> i; m = s i;\n        0 < i mod k;\n        \\<forall>x.\n           Suc (t * k) \\<le> x \\<and> x \\<le> i - Suc 0 \\<longrightarrow>\n           0 < x mod k;\n        i1 = Suc i; Suc (i mod k) = k; i \\<le> t * k + k - Suc 0\\<rbrakk>\n       \\<Longrightarrow> i < t * k + k - Suc 0 \\<longrightarrow>\n                         (\\<forall>x.\n                             Suc i \\<le> x \\<and>\n                             x \\<le> t * k + k - Suc 0 \\<longrightarrow>\n                             s x = NoMsg)\n 2. \\<And>i i1.\n       \\<lbrakk>s i \\<noteq> NoMsg; \\<And>t. event t = (t mod k = 0);\n        t0 = t * k; Suc 0 < k; i \\<noteq> Suc (t * k); Suc (t * k) \\<le> i;\n        m = s i; 0 < i mod k;\n        \\<forall>x.\n           Suc (t * k) \\<le> x \\<and> x \\<le> i - Suc 0 \\<longrightarrow>\n           0 < x mod k;\n        (if Suc (i mod k) = k then 0 else Suc (i mod k)) = 0; i1 = Suc i;\n        Suc (i mod k) \\<noteq> k\\<rbrakk>\n       \\<Longrightarrow> (i < t * k + k - Suc 0 \\<longrightarrow>\n                          (\\<forall>x.\n                              Suc i \\<le> x \\<and>\n                              x \\<le> t * k + k - Suc 0 \\<longrightarrow>\n                              s x = NoMsg)) \\<and>\n                         (\\<not> i < t * k + k - Suc 0 \\<longrightarrow>\n                          i = t * k + k - Suc 0)\n 3. \\<And>i i1.\n       \\<lbrakk>s i \\<noteq> NoMsg; \\<And>t. event t = (t mod k = 0);\n        t0 = t * k; Suc 0 < k; i \\<noteq> Suc (t * k); Suc (t * k) \\<le> i;\n        m = s i; 0 < i mod k;\n        \\<forall>x.\n           Suc (t * k) \\<le> x \\<and> x \\<le> i - Suc 0 \\<longrightarrow>\n           0 < x mod k;\n        i1 = Suc i \\<longrightarrow>\n        (if Suc (i mod k) = k then 0 else Suc (i mod k)) = 0;\n        i1 \\<noteq> Suc i \\<longrightarrow>\n        Suc i \\<le> i1 \\<and>\n        i1 mod k = 0 \\<and>\n        (\\<forall>x.\n            Suc i \\<le> x \\<and>\n            x \\<le> Suc (i + (i1 - Suc (Suc i))) \\<longrightarrow>\n            s x = NoMsg);\n        i1 \\<noteq> Suc i\\<rbrakk>\n       \\<Longrightarrow> (i < t * k + k - Suc 0 \\<longrightarrow>\n                          (\\<forall>x.\n                              Suc i \\<le> x \\<and>\n                              x \\<le> t * k + k - Suc 0 \\<longrightarrow>\n                              s x = NoMsg)) \\<and>\n                         (\\<not> i < t * k + k - Suc 0 \\<longrightarrow>\n                          i = t * k + k - Suc 0)", "apply (drule_tac x=i in le_imp_less_or_eq, erule disjE)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>i i1.\n       \\<lbrakk>s i \\<noteq> NoMsg; \\<And>t. event t = (t mod k = 0);\n        t0 = t * k; i \\<noteq> Suc (t * k); Suc (t * k) \\<le> i; m = s i;\n        0 < i mod k;\n        \\<forall>x.\n           Suc (t * k) \\<le> x \\<and> x \\<le> i - Suc 0 \\<longrightarrow>\n           0 < x mod k;\n        i1 = Suc i; Suc (i mod k) = k; i < t * k + k - Suc 0\\<rbrakk>\n       \\<Longrightarrow> i < t * k + k - Suc 0 \\<longrightarrow>\n                         (\\<forall>x.\n                             Suc i \\<le> x \\<and>\n                             x \\<le> t * k + k - Suc 0 \\<longrightarrow>\n                             s x = NoMsg)\n 2. \\<And>i i1.\n       \\<lbrakk>s i \\<noteq> NoMsg; \\<And>t. event t = (t mod k = 0);\n        t0 = t * k; i \\<noteq> Suc (t * k); Suc (t * k) \\<le> i; m = s i;\n        0 < i mod k;\n        \\<forall>x.\n           Suc (t * k) \\<le> x \\<and> x \\<le> i - Suc 0 \\<longrightarrow>\n           0 < x mod k;\n        i1 = Suc i; Suc (i mod k) = k; i = t * k + k - Suc 0\\<rbrakk>\n       \\<Longrightarrow> i < t * k + k - Suc 0 \\<longrightarrow>\n                         (\\<forall>x.\n                             Suc i \\<le> x \\<and>\n                             x \\<le> t * k + k - Suc 0 \\<longrightarrow>\n                             s x = NoMsg)\n 3. \\<And>i i1.\n       \\<lbrakk>s i \\<noteq> NoMsg; \\<And>t. event t = (t mod k = 0);\n        t0 = t * k; Suc 0 < k; i \\<noteq> Suc (t * k); Suc (t * k) \\<le> i;\n        m = s i; 0 < i mod k;\n        \\<forall>x.\n           Suc (t * k) \\<le> x \\<and> x \\<le> i - Suc 0 \\<longrightarrow>\n           0 < x mod k;\n        (if Suc (i mod k) = k then 0 else Suc (i mod k)) = 0; i1 = Suc i;\n        Suc (i mod k) \\<noteq> k\\<rbrakk>\n       \\<Longrightarrow> (i < t * k + k - Suc 0 \\<longrightarrow>\n                          (\\<forall>x.\n                              Suc i \\<le> x \\<and>\n                              x \\<le> t * k + k - Suc 0 \\<longrightarrow>\n                              s x = NoMsg)) \\<and>\n                         (\\<not> i < t * k + k - Suc 0 \\<longrightarrow>\n                          i = t * k + k - Suc 0)\n 4. \\<And>i i1.\n       \\<lbrakk>s i \\<noteq> NoMsg; \\<And>t. event t = (t mod k = 0);\n        t0 = t * k; Suc 0 < k; i \\<noteq> Suc (t * k); Suc (t * k) \\<le> i;\n        m = s i; 0 < i mod k;\n        \\<forall>x.\n           Suc (t * k) \\<le> x \\<and> x \\<le> i - Suc 0 \\<longrightarrow>\n           0 < x mod k;\n        i1 = Suc i \\<longrightarrow>\n        (if Suc (i mod k) = k then 0 else Suc (i mod k)) = 0;\n        i1 \\<noteq> Suc i \\<longrightarrow>\n        Suc i \\<le> i1 \\<and>\n        i1 mod k = 0 \\<and>\n        (\\<forall>x.\n            Suc i \\<le> x \\<and>\n            x \\<le> Suc (i + (i1 - Suc (Suc i))) \\<longrightarrow>\n            s x = NoMsg);\n        i1 \\<noteq> Suc i\\<rbrakk>\n       \\<Longrightarrow> (i < t * k + k - Suc 0 \\<longrightarrow>\n                          (\\<forall>x.\n                              Suc i \\<le> x \\<and>\n                              x \\<le> t * k + k - Suc 0 \\<longrightarrow>\n                              s x = NoMsg)) \\<and>\n                         (\\<not> i < t * k + k - Suc 0 \\<longrightarrow>\n                          i = t * k + k - Suc 0)", "apply simp"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>i i1.\n       \\<lbrakk>s i \\<noteq> NoMsg; \\<And>t. event t = (t mod k = 0);\n        t0 = t * k; i \\<noteq> Suc (t * k); Suc (t * k) \\<le> i; m = s i;\n        0 < i mod k;\n        \\<forall>x.\n           Suc (t * k) \\<le> x \\<and> x \\<le> i - Suc 0 \\<longrightarrow>\n           0 < x mod k;\n        i1 = Suc i; Suc (i mod k) = k; i < t * k + k - Suc 0\\<rbrakk>\n       \\<Longrightarrow> \\<forall>x.\n                            Suc i \\<le> x \\<and>\n                            x \\<le> t * k + k - Suc 0 \\<longrightarrow>\n                            s x = NoMsg\n 2. \\<And>i i1.\n       \\<lbrakk>s i \\<noteq> NoMsg; \\<And>t. event t = (t mod k = 0);\n        t0 = t * k; i \\<noteq> Suc (t * k); Suc (t * k) \\<le> i; m = s i;\n        0 < i mod k;\n        \\<forall>x.\n           Suc (t * k) \\<le> x \\<and> x \\<le> i - Suc 0 \\<longrightarrow>\n           0 < x mod k;\n        i1 = Suc i; Suc (i mod k) = k; i = t * k + k - Suc 0\\<rbrakk>\n       \\<Longrightarrow> i < t * k + k - Suc 0 \\<longrightarrow>\n                         (\\<forall>x.\n                             Suc i \\<le> x \\<and>\n                             x \\<le> t * k + k - Suc 0 \\<longrightarrow>\n                             s x = NoMsg)\n 3. \\<And>i i1.\n       \\<lbrakk>s i \\<noteq> NoMsg; \\<And>t. event t = (t mod k = 0);\n        t0 = t * k; Suc 0 < k; i \\<noteq> Suc (t * k); Suc (t * k) \\<le> i;\n        m = s i; 0 < i mod k;\n        \\<forall>x.\n           Suc (t * k) \\<le> x \\<and> x \\<le> i - Suc 0 \\<longrightarrow>\n           0 < x mod k;\n        (if Suc (i mod k) = k then 0 else Suc (i mod k)) = 0; i1 = Suc i;\n        Suc (i mod k) \\<noteq> k\\<rbrakk>\n       \\<Longrightarrow> (i < t * k + k - Suc 0 \\<longrightarrow>\n                          (\\<forall>x.\n                              Suc i \\<le> x \\<and>\n                              x \\<le> t * k + k - Suc 0 \\<longrightarrow>\n                              s x = NoMsg)) \\<and>\n                         (\\<not> i < t * k + k - Suc 0 \\<longrightarrow>\n                          i = t * k + k - Suc 0)\n 4. \\<And>i i1.\n       \\<lbrakk>s i \\<noteq> NoMsg; \\<And>t. event t = (t mod k = 0);\n        t0 = t * k; Suc 0 < k; i \\<noteq> Suc (t * k); Suc (t * k) \\<le> i;\n        m = s i; 0 < i mod k;\n        \\<forall>x.\n           Suc (t * k) \\<le> x \\<and> x \\<le> i - Suc 0 \\<longrightarrow>\n           0 < x mod k;\n        i1 = Suc i \\<longrightarrow>\n        (if Suc (i mod k) = k then 0 else Suc (i mod k)) = 0;\n        i1 \\<noteq> Suc i \\<longrightarrow>\n        Suc i \\<le> i1 \\<and>\n        i1 mod k = 0 \\<and>\n        (\\<forall>x.\n            Suc i \\<le> x \\<and>\n            x \\<le> Suc (i + (i1 - Suc (Suc i))) \\<longrightarrow>\n            s x = NoMsg);\n        i1 \\<noteq> Suc i\\<rbrakk>\n       \\<Longrightarrow> (i < t * k + k - Suc 0 \\<longrightarrow>\n                          (\\<forall>x.\n                              Suc i \\<le> x \\<and>\n                              x \\<le> t * k + k - Suc 0 \\<longrightarrow>\n                              s x = NoMsg)) \\<and>\n                         (\\<not> i < t * k + k - Suc 0 \\<longrightarrow>\n                          i = t * k + k - Suc 0)", "apply (cut_tac b=\"k - Suc (Suc 0)\" and m=k and k=t and a=\"Suc 0\" and n=i in between_imp_mod_between)"], ["proof (prove)\ngoal (7 subgoals):\n 1. \\<And>i i1.\n       \\<lbrakk>s i \\<noteq> NoMsg; \\<And>t. event t = (t mod k = 0);\n        t0 = t * k; i \\<noteq> Suc (t * k); Suc (t * k) \\<le> i; m = s i;\n        0 < i mod k;\n        \\<forall>x.\n           Suc (t * k) \\<le> x \\<and> x \\<le> i - Suc 0 \\<longrightarrow>\n           0 < x mod k;\n        i1 = Suc i; Suc (i mod k) = k; i < t * k + k - Suc 0\\<rbrakk>\n       \\<Longrightarrow> k - Suc (Suc 0) < k\n 2. \\<And>i i1.\n       \\<lbrakk>s i \\<noteq> NoMsg; \\<And>t. event t = (t mod k = 0);\n        t0 = t * k; i \\<noteq> Suc (t * k); Suc (t * k) \\<le> i; m = s i;\n        0 < i mod k;\n        \\<forall>x.\n           Suc (t * k) \\<le> x \\<and> x \\<le> i - Suc 0 \\<longrightarrow>\n           0 < x mod k;\n        i1 = Suc i; Suc (i mod k) = k; i < t * k + k - Suc 0\\<rbrakk>\n       \\<Longrightarrow> k * t + Suc 0 \\<le> i\n 3. \\<And>i i1.\n       \\<lbrakk>s i \\<noteq> NoMsg; \\<And>t. event t = (t mod k = 0);\n        t0 = t * k; i \\<noteq> Suc (t * k); Suc (t * k) \\<le> i; m = s i;\n        0 < i mod k;\n        \\<forall>x.\n           Suc (t * k) \\<le> x \\<and> x \\<le> i - Suc 0 \\<longrightarrow>\n           0 < x mod k;\n        i1 = Suc i; Suc (i mod k) = k; i < t * k + k - Suc 0\\<rbrakk>\n       \\<Longrightarrow> i \\<le> k * t + (k - Suc (Suc 0))\n 4. \\<And>i i1.\n       \\<lbrakk>s i \\<noteq> NoMsg; \\<And>t. event t = (t mod k = 0);\n        t0 = t * k; i \\<noteq> Suc (t * k); Suc (t * k) \\<le> i; m = s i;\n        0 < i mod k;\n        \\<forall>x.\n           Suc (t * k) \\<le> x \\<and> x \\<le> i - Suc 0 \\<longrightarrow>\n           0 < x mod k;\n        i1 = Suc i; Suc (i mod k) = k; i < t * k + k - Suc 0;\n        Suc 0 \\<le> i mod k \\<and> i mod k \\<le> k - Suc (Suc 0)\\<rbrakk>\n       \\<Longrightarrow> \\<forall>x.\n                            Suc i \\<le> x \\<and>\n                            x \\<le> t * k + k - Suc 0 \\<longrightarrow>\n                            s x = NoMsg\n 5. \\<And>i i1.\n       \\<lbrakk>s i \\<noteq> NoMsg; \\<And>t. event t = (t mod k = 0);\n        t0 = t * k; i \\<noteq> Suc (t * k); Suc (t * k) \\<le> i; m = s i;\n        0 < i mod k;\n        \\<forall>x.\n           Suc (t * k) \\<le> x \\<and> x \\<le> i - Suc 0 \\<longrightarrow>\n           0 < x mod k;\n        i1 = Suc i; Suc (i mod k) = k; i = t * k + k - Suc 0\\<rbrakk>\n       \\<Longrightarrow> i < t * k + k - Suc 0 \\<longrightarrow>\n                         (\\<forall>x.\n                             Suc i \\<le> x \\<and>\n                             x \\<le> t * k + k - Suc 0 \\<longrightarrow>\n                             s x = NoMsg)\n 6. \\<And>i i1.\n       \\<lbrakk>s i \\<noteq> NoMsg; \\<And>t. event t = (t mod k = 0);\n        t0 = t * k; Suc 0 < k; i \\<noteq> Suc (t * k); Suc (t * k) \\<le> i;\n        m = s i; 0 < i mod k;\n        \\<forall>x.\n           Suc (t * k) \\<le> x \\<and> x \\<le> i - Suc 0 \\<longrightarrow>\n           0 < x mod k;\n        (if Suc (i mod k) = k then 0 else Suc (i mod k)) = 0; i1 = Suc i;\n        Suc (i mod k) \\<noteq> k\\<rbrakk>\n       \\<Longrightarrow> (i < t * k + k - Suc 0 \\<longrightarrow>\n                          (\\<forall>x.\n                              Suc i \\<le> x \\<and>\n                              x \\<le> t * k + k - Suc 0 \\<longrightarrow>\n                              s x = NoMsg)) \\<and>\n                         (\\<not> i < t * k + k - Suc 0 \\<longrightarrow>\n                          i = t * k + k - Suc 0)\n 7. \\<And>i i1.\n       \\<lbrakk>s i \\<noteq> NoMsg; \\<And>t. event t = (t mod k = 0);\n        t0 = t * k; Suc 0 < k; i \\<noteq> Suc (t * k); Suc (t * k) \\<le> i;\n        m = s i; 0 < i mod k;\n        \\<forall>x.\n           Suc (t * k) \\<le> x \\<and> x \\<le> i - Suc 0 \\<longrightarrow>\n           0 < x mod k;\n        i1 = Suc i \\<longrightarrow>\n        (if Suc (i mod k) = k then 0 else Suc (i mod k)) = 0;\n        i1 \\<noteq> Suc i \\<longrightarrow>\n        Suc i \\<le> i1 \\<and>\n        i1 mod k = 0 \\<and>\n        (\\<forall>x.\n            Suc i \\<le> x \\<and>\n            x \\<le> Suc (i + (i1 - Suc (Suc i))) \\<longrightarrow>\n            s x = NoMsg);\n        i1 \\<noteq> Suc i\\<rbrakk>\n       \\<Longrightarrow> (i < t * k + k - Suc 0 \\<longrightarrow>\n                          (\\<forall>x.\n                              Suc i \\<le> x \\<and>\n                              x \\<le> t * k + k - Suc 0 \\<longrightarrow>\n                              s x = NoMsg)) \\<and>\n                         (\\<not> i < t * k + k - Suc 0 \\<longrightarrow>\n                          i = t * k + k - Suc 0)", "apply (simp add: mult.commute[of k])+"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>i i1.\n       \\<lbrakk>s i \\<noteq> NoMsg; \\<And>t. event t = (t mod k = 0);\n        t0 = t * k; i \\<noteq> Suc (t * k); Suc (t * k) \\<le> i; m = s i;\n        \\<forall>x.\n           Suc (t * k) \\<le> x \\<and> x \\<le> i - Suc 0 \\<longrightarrow>\n           0 < x mod k;\n        i1 = Suc i; Suc (i mod k) = k; i < t * k + k - Suc 0;\n        Suc 0 \\<le> i mod k \\<and> i mod k \\<le> k - Suc (Suc 0)\\<rbrakk>\n       \\<Longrightarrow> \\<forall>x.\n                            Suc i \\<le> x \\<and>\n                            x \\<le> t * k + k - Suc 0 \\<longrightarrow>\n                            s x = NoMsg\n 2. \\<And>i i1.\n       \\<lbrakk>s i \\<noteq> NoMsg; \\<And>t. event t = (t mod k = 0);\n        t0 = t * k; i \\<noteq> Suc (t * k); Suc (t * k) \\<le> i; m = s i;\n        0 < i mod k;\n        \\<forall>x.\n           Suc (t * k) \\<le> x \\<and> x \\<le> i - Suc 0 \\<longrightarrow>\n           0 < x mod k;\n        i1 = Suc i; Suc (i mod k) = k; i = t * k + k - Suc 0\\<rbrakk>\n       \\<Longrightarrow> i < t * k + k - Suc 0 \\<longrightarrow>\n                         (\\<forall>x.\n                             Suc i \\<le> x \\<and>\n                             x \\<le> t * k + k - Suc 0 \\<longrightarrow>\n                             s x = NoMsg)\n 3. \\<And>i i1.\n       \\<lbrakk>s i \\<noteq> NoMsg; \\<And>t. event t = (t mod k = 0);\n        t0 = t * k; Suc 0 < k; i \\<noteq> Suc (t * k); Suc (t * k) \\<le> i;\n        m = s i; 0 < i mod k;\n        \\<forall>x.\n           Suc (t * k) \\<le> x \\<and> x \\<le> i - Suc 0 \\<longrightarrow>\n           0 < x mod k;\n        (if Suc (i mod k) = k then 0 else Suc (i mod k)) = 0; i1 = Suc i;\n        Suc (i mod k) \\<noteq> k\\<rbrakk>\n       \\<Longrightarrow> (i < t * k + k - Suc 0 \\<longrightarrow>\n                          (\\<forall>x.\n                              Suc i \\<le> x \\<and>\n                              x \\<le> t * k + k - Suc 0 \\<longrightarrow>\n                              s x = NoMsg)) \\<and>\n                         (\\<not> i < t * k + k - Suc 0 \\<longrightarrow>\n                          i = t * k + k - Suc 0)\n 4. \\<And>i i1.\n       \\<lbrakk>s i \\<noteq> NoMsg; \\<And>t. event t = (t mod k = 0);\n        t0 = t * k; Suc 0 < k; i \\<noteq> Suc (t * k); Suc (t * k) \\<le> i;\n        m = s i; 0 < i mod k;\n        \\<forall>x.\n           Suc (t * k) \\<le> x \\<and> x \\<le> i - Suc 0 \\<longrightarrow>\n           0 < x mod k;\n        i1 = Suc i \\<longrightarrow>\n        (if Suc (i mod k) = k then 0 else Suc (i mod k)) = 0;\n        i1 \\<noteq> Suc i \\<longrightarrow>\n        Suc i \\<le> i1 \\<and>\n        i1 mod k = 0 \\<and>\n        (\\<forall>x.\n            Suc i \\<le> x \\<and>\n            x \\<le> Suc (i + (i1 - Suc (Suc i))) \\<longrightarrow>\n            s x = NoMsg);\n        i1 \\<noteq> Suc i\\<rbrakk>\n       \\<Longrightarrow> (i < t * k + k - Suc 0 \\<longrightarrow>\n                          (\\<forall>x.\n                              Suc i \\<le> x \\<and>\n                              x \\<le> t * k + k - Suc 0 \\<longrightarrow>\n                              s x = NoMsg)) \\<and>\n                         (\\<not> i < t * k + k - Suc 0 \\<longrightarrow>\n                          i = t * k + k - Suc 0)", "apply (clarsimp elim!: dvdE)+"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i ka.\n       \\<lbrakk>s i \\<noteq> NoMsg; \\<And>t. event t = (t mod k = 0);\n        t0 = t * k; Suc 0 < k; i \\<noteq> Suc (t * k); Suc (t * k) \\<le> i;\n        m = s i; 0 < i mod k;\n        \\<forall>x.\n           Suc (t * k) \\<le> x \\<and> x \\<le> i - Suc 0 \\<longrightarrow>\n           0 < x mod k;\n        k * ka \\<noteq> Suc i; Suc i \\<le> k * ka;\n        \\<forall>x.\n           Suc i \\<le> x \\<and> x \\<le> Suc (k * ka - 2) \\<longrightarrow>\n           s x = NoMsg\\<rbrakk>\n       \\<Longrightarrow> (i < t * k + k - Suc 0 \\<longrightarrow>\n                          (\\<forall>x.\n                              Suc i \\<le> x \\<and>\n                              x \\<le> t * k + k - Suc 0 \\<longrightarrow>\n                              s x = NoMsg)) \\<and>\n                         (\\<not> i < t * k + k - Suc 0 \\<longrightarrow>\n                          i = t * k + k - Suc 0)", "apply (rename_tac q)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i q.\n       \\<lbrakk>s i \\<noteq> NoMsg; \\<And>t. event t = (t mod k = 0);\n        t0 = t * k; Suc 0 < k; i \\<noteq> Suc (t * k); Suc (t * k) \\<le> i;\n        m = s i; 0 < i mod k;\n        \\<forall>x.\n           Suc (t * k) \\<le> x \\<and> x \\<le> i - Suc 0 \\<longrightarrow>\n           0 < x mod k;\n        k * q \\<noteq> Suc i; Suc i \\<le> k * q;\n        \\<forall>x.\n           Suc i \\<le> x \\<and> x \\<le> Suc (k * q - 2) \\<longrightarrow>\n           s x = NoMsg\\<rbrakk>\n       \\<Longrightarrow> (i < t * k + k - Suc 0 \\<longrightarrow>\n                          (\\<forall>x.\n                              Suc i \\<le> x \\<and>\n                              x \\<le> t * k + k - Suc 0 \\<longrightarrow>\n                              s x = NoMsg)) \\<and>\n                         (\\<not> i < t * k + k - Suc 0 \\<longrightarrow>\n                          i = t * k + k - Suc 0)", "apply (simp add: mult.commute[of k])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i q.\n       \\<lbrakk>s i \\<noteq> NoMsg; \\<And>t. event t = (t mod k = 0);\n        t0 = t * k; Suc 0 < k; i \\<noteq> Suc (t * k); Suc (t * k) \\<le> i;\n        m = s i; 0 < i mod k;\n        \\<forall>x.\n           Suc (t * k) \\<le> x \\<and> x \\<le> i - Suc 0 \\<longrightarrow>\n           0 < x mod k;\n        q * k \\<noteq> Suc i; Suc i \\<le> q * k;\n        \\<forall>x.\n           Suc i \\<le> x \\<and> x \\<le> Suc (q * k - 2) \\<longrightarrow>\n           s x = NoMsg\\<rbrakk>\n       \\<Longrightarrow> (i < t * k + k - Suc 0 \\<longrightarrow>\n                          (\\<forall>x.\n                              Suc i \\<le> x \\<and>\n                              x \\<le> t * k + k - Suc 0 \\<longrightarrow>\n                              s x = NoMsg)) \\<and>\n                         (\\<not> i < t * k + k - Suc 0 \\<longrightarrow>\n                          i = t * k + k - Suc 0)", "apply (subgoal_tac \"Suc t \\<le> q\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>i q.\n       \\<lbrakk>s i \\<noteq> NoMsg; \\<And>t. event t = (t mod k = 0);\n        t0 = t * k; Suc 0 < k; i \\<noteq> Suc (t * k); Suc (t * k) \\<le> i;\n        m = s i; 0 < i mod k;\n        \\<forall>x.\n           Suc (t * k) \\<le> x \\<and> x \\<le> i - Suc 0 \\<longrightarrow>\n           0 < x mod k;\n        q * k \\<noteq> Suc i; Suc i \\<le> q * k;\n        \\<forall>x.\n           Suc i \\<le> x \\<and> x \\<le> Suc (q * k - 2) \\<longrightarrow>\n           s x = NoMsg;\n        Suc t \\<le> q\\<rbrakk>\n       \\<Longrightarrow> (i < t * k + k - Suc 0 \\<longrightarrow>\n                          (\\<forall>x.\n                              Suc i \\<le> x \\<and>\n                              x \\<le> t * k + k - Suc 0 \\<longrightarrow>\n                              s x = NoMsg)) \\<and>\n                         (\\<not> i < t * k + k - Suc 0 \\<longrightarrow>\n                          i = t * k + k - Suc 0)\n 2. \\<And>i q.\n       \\<lbrakk>s i \\<noteq> NoMsg; \\<And>t. event t = (t mod k = 0);\n        t0 = t * k; Suc 0 < k; i \\<noteq> Suc (t * k); Suc (t * k) \\<le> i;\n        m = s i; 0 < i mod k;\n        \\<forall>x.\n           Suc (t * k) \\<le> x \\<and> x \\<le> i - Suc 0 \\<longrightarrow>\n           0 < x mod k;\n        q * k \\<noteq> Suc i; Suc i \\<le> q * k;\n        \\<forall>x.\n           Suc i \\<le> x \\<and> x \\<le> Suc (q * k - 2) \\<longrightarrow>\n           s x = NoMsg\\<rbrakk>\n       \\<Longrightarrow> Suc t \\<le> q", "prefer 2"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>i q.\n       \\<lbrakk>s i \\<noteq> NoMsg; \\<And>t. event t = (t mod k = 0);\n        t0 = t * k; Suc 0 < k; i \\<noteq> Suc (t * k); Suc (t * k) \\<le> i;\n        m = s i; 0 < i mod k;\n        \\<forall>x.\n           Suc (t * k) \\<le> x \\<and> x \\<le> i - Suc 0 \\<longrightarrow>\n           0 < x mod k;\n        q * k \\<noteq> Suc i; Suc i \\<le> q * k;\n        \\<forall>x.\n           Suc i \\<le> x \\<and> x \\<le> Suc (q * k - 2) \\<longrightarrow>\n           s x = NoMsg\\<rbrakk>\n       \\<Longrightarrow> Suc t \\<le> q\n 2. \\<And>i q.\n       \\<lbrakk>s i \\<noteq> NoMsg; \\<And>t. event t = (t mod k = 0);\n        t0 = t * k; Suc 0 < k; i \\<noteq> Suc (t * k); Suc (t * k) \\<le> i;\n        m = s i; 0 < i mod k;\n        \\<forall>x.\n           Suc (t * k) \\<le> x \\<and> x \\<le> i - Suc 0 \\<longrightarrow>\n           0 < x mod k;\n        q * k \\<noteq> Suc i; Suc i \\<le> q * k;\n        \\<forall>x.\n           Suc i \\<le> x \\<and> x \\<le> Suc (q * k - 2) \\<longrightarrow>\n           s x = NoMsg;\n        Suc t \\<le> q\\<rbrakk>\n       \\<Longrightarrow> (i < t * k + k - Suc 0 \\<longrightarrow>\n                          (\\<forall>x.\n                              Suc i \\<le> x \\<and>\n                              x \\<le> t * k + k - Suc 0 \\<longrightarrow>\n                              s x = NoMsg)) \\<and>\n                         (\\<not> i < t * k + k - Suc 0 \\<longrightarrow>\n                          i = t * k + k - Suc 0)", "apply (rule Suc_leI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>i q.\n       \\<lbrakk>s i \\<noteq> NoMsg; \\<And>t. event t = (t mod k = 0);\n        t0 = t * k; Suc 0 < k; i \\<noteq> Suc (t * k); Suc (t * k) \\<le> i;\n        m = s i; 0 < i mod k;\n        \\<forall>x.\n           Suc (t * k) \\<le> x \\<and> x \\<le> i - Suc 0 \\<longrightarrow>\n           0 < x mod k;\n        q * k \\<noteq> Suc i; Suc i \\<le> q * k;\n        \\<forall>x.\n           Suc i \\<le> x \\<and> x \\<le> Suc (q * k - 2) \\<longrightarrow>\n           s x = NoMsg\\<rbrakk>\n       \\<Longrightarrow> t < q\n 2. \\<And>i q.\n       \\<lbrakk>s i \\<noteq> NoMsg; \\<And>t. event t = (t mod k = 0);\n        t0 = t * k; Suc 0 < k; i \\<noteq> Suc (t * k); Suc (t * k) \\<le> i;\n        m = s i; 0 < i mod k;\n        \\<forall>x.\n           Suc (t * k) \\<le> x \\<and> x \\<le> i - Suc 0 \\<longrightarrow>\n           0 < x mod k;\n        q * k \\<noteq> Suc i; Suc i \\<le> q * k;\n        \\<forall>x.\n           Suc i \\<le> x \\<and> x \\<le> Suc (q * k - 2) \\<longrightarrow>\n           s x = NoMsg;\n        Suc t \\<le> q\\<rbrakk>\n       \\<Longrightarrow> (i < t * k + k - Suc 0 \\<longrightarrow>\n                          (\\<forall>x.\n                              Suc i \\<le> x \\<and>\n                              x \\<le> t * k + k - Suc 0 \\<longrightarrow>\n                              s x = NoMsg)) \\<and>\n                         (\\<not> i < t * k + k - Suc 0 \\<longrightarrow>\n                          i = t * k + k - Suc 0)", "apply (rule mult_less_cancel2[where k=k, THEN iffD1, THEN conjunct2])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>i q.\n       \\<lbrakk>s i \\<noteq> NoMsg; \\<And>t. event t = (t mod k = 0);\n        t0 = t * k; Suc 0 < k; i \\<noteq> Suc (t * k); Suc (t * k) \\<le> i;\n        m = s i; 0 < i mod k;\n        \\<forall>x.\n           Suc (t * k) \\<le> x \\<and> x \\<le> i - Suc 0 \\<longrightarrow>\n           0 < x mod k;\n        q * k \\<noteq> Suc i; Suc i \\<le> q * k;\n        \\<forall>x.\n           Suc i \\<le> x \\<and> x \\<le> Suc (q * k - 2) \\<longrightarrow>\n           s x = NoMsg\\<rbrakk>\n       \\<Longrightarrow> t * k < q * k\n 2. \\<And>i q.\n       \\<lbrakk>s i \\<noteq> NoMsg; \\<And>t. event t = (t mod k = 0);\n        t0 = t * k; Suc 0 < k; i \\<noteq> Suc (t * k); Suc (t * k) \\<le> i;\n        m = s i; 0 < i mod k;\n        \\<forall>x.\n           Suc (t * k) \\<le> x \\<and> x \\<le> i - Suc 0 \\<longrightarrow>\n           0 < x mod k;\n        q * k \\<noteq> Suc i; Suc i \\<le> q * k;\n        \\<forall>x.\n           Suc i \\<le> x \\<and> x \\<le> Suc (q * k - 2) \\<longrightarrow>\n           s x = NoMsg;\n        Suc t \\<le> q\\<rbrakk>\n       \\<Longrightarrow> (i < t * k + k - Suc 0 \\<longrightarrow>\n                          (\\<forall>x.\n                              Suc i \\<le> x \\<and>\n                              x \\<le> t * k + k - Suc 0 \\<longrightarrow>\n                              s x = NoMsg)) \\<and>\n                         (\\<not> i < t * k + k - Suc 0 \\<longrightarrow>\n                          i = t * k + k - Suc 0)", "apply (rule Suc_le_lessD)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>i q.\n       \\<lbrakk>s i \\<noteq> NoMsg; \\<And>t. event t = (t mod k = 0);\n        t0 = t * k; Suc 0 < k; i \\<noteq> Suc (t * k); Suc (t * k) \\<le> i;\n        m = s i; 0 < i mod k;\n        \\<forall>x.\n           Suc (t * k) \\<le> x \\<and> x \\<le> i - Suc 0 \\<longrightarrow>\n           0 < x mod k;\n        q * k \\<noteq> Suc i; Suc i \\<le> q * k;\n        \\<forall>x.\n           Suc i \\<le> x \\<and> x \\<le> Suc (q * k - 2) \\<longrightarrow>\n           s x = NoMsg\\<rbrakk>\n       \\<Longrightarrow> Suc (t * k) \\<le> q * k\n 2. \\<And>i q.\n       \\<lbrakk>s i \\<noteq> NoMsg; \\<And>t. event t = (t mod k = 0);\n        t0 = t * k; Suc 0 < k; i \\<noteq> Suc (t * k); Suc (t * k) \\<le> i;\n        m = s i; 0 < i mod k;\n        \\<forall>x.\n           Suc (t * k) \\<le> x \\<and> x \\<le> i - Suc 0 \\<longrightarrow>\n           0 < x mod k;\n        q * k \\<noteq> Suc i; Suc i \\<le> q * k;\n        \\<forall>x.\n           Suc i \\<le> x \\<and> x \\<le> Suc (q * k - 2) \\<longrightarrow>\n           s x = NoMsg;\n        Suc t \\<le> q\\<rbrakk>\n       \\<Longrightarrow> (i < t * k + k - Suc 0 \\<longrightarrow>\n                          (\\<forall>x.\n                              Suc i \\<le> x \\<and>\n                              x \\<le> t * k + k - Suc 0 \\<longrightarrow>\n                              s x = NoMsg)) \\<and>\n                         (\\<not> i < t * k + k - Suc 0 \\<longrightarrow>\n                          i = t * k + k - Suc 0)", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i q.\n       \\<lbrakk>s i \\<noteq> NoMsg; \\<And>t. event t = (t mod k = 0);\n        t0 = t * k; Suc 0 < k; i \\<noteq> Suc (t * k); Suc (t * k) \\<le> i;\n        m = s i; 0 < i mod k;\n        \\<forall>x.\n           Suc (t * k) \\<le> x \\<and> x \\<le> i - Suc 0 \\<longrightarrow>\n           0 < x mod k;\n        q * k \\<noteq> Suc i; Suc i \\<le> q * k;\n        \\<forall>x.\n           Suc i \\<le> x \\<and> x \\<le> Suc (q * k - 2) \\<longrightarrow>\n           s x = NoMsg;\n        Suc t \\<le> q\\<rbrakk>\n       \\<Longrightarrow> (i < t * k + k - Suc 0 \\<longrightarrow>\n                          (\\<forall>x.\n                              Suc i \\<le> x \\<and>\n                              x \\<le> t * k + k - Suc 0 \\<longrightarrow>\n                              s x = NoMsg)) \\<and>\n                         (\\<not> i < t * k + k - Suc 0 \\<longrightarrow>\n                          i = t * k + k - Suc 0)", "apply (frule mult_le_mono1[of \"Suc t\" _ k])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i q.\n       \\<lbrakk>s i \\<noteq> NoMsg; \\<And>t. event t = (t mod k = 0);\n        t0 = t * k; Suc 0 < k; i \\<noteq> Suc (t * k); Suc (t * k) \\<le> i;\n        m = s i; 0 < i mod k;\n        \\<forall>x.\n           Suc (t * k) \\<le> x \\<and> x \\<le> i - Suc 0 \\<longrightarrow>\n           0 < x mod k;\n        q * k \\<noteq> Suc i; Suc i \\<le> q * k;\n        \\<forall>x.\n           Suc i \\<le> x \\<and> x \\<le> Suc (q * k - 2) \\<longrightarrow>\n           s x = NoMsg;\n        Suc t \\<le> q; Suc t * k \\<le> q * k\\<rbrakk>\n       \\<Longrightarrow> (i < t * k + k - Suc 0 \\<longrightarrow>\n                          (\\<forall>x.\n                              Suc i \\<le> x \\<and>\n                              x \\<le> t * k + k - Suc 0 \\<longrightarrow>\n                              s x = NoMsg)) \\<and>\n                         (\\<not> i < t * k + k - Suc 0 \\<longrightarrow>\n                          i = t * k + k - Suc 0)", "apply (simp add: add.commute[of k])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i q.\n       \\<lbrakk>s i \\<noteq> NoMsg; \\<And>t. event t = (t mod k = 0);\n        t0 = t * k; Suc 0 < k; i \\<noteq> Suc (t * k); Suc (t * k) \\<le> i;\n        m = s i; 0 < i mod k;\n        \\<forall>x.\n           Suc (t * k) \\<le> x \\<and> x \\<le> i - Suc 0 \\<longrightarrow>\n           0 < x mod k;\n        q * k \\<noteq> Suc i; Suc i \\<le> q * k;\n        \\<forall>x.\n           Suc i \\<le> x \\<and> x \\<le> Suc (q * k - 2) \\<longrightarrow>\n           s x = NoMsg;\n        Suc t \\<le> q; t * k + k \\<le> q * k\\<rbrakk>\n       \\<Longrightarrow> (i < t * k + k - Suc 0 \\<longrightarrow>\n                          (\\<forall>x.\n                              Suc i \\<le> x \\<and>\n                              x \\<le> t * k + k - Suc 0 \\<longrightarrow>\n                              s x = NoMsg)) \\<and>\n                         (\\<not> i < t * k + k - Suc 0 \\<longrightarrow>\n                          i = t * k + k - Suc 0)", "apply (intro conjI impI allI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>i q x.\n       \\<lbrakk>s i \\<noteq> NoMsg; \\<And>t. event t = (t mod k = 0);\n        t0 = t * k; Suc 0 < k; i \\<noteq> Suc (t * k); Suc (t * k) \\<le> i;\n        m = s i; 0 < i mod k;\n        \\<forall>x.\n           Suc (t * k) \\<le> x \\<and> x \\<le> i - Suc 0 \\<longrightarrow>\n           0 < x mod k;\n        q * k \\<noteq> Suc i; Suc i \\<le> q * k;\n        \\<forall>x.\n           Suc i \\<le> x \\<and> x \\<le> Suc (q * k - 2) \\<longrightarrow>\n           s x = NoMsg;\n        Suc t \\<le> q; t * k + k \\<le> q * k; i < t * k + k - Suc 0;\n        Suc i \\<le> x \\<and> x \\<le> t * k + k - Suc 0\\<rbrakk>\n       \\<Longrightarrow> s x = NoMsg\n 2. \\<And>i q.\n       \\<lbrakk>s i \\<noteq> NoMsg; \\<And>t. event t = (t mod k = 0);\n        t0 = t * k; Suc 0 < k; i \\<noteq> Suc (t * k); Suc (t * k) \\<le> i;\n        m = s i; 0 < i mod k;\n        \\<forall>x.\n           Suc (t * k) \\<le> x \\<and> x \\<le> i - Suc 0 \\<longrightarrow>\n           0 < x mod k;\n        q * k \\<noteq> Suc i; Suc i \\<le> q * k;\n        \\<forall>x.\n           Suc i \\<le> x \\<and> x \\<le> Suc (q * k - 2) \\<longrightarrow>\n           s x = NoMsg;\n        Suc t \\<le> q; t * k + k \\<le> q * k;\n        \\<not> i < t * k + k - Suc 0\\<rbrakk>\n       \\<Longrightarrow> i = t * k + k - Suc 0", "apply force"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i q.\n       \\<lbrakk>s i \\<noteq> NoMsg; \\<And>t. event t = (t mod k = 0);\n        t0 = t * k; Suc 0 < k; i \\<noteq> Suc (t * k); Suc (t * k) \\<le> i;\n        m = s i; 0 < i mod k;\n        \\<forall>x.\n           Suc (t * k) \\<le> x \\<and> x \\<le> i - Suc 0 \\<longrightarrow>\n           0 < x mod k;\n        q * k \\<noteq> Suc i; Suc i \\<le> q * k;\n        \\<forall>x.\n           Suc i \\<le> x \\<and> x \\<le> Suc (q * k - 2) \\<longrightarrow>\n           s x = NoMsg;\n        Suc t \\<le> q; t * k + k \\<le> q * k;\n        \\<not> i < t * k + k - Suc 0\\<rbrakk>\n       \\<Longrightarrow> i = t * k + k - Suc 0", "apply (simp add: linorder_not_less)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i q.\n       \\<lbrakk>s i \\<noteq> NoMsg; \\<And>t. event t = (t mod k = 0);\n        t0 = t * k; Suc 0 < k; i \\<noteq> Suc (t * k); Suc (t * k) \\<le> i;\n        m = s i; 0 < i mod k;\n        \\<forall>x.\n           Suc (t * k) \\<le> x \\<and> x \\<le> i - Suc 0 \\<longrightarrow>\n           0 < x mod k;\n        q * k \\<noteq> Suc i; Suc i \\<le> q * k;\n        \\<forall>x.\n           Suc i \\<le> x \\<and> x \\<le> Suc (q * k - 2) \\<longrightarrow>\n           s x = NoMsg;\n        Suc t \\<le> q; t * k + k \\<le> q * k;\n        t * k + k - Suc 0 \\<le> i\\<rbrakk>\n       \\<Longrightarrow> i = t * k + k - Suc 0", "apply (case_tac \"i > t * k + k\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>i q.\n       \\<lbrakk>s i \\<noteq> NoMsg; \\<And>t. event t = (t mod k = 0);\n        t0 = t * k; Suc 0 < k; i \\<noteq> Suc (t * k); Suc (t * k) \\<le> i;\n        m = s i; 0 < i mod k;\n        \\<forall>x.\n           Suc (t * k) \\<le> x \\<and> x \\<le> i - Suc 0 \\<longrightarrow>\n           0 < x mod k;\n        q * k \\<noteq> Suc i; Suc i \\<le> q * k;\n        \\<forall>x.\n           Suc i \\<le> x \\<and> x \\<le> Suc (q * k - 2) \\<longrightarrow>\n           s x = NoMsg;\n        Suc t \\<le> q; t * k + k \\<le> q * k; t * k + k - Suc 0 \\<le> i;\n        t * k + k < i\\<rbrakk>\n       \\<Longrightarrow> i = t * k + k - Suc 0\n 2. \\<And>i q.\n       \\<lbrakk>s i \\<noteq> NoMsg; \\<And>t. event t = (t mod k = 0);\n        t0 = t * k; Suc 0 < k; i \\<noteq> Suc (t * k); Suc (t * k) \\<le> i;\n        m = s i; 0 < i mod k;\n        \\<forall>x.\n           Suc (t * k) \\<le> x \\<and> x \\<le> i - Suc 0 \\<longrightarrow>\n           0 < x mod k;\n        q * k \\<noteq> Suc i; Suc i \\<le> q * k;\n        \\<forall>x.\n           Suc i \\<le> x \\<and> x \\<le> Suc (q * k - 2) \\<longrightarrow>\n           s x = NoMsg;\n        Suc t \\<le> q; t * k + k \\<le> q * k; t * k + k - Suc 0 \\<le> i;\n        \\<not> t * k + k < i\\<rbrakk>\n       \\<Longrightarrow> i = t * k + k - Suc 0", "apply (drule_tac x=\"t * k + k\" in spec)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>i q.\n       \\<lbrakk>s i \\<noteq> NoMsg; \\<And>t. event t = (t mod k = 0);\n        t0 = t * k; Suc 0 < k; i \\<noteq> Suc (t * k); Suc (t * k) \\<le> i;\n        m = s i; 0 < i mod k; q * k \\<noteq> Suc i; Suc i \\<le> q * k;\n        \\<forall>x.\n           Suc i \\<le> x \\<and> x \\<le> Suc (q * k - 2) \\<longrightarrow>\n           s x = NoMsg;\n        Suc t \\<le> q; t * k + k \\<le> q * k; t * k + k - Suc 0 \\<le> i;\n        t * k + k < i;\n        Suc (t * k) \\<le> t * k + k \\<and>\n        t * k + k \\<le> i - Suc 0 \\<longrightarrow>\n        0 < (t * k + k) mod k\\<rbrakk>\n       \\<Longrightarrow> i = t * k + k - Suc 0\n 2. \\<And>i q.\n       \\<lbrakk>s i \\<noteq> NoMsg; \\<And>t. event t = (t mod k = 0);\n        t0 = t * k; Suc 0 < k; i \\<noteq> Suc (t * k); Suc (t * k) \\<le> i;\n        m = s i; 0 < i mod k;\n        \\<forall>x.\n           Suc (t * k) \\<le> x \\<and> x \\<le> i - Suc 0 \\<longrightarrow>\n           0 < x mod k;\n        q * k \\<noteq> Suc i; Suc i \\<le> q * k;\n        \\<forall>x.\n           Suc i \\<le> x \\<and> x \\<le> Suc (q * k - 2) \\<longrightarrow>\n           s x = NoMsg;\n        Suc t \\<le> q; t * k + k \\<le> q * k; t * k + k - Suc 0 \\<le> i;\n        \\<not> t * k + k < i\\<rbrakk>\n       \\<Longrightarrow> i = t * k + k - Suc 0", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i q.\n       \\<lbrakk>s i \\<noteq> NoMsg; \\<And>t. event t = (t mod k = 0);\n        t0 = t * k; Suc 0 < k; i \\<noteq> Suc (t * k); Suc (t * k) \\<le> i;\n        m = s i; 0 < i mod k;\n        \\<forall>x.\n           Suc (t * k) \\<le> x \\<and> x \\<le> i - Suc 0 \\<longrightarrow>\n           0 < x mod k;\n        q * k \\<noteq> Suc i; Suc i \\<le> q * k;\n        \\<forall>x.\n           Suc i \\<le> x \\<and> x \\<le> Suc (q * k - 2) \\<longrightarrow>\n           s x = NoMsg;\n        Suc t \\<le> q; t * k + k \\<le> q * k; t * k + k - Suc 0 \\<le> i;\n        \\<not> t * k + k < i\\<rbrakk>\n       \\<Longrightarrow> i = t * k + k - Suc 0", "apply (case_tac \"i = t * k + k\", simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i q.\n       \\<lbrakk>s i \\<noteq> NoMsg; \\<And>t. event t = (t mod k = 0);\n        t0 = t * k; Suc 0 < k; i \\<noteq> Suc (t * k); Suc (t * k) \\<le> i;\n        m = s i; 0 < i mod k;\n        \\<forall>x.\n           Suc (t * k) \\<le> x \\<and> x \\<le> i - Suc 0 \\<longrightarrow>\n           0 < x mod k;\n        q * k \\<noteq> Suc i; Suc i \\<le> q * k;\n        \\<forall>x.\n           Suc i \\<le> x \\<and> x \\<le> Suc (q * k - 2) \\<longrightarrow>\n           s x = NoMsg;\n        Suc t \\<le> q; t * k + k \\<le> q * k; t * k + k - Suc 0 \\<le> i;\n        \\<not> t * k + k < i; i \\<noteq> t * k + k\\<rbrakk>\n       \\<Longrightarrow> i = t * k + k - Suc 0", "apply simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma i_shrink_eq_NoMsg_iAll_finish_event_conv: \"\n  \\<lbrakk> 1 < k; \\<And>t. event t = (t mod k = k - 1); t0 = t * k \\<rbrakk> \\<Longrightarrow>\n  ((s \\<div>\\<^sub>i k) t = \\<NoMsg>) =\n  (s t0 = \\<NoMsg> \\<and> (\\<circle> t' t0 [0\\<dots>]. (s t1 = \\<NoMsg>. t1 \\<U> t2 ([0\\<dots>] \\<oplus> t'). (event t2 \\<and> s t2 = \\<NoMsg>))))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>1 < k; \\<And>t. event t = (t mod k = k - 1);\n     t0 = t * k\\<rbrakk>\n    \\<Longrightarrow> ((s \\<div> k) t = NoMsg) =\n                      (s t0 = NoMsg \\<and>\n                       (\\<circle> t' t0 [0\\<dots>].\n                           s t1 = NoMsg. t1 \\<U> t2 [0\\<dots>] \\<oplus> t'.\n                           event t2 \\<and> s t2 = NoMsg))", "apply (simp add: i_shrink_eq_NoMsg_iAll_conv iT_add)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Suc 0 < k; \\<And>t. event t = (t mod k = k - Suc 0);\n     t0 = t * k\\<rbrakk>\n    \\<Longrightarrow> (\\<box> t1 [t * k\\<dots>,k - Suc 0]. s t1 = NoMsg) =\n                      (s (t * k) = NoMsg \\<and>\n                       (\\<circle> t' t * k [0\\<dots>].\n                           s t1 = NoMsg. t1 \\<U> t2 [t'\\<dots>].\n                           t2 mod k = k - Suc 0 \\<and> s t2 = NoMsg))", "apply (unfold iTL_defs Ball_def Bex_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Suc 0 < k; \\<And>t. event t = (t mod k = k - Suc 0);\n     t0 = t * k\\<rbrakk>\n    \\<Longrightarrow> (\\<forall>x.\n                          x \\<in> [t * k\\<dots>,k - Suc 0] \\<longrightarrow>\n                          s x = NoMsg) =\n                      (s (t * k) = NoMsg \\<and>\n                       (\\<exists>x.\n                           x \\<in> [inext (t * k) [0\\<dots>]\\<dots>] \\<and>\n                           (x mod k = k - Suc 0 \\<and> s x = NoMsg) \\<and>\n                           (\\<forall>xa.\n                               xa \\<in> [inext (t * k)\n    [0\\<dots>]\\<dots>] \\<down><\n  x \\<longrightarrow>\n                               s xa = NoMsg)))", "apply (simp add: iT_iff div_mult_cancel iFROM_cut_less iFROM_inext)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Suc 0 < k; \\<And>t. event t = (t mod k = k - Suc 0);\n     t0 = t * k\\<rbrakk>\n    \\<Longrightarrow> (\\<forall>x.\n                          t * k \\<le> x \\<and>\n                          x \\<le> t * k + k - Suc 0 \\<longrightarrow>\n                          s x = NoMsg) =\n                      (s (t * k) = NoMsg \\<and>\n                       (\\<exists>x.\n                           (x \\<le> Suc (t * k) \\<longrightarrow>\n                            Suc (t * k) = x \\<and>\n                            x mod k = k - Suc 0 \\<and> s x = NoMsg) \\<and>\n                           (\\<not> x \\<le> Suc (t * k) \\<longrightarrow>\n                            x mod k = k - Suc 0 \\<and>\n                            s x = NoMsg \\<and>\n                            (\\<forall>xa.\n                                Suc (t * k) \\<le> xa \\<and>\n                                xa \\<le> Suc (x - 2) \\<longrightarrow>\n                                s xa = NoMsg))))", "apply (subgoal_tac \"t * k < t * k + k - Suc 0\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>Suc 0 < k; \\<And>t. event t = (t mod k = k - Suc 0);\n     t0 = t * k; t * k < t * k + k - Suc 0\\<rbrakk>\n    \\<Longrightarrow> (\\<forall>x.\n                          t * k \\<le> x \\<and>\n                          x \\<le> t * k + k - Suc 0 \\<longrightarrow>\n                          s x = NoMsg) =\n                      (s (t * k) = NoMsg \\<and>\n                       (\\<exists>x.\n                           (x \\<le> Suc (t * k) \\<longrightarrow>\n                            Suc (t * k) = x \\<and>\n                            x mod k = k - Suc 0 \\<and> s x = NoMsg) \\<and>\n                           (\\<not> x \\<le> Suc (t * k) \\<longrightarrow>\n                            x mod k = k - Suc 0 \\<and>\n                            s x = NoMsg \\<and>\n                            (\\<forall>xa.\n                                Suc (t * k) \\<le> xa \\<and>\n                                xa \\<le> Suc (x - 2) \\<longrightarrow>\n                                s xa = NoMsg))))\n 2. \\<lbrakk>Suc 0 < k; \\<And>t. event t = (t mod k = k - Suc 0);\n     t0 = t * k\\<rbrakk>\n    \\<Longrightarrow> t * k < t * k + k - Suc 0", "prefer 2"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>Suc 0 < k; \\<And>t. event t = (t mod k = k - Suc 0);\n     t0 = t * k\\<rbrakk>\n    \\<Longrightarrow> t * k < t * k + k - Suc 0\n 2. \\<lbrakk>Suc 0 < k; \\<And>t. event t = (t mod k = k - Suc 0);\n     t0 = t * k; t * k < t * k + k - Suc 0\\<rbrakk>\n    \\<Longrightarrow> (\\<forall>x.\n                          t * k \\<le> x \\<and>\n                          x \\<le> t * k + k - Suc 0 \\<longrightarrow>\n                          s x = NoMsg) =\n                      (s (t * k) = NoMsg \\<and>\n                       (\\<exists>x.\n                           (x \\<le> Suc (t * k) \\<longrightarrow>\n                            Suc (t * k) = x \\<and>\n                            x mod k = k - Suc 0 \\<and> s x = NoMsg) \\<and>\n                           (\\<not> x \\<le> Suc (t * k) \\<longrightarrow>\n                            x mod k = k - Suc 0 \\<and>\n                            s x = NoMsg \\<and>\n                            (\\<forall>xa.\n                                Suc (t * k) \\<le> xa \\<and>\n                                xa \\<le> Suc (x - 2) \\<longrightarrow>\n                                s xa = NoMsg))))", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Suc 0 < k; \\<And>t. event t = (t mod k = k - Suc 0);\n     t0 = t * k; t * k < t * k + k - Suc 0\\<rbrakk>\n    \\<Longrightarrow> (\\<forall>x.\n                          t * k \\<le> x \\<and>\n                          x \\<le> t * k + k - Suc 0 \\<longrightarrow>\n                          s x = NoMsg) =\n                      (s (t * k) = NoMsg \\<and>\n                       (\\<exists>x.\n                           (x \\<le> Suc (t * k) \\<longrightarrow>\n                            Suc (t * k) = x \\<and>\n                            x mod k = k - Suc 0 \\<and> s x = NoMsg) \\<and>\n                           (\\<not> x \\<le> Suc (t * k) \\<longrightarrow>\n                            x mod k = k - Suc 0 \\<and>\n                            s x = NoMsg \\<and>\n                            (\\<forall>xa.\n                                Suc (t * k) \\<le> xa \\<and>\n                                xa \\<le> Suc (x - 2) \\<longrightarrow>\n                                s xa = NoMsg))))", "apply (rule iffI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>Suc 0 < k; \\<And>t. event t = (t mod k = k - Suc 0);\n     t0 = t * k; t * k < t * k + k - Suc 0;\n     \\<forall>x.\n        t * k \\<le> x \\<and> x \\<le> t * k + k - Suc 0 \\<longrightarrow>\n        s x = NoMsg\\<rbrakk>\n    \\<Longrightarrow> s (t * k) = NoMsg \\<and>\n                      (\\<exists>x.\n                          (x \\<le> Suc (t * k) \\<longrightarrow>\n                           Suc (t * k) = x \\<and>\n                           x mod k = k - Suc 0 \\<and> s x = NoMsg) \\<and>\n                          (\\<not> x \\<le> Suc (t * k) \\<longrightarrow>\n                           x mod k = k - Suc 0 \\<and>\n                           s x = NoMsg \\<and>\n                           (\\<forall>xa.\n                               Suc (t * k) \\<le> xa \\<and>\n                               xa \\<le> Suc (x - 2) \\<longrightarrow>\n                               s xa = NoMsg)))\n 2. \\<lbrakk>Suc 0 < k; \\<And>t. event t = (t mod k = k - Suc 0);\n     t0 = t * k; t * k < t * k + k - Suc 0;\n     s (t * k) = NoMsg \\<and>\n     (\\<exists>x.\n         (x \\<le> Suc (t * k) \\<longrightarrow>\n          Suc (t * k) = x \\<and>\n          x mod k = k - Suc 0 \\<and> s x = NoMsg) \\<and>\n         (\\<not> x \\<le> Suc (t * k) \\<longrightarrow>\n          x mod k = k - Suc 0 \\<and>\n          s x = NoMsg \\<and>\n          (\\<forall>xa.\n              Suc (t * k) \\<le> xa \\<and>\n              xa \\<le> Suc (x - 2) \\<longrightarrow>\n              s xa = NoMsg)))\\<rbrakk>\n    \\<Longrightarrow> \\<forall>x.\n                         t * k \\<le> x \\<and>\n                         x \\<le> t * k + k - Suc 0 \\<longrightarrow>\n                         s x = NoMsg", "apply simp"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>Suc 0 < k; \\<And>t. event t = (t mod k = k - Suc 0);\n     t0 = t * k; t * k < t * k + k - Suc 0;\n     \\<forall>x.\n        t * k \\<le> x \\<and> x \\<le> t * k + k - Suc 0 \\<longrightarrow>\n        s x = NoMsg\\<rbrakk>\n    \\<Longrightarrow> \\<exists>x.\n                         (x \\<le> Suc (t * k) \\<longrightarrow>\n                          Suc (t * k) = x \\<and>\n                          x mod k = k - Suc 0 \\<and> s x = NoMsg) \\<and>\n                         (\\<not> x \\<le> Suc (t * k) \\<longrightarrow>\n                          x mod k = k - Suc 0 \\<and>\n                          s x = NoMsg \\<and>\n                          (\\<forall>xa.\n                              Suc (t * k) \\<le> xa \\<and>\n                              xa \\<le> Suc (x - 2) \\<longrightarrow>\n                              s xa = NoMsg))\n 2. \\<lbrakk>Suc 0 < k; \\<And>t. event t = (t mod k = k - Suc 0);\n     t0 = t * k; t * k < t * k + k - Suc 0;\n     s (t * k) = NoMsg \\<and>\n     (\\<exists>x.\n         (x \\<le> Suc (t * k) \\<longrightarrow>\n          Suc (t * k) = x \\<and>\n          x mod k = k - Suc 0 \\<and> s x = NoMsg) \\<and>\n         (\\<not> x \\<le> Suc (t * k) \\<longrightarrow>\n          x mod k = k - Suc 0 \\<and>\n          s x = NoMsg \\<and>\n          (\\<forall>xa.\n              Suc (t * k) \\<le> xa \\<and>\n              xa \\<le> Suc (x - 2) \\<longrightarrow>\n              s xa = NoMsg)))\\<rbrakk>\n    \\<Longrightarrow> \\<forall>x.\n                         t * k \\<le> x \\<and>\n                         x \\<le> t * k + k - Suc 0 \\<longrightarrow>\n                         s x = NoMsg", "apply (rule_tac x=\"t * k + k - Suc 0\" in exI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>Suc 0 < k; \\<And>t. event t = (t mod k = k - Suc 0);\n     t0 = t * k; t * k < t * k + k - Suc 0;\n     \\<forall>x.\n        t * k \\<le> x \\<and> x \\<le> t * k + k - Suc 0 \\<longrightarrow>\n        s x = NoMsg\\<rbrakk>\n    \\<Longrightarrow> (t * k + k - Suc 0 \\<le> Suc (t * k) \\<longrightarrow>\n                       Suc (t * k) = t * k + k - Suc 0 \\<and>\n                       (t * k + k - Suc 0) mod k = k - Suc 0 \\<and>\n                       s (t * k + k - Suc 0) = NoMsg) \\<and>\n                      (\\<not> t * k + k - Suc 0\n                              \\<le> Suc (t * k) \\<longrightarrow>\n                       (t * k + k - Suc 0) mod k = k - Suc 0 \\<and>\n                       s (t * k + k - Suc 0) = NoMsg \\<and>\n                       (\\<forall>x.\n                           Suc (t * k) \\<le> x \\<and>\n                           x \\<le> Suc (t * k + k - Suc 0 -\n  2) \\<longrightarrow>\n                           s x = NoMsg))\n 2. \\<lbrakk>Suc 0 < k; \\<And>t. event t = (t mod k = k - Suc 0);\n     t0 = t * k; t * k < t * k + k - Suc 0;\n     s (t * k) = NoMsg \\<and>\n     (\\<exists>x.\n         (x \\<le> Suc (t * k) \\<longrightarrow>\n          Suc (t * k) = x \\<and>\n          x mod k = k - Suc 0 \\<and> s x = NoMsg) \\<and>\n         (\\<not> x \\<le> Suc (t * k) \\<longrightarrow>\n          x mod k = k - Suc 0 \\<and>\n          s x = NoMsg \\<and>\n          (\\<forall>xa.\n              Suc (t * k) \\<le> xa \\<and>\n              xa \\<le> Suc (x - 2) \\<longrightarrow>\n              s xa = NoMsg)))\\<rbrakk>\n    \\<Longrightarrow> \\<forall>x.\n                         t * k \\<le> x \\<and>\n                         x \\<le> t * k + k - Suc 0 \\<longrightarrow>\n                         s x = NoMsg", "apply (simp add: mod_pred)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>Suc 0 < k; \\<And>t. event t = (t mod k = k - Suc 0);\n     t0 = t * k; t * k < t * k + k - Suc 0;\n     \\<forall>x.\n        t * k \\<le> x \\<and> x \\<le> t * k + k - Suc 0 \\<longrightarrow>\n        s x = NoMsg\\<rbrakk>\n    \\<Longrightarrow> \\<not> t * k + k - Suc 0\n                             \\<le> Suc (t * k) \\<longrightarrow>\n                      (\\<forall>x.\n                          Suc (t * k) \\<le> x \\<and>\n                          x \\<le> Suc (t * k + k -\n Suc (Suc (Suc 0))) \\<longrightarrow>\n                          s x = NoMsg)\n 2. \\<lbrakk>Suc 0 < k; \\<And>t. event t = (t mod k = k - Suc 0);\n     t0 = t * k; t * k < t * k + k - Suc 0;\n     s (t * k) = NoMsg \\<and>\n     (\\<exists>x.\n         (x \\<le> Suc (t * k) \\<longrightarrow>\n          Suc (t * k) = x \\<and>\n          x mod k = k - Suc 0 \\<and> s x = NoMsg) \\<and>\n         (\\<not> x \\<le> Suc (t * k) \\<longrightarrow>\n          x mod k = k - Suc 0 \\<and>\n          s x = NoMsg \\<and>\n          (\\<forall>xa.\n              Suc (t * k) \\<le> xa \\<and>\n              xa \\<le> Suc (x - 2) \\<longrightarrow>\n              s xa = NoMsg)))\\<rbrakk>\n    \\<Longrightarrow> \\<forall>x.\n                         t * k \\<le> x \\<and>\n                         x \\<le> t * k + k - Suc 0 \\<longrightarrow>\n                         s x = NoMsg", "apply (clarify, rename_tac t1)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>t1.\n       \\<lbrakk>Suc 0 < k; \\<And>t. event t = (t mod k = k - Suc 0);\n        t0 = t * k; t * k < t * k + k - Suc 0;\n        \\<forall>x.\n           t * k \\<le> x \\<and> x \\<le> t * k + k - Suc 0 \\<longrightarrow>\n           s x = NoMsg;\n        \\<not> t * k + k - Suc 0 \\<le> Suc (t * k); Suc (t * k) \\<le> t1;\n        t1 \\<le> Suc (t * k + k - Suc (Suc (Suc 0)))\\<rbrakk>\n       \\<Longrightarrow> s t1 = NoMsg\n 2. \\<lbrakk>Suc 0 < k; \\<And>t. event t = (t mod k = k - Suc 0);\n     t0 = t * k; t * k < t * k + k - Suc 0;\n     s (t * k) = NoMsg \\<and>\n     (\\<exists>x.\n         (x \\<le> Suc (t * k) \\<longrightarrow>\n          Suc (t * k) = x \\<and>\n          x mod k = k - Suc 0 \\<and> s x = NoMsg) \\<and>\n         (\\<not> x \\<le> Suc (t * k) \\<longrightarrow>\n          x mod k = k - Suc 0 \\<and>\n          s x = NoMsg \\<and>\n          (\\<forall>xa.\n              Suc (t * k) \\<le> xa \\<and>\n              xa \\<le> Suc (x - 2) \\<longrightarrow>\n              s xa = NoMsg)))\\<rbrakk>\n    \\<Longrightarrow> \\<forall>x.\n                         t * k \\<le> x \\<and>\n                         x \\<le> t * k + k - Suc 0 \\<longrightarrow>\n                         s x = NoMsg", "apply (drule Suc_leI[of \"t * k\"])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>t1.\n       \\<lbrakk>Suc 0 < k; \\<And>t. event t = (t mod k = k - Suc 0);\n        t0 = t * k;\n        \\<forall>x.\n           t * k \\<le> x \\<and> x \\<le> t * k + k - Suc 0 \\<longrightarrow>\n           s x = NoMsg;\n        \\<not> t * k + k - Suc 0 \\<le> Suc (t * k); Suc (t * k) \\<le> t1;\n        t1 \\<le> Suc (t * k + k - Suc (Suc (Suc 0)));\n        Suc (t * k) \\<le> t * k + k - Suc 0\\<rbrakk>\n       \\<Longrightarrow> s t1 = NoMsg\n 2. \\<lbrakk>Suc 0 < k; \\<And>t. event t = (t mod k = k - Suc 0);\n     t0 = t * k; t * k < t * k + k - Suc 0;\n     s (t * k) = NoMsg \\<and>\n     (\\<exists>x.\n         (x \\<le> Suc (t * k) \\<longrightarrow>\n          Suc (t * k) = x \\<and>\n          x mod k = k - Suc 0 \\<and> s x = NoMsg) \\<and>\n         (\\<not> x \\<le> Suc (t * k) \\<longrightarrow>\n          x mod k = k - Suc 0 \\<and>\n          s x = NoMsg \\<and>\n          (\\<forall>xa.\n              Suc (t * k) \\<le> xa \\<and>\n              xa \\<le> Suc (x - 2) \\<longrightarrow>\n              s xa = NoMsg)))\\<rbrakk>\n    \\<Longrightarrow> \\<forall>x.\n                         t * k \\<le> x \\<and>\n                         x \\<le> t * k + k - Suc 0 \\<longrightarrow>\n                         s x = NoMsg", "apply (drule order_le_less[THEN iffD1], erule disjE)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>t1.\n       \\<lbrakk>Suc 0 < k; \\<And>t. event t = (t mod k = k - Suc 0);\n        t0 = t * k;\n        \\<forall>x.\n           t * k \\<le> x \\<and> x \\<le> t * k + k - Suc 0 \\<longrightarrow>\n           s x = NoMsg;\n        \\<not> t * k + k - Suc 0 \\<le> Suc (t * k);\n        t1 \\<le> Suc (t * k + k - Suc (Suc (Suc 0)));\n        Suc (t * k) \\<le> t * k + k - Suc 0; Suc (t * k) < t1\\<rbrakk>\n       \\<Longrightarrow> s t1 = NoMsg\n 2. \\<And>t1.\n       \\<lbrakk>Suc 0 < k; \\<And>t. event t = (t mod k = k - Suc 0);\n        t0 = t * k;\n        \\<forall>x.\n           t * k \\<le> x \\<and> x \\<le> t * k + k - Suc 0 \\<longrightarrow>\n           s x = NoMsg;\n        \\<not> t * k + k - Suc 0 \\<le> Suc (t * k);\n        t1 \\<le> Suc (t * k + k - Suc (Suc (Suc 0)));\n        Suc (t * k) \\<le> t * k + k - Suc 0; Suc (t * k) = t1\\<rbrakk>\n       \\<Longrightarrow> s t1 = NoMsg\n 3. \\<lbrakk>Suc 0 < k; \\<And>t. event t = (t mod k = k - Suc 0);\n     t0 = t * k; t * k < t * k + k - Suc 0;\n     s (t * k) = NoMsg \\<and>\n     (\\<exists>x.\n         (x \\<le> Suc (t * k) \\<longrightarrow>\n          Suc (t * k) = x \\<and>\n          x mod k = k - Suc 0 \\<and> s x = NoMsg) \\<and>\n         (\\<not> x \\<le> Suc (t * k) \\<longrightarrow>\n          x mod k = k - Suc 0 \\<and>\n          s x = NoMsg \\<and>\n          (\\<forall>xa.\n              Suc (t * k) \\<le> xa \\<and>\n              xa \\<le> Suc (x - 2) \\<longrightarrow>\n              s xa = NoMsg)))\\<rbrakk>\n    \\<Longrightarrow> \\<forall>x.\n                         t * k \\<le> x \\<and>\n                         x \\<le> t * k + k - Suc 0 \\<longrightarrow>\n                         s x = NoMsg", "prefer 2"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>t1.\n       \\<lbrakk>Suc 0 < k; \\<And>t. event t = (t mod k = k - Suc 0);\n        t0 = t * k;\n        \\<forall>x.\n           t * k \\<le> x \\<and> x \\<le> t * k + k - Suc 0 \\<longrightarrow>\n           s x = NoMsg;\n        \\<not> t * k + k - Suc 0 \\<le> Suc (t * k);\n        t1 \\<le> Suc (t * k + k - Suc (Suc (Suc 0)));\n        Suc (t * k) \\<le> t * k + k - Suc 0; Suc (t * k) = t1\\<rbrakk>\n       \\<Longrightarrow> s t1 = NoMsg\n 2. \\<And>t1.\n       \\<lbrakk>Suc 0 < k; \\<And>t. event t = (t mod k = k - Suc 0);\n        t0 = t * k;\n        \\<forall>x.\n           t * k \\<le> x \\<and> x \\<le> t * k + k - Suc 0 \\<longrightarrow>\n           s x = NoMsg;\n        \\<not> t * k + k - Suc 0 \\<le> Suc (t * k);\n        t1 \\<le> Suc (t * k + k - Suc (Suc (Suc 0)));\n        Suc (t * k) \\<le> t * k + k - Suc 0; Suc (t * k) < t1\\<rbrakk>\n       \\<Longrightarrow> s t1 = NoMsg\n 3. \\<lbrakk>Suc 0 < k; \\<And>t. event t = (t mod k = k - Suc 0);\n     t0 = t * k; t * k < t * k + k - Suc 0;\n     s (t * k) = NoMsg \\<and>\n     (\\<exists>x.\n         (x \\<le> Suc (t * k) \\<longrightarrow>\n          Suc (t * k) = x \\<and>\n          x mod k = k - Suc 0 \\<and> s x = NoMsg) \\<and>\n         (\\<not> x \\<le> Suc (t * k) \\<longrightarrow>\n          x mod k = k - Suc 0 \\<and>\n          s x = NoMsg \\<and>\n          (\\<forall>xa.\n              Suc (t * k) \\<le> xa \\<and>\n              xa \\<le> Suc (x - 2) \\<longrightarrow>\n              s xa = NoMsg)))\\<rbrakk>\n    \\<Longrightarrow> \\<forall>x.\n                         t * k \\<le> x \\<and>\n                         x \\<le> t * k + k - Suc 0 \\<longrightarrow>\n                         s x = NoMsg", "apply simp"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>t1.\n       \\<lbrakk>Suc 0 < k; \\<And>t. event t = (t mod k = k - Suc 0);\n        t0 = t * k;\n        \\<forall>x.\n           t * k \\<le> x \\<and> x \\<le> t * k + k - Suc 0 \\<longrightarrow>\n           s x = NoMsg;\n        \\<not> t * k + k - Suc 0 \\<le> Suc (t * k);\n        t1 \\<le> Suc (t * k + k - Suc (Suc (Suc 0)));\n        Suc (t * k) \\<le> t * k + k - Suc 0; Suc (t * k) < t1\\<rbrakk>\n       \\<Longrightarrow> s t1 = NoMsg\n 2. \\<lbrakk>Suc 0 < k; \\<And>t. event t = (t mod k = k - Suc 0);\n     t0 = t * k; t * k < t * k + k - Suc 0;\n     s (t * k) = NoMsg \\<and>\n     (\\<exists>x.\n         (x \\<le> Suc (t * k) \\<longrightarrow>\n          Suc (t * k) = x \\<and>\n          x mod k = k - Suc 0 \\<and> s x = NoMsg) \\<and>\n         (\\<not> x \\<le> Suc (t * k) \\<longrightarrow>\n          x mod k = k - Suc 0 \\<and>\n          s x = NoMsg \\<and>\n          (\\<forall>xa.\n              Suc (t * k) \\<le> xa \\<and>\n              xa \\<le> Suc (x - 2) \\<longrightarrow>\n              s xa = NoMsg)))\\<rbrakk>\n    \\<Longrightarrow> \\<forall>x.\n                         t * k \\<le> x \\<and>\n                         x \\<le> t * k + k - Suc 0 \\<longrightarrow>\n                         s x = NoMsg", "apply (clarsimp simp: iIN_iff)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Suc 0 < k; \\<And>t. event t = (t mod k = k - Suc 0);\n     t0 = t * k; t * k < t * k + k - Suc 0;\n     s (t * k) = NoMsg \\<and>\n     (\\<exists>x.\n         (x \\<le> Suc (t * k) \\<longrightarrow>\n          Suc (t * k) = x \\<and>\n          x mod k = k - Suc 0 \\<and> s x = NoMsg) \\<and>\n         (\\<not> x \\<le> Suc (t * k) \\<longrightarrow>\n          x mod k = k - Suc 0 \\<and>\n          s x = NoMsg \\<and>\n          (\\<forall>xa.\n              Suc (t * k) \\<le> xa \\<and>\n              xa \\<le> Suc (x - 2) \\<longrightarrow>\n              s xa = NoMsg)))\\<rbrakk>\n    \\<Longrightarrow> \\<forall>x.\n                         t * k \\<le> x \\<and>\n                         x \\<le> t * k + k - Suc 0 \\<longrightarrow>\n                         s x = NoMsg", "apply (clarify, rename_tac t1 t2)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>t1 t2.\n       \\<lbrakk>Suc 0 < k; \\<And>t. event t = (t mod k = k - Suc 0);\n        t0 = t * k; t * k < t * k + k - Suc 0; s (t * k) = NoMsg;\n        t2 \\<le> Suc (t * k) \\<longrightarrow>\n        Suc (t * k) = t2 \\<and> t2 mod k = k - Suc 0 \\<and> s t2 = NoMsg;\n        \\<not> t2 \\<le> Suc (t * k) \\<longrightarrow>\n        t2 mod k = k - Suc 0 \\<and>\n        s t2 = NoMsg \\<and>\n        (\\<forall>x.\n            Suc (t * k) \\<le> x \\<and>\n            x \\<le> Suc (t2 - 2) \\<longrightarrow>\n            s x = NoMsg);\n        t * k \\<le> t1; t1 \\<le> t * k + k - Suc 0\\<rbrakk>\n       \\<Longrightarrow> s t1 = NoMsg", "apply (case_tac \"t2 \\<le> Suc (t * k)\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>t1 t2.\n       \\<lbrakk>Suc 0 < k; \\<And>t. event t = (t mod k = k - Suc 0);\n        t0 = t * k; t * k < t * k + k - Suc 0; s (t * k) = NoMsg;\n        t2 \\<le> Suc (t * k) \\<longrightarrow>\n        Suc (t * k) = t2 \\<and> t2 mod k = k - Suc 0 \\<and> s t2 = NoMsg;\n        \\<not> t2 \\<le> Suc (t * k) \\<longrightarrow>\n        t2 mod k = k - Suc 0 \\<and>\n        s t2 = NoMsg \\<and>\n        (\\<forall>x.\n            Suc (t * k) \\<le> x \\<and>\n            x \\<le> Suc (t2 - 2) \\<longrightarrow>\n            s x = NoMsg);\n        t * k \\<le> t1; t1 \\<le> t * k + k - Suc 0;\n        t2 \\<le> Suc (t * k)\\<rbrakk>\n       \\<Longrightarrow> s t1 = NoMsg\n 2. \\<And>t1 t2.\n       \\<lbrakk>Suc 0 < k; \\<And>t. event t = (t mod k = k - Suc 0);\n        t0 = t * k; t * k < t * k + k - Suc 0; s (t * k) = NoMsg;\n        t2 \\<le> Suc (t * k) \\<longrightarrow>\n        Suc (t * k) = t2 \\<and> t2 mod k = k - Suc 0 \\<and> s t2 = NoMsg;\n        \\<not> t2 \\<le> Suc (t * k) \\<longrightarrow>\n        t2 mod k = k - Suc 0 \\<and>\n        s t2 = NoMsg \\<and>\n        (\\<forall>x.\n            Suc (t * k) \\<le> x \\<and>\n            x \\<le> Suc (t2 - 2) \\<longrightarrow>\n            s x = NoMsg);\n        t * k \\<le> t1; t1 \\<le> t * k + k - Suc 0;\n        \\<not> t2 \\<le> Suc (t * k)\\<rbrakk>\n       \\<Longrightarrow> s t1 = NoMsg", "apply (clarsimp simp: mod_Suc)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>t1.\n       \\<lbrakk>Suc 0 < k; \\<And>t. event t = (t mod k = Suc 0); t0 = t * k;\n        t * k < t * k + k - Suc 0; s (t * k) = NoMsg; t * k \\<le> t1;\n        t1 \\<le> t * k + k - Suc 0; Suc 0 = k - Suc 0;\n        s (Suc (t * k)) = NoMsg\\<rbrakk>\n       \\<Longrightarrow> s t1 = NoMsg\n 2. \\<And>t1 t2.\n       \\<lbrakk>Suc 0 < k; \\<And>t. event t = (t mod k = k - Suc 0);\n        t0 = t * k; t * k < t * k + k - Suc 0; s (t * k) = NoMsg;\n        t2 \\<le> Suc (t * k) \\<longrightarrow>\n        Suc (t * k) = t2 \\<and> t2 mod k = k - Suc 0 \\<and> s t2 = NoMsg;\n        \\<not> t2 \\<le> Suc (t * k) \\<longrightarrow>\n        t2 mod k = k - Suc 0 \\<and>\n        s t2 = NoMsg \\<and>\n        (\\<forall>x.\n            Suc (t * k) \\<le> x \\<and>\n            x \\<le> Suc (t2 - 2) \\<longrightarrow>\n            s x = NoMsg);\n        t * k \\<le> t1; t1 \\<le> t * k + k - Suc 0;\n        \\<not> t2 \\<le> Suc (t * k)\\<rbrakk>\n       \\<Longrightarrow> s t1 = NoMsg", "apply (drule_tac s=\"Suc 0\" in sym, drule_tac x=\"k - Suc 0\" and f=Suc in arg_cong)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>t1.\n       \\<lbrakk>Suc 0 < k; \\<And>t. event t = (t mod k = Suc 0); t0 = t * k;\n        t * k < t * k + k - Suc 0; s (t * k) = NoMsg; t * k \\<le> t1;\n        t1 \\<le> t * k + k - Suc 0; s (Suc (t * k)) = NoMsg;\n        Suc (k - Suc 0) = Suc (Suc 0)\\<rbrakk>\n       \\<Longrightarrow> s t1 = NoMsg\n 2. \\<And>t1 t2.\n       \\<lbrakk>Suc 0 < k; \\<And>t. event t = (t mod k = k - Suc 0);\n        t0 = t * k; t * k < t * k + k - Suc 0; s (t * k) = NoMsg;\n        t2 \\<le> Suc (t * k) \\<longrightarrow>\n        Suc (t * k) = t2 \\<and> t2 mod k = k - Suc 0 \\<and> s t2 = NoMsg;\n        \\<not> t2 \\<le> Suc (t * k) \\<longrightarrow>\n        t2 mod k = k - Suc 0 \\<and>\n        s t2 = NoMsg \\<and>\n        (\\<forall>x.\n            Suc (t * k) \\<le> x \\<and>\n            x \\<le> Suc (t2 - 2) \\<longrightarrow>\n            s x = NoMsg);\n        t * k \\<le> t1; t1 \\<le> t * k + k - Suc 0;\n        \\<not> t2 \\<le> Suc (t * k)\\<rbrakk>\n       \\<Longrightarrow> s t1 = NoMsg", "apply (drule_tac y=t1 in order_le_imp_less_or_eq, erule disjE)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>t1.\n       \\<lbrakk>Suc 0 < k; \\<And>t. event t = (t mod k = Suc 0); t0 = t * k;\n        t * k < t * k + k - Suc 0; s (t * k) = NoMsg;\n        t1 \\<le> t * k + k - Suc 0; s (Suc (t * k)) = NoMsg;\n        Suc (k - Suc 0) = Suc (Suc 0); t * k < t1\\<rbrakk>\n       \\<Longrightarrow> s t1 = NoMsg\n 2. \\<And>t1.\n       \\<lbrakk>Suc 0 < k; \\<And>t. event t = (t mod k = Suc 0); t0 = t * k;\n        t * k < t * k + k - Suc 0; s (t * k) = NoMsg;\n        t1 \\<le> t * k + k - Suc 0; s (Suc (t * k)) = NoMsg;\n        Suc (k - Suc 0) = Suc (Suc 0); t * k = t1\\<rbrakk>\n       \\<Longrightarrow> s t1 = NoMsg\n 3. \\<And>t1 t2.\n       \\<lbrakk>Suc 0 < k; \\<And>t. event t = (t mod k = k - Suc 0);\n        t0 = t * k; t * k < t * k + k - Suc 0; s (t * k) = NoMsg;\n        t2 \\<le> Suc (t * k) \\<longrightarrow>\n        Suc (t * k) = t2 \\<and> t2 mod k = k - Suc 0 \\<and> s t2 = NoMsg;\n        \\<not> t2 \\<le> Suc (t * k) \\<longrightarrow>\n        t2 mod k = k - Suc 0 \\<and>\n        s t2 = NoMsg \\<and>\n        (\\<forall>x.\n            Suc (t * k) \\<le> x \\<and>\n            x \\<le> Suc (t2 - 2) \\<longrightarrow>\n            s x = NoMsg);\n        t * k \\<le> t1; t1 \\<le> t * k + k - Suc 0;\n        \\<not> t2 \\<le> Suc (t * k)\\<rbrakk>\n       \\<Longrightarrow> s t1 = NoMsg", "apply (drule_tac n=t1 in Suc_leI)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>t1.\n       \\<lbrakk>Suc 0 < k; \\<And>t. event t = (t mod k = Suc 0); t0 = t * k;\n        t * k < t * k + k - Suc 0; s (t * k) = NoMsg;\n        t1 \\<le> t * k + k - Suc 0; s (Suc (t * k)) = NoMsg;\n        Suc (k - Suc 0) = Suc (Suc 0); Suc (t * k) \\<le> t1\\<rbrakk>\n       \\<Longrightarrow> s t1 = NoMsg\n 2. \\<And>t1.\n       \\<lbrakk>Suc 0 < k; \\<And>t. event t = (t mod k = Suc 0); t0 = t * k;\n        t * k < t * k + k - Suc 0; s (t * k) = NoMsg;\n        t1 \\<le> t * k + k - Suc 0; s (Suc (t * k)) = NoMsg;\n        Suc (k - Suc 0) = Suc (Suc 0); t * k = t1\\<rbrakk>\n       \\<Longrightarrow> s t1 = NoMsg\n 3. \\<And>t1 t2.\n       \\<lbrakk>Suc 0 < k; \\<And>t. event t = (t mod k = k - Suc 0);\n        t0 = t * k; t * k < t * k + k - Suc 0; s (t * k) = NoMsg;\n        t2 \\<le> Suc (t * k) \\<longrightarrow>\n        Suc (t * k) = t2 \\<and> t2 mod k = k - Suc 0 \\<and> s t2 = NoMsg;\n        \\<not> t2 \\<le> Suc (t * k) \\<longrightarrow>\n        t2 mod k = k - Suc 0 \\<and>\n        s t2 = NoMsg \\<and>\n        (\\<forall>x.\n            Suc (t * k) \\<le> x \\<and>\n            x \\<le> Suc (t2 - 2) \\<longrightarrow>\n            s x = NoMsg);\n        t * k \\<le> t1; t1 \\<le> t * k + k - Suc 0;\n        \\<not> t2 \\<le> Suc (t * k)\\<rbrakk>\n       \\<Longrightarrow> s t1 = NoMsg", "apply simp"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>t1.\n       \\<lbrakk>Suc 0 < k; \\<And>t. event t = (t mod k = Suc 0); t0 = t * k;\n        t * k < t * k + k - Suc 0; s (t * k) = NoMsg;\n        t1 \\<le> t * k + k - Suc 0; s (Suc (t * k)) = NoMsg;\n        Suc (k - Suc 0) = Suc (Suc 0); t * k = t1\\<rbrakk>\n       \\<Longrightarrow> s t1 = NoMsg\n 2. \\<And>t1 t2.\n       \\<lbrakk>Suc 0 < k; \\<And>t. event t = (t mod k = k - Suc 0);\n        t0 = t * k; t * k < t * k + k - Suc 0; s (t * k) = NoMsg;\n        t2 \\<le> Suc (t * k) \\<longrightarrow>\n        Suc (t * k) = t2 \\<and> t2 mod k = k - Suc 0 \\<and> s t2 = NoMsg;\n        \\<not> t2 \\<le> Suc (t * k) \\<longrightarrow>\n        t2 mod k = k - Suc 0 \\<and>\n        s t2 = NoMsg \\<and>\n        (\\<forall>x.\n            Suc (t * k) \\<le> x \\<and>\n            x \\<le> Suc (t2 - 2) \\<longrightarrow>\n            s x = NoMsg);\n        t * k \\<le> t1; t1 \\<le> t * k + k - Suc 0;\n        \\<not> t2 \\<le> Suc (t * k)\\<rbrakk>\n       \\<Longrightarrow> s t1 = NoMsg", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>t1 t2.\n       \\<lbrakk>Suc 0 < k; \\<And>t. event t = (t mod k = k - Suc 0);\n        t0 = t * k; t * k < t * k + k - Suc 0; s (t * k) = NoMsg;\n        t2 \\<le> Suc (t * k) \\<longrightarrow>\n        Suc (t * k) = t2 \\<and> t2 mod k = k - Suc 0 \\<and> s t2 = NoMsg;\n        \\<not> t2 \\<le> Suc (t * k) \\<longrightarrow>\n        t2 mod k = k - Suc 0 \\<and>\n        s t2 = NoMsg \\<and>\n        (\\<forall>x.\n            Suc (t * k) \\<le> x \\<and>\n            x \\<le> Suc (t2 - 2) \\<longrightarrow>\n            s x = NoMsg);\n        t * k \\<le> t1; t1 \\<le> t * k + k - Suc 0;\n        \\<not> t2 \\<le> Suc (t * k)\\<rbrakk>\n       \\<Longrightarrow> s t1 = NoMsg", "apply clarsimp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>t1 t2.\n       \\<lbrakk>Suc 0 < k; \\<And>t. event t = (t mod k = k - Suc 0);\n        t0 = t * k; t * k < t * k + k - Suc 0; s (t * k) = NoMsg;\n        t * k \\<le> t1; t1 \\<le> t * k + k - Suc 0;\n        \\<not> t2 \\<le> Suc (t * k); t2 mod k = k - Suc 0; s t2 = NoMsg;\n        \\<forall>x.\n           Suc (t * k) \\<le> x \\<and> x \\<le> Suc (t2 - 2) \\<longrightarrow>\n           s x = NoMsg\\<rbrakk>\n       \\<Longrightarrow> s t1 = NoMsg", "apply (drule_tac x=t1 in spec)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>t1 t2.\n       \\<lbrakk>Suc 0 < k; \\<And>t. event t = (t mod k = k - Suc 0);\n        t0 = t * k; t * k < t * k + k - Suc 0; s (t * k) = NoMsg;\n        t * k \\<le> t1; t1 \\<le> t * k + k - Suc 0;\n        \\<not> t2 \\<le> Suc (t * k); t2 mod k = k - Suc 0; s t2 = NoMsg;\n        Suc (t * k) \\<le> t1 \\<and> t1 \\<le> Suc (t2 - 2) \\<longrightarrow>\n        s t1 = NoMsg\\<rbrakk>\n       \\<Longrightarrow> s t1 = NoMsg", "apply (simp add: iIN_iff linorder_not_le)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>t1 t2.\n       \\<lbrakk>Suc 0 < k; \\<And>t. event t = (t mod k = k - Suc 0);\n        t0 = t * k; t * k < t * k + k - Suc 0; s (t * k) = NoMsg;\n        t * k \\<le> t1; t1 \\<le> t * k + k - Suc 0; Suc (t * k) < t2;\n        t2 mod k = k - Suc 0; s t2 = NoMsg;\n        Suc (t * k) \\<le> t1 \\<and> t1 \\<le> Suc (t2 - 2) \\<longrightarrow>\n        s t1 = NoMsg\\<rbrakk>\n       \\<Longrightarrow> s t1 = NoMsg", "apply (drule_tac y=t1 in order_le_imp_less_or_eq, erule disjE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>t1 t2.\n       \\<lbrakk>Suc 0 < k; \\<And>t. event t = (t mod k = k - Suc 0);\n        t0 = t * k; t * k < t * k + k - Suc 0; s (t * k) = NoMsg;\n        t1 \\<le> t * k + k - Suc 0; Suc (t * k) < t2; t2 mod k = k - Suc 0;\n        s t2 = NoMsg;\n        Suc (t * k) \\<le> t1 \\<and> t1 \\<le> Suc (t2 - 2) \\<longrightarrow>\n        s t1 = NoMsg;\n        t * k < t1\\<rbrakk>\n       \\<Longrightarrow> s t1 = NoMsg\n 2. \\<And>t1 t2.\n       \\<lbrakk>Suc 0 < k; \\<And>t. event t = (t mod k = k - Suc 0);\n        t0 = t * k; t * k < t * k + k - Suc 0; s (t * k) = NoMsg;\n        t1 \\<le> t * k + k - Suc 0; Suc (t * k) < t2; t2 mod k = k - Suc 0;\n        s t2 = NoMsg;\n        Suc (t * k) \\<le> t1 \\<and> t1 \\<le> Suc (t2 - 2) \\<longrightarrow>\n        s t1 = NoMsg;\n        t * k = t1\\<rbrakk>\n       \\<Longrightarrow> s t1 = NoMsg", "prefer 2"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>t1 t2.\n       \\<lbrakk>Suc 0 < k; \\<And>t. event t = (t mod k = k - Suc 0);\n        t0 = t * k; t * k < t * k + k - Suc 0; s (t * k) = NoMsg;\n        t1 \\<le> t * k + k - Suc 0; Suc (t * k) < t2; t2 mod k = k - Suc 0;\n        s t2 = NoMsg;\n        Suc (t * k) \\<le> t1 \\<and> t1 \\<le> Suc (t2 - 2) \\<longrightarrow>\n        s t1 = NoMsg;\n        t * k = t1\\<rbrakk>\n       \\<Longrightarrow> s t1 = NoMsg\n 2. \\<And>t1 t2.\n       \\<lbrakk>Suc 0 < k; \\<And>t. event t = (t mod k = k - Suc 0);\n        t0 = t * k; t * k < t * k + k - Suc 0; s (t * k) = NoMsg;\n        t1 \\<le> t * k + k - Suc 0; Suc (t * k) < t2; t2 mod k = k - Suc 0;\n        s t2 = NoMsg;\n        Suc (t * k) \\<le> t1 \\<and> t1 \\<le> Suc (t2 - 2) \\<longrightarrow>\n        s t1 = NoMsg;\n        t * k < t1\\<rbrakk>\n       \\<Longrightarrow> s t1 = NoMsg", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>t1 t2.\n       \\<lbrakk>Suc 0 < k; \\<And>t. event t = (t mod k = k - Suc 0);\n        t0 = t * k; t * k < t * k + k - Suc 0; s (t * k) = NoMsg;\n        t1 \\<le> t * k + k - Suc 0; Suc (t * k) < t2; t2 mod k = k - Suc 0;\n        s t2 = NoMsg;\n        Suc (t * k) \\<le> t1 \\<and> t1 \\<le> Suc (t2 - 2) \\<longrightarrow>\n        s t1 = NoMsg;\n        t * k < t1\\<rbrakk>\n       \\<Longrightarrow> s t1 = NoMsg", "apply (subgoal_tac \"t * k + k - Suc 0 \\<le> t2\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>t1 t2.\n       \\<lbrakk>Suc 0 < k; \\<And>t. event t = (t mod k = k - Suc 0);\n        t0 = t * k; t * k < t * k + k - Suc 0; s (t * k) = NoMsg;\n        t1 \\<le> t * k + k - Suc 0; Suc (t * k) < t2; t2 mod k = k - Suc 0;\n        s t2 = NoMsg;\n        Suc (t * k) \\<le> t1 \\<and> t1 \\<le> Suc (t2 - 2) \\<longrightarrow>\n        s t1 = NoMsg;\n        t * k < t1; t * k + k - Suc 0 \\<le> t2\\<rbrakk>\n       \\<Longrightarrow> s t1 = NoMsg\n 2. \\<And>t1 t2.\n       \\<lbrakk>Suc 0 < k; \\<And>t. event t = (t mod k = k - Suc 0);\n        t0 = t * k; t * k < t * k + k - Suc 0; s (t * k) = NoMsg;\n        t1 \\<le> t * k + k - Suc 0; Suc (t * k) < t2; t2 mod k = k - Suc 0;\n        s t2 = NoMsg;\n        Suc (t * k) \\<le> t1 \\<and> t1 \\<le> Suc (t2 - 2) \\<longrightarrow>\n        s t1 = NoMsg;\n        t * k < t1\\<rbrakk>\n       \\<Longrightarrow> t * k + k - Suc 0 \\<le> t2", "prefer 2"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>t1 t2.\n       \\<lbrakk>Suc 0 < k; \\<And>t. event t = (t mod k = k - Suc 0);\n        t0 = t * k; t * k < t * k + k - Suc 0; s (t * k) = NoMsg;\n        t1 \\<le> t * k + k - Suc 0; Suc (t * k) < t2; t2 mod k = k - Suc 0;\n        s t2 = NoMsg;\n        Suc (t * k) \\<le> t1 \\<and> t1 \\<le> Suc (t2 - 2) \\<longrightarrow>\n        s t1 = NoMsg;\n        t * k < t1\\<rbrakk>\n       \\<Longrightarrow> t * k + k - Suc 0 \\<le> t2\n 2. \\<And>t1 t2.\n       \\<lbrakk>Suc 0 < k; \\<And>t. event t = (t mod k = k - Suc 0);\n        t0 = t * k; t * k < t * k + k - Suc 0; s (t * k) = NoMsg;\n        t1 \\<le> t * k + k - Suc 0; Suc (t * k) < t2; t2 mod k = k - Suc 0;\n        s t2 = NoMsg;\n        Suc (t * k) \\<le> t1 \\<and> t1 \\<le> Suc (t2 - 2) \\<longrightarrow>\n        s t1 = NoMsg;\n        t * k < t1; t * k + k - Suc 0 \\<le> t2\\<rbrakk>\n       \\<Longrightarrow> s t1 = NoMsg", "apply (rule le_diff_conv[THEN iffD2])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>t1 t2.\n       \\<lbrakk>Suc 0 < k; \\<And>t. event t = (t mod k = k - Suc 0);\n        t0 = t * k; t * k < t * k + k - Suc 0; s (t * k) = NoMsg;\n        t1 \\<le> t * k + k - Suc 0; Suc (t * k) < t2; t2 mod k = k - Suc 0;\n        s t2 = NoMsg;\n        Suc (t * k) \\<le> t1 \\<and> t1 \\<le> Suc (t2 - 2) \\<longrightarrow>\n        s t1 = NoMsg;\n        t * k < t1\\<rbrakk>\n       \\<Longrightarrow> t * k + k \\<le> t2 + Suc 0\n 2. \\<And>t1 t2.\n       \\<lbrakk>Suc 0 < k; \\<And>t. event t = (t mod k = k - Suc 0);\n        t0 = t * k; t * k < t * k + k - Suc 0; s (t * k) = NoMsg;\n        t1 \\<le> t * k + k - Suc 0; Suc (t * k) < t2; t2 mod k = k - Suc 0;\n        s t2 = NoMsg;\n        Suc (t * k) \\<le> t1 \\<and> t1 \\<le> Suc (t2 - 2) \\<longrightarrow>\n        s t1 = NoMsg;\n        t * k < t1; t * k + k - Suc 0 \\<le> t2\\<rbrakk>\n       \\<Longrightarrow> s t1 = NoMsg", "apply (rule less_mod_eq_imp_add_divisor_le, simp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>t1 t2.\n       \\<lbrakk>Suc 0 < k; \\<And>t. event t = (t mod k = k - Suc 0);\n        t0 = t * k; t * k < t * k + k - Suc 0; s (t * k) = NoMsg;\n        t1 \\<le> t * k + k - Suc 0; Suc (t * k) < t2; t2 mod k = k - Suc 0;\n        s t2 = NoMsg;\n        Suc (t * k) \\<le> t1 \\<and> t1 \\<le> Suc (t2 - 2) \\<longrightarrow>\n        s t1 = NoMsg;\n        t * k < t1\\<rbrakk>\n       \\<Longrightarrow> t * k mod k = (t2 + Suc 0) mod k\n 2. \\<And>t1 t2.\n       \\<lbrakk>Suc 0 < k; \\<And>t. event t = (t mod k = k - Suc 0);\n        t0 = t * k; t * k < t * k + k - Suc 0; s (t * k) = NoMsg;\n        t1 \\<le> t * k + k - Suc 0; Suc (t * k) < t2; t2 mod k = k - Suc 0;\n        s t2 = NoMsg;\n        Suc (t * k) \\<le> t1 \\<and> t1 \\<le> Suc (t2 - 2) \\<longrightarrow>\n        s t1 = NoMsg;\n        t * k < t1; t * k + k - Suc 0 \\<le> t2\\<rbrakk>\n       \\<Longrightarrow> s t1 = NoMsg", "apply (simp add: mod_Suc)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>t1 t2.\n       \\<lbrakk>Suc 0 < k; \\<And>t. event t = (t mod k = k - Suc 0);\n        t0 = t * k; t * k < t * k + k - Suc 0; s (t * k) = NoMsg;\n        t1 \\<le> t * k + k - Suc 0; Suc (t * k) < t2; t2 mod k = k - Suc 0;\n        s t2 = NoMsg;\n        Suc (t * k) \\<le> t1 \\<and> t1 \\<le> Suc (t2 - 2) \\<longrightarrow>\n        s t1 = NoMsg;\n        t * k < t1; t * k + k - Suc 0 \\<le> t2\\<rbrakk>\n       \\<Longrightarrow> s t1 = NoMsg", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>t1 t2.\n       \\<lbrakk>Suc 0 < k; \\<And>t. event t = (t mod k = k - Suc 0);\n        t0 = t * k; s (t * k) = NoMsg; t1 \\<le> t * k + k - Suc 0;\n        Suc (t * k) < t2; t2 mod k = k - Suc 0; s t2 = NoMsg;\n        t1 \\<le> Suc (t2 - 2) \\<longrightarrow> s t1 = NoMsg; t * k < t1;\n        t * k + k - Suc 0 \\<le> t2\\<rbrakk>\n       \\<Longrightarrow> s t1 = NoMsg", "apply (drule_tac x=\"t * k + k - Suc 0\" and y=t2 in order_le_imp_less_or_eq, erule disjE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>t1 t2.\n       \\<lbrakk>Suc 0 < k; \\<And>t. event t = (t mod k = k - Suc 0);\n        t0 = t * k; s (t * k) = NoMsg; t1 \\<le> t * k + k - Suc 0;\n        Suc (t * k) < t2; t2 mod k = k - Suc 0; s t2 = NoMsg;\n        t1 \\<le> Suc (t2 - 2) \\<longrightarrow> s t1 = NoMsg; t * k < t1;\n        t * k + k - Suc 0 < t2\\<rbrakk>\n       \\<Longrightarrow> s t1 = NoMsg\n 2. \\<And>t1 t2.\n       \\<lbrakk>Suc 0 < k; \\<And>t. event t = (t mod k = k - Suc 0);\n        t0 = t * k; s (t * k) = NoMsg; t1 \\<le> t * k + k - Suc 0;\n        Suc (t * k) < t2; t2 mod k = k - Suc 0; s t2 = NoMsg;\n        t1 \\<le> Suc (t2 - 2) \\<longrightarrow> s t1 = NoMsg; t * k < t1;\n        t * k + k - Suc 0 = t2\\<rbrakk>\n       \\<Longrightarrow> s t1 = NoMsg", "prefer 2"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>t1 t2.\n       \\<lbrakk>Suc 0 < k; \\<And>t. event t = (t mod k = k - Suc 0);\n        t0 = t * k; s (t * k) = NoMsg; t1 \\<le> t * k + k - Suc 0;\n        Suc (t * k) < t2; t2 mod k = k - Suc 0; s t2 = NoMsg;\n        t1 \\<le> Suc (t2 - 2) \\<longrightarrow> s t1 = NoMsg; t * k < t1;\n        t * k + k - Suc 0 = t2\\<rbrakk>\n       \\<Longrightarrow> s t1 = NoMsg\n 2. \\<And>t1 t2.\n       \\<lbrakk>Suc 0 < k; \\<And>t. event t = (t mod k = k - Suc 0);\n        t0 = t * k; s (t * k) = NoMsg; t1 \\<le> t * k + k - Suc 0;\n        Suc (t * k) < t2; t2 mod k = k - Suc 0; s t2 = NoMsg;\n        t1 \\<le> Suc (t2 - 2) \\<longrightarrow> s t1 = NoMsg; t * k < t1;\n        t * k + k - Suc 0 < t2\\<rbrakk>\n       \\<Longrightarrow> s t1 = NoMsg", "apply (drule_tac t=t2 in sym, simp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>t1 t2.\n       \\<lbrakk>Suc 0 < k; \\<And>t. event t = (t mod k = k - Suc 0);\n        t0 = t * k; s (t * k) = NoMsg; t1 \\<le> t * k + k - Suc 0;\n        Suc (t * k) < t * k + k - Suc 0;\n        (t * k + k - Suc 0) mod k = k - Suc 0;\n        s (t * k + k - Suc 0) = NoMsg;\n        t1 \\<le> Suc (t * k + k - Suc (Suc (Suc 0))) \\<longrightarrow>\n        s t1 = NoMsg;\n        t * k < t1; t2 = t * k + k - Suc 0\\<rbrakk>\n       \\<Longrightarrow> s t1 = NoMsg\n 2. \\<And>t1 t2.\n       \\<lbrakk>Suc 0 < k; \\<And>t. event t = (t mod k = k - Suc 0);\n        t0 = t * k; s (t * k) = NoMsg; t1 \\<le> t * k + k - Suc 0;\n        Suc (t * k) < t2; t2 mod k = k - Suc 0; s t2 = NoMsg;\n        t1 \\<le> Suc (t2 - 2) \\<longrightarrow> s t1 = NoMsg; t * k < t1;\n        t * k + k - Suc 0 < t2\\<rbrakk>\n       \\<Longrightarrow> s t1 = NoMsg", "apply (drule_tac x=t1 in order_le_imp_less_or_eq, erule disjE)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>t1 t2.\n       \\<lbrakk>Suc 0 < k; \\<And>t. event t = (t mod k = k - Suc 0);\n        t0 = t * k; s (t * k) = NoMsg; Suc (t * k) < t * k + k - Suc 0;\n        (t * k + k - Suc 0) mod k = k - Suc 0;\n        s (t * k + k - Suc 0) = NoMsg;\n        t1 \\<le> Suc (t * k + k - Suc (Suc (Suc 0))) \\<longrightarrow>\n        s t1 = NoMsg;\n        t * k < t1; t2 = t * k + k - Suc 0; t1 < t * k + k - Suc 0\\<rbrakk>\n       \\<Longrightarrow> s t1 = NoMsg\n 2. \\<And>t1 t2.\n       \\<lbrakk>Suc 0 < k; \\<And>t. event t = (t mod k = k - Suc 0);\n        t0 = t * k; s (t * k) = NoMsg; Suc (t * k) < t * k + k - Suc 0;\n        (t * k + k - Suc 0) mod k = k - Suc 0;\n        s (t * k + k - Suc 0) = NoMsg;\n        t1 \\<le> Suc (t * k + k - Suc (Suc (Suc 0))) \\<longrightarrow>\n        s t1 = NoMsg;\n        t * k < t1; t2 = t * k + k - Suc 0; t1 = t * k + k - Suc 0\\<rbrakk>\n       \\<Longrightarrow> s t1 = NoMsg\n 3. \\<And>t1 t2.\n       \\<lbrakk>Suc 0 < k; \\<And>t. event t = (t mod k = k - Suc 0);\n        t0 = t * k; s (t * k) = NoMsg; t1 \\<le> t * k + k - Suc 0;\n        Suc (t * k) < t2; t2 mod k = k - Suc 0; s t2 = NoMsg;\n        t1 \\<le> Suc (t2 - 2) \\<longrightarrow> s t1 = NoMsg; t * k < t1;\n        t * k + k - Suc 0 < t2\\<rbrakk>\n       \\<Longrightarrow> s t1 = NoMsg", "apply simp+"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma i_shrink_eq_Msg_iUntil_finish_event_conv: \"\n  \\<lbrakk> 1 < k; m \\<noteq> \\<NoMsg>; \\<And>t. event t = (t mod k = k - 1); t0 = t * k \\<rbrakk> \\<Longrightarrow>\n  ((s \\<div>\\<^sub>i k) t = m) = (\n  (\\<not> event t1. t1 \\<U> t2 ([0\\<dots>] \\<oplus> t0). event t2 \\<and> s t2 = m) \\<or>\n  (\\<not> event t1. t1 \\<U> t2 ([0\\<dots>] \\<oplus> t0). (\\<not> event t2 \\<and> s t2 = m \\<and> (\n    \\<circle> t' t2 [0\\<dots>]. (s t3 = \\<NoMsg>. t3 \\<U> t4 ([0\\<dots>] \\<oplus> t'). event t4 \\<and> s t4 = \\<NoMsg>)))))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>1 < k; m \\<noteq> NoMsg; \\<And>t. event t = (t mod k = k - 1);\n     t0 = t * k\\<rbrakk>\n    \\<Longrightarrow> ((s \\<div> k) t = m) =\n                      ((\\<not> event t1. t1 \\<U> t2 [0\\<dots>] \\<oplus> t0.\n                        event t2 \\<and> s t2 = m) \\<or>\n                       (\\<not> event t1. t1 \\<U> t2 [0\\<dots>] \\<oplus> t0.\n                        \\<not> event t2 \\<and>\n                        s t2 = m \\<and>\n                        (\\<circle> t' t2 [0\\<dots>].\n                            s t3 = NoMsg. t3 \\<U> t4 [0\\<dots>] \\<oplus> t'.\n                            event t4 \\<and> s t4 = NoMsg)))", "apply (simp add: i_shrink_eq_Msg_iSince_conv split del: if_split)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Suc 0 < k; m \\<noteq> NoMsg;\n     \\<And>t. event t = (t mod k = k - Suc 0); t0 = t * k\\<rbrakk>\n    \\<Longrightarrow> (s t2 = NoMsg. t2 \\<S> t1 [t * k\\<dots>,k - Suc 0].\n                       s t1 = m) =\n                      ((t1 mod k \\<noteq> k - Suc 0.\n                        t1 \\<U> t2 [0\\<dots>] \\<oplus> t * k.\n                        t2 mod k = k - Suc 0 \\<and> s t2 = m) \\<or>\n                       (t1 mod k \\<noteq> k - Suc 0.\n                        t1 \\<U> t2 [0\\<dots>] \\<oplus> t * k.\n                        t2 mod k \\<noteq> k - Suc 0 \\<and>\n                        s t2 = m \\<and>\n                        (\\<circle> t' t2 [0\\<dots>].\n                            s t3 = NoMsg. t3 \\<U> t4 [0\\<dots>] \\<oplus> t'.\n                            t4 mod k = k - Suc 0 \\<and> s t4 = NoMsg)))", "apply (simp only: iTL_defs iT_add iT_cut_greater iT_cut_less Ball_def Bex_def iT_iff iFROM_inext)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Suc 0 < k; m \\<noteq> NoMsg;\n     \\<And>t. event t = (t mod k = k - Suc 0); t0 = t * k\\<rbrakk>\n    \\<Longrightarrow> (\\<exists>x.\n                          (t * k \\<le> x \\<and>\n                           x \\<le> t * k + (k - Suc 0)) \\<and>\n                          s x = m \\<and>\n                          (\\<forall>xa.\n                              xa \\<in> (if x < t * k\n  then [t * k\\<dots>,k - Suc 0]\n  else if x < t * k + (k - Suc 0)\n       then [Suc x\\<dots>,t * k + (k - Suc 0) - Suc x]\n       else {}) \\<longrightarrow>\n                              s xa = NoMsg)) =\n                      ((\\<exists>x\\<ge>0 + t * k.\n                           (x mod k = k - Suc 0 \\<and> s x = m) \\<and>\n                           (\\<forall>xa.\n                               xa \\<in> (if x \\<le> 0 + t * k then {}\n   else [0 + t * k\\<dots>,x - Suc (0 + t * k)]) \\<longrightarrow>\n                               xa mod k \\<noteq> k - Suc 0)) \\<or>\n                       (\\<exists>x\\<ge>0 + t * k.\n                           (x mod k \\<noteq> k - Suc 0 \\<and>\n                            s x = m \\<and>\n                            (\\<exists>xa\\<ge>0 + Suc x.\n                                (xa mod k = k - Suc 0 \\<and>\n                                 s xa = NoMsg) \\<and>\n                                (\\<forall>xb.\n                                    xb \\<in> (if xa \\<le> 0 + Suc x then {}\n        else [0 + Suc x\\<dots>,xa - Suc (0 + Suc x)]) \\<longrightarrow>\n                                    s xb = NoMsg))) \\<and>\n                           (\\<forall>xa.\n                               xa \\<in> (if x \\<le> 0 + t * k then {}\n   else [0 + t * k\\<dots>,x - Suc (0 + t * k)]) \\<longrightarrow>\n                               xa mod k \\<noteq> k - Suc 0)))", "apply (subgoal_tac \"t * k < t * k + k - Suc 0\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>Suc 0 < k; m \\<noteq> NoMsg;\n     \\<And>t. event t = (t mod k = k - Suc 0); t0 = t * k;\n     t * k < t * k + k - Suc 0\\<rbrakk>\n    \\<Longrightarrow> (\\<exists>x.\n                          (t * k \\<le> x \\<and>\n                           x \\<le> t * k + (k - Suc 0)) \\<and>\n                          s x = m \\<and>\n                          (\\<forall>xa.\n                              xa \\<in> (if x < t * k\n  then [t * k\\<dots>,k - Suc 0]\n  else if x < t * k + (k - Suc 0)\n       then [Suc x\\<dots>,t * k + (k - Suc 0) - Suc x]\n       else {}) \\<longrightarrow>\n                              s xa = NoMsg)) =\n                      ((\\<exists>x\\<ge>0 + t * k.\n                           (x mod k = k - Suc 0 \\<and> s x = m) \\<and>\n                           (\\<forall>xa.\n                               xa \\<in> (if x \\<le> 0 + t * k then {}\n   else [0 + t * k\\<dots>,x - Suc (0 + t * k)]) \\<longrightarrow>\n                               xa mod k \\<noteq> k - Suc 0)) \\<or>\n                       (\\<exists>x\\<ge>0 + t * k.\n                           (x mod k \\<noteq> k - Suc 0 \\<and>\n                            s x = m \\<and>\n                            (\\<exists>xa\\<ge>0 + Suc x.\n                                (xa mod k = k - Suc 0 \\<and>\n                                 s xa = NoMsg) \\<and>\n                                (\\<forall>xb.\n                                    xb \\<in> (if xa \\<le> 0 + Suc x then {}\n        else [0 + Suc x\\<dots>,xa - Suc (0 + Suc x)]) \\<longrightarrow>\n                                    s xb = NoMsg))) \\<and>\n                           (\\<forall>xa.\n                               xa \\<in> (if x \\<le> 0 + t * k then {}\n   else [0 + t * k\\<dots>,x - Suc (0 + t * k)]) \\<longrightarrow>\n                               xa mod k \\<noteq> k - Suc 0)))\n 2. \\<lbrakk>Suc 0 < k; m \\<noteq> NoMsg;\n     \\<And>t. event t = (t mod k = k - Suc 0); t0 = t * k\\<rbrakk>\n    \\<Longrightarrow> t * k < t * k + k - Suc 0", "prefer 2"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>Suc 0 < k; m \\<noteq> NoMsg;\n     \\<And>t. event t = (t mod k = k - Suc 0); t0 = t * k\\<rbrakk>\n    \\<Longrightarrow> t * k < t * k + k - Suc 0\n 2. \\<lbrakk>Suc 0 < k; m \\<noteq> NoMsg;\n     \\<And>t. event t = (t mod k = k - Suc 0); t0 = t * k;\n     t * k < t * k + k - Suc 0\\<rbrakk>\n    \\<Longrightarrow> (\\<exists>x.\n                          (t * k \\<le> x \\<and>\n                           x \\<le> t * k + (k - Suc 0)) \\<and>\n                          s x = m \\<and>\n                          (\\<forall>xa.\n                              xa \\<in> (if x < t * k\n  then [t * k\\<dots>,k - Suc 0]\n  else if x < t * k + (k - Suc 0)\n       then [Suc x\\<dots>,t * k + (k - Suc 0) - Suc x]\n       else {}) \\<longrightarrow>\n                              s xa = NoMsg)) =\n                      ((\\<exists>x\\<ge>0 + t * k.\n                           (x mod k = k - Suc 0 \\<and> s x = m) \\<and>\n                           (\\<forall>xa.\n                               xa \\<in> (if x \\<le> 0 + t * k then {}\n   else [0 + t * k\\<dots>,x - Suc (0 + t * k)]) \\<longrightarrow>\n                               xa mod k \\<noteq> k - Suc 0)) \\<or>\n                       (\\<exists>x\\<ge>0 + t * k.\n                           (x mod k \\<noteq> k - Suc 0 \\<and>\n                            s x = m \\<and>\n                            (\\<exists>xa\\<ge>0 + Suc x.\n                                (xa mod k = k - Suc 0 \\<and>\n                                 s xa = NoMsg) \\<and>\n                                (\\<forall>xb.\n                                    xb \\<in> (if xa \\<le> 0 + Suc x then {}\n        else [0 + Suc x\\<dots>,xa - Suc (0 + Suc x)]) \\<longrightarrow>\n                                    s xb = NoMsg))) \\<and>\n                           (\\<forall>xa.\n                               xa \\<in> (if x \\<le> 0 + t * k then {}\n   else [0 + t * k\\<dots>,x - Suc (0 + t * k)]) \\<longrightarrow>\n                               xa mod k \\<noteq> k - Suc 0)))", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Suc 0 < k; m \\<noteq> NoMsg;\n     \\<And>t. event t = (t mod k = k - Suc 0); t0 = t * k;\n     t * k < t * k + k - Suc 0\\<rbrakk>\n    \\<Longrightarrow> (\\<exists>x.\n                          (t * k \\<le> x \\<and>\n                           x \\<le> t * k + (k - Suc 0)) \\<and>\n                          s x = m \\<and>\n                          (\\<forall>xa.\n                              xa \\<in> (if x < t * k\n  then [t * k\\<dots>,k - Suc 0]\n  else if x < t * k + (k - Suc 0)\n       then [Suc x\\<dots>,t * k + (k - Suc 0) - Suc x]\n       else {}) \\<longrightarrow>\n                              s xa = NoMsg)) =\n                      ((\\<exists>x\\<ge>0 + t * k.\n                           (x mod k = k - Suc 0 \\<and> s x = m) \\<and>\n                           (\\<forall>xa.\n                               xa \\<in> (if x \\<le> 0 + t * k then {}\n   else [0 + t * k\\<dots>,x - Suc (0 + t * k)]) \\<longrightarrow>\n                               xa mod k \\<noteq> k - Suc 0)) \\<or>\n                       (\\<exists>x\\<ge>0 + t * k.\n                           (x mod k \\<noteq> k - Suc 0 \\<and>\n                            s x = m \\<and>\n                            (\\<exists>xa\\<ge>0 + Suc x.\n                                (xa mod k = k - Suc 0 \\<and>\n                                 s xa = NoMsg) \\<and>\n                                (\\<forall>xb.\n                                    xb \\<in> (if xa \\<le> 0 + Suc x then {}\n        else [0 + Suc x\\<dots>,xa - Suc (0 + Suc x)]) \\<longrightarrow>\n                                    s xb = NoMsg))) \\<and>\n                           (\\<forall>xa.\n                               xa \\<in> (if x \\<le> 0 + t * k then {}\n   else [0 + t * k\\<dots>,x - Suc (0 + t * k)]) \\<longrightarrow>\n                               xa mod k \\<noteq> k - Suc 0)))", "apply (rule iffI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>Suc 0 < k; m \\<noteq> NoMsg;\n     \\<And>t. event t = (t mod k = k - Suc 0); t0 = t * k;\n     t * k < t * k + k - Suc 0;\n     \\<exists>x.\n        (t * k \\<le> x \\<and> x \\<le> t * k + (k - Suc 0)) \\<and>\n        s x = m \\<and>\n        (\\<forall>xa.\n            xa \\<in> (if x < t * k then [t * k\\<dots>,k - Suc 0]\n                      else if x < t * k + (k - Suc 0)\n                           then [Suc x\\<dots>,t * k + (k - Suc 0) - Suc x]\n                           else {}) \\<longrightarrow>\n            s xa = NoMsg)\\<rbrakk>\n    \\<Longrightarrow> (\\<exists>x\\<ge>0 + t * k.\n                          (x mod k = k - Suc 0 \\<and> s x = m) \\<and>\n                          (\\<forall>xa.\n                              xa \\<in> (if x \\<le> 0 + t * k then {}\n  else [0 + t * k\\<dots>,x - Suc (0 + t * k)]) \\<longrightarrow>\n                              xa mod k \\<noteq> k - Suc 0)) \\<or>\n                      (\\<exists>x\\<ge>0 + t * k.\n                          (x mod k \\<noteq> k - Suc 0 \\<and>\n                           s x = m \\<and>\n                           (\\<exists>xa\\<ge>0 + Suc x.\n                               (xa mod k = k - Suc 0 \\<and>\n                                s xa = NoMsg) \\<and>\n                               (\\<forall>xb.\n                                   xb \\<in> (if xa \\<le> 0 + Suc x then {}\n       else [0 + Suc x\\<dots>,xa - Suc (0 + Suc x)]) \\<longrightarrow>\n                                   s xb = NoMsg))) \\<and>\n                          (\\<forall>xa.\n                              xa \\<in> (if x \\<le> 0 + t * k then {}\n  else [0 + t * k\\<dots>,x - Suc (0 + t * k)]) \\<longrightarrow>\n                              xa mod k \\<noteq> k - Suc 0))\n 2. \\<lbrakk>Suc 0 < k; m \\<noteq> NoMsg;\n     \\<And>t. event t = (t mod k = k - Suc 0); t0 = t * k;\n     t * k < t * k + k - Suc 0;\n     (\\<exists>x\\<ge>0 + t * k.\n         (x mod k = k - Suc 0 \\<and> s x = m) \\<and>\n         (\\<forall>xa.\n             xa \\<in> (if x \\<le> 0 + t * k then {}\n                       else [0 +\n                             t *\n                             k\\<dots>,x -\nSuc (0 + t * k)]) \\<longrightarrow>\n             xa mod k \\<noteq> k - Suc 0)) \\<or>\n     (\\<exists>x\\<ge>0 + t * k.\n         (x mod k \\<noteq> k - Suc 0 \\<and>\n          s x = m \\<and>\n          (\\<exists>xa\\<ge>0 + Suc x.\n              (xa mod k = k - Suc 0 \\<and> s xa = NoMsg) \\<and>\n              (\\<forall>xb.\n                  xb \\<in> (if xa \\<le> 0 + Suc x then {}\n                            else [0 +\n                                  Suc x\\<dots>,xa -\n         Suc (0 + Suc x)]) \\<longrightarrow>\n                  s xb = NoMsg))) \\<and>\n         (\\<forall>xa.\n             xa \\<in> (if x \\<le> 0 + t * k then {}\n                       else [0 +\n                             t *\n                             k\\<dots>,x -\nSuc (0 + t * k)]) \\<longrightarrow>\n             xa mod k \\<noteq> k - Suc 0))\\<rbrakk>\n    \\<Longrightarrow> \\<exists>x.\n                         (t * k \\<le> x \\<and>\n                          x \\<le> t * k + (k - Suc 0)) \\<and>\n                         s x = m \\<and>\n                         (\\<forall>xa.\n                             xa \\<in> (if x < t * k\n then [t * k\\<dots>,k - Suc 0]\n else if x < t * k + (k - Suc 0)\n      then [Suc x\\<dots>,t * k + (k - Suc 0) - Suc x]\n      else {}) \\<longrightarrow>\n                             s xa = NoMsg)", "apply (subgoal_tac \"\\<And>x. t * k \\<le> x \\<Longrightarrow> x < t * k + k - Suc 0 \\<Longrightarrow> x mod k \\<noteq> k - Suc 0\")"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>Suc 0 < k; m \\<noteq> NoMsg;\n     \\<And>t. event t = (t mod k = k - Suc 0); t0 = t * k;\n     t * k < t * k + k - Suc 0;\n     \\<exists>x.\n        (t * k \\<le> x \\<and> x \\<le> t * k + (k - Suc 0)) \\<and>\n        s x = m \\<and>\n        (\\<forall>xa.\n            xa \\<in> (if x < t * k then [t * k\\<dots>,k - Suc 0]\n                      else if x < t * k + (k - Suc 0)\n                           then [Suc x\\<dots>,t * k + (k - Suc 0) - Suc x]\n                           else {}) \\<longrightarrow>\n            s xa = NoMsg);\n     \\<And>x.\n        \\<lbrakk>t * k \\<le> x; x < t * k + k - Suc 0\\<rbrakk>\n        \\<Longrightarrow> x mod k \\<noteq> k - Suc 0\\<rbrakk>\n    \\<Longrightarrow> (\\<exists>x\\<ge>0 + t * k.\n                          (x mod k = k - Suc 0 \\<and> s x = m) \\<and>\n                          (\\<forall>xa.\n                              xa \\<in> (if x \\<le> 0 + t * k then {}\n  else [0 + t * k\\<dots>,x - Suc (0 + t * k)]) \\<longrightarrow>\n                              xa mod k \\<noteq> k - Suc 0)) \\<or>\n                      (\\<exists>x\\<ge>0 + t * k.\n                          (x mod k \\<noteq> k - Suc 0 \\<and>\n                           s x = m \\<and>\n                           (\\<exists>xa\\<ge>0 + Suc x.\n                               (xa mod k = k - Suc 0 \\<and>\n                                s xa = NoMsg) \\<and>\n                               (\\<forall>xb.\n                                   xb \\<in> (if xa \\<le> 0 + Suc x then {}\n       else [0 + Suc x\\<dots>,xa - Suc (0 + Suc x)]) \\<longrightarrow>\n                                   s xb = NoMsg))) \\<and>\n                          (\\<forall>xa.\n                              xa \\<in> (if x \\<le> 0 + t * k then {}\n  else [0 + t * k\\<dots>,x - Suc (0 + t * k)]) \\<longrightarrow>\n                              xa mod k \\<noteq> k - Suc 0))\n 2. \\<And>x.\n       \\<lbrakk>Suc 0 < k; m \\<noteq> NoMsg;\n        \\<And>t. event t = (t mod k = k - Suc 0); t0 = t * k;\n        t * k < t * k + k - Suc 0;\n        \\<exists>x.\n           (t * k \\<le> x \\<and> x \\<le> t * k + (k - Suc 0)) \\<and>\n           s x = m \\<and>\n           (\\<forall>xa.\n               xa \\<in> (if x < t * k then [t * k\\<dots>,k - Suc 0]\n                         else if x < t * k + (k - Suc 0)\n                              then [Suc x\\<dots>,t * k + (k - Suc 0) -\n           Suc x]\n                              else {}) \\<longrightarrow>\n               s xa = NoMsg);\n        t * k \\<le> x; x < t * k + k - Suc 0\\<rbrakk>\n       \\<Longrightarrow> x mod k \\<noteq> k - Suc 0\n 3. \\<lbrakk>Suc 0 < k; m \\<noteq> NoMsg;\n     \\<And>t. event t = (t mod k = k - Suc 0); t0 = t * k;\n     t * k < t * k + k - Suc 0;\n     (\\<exists>x\\<ge>0 + t * k.\n         (x mod k = k - Suc 0 \\<and> s x = m) \\<and>\n         (\\<forall>xa.\n             xa \\<in> (if x \\<le> 0 + t * k then {}\n                       else [0 +\n                             t *\n                             k\\<dots>,x -\nSuc (0 + t * k)]) \\<longrightarrow>\n             xa mod k \\<noteq> k - Suc 0)) \\<or>\n     (\\<exists>x\\<ge>0 + t * k.\n         (x mod k \\<noteq> k - Suc 0 \\<and>\n          s x = m \\<and>\n          (\\<exists>xa\\<ge>0 + Suc x.\n              (xa mod k = k - Suc 0 \\<and> s xa = NoMsg) \\<and>\n              (\\<forall>xb.\n                  xb \\<in> (if xa \\<le> 0 + Suc x then {}\n                            else [0 +\n                                  Suc x\\<dots>,xa -\n         Suc (0 + Suc x)]) \\<longrightarrow>\n                  s xb = NoMsg))) \\<and>\n         (\\<forall>xa.\n             xa \\<in> (if x \\<le> 0 + t * k then {}\n                       else [0 +\n                             t *\n                             k\\<dots>,x -\nSuc (0 + t * k)]) \\<longrightarrow>\n             xa mod k \\<noteq> k - Suc 0))\\<rbrakk>\n    \\<Longrightarrow> \\<exists>x.\n                         (t * k \\<le> x \\<and>\n                          x \\<le> t * k + (k - Suc 0)) \\<and>\n                         s x = m \\<and>\n                         (\\<forall>xa.\n                             xa \\<in> (if x < t * k\n then [t * k\\<dots>,k - Suc 0]\n else if x < t * k + (k - Suc 0)\n      then [Suc x\\<dots>,t * k + (k - Suc 0) - Suc x]\n      else {}) \\<longrightarrow>\n                             s xa = NoMsg)", "prefer 2"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>Suc 0 < k; m \\<noteq> NoMsg;\n        \\<And>t. event t = (t mod k = k - Suc 0); t0 = t * k;\n        t * k < t * k + k - Suc 0;\n        \\<exists>x.\n           (t * k \\<le> x \\<and> x \\<le> t * k + (k - Suc 0)) \\<and>\n           s x = m \\<and>\n           (\\<forall>xa.\n               xa \\<in> (if x < t * k then [t * k\\<dots>,k - Suc 0]\n                         else if x < t * k + (k - Suc 0)\n                              then [Suc x\\<dots>,t * k + (k - Suc 0) -\n           Suc x]\n                              else {}) \\<longrightarrow>\n               s xa = NoMsg);\n        t * k \\<le> x; x < t * k + k - Suc 0\\<rbrakk>\n       \\<Longrightarrow> x mod k \\<noteq> k - Suc 0\n 2. \\<lbrakk>Suc 0 < k; m \\<noteq> NoMsg;\n     \\<And>t. event t = (t mod k = k - Suc 0); t0 = t * k;\n     t * k < t * k + k - Suc 0;\n     \\<exists>x.\n        (t * k \\<le> x \\<and> x \\<le> t * k + (k - Suc 0)) \\<and>\n        s x = m \\<and>\n        (\\<forall>xa.\n            xa \\<in> (if x < t * k then [t * k\\<dots>,k - Suc 0]\n                      else if x < t * k + (k - Suc 0)\n                           then [Suc x\\<dots>,t * k + (k - Suc 0) - Suc x]\n                           else {}) \\<longrightarrow>\n            s xa = NoMsg);\n     \\<And>x.\n        \\<lbrakk>t * k \\<le> x; x < t * k + k - Suc 0\\<rbrakk>\n        \\<Longrightarrow> x mod k \\<noteq> k - Suc 0\\<rbrakk>\n    \\<Longrightarrow> (\\<exists>x\\<ge>0 + t * k.\n                          (x mod k = k - Suc 0 \\<and> s x = m) \\<and>\n                          (\\<forall>xa.\n                              xa \\<in> (if x \\<le> 0 + t * k then {}\n  else [0 + t * k\\<dots>,x - Suc (0 + t * k)]) \\<longrightarrow>\n                              xa mod k \\<noteq> k - Suc 0)) \\<or>\n                      (\\<exists>x\\<ge>0 + t * k.\n                          (x mod k \\<noteq> k - Suc 0 \\<and>\n                           s x = m \\<and>\n                           (\\<exists>xa\\<ge>0 + Suc x.\n                               (xa mod k = k - Suc 0 \\<and>\n                                s xa = NoMsg) \\<and>\n                               (\\<forall>xb.\n                                   xb \\<in> (if xa \\<le> 0 + Suc x then {}\n       else [0 + Suc x\\<dots>,xa - Suc (0 + Suc x)]) \\<longrightarrow>\n                                   s xb = NoMsg))) \\<and>\n                          (\\<forall>xa.\n                              xa \\<in> (if x \\<le> 0 + t * k then {}\n  else [0 + t * k\\<dots>,x - Suc (0 + t * k)]) \\<longrightarrow>\n                              xa mod k \\<noteq> k - Suc 0))\n 3. \\<lbrakk>Suc 0 < k; m \\<noteq> NoMsg;\n     \\<And>t. event t = (t mod k = k - Suc 0); t0 = t * k;\n     t * k < t * k + k - Suc 0;\n     (\\<exists>x\\<ge>0 + t * k.\n         (x mod k = k - Suc 0 \\<and> s x = m) \\<and>\n         (\\<forall>xa.\n             xa \\<in> (if x \\<le> 0 + t * k then {}\n                       else [0 +\n                             t *\n                             k\\<dots>,x -\nSuc (0 + t * k)]) \\<longrightarrow>\n             xa mod k \\<noteq> k - Suc 0)) \\<or>\n     (\\<exists>x\\<ge>0 + t * k.\n         (x mod k \\<noteq> k - Suc 0 \\<and>\n          s x = m \\<and>\n          (\\<exists>xa\\<ge>0 + Suc x.\n              (xa mod k = k - Suc 0 \\<and> s xa = NoMsg) \\<and>\n              (\\<forall>xb.\n                  xb \\<in> (if xa \\<le> 0 + Suc x then {}\n                            else [0 +\n                                  Suc x\\<dots>,xa -\n         Suc (0 + Suc x)]) \\<longrightarrow>\n                  s xb = NoMsg))) \\<and>\n         (\\<forall>xa.\n             xa \\<in> (if x \\<le> 0 + t * k then {}\n                       else [0 +\n                             t *\n                             k\\<dots>,x -\nSuc (0 + t * k)]) \\<longrightarrow>\n             xa mod k \\<noteq> k - Suc 0))\\<rbrakk>\n    \\<Longrightarrow> \\<exists>x.\n                         (t * k \\<le> x \\<and>\n                          x \\<le> t * k + (k - Suc 0)) \\<and>\n                         s x = m \\<and>\n                         (\\<forall>xa.\n                             xa \\<in> (if x < t * k\n then [t * k\\<dots>,k - Suc 0]\n else if x < t * k + (k - Suc 0)\n      then [Suc x\\<dots>,t * k + (k - Suc 0) - Suc x]\n      else {}) \\<longrightarrow>\n                             s xa = NoMsg)", "apply (rule less_imp_neq)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>Suc 0 < k; m \\<noteq> NoMsg;\n        \\<And>t. event t = (t mod k = k - Suc 0); t0 = t * k;\n        t * k < t * k + k - Suc 0;\n        \\<exists>x.\n           (t * k \\<le> x \\<and> x \\<le> t * k + (k - Suc 0)) \\<and>\n           s x = m \\<and>\n           (\\<forall>xa.\n               xa \\<in> (if x < t * k then [t * k\\<dots>,k - Suc 0]\n                         else if x < t * k + (k - Suc 0)\n                              then [Suc x\\<dots>,t * k + (k - Suc 0) -\n           Suc x]\n                              else {}) \\<longrightarrow>\n               s xa = NoMsg);\n        t * k \\<le> x; x < t * k + k - Suc 0\\<rbrakk>\n       \\<Longrightarrow> x mod k < k - Suc 0\n 2. \\<lbrakk>Suc 0 < k; m \\<noteq> NoMsg;\n     \\<And>t. event t = (t mod k = k - Suc 0); t0 = t * k;\n     t * k < t * k + k - Suc 0;\n     \\<exists>x.\n        (t * k \\<le> x \\<and> x \\<le> t * k + (k - Suc 0)) \\<and>\n        s x = m \\<and>\n        (\\<forall>xa.\n            xa \\<in> (if x < t * k then [t * k\\<dots>,k - Suc 0]\n                      else if x < t * k + (k - Suc 0)\n                           then [Suc x\\<dots>,t * k + (k - Suc 0) - Suc x]\n                           else {}) \\<longrightarrow>\n            s xa = NoMsg);\n     \\<And>x.\n        \\<lbrakk>t * k \\<le> x; x < t * k + k - Suc 0\\<rbrakk>\n        \\<Longrightarrow> x mod k \\<noteq> k - Suc 0\\<rbrakk>\n    \\<Longrightarrow> (\\<exists>x\\<ge>0 + t * k.\n                          (x mod k = k - Suc 0 \\<and> s x = m) \\<and>\n                          (\\<forall>xa.\n                              xa \\<in> (if x \\<le> 0 + t * k then {}\n  else [0 + t * k\\<dots>,x - Suc (0 + t * k)]) \\<longrightarrow>\n                              xa mod k \\<noteq> k - Suc 0)) \\<or>\n                      (\\<exists>x\\<ge>0 + t * k.\n                          (x mod k \\<noteq> k - Suc 0 \\<and>\n                           s x = m \\<and>\n                           (\\<exists>xa\\<ge>0 + Suc x.\n                               (xa mod k = k - Suc 0 \\<and>\n                                s xa = NoMsg) \\<and>\n                               (\\<forall>xb.\n                                   xb \\<in> (if xa \\<le> 0 + Suc x then {}\n       else [0 + Suc x\\<dots>,xa - Suc (0 + Suc x)]) \\<longrightarrow>\n                                   s xb = NoMsg))) \\<and>\n                          (\\<forall>xa.\n                              xa \\<in> (if x \\<le> 0 + t * k then {}\n  else [0 + t * k\\<dots>,x - Suc (0 + t * k)]) \\<longrightarrow>\n                              xa mod k \\<noteq> k - Suc 0))\n 3. \\<lbrakk>Suc 0 < k; m \\<noteq> NoMsg;\n     \\<And>t. event t = (t mod k = k - Suc 0); t0 = t * k;\n     t * k < t * k + k - Suc 0;\n     (\\<exists>x\\<ge>0 + t * k.\n         (x mod k = k - Suc 0 \\<and> s x = m) \\<and>\n         (\\<forall>xa.\n             xa \\<in> (if x \\<le> 0 + t * k then {}\n                       else [0 +\n                             t *\n                             k\\<dots>,x -\nSuc (0 + t * k)]) \\<longrightarrow>\n             xa mod k \\<noteq> k - Suc 0)) \\<or>\n     (\\<exists>x\\<ge>0 + t * k.\n         (x mod k \\<noteq> k - Suc 0 \\<and>\n          s x = m \\<and>\n          (\\<exists>xa\\<ge>0 + Suc x.\n              (xa mod k = k - Suc 0 \\<and> s xa = NoMsg) \\<and>\n              (\\<forall>xb.\n                  xb \\<in> (if xa \\<le> 0 + Suc x then {}\n                            else [0 +\n                                  Suc x\\<dots>,xa -\n         Suc (0 + Suc x)]) \\<longrightarrow>\n                  s xb = NoMsg))) \\<and>\n         (\\<forall>xa.\n             xa \\<in> (if x \\<le> 0 + t * k then {}\n                       else [0 +\n                             t *\n                             k\\<dots>,x -\nSuc (0 + t * k)]) \\<longrightarrow>\n             xa mod k \\<noteq> k - Suc 0))\\<rbrakk>\n    \\<Longrightarrow> \\<exists>x.\n                         (t * k \\<le> x \\<and>\n                          x \\<le> t * k + (k - Suc 0)) \\<and>\n                         s x = m \\<and>\n                         (\\<forall>xa.\n                             xa \\<in> (if x < t * k\n then [t * k\\<dots>,k - Suc 0]\n else if x < t * k + (k - Suc 0)\n      then [Suc x\\<dots>,t * k + (k - Suc 0) - Suc x]\n      else {}) \\<longrightarrow>\n                             s xa = NoMsg)", "apply (rule le_pred_imp_less, simp)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>Suc 0 < k; m \\<noteq> NoMsg;\n        \\<And>t. event t = (t mod k = k - Suc 0); t0 = t * k;\n        t * k < t * k + k - Suc 0;\n        \\<exists>x.\n           (t * k \\<le> x \\<and> x \\<le> t * k + (k - Suc 0)) \\<and>\n           s x = m \\<and>\n           (\\<forall>xa.\n               xa \\<in> (if x < t * k then [t * k\\<dots>,k - Suc 0]\n                         else if x < t * k + (k - Suc 0)\n                              then [Suc x\\<dots>,t * k + (k - Suc 0) -\n           Suc x]\n                              else {}) \\<longrightarrow>\n               s xa = NoMsg);\n        t * k \\<le> x; x < t * k + k - Suc 0\\<rbrakk>\n       \\<Longrightarrow> x mod k \\<le> k - Suc 0 - Suc 0\n 2. \\<lbrakk>Suc 0 < k; m \\<noteq> NoMsg;\n     \\<And>t. event t = (t mod k = k - Suc 0); t0 = t * k;\n     t * k < t * k + k - Suc 0;\n     \\<exists>x.\n        (t * k \\<le> x \\<and> x \\<le> t * k + (k - Suc 0)) \\<and>\n        s x = m \\<and>\n        (\\<forall>xa.\n            xa \\<in> (if x < t * k then [t * k\\<dots>,k - Suc 0]\n                      else if x < t * k + (k - Suc 0)\n                           then [Suc x\\<dots>,t * k + (k - Suc 0) - Suc x]\n                           else {}) \\<longrightarrow>\n            s xa = NoMsg);\n     \\<And>x.\n        \\<lbrakk>t * k \\<le> x; x < t * k + k - Suc 0\\<rbrakk>\n        \\<Longrightarrow> x mod k \\<noteq> k - Suc 0\\<rbrakk>\n    \\<Longrightarrow> (\\<exists>x\\<ge>0 + t * k.\n                          (x mod k = k - Suc 0 \\<and> s x = m) \\<and>\n                          (\\<forall>xa.\n                              xa \\<in> (if x \\<le> 0 + t * k then {}\n  else [0 + t * k\\<dots>,x - Suc (0 + t * k)]) \\<longrightarrow>\n                              xa mod k \\<noteq> k - Suc 0)) \\<or>\n                      (\\<exists>x\\<ge>0 + t * k.\n                          (x mod k \\<noteq> k - Suc 0 \\<and>\n                           s x = m \\<and>\n                           (\\<exists>xa\\<ge>0 + Suc x.\n                               (xa mod k = k - Suc 0 \\<and>\n                                s xa = NoMsg) \\<and>\n                               (\\<forall>xb.\n                                   xb \\<in> (if xa \\<le> 0 + Suc x then {}\n       else [0 + Suc x\\<dots>,xa - Suc (0 + Suc x)]) \\<longrightarrow>\n                                   s xb = NoMsg))) \\<and>\n                          (\\<forall>xa.\n                              xa \\<in> (if x \\<le> 0 + t * k then {}\n  else [0 + t * k\\<dots>,x - Suc (0 + t * k)]) \\<longrightarrow>\n                              xa mod k \\<noteq> k - Suc 0))\n 3. \\<lbrakk>Suc 0 < k; m \\<noteq> NoMsg;\n     \\<And>t. event t = (t mod k = k - Suc 0); t0 = t * k;\n     t * k < t * k + k - Suc 0;\n     (\\<exists>x\\<ge>0 + t * k.\n         (x mod k = k - Suc 0 \\<and> s x = m) \\<and>\n         (\\<forall>xa.\n             xa \\<in> (if x \\<le> 0 + t * k then {}\n                       else [0 +\n                             t *\n                             k\\<dots>,x -\nSuc (0 + t * k)]) \\<longrightarrow>\n             xa mod k \\<noteq> k - Suc 0)) \\<or>\n     (\\<exists>x\\<ge>0 + t * k.\n         (x mod k \\<noteq> k - Suc 0 \\<and>\n          s x = m \\<and>\n          (\\<exists>xa\\<ge>0 + Suc x.\n              (xa mod k = k - Suc 0 \\<and> s xa = NoMsg) \\<and>\n              (\\<forall>xb.\n                  xb \\<in> (if xa \\<le> 0 + Suc x then {}\n                            else [0 +\n                                  Suc x\\<dots>,xa -\n         Suc (0 + Suc x)]) \\<longrightarrow>\n                  s xb = NoMsg))) \\<and>\n         (\\<forall>xa.\n             xa \\<in> (if x \\<le> 0 + t * k then {}\n                       else [0 +\n                             t *\n                             k\\<dots>,x -\nSuc (0 + t * k)]) \\<longrightarrow>\n             xa mod k \\<noteq> k - Suc 0))\\<rbrakk>\n    \\<Longrightarrow> \\<exists>x.\n                         (t * k \\<le> x \\<and>\n                          x \\<le> t * k + (k - Suc 0)) \\<and>\n                         s x = m \\<and>\n                         (\\<forall>xa.\n                             xa \\<in> (if x < t * k\n then [t * k\\<dots>,k - Suc 0]\n else if x < t * k + (k - Suc 0)\n      then [Suc x\\<dots>,t * k + (k - Suc 0) - Suc x]\n      else {}) \\<longrightarrow>\n                             s xa = NoMsg)", "apply (simp only: mult.commute[of t k])"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>Suc 0 < k; m \\<noteq> NoMsg;\n        \\<And>t. event t = (t mod k = k - Suc 0); t0 = k * t;\n        k * t < k * t + k - Suc 0;\n        \\<exists>x.\n           (k * t \\<le> x \\<and> x \\<le> k * t + (k - Suc 0)) \\<and>\n           s x = m \\<and>\n           (\\<forall>xa.\n               xa \\<in> (if x < k * t then [k * t\\<dots>,k - Suc 0]\n                         else if x < k * t + (k - Suc 0)\n                              then [Suc x\\<dots>,k * t + (k - Suc 0) -\n           Suc x]\n                              else {}) \\<longrightarrow>\n               s xa = NoMsg);\n        k * t \\<le> x; x < k * t + k - Suc 0\\<rbrakk>\n       \\<Longrightarrow> x mod k \\<le> k - Suc 0 - Suc 0\n 2. \\<lbrakk>Suc 0 < k; m \\<noteq> NoMsg;\n     \\<And>t. event t = (t mod k = k - Suc 0); t0 = t * k;\n     t * k < t * k + k - Suc 0;\n     \\<exists>x.\n        (t * k \\<le> x \\<and> x \\<le> t * k + (k - Suc 0)) \\<and>\n        s x = m \\<and>\n        (\\<forall>xa.\n            xa \\<in> (if x < t * k then [t * k\\<dots>,k - Suc 0]\n                      else if x < t * k + (k - Suc 0)\n                           then [Suc x\\<dots>,t * k + (k - Suc 0) - Suc x]\n                           else {}) \\<longrightarrow>\n            s xa = NoMsg);\n     \\<And>x.\n        \\<lbrakk>t * k \\<le> x; x < t * k + k - Suc 0\\<rbrakk>\n        \\<Longrightarrow> x mod k \\<noteq> k - Suc 0\\<rbrakk>\n    \\<Longrightarrow> (\\<exists>x\\<ge>0 + t * k.\n                          (x mod k = k - Suc 0 \\<and> s x = m) \\<and>\n                          (\\<forall>xa.\n                              xa \\<in> (if x \\<le> 0 + t * k then {}\n  else [0 + t * k\\<dots>,x - Suc (0 + t * k)]) \\<longrightarrow>\n                              xa mod k \\<noteq> k - Suc 0)) \\<or>\n                      (\\<exists>x\\<ge>0 + t * k.\n                          (x mod k \\<noteq> k - Suc 0 \\<and>\n                           s x = m \\<and>\n                           (\\<exists>xa\\<ge>0 + Suc x.\n                               (xa mod k = k - Suc 0 \\<and>\n                                s xa = NoMsg) \\<and>\n                               (\\<forall>xb.\n                                   xb \\<in> (if xa \\<le> 0 + Suc x then {}\n       else [0 + Suc x\\<dots>,xa - Suc (0 + Suc x)]) \\<longrightarrow>\n                                   s xb = NoMsg))) \\<and>\n                          (\\<forall>xa.\n                              xa \\<in> (if x \\<le> 0 + t * k then {}\n  else [0 + t * k\\<dots>,x - Suc (0 + t * k)]) \\<longrightarrow>\n                              xa mod k \\<noteq> k - Suc 0))\n 3. \\<lbrakk>Suc 0 < k; m \\<noteq> NoMsg;\n     \\<And>t. event t = (t mod k = k - Suc 0); t0 = t * k;\n     t * k < t * k + k - Suc 0;\n     (\\<exists>x\\<ge>0 + t * k.\n         (x mod k = k - Suc 0 \\<and> s x = m) \\<and>\n         (\\<forall>xa.\n             xa \\<in> (if x \\<le> 0 + t * k then {}\n                       else [0 +\n                             t *\n                             k\\<dots>,x -\nSuc (0 + t * k)]) \\<longrightarrow>\n             xa mod k \\<noteq> k - Suc 0)) \\<or>\n     (\\<exists>x\\<ge>0 + t * k.\n         (x mod k \\<noteq> k - Suc 0 \\<and>\n          s x = m \\<and>\n          (\\<exists>xa\\<ge>0 + Suc x.\n              (xa mod k = k - Suc 0 \\<and> s xa = NoMsg) \\<and>\n              (\\<forall>xb.\n                  xb \\<in> (if xa \\<le> 0 + Suc x then {}\n                            else [0 +\n                                  Suc x\\<dots>,xa -\n         Suc (0 + Suc x)]) \\<longrightarrow>\n                  s xb = NoMsg))) \\<and>\n         (\\<forall>xa.\n             xa \\<in> (if x \\<le> 0 + t * k then {}\n                       else [0 +\n                             t *\n                             k\\<dots>,x -\nSuc (0 + t * k)]) \\<longrightarrow>\n             xa mod k \\<noteq> k - Suc 0))\\<rbrakk>\n    \\<Longrightarrow> \\<exists>x.\n                         (t * k \\<le> x \\<and>\n                          x \\<le> t * k + (k - Suc 0)) \\<and>\n                         s x = m \\<and>\n                         (\\<forall>xa.\n                             xa \\<in> (if x < t * k\n then [t * k\\<dots>,k - Suc 0]\n else if x < t * k + (k - Suc 0)\n      then [Suc x\\<dots>,t * k + (k - Suc 0) - Suc x]\n      else {}) \\<longrightarrow>\n                             s xa = NoMsg)", "apply (rule between_imp_mod_le[of \"k - Suc 0 - Suc 0\" k t])"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>Suc 0 < k; m \\<noteq> NoMsg;\n        \\<And>t. event t = (t mod k = k - Suc 0); t0 = k * t;\n        k * t < k * t + k - Suc 0;\n        \\<exists>x.\n           (k * t \\<le> x \\<and> x \\<le> k * t + (k - Suc 0)) \\<and>\n           s x = m \\<and>\n           (\\<forall>xa.\n               xa \\<in> (if x < k * t then [k * t\\<dots>,k - Suc 0]\n                         else if x < k * t + (k - Suc 0)\n                              then [Suc x\\<dots>,k * t + (k - Suc 0) -\n           Suc x]\n                              else {}) \\<longrightarrow>\n               s xa = NoMsg);\n        k * t \\<le> x; x < k * t + k - Suc 0\\<rbrakk>\n       \\<Longrightarrow> k - Suc 0 - Suc 0 < k\n 2. \\<And>x.\n       \\<lbrakk>Suc 0 < k; m \\<noteq> NoMsg;\n        \\<And>t. event t = (t mod k = k - Suc 0); t0 = k * t;\n        k * t < k * t + k - Suc 0;\n        \\<exists>x.\n           (k * t \\<le> x \\<and> x \\<le> k * t + (k - Suc 0)) \\<and>\n           s x = m \\<and>\n           (\\<forall>xa.\n               xa \\<in> (if x < k * t then [k * t\\<dots>,k - Suc 0]\n                         else if x < k * t + (k - Suc 0)\n                              then [Suc x\\<dots>,k * t + (k - Suc 0) -\n           Suc x]\n                              else {}) \\<longrightarrow>\n               s xa = NoMsg);\n        k * t \\<le> x; x < k * t + k - Suc 0\\<rbrakk>\n       \\<Longrightarrow> k * t \\<le> x\n 3. \\<And>x.\n       \\<lbrakk>Suc 0 < k; m \\<noteq> NoMsg;\n        \\<And>t. event t = (t mod k = k - Suc 0); t0 = k * t;\n        k * t < k * t + k - Suc 0;\n        \\<exists>x.\n           (k * t \\<le> x \\<and> x \\<le> k * t + (k - Suc 0)) \\<and>\n           s x = m \\<and>\n           (\\<forall>xa.\n               xa \\<in> (if x < k * t then [k * t\\<dots>,k - Suc 0]\n                         else if x < k * t + (k - Suc 0)\n                              then [Suc x\\<dots>,k * t + (k - Suc 0) -\n           Suc x]\n                              else {}) \\<longrightarrow>\n               s xa = NoMsg);\n        k * t \\<le> x; x < k * t + k - Suc 0\\<rbrakk>\n       \\<Longrightarrow> x \\<le> k * t + (k - Suc 0 - Suc 0)\n 4. \\<lbrakk>Suc 0 < k; m \\<noteq> NoMsg;\n     \\<And>t. event t = (t mod k = k - Suc 0); t0 = t * k;\n     t * k < t * k + k - Suc 0;\n     \\<exists>x.\n        (t * k \\<le> x \\<and> x \\<le> t * k + (k - Suc 0)) \\<and>\n        s x = m \\<and>\n        (\\<forall>xa.\n            xa \\<in> (if x < t * k then [t * k\\<dots>,k - Suc 0]\n                      else if x < t * k + (k - Suc 0)\n                           then [Suc x\\<dots>,t * k + (k - Suc 0) - Suc x]\n                           else {}) \\<longrightarrow>\n            s xa = NoMsg);\n     \\<And>x.\n        \\<lbrakk>t * k \\<le> x; x < t * k + k - Suc 0\\<rbrakk>\n        \\<Longrightarrow> x mod k \\<noteq> k - Suc 0\\<rbrakk>\n    \\<Longrightarrow> (\\<exists>x\\<ge>0 + t * k.\n                          (x mod k = k - Suc 0 \\<and> s x = m) \\<and>\n                          (\\<forall>xa.\n                              xa \\<in> (if x \\<le> 0 + t * k then {}\n  else [0 + t * k\\<dots>,x - Suc (0 + t * k)]) \\<longrightarrow>\n                              xa mod k \\<noteq> k - Suc 0)) \\<or>\n                      (\\<exists>x\\<ge>0 + t * k.\n                          (x mod k \\<noteq> k - Suc 0 \\<and>\n                           s x = m \\<and>\n                           (\\<exists>xa\\<ge>0 + Suc x.\n                               (xa mod k = k - Suc 0 \\<and>\n                                s xa = NoMsg) \\<and>\n                               (\\<forall>xb.\n                                   xb \\<in> (if xa \\<le> 0 + Suc x then {}\n       else [0 + Suc x\\<dots>,xa - Suc (0 + Suc x)]) \\<longrightarrow>\n                                   s xb = NoMsg))) \\<and>\n                          (\\<forall>xa.\n                              xa \\<in> (if x \\<le> 0 + t * k then {}\n  else [0 + t * k\\<dots>,x - Suc (0 + t * k)]) \\<longrightarrow>\n                              xa mod k \\<noteq> k - Suc 0))\n 5. \\<lbrakk>Suc 0 < k; m \\<noteq> NoMsg;\n     \\<And>t. event t = (t mod k = k - Suc 0); t0 = t * k;\n     t * k < t * k + k - Suc 0;\n     (\\<exists>x\\<ge>0 + t * k.\n         (x mod k = k - Suc 0 \\<and> s x = m) \\<and>\n         (\\<forall>xa.\n             xa \\<in> (if x \\<le> 0 + t * k then {}\n                       else [0 +\n                             t *\n                             k\\<dots>,x -\nSuc (0 + t * k)]) \\<longrightarrow>\n             xa mod k \\<noteq> k - Suc 0)) \\<or>\n     (\\<exists>x\\<ge>0 + t * k.\n         (x mod k \\<noteq> k - Suc 0 \\<and>\n          s x = m \\<and>\n          (\\<exists>xa\\<ge>0 + Suc x.\n              (xa mod k = k - Suc 0 \\<and> s xa = NoMsg) \\<and>\n              (\\<forall>xb.\n                  xb \\<in> (if xa \\<le> 0 + Suc x then {}\n                            else [0 +\n                                  Suc x\\<dots>,xa -\n         Suc (0 + Suc x)]) \\<longrightarrow>\n                  s xb = NoMsg))) \\<and>\n         (\\<forall>xa.\n             xa \\<in> (if x \\<le> 0 + t * k then {}\n                       else [0 +\n                             t *\n                             k\\<dots>,x -\nSuc (0 + t * k)]) \\<longrightarrow>\n             xa mod k \\<noteq> k - Suc 0))\\<rbrakk>\n    \\<Longrightarrow> \\<exists>x.\n                         (t * k \\<le> x \\<and>\n                          x \\<le> t * k + (k - Suc 0)) \\<and>\n                         s x = m \\<and>\n                         (\\<forall>xa.\n                             xa \\<in> (if x < t * k\n then [t * k\\<dots>,k - Suc 0]\n else if x < t * k + (k - Suc 0)\n      then [Suc x\\<dots>,t * k + (k - Suc 0) - Suc x]\n      else {}) \\<longrightarrow>\n                             s xa = NoMsg)", "apply (simp split del: if_split)+"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>Suc 0 < k; m \\<noteq> NoMsg;\n     \\<And>t. event t = (t mod k = k - Suc 0); t0 = t * k;\n     t * k < t * k + k - Suc 0;\n     \\<exists>x\\<ge>t * k.\n        x \\<le> t * k + k - Suc 0 \\<and>\n        s x = m \\<and>\n        (\\<forall>xa.\n            xa \\<in> (if x < t * k then [t * k\\<dots>,k - Suc 0]\n                      else if x < t * k + (k - Suc 0)\n                           then [Suc x\\<dots>,t * k + (k - Suc 0) - Suc x]\n                           else {}) \\<longrightarrow>\n            s xa = NoMsg);\n     \\<And>x.\n        \\<lbrakk>t * k \\<le> x; x < t * k + k - Suc 0\\<rbrakk>\n        \\<Longrightarrow> x mod k \\<noteq> k - Suc 0\\<rbrakk>\n    \\<Longrightarrow> (\\<exists>x\\<ge>t * k.\n                          x mod k = k - Suc 0 \\<and>\n                          s x = m \\<and>\n                          (\\<forall>xa.\n                              xa \\<in> (if x \\<le> t * k then {}\n  else [0 + t * k\\<dots>,x - Suc (0 + t * k)]) \\<longrightarrow>\n                              xa mod k \\<noteq> k - Suc 0)) \\<or>\n                      (\\<exists>x\\<ge>t * k.\n                          x mod k \\<noteq> k - Suc 0 \\<and>\n                          s x = m \\<and>\n                          (\\<exists>xa\\<ge>Suc x.\n                              xa mod k = k - Suc 0 \\<and>\n                              s xa = NoMsg \\<and>\n                              (\\<forall>xb.\n                                  xb \\<in> (if xa \\<le> Suc x then {}\n      else [0 + Suc x\\<dots>,xa - Suc (0 + Suc x)]) \\<longrightarrow>\n                                  s xb = NoMsg)) \\<and>\n                          (\\<forall>xa.\n                              xa \\<in> (if x \\<le> t * k then {}\n  else [0 + t * k\\<dots>,x - Suc (0 + t * k)]) \\<longrightarrow>\n                              xa mod k \\<noteq> k - Suc 0))\n 2. \\<lbrakk>Suc 0 < k; m \\<noteq> NoMsg;\n     \\<And>t. event t = (t mod k = k - Suc 0); t0 = t * k;\n     t * k < t * k + k - Suc 0;\n     (\\<exists>x\\<ge>0 + t * k.\n         (x mod k = k - Suc 0 \\<and> s x = m) \\<and>\n         (\\<forall>xa.\n             xa \\<in> (if x \\<le> 0 + t * k then {}\n                       else [0 +\n                             t *\n                             k\\<dots>,x -\nSuc (0 + t * k)]) \\<longrightarrow>\n             xa mod k \\<noteq> k - Suc 0)) \\<or>\n     (\\<exists>x\\<ge>0 + t * k.\n         (x mod k \\<noteq> k - Suc 0 \\<and>\n          s x = m \\<and>\n          (\\<exists>xa\\<ge>0 + Suc x.\n              (xa mod k = k - Suc 0 \\<and> s xa = NoMsg) \\<and>\n              (\\<forall>xb.\n                  xb \\<in> (if xa \\<le> 0 + Suc x then {}\n                            else [0 +\n                                  Suc x\\<dots>,xa -\n         Suc (0 + Suc x)]) \\<longrightarrow>\n                  s xb = NoMsg))) \\<and>\n         (\\<forall>xa.\n             xa \\<in> (if x \\<le> 0 + t * k then {}\n                       else [0 +\n                             t *\n                             k\\<dots>,x -\nSuc (0 + t * k)]) \\<longrightarrow>\n             xa mod k \\<noteq> k - Suc 0))\\<rbrakk>\n    \\<Longrightarrow> \\<exists>x.\n                         (t * k \\<le> x \\<and>\n                          x \\<le> t * k + (k - Suc 0)) \\<and>\n                         s x = m \\<and>\n                         (\\<forall>xa.\n                             xa \\<in> (if x < t * k\n then [t * k\\<dots>,k - Suc 0]\n else if x < t * k + (k - Suc 0)\n      then [Suc x\\<dots>,t * k + (k - Suc 0) - Suc x]\n      else {}) \\<longrightarrow>\n                             s xa = NoMsg)", "apply (elim exE conjE, rename_tac t1)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>t1.\n       \\<lbrakk>Suc 0 < k; m \\<noteq> NoMsg;\n        \\<And>t. event t = (t mod k = k - Suc 0); t0 = t * k;\n        t * k < t * k + k - Suc 0;\n        \\<And>x.\n           \\<lbrakk>t * k \\<le> x; x < t * k + k - Suc 0\\<rbrakk>\n           \\<Longrightarrow> x mod k \\<noteq> k - Suc 0;\n        t * k \\<le> t1; t1 \\<le> t * k + k - Suc 0; s t1 = m;\n        \\<forall>x.\n           x \\<in> (if t1 < t * k then [t * k\\<dots>,k - Suc 0]\n                    else if t1 < t * k + (k - Suc 0)\n                         then [Suc t1\\<dots>,t * k + (k - Suc 0) - Suc t1]\n                         else {}) \\<longrightarrow>\n           s x = NoMsg\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>x\\<ge>t * k.\n                             x mod k = k - Suc 0 \\<and>\n                             s x = m \\<and>\n                             (\\<forall>xa.\n                                 xa \\<in> (if x \\<le> t * k then {}\n     else [0 + t * k\\<dots>,x - Suc (0 + t * k)]) \\<longrightarrow>\n                                 xa mod k \\<noteq> k - Suc 0)) \\<or>\n                         (\\<exists>x\\<ge>t * k.\n                             x mod k \\<noteq> k - Suc 0 \\<and>\n                             s x = m \\<and>\n                             (\\<exists>xa\\<ge>Suc x.\n                                 xa mod k = k - Suc 0 \\<and>\n                                 s xa = NoMsg \\<and>\n                                 (\\<forall>xb.\n                                     xb \\<in> (if xa \\<le> Suc x then {}\n         else [0 + Suc x\\<dots>,xa - Suc (0 + Suc x)]) \\<longrightarrow>\n                                     s xb = NoMsg)) \\<and>\n                             (\\<forall>xa.\n                                 xa \\<in> (if x \\<le> t * k then {}\n     else [0 + t * k\\<dots>,x - Suc (0 + t * k)]) \\<longrightarrow>\n                                 xa mod k \\<noteq> k - Suc 0))\n 2. \\<lbrakk>Suc 0 < k; m \\<noteq> NoMsg;\n     \\<And>t. event t = (t mod k = k - Suc 0); t0 = t * k;\n     t * k < t * k + k - Suc 0;\n     (\\<exists>x\\<ge>0 + t * k.\n         (x mod k = k - Suc 0 \\<and> s x = m) \\<and>\n         (\\<forall>xa.\n             xa \\<in> (if x \\<le> 0 + t * k then {}\n                       else [0 +\n                             t *\n                             k\\<dots>,x -\nSuc (0 + t * k)]) \\<longrightarrow>\n             xa mod k \\<noteq> k - Suc 0)) \\<or>\n     (\\<exists>x\\<ge>0 + t * k.\n         (x mod k \\<noteq> k - Suc 0 \\<and>\n          s x = m \\<and>\n          (\\<exists>xa\\<ge>0 + Suc x.\n              (xa mod k = k - Suc 0 \\<and> s xa = NoMsg) \\<and>\n              (\\<forall>xb.\n                  xb \\<in> (if xa \\<le> 0 + Suc x then {}\n                            else [0 +\n                                  Suc x\\<dots>,xa -\n         Suc (0 + Suc x)]) \\<longrightarrow>\n                  s xb = NoMsg))) \\<and>\n         (\\<forall>xa.\n             xa \\<in> (if x \\<le> 0 + t * k then {}\n                       else [0 +\n                             t *\n                             k\\<dots>,x -\nSuc (0 + t * k)]) \\<longrightarrow>\n             xa mod k \\<noteq> k - Suc 0))\\<rbrakk>\n    \\<Longrightarrow> \\<exists>x.\n                         (t * k \\<le> x \\<and>\n                          x \\<le> t * k + (k - Suc 0)) \\<and>\n                         s x = m \\<and>\n                         (\\<forall>xa.\n                             xa \\<in> (if x < t * k\n then [t * k\\<dots>,k - Suc 0]\n else if x < t * k + (k - Suc 0)\n      then [Suc x\\<dots>,t * k + (k - Suc 0) - Suc x]\n      else {}) \\<longrightarrow>\n                             s xa = NoMsg)", "apply (drule_tac x=t1 in order_le_imp_less_or_eq, erule disjE)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>t1.\n       \\<lbrakk>Suc 0 < k; m \\<noteq> NoMsg;\n        \\<And>t. event t = (t mod k = k - Suc 0); t0 = t * k;\n        t * k < t * k + k - Suc 0;\n        \\<And>x.\n           \\<lbrakk>t * k \\<le> x; x < t * k + k - Suc 0\\<rbrakk>\n           \\<Longrightarrow> x mod k \\<noteq> k - Suc 0;\n        t * k \\<le> t1; s t1 = m;\n        \\<forall>x.\n           x \\<in> (if t1 < t * k then [t * k\\<dots>,k - Suc 0]\n                    else if t1 < t * k + (k - Suc 0)\n                         then [Suc t1\\<dots>,t * k + (k - Suc 0) - Suc t1]\n                         else {}) \\<longrightarrow>\n           s x = NoMsg;\n        t1 < t * k + k - Suc 0\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>x\\<ge>t * k.\n                             x mod k = k - Suc 0 \\<and>\n                             s x = m \\<and>\n                             (\\<forall>xa.\n                                 xa \\<in> (if x \\<le> t * k then {}\n     else [0 + t * k\\<dots>,x - Suc (0 + t * k)]) \\<longrightarrow>\n                                 xa mod k \\<noteq> k - Suc 0)) \\<or>\n                         (\\<exists>x\\<ge>t * k.\n                             x mod k \\<noteq> k - Suc 0 \\<and>\n                             s x = m \\<and>\n                             (\\<exists>xa\\<ge>Suc x.\n                                 xa mod k = k - Suc 0 \\<and>\n                                 s xa = NoMsg \\<and>\n                                 (\\<forall>xb.\n                                     xb \\<in> (if xa \\<le> Suc x then {}\n         else [0 + Suc x\\<dots>,xa - Suc (0 + Suc x)]) \\<longrightarrow>\n                                     s xb = NoMsg)) \\<and>\n                             (\\<forall>xa.\n                                 xa \\<in> (if x \\<le> t * k then {}\n     else [0 + t * k\\<dots>,x - Suc (0 + t * k)]) \\<longrightarrow>\n                                 xa mod k \\<noteq> k - Suc 0))\n 2. \\<And>t1.\n       \\<lbrakk>Suc 0 < k; m \\<noteq> NoMsg;\n        \\<And>t. event t = (t mod k = k - Suc 0); t0 = t * k;\n        t * k < t * k + k - Suc 0;\n        \\<And>x.\n           \\<lbrakk>t * k \\<le> x; x < t * k + k - Suc 0\\<rbrakk>\n           \\<Longrightarrow> x mod k \\<noteq> k - Suc 0;\n        t * k \\<le> t1; s t1 = m;\n        \\<forall>x.\n           x \\<in> (if t1 < t * k then [t * k\\<dots>,k - Suc 0]\n                    else if t1 < t * k + (k - Suc 0)\n                         then [Suc t1\\<dots>,t * k + (k - Suc 0) - Suc t1]\n                         else {}) \\<longrightarrow>\n           s x = NoMsg;\n        t1 = t * k + k - Suc 0\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>x\\<ge>t * k.\n                             x mod k = k - Suc 0 \\<and>\n                             s x = m \\<and>\n                             (\\<forall>xa.\n                                 xa \\<in> (if x \\<le> t * k then {}\n     else [0 + t * k\\<dots>,x - Suc (0 + t * k)]) \\<longrightarrow>\n                                 xa mod k \\<noteq> k - Suc 0)) \\<or>\n                         (\\<exists>x\\<ge>t * k.\n                             x mod k \\<noteq> k - Suc 0 \\<and>\n                             s x = m \\<and>\n                             (\\<exists>xa\\<ge>Suc x.\n                                 xa mod k = k - Suc 0 \\<and>\n                                 s xa = NoMsg \\<and>\n                                 (\\<forall>xb.\n                                     xb \\<in> (if xa \\<le> Suc x then {}\n         else [0 + Suc x\\<dots>,xa - Suc (0 + Suc x)]) \\<longrightarrow>\n                                     s xb = NoMsg)) \\<and>\n                             (\\<forall>xa.\n                                 xa \\<in> (if x \\<le> t * k then {}\n     else [0 + t * k\\<dots>,x - Suc (0 + t * k)]) \\<longrightarrow>\n                                 xa mod k \\<noteq> k - Suc 0))\n 3. \\<lbrakk>Suc 0 < k; m \\<noteq> NoMsg;\n     \\<And>t. event t = (t mod k = k - Suc 0); t0 = t * k;\n     t * k < t * k + k - Suc 0;\n     (\\<exists>x\\<ge>0 + t * k.\n         (x mod k = k - Suc 0 \\<and> s x = m) \\<and>\n         (\\<forall>xa.\n             xa \\<in> (if x \\<le> 0 + t * k then {}\n                       else [0 +\n                             t *\n                             k\\<dots>,x -\nSuc (0 + t * k)]) \\<longrightarrow>\n             xa mod k \\<noteq> k - Suc 0)) \\<or>\n     (\\<exists>x\\<ge>0 + t * k.\n         (x mod k \\<noteq> k - Suc 0 \\<and>\n          s x = m \\<and>\n          (\\<exists>xa\\<ge>0 + Suc x.\n              (xa mod k = k - Suc 0 \\<and> s xa = NoMsg) \\<and>\n              (\\<forall>xb.\n                  xb \\<in> (if xa \\<le> 0 + Suc x then {}\n                            else [0 +\n                                  Suc x\\<dots>,xa -\n         Suc (0 + Suc x)]) \\<longrightarrow>\n                  s xb = NoMsg))) \\<and>\n         (\\<forall>xa.\n             xa \\<in> (if x \\<le> 0 + t * k then {}\n                       else [0 +\n                             t *\n                             k\\<dots>,x -\nSuc (0 + t * k)]) \\<longrightarrow>\n             xa mod k \\<noteq> k - Suc 0))\\<rbrakk>\n    \\<Longrightarrow> \\<exists>x.\n                         (t * k \\<le> x \\<and>\n                          x \\<le> t * k + (k - Suc 0)) \\<and>\n                         s x = m \\<and>\n                         (\\<forall>xa.\n                             xa \\<in> (if x < t * k\n then [t * k\\<dots>,k - Suc 0]\n else if x < t * k + (k - Suc 0)\n      then [Suc x\\<dots>,t * k + (k - Suc 0) - Suc x]\n      else {}) \\<longrightarrow>\n                             s xa = NoMsg)", "prefer 2"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>t1.\n       \\<lbrakk>Suc 0 < k; m \\<noteq> NoMsg;\n        \\<And>t. event t = (t mod k = k - Suc 0); t0 = t * k;\n        t * k < t * k + k - Suc 0;\n        \\<And>x.\n           \\<lbrakk>t * k \\<le> x; x < t * k + k - Suc 0\\<rbrakk>\n           \\<Longrightarrow> x mod k \\<noteq> k - Suc 0;\n        t * k \\<le> t1; s t1 = m;\n        \\<forall>x.\n           x \\<in> (if t1 < t * k then [t * k\\<dots>,k - Suc 0]\n                    else if t1 < t * k + (k - Suc 0)\n                         then [Suc t1\\<dots>,t * k + (k - Suc 0) - Suc t1]\n                         else {}) \\<longrightarrow>\n           s x = NoMsg;\n        t1 = t * k + k - Suc 0\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>x\\<ge>t * k.\n                             x mod k = k - Suc 0 \\<and>\n                             s x = m \\<and>\n                             (\\<forall>xa.\n                                 xa \\<in> (if x \\<le> t * k then {}\n     else [0 + t * k\\<dots>,x - Suc (0 + t * k)]) \\<longrightarrow>\n                                 xa mod k \\<noteq> k - Suc 0)) \\<or>\n                         (\\<exists>x\\<ge>t * k.\n                             x mod k \\<noteq> k - Suc 0 \\<and>\n                             s x = m \\<and>\n                             (\\<exists>xa\\<ge>Suc x.\n                                 xa mod k = k - Suc 0 \\<and>\n                                 s xa = NoMsg \\<and>\n                                 (\\<forall>xb.\n                                     xb \\<in> (if xa \\<le> Suc x then {}\n         else [0 + Suc x\\<dots>,xa - Suc (0 + Suc x)]) \\<longrightarrow>\n                                     s xb = NoMsg)) \\<and>\n                             (\\<forall>xa.\n                                 xa \\<in> (if x \\<le> t * k then {}\n     else [0 + t * k\\<dots>,x - Suc (0 + t * k)]) \\<longrightarrow>\n                                 xa mod k \\<noteq> k - Suc 0))\n 2. \\<And>t1.\n       \\<lbrakk>Suc 0 < k; m \\<noteq> NoMsg;\n        \\<And>t. event t = (t mod k = k - Suc 0); t0 = t * k;\n        t * k < t * k + k - Suc 0;\n        \\<And>x.\n           \\<lbrakk>t * k \\<le> x; x < t * k + k - Suc 0\\<rbrakk>\n           \\<Longrightarrow> x mod k \\<noteq> k - Suc 0;\n        t * k \\<le> t1; s t1 = m;\n        \\<forall>x.\n           x \\<in> (if t1 < t * k then [t * k\\<dots>,k - Suc 0]\n                    else if t1 < t * k + (k - Suc 0)\n                         then [Suc t1\\<dots>,t * k + (k - Suc 0) - Suc t1]\n                         else {}) \\<longrightarrow>\n           s x = NoMsg;\n        t1 < t * k + k - Suc 0\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>x\\<ge>t * k.\n                             x mod k = k - Suc 0 \\<and>\n                             s x = m \\<and>\n                             (\\<forall>xa.\n                                 xa \\<in> (if x \\<le> t * k then {}\n     else [0 + t * k\\<dots>,x - Suc (0 + t * k)]) \\<longrightarrow>\n                                 xa mod k \\<noteq> k - Suc 0)) \\<or>\n                         (\\<exists>x\\<ge>t * k.\n                             x mod k \\<noteq> k - Suc 0 \\<and>\n                             s x = m \\<and>\n                             (\\<exists>xa\\<ge>Suc x.\n                                 xa mod k = k - Suc 0 \\<and>\n                                 s xa = NoMsg \\<and>\n                                 (\\<forall>xb.\n                                     xb \\<in> (if xa \\<le> Suc x then {}\n         else [0 + Suc x\\<dots>,xa - Suc (0 + Suc x)]) \\<longrightarrow>\n                                     s xb = NoMsg)) \\<and>\n                             (\\<forall>xa.\n                                 xa \\<in> (if x \\<le> t * k then {}\n     else [0 + t * k\\<dots>,x - Suc (0 + t * k)]) \\<longrightarrow>\n                                 xa mod k \\<noteq> k - Suc 0))\n 3. \\<lbrakk>Suc 0 < k; m \\<noteq> NoMsg;\n     \\<And>t. event t = (t mod k = k - Suc 0); t0 = t * k;\n     t * k < t * k + k - Suc 0;\n     (\\<exists>x\\<ge>0 + t * k.\n         (x mod k = k - Suc 0 \\<and> s x = m) \\<and>\n         (\\<forall>xa.\n             xa \\<in> (if x \\<le> 0 + t * k then {}\n                       else [0 +\n                             t *\n                             k\\<dots>,x -\nSuc (0 + t * k)]) \\<longrightarrow>\n             xa mod k \\<noteq> k - Suc 0)) \\<or>\n     (\\<exists>x\\<ge>0 + t * k.\n         (x mod k \\<noteq> k - Suc 0 \\<and>\n          s x = m \\<and>\n          (\\<exists>xa\\<ge>0 + Suc x.\n              (xa mod k = k - Suc 0 \\<and> s xa = NoMsg) \\<and>\n              (\\<forall>xb.\n                  xb \\<in> (if xa \\<le> 0 + Suc x then {}\n                            else [0 +\n                                  Suc x\\<dots>,xa -\n         Suc (0 + Suc x)]) \\<longrightarrow>\n                  s xb = NoMsg))) \\<and>\n         (\\<forall>xa.\n             xa \\<in> (if x \\<le> 0 + t * k then {}\n                       else [0 +\n                             t *\n                             k\\<dots>,x -\nSuc (0 + t * k)]) \\<longrightarrow>\n             xa mod k \\<noteq> k - Suc 0))\\<rbrakk>\n    \\<Longrightarrow> \\<exists>x.\n                         (t * k \\<le> x \\<and>\n                          x \\<le> t * k + (k - Suc 0)) \\<and>\n                         s x = m \\<and>\n                         (\\<forall>xa.\n                             xa \\<in> (if x < t * k\n then [t * k\\<dots>,k - Suc 0]\n else if x < t * k + (k - Suc 0)\n      then [Suc x\\<dots>,t * k + (k - Suc 0) - Suc x]\n      else {}) \\<longrightarrow>\n                             s xa = NoMsg)", "apply (rule disjI1)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>t1.\n       \\<lbrakk>Suc 0 < k; m \\<noteq> NoMsg;\n        \\<And>t. event t = (t mod k = k - Suc 0); t0 = t * k;\n        t * k < t * k + k - Suc 0;\n        \\<And>x.\n           \\<lbrakk>t * k \\<le> x; x < t * k + k - Suc 0\\<rbrakk>\n           \\<Longrightarrow> x mod k \\<noteq> k - Suc 0;\n        t * k \\<le> t1; s t1 = m;\n        \\<forall>x.\n           x \\<in> (if t1 < t * k then [t * k\\<dots>,k - Suc 0]\n                    else if t1 < t * k + (k - Suc 0)\n                         then [Suc t1\\<dots>,t * k + (k - Suc 0) - Suc t1]\n                         else {}) \\<longrightarrow>\n           s x = NoMsg;\n        t1 = t * k + k - Suc 0\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x\\<ge>t * k.\n                            x mod k = k - Suc 0 \\<and>\n                            s x = m \\<and>\n                            (\\<forall>xa.\n                                xa \\<in> (if x \\<le> t * k then {}\n    else [0 + t * k\\<dots>,x - Suc (0 + t * k)]) \\<longrightarrow>\n                                xa mod k \\<noteq> k - Suc 0)\n 2. \\<And>t1.\n       \\<lbrakk>Suc 0 < k; m \\<noteq> NoMsg;\n        \\<And>t. event t = (t mod k = k - Suc 0); t0 = t * k;\n        t * k < t * k + k - Suc 0;\n        \\<And>x.\n           \\<lbrakk>t * k \\<le> x; x < t * k + k - Suc 0\\<rbrakk>\n           \\<Longrightarrow> x mod k \\<noteq> k - Suc 0;\n        t * k \\<le> t1; s t1 = m;\n        \\<forall>x.\n           x \\<in> (if t1 < t * k then [t * k\\<dots>,k - Suc 0]\n                    else if t1 < t * k + (k - Suc 0)\n                         then [Suc t1\\<dots>,t * k + (k - Suc 0) - Suc t1]\n                         else {}) \\<longrightarrow>\n           s x = NoMsg;\n        t1 < t * k + k - Suc 0\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>x\\<ge>t * k.\n                             x mod k = k - Suc 0 \\<and>\n                             s x = m \\<and>\n                             (\\<forall>xa.\n                                 xa \\<in> (if x \\<le> t * k then {}\n     else [0 + t * k\\<dots>,x - Suc (0 + t * k)]) \\<longrightarrow>\n                                 xa mod k \\<noteq> k - Suc 0)) \\<or>\n                         (\\<exists>x\\<ge>t * k.\n                             x mod k \\<noteq> k - Suc 0 \\<and>\n                             s x = m \\<and>\n                             (\\<exists>xa\\<ge>Suc x.\n                                 xa mod k = k - Suc 0 \\<and>\n                                 s xa = NoMsg \\<and>\n                                 (\\<forall>xb.\n                                     xb \\<in> (if xa \\<le> Suc x then {}\n         else [0 + Suc x\\<dots>,xa - Suc (0 + Suc x)]) \\<longrightarrow>\n                                     s xb = NoMsg)) \\<and>\n                             (\\<forall>xa.\n                                 xa \\<in> (if x \\<le> t * k then {}\n     else [0 + t * k\\<dots>,x - Suc (0 + t * k)]) \\<longrightarrow>\n                                 xa mod k \\<noteq> k - Suc 0))\n 3. \\<lbrakk>Suc 0 < k; m \\<noteq> NoMsg;\n     \\<And>t. event t = (t mod k = k - Suc 0); t0 = t * k;\n     t * k < t * k + k - Suc 0;\n     (\\<exists>x\\<ge>0 + t * k.\n         (x mod k = k - Suc 0 \\<and> s x = m) \\<and>\n         (\\<forall>xa.\n             xa \\<in> (if x \\<le> 0 + t * k then {}\n                       else [0 +\n                             t *\n                             k\\<dots>,x -\nSuc (0 + t * k)]) \\<longrightarrow>\n             xa mod k \\<noteq> k - Suc 0)) \\<or>\n     (\\<exists>x\\<ge>0 + t * k.\n         (x mod k \\<noteq> k - Suc 0 \\<and>\n          s x = m \\<and>\n          (\\<exists>xa\\<ge>0 + Suc x.\n              (xa mod k = k - Suc 0 \\<and> s xa = NoMsg) \\<and>\n              (\\<forall>xb.\n                  xb \\<in> (if xa \\<le> 0 + Suc x then {}\n                            else [0 +\n                                  Suc x\\<dots>,xa -\n         Suc (0 + Suc x)]) \\<longrightarrow>\n                  s xb = NoMsg))) \\<and>\n         (\\<forall>xa.\n             xa \\<in> (if x \\<le> 0 + t * k then {}\n                       else [0 +\n                             t *\n                             k\\<dots>,x -\nSuc (0 + t * k)]) \\<longrightarrow>\n             xa mod k \\<noteq> k - Suc 0))\\<rbrakk>\n    \\<Longrightarrow> \\<exists>x.\n                         (t * k \\<le> x \\<and>\n                          x \\<le> t * k + (k - Suc 0)) \\<and>\n                         s x = m \\<and>\n                         (\\<forall>xa.\n                             xa \\<in> (if x < t * k\n then [t * k\\<dots>,k - Suc 0]\n else if x < t * k + (k - Suc 0)\n      then [Suc x\\<dots>,t * k + (k - Suc 0) - Suc x]\n      else {}) \\<longrightarrow>\n                             s xa = NoMsg)", "apply (rule_tac x=t1 in exI)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>t1.\n       \\<lbrakk>Suc 0 < k; m \\<noteq> NoMsg;\n        \\<And>t. event t = (t mod k = k - Suc 0); t0 = t * k;\n        t * k < t * k + k - Suc 0;\n        \\<And>x.\n           \\<lbrakk>t * k \\<le> x; x < t * k + k - Suc 0\\<rbrakk>\n           \\<Longrightarrow> x mod k \\<noteq> k - Suc 0;\n        t * k \\<le> t1; s t1 = m;\n        \\<forall>x.\n           x \\<in> (if t1 < t * k then [t * k\\<dots>,k - Suc 0]\n                    else if t1 < t * k + (k - Suc 0)\n                         then [Suc t1\\<dots>,t * k + (k - Suc 0) - Suc t1]\n                         else {}) \\<longrightarrow>\n           s x = NoMsg;\n        t1 = t * k + k - Suc 0\\<rbrakk>\n       \\<Longrightarrow> t * k \\<le> t1 \\<and>\n                         t1 mod k = k - Suc 0 \\<and>\n                         s t1 = m \\<and>\n                         (\\<forall>x.\n                             x \\<in> (if t1 \\<le> t * k then {}\nelse [0 + t * k\\<dots>,t1 - Suc (0 + t * k)]) \\<longrightarrow>\n                             x mod k \\<noteq> k - Suc 0)\n 2. \\<And>t1.\n       \\<lbrakk>Suc 0 < k; m \\<noteq> NoMsg;\n        \\<And>t. event t = (t mod k = k - Suc 0); t0 = t * k;\n        t * k < t * k + k - Suc 0;\n        \\<And>x.\n           \\<lbrakk>t * k \\<le> x; x < t * k + k - Suc 0\\<rbrakk>\n           \\<Longrightarrow> x mod k \\<noteq> k - Suc 0;\n        t * k \\<le> t1; s t1 = m;\n        \\<forall>x.\n           x \\<in> (if t1 < t * k then [t * k\\<dots>,k - Suc 0]\n                    else if t1 < t * k + (k - Suc 0)\n                         then [Suc t1\\<dots>,t * k + (k - Suc 0) - Suc t1]\n                         else {}) \\<longrightarrow>\n           s x = NoMsg;\n        t1 < t * k + k - Suc 0\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>x\\<ge>t * k.\n                             x mod k = k - Suc 0 \\<and>\n                             s x = m \\<and>\n                             (\\<forall>xa.\n                                 xa \\<in> (if x \\<le> t * k then {}\n     else [0 + t * k\\<dots>,x - Suc (0 + t * k)]) \\<longrightarrow>\n                                 xa mod k \\<noteq> k - Suc 0)) \\<or>\n                         (\\<exists>x\\<ge>t * k.\n                             x mod k \\<noteq> k - Suc 0 \\<and>\n                             s x = m \\<and>\n                             (\\<exists>xa\\<ge>Suc x.\n                                 xa mod k = k - Suc 0 \\<and>\n                                 s xa = NoMsg \\<and>\n                                 (\\<forall>xb.\n                                     xb \\<in> (if xa \\<le> Suc x then {}\n         else [0 + Suc x\\<dots>,xa - Suc (0 + Suc x)]) \\<longrightarrow>\n                                     s xb = NoMsg)) \\<and>\n                             (\\<forall>xa.\n                                 xa \\<in> (if x \\<le> t * k then {}\n     else [0 + t * k\\<dots>,x - Suc (0 + t * k)]) \\<longrightarrow>\n                                 xa mod k \\<noteq> k - Suc 0))\n 3. \\<lbrakk>Suc 0 < k; m \\<noteq> NoMsg;\n     \\<And>t. event t = (t mod k = k - Suc 0); t0 = t * k;\n     t * k < t * k + k - Suc 0;\n     (\\<exists>x\\<ge>0 + t * k.\n         (x mod k = k - Suc 0 \\<and> s x = m) \\<and>\n         (\\<forall>xa.\n             xa \\<in> (if x \\<le> 0 + t * k then {}\n                       else [0 +\n                             t *\n                             k\\<dots>,x -\nSuc (0 + t * k)]) \\<longrightarrow>\n             xa mod k \\<noteq> k - Suc 0)) \\<or>\n     (\\<exists>x\\<ge>0 + t * k.\n         (x mod k \\<noteq> k - Suc 0 \\<and>\n          s x = m \\<and>\n          (\\<exists>xa\\<ge>0 + Suc x.\n              (xa mod k = k - Suc 0 \\<and> s xa = NoMsg) \\<and>\n              (\\<forall>xb.\n                  xb \\<in> (if xa \\<le> 0 + Suc x then {}\n                            else [0 +\n                                  Suc x\\<dots>,xa -\n         Suc (0 + Suc x)]) \\<longrightarrow>\n                  s xb = NoMsg))) \\<and>\n         (\\<forall>xa.\n             xa \\<in> (if x \\<le> 0 + t * k then {}\n                       else [0 +\n                             t *\n                             k\\<dots>,x -\nSuc (0 + t * k)]) \\<longrightarrow>\n             xa mod k \\<noteq> k - Suc 0))\\<rbrakk>\n    \\<Longrightarrow> \\<exists>x.\n                         (t * k \\<le> x \\<and>\n                          x \\<le> t * k + (k - Suc 0)) \\<and>\n                         s x = m \\<and>\n                         (\\<forall>xa.\n                             xa \\<in> (if x < t * k\n then [t * k\\<dots>,k - Suc 0]\n else if x < t * k + (k - Suc 0)\n      then [Suc x\\<dots>,t * k + (k - Suc 0) - Suc x]\n      else {}) \\<longrightarrow>\n                             s xa = NoMsg)", "apply (clarsimp simp add: mod_pred iIN_iff)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>t1.\n       \\<lbrakk>Suc 0 < k; m \\<noteq> NoMsg;\n        \\<And>t. event t = (t mod k = k - Suc 0); t0 = t * k;\n        t * k < t * k + k - Suc 0;\n        \\<And>x.\n           \\<lbrakk>t * k \\<le> x; x < t * k + k - Suc 0\\<rbrakk>\n           \\<Longrightarrow> x mod k \\<noteq> k - Suc 0;\n        t * k \\<le> t1; s t1 = m;\n        \\<forall>x.\n           x \\<in> (if t1 < t * k then [t * k\\<dots>,k - Suc 0]\n                    else if t1 < t * k + (k - Suc 0)\n                         then [Suc t1\\<dots>,t * k + (k - Suc 0) - Suc t1]\n                         else {}) \\<longrightarrow>\n           s x = NoMsg;\n        t1 < t * k + k - Suc 0\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>x\\<ge>t * k.\n                             x mod k = k - Suc 0 \\<and>\n                             s x = m \\<and>\n                             (\\<forall>xa.\n                                 xa \\<in> (if x \\<le> t * k then {}\n     else [0 + t * k\\<dots>,x - Suc (0 + t * k)]) \\<longrightarrow>\n                                 xa mod k \\<noteq> k - Suc 0)) \\<or>\n                         (\\<exists>x\\<ge>t * k.\n                             x mod k \\<noteq> k - Suc 0 \\<and>\n                             s x = m \\<and>\n                             (\\<exists>xa\\<ge>Suc x.\n                                 xa mod k = k - Suc 0 \\<and>\n                                 s xa = NoMsg \\<and>\n                                 (\\<forall>xb.\n                                     xb \\<in> (if xa \\<le> Suc x then {}\n         else [0 + Suc x\\<dots>,xa - Suc (0 + Suc x)]) \\<longrightarrow>\n                                     s xb = NoMsg)) \\<and>\n                             (\\<forall>xa.\n                                 xa \\<in> (if x \\<le> t * k then {}\n     else [0 + t * k\\<dots>,x - Suc (0 + t * k)]) \\<longrightarrow>\n                                 xa mod k \\<noteq> k - Suc 0))\n 2. \\<lbrakk>Suc 0 < k; m \\<noteq> NoMsg;\n     \\<And>t. event t = (t mod k = k - Suc 0); t0 = t * k;\n     t * k < t * k + k - Suc 0;\n     (\\<exists>x\\<ge>0 + t * k.\n         (x mod k = k - Suc 0 \\<and> s x = m) \\<and>\n         (\\<forall>xa.\n             xa \\<in> (if x \\<le> 0 + t * k then {}\n                       else [0 +\n                             t *\n                             k\\<dots>,x -\nSuc (0 + t * k)]) \\<longrightarrow>\n             xa mod k \\<noteq> k - Suc 0)) \\<or>\n     (\\<exists>x\\<ge>0 + t * k.\n         (x mod k \\<noteq> k - Suc 0 \\<and>\n          s x = m \\<and>\n          (\\<exists>xa\\<ge>0 + Suc x.\n              (xa mod k = k - Suc 0 \\<and> s xa = NoMsg) \\<and>\n              (\\<forall>xb.\n                  xb \\<in> (if xa \\<le> 0 + Suc x then {}\n                            else [0 +\n                                  Suc x\\<dots>,xa -\n         Suc (0 + Suc x)]) \\<longrightarrow>\n                  s xb = NoMsg))) \\<and>\n         (\\<forall>xa.\n             xa \\<in> (if x \\<le> 0 + t * k then {}\n                       else [0 +\n                             t *\n                             k\\<dots>,x -\nSuc (0 + t * k)]) \\<longrightarrow>\n             xa mod k \\<noteq> k - Suc 0))\\<rbrakk>\n    \\<Longrightarrow> \\<exists>x.\n                         (t * k \\<le> x \\<and>\n                          x \\<le> t * k + (k - Suc 0)) \\<and>\n                         s x = m \\<and>\n                         (\\<forall>xa.\n                             xa \\<in> (if x < t * k\n then [t * k\\<dots>,k - Suc 0]\n else if x < t * k + (k - Suc 0)\n      then [Suc x\\<dots>,t * k + (k - Suc 0) - Suc x]\n      else {}) \\<longrightarrow>\n                             s xa = NoMsg)", "apply (rule disjI2)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>t1.\n       \\<lbrakk>Suc 0 < k; m \\<noteq> NoMsg;\n        \\<And>t. event t = (t mod k = k - Suc 0); t0 = t * k;\n        t * k < t * k + k - Suc 0;\n        \\<And>x.\n           \\<lbrakk>t * k \\<le> x; x < t * k + k - Suc 0\\<rbrakk>\n           \\<Longrightarrow> x mod k \\<noteq> k - Suc 0;\n        t * k \\<le> t1; s t1 = m;\n        \\<forall>x.\n           x \\<in> (if t1 < t * k then [t * k\\<dots>,k - Suc 0]\n                    else if t1 < t * k + (k - Suc 0)\n                         then [Suc t1\\<dots>,t * k + (k - Suc 0) - Suc t1]\n                         else {}) \\<longrightarrow>\n           s x = NoMsg;\n        t1 < t * k + k - Suc 0\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x\\<ge>t * k.\n                            x mod k \\<noteq> k - Suc 0 \\<and>\n                            s x = m \\<and>\n                            (\\<exists>xa\\<ge>Suc x.\n                                xa mod k = k - Suc 0 \\<and>\n                                s xa = NoMsg \\<and>\n                                (\\<forall>xb.\n                                    xb \\<in> (if xa \\<le> Suc x then {}\n        else [0 + Suc x\\<dots>,xa - Suc (0 + Suc x)]) \\<longrightarrow>\n                                    s xb = NoMsg)) \\<and>\n                            (\\<forall>xa.\n                                xa \\<in> (if x \\<le> t * k then {}\n    else [0 + t * k\\<dots>,x - Suc (0 + t * k)]) \\<longrightarrow>\n                                xa mod k \\<noteq> k - Suc 0)\n 2. \\<lbrakk>Suc 0 < k; m \\<noteq> NoMsg;\n     \\<And>t. event t = (t mod k = k - Suc 0); t0 = t * k;\n     t * k < t * k + k - Suc 0;\n     (\\<exists>x\\<ge>0 + t * k.\n         (x mod k = k - Suc 0 \\<and> s x = m) \\<and>\n         (\\<forall>xa.\n             xa \\<in> (if x \\<le> 0 + t * k then {}\n                       else [0 +\n                             t *\n                             k\\<dots>,x -\nSuc (0 + t * k)]) \\<longrightarrow>\n             xa mod k \\<noteq> k - Suc 0)) \\<or>\n     (\\<exists>x\\<ge>0 + t * k.\n         (x mod k \\<noteq> k - Suc 0 \\<and>\n          s x = m \\<and>\n          (\\<exists>xa\\<ge>0 + Suc x.\n              (xa mod k = k - Suc 0 \\<and> s xa = NoMsg) \\<and>\n              (\\<forall>xb.\n                  xb \\<in> (if xa \\<le> 0 + Suc x then {}\n                            else [0 +\n                                  Suc x\\<dots>,xa -\n         Suc (0 + Suc x)]) \\<longrightarrow>\n                  s xb = NoMsg))) \\<and>\n         (\\<forall>xa.\n             xa \\<in> (if x \\<le> 0 + t * k then {}\n                       else [0 +\n                             t *\n                             k\\<dots>,x -\nSuc (0 + t * k)]) \\<longrightarrow>\n             xa mod k \\<noteq> k - Suc 0))\\<rbrakk>\n    \\<Longrightarrow> \\<exists>x.\n                         (t * k \\<le> x \\<and>\n                          x \\<le> t * k + (k - Suc 0)) \\<and>\n                         s x = m \\<and>\n                         (\\<forall>xa.\n                             xa \\<in> (if x < t * k\n then [t * k\\<dots>,k - Suc 0]\n else if x < t * k + (k - Suc 0)\n      then [Suc x\\<dots>,t * k + (k - Suc 0) - Suc x]\n      else {}) \\<longrightarrow>\n                             s xa = NoMsg)", "apply (rule_tac x=t1 in exI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>t1.\n       \\<lbrakk>Suc 0 < k; m \\<noteq> NoMsg;\n        \\<And>t. event t = (t mod k = k - Suc 0); t0 = t * k;\n        t * k < t * k + k - Suc 0;\n        \\<And>x.\n           \\<lbrakk>t * k \\<le> x; x < t * k + k - Suc 0\\<rbrakk>\n           \\<Longrightarrow> x mod k \\<noteq> k - Suc 0;\n        t * k \\<le> t1; s t1 = m;\n        \\<forall>x.\n           x \\<in> (if t1 < t * k then [t * k\\<dots>,k - Suc 0]\n                    else if t1 < t * k + (k - Suc 0)\n                         then [Suc t1\\<dots>,t * k + (k - Suc 0) - Suc t1]\n                         else {}) \\<longrightarrow>\n           s x = NoMsg;\n        t1 < t * k + k - Suc 0\\<rbrakk>\n       \\<Longrightarrow> t * k \\<le> t1 \\<and>\n                         t1 mod k \\<noteq> k - Suc 0 \\<and>\n                         s t1 = m \\<and>\n                         (\\<exists>x\\<ge>Suc t1.\n                             x mod k = k - Suc 0 \\<and>\n                             s x = NoMsg \\<and>\n                             (\\<forall>xa.\n                                 xa \\<in> (if x \\<le> Suc t1 then {}\n     else [0 + Suc t1\\<dots>,x - Suc (0 + Suc t1)]) \\<longrightarrow>\n                                 s xa = NoMsg)) \\<and>\n                         (\\<forall>x.\n                             x \\<in> (if t1 \\<le> t * k then {}\nelse [0 + t * k\\<dots>,t1 - Suc (0 + t * k)]) \\<longrightarrow>\n                             x mod k \\<noteq> k - Suc 0)\n 2. \\<lbrakk>Suc 0 < k; m \\<noteq> NoMsg;\n     \\<And>t. event t = (t mod k = k - Suc 0); t0 = t * k;\n     t * k < t * k + k - Suc 0;\n     (\\<exists>x\\<ge>0 + t * k.\n         (x mod k = k - Suc 0 \\<and> s x = m) \\<and>\n         (\\<forall>xa.\n             xa \\<in> (if x \\<le> 0 + t * k then {}\n                       else [0 +\n                             t *\n                             k\\<dots>,x -\nSuc (0 + t * k)]) \\<longrightarrow>\n             xa mod k \\<noteq> k - Suc 0)) \\<or>\n     (\\<exists>x\\<ge>0 + t * k.\n         (x mod k \\<noteq> k - Suc 0 \\<and>\n          s x = m \\<and>\n          (\\<exists>xa\\<ge>0 + Suc x.\n              (xa mod k = k - Suc 0 \\<and> s xa = NoMsg) \\<and>\n              (\\<forall>xb.\n                  xb \\<in> (if xa \\<le> 0 + Suc x then {}\n                            else [0 +\n                                  Suc x\\<dots>,xa -\n         Suc (0 + Suc x)]) \\<longrightarrow>\n                  s xb = NoMsg))) \\<and>\n         (\\<forall>xa.\n             xa \\<in> (if x \\<le> 0 + t * k then {}\n                       else [0 +\n                             t *\n                             k\\<dots>,x -\nSuc (0 + t * k)]) \\<longrightarrow>\n             xa mod k \\<noteq> k - Suc 0))\\<rbrakk>\n    \\<Longrightarrow> \\<exists>x.\n                         (t * k \\<le> x \\<and>\n                          x \\<le> t * k + (k - Suc 0)) \\<and>\n                         s x = m \\<and>\n                         (\\<forall>xa.\n                             xa \\<in> (if x < t * k\n then [t * k\\<dots>,k - Suc 0]\n else if x < t * k + (k - Suc 0)\n      then [Suc x\\<dots>,t * k + (k - Suc 0) - Suc x]\n      else {}) \\<longrightarrow>\n                             s xa = NoMsg)", "apply (simp split del: if_split)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>t1.\n       \\<lbrakk>Suc 0 < k; m \\<noteq> NoMsg;\n        \\<And>t. event t = (t mod k = k - Suc 0); t0 = t * k;\n        \\<And>x.\n           \\<lbrakk>t * k \\<le> x; x < t * k + k - Suc 0\\<rbrakk>\n           \\<Longrightarrow> x mod k \\<noteq> k - Suc 0;\n        t * k \\<le> t1; s t1 = m;\n        \\<forall>x.\n           x \\<in> [Suc t1\\<dots>,t * k + k -\n                                  Suc (Suc t1)] \\<longrightarrow>\n           s x = NoMsg;\n        t1 < t * k + k - Suc 0\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>x\\<ge>Suc t1.\n                             x mod k = k - Suc 0 \\<and>\n                             s x = NoMsg \\<and>\n                             (\\<forall>xa.\n                                 xa \\<in> (if x \\<le> Suc t1 then {}\n     else [0 + Suc t1\\<dots>,x - Suc (0 + Suc t1)]) \\<longrightarrow>\n                                 s xa = NoMsg)) \\<and>\n                         (\\<forall>x.\n                             x \\<in> (if t1 = t * k then {}\nelse [0 + t * k\\<dots>,t1 - Suc (0 + t * k)]) \\<longrightarrow>\n                             x mod k \\<noteq> k - Suc 0)\n 2. \\<lbrakk>Suc 0 < k; m \\<noteq> NoMsg;\n     \\<And>t. event t = (t mod k = k - Suc 0); t0 = t * k;\n     t * k < t * k + k - Suc 0;\n     (\\<exists>x\\<ge>0 + t * k.\n         (x mod k = k - Suc 0 \\<and> s x = m) \\<and>\n         (\\<forall>xa.\n             xa \\<in> (if x \\<le> 0 + t * k then {}\n                       else [0 +\n                             t *\n                             k\\<dots>,x -\nSuc (0 + t * k)]) \\<longrightarrow>\n             xa mod k \\<noteq> k - Suc 0)) \\<or>\n     (\\<exists>x\\<ge>0 + t * k.\n         (x mod k \\<noteq> k - Suc 0 \\<and>\n          s x = m \\<and>\n          (\\<exists>xa\\<ge>0 + Suc x.\n              (xa mod k = k - Suc 0 \\<and> s xa = NoMsg) \\<and>\n              (\\<forall>xb.\n                  xb \\<in> (if xa \\<le> 0 + Suc x then {}\n                            else [0 +\n                                  Suc x\\<dots>,xa -\n         Suc (0 + Suc x)]) \\<longrightarrow>\n                  s xb = NoMsg))) \\<and>\n         (\\<forall>xa.\n             xa \\<in> (if x \\<le> 0 + t * k then {}\n                       else [0 +\n                             t *\n                             k\\<dots>,x -\nSuc (0 + t * k)]) \\<longrightarrow>\n             xa mod k \\<noteq> k - Suc 0))\\<rbrakk>\n    \\<Longrightarrow> \\<exists>x.\n                         (t * k \\<le> x \\<and>\n                          x \\<le> t * k + (k - Suc 0)) \\<and>\n                         s x = m \\<and>\n                         (\\<forall>xa.\n                             xa \\<in> (if x < t * k\n then [t * k\\<dots>,k - Suc 0]\n else if x < t * k + (k - Suc 0)\n      then [Suc x\\<dots>,t * k + (k - Suc 0) - Suc x]\n      else {}) \\<longrightarrow>\n                             s xa = NoMsg)", "apply (rule conjI)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>t1.\n       \\<lbrakk>Suc 0 < k; m \\<noteq> NoMsg;\n        \\<And>t. event t = (t mod k = k - Suc 0); t0 = t * k;\n        \\<And>x.\n           \\<lbrakk>t * k \\<le> x; x < t * k + k - Suc 0\\<rbrakk>\n           \\<Longrightarrow> x mod k \\<noteq> k - Suc 0;\n        t * k \\<le> t1; s t1 = m;\n        \\<forall>x.\n           x \\<in> [Suc t1\\<dots>,t * k + k -\n                                  Suc (Suc t1)] \\<longrightarrow>\n           s x = NoMsg;\n        t1 < t * k + k - Suc 0\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x\\<ge>Suc t1.\n                            x mod k = k - Suc 0 \\<and>\n                            s x = NoMsg \\<and>\n                            (\\<forall>xa.\n                                xa \\<in> (if x \\<le> Suc t1 then {}\n    else [0 + Suc t1\\<dots>,x - Suc (0 + Suc t1)]) \\<longrightarrow>\n                                s xa = NoMsg)\n 2. \\<And>t1.\n       \\<lbrakk>Suc 0 < k; m \\<noteq> NoMsg;\n        \\<And>t. event t = (t mod k = k - Suc 0); t0 = t * k;\n        \\<And>x.\n           \\<lbrakk>t * k \\<le> x; x < t * k + k - Suc 0\\<rbrakk>\n           \\<Longrightarrow> x mod k \\<noteq> k - Suc 0;\n        t * k \\<le> t1; s t1 = m;\n        \\<forall>x.\n           x \\<in> [Suc t1\\<dots>,t * k + k -\n                                  Suc (Suc t1)] \\<longrightarrow>\n           s x = NoMsg;\n        t1 < t * k + k - Suc 0\\<rbrakk>\n       \\<Longrightarrow> \\<forall>x.\n                            x \\<in> (if t1 = t * k then {}\n                                     else [0 +\n     t * k\\<dots>,t1 - Suc (0 + t * k)]) \\<longrightarrow>\n                            x mod k \\<noteq> k - Suc 0\n 3. \\<lbrakk>Suc 0 < k; m \\<noteq> NoMsg;\n     \\<And>t. event t = (t mod k = k - Suc 0); t0 = t * k;\n     t * k < t * k + k - Suc 0;\n     (\\<exists>x\\<ge>0 + t * k.\n         (x mod k = k - Suc 0 \\<and> s x = m) \\<and>\n         (\\<forall>xa.\n             xa \\<in> (if x \\<le> 0 + t * k then {}\n                       else [0 +\n                             t *\n                             k\\<dots>,x -\nSuc (0 + t * k)]) \\<longrightarrow>\n             xa mod k \\<noteq> k - Suc 0)) \\<or>\n     (\\<exists>x\\<ge>0 + t * k.\n         (x mod k \\<noteq> k - Suc 0 \\<and>\n          s x = m \\<and>\n          (\\<exists>xa\\<ge>0 + Suc x.\n              (xa mod k = k - Suc 0 \\<and> s xa = NoMsg) \\<and>\n              (\\<forall>xb.\n                  xb \\<in> (if xa \\<le> 0 + Suc x then {}\n                            else [0 +\n                                  Suc x\\<dots>,xa -\n         Suc (0 + Suc x)]) \\<longrightarrow>\n                  s xb = NoMsg))) \\<and>\n         (\\<forall>xa.\n             xa \\<in> (if x \\<le> 0 + t * k then {}\n                       else [0 +\n                             t *\n                             k\\<dots>,x -\nSuc (0 + t * k)]) \\<longrightarrow>\n             xa mod k \\<noteq> k - Suc 0))\\<rbrakk>\n    \\<Longrightarrow> \\<exists>x.\n                         (t * k \\<le> x \\<and>\n                          x \\<le> t * k + (k - Suc 0)) \\<and>\n                         s x = m \\<and>\n                         (\\<forall>xa.\n                             xa \\<in> (if x < t * k\n then [t * k\\<dots>,k - Suc 0]\n else if x < t * k + (k - Suc 0)\n      then [Suc x\\<dots>,t * k + (k - Suc 0) - Suc x]\n      else {}) \\<longrightarrow>\n                             s xa = NoMsg)", "apply (rule_tac x=\"t * k + k - Suc 0\" in exI)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>t1.\n       \\<lbrakk>Suc 0 < k; m \\<noteq> NoMsg;\n        \\<And>t. event t = (t mod k = k - Suc 0); t0 = t * k;\n        \\<And>x.\n           \\<lbrakk>t * k \\<le> x; x < t * k + k - Suc 0\\<rbrakk>\n           \\<Longrightarrow> x mod k \\<noteq> k - Suc 0;\n        t * k \\<le> t1; s t1 = m;\n        \\<forall>x.\n           x \\<in> [Suc t1\\<dots>,t * k + k -\n                                  Suc (Suc t1)] \\<longrightarrow>\n           s x = NoMsg;\n        t1 < t * k + k - Suc 0\\<rbrakk>\n       \\<Longrightarrow> Suc t1 \\<le> t * k + k - Suc 0 \\<and>\n                         (t * k + k - Suc 0) mod k = k - Suc 0 \\<and>\n                         s (t * k + k - Suc 0) = NoMsg \\<and>\n                         (\\<forall>x.\n                             x \\<in> (if t * k + k - Suc 0 \\<le> Suc t1\nthen {}\nelse [0 +\n      Suc t1\\<dots>,t * k + k - Suc 0 - Suc (0 + Suc t1)]) \\<longrightarrow>\n                             s x = NoMsg)\n 2. \\<And>t1.\n       \\<lbrakk>Suc 0 < k; m \\<noteq> NoMsg;\n        \\<And>t. event t = (t mod k = k - Suc 0); t0 = t * k;\n        \\<And>x.\n           \\<lbrakk>t * k \\<le> x; x < t * k + k - Suc 0\\<rbrakk>\n           \\<Longrightarrow> x mod k \\<noteq> k - Suc 0;\n        t * k \\<le> t1; s t1 = m;\n        \\<forall>x.\n           x \\<in> [Suc t1\\<dots>,t * k + k -\n                                  Suc (Suc t1)] \\<longrightarrow>\n           s x = NoMsg;\n        t1 < t * k + k - Suc 0\\<rbrakk>\n       \\<Longrightarrow> \\<forall>x.\n                            x \\<in> (if t1 = t * k then {}\n                                     else [0 +\n     t * k\\<dots>,t1 - Suc (0 + t * k)]) \\<longrightarrow>\n                            x mod k \\<noteq> k - Suc 0\n 3. \\<lbrakk>Suc 0 < k; m \\<noteq> NoMsg;\n     \\<And>t. event t = (t mod k = k - Suc 0); t0 = t * k;\n     t * k < t * k + k - Suc 0;\n     (\\<exists>x\\<ge>0 + t * k.\n         (x mod k = k - Suc 0 \\<and> s x = m) \\<and>\n         (\\<forall>xa.\n             xa \\<in> (if x \\<le> 0 + t * k then {}\n                       else [0 +\n                             t *\n                             k\\<dots>,x -\nSuc (0 + t * k)]) \\<longrightarrow>\n             xa mod k \\<noteq> k - Suc 0)) \\<or>\n     (\\<exists>x\\<ge>0 + t * k.\n         (x mod k \\<noteq> k - Suc 0 \\<and>\n          s x = m \\<and>\n          (\\<exists>xa\\<ge>0 + Suc x.\n              (xa mod k = k - Suc 0 \\<and> s xa = NoMsg) \\<and>\n              (\\<forall>xb.\n                  xb \\<in> (if xa \\<le> 0 + Suc x then {}\n                            else [0 +\n                                  Suc x\\<dots>,xa -\n         Suc (0 + Suc x)]) \\<longrightarrow>\n                  s xb = NoMsg))) \\<and>\n         (\\<forall>xa.\n             xa \\<in> (if x \\<le> 0 + t * k then {}\n                       else [0 +\n                             t *\n                             k\\<dots>,x -\nSuc (0 + t * k)]) \\<longrightarrow>\n             xa mod k \\<noteq> k - Suc 0))\\<rbrakk>\n    \\<Longrightarrow> \\<exists>x.\n                         (t * k \\<le> x \\<and>\n                          x \\<le> t * k + (k - Suc 0)) \\<and>\n                         s x = m \\<and>\n                         (\\<forall>xa.\n                             xa \\<in> (if x < t * k\n then [t * k\\<dots>,k - Suc 0]\n else if x < t * k + (k - Suc 0)\n      then [Suc x\\<dots>,t * k + (k - Suc 0) - Suc x]\n      else {}) \\<longrightarrow>\n                             s xa = NoMsg)", "apply (clarsimp simp: mod_pred iIN_iff)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>t1.\n       \\<lbrakk>Suc 0 < k; m \\<noteq> NoMsg;\n        \\<And>t. event t = (t mod k = k - Suc 0); t0 = t * k;\n        \\<And>x.\n           \\<lbrakk>t * k \\<le> x; x < t * k + k - Suc 0\\<rbrakk>\n           \\<Longrightarrow> x mod k \\<noteq> k - Suc 0;\n        t * k \\<le> t1; s t1 = m;\n        \\<forall>x.\n           x \\<in> [Suc t1\\<dots>,t * k + k -\n                                  Suc (Suc t1)] \\<longrightarrow>\n           s x = NoMsg;\n        t1 < t * k + k - Suc 0\\<rbrakk>\n       \\<Longrightarrow> \\<forall>x.\n                            x \\<in> (if t1 = t * k then {}\n                                     else [0 +\n     t * k\\<dots>,t1 - Suc (0 + t * k)]) \\<longrightarrow>\n                            x mod k \\<noteq> k - Suc 0\n 2. \\<lbrakk>Suc 0 < k; m \\<noteq> NoMsg;\n     \\<And>t. event t = (t mod k = k - Suc 0); t0 = t * k;\n     t * k < t * k + k - Suc 0;\n     (\\<exists>x\\<ge>0 + t * k.\n         (x mod k = k - Suc 0 \\<and> s x = m) \\<and>\n         (\\<forall>xa.\n             xa \\<in> (if x \\<le> 0 + t * k then {}\n                       else [0 +\n                             t *\n                             k\\<dots>,x -\nSuc (0 + t * k)]) \\<longrightarrow>\n             xa mod k \\<noteq> k - Suc 0)) \\<or>\n     (\\<exists>x\\<ge>0 + t * k.\n         (x mod k \\<noteq> k - Suc 0 \\<and>\n          s x = m \\<and>\n          (\\<exists>xa\\<ge>0 + Suc x.\n              (xa mod k = k - Suc 0 \\<and> s xa = NoMsg) \\<and>\n              (\\<forall>xb.\n                  xb \\<in> (if xa \\<le> 0 + Suc x then {}\n                            else [0 +\n                                  Suc x\\<dots>,xa -\n         Suc (0 + Suc x)]) \\<longrightarrow>\n                  s xb = NoMsg))) \\<and>\n         (\\<forall>xa.\n             xa \\<in> (if x \\<le> 0 + t * k then {}\n                       else [0 +\n                             t *\n                             k\\<dots>,x -\nSuc (0 + t * k)]) \\<longrightarrow>\n             xa mod k \\<noteq> k - Suc 0))\\<rbrakk>\n    \\<Longrightarrow> \\<exists>x.\n                         (t * k \\<le> x \\<and>\n                          x \\<le> t * k + (k - Suc 0)) \\<and>\n                         s x = m \\<and>\n                         (\\<forall>xa.\n                             xa \\<in> (if x < t * k\n then [t * k\\<dots>,k - Suc 0]\n else if x < t * k + (k - Suc 0)\n      then [Suc x\\<dots>,t * k + (k - Suc 0) - Suc x]\n      else {}) \\<longrightarrow>\n                             s xa = NoMsg)", "apply (clarsimp simp: iIN_iff)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Suc 0 < k; m \\<noteq> NoMsg;\n     \\<And>t. event t = (t mod k = k - Suc 0); t0 = t * k;\n     t * k < t * k + k - Suc 0;\n     (\\<exists>x\\<ge>0 + t * k.\n         (x mod k = k - Suc 0 \\<and> s x = m) \\<and>\n         (\\<forall>xa.\n             xa \\<in> (if x \\<le> 0 + t * k then {}\n                       else [0 +\n                             t *\n                             k\\<dots>,x -\nSuc (0 + t * k)]) \\<longrightarrow>\n             xa mod k \\<noteq> k - Suc 0)) \\<or>\n     (\\<exists>x\\<ge>0 + t * k.\n         (x mod k \\<noteq> k - Suc 0 \\<and>\n          s x = m \\<and>\n          (\\<exists>xa\\<ge>0 + Suc x.\n              (xa mod k = k - Suc 0 \\<and> s xa = NoMsg) \\<and>\n              (\\<forall>xb.\n                  xb \\<in> (if xa \\<le> 0 + Suc x then {}\n                            else [0 +\n                                  Suc x\\<dots>,xa -\n         Suc (0 + Suc x)]) \\<longrightarrow>\n                  s xb = NoMsg))) \\<and>\n         (\\<forall>xa.\n             xa \\<in> (if x \\<le> 0 + t * k then {}\n                       else [0 +\n                             t *\n                             k\\<dots>,x -\nSuc (0 + t * k)]) \\<longrightarrow>\n             xa mod k \\<noteq> k - Suc 0))\\<rbrakk>\n    \\<Longrightarrow> \\<exists>x.\n                         (t * k \\<le> x \\<and>\n                          x \\<le> t * k + (k - Suc 0)) \\<and>\n                         s x = m \\<and>\n                         (\\<forall>xa.\n                             xa \\<in> (if x < t * k\n then [t * k\\<dots>,k - Suc 0]\n else if x < t * k + (k - Suc 0)\n      then [Suc x\\<dots>,t * k + (k - Suc 0) - Suc x]\n      else {}) \\<longrightarrow>\n                             s xa = NoMsg)", "apply (erule disjE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>Suc 0 < k; m \\<noteq> NoMsg;\n     \\<And>t. event t = (t mod k = k - Suc 0); t0 = t * k;\n     t * k < t * k + k - Suc 0;\n     \\<exists>x\\<ge>0 + t * k.\n        (x mod k = k - Suc 0 \\<and> s x = m) \\<and>\n        (\\<forall>xa.\n            xa \\<in> (if x \\<le> 0 + t * k then {}\n                      else [0 +\n                            t *\n                            k\\<dots>,x - Suc (0 + t * k)]) \\<longrightarrow>\n            xa mod k \\<noteq> k - Suc 0)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>x.\n                         (t * k \\<le> x \\<and>\n                          x \\<le> t * k + (k - Suc 0)) \\<and>\n                         s x = m \\<and>\n                         (\\<forall>xa.\n                             xa \\<in> (if x < t * k\n then [t * k\\<dots>,k - Suc 0]\n else if x < t * k + (k - Suc 0)\n      then [Suc x\\<dots>,t * k + (k - Suc 0) - Suc x]\n      else {}) \\<longrightarrow>\n                             s xa = NoMsg)\n 2. \\<lbrakk>Suc 0 < k; m \\<noteq> NoMsg;\n     \\<And>t. event t = (t mod k = k - Suc 0); t0 = t * k;\n     t * k < t * k + k - Suc 0;\n     \\<exists>x\\<ge>0 + t * k.\n        (x mod k \\<noteq> k - Suc 0 \\<and>\n         s x = m \\<and>\n         (\\<exists>xa\\<ge>0 + Suc x.\n             (xa mod k = k - Suc 0 \\<and> s xa = NoMsg) \\<and>\n             (\\<forall>xb.\n                 xb \\<in> (if xa \\<le> 0 + Suc x then {}\n                           else [0 +\n                                 Suc x\\<dots>,xa -\n        Suc (0 + Suc x)]) \\<longrightarrow>\n                 s xb = NoMsg))) \\<and>\n        (\\<forall>xa.\n            xa \\<in> (if x \\<le> 0 + t * k then {}\n                      else [0 +\n                            t *\n                            k\\<dots>,x - Suc (0 + t * k)]) \\<longrightarrow>\n            xa mod k \\<noteq> k - Suc 0)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>x.\n                         (t * k \\<le> x \\<and>\n                          x \\<le> t * k + (k - Suc 0)) \\<and>\n                         s x = m \\<and>\n                         (\\<forall>xa.\n                             xa \\<in> (if x < t * k\n then [t * k\\<dots>,k - Suc 0]\n else if x < t * k + (k - Suc 0)\n      then [Suc x\\<dots>,t * k + (k - Suc 0) - Suc x]\n      else {}) \\<longrightarrow>\n                             s xa = NoMsg)", "apply (clarsimp, rename_tac t1)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>t1.\n       \\<lbrakk>Suc 0 < k; s t1 \\<noteq> NoMsg;\n        \\<And>t. event t = (t mod k = k - Suc 0); t0 = t * k;\n        t * k < t * k + k - Suc 0; t * k \\<le> t1; t1 mod k = k - Suc 0;\n        \\<forall>x.\n           x \\<in> (if t1 = t * k then {}\n                    else [0 +\n                          t *\n                          k\\<dots>,t1 - Suc (0 + t * k)]) \\<longrightarrow>\n           x mod k \\<noteq> k - Suc 0;\n        m = s t1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x.\n                            (x < t * k + k - Suc 0 \\<longrightarrow>\n                             \\<not> x < t * k \\<and>\n                             (\\<not> x < t * k \\<longrightarrow>\n                              s x = s t1 \\<and>\n                              (\\<forall>xa.\n                                  xa \\<in> [Suc\n       x\\<dots>,t * k + k - Suc (Suc x)] \\<longrightarrow>\n                                  s xa = NoMsg))) \\<and>\n                            (\\<not> x < t * k + k - Suc 0 \\<longrightarrow>\n                             x = t * k + k - Suc 0 \\<and> s x = s t1)\n 2. \\<lbrakk>Suc 0 < k; m \\<noteq> NoMsg;\n     \\<And>t. event t = (t mod k = k - Suc 0); t0 = t * k;\n     t * k < t * k + k - Suc 0;\n     \\<exists>x\\<ge>0 + t * k.\n        (x mod k \\<noteq> k - Suc 0 \\<and>\n         s x = m \\<and>\n         (\\<exists>xa\\<ge>0 + Suc x.\n             (xa mod k = k - Suc 0 \\<and> s xa = NoMsg) \\<and>\n             (\\<forall>xb.\n                 xb \\<in> (if xa \\<le> 0 + Suc x then {}\n                           else [0 +\n                                 Suc x\\<dots>,xa -\n        Suc (0 + Suc x)]) \\<longrightarrow>\n                 s xb = NoMsg))) \\<and>\n        (\\<forall>xa.\n            xa \\<in> (if x \\<le> 0 + t * k then {}\n                      else [0 +\n                            t *\n                            k\\<dots>,x - Suc (0 + t * k)]) \\<longrightarrow>\n            xa mod k \\<noteq> k - Suc 0)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>x.\n                         (t * k \\<le> x \\<and>\n                          x \\<le> t * k + (k - Suc 0)) \\<and>\n                         s x = m \\<and>\n                         (\\<forall>xa.\n                             xa \\<in> (if x < t * k\n then [t * k\\<dots>,k - Suc 0]\n else if x < t * k + (k - Suc 0)\n      then [Suc x\\<dots>,t * k + (k - Suc 0) - Suc x]\n      else {}) \\<longrightarrow>\n                             s xa = NoMsg)", "apply (drule_tac y=t1 in order_le_imp_less_or_eq, erule disjE)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>t1.\n       \\<lbrakk>Suc 0 < k; s t1 \\<noteq> NoMsg;\n        \\<And>t. event t = (t mod k = k - Suc 0); t0 = t * k;\n        t * k < t * k + k - Suc 0; t1 mod k = k - Suc 0;\n        \\<forall>x.\n           x \\<in> (if t1 = t * k then {}\n                    else [0 +\n                          t *\n                          k\\<dots>,t1 - Suc (0 + t * k)]) \\<longrightarrow>\n           x mod k \\<noteq> k - Suc 0;\n        m = s t1; t * k < t1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x.\n                            (x < t * k + k - Suc 0 \\<longrightarrow>\n                             \\<not> x < t * k \\<and>\n                             (\\<not> x < t * k \\<longrightarrow>\n                              s x = s t1 \\<and>\n                              (\\<forall>xa.\n                                  xa \\<in> [Suc\n       x\\<dots>,t * k + k - Suc (Suc x)] \\<longrightarrow>\n                                  s xa = NoMsg))) \\<and>\n                            (\\<not> x < t * k + k - Suc 0 \\<longrightarrow>\n                             x = t * k + k - Suc 0 \\<and> s x = s t1)\n 2. \\<And>t1.\n       \\<lbrakk>Suc 0 < k; s t1 \\<noteq> NoMsg;\n        \\<And>t. event t = (t mod k = k - Suc 0); t0 = t * k;\n        t * k < t * k + k - Suc 0; t1 mod k = k - Suc 0;\n        \\<forall>x.\n           x \\<in> (if t1 = t * k then {}\n                    else [0 +\n                          t *\n                          k\\<dots>,t1 - Suc (0 + t * k)]) \\<longrightarrow>\n           x mod k \\<noteq> k - Suc 0;\n        m = s t1; t * k = t1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x.\n                            (x < t * k + k - Suc 0 \\<longrightarrow>\n                             \\<not> x < t * k \\<and>\n                             (\\<not> x < t * k \\<longrightarrow>\n                              s x = s t1 \\<and>\n                              (\\<forall>xa.\n                                  xa \\<in> [Suc\n       x\\<dots>,t * k + k - Suc (Suc x)] \\<longrightarrow>\n                                  s xa = NoMsg))) \\<and>\n                            (\\<not> x < t * k + k - Suc 0 \\<longrightarrow>\n                             x = t * k + k - Suc 0 \\<and> s x = s t1)\n 3. \\<lbrakk>Suc 0 < k; m \\<noteq> NoMsg;\n     \\<And>t. event t = (t mod k = k - Suc 0); t0 = t * k;\n     t * k < t * k + k - Suc 0;\n     \\<exists>x\\<ge>0 + t * k.\n        (x mod k \\<noteq> k - Suc 0 \\<and>\n         s x = m \\<and>\n         (\\<exists>xa\\<ge>0 + Suc x.\n             (xa mod k = k - Suc 0 \\<and> s xa = NoMsg) \\<and>\n             (\\<forall>xb.\n                 xb \\<in> (if xa \\<le> 0 + Suc x then {}\n                           else [0 +\n                                 Suc x\\<dots>,xa -\n        Suc (0 + Suc x)]) \\<longrightarrow>\n                 s xb = NoMsg))) \\<and>\n        (\\<forall>xa.\n            xa \\<in> (if x \\<le> 0 + t * k then {}\n                      else [0 +\n                            t *\n                            k\\<dots>,x - Suc (0 + t * k)]) \\<longrightarrow>\n            xa mod k \\<noteq> k - Suc 0)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>x.\n                         (t * k \\<le> x \\<and>\n                          x \\<le> t * k + (k - Suc 0)) \\<and>\n                         s x = m \\<and>\n                         (\\<forall>xa.\n                             xa \\<in> (if x < t * k\n then [t * k\\<dots>,k - Suc 0]\n else if x < t * k + (k - Suc 0)\n      then [Suc x\\<dots>,t * k + (k - Suc 0) - Suc x]\n      else {}) \\<longrightarrow>\n                             s xa = NoMsg)", "prefer 2"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>t1.\n       \\<lbrakk>Suc 0 < k; s t1 \\<noteq> NoMsg;\n        \\<And>t. event t = (t mod k = k - Suc 0); t0 = t * k;\n        t * k < t * k + k - Suc 0; t1 mod k = k - Suc 0;\n        \\<forall>x.\n           x \\<in> (if t1 = t * k then {}\n                    else [0 +\n                          t *\n                          k\\<dots>,t1 - Suc (0 + t * k)]) \\<longrightarrow>\n           x mod k \\<noteq> k - Suc 0;\n        m = s t1; t * k = t1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x.\n                            (x < t * k + k - Suc 0 \\<longrightarrow>\n                             \\<not> x < t * k \\<and>\n                             (\\<not> x < t * k \\<longrightarrow>\n                              s x = s t1 \\<and>\n                              (\\<forall>xa.\n                                  xa \\<in> [Suc\n       x\\<dots>,t * k + k - Suc (Suc x)] \\<longrightarrow>\n                                  s xa = NoMsg))) \\<and>\n                            (\\<not> x < t * k + k - Suc 0 \\<longrightarrow>\n                             x = t * k + k - Suc 0 \\<and> s x = s t1)\n 2. \\<And>t1.\n       \\<lbrakk>Suc 0 < k; s t1 \\<noteq> NoMsg;\n        \\<And>t. event t = (t mod k = k - Suc 0); t0 = t * k;\n        t * k < t * k + k - Suc 0; t1 mod k = k - Suc 0;\n        \\<forall>x.\n           x \\<in> (if t1 = t * k then {}\n                    else [0 +\n                          t *\n                          k\\<dots>,t1 - Suc (0 + t * k)]) \\<longrightarrow>\n           x mod k \\<noteq> k - Suc 0;\n        m = s t1; t * k < t1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x.\n                            (x < t * k + k - Suc 0 \\<longrightarrow>\n                             \\<not> x < t * k \\<and>\n                             (\\<not> x < t * k \\<longrightarrow>\n                              s x = s t1 \\<and>\n                              (\\<forall>xa.\n                                  xa \\<in> [Suc\n       x\\<dots>,t * k + k - Suc (Suc x)] \\<longrightarrow>\n                                  s xa = NoMsg))) \\<and>\n                            (\\<not> x < t * k + k - Suc 0 \\<longrightarrow>\n                             x = t * k + k - Suc 0 \\<and> s x = s t1)\n 3. \\<lbrakk>Suc 0 < k; m \\<noteq> NoMsg;\n     \\<And>t. event t = (t mod k = k - Suc 0); t0 = t * k;\n     t * k < t * k + k - Suc 0;\n     \\<exists>x\\<ge>0 + t * k.\n        (x mod k \\<noteq> k - Suc 0 \\<and>\n         s x = m \\<and>\n         (\\<exists>xa\\<ge>0 + Suc x.\n             (xa mod k = k - Suc 0 \\<and> s xa = NoMsg) \\<and>\n             (\\<forall>xb.\n                 xb \\<in> (if xa \\<le> 0 + Suc x then {}\n                           else [0 +\n                                 Suc x\\<dots>,xa -\n        Suc (0 + Suc x)]) \\<longrightarrow>\n                 s xb = NoMsg))) \\<and>\n        (\\<forall>xa.\n            xa \\<in> (if x \\<le> 0 + t * k then {}\n                      else [0 +\n                            t *\n                            k\\<dots>,x - Suc (0 + t * k)]) \\<longrightarrow>\n            xa mod k \\<noteq> k - Suc 0)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>x.\n                         (t * k \\<le> x \\<and>\n                          x \\<le> t * k + (k - Suc 0)) \\<and>\n                         s x = m \\<and>\n                         (\\<forall>xa.\n                             xa \\<in> (if x < t * k\n then [t * k\\<dots>,k - Suc 0]\n else if x < t * k + (k - Suc 0)\n      then [Suc x\\<dots>,t * k + (k - Suc 0) - Suc x]\n      else {}) \\<longrightarrow>\n                             s xa = NoMsg)", "apply (drule_tac t=t1 in sym, simp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>t1.\n       \\<lbrakk>Suc 0 < k; s t1 \\<noteq> NoMsg;\n        \\<And>t. event t = (t mod k = k - Suc 0); t0 = t * k;\n        t * k < t * k + k - Suc 0; t1 mod k = k - Suc 0;\n        \\<forall>x.\n           x \\<in> (if t1 = t * k then {}\n                    else [0 +\n                          t *\n                          k\\<dots>,t1 - Suc (0 + t * k)]) \\<longrightarrow>\n           x mod k \\<noteq> k - Suc 0;\n        m = s t1; t * k < t1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x.\n                            (x < t * k + k - Suc 0 \\<longrightarrow>\n                             \\<not> x < t * k \\<and>\n                             (\\<not> x < t * k \\<longrightarrow>\n                              s x = s t1 \\<and>\n                              (\\<forall>xa.\n                                  xa \\<in> [Suc\n       x\\<dots>,t * k + k - Suc (Suc x)] \\<longrightarrow>\n                                  s xa = NoMsg))) \\<and>\n                            (\\<not> x < t * k + k - Suc 0 \\<longrightarrow>\n                             x = t * k + k - Suc 0 \\<and> s x = s t1)\n 2. \\<lbrakk>Suc 0 < k; m \\<noteq> NoMsg;\n     \\<And>t. event t = (t mod k = k - Suc 0); t0 = t * k;\n     t * k < t * k + k - Suc 0;\n     \\<exists>x\\<ge>0 + t * k.\n        (x mod k \\<noteq> k - Suc 0 \\<and>\n         s x = m \\<and>\n         (\\<exists>xa\\<ge>0 + Suc x.\n             (xa mod k = k - Suc 0 \\<and> s xa = NoMsg) \\<and>\n             (\\<forall>xb.\n                 xb \\<in> (if xa \\<le> 0 + Suc x then {}\n                           else [0 +\n                                 Suc x\\<dots>,xa -\n        Suc (0 + Suc x)]) \\<longrightarrow>\n                 s xb = NoMsg))) \\<and>\n        (\\<forall>xa.\n            xa \\<in> (if x \\<le> 0 + t * k then {}\n                      else [0 +\n                            t *\n                            k\\<dots>,x - Suc (0 + t * k)]) \\<longrightarrow>\n            xa mod k \\<noteq> k - Suc 0)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>x.\n                         (t * k \\<le> x \\<and>\n                          x \\<le> t * k + (k - Suc 0)) \\<and>\n                         s x = m \\<and>\n                         (\\<forall>xa.\n                             xa \\<in> (if x < t * k\n then [t * k\\<dots>,k - Suc 0]\n else if x < t * k + (k - Suc 0)\n      then [Suc x\\<dots>,t * k + (k - Suc 0) - Suc x]\n      else {}) \\<longrightarrow>\n                             s xa = NoMsg)", "apply (simp add: iIN_iff)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>t1.\n       \\<lbrakk>Suc 0 < k; s t1 \\<noteq> NoMsg;\n        \\<And>t. event t = (t mod k = k - Suc 0); t0 = t * k;\n        t * k < t * k + k - Suc 0; t1 mod k = k - Suc 0;\n        \\<forall>x.\n           t * k \\<le> x \\<and> x \\<le> t1 - Suc 0 \\<longrightarrow>\n           x mod k \\<noteq> k - Suc 0;\n        m = s t1; t * k < t1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x.\n                            (x < t * k + k - Suc 0 \\<longrightarrow>\n                             \\<not> x < t * k \\<and>\n                             (\\<not> x < t * k \\<longrightarrow>\n                              s x = s t1 \\<and>\n                              (\\<forall>xa.\n                                  Suc x \\<le> xa \\<and>\n                                  xa \\<le> Suc\n      (t * k + k - 2) \\<longrightarrow>\n                                  s xa = NoMsg))) \\<and>\n                            (\\<not> x < t * k + k - Suc 0 \\<longrightarrow>\n                             x = t * k + k - Suc 0 \\<and> s x = s t1)\n 2. \\<lbrakk>Suc 0 < k; m \\<noteq> NoMsg;\n     \\<And>t. event t = (t mod k = k - Suc 0); t0 = t * k;\n     t * k < t * k + k - Suc 0;\n     \\<exists>x\\<ge>0 + t * k.\n        (x mod k \\<noteq> k - Suc 0 \\<and>\n         s x = m \\<and>\n         (\\<exists>xa\\<ge>0 + Suc x.\n             (xa mod k = k - Suc 0 \\<and> s xa = NoMsg) \\<and>\n             (\\<forall>xb.\n                 xb \\<in> (if xa \\<le> 0 + Suc x then {}\n                           else [0 +\n                                 Suc x\\<dots>,xa -\n        Suc (0 + Suc x)]) \\<longrightarrow>\n                 s xb = NoMsg))) \\<and>\n        (\\<forall>xa.\n            xa \\<in> (if x \\<le> 0 + t * k then {}\n                      else [0 +\n                            t *\n                            k\\<dots>,x - Suc (0 + t * k)]) \\<longrightarrow>\n            xa mod k \\<noteq> k - Suc 0)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>x.\n                         (t * k \\<le> x \\<and>\n                          x \\<le> t * k + (k - Suc 0)) \\<and>\n                         s x = m \\<and>\n                         (\\<forall>xa.\n                             xa \\<in> (if x < t * k\n then [t * k\\<dots>,k - Suc 0]\n else if x < t * k + (k - Suc 0)\n      then [Suc x\\<dots>,t * k + (k - Suc 0) - Suc x]\n      else {}) \\<longrightarrow>\n                             s xa = NoMsg)", "apply (subgoal_tac \"t1 \\<le> t * k + k - Suc 0\")"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>t1.\n       \\<lbrakk>Suc 0 < k; s t1 \\<noteq> NoMsg;\n        \\<And>t. event t = (t mod k = k - Suc 0); t0 = t * k;\n        t * k < t * k + k - Suc 0; t1 mod k = k - Suc 0;\n        \\<forall>x.\n           t * k \\<le> x \\<and> x \\<le> t1 - Suc 0 \\<longrightarrow>\n           x mod k \\<noteq> k - Suc 0;\n        m = s t1; t * k < t1; t1 \\<le> t * k + k - Suc 0\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x.\n                            (x < t * k + k - Suc 0 \\<longrightarrow>\n                             \\<not> x < t * k \\<and>\n                             (\\<not> x < t * k \\<longrightarrow>\n                              s x = s t1 \\<and>\n                              (\\<forall>xa.\n                                  Suc x \\<le> xa \\<and>\n                                  xa \\<le> Suc\n      (t * k + k - 2) \\<longrightarrow>\n                                  s xa = NoMsg))) \\<and>\n                            (\\<not> x < t * k + k - Suc 0 \\<longrightarrow>\n                             x = t * k + k - Suc 0 \\<and> s x = s t1)\n 2. \\<And>t1.\n       \\<lbrakk>Suc 0 < k; s t1 \\<noteq> NoMsg;\n        \\<And>t. event t = (t mod k = k - Suc 0); t0 = t * k;\n        t * k < t * k + k - Suc 0; t1 mod k = k - Suc 0;\n        \\<forall>x.\n           t * k \\<le> x \\<and> x \\<le> t1 - Suc 0 \\<longrightarrow>\n           x mod k \\<noteq> k - Suc 0;\n        m = s t1; t * k < t1\\<rbrakk>\n       \\<Longrightarrow> t1 \\<le> t * k + k - Suc 0\n 3. \\<lbrakk>Suc 0 < k; m \\<noteq> NoMsg;\n     \\<And>t. event t = (t mod k = k - Suc 0); t0 = t * k;\n     t * k < t * k + k - Suc 0;\n     \\<exists>x\\<ge>0 + t * k.\n        (x mod k \\<noteq> k - Suc 0 \\<and>\n         s x = m \\<and>\n         (\\<exists>xa\\<ge>0 + Suc x.\n             (xa mod k = k - Suc 0 \\<and> s xa = NoMsg) \\<and>\n             (\\<forall>xb.\n                 xb \\<in> (if xa \\<le> 0 + Suc x then {}\n                           else [0 +\n                                 Suc x\\<dots>,xa -\n        Suc (0 + Suc x)]) \\<longrightarrow>\n                 s xb = NoMsg))) \\<and>\n        (\\<forall>xa.\n            xa \\<in> (if x \\<le> 0 + t * k then {}\n                      else [0 +\n                            t *\n                            k\\<dots>,x - Suc (0 + t * k)]) \\<longrightarrow>\n            xa mod k \\<noteq> k - Suc 0)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>x.\n                         (t * k \\<le> x \\<and>\n                          x \\<le> t * k + (k - Suc 0)) \\<and>\n                         s x = m \\<and>\n                         (\\<forall>xa.\n                             xa \\<in> (if x < t * k\n then [t * k\\<dots>,k - Suc 0]\n else if x < t * k + (k - Suc 0)\n      then [Suc x\\<dots>,t * k + (k - Suc 0) - Suc x]\n      else {}) \\<longrightarrow>\n                             s xa = NoMsg)", "prefer 2"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>t1.\n       \\<lbrakk>Suc 0 < k; s t1 \\<noteq> NoMsg;\n        \\<And>t. event t = (t mod k = k - Suc 0); t0 = t * k;\n        t * k < t * k + k - Suc 0; t1 mod k = k - Suc 0;\n        \\<forall>x.\n           t * k \\<le> x \\<and> x \\<le> t1 - Suc 0 \\<longrightarrow>\n           x mod k \\<noteq> k - Suc 0;\n        m = s t1; t * k < t1\\<rbrakk>\n       \\<Longrightarrow> t1 \\<le> t * k + k - Suc 0\n 2. \\<And>t1.\n       \\<lbrakk>Suc 0 < k; s t1 \\<noteq> NoMsg;\n        \\<And>t. event t = (t mod k = k - Suc 0); t0 = t * k;\n        t * k < t * k + k - Suc 0; t1 mod k = k - Suc 0;\n        \\<forall>x.\n           t * k \\<le> x \\<and> x \\<le> t1 - Suc 0 \\<longrightarrow>\n           x mod k \\<noteq> k - Suc 0;\n        m = s t1; t * k < t1; t1 \\<le> t * k + k - Suc 0\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x.\n                            (x < t * k + k - Suc 0 \\<longrightarrow>\n                             \\<not> x < t * k \\<and>\n                             (\\<not> x < t * k \\<longrightarrow>\n                              s x = s t1 \\<and>\n                              (\\<forall>xa.\n                                  Suc x \\<le> xa \\<and>\n                                  xa \\<le> Suc\n      (t * k + k - 2) \\<longrightarrow>\n                                  s xa = NoMsg))) \\<and>\n                            (\\<not> x < t * k + k - Suc 0 \\<longrightarrow>\n                             x = t * k + k - Suc 0 \\<and> s x = s t1)\n 3. \\<lbrakk>Suc 0 < k; m \\<noteq> NoMsg;\n     \\<And>t. event t = (t mod k = k - Suc 0); t0 = t * k;\n     t * k < t * k + k - Suc 0;\n     \\<exists>x\\<ge>0 + t * k.\n        (x mod k \\<noteq> k - Suc 0 \\<and>\n         s x = m \\<and>\n         (\\<exists>xa\\<ge>0 + Suc x.\n             (xa mod k = k - Suc 0 \\<and> s xa = NoMsg) \\<and>\n             (\\<forall>xb.\n                 xb \\<in> (if xa \\<le> 0 + Suc x then {}\n                           else [0 +\n                                 Suc x\\<dots>,xa -\n        Suc (0 + Suc x)]) \\<longrightarrow>\n                 s xb = NoMsg))) \\<and>\n        (\\<forall>xa.\n            xa \\<in> (if x \\<le> 0 + t * k then {}\n                      else [0 +\n                            t *\n                            k\\<dots>,x - Suc (0 + t * k)]) \\<longrightarrow>\n            xa mod k \\<noteq> k - Suc 0)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>x.\n                         (t * k \\<le> x \\<and>\n                          x \\<le> t * k + (k - Suc 0)) \\<and>\n                         s x = m \\<and>\n                         (\\<forall>xa.\n                             xa \\<in> (if x < t * k\n then [t * k\\<dots>,k - Suc 0]\n else if x < t * k + (k - Suc 0)\n      then [Suc x\\<dots>,t * k + (k - Suc 0) - Suc x]\n      else {}) \\<longrightarrow>\n                             s xa = NoMsg)", "apply (rule ccontr)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>t1.\n       \\<lbrakk>Suc 0 < k; s t1 \\<noteq> NoMsg;\n        \\<And>t. event t = (t mod k = k - Suc 0); t0 = t * k;\n        t * k < t * k + k - Suc 0; t1 mod k = k - Suc 0;\n        \\<forall>x.\n           t * k \\<le> x \\<and> x \\<le> t1 - Suc 0 \\<longrightarrow>\n           x mod k \\<noteq> k - Suc 0;\n        m = s t1; t * k < t1; \\<not> t1 \\<le> t * k + k - Suc 0\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>t1.\n       \\<lbrakk>Suc 0 < k; s t1 \\<noteq> NoMsg;\n        \\<And>t. event t = (t mod k = k - Suc 0); t0 = t * k;\n        t * k < t * k + k - Suc 0; t1 mod k = k - Suc 0;\n        \\<forall>x.\n           t * k \\<le> x \\<and> x \\<le> t1 - Suc 0 \\<longrightarrow>\n           x mod k \\<noteq> k - Suc 0;\n        m = s t1; t * k < t1; t1 \\<le> t * k + k - Suc 0\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x.\n                            (x < t * k + k - Suc 0 \\<longrightarrow>\n                             \\<not> x < t * k \\<and>\n                             (\\<not> x < t * k \\<longrightarrow>\n                              s x = s t1 \\<and>\n                              (\\<forall>xa.\n                                  Suc x \\<le> xa \\<and>\n                                  xa \\<le> Suc\n      (t * k + k - 2) \\<longrightarrow>\n                                  s xa = NoMsg))) \\<and>\n                            (\\<not> x < t * k + k - Suc 0 \\<longrightarrow>\n                             x = t * k + k - Suc 0 \\<and> s x = s t1)\n 3. \\<lbrakk>Suc 0 < k; m \\<noteq> NoMsg;\n     \\<And>t. event t = (t mod k = k - Suc 0); t0 = t * k;\n     t * k < t * k + k - Suc 0;\n     \\<exists>x\\<ge>0 + t * k.\n        (x mod k \\<noteq> k - Suc 0 \\<and>\n         s x = m \\<and>\n         (\\<exists>xa\\<ge>0 + Suc x.\n             (xa mod k = k - Suc 0 \\<and> s xa = NoMsg) \\<and>\n             (\\<forall>xb.\n                 xb \\<in> (if xa \\<le> 0 + Suc x then {}\n                           else [0 +\n                                 Suc x\\<dots>,xa -\n        Suc (0 + Suc x)]) \\<longrightarrow>\n                 s xb = NoMsg))) \\<and>\n        (\\<forall>xa.\n            xa \\<in> (if x \\<le> 0 + t * k then {}\n                      else [0 +\n                            t *\n                            k\\<dots>,x - Suc (0 + t * k)]) \\<longrightarrow>\n            xa mod k \\<noteq> k - Suc 0)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>x.\n                         (t * k \\<le> x \\<and>\n                          x \\<le> t * k + (k - Suc 0)) \\<and>\n                         s x = m \\<and>\n                         (\\<forall>xa.\n                             xa \\<in> (if x < t * k\n then [t * k\\<dots>,k - Suc 0]\n else if x < t * k + (k - Suc 0)\n      then [Suc x\\<dots>,t * k + (k - Suc 0) - Suc x]\n      else {}) \\<longrightarrow>\n                             s xa = NoMsg)", "apply (drule_tac x=\"t * k + k - Suc 0\" in spec)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>t1.\n       \\<lbrakk>Suc 0 < k; s t1 \\<noteq> NoMsg;\n        \\<And>t. event t = (t mod k = k - Suc 0); t0 = t * k;\n        t * k < t * k + k - Suc 0; t1 mod k = k - Suc 0; m = s t1;\n        t * k < t1; \\<not> t1 \\<le> t * k + k - Suc 0;\n        t * k \\<le> t * k + k - Suc 0 \\<and>\n        t * k + k - Suc 0 \\<le> t1 - Suc 0 \\<longrightarrow>\n        (t * k + k - Suc 0) mod k \\<noteq> k - Suc 0\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>t1.\n       \\<lbrakk>Suc 0 < k; s t1 \\<noteq> NoMsg;\n        \\<And>t. event t = (t mod k = k - Suc 0); t0 = t * k;\n        t * k < t * k + k - Suc 0; t1 mod k = k - Suc 0;\n        \\<forall>x.\n           t * k \\<le> x \\<and> x \\<le> t1 - Suc 0 \\<longrightarrow>\n           x mod k \\<noteq> k - Suc 0;\n        m = s t1; t * k < t1; t1 \\<le> t * k + k - Suc 0\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x.\n                            (x < t * k + k - Suc 0 \\<longrightarrow>\n                             \\<not> x < t * k \\<and>\n                             (\\<not> x < t * k \\<longrightarrow>\n                              s x = s t1 \\<and>\n                              (\\<forall>xa.\n                                  Suc x \\<le> xa \\<and>\n                                  xa \\<le> Suc\n      (t * k + k - 2) \\<longrightarrow>\n                                  s xa = NoMsg))) \\<and>\n                            (\\<not> x < t * k + k - Suc 0 \\<longrightarrow>\n                             x = t * k + k - Suc 0 \\<and> s x = s t1)\n 3. \\<lbrakk>Suc 0 < k; m \\<noteq> NoMsg;\n     \\<And>t. event t = (t mod k = k - Suc 0); t0 = t * k;\n     t * k < t * k + k - Suc 0;\n     \\<exists>x\\<ge>0 + t * k.\n        (x mod k \\<noteq> k - Suc 0 \\<and>\n         s x = m \\<and>\n         (\\<exists>xa\\<ge>0 + Suc x.\n             (xa mod k = k - Suc 0 \\<and> s xa = NoMsg) \\<and>\n             (\\<forall>xb.\n                 xb \\<in> (if xa \\<le> 0 + Suc x then {}\n                           else [0 +\n                                 Suc x\\<dots>,xa -\n        Suc (0 + Suc x)]) \\<longrightarrow>\n                 s xb = NoMsg))) \\<and>\n        (\\<forall>xa.\n            xa \\<in> (if x \\<le> 0 + t * k then {}\n                      else [0 +\n                            t *\n                            k\\<dots>,x - Suc (0 + t * k)]) \\<longrightarrow>\n            xa mod k \\<noteq> k - Suc 0)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>x.\n                         (t * k \\<le> x \\<and>\n                          x \\<le> t * k + (k - Suc 0)) \\<and>\n                         s x = m \\<and>\n                         (\\<forall>xa.\n                             xa \\<in> (if x < t * k\n then [t * k\\<dots>,k - Suc 0]\n else if x < t * k + (k - Suc 0)\n      then [Suc x\\<dots>,t * k + (k - Suc 0) - Suc x]\n      else {}) \\<longrightarrow>\n                             s xa = NoMsg)", "apply (simp add: mod_pred)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>t1.\n       \\<lbrakk>Suc 0 < k; s t1 \\<noteq> NoMsg;\n        \\<And>t. event t = (t mod k = k - Suc 0); t0 = t * k;\n        t * k < t * k + k - Suc 0; t1 mod k = k - Suc 0;\n        \\<forall>x.\n           t * k \\<le> x \\<and> x \\<le> t1 - Suc 0 \\<longrightarrow>\n           x mod k \\<noteq> k - Suc 0;\n        m = s t1; t * k < t1; t1 \\<le> t * k + k - Suc 0\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x.\n                            (x < t * k + k - Suc 0 \\<longrightarrow>\n                             \\<not> x < t * k \\<and>\n                             (\\<not> x < t * k \\<longrightarrow>\n                              s x = s t1 \\<and>\n                              (\\<forall>xa.\n                                  Suc x \\<le> xa \\<and>\n                                  xa \\<le> Suc\n      (t * k + k - 2) \\<longrightarrow>\n                                  s xa = NoMsg))) \\<and>\n                            (\\<not> x < t * k + k - Suc 0 \\<longrightarrow>\n                             x = t * k + k - Suc 0 \\<and> s x = s t1)\n 2. \\<lbrakk>Suc 0 < k; m \\<noteq> NoMsg;\n     \\<And>t. event t = (t mod k = k - Suc 0); t0 = t * k;\n     t * k < t * k + k - Suc 0;\n     \\<exists>x\\<ge>0 + t * k.\n        (x mod k \\<noteq> k - Suc 0 \\<and>\n         s x = m \\<and>\n         (\\<exists>xa\\<ge>0 + Suc x.\n             (xa mod k = k - Suc 0 \\<and> s xa = NoMsg) \\<and>\n             (\\<forall>xb.\n                 xb \\<in> (if xa \\<le> 0 + Suc x then {}\n                           else [0 +\n                                 Suc x\\<dots>,xa -\n        Suc (0 + Suc x)]) \\<longrightarrow>\n                 s xb = NoMsg))) \\<and>\n        (\\<forall>xa.\n            xa \\<in> (if x \\<le> 0 + t * k then {}\n                      else [0 +\n                            t *\n                            k\\<dots>,x - Suc (0 + t * k)]) \\<longrightarrow>\n            xa mod k \\<noteq> k - Suc 0)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>x.\n                         (t * k \\<le> x \\<and>\n                          x \\<le> t * k + (k - Suc 0)) \\<and>\n                         s x = m \\<and>\n                         (\\<forall>xa.\n                             xa \\<in> (if x < t * k\n then [t * k\\<dots>,k - Suc 0]\n else if x < t * k + (k - Suc 0)\n      then [Suc x\\<dots>,t * k + (k - Suc 0) - Suc x]\n      else {}) \\<longrightarrow>\n                             s xa = NoMsg)", "apply (frule_tac a=\"t * k\" and b=t1 and k=\"k - Suc 0\" and m=k\n   in le_mod_add_eq_imp_add_mod_le[OF less_imp_le, rule_format])"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>t1.\n       \\<lbrakk>Suc 0 < k; s t1 \\<noteq> NoMsg;\n        \\<And>t. event t = (t mod k = k - Suc 0); t0 = t * k;\n        t * k < t * k + k - Suc 0; t1 mod k = k - Suc 0;\n        \\<forall>x.\n           t * k \\<le> x \\<and> x \\<le> t1 - Suc 0 \\<longrightarrow>\n           x mod k \\<noteq> k - Suc 0;\n        m = s t1; t * k < t1; t1 \\<le> t * k + k - Suc 0\\<rbrakk>\n       \\<Longrightarrow> (t * k + (k - Suc 0)) mod k = t1 mod k\n 2. \\<And>t1.\n       \\<lbrakk>Suc 0 < k; s t1 \\<noteq> NoMsg;\n        \\<And>t. event t = (t mod k = k - Suc 0); t0 = t * k;\n        t * k < t * k + k - Suc 0; t1 mod k = k - Suc 0;\n        \\<forall>x.\n           t * k \\<le> x \\<and> x \\<le> t1 - Suc 0 \\<longrightarrow>\n           x mod k \\<noteq> k - Suc 0;\n        m = s t1; t * k < t1; t1 \\<le> t * k + k - Suc 0;\n        t * k + (k - Suc 0) mod k \\<le> t1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x.\n                            (x < t * k + k - Suc 0 \\<longrightarrow>\n                             \\<not> x < t * k \\<and>\n                             (\\<not> x < t * k \\<longrightarrow>\n                              s x = s t1 \\<and>\n                              (\\<forall>xa.\n                                  Suc x \\<le> xa \\<and>\n                                  xa \\<le> Suc\n      (t * k + k - 2) \\<longrightarrow>\n                                  s xa = NoMsg))) \\<and>\n                            (\\<not> x < t * k + k - Suc 0 \\<longrightarrow>\n                             x = t * k + k - Suc 0 \\<and> s x = s t1)\n 3. \\<lbrakk>Suc 0 < k; m \\<noteq> NoMsg;\n     \\<And>t. event t = (t mod k = k - Suc 0); t0 = t * k;\n     t * k < t * k + k - Suc 0;\n     \\<exists>x\\<ge>0 + t * k.\n        (x mod k \\<noteq> k - Suc 0 \\<and>\n         s x = m \\<and>\n         (\\<exists>xa\\<ge>0 + Suc x.\n             (xa mod k = k - Suc 0 \\<and> s xa = NoMsg) \\<and>\n             (\\<forall>xb.\n                 xb \\<in> (if xa \\<le> 0 + Suc x then {}\n                           else [0 +\n                                 Suc x\\<dots>,xa -\n        Suc (0 + Suc x)]) \\<longrightarrow>\n                 s xb = NoMsg))) \\<and>\n        (\\<forall>xa.\n            xa \\<in> (if x \\<le> 0 + t * k then {}\n                      else [0 +\n                            t *\n                            k\\<dots>,x - Suc (0 + t * k)]) \\<longrightarrow>\n            xa mod k \\<noteq> k - Suc 0)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>x.\n                         (t * k \\<le> x \\<and>\n                          x \\<le> t * k + (k - Suc 0)) \\<and>\n                         s x = m \\<and>\n                         (\\<forall>xa.\n                             xa \\<in> (if x < t * k\n then [t * k\\<dots>,k - Suc 0]\n else if x < t * k + (k - Suc 0)\n      then [Suc x\\<dots>,t * k + (k - Suc 0) - Suc x]\n      else {}) \\<longrightarrow>\n                             s xa = NoMsg)", "apply (simp add: add.commute[of \"t * k\"] mod_pred)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>t1.\n       \\<lbrakk>Suc 0 < k; s t1 \\<noteq> NoMsg;\n        \\<And>t. event t = (t mod k = k - Suc 0); t0 = t * k;\n        t * k < t * k + k - Suc 0; t1 mod k = k - Suc 0;\n        \\<forall>x.\n           t * k \\<le> x \\<and> x \\<le> t1 - Suc 0 \\<longrightarrow>\n           x mod k \\<noteq> k - Suc 0;\n        m = s t1; t * k < t1; t1 \\<le> t * k + k - Suc 0;\n        t * k + (k - Suc 0) mod k \\<le> t1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x.\n                            (x < t * k + k - Suc 0 \\<longrightarrow>\n                             \\<not> x < t * k \\<and>\n                             (\\<not> x < t * k \\<longrightarrow>\n                              s x = s t1 \\<and>\n                              (\\<forall>xa.\n                                  Suc x \\<le> xa \\<and>\n                                  xa \\<le> Suc\n      (t * k + k - 2) \\<longrightarrow>\n                                  s xa = NoMsg))) \\<and>\n                            (\\<not> x < t * k + k - Suc 0 \\<longrightarrow>\n                             x = t * k + k - Suc 0 \\<and> s x = s t1)\n 2. \\<lbrakk>Suc 0 < k; m \\<noteq> NoMsg;\n     \\<And>t. event t = (t mod k = k - Suc 0); t0 = t * k;\n     t * k < t * k + k - Suc 0;\n     \\<exists>x\\<ge>0 + t * k.\n        (x mod k \\<noteq> k - Suc 0 \\<and>\n         s x = m \\<and>\n         (\\<exists>xa\\<ge>0 + Suc x.\n             (xa mod k = k - Suc 0 \\<and> s xa = NoMsg) \\<and>\n             (\\<forall>xb.\n                 xb \\<in> (if xa \\<le> 0 + Suc x then {}\n                           else [0 +\n                                 Suc x\\<dots>,xa -\n        Suc (0 + Suc x)]) \\<longrightarrow>\n                 s xb = NoMsg))) \\<and>\n        (\\<forall>xa.\n            xa \\<in> (if x \\<le> 0 + t * k then {}\n                      else [0 +\n                            t *\n                            k\\<dots>,x - Suc (0 + t * k)]) \\<longrightarrow>\n            xa mod k \\<noteq> k - Suc 0)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>x.\n                         (t * k \\<le> x \\<and>\n                          x \\<le> t * k + (k - Suc 0)) \\<and>\n                         s x = m \\<and>\n                         (\\<forall>xa.\n                             xa \\<in> (if x < t * k\n then [t * k\\<dots>,k - Suc 0]\n else if x < t * k + (k - Suc 0)\n      then [Suc x\\<dots>,t * k + (k - Suc 0) - Suc x]\n      else {}) \\<longrightarrow>\n                             s xa = NoMsg)", "apply (rule_tac x=t1 in exI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>t1.\n       \\<lbrakk>Suc 0 < k; s t1 \\<noteq> NoMsg;\n        \\<And>t. event t = (t mod k = k - Suc 0); t0 = t * k;\n        t * k < t * k + k - Suc 0; t1 mod k = k - Suc 0;\n        \\<forall>x.\n           t * k \\<le> x \\<and> x \\<le> t1 - Suc 0 \\<longrightarrow>\n           x mod k \\<noteq> k - Suc 0;\n        m = s t1; t * k < t1; t1 \\<le> t * k + k - Suc 0;\n        t * k + (k - Suc 0) mod k \\<le> t1\\<rbrakk>\n       \\<Longrightarrow> (t1 < t * k + k - Suc 0 \\<longrightarrow>\n                          \\<not> t1 < t * k \\<and>\n                          (\\<not> t1 < t * k \\<longrightarrow>\n                           s t1 = s t1 \\<and>\n                           (\\<forall>x.\n                               Suc t1 \\<le> x \\<and>\n                               x \\<le> Suc (t * k + k - 2) \\<longrightarrow>\n                               s x = NoMsg))) \\<and>\n                         (\\<not> t1 < t * k + k - Suc 0 \\<longrightarrow>\n                          t1 = t * k + k - Suc 0 \\<and> s t1 = s t1)\n 2. \\<lbrakk>Suc 0 < k; m \\<noteq> NoMsg;\n     \\<And>t. event t = (t mod k = k - Suc 0); t0 = t * k;\n     t * k < t * k + k - Suc 0;\n     \\<exists>x\\<ge>0 + t * k.\n        (x mod k \\<noteq> k - Suc 0 \\<and>\n         s x = m \\<and>\n         (\\<exists>xa\\<ge>0 + Suc x.\n             (xa mod k = k - Suc 0 \\<and> s xa = NoMsg) \\<and>\n             (\\<forall>xb.\n                 xb \\<in> (if xa \\<le> 0 + Suc x then {}\n                           else [0 +\n                                 Suc x\\<dots>,xa -\n        Suc (0 + Suc x)]) \\<longrightarrow>\n                 s xb = NoMsg))) \\<and>\n        (\\<forall>xa.\n            xa \\<in> (if x \\<le> 0 + t * k then {}\n                      else [0 +\n                            t *\n                            k\\<dots>,x - Suc (0 + t * k)]) \\<longrightarrow>\n            xa mod k \\<noteq> k - Suc 0)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>x.\n                         (t * k \\<le> x \\<and>\n                          x \\<le> t * k + (k - Suc 0)) \\<and>\n                         s x = m \\<and>\n                         (\\<forall>xa.\n                             xa \\<in> (if x < t * k\n then [t * k\\<dots>,k - Suc 0]\n else if x < t * k + (k - Suc 0)\n      then [Suc x\\<dots>,t * k + (k - Suc 0) - Suc x]\n      else {}) \\<longrightarrow>\n                             s xa = NoMsg)", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Suc 0 < k; m \\<noteq> NoMsg;\n     \\<And>t. event t = (t mod k = k - Suc 0); t0 = t * k;\n     t * k < t * k + k - Suc 0;\n     \\<exists>x\\<ge>0 + t * k.\n        (x mod k \\<noteq> k - Suc 0 \\<and>\n         s x = m \\<and>\n         (\\<exists>xa\\<ge>0 + Suc x.\n             (xa mod k = k - Suc 0 \\<and> s xa = NoMsg) \\<and>\n             (\\<forall>xb.\n                 xb \\<in> (if xa \\<le> 0 + Suc x then {}\n                           else [0 +\n                                 Suc x\\<dots>,xa -\n        Suc (0 + Suc x)]) \\<longrightarrow>\n                 s xb = NoMsg))) \\<and>\n        (\\<forall>xa.\n            xa \\<in> (if x \\<le> 0 + t * k then {}\n                      else [0 +\n                            t *\n                            k\\<dots>,x - Suc (0 + t * k)]) \\<longrightarrow>\n            xa mod k \\<noteq> k - Suc 0)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>x.\n                         (t * k \\<le> x \\<and>\n                          x \\<le> t * k + (k - Suc 0)) \\<and>\n                         s x = m \\<and>\n                         (\\<forall>xa.\n                             xa \\<in> (if x < t * k\n then [t * k\\<dots>,k - Suc 0]\n else if x < t * k + (k - Suc 0)\n      then [Suc x\\<dots>,t * k + (k - Suc 0) - Suc x]\n      else {}) \\<longrightarrow>\n                             s xa = NoMsg)", "apply (clarsimp, rename_tac t1 t2)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>t1 t2.\n       \\<lbrakk>Suc 0 < k; s t1 \\<noteq> NoMsg;\n        \\<And>t. event t = (t mod k = k - Suc 0); t0 = t * k;\n        t * k < t * k + k - Suc 0; t * k \\<le> t1;\n        t1 mod k \\<noteq> k - Suc 0; m = s t1;\n        \\<forall>x.\n           x \\<in> (if t1 = t * k then {}\n                    else [0 +\n                          t *\n                          k\\<dots>,t1 - Suc (0 + t * k)]) \\<longrightarrow>\n           x mod k \\<noteq> k - Suc 0;\n        Suc t1 \\<le> t2; t2 mod k = k - Suc 0; s t2 = NoMsg;\n        \\<forall>x.\n           x \\<in> (if t2 = Suc t1 then {}\n                    else [0 +\n                          Suc t1\\<dots>,t2 -\n  Suc (0 + Suc t1)]) \\<longrightarrow>\n           s x = NoMsg\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x.\n                            (x < t * k + k - Suc 0 \\<longrightarrow>\n                             \\<not> x < t * k \\<and>\n                             (\\<not> x < t * k \\<longrightarrow>\n                              s x = s t1 \\<and>\n                              (\\<forall>xa.\n                                  xa \\<in> [Suc\n       x\\<dots>,t * k + k - Suc (Suc x)] \\<longrightarrow>\n                                  s xa = NoMsg))) \\<and>\n                            (\\<not> x < t * k + k - Suc 0 \\<longrightarrow>\n                             x = t * k + k - Suc 0 \\<and> s x = s t1)", "apply (rule_tac x=t1 in exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>t1 t2.\n       \\<lbrakk>Suc 0 < k; s t1 \\<noteq> NoMsg;\n        \\<And>t. event t = (t mod k = k - Suc 0); t0 = t * k;\n        t * k < t * k + k - Suc 0; t * k \\<le> t1;\n        t1 mod k \\<noteq> k - Suc 0; m = s t1;\n        \\<forall>x.\n           x \\<in> (if t1 = t * k then {}\n                    else [0 +\n                          t *\n                          k\\<dots>,t1 - Suc (0 + t * k)]) \\<longrightarrow>\n           x mod k \\<noteq> k - Suc 0;\n        Suc t1 \\<le> t2; t2 mod k = k - Suc 0; s t2 = NoMsg;\n        \\<forall>x.\n           x \\<in> (if t2 = Suc t1 then {}\n                    else [0 +\n                          Suc t1\\<dots>,t2 -\n  Suc (0 + Suc t1)]) \\<longrightarrow>\n           s x = NoMsg\\<rbrakk>\n       \\<Longrightarrow> (t1 < t * k + k - Suc 0 \\<longrightarrow>\n                          \\<not> t1 < t * k \\<and>\n                          (\\<not> t1 < t * k \\<longrightarrow>\n                           s t1 = s t1 \\<and>\n                           (\\<forall>x.\n                               x \\<in> [Suc\n   t1\\<dots>,t * k + k - Suc (Suc t1)] \\<longrightarrow>\n                               s x = NoMsg))) \\<and>\n                         (\\<not> t1 < t * k + k - Suc 0 \\<longrightarrow>\n                          t1 = t * k + k - Suc 0 \\<and> s t1 = s t1)", "apply (drule_tac y=t1 in order_le_imp_less_or_eq, erule disjE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>t1 t2.\n       \\<lbrakk>Suc 0 < k; s t1 \\<noteq> NoMsg;\n        \\<And>t. event t = (t mod k = k - Suc 0); t0 = t * k;\n        t * k < t * k + k - Suc 0; t1 mod k \\<noteq> k - Suc 0; m = s t1;\n        \\<forall>x.\n           x \\<in> (if t1 = t * k then {}\n                    else [0 +\n                          t *\n                          k\\<dots>,t1 - Suc (0 + t * k)]) \\<longrightarrow>\n           x mod k \\<noteq> k - Suc 0;\n        Suc t1 \\<le> t2; t2 mod k = k - Suc 0; s t2 = NoMsg;\n        \\<forall>x.\n           x \\<in> (if t2 = Suc t1 then {}\n                    else [0 +\n                          Suc t1\\<dots>,t2 -\n  Suc (0 + Suc t1)]) \\<longrightarrow>\n           s x = NoMsg;\n        t * k < t1\\<rbrakk>\n       \\<Longrightarrow> (t1 < t * k + k - Suc 0 \\<longrightarrow>\n                          \\<not> t1 < t * k \\<and>\n                          (\\<not> t1 < t * k \\<longrightarrow>\n                           s t1 = s t1 \\<and>\n                           (\\<forall>x.\n                               x \\<in> [Suc\n   t1\\<dots>,t * k + k - Suc (Suc t1)] \\<longrightarrow>\n                               s x = NoMsg))) \\<and>\n                         (\\<not> t1 < t * k + k - Suc 0 \\<longrightarrow>\n                          t1 = t * k + k - Suc 0 \\<and> s t1 = s t1)\n 2. \\<And>t1 t2.\n       \\<lbrakk>Suc 0 < k; s t1 \\<noteq> NoMsg;\n        \\<And>t. event t = (t mod k = k - Suc 0); t0 = t * k;\n        t * k < t * k + k - Suc 0; t1 mod k \\<noteq> k - Suc 0; m = s t1;\n        \\<forall>x.\n           x \\<in> (if t1 = t * k then {}\n                    else [0 +\n                          t *\n                          k\\<dots>,t1 - Suc (0 + t * k)]) \\<longrightarrow>\n           x mod k \\<noteq> k - Suc 0;\n        Suc t1 \\<le> t2; t2 mod k = k - Suc 0; s t2 = NoMsg;\n        \\<forall>x.\n           x \\<in> (if t2 = Suc t1 then {}\n                    else [0 +\n                          Suc t1\\<dots>,t2 -\n  Suc (0 + Suc t1)]) \\<longrightarrow>\n           s x = NoMsg;\n        t * k = t1\\<rbrakk>\n       \\<Longrightarrow> (t1 < t * k + k - Suc 0 \\<longrightarrow>\n                          \\<not> t1 < t * k \\<and>\n                          (\\<not> t1 < t * k \\<longrightarrow>\n                           s t1 = s t1 \\<and>\n                           (\\<forall>x.\n                               x \\<in> [Suc\n   t1\\<dots>,t * k + k - Suc (Suc t1)] \\<longrightarrow>\n                               s x = NoMsg))) \\<and>\n                         (\\<not> t1 < t * k + k - Suc 0 \\<longrightarrow>\n                          t1 = t * k + k - Suc 0 \\<and> s t1 = s t1)", "prefer 2"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>t1 t2.\n       \\<lbrakk>Suc 0 < k; s t1 \\<noteq> NoMsg;\n        \\<And>t. event t = (t mod k = k - Suc 0); t0 = t * k;\n        t * k < t * k + k - Suc 0; t1 mod k \\<noteq> k - Suc 0; m = s t1;\n        \\<forall>x.\n           x \\<in> (if t1 = t * k then {}\n                    else [0 +\n                          t *\n                          k\\<dots>,t1 - Suc (0 + t * k)]) \\<longrightarrow>\n           x mod k \\<noteq> k - Suc 0;\n        Suc t1 \\<le> t2; t2 mod k = k - Suc 0; s t2 = NoMsg;\n        \\<forall>x.\n           x \\<in> (if t2 = Suc t1 then {}\n                    else [0 +\n                          Suc t1\\<dots>,t2 -\n  Suc (0 + Suc t1)]) \\<longrightarrow>\n           s x = NoMsg;\n        t * k = t1\\<rbrakk>\n       \\<Longrightarrow> (t1 < t * k + k - Suc 0 \\<longrightarrow>\n                          \\<not> t1 < t * k \\<and>\n                          (\\<not> t1 < t * k \\<longrightarrow>\n                           s t1 = s t1 \\<and>\n                           (\\<forall>x.\n                               x \\<in> [Suc\n   t1\\<dots>,t * k + k - Suc (Suc t1)] \\<longrightarrow>\n                               s x = NoMsg))) \\<and>\n                         (\\<not> t1 < t * k + k - Suc 0 \\<longrightarrow>\n                          t1 = t * k + k - Suc 0 \\<and> s t1 = s t1)\n 2. \\<And>t1 t2.\n       \\<lbrakk>Suc 0 < k; s t1 \\<noteq> NoMsg;\n        \\<And>t. event t = (t mod k = k - Suc 0); t0 = t * k;\n        t * k < t * k + k - Suc 0; t1 mod k \\<noteq> k - Suc 0; m = s t1;\n        \\<forall>x.\n           x \\<in> (if t1 = t * k then {}\n                    else [0 +\n                          t *\n                          k\\<dots>,t1 - Suc (0 + t * k)]) \\<longrightarrow>\n           x mod k \\<noteq> k - Suc 0;\n        Suc t1 \\<le> t2; t2 mod k = k - Suc 0; s t2 = NoMsg;\n        \\<forall>x.\n           x \\<in> (if t2 = Suc t1 then {}\n                    else [0 +\n                          Suc t1\\<dots>,t2 -\n  Suc (0 + Suc t1)]) \\<longrightarrow>\n           s x = NoMsg;\n        t * k < t1\\<rbrakk>\n       \\<Longrightarrow> (t1 < t * k + k - Suc 0 \\<longrightarrow>\n                          \\<not> t1 < t * k \\<and>\n                          (\\<not> t1 < t * k \\<longrightarrow>\n                           s t1 = s t1 \\<and>\n                           (\\<forall>x.\n                               x \\<in> [Suc\n   t1\\<dots>,t * k + k - Suc (Suc t1)] \\<longrightarrow>\n                               s x = NoMsg))) \\<and>\n                         (\\<not> t1 < t * k + k - Suc 0 \\<longrightarrow>\n                          t1 = t * k + k - Suc 0 \\<and> s t1 = s t1)", "apply (drule_tac t=t1 in sym)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>t1 t2.\n       \\<lbrakk>Suc 0 < k; s t1 \\<noteq> NoMsg;\n        \\<And>t. event t = (t mod k = k - Suc 0); t0 = t * k;\n        t * k < t * k + k - Suc 0; t1 mod k \\<noteq> k - Suc 0; m = s t1;\n        \\<forall>x.\n           x \\<in> (if t1 = t * k then {}\n                    else [0 +\n                          t *\n                          k\\<dots>,t1 - Suc (0 + t * k)]) \\<longrightarrow>\n           x mod k \\<noteq> k - Suc 0;\n        Suc t1 \\<le> t2; t2 mod k = k - Suc 0; s t2 = NoMsg;\n        \\<forall>x.\n           x \\<in> (if t2 = Suc t1 then {}\n                    else [0 +\n                          Suc t1\\<dots>,t2 -\n  Suc (0 + Suc t1)]) \\<longrightarrow>\n           s x = NoMsg;\n        t1 = t * k\\<rbrakk>\n       \\<Longrightarrow> (t1 < t * k + k - Suc 0 \\<longrightarrow>\n                          \\<not> t1 < t * k \\<and>\n                          (\\<not> t1 < t * k \\<longrightarrow>\n                           s t1 = s t1 \\<and>\n                           (\\<forall>x.\n                               x \\<in> [Suc\n   t1\\<dots>,t * k + k - Suc (Suc t1)] \\<longrightarrow>\n                               s x = NoMsg))) \\<and>\n                         (\\<not> t1 < t * k + k - Suc 0 \\<longrightarrow>\n                          t1 = t * k + k - Suc 0 \\<and> s t1 = s t1)\n 2. \\<And>t1 t2.\n       \\<lbrakk>Suc 0 < k; s t1 \\<noteq> NoMsg;\n        \\<And>t. event t = (t mod k = k - Suc 0); t0 = t * k;\n        t * k < t * k + k - Suc 0; t1 mod k \\<noteq> k - Suc 0; m = s t1;\n        \\<forall>x.\n           x \\<in> (if t1 = t * k then {}\n                    else [0 +\n                          t *\n                          k\\<dots>,t1 - Suc (0 + t * k)]) \\<longrightarrow>\n           x mod k \\<noteq> k - Suc 0;\n        Suc t1 \\<le> t2; t2 mod k = k - Suc 0; s t2 = NoMsg;\n        \\<forall>x.\n           x \\<in> (if t2 = Suc t1 then {}\n                    else [0 +\n                          Suc t1\\<dots>,t2 -\n  Suc (0 + Suc t1)]) \\<longrightarrow>\n           s x = NoMsg;\n        t * k < t1\\<rbrakk>\n       \\<Longrightarrow> (t1 < t * k + k - Suc 0 \\<longrightarrow>\n                          \\<not> t1 < t * k \\<and>\n                          (\\<not> t1 < t * k \\<longrightarrow>\n                           s t1 = s t1 \\<and>\n                           (\\<forall>x.\n                               x \\<in> [Suc\n   t1\\<dots>,t * k + k - Suc (Suc t1)] \\<longrightarrow>\n                               s x = NoMsg))) \\<and>\n                         (\\<not> t1 < t * k + k - Suc 0 \\<longrightarrow>\n                          t1 = t * k + k - Suc 0 \\<and> s t1 = s t1)", "apply (clarsimp simp: iIN_iff, rename_tac t3)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>t2 t3.\n       \\<lbrakk>Suc 0 < k; s (t * k) \\<noteq> NoMsg;\n        \\<And>t. event t = (t mod k = k - Suc 0); t0 = t * k;\n        t * k < t * k + k - Suc 0; m = s (t * k); Suc (t * k) \\<le> t2;\n        t2 mod k = k - Suc 0; s t2 = NoMsg;\n        \\<forall>x.\n           x \\<in> (if t2 = Suc (t * k) then {}\n                    else [0 +\n                          Suc (t *\n                               k)\\<dots>,t2 -\n   Suc (0 + Suc (t * k))]) \\<longrightarrow>\n           s x = NoMsg;\n        Suc (t * k) \\<le> t3; t3 \\<le> Suc (t * k + k - 2)\\<rbrakk>\n       \\<Longrightarrow> s t3 = NoMsg\n 2. \\<And>t1 t2.\n       \\<lbrakk>Suc 0 < k; s t1 \\<noteq> NoMsg;\n        \\<And>t. event t = (t mod k = k - Suc 0); t0 = t * k;\n        t * k < t * k + k - Suc 0; t1 mod k \\<noteq> k - Suc 0; m = s t1;\n        \\<forall>x.\n           x \\<in> (if t1 = t * k then {}\n                    else [0 +\n                          t *\n                          k\\<dots>,t1 - Suc (0 + t * k)]) \\<longrightarrow>\n           x mod k \\<noteq> k - Suc 0;\n        Suc t1 \\<le> t2; t2 mod k = k - Suc 0; s t2 = NoMsg;\n        \\<forall>x.\n           x \\<in> (if t2 = Suc t1 then {}\n                    else [0 +\n                          Suc t1\\<dots>,t2 -\n  Suc (0 + Suc t1)]) \\<longrightarrow>\n           s x = NoMsg;\n        t * k < t1\\<rbrakk>\n       \\<Longrightarrow> (t1 < t * k + k - Suc 0 \\<longrightarrow>\n                          \\<not> t1 < t * k \\<and>\n                          (\\<not> t1 < t * k \\<longrightarrow>\n                           s t1 = s t1 \\<and>\n                           (\\<forall>x.\n                               x \\<in> [Suc\n   t1\\<dots>,t * k + k - Suc (Suc t1)] \\<longrightarrow>\n                               s x = NoMsg))) \\<and>\n                         (\\<not> t1 < t * k + k - Suc 0 \\<longrightarrow>\n                          t1 = t * k + k - Suc 0 \\<and> s t1 = s t1)", "apply (split if_split_asm)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>t2 t3.\n       \\<lbrakk>Suc (t * k) \\<le> t3; t3 \\<le> Suc (t * k + k - 2);\n        Suc 0 < k; s (t * k) \\<noteq> NoMsg;\n        \\<And>t. event t = (t mod k = k - Suc 0); t0 = t * k;\n        t * k < t * k + k - Suc 0; m = s (t * k); Suc (t * k) \\<le> t2;\n        t2 mod k = k - Suc 0; s t2 = NoMsg; t2 = Suc (t * k);\n        \\<forall>x. x \\<in> {} \\<longrightarrow> s x = NoMsg\\<rbrakk>\n       \\<Longrightarrow> s t3 = NoMsg\n 2. \\<And>t2 t3.\n       \\<lbrakk>Suc (t * k) \\<le> t3; t3 \\<le> Suc (t * k + k - 2);\n        Suc 0 < k; s (t * k) \\<noteq> NoMsg;\n        \\<And>t. event t = (t mod k = k - Suc 0); t0 = t * k;\n        t * k < t * k + k - Suc 0; m = s (t * k); Suc (t * k) \\<le> t2;\n        t2 mod k = k - Suc 0; s t2 = NoMsg; t2 \\<noteq> Suc (t * k);\n        \\<forall>x.\n           x \\<in> [0 +\n                    Suc (t *\n                         k)\\<dots>,t2 -\n                                   Suc (0 + Suc (t * k))] \\<longrightarrow>\n           s x = NoMsg\\<rbrakk>\n       \\<Longrightarrow> s t3 = NoMsg\n 3. \\<And>t1 t2.\n       \\<lbrakk>Suc 0 < k; s t1 \\<noteq> NoMsg;\n        \\<And>t. event t = (t mod k = k - Suc 0); t0 = t * k;\n        t * k < t * k + k - Suc 0; t1 mod k \\<noteq> k - Suc 0; m = s t1;\n        \\<forall>x.\n           x \\<in> (if t1 = t * k then {}\n                    else [0 +\n                          t *\n                          k\\<dots>,t1 - Suc (0 + t * k)]) \\<longrightarrow>\n           x mod k \\<noteq> k - Suc 0;\n        Suc t1 \\<le> t2; t2 mod k = k - Suc 0; s t2 = NoMsg;\n        \\<forall>x.\n           x \\<in> (if t2 = Suc t1 then {}\n                    else [0 +\n                          Suc t1\\<dots>,t2 -\n  Suc (0 + Suc t1)]) \\<longrightarrow>\n           s x = NoMsg;\n        t * k < t1\\<rbrakk>\n       \\<Longrightarrow> (t1 < t * k + k - Suc 0 \\<longrightarrow>\n                          \\<not> t1 < t * k \\<and>\n                          (\\<not> t1 < t * k \\<longrightarrow>\n                           s t1 = s t1 \\<and>\n                           (\\<forall>x.\n                               x \\<in> [Suc\n   t1\\<dots>,t * k + k - Suc (Suc t1)] \\<longrightarrow>\n                               s x = NoMsg))) \\<and>\n                         (\\<not> t1 < t * k + k - Suc 0 \\<longrightarrow>\n                          t1 = t * k + k - Suc 0 \\<and> s t1 = s t1)", "apply (subgoal_tac \"t2 = Suc (t * k)\")"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>t2 t3.\n       \\<lbrakk>Suc (t * k) \\<le> t3; t3 \\<le> Suc (t * k + k - 2);\n        Suc 0 < k; s (t * k) \\<noteq> NoMsg;\n        \\<And>t. event t = (t mod k = k - Suc 0); t0 = t * k;\n        t * k < t * k + k - Suc 0; m = s (t * k); Suc (t * k) \\<le> t2;\n        t2 mod k = k - Suc 0; s t2 = NoMsg; t2 = Suc (t * k);\n        \\<forall>x. x \\<in> {} \\<longrightarrow> s x = NoMsg;\n        t2 = Suc (t * k)\\<rbrakk>\n       \\<Longrightarrow> s t3 = NoMsg\n 2. \\<And>t2 t3.\n       \\<lbrakk>Suc (t * k) \\<le> t3; t3 \\<le> Suc (t * k + k - 2);\n        Suc 0 < k; s (t * k) \\<noteq> NoMsg;\n        \\<And>t. event t = (t mod k = k - Suc 0); t0 = t * k;\n        t * k < t * k + k - Suc 0; m = s (t * k); Suc (t * k) \\<le> t2;\n        t2 mod k = k - Suc 0; s t2 = NoMsg; t2 = Suc (t * k);\n        \\<forall>x. x \\<in> {} \\<longrightarrow> s x = NoMsg\\<rbrakk>\n       \\<Longrightarrow> t2 = Suc (t * k)\n 3. \\<And>t2 t3.\n       \\<lbrakk>Suc (t * k) \\<le> t3; t3 \\<le> Suc (t * k + k - 2);\n        Suc 0 < k; s (t * k) \\<noteq> NoMsg;\n        \\<And>t. event t = (t mod k = k - Suc 0); t0 = t * k;\n        t * k < t * k + k - Suc 0; m = s (t * k); Suc (t * k) \\<le> t2;\n        t2 mod k = k - Suc 0; s t2 = NoMsg; t2 \\<noteq> Suc (t * k);\n        \\<forall>x.\n           x \\<in> [0 +\n                    Suc (t *\n                         k)\\<dots>,t2 -\n                                   Suc (0 + Suc (t * k))] \\<longrightarrow>\n           s x = NoMsg\\<rbrakk>\n       \\<Longrightarrow> s t3 = NoMsg\n 4. \\<And>t1 t2.\n       \\<lbrakk>Suc 0 < k; s t1 \\<noteq> NoMsg;\n        \\<And>t. event t = (t mod k = k - Suc 0); t0 = t * k;\n        t * k < t * k + k - Suc 0; t1 mod k \\<noteq> k - Suc 0; m = s t1;\n        \\<forall>x.\n           x \\<in> (if t1 = t * k then {}\n                    else [0 +\n                          t *\n                          k\\<dots>,t1 - Suc (0 + t * k)]) \\<longrightarrow>\n           x mod k \\<noteq> k - Suc 0;\n        Suc t1 \\<le> t2; t2 mod k = k - Suc 0; s t2 = NoMsg;\n        \\<forall>x.\n           x \\<in> (if t2 = Suc t1 then {}\n                    else [0 +\n                          Suc t1\\<dots>,t2 -\n  Suc (0 + Suc t1)]) \\<longrightarrow>\n           s x = NoMsg;\n        t * k < t1\\<rbrakk>\n       \\<Longrightarrow> (t1 < t * k + k - Suc 0 \\<longrightarrow>\n                          \\<not> t1 < t * k \\<and>\n                          (\\<not> t1 < t * k \\<longrightarrow>\n                           s t1 = s t1 \\<and>\n                           (\\<forall>x.\n                               x \\<in> [Suc\n   t1\\<dots>,t * k + k - Suc (Suc t1)] \\<longrightarrow>\n                               s x = NoMsg))) \\<and>\n                         (\\<not> t1 < t * k + k - Suc 0 \\<longrightarrow>\n                          t1 = t * k + k - Suc 0 \\<and> s t1 = s t1)", "prefer 2"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>t2 t3.\n       \\<lbrakk>Suc (t * k) \\<le> t3; t3 \\<le> Suc (t * k + k - 2);\n        Suc 0 < k; s (t * k) \\<noteq> NoMsg;\n        \\<And>t. event t = (t mod k = k - Suc 0); t0 = t * k;\n        t * k < t * k + k - Suc 0; m = s (t * k); Suc (t * k) \\<le> t2;\n        t2 mod k = k - Suc 0; s t2 = NoMsg; t2 = Suc (t * k);\n        \\<forall>x. x \\<in> {} \\<longrightarrow> s x = NoMsg\\<rbrakk>\n       \\<Longrightarrow> t2 = Suc (t * k)\n 2. \\<And>t2 t3.\n       \\<lbrakk>Suc (t * k) \\<le> t3; t3 \\<le> Suc (t * k + k - 2);\n        Suc 0 < k; s (t * k) \\<noteq> NoMsg;\n        \\<And>t. event t = (t mod k = k - Suc 0); t0 = t * k;\n        t * k < t * k + k - Suc 0; m = s (t * k); Suc (t * k) \\<le> t2;\n        t2 mod k = k - Suc 0; s t2 = NoMsg; t2 = Suc (t * k);\n        \\<forall>x. x \\<in> {} \\<longrightarrow> s x = NoMsg;\n        t2 = Suc (t * k)\\<rbrakk>\n       \\<Longrightarrow> s t3 = NoMsg\n 3. \\<And>t2 t3.\n       \\<lbrakk>Suc (t * k) \\<le> t3; t3 \\<le> Suc (t * k + k - 2);\n        Suc 0 < k; s (t * k) \\<noteq> NoMsg;\n        \\<And>t. event t = (t mod k = k - Suc 0); t0 = t * k;\n        t * k < t * k + k - Suc 0; m = s (t * k); Suc (t * k) \\<le> t2;\n        t2 mod k = k - Suc 0; s t2 = NoMsg; t2 \\<noteq> Suc (t * k);\n        \\<forall>x.\n           x \\<in> [0 +\n                    Suc (t *\n                         k)\\<dots>,t2 -\n                                   Suc (0 + Suc (t * k))] \\<longrightarrow>\n           s x = NoMsg\\<rbrakk>\n       \\<Longrightarrow> s t3 = NoMsg\n 4. \\<And>t1 t2.\n       \\<lbrakk>Suc 0 < k; s t1 \\<noteq> NoMsg;\n        \\<And>t. event t = (t mod k = k - Suc 0); t0 = t * k;\n        t * k < t * k + k - Suc 0; t1 mod k \\<noteq> k - Suc 0; m = s t1;\n        \\<forall>x.\n           x \\<in> (if t1 = t * k then {}\n                    else [0 +\n                          t *\n                          k\\<dots>,t1 - Suc (0 + t * k)]) \\<longrightarrow>\n           x mod k \\<noteq> k - Suc 0;\n        Suc t1 \\<le> t2; t2 mod k = k - Suc 0; s t2 = NoMsg;\n        \\<forall>x.\n           x \\<in> (if t2 = Suc t1 then {}\n                    else [0 +\n                          Suc t1\\<dots>,t2 -\n  Suc (0 + Suc t1)]) \\<longrightarrow>\n           s x = NoMsg;\n        t * k < t1\\<rbrakk>\n       \\<Longrightarrow> (t1 < t * k + k - Suc 0 \\<longrightarrow>\n                          \\<not> t1 < t * k \\<and>\n                          (\\<not> t1 < t * k \\<longrightarrow>\n                           s t1 = s t1 \\<and>\n                           (\\<forall>x.\n                               x \\<in> [Suc\n   t1\\<dots>,t * k + k - Suc (Suc t1)] \\<longrightarrow>\n                               s x = NoMsg))) \\<and>\n                         (\\<not> t1 < t * k + k - Suc 0 \\<longrightarrow>\n                          t1 = t * k + k - Suc 0 \\<and> s t1 = s t1)", "apply simp"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>t2 t3.\n       \\<lbrakk>Suc (t * k) \\<le> t3; t3 \\<le> Suc (t * k + k - 2);\n        Suc 0 < k; s (t * k) \\<noteq> NoMsg;\n        \\<And>t. event t = (t mod k = k - Suc 0); t0 = t * k;\n        t * k < t * k + k - Suc 0; m = s (t * k); Suc (t * k) \\<le> t2;\n        t2 mod k = k - Suc 0; s t2 = NoMsg; t2 = Suc (t * k);\n        \\<forall>x. x \\<in> {} \\<longrightarrow> s x = NoMsg;\n        t2 = Suc (t * k)\\<rbrakk>\n       \\<Longrightarrow> s t3 = NoMsg\n 2. \\<And>t2 t3.\n       \\<lbrakk>Suc (t * k) \\<le> t3; t3 \\<le> Suc (t * k + k - 2);\n        Suc 0 < k; s (t * k) \\<noteq> NoMsg;\n        \\<And>t. event t = (t mod k = k - Suc 0); t0 = t * k;\n        t * k < t * k + k - Suc 0; m = s (t * k); Suc (t * k) \\<le> t2;\n        t2 mod k = k - Suc 0; s t2 = NoMsg; t2 \\<noteq> Suc (t * k);\n        \\<forall>x.\n           x \\<in> [0 +\n                    Suc (t *\n                         k)\\<dots>,t2 -\n                                   Suc (0 + Suc (t * k))] \\<longrightarrow>\n           s x = NoMsg\\<rbrakk>\n       \\<Longrightarrow> s t3 = NoMsg\n 3. \\<And>t1 t2.\n       \\<lbrakk>Suc 0 < k; s t1 \\<noteq> NoMsg;\n        \\<And>t. event t = (t mod k = k - Suc 0); t0 = t * k;\n        t * k < t * k + k - Suc 0; t1 mod k \\<noteq> k - Suc 0; m = s t1;\n        \\<forall>x.\n           x \\<in> (if t1 = t * k then {}\n                    else [0 +\n                          t *\n                          k\\<dots>,t1 - Suc (0 + t * k)]) \\<longrightarrow>\n           x mod k \\<noteq> k - Suc 0;\n        Suc t1 \\<le> t2; t2 mod k = k - Suc 0; s t2 = NoMsg;\n        \\<forall>x.\n           x \\<in> (if t2 = Suc t1 then {}\n                    else [0 +\n                          Suc t1\\<dots>,t2 -\n  Suc (0 + Suc t1)]) \\<longrightarrow>\n           s x = NoMsg;\n        t * k < t1\\<rbrakk>\n       \\<Longrightarrow> (t1 < t * k + k - Suc 0 \\<longrightarrow>\n                          \\<not> t1 < t * k \\<and>\n                          (\\<not> t1 < t * k \\<longrightarrow>\n                           s t1 = s t1 \\<and>\n                           (\\<forall>x.\n                               x \\<in> [Suc\n   t1\\<dots>,t * k + k - Suc (Suc t1)] \\<longrightarrow>\n                               s x = NoMsg))) \\<and>\n                         (\\<not> t1 < t * k + k - Suc 0 \\<longrightarrow>\n                          t1 = t * k + k - Suc 0 \\<and> s t1 = s t1)", "apply (subgoal_tac \"k = Suc (Suc 0)\")"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>t2 t3.\n       \\<lbrakk>Suc (t * k) \\<le> t3; t3 \\<le> Suc (t * k + k - 2);\n        Suc 0 < k; s (t * k) \\<noteq> NoMsg;\n        \\<And>t. event t = (t mod k = k - Suc 0); t0 = t * k;\n        t * k < t * k + k - Suc 0; m = s (t * k); Suc (t * k) \\<le> t2;\n        t2 mod k = k - Suc 0; s t2 = NoMsg; t2 = Suc (t * k);\n        \\<forall>x. x \\<in> {} \\<longrightarrow> s x = NoMsg;\n        t2 = Suc (t * k); k = Suc (Suc 0)\\<rbrakk>\n       \\<Longrightarrow> s t3 = NoMsg\n 2. \\<And>t2 t3.\n       \\<lbrakk>Suc (t * k) \\<le> t3; t3 \\<le> Suc (t * k + k - 2);\n        Suc 0 < k; s (t * k) \\<noteq> NoMsg;\n        \\<And>t. event t = (t mod k = k - Suc 0); t0 = t * k;\n        t * k < t * k + k - Suc 0; m = s (t * k); Suc (t * k) \\<le> t2;\n        t2 mod k = k - Suc 0; s t2 = NoMsg; t2 = Suc (t * k);\n        \\<forall>x. x \\<in> {} \\<longrightarrow> s x = NoMsg;\n        t2 = Suc (t * k)\\<rbrakk>\n       \\<Longrightarrow> k = Suc (Suc 0)\n 3. \\<And>t2 t3.\n       \\<lbrakk>Suc (t * k) \\<le> t3; t3 \\<le> Suc (t * k + k - 2);\n        Suc 0 < k; s (t * k) \\<noteq> NoMsg;\n        \\<And>t. event t = (t mod k = k - Suc 0); t0 = t * k;\n        t * k < t * k + k - Suc 0; m = s (t * k); Suc (t * k) \\<le> t2;\n        t2 mod k = k - Suc 0; s t2 = NoMsg; t2 \\<noteq> Suc (t * k);\n        \\<forall>x.\n           x \\<in> [0 +\n                    Suc (t *\n                         k)\\<dots>,t2 -\n                                   Suc (0 + Suc (t * k))] \\<longrightarrow>\n           s x = NoMsg\\<rbrakk>\n       \\<Longrightarrow> s t3 = NoMsg\n 4. \\<And>t1 t2.\n       \\<lbrakk>Suc 0 < k; s t1 \\<noteq> NoMsg;\n        \\<And>t. event t = (t mod k = k - Suc 0); t0 = t * k;\n        t * k < t * k + k - Suc 0; t1 mod k \\<noteq> k - Suc 0; m = s t1;\n        \\<forall>x.\n           x \\<in> (if t1 = t * k then {}\n                    else [0 +\n                          t *\n                          k\\<dots>,t1 - Suc (0 + t * k)]) \\<longrightarrow>\n           x mod k \\<noteq> k - Suc 0;\n        Suc t1 \\<le> t2; t2 mod k = k - Suc 0; s t2 = NoMsg;\n        \\<forall>x.\n           x \\<in> (if t2 = Suc t1 then {}\n                    else [0 +\n                          Suc t1\\<dots>,t2 -\n  Suc (0 + Suc t1)]) \\<longrightarrow>\n           s x = NoMsg;\n        t * k < t1\\<rbrakk>\n       \\<Longrightarrow> (t1 < t * k + k - Suc 0 \\<longrightarrow>\n                          \\<not> t1 < t * k \\<and>\n                          (\\<not> t1 < t * k \\<longrightarrow>\n                           s t1 = s t1 \\<and>\n                           (\\<forall>x.\n                               x \\<in> [Suc\n   t1\\<dots>,t * k + k - Suc (Suc t1)] \\<longrightarrow>\n                               s x = NoMsg))) \\<and>\n                         (\\<not> t1 < t * k + k - Suc 0 \\<longrightarrow>\n                          t1 = t * k + k - Suc 0 \\<and> s t1 = s t1)", "prefer 2"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>t2 t3.\n       \\<lbrakk>Suc (t * k) \\<le> t3; t3 \\<le> Suc (t * k + k - 2);\n        Suc 0 < k; s (t * k) \\<noteq> NoMsg;\n        \\<And>t. event t = (t mod k = k - Suc 0); t0 = t * k;\n        t * k < t * k + k - Suc 0; m = s (t * k); Suc (t * k) \\<le> t2;\n        t2 mod k = k - Suc 0; s t2 = NoMsg; t2 = Suc (t * k);\n        \\<forall>x. x \\<in> {} \\<longrightarrow> s x = NoMsg;\n        t2 = Suc (t * k)\\<rbrakk>\n       \\<Longrightarrow> k = Suc (Suc 0)\n 2. \\<And>t2 t3.\n       \\<lbrakk>Suc (t * k) \\<le> t3; t3 \\<le> Suc (t * k + k - 2);\n        Suc 0 < k; s (t * k) \\<noteq> NoMsg;\n        \\<And>t. event t = (t mod k = k - Suc 0); t0 = t * k;\n        t * k < t * k + k - Suc 0; m = s (t * k); Suc (t * k) \\<le> t2;\n        t2 mod k = k - Suc 0; s t2 = NoMsg; t2 = Suc (t * k);\n        \\<forall>x. x \\<in> {} \\<longrightarrow> s x = NoMsg;\n        t2 = Suc (t * k); k = Suc (Suc 0)\\<rbrakk>\n       \\<Longrightarrow> s t3 = NoMsg\n 3. \\<And>t2 t3.\n       \\<lbrakk>Suc (t * k) \\<le> t3; t3 \\<le> Suc (t * k + k - 2);\n        Suc 0 < k; s (t * k) \\<noteq> NoMsg;\n        \\<And>t. event t = (t mod k = k - Suc 0); t0 = t * k;\n        t * k < t * k + k - Suc 0; m = s (t * k); Suc (t * k) \\<le> t2;\n        t2 mod k = k - Suc 0; s t2 = NoMsg; t2 \\<noteq> Suc (t * k);\n        \\<forall>x.\n           x \\<in> [0 +\n                    Suc (t *\n                         k)\\<dots>,t2 -\n                                   Suc (0 + Suc (t * k))] \\<longrightarrow>\n           s x = NoMsg\\<rbrakk>\n       \\<Longrightarrow> s t3 = NoMsg\n 4. \\<And>t1 t2.\n       \\<lbrakk>Suc 0 < k; s t1 \\<noteq> NoMsg;\n        \\<And>t. event t = (t mod k = k - Suc 0); t0 = t * k;\n        t * k < t * k + k - Suc 0; t1 mod k \\<noteq> k - Suc 0; m = s t1;\n        \\<forall>x.\n           x \\<in> (if t1 = t * k then {}\n                    else [0 +\n                          t *\n                          k\\<dots>,t1 - Suc (0 + t * k)]) \\<longrightarrow>\n           x mod k \\<noteq> k - Suc 0;\n        Suc t1 \\<le> t2; t2 mod k = k - Suc 0; s t2 = NoMsg;\n        \\<forall>x.\n           x \\<in> (if t2 = Suc t1 then {}\n                    else [0 +\n                          Suc t1\\<dots>,t2 -\n  Suc (0 + Suc t1)]) \\<longrightarrow>\n           s x = NoMsg;\n        t * k < t1\\<rbrakk>\n       \\<Longrightarrow> (t1 < t * k + k - Suc 0 \\<longrightarrow>\n                          \\<not> t1 < t * k \\<and>\n                          (\\<not> t1 < t * k \\<longrightarrow>\n                           s t1 = s t1 \\<and>\n                           (\\<forall>x.\n                               x \\<in> [Suc\n   t1\\<dots>,t * k + k - Suc (Suc t1)] \\<longrightarrow>\n                               s x = NoMsg))) \\<and>\n                         (\\<not> t1 < t * k + k - Suc 0 \\<longrightarrow>\n                          t1 = t * k + k - Suc 0 \\<and> s t1 = s t1)", "apply (simp add: mod_Suc)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>t2 t3.\n       \\<lbrakk>Suc (t * k) \\<le> t3; t3 \\<le> Suc (t * k + k - 2);\n        Suc 0 < k; s (t * k) \\<noteq> NoMsg;\n        \\<And>t. event t = (t mod k = k - Suc 0); t0 = t * k;\n        t * k < t * k + k - Suc 0; m = s (t * k); Suc (t * k) \\<le> t2;\n        t2 mod k = k - Suc 0; s t2 = NoMsg; t2 = Suc (t * k);\n        \\<forall>x. x \\<in> {} \\<longrightarrow> s x = NoMsg;\n        t2 = Suc (t * k); k = Suc (Suc 0)\\<rbrakk>\n       \\<Longrightarrow> s t3 = NoMsg\n 2. \\<And>t2 t3.\n       \\<lbrakk>Suc (t * k) \\<le> t3; t3 \\<le> Suc (t * k + k - 2);\n        Suc 0 < k; s (t * k) \\<noteq> NoMsg;\n        \\<And>t. event t = (t mod k = k - Suc 0); t0 = t * k;\n        t * k < t * k + k - Suc 0; m = s (t * k); Suc (t * k) \\<le> t2;\n        t2 mod k = k - Suc 0; s t2 = NoMsg; t2 \\<noteq> Suc (t * k);\n        \\<forall>x.\n           x \\<in> [0 +\n                    Suc (t *\n                         k)\\<dots>,t2 -\n                                   Suc (0 + Suc (t * k))] \\<longrightarrow>\n           s x = NoMsg\\<rbrakk>\n       \\<Longrightarrow> s t3 = NoMsg\n 3. \\<And>t1 t2.\n       \\<lbrakk>Suc 0 < k; s t1 \\<noteq> NoMsg;\n        \\<And>t. event t = (t mod k = k - Suc 0); t0 = t * k;\n        t * k < t * k + k - Suc 0; t1 mod k \\<noteq> k - Suc 0; m = s t1;\n        \\<forall>x.\n           x \\<in> (if t1 = t * k then {}\n                    else [0 +\n                          t *\n                          k\\<dots>,t1 - Suc (0 + t * k)]) \\<longrightarrow>\n           x mod k \\<noteq> k - Suc 0;\n        Suc t1 \\<le> t2; t2 mod k = k - Suc 0; s t2 = NoMsg;\n        \\<forall>x.\n           x \\<in> (if t2 = Suc t1 then {}\n                    else [0 +\n                          Suc t1\\<dots>,t2 -\n  Suc (0 + Suc t1)]) \\<longrightarrow>\n           s x = NoMsg;\n        t * k < t1\\<rbrakk>\n       \\<Longrightarrow> (t1 < t * k + k - Suc 0 \\<longrightarrow>\n                          \\<not> t1 < t * k \\<and>\n                          (\\<not> t1 < t * k \\<longrightarrow>\n                           s t1 = s t1 \\<and>\n                           (\\<forall>x.\n                               x \\<in> [Suc\n   t1\\<dots>,t * k + k - Suc (Suc t1)] \\<longrightarrow>\n                               s x = NoMsg))) \\<and>\n                         (\\<not> t1 < t * k + k - Suc 0 \\<longrightarrow>\n                          t1 = t * k + k - Suc 0 \\<and> s t1 = s t1)", "apply (simp add: mod_Suc)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>t2 t3.\n       \\<lbrakk>Suc (t * k) \\<le> t3; t3 \\<le> Suc (t * k + k - 2);\n        Suc 0 < k; s (t * k) \\<noteq> NoMsg;\n        \\<And>t. event t = (t mod k = k - Suc 0); t0 = t * k;\n        t * k < t * k + k - Suc 0; m = s (t * k); Suc (t * k) \\<le> t2;\n        t2 mod k = k - Suc 0; s t2 = NoMsg; t2 \\<noteq> Suc (t * k);\n        \\<forall>x.\n           x \\<in> [0 +\n                    Suc (t *\n                         k)\\<dots>,t2 -\n                                   Suc (0 + Suc (t * k))] \\<longrightarrow>\n           s x = NoMsg\\<rbrakk>\n       \\<Longrightarrow> s t3 = NoMsg\n 2. \\<And>t1 t2.\n       \\<lbrakk>Suc 0 < k; s t1 \\<noteq> NoMsg;\n        \\<And>t. event t = (t mod k = k - Suc 0); t0 = t * k;\n        t * k < t * k + k - Suc 0; t1 mod k \\<noteq> k - Suc 0; m = s t1;\n        \\<forall>x.\n           x \\<in> (if t1 = t * k then {}\n                    else [0 +\n                          t *\n                          k\\<dots>,t1 - Suc (0 + t * k)]) \\<longrightarrow>\n           x mod k \\<noteq> k - Suc 0;\n        Suc t1 \\<le> t2; t2 mod k = k - Suc 0; s t2 = NoMsg;\n        \\<forall>x.\n           x \\<in> (if t2 = Suc t1 then {}\n                    else [0 +\n                          Suc t1\\<dots>,t2 -\n  Suc (0 + Suc t1)]) \\<longrightarrow>\n           s x = NoMsg;\n        t * k < t1\\<rbrakk>\n       \\<Longrightarrow> (t1 < t * k + k - Suc 0 \\<longrightarrow>\n                          \\<not> t1 < t * k \\<and>\n                          (\\<not> t1 < t * k \\<longrightarrow>\n                           s t1 = s t1 \\<and>\n                           (\\<forall>x.\n                               x \\<in> [Suc\n   t1\\<dots>,t * k + k - Suc (Suc t1)] \\<longrightarrow>\n                               s x = NoMsg))) \\<and>\n                         (\\<not> t1 < t * k + k - Suc 0 \\<longrightarrow>\n                          t1 = t * k + k - Suc 0 \\<and> s t1 = s t1)", "apply (simp add: iIN_iff)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>t2 t3.\n       \\<lbrakk>Suc (t * k) \\<le> t3; t3 \\<le> Suc (t * k + k - 2);\n        Suc 0 < k; s (t * k) \\<noteq> NoMsg;\n        \\<And>t. event t = (t mod k = k - Suc 0); t0 = t * k;\n        t * k < t * k + k - Suc 0; m = s (t * k); Suc (t * k) \\<le> t2;\n        t2 mod k = k - Suc 0; s t2 = NoMsg; t2 \\<noteq> Suc (t * k);\n        \\<forall>x.\n           Suc (t * k) \\<le> x \\<and> x \\<le> Suc (t2 - 2) \\<longrightarrow>\n           s x = NoMsg\\<rbrakk>\n       \\<Longrightarrow> s t3 = NoMsg\n 2. \\<And>t1 t2.\n       \\<lbrakk>Suc 0 < k; s t1 \\<noteq> NoMsg;\n        \\<And>t. event t = (t mod k = k - Suc 0); t0 = t * k;\n        t * k < t * k + k - Suc 0; t1 mod k \\<noteq> k - Suc 0; m = s t1;\n        \\<forall>x.\n           x \\<in> (if t1 = t * k then {}\n                    else [0 +\n                          t *\n                          k\\<dots>,t1 - Suc (0 + t * k)]) \\<longrightarrow>\n           x mod k \\<noteq> k - Suc 0;\n        Suc t1 \\<le> t2; t2 mod k = k - Suc 0; s t2 = NoMsg;\n        \\<forall>x.\n           x \\<in> (if t2 = Suc t1 then {}\n                    else [0 +\n                          Suc t1\\<dots>,t2 -\n  Suc (0 + Suc t1)]) \\<longrightarrow>\n           s x = NoMsg;\n        t * k < t1\\<rbrakk>\n       \\<Longrightarrow> (t1 < t * k + k - Suc 0 \\<longrightarrow>\n                          \\<not> t1 < t * k \\<and>\n                          (\\<not> t1 < t * k \\<longrightarrow>\n                           s t1 = s t1 \\<and>\n                           (\\<forall>x.\n                               x \\<in> [Suc\n   t1\\<dots>,t * k + k - Suc (Suc t1)] \\<longrightarrow>\n                               s x = NoMsg))) \\<and>\n                         (\\<not> t1 < t * k + k - Suc 0 \\<longrightarrow>\n                          t1 = t * k + k - Suc 0 \\<and> s t1 = s t1)", "apply (subgoal_tac \"t * k + k - Suc 0 \\<le> t2\")"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>t2 t3.\n       \\<lbrakk>Suc (t * k) \\<le> t3; t3 \\<le> Suc (t * k + k - 2);\n        Suc 0 < k; s (t * k) \\<noteq> NoMsg;\n        \\<And>t. event t = (t mod k = k - Suc 0); t0 = t * k;\n        t * k < t * k + k - Suc 0; m = s (t * k); Suc (t * k) \\<le> t2;\n        t2 mod k = k - Suc 0; s t2 = NoMsg; t2 \\<noteq> Suc (t * k);\n        \\<forall>x.\n           Suc (t * k) \\<le> x \\<and> x \\<le> Suc (t2 - 2) \\<longrightarrow>\n           s x = NoMsg;\n        t * k + k - Suc 0 \\<le> t2\\<rbrakk>\n       \\<Longrightarrow> s t3 = NoMsg\n 2. \\<And>t2 t3.\n       \\<lbrakk>Suc (t * k) \\<le> t3; t3 \\<le> Suc (t * k + k - 2);\n        Suc 0 < k; s (t * k) \\<noteq> NoMsg;\n        \\<And>t. event t = (t mod k = k - Suc 0); t0 = t * k;\n        t * k < t * k + k - Suc 0; m = s (t * k); Suc (t * k) \\<le> t2;\n        t2 mod k = k - Suc 0; s t2 = NoMsg; t2 \\<noteq> Suc (t * k);\n        \\<forall>x.\n           Suc (t * k) \\<le> x \\<and> x \\<le> Suc (t2 - 2) \\<longrightarrow>\n           s x = NoMsg\\<rbrakk>\n       \\<Longrightarrow> t * k + k - Suc 0 \\<le> t2\n 3. \\<And>t1 t2.\n       \\<lbrakk>Suc 0 < k; s t1 \\<noteq> NoMsg;\n        \\<And>t. event t = (t mod k = k - Suc 0); t0 = t * k;\n        t * k < t * k + k - Suc 0; t1 mod k \\<noteq> k - Suc 0; m = s t1;\n        \\<forall>x.\n           x \\<in> (if t1 = t * k then {}\n                    else [0 +\n                          t *\n                          k\\<dots>,t1 - Suc (0 + t * k)]) \\<longrightarrow>\n           x mod k \\<noteq> k - Suc 0;\n        Suc t1 \\<le> t2; t2 mod k = k - Suc 0; s t2 = NoMsg;\n        \\<forall>x.\n           x \\<in> (if t2 = Suc t1 then {}\n                    else [0 +\n                          Suc t1\\<dots>,t2 -\n  Suc (0 + Suc t1)]) \\<longrightarrow>\n           s x = NoMsg;\n        t * k < t1\\<rbrakk>\n       \\<Longrightarrow> (t1 < t * k + k - Suc 0 \\<longrightarrow>\n                          \\<not> t1 < t * k \\<and>\n                          (\\<not> t1 < t * k \\<longrightarrow>\n                           s t1 = s t1 \\<and>\n                           (\\<forall>x.\n                               x \\<in> [Suc\n   t1\\<dots>,t * k + k - Suc (Suc t1)] \\<longrightarrow>\n                               s x = NoMsg))) \\<and>\n                         (\\<not> t1 < t * k + k - Suc 0 \\<longrightarrow>\n                          t1 = t * k + k - Suc 0 \\<and> s t1 = s t1)", "prefer 2"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>t2 t3.\n       \\<lbrakk>Suc (t * k) \\<le> t3; t3 \\<le> Suc (t * k + k - 2);\n        Suc 0 < k; s (t * k) \\<noteq> NoMsg;\n        \\<And>t. event t = (t mod k = k - Suc 0); t0 = t * k;\n        t * k < t * k + k - Suc 0; m = s (t * k); Suc (t * k) \\<le> t2;\n        t2 mod k = k - Suc 0; s t2 = NoMsg; t2 \\<noteq> Suc (t * k);\n        \\<forall>x.\n           Suc (t * k) \\<le> x \\<and> x \\<le> Suc (t2 - 2) \\<longrightarrow>\n           s x = NoMsg\\<rbrakk>\n       \\<Longrightarrow> t * k + k - Suc 0 \\<le> t2\n 2. \\<And>t2 t3.\n       \\<lbrakk>Suc (t * k) \\<le> t3; t3 \\<le> Suc (t * k + k - 2);\n        Suc 0 < k; s (t * k) \\<noteq> NoMsg;\n        \\<And>t. event t = (t mod k = k - Suc 0); t0 = t * k;\n        t * k < t * k + k - Suc 0; m = s (t * k); Suc (t * k) \\<le> t2;\n        t2 mod k = k - Suc 0; s t2 = NoMsg; t2 \\<noteq> Suc (t * k);\n        \\<forall>x.\n           Suc (t * k) \\<le> x \\<and> x \\<le> Suc (t2 - 2) \\<longrightarrow>\n           s x = NoMsg;\n        t * k + k - Suc 0 \\<le> t2\\<rbrakk>\n       \\<Longrightarrow> s t3 = NoMsg\n 3. \\<And>t1 t2.\n       \\<lbrakk>Suc 0 < k; s t1 \\<noteq> NoMsg;\n        \\<And>t. event t = (t mod k = k - Suc 0); t0 = t * k;\n        t * k < t * k + k - Suc 0; t1 mod k \\<noteq> k - Suc 0; m = s t1;\n        \\<forall>x.\n           x \\<in> (if t1 = t * k then {}\n                    else [0 +\n                          t *\n                          k\\<dots>,t1 - Suc (0 + t * k)]) \\<longrightarrow>\n           x mod k \\<noteq> k - Suc 0;\n        Suc t1 \\<le> t2; t2 mod k = k - Suc 0; s t2 = NoMsg;\n        \\<forall>x.\n           x \\<in> (if t2 = Suc t1 then {}\n                    else [0 +\n                          Suc t1\\<dots>,t2 -\n  Suc (0 + Suc t1)]) \\<longrightarrow>\n           s x = NoMsg;\n        t * k < t1\\<rbrakk>\n       \\<Longrightarrow> (t1 < t * k + k - Suc 0 \\<longrightarrow>\n                          \\<not> t1 < t * k \\<and>\n                          (\\<not> t1 < t * k \\<longrightarrow>\n                           s t1 = s t1 \\<and>\n                           (\\<forall>x.\n                               x \\<in> [Suc\n   t1\\<dots>,t * k + k - Suc (Suc t1)] \\<longrightarrow>\n                               s x = NoMsg))) \\<and>\n                         (\\<not> t1 < t * k + k - Suc 0 \\<longrightarrow>\n                          t1 = t * k + k - Suc 0 \\<and> s t1 = s t1)", "apply (rule ccontr)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>t2 t3.\n       \\<lbrakk>Suc (t * k) \\<le> t3; t3 \\<le> Suc (t * k + k - 2);\n        Suc 0 < k; s (t * k) \\<noteq> NoMsg;\n        \\<And>t. event t = (t mod k = k - Suc 0); t0 = t * k;\n        t * k < t * k + k - Suc 0; m = s (t * k); Suc (t * k) \\<le> t2;\n        t2 mod k = k - Suc 0; s t2 = NoMsg; t2 \\<noteq> Suc (t * k);\n        \\<forall>x.\n           Suc (t * k) \\<le> x \\<and> x \\<le> Suc (t2 - 2) \\<longrightarrow>\n           s x = NoMsg;\n        \\<not> t * k + k - Suc 0 \\<le> t2\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>t2 t3.\n       \\<lbrakk>Suc (t * k) \\<le> t3; t3 \\<le> Suc (t * k + k - 2);\n        Suc 0 < k; s (t * k) \\<noteq> NoMsg;\n        \\<And>t. event t = (t mod k = k - Suc 0); t0 = t * k;\n        t * k < t * k + k - Suc 0; m = s (t * k); Suc (t * k) \\<le> t2;\n        t2 mod k = k - Suc 0; s t2 = NoMsg; t2 \\<noteq> Suc (t * k);\n        \\<forall>x.\n           Suc (t * k) \\<le> x \\<and> x \\<le> Suc (t2 - 2) \\<longrightarrow>\n           s x = NoMsg;\n        t * k + k - Suc 0 \\<le> t2\\<rbrakk>\n       \\<Longrightarrow> s t3 = NoMsg\n 3. \\<And>t1 t2.\n       \\<lbrakk>Suc 0 < k; s t1 \\<noteq> NoMsg;\n        \\<And>t. event t = (t mod k = k - Suc 0); t0 = t * k;\n        t * k < t * k + k - Suc 0; t1 mod k \\<noteq> k - Suc 0; m = s t1;\n        \\<forall>x.\n           x \\<in> (if t1 = t * k then {}\n                    else [0 +\n                          t *\n                          k\\<dots>,t1 - Suc (0 + t * k)]) \\<longrightarrow>\n           x mod k \\<noteq> k - Suc 0;\n        Suc t1 \\<le> t2; t2 mod k = k - Suc 0; s t2 = NoMsg;\n        \\<forall>x.\n           x \\<in> (if t2 = Suc t1 then {}\n                    else [0 +\n                          Suc t1\\<dots>,t2 -\n  Suc (0 + Suc t1)]) \\<longrightarrow>\n           s x = NoMsg;\n        t * k < t1\\<rbrakk>\n       \\<Longrightarrow> (t1 < t * k + k - Suc 0 \\<longrightarrow>\n                          \\<not> t1 < t * k \\<and>\n                          (\\<not> t1 < t * k \\<longrightarrow>\n                           s t1 = s t1 \\<and>\n                           (\\<forall>x.\n                               x \\<in> [Suc\n   t1\\<dots>,t * k + k - Suc (Suc t1)] \\<longrightarrow>\n                               s x = NoMsg))) \\<and>\n                         (\\<not> t1 < t * k + k - Suc 0 \\<longrightarrow>\n                          t1 = t * k + k - Suc 0 \\<and> s t1 = s t1)", "apply (simp add: linorder_not_le)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>t2 t3.\n       \\<lbrakk>Suc (t * k) \\<le> t3; t3 \\<le> Suc (t * k + k - 2);\n        Suc 0 < k; s (t * k) \\<noteq> NoMsg;\n        \\<And>t. event t = (t mod k = k - Suc 0); t0 = t * k; m = s (t * k);\n        Suc (t * k) \\<le> t2; t2 mod k = k - Suc 0; s t2 = NoMsg;\n        t2 \\<noteq> Suc (t * k);\n        \\<forall>x.\n           Suc (t * k) \\<le> x \\<and> x \\<le> Suc (t2 - 2) \\<longrightarrow>\n           s x = NoMsg;\n        t2 < t * k + k - Suc 0\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>t2 t3.\n       \\<lbrakk>Suc (t * k) \\<le> t3; t3 \\<le> Suc (t * k + k - 2);\n        Suc 0 < k; s (t * k) \\<noteq> NoMsg;\n        \\<And>t. event t = (t mod k = k - Suc 0); t0 = t * k;\n        t * k < t * k + k - Suc 0; m = s (t * k); Suc (t * k) \\<le> t2;\n        t2 mod k = k - Suc 0; s t2 = NoMsg; t2 \\<noteq> Suc (t * k);\n        \\<forall>x.\n           Suc (t * k) \\<le> x \\<and> x \\<le> Suc (t2 - 2) \\<longrightarrow>\n           s x = NoMsg;\n        t * k + k - Suc 0 \\<le> t2\\<rbrakk>\n       \\<Longrightarrow> s t3 = NoMsg\n 3. \\<And>t1 t2.\n       \\<lbrakk>Suc 0 < k; s t1 \\<noteq> NoMsg;\n        \\<And>t. event t = (t mod k = k - Suc 0); t0 = t * k;\n        t * k < t * k + k - Suc 0; t1 mod k \\<noteq> k - Suc 0; m = s t1;\n        \\<forall>x.\n           x \\<in> (if t1 = t * k then {}\n                    else [0 +\n                          t *\n                          k\\<dots>,t1 - Suc (0 + t * k)]) \\<longrightarrow>\n           x mod k \\<noteq> k - Suc 0;\n        Suc t1 \\<le> t2; t2 mod k = k - Suc 0; s t2 = NoMsg;\n        \\<forall>x.\n           x \\<in> (if t2 = Suc t1 then {}\n                    else [0 +\n                          Suc t1\\<dots>,t2 -\n  Suc (0 + Suc t1)]) \\<longrightarrow>\n           s x = NoMsg;\n        t * k < t1\\<rbrakk>\n       \\<Longrightarrow> (t1 < t * k + k - Suc 0 \\<longrightarrow>\n                          \\<not> t1 < t * k \\<and>\n                          (\\<not> t1 < t * k \\<longrightarrow>\n                           s t1 = s t1 \\<and>\n                           (\\<forall>x.\n                               x \\<in> [Suc\n   t1\\<dots>,t * k + k - Suc (Suc t1)] \\<longrightarrow>\n                               s x = NoMsg))) \\<and>\n                         (\\<not> t1 < t * k + k - Suc 0 \\<longrightarrow>\n                          t1 = t * k + k - Suc 0 \\<and> s t1 = s t1)", "apply (drule_tac m=t2 in less_imp_le_pred)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>t2 t3.\n       \\<lbrakk>Suc (t * k) \\<le> t3; t3 \\<le> Suc (t * k + k - 2);\n        Suc 0 < k; s (t * k) \\<noteq> NoMsg;\n        \\<And>t. event t = (t mod k = k - Suc 0); t0 = t * k; m = s (t * k);\n        Suc (t * k) \\<le> t2; t2 mod k = k - Suc 0; s t2 = NoMsg;\n        t2 \\<noteq> Suc (t * k);\n        \\<forall>x.\n           Suc (t * k) \\<le> x \\<and> x \\<le> Suc (t2 - 2) \\<longrightarrow>\n           s x = NoMsg;\n        t2 \\<le> t * k + k - Suc 0 - Suc 0\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>t2 t3.\n       \\<lbrakk>Suc (t * k) \\<le> t3; t3 \\<le> Suc (t * k + k - 2);\n        Suc 0 < k; s (t * k) \\<noteq> NoMsg;\n        \\<And>t. event t = (t mod k = k - Suc 0); t0 = t * k;\n        t * k < t * k + k - Suc 0; m = s (t * k); Suc (t * k) \\<le> t2;\n        t2 mod k = k - Suc 0; s t2 = NoMsg; t2 \\<noteq> Suc (t * k);\n        \\<forall>x.\n           Suc (t * k) \\<le> x \\<and> x \\<le> Suc (t2 - 2) \\<longrightarrow>\n           s x = NoMsg;\n        t * k + k - Suc 0 \\<le> t2\\<rbrakk>\n       \\<Longrightarrow> s t3 = NoMsg\n 3. \\<And>t1 t2.\n       \\<lbrakk>Suc 0 < k; s t1 \\<noteq> NoMsg;\n        \\<And>t. event t = (t mod k = k - Suc 0); t0 = t * k;\n        t * k < t * k + k - Suc 0; t1 mod k \\<noteq> k - Suc 0; m = s t1;\n        \\<forall>x.\n           x \\<in> (if t1 = t * k then {}\n                    else [0 +\n                          t *\n                          k\\<dots>,t1 - Suc (0 + t * k)]) \\<longrightarrow>\n           x mod k \\<noteq> k - Suc 0;\n        Suc t1 \\<le> t2; t2 mod k = k - Suc 0; s t2 = NoMsg;\n        \\<forall>x.\n           x \\<in> (if t2 = Suc t1 then {}\n                    else [0 +\n                          Suc t1\\<dots>,t2 -\n  Suc (0 + Suc t1)]) \\<longrightarrow>\n           s x = NoMsg;\n        t * k < t1\\<rbrakk>\n       \\<Longrightarrow> (t1 < t * k + k - Suc 0 \\<longrightarrow>\n                          \\<not> t1 < t * k \\<and>\n                          (\\<not> t1 < t * k \\<longrightarrow>\n                           s t1 = s t1 \\<and>\n                           (\\<forall>x.\n                               x \\<in> [Suc\n   t1\\<dots>,t * k + k - Suc (Suc t1)] \\<longrightarrow>\n                               s x = NoMsg))) \\<and>\n                         (\\<not> t1 < t * k + k - Suc 0 \\<longrightarrow>\n                          t1 = t * k + k - Suc 0 \\<and> s t1 = s t1)", "apply (simp only: mult.commute[of t])"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>t2 t3.\n       \\<lbrakk>Suc (k * t) \\<le> t3; t3 \\<le> Suc (k * t + k - 2);\n        Suc 0 < k; s (k * t) \\<noteq> NoMsg;\n        \\<And>t. event t = (t mod k = k - Suc 0); t0 = k * t; m = s (k * t);\n        Suc (k * t) \\<le> t2; t2 mod k = k - Suc 0; s t2 = NoMsg;\n        t2 \\<noteq> Suc (k * t);\n        \\<forall>x.\n           Suc (k * t) \\<le> x \\<and> x \\<le> Suc (t2 - 2) \\<longrightarrow>\n           s x = NoMsg;\n        t2 \\<le> k * t + k - Suc 0 - Suc 0\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>t2 t3.\n       \\<lbrakk>Suc (t * k) \\<le> t3; t3 \\<le> Suc (t * k + k - 2);\n        Suc 0 < k; s (t * k) \\<noteq> NoMsg;\n        \\<And>t. event t = (t mod k = k - Suc 0); t0 = t * k;\n        t * k < t * k + k - Suc 0; m = s (t * k); Suc (t * k) \\<le> t2;\n        t2 mod k = k - Suc 0; s t2 = NoMsg; t2 \\<noteq> Suc (t * k);\n        \\<forall>x.\n           Suc (t * k) \\<le> x \\<and> x \\<le> Suc (t2 - 2) \\<longrightarrow>\n           s x = NoMsg;\n        t * k + k - Suc 0 \\<le> t2\\<rbrakk>\n       \\<Longrightarrow> s t3 = NoMsg\n 3. \\<And>t1 t2.\n       \\<lbrakk>Suc 0 < k; s t1 \\<noteq> NoMsg;\n        \\<And>t. event t = (t mod k = k - Suc 0); t0 = t * k;\n        t * k < t * k + k - Suc 0; t1 mod k \\<noteq> k - Suc 0; m = s t1;\n        \\<forall>x.\n           x \\<in> (if t1 = t * k then {}\n                    else [0 +\n                          t *\n                          k\\<dots>,t1 - Suc (0 + t * k)]) \\<longrightarrow>\n           x mod k \\<noteq> k - Suc 0;\n        Suc t1 \\<le> t2; t2 mod k = k - Suc 0; s t2 = NoMsg;\n        \\<forall>x.\n           x \\<in> (if t2 = Suc t1 then {}\n                    else [0 +\n                          Suc t1\\<dots>,t2 -\n  Suc (0 + Suc t1)]) \\<longrightarrow>\n           s x = NoMsg;\n        t * k < t1\\<rbrakk>\n       \\<Longrightarrow> (t1 < t * k + k - Suc 0 \\<longrightarrow>\n                          \\<not> t1 < t * k \\<and>\n                          (\\<not> t1 < t * k \\<longrightarrow>\n                           s t1 = s t1 \\<and>\n                           (\\<forall>x.\n                               x \\<in> [Suc\n   t1\\<dots>,t * k + k - Suc (Suc t1)] \\<longrightarrow>\n                               s x = NoMsg))) \\<and>\n                         (\\<not> t1 < t * k + k - Suc 0 \\<longrightarrow>\n                          t1 = t * k + k - Suc 0 \\<and> s t1 = s t1)", "apply (frule_tac n=t2 in between_imp_mod_le[of \"k - Suc (Suc 0)\" k t _, OF diff_Suc_less, OF gr_implies_gr0])"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>t2 t3.\n       \\<lbrakk>Suc (k * t) \\<le> t3; t3 \\<le> Suc (k * t + k - 2);\n        Suc 0 < k; s (k * t) \\<noteq> NoMsg;\n        \\<And>t. event t = (t mod k = k - Suc 0); t0 = k * t; m = s (k * t);\n        Suc (k * t) \\<le> t2; t2 mod k = k - Suc 0; s t2 = NoMsg;\n        t2 \\<noteq> Suc (k * t);\n        \\<forall>x.\n           Suc (k * t) \\<le> x \\<and> x \\<le> Suc (t2 - 2) \\<longrightarrow>\n           s x = NoMsg;\n        t2 \\<le> k * t + k - Suc 0 - Suc 0\\<rbrakk>\n       \\<Longrightarrow> k * t \\<le> t2\n 2. \\<And>t2 t3.\n       \\<lbrakk>Suc (k * t) \\<le> t3; t3 \\<le> Suc (k * t + k - 2);\n        Suc 0 < k; s (k * t) \\<noteq> NoMsg;\n        \\<And>t. event t = (t mod k = k - Suc 0); t0 = k * t; m = s (k * t);\n        Suc (k * t) \\<le> t2; t2 mod k = k - Suc 0; s t2 = NoMsg;\n        t2 \\<noteq> Suc (k * t);\n        \\<forall>x.\n           Suc (k * t) \\<le> x \\<and> x \\<le> Suc (t2 - 2) \\<longrightarrow>\n           s x = NoMsg;\n        t2 \\<le> k * t + k - Suc 0 - Suc 0\\<rbrakk>\n       \\<Longrightarrow> t2 \\<le> k * t + (k - Suc (Suc 0))\n 3. \\<And>t2 t3.\n       \\<lbrakk>Suc (k * t) \\<le> t3; t3 \\<le> Suc (k * t + k - 2);\n        Suc 0 < k; s (k * t) \\<noteq> NoMsg;\n        \\<And>t. event t = (t mod k = k - Suc 0); t0 = k * t; m = s (k * t);\n        Suc (k * t) \\<le> t2; t2 mod k = k - Suc 0; s t2 = NoMsg;\n        t2 \\<noteq> Suc (k * t);\n        \\<forall>x.\n           Suc (k * t) \\<le> x \\<and> x \\<le> Suc (t2 - 2) \\<longrightarrow>\n           s x = NoMsg;\n        t2 \\<le> k * t + k - Suc 0 - Suc 0;\n        t2 mod k \\<le> k - Suc (Suc 0)\\<rbrakk>\n       \\<Longrightarrow> False\n 4. \\<And>t2 t3.\n       \\<lbrakk>Suc (t * k) \\<le> t3; t3 \\<le> Suc (t * k + k - 2);\n        Suc 0 < k; s (t * k) \\<noteq> NoMsg;\n        \\<And>t. event t = (t mod k = k - Suc 0); t0 = t * k;\n        t * k < t * k + k - Suc 0; m = s (t * k); Suc (t * k) \\<le> t2;\n        t2 mod k = k - Suc 0; s t2 = NoMsg; t2 \\<noteq> Suc (t * k);\n        \\<forall>x.\n           Suc (t * k) \\<le> x \\<and> x \\<le> Suc (t2 - 2) \\<longrightarrow>\n           s x = NoMsg;\n        t * k + k - Suc 0 \\<le> t2\\<rbrakk>\n       \\<Longrightarrow> s t3 = NoMsg\n 5. \\<And>t1 t2.\n       \\<lbrakk>Suc 0 < k; s t1 \\<noteq> NoMsg;\n        \\<And>t. event t = (t mod k = k - Suc 0); t0 = t * k;\n        t * k < t * k + k - Suc 0; t1 mod k \\<noteq> k - Suc 0; m = s t1;\n        \\<forall>x.\n           x \\<in> (if t1 = t * k then {}\n                    else [0 +\n                          t *\n                          k\\<dots>,t1 - Suc (0 + t * k)]) \\<longrightarrow>\n           x mod k \\<noteq> k - Suc 0;\n        Suc t1 \\<le> t2; t2 mod k = k - Suc 0; s t2 = NoMsg;\n        \\<forall>x.\n           x \\<in> (if t2 = Suc t1 then {}\n                    else [0 +\n                          Suc t1\\<dots>,t2 -\n  Suc (0 + Suc t1)]) \\<longrightarrow>\n           s x = NoMsg;\n        t * k < t1\\<rbrakk>\n       \\<Longrightarrow> (t1 < t * k + k - Suc 0 \\<longrightarrow>\n                          \\<not> t1 < t * k \\<and>\n                          (\\<not> t1 < t * k \\<longrightarrow>\n                           s t1 = s t1 \\<and>\n                           (\\<forall>x.\n                               x \\<in> [Suc\n   t1\\<dots>,t * k + k - Suc (Suc t1)] \\<longrightarrow>\n                               s x = NoMsg))) \\<and>\n                         (\\<not> t1 < t * k + k - Suc 0 \\<longrightarrow>\n                          t1 = t * k + k - Suc 0 \\<and> s t1 = s t1)", "apply simp+"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>t2 t3.\n       \\<lbrakk>Suc (t * k) \\<le> t3; t3 \\<le> Suc (t * k + k - 2);\n        Suc 0 < k; s (t * k) \\<noteq> NoMsg;\n        \\<And>t. event t = (t mod k = k - Suc 0); t0 = t * k;\n        t * k < t * k + k - Suc 0; m = s (t * k); t2 mod k = k - Suc 0;\n        s t2 = NoMsg; t2 \\<noteq> Suc (t * k);\n        \\<forall>x.\n           Suc (t * k) \\<le> x \\<and> x \\<le> Suc (t2 - 2) \\<longrightarrow>\n           s x = NoMsg;\n        t * k + k - Suc 0 \\<le> t2\\<rbrakk>\n       \\<Longrightarrow> s t3 = NoMsg\n 2. \\<And>t1 t2.\n       \\<lbrakk>Suc 0 < k; s t1 \\<noteq> NoMsg;\n        \\<And>t. event t = (t mod k = k - Suc 0); t0 = t * k;\n        t * k < t * k + k - Suc 0; t1 mod k \\<noteq> k - Suc 0; m = s t1;\n        \\<forall>x.\n           x \\<in> (if t1 = t * k then {}\n                    else [0 +\n                          t *\n                          k\\<dots>,t1 - Suc (0 + t * k)]) \\<longrightarrow>\n           x mod k \\<noteq> k - Suc 0;\n        Suc t1 \\<le> t2; t2 mod k = k - Suc 0; s t2 = NoMsg;\n        \\<forall>x.\n           x \\<in> (if t2 = Suc t1 then {}\n                    else [0 +\n                          Suc t1\\<dots>,t2 -\n  Suc (0 + Suc t1)]) \\<longrightarrow>\n           s x = NoMsg;\n        t * k < t1\\<rbrakk>\n       \\<Longrightarrow> (t1 < t * k + k - Suc 0 \\<longrightarrow>\n                          \\<not> t1 < t * k \\<and>\n                          (\\<not> t1 < t * k \\<longrightarrow>\n                           s t1 = s t1 \\<and>\n                           (\\<forall>x.\n                               x \\<in> [Suc\n   t1\\<dots>,t * k + k - Suc (Suc t1)] \\<longrightarrow>\n                               s x = NoMsg))) \\<and>\n                         (\\<not> t1 < t * k + k - Suc 0 \\<longrightarrow>\n                          t1 = t * k + k - Suc 0 \\<and> s t1 = s t1)", "apply (drule_tac x=t3 in spec)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>t2 t3.\n       \\<lbrakk>Suc (t * k) \\<le> t3; t3 \\<le> Suc (t * k + k - 2);\n        Suc 0 < k; s (t * k) \\<noteq> NoMsg;\n        \\<And>t. event t = (t mod k = k - Suc 0); t0 = t * k;\n        t * k < t * k + k - Suc 0; m = s (t * k); t2 mod k = k - Suc 0;\n        s t2 = NoMsg; t2 \\<noteq> Suc (t * k); t * k + k - Suc 0 \\<le> t2;\n        Suc (t * k) \\<le> t3 \\<and> t3 \\<le> Suc (t2 - 2) \\<longrightarrow>\n        s t3 = NoMsg\\<rbrakk>\n       \\<Longrightarrow> s t3 = NoMsg\n 2. \\<And>t1 t2.\n       \\<lbrakk>Suc 0 < k; s t1 \\<noteq> NoMsg;\n        \\<And>t. event t = (t mod k = k - Suc 0); t0 = t * k;\n        t * k < t * k + k - Suc 0; t1 mod k \\<noteq> k - Suc 0; m = s t1;\n        \\<forall>x.\n           x \\<in> (if t1 = t * k then {}\n                    else [0 +\n                          t *\n                          k\\<dots>,t1 - Suc (0 + t * k)]) \\<longrightarrow>\n           x mod k \\<noteq> k - Suc 0;\n        Suc t1 \\<le> t2; t2 mod k = k - Suc 0; s t2 = NoMsg;\n        \\<forall>x.\n           x \\<in> (if t2 = Suc t1 then {}\n                    else [0 +\n                          Suc t1\\<dots>,t2 -\n  Suc (0 + Suc t1)]) \\<longrightarrow>\n           s x = NoMsg;\n        t * k < t1\\<rbrakk>\n       \\<Longrightarrow> (t1 < t * k + k - Suc 0 \\<longrightarrow>\n                          \\<not> t1 < t * k \\<and>\n                          (\\<not> t1 < t * k \\<longrightarrow>\n                           s t1 = s t1 \\<and>\n                           (\\<forall>x.\n                               x \\<in> [Suc\n   t1\\<dots>,t * k + k - Suc (Suc t1)] \\<longrightarrow>\n                               s x = NoMsg))) \\<and>\n                         (\\<not> t1 < t * k + k - Suc 0 \\<longrightarrow>\n                          t1 = t * k + k - Suc 0 \\<and> s t1 = s t1)", "apply simp"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>t2 t3.\n       \\<lbrakk>Suc (t * k) \\<le> t3; t3 \\<le> Suc (t * k + k - 2);\n        Suc 0 < k; s (t * k) \\<noteq> NoMsg;\n        \\<And>t. event t = (t mod k = k - Suc 0); t0 = t * k;\n        t * k < t * k + k - Suc 0; m = s (t * k); t2 mod k = k - Suc 0;\n        s t2 = NoMsg; t2 \\<noteq> Suc (t * k); t * k + k - Suc 0 \\<le> t2;\n        t3 \\<le> Suc (t2 - 2) \\<longrightarrow> s t3 = NoMsg\\<rbrakk>\n       \\<Longrightarrow> s t3 = NoMsg\n 2. \\<And>t1 t2.\n       \\<lbrakk>Suc 0 < k; s t1 \\<noteq> NoMsg;\n        \\<And>t. event t = (t mod k = k - Suc 0); t0 = t * k;\n        t * k < t * k + k - Suc 0; t1 mod k \\<noteq> k - Suc 0; m = s t1;\n        \\<forall>x.\n           x \\<in> (if t1 = t * k then {}\n                    else [0 +\n                          t *\n                          k\\<dots>,t1 - Suc (0 + t * k)]) \\<longrightarrow>\n           x mod k \\<noteq> k - Suc 0;\n        Suc t1 \\<le> t2; t2 mod k = k - Suc 0; s t2 = NoMsg;\n        \\<forall>x.\n           x \\<in> (if t2 = Suc t1 then {}\n                    else [0 +\n                          Suc t1\\<dots>,t2 -\n  Suc (0 + Suc t1)]) \\<longrightarrow>\n           s x = NoMsg;\n        t * k < t1\\<rbrakk>\n       \\<Longrightarrow> (t1 < t * k + k - Suc 0 \\<longrightarrow>\n                          \\<not> t1 < t * k \\<and>\n                          (\\<not> t1 < t * k \\<longrightarrow>\n                           s t1 = s t1 \\<and>\n                           (\\<forall>x.\n                               x \\<in> [Suc\n   t1\\<dots>,t * k + k - Suc (Suc t1)] \\<longrightarrow>\n                               s x = NoMsg))) \\<and>\n                         (\\<not> t1 < t * k + k - Suc 0 \\<longrightarrow>\n                          t1 = t * k + k - Suc 0 \\<and> s t1 = s t1)", "apply (drule_tac x=t3 in order_le_imp_less_or_eq)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>t2 t3.\n       \\<lbrakk>Suc (t * k) \\<le> t3; Suc 0 < k; s (t * k) \\<noteq> NoMsg;\n        \\<And>t. event t = (t mod k = k - Suc 0); t0 = t * k;\n        t * k < t * k + k - Suc 0; m = s (t * k); t2 mod k = k - Suc 0;\n        s t2 = NoMsg; t2 \\<noteq> Suc (t * k); t * k + k - Suc 0 \\<le> t2;\n        t3 \\<le> Suc (t2 - 2) \\<longrightarrow> s t3 = NoMsg;\n        t3 < Suc (t * k + k - 2) \\<or> t3 = Suc (t * k + k - 2)\\<rbrakk>\n       \\<Longrightarrow> s t3 = NoMsg\n 2. \\<And>t1 t2.\n       \\<lbrakk>Suc 0 < k; s t1 \\<noteq> NoMsg;\n        \\<And>t. event t = (t mod k = k - Suc 0); t0 = t * k;\n        t * k < t * k + k - Suc 0; t1 mod k \\<noteq> k - Suc 0; m = s t1;\n        \\<forall>x.\n           x \\<in> (if t1 = t * k then {}\n                    else [0 +\n                          t *\n                          k\\<dots>,t1 - Suc (0 + t * k)]) \\<longrightarrow>\n           x mod k \\<noteq> k - Suc 0;\n        Suc t1 \\<le> t2; t2 mod k = k - Suc 0; s t2 = NoMsg;\n        \\<forall>x.\n           x \\<in> (if t2 = Suc t1 then {}\n                    else [0 +\n                          Suc t1\\<dots>,t2 -\n  Suc (0 + Suc t1)]) \\<longrightarrow>\n           s x = NoMsg;\n        t * k < t1\\<rbrakk>\n       \\<Longrightarrow> (t1 < t * k + k - Suc 0 \\<longrightarrow>\n                          \\<not> t1 < t * k \\<and>\n                          (\\<not> t1 < t * k \\<longrightarrow>\n                           s t1 = s t1 \\<and>\n                           (\\<forall>x.\n                               x \\<in> [Suc\n   t1\\<dots>,t * k + k - Suc (Suc t1)] \\<longrightarrow>\n                               s x = NoMsg))) \\<and>\n                         (\\<not> t1 < t * k + k - Suc 0 \\<longrightarrow>\n                          t1 = t * k + k - Suc 0 \\<and> s t1 = s t1)", "apply (drule_tac x=\"t * k + k - Suc 0\" and y=t2 in order_le_imp_less_or_eq)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>t2 t3.\n       \\<lbrakk>Suc (t * k) \\<le> t3; Suc 0 < k; s (t * k) \\<noteq> NoMsg;\n        \\<And>t. event t = (t mod k = k - Suc 0); t0 = t * k;\n        t * k < t * k + k - Suc 0; m = s (t * k); t2 mod k = k - Suc 0;\n        s t2 = NoMsg; t2 \\<noteq> Suc (t * k);\n        t3 \\<le> Suc (t2 - 2) \\<longrightarrow> s t3 = NoMsg;\n        t3 < Suc (t * k + k - 2) \\<or> t3 = Suc (t * k + k - 2);\n        t * k + k - Suc 0 < t2 \\<or> t * k + k - Suc 0 = t2\\<rbrakk>\n       \\<Longrightarrow> s t3 = NoMsg\n 2. \\<And>t1 t2.\n       \\<lbrakk>Suc 0 < k; s t1 \\<noteq> NoMsg;\n        \\<And>t. event t = (t mod k = k - Suc 0); t0 = t * k;\n        t * k < t * k + k - Suc 0; t1 mod k \\<noteq> k - Suc 0; m = s t1;\n        \\<forall>x.\n           x \\<in> (if t1 = t * k then {}\n                    else [0 +\n                          t *\n                          k\\<dots>,t1 - Suc (0 + t * k)]) \\<longrightarrow>\n           x mod k \\<noteq> k - Suc 0;\n        Suc t1 \\<le> t2; t2 mod k = k - Suc 0; s t2 = NoMsg;\n        \\<forall>x.\n           x \\<in> (if t2 = Suc t1 then {}\n                    else [0 +\n                          Suc t1\\<dots>,t2 -\n  Suc (0 + Suc t1)]) \\<longrightarrow>\n           s x = NoMsg;\n        t * k < t1\\<rbrakk>\n       \\<Longrightarrow> (t1 < t * k + k - Suc 0 \\<longrightarrow>\n                          \\<not> t1 < t * k \\<and>\n                          (\\<not> t1 < t * k \\<longrightarrow>\n                           s t1 = s t1 \\<and>\n                           (\\<forall>x.\n                               x \\<in> [Suc\n   t1\\<dots>,t * k + k - Suc (Suc t1)] \\<longrightarrow>\n                               s x = NoMsg))) \\<and>\n                         (\\<not> t1 < t * k + k - Suc 0 \\<longrightarrow>\n                          t1 = t * k + k - Suc 0 \\<and> s t1 = s t1)", "apply (fastforce simp: numeral_2_eq_2 Suc_diff_Suc)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>t1 t2.\n       \\<lbrakk>Suc 0 < k; s t1 \\<noteq> NoMsg;\n        \\<And>t. event t = (t mod k = k - Suc 0); t0 = t * k;\n        t * k < t * k + k - Suc 0; t1 mod k \\<noteq> k - Suc 0; m = s t1;\n        \\<forall>x.\n           x \\<in> (if t1 = t * k then {}\n                    else [0 +\n                          t *\n                          k\\<dots>,t1 - Suc (0 + t * k)]) \\<longrightarrow>\n           x mod k \\<noteq> k - Suc 0;\n        Suc t1 \\<le> t2; t2 mod k = k - Suc 0; s t2 = NoMsg;\n        \\<forall>x.\n           x \\<in> (if t2 = Suc t1 then {}\n                    else [0 +\n                          Suc t1\\<dots>,t2 -\n  Suc (0 + Suc t1)]) \\<longrightarrow>\n           s x = NoMsg;\n        t * k < t1\\<rbrakk>\n       \\<Longrightarrow> (t1 < t * k + k - Suc 0 \\<longrightarrow>\n                          \\<not> t1 < t * k \\<and>\n                          (\\<not> t1 < t * k \\<longrightarrow>\n                           s t1 = s t1 \\<and>\n                           (\\<forall>x.\n                               x \\<in> [Suc\n   t1\\<dots>,t * k + k - Suc (Suc t1)] \\<longrightarrow>\n                               s x = NoMsg))) \\<and>\n                         (\\<not> t1 < t * k + k - Suc 0 \\<longrightarrow>\n                          t1 = t * k + k - Suc 0 \\<and> s t1 = s t1)", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>t1 t2.\n       \\<lbrakk>Suc 0 < k; s t1 \\<noteq> NoMsg;\n        \\<And>t. event t = (t mod k = k - Suc 0); t0 = t * k;\n        t * k < t * k + k - Suc 0; t1 mod k \\<noteq> k - Suc 0; m = s t1;\n        \\<forall>x.\n           x \\<in> [t * k\\<dots>,t1 - Suc (t * k)] \\<longrightarrow>\n           x mod k \\<noteq> k - Suc 0;\n        Suc t1 \\<le> t2; t2 mod k = k - Suc 0; s t2 = NoMsg;\n        \\<forall>x.\n           x \\<in> (if t2 = Suc t1 then {}\n                    else [0 +\n                          Suc t1\\<dots>,t2 -\n  Suc (0 + Suc t1)]) \\<longrightarrow>\n           s x = NoMsg;\n        t * k < t1\\<rbrakk>\n       \\<Longrightarrow> (t1 < t * k + k - Suc 0 \\<longrightarrow>\n                          (\\<forall>x.\n                              x \\<in> [Suc\n  t1\\<dots>,t * k + k - Suc (Suc t1)] \\<longrightarrow>\n                              s x = NoMsg)) \\<and>\n                         (\\<not> t1 < t * k + k - Suc 0 \\<longrightarrow>\n                          t1 = t * k + k - Suc 0)", "apply (case_tac \"Suc t1 = t2\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>t1 t2.\n       \\<lbrakk>Suc 0 < k; s t1 \\<noteq> NoMsg;\n        \\<And>t. event t = (t mod k = k - Suc 0); t0 = t * k;\n        t * k < t * k + k - Suc 0; t1 mod k \\<noteq> k - Suc 0; m = s t1;\n        \\<forall>x.\n           x \\<in> [t * k\\<dots>,t1 - Suc (t * k)] \\<longrightarrow>\n           x mod k \\<noteq> k - Suc 0;\n        Suc t1 \\<le> t2; t2 mod k = k - Suc 0; s t2 = NoMsg;\n        \\<forall>x.\n           x \\<in> (if t2 = Suc t1 then {}\n                    else [0 +\n                          Suc t1\\<dots>,t2 -\n  Suc (0 + Suc t1)]) \\<longrightarrow>\n           s x = NoMsg;\n        t * k < t1; Suc t1 = t2\\<rbrakk>\n       \\<Longrightarrow> (t1 < t * k + k - Suc 0 \\<longrightarrow>\n                          (\\<forall>x.\n                              x \\<in> [Suc\n  t1\\<dots>,t * k + k - Suc (Suc t1)] \\<longrightarrow>\n                              s x = NoMsg)) \\<and>\n                         (\\<not> t1 < t * k + k - Suc 0 \\<longrightarrow>\n                          t1 = t * k + k - Suc 0)\n 2. \\<And>t1 t2.\n       \\<lbrakk>Suc 0 < k; s t1 \\<noteq> NoMsg;\n        \\<And>t. event t = (t mod k = k - Suc 0); t0 = t * k;\n        t * k < t * k + k - Suc 0; t1 mod k \\<noteq> k - Suc 0; m = s t1;\n        \\<forall>x.\n           x \\<in> [t * k\\<dots>,t1 - Suc (t * k)] \\<longrightarrow>\n           x mod k \\<noteq> k - Suc 0;\n        Suc t1 \\<le> t2; t2 mod k = k - Suc 0; s t2 = NoMsg;\n        \\<forall>x.\n           x \\<in> (if t2 = Suc t1 then {}\n                    else [0 +\n                          Suc t1\\<dots>,t2 -\n  Suc (0 + Suc t1)]) \\<longrightarrow>\n           s x = NoMsg;\n        t * k < t1; Suc t1 \\<noteq> t2\\<rbrakk>\n       \\<Longrightarrow> (t1 < t * k + k - Suc 0 \\<longrightarrow>\n                          (\\<forall>x.\n                              x \\<in> [Suc\n  t1\\<dots>,t * k + k - Suc (Suc t1)] \\<longrightarrow>\n                              s x = NoMsg)) \\<and>\n                         (\\<not> t1 < t * k + k - Suc 0 \\<longrightarrow>\n                          t1 = t * k + k - Suc 0)", "apply (drule_tac t=t2 in sym)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>t1 t2.\n       \\<lbrakk>Suc 0 < k; s t1 \\<noteq> NoMsg;\n        \\<And>t. event t = (t mod k = k - Suc 0); t0 = t * k;\n        t * k < t * k + k - Suc 0; t1 mod k \\<noteq> k - Suc 0; m = s t1;\n        \\<forall>x.\n           x \\<in> [t * k\\<dots>,t1 - Suc (t * k)] \\<longrightarrow>\n           x mod k \\<noteq> k - Suc 0;\n        Suc t1 \\<le> t2; t2 mod k = k - Suc 0; s t2 = NoMsg;\n        \\<forall>x.\n           x \\<in> (if t2 = Suc t1 then {}\n                    else [0 +\n                          Suc t1\\<dots>,t2 -\n  Suc (0 + Suc t1)]) \\<longrightarrow>\n           s x = NoMsg;\n        t * k < t1; t2 = Suc t1\\<rbrakk>\n       \\<Longrightarrow> (t1 < t * k + k - Suc 0 \\<longrightarrow>\n                          (\\<forall>x.\n                              x \\<in> [Suc\n  t1\\<dots>,t * k + k - Suc (Suc t1)] \\<longrightarrow>\n                              s x = NoMsg)) \\<and>\n                         (\\<not> t1 < t * k + k - Suc 0 \\<longrightarrow>\n                          t1 = t * k + k - Suc 0)\n 2. \\<And>t1 t2.\n       \\<lbrakk>Suc 0 < k; s t1 \\<noteq> NoMsg;\n        \\<And>t. event t = (t mod k = k - Suc 0); t0 = t * k;\n        t * k < t * k + k - Suc 0; t1 mod k \\<noteq> k - Suc 0; m = s t1;\n        \\<forall>x.\n           x \\<in> [t * k\\<dots>,t1 - Suc (t * k)] \\<longrightarrow>\n           x mod k \\<noteq> k - Suc 0;\n        Suc t1 \\<le> t2; t2 mod k = k - Suc 0; s t2 = NoMsg;\n        \\<forall>x.\n           x \\<in> (if t2 = Suc t1 then {}\n                    else [0 +\n                          Suc t1\\<dots>,t2 -\n  Suc (0 + Suc t1)]) \\<longrightarrow>\n           s x = NoMsg;\n        t * k < t1; Suc t1 \\<noteq> t2\\<rbrakk>\n       \\<Longrightarrow> (t1 < t * k + k - Suc 0 \\<longrightarrow>\n                          (\\<forall>x.\n                              x \\<in> [Suc\n  t1\\<dots>,t * k + k - Suc (Suc t1)] \\<longrightarrow>\n                              s x = NoMsg)) \\<and>\n                         (\\<not> t1 < t * k + k - Suc 0 \\<longrightarrow>\n                          t1 = t * k + k - Suc 0)", "apply (simp add: iIN_iff numeral_2_eq_2 Suc_diff_Suc)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>t1 t2.\n       \\<lbrakk>Suc 0 < k; s t1 \\<noteq> NoMsg;\n        \\<And>t. event t = (t mod k = k - Suc 0); t0 = t * k;\n        t * k < t * k + k - Suc 0; t1 mod k \\<noteq> k - Suc 0; m = s t1;\n        \\<forall>x.\n           t * k \\<le> x \\<and> x \\<le> t1 - Suc 0 \\<longrightarrow>\n           x mod k \\<noteq> k - Suc 0;\n        Suc t1 mod k = k - Suc 0; s (Suc t1) = NoMsg; t * k < t1;\n        t2 = Suc t1\\<rbrakk>\n       \\<Longrightarrow> (t1 < t * k + k - Suc 0 \\<longrightarrow>\n                          (\\<forall>x.\n                              Suc t1 \\<le> x \\<and>\n                              x \\<le> t * k + k - Suc 0 \\<longrightarrow>\n                              s x = NoMsg)) \\<and>\n                         (\\<not> t1 < t * k + k - Suc 0 \\<longrightarrow>\n                          t1 = t * k + k - Suc 0)\n 2. \\<And>t1 t2.\n       \\<lbrakk>Suc 0 < k; s t1 \\<noteq> NoMsg;\n        \\<And>t. event t = (t mod k = k - Suc 0); t0 = t * k;\n        t * k < t * k + k - Suc 0; t1 mod k \\<noteq> k - Suc 0; m = s t1;\n        \\<forall>x.\n           x \\<in> [t * k\\<dots>,t1 - Suc (t * k)] \\<longrightarrow>\n           x mod k \\<noteq> k - Suc 0;\n        Suc t1 \\<le> t2; t2 mod k = k - Suc 0; s t2 = NoMsg;\n        \\<forall>x.\n           x \\<in> (if t2 = Suc t1 then {}\n                    else [0 +\n                          Suc t1\\<dots>,t2 -\n  Suc (0 + Suc t1)]) \\<longrightarrow>\n           s x = NoMsg;\n        t * k < t1; Suc t1 \\<noteq> t2\\<rbrakk>\n       \\<Longrightarrow> (t1 < t * k + k - Suc 0 \\<longrightarrow>\n                          (\\<forall>x.\n                              x \\<in> [Suc\n  t1\\<dots>,t * k + k - Suc (Suc t1)] \\<longrightarrow>\n                              s x = NoMsg)) \\<and>\n                         (\\<not> t1 < t * k + k - Suc 0 \\<longrightarrow>\n                          t1 = t * k + k - Suc 0)", "apply (subgoal_tac \"t1 \\<le> t * k + k - Suc 0\")"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>t1 t2.\n       \\<lbrakk>Suc 0 < k; s t1 \\<noteq> NoMsg;\n        \\<And>t. event t = (t mod k = k - Suc 0); t0 = t * k;\n        t * k < t * k + k - Suc 0; t1 mod k \\<noteq> k - Suc 0; m = s t1;\n        \\<forall>x.\n           t * k \\<le> x \\<and> x \\<le> t1 - Suc 0 \\<longrightarrow>\n           x mod k \\<noteq> k - Suc 0;\n        Suc t1 mod k = k - Suc 0; s (Suc t1) = NoMsg; t * k < t1;\n        t2 = Suc t1; t1 \\<le> t * k + k - Suc 0\\<rbrakk>\n       \\<Longrightarrow> (t1 < t * k + k - Suc 0 \\<longrightarrow>\n                          (\\<forall>x.\n                              Suc t1 \\<le> x \\<and>\n                              x \\<le> t * k + k - Suc 0 \\<longrightarrow>\n                              s x = NoMsg)) \\<and>\n                         (\\<not> t1 < t * k + k - Suc 0 \\<longrightarrow>\n                          t1 = t * k + k - Suc 0)\n 2. \\<And>t1 t2.\n       \\<lbrakk>Suc 0 < k; s t1 \\<noteq> NoMsg;\n        \\<And>t. event t = (t mod k = k - Suc 0); t0 = t * k;\n        t * k < t * k + k - Suc 0; t1 mod k \\<noteq> k - Suc 0; m = s t1;\n        \\<forall>x.\n           t * k \\<le> x \\<and> x \\<le> t1 - Suc 0 \\<longrightarrow>\n           x mod k \\<noteq> k - Suc 0;\n        Suc t1 mod k = k - Suc 0; s (Suc t1) = NoMsg; t * k < t1;\n        t2 = Suc t1\\<rbrakk>\n       \\<Longrightarrow> t1 \\<le> t * k + k - Suc 0\n 3. \\<And>t1 t2.\n       \\<lbrakk>Suc 0 < k; s t1 \\<noteq> NoMsg;\n        \\<And>t. event t = (t mod k = k - Suc 0); t0 = t * k;\n        t * k < t * k + k - Suc 0; t1 mod k \\<noteq> k - Suc 0; m = s t1;\n        \\<forall>x.\n           x \\<in> [t * k\\<dots>,t1 - Suc (t * k)] \\<longrightarrow>\n           x mod k \\<noteq> k - Suc 0;\n        Suc t1 \\<le> t2; t2 mod k = k - Suc 0; s t2 = NoMsg;\n        \\<forall>x.\n           x \\<in> (if t2 = Suc t1 then {}\n                    else [0 +\n                          Suc t1\\<dots>,t2 -\n  Suc (0 + Suc t1)]) \\<longrightarrow>\n           s x = NoMsg;\n        t * k < t1; Suc t1 \\<noteq> t2\\<rbrakk>\n       \\<Longrightarrow> (t1 < t * k + k - Suc 0 \\<longrightarrow>\n                          (\\<forall>x.\n                              x \\<in> [Suc\n  t1\\<dots>,t * k + k - Suc (Suc t1)] \\<longrightarrow>\n                              s x = NoMsg)) \\<and>\n                         (\\<not> t1 < t * k + k - Suc 0 \\<longrightarrow>\n                          t1 = t * k + k - Suc 0)", "prefer 2"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>t1 t2.\n       \\<lbrakk>Suc 0 < k; s t1 \\<noteq> NoMsg;\n        \\<And>t. event t = (t mod k = k - Suc 0); t0 = t * k;\n        t * k < t * k + k - Suc 0; t1 mod k \\<noteq> k - Suc 0; m = s t1;\n        \\<forall>x.\n           t * k \\<le> x \\<and> x \\<le> t1 - Suc 0 \\<longrightarrow>\n           x mod k \\<noteq> k - Suc 0;\n        Suc t1 mod k = k - Suc 0; s (Suc t1) = NoMsg; t * k < t1;\n        t2 = Suc t1\\<rbrakk>\n       \\<Longrightarrow> t1 \\<le> t * k + k - Suc 0\n 2. \\<And>t1 t2.\n       \\<lbrakk>Suc 0 < k; s t1 \\<noteq> NoMsg;\n        \\<And>t. event t = (t mod k = k - Suc 0); t0 = t * k;\n        t * k < t * k + k - Suc 0; t1 mod k \\<noteq> k - Suc 0; m = s t1;\n        \\<forall>x.\n           t * k \\<le> x \\<and> x \\<le> t1 - Suc 0 \\<longrightarrow>\n           x mod k \\<noteq> k - Suc 0;\n        Suc t1 mod k = k - Suc 0; s (Suc t1) = NoMsg; t * k < t1;\n        t2 = Suc t1; t1 \\<le> t * k + k - Suc 0\\<rbrakk>\n       \\<Longrightarrow> (t1 < t * k + k - Suc 0 \\<longrightarrow>\n                          (\\<forall>x.\n                              Suc t1 \\<le> x \\<and>\n                              x \\<le> t * k + k - Suc 0 \\<longrightarrow>\n                              s x = NoMsg)) \\<and>\n                         (\\<not> t1 < t * k + k - Suc 0 \\<longrightarrow>\n                          t1 = t * k + k - Suc 0)\n 3. \\<And>t1 t2.\n       \\<lbrakk>Suc 0 < k; s t1 \\<noteq> NoMsg;\n        \\<And>t. event t = (t mod k = k - Suc 0); t0 = t * k;\n        t * k < t * k + k - Suc 0; t1 mod k \\<noteq> k - Suc 0; m = s t1;\n        \\<forall>x.\n           x \\<in> [t * k\\<dots>,t1 - Suc (t * k)] \\<longrightarrow>\n           x mod k \\<noteq> k - Suc 0;\n        Suc t1 \\<le> t2; t2 mod k = k - Suc 0; s t2 = NoMsg;\n        \\<forall>x.\n           x \\<in> (if t2 = Suc t1 then {}\n                    else [0 +\n                          Suc t1\\<dots>,t2 -\n  Suc (0 + Suc t1)]) \\<longrightarrow>\n           s x = NoMsg;\n        t * k < t1; Suc t1 \\<noteq> t2\\<rbrakk>\n       \\<Longrightarrow> (t1 < t * k + k - Suc 0 \\<longrightarrow>\n                          (\\<forall>x.\n                              x \\<in> [Suc\n  t1\\<dots>,t * k + k - Suc (Suc t1)] \\<longrightarrow>\n                              s x = NoMsg)) \\<and>\n                         (\\<not> t1 < t * k + k - Suc 0 \\<longrightarrow>\n                          t1 = t * k + k - Suc 0)", "apply (rule ccontr)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>t1 t2.\n       \\<lbrakk>Suc 0 < k; s t1 \\<noteq> NoMsg;\n        \\<And>t. event t = (t mod k = k - Suc 0); t0 = t * k;\n        t * k < t * k + k - Suc 0; t1 mod k \\<noteq> k - Suc 0; m = s t1;\n        \\<forall>x.\n           t * k \\<le> x \\<and> x \\<le> t1 - Suc 0 \\<longrightarrow>\n           x mod k \\<noteq> k - Suc 0;\n        Suc t1 mod k = k - Suc 0; s (Suc t1) = NoMsg; t * k < t1;\n        t2 = Suc t1; \\<not> t1 \\<le> t * k + k - Suc 0\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>t1 t2.\n       \\<lbrakk>Suc 0 < k; s t1 \\<noteq> NoMsg;\n        \\<And>t. event t = (t mod k = k - Suc 0); t0 = t * k;\n        t * k < t * k + k - Suc 0; t1 mod k \\<noteq> k - Suc 0; m = s t1;\n        \\<forall>x.\n           t * k \\<le> x \\<and> x \\<le> t1 - Suc 0 \\<longrightarrow>\n           x mod k \\<noteq> k - Suc 0;\n        Suc t1 mod k = k - Suc 0; s (Suc t1) = NoMsg; t * k < t1;\n        t2 = Suc t1; t1 \\<le> t * k + k - Suc 0\\<rbrakk>\n       \\<Longrightarrow> (t1 < t * k + k - Suc 0 \\<longrightarrow>\n                          (\\<forall>x.\n                              Suc t1 \\<le> x \\<and>\n                              x \\<le> t * k + k - Suc 0 \\<longrightarrow>\n                              s x = NoMsg)) \\<and>\n                         (\\<not> t1 < t * k + k - Suc 0 \\<longrightarrow>\n                          t1 = t * k + k - Suc 0)\n 3. \\<And>t1 t2.\n       \\<lbrakk>Suc 0 < k; s t1 \\<noteq> NoMsg;\n        \\<And>t. event t = (t mod k = k - Suc 0); t0 = t * k;\n        t * k < t * k + k - Suc 0; t1 mod k \\<noteq> k - Suc 0; m = s t1;\n        \\<forall>x.\n           x \\<in> [t * k\\<dots>,t1 - Suc (t * k)] \\<longrightarrow>\n           x mod k \\<noteq> k - Suc 0;\n        Suc t1 \\<le> t2; t2 mod k = k - Suc 0; s t2 = NoMsg;\n        \\<forall>x.\n           x \\<in> (if t2 = Suc t1 then {}\n                    else [0 +\n                          Suc t1\\<dots>,t2 -\n  Suc (0 + Suc t1)]) \\<longrightarrow>\n           s x = NoMsg;\n        t * k < t1; Suc t1 \\<noteq> t2\\<rbrakk>\n       \\<Longrightarrow> (t1 < t * k + k - Suc 0 \\<longrightarrow>\n                          (\\<forall>x.\n                              x \\<in> [Suc\n  t1\\<dots>,t * k + k - Suc (Suc t1)] \\<longrightarrow>\n                              s x = NoMsg)) \\<and>\n                         (\\<not> t1 < t * k + k - Suc 0 \\<longrightarrow>\n                          t1 = t * k + k - Suc 0)", "apply (drule_tac x=\"t * k + k - Suc 0\" in spec)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>t1 t2.\n       \\<lbrakk>Suc 0 < k; s t1 \\<noteq> NoMsg;\n        \\<And>t. event t = (t mod k = k - Suc 0); t0 = t * k;\n        t * k < t * k + k - Suc 0; t1 mod k \\<noteq> k - Suc 0; m = s t1;\n        Suc t1 mod k = k - Suc 0; s (Suc t1) = NoMsg; t * k < t1;\n        t2 = Suc t1; \\<not> t1 \\<le> t * k + k - Suc 0;\n        t * k \\<le> t * k + k - Suc 0 \\<and>\n        t * k + k - Suc 0 \\<le> t1 - Suc 0 \\<longrightarrow>\n        (t * k + k - Suc 0) mod k \\<noteq> k - Suc 0\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>t1 t2.\n       \\<lbrakk>Suc 0 < k; s t1 \\<noteq> NoMsg;\n        \\<And>t. event t = (t mod k = k - Suc 0); t0 = t * k;\n        t * k < t * k + k - Suc 0; t1 mod k \\<noteq> k - Suc 0; m = s t1;\n        \\<forall>x.\n           t * k \\<le> x \\<and> x \\<le> t1 - Suc 0 \\<longrightarrow>\n           x mod k \\<noteq> k - Suc 0;\n        Suc t1 mod k = k - Suc 0; s (Suc t1) = NoMsg; t * k < t1;\n        t2 = Suc t1; t1 \\<le> t * k + k - Suc 0\\<rbrakk>\n       \\<Longrightarrow> (t1 < t * k + k - Suc 0 \\<longrightarrow>\n                          (\\<forall>x.\n                              Suc t1 \\<le> x \\<and>\n                              x \\<le> t * k + k - Suc 0 \\<longrightarrow>\n                              s x = NoMsg)) \\<and>\n                         (\\<not> t1 < t * k + k - Suc 0 \\<longrightarrow>\n                          t1 = t * k + k - Suc 0)\n 3. \\<And>t1 t2.\n       \\<lbrakk>Suc 0 < k; s t1 \\<noteq> NoMsg;\n        \\<And>t. event t = (t mod k = k - Suc 0); t0 = t * k;\n        t * k < t * k + k - Suc 0; t1 mod k \\<noteq> k - Suc 0; m = s t1;\n        \\<forall>x.\n           x \\<in> [t * k\\<dots>,t1 - Suc (t * k)] \\<longrightarrow>\n           x mod k \\<noteq> k - Suc 0;\n        Suc t1 \\<le> t2; t2 mod k = k - Suc 0; s t2 = NoMsg;\n        \\<forall>x.\n           x \\<in> (if t2 = Suc t1 then {}\n                    else [0 +\n                          Suc t1\\<dots>,t2 -\n  Suc (0 + Suc t1)]) \\<longrightarrow>\n           s x = NoMsg;\n        t * k < t1; Suc t1 \\<noteq> t2\\<rbrakk>\n       \\<Longrightarrow> (t1 < t * k + k - Suc 0 \\<longrightarrow>\n                          (\\<forall>x.\n                              x \\<in> [Suc\n  t1\\<dots>,t * k + k - Suc (Suc t1)] \\<longrightarrow>\n                              s x = NoMsg)) \\<and>\n                         (\\<not> t1 < t * k + k - Suc 0 \\<longrightarrow>\n                          t1 = t * k + k - Suc 0)", "apply (simp add: mod_pred)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>t1 t2.\n       \\<lbrakk>Suc 0 < k; s t1 \\<noteq> NoMsg;\n        \\<And>t. event t = (t mod k = k - Suc 0); t0 = t * k;\n        t * k < t * k + k - Suc 0; t1 mod k \\<noteq> k - Suc 0; m = s t1;\n        \\<forall>x.\n           t * k \\<le> x \\<and> x \\<le> t1 - Suc 0 \\<longrightarrow>\n           x mod k \\<noteq> k - Suc 0;\n        Suc t1 mod k = k - Suc 0; s (Suc t1) = NoMsg; t * k < t1;\n        t2 = Suc t1; t1 \\<le> t * k + k - Suc 0\\<rbrakk>\n       \\<Longrightarrow> (t1 < t * k + k - Suc 0 \\<longrightarrow>\n                          (\\<forall>x.\n                              Suc t1 \\<le> x \\<and>\n                              x \\<le> t * k + k - Suc 0 \\<longrightarrow>\n                              s x = NoMsg)) \\<and>\n                         (\\<not> t1 < t * k + k - Suc 0 \\<longrightarrow>\n                          t1 = t * k + k - Suc 0)\n 2. \\<And>t1 t2.\n       \\<lbrakk>Suc 0 < k; s t1 \\<noteq> NoMsg;\n        \\<And>t. event t = (t mod k = k - Suc 0); t0 = t * k;\n        t * k < t * k + k - Suc 0; t1 mod k \\<noteq> k - Suc 0; m = s t1;\n        \\<forall>x.\n           x \\<in> [t * k\\<dots>,t1 - Suc (t * k)] \\<longrightarrow>\n           x mod k \\<noteq> k - Suc 0;\n        Suc t1 \\<le> t2; t2 mod k = k - Suc 0; s t2 = NoMsg;\n        \\<forall>x.\n           x \\<in> (if t2 = Suc t1 then {}\n                    else [0 +\n                          Suc t1\\<dots>,t2 -\n  Suc (0 + Suc t1)]) \\<longrightarrow>\n           s x = NoMsg;\n        t * k < t1; Suc t1 \\<noteq> t2\\<rbrakk>\n       \\<Longrightarrow> (t1 < t * k + k - Suc 0 \\<longrightarrow>\n                          (\\<forall>x.\n                              x \\<in> [Suc\n  t1\\<dots>,t * k + k - Suc (Suc t1)] \\<longrightarrow>\n                              s x = NoMsg)) \\<and>\n                         (\\<not> t1 < t * k + k - Suc 0 \\<longrightarrow>\n                          t1 = t * k + k - Suc 0)", "apply (intro conjI impI)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>t1 t2.\n       \\<lbrakk>Suc 0 < k; s t1 \\<noteq> NoMsg;\n        \\<And>t. event t = (t mod k = k - Suc 0); t0 = t * k;\n        t * k < t * k + k - Suc 0; t1 mod k \\<noteq> k - Suc 0; m = s t1;\n        \\<forall>x.\n           t * k \\<le> x \\<and> x \\<le> t1 - Suc 0 \\<longrightarrow>\n           x mod k \\<noteq> k - Suc 0;\n        Suc t1 mod k = k - Suc 0; s (Suc t1) = NoMsg; t * k < t1;\n        t2 = Suc t1; t1 \\<le> t * k + k - Suc 0;\n        t1 < t * k + k - Suc 0\\<rbrakk>\n       \\<Longrightarrow> \\<forall>x.\n                            Suc t1 \\<le> x \\<and>\n                            x \\<le> t * k + k - Suc 0 \\<longrightarrow>\n                            s x = NoMsg\n 2. \\<And>t1 t2.\n       \\<lbrakk>Suc 0 < k; s t1 \\<noteq> NoMsg;\n        \\<And>t. event t = (t mod k = k - Suc 0); t0 = t * k;\n        t * k < t * k + k - Suc 0; t1 mod k \\<noteq> k - Suc 0; m = s t1;\n        \\<forall>x.\n           t * k \\<le> x \\<and> x \\<le> t1 - Suc 0 \\<longrightarrow>\n           x mod k \\<noteq> k - Suc 0;\n        Suc t1 mod k = k - Suc 0; s (Suc t1) = NoMsg; t * k < t1;\n        t2 = Suc t1; t1 \\<le> t * k + k - Suc 0;\n        \\<not> t1 < t * k + k - Suc 0\\<rbrakk>\n       \\<Longrightarrow> t1 = t * k + k - Suc 0\n 3. \\<And>t1 t2.\n       \\<lbrakk>Suc 0 < k; s t1 \\<noteq> NoMsg;\n        \\<And>t. event t = (t mod k = k - Suc 0); t0 = t * k;\n        t * k < t * k + k - Suc 0; t1 mod k \\<noteq> k - Suc 0; m = s t1;\n        \\<forall>x.\n           x \\<in> [t * k\\<dots>,t1 - Suc (t * k)] \\<longrightarrow>\n           x mod k \\<noteq> k - Suc 0;\n        Suc t1 \\<le> t2; t2 mod k = k - Suc 0; s t2 = NoMsg;\n        \\<forall>x.\n           x \\<in> (if t2 = Suc t1 then {}\n                    else [0 +\n                          Suc t1\\<dots>,t2 -\n  Suc (0 + Suc t1)]) \\<longrightarrow>\n           s x = NoMsg;\n        t * k < t1; Suc t1 \\<noteq> t2\\<rbrakk>\n       \\<Longrightarrow> (t1 < t * k + k - Suc 0 \\<longrightarrow>\n                          (\\<forall>x.\n                              x \\<in> [Suc\n  t1\\<dots>,t * k + k - Suc (Suc t1)] \\<longrightarrow>\n                              s x = NoMsg)) \\<and>\n                         (\\<not> t1 < t * k + k - Suc 0 \\<longrightarrow>\n                          t1 = t * k + k - Suc 0)", "apply (subgoal_tac \"Suc t1 = t * k + k - Suc 0\", clarsimp)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>t1 t2.\n       \\<lbrakk>Suc 0 < k; s t1 \\<noteq> NoMsg;\n        \\<And>t. event t = (t mod k = k - Suc 0); t0 = t * k;\n        t * k < t * k + k - Suc 0; t1 mod k \\<noteq> k - Suc 0; m = s t1;\n        \\<forall>x.\n           t * k \\<le> x \\<and> x \\<le> t1 - Suc 0 \\<longrightarrow>\n           x mod k \\<noteq> k - Suc 0;\n        Suc t1 mod k = k - Suc 0; s (Suc t1) = NoMsg; t * k < t1;\n        t2 = Suc t1; t1 \\<le> t * k + k - Suc 0;\n        t1 < t * k + k - Suc 0\\<rbrakk>\n       \\<Longrightarrow> Suc t1 = t * k + k - Suc 0\n 2. \\<And>t1 t2.\n       \\<lbrakk>Suc 0 < k; s t1 \\<noteq> NoMsg;\n        \\<And>t. event t = (t mod k = k - Suc 0); t0 = t * k;\n        t * k < t * k + k - Suc 0; t1 mod k \\<noteq> k - Suc 0; m = s t1;\n        \\<forall>x.\n           t * k \\<le> x \\<and> x \\<le> t1 - Suc 0 \\<longrightarrow>\n           x mod k \\<noteq> k - Suc 0;\n        Suc t1 mod k = k - Suc 0; s (Suc t1) = NoMsg; t * k < t1;\n        t2 = Suc t1; t1 \\<le> t * k + k - Suc 0;\n        \\<not> t1 < t * k + k - Suc 0\\<rbrakk>\n       \\<Longrightarrow> t1 = t * k + k - Suc 0\n 3. \\<And>t1 t2.\n       \\<lbrakk>Suc 0 < k; s t1 \\<noteq> NoMsg;\n        \\<And>t. event t = (t mod k = k - Suc 0); t0 = t * k;\n        t * k < t * k + k - Suc 0; t1 mod k \\<noteq> k - Suc 0; m = s t1;\n        \\<forall>x.\n           x \\<in> [t * k\\<dots>,t1 - Suc (t * k)] \\<longrightarrow>\n           x mod k \\<noteq> k - Suc 0;\n        Suc t1 \\<le> t2; t2 mod k = k - Suc 0; s t2 = NoMsg;\n        \\<forall>x.\n           x \\<in> (if t2 = Suc t1 then {}\n                    else [0 +\n                          Suc t1\\<dots>,t2 -\n  Suc (0 + Suc t1)]) \\<longrightarrow>\n           s x = NoMsg;\n        t * k < t1; Suc t1 \\<noteq> t2\\<rbrakk>\n       \\<Longrightarrow> (t1 < t * k + k - Suc 0 \\<longrightarrow>\n                          (\\<forall>x.\n                              x \\<in> [Suc\n  t1\\<dots>,t * k + k - Suc (Suc t1)] \\<longrightarrow>\n                              s x = NoMsg)) \\<and>\n                         (\\<not> t1 < t * k + k - Suc 0 \\<longrightarrow>\n                          t1 = t * k + k - Suc 0)", "apply (subgoal_tac \"t * k + (k - Suc 0) \\<le> Suc t1\")"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>t1 t2.\n       \\<lbrakk>Suc 0 < k; s t1 \\<noteq> NoMsg;\n        \\<And>t. event t = (t mod k = k - Suc 0); t0 = t * k;\n        t * k < t * k + k - Suc 0; t1 mod k \\<noteq> k - Suc 0; m = s t1;\n        \\<forall>x.\n           t * k \\<le> x \\<and> x \\<le> t1 - Suc 0 \\<longrightarrow>\n           x mod k \\<noteq> k - Suc 0;\n        Suc t1 mod k = k - Suc 0; s (Suc t1) = NoMsg; t * k < t1;\n        t2 = Suc t1; t1 \\<le> t * k + k - Suc 0; t1 < t * k + k - Suc 0;\n        t * k + (k - Suc 0) \\<le> Suc t1\\<rbrakk>\n       \\<Longrightarrow> Suc t1 = t * k + k - Suc 0\n 2. \\<And>t1 t2.\n       \\<lbrakk>Suc 0 < k; s t1 \\<noteq> NoMsg;\n        \\<And>t. event t = (t mod k = k - Suc 0); t0 = t * k;\n        t * k < t * k + k - Suc 0; t1 mod k \\<noteq> k - Suc 0; m = s t1;\n        \\<forall>x.\n           t * k \\<le> x \\<and> x \\<le> t1 - Suc 0 \\<longrightarrow>\n           x mod k \\<noteq> k - Suc 0;\n        Suc t1 mod k = k - Suc 0; s (Suc t1) = NoMsg; t * k < t1;\n        t2 = Suc t1; t1 \\<le> t * k + k - Suc 0;\n        t1 < t * k + k - Suc 0\\<rbrakk>\n       \\<Longrightarrow> t * k + (k - Suc 0) \\<le> Suc t1\n 3. \\<And>t1 t2.\n       \\<lbrakk>Suc 0 < k; s t1 \\<noteq> NoMsg;\n        \\<And>t. event t = (t mod k = k - Suc 0); t0 = t * k;\n        t * k < t * k + k - Suc 0; t1 mod k \\<noteq> k - Suc 0; m = s t1;\n        \\<forall>x.\n           t * k \\<le> x \\<and> x \\<le> t1 - Suc 0 \\<longrightarrow>\n           x mod k \\<noteq> k - Suc 0;\n        Suc t1 mod k = k - Suc 0; s (Suc t1) = NoMsg; t * k < t1;\n        t2 = Suc t1; t1 \\<le> t * k + k - Suc 0;\n        \\<not> t1 < t * k + k - Suc 0\\<rbrakk>\n       \\<Longrightarrow> t1 = t * k + k - Suc 0\n 4. \\<And>t1 t2.\n       \\<lbrakk>Suc 0 < k; s t1 \\<noteq> NoMsg;\n        \\<And>t. event t = (t mod k = k - Suc 0); t0 = t * k;\n        t * k < t * k + k - Suc 0; t1 mod k \\<noteq> k - Suc 0; m = s t1;\n        \\<forall>x.\n           x \\<in> [t * k\\<dots>,t1 - Suc (t * k)] \\<longrightarrow>\n           x mod k \\<noteq> k - Suc 0;\n        Suc t1 \\<le> t2; t2 mod k = k - Suc 0; s t2 = NoMsg;\n        \\<forall>x.\n           x \\<in> (if t2 = Suc t1 then {}\n                    else [0 +\n                          Suc t1\\<dots>,t2 -\n  Suc (0 + Suc t1)]) \\<longrightarrow>\n           s x = NoMsg;\n        t * k < t1; Suc t1 \\<noteq> t2\\<rbrakk>\n       \\<Longrightarrow> (t1 < t * k + k - Suc 0 \\<longrightarrow>\n                          (\\<forall>x.\n                              x \\<in> [Suc\n  t1\\<dots>,t * k + k - Suc (Suc t1)] \\<longrightarrow>\n                              s x = NoMsg)) \\<and>\n                         (\\<not> t1 < t * k + k - Suc 0 \\<longrightarrow>\n                          t1 = t * k + k - Suc 0)", "prefer 2"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>t1 t2.\n       \\<lbrakk>Suc 0 < k; s t1 \\<noteq> NoMsg;\n        \\<And>t. event t = (t mod k = k - Suc 0); t0 = t * k;\n        t * k < t * k + k - Suc 0; t1 mod k \\<noteq> k - Suc 0; m = s t1;\n        \\<forall>x.\n           t * k \\<le> x \\<and> x \\<le> t1 - Suc 0 \\<longrightarrow>\n           x mod k \\<noteq> k - Suc 0;\n        Suc t1 mod k = k - Suc 0; s (Suc t1) = NoMsg; t * k < t1;\n        t2 = Suc t1; t1 \\<le> t * k + k - Suc 0;\n        t1 < t * k + k - Suc 0\\<rbrakk>\n       \\<Longrightarrow> t * k + (k - Suc 0) \\<le> Suc t1\n 2. \\<And>t1 t2.\n       \\<lbrakk>Suc 0 < k; s t1 \\<noteq> NoMsg;\n        \\<And>t. event t = (t mod k = k - Suc 0); t0 = t * k;\n        t * k < t * k + k - Suc 0; t1 mod k \\<noteq> k - Suc 0; m = s t1;\n        \\<forall>x.\n           t * k \\<le> x \\<and> x \\<le> t1 - Suc 0 \\<longrightarrow>\n           x mod k \\<noteq> k - Suc 0;\n        Suc t1 mod k = k - Suc 0; s (Suc t1) = NoMsg; t * k < t1;\n        t2 = Suc t1; t1 \\<le> t * k + k - Suc 0; t1 < t * k + k - Suc 0;\n        t * k + (k - Suc 0) \\<le> Suc t1\\<rbrakk>\n       \\<Longrightarrow> Suc t1 = t * k + k - Suc 0\n 3. \\<And>t1 t2.\n       \\<lbrakk>Suc 0 < k; s t1 \\<noteq> NoMsg;\n        \\<And>t. event t = (t mod k = k - Suc 0); t0 = t * k;\n        t * k < t * k + k - Suc 0; t1 mod k \\<noteq> k - Suc 0; m = s t1;\n        \\<forall>x.\n           t * k \\<le> x \\<and> x \\<le> t1 - Suc 0 \\<longrightarrow>\n           x mod k \\<noteq> k - Suc 0;\n        Suc t1 mod k = k - Suc 0; s (Suc t1) = NoMsg; t * k < t1;\n        t2 = Suc t1; t1 \\<le> t * k + k - Suc 0;\n        \\<not> t1 < t * k + k - Suc 0\\<rbrakk>\n       \\<Longrightarrow> t1 = t * k + k - Suc 0\n 4. \\<And>t1 t2.\n       \\<lbrakk>Suc 0 < k; s t1 \\<noteq> NoMsg;\n        \\<And>t. event t = (t mod k = k - Suc 0); t0 = t * k;\n        t * k < t * k + k - Suc 0; t1 mod k \\<noteq> k - Suc 0; m = s t1;\n        \\<forall>x.\n           x \\<in> [t * k\\<dots>,t1 - Suc (t * k)] \\<longrightarrow>\n           x mod k \\<noteq> k - Suc 0;\n        Suc t1 \\<le> t2; t2 mod k = k - Suc 0; s t2 = NoMsg;\n        \\<forall>x.\n           x \\<in> (if t2 = Suc t1 then {}\n                    else [0 +\n                          Suc t1\\<dots>,t2 -\n  Suc (0 + Suc t1)]) \\<longrightarrow>\n           s x = NoMsg;\n        t * k < t1; Suc t1 \\<noteq> t2\\<rbrakk>\n       \\<Longrightarrow> (t1 < t * k + k - Suc 0 \\<longrightarrow>\n                          (\\<forall>x.\n                              x \\<in> [Suc\n  t1\\<dots>,t * k + k - Suc (Suc t1)] \\<longrightarrow>\n                              s x = NoMsg)) \\<and>\n                         (\\<not> t1 < t * k + k - Suc 0 \\<longrightarrow>\n                          t1 = t * k + k - Suc 0)", "apply (rule ccontr)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>t1 t2.\n       \\<lbrakk>Suc 0 < k; s t1 \\<noteq> NoMsg;\n        \\<And>t. event t = (t mod k = k - Suc 0); t0 = t * k;\n        t * k < t * k + k - Suc 0; t1 mod k \\<noteq> k - Suc 0; m = s t1;\n        \\<forall>x.\n           t * k \\<le> x \\<and> x \\<le> t1 - Suc 0 \\<longrightarrow>\n           x mod k \\<noteq> k - Suc 0;\n        Suc t1 mod k = k - Suc 0; s (Suc t1) = NoMsg; t * k < t1;\n        t2 = Suc t1; t1 \\<le> t * k + k - Suc 0; t1 < t * k + k - Suc 0;\n        \\<not> t * k + (k - Suc 0) \\<le> Suc t1\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>t1 t2.\n       \\<lbrakk>Suc 0 < k; s t1 \\<noteq> NoMsg;\n        \\<And>t. event t = (t mod k = k - Suc 0); t0 = t * k;\n        t * k < t * k + k - Suc 0; t1 mod k \\<noteq> k - Suc 0; m = s t1;\n        \\<forall>x.\n           t * k \\<le> x \\<and> x \\<le> t1 - Suc 0 \\<longrightarrow>\n           x mod k \\<noteq> k - Suc 0;\n        Suc t1 mod k = k - Suc 0; s (Suc t1) = NoMsg; t * k < t1;\n        t2 = Suc t1; t1 \\<le> t * k + k - Suc 0; t1 < t * k + k - Suc 0;\n        t * k + (k - Suc 0) \\<le> Suc t1\\<rbrakk>\n       \\<Longrightarrow> Suc t1 = t * k + k - Suc 0\n 3. \\<And>t1 t2.\n       \\<lbrakk>Suc 0 < k; s t1 \\<noteq> NoMsg;\n        \\<And>t. event t = (t mod k = k - Suc 0); t0 = t * k;\n        t * k < t * k + k - Suc 0; t1 mod k \\<noteq> k - Suc 0; m = s t1;\n        \\<forall>x.\n           t * k \\<le> x \\<and> x \\<le> t1 - Suc 0 \\<longrightarrow>\n           x mod k \\<noteq> k - Suc 0;\n        Suc t1 mod k = k - Suc 0; s (Suc t1) = NoMsg; t * k < t1;\n        t2 = Suc t1; t1 \\<le> t * k + k - Suc 0;\n        \\<not> t1 < t * k + k - Suc 0\\<rbrakk>\n       \\<Longrightarrow> t1 = t * k + k - Suc 0\n 4. \\<And>t1 t2.\n       \\<lbrakk>Suc 0 < k; s t1 \\<noteq> NoMsg;\n        \\<And>t. event t = (t mod k = k - Suc 0); t0 = t * k;\n        t * k < t * k + k - Suc 0; t1 mod k \\<noteq> k - Suc 0; m = s t1;\n        \\<forall>x.\n           x \\<in> [t * k\\<dots>,t1 - Suc (t * k)] \\<longrightarrow>\n           x mod k \\<noteq> k - Suc 0;\n        Suc t1 \\<le> t2; t2 mod k = k - Suc 0; s t2 = NoMsg;\n        \\<forall>x.\n           x \\<in> (if t2 = Suc t1 then {}\n                    else [0 +\n                          Suc t1\\<dots>,t2 -\n  Suc (0 + Suc t1)]) \\<longrightarrow>\n           s x = NoMsg;\n        t * k < t1; Suc t1 \\<noteq> t2\\<rbrakk>\n       \\<Longrightarrow> (t1 < t * k + k - Suc 0 \\<longrightarrow>\n                          (\\<forall>x.\n                              x \\<in> [Suc\n  t1\\<dots>,t * k + k - Suc (Suc t1)] \\<longrightarrow>\n                              s x = NoMsg)) \\<and>\n                         (\\<not> t1 < t * k + k - Suc 0 \\<longrightarrow>\n                          t1 = t * k + k - Suc 0)", "apply (subgoal_tac \"k - Suc 0 - Suc 0 < k\")"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>t1 t2.\n       \\<lbrakk>Suc 0 < k; s t1 \\<noteq> NoMsg;\n        \\<And>t. event t = (t mod k = k - Suc 0); t0 = t * k;\n        t * k < t * k + k - Suc 0; t1 mod k \\<noteq> k - Suc 0; m = s t1;\n        \\<forall>x.\n           t * k \\<le> x \\<and> x \\<le> t1 - Suc 0 \\<longrightarrow>\n           x mod k \\<noteq> k - Suc 0;\n        Suc t1 mod k = k - Suc 0; s (Suc t1) = NoMsg; t * k < t1;\n        t2 = Suc t1; t1 \\<le> t * k + k - Suc 0; t1 < t * k + k - Suc 0;\n        \\<not> t * k + (k - Suc 0) \\<le> Suc t1;\n        k - Suc 0 - Suc 0 < k\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>t1 t2.\n       \\<lbrakk>Suc 0 < k; s t1 \\<noteq> NoMsg;\n        \\<And>t. event t = (t mod k = k - Suc 0); t0 = t * k;\n        t * k < t * k + k - Suc 0; t1 mod k \\<noteq> k - Suc 0; m = s t1;\n        \\<forall>x.\n           t * k \\<le> x \\<and> x \\<le> t1 - Suc 0 \\<longrightarrow>\n           x mod k \\<noteq> k - Suc 0;\n        Suc t1 mod k = k - Suc 0; s (Suc t1) = NoMsg; t * k < t1;\n        t2 = Suc t1; t1 \\<le> t * k + k - Suc 0; t1 < t * k + k - Suc 0;\n        \\<not> t * k + (k - Suc 0) \\<le> Suc t1\\<rbrakk>\n       \\<Longrightarrow> k - Suc 0 - Suc 0 < k\n 3. \\<And>t1 t2.\n       \\<lbrakk>Suc 0 < k; s t1 \\<noteq> NoMsg;\n        \\<And>t. event t = (t mod k = k - Suc 0); t0 = t * k;\n        t * k < t * k + k - Suc 0; t1 mod k \\<noteq> k - Suc 0; m = s t1;\n        \\<forall>x.\n           t * k \\<le> x \\<and> x \\<le> t1 - Suc 0 \\<longrightarrow>\n           x mod k \\<noteq> k - Suc 0;\n        Suc t1 mod k = k - Suc 0; s (Suc t1) = NoMsg; t * k < t1;\n        t2 = Suc t1; t1 \\<le> t * k + k - Suc 0; t1 < t * k + k - Suc 0;\n        t * k + (k - Suc 0) \\<le> Suc t1\\<rbrakk>\n       \\<Longrightarrow> Suc t1 = t * k + k - Suc 0\n 4. \\<And>t1 t2.\n       \\<lbrakk>Suc 0 < k; s t1 \\<noteq> NoMsg;\n        \\<And>t. event t = (t mod k = k - Suc 0); t0 = t * k;\n        t * k < t * k + k - Suc 0; t1 mod k \\<noteq> k - Suc 0; m = s t1;\n        \\<forall>x.\n           t * k \\<le> x \\<and> x \\<le> t1 - Suc 0 \\<longrightarrow>\n           x mod k \\<noteq> k - Suc 0;\n        Suc t1 mod k = k - Suc 0; s (Suc t1) = NoMsg; t * k < t1;\n        t2 = Suc t1; t1 \\<le> t * k + k - Suc 0;\n        \\<not> t1 < t * k + k - Suc 0\\<rbrakk>\n       \\<Longrightarrow> t1 = t * k + k - Suc 0\n 5. \\<And>t1 t2.\n       \\<lbrakk>Suc 0 < k; s t1 \\<noteq> NoMsg;\n        \\<And>t. event t = (t mod k = k - Suc 0); t0 = t * k;\n        t * k < t * k + k - Suc 0; t1 mod k \\<noteq> k - Suc 0; m = s t1;\n        \\<forall>x.\n           x \\<in> [t * k\\<dots>,t1 - Suc (t * k)] \\<longrightarrow>\n           x mod k \\<noteq> k - Suc 0;\n        Suc t1 \\<le> t2; t2 mod k = k - Suc 0; s t2 = NoMsg;\n        \\<forall>x.\n           x \\<in> (if t2 = Suc t1 then {}\n                    else [0 +\n                          Suc t1\\<dots>,t2 -\n  Suc (0 + Suc t1)]) \\<longrightarrow>\n           s x = NoMsg;\n        t * k < t1; Suc t1 \\<noteq> t2\\<rbrakk>\n       \\<Longrightarrow> (t1 < t * k + k - Suc 0 \\<longrightarrow>\n                          (\\<forall>x.\n                              x \\<in> [Suc\n  t1\\<dots>,t * k + k - Suc (Suc t1)] \\<longrightarrow>\n                              s x = NoMsg)) \\<and>\n                         (\\<not> t1 < t * k + k - Suc 0 \\<longrightarrow>\n                          t1 = t * k + k - Suc 0)", "prefer 2"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>t1 t2.\n       \\<lbrakk>Suc 0 < k; s t1 \\<noteq> NoMsg;\n        \\<And>t. event t = (t mod k = k - Suc 0); t0 = t * k;\n        t * k < t * k + k - Suc 0; t1 mod k \\<noteq> k - Suc 0; m = s t1;\n        \\<forall>x.\n           t * k \\<le> x \\<and> x \\<le> t1 - Suc 0 \\<longrightarrow>\n           x mod k \\<noteq> k - Suc 0;\n        Suc t1 mod k = k - Suc 0; s (Suc t1) = NoMsg; t * k < t1;\n        t2 = Suc t1; t1 \\<le> t * k + k - Suc 0; t1 < t * k + k - Suc 0;\n        \\<not> t * k + (k - Suc 0) \\<le> Suc t1\\<rbrakk>\n       \\<Longrightarrow> k - Suc 0 - Suc 0 < k\n 2. \\<And>t1 t2.\n       \\<lbrakk>Suc 0 < k; s t1 \\<noteq> NoMsg;\n        \\<And>t. event t = (t mod k = k - Suc 0); t0 = t * k;\n        t * k < t * k + k - Suc 0; t1 mod k \\<noteq> k - Suc 0; m = s t1;\n        \\<forall>x.\n           t * k \\<le> x \\<and> x \\<le> t1 - Suc 0 \\<longrightarrow>\n           x mod k \\<noteq> k - Suc 0;\n        Suc t1 mod k = k - Suc 0; s (Suc t1) = NoMsg; t * k < t1;\n        t2 = Suc t1; t1 \\<le> t * k + k - Suc 0; t1 < t * k + k - Suc 0;\n        \\<not> t * k + (k - Suc 0) \\<le> Suc t1;\n        k - Suc 0 - Suc 0 < k\\<rbrakk>\n       \\<Longrightarrow> False\n 3. \\<And>t1 t2.\n       \\<lbrakk>Suc 0 < k; s t1 \\<noteq> NoMsg;\n        \\<And>t. event t = (t mod k = k - Suc 0); t0 = t * k;\n        t * k < t * k + k - Suc 0; t1 mod k \\<noteq> k - Suc 0; m = s t1;\n        \\<forall>x.\n           t * k \\<le> x \\<and> x \\<le> t1 - Suc 0 \\<longrightarrow>\n           x mod k \\<noteq> k - Suc 0;\n        Suc t1 mod k = k - Suc 0; s (Suc t1) = NoMsg; t * k < t1;\n        t2 = Suc t1; t1 \\<le> t * k + k - Suc 0; t1 < t * k + k - Suc 0;\n        t * k + (k - Suc 0) \\<le> Suc t1\\<rbrakk>\n       \\<Longrightarrow> Suc t1 = t * k + k - Suc 0\n 4. \\<And>t1 t2.\n       \\<lbrakk>Suc 0 < k; s t1 \\<noteq> NoMsg;\n        \\<And>t. event t = (t mod k = k - Suc 0); t0 = t * k;\n        t * k < t * k + k - Suc 0; t1 mod k \\<noteq> k - Suc 0; m = s t1;\n        \\<forall>x.\n           t * k \\<le> x \\<and> x \\<le> t1 - Suc 0 \\<longrightarrow>\n           x mod k \\<noteq> k - Suc 0;\n        Suc t1 mod k = k - Suc 0; s (Suc t1) = NoMsg; t * k < t1;\n        t2 = Suc t1; t1 \\<le> t * k + k - Suc 0;\n        \\<not> t1 < t * k + k - Suc 0\\<rbrakk>\n       \\<Longrightarrow> t1 = t * k + k - Suc 0\n 5. \\<And>t1 t2.\n       \\<lbrakk>Suc 0 < k; s t1 \\<noteq> NoMsg;\n        \\<And>t. event t = (t mod k = k - Suc 0); t0 = t * k;\n        t * k < t * k + k - Suc 0; t1 mod k \\<noteq> k - Suc 0; m = s t1;\n        \\<forall>x.\n           x \\<in> [t * k\\<dots>,t1 - Suc (t * k)] \\<longrightarrow>\n           x mod k \\<noteq> k - Suc 0;\n        Suc t1 \\<le> t2; t2 mod k = k - Suc 0; s t2 = NoMsg;\n        \\<forall>x.\n           x \\<in> (if t2 = Suc t1 then {}\n                    else [0 +\n                          Suc t1\\<dots>,t2 -\n  Suc (0 + Suc t1)]) \\<longrightarrow>\n           s x = NoMsg;\n        t * k < t1; Suc t1 \\<noteq> t2\\<rbrakk>\n       \\<Longrightarrow> (t1 < t * k + k - Suc 0 \\<longrightarrow>\n                          (\\<forall>x.\n                              x \\<in> [Suc\n  t1\\<dots>,t * k + k - Suc (Suc t1)] \\<longrightarrow>\n                              s x = NoMsg)) \\<and>\n                         (\\<not> t1 < t * k + k - Suc 0 \\<longrightarrow>\n                          t1 = t * k + k - Suc 0)", "apply simp"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>t1 t2.\n       \\<lbrakk>Suc 0 < k; s t1 \\<noteq> NoMsg;\n        \\<And>t. event t = (t mod k = k - Suc 0); t0 = t * k;\n        t * k < t * k + k - Suc 0; t1 mod k \\<noteq> k - Suc 0; m = s t1;\n        \\<forall>x.\n           t * k \\<le> x \\<and> x \\<le> t1 - Suc 0 \\<longrightarrow>\n           x mod k \\<noteq> k - Suc 0;\n        Suc t1 mod k = k - Suc 0; s (Suc t1) = NoMsg; t * k < t1;\n        t2 = Suc t1; t1 \\<le> t * k + k - Suc 0; t1 < t * k + k - Suc 0;\n        \\<not> t * k + (k - Suc 0) \\<le> Suc t1;\n        k - Suc 0 - Suc 0 < k\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>t1 t2.\n       \\<lbrakk>Suc 0 < k; s t1 \\<noteq> NoMsg;\n        \\<And>t. event t = (t mod k = k - Suc 0); t0 = t * k;\n        t * k < t * k + k - Suc 0; t1 mod k \\<noteq> k - Suc 0; m = s t1;\n        \\<forall>x.\n           t * k \\<le> x \\<and> x \\<le> t1 - Suc 0 \\<longrightarrow>\n           x mod k \\<noteq> k - Suc 0;\n        Suc t1 mod k = k - Suc 0; s (Suc t1) = NoMsg; t * k < t1;\n        t2 = Suc t1; t1 \\<le> t * k + k - Suc 0; t1 < t * k + k - Suc 0;\n        t * k + (k - Suc 0) \\<le> Suc t1\\<rbrakk>\n       \\<Longrightarrow> Suc t1 = t * k + k - Suc 0\n 3. \\<And>t1 t2.\n       \\<lbrakk>Suc 0 < k; s t1 \\<noteq> NoMsg;\n        \\<And>t. event t = (t mod k = k - Suc 0); t0 = t * k;\n        t * k < t * k + k - Suc 0; t1 mod k \\<noteq> k - Suc 0; m = s t1;\n        \\<forall>x.\n           t * k \\<le> x \\<and> x \\<le> t1 - Suc 0 \\<longrightarrow>\n           x mod k \\<noteq> k - Suc 0;\n        Suc t1 mod k = k - Suc 0; s (Suc t1) = NoMsg; t * k < t1;\n        t2 = Suc t1; t1 \\<le> t * k + k - Suc 0;\n        \\<not> t1 < t * k + k - Suc 0\\<rbrakk>\n       \\<Longrightarrow> t1 = t * k + k - Suc 0\n 4. \\<And>t1 t2.\n       \\<lbrakk>Suc 0 < k; s t1 \\<noteq> NoMsg;\n        \\<And>t. event t = (t mod k = k - Suc 0); t0 = t * k;\n        t * k < t * k + k - Suc 0; t1 mod k \\<noteq> k - Suc 0; m = s t1;\n        \\<forall>x.\n           x \\<in> [t * k\\<dots>,t1 - Suc (t * k)] \\<longrightarrow>\n           x mod k \\<noteq> k - Suc 0;\n        Suc t1 \\<le> t2; t2 mod k = k - Suc 0; s t2 = NoMsg;\n        \\<forall>x.\n           x \\<in> (if t2 = Suc t1 then {}\n                    else [0 +\n                          Suc t1\\<dots>,t2 -\n  Suc (0 + Suc t1)]) \\<longrightarrow>\n           s x = NoMsg;\n        t * k < t1; Suc t1 \\<noteq> t2\\<rbrakk>\n       \\<Longrightarrow> (t1 < t * k + k - Suc 0 \\<longrightarrow>\n                          (\\<forall>x.\n                              x \\<in> [Suc\n  t1\\<dots>,t * k + k - Suc (Suc t1)] \\<longrightarrow>\n                              s x = NoMsg)) \\<and>\n                         (\\<not> t1 < t * k + k - Suc 0 \\<longrightarrow>\n                          t1 = t * k + k - Suc 0)", "apply (simp only: mult.commute[of t])"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>t1 t2.\n       \\<lbrakk>Suc 0 < k; s t1 \\<noteq> NoMsg;\n        \\<And>t. event t = (t mod k = k - Suc 0); t0 = k * t;\n        k * t < k * t + k - Suc 0; t1 mod k \\<noteq> k - Suc 0; m = s t1;\n        \\<forall>x.\n           k * t \\<le> x \\<and> x \\<le> t1 - Suc 0 \\<longrightarrow>\n           x mod k \\<noteq> k - Suc 0;\n        Suc t1 mod k = k - Suc 0; s (Suc t1) = NoMsg; k * t < t1;\n        t2 = Suc t1; t1 \\<le> k * t + k - Suc 0; t1 < k * t + k - Suc 0;\n        \\<not> k * t + (k - Suc 0) \\<le> Suc t1;\n        k - Suc 0 - Suc 0 < k\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>t1 t2.\n       \\<lbrakk>Suc 0 < k; s t1 \\<noteq> NoMsg;\n        \\<And>t. event t = (t mod k = k - Suc 0); t0 = t * k;\n        t * k < t * k + k - Suc 0; t1 mod k \\<noteq> k - Suc 0; m = s t1;\n        \\<forall>x.\n           t * k \\<le> x \\<and> x \\<le> t1 - Suc 0 \\<longrightarrow>\n           x mod k \\<noteq> k - Suc 0;\n        Suc t1 mod k = k - Suc 0; s (Suc t1) = NoMsg; t * k < t1;\n        t2 = Suc t1; t1 \\<le> t * k + k - Suc 0; t1 < t * k + k - Suc 0;\n        t * k + (k - Suc 0) \\<le> Suc t1\\<rbrakk>\n       \\<Longrightarrow> Suc t1 = t * k + k - Suc 0\n 3. \\<And>t1 t2.\n       \\<lbrakk>Suc 0 < k; s t1 \\<noteq> NoMsg;\n        \\<And>t. event t = (t mod k = k - Suc 0); t0 = t * k;\n        t * k < t * k + k - Suc 0; t1 mod k \\<noteq> k - Suc 0; m = s t1;\n        \\<forall>x.\n           t * k \\<le> x \\<and> x \\<le> t1 - Suc 0 \\<longrightarrow>\n           x mod k \\<noteq> k - Suc 0;\n        Suc t1 mod k = k - Suc 0; s (Suc t1) = NoMsg; t * k < t1;\n        t2 = Suc t1; t1 \\<le> t * k + k - Suc 0;\n        \\<not> t1 < t * k + k - Suc 0\\<rbrakk>\n       \\<Longrightarrow> t1 = t * k + k - Suc 0\n 4. \\<And>t1 t2.\n       \\<lbrakk>Suc 0 < k; s t1 \\<noteq> NoMsg;\n        \\<And>t. event t = (t mod k = k - Suc 0); t0 = t * k;\n        t * k < t * k + k - Suc 0; t1 mod k \\<noteq> k - Suc 0; m = s t1;\n        \\<forall>x.\n           x \\<in> [t * k\\<dots>,t1 - Suc (t * k)] \\<longrightarrow>\n           x mod k \\<noteq> k - Suc 0;\n        Suc t1 \\<le> t2; t2 mod k = k - Suc 0; s t2 = NoMsg;\n        \\<forall>x.\n           x \\<in> (if t2 = Suc t1 then {}\n                    else [0 +\n                          Suc t1\\<dots>,t2 -\n  Suc (0 + Suc t1)]) \\<longrightarrow>\n           s x = NoMsg;\n        t * k < t1; Suc t1 \\<noteq> t2\\<rbrakk>\n       \\<Longrightarrow> (t1 < t * k + k - Suc 0 \\<longrightarrow>\n                          (\\<forall>x.\n                              x \\<in> [Suc\n  t1\\<dots>,t * k + k - Suc (Suc t1)] \\<longrightarrow>\n                              s x = NoMsg)) \\<and>\n                         (\\<not> t1 < t * k + k - Suc 0 \\<longrightarrow>\n                          t1 = t * k + k - Suc 0)", "apply (drule_tac n=\"Suc t1\" in between_imp_mod_le[of \"k - Suc 0 - Suc 0\" k t])"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<And>t1 t2.\n       \\<lbrakk>Suc 0 < k; s t1 \\<noteq> NoMsg;\n        \\<And>t. event t = (t mod k = k - Suc 0); t0 = k * t;\n        k * t < k * t + k - Suc 0; t1 mod k \\<noteq> k - Suc 0; m = s t1;\n        \\<forall>x.\n           k * t \\<le> x \\<and> x \\<le> t1 - Suc 0 \\<longrightarrow>\n           x mod k \\<noteq> k - Suc 0;\n        Suc t1 mod k = k - Suc 0; s (Suc t1) = NoMsg; k * t < t1;\n        t2 = Suc t1; t1 \\<le> k * t + k - Suc 0; t1 < k * t + k - Suc 0;\n        \\<not> k * t + (k - Suc 0) \\<le> Suc t1\\<rbrakk>\n       \\<Longrightarrow> k * t \\<le> Suc t1\n 2. \\<And>t1 t2.\n       \\<lbrakk>Suc 0 < k; s t1 \\<noteq> NoMsg;\n        \\<And>t. event t = (t mod k = k - Suc 0); t0 = k * t;\n        k * t < k * t + k - Suc 0; t1 mod k \\<noteq> k - Suc 0; m = s t1;\n        \\<forall>x.\n           k * t \\<le> x \\<and> x \\<le> t1 - Suc 0 \\<longrightarrow>\n           x mod k \\<noteq> k - Suc 0;\n        Suc t1 mod k = k - Suc 0; s (Suc t1) = NoMsg; k * t < t1;\n        t2 = Suc t1; t1 \\<le> k * t + k - Suc 0; t1 < k * t + k - Suc 0;\n        \\<not> k * t + (k - Suc 0) \\<le> Suc t1\\<rbrakk>\n       \\<Longrightarrow> Suc t1 \\<le> k * t + (k - Suc 0 - Suc 0)\n 3. \\<And>t1 t2.\n       \\<lbrakk>Suc 0 < k; s t1 \\<noteq> NoMsg;\n        \\<And>t. event t = (t mod k = k - Suc 0); t0 = k * t;\n        k * t < k * t + k - Suc 0; t1 mod k \\<noteq> k - Suc 0; m = s t1;\n        \\<forall>x.\n           k * t \\<le> x \\<and> x \\<le> t1 - Suc 0 \\<longrightarrow>\n           x mod k \\<noteq> k - Suc 0;\n        Suc t1 mod k = k - Suc 0; s (Suc t1) = NoMsg; k * t < t1;\n        t2 = Suc t1; t1 \\<le> k * t + k - Suc 0; t1 < k * t + k - Suc 0;\n        \\<not> k * t + (k - Suc 0) \\<le> Suc t1;\n        Suc t1 mod k \\<le> k - Suc 0 - Suc 0\\<rbrakk>\n       \\<Longrightarrow> False\n 4. \\<And>t1 t2.\n       \\<lbrakk>Suc 0 < k; s t1 \\<noteq> NoMsg;\n        \\<And>t. event t = (t mod k = k - Suc 0); t0 = t * k;\n        t * k < t * k + k - Suc 0; t1 mod k \\<noteq> k - Suc 0; m = s t1;\n        \\<forall>x.\n           t * k \\<le> x \\<and> x \\<le> t1 - Suc 0 \\<longrightarrow>\n           x mod k \\<noteq> k - Suc 0;\n        Suc t1 mod k = k - Suc 0; s (Suc t1) = NoMsg; t * k < t1;\n        t2 = Suc t1; t1 \\<le> t * k + k - Suc 0; t1 < t * k + k - Suc 0;\n        t * k + (k - Suc 0) \\<le> Suc t1\\<rbrakk>\n       \\<Longrightarrow> Suc t1 = t * k + k - Suc 0\n 5. \\<And>t1 t2.\n       \\<lbrakk>Suc 0 < k; s t1 \\<noteq> NoMsg;\n        \\<And>t. event t = (t mod k = k - Suc 0); t0 = t * k;\n        t * k < t * k + k - Suc 0; t1 mod k \\<noteq> k - Suc 0; m = s t1;\n        \\<forall>x.\n           t * k \\<le> x \\<and> x \\<le> t1 - Suc 0 \\<longrightarrow>\n           x mod k \\<noteq> k - Suc 0;\n        Suc t1 mod k = k - Suc 0; s (Suc t1) = NoMsg; t * k < t1;\n        t2 = Suc t1; t1 \\<le> t * k + k - Suc 0;\n        \\<not> t1 < t * k + k - Suc 0\\<rbrakk>\n       \\<Longrightarrow> t1 = t * k + k - Suc 0\n 6. \\<And>t1 t2.\n       \\<lbrakk>Suc 0 < k; s t1 \\<noteq> NoMsg;\n        \\<And>t. event t = (t mod k = k - Suc 0); t0 = t * k;\n        t * k < t * k + k - Suc 0; t1 mod k \\<noteq> k - Suc 0; m = s t1;\n        \\<forall>x.\n           x \\<in> [t * k\\<dots>,t1 - Suc (t * k)] \\<longrightarrow>\n           x mod k \\<noteq> k - Suc 0;\n        Suc t1 \\<le> t2; t2 mod k = k - Suc 0; s t2 = NoMsg;\n        \\<forall>x.\n           x \\<in> (if t2 = Suc t1 then {}\n                    else [0 +\n                          Suc t1\\<dots>,t2 -\n  Suc (0 + Suc t1)]) \\<longrightarrow>\n           s x = NoMsg;\n        t * k < t1; Suc t1 \\<noteq> t2\\<rbrakk>\n       \\<Longrightarrow> (t1 < t * k + k - Suc 0 \\<longrightarrow>\n                          (\\<forall>x.\n                              x \\<in> [Suc\n  t1\\<dots>,t * k + k - Suc (Suc t1)] \\<longrightarrow>\n                              s x = NoMsg)) \\<and>\n                         (\\<not> t1 < t * k + k - Suc 0 \\<longrightarrow>\n                          t1 = t * k + k - Suc 0)", "apply simp_all"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>t1 t2.\n       \\<lbrakk>Suc 0 < k; s t1 \\<noteq> NoMsg;\n        \\<And>t. event t = (t mod k = k - Suc 0); t0 = t * k;\n        t * k < t * k + k - Suc 0; t1 mod k \\<noteq> k - Suc 0; m = s t1;\n        \\<forall>x.\n           x \\<in> [t * k\\<dots>,t1 - Suc (t * k)] \\<longrightarrow>\n           x mod k \\<noteq> k - Suc 0;\n        Suc t1 \\<le> t2; t2 mod k = k - Suc 0; s t2 = NoMsg;\n        \\<forall>x.\n           x \\<in> [Suc t1\\<dots>,t2 - Suc (Suc t1)] \\<longrightarrow>\n           s x = NoMsg;\n        t * k < t1; Suc t1 \\<noteq> t2\\<rbrakk>\n       \\<Longrightarrow> (t1 < t * k + k - Suc 0 \\<longrightarrow>\n                          (\\<forall>x.\n                              x \\<in> [Suc\n  t1\\<dots>,t * k + k - Suc (Suc t1)] \\<longrightarrow>\n                              s x = NoMsg)) \\<and>\n                         (\\<not> t1 < t * k + k - Suc 0 \\<longrightarrow>\n                          t1 = t * k + k - Suc 0)", "apply (simp add: iIN_iff)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>t1 t2.\n       \\<lbrakk>Suc 0 < k; s t1 \\<noteq> NoMsg;\n        \\<And>t. event t = (t mod k = k - Suc 0); t0 = t * k;\n        t * k < t * k + k - Suc 0; t1 mod k \\<noteq> k - Suc 0; m = s t1;\n        \\<forall>x.\n           t * k \\<le> x \\<and> x \\<le> t1 - Suc 0 \\<longrightarrow>\n           x mod k \\<noteq> k - Suc 0;\n        Suc t1 \\<le> t2; t2 mod k = k - Suc 0; s t2 = NoMsg;\n        \\<forall>x.\n           Suc t1 \\<le> x \\<and> x \\<le> Suc (t2 - 2) \\<longrightarrow>\n           s x = NoMsg;\n        t * k < t1; Suc t1 \\<noteq> t2\\<rbrakk>\n       \\<Longrightarrow> (t1 < t * k + k - Suc 0 \\<longrightarrow>\n                          (\\<forall>x.\n                              Suc t1 \\<le> x \\<and>\n                              x \\<le> Suc (t * k + k - 2) \\<longrightarrow>\n                              s x = NoMsg)) \\<and>\n                         (\\<not> t1 < t * k + k - Suc 0 \\<longrightarrow>\n                          t1 = t * k + k - Suc 0)", "apply (subgoal_tac \"t1 \\<le> t * k + k - Suc 0\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>t1 t2.\n       \\<lbrakk>Suc 0 < k; s t1 \\<noteq> NoMsg;\n        \\<And>t. event t = (t mod k = k - Suc 0); t0 = t * k;\n        t * k < t * k + k - Suc 0; t1 mod k \\<noteq> k - Suc 0; m = s t1;\n        \\<forall>x.\n           t * k \\<le> x \\<and> x \\<le> t1 - Suc 0 \\<longrightarrow>\n           x mod k \\<noteq> k - Suc 0;\n        Suc t1 \\<le> t2; t2 mod k = k - Suc 0; s t2 = NoMsg;\n        \\<forall>x.\n           Suc t1 \\<le> x \\<and> x \\<le> Suc (t2 - 2) \\<longrightarrow>\n           s x = NoMsg;\n        t * k < t1; Suc t1 \\<noteq> t2; t1 \\<le> t * k + k - Suc 0\\<rbrakk>\n       \\<Longrightarrow> (t1 < t * k + k - Suc 0 \\<longrightarrow>\n                          (\\<forall>x.\n                              Suc t1 \\<le> x \\<and>\n                              x \\<le> Suc (t * k + k - 2) \\<longrightarrow>\n                              s x = NoMsg)) \\<and>\n                         (\\<not> t1 < t * k + k - Suc 0 \\<longrightarrow>\n                          t1 = t * k + k - Suc 0)\n 2. \\<And>t1 t2.\n       \\<lbrakk>Suc 0 < k; s t1 \\<noteq> NoMsg;\n        \\<And>t. event t = (t mod k = k - Suc 0); t0 = t * k;\n        t * k < t * k + k - Suc 0; t1 mod k \\<noteq> k - Suc 0; m = s t1;\n        \\<forall>x.\n           t * k \\<le> x \\<and> x \\<le> t1 - Suc 0 \\<longrightarrow>\n           x mod k \\<noteq> k - Suc 0;\n        Suc t1 \\<le> t2; t2 mod k = k - Suc 0; s t2 = NoMsg;\n        \\<forall>x.\n           Suc t1 \\<le> x \\<and> x \\<le> Suc (t2 - 2) \\<longrightarrow>\n           s x = NoMsg;\n        t * k < t1; Suc t1 \\<noteq> t2\\<rbrakk>\n       \\<Longrightarrow> t1 \\<le> t * k + k - Suc 0", "prefer 2"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>t1 t2.\n       \\<lbrakk>Suc 0 < k; s t1 \\<noteq> NoMsg;\n        \\<And>t. event t = (t mod k = k - Suc 0); t0 = t * k;\n        t * k < t * k + k - Suc 0; t1 mod k \\<noteq> k - Suc 0; m = s t1;\n        \\<forall>x.\n           t * k \\<le> x \\<and> x \\<le> t1 - Suc 0 \\<longrightarrow>\n           x mod k \\<noteq> k - Suc 0;\n        Suc t1 \\<le> t2; t2 mod k = k - Suc 0; s t2 = NoMsg;\n        \\<forall>x.\n           Suc t1 \\<le> x \\<and> x \\<le> Suc (t2 - 2) \\<longrightarrow>\n           s x = NoMsg;\n        t * k < t1; Suc t1 \\<noteq> t2\\<rbrakk>\n       \\<Longrightarrow> t1 \\<le> t * k + k - Suc 0\n 2. \\<And>t1 t2.\n       \\<lbrakk>Suc 0 < k; s t1 \\<noteq> NoMsg;\n        \\<And>t. event t = (t mod k = k - Suc 0); t0 = t * k;\n        t * k < t * k + k - Suc 0; t1 mod k \\<noteq> k - Suc 0; m = s t1;\n        \\<forall>x.\n           t * k \\<le> x \\<and> x \\<le> t1 - Suc 0 \\<longrightarrow>\n           x mod k \\<noteq> k - Suc 0;\n        Suc t1 \\<le> t2; t2 mod k = k - Suc 0; s t2 = NoMsg;\n        \\<forall>x.\n           Suc t1 \\<le> x \\<and> x \\<le> Suc (t2 - 2) \\<longrightarrow>\n           s x = NoMsg;\n        t * k < t1; Suc t1 \\<noteq> t2; t1 \\<le> t * k + k - Suc 0\\<rbrakk>\n       \\<Longrightarrow> (t1 < t * k + k - Suc 0 \\<longrightarrow>\n                          (\\<forall>x.\n                              Suc t1 \\<le> x \\<and>\n                              x \\<le> Suc (t * k + k - 2) \\<longrightarrow>\n                              s x = NoMsg)) \\<and>\n                         (\\<not> t1 < t * k + k - Suc 0 \\<longrightarrow>\n                          t1 = t * k + k - Suc 0)", "apply (rule ccontr)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>t1 t2.\n       \\<lbrakk>Suc 0 < k; s t1 \\<noteq> NoMsg;\n        \\<And>t. event t = (t mod k = k - Suc 0); t0 = t * k;\n        t * k < t * k + k - Suc 0; t1 mod k \\<noteq> k - Suc 0; m = s t1;\n        \\<forall>x.\n           t * k \\<le> x \\<and> x \\<le> t1 - Suc 0 \\<longrightarrow>\n           x mod k \\<noteq> k - Suc 0;\n        Suc t1 \\<le> t2; t2 mod k = k - Suc 0; s t2 = NoMsg;\n        \\<forall>x.\n           Suc t1 \\<le> x \\<and> x \\<le> Suc (t2 - 2) \\<longrightarrow>\n           s x = NoMsg;\n        t * k < t1; Suc t1 \\<noteq> t2;\n        \\<not> t1 \\<le> t * k + k - Suc 0\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>t1 t2.\n       \\<lbrakk>Suc 0 < k; s t1 \\<noteq> NoMsg;\n        \\<And>t. event t = (t mod k = k - Suc 0); t0 = t * k;\n        t * k < t * k + k - Suc 0; t1 mod k \\<noteq> k - Suc 0; m = s t1;\n        \\<forall>x.\n           t * k \\<le> x \\<and> x \\<le> t1 - Suc 0 \\<longrightarrow>\n           x mod k \\<noteq> k - Suc 0;\n        Suc t1 \\<le> t2; t2 mod k = k - Suc 0; s t2 = NoMsg;\n        \\<forall>x.\n           Suc t1 \\<le> x \\<and> x \\<le> Suc (t2 - 2) \\<longrightarrow>\n           s x = NoMsg;\n        t * k < t1; Suc t1 \\<noteq> t2; t1 \\<le> t * k + k - Suc 0\\<rbrakk>\n       \\<Longrightarrow> (t1 < t * k + k - Suc 0 \\<longrightarrow>\n                          (\\<forall>x.\n                              Suc t1 \\<le> x \\<and>\n                              x \\<le> Suc (t * k + k - 2) \\<longrightarrow>\n                              s x = NoMsg)) \\<and>\n                         (\\<not> t1 < t * k + k - Suc 0 \\<longrightarrow>\n                          t1 = t * k + k - Suc 0)", "apply (drule_tac x=\"t * k + k - Suc 0\" in spec)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>t1 t2.\n       \\<lbrakk>Suc 0 < k; s t1 \\<noteq> NoMsg;\n        \\<And>t. event t = (t mod k = k - Suc 0); t0 = t * k;\n        t * k < t * k + k - Suc 0; t1 mod k \\<noteq> k - Suc 0; m = s t1;\n        Suc t1 \\<le> t2; t2 mod k = k - Suc 0; s t2 = NoMsg;\n        \\<forall>x.\n           Suc t1 \\<le> x \\<and> x \\<le> Suc (t2 - 2) \\<longrightarrow>\n           s x = NoMsg;\n        t * k < t1; Suc t1 \\<noteq> t2; \\<not> t1 \\<le> t * k + k - Suc 0;\n        t * k \\<le> t * k + k - Suc 0 \\<and>\n        t * k + k - Suc 0 \\<le> t1 - Suc 0 \\<longrightarrow>\n        (t * k + k - Suc 0) mod k \\<noteq> k - Suc 0\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>t1 t2.\n       \\<lbrakk>Suc 0 < k; s t1 \\<noteq> NoMsg;\n        \\<And>t. event t = (t mod k = k - Suc 0); t0 = t * k;\n        t * k < t * k + k - Suc 0; t1 mod k \\<noteq> k - Suc 0; m = s t1;\n        \\<forall>x.\n           t * k \\<le> x \\<and> x \\<le> t1 - Suc 0 \\<longrightarrow>\n           x mod k \\<noteq> k - Suc 0;\n        Suc t1 \\<le> t2; t2 mod k = k - Suc 0; s t2 = NoMsg;\n        \\<forall>x.\n           Suc t1 \\<le> x \\<and> x \\<le> Suc (t2 - 2) \\<longrightarrow>\n           s x = NoMsg;\n        t * k < t1; Suc t1 \\<noteq> t2; t1 \\<le> t * k + k - Suc 0\\<rbrakk>\n       \\<Longrightarrow> (t1 < t * k + k - Suc 0 \\<longrightarrow>\n                          (\\<forall>x.\n                              Suc t1 \\<le> x \\<and>\n                              x \\<le> Suc (t * k + k - 2) \\<longrightarrow>\n                              s x = NoMsg)) \\<and>\n                         (\\<not> t1 < t * k + k - Suc 0 \\<longrightarrow>\n                          t1 = t * k + k - Suc 0)", "apply (simp add: mod_pred)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>t1 t2.\n       \\<lbrakk>Suc 0 < k; s t1 \\<noteq> NoMsg;\n        \\<And>t. event t = (t mod k = k - Suc 0); t0 = t * k;\n        t * k < t * k + k - Suc 0; t1 mod k \\<noteq> k - Suc 0; m = s t1;\n        \\<forall>x.\n           t * k \\<le> x \\<and> x \\<le> t1 - Suc 0 \\<longrightarrow>\n           x mod k \\<noteq> k - Suc 0;\n        Suc t1 \\<le> t2; t2 mod k = k - Suc 0; s t2 = NoMsg;\n        \\<forall>x.\n           Suc t1 \\<le> x \\<and> x \\<le> Suc (t2 - 2) \\<longrightarrow>\n           s x = NoMsg;\n        t * k < t1; Suc t1 \\<noteq> t2; t1 \\<le> t * k + k - Suc 0\\<rbrakk>\n       \\<Longrightarrow> (t1 < t * k + k - Suc 0 \\<longrightarrow>\n                          (\\<forall>x.\n                              Suc t1 \\<le> x \\<and>\n                              x \\<le> Suc (t * k + k - 2) \\<longrightarrow>\n                              s x = NoMsg)) \\<and>\n                         (\\<not> t1 < t * k + k - Suc 0 \\<longrightarrow>\n                          t1 = t * k + k - Suc 0)", "apply (clarsimp, rename_tac t3)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>t1 t2 t3.\n       \\<lbrakk>Suc 0 < k; s t1 \\<noteq> NoMsg;\n        \\<And>t. event t = (t mod k = k - Suc 0); t0 = t * k;\n        t1 mod k \\<noteq> k - Suc 0; m = s t1;\n        \\<forall>x.\n           t * k \\<le> x \\<and> x \\<le> t1 - Suc 0 \\<longrightarrow>\n           x mod k \\<noteq> k - Suc 0;\n        Suc t1 \\<le> t2; t2 mod k = k - Suc 0; s t2 = NoMsg;\n        \\<forall>x.\n           Suc t1 \\<le> x \\<and> x \\<le> Suc (t2 - 2) \\<longrightarrow>\n           s x = NoMsg;\n        t * k < t1; Suc t1 \\<noteq> t2; t1 < t * k + k - Suc 0;\n        Suc t1 \\<le> t3; t3 \\<le> Suc (t * k + k - 2)\\<rbrakk>\n       \\<Longrightarrow> s t3 = NoMsg", "apply (thin_tac \"All (\\<lambda>x. A x \\<longrightarrow> B (x mod k))\" for A B)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>t1 t2 t3.\n       \\<lbrakk>Suc 0 < k; s t1 \\<noteq> NoMsg;\n        \\<And>t. event t = (t mod k = k - Suc 0); t0 = t * k;\n        t1 mod k \\<noteq> k - Suc 0; m = s t1; Suc t1 \\<le> t2;\n        t2 mod k = k - Suc 0; s t2 = NoMsg;\n        \\<forall>x.\n           Suc t1 \\<le> x \\<and> x \\<le> Suc (t2 - 2) \\<longrightarrow>\n           s x = NoMsg;\n        t * k < t1; Suc t1 \\<noteq> t2; t1 < t * k + k - Suc 0;\n        Suc t1 \\<le> t3; t3 \\<le> Suc (t * k + k - 2)\\<rbrakk>\n       \\<Longrightarrow> s t3 = NoMsg", "apply (drule_tac x=t3 in spec)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>t1 t2 t3.\n       \\<lbrakk>Suc 0 < k; s t1 \\<noteq> NoMsg;\n        \\<And>t. event t = (t mod k = k - Suc 0); t0 = t * k;\n        t1 mod k \\<noteq> k - Suc 0; m = s t1; Suc t1 \\<le> t2;\n        t2 mod k = k - Suc 0; s t2 = NoMsg; t * k < t1; Suc t1 \\<noteq> t2;\n        t1 < t * k + k - Suc 0; Suc t1 \\<le> t3;\n        t3 \\<le> Suc (t * k + k - 2);\n        Suc t1 \\<le> t3 \\<and> t3 \\<le> Suc (t2 - 2) \\<longrightarrow>\n        s t3 = NoMsg\\<rbrakk>\n       \\<Longrightarrow> s t3 = NoMsg", "apply (subgoal_tac \"t3 \\<le> t2 \\<Longrightarrow> s t3 = \\<NoMsg>\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>t1 t2 t3.\n       \\<lbrakk>Suc 0 < k; s t1 \\<noteq> NoMsg;\n        \\<And>t. event t = (t mod k = k - Suc 0); t0 = t * k;\n        t1 mod k \\<noteq> k - Suc 0; m = s t1; Suc t1 \\<le> t2;\n        t2 mod k = k - Suc 0; s t2 = NoMsg; t * k < t1; Suc t1 \\<noteq> t2;\n        t1 < t * k + k - Suc 0; Suc t1 \\<le> t3;\n        t3 \\<le> Suc (t * k + k - 2);\n        Suc t1 \\<le> t3 \\<and> t3 \\<le> Suc (t2 - 2) \\<longrightarrow>\n        s t3 = NoMsg;\n        t3 \\<le> t2 \\<Longrightarrow> s t3 = NoMsg\\<rbrakk>\n       \\<Longrightarrow> s t3 = NoMsg\n 2. \\<And>t1 t2 t3.\n       \\<lbrakk>Suc 0 < k; s t1 \\<noteq> NoMsg;\n        \\<And>t. event t = (t mod k = k - Suc 0); t0 = t * k;\n        t1 mod k \\<noteq> k - Suc 0; m = s t1; Suc t1 \\<le> t2;\n        t2 mod k = k - Suc 0; s t2 = NoMsg; t * k < t1; Suc t1 \\<noteq> t2;\n        t1 < t * k + k - Suc 0; Suc t1 \\<le> t3;\n        t3 \\<le> Suc (t * k + k - 2);\n        Suc t1 \\<le> t3 \\<and> t3 \\<le> Suc (t2 - 2) \\<longrightarrow>\n        s t3 = NoMsg;\n        t3 \\<le> t2\\<rbrakk>\n       \\<Longrightarrow> s t3 = NoMsg", "prefer 2"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>t1 t2 t3.\n       \\<lbrakk>Suc 0 < k; s t1 \\<noteq> NoMsg;\n        \\<And>t. event t = (t mod k = k - Suc 0); t0 = t * k;\n        t1 mod k \\<noteq> k - Suc 0; m = s t1; Suc t1 \\<le> t2;\n        t2 mod k = k - Suc 0; s t2 = NoMsg; t * k < t1; Suc t1 \\<noteq> t2;\n        t1 < t * k + k - Suc 0; Suc t1 \\<le> t3;\n        t3 \\<le> Suc (t * k + k - 2);\n        Suc t1 \\<le> t3 \\<and> t3 \\<le> Suc (t2 - 2) \\<longrightarrow>\n        s t3 = NoMsg;\n        t3 \\<le> t2\\<rbrakk>\n       \\<Longrightarrow> s t3 = NoMsg\n 2. \\<And>t1 t2 t3.\n       \\<lbrakk>Suc 0 < k; s t1 \\<noteq> NoMsg;\n        \\<And>t. event t = (t mod k = k - Suc 0); t0 = t * k;\n        t1 mod k \\<noteq> k - Suc 0; m = s t1; Suc t1 \\<le> t2;\n        t2 mod k = k - Suc 0; s t2 = NoMsg; t * k < t1; Suc t1 \\<noteq> t2;\n        t1 < t * k + k - Suc 0; Suc t1 \\<le> t3;\n        t3 \\<le> Suc (t * k + k - 2);\n        Suc t1 \\<le> t3 \\<and> t3 \\<le> Suc (t2 - 2) \\<longrightarrow>\n        s t3 = NoMsg;\n        t3 \\<le> t2 \\<Longrightarrow> s t3 = NoMsg\\<rbrakk>\n       \\<Longrightarrow> s t3 = NoMsg", "apply (drule_tac x=t3 and y=t2 in order_le_imp_less_or_eq, erule disjE)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>t1 t2 t3.\n       \\<lbrakk>Suc 0 < k; s t1 \\<noteq> NoMsg;\n        \\<And>t. event t = (t mod k = k - Suc 0); t0 = t * k;\n        t1 mod k \\<noteq> k - Suc 0; m = s t1; Suc t1 \\<le> t2;\n        t2 mod k = k - Suc 0; s t2 = NoMsg; t * k < t1; Suc t1 \\<noteq> t2;\n        t1 < t * k + k - Suc 0; Suc t1 \\<le> t3;\n        t3 \\<le> Suc (t * k + k - 2);\n        Suc t1 \\<le> t3 \\<and> t3 \\<le> Suc (t2 - 2) \\<longrightarrow>\n        s t3 = NoMsg;\n        t3 < t2\\<rbrakk>\n       \\<Longrightarrow> s t3 = NoMsg\n 2. \\<And>t1 t2 t3.\n       \\<lbrakk>Suc 0 < k; s t1 \\<noteq> NoMsg;\n        \\<And>t. event t = (t mod k = k - Suc 0); t0 = t * k;\n        t1 mod k \\<noteq> k - Suc 0; m = s t1; Suc t1 \\<le> t2;\n        t2 mod k = k - Suc 0; s t2 = NoMsg; t * k < t1; Suc t1 \\<noteq> t2;\n        t1 < t * k + k - Suc 0; Suc t1 \\<le> t3;\n        t3 \\<le> Suc (t * k + k - 2);\n        Suc t1 \\<le> t3 \\<and> t3 \\<le> Suc (t2 - 2) \\<longrightarrow>\n        s t3 = NoMsg;\n        t3 = t2\\<rbrakk>\n       \\<Longrightarrow> s t3 = NoMsg\n 3. \\<And>t1 t2 t3.\n       \\<lbrakk>Suc 0 < k; s t1 \\<noteq> NoMsg;\n        \\<And>t. event t = (t mod k = k - Suc 0); t0 = t * k;\n        t1 mod k \\<noteq> k - Suc 0; m = s t1; Suc t1 \\<le> t2;\n        t2 mod k = k - Suc 0; s t2 = NoMsg; t * k < t1; Suc t1 \\<noteq> t2;\n        t1 < t * k + k - Suc 0; Suc t1 \\<le> t3;\n        t3 \\<le> Suc (t * k + k - 2);\n        Suc t1 \\<le> t3 \\<and> t3 \\<le> Suc (t2 - 2) \\<longrightarrow>\n        s t3 = NoMsg;\n        t3 \\<le> t2 \\<Longrightarrow> s t3 = NoMsg\\<rbrakk>\n       \\<Longrightarrow> s t3 = NoMsg", "apply simp"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>t1 t2 t3.\n       \\<lbrakk>Suc 0 < k; s t1 \\<noteq> NoMsg;\n        \\<And>t. event t = (t mod k = k - Suc 0); t0 = t * k;\n        t1 mod k \\<noteq> k - Suc 0; m = s t1; Suc t1 \\<le> t2;\n        t2 mod k = k - Suc 0; s t2 = NoMsg; t * k < t1; Suc t1 \\<noteq> t2;\n        t1 < t * k + k - Suc 0; Suc t1 \\<le> t3;\n        t3 \\<le> Suc (t * k + k - 2);\n        Suc t1 \\<le> t3 \\<and> t3 \\<le> Suc (t2 - 2) \\<longrightarrow>\n        s t3 = NoMsg;\n        t3 = t2\\<rbrakk>\n       \\<Longrightarrow> s t3 = NoMsg\n 2. \\<And>t1 t2 t3.\n       \\<lbrakk>Suc 0 < k; s t1 \\<noteq> NoMsg;\n        \\<And>t. event t = (t mod k = k - Suc 0); t0 = t * k;\n        t1 mod k \\<noteq> k - Suc 0; m = s t1; Suc t1 \\<le> t2;\n        t2 mod k = k - Suc 0; s t2 = NoMsg; t * k < t1; Suc t1 \\<noteq> t2;\n        t1 < t * k + k - Suc 0; Suc t1 \\<le> t3;\n        t3 \\<le> Suc (t * k + k - 2);\n        Suc t1 \\<le> t3 \\<and> t3 \\<le> Suc (t2 - 2) \\<longrightarrow>\n        s t3 = NoMsg;\n        t3 \\<le> t2 \\<Longrightarrow> s t3 = NoMsg\\<rbrakk>\n       \\<Longrightarrow> s t3 = NoMsg", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>t1 t2 t3.\n       \\<lbrakk>Suc 0 < k; s t1 \\<noteq> NoMsg;\n        \\<And>t. event t = (t mod k = k - Suc 0); t0 = t * k;\n        t1 mod k \\<noteq> k - Suc 0; m = s t1; Suc t1 \\<le> t2;\n        t2 mod k = k - Suc 0; s t2 = NoMsg; t * k < t1; Suc t1 \\<noteq> t2;\n        t1 < t * k + k - Suc 0; Suc t1 \\<le> t3;\n        t3 \\<le> Suc (t * k + k - 2);\n        Suc t1 \\<le> t3 \\<and> t3 \\<le> Suc (t2 - 2) \\<longrightarrow>\n        s t3 = NoMsg;\n        t3 \\<le> t2 \\<Longrightarrow> s t3 = NoMsg\\<rbrakk>\n       \\<Longrightarrow> s t3 = NoMsg", "apply (drule_tac P=\"t3 \\<le> t2\" in meta_mp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>t1 t2 t3.\n       \\<lbrakk>Suc 0 < k; s t1 \\<noteq> NoMsg;\n        \\<And>t. event t = (t mod k = k - Suc 0); t0 = t * k;\n        t1 mod k \\<noteq> k - Suc 0; m = s t1; Suc t1 \\<le> t2;\n        t2 mod k = k - Suc 0; s t2 = NoMsg; t * k < t1; Suc t1 \\<noteq> t2;\n        t1 < t * k + k - Suc 0; Suc t1 \\<le> t3;\n        t3 \\<le> Suc (t * k + k - 2);\n        Suc t1 \\<le> t3 \\<and> t3 \\<le> Suc (t2 - 2) \\<longrightarrow>\n        s t3 = NoMsg\\<rbrakk>\n       \\<Longrightarrow> t3 \\<le> t2\n 2. \\<And>t1 t2 t3.\n       \\<lbrakk>Suc 0 < k; s t1 \\<noteq> NoMsg;\n        \\<And>t. event t = (t mod k = k - Suc 0); t0 = t * k;\n        t1 mod k \\<noteq> k - Suc 0; m = s t1; Suc t1 \\<le> t2;\n        t2 mod k = k - Suc 0; s t2 = NoMsg; t * k < t1; Suc t1 \\<noteq> t2;\n        t1 < t * k + k - Suc 0; Suc t1 \\<le> t3;\n        t3 \\<le> Suc (t * k + k - 2);\n        Suc t1 \\<le> t3 \\<and> t3 \\<le> Suc (t2 - 2) \\<longrightarrow>\n        s t3 = NoMsg;\n        s t3 = NoMsg\\<rbrakk>\n       \\<Longrightarrow> s t3 = NoMsg", "apply (subgoal_tac \"t * k < t2\")"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>t1 t2 t3.\n       \\<lbrakk>Suc 0 < k; s t1 \\<noteq> NoMsg;\n        \\<And>t. event t = (t mod k = k - Suc 0); t0 = t * k;\n        t1 mod k \\<noteq> k - Suc 0; m = s t1; Suc t1 \\<le> t2;\n        t2 mod k = k - Suc 0; s t2 = NoMsg; t * k < t1; Suc t1 \\<noteq> t2;\n        t1 < t * k + k - Suc 0; Suc t1 \\<le> t3;\n        t3 \\<le> Suc (t * k + k - 2);\n        Suc t1 \\<le> t3 \\<and> t3 \\<le> Suc (t2 - 2) \\<longrightarrow>\n        s t3 = NoMsg;\n        t * k < t2\\<rbrakk>\n       \\<Longrightarrow> t3 \\<le> t2\n 2. \\<And>t1 t2 t3.\n       \\<lbrakk>Suc 0 < k; s t1 \\<noteq> NoMsg;\n        \\<And>t. event t = (t mod k = k - Suc 0); t0 = t * k;\n        t1 mod k \\<noteq> k - Suc 0; m = s t1; Suc t1 \\<le> t2;\n        t2 mod k = k - Suc 0; s t2 = NoMsg; t * k < t1; Suc t1 \\<noteq> t2;\n        t1 < t * k + k - Suc 0; Suc t1 \\<le> t3;\n        t3 \\<le> Suc (t * k + k - 2);\n        Suc t1 \\<le> t3 \\<and> t3 \\<le> Suc (t2 - 2) \\<longrightarrow>\n        s t3 = NoMsg\\<rbrakk>\n       \\<Longrightarrow> t * k < t2\n 3. \\<And>t1 t2 t3.\n       \\<lbrakk>Suc 0 < k; s t1 \\<noteq> NoMsg;\n        \\<And>t. event t = (t mod k = k - Suc 0); t0 = t * k;\n        t1 mod k \\<noteq> k - Suc 0; m = s t1; Suc t1 \\<le> t2;\n        t2 mod k = k - Suc 0; s t2 = NoMsg; t * k < t1; Suc t1 \\<noteq> t2;\n        t1 < t * k + k - Suc 0; Suc t1 \\<le> t3;\n        t3 \\<le> Suc (t * k + k - 2);\n        Suc t1 \\<le> t3 \\<and> t3 \\<le> Suc (t2 - 2) \\<longrightarrow>\n        s t3 = NoMsg;\n        s t3 = NoMsg\\<rbrakk>\n       \\<Longrightarrow> s t3 = NoMsg", "prefer 2"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>t1 t2 t3.\n       \\<lbrakk>Suc 0 < k; s t1 \\<noteq> NoMsg;\n        \\<And>t. event t = (t mod k = k - Suc 0); t0 = t * k;\n        t1 mod k \\<noteq> k - Suc 0; m = s t1; Suc t1 \\<le> t2;\n        t2 mod k = k - Suc 0; s t2 = NoMsg; t * k < t1; Suc t1 \\<noteq> t2;\n        t1 < t * k + k - Suc 0; Suc t1 \\<le> t3;\n        t3 \\<le> Suc (t * k + k - 2);\n        Suc t1 \\<le> t3 \\<and> t3 \\<le> Suc (t2 - 2) \\<longrightarrow>\n        s t3 = NoMsg\\<rbrakk>\n       \\<Longrightarrow> t * k < t2\n 2. \\<And>t1 t2 t3.\n       \\<lbrakk>Suc 0 < k; s t1 \\<noteq> NoMsg;\n        \\<And>t. event t = (t mod k = k - Suc 0); t0 = t * k;\n        t1 mod k \\<noteq> k - Suc 0; m = s t1; Suc t1 \\<le> t2;\n        t2 mod k = k - Suc 0; s t2 = NoMsg; t * k < t1; Suc t1 \\<noteq> t2;\n        t1 < t * k + k - Suc 0; Suc t1 \\<le> t3;\n        t3 \\<le> Suc (t * k + k - 2);\n        Suc t1 \\<le> t3 \\<and> t3 \\<le> Suc (t2 - 2) \\<longrightarrow>\n        s t3 = NoMsg;\n        t * k < t2\\<rbrakk>\n       \\<Longrightarrow> t3 \\<le> t2\n 3. \\<And>t1 t2 t3.\n       \\<lbrakk>Suc 0 < k; s t1 \\<noteq> NoMsg;\n        \\<And>t. event t = (t mod k = k - Suc 0); t0 = t * k;\n        t1 mod k \\<noteq> k - Suc 0; m = s t1; Suc t1 \\<le> t2;\n        t2 mod k = k - Suc 0; s t2 = NoMsg; t * k < t1; Suc t1 \\<noteq> t2;\n        t1 < t * k + k - Suc 0; Suc t1 \\<le> t3;\n        t3 \\<le> Suc (t * k + k - 2);\n        Suc t1 \\<le> t3 \\<and> t3 \\<le> Suc (t2 - 2) \\<longrightarrow>\n        s t3 = NoMsg;\n        s t3 = NoMsg\\<rbrakk>\n       \\<Longrightarrow> s t3 = NoMsg", "apply (rule_tac y=t1 in less_trans, assumption+)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>t1 t2 t3.\n       \\<lbrakk>Suc 0 < k; s t1 \\<noteq> NoMsg;\n        \\<And>t. event t = (t mod k = k - Suc 0); t0 = t * k;\n        t1 mod k \\<noteq> k - Suc 0; m = s t1; Suc t1 \\<le> t2;\n        t2 mod k = k - Suc 0; s t2 = NoMsg; t * k < t1; Suc t1 \\<noteq> t2;\n        t1 < t * k + k - Suc 0; Suc t1 \\<le> t3;\n        t3 \\<le> Suc (t * k + k - 2);\n        Suc t1 \\<le> t3 \\<and> t3 \\<le> Suc (t2 - 2) \\<longrightarrow>\n        s t3 = NoMsg\\<rbrakk>\n       \\<Longrightarrow> t1 < t2\n 2. \\<And>t1 t2 t3.\n       \\<lbrakk>Suc 0 < k; s t1 \\<noteq> NoMsg;\n        \\<And>t. event t = (t mod k = k - Suc 0); t0 = t * k;\n        t1 mod k \\<noteq> k - Suc 0; m = s t1; Suc t1 \\<le> t2;\n        t2 mod k = k - Suc 0; s t2 = NoMsg; t * k < t1; Suc t1 \\<noteq> t2;\n        t1 < t * k + k - Suc 0; Suc t1 \\<le> t3;\n        t3 \\<le> Suc (t * k + k - 2);\n        Suc t1 \\<le> t3 \\<and> t3 \\<le> Suc (t2 - 2) \\<longrightarrow>\n        s t3 = NoMsg;\n        t * k < t2\\<rbrakk>\n       \\<Longrightarrow> t3 \\<le> t2\n 3. \\<And>t1 t2 t3.\n       \\<lbrakk>Suc 0 < k; s t1 \\<noteq> NoMsg;\n        \\<And>t. event t = (t mod k = k - Suc 0); t0 = t * k;\n        t1 mod k \\<noteq> k - Suc 0; m = s t1; Suc t1 \\<le> t2;\n        t2 mod k = k - Suc 0; s t2 = NoMsg; t * k < t1; Suc t1 \\<noteq> t2;\n        t1 < t * k + k - Suc 0; Suc t1 \\<le> t3;\n        t3 \\<le> Suc (t * k + k - 2);\n        Suc t1 \\<le> t3 \\<and> t3 \\<le> Suc (t2 - 2) \\<longrightarrow>\n        s t3 = NoMsg;\n        s t3 = NoMsg\\<rbrakk>\n       \\<Longrightarrow> s t3 = NoMsg", "apply (case_tac \"t * k + (k - Suc 0) < t2\")"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>t1 t2 t3.\n       \\<lbrakk>Suc 0 < k; s t1 \\<noteq> NoMsg;\n        \\<And>t. event t = (t mod k = k - Suc 0); t0 = t * k;\n        t1 mod k \\<noteq> k - Suc 0; m = s t1; Suc t1 \\<le> t2;\n        t2 mod k = k - Suc 0; s t2 = NoMsg; t * k < t1; Suc t1 \\<noteq> t2;\n        t1 < t * k + k - Suc 0; Suc t1 \\<le> t3;\n        t3 \\<le> Suc (t * k + k - 2);\n        Suc t1 \\<le> t3 \\<and> t3 \\<le> Suc (t2 - 2) \\<longrightarrow>\n        s t3 = NoMsg;\n        t * k + (k - Suc 0) < t2\\<rbrakk>\n       \\<Longrightarrow> t1 < t2\n 2. \\<And>t1 t2 t3.\n       \\<lbrakk>Suc 0 < k; s t1 \\<noteq> NoMsg;\n        \\<And>t. event t = (t mod k = k - Suc 0); t0 = t * k;\n        t1 mod k \\<noteq> k - Suc 0; m = s t1; Suc t1 \\<le> t2;\n        t2 mod k = k - Suc 0; s t2 = NoMsg; t * k < t1; Suc t1 \\<noteq> t2;\n        t1 < t * k + k - Suc 0; Suc t1 \\<le> t3;\n        t3 \\<le> Suc (t * k + k - 2);\n        Suc t1 \\<le> t3 \\<and> t3 \\<le> Suc (t2 - 2) \\<longrightarrow>\n        s t3 = NoMsg;\n        \\<not> t * k + (k - Suc 0) < t2\\<rbrakk>\n       \\<Longrightarrow> t1 < t2\n 3. \\<And>t1 t2 t3.\n       \\<lbrakk>Suc 0 < k; s t1 \\<noteq> NoMsg;\n        \\<And>t. event t = (t mod k = k - Suc 0); t0 = t * k;\n        t1 mod k \\<noteq> k - Suc 0; m = s t1; Suc t1 \\<le> t2;\n        t2 mod k = k - Suc 0; s t2 = NoMsg; t * k < t1; Suc t1 \\<noteq> t2;\n        t1 < t * k + k - Suc 0; Suc t1 \\<le> t3;\n        t3 \\<le> Suc (t * k + k - 2);\n        Suc t1 \\<le> t3 \\<and> t3 \\<le> Suc (t2 - 2) \\<longrightarrow>\n        s t3 = NoMsg;\n        t * k < t2\\<rbrakk>\n       \\<Longrightarrow> t3 \\<le> t2\n 4. \\<And>t1 t2 t3.\n       \\<lbrakk>Suc 0 < k; s t1 \\<noteq> NoMsg;\n        \\<And>t. event t = (t mod k = k - Suc 0); t0 = t * k;\n        t1 mod k \\<noteq> k - Suc 0; m = s t1; Suc t1 \\<le> t2;\n        t2 mod k = k - Suc 0; s t2 = NoMsg; t * k < t1; Suc t1 \\<noteq> t2;\n        t1 < t * k + k - Suc 0; Suc t1 \\<le> t3;\n        t3 \\<le> Suc (t * k + k - 2);\n        Suc t1 \\<le> t3 \\<and> t3 \\<le> Suc (t2 - 2) \\<longrightarrow>\n        s t3 = NoMsg;\n        s t3 = NoMsg\\<rbrakk>\n       \\<Longrightarrow> s t3 = NoMsg", "apply simp"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>t1 t2 t3.\n       \\<lbrakk>Suc 0 < k; s t1 \\<noteq> NoMsg;\n        \\<And>t. event t = (t mod k = k - Suc 0); t0 = t * k;\n        t1 mod k \\<noteq> k - Suc 0; m = s t1; Suc t1 \\<le> t2;\n        t2 mod k = k - Suc 0; s t2 = NoMsg; t * k < t1; Suc t1 \\<noteq> t2;\n        t1 < t * k + k - Suc 0; Suc t1 \\<le> t3;\n        t3 \\<le> Suc (t * k + k - 2);\n        Suc t1 \\<le> t3 \\<and> t3 \\<le> Suc (t2 - 2) \\<longrightarrow>\n        s t3 = NoMsg;\n        \\<not> t * k + (k - Suc 0) < t2\\<rbrakk>\n       \\<Longrightarrow> t1 < t2\n 2. \\<And>t1 t2 t3.\n       \\<lbrakk>Suc 0 < k; s t1 \\<noteq> NoMsg;\n        \\<And>t. event t = (t mod k = k - Suc 0); t0 = t * k;\n        t1 mod k \\<noteq> k - Suc 0; m = s t1; Suc t1 \\<le> t2;\n        t2 mod k = k - Suc 0; s t2 = NoMsg; t * k < t1; Suc t1 \\<noteq> t2;\n        t1 < t * k + k - Suc 0; Suc t1 \\<le> t3;\n        t3 \\<le> Suc (t * k + k - 2);\n        Suc t1 \\<le> t3 \\<and> t3 \\<le> Suc (t2 - 2) \\<longrightarrow>\n        s t3 = NoMsg;\n        t * k < t2\\<rbrakk>\n       \\<Longrightarrow> t3 \\<le> t2\n 3. \\<And>t1 t2 t3.\n       \\<lbrakk>Suc 0 < k; s t1 \\<noteq> NoMsg;\n        \\<And>t. event t = (t mod k = k - Suc 0); t0 = t * k;\n        t1 mod k \\<noteq> k - Suc 0; m = s t1; Suc t1 \\<le> t2;\n        t2 mod k = k - Suc 0; s t2 = NoMsg; t * k < t1; Suc t1 \\<noteq> t2;\n        t1 < t * k + k - Suc 0; Suc t1 \\<le> t3;\n        t3 \\<le> Suc (t * k + k - 2);\n        Suc t1 \\<le> t3 \\<and> t3 \\<le> Suc (t2 - 2) \\<longrightarrow>\n        s t3 = NoMsg;\n        s t3 = NoMsg\\<rbrakk>\n       \\<Longrightarrow> s t3 = NoMsg", "apply simp"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>t1 t2 t3.\n       \\<lbrakk>Suc 0 < k; s t1 \\<noteq> NoMsg;\n        \\<And>t. event t = (t mod k = k - Suc 0); t0 = t * k;\n        t1 mod k \\<noteq> k - Suc 0; m = s t1; Suc t1 \\<le> t2;\n        t2 mod k = k - Suc 0; s t2 = NoMsg; t * k < t1; Suc t1 \\<noteq> t2;\n        t1 < t * k + k - Suc 0; Suc t1 \\<le> t3;\n        t3 \\<le> Suc (t * k + k - 2);\n        Suc t1 \\<le> t3 \\<and> t3 \\<le> Suc (t2 - 2) \\<longrightarrow>\n        s t3 = NoMsg;\n        t * k < t2\\<rbrakk>\n       \\<Longrightarrow> t3 \\<le> t2\n 2. \\<And>t1 t2 t3.\n       \\<lbrakk>Suc 0 < k; s t1 \\<noteq> NoMsg;\n        \\<And>t. event t = (t mod k = k - Suc 0); t0 = t * k;\n        t1 mod k \\<noteq> k - Suc 0; m = s t1; Suc t1 \\<le> t2;\n        t2 mod k = k - Suc 0; s t2 = NoMsg; t * k < t1; Suc t1 \\<noteq> t2;\n        t1 < t * k + k - Suc 0; Suc t1 \\<le> t3;\n        t3 \\<le> Suc (t * k + k - 2);\n        Suc t1 \\<le> t3 \\<and> t3 \\<le> Suc (t2 - 2) \\<longrightarrow>\n        s t3 = NoMsg;\n        s t3 = NoMsg\\<rbrakk>\n       \\<Longrightarrow> s t3 = NoMsg", "apply (subgoal_tac \"t * k + (k - Suc 0) \\<le> t2\")"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>t1 t2 t3.\n       \\<lbrakk>Suc 0 < k; s t1 \\<noteq> NoMsg;\n        \\<And>t. event t = (t mod k = k - Suc 0); t0 = t * k;\n        t1 mod k \\<noteq> k - Suc 0; m = s t1; Suc t1 \\<le> t2;\n        t2 mod k = k - Suc 0; s t2 = NoMsg; t * k < t1; Suc t1 \\<noteq> t2;\n        t1 < t * k + k - Suc 0; Suc t1 \\<le> t3;\n        t3 \\<le> Suc (t * k + k - 2);\n        Suc t1 \\<le> t3 \\<and> t3 \\<le> Suc (t2 - 2) \\<longrightarrow>\n        s t3 = NoMsg;\n        t * k < t2; t * k + (k - Suc 0) \\<le> t2\\<rbrakk>\n       \\<Longrightarrow> t3 \\<le> t2\n 2. \\<And>t1 t2 t3.\n       \\<lbrakk>Suc 0 < k; s t1 \\<noteq> NoMsg;\n        \\<And>t. event t = (t mod k = k - Suc 0); t0 = t * k;\n        t1 mod k \\<noteq> k - Suc 0; m = s t1; Suc t1 \\<le> t2;\n        t2 mod k = k - Suc 0; s t2 = NoMsg; t * k < t1; Suc t1 \\<noteq> t2;\n        t1 < t * k + k - Suc 0; Suc t1 \\<le> t3;\n        t3 \\<le> Suc (t * k + k - 2);\n        Suc t1 \\<le> t3 \\<and> t3 \\<le> Suc (t2 - 2) \\<longrightarrow>\n        s t3 = NoMsg;\n        t * k < t2\\<rbrakk>\n       \\<Longrightarrow> t * k + (k - Suc 0) \\<le> t2\n 3. \\<And>t1 t2 t3.\n       \\<lbrakk>Suc 0 < k; s t1 \\<noteq> NoMsg;\n        \\<And>t. event t = (t mod k = k - Suc 0); t0 = t * k;\n        t1 mod k \\<noteq> k - Suc 0; m = s t1; Suc t1 \\<le> t2;\n        t2 mod k = k - Suc 0; s t2 = NoMsg; t * k < t1; Suc t1 \\<noteq> t2;\n        t1 < t * k + k - Suc 0; Suc t1 \\<le> t3;\n        t3 \\<le> Suc (t * k + k - 2);\n        Suc t1 \\<le> t3 \\<and> t3 \\<le> Suc (t2 - 2) \\<longrightarrow>\n        s t3 = NoMsg;\n        s t3 = NoMsg\\<rbrakk>\n       \\<Longrightarrow> s t3 = NoMsg", "prefer 2"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>t1 t2 t3.\n       \\<lbrakk>Suc 0 < k; s t1 \\<noteq> NoMsg;\n        \\<And>t. event t = (t mod k = k - Suc 0); t0 = t * k;\n        t1 mod k \\<noteq> k - Suc 0; m = s t1; Suc t1 \\<le> t2;\n        t2 mod k = k - Suc 0; s t2 = NoMsg; t * k < t1; Suc t1 \\<noteq> t2;\n        t1 < t * k + k - Suc 0; Suc t1 \\<le> t3;\n        t3 \\<le> Suc (t * k + k - 2);\n        Suc t1 \\<le> t3 \\<and> t3 \\<le> Suc (t2 - 2) \\<longrightarrow>\n        s t3 = NoMsg;\n        t * k < t2\\<rbrakk>\n       \\<Longrightarrow> t * k + (k - Suc 0) \\<le> t2\n 2. \\<And>t1 t2 t3.\n       \\<lbrakk>Suc 0 < k; s t1 \\<noteq> NoMsg;\n        \\<And>t. event t = (t mod k = k - Suc 0); t0 = t * k;\n        t1 mod k \\<noteq> k - Suc 0; m = s t1; Suc t1 \\<le> t2;\n        t2 mod k = k - Suc 0; s t2 = NoMsg; t * k < t1; Suc t1 \\<noteq> t2;\n        t1 < t * k + k - Suc 0; Suc t1 \\<le> t3;\n        t3 \\<le> Suc (t * k + k - 2);\n        Suc t1 \\<le> t3 \\<and> t3 \\<le> Suc (t2 - 2) \\<longrightarrow>\n        s t3 = NoMsg;\n        t * k < t2; t * k + (k - Suc 0) \\<le> t2\\<rbrakk>\n       \\<Longrightarrow> t3 \\<le> t2\n 3. \\<And>t1 t2 t3.\n       \\<lbrakk>Suc 0 < k; s t1 \\<noteq> NoMsg;\n        \\<And>t. event t = (t mod k = k - Suc 0); t0 = t * k;\n        t1 mod k \\<noteq> k - Suc 0; m = s t1; Suc t1 \\<le> t2;\n        t2 mod k = k - Suc 0; s t2 = NoMsg; t * k < t1; Suc t1 \\<noteq> t2;\n        t1 < t * k + k - Suc 0; Suc t1 \\<le> t3;\n        t3 \\<le> Suc (t * k + k - 2);\n        Suc t1 \\<le> t3 \\<and> t3 \\<le> Suc (t2 - 2) \\<longrightarrow>\n        s t3 = NoMsg;\n        s t3 = NoMsg\\<rbrakk>\n       \\<Longrightarrow> s t3 = NoMsg", "apply (simp only: mult.commute[of t])"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>t1 t2 t3.\n       \\<lbrakk>Suc 0 < k; s t1 \\<noteq> NoMsg;\n        \\<And>t. event t = (t mod k = k - Suc 0); t0 = k * t;\n        t1 mod k \\<noteq> k - Suc 0; m = s t1; Suc t1 \\<le> t2;\n        t2 mod k = k - Suc 0; s t2 = NoMsg; k * t < t1; Suc t1 \\<noteq> t2;\n        t1 < k * t + k - Suc 0; Suc t1 \\<le> t3;\n        t3 \\<le> Suc (k * t + k - 2);\n        True \\<and> t3 \\<le> Suc (t2 - 2) \\<longrightarrow> s t3 = NoMsg;\n        k * t < t2\\<rbrakk>\n       \\<Longrightarrow> k * t + (k - Suc 0) \\<le> t2\n 2. \\<And>t1 t2 t3.\n       \\<lbrakk>Suc 0 < k; s t1 \\<noteq> NoMsg;\n        \\<And>t. event t = (t mod k = k - Suc 0); t0 = t * k;\n        t1 mod k \\<noteq> k - Suc 0; m = s t1; Suc t1 \\<le> t2;\n        t2 mod k = k - Suc 0; s t2 = NoMsg; t * k < t1; Suc t1 \\<noteq> t2;\n        t1 < t * k + k - Suc 0; Suc t1 \\<le> t3;\n        t3 \\<le> Suc (t * k + k - 2);\n        Suc t1 \\<le> t3 \\<and> t3 \\<le> Suc (t2 - 2) \\<longrightarrow>\n        s t3 = NoMsg;\n        t * k < t2; t * k + (k - Suc 0) \\<le> t2\\<rbrakk>\n       \\<Longrightarrow> t3 \\<le> t2\n 3. \\<And>t1 t2 t3.\n       \\<lbrakk>Suc 0 < k; s t1 \\<noteq> NoMsg;\n        \\<And>t. event t = (t mod k = k - Suc 0); t0 = t * k;\n        t1 mod k \\<noteq> k - Suc 0; m = s t1; Suc t1 \\<le> t2;\n        t2 mod k = k - Suc 0; s t2 = NoMsg; t * k < t1; Suc t1 \\<noteq> t2;\n        t1 < t * k + k - Suc 0; Suc t1 \\<le> t3;\n        t3 \\<le> Suc (t * k + k - 2);\n        Suc t1 \\<le> t3 \\<and> t3 \\<le> Suc (t2 - 2) \\<longrightarrow>\n        s t3 = NoMsg;\n        s t3 = NoMsg\\<rbrakk>\n       \\<Longrightarrow> s t3 = NoMsg", "apply (rule mult_divisor_le_mod_ge_imp_ge)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>t1 t2 t3.\n       \\<lbrakk>Suc 0 < k; s t1 \\<noteq> NoMsg;\n        \\<And>t. event t = (t mod k = k - Suc 0); t0 = k * t;\n        t1 mod k \\<noteq> k - Suc 0; m = s t1; Suc t1 \\<le> t2;\n        t2 mod k = k - Suc 0; s t2 = NoMsg; k * t < t1; Suc t1 \\<noteq> t2;\n        t1 < k * t + k - Suc 0; Suc t1 \\<le> t3;\n        t3 \\<le> Suc (k * t + k - 2);\n        True \\<and> t3 \\<le> Suc (t2 - 2) \\<longrightarrow> s t3 = NoMsg;\n        k * t < t2\\<rbrakk>\n       \\<Longrightarrow> k * t \\<le> t2\n 2. \\<And>t1 t2 t3.\n       \\<lbrakk>Suc 0 < k; s t1 \\<noteq> NoMsg;\n        \\<And>t. event t = (t mod k = k - Suc 0); t0 = k * t;\n        t1 mod k \\<noteq> k - Suc 0; m = s t1; Suc t1 \\<le> t2;\n        t2 mod k = k - Suc 0; s t2 = NoMsg; k * t < t1; Suc t1 \\<noteq> t2;\n        t1 < k * t + k - Suc 0; Suc t1 \\<le> t3;\n        t3 \\<le> Suc (k * t + k - 2);\n        True \\<and> t3 \\<le> Suc (t2 - 2) \\<longrightarrow> s t3 = NoMsg;\n        k * t < t2\\<rbrakk>\n       \\<Longrightarrow> k - Suc 0 \\<le> t2 mod k\n 3. \\<And>t1 t2 t3.\n       \\<lbrakk>Suc 0 < k; s t1 \\<noteq> NoMsg;\n        \\<And>t. event t = (t mod k = k - Suc 0); t0 = t * k;\n        t1 mod k \\<noteq> k - Suc 0; m = s t1; Suc t1 \\<le> t2;\n        t2 mod k = k - Suc 0; s t2 = NoMsg; t * k < t1; Suc t1 \\<noteq> t2;\n        t1 < t * k + k - Suc 0; Suc t1 \\<le> t3;\n        t3 \\<le> Suc (t * k + k - 2);\n        Suc t1 \\<le> t3 \\<and> t3 \\<le> Suc (t2 - 2) \\<longrightarrow>\n        s t3 = NoMsg;\n        t * k < t2; t * k + (k - Suc 0) \\<le> t2\\<rbrakk>\n       \\<Longrightarrow> t3 \\<le> t2\n 4. \\<And>t1 t2 t3.\n       \\<lbrakk>Suc 0 < k; s t1 \\<noteq> NoMsg;\n        \\<And>t. event t = (t mod k = k - Suc 0); t0 = t * k;\n        t1 mod k \\<noteq> k - Suc 0; m = s t1; Suc t1 \\<le> t2;\n        t2 mod k = k - Suc 0; s t2 = NoMsg; t * k < t1; Suc t1 \\<noteq> t2;\n        t1 < t * k + k - Suc 0; Suc t1 \\<le> t3;\n        t3 \\<le> Suc (t * k + k - 2);\n        Suc t1 \\<le> t3 \\<and> t3 \\<le> Suc (t2 - 2) \\<longrightarrow>\n        s t3 = NoMsg;\n        s t3 = NoMsg\\<rbrakk>\n       \\<Longrightarrow> s t3 = NoMsg", "apply simp_all"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "end"]]}