{"file_name": "/home/qj213/afp-2021-10-22/thys/Inductive_Confidentiality/DolevYao/NS_Public_Bad.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Inductive_Confidentiality", "problem_names": ["lemma \"\\<exists>NB. \\<exists>evs \\<in> ns_public. Says A B (Crypt (pubEK B) (Nonce NB)) \\<in> set evs\"", "lemma Gets_imp_Says :\n     \"\\<lbrakk> Gets B X \\<in> set evs; evs \\<in> ns_public \\<rbrakk> \\<Longrightarrow> \\<exists>A. Says A B X \\<in> set evs\"", "lemma Gets_imp_knows_Spy: \n     \"\\<lbrakk> Gets B X \\<in> set evs; evs \\<in> ns_public \\<rbrakk>  \\<Longrightarrow> X \\<in> knows Spy evs\"", "lemma Gets_imp_knows_Spy_parts[dest]:\n    \"\\<lbrakk> Gets B X \\<in> set evs; evs \\<in> ns_public \\<rbrakk>  \\<Longrightarrow> X \\<in> parts (knows Spy evs)\"", "lemma Spy_see_priEK [simp]: \n      \"evs \\<in> ns_public \\<Longrightarrow> (Key (priEK A) \\<in> parts (knows Spy evs)) = (A \\<in> bad)\"", "lemma Spy_analz_priEK [simp]: \n      \"evs \\<in> ns_public \\<Longrightarrow> (Key (priEK A) \\<in> analz (knows Spy evs)) = (A \\<in> bad)\"", "lemma no_nonce_NS1_NS2 [rule_format]: \n      \"evs \\<in> ns_public \n       \\<Longrightarrow> Crypt (pubEK C) \\<lbrace>NA', Nonce NA\\<rbrace> \\<in> parts (knows Spy evs) \\<longrightarrow>\n           Crypt (pubEK B) \\<lbrace>Nonce NA, Agent A\\<rbrace> \\<in> parts (knows Spy evs) \\<longrightarrow>  \n           Nonce NA \\<in> analz (knows Spy evs)\"", "lemma unique_NA: \n     \"\\<lbrakk>Crypt(pubEK B)  \\<lbrace>Nonce NA, Agent A \\<rbrace> \\<in> parts(knows Spy evs);  \n       Crypt(pubEK B') \\<lbrace>Nonce NA, Agent A'\\<rbrace> \\<in> parts(knows Spy evs);  \n       Nonce NA \\<notin> analz (knows Spy evs); evs \\<in> ns_public\\<rbrakk>\n      \\<Longrightarrow> A=A' \\<and> B=B'\"", "theorem Spy_not_see_NA: \n      \"\\<lbrakk>Says A B (Crypt(pubEK B) \\<lbrace>Nonce NA, Agent A\\<rbrace>) \\<in> set evs;\n        A \\<notin> bad;  B \\<notin> bad;  evs \\<in> ns_public\\<rbrakk>                     \n       \\<Longrightarrow> Nonce NA \\<notin> analz (knows Spy evs)\"", "lemma A_trusts_NS2_lemma [rule_format]: \n   \"\\<lbrakk>A \\<notin> bad;  B \\<notin> bad;  evs \\<in> ns_public\\<rbrakk>                     \n    \\<Longrightarrow> Crypt (pubEK A) \\<lbrace>Nonce NA, Nonce NB\\<rbrace> \\<in> parts (knows Spy evs) \\<longrightarrow>\n        Says A B (Crypt(pubEK B) \\<lbrace>Nonce NA, Agent A\\<rbrace>) \\<in> set evs \\<longrightarrow>\n        Says B A (Crypt(pubEK A) \\<lbrace>Nonce NA, Nonce NB\\<rbrace>) \\<in> set evs\"", "theorem A_trusts_NS2: \n     \"\\<lbrakk>Says A  B (Crypt(pubEK B) \\<lbrace>Nonce NA, Agent A\\<rbrace>) \\<in> set evs;   \n       Gets A (Crypt(pubEK A) \\<lbrace>Nonce NA, Nonce NB\\<rbrace>) \\<in> set evs;\n       A \\<notin> bad;  B \\<notin> bad;  evs \\<in> ns_public\\<rbrakk>                     \n      \\<Longrightarrow> Says B A (Crypt(pubEK A) \\<lbrace>Nonce NA, Nonce NB\\<rbrace>) \\<in> set evs\"", "lemma B_trusts_NS1 [rule_format]:\n     \"evs \\<in> ns_public                                         \n      \\<Longrightarrow> Crypt (pubEK B) \\<lbrace>Nonce NA, Agent A\\<rbrace> \\<in> parts (knows Spy evs) \\<longrightarrow>\n          Nonce NA \\<notin> analz (knows Spy evs) \\<longrightarrow>\n          Says A B (Crypt (pubEK B) \\<lbrace>Nonce NA, Agent A\\<rbrace>) \\<in> set evs\"", "lemma unique_NB [dest]: \n     \"\\<lbrakk>Crypt(pubEK A)  \\<lbrace>Nonce NA, Nonce NB\\<rbrace> \\<in> parts(knows Spy evs);\n       Crypt(pubEK A') \\<lbrace>Nonce NA', Nonce NB\\<rbrace> \\<in> parts(knows Spy evs);\n       Nonce NB \\<notin> analz (knows Spy evs); evs \\<in> ns_public\\<rbrakk>\n     \\<Longrightarrow> A=A' \\<and> NA=NA'\"", "theorem Spy_not_see_NB [dest]:\n     \"\\<lbrakk>Says B A (Crypt (pubEK A) \\<lbrace>Nonce NA, Nonce NB\\<rbrace>) \\<in> set evs;   \n       \\<forall>C. Says A C (Crypt (pubEK C) (Nonce NB)) \\<notin> set evs;       \n       A \\<notin> bad;  B \\<notin> bad;  evs \\<in> ns_public\\<rbrakk>                      \n     \\<Longrightarrow> Nonce NB \\<notin> analz (knows Spy evs)\"", "lemma B_trusts_NS3_lemma [rule_format]:\n     \"\\<lbrakk>A \\<notin> bad;  B \\<notin> bad;  evs \\<in> ns_public\\<rbrakk>                    \n      \\<Longrightarrow> Crypt (pubEK B) (Nonce NB) \\<in> parts (knows Spy evs) \\<longrightarrow>\n          Says B A  (Crypt (pubEK A) \\<lbrace>Nonce NA, Nonce NB\\<rbrace>) \\<in> set evs \\<longrightarrow>\n          (\\<exists>C. Says A C (Crypt (pubEK C) (Nonce NB)) \\<in> set evs)\"", "theorem B_trusts_NS3:\n     \"\\<lbrakk>Says B A  (Crypt (pubEK A) \\<lbrace>Nonce NA, Nonce NB\\<rbrace>) \\<in> set evs;\n       Gets B (Crypt (pubEK B) (Nonce NB)) \\<in> set evs;             \n       A \\<notin> bad;  B \\<notin> bad;  evs \\<in> ns_public\\<rbrakk>                    \n      \\<Longrightarrow> \\<exists>C. Says A C (Crypt (pubEK C) (Nonce NB)) \\<in> set evs\"", "lemma \"\\<lbrakk>A \\<notin> bad;  B \\<notin> bad;  evs \\<in> ns_public\\<rbrakk>            \n       \\<Longrightarrow> Says B A (Crypt (pubEK A) \\<lbrace>Nonce NA, Nonce NB\\<rbrace>) \\<in> set evs  \n           \\<longrightarrow> Nonce NB \\<notin> analz (knows Spy evs)\""], "translations": [["", "lemma \"\\<exists>NB. \\<exists>evs \\<in> ns_public. Says A B (Crypt (pubEK B) (Nonce NB)) \\<in> set evs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>NB.\n       \\<exists>evs\\<in>ns_public.\n          Says A B (Crypt (pubK B) (Nonce NB)) \\<in> set evs", "apply (intro exI bexI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. Says A B (Crypt (pubK B) (Nonce ?NB)) \\<in> set ?evs1\n 2. ?evs1 \\<in> ns_public", "apply (rule_tac [2] ns_public.Nil [THEN ns_public.NS1, THEN ns_public.Reception, \n                                   THEN ns_public.NS2, THEN ns_public.Reception, \n                                   THEN ns_public.NS3])"], ["proof (prove)\ngoal (8 subgoals):\n 1. Says A B (Crypt (pubK B) (Nonce ?NB))\n    \\<in> set [Says ?A2 ?B2 (Crypt (pubK ?B2) (Nonce ?NB2)), Gets ?B3 ?X3,\n               Says ?B4 ?A4\n                (Crypt (pubK ?A4) \\<lbrace>Nonce ?NA4, Nonce ?NB4\\<rbrace>),\n               Gets ?B5 ?X5,\n               Says ?A6 ?B6\n                (Crypt (pubK ?B6) \\<lbrace>Nonce ?NA6, Agent ?A6\\<rbrace>)]\n 2. Nonce ?NA6 \\<notin> used []\n 3. Says ?A5 ?B5 ?X5\n    \\<in> set [Says ?A6 ?B6\n                (Crypt (pubK ?B6) \\<lbrace>Nonce ?NA6, Agent ?A6\\<rbrace>)]\n 4. Nonce ?NB4\n    \\<notin> used\n              [Gets ?B5 ?X5,\n               Says ?A6 ?B6\n                (Crypt (pubK ?B6) \\<lbrace>Nonce ?NA6, Agent ?A6\\<rbrace>)]\n 5. Gets ?B4 (Crypt (pubK ?B4) \\<lbrace>Nonce ?NA4, Agent ?A4\\<rbrace>)\n    \\<in> set [Gets ?B5 ?X5,\n               Says ?A6 ?B6\n                (Crypt (pubK ?B6) \\<lbrace>Nonce ?NA6, Agent ?A6\\<rbrace>)]\n 6. Says ?A3 ?B3 ?X3\n    \\<in> set [Says ?B4 ?A4\n                (Crypt (pubK ?A4) \\<lbrace>Nonce ?NA4, Nonce ?NB4\\<rbrace>),\n               Gets ?B5 ?X5,\n               Says ?A6 ?B6\n                (Crypt (pubK ?B6) \\<lbrace>Nonce ?NA6, Agent ?A6\\<rbrace>)]\n 7. Says ?A2 ?B2 (Crypt (pubK ?B2) \\<lbrace>Nonce ?NA2, Agent ?A2\\<rbrace>)\n    \\<in> set [Gets ?B3 ?X3,\n               Says ?B4 ?A4\n                (Crypt (pubK ?A4) \\<lbrace>Nonce ?NA4, Nonce ?NB4\\<rbrace>),\n               Gets ?B5 ?X5,\n               Says ?A6 ?B6\n                (Crypt (pubK ?B6) \\<lbrace>Nonce ?NA6, Agent ?A6\\<rbrace>)]\n 8. Gets ?A2 (Crypt (pubK ?A2) \\<lbrace>Nonce ?NA2, Nonce ?NB2\\<rbrace>)\n    \\<in> set [Gets ?B3 ?X3,\n               Says ?B4 ?A4\n                (Crypt (pubK ?A4) \\<lbrace>Nonce ?NA4, Nonce ?NB4\\<rbrace>),\n               Gets ?B5 ?X5,\n               Says ?A6 ?B6\n                (Crypt (pubK ?B6) \\<lbrace>Nonce ?NA6, Agent ?A6\\<rbrace>)]", "by possibility"], ["", "text\\<open>Lemmas about reception invariant: if a message is received it certainly\nwas sent\\<close>"], ["", "lemma Gets_imp_Says :\n     \"\\<lbrakk> Gets B X \\<in> set evs; evs \\<in> ns_public \\<rbrakk> \\<Longrightarrow> \\<exists>A. Says A B X \\<in> set evs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Gets B X \\<in> set evs; evs \\<in> ns_public\\<rbrakk>\n    \\<Longrightarrow> \\<exists>A. Says A B X \\<in> set evs", "apply (erule rev_mp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. evs \\<in> ns_public \\<Longrightarrow>\n    Gets B X \\<in> set evs \\<longrightarrow>\n    (\\<exists>A. Says A B X \\<in> set evs)", "apply (erule ns_public.induct)"], ["proof (prove)\ngoal (6 subgoals):\n 1. Gets B X \\<in> set [] \\<longrightarrow>\n    (\\<exists>A. Says A B X \\<in> set [])\n 2. \\<And>evsf Xa Ba.\n       \\<lbrakk>evsf \\<in> ns_public;\n        Gets B X \\<in> set evsf \\<longrightarrow>\n        (\\<exists>A. Says A B X \\<in> set evsf);\n        Xa \\<in> synth (analz (knows Spy evsf))\\<rbrakk>\n       \\<Longrightarrow> Gets B X\n                         \\<in> set (Says Spy Ba Xa # evsf) \\<longrightarrow>\n                         (\\<exists>A.\n                             Says A B X \\<in> set (Says Spy Ba Xa # evsf))\n 3. \\<And>evsr A Ba Xa.\n       \\<lbrakk>evsr \\<in> ns_public;\n        Gets B X \\<in> set evsr \\<longrightarrow>\n        (\\<exists>A. Says A B X \\<in> set evsr);\n        Says A Ba Xa \\<in> set evsr\\<rbrakk>\n       \\<Longrightarrow> Gets B X\n                         \\<in> set (Gets Ba Xa # evsr) \\<longrightarrow>\n                         (\\<exists>A.\n                             Says A B X \\<in> set (Gets Ba Xa # evsr))\n 4. \\<And>evs1 NA A Ba.\n       \\<lbrakk>evs1 \\<in> ns_public;\n        Gets B X \\<in> set evs1 \\<longrightarrow>\n        (\\<exists>A. Says A B X \\<in> set evs1);\n        Nonce NA \\<notin> used evs1\\<rbrakk>\n       \\<Longrightarrow> Gets B X\n                         \\<in> set (Says A Ba\n                                     (Crypt (pubK Ba)\n \\<lbrace>Nonce NA, Agent A\\<rbrace>) #\n                                    evs1) \\<longrightarrow>\n                         (\\<exists>Aa.\n                             Says Aa B X\n                             \\<in> set (Says A Ba\n   (Crypt (pubK Ba) \\<lbrace>Nonce NA, Agent A\\<rbrace>) #\n  evs1))\n 5. \\<And>evs2 NB Ba NA A.\n       \\<lbrakk>evs2 \\<in> ns_public;\n        Gets B X \\<in> set evs2 \\<longrightarrow>\n        (\\<exists>A. Says A B X \\<in> set evs2);\n        Nonce NB \\<notin> used evs2;\n        Gets Ba (Crypt (pubK Ba) \\<lbrace>Nonce NA, Agent A\\<rbrace>)\n        \\<in> set evs2\\<rbrakk>\n       \\<Longrightarrow> Gets B X\n                         \\<in> set (Says Ba A\n                                     (Crypt (pubK A)\n \\<lbrace>Nonce NA, Nonce NB\\<rbrace>) #\n                                    evs2) \\<longrightarrow>\n                         (\\<exists>Aa.\n                             Says Aa B X\n                             \\<in> set (Says Ba A\n   (Crypt (pubK A) \\<lbrace>Nonce NA, Nonce NB\\<rbrace>) #\n  evs2))\n 6. \\<And>evs3 A Ba NA NB.\n       \\<lbrakk>evs3 \\<in> ns_public;\n        Gets B X \\<in> set evs3 \\<longrightarrow>\n        (\\<exists>A. Says A B X \\<in> set evs3);\n        Says A Ba (Crypt (pubK Ba) \\<lbrace>Nonce NA, Agent A\\<rbrace>)\n        \\<in> set evs3;\n        Gets A (Crypt (pubK A) \\<lbrace>Nonce NA, Nonce NB\\<rbrace>)\n        \\<in> set evs3\\<rbrakk>\n       \\<Longrightarrow> Gets B X\n                         \\<in> set (Says A Ba (Crypt (pubK Ba) (Nonce NB)) #\n                                    evs3) \\<longrightarrow>\n                         (\\<exists>Aa.\n                             Says Aa B X\n                             \\<in> set (Says A Ba\n   (Crypt (pubK Ba) (Nonce NB)) #\n  evs3))", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma Gets_imp_knows_Spy: \n     \"\\<lbrakk> Gets B X \\<in> set evs; evs \\<in> ns_public \\<rbrakk>  \\<Longrightarrow> X \\<in> knows Spy evs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Gets B X \\<in> set evs; evs \\<in> ns_public\\<rbrakk>\n    \\<Longrightarrow> X \\<in> knows Spy evs", "apply (blast dest!: Gets_imp_Says Says_imp_knows_Spy)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma Gets_imp_knows_Spy_parts[dest]:\n    \"\\<lbrakk> Gets B X \\<in> set evs; evs \\<in> ns_public \\<rbrakk>  \\<Longrightarrow> X \\<in> parts (knows Spy evs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Gets B X \\<in> set evs; evs \\<in> ns_public\\<rbrakk>\n    \\<Longrightarrow> X \\<in> parts (knows Spy evs)", "apply (blast dest: Gets_imp_knows_Spy [THEN parts.Inj])"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "(**** Inductive proofs about ns_public ****)\n\n(** Theorems of the form X \\<notin> parts (knows Spy evs) imply that NOBODY\n    sends messages containing X! **)\n\n(*Spy never sees another agent's private key! (unless it's bad at start)*)"], ["", "lemma Spy_see_priEK [simp]: \n      \"evs \\<in> ns_public \\<Longrightarrow> (Key (priEK A) \\<in> parts (knows Spy evs)) = (A \\<in> bad)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. evs \\<in> ns_public \\<Longrightarrow>\n    (Key (priEK A) \\<in> parts (knows Spy evs)) = (A \\<in> bad)", "by (erule ns_public.induct, auto)"], ["", "lemma Spy_analz_priEK [simp]: \n      \"evs \\<in> ns_public \\<Longrightarrow> (Key (priEK A) \\<in> analz (knows Spy evs)) = (A \\<in> bad)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. evs \\<in> ns_public \\<Longrightarrow>\n    (Key (priEK A) \\<in> analz (knows Spy evs)) = (A \\<in> bad)", "by auto"], ["", "(*** Authenticity properties obtained from NS2 ***)\n\n(*It is impossible to re-use a nonce in both NS1 and NS2, provided the nonce\n  is secret.  (Honest users generate fresh nonces.)*)"], ["", "lemma no_nonce_NS1_NS2 [rule_format]: \n      \"evs \\<in> ns_public \n       \\<Longrightarrow> Crypt (pubEK C) \\<lbrace>NA', Nonce NA\\<rbrace> \\<in> parts (knows Spy evs) \\<longrightarrow>\n           Crypt (pubEK B) \\<lbrace>Nonce NA, Agent A\\<rbrace> \\<in> parts (knows Spy evs) \\<longrightarrow>  \n           Nonce NA \\<in> analz (knows Spy evs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. evs \\<in> ns_public \\<Longrightarrow>\n    Crypt (pubK C) \\<lbrace>NA', Nonce NA\\<rbrace>\n    \\<in> parts (knows Spy evs) \\<longrightarrow>\n    Crypt (pubK B) \\<lbrace>Nonce NA, Agent A\\<rbrace>\n    \\<in> parts (knows Spy evs) \\<longrightarrow>\n    Nonce NA \\<in> analz (knows Spy evs)", "apply (erule ns_public.induct, simp_all)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>evsf X.\n       \\<lbrakk>evsf \\<in> ns_public;\n        Crypt (pubK C) \\<lbrace>NA', Nonce NA\\<rbrace>\n        \\<in> parts (knows Spy evsf) \\<longrightarrow>\n        Crypt (pubK B) \\<lbrace>Nonce NA, Agent A\\<rbrace>\n        \\<in> parts (knows Spy evsf) \\<longrightarrow>\n        Nonce NA \\<in> analz (knows Spy evsf);\n        X \\<in> synth (analz (knows Spy evsf))\\<rbrakk>\n       \\<Longrightarrow> Crypt (pubK C) \\<lbrace>NA', Nonce NA\\<rbrace>\n                         \\<in> parts\n                                (insert X\n                                  (knows Spy evsf)) \\<longrightarrow>\n                         Crypt (pubK B) \\<lbrace>Nonce NA, Agent A\\<rbrace>\n                         \\<in> parts\n                                (insert X\n                                  (knows Spy evsf)) \\<longrightarrow>\n                         Nonce NA \\<in> analz (insert X (knows Spy evsf))\n 2. \\<And>evs1 NAa Aa Ba.\n       \\<lbrakk>evs1 \\<in> ns_public;\n        Crypt (pubK C) \\<lbrace>NA', Nonce NA\\<rbrace>\n        \\<in> parts (knows Spy evs1) \\<longrightarrow>\n        Crypt (pubK B) \\<lbrace>Nonce NA, Agent A\\<rbrace>\n        \\<in> parts (knows Spy evs1) \\<longrightarrow>\n        Nonce NA \\<in> analz (knows Spy evs1);\n        Nonce NAa \\<notin> used evs1\\<rbrakk>\n       \\<Longrightarrow> Ba \\<notin> bad \\<longrightarrow>\n                         Crypt (pubK C) \\<lbrace>NA', Nonce NA\\<rbrace>\n                         \\<in> parts (knows Spy evs1) \\<longrightarrow>\n                         B = Ba \\<and>\n                         NA = NAa \\<and> A = Aa \\<longrightarrow>\n                         Nonce NAa \\<in> analz (knows Spy evs1)\n 3. \\<And>evs2 NB Ba NAa Aa.\n       \\<lbrakk>evs2 \\<in> ns_public;\n        Crypt (pubK C) \\<lbrace>NA', Nonce NA\\<rbrace>\n        \\<in> parts (knows Spy evs2) \\<longrightarrow>\n        Crypt (pubK B) \\<lbrace>Nonce NA, Agent A\\<rbrace>\n        \\<in> parts (knows Spy evs2) \\<longrightarrow>\n        Nonce NA \\<in> analz (knows Spy evs2);\n        Nonce NB \\<notin> used evs2;\n        Gets Ba (Crypt (pubK Ba) \\<lbrace>Nonce NAa, Agent Aa\\<rbrace>)\n        \\<in> set evs2\\<rbrakk>\n       \\<Longrightarrow> Aa \\<notin> bad \\<longrightarrow>\n                         C = Aa \\<and>\n                         NA' = Nonce NAa \\<and> NA = NB \\<longrightarrow>\n                         Crypt (pubK B) \\<lbrace>Nonce NB, Agent A\\<rbrace>\n                         \\<in> parts (knows Spy evs2) \\<longrightarrow>\n                         Nonce NB \\<in> analz (knows Spy evs2)", "apply (blast intro: analz_insertI)+"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "(*Unicity for NS1: nonce NA identifies agents A and B*)"], ["", "lemma unique_NA: \n     \"\\<lbrakk>Crypt(pubEK B)  \\<lbrace>Nonce NA, Agent A \\<rbrace> \\<in> parts(knows Spy evs);  \n       Crypt(pubEK B') \\<lbrace>Nonce NA, Agent A'\\<rbrace> \\<in> parts(knows Spy evs);  \n       Nonce NA \\<notin> analz (knows Spy evs); evs \\<in> ns_public\\<rbrakk>\n      \\<Longrightarrow> A=A' \\<and> B=B'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Crypt (pubK B) \\<lbrace>Nonce NA, Agent A\\<rbrace>\n             \\<in> parts (knows Spy evs);\n     Crypt (pubK B') \\<lbrace>Nonce NA, Agent A'\\<rbrace>\n     \\<in> parts (knows Spy evs);\n     Nonce NA \\<notin> analz (knows Spy evs); evs \\<in> ns_public\\<rbrakk>\n    \\<Longrightarrow> A = A' \\<and> B = B'", "apply (erule rev_mp, erule rev_mp, erule rev_mp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. evs \\<in> ns_public \\<Longrightarrow>\n    Nonce NA \\<notin> analz (knows Spy evs) \\<longrightarrow>\n    Crypt (pubK B') \\<lbrace>Nonce NA, Agent A'\\<rbrace>\n    \\<in> parts (knows Spy evs) \\<longrightarrow>\n    Crypt (pubK B) \\<lbrace>Nonce NA, Agent A\\<rbrace>\n    \\<in> parts (knows Spy evs) \\<longrightarrow>\n    A = A' \\<and> B = B'", "apply (erule ns_public.induct, simp_all)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>evsf X.\n       \\<lbrakk>evsf \\<in> ns_public;\n        Nonce NA \\<notin> analz (knows Spy evsf) \\<longrightarrow>\n        Crypt (pubK B') \\<lbrace>Nonce NA, Agent A'\\<rbrace>\n        \\<in> parts (knows Spy evsf) \\<longrightarrow>\n        Crypt (pubK B) \\<lbrace>Nonce NA, Agent A\\<rbrace>\n        \\<in> parts (knows Spy evsf) \\<longrightarrow>\n        A = A' \\<and> B = B';\n        X \\<in> synth (analz (knows Spy evsf))\\<rbrakk>\n       \\<Longrightarrow> Nonce NA\n                         \\<notin> analz\n                                   (insert X\n                                     (knows Spy evsf)) \\<longrightarrow>\n                         Crypt (pubK B')\n                          \\<lbrace>Nonce NA, Agent A'\\<rbrace>\n                         \\<in> parts\n                                (insert X\n                                  (knows Spy evsf)) \\<longrightarrow>\n                         Crypt (pubK B) \\<lbrace>Nonce NA, Agent A\\<rbrace>\n                         \\<in> parts\n                                (insert X\n                                  (knows Spy evsf)) \\<longrightarrow>\n                         A = A' \\<and> B = B'\n 2. \\<And>evs1 NAa Aa Ba.\n       \\<lbrakk>evs1 \\<in> ns_public;\n        Nonce NA \\<notin> analz (knows Spy evs1) \\<longrightarrow>\n        Crypt (pubK B') \\<lbrace>Nonce NA, Agent A'\\<rbrace>\n        \\<in> parts (knows Spy evs1) \\<longrightarrow>\n        Crypt (pubK B) \\<lbrace>Nonce NA, Agent A\\<rbrace>\n        \\<in> parts (knows Spy evs1) \\<longrightarrow>\n        A = A' \\<and> B = B';\n        Nonce NAa \\<notin> used evs1\\<rbrakk>\n       \\<Longrightarrow> Ba \\<notin> bad \\<longrightarrow>\n                         Nonce NA\n                         \\<notin> analz (knows Spy evs1) \\<longrightarrow>\n                         (B' = Ba \\<and>\n                          NA = NAa \\<and> A' = Aa \\<longrightarrow>\n                          Crypt (pubK B)\n                           \\<lbrace>Nonce NAa, Agent A\\<rbrace>\n                          \\<in> parts (knows Spy evs1) \\<longrightarrow>\n                          A = Aa \\<and> B = Ba) \\<and>\n                         (Crypt (pubK B')\n                           \\<lbrace>Nonce NA, Agent A'\\<rbrace>\n                          \\<in> parts (knows Spy evs1) \\<longrightarrow>\n                          B = Ba \\<and>\n                          NA = NAa \\<and> A = Aa \\<longrightarrow>\n                          Aa = A' \\<and> Ba = B')", "(*Fake, NS1*)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>evsf X.\n       \\<lbrakk>evsf \\<in> ns_public;\n        Nonce NA \\<notin> analz (knows Spy evsf) \\<longrightarrow>\n        Crypt (pubK B') \\<lbrace>Nonce NA, Agent A'\\<rbrace>\n        \\<in> parts (knows Spy evsf) \\<longrightarrow>\n        Crypt (pubK B) \\<lbrace>Nonce NA, Agent A\\<rbrace>\n        \\<in> parts (knows Spy evsf) \\<longrightarrow>\n        A = A' \\<and> B = B';\n        X \\<in> synth (analz (knows Spy evsf))\\<rbrakk>\n       \\<Longrightarrow> Nonce NA\n                         \\<notin> analz\n                                   (insert X\n                                     (knows Spy evsf)) \\<longrightarrow>\n                         Crypt (pubK B')\n                          \\<lbrace>Nonce NA, Agent A'\\<rbrace>\n                         \\<in> parts\n                                (insert X\n                                  (knows Spy evsf)) \\<longrightarrow>\n                         Crypt (pubK B) \\<lbrace>Nonce NA, Agent A\\<rbrace>\n                         \\<in> parts\n                                (insert X\n                                  (knows Spy evsf)) \\<longrightarrow>\n                         A = A' \\<and> B = B'\n 2. \\<And>evs1 NAa Aa Ba.\n       \\<lbrakk>evs1 \\<in> ns_public;\n        Nonce NA \\<notin> analz (knows Spy evs1) \\<longrightarrow>\n        Crypt (pubK B') \\<lbrace>Nonce NA, Agent A'\\<rbrace>\n        \\<in> parts (knows Spy evs1) \\<longrightarrow>\n        Crypt (pubK B) \\<lbrace>Nonce NA, Agent A\\<rbrace>\n        \\<in> parts (knows Spy evs1) \\<longrightarrow>\n        A = A' \\<and> B = B';\n        Nonce NAa \\<notin> used evs1\\<rbrakk>\n       \\<Longrightarrow> Ba \\<notin> bad \\<longrightarrow>\n                         Nonce NA\n                         \\<notin> analz (knows Spy evs1) \\<longrightarrow>\n                         (B' = Ba \\<and>\n                          NA = NAa \\<and> A' = Aa \\<longrightarrow>\n                          Crypt (pubK B)\n                           \\<lbrace>Nonce NAa, Agent A\\<rbrace>\n                          \\<in> parts (knows Spy evs1) \\<longrightarrow>\n                          A = Aa \\<and> B = Ba) \\<and>\n                         (Crypt (pubK B')\n                           \\<lbrace>Nonce NA, Agent A'\\<rbrace>\n                          \\<in> parts (knows Spy evs1) \\<longrightarrow>\n                          B = Ba \\<and>\n                          NA = NAa \\<and> A = Aa \\<longrightarrow>\n                          Aa = A' \\<and> Ba = B')", "apply (blast intro!: analz_insertI)+"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "(*Secrecy: Spy does not see the nonce sent in msg NS1 if A and B are secure\n  The major premise \"Says A B ...\" makes it a dest-rule, so we use\n  (erule rev_mp) rather than rule_format. *)"], ["", "theorem Spy_not_see_NA: \n      \"\\<lbrakk>Says A B (Crypt(pubEK B) \\<lbrace>Nonce NA, Agent A\\<rbrace>) \\<in> set evs;\n        A \\<notin> bad;  B \\<notin> bad;  evs \\<in> ns_public\\<rbrakk>                     \n       \\<Longrightarrow> Nonce NA \\<notin> analz (knows Spy evs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Says A B (Crypt (pubK B) \\<lbrace>Nonce NA, Agent A\\<rbrace>)\n             \\<in> set evs;\n     A \\<notin> bad; B \\<notin> bad; evs \\<in> ns_public\\<rbrakk>\n    \\<Longrightarrow> Nonce NA \\<notin> analz (knows Spy evs)", "apply (erule rev_mp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>A \\<notin> bad; B \\<notin> bad; evs \\<in> ns_public\\<rbrakk>\n    \\<Longrightarrow> Says A B\n                       (Crypt (pubK B) \\<lbrace>Nonce NA, Agent A\\<rbrace>)\n                      \\<in> set evs \\<longrightarrow>\n                      Nonce NA \\<notin> analz (knows Spy evs)", "apply (erule ns_public.induct, simp_all, spy_analz)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>evs1 NAa Aa Ba.\n       \\<lbrakk>A \\<notin> bad; B \\<notin> bad; evs1 \\<in> ns_public;\n        Says A B (Crypt (pubK B) \\<lbrace>Nonce NA, Agent A\\<rbrace>)\n        \\<in> set evs1 \\<longrightarrow>\n        Nonce NA \\<notin> analz (knows Spy evs1);\n        Nonce NAa \\<notin> used evs1\\<rbrakk>\n       \\<Longrightarrow> (Ba \\<in> bad \\<longrightarrow>\n                          (NA = NAa \\<longrightarrow>\n                           B = Ba \\<longrightarrow> A \\<noteq> Aa) \\<and>\n                          (Says A B\n                            (Crypt (pubK B)\n                              \\<lbrace>Nonce NA, Agent A\\<rbrace>)\n                           \\<in> set evs1 \\<longrightarrow>\n                           NA \\<noteq> NAa)) \\<and>\n                         (Ba \\<notin> bad \\<longrightarrow>\n                          A = Aa \\<and>\n                          B = Ba \\<and>\n                          NA = NAa \\<and> A = Aa \\<longrightarrow>\n                          Nonce NAa \\<notin> analz (knows Spy evs1))\n 2. \\<And>evs2 NB Ba NAa Aa.\n       \\<lbrakk>A \\<notin> bad; B \\<notin> bad; evs2 \\<in> ns_public;\n        Says A B (Crypt (pubK B) \\<lbrace>Nonce NA, Agent A\\<rbrace>)\n        \\<in> set evs2 \\<longrightarrow>\n        Nonce NA \\<notin> analz (knows Spy evs2);\n        Nonce NB \\<notin> used evs2;\n        Gets Ba (Crypt (pubK Ba) \\<lbrace>Nonce NAa, Agent Aa\\<rbrace>)\n        \\<in> set evs2\\<rbrakk>\n       \\<Longrightarrow> Aa \\<in> bad \\<longrightarrow>\n                         Says A B\n                          (Crypt (pubK B)\n                            \\<lbrace>Nonce NA, Agent A\\<rbrace>)\n                         \\<in> set evs2 \\<longrightarrow>\n                         NA \\<noteq> NAa \\<and> NA \\<noteq> NB\n 3. \\<And>evs3 Aa Ba NAa NB.\n       \\<lbrakk>A \\<notin> bad; B \\<notin> bad; evs3 \\<in> ns_public;\n        Says A B (Crypt (pubK B) \\<lbrace>Nonce NA, Agent A\\<rbrace>)\n        \\<in> set evs3 \\<longrightarrow>\n        Nonce NA \\<notin> analz (knows Spy evs3);\n        Says Aa Ba (Crypt (pubK Ba) \\<lbrace>Nonce NAa, Agent Aa\\<rbrace>)\n        \\<in> set evs3;\n        Gets Aa (Crypt (pubK Aa) \\<lbrace>Nonce NAa, Nonce NB\\<rbrace>)\n        \\<in> set evs3\\<rbrakk>\n       \\<Longrightarrow> Ba \\<in> bad \\<longrightarrow>\n                         Says A B\n                          (Crypt (pubK B)\n                            \\<lbrace>Nonce NA, Agent A\\<rbrace>)\n                         \\<in> set evs3 \\<longrightarrow>\n                         NA \\<noteq> NB", "apply (blast dest: unique_NA intro: no_nonce_NS1_NS2)+"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "(*Authentication for A: if she receives message 2 and has used NA\n  to start a run, then B has sent message 2.*)"], ["", "lemma A_trusts_NS2_lemma [rule_format]: \n   \"\\<lbrakk>A \\<notin> bad;  B \\<notin> bad;  evs \\<in> ns_public\\<rbrakk>                     \n    \\<Longrightarrow> Crypt (pubEK A) \\<lbrace>Nonce NA, Nonce NB\\<rbrace> \\<in> parts (knows Spy evs) \\<longrightarrow>\n        Says A B (Crypt(pubEK B) \\<lbrace>Nonce NA, Agent A\\<rbrace>) \\<in> set evs \\<longrightarrow>\n        Says B A (Crypt(pubEK A) \\<lbrace>Nonce NA, Nonce NB\\<rbrace>) \\<in> set evs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>A \\<notin> bad; B \\<notin> bad; evs \\<in> ns_public\\<rbrakk>\n    \\<Longrightarrow> Crypt (pubK A) \\<lbrace>Nonce NA, Nonce NB\\<rbrace>\n                      \\<in> parts (knows Spy evs) \\<longrightarrow>\n                      Says A B\n                       (Crypt (pubK B) \\<lbrace>Nonce NA, Agent A\\<rbrace>)\n                      \\<in> set evs \\<longrightarrow>\n                      Says B A\n                       (Crypt (pubK A) \\<lbrace>Nonce NA, Nonce NB\\<rbrace>)\n                      \\<in> set evs", "apply (erule ns_public.induct)"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<lbrakk>A \\<notin> bad; B \\<notin> bad\\<rbrakk>\n    \\<Longrightarrow> Crypt (pubK A) \\<lbrace>Nonce NA, Nonce NB\\<rbrace>\n                      \\<in> parts (knows Spy []) \\<longrightarrow>\n                      Says A B\n                       (Crypt (pubK B) \\<lbrace>Nonce NA, Agent A\\<rbrace>)\n                      \\<in> set [] \\<longrightarrow>\n                      Says B A\n                       (Crypt (pubK A) \\<lbrace>Nonce NA, Nonce NB\\<rbrace>)\n                      \\<in> set []\n 2. \\<And>evsf X Ba.\n       \\<lbrakk>A \\<notin> bad; B \\<notin> bad; evsf \\<in> ns_public;\n        Crypt (pubK A) \\<lbrace>Nonce NA, Nonce NB\\<rbrace>\n        \\<in> parts (knows Spy evsf) \\<longrightarrow>\n        Says A B (Crypt (pubK B) \\<lbrace>Nonce NA, Agent A\\<rbrace>)\n        \\<in> set evsf \\<longrightarrow>\n        Says B A (Crypt (pubK A) \\<lbrace>Nonce NA, Nonce NB\\<rbrace>)\n        \\<in> set evsf;\n        X \\<in> synth (analz (knows Spy evsf))\\<rbrakk>\n       \\<Longrightarrow> Crypt (pubK A) \\<lbrace>Nonce NA, Nonce NB\\<rbrace>\n                         \\<in> parts\n                                (knows Spy\n                                  (Says Spy Ba X # evsf)) \\<longrightarrow>\n                         Says A B\n                          (Crypt (pubK B)\n                            \\<lbrace>Nonce NA, Agent A\\<rbrace>)\n                         \\<in> set (Says Spy Ba X # evsf) \\<longrightarrow>\n                         Says B A\n                          (Crypt (pubK A)\n                            \\<lbrace>Nonce NA, Nonce NB\\<rbrace>)\n                         \\<in> set (Says Spy Ba X # evsf)\n 3. \\<And>evsr Aa Ba X.\n       \\<lbrakk>A \\<notin> bad; B \\<notin> bad; evsr \\<in> ns_public;\n        Crypt (pubK A) \\<lbrace>Nonce NA, Nonce NB\\<rbrace>\n        \\<in> parts (knows Spy evsr) \\<longrightarrow>\n        Says A B (Crypt (pubK B) \\<lbrace>Nonce NA, Agent A\\<rbrace>)\n        \\<in> set evsr \\<longrightarrow>\n        Says B A (Crypt (pubK A) \\<lbrace>Nonce NA, Nonce NB\\<rbrace>)\n        \\<in> set evsr;\n        Says Aa Ba X \\<in> set evsr\\<rbrakk>\n       \\<Longrightarrow> Crypt (pubK A) \\<lbrace>Nonce NA, Nonce NB\\<rbrace>\n                         \\<in> parts\n                                (knows Spy\n                                  (Gets Ba X # evsr)) \\<longrightarrow>\n                         Says A B\n                          (Crypt (pubK B)\n                            \\<lbrace>Nonce NA, Agent A\\<rbrace>)\n                         \\<in> set (Gets Ba X # evsr) \\<longrightarrow>\n                         Says B A\n                          (Crypt (pubK A)\n                            \\<lbrace>Nonce NA, Nonce NB\\<rbrace>)\n                         \\<in> set (Gets Ba X # evsr)\n 4. \\<And>evs1 NAa Aa Ba.\n       \\<lbrakk>A \\<notin> bad; B \\<notin> bad; evs1 \\<in> ns_public;\n        Crypt (pubK A) \\<lbrace>Nonce NA, Nonce NB\\<rbrace>\n        \\<in> parts (knows Spy evs1) \\<longrightarrow>\n        Says A B (Crypt (pubK B) \\<lbrace>Nonce NA, Agent A\\<rbrace>)\n        \\<in> set evs1 \\<longrightarrow>\n        Says B A (Crypt (pubK A) \\<lbrace>Nonce NA, Nonce NB\\<rbrace>)\n        \\<in> set evs1;\n        Nonce NAa \\<notin> used evs1\\<rbrakk>\n       \\<Longrightarrow> Crypt (pubK A) \\<lbrace>Nonce NA, Nonce NB\\<rbrace>\n                         \\<in> parts\n                                (knows Spy\n                                  (Says Aa Ba\n                                    (Crypt (pubK Ba)\n\\<lbrace>Nonce NAa, Agent Aa\\<rbrace>) #\n                                   evs1)) \\<longrightarrow>\n                         Says A B\n                          (Crypt (pubK B)\n                            \\<lbrace>Nonce NA, Agent A\\<rbrace>)\n                         \\<in> set (Says Aa Ba\n                                     (Crypt (pubK Ba)\n \\<lbrace>Nonce NAa, Agent Aa\\<rbrace>) #\n                                    evs1) \\<longrightarrow>\n                         Says B A\n                          (Crypt (pubK A)\n                            \\<lbrace>Nonce NA, Nonce NB\\<rbrace>)\n                         \\<in> set (Says Aa Ba\n                                     (Crypt (pubK Ba)\n \\<lbrace>Nonce NAa, Agent Aa\\<rbrace>) #\n                                    evs1)\n 5. \\<And>evs2 NBa Ba NAa Aa.\n       \\<lbrakk>A \\<notin> bad; B \\<notin> bad; evs2 \\<in> ns_public;\n        Crypt (pubK A) \\<lbrace>Nonce NA, Nonce NB\\<rbrace>\n        \\<in> parts (knows Spy evs2) \\<longrightarrow>\n        Says A B (Crypt (pubK B) \\<lbrace>Nonce NA, Agent A\\<rbrace>)\n        \\<in> set evs2 \\<longrightarrow>\n        Says B A (Crypt (pubK A) \\<lbrace>Nonce NA, Nonce NB\\<rbrace>)\n        \\<in> set evs2;\n        Nonce NBa \\<notin> used evs2;\n        Gets Ba (Crypt (pubK Ba) \\<lbrace>Nonce NAa, Agent Aa\\<rbrace>)\n        \\<in> set evs2\\<rbrakk>\n       \\<Longrightarrow> Crypt (pubK A) \\<lbrace>Nonce NA, Nonce NB\\<rbrace>\n                         \\<in> parts\n                                (knows Spy\n                                  (Says Ba Aa\n                                    (Crypt (pubK Aa)\n\\<lbrace>Nonce NAa, Nonce NBa\\<rbrace>) #\n                                   evs2)) \\<longrightarrow>\n                         Says A B\n                          (Crypt (pubK B)\n                            \\<lbrace>Nonce NA, Agent A\\<rbrace>)\n                         \\<in> set (Says Ba Aa\n                                     (Crypt (pubK Aa)\n \\<lbrace>Nonce NAa, Nonce NBa\\<rbrace>) #\n                                    evs2) \\<longrightarrow>\n                         Says B A\n                          (Crypt (pubK A)\n                            \\<lbrace>Nonce NA, Nonce NB\\<rbrace>)\n                         \\<in> set (Says Ba Aa\n                                     (Crypt (pubK Aa)\n \\<lbrace>Nonce NAa, Nonce NBa\\<rbrace>) #\n                                    evs2)\n 6. \\<And>evs3 Aa Ba NAa NBa.\n       \\<lbrakk>A \\<notin> bad; B \\<notin> bad; evs3 \\<in> ns_public;\n        Crypt (pubK A) \\<lbrace>Nonce NA, Nonce NB\\<rbrace>\n        \\<in> parts (knows Spy evs3) \\<longrightarrow>\n        Says A B (Crypt (pubK B) \\<lbrace>Nonce NA, Agent A\\<rbrace>)\n        \\<in> set evs3 \\<longrightarrow>\n        Says B A (Crypt (pubK A) \\<lbrace>Nonce NA, Nonce NB\\<rbrace>)\n        \\<in> set evs3;\n        Says Aa Ba (Crypt (pubK Ba) \\<lbrace>Nonce NAa, Agent Aa\\<rbrace>)\n        \\<in> set evs3;\n        Gets Aa (Crypt (pubK Aa) \\<lbrace>Nonce NAa, Nonce NBa\\<rbrace>)\n        \\<in> set evs3\\<rbrakk>\n       \\<Longrightarrow> Crypt (pubK A) \\<lbrace>Nonce NA, Nonce NB\\<rbrace>\n                         \\<in> parts\n                                (knows Spy\n                                  (Says Aa Ba\n                                    (Crypt (pubK Ba) (Nonce NBa)) #\n                                   evs3)) \\<longrightarrow>\n                         Says A B\n                          (Crypt (pubK B)\n                            \\<lbrace>Nonce NA, Agent A\\<rbrace>)\n                         \\<in> set (Says Aa Ba\n                                     (Crypt (pubK Ba) (Nonce NBa)) #\n                                    evs3) \\<longrightarrow>\n                         Says B A\n                          (Crypt (pubK A)\n                            \\<lbrace>Nonce NA, Nonce NB\\<rbrace>)\n                         \\<in> set (Says Aa Ba\n                                     (Crypt (pubK Ba) (Nonce NBa)) #\n                                    evs3)", "apply (auto dest: Spy_not_see_NA unique_NA)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "theorem A_trusts_NS2: \n     \"\\<lbrakk>Says A  B (Crypt(pubEK B) \\<lbrace>Nonce NA, Agent A\\<rbrace>) \\<in> set evs;   \n       Gets A (Crypt(pubEK A) \\<lbrace>Nonce NA, Nonce NB\\<rbrace>) \\<in> set evs;\n       A \\<notin> bad;  B \\<notin> bad;  evs \\<in> ns_public\\<rbrakk>                     \n      \\<Longrightarrow> Says B A (Crypt(pubEK A) \\<lbrace>Nonce NA, Nonce NB\\<rbrace>) \\<in> set evs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Says A B (Crypt (pubK B) \\<lbrace>Nonce NA, Agent A\\<rbrace>)\n             \\<in> set evs;\n     Gets A (Crypt (pubK A) \\<lbrace>Nonce NA, Nonce NB\\<rbrace>)\n     \\<in> set evs;\n     A \\<notin> bad; B \\<notin> bad; evs \\<in> ns_public\\<rbrakk>\n    \\<Longrightarrow> Says B A\n                       (Crypt (pubK A) \\<lbrace>Nonce NA, Nonce NB\\<rbrace>)\n                      \\<in> set evs", "by (blast intro: A_trusts_NS2_lemma)"], ["", "(*If the encrypted message appears then it originated with Alice in NS1*)"], ["", "lemma B_trusts_NS1 [rule_format]:\n     \"evs \\<in> ns_public                                         \n      \\<Longrightarrow> Crypt (pubEK B) \\<lbrace>Nonce NA, Agent A\\<rbrace> \\<in> parts (knows Spy evs) \\<longrightarrow>\n          Nonce NA \\<notin> analz (knows Spy evs) \\<longrightarrow>\n          Says A B (Crypt (pubEK B) \\<lbrace>Nonce NA, Agent A\\<rbrace>) \\<in> set evs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. evs \\<in> ns_public \\<Longrightarrow>\n    Crypt (pubK B) \\<lbrace>Nonce NA, Agent A\\<rbrace>\n    \\<in> parts (knows Spy evs) \\<longrightarrow>\n    Nonce NA \\<notin> analz (knows Spy evs) \\<longrightarrow>\n    Says A B (Crypt (pubK B) \\<lbrace>Nonce NA, Agent A\\<rbrace>)\n    \\<in> set evs", "apply (erule ns_public.induct, simp_all)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>evsf X Ba.\n       \\<lbrakk>evsf \\<in> ns_public;\n        Crypt (pubK B) \\<lbrace>Nonce NA, Agent A\\<rbrace>\n        \\<in> parts (knows Spy evsf) \\<longrightarrow>\n        Nonce NA \\<notin> analz (knows Spy evsf) \\<longrightarrow>\n        Says A B (Crypt (pubK B) \\<lbrace>Nonce NA, Agent A\\<rbrace>)\n        \\<in> set evsf;\n        X \\<in> synth (analz (knows Spy evsf))\\<rbrakk>\n       \\<Longrightarrow> Crypt (pubK B) \\<lbrace>Nonce NA, Agent A\\<rbrace>\n                         \\<in> parts\n                                (insert X\n                                  (knows Spy evsf)) \\<longrightarrow>\n                         Nonce NA\n                         \\<notin> analz\n                                   (insert X\n                                     (knows Spy evsf)) \\<longrightarrow>\n                         A = Spy \\<and>\n                         B = Ba \\<and>\n                         Crypt (pubK B)\n                          \\<lbrace>Nonce NA, Agent A\\<rbrace> =\n                         X \\<or>\n                         Says A B\n                          (Crypt (pubK B)\n                            \\<lbrace>Nonce NA, Agent A\\<rbrace>)\n                         \\<in> set evsf", "(*Fake*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>evsf X Ba.\n       \\<lbrakk>evsf \\<in> ns_public;\n        Crypt (pubK B) \\<lbrace>Nonce NA, Agent A\\<rbrace>\n        \\<in> parts (knows Spy evsf) \\<longrightarrow>\n        Nonce NA \\<notin> analz (knows Spy evsf) \\<longrightarrow>\n        Says A B (Crypt (pubK B) \\<lbrace>Nonce NA, Agent A\\<rbrace>)\n        \\<in> set evsf;\n        X \\<in> synth (analz (knows Spy evsf))\\<rbrakk>\n       \\<Longrightarrow> Crypt (pubK B) \\<lbrace>Nonce NA, Agent A\\<rbrace>\n                         \\<in> parts\n                                (insert X\n                                  (knows Spy evsf)) \\<longrightarrow>\n                         Nonce NA\n                         \\<notin> analz\n                                   (insert X\n                                     (knows Spy evsf)) \\<longrightarrow>\n                         A = Spy \\<and>\n                         B = Ba \\<and>\n                         Crypt (pubK B)\n                          \\<lbrace>Nonce NA, Agent A\\<rbrace> =\n                         X \\<or>\n                         Says A B\n                          (Crypt (pubK B)\n                            \\<lbrace>Nonce NA, Agent A\\<rbrace>)\n                         \\<in> set evsf", "apply (blast intro!: analz_insertI)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "(*** Authenticity properties obtained from NS2 ***)\n\n(*Unicity for NS2: nonce NB identifies nonce NA and agent A\n  [proof closely follows that for unique_NA] *)"], ["", "lemma unique_NB [dest]: \n     \"\\<lbrakk>Crypt(pubEK A)  \\<lbrace>Nonce NA, Nonce NB\\<rbrace> \\<in> parts(knows Spy evs);\n       Crypt(pubEK A') \\<lbrace>Nonce NA', Nonce NB\\<rbrace> \\<in> parts(knows Spy evs);\n       Nonce NB \\<notin> analz (knows Spy evs); evs \\<in> ns_public\\<rbrakk>\n     \\<Longrightarrow> A=A' \\<and> NA=NA'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Crypt (pubK A) \\<lbrace>Nonce NA, Nonce NB\\<rbrace>\n             \\<in> parts (knows Spy evs);\n     Crypt (pubK A') \\<lbrace>Nonce NA', Nonce NB\\<rbrace>\n     \\<in> parts (knows Spy evs);\n     Nonce NB \\<notin> analz (knows Spy evs); evs \\<in> ns_public\\<rbrakk>\n    \\<Longrightarrow> A = A' \\<and> NA = NA'", "apply (erule rev_mp, erule rev_mp, erule rev_mp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. evs \\<in> ns_public \\<Longrightarrow>\n    Nonce NB \\<notin> analz (knows Spy evs) \\<longrightarrow>\n    Crypt (pubK A') \\<lbrace>Nonce NA', Nonce NB\\<rbrace>\n    \\<in> parts (knows Spy evs) \\<longrightarrow>\n    Crypt (pubK A) \\<lbrace>Nonce NA, Nonce NB\\<rbrace>\n    \\<in> parts (knows Spy evs) \\<longrightarrow>\n    A = A' \\<and> NA = NA'", "apply (erule ns_public.induct, simp_all)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>evsf X.\n       \\<lbrakk>evsf \\<in> ns_public;\n        Nonce NB \\<notin> analz (knows Spy evsf) \\<longrightarrow>\n        Crypt (pubK A') \\<lbrace>Nonce NA', Nonce NB\\<rbrace>\n        \\<in> parts (knows Spy evsf) \\<longrightarrow>\n        Crypt (pubK A) \\<lbrace>Nonce NA, Nonce NB\\<rbrace>\n        \\<in> parts (knows Spy evsf) \\<longrightarrow>\n        A = A' \\<and> NA = NA';\n        X \\<in> synth (analz (knows Spy evsf))\\<rbrakk>\n       \\<Longrightarrow> Nonce NB\n                         \\<notin> analz\n                                   (insert X\n                                     (knows Spy evsf)) \\<longrightarrow>\n                         Crypt (pubK A')\n                          \\<lbrace>Nonce NA', Nonce NB\\<rbrace>\n                         \\<in> parts\n                                (insert X\n                                  (knows Spy evsf)) \\<longrightarrow>\n                         Crypt (pubK A) \\<lbrace>Nonce NA, Nonce NB\\<rbrace>\n                         \\<in> parts\n                                (insert X\n                                  (knows Spy evsf)) \\<longrightarrow>\n                         A = A' \\<and> NA = NA'\n 2. \\<And>evs2 NBa B NAa Aa.\n       \\<lbrakk>evs2 \\<in> ns_public;\n        Nonce NB \\<notin> analz (knows Spy evs2) \\<longrightarrow>\n        Crypt (pubK A') \\<lbrace>Nonce NA', Nonce NB\\<rbrace>\n        \\<in> parts (knows Spy evs2) \\<longrightarrow>\n        Crypt (pubK A) \\<lbrace>Nonce NA, Nonce NB\\<rbrace>\n        \\<in> parts (knows Spy evs2) \\<longrightarrow>\n        A = A' \\<and> NA = NA';\n        Nonce NBa \\<notin> used evs2;\n        Gets B (Crypt (pubK B) \\<lbrace>Nonce NAa, Agent Aa\\<rbrace>)\n        \\<in> set evs2\\<rbrakk>\n       \\<Longrightarrow> Aa \\<notin> bad \\<longrightarrow>\n                         Nonce NB\n                         \\<notin> analz (knows Spy evs2) \\<longrightarrow>\n                         (A' = Aa \\<and>\n                          NA' = NAa \\<and> NB = NBa \\<longrightarrow>\n                          Crypt (pubK A)\n                           \\<lbrace>Nonce NA, Nonce NBa\\<rbrace>\n                          \\<in> parts (knows Spy evs2) \\<longrightarrow>\n                          A = Aa \\<and> NA = NAa) \\<and>\n                         (Crypt (pubK A')\n                           \\<lbrace>Nonce NA', Nonce NB\\<rbrace>\n                          \\<in> parts (knows Spy evs2) \\<longrightarrow>\n                          A = Aa \\<and>\n                          NA = NAa \\<and> NB = NBa \\<longrightarrow>\n                          Aa = A' \\<and> NAa = NA')", "(*Fake, NS2*)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>evsf X.\n       \\<lbrakk>evsf \\<in> ns_public;\n        Nonce NB \\<notin> analz (knows Spy evsf) \\<longrightarrow>\n        Crypt (pubK A') \\<lbrace>Nonce NA', Nonce NB\\<rbrace>\n        \\<in> parts (knows Spy evsf) \\<longrightarrow>\n        Crypt (pubK A) \\<lbrace>Nonce NA, Nonce NB\\<rbrace>\n        \\<in> parts (knows Spy evsf) \\<longrightarrow>\n        A = A' \\<and> NA = NA';\n        X \\<in> synth (analz (knows Spy evsf))\\<rbrakk>\n       \\<Longrightarrow> Nonce NB\n                         \\<notin> analz\n                                   (insert X\n                                     (knows Spy evsf)) \\<longrightarrow>\n                         Crypt (pubK A')\n                          \\<lbrace>Nonce NA', Nonce NB\\<rbrace>\n                         \\<in> parts\n                                (insert X\n                                  (knows Spy evsf)) \\<longrightarrow>\n                         Crypt (pubK A) \\<lbrace>Nonce NA, Nonce NB\\<rbrace>\n                         \\<in> parts\n                                (insert X\n                                  (knows Spy evsf)) \\<longrightarrow>\n                         A = A' \\<and> NA = NA'\n 2. \\<And>evs2 NBa B NAa Aa.\n       \\<lbrakk>evs2 \\<in> ns_public;\n        Nonce NB \\<notin> analz (knows Spy evs2) \\<longrightarrow>\n        Crypt (pubK A') \\<lbrace>Nonce NA', Nonce NB\\<rbrace>\n        \\<in> parts (knows Spy evs2) \\<longrightarrow>\n        Crypt (pubK A) \\<lbrace>Nonce NA, Nonce NB\\<rbrace>\n        \\<in> parts (knows Spy evs2) \\<longrightarrow>\n        A = A' \\<and> NA = NA';\n        Nonce NBa \\<notin> used evs2;\n        Gets B (Crypt (pubK B) \\<lbrace>Nonce NAa, Agent Aa\\<rbrace>)\n        \\<in> set evs2\\<rbrakk>\n       \\<Longrightarrow> Aa \\<notin> bad \\<longrightarrow>\n                         Nonce NB\n                         \\<notin> analz (knows Spy evs2) \\<longrightarrow>\n                         (A' = Aa \\<and>\n                          NA' = NAa \\<and> NB = NBa \\<longrightarrow>\n                          Crypt (pubK A)\n                           \\<lbrace>Nonce NA, Nonce NBa\\<rbrace>\n                          \\<in> parts (knows Spy evs2) \\<longrightarrow>\n                          A = Aa \\<and> NA = NAa) \\<and>\n                         (Crypt (pubK A')\n                           \\<lbrace>Nonce NA', Nonce NB\\<rbrace>\n                          \\<in> parts (knows Spy evs2) \\<longrightarrow>\n                          A = Aa \\<and>\n                          NA = NAa \\<and> NB = NBa \\<longrightarrow>\n                          Aa = A' \\<and> NAa = NA')", "apply (blast intro!: analz_insertI)+"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "(*NB remains secret PROVIDED Alice never responds with round 3*)"], ["", "theorem Spy_not_see_NB [dest]:\n     \"\\<lbrakk>Says B A (Crypt (pubEK A) \\<lbrace>Nonce NA, Nonce NB\\<rbrace>) \\<in> set evs;   \n       \\<forall>C. Says A C (Crypt (pubEK C) (Nonce NB)) \\<notin> set evs;       \n       A \\<notin> bad;  B \\<notin> bad;  evs \\<in> ns_public\\<rbrakk>                      \n     \\<Longrightarrow> Nonce NB \\<notin> analz (knows Spy evs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Says B A (Crypt (pubK A) \\<lbrace>Nonce NA, Nonce NB\\<rbrace>)\n             \\<in> set evs;\n     \\<forall>C. Says A C (Crypt (pubK C) (Nonce NB)) \\<notin> set evs;\n     A \\<notin> bad; B \\<notin> bad; evs \\<in> ns_public\\<rbrakk>\n    \\<Longrightarrow> Nonce NB \\<notin> analz (knows Spy evs)", "apply (erule rev_mp, erule rev_mp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>A \\<notin> bad; B \\<notin> bad; evs \\<in> ns_public\\<rbrakk>\n    \\<Longrightarrow> (\\<forall>C.\n                          Says A C (Crypt (pubK C) (Nonce NB))\n                          \\<notin> set evs) \\<longrightarrow>\n                      Says B A\n                       (Crypt (pubK A) \\<lbrace>Nonce NA, Nonce NB\\<rbrace>)\n                      \\<in> set evs \\<longrightarrow>\n                      Nonce NB \\<notin> analz (knows Spy evs)", "apply (erule ns_public.induct, simp_all, spy_analz)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>evs1 NAa Ba.\n       \\<lbrakk>A \\<notin> bad; B \\<notin> bad; evs1 \\<in> ns_public;\n        (\\<forall>C.\n            Says A C (Crypt (pubK C) (Nonce NB))\n            \\<notin> set evs1) \\<longrightarrow>\n        Says B A (Crypt (pubK A) \\<lbrace>Nonce NA, Nonce NB\\<rbrace>)\n        \\<in> set evs1 \\<longrightarrow>\n        Nonce NB \\<notin> analz (knows Spy evs1);\n        Nonce NAa \\<notin> used evs1\\<rbrakk>\n       \\<Longrightarrow> Ba \\<in> bad \\<longrightarrow>\n                         (\\<forall>C.\n                             Says A C (Crypt (pubK C) (Nonce NB))\n                             \\<notin> set evs1) \\<longrightarrow>\n                         Says B A\n                          (Crypt (pubK A)\n                            \\<lbrace>Nonce NA, Nonce NB\\<rbrace>)\n                         \\<in> set evs1 \\<longrightarrow>\n                         NB \\<noteq> NAa\n 2. \\<And>evs2 NBa Ba NAa Aa.\n       \\<lbrakk>A \\<notin> bad; B \\<notin> bad; evs2 \\<in> ns_public;\n        (\\<forall>C.\n            Says A C (Crypt (pubK C) (Nonce NB))\n            \\<notin> set evs2) \\<longrightarrow>\n        Says B A (Crypt (pubK A) \\<lbrace>Nonce NA, Nonce NB\\<rbrace>)\n        \\<in> set evs2 \\<longrightarrow>\n        Nonce NB \\<notin> analz (knows Spy evs2);\n        Nonce NBa \\<notin> used evs2;\n        Gets Ba (Crypt (pubK Ba) \\<lbrace>Nonce NAa, Agent Aa\\<rbrace>)\n        \\<in> set evs2\\<rbrakk>\n       \\<Longrightarrow> (Aa \\<in> bad \\<longrightarrow>\n                          (\\<forall>C.\n                              Says A C (Crypt (pubK C) (Nonce NB))\n                              \\<notin> set evs2) \\<longrightarrow>\n                          (NA = NAa \\<longrightarrow>\n                           A = Aa \\<longrightarrow>\n                           B = Ba \\<longrightarrow> NB \\<noteq> NBa) \\<and>\n                          (Says B A\n                            (Crypt (pubK A)\n                              \\<lbrace>Nonce NA, Nonce NB\\<rbrace>)\n                           \\<in> set evs2 \\<longrightarrow>\n                           NB \\<noteq> NAa \\<and> NB \\<noteq> NBa)) \\<and>\n                         (Aa \\<notin> bad \\<longrightarrow>\n                          (\\<forall>C.\n                              Says A C (Crypt (pubK C) (Nonce NB))\n                              \\<notin> set evs2) \\<longrightarrow>\n                          B = Ba \\<and>\n                          A = Aa \\<and>\n                          NA = NAa \\<and> NB = NBa \\<longrightarrow>\n                          Nonce NBa \\<notin> analz (knows Spy evs2))\n 3. \\<And>evs3 Aa Ba NAa NBa.\n       \\<lbrakk>A \\<notin> bad; B \\<notin> bad; evs3 \\<in> ns_public;\n        (\\<forall>C.\n            Says A C (Crypt (pubK C) (Nonce NB))\n            \\<notin> set evs3) \\<longrightarrow>\n        Says B A (Crypt (pubK A) \\<lbrace>Nonce NA, Nonce NB\\<rbrace>)\n        \\<in> set evs3 \\<longrightarrow>\n        Nonce NB \\<notin> analz (knows Spy evs3);\n        Says Aa Ba (Crypt (pubK Ba) \\<lbrace>Nonce NAa, Agent Aa\\<rbrace>)\n        \\<in> set evs3;\n        Gets Aa (Crypt (pubK Aa) \\<lbrace>Nonce NAa, Nonce NBa\\<rbrace>)\n        \\<in> set evs3\\<rbrakk>\n       \\<Longrightarrow> Ba \\<in> bad \\<longrightarrow>\n                         (\\<forall>C.\n                             (C = Ba \\<longrightarrow>\n                              A = Aa \\<longrightarrow>\n                              NB \\<noteq> NBa) \\<and>\n                             Says A C (Crypt (pubK C) (Nonce NB))\n                             \\<notin> set evs3) \\<longrightarrow>\n                         Says B A\n                          (Crypt (pubK A)\n                            \\<lbrace>Nonce NA, Nonce NB\\<rbrace>)\n                         \\<in> set evs3 \\<longrightarrow>\n                         NB \\<noteq> NBa", "apply (simp_all add: all_conj_distrib)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>evs1 NAa Ba.\n       \\<lbrakk>A \\<notin> bad; B \\<notin> bad; evs1 \\<in> ns_public;\n        (\\<forall>C.\n            Says A C (Crypt (pubK C) (Nonce NB))\n            \\<notin> set evs1) \\<longrightarrow>\n        Says B A (Crypt (pubK A) \\<lbrace>Nonce NA, Nonce NB\\<rbrace>)\n        \\<in> set evs1 \\<longrightarrow>\n        Nonce NB \\<notin> analz (knows Spy evs1);\n        Nonce NAa \\<notin> used evs1\\<rbrakk>\n       \\<Longrightarrow> Ba \\<in> bad \\<longrightarrow>\n                         (\\<forall>C.\n                             Says A C (Crypt (pubK C) (Nonce NB))\n                             \\<notin> set evs1) \\<longrightarrow>\n                         Says B A\n                          (Crypt (pubK A)\n                            \\<lbrace>Nonce NA, Nonce NB\\<rbrace>)\n                         \\<in> set evs1 \\<longrightarrow>\n                         NB \\<noteq> NAa\n 2. \\<And>evs2 NBa Ba NAa Aa.\n       \\<lbrakk>A \\<notin> bad; B \\<notin> bad; evs2 \\<in> ns_public;\n        (\\<forall>C.\n            Says A C (Crypt (pubK C) (Nonce NB))\n            \\<notin> set evs2) \\<longrightarrow>\n        Says B A (Crypt (pubK A) \\<lbrace>Nonce NA, Nonce NB\\<rbrace>)\n        \\<in> set evs2 \\<longrightarrow>\n        Nonce NB \\<notin> analz (knows Spy evs2);\n        Nonce NBa \\<notin> used evs2;\n        Gets Ba (Crypt (pubK Ba) \\<lbrace>Nonce NAa, Agent Aa\\<rbrace>)\n        \\<in> set evs2\\<rbrakk>\n       \\<Longrightarrow> (Aa \\<in> bad \\<longrightarrow>\n                          (\\<forall>C.\n                              Says A C (Crypt (pubK C) (Nonce NB))\n                              \\<notin> set evs2) \\<longrightarrow>\n                          (NA = NAa \\<longrightarrow>\n                           A = Aa \\<longrightarrow>\n                           B = Ba \\<longrightarrow> NB \\<noteq> NBa) \\<and>\n                          (Says B A\n                            (Crypt (pubK A)\n                              \\<lbrace>Nonce NA, Nonce NB\\<rbrace>)\n                           \\<in> set evs2 \\<longrightarrow>\n                           NB \\<noteq> NAa \\<and> NB \\<noteq> NBa)) \\<and>\n                         (Aa \\<notin> bad \\<longrightarrow>\n                          (\\<forall>C.\n                              Says A C (Crypt (pubK C) (Nonce NB))\n                              \\<notin> set evs2) \\<longrightarrow>\n                          B = Ba \\<and>\n                          A = Aa \\<and>\n                          NA = NAa \\<and> NB = NBa \\<longrightarrow>\n                          Nonce NBa \\<notin> analz (knows Spy evs2))\n 3. \\<And>evs3 Aa Ba NAa NBa.\n       \\<lbrakk>A \\<notin> bad; B \\<notin> bad; evs3 \\<in> ns_public;\n        (\\<forall>C.\n            Says A C (Crypt (pubK C) (Nonce NB))\n            \\<notin> set evs3) \\<longrightarrow>\n        Says B A (Crypt (pubK A) \\<lbrace>Nonce NA, Nonce NB\\<rbrace>)\n        \\<in> set evs3 \\<longrightarrow>\n        Nonce NB \\<notin> analz (knows Spy evs3);\n        Says Aa Ba (Crypt (pubK Ba) \\<lbrace>Nonce NAa, Agent Aa\\<rbrace>)\n        \\<in> set evs3;\n        Gets Aa (Crypt (pubK Aa) \\<lbrace>Nonce NAa, Nonce NBa\\<rbrace>)\n        \\<in> set evs3\\<rbrakk>\n       \\<Longrightarrow> Ba \\<in> bad \\<longrightarrow>\n                         (A = Aa \\<longrightarrow> NB \\<noteq> NBa) \\<and>\n                         (\\<forall>C.\n                             Says A C (Crypt (pubK C) (Nonce NB))\n                             \\<notin> set evs3) \\<longrightarrow>\n                         Says B A\n                          (Crypt (pubK A)\n                            \\<lbrace>Nonce NA, Nonce NB\\<rbrace>)\n                         \\<in> set evs3 \\<longrightarrow>\n                         NB \\<noteq> NBa", "(*speeds up the next step*)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>evs1 NAa Ba.\n       \\<lbrakk>A \\<notin> bad; B \\<notin> bad; evs1 \\<in> ns_public;\n        (\\<forall>C.\n            Says A C (Crypt (pubK C) (Nonce NB))\n            \\<notin> set evs1) \\<longrightarrow>\n        Says B A (Crypt (pubK A) \\<lbrace>Nonce NA, Nonce NB\\<rbrace>)\n        \\<in> set evs1 \\<longrightarrow>\n        Nonce NB \\<notin> analz (knows Spy evs1);\n        Nonce NAa \\<notin> used evs1\\<rbrakk>\n       \\<Longrightarrow> Ba \\<in> bad \\<longrightarrow>\n                         (\\<forall>C.\n                             Says A C (Crypt (pubK C) (Nonce NB))\n                             \\<notin> set evs1) \\<longrightarrow>\n                         Says B A\n                          (Crypt (pubK A)\n                            \\<lbrace>Nonce NA, Nonce NB\\<rbrace>)\n                         \\<in> set evs1 \\<longrightarrow>\n                         NB \\<noteq> NAa\n 2. \\<And>evs2 NBa Ba NAa Aa.\n       \\<lbrakk>A \\<notin> bad; B \\<notin> bad; evs2 \\<in> ns_public;\n        (\\<forall>C.\n            Says A C (Crypt (pubK C) (Nonce NB))\n            \\<notin> set evs2) \\<longrightarrow>\n        Says B A (Crypt (pubK A) \\<lbrace>Nonce NA, Nonce NB\\<rbrace>)\n        \\<in> set evs2 \\<longrightarrow>\n        Nonce NB \\<notin> analz (knows Spy evs2);\n        Nonce NBa \\<notin> used evs2;\n        Gets Ba (Crypt (pubK Ba) \\<lbrace>Nonce NAa, Agent Aa\\<rbrace>)\n        \\<in> set evs2\\<rbrakk>\n       \\<Longrightarrow> (Aa \\<in> bad \\<longrightarrow>\n                          (\\<forall>C.\n                              Says A C (Crypt (pubK C) (Nonce NB))\n                              \\<notin> set evs2) \\<longrightarrow>\n                          (NA = NAa \\<longrightarrow>\n                           A = Aa \\<longrightarrow>\n                           B = Ba \\<longrightarrow> NB \\<noteq> NBa) \\<and>\n                          (Says B A\n                            (Crypt (pubK A)\n                              \\<lbrace>Nonce NA, Nonce NB\\<rbrace>)\n                           \\<in> set evs2 \\<longrightarrow>\n                           NB \\<noteq> NAa \\<and> NB \\<noteq> NBa)) \\<and>\n                         (Aa \\<notin> bad \\<longrightarrow>\n                          (\\<forall>C.\n                              Says A C (Crypt (pubK C) (Nonce NB))\n                              \\<notin> set evs2) \\<longrightarrow>\n                          B = Ba \\<and>\n                          A = Aa \\<and>\n                          NA = NAa \\<and> NB = NBa \\<longrightarrow>\n                          Nonce NBa \\<notin> analz (knows Spy evs2))\n 3. \\<And>evs3 Aa Ba NAa NBa.\n       \\<lbrakk>A \\<notin> bad; B \\<notin> bad; evs3 \\<in> ns_public;\n        (\\<forall>C.\n            Says A C (Crypt (pubK C) (Nonce NB))\n            \\<notin> set evs3) \\<longrightarrow>\n        Says B A (Crypt (pubK A) \\<lbrace>Nonce NA, Nonce NB\\<rbrace>)\n        \\<in> set evs3 \\<longrightarrow>\n        Nonce NB \\<notin> analz (knows Spy evs3);\n        Says Aa Ba (Crypt (pubK Ba) \\<lbrace>Nonce NAa, Agent Aa\\<rbrace>)\n        \\<in> set evs3;\n        Gets Aa (Crypt (pubK Aa) \\<lbrace>Nonce NAa, Nonce NBa\\<rbrace>)\n        \\<in> set evs3\\<rbrakk>\n       \\<Longrightarrow> Ba \\<in> bad \\<longrightarrow>\n                         (A = Aa \\<longrightarrow> NB \\<noteq> NBa) \\<and>\n                         (\\<forall>C.\n                             Says A C (Crypt (pubK C) (Nonce NB))\n                             \\<notin> set evs3) \\<longrightarrow>\n                         Says B A\n                          (Crypt (pubK A)\n                            \\<lbrace>Nonce NA, Nonce NB\\<rbrace>)\n                         \\<in> set evs3 \\<longrightarrow>\n                         NB \\<noteq> NBa", "apply (blast intro: no_nonce_NS1_NS2)+"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "(*Authentication for B: if he receives message 3 and has used NB\n  in message 2, then A has sent message 3--to somebody....*)"], ["", "lemma B_trusts_NS3_lemma [rule_format]:\n     \"\\<lbrakk>A \\<notin> bad;  B \\<notin> bad;  evs \\<in> ns_public\\<rbrakk>                    \n      \\<Longrightarrow> Crypt (pubEK B) (Nonce NB) \\<in> parts (knows Spy evs) \\<longrightarrow>\n          Says B A  (Crypt (pubEK A) \\<lbrace>Nonce NA, Nonce NB\\<rbrace>) \\<in> set evs \\<longrightarrow>\n          (\\<exists>C. Says A C (Crypt (pubEK C) (Nonce NB)) \\<in> set evs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>A \\<notin> bad; B \\<notin> bad; evs \\<in> ns_public\\<rbrakk>\n    \\<Longrightarrow> Crypt (pubK B) (Nonce NB)\n                      \\<in> parts (knows Spy evs) \\<longrightarrow>\n                      Says B A\n                       (Crypt (pubK A) \\<lbrace>Nonce NA, Nonce NB\\<rbrace>)\n                      \\<in> set evs \\<longrightarrow>\n                      (\\<exists>C.\n                          Says A C (Crypt (pubK C) (Nonce NB))\n                          \\<in> set evs)", "apply (erule ns_public.induct, auto)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>evs3 Aa NAa.\n       \\<lbrakk>A \\<notin> bad; B \\<notin> bad; evs3 \\<in> ns_public;\n        Says Aa B (Crypt (pubK B) \\<lbrace>Nonce NAa, Agent Aa\\<rbrace>)\n        \\<in> set evs3;\n        Gets Aa (Crypt (pubK Aa) \\<lbrace>Nonce NAa, Nonce NB\\<rbrace>)\n        \\<in> set evs3;\n        Crypt (pubK B) (Nonce NB) \\<notin> parts (knows Spy evs3);\n        Says B A (Crypt (pubK A) \\<lbrace>Nonce NA, Nonce NB\\<rbrace>)\n        \\<in> set evs3\\<rbrakk>\n       \\<Longrightarrow> \\<exists>C.\n                            A = Aa \\<and> C = B \\<or>\n                            Says A C (Crypt (pubK C) (Nonce NB))\n                            \\<in> set evs3", "by (blast intro: no_nonce_NS1_NS2)+"], ["", "theorem B_trusts_NS3:\n     \"\\<lbrakk>Says B A  (Crypt (pubEK A) \\<lbrace>Nonce NA, Nonce NB\\<rbrace>) \\<in> set evs;\n       Gets B (Crypt (pubEK B) (Nonce NB)) \\<in> set evs;             \n       A \\<notin> bad;  B \\<notin> bad;  evs \\<in> ns_public\\<rbrakk>                    \n      \\<Longrightarrow> \\<exists>C. Says A C (Crypt (pubEK C) (Nonce NB)) \\<in> set evs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Says B A (Crypt (pubK A) \\<lbrace>Nonce NA, Nonce NB\\<rbrace>)\n             \\<in> set evs;\n     Gets B (Crypt (pubK B) (Nonce NB)) \\<in> set evs; A \\<notin> bad;\n     B \\<notin> bad; evs \\<in> ns_public\\<rbrakk>\n    \\<Longrightarrow> \\<exists>C.\n                         Says A C (Crypt (pubK C) (Nonce NB)) \\<in> set evs", "by (blast intro: B_trusts_NS3_lemma)"], ["", "(*Can we strengthen the secrecy theorem Spy_not_see_NB?  NO*)"], ["", "lemma \"\\<lbrakk>A \\<notin> bad;  B \\<notin> bad;  evs \\<in> ns_public\\<rbrakk>            \n       \\<Longrightarrow> Says B A (Crypt (pubEK A) \\<lbrace>Nonce NA, Nonce NB\\<rbrace>) \\<in> set evs  \n           \\<longrightarrow> Nonce NB \\<notin> analz (knows Spy evs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>A \\<notin> bad; B \\<notin> bad; evs \\<in> ns_public\\<rbrakk>\n    \\<Longrightarrow> Says B A\n                       (Crypt (pubK A) \\<lbrace>Nonce NA, Nonce NB\\<rbrace>)\n                      \\<in> set evs \\<longrightarrow>\n                      Nonce NB \\<notin> analz (knows Spy evs)", "apply (erule ns_public.induct, simp_all, spy_analz)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>evs1 NAa Ba.\n       \\<lbrakk>A \\<notin> bad; B \\<notin> bad; evs1 \\<in> ns_public;\n        Says B A (Crypt (pubK A) \\<lbrace>Nonce NA, Nonce NB\\<rbrace>)\n        \\<in> set evs1 \\<longrightarrow>\n        Nonce NB \\<notin> analz (knows Spy evs1);\n        Nonce NAa \\<notin> used evs1\\<rbrakk>\n       \\<Longrightarrow> Ba \\<in> bad \\<longrightarrow>\n                         Says B A\n                          (Crypt (pubK A)\n                            \\<lbrace>Nonce NA, Nonce NB\\<rbrace>)\n                         \\<in> set evs1 \\<longrightarrow>\n                         NB \\<noteq> NAa\n 2. \\<And>evs2 NBa Ba NAa Aa.\n       \\<lbrakk>A \\<notin> bad; B \\<notin> bad; evs2 \\<in> ns_public;\n        Says B A (Crypt (pubK A) \\<lbrace>Nonce NA, Nonce NB\\<rbrace>)\n        \\<in> set evs2 \\<longrightarrow>\n        Nonce NB \\<notin> analz (knows Spy evs2);\n        Nonce NBa \\<notin> used evs2;\n        Gets Ba (Crypt (pubK Ba) \\<lbrace>Nonce NAa, Agent Aa\\<rbrace>)\n        \\<in> set evs2\\<rbrakk>\n       \\<Longrightarrow> (Aa \\<in> bad \\<longrightarrow>\n                          (NA = NAa \\<longrightarrow>\n                           A = Aa \\<longrightarrow>\n                           B = Ba \\<longrightarrow> NB \\<noteq> NBa) \\<and>\n                          (Says B A\n                            (Crypt (pubK A)\n                              \\<lbrace>Nonce NA, Nonce NB\\<rbrace>)\n                           \\<in> set evs2 \\<longrightarrow>\n                           NB \\<noteq> NAa \\<and> NB \\<noteq> NBa)) \\<and>\n                         (Aa \\<notin> bad \\<longrightarrow>\n                          B = Ba \\<and>\n                          A = Aa \\<and>\n                          NA = NAa \\<and> NB = NBa \\<longrightarrow>\n                          Nonce NBa \\<notin> analz (knows Spy evs2))\n 3. \\<And>evs3 Aa Ba NAa NBa.\n       \\<lbrakk>A \\<notin> bad; B \\<notin> bad; evs3 \\<in> ns_public;\n        Says B A (Crypt (pubK A) \\<lbrace>Nonce NA, Nonce NB\\<rbrace>)\n        \\<in> set evs3 \\<longrightarrow>\n        Nonce NB \\<notin> analz (knows Spy evs3);\n        Says Aa Ba (Crypt (pubK Ba) \\<lbrace>Nonce NAa, Agent Aa\\<rbrace>)\n        \\<in> set evs3;\n        Gets Aa (Crypt (pubK Aa) \\<lbrace>Nonce NAa, Nonce NBa\\<rbrace>)\n        \\<in> set evs3\\<rbrakk>\n       \\<Longrightarrow> Ba \\<in> bad \\<longrightarrow>\n                         Says B A\n                          (Crypt (pubK A)\n                            \\<lbrace>Nonce NA, Nonce NB\\<rbrace>)\n                         \\<in> set evs3 \\<longrightarrow>\n                         NB \\<noteq> NBa", "(*NS1: by freshness*)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>evs1 NAa Ba.\n       \\<lbrakk>A \\<notin> bad; B \\<notin> bad; evs1 \\<in> ns_public;\n        Says B A (Crypt (pubK A) \\<lbrace>Nonce NA, Nonce NB\\<rbrace>)\n        \\<in> set evs1 \\<longrightarrow>\n        Nonce NB \\<notin> analz (knows Spy evs1);\n        Nonce NAa \\<notin> used evs1\\<rbrakk>\n       \\<Longrightarrow> Ba \\<in> bad \\<longrightarrow>\n                         Says B A\n                          (Crypt (pubK A)\n                            \\<lbrace>Nonce NA, Nonce NB\\<rbrace>)\n                         \\<in> set evs1 \\<longrightarrow>\n                         NB \\<noteq> NAa\n 2. \\<And>evs2 NBa Ba NAa Aa.\n       \\<lbrakk>A \\<notin> bad; B \\<notin> bad; evs2 \\<in> ns_public;\n        Says B A (Crypt (pubK A) \\<lbrace>Nonce NA, Nonce NB\\<rbrace>)\n        \\<in> set evs2 \\<longrightarrow>\n        Nonce NB \\<notin> analz (knows Spy evs2);\n        Nonce NBa \\<notin> used evs2;\n        Gets Ba (Crypt (pubK Ba) \\<lbrace>Nonce NAa, Agent Aa\\<rbrace>)\n        \\<in> set evs2\\<rbrakk>\n       \\<Longrightarrow> (Aa \\<in> bad \\<longrightarrow>\n                          (NA = NAa \\<longrightarrow>\n                           A = Aa \\<longrightarrow>\n                           B = Ba \\<longrightarrow> NB \\<noteq> NBa) \\<and>\n                          (Says B A\n                            (Crypt (pubK A)\n                              \\<lbrace>Nonce NA, Nonce NB\\<rbrace>)\n                           \\<in> set evs2 \\<longrightarrow>\n                           NB \\<noteq> NAa \\<and> NB \\<noteq> NBa)) \\<and>\n                         (Aa \\<notin> bad \\<longrightarrow>\n                          B = Ba \\<and>\n                          A = Aa \\<and>\n                          NA = NAa \\<and> NB = NBa \\<longrightarrow>\n                          Nonce NBa \\<notin> analz (knows Spy evs2))\n 3. \\<And>evs3 Aa Ba NAa NBa.\n       \\<lbrakk>A \\<notin> bad; B \\<notin> bad; evs3 \\<in> ns_public;\n        Says B A (Crypt (pubK A) \\<lbrace>Nonce NA, Nonce NB\\<rbrace>)\n        \\<in> set evs3 \\<longrightarrow>\n        Nonce NB \\<notin> analz (knows Spy evs3);\n        Says Aa Ba (Crypt (pubK Ba) \\<lbrace>Nonce NAa, Agent Aa\\<rbrace>)\n        \\<in> set evs3;\n        Gets Aa (Crypt (pubK Aa) \\<lbrace>Nonce NAa, Nonce NBa\\<rbrace>)\n        \\<in> set evs3\\<rbrakk>\n       \\<Longrightarrow> Ba \\<in> bad \\<longrightarrow>\n                         Says B A\n                          (Crypt (pubK A)\n                            \\<lbrace>Nonce NA, Nonce NB\\<rbrace>)\n                         \\<in> set evs3 \\<longrightarrow>\n                         NB \\<noteq> NBa", "apply blast"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>evs2 NBa Ba NAa Aa.\n       \\<lbrakk>A \\<notin> bad; B \\<notin> bad; evs2 \\<in> ns_public;\n        Says B A (Crypt (pubK A) \\<lbrace>Nonce NA, Nonce NB\\<rbrace>)\n        \\<in> set evs2 \\<longrightarrow>\n        Nonce NB \\<notin> analz (knows Spy evs2);\n        Nonce NBa \\<notin> used evs2;\n        Gets Ba (Crypt (pubK Ba) \\<lbrace>Nonce NAa, Agent Aa\\<rbrace>)\n        \\<in> set evs2\\<rbrakk>\n       \\<Longrightarrow> (Aa \\<in> bad \\<longrightarrow>\n                          (NA = NAa \\<longrightarrow>\n                           A = Aa \\<longrightarrow>\n                           B = Ba \\<longrightarrow> NB \\<noteq> NBa) \\<and>\n                          (Says B A\n                            (Crypt (pubK A)\n                              \\<lbrace>Nonce NA, Nonce NB\\<rbrace>)\n                           \\<in> set evs2 \\<longrightarrow>\n                           NB \\<noteq> NAa \\<and> NB \\<noteq> NBa)) \\<and>\n                         (Aa \\<notin> bad \\<longrightarrow>\n                          B = Ba \\<and>\n                          A = Aa \\<and>\n                          NA = NAa \\<and> NB = NBa \\<longrightarrow>\n                          Nonce NBa \\<notin> analz (knows Spy evs2))\n 2. \\<And>evs3 Aa Ba NAa NBa.\n       \\<lbrakk>A \\<notin> bad; B \\<notin> bad; evs3 \\<in> ns_public;\n        Says B A (Crypt (pubK A) \\<lbrace>Nonce NA, Nonce NB\\<rbrace>)\n        \\<in> set evs3 \\<longrightarrow>\n        Nonce NB \\<notin> analz (knows Spy evs3);\n        Says Aa Ba (Crypt (pubK Ba) \\<lbrace>Nonce NAa, Agent Aa\\<rbrace>)\n        \\<in> set evs3;\n        Gets Aa (Crypt (pubK Aa) \\<lbrace>Nonce NAa, Nonce NBa\\<rbrace>)\n        \\<in> set evs3\\<rbrakk>\n       \\<Longrightarrow> Ba \\<in> bad \\<longrightarrow>\n                         Says B A\n                          (Crypt (pubK A)\n                            \\<lbrace>Nonce NA, Nonce NB\\<rbrace>)\n                         \\<in> set evs3 \\<longrightarrow>\n                         NB \\<noteq> NBa", "(*NS2: by freshness and unicity of NB*)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>evs2 NBa Ba NAa Aa.\n       \\<lbrakk>A \\<notin> bad; B \\<notin> bad; evs2 \\<in> ns_public;\n        Says B A (Crypt (pubK A) \\<lbrace>Nonce NA, Nonce NB\\<rbrace>)\n        \\<in> set evs2 \\<longrightarrow>\n        Nonce NB \\<notin> analz (knows Spy evs2);\n        Nonce NBa \\<notin> used evs2;\n        Gets Ba (Crypt (pubK Ba) \\<lbrace>Nonce NAa, Agent Aa\\<rbrace>)\n        \\<in> set evs2\\<rbrakk>\n       \\<Longrightarrow> (Aa \\<in> bad \\<longrightarrow>\n                          (NA = NAa \\<longrightarrow>\n                           A = Aa \\<longrightarrow>\n                           B = Ba \\<longrightarrow> NB \\<noteq> NBa) \\<and>\n                          (Says B A\n                            (Crypt (pubK A)\n                              \\<lbrace>Nonce NA, Nonce NB\\<rbrace>)\n                           \\<in> set evs2 \\<longrightarrow>\n                           NB \\<noteq> NAa \\<and> NB \\<noteq> NBa)) \\<and>\n                         (Aa \\<notin> bad \\<longrightarrow>\n                          B = Ba \\<and>\n                          A = Aa \\<and>\n                          NA = NAa \\<and> NB = NBa \\<longrightarrow>\n                          Nonce NBa \\<notin> analz (knows Spy evs2))\n 2. \\<And>evs3 Aa Ba NAa NBa.\n       \\<lbrakk>A \\<notin> bad; B \\<notin> bad; evs3 \\<in> ns_public;\n        Says B A (Crypt (pubK A) \\<lbrace>Nonce NA, Nonce NB\\<rbrace>)\n        \\<in> set evs3 \\<longrightarrow>\n        Nonce NB \\<notin> analz (knows Spy evs3);\n        Says Aa Ba (Crypt (pubK Ba) \\<lbrace>Nonce NAa, Agent Aa\\<rbrace>)\n        \\<in> set evs3;\n        Gets Aa (Crypt (pubK Aa) \\<lbrace>Nonce NAa, Nonce NBa\\<rbrace>)\n        \\<in> set evs3\\<rbrakk>\n       \\<Longrightarrow> Ba \\<in> bad \\<longrightarrow>\n                         Says B A\n                          (Crypt (pubK A)\n                            \\<lbrace>Nonce NA, Nonce NB\\<rbrace>)\n                         \\<in> set evs3 \\<longrightarrow>\n                         NB \\<noteq> NBa", "apply (blast intro: no_nonce_NS1_NS2)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>evs3 Aa Ba NAa NBa.\n       \\<lbrakk>A \\<notin> bad; B \\<notin> bad; evs3 \\<in> ns_public;\n        Says B A (Crypt (pubK A) \\<lbrace>Nonce NA, Nonce NB\\<rbrace>)\n        \\<in> set evs3 \\<longrightarrow>\n        Nonce NB \\<notin> analz (knows Spy evs3);\n        Says Aa Ba (Crypt (pubK Ba) \\<lbrace>Nonce NAa, Agent Aa\\<rbrace>)\n        \\<in> set evs3;\n        Gets Aa (Crypt (pubK Aa) \\<lbrace>Nonce NAa, Nonce NBa\\<rbrace>)\n        \\<in> set evs3\\<rbrakk>\n       \\<Longrightarrow> Ba \\<in> bad \\<longrightarrow>\n                         Says B A\n                          (Crypt (pubK A)\n                            \\<lbrace>Nonce NA, Nonce NB\\<rbrace>)\n                         \\<in> set evs3 \\<longrightarrow>\n                         NB \\<noteq> NBa", "(*NS3: unicity of NB identifies A and NA, but not B*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>evs3 Aa Ba NAa NBa.\n       \\<lbrakk>A \\<notin> bad; B \\<notin> bad; evs3 \\<in> ns_public;\n        Says B A (Crypt (pubK A) \\<lbrace>Nonce NA, Nonce NB\\<rbrace>)\n        \\<in> set evs3 \\<longrightarrow>\n        Nonce NB \\<notin> analz (knows Spy evs3);\n        Says Aa Ba (Crypt (pubK Ba) \\<lbrace>Nonce NAa, Agent Aa\\<rbrace>)\n        \\<in> set evs3;\n        Gets Aa (Crypt (pubK Aa) \\<lbrace>Nonce NAa, Nonce NBa\\<rbrace>)\n        \\<in> set evs3\\<rbrakk>\n       \\<Longrightarrow> Ba \\<in> bad \\<longrightarrow>\n                         Says B A\n                          (Crypt (pubK A)\n                            \\<lbrace>Nonce NA, Nonce NB\\<rbrace>)\n                         \\<in> set evs3 \\<longrightarrow>\n                         NB \\<noteq> NBa", "apply clarify"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>evs3 Aa Ba NAa NBa.\n       \\<lbrakk>A \\<notin> bad; B \\<notin> bad; evs3 \\<in> ns_public;\n        Says Aa Ba (Crypt (pubK Ba) \\<lbrace>Nonce NAa, Agent Aa\\<rbrace>)\n        \\<in> set evs3;\n        Gets Aa (Crypt (pubK Aa) \\<lbrace>Nonce NAa, Nonce NB\\<rbrace>)\n        \\<in> set evs3;\n        Ba \\<in> bad;\n        Says B A (Crypt (pubK A) \\<lbrace>Nonce NA, Nonce NB\\<rbrace>)\n        \\<in> set evs3;\n        Nonce NB \\<notin> analz (knows Spy evs3)\\<rbrakk>\n       \\<Longrightarrow> False", "apply (frule_tac A' = A in \n       Says_imp_knows_Spy [THEN parts.Inj, THEN unique_NB], auto)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>evs3 Aa Ba NAa.\n       \\<lbrakk>A \\<notin> bad; B \\<notin> bad; evs3 \\<in> ns_public;\n        Says Aa Ba (Crypt (pubK Ba) \\<lbrace>Nonce NAa, Agent Aa\\<rbrace>)\n        \\<in> set evs3;\n        Gets Aa (Crypt (pubK Aa) \\<lbrace>Nonce NAa, Nonce NB\\<rbrace>)\n        \\<in> set evs3;\n        Ba \\<in> bad;\n        Says B A (Crypt (pubK A) \\<lbrace>Nonce NA, Nonce NB\\<rbrace>)\n        \\<in> set evs3;\n        Nonce NB \\<notin> analz (knows Spy evs3)\\<rbrakk>\n       \\<Longrightarrow> False", "apply (rename_tac evs3 B' C)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>evs3a evs3 B' C.\n       \\<lbrakk>A \\<notin> bad; B \\<notin> bad; evs3a \\<in> ns_public;\n        Says evs3 B' (Crypt (pubK B') \\<lbrace>Nonce C, Agent evs3\\<rbrace>)\n        \\<in> set evs3a;\n        Gets evs3 (Crypt (pubK evs3) \\<lbrace>Nonce C, Nonce NB\\<rbrace>)\n        \\<in> set evs3a;\n        B' \\<in> bad;\n        Says B A (Crypt (pubK A) \\<lbrace>Nonce NA, Nonce NB\\<rbrace>)\n        \\<in> set evs3a;\n        Nonce NB \\<notin> analz (knows Spy evs3a)\\<rbrakk>\n       \\<Longrightarrow> False", "txt\\<open>This is the attack!\n@{subgoals[display,indent=0,margin=65]}\n\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>evs3a evs3 B' C.\n       \\<lbrakk>A \\<notin> bad; B \\<notin> bad; evs3a \\<in> ns_public;\n        Says evs3 B' (Crypt (pubK B') \\<lbrace>Nonce C, Agent evs3\\<rbrace>)\n        \\<in> set evs3a;\n        Gets evs3 (Crypt (pubK evs3) \\<lbrace>Nonce C, Nonce NB\\<rbrace>)\n        \\<in> set evs3a;\n        B' \\<in> bad;\n        Says B A (Crypt (pubK A) \\<lbrace>Nonce NA, Nonce NB\\<rbrace>)\n        \\<in> set evs3a;\n        Nonce NB \\<notin> analz (knows Spy evs3a)\\<rbrakk>\n       \\<Longrightarrow> False", "oops"], ["", "end"]]}