{"file_name": "/home/qj213/afp-2021-10-22/thys/Inductive_Confidentiality/DolevYao/ConfidentialityDY.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Inductive_Confidentiality", "problem_names": ["lemma Spy_see_priEK: \n      \"evs \\<in> ns_public \\<Longrightarrow> (Key (priEK A) \\<in> parts (spies evs)) = (A \\<in> bad)\"", "lemma Spy_analz_priEK: \n      \"evs \\<in> ns_public \\<Longrightarrow> (Key (priEK A) \\<in> analz (spies evs)) = (A \\<in> bad)\"", "lemma Spy_not_see_NA: \n\"\\<lbrakk>Says A B (Crypt(pubEK B) \\<lbrace>Nonce NA, Agent A\\<rbrace>) \\<in> set evs;\n  A \\<notin> bad;  B \\<notin> bad;  evs \\<in> ns_public\\<rbrakk>                     \n  \\<Longrightarrow> Nonce NA \\<notin> analz (spies evs)\"", "lemma Spy_not_see_NB:\n\"\\<lbrakk>Says B A (Crypt (pubEK A) \\<lbrace>Nonce NA, Nonce NB\\<rbrace>) \\<in> set evs;   \n \\<forall>C. Says A C (Crypt (pubEK C) (Nonce NB)) \\<notin> set evs;      \n A \\<notin> bad;  B \\<notin> bad;  evs \\<in> ns_public\\<rbrakk>                      \n \\<Longrightarrow> Nonce NB \\<notin> analz (spies evs)\"", "lemma staticSecret_parts_Spy:\n\"\\<lbrakk>m \\<in> parts (knows Spy evs); m \\<in> staticSecret A\\<rbrakk>  \\<Longrightarrow>\n A \\<in> bad \\<or>\n (\\<exists>C B X. Says C B X \\<in> set evs \\<and> m \\<in> parts{X}) \\<or>\n (\\<exists>C Y. Notes C Y \\<in> set evs \\<and> C \\<in> bad \\<and> m \\<in> parts{Y})\"", "lemma staticSecret_analz_Spy:\n\"\\<lbrakk>m \\<in> analz (knows Spy evs); m \\<in> staticSecret A\\<rbrakk>  \\<Longrightarrow>\n A \\<in> bad \\<or>\n (\\<exists>C B X. Says C B X \\<in> set evs \\<and> m \\<in> parts{X}) \\<or>\n (\\<exists>C Y. Notes C Y \\<in> set evs \\<and> C \\<in> bad \\<and> m \\<in> parts{Y})\"", "lemma secret_parts_Spy:\n\"m \\<in> parts (knows Spy evs)  \\<Longrightarrow>\n m \\<in> initState Spy \\<or>\n (\\<exists>C B X. Says C B X \\<in> set evs \\<and> m \\<in> parts{X}) \\<or>\n (\\<exists>C Y. Notes C Y \\<in> set evs \\<and> C \\<in> bad \\<and> m \\<in> parts{Y})\"", "lemma secret_parts_Spy_converse:\n\" m \\<in> initState Spy \\<or>\n (\\<exists>C B X. Says C B X \\<in> set evs \\<and> m \\<in> parts{X}) \\<or>\n (\\<exists>C Y. Notes C Y \\<in> set evs \\<and> C \\<in> bad \\<and> m \\<in> parts{Y})\n \\<Longrightarrow> m \\<in> parts(knows Spy evs)\"", "lemma secret_analz_Spy:\n\"m \\<in> analz (knows Spy evs)  \\<Longrightarrow>\n m \\<in> initState Spy \\<or>\n (\\<exists>C B X. Says C B X \\<in> set evs \\<and> m \\<in> parts{X}) \\<or>\n (\\<exists>C Y. Notes C Y \\<in> set evs \\<and> C \\<in> bad \\<and> m \\<in> parts{Y})\"", "lemma NS_Spy_see_staticSecret:\n \"\\<lbrakk>m \\<in> staticSecret A; evs \\<in> ns_public\\<rbrakk> \\<Longrightarrow>\n   m \\<in> parts(knows Spy evs) = (A \\<in> bad)\"", "lemma NS_no_Notes:\n \"evs \\<in> ns_public \\<Longrightarrow> Notes A X \\<notin> set evs\"", "lemma NS_staticSecret_parts_Spy_weak:\n\"\\<lbrakk>m \\<in> parts (knows Spy evs); m \\<in> staticSecret A;\n  evs \\<in> ns_public\\<rbrakk> \\<Longrightarrow> A \\<in> bad \\<or>\n (\\<exists>C B X. Says C B X \\<in> set evs \\<and> m \\<in> parts{X})\"", "lemma NS_Says_staticSecret:\n \"\\<lbrakk>Says A B X \\<in> set evs; m \\<in> staticSecret C; m \\<in> parts{X};\n   evs \\<in> ns_public\\<rbrakk> \\<Longrightarrow> A=Spy\"", "lemma staticSecret_synth_eq: \n\"m \\<in> staticSecret A \\<Longrightarrow> (m \\<in> synth H) = (m \\<in> H)\"", "lemma NS_Says_Spy_staticSecret:\n \"\\<lbrakk>Says Spy B X \\<in> set evs; m \\<in> parts{X};\n   m \\<in> staticSecret A; evs \\<in> ns_public\\<rbrakk> \\<Longrightarrow> A \\<in> bad\"", "lemma NS_staticSecret_parts_Spy:\n\"\\<lbrakk>m \\<in> parts (knows Spy evs); m \\<in> staticSecret A;\n  evs \\<in> ns_public\\<rbrakk> \\<Longrightarrow> A \\<in> bad\"", "lemma NS_Spy_see_staticSecret_spec:\n\"\\<lbrakk>m \\<in> staticSecret A; evs \\<in> ns_public\\<rbrakk> \\<Longrightarrow>\n m \\<in> parts (knows Spy evs) = (A \\<in> bad)\"", "lemma NS_Spy_analz_staticSecret:\n\"\\<lbrakk>m \\<in> staticSecret A; evs \\<in> ns_public\\<rbrakk> \\<Longrightarrow>\n m \\<in> analz (knows Spy evs) = (A \\<in> bad)\"", "lemma NS_staticSecret_subset_parts_knows_Spy:\n\"evs \\<in> ns_public \\<Longrightarrow>\n staticSecret A \\<subseteq> parts (knows Spy evs) = (A \\<in> bad)\"", "lemma NS_staticSecret_subset_analz_knows_Spy: \n\"evs \\<in> ns_public \\<Longrightarrow>\n staticSecret A \\<subseteq> analz (knows Spy evs) = (A \\<in> bad)\""], "translations": [["", "lemma Spy_see_priEK: \n      \"evs \\<in> ns_public \\<Longrightarrow> (Key (priEK A) \\<in> parts (spies evs)) = (A \\<in> bad)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. evs \\<in> ns_public \\<Longrightarrow>\n    (Key (priEK A) \\<in> parts (knows Spy evs)) = (A \\<in> bad)", "apply (erule ns_public.induct, simp_all)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>evsf X.\n       \\<lbrakk>evsf \\<in> ns_public;\n        (Key (priEK A) \\<in> parts (knows Spy evsf)) = (A \\<in> bad);\n        X \\<in> synth (analz (knows Spy evsf))\\<rbrakk>\n       \\<Longrightarrow> (Key (priEK A)\n                          \\<in> parts (insert X (knows Spy evsf))) =\n                         (A \\<in> bad)", "(*Fake: screenshot1*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>evsf X.\n       \\<lbrakk>evsf \\<in> ns_public;\n        (Key (priEK A) \\<in> parts (knows Spy evsf)) = (A \\<in> bad);\n        X \\<in> synth (analz (knows Spy evsf))\\<rbrakk>\n       \\<Longrightarrow> (Key (priEK A)\n                          \\<in> parts (insert X (knows Spy evsf))) =\n                         (A \\<in> bad)", "apply (cases \"A:bad\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>evsf X.\n       \\<lbrakk>evsf \\<in> ns_public;\n        (Key (priEK A) \\<in> parts (knows Spy evsf)) = (A \\<in> bad);\n        X \\<in> synth (analz (knows Spy evsf)); A \\<in> bad\\<rbrakk>\n       \\<Longrightarrow> (Key (priEK A)\n                          \\<in> parts (insert X (knows Spy evsf))) =\n                         (A \\<in> bad)\n 2. \\<And>evsf X.\n       \\<lbrakk>evsf \\<in> ns_public;\n        (Key (priEK A) \\<in> parts (knows Spy evsf)) = (A \\<in> bad);\n        X \\<in> synth (analz (knows Spy evsf)); A \\<notin> bad\\<rbrakk>\n       \\<Longrightarrow> (Key (priEK A)\n                          \\<in> parts (insert X (knows Spy evsf))) =\n                         (A \\<in> bad)", "thm ccontr"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>evsf X.\n       \\<lbrakk>evsf \\<in> ns_public;\n        (Key (priEK A) \\<in> parts (knows Spy evsf)) = (A \\<in> bad);\n        X \\<in> synth (analz (knows Spy evsf)); A \\<in> bad\\<rbrakk>\n       \\<Longrightarrow> (Key (priEK A)\n                          \\<in> parts (insert X (knows Spy evsf))) =\n                         (A \\<in> bad)\n 2. \\<And>evsf X.\n       \\<lbrakk>evsf \\<in> ns_public;\n        (Key (priEK A) \\<in> parts (knows Spy evsf)) = (A \\<in> bad);\n        X \\<in> synth (analz (knows Spy evsf)); A \\<notin> bad\\<rbrakk>\n       \\<Longrightarrow> (Key (priEK A)\n                          \\<in> parts (insert X (knows Spy evsf))) =\n                         (A \\<in> bad)", "(*apply (rule ccontr) apply simp*)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>evsf X.\n       \\<lbrakk>evsf \\<in> ns_public;\n        (Key (priEK A) \\<in> parts (knows Spy evsf)) = (A \\<in> bad);\n        X \\<in> synth (analz (knows Spy evsf)); A \\<in> bad\\<rbrakk>\n       \\<Longrightarrow> (Key (priEK A)\n                          \\<in> parts (insert X (knows Spy evsf))) =\n                         (A \\<in> bad)\n 2. \\<And>evsf X.\n       \\<lbrakk>evsf \\<in> ns_public;\n        (Key (priEK A) \\<in> parts (knows Spy evsf)) = (A \\<in> bad);\n        X \\<in> synth (analz (knows Spy evsf)); A \\<notin> bad\\<rbrakk>\n       \\<Longrightarrow> (Key (priEK A)\n                          \\<in> parts (insert X (knows Spy evsf))) =\n                         (A \\<in> bad)", "apply blast"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>evsf X.\n       \\<lbrakk>evsf \\<in> ns_public;\n        (Key (priEK A) \\<in> parts (knows Spy evsf)) = (A \\<in> bad);\n        X \\<in> synth (analz (knows Spy evsf)); A \\<notin> bad\\<rbrakk>\n       \\<Longrightarrow> (Key (priEK A)\n                          \\<in> parts (insert X (knows Spy evsf))) =\n                         (A \\<in> bad)", "(*Spy knows bad agents' keys since start*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>evsf X.\n       \\<lbrakk>evsf \\<in> ns_public;\n        (Key (priEK A) \\<in> parts (knows Spy evsf)) = (A \\<in> bad);\n        X \\<in> synth (analz (knows Spy evsf)); A \\<notin> bad\\<rbrakk>\n       \\<Longrightarrow> (Key (priEK A)\n                          \\<in> parts (insert X (knows Spy evsf))) =\n                         (A \\<in> bad)", "apply clarify"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>evsf X.\n       \\<lbrakk>evsf \\<in> ns_public;\n        X \\<in> synth (analz (knows Spy evsf)); A \\<notin> bad;\n        Key (priEK A) \\<notin> parts (knows Spy evsf); A \\<notin> bad;\n        Key (priEK A) \\<in> parts (insert X (knows Spy evsf))\\<rbrakk>\n       \\<Longrightarrow> A \\<in> bad", "(*screenshot2*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>evsf X.\n       \\<lbrakk>evsf \\<in> ns_public;\n        X \\<in> synth (analz (knows Spy evsf)); A \\<notin> bad;\n        Key (priEK A) \\<notin> parts (knows Spy evsf); A \\<notin> bad;\n        Key (priEK A) \\<in> parts (insert X (knows Spy evsf))\\<rbrakk>\n       \\<Longrightarrow> A \\<in> bad", "thm Fake_parts_insert [THEN subsetD]"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>evsf X.\n       \\<lbrakk>evsf \\<in> ns_public;\n        X \\<in> synth (analz (knows Spy evsf)); A \\<notin> bad;\n        Key (priEK A) \\<notin> parts (knows Spy evsf); A \\<notin> bad;\n        Key (priEK A) \\<in> parts (insert X (knows Spy evsf))\\<rbrakk>\n       \\<Longrightarrow> A \\<in> bad", "apply (drule Fake_parts_insert [THEN subsetD], simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>evsf X.\n       \\<lbrakk>evsf \\<in> ns_public; A \\<notin> bad;\n        Key (priEK A) \\<notin> parts (knows Spy evsf); A \\<notin> bad;\n        Key (priEK A) \\<in> parts (insert X (knows Spy evsf));\n        Key (priEK A)\n        \\<in> synth (analz (knows Spy evsf)) \\<union>\n              parts (knows Spy evsf)\\<rbrakk>\n       \\<Longrightarrow> A \\<in> bad", "(*screenshot3*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>evsf X.\n       \\<lbrakk>evsf \\<in> ns_public; A \\<notin> bad;\n        Key (priEK A) \\<notin> parts (knows Spy evsf); A \\<notin> bad;\n        Key (priEK A) \\<in> parts (insert X (knows Spy evsf));\n        Key (priEK A)\n        \\<in> synth (analz (knows Spy evsf)) \\<union>\n              parts (knows Spy evsf)\\<rbrakk>\n       \\<Longrightarrow> A \\<in> bad", "apply (blast dest: analz_into_parts)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma Spy_analz_priEK: \n      \"evs \\<in> ns_public \\<Longrightarrow> (Key (priEK A) \\<in> analz (spies evs)) = (A \\<in> bad)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. evs \\<in> ns_public \\<Longrightarrow>\n    (Key (priEK A) \\<in> analz (knows Spy evs)) = (A \\<in> bad)", "(*apply (auto simp: Spy_see_priEK dest: analz_into_parts)*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. evs \\<in> ns_public \\<Longrightarrow>\n    (Key (priEK A) \\<in> analz (knows Spy evs)) = (A \\<in> bad)", "apply (erule ns_public.induct, simp_all)"], ["proof (prove)\ngoal (2 subgoals):\n 1. (Key (priEK A)\n     \\<in> analz\n            (Key ` invKey ` pubK ` bad \\<union>\n             Key ` invKey ` pubSK ` bad \\<union>\n             Key ` shrK ` bad \\<union>\n             Key ` range pubK \\<union>\n             Key ` range pubSK)) =\n    (A \\<in> bad)\n 2. \\<And>evsf X.\n       \\<lbrakk>evsf \\<in> ns_public;\n        (Key (priEK A) \\<in> analz (knows Spy evsf)) = (A \\<in> bad);\n        X \\<in> synth (analz (knows Spy evsf))\\<rbrakk>\n       \\<Longrightarrow> (Key (priEK A)\n                          \\<in> analz (insert X (knows Spy evsf))) =\n                         (A \\<in> bad)", "(*Nil*)"], ["proof (prove)\ngoal (2 subgoals):\n 1. (Key (priEK A)\n     \\<in> analz\n            (Key ` invKey ` pubK ` bad \\<union>\n             Key ` invKey ` pubSK ` bad \\<union>\n             Key ` shrK ` bad \\<union>\n             Key ` range pubK \\<union>\n             Key ` range pubSK)) =\n    (A \\<in> bad)\n 2. \\<And>evsf X.\n       \\<lbrakk>evsf \\<in> ns_public;\n        (Key (priEK A) \\<in> analz (knows Spy evsf)) = (A \\<in> bad);\n        X \\<in> synth (analz (knows Spy evsf))\\<rbrakk>\n       \\<Longrightarrow> (Key (priEK A)\n                          \\<in> analz (insert X (knows Spy evsf))) =\n                         (A \\<in> bad)", "thm analz_image_freshK_simps"], ["proof (prove)\ngoal (2 subgoals):\n 1. (Key (priEK A)\n     \\<in> analz\n            (Key ` invKey ` pubK ` bad \\<union>\n             Key ` invKey ` pubSK ` bad \\<union>\n             Key ` shrK ` bad \\<union>\n             Key ` range pubK \\<union>\n             Key ` range pubSK)) =\n    (A \\<in> bad)\n 2. \\<And>evsf X.\n       \\<lbrakk>evsf \\<in> ns_public;\n        (Key (priEK A) \\<in> analz (knows Spy evsf)) = (A \\<in> bad);\n        X \\<in> synth (analz (knows Spy evsf))\\<rbrakk>\n       \\<Longrightarrow> (Key (priEK A)\n                          \\<in> analz (insert X (knows Spy evsf))) =\n                         (A \\<in> bad)", "apply (simp add: analz_image_freshK_simps)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>evsf X.\n       \\<lbrakk>evsf \\<in> ns_public;\n        (Key (priEK A) \\<in> analz (knows Spy evsf)) = (A \\<in> bad);\n        X \\<in> synth (analz (knows Spy evsf))\\<rbrakk>\n       \\<Longrightarrow> (Key (priEK A)\n                          \\<in> analz (insert X (knows Spy evsf))) =\n                         (A \\<in> bad)", "(*Fake*)\n(*apply spy_analz would close, alternatively:*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>evsf X.\n       \\<lbrakk>evsf \\<in> ns_public;\n        (Key (priEK A) \\<in> analz (knows Spy evsf)) = (A \\<in> bad);\n        X \\<in> synth (analz (knows Spy evsf))\\<rbrakk>\n       \\<Longrightarrow> (Key (priEK A)\n                          \\<in> analz (insert X (knows Spy evsf))) =\n                         (A \\<in> bad)", "apply (cases \"A:bad\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>evsf X.\n       \\<lbrakk>evsf \\<in> ns_public;\n        (Key (priEK A) \\<in> analz (knows Spy evsf)) = (A \\<in> bad);\n        X \\<in> synth (analz (knows Spy evsf)); A \\<in> bad\\<rbrakk>\n       \\<Longrightarrow> (Key (priEK A)\n                          \\<in> analz (insert X (knows Spy evsf))) =\n                         (A \\<in> bad)\n 2. \\<And>evsf X.\n       \\<lbrakk>evsf \\<in> ns_public;\n        (Key (priEK A) \\<in> analz (knows Spy evsf)) = (A \\<in> bad);\n        X \\<in> synth (analz (knows Spy evsf)); A \\<notin> bad\\<rbrakk>\n       \\<Longrightarrow> (Key (priEK A)\n                          \\<in> analz (insert X (knows Spy evsf))) =\n                         (A \\<in> bad)", "apply clarify"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>evsf X.\n       \\<lbrakk>evsf \\<in> ns_public;\n        X \\<in> synth (analz (knows Spy evsf)); A \\<in> bad;\n        Key (priEK A) \\<in> analz (knows Spy evsf); A \\<in> bad;\n        A \\<in> bad\\<rbrakk>\n       \\<Longrightarrow> Key (priEK A)\n                         \\<in> analz (insert X (knows Spy evsf))\n 2. \\<And>evsf X.\n       \\<lbrakk>evsf \\<in> ns_public;\n        (Key (priEK A) \\<in> analz (knows Spy evsf)) = (A \\<in> bad);\n        X \\<in> synth (analz (knows Spy evsf)); A \\<notin> bad\\<rbrakk>\n       \\<Longrightarrow> (Key (priEK A)\n                          \\<in> analz (insert X (knows Spy evsf))) =\n                         (A \\<in> bad)", "apply simp"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>evsf X.\n       \\<lbrakk>evsf \\<in> ns_public;\n        X \\<in> synth (analz (knows Spy evsf));\n        Key (priEK A) \\<in> analz (knows Spy evsf); A \\<in> bad\\<rbrakk>\n       \\<Longrightarrow> Key (priEK A)\n                         \\<in> analz (insert X (knows Spy evsf))\n 2. \\<And>evsf X.\n       \\<lbrakk>evsf \\<in> ns_public;\n        (Key (priEK A) \\<in> analz (knows Spy evsf)) = (A \\<in> bad);\n        X \\<in> synth (analz (knows Spy evsf)); A \\<notin> bad\\<rbrakk>\n       \\<Longrightarrow> (Key (priEK A)\n                          \\<in> analz (insert X (knows Spy evsf))) =\n                         (A \\<in> bad)", "apply blast"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>evsf X.\n       \\<lbrakk>evsf \\<in> ns_public;\n        (Key (priEK A) \\<in> analz (knows Spy evsf)) = (A \\<in> bad);\n        X \\<in> synth (analz (knows Spy evsf)); A \\<notin> bad\\<rbrakk>\n       \\<Longrightarrow> (Key (priEK A)\n                          \\<in> analz (insert X (knows Spy evsf))) =\n                         (A \\<in> bad)", "(*Spy knows bad agents' keys since start*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>evsf X.\n       \\<lbrakk>evsf \\<in> ns_public;\n        (Key (priEK A) \\<in> analz (knows Spy evsf)) = (A \\<in> bad);\n        X \\<in> synth (analz (knows Spy evsf)); A \\<notin> bad\\<rbrakk>\n       \\<Longrightarrow> (Key (priEK A)\n                          \\<in> analz (insert X (knows Spy evsf))) =\n                         (A \\<in> bad)", "apply clarsimp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>evsf X.\n       \\<lbrakk>evsf \\<in> ns_public;\n        Key (priEK A) \\<notin> analz (knows Spy evsf);\n        X \\<in> synth (analz (knows Spy evsf)); A \\<notin> bad;\n        Key (priEK A) \\<in> analz (insert X (knows Spy evsf))\\<rbrakk>\n       \\<Longrightarrow> False", "apply (drule Fake_analz_insert [THEN subsetD], simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>evsf X.\n       \\<lbrakk>evsf \\<in> ns_public;\n        Key (priEK A) \\<notin> analz (knows Spy evsf); A \\<notin> bad;\n        Key (priEK A) \\<in> analz (insert X (knows Spy evsf));\n        Key (priEK A)\n        \\<in> synth (analz (knows Spy evsf)) \\<union>\n              analz (knows Spy evsf \\<union> knows Spy evsf)\\<rbrakk>\n       \\<Longrightarrow> False", "apply clarsimp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "subsection\\<open>On dynamic secrets\\<close>"], ["", "lemma Spy_not_see_NA: \n\"\\<lbrakk>Says A B (Crypt(pubEK B) \\<lbrace>Nonce NA, Agent A\\<rbrace>) \\<in> set evs;\n  A \\<notin> bad;  B \\<notin> bad;  evs \\<in> ns_public\\<rbrakk>                     \n  \\<Longrightarrow> Nonce NA \\<notin> analz (spies evs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Says A B (Crypt (pubK B) \\<lbrace>Nonce NA, Agent A\\<rbrace>)\n             \\<in> set evs;\n     A \\<notin> bad; B \\<notin> bad; evs \\<in> ns_public\\<rbrakk>\n    \\<Longrightarrow> Nonce NA \\<notin> analz (knows Spy evs)", "apply (erule rev_mp, erule ns_public.induct)"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<lbrakk>A \\<notin> bad; B \\<notin> bad\\<rbrakk>\n    \\<Longrightarrow> Says A B\n                       (Crypt (pubK B) \\<lbrace>Nonce NA, Agent A\\<rbrace>)\n                      \\<in> set [] \\<longrightarrow>\n                      Nonce NA \\<notin> analz (knows Spy [])\n 2. \\<And>evsf X Ba.\n       \\<lbrakk>A \\<notin> bad; B \\<notin> bad; evsf \\<in> ns_public;\n        Says A B (Crypt (pubK B) \\<lbrace>Nonce NA, Agent A\\<rbrace>)\n        \\<in> set evsf \\<longrightarrow>\n        Nonce NA \\<notin> analz (knows Spy evsf);\n        X \\<in> synth (analz (knows Spy evsf))\\<rbrakk>\n       \\<Longrightarrow> Says A B\n                          (Crypt (pubK B)\n                            \\<lbrace>Nonce NA, Agent A\\<rbrace>)\n                         \\<in> set (Says Spy Ba X # evsf) \\<longrightarrow>\n                         Nonce NA\n                         \\<notin> analz (knows Spy (Says Spy Ba X # evsf))\n 3. \\<And>evsr Aa Ba X.\n       \\<lbrakk>A \\<notin> bad; B \\<notin> bad; evsr \\<in> ns_public;\n        Says A B (Crypt (pubK B) \\<lbrace>Nonce NA, Agent A\\<rbrace>)\n        \\<in> set evsr \\<longrightarrow>\n        Nonce NA \\<notin> analz (knows Spy evsr);\n        Says Aa Ba X \\<in> set evsr\\<rbrakk>\n       \\<Longrightarrow> Says A B\n                          (Crypt (pubK B)\n                            \\<lbrace>Nonce NA, Agent A\\<rbrace>)\n                         \\<in> set (Gets Ba X # evsr) \\<longrightarrow>\n                         Nonce NA\n                         \\<notin> analz (knows Spy (Gets Ba X # evsr))\n 4. \\<And>evs1 NAa Aa Ba.\n       \\<lbrakk>A \\<notin> bad; B \\<notin> bad; evs1 \\<in> ns_public;\n        Says A B (Crypt (pubK B) \\<lbrace>Nonce NA, Agent A\\<rbrace>)\n        \\<in> set evs1 \\<longrightarrow>\n        Nonce NA \\<notin> analz (knows Spy evs1);\n        Nonce NAa \\<notin> used evs1\\<rbrakk>\n       \\<Longrightarrow> Says A B\n                          (Crypt (pubK B)\n                            \\<lbrace>Nonce NA, Agent A\\<rbrace>)\n                         \\<in> set (Says Aa Ba\n                                     (Crypt (pubK Ba)\n \\<lbrace>Nonce NAa, Agent Aa\\<rbrace>) #\n                                    evs1) \\<longrightarrow>\n                         Nonce NA\n                         \\<notin> analz\n                                   (knows Spy\n                                     (Says Aa Ba\n (Crypt (pubK Ba) \\<lbrace>Nonce NAa, Agent Aa\\<rbrace>) #\nevs1))\n 5. \\<And>evs2 NB Ba NAa Aa.\n       \\<lbrakk>A \\<notin> bad; B \\<notin> bad; evs2 \\<in> ns_public;\n        Says A B (Crypt (pubK B) \\<lbrace>Nonce NA, Agent A\\<rbrace>)\n        \\<in> set evs2 \\<longrightarrow>\n        Nonce NA \\<notin> analz (knows Spy evs2);\n        Nonce NB \\<notin> used evs2;\n        Gets Ba (Crypt (pubK Ba) \\<lbrace>Nonce NAa, Agent Aa\\<rbrace>)\n        \\<in> set evs2\\<rbrakk>\n       \\<Longrightarrow> Says A B\n                          (Crypt (pubK B)\n                            \\<lbrace>Nonce NA, Agent A\\<rbrace>)\n                         \\<in> set (Says Ba Aa\n                                     (Crypt (pubK Aa)\n \\<lbrace>Nonce NAa, Nonce NB\\<rbrace>) #\n                                    evs2) \\<longrightarrow>\n                         Nonce NA\n                         \\<notin> analz\n                                   (knows Spy\n                                     (Says Ba Aa\n (Crypt (pubK Aa) \\<lbrace>Nonce NAa, Nonce NB\\<rbrace>) #\nevs2))\n 6. \\<And>evs3 Aa Ba NAa NB.\n       \\<lbrakk>A \\<notin> bad; B \\<notin> bad; evs3 \\<in> ns_public;\n        Says A B (Crypt (pubK B) \\<lbrace>Nonce NA, Agent A\\<rbrace>)\n        \\<in> set evs3 \\<longrightarrow>\n        Nonce NA \\<notin> analz (knows Spy evs3);\n        Says Aa Ba (Crypt (pubK Ba) \\<lbrace>Nonce NAa, Agent Aa\\<rbrace>)\n        \\<in> set evs3;\n        Gets Aa (Crypt (pubK Aa) \\<lbrace>Nonce NAa, Nonce NB\\<rbrace>)\n        \\<in> set evs3\\<rbrakk>\n       \\<Longrightarrow> Says A B\n                          (Crypt (pubK B)\n                            \\<lbrace>Nonce NA, Agent A\\<rbrace>)\n                         \\<in> set (Says Aa Ba\n                                     (Crypt (pubK Ba) (Nonce NB)) #\n                                    evs3) \\<longrightarrow>\n                         Nonce NA\n                         \\<notin> analz\n                                   (knows Spy\n                                     (Says Aa Ba\n (Crypt (pubK Ba) (Nonce NB)) #\nevs3))", "apply (simp_all add: Spy_analz_priEK)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>evsf X Ba.\n       \\<lbrakk>A \\<notin> bad; B \\<notin> bad; evsf \\<in> ns_public;\n        Says A B (Crypt (pubK B) \\<lbrace>Nonce NA, Agent A\\<rbrace>)\n        \\<in> set evsf \\<longrightarrow>\n        Nonce NA \\<notin> analz (knows Spy evsf);\n        X \\<in> synth (analz (knows Spy evsf))\\<rbrakk>\n       \\<Longrightarrow> (A = Spy \\<and>\n                          B = Ba \\<and>\n                          Crypt (pubK B)\n                           \\<lbrace>Nonce NA, Agent A\\<rbrace> =\n                          X \\<longrightarrow>\n                          Nonce NA\n                          \\<notin> analz (insert X (knows Spy evsf))) \\<and>\n                         (Says A B\n                           (Crypt (pubK B)\n                             \\<lbrace>Nonce NA, Agent A\\<rbrace>)\n                          \\<in> set evsf \\<longrightarrow>\n                          Nonce NA\n                          \\<notin> analz (insert X (knows Spy evsf)))\n 2. \\<And>evs1 NAa Aa Ba.\n       \\<lbrakk>A \\<notin> bad; B \\<notin> bad; evs1 \\<in> ns_public;\n        Says A B (Crypt (pubK B) \\<lbrace>Nonce NA, Agent A\\<rbrace>)\n        \\<in> set evs1 \\<longrightarrow>\n        Nonce NA \\<notin> analz (knows Spy evs1);\n        Nonce NAa \\<notin> used evs1\\<rbrakk>\n       \\<Longrightarrow> (Ba \\<in> bad \\<longrightarrow>\n                          (NA = NAa \\<longrightarrow>\n                           B = Ba \\<longrightarrow> A \\<noteq> Aa) \\<and>\n                          (Says A B\n                            (Crypt (pubK B)\n                              \\<lbrace>Nonce NA, Agent A\\<rbrace>)\n                           \\<in> set evs1 \\<longrightarrow>\n                           NA \\<noteq> NAa)) \\<and>\n                         (Ba \\<notin> bad \\<longrightarrow>\n                          A = Aa \\<and>\n                          B = Ba \\<and>\n                          NA = NAa \\<and> A = Aa \\<longrightarrow>\n                          Nonce NAa \\<notin> analz (knows Spy evs1))\n 3. \\<And>evs2 NB Ba NAa Aa.\n       \\<lbrakk>A \\<notin> bad; B \\<notin> bad; evs2 \\<in> ns_public;\n        Says A B (Crypt (pubK B) \\<lbrace>Nonce NA, Agent A\\<rbrace>)\n        \\<in> set evs2 \\<longrightarrow>\n        Nonce NA \\<notin> analz (knows Spy evs2);\n        Nonce NB \\<notin> used evs2;\n        Gets Ba (Crypt (pubK Ba) \\<lbrace>Nonce NAa, Agent Aa\\<rbrace>)\n        \\<in> set evs2\\<rbrakk>\n       \\<Longrightarrow> Aa \\<in> bad \\<longrightarrow>\n                         Says A B\n                          (Crypt (pubK B)\n                            \\<lbrace>Nonce NA, Agent A\\<rbrace>)\n                         \\<in> set evs2 \\<longrightarrow>\n                         NA \\<noteq> NAa \\<and> NA \\<noteq> NB\n 4. \\<And>evs3 Aa Ba NAa NB.\n       \\<lbrakk>A \\<notin> bad; B \\<notin> bad; evs3 \\<in> ns_public;\n        Says A B (Crypt (pubK B) \\<lbrace>Nonce NA, Agent A\\<rbrace>)\n        \\<in> set evs3 \\<longrightarrow>\n        Nonce NA \\<notin> analz (knows Spy evs3);\n        Says Aa Ba (Crypt (pubK Ba) \\<lbrace>Nonce NAa, Agent Aa\\<rbrace>)\n        \\<in> set evs3;\n        Gets Aa (Crypt (pubK Aa) \\<lbrace>Nonce NAa, Nonce NB\\<rbrace>)\n        \\<in> set evs3\\<rbrakk>\n       \\<Longrightarrow> Ba \\<in> bad \\<longrightarrow>\n                         Says A B\n                          (Crypt (pubK B)\n                            \\<lbrace>Nonce NA, Agent A\\<rbrace>)\n                         \\<in> set evs3 \\<longrightarrow>\n                         NA \\<noteq> NB", "(*screenshot1*)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>evsf X Ba.\n       \\<lbrakk>A \\<notin> bad; B \\<notin> bad; evsf \\<in> ns_public;\n        Says A B (Crypt (pubK B) \\<lbrace>Nonce NA, Agent A\\<rbrace>)\n        \\<in> set evsf \\<longrightarrow>\n        Nonce NA \\<notin> analz (knows Spy evsf);\n        X \\<in> synth (analz (knows Spy evsf))\\<rbrakk>\n       \\<Longrightarrow> (A = Spy \\<and>\n                          B = Ba \\<and>\n                          Crypt (pubK B)\n                           \\<lbrace>Nonce NA, Agent A\\<rbrace> =\n                          X \\<longrightarrow>\n                          Nonce NA\n                          \\<notin> analz (insert X (knows Spy evsf))) \\<and>\n                         (Says A B\n                           (Crypt (pubK B)\n                             \\<lbrace>Nonce NA, Agent A\\<rbrace>)\n                          \\<in> set evsf \\<longrightarrow>\n                          Nonce NA\n                          \\<notin> analz (insert X (knows Spy evsf)))\n 2. \\<And>evs1 NAa Aa Ba.\n       \\<lbrakk>A \\<notin> bad; B \\<notin> bad; evs1 \\<in> ns_public;\n        Says A B (Crypt (pubK B) \\<lbrace>Nonce NA, Agent A\\<rbrace>)\n        \\<in> set evs1 \\<longrightarrow>\n        Nonce NA \\<notin> analz (knows Spy evs1);\n        Nonce NAa \\<notin> used evs1\\<rbrakk>\n       \\<Longrightarrow> (Ba \\<in> bad \\<longrightarrow>\n                          (NA = NAa \\<longrightarrow>\n                           B = Ba \\<longrightarrow> A \\<noteq> Aa) \\<and>\n                          (Says A B\n                            (Crypt (pubK B)\n                              \\<lbrace>Nonce NA, Agent A\\<rbrace>)\n                           \\<in> set evs1 \\<longrightarrow>\n                           NA \\<noteq> NAa)) \\<and>\n                         (Ba \\<notin> bad \\<longrightarrow>\n                          A = Aa \\<and>\n                          B = Ba \\<and>\n                          NA = NAa \\<and> A = Aa \\<longrightarrow>\n                          Nonce NAa \\<notin> analz (knows Spy evs1))\n 3. \\<And>evs2 NB Ba NAa Aa.\n       \\<lbrakk>A \\<notin> bad; B \\<notin> bad; evs2 \\<in> ns_public;\n        Says A B (Crypt (pubK B) \\<lbrace>Nonce NA, Agent A\\<rbrace>)\n        \\<in> set evs2 \\<longrightarrow>\n        Nonce NA \\<notin> analz (knows Spy evs2);\n        Nonce NB \\<notin> used evs2;\n        Gets Ba (Crypt (pubK Ba) \\<lbrace>Nonce NAa, Agent Aa\\<rbrace>)\n        \\<in> set evs2\\<rbrakk>\n       \\<Longrightarrow> Aa \\<in> bad \\<longrightarrow>\n                         Says A B\n                          (Crypt (pubK B)\n                            \\<lbrace>Nonce NA, Agent A\\<rbrace>)\n                         \\<in> set evs2 \\<longrightarrow>\n                         NA \\<noteq> NAa \\<and> NA \\<noteq> NB\n 4. \\<And>evs3 Aa Ba NAa NB.\n       \\<lbrakk>A \\<notin> bad; B \\<notin> bad; evs3 \\<in> ns_public;\n        Says A B (Crypt (pubK B) \\<lbrace>Nonce NA, Agent A\\<rbrace>)\n        \\<in> set evs3 \\<longrightarrow>\n        Nonce NA \\<notin> analz (knows Spy evs3);\n        Says Aa Ba (Crypt (pubK Ba) \\<lbrace>Nonce NAa, Agent Aa\\<rbrace>)\n        \\<in> set evs3;\n        Gets Aa (Crypt (pubK Aa) \\<lbrace>Nonce NAa, Nonce NB\\<rbrace>)\n        \\<in> set evs3\\<rbrakk>\n       \\<Longrightarrow> Ba \\<in> bad \\<longrightarrow>\n                         Says A B\n                          (Crypt (pubK B)\n                            \\<lbrace>Nonce NA, Agent A\\<rbrace>)\n                         \\<in> set evs3 \\<longrightarrow>\n                         NA \\<noteq> NB", "thm conjI"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>evsf X Ba.\n       \\<lbrakk>A \\<notin> bad; B \\<notin> bad; evsf \\<in> ns_public;\n        Says A B (Crypt (pubK B) \\<lbrace>Nonce NA, Agent A\\<rbrace>)\n        \\<in> set evsf \\<longrightarrow>\n        Nonce NA \\<notin> analz (knows Spy evsf);\n        X \\<in> synth (analz (knows Spy evsf))\\<rbrakk>\n       \\<Longrightarrow> (A = Spy \\<and>\n                          B = Ba \\<and>\n                          Crypt (pubK B)\n                           \\<lbrace>Nonce NA, Agent A\\<rbrace> =\n                          X \\<longrightarrow>\n                          Nonce NA\n                          \\<notin> analz (insert X (knows Spy evsf))) \\<and>\n                         (Says A B\n                           (Crypt (pubK B)\n                             \\<lbrace>Nonce NA, Agent A\\<rbrace>)\n                          \\<in> set evsf \\<longrightarrow>\n                          Nonce NA\n                          \\<notin> analz (insert X (knows Spy evsf)))\n 2. \\<And>evs1 NAa Aa Ba.\n       \\<lbrakk>A \\<notin> bad; B \\<notin> bad; evs1 \\<in> ns_public;\n        Says A B (Crypt (pubK B) \\<lbrace>Nonce NA, Agent A\\<rbrace>)\n        \\<in> set evs1 \\<longrightarrow>\n        Nonce NA \\<notin> analz (knows Spy evs1);\n        Nonce NAa \\<notin> used evs1\\<rbrakk>\n       \\<Longrightarrow> (Ba \\<in> bad \\<longrightarrow>\n                          (NA = NAa \\<longrightarrow>\n                           B = Ba \\<longrightarrow> A \\<noteq> Aa) \\<and>\n                          (Says A B\n                            (Crypt (pubK B)\n                              \\<lbrace>Nonce NA, Agent A\\<rbrace>)\n                           \\<in> set evs1 \\<longrightarrow>\n                           NA \\<noteq> NAa)) \\<and>\n                         (Ba \\<notin> bad \\<longrightarrow>\n                          A = Aa \\<and>\n                          B = Ba \\<and>\n                          NA = NAa \\<and> A = Aa \\<longrightarrow>\n                          Nonce NAa \\<notin> analz (knows Spy evs1))\n 3. \\<And>evs2 NB Ba NAa Aa.\n       \\<lbrakk>A \\<notin> bad; B \\<notin> bad; evs2 \\<in> ns_public;\n        Says A B (Crypt (pubK B) \\<lbrace>Nonce NA, Agent A\\<rbrace>)\n        \\<in> set evs2 \\<longrightarrow>\n        Nonce NA \\<notin> analz (knows Spy evs2);\n        Nonce NB \\<notin> used evs2;\n        Gets Ba (Crypt (pubK Ba) \\<lbrace>Nonce NAa, Agent Aa\\<rbrace>)\n        \\<in> set evs2\\<rbrakk>\n       \\<Longrightarrow> Aa \\<in> bad \\<longrightarrow>\n                         Says A B\n                          (Crypt (pubK B)\n                            \\<lbrace>Nonce NA, Agent A\\<rbrace>)\n                         \\<in> set evs2 \\<longrightarrow>\n                         NA \\<noteq> NAa \\<and> NA \\<noteq> NB\n 4. \\<And>evs3 Aa Ba NAa NB.\n       \\<lbrakk>A \\<notin> bad; B \\<notin> bad; evs3 \\<in> ns_public;\n        Says A B (Crypt (pubK B) \\<lbrace>Nonce NA, Agent A\\<rbrace>)\n        \\<in> set evs3 \\<longrightarrow>\n        Nonce NA \\<notin> analz (knows Spy evs3);\n        Says Aa Ba (Crypt (pubK Ba) \\<lbrace>Nonce NAa, Agent Aa\\<rbrace>)\n        \\<in> set evs3;\n        Gets Aa (Crypt (pubK Aa) \\<lbrace>Nonce NAa, Nonce NB\\<rbrace>)\n        \\<in> set evs3\\<rbrakk>\n       \\<Longrightarrow> Ba \\<in> bad \\<longrightarrow>\n                         Says A B\n                          (Crypt (pubK B)\n                            \\<lbrace>Nonce NA, Agent A\\<rbrace>)\n                         \\<in> set evs3 \\<longrightarrow>\n                         NA \\<noteq> NB", "apply (rule conjI)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>evsf X Ba.\n       \\<lbrakk>A \\<notin> bad; B \\<notin> bad; evsf \\<in> ns_public;\n        Says A B (Crypt (pubK B) \\<lbrace>Nonce NA, Agent A\\<rbrace>)\n        \\<in> set evsf \\<longrightarrow>\n        Nonce NA \\<notin> analz (knows Spy evsf);\n        X \\<in> synth (analz (knows Spy evsf))\\<rbrakk>\n       \\<Longrightarrow> A = Spy \\<and>\n                         B = Ba \\<and>\n                         Crypt (pubK B)\n                          \\<lbrace>Nonce NA, Agent A\\<rbrace> =\n                         X \\<longrightarrow>\n                         Nonce NA \\<notin> analz (insert X (knows Spy evsf))\n 2. \\<And>evsf X Ba.\n       \\<lbrakk>A \\<notin> bad; B \\<notin> bad; evsf \\<in> ns_public;\n        Says A B (Crypt (pubK B) \\<lbrace>Nonce NA, Agent A\\<rbrace>)\n        \\<in> set evsf \\<longrightarrow>\n        Nonce NA \\<notin> analz (knows Spy evsf);\n        X \\<in> synth (analz (knows Spy evsf))\\<rbrakk>\n       \\<Longrightarrow> Says A B\n                          (Crypt (pubK B)\n                            \\<lbrace>Nonce NA, Agent A\\<rbrace>)\n                         \\<in> set evsf \\<longrightarrow>\n                         Nonce NA \\<notin> analz (insert X (knows Spy evsf))\n 3. \\<And>evs1 NAa Aa Ba.\n       \\<lbrakk>A \\<notin> bad; B \\<notin> bad; evs1 \\<in> ns_public;\n        Says A B (Crypt (pubK B) \\<lbrace>Nonce NA, Agent A\\<rbrace>)\n        \\<in> set evs1 \\<longrightarrow>\n        Nonce NA \\<notin> analz (knows Spy evs1);\n        Nonce NAa \\<notin> used evs1\\<rbrakk>\n       \\<Longrightarrow> (Ba \\<in> bad \\<longrightarrow>\n                          (NA = NAa \\<longrightarrow>\n                           B = Ba \\<longrightarrow> A \\<noteq> Aa) \\<and>\n                          (Says A B\n                            (Crypt (pubK B)\n                              \\<lbrace>Nonce NA, Agent A\\<rbrace>)\n                           \\<in> set evs1 \\<longrightarrow>\n                           NA \\<noteq> NAa)) \\<and>\n                         (Ba \\<notin> bad \\<longrightarrow>\n                          A = Aa \\<and>\n                          B = Ba \\<and>\n                          NA = NAa \\<and> A = Aa \\<longrightarrow>\n                          Nonce NAa \\<notin> analz (knows Spy evs1))\n 4. \\<And>evs2 NB Ba NAa Aa.\n       \\<lbrakk>A \\<notin> bad; B \\<notin> bad; evs2 \\<in> ns_public;\n        Says A B (Crypt (pubK B) \\<lbrace>Nonce NA, Agent A\\<rbrace>)\n        \\<in> set evs2 \\<longrightarrow>\n        Nonce NA \\<notin> analz (knows Spy evs2);\n        Nonce NB \\<notin> used evs2;\n        Gets Ba (Crypt (pubK Ba) \\<lbrace>Nonce NAa, Agent Aa\\<rbrace>)\n        \\<in> set evs2\\<rbrakk>\n       \\<Longrightarrow> Aa \\<in> bad \\<longrightarrow>\n                         Says A B\n                          (Crypt (pubK B)\n                            \\<lbrace>Nonce NA, Agent A\\<rbrace>)\n                         \\<in> set evs2 \\<longrightarrow>\n                         NA \\<noteq> NAa \\<and> NA \\<noteq> NB\n 5. \\<And>evs3 Aa Ba NAa NB.\n       \\<lbrakk>A \\<notin> bad; B \\<notin> bad; evs3 \\<in> ns_public;\n        Says A B (Crypt (pubK B) \\<lbrace>Nonce NA, Agent A\\<rbrace>)\n        \\<in> set evs3 \\<longrightarrow>\n        Nonce NA \\<notin> analz (knows Spy evs3);\n        Says Aa Ba (Crypt (pubK Ba) \\<lbrace>Nonce NAa, Agent Aa\\<rbrace>)\n        \\<in> set evs3;\n        Gets Aa (Crypt (pubK Aa) \\<lbrace>Nonce NAa, Nonce NB\\<rbrace>)\n        \\<in> set evs3\\<rbrakk>\n       \\<Longrightarrow> Ba \\<in> bad \\<longrightarrow>\n                         Says A B\n                          (Crypt (pubK B)\n                            \\<lbrace>Nonce NA, Agent A\\<rbrace>)\n                         \\<in> set evs3 \\<longrightarrow>\n                         NA \\<noteq> NB", "apply clarify"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>evsf X Ba.\n       \\<lbrakk>A \\<notin> bad; B \\<notin> bad; evsf \\<in> ns_public;\n        Says A B (Crypt (pubK B) \\<lbrace>Nonce NA, Agent A\\<rbrace>)\n        \\<in> set evsf \\<longrightarrow>\n        Nonce NA \\<notin> analz (knows Spy evsf);\n        X \\<in> synth (analz (knows Spy evsf))\\<rbrakk>\n       \\<Longrightarrow> Says A B\n                          (Crypt (pubK B)\n                            \\<lbrace>Nonce NA, Agent A\\<rbrace>)\n                         \\<in> set evsf \\<longrightarrow>\n                         Nonce NA \\<notin> analz (insert X (knows Spy evsf))\n 2. \\<And>evs1 NAa Aa Ba.\n       \\<lbrakk>A \\<notin> bad; B \\<notin> bad; evs1 \\<in> ns_public;\n        Says A B (Crypt (pubK B) \\<lbrace>Nonce NA, Agent A\\<rbrace>)\n        \\<in> set evs1 \\<longrightarrow>\n        Nonce NA \\<notin> analz (knows Spy evs1);\n        Nonce NAa \\<notin> used evs1\\<rbrakk>\n       \\<Longrightarrow> (Ba \\<in> bad \\<longrightarrow>\n                          (NA = NAa \\<longrightarrow>\n                           B = Ba \\<longrightarrow> A \\<noteq> Aa) \\<and>\n                          (Says A B\n                            (Crypt (pubK B)\n                              \\<lbrace>Nonce NA, Agent A\\<rbrace>)\n                           \\<in> set evs1 \\<longrightarrow>\n                           NA \\<noteq> NAa)) \\<and>\n                         (Ba \\<notin> bad \\<longrightarrow>\n                          A = Aa \\<and>\n                          B = Ba \\<and>\n                          NA = NAa \\<and> A = Aa \\<longrightarrow>\n                          Nonce NAa \\<notin> analz (knows Spy evs1))\n 3. \\<And>evs2 NB Ba NAa Aa.\n       \\<lbrakk>A \\<notin> bad; B \\<notin> bad; evs2 \\<in> ns_public;\n        Says A B (Crypt (pubK B) \\<lbrace>Nonce NA, Agent A\\<rbrace>)\n        \\<in> set evs2 \\<longrightarrow>\n        Nonce NA \\<notin> analz (knows Spy evs2);\n        Nonce NB \\<notin> used evs2;\n        Gets Ba (Crypt (pubK Ba) \\<lbrace>Nonce NAa, Agent Aa\\<rbrace>)\n        \\<in> set evs2\\<rbrakk>\n       \\<Longrightarrow> Aa \\<in> bad \\<longrightarrow>\n                         Says A B\n                          (Crypt (pubK B)\n                            \\<lbrace>Nonce NA, Agent A\\<rbrace>)\n                         \\<in> set evs2 \\<longrightarrow>\n                         NA \\<noteq> NAa \\<and> NA \\<noteq> NB\n 4. \\<And>evs3 Aa Ba NAa NB.\n       \\<lbrakk>A \\<notin> bad; B \\<notin> bad; evs3 \\<in> ns_public;\n        Says A B (Crypt (pubK B) \\<lbrace>Nonce NA, Agent A\\<rbrace>)\n        \\<in> set evs3 \\<longrightarrow>\n        Nonce NA \\<notin> analz (knows Spy evs3);\n        Says Aa Ba (Crypt (pubK Ba) \\<lbrace>Nonce NAa, Agent Aa\\<rbrace>)\n        \\<in> set evs3;\n        Gets Aa (Crypt (pubK Aa) \\<lbrace>Nonce NAa, Nonce NB\\<rbrace>)\n        \\<in> set evs3\\<rbrakk>\n       \\<Longrightarrow> Ba \\<in> bad \\<longrightarrow>\n                         Says A B\n                          (Crypt (pubK B)\n                            \\<lbrace>Nonce NA, Agent A\\<rbrace>)\n                         \\<in> set evs3 \\<longrightarrow>\n                         NA \\<noteq> NB", "apply clarify"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>evsf X Ba.\n       \\<lbrakk>A \\<notin> bad; B \\<notin> bad; evsf \\<in> ns_public;\n        X \\<in> synth (analz (knows Spy evsf));\n        Says A B (Crypt (pubK B) \\<lbrace>Nonce NA, Agent A\\<rbrace>)\n        \\<in> set evsf;\n        Nonce NA \\<in> analz (insert X (knows Spy evsf));\n        Nonce NA \\<notin> analz (knows Spy evsf)\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>evs1 NAa Aa Ba.\n       \\<lbrakk>A \\<notin> bad; B \\<notin> bad; evs1 \\<in> ns_public;\n        Says A B (Crypt (pubK B) \\<lbrace>Nonce NA, Agent A\\<rbrace>)\n        \\<in> set evs1 \\<longrightarrow>\n        Nonce NA \\<notin> analz (knows Spy evs1);\n        Nonce NAa \\<notin> used evs1\\<rbrakk>\n       \\<Longrightarrow> (Ba \\<in> bad \\<longrightarrow>\n                          (NA = NAa \\<longrightarrow>\n                           B = Ba \\<longrightarrow> A \\<noteq> Aa) \\<and>\n                          (Says A B\n                            (Crypt (pubK B)\n                              \\<lbrace>Nonce NA, Agent A\\<rbrace>)\n                           \\<in> set evs1 \\<longrightarrow>\n                           NA \\<noteq> NAa)) \\<and>\n                         (Ba \\<notin> bad \\<longrightarrow>\n                          A = Aa \\<and>\n                          B = Ba \\<and>\n                          NA = NAa \\<and> A = Aa \\<longrightarrow>\n                          Nonce NAa \\<notin> analz (knows Spy evs1))\n 3. \\<And>evs2 NB Ba NAa Aa.\n       \\<lbrakk>A \\<notin> bad; B \\<notin> bad; evs2 \\<in> ns_public;\n        Says A B (Crypt (pubK B) \\<lbrace>Nonce NA, Agent A\\<rbrace>)\n        \\<in> set evs2 \\<longrightarrow>\n        Nonce NA \\<notin> analz (knows Spy evs2);\n        Nonce NB \\<notin> used evs2;\n        Gets Ba (Crypt (pubK Ba) \\<lbrace>Nonce NAa, Agent Aa\\<rbrace>)\n        \\<in> set evs2\\<rbrakk>\n       \\<Longrightarrow> Aa \\<in> bad \\<longrightarrow>\n                         Says A B\n                          (Crypt (pubK B)\n                            \\<lbrace>Nonce NA, Agent A\\<rbrace>)\n                         \\<in> set evs2 \\<longrightarrow>\n                         NA \\<noteq> NAa \\<and> NA \\<noteq> NB\n 4. \\<And>evs3 Aa Ba NAa NB.\n       \\<lbrakk>A \\<notin> bad; B \\<notin> bad; evs3 \\<in> ns_public;\n        Says A B (Crypt (pubK B) \\<lbrace>Nonce NA, Agent A\\<rbrace>)\n        \\<in> set evs3 \\<longrightarrow>\n        Nonce NA \\<notin> analz (knows Spy evs3);\n        Says Aa Ba (Crypt (pubK Ba) \\<lbrace>Nonce NAa, Agent Aa\\<rbrace>)\n        \\<in> set evs3;\n        Gets Aa (Crypt (pubK Aa) \\<lbrace>Nonce NAa, Nonce NB\\<rbrace>)\n        \\<in> set evs3\\<rbrakk>\n       \\<Longrightarrow> Ba \\<in> bad \\<longrightarrow>\n                         Says A B\n                          (Crypt (pubK B)\n                            \\<lbrace>Nonce NA, Agent A\\<rbrace>)\n                         \\<in> set evs3 \\<longrightarrow>\n                         NA \\<noteq> NB", "(*screenshot2*)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>evsf X Ba.\n       \\<lbrakk>A \\<notin> bad; B \\<notin> bad; evsf \\<in> ns_public;\n        X \\<in> synth (analz (knows Spy evsf));\n        Says A B (Crypt (pubK B) \\<lbrace>Nonce NA, Agent A\\<rbrace>)\n        \\<in> set evsf;\n        Nonce NA \\<in> analz (insert X (knows Spy evsf));\n        Nonce NA \\<notin> analz (knows Spy evsf)\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>evs1 NAa Aa Ba.\n       \\<lbrakk>A \\<notin> bad; B \\<notin> bad; evs1 \\<in> ns_public;\n        Says A B (Crypt (pubK B) \\<lbrace>Nonce NA, Agent A\\<rbrace>)\n        \\<in> set evs1 \\<longrightarrow>\n        Nonce NA \\<notin> analz (knows Spy evs1);\n        Nonce NAa \\<notin> used evs1\\<rbrakk>\n       \\<Longrightarrow> (Ba \\<in> bad \\<longrightarrow>\n                          (NA = NAa \\<longrightarrow>\n                           B = Ba \\<longrightarrow> A \\<noteq> Aa) \\<and>\n                          (Says A B\n                            (Crypt (pubK B)\n                              \\<lbrace>Nonce NA, Agent A\\<rbrace>)\n                           \\<in> set evs1 \\<longrightarrow>\n                           NA \\<noteq> NAa)) \\<and>\n                         (Ba \\<notin> bad \\<longrightarrow>\n                          A = Aa \\<and>\n                          B = Ba \\<and>\n                          NA = NAa \\<and> A = Aa \\<longrightarrow>\n                          Nonce NAa \\<notin> analz (knows Spy evs1))\n 3. \\<And>evs2 NB Ba NAa Aa.\n       \\<lbrakk>A \\<notin> bad; B \\<notin> bad; evs2 \\<in> ns_public;\n        Says A B (Crypt (pubK B) \\<lbrace>Nonce NA, Agent A\\<rbrace>)\n        \\<in> set evs2 \\<longrightarrow>\n        Nonce NA \\<notin> analz (knows Spy evs2);\n        Nonce NB \\<notin> used evs2;\n        Gets Ba (Crypt (pubK Ba) \\<lbrace>Nonce NAa, Agent Aa\\<rbrace>)\n        \\<in> set evs2\\<rbrakk>\n       \\<Longrightarrow> Aa \\<in> bad \\<longrightarrow>\n                         Says A B\n                          (Crypt (pubK B)\n                            \\<lbrace>Nonce NA, Agent A\\<rbrace>)\n                         \\<in> set evs2 \\<longrightarrow>\n                         NA \\<noteq> NAa \\<and> NA \\<noteq> NB\n 4. \\<And>evs3 Aa Ba NAa NB.\n       \\<lbrakk>A \\<notin> bad; B \\<notin> bad; evs3 \\<in> ns_public;\n        Says A B (Crypt (pubK B) \\<lbrace>Nonce NA, Agent A\\<rbrace>)\n        \\<in> set evs3 \\<longrightarrow>\n        Nonce NA \\<notin> analz (knows Spy evs3);\n        Says Aa Ba (Crypt (pubK Ba) \\<lbrace>Nonce NAa, Agent Aa\\<rbrace>)\n        \\<in> set evs3;\n        Gets Aa (Crypt (pubK Aa) \\<lbrace>Nonce NAa, Nonce NB\\<rbrace>)\n        \\<in> set evs3\\<rbrakk>\n       \\<Longrightarrow> Ba \\<in> bad \\<longrightarrow>\n                         Says A B\n                          (Crypt (pubK B)\n                            \\<lbrace>Nonce NA, Agent A\\<rbrace>)\n                         \\<in> set evs3 \\<longrightarrow>\n                         NA \\<noteq> NB", "apply (drule Fake_analz_insert [THEN subsetD], simp)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>evsf X Ba.\n       \\<lbrakk>A \\<notin> bad; B \\<notin> bad; evsf \\<in> ns_public;\n        Says A B (Crypt (pubK B) \\<lbrace>Nonce NA, Agent A\\<rbrace>)\n        \\<in> set evsf;\n        Nonce NA \\<in> analz (insert X (knows Spy evsf));\n        Nonce NA \\<notin> analz (knows Spy evsf);\n        Nonce NA\n        \\<in> synth (analz (knows Spy evsf)) \\<union>\n              analz (knows Spy evsf \\<union> knows Spy evsf)\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>evs1 NAa Aa Ba.\n       \\<lbrakk>A \\<notin> bad; B \\<notin> bad; evs1 \\<in> ns_public;\n        Says A B (Crypt (pubK B) \\<lbrace>Nonce NA, Agent A\\<rbrace>)\n        \\<in> set evs1 \\<longrightarrow>\n        Nonce NA \\<notin> analz (knows Spy evs1);\n        Nonce NAa \\<notin> used evs1\\<rbrakk>\n       \\<Longrightarrow> (Ba \\<in> bad \\<longrightarrow>\n                          (NA = NAa \\<longrightarrow>\n                           B = Ba \\<longrightarrow> A \\<noteq> Aa) \\<and>\n                          (Says A B\n                            (Crypt (pubK B)\n                              \\<lbrace>Nonce NA, Agent A\\<rbrace>)\n                           \\<in> set evs1 \\<longrightarrow>\n                           NA \\<noteq> NAa)) \\<and>\n                         (Ba \\<notin> bad \\<longrightarrow>\n                          A = Aa \\<and>\n                          B = Ba \\<and>\n                          NA = NAa \\<and> A = Aa \\<longrightarrow>\n                          Nonce NAa \\<notin> analz (knows Spy evs1))\n 3. \\<And>evs2 NB Ba NAa Aa.\n       \\<lbrakk>A \\<notin> bad; B \\<notin> bad; evs2 \\<in> ns_public;\n        Says A B (Crypt (pubK B) \\<lbrace>Nonce NA, Agent A\\<rbrace>)\n        \\<in> set evs2 \\<longrightarrow>\n        Nonce NA \\<notin> analz (knows Spy evs2);\n        Nonce NB \\<notin> used evs2;\n        Gets Ba (Crypt (pubK Ba) \\<lbrace>Nonce NAa, Agent Aa\\<rbrace>)\n        \\<in> set evs2\\<rbrakk>\n       \\<Longrightarrow> Aa \\<in> bad \\<longrightarrow>\n                         Says A B\n                          (Crypt (pubK B)\n                            \\<lbrace>Nonce NA, Agent A\\<rbrace>)\n                         \\<in> set evs2 \\<longrightarrow>\n                         NA \\<noteq> NAa \\<and> NA \\<noteq> NB\n 4. \\<And>evs3 Aa Ba NAa NB.\n       \\<lbrakk>A \\<notin> bad; B \\<notin> bad; evs3 \\<in> ns_public;\n        Says A B (Crypt (pubK B) \\<lbrace>Nonce NA, Agent A\\<rbrace>)\n        \\<in> set evs3 \\<longrightarrow>\n        Nonce NA \\<notin> analz (knows Spy evs3);\n        Says Aa Ba (Crypt (pubK Ba) \\<lbrace>Nonce NAa, Agent Aa\\<rbrace>)\n        \\<in> set evs3;\n        Gets Aa (Crypt (pubK Aa) \\<lbrace>Nonce NAa, Nonce NB\\<rbrace>)\n        \\<in> set evs3\\<rbrakk>\n       \\<Longrightarrow> Ba \\<in> bad \\<longrightarrow>\n                         Says A B\n                          (Crypt (pubK B)\n                            \\<lbrace>Nonce NA, Agent A\\<rbrace>)\n                         \\<in> set evs3 \\<longrightarrow>\n                         NA \\<noteq> NB", "(*screenshot3*)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>evsf X Ba.\n       \\<lbrakk>A \\<notin> bad; B \\<notin> bad; evsf \\<in> ns_public;\n        Says A B (Crypt (pubK B) \\<lbrace>Nonce NA, Agent A\\<rbrace>)\n        \\<in> set evsf;\n        Nonce NA \\<in> analz (insert X (knows Spy evsf));\n        Nonce NA \\<notin> analz (knows Spy evsf);\n        Nonce NA\n        \\<in> synth (analz (knows Spy evsf)) \\<union>\n              analz (knows Spy evsf \\<union> knows Spy evsf)\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>evs1 NAa Aa Ba.\n       \\<lbrakk>A \\<notin> bad; B \\<notin> bad; evs1 \\<in> ns_public;\n        Says A B (Crypt (pubK B) \\<lbrace>Nonce NA, Agent A\\<rbrace>)\n        \\<in> set evs1 \\<longrightarrow>\n        Nonce NA \\<notin> analz (knows Spy evs1);\n        Nonce NAa \\<notin> used evs1\\<rbrakk>\n       \\<Longrightarrow> (Ba \\<in> bad \\<longrightarrow>\n                          (NA = NAa \\<longrightarrow>\n                           B = Ba \\<longrightarrow> A \\<noteq> Aa) \\<and>\n                          (Says A B\n                            (Crypt (pubK B)\n                              \\<lbrace>Nonce NA, Agent A\\<rbrace>)\n                           \\<in> set evs1 \\<longrightarrow>\n                           NA \\<noteq> NAa)) \\<and>\n                         (Ba \\<notin> bad \\<longrightarrow>\n                          A = Aa \\<and>\n                          B = Ba \\<and>\n                          NA = NAa \\<and> A = Aa \\<longrightarrow>\n                          Nonce NAa \\<notin> analz (knows Spy evs1))\n 3. \\<And>evs2 NB Ba NAa Aa.\n       \\<lbrakk>A \\<notin> bad; B \\<notin> bad; evs2 \\<in> ns_public;\n        Says A B (Crypt (pubK B) \\<lbrace>Nonce NA, Agent A\\<rbrace>)\n        \\<in> set evs2 \\<longrightarrow>\n        Nonce NA \\<notin> analz (knows Spy evs2);\n        Nonce NB \\<notin> used evs2;\n        Gets Ba (Crypt (pubK Ba) \\<lbrace>Nonce NAa, Agent Aa\\<rbrace>)\n        \\<in> set evs2\\<rbrakk>\n       \\<Longrightarrow> Aa \\<in> bad \\<longrightarrow>\n                         Says A B\n                          (Crypt (pubK B)\n                            \\<lbrace>Nonce NA, Agent A\\<rbrace>)\n                         \\<in> set evs2 \\<longrightarrow>\n                         NA \\<noteq> NAa \\<and> NA \\<noteq> NB\n 4. \\<And>evs3 Aa Ba NAa NB.\n       \\<lbrakk>A \\<notin> bad; B \\<notin> bad; evs3 \\<in> ns_public;\n        Says A B (Crypt (pubK B) \\<lbrace>Nonce NA, Agent A\\<rbrace>)\n        \\<in> set evs3 \\<longrightarrow>\n        Nonce NA \\<notin> analz (knows Spy evs3);\n        Says Aa Ba (Crypt (pubK Ba) \\<lbrace>Nonce NAa, Agent Aa\\<rbrace>)\n        \\<in> set evs3;\n        Gets Aa (Crypt (pubK Aa) \\<lbrace>Nonce NAa, Nonce NB\\<rbrace>)\n        \\<in> set evs3\\<rbrakk>\n       \\<Longrightarrow> Ba \\<in> bad \\<longrightarrow>\n                         Says A B\n                          (Crypt (pubK B)\n                            \\<lbrace>Nonce NA, Agent A\\<rbrace>)\n                         \\<in> set evs3 \\<longrightarrow>\n                         NA \\<noteq> NB", "apply simp"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>evs1 NAa Aa Ba.\n       \\<lbrakk>A \\<notin> bad; B \\<notin> bad; evs1 \\<in> ns_public;\n        Says A B (Crypt (pubK B) \\<lbrace>Nonce NA, Agent A\\<rbrace>)\n        \\<in> set evs1 \\<longrightarrow>\n        Nonce NA \\<notin> analz (knows Spy evs1);\n        Nonce NAa \\<notin> used evs1\\<rbrakk>\n       \\<Longrightarrow> (Ba \\<in> bad \\<longrightarrow>\n                          (NA = NAa \\<longrightarrow>\n                           B = Ba \\<longrightarrow> A \\<noteq> Aa) \\<and>\n                          (Says A B\n                            (Crypt (pubK B)\n                              \\<lbrace>Nonce NA, Agent A\\<rbrace>)\n                           \\<in> set evs1 \\<longrightarrow>\n                           NA \\<noteq> NAa)) \\<and>\n                         (Ba \\<notin> bad \\<longrightarrow>\n                          A = Aa \\<and>\n                          B = Ba \\<and>\n                          NA = NAa \\<and> A = Aa \\<longrightarrow>\n                          Nonce NAa \\<notin> analz (knows Spy evs1))\n 2. \\<And>evs2 NB Ba NAa Aa.\n       \\<lbrakk>A \\<notin> bad; B \\<notin> bad; evs2 \\<in> ns_public;\n        Says A B (Crypt (pubK B) \\<lbrace>Nonce NA, Agent A\\<rbrace>)\n        \\<in> set evs2 \\<longrightarrow>\n        Nonce NA \\<notin> analz (knows Spy evs2);\n        Nonce NB \\<notin> used evs2;\n        Gets Ba (Crypt (pubK Ba) \\<lbrace>Nonce NAa, Agent Aa\\<rbrace>)\n        \\<in> set evs2\\<rbrakk>\n       \\<Longrightarrow> Aa \\<in> bad \\<longrightarrow>\n                         Says A B\n                          (Crypt (pubK B)\n                            \\<lbrace>Nonce NA, Agent A\\<rbrace>)\n                         \\<in> set evs2 \\<longrightarrow>\n                         NA \\<noteq> NAa \\<and> NA \\<noteq> NB\n 3. \\<And>evs3 Aa Ba NAa NB.\n       \\<lbrakk>A \\<notin> bad; B \\<notin> bad; evs3 \\<in> ns_public;\n        Says A B (Crypt (pubK B) \\<lbrace>Nonce NA, Agent A\\<rbrace>)\n        \\<in> set evs3 \\<longrightarrow>\n        Nonce NA \\<notin> analz (knows Spy evs3);\n        Says Aa Ba (Crypt (pubK Ba) \\<lbrace>Nonce NAa, Agent Aa\\<rbrace>)\n        \\<in> set evs3;\n        Gets Aa (Crypt (pubK Aa) \\<lbrace>Nonce NAa, Nonce NB\\<rbrace>)\n        \\<in> set evs3\\<rbrakk>\n       \\<Longrightarrow> Ba \\<in> bad \\<longrightarrow>\n                         Says A B\n                          (Crypt (pubK B)\n                            \\<lbrace>Nonce NA, Agent A\\<rbrace>)\n                         \\<in> set evs3 \\<longrightarrow>\n                         NA \\<noteq> NB", "apply (blast dest: unique_NA analz_into_parts intro: no_nonce_NS1_NS2)+"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma Spy_not_see_NB:\n\"\\<lbrakk>Says B A (Crypt (pubEK A) \\<lbrace>Nonce NA, Nonce NB\\<rbrace>) \\<in> set evs;   \n \\<forall>C. Says A C (Crypt (pubEK C) (Nonce NB)) \\<notin> set evs;      \n A \\<notin> bad;  B \\<notin> bad;  evs \\<in> ns_public\\<rbrakk>                      \n \\<Longrightarrow> Nonce NB \\<notin> analz (spies evs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Says B A (Crypt (pubK A) \\<lbrace>Nonce NA, Nonce NB\\<rbrace>)\n             \\<in> set evs;\n     \\<forall>C. Says A C (Crypt (pubK C) (Nonce NB)) \\<notin> set evs;\n     A \\<notin> bad; B \\<notin> bad; evs \\<in> ns_public\\<rbrakk>\n    \\<Longrightarrow> Nonce NB \\<notin> analz (knows Spy evs)", "apply (erule rev_mp, erule rev_mp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>A \\<notin> bad; B \\<notin> bad; evs \\<in> ns_public\\<rbrakk>\n    \\<Longrightarrow> (\\<forall>C.\n                          Says A C (Crypt (pubK C) (Nonce NB))\n                          \\<notin> set evs) \\<longrightarrow>\n                      Says B A\n                       (Crypt (pubK A) \\<lbrace>Nonce NA, Nonce NB\\<rbrace>)\n                      \\<in> set evs \\<longrightarrow>\n                      Nonce NB \\<notin> analz (knows Spy evs)", "apply (erule ns_public.induct)"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<lbrakk>A \\<notin> bad; B \\<notin> bad\\<rbrakk>\n    \\<Longrightarrow> (\\<forall>C.\n                          Says A C (Crypt (pubK C) (Nonce NB))\n                          \\<notin> set []) \\<longrightarrow>\n                      Says B A\n                       (Crypt (pubK A) \\<lbrace>Nonce NA, Nonce NB\\<rbrace>)\n                      \\<in> set [] \\<longrightarrow>\n                      Nonce NB \\<notin> analz (knows Spy [])\n 2. \\<And>evsf X Ba.\n       \\<lbrakk>A \\<notin> bad; B \\<notin> bad; evsf \\<in> ns_public;\n        (\\<forall>C.\n            Says A C (Crypt (pubK C) (Nonce NB))\n            \\<notin> set evsf) \\<longrightarrow>\n        Says B A (Crypt (pubK A) \\<lbrace>Nonce NA, Nonce NB\\<rbrace>)\n        \\<in> set evsf \\<longrightarrow>\n        Nonce NB \\<notin> analz (knows Spy evsf);\n        X \\<in> synth (analz (knows Spy evsf))\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>C.\n                             Says A C (Crypt (pubK C) (Nonce NB))\n                             \\<notin> set\n (Says Spy Ba X # evsf)) \\<longrightarrow>\n                         Says B A\n                          (Crypt (pubK A)\n                            \\<lbrace>Nonce NA, Nonce NB\\<rbrace>)\n                         \\<in> set (Says Spy Ba X # evsf) \\<longrightarrow>\n                         Nonce NB\n                         \\<notin> analz (knows Spy (Says Spy Ba X # evsf))\n 3. \\<And>evsr Aa Ba X.\n       \\<lbrakk>A \\<notin> bad; B \\<notin> bad; evsr \\<in> ns_public;\n        (\\<forall>C.\n            Says A C (Crypt (pubK C) (Nonce NB))\n            \\<notin> set evsr) \\<longrightarrow>\n        Says B A (Crypt (pubK A) \\<lbrace>Nonce NA, Nonce NB\\<rbrace>)\n        \\<in> set evsr \\<longrightarrow>\n        Nonce NB \\<notin> analz (knows Spy evsr);\n        Says Aa Ba X \\<in> set evsr\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>C.\n                             Says A C (Crypt (pubK C) (Nonce NB))\n                             \\<notin> set\n (Gets Ba X # evsr)) \\<longrightarrow>\n                         Says B A\n                          (Crypt (pubK A)\n                            \\<lbrace>Nonce NA, Nonce NB\\<rbrace>)\n                         \\<in> set (Gets Ba X # evsr) \\<longrightarrow>\n                         Nonce NB\n                         \\<notin> analz (knows Spy (Gets Ba X # evsr))\n 4. \\<And>evs1 NAa Aa Ba.\n       \\<lbrakk>A \\<notin> bad; B \\<notin> bad; evs1 \\<in> ns_public;\n        (\\<forall>C.\n            Says A C (Crypt (pubK C) (Nonce NB))\n            \\<notin> set evs1) \\<longrightarrow>\n        Says B A (Crypt (pubK A) \\<lbrace>Nonce NA, Nonce NB\\<rbrace>)\n        \\<in> set evs1 \\<longrightarrow>\n        Nonce NB \\<notin> analz (knows Spy evs1);\n        Nonce NAa \\<notin> used evs1\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>C.\n                             Says A C (Crypt (pubK C) (Nonce NB))\n                             \\<notin> set\n (Says Aa Ba (Crypt (pubK Ba) \\<lbrace>Nonce NAa, Agent Aa\\<rbrace>) #\n  evs1)) \\<longrightarrow>\n                         Says B A\n                          (Crypt (pubK A)\n                            \\<lbrace>Nonce NA, Nonce NB\\<rbrace>)\n                         \\<in> set (Says Aa Ba\n                                     (Crypt (pubK Ba)\n \\<lbrace>Nonce NAa, Agent Aa\\<rbrace>) #\n                                    evs1) \\<longrightarrow>\n                         Nonce NB\n                         \\<notin> analz\n                                   (knows Spy\n                                     (Says Aa Ba\n (Crypt (pubK Ba) \\<lbrace>Nonce NAa, Agent Aa\\<rbrace>) #\nevs1))\n 5. \\<And>evs2 NBa Ba NAa Aa.\n       \\<lbrakk>A \\<notin> bad; B \\<notin> bad; evs2 \\<in> ns_public;\n        (\\<forall>C.\n            Says A C (Crypt (pubK C) (Nonce NB))\n            \\<notin> set evs2) \\<longrightarrow>\n        Says B A (Crypt (pubK A) \\<lbrace>Nonce NA, Nonce NB\\<rbrace>)\n        \\<in> set evs2 \\<longrightarrow>\n        Nonce NB \\<notin> analz (knows Spy evs2);\n        Nonce NBa \\<notin> used evs2;\n        Gets Ba (Crypt (pubK Ba) \\<lbrace>Nonce NAa, Agent Aa\\<rbrace>)\n        \\<in> set evs2\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>C.\n                             Says A C (Crypt (pubK C) (Nonce NB))\n                             \\<notin> set\n (Says Ba Aa (Crypt (pubK Aa) \\<lbrace>Nonce NAa, Nonce NBa\\<rbrace>) #\n  evs2)) \\<longrightarrow>\n                         Says B A\n                          (Crypt (pubK A)\n                            \\<lbrace>Nonce NA, Nonce NB\\<rbrace>)\n                         \\<in> set (Says Ba Aa\n                                     (Crypt (pubK Aa)\n \\<lbrace>Nonce NAa, Nonce NBa\\<rbrace>) #\n                                    evs2) \\<longrightarrow>\n                         Nonce NB\n                         \\<notin> analz\n                                   (knows Spy\n                                     (Says Ba Aa\n (Crypt (pubK Aa) \\<lbrace>Nonce NAa, Nonce NBa\\<rbrace>) #\nevs2))\n 6. \\<And>evs3 Aa Ba NAa NBa.\n       \\<lbrakk>A \\<notin> bad; B \\<notin> bad; evs3 \\<in> ns_public;\n        (\\<forall>C.\n            Says A C (Crypt (pubK C) (Nonce NB))\n            \\<notin> set evs3) \\<longrightarrow>\n        Says B A (Crypt (pubK A) \\<lbrace>Nonce NA, Nonce NB\\<rbrace>)\n        \\<in> set evs3 \\<longrightarrow>\n        Nonce NB \\<notin> analz (knows Spy evs3);\n        Says Aa Ba (Crypt (pubK Ba) \\<lbrace>Nonce NAa, Agent Aa\\<rbrace>)\n        \\<in> set evs3;\n        Gets Aa (Crypt (pubK Aa) \\<lbrace>Nonce NAa, Nonce NBa\\<rbrace>)\n        \\<in> set evs3\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>C.\n                             Says A C (Crypt (pubK C) (Nonce NB))\n                             \\<notin> set\n (Says Aa Ba (Crypt (pubK Ba) (Nonce NBa)) # evs3)) \\<longrightarrow>\n                         Says B A\n                          (Crypt (pubK A)\n                            \\<lbrace>Nonce NA, Nonce NB\\<rbrace>)\n                         \\<in> set (Says Aa Ba\n                                     (Crypt (pubK Ba) (Nonce NBa)) #\n                                    evs3) \\<longrightarrow>\n                         Nonce NB\n                         \\<notin> analz\n                                   (knows Spy\n                                     (Says Aa Ba\n (Crypt (pubK Ba) (Nonce NBa)) #\nevs3))", "apply (simp_all add: Spy_analz_priEK)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>evsf X Ba.\n       \\<lbrakk>A \\<notin> bad; B \\<notin> bad; evsf \\<in> ns_public;\n        (\\<forall>C.\n            Says A C (Crypt (pubK C) (Nonce NB))\n            \\<notin> set evsf) \\<longrightarrow>\n        Says B A (Crypt (pubK A) \\<lbrace>Nonce NA, Nonce NB\\<rbrace>)\n        \\<in> set evsf \\<longrightarrow>\n        Nonce NB \\<notin> analz (knows Spy evsf);\n        X \\<in> synth (analz (knows Spy evsf))\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>C.\n                             (C = Ba \\<longrightarrow>\n                              A = Spy \\<longrightarrow>\n                              Crypt (pubK Ba) (Nonce NB) \\<noteq> X) \\<and>\n                             Says A C (Crypt (pubK C) (Nonce NB))\n                             \\<notin> set evsf) \\<longrightarrow>\n                         (B = Spy \\<and>\n                          A = Ba \\<and>\n                          Crypt (pubK A)\n                           \\<lbrace>Nonce NA, Nonce NB\\<rbrace> =\n                          X \\<longrightarrow>\n                          Nonce NB\n                          \\<notin> analz (insert X (knows Spy evsf))) \\<and>\n                         (Says B A\n                           (Crypt (pubK A)\n                             \\<lbrace>Nonce NA, Nonce NB\\<rbrace>)\n                          \\<in> set evsf \\<longrightarrow>\n                          Nonce NB\n                          \\<notin> analz (insert X (knows Spy evsf)))\n 2. \\<And>evs1 NAa Ba.\n       \\<lbrakk>A \\<notin> bad; B \\<notin> bad; evs1 \\<in> ns_public;\n        (\\<forall>C.\n            Says A C (Crypt (pubK C) (Nonce NB))\n            \\<notin> set evs1) \\<longrightarrow>\n        Says B A (Crypt (pubK A) \\<lbrace>Nonce NA, Nonce NB\\<rbrace>)\n        \\<in> set evs1 \\<longrightarrow>\n        Nonce NB \\<notin> analz (knows Spy evs1);\n        Nonce NAa \\<notin> used evs1\\<rbrakk>\n       \\<Longrightarrow> Ba \\<in> bad \\<longrightarrow>\n                         (\\<forall>C.\n                             Says A C (Crypt (pubK C) (Nonce NB))\n                             \\<notin> set evs1) \\<longrightarrow>\n                         Says B A\n                          (Crypt (pubK A)\n                            \\<lbrace>Nonce NA, Nonce NB\\<rbrace>)\n                         \\<in> set evs1 \\<longrightarrow>\n                         NB \\<noteq> NAa\n 3. \\<And>evs2 NBa Ba NAa Aa.\n       \\<lbrakk>A \\<notin> bad; B \\<notin> bad; evs2 \\<in> ns_public;\n        (\\<forall>C.\n            Says A C (Crypt (pubK C) (Nonce NB))\n            \\<notin> set evs2) \\<longrightarrow>\n        Says B A (Crypt (pubK A) \\<lbrace>Nonce NA, Nonce NB\\<rbrace>)\n        \\<in> set evs2 \\<longrightarrow>\n        Nonce NB \\<notin> analz (knows Spy evs2);\n        Nonce NBa \\<notin> used evs2;\n        Gets Ba (Crypt (pubK Ba) \\<lbrace>Nonce NAa, Agent Aa\\<rbrace>)\n        \\<in> set evs2\\<rbrakk>\n       \\<Longrightarrow> (Aa \\<in> bad \\<longrightarrow>\n                          (\\<forall>C.\n                              Says A C (Crypt (pubK C) (Nonce NB))\n                              \\<notin> set evs2) \\<longrightarrow>\n                          (NA = NAa \\<longrightarrow>\n                           A = Aa \\<longrightarrow>\n                           B = Ba \\<longrightarrow> NB \\<noteq> NBa) \\<and>\n                          (Says B A\n                            (Crypt (pubK A)\n                              \\<lbrace>Nonce NA, Nonce NB\\<rbrace>)\n                           \\<in> set evs2 \\<longrightarrow>\n                           NB \\<noteq> NAa \\<and> NB \\<noteq> NBa)) \\<and>\n                         (Aa \\<notin> bad \\<longrightarrow>\n                          (\\<forall>C.\n                              Says A C (Crypt (pubK C) (Nonce NB))\n                              \\<notin> set evs2) \\<longrightarrow>\n                          B = Ba \\<and>\n                          A = Aa \\<and>\n                          NA = NAa \\<and> NB = NBa \\<longrightarrow>\n                          Nonce NBa \\<notin> analz (knows Spy evs2))\n 4. \\<And>evs3 Aa Ba NAa NBa.\n       \\<lbrakk>A \\<notin> bad; B \\<notin> bad; evs3 \\<in> ns_public;\n        (\\<forall>C.\n            Says A C (Crypt (pubK C) (Nonce NB))\n            \\<notin> set evs3) \\<longrightarrow>\n        Says B A (Crypt (pubK A) \\<lbrace>Nonce NA, Nonce NB\\<rbrace>)\n        \\<in> set evs3 \\<longrightarrow>\n        Nonce NB \\<notin> analz (knows Spy evs3);\n        Says Aa Ba (Crypt (pubK Ba) \\<lbrace>Nonce NAa, Agent Aa\\<rbrace>)\n        \\<in> set evs3;\n        Gets Aa (Crypt (pubK Aa) \\<lbrace>Nonce NAa, Nonce NBa\\<rbrace>)\n        \\<in> set evs3\\<rbrakk>\n       \\<Longrightarrow> Ba \\<in> bad \\<longrightarrow>\n                         (\\<forall>C.\n                             (C = Ba \\<longrightarrow>\n                              A = Aa \\<longrightarrow>\n                              NB \\<noteq> NBa) \\<and>\n                             Says A C (Crypt (pubK C) (Nonce NB))\n                             \\<notin> set evs3) \\<longrightarrow>\n                         Says B A\n                          (Crypt (pubK A)\n                            \\<lbrace>Nonce NA, Nonce NB\\<rbrace>)\n                         \\<in> set evs3 \\<longrightarrow>\n                         NB \\<noteq> NBa", "txt\\<open>apply @{term spy_analz}  \n   is replaced here with the following list...\\<close>"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>evsf X Ba.\n       \\<lbrakk>A \\<notin> bad; B \\<notin> bad; evsf \\<in> ns_public;\n        (\\<forall>C.\n            Says A C (Crypt (pubK C) (Nonce NB))\n            \\<notin> set evsf) \\<longrightarrow>\n        Says B A (Crypt (pubK A) \\<lbrace>Nonce NA, Nonce NB\\<rbrace>)\n        \\<in> set evsf \\<longrightarrow>\n        Nonce NB \\<notin> analz (knows Spy evsf);\n        X \\<in> synth (analz (knows Spy evsf))\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>C.\n                             (C = Ba \\<longrightarrow>\n                              A = Spy \\<longrightarrow>\n                              Crypt (pubK Ba) (Nonce NB) \\<noteq> X) \\<and>\n                             Says A C (Crypt (pubK C) (Nonce NB))\n                             \\<notin> set evsf) \\<longrightarrow>\n                         (B = Spy \\<and>\n                          A = Ba \\<and>\n                          Crypt (pubK A)\n                           \\<lbrace>Nonce NA, Nonce NB\\<rbrace> =\n                          X \\<longrightarrow>\n                          Nonce NB\n                          \\<notin> analz (insert X (knows Spy evsf))) \\<and>\n                         (Says B A\n                           (Crypt (pubK A)\n                             \\<lbrace>Nonce NA, Nonce NB\\<rbrace>)\n                          \\<in> set evsf \\<longrightarrow>\n                          Nonce NB\n                          \\<notin> analz (insert X (knows Spy evsf)))\n 2. \\<And>evs1 NAa Ba.\n       \\<lbrakk>A \\<notin> bad; B \\<notin> bad; evs1 \\<in> ns_public;\n        (\\<forall>C.\n            Says A C (Crypt (pubK C) (Nonce NB))\n            \\<notin> set evs1) \\<longrightarrow>\n        Says B A (Crypt (pubK A) \\<lbrace>Nonce NA, Nonce NB\\<rbrace>)\n        \\<in> set evs1 \\<longrightarrow>\n        Nonce NB \\<notin> analz (knows Spy evs1);\n        Nonce NAa \\<notin> used evs1\\<rbrakk>\n       \\<Longrightarrow> Ba \\<in> bad \\<longrightarrow>\n                         (\\<forall>C.\n                             Says A C (Crypt (pubK C) (Nonce NB))\n                             \\<notin> set evs1) \\<longrightarrow>\n                         Says B A\n                          (Crypt (pubK A)\n                            \\<lbrace>Nonce NA, Nonce NB\\<rbrace>)\n                         \\<in> set evs1 \\<longrightarrow>\n                         NB \\<noteq> NAa\n 3. \\<And>evs2 NBa Ba NAa Aa.\n       \\<lbrakk>A \\<notin> bad; B \\<notin> bad; evs2 \\<in> ns_public;\n        (\\<forall>C.\n            Says A C (Crypt (pubK C) (Nonce NB))\n            \\<notin> set evs2) \\<longrightarrow>\n        Says B A (Crypt (pubK A) \\<lbrace>Nonce NA, Nonce NB\\<rbrace>)\n        \\<in> set evs2 \\<longrightarrow>\n        Nonce NB \\<notin> analz (knows Spy evs2);\n        Nonce NBa \\<notin> used evs2;\n        Gets Ba (Crypt (pubK Ba) \\<lbrace>Nonce NAa, Agent Aa\\<rbrace>)\n        \\<in> set evs2\\<rbrakk>\n       \\<Longrightarrow> (Aa \\<in> bad \\<longrightarrow>\n                          (\\<forall>C.\n                              Says A C (Crypt (pubK C) (Nonce NB))\n                              \\<notin> set evs2) \\<longrightarrow>\n                          (NA = NAa \\<longrightarrow>\n                           A = Aa \\<longrightarrow>\n                           B = Ba \\<longrightarrow> NB \\<noteq> NBa) \\<and>\n                          (Says B A\n                            (Crypt (pubK A)\n                              \\<lbrace>Nonce NA, Nonce NB\\<rbrace>)\n                           \\<in> set evs2 \\<longrightarrow>\n                           NB \\<noteq> NAa \\<and> NB \\<noteq> NBa)) \\<and>\n                         (Aa \\<notin> bad \\<longrightarrow>\n                          (\\<forall>C.\n                              Says A C (Crypt (pubK C) (Nonce NB))\n                              \\<notin> set evs2) \\<longrightarrow>\n                          B = Ba \\<and>\n                          A = Aa \\<and>\n                          NA = NAa \\<and> NB = NBa \\<longrightarrow>\n                          Nonce NBa \\<notin> analz (knows Spy evs2))\n 4. \\<And>evs3 Aa Ba NAa NBa.\n       \\<lbrakk>A \\<notin> bad; B \\<notin> bad; evs3 \\<in> ns_public;\n        (\\<forall>C.\n            Says A C (Crypt (pubK C) (Nonce NB))\n            \\<notin> set evs3) \\<longrightarrow>\n        Says B A (Crypt (pubK A) \\<lbrace>Nonce NA, Nonce NB\\<rbrace>)\n        \\<in> set evs3 \\<longrightarrow>\n        Nonce NB \\<notin> analz (knows Spy evs3);\n        Says Aa Ba (Crypt (pubK Ba) \\<lbrace>Nonce NAa, Agent Aa\\<rbrace>)\n        \\<in> set evs3;\n        Gets Aa (Crypt (pubK Aa) \\<lbrace>Nonce NAa, Nonce NBa\\<rbrace>)\n        \\<in> set evs3\\<rbrakk>\n       \\<Longrightarrow> Ba \\<in> bad \\<longrightarrow>\n                         (\\<forall>C.\n                             (C = Ba \\<longrightarrow>\n                              A = Aa \\<longrightarrow>\n                              NB \\<noteq> NBa) \\<and>\n                             Says A C (Crypt (pubK C) (Nonce NB))\n                             \\<notin> set evs3) \\<longrightarrow>\n                         Says B A\n                          (Crypt (pubK A)\n                            \\<lbrace>Nonce NA, Nonce NB\\<rbrace>)\n                         \\<in> set evs3 \\<longrightarrow>\n                         NB \\<noteq> NBa", "apply (rule ccontr)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>evsf X Ba.\n       \\<lbrakk>A \\<notin> bad; B \\<notin> bad; evsf \\<in> ns_public;\n        (\\<forall>C.\n            Says A C (Crypt (pubK C) (Nonce NB))\n            \\<notin> set evsf) \\<longrightarrow>\n        Says B A (Crypt (pubK A) \\<lbrace>Nonce NA, Nonce NB\\<rbrace>)\n        \\<in> set evsf \\<longrightarrow>\n        Nonce NB \\<notin> analz (knows Spy evsf);\n        X \\<in> synth (analz (knows Spy evsf));\n        \\<not> ((\\<forall>C.\n                    (C = Ba \\<longrightarrow>\n                     A = Spy \\<longrightarrow>\n                     Crypt (pubK Ba) (Nonce NB) \\<noteq> X) \\<and>\n                    Says A C (Crypt (pubK C) (Nonce NB))\n                    \\<notin> set evsf) \\<longrightarrow>\n                (B = Spy \\<and>\n                 A = Ba \\<and>\n                 Crypt (pubK A) \\<lbrace>Nonce NA, Nonce NB\\<rbrace> =\n                 X \\<longrightarrow>\n                 Nonce NB \\<notin> analz (insert X (knows Spy evsf))) \\<and>\n                (Says B A\n                  (Crypt (pubK A) \\<lbrace>Nonce NA, Nonce NB\\<rbrace>)\n                 \\<in> set evsf \\<longrightarrow>\n                 Nonce NB\n                 \\<notin> analz (insert X (knows Spy evsf))))\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>evs1 NAa Ba.\n       \\<lbrakk>A \\<notin> bad; B \\<notin> bad; evs1 \\<in> ns_public;\n        (\\<forall>C.\n            Says A C (Crypt (pubK C) (Nonce NB))\n            \\<notin> set evs1) \\<longrightarrow>\n        Says B A (Crypt (pubK A) \\<lbrace>Nonce NA, Nonce NB\\<rbrace>)\n        \\<in> set evs1 \\<longrightarrow>\n        Nonce NB \\<notin> analz (knows Spy evs1);\n        Nonce NAa \\<notin> used evs1\\<rbrakk>\n       \\<Longrightarrow> Ba \\<in> bad \\<longrightarrow>\n                         (\\<forall>C.\n                             Says A C (Crypt (pubK C) (Nonce NB))\n                             \\<notin> set evs1) \\<longrightarrow>\n                         Says B A\n                          (Crypt (pubK A)\n                            \\<lbrace>Nonce NA, Nonce NB\\<rbrace>)\n                         \\<in> set evs1 \\<longrightarrow>\n                         NB \\<noteq> NAa\n 3. \\<And>evs2 NBa Ba NAa Aa.\n       \\<lbrakk>A \\<notin> bad; B \\<notin> bad; evs2 \\<in> ns_public;\n        (\\<forall>C.\n            Says A C (Crypt (pubK C) (Nonce NB))\n            \\<notin> set evs2) \\<longrightarrow>\n        Says B A (Crypt (pubK A) \\<lbrace>Nonce NA, Nonce NB\\<rbrace>)\n        \\<in> set evs2 \\<longrightarrow>\n        Nonce NB \\<notin> analz (knows Spy evs2);\n        Nonce NBa \\<notin> used evs2;\n        Gets Ba (Crypt (pubK Ba) \\<lbrace>Nonce NAa, Agent Aa\\<rbrace>)\n        \\<in> set evs2\\<rbrakk>\n       \\<Longrightarrow> (Aa \\<in> bad \\<longrightarrow>\n                          (\\<forall>C.\n                              Says A C (Crypt (pubK C) (Nonce NB))\n                              \\<notin> set evs2) \\<longrightarrow>\n                          (NA = NAa \\<longrightarrow>\n                           A = Aa \\<longrightarrow>\n                           B = Ba \\<longrightarrow> NB \\<noteq> NBa) \\<and>\n                          (Says B A\n                            (Crypt (pubK A)\n                              \\<lbrace>Nonce NA, Nonce NB\\<rbrace>)\n                           \\<in> set evs2 \\<longrightarrow>\n                           NB \\<noteq> NAa \\<and> NB \\<noteq> NBa)) \\<and>\n                         (Aa \\<notin> bad \\<longrightarrow>\n                          (\\<forall>C.\n                              Says A C (Crypt (pubK C) (Nonce NB))\n                              \\<notin> set evs2) \\<longrightarrow>\n                          B = Ba \\<and>\n                          A = Aa \\<and>\n                          NA = NAa \\<and> NB = NBa \\<longrightarrow>\n                          Nonce NBa \\<notin> analz (knows Spy evs2))\n 4. \\<And>evs3 Aa Ba NAa NBa.\n       \\<lbrakk>A \\<notin> bad; B \\<notin> bad; evs3 \\<in> ns_public;\n        (\\<forall>C.\n            Says A C (Crypt (pubK C) (Nonce NB))\n            \\<notin> set evs3) \\<longrightarrow>\n        Says B A (Crypt (pubK A) \\<lbrace>Nonce NA, Nonce NB\\<rbrace>)\n        \\<in> set evs3 \\<longrightarrow>\n        Nonce NB \\<notin> analz (knows Spy evs3);\n        Says Aa Ba (Crypt (pubK Ba) \\<lbrace>Nonce NAa, Agent Aa\\<rbrace>)\n        \\<in> set evs3;\n        Gets Aa (Crypt (pubK Aa) \\<lbrace>Nonce NAa, Nonce NBa\\<rbrace>)\n        \\<in> set evs3\\<rbrakk>\n       \\<Longrightarrow> Ba \\<in> bad \\<longrightarrow>\n                         (\\<forall>C.\n                             (C = Ba \\<longrightarrow>\n                              A = Aa \\<longrightarrow>\n                              NB \\<noteq> NBa) \\<and>\n                             Says A C (Crypt (pubK C) (Nonce NB))\n                             \\<notin> set evs3) \\<longrightarrow>\n                         Says B A\n                          (Crypt (pubK A)\n                            \\<lbrace>Nonce NA, Nonce NB\\<rbrace>)\n                         \\<in> set evs3 \\<longrightarrow>\n                         NB \\<noteq> NBa", "apply clarsimp"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>evsf X Ba.\n       \\<lbrakk>A \\<notin> bad; B \\<notin> bad; evsf \\<in> ns_public;\n        Says B A (Crypt (pubK A) \\<lbrace>Nonce NA, Nonce NB\\<rbrace>)\n        \\<in> set evsf \\<longrightarrow>\n        Nonce NB \\<notin> analz (knows Spy evsf);\n        X \\<in> synth (analz (knows Spy evsf));\n        \\<forall>C.\n           (C = Ba \\<longrightarrow>\n            A = Spy \\<longrightarrow>\n            Crypt (pubK Ba) (Nonce NB) \\<noteq> X) \\<and>\n           Says A C (Crypt (pubK C) (Nonce NB)) \\<notin> set evsf;\n        B = Spy \\<and>\n        A = Ba \\<and>\n        Crypt (pubK A) \\<lbrace>Nonce NA, Nonce NB\\<rbrace> = X \\<and>\n        Nonce NB \\<in> analz (insert X (knows Spy evsf)) \\<or>\n        Says B A (Crypt (pubK A) \\<lbrace>Nonce NA, Nonce NB\\<rbrace>)\n        \\<in> set evsf \\<and>\n        Nonce NB \\<in> analz (insert X (knows Spy evsf))\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>evs1 NAa Ba.\n       \\<lbrakk>A \\<notin> bad; B \\<notin> bad; evs1 \\<in> ns_public;\n        (\\<forall>C.\n            Says A C (Crypt (pubK C) (Nonce NB))\n            \\<notin> set evs1) \\<longrightarrow>\n        Says B A (Crypt (pubK A) \\<lbrace>Nonce NA, Nonce NB\\<rbrace>)\n        \\<in> set evs1 \\<longrightarrow>\n        Nonce NB \\<notin> analz (knows Spy evs1);\n        Nonce NAa \\<notin> used evs1\\<rbrakk>\n       \\<Longrightarrow> Ba \\<in> bad \\<longrightarrow>\n                         (\\<forall>C.\n                             Says A C (Crypt (pubK C) (Nonce NB))\n                             \\<notin> set evs1) \\<longrightarrow>\n                         Says B A\n                          (Crypt (pubK A)\n                            \\<lbrace>Nonce NA, Nonce NB\\<rbrace>)\n                         \\<in> set evs1 \\<longrightarrow>\n                         NB \\<noteq> NAa\n 3. \\<And>evs2 NBa Ba NAa Aa.\n       \\<lbrakk>A \\<notin> bad; B \\<notin> bad; evs2 \\<in> ns_public;\n        (\\<forall>C.\n            Says A C (Crypt (pubK C) (Nonce NB))\n            \\<notin> set evs2) \\<longrightarrow>\n        Says B A (Crypt (pubK A) \\<lbrace>Nonce NA, Nonce NB\\<rbrace>)\n        \\<in> set evs2 \\<longrightarrow>\n        Nonce NB \\<notin> analz (knows Spy evs2);\n        Nonce NBa \\<notin> used evs2;\n        Gets Ba (Crypt (pubK Ba) \\<lbrace>Nonce NAa, Agent Aa\\<rbrace>)\n        \\<in> set evs2\\<rbrakk>\n       \\<Longrightarrow> (Aa \\<in> bad \\<longrightarrow>\n                          (\\<forall>C.\n                              Says A C (Crypt (pubK C) (Nonce NB))\n                              \\<notin> set evs2) \\<longrightarrow>\n                          (NA = NAa \\<longrightarrow>\n                           A = Aa \\<longrightarrow>\n                           B = Ba \\<longrightarrow> NB \\<noteq> NBa) \\<and>\n                          (Says B A\n                            (Crypt (pubK A)\n                              \\<lbrace>Nonce NA, Nonce NB\\<rbrace>)\n                           \\<in> set evs2 \\<longrightarrow>\n                           NB \\<noteq> NAa \\<and> NB \\<noteq> NBa)) \\<and>\n                         (Aa \\<notin> bad \\<longrightarrow>\n                          (\\<forall>C.\n                              Says A C (Crypt (pubK C) (Nonce NB))\n                              \\<notin> set evs2) \\<longrightarrow>\n                          B = Ba \\<and>\n                          A = Aa \\<and>\n                          NA = NAa \\<and> NB = NBa \\<longrightarrow>\n                          Nonce NBa \\<notin> analz (knows Spy evs2))\n 4. \\<And>evs3 Aa Ba NAa NBa.\n       \\<lbrakk>A \\<notin> bad; B \\<notin> bad; evs3 \\<in> ns_public;\n        (\\<forall>C.\n            Says A C (Crypt (pubK C) (Nonce NB))\n            \\<notin> set evs3) \\<longrightarrow>\n        Says B A (Crypt (pubK A) \\<lbrace>Nonce NA, Nonce NB\\<rbrace>)\n        \\<in> set evs3 \\<longrightarrow>\n        Nonce NB \\<notin> analz (knows Spy evs3);\n        Says Aa Ba (Crypt (pubK Ba) \\<lbrace>Nonce NAa, Agent Aa\\<rbrace>)\n        \\<in> set evs3;\n        Gets Aa (Crypt (pubK Aa) \\<lbrace>Nonce NAa, Nonce NBa\\<rbrace>)\n        \\<in> set evs3\\<rbrakk>\n       \\<Longrightarrow> Ba \\<in> bad \\<longrightarrow>\n                         (\\<forall>C.\n                             (C = Ba \\<longrightarrow>\n                              A = Aa \\<longrightarrow>\n                              NB \\<noteq> NBa) \\<and>\n                             Says A C (Crypt (pubK C) (Nonce NB))\n                             \\<notin> set evs3) \\<longrightarrow>\n                         Says B A\n                          (Crypt (pubK A)\n                            \\<lbrace>Nonce NA, Nonce NB\\<rbrace>)\n                         \\<in> set evs3 \\<longrightarrow>\n                         NB \\<noteq> NBa", "apply (erule disjE)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>evsf X Ba.\n       \\<lbrakk>A \\<notin> bad; B \\<notin> bad; evsf \\<in> ns_public;\n        Says B A (Crypt (pubK A) \\<lbrace>Nonce NA, Nonce NB\\<rbrace>)\n        \\<in> set evsf \\<longrightarrow>\n        Nonce NB \\<notin> analz (knows Spy evsf);\n        X \\<in> synth (analz (knows Spy evsf));\n        \\<forall>C.\n           (C = Ba \\<longrightarrow>\n            A = Spy \\<longrightarrow>\n            Crypt (pubK Ba) (Nonce NB) \\<noteq> X) \\<and>\n           Says A C (Crypt (pubK C) (Nonce NB)) \\<notin> set evsf;\n        B = Spy \\<and>\n        A = Ba \\<and>\n        Crypt (pubK A) \\<lbrace>Nonce NA, Nonce NB\\<rbrace> = X \\<and>\n        Nonce NB \\<in> analz (insert X (knows Spy evsf))\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>evsf X Ba.\n       \\<lbrakk>A \\<notin> bad; B \\<notin> bad; evsf \\<in> ns_public;\n        Says B A (Crypt (pubK A) \\<lbrace>Nonce NA, Nonce NB\\<rbrace>)\n        \\<in> set evsf \\<longrightarrow>\n        Nonce NB \\<notin> analz (knows Spy evsf);\n        X \\<in> synth (analz (knows Spy evsf));\n        \\<forall>C.\n           (C = Ba \\<longrightarrow>\n            A = Spy \\<longrightarrow>\n            Crypt (pubK Ba) (Nonce NB) \\<noteq> X) \\<and>\n           Says A C (Crypt (pubK C) (Nonce NB)) \\<notin> set evsf;\n        Says B A (Crypt (pubK A) \\<lbrace>Nonce NA, Nonce NB\\<rbrace>)\n        \\<in> set evsf \\<and>\n        Nonce NB \\<in> analz (insert X (knows Spy evsf))\\<rbrakk>\n       \\<Longrightarrow> False\n 3. \\<And>evs1 NAa Ba.\n       \\<lbrakk>A \\<notin> bad; B \\<notin> bad; evs1 \\<in> ns_public;\n        (\\<forall>C.\n            Says A C (Crypt (pubK C) (Nonce NB))\n            \\<notin> set evs1) \\<longrightarrow>\n        Says B A (Crypt (pubK A) \\<lbrace>Nonce NA, Nonce NB\\<rbrace>)\n        \\<in> set evs1 \\<longrightarrow>\n        Nonce NB \\<notin> analz (knows Spy evs1);\n        Nonce NAa \\<notin> used evs1\\<rbrakk>\n       \\<Longrightarrow> Ba \\<in> bad \\<longrightarrow>\n                         (\\<forall>C.\n                             Says A C (Crypt (pubK C) (Nonce NB))\n                             \\<notin> set evs1) \\<longrightarrow>\n                         Says B A\n                          (Crypt (pubK A)\n                            \\<lbrace>Nonce NA, Nonce NB\\<rbrace>)\n                         \\<in> set evs1 \\<longrightarrow>\n                         NB \\<noteq> NAa\n 4. \\<And>evs2 NBa Ba NAa Aa.\n       \\<lbrakk>A \\<notin> bad; B \\<notin> bad; evs2 \\<in> ns_public;\n        (\\<forall>C.\n            Says A C (Crypt (pubK C) (Nonce NB))\n            \\<notin> set evs2) \\<longrightarrow>\n        Says B A (Crypt (pubK A) \\<lbrace>Nonce NA, Nonce NB\\<rbrace>)\n        \\<in> set evs2 \\<longrightarrow>\n        Nonce NB \\<notin> analz (knows Spy evs2);\n        Nonce NBa \\<notin> used evs2;\n        Gets Ba (Crypt (pubK Ba) \\<lbrace>Nonce NAa, Agent Aa\\<rbrace>)\n        \\<in> set evs2\\<rbrakk>\n       \\<Longrightarrow> (Aa \\<in> bad \\<longrightarrow>\n                          (\\<forall>C.\n                              Says A C (Crypt (pubK C) (Nonce NB))\n                              \\<notin> set evs2) \\<longrightarrow>\n                          (NA = NAa \\<longrightarrow>\n                           A = Aa \\<longrightarrow>\n                           B = Ba \\<longrightarrow> NB \\<noteq> NBa) \\<and>\n                          (Says B A\n                            (Crypt (pubK A)\n                              \\<lbrace>Nonce NA, Nonce NB\\<rbrace>)\n                           \\<in> set evs2 \\<longrightarrow>\n                           NB \\<noteq> NAa \\<and> NB \\<noteq> NBa)) \\<and>\n                         (Aa \\<notin> bad \\<longrightarrow>\n                          (\\<forall>C.\n                              Says A C (Crypt (pubK C) (Nonce NB))\n                              \\<notin> set evs2) \\<longrightarrow>\n                          B = Ba \\<and>\n                          A = Aa \\<and>\n                          NA = NAa \\<and> NB = NBa \\<longrightarrow>\n                          Nonce NBa \\<notin> analz (knows Spy evs2))\n 5. \\<And>evs3 Aa Ba NAa NBa.\n       \\<lbrakk>A \\<notin> bad; B \\<notin> bad; evs3 \\<in> ns_public;\n        (\\<forall>C.\n            Says A C (Crypt (pubK C) (Nonce NB))\n            \\<notin> set evs3) \\<longrightarrow>\n        Says B A (Crypt (pubK A) \\<lbrace>Nonce NA, Nonce NB\\<rbrace>)\n        \\<in> set evs3 \\<longrightarrow>\n        Nonce NB \\<notin> analz (knows Spy evs3);\n        Says Aa Ba (Crypt (pubK Ba) \\<lbrace>Nonce NAa, Agent Aa\\<rbrace>)\n        \\<in> set evs3;\n        Gets Aa (Crypt (pubK Aa) \\<lbrace>Nonce NAa, Nonce NBa\\<rbrace>)\n        \\<in> set evs3\\<rbrakk>\n       \\<Longrightarrow> Ba \\<in> bad \\<longrightarrow>\n                         (\\<forall>C.\n                             (C = Ba \\<longrightarrow>\n                              A = Aa \\<longrightarrow>\n                              NB \\<noteq> NBa) \\<and>\n                             Says A C (Crypt (pubK C) (Nonce NB))\n                             \\<notin> set evs3) \\<longrightarrow>\n                         Says B A\n                          (Crypt (pubK A)\n                            \\<lbrace>Nonce NA, Nonce NB\\<rbrace>)\n                         \\<in> set evs3 \\<longrightarrow>\n                         NB \\<noteq> NBa", "apply simp"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>evsf X Ba.\n       \\<lbrakk>A \\<notin> bad; B \\<notin> bad; evsf \\<in> ns_public;\n        Says B A (Crypt (pubK A) \\<lbrace>Nonce NA, Nonce NB\\<rbrace>)\n        \\<in> set evsf \\<longrightarrow>\n        Nonce NB \\<notin> analz (knows Spy evsf);\n        X \\<in> synth (analz (knows Spy evsf));\n        \\<forall>C.\n           (C = Ba \\<longrightarrow>\n            A = Spy \\<longrightarrow>\n            Crypt (pubK Ba) (Nonce NB) \\<noteq> X) \\<and>\n           Says A C (Crypt (pubK C) (Nonce NB)) \\<notin> set evsf;\n        Says B A (Crypt (pubK A) \\<lbrace>Nonce NA, Nonce NB\\<rbrace>)\n        \\<in> set evsf \\<and>\n        Nonce NB \\<in> analz (insert X (knows Spy evsf))\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>evs1 NAa Ba.\n       \\<lbrakk>A \\<notin> bad; B \\<notin> bad; evs1 \\<in> ns_public;\n        (\\<forall>C.\n            Says A C (Crypt (pubK C) (Nonce NB))\n            \\<notin> set evs1) \\<longrightarrow>\n        Says B A (Crypt (pubK A) \\<lbrace>Nonce NA, Nonce NB\\<rbrace>)\n        \\<in> set evs1 \\<longrightarrow>\n        Nonce NB \\<notin> analz (knows Spy evs1);\n        Nonce NAa \\<notin> used evs1\\<rbrakk>\n       \\<Longrightarrow> Ba \\<in> bad \\<longrightarrow>\n                         (\\<forall>C.\n                             Says A C (Crypt (pubK C) (Nonce NB))\n                             \\<notin> set evs1) \\<longrightarrow>\n                         Says B A\n                          (Crypt (pubK A)\n                            \\<lbrace>Nonce NA, Nonce NB\\<rbrace>)\n                         \\<in> set evs1 \\<longrightarrow>\n                         NB \\<noteq> NAa\n 3. \\<And>evs2 NBa Ba NAa Aa.\n       \\<lbrakk>A \\<notin> bad; B \\<notin> bad; evs2 \\<in> ns_public;\n        (\\<forall>C.\n            Says A C (Crypt (pubK C) (Nonce NB))\n            \\<notin> set evs2) \\<longrightarrow>\n        Says B A (Crypt (pubK A) \\<lbrace>Nonce NA, Nonce NB\\<rbrace>)\n        \\<in> set evs2 \\<longrightarrow>\n        Nonce NB \\<notin> analz (knows Spy evs2);\n        Nonce NBa \\<notin> used evs2;\n        Gets Ba (Crypt (pubK Ba) \\<lbrace>Nonce NAa, Agent Aa\\<rbrace>)\n        \\<in> set evs2\\<rbrakk>\n       \\<Longrightarrow> (Aa \\<in> bad \\<longrightarrow>\n                          (\\<forall>C.\n                              Says A C (Crypt (pubK C) (Nonce NB))\n                              \\<notin> set evs2) \\<longrightarrow>\n                          (NA = NAa \\<longrightarrow>\n                           A = Aa \\<longrightarrow>\n                           B = Ba \\<longrightarrow> NB \\<noteq> NBa) \\<and>\n                          (Says B A\n                            (Crypt (pubK A)\n                              \\<lbrace>Nonce NA, Nonce NB\\<rbrace>)\n                           \\<in> set evs2 \\<longrightarrow>\n                           NB \\<noteq> NAa \\<and> NB \\<noteq> NBa)) \\<and>\n                         (Aa \\<notin> bad \\<longrightarrow>\n                          (\\<forall>C.\n                              Says A C (Crypt (pubK C) (Nonce NB))\n                              \\<notin> set evs2) \\<longrightarrow>\n                          B = Ba \\<and>\n                          A = Aa \\<and>\n                          NA = NAa \\<and> NB = NBa \\<longrightarrow>\n                          Nonce NBa \\<notin> analz (knows Spy evs2))\n 4. \\<And>evs3 Aa Ba NAa NBa.\n       \\<lbrakk>A \\<notin> bad; B \\<notin> bad; evs3 \\<in> ns_public;\n        (\\<forall>C.\n            Says A C (Crypt (pubK C) (Nonce NB))\n            \\<notin> set evs3) \\<longrightarrow>\n        Says B A (Crypt (pubK A) \\<lbrace>Nonce NA, Nonce NB\\<rbrace>)\n        \\<in> set evs3 \\<longrightarrow>\n        Nonce NB \\<notin> analz (knows Spy evs3);\n        Says Aa Ba (Crypt (pubK Ba) \\<lbrace>Nonce NAa, Agent Aa\\<rbrace>)\n        \\<in> set evs3;\n        Gets Aa (Crypt (pubK Aa) \\<lbrace>Nonce NAa, Nonce NBa\\<rbrace>)\n        \\<in> set evs3\\<rbrakk>\n       \\<Longrightarrow> Ba \\<in> bad \\<longrightarrow>\n                         (\\<forall>C.\n                             (C = Ba \\<longrightarrow>\n                              A = Aa \\<longrightarrow>\n                              NB \\<noteq> NBa) \\<and>\n                             Says A C (Crypt (pubK C) (Nonce NB))\n                             \\<notin> set evs3) \\<longrightarrow>\n                         Says B A\n                          (Crypt (pubK A)\n                            \\<lbrace>Nonce NA, Nonce NB\\<rbrace>)\n                         \\<in> set evs3 \\<longrightarrow>\n                         NB \\<noteq> NBa", "apply simp"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>evsf X Ba.\n       \\<lbrakk>A \\<notin> bad; B \\<notin> bad; evsf \\<in> ns_public;\n        Nonce NB \\<notin> analz (knows Spy evsf);\n        X \\<in> synth (analz (knows Spy evsf));\n        \\<forall>C.\n           (C = Ba \\<longrightarrow>\n            A = Spy \\<longrightarrow>\n            Crypt (pubK Ba) (Nonce NB) \\<noteq> X) \\<and>\n           Says A C (Crypt (pubK C) (Nonce NB)) \\<notin> set evsf;\n        Says B A (Crypt (pubK A) \\<lbrace>Nonce NA, Nonce NB\\<rbrace>)\n        \\<in> set evsf \\<and>\n        Nonce NB \\<in> analz (insert X (knows Spy evsf))\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>evs1 NAa Ba.\n       \\<lbrakk>A \\<notin> bad; B \\<notin> bad; evs1 \\<in> ns_public;\n        (\\<forall>C.\n            Says A C (Crypt (pubK C) (Nonce NB))\n            \\<notin> set evs1) \\<longrightarrow>\n        Says B A (Crypt (pubK A) \\<lbrace>Nonce NA, Nonce NB\\<rbrace>)\n        \\<in> set evs1 \\<longrightarrow>\n        Nonce NB \\<notin> analz (knows Spy evs1);\n        Nonce NAa \\<notin> used evs1\\<rbrakk>\n       \\<Longrightarrow> Ba \\<in> bad \\<longrightarrow>\n                         (\\<forall>C.\n                             Says A C (Crypt (pubK C) (Nonce NB))\n                             \\<notin> set evs1) \\<longrightarrow>\n                         Says B A\n                          (Crypt (pubK A)\n                            \\<lbrace>Nonce NA, Nonce NB\\<rbrace>)\n                         \\<in> set evs1 \\<longrightarrow>\n                         NB \\<noteq> NAa\n 3. \\<And>evs2 NBa Ba NAa Aa.\n       \\<lbrakk>A \\<notin> bad; B \\<notin> bad; evs2 \\<in> ns_public;\n        (\\<forall>C.\n            Says A C (Crypt (pubK C) (Nonce NB))\n            \\<notin> set evs2) \\<longrightarrow>\n        Says B A (Crypt (pubK A) \\<lbrace>Nonce NA, Nonce NB\\<rbrace>)\n        \\<in> set evs2 \\<longrightarrow>\n        Nonce NB \\<notin> analz (knows Spy evs2);\n        Nonce NBa \\<notin> used evs2;\n        Gets Ba (Crypt (pubK Ba) \\<lbrace>Nonce NAa, Agent Aa\\<rbrace>)\n        \\<in> set evs2\\<rbrakk>\n       \\<Longrightarrow> (Aa \\<in> bad \\<longrightarrow>\n                          (\\<forall>C.\n                              Says A C (Crypt (pubK C) (Nonce NB))\n                              \\<notin> set evs2) \\<longrightarrow>\n                          (NA = NAa \\<longrightarrow>\n                           A = Aa \\<longrightarrow>\n                           B = Ba \\<longrightarrow> NB \\<noteq> NBa) \\<and>\n                          (Says B A\n                            (Crypt (pubK A)\n                              \\<lbrace>Nonce NA, Nonce NB\\<rbrace>)\n                           \\<in> set evs2 \\<longrightarrow>\n                           NB \\<noteq> NAa \\<and> NB \\<noteq> NBa)) \\<and>\n                         (Aa \\<notin> bad \\<longrightarrow>\n                          (\\<forall>C.\n                              Says A C (Crypt (pubK C) (Nonce NB))\n                              \\<notin> set evs2) \\<longrightarrow>\n                          B = Ba \\<and>\n                          A = Aa \\<and>\n                          NA = NAa \\<and> NB = NBa \\<longrightarrow>\n                          Nonce NBa \\<notin> analz (knows Spy evs2))\n 4. \\<And>evs3 Aa Ba NAa NBa.\n       \\<lbrakk>A \\<notin> bad; B \\<notin> bad; evs3 \\<in> ns_public;\n        (\\<forall>C.\n            Says A C (Crypt (pubK C) (Nonce NB))\n            \\<notin> set evs3) \\<longrightarrow>\n        Says B A (Crypt (pubK A) \\<lbrace>Nonce NA, Nonce NB\\<rbrace>)\n        \\<in> set evs3 \\<longrightarrow>\n        Nonce NB \\<notin> analz (knows Spy evs3);\n        Says Aa Ba (Crypt (pubK Ba) \\<lbrace>Nonce NAa, Agent Aa\\<rbrace>)\n        \\<in> set evs3;\n        Gets Aa (Crypt (pubK Aa) \\<lbrace>Nonce NAa, Nonce NBa\\<rbrace>)\n        \\<in> set evs3\\<rbrakk>\n       \\<Longrightarrow> Ba \\<in> bad \\<longrightarrow>\n                         (\\<forall>C.\n                             (C = Ba \\<longrightarrow>\n                              A = Aa \\<longrightarrow>\n                              NB \\<noteq> NBa) \\<and>\n                             Says A C (Crypt (pubK C) (Nonce NB))\n                             \\<notin> set evs3) \\<longrightarrow>\n                         Says B A\n                          (Crypt (pubK A)\n                            \\<lbrace>Nonce NA, Nonce NB\\<rbrace>)\n                         \\<in> set evs3 \\<longrightarrow>\n                         NB \\<noteq> NBa", "apply clarify"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>evsf X Ba.\n       \\<lbrakk>A \\<notin> bad; B \\<notin> bad; evsf \\<in> ns_public;\n        Nonce NB \\<notin> analz (knows Spy evsf);\n        X \\<in> synth (analz (knows Spy evsf));\n        \\<forall>C.\n           (C = Ba \\<longrightarrow>\n            A = Spy \\<longrightarrow>\n            Crypt (pubK Ba) (Nonce NB) \\<noteq> X) \\<and>\n           Says A C (Crypt (pubK C) (Nonce NB)) \\<notin> set evsf;\n        Says B A (Crypt (pubK A) \\<lbrace>Nonce NA, Nonce NB\\<rbrace>)\n        \\<in> set evsf;\n        Nonce NB \\<in> analz (insert X (knows Spy evsf))\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>evs1 NAa Ba.\n       \\<lbrakk>A \\<notin> bad; B \\<notin> bad; evs1 \\<in> ns_public;\n        (\\<forall>C.\n            Says A C (Crypt (pubK C) (Nonce NB))\n            \\<notin> set evs1) \\<longrightarrow>\n        Says B A (Crypt (pubK A) \\<lbrace>Nonce NA, Nonce NB\\<rbrace>)\n        \\<in> set evs1 \\<longrightarrow>\n        Nonce NB \\<notin> analz (knows Spy evs1);\n        Nonce NAa \\<notin> used evs1\\<rbrakk>\n       \\<Longrightarrow> Ba \\<in> bad \\<longrightarrow>\n                         (\\<forall>C.\n                             Says A C (Crypt (pubK C) (Nonce NB))\n                             \\<notin> set evs1) \\<longrightarrow>\n                         Says B A\n                          (Crypt (pubK A)\n                            \\<lbrace>Nonce NA, Nonce NB\\<rbrace>)\n                         \\<in> set evs1 \\<longrightarrow>\n                         NB \\<noteq> NAa\n 3. \\<And>evs2 NBa Ba NAa Aa.\n       \\<lbrakk>A \\<notin> bad; B \\<notin> bad; evs2 \\<in> ns_public;\n        (\\<forall>C.\n            Says A C (Crypt (pubK C) (Nonce NB))\n            \\<notin> set evs2) \\<longrightarrow>\n        Says B A (Crypt (pubK A) \\<lbrace>Nonce NA, Nonce NB\\<rbrace>)\n        \\<in> set evs2 \\<longrightarrow>\n        Nonce NB \\<notin> analz (knows Spy evs2);\n        Nonce NBa \\<notin> used evs2;\n        Gets Ba (Crypt (pubK Ba) \\<lbrace>Nonce NAa, Agent Aa\\<rbrace>)\n        \\<in> set evs2\\<rbrakk>\n       \\<Longrightarrow> (Aa \\<in> bad \\<longrightarrow>\n                          (\\<forall>C.\n                              Says A C (Crypt (pubK C) (Nonce NB))\n                              \\<notin> set evs2) \\<longrightarrow>\n                          (NA = NAa \\<longrightarrow>\n                           A = Aa \\<longrightarrow>\n                           B = Ba \\<longrightarrow> NB \\<noteq> NBa) \\<and>\n                          (Says B A\n                            (Crypt (pubK A)\n                              \\<lbrace>Nonce NA, Nonce NB\\<rbrace>)\n                           \\<in> set evs2 \\<longrightarrow>\n                           NB \\<noteq> NAa \\<and> NB \\<noteq> NBa)) \\<and>\n                         (Aa \\<notin> bad \\<longrightarrow>\n                          (\\<forall>C.\n                              Says A C (Crypt (pubK C) (Nonce NB))\n                              \\<notin> set evs2) \\<longrightarrow>\n                          B = Ba \\<and>\n                          A = Aa \\<and>\n                          NA = NAa \\<and> NB = NBa \\<longrightarrow>\n                          Nonce NBa \\<notin> analz (knows Spy evs2))\n 4. \\<And>evs3 Aa Ba NAa NBa.\n       \\<lbrakk>A \\<notin> bad; B \\<notin> bad; evs3 \\<in> ns_public;\n        (\\<forall>C.\n            Says A C (Crypt (pubK C) (Nonce NB))\n            \\<notin> set evs3) \\<longrightarrow>\n        Says B A (Crypt (pubK A) \\<lbrace>Nonce NA, Nonce NB\\<rbrace>)\n        \\<in> set evs3 \\<longrightarrow>\n        Nonce NB \\<notin> analz (knows Spy evs3);\n        Says Aa Ba (Crypt (pubK Ba) \\<lbrace>Nonce NAa, Agent Aa\\<rbrace>)\n        \\<in> set evs3;\n        Gets Aa (Crypt (pubK Aa) \\<lbrace>Nonce NAa, Nonce NBa\\<rbrace>)\n        \\<in> set evs3\\<rbrakk>\n       \\<Longrightarrow> Ba \\<in> bad \\<longrightarrow>\n                         (\\<forall>C.\n                             (C = Ba \\<longrightarrow>\n                              A = Aa \\<longrightarrow>\n                              NB \\<noteq> NBa) \\<and>\n                             Says A C (Crypt (pubK C) (Nonce NB))\n                             \\<notin> set evs3) \\<longrightarrow>\n                         Says B A\n                          (Crypt (pubK A)\n                            \\<lbrace>Nonce NA, Nonce NB\\<rbrace>)\n                         \\<in> set evs3 \\<longrightarrow>\n                         NB \\<noteq> NBa", "apply (drule Fake_analz_insert [THEN subsetD], simp)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>evsf X Ba.\n       \\<lbrakk>A \\<notin> bad; B \\<notin> bad; evsf \\<in> ns_public;\n        Nonce NB \\<notin> analz (knows Spy evsf);\n        \\<forall>C.\n           (C = Ba \\<longrightarrow>\n            A = Spy \\<longrightarrow>\n            Crypt (pubK Ba) (Nonce NB) \\<noteq> X) \\<and>\n           Says A C (Crypt (pubK C) (Nonce NB)) \\<notin> set evsf;\n        Says B A (Crypt (pubK A) \\<lbrace>Nonce NA, Nonce NB\\<rbrace>)\n        \\<in> set evsf;\n        Nonce NB \\<in> analz (insert X (knows Spy evsf));\n        Nonce NB\n        \\<in> synth (analz (knows Spy evsf)) \\<union>\n              analz (knows Spy evsf \\<union> knows Spy evsf)\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>evs1 NAa Ba.\n       \\<lbrakk>A \\<notin> bad; B \\<notin> bad; evs1 \\<in> ns_public;\n        (\\<forall>C.\n            Says A C (Crypt (pubK C) (Nonce NB))\n            \\<notin> set evs1) \\<longrightarrow>\n        Says B A (Crypt (pubK A) \\<lbrace>Nonce NA, Nonce NB\\<rbrace>)\n        \\<in> set evs1 \\<longrightarrow>\n        Nonce NB \\<notin> analz (knows Spy evs1);\n        Nonce NAa \\<notin> used evs1\\<rbrakk>\n       \\<Longrightarrow> Ba \\<in> bad \\<longrightarrow>\n                         (\\<forall>C.\n                             Says A C (Crypt (pubK C) (Nonce NB))\n                             \\<notin> set evs1) \\<longrightarrow>\n                         Says B A\n                          (Crypt (pubK A)\n                            \\<lbrace>Nonce NA, Nonce NB\\<rbrace>)\n                         \\<in> set evs1 \\<longrightarrow>\n                         NB \\<noteq> NAa\n 3. \\<And>evs2 NBa Ba NAa Aa.\n       \\<lbrakk>A \\<notin> bad; B \\<notin> bad; evs2 \\<in> ns_public;\n        (\\<forall>C.\n            Says A C (Crypt (pubK C) (Nonce NB))\n            \\<notin> set evs2) \\<longrightarrow>\n        Says B A (Crypt (pubK A) \\<lbrace>Nonce NA, Nonce NB\\<rbrace>)\n        \\<in> set evs2 \\<longrightarrow>\n        Nonce NB \\<notin> analz (knows Spy evs2);\n        Nonce NBa \\<notin> used evs2;\n        Gets Ba (Crypt (pubK Ba) \\<lbrace>Nonce NAa, Agent Aa\\<rbrace>)\n        \\<in> set evs2\\<rbrakk>\n       \\<Longrightarrow> (Aa \\<in> bad \\<longrightarrow>\n                          (\\<forall>C.\n                              Says A C (Crypt (pubK C) (Nonce NB))\n                              \\<notin> set evs2) \\<longrightarrow>\n                          (NA = NAa \\<longrightarrow>\n                           A = Aa \\<longrightarrow>\n                           B = Ba \\<longrightarrow> NB \\<noteq> NBa) \\<and>\n                          (Says B A\n                            (Crypt (pubK A)\n                              \\<lbrace>Nonce NA, Nonce NB\\<rbrace>)\n                           \\<in> set evs2 \\<longrightarrow>\n                           NB \\<noteq> NAa \\<and> NB \\<noteq> NBa)) \\<and>\n                         (Aa \\<notin> bad \\<longrightarrow>\n                          (\\<forall>C.\n                              Says A C (Crypt (pubK C) (Nonce NB))\n                              \\<notin> set evs2) \\<longrightarrow>\n                          B = Ba \\<and>\n                          A = Aa \\<and>\n                          NA = NAa \\<and> NB = NBa \\<longrightarrow>\n                          Nonce NBa \\<notin> analz (knows Spy evs2))\n 4. \\<And>evs3 Aa Ba NAa NBa.\n       \\<lbrakk>A \\<notin> bad; B \\<notin> bad; evs3 \\<in> ns_public;\n        (\\<forall>C.\n            Says A C (Crypt (pubK C) (Nonce NB))\n            \\<notin> set evs3) \\<longrightarrow>\n        Says B A (Crypt (pubK A) \\<lbrace>Nonce NA, Nonce NB\\<rbrace>)\n        \\<in> set evs3 \\<longrightarrow>\n        Nonce NB \\<notin> analz (knows Spy evs3);\n        Says Aa Ba (Crypt (pubK Ba) \\<lbrace>Nonce NAa, Agent Aa\\<rbrace>)\n        \\<in> set evs3;\n        Gets Aa (Crypt (pubK Aa) \\<lbrace>Nonce NAa, Nonce NBa\\<rbrace>)\n        \\<in> set evs3\\<rbrakk>\n       \\<Longrightarrow> Ba \\<in> bad \\<longrightarrow>\n                         (\\<forall>C.\n                             (C = Ba \\<longrightarrow>\n                              A = Aa \\<longrightarrow>\n                              NB \\<noteq> NBa) \\<and>\n                             Says A C (Crypt (pubK C) (Nonce NB))\n                             \\<notin> set evs3) \\<longrightarrow>\n                         Says B A\n                          (Crypt (pubK A)\n                            \\<lbrace>Nonce NA, Nonce NB\\<rbrace>)\n                         \\<in> set evs3 \\<longrightarrow>\n                         NB \\<noteq> NBa", "apply simp"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>evs1 NAa Ba.\n       \\<lbrakk>A \\<notin> bad; B \\<notin> bad; evs1 \\<in> ns_public;\n        (\\<forall>C.\n            Says A C (Crypt (pubK C) (Nonce NB))\n            \\<notin> set evs1) \\<longrightarrow>\n        Says B A (Crypt (pubK A) \\<lbrace>Nonce NA, Nonce NB\\<rbrace>)\n        \\<in> set evs1 \\<longrightarrow>\n        Nonce NB \\<notin> analz (knows Spy evs1);\n        Nonce NAa \\<notin> used evs1\\<rbrakk>\n       \\<Longrightarrow> Ba \\<in> bad \\<longrightarrow>\n                         (\\<forall>C.\n                             Says A C (Crypt (pubK C) (Nonce NB))\n                             \\<notin> set evs1) \\<longrightarrow>\n                         Says B A\n                          (Crypt (pubK A)\n                            \\<lbrace>Nonce NA, Nonce NB\\<rbrace>)\n                         \\<in> set evs1 \\<longrightarrow>\n                         NB \\<noteq> NAa\n 2. \\<And>evs2 NBa Ba NAa Aa.\n       \\<lbrakk>A \\<notin> bad; B \\<notin> bad; evs2 \\<in> ns_public;\n        (\\<forall>C.\n            Says A C (Crypt (pubK C) (Nonce NB))\n            \\<notin> set evs2) \\<longrightarrow>\n        Says B A (Crypt (pubK A) \\<lbrace>Nonce NA, Nonce NB\\<rbrace>)\n        \\<in> set evs2 \\<longrightarrow>\n        Nonce NB \\<notin> analz (knows Spy evs2);\n        Nonce NBa \\<notin> used evs2;\n        Gets Ba (Crypt (pubK Ba) \\<lbrace>Nonce NAa, Agent Aa\\<rbrace>)\n        \\<in> set evs2\\<rbrakk>\n       \\<Longrightarrow> (Aa \\<in> bad \\<longrightarrow>\n                          (\\<forall>C.\n                              Says A C (Crypt (pubK C) (Nonce NB))\n                              \\<notin> set evs2) \\<longrightarrow>\n                          (NA = NAa \\<longrightarrow>\n                           A = Aa \\<longrightarrow>\n                           B = Ba \\<longrightarrow> NB \\<noteq> NBa) \\<and>\n                          (Says B A\n                            (Crypt (pubK A)\n                              \\<lbrace>Nonce NA, Nonce NB\\<rbrace>)\n                           \\<in> set evs2 \\<longrightarrow>\n                           NB \\<noteq> NAa \\<and> NB \\<noteq> NBa)) \\<and>\n                         (Aa \\<notin> bad \\<longrightarrow>\n                          (\\<forall>C.\n                              Says A C (Crypt (pubK C) (Nonce NB))\n                              \\<notin> set evs2) \\<longrightarrow>\n                          B = Ba \\<and>\n                          A = Aa \\<and>\n                          NA = NAa \\<and> NB = NBa \\<longrightarrow>\n                          Nonce NBa \\<notin> analz (knows Spy evs2))\n 3. \\<And>evs3 Aa Ba NAa NBa.\n       \\<lbrakk>A \\<notin> bad; B \\<notin> bad; evs3 \\<in> ns_public;\n        (\\<forall>C.\n            Says A C (Crypt (pubK C) (Nonce NB))\n            \\<notin> set evs3) \\<longrightarrow>\n        Says B A (Crypt (pubK A) \\<lbrace>Nonce NA, Nonce NB\\<rbrace>)\n        \\<in> set evs3 \\<longrightarrow>\n        Nonce NB \\<notin> analz (knows Spy evs3);\n        Says Aa Ba (Crypt (pubK Ba) \\<lbrace>Nonce NAa, Agent Aa\\<rbrace>)\n        \\<in> set evs3;\n        Gets Aa (Crypt (pubK Aa) \\<lbrace>Nonce NAa, Nonce NBa\\<rbrace>)\n        \\<in> set evs3\\<rbrakk>\n       \\<Longrightarrow> Ba \\<in> bad \\<longrightarrow>\n                         (\\<forall>C.\n                             (C = Ba \\<longrightarrow>\n                              A = Aa \\<longrightarrow>\n                              NB \\<noteq> NBa) \\<and>\n                             Says A C (Crypt (pubK C) (Nonce NB))\n                             \\<notin> set evs3) \\<longrightarrow>\n                         Says B A\n                          (Crypt (pubK A)\n                            \\<lbrace>Nonce NA, Nonce NB\\<rbrace>)\n                         \\<in> set evs3 \\<longrightarrow>\n                         NB \\<noteq> NBa", "txt\\<open>...of commands!\\<close>"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>evs1 NAa Ba.\n       \\<lbrakk>A \\<notin> bad; B \\<notin> bad; evs1 \\<in> ns_public;\n        (\\<forall>C.\n            Says A C (Crypt (pubK C) (Nonce NB))\n            \\<notin> set evs1) \\<longrightarrow>\n        Says B A (Crypt (pubK A) \\<lbrace>Nonce NA, Nonce NB\\<rbrace>)\n        \\<in> set evs1 \\<longrightarrow>\n        Nonce NB \\<notin> analz (knows Spy evs1);\n        Nonce NAa \\<notin> used evs1\\<rbrakk>\n       \\<Longrightarrow> Ba \\<in> bad \\<longrightarrow>\n                         (\\<forall>C.\n                             Says A C (Crypt (pubK C) (Nonce NB))\n                             \\<notin> set evs1) \\<longrightarrow>\n                         Says B A\n                          (Crypt (pubK A)\n                            \\<lbrace>Nonce NA, Nonce NB\\<rbrace>)\n                         \\<in> set evs1 \\<longrightarrow>\n                         NB \\<noteq> NAa\n 2. \\<And>evs2 NBa Ba NAa Aa.\n       \\<lbrakk>A \\<notin> bad; B \\<notin> bad; evs2 \\<in> ns_public;\n        (\\<forall>C.\n            Says A C (Crypt (pubK C) (Nonce NB))\n            \\<notin> set evs2) \\<longrightarrow>\n        Says B A (Crypt (pubK A) \\<lbrace>Nonce NA, Nonce NB\\<rbrace>)\n        \\<in> set evs2 \\<longrightarrow>\n        Nonce NB \\<notin> analz (knows Spy evs2);\n        Nonce NBa \\<notin> used evs2;\n        Gets Ba (Crypt (pubK Ba) \\<lbrace>Nonce NAa, Agent Aa\\<rbrace>)\n        \\<in> set evs2\\<rbrakk>\n       \\<Longrightarrow> (Aa \\<in> bad \\<longrightarrow>\n                          (\\<forall>C.\n                              Says A C (Crypt (pubK C) (Nonce NB))\n                              \\<notin> set evs2) \\<longrightarrow>\n                          (NA = NAa \\<longrightarrow>\n                           A = Aa \\<longrightarrow>\n                           B = Ba \\<longrightarrow> NB \\<noteq> NBa) \\<and>\n                          (Says B A\n                            (Crypt (pubK A)\n                              \\<lbrace>Nonce NA, Nonce NB\\<rbrace>)\n                           \\<in> set evs2 \\<longrightarrow>\n                           NB \\<noteq> NAa \\<and> NB \\<noteq> NBa)) \\<and>\n                         (Aa \\<notin> bad \\<longrightarrow>\n                          (\\<forall>C.\n                              Says A C (Crypt (pubK C) (Nonce NB))\n                              \\<notin> set evs2) \\<longrightarrow>\n                          B = Ba \\<and>\n                          A = Aa \\<and>\n                          NA = NAa \\<and> NB = NBa \\<longrightarrow>\n                          Nonce NBa \\<notin> analz (knows Spy evs2))\n 3. \\<And>evs3 Aa Ba NAa NBa.\n       \\<lbrakk>A \\<notin> bad; B \\<notin> bad; evs3 \\<in> ns_public;\n        (\\<forall>C.\n            Says A C (Crypt (pubK C) (Nonce NB))\n            \\<notin> set evs3) \\<longrightarrow>\n        Says B A (Crypt (pubK A) \\<lbrace>Nonce NA, Nonce NB\\<rbrace>)\n        \\<in> set evs3 \\<longrightarrow>\n        Nonce NB \\<notin> analz (knows Spy evs3);\n        Says Aa Ba (Crypt (pubK Ba) \\<lbrace>Nonce NAa, Agent Aa\\<rbrace>)\n        \\<in> set evs3;\n        Gets Aa (Crypt (pubK Aa) \\<lbrace>Nonce NAa, Nonce NBa\\<rbrace>)\n        \\<in> set evs3\\<rbrakk>\n       \\<Longrightarrow> Ba \\<in> bad \\<longrightarrow>\n                         (\\<forall>C.\n                             (C = Ba \\<longrightarrow>\n                              A = Aa \\<longrightarrow>\n                              NB \\<noteq> NBa) \\<and>\n                             Says A C (Crypt (pubK C) (Nonce NB))\n                             \\<notin> set evs3) \\<longrightarrow>\n                         Says B A\n                          (Crypt (pubK A)\n                            \\<lbrace>Nonce NA, Nonce NB\\<rbrace>)\n                         \\<in> set evs3 \\<longrightarrow>\n                         NB \\<noteq> NBa", "apply (simp_all add: all_conj_distrib)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>evs1 NAa Ba.\n       \\<lbrakk>A \\<notin> bad; B \\<notin> bad; evs1 \\<in> ns_public;\n        (\\<forall>C.\n            Says A C (Crypt (pubK C) (Nonce NB))\n            \\<notin> set evs1) \\<longrightarrow>\n        Says B A (Crypt (pubK A) \\<lbrace>Nonce NA, Nonce NB\\<rbrace>)\n        \\<in> set evs1 \\<longrightarrow>\n        Nonce NB \\<notin> analz (knows Spy evs1);\n        Nonce NAa \\<notin> used evs1\\<rbrakk>\n       \\<Longrightarrow> Ba \\<in> bad \\<longrightarrow>\n                         (\\<forall>C.\n                             Says A C (Crypt (pubK C) (Nonce NB))\n                             \\<notin> set evs1) \\<longrightarrow>\n                         Says B A\n                          (Crypt (pubK A)\n                            \\<lbrace>Nonce NA, Nonce NB\\<rbrace>)\n                         \\<in> set evs1 \\<longrightarrow>\n                         NB \\<noteq> NAa\n 2. \\<And>evs2 NBa Ba NAa Aa.\n       \\<lbrakk>A \\<notin> bad; B \\<notin> bad; evs2 \\<in> ns_public;\n        (\\<forall>C.\n            Says A C (Crypt (pubK C) (Nonce NB))\n            \\<notin> set evs2) \\<longrightarrow>\n        Says B A (Crypt (pubK A) \\<lbrace>Nonce NA, Nonce NB\\<rbrace>)\n        \\<in> set evs2 \\<longrightarrow>\n        Nonce NB \\<notin> analz (knows Spy evs2);\n        Nonce NBa \\<notin> used evs2;\n        Gets Ba (Crypt (pubK Ba) \\<lbrace>Nonce NAa, Agent Aa\\<rbrace>)\n        \\<in> set evs2\\<rbrakk>\n       \\<Longrightarrow> (Aa \\<in> bad \\<longrightarrow>\n                          (\\<forall>C.\n                              Says A C (Crypt (pubK C) (Nonce NB))\n                              \\<notin> set evs2) \\<longrightarrow>\n                          (NA = NAa \\<longrightarrow>\n                           A = Aa \\<longrightarrow>\n                           B = Ba \\<longrightarrow> NB \\<noteq> NBa) \\<and>\n                          (Says B A\n                            (Crypt (pubK A)\n                              \\<lbrace>Nonce NA, Nonce NB\\<rbrace>)\n                           \\<in> set evs2 \\<longrightarrow>\n                           NB \\<noteq> NAa \\<and> NB \\<noteq> NBa)) \\<and>\n                         (Aa \\<notin> bad \\<longrightarrow>\n                          (\\<forall>C.\n                              Says A C (Crypt (pubK C) (Nonce NB))\n                              \\<notin> set evs2) \\<longrightarrow>\n                          B = Ba \\<and>\n                          A = Aa \\<and>\n                          NA = NAa \\<and> NB = NBa \\<longrightarrow>\n                          Nonce NBa \\<notin> analz (knows Spy evs2))\n 3. \\<And>evs3 Aa Ba NAa NBa.\n       \\<lbrakk>A \\<notin> bad; B \\<notin> bad; evs3 \\<in> ns_public;\n        (\\<forall>C.\n            Says A C (Crypt (pubK C) (Nonce NB))\n            \\<notin> set evs3) \\<longrightarrow>\n        Says B A (Crypt (pubK A) \\<lbrace>Nonce NA, Nonce NB\\<rbrace>)\n        \\<in> set evs3 \\<longrightarrow>\n        Nonce NB \\<notin> analz (knows Spy evs3);\n        Says Aa Ba (Crypt (pubK Ba) \\<lbrace>Nonce NAa, Agent Aa\\<rbrace>)\n        \\<in> set evs3;\n        Gets Aa (Crypt (pubK Aa) \\<lbrace>Nonce NAa, Nonce NBa\\<rbrace>)\n        \\<in> set evs3\\<rbrakk>\n       \\<Longrightarrow> Ba \\<in> bad \\<longrightarrow>\n                         (A = Aa \\<longrightarrow> NB \\<noteq> NBa) \\<and>\n                         (\\<forall>C.\n                             Says A C (Crypt (pubK C) (Nonce NB))\n                             \\<notin> set evs3) \\<longrightarrow>\n                         Says B A\n                          (Crypt (pubK A)\n                            \\<lbrace>Nonce NA, Nonce NB\\<rbrace>)\n                         \\<in> set evs3 \\<longrightarrow>\n                         NB \\<noteq> NBa", "txt\\<open>speeds up next\\<close>"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>evs1 NAa Ba.\n       \\<lbrakk>A \\<notin> bad; B \\<notin> bad; evs1 \\<in> ns_public;\n        (\\<forall>C.\n            Says A C (Crypt (pubK C) (Nonce NB))\n            \\<notin> set evs1) \\<longrightarrow>\n        Says B A (Crypt (pubK A) \\<lbrace>Nonce NA, Nonce NB\\<rbrace>)\n        \\<in> set evs1 \\<longrightarrow>\n        Nonce NB \\<notin> analz (knows Spy evs1);\n        Nonce NAa \\<notin> used evs1\\<rbrakk>\n       \\<Longrightarrow> Ba \\<in> bad \\<longrightarrow>\n                         (\\<forall>C.\n                             Says A C (Crypt (pubK C) (Nonce NB))\n                             \\<notin> set evs1) \\<longrightarrow>\n                         Says B A\n                          (Crypt (pubK A)\n                            \\<lbrace>Nonce NA, Nonce NB\\<rbrace>)\n                         \\<in> set evs1 \\<longrightarrow>\n                         NB \\<noteq> NAa\n 2. \\<And>evs2 NBa Ba NAa Aa.\n       \\<lbrakk>A \\<notin> bad; B \\<notin> bad; evs2 \\<in> ns_public;\n        (\\<forall>C.\n            Says A C (Crypt (pubK C) (Nonce NB))\n            \\<notin> set evs2) \\<longrightarrow>\n        Says B A (Crypt (pubK A) \\<lbrace>Nonce NA, Nonce NB\\<rbrace>)\n        \\<in> set evs2 \\<longrightarrow>\n        Nonce NB \\<notin> analz (knows Spy evs2);\n        Nonce NBa \\<notin> used evs2;\n        Gets Ba (Crypt (pubK Ba) \\<lbrace>Nonce NAa, Agent Aa\\<rbrace>)\n        \\<in> set evs2\\<rbrakk>\n       \\<Longrightarrow> (Aa \\<in> bad \\<longrightarrow>\n                          (\\<forall>C.\n                              Says A C (Crypt (pubK C) (Nonce NB))\n                              \\<notin> set evs2) \\<longrightarrow>\n                          (NA = NAa \\<longrightarrow>\n                           A = Aa \\<longrightarrow>\n                           B = Ba \\<longrightarrow> NB \\<noteq> NBa) \\<and>\n                          (Says B A\n                            (Crypt (pubK A)\n                              \\<lbrace>Nonce NA, Nonce NB\\<rbrace>)\n                           \\<in> set evs2 \\<longrightarrow>\n                           NB \\<noteq> NAa \\<and> NB \\<noteq> NBa)) \\<and>\n                         (Aa \\<notin> bad \\<longrightarrow>\n                          (\\<forall>C.\n                              Says A C (Crypt (pubK C) (Nonce NB))\n                              \\<notin> set evs2) \\<longrightarrow>\n                          B = Ba \\<and>\n                          A = Aa \\<and>\n                          NA = NAa \\<and> NB = NBa \\<longrightarrow>\n                          Nonce NBa \\<notin> analz (knows Spy evs2))\n 3. \\<And>evs3 Aa Ba NAa NBa.\n       \\<lbrakk>A \\<notin> bad; B \\<notin> bad; evs3 \\<in> ns_public;\n        (\\<forall>C.\n            Says A C (Crypt (pubK C) (Nonce NB))\n            \\<notin> set evs3) \\<longrightarrow>\n        Says B A (Crypt (pubK A) \\<lbrace>Nonce NA, Nonce NB\\<rbrace>)\n        \\<in> set evs3 \\<longrightarrow>\n        Nonce NB \\<notin> analz (knows Spy evs3);\n        Says Aa Ba (Crypt (pubK Ba) \\<lbrace>Nonce NAa, Agent Aa\\<rbrace>)\n        \\<in> set evs3;\n        Gets Aa (Crypt (pubK Aa) \\<lbrace>Nonce NAa, Nonce NBa\\<rbrace>)\n        \\<in> set evs3\\<rbrakk>\n       \\<Longrightarrow> Ba \\<in> bad \\<longrightarrow>\n                         (A = Aa \\<longrightarrow> NB \\<noteq> NBa) \\<and>\n                         (\\<forall>C.\n                             Says A C (Crypt (pubK C) (Nonce NB))\n                             \\<notin> set evs3) \\<longrightarrow>\n                         Says B A\n                          (Crypt (pubK A)\n                            \\<lbrace>Nonce NA, Nonce NB\\<rbrace>)\n                         \\<in> set evs3 \\<longrightarrow>\n                         NB \\<noteq> NBa", "apply (blast dest: analz_into_parts intro: no_nonce_NS1_NS2)+"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "section\\<open>Novel study\\<close>"], ["", "text\\<open>Generalising over all initial secrets the existing treatment, which is limited to private encryption keys\\<close>"], ["", "definition staticSecret :: \"agent \\<Rightarrow> msg set\" where\n [simp]: \"staticSecret A \\<equiv> {Key (priEK A), Key (priSK A), Key (shrK A)}\""], ["", "subsection\\<open>Protocol independent study\\<close>"], ["", "text\\<open>Converse doesn't hold because something that is said or noted is not necessarily an initial secret\\<close>"], ["", "lemma staticSecret_parts_Spy:\n\"\\<lbrakk>m \\<in> parts (knows Spy evs); m \\<in> staticSecret A\\<rbrakk>  \\<Longrightarrow>\n A \\<in> bad \\<or>\n (\\<exists>C B X. Says C B X \\<in> set evs \\<and> m \\<in> parts{X}) \\<or>\n (\\<exists>C Y. Notes C Y \\<in> set evs \\<and> C \\<in> bad \\<and> m \\<in> parts{Y})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>m \\<in> parts (knows Spy evs); m \\<in> staticSecret A\\<rbrakk>\n    \\<Longrightarrow> A \\<in> bad \\<or>\n                      (\\<exists>C B X.\n                          Says C B X \\<in> set evs \\<and>\n                          m \\<in> parts {X}) \\<or>\n                      (\\<exists>C Y.\n                          Notes C Y \\<in> set evs \\<and>\n                          C \\<in> bad \\<and> m \\<in> parts {Y})", "apply (erule rev_mp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. m \\<in> staticSecret A \\<Longrightarrow>\n    m \\<in> parts (knows Spy evs) \\<longrightarrow>\n    A \\<in> bad \\<or>\n    (\\<exists>C B X.\n        Says C B X \\<in> set evs \\<and> m \\<in> parts {X}) \\<or>\n    (\\<exists>C Y.\n        Notes C Y \\<in> set evs \\<and> C \\<in> bad \\<and> m \\<in> parts {Y})", "apply (induct_tac \"evs\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. m \\<in> staticSecret A \\<Longrightarrow>\n    m \\<in> parts (knows Spy []) \\<longrightarrow>\n    A \\<in> bad \\<or>\n    (\\<exists>C B X. Says C B X \\<in> set [] \\<and> m \\<in> parts {X}) \\<or>\n    (\\<exists>C Y.\n        Notes C Y \\<in> set [] \\<and> C \\<in> bad \\<and> m \\<in> parts {Y})\n 2. \\<And>a list.\n       \\<lbrakk>m \\<in> staticSecret A;\n        m \\<in> parts (knows Spy list) \\<longrightarrow>\n        A \\<in> bad \\<or>\n        (\\<exists>C B X.\n            Says C B X \\<in> set list \\<and> m \\<in> parts {X}) \\<or>\n        (\\<exists>C Y.\n            Notes C Y \\<in> set list \\<and>\n            C \\<in> bad \\<and> m \\<in> parts {Y})\\<rbrakk>\n       \\<Longrightarrow> m \\<in> parts\n                                  (knows Spy (a # list)) \\<longrightarrow>\n                         A \\<in> bad \\<or>\n                         (\\<exists>C B X.\n                             Says C B X \\<in> set (a # list) \\<and>\n                             m \\<in> parts {X}) \\<or>\n                         (\\<exists>C Y.\n                             Notes C Y \\<in> set (a # list) \\<and>\n                             C \\<in> bad \\<and> m \\<in> parts {Y})", "apply force"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a list.\n       \\<lbrakk>m \\<in> staticSecret A;\n        m \\<in> parts (knows Spy list) \\<longrightarrow>\n        A \\<in> bad \\<or>\n        (\\<exists>C B X.\n            Says C B X \\<in> set list \\<and> m \\<in> parts {X}) \\<or>\n        (\\<exists>C Y.\n            Notes C Y \\<in> set list \\<and>\n            C \\<in> bad \\<and> m \\<in> parts {Y})\\<rbrakk>\n       \\<Longrightarrow> m \\<in> parts\n                                  (knows Spy (a # list)) \\<longrightarrow>\n                         A \\<in> bad \\<or>\n                         (\\<exists>C B X.\n                             Says C B X \\<in> set (a # list) \\<and>\n                             m \\<in> parts {X}) \\<or>\n                         (\\<exists>C Y.\n                             Notes C Y \\<in> set (a # list) \\<and>\n                             C \\<in> bad \\<and> m \\<in> parts {Y})", "apply (induct_tac \"a\")"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>a list x1 x2 x3.\n       \\<lbrakk>m \\<in> staticSecret A;\n        m \\<in> parts (knows Spy list) \\<longrightarrow>\n        A \\<in> bad \\<or>\n        (\\<exists>C B X.\n            Says C B X \\<in> set list \\<and> m \\<in> parts {X}) \\<or>\n        (\\<exists>C Y.\n            Notes C Y \\<in> set list \\<and>\n            C \\<in> bad \\<and> m \\<in> parts {Y})\\<rbrakk>\n       \\<Longrightarrow> m \\<in> parts\n                                  (knows Spy\n                                    (Says x1 x2 x3 #\n                                     list)) \\<longrightarrow>\n                         A \\<in> bad \\<or>\n                         (\\<exists>C B X.\n                             Says C B X\n                             \\<in> set (Says x1 x2 x3 # list) \\<and>\n                             m \\<in> parts {X}) \\<or>\n                         (\\<exists>C Y.\n                             Notes C Y\n                             \\<in> set (Says x1 x2 x3 # list) \\<and>\n                             C \\<in> bad \\<and> m \\<in> parts {Y})\n 2. \\<And>a list x1 x2.\n       \\<lbrakk>m \\<in> staticSecret A;\n        m \\<in> parts (knows Spy list) \\<longrightarrow>\n        A \\<in> bad \\<or>\n        (\\<exists>C B X.\n            Says C B X \\<in> set list \\<and> m \\<in> parts {X}) \\<or>\n        (\\<exists>C Y.\n            Notes C Y \\<in> set list \\<and>\n            C \\<in> bad \\<and> m \\<in> parts {Y})\\<rbrakk>\n       \\<Longrightarrow> m \\<in> parts\n                                  (knows Spy\n                                    (Gets x1 x2 # list)) \\<longrightarrow>\n                         A \\<in> bad \\<or>\n                         (\\<exists>C B X.\n                             Says C B X \\<in> set (Gets x1 x2 # list) \\<and>\n                             m \\<in> parts {X}) \\<or>\n                         (\\<exists>C Y.\n                             Notes C Y \\<in> set (Gets x1 x2 # list) \\<and>\n                             C \\<in> bad \\<and> m \\<in> parts {Y})\n 3. \\<And>a list x1 x2.\n       \\<lbrakk>m \\<in> staticSecret A;\n        m \\<in> parts (knows Spy list) \\<longrightarrow>\n        A \\<in> bad \\<or>\n        (\\<exists>C B X.\n            Says C B X \\<in> set list \\<and> m \\<in> parts {X}) \\<or>\n        (\\<exists>C Y.\n            Notes C Y \\<in> set list \\<and>\n            C \\<in> bad \\<and> m \\<in> parts {Y})\\<rbrakk>\n       \\<Longrightarrow> m \\<in> parts\n                                  (knows Spy\n                                    (Notes x1 x2 # list)) \\<longrightarrow>\n                         A \\<in> bad \\<or>\n                         (\\<exists>C B X.\n                             Says C B X\n                             \\<in> set (Notes x1 x2 # list) \\<and>\n                             m \\<in> parts {X}) \\<or>\n                         (\\<exists>C Y.\n                             Notes C Y \\<in> set (Notes x1 x2 # list) \\<and>\n                             C \\<in> bad \\<and> m \\<in> parts {Y})", "txt\\<open>Says\\<close>"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>a list x1 x2 x3.\n       \\<lbrakk>m \\<in> staticSecret A;\n        m \\<in> parts (knows Spy list) \\<longrightarrow>\n        A \\<in> bad \\<or>\n        (\\<exists>C B X.\n            Says C B X \\<in> set list \\<and> m \\<in> parts {X}) \\<or>\n        (\\<exists>C Y.\n            Notes C Y \\<in> set list \\<and>\n            C \\<in> bad \\<and> m \\<in> parts {Y})\\<rbrakk>\n       \\<Longrightarrow> m \\<in> parts\n                                  (knows Spy\n                                    (Says x1 x2 x3 #\n                                     list)) \\<longrightarrow>\n                         A \\<in> bad \\<or>\n                         (\\<exists>C B X.\n                             Says C B X\n                             \\<in> set (Says x1 x2 x3 # list) \\<and>\n                             m \\<in> parts {X}) \\<or>\n                         (\\<exists>C Y.\n                             Notes C Y\n                             \\<in> set (Says x1 x2 x3 # list) \\<and>\n                             C \\<in> bad \\<and> m \\<in> parts {Y})\n 2. \\<And>a list x1 x2.\n       \\<lbrakk>m \\<in> staticSecret A;\n        m \\<in> parts (knows Spy list) \\<longrightarrow>\n        A \\<in> bad \\<or>\n        (\\<exists>C B X.\n            Says C B X \\<in> set list \\<and> m \\<in> parts {X}) \\<or>\n        (\\<exists>C Y.\n            Notes C Y \\<in> set list \\<and>\n            C \\<in> bad \\<and> m \\<in> parts {Y})\\<rbrakk>\n       \\<Longrightarrow> m \\<in> parts\n                                  (knows Spy\n                                    (Gets x1 x2 # list)) \\<longrightarrow>\n                         A \\<in> bad \\<or>\n                         (\\<exists>C B X.\n                             Says C B X \\<in> set (Gets x1 x2 # list) \\<and>\n                             m \\<in> parts {X}) \\<or>\n                         (\\<exists>C Y.\n                             Notes C Y \\<in> set (Gets x1 x2 # list) \\<and>\n                             C \\<in> bad \\<and> m \\<in> parts {Y})\n 3. \\<And>a list x1 x2.\n       \\<lbrakk>m \\<in> staticSecret A;\n        m \\<in> parts (knows Spy list) \\<longrightarrow>\n        A \\<in> bad \\<or>\n        (\\<exists>C B X.\n            Says C B X \\<in> set list \\<and> m \\<in> parts {X}) \\<or>\n        (\\<exists>C Y.\n            Notes C Y \\<in> set list \\<and>\n            C \\<in> bad \\<and> m \\<in> parts {Y})\\<rbrakk>\n       \\<Longrightarrow> m \\<in> parts\n                                  (knows Spy\n                                    (Notes x1 x2 # list)) \\<longrightarrow>\n                         A \\<in> bad \\<or>\n                         (\\<exists>C B X.\n                             Says C B X\n                             \\<in> set (Notes x1 x2 # list) \\<and>\n                             m \\<in> parts {X}) \\<or>\n                         (\\<exists>C Y.\n                             Notes C Y \\<in> set (Notes x1 x2 # list) \\<and>\n                             C \\<in> bad \\<and> m \\<in> parts {Y})", "txt\\<open>@{subgoals [display,indent=1]}\\<close>"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>a list x1 x2 x3.\n       \\<lbrakk>m \\<in> staticSecret A;\n        m \\<in> parts (knows Spy list) \\<longrightarrow>\n        A \\<in> bad \\<or>\n        (\\<exists>C B X.\n            Says C B X \\<in> set list \\<and> m \\<in> parts {X}) \\<or>\n        (\\<exists>C Y.\n            Notes C Y \\<in> set list \\<and>\n            C \\<in> bad \\<and> m \\<in> parts {Y})\\<rbrakk>\n       \\<Longrightarrow> m \\<in> parts\n                                  (knows Spy\n                                    (Says x1 x2 x3 #\n                                     list)) \\<longrightarrow>\n                         A \\<in> bad \\<or>\n                         (\\<exists>C B X.\n                             Says C B X\n                             \\<in> set (Says x1 x2 x3 # list) \\<and>\n                             m \\<in> parts {X}) \\<or>\n                         (\\<exists>C Y.\n                             Notes C Y\n                             \\<in> set (Says x1 x2 x3 # list) \\<and>\n                             C \\<in> bad \\<and> m \\<in> parts {Y})\n 2. \\<And>a list x1 x2.\n       \\<lbrakk>m \\<in> staticSecret A;\n        m \\<in> parts (knows Spy list) \\<longrightarrow>\n        A \\<in> bad \\<or>\n        (\\<exists>C B X.\n            Says C B X \\<in> set list \\<and> m \\<in> parts {X}) \\<or>\n        (\\<exists>C Y.\n            Notes C Y \\<in> set list \\<and>\n            C \\<in> bad \\<and> m \\<in> parts {Y})\\<rbrakk>\n       \\<Longrightarrow> m \\<in> parts\n                                  (knows Spy\n                                    (Gets x1 x2 # list)) \\<longrightarrow>\n                         A \\<in> bad \\<or>\n                         (\\<exists>C B X.\n                             Says C B X \\<in> set (Gets x1 x2 # list) \\<and>\n                             m \\<in> parts {X}) \\<or>\n                         (\\<exists>C Y.\n                             Notes C Y \\<in> set (Gets x1 x2 # list) \\<and>\n                             C \\<in> bad \\<and> m \\<in> parts {Y})\n 3. \\<And>a list x1 x2.\n       \\<lbrakk>m \\<in> staticSecret A;\n        m \\<in> parts (knows Spy list) \\<longrightarrow>\n        A \\<in> bad \\<or>\n        (\\<exists>C B X.\n            Says C B X \\<in> set list \\<and> m \\<in> parts {X}) \\<or>\n        (\\<exists>C Y.\n            Notes C Y \\<in> set list \\<and>\n            C \\<in> bad \\<and> m \\<in> parts {Y})\\<rbrakk>\n       \\<Longrightarrow> m \\<in> parts\n                                  (knows Spy\n                                    (Notes x1 x2 # list)) \\<longrightarrow>\n                         A \\<in> bad \\<or>\n                         (\\<exists>C B X.\n                             Says C B X\n                             \\<in> set (Notes x1 x2 # list) \\<and>\n                             m \\<in> parts {X}) \\<or>\n                         (\\<exists>C Y.\n                             Notes C Y \\<in> set (Notes x1 x2 # list) \\<and>\n                             C \\<in> bad \\<and> m \\<in> parts {Y})", "apply (rule impI)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>a list x1 x2 x3.\n       \\<lbrakk>m \\<in> staticSecret A;\n        m \\<in> parts (knows Spy list) \\<longrightarrow>\n        A \\<in> bad \\<or>\n        (\\<exists>C B X.\n            Says C B X \\<in> set list \\<and> m \\<in> parts {X}) \\<or>\n        (\\<exists>C Y.\n            Notes C Y \\<in> set list \\<and>\n            C \\<in> bad \\<and> m \\<in> parts {Y});\n        m \\<in> parts (knows Spy (Says x1 x2 x3 # list))\\<rbrakk>\n       \\<Longrightarrow> A \\<in> bad \\<or>\n                         (\\<exists>C B X.\n                             Says C B X\n                             \\<in> set (Says x1 x2 x3 # list) \\<and>\n                             m \\<in> parts {X}) \\<or>\n                         (\\<exists>C Y.\n                             Notes C Y\n                             \\<in> set (Says x1 x2 x3 # list) \\<and>\n                             C \\<in> bad \\<and> m \\<in> parts {Y})\n 2. \\<And>a list x1 x2.\n       \\<lbrakk>m \\<in> staticSecret A;\n        m \\<in> parts (knows Spy list) \\<longrightarrow>\n        A \\<in> bad \\<or>\n        (\\<exists>C B X.\n            Says C B X \\<in> set list \\<and> m \\<in> parts {X}) \\<or>\n        (\\<exists>C Y.\n            Notes C Y \\<in> set list \\<and>\n            C \\<in> bad \\<and> m \\<in> parts {Y})\\<rbrakk>\n       \\<Longrightarrow> m \\<in> parts\n                                  (knows Spy\n                                    (Gets x1 x2 # list)) \\<longrightarrow>\n                         A \\<in> bad \\<or>\n                         (\\<exists>C B X.\n                             Says C B X \\<in> set (Gets x1 x2 # list) \\<and>\n                             m \\<in> parts {X}) \\<or>\n                         (\\<exists>C Y.\n                             Notes C Y \\<in> set (Gets x1 x2 # list) \\<and>\n                             C \\<in> bad \\<and> m \\<in> parts {Y})\n 3. \\<And>a list x1 x2.\n       \\<lbrakk>m \\<in> staticSecret A;\n        m \\<in> parts (knows Spy list) \\<longrightarrow>\n        A \\<in> bad \\<or>\n        (\\<exists>C B X.\n            Says C B X \\<in> set list \\<and> m \\<in> parts {X}) \\<or>\n        (\\<exists>C Y.\n            Notes C Y \\<in> set list \\<and>\n            C \\<in> bad \\<and> m \\<in> parts {Y})\\<rbrakk>\n       \\<Longrightarrow> m \\<in> parts\n                                  (knows Spy\n                                    (Notes x1 x2 # list)) \\<longrightarrow>\n                         A \\<in> bad \\<or>\n                         (\\<exists>C B X.\n                             Says C B X\n                             \\<in> set (Notes x1 x2 # list) \\<and>\n                             m \\<in> parts {X}) \\<or>\n                         (\\<exists>C Y.\n                             Notes C Y \\<in> set (Notes x1 x2 # list) \\<and>\n                             C \\<in> bad \\<and> m \\<in> parts {Y})", "apply simp"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>list x1 x2 x3.\n       \\<lbrakk>m = Key (priEK A) \\<or>\n                m = Key (priSK A) \\<or> m = Key (shrK A);\n        m \\<in> parts (knows Spy list) \\<longrightarrow>\n        A \\<in> bad \\<or>\n        (\\<exists>C B X.\n            Says C B X \\<in> set list \\<and> m \\<in> parts {X}) \\<or>\n        (\\<exists>C Y.\n            Notes C Y \\<in> set list \\<and>\n            C \\<in> bad \\<and> m \\<in> parts {Y});\n        m \\<in> parts (insert x3 (knows Spy list))\\<rbrakk>\n       \\<Longrightarrow> A \\<in> bad \\<or>\n                         (\\<exists>C B X.\n                             (C = x1 \\<and> B = x2 \\<and> X = x3 \\<or>\n                              Says C B X \\<in> set list) \\<and>\n                             m \\<in> parts {X}) \\<or>\n                         (\\<exists>C Y.\n                             Notes C Y \\<in> set list \\<and>\n                             C \\<in> bad \\<and> m \\<in> parts {Y})\n 2. \\<And>a list x1 x2.\n       \\<lbrakk>m \\<in> staticSecret A;\n        m \\<in> parts (knows Spy list) \\<longrightarrow>\n        A \\<in> bad \\<or>\n        (\\<exists>C B X.\n            Says C B X \\<in> set list \\<and> m \\<in> parts {X}) \\<or>\n        (\\<exists>C Y.\n            Notes C Y \\<in> set list \\<and>\n            C \\<in> bad \\<and> m \\<in> parts {Y})\\<rbrakk>\n       \\<Longrightarrow> m \\<in> parts\n                                  (knows Spy\n                                    (Gets x1 x2 # list)) \\<longrightarrow>\n                         A \\<in> bad \\<or>\n                         (\\<exists>C B X.\n                             Says C B X \\<in> set (Gets x1 x2 # list) \\<and>\n                             m \\<in> parts {X}) \\<or>\n                         (\\<exists>C Y.\n                             Notes C Y \\<in> set (Gets x1 x2 # list) \\<and>\n                             C \\<in> bad \\<and> m \\<in> parts {Y})\n 3. \\<And>a list x1 x2.\n       \\<lbrakk>m \\<in> staticSecret A;\n        m \\<in> parts (knows Spy list) \\<longrightarrow>\n        A \\<in> bad \\<or>\n        (\\<exists>C B X.\n            Says C B X \\<in> set list \\<and> m \\<in> parts {X}) \\<or>\n        (\\<exists>C Y.\n            Notes C Y \\<in> set list \\<and>\n            C \\<in> bad \\<and> m \\<in> parts {Y})\\<rbrakk>\n       \\<Longrightarrow> m \\<in> parts\n                                  (knows Spy\n                                    (Notes x1 x2 # list)) \\<longrightarrow>\n                         A \\<in> bad \\<or>\n                         (\\<exists>C B X.\n                             Says C B X\n                             \\<in> set (Notes x1 x2 # list) \\<and>\n                             m \\<in> parts {X}) \\<or>\n                         (\\<exists>C Y.\n                             Notes C Y \\<in> set (Notes x1 x2 # list) \\<and>\n                             C \\<in> bad \\<and> m \\<in> parts {Y})", "txt\\<open>@{subgoals [display,indent=1]}\\<close>"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>list x1 x2 x3.\n       \\<lbrakk>m = Key (priEK A) \\<or>\n                m = Key (priSK A) \\<or> m = Key (shrK A);\n        m \\<in> parts (knows Spy list) \\<longrightarrow>\n        A \\<in> bad \\<or>\n        (\\<exists>C B X.\n            Says C B X \\<in> set list \\<and> m \\<in> parts {X}) \\<or>\n        (\\<exists>C Y.\n            Notes C Y \\<in> set list \\<and>\n            C \\<in> bad \\<and> m \\<in> parts {Y});\n        m \\<in> parts (insert x3 (knows Spy list))\\<rbrakk>\n       \\<Longrightarrow> A \\<in> bad \\<or>\n                         (\\<exists>C B X.\n                             (C = x1 \\<and> B = x2 \\<and> X = x3 \\<or>\n                              Says C B X \\<in> set list) \\<and>\n                             m \\<in> parts {X}) \\<or>\n                         (\\<exists>C Y.\n                             Notes C Y \\<in> set list \\<and>\n                             C \\<in> bad \\<and> m \\<in> parts {Y})\n 2. \\<And>a list x1 x2.\n       \\<lbrakk>m \\<in> staticSecret A;\n        m \\<in> parts (knows Spy list) \\<longrightarrow>\n        A \\<in> bad \\<or>\n        (\\<exists>C B X.\n            Says C B X \\<in> set list \\<and> m \\<in> parts {X}) \\<or>\n        (\\<exists>C Y.\n            Notes C Y \\<in> set list \\<and>\n            C \\<in> bad \\<and> m \\<in> parts {Y})\\<rbrakk>\n       \\<Longrightarrow> m \\<in> parts\n                                  (knows Spy\n                                    (Gets x1 x2 # list)) \\<longrightarrow>\n                         A \\<in> bad \\<or>\n                         (\\<exists>C B X.\n                             Says C B X \\<in> set (Gets x1 x2 # list) \\<and>\n                             m \\<in> parts {X}) \\<or>\n                         (\\<exists>C Y.\n                             Notes C Y \\<in> set (Gets x1 x2 # list) \\<and>\n                             C \\<in> bad \\<and> m \\<in> parts {Y})\n 3. \\<And>a list x1 x2.\n       \\<lbrakk>m \\<in> staticSecret A;\n        m \\<in> parts (knows Spy list) \\<longrightarrow>\n        A \\<in> bad \\<or>\n        (\\<exists>C B X.\n            Says C B X \\<in> set list \\<and> m \\<in> parts {X}) \\<or>\n        (\\<exists>C Y.\n            Notes C Y \\<in> set list \\<and>\n            C \\<in> bad \\<and> m \\<in> parts {Y})\\<rbrakk>\n       \\<Longrightarrow> m \\<in> parts\n                                  (knows Spy\n                                    (Notes x1 x2 # list)) \\<longrightarrow>\n                         A \\<in> bad \\<or>\n                         (\\<exists>C B X.\n                             Says C B X\n                             \\<in> set (Notes x1 x2 # list) \\<and>\n                             m \\<in> parts {X}) \\<or>\n                         (\\<exists>C Y.\n                             Notes C Y \\<in> set (Notes x1 x2 # list) \\<and>\n                             C \\<in> bad \\<and> m \\<in> parts {Y})", "apply (drule parts_insert [THEN equalityD1, THEN subsetD])"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>list x1 x2 x3.\n       \\<lbrakk>m = Key (priEK A) \\<or>\n                m = Key (priSK A) \\<or> m = Key (shrK A);\n        m \\<in> parts (knows Spy list) \\<longrightarrow>\n        A \\<in> bad \\<or>\n        (\\<exists>C B X.\n            Says C B X \\<in> set list \\<and> m \\<in> parts {X}) \\<or>\n        (\\<exists>C Y.\n            Notes C Y \\<in> set list \\<and>\n            C \\<in> bad \\<and> m \\<in> parts {Y});\n        m \\<in> parts {x3} \\<union> parts (knows Spy list)\\<rbrakk>\n       \\<Longrightarrow> A \\<in> bad \\<or>\n                         (\\<exists>C B X.\n                             (C = x1 \\<and> B = x2 \\<and> X = x3 \\<or>\n                              Says C B X \\<in> set list) \\<and>\n                             m \\<in> parts {X}) \\<or>\n                         (\\<exists>C Y.\n                             Notes C Y \\<in> set list \\<and>\n                             C \\<in> bad \\<and> m \\<in> parts {Y})\n 2. \\<And>a list x1 x2.\n       \\<lbrakk>m \\<in> staticSecret A;\n        m \\<in> parts (knows Spy list) \\<longrightarrow>\n        A \\<in> bad \\<or>\n        (\\<exists>C B X.\n            Says C B X \\<in> set list \\<and> m \\<in> parts {X}) \\<or>\n        (\\<exists>C Y.\n            Notes C Y \\<in> set list \\<and>\n            C \\<in> bad \\<and> m \\<in> parts {Y})\\<rbrakk>\n       \\<Longrightarrow> m \\<in> parts\n                                  (knows Spy\n                                    (Gets x1 x2 # list)) \\<longrightarrow>\n                         A \\<in> bad \\<or>\n                         (\\<exists>C B X.\n                             Says C B X \\<in> set (Gets x1 x2 # list) \\<and>\n                             m \\<in> parts {X}) \\<or>\n                         (\\<exists>C Y.\n                             Notes C Y \\<in> set (Gets x1 x2 # list) \\<and>\n                             C \\<in> bad \\<and> m \\<in> parts {Y})\n 3. \\<And>a list x1 x2.\n       \\<lbrakk>m \\<in> staticSecret A;\n        m \\<in> parts (knows Spy list) \\<longrightarrow>\n        A \\<in> bad \\<or>\n        (\\<exists>C B X.\n            Says C B X \\<in> set list \\<and> m \\<in> parts {X}) \\<or>\n        (\\<exists>C Y.\n            Notes C Y \\<in> set list \\<and>\n            C \\<in> bad \\<and> m \\<in> parts {Y})\\<rbrakk>\n       \\<Longrightarrow> m \\<in> parts\n                                  (knows Spy\n                                    (Notes x1 x2 # list)) \\<longrightarrow>\n                         A \\<in> bad \\<or>\n                         (\\<exists>C B X.\n                             Says C B X\n                             \\<in> set (Notes x1 x2 # list) \\<and>\n                             m \\<in> parts {X}) \\<or>\n                         (\\<exists>C Y.\n                             Notes C Y \\<in> set (Notes x1 x2 # list) \\<and>\n                             C \\<in> bad \\<and> m \\<in> parts {Y})", "txt\\<open>@{subgoals [display,indent=1]}\\<close>"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>list x1 x2 x3.\n       \\<lbrakk>m = Key (priEK A) \\<or>\n                m = Key (priSK A) \\<or> m = Key (shrK A);\n        m \\<in> parts (knows Spy list) \\<longrightarrow>\n        A \\<in> bad \\<or>\n        (\\<exists>C B X.\n            Says C B X \\<in> set list \\<and> m \\<in> parts {X}) \\<or>\n        (\\<exists>C Y.\n            Notes C Y \\<in> set list \\<and>\n            C \\<in> bad \\<and> m \\<in> parts {Y});\n        m \\<in> parts {x3} \\<union> parts (knows Spy list)\\<rbrakk>\n       \\<Longrightarrow> A \\<in> bad \\<or>\n                         (\\<exists>C B X.\n                             (C = x1 \\<and> B = x2 \\<and> X = x3 \\<or>\n                              Says C B X \\<in> set list) \\<and>\n                             m \\<in> parts {X}) \\<or>\n                         (\\<exists>C Y.\n                             Notes C Y \\<in> set list \\<and>\n                             C \\<in> bad \\<and> m \\<in> parts {Y})\n 2. \\<And>a list x1 x2.\n       \\<lbrakk>m \\<in> staticSecret A;\n        m \\<in> parts (knows Spy list) \\<longrightarrow>\n        A \\<in> bad \\<or>\n        (\\<exists>C B X.\n            Says C B X \\<in> set list \\<and> m \\<in> parts {X}) \\<or>\n        (\\<exists>C Y.\n            Notes C Y \\<in> set list \\<and>\n            C \\<in> bad \\<and> m \\<in> parts {Y})\\<rbrakk>\n       \\<Longrightarrow> m \\<in> parts\n                                  (knows Spy\n                                    (Gets x1 x2 # list)) \\<longrightarrow>\n                         A \\<in> bad \\<or>\n                         (\\<exists>C B X.\n                             Says C B X \\<in> set (Gets x1 x2 # list) \\<and>\n                             m \\<in> parts {X}) \\<or>\n                         (\\<exists>C Y.\n                             Notes C Y \\<in> set (Gets x1 x2 # list) \\<and>\n                             C \\<in> bad \\<and> m \\<in> parts {Y})\n 3. \\<And>a list x1 x2.\n       \\<lbrakk>m \\<in> staticSecret A;\n        m \\<in> parts (knows Spy list) \\<longrightarrow>\n        A \\<in> bad \\<or>\n        (\\<exists>C B X.\n            Says C B X \\<in> set list \\<and> m \\<in> parts {X}) \\<or>\n        (\\<exists>C Y.\n            Notes C Y \\<in> set list \\<and>\n            C \\<in> bad \\<and> m \\<in> parts {Y})\\<rbrakk>\n       \\<Longrightarrow> m \\<in> parts\n                                  (knows Spy\n                                    (Notes x1 x2 # list)) \\<longrightarrow>\n                         A \\<in> bad \\<or>\n                         (\\<exists>C B X.\n                             Says C B X\n                             \\<in> set (Notes x1 x2 # list) \\<and>\n                             m \\<in> parts {X}) \\<or>\n                         (\\<exists>C Y.\n                             Notes C Y \\<in> set (Notes x1 x2 # list) \\<and>\n                             C \\<in> bad \\<and> m \\<in> parts {Y})", "apply blast"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a list x1 x2.\n       \\<lbrakk>m \\<in> staticSecret A;\n        m \\<in> parts (knows Spy list) \\<longrightarrow>\n        A \\<in> bad \\<or>\n        (\\<exists>C B X.\n            Says C B X \\<in> set list \\<and> m \\<in> parts {X}) \\<or>\n        (\\<exists>C Y.\n            Notes C Y \\<in> set list \\<and>\n            C \\<in> bad \\<and> m \\<in> parts {Y})\\<rbrakk>\n       \\<Longrightarrow> m \\<in> parts\n                                  (knows Spy\n                                    (Gets x1 x2 # list)) \\<longrightarrow>\n                         A \\<in> bad \\<or>\n                         (\\<exists>C B X.\n                             Says C B X \\<in> set (Gets x1 x2 # list) \\<and>\n                             m \\<in> parts {X}) \\<or>\n                         (\\<exists>C Y.\n                             Notes C Y \\<in> set (Gets x1 x2 # list) \\<and>\n                             C \\<in> bad \\<and> m \\<in> parts {Y})\n 2. \\<And>a list x1 x2.\n       \\<lbrakk>m \\<in> staticSecret A;\n        m \\<in> parts (knows Spy list) \\<longrightarrow>\n        A \\<in> bad \\<or>\n        (\\<exists>C B X.\n            Says C B X \\<in> set list \\<and> m \\<in> parts {X}) \\<or>\n        (\\<exists>C Y.\n            Notes C Y \\<in> set list \\<and>\n            C \\<in> bad \\<and> m \\<in> parts {Y})\\<rbrakk>\n       \\<Longrightarrow> m \\<in> parts\n                                  (knows Spy\n                                    (Notes x1 x2 # list)) \\<longrightarrow>\n                         A \\<in> bad \\<or>\n                         (\\<exists>C B X.\n                             Says C B X\n                             \\<in> set (Notes x1 x2 # list) \\<and>\n                             m \\<in> parts {X}) \\<or>\n                         (\\<exists>C Y.\n                             Notes C Y \\<in> set (Notes x1 x2 # list) \\<and>\n                             C \\<in> bad \\<and> m \\<in> parts {Y})", "txt\\<open>Gets\\<close>"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a list x1 x2.\n       \\<lbrakk>m \\<in> staticSecret A;\n        m \\<in> parts (knows Spy list) \\<longrightarrow>\n        A \\<in> bad \\<or>\n        (\\<exists>C B X.\n            Says C B X \\<in> set list \\<and> m \\<in> parts {X}) \\<or>\n        (\\<exists>C Y.\n            Notes C Y \\<in> set list \\<and>\n            C \\<in> bad \\<and> m \\<in> parts {Y})\\<rbrakk>\n       \\<Longrightarrow> m \\<in> parts\n                                  (knows Spy\n                                    (Gets x1 x2 # list)) \\<longrightarrow>\n                         A \\<in> bad \\<or>\n                         (\\<exists>C B X.\n                             Says C B X \\<in> set (Gets x1 x2 # list) \\<and>\n                             m \\<in> parts {X}) \\<or>\n                         (\\<exists>C Y.\n                             Notes C Y \\<in> set (Gets x1 x2 # list) \\<and>\n                             C \\<in> bad \\<and> m \\<in> parts {Y})\n 2. \\<And>a list x1 x2.\n       \\<lbrakk>m \\<in> staticSecret A;\n        m \\<in> parts (knows Spy list) \\<longrightarrow>\n        A \\<in> bad \\<or>\n        (\\<exists>C B X.\n            Says C B X \\<in> set list \\<and> m \\<in> parts {X}) \\<or>\n        (\\<exists>C Y.\n            Notes C Y \\<in> set list \\<and>\n            C \\<in> bad \\<and> m \\<in> parts {Y})\\<rbrakk>\n       \\<Longrightarrow> m \\<in> parts\n                                  (knows Spy\n                                    (Notes x1 x2 # list)) \\<longrightarrow>\n                         A \\<in> bad \\<or>\n                         (\\<exists>C B X.\n                             Says C B X\n                             \\<in> set (Notes x1 x2 # list) \\<and>\n                             m \\<in> parts {X}) \\<or>\n                         (\\<exists>C Y.\n                             Notes C Y \\<in> set (Notes x1 x2 # list) \\<and>\n                             C \\<in> bad \\<and> m \\<in> parts {Y})", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a list x1 x2.\n       \\<lbrakk>m \\<in> staticSecret A;\n        m \\<in> parts (knows Spy list) \\<longrightarrow>\n        A \\<in> bad \\<or>\n        (\\<exists>C B X.\n            Says C B X \\<in> set list \\<and> m \\<in> parts {X}) \\<or>\n        (\\<exists>C Y.\n            Notes C Y \\<in> set list \\<and>\n            C \\<in> bad \\<and> m \\<in> parts {Y})\\<rbrakk>\n       \\<Longrightarrow> m \\<in> parts\n                                  (knows Spy\n                                    (Notes x1 x2 # list)) \\<longrightarrow>\n                         A \\<in> bad \\<or>\n                         (\\<exists>C B X.\n                             Says C B X\n                             \\<in> set (Notes x1 x2 # list) \\<and>\n                             m \\<in> parts {X}) \\<or>\n                         (\\<exists>C Y.\n                             Notes C Y \\<in> set (Notes x1 x2 # list) \\<and>\n                             C \\<in> bad \\<and> m \\<in> parts {Y})", "txt\\<open>Notes\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a list x1 x2.\n       \\<lbrakk>m \\<in> staticSecret A;\n        m \\<in> parts (knows Spy list) \\<longrightarrow>\n        A \\<in> bad \\<or>\n        (\\<exists>C B X.\n            Says C B X \\<in> set list \\<and> m \\<in> parts {X}) \\<or>\n        (\\<exists>C Y.\n            Notes C Y \\<in> set list \\<and>\n            C \\<in> bad \\<and> m \\<in> parts {Y})\\<rbrakk>\n       \\<Longrightarrow> m \\<in> parts\n                                  (knows Spy\n                                    (Notes x1 x2 # list)) \\<longrightarrow>\n                         A \\<in> bad \\<or>\n                         (\\<exists>C B X.\n                             Says C B X\n                             \\<in> set (Notes x1 x2 # list) \\<and>\n                             m \\<in> parts {X}) \\<or>\n                         (\\<exists>C Y.\n                             Notes C Y \\<in> set (Notes x1 x2 # list) \\<and>\n                             C \\<in> bad \\<and> m \\<in> parts {Y})", "apply (rule impI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a list x1 x2.\n       \\<lbrakk>m \\<in> staticSecret A;\n        m \\<in> parts (knows Spy list) \\<longrightarrow>\n        A \\<in> bad \\<or>\n        (\\<exists>C B X.\n            Says C B X \\<in> set list \\<and> m \\<in> parts {X}) \\<or>\n        (\\<exists>C Y.\n            Notes C Y \\<in> set list \\<and>\n            C \\<in> bad \\<and> m \\<in> parts {Y});\n        m \\<in> parts (knows Spy (Notes x1 x2 # list))\\<rbrakk>\n       \\<Longrightarrow> A \\<in> bad \\<or>\n                         (\\<exists>C B X.\n                             Says C B X\n                             \\<in> set (Notes x1 x2 # list) \\<and>\n                             m \\<in> parts {X}) \\<or>\n                         (\\<exists>C Y.\n                             Notes C Y \\<in> set (Notes x1 x2 # list) \\<and>\n                             C \\<in> bad \\<and> m \\<in> parts {Y})", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>list x1 x2.\n       \\<lbrakk>m = Key (priEK A) \\<or>\n                m = Key (priSK A) \\<or> m = Key (shrK A);\n        m \\<in> parts (knows Spy list) \\<longrightarrow>\n        A \\<in> bad \\<or>\n        (\\<exists>C B X.\n            Says C B X \\<in> set list \\<and> m \\<in> parts {X}) \\<or>\n        (\\<exists>C Y.\n            Notes C Y \\<in> set list \\<and>\n            C \\<in> bad \\<and> m \\<in> parts {Y});\n        m \\<in> parts\n                 (if x1 \\<in> bad then insert x2 (knows Spy list)\n                  else knows Spy list)\\<rbrakk>\n       \\<Longrightarrow> A \\<in> bad \\<or>\n                         (\\<exists>C B X.\n                             Says C B X \\<in> set list \\<and>\n                             m \\<in> parts {X}) \\<or>\n                         (\\<exists>C Y.\n                             (C = x1 \\<and> Y = x2 \\<or>\n                              Notes C Y \\<in> set list) \\<and>\n                             C \\<in> bad \\<and> m \\<in> parts {Y})", "apply (rename_tac agent msg)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>list agent msg.\n       \\<lbrakk>m = Key (priEK A) \\<or>\n                m = Key (priSK A) \\<or> m = Key (shrK A);\n        m \\<in> parts (knows Spy list) \\<longrightarrow>\n        A \\<in> bad \\<or>\n        (\\<exists>C B X.\n            Says C B X \\<in> set list \\<and> m \\<in> parts {X}) \\<or>\n        (\\<exists>C Y.\n            Notes C Y \\<in> set list \\<and>\n            C \\<in> bad \\<and> m \\<in> parts {Y});\n        m \\<in> parts\n                 (if agent \\<in> bad then insert msg (knows Spy list)\n                  else knows Spy list)\\<rbrakk>\n       \\<Longrightarrow> A \\<in> bad \\<or>\n                         (\\<exists>C B X.\n                             Says C B X \\<in> set list \\<and>\n                             m \\<in> parts {X}) \\<or>\n                         (\\<exists>C Y.\n                             (C = agent \\<and> Y = msg \\<or>\n                              Notes C Y \\<in> set list) \\<and>\n                             C \\<in> bad \\<and> m \\<in> parts {Y})", "apply (case_tac \"agent\\<notin>bad\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>list agent msg.\n       \\<lbrakk>m = Key (priEK A) \\<or>\n                m = Key (priSK A) \\<or> m = Key (shrK A);\n        m \\<in> parts (knows Spy list) \\<longrightarrow>\n        A \\<in> bad \\<or>\n        (\\<exists>C B X.\n            Says C B X \\<in> set list \\<and> m \\<in> parts {X}) \\<or>\n        (\\<exists>C Y.\n            Notes C Y \\<in> set list \\<and>\n            C \\<in> bad \\<and> m \\<in> parts {Y});\n        m \\<in> parts\n                 (if agent \\<in> bad then insert msg (knows Spy list)\n                  else knows Spy list);\n        agent \\<notin> bad\\<rbrakk>\n       \\<Longrightarrow> A \\<in> bad \\<or>\n                         (\\<exists>C B X.\n                             Says C B X \\<in> set list \\<and>\n                             m \\<in> parts {X}) \\<or>\n                         (\\<exists>C Y.\n                             (C = agent \\<and> Y = msg \\<or>\n                              Notes C Y \\<in> set list) \\<and>\n                             C \\<in> bad \\<and> m \\<in> parts {Y})\n 2. \\<And>list agent msg.\n       \\<lbrakk>m = Key (priEK A) \\<or>\n                m = Key (priSK A) \\<or> m = Key (shrK A);\n        m \\<in> parts (knows Spy list) \\<longrightarrow>\n        A \\<in> bad \\<or>\n        (\\<exists>C B X.\n            Says C B X \\<in> set list \\<and> m \\<in> parts {X}) \\<or>\n        (\\<exists>C Y.\n            Notes C Y \\<in> set list \\<and>\n            C \\<in> bad \\<and> m \\<in> parts {Y});\n        m \\<in> parts\n                 (if agent \\<in> bad then insert msg (knows Spy list)\n                  else knows Spy list);\n        \\<not> agent \\<notin> bad\\<rbrakk>\n       \\<Longrightarrow> A \\<in> bad \\<or>\n                         (\\<exists>C B X.\n                             Says C B X \\<in> set list \\<and>\n                             m \\<in> parts {X}) \\<or>\n                         (\\<exists>C Y.\n                             (C = agent \\<and> Y = msg \\<or>\n                              Notes C Y \\<in> set list) \\<and>\n                             C \\<in> bad \\<and> m \\<in> parts {Y})", "apply simp"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>list agent msg.\n       \\<lbrakk>m = Key (priEK A) \\<or>\n                m = Key (priSK A) \\<or> m = Key (shrK A);\n        A \\<in> bad \\<or>\n        (\\<exists>C B X.\n            Says C B X \\<in> set list \\<and> m \\<in> parts {X}) \\<or>\n        (\\<exists>C Y.\n            Notes C Y \\<in> set list \\<and>\n            C \\<in> bad \\<and> m \\<in> parts {Y});\n        m \\<in> parts (knows Spy list); agent \\<notin> bad\\<rbrakk>\n       \\<Longrightarrow> A \\<in> bad \\<or>\n                         (\\<exists>C B X.\n                             Says C B X \\<in> set list \\<and>\n                             m \\<in> parts {X}) \\<or>\n                         (\\<exists>C Y.\n                             (C = agent \\<and> Y = msg \\<or>\n                              Notes C Y \\<in> set list) \\<and>\n                             C \\<in> bad \\<and> m \\<in> parts {Y})\n 2. \\<And>list agent msg.\n       \\<lbrakk>m = Key (priEK A) \\<or>\n                m = Key (priSK A) \\<or> m = Key (shrK A);\n        m \\<in> parts (knows Spy list) \\<longrightarrow>\n        A \\<in> bad \\<or>\n        (\\<exists>C B X.\n            Says C B X \\<in> set list \\<and> m \\<in> parts {X}) \\<or>\n        (\\<exists>C Y.\n            Notes C Y \\<in> set list \\<and>\n            C \\<in> bad \\<and> m \\<in> parts {Y});\n        m \\<in> parts\n                 (if agent \\<in> bad then insert msg (knows Spy list)\n                  else knows Spy list);\n        \\<not> agent \\<notin> bad\\<rbrakk>\n       \\<Longrightarrow> A \\<in> bad \\<or>\n                         (\\<exists>C B X.\n                             Says C B X \\<in> set list \\<and>\n                             m \\<in> parts {X}) \\<or>\n                         (\\<exists>C Y.\n                             (C = agent \\<and> Y = msg \\<or>\n                              Notes C Y \\<in> set list) \\<and>\n                             C \\<in> bad \\<and> m \\<in> parts {Y})", "apply blast"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>list agent msg.\n       \\<lbrakk>m = Key (priEK A) \\<or>\n                m = Key (priSK A) \\<or> m = Key (shrK A);\n        m \\<in> parts (knows Spy list) \\<longrightarrow>\n        A \\<in> bad \\<or>\n        (\\<exists>C B X.\n            Says C B X \\<in> set list \\<and> m \\<in> parts {X}) \\<or>\n        (\\<exists>C Y.\n            Notes C Y \\<in> set list \\<and>\n            C \\<in> bad \\<and> m \\<in> parts {Y});\n        m \\<in> parts\n                 (if agent \\<in> bad then insert msg (knows Spy list)\n                  else knows Spy list);\n        \\<not> agent \\<notin> bad\\<rbrakk>\n       \\<Longrightarrow> A \\<in> bad \\<or>\n                         (\\<exists>C B X.\n                             Says C B X \\<in> set list \\<and>\n                             m \\<in> parts {X}) \\<or>\n                         (\\<exists>C Y.\n                             (C = agent \\<and> Y = msg \\<or>\n                              Notes C Y \\<in> set list) \\<and>\n                             C \\<in> bad \\<and> m \\<in> parts {Y})", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>list agent msg.\n       \\<lbrakk>m = Key (priEK A) \\<or>\n                m = Key (priSK A) \\<or> m = Key (shrK A);\n        m \\<in> parts (knows Spy list) \\<longrightarrow>\n        A \\<in> bad \\<or>\n        (\\<exists>C B X.\n            Says C B X \\<in> set list \\<and> m \\<in> parts {X}) \\<or>\n        (\\<exists>C Y.\n            Notes C Y \\<in> set list \\<and>\n            C \\<in> bad \\<and> m \\<in> parts {Y});\n        m \\<in> parts (insert msg (knows Spy list));\n        agent \\<in> bad\\<rbrakk>\n       \\<Longrightarrow> A \\<in> bad \\<or>\n                         (\\<exists>C B X.\n                             Says C B X \\<in> set list \\<and>\n                             m \\<in> parts {X}) \\<or>\n                         (\\<exists>C Y.\n                             (C = agent \\<and> Y = msg \\<or>\n                              Notes C Y \\<in> set list) \\<and>\n                             C \\<in> bad \\<and> m \\<in> parts {Y})", "apply (drule parts_insert [THEN equalityD1, THEN subsetD])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>list agent msg.\n       \\<lbrakk>m = Key (priEK A) \\<or>\n                m = Key (priSK A) \\<or> m = Key (shrK A);\n        m \\<in> parts (knows Spy list) \\<longrightarrow>\n        A \\<in> bad \\<or>\n        (\\<exists>C B X.\n            Says C B X \\<in> set list \\<and> m \\<in> parts {X}) \\<or>\n        (\\<exists>C Y.\n            Notes C Y \\<in> set list \\<and>\n            C \\<in> bad \\<and> m \\<in> parts {Y});\n        agent \\<in> bad;\n        m \\<in> parts {msg} \\<union> parts (knows Spy list)\\<rbrakk>\n       \\<Longrightarrow> A \\<in> bad \\<or>\n                         (\\<exists>C B X.\n                             Says C B X \\<in> set list \\<and>\n                             m \\<in> parts {X}) \\<or>\n                         (\\<exists>C Y.\n                             (C = agent \\<and> Y = msg \\<or>\n                              Notes C Y \\<in> set list) \\<and>\n                             C \\<in> bad \\<and> m \\<in> parts {Y})", "apply blast"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma staticSecret_analz_Spy:\n\"\\<lbrakk>m \\<in> analz (knows Spy evs); m \\<in> staticSecret A\\<rbrakk>  \\<Longrightarrow>\n A \\<in> bad \\<or>\n (\\<exists>C B X. Says C B X \\<in> set evs \\<and> m \\<in> parts{X}) \\<or>\n (\\<exists>C Y. Notes C Y \\<in> set evs \\<and> C \\<in> bad \\<and> m \\<in> parts{Y})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>m \\<in> analz (knows Spy evs); m \\<in> staticSecret A\\<rbrakk>\n    \\<Longrightarrow> A \\<in> bad \\<or>\n                      (\\<exists>C B X.\n                          Says C B X \\<in> set evs \\<and>\n                          m \\<in> parts {X}) \\<or>\n                      (\\<exists>C Y.\n                          Notes C Y \\<in> set evs \\<and>\n                          C \\<in> bad \\<and> m \\<in> parts {Y})", "by (drule analz_into_parts [THEN staticSecret_parts_Spy])"], ["", "lemma secret_parts_Spy:\n\"m \\<in> parts (knows Spy evs)  \\<Longrightarrow>\n m \\<in> initState Spy \\<or>\n (\\<exists>C B X. Says C B X \\<in> set evs \\<and> m \\<in> parts{X}) \\<or>\n (\\<exists>C Y. Notes C Y \\<in> set evs \\<and> C \\<in> bad \\<and> m \\<in> parts{Y})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. m \\<in> parts (knows Spy evs) \\<Longrightarrow>\n    m \\<in> initState Spy \\<or>\n    (\\<exists>C B X.\n        Says C B X \\<in> set evs \\<and> m \\<in> parts {X}) \\<or>\n    (\\<exists>C Y.\n        Notes C Y \\<in> set evs \\<and> C \\<in> bad \\<and> m \\<in> parts {Y})", "apply (erule rev_mp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. m \\<in> parts (knows Spy evs) \\<longrightarrow>\n    m \\<in> initState Spy \\<or>\n    (\\<exists>C B X.\n        Says C B X \\<in> set evs \\<and> m \\<in> parts {X}) \\<or>\n    (\\<exists>C Y.\n        Notes C Y \\<in> set evs \\<and> C \\<in> bad \\<and> m \\<in> parts {Y})", "apply (induct_tac \"evs\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. m \\<in> parts (knows Spy []) \\<longrightarrow>\n    m \\<in> initState Spy \\<or>\n    (\\<exists>C B X. Says C B X \\<in> set [] \\<and> m \\<in> parts {X}) \\<or>\n    (\\<exists>C Y.\n        Notes C Y \\<in> set [] \\<and> C \\<in> bad \\<and> m \\<in> parts {Y})\n 2. \\<And>a list.\n       m \\<in> parts (knows Spy list) \\<longrightarrow>\n       m \\<in> initState Spy \\<or>\n       (\\<exists>C B X.\n           Says C B X \\<in> set list \\<and> m \\<in> parts {X}) \\<or>\n       (\\<exists>C Y.\n           Notes C Y \\<in> set list \\<and>\n           C \\<in> bad \\<and> m \\<in> parts {Y}) \\<Longrightarrow>\n       m \\<in> parts (knows Spy (a # list)) \\<longrightarrow>\n       m \\<in> initState Spy \\<or>\n       (\\<exists>C B X.\n           Says C B X \\<in> set (a # list) \\<and> m \\<in> parts {X}) \\<or>\n       (\\<exists>C Y.\n           Notes C Y \\<in> set (a # list) \\<and>\n           C \\<in> bad \\<and> m \\<in> parts {Y})", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a list.\n       m \\<in> parts (knows Spy list) \\<longrightarrow>\n       m \\<in> initState Spy \\<or>\n       (\\<exists>C B X.\n           Says C B X \\<in> set list \\<and> m \\<in> parts {X}) \\<or>\n       (\\<exists>C Y.\n           Notes C Y \\<in> set list \\<and>\n           C \\<in> bad \\<and> m \\<in> parts {Y}) \\<Longrightarrow>\n       m \\<in> parts (knows Spy (a # list)) \\<longrightarrow>\n       m \\<in> initState Spy \\<or>\n       (\\<exists>C B X.\n           Says C B X \\<in> set (a # list) \\<and> m \\<in> parts {X}) \\<or>\n       (\\<exists>C Y.\n           Notes C Y \\<in> set (a # list) \\<and>\n           C \\<in> bad \\<and> m \\<in> parts {Y})", "apply (induct_tac \"a\")"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>a list x1 x2 x3.\n       m \\<in> parts (knows Spy list) \\<longrightarrow>\n       m \\<in> initState Spy \\<or>\n       (\\<exists>C B X.\n           Says C B X \\<in> set list \\<and> m \\<in> parts {X}) \\<or>\n       (\\<exists>C Y.\n           Notes C Y \\<in> set list \\<and>\n           C \\<in> bad \\<and> m \\<in> parts {Y}) \\<Longrightarrow>\n       m \\<in> parts (knows Spy (Says x1 x2 x3 # list)) \\<longrightarrow>\n       m \\<in> initState Spy \\<or>\n       (\\<exists>C B X.\n           Says C B X \\<in> set (Says x1 x2 x3 # list) \\<and>\n           m \\<in> parts {X}) \\<or>\n       (\\<exists>C Y.\n           Notes C Y \\<in> set (Says x1 x2 x3 # list) \\<and>\n           C \\<in> bad \\<and> m \\<in> parts {Y})\n 2. \\<And>a list x1 x2.\n       m \\<in> parts (knows Spy list) \\<longrightarrow>\n       m \\<in> initState Spy \\<or>\n       (\\<exists>C B X.\n           Says C B X \\<in> set list \\<and> m \\<in> parts {X}) \\<or>\n       (\\<exists>C Y.\n           Notes C Y \\<in> set list \\<and>\n           C \\<in> bad \\<and> m \\<in> parts {Y}) \\<Longrightarrow>\n       m \\<in> parts (knows Spy (Gets x1 x2 # list)) \\<longrightarrow>\n       m \\<in> initState Spy \\<or>\n       (\\<exists>C B X.\n           Says C B X \\<in> set (Gets x1 x2 # list) \\<and>\n           m \\<in> parts {X}) \\<or>\n       (\\<exists>C Y.\n           Notes C Y \\<in> set (Gets x1 x2 # list) \\<and>\n           C \\<in> bad \\<and> m \\<in> parts {Y})\n 3. \\<And>a list x1 x2.\n       m \\<in> parts (knows Spy list) \\<longrightarrow>\n       m \\<in> initState Spy \\<or>\n       (\\<exists>C B X.\n           Says C B X \\<in> set list \\<and> m \\<in> parts {X}) \\<or>\n       (\\<exists>C Y.\n           Notes C Y \\<in> set list \\<and>\n           C \\<in> bad \\<and> m \\<in> parts {Y}) \\<Longrightarrow>\n       m \\<in> parts (knows Spy (Notes x1 x2 # list)) \\<longrightarrow>\n       m \\<in> initState Spy \\<or>\n       (\\<exists>C B X.\n           Says C B X \\<in> set (Notes x1 x2 # list) \\<and>\n           m \\<in> parts {X}) \\<or>\n       (\\<exists>C Y.\n           Notes C Y \\<in> set (Notes x1 x2 # list) \\<and>\n           C \\<in> bad \\<and> m \\<in> parts {Y})", "txt\\<open>Says\\<close>"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>a list x1 x2 x3.\n       m \\<in> parts (knows Spy list) \\<longrightarrow>\n       m \\<in> initState Spy \\<or>\n       (\\<exists>C B X.\n           Says C B X \\<in> set list \\<and> m \\<in> parts {X}) \\<or>\n       (\\<exists>C Y.\n           Notes C Y \\<in> set list \\<and>\n           C \\<in> bad \\<and> m \\<in> parts {Y}) \\<Longrightarrow>\n       m \\<in> parts (knows Spy (Says x1 x2 x3 # list)) \\<longrightarrow>\n       m \\<in> initState Spy \\<or>\n       (\\<exists>C B X.\n           Says C B X \\<in> set (Says x1 x2 x3 # list) \\<and>\n           m \\<in> parts {X}) \\<or>\n       (\\<exists>C Y.\n           Notes C Y \\<in> set (Says x1 x2 x3 # list) \\<and>\n           C \\<in> bad \\<and> m \\<in> parts {Y})\n 2. \\<And>a list x1 x2.\n       m \\<in> parts (knows Spy list) \\<longrightarrow>\n       m \\<in> initState Spy \\<or>\n       (\\<exists>C B X.\n           Says C B X \\<in> set list \\<and> m \\<in> parts {X}) \\<or>\n       (\\<exists>C Y.\n           Notes C Y \\<in> set list \\<and>\n           C \\<in> bad \\<and> m \\<in> parts {Y}) \\<Longrightarrow>\n       m \\<in> parts (knows Spy (Gets x1 x2 # list)) \\<longrightarrow>\n       m \\<in> initState Spy \\<or>\n       (\\<exists>C B X.\n           Says C B X \\<in> set (Gets x1 x2 # list) \\<and>\n           m \\<in> parts {X}) \\<or>\n       (\\<exists>C Y.\n           Notes C Y \\<in> set (Gets x1 x2 # list) \\<and>\n           C \\<in> bad \\<and> m \\<in> parts {Y})\n 3. \\<And>a list x1 x2.\n       m \\<in> parts (knows Spy list) \\<longrightarrow>\n       m \\<in> initState Spy \\<or>\n       (\\<exists>C B X.\n           Says C B X \\<in> set list \\<and> m \\<in> parts {X}) \\<or>\n       (\\<exists>C Y.\n           Notes C Y \\<in> set list \\<and>\n           C \\<in> bad \\<and> m \\<in> parts {Y}) \\<Longrightarrow>\n       m \\<in> parts (knows Spy (Notes x1 x2 # list)) \\<longrightarrow>\n       m \\<in> initState Spy \\<or>\n       (\\<exists>C B X.\n           Says C B X \\<in> set (Notes x1 x2 # list) \\<and>\n           m \\<in> parts {X}) \\<or>\n       (\\<exists>C Y.\n           Notes C Y \\<in> set (Notes x1 x2 # list) \\<and>\n           C \\<in> bad \\<and> m \\<in> parts {Y})", "apply (rule impI)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>a list x1 x2 x3.\n       \\<lbrakk>m \\<in> parts (knows Spy list) \\<longrightarrow>\n                m \\<in> initState Spy \\<or>\n                (\\<exists>C B X.\n                    Says C B X \\<in> set list \\<and>\n                    m \\<in> parts {X}) \\<or>\n                (\\<exists>C Y.\n                    Notes C Y \\<in> set list \\<and>\n                    C \\<in> bad \\<and> m \\<in> parts {Y});\n        m \\<in> parts (knows Spy (Says x1 x2 x3 # list))\\<rbrakk>\n       \\<Longrightarrow> m \\<in> initState Spy \\<or>\n                         (\\<exists>C B X.\n                             Says C B X\n                             \\<in> set (Says x1 x2 x3 # list) \\<and>\n                             m \\<in> parts {X}) \\<or>\n                         (\\<exists>C Y.\n                             Notes C Y\n                             \\<in> set (Says x1 x2 x3 # list) \\<and>\n                             C \\<in> bad \\<and> m \\<in> parts {Y})\n 2. \\<And>a list x1 x2.\n       m \\<in> parts (knows Spy list) \\<longrightarrow>\n       m \\<in> initState Spy \\<or>\n       (\\<exists>C B X.\n           Says C B X \\<in> set list \\<and> m \\<in> parts {X}) \\<or>\n       (\\<exists>C Y.\n           Notes C Y \\<in> set list \\<and>\n           C \\<in> bad \\<and> m \\<in> parts {Y}) \\<Longrightarrow>\n       m \\<in> parts (knows Spy (Gets x1 x2 # list)) \\<longrightarrow>\n       m \\<in> initState Spy \\<or>\n       (\\<exists>C B X.\n           Says C B X \\<in> set (Gets x1 x2 # list) \\<and>\n           m \\<in> parts {X}) \\<or>\n       (\\<exists>C Y.\n           Notes C Y \\<in> set (Gets x1 x2 # list) \\<and>\n           C \\<in> bad \\<and> m \\<in> parts {Y})\n 3. \\<And>a list x1 x2.\n       m \\<in> parts (knows Spy list) \\<longrightarrow>\n       m \\<in> initState Spy \\<or>\n       (\\<exists>C B X.\n           Says C B X \\<in> set list \\<and> m \\<in> parts {X}) \\<or>\n       (\\<exists>C Y.\n           Notes C Y \\<in> set list \\<and>\n           C \\<in> bad \\<and> m \\<in> parts {Y}) \\<Longrightarrow>\n       m \\<in> parts (knows Spy (Notes x1 x2 # list)) \\<longrightarrow>\n       m \\<in> initState Spy \\<or>\n       (\\<exists>C B X.\n           Says C B X \\<in> set (Notes x1 x2 # list) \\<and>\n           m \\<in> parts {X}) \\<or>\n       (\\<exists>C Y.\n           Notes C Y \\<in> set (Notes x1 x2 # list) \\<and>\n           C \\<in> bad \\<and> m \\<in> parts {Y})", "apply (simp del: initState_Spy)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>list x1 x2 x3.\n       \\<lbrakk>m \\<in> parts (knows Spy list) \\<longrightarrow>\n                m \\<in> initState Spy \\<or>\n                (\\<exists>C B X.\n                    Says C B X \\<in> set list \\<and>\n                    m \\<in> parts {X}) \\<or>\n                (\\<exists>C Y.\n                    Notes C Y \\<in> set list \\<and>\n                    C \\<in> bad \\<and> m \\<in> parts {Y});\n        m \\<in> parts (insert x3 (knows Spy list))\\<rbrakk>\n       \\<Longrightarrow> m \\<in> initState Spy \\<or>\n                         (\\<exists>C B X.\n                             (C = x1 \\<and> B = x2 \\<and> X = x3 \\<or>\n                              Says C B X \\<in> set list) \\<and>\n                             m \\<in> parts {X}) \\<or>\n                         (\\<exists>C Y.\n                             Notes C Y \\<in> set list \\<and>\n                             C \\<in> bad \\<and> m \\<in> parts {Y})\n 2. \\<And>a list x1 x2.\n       m \\<in> parts (knows Spy list) \\<longrightarrow>\n       m \\<in> initState Spy \\<or>\n       (\\<exists>C B X.\n           Says C B X \\<in> set list \\<and> m \\<in> parts {X}) \\<or>\n       (\\<exists>C Y.\n           Notes C Y \\<in> set list \\<and>\n           C \\<in> bad \\<and> m \\<in> parts {Y}) \\<Longrightarrow>\n       m \\<in> parts (knows Spy (Gets x1 x2 # list)) \\<longrightarrow>\n       m \\<in> initState Spy \\<or>\n       (\\<exists>C B X.\n           Says C B X \\<in> set (Gets x1 x2 # list) \\<and>\n           m \\<in> parts {X}) \\<or>\n       (\\<exists>C Y.\n           Notes C Y \\<in> set (Gets x1 x2 # list) \\<and>\n           C \\<in> bad \\<and> m \\<in> parts {Y})\n 3. \\<And>a list x1 x2.\n       m \\<in> parts (knows Spy list) \\<longrightarrow>\n       m \\<in> initState Spy \\<or>\n       (\\<exists>C B X.\n           Says C B X \\<in> set list \\<and> m \\<in> parts {X}) \\<or>\n       (\\<exists>C Y.\n           Notes C Y \\<in> set list \\<and>\n           C \\<in> bad \\<and> m \\<in> parts {Y}) \\<Longrightarrow>\n       m \\<in> parts (knows Spy (Notes x1 x2 # list)) \\<longrightarrow>\n       m \\<in> initState Spy \\<or>\n       (\\<exists>C B X.\n           Says C B X \\<in> set (Notes x1 x2 # list) \\<and>\n           m \\<in> parts {X}) \\<or>\n       (\\<exists>C Y.\n           Notes C Y \\<in> set (Notes x1 x2 # list) \\<and>\n           C \\<in> bad \\<and> m \\<in> parts {Y})", "apply (drule parts_insert [THEN equalityD1, THEN subsetD])"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>list x1 x2 x3.\n       \\<lbrakk>m \\<in> parts (knows Spy list) \\<longrightarrow>\n                m \\<in> initState Spy \\<or>\n                (\\<exists>C B X.\n                    Says C B X \\<in> set list \\<and>\n                    m \\<in> parts {X}) \\<or>\n                (\\<exists>C Y.\n                    Notes C Y \\<in> set list \\<and>\n                    C \\<in> bad \\<and> m \\<in> parts {Y});\n        m \\<in> parts {x3} \\<union> parts (knows Spy list)\\<rbrakk>\n       \\<Longrightarrow> m \\<in> initState Spy \\<or>\n                         (\\<exists>C B X.\n                             (C = x1 \\<and> B = x2 \\<and> X = x3 \\<or>\n                              Says C B X \\<in> set list) \\<and>\n                             m \\<in> parts {X}) \\<or>\n                         (\\<exists>C Y.\n                             Notes C Y \\<in> set list \\<and>\n                             C \\<in> bad \\<and> m \\<in> parts {Y})\n 2. \\<And>a list x1 x2.\n       m \\<in> parts (knows Spy list) \\<longrightarrow>\n       m \\<in> initState Spy \\<or>\n       (\\<exists>C B X.\n           Says C B X \\<in> set list \\<and> m \\<in> parts {X}) \\<or>\n       (\\<exists>C Y.\n           Notes C Y \\<in> set list \\<and>\n           C \\<in> bad \\<and> m \\<in> parts {Y}) \\<Longrightarrow>\n       m \\<in> parts (knows Spy (Gets x1 x2 # list)) \\<longrightarrow>\n       m \\<in> initState Spy \\<or>\n       (\\<exists>C B X.\n           Says C B X \\<in> set (Gets x1 x2 # list) \\<and>\n           m \\<in> parts {X}) \\<or>\n       (\\<exists>C Y.\n           Notes C Y \\<in> set (Gets x1 x2 # list) \\<and>\n           C \\<in> bad \\<and> m \\<in> parts {Y})\n 3. \\<And>a list x1 x2.\n       m \\<in> parts (knows Spy list) \\<longrightarrow>\n       m \\<in> initState Spy \\<or>\n       (\\<exists>C B X.\n           Says C B X \\<in> set list \\<and> m \\<in> parts {X}) \\<or>\n       (\\<exists>C Y.\n           Notes C Y \\<in> set list \\<and>\n           C \\<in> bad \\<and> m \\<in> parts {Y}) \\<Longrightarrow>\n       m \\<in> parts (knows Spy (Notes x1 x2 # list)) \\<longrightarrow>\n       m \\<in> initState Spy \\<or>\n       (\\<exists>C B X.\n           Says C B X \\<in> set (Notes x1 x2 # list) \\<and>\n           m \\<in> parts {X}) \\<or>\n       (\\<exists>C Y.\n           Notes C Y \\<in> set (Notes x1 x2 # list) \\<and>\n           C \\<in> bad \\<and> m \\<in> parts {Y})", "apply (simp only: Un_iff)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>list x1 x2 x3.\n       \\<lbrakk>m \\<in> parts (knows Spy list) \\<longrightarrow>\n                m \\<in> initState Spy \\<or>\n                (\\<exists>C B X.\n                    Says C B X \\<in> set list \\<and>\n                    m \\<in> parts {X}) \\<or>\n                (\\<exists>C Y.\n                    Notes C Y \\<in> set list \\<and>\n                    C \\<in> bad \\<and> m \\<in> parts {Y});\n        m \\<in> parts {x3} \\<or> m \\<in> parts (knows Spy list)\\<rbrakk>\n       \\<Longrightarrow> m \\<in> initState Spy \\<or>\n                         (\\<exists>C B X.\n                             (C = x1 \\<and> B = x2 \\<and> X = x3 \\<or>\n                              Says C B X \\<in> set list) \\<and>\n                             m \\<in> parts {X}) \\<or>\n                         (\\<exists>C Y.\n                             Notes C Y \\<in> set list \\<and>\n                             C \\<in> bad \\<and> m \\<in> parts {Y})\n 2. \\<And>a list x1 x2.\n       m \\<in> parts (knows Spy list) \\<longrightarrow>\n       m \\<in> initState Spy \\<or>\n       (\\<exists>C B X.\n           Says C B X \\<in> set list \\<and> m \\<in> parts {X}) \\<or>\n       (\\<exists>C Y.\n           Notes C Y \\<in> set list \\<and>\n           C \\<in> bad \\<and> m \\<in> parts {Y}) \\<Longrightarrow>\n       m \\<in> parts (knows Spy (Gets x1 x2 # list)) \\<longrightarrow>\n       m \\<in> initState Spy \\<or>\n       (\\<exists>C B X.\n           Says C B X \\<in> set (Gets x1 x2 # list) \\<and>\n           m \\<in> parts {X}) \\<or>\n       (\\<exists>C Y.\n           Notes C Y \\<in> set (Gets x1 x2 # list) \\<and>\n           C \\<in> bad \\<and> m \\<in> parts {Y})\n 3. \\<And>a list x1 x2.\n       m \\<in> parts (knows Spy list) \\<longrightarrow>\n       m \\<in> initState Spy \\<or>\n       (\\<exists>C B X.\n           Says C B X \\<in> set list \\<and> m \\<in> parts {X}) \\<or>\n       (\\<exists>C Y.\n           Notes C Y \\<in> set list \\<and>\n           C \\<in> bad \\<and> m \\<in> parts {Y}) \\<Longrightarrow>\n       m \\<in> parts (knows Spy (Notes x1 x2 # list)) \\<longrightarrow>\n       m \\<in> initState Spy \\<or>\n       (\\<exists>C B X.\n           Says C B X \\<in> set (Notes x1 x2 # list) \\<and>\n           m \\<in> parts {X}) \\<or>\n       (\\<exists>C Y.\n           Notes C Y \\<in> set (Notes x1 x2 # list) \\<and>\n           C \\<in> bad \\<and> m \\<in> parts {Y})", "apply blast"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a list x1 x2.\n       m \\<in> parts (knows Spy list) \\<longrightarrow>\n       m \\<in> initState Spy \\<or>\n       (\\<exists>C B X.\n           Says C B X \\<in> set list \\<and> m \\<in> parts {X}) \\<or>\n       (\\<exists>C Y.\n           Notes C Y \\<in> set list \\<and>\n           C \\<in> bad \\<and> m \\<in> parts {Y}) \\<Longrightarrow>\n       m \\<in> parts (knows Spy (Gets x1 x2 # list)) \\<longrightarrow>\n       m \\<in> initState Spy \\<or>\n       (\\<exists>C B X.\n           Says C B X \\<in> set (Gets x1 x2 # list) \\<and>\n           m \\<in> parts {X}) \\<or>\n       (\\<exists>C Y.\n           Notes C Y \\<in> set (Gets x1 x2 # list) \\<and>\n           C \\<in> bad \\<and> m \\<in> parts {Y})\n 2. \\<And>a list x1 x2.\n       m \\<in> parts (knows Spy list) \\<longrightarrow>\n       m \\<in> initState Spy \\<or>\n       (\\<exists>C B X.\n           Says C B X \\<in> set list \\<and> m \\<in> parts {X}) \\<or>\n       (\\<exists>C Y.\n           Notes C Y \\<in> set list \\<and>\n           C \\<in> bad \\<and> m \\<in> parts {Y}) \\<Longrightarrow>\n       m \\<in> parts (knows Spy (Notes x1 x2 # list)) \\<longrightarrow>\n       m \\<in> initState Spy \\<or>\n       (\\<exists>C B X.\n           Says C B X \\<in> set (Notes x1 x2 # list) \\<and>\n           m \\<in> parts {X}) \\<or>\n       (\\<exists>C Y.\n           Notes C Y \\<in> set (Notes x1 x2 # list) \\<and>\n           C \\<in> bad \\<and> m \\<in> parts {Y})", "txt\\<open>Gets\\<close>"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a list x1 x2.\n       m \\<in> parts (knows Spy list) \\<longrightarrow>\n       m \\<in> initState Spy \\<or>\n       (\\<exists>C B X.\n           Says C B X \\<in> set list \\<and> m \\<in> parts {X}) \\<or>\n       (\\<exists>C Y.\n           Notes C Y \\<in> set list \\<and>\n           C \\<in> bad \\<and> m \\<in> parts {Y}) \\<Longrightarrow>\n       m \\<in> parts (knows Spy (Gets x1 x2 # list)) \\<longrightarrow>\n       m \\<in> initState Spy \\<or>\n       (\\<exists>C B X.\n           Says C B X \\<in> set (Gets x1 x2 # list) \\<and>\n           m \\<in> parts {X}) \\<or>\n       (\\<exists>C Y.\n           Notes C Y \\<in> set (Gets x1 x2 # list) \\<and>\n           C \\<in> bad \\<and> m \\<in> parts {Y})\n 2. \\<And>a list x1 x2.\n       m \\<in> parts (knows Spy list) \\<longrightarrow>\n       m \\<in> initState Spy \\<or>\n       (\\<exists>C B X.\n           Says C B X \\<in> set list \\<and> m \\<in> parts {X}) \\<or>\n       (\\<exists>C Y.\n           Notes C Y \\<in> set list \\<and>\n           C \\<in> bad \\<and> m \\<in> parts {Y}) \\<Longrightarrow>\n       m \\<in> parts (knows Spy (Notes x1 x2 # list)) \\<longrightarrow>\n       m \\<in> initState Spy \\<or>\n       (\\<exists>C B X.\n           Says C B X \\<in> set (Notes x1 x2 # list) \\<and>\n           m \\<in> parts {X}) \\<or>\n       (\\<exists>C Y.\n           Notes C Y \\<in> set (Notes x1 x2 # list) \\<and>\n           C \\<in> bad \\<and> m \\<in> parts {Y})", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a list x1 x2.\n       m \\<in> parts (knows Spy list) \\<longrightarrow>\n       m \\<in> initState Spy \\<or>\n       (\\<exists>C B X.\n           Says C B X \\<in> set list \\<and> m \\<in> parts {X}) \\<or>\n       (\\<exists>C Y.\n           Notes C Y \\<in> set list \\<and>\n           C \\<in> bad \\<and> m \\<in> parts {Y}) \\<Longrightarrow>\n       m \\<in> parts (knows Spy (Notes x1 x2 # list)) \\<longrightarrow>\n       m \\<in> initState Spy \\<or>\n       (\\<exists>C B X.\n           Says C B X \\<in> set (Notes x1 x2 # list) \\<and>\n           m \\<in> parts {X}) \\<or>\n       (\\<exists>C Y.\n           Notes C Y \\<in> set (Notes x1 x2 # list) \\<and>\n           C \\<in> bad \\<and> m \\<in> parts {Y})", "txt\\<open>Notes\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a list x1 x2.\n       m \\<in> parts (knows Spy list) \\<longrightarrow>\n       m \\<in> initState Spy \\<or>\n       (\\<exists>C B X.\n           Says C B X \\<in> set list \\<and> m \\<in> parts {X}) \\<or>\n       (\\<exists>C Y.\n           Notes C Y \\<in> set list \\<and>\n           C \\<in> bad \\<and> m \\<in> parts {Y}) \\<Longrightarrow>\n       m \\<in> parts (knows Spy (Notes x1 x2 # list)) \\<longrightarrow>\n       m \\<in> initState Spy \\<or>\n       (\\<exists>C B X.\n           Says C B X \\<in> set (Notes x1 x2 # list) \\<and>\n           m \\<in> parts {X}) \\<or>\n       (\\<exists>C Y.\n           Notes C Y \\<in> set (Notes x1 x2 # list) \\<and>\n           C \\<in> bad \\<and> m \\<in> parts {Y})", "apply (rule impI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a list x1 x2.\n       \\<lbrakk>m \\<in> parts (knows Spy list) \\<longrightarrow>\n                m \\<in> initState Spy \\<or>\n                (\\<exists>C B X.\n                    Says C B X \\<in> set list \\<and>\n                    m \\<in> parts {X}) \\<or>\n                (\\<exists>C Y.\n                    Notes C Y \\<in> set list \\<and>\n                    C \\<in> bad \\<and> m \\<in> parts {Y});\n        m \\<in> parts (knows Spy (Notes x1 x2 # list))\\<rbrakk>\n       \\<Longrightarrow> m \\<in> initState Spy \\<or>\n                         (\\<exists>C B X.\n                             Says C B X\n                             \\<in> set (Notes x1 x2 # list) \\<and>\n                             m \\<in> parts {X}) \\<or>\n                         (\\<exists>C Y.\n                             Notes C Y \\<in> set (Notes x1 x2 # list) \\<and>\n                             C \\<in> bad \\<and> m \\<in> parts {Y})", "apply (simp del: initState_Spy)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>list x1 x2.\n       \\<lbrakk>m \\<in> parts (knows Spy list) \\<longrightarrow>\n                m \\<in> initState Spy \\<or>\n                (\\<exists>C B X.\n                    Says C B X \\<in> set list \\<and>\n                    m \\<in> parts {X}) \\<or>\n                (\\<exists>C Y.\n                    Notes C Y \\<in> set list \\<and>\n                    C \\<in> bad \\<and> m \\<in> parts {Y});\n        m \\<in> parts\n                 (if x1 \\<in> bad then insert x2 (knows Spy list)\n                  else knows Spy list)\\<rbrakk>\n       \\<Longrightarrow> m \\<in> initState Spy \\<or>\n                         (\\<exists>C B X.\n                             Says C B X \\<in> set list \\<and>\n                             m \\<in> parts {X}) \\<or>\n                         (\\<exists>C Y.\n                             (C = x1 \\<and> Y = x2 \\<or>\n                              Notes C Y \\<in> set list) \\<and>\n                             C \\<in> bad \\<and> m \\<in> parts {Y})", "apply (rename_tac agent msg)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>list agent msg.\n       \\<lbrakk>m \\<in> parts (knows Spy list) \\<longrightarrow>\n                m \\<in> initState Spy \\<or>\n                (\\<exists>C B X.\n                    Says C B X \\<in> set list \\<and>\n                    m \\<in> parts {X}) \\<or>\n                (\\<exists>C Y.\n                    Notes C Y \\<in> set list \\<and>\n                    C \\<in> bad \\<and> m \\<in> parts {Y});\n        m \\<in> parts\n                 (if agent \\<in> bad then insert msg (knows Spy list)\n                  else knows Spy list)\\<rbrakk>\n       \\<Longrightarrow> m \\<in> initState Spy \\<or>\n                         (\\<exists>C B X.\n                             Says C B X \\<in> set list \\<and>\n                             m \\<in> parts {X}) \\<or>\n                         (\\<exists>C Y.\n                             (C = agent \\<and> Y = msg \\<or>\n                              Notes C Y \\<in> set list) \\<and>\n                             C \\<in> bad \\<and> m \\<in> parts {Y})", "apply (case_tac \"agent\\<notin>bad\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>list agent msg.\n       \\<lbrakk>m \\<in> parts (knows Spy list) \\<longrightarrow>\n                m \\<in> initState Spy \\<or>\n                (\\<exists>C B X.\n                    Says C B X \\<in> set list \\<and>\n                    m \\<in> parts {X}) \\<or>\n                (\\<exists>C Y.\n                    Notes C Y \\<in> set list \\<and>\n                    C \\<in> bad \\<and> m \\<in> parts {Y});\n        m \\<in> parts\n                 (if agent \\<in> bad then insert msg (knows Spy list)\n                  else knows Spy list);\n        agent \\<notin> bad\\<rbrakk>\n       \\<Longrightarrow> m \\<in> initState Spy \\<or>\n                         (\\<exists>C B X.\n                             Says C B X \\<in> set list \\<and>\n                             m \\<in> parts {X}) \\<or>\n                         (\\<exists>C Y.\n                             (C = agent \\<and> Y = msg \\<or>\n                              Notes C Y \\<in> set list) \\<and>\n                             C \\<in> bad \\<and> m \\<in> parts {Y})\n 2. \\<And>list agent msg.\n       \\<lbrakk>m \\<in> parts (knows Spy list) \\<longrightarrow>\n                m \\<in> initState Spy \\<or>\n                (\\<exists>C B X.\n                    Says C B X \\<in> set list \\<and>\n                    m \\<in> parts {X}) \\<or>\n                (\\<exists>C Y.\n                    Notes C Y \\<in> set list \\<and>\n                    C \\<in> bad \\<and> m \\<in> parts {Y});\n        m \\<in> parts\n                 (if agent \\<in> bad then insert msg (knows Spy list)\n                  else knows Spy list);\n        \\<not> agent \\<notin> bad\\<rbrakk>\n       \\<Longrightarrow> m \\<in> initState Spy \\<or>\n                         (\\<exists>C B X.\n                             Says C B X \\<in> set list \\<and>\n                             m \\<in> parts {X}) \\<or>\n                         (\\<exists>C Y.\n                             (C = agent \\<and> Y = msg \\<or>\n                              Notes C Y \\<in> set list) \\<and>\n                             C \\<in> bad \\<and> m \\<in> parts {Y})", "apply (simp del: initState_Spy)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>list agent msg.\n       \\<lbrakk>m \\<in> initState Spy \\<or>\n                (\\<exists>C B X.\n                    Says C B X \\<in> set list \\<and>\n                    m \\<in> parts {X}) \\<or>\n                (\\<exists>C Y.\n                    Notes C Y \\<in> set list \\<and>\n                    C \\<in> bad \\<and> m \\<in> parts {Y});\n        m \\<in> parts (knows Spy list); agent \\<notin> bad\\<rbrakk>\n       \\<Longrightarrow> m \\<in> initState Spy \\<or>\n                         (\\<exists>C B X.\n                             Says C B X \\<in> set list \\<and>\n                             m \\<in> parts {X}) \\<or>\n                         (\\<exists>C Y.\n                             (C = agent \\<and> Y = msg \\<or>\n                              Notes C Y \\<in> set list) \\<and>\n                             C \\<in> bad \\<and> m \\<in> parts {Y})\n 2. \\<And>list agent msg.\n       \\<lbrakk>m \\<in> parts (knows Spy list) \\<longrightarrow>\n                m \\<in> initState Spy \\<or>\n                (\\<exists>C B X.\n                    Says C B X \\<in> set list \\<and>\n                    m \\<in> parts {X}) \\<or>\n                (\\<exists>C Y.\n                    Notes C Y \\<in> set list \\<and>\n                    C \\<in> bad \\<and> m \\<in> parts {Y});\n        m \\<in> parts\n                 (if agent \\<in> bad then insert msg (knows Spy list)\n                  else knows Spy list);\n        \\<not> agent \\<notin> bad\\<rbrakk>\n       \\<Longrightarrow> m \\<in> initState Spy \\<or>\n                         (\\<exists>C B X.\n                             Says C B X \\<in> set list \\<and>\n                             m \\<in> parts {X}) \\<or>\n                         (\\<exists>C Y.\n                             (C = agent \\<and> Y = msg \\<or>\n                              Notes C Y \\<in> set list) \\<and>\n                             C \\<in> bad \\<and> m \\<in> parts {Y})", "apply blast"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>list agent msg.\n       \\<lbrakk>m \\<in> parts (knows Spy list) \\<longrightarrow>\n                m \\<in> initState Spy \\<or>\n                (\\<exists>C B X.\n                    Says C B X \\<in> set list \\<and>\n                    m \\<in> parts {X}) \\<or>\n                (\\<exists>C Y.\n                    Notes C Y \\<in> set list \\<and>\n                    C \\<in> bad \\<and> m \\<in> parts {Y});\n        m \\<in> parts\n                 (if agent \\<in> bad then insert msg (knows Spy list)\n                  else knows Spy list);\n        \\<not> agent \\<notin> bad\\<rbrakk>\n       \\<Longrightarrow> m \\<in> initState Spy \\<or>\n                         (\\<exists>C B X.\n                             Says C B X \\<in> set list \\<and>\n                             m \\<in> parts {X}) \\<or>\n                         (\\<exists>C Y.\n                             (C = agent \\<and> Y = msg \\<or>\n                              Notes C Y \\<in> set list) \\<and>\n                             C \\<in> bad \\<and> m \\<in> parts {Y})", "apply (simp del: initState_Spy)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>list agent msg.\n       \\<lbrakk>m \\<in> parts (knows Spy list) \\<longrightarrow>\n                m \\<in> initState Spy \\<or>\n                (\\<exists>C B X.\n                    Says C B X \\<in> set list \\<and>\n                    m \\<in> parts {X}) \\<or>\n                (\\<exists>C Y.\n                    Notes C Y \\<in> set list \\<and>\n                    C \\<in> bad \\<and> m \\<in> parts {Y});\n        m \\<in> parts (insert msg (knows Spy list));\n        agent \\<in> bad\\<rbrakk>\n       \\<Longrightarrow> m \\<in> initState Spy \\<or>\n                         (\\<exists>C B X.\n                             Says C B X \\<in> set list \\<and>\n                             m \\<in> parts {X}) \\<or>\n                         (\\<exists>C Y.\n                             (C = agent \\<and> Y = msg \\<or>\n                              Notes C Y \\<in> set list) \\<and>\n                             C \\<in> bad \\<and> m \\<in> parts {Y})", "apply (drule parts_insert [THEN equalityD1, THEN subsetD])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>list agent msg.\n       \\<lbrakk>m \\<in> parts (knows Spy list) \\<longrightarrow>\n                m \\<in> initState Spy \\<or>\n                (\\<exists>C B X.\n                    Says C B X \\<in> set list \\<and>\n                    m \\<in> parts {X}) \\<or>\n                (\\<exists>C Y.\n                    Notes C Y \\<in> set list \\<and>\n                    C \\<in> bad \\<and> m \\<in> parts {Y});\n        agent \\<in> bad;\n        m \\<in> parts {msg} \\<union> parts (knows Spy list)\\<rbrakk>\n       \\<Longrightarrow> m \\<in> initState Spy \\<or>\n                         (\\<exists>C B X.\n                             Says C B X \\<in> set list \\<and>\n                             m \\<in> parts {X}) \\<or>\n                         (\\<exists>C Y.\n                             (C = agent \\<and> Y = msg \\<or>\n                              Notes C Y \\<in> set list) \\<and>\n                             C \\<in> bad \\<and> m \\<in> parts {Y})", "apply blast"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma secret_parts_Spy_converse:\n\" m \\<in> initState Spy \\<or>\n (\\<exists>C B X. Says C B X \\<in> set evs \\<and> m \\<in> parts{X}) \\<or>\n (\\<exists>C Y. Notes C Y \\<in> set evs \\<and> C \\<in> bad \\<and> m \\<in> parts{Y})\n \\<Longrightarrow> m \\<in> parts(knows Spy evs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. m \\<in> initState Spy \\<or>\n    (\\<exists>C B X.\n        Says C B X \\<in> set evs \\<and> m \\<in> parts {X}) \\<or>\n    (\\<exists>C Y.\n        Notes C Y \\<in> set evs \\<and>\n        C \\<in> bad \\<and> m \\<in> parts {Y}) \\<Longrightarrow>\n    m \\<in> parts (knows Spy evs)", "apply (erule disjE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. m \\<in> initState Spy \\<Longrightarrow> m \\<in> parts (knows Spy evs)\n 2. (\\<exists>C B X.\n        Says C B X \\<in> set evs \\<and> m \\<in> parts {X}) \\<or>\n    (\\<exists>C Y.\n        Notes C Y \\<in> set evs \\<and>\n        C \\<in> bad \\<and> m \\<in> parts {Y}) \\<Longrightarrow>\n    m \\<in> parts (knows Spy evs)", "apply force"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<exists>C B X.\n        Says C B X \\<in> set evs \\<and> m \\<in> parts {X}) \\<or>\n    (\\<exists>C Y.\n        Notes C Y \\<in> set evs \\<and>\n        C \\<in> bad \\<and> m \\<in> parts {Y}) \\<Longrightarrow>\n    m \\<in> parts (knows Spy evs)", "apply (erule disjE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<exists>C B X.\n       Says C B X \\<in> set evs \\<and> m \\<in> parts {X} \\<Longrightarrow>\n    m \\<in> parts (knows Spy evs)\n 2. \\<exists>C Y.\n       Notes C Y \\<in> set evs \\<and>\n       C \\<in> bad \\<and> m \\<in> parts {Y} \\<Longrightarrow>\n    m \\<in> parts (knows Spy evs)", "apply (blast dest: Says_imp_knows_Spy [THEN parts.Inj] parts_trans)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>C Y.\n       Notes C Y \\<in> set evs \\<and>\n       C \\<in> bad \\<and> m \\<in> parts {Y} \\<Longrightarrow>\n    m \\<in> parts (knows Spy evs)", "apply (blast dest: Notes_imp_knows_Spy [THEN parts.Inj] parts_trans)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma secret_analz_Spy:\n\"m \\<in> analz (knows Spy evs)  \\<Longrightarrow>\n m \\<in> initState Spy \\<or>\n (\\<exists>C B X. Says C B X \\<in> set evs \\<and> m \\<in> parts{X}) \\<or>\n (\\<exists>C Y. Notes C Y \\<in> set evs \\<and> C \\<in> bad \\<and> m \\<in> parts{Y})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. m \\<in> analz (knows Spy evs) \\<Longrightarrow>\n    m \\<in> initState Spy \\<or>\n    (\\<exists>C B X.\n        Says C B X \\<in> set evs \\<and> m \\<in> parts {X}) \\<or>\n    (\\<exists>C Y.\n        Notes C Y \\<in> set evs \\<and> C \\<in> bad \\<and> m \\<in> parts {Y})", "by (blast dest: analz_into_parts secret_parts_Spy)"], ["", "subsection\\<open>Protocol-dependent study\\<close>"], ["", "text\\<open>Proving generalised version of @{thm Spy_see_priEK} using same strategy, the \"direct\" strategy\\<close>"], ["", "lemma NS_Spy_see_staticSecret:\n \"\\<lbrakk>m \\<in> staticSecret A; evs \\<in> ns_public\\<rbrakk> \\<Longrightarrow>\n   m \\<in> parts(knows Spy evs) = (A \\<in> bad)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>m \\<in> staticSecret A; evs \\<in> ns_public\\<rbrakk>\n    \\<Longrightarrow> (m \\<in> parts (knows Spy evs)) = (A \\<in> bad)", "apply (erule ns_public.induct)"], ["proof (prove)\ngoal (6 subgoals):\n 1. m \\<in> staticSecret A \\<Longrightarrow>\n    (m \\<in> parts (knows Spy [])) = (A \\<in> bad)\n 2. \\<And>evsf X B.\n       \\<lbrakk>m \\<in> staticSecret A; evsf \\<in> ns_public;\n        (m \\<in> parts (knows Spy evsf)) = (A \\<in> bad);\n        X \\<in> synth (analz (knows Spy evsf))\\<rbrakk>\n       \\<Longrightarrow> (m \\<in> parts (knows Spy (Says Spy B X # evsf))) =\n                         (A \\<in> bad)\n 3. \\<And>evsr Aa B X.\n       \\<lbrakk>m \\<in> staticSecret A; evsr \\<in> ns_public;\n        (m \\<in> parts (knows Spy evsr)) = (A \\<in> bad);\n        Says Aa B X \\<in> set evsr\\<rbrakk>\n       \\<Longrightarrow> (m \\<in> parts (knows Spy (Gets B X # evsr))) =\n                         (A \\<in> bad)\n 4. \\<And>evs1 NA Aa B.\n       \\<lbrakk>m \\<in> staticSecret A; evs1 \\<in> ns_public;\n        (m \\<in> parts (knows Spy evs1)) = (A \\<in> bad);\n        Nonce NA \\<notin> used evs1\\<rbrakk>\n       \\<Longrightarrow> (m \\<in> parts\n                                   (knows Spy\n                                     (Says Aa B\n (Crypt (pubK B) \\<lbrace>Nonce NA, Agent Aa\\<rbrace>) #\nevs1))) =\n                         (A \\<in> bad)\n 5. \\<And>evs2 NB B NA Aa.\n       \\<lbrakk>m \\<in> staticSecret A; evs2 \\<in> ns_public;\n        (m \\<in> parts (knows Spy evs2)) = (A \\<in> bad);\n        Nonce NB \\<notin> used evs2;\n        Gets B (Crypt (pubK B) \\<lbrace>Nonce NA, Agent Aa\\<rbrace>)\n        \\<in> set evs2\\<rbrakk>\n       \\<Longrightarrow> (m \\<in> parts\n                                   (knows Spy\n                                     (Says B Aa\n (Crypt (pubK Aa) \\<lbrace>Nonce NA, Nonce NB\\<rbrace>) #\nevs2))) =\n                         (A \\<in> bad)\n 6. \\<And>evs3 Aa B NA NB.\n       \\<lbrakk>m \\<in> staticSecret A; evs3 \\<in> ns_public;\n        (m \\<in> parts (knows Spy evs3)) = (A \\<in> bad);\n        Says Aa B (Crypt (pubK B) \\<lbrace>Nonce NA, Agent Aa\\<rbrace>)\n        \\<in> set evs3;\n        Gets Aa (Crypt (pubK Aa) \\<lbrace>Nonce NA, Nonce NB\\<rbrace>)\n        \\<in> set evs3\\<rbrakk>\n       \\<Longrightarrow> (m \\<in> parts\n                                   (knows Spy\n                                     (Says Aa B\n (Crypt (pubK B) (Nonce NB)) #\nevs3))) =\n                         (A \\<in> bad)", "apply simp_all"], ["proof (prove)\ngoal (5 subgoals):\n 1. m = Key (priEK A) \\<or>\n    m = Key (priSK A) \\<or> m = Key (shrK A) \\<Longrightarrow>\n    (m \\<in> Key ` invKey ` pubK ` bad \\<or>\n     m \\<in> Key ` invKey ` pubSK ` bad \\<or>\n     m \\<in> Key ` shrK ` bad \\<or>\n     m \\<in> Key ` range pubK \\<or> m \\<in> Key ` range pubSK) =\n    (A \\<in> bad)\n 2. \\<And>evsf X.\n       \\<lbrakk>m = Key (priEK A) \\<or>\n                m = Key (priSK A) \\<or> m = Key (shrK A);\n        evsf \\<in> ns_public;\n        (m \\<in> parts (knows Spy evsf)) = (A \\<in> bad);\n        X \\<in> synth (analz (knows Spy evsf))\\<rbrakk>\n       \\<Longrightarrow> (m \\<in> parts (insert X (knows Spy evsf))) =\n                         (A \\<in> bad)\n 3. \\<And>evs1 NA Aa B.\n       \\<lbrakk>m = Key (priEK A) \\<or>\n                m = Key (priSK A) \\<or> m = Key (shrK A);\n        evs1 \\<in> ns_public;\n        (m \\<in> parts (knows Spy evs1)) = (A \\<in> bad);\n        Nonce NA \\<notin> used evs1\\<rbrakk>\n       \\<Longrightarrow> (m =\n                          Crypt (pubK B)\n                           \\<lbrace>Nonce NA, Agent Aa\\<rbrace> \\<or>\n                          m = \\<lbrace>Nonce NA, Agent Aa\\<rbrace> \\<or>\n                          m = Nonce NA \\<or>\n                          m = Agent Aa \\<or> A \\<in> bad) =\n                         (A \\<in> bad)\n 4. \\<And>evs2 NB B NA Aa.\n       \\<lbrakk>m = Key (priEK A) \\<or>\n                m = Key (priSK A) \\<or> m = Key (shrK A);\n        evs2 \\<in> ns_public;\n        (m \\<in> parts (knows Spy evs2)) = (A \\<in> bad);\n        Nonce NB \\<notin> used evs2;\n        Gets B (Crypt (pubK B) \\<lbrace>Nonce NA, Agent Aa\\<rbrace>)\n        \\<in> set evs2\\<rbrakk>\n       \\<Longrightarrow> (m =\n                          Crypt (pubK Aa)\n                           \\<lbrace>Nonce NA, Nonce NB\\<rbrace> \\<or>\n                          m = \\<lbrace>Nonce NA, Nonce NB\\<rbrace> \\<or>\n                          m = Nonce NA \\<or>\n                          m = Nonce NB \\<or> A \\<in> bad) =\n                         (A \\<in> bad)\n 5. \\<And>evs3 Aa B NA NB.\n       \\<lbrakk>m = Key (priEK A) \\<or>\n                m = Key (priSK A) \\<or> m = Key (shrK A);\n        evs3 \\<in> ns_public;\n        (m \\<in> parts (knows Spy evs3)) = (A \\<in> bad);\n        Says Aa B (Crypt (pubK B) \\<lbrace>Nonce NA, Agent Aa\\<rbrace>)\n        \\<in> set evs3;\n        Gets Aa (Crypt (pubK Aa) \\<lbrace>Nonce NA, Nonce NB\\<rbrace>)\n        \\<in> set evs3\\<rbrakk>\n       \\<Longrightarrow> (m = Crypt (pubK B) (Nonce NB) \\<or>\n                          m = Nonce NB \\<or> A \\<in> bad) =\n                         (A \\<in> bad)", "prefer 2"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>evsf X.\n       \\<lbrakk>m = Key (priEK A) \\<or>\n                m = Key (priSK A) \\<or> m = Key (shrK A);\n        evsf \\<in> ns_public;\n        (m \\<in> parts (knows Spy evsf)) = (A \\<in> bad);\n        X \\<in> synth (analz (knows Spy evsf))\\<rbrakk>\n       \\<Longrightarrow> (m \\<in> parts (insert X (knows Spy evsf))) =\n                         (A \\<in> bad)\n 2. m = Key (priEK A) \\<or>\n    m = Key (priSK A) \\<or> m = Key (shrK A) \\<Longrightarrow>\n    (m \\<in> Key ` invKey ` pubK ` bad \\<or>\n     m \\<in> Key ` invKey ` pubSK ` bad \\<or>\n     m \\<in> Key ` shrK ` bad \\<or>\n     m \\<in> Key ` range pubK \\<or> m \\<in> Key ` range pubSK) =\n    (A \\<in> bad)\n 3. \\<And>evs1 NA Aa B.\n       \\<lbrakk>m = Key (priEK A) \\<or>\n                m = Key (priSK A) \\<or> m = Key (shrK A);\n        evs1 \\<in> ns_public;\n        (m \\<in> parts (knows Spy evs1)) = (A \\<in> bad);\n        Nonce NA \\<notin> used evs1\\<rbrakk>\n       \\<Longrightarrow> (m =\n                          Crypt (pubK B)\n                           \\<lbrace>Nonce NA, Agent Aa\\<rbrace> \\<or>\n                          m = \\<lbrace>Nonce NA, Agent Aa\\<rbrace> \\<or>\n                          m = Nonce NA \\<or>\n                          m = Agent Aa \\<or> A \\<in> bad) =\n                         (A \\<in> bad)\n 4. \\<And>evs2 NB B NA Aa.\n       \\<lbrakk>m = Key (priEK A) \\<or>\n                m = Key (priSK A) \\<or> m = Key (shrK A);\n        evs2 \\<in> ns_public;\n        (m \\<in> parts (knows Spy evs2)) = (A \\<in> bad);\n        Nonce NB \\<notin> used evs2;\n        Gets B (Crypt (pubK B) \\<lbrace>Nonce NA, Agent Aa\\<rbrace>)\n        \\<in> set evs2\\<rbrakk>\n       \\<Longrightarrow> (m =\n                          Crypt (pubK Aa)\n                           \\<lbrace>Nonce NA, Nonce NB\\<rbrace> \\<or>\n                          m = \\<lbrace>Nonce NA, Nonce NB\\<rbrace> \\<or>\n                          m = Nonce NA \\<or>\n                          m = Nonce NB \\<or> A \\<in> bad) =\n                         (A \\<in> bad)\n 5. \\<And>evs3 Aa B NA NB.\n       \\<lbrakk>m = Key (priEK A) \\<or>\n                m = Key (priSK A) \\<or> m = Key (shrK A);\n        evs3 \\<in> ns_public;\n        (m \\<in> parts (knows Spy evs3)) = (A \\<in> bad);\n        Says Aa B (Crypt (pubK B) \\<lbrace>Nonce NA, Agent Aa\\<rbrace>)\n        \\<in> set evs3;\n        Gets Aa (Crypt (pubK Aa) \\<lbrace>Nonce NA, Nonce NB\\<rbrace>)\n        \\<in> set evs3\\<rbrakk>\n       \\<Longrightarrow> (m = Crypt (pubK B) (Nonce NB) \\<or>\n                          m = Nonce NB \\<or> A \\<in> bad) =\n                         (A \\<in> bad)", "apply (cases \"A:bad\")"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<And>evsf X.\n       \\<lbrakk>m = Key (priEK A) \\<or>\n                m = Key (priSK A) \\<or> m = Key (shrK A);\n        evsf \\<in> ns_public;\n        (m \\<in> parts (knows Spy evsf)) = (A \\<in> bad);\n        X \\<in> synth (analz (knows Spy evsf)); A \\<in> bad\\<rbrakk>\n       \\<Longrightarrow> (m \\<in> parts (insert X (knows Spy evsf))) =\n                         (A \\<in> bad)\n 2. \\<And>evsf X.\n       \\<lbrakk>m = Key (priEK A) \\<or>\n                m = Key (priSK A) \\<or> m = Key (shrK A);\n        evsf \\<in> ns_public;\n        (m \\<in> parts (knows Spy evsf)) = (A \\<in> bad);\n        X \\<in> synth (analz (knows Spy evsf)); A \\<notin> bad\\<rbrakk>\n       \\<Longrightarrow> (m \\<in> parts (insert X (knows Spy evsf))) =\n                         (A \\<in> bad)\n 3. m = Key (priEK A) \\<or>\n    m = Key (priSK A) \\<or> m = Key (shrK A) \\<Longrightarrow>\n    (m \\<in> Key ` invKey ` pubK ` bad \\<or>\n     m \\<in> Key ` invKey ` pubSK ` bad \\<or>\n     m \\<in> Key ` shrK ` bad \\<or>\n     m \\<in> Key ` range pubK \\<or> m \\<in> Key ` range pubSK) =\n    (A \\<in> bad)\n 4. \\<And>evs1 NA Aa B.\n       \\<lbrakk>m = Key (priEK A) \\<or>\n                m = Key (priSK A) \\<or> m = Key (shrK A);\n        evs1 \\<in> ns_public;\n        (m \\<in> parts (knows Spy evs1)) = (A \\<in> bad);\n        Nonce NA \\<notin> used evs1\\<rbrakk>\n       \\<Longrightarrow> (m =\n                          Crypt (pubK B)\n                           \\<lbrace>Nonce NA, Agent Aa\\<rbrace> \\<or>\n                          m = \\<lbrace>Nonce NA, Agent Aa\\<rbrace> \\<or>\n                          m = Nonce NA \\<or>\n                          m = Agent Aa \\<or> A \\<in> bad) =\n                         (A \\<in> bad)\n 5. \\<And>evs2 NB B NA Aa.\n       \\<lbrakk>m = Key (priEK A) \\<or>\n                m = Key (priSK A) \\<or> m = Key (shrK A);\n        evs2 \\<in> ns_public;\n        (m \\<in> parts (knows Spy evs2)) = (A \\<in> bad);\n        Nonce NB \\<notin> used evs2;\n        Gets B (Crypt (pubK B) \\<lbrace>Nonce NA, Agent Aa\\<rbrace>)\n        \\<in> set evs2\\<rbrakk>\n       \\<Longrightarrow> (m =\n                          Crypt (pubK Aa)\n                           \\<lbrace>Nonce NA, Nonce NB\\<rbrace> \\<or>\n                          m = \\<lbrace>Nonce NA, Nonce NB\\<rbrace> \\<or>\n                          m = Nonce NA \\<or>\n                          m = Nonce NB \\<or> A \\<in> bad) =\n                         (A \\<in> bad)\n 6. \\<And>evs3 Aa B NA NB.\n       \\<lbrakk>m = Key (priEK A) \\<or>\n                m = Key (priSK A) \\<or> m = Key (shrK A);\n        evs3 \\<in> ns_public;\n        (m \\<in> parts (knows Spy evs3)) = (A \\<in> bad);\n        Says Aa B (Crypt (pubK B) \\<lbrace>Nonce NA, Agent Aa\\<rbrace>)\n        \\<in> set evs3;\n        Gets Aa (Crypt (pubK Aa) \\<lbrace>Nonce NA, Nonce NB\\<rbrace>)\n        \\<in> set evs3\\<rbrakk>\n       \\<Longrightarrow> (m = Crypt (pubK B) (Nonce NB) \\<or>\n                          m = Nonce NB \\<or> A \\<in> bad) =\n                         (A \\<in> bad)", "apply blast"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>evsf X.\n       \\<lbrakk>m = Key (priEK A) \\<or>\n                m = Key (priSK A) \\<or> m = Key (shrK A);\n        evsf \\<in> ns_public;\n        (m \\<in> parts (knows Spy evsf)) = (A \\<in> bad);\n        X \\<in> synth (analz (knows Spy evsf)); A \\<notin> bad\\<rbrakk>\n       \\<Longrightarrow> (m \\<in> parts (insert X (knows Spy evsf))) =\n                         (A \\<in> bad)\n 2. m = Key (priEK A) \\<or>\n    m = Key (priSK A) \\<or> m = Key (shrK A) \\<Longrightarrow>\n    (m \\<in> Key ` invKey ` pubK ` bad \\<or>\n     m \\<in> Key ` invKey ` pubSK ` bad \\<or>\n     m \\<in> Key ` shrK ` bad \\<or>\n     m \\<in> Key ` range pubK \\<or> m \\<in> Key ` range pubSK) =\n    (A \\<in> bad)\n 3. \\<And>evs1 NA Aa B.\n       \\<lbrakk>m = Key (priEK A) \\<or>\n                m = Key (priSK A) \\<or> m = Key (shrK A);\n        evs1 \\<in> ns_public;\n        (m \\<in> parts (knows Spy evs1)) = (A \\<in> bad);\n        Nonce NA \\<notin> used evs1\\<rbrakk>\n       \\<Longrightarrow> (m =\n                          Crypt (pubK B)\n                           \\<lbrace>Nonce NA, Agent Aa\\<rbrace> \\<or>\n                          m = \\<lbrace>Nonce NA, Agent Aa\\<rbrace> \\<or>\n                          m = Nonce NA \\<or>\n                          m = Agent Aa \\<or> A \\<in> bad) =\n                         (A \\<in> bad)\n 4. \\<And>evs2 NB B NA Aa.\n       \\<lbrakk>m = Key (priEK A) \\<or>\n                m = Key (priSK A) \\<or> m = Key (shrK A);\n        evs2 \\<in> ns_public;\n        (m \\<in> parts (knows Spy evs2)) = (A \\<in> bad);\n        Nonce NB \\<notin> used evs2;\n        Gets B (Crypt (pubK B) \\<lbrace>Nonce NA, Agent Aa\\<rbrace>)\n        \\<in> set evs2\\<rbrakk>\n       \\<Longrightarrow> (m =\n                          Crypt (pubK Aa)\n                           \\<lbrace>Nonce NA, Nonce NB\\<rbrace> \\<or>\n                          m = \\<lbrace>Nonce NA, Nonce NB\\<rbrace> \\<or>\n                          m = Nonce NA \\<or>\n                          m = Nonce NB \\<or> A \\<in> bad) =\n                         (A \\<in> bad)\n 5. \\<And>evs3 Aa B NA NB.\n       \\<lbrakk>m = Key (priEK A) \\<or>\n                m = Key (priSK A) \\<or> m = Key (shrK A);\n        evs3 \\<in> ns_public;\n        (m \\<in> parts (knows Spy evs3)) = (A \\<in> bad);\n        Says Aa B (Crypt (pubK B) \\<lbrace>Nonce NA, Agent Aa\\<rbrace>)\n        \\<in> set evs3;\n        Gets Aa (Crypt (pubK Aa) \\<lbrace>Nonce NA, Nonce NB\\<rbrace>)\n        \\<in> set evs3\\<rbrakk>\n       \\<Longrightarrow> (m = Crypt (pubK B) (Nonce NB) \\<or>\n                          m = Nonce NB \\<or> A \\<in> bad) =\n                         (A \\<in> bad)", "(*Spy knows bad agents' keys since start*)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>evsf X.\n       \\<lbrakk>m = Key (priEK A) \\<or>\n                m = Key (priSK A) \\<or> m = Key (shrK A);\n        evsf \\<in> ns_public;\n        (m \\<in> parts (knows Spy evsf)) = (A \\<in> bad);\n        X \\<in> synth (analz (knows Spy evsf)); A \\<notin> bad\\<rbrakk>\n       \\<Longrightarrow> (m \\<in> parts (insert X (knows Spy evsf))) =\n                         (A \\<in> bad)\n 2. m = Key (priEK A) \\<or>\n    m = Key (priSK A) \\<or> m = Key (shrK A) \\<Longrightarrow>\n    (m \\<in> Key ` invKey ` pubK ` bad \\<or>\n     m \\<in> Key ` invKey ` pubSK ` bad \\<or>\n     m \\<in> Key ` shrK ` bad \\<or>\n     m \\<in> Key ` range pubK \\<or> m \\<in> Key ` range pubSK) =\n    (A \\<in> bad)\n 3. \\<And>evs1 NA Aa B.\n       \\<lbrakk>m = Key (priEK A) \\<or>\n                m = Key (priSK A) \\<or> m = Key (shrK A);\n        evs1 \\<in> ns_public;\n        (m \\<in> parts (knows Spy evs1)) = (A \\<in> bad);\n        Nonce NA \\<notin> used evs1\\<rbrakk>\n       \\<Longrightarrow> (m =\n                          Crypt (pubK B)\n                           \\<lbrace>Nonce NA, Agent Aa\\<rbrace> \\<or>\n                          m = \\<lbrace>Nonce NA, Agent Aa\\<rbrace> \\<or>\n                          m = Nonce NA \\<or>\n                          m = Agent Aa \\<or> A \\<in> bad) =\n                         (A \\<in> bad)\n 4. \\<And>evs2 NB B NA Aa.\n       \\<lbrakk>m = Key (priEK A) \\<or>\n                m = Key (priSK A) \\<or> m = Key (shrK A);\n        evs2 \\<in> ns_public;\n        (m \\<in> parts (knows Spy evs2)) = (A \\<in> bad);\n        Nonce NB \\<notin> used evs2;\n        Gets B (Crypt (pubK B) \\<lbrace>Nonce NA, Agent Aa\\<rbrace>)\n        \\<in> set evs2\\<rbrakk>\n       \\<Longrightarrow> (m =\n                          Crypt (pubK Aa)\n                           \\<lbrace>Nonce NA, Nonce NB\\<rbrace> \\<or>\n                          m = \\<lbrace>Nonce NA, Nonce NB\\<rbrace> \\<or>\n                          m = Nonce NA \\<or>\n                          m = Nonce NB \\<or> A \\<in> bad) =\n                         (A \\<in> bad)\n 5. \\<And>evs3 Aa B NA NB.\n       \\<lbrakk>m = Key (priEK A) \\<or>\n                m = Key (priSK A) \\<or> m = Key (shrK A);\n        evs3 \\<in> ns_public;\n        (m \\<in> parts (knows Spy evs3)) = (A \\<in> bad);\n        Says Aa B (Crypt (pubK B) \\<lbrace>Nonce NA, Agent Aa\\<rbrace>)\n        \\<in> set evs3;\n        Gets Aa (Crypt (pubK Aa) \\<lbrace>Nonce NA, Nonce NB\\<rbrace>)\n        \\<in> set evs3\\<rbrakk>\n       \\<Longrightarrow> (m = Crypt (pubK B) (Nonce NB) \\<or>\n                          m = Nonce NB \\<or> A \\<in> bad) =\n                         (A \\<in> bad)", "apply clarify"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>evsf X.\n       \\<lbrakk>m = Key (priEK A) \\<or>\n                m = Key (priSK A) \\<or> m = Key (shrK A);\n        evsf \\<in> ns_public; X \\<in> synth (analz (knows Spy evsf));\n        A \\<notin> bad; m \\<notin> parts (knows Spy evsf); A \\<notin> bad;\n        m \\<in> parts (insert X (knows Spy evsf))\\<rbrakk>\n       \\<Longrightarrow> A \\<in> bad\n 2. m = Key (priEK A) \\<or>\n    m = Key (priSK A) \\<or> m = Key (shrK A) \\<Longrightarrow>\n    (m \\<in> Key ` invKey ` pubK ` bad \\<or>\n     m \\<in> Key ` invKey ` pubSK ` bad \\<or>\n     m \\<in> Key ` shrK ` bad \\<or>\n     m \\<in> Key ` range pubK \\<or> m \\<in> Key ` range pubSK) =\n    (A \\<in> bad)\n 3. \\<And>evs1 NA Aa B.\n       \\<lbrakk>m = Key (priEK A) \\<or>\n                m = Key (priSK A) \\<or> m = Key (shrK A);\n        evs1 \\<in> ns_public;\n        (m \\<in> parts (knows Spy evs1)) = (A \\<in> bad);\n        Nonce NA \\<notin> used evs1\\<rbrakk>\n       \\<Longrightarrow> (m =\n                          Crypt (pubK B)\n                           \\<lbrace>Nonce NA, Agent Aa\\<rbrace> \\<or>\n                          m = \\<lbrace>Nonce NA, Agent Aa\\<rbrace> \\<or>\n                          m = Nonce NA \\<or>\n                          m = Agent Aa \\<or> A \\<in> bad) =\n                         (A \\<in> bad)\n 4. \\<And>evs2 NB B NA Aa.\n       \\<lbrakk>m = Key (priEK A) \\<or>\n                m = Key (priSK A) \\<or> m = Key (shrK A);\n        evs2 \\<in> ns_public;\n        (m \\<in> parts (knows Spy evs2)) = (A \\<in> bad);\n        Nonce NB \\<notin> used evs2;\n        Gets B (Crypt (pubK B) \\<lbrace>Nonce NA, Agent Aa\\<rbrace>)\n        \\<in> set evs2\\<rbrakk>\n       \\<Longrightarrow> (m =\n                          Crypt (pubK Aa)\n                           \\<lbrace>Nonce NA, Nonce NB\\<rbrace> \\<or>\n                          m = \\<lbrace>Nonce NA, Nonce NB\\<rbrace> \\<or>\n                          m = Nonce NA \\<or>\n                          m = Nonce NB \\<or> A \\<in> bad) =\n                         (A \\<in> bad)\n 5. \\<And>evs3 Aa B NA NB.\n       \\<lbrakk>m = Key (priEK A) \\<or>\n                m = Key (priSK A) \\<or> m = Key (shrK A);\n        evs3 \\<in> ns_public;\n        (m \\<in> parts (knows Spy evs3)) = (A \\<in> bad);\n        Says Aa B (Crypt (pubK B) \\<lbrace>Nonce NA, Agent Aa\\<rbrace>)\n        \\<in> set evs3;\n        Gets Aa (Crypt (pubK Aa) \\<lbrace>Nonce NA, Nonce NB\\<rbrace>)\n        \\<in> set evs3\\<rbrakk>\n       \\<Longrightarrow> (m = Crypt (pubK B) (Nonce NB) \\<or>\n                          m = Nonce NB \\<or> A \\<in> bad) =\n                         (A \\<in> bad)", "apply (drule Fake_parts_insert [THEN subsetD], simp)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>evsf X.\n       \\<lbrakk>m = Key (priEK A) \\<or>\n                m = Key (priSK A) \\<or> m = Key (shrK A);\n        evsf \\<in> ns_public; A \\<notin> bad;\n        m \\<notin> parts (knows Spy evsf); A \\<notin> bad;\n        m \\<in> parts (insert X (knows Spy evsf));\n        m \\<in> synth (analz (knows Spy evsf)) \\<union>\n                parts (knows Spy evsf)\\<rbrakk>\n       \\<Longrightarrow> A \\<in> bad\n 2. m = Key (priEK A) \\<or>\n    m = Key (priSK A) \\<or> m = Key (shrK A) \\<Longrightarrow>\n    (m \\<in> Key ` invKey ` pubK ` bad \\<or>\n     m \\<in> Key ` invKey ` pubSK ` bad \\<or>\n     m \\<in> Key ` shrK ` bad \\<or>\n     m \\<in> Key ` range pubK \\<or> m \\<in> Key ` range pubSK) =\n    (A \\<in> bad)\n 3. \\<And>evs1 NA Aa B.\n       \\<lbrakk>m = Key (priEK A) \\<or>\n                m = Key (priSK A) \\<or> m = Key (shrK A);\n        evs1 \\<in> ns_public;\n        (m \\<in> parts (knows Spy evs1)) = (A \\<in> bad);\n        Nonce NA \\<notin> used evs1\\<rbrakk>\n       \\<Longrightarrow> (m =\n                          Crypt (pubK B)\n                           \\<lbrace>Nonce NA, Agent Aa\\<rbrace> \\<or>\n                          m = \\<lbrace>Nonce NA, Agent Aa\\<rbrace> \\<or>\n                          m = Nonce NA \\<or>\n                          m = Agent Aa \\<or> A \\<in> bad) =\n                         (A \\<in> bad)\n 4. \\<And>evs2 NB B NA Aa.\n       \\<lbrakk>m = Key (priEK A) \\<or>\n                m = Key (priSK A) \\<or> m = Key (shrK A);\n        evs2 \\<in> ns_public;\n        (m \\<in> parts (knows Spy evs2)) = (A \\<in> bad);\n        Nonce NB \\<notin> used evs2;\n        Gets B (Crypt (pubK B) \\<lbrace>Nonce NA, Agent Aa\\<rbrace>)\n        \\<in> set evs2\\<rbrakk>\n       \\<Longrightarrow> (m =\n                          Crypt (pubK Aa)\n                           \\<lbrace>Nonce NA, Nonce NB\\<rbrace> \\<or>\n                          m = \\<lbrace>Nonce NA, Nonce NB\\<rbrace> \\<or>\n                          m = Nonce NA \\<or>\n                          m = Nonce NB \\<or> A \\<in> bad) =\n                         (A \\<in> bad)\n 5. \\<And>evs3 Aa B NA NB.\n       \\<lbrakk>m = Key (priEK A) \\<or>\n                m = Key (priSK A) \\<or> m = Key (shrK A);\n        evs3 \\<in> ns_public;\n        (m \\<in> parts (knows Spy evs3)) = (A \\<in> bad);\n        Says Aa B (Crypt (pubK B) \\<lbrace>Nonce NA, Agent Aa\\<rbrace>)\n        \\<in> set evs3;\n        Gets Aa (Crypt (pubK Aa) \\<lbrace>Nonce NA, Nonce NB\\<rbrace>)\n        \\<in> set evs3\\<rbrakk>\n       \\<Longrightarrow> (m = Crypt (pubK B) (Nonce NB) \\<or>\n                          m = Nonce NB \\<or> A \\<in> bad) =\n                         (A \\<in> bad)", "txt\\<open>@{subgoals [display,indent=1,goals_limit=1]}\\<close>"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>evsf X.\n       \\<lbrakk>m = Key (priEK A) \\<or>\n                m = Key (priSK A) \\<or> m = Key (shrK A);\n        evsf \\<in> ns_public; A \\<notin> bad;\n        m \\<notin> parts (knows Spy evsf); A \\<notin> bad;\n        m \\<in> parts (insert X (knows Spy evsf));\n        m \\<in> synth (analz (knows Spy evsf)) \\<union>\n                parts (knows Spy evsf)\\<rbrakk>\n       \\<Longrightarrow> A \\<in> bad\n 2. m = Key (priEK A) \\<or>\n    m = Key (priSK A) \\<or> m = Key (shrK A) \\<Longrightarrow>\n    (m \\<in> Key ` invKey ` pubK ` bad \\<or>\n     m \\<in> Key ` invKey ` pubSK ` bad \\<or>\n     m \\<in> Key ` shrK ` bad \\<or>\n     m \\<in> Key ` range pubK \\<or> m \\<in> Key ` range pubSK) =\n    (A \\<in> bad)\n 3. \\<And>evs1 NA Aa B.\n       \\<lbrakk>m = Key (priEK A) \\<or>\n                m = Key (priSK A) \\<or> m = Key (shrK A);\n        evs1 \\<in> ns_public;\n        (m \\<in> parts (knows Spy evs1)) = (A \\<in> bad);\n        Nonce NA \\<notin> used evs1\\<rbrakk>\n       \\<Longrightarrow> (m =\n                          Crypt (pubK B)\n                           \\<lbrace>Nonce NA, Agent Aa\\<rbrace> \\<or>\n                          m = \\<lbrace>Nonce NA, Agent Aa\\<rbrace> \\<or>\n                          m = Nonce NA \\<or>\n                          m = Agent Aa \\<or> A \\<in> bad) =\n                         (A \\<in> bad)\n 4. \\<And>evs2 NB B NA Aa.\n       \\<lbrakk>m = Key (priEK A) \\<or>\n                m = Key (priSK A) \\<or> m = Key (shrK A);\n        evs2 \\<in> ns_public;\n        (m \\<in> parts (knows Spy evs2)) = (A \\<in> bad);\n        Nonce NB \\<notin> used evs2;\n        Gets B (Crypt (pubK B) \\<lbrace>Nonce NA, Agent Aa\\<rbrace>)\n        \\<in> set evs2\\<rbrakk>\n       \\<Longrightarrow> (m =\n                          Crypt (pubK Aa)\n                           \\<lbrace>Nonce NA, Nonce NB\\<rbrace> \\<or>\n                          m = \\<lbrace>Nonce NA, Nonce NB\\<rbrace> \\<or>\n                          m = Nonce NA \\<or>\n                          m = Nonce NB \\<or> A \\<in> bad) =\n                         (A \\<in> bad)\n 5. \\<And>evs3 Aa B NA NB.\n       \\<lbrakk>m = Key (priEK A) \\<or>\n                m = Key (priSK A) \\<or> m = Key (shrK A);\n        evs3 \\<in> ns_public;\n        (m \\<in> parts (knows Spy evs3)) = (A \\<in> bad);\n        Says Aa B (Crypt (pubK B) \\<lbrace>Nonce NA, Agent Aa\\<rbrace>)\n        \\<in> set evs3;\n        Gets Aa (Crypt (pubK Aa) \\<lbrace>Nonce NA, Nonce NB\\<rbrace>)\n        \\<in> set evs3\\<rbrakk>\n       \\<Longrightarrow> (m = Crypt (pubK B) (Nonce NB) \\<or>\n                          m = Nonce NB \\<or> A \\<in> bad) =\n                         (A \\<in> bad)", "apply (blast dest: analz_into_parts)"], ["proof (prove)\ngoal (4 subgoals):\n 1. m = Key (priEK A) \\<or>\n    m = Key (priSK A) \\<or> m = Key (shrK A) \\<Longrightarrow>\n    (m \\<in> Key ` invKey ` pubK ` bad \\<or>\n     m \\<in> Key ` invKey ` pubSK ` bad \\<or>\n     m \\<in> Key ` shrK ` bad \\<or>\n     m \\<in> Key ` range pubK \\<or> m \\<in> Key ` range pubSK) =\n    (A \\<in> bad)\n 2. \\<And>evs1 NA Aa B.\n       \\<lbrakk>m = Key (priEK A) \\<or>\n                m = Key (priSK A) \\<or> m = Key (shrK A);\n        evs1 \\<in> ns_public;\n        (m \\<in> parts (knows Spy evs1)) = (A \\<in> bad);\n        Nonce NA \\<notin> used evs1\\<rbrakk>\n       \\<Longrightarrow> (m =\n                          Crypt (pubK B)\n                           \\<lbrace>Nonce NA, Agent Aa\\<rbrace> \\<or>\n                          m = \\<lbrace>Nonce NA, Agent Aa\\<rbrace> \\<or>\n                          m = Nonce NA \\<or>\n                          m = Agent Aa \\<or> A \\<in> bad) =\n                         (A \\<in> bad)\n 3. \\<And>evs2 NB B NA Aa.\n       \\<lbrakk>m = Key (priEK A) \\<or>\n                m = Key (priSK A) \\<or> m = Key (shrK A);\n        evs2 \\<in> ns_public;\n        (m \\<in> parts (knows Spy evs2)) = (A \\<in> bad);\n        Nonce NB \\<notin> used evs2;\n        Gets B (Crypt (pubK B) \\<lbrace>Nonce NA, Agent Aa\\<rbrace>)\n        \\<in> set evs2\\<rbrakk>\n       \\<Longrightarrow> (m =\n                          Crypt (pubK Aa)\n                           \\<lbrace>Nonce NA, Nonce NB\\<rbrace> \\<or>\n                          m = \\<lbrace>Nonce NA, Nonce NB\\<rbrace> \\<or>\n                          m = Nonce NA \\<or>\n                          m = Nonce NB \\<or> A \\<in> bad) =\n                         (A \\<in> bad)\n 4. \\<And>evs3 Aa B NA NB.\n       \\<lbrakk>m = Key (priEK A) \\<or>\n                m = Key (priSK A) \\<or> m = Key (shrK A);\n        evs3 \\<in> ns_public;\n        (m \\<in> parts (knows Spy evs3)) = (A \\<in> bad);\n        Says Aa B (Crypt (pubK B) \\<lbrace>Nonce NA, Agent Aa\\<rbrace>)\n        \\<in> set evs3;\n        Gets Aa (Crypt (pubK Aa) \\<lbrace>Nonce NA, Nonce NB\\<rbrace>)\n        \\<in> set evs3\\<rbrakk>\n       \\<Longrightarrow> (m = Crypt (pubK B) (Nonce NB) \\<or>\n                          m = Nonce NB \\<or> A \\<in> bad) =\n                         (A \\<in> bad)", "apply force+"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "text\\<open>Seeking a proof of @{thm NS_Spy_see_staticSecret} using an alternative, \"specialisation\" strategy\\<close>"], ["", "lemma NS_no_Notes:\n \"evs \\<in> ns_public \\<Longrightarrow> Notes A X \\<notin> set evs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. evs \\<in> ns_public \\<Longrightarrow> Notes A X \\<notin> set evs", "apply (erule ns_public.induct)"], ["proof (prove)\ngoal (6 subgoals):\n 1. Notes A X \\<notin> set []\n 2. \\<And>evsf Xa B.\n       \\<lbrakk>evsf \\<in> ns_public; Notes A X \\<notin> set evsf;\n        Xa \\<in> synth (analz (knows Spy evsf))\\<rbrakk>\n       \\<Longrightarrow> Notes A X \\<notin> set (Says Spy B Xa # evsf)\n 3. \\<And>evsr Aa B Xa.\n       \\<lbrakk>evsr \\<in> ns_public; Notes A X \\<notin> set evsr;\n        Says Aa B Xa \\<in> set evsr\\<rbrakk>\n       \\<Longrightarrow> Notes A X \\<notin> set (Gets B Xa # evsr)\n 4. \\<And>evs1 NA Aa B.\n       \\<lbrakk>evs1 \\<in> ns_public; Notes A X \\<notin> set evs1;\n        Nonce NA \\<notin> used evs1\\<rbrakk>\n       \\<Longrightarrow> Notes A X\n                         \\<notin> set (Says Aa B\n  (Crypt (pubK B) \\<lbrace>Nonce NA, Agent Aa\\<rbrace>) #\n evs1)\n 5. \\<And>evs2 NB B NA Aa.\n       \\<lbrakk>evs2 \\<in> ns_public; Notes A X \\<notin> set evs2;\n        Nonce NB \\<notin> used evs2;\n        Gets B (Crypt (pubK B) \\<lbrace>Nonce NA, Agent Aa\\<rbrace>)\n        \\<in> set evs2\\<rbrakk>\n       \\<Longrightarrow> Notes A X\n                         \\<notin> set (Says B Aa\n  (Crypt (pubK Aa) \\<lbrace>Nonce NA, Nonce NB\\<rbrace>) #\n evs2)\n 6. \\<And>evs3 Aa B NA NB.\n       \\<lbrakk>evs3 \\<in> ns_public; Notes A X \\<notin> set evs3;\n        Says Aa B (Crypt (pubK B) \\<lbrace>Nonce NA, Agent Aa\\<rbrace>)\n        \\<in> set evs3;\n        Gets Aa (Crypt (pubK Aa) \\<lbrace>Nonce NA, Nonce NB\\<rbrace>)\n        \\<in> set evs3\\<rbrakk>\n       \\<Longrightarrow> Notes A X\n                         \\<notin> set (Says Aa B\n  (Crypt (pubK B) (Nonce NB)) #\n evs3)", "apply simp_all"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma NS_staticSecret_parts_Spy_weak:\n\"\\<lbrakk>m \\<in> parts (knows Spy evs); m \\<in> staticSecret A;\n  evs \\<in> ns_public\\<rbrakk> \\<Longrightarrow> A \\<in> bad \\<or>\n (\\<exists>C B X. Says C B X \\<in> set evs \\<and> m \\<in> parts{X})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>m \\<in> parts (knows Spy evs); m \\<in> staticSecret A;\n     evs \\<in> ns_public\\<rbrakk>\n    \\<Longrightarrow> A \\<in> bad \\<or>\n                      (\\<exists>C B X.\n                          Says C B X \\<in> set evs \\<and> m \\<in> parts {X})", "apply (blast dest: staticSecret_parts_Spy NS_no_Notes)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma NS_Says_staticSecret:\n \"\\<lbrakk>Says A B X \\<in> set evs; m \\<in> staticSecret C; m \\<in> parts{X};\n   evs \\<in> ns_public\\<rbrakk> \\<Longrightarrow> A=Spy\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Says A B X \\<in> set evs; m \\<in> staticSecret C;\n     m \\<in> parts {X}; evs \\<in> ns_public\\<rbrakk>\n    \\<Longrightarrow> A = Spy", "apply (erule rev_mp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>m \\<in> staticSecret C; m \\<in> parts {X};\n     evs \\<in> ns_public\\<rbrakk>\n    \\<Longrightarrow> Says A B X \\<in> set evs \\<longrightarrow> A = Spy", "apply (erule ns_public.induct)"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<lbrakk>m \\<in> staticSecret C; m \\<in> parts {X}\\<rbrakk>\n    \\<Longrightarrow> Says A B X \\<in> set [] \\<longrightarrow> A = Spy\n 2. \\<And>evsf Xa Ba.\n       \\<lbrakk>m \\<in> staticSecret C; m \\<in> parts {X};\n        evsf \\<in> ns_public;\n        Says A B X \\<in> set evsf \\<longrightarrow> A = Spy;\n        Xa \\<in> synth (analz (knows Spy evsf))\\<rbrakk>\n       \\<Longrightarrow> Says A B X\n                         \\<in> set (Says Spy Ba Xa # evsf) \\<longrightarrow>\n                         A = Spy\n 3. \\<And>evsr Aa Ba Xa.\n       \\<lbrakk>m \\<in> staticSecret C; m \\<in> parts {X};\n        evsr \\<in> ns_public;\n        Says A B X \\<in> set evsr \\<longrightarrow> A = Spy;\n        Says Aa Ba Xa \\<in> set evsr\\<rbrakk>\n       \\<Longrightarrow> Says A B X\n                         \\<in> set (Gets Ba Xa # evsr) \\<longrightarrow>\n                         A = Spy\n 4. \\<And>evs1 NA Aa Ba.\n       \\<lbrakk>m \\<in> staticSecret C; m \\<in> parts {X};\n        evs1 \\<in> ns_public;\n        Says A B X \\<in> set evs1 \\<longrightarrow> A = Spy;\n        Nonce NA \\<notin> used evs1\\<rbrakk>\n       \\<Longrightarrow> Says A B X\n                         \\<in> set (Says Aa Ba\n                                     (Crypt (pubK Ba)\n \\<lbrace>Nonce NA, Agent Aa\\<rbrace>) #\n                                    evs1) \\<longrightarrow>\n                         A = Spy\n 5. \\<And>evs2 NB Ba NA Aa.\n       \\<lbrakk>m \\<in> staticSecret C; m \\<in> parts {X};\n        evs2 \\<in> ns_public;\n        Says A B X \\<in> set evs2 \\<longrightarrow> A = Spy;\n        Nonce NB \\<notin> used evs2;\n        Gets Ba (Crypt (pubK Ba) \\<lbrace>Nonce NA, Agent Aa\\<rbrace>)\n        \\<in> set evs2\\<rbrakk>\n       \\<Longrightarrow> Says A B X\n                         \\<in> set (Says Ba Aa\n                                     (Crypt (pubK Aa)\n \\<lbrace>Nonce NA, Nonce NB\\<rbrace>) #\n                                    evs2) \\<longrightarrow>\n                         A = Spy\n 6. \\<And>evs3 Aa Ba NA NB.\n       \\<lbrakk>m \\<in> staticSecret C; m \\<in> parts {X};\n        evs3 \\<in> ns_public;\n        Says A B X \\<in> set evs3 \\<longrightarrow> A = Spy;\n        Says Aa Ba (Crypt (pubK Ba) \\<lbrace>Nonce NA, Agent Aa\\<rbrace>)\n        \\<in> set evs3;\n        Gets Aa (Crypt (pubK Aa) \\<lbrace>Nonce NA, Nonce NB\\<rbrace>)\n        \\<in> set evs3\\<rbrakk>\n       \\<Longrightarrow> Says A B X\n                         \\<in> set (Says Aa Ba\n                                     (Crypt (pubK Ba) (Nonce NB)) #\n                                    evs3) \\<longrightarrow>\n                         A = Spy", "apply force+"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "text\\<open>This generalises @{thm Key_synth_eq}\\<close>"], ["", "lemma staticSecret_synth_eq: \n\"m \\<in> staticSecret A \\<Longrightarrow> (m \\<in> synth H) = (m \\<in> H)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. m \\<in> staticSecret A \\<Longrightarrow> (m \\<in> synth H) = (m \\<in> H)", "apply force"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma NS_Says_Spy_staticSecret:\n \"\\<lbrakk>Says Spy B X \\<in> set evs; m \\<in> parts{X};\n   m \\<in> staticSecret A; evs \\<in> ns_public\\<rbrakk> \\<Longrightarrow> A \\<in> bad\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Says Spy B X \\<in> set evs; m \\<in> parts {X};\n     m \\<in> staticSecret A; evs \\<in> ns_public\\<rbrakk>\n    \\<Longrightarrow> A \\<in> bad", "(*\ntxt{*Alternative start to appreciate that it reduces to @{thm NS_Spy_see_staticSecret}*}\napply (erule rev_mp, erule ns_public.induct)\napply (simp_all del: staticSecret_def)\napply clarify \ntxt{*@{subgoals [display,indent=1,goals_limit=1]}*}\napply (drule Fake_parts_sing [THEN subsetD], simp) \ntxt{*@{subgoals [display,indent=1,goals_limit=1]}*}\napply (simp del: staticSecret_def add: staticSecret_synth_eq)\ntxt{*@{subgoals [display,indent=1,goals_limit=1]}*}\noops \n*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Says Spy B X \\<in> set evs; m \\<in> parts {X};\n     m \\<in> staticSecret A; evs \\<in> ns_public\\<rbrakk>\n    \\<Longrightarrow> A \\<in> bad", "apply (drule Says_imp_knows_Spy [THEN parts.Inj])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>m \\<in> parts {X}; m \\<in> staticSecret A; evs \\<in> ns_public;\n     X \\<in> parts (knows Spy evs)\\<rbrakk>\n    \\<Longrightarrow> A \\<in> bad", "txt\\<open>@{subgoals [display,indent=1,goals_limit=1]}\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>m \\<in> parts {X}; m \\<in> staticSecret A; evs \\<in> ns_public;\n     X \\<in> parts (knows Spy evs)\\<rbrakk>\n    \\<Longrightarrow> A \\<in> bad", "apply (drule parts_trans, simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>m \\<in> staticSecret A; evs \\<in> ns_public;\n     X \\<in> parts (knows Spy evs); m \\<in> parts (knows Spy evs)\\<rbrakk>\n    \\<Longrightarrow> A \\<in> bad", "apply (rotate_tac -1)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>m \\<in> parts (knows Spy evs); m \\<in> staticSecret A;\n     evs \\<in> ns_public; X \\<in> parts (knows Spy evs)\\<rbrakk>\n    \\<Longrightarrow> A \\<in> bad", "txt\\<open>@{subgoals [display,indent=1,goals_limit=1]}\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>m \\<in> parts (knows Spy evs); m \\<in> staticSecret A;\n     evs \\<in> ns_public; X \\<in> parts (knows Spy evs)\\<rbrakk>\n    \\<Longrightarrow> A \\<in> bad", "apply (erule rev_mp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>m \\<in> staticSecret A; evs \\<in> ns_public;\n     X \\<in> parts (knows Spy evs)\\<rbrakk>\n    \\<Longrightarrow> m \\<in> parts (knows Spy evs) \\<longrightarrow>\n                      A \\<in> bad", "apply (erule ns_public.induct)"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<lbrakk>m \\<in> staticSecret A; X \\<in> parts (knows Spy evs)\\<rbrakk>\n    \\<Longrightarrow> m \\<in> parts (knows Spy []) \\<longrightarrow>\n                      A \\<in> bad\n 2. \\<And>evsf Xa B.\n       \\<lbrakk>m \\<in> staticSecret A; X \\<in> parts (knows Spy evs);\n        evsf \\<in> ns_public;\n        m \\<in> parts (knows Spy evsf) \\<longrightarrow> A \\<in> bad;\n        Xa \\<in> synth (analz (knows Spy evsf))\\<rbrakk>\n       \\<Longrightarrow> m \\<in> parts\n                                  (knows Spy\n                                    (Says Spy B Xa #\n                                     evsf)) \\<longrightarrow>\n                         A \\<in> bad\n 3. \\<And>evsr Aa B Xa.\n       \\<lbrakk>m \\<in> staticSecret A; X \\<in> parts (knows Spy evs);\n        evsr \\<in> ns_public;\n        m \\<in> parts (knows Spy evsr) \\<longrightarrow> A \\<in> bad;\n        Says Aa B Xa \\<in> set evsr\\<rbrakk>\n       \\<Longrightarrow> m \\<in> parts\n                                  (knows Spy\n                                    (Gets B Xa # evsr)) \\<longrightarrow>\n                         A \\<in> bad\n 4. \\<And>evs1 NA Aa B.\n       \\<lbrakk>m \\<in> staticSecret A; X \\<in> parts (knows Spy evs);\n        evs1 \\<in> ns_public;\n        m \\<in> parts (knows Spy evs1) \\<longrightarrow> A \\<in> bad;\n        Nonce NA \\<notin> used evs1\\<rbrakk>\n       \\<Longrightarrow> m \\<in> parts\n                                  (knows Spy\n                                    (Says Aa B\n(Crypt (pubK B) \\<lbrace>Nonce NA, Agent Aa\\<rbrace>) #\n                                     evs1)) \\<longrightarrow>\n                         A \\<in> bad\n 5. \\<And>evs2 NB B NA Aa.\n       \\<lbrakk>m \\<in> staticSecret A; X \\<in> parts (knows Spy evs);\n        evs2 \\<in> ns_public;\n        m \\<in> parts (knows Spy evs2) \\<longrightarrow> A \\<in> bad;\n        Nonce NB \\<notin> used evs2;\n        Gets B (Crypt (pubK B) \\<lbrace>Nonce NA, Agent Aa\\<rbrace>)\n        \\<in> set evs2\\<rbrakk>\n       \\<Longrightarrow> m \\<in> parts\n                                  (knows Spy\n                                    (Says B Aa\n(Crypt (pubK Aa) \\<lbrace>Nonce NA, Nonce NB\\<rbrace>) #\n                                     evs2)) \\<longrightarrow>\n                         A \\<in> bad\n 6. \\<And>evs3 Aa B NA NB.\n       \\<lbrakk>m \\<in> staticSecret A; X \\<in> parts (knows Spy evs);\n        evs3 \\<in> ns_public;\n        m \\<in> parts (knows Spy evs3) \\<longrightarrow> A \\<in> bad;\n        Says Aa B (Crypt (pubK B) \\<lbrace>Nonce NA, Agent Aa\\<rbrace>)\n        \\<in> set evs3;\n        Gets Aa (Crypt (pubK Aa) \\<lbrace>Nonce NA, Nonce NB\\<rbrace>)\n        \\<in> set evs3\\<rbrakk>\n       \\<Longrightarrow> m \\<in> parts\n                                  (knows Spy\n                                    (Says Aa B (Crypt (pubK B) (Nonce NB)) #\n                                     evs3)) \\<longrightarrow>\n                         A \\<in> bad", "apply simp_all"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<lbrakk>m = Key (priEK A) \\<or>\n             m = Key (priSK A) \\<or> m = Key (shrK A);\n     X \\<in> parts (knows Spy evs)\\<rbrakk>\n    \\<Longrightarrow> (m \\<in> Key ` invKey ` pubK ` bad \\<longrightarrow>\n                       A \\<in> bad) \\<and>\n                      (m \\<in> Key ` invKey ` pubSK ` bad \\<longrightarrow>\n                       A \\<in> bad) \\<and>\n                      (m \\<in> Key ` shrK ` bad \\<longrightarrow>\n                       A \\<in> bad) \\<and>\n                      (m \\<in> Key ` range pubK \\<longrightarrow>\n                       A \\<in> bad) \\<and>\n                      (m \\<in> Key ` range pubSK \\<longrightarrow>\n                       A \\<in> bad)\n 2. \\<And>evsf Xa.\n       \\<lbrakk>m = Key (priEK A) \\<or>\n                m = Key (priSK A) \\<or> m = Key (shrK A);\n        X \\<in> parts (knows Spy evs); evsf \\<in> ns_public;\n        m \\<in> parts (knows Spy evsf) \\<longrightarrow> A \\<in> bad;\n        Xa \\<in> synth (analz (knows Spy evsf))\\<rbrakk>\n       \\<Longrightarrow> m \\<in> parts\n                                  (insert Xa\n                                    (knows Spy evsf)) \\<longrightarrow>\n                         A \\<in> bad\n 3. \\<And>evs1 NA Aa B.\n       \\<lbrakk>m = Key (priEK A) \\<or>\n                m = Key (priSK A) \\<or> m = Key (shrK A);\n        X \\<in> parts (knows Spy evs); evs1 \\<in> ns_public;\n        m \\<in> parts (knows Spy evs1) \\<longrightarrow> A \\<in> bad;\n        Nonce NA \\<notin> used evs1\\<rbrakk>\n       \\<Longrightarrow> (m =\n                          Crypt (pubK B)\n                           \\<lbrace>Nonce NA,\n                             Agent Aa\\<rbrace> \\<longrightarrow>\n                          A \\<in> bad) \\<and>\n                         (m =\n                          \\<lbrace>Nonce NA,\n                            Agent Aa\\<rbrace> \\<longrightarrow>\n                          A \\<in> bad) \\<and>\n                         (m = Nonce NA \\<longrightarrow> A \\<in> bad) \\<and>\n                         (m = Agent Aa \\<longrightarrow> A \\<in> bad)\n 4. \\<And>evs2 NB B NA Aa.\n       \\<lbrakk>m = Key (priEK A) \\<or>\n                m = Key (priSK A) \\<or> m = Key (shrK A);\n        X \\<in> parts (knows Spy evs); evs2 \\<in> ns_public;\n        m \\<in> parts (knows Spy evs2) \\<longrightarrow> A \\<in> bad;\n        Nonce NB \\<notin> used evs2;\n        Gets B (Crypt (pubK B) \\<lbrace>Nonce NA, Agent Aa\\<rbrace>)\n        \\<in> set evs2\\<rbrakk>\n       \\<Longrightarrow> (m =\n                          Crypt (pubK Aa)\n                           \\<lbrace>Nonce NA,\n                             Nonce NB\\<rbrace> \\<longrightarrow>\n                          A \\<in> bad) \\<and>\n                         (m =\n                          \\<lbrace>Nonce NA,\n                            Nonce NB\\<rbrace> \\<longrightarrow>\n                          A \\<in> bad) \\<and>\n                         (m = Nonce NA \\<longrightarrow> A \\<in> bad) \\<and>\n                         (m = Nonce NB \\<longrightarrow> A \\<in> bad)\n 5. \\<And>evs3 Aa B NA NB.\n       \\<lbrakk>m = Key (priEK A) \\<or>\n                m = Key (priSK A) \\<or> m = Key (shrK A);\n        X \\<in> parts (knows Spy evs); evs3 \\<in> ns_public;\n        m \\<in> parts (knows Spy evs3) \\<longrightarrow> A \\<in> bad;\n        Says Aa B (Crypt (pubK B) \\<lbrace>Nonce NA, Agent Aa\\<rbrace>)\n        \\<in> set evs3;\n        Gets Aa (Crypt (pubK Aa) \\<lbrace>Nonce NA, Nonce NB\\<rbrace>)\n        \\<in> set evs3\\<rbrakk>\n       \\<Longrightarrow> (m = Crypt (pubK B) (Nonce NB) \\<longrightarrow>\n                          A \\<in> bad) \\<and>\n                         (m = Nonce NB \\<longrightarrow> A \\<in> bad)", "prefer 2"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>evsf Xa.\n       \\<lbrakk>m = Key (priEK A) \\<or>\n                m = Key (priSK A) \\<or> m = Key (shrK A);\n        X \\<in> parts (knows Spy evs); evsf \\<in> ns_public;\n        m \\<in> parts (knows Spy evsf) \\<longrightarrow> A \\<in> bad;\n        Xa \\<in> synth (analz (knows Spy evsf))\\<rbrakk>\n       \\<Longrightarrow> m \\<in> parts\n                                  (insert Xa\n                                    (knows Spy evsf)) \\<longrightarrow>\n                         A \\<in> bad\n 2. \\<lbrakk>m = Key (priEK A) \\<or>\n             m = Key (priSK A) \\<or> m = Key (shrK A);\n     X \\<in> parts (knows Spy evs)\\<rbrakk>\n    \\<Longrightarrow> (m \\<in> Key ` invKey ` pubK ` bad \\<longrightarrow>\n                       A \\<in> bad) \\<and>\n                      (m \\<in> Key ` invKey ` pubSK ` bad \\<longrightarrow>\n                       A \\<in> bad) \\<and>\n                      (m \\<in> Key ` shrK ` bad \\<longrightarrow>\n                       A \\<in> bad) \\<and>\n                      (m \\<in> Key ` range pubK \\<longrightarrow>\n                       A \\<in> bad) \\<and>\n                      (m \\<in> Key ` range pubSK \\<longrightarrow>\n                       A \\<in> bad)\n 3. \\<And>evs1 NA Aa B.\n       \\<lbrakk>m = Key (priEK A) \\<or>\n                m = Key (priSK A) \\<or> m = Key (shrK A);\n        X \\<in> parts (knows Spy evs); evs1 \\<in> ns_public;\n        m \\<in> parts (knows Spy evs1) \\<longrightarrow> A \\<in> bad;\n        Nonce NA \\<notin> used evs1\\<rbrakk>\n       \\<Longrightarrow> (m =\n                          Crypt (pubK B)\n                           \\<lbrace>Nonce NA,\n                             Agent Aa\\<rbrace> \\<longrightarrow>\n                          A \\<in> bad) \\<and>\n                         (m =\n                          \\<lbrace>Nonce NA,\n                            Agent Aa\\<rbrace> \\<longrightarrow>\n                          A \\<in> bad) \\<and>\n                         (m = Nonce NA \\<longrightarrow> A \\<in> bad) \\<and>\n                         (m = Agent Aa \\<longrightarrow> A \\<in> bad)\n 4. \\<And>evs2 NB B NA Aa.\n       \\<lbrakk>m = Key (priEK A) \\<or>\n                m = Key (priSK A) \\<or> m = Key (shrK A);\n        X \\<in> parts (knows Spy evs); evs2 \\<in> ns_public;\n        m \\<in> parts (knows Spy evs2) \\<longrightarrow> A \\<in> bad;\n        Nonce NB \\<notin> used evs2;\n        Gets B (Crypt (pubK B) \\<lbrace>Nonce NA, Agent Aa\\<rbrace>)\n        \\<in> set evs2\\<rbrakk>\n       \\<Longrightarrow> (m =\n                          Crypt (pubK Aa)\n                           \\<lbrace>Nonce NA,\n                             Nonce NB\\<rbrace> \\<longrightarrow>\n                          A \\<in> bad) \\<and>\n                         (m =\n                          \\<lbrace>Nonce NA,\n                            Nonce NB\\<rbrace> \\<longrightarrow>\n                          A \\<in> bad) \\<and>\n                         (m = Nonce NA \\<longrightarrow> A \\<in> bad) \\<and>\n                         (m = Nonce NB \\<longrightarrow> A \\<in> bad)\n 5. \\<And>evs3 Aa B NA NB.\n       \\<lbrakk>m = Key (priEK A) \\<or>\n                m = Key (priSK A) \\<or> m = Key (shrK A);\n        X \\<in> parts (knows Spy evs); evs3 \\<in> ns_public;\n        m \\<in> parts (knows Spy evs3) \\<longrightarrow> A \\<in> bad;\n        Says Aa B (Crypt (pubK B) \\<lbrace>Nonce NA, Agent Aa\\<rbrace>)\n        \\<in> set evs3;\n        Gets Aa (Crypt (pubK Aa) \\<lbrace>Nonce NA, Nonce NB\\<rbrace>)\n        \\<in> set evs3\\<rbrakk>\n       \\<Longrightarrow> (m = Crypt (pubK B) (Nonce NB) \\<longrightarrow>\n                          A \\<in> bad) \\<and>\n                         (m = Nonce NB \\<longrightarrow> A \\<in> bad)", "apply (cases \"A:bad\")"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<And>evsf Xa.\n       \\<lbrakk>m = Key (priEK A) \\<or>\n                m = Key (priSK A) \\<or> m = Key (shrK A);\n        X \\<in> parts (knows Spy evs); evsf \\<in> ns_public;\n        m \\<in> parts (knows Spy evsf) \\<longrightarrow> A \\<in> bad;\n        Xa \\<in> synth (analz (knows Spy evsf)); A \\<in> bad\\<rbrakk>\n       \\<Longrightarrow> m \\<in> parts\n                                  (insert Xa\n                                    (knows Spy evsf)) \\<longrightarrow>\n                         A \\<in> bad\n 2. \\<And>evsf Xa.\n       \\<lbrakk>m = Key (priEK A) \\<or>\n                m = Key (priSK A) \\<or> m = Key (shrK A);\n        X \\<in> parts (knows Spy evs); evsf \\<in> ns_public;\n        m \\<in> parts (knows Spy evsf) \\<longrightarrow> A \\<in> bad;\n        Xa \\<in> synth (analz (knows Spy evsf)); A \\<notin> bad\\<rbrakk>\n       \\<Longrightarrow> m \\<in> parts\n                                  (insert Xa\n                                    (knows Spy evsf)) \\<longrightarrow>\n                         A \\<in> bad\n 3. \\<lbrakk>m = Key (priEK A) \\<or>\n             m = Key (priSK A) \\<or> m = Key (shrK A);\n     X \\<in> parts (knows Spy evs)\\<rbrakk>\n    \\<Longrightarrow> (m \\<in> Key ` invKey ` pubK ` bad \\<longrightarrow>\n                       A \\<in> bad) \\<and>\n                      (m \\<in> Key ` invKey ` pubSK ` bad \\<longrightarrow>\n                       A \\<in> bad) \\<and>\n                      (m \\<in> Key ` shrK ` bad \\<longrightarrow>\n                       A \\<in> bad) \\<and>\n                      (m \\<in> Key ` range pubK \\<longrightarrow>\n                       A \\<in> bad) \\<and>\n                      (m \\<in> Key ` range pubSK \\<longrightarrow>\n                       A \\<in> bad)\n 4. \\<And>evs1 NA Aa B.\n       \\<lbrakk>m = Key (priEK A) \\<or>\n                m = Key (priSK A) \\<or> m = Key (shrK A);\n        X \\<in> parts (knows Spy evs); evs1 \\<in> ns_public;\n        m \\<in> parts (knows Spy evs1) \\<longrightarrow> A \\<in> bad;\n        Nonce NA \\<notin> used evs1\\<rbrakk>\n       \\<Longrightarrow> (m =\n                          Crypt (pubK B)\n                           \\<lbrace>Nonce NA,\n                             Agent Aa\\<rbrace> \\<longrightarrow>\n                          A \\<in> bad) \\<and>\n                         (m =\n                          \\<lbrace>Nonce NA,\n                            Agent Aa\\<rbrace> \\<longrightarrow>\n                          A \\<in> bad) \\<and>\n                         (m = Nonce NA \\<longrightarrow> A \\<in> bad) \\<and>\n                         (m = Agent Aa \\<longrightarrow> A \\<in> bad)\n 5. \\<And>evs2 NB B NA Aa.\n       \\<lbrakk>m = Key (priEK A) \\<or>\n                m = Key (priSK A) \\<or> m = Key (shrK A);\n        X \\<in> parts (knows Spy evs); evs2 \\<in> ns_public;\n        m \\<in> parts (knows Spy evs2) \\<longrightarrow> A \\<in> bad;\n        Nonce NB \\<notin> used evs2;\n        Gets B (Crypt (pubK B) \\<lbrace>Nonce NA, Agent Aa\\<rbrace>)\n        \\<in> set evs2\\<rbrakk>\n       \\<Longrightarrow> (m =\n                          Crypt (pubK Aa)\n                           \\<lbrace>Nonce NA,\n                             Nonce NB\\<rbrace> \\<longrightarrow>\n                          A \\<in> bad) \\<and>\n                         (m =\n                          \\<lbrace>Nonce NA,\n                            Nonce NB\\<rbrace> \\<longrightarrow>\n                          A \\<in> bad) \\<and>\n                         (m = Nonce NA \\<longrightarrow> A \\<in> bad) \\<and>\n                         (m = Nonce NB \\<longrightarrow> A \\<in> bad)\n 6. \\<And>evs3 Aa B NA NB.\n       \\<lbrakk>m = Key (priEK A) \\<or>\n                m = Key (priSK A) \\<or> m = Key (shrK A);\n        X \\<in> parts (knows Spy evs); evs3 \\<in> ns_public;\n        m \\<in> parts (knows Spy evs3) \\<longrightarrow> A \\<in> bad;\n        Says Aa B (Crypt (pubK B) \\<lbrace>Nonce NA, Agent Aa\\<rbrace>)\n        \\<in> set evs3;\n        Gets Aa (Crypt (pubK Aa) \\<lbrace>Nonce NA, Nonce NB\\<rbrace>)\n        \\<in> set evs3\\<rbrakk>\n       \\<Longrightarrow> (m = Crypt (pubK B) (Nonce NB) \\<longrightarrow>\n                          A \\<in> bad) \\<and>\n                         (m = Nonce NB \\<longrightarrow> A \\<in> bad)", "apply blast"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>evsf Xa.\n       \\<lbrakk>m = Key (priEK A) \\<or>\n                m = Key (priSK A) \\<or> m = Key (shrK A);\n        X \\<in> parts (knows Spy evs); evsf \\<in> ns_public;\n        m \\<in> parts (knows Spy evsf) \\<longrightarrow> A \\<in> bad;\n        Xa \\<in> synth (analz (knows Spy evsf)); A \\<notin> bad\\<rbrakk>\n       \\<Longrightarrow> m \\<in> parts\n                                  (insert Xa\n                                    (knows Spy evsf)) \\<longrightarrow>\n                         A \\<in> bad\n 2. \\<lbrakk>m = Key (priEK A) \\<or>\n             m = Key (priSK A) \\<or> m = Key (shrK A);\n     X \\<in> parts (knows Spy evs)\\<rbrakk>\n    \\<Longrightarrow> (m \\<in> Key ` invKey ` pubK ` bad \\<longrightarrow>\n                       A \\<in> bad) \\<and>\n                      (m \\<in> Key ` invKey ` pubSK ` bad \\<longrightarrow>\n                       A \\<in> bad) \\<and>\n                      (m \\<in> Key ` shrK ` bad \\<longrightarrow>\n                       A \\<in> bad) \\<and>\n                      (m \\<in> Key ` range pubK \\<longrightarrow>\n                       A \\<in> bad) \\<and>\n                      (m \\<in> Key ` range pubSK \\<longrightarrow>\n                       A \\<in> bad)\n 3. \\<And>evs1 NA Aa B.\n       \\<lbrakk>m = Key (priEK A) \\<or>\n                m = Key (priSK A) \\<or> m = Key (shrK A);\n        X \\<in> parts (knows Spy evs); evs1 \\<in> ns_public;\n        m \\<in> parts (knows Spy evs1) \\<longrightarrow> A \\<in> bad;\n        Nonce NA \\<notin> used evs1\\<rbrakk>\n       \\<Longrightarrow> (m =\n                          Crypt (pubK B)\n                           \\<lbrace>Nonce NA,\n                             Agent Aa\\<rbrace> \\<longrightarrow>\n                          A \\<in> bad) \\<and>\n                         (m =\n                          \\<lbrace>Nonce NA,\n                            Agent Aa\\<rbrace> \\<longrightarrow>\n                          A \\<in> bad) \\<and>\n                         (m = Nonce NA \\<longrightarrow> A \\<in> bad) \\<and>\n                         (m = Agent Aa \\<longrightarrow> A \\<in> bad)\n 4. \\<And>evs2 NB B NA Aa.\n       \\<lbrakk>m = Key (priEK A) \\<or>\n                m = Key (priSK A) \\<or> m = Key (shrK A);\n        X \\<in> parts (knows Spy evs); evs2 \\<in> ns_public;\n        m \\<in> parts (knows Spy evs2) \\<longrightarrow> A \\<in> bad;\n        Nonce NB \\<notin> used evs2;\n        Gets B (Crypt (pubK B) \\<lbrace>Nonce NA, Agent Aa\\<rbrace>)\n        \\<in> set evs2\\<rbrakk>\n       \\<Longrightarrow> (m =\n                          Crypt (pubK Aa)\n                           \\<lbrace>Nonce NA,\n                             Nonce NB\\<rbrace> \\<longrightarrow>\n                          A \\<in> bad) \\<and>\n                         (m =\n                          \\<lbrace>Nonce NA,\n                            Nonce NB\\<rbrace> \\<longrightarrow>\n                          A \\<in> bad) \\<and>\n                         (m = Nonce NA \\<longrightarrow> A \\<in> bad) \\<and>\n                         (m = Nonce NB \\<longrightarrow> A \\<in> bad)\n 5. \\<And>evs3 Aa B NA NB.\n       \\<lbrakk>m = Key (priEK A) \\<or>\n                m = Key (priSK A) \\<or> m = Key (shrK A);\n        X \\<in> parts (knows Spy evs); evs3 \\<in> ns_public;\n        m \\<in> parts (knows Spy evs3) \\<longrightarrow> A \\<in> bad;\n        Says Aa B (Crypt (pubK B) \\<lbrace>Nonce NA, Agent Aa\\<rbrace>)\n        \\<in> set evs3;\n        Gets Aa (Crypt (pubK Aa) \\<lbrace>Nonce NA, Nonce NB\\<rbrace>)\n        \\<in> set evs3\\<rbrakk>\n       \\<Longrightarrow> (m = Crypt (pubK B) (Nonce NB) \\<longrightarrow>\n                          A \\<in> bad) \\<and>\n                         (m = Nonce NB \\<longrightarrow> A \\<in> bad)", "(*Spy knows bad agents' keys since start*)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>evsf Xa.\n       \\<lbrakk>m = Key (priEK A) \\<or>\n                m = Key (priSK A) \\<or> m = Key (shrK A);\n        X \\<in> parts (knows Spy evs); evsf \\<in> ns_public;\n        m \\<in> parts (knows Spy evsf) \\<longrightarrow> A \\<in> bad;\n        Xa \\<in> synth (analz (knows Spy evsf)); A \\<notin> bad\\<rbrakk>\n       \\<Longrightarrow> m \\<in> parts\n                                  (insert Xa\n                                    (knows Spy evsf)) \\<longrightarrow>\n                         A \\<in> bad\n 2. \\<lbrakk>m = Key (priEK A) \\<or>\n             m = Key (priSK A) \\<or> m = Key (shrK A);\n     X \\<in> parts (knows Spy evs)\\<rbrakk>\n    \\<Longrightarrow> (m \\<in> Key ` invKey ` pubK ` bad \\<longrightarrow>\n                       A \\<in> bad) \\<and>\n                      (m \\<in> Key ` invKey ` pubSK ` bad \\<longrightarrow>\n                       A \\<in> bad) \\<and>\n                      (m \\<in> Key ` shrK ` bad \\<longrightarrow>\n                       A \\<in> bad) \\<and>\n                      (m \\<in> Key ` range pubK \\<longrightarrow>\n                       A \\<in> bad) \\<and>\n                      (m \\<in> Key ` range pubSK \\<longrightarrow>\n                       A \\<in> bad)\n 3. \\<And>evs1 NA Aa B.\n       \\<lbrakk>m = Key (priEK A) \\<or>\n                m = Key (priSK A) \\<or> m = Key (shrK A);\n        X \\<in> parts (knows Spy evs); evs1 \\<in> ns_public;\n        m \\<in> parts (knows Spy evs1) \\<longrightarrow> A \\<in> bad;\n        Nonce NA \\<notin> used evs1\\<rbrakk>\n       \\<Longrightarrow> (m =\n                          Crypt (pubK B)\n                           \\<lbrace>Nonce NA,\n                             Agent Aa\\<rbrace> \\<longrightarrow>\n                          A \\<in> bad) \\<and>\n                         (m =\n                          \\<lbrace>Nonce NA,\n                            Agent Aa\\<rbrace> \\<longrightarrow>\n                          A \\<in> bad) \\<and>\n                         (m = Nonce NA \\<longrightarrow> A \\<in> bad) \\<and>\n                         (m = Agent Aa \\<longrightarrow> A \\<in> bad)\n 4. \\<And>evs2 NB B NA Aa.\n       \\<lbrakk>m = Key (priEK A) \\<or>\n                m = Key (priSK A) \\<or> m = Key (shrK A);\n        X \\<in> parts (knows Spy evs); evs2 \\<in> ns_public;\n        m \\<in> parts (knows Spy evs2) \\<longrightarrow> A \\<in> bad;\n        Nonce NB \\<notin> used evs2;\n        Gets B (Crypt (pubK B) \\<lbrace>Nonce NA, Agent Aa\\<rbrace>)\n        \\<in> set evs2\\<rbrakk>\n       \\<Longrightarrow> (m =\n                          Crypt (pubK Aa)\n                           \\<lbrace>Nonce NA,\n                             Nonce NB\\<rbrace> \\<longrightarrow>\n                          A \\<in> bad) \\<and>\n                         (m =\n                          \\<lbrace>Nonce NA,\n                            Nonce NB\\<rbrace> \\<longrightarrow>\n                          A \\<in> bad) \\<and>\n                         (m = Nonce NA \\<longrightarrow> A \\<in> bad) \\<and>\n                         (m = Nonce NB \\<longrightarrow> A \\<in> bad)\n 5. \\<And>evs3 Aa B NA NB.\n       \\<lbrakk>m = Key (priEK A) \\<or>\n                m = Key (priSK A) \\<or> m = Key (shrK A);\n        X \\<in> parts (knows Spy evs); evs3 \\<in> ns_public;\n        m \\<in> parts (knows Spy evs3) \\<longrightarrow> A \\<in> bad;\n        Says Aa B (Crypt (pubK B) \\<lbrace>Nonce NA, Agent Aa\\<rbrace>)\n        \\<in> set evs3;\n        Gets Aa (Crypt (pubK Aa) \\<lbrace>Nonce NA, Nonce NB\\<rbrace>)\n        \\<in> set evs3\\<rbrakk>\n       \\<Longrightarrow> (m = Crypt (pubK B) (Nonce NB) \\<longrightarrow>\n                          A \\<in> bad) \\<and>\n                         (m = Nonce NB \\<longrightarrow> A \\<in> bad)", "apply clarsimp"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>evsf Xa.\n       \\<lbrakk>m = Key (priEK A) \\<or>\n                m = Key (priSK A) \\<or> m = Key (shrK A);\n        X \\<in> parts (knows Spy evs); evsf \\<in> ns_public;\n        m \\<notin> parts (knows Spy evsf);\n        Xa \\<in> synth (analz (knows Spy evsf)); A \\<notin> bad;\n        m \\<in> parts (insert Xa (knows Spy evsf))\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<lbrakk>m = Key (priEK A) \\<or>\n             m = Key (priSK A) \\<or> m = Key (shrK A);\n     X \\<in> parts (knows Spy evs)\\<rbrakk>\n    \\<Longrightarrow> (m \\<in> Key ` invKey ` pubK ` bad \\<longrightarrow>\n                       A \\<in> bad) \\<and>\n                      (m \\<in> Key ` invKey ` pubSK ` bad \\<longrightarrow>\n                       A \\<in> bad) \\<and>\n                      (m \\<in> Key ` shrK ` bad \\<longrightarrow>\n                       A \\<in> bad) \\<and>\n                      (m \\<in> Key ` range pubK \\<longrightarrow>\n                       A \\<in> bad) \\<and>\n                      (m \\<in> Key ` range pubSK \\<longrightarrow>\n                       A \\<in> bad)\n 3. \\<And>evs1 NA Aa B.\n       \\<lbrakk>m = Key (priEK A) \\<or>\n                m = Key (priSK A) \\<or> m = Key (shrK A);\n        X \\<in> parts (knows Spy evs); evs1 \\<in> ns_public;\n        m \\<in> parts (knows Spy evs1) \\<longrightarrow> A \\<in> bad;\n        Nonce NA \\<notin> used evs1\\<rbrakk>\n       \\<Longrightarrow> (m =\n                          Crypt (pubK B)\n                           \\<lbrace>Nonce NA,\n                             Agent Aa\\<rbrace> \\<longrightarrow>\n                          A \\<in> bad) \\<and>\n                         (m =\n                          \\<lbrace>Nonce NA,\n                            Agent Aa\\<rbrace> \\<longrightarrow>\n                          A \\<in> bad) \\<and>\n                         (m = Nonce NA \\<longrightarrow> A \\<in> bad) \\<and>\n                         (m = Agent Aa \\<longrightarrow> A \\<in> bad)\n 4. \\<And>evs2 NB B NA Aa.\n       \\<lbrakk>m = Key (priEK A) \\<or>\n                m = Key (priSK A) \\<or> m = Key (shrK A);\n        X \\<in> parts (knows Spy evs); evs2 \\<in> ns_public;\n        m \\<in> parts (knows Spy evs2) \\<longrightarrow> A \\<in> bad;\n        Nonce NB \\<notin> used evs2;\n        Gets B (Crypt (pubK B) \\<lbrace>Nonce NA, Agent Aa\\<rbrace>)\n        \\<in> set evs2\\<rbrakk>\n       \\<Longrightarrow> (m =\n                          Crypt (pubK Aa)\n                           \\<lbrace>Nonce NA,\n                             Nonce NB\\<rbrace> \\<longrightarrow>\n                          A \\<in> bad) \\<and>\n                         (m =\n                          \\<lbrace>Nonce NA,\n                            Nonce NB\\<rbrace> \\<longrightarrow>\n                          A \\<in> bad) \\<and>\n                         (m = Nonce NA \\<longrightarrow> A \\<in> bad) \\<and>\n                         (m = Nonce NB \\<longrightarrow> A \\<in> bad)\n 5. \\<And>evs3 Aa B NA NB.\n       \\<lbrakk>m = Key (priEK A) \\<or>\n                m = Key (priSK A) \\<or> m = Key (shrK A);\n        X \\<in> parts (knows Spy evs); evs3 \\<in> ns_public;\n        m \\<in> parts (knows Spy evs3) \\<longrightarrow> A \\<in> bad;\n        Says Aa B (Crypt (pubK B) \\<lbrace>Nonce NA, Agent Aa\\<rbrace>)\n        \\<in> set evs3;\n        Gets Aa (Crypt (pubK Aa) \\<lbrace>Nonce NA, Nonce NB\\<rbrace>)\n        \\<in> set evs3\\<rbrakk>\n       \\<Longrightarrow> (m = Crypt (pubK B) (Nonce NB) \\<longrightarrow>\n                          A \\<in> bad) \\<and>\n                         (m = Nonce NB \\<longrightarrow> A \\<in> bad)", "apply (drule Fake_parts_insert [THEN subsetD], simp)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>evsf Xa.\n       \\<lbrakk>m = Key (priEK A) \\<or>\n                m = Key (priSK A) \\<or> m = Key (shrK A);\n        X \\<in> parts (knows Spy evs); evsf \\<in> ns_public;\n        m \\<notin> parts (knows Spy evsf); A \\<notin> bad;\n        m \\<in> parts (insert Xa (knows Spy evsf));\n        m \\<in> synth (analz (knows Spy evsf)) \\<union>\n                parts (knows Spy evsf)\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<lbrakk>m = Key (priEK A) \\<or>\n             m = Key (priSK A) \\<or> m = Key (shrK A);\n     X \\<in> parts (knows Spy evs)\\<rbrakk>\n    \\<Longrightarrow> (m \\<in> Key ` invKey ` pubK ` bad \\<longrightarrow>\n                       A \\<in> bad) \\<and>\n                      (m \\<in> Key ` invKey ` pubSK ` bad \\<longrightarrow>\n                       A \\<in> bad) \\<and>\n                      (m \\<in> Key ` shrK ` bad \\<longrightarrow>\n                       A \\<in> bad) \\<and>\n                      (m \\<in> Key ` range pubK \\<longrightarrow>\n                       A \\<in> bad) \\<and>\n                      (m \\<in> Key ` range pubSK \\<longrightarrow>\n                       A \\<in> bad)\n 3. \\<And>evs1 NA Aa B.\n       \\<lbrakk>m = Key (priEK A) \\<or>\n                m = Key (priSK A) \\<or> m = Key (shrK A);\n        X \\<in> parts (knows Spy evs); evs1 \\<in> ns_public;\n        m \\<in> parts (knows Spy evs1) \\<longrightarrow> A \\<in> bad;\n        Nonce NA \\<notin> used evs1\\<rbrakk>\n       \\<Longrightarrow> (m =\n                          Crypt (pubK B)\n                           \\<lbrace>Nonce NA,\n                             Agent Aa\\<rbrace> \\<longrightarrow>\n                          A \\<in> bad) \\<and>\n                         (m =\n                          \\<lbrace>Nonce NA,\n                            Agent Aa\\<rbrace> \\<longrightarrow>\n                          A \\<in> bad) \\<and>\n                         (m = Nonce NA \\<longrightarrow> A \\<in> bad) \\<and>\n                         (m = Agent Aa \\<longrightarrow> A \\<in> bad)\n 4. \\<And>evs2 NB B NA Aa.\n       \\<lbrakk>m = Key (priEK A) \\<or>\n                m = Key (priSK A) \\<or> m = Key (shrK A);\n        X \\<in> parts (knows Spy evs); evs2 \\<in> ns_public;\n        m \\<in> parts (knows Spy evs2) \\<longrightarrow> A \\<in> bad;\n        Nonce NB \\<notin> used evs2;\n        Gets B (Crypt (pubK B) \\<lbrace>Nonce NA, Agent Aa\\<rbrace>)\n        \\<in> set evs2\\<rbrakk>\n       \\<Longrightarrow> (m =\n                          Crypt (pubK Aa)\n                           \\<lbrace>Nonce NA,\n                             Nonce NB\\<rbrace> \\<longrightarrow>\n                          A \\<in> bad) \\<and>\n                         (m =\n                          \\<lbrace>Nonce NA,\n                            Nonce NB\\<rbrace> \\<longrightarrow>\n                          A \\<in> bad) \\<and>\n                         (m = Nonce NA \\<longrightarrow> A \\<in> bad) \\<and>\n                         (m = Nonce NB \\<longrightarrow> A \\<in> bad)\n 5. \\<And>evs3 Aa B NA NB.\n       \\<lbrakk>m = Key (priEK A) \\<or>\n                m = Key (priSK A) \\<or> m = Key (shrK A);\n        X \\<in> parts (knows Spy evs); evs3 \\<in> ns_public;\n        m \\<in> parts (knows Spy evs3) \\<longrightarrow> A \\<in> bad;\n        Says Aa B (Crypt (pubK B) \\<lbrace>Nonce NA, Agent Aa\\<rbrace>)\n        \\<in> set evs3;\n        Gets Aa (Crypt (pubK Aa) \\<lbrace>Nonce NA, Nonce NB\\<rbrace>)\n        \\<in> set evs3\\<rbrakk>\n       \\<Longrightarrow> (m = Crypt (pubK B) (Nonce NB) \\<longrightarrow>\n                          A \\<in> bad) \\<and>\n                         (m = Nonce NB \\<longrightarrow> A \\<in> bad)", "apply (blast dest: analz_into_parts)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<lbrakk>m = Key (priEK A) \\<or>\n             m = Key (priSK A) \\<or> m = Key (shrK A);\n     X \\<in> parts (knows Spy evs)\\<rbrakk>\n    \\<Longrightarrow> (m \\<in> Key ` invKey ` pubK ` bad \\<longrightarrow>\n                       A \\<in> bad) \\<and>\n                      (m \\<in> Key ` invKey ` pubSK ` bad \\<longrightarrow>\n                       A \\<in> bad) \\<and>\n                      (m \\<in> Key ` shrK ` bad \\<longrightarrow>\n                       A \\<in> bad) \\<and>\n                      (m \\<in> Key ` range pubK \\<longrightarrow>\n                       A \\<in> bad) \\<and>\n                      (m \\<in> Key ` range pubSK \\<longrightarrow>\n                       A \\<in> bad)\n 2. \\<And>evs1 NA Aa B.\n       \\<lbrakk>m = Key (priEK A) \\<or>\n                m = Key (priSK A) \\<or> m = Key (shrK A);\n        X \\<in> parts (knows Spy evs); evs1 \\<in> ns_public;\n        m \\<in> parts (knows Spy evs1) \\<longrightarrow> A \\<in> bad;\n        Nonce NA \\<notin> used evs1\\<rbrakk>\n       \\<Longrightarrow> (m =\n                          Crypt (pubK B)\n                           \\<lbrace>Nonce NA,\n                             Agent Aa\\<rbrace> \\<longrightarrow>\n                          A \\<in> bad) \\<and>\n                         (m =\n                          \\<lbrace>Nonce NA,\n                            Agent Aa\\<rbrace> \\<longrightarrow>\n                          A \\<in> bad) \\<and>\n                         (m = Nonce NA \\<longrightarrow> A \\<in> bad) \\<and>\n                         (m = Agent Aa \\<longrightarrow> A \\<in> bad)\n 3. \\<And>evs2 NB B NA Aa.\n       \\<lbrakk>m = Key (priEK A) \\<or>\n                m = Key (priSK A) \\<or> m = Key (shrK A);\n        X \\<in> parts (knows Spy evs); evs2 \\<in> ns_public;\n        m \\<in> parts (knows Spy evs2) \\<longrightarrow> A \\<in> bad;\n        Nonce NB \\<notin> used evs2;\n        Gets B (Crypt (pubK B) \\<lbrace>Nonce NA, Agent Aa\\<rbrace>)\n        \\<in> set evs2\\<rbrakk>\n       \\<Longrightarrow> (m =\n                          Crypt (pubK Aa)\n                           \\<lbrace>Nonce NA,\n                             Nonce NB\\<rbrace> \\<longrightarrow>\n                          A \\<in> bad) \\<and>\n                         (m =\n                          \\<lbrace>Nonce NA,\n                            Nonce NB\\<rbrace> \\<longrightarrow>\n                          A \\<in> bad) \\<and>\n                         (m = Nonce NA \\<longrightarrow> A \\<in> bad) \\<and>\n                         (m = Nonce NB \\<longrightarrow> A \\<in> bad)\n 4. \\<And>evs3 Aa B NA NB.\n       \\<lbrakk>m = Key (priEK A) \\<or>\n                m = Key (priSK A) \\<or> m = Key (shrK A);\n        X \\<in> parts (knows Spy evs); evs3 \\<in> ns_public;\n        m \\<in> parts (knows Spy evs3) \\<longrightarrow> A \\<in> bad;\n        Says Aa B (Crypt (pubK B) \\<lbrace>Nonce NA, Agent Aa\\<rbrace>)\n        \\<in> set evs3;\n        Gets Aa (Crypt (pubK Aa) \\<lbrace>Nonce NA, Nonce NB\\<rbrace>)\n        \\<in> set evs3\\<rbrakk>\n       \\<Longrightarrow> (m = Crypt (pubK B) (Nonce NB) \\<longrightarrow>\n                          A \\<in> bad) \\<and>\n                         (m = Nonce NB \\<longrightarrow> A \\<in> bad)", "apply force+"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "text\\<open>Here's the specialised version of @{thm staticSecret_parts_Spy}\\<close>"], ["", "lemma NS_staticSecret_parts_Spy:\n\"\\<lbrakk>m \\<in> parts (knows Spy evs); m \\<in> staticSecret A;\n  evs \\<in> ns_public\\<rbrakk> \\<Longrightarrow> A \\<in> bad\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>m \\<in> parts (knows Spy evs); m \\<in> staticSecret A;\n     evs \\<in> ns_public\\<rbrakk>\n    \\<Longrightarrow> A \\<in> bad", "apply (drule staticSecret_parts_Spy)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>m \\<in> staticSecret A; evs \\<in> ns_public\\<rbrakk>\n    \\<Longrightarrow> m \\<in> staticSecret ?A\n 2. \\<lbrakk>m \\<in> staticSecret A; evs \\<in> ns_public;\n     ?A \\<in> bad \\<or>\n     (\\<exists>C B X.\n         Says C B X \\<in> set evs \\<and> m \\<in> parts {X}) \\<or>\n     (\\<exists>C Y.\n         Notes C Y \\<in> set evs \\<and>\n         C \\<in> bad \\<and> m \\<in> parts {Y})\\<rbrakk>\n    \\<Longrightarrow> A \\<in> bad", "apply assumption"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>m \\<in> staticSecret A; evs \\<in> ns_public;\n     A \\<in> bad \\<or>\n     (\\<exists>C B X.\n         Says C B X \\<in> set evs \\<and> m \\<in> parts {X}) \\<or>\n     (\\<exists>C Y.\n         Notes C Y \\<in> set evs \\<and>\n         C \\<in> bad \\<and> m \\<in> parts {Y})\\<rbrakk>\n    \\<Longrightarrow> A \\<in> bad", "txt\\<open>@{subgoals  [display,indent=1]}\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>m \\<in> staticSecret A; evs \\<in> ns_public;\n     A \\<in> bad \\<or>\n     (\\<exists>C B X.\n         Says C B X \\<in> set evs \\<and> m \\<in> parts {X}) \\<or>\n     (\\<exists>C Y.\n         Notes C Y \\<in> set evs \\<and>\n         C \\<in> bad \\<and> m \\<in> parts {Y})\\<rbrakk>\n    \\<Longrightarrow> A \\<in> bad", "apply (erule disjE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>m \\<in> staticSecret A; evs \\<in> ns_public;\n     A \\<in> bad\\<rbrakk>\n    \\<Longrightarrow> A \\<in> bad\n 2. \\<lbrakk>m \\<in> staticSecret A; evs \\<in> ns_public;\n     (\\<exists>C B X.\n         Says C B X \\<in> set evs \\<and> m \\<in> parts {X}) \\<or>\n     (\\<exists>C Y.\n         Notes C Y \\<in> set evs \\<and>\n         C \\<in> bad \\<and> m \\<in> parts {Y})\\<rbrakk>\n    \\<Longrightarrow> A \\<in> bad", "(*Case A bad*)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>m \\<in> staticSecret A; evs \\<in> ns_public;\n     A \\<in> bad\\<rbrakk>\n    \\<Longrightarrow> A \\<in> bad\n 2. \\<lbrakk>m \\<in> staticSecret A; evs \\<in> ns_public;\n     (\\<exists>C B X.\n         Says C B X \\<in> set evs \\<and> m \\<in> parts {X}) \\<or>\n     (\\<exists>C Y.\n         Notes C Y \\<in> set evs \\<and>\n         C \\<in> bad \\<and> m \\<in> parts {Y})\\<rbrakk>\n    \\<Longrightarrow> A \\<in> bad", "apply assumption"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>m \\<in> staticSecret A; evs \\<in> ns_public;\n     (\\<exists>C B X.\n         Says C B X \\<in> set evs \\<and> m \\<in> parts {X}) \\<or>\n     (\\<exists>C Y.\n         Notes C Y \\<in> set evs \\<and>\n         C \\<in> bad \\<and> m \\<in> parts {Y})\\<rbrakk>\n    \\<Longrightarrow> A \\<in> bad", "apply (erule disjE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>m \\<in> staticSecret A; evs \\<in> ns_public;\n     \\<exists>C B X.\n        Says C B X \\<in> set evs \\<and> m \\<in> parts {X}\\<rbrakk>\n    \\<Longrightarrow> A \\<in> bad\n 2. \\<lbrakk>m \\<in> staticSecret A; evs \\<in> ns_public;\n     \\<exists>C Y.\n        Notes C Y \\<in> set evs \\<and>\n        C \\<in> bad \\<and> m \\<in> parts {Y}\\<rbrakk>\n    \\<Longrightarrow> A \\<in> bad", "(*Case: Says*)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>m \\<in> staticSecret A; evs \\<in> ns_public;\n     \\<exists>C B X.\n        Says C B X \\<in> set evs \\<and> m \\<in> parts {X}\\<rbrakk>\n    \\<Longrightarrow> A \\<in> bad\n 2. \\<lbrakk>m \\<in> staticSecret A; evs \\<in> ns_public;\n     \\<exists>C Y.\n        Notes C Y \\<in> set evs \\<and>\n        C \\<in> bad \\<and> m \\<in> parts {Y}\\<rbrakk>\n    \\<Longrightarrow> A \\<in> bad", "apply (erule exE)+"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>C B X.\n       \\<lbrakk>m \\<in> staticSecret A; evs \\<in> ns_public;\n        Says C B X \\<in> set evs \\<and> m \\<in> parts {X}\\<rbrakk>\n       \\<Longrightarrow> A \\<in> bad\n 2. \\<lbrakk>m \\<in> staticSecret A; evs \\<in> ns_public;\n     \\<exists>C Y.\n        Notes C Y \\<in> set evs \\<and>\n        C \\<in> bad \\<and> m \\<in> parts {Y}\\<rbrakk>\n    \\<Longrightarrow> A \\<in> bad", "txt\\<open>@{subgoals  [display,indent=1]}\\<close>"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>C B X.\n       \\<lbrakk>m \\<in> staticSecret A; evs \\<in> ns_public;\n        Says C B X \\<in> set evs \\<and> m \\<in> parts {X}\\<rbrakk>\n       \\<Longrightarrow> A \\<in> bad\n 2. \\<lbrakk>m \\<in> staticSecret A; evs \\<in> ns_public;\n     \\<exists>C Y.\n        Notes C Y \\<in> set evs \\<and>\n        C \\<in> bad \\<and> m \\<in> parts {Y}\\<rbrakk>\n    \\<Longrightarrow> A \\<in> bad", "apply (case_tac \"C=Spy\")"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>C B X.\n       \\<lbrakk>m \\<in> staticSecret A; evs \\<in> ns_public;\n        Says C B X \\<in> set evs \\<and> m \\<in> parts {X}; C = Spy\\<rbrakk>\n       \\<Longrightarrow> A \\<in> bad\n 2. \\<And>C B X.\n       \\<lbrakk>m \\<in> staticSecret A; evs \\<in> ns_public;\n        Says C B X \\<in> set evs \\<and> m \\<in> parts {X};\n        C \\<noteq> Spy\\<rbrakk>\n       \\<Longrightarrow> A \\<in> bad\n 3. \\<lbrakk>m \\<in> staticSecret A; evs \\<in> ns_public;\n     \\<exists>C Y.\n        Notes C Y \\<in> set evs \\<and>\n        C \\<in> bad \\<and> m \\<in> parts {Y}\\<rbrakk>\n    \\<Longrightarrow> A \\<in> bad", "apply (blast dest: NS_Says_Spy_staticSecret)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>C B X.\n       \\<lbrakk>m \\<in> staticSecret A; evs \\<in> ns_public;\n        Says C B X \\<in> set evs \\<and> m \\<in> parts {X};\n        C \\<noteq> Spy\\<rbrakk>\n       \\<Longrightarrow> A \\<in> bad\n 2. \\<lbrakk>m \\<in> staticSecret A; evs \\<in> ns_public;\n     \\<exists>C Y.\n        Notes C Y \\<in> set evs \\<and>\n        C \\<in> bad \\<and> m \\<in> parts {Y}\\<rbrakk>\n    \\<Longrightarrow> A \\<in> bad", "apply (blast dest: NS_Says_staticSecret)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>m \\<in> staticSecret A; evs \\<in> ns_public;\n     \\<exists>C Y.\n        Notes C Y \\<in> set evs \\<and>\n        C \\<in> bad \\<and> m \\<in> parts {Y}\\<rbrakk>\n    \\<Longrightarrow> A \\<in> bad", "apply (blast dest: NS_no_Notes)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "text\\<open>Concluding the specialisation proof strategy...\\<close>"], ["", "lemma NS_Spy_see_staticSecret_spec:\n\"\\<lbrakk>m \\<in> staticSecret A; evs \\<in> ns_public\\<rbrakk> \\<Longrightarrow>\n m \\<in> parts (knows Spy evs) = (A \\<in> bad)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>m \\<in> staticSecret A; evs \\<in> ns_public\\<rbrakk>\n    \\<Longrightarrow> (m \\<in> parts (knows Spy evs)) = (A \\<in> bad)", "txt\\<open>one line proof:\napply (force dest: @{term NS_staticSecret_parts_Spy})\n\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>m \\<in> staticSecret A; evs \\<in> ns_public\\<rbrakk>\n    \\<Longrightarrow> (m \\<in> parts (knows Spy evs)) = (A \\<in> bad)", "apply safe"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>m \\<in> staticSecret A; evs \\<in> ns_public;\n     m \\<in> parts (knows Spy evs)\\<rbrakk>\n    \\<Longrightarrow> A \\<in> bad\n 2. \\<lbrakk>m \\<in> staticSecret A; evs \\<in> ns_public;\n     A \\<in> bad\\<rbrakk>\n    \\<Longrightarrow> m \\<in> parts (knows Spy evs)", "apply (blast dest: NS_staticSecret_parts_Spy)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>m \\<in> staticSecret A; evs \\<in> ns_public;\n     A \\<in> bad\\<rbrakk>\n    \\<Longrightarrow> m \\<in> parts (knows Spy evs)", "txt\\<open>one line proof: force\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>m \\<in> staticSecret A; evs \\<in> ns_public;\n     A \\<in> bad\\<rbrakk>\n    \\<Longrightarrow> m \\<in> parts (knows Spy evs)", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>m = Key (priEK A) \\<or>\n             m = Key (priSK A) \\<or> m = Key (shrK A);\n     evs \\<in> ns_public; A \\<in> bad\\<rbrakk>\n    \\<Longrightarrow> m \\<in> parts (knows Spy evs)", "apply (erule disjE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>evs \\<in> ns_public; A \\<in> bad; m = Key (priEK A)\\<rbrakk>\n    \\<Longrightarrow> m \\<in> parts (knows Spy evs)\n 2. \\<lbrakk>evs \\<in> ns_public; A \\<in> bad;\n     m = Key (priSK A) \\<or> m = Key (shrK A)\\<rbrakk>\n    \\<Longrightarrow> m \\<in> parts (knows Spy evs)", "apply clarify"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>evs \\<in> ns_public; A \\<in> bad; m = Key (priEK A)\\<rbrakk>\n    \\<Longrightarrow> Key (priEK A) \\<in> parts (knows Spy evs)\n 2. \\<lbrakk>evs \\<in> ns_public; A \\<in> bad;\n     m = Key (priSK A) \\<or> m = Key (shrK A)\\<rbrakk>\n    \\<Longrightarrow> m \\<in> parts (knows Spy evs)", "apply (drule_tac b=Encryption and evs=evs in Spy_spies_bad_privateKey)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>evs \\<in> ns_public; m = Key (priEK A);\n     Key (priEK A) \\<in> knows Spy evs\\<rbrakk>\n    \\<Longrightarrow> Key (priEK A) \\<in> parts (knows Spy evs)\n 2. \\<lbrakk>evs \\<in> ns_public; A \\<in> bad;\n     m = Key (priSK A) \\<or> m = Key (shrK A)\\<rbrakk>\n    \\<Longrightarrow> m \\<in> parts (knows Spy evs)", "apply (drule parts.Inj, assumption)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>evs \\<in> ns_public; A \\<in> bad;\n     m = Key (priSK A) \\<or> m = Key (shrK A)\\<rbrakk>\n    \\<Longrightarrow> m \\<in> parts (knows Spy evs)", "apply (erule disjE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>evs \\<in> ns_public; A \\<in> bad; m = Key (priSK A)\\<rbrakk>\n    \\<Longrightarrow> m \\<in> parts (knows Spy evs)\n 2. \\<lbrakk>evs \\<in> ns_public; A \\<in> bad; m = Key (shrK A)\\<rbrakk>\n    \\<Longrightarrow> m \\<in> parts (knows Spy evs)", "apply clarify"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>evs \\<in> ns_public; A \\<in> bad; m = Key (priSK A)\\<rbrakk>\n    \\<Longrightarrow> Key (priSK A) \\<in> parts (knows Spy evs)\n 2. \\<lbrakk>evs \\<in> ns_public; A \\<in> bad; m = Key (shrK A)\\<rbrakk>\n    \\<Longrightarrow> m \\<in> parts (knows Spy evs)", "apply (drule_tac b=Signature and evs=evs in Spy_spies_bad_privateKey)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>evs \\<in> ns_public; m = Key (priSK A);\n     Key (priSK A) \\<in> knows Spy evs\\<rbrakk>\n    \\<Longrightarrow> Key (priSK A) \\<in> parts (knows Spy evs)\n 2. \\<lbrakk>evs \\<in> ns_public; A \\<in> bad; m = Key (shrK A)\\<rbrakk>\n    \\<Longrightarrow> m \\<in> parts (knows Spy evs)", "apply (drule parts.Inj, assumption)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>evs \\<in> ns_public; A \\<in> bad; m = Key (shrK A)\\<rbrakk>\n    \\<Longrightarrow> m \\<in> parts (knows Spy evs)", "apply clarify"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>evs \\<in> ns_public; A \\<in> bad; m = Key (shrK A)\\<rbrakk>\n    \\<Longrightarrow> Key (shrK A) \\<in> parts (knows Spy evs)", "apply (drule_tac evs=evs in Spy_spies_bad_shrK)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>evs \\<in> ns_public; m = Key (shrK A);\n     Key (shrK A) \\<in> knows Spy evs\\<rbrakk>\n    \\<Longrightarrow> Key (shrK A) \\<in> parts (knows Spy evs)", "apply (drule parts.Inj, assumption)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma NS_Spy_analz_staticSecret:\n\"\\<lbrakk>m \\<in> staticSecret A; evs \\<in> ns_public\\<rbrakk> \\<Longrightarrow>\n m \\<in> analz (knows Spy evs) = (A \\<in> bad)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>m \\<in> staticSecret A; evs \\<in> ns_public\\<rbrakk>\n    \\<Longrightarrow> (m \\<in> analz (knows Spy evs)) = (A \\<in> bad)", "apply (force dest: analz_into_parts NS_staticSecret_parts_Spy)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma NS_staticSecret_subset_parts_knows_Spy:\n\"evs \\<in> ns_public \\<Longrightarrow>\n staticSecret A \\<subseteq> parts (knows Spy evs) = (A \\<in> bad)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. evs \\<in> ns_public \\<Longrightarrow>\n    (staticSecret A \\<subseteq> parts (knows Spy evs)) = (A \\<in> bad)", "apply (force dest: NS_staticSecret_parts_Spy)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma NS_staticSecret_subset_analz_knows_Spy: \n\"evs \\<in> ns_public \\<Longrightarrow>\n staticSecret A \\<subseteq> analz (knows Spy evs) = (A \\<in> bad)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. evs \\<in> ns_public \\<Longrightarrow>\n    (staticSecret A \\<subseteq> analz (knows Spy evs)) = (A \\<in> bad)", "apply (force dest: analz_into_parts NS_staticSecret_parts_Spy)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "end"]]}