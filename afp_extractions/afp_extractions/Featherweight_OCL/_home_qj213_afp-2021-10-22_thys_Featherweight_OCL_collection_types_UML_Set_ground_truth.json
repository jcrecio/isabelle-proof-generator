{"file_name": "/home/qj213/afp-2021-10-22/thys/Featherweight_OCL/collection_types/UML_Set.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Featherweight_OCL", "problem_names": ["lemma Integer_defined : \"\\<delta> Integer = true\"", "lemma Integer\\<^sub>n\\<^sub>u\\<^sub>l\\<^sub>l_defined : \"\\<delta> Integer\\<^sub>n\\<^sub>u\\<^sub>l\\<^sub>l = true\"", "lemma Void\\<^sub>n\\<^sub>u\\<^sub>l\\<^sub>l_defined : \"\\<delta> Void\\<^sub>n\\<^sub>u\\<^sub>l\\<^sub>l = true\"", "lemma Void\\<^sub>e\\<^sub>m\\<^sub>p\\<^sub>t\\<^sub>y_defined : \"\\<delta> Void\\<^sub>e\\<^sub>m\\<^sub>p\\<^sub>t\\<^sub>y = true\"", "lemma assumes \"\\<tau> \\<Turnstile> \\<delta> (V :: ('\\<AA>,Void\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e) Set)\"\n      shows   \"\\<tau> \\<Turnstile> V \\<triangleq> Void\\<^sub>n\\<^sub>u\\<^sub>l\\<^sub>l \\<or> \\<tau> \\<Turnstile> V \\<triangleq> Void\\<^sub>e\\<^sub>m\\<^sub>p\\<^sub>t\\<^sub>y\"", "lemma Boolean_defined : \"\\<delta> Boolean = true\"", "lemma Boolean\\<^sub>n\\<^sub>u\\<^sub>l\\<^sub>l_defined : \"\\<delta> Boolean\\<^sub>n\\<^sub>u\\<^sub>l\\<^sub>l = true\"", "lemma String_defined : \"\\<delta> String = true\"", "lemma String\\<^sub>n\\<^sub>u\\<^sub>l\\<^sub>l_defined : \"\\<delta> String\\<^sub>n\\<^sub>u\\<^sub>l\\<^sub>l = true\"", "lemma Real_defined : \"\\<delta> Real = true\"", "lemma Real\\<^sub>n\\<^sub>u\\<^sub>l\\<^sub>l_defined : \"\\<delta> Real\\<^sub>n\\<^sub>u\\<^sub>l\\<^sub>l = true\"", "lemma Set_inv_lemma: \"\\<tau> \\<Turnstile> (\\<delta> X) \\<Longrightarrow> \\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e (X \\<tau>)\\<rceil>\\<rceil>. x \\<noteq> bot\"", "lemma Set_inv_lemma' :\n assumes x_def : \"\\<tau> \\<Turnstile> \\<delta> X\"\n     and e_mem : \"e \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e (X \\<tau>)\\<rceil>\\<rceil>\"\n   shows \"\\<tau> \\<Turnstile> \\<upsilon> (\\<lambda>_. e)\"", "lemma abs_rep_simp' :\n assumes S_all_def : \"\\<tau> \\<Turnstile> \\<delta> S\"\n   shows \"Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e (S \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor> = S \\<tau>\"", "lemma S_lift' :\n assumes S_all_def : \"(\\<tau> :: '\\<AA> st) \\<Turnstile> \\<delta> S\"\n   shows \"\\<exists>S'. (\\<lambda>a (_::'\\<AA> st). a) ` \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e (S \\<tau>)\\<rceil>\\<rceil> = (\\<lambda>a (_::'\\<AA> st). \\<lfloor>a\\<rfloor>) ` S'\"", "lemma invalid_set_OclNot_defined [simp,code_unfold]:\"\\<delta>(invalid::('\\<AA>,'\\<alpha>::null) Set) = false\"", "lemma null_set_OclNot_defined [simp,code_unfold]:\"\\<delta>(null::('\\<AA>,'\\<alpha>::null) Set) = false\"", "lemma invalid_set_valid [simp,code_unfold]:\"\\<upsilon>(invalid::('\\<AA>,'\\<alpha>::null) Set) = false\"", "lemma null_set_valid [simp,code_unfold]:\"\\<upsilon>(null::('\\<AA>,'\\<alpha>::null) Set) = true\"", "lemma mtSet_defined[simp,code_unfold]:\"\\<delta>(Set{}) = true\"", "lemma mtSet_valid[simp,code_unfold]:\"\\<upsilon>(Set{}) = true\"", "lemma mtSet_rep_set: \"\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e (Set{} \\<tau>)\\<rceil>\\<rceil> = {}\"", "lemma [simp,code_unfold]: \"const Set{}\"", "lemma OclExcluding_inv: \"(x:: Set('b::{null})) \\<noteq> \\<bottom> \\<Longrightarrow> x \\<noteq> null \\<Longrightarrow>  y \\<noteq> \\<bottom>  \\<Longrightarrow>\n           \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e x\\<rceil>\\<rceil> - {y}\\<rfloor>\\<rfloor> \\<in> {X. X = bot \\<or> X = null \\<or> (\\<forall>x\\<in>\\<lceil>\\<lceil>X\\<rceil>\\<rceil>. x \\<noteq> bot)}\"", "lemma OclUnion_inv: \"(x:: Set('b::{null})) \\<noteq> \\<bottom> \\<Longrightarrow> x \\<noteq> null \\<Longrightarrow>  y \\<noteq> \\<bottom>  \\<Longrightarrow> y \\<noteq> null \\<Longrightarrow>\n           \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e y\\<rceil>\\<rceil> \\<union> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e x\\<rceil>\\<rceil>\\<rfloor>\\<rfloor> \\<in> {X. X = bot \\<or> X = null \\<or> (\\<forall>x\\<in>\\<lceil>\\<lceil>X\\<rceil>\\<rceil>. x \\<noteq> bot)}\"", "lemma OclIntersection_inv: \"(x:: Set('b::{null})) \\<noteq> \\<bottom> \\<Longrightarrow> x \\<noteq> null \\<Longrightarrow>  y \\<noteq> \\<bottom>  \\<Longrightarrow> y \\<noteq> null \\<Longrightarrow>\n           \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e y\\<rceil>\\<rceil> \\<inter> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e x\\<rceil>\\<rceil>\\<rfloor>\\<rfloor> \\<in> {X. X = bot \\<or> X = null \\<or> (\\<forall>x\\<in>\\<lceil>\\<lceil>X\\<rceil>\\<rceil>. x \\<noteq> bot)}\"", "lemma OclIncluding_valid_args_valid:\n\"(\\<tau> \\<Turnstile> \\<upsilon>(X->including\\<^sub>S\\<^sub>e\\<^sub>t(x))) = ((\\<tau> \\<Turnstile>(\\<delta> X)) \\<and> (\\<tau> \\<Turnstile>(\\<upsilon> x)))\"", "lemma OclIncluding_valid_args_valid''[simp,code_unfold]:\n\"\\<upsilon>(X->including\\<^sub>S\\<^sub>e\\<^sub>t(x)) = ((\\<delta> X) and (\\<upsilon> x))\"", "lemma OclExcluding_valid_args_valid:\n\"(\\<tau> \\<Turnstile> \\<upsilon>(X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(x))) = ((\\<tau> \\<Turnstile>(\\<delta> X)) \\<and> (\\<tau> \\<Turnstile>(\\<upsilon> x)))\"", "lemma OclExcluding_valid_args_valid''[simp,code_unfold]:\n\"\\<upsilon>(X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(x)) = ((\\<delta> X) and (\\<upsilon> x))\"", "lemma OclIncludes_valid_args_valid:\n\"(\\<tau> \\<Turnstile> \\<upsilon>(X->includes\\<^sub>S\\<^sub>e\\<^sub>t(x))) = ((\\<tau> \\<Turnstile>(\\<delta> X)) \\<and> (\\<tau> \\<Turnstile>(\\<upsilon> x)))\"", "lemma OclIncludes_valid_args_valid''[simp,code_unfold]:\n\"\\<upsilon>(X->includes\\<^sub>S\\<^sub>e\\<^sub>t(x)) = ((\\<delta> X) and (\\<upsilon> x))\"", "lemma OclExcludes_valid_args_valid:\n\"(\\<tau> \\<Turnstile> \\<upsilon>(X->excludes\\<^sub>S\\<^sub>e\\<^sub>t(x))) = ((\\<tau> \\<Turnstile>(\\<delta> X)) \\<and> (\\<tau> \\<Turnstile>(\\<upsilon> x)))\"", "lemma OclExcludes_valid_args_valid''[simp,code_unfold]:\n\"\\<upsilon>(X->excludes\\<^sub>S\\<^sub>e\\<^sub>t(x)) = ((\\<delta> X) and (\\<upsilon> x))\"", "lemma OclSize_defined_args_valid: \"\\<tau> \\<Turnstile> \\<delta> (X->size\\<^sub>S\\<^sub>e\\<^sub>t()) \\<Longrightarrow> \\<tau> \\<Turnstile> \\<delta> X\"", "lemma OclSize_infinite:\nassumes non_finite:\"\\<tau> \\<Turnstile> not(\\<delta>(S->size\\<^sub>S\\<^sub>e\\<^sub>t()))\"\nshows   \"(\\<tau> \\<Turnstile> not(\\<delta>(S))) \\<or> \\<not> finite \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e (S \\<tau>)\\<rceil>\\<rceil>\"", "lemma \"\\<tau> \\<Turnstile> \\<delta> X \\<Longrightarrow> \\<not> finite \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e (X \\<tau>)\\<rceil>\\<rceil> \\<Longrightarrow> \\<not> \\<tau> \\<Turnstile> \\<delta> (X->size\\<^sub>S\\<^sub>e\\<^sub>t())\"", "lemma size_defined:\n assumes X_finite: \"\\<And>\\<tau>. finite \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e (X \\<tau>)\\<rceil>\\<rceil>\"\n shows \"\\<delta> (X->size\\<^sub>S\\<^sub>e\\<^sub>t()) = \\<delta> X\"", "lemma size_defined':\n assumes X_finite: \"finite \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e (X \\<tau>)\\<rceil>\\<rceil>\"\n shows \"(\\<tau> \\<Turnstile> \\<delta> (X->size\\<^sub>S\\<^sub>e\\<^sub>t())) = (\\<tau> \\<Turnstile> \\<delta> X)\"", "lemma OclIsEmpty_defined_args_valid:\"\\<tau> \\<Turnstile> \\<delta> (X->isEmpty\\<^sub>S\\<^sub>e\\<^sub>t()) \\<Longrightarrow> \\<tau> \\<Turnstile> \\<upsilon> X\"", "lemma \"\\<tau> \\<Turnstile> \\<delta> (null->isEmpty\\<^sub>S\\<^sub>e\\<^sub>t())\"", "lemma OclIsEmpty_infinite: \"\\<tau> \\<Turnstile> \\<delta> X \\<Longrightarrow> \\<not> finite \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e (X \\<tau>)\\<rceil>\\<rceil> \\<Longrightarrow> \\<not> \\<tau> \\<Turnstile> \\<delta> (X->isEmpty\\<^sub>S\\<^sub>e\\<^sub>t())\"", "lemma OclNotEmpty_defined_args_valid:\"\\<tau> \\<Turnstile> \\<delta> (X->notEmpty\\<^sub>S\\<^sub>e\\<^sub>t()) \\<Longrightarrow> \\<tau> \\<Turnstile> \\<upsilon> X\"", "lemma \"\\<tau> \\<Turnstile> \\<delta> (null->notEmpty\\<^sub>S\\<^sub>e\\<^sub>t())\"", "lemma OclNotEmpty_infinite: \"\\<tau> \\<Turnstile> \\<delta> X \\<Longrightarrow> \\<not> finite \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e (X \\<tau>)\\<rceil>\\<rceil> \\<Longrightarrow> \\<not> \\<tau> \\<Turnstile> \\<delta> (X->notEmpty\\<^sub>S\\<^sub>e\\<^sub>t())\"", "lemma OclNotEmpty_has_elt : \"\\<tau> \\<Turnstile> \\<delta> X \\<Longrightarrow>\n                          \\<tau> \\<Turnstile> X->notEmpty\\<^sub>S\\<^sub>e\\<^sub>t() \\<Longrightarrow>\n                          \\<exists>e. e \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e (X \\<tau>)\\<rceil>\\<rceil>\"", "lemma OclANY_defined_args_valid: \"\\<tau> \\<Turnstile> \\<delta> (X->any\\<^sub>S\\<^sub>e\\<^sub>t()) \\<Longrightarrow> \\<tau> \\<Turnstile> \\<delta> X\"", "lemma \"\\<tau> \\<Turnstile> \\<delta> X \\<Longrightarrow> \\<tau> \\<Turnstile> X->isEmpty\\<^sub>S\\<^sub>e\\<^sub>t() \\<Longrightarrow> \\<not> \\<tau> \\<Turnstile> \\<delta> (X->any\\<^sub>S\\<^sub>e\\<^sub>t())\"", "lemma OclANY_valid_args_valid:\n\"(\\<tau> \\<Turnstile> \\<upsilon>(X->any\\<^sub>S\\<^sub>e\\<^sub>t())) = (\\<tau> \\<Turnstile> \\<upsilon> X)\"", "lemma OclANY_valid_args_valid''[simp,code_unfold]:\n\"\\<upsilon>(X->any\\<^sub>S\\<^sub>e\\<^sub>t()) = (\\<upsilon> X)\"", "lemma OclSize_invalid[simp,code_unfold]:\"(invalid->size\\<^sub>S\\<^sub>e\\<^sub>t()) = invalid\"", "lemma OclSize_null[simp,code_unfold]:\"(null->size\\<^sub>S\\<^sub>e\\<^sub>t()) = invalid\"", "lemma OclIsEmpty_invalid[simp,code_unfold]:\"(invalid->isEmpty\\<^sub>S\\<^sub>e\\<^sub>t()) = invalid\"", "lemma OclIsEmpty_null[simp,code_unfold]:\"(null->isEmpty\\<^sub>S\\<^sub>e\\<^sub>t()) = true\"", "lemma OclNotEmpty_invalid[simp,code_unfold]:\"(invalid->notEmpty\\<^sub>S\\<^sub>e\\<^sub>t()) = invalid\"", "lemma OclNotEmpty_null[simp,code_unfold]:\"(null->notEmpty\\<^sub>S\\<^sub>e\\<^sub>t()) = false\"", "lemma OclANY_invalid[simp,code_unfold]:\"(invalid->any\\<^sub>S\\<^sub>e\\<^sub>t()) = invalid\"", "lemma OclANY_null[simp,code_unfold]:\"(null->any\\<^sub>S\\<^sub>e\\<^sub>t()) = null\"", "lemma OclForall_invalid[simp,code_unfold]:\"invalid->forAll\\<^sub>S\\<^sub>e\\<^sub>t(a| P a) = invalid\"", "lemma OclForall_null[simp,code_unfold]:\"null->forAll\\<^sub>S\\<^sub>e\\<^sub>t(a | P a) = invalid\"", "lemma OclExists_invalid[simp,code_unfold]:\"invalid->exists\\<^sub>S\\<^sub>e\\<^sub>t(a| P a) = invalid\"", "lemma OclExists_null[simp,code_unfold]:\"null->exists\\<^sub>S\\<^sub>e\\<^sub>t(a | P a) = invalid\"", "lemma OclIterate_invalid[simp,code_unfold]:\"invalid->iterate\\<^sub>S\\<^sub>e\\<^sub>t(a; x = A | P a x) = invalid\"", "lemma OclIterate_null[simp,code_unfold]:\"null->iterate\\<^sub>S\\<^sub>e\\<^sub>t(a; x = A | P a x) = invalid\"", "lemma OclIterate_invalid_args[simp,code_unfold]:\"S->iterate\\<^sub>S\\<^sub>e\\<^sub>t(a; x = invalid | P a x) = invalid\"", "lemma (*OclIterate_null_args[simp,code_unfold]:*) \"S->iterate\\<^sub>S\\<^sub>e\\<^sub>t(a; x = null | P a x) = invalid\"", "lemma OclIterate_infinite:\nassumes non_finite: \"\\<tau> \\<Turnstile> not(\\<delta>(S->size\\<^sub>S\\<^sub>e\\<^sub>t()))\"\nshows \"(OclIterate S A F) \\<tau> = invalid \\<tau>\"", "lemma OclSelect_invalid[simp,code_unfold]:\"invalid->select\\<^sub>S\\<^sub>e\\<^sub>t(a | P a) = invalid\"", "lemma OclSelect_null[simp,code_unfold]:\"null->select\\<^sub>S\\<^sub>e\\<^sub>t(a | P a) = invalid\"", "lemma OclReject_invalid[simp,code_unfold]:\"invalid->reject\\<^sub>S\\<^sub>e\\<^sub>t(a | P a) = invalid\"", "lemma OclReject_null[simp,code_unfold]:\"null->reject\\<^sub>S\\<^sub>e\\<^sub>t(a | P a) = invalid\"", "lemma cp_OclIncludes1:\n\"(X->includes\\<^sub>S\\<^sub>e\\<^sub>t(x)) \\<tau> = (X->includes\\<^sub>S\\<^sub>e\\<^sub>t(\\<lambda> _. x \\<tau>)) \\<tau>\"", "lemma cp_OclSize: \"X->size\\<^sub>S\\<^sub>e\\<^sub>t() \\<tau> = ((\\<lambda>_. X \\<tau>)->size\\<^sub>S\\<^sub>e\\<^sub>t()) \\<tau>\"", "lemma cp_OclIsEmpty: \"X->isEmpty\\<^sub>S\\<^sub>e\\<^sub>t() \\<tau> = ((\\<lambda>_. X \\<tau>)->isEmpty\\<^sub>S\\<^sub>e\\<^sub>t()) \\<tau>\"", "lemma cp_OclNotEmpty: \"X->notEmpty\\<^sub>S\\<^sub>e\\<^sub>t() \\<tau> = ((\\<lambda>_. X \\<tau>)->notEmpty\\<^sub>S\\<^sub>e\\<^sub>t()) \\<tau>\"", "lemma cp_OclANY: \"X->any\\<^sub>S\\<^sub>e\\<^sub>t() \\<tau> = ((\\<lambda>_. X \\<tau>)->any\\<^sub>S\\<^sub>e\\<^sub>t()) \\<tau>\"", "lemma cp_OclForall:\n\"(S->forAll\\<^sub>S\\<^sub>e\\<^sub>t(x | P x)) \\<tau> = ((\\<lambda> _. S \\<tau>)->forAll\\<^sub>S\\<^sub>e\\<^sub>t(x | P (\\<lambda> _. x \\<tau>))) \\<tau>\"", "lemma cp_OclForall1 [simp,intro!]:\n\"cp S \\<Longrightarrow> cp (\\<lambda>X. ((S X)->forAll\\<^sub>S\\<^sub>e\\<^sub>t(x | P x)))\"", "lemma (*cp_OclForall2 [simp,intro!]:*)\n\"cp (\\<lambda>X St x. P (\\<lambda>\\<tau>. x) X St) \\<Longrightarrow> cp S \\<Longrightarrow> cp (\\<lambda>X. (S X)->forAll\\<^sub>S\\<^sub>e\\<^sub>t(x|P x X)) \"", "lemma (*cp_OclForall:*)\n\"cp S \\<Longrightarrow>\n (\\<And> x. cp(P x)) \\<Longrightarrow>\n cp(\\<lambda>X. ((S X)->forAll\\<^sub>S\\<^sub>e\\<^sub>t(x | P x X)))\"", "lemma cp_OclExists:\n\"(S->exists\\<^sub>S\\<^sub>e\\<^sub>t(x | P x)) \\<tau> = ((\\<lambda> _. S \\<tau>)->exists\\<^sub>S\\<^sub>e\\<^sub>t(x | P (\\<lambda> _. x \\<tau>))) \\<tau>\"", "lemma cp_OclExists1 [simp,intro!]:\n\"cp S \\<Longrightarrow> cp (\\<lambda>X. ((S X)->exists\\<^sub>S\\<^sub>e\\<^sub>t(x | P x)))\"", "lemma cp_OclIterate: \n     \"(X->iterate\\<^sub>S\\<^sub>e\\<^sub>t(a; x = A | P a x)) \\<tau> =\n                ((\\<lambda> _. X \\<tau>)->iterate\\<^sub>S\\<^sub>e\\<^sub>t(a; x = A | P a x)) \\<tau>\"", "lemma cp_OclSelect: \"(X->select\\<^sub>S\\<^sub>e\\<^sub>t(a | P a)) \\<tau> =\n                ((\\<lambda> _. X \\<tau>)->select\\<^sub>S\\<^sub>e\\<^sub>t(a | P a)) \\<tau>\"", "lemma cp_OclReject: \"(X->reject\\<^sub>S\\<^sub>e\\<^sub>t(a | P a)) \\<tau> = ((\\<lambda> _. X \\<tau>)->reject\\<^sub>S\\<^sub>e\\<^sub>t(a | P a)) \\<tau>\"", "lemmas cp_intro''\\<^sub>S\\<^sub>e\\<^sub>t[intro!,simp,code_unfold] =\n       cp_OclSize      [THEN allI[THEN allI[THEN cpI1], of \"OclSize\"]]\n       cp_OclIsEmpty   [THEN allI[THEN allI[THEN cpI1], of \"OclIsEmpty\"]]\n       cp_OclNotEmpty  [THEN allI[THEN allI[THEN cpI1], of \"OclNotEmpty\"]]\n       cp_OclANY       [THEN allI[THEN allI[THEN cpI1], of \"OclANY\"]]", "lemma const_OclIncluding[simp,code_unfold] :\n assumes const_x : \"const x\"\n     and const_S : \"const S\"\n   shows  \"const (S->including\\<^sub>S\\<^sub>e\\<^sub>t(x))\"", "lemma OclIncluding_finite_rep_set :\n  assumes X_def : \"\\<tau> \\<Turnstile> \\<delta> X\"\n      and x_val : \"\\<tau> \\<Turnstile> \\<upsilon> x\"\n    shows \"finite \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e (X->including\\<^sub>S\\<^sub>e\\<^sub>t(x) \\<tau>)\\<rceil>\\<rceil> = finite \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e (X \\<tau>)\\<rceil>\\<rceil>\"", "lemma OclIncluding_rep_set:\n assumes S_def: \"\\<tau> \\<Turnstile> \\<delta> S\"\n   shows \"\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e (S->including\\<^sub>S\\<^sub>e\\<^sub>t(\\<lambda>_. \\<lfloor>\\<lfloor>x\\<rfloor>\\<rfloor>) \\<tau>)\\<rceil>\\<rceil> = insert \\<lfloor>\\<lfloor>x\\<rfloor>\\<rfloor> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e (S \\<tau>)\\<rceil>\\<rceil>\"", "lemma OclIncluding_notempty_rep_set:\n assumes X_def: \"\\<tau> \\<Turnstile> \\<delta> X\"\n     and a_val: \"\\<tau> \\<Turnstile> \\<upsilon> a\"\n  shows \"\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e (X->including\\<^sub>S\\<^sub>e\\<^sub>t(a) \\<tau>)\\<rceil>\\<rceil> \\<noteq> {}\"", "lemma OclIncluding_includes0:\n assumes \"\\<tau> \\<Turnstile> X->includes\\<^sub>S\\<^sub>e\\<^sub>t(x)\"\n   shows \"X->including\\<^sub>S\\<^sub>e\\<^sub>t(x) \\<tau> = X \\<tau>\"", "lemma OclIncluding_includes:\n assumes \"\\<tau> \\<Turnstile> X->includes\\<^sub>S\\<^sub>e\\<^sub>t(x)\"\n   shows \"\\<tau> \\<Turnstile> X->including\\<^sub>S\\<^sub>e\\<^sub>t(x) \\<triangleq> X\"", "lemma OclIncluding_commute0 :\n assumes S_def : \"\\<tau> \\<Turnstile> \\<delta> S\"\n     and i_val : \"\\<tau> \\<Turnstile> \\<upsilon> i\"\n     and j_val : \"\\<tau> \\<Turnstile> \\<upsilon> j\"\n   shows \"\\<tau> \\<Turnstile> ((S :: ('\\<AA>, 'a::null) Set)->including\\<^sub>S\\<^sub>e\\<^sub>t(i)->including\\<^sub>S\\<^sub>e\\<^sub>t(j) \\<triangleq> (S->including\\<^sub>S\\<^sub>e\\<^sub>t(j)->including\\<^sub>S\\<^sub>e\\<^sub>t(i)))\"", "lemma OclIncluding_commute[simp,code_unfold]:\n\"((S :: ('\\<AA>, 'a::null) Set)->including\\<^sub>S\\<^sub>e\\<^sub>t(i)->including\\<^sub>S\\<^sub>e\\<^sub>t(j) = (S->including\\<^sub>S\\<^sub>e\\<^sub>t(j)->including\\<^sub>S\\<^sub>e\\<^sub>t(i)))\"", "lemma OclExcluding_finite_rep_set :\n  assumes X_def : \"\\<tau> \\<Turnstile> \\<delta> X\"\n      and x_val : \"\\<tau> \\<Turnstile> \\<upsilon> x\"\n    shows \"finite \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e (X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(x) \\<tau>)\\<rceil>\\<rceil> = finite \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e (X \\<tau>)\\<rceil>\\<rceil>\"", "lemma OclExcluding_rep_set:\n assumes S_def: \"\\<tau> \\<Turnstile> \\<delta> S\"\n   shows \"\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e (S->excluding\\<^sub>S\\<^sub>e\\<^sub>t(\\<lambda>_. \\<lfloor>\\<lfloor>x\\<rfloor>\\<rfloor>) \\<tau>)\\<rceil>\\<rceil> = \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e (S \\<tau>)\\<rceil>\\<rceil> - {\\<lfloor>\\<lfloor>x\\<rfloor>\\<rfloor>}\"", "lemma OclExcluding_excludes0:\n assumes \"\\<tau> \\<Turnstile> X->excludes\\<^sub>S\\<^sub>e\\<^sub>t(x)\"\n   shows \"X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(x) \\<tau> = X \\<tau>\"", "lemma OclExcluding_excludes:\n assumes \"\\<tau> \\<Turnstile> X->excludes\\<^sub>S\\<^sub>e\\<^sub>t(x)\"\n   shows \"\\<tau> \\<Turnstile> X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(x) \\<triangleq> X\"", "lemma OclExcluding_charn0[simp]:\nassumes val_x:\"\\<tau> \\<Turnstile> (\\<upsilon> x)\"\nshows         \"\\<tau> \\<Turnstile> ((Set{}->excluding\\<^sub>S\\<^sub>e\\<^sub>t(x))  \\<triangleq>  Set{})\"", "lemma OclExcluding_commute0 :\n assumes S_def : \"\\<tau> \\<Turnstile> \\<delta> S\"\n     and i_val : \"\\<tau> \\<Turnstile> \\<upsilon> i\"\n     and j_val : \"\\<tau> \\<Turnstile> \\<upsilon> j\"\n   shows \"\\<tau> \\<Turnstile> ((S :: ('\\<AA>, 'a::null) Set)->excluding\\<^sub>S\\<^sub>e\\<^sub>t(i)->excluding\\<^sub>S\\<^sub>e\\<^sub>t(j) \\<triangleq> (S->excluding\\<^sub>S\\<^sub>e\\<^sub>t(j)->excluding\\<^sub>S\\<^sub>e\\<^sub>t(i)))\"", "lemma OclExcluding_commute[simp,code_unfold]:\n\"((S :: ('\\<AA>, 'a::null) Set)->excluding\\<^sub>S\\<^sub>e\\<^sub>t(i)->excluding\\<^sub>S\\<^sub>e\\<^sub>t(j) = (S->excluding\\<^sub>S\\<^sub>e\\<^sub>t(j)->excluding\\<^sub>S\\<^sub>e\\<^sub>t(i)))\"", "lemma OclExcluding_charn0_exec[simp,code_unfold]:\n\"(Set{}->excluding\\<^sub>S\\<^sub>e\\<^sub>t(x)) = (if (\\<upsilon> x) then Set{} else invalid endif)\"", "lemma OclExcluding_charn1:\nassumes def_X:\"\\<tau> \\<Turnstile> (\\<delta> X)\"\nand     val_x:\"\\<tau> \\<Turnstile> (\\<upsilon> x)\"\nand     val_y:\"\\<tau> \\<Turnstile> (\\<upsilon> y)\"\nand     neq  :\"\\<tau> \\<Turnstile> not(x \\<triangleq> y)\"\nshows         \"\\<tau> \\<Turnstile> ((X->including\\<^sub>S\\<^sub>e\\<^sub>t(x))->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y)) \\<triangleq> ((X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y))->including\\<^sub>S\\<^sub>e\\<^sub>t(x))\"", "lemma OclExcluding_charn2:\nassumes def_X:\"\\<tau> \\<Turnstile> (\\<delta> X)\"\nand     val_x:\"\\<tau> \\<Turnstile> (\\<upsilon> x)\"\nshows         \"\\<tau> \\<Turnstile> (((X->including\\<^sub>S\\<^sub>e\\<^sub>t(x))->excluding\\<^sub>S\\<^sub>e\\<^sub>t(x)) \\<triangleq> (X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(x)))\"", "theorem OclExcluding_charn3:  \"((X->including\\<^sub>S\\<^sub>e\\<^sub>t(x))->excluding\\<^sub>S\\<^sub>e\\<^sub>t(x)) = (X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(x))\"", "lemma OclExcluding_charn_exec:\n assumes strict1: \"(invalid \\<doteq> y) = invalid\"\n and     strict2: \"(x \\<doteq> invalid) = invalid\"\n and     StrictRefEq_valid_args_valid: \"\\<And> (x::('\\<AA>,'a::null)val) y \\<tau>.\n                                     (\\<tau> \\<Turnstile> \\<delta> (x \\<doteq> y)) = ((\\<tau> \\<Turnstile> (\\<upsilon> x)) \\<and> (\\<tau> \\<Turnstile> \\<upsilon> y))\"\n and     cp_StrictRefEq: \"\\<And> (X::('\\<AA>,'a::null)val) Y \\<tau>. (X \\<doteq> Y) \\<tau> = ((\\<lambda>_. X \\<tau>) \\<doteq> (\\<lambda>_. Y \\<tau>)) \\<tau>\"\n and     StrictRefEq_vs_StrongEq: \"\\<And> (x::('\\<AA>,'a::null)val) y \\<tau>.\n                                      \\<tau> \\<Turnstile> \\<upsilon> x \\<Longrightarrow> \\<tau> \\<Turnstile> \\<upsilon> y \\<Longrightarrow> (\\<tau> \\<Turnstile> ((x \\<doteq> y) \\<triangleq> (x \\<triangleq> y)))\"\n shows \"(X->including\\<^sub>S\\<^sub>e\\<^sub>t(x::('\\<AA>,'a::null)val)->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y)) =\n        (if \\<delta> X then if x \\<doteq> y\n                     then X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y)\n                     else X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y)->including\\<^sub>S\\<^sub>e\\<^sub>t(x)\n                     endif\n                else invalid endif)\"", "lemma OclIncludes_charn0[simp]:\nassumes val_x:\"\\<tau> \\<Turnstile> (\\<upsilon> x)\"\nshows         \"\\<tau> \\<Turnstile> not(Set{}->includes\\<^sub>S\\<^sub>e\\<^sub>t(x))\"", "lemma OclIncludes_charn0'[simp,code_unfold]:\n\"Set{}->includes\\<^sub>S\\<^sub>e\\<^sub>t(x) = (if \\<upsilon> x then false else invalid endif)\"", "lemma OclIncludes_charn1:\nassumes def_X:\"\\<tau> \\<Turnstile> (\\<delta> X)\"\nassumes val_x:\"\\<tau> \\<Turnstile> (\\<upsilon> x)\"\nshows         \"\\<tau> \\<Turnstile> (X->including\\<^sub>S\\<^sub>e\\<^sub>t(x)->includes\\<^sub>S\\<^sub>e\\<^sub>t(x))\"", "lemma OclIncludes_charn2:\nassumes def_X:\"\\<tau> \\<Turnstile> (\\<delta> X)\"\nand     val_x:\"\\<tau> \\<Turnstile> (\\<upsilon> x)\"\nand     val_y:\"\\<tau> \\<Turnstile> (\\<upsilon> y)\"\nand     neq  :\"\\<tau> \\<Turnstile> not(x \\<triangleq> y)\"\nshows         \"\\<tau> \\<Turnstile> (X->including\\<^sub>S\\<^sub>e\\<^sub>t(x)->includes\\<^sub>S\\<^sub>e\\<^sub>t(y)) \\<triangleq> (X->includes\\<^sub>S\\<^sub>e\\<^sub>t(y))\"", "lemma OclIncludes_execute_generic:\nassumes strict1: \"(invalid \\<doteq> y) = invalid\"\nand     strict2: \"(x \\<doteq> invalid) = invalid\"\nand     cp_StrictRefEq: \"\\<And> (X::('\\<AA>,'a::null)val) Y \\<tau>. (X \\<doteq> Y) \\<tau> = ((\\<lambda>_. X \\<tau>) \\<doteq> (\\<lambda>_. Y \\<tau>)) \\<tau>\"\nand     StrictRefEq_vs_StrongEq: \"\\<And> (x::('\\<AA>,'a::null)val) y \\<tau>.\n                                      \\<tau> \\<Turnstile> \\<upsilon> x \\<Longrightarrow> \\<tau> \\<Turnstile> \\<upsilon> y \\<Longrightarrow> (\\<tau> \\<Turnstile> ((x \\<doteq> y) \\<triangleq> (x \\<triangleq> y)))\"\nshows\n      \"(X->including\\<^sub>S\\<^sub>e\\<^sub>t(x::('\\<AA>,'a::null)val)->includes\\<^sub>S\\<^sub>e\\<^sub>t(y)) =\n       (if \\<delta> X then if x \\<doteq> y then true else X->includes\\<^sub>S\\<^sub>e\\<^sub>t(y) endif else invalid endif)\"", "lemma OclIncludes_including_generic :\n assumes OclIncludes_execute_generic [simp] : \"\\<And>X x y.\n           (X->including\\<^sub>S\\<^sub>e\\<^sub>t(x::('\\<AA>,'a::null)val)->includes\\<^sub>S\\<^sub>e\\<^sub>t(y)) =\n           (if \\<delta> X then if x \\<doteq> y then true else X->includes\\<^sub>S\\<^sub>e\\<^sub>t(y) endif else invalid endif)\"\n     and StrictRefEq_strict'' : \"\\<And>x y. \\<delta> ((x::('\\<AA>,'a::null)val) \\<doteq> y) = (\\<upsilon>(x) and \\<upsilon>(y))\"\n     and a_val : \"\\<tau> \\<Turnstile> \\<upsilon> a\"\n     and x_val : \"\\<tau> \\<Turnstile> \\<upsilon> x\"\n     and S_incl : \"\\<tau> \\<Turnstile> (S)->includes\\<^sub>S\\<^sub>e\\<^sub>t((x::('\\<AA>,'a::null)val))\"\n   shows \"\\<tau> \\<Turnstile> S->including\\<^sub>S\\<^sub>e\\<^sub>t((a::('\\<AA>,'a::null)val))->includes\\<^sub>S\\<^sub>e\\<^sub>t(x)\"", "lemmas OclIncludes_including\\<^sub>I\\<^sub>n\\<^sub>t\\<^sub>e\\<^sub>g\\<^sub>e\\<^sub>r =\n       OclIncludes_including_generic[OF OclIncludes_execute\\<^sub>I\\<^sub>n\\<^sub>t\\<^sub>e\\<^sub>g\\<^sub>e\\<^sub>r StrictRefEq\\<^sub>I\\<^sub>n\\<^sub>t\\<^sub>e\\<^sub>g\\<^sub>e\\<^sub>r.def_homo]", "lemma OclExcludes_charn1:\nassumes def_X:\"\\<tau> \\<Turnstile> (\\<delta> X)\"\nassumes val_x:\"\\<tau> \\<Turnstile> (\\<upsilon> x)\"\nshows         \"\\<tau> \\<Turnstile> (X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(x)->excludes\\<^sub>S\\<^sub>e\\<^sub>t(x))\"", "lemma [simp,code_unfold]: \"Set{} ->size\\<^sub>S\\<^sub>e\\<^sub>t() = \\<zero>\"", "lemma OclSize_including_exec[simp,code_unfold]:\n \"((X ->including\\<^sub>S\\<^sub>e\\<^sub>t(x)) ->size\\<^sub>S\\<^sub>e\\<^sub>t()) = (if \\<delta> X and \\<upsilon> x then\n                                     X ->size\\<^sub>S\\<^sub>e\\<^sub>t() +\\<^sub>i\\<^sub>n\\<^sub>t if X ->includes\\<^sub>S\\<^sub>e\\<^sub>t(x) then \\<zero> else \\<one> endif\n                                   else\n                                     invalid\n                                   endif)\"", "lemma [simp,code_unfold]: \"Set{}->isEmpty\\<^sub>S\\<^sub>e\\<^sub>t() = true\"", "lemma OclIsEmpty_including [simp]:\nassumes X_def: \"\\<tau> \\<Turnstile> \\<delta> X\"\n    and X_finite: \"finite \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e (X \\<tau>)\\<rceil>\\<rceil>\"\n    and a_val: \"\\<tau> \\<Turnstile> \\<upsilon> a\"\nshows \"X->including\\<^sub>S\\<^sub>e\\<^sub>t(a)->isEmpty\\<^sub>S\\<^sub>e\\<^sub>t() \\<tau> = false \\<tau>\"", "lemma [simp,code_unfold]: \"Set{}->notEmpty\\<^sub>S\\<^sub>e\\<^sub>t() = false\"", "lemma OclNotEmpty_including [simp,code_unfold]:\nassumes X_def: \"\\<tau> \\<Turnstile> \\<delta> X\"\n    and X_finite: \"finite \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e (X \\<tau>)\\<rceil>\\<rceil>\"\n    and a_val: \"\\<tau> \\<Turnstile> \\<upsilon> a\"\nshows \"X->including\\<^sub>S\\<^sub>e\\<^sub>t(a)->notEmpty\\<^sub>S\\<^sub>e\\<^sub>t() \\<tau> = true \\<tau>\"", "lemma [simp,code_unfold]: \"Set{}->any\\<^sub>S\\<^sub>e\\<^sub>t() = null\"", "lemma OclANY_singleton_exec[simp,code_unfold]:\n      \"(Set{}->including\\<^sub>S\\<^sub>e\\<^sub>t(a))->any\\<^sub>S\\<^sub>e\\<^sub>t() = a\"", "lemma OclForall_mtSet_exec[simp,code_unfold] :\"((Set{})->forAll\\<^sub>S\\<^sub>e\\<^sub>t(z| P(z))) = true\"", "theorem OclForall_including_exec[simp,code_unfold] :\n        assumes cp0 : \"cp P\"\n        shows         \"((S->including\\<^sub>S\\<^sub>e\\<^sub>t(x))->forAll\\<^sub>S\\<^sub>e\\<^sub>t(z | P(z))) = (if \\<delta> S and \\<upsilon> x\n                                                                then P x and (S->forAll\\<^sub>S\\<^sub>e\\<^sub>t(z | P(z)))\n                                                                else invalid\n                                                                endif)\"", "lemma OclExists_mtSet_exec[simp,code_unfold] :\n\"((Set{})->exists\\<^sub>S\\<^sub>e\\<^sub>t(z | P(z))) = false\"", "lemma OclExists_including_exec[simp,code_unfold] :\n assumes cp: \"cp P\"\n shows \"((S->including\\<^sub>S\\<^sub>e\\<^sub>t(x))->exists\\<^sub>S\\<^sub>e\\<^sub>t(z | P(z))) = (if \\<delta> S and \\<upsilon> x\n                                                 then P x or (S->exists\\<^sub>S\\<^sub>e\\<^sub>t(z | P(z)))\n                                                 else invalid\n                                                 endif)\"", "lemma OclIterate_empty[simp,code_unfold]: \"((Set{})->iterate\\<^sub>S\\<^sub>e\\<^sub>t(a; x = A | P a x)) = A\"", "lemma OclIterate_including:\nassumes S_finite:    \"\\<tau> \\<Turnstile> \\<delta>(S->size\\<^sub>S\\<^sub>e\\<^sub>t())\"\nand     F_valid_arg: \"(\\<upsilon> A) \\<tau> = (\\<upsilon> (F a A)) \\<tau>\"\nand     F_commute:   \"comp_fun_commute F\"\nand     F_cp:        \"\\<And> x y \\<tau>. F x y \\<tau> = F (\\<lambda> _. x \\<tau>) y \\<tau>\"\nshows   \"((S->including\\<^sub>S\\<^sub>e\\<^sub>t(a))->iterate\\<^sub>S\\<^sub>e\\<^sub>t(a; x =     A | F a x)) \\<tau> =\n         ((S->excluding\\<^sub>S\\<^sub>e\\<^sub>t(a))->iterate\\<^sub>S\\<^sub>e\\<^sub>t(a; x = F a A | F a x)) \\<tau>\"", "lemma OclSelect_mtSet_exec[simp,code_unfold]: \"OclSelect mtSet P = mtSet\"", "theorem OclSelect_including_exec[simp,code_unfold]:\n assumes P_cp : \"cp P\"\n shows \"OclSelect (X->including\\<^sub>S\\<^sub>e\\<^sub>t(y)) P = OclSelect_body P y (OclSelect (X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y)) P)\"\n (is \"_ = ?select\")", "lemma OclReject_mtSet_exec[simp,code_unfold]: \"OclReject mtSet P = mtSet\"", "lemma OclReject_including_exec[simp,code_unfold]:\n assumes P_cp : \"cp P\"\n shows \"OclReject (X->including\\<^sub>S\\<^sub>e\\<^sub>t(y)) P = OclSelect_body (not o P) y (OclReject (X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y)) P)\"", "lemma OclIncluding_idem0 :\n assumes \"\\<tau> \\<Turnstile> \\<delta> S\"\n     and \"\\<tau> \\<Turnstile> \\<upsilon> i\"\n   shows \"\\<tau> \\<Turnstile> (S->including\\<^sub>S\\<^sub>e\\<^sub>t(i)->including\\<^sub>S\\<^sub>e\\<^sub>t(i) \\<triangleq> (S->including\\<^sub>S\\<^sub>e\\<^sub>t(i)))\"", "theorem OclIncluding_idem[simp,code_unfold]: \"((S :: ('\\<AA>,'a::null)Set)->including\\<^sub>S\\<^sub>e\\<^sub>t(i)->including\\<^sub>S\\<^sub>e\\<^sub>t(i) = (S->including\\<^sub>S\\<^sub>e\\<^sub>t(i)))\"", "lemma OclExcluding_idem0 :\n assumes \"\\<tau> \\<Turnstile> \\<delta> S\"\n     and \"\\<tau> \\<Turnstile> \\<upsilon> i\"\n   shows \"\\<tau> \\<Turnstile> (S->excluding\\<^sub>S\\<^sub>e\\<^sub>t(i)->excluding\\<^sub>S\\<^sub>e\\<^sub>t(i) \\<triangleq> (S->excluding\\<^sub>S\\<^sub>e\\<^sub>t(i)))\"", "theorem OclExcluding_idem[simp,code_unfold]: \"((S->excluding\\<^sub>S\\<^sub>e\\<^sub>t(i))->excluding\\<^sub>S\\<^sub>e\\<^sub>t(i)) = (S->excluding\\<^sub>S\\<^sub>e\\<^sub>t(i))\"", "lemma OclIncludes_any[simp,code_unfold]:\n      \"X->includes\\<^sub>S\\<^sub>e\\<^sub>t(X->any\\<^sub>S\\<^sub>e\\<^sub>t()) = (if \\<delta> X then\n                                  if \\<delta> (X->size\\<^sub>S\\<^sub>e\\<^sub>t()) then not(X->isEmpty\\<^sub>S\\<^sub>e\\<^sub>t())\n                                  else X->includes\\<^sub>S\\<^sub>e\\<^sub>t(null) endif\n                                else invalid endif)\"", "lemma [simp,code_unfold]: \"\\<delta> (Set{} ->size\\<^sub>S\\<^sub>e\\<^sub>t()) = true\"", "lemma [simp,code_unfold]: \"\\<delta> ((X ->including\\<^sub>S\\<^sub>e\\<^sub>t(x)) ->size\\<^sub>S\\<^sub>e\\<^sub>t()) = (\\<delta>(X->size\\<^sub>S\\<^sub>e\\<^sub>t()) and \\<upsilon>(x))\"", "lemma [simp,code_unfold]: \"\\<delta> ((X ->excluding\\<^sub>S\\<^sub>e\\<^sub>t(x)) ->size\\<^sub>S\\<^sub>e\\<^sub>t()) = (\\<delta>(X->size\\<^sub>S\\<^sub>e\\<^sub>t()) and \\<upsilon>(x))\"", "lemma [simp]:\n assumes X_finite: \"\\<And>\\<tau>. finite \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e (X \\<tau>)\\<rceil>\\<rceil>\"\n shows \"\\<delta> ((X ->including\\<^sub>S\\<^sub>e\\<^sub>t(x)) ->size\\<^sub>S\\<^sub>e\\<^sub>t()) = (\\<delta>(X) and \\<upsilon>(x))\"", "lemma OclForall_rep_set_false:\n assumes \"\\<tau> \\<Turnstile> \\<delta> X\"\n shows \"(OclForall X P \\<tau> = false \\<tau>) = (\\<exists>x \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e (X \\<tau>)\\<rceil>\\<rceil>. P (\\<lambda>\\<tau>. x) \\<tau> = false \\<tau>)\"", "lemma OclForall_rep_set_true:\n assumes \"\\<tau> \\<Turnstile> \\<delta> X\"\n shows \"(\\<tau> \\<Turnstile> OclForall X P) = (\\<forall>x \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e (X \\<tau>)\\<rceil>\\<rceil>. \\<tau> \\<Turnstile> P (\\<lambda>\\<tau>. x))\"", "lemma OclForall_includes :\n assumes x_def : \"\\<tau> \\<Turnstile> \\<delta> x\"\n     and y_def : \"\\<tau> \\<Turnstile> \\<delta> y\"\n   shows \"(\\<tau> \\<Turnstile> OclForall x (OclIncludes y)) = (\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e (x \\<tau>)\\<rceil>\\<rceil> \\<subseteq> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e (y \\<tau>)\\<rceil>\\<rceil>)\"", "lemma OclForall_not_includes :\n assumes x_def : \"\\<tau> \\<Turnstile> \\<delta> x\"\n     and y_def : \"\\<tau> \\<Turnstile> \\<delta> y\"\n   shows \"(OclForall x (OclIncludes y) \\<tau> = false \\<tau>) = (\\<not> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e (x \\<tau>)\\<rceil>\\<rceil> \\<subseteq> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e (y \\<tau>)\\<rceil>\\<rceil>)\"", "lemma OclForall_iterate:\n assumes S_finite: \"finite \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e (S \\<tau>)\\<rceil>\\<rceil>\"\n   shows \"S->forAll\\<^sub>S\\<^sub>e\\<^sub>t(x | P x) \\<tau> = (S->iterate\\<^sub>S\\<^sub>e\\<^sub>t(x; acc = true | acc and P x)) \\<tau>\"", "lemma OclForall_cong:\n assumes \"\\<And>x. x \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e (X \\<tau>)\\<rceil>\\<rceil> \\<Longrightarrow> \\<tau> \\<Turnstile> P (\\<lambda>\\<tau>. x) \\<Longrightarrow> \\<tau> \\<Turnstile> Q (\\<lambda>\\<tau>. x)\"\n assumes P: \"\\<tau> \\<Turnstile> OclForall X P\"\n shows \"\\<tau> \\<Turnstile> OclForall X Q\"", "lemma OclForall_cong':\n assumes \"\\<And>x. x \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e (X \\<tau>)\\<rceil>\\<rceil> \\<Longrightarrow> \\<tau> \\<Turnstile> P (\\<lambda>\\<tau>. x) \\<Longrightarrow> \\<tau> \\<Turnstile> Q (\\<lambda>\\<tau>. x) \\<Longrightarrow> \\<tau> \\<Turnstile> R (\\<lambda>\\<tau>. x)\"\n assumes P: \"\\<tau> \\<Turnstile> OclForall X P\"\n assumes Q: \"\\<tau> \\<Turnstile> OclForall X Q\"\n shows \"\\<tau> \\<Turnstile> OclForall X R\"", "lemma StrictRefEq\\<^sub>S\\<^sub>e\\<^sub>t_defined :\n assumes x_def: \"\\<tau> \\<Turnstile> \\<delta> x\"\n assumes y_def: \"\\<tau> \\<Turnstile> \\<delta> y\"\n shows \"((x::('\\<AA>,'\\<alpha>::null)Set) \\<doteq> y) \\<tau> =\n                (x->forAll\\<^sub>S\\<^sub>e\\<^sub>t(z| y->includes\\<^sub>S\\<^sub>e\\<^sub>t(z)) and (y->forAll\\<^sub>S\\<^sub>e\\<^sub>t(z| x->includes\\<^sub>S\\<^sub>e\\<^sub>t(z)))) \\<tau>\"", "lemma StrictRefEq\\<^sub>S\\<^sub>e\\<^sub>t_exec[simp,code_unfold] :\n\"((x::('\\<AA>,'\\<alpha>::null)Set) \\<doteq> y) =\n  (if \\<delta> x then (if \\<delta> y\n                then ((x->forAll\\<^sub>S\\<^sub>e\\<^sub>t(z| y->includes\\<^sub>S\\<^sub>e\\<^sub>t(z)) and (y->forAll\\<^sub>S\\<^sub>e\\<^sub>t(z| x->includes\\<^sub>S\\<^sub>e\\<^sub>t(z)))))\n                else if \\<upsilon> y\n                      then false \\<comment> \\<open>\\<open>x'->includes = null\\<close>\\<close>\n                      else invalid\n                      endif\n                endif)\n         else if \\<upsilon> x \\<comment> \\<open>\\<open>null = ???\\<close>\\<close>\n              then if \\<upsilon> y then not(\\<delta> y) else invalid endif\n              else invalid\n              endif\n         endif)\"", "lemma StrictRefEq\\<^sub>S\\<^sub>e\\<^sub>t_L_subst1 : \"cp P \\<Longrightarrow> \\<tau> \\<Turnstile> \\<upsilon> x \\<Longrightarrow> \\<tau> \\<Turnstile> \\<upsilon> y \\<Longrightarrow> \\<tau> \\<Turnstile> \\<upsilon> P x \\<Longrightarrow> \\<tau> \\<Turnstile> \\<upsilon> P y \\<Longrightarrow>\n    \\<tau> \\<Turnstile> (x::('\\<AA>,'\\<alpha>::null)Set) \\<doteq> y \\<Longrightarrow> \\<tau> \\<Turnstile> (P x ::('\\<AA>,'\\<alpha>::null)Set) \\<doteq> P y\"", "lemma OclIncluding_cong' :\nshows \"\\<tau> \\<Turnstile> \\<delta> s \\<Longrightarrow> \\<tau> \\<Turnstile> \\<delta> t \\<Longrightarrow> \\<tau> \\<Turnstile> \\<upsilon> x \\<Longrightarrow>\n    \\<tau> \\<Turnstile> ((s::('\\<AA>,'a::null)Set) \\<doteq> t) \\<Longrightarrow> \\<tau> \\<Turnstile> (s->including\\<^sub>S\\<^sub>e\\<^sub>t(x) \\<doteq> (t->including\\<^sub>S\\<^sub>e\\<^sub>t(x)))\"", "lemma OclIncluding_cong : \"\\<And>(s::('\\<AA>,'a::null)Set) t x y \\<tau>. \\<tau> \\<Turnstile> \\<delta> t \\<Longrightarrow> \\<tau> \\<Turnstile> \\<upsilon> y \\<Longrightarrow>\n                             \\<tau> \\<Turnstile> s \\<doteq> t \\<Longrightarrow> x = y \\<Longrightarrow> \\<tau> \\<Turnstile> s->including\\<^sub>S\\<^sub>e\\<^sub>t(x) \\<doteq> (t->including\\<^sub>S\\<^sub>e\\<^sub>t(y))\"", "lemma const_StrictRefEq\\<^sub>S\\<^sub>e\\<^sub>t_empty : \"const X \\<Longrightarrow>  const (X \\<doteq> Set{})\"", "lemma const_StrictRefEq\\<^sub>S\\<^sub>e\\<^sub>t_including : \n \"const a \\<Longrightarrow> const S \\<Longrightarrow> const X \\<Longrightarrow>  const (X \\<doteq> S->including\\<^sub>S\\<^sub>e\\<^sub>t(a))\"", "lemma equal_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e_code [code]:\n  \"HOL.equal k (l::('a::{equal,null})Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e) \\<longleftrightarrow> Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e k = Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e l\""], "translations": [["", "lemma Integer_defined : \"\\<delta> Integer = true\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<delta> Integer = true", "apply(rule ext, auto simp: Integer_def defined_def false_def true_def\n                           bot_fun_def null_fun_def null_option_def)"], ["proof (prove)\ngoal (2 subgoals):\n 1. Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n     \\<lfloor>\\<lfloor>range\n                        (\\<lambda>x.\n                            \\<lfloor>\\<lfloor>x\\<rfloor>\\<rfloor>)\\<rfloor>\\<rfloor> =\n    \\<bottom> \\<Longrightarrow>\n    False\n 2. Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n     \\<lfloor>\\<lfloor>range\n                        (\\<lambda>x.\n                            \\<lfloor>\\<lfloor>x\\<rfloor>\\<rfloor>)\\<rfloor>\\<rfloor> =\n    null \\<Longrightarrow>\n    False", "by(simp_all add: Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e_inject bot_option_def bot_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e_def null_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e_def null_option_def)"], ["", "lemma Integer\\<^sub>n\\<^sub>u\\<^sub>l\\<^sub>l_defined : \"\\<delta> Integer\\<^sub>n\\<^sub>u\\<^sub>l\\<^sub>l = true\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<delta> Integer\\<^sub>n\\<^sub>u\\<^sub>l\\<^sub>l = true", "apply(rule ext, auto simp: Integer\\<^sub>n\\<^sub>u\\<^sub>l\\<^sub>l_def defined_def false_def true_def\n                           bot_fun_def null_fun_def null_option_def)"], ["proof (prove)\ngoal (2 subgoals):\n 1. Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n     \\<lfloor>\\<lfloor>range Some\\<rfloor>\\<rfloor> =\n    \\<bottom> \\<Longrightarrow>\n    False\n 2. Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n     \\<lfloor>\\<lfloor>range Some\\<rfloor>\\<rfloor> =\n    null \\<Longrightarrow>\n    False", "by(simp_all add: Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e_inject bot_option_def bot_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e_def null_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e_def null_option_def)"], ["", "text\\<open>This allows the theorems:\n\n      \\<open>\\<tau> \\<Turnstile> \\<delta> x  \\<Longrightarrow> \\<tau> \\<Turnstile> (Integer->includes\\<^sub>S\\<^sub>e\\<^sub>t(x))\\<close>\n      \\<open>\\<tau> \\<Turnstile> \\<delta> x  \\<Longrightarrow> \\<tau> \\<Turnstile> Integer  \\<triangleq> (Integer->including\\<^sub>S\\<^sub>e\\<^sub>t(x))\\<close>\n\nand\n\n      \\<open>\\<tau> \\<Turnstile> \\<upsilon> x  \\<Longrightarrow> \\<tau> \\<Turnstile> (Integer\\<^sub>n\\<^sub>u\\<^sub>l\\<^sub>l->includes\\<^sub>S\\<^sub>e\\<^sub>t(x))\\<close>\n      \\<open>\\<tau> \\<Turnstile> \\<upsilon> x  \\<Longrightarrow> \\<tau> \\<Turnstile> Integer\\<^sub>n\\<^sub>u\\<^sub>l\\<^sub>l  \\<triangleq> (Integer\\<^sub>n\\<^sub>u\\<^sub>l\\<^sub>l->including\\<^sub>S\\<^sub>e\\<^sub>t(x))\\<close>\n\nwhich characterize the infiniteness of these sets by a recursive property on these sets.\n\\<close>"], ["", "text\\<open>In the same spirit, we proceed similarly for the remaining base types:\\<close>"], ["", "definition Void\\<^sub>n\\<^sub>u\\<^sub>l\\<^sub>l :: \"('\\<AA>,Void\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e) Set\"\nwhere     \"Void\\<^sub>n\\<^sub>u\\<^sub>l\\<^sub>l \\<equiv> (\\<lambda> \\<tau>. (Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e o Some o Some) {Abs_Void\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e (Some None)})\""], ["", "definition Void\\<^sub>e\\<^sub>m\\<^sub>p\\<^sub>t\\<^sub>y :: \"('\\<AA>,Void\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e) Set\"\nwhere     \"Void\\<^sub>e\\<^sub>m\\<^sub>p\\<^sub>t\\<^sub>y \\<equiv> (\\<lambda> \\<tau>. (Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e o Some o Some) {})\""], ["", "lemma Void\\<^sub>n\\<^sub>u\\<^sub>l\\<^sub>l_defined : \"\\<delta> Void\\<^sub>n\\<^sub>u\\<^sub>l\\<^sub>l = true\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<delta> Void\\<^sub>n\\<^sub>u\\<^sub>l\\<^sub>l = true", "apply(rule ext, auto simp: Void\\<^sub>n\\<^sub>u\\<^sub>l\\<^sub>l_def defined_def false_def true_def\n                           bot_fun_def null_fun_def null_option_def\n                           bot_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e_def null_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e_def)"], ["proof (prove)\ngoal (2 subgoals):\n 1. Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n     \\<lfloor>\\<lfloor>{Abs_Void\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                         \\<lfloor>None\\<rfloor>}\\<rfloor>\\<rfloor> =\n    Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e None \\<Longrightarrow>\n    False\n 2. Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n     \\<lfloor>\\<lfloor>{Abs_Void\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                         \\<lfloor>None\\<rfloor>}\\<rfloor>\\<rfloor> =\n    Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n     \\<lfloor>None\\<rfloor> \\<Longrightarrow>\n    False", "by((subst (asm) Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e_inject, auto simp add: bot_option_def null_option_def bot_Void_def),\n   (subst (asm) Abs_Void\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e_inject, auto simp add: bot_option_def null_option_def))+"], ["", "lemma Void\\<^sub>e\\<^sub>m\\<^sub>p\\<^sub>t\\<^sub>y_defined : \"\\<delta> Void\\<^sub>e\\<^sub>m\\<^sub>p\\<^sub>t\\<^sub>y = true\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<delta> Void\\<^sub>e\\<^sub>m\\<^sub>p\\<^sub>t\\<^sub>y = true", "apply(rule ext, auto simp: Void\\<^sub>e\\<^sub>m\\<^sub>p\\<^sub>t\\<^sub>y_def defined_def false_def true_def\n                           bot_fun_def null_fun_def null_option_def\n                           bot_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e_def null_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e_def)"], ["proof (prove)\ngoal (2 subgoals):\n 1. Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n     \\<lfloor>\\<lfloor>{}\\<rfloor>\\<rfloor> =\n    Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e None \\<Longrightarrow>\n    False\n 2. Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n     \\<lfloor>\\<lfloor>{}\\<rfloor>\\<rfloor> =\n    Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n     \\<lfloor>None\\<rfloor> \\<Longrightarrow>\n    False", "by((subst (asm) Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e_inject, auto simp add: bot_option_def null_option_def bot_Void_def))+"], ["", "lemma assumes \"\\<tau> \\<Turnstile> \\<delta> (V :: ('\\<AA>,Void\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e) Set)\"\n      shows   \"\\<tau> \\<Turnstile> V \\<triangleq> Void\\<^sub>n\\<^sub>u\\<^sub>l\\<^sub>l \\<or> \\<tau> \\<Turnstile> V \\<triangleq> Void\\<^sub>e\\<^sub>m\\<^sub>p\\<^sub>t\\<^sub>y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<tau>\n     \\<Turnstile> V \\<triangleq> Void\\<^sub>n\\<^sub>u\\<^sub>l\\<^sub>l \\<or>\n    \\<tau>\n     \\<Turnstile> V \\<triangleq>\n                  Void\\<^sub>e\\<^sub>m\\<^sub>p\\<^sub>t\\<^sub>y", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<tau>\n     \\<Turnstile> V \\<triangleq> Void\\<^sub>n\\<^sub>u\\<^sub>l\\<^sub>l \\<or>\n    \\<tau>\n     \\<Turnstile> V \\<triangleq>\n                  Void\\<^sub>e\\<^sub>m\\<^sub>p\\<^sub>t\\<^sub>y", "have A:\"\\<And>x y. x \\<noteq> {} \\<Longrightarrow> \\<exists>y. y\\<in> x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x y. x \\<noteq> {} \\<Longrightarrow> \\<exists>y. y \\<in> x", "by (metis all_not_in_conv)"], ["proof (state)\nthis:\n  ?x \\<noteq> {} \\<Longrightarrow> \\<exists>y. y \\<in> ?x\n\ngoal (1 subgoal):\n 1. \\<tau>\n     \\<Turnstile> V \\<triangleq> Void\\<^sub>n\\<^sub>u\\<^sub>l\\<^sub>l \\<or>\n    \\<tau>\n     \\<Turnstile> V \\<triangleq>\n                  Void\\<^sub>e\\<^sub>m\\<^sub>p\\<^sub>t\\<^sub>y", "show \"?thesis\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<tau>\n     \\<Turnstile> V \\<triangleq> Void\\<^sub>n\\<^sub>u\\<^sub>l\\<^sub>l \\<or>\n    \\<tau>\n     \\<Turnstile> V \\<triangleq>\n                  Void\\<^sub>e\\<^sub>m\\<^sub>p\\<^sub>t\\<^sub>y", "apply(case_tac \"V \\<tau>\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>y.\n       \\<lbrakk>V \\<tau> = Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e y;\n        y \\<in> {X. X = \\<bottom> \\<or>\n                    X = null \\<or>\n                    (\\<forall>x\\<in>\\<lceil>\\<lceil>X\\<rceil>\\<rceil>.\n                        x \\<noteq> \\<bottom>)}\\<rbrakk>\n       \\<Longrightarrow> \\<tau>\n                          \\<Turnstile> V \\<triangleq>\n Void\\<^sub>n\\<^sub>u\\<^sub>l\\<^sub>l \\<or>\n                         \\<tau>\n                          \\<Turnstile> V \\<triangleq>\n Void\\<^sub>e\\<^sub>m\\<^sub>p\\<^sub>t\\<^sub>y", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>y.\n       \\<lbrakk>V \\<tau> = Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e y;\n        y \\<in> {X. X = \\<bottom> \\<or>\n                    X = null \\<or>\n                    (\\<forall>x\\<in>\\<lceil>\\<lceil>X\\<rceil>\\<rceil>.\n                        x \\<noteq> \\<bottom>)}\\<rbrakk>\n       \\<Longrightarrow> \\<tau>\n                          \\<Turnstile> V \\<triangleq>\n Void\\<^sub>n\\<^sub>u\\<^sub>l\\<^sub>l \\<or>\n                         \\<tau>\n                          \\<Turnstile> V \\<triangleq>\n Void\\<^sub>e\\<^sub>m\\<^sub>p\\<^sub>t\\<^sub>y", "fix y"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>y.\n       \\<lbrakk>V \\<tau> = Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e y;\n        y \\<in> {X. X = \\<bottom> \\<or>\n                    X = null \\<or>\n                    (\\<forall>x\\<in>\\<lceil>\\<lceil>X\\<rceil>\\<rceil>.\n                        x \\<noteq> \\<bottom>)}\\<rbrakk>\n       \\<Longrightarrow> \\<tau>\n                          \\<Turnstile> V \\<triangleq>\n Void\\<^sub>n\\<^sub>u\\<^sub>l\\<^sub>l \\<or>\n                         \\<tau>\n                          \\<Turnstile> V \\<triangleq>\n Void\\<^sub>e\\<^sub>m\\<^sub>p\\<^sub>t\\<^sub>y", "show \"V \\<tau> = Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e y \\<Longrightarrow>\n                      y \\<in> {X. X = \\<bottom> \\<or> X = null \\<or> (\\<forall>x\\<in>\\<lceil>\\<lceil>X\\<rceil>\\<rceil>. x \\<noteq> \\<bottom>)} \\<Longrightarrow>\n                      \\<tau> \\<Turnstile> V \\<triangleq> Void\\<^sub>n\\<^sub>u\\<^sub>l\\<^sub>l \\<or> \\<tau> \\<Turnstile> V \\<triangleq> Void\\<^sub>e\\<^sub>m\\<^sub>p\\<^sub>t\\<^sub>y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>V \\<tau> = Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e y;\n     y \\<in> {X. X = \\<bottom> \\<or>\n                 X = null \\<or>\n                 (\\<forall>x\\<in>\\<lceil>\\<lceil>X\\<rceil>\\<rceil>.\n                     x \\<noteq> \\<bottom>)}\\<rbrakk>\n    \\<Longrightarrow> \\<tau>\n                       \\<Turnstile> V \\<triangleq>\n                                    Void\\<^sub>n\\<^sub>u\\<^sub>l\\<^sub>l \\<or>\n                      \\<tau>\n                       \\<Turnstile> V \\<triangleq>\n                                    Void\\<^sub>e\\<^sub>m\\<^sub>p\\<^sub>t\\<^sub>y", "apply(insert assms, case_tac y, simp add: bot_option_def, simp add: bot_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e_def foundation16)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a.\n       \\<lbrakk>V \\<tau> = Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e y;\n        y \\<in> {X. X = \\<bottom> \\<or>\n                    X = null \\<or>\n                    (\\<forall>x\\<in>\\<lceil>\\<lceil>X\\<rceil>\\<rceil>.\n                        x \\<noteq> \\<bottom>)};\n        \\<tau> \\<Turnstile> \\<delta> V; y = \\<lfloor>a\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> \\<tau>\n                          \\<Turnstile> V \\<triangleq>\n Void\\<^sub>n\\<^sub>u\\<^sub>l\\<^sub>l \\<or>\n                         \\<tau>\n                          \\<Turnstile> V \\<triangleq>\n Void\\<^sub>e\\<^sub>m\\<^sub>p\\<^sub>t\\<^sub>y", "apply(simp add: bot_option_def null_option_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a.\n       \\<lbrakk>V \\<tau> =\n                Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e \\<lfloor>a\\<rfloor>;\n        a = None \\<or>\n        (\\<forall>x\\<in>\\<lceil>a\\<rceil>. x \\<noteq> \\<bottom>);\n        \\<tau> \\<Turnstile> \\<delta> V; y = \\<lfloor>a\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> \\<tau>\n                          \\<Turnstile> V \\<triangleq>\n Void\\<^sub>n\\<^sub>u\\<^sub>l\\<^sub>l \\<or>\n                         \\<tau>\n                          \\<Turnstile> V \\<triangleq>\n Void\\<^sub>e\\<^sub>m\\<^sub>p\\<^sub>t\\<^sub>y", "apply(erule disjE, metis OclValid_def defined_def foundation2 null_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e_def null_fun_def true_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a.\n       \\<lbrakk>V \\<tau> =\n                Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e \\<lfloor>a\\<rfloor>;\n        \\<tau> \\<Turnstile> \\<delta> V; y = \\<lfloor>a\\<rfloor>;\n        \\<forall>x\\<in>\\<lceil>a\\<rceil>. x \\<noteq> \\<bottom>\\<rbrakk>\n       \\<Longrightarrow> \\<tau>\n                          \\<Turnstile> V \\<triangleq>\n Void\\<^sub>n\\<^sub>u\\<^sub>l\\<^sub>l \\<or>\n                         \\<tau>\n                          \\<Turnstile> V \\<triangleq>\n Void\\<^sub>e\\<^sub>m\\<^sub>p\\<^sub>t\\<^sub>y", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a.\n       \\<lbrakk>V \\<tau> =\n                Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e \\<lfloor>a\\<rfloor>;\n        \\<tau> \\<Turnstile> \\<delta> V; y = \\<lfloor>a\\<rfloor>;\n        \\<forall>x\\<in>\\<lceil>a\\<rceil>. x \\<noteq> \\<bottom>\\<rbrakk>\n       \\<Longrightarrow> \\<tau>\n                          \\<Turnstile> V \\<triangleq>\n Void\\<^sub>n\\<^sub>u\\<^sub>l\\<^sub>l \\<or>\n                         \\<tau>\n                          \\<Turnstile> V \\<triangleq>\n Void\\<^sub>e\\<^sub>m\\<^sub>p\\<^sub>t\\<^sub>y", "fix a"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a.\n       \\<lbrakk>V \\<tau> =\n                Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e \\<lfloor>a\\<rfloor>;\n        \\<tau> \\<Turnstile> \\<delta> V; y = \\<lfloor>a\\<rfloor>;\n        \\<forall>x\\<in>\\<lceil>a\\<rceil>. x \\<noteq> \\<bottom>\\<rbrakk>\n       \\<Longrightarrow> \\<tau>\n                          \\<Turnstile> V \\<triangleq>\n Void\\<^sub>n\\<^sub>u\\<^sub>l\\<^sub>l \\<or>\n                         \\<tau>\n                          \\<Turnstile> V \\<triangleq>\n Void\\<^sub>e\\<^sub>m\\<^sub>p\\<^sub>t\\<^sub>y", "show \"V \\<tau> = Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e \\<lfloor>a\\<rfloor> \\<Longrightarrow> \\<forall>x\\<in>\\<lceil>a\\<rceil>. x \\<noteq> \\<bottom> \\<Longrightarrow> \\<tau> \\<Turnstile> V \\<triangleq> Void\\<^sub>n\\<^sub>u\\<^sub>l\\<^sub>l \\<or> \\<tau> \\<Turnstile> V \\<triangleq> Void\\<^sub>e\\<^sub>m\\<^sub>p\\<^sub>t\\<^sub>y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>V \\<tau> =\n             Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e \\<lfloor>a\\<rfloor>;\n     \\<forall>x\\<in>\\<lceil>a\\<rceil>. x \\<noteq> \\<bottom>\\<rbrakk>\n    \\<Longrightarrow> \\<tau>\n                       \\<Turnstile> V \\<triangleq>\n                                    Void\\<^sub>n\\<^sub>u\\<^sub>l\\<^sub>l \\<or>\n                      \\<tau>\n                       \\<Turnstile> V \\<triangleq>\n                                    Void\\<^sub>e\\<^sub>m\\<^sub>p\\<^sub>t\\<^sub>y", "apply(case_tac a, simp, insert assms, metis OclValid_def foundation16 null_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e_def true_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>aa.\n       \\<lbrakk>V \\<tau> =\n                Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e \\<lfloor>a\\<rfloor>;\n        \\<forall>x\\<in>\\<lceil>a\\<rceil>. x \\<noteq> \\<bottom>;\n        a = \\<lfloor>aa\\<rfloor>; \\<tau> \\<Turnstile> \\<delta> V\\<rbrakk>\n       \\<Longrightarrow> \\<tau>\n                          \\<Turnstile> V \\<triangleq>\n Void\\<^sub>n\\<^sub>u\\<^sub>l\\<^sub>l \\<or>\n                         \\<tau>\n                          \\<Turnstile> V \\<triangleq>\n Void\\<^sub>e\\<^sub>m\\<^sub>p\\<^sub>t\\<^sub>y", "apply(simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>aa.\n       \\<lbrakk>V \\<tau> =\n                Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                 \\<lfloor>\\<lfloor>aa\\<rfloor>\\<rfloor>;\n        \\<forall>x\\<in>aa. x \\<noteq> \\<bottom>; a = \\<lfloor>aa\\<rfloor>;\n        \\<tau> \\<Turnstile> \\<delta> V\\<rbrakk>\n       \\<Longrightarrow> \\<tau>\n                          \\<Turnstile> V \\<triangleq>\n Void\\<^sub>n\\<^sub>u\\<^sub>l\\<^sub>l \\<or>\n                         \\<tau>\n                          \\<Turnstile> V \\<triangleq>\n Void\\<^sub>e\\<^sub>m\\<^sub>p\\<^sub>t\\<^sub>y", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>aa.\n       \\<lbrakk>V \\<tau> =\n                Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                 \\<lfloor>\\<lfloor>aa\\<rfloor>\\<rfloor>;\n        \\<forall>x\\<in>aa. x \\<noteq> \\<bottom>; a = \\<lfloor>aa\\<rfloor>;\n        \\<tau> \\<Turnstile> \\<delta> V\\<rbrakk>\n       \\<Longrightarrow> \\<tau>\n                          \\<Turnstile> V \\<triangleq>\n Void\\<^sub>n\\<^sub>u\\<^sub>l\\<^sub>l \\<or>\n                         \\<tau>\n                          \\<Turnstile> V \\<triangleq>\n Void\\<^sub>e\\<^sub>m\\<^sub>p\\<^sub>t\\<^sub>y", "fix aa"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>aa.\n       \\<lbrakk>V \\<tau> =\n                Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                 \\<lfloor>\\<lfloor>aa\\<rfloor>\\<rfloor>;\n        \\<forall>x\\<in>aa. x \\<noteq> \\<bottom>; a = \\<lfloor>aa\\<rfloor>;\n        \\<tau> \\<Turnstile> \\<delta> V\\<rbrakk>\n       \\<Longrightarrow> \\<tau>\n                          \\<Turnstile> V \\<triangleq>\n Void\\<^sub>n\\<^sub>u\\<^sub>l\\<^sub>l \\<or>\n                         \\<tau>\n                          \\<Turnstile> V \\<triangleq>\n Void\\<^sub>e\\<^sub>m\\<^sub>p\\<^sub>t\\<^sub>y", "show \" V \\<tau> = Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e \\<lfloor>\\<lfloor>aa\\<rfloor>\\<rfloor> \\<Longrightarrow> \\<forall>x\\<in>aa. x \\<noteq> \\<bottom> \\<Longrightarrow> \\<tau> \\<Turnstile> V \\<triangleq> Void\\<^sub>n\\<^sub>u\\<^sub>l\\<^sub>l \\<or> \\<tau> \\<Turnstile> V \\<triangleq> Void\\<^sub>e\\<^sub>m\\<^sub>p\\<^sub>t\\<^sub>y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>V \\<tau> =\n             Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n              \\<lfloor>\\<lfloor>aa\\<rfloor>\\<rfloor>;\n     \\<forall>x\\<in>aa. x \\<noteq> \\<bottom>\\<rbrakk>\n    \\<Longrightarrow> \\<tau>\n                       \\<Turnstile> V \\<triangleq>\n                                    Void\\<^sub>n\\<^sub>u\\<^sub>l\\<^sub>l \\<or>\n                      \\<tau>\n                       \\<Turnstile> V \\<triangleq>\n                                    Void\\<^sub>e\\<^sub>m\\<^sub>p\\<^sub>t\\<^sub>y", "apply(case_tac \"aa = {}\",\n        rule disjI2,\n        insert assms,\n        simp add: Void\\<^sub>e\\<^sub>m\\<^sub>p\\<^sub>t\\<^sub>y_def OclValid_def StrongEq_def true_def,\n        rule disjI1)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>V \\<tau> =\n             Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n              \\<lfloor>\\<lfloor>aa\\<rfloor>\\<rfloor>;\n     \\<forall>x\\<in>aa. x \\<noteq> \\<bottom>; aa \\<noteq> {};\n     \\<tau> \\<Turnstile> \\<delta> V\\<rbrakk>\n    \\<Longrightarrow> \\<tau>\n                       \\<Turnstile> V \\<triangleq>\n                                    Void\\<^sub>n\\<^sub>u\\<^sub>l\\<^sub>l", "apply(subgoal_tac \"aa = {Abs_Void\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e \\<lfloor>None\\<rfloor>}\", simp add: StrongEq_def OclValid_def true_def Void\\<^sub>n\\<^sub>u\\<^sub>l\\<^sub>l_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>V \\<tau> =\n             Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n              \\<lfloor>\\<lfloor>aa\\<rfloor>\\<rfloor>;\n     \\<forall>x\\<in>aa. x \\<noteq> \\<bottom>; aa \\<noteq> {};\n     \\<tau> \\<Turnstile> \\<delta> V\\<rbrakk>\n    \\<Longrightarrow> aa =\n                      {Abs_Void\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                        \\<lfloor>None\\<rfloor>}", "apply(drule A, erule exE)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>y.\n       \\<lbrakk>V \\<tau> =\n                Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                 \\<lfloor>\\<lfloor>aa\\<rfloor>\\<rfloor>;\n        \\<forall>x\\<in>aa. x \\<noteq> \\<bottom>;\n        \\<tau> \\<Turnstile> \\<delta> V; y \\<in> aa\\<rbrakk>\n       \\<Longrightarrow> aa =\n                         {Abs_Void\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                           \\<lfloor>None\\<rfloor>}", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>y.\n       \\<lbrakk>V \\<tau> =\n                Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                 \\<lfloor>\\<lfloor>aa\\<rfloor>\\<rfloor>;\n        \\<forall>x\\<in>aa. x \\<noteq> \\<bottom>;\n        \\<tau> \\<Turnstile> \\<delta> V; y \\<in> aa\\<rbrakk>\n       \\<Longrightarrow> aa =\n                         {Abs_Void\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                           \\<lfloor>None\\<rfloor>}", "fix y"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>y.\n       \\<lbrakk>V \\<tau> =\n                Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                 \\<lfloor>\\<lfloor>aa\\<rfloor>\\<rfloor>;\n        \\<forall>x\\<in>aa. x \\<noteq> \\<bottom>;\n        \\<tau> \\<Turnstile> \\<delta> V; y \\<in> aa\\<rbrakk>\n       \\<Longrightarrow> aa =\n                         {Abs_Void\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                           \\<lfloor>None\\<rfloor>}", "show \"V \\<tau> = Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e \\<lfloor>\\<lfloor>aa\\<rfloor>\\<rfloor> \\<Longrightarrow>\n                      \\<forall>x\\<in>aa. x \\<noteq> \\<bottom> \\<Longrightarrow>\n                      \\<tau> \\<Turnstile> \\<delta> V \\<Longrightarrow>\n                      y \\<in> aa \\<Longrightarrow>\n                      aa = {Abs_Void\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e \\<lfloor>None\\<rfloor>}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>V \\<tau> =\n             Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n              \\<lfloor>\\<lfloor>aa\\<rfloor>\\<rfloor>;\n     \\<forall>x\\<in>aa. x \\<noteq> \\<bottom>;\n     \\<tau> \\<Turnstile> \\<delta> V; y \\<in> aa\\<rbrakk>\n    \\<Longrightarrow> aa =\n                      {Abs_Void\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                        \\<lfloor>None\\<rfloor>}", "apply(rule equalityI, rule subsetI, simp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>V \\<tau> =\n                Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                 \\<lfloor>\\<lfloor>aa\\<rfloor>\\<rfloor>;\n        \\<forall>x\\<in>aa. x \\<noteq> \\<bottom>;\n        \\<tau> \\<Turnstile> \\<delta> V; y \\<in> aa; x \\<in> aa\\<rbrakk>\n       \\<Longrightarrow> x =\n                         Abs_Void\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                          \\<lfloor>None\\<rfloor>\n 2. \\<lbrakk>V \\<tau> =\n             Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n              \\<lfloor>\\<lfloor>aa\\<rfloor>\\<rfloor>;\n     \\<forall>x\\<in>aa. x \\<noteq> \\<bottom>;\n     \\<tau> \\<Turnstile> \\<delta> V; y \\<in> aa\\<rbrakk>\n    \\<Longrightarrow> {Abs_Void\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                        \\<lfloor>None\\<rfloor>}\n                      \\<subseteq> aa", "proof -"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>V \\<tau> =\n                Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                 \\<lfloor>\\<lfloor>aa\\<rfloor>\\<rfloor>;\n        \\<forall>x\\<in>aa. x \\<noteq> \\<bottom>;\n        \\<tau> \\<Turnstile> \\<delta> V; y \\<in> aa; x \\<in> aa\\<rbrakk>\n       \\<Longrightarrow> x =\n                         Abs_Void\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                          \\<lfloor>None\\<rfloor>\n 2. \\<lbrakk>V \\<tau> =\n             Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n              \\<lfloor>\\<lfloor>aa\\<rfloor>\\<rfloor>;\n     \\<forall>x\\<in>aa. x \\<noteq> \\<bottom>;\n     \\<tau> \\<Turnstile> \\<delta> V; y \\<in> aa\\<rbrakk>\n    \\<Longrightarrow> {Abs_Void\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                        \\<lfloor>None\\<rfloor>}\n                      \\<subseteq> aa", "fix x"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>V \\<tau> =\n                Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                 \\<lfloor>\\<lfloor>aa\\<rfloor>\\<rfloor>;\n        \\<forall>x\\<in>aa. x \\<noteq> \\<bottom>;\n        \\<tau> \\<Turnstile> \\<delta> V; y \\<in> aa; x \\<in> aa\\<rbrakk>\n       \\<Longrightarrow> x =\n                         Abs_Void\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                          \\<lfloor>None\\<rfloor>\n 2. \\<lbrakk>V \\<tau> =\n             Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n              \\<lfloor>\\<lfloor>aa\\<rfloor>\\<rfloor>;\n     \\<forall>x\\<in>aa. x \\<noteq> \\<bottom>;\n     \\<tau> \\<Turnstile> \\<delta> V; y \\<in> aa\\<rbrakk>\n    \\<Longrightarrow> {Abs_Void\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                        \\<lfloor>None\\<rfloor>}\n                      \\<subseteq> aa", "show \" V \\<tau> = Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e \\<lfloor>\\<lfloor>aa\\<rfloor>\\<rfloor> \\<Longrightarrow>\n             \\<forall>x\\<in>aa. x \\<noteq> \\<bottom> \\<Longrightarrow> \\<tau> \\<Turnstile> \\<delta> V \\<Longrightarrow> y \\<in> aa \\<Longrightarrow> x \\<in> aa \\<Longrightarrow> x = Abs_Void\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e \\<lfloor>None\\<rfloor>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>V \\<tau> =\n             Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n              \\<lfloor>\\<lfloor>aa\\<rfloor>\\<rfloor>;\n     \\<forall>x\\<in>aa. x \\<noteq> \\<bottom>;\n     \\<tau> \\<Turnstile> \\<delta> V; y \\<in> aa; x \\<in> aa\\<rbrakk>\n    \\<Longrightarrow> x =\n                      Abs_Void\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                       \\<lfloor>None\\<rfloor>", "apply(case_tac x, simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>y.\n       \\<lbrakk>V \\<tau> =\n                Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                 \\<lfloor>\\<lfloor>aa\\<rfloor>\\<rfloor>;\n        \\<forall>x\\<in>aa. x \\<noteq> \\<bottom>;\n        \\<tau> \\<Turnstile> \\<delta> V; y \\<in> aa;\n        Abs_Void\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e y \\<in> aa;\n        x = Abs_Void\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e y;\n        y = \\<bottom> \\<or> y = null\\<rbrakk>\n       \\<Longrightarrow> Abs_Void\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e y =\n                         Abs_Void\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                          \\<lfloor>None\\<rfloor>", "by (metis bot_Void_def bot_option_def null_option_def)"], ["proof (state)\nthis:\n  \\<lbrakk>V \\<tau> =\n           Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n            \\<lfloor>\\<lfloor>aa\\<rfloor>\\<rfloor>;\n   \\<forall>x\\<in>aa. x \\<noteq> \\<bottom>; \\<tau> \\<Turnstile> \\<delta> V;\n   y \\<in> aa; x \\<in> aa\\<rbrakk>\n  \\<Longrightarrow> x =\n                    Abs_Void\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                     \\<lfloor>None\\<rfloor>\n\ngoal (1 subgoal):\n 1. \\<lbrakk>V \\<tau> =\n             Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n              \\<lfloor>\\<lfloor>aa\\<rfloor>\\<rfloor>;\n     \\<forall>x\\<in>aa. x \\<noteq> \\<bottom>;\n     \\<tau> \\<Turnstile> \\<delta> V; y \\<in> aa\\<rbrakk>\n    \\<Longrightarrow> {Abs_Void\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                        \\<lfloor>None\\<rfloor>}\n                      \\<subseteq> aa", "apply_end(simp_all)"], ["proof (state)\nthis:\n  \\<lbrakk>V \\<tau> =\n           Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n            \\<lfloor>\\<lfloor>aa\\<rfloor>\\<rfloor>;\n   \\<forall>x\\<in>aa. x \\<noteq> \\<bottom>; \\<tau> \\<Turnstile> \\<delta> V;\n   y \\<in> aa; x \\<in> aa\\<rbrakk>\n  \\<Longrightarrow> x =\n                    Abs_Void\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                     \\<lfloor>None\\<rfloor>\n\ngoal (1 subgoal):\n 1. \\<lbrakk>V \\<tau> =\n             Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n              \\<lfloor>\\<lfloor>aa\\<rfloor>\\<rfloor>;\n     \\<forall>x\\<in>aa. x \\<noteq> \\<bottom>;\n     \\<tau> \\<Turnstile> \\<delta> V; y \\<in> aa\\<rbrakk>\n    \\<Longrightarrow> Abs_Void\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                       \\<lfloor>None\\<rfloor>\n                      \\<in> aa", "apply_end(erule ballE[where x = y], simp_all)"], ["proof (state)\nthis:\n  \\<lbrakk>V \\<tau> =\n           Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n            \\<lfloor>\\<lfloor>aa\\<rfloor>\\<rfloor>;\n   \\<forall>x\\<in>aa. x \\<noteq> \\<bottom>; \\<tau> \\<Turnstile> \\<delta> V;\n   y \\<in> aa; x \\<in> aa\\<rbrakk>\n  \\<Longrightarrow> x =\n                    Abs_Void\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                     \\<lfloor>None\\<rfloor>\n\ngoal (1 subgoal):\n 1. \\<lbrakk>V \\<tau> =\n             Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n              \\<lfloor>\\<lfloor>aa\\<rfloor>\\<rfloor>;\n     \\<tau> \\<Turnstile> \\<delta> V; y \\<in> aa;\n     y \\<noteq> \\<bottom>\\<rbrakk>\n    \\<Longrightarrow> Abs_Void\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                       \\<lfloor>None\\<rfloor>\n                      \\<in> aa", "apply_end(case_tac y,\n            simp add: bot_option_def null_option_def OclValid_def defined_def split: if_split_asm,\n            simp add: false_def true_def)"], ["proof (state)\nthis:\n  \\<lbrakk>V \\<tau> =\n           Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n            \\<lfloor>\\<lfloor>aa\\<rfloor>\\<rfloor>;\n   \\<forall>x\\<in>aa. x \\<noteq> \\<bottom>; \\<tau> \\<Turnstile> \\<delta> V;\n   y \\<in> aa; x \\<in> aa\\<rbrakk>\n  \\<Longrightarrow> x =\n                    Abs_Void\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                     \\<lfloor>None\\<rfloor>\n\ngoal (1 subgoal):\n 1. \\<And>y.\n       \\<lbrakk>Abs_Void\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e y \\<in> aa;\n        Abs_Void\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e y \\<noteq> \\<bottom>;\n        y = Abs_Void\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e y;\n        y = None \\<or> y = \\<lfloor>None\\<rfloor>;\n        V \\<tau> =\n        Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n         \\<lfloor>\\<lfloor>aa\\<rfloor>\\<rfloor>;\n        Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n         \\<lfloor>\\<lfloor>aa\\<rfloor>\\<rfloor> \\<noteq>\n        \\<bottom> \\<tau> \\<and>\n        Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n         \\<lfloor>\\<lfloor>aa\\<rfloor>\\<rfloor> \\<noteq>\n        null \\<tau>\\<rbrakk>\n       \\<Longrightarrow> Abs_Void\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                          \\<lfloor>None\\<rfloor>\n                         \\<in> aa", "qed (erule disjE, simp add: bot_Void_def, simp)"], ["proof (state)\nthis:\n  \\<lbrakk>V \\<tau> =\n           Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n            \\<lfloor>\\<lfloor>aa\\<rfloor>\\<rfloor>;\n   \\<forall>x\\<in>aa. x \\<noteq> \\<bottom>; \\<tau> \\<Turnstile> \\<delta> V;\n   y \\<in> aa\\<rbrakk>\n  \\<Longrightarrow> aa =\n                    {Abs_Void\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                      \\<lfloor>None\\<rfloor>}\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<lbrakk>V \\<tau> =\n           Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n            \\<lfloor>\\<lfloor>aa\\<rfloor>\\<rfloor>;\n   \\<forall>x\\<in>aa. x \\<noteq> \\<bottom>\\<rbrakk>\n  \\<Longrightarrow> \\<tau>\n                     \\<Turnstile> V \\<triangleq>\n                                  Void\\<^sub>n\\<^sub>u\\<^sub>l\\<^sub>l \\<or>\n                    \\<tau>\n                     \\<Turnstile> V \\<triangleq>\n                                  Void\\<^sub>e\\<^sub>m\\<^sub>p\\<^sub>t\\<^sub>y\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<lbrakk>V \\<tau> =\n           Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e \\<lfloor>a\\<rfloor>;\n   \\<forall>x\\<in>\\<lceil>a\\<rceil>. x \\<noteq> \\<bottom>\\<rbrakk>\n  \\<Longrightarrow> \\<tau>\n                     \\<Turnstile> V \\<triangleq>\n                                  Void\\<^sub>n\\<^sub>u\\<^sub>l\\<^sub>l \\<or>\n                    \\<tau>\n                     \\<Turnstile> V \\<triangleq>\n                                  Void\\<^sub>e\\<^sub>m\\<^sub>p\\<^sub>t\\<^sub>y\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<lbrakk>V \\<tau> = Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e y;\n   y \\<in> {X. X = \\<bottom> \\<or>\n               X = null \\<or>\n               (\\<forall>x\\<in>\\<lceil>\\<lceil>X\\<rceil>\\<rceil>.\n                   x \\<noteq> \\<bottom>)}\\<rbrakk>\n  \\<Longrightarrow> \\<tau>\n                     \\<Turnstile> V \\<triangleq>\n                                  Void\\<^sub>n\\<^sub>u\\<^sub>l\\<^sub>l \\<or>\n                    \\<tau>\n                     \\<Turnstile> V \\<triangleq>\n                                  Void\\<^sub>e\\<^sub>m\\<^sub>p\\<^sub>t\\<^sub>y\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<tau>\n   \\<Turnstile> V \\<triangleq> Void\\<^sub>n\\<^sub>u\\<^sub>l\\<^sub>l \\<or>\n  \\<tau>\n   \\<Turnstile> V \\<triangleq> Void\\<^sub>e\\<^sub>m\\<^sub>p\\<^sub>t\\<^sub>y\n\ngoal:\nNo subgoals!", "qed"], ["", "definition Boolean :: \"('\\<AA>,Boolean\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e) Set\"\nwhere     \"Boolean \\<equiv> (\\<lambda> \\<tau>. (Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e o Some o Some)  ((Some o Some) ` (UNIV::bool set)))\""], ["", "definition Boolean\\<^sub>n\\<^sub>u\\<^sub>l\\<^sub>l :: \"('\\<AA>,Boolean\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e) Set\"\nwhere     \"Boolean\\<^sub>n\\<^sub>u\\<^sub>l\\<^sub>l \\<equiv> (\\<lambda> \\<tau>. (Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e o Some o Some)  (Some ` (UNIV::bool option set)))\""], ["", "lemma Boolean_defined : \"\\<delta> Boolean = true\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<delta> Boolean = true", "apply(rule ext, auto simp: Boolean_def defined_def false_def true_def\n                           bot_fun_def null_fun_def null_option_def)"], ["proof (prove)\ngoal (2 subgoals):\n 1. Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n     \\<lfloor>\\<lfloor>range\n                        (\\<lambda>x.\n                            \\<lfloor>\\<lfloor>x\\<rfloor>\\<rfloor>)\\<rfloor>\\<rfloor> =\n    \\<bottom> \\<Longrightarrow>\n    False\n 2. Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n     \\<lfloor>\\<lfloor>range\n                        (\\<lambda>x.\n                            \\<lfloor>\\<lfloor>x\\<rfloor>\\<rfloor>)\\<rfloor>\\<rfloor> =\n    null \\<Longrightarrow>\n    False", "by(simp_all add: Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e_inject bot_option_def bot_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e_def null_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e_def null_option_def)"], ["", "lemma Boolean\\<^sub>n\\<^sub>u\\<^sub>l\\<^sub>l_defined : \"\\<delta> Boolean\\<^sub>n\\<^sub>u\\<^sub>l\\<^sub>l = true\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<delta> Boolean\\<^sub>n\\<^sub>u\\<^sub>l\\<^sub>l = true", "apply(rule ext, auto simp: Boolean\\<^sub>n\\<^sub>u\\<^sub>l\\<^sub>l_def defined_def false_def true_def\n                           bot_fun_def null_fun_def null_option_def)"], ["proof (prove)\ngoal (2 subgoals):\n 1. Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n     \\<lfloor>\\<lfloor>range Some\\<rfloor>\\<rfloor> =\n    \\<bottom> \\<Longrightarrow>\n    False\n 2. Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n     \\<lfloor>\\<lfloor>range Some\\<rfloor>\\<rfloor> =\n    null \\<Longrightarrow>\n    False", "by(simp_all add: Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e_inject bot_option_def bot_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e_def null_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e_def null_option_def)"], ["", "definition String :: \"('\\<AA>,String\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e) Set\"\nwhere     \"String \\<equiv> (\\<lambda> \\<tau>. (Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e o Some o Some)  ((Some o Some) ` (UNIV::string set)))\""], ["", "definition String\\<^sub>n\\<^sub>u\\<^sub>l\\<^sub>l :: \"('\\<AA>,String\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e) Set\"\nwhere     \"String\\<^sub>n\\<^sub>u\\<^sub>l\\<^sub>l \\<equiv> (\\<lambda> \\<tau>. (Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e o Some o Some)  (Some ` (UNIV::string option set)))\""], ["", "lemma String_defined : \"\\<delta> String = true\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<delta> String = true", "apply(rule ext, auto simp: String_def defined_def false_def true_def\n                           bot_fun_def null_fun_def null_option_def)"], ["proof (prove)\ngoal (2 subgoals):\n 1. Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n     \\<lfloor>\\<lfloor>range\n                        (\\<lambda>x.\n                            \\<lfloor>\\<lfloor>x\\<rfloor>\\<rfloor>)\\<rfloor>\\<rfloor> =\n    \\<bottom> \\<Longrightarrow>\n    False\n 2. Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n     \\<lfloor>\\<lfloor>range\n                        (\\<lambda>x.\n                            \\<lfloor>\\<lfloor>x\\<rfloor>\\<rfloor>)\\<rfloor>\\<rfloor> =\n    null \\<Longrightarrow>\n    False", "by(simp_all add: Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e_inject bot_option_def bot_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e_def null_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e_def null_option_def)"], ["", "lemma String\\<^sub>n\\<^sub>u\\<^sub>l\\<^sub>l_defined : \"\\<delta> String\\<^sub>n\\<^sub>u\\<^sub>l\\<^sub>l = true\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<delta> String\\<^sub>n\\<^sub>u\\<^sub>l\\<^sub>l = true", "apply(rule ext, auto simp: String\\<^sub>n\\<^sub>u\\<^sub>l\\<^sub>l_def defined_def false_def true_def\n                           bot_fun_def null_fun_def null_option_def)"], ["proof (prove)\ngoal (2 subgoals):\n 1. Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n     \\<lfloor>\\<lfloor>range Some\\<rfloor>\\<rfloor> =\n    \\<bottom> \\<Longrightarrow>\n    False\n 2. Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n     \\<lfloor>\\<lfloor>range Some\\<rfloor>\\<rfloor> =\n    null \\<Longrightarrow>\n    False", "by(simp_all add: Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e_inject bot_option_def bot_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e_def null_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e_def null_option_def)"], ["", "definition Real :: \"('\\<AA>,Real\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e) Set\"\nwhere     \"Real \\<equiv> (\\<lambda> \\<tau>. (Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e o Some o Some)  ((Some o Some) ` (UNIV::real set)))\""], ["", "definition Real\\<^sub>n\\<^sub>u\\<^sub>l\\<^sub>l :: \"('\\<AA>,Real\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e) Set\"\nwhere     \"Real\\<^sub>n\\<^sub>u\\<^sub>l\\<^sub>l \\<equiv> (\\<lambda> \\<tau>. (Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e o Some o Some)  (Some ` (UNIV::real option set)))\""], ["", "lemma Real_defined : \"\\<delta> Real = true\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<delta> Real = true", "apply(rule ext, auto simp: Real_def defined_def false_def true_def\n                           bot_fun_def null_fun_def null_option_def)"], ["proof (prove)\ngoal (2 subgoals):\n 1. Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n     \\<lfloor>\\<lfloor>range\n                        (\\<lambda>x.\n                            \\<lfloor>\\<lfloor>x\\<rfloor>\\<rfloor>)\\<rfloor>\\<rfloor> =\n    \\<bottom> \\<Longrightarrow>\n    False\n 2. Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n     \\<lfloor>\\<lfloor>range\n                        (\\<lambda>x.\n                            \\<lfloor>\\<lfloor>x\\<rfloor>\\<rfloor>)\\<rfloor>\\<rfloor> =\n    null \\<Longrightarrow>\n    False", "by(simp_all add: Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e_inject bot_option_def bot_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e_def null_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e_def null_option_def)"], ["", "lemma Real\\<^sub>n\\<^sub>u\\<^sub>l\\<^sub>l_defined : \"\\<delta> Real\\<^sub>n\\<^sub>u\\<^sub>l\\<^sub>l = true\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<delta> Real\\<^sub>n\\<^sub>u\\<^sub>l\\<^sub>l = true", "apply(rule ext, auto simp: Real\\<^sub>n\\<^sub>u\\<^sub>l\\<^sub>l_def defined_def false_def true_def\n                           bot_fun_def null_fun_def null_option_def)"], ["proof (prove)\ngoal (2 subgoals):\n 1. Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n     \\<lfloor>\\<lfloor>range Some\\<rfloor>\\<rfloor> =\n    \\<bottom> \\<Longrightarrow>\n    False\n 2. Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n     \\<lfloor>\\<lfloor>range Some\\<rfloor>\\<rfloor> =\n    null \\<Longrightarrow>\n    False", "by(simp_all add: Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e_inject bot_option_def bot_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e_def null_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e_def null_option_def)"], ["", "subsection\\<open>Basic Properties of the Set Type\\<close>"], ["", "text\\<open>Every element in a defined set is valid.\\<close>"], ["", "lemma Set_inv_lemma: \"\\<tau> \\<Turnstile> (\\<delta> X) \\<Longrightarrow> \\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e (X \\<tau>)\\<rceil>\\<rceil>. x \\<noteq> bot\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<tau> \\<Turnstile> \\<delta> X \\<Longrightarrow>\n    \\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                    (X \\<tau>)\\<rceil>\\<rceil>.\n       x \\<noteq> \\<bottom>", "apply(insert Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e [of \"X \\<tau>\"], simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<tau> \\<Turnstile> \\<delta> X;\n     Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e (X \\<tau>) = \\<bottom> \\<or>\n     Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e (X \\<tau>) = null \\<or>\n     (\\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n(X \\<tau>)\\<rceil>\\<rceil>.\n         x \\<noteq> \\<bottom>)\\<rbrakk>\n    \\<Longrightarrow> \\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                (X \\<tau>)\\<rceil>\\<rceil>.\n                         x \\<noteq> \\<bottom>", "apply(auto simp: OclValid_def defined_def false_def true_def cp_def\n                 bot_fun_def bot_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e_def null_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e_def null_fun_def\n           split:if_split_asm)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<bottom> \\<in> \\<lceil>\\<lceil>\\<bottom>\\<rceil>\\<rceil>;\n     X \\<tau> \\<noteq> Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e None;\n     X \\<tau> \\<noteq>\n     Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e \\<lfloor>None\\<rfloor>;\n     Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e (X \\<tau>) = \\<bottom>\\<rbrakk>\n    \\<Longrightarrow> False\n 2. \\<lbrakk>\\<bottom> \\<in> \\<lceil>\\<lceil>null\\<rceil>\\<rceil>;\n     X \\<tau> \\<noteq> Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e None;\n     X \\<tau> \\<noteq>\n     Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e \\<lfloor>None\\<rfloor>;\n     Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e (X \\<tau>) = null\\<rbrakk>\n    \\<Longrightarrow> False", "apply(erule contrapos_pp [of \"Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e (X \\<tau>) = bot\"])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<bottom> \\<in> \\<lceil>\\<lceil>\\<bottom>\\<rceil>\\<rceil>;\n     X \\<tau> \\<noteq> Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e None;\n     X \\<tau> \\<noteq>\n     Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e \\<lfloor>None\\<rfloor>;\n     \\<not> False\\<rbrakk>\n    \\<Longrightarrow> Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                       (X \\<tau>) \\<noteq>\n                      \\<bottom>\n 2. \\<lbrakk>\\<bottom> \\<in> \\<lceil>\\<lceil>null\\<rceil>\\<rceil>;\n     X \\<tau> \\<noteq> Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e None;\n     X \\<tau> \\<noteq>\n     Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e \\<lfloor>None\\<rfloor>;\n     Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e (X \\<tau>) = null\\<rbrakk>\n    \\<Longrightarrow> False", "apply(subst Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e_inject[symmetric], rule Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e, simp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<bottom> \\<in> \\<lceil>\\<lceil>\\<bottom>\\<rceil>\\<rceil>;\n     X \\<tau> \\<noteq> Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e None;\n     X \\<tau> \\<noteq>\n     Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e \\<lfloor>None\\<rfloor>;\n     \\<not> False\\<rbrakk>\n    \\<Longrightarrow> Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                       (Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                         (X \\<tau>)) \\<noteq>\n                      Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e \\<bottom>\n 2. \\<lbrakk>\\<bottom> \\<in> \\<lceil>\\<lceil>null\\<rceil>\\<rceil>;\n     X \\<tau> \\<noteq> Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e None;\n     X \\<tau> \\<noteq>\n     Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e \\<lfloor>None\\<rfloor>;\n     Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e (X \\<tau>) = null\\<rbrakk>\n    \\<Longrightarrow> False", "apply(simp add: Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e_inverse bot_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e_def bot_option_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<bottom> \\<in> \\<lceil>\\<lceil>null\\<rceil>\\<rceil>;\n     X \\<tau> \\<noteq> Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e None;\n     X \\<tau> \\<noteq>\n     Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e \\<lfloor>None\\<rfloor>;\n     Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e (X \\<tau>) = null\\<rbrakk>\n    \\<Longrightarrow> False", "apply(erule contrapos_pp [of \"Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e (X \\<tau>) = null\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<bottom> \\<in> \\<lceil>\\<lceil>null\\<rceil>\\<rceil>;\n     X \\<tau> \\<noteq> Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e None;\n     X \\<tau> \\<noteq>\n     Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e \\<lfloor>None\\<rfloor>;\n     \\<not> False\\<rbrakk>\n    \\<Longrightarrow> Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                       (X \\<tau>) \\<noteq>\n                      null", "apply(subst Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e_inject[symmetric], rule Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e, simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<bottom> \\<in> \\<lceil>\\<lceil>null\\<rceil>\\<rceil>;\n     X \\<tau> \\<noteq> Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e None;\n     X \\<tau> \\<noteq>\n     Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e \\<lfloor>None\\<rfloor>;\n     \\<not> False\\<rbrakk>\n    \\<Longrightarrow> Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                       (Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                         (X \\<tau>)) \\<noteq>\n                      Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e null", "apply(simp add: Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e_inverse  null_option_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<bottom> \\<in> \\<lceil>\\<bottom>\\<rceil>;\n     X \\<tau> \\<noteq> Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e None;\n     X \\<tau> \\<noteq>\n     Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e \\<lfloor>None\\<rfloor>\\<rbrakk>\n    \\<Longrightarrow> X \\<tau> \\<noteq>\n                      Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                       \\<lfloor>\\<bottom>\\<rfloor>", "by (simp add: bot_option_def)"], ["", "lemma Set_inv_lemma' :\n assumes x_def : \"\\<tau> \\<Turnstile> \\<delta> X\"\n     and e_mem : \"e \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e (X \\<tau>)\\<rceil>\\<rceil>\"\n   shows \"\\<tau> \\<Turnstile> \\<upsilon> (\\<lambda>_. e)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<tau> \\<Turnstile> \\<upsilon> (\\<lambda>_. e)", "apply(rule Set_inv_lemma[OF x_def, THEN ballE[where x = e]])"], ["proof (prove)\ngoal (2 subgoals):\n 1. e \\<noteq> \\<bottom> \\<Longrightarrow>\n    \\<tau> \\<Turnstile> \\<upsilon> (\\<lambda>_. e)\n 2. e \\<notin> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                (X \\<tau>)\\<rceil>\\<rceil> \\<Longrightarrow>\n    \\<tau> \\<Turnstile> \\<upsilon> (\\<lambda>_. e)", "apply(simp add: foundation18')"], ["proof (prove)\ngoal (1 subgoal):\n 1. e \\<notin> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                (X \\<tau>)\\<rceil>\\<rceil> \\<Longrightarrow>\n    \\<tau> \\<Turnstile> \\<upsilon> (\\<lambda>_. e)", "by(simp add: e_mem)"], ["", "lemma abs_rep_simp' :\n assumes S_all_def : \"\\<tau> \\<Turnstile> \\<delta> S\"\n   shows \"Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e (S \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor> = S \\<tau>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n     \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n  (S \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor> =\n    S \\<tau>", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n     \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n  (S \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor> =\n    S \\<tau>", "have discr_eq_false_true : \"\\<And>\\<tau>. (false \\<tau> = true \\<tau>) = False\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<tau>. (false \\<tau> = true \\<tau>) = False", "by(simp add: false_def true_def)"], ["proof (state)\nthis:\n  (false ?\\<tau> = true ?\\<tau>) = False\n\ngoal (1 subgoal):\n 1. Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n     \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n  (S \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor> =\n    S \\<tau>", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n     \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n  (S \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor> =\n    S \\<tau>", "apply(insert S_all_def, simp add: OclValid_def defined_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (if S \\<tau> = \\<bottom> \\<tau> \\<or> S \\<tau> = null \\<tau>\n     then false \\<tau> else true \\<tau>) =\n    true \\<tau> \\<Longrightarrow>\n    Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n     \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n  (S \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor> =\n    S \\<tau>", "apply(rule mp[OF Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e_induct[where P = \"\\<lambda>S. (if S = \\<bottom> \\<tau> \\<or> S = null \\<tau>\n                                                    then false \\<tau> else true \\<tau>) = true \\<tau> \\<longrightarrow>\n                                                   Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e S\\<rceil>\\<rceil>\\<rfloor>\\<rfloor> = S\"]],\n        rename_tac S')"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>S'.\n       \\<lbrakk>(if S \\<tau> = \\<bottom> \\<tau> \\<or> S \\<tau> = null \\<tau>\n                 then false \\<tau> else true \\<tau>) =\n                true \\<tau>;\n        S' \\<in> {X. X = \\<bottom> \\<or>\n                     X = null \\<or>\n                     (\\<forall>x\\<in>\\<lceil>\\<lceil>X\\<rceil>\\<rceil>.\n                         x \\<noteq> \\<bottom>)}\\<rbrakk>\n       \\<Longrightarrow> (if Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e S' =\n                             \\<bottom> \\<tau> \\<or>\n                             Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e S' =\n                             null \\<tau>\n                          then false \\<tau> else true \\<tau>) =\n                         true \\<tau> \\<longrightarrow>\n                         Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                          \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                       (Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                         S')\\<rceil>\\<rceil>\\<rfloor>\\<rfloor> =\n                         Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e S'\n 2. (if S \\<tau> = \\<bottom> \\<tau> \\<or> S \\<tau> = null \\<tau>\n     then false \\<tau> else true \\<tau>) =\n    true \\<tau> \\<Longrightarrow>\n    (if S \\<tau> = \\<bottom> \\<tau> \\<or> S \\<tau> = null \\<tau>\n     then false \\<tau> else true \\<tau>) =\n    true \\<tau>", "apply(simp add: Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e_inverse discr_eq_false_true)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>S'.\n       \\<lbrakk>(if S \\<tau> = \\<bottom> \\<tau> \\<or> S \\<tau> = null \\<tau>\n                 then false \\<tau> else true \\<tau>) =\n                true \\<tau>;\n        S' = \\<bottom> \\<or>\n        S' = null \\<or>\n        (\\<forall>x\\<in>\\<lceil>\\<lceil>S'\\<rceil>\\<rceil>.\n            x \\<noteq> \\<bottom>)\\<rbrakk>\n       \\<Longrightarrow> Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e S' \\<noteq>\n                         \\<bottom> \\<tau> \\<and>\n                         Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e S' \\<noteq>\n                         null \\<tau> \\<longrightarrow>\n                         Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                          \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>S'\\<rceil>\\<rceil>\\<rfloor>\\<rfloor> =\n                         Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e S'\n 2. (if S \\<tau> = \\<bottom> \\<tau> \\<or> S \\<tau> = null \\<tau>\n     then false \\<tau> else true \\<tau>) =\n    true \\<tau> \\<Longrightarrow>\n    (if S \\<tau> = \\<bottom> \\<tau> \\<or> S \\<tau> = null \\<tau>\n     then false \\<tau> else true \\<tau>) =\n    true \\<tau>", "apply(case_tac S')"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>S'.\n       \\<lbrakk>(if S \\<tau> = \\<bottom> \\<tau> \\<or> S \\<tau> = null \\<tau>\n                 then false \\<tau> else true \\<tau>) =\n                true \\<tau>;\n        S' = \\<bottom> \\<or>\n        S' = null \\<or>\n        (\\<forall>x\\<in>\\<lceil>\\<lceil>S'\\<rceil>\\<rceil>.\n            x \\<noteq> \\<bottom>);\n        S' = None\\<rbrakk>\n       \\<Longrightarrow> Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e S' \\<noteq>\n                         \\<bottom> \\<tau> \\<and>\n                         Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e S' \\<noteq>\n                         null \\<tau> \\<longrightarrow>\n                         Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                          \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>S'\\<rceil>\\<rceil>\\<rfloor>\\<rfloor> =\n                         Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e S'\n 2. \\<And>S' a.\n       \\<lbrakk>(if S \\<tau> = \\<bottom> \\<tau> \\<or> S \\<tau> = null \\<tau>\n                 then false \\<tau> else true \\<tau>) =\n                true \\<tau>;\n        S' = \\<bottom> \\<or>\n        S' = null \\<or>\n        (\\<forall>x\\<in>\\<lceil>\\<lceil>S'\\<rceil>\\<rceil>.\n            x \\<noteq> \\<bottom>);\n        S' = \\<lfloor>a\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e S' \\<noteq>\n                         \\<bottom> \\<tau> \\<and>\n                         Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e S' \\<noteq>\n                         null \\<tau> \\<longrightarrow>\n                         Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                          \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>S'\\<rceil>\\<rceil>\\<rfloor>\\<rfloor> =\n                         Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e S'\n 3. (if S \\<tau> = \\<bottom> \\<tau> \\<or> S \\<tau> = null \\<tau>\n     then false \\<tau> else true \\<tau>) =\n    true \\<tau> \\<Longrightarrow>\n    (if S \\<tau> = \\<bottom> \\<tau> \\<or> S \\<tau> = null \\<tau>\n     then false \\<tau> else true \\<tau>) =\n    true \\<tau>", "apply(simp add: bot_fun_def bot_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e_def)+"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>S' a.\n       \\<lbrakk>(if S \\<tau> =\n                    Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e None \\<or>\n                    S \\<tau> = null \\<tau>\n                 then false \\<tau> else true \\<tau>) =\n                true \\<tau>;\n        \\<lfloor>a\\<rfloor> = \\<bottom> \\<or>\n        \\<lfloor>a\\<rfloor> = null \\<or>\n        (\\<forall>x\\<in>\\<lceil>a\\<rceil>. x \\<noteq> \\<bottom>);\n        S' = \\<lfloor>a\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                          \\<lfloor>a\\<rfloor> \\<noteq>\n                         Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e None \\<and>\n                         Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                          \\<lfloor>a\\<rfloor> \\<noteq>\n                         null \\<tau> \\<longrightarrow>\n                         Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                          \\<lfloor>\\<lfloor>\\<lceil>a\\<rceil>\\<rfloor>\\<rfloor> =\n                         Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                          \\<lfloor>a\\<rfloor>\n 2. (if S \\<tau> = \\<bottom> \\<tau> \\<or> S \\<tau> = null \\<tau>\n     then false \\<tau> else true \\<tau>) =\n    true \\<tau> \\<Longrightarrow>\n    (if S \\<tau> = \\<bottom> \\<tau> \\<or> S \\<tau> = null \\<tau>\n     then false \\<tau> else true \\<tau>) =\n    true \\<tau>", "apply(rename_tac S'', case_tac S'')"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>S' S''.\n       \\<lbrakk>(if S \\<tau> =\n                    Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e None \\<or>\n                    S \\<tau> = null \\<tau>\n                 then false \\<tau> else true \\<tau>) =\n                true \\<tau>;\n        \\<lfloor>S''\\<rfloor> = \\<bottom> \\<or>\n        \\<lfloor>S''\\<rfloor> = null \\<or>\n        (\\<forall>x\\<in>\\<lceil>S''\\<rceil>. x \\<noteq> \\<bottom>);\n        S' = \\<lfloor>S''\\<rfloor>; S'' = None\\<rbrakk>\n       \\<Longrightarrow> Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                          \\<lfloor>S''\\<rfloor> \\<noteq>\n                         Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e None \\<and>\n                         Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                          \\<lfloor>S''\\<rfloor> \\<noteq>\n                         null \\<tau> \\<longrightarrow>\n                         Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                          \\<lfloor>\\<lfloor>\\<lceil>S''\\<rceil>\\<rfloor>\\<rfloor> =\n                         Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                          \\<lfloor>S''\\<rfloor>\n 2. \\<And>S' S'' a.\n       \\<lbrakk>(if S \\<tau> =\n                    Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e None \\<or>\n                    S \\<tau> = null \\<tau>\n                 then false \\<tau> else true \\<tau>) =\n                true \\<tau>;\n        \\<lfloor>S''\\<rfloor> = \\<bottom> \\<or>\n        \\<lfloor>S''\\<rfloor> = null \\<or>\n        (\\<forall>x\\<in>\\<lceil>S''\\<rceil>. x \\<noteq> \\<bottom>);\n        S' = \\<lfloor>S''\\<rfloor>; S'' = \\<lfloor>a\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                          \\<lfloor>S''\\<rfloor> \\<noteq>\n                         Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e None \\<and>\n                         Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                          \\<lfloor>S''\\<rfloor> \\<noteq>\n                         null \\<tau> \\<longrightarrow>\n                         Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                          \\<lfloor>\\<lfloor>\\<lceil>S''\\<rceil>\\<rfloor>\\<rfloor> =\n                         Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                          \\<lfloor>S''\\<rfloor>\n 3. (if S \\<tau> = \\<bottom> \\<tau> \\<or> S \\<tau> = null \\<tau>\n     then false \\<tau> else true \\<tau>) =\n    true \\<tau> \\<Longrightarrow>\n    (if S \\<tau> = \\<bottom> \\<tau> \\<or> S \\<tau> = null \\<tau>\n     then false \\<tau> else true \\<tau>) =\n    true \\<tau>", "apply(simp add: null_fun_def null_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e_def)+"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n   \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n(S \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor> =\n  S \\<tau>\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma S_lift' :\n assumes S_all_def : \"(\\<tau> :: '\\<AA> st) \\<Turnstile> \\<delta> S\"\n   shows \"\\<exists>S'. (\\<lambda>a (_::'\\<AA> st). a) ` \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e (S \\<tau>)\\<rceil>\\<rceil> = (\\<lambda>a (_::'\\<AA> st). \\<lfloor>a\\<rfloor>) ` S'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>S'.\n       (\\<lambda>a _. a) `\n       \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                        (S \\<tau>)\\<rceil>\\<rceil> =\n       (\\<lambda>a _. \\<lfloor>a\\<rfloor>) ` S'", "apply(rule_tac x = \"(\\<lambda>a. \\<lceil>a\\<rceil>) ` \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e (S \\<tau>)\\<rceil>\\<rceil>\" in exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>a _. a) `\n    \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                     (S \\<tau>)\\<rceil>\\<rceil> =\n    (\\<lambda>a _. \\<lfloor>a\\<rfloor>) `\n    UML_Types.drop `\n    \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                     (S \\<tau>)\\<rceil>\\<rceil>", "apply(simp only: image_comp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>a _. a) `\n    \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                     (S \\<tau>)\\<rceil>\\<rceil> =\n    ((\\<lambda>a _. \\<lfloor>a\\<rfloor>) \\<circ> UML_Types.drop) `\n    \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                     (S \\<tau>)\\<rceil>\\<rceil>", "apply(simp add: comp_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>a _. a) `\n    \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                     (S \\<tau>)\\<rceil>\\<rceil> =\n    (\\<lambda>x _. \\<lfloor>\\<lceil>x\\<rceil>\\<rfloor>) `\n    \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                     (S \\<tau>)\\<rceil>\\<rceil>", "apply(rule image_cong, fast)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                (S \\<tau>)\\<rceil>\\<rceil> \\<Longrightarrow>\n       (\\<lambda>_. x) = (\\<lambda>_. \\<lfloor>\\<lceil>x\\<rceil>\\<rfloor>)", "(* *)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                (S \\<tau>)\\<rceil>\\<rceil> \\<Longrightarrow>\n       (\\<lambda>_. x) = (\\<lambda>_. \\<lfloor>\\<lceil>x\\<rceil>\\<rfloor>)", "apply(drule Set_inv_lemma'[OF S_all_def])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<tau> \\<Turnstile> \\<upsilon> (\\<lambda>_. x) \\<Longrightarrow>\n       (\\<lambda>_. x) = (\\<lambda>_. \\<lfloor>\\<lceil>x\\<rceil>\\<rfloor>)", "by(case_tac x, (simp add: bot_option_def foundation18')+)"], ["", "lemma invalid_set_OclNot_defined [simp,code_unfold]:\"\\<delta>(invalid::('\\<AA>,'\\<alpha>::null) Set) = false\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<delta> invalid = false", "by simp"], ["", "lemma null_set_OclNot_defined [simp,code_unfold]:\"\\<delta>(null::('\\<AA>,'\\<alpha>::null) Set) = false\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<delta> null = false", "by(simp add: defined_def null_fun_def)"], ["", "lemma invalid_set_valid [simp,code_unfold]:\"\\<upsilon>(invalid::('\\<AA>,'\\<alpha>::null) Set) = false\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<upsilon> invalid = false", "by simp"], ["", "lemma null_set_valid [simp,code_unfold]:\"\\<upsilon>(null::('\\<AA>,'\\<alpha>::null) Set) = true\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<upsilon> null = true", "apply(simp add: valid_def null_fun_def bot_fun_def bot_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e_def null_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>\\<tau>.\n        if Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e \\<lfloor>None\\<rfloor> =\n           Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e None\n        then false \\<tau> else true \\<tau>) =\n    true", "apply(subst Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e_inject,simp_all add: null_option_def bot_option_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "text\\<open>... which means that we can have a type \\<open>('\\<AA>,('\\<AA>,('\\<AA>) Integer) Set) Set\\<close>\ncorresponding exactly to Set(Set(Integer)) in OCL notation. Note that the parameter\n\\<open>'\\<AA>\\<close> still refers to the object universe; making the OCL semantics entirely parametric\nin the object universe makes it possible to study (and prove) its properties\nindependently from a concrete class diagram.\\<close>"], ["", "subsection\\<open>Definition: Strict Equality \\label{sec:set-strict-equality}\\<close>"], ["", "text\\<open>After the part of foundational operations on sets, we detail here equality on sets.\nStrong equality is inherited from the OCL core, but we have to consider\nthe case of the strict equality. We decide to overload strict equality in the\nsame way we do for other value's in OCL:\\<close>"], ["", "overloading\n  StrictRefEq \\<equiv> \"StrictRefEq :: [('\\<AA>,'\\<alpha>::null)Set,('\\<AA>,'\\<alpha>::null)Set] \\<Rightarrow> ('\\<AA>)Boolean\"\nbegin"], ["", "definition StrictRefEq\\<^sub>S\\<^sub>e\\<^sub>t :\n    \"(x::('\\<AA>,'\\<alpha>::null)Set) \\<doteq> y \\<equiv> \\<lambda> \\<tau>. if (\\<upsilon> x) \\<tau> = true \\<tau> \\<and> (\\<upsilon> y) \\<tau> = true \\<tau>\n                                       then (x \\<triangleq> y)\\<tau>\n                                       else invalid \\<tau>\""], ["", "end"], ["", "text\\<open>One might object here that for the case of objects, this is an empty definition.\nThe answer is no, we will restrain later on states and objects such that any object\nhas its oid stored inside the object (so the ref, under which an object can be referenced\nin the store will represented in the object itself). For such well-formed stores that satisfy\nthis invariant (the WFF-invariant), the referential equality and the\nstrong equality---and therefore the strict equality on sets in the sense above---coincides.\\<close>"], ["", "text\\<open>Property proof in terms of @{term \"profile_bin\\<^sub>S\\<^sub>t\\<^sub>r\\<^sub>o\\<^sub>n\\<^sub>g\\<^sub>E\\<^sub>q_\\<^sub>v_\\<^sub>v\"}\\<close>"], ["", "interpretation  StrictRefEq\\<^sub>S\\<^sub>e\\<^sub>t : profile_bin\\<^sub>S\\<^sub>t\\<^sub>r\\<^sub>o\\<^sub>n\\<^sub>g\\<^sub>E\\<^sub>q_\\<^sub>v_\\<^sub>v \"\\<lambda> x y. (x::('\\<AA>,'\\<alpha>::null)Set) \\<doteq> y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. profile_bin\\<^sub>S\\<^sub>t\\<^sub>r\\<^sub>o\\<^sub>n\\<^sub>g\\<^sub>E\\<^sub>q_\\<^sub>v_\\<^sub>v\n     (\\<doteq>)", "by unfold_locales (auto simp:  StrictRefEq\\<^sub>S\\<^sub>e\\<^sub>t)"], ["", "subsection\\<open>Constants: mtSet\\<close>"], ["", "definition mtSet::\"('\\<AA>,'\\<alpha>::null) Set\"  (\"Set{}\")\nwhere     \"Set{} \\<equiv> (\\<lambda> \\<tau>.  Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e \\<lfloor>\\<lfloor>{}::'\\<alpha> set\\<rfloor>\\<rfloor> )\""], ["", "lemma mtSet_defined[simp,code_unfold]:\"\\<delta>(Set{}) = true\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<delta> Set{} = true", "apply(rule ext, auto simp: mtSet_def defined_def null_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e_def\n                           bot_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e_def bot_fun_def null_fun_def)"], ["proof (prove)\ngoal (2 subgoals):\n 1. Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n     \\<lfloor>\\<lfloor>{}\\<rfloor>\\<rfloor> =\n    Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e None \\<Longrightarrow>\n    False\n 2. Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n     \\<lfloor>\\<lfloor>{}\\<rfloor>\\<rfloor> =\n    Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n     \\<lfloor>None\\<rfloor> \\<Longrightarrow>\n    False", "by(simp_all add: Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e_inject bot_option_def null_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e_def null_option_def)"], ["", "lemma mtSet_valid[simp,code_unfold]:\"\\<upsilon>(Set{}) = true\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<upsilon> Set{} = true", "apply(rule ext,auto simp: mtSet_def valid_def null_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e_def\n                          bot_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e_def bot_fun_def null_fun_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n     \\<lfloor>\\<lfloor>{}\\<rfloor>\\<rfloor> =\n    Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e None \\<Longrightarrow>\n    False", "by(simp_all add: Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e_inject bot_option_def null_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e_def null_option_def)"], ["", "lemma mtSet_rep_set: \"\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e (Set{} \\<tau>)\\<rceil>\\<rceil> = {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                     (Set{} \\<tau>)\\<rceil>\\<rceil> =\n    {}", "apply(simp add: mtSet_def, subst Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e_inverse)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lfloor>\\<lfloor>{}\\<rfloor>\\<rfloor>\n    \\<in> {X. X = \\<bottom> \\<or>\n              X = null \\<or>\n              (\\<forall>x\\<in>\\<lceil>\\<lceil>X\\<rceil>\\<rceil>.\n                  x \\<noteq> \\<bottom>)}\n 2. \\<lceil>\\<lceil>\\<lfloor>\\<lfloor>{}\\<rfloor>\\<rfloor>\\<rceil>\\<rceil> =\n    {}", "by(simp add: bot_option_def)+"], ["", "lemma [simp,code_unfold]: \"const Set{}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. const Set{}", "by(simp add: const_def mtSet_def)"], ["", "text\\<open>Note that the collection types in OCL allow for null to be included;\n  however, there is the null-collection into which inclusion yields invalid.\\<close>"], ["", "subsection\\<open>Definition: Including\\<close>"], ["", "definition OclIncluding   :: \"[('\\<AA>,'\\<alpha>::null) Set,('\\<AA>,'\\<alpha>) val] \\<Rightarrow> ('\\<AA>,'\\<alpha>) Set\"\nwhere     \"OclIncluding x y = (\\<lambda> \\<tau>. if (\\<delta> x) \\<tau> = true \\<tau> \\<and> (\\<upsilon> y) \\<tau> = true \\<tau>\n                                    then Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e \\<lfloor>\\<lfloor> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e (x \\<tau>)\\<rceil>\\<rceil>  \\<union> {y \\<tau>} \\<rfloor>\\<rfloor>\n                                    else invalid \\<tau> )\""], ["", "notation   OclIncluding   (\"_->including\\<^sub>S\\<^sub>e\\<^sub>t'(_')\")"], ["", "interpretation OclIncluding : profile_bin\\<^sub>d_\\<^sub>v OclIncluding \"\\<lambda>x y. Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e x\\<rceil>\\<rceil> \\<union> {y}\\<rfloor>\\<rfloor>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. profile_bin\\<^sub>d_\\<^sub>v OclIncluding\n     (\\<lambda>x y.\n         Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n          \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n       x\\<rceil>\\<rceil> \\<union>\n                            {y}\\<rfloor>\\<rfloor>)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. profile_bin\\<^sub>d_\\<^sub>v OclIncluding\n     (\\<lambda>x y.\n         Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n          \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n       x\\<rceil>\\<rceil> \\<union>\n                            {y}\\<rfloor>\\<rfloor>)", "have A : \"None \\<in> {X. X = bot \\<or> X = null \\<or> (\\<forall>x\\<in>\\<lceil>\\<lceil>X\\<rceil>\\<rceil>. x \\<noteq> bot)}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. None\n    \\<in> {X. X = \\<bottom> \\<or>\n              X = null \\<or>\n              (\\<forall>x\\<in>\\<lceil>\\<lceil>X\\<rceil>\\<rceil>.\n                  x \\<noteq> \\<bottom>)}", "by(simp add: bot_option_def)"], ["proof (state)\nthis:\n  None\n  \\<in> {X. X = \\<bottom> \\<or>\n            X = null \\<or>\n            (\\<forall>x\\<in>\\<lceil>\\<lceil>X\\<rceil>\\<rceil>.\n                x \\<noteq> \\<bottom>)}\n\ngoal (1 subgoal):\n 1. profile_bin\\<^sub>d_\\<^sub>v OclIncluding\n     (\\<lambda>x y.\n         Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n          \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n       x\\<rceil>\\<rceil> \\<union>\n                            {y}\\<rfloor>\\<rfloor>)", "have B : \"\\<lfloor>None\\<rfloor> \\<in> {X. X = bot \\<or> X = null \\<or> (\\<forall>x\\<in>\\<lceil>\\<lceil>X\\<rceil>\\<rceil>. x \\<noteq> bot)}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lfloor>None\\<rfloor>\n    \\<in> {X. X = \\<bottom> \\<or>\n              X = null \\<or>\n              (\\<forall>x\\<in>\\<lceil>\\<lceil>X\\<rceil>\\<rceil>.\n                  x \\<noteq> \\<bottom>)}", "by(simp add: null_option_def bot_option_def)"], ["proof (state)\nthis:\n  \\<lfloor>None\\<rfloor>\n  \\<in> {X. X = \\<bottom> \\<or>\n            X = null \\<or>\n            (\\<forall>x\\<in>\\<lceil>\\<lceil>X\\<rceil>\\<rceil>.\n                x \\<noteq> \\<bottom>)}\n\ngoal (1 subgoal):\n 1. profile_bin\\<^sub>d_\\<^sub>v OclIncluding\n     (\\<lambda>x y.\n         Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n          \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n       x\\<rceil>\\<rceil> \\<union>\n                            {y}\\<rfloor>\\<rfloor>)", "have C : \"\\<And>x y. x \\<noteq> \\<bottom> \\<Longrightarrow> x \\<noteq> null \\<Longrightarrow>  y \\<noteq> \\<bottom>  \\<Longrightarrow>\n           \\<lfloor>\\<lfloor>insert y \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e x\\<rceil>\\<rceil>\\<rfloor>\\<rfloor> \\<in> {X. X = bot \\<or> X = null \\<or> (\\<forall>x\\<in>\\<lceil>\\<lceil>X\\<rceil>\\<rceil>. x \\<noteq> bot)}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<noteq> \\<bottom>; x \\<noteq> null;\n        y \\<noteq> \\<bottom>\\<rbrakk>\n       \\<Longrightarrow> \\<lfloor>\\<lfloor>insert y\n      \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                       x\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>\n                         \\<in> {X. X = \\<bottom> \\<or>\n                                   X = null \\<or>\n                                   (\\<forall>x\n       \\<in>\\<lceil>\\<lceil>X\\<rceil>\\<rceil>.\n x \\<noteq> \\<bottom>)}", "by(auto intro!:Set_inv_lemma[simplified OclValid_def \n                                        defined_def false_def true_def null_fun_def bot_fun_def])"], ["proof (state)\nthis:\n  \\<lbrakk>?x2 \\<noteq> \\<bottom>; ?x2 \\<noteq> null;\n   ?y2 \\<noteq> \\<bottom>\\<rbrakk>\n  \\<Longrightarrow> \\<lfloor>\\<lfloor>insert ?y2\n \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                  ?x2\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>\n                    \\<in> {X. X = \\<bottom> \\<or>\n                              X = null \\<or>\n                              (\\<forall>x\n  \\<in>\\<lceil>\\<lceil>X\\<rceil>\\<rceil>.\n                                  x \\<noteq> \\<bottom>)}\n\ngoal (1 subgoal):\n 1. profile_bin\\<^sub>d_\\<^sub>v OclIncluding\n     (\\<lambda>x y.\n         Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n          \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n       x\\<rceil>\\<rceil> \\<union>\n                            {y}\\<rfloor>\\<rfloor>)", "show \"profile_bin\\<^sub>d_\\<^sub>v OclIncluding (\\<lambda>x y. Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e x\\<rceil>\\<rceil> \\<union> {y}\\<rfloor>\\<rfloor>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. profile_bin\\<^sub>d_\\<^sub>v OclIncluding\n     (\\<lambda>x y.\n         Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n          \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n       x\\<rceil>\\<rceil> \\<union>\n                            {y}\\<rfloor>\\<rfloor>)", "apply unfold_locales"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>X Y.\n       bin OclIncluding\n        (\\<lambda>x y.\n            Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n             \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n          x\\<rceil>\\<rceil> \\<union>\n                               {y}\\<rfloor>\\<rfloor>)\n        defined valid X Y\n 2. \\<And>x y.\n       \\<lbrakk>x \\<noteq> \\<bottom>; x \\<noteq> null;\n        y \\<noteq> \\<bottom>\\<rbrakk>\n       \\<Longrightarrow> Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                          \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                       x\\<rceil>\\<rceil> \\<union>\n      {y}\\<rfloor>\\<rfloor> \\<noteq>\n                         \\<bottom> \\<and>\n                         Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                          \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                       x\\<rceil>\\<rceil> \\<union>\n      {y}\\<rfloor>\\<rfloor> \\<noteq>\n                         null", "apply(auto simp:OclIncluding_def bot_option_def null_option_def null_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e_def bot_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e_def)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<noteq> Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e None;\n        x \\<noteq>\n        Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e \\<lfloor>None\\<rfloor>;\n        y \\<noteq> \\<bottom>;\n        Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n         \\<lfloor>\\<lfloor>insert y\n                            \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n       x\\<rceil>\\<rceil>\\<rfloor>\\<rfloor> =\n        Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e None\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>x y.\n       \\<lbrakk>x \\<noteq> Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e None;\n        x \\<noteq>\n        Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e \\<lfloor>None\\<rfloor>;\n        y \\<noteq> \\<bottom>;\n        Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n         \\<lfloor>\\<lfloor>insert y\n                            \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n       x\\<rceil>\\<rceil>\\<rfloor>\\<rfloor> =\n        Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n         \\<lfloor>None\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> False", "apply(erule_tac Q=\"Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\\<lfloor>\\<lfloor>insert y \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e x\\<rceil>\\<rceil>\\<rfloor>\\<rfloor> = Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e None\" in contrapos_pp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<noteq> Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e None;\n        x \\<noteq>\n        Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e \\<lfloor>None\\<rfloor>;\n        y \\<noteq> \\<bottom>; \\<not> False\\<rbrakk>\n       \\<Longrightarrow> Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                          \\<lfloor>\\<lfloor>insert y\n       \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                        x\\<rceil>\\<rceil>\\<rfloor>\\<rfloor> \\<noteq>\n                         Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e None\n 2. \\<And>x y.\n       \\<lbrakk>x \\<noteq> Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e None;\n        x \\<noteq>\n        Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e \\<lfloor>None\\<rfloor>;\n        y \\<noteq> \\<bottom>;\n        Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n         \\<lfloor>\\<lfloor>insert y\n                            \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n       x\\<rceil>\\<rceil>\\<rfloor>\\<rfloor> =\n        Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n         \\<lfloor>None\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> False", "apply(subst Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e_inject[OF C A])"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<noteq> Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e None;\n        x \\<noteq>\n        Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e \\<lfloor>None\\<rfloor>;\n        y \\<noteq> \\<bottom>; \\<not> False\\<rbrakk>\n       \\<Longrightarrow> x \\<noteq> \\<bottom>\n 2. \\<And>x y.\n       \\<lbrakk>x \\<noteq> Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e None;\n        x \\<noteq>\n        Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e \\<lfloor>None\\<rfloor>;\n        y \\<noteq> \\<bottom>; \\<not> False\\<rbrakk>\n       \\<Longrightarrow> x \\<noteq> null\n 3. \\<And>x y.\n       \\<lbrakk>x \\<noteq> Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e None;\n        x \\<noteq>\n        Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e \\<lfloor>None\\<rfloor>;\n        y \\<noteq> \\<bottom>; \\<not> False\\<rbrakk>\n       \\<Longrightarrow> y \\<noteq> \\<bottom>\n 4. \\<And>x y.\n       \\<lbrakk>x \\<noteq> Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e None;\n        x \\<noteq>\n        Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e \\<lfloor>None\\<rfloor>;\n        y \\<noteq> \\<bottom>; \\<not> False\\<rbrakk>\n       \\<Longrightarrow> \\<lfloor>\\<lfloor>insert y\n      \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                       x\\<rceil>\\<rceil>\\<rfloor>\\<rfloor> \\<noteq>\n                         None\n 5. \\<And>x y.\n       \\<lbrakk>x \\<noteq> Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e None;\n        x \\<noteq>\n        Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e \\<lfloor>None\\<rfloor>;\n        y \\<noteq> \\<bottom>;\n        Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n         \\<lfloor>\\<lfloor>insert y\n                            \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n       x\\<rceil>\\<rceil>\\<rfloor>\\<rfloor> =\n        Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n         \\<lfloor>None\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> False", "apply(simp_all add:  null_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e_def bot_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e_def bot_option_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<noteq> Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e None;\n        x \\<noteq>\n        Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e \\<lfloor>None\\<rfloor>;\n        y \\<noteq> \\<bottom>;\n        Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n         \\<lfloor>\\<lfloor>insert y\n                            \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n       x\\<rceil>\\<rceil>\\<rfloor>\\<rfloor> =\n        Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n         \\<lfloor>None\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> False", "apply(erule_tac Q=\"Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\\<lfloor>\\<lfloor>insert y \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e x\\<rceil>\\<rceil>\\<rfloor>\\<rfloor> = Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e \\<lfloor>None\\<rfloor>\" in contrapos_pp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<noteq> Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e None;\n        x \\<noteq>\n        Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e \\<lfloor>None\\<rfloor>;\n        y \\<noteq> \\<bottom>; \\<not> False\\<rbrakk>\n       \\<Longrightarrow> Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                          \\<lfloor>\\<lfloor>insert y\n       \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                        x\\<rceil>\\<rceil>\\<rfloor>\\<rfloor> \\<noteq>\n                         Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                          \\<lfloor>None\\<rfloor>", "apply(subst Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e_inject[OF C B])"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<noteq> Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e None;\n        x \\<noteq>\n        Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e \\<lfloor>None\\<rfloor>;\n        y \\<noteq> \\<bottom>; \\<not> False\\<rbrakk>\n       \\<Longrightarrow> x \\<noteq> \\<bottom>\n 2. \\<And>x y.\n       \\<lbrakk>x \\<noteq> Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e None;\n        x \\<noteq>\n        Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e \\<lfloor>None\\<rfloor>;\n        y \\<noteq> \\<bottom>; \\<not> False\\<rbrakk>\n       \\<Longrightarrow> x \\<noteq> null\n 3. \\<And>x y.\n       \\<lbrakk>x \\<noteq> Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e None;\n        x \\<noteq>\n        Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e \\<lfloor>None\\<rfloor>;\n        y \\<noteq> \\<bottom>; \\<not> False\\<rbrakk>\n       \\<Longrightarrow> y \\<noteq> \\<bottom>\n 4. \\<And>x y.\n       \\<lbrakk>x \\<noteq> Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e None;\n        x \\<noteq>\n        Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e \\<lfloor>None\\<rfloor>;\n        y \\<noteq> \\<bottom>; \\<not> False\\<rbrakk>\n       \\<Longrightarrow> \\<lfloor>\\<lfloor>insert y\n      \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                       x\\<rceil>\\<rceil>\\<rfloor>\\<rfloor> \\<noteq>\n                         \\<lfloor>None\\<rfloor>", "apply(simp_all add:  null_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e_def bot_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e_def bot_option_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  profile_bin\\<^sub>d_\\<^sub>v OclIncluding\n   (\\<lambda>x y.\n       Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n        \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n     x\\<rceil>\\<rceil> \\<union>\n                          {y}\\<rfloor>\\<rfloor>)\n\ngoal:\nNo subgoals!", "qed"], ["", "syntax\n  \"_OclFinset\" :: \"args => ('\\<AA>,'a::null) Set\"    (\"Set{(_)}\")"], ["", "translations\n  \"Set{x, xs}\" == \"CONST OclIncluding (Set{xs}) x\"\n  \"Set{x}\"     == \"CONST OclIncluding (Set{}) x \""], ["", "subsection\\<open>Definition: Excluding\\<close>"], ["", "definition OclExcluding   :: \"[('\\<AA>,'\\<alpha>::null) Set,('\\<AA>,'\\<alpha>) val] \\<Rightarrow> ('\\<AA>,'\\<alpha>) Set\"\nwhere     \"OclExcluding x y = (\\<lambda> \\<tau>.  if (\\<delta> x) \\<tau> = true \\<tau> \\<and> (\\<upsilon> y) \\<tau> = true \\<tau>\n                                     then Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e \\<lfloor>\\<lfloor> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e (x \\<tau>)\\<rceil>\\<rceil> - {y \\<tau>} \\<rfloor>\\<rfloor>\n                                     else \\<bottom> )\""], ["", "notation   OclExcluding   (\"_->excluding\\<^sub>S\\<^sub>e\\<^sub>t'(_')\")"], ["", "lemma OclExcluding_inv: \"(x:: Set('b::{null})) \\<noteq> \\<bottom> \\<Longrightarrow> x \\<noteq> null \\<Longrightarrow>  y \\<noteq> \\<bottom>  \\<Longrightarrow>\n           \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e x\\<rceil>\\<rceil> - {y}\\<rfloor>\\<rfloor> \\<in> {X. X = bot \\<or> X = null \\<or> (\\<forall>x\\<in>\\<lceil>\\<lceil>X\\<rceil>\\<rceil>. x \\<noteq> bot)}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<noteq> \\<bottom>; x \\<noteq> null;\n     y \\<noteq> \\<bottom>\\<rbrakk>\n    \\<Longrightarrow> \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                   x\\<rceil>\\<rceil> -\n  {y}\\<rfloor>\\<rfloor>\n                      \\<in> {X. X = \\<bottom> \\<or>\n                                X = null \\<or>\n                                (\\<forall>x\n    \\<in>\\<lceil>\\<lceil>X\\<rceil>\\<rceil>.\n                                    x \\<noteq> \\<bottom>)}", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<noteq> \\<bottom>; x \\<noteq> null;\n     y \\<noteq> \\<bottom>\\<rbrakk>\n    \\<Longrightarrow> \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                   x\\<rceil>\\<rceil> -\n  {y}\\<rfloor>\\<rfloor>\n                      \\<in> {X. X = \\<bottom> \\<or>\n                                X = null \\<or>\n                                (\\<forall>x\n    \\<in>\\<lceil>\\<lceil>X\\<rceil>\\<rceil>.\n                                    x \\<noteq> \\<bottom>)}", "fix X :: \"'a state \\<times> 'a state \\<Rightarrow> Set('b)\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<noteq> \\<bottom>; x \\<noteq> null;\n     y \\<noteq> \\<bottom>\\<rbrakk>\n    \\<Longrightarrow> \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                   x\\<rceil>\\<rceil> -\n  {y}\\<rfloor>\\<rfloor>\n                      \\<in> {X. X = \\<bottom> \\<or>\n                                X = null \\<or>\n                                (\\<forall>x\n    \\<in>\\<lceil>\\<lceil>X\\<rceil>\\<rceil>.\n                                    x \\<noteq> \\<bottom>)}", "fix \\<tau>"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<noteq> \\<bottom>; x \\<noteq> null;\n     y \\<noteq> \\<bottom>\\<rbrakk>\n    \\<Longrightarrow> \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                   x\\<rceil>\\<rceil> -\n  {y}\\<rfloor>\\<rfloor>\n                      \\<in> {X. X = \\<bottom> \\<or>\n                                X = null \\<or>\n                                (\\<forall>x\n    \\<in>\\<lceil>\\<lceil>X\\<rceil>\\<rceil>.\n                                    x \\<noteq> \\<bottom>)}", "show \"x \\<noteq> \\<bottom> \\<Longrightarrow> x \\<noteq> null \\<Longrightarrow> y \\<noteq> \\<bottom> \\<Longrightarrow> ?thesis\"\n            when \"x = X \\<tau>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<noteq> \\<bottom>; x \\<noteq> null;\n     y \\<noteq> \\<bottom>\\<rbrakk>\n    \\<Longrightarrow> \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                   x\\<rceil>\\<rceil> -\n  {y}\\<rfloor>\\<rfloor>\n                      \\<in> {X. X = \\<bottom> \\<or>\n                                X = null \\<or>\n                                (\\<forall>x\n    \\<in>\\<lceil>\\<lceil>X\\<rceil>\\<rceil>.\n                                    x \\<noteq> \\<bottom>)}", "by(simp add: that Set_inv_lemma[simplified OclValid_def \n                                          defined_def null_fun_def bot_fun_def, of X \\<tau>])"], ["proof (state)\nthis:\n  \\<lbrakk>x = X \\<tau>; x \\<noteq> \\<bottom>; x \\<noteq> null;\n   y \\<noteq> \\<bottom>\\<rbrakk>\n  \\<Longrightarrow> \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                 x\\<rceil>\\<rceil> -\n{y}\\<rfloor>\\<rfloor>\n                    \\<in> {X. X = \\<bottom> \\<or>\n                              X = null \\<or>\n                              (\\<forall>x\n  \\<in>\\<lceil>\\<lceil>X\\<rceil>\\<rceil>.\n                                  x \\<noteq> \\<bottom>)}\n\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<noteq> \\<bottom>; x \\<noteq> null;\n     y \\<noteq> \\<bottom>\\<rbrakk>\n    \\<Longrightarrow> x = ?X3 ?\\<tau>3", "qed simp_all"], ["", "interpretation OclExcluding : profile_bin\\<^sub>d_\\<^sub>v OclExcluding \"\\<lambda>x y. Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e x\\<rceil>\\<rceil> - {y}\\<rfloor>\\<rfloor>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. profile_bin\\<^sub>d_\\<^sub>v OclExcluding\n     (\\<lambda>x y.\n         Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n          \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n       x\\<rceil>\\<rceil> -\n                            {y}\\<rfloor>\\<rfloor>)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. profile_bin\\<^sub>d_\\<^sub>v OclExcluding\n     (\\<lambda>x y.\n         Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n          \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n       x\\<rceil>\\<rceil> -\n                            {y}\\<rfloor>\\<rfloor>)", "have A : \"None \\<in> {X. X = bot \\<or> X = null \\<or> (\\<forall>x\\<in>\\<lceil>\\<lceil>X\\<rceil>\\<rceil>. x \\<noteq> bot)}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. None\n    \\<in> {X. X = \\<bottom> \\<or>\n              X = null \\<or>\n              (\\<forall>x\\<in>\\<lceil>\\<lceil>X\\<rceil>\\<rceil>.\n                  x \\<noteq> \\<bottom>)}", "by(simp add: bot_option_def)"], ["proof (state)\nthis:\n  None\n  \\<in> {X. X = \\<bottom> \\<or>\n            X = null \\<or>\n            (\\<forall>x\\<in>\\<lceil>\\<lceil>X\\<rceil>\\<rceil>.\n                x \\<noteq> \\<bottom>)}\n\ngoal (1 subgoal):\n 1. profile_bin\\<^sub>d_\\<^sub>v OclExcluding\n     (\\<lambda>x y.\n         Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n          \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n       x\\<rceil>\\<rceil> -\n                            {y}\\<rfloor>\\<rfloor>)", "have B : \"\\<lfloor>None\\<rfloor> \\<in> {X. X = bot \\<or> X = null \\<or> (\\<forall>x\\<in>\\<lceil>\\<lceil>X\\<rceil>\\<rceil>. x \\<noteq> bot)}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lfloor>None\\<rfloor>\n    \\<in> {X. X = \\<bottom> \\<or>\n              X = null \\<or>\n              (\\<forall>x\\<in>\\<lceil>\\<lceil>X\\<rceil>\\<rceil>.\n                  x \\<noteq> \\<bottom>)}", "by(simp add: null_option_def bot_option_def)"], ["proof (state)\nthis:\n  \\<lfloor>None\\<rfloor>\n  \\<in> {X. X = \\<bottom> \\<or>\n            X = null \\<or>\n            (\\<forall>x\\<in>\\<lceil>\\<lceil>X\\<rceil>\\<rceil>.\n                x \\<noteq> \\<bottom>)}\n\ngoal (1 subgoal):\n 1. profile_bin\\<^sub>d_\\<^sub>v OclExcluding\n     (\\<lambda>x y.\n         Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n          \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n       x\\<rceil>\\<rceil> -\n                            {y}\\<rfloor>\\<rfloor>)", "show \"profile_bin\\<^sub>d_\\<^sub>v OclExcluding (\\<lambda>x y. Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e (x:: Set('b))\\<rceil>\\<rceil> - {y}\\<rfloor>\\<rfloor>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. profile_bin\\<^sub>d_\\<^sub>v OclExcluding\n     (\\<lambda>x y.\n         Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n          \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n       x\\<rceil>\\<rceil> -\n                            {y}\\<rfloor>\\<rfloor>)", "apply unfold_locales"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>X Y.\n       bin OclExcluding\n        (\\<lambda>x y.\n            Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n             \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n          x\\<rceil>\\<rceil> -\n                               {y}\\<rfloor>\\<rfloor>)\n        defined valid X Y\n 2. \\<And>x y.\n       \\<lbrakk>x \\<noteq> \\<bottom>; x \\<noteq> null;\n        y \\<noteq> \\<bottom>\\<rbrakk>\n       \\<Longrightarrow> Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                          \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                       x\\<rceil>\\<rceil> -\n      {y}\\<rfloor>\\<rfloor> \\<noteq>\n                         \\<bottom> \\<and>\n                         Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                          \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                       x\\<rceil>\\<rceil> -\n      {y}\\<rfloor>\\<rfloor> \\<noteq>\n                         null", "apply(auto simp:OclExcluding_def bot_option_def null_option_def null_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e_def bot_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e_def invalid_def)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<noteq> Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e None;\n        x \\<noteq>\n        Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e \\<lfloor>None\\<rfloor>;\n        y \\<noteq> \\<bottom>;\n        Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n         \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n      x\\<rceil>\\<rceil> -\n                           {y}\\<rfloor>\\<rfloor> =\n        Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e None\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>x y.\n       \\<lbrakk>x \\<noteq> Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e None;\n        x \\<noteq>\n        Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e \\<lfloor>None\\<rfloor>;\n        y \\<noteq> \\<bottom>;\n        Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n         \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n      x\\<rceil>\\<rceil> -\n                           {y}\\<rfloor>\\<rfloor> =\n        Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n         \\<lfloor>None\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> False", "apply(erule_tac Q=\"Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e x\\<rceil>\\<rceil> - {y}\\<rfloor>\\<rfloor> = Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e None\" in contrapos_pp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<noteq> Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e None;\n        x \\<noteq>\n        Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e \\<lfloor>None\\<rfloor>;\n        y \\<noteq> \\<bottom>; \\<not> False\\<rbrakk>\n       \\<Longrightarrow> Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                          \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                       x\\<rceil>\\<rceil> -\n      {y}\\<rfloor>\\<rfloor> \\<noteq>\n                         Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e None\n 2. \\<And>x y.\n       \\<lbrakk>x \\<noteq> Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e None;\n        x \\<noteq>\n        Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e \\<lfloor>None\\<rfloor>;\n        y \\<noteq> \\<bottom>;\n        Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n         \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n      x\\<rceil>\\<rceil> -\n                           {y}\\<rfloor>\\<rfloor> =\n        Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n         \\<lfloor>None\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> False", "apply(subst Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e_inject[OF OclExcluding_inv A])"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<noteq> Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e None;\n        x \\<noteq>\n        Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e \\<lfloor>None\\<rfloor>;\n        y \\<noteq> \\<bottom>; \\<not> False\\<rbrakk>\n       \\<Longrightarrow> x \\<noteq> \\<bottom>\n 2. \\<And>x y.\n       \\<lbrakk>x \\<noteq> Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e None;\n        x \\<noteq>\n        Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e \\<lfloor>None\\<rfloor>;\n        y \\<noteq> \\<bottom>; \\<not> False\\<rbrakk>\n       \\<Longrightarrow> x \\<noteq> null\n 3. \\<And>x y.\n       \\<lbrakk>x \\<noteq> Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e None;\n        x \\<noteq>\n        Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e \\<lfloor>None\\<rfloor>;\n        y \\<noteq> \\<bottom>; \\<not> False\\<rbrakk>\n       \\<Longrightarrow> y \\<noteq> \\<bottom>\n 4. \\<And>x y.\n       \\<lbrakk>x \\<noteq> Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e None;\n        x \\<noteq>\n        Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e \\<lfloor>None\\<rfloor>;\n        y \\<noteq> \\<bottom>; \\<not> False\\<rbrakk>\n       \\<Longrightarrow> \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                      x\\<rceil>\\<rceil> -\n     {y}\\<rfloor>\\<rfloor> \\<noteq>\n                         None\n 5. \\<And>x y.\n       \\<lbrakk>x \\<noteq> Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e None;\n        x \\<noteq>\n        Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e \\<lfloor>None\\<rfloor>;\n        y \\<noteq> \\<bottom>;\n        Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n         \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n      x\\<rceil>\\<rceil> -\n                           {y}\\<rfloor>\\<rfloor> =\n        Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n         \\<lfloor>None\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> False", "apply(simp_all add:  null_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e_def bot_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e_def bot_option_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<noteq> Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e None;\n        x \\<noteq>\n        Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e \\<lfloor>None\\<rfloor>;\n        y \\<noteq> \\<bottom>;\n        Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n         \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n      x\\<rceil>\\<rceil> -\n                           {y}\\<rfloor>\\<rfloor> =\n        Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n         \\<lfloor>None\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> False", "apply(erule_tac Q=\"Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e x\\<rceil>\\<rceil> - {y}\\<rfloor>\\<rfloor> = Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e \\<lfloor>None\\<rfloor>\" in contrapos_pp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<noteq> Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e None;\n        x \\<noteq>\n        Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e \\<lfloor>None\\<rfloor>;\n        y \\<noteq> \\<bottom>; \\<not> False\\<rbrakk>\n       \\<Longrightarrow> Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                          \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                       x\\<rceil>\\<rceil> -\n      {y}\\<rfloor>\\<rfloor> \\<noteq>\n                         Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                          \\<lfloor>None\\<rfloor>", "apply(subst Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e_inject[OF OclExcluding_inv B])"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<noteq> Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e None;\n        x \\<noteq>\n        Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e \\<lfloor>None\\<rfloor>;\n        y \\<noteq> \\<bottom>; \\<not> False\\<rbrakk>\n       \\<Longrightarrow> x \\<noteq> \\<bottom>\n 2. \\<And>x y.\n       \\<lbrakk>x \\<noteq> Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e None;\n        x \\<noteq>\n        Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e \\<lfloor>None\\<rfloor>;\n        y \\<noteq> \\<bottom>; \\<not> False\\<rbrakk>\n       \\<Longrightarrow> x \\<noteq> null\n 3. \\<And>x y.\n       \\<lbrakk>x \\<noteq> Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e None;\n        x \\<noteq>\n        Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e \\<lfloor>None\\<rfloor>;\n        y \\<noteq> \\<bottom>; \\<not> False\\<rbrakk>\n       \\<Longrightarrow> y \\<noteq> \\<bottom>\n 4. \\<And>x y.\n       \\<lbrakk>x \\<noteq> Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e None;\n        x \\<noteq>\n        Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e \\<lfloor>None\\<rfloor>;\n        y \\<noteq> \\<bottom>; \\<not> False\\<rbrakk>\n       \\<Longrightarrow> \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                      x\\<rceil>\\<rceil> -\n     {y}\\<rfloor>\\<rfloor> \\<noteq>\n                         \\<lfloor>None\\<rfloor>", "apply(simp_all add:  null_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e_def bot_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e_def bot_option_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  profile_bin\\<^sub>d_\\<^sub>v OclExcluding\n   (\\<lambda>x y.\n       Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n        \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n     x\\<rceil>\\<rceil> -\n                          {y}\\<rfloor>\\<rfloor>)\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection\\<open>Definition: Includes\\<close>"], ["", "definition OclIncludes   :: \"[('\\<AA>,'\\<alpha>::null) Set,('\\<AA>,'\\<alpha>) val] \\<Rightarrow> '\\<AA> Boolean\"\nwhere     \"OclIncludes x y = (\\<lambda> \\<tau>.   if (\\<delta> x) \\<tau> = true \\<tau> \\<and> (\\<upsilon> y) \\<tau> = true \\<tau>\n                                     then \\<lfloor>\\<lfloor>(y \\<tau>) \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e (x \\<tau>)\\<rceil>\\<rceil> \\<rfloor>\\<rfloor>\n                                     else \\<bottom>  )\""], ["", "notation   OclIncludes    (\"_->includes\\<^sub>S\\<^sub>e\\<^sub>t'(_')\" (*[66,65]65*))"], ["", "interpretation OclIncludes : profile_bin\\<^sub>d_\\<^sub>v OclIncludes \"\\<lambda>x y. \\<lfloor>\\<lfloor>y \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e x\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. profile_bin\\<^sub>d_\\<^sub>v OclIncludes\n     (\\<lambda>x y.\n         \\<lfloor>\\<lfloor>y \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n              x\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>)", "by(unfold_locales, auto simp:OclIncludes_def bot_option_def null_option_def invalid_def)"], ["", "subsection\\<open>Definition: Excludes\\<close>"], ["", "definition OclExcludes   :: \"[('\\<AA>,'\\<alpha>::null) Set,('\\<AA>,'\\<alpha>) val] \\<Rightarrow> '\\<AA> Boolean\"\nwhere     \"OclExcludes x y = (not(OclIncludes x y))\""], ["", "notation   OclExcludes    (\"_->excludes\\<^sub>S\\<^sub>e\\<^sub>t'(_')\" (*[66,65]65*))"], ["", "text\\<open>The case of the size definition is somewhat special, we admit\nexplicitly in Featherweight OCL the possibility of infinite sets. For\nthe size definition, this requires an extra condition that assures\nthat the cardinality of the set is actually a defined integer.\\<close>"], ["", "interpretation OclExcludes : profile_bin\\<^sub>d_\\<^sub>v OclExcludes \"\\<lambda>x y. \\<lfloor>\\<lfloor>y \\<notin> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e x\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. profile_bin\\<^sub>d_\\<^sub>v OclExcludes\n     (\\<lambda>x y.\n         \\<lfloor>\\<lfloor>y \\<notin> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                 x\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>)", "by(unfold_locales, auto simp:OclExcludes_def OclIncludes_def OclNot_def bot_option_def null_option_def invalid_def)"], ["", "subsection\\<open>Definition: Size\\<close>"], ["", "definition OclSize     :: \"('\\<AA>,'\\<alpha>::null)Set \\<Rightarrow> '\\<AA> Integer\"\nwhere     \"OclSize x = (\\<lambda> \\<tau>. if (\\<delta> x) \\<tau> = true \\<tau> \\<and> finite(\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e (x \\<tau>)\\<rceil>\\<rceil>)\n                             then \\<lfloor>\\<lfloor> int(card \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e (x \\<tau>)\\<rceil>\\<rceil>) \\<rfloor>\\<rfloor>\n                             else \\<bottom> )\""], ["", "notation  (* standard ascii syntax *)\n           OclSize        (\"_->size\\<^sub>S\\<^sub>e\\<^sub>t'(')\" (*[66]*))"], ["", "text\\<open>The following definition follows the requirement of the\nstandard to treat null as neutral element of sets. It is\na well-documented exception from the general strictness\nrule and the rule that the distinguished argument self should\nbe non-null.\\<close>"], ["", "(*TODO Locale - Equivalent*)"], ["", "subsection\\<open>Definition: IsEmpty\\<close>"], ["", "definition OclIsEmpty   :: \"('\\<AA>,'\\<alpha>::null) Set \\<Rightarrow> '\\<AA> Boolean\"\nwhere     \"OclIsEmpty x =  ((\\<upsilon> x and not (\\<delta> x)) or ((OclSize x) \\<doteq> \\<zero>))\""], ["", "notation   OclIsEmpty     (\"_->isEmpty\\<^sub>S\\<^sub>e\\<^sub>t'(')\" (*[66]*))"], ["", "(*TODO Locale - Equivalent*)"], ["", "subsection\\<open>Definition: NotEmpty\\<close>"], ["", "definition OclNotEmpty   :: \"('\\<AA>,'\\<alpha>::null) Set \\<Rightarrow> '\\<AA> Boolean\"\nwhere     \"OclNotEmpty x =  not(OclIsEmpty x)\""], ["", "notation   OclNotEmpty    (\"_->notEmpty\\<^sub>S\\<^sub>e\\<^sub>t'(')\" (*[66]*))"], ["", "(*TODO Locale - Equivalent*)"], ["", "subsection\\<open>Definition: Any\\<close>"], ["", "(* Slight breach of naming convention in order to avoid naming conflict on constant.*)"], ["", "definition OclANY   :: \"[('\\<AA>,'\\<alpha>::null) Set] \\<Rightarrow> ('\\<AA>,'\\<alpha>) val\"\nwhere     \"OclANY x = (\\<lambda> \\<tau>. if (\\<upsilon> x) \\<tau> = true \\<tau>\n                            then if (\\<delta> x and OclNotEmpty x) \\<tau> = true \\<tau>\n                                 then SOME y. y \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e (x \\<tau>)\\<rceil>\\<rceil>\n                                 else null \\<tau>\n                            else \\<bottom> )\""], ["", "notation   OclANY   (\"_->any\\<^sub>S\\<^sub>e\\<^sub>t'(')\")"], ["", "(*TODO Locale - Equivalent*)  \n\n(* actually, this definition covers only: X->any\\<^sub>S\\<^sub>e\\<^sub>t(true) of the standard, which foresees\na (totally correct) high-level definition\nsource->any\\<^sub>S\\<^sub>e\\<^sub>t(iterator | body) =\nsource->select(iterator | body)->asSequence()->first(). Since we don't have sequences,\nwe have to go for a direct---restricted---definition. *)"], ["", "subsection\\<open>Definition: Forall\\<close>"], ["", "text\\<open>The definition of OclForall mimics the one of @{term \"OclAnd\"}:\nOclForall is not a strict operation.\\<close>"], ["", "definition OclForall     :: \"[('\\<AA>,'\\<alpha>::null)Set,('\\<AA>,'\\<alpha>)val\\<Rightarrow>('\\<AA>)Boolean] \\<Rightarrow> '\\<AA> Boolean\"\nwhere     \"OclForall S P = (\\<lambda> \\<tau>. if (\\<delta> S) \\<tau> = true \\<tau>\n                                 then if (\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e (S \\<tau>)\\<rceil>\\<rceil>. P(\\<lambda> _. x) \\<tau> = false \\<tau>)\n                                      then false \\<tau>\n                                      else if (\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e (S \\<tau>)\\<rceil>\\<rceil>. P(\\<lambda> _. x) \\<tau> = invalid \\<tau>)\n                                           then invalid \\<tau>\n                                           else if (\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e (S \\<tau>)\\<rceil>\\<rceil>. P(\\<lambda> _. x) \\<tau> = null \\<tau>)\n                                                then null \\<tau>\n                                                else true \\<tau>\n                                 else \\<bottom>)\""], ["", "syntax\n  \"_OclForallSet\" :: \"[('\\<AA>,'\\<alpha>::null) Set,id,('\\<AA>)Boolean] \\<Rightarrow> '\\<AA> Boolean\"    (\"(_)->forAll\\<^sub>S\\<^sub>e\\<^sub>t'(_|_')\")"], ["", "translations\n  \"X->forAll\\<^sub>S\\<^sub>e\\<^sub>t(x | P)\" == \"CONST UML_Set.OclForall X (%x. P)\""], ["", "(*TODO Locale - Equivalent*)"], ["", "subsection\\<open>Definition: Exists\\<close>"], ["", "text\\<open>Like OclForall, OclExists is also not strict.\\<close>"], ["", "definition OclExists     :: \"[('\\<AA>,'\\<alpha>::null) Set,('\\<AA>,'\\<alpha>)val\\<Rightarrow>('\\<AA>)Boolean] \\<Rightarrow> '\\<AA> Boolean\"\nwhere     \"OclExists S P = not(UML_Set.OclForall S (\\<lambda> X. not (P X)))\""], ["", "syntax\n  \"_OclExistSet\" :: \"[('\\<AA>,'\\<alpha>::null) Set,id,('\\<AA>)Boolean] \\<Rightarrow> '\\<AA> Boolean\"    (\"(_)->exists\\<^sub>S\\<^sub>e\\<^sub>t'(_|_')\")"], ["", "translations\n  \"X->exists\\<^sub>S\\<^sub>e\\<^sub>t(x | P)\" == \"CONST UML_Set.OclExists X (%x. P)\""], ["", "(*TODO Locale - Equivalent*)"], ["", "subsection\\<open>Definition: Iterate\\<close>"], ["", "definition OclIterate :: \"[('\\<AA>,'\\<alpha>::null) Set,('\\<AA>,'\\<beta>::null)val,\n                             ('\\<AA>,'\\<alpha>)val\\<Rightarrow>('\\<AA>,'\\<beta>)val\\<Rightarrow>('\\<AA>,'\\<beta>)val] \\<Rightarrow> ('\\<AA>,'\\<beta>)val\"\nwhere \"OclIterate S A F = (\\<lambda> \\<tau>. if (\\<delta> S) \\<tau> = true \\<tau> \\<and> (\\<upsilon> A) \\<tau> = true \\<tau> \\<and> finite\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e (S \\<tau>)\\<rceil>\\<rceil>\n                                  then (Finite_Set.fold (F) (A) ((\\<lambda>a \\<tau>. a) ` \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e (S \\<tau>)\\<rceil>\\<rceil>))\\<tau>\n                                  else \\<bottom>)\""], ["", "syntax\n  \"_OclIterateSet\"  :: \"[('\\<AA>,'\\<alpha>::null) Set, idt, idt, '\\<alpha>, '\\<beta>] => ('\\<AA>,'\\<gamma>)val\"\n                        (\"_ ->iterate\\<^sub>S\\<^sub>e\\<^sub>t'(_;_=_ | _')\" (*[71,100,70]50*))"], ["", "translations\n  \"X->iterate\\<^sub>S\\<^sub>e\\<^sub>t(a; x = A | P)\" == \"CONST OclIterate X A (%a. (% x. P))\""], ["", "(*TODO Locale - Equivalent*)"], ["", "subsection\\<open>Definition: Select\\<close>"], ["", "definition OclSelect :: \"[('\\<AA>,'\\<alpha>::null)Set,('\\<AA>,'\\<alpha>)val\\<Rightarrow>('\\<AA>)Boolean] \\<Rightarrow> ('\\<AA>,'\\<alpha>)Set\"\nwhere \"OclSelect S P = (\\<lambda>\\<tau>. if (\\<delta> S) \\<tau> = true \\<tau>\n                              then if (\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e (S \\<tau>)\\<rceil>\\<rceil>. P(\\<lambda> _. x) \\<tau> = invalid \\<tau>)\n                                   then invalid \\<tau>\n                                   else Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e \\<lfloor>\\<lfloor>{x\\<in>\\<lceil>\\<lceil> Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e (S \\<tau>)\\<rceil>\\<rceil>. P (\\<lambda>_. x) \\<tau> \\<noteq> false \\<tau>}\\<rfloor>\\<rfloor>\n                              else invalid \\<tau>)\""], ["", "syntax\n  \"_OclSelectSet\" :: \"[('\\<AA>,'\\<alpha>::null) Set,id,('\\<AA>)Boolean] \\<Rightarrow> '\\<AA> Boolean\"    (\"(_)->select\\<^sub>S\\<^sub>e\\<^sub>t'(_|_')\")"], ["", "translations\n  \"X->select\\<^sub>S\\<^sub>e\\<^sub>t(x | P)\" == \"CONST OclSelect X (% x. P)\""], ["", "(*TODO Locale - Equivalent*)"], ["", "subsection\\<open>Definition: Reject\\<close>"], ["", "definition OclReject :: \"[('\\<AA>,'\\<alpha>::null)Set,('\\<AA>,'\\<alpha>)val\\<Rightarrow>('\\<AA>)Boolean] \\<Rightarrow> ('\\<AA>,'\\<alpha>::null)Set\"\nwhere \"OclReject S P = OclSelect S (not o P)\""], ["", "syntax\n  \"_OclRejectSet\" :: \"[('\\<AA>,'\\<alpha>::null) Set,id,('\\<AA>)Boolean] \\<Rightarrow> '\\<AA> Boolean\"    (\"(_)->reject\\<^sub>S\\<^sub>e\\<^sub>t'(_|_')\")"], ["", "translations\n  \"X->reject\\<^sub>S\\<^sub>e\\<^sub>t(x | P)\" == \"CONST OclReject X (% x. P)\""], ["", "(*TODO Locale - Equivalent*)"], ["", "subsection\\<open>Definition: IncludesAll\\<close>"], ["", "definition OclIncludesAll   :: \"[('\\<AA>,'\\<alpha>::null) Set,('\\<AA>,'\\<alpha>) Set] \\<Rightarrow> '\\<AA> Boolean\"\nwhere     \"OclIncludesAll x y = (\\<lambda> \\<tau>.   if (\\<delta> x) \\<tau> = true \\<tau> \\<and> (\\<delta> y) \\<tau> = true \\<tau>\n                                        then \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e (y \\<tau>)\\<rceil>\\<rceil> \\<subseteq> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e (x \\<tau>)\\<rceil>\\<rceil> \\<rfloor>\\<rfloor>\n                                        else \\<bottom>  )\""], ["", "notation   OclIncludesAll (\"_->includesAll\\<^sub>S\\<^sub>e\\<^sub>t'(_')\" (*[66,65]65*))"], ["", "interpretation OclIncludesAll : profile_bin\\<^sub>d_\\<^sub>d OclIncludesAll \"\\<lambda>x y. \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e y\\<rceil>\\<rceil> \\<subseteq> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e x\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. profile_bin\\<^sub>d_\\<^sub>d OclIncludesAll\n     (\\<lambda>x y.\n         \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n      y\\<rceil>\\<rceil>\n                           \\<subseteq> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                  x\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>)", "by(unfold_locales, auto simp:OclIncludesAll_def bot_option_def null_option_def invalid_def)"], ["", "subsection\\<open>Definition: ExcludesAll\\<close>"], ["", "definition OclExcludesAll   :: \"[('\\<AA>,'\\<alpha>::null) Set,('\\<AA>,'\\<alpha>) Set] \\<Rightarrow> '\\<AA> Boolean\"\nwhere     \"OclExcludesAll x y = (\\<lambda> \\<tau>.   if (\\<delta> x) \\<tau> = true \\<tau> \\<and> (\\<delta> y) \\<tau> = true \\<tau>\n                                        then \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e (y \\<tau>)\\<rceil>\\<rceil> \\<inter> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e (x \\<tau>)\\<rceil>\\<rceil> = {} \\<rfloor>\\<rfloor>\n                                        else \\<bottom>  )\""], ["", "notation  OclExcludesAll (\"_->excludesAll\\<^sub>S\\<^sub>e\\<^sub>t'(_')\" (*[66,65]65*))"], ["", "interpretation OclExcludesAll : profile_bin\\<^sub>d_\\<^sub>d OclExcludesAll \"\\<lambda>x y. \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e y\\<rceil>\\<rceil> \\<inter> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e x\\<rceil>\\<rceil> = {}\\<rfloor>\\<rfloor>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. profile_bin\\<^sub>d_\\<^sub>d OclExcludesAll\n     (\\<lambda>x y.\n         \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n      y\\<rceil>\\<rceil> \\<inter>\n                           \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n      x\\<rceil>\\<rceil> =\n                           {}\\<rfloor>\\<rfloor>)", "by(unfold_locales, auto simp:OclExcludesAll_def bot_option_def null_option_def invalid_def)"], ["", "subsection\\<open>Definition: Union\\<close>"], ["", "definition OclUnion   :: \"[('\\<AA>,'\\<alpha>::null) Set,('\\<AA>,'\\<alpha>) Set] \\<Rightarrow> ('\\<AA>,'\\<alpha>) Set\"\nwhere     \"OclUnion x y = (\\<lambda> \\<tau>.   if (\\<delta> x) \\<tau> = true \\<tau> \\<and> (\\<delta> y) \\<tau> = true \\<tau>\n                                        then Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e (y \\<tau>)\\<rceil>\\<rceil> \\<union> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e (x \\<tau>)\\<rceil>\\<rceil> \\<rfloor>\\<rfloor>\n                                        else \\<bottom>  )\""], ["", "notation   OclUnion       (\"_->union\\<^sub>S\\<^sub>e\\<^sub>t'(_')\"          (*[66,65]65*))"], ["", "lemma OclUnion_inv: \"(x:: Set('b::{null})) \\<noteq> \\<bottom> \\<Longrightarrow> x \\<noteq> null \\<Longrightarrow>  y \\<noteq> \\<bottom>  \\<Longrightarrow> y \\<noteq> null \\<Longrightarrow>\n           \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e y\\<rceil>\\<rceil> \\<union> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e x\\<rceil>\\<rceil>\\<rfloor>\\<rfloor> \\<in> {X. X = bot \\<or> X = null \\<or> (\\<forall>x\\<in>\\<lceil>\\<lceil>X\\<rceil>\\<rceil>. x \\<noteq> bot)}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<noteq> \\<bottom>; x \\<noteq> null; y \\<noteq> \\<bottom>;\n     y \\<noteq> null\\<rbrakk>\n    \\<Longrightarrow> \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                   y\\<rceil>\\<rceil> \\<union>\n  \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                   x\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>\n                      \\<in> {X. X = \\<bottom> \\<or>\n                                X = null \\<or>\n                                (\\<forall>x\n    \\<in>\\<lceil>\\<lceil>X\\<rceil>\\<rceil>.\n                                    x \\<noteq> \\<bottom>)}", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<noteq> \\<bottom>; x \\<noteq> null; y \\<noteq> \\<bottom>;\n     y \\<noteq> null\\<rbrakk>\n    \\<Longrightarrow> \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                   y\\<rceil>\\<rceil> \\<union>\n  \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                   x\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>\n                      \\<in> {X. X = \\<bottom> \\<or>\n                                X = null \\<or>\n                                (\\<forall>x\n    \\<in>\\<lceil>\\<lceil>X\\<rceil>\\<rceil>.\n                                    x \\<noteq> \\<bottom>)}", "fix X Y :: \"'a state \\<times> 'a state \\<Rightarrow> Set('b)\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<noteq> \\<bottom>; x \\<noteq> null; y \\<noteq> \\<bottom>;\n     y \\<noteq> null\\<rbrakk>\n    \\<Longrightarrow> \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                   y\\<rceil>\\<rceil> \\<union>\n  \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                   x\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>\n                      \\<in> {X. X = \\<bottom> \\<or>\n                                X = null \\<or>\n                                (\\<forall>x\n    \\<in>\\<lceil>\\<lceil>X\\<rceil>\\<rceil>.\n                                    x \\<noteq> \\<bottom>)}", "fix \\<tau>"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<noteq> \\<bottom>; x \\<noteq> null; y \\<noteq> \\<bottom>;\n     y \\<noteq> null\\<rbrakk>\n    \\<Longrightarrow> \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                   y\\<rceil>\\<rceil> \\<union>\n  \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                   x\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>\n                      \\<in> {X. X = \\<bottom> \\<or>\n                                X = null \\<or>\n                                (\\<forall>x\n    \\<in>\\<lceil>\\<lceil>X\\<rceil>\\<rceil>.\n                                    x \\<noteq> \\<bottom>)}", "show \"x \\<noteq> \\<bottom> \\<Longrightarrow> x \\<noteq> null \\<Longrightarrow> y \\<noteq> \\<bottom> \\<Longrightarrow> y \\<noteq> null \\<Longrightarrow> ?thesis\"\n            when \"x = X \\<tau>\" \"y = Y \\<tau>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<noteq> \\<bottom>; x \\<noteq> null; y \\<noteq> \\<bottom>;\n     y \\<noteq> null\\<rbrakk>\n    \\<Longrightarrow> \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                   y\\<rceil>\\<rceil> \\<union>\n  \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                   x\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>\n                      \\<in> {X. X = \\<bottom> \\<or>\n                                X = null \\<or>\n                                (\\<forall>x\n    \\<in>\\<lceil>\\<lceil>X\\<rceil>\\<rceil>.\n                                    x \\<noteq> \\<bottom>)}", "by(auto simp: that,\n     insert\n       Set_inv_lemma[simplified OclValid_def \n                                          defined_def null_fun_def bot_fun_def, of Y \\<tau>]\n       Set_inv_lemma[simplified OclValid_def \n                                          defined_def null_fun_def bot_fun_def, of X \\<tau>],\n     auto)"], ["proof (state)\nthis:\n  \\<lbrakk>x = X \\<tau>; y = Y \\<tau>; x \\<noteq> \\<bottom>;\n   x \\<noteq> null; y \\<noteq> \\<bottom>; y \\<noteq> null\\<rbrakk>\n  \\<Longrightarrow> \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                 y\\<rceil>\\<rceil> \\<union>\n\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                 x\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>\n                    \\<in> {X. X = \\<bottom> \\<or>\n                              X = null \\<or>\n                              (\\<forall>x\n  \\<in>\\<lceil>\\<lceil>X\\<rceil>\\<rceil>.\n                                  x \\<noteq> \\<bottom>)}\n\ngoal (2 subgoals):\n 1. \\<lbrakk>x \\<noteq> \\<bottom>; x \\<noteq> null; y \\<noteq> \\<bottom>;\n     y \\<noteq> null\\<rbrakk>\n    \\<Longrightarrow> x = ?X3 ?\\<tau>3\n 2. \\<lbrakk>x \\<noteq> \\<bottom>; x \\<noteq> null; y \\<noteq> \\<bottom>;\n     y \\<noteq> null\\<rbrakk>\n    \\<Longrightarrow> y = ?Y3 ?\\<tau>3", "qed simp_all"], ["", "interpretation OclUnion : profile_bin\\<^sub>d_\\<^sub>d OclUnion \"\\<lambda>x y. Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e y\\<rceil>\\<rceil> \\<union> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e x\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. profile_bin\\<^sub>d_\\<^sub>d OclUnion\n     (\\<lambda>x y.\n         Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n          \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n       y\\<rceil>\\<rceil> \\<union>\n                            \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n       x\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. profile_bin\\<^sub>d_\\<^sub>d OclUnion\n     (\\<lambda>x y.\n         Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n          \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n       y\\<rceil>\\<rceil> \\<union>\n                            \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n       x\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>)", "have A : \"None \\<in> {X. X = bot \\<or> X = null \\<or> (\\<forall>x\\<in>\\<lceil>\\<lceil>X\\<rceil>\\<rceil>. x \\<noteq> bot)}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. None\n    \\<in> {X. X = \\<bottom> \\<or>\n              X = null \\<or>\n              (\\<forall>x\\<in>\\<lceil>\\<lceil>X\\<rceil>\\<rceil>.\n                  x \\<noteq> \\<bottom>)}", "by(simp add: bot_option_def)"], ["proof (state)\nthis:\n  None\n  \\<in> {X. X = \\<bottom> \\<or>\n            X = null \\<or>\n            (\\<forall>x\\<in>\\<lceil>\\<lceil>X\\<rceil>\\<rceil>.\n                x \\<noteq> \\<bottom>)}\n\ngoal (1 subgoal):\n 1. profile_bin\\<^sub>d_\\<^sub>d OclUnion\n     (\\<lambda>x y.\n         Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n          \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n       y\\<rceil>\\<rceil> \\<union>\n                            \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n       x\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>)", "have B : \"\\<lfloor>None\\<rfloor> \\<in> {X. X = bot \\<or> X = null \\<or> (\\<forall>x\\<in>\\<lceil>\\<lceil>X\\<rceil>\\<rceil>. x \\<noteq> bot)}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lfloor>None\\<rfloor>\n    \\<in> {X. X = \\<bottom> \\<or>\n              X = null \\<or>\n              (\\<forall>x\\<in>\\<lceil>\\<lceil>X\\<rceil>\\<rceil>.\n                  x \\<noteq> \\<bottom>)}", "by(simp add: null_option_def bot_option_def)"], ["proof (state)\nthis:\n  \\<lfloor>None\\<rfloor>\n  \\<in> {X. X = \\<bottom> \\<or>\n            X = null \\<or>\n            (\\<forall>x\\<in>\\<lceil>\\<lceil>X\\<rceil>\\<rceil>.\n                x \\<noteq> \\<bottom>)}\n\ngoal (1 subgoal):\n 1. profile_bin\\<^sub>d_\\<^sub>d OclUnion\n     (\\<lambda>x y.\n         Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n          \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n       y\\<rceil>\\<rceil> \\<union>\n                            \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n       x\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>)", "show \"profile_bin\\<^sub>d_\\<^sub>d OclUnion (\\<lambda>x y. Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e y\\<rceil>\\<rceil> \\<union> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e x\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. profile_bin\\<^sub>d_\\<^sub>d OclUnion\n     (\\<lambda>x y.\n         Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n          \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n       y\\<rceil>\\<rceil> \\<union>\n                            \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n       x\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>)", "apply unfold_locales"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>X Y.\n       bin OclUnion\n        (\\<lambda>x y.\n            Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n             \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n          y\\<rceil>\\<rceil> \\<union>\n                               \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n          x\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>)\n        defined defined X Y\n 2. \\<And>x y.\n       \\<lbrakk>x \\<noteq> \\<bottom>; x \\<noteq> null; y \\<noteq> \\<bottom>;\n        y \\<noteq> null\\<rbrakk>\n       \\<Longrightarrow> Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                          \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                       y\\<rceil>\\<rceil> \\<union>\n      \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                       x\\<rceil>\\<rceil>\\<rfloor>\\<rfloor> \\<noteq>\n                         \\<bottom> \\<and>\n                         Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                          \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                       y\\<rceil>\\<rceil> \\<union>\n      \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                       x\\<rceil>\\<rceil>\\<rfloor>\\<rfloor> \\<noteq>\n                         null", "apply(auto simp:OclUnion_def bot_option_def null_option_def null_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e_def bot_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e_def invalid_def)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<noteq> Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e None;\n        x \\<noteq>\n        Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e \\<lfloor>None\\<rfloor>;\n        y \\<noteq> Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e None;\n        y \\<noteq>\n        Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e \\<lfloor>None\\<rfloor>;\n        Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n         \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n      y\\<rceil>\\<rceil> \\<union>\n                           \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n      x\\<rceil>\\<rceil>\\<rfloor>\\<rfloor> =\n        Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e None\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>x y.\n       \\<lbrakk>x \\<noteq> Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e None;\n        x \\<noteq>\n        Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e \\<lfloor>None\\<rfloor>;\n        y \\<noteq> Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e None;\n        y \\<noteq>\n        Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e \\<lfloor>None\\<rfloor>;\n        Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n         \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n      y\\<rceil>\\<rceil> \\<union>\n                           \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n      x\\<rceil>\\<rceil>\\<rfloor>\\<rfloor> =\n        Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n         \\<lfloor>None\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> False", "apply(erule_tac Q=\"Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e y\\<rceil>\\<rceil> \\<union> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e x\\<rceil>\\<rceil>\\<rfloor>\\<rfloor> = Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e None\" in contrapos_pp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<noteq> Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e None;\n        x \\<noteq>\n        Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e \\<lfloor>None\\<rfloor>;\n        y \\<noteq> Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e None;\n        y \\<noteq>\n        Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e \\<lfloor>None\\<rfloor>;\n        \\<not> False\\<rbrakk>\n       \\<Longrightarrow> Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                          \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                       y\\<rceil>\\<rceil> \\<union>\n      \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                       x\\<rceil>\\<rceil>\\<rfloor>\\<rfloor> \\<noteq>\n                         Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e None\n 2. \\<And>x y.\n       \\<lbrakk>x \\<noteq> Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e None;\n        x \\<noteq>\n        Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e \\<lfloor>None\\<rfloor>;\n        y \\<noteq> Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e None;\n        y \\<noteq>\n        Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e \\<lfloor>None\\<rfloor>;\n        Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n         \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n      y\\<rceil>\\<rceil> \\<union>\n                           \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n      x\\<rceil>\\<rceil>\\<rfloor>\\<rfloor> =\n        Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n         \\<lfloor>None\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> False", "apply(subst Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e_inject[OF OclUnion_inv A])"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<noteq> Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e None;\n        x \\<noteq>\n        Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e \\<lfloor>None\\<rfloor>;\n        y \\<noteq> Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e None;\n        y \\<noteq>\n        Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e \\<lfloor>None\\<rfloor>;\n        \\<not> False\\<rbrakk>\n       \\<Longrightarrow> x \\<noteq> \\<bottom>\n 2. \\<And>x y.\n       \\<lbrakk>x \\<noteq> Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e None;\n        x \\<noteq>\n        Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e \\<lfloor>None\\<rfloor>;\n        y \\<noteq> Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e None;\n        y \\<noteq>\n        Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e \\<lfloor>None\\<rfloor>;\n        \\<not> False\\<rbrakk>\n       \\<Longrightarrow> x \\<noteq> null\n 3. \\<And>x y.\n       \\<lbrakk>x \\<noteq> Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e None;\n        x \\<noteq>\n        Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e \\<lfloor>None\\<rfloor>;\n        y \\<noteq> Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e None;\n        y \\<noteq>\n        Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e \\<lfloor>None\\<rfloor>;\n        \\<not> False\\<rbrakk>\n       \\<Longrightarrow> y \\<noteq> \\<bottom>\n 4. \\<And>x y.\n       \\<lbrakk>x \\<noteq> Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e None;\n        x \\<noteq>\n        Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e \\<lfloor>None\\<rfloor>;\n        y \\<noteq> Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e None;\n        y \\<noteq>\n        Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e \\<lfloor>None\\<rfloor>;\n        \\<not> False\\<rbrakk>\n       \\<Longrightarrow> y \\<noteq> null\n 5. \\<And>x y.\n       \\<lbrakk>x \\<noteq> Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e None;\n        x \\<noteq>\n        Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e \\<lfloor>None\\<rfloor>;\n        y \\<noteq> Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e None;\n        y \\<noteq>\n        Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e \\<lfloor>None\\<rfloor>;\n        \\<not> False\\<rbrakk>\n       \\<Longrightarrow> \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                      y\\<rceil>\\<rceil> \\<union>\n     \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                      x\\<rceil>\\<rceil>\\<rfloor>\\<rfloor> \\<noteq>\n                         None\n 6. \\<And>x y.\n       \\<lbrakk>x \\<noteq> Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e None;\n        x \\<noteq>\n        Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e \\<lfloor>None\\<rfloor>;\n        y \\<noteq> Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e None;\n        y \\<noteq>\n        Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e \\<lfloor>None\\<rfloor>;\n        Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n         \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n      y\\<rceil>\\<rceil> \\<union>\n                           \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n      x\\<rceil>\\<rceil>\\<rfloor>\\<rfloor> =\n        Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n         \\<lfloor>None\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> False", "apply(simp_all add:  null_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e_def bot_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e_def bot_option_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<noteq> Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e None;\n        x \\<noteq>\n        Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e \\<lfloor>None\\<rfloor>;\n        y \\<noteq> Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e None;\n        y \\<noteq>\n        Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e \\<lfloor>None\\<rfloor>;\n        Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n         \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n      y\\<rceil>\\<rceil> \\<union>\n                           \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n      x\\<rceil>\\<rceil>\\<rfloor>\\<rfloor> =\n        Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n         \\<lfloor>None\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> False", "apply(erule_tac Q=\"Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e y\\<rceil>\\<rceil> \\<union> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e x\\<rceil>\\<rceil>\\<rfloor>\\<rfloor> = Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e \\<lfloor>None\\<rfloor>\" in contrapos_pp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<noteq> Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e None;\n        x \\<noteq>\n        Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e \\<lfloor>None\\<rfloor>;\n        y \\<noteq> Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e None;\n        y \\<noteq>\n        Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e \\<lfloor>None\\<rfloor>;\n        \\<not> False\\<rbrakk>\n       \\<Longrightarrow> Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                          \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                       y\\<rceil>\\<rceil> \\<union>\n      \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                       x\\<rceil>\\<rceil>\\<rfloor>\\<rfloor> \\<noteq>\n                         Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                          \\<lfloor>None\\<rfloor>", "apply(subst Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e_inject[OF OclUnion_inv B])"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<noteq> Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e None;\n        x \\<noteq>\n        Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e \\<lfloor>None\\<rfloor>;\n        y \\<noteq> Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e None;\n        y \\<noteq>\n        Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e \\<lfloor>None\\<rfloor>;\n        \\<not> False\\<rbrakk>\n       \\<Longrightarrow> x \\<noteq> \\<bottom>\n 2. \\<And>x y.\n       \\<lbrakk>x \\<noteq> Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e None;\n        x \\<noteq>\n        Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e \\<lfloor>None\\<rfloor>;\n        y \\<noteq> Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e None;\n        y \\<noteq>\n        Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e \\<lfloor>None\\<rfloor>;\n        \\<not> False\\<rbrakk>\n       \\<Longrightarrow> x \\<noteq> null\n 3. \\<And>x y.\n       \\<lbrakk>x \\<noteq> Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e None;\n        x \\<noteq>\n        Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e \\<lfloor>None\\<rfloor>;\n        y \\<noteq> Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e None;\n        y \\<noteq>\n        Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e \\<lfloor>None\\<rfloor>;\n        \\<not> False\\<rbrakk>\n       \\<Longrightarrow> y \\<noteq> \\<bottom>\n 4. \\<And>x y.\n       \\<lbrakk>x \\<noteq> Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e None;\n        x \\<noteq>\n        Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e \\<lfloor>None\\<rfloor>;\n        y \\<noteq> Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e None;\n        y \\<noteq>\n        Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e \\<lfloor>None\\<rfloor>;\n        \\<not> False\\<rbrakk>\n       \\<Longrightarrow> y \\<noteq> null\n 5. \\<And>x y.\n       \\<lbrakk>x \\<noteq> Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e None;\n        x \\<noteq>\n        Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e \\<lfloor>None\\<rfloor>;\n        y \\<noteq> Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e None;\n        y \\<noteq>\n        Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e \\<lfloor>None\\<rfloor>;\n        \\<not> False\\<rbrakk>\n       \\<Longrightarrow> \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                      y\\<rceil>\\<rceil> \\<union>\n     \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                      x\\<rceil>\\<rceil>\\<rfloor>\\<rfloor> \\<noteq>\n                         \\<lfloor>None\\<rfloor>", "apply(simp_all add:  null_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e_def bot_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e_def bot_option_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  profile_bin\\<^sub>d_\\<^sub>d OclUnion\n   (\\<lambda>x y.\n       Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n        \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n     y\\<rceil>\\<rceil> \\<union>\n                          \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n     x\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>)\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection\\<open>Definition: Intersection\\<close>"], ["", "definition OclIntersection   :: \"[('\\<AA>,'\\<alpha>::null) Set,('\\<AA>,'\\<alpha>) Set] \\<Rightarrow> ('\\<AA>,'\\<alpha>) Set\"\nwhere     \"OclIntersection x y = (\\<lambda> \\<tau>.  if (\\<delta> x) \\<tau> = true \\<tau> \\<and> (\\<delta> y) \\<tau> = true \\<tau>\n                                        then Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e (y \\<tau>)\\<rceil>\\<rceil> \n                                                         \\<inter> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e (x \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>\n                                        else \\<bottom>  )\""], ["", "notation   OclIntersection(\"_->intersection\\<^sub>S\\<^sub>e\\<^sub>t'(_')\"   (*[71,70]70*))"], ["", "lemma OclIntersection_inv: \"(x:: Set('b::{null})) \\<noteq> \\<bottom> \\<Longrightarrow> x \\<noteq> null \\<Longrightarrow>  y \\<noteq> \\<bottom>  \\<Longrightarrow> y \\<noteq> null \\<Longrightarrow>\n           \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e y\\<rceil>\\<rceil> \\<inter> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e x\\<rceil>\\<rceil>\\<rfloor>\\<rfloor> \\<in> {X. X = bot \\<or> X = null \\<or> (\\<forall>x\\<in>\\<lceil>\\<lceil>X\\<rceil>\\<rceil>. x \\<noteq> bot)}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<noteq> \\<bottom>; x \\<noteq> null; y \\<noteq> \\<bottom>;\n     y \\<noteq> null\\<rbrakk>\n    \\<Longrightarrow> \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                   y\\<rceil>\\<rceil> \\<inter>\n  \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                   x\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>\n                      \\<in> {X. X = \\<bottom> \\<or>\n                                X = null \\<or>\n                                (\\<forall>x\n    \\<in>\\<lceil>\\<lceil>X\\<rceil>\\<rceil>.\n                                    x \\<noteq> \\<bottom>)}", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<noteq> \\<bottom>; x \\<noteq> null; y \\<noteq> \\<bottom>;\n     y \\<noteq> null\\<rbrakk>\n    \\<Longrightarrow> \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                   y\\<rceil>\\<rceil> \\<inter>\n  \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                   x\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>\n                      \\<in> {X. X = \\<bottom> \\<or>\n                                X = null \\<or>\n                                (\\<forall>x\n    \\<in>\\<lceil>\\<lceil>X\\<rceil>\\<rceil>.\n                                    x \\<noteq> \\<bottom>)}", "fix X Y :: \"'a state \\<times> 'a state \\<Rightarrow> Set('b)\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<noteq> \\<bottom>; x \\<noteq> null; y \\<noteq> \\<bottom>;\n     y \\<noteq> null\\<rbrakk>\n    \\<Longrightarrow> \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                   y\\<rceil>\\<rceil> \\<inter>\n  \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                   x\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>\n                      \\<in> {X. X = \\<bottom> \\<or>\n                                X = null \\<or>\n                                (\\<forall>x\n    \\<in>\\<lceil>\\<lceil>X\\<rceil>\\<rceil>.\n                                    x \\<noteq> \\<bottom>)}", "fix \\<tau>"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<noteq> \\<bottom>; x \\<noteq> null; y \\<noteq> \\<bottom>;\n     y \\<noteq> null\\<rbrakk>\n    \\<Longrightarrow> \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                   y\\<rceil>\\<rceil> \\<inter>\n  \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                   x\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>\n                      \\<in> {X. X = \\<bottom> \\<or>\n                                X = null \\<or>\n                                (\\<forall>x\n    \\<in>\\<lceil>\\<lceil>X\\<rceil>\\<rceil>.\n                                    x \\<noteq> \\<bottom>)}", "show \"x \\<noteq> \\<bottom> \\<Longrightarrow> x \\<noteq> null \\<Longrightarrow> y \\<noteq> \\<bottom> \\<Longrightarrow> y \\<noteq> null \\<Longrightarrow> ?thesis\"\n            when \"x = X \\<tau>\" \"y = Y \\<tau>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<noteq> \\<bottom>; x \\<noteq> null; y \\<noteq> \\<bottom>;\n     y \\<noteq> null\\<rbrakk>\n    \\<Longrightarrow> \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                   y\\<rceil>\\<rceil> \\<inter>\n  \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                   x\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>\n                      \\<in> {X. X = \\<bottom> \\<or>\n                                X = null \\<or>\n                                (\\<forall>x\n    \\<in>\\<lceil>\\<lceil>X\\<rceil>\\<rceil>.\n                                    x \\<noteq> \\<bottom>)}", "by(auto simp: that,\n     insert\n       Set_inv_lemma[simplified OclValid_def \n                                          defined_def null_fun_def bot_fun_def, of Y \\<tau>]\n       Set_inv_lemma[simplified OclValid_def \n                                          defined_def null_fun_def bot_fun_def, of X \\<tau>],\n     auto)"], ["proof (state)\nthis:\n  \\<lbrakk>x = X \\<tau>; y = Y \\<tau>; x \\<noteq> \\<bottom>;\n   x \\<noteq> null; y \\<noteq> \\<bottom>; y \\<noteq> null\\<rbrakk>\n  \\<Longrightarrow> \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                 y\\<rceil>\\<rceil> \\<inter>\n\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                 x\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>\n                    \\<in> {X. X = \\<bottom> \\<or>\n                              X = null \\<or>\n                              (\\<forall>x\n  \\<in>\\<lceil>\\<lceil>X\\<rceil>\\<rceil>.\n                                  x \\<noteq> \\<bottom>)}\n\ngoal (2 subgoals):\n 1. \\<lbrakk>x \\<noteq> \\<bottom>; x \\<noteq> null; y \\<noteq> \\<bottom>;\n     y \\<noteq> null\\<rbrakk>\n    \\<Longrightarrow> x = ?X3 ?\\<tau>3\n 2. \\<lbrakk>x \\<noteq> \\<bottom>; x \\<noteq> null; y \\<noteq> \\<bottom>;\n     y \\<noteq> null\\<rbrakk>\n    \\<Longrightarrow> y = ?Y3 ?\\<tau>3", "qed simp_all"], ["", "interpretation OclIntersection : profile_bin\\<^sub>d_\\<^sub>d OclIntersection \"\\<lambda>x y. Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e y\\<rceil>\\<rceil> \\<inter> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e x\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. profile_bin\\<^sub>d_\\<^sub>d OclIntersection\n     (\\<lambda>x y.\n         Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n          \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n       y\\<rceil>\\<rceil> \\<inter>\n                            \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n       x\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. profile_bin\\<^sub>d_\\<^sub>d OclIntersection\n     (\\<lambda>x y.\n         Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n          \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n       y\\<rceil>\\<rceil> \\<inter>\n                            \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n       x\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>)", "have A : \"None \\<in> {X. X = bot \\<or> X = null \\<or> (\\<forall>x\\<in>\\<lceil>\\<lceil>X\\<rceil>\\<rceil>. x \\<noteq> bot)}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. None\n    \\<in> {X. X = \\<bottom> \\<or>\n              X = null \\<or>\n              (\\<forall>x\\<in>\\<lceil>\\<lceil>X\\<rceil>\\<rceil>.\n                  x \\<noteq> \\<bottom>)}", "by(simp add: bot_option_def)"], ["proof (state)\nthis:\n  None\n  \\<in> {X. X = \\<bottom> \\<or>\n            X = null \\<or>\n            (\\<forall>x\\<in>\\<lceil>\\<lceil>X\\<rceil>\\<rceil>.\n                x \\<noteq> \\<bottom>)}\n\ngoal (1 subgoal):\n 1. profile_bin\\<^sub>d_\\<^sub>d OclIntersection\n     (\\<lambda>x y.\n         Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n          \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n       y\\<rceil>\\<rceil> \\<inter>\n                            \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n       x\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>)", "have B : \"\\<lfloor>None\\<rfloor> \\<in> {X. X = bot \\<or> X = null \\<or> (\\<forall>x\\<in>\\<lceil>\\<lceil>X\\<rceil>\\<rceil>. x \\<noteq> bot)}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lfloor>None\\<rfloor>\n    \\<in> {X. X = \\<bottom> \\<or>\n              X = null \\<or>\n              (\\<forall>x\\<in>\\<lceil>\\<lceil>X\\<rceil>\\<rceil>.\n                  x \\<noteq> \\<bottom>)}", "by(simp add: null_option_def bot_option_def)"], ["proof (state)\nthis:\n  \\<lfloor>None\\<rfloor>\n  \\<in> {X. X = \\<bottom> \\<or>\n            X = null \\<or>\n            (\\<forall>x\\<in>\\<lceil>\\<lceil>X\\<rceil>\\<rceil>.\n                x \\<noteq> \\<bottom>)}\n\ngoal (1 subgoal):\n 1. profile_bin\\<^sub>d_\\<^sub>d OclIntersection\n     (\\<lambda>x y.\n         Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n          \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n       y\\<rceil>\\<rceil> \\<inter>\n                            \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n       x\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>)", "show \"profile_bin\\<^sub>d_\\<^sub>d OclIntersection (\\<lambda>x y. Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e y\\<rceil>\\<rceil> \\<inter> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e x\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. profile_bin\\<^sub>d_\\<^sub>d OclIntersection\n     (\\<lambda>x y.\n         Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n          \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n       y\\<rceil>\\<rceil> \\<inter>\n                            \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n       x\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>)", "apply unfold_locales"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>X Y.\n       bin OclIntersection\n        (\\<lambda>x y.\n            Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n             \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n          y\\<rceil>\\<rceil> \\<inter>\n                               \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n          x\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>)\n        defined defined X Y\n 2. \\<And>x y.\n       \\<lbrakk>x \\<noteq> \\<bottom>; x \\<noteq> null; y \\<noteq> \\<bottom>;\n        y \\<noteq> null\\<rbrakk>\n       \\<Longrightarrow> Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                          \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                       y\\<rceil>\\<rceil> \\<inter>\n      \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                       x\\<rceil>\\<rceil>\\<rfloor>\\<rfloor> \\<noteq>\n                         \\<bottom> \\<and>\n                         Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                          \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                       y\\<rceil>\\<rceil> \\<inter>\n      \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                       x\\<rceil>\\<rceil>\\<rfloor>\\<rfloor> \\<noteq>\n                         null", "apply(auto simp:OclIntersection_def bot_option_def null_option_def null_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e_def bot_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e_def invalid_def)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<noteq> Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e None;\n        x \\<noteq>\n        Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e \\<lfloor>None\\<rfloor>;\n        y \\<noteq> Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e None;\n        y \\<noteq>\n        Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e \\<lfloor>None\\<rfloor>;\n        Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n         \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n      y\\<rceil>\\<rceil> \\<inter>\n                           \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n      x\\<rceil>\\<rceil>\\<rfloor>\\<rfloor> =\n        Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e None\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>x y.\n       \\<lbrakk>x \\<noteq> Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e None;\n        x \\<noteq>\n        Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e \\<lfloor>None\\<rfloor>;\n        y \\<noteq> Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e None;\n        y \\<noteq>\n        Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e \\<lfloor>None\\<rfloor>;\n        Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n         \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n      y\\<rceil>\\<rceil> \\<inter>\n                           \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n      x\\<rceil>\\<rceil>\\<rfloor>\\<rfloor> =\n        Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n         \\<lfloor>None\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> False", "apply(erule_tac Q=\"Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e y\\<rceil>\\<rceil> \\<inter> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e x\\<rceil>\\<rceil>\\<rfloor>\\<rfloor> = Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e None\" in contrapos_pp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<noteq> Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e None;\n        x \\<noteq>\n        Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e \\<lfloor>None\\<rfloor>;\n        y \\<noteq> Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e None;\n        y \\<noteq>\n        Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e \\<lfloor>None\\<rfloor>;\n        \\<not> False\\<rbrakk>\n       \\<Longrightarrow> Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                          \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                       y\\<rceil>\\<rceil> \\<inter>\n      \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                       x\\<rceil>\\<rceil>\\<rfloor>\\<rfloor> \\<noteq>\n                         Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e None\n 2. \\<And>x y.\n       \\<lbrakk>x \\<noteq> Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e None;\n        x \\<noteq>\n        Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e \\<lfloor>None\\<rfloor>;\n        y \\<noteq> Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e None;\n        y \\<noteq>\n        Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e \\<lfloor>None\\<rfloor>;\n        Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n         \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n      y\\<rceil>\\<rceil> \\<inter>\n                           \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n      x\\<rceil>\\<rceil>\\<rfloor>\\<rfloor> =\n        Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n         \\<lfloor>None\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> False", "apply(subst Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e_inject[OF OclIntersection_inv A])"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<noteq> Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e None;\n        x \\<noteq>\n        Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e \\<lfloor>None\\<rfloor>;\n        y \\<noteq> Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e None;\n        y \\<noteq>\n        Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e \\<lfloor>None\\<rfloor>;\n        \\<not> False\\<rbrakk>\n       \\<Longrightarrow> x \\<noteq> \\<bottom>\n 2. \\<And>x y.\n       \\<lbrakk>x \\<noteq> Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e None;\n        x \\<noteq>\n        Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e \\<lfloor>None\\<rfloor>;\n        y \\<noteq> Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e None;\n        y \\<noteq>\n        Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e \\<lfloor>None\\<rfloor>;\n        \\<not> False\\<rbrakk>\n       \\<Longrightarrow> x \\<noteq> null\n 3. \\<And>x y.\n       \\<lbrakk>x \\<noteq> Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e None;\n        x \\<noteq>\n        Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e \\<lfloor>None\\<rfloor>;\n        y \\<noteq> Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e None;\n        y \\<noteq>\n        Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e \\<lfloor>None\\<rfloor>;\n        \\<not> False\\<rbrakk>\n       \\<Longrightarrow> y \\<noteq> \\<bottom>\n 4. \\<And>x y.\n       \\<lbrakk>x \\<noteq> Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e None;\n        x \\<noteq>\n        Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e \\<lfloor>None\\<rfloor>;\n        y \\<noteq> Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e None;\n        y \\<noteq>\n        Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e \\<lfloor>None\\<rfloor>;\n        \\<not> False\\<rbrakk>\n       \\<Longrightarrow> y \\<noteq> null\n 5. \\<And>x y.\n       \\<lbrakk>x \\<noteq> Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e None;\n        x \\<noteq>\n        Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e \\<lfloor>None\\<rfloor>;\n        y \\<noteq> Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e None;\n        y \\<noteq>\n        Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e \\<lfloor>None\\<rfloor>;\n        \\<not> False\\<rbrakk>\n       \\<Longrightarrow> \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                      y\\<rceil>\\<rceil> \\<inter>\n     \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                      x\\<rceil>\\<rceil>\\<rfloor>\\<rfloor> \\<noteq>\n                         None\n 6. \\<And>x y.\n       \\<lbrakk>x \\<noteq> Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e None;\n        x \\<noteq>\n        Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e \\<lfloor>None\\<rfloor>;\n        y \\<noteq> Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e None;\n        y \\<noteq>\n        Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e \\<lfloor>None\\<rfloor>;\n        Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n         \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n      y\\<rceil>\\<rceil> \\<inter>\n                           \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n      x\\<rceil>\\<rceil>\\<rfloor>\\<rfloor> =\n        Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n         \\<lfloor>None\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> False", "apply(simp_all add:  null_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e_def bot_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e_def bot_option_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<noteq> Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e None;\n        x \\<noteq>\n        Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e \\<lfloor>None\\<rfloor>;\n        y \\<noteq> Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e None;\n        y \\<noteq>\n        Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e \\<lfloor>None\\<rfloor>;\n        Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n         \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n      y\\<rceil>\\<rceil> \\<inter>\n                           \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n      x\\<rceil>\\<rceil>\\<rfloor>\\<rfloor> =\n        Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n         \\<lfloor>None\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> False", "apply(erule_tac Q=\"Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e y\\<rceil>\\<rceil> \\<inter> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e x\\<rceil>\\<rceil>\\<rfloor>\\<rfloor> = Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e \\<lfloor>None\\<rfloor>\" in contrapos_pp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<noteq> Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e None;\n        x \\<noteq>\n        Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e \\<lfloor>None\\<rfloor>;\n        y \\<noteq> Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e None;\n        y \\<noteq>\n        Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e \\<lfloor>None\\<rfloor>;\n        \\<not> False\\<rbrakk>\n       \\<Longrightarrow> Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                          \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                       y\\<rceil>\\<rceil> \\<inter>\n      \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                       x\\<rceil>\\<rceil>\\<rfloor>\\<rfloor> \\<noteq>\n                         Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                          \\<lfloor>None\\<rfloor>", "apply(subst Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e_inject[OF OclIntersection_inv B])"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<noteq> Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e None;\n        x \\<noteq>\n        Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e \\<lfloor>None\\<rfloor>;\n        y \\<noteq> Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e None;\n        y \\<noteq>\n        Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e \\<lfloor>None\\<rfloor>;\n        \\<not> False\\<rbrakk>\n       \\<Longrightarrow> x \\<noteq> \\<bottom>\n 2. \\<And>x y.\n       \\<lbrakk>x \\<noteq> Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e None;\n        x \\<noteq>\n        Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e \\<lfloor>None\\<rfloor>;\n        y \\<noteq> Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e None;\n        y \\<noteq>\n        Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e \\<lfloor>None\\<rfloor>;\n        \\<not> False\\<rbrakk>\n       \\<Longrightarrow> x \\<noteq> null\n 3. \\<And>x y.\n       \\<lbrakk>x \\<noteq> Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e None;\n        x \\<noteq>\n        Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e \\<lfloor>None\\<rfloor>;\n        y \\<noteq> Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e None;\n        y \\<noteq>\n        Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e \\<lfloor>None\\<rfloor>;\n        \\<not> False\\<rbrakk>\n       \\<Longrightarrow> y \\<noteq> \\<bottom>\n 4. \\<And>x y.\n       \\<lbrakk>x \\<noteq> Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e None;\n        x \\<noteq>\n        Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e \\<lfloor>None\\<rfloor>;\n        y \\<noteq> Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e None;\n        y \\<noteq>\n        Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e \\<lfloor>None\\<rfloor>;\n        \\<not> False\\<rbrakk>\n       \\<Longrightarrow> y \\<noteq> null\n 5. \\<And>x y.\n       \\<lbrakk>x \\<noteq> Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e None;\n        x \\<noteq>\n        Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e \\<lfloor>None\\<rfloor>;\n        y \\<noteq> Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e None;\n        y \\<noteq>\n        Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e \\<lfloor>None\\<rfloor>;\n        \\<not> False\\<rbrakk>\n       \\<Longrightarrow> \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                      y\\<rceil>\\<rceil> \\<inter>\n     \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                      x\\<rceil>\\<rceil>\\<rfloor>\\<rfloor> \\<noteq>\n                         \\<lfloor>None\\<rfloor>", "apply(simp_all add:  null_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e_def bot_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e_def bot_option_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  profile_bin\\<^sub>d_\\<^sub>d OclIntersection\n   (\\<lambda>x y.\n       Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n        \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n     y\\<rceil>\\<rceil> \\<inter>\n                          \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n     x\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>)\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection\\<open>Definition (future operators)\\<close>"], ["", "consts (* abstract set collection operations *)\n    OclCount       :: \"[('\\<AA>,'\\<alpha>::null) Set,('\\<AA>,'\\<alpha>) Set] \\<Rightarrow> '\\<AA> Integer\"\n    OclSum         :: \" ('\\<AA>,'\\<alpha>::null) Set \\<Rightarrow> '\\<AA> Integer\""], ["", "notation  OclCount       (\"_->count\\<^sub>S\\<^sub>e\\<^sub>t'(_')\" (*[66,65]65*))"], ["", "notation  OclSum         (\"_->sum\\<^sub>S\\<^sub>e\\<^sub>t'(')\" (*[66]*))"], ["", "subsection\\<open>Logical Properties\\<close>"], ["", "text\\<open>OclIncluding\\<close>"], ["", "lemma OclIncluding_valid_args_valid:\n\"(\\<tau> \\<Turnstile> \\<upsilon>(X->including\\<^sub>S\\<^sub>e\\<^sub>t(x))) = ((\\<tau> \\<Turnstile>(\\<delta> X)) \\<and> (\\<tau> \\<Turnstile>(\\<upsilon> x)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<tau>\n      \\<Turnstile> \\<upsilon> X->including\\<^sub>S\\<^sub>e\\<^sub>t(x)) =\n    (\\<tau> \\<Turnstile> \\<delta> X \\<and> \\<tau> \\<Turnstile> \\<upsilon> x)", "by (metis (hide_lams, no_types) OclIncluding.def_valid_then_def OclIncluding.defined_args_valid)"], ["", "lemma OclIncluding_valid_args_valid''[simp,code_unfold]:\n\"\\<upsilon>(X->including\\<^sub>S\\<^sub>e\\<^sub>t(x)) = ((\\<delta> X) and (\\<upsilon> x))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<upsilon> X->including\\<^sub>S\\<^sub>e\\<^sub>t(x) =\n    (\\<delta> X and \\<upsilon> x)", "by (simp add: OclIncluding.def_valid_then_def)"], ["", "text\\<open>etc. etc.\\<close>"], ["", "text_raw\\<open>\\isatagafp\\<close>"], ["", "text\\<open>OclExcluding\\<close>"], ["", "lemma OclExcluding_valid_args_valid:\n\"(\\<tau> \\<Turnstile> \\<upsilon>(X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(x))) = ((\\<tau> \\<Turnstile>(\\<delta> X)) \\<and> (\\<tau> \\<Turnstile>(\\<upsilon> x)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<tau>\n      \\<Turnstile> \\<upsilon> X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(x)) =\n    (\\<tau> \\<Turnstile> \\<delta> X \\<and> \\<tau> \\<Turnstile> \\<upsilon> x)", "by (metis OclExcluding.def_valid_then_def OclExcluding.defined_args_valid)"], ["", "lemma OclExcluding_valid_args_valid''[simp,code_unfold]:\n\"\\<upsilon>(X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(x)) = ((\\<delta> X) and (\\<upsilon> x))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<upsilon> X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(x) =\n    (\\<delta> X and \\<upsilon> x)", "by (simp add: OclExcluding.def_valid_then_def)"], ["", "text\\<open>OclIncludes\\<close>"], ["", "lemma OclIncludes_valid_args_valid:\n\"(\\<tau> \\<Turnstile> \\<upsilon>(X->includes\\<^sub>S\\<^sub>e\\<^sub>t(x))) = ((\\<tau> \\<Turnstile>(\\<delta> X)) \\<and> (\\<tau> \\<Turnstile>(\\<upsilon> x)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<tau>\n      \\<Turnstile> \\<upsilon> X->includes\\<^sub>S\\<^sub>e\\<^sub>t(x)) =\n    (\\<tau> \\<Turnstile> \\<delta> X \\<and> \\<tau> \\<Turnstile> \\<upsilon> x)", "by (simp add: OclIncludes.def_valid_then_def foundation10')"], ["", "lemma OclIncludes_valid_args_valid''[simp,code_unfold]:\n\"\\<upsilon>(X->includes\\<^sub>S\\<^sub>e\\<^sub>t(x)) = ((\\<delta> X) and (\\<upsilon> x))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<upsilon> X->includes\\<^sub>S\\<^sub>e\\<^sub>t(x) =\n    (\\<delta> X and \\<upsilon> x)", "by (simp add: OclIncludes.def_valid_then_def)"], ["", "text\\<open>OclExcludes\\<close>"], ["", "lemma OclExcludes_valid_args_valid:\n\"(\\<tau> \\<Turnstile> \\<upsilon>(X->excludes\\<^sub>S\\<^sub>e\\<^sub>t(x))) = ((\\<tau> \\<Turnstile>(\\<delta> X)) \\<and> (\\<tau> \\<Turnstile>(\\<upsilon> x)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<tau>\n      \\<Turnstile> \\<upsilon> X->excludes\\<^sub>S\\<^sub>e\\<^sub>t(x)) =\n    (\\<tau> \\<Turnstile> \\<delta> X \\<and> \\<tau> \\<Turnstile> \\<upsilon> x)", "by (simp add: OclExcludes.def_valid_then_def foundation10')"], ["", "lemma OclExcludes_valid_args_valid''[simp,code_unfold]:\n\"\\<upsilon>(X->excludes\\<^sub>S\\<^sub>e\\<^sub>t(x)) = ((\\<delta> X) and (\\<upsilon> x))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<upsilon> X->excludes\\<^sub>S\\<^sub>e\\<^sub>t(x) =\n    (\\<delta> X and \\<upsilon> x)", "by (simp add: OclExcludes.def_valid_then_def)"], ["", "text\\<open>OclSize\\<close>"], ["", "lemma OclSize_defined_args_valid: \"\\<tau> \\<Turnstile> \\<delta> (X->size\\<^sub>S\\<^sub>e\\<^sub>t()) \\<Longrightarrow> \\<tau> \\<Turnstile> \\<delta> X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<tau>\n     \\<Turnstile> \\<delta> X->size\\<^sub>S\\<^sub>e\\<^sub>t() \\<Longrightarrow>\n    \\<tau> \\<Turnstile> \\<delta> X", "by(auto simp: OclSize_def OclValid_def true_def valid_def false_def StrongEq_def\n              defined_def invalid_def bot_fun_def null_fun_def\n        split: bool.split_asm HOL.if_split_asm option.split)"], ["", "lemma OclSize_infinite:\nassumes non_finite:\"\\<tau> \\<Turnstile> not(\\<delta>(S->size\\<^sub>S\\<^sub>e\\<^sub>t()))\"\nshows   \"(\\<tau> \\<Turnstile> not(\\<delta>(S))) \\<or> \\<not> finite \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e (S \\<tau>)\\<rceil>\\<rceil>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<tau> \\<Turnstile> not (\\<delta> S) \\<or>\n    infinite\n     \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                      (S \\<tau>)\\<rceil>\\<rceil>", "apply(insert non_finite, simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<tau>\n     |\\<noteq> \\<delta> S->size\\<^sub>S\\<^sub>e\\<^sub>t() \\<Longrightarrow>\n    \\<tau> \\<Turnstile> \\<delta> S \\<longrightarrow>\n    infinite\n     \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                      (S \\<tau>)\\<rceil>\\<rceil>", "apply(rule impI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<tau> |\\<noteq> \\<delta> S->size\\<^sub>S\\<^sub>e\\<^sub>t();\n     \\<tau> \\<Turnstile> \\<delta> S\\<rbrakk>\n    \\<Longrightarrow> infinite\n                       \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n  (S \\<tau>)\\<rceil>\\<rceil>", "apply(simp add: OclSize_def OclValid_def defined_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>(if (if finite\n                      \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n (S \\<tau>)\\<rceil>\\<rceil>\n                  then \\<lfloor>\\<lfloor>int\n    (card\n      \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                       (S \\<tau>)\\<rceil>\\<rceil>)\\<rfloor>\\<rfloor>\n                  else \\<bottom>) =\n                 \\<bottom> \\<tau> \\<or>\n                 (if finite\n                      \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n (S \\<tau>)\\<rceil>\\<rceil>\n                  then \\<lfloor>\\<lfloor>int\n    (card\n      \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                       (S \\<tau>)\\<rceil>\\<rceil>)\\<rfloor>\\<rfloor>\n                  else \\<bottom>) =\n                 null \\<tau>\n              then false \\<tau> else true \\<tau>) \\<noteq>\n             true \\<tau>;\n     (if S \\<tau> = \\<bottom> \\<tau> \\<or> S \\<tau> = null \\<tau>\n      then false \\<tau> else true \\<tau>) =\n     true \\<tau>\\<rbrakk>\n    \\<Longrightarrow> infinite\n                       \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n  (S \\<tau>)\\<rceil>\\<rceil>", "apply(case_tac \"finite \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e (S \\<tau>)\\<rceil>\\<rceil>\",\n      simp_all add:null_fun_def null_option_def bot_fun_def bot_option_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma \"\\<tau> \\<Turnstile> \\<delta> X \\<Longrightarrow> \\<not> finite \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e (X \\<tau>)\\<rceil>\\<rceil> \\<Longrightarrow> \\<not> \\<tau> \\<Turnstile> \\<delta> (X->size\\<^sub>S\\<^sub>e\\<^sub>t())\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<tau> \\<Turnstile> \\<delta> X;\n     infinite\n      \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                       (X \\<tau>)\\<rceil>\\<rceil>\\<rbrakk>\n    \\<Longrightarrow> \\<tau>\n                       |\\<noteq> \\<delta> X->size\\<^sub>S\\<^sub>e\\<^sub>t()", "by(simp add: OclSize_def OclValid_def defined_def bot_fun_def false_def true_def)"], ["", "lemma size_defined:\n assumes X_finite: \"\\<And>\\<tau>. finite \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e (X \\<tau>)\\<rceil>\\<rceil>\"\n shows \"\\<delta> (X->size\\<^sub>S\\<^sub>e\\<^sub>t()) = \\<delta> X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<delta> X->size\\<^sub>S\\<^sub>e\\<^sub>t() = \\<delta> X", "apply(rule ext, simp add: cp_defined[of \"X->size\\<^sub>S\\<^sub>e\\<^sub>t()\"] OclSize_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       (\\<delta> (\\<lambda>\\<tau>.\n                     if (\\<delta> X) \\<tau> = true \\<tau> \\<and>\n                        finite\n                         \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n    (X \\<tau>)\\<rceil>\\<rceil>\n                     then \\<lfloor>\\<lfloor>int\n       (card\n         \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                          (X \\<tau>)\\<rceil>\\<rceil>)\\<rfloor>\\<rfloor>\n                     else \\<bottom>))\n        x =\n       (\\<delta> X) x", "apply(simp add: defined_def bot_option_def bot_fun_def null_option_def null_fun_def X_finite)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma size_defined':\n assumes X_finite: \"finite \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e (X \\<tau>)\\<rceil>\\<rceil>\"\n shows \"(\\<tau> \\<Turnstile> \\<delta> (X->size\\<^sub>S\\<^sub>e\\<^sub>t())) = (\\<tau> \\<Turnstile> \\<delta> X)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<tau> \\<Turnstile> \\<delta> X->size\\<^sub>S\\<^sub>e\\<^sub>t()) =\n    (\\<tau> \\<Turnstile> \\<delta> X)", "apply(simp add: cp_defined[of \"X->size\\<^sub>S\\<^sub>e\\<^sub>t()\"] OclSize_def OclValid_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. ((\\<delta> (\\<lambda>\\<tau>.\n                   if (\\<delta> X) \\<tau> = true \\<tau> \\<and>\n                      finite\n                       \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n  (X \\<tau>)\\<rceil>\\<rceil>\n                   then \\<lfloor>\\<lfloor>int\n     (card\n       \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                        (X \\<tau>)\\<rceil>\\<rceil>)\\<rfloor>\\<rfloor>\n                   else \\<bottom>))\n      \\<tau> =\n     true \\<tau>) =\n    ((\\<delta> X) \\<tau> = true \\<tau>)", "apply(simp add: defined_def bot_option_def bot_fun_def null_option_def null_fun_def X_finite)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "text\\<open>OclIsEmpty\\<close>"], ["", "lemma OclIsEmpty_defined_args_valid:\"\\<tau> \\<Turnstile> \\<delta> (X->isEmpty\\<^sub>S\\<^sub>e\\<^sub>t()) \\<Longrightarrow> \\<tau> \\<Turnstile> \\<upsilon> X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<tau>\n     \\<Turnstile> \\<delta> X->isEmpty\\<^sub>S\\<^sub>e\\<^sub>t() \\<Longrightarrow>\n    \\<tau> \\<Turnstile> \\<upsilon> X", "apply(auto simp: OclIsEmpty_def OclValid_def defined_def valid_def false_def true_def\n                   bot_fun_def null_fun_def OclAnd_def OclOr_def OclNot_def\n             split: if_split_asm)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>X \\<tau> = \\<bottom>;\n     (case case (X->size\\<^sub>S\\<^sub>e\\<^sub>t() \\<doteq> \\<zero>)\n                 \\<tau> of\n           None \\<Rightarrow> None\n           | \\<lfloor>None\\<rfloor> \\<Rightarrow> \\<lfloor>None\\<rfloor>\n           | \\<lfloor>\\<lfloor>xa\\<rfloor>\\<rfloor> \\<Rightarrow>\n               \\<lfloor>\\<lfloor>\\<not> xa\\<rfloor>\\<rfloor> of\n      None \\<Rightarrow> None\n      | \\<lfloor>None\\<rfloor> \\<Rightarrow> \\<lfloor>None\\<rfloor>\n      | \\<lfloor>\\<lfloor>xa\\<rfloor>\\<rfloor> \\<Rightarrow>\n          \\<lfloor>\\<lfloor>\\<not> xa\\<rfloor>\\<rfloor>) \\<noteq>\n     \\<bottom>;\n     (case case (X->size\\<^sub>S\\<^sub>e\\<^sub>t() \\<doteq> \\<zero>)\n                 \\<tau> of\n           None \\<Rightarrow> None\n           | \\<lfloor>None\\<rfloor> \\<Rightarrow> \\<lfloor>None\\<rfloor>\n           | \\<lfloor>\\<lfloor>xa\\<rfloor>\\<rfloor> \\<Rightarrow>\n               \\<lfloor>\\<lfloor>\\<not> xa\\<rfloor>\\<rfloor> of\n      None \\<Rightarrow> None\n      | \\<lfloor>None\\<rfloor> \\<Rightarrow> \\<lfloor>None\\<rfloor>\n      | \\<lfloor>\\<lfloor>xa\\<rfloor>\\<rfloor> \\<Rightarrow>\n          \\<lfloor>\\<lfloor>\\<not> xa\\<rfloor>\\<rfloor>) \\<noteq>\n     null\\<rbrakk>\n    \\<Longrightarrow> False", "apply(case_tac \"(X->size\\<^sub>S\\<^sub>e\\<^sub>t() \\<doteq> \\<zero>) \\<tau>\", simp add: bot_option_def, simp, rename_tac x)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>X \\<tau> = \\<bottom>;\n        (case case x of None \\<Rightarrow> \\<lfloor>None\\<rfloor>\n              | \\<lfloor>x\\<rfloor> \\<Rightarrow>\n                  \\<lfloor>\\<lfloor>\\<not> x\\<rfloor>\\<rfloor> of\n         None \\<Rightarrow> None\n         | \\<lfloor>None\\<rfloor> \\<Rightarrow> \\<lfloor>None\\<rfloor>\n         | \\<lfloor>\\<lfloor>xa\\<rfloor>\\<rfloor> \\<Rightarrow>\n             \\<lfloor>\\<lfloor>\\<not> xa\\<rfloor>\\<rfloor>) \\<noteq>\n        \\<bottom>;\n        (case case x of None \\<Rightarrow> \\<lfloor>None\\<rfloor>\n              | \\<lfloor>x\\<rfloor> \\<Rightarrow>\n                  \\<lfloor>\\<lfloor>\\<not> x\\<rfloor>\\<rfloor> of\n         None \\<Rightarrow> None\n         | \\<lfloor>None\\<rfloor> \\<Rightarrow> \\<lfloor>None\\<rfloor>\n         | \\<lfloor>\\<lfloor>xa\\<rfloor>\\<rfloor> \\<Rightarrow>\n             \\<lfloor>\\<lfloor>\\<not> xa\\<rfloor>\\<rfloor>) \\<noteq>\n        null;\n        (X->size\\<^sub>S\\<^sub>e\\<^sub>t() \\<doteq> \\<zero>) \\<tau> =\n        \\<lfloor>x\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> False", "apply(case_tac x, simp add: null_option_def bot_option_def, simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x a.\n       \\<lbrakk>X \\<tau> = \\<bottom>;\n        \\<lfloor>\\<lfloor>a\\<rfloor>\\<rfloor> \\<noteq> \\<bottom>;\n        \\<lfloor>\\<lfloor>a\\<rfloor>\\<rfloor> \\<noteq> null;\n        (X->size\\<^sub>S\\<^sub>e\\<^sub>t() \\<doteq> \\<zero>) \\<tau> =\n        \\<lfloor>\\<lfloor>a\\<rfloor>\\<rfloor>;\n        x = \\<lfloor>a\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> False", "apply(simp add: OclSize_def StrictRefEq\\<^sub>I\\<^sub>n\\<^sub>t\\<^sub>e\\<^sub>g\\<^sub>e\\<^sub>r valid_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x a.\n       \\<lbrakk>X \\<tau> = \\<bottom>;\n        \\<lfloor>\\<lfloor>a\\<rfloor>\\<rfloor> \\<noteq> \\<bottom>;\n        \\<lfloor>\\<lfloor>a\\<rfloor>\\<rfloor> \\<noteq> null;\n        (if (if (if (\\<delta> X) \\<tau> = true \\<tau> \\<and>\n                    finite\n                     \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n\\<bottom>\\<rceil>\\<rceil>\n                 then \\<lfloor>\\<lfloor>int\n   (card\n     \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                      (X \\<tau>)\\<rceil>\\<rceil>)\\<rfloor>\\<rfloor>\n                 else \\<bottom>) =\n                \\<bottom> \\<tau>\n             then false \\<tau> else true \\<tau>) =\n            true \\<tau> \\<and>\n            (if \\<zero> \\<tau> = \\<bottom> \\<tau> then false \\<tau>\n             else true \\<tau>) =\n            true \\<tau>\n         then ((\\<lambda>\\<tau>.\n                   if (\\<delta> X) \\<tau> = true \\<tau> \\<and>\n                      finite\n                       \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n  (X \\<tau>)\\<rceil>\\<rceil>\n                   then \\<lfloor>\\<lfloor>int\n     (card\n       \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                        (X \\<tau>)\\<rceil>\\<rceil>)\\<rfloor>\\<rfloor>\n                   else \\<bottom>) \\<triangleq>\n               \\<zero>)\n               \\<tau>\n         else invalid \\<tau>) =\n        \\<lfloor>\\<lfloor>a\\<rfloor>\\<rfloor>;\n        x = \\<lfloor>a\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> False", "by (metis (hide_lams, no_types)\n           bot_fun_def OclValid_def defined_def foundation2 invalid_def)"], ["", "lemma \"\\<tau> \\<Turnstile> \\<delta> (null->isEmpty\\<^sub>S\\<^sub>e\\<^sub>t())\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<tau> \\<Turnstile> \\<delta> null->isEmpty\\<^sub>S\\<^sub>e\\<^sub>t()", "by(auto simp: OclIsEmpty_def OclValid_def defined_def valid_def false_def true_def\n              bot_fun_def null_fun_def OclAnd_def OclOr_def OclNot_def null_is_valid\n        split: if_split_asm)"], ["", "lemma OclIsEmpty_infinite: \"\\<tau> \\<Turnstile> \\<delta> X \\<Longrightarrow> \\<not> finite \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e (X \\<tau>)\\<rceil>\\<rceil> \\<Longrightarrow> \\<not> \\<tau> \\<Turnstile> \\<delta> (X->isEmpty\\<^sub>S\\<^sub>e\\<^sub>t())\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<tau> \\<Turnstile> \\<delta> X;\n     infinite\n      \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                       (X \\<tau>)\\<rceil>\\<rceil>\\<rbrakk>\n    \\<Longrightarrow> \\<tau>\n                       |\\<noteq> \\<delta> X->isEmpty\\<^sub>S\\<^sub>e\\<^sub>t()", "apply(auto simp: OclIsEmpty_def OclValid_def defined_def valid_def false_def true_def\n                   bot_fun_def null_fun_def OclAnd_def OclOr_def OclNot_def\n             split: if_split_asm)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>infinite\n              \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                               (X \\<tau>)\\<rceil>\\<rceil>;\n     X \\<tau> \\<noteq> \\<bottom>; X \\<tau> \\<noteq> null;\n     (case case (X->size\\<^sub>S\\<^sub>e\\<^sub>t() \\<doteq> \\<zero>)\n                 \\<tau> of\n           None \\<Rightarrow> None\n           | \\<lfloor>None\\<rfloor> \\<Rightarrow> \\<lfloor>None\\<rfloor>\n           | \\<lfloor>\\<lfloor>xa\\<rfloor>\\<rfloor> \\<Rightarrow>\n               \\<lfloor>\\<lfloor>\\<not> xa\\<rfloor>\\<rfloor> of\n      None \\<Rightarrow> None\n      | \\<lfloor>None\\<rfloor> \\<Rightarrow> \\<lfloor>None\\<rfloor>\n      | \\<lfloor>\\<lfloor>xa\\<rfloor>\\<rfloor> \\<Rightarrow>\n          \\<lfloor>\\<lfloor>\\<not> xa\\<rfloor>\\<rfloor>) \\<noteq>\n     null\\<rbrakk>\n    \\<Longrightarrow> (case case (X->size\\<^sub>S\\<^sub>e\\<^sub>t() \\<doteq>\n                                  \\<zero>)\n                                  \\<tau> of\n                            None \\<Rightarrow> None\n                            | \\<lfloor>None\\<rfloor> \\<Rightarrow>\n                                \\<lfloor>None\\<rfloor>\n                            | \\<lfloor>\\<lfloor>xa\\<rfloor>\\<rfloor> \\<Rightarrow>\n                                \\<lfloor>\\<lfloor>\\<not> xa\\<rfloor>\\<rfloor> of\n                       None \\<Rightarrow> None\n                       | \\<lfloor>None\\<rfloor> \\<Rightarrow>\n                           \\<lfloor>None\\<rfloor>\n                       | \\<lfloor>\\<lfloor>xa\\<rfloor>\\<rfloor> \\<Rightarrow>\n                           \\<lfloor>\\<lfloor>\\<not> xa\\<rfloor>\\<rfloor>) =\n                      \\<bottom>", "apply(case_tac \"(X->size\\<^sub>S\\<^sub>e\\<^sub>t() \\<doteq> \\<zero>) \\<tau>\", simp add: bot_option_def, simp, rename_tac x)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>infinite\n                 \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                  (X \\<tau>)\\<rceil>\\<rceil>;\n        X \\<tau> \\<noteq> \\<bottom>; X \\<tau> \\<noteq> null;\n        (case case x of None \\<Rightarrow> \\<lfloor>None\\<rfloor>\n              | \\<lfloor>x\\<rfloor> \\<Rightarrow>\n                  \\<lfloor>\\<lfloor>\\<not> x\\<rfloor>\\<rfloor> of\n         None \\<Rightarrow> None\n         | \\<lfloor>None\\<rfloor> \\<Rightarrow> \\<lfloor>None\\<rfloor>\n         | \\<lfloor>\\<lfloor>xa\\<rfloor>\\<rfloor> \\<Rightarrow>\n             \\<lfloor>\\<lfloor>\\<not> xa\\<rfloor>\\<rfloor>) \\<noteq>\n        null;\n        (X->size\\<^sub>S\\<^sub>e\\<^sub>t() \\<doteq> \\<zero>) \\<tau> =\n        \\<lfloor>x\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> (case case x of\n                               None \\<Rightarrow> \\<lfloor>None\\<rfloor>\n                               | \\<lfloor>x\\<rfloor> \\<Rightarrow>\n                                   \\<lfloor>\\<lfloor>\\<not> x\\<rfloor>\\<rfloor> of\n                          None \\<Rightarrow> None\n                          | \\<lfloor>None\\<rfloor> \\<Rightarrow>\n                              \\<lfloor>None\\<rfloor>\n                          | \\<lfloor>\\<lfloor>xa\\<rfloor>\\<rfloor> \\<Rightarrow>\n                              \\<lfloor>\\<lfloor>\\<not> xa\\<rfloor>\\<rfloor>) =\n                         \\<bottom>", "apply(case_tac x, simp add: null_option_def bot_option_def, simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x a.\n       \\<lbrakk>infinite\n                 \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                  (X \\<tau>)\\<rceil>\\<rceil>;\n        X \\<tau> \\<noteq> \\<bottom>; X \\<tau> \\<noteq> null;\n        \\<lfloor>\\<lfloor>a\\<rfloor>\\<rfloor> \\<noteq> null;\n        (X->size\\<^sub>S\\<^sub>e\\<^sub>t() \\<doteq> \\<zero>) \\<tau> =\n        \\<lfloor>\\<lfloor>a\\<rfloor>\\<rfloor>;\n        x = \\<lfloor>a\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> \\<lfloor>\\<lfloor>a\\<rfloor>\\<rfloor> = \\<bottom>", "by(simp add: OclSize_def StrictRefEq\\<^sub>I\\<^sub>n\\<^sub>t\\<^sub>e\\<^sub>g\\<^sub>e\\<^sub>r valid_def bot_fun_def false_def true_def invalid_def)"], ["", "text\\<open>OclNotEmpty\\<close>"], ["", "lemma OclNotEmpty_defined_args_valid:\"\\<tau> \\<Turnstile> \\<delta> (X->notEmpty\\<^sub>S\\<^sub>e\\<^sub>t()) \\<Longrightarrow> \\<tau> \\<Turnstile> \\<upsilon> X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<tau>\n     \\<Turnstile> \\<delta> X->notEmpty\\<^sub>S\\<^sub>e\\<^sub>t() \\<Longrightarrow>\n    \\<tau> \\<Turnstile> \\<upsilon> X", "by (metis (hide_lams, no_types) OclNotEmpty_def OclNot_defargs OclNot_not foundation6 foundation9\n                                OclIsEmpty_defined_args_valid)"], ["", "lemma \"\\<tau> \\<Turnstile> \\<delta> (null->notEmpty\\<^sub>S\\<^sub>e\\<^sub>t())\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<tau> \\<Turnstile> \\<delta> null->notEmpty\\<^sub>S\\<^sub>e\\<^sub>t()", "by (metis (hide_lams, no_types) OclNotEmpty_def OclAnd_false1 OclAnd_idem OclIsEmpty_def\n                                OclNot3 OclNot4 OclOr_def defined2 defined4 transform1 valid2)"], ["", "lemma OclNotEmpty_infinite: \"\\<tau> \\<Turnstile> \\<delta> X \\<Longrightarrow> \\<not> finite \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e (X \\<tau>)\\<rceil>\\<rceil> \\<Longrightarrow> \\<not> \\<tau> \\<Turnstile> \\<delta> (X->notEmpty\\<^sub>S\\<^sub>e\\<^sub>t())\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<tau> \\<Turnstile> \\<delta> X;\n     infinite\n      \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                       (X \\<tau>)\\<rceil>\\<rceil>\\<rbrakk>\n    \\<Longrightarrow> \\<tau>\n                       |\\<noteq> \\<delta> X->notEmpty\\<^sub>S\\<^sub>e\\<^sub>t()", "apply(simp add: OclNotEmpty_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<tau> \\<Turnstile> \\<delta> X;\n     infinite\n      \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                       (X \\<tau>)\\<rceil>\\<rceil>\\<rbrakk>\n    \\<Longrightarrow> \\<tau>\n                       |\\<noteq> \\<delta> not\n     X->isEmpty\\<^sub>S\\<^sub>e\\<^sub>t()", "apply(drule OclIsEmpty_infinite, simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>infinite\n              \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                               (X \\<tau>)\\<rceil>\\<rceil>;\n     \\<tau> |\\<noteq> \\<delta> X->isEmpty\\<^sub>S\\<^sub>e\\<^sub>t()\\<rbrakk>\n    \\<Longrightarrow> \\<tau>\n                       |\\<noteq> \\<delta> not\n     X->isEmpty\\<^sub>S\\<^sub>e\\<^sub>t()", "by (metis OclNot_defargs OclNot_not foundation6 foundation9)"], ["", "lemma OclNotEmpty_has_elt : \"\\<tau> \\<Turnstile> \\<delta> X \\<Longrightarrow>\n                          \\<tau> \\<Turnstile> X->notEmpty\\<^sub>S\\<^sub>e\\<^sub>t() \\<Longrightarrow>\n                          \\<exists>e. e \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e (X \\<tau>)\\<rceil>\\<rceil>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<tau> \\<Turnstile> \\<delta> X;\n     \\<tau> \\<Turnstile> X->notEmpty\\<^sub>S\\<^sub>e\\<^sub>t()\\<rbrakk>\n    \\<Longrightarrow> \\<exists>e.\n                         e \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n            (X \\<tau>)\\<rceil>\\<rceil>", "apply(simp add: OclNotEmpty_def OclIsEmpty_def deMorgan1 deMorgan2, drule foundation5)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<tau> \\<Turnstile> \\<delta> X;\n     \\<tau> \\<Turnstile> not (\\<upsilon> X) or \\<delta> X \\<and>\n     \\<tau>\n      \\<Turnstile> X->size\\<^sub>S\\<^sub>e\\<^sub>t() <> \\<zero>\\<rbrakk>\n    \\<Longrightarrow> \\<exists>e.\n                         e \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n            (X \\<tau>)\\<rceil>\\<rceil>", "apply(subst (asm) (2) OclNot_def,\n       simp add: OclValid_def StrictRefEq\\<^sub>I\\<^sub>n\\<^sub>t\\<^sub>e\\<^sub>g\\<^sub>e\\<^sub>r StrongEq_def\n            split: if_split_asm)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>(\\<delta> X) \\<tau> = true \\<tau>;\n     (\\<upsilon> X->size\\<^sub>S\\<^sub>e\\<^sub>t()) \\<tau> = true \\<tau>;\n     (not (\\<upsilon> X) or \\<delta> X) \\<tau> = true \\<tau> \\<and>\n     \\<lfloor>\\<lfloor>X->size\\<^sub>S\\<^sub>e\\<^sub>t() \\<tau> \\<noteq>\n                       \\<zero> \\<tau>\\<rfloor>\\<rfloor> =\n     true \\<tau>\\<rbrakk>\n    \\<Longrightarrow> \\<exists>e.\n                         e \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n            (X \\<tau>)\\<rceil>\\<rceil>\n 2. \\<lbrakk>(\\<delta> X) \\<tau> = true \\<tau>;\n     (\\<upsilon> X->size\\<^sub>S\\<^sub>e\\<^sub>t()) \\<tau> \\<noteq>\n     true \\<tau>;\n     (not (\\<upsilon> X) or \\<delta> X) \\<tau> = true \\<tau> \\<and>\n     (case invalid \\<tau> of None \\<Rightarrow> None\n      | \\<lfloor>None\\<rfloor> \\<Rightarrow> \\<lfloor>None\\<rfloor>\n      | \\<lfloor>\\<lfloor>xa\\<rfloor>\\<rfloor> \\<Rightarrow>\n          \\<lfloor>\\<lfloor>\\<not> xa\\<rfloor>\\<rfloor>) =\n     true \\<tau>\\<rbrakk>\n    \\<Longrightarrow> \\<exists>e.\n                         e \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n            (X \\<tau>)\\<rceil>\\<rceil>", "prefer 2"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>(\\<delta> X) \\<tau> = true \\<tau>;\n     (\\<upsilon> X->size\\<^sub>S\\<^sub>e\\<^sub>t()) \\<tau> \\<noteq>\n     true \\<tau>;\n     (not (\\<upsilon> X) or \\<delta> X) \\<tau> = true \\<tau> \\<and>\n     (case invalid \\<tau> of None \\<Rightarrow> None\n      | \\<lfloor>None\\<rfloor> \\<Rightarrow> \\<lfloor>None\\<rfloor>\n      | \\<lfloor>\\<lfloor>xa\\<rfloor>\\<rfloor> \\<Rightarrow>\n          \\<lfloor>\\<lfloor>\\<not> xa\\<rfloor>\\<rfloor>) =\n     true \\<tau>\\<rbrakk>\n    \\<Longrightarrow> \\<exists>e.\n                         e \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n            (X \\<tau>)\\<rceil>\\<rceil>\n 2. \\<lbrakk>(\\<delta> X) \\<tau> = true \\<tau>;\n     (\\<upsilon> X->size\\<^sub>S\\<^sub>e\\<^sub>t()) \\<tau> = true \\<tau>;\n     (not (\\<upsilon> X) or \\<delta> X) \\<tau> = true \\<tau> \\<and>\n     \\<lfloor>\\<lfloor>X->size\\<^sub>S\\<^sub>e\\<^sub>t() \\<tau> \\<noteq>\n                       \\<zero> \\<tau>\\<rfloor>\\<rfloor> =\n     true \\<tau>\\<rbrakk>\n    \\<Longrightarrow> \\<exists>e.\n                         e \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n            (X \\<tau>)\\<rceil>\\<rceil>", "apply(simp add: invalid_def bot_option_def true_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>(\\<delta> X) \\<tau> = true \\<tau>;\n     (\\<upsilon> X->size\\<^sub>S\\<^sub>e\\<^sub>t()) \\<tau> = true \\<tau>;\n     (not (\\<upsilon> X) or \\<delta> X) \\<tau> = true \\<tau> \\<and>\n     \\<lfloor>\\<lfloor>X->size\\<^sub>S\\<^sub>e\\<^sub>t() \\<tau> \\<noteq>\n                       \\<zero> \\<tau>\\<rfloor>\\<rfloor> =\n     true \\<tau>\\<rbrakk>\n    \\<Longrightarrow> \\<exists>e.\n                         e \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n            (X \\<tau>)\\<rceil>\\<rceil>", "apply(simp add: OclSize_def valid_def split: if_split_asm,\n       simp_all add: false_def true_def bot_option_def bot_fun_def OclInt0_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>(not (\\<lambda>\\<tau>.\n                      if X \\<tau> = \\<bottom> then false \\<tau>\n                      else true \\<tau>) or\n              \\<delta> X)\n              \\<tau> =\n             \\<lfloor>\\<lfloor>True\\<rfloor>\\<rfloor>;\n     \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                      (X \\<tau>)\\<rceil>\\<rceil> \\<noteq>\n     {};\n     (\\<delta> X) \\<tau> = \\<lfloor>\\<lfloor>True\\<rfloor>\\<rfloor>;\n     finite\n      \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                       (X \\<tau>)\\<rceil>\\<rceil>\\<rbrakk>\n    \\<Longrightarrow> \\<exists>e.\n                         e \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n            (X \\<tau>)\\<rceil>\\<rceil>", "by (metis equals0I)"], ["", "text\\<open>OclANY\\<close>"], ["", "lemma OclANY_defined_args_valid: \"\\<tau> \\<Turnstile> \\<delta> (X->any\\<^sub>S\\<^sub>e\\<^sub>t()) \\<Longrightarrow> \\<tau> \\<Turnstile> \\<delta> X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<tau>\n     \\<Turnstile> \\<delta> X->any\\<^sub>S\\<^sub>e\\<^sub>t() \\<Longrightarrow>\n    \\<tau> \\<Turnstile> \\<delta> X", "by(auto simp: OclANY_def OclValid_def true_def valid_def false_def StrongEq_def\n              defined_def invalid_def bot_fun_def null_fun_def OclAnd_def\n        split: bool.split_asm HOL.if_split_asm option.split)"], ["", "lemma \"\\<tau> \\<Turnstile> \\<delta> X \\<Longrightarrow> \\<tau> \\<Turnstile> X->isEmpty\\<^sub>S\\<^sub>e\\<^sub>t() \\<Longrightarrow> \\<not> \\<tau> \\<Turnstile> \\<delta> (X->any\\<^sub>S\\<^sub>e\\<^sub>t())\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<tau> \\<Turnstile> \\<delta> X;\n     \\<tau> \\<Turnstile> X->isEmpty\\<^sub>S\\<^sub>e\\<^sub>t()\\<rbrakk>\n    \\<Longrightarrow> \\<tau>\n                       |\\<noteq> \\<delta> X->any\\<^sub>S\\<^sub>e\\<^sub>t()", "apply(simp add: OclANY_def OclValid_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>(\\<delta> X) \\<tau> = true \\<tau>;\n     X->isEmpty\\<^sub>S\\<^sub>e\\<^sub>t() \\<tau> = true \\<tau>\\<rbrakk>\n    \\<Longrightarrow> (\\<delta> (\\<lambda>\\<tau>.\n                                    if (\\<upsilon> X) \\<tau> = true \\<tau>\n                                    then if (\\<delta> X and\n       X->notEmpty\\<^sub>S\\<^sub>e\\<^sub>t())\n       \\<tau> =\n      true \\<tau>\n   then SOME y.\n           y \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                    (X \\<tau>)\\<rceil>\\<rceil>\n   else null \\<tau>\n                                    else \\<bottom>))\n                       \\<tau> \\<noteq>\n                      true \\<tau>", "apply(subst cp_defined, subst cp_OclAnd, simp add: OclNotEmpty_def, subst (1 2) cp_OclNot,\n       simp add: cp_OclNot[symmetric] cp_OclAnd[symmetric] cp_defined[symmetric],\n       simp add: false_def true_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>(\\<delta> X) \\<tau> = \\<lfloor>\\<lfloor>True\\<rfloor>\\<rfloor>;\n     X->isEmpty\\<^sub>S\\<^sub>e\\<^sub>t() \\<tau> =\n     \\<lfloor>\\<lfloor>True\\<rfloor>\\<rfloor>\\<rbrakk>\n    \\<Longrightarrow> (\\<upsilon> X) \\<tau> \\<noteq>\n                      \\<lfloor>\\<lfloor>True\\<rfloor>\\<rfloor> \\<longrightarrow>\n                      (\\<delta> (\\<lambda>_. \\<bottom>)) \\<tau> \\<noteq>\n                      \\<lfloor>\\<lfloor>True\\<rfloor>\\<rfloor>", "by(drule foundation20[simplified OclValid_def true_def], simp)"], ["", "lemma OclANY_valid_args_valid:\n\"(\\<tau> \\<Turnstile> \\<upsilon>(X->any\\<^sub>S\\<^sub>e\\<^sub>t())) = (\\<tau> \\<Turnstile> \\<upsilon> X)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<tau> \\<Turnstile> \\<upsilon> X->any\\<^sub>S\\<^sub>e\\<^sub>t()) =\n    (\\<tau> \\<Turnstile> \\<upsilon> X)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<tau> \\<Turnstile> \\<upsilon> X->any\\<^sub>S\\<^sub>e\\<^sub>t()) =\n    (\\<tau> \\<Turnstile> \\<upsilon> X)", "have A: \"(\\<tau> \\<Turnstile> \\<upsilon>(X->any\\<^sub>S\\<^sub>e\\<^sub>t())) \\<Longrightarrow> ((\\<tau> \\<Turnstile>(\\<upsilon> X)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<tau>\n     \\<Turnstile> \\<upsilon> X->any\\<^sub>S\\<^sub>e\\<^sub>t() \\<Longrightarrow>\n    \\<tau> \\<Turnstile> \\<upsilon> X", "by(auto simp: OclANY_def OclValid_def true_def valid_def false_def StrongEq_def\n                        defined_def invalid_def bot_fun_def null_fun_def\n                  split: bool.split_asm HOL.if_split_asm option.split)"], ["proof (state)\nthis:\n  \\<tau>\n   \\<Turnstile> \\<upsilon> X->any\\<^sub>S\\<^sub>e\\<^sub>t() \\<Longrightarrow>\n  \\<tau> \\<Turnstile> \\<upsilon> X\n\ngoal (1 subgoal):\n 1. (\\<tau> \\<Turnstile> \\<upsilon> X->any\\<^sub>S\\<^sub>e\\<^sub>t()) =\n    (\\<tau> \\<Turnstile> \\<upsilon> X)", "have B: \"(\\<tau> \\<Turnstile>(\\<upsilon> X)) \\<Longrightarrow> (\\<tau> \\<Turnstile> \\<upsilon>(X->any\\<^sub>S\\<^sub>e\\<^sub>t()))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<tau> \\<Turnstile> \\<upsilon> X \\<Longrightarrow>\n    \\<tau> \\<Turnstile> \\<upsilon> X->any\\<^sub>S\\<^sub>e\\<^sub>t()", "apply(auto simp: OclANY_def OclValid_def true_def false_def StrongEq_def\n                            defined_def invalid_def valid_def bot_fun_def null_fun_def\n                            bot_option_def null_option_def null_is_valid\n                            OclAnd_def\n                      split: bool.split_asm HOL.if_split_asm option.split)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>X \\<tau> \\<noteq> \\<bottom>; X \\<tau> \\<noteq> null;\n     X->notEmpty\\<^sub>S\\<^sub>e\\<^sub>t() \\<tau> =\n     \\<lfloor>\\<lfloor>True\\<rfloor>\\<rfloor>;\n     (SOME y.\n         y \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                  (X \\<tau>)\\<rceil>\\<rceil>) =\n     \\<bottom>\\<rbrakk>\n    \\<Longrightarrow> False", "apply(frule Set_inv_lemma[OF foundation16[THEN iffD2], OF conjI], simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>X \\<tau> \\<noteq> \\<bottom>; X \\<tau> \\<noteq> null;\n     X->notEmpty\\<^sub>S\\<^sub>e\\<^sub>t() \\<tau> =\n     \\<lfloor>\\<lfloor>True\\<rfloor>\\<rfloor>;\n     (SOME y.\n         y \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                  (X \\<tau>)\\<rceil>\\<rceil>) =\n     \\<bottom>;\n     \\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                     (X \\<tau>)\\<rceil>\\<rceil>.\n        x \\<noteq> \\<bottom>\\<rbrakk>\n    \\<Longrightarrow> False", "apply(subgoal_tac \"(\\<delta> X) \\<tau> = true \\<tau>\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>X \\<tau> \\<noteq> \\<bottom>; X \\<tau> \\<noteq> null;\n     X->notEmpty\\<^sub>S\\<^sub>e\\<^sub>t() \\<tau> =\n     \\<lfloor>\\<lfloor>True\\<rfloor>\\<rfloor>;\n     (SOME y.\n         y \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                  (X \\<tau>)\\<rceil>\\<rceil>) =\n     \\<bottom>;\n     \\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                     (X \\<tau>)\\<rceil>\\<rceil>.\n        x \\<noteq> \\<bottom>;\n     (\\<delta> X) \\<tau> = true \\<tau>\\<rbrakk>\n    \\<Longrightarrow> False\n 2. \\<lbrakk>X \\<tau> \\<noteq> \\<bottom>; X \\<tau> \\<noteq> null;\n     X->notEmpty\\<^sub>S\\<^sub>e\\<^sub>t() \\<tau> =\n     \\<lfloor>\\<lfloor>True\\<rfloor>\\<rfloor>;\n     (SOME y.\n         y \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                  (X \\<tau>)\\<rceil>\\<rceil>) =\n     \\<bottom>;\n     \\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                     (X \\<tau>)\\<rceil>\\<rceil>.\n        x \\<noteq> \\<bottom>\\<rbrakk>\n    \\<Longrightarrow> (\\<delta> X) \\<tau> = true \\<tau>", "prefer 2"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>X \\<tau> \\<noteq> \\<bottom>; X \\<tau> \\<noteq> null;\n     X->notEmpty\\<^sub>S\\<^sub>e\\<^sub>t() \\<tau> =\n     \\<lfloor>\\<lfloor>True\\<rfloor>\\<rfloor>;\n     (SOME y.\n         y \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                  (X \\<tau>)\\<rceil>\\<rceil>) =\n     \\<bottom>;\n     \\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                     (X \\<tau>)\\<rceil>\\<rceil>.\n        x \\<noteq> \\<bottom>\\<rbrakk>\n    \\<Longrightarrow> (\\<delta> X) \\<tau> = true \\<tau>\n 2. \\<lbrakk>X \\<tau> \\<noteq> \\<bottom>; X \\<tau> \\<noteq> null;\n     X->notEmpty\\<^sub>S\\<^sub>e\\<^sub>t() \\<tau> =\n     \\<lfloor>\\<lfloor>True\\<rfloor>\\<rfloor>;\n     (SOME y.\n         y \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                  (X \\<tau>)\\<rceil>\\<rceil>) =\n     \\<bottom>;\n     \\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                     (X \\<tau>)\\<rceil>\\<rceil>.\n        x \\<noteq> \\<bottom>;\n     (\\<delta> X) \\<tau> = true \\<tau>\\<rbrakk>\n    \\<Longrightarrow> False", "apply (metis (hide_lams, no_types) OclValid_def foundation16)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>X \\<tau> \\<noteq> \\<bottom>; X \\<tau> \\<noteq> null;\n     X->notEmpty\\<^sub>S\\<^sub>e\\<^sub>t() \\<tau> =\n     \\<lfloor>\\<lfloor>True\\<rfloor>\\<rfloor>;\n     (SOME y.\n         y \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                  (X \\<tau>)\\<rceil>\\<rceil>) =\n     \\<bottom>;\n     \\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                     (X \\<tau>)\\<rceil>\\<rceil>.\n        x \\<noteq> \\<bottom>;\n     (\\<delta> X) \\<tau> = true \\<tau>\\<rbrakk>\n    \\<Longrightarrow> False", "apply(simp add: true_def,\n                 drule OclNotEmpty_has_elt[simplified OclValid_def true_def], simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>X \\<tau> \\<noteq> \\<bottom>; X \\<tau> \\<noteq> null;\n     X->notEmpty\\<^sub>S\\<^sub>e\\<^sub>t() \\<tau> =\n     \\<lfloor>\\<lfloor>True\\<rfloor>\\<rfloor>;\n     (SOME y.\n         y \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                  (X \\<tau>)\\<rceil>\\<rceil>) =\n     \\<bottom>;\n     \\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                     (X \\<tau>)\\<rceil>\\<rceil>.\n        x \\<noteq> \\<bottom>;\n     \\<exists>e.\n        e \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                 (X \\<tau>)\\<rceil>\\<rceil>\\<rbrakk>\n    \\<Longrightarrow> False", "by(erule exE,\n             insert someI2[where Q = \"\\<lambda>x. x \\<noteq> \\<bottom>\" and P = \"\\<lambda>y. y \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e (X \\<tau>)\\<rceil>\\<rceil>\"],\n             simp)"], ["proof (state)\nthis:\n  \\<tau> \\<Turnstile> \\<upsilon> X \\<Longrightarrow>\n  \\<tau> \\<Turnstile> \\<upsilon> X->any\\<^sub>S\\<^sub>e\\<^sub>t()\n\ngoal (1 subgoal):\n 1. (\\<tau> \\<Turnstile> \\<upsilon> X->any\\<^sub>S\\<^sub>e\\<^sub>t()) =\n    (\\<tau> \\<Turnstile> \\<upsilon> X)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<tau> \\<Turnstile> \\<upsilon> X->any\\<^sub>S\\<^sub>e\\<^sub>t()) =\n    (\\<tau> \\<Turnstile> \\<upsilon> X)", "by(auto dest:A intro:B)"], ["proof (state)\nthis:\n  (\\<tau> \\<Turnstile> \\<upsilon> X->any\\<^sub>S\\<^sub>e\\<^sub>t()) =\n  (\\<tau> \\<Turnstile> \\<upsilon> X)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma OclANY_valid_args_valid''[simp,code_unfold]:\n\"\\<upsilon>(X->any\\<^sub>S\\<^sub>e\\<^sub>t()) = (\\<upsilon> X)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<upsilon> X->any\\<^sub>S\\<^sub>e\\<^sub>t() = \\<upsilon> X", "by(auto intro!: OclANY_valid_args_valid transform2_rev)"], ["", "(* and higher order ones : forall, exists, iterate, select, reject... *)"], ["", "text_raw\\<open>\\endisatagafp\\<close>"], ["", "subsection\\<open>Execution Laws with Invalid or Null or Infinite Set as Argument\\<close>"], ["", "text\\<open>OclIncluding\\<close>"], ["", "(* properties already generated by the corresponding locale *)"], ["", "text\\<open>OclExcluding\\<close>"], ["", "(* properties already generated by the corresponding locale *)"], ["", "text\\<open>OclIncludes\\<close>"], ["", "(* properties already generated by the corresponding locale *)"], ["", "text\\<open>OclExcludes\\<close>"], ["", "(* properties already generated by the corresponding locale *)"], ["", "text\\<open>OclSize\\<close>"], ["", "lemma OclSize_invalid[simp,code_unfold]:\"(invalid->size\\<^sub>S\\<^sub>e\\<^sub>t()) = invalid\""], ["proof (prove)\ngoal (1 subgoal):\n 1. invalid->size\\<^sub>S\\<^sub>e\\<^sub>t() = invalid", "by(simp add: bot_fun_def OclSize_def invalid_def defined_def valid_def false_def true_def)"], ["", "lemma OclSize_null[simp,code_unfold]:\"(null->size\\<^sub>S\\<^sub>e\\<^sub>t()) = invalid\""], ["proof (prove)\ngoal (1 subgoal):\n 1. null->size\\<^sub>S\\<^sub>e\\<^sub>t() = invalid", "by(rule ext,\n   simp add: bot_fun_def null_fun_def null_is_valid OclSize_def\n             invalid_def defined_def valid_def false_def true_def)"], ["", "text\\<open>OclIsEmpty\\<close>"], ["", "lemma OclIsEmpty_invalid[simp,code_unfold]:\"(invalid->isEmpty\\<^sub>S\\<^sub>e\\<^sub>t()) = invalid\""], ["proof (prove)\ngoal (1 subgoal):\n 1. invalid->isEmpty\\<^sub>S\\<^sub>e\\<^sub>t() = invalid", "by(simp add: OclIsEmpty_def)"], ["", "lemma OclIsEmpty_null[simp,code_unfold]:\"(null->isEmpty\\<^sub>S\\<^sub>e\\<^sub>t()) = true\""], ["proof (prove)\ngoal (1 subgoal):\n 1. null->isEmpty\\<^sub>S\\<^sub>e\\<^sub>t() = true", "by(simp add: OclIsEmpty_def)"], ["", "text\\<open>OclNotEmpty\\<close>"], ["", "lemma OclNotEmpty_invalid[simp,code_unfold]:\"(invalid->notEmpty\\<^sub>S\\<^sub>e\\<^sub>t()) = invalid\""], ["proof (prove)\ngoal (1 subgoal):\n 1. invalid->notEmpty\\<^sub>S\\<^sub>e\\<^sub>t() = invalid", "by(simp add: OclNotEmpty_def)"], ["", "lemma OclNotEmpty_null[simp,code_unfold]:\"(null->notEmpty\\<^sub>S\\<^sub>e\\<^sub>t()) = false\""], ["proof (prove)\ngoal (1 subgoal):\n 1. null->notEmpty\\<^sub>S\\<^sub>e\\<^sub>t() = false", "by(simp add: OclNotEmpty_def)"], ["", "text\\<open>OclANY\\<close>"], ["", "lemma OclANY_invalid[simp,code_unfold]:\"(invalid->any\\<^sub>S\\<^sub>e\\<^sub>t()) = invalid\""], ["proof (prove)\ngoal (1 subgoal):\n 1. invalid->any\\<^sub>S\\<^sub>e\\<^sub>t() = invalid", "by(simp add: bot_fun_def OclANY_def invalid_def defined_def valid_def false_def true_def)"], ["", "lemma OclANY_null[simp,code_unfold]:\"(null->any\\<^sub>S\\<^sub>e\\<^sub>t()) = null\""], ["proof (prove)\ngoal (1 subgoal):\n 1. null->any\\<^sub>S\\<^sub>e\\<^sub>t() = null", "by(simp add: OclANY_def false_def true_def)"], ["", "text\\<open>OclForall\\<close>"], ["", "lemma OclForall_invalid[simp,code_unfold]:\"invalid->forAll\\<^sub>S\\<^sub>e\\<^sub>t(a| P a) = invalid\""], ["proof (prove)\ngoal (1 subgoal):\n 1. OclForall invalid P = invalid", "by(simp add: bot_fun_def invalid_def OclForall_def defined_def valid_def false_def true_def)"], ["", "lemma OclForall_null[simp,code_unfold]:\"null->forAll\\<^sub>S\\<^sub>e\\<^sub>t(a | P a) = invalid\""], ["proof (prove)\ngoal (1 subgoal):\n 1. OclForall null P = invalid", "by(simp add: bot_fun_def invalid_def OclForall_def defined_def valid_def false_def true_def)"], ["", "text\\<open>OclExists\\<close>"], ["", "lemma OclExists_invalid[simp,code_unfold]:\"invalid->exists\\<^sub>S\\<^sub>e\\<^sub>t(a| P a) = invalid\""], ["proof (prove)\ngoal (1 subgoal):\n 1. OclExists invalid P = invalid", "by(simp add: OclExists_def)"], ["", "lemma OclExists_null[simp,code_unfold]:\"null->exists\\<^sub>S\\<^sub>e\\<^sub>t(a | P a) = invalid\""], ["proof (prove)\ngoal (1 subgoal):\n 1. OclExists null P = invalid", "by(simp add: OclExists_def)"], ["", "text\\<open>OclIterate\\<close>"], ["", "lemma OclIterate_invalid[simp,code_unfold]:\"invalid->iterate\\<^sub>S\\<^sub>e\\<^sub>t(a; x = A | P a x) = invalid\""], ["proof (prove)\ngoal (1 subgoal):\n 1. OclIterate invalid A P = invalid", "by(simp add: bot_fun_def invalid_def OclIterate_def defined_def valid_def false_def true_def)"], ["", "lemma OclIterate_null[simp,code_unfold]:\"null->iterate\\<^sub>S\\<^sub>e\\<^sub>t(a; x = A | P a x) = invalid\""], ["proof (prove)\ngoal (1 subgoal):\n 1. OclIterate null A P = invalid", "by(simp add: bot_fun_def invalid_def OclIterate_def defined_def valid_def false_def true_def)"], ["", "lemma OclIterate_invalid_args[simp,code_unfold]:\"S->iterate\\<^sub>S\\<^sub>e\\<^sub>t(a; x = invalid | P a x) = invalid\""], ["proof (prove)\ngoal (1 subgoal):\n 1. OclIterate S invalid P = invalid", "by(simp add: bot_fun_def invalid_def OclIterate_def defined_def valid_def false_def true_def)"], ["", "text\\<open>An open question is this ...\\<close>"], ["", "lemma (*OclIterate_null_args[simp,code_unfold]:*) \"S->iterate\\<^sub>S\\<^sub>e\\<^sub>t(a; x = null | P a x) = invalid\""], ["proof (prove)\ngoal (1 subgoal):\n 1. OclIterate S null P = invalid", "oops"], ["", "(* In the definition above, this does not hold in general.\n       And I believe, this is how it should be ... *)"], ["", "lemma OclIterate_infinite:\nassumes non_finite: \"\\<tau> \\<Turnstile> not(\\<delta>(S->size\\<^sub>S\\<^sub>e\\<^sub>t()))\"\nshows \"(OclIterate S A F) \\<tau> = invalid \\<tau>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. OclIterate S A F \\<tau> = invalid \\<tau>", "apply(insert non_finite [THEN OclSize_infinite])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<tau> \\<Turnstile> not (\\<delta> S) \\<or>\n    infinite\n     \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                      (S \\<tau>)\\<rceil>\\<rceil> \\<Longrightarrow>\n    OclIterate S A F \\<tau> = invalid \\<tau>", "apply(subst (asm) foundation9, simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<tau> |\\<noteq> \\<delta> S \\<or>\n    infinite\n     \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                      (S \\<tau>)\\<rceil>\\<rceil> \\<Longrightarrow>\n    OclIterate S A F \\<tau> = invalid \\<tau>", "by(metis OclIterate_def OclValid_def invalid_def)"], ["", "text\\<open>OclSelect\\<close>"], ["", "lemma OclSelect_invalid[simp,code_unfold]:\"invalid->select\\<^sub>S\\<^sub>e\\<^sub>t(a | P a) = invalid\""], ["proof (prove)\ngoal (1 subgoal):\n 1. OclSelect invalid P = invalid", "by(simp add: bot_fun_def invalid_def OclSelect_def defined_def valid_def false_def true_def)"], ["", "lemma OclSelect_null[simp,code_unfold]:\"null->select\\<^sub>S\\<^sub>e\\<^sub>t(a | P a) = invalid\""], ["proof (prove)\ngoal (1 subgoal):\n 1. OclSelect null P = invalid", "by(simp add: bot_fun_def invalid_def OclSelect_def defined_def valid_def false_def true_def)"], ["", "text\\<open>OclReject\\<close>"], ["", "lemma OclReject_invalid[simp,code_unfold]:\"invalid->reject\\<^sub>S\\<^sub>e\\<^sub>t(a | P a) = invalid\""], ["proof (prove)\ngoal (1 subgoal):\n 1. OclReject invalid P = invalid", "by(simp add: OclReject_def)"], ["", "lemma OclReject_null[simp,code_unfold]:\"null->reject\\<^sub>S\\<^sub>e\\<^sub>t(a | P a) = invalid\""], ["proof (prove)\ngoal (1 subgoal):\n 1. OclReject null P = invalid", "by(simp add: OclReject_def)"], ["", "text_raw\\<open>\\isatagafp\\<close>"], ["", "subsubsection\\<open>Context Passing\\<close>"], ["", "lemma cp_OclIncludes1:\n\"(X->includes\\<^sub>S\\<^sub>e\\<^sub>t(x)) \\<tau> = (X->includes\\<^sub>S\\<^sub>e\\<^sub>t(\\<lambda> _. x \\<tau>)) \\<tau>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. X->includes\\<^sub>S\\<^sub>e\\<^sub>t(x) \\<tau> =\n    X->includes\\<^sub>S\\<^sub>e\\<^sub>t(\\<lambda>_. x \\<tau>) \\<tau>", "by(auto simp: OclIncludes_def StrongEq_def invalid_def\n                 cp_defined[symmetric] cp_valid[symmetric])"], ["", "lemma cp_OclSize: \"X->size\\<^sub>S\\<^sub>e\\<^sub>t() \\<tau> = ((\\<lambda>_. X \\<tau>)->size\\<^sub>S\\<^sub>e\\<^sub>t()) \\<tau>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. X->size\\<^sub>S\\<^sub>e\\<^sub>t() \\<tau> =\n    \\<lambda>_. X \\<tau>->size\\<^sub>S\\<^sub>e\\<^sub>t() \\<tau>", "by(simp add: OclSize_def cp_defined[symmetric])"], ["", "lemma cp_OclIsEmpty: \"X->isEmpty\\<^sub>S\\<^sub>e\\<^sub>t() \\<tau> = ((\\<lambda>_. X \\<tau>)->isEmpty\\<^sub>S\\<^sub>e\\<^sub>t()) \\<tau>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. X->isEmpty\\<^sub>S\\<^sub>e\\<^sub>t() \\<tau> =\n    \\<lambda>_. X \\<tau>->isEmpty\\<^sub>S\\<^sub>e\\<^sub>t() \\<tau>", "apply(simp only: OclIsEmpty_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<upsilon> X and not (\\<delta> X) or\n     X->size\\<^sub>S\\<^sub>e\\<^sub>t() \\<doteq> \\<zero>)\n     \\<tau> =\n    (\\<upsilon> (\\<lambda>_. X \\<tau>) and\n     not (\\<delta> (\\<lambda>_. X \\<tau>)) or\n     \\<lambda>_. X \\<tau>->size\\<^sub>S\\<^sub>e\\<^sub>t() \\<doteq> \\<zero>)\n     \\<tau>", "apply(subst (2) cp_OclOr,\n       subst cp_OclAnd,\n       subst cp_OclNot,\n       subst StrictRefEq\\<^sub>I\\<^sub>n\\<^sub>t\\<^sub>e\\<^sub>g\\<^sub>e\\<^sub>r.cp0)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<upsilon> X and not (\\<delta> X) or\n     X->size\\<^sub>S\\<^sub>e\\<^sub>t() \\<doteq> \\<zero>)\n     \\<tau> =\n    ((\\<lambda>_.\n         ((\\<lambda>_. (\\<upsilon> (\\<lambda>_. X \\<tau>)) \\<tau>) and\n          (\\<lambda>_.\n              not (\\<lambda>_. (\\<delta> (\\<lambda>_. X \\<tau>)) \\<tau>)\n               \\<tau>))\n          \\<tau>) or\n     (\\<lambda>_.\n         ((\\<lambda>_.\n              \\<lambda>_. X \\<tau>->size\\<^sub>S\\<^sub>e\\<^sub>t()\n               \\<tau>) \\<doteq>\n          (\\<lambda>_. \\<zero> \\<tau>))\n          \\<tau>))\n     \\<tau>", "by(simp add: cp_defined[symmetric] cp_valid[symmetric] StrictRefEq\\<^sub>I\\<^sub>n\\<^sub>t\\<^sub>e\\<^sub>g\\<^sub>e\\<^sub>r.cp0[symmetric]\n             cp_OclSize[symmetric] cp_OclNot[symmetric] cp_OclAnd[symmetric] cp_OclOr[symmetric])"], ["", "lemma cp_OclNotEmpty: \"X->notEmpty\\<^sub>S\\<^sub>e\\<^sub>t() \\<tau> = ((\\<lambda>_. X \\<tau>)->notEmpty\\<^sub>S\\<^sub>e\\<^sub>t()) \\<tau>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. X->notEmpty\\<^sub>S\\<^sub>e\\<^sub>t() \\<tau> =\n    \\<lambda>_. X \\<tau>->notEmpty\\<^sub>S\\<^sub>e\\<^sub>t() \\<tau>", "apply(simp only: OclNotEmpty_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. not X->isEmpty\\<^sub>S\\<^sub>e\\<^sub>t() \\<tau> =\n    not \\<lambda>_. X \\<tau>->isEmpty\\<^sub>S\\<^sub>e\\<^sub>t() \\<tau>", "apply(subst (2) cp_OclNot)"], ["proof (prove)\ngoal (1 subgoal):\n 1. not X->isEmpty\\<^sub>S\\<^sub>e\\<^sub>t() \\<tau> =\n    not (\\<lambda>_.\n            \\<lambda>_. X \\<tau>->isEmpty\\<^sub>S\\<^sub>e\\<^sub>t() \\<tau>)\n     \\<tau>", "by(simp add: cp_OclNot[symmetric] cp_OclIsEmpty[symmetric])"], ["", "lemma cp_OclANY: \"X->any\\<^sub>S\\<^sub>e\\<^sub>t() \\<tau> = ((\\<lambda>_. X \\<tau>)->any\\<^sub>S\\<^sub>e\\<^sub>t()) \\<tau>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. X->any\\<^sub>S\\<^sub>e\\<^sub>t() \\<tau> =\n    \\<lambda>_. X \\<tau>->any\\<^sub>S\\<^sub>e\\<^sub>t() \\<tau>", "apply(simp only: OclANY_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (if (\\<upsilon> X) \\<tau> = true \\<tau>\n     then if (\\<delta> X and X->notEmpty\\<^sub>S\\<^sub>e\\<^sub>t()) \\<tau> =\n             true \\<tau>\n          then SOME y.\n                  y \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n     (X \\<tau>)\\<rceil>\\<rceil>\n          else null \\<tau>\n     else \\<bottom>) =\n    (if (\\<upsilon> (\\<lambda>_. X \\<tau>)) \\<tau> = true \\<tau>\n     then if (\\<delta> (\\<lambda>_. X \\<tau>) and\n              \\<lambda>_. X \\<tau>->notEmpty\\<^sub>S\\<^sub>e\\<^sub>t())\n              \\<tau> =\n             true \\<tau>\n          then SOME y.\n                  y \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n     (X \\<tau>)\\<rceil>\\<rceil>\n          else null \\<tau>\n     else \\<bottom>)", "apply(subst (2) cp_OclAnd)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (if (\\<upsilon> X) \\<tau> = true \\<tau>\n     then if (\\<delta> X and X->notEmpty\\<^sub>S\\<^sub>e\\<^sub>t()) \\<tau> =\n             true \\<tau>\n          then SOME y.\n                  y \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n     (X \\<tau>)\\<rceil>\\<rceil>\n          else null \\<tau>\n     else \\<bottom>) =\n    (if (\\<upsilon> (\\<lambda>_. X \\<tau>)) \\<tau> = true \\<tau>\n     then if ((\\<lambda>_. (\\<delta> (\\<lambda>_. X \\<tau>)) \\<tau>) and\n              (\\<lambda>_.\n                  \\<lambda>_. X \\<tau>->notEmpty\\<^sub>S\\<^sub>e\\<^sub>t()\n                   \\<tau>))\n              \\<tau> =\n             true \\<tau>\n          then SOME y.\n                  y \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n     (X \\<tau>)\\<rceil>\\<rceil>\n          else null \\<tau>\n     else \\<bottom>)", "by(simp only: cp_OclAnd[symmetric] cp_defined[symmetric] cp_valid[symmetric]\n              cp_OclNotEmpty[symmetric])"], ["", "lemma cp_OclForall:\n\"(S->forAll\\<^sub>S\\<^sub>e\\<^sub>t(x | P x)) \\<tau> = ((\\<lambda> _. S \\<tau>)->forAll\\<^sub>S\\<^sub>e\\<^sub>t(x | P (\\<lambda> _. x \\<tau>))) \\<tau>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. OclForall S P \\<tau> =\n    \\<lambda>_.\n       S \\<tau>->forAll\\<^sub>S\\<^sub>e\\<^sub>t(x|P (\\<lambda>_. x \\<tau>))\n     \\<tau>", "by(simp add: OclForall_def cp_defined[symmetric])"], ["", "(* first-order version !*)"], ["", "lemma cp_OclForall1 [simp,intro!]:\n\"cp S \\<Longrightarrow> cp (\\<lambda>X. ((S X)->forAll\\<^sub>S\\<^sub>e\\<^sub>t(x | P x)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. cp S \\<Longrightarrow> cp (\\<lambda>X. OclForall (S X) P)", "apply(simp add: cp_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>f.\n       \\<forall>X a b. S X (a, b) = f (X (a, b)) (a, b) \\<Longrightarrow>\n    \\<exists>f.\n       \\<forall>X a b. OclForall (S X) P (a, b) = f (X (a, b)) (a, b)", "apply(erule exE, rule exI, intro allI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>f X a b.\n       \\<forall>X a b. S X (a, b) = f (X (a, b)) (a, b) \\<Longrightarrow>\n       OclForall (S X) P (a, b) = ?f2 f (X (a, b)) (a, b)", "apply(erule_tac x=X in allE)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>f X a b.\n       \\<forall>a b. S X (a, b) = f (X (a, b)) (a, b) \\<Longrightarrow>\n       OclForall (S X) P (a, b) = ?f2 f (X (a, b)) (a, b)", "by(subst cp_OclForall, simp)"], ["", "lemma (*cp_OclForall2 [simp,intro!]:*)\n\"cp (\\<lambda>X St x. P (\\<lambda>\\<tau>. x) X St) \\<Longrightarrow> cp S \\<Longrightarrow> cp (\\<lambda>X. (S X)->forAll\\<^sub>S\\<^sub>e\\<^sub>t(x|P x X)) \""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>cp (\\<lambda>X St x. P (\\<lambda>\\<tau>. x) X St);\n     cp S\\<rbrakk>\n    \\<Longrightarrow> cp (\\<lambda>X.\n                             S X->forAll\\<^sub>S\\<^sub>e\\<^sub>t(x|P x X))", "apply(simp only: cp_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<exists>f.\n                \\<forall>X \\<tau>.\n                   (\\<lambda>x. P (\\<lambda>\\<tau>. x) X \\<tau>) =\n                   f (X \\<tau>) \\<tau>;\n     \\<exists>f.\n        \\<forall>X \\<tau>. S X \\<tau> = f (X \\<tau>) \\<tau>\\<rbrakk>\n    \\<Longrightarrow> \\<exists>f.\n                         \\<forall>X \\<tau>.\n                            S X->forAll\\<^sub>S\\<^sub>e\\<^sub>t(x|P x X)\n                             \\<tau> =\n                            f (X \\<tau>) \\<tau>", "oops"], ["", "lemma (*cp_OclForall:*)\n\"cp S \\<Longrightarrow>\n (\\<And> x. cp(P x)) \\<Longrightarrow>\n cp(\\<lambda>X. ((S X)->forAll\\<^sub>S\\<^sub>e\\<^sub>t(x | P x X)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>cp S; \\<And>x. cp (P x)\\<rbrakk>\n    \\<Longrightarrow> cp (\\<lambda>X.\n                             S X->forAll\\<^sub>S\\<^sub>e\\<^sub>t(x|P x X))", "oops"], ["", "lemma cp_OclExists:\n\"(S->exists\\<^sub>S\\<^sub>e\\<^sub>t(x | P x)) \\<tau> = ((\\<lambda> _. S \\<tau>)->exists\\<^sub>S\\<^sub>e\\<^sub>t(x | P (\\<lambda> _. x \\<tau>))) \\<tau>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. OclExists S P \\<tau> =\n    \\<lambda>_.\n       S \\<tau>->exists\\<^sub>S\\<^sub>e\\<^sub>t(x|P (\\<lambda>_. x \\<tau>))\n     \\<tau>", "by(simp add: OclExists_def OclNot_def, subst cp_OclForall, simp)"], ["", "(* first-order version !*)"], ["", "lemma cp_OclExists1 [simp,intro!]:\n\"cp S \\<Longrightarrow> cp (\\<lambda>X. ((S X)->exists\\<^sub>S\\<^sub>e\\<^sub>t(x | P x)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. cp S \\<Longrightarrow> cp (\\<lambda>X. OclExists (S X) P)", "apply(simp add: cp_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>f.\n       \\<forall>X a b. S X (a, b) = f (X (a, b)) (a, b) \\<Longrightarrow>\n    \\<exists>f.\n       \\<forall>X a b. OclExists (S X) P (a, b) = f (X (a, b)) (a, b)", "apply(erule exE, rule exI, intro allI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>f X a b.\n       \\<forall>X a b. S X (a, b) = f (X (a, b)) (a, b) \\<Longrightarrow>\n       OclExists (S X) P (a, b) = ?f2 f (X (a, b)) (a, b)", "apply(erule_tac x=X in allE)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>f X a b.\n       \\<forall>a b. S X (a, b) = f (X (a, b)) (a, b) \\<Longrightarrow>\n       OclExists (S X) P (a, b) = ?f2 f (X (a, b)) (a, b)", "by(subst cp_OclExists,simp)"], ["", "lemma cp_OclIterate: \n     \"(X->iterate\\<^sub>S\\<^sub>e\\<^sub>t(a; x = A | P a x)) \\<tau> =\n                ((\\<lambda> _. X \\<tau>)->iterate\\<^sub>S\\<^sub>e\\<^sub>t(a; x = A | P a x)) \\<tau>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. OclIterate X A P \\<tau> = OclIterate (\\<lambda>_. X \\<tau>) A P \\<tau>", "by(simp add: OclIterate_def cp_defined[symmetric])"], ["", "lemma cp_OclSelect: \"(X->select\\<^sub>S\\<^sub>e\\<^sub>t(a | P a)) \\<tau> =\n                ((\\<lambda> _. X \\<tau>)->select\\<^sub>S\\<^sub>e\\<^sub>t(a | P a)) \\<tau>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. OclSelect X P \\<tau> = OclSelect (\\<lambda>_. X \\<tau>) P \\<tau>", "by(simp add: OclSelect_def cp_defined[symmetric])"], ["", "lemma cp_OclReject: \"(X->reject\\<^sub>S\\<^sub>e\\<^sub>t(a | P a)) \\<tau> = ((\\<lambda> _. X \\<tau>)->reject\\<^sub>S\\<^sub>e\\<^sub>t(a | P a)) \\<tau>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. OclReject X P \\<tau> = OclReject (\\<lambda>_. X \\<tau>) P \\<tau>", "by(simp add: OclReject_def, subst cp_OclSelect, simp)"], ["", "lemmas cp_intro''\\<^sub>S\\<^sub>e\\<^sub>t[intro!,simp,code_unfold] =\n       cp_OclSize      [THEN allI[THEN allI[THEN cpI1], of \"OclSize\"]]\n       cp_OclIsEmpty   [THEN allI[THEN allI[THEN cpI1], of \"OclIsEmpty\"]]\n       cp_OclNotEmpty  [THEN allI[THEN allI[THEN cpI1], of \"OclNotEmpty\"]]\n       cp_OclANY       [THEN allI[THEN allI[THEN cpI1], of \"OclANY\"]]"], ["", "subsubsection\\<open>Const\\<close>"], ["", "lemma const_OclIncluding[simp,code_unfold] :\n assumes const_x : \"const x\"\n     and const_S : \"const S\"\n   shows  \"const (S->including\\<^sub>S\\<^sub>e\\<^sub>t(x))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. const S->including\\<^sub>S\\<^sub>e\\<^sub>t(x)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. const S->including\\<^sub>S\\<^sub>e\\<^sub>t(x)", "have A:\"\\<And>\\<tau> \\<tau>'. \\<not> (\\<tau> \\<Turnstile> \\<upsilon> x) \\<Longrightarrow> (S->including\\<^sub>S\\<^sub>e\\<^sub>t(x) \\<tau>) = (S->including\\<^sub>S\\<^sub>e\\<^sub>t(x) \\<tau>')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<tau> \\<tau>'.\n       \\<tau> |\\<noteq> \\<upsilon> x \\<Longrightarrow>\n       S->including\\<^sub>S\\<^sub>e\\<^sub>t(x) \\<tau> =\n       S->including\\<^sub>S\\<^sub>e\\<^sub>t(x) \\<tau>'", "apply(simp add: foundation18)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<tau> \\<tau>'.\n       x \\<tau> = invalid \\<tau> \\<Longrightarrow>\n       S->including\\<^sub>S\\<^sub>e\\<^sub>t(x) \\<tau> =\n       S->including\\<^sub>S\\<^sub>e\\<^sub>t(x) \\<tau>'", "apply(erule const_subst[OF const_x const_invalid],simp_all)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<tau> \\<tau>'. invalid \\<tau> = invalid \\<tau>'", "by(rule const_charn[OF const_invalid])"], ["proof (state)\nthis:\n  ?\\<tau> |\\<noteq> \\<upsilon> x \\<Longrightarrow>\n  S->including\\<^sub>S\\<^sub>e\\<^sub>t(x) ?\\<tau> =\n  S->including\\<^sub>S\\<^sub>e\\<^sub>t(x) ?\\<tau>'\n\ngoal (1 subgoal):\n 1. const S->including\\<^sub>S\\<^sub>e\\<^sub>t(x)", "have B: \"\\<And> \\<tau> \\<tau>'. \\<not> (\\<tau> \\<Turnstile> \\<delta> S) \\<Longrightarrow> (S->including\\<^sub>S\\<^sub>e\\<^sub>t(x) \\<tau>) = (S->including\\<^sub>S\\<^sub>e\\<^sub>t(x) \\<tau>')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<tau> \\<tau>'.\n       \\<tau> |\\<noteq> \\<delta> S \\<Longrightarrow>\n       S->including\\<^sub>S\\<^sub>e\\<^sub>t(x) \\<tau> =\n       S->including\\<^sub>S\\<^sub>e\\<^sub>t(x) \\<tau>'", "apply(simp add: foundation16', elim disjE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>\\<tau> \\<tau>'.\n       S \\<tau> = invalid \\<tau> \\<Longrightarrow>\n       S->including\\<^sub>S\\<^sub>e\\<^sub>t(x) \\<tau> =\n       S->including\\<^sub>S\\<^sub>e\\<^sub>t(x) \\<tau>'\n 2. \\<And>\\<tau> \\<tau>'.\n       S \\<tau> = null \\<tau> \\<Longrightarrow>\n       S->including\\<^sub>S\\<^sub>e\\<^sub>t(x) \\<tau> =\n       S->including\\<^sub>S\\<^sub>e\\<^sub>t(x) \\<tau>'", "apply(erule const_subst[OF const_S const_invalid],simp_all)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>\\<tau> \\<tau>'. invalid \\<tau> = invalid \\<tau>'\n 2. \\<And>\\<tau> \\<tau>'.\n       S \\<tau> = null \\<tau> \\<Longrightarrow>\n       S->including\\<^sub>S\\<^sub>e\\<^sub>t(x) \\<tau> =\n       S->including\\<^sub>S\\<^sub>e\\<^sub>t(x) \\<tau>'", "apply(rule const_charn[OF const_invalid])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<tau> \\<tau>'.\n       S \\<tau> = null \\<tau> \\<Longrightarrow>\n       S->including\\<^sub>S\\<^sub>e\\<^sub>t(x) \\<tau> =\n       S->including\\<^sub>S\\<^sub>e\\<^sub>t(x) \\<tau>'", "apply(erule const_subst[OF const_S const_null],simp_all)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<tau> \\<tau>'. invalid \\<tau> = invalid \\<tau>'", "by(rule const_charn[OF const_invalid])"], ["proof (state)\nthis:\n  ?\\<tau> |\\<noteq> \\<delta> S \\<Longrightarrow>\n  S->including\\<^sub>S\\<^sub>e\\<^sub>t(x) ?\\<tau> =\n  S->including\\<^sub>S\\<^sub>e\\<^sub>t(x) ?\\<tau>'\n\ngoal (1 subgoal):\n 1. const S->including\\<^sub>S\\<^sub>e\\<^sub>t(x)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. const S->including\\<^sub>S\\<^sub>e\\<^sub>t(x)", "apply(simp only: const_def,intro allI, rename_tac \\<tau> \\<tau>')"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<tau> \\<tau>'.\n       S->including\\<^sub>S\\<^sub>e\\<^sub>t(x) \\<tau> =\n       S->including\\<^sub>S\\<^sub>e\\<^sub>t(x) \\<tau>'", "apply(case_tac \"\\<not> (\\<tau> \\<Turnstile> \\<upsilon> x)\", simp add: A)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<tau> \\<tau>'.\n       \\<not> \\<tau> |\\<noteq> \\<upsilon> x \\<Longrightarrow>\n       S->including\\<^sub>S\\<^sub>e\\<^sub>t(x) \\<tau> =\n       S->including\\<^sub>S\\<^sub>e\\<^sub>t(x) \\<tau>'", "apply(case_tac \"\\<not> (\\<tau> \\<Turnstile> \\<delta> S)\", simp_all add: B)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<tau> \\<tau>'.\n       \\<lbrakk>\\<tau> \\<Turnstile> \\<upsilon> x;\n        \\<tau> \\<Turnstile> \\<delta> S\\<rbrakk>\n       \\<Longrightarrow> S->including\\<^sub>S\\<^sub>e\\<^sub>t(x) \\<tau> =\n                         S->including\\<^sub>S\\<^sub>e\\<^sub>t(x) \\<tau>'", "apply(frule_tac \\<tau>'1= \\<tau>' in  const_OclValid2[OF const_x, THEN iffD1])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<tau> \\<tau>'.\n       \\<lbrakk>\\<tau> \\<Turnstile> \\<upsilon> x;\n        \\<tau> \\<Turnstile> \\<delta> S;\n        \\<tau>' \\<Turnstile> \\<upsilon> x\\<rbrakk>\n       \\<Longrightarrow> S->including\\<^sub>S\\<^sub>e\\<^sub>t(x) \\<tau> =\n                         S->including\\<^sub>S\\<^sub>e\\<^sub>t(x) \\<tau>'", "apply(frule_tac \\<tau>'1= \\<tau>' in  const_OclValid1[OF const_S, THEN iffD1])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<tau> \\<tau>'.\n       \\<lbrakk>\\<tau> \\<Turnstile> \\<upsilon> x;\n        \\<tau> \\<Turnstile> \\<delta> S; \\<tau>' \\<Turnstile> \\<upsilon> x;\n        \\<tau>' \\<Turnstile> \\<delta> S\\<rbrakk>\n       \\<Longrightarrow> S->including\\<^sub>S\\<^sub>e\\<^sub>t(x) \\<tau> =\n                         S->including\\<^sub>S\\<^sub>e\\<^sub>t(x) \\<tau>'", "apply(simp add: OclIncluding_def OclValid_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<tau> \\<tau>'.\n       \\<lbrakk>(\\<upsilon> x) \\<tau> = true \\<tau>;\n        (\\<delta> S) \\<tau> = true \\<tau>;\n        (\\<upsilon> x) \\<tau>' = true \\<tau>';\n        (\\<delta> S) \\<tau>' = true \\<tau>'\\<rbrakk>\n       \\<Longrightarrow> Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                          \\<lfloor>\\<lfloor>insert (x \\<tau>)\n       \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                        (S \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor> =\n                         Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                          \\<lfloor>\\<lfloor>insert (x \\<tau>')\n       \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                        (S \\<tau>')\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>", "apply(subst const_charn[OF const_x])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<tau> \\<tau>'.\n       \\<lbrakk>(\\<upsilon> x) \\<tau> = true \\<tau>;\n        (\\<delta> S) \\<tau> = true \\<tau>;\n        (\\<upsilon> x) \\<tau>' = true \\<tau>';\n        (\\<delta> S) \\<tau>' = true \\<tau>'\\<rbrakk>\n       \\<Longrightarrow> Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                          \\<lfloor>\\<lfloor>insert\n       (x (?\\<tau>'10 \\<tau> \\<tau>'))\n       \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                        (S \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor> =\n                         Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                          \\<lfloor>\\<lfloor>insert (x \\<tau>')\n       \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                        (S \\<tau>')\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>", "apply(subst const_charn[OF const_S])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<tau> \\<tau>'.\n       \\<lbrakk>(\\<upsilon> x) \\<tau> = true \\<tau>;\n        (\\<delta> S) \\<tau> = true \\<tau>;\n        (\\<upsilon> x) \\<tau>' = true \\<tau>';\n        (\\<delta> S) \\<tau>' = true \\<tau>'\\<rbrakk>\n       \\<Longrightarrow> Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                          \\<lfloor>\\<lfloor>insert\n       (x (?\\<tau>''12 \\<tau> \\<tau> \\<tau>' \\<tau>'))\n       \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                        (S (?\\<tau>'11 \\<tau>\n                             \\<tau>'))\\<rceil>\\<rceil>\\<rfloor>\\<rfloor> =\n                         Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                          \\<lfloor>\\<lfloor>insert (x \\<tau>')\n       \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                        (S \\<tau>')\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>", "by simp"], ["proof (state)\nthis:\n  const S->including\\<^sub>S\\<^sub>e\\<^sub>t(x)\n\ngoal:\nNo subgoals!", "qed"], ["", "text_raw\\<open>\\endisatagafp\\<close>"], ["", "subsection\\<open>General Algebraic Execution Rules\\<close>"], ["", "subsubsection\\<open>Execution Rules on Including\\<close>"], ["", "lemma OclIncluding_finite_rep_set :\n  assumes X_def : \"\\<tau> \\<Turnstile> \\<delta> X\"\n      and x_val : \"\\<tau> \\<Turnstile> \\<upsilon> x\"\n    shows \"finite \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e (X->including\\<^sub>S\\<^sub>e\\<^sub>t(x) \\<tau>)\\<rceil>\\<rceil> = finite \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e (X \\<tau>)\\<rceil>\\<rceil>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite\n     \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                      (X->including\\<^sub>S\\<^sub>e\\<^sub>t(x)\n                        \\<tau>)\\<rceil>\\<rceil> =\n    finite\n     \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                      (X \\<tau>)\\<rceil>\\<rceil>", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. finite\n     \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                      (X->including\\<^sub>S\\<^sub>e\\<^sub>t(x)\n                        \\<tau>)\\<rceil>\\<rceil> =\n    finite\n     \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                      (X \\<tau>)\\<rceil>\\<rceil>", "have C : \"\\<lfloor>\\<lfloor>insert (x \\<tau>) \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e (X \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor> \\<in> {X. X = bot \\<or> X = null \\<or> (\\<forall>x\\<in>\\<lceil>\\<lceil>X\\<rceil>\\<rceil>. x \\<noteq> bot)}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lfloor>\\<lfloor>insert (x \\<tau>)\n                       \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n  (X \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>\n    \\<in> {X. X = \\<bottom> \\<or>\n              X = null \\<or>\n              (\\<forall>x\\<in>\\<lceil>\\<lceil>X\\<rceil>\\<rceil>.\n                  x \\<noteq> \\<bottom>)}", "by(insert X_def x_val, frule Set_inv_lemma, simp add: foundation18 invalid_def)"], ["proof (state)\nthis:\n  \\<lfloor>\\<lfloor>insert (x \\<tau>)\n                     \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n(X \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>\n  \\<in> {X. X = \\<bottom> \\<or>\n            X = null \\<or>\n            (\\<forall>x\\<in>\\<lceil>\\<lceil>X\\<rceil>\\<rceil>.\n                x \\<noteq> \\<bottom>)}\n\ngoal (1 subgoal):\n 1. finite\n     \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                      (X->including\\<^sub>S\\<^sub>e\\<^sub>t(x)\n                        \\<tau>)\\<rceil>\\<rceil> =\n    finite\n     \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                      (X \\<tau>)\\<rceil>\\<rceil>", "show \"?thesis\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite\n     \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                      (X->including\\<^sub>S\\<^sub>e\\<^sub>t(x)\n                        \\<tau>)\\<rceil>\\<rceil> =\n    finite\n     \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                      (X \\<tau>)\\<rceil>\\<rceil>", "by(insert X_def x_val,\n     auto simp: OclIncluding_def Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e_inverse[OF C]\n          dest: foundation13[THEN iffD2, THEN foundation22[THEN iffD1]])"], ["proof (state)\nthis:\n  finite\n   \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                    (X->including\\<^sub>S\\<^sub>e\\<^sub>t(x)\n                      \\<tau>)\\<rceil>\\<rceil> =\n  finite\n   \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                    (X \\<tau>)\\<rceil>\\<rceil>\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma OclIncluding_rep_set:\n assumes S_def: \"\\<tau> \\<Turnstile> \\<delta> S\"\n   shows \"\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e (S->including\\<^sub>S\\<^sub>e\\<^sub>t(\\<lambda>_. \\<lfloor>\\<lfloor>x\\<rfloor>\\<rfloor>) \\<tau>)\\<rceil>\\<rceil> = insert \\<lfloor>\\<lfloor>x\\<rfloor>\\<rfloor> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e (S \\<tau>)\\<rceil>\\<rceil>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                     (S->including\\<^sub>S\\<^sub>e\\<^sub>t(\\<lambda>_.\n                        \\<lfloor>\\<lfloor>x\\<rfloor>\\<rfloor>)\n                       \\<tau>)\\<rceil>\\<rceil> =\n    insert \\<lfloor>\\<lfloor>x\\<rfloor>\\<rfloor>\n     \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                      (S \\<tau>)\\<rceil>\\<rceil>", "apply(simp add: OclIncluding_def S_def[simplified OclValid_def])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                     (Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                       \\<lfloor>\\<lfloor>insert\n    \\<lfloor>\\<lfloor>x\\<rfloor>\\<rfloor>\n    \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                     (S \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>)\\<rceil>\\<rceil> =\n    insert \\<lfloor>\\<lfloor>x\\<rfloor>\\<rfloor>\n     \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                      (S \\<tau>)\\<rceil>\\<rceil>", "apply(subst Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e_inverse, simp add: bot_option_def null_option_def)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                    (S \\<tau>)\\<rceil>\\<rceil>.\n       \\<exists>y. x = \\<lfloor>y\\<rfloor>\n 2. \\<lceil>\\<lceil>\\<lfloor>\\<lfloor>insert\n \\<lfloor>\\<lfloor>x\\<rfloor>\\<rfloor>\n \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                  (S \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>\\<rceil>\\<rceil> =\n    insert \\<lfloor>\\<lfloor>x\\<rfloor>\\<rfloor>\n     \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                      (S \\<tau>)\\<rceil>\\<rceil>", "apply(insert Set_inv_lemma[OF S_def], metis bot_option_def not_Some_eq)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                    (S \\<tau>)\\<rceil>\\<rceil>.\n       x \\<noteq> \\<bottom> \\<Longrightarrow>\n    \\<lceil>\\<lceil>\\<lfloor>\\<lfloor>insert\n \\<lfloor>\\<lfloor>x\\<rfloor>\\<rfloor>\n \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                  (S \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>\\<rceil>\\<rceil> =\n    insert \\<lfloor>\\<lfloor>x\\<rfloor>\\<rfloor>\n     \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                      (S \\<tau>)\\<rceil>\\<rceil>", "by(simp)"], ["", "lemma OclIncluding_notempty_rep_set:\n assumes X_def: \"\\<tau> \\<Turnstile> \\<delta> X\"\n     and a_val: \"\\<tau> \\<Turnstile> \\<upsilon> a\"\n  shows \"\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e (X->including\\<^sub>S\\<^sub>e\\<^sub>t(a) \\<tau>)\\<rceil>\\<rceil> \\<noteq> {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                     (X->including\\<^sub>S\\<^sub>e\\<^sub>t(a)\n                       \\<tau>)\\<rceil>\\<rceil> \\<noteq>\n    {}", "apply(simp add: OclIncluding_def X_def[simplified OclValid_def] a_val[simplified OclValid_def])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                     (Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                       \\<lfloor>\\<lfloor>insert (a \\<tau>)\n    \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                     (X \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>)\\<rceil>\\<rceil> \\<noteq>\n    {}", "apply(subst Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e_inverse, simp add: bot_option_def null_option_def)"], ["proof (prove)\ngoal (2 subgoals):\n 1. a \\<tau> \\<noteq> \\<bottom> \\<and>\n    (\\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                     (X \\<tau>)\\<rceil>\\<rceil>.\n        x \\<noteq> \\<bottom>)\n 2. \\<lceil>\\<lceil>\\<lfloor>\\<lfloor>insert (a \\<tau>)\n \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                  (X \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>\\<rceil>\\<rceil> \\<noteq>\n    {}", "apply(insert Set_inv_lemma[OF X_def], metis a_val foundation18')"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                    (X \\<tau>)\\<rceil>\\<rceil>.\n       x \\<noteq> \\<bottom> \\<Longrightarrow>\n    \\<lceil>\\<lceil>\\<lfloor>\\<lfloor>insert (a \\<tau>)\n \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                  (X \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>\\<rceil>\\<rceil> \\<noteq>\n    {}", "by(simp)"], ["", "lemma OclIncluding_includes0:\n assumes \"\\<tau> \\<Turnstile> X->includes\\<^sub>S\\<^sub>e\\<^sub>t(x)\"\n   shows \"X->including\\<^sub>S\\<^sub>e\\<^sub>t(x) \\<tau> = X \\<tau>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. X->including\\<^sub>S\\<^sub>e\\<^sub>t(x) \\<tau> = X \\<tau>", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. X->including\\<^sub>S\\<^sub>e\\<^sub>t(x) \\<tau> = X \\<tau>", "have includes_def: \"\\<tau> \\<Turnstile> X->includes\\<^sub>S\\<^sub>e\\<^sub>t(x) \\<Longrightarrow> \\<tau> \\<Turnstile> \\<delta> X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<tau>\n     \\<Turnstile> X->includes\\<^sub>S\\<^sub>e\\<^sub>t(x) \\<Longrightarrow>\n    \\<tau> \\<Turnstile> \\<delta> X", "by (metis bot_fun_def OclIncludes_def OclValid_def defined3 foundation16)"], ["proof (state)\nthis:\n  \\<tau>\n   \\<Turnstile> X->includes\\<^sub>S\\<^sub>e\\<^sub>t(x) \\<Longrightarrow>\n  \\<tau> \\<Turnstile> \\<delta> X\n\ngoal (1 subgoal):\n 1. X->including\\<^sub>S\\<^sub>e\\<^sub>t(x) \\<tau> = X \\<tau>", "have includes_val: \"\\<tau> \\<Turnstile> X->includes\\<^sub>S\\<^sub>e\\<^sub>t(x) \\<Longrightarrow> \\<tau> \\<Turnstile> \\<upsilon> x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<tau>\n     \\<Turnstile> X->includes\\<^sub>S\\<^sub>e\\<^sub>t(x) \\<Longrightarrow>\n    \\<tau> \\<Turnstile> \\<upsilon> x", "using foundation5 foundation6"], ["proof (prove)\nusing this:\n  ?\\<tau> \\<Turnstile> ?P and ?Q \\<Longrightarrow>\n  ?\\<tau> \\<Turnstile> ?P \\<and> ?\\<tau> \\<Turnstile> ?Q\n  ?\\<tau> \\<Turnstile> ?P \\<Longrightarrow> ?\\<tau> \\<Turnstile> \\<delta> ?P\n\ngoal (1 subgoal):\n 1. \\<tau>\n     \\<Turnstile> X->includes\\<^sub>S\\<^sub>e\\<^sub>t(x) \\<Longrightarrow>\n    \\<tau> \\<Turnstile> \\<upsilon> x", "by fastforce"], ["proof (state)\nthis:\n  \\<tau>\n   \\<Turnstile> X->includes\\<^sub>S\\<^sub>e\\<^sub>t(x) \\<Longrightarrow>\n  \\<tau> \\<Turnstile> \\<upsilon> x\n\ngoal (1 subgoal):\n 1. X->including\\<^sub>S\\<^sub>e\\<^sub>t(x) \\<tau> = X \\<tau>", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. X->including\\<^sub>S\\<^sub>e\\<^sub>t(x) \\<tau> = X \\<tau>", "apply(insert includes_def[OF assms] includes_val[OF assms] assms,\n        simp add: OclIncluding_def OclIncludes_def OclValid_def true_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>(\\<delta> X) \\<tau> = \\<lfloor>\\<lfloor>True\\<rfloor>\\<rfloor>;\n     (\\<upsilon> x) \\<tau> = \\<lfloor>\\<lfloor>True\\<rfloor>\\<rfloor>;\n     x \\<tau>\n     \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                            (X \\<tau>)\\<rceil>\\<rceil>\\<rbrakk>\n    \\<Longrightarrow> Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                       \\<lfloor>\\<lfloor>insert (x \\<tau>)\n    \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                     (X \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor> =\n                      X \\<tau>", "apply(drule insert_absorb, simp, subst abs_rep_simp')"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>(\\<delta> X) \\<tau> = \\<lfloor>\\<lfloor>True\\<rfloor>\\<rfloor>;\n     (\\<upsilon> x) \\<tau> = \\<lfloor>\\<lfloor>True\\<rfloor>\\<rfloor>;\n     insert (x \\<tau>)\n      \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                       (X \\<tau>)\\<rceil>\\<rceil> =\n     \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                      (X \\<tau>)\\<rceil>\\<rceil>\\<rbrakk>\n    \\<Longrightarrow> \\<tau> \\<Turnstile> \\<delta> X\n 2. \\<lbrakk>(\\<delta> X) \\<tau> = \\<lfloor>\\<lfloor>True\\<rfloor>\\<rfloor>;\n     (\\<upsilon> x) \\<tau> = \\<lfloor>\\<lfloor>True\\<rfloor>\\<rfloor>;\n     insert (x \\<tau>)\n      \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                       (X \\<tau>)\\<rceil>\\<rceil> =\n     \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                      (X \\<tau>)\\<rceil>\\<rceil>\\<rbrakk>\n    \\<Longrightarrow> X \\<tau> = X \\<tau>", "by(simp_all add: OclValid_def true_def)"], ["proof (state)\nthis:\n  X->including\\<^sub>S\\<^sub>e\\<^sub>t(x) \\<tau> = X \\<tau>\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma OclIncluding_includes:\n assumes \"\\<tau> \\<Turnstile> X->includes\\<^sub>S\\<^sub>e\\<^sub>t(x)\"\n   shows \"\\<tau> \\<Turnstile> X->including\\<^sub>S\\<^sub>e\\<^sub>t(x) \\<triangleq> X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<tau>\n     \\<Turnstile> X->including\\<^sub>S\\<^sub>e\\<^sub>t(x) \\<triangleq> X", "by(simp add: StrongEq_def OclValid_def true_def OclIncluding_includes0[OF assms])"], ["", "lemma OclIncluding_commute0 :\n assumes S_def : \"\\<tau> \\<Turnstile> \\<delta> S\"\n     and i_val : \"\\<tau> \\<Turnstile> \\<upsilon> i\"\n     and j_val : \"\\<tau> \\<Turnstile> \\<upsilon> j\"\n   shows \"\\<tau> \\<Turnstile> ((S :: ('\\<AA>, 'a::null) Set)->including\\<^sub>S\\<^sub>e\\<^sub>t(i)->including\\<^sub>S\\<^sub>e\\<^sub>t(j) \\<triangleq> (S->including\\<^sub>S\\<^sub>e\\<^sub>t(j)->including\\<^sub>S\\<^sub>e\\<^sub>t(i)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<tau>\n     \\<Turnstile> S->including\\<^sub>S\\<^sub>e\\<^sub>t(i)->including\\<^sub>S\\<^sub>e\\<^sub>t(j) \\<triangleq>\n                  S->including\\<^sub>S\\<^sub>e\\<^sub>t(j)->including\\<^sub>S\\<^sub>e\\<^sub>t(i)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<tau>\n     \\<Turnstile> S->including\\<^sub>S\\<^sub>e\\<^sub>t(i)->including\\<^sub>S\\<^sub>e\\<^sub>t(j) \\<triangleq>\n                  S->including\\<^sub>S\\<^sub>e\\<^sub>t(j)->including\\<^sub>S\\<^sub>e\\<^sub>t(i)", "have A : \"\\<lfloor>\\<lfloor>insert (i \\<tau>) \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e (S \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor> \\<in> {X. X = bot \\<or> X = null \\<or> (\\<forall>x\\<in>\\<lceil>\\<lceil>X\\<rceil>\\<rceil>. x \\<noteq> bot)}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lfloor>\\<lfloor>insert (i \\<tau>)\n                       \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n  (S \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>\n    \\<in> {X. X = \\<bottom> \\<or>\n              X = null \\<or>\n              (\\<forall>x\\<in>\\<lceil>\\<lceil>X\\<rceil>\\<rceil>.\n                  x \\<noteq> \\<bottom>)}", "by(insert S_def i_val, frule Set_inv_lemma, simp add: foundation18 invalid_def)"], ["proof (state)\nthis:\n  \\<lfloor>\\<lfloor>insert (i \\<tau>)\n                     \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n(S \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>\n  \\<in> {X. X = \\<bottom> \\<or>\n            X = null \\<or>\n            (\\<forall>x\\<in>\\<lceil>\\<lceil>X\\<rceil>\\<rceil>.\n                x \\<noteq> \\<bottom>)}\n\ngoal (1 subgoal):\n 1. \\<tau>\n     \\<Turnstile> S->including\\<^sub>S\\<^sub>e\\<^sub>t(i)->including\\<^sub>S\\<^sub>e\\<^sub>t(j) \\<triangleq>\n                  S->including\\<^sub>S\\<^sub>e\\<^sub>t(j)->including\\<^sub>S\\<^sub>e\\<^sub>t(i)", "have B : \"\\<lfloor>\\<lfloor>insert (j \\<tau>) \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e (S \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor> \\<in> {X. X = bot \\<or> X = null \\<or> (\\<forall>x\\<in>\\<lceil>\\<lceil>X\\<rceil>\\<rceil>. x \\<noteq> bot)}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lfloor>\\<lfloor>insert (j \\<tau>)\n                       \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n  (S \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>\n    \\<in> {X. X = \\<bottom> \\<or>\n              X = null \\<or>\n              (\\<forall>x\\<in>\\<lceil>\\<lceil>X\\<rceil>\\<rceil>.\n                  x \\<noteq> \\<bottom>)}", "by(insert S_def j_val, frule Set_inv_lemma, simp add: foundation18 invalid_def)"], ["proof (state)\nthis:\n  \\<lfloor>\\<lfloor>insert (j \\<tau>)\n                     \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n(S \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>\n  \\<in> {X. X = \\<bottom> \\<or>\n            X = null \\<or>\n            (\\<forall>x\\<in>\\<lceil>\\<lceil>X\\<rceil>\\<rceil>.\n                x \\<noteq> \\<bottom>)}\n\ngoal (1 subgoal):\n 1. \\<tau>\n     \\<Turnstile> S->including\\<^sub>S\\<^sub>e\\<^sub>t(i)->including\\<^sub>S\\<^sub>e\\<^sub>t(j) \\<triangleq>\n                  S->including\\<^sub>S\\<^sub>e\\<^sub>t(j)->including\\<^sub>S\\<^sub>e\\<^sub>t(i)", "have G1 : \"Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e \\<lfloor>\\<lfloor>insert (i \\<tau>) \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e (S \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor> \\<noteq> Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e None\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n     \\<lfloor>\\<lfloor>insert (i \\<tau>)\n                        \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n   (S \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor> \\<noteq>\n    Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e None", "by(insert A, simp add: Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e_inject bot_option_def null_option_def)"], ["proof (state)\nthis:\n  Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n   \\<lfloor>\\<lfloor>insert (i \\<tau>)\n                      \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n (S \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor> \\<noteq>\n  Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e None\n\ngoal (1 subgoal):\n 1. \\<tau>\n     \\<Turnstile> S->including\\<^sub>S\\<^sub>e\\<^sub>t(i)->including\\<^sub>S\\<^sub>e\\<^sub>t(j) \\<triangleq>\n                  S->including\\<^sub>S\\<^sub>e\\<^sub>t(j)->including\\<^sub>S\\<^sub>e\\<^sub>t(i)", "have G2 : \"Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e \\<lfloor>\\<lfloor>insert (i \\<tau>) \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e (S \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor> \\<noteq> Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e \\<lfloor>None\\<rfloor>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n     \\<lfloor>\\<lfloor>insert (i \\<tau>)\n                        \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n   (S \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor> \\<noteq>\n    Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e \\<lfloor>None\\<rfloor>", "by(insert A, simp add: Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e_inject bot_option_def null_option_def)"], ["proof (state)\nthis:\n  Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n   \\<lfloor>\\<lfloor>insert (i \\<tau>)\n                      \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n (S \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor> \\<noteq>\n  Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e \\<lfloor>None\\<rfloor>\n\ngoal (1 subgoal):\n 1. \\<tau>\n     \\<Turnstile> S->including\\<^sub>S\\<^sub>e\\<^sub>t(i)->including\\<^sub>S\\<^sub>e\\<^sub>t(j) \\<triangleq>\n                  S->including\\<^sub>S\\<^sub>e\\<^sub>t(j)->including\\<^sub>S\\<^sub>e\\<^sub>t(i)", "have G3 : \"Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e \\<lfloor>\\<lfloor>insert (j \\<tau>) \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e (S \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor> \\<noteq> Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e None\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n     \\<lfloor>\\<lfloor>insert (j \\<tau>)\n                        \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n   (S \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor> \\<noteq>\n    Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e None", "by(insert B, simp add: Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e_inject bot_option_def null_option_def)"], ["proof (state)\nthis:\n  Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n   \\<lfloor>\\<lfloor>insert (j \\<tau>)\n                      \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n (S \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor> \\<noteq>\n  Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e None\n\ngoal (1 subgoal):\n 1. \\<tau>\n     \\<Turnstile> S->including\\<^sub>S\\<^sub>e\\<^sub>t(i)->including\\<^sub>S\\<^sub>e\\<^sub>t(j) \\<triangleq>\n                  S->including\\<^sub>S\\<^sub>e\\<^sub>t(j)->including\\<^sub>S\\<^sub>e\\<^sub>t(i)", "have G4 : \"Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e \\<lfloor>\\<lfloor>insert (j \\<tau>) \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e (S \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor> \\<noteq> Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e \\<lfloor>None\\<rfloor>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n     \\<lfloor>\\<lfloor>insert (j \\<tau>)\n                        \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n   (S \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor> \\<noteq>\n    Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e \\<lfloor>None\\<rfloor>", "by(insert B, simp add: Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e_inject bot_option_def null_option_def)"], ["proof (state)\nthis:\n  Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n   \\<lfloor>\\<lfloor>insert (j \\<tau>)\n                      \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n (S \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor> \\<noteq>\n  Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e \\<lfloor>None\\<rfloor>\n\ngoal (1 subgoal):\n 1. \\<tau>\n     \\<Turnstile> S->including\\<^sub>S\\<^sub>e\\<^sub>t(i)->including\\<^sub>S\\<^sub>e\\<^sub>t(j) \\<triangleq>\n                  S->including\\<^sub>S\\<^sub>e\\<^sub>t(j)->including\\<^sub>S\\<^sub>e\\<^sub>t(i)", "have *   : \"(\\<delta> (\\<lambda>_. Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e \\<lfloor>\\<lfloor>insert (i \\<tau>) \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e (S \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>)) \\<tau> = \\<lfloor>\\<lfloor>True\\<rfloor>\\<rfloor>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<delta> (\\<lambda>_.\n                  Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                   \\<lfloor>\\<lfloor>insert (i \\<tau>)\n\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                 (S \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>))\n     \\<tau> =\n    \\<lfloor>\\<lfloor>True\\<rfloor>\\<rfloor>", "by(auto simp: OclValid_def false_def  defined_def null_fun_def  true_def\n                              bot_fun_def bot_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e_def  null_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e_def S_def i_val G1 G2)"], ["proof (state)\nthis:\n  (\\<delta> (\\<lambda>_.\n                Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                 \\<lfloor>\\<lfloor>insert (i \\<tau>)\n                                    \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n               (S \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>))\n   \\<tau> =\n  \\<lfloor>\\<lfloor>True\\<rfloor>\\<rfloor>\n\ngoal (1 subgoal):\n 1. \\<tau>\n     \\<Turnstile> S->including\\<^sub>S\\<^sub>e\\<^sub>t(i)->including\\<^sub>S\\<^sub>e\\<^sub>t(j) \\<triangleq>\n                  S->including\\<^sub>S\\<^sub>e\\<^sub>t(j)->including\\<^sub>S\\<^sub>e\\<^sub>t(i)", "have **  : \"(\\<delta> (\\<lambda>_. Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e \\<lfloor>\\<lfloor>insert (j \\<tau>) \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e (S \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>)) \\<tau> = \\<lfloor>\\<lfloor>True\\<rfloor>\\<rfloor>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<delta> (\\<lambda>_.\n                  Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                   \\<lfloor>\\<lfloor>insert (j \\<tau>)\n\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                 (S \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>))\n     \\<tau> =\n    \\<lfloor>\\<lfloor>True\\<rfloor>\\<rfloor>", "by(auto simp: OclValid_def false_def  defined_def null_fun_def  true_def\n                              bot_fun_def bot_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e_def  null_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e_def S_def i_val G3 G4)"], ["proof (state)\nthis:\n  (\\<delta> (\\<lambda>_.\n                Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                 \\<lfloor>\\<lfloor>insert (j \\<tau>)\n                                    \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n               (S \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>))\n   \\<tau> =\n  \\<lfloor>\\<lfloor>True\\<rfloor>\\<rfloor>\n\ngoal (1 subgoal):\n 1. \\<tau>\n     \\<Turnstile> S->including\\<^sub>S\\<^sub>e\\<^sub>t(i)->including\\<^sub>S\\<^sub>e\\<^sub>t(j) \\<triangleq>\n                  S->including\\<^sub>S\\<^sub>e\\<^sub>t(j)->including\\<^sub>S\\<^sub>e\\<^sub>t(i)", "have *** : \"Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e \\<lfloor>\\<lfloor>insert(j \\<tau>)\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e(Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\\<lfloor>\\<lfloor>insert(i \\<tau>)\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e(S \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor> =\n              Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e \\<lfloor>\\<lfloor>insert(i \\<tau>)\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e(Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\\<lfloor>\\<lfloor>insert(j \\<tau>)\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e(S \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n     \\<lfloor>\\<lfloor>insert (j \\<tau>)\n                        \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n   (Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n     \\<lfloor>\\<lfloor>insert (i \\<tau>)\n                        \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n   (S \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor> =\n    Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n     \\<lfloor>\\<lfloor>insert (i \\<tau>)\n                        \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n   (Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n     \\<lfloor>\\<lfloor>insert (j \\<tau>)\n                        \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n   (S \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>", "by(simp add: Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e_inverse[OF A] Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e_inverse[OF B] Set.insert_commute)"], ["proof (state)\nthis:\n  Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n   \\<lfloor>\\<lfloor>insert (j \\<tau>)\n                      \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n (Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n   \\<lfloor>\\<lfloor>insert (i \\<tau>)\n                      \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n (S \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor> =\n  Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n   \\<lfloor>\\<lfloor>insert (i \\<tau>)\n                      \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n (Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n   \\<lfloor>\\<lfloor>insert (j \\<tau>)\n                      \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n (S \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>\n\ngoal (1 subgoal):\n 1. \\<tau>\n     \\<Turnstile> S->including\\<^sub>S\\<^sub>e\\<^sub>t(i)->including\\<^sub>S\\<^sub>e\\<^sub>t(j) \\<triangleq>\n                  S->including\\<^sub>S\\<^sub>e\\<^sub>t(j)->including\\<^sub>S\\<^sub>e\\<^sub>t(i)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<tau>\n     \\<Turnstile> S->including\\<^sub>S\\<^sub>e\\<^sub>t(i)->including\\<^sub>S\\<^sub>e\\<^sub>t(j) \\<triangleq>\n                  S->including\\<^sub>S\\<^sub>e\\<^sub>t(j)->including\\<^sub>S\\<^sub>e\\<^sub>t(i)", "apply(simp add: OclIncluding_def S_def[simplified OclValid_def]\n                  i_val[simplified OclValid_def] j_val[simplified OclValid_def]\n                  true_def OclValid_def StrongEq_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. ((\\<delta> (\\<lambda>\\<tau>.\n                   if (\\<delta> S) \\<tau> =\n                      \\<lfloor>\\<lfloor>True\\<rfloor>\\<rfloor> \\<and>\n                      (\\<upsilon> i) \\<tau> =\n                      \\<lfloor>\\<lfloor>True\\<rfloor>\\<rfloor>\n                   then Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                         \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                      (S \\<tau>)\\<rceil>\\<rceil> \\<union>\n     {i \\<tau>}\\<rfloor>\\<rfloor>\n                   else invalid \\<tau>))\n      \\<tau> =\n     \\<lfloor>\\<lfloor>True\\<rfloor>\\<rfloor> \\<longrightarrow>\n     ((\\<delta> (\\<lambda>\\<tau>.\n                    if (\\<delta> S) \\<tau> =\n                       \\<lfloor>\\<lfloor>True\\<rfloor>\\<rfloor> \\<and>\n                       (\\<upsilon> j) \\<tau> =\n                       \\<lfloor>\\<lfloor>True\\<rfloor>\\<rfloor>\n                    then Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                          \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                       (S \\<tau>)\\<rceil>\\<rceil> \\<union>\n      {j \\<tau>}\\<rfloor>\\<rfloor>\n                    else invalid \\<tau>))\n       \\<tau> =\n      \\<lfloor>\\<lfloor>True\\<rfloor>\\<rfloor> \\<longrightarrow>\n      Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n       \\<lfloor>\\<lfloor>insert (j \\<tau>)\n                          \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n     (Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n       \\<lfloor>\\<lfloor>insert (i \\<tau>)\n                          \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n     (S \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor> =\n      Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n       \\<lfloor>\\<lfloor>insert (i \\<tau>)\n                          \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n     (Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n       \\<lfloor>\\<lfloor>insert (j \\<tau>)\n                          \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n     (S \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>) \\<and>\n     ((\\<delta> (\\<lambda>\\<tau>.\n                    if (\\<delta> S) \\<tau> =\n                       \\<lfloor>\\<lfloor>True\\<rfloor>\\<rfloor> \\<and>\n                       (\\<upsilon> j) \\<tau> =\n                       \\<lfloor>\\<lfloor>True\\<rfloor>\\<rfloor>\n                    then Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                          \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                       (S \\<tau>)\\<rceil>\\<rceil> \\<union>\n      {j \\<tau>}\\<rfloor>\\<rfloor>\n                    else invalid \\<tau>))\n       \\<tau> \\<noteq>\n      \\<lfloor>\\<lfloor>True\\<rfloor>\\<rfloor> \\<longrightarrow>\n      Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n       \\<lfloor>\\<lfloor>insert (j \\<tau>)\n                          \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n     (Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n       \\<lfloor>\\<lfloor>insert (i \\<tau>)\n                          \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n     (S \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor> =\n      invalid \\<tau>)) \\<and>\n    ((\\<delta> (\\<lambda>\\<tau>.\n                   if (\\<delta> S) \\<tau> =\n                      \\<lfloor>\\<lfloor>True\\<rfloor>\\<rfloor> \\<and>\n                      (\\<upsilon> i) \\<tau> =\n                      \\<lfloor>\\<lfloor>True\\<rfloor>\\<rfloor>\n                   then Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                         \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                      (S \\<tau>)\\<rceil>\\<rceil> \\<union>\n     {i \\<tau>}\\<rfloor>\\<rfloor>\n                   else invalid \\<tau>))\n      \\<tau> \\<noteq>\n     \\<lfloor>\\<lfloor>True\\<rfloor>\\<rfloor> \\<longrightarrow>\n     (\\<delta> (\\<lambda>\\<tau>.\n                   if (\\<delta> S) \\<tau> =\n                      \\<lfloor>\\<lfloor>True\\<rfloor>\\<rfloor> \\<and>\n                      (\\<upsilon> j) \\<tau> =\n                      \\<lfloor>\\<lfloor>True\\<rfloor>\\<rfloor>\n                   then Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                         \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                      (S \\<tau>)\\<rceil>\\<rceil> \\<union>\n     {j \\<tau>}\\<rfloor>\\<rfloor>\n                   else invalid \\<tau>))\n      \\<tau> =\n     \\<lfloor>\\<lfloor>True\\<rfloor>\\<rfloor> \\<longrightarrow>\n     invalid \\<tau> =\n     Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n      \\<lfloor>\\<lfloor>insert (i \\<tau>)\n                         \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n    (Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n      \\<lfloor>\\<lfloor>insert (j \\<tau>)\n                         \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n    (S \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>)", "apply(subst cp_defined,\n           simp add: S_def[simplified OclValid_def]\n                     i_val[simplified OclValid_def] j_val[simplified OclValid_def] true_def *)"], ["proof (prove)\ngoal (1 subgoal):\n 1. ((\\<delta> (\\<lambda>\\<tau>.\n                   if (\\<delta> S) \\<tau> =\n                      \\<lfloor>\\<lfloor>True\\<rfloor>\\<rfloor> \\<and>\n                      (\\<upsilon> j) \\<tau> =\n                      \\<lfloor>\\<lfloor>True\\<rfloor>\\<rfloor>\n                   then Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                         \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                      (S \\<tau>)\\<rceil>\\<rceil> \\<union>\n     {j \\<tau>}\\<rfloor>\\<rfloor>\n                   else invalid \\<tau>))\n      \\<tau> =\n     \\<lfloor>\\<lfloor>True\\<rfloor>\\<rfloor> \\<longrightarrow>\n     Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n      \\<lfloor>\\<lfloor>insert (j \\<tau>)\n                         \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n    (Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n      \\<lfloor>\\<lfloor>insert (i \\<tau>)\n                         \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n    (S \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor> =\n     Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n      \\<lfloor>\\<lfloor>insert (i \\<tau>)\n                         \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n    (Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n      \\<lfloor>\\<lfloor>insert (j \\<tau>)\n                         \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n    (S \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>) \\<and>\n    ((\\<delta> (\\<lambda>\\<tau>.\n                   if (\\<delta> S) \\<tau> =\n                      \\<lfloor>\\<lfloor>True\\<rfloor>\\<rfloor> \\<and>\n                      (\\<upsilon> j) \\<tau> =\n                      \\<lfloor>\\<lfloor>True\\<rfloor>\\<rfloor>\n                   then Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                         \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                      (S \\<tau>)\\<rceil>\\<rceil> \\<union>\n     {j \\<tau>}\\<rfloor>\\<rfloor>\n                   else invalid \\<tau>))\n      \\<tau> \\<noteq>\n     \\<lfloor>\\<lfloor>True\\<rfloor>\\<rfloor> \\<longrightarrow>\n     Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n      \\<lfloor>\\<lfloor>insert (j \\<tau>)\n                         \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n    (Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n      \\<lfloor>\\<lfloor>insert (i \\<tau>)\n                         \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n    (S \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor> =\n     invalid \\<tau>) \\<and>\n    ((\\<delta> (\\<lambda>\\<tau>.\n                   if (\\<delta> S) \\<tau> =\n                      \\<lfloor>\\<lfloor>True\\<rfloor>\\<rfloor> \\<and>\n                      (\\<upsilon> i) \\<tau> =\n                      \\<lfloor>\\<lfloor>True\\<rfloor>\\<rfloor>\n                   then Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                         \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                      (S \\<tau>)\\<rceil>\\<rceil> \\<union>\n     {i \\<tau>}\\<rfloor>\\<rfloor>\n                   else invalid \\<tau>))\n      \\<tau> \\<noteq>\n     \\<lfloor>\\<lfloor>True\\<rfloor>\\<rfloor> \\<longrightarrow>\n     (\\<delta> (\\<lambda>\\<tau>.\n                   if (\\<delta> S) \\<tau> =\n                      \\<lfloor>\\<lfloor>True\\<rfloor>\\<rfloor> \\<and>\n                      (\\<upsilon> j) \\<tau> =\n                      \\<lfloor>\\<lfloor>True\\<rfloor>\\<rfloor>\n                   then Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                         \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                      (S \\<tau>)\\<rceil>\\<rceil> \\<union>\n     {j \\<tau>}\\<rfloor>\\<rfloor>\n                   else invalid \\<tau>))\n      \\<tau> =\n     \\<lfloor>\\<lfloor>True\\<rfloor>\\<rfloor> \\<longrightarrow>\n     invalid \\<tau> =\n     Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n      \\<lfloor>\\<lfloor>insert (i \\<tau>)\n                         \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n    (Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n      \\<lfloor>\\<lfloor>insert (j \\<tau>)\n                         \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n    (S \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>)", "apply(subst cp_defined,\n           simp add: S_def[simplified OclValid_def]\n                     i_val[simplified OclValid_def] j_val[simplified OclValid_def] true_def ** ***)"], ["proof (prove)\ngoal (1 subgoal):\n 1. ((\\<delta> (\\<lambda>\\<tau>.\n                   if (\\<delta> S) \\<tau> =\n                      \\<lfloor>\\<lfloor>True\\<rfloor>\\<rfloor> \\<and>\n                      (\\<upsilon> j) \\<tau> =\n                      \\<lfloor>\\<lfloor>True\\<rfloor>\\<rfloor>\n                   then Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                         \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                      (S \\<tau>)\\<rceil>\\<rceil> \\<union>\n     {j \\<tau>}\\<rfloor>\\<rfloor>\n                   else invalid \\<tau>))\n      \\<tau> \\<noteq>\n     \\<lfloor>\\<lfloor>True\\<rfloor>\\<rfloor> \\<longrightarrow>\n     Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n      \\<lfloor>\\<lfloor>insert (i \\<tau>)\n                         \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n    (Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n      \\<lfloor>\\<lfloor>insert (j \\<tau>)\n                         \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n    (S \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor> =\n     invalid \\<tau>) \\<and>\n    ((\\<delta> (\\<lambda>\\<tau>.\n                   if (\\<delta> S) \\<tau> =\n                      \\<lfloor>\\<lfloor>True\\<rfloor>\\<rfloor> \\<and>\n                      (\\<upsilon> i) \\<tau> =\n                      \\<lfloor>\\<lfloor>True\\<rfloor>\\<rfloor>\n                   then Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                         \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                      (S \\<tau>)\\<rceil>\\<rceil> \\<union>\n     {i \\<tau>}\\<rfloor>\\<rfloor>\n                   else invalid \\<tau>))\n      \\<tau> \\<noteq>\n     \\<lfloor>\\<lfloor>True\\<rfloor>\\<rfloor> \\<longrightarrow>\n     (\\<delta> (\\<lambda>\\<tau>.\n                   if (\\<delta> S) \\<tau> =\n                      \\<lfloor>\\<lfloor>True\\<rfloor>\\<rfloor> \\<and>\n                      (\\<upsilon> j) \\<tau> =\n                      \\<lfloor>\\<lfloor>True\\<rfloor>\\<rfloor>\n                   then Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                         \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                      (S \\<tau>)\\<rceil>\\<rceil> \\<union>\n     {j \\<tau>}\\<rfloor>\\<rfloor>\n                   else invalid \\<tau>))\n      \\<tau> =\n     \\<lfloor>\\<lfloor>True\\<rfloor>\\<rfloor> \\<longrightarrow>\n     invalid \\<tau> =\n     Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n      \\<lfloor>\\<lfloor>insert (i \\<tau>)\n                         \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n    (Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n      \\<lfloor>\\<lfloor>insert (j \\<tau>)\n                         \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n    (S \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>)", "apply(subst cp_defined,\n           simp add: S_def[simplified OclValid_def]\n                     i_val[simplified OclValid_def] j_val[simplified OclValid_def] true_def *)"], ["proof (prove)\ngoal (1 subgoal):\n 1. ((\\<delta> (\\<lambda>_.\n                   Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                    \\<lfloor>\\<lfloor>insert (j \\<tau>)\n \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                  (S \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>))\n      \\<tau> \\<noteq>\n     \\<lfloor>\\<lfloor>True\\<rfloor>\\<rfloor> \\<longrightarrow>\n     Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n      \\<lfloor>\\<lfloor>insert (i \\<tau>)\n                         \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n    (Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n      \\<lfloor>\\<lfloor>insert (j \\<tau>)\n                         \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n    (S \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor> =\n     invalid \\<tau>) \\<and>\n    ((\\<delta> (\\<lambda>\\<tau>.\n                   if (\\<delta> S) \\<tau> =\n                      \\<lfloor>\\<lfloor>True\\<rfloor>\\<rfloor> \\<and>\n                      (\\<upsilon> i) \\<tau> =\n                      \\<lfloor>\\<lfloor>True\\<rfloor>\\<rfloor>\n                   then Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                         \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                      (S \\<tau>)\\<rceil>\\<rceil> \\<union>\n     {i \\<tau>}\\<rfloor>\\<rfloor>\n                   else invalid \\<tau>))\n      \\<tau> \\<noteq>\n     \\<lfloor>\\<lfloor>True\\<rfloor>\\<rfloor> \\<longrightarrow>\n     (\\<delta> (\\<lambda>\\<tau>.\n                   if (\\<delta> S) \\<tau> =\n                      \\<lfloor>\\<lfloor>True\\<rfloor>\\<rfloor> \\<and>\n                      (\\<upsilon> j) \\<tau> =\n                      \\<lfloor>\\<lfloor>True\\<rfloor>\\<rfloor>\n                   then Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                         \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                      (S \\<tau>)\\<rceil>\\<rceil> \\<union>\n     {j \\<tau>}\\<rfloor>\\<rfloor>\n                   else invalid \\<tau>))\n      \\<tau> =\n     \\<lfloor>\\<lfloor>True\\<rfloor>\\<rfloor> \\<longrightarrow>\n     invalid \\<tau> =\n     Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n      \\<lfloor>\\<lfloor>insert (i \\<tau>)\n                         \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n    (Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n      \\<lfloor>\\<lfloor>insert (j \\<tau>)\n                         \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n    (S \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>)", "apply(subst cp_defined,\n           simp add: S_def[simplified OclValid_def]\n                     i_val[simplified OclValid_def] j_val[simplified OclValid_def] true_def * )"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<delta> (\\<lambda>_.\n                  Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                   \\<lfloor>\\<lfloor>insert (j \\<tau>)\n\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                 (S \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>))\n     \\<tau> \\<noteq>\n    \\<lfloor>\\<lfloor>True\\<rfloor>\\<rfloor> \\<longrightarrow>\n    Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n     \\<lfloor>\\<lfloor>insert (i \\<tau>)\n                        \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n   (Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n     \\<lfloor>\\<lfloor>insert (j \\<tau>)\n                        \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n   (S \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor> =\n    invalid \\<tau>", "apply(subst cp_defined,\n           simp add: S_def[simplified OclValid_def]\n                     i_val[simplified OclValid_def] j_val[simplified OclValid_def] true_def * **)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  \\<tau>\n   \\<Turnstile> S->including\\<^sub>S\\<^sub>e\\<^sub>t(i)->including\\<^sub>S\\<^sub>e\\<^sub>t(j) \\<triangleq>\n                S->including\\<^sub>S\\<^sub>e\\<^sub>t(j)->including\\<^sub>S\\<^sub>e\\<^sub>t(i)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma OclIncluding_commute[simp,code_unfold]:\n\"((S :: ('\\<AA>, 'a::null) Set)->including\\<^sub>S\\<^sub>e\\<^sub>t(i)->including\\<^sub>S\\<^sub>e\\<^sub>t(j) = (S->including\\<^sub>S\\<^sub>e\\<^sub>t(j)->including\\<^sub>S\\<^sub>e\\<^sub>t(i)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. S->including\\<^sub>S\\<^sub>e\\<^sub>t(i)->including\\<^sub>S\\<^sub>e\\<^sub>t(j) =\n    S->including\\<^sub>S\\<^sub>e\\<^sub>t(j)->including\\<^sub>S\\<^sub>e\\<^sub>t(i)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. S->including\\<^sub>S\\<^sub>e\\<^sub>t(i)->including\\<^sub>S\\<^sub>e\\<^sub>t(j) =\n    S->including\\<^sub>S\\<^sub>e\\<^sub>t(j)->including\\<^sub>S\\<^sub>e\\<^sub>t(i)", "have A: \"\\<And> \\<tau>.   \\<tau> \\<Turnstile> (i \\<triangleq> invalid)   \\<Longrightarrow> (S->including\\<^sub>S\\<^sub>e\\<^sub>t(i)->including\\<^sub>S\\<^sub>e\\<^sub>t(j)) \\<tau> = invalid \\<tau>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<tau>.\n       \\<tau> \\<Turnstile> i \\<triangleq> invalid \\<Longrightarrow>\n       S->including\\<^sub>S\\<^sub>e\\<^sub>t(i)->including\\<^sub>S\\<^sub>e\\<^sub>t(j)\n        \\<tau> =\n       invalid \\<tau>", "apply(rule foundation22[THEN iffD1])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<tau>.\n       \\<tau> \\<Turnstile> i \\<triangleq> invalid \\<Longrightarrow>\n       \\<tau>\n        \\<Turnstile> S->including\\<^sub>S\\<^sub>e\\<^sub>t(i)->including\\<^sub>S\\<^sub>e\\<^sub>t(j) \\<triangleq>\n                     invalid", "by(erule StrongEq_L_subst2_rev, simp,simp)"], ["proof (state)\nthis:\n  ?\\<tau> \\<Turnstile> i \\<triangleq> invalid \\<Longrightarrow>\n  S->including\\<^sub>S\\<^sub>e\\<^sub>t(i)->including\\<^sub>S\\<^sub>e\\<^sub>t(j)\n   ?\\<tau> =\n  invalid ?\\<tau>\n\ngoal (1 subgoal):\n 1. S->including\\<^sub>S\\<^sub>e\\<^sub>t(i)->including\\<^sub>S\\<^sub>e\\<^sub>t(j) =\n    S->including\\<^sub>S\\<^sub>e\\<^sub>t(j)->including\\<^sub>S\\<^sub>e\\<^sub>t(i)", "have A': \"\\<And> \\<tau>.   \\<tau> \\<Turnstile> (i \\<triangleq> invalid)   \\<Longrightarrow> (S->including\\<^sub>S\\<^sub>e\\<^sub>t(j)->including\\<^sub>S\\<^sub>e\\<^sub>t(i)) \\<tau> = invalid \\<tau>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<tau>.\n       \\<tau> \\<Turnstile> i \\<triangleq> invalid \\<Longrightarrow>\n       S->including\\<^sub>S\\<^sub>e\\<^sub>t(j)->including\\<^sub>S\\<^sub>e\\<^sub>t(i)\n        \\<tau> =\n       invalid \\<tau>", "apply(rule foundation22[THEN iffD1])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<tau>.\n       \\<tau> \\<Turnstile> i \\<triangleq> invalid \\<Longrightarrow>\n       \\<tau>\n        \\<Turnstile> S->including\\<^sub>S\\<^sub>e\\<^sub>t(j)->including\\<^sub>S\\<^sub>e\\<^sub>t(i) \\<triangleq>\n                     invalid", "by(erule StrongEq_L_subst2_rev, simp,simp)"], ["proof (state)\nthis:\n  ?\\<tau> \\<Turnstile> i \\<triangleq> invalid \\<Longrightarrow>\n  S->including\\<^sub>S\\<^sub>e\\<^sub>t(j)->including\\<^sub>S\\<^sub>e\\<^sub>t(i)\n   ?\\<tau> =\n  invalid ?\\<tau>\n\ngoal (1 subgoal):\n 1. S->including\\<^sub>S\\<^sub>e\\<^sub>t(i)->including\\<^sub>S\\<^sub>e\\<^sub>t(j) =\n    S->including\\<^sub>S\\<^sub>e\\<^sub>t(j)->including\\<^sub>S\\<^sub>e\\<^sub>t(i)", "have B:\"\\<And> \\<tau>.   \\<tau> \\<Turnstile> (j \\<triangleq> invalid)   \\<Longrightarrow> (S->including\\<^sub>S\\<^sub>e\\<^sub>t(i)->including\\<^sub>S\\<^sub>e\\<^sub>t(j)) \\<tau> = invalid \\<tau>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<tau>.\n       \\<tau> \\<Turnstile> j \\<triangleq> invalid \\<Longrightarrow>\n       S->including\\<^sub>S\\<^sub>e\\<^sub>t(i)->including\\<^sub>S\\<^sub>e\\<^sub>t(j)\n        \\<tau> =\n       invalid \\<tau>", "apply(rule foundation22[THEN iffD1])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<tau>.\n       \\<tau> \\<Turnstile> j \\<triangleq> invalid \\<Longrightarrow>\n       \\<tau>\n        \\<Turnstile> S->including\\<^sub>S\\<^sub>e\\<^sub>t(i)->including\\<^sub>S\\<^sub>e\\<^sub>t(j) \\<triangleq>\n                     invalid", "by(erule StrongEq_L_subst2_rev, simp,simp)"], ["proof (state)\nthis:\n  ?\\<tau> \\<Turnstile> j \\<triangleq> invalid \\<Longrightarrow>\n  S->including\\<^sub>S\\<^sub>e\\<^sub>t(i)->including\\<^sub>S\\<^sub>e\\<^sub>t(j)\n   ?\\<tau> =\n  invalid ?\\<tau>\n\ngoal (1 subgoal):\n 1. S->including\\<^sub>S\\<^sub>e\\<^sub>t(i)->including\\<^sub>S\\<^sub>e\\<^sub>t(j) =\n    S->including\\<^sub>S\\<^sub>e\\<^sub>t(j)->including\\<^sub>S\\<^sub>e\\<^sub>t(i)", "have B':\"\\<And> \\<tau>.   \\<tau> \\<Turnstile> (j \\<triangleq> invalid)   \\<Longrightarrow> (S->including\\<^sub>S\\<^sub>e\\<^sub>t(j)->including\\<^sub>S\\<^sub>e\\<^sub>t(i)) \\<tau> = invalid \\<tau>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<tau>.\n       \\<tau> \\<Turnstile> j \\<triangleq> invalid \\<Longrightarrow>\n       S->including\\<^sub>S\\<^sub>e\\<^sub>t(j)->including\\<^sub>S\\<^sub>e\\<^sub>t(i)\n        \\<tau> =\n       invalid \\<tau>", "apply(rule foundation22[THEN iffD1])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<tau>.\n       \\<tau> \\<Turnstile> j \\<triangleq> invalid \\<Longrightarrow>\n       \\<tau>\n        \\<Turnstile> S->including\\<^sub>S\\<^sub>e\\<^sub>t(j)->including\\<^sub>S\\<^sub>e\\<^sub>t(i) \\<triangleq>\n                     invalid", "by(erule StrongEq_L_subst2_rev, simp,simp)"], ["proof (state)\nthis:\n  ?\\<tau> \\<Turnstile> j \\<triangleq> invalid \\<Longrightarrow>\n  S->including\\<^sub>S\\<^sub>e\\<^sub>t(j)->including\\<^sub>S\\<^sub>e\\<^sub>t(i)\n   ?\\<tau> =\n  invalid ?\\<tau>\n\ngoal (1 subgoal):\n 1. S->including\\<^sub>S\\<^sub>e\\<^sub>t(i)->including\\<^sub>S\\<^sub>e\\<^sub>t(j) =\n    S->including\\<^sub>S\\<^sub>e\\<^sub>t(j)->including\\<^sub>S\\<^sub>e\\<^sub>t(i)", "have C: \"\\<And> \\<tau>.   \\<tau> \\<Turnstile> (S \\<triangleq> invalid)   \\<Longrightarrow> (S->including\\<^sub>S\\<^sub>e\\<^sub>t(i)->including\\<^sub>S\\<^sub>e\\<^sub>t(j)) \\<tau> = invalid \\<tau>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<tau>.\n       \\<tau> \\<Turnstile> S \\<triangleq> invalid \\<Longrightarrow>\n       S->including\\<^sub>S\\<^sub>e\\<^sub>t(i)->including\\<^sub>S\\<^sub>e\\<^sub>t(j)\n        \\<tau> =\n       invalid \\<tau>", "apply(rule foundation22[THEN iffD1])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<tau>.\n       \\<tau> \\<Turnstile> S \\<triangleq> invalid \\<Longrightarrow>\n       \\<tau>\n        \\<Turnstile> S->including\\<^sub>S\\<^sub>e\\<^sub>t(i)->including\\<^sub>S\\<^sub>e\\<^sub>t(j) \\<triangleq>\n                     invalid", "by(erule StrongEq_L_subst2_rev, simp,simp)"], ["proof (state)\nthis:\n  ?\\<tau> \\<Turnstile> S \\<triangleq> invalid \\<Longrightarrow>\n  S->including\\<^sub>S\\<^sub>e\\<^sub>t(i)->including\\<^sub>S\\<^sub>e\\<^sub>t(j)\n   ?\\<tau> =\n  invalid ?\\<tau>\n\ngoal (1 subgoal):\n 1. S->including\\<^sub>S\\<^sub>e\\<^sub>t(i)->including\\<^sub>S\\<^sub>e\\<^sub>t(j) =\n    S->including\\<^sub>S\\<^sub>e\\<^sub>t(j)->including\\<^sub>S\\<^sub>e\\<^sub>t(i)", "have C': \"\\<And> \\<tau>.  \\<tau> \\<Turnstile> (S \\<triangleq> invalid)   \\<Longrightarrow> (S->including\\<^sub>S\\<^sub>e\\<^sub>t(j)->including\\<^sub>S\\<^sub>e\\<^sub>t(i)) \\<tau> = invalid \\<tau>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<tau>.\n       \\<tau> \\<Turnstile> S \\<triangleq> invalid \\<Longrightarrow>\n       S->including\\<^sub>S\\<^sub>e\\<^sub>t(j)->including\\<^sub>S\\<^sub>e\\<^sub>t(i)\n        \\<tau> =\n       invalid \\<tau>", "apply(rule foundation22[THEN iffD1])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<tau>.\n       \\<tau> \\<Turnstile> S \\<triangleq> invalid \\<Longrightarrow>\n       \\<tau>\n        \\<Turnstile> S->including\\<^sub>S\\<^sub>e\\<^sub>t(j)->including\\<^sub>S\\<^sub>e\\<^sub>t(i) \\<triangleq>\n                     invalid", "by(erule StrongEq_L_subst2_rev, simp,simp)"], ["proof (state)\nthis:\n  ?\\<tau> \\<Turnstile> S \\<triangleq> invalid \\<Longrightarrow>\n  S->including\\<^sub>S\\<^sub>e\\<^sub>t(j)->including\\<^sub>S\\<^sub>e\\<^sub>t(i)\n   ?\\<tau> =\n  invalid ?\\<tau>\n\ngoal (1 subgoal):\n 1. S->including\\<^sub>S\\<^sub>e\\<^sub>t(i)->including\\<^sub>S\\<^sub>e\\<^sub>t(j) =\n    S->including\\<^sub>S\\<^sub>e\\<^sub>t(j)->including\\<^sub>S\\<^sub>e\\<^sub>t(i)", "have D: \"\\<And> \\<tau>.   \\<tau> \\<Turnstile> (S \\<triangleq> null)   \\<Longrightarrow> (S->including\\<^sub>S\\<^sub>e\\<^sub>t(i)->including\\<^sub>S\\<^sub>e\\<^sub>t(j)) \\<tau> = invalid \\<tau>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<tau>.\n       \\<tau> \\<Turnstile> S \\<triangleq> null \\<Longrightarrow>\n       S->including\\<^sub>S\\<^sub>e\\<^sub>t(i)->including\\<^sub>S\\<^sub>e\\<^sub>t(j)\n        \\<tau> =\n       invalid \\<tau>", "apply(rule foundation22[THEN iffD1])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<tau>.\n       \\<tau> \\<Turnstile> S \\<triangleq> null \\<Longrightarrow>\n       \\<tau>\n        \\<Turnstile> S->including\\<^sub>S\\<^sub>e\\<^sub>t(i)->including\\<^sub>S\\<^sub>e\\<^sub>t(j) \\<triangleq>\n                     invalid", "by(erule StrongEq_L_subst2_rev, simp,simp)"], ["proof (state)\nthis:\n  ?\\<tau> \\<Turnstile> S \\<triangleq> null \\<Longrightarrow>\n  S->including\\<^sub>S\\<^sub>e\\<^sub>t(i)->including\\<^sub>S\\<^sub>e\\<^sub>t(j)\n   ?\\<tau> =\n  invalid ?\\<tau>\n\ngoal (1 subgoal):\n 1. S->including\\<^sub>S\\<^sub>e\\<^sub>t(i)->including\\<^sub>S\\<^sub>e\\<^sub>t(j) =\n    S->including\\<^sub>S\\<^sub>e\\<^sub>t(j)->including\\<^sub>S\\<^sub>e\\<^sub>t(i)", "have D': \"\\<And> \\<tau>.  \\<tau> \\<Turnstile> (S \\<triangleq> null)   \\<Longrightarrow> (S->including\\<^sub>S\\<^sub>e\\<^sub>t(j)->including\\<^sub>S\\<^sub>e\\<^sub>t(i)) \\<tau> = invalid \\<tau>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<tau>.\n       \\<tau> \\<Turnstile> S \\<triangleq> null \\<Longrightarrow>\n       S->including\\<^sub>S\\<^sub>e\\<^sub>t(j)->including\\<^sub>S\\<^sub>e\\<^sub>t(i)\n        \\<tau> =\n       invalid \\<tau>", "apply(rule foundation22[THEN iffD1])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<tau>.\n       \\<tau> \\<Turnstile> S \\<triangleq> null \\<Longrightarrow>\n       \\<tau>\n        \\<Turnstile> S->including\\<^sub>S\\<^sub>e\\<^sub>t(j)->including\\<^sub>S\\<^sub>e\\<^sub>t(i) \\<triangleq>\n                     invalid", "by(erule StrongEq_L_subst2_rev, simp,simp)"], ["proof (state)\nthis:\n  ?\\<tau> \\<Turnstile> S \\<triangleq> null \\<Longrightarrow>\n  S->including\\<^sub>S\\<^sub>e\\<^sub>t(j)->including\\<^sub>S\\<^sub>e\\<^sub>t(i)\n   ?\\<tau> =\n  invalid ?\\<tau>\n\ngoal (1 subgoal):\n 1. S->including\\<^sub>S\\<^sub>e\\<^sub>t(i)->including\\<^sub>S\\<^sub>e\\<^sub>t(j) =\n    S->including\\<^sub>S\\<^sub>e\\<^sub>t(j)->including\\<^sub>S\\<^sub>e\\<^sub>t(i)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. S->including\\<^sub>S\\<^sub>e\\<^sub>t(i)->including\\<^sub>S\\<^sub>e\\<^sub>t(j) =\n    S->including\\<^sub>S\\<^sub>e\\<^sub>t(j)->including\\<^sub>S\\<^sub>e\\<^sub>t(i)", "apply(rule ext, rename_tac \\<tau>)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<tau>.\n       S->including\\<^sub>S\\<^sub>e\\<^sub>t(i)->including\\<^sub>S\\<^sub>e\\<^sub>t(j)\n        \\<tau> =\n       S->including\\<^sub>S\\<^sub>e\\<^sub>t(j)->including\\<^sub>S\\<^sub>e\\<^sub>t(i)\n        \\<tau>", "apply(case_tac \"\\<tau> \\<Turnstile> (\\<upsilon> i)\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>\\<tau>.\n       \\<tau> \\<Turnstile> \\<upsilon> i \\<Longrightarrow>\n       S->including\\<^sub>S\\<^sub>e\\<^sub>t(i)->including\\<^sub>S\\<^sub>e\\<^sub>t(j)\n        \\<tau> =\n       S->including\\<^sub>S\\<^sub>e\\<^sub>t(j)->including\\<^sub>S\\<^sub>e\\<^sub>t(i)\n        \\<tau>\n 2. \\<And>\\<tau>.\n       \\<tau> |\\<noteq> \\<upsilon> i \\<Longrightarrow>\n       S->including\\<^sub>S\\<^sub>e\\<^sub>t(i)->including\\<^sub>S\\<^sub>e\\<^sub>t(j)\n        \\<tau> =\n       S->including\\<^sub>S\\<^sub>e\\<^sub>t(j)->including\\<^sub>S\\<^sub>e\\<^sub>t(i)\n        \\<tau>", "apply(case_tac \"\\<tau> \\<Turnstile> (\\<upsilon> j)\")"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>\\<tau>.\n       \\<lbrakk>\\<tau> \\<Turnstile> \\<upsilon> i;\n        \\<tau> \\<Turnstile> \\<upsilon> j\\<rbrakk>\n       \\<Longrightarrow> S->including\\<^sub>S\\<^sub>e\\<^sub>t(i)->including\\<^sub>S\\<^sub>e\\<^sub>t(j)\n                          \\<tau> =\n                         S->including\\<^sub>S\\<^sub>e\\<^sub>t(j)->including\\<^sub>S\\<^sub>e\\<^sub>t(i)\n                          \\<tau>\n 2. \\<And>\\<tau>.\n       \\<lbrakk>\\<tau> \\<Turnstile> \\<upsilon> i;\n        \\<tau> |\\<noteq> \\<upsilon> j\\<rbrakk>\n       \\<Longrightarrow> S->including\\<^sub>S\\<^sub>e\\<^sub>t(i)->including\\<^sub>S\\<^sub>e\\<^sub>t(j)\n                          \\<tau> =\n                         S->including\\<^sub>S\\<^sub>e\\<^sub>t(j)->including\\<^sub>S\\<^sub>e\\<^sub>t(i)\n                          \\<tau>\n 3. \\<And>\\<tau>.\n       \\<tau> |\\<noteq> \\<upsilon> i \\<Longrightarrow>\n       S->including\\<^sub>S\\<^sub>e\\<^sub>t(i)->including\\<^sub>S\\<^sub>e\\<^sub>t(j)\n        \\<tau> =\n       S->including\\<^sub>S\\<^sub>e\\<^sub>t(j)->including\\<^sub>S\\<^sub>e\\<^sub>t(i)\n        \\<tau>", "apply(case_tac \"\\<tau> \\<Turnstile> (\\<delta> S)\")"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>\\<tau>.\n       \\<lbrakk>\\<tau> \\<Turnstile> \\<upsilon> i;\n        \\<tau> \\<Turnstile> \\<upsilon> j;\n        \\<tau> \\<Turnstile> \\<delta> S\\<rbrakk>\n       \\<Longrightarrow> S->including\\<^sub>S\\<^sub>e\\<^sub>t(i)->including\\<^sub>S\\<^sub>e\\<^sub>t(j)\n                          \\<tau> =\n                         S->including\\<^sub>S\\<^sub>e\\<^sub>t(j)->including\\<^sub>S\\<^sub>e\\<^sub>t(i)\n                          \\<tau>\n 2. \\<And>\\<tau>.\n       \\<lbrakk>\\<tau> \\<Turnstile> \\<upsilon> i;\n        \\<tau> \\<Turnstile> \\<upsilon> j;\n        \\<tau> |\\<noteq> \\<delta> S\\<rbrakk>\n       \\<Longrightarrow> S->including\\<^sub>S\\<^sub>e\\<^sub>t(i)->including\\<^sub>S\\<^sub>e\\<^sub>t(j)\n                          \\<tau> =\n                         S->including\\<^sub>S\\<^sub>e\\<^sub>t(j)->including\\<^sub>S\\<^sub>e\\<^sub>t(i)\n                          \\<tau>\n 3. \\<And>\\<tau>.\n       \\<lbrakk>\\<tau> \\<Turnstile> \\<upsilon> i;\n        \\<tau> |\\<noteq> \\<upsilon> j\\<rbrakk>\n       \\<Longrightarrow> S->including\\<^sub>S\\<^sub>e\\<^sub>t(i)->including\\<^sub>S\\<^sub>e\\<^sub>t(j)\n                          \\<tau> =\n                         S->including\\<^sub>S\\<^sub>e\\<^sub>t(j)->including\\<^sub>S\\<^sub>e\\<^sub>t(i)\n                          \\<tau>\n 4. \\<And>\\<tau>.\n       \\<tau> |\\<noteq> \\<upsilon> i \\<Longrightarrow>\n       S->including\\<^sub>S\\<^sub>e\\<^sub>t(i)->including\\<^sub>S\\<^sub>e\\<^sub>t(j)\n        \\<tau> =\n       S->including\\<^sub>S\\<^sub>e\\<^sub>t(j)->including\\<^sub>S\\<^sub>e\\<^sub>t(i)\n        \\<tau>", "apply(simp only: OclIncluding_commute0[THEN foundation22[THEN iffD1]])"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>\\<tau>.\n       \\<lbrakk>\\<tau> \\<Turnstile> \\<upsilon> i;\n        \\<tau> \\<Turnstile> \\<upsilon> j;\n        \\<tau> |\\<noteq> \\<delta> S\\<rbrakk>\n       \\<Longrightarrow> S->including\\<^sub>S\\<^sub>e\\<^sub>t(i)->including\\<^sub>S\\<^sub>e\\<^sub>t(j)\n                          \\<tau> =\n                         S->including\\<^sub>S\\<^sub>e\\<^sub>t(j)->including\\<^sub>S\\<^sub>e\\<^sub>t(i)\n                          \\<tau>\n 2. \\<And>\\<tau>.\n       \\<lbrakk>\\<tau> \\<Turnstile> \\<upsilon> i;\n        \\<tau> |\\<noteq> \\<upsilon> j\\<rbrakk>\n       \\<Longrightarrow> S->including\\<^sub>S\\<^sub>e\\<^sub>t(i)->including\\<^sub>S\\<^sub>e\\<^sub>t(j)\n                          \\<tau> =\n                         S->including\\<^sub>S\\<^sub>e\\<^sub>t(j)->including\\<^sub>S\\<^sub>e\\<^sub>t(i)\n                          \\<tau>\n 3. \\<And>\\<tau>.\n       \\<tau> |\\<noteq> \\<upsilon> i \\<Longrightarrow>\n       S->including\\<^sub>S\\<^sub>e\\<^sub>t(i)->including\\<^sub>S\\<^sub>e\\<^sub>t(j)\n        \\<tau> =\n       S->including\\<^sub>S\\<^sub>e\\<^sub>t(j)->including\\<^sub>S\\<^sub>e\\<^sub>t(i)\n        \\<tau>", "apply(simp add: foundation16', elim disjE)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>\\<tau>.\n       \\<lbrakk>\\<tau> \\<Turnstile> \\<upsilon> i;\n        \\<tau> \\<Turnstile> \\<upsilon> j; S \\<tau> = invalid \\<tau>\\<rbrakk>\n       \\<Longrightarrow> S->including\\<^sub>S\\<^sub>e\\<^sub>t(i)->including\\<^sub>S\\<^sub>e\\<^sub>t(j)\n                          \\<tau> =\n                         S->including\\<^sub>S\\<^sub>e\\<^sub>t(j)->including\\<^sub>S\\<^sub>e\\<^sub>t(i)\n                          \\<tau>\n 2. \\<And>\\<tau>.\n       \\<lbrakk>\\<tau> \\<Turnstile> \\<upsilon> i;\n        \\<tau> \\<Turnstile> \\<upsilon> j; S \\<tau> = null \\<tau>\\<rbrakk>\n       \\<Longrightarrow> S->including\\<^sub>S\\<^sub>e\\<^sub>t(i)->including\\<^sub>S\\<^sub>e\\<^sub>t(j)\n                          \\<tau> =\n                         S->including\\<^sub>S\\<^sub>e\\<^sub>t(j)->including\\<^sub>S\\<^sub>e\\<^sub>t(i)\n                          \\<tau>\n 3. \\<And>\\<tau>.\n       \\<lbrakk>\\<tau> \\<Turnstile> \\<upsilon> i;\n        \\<tau> |\\<noteq> \\<upsilon> j\\<rbrakk>\n       \\<Longrightarrow> S->including\\<^sub>S\\<^sub>e\\<^sub>t(i)->including\\<^sub>S\\<^sub>e\\<^sub>t(j)\n                          \\<tau> =\n                         S->including\\<^sub>S\\<^sub>e\\<^sub>t(j)->including\\<^sub>S\\<^sub>e\\<^sub>t(i)\n                          \\<tau>\n 4. \\<And>\\<tau>.\n       \\<tau> |\\<noteq> \\<upsilon> i \\<Longrightarrow>\n       S->including\\<^sub>S\\<^sub>e\\<^sub>t(i)->including\\<^sub>S\\<^sub>e\\<^sub>t(j)\n        \\<tau> =\n       S->including\\<^sub>S\\<^sub>e\\<^sub>t(j)->including\\<^sub>S\\<^sub>e\\<^sub>t(i)\n        \\<tau>", "apply(simp add: C[OF foundation22[THEN iffD2]] C'[OF foundation22[THEN iffD2]])"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>\\<tau>.\n       \\<lbrakk>\\<tau> \\<Turnstile> \\<upsilon> i;\n        \\<tau> \\<Turnstile> \\<upsilon> j; S \\<tau> = null \\<tau>\\<rbrakk>\n       \\<Longrightarrow> S->including\\<^sub>S\\<^sub>e\\<^sub>t(i)->including\\<^sub>S\\<^sub>e\\<^sub>t(j)\n                          \\<tau> =\n                         S->including\\<^sub>S\\<^sub>e\\<^sub>t(j)->including\\<^sub>S\\<^sub>e\\<^sub>t(i)\n                          \\<tau>\n 2. \\<And>\\<tau>.\n       \\<lbrakk>\\<tau> \\<Turnstile> \\<upsilon> i;\n        \\<tau> |\\<noteq> \\<upsilon> j\\<rbrakk>\n       \\<Longrightarrow> S->including\\<^sub>S\\<^sub>e\\<^sub>t(i)->including\\<^sub>S\\<^sub>e\\<^sub>t(j)\n                          \\<tau> =\n                         S->including\\<^sub>S\\<^sub>e\\<^sub>t(j)->including\\<^sub>S\\<^sub>e\\<^sub>t(i)\n                          \\<tau>\n 3. \\<And>\\<tau>.\n       \\<tau> |\\<noteq> \\<upsilon> i \\<Longrightarrow>\n       S->including\\<^sub>S\\<^sub>e\\<^sub>t(i)->including\\<^sub>S\\<^sub>e\\<^sub>t(j)\n        \\<tau> =\n       S->including\\<^sub>S\\<^sub>e\\<^sub>t(j)->including\\<^sub>S\\<^sub>e\\<^sub>t(i)\n        \\<tau>", "apply(simp add: D[OF foundation22[THEN iffD2]] D'[OF foundation22[THEN iffD2]])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>\\<tau>.\n       \\<lbrakk>\\<tau> \\<Turnstile> \\<upsilon> i;\n        \\<tau> |\\<noteq> \\<upsilon> j\\<rbrakk>\n       \\<Longrightarrow> S->including\\<^sub>S\\<^sub>e\\<^sub>t(i)->including\\<^sub>S\\<^sub>e\\<^sub>t(j)\n                          \\<tau> =\n                         S->including\\<^sub>S\\<^sub>e\\<^sub>t(j)->including\\<^sub>S\\<^sub>e\\<^sub>t(i)\n                          \\<tau>\n 2. \\<And>\\<tau>.\n       \\<tau> |\\<noteq> \\<upsilon> i \\<Longrightarrow>\n       S->including\\<^sub>S\\<^sub>e\\<^sub>t(i)->including\\<^sub>S\\<^sub>e\\<^sub>t(j)\n        \\<tau> =\n       S->including\\<^sub>S\\<^sub>e\\<^sub>t(j)->including\\<^sub>S\\<^sub>e\\<^sub>t(i)\n        \\<tau>", "apply(simp add:foundation18 B[OF foundation22[THEN iffD2]] B'[OF foundation22[THEN iffD2]])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<tau>.\n       \\<tau> |\\<noteq> \\<upsilon> i \\<Longrightarrow>\n       S->including\\<^sub>S\\<^sub>e\\<^sub>t(i)->including\\<^sub>S\\<^sub>e\\<^sub>t(j)\n        \\<tau> =\n       S->including\\<^sub>S\\<^sub>e\\<^sub>t(j)->including\\<^sub>S\\<^sub>e\\<^sub>t(i)\n        \\<tau>", "apply(simp add:foundation18 A[OF foundation22[THEN iffD2]] A'[OF foundation22[THEN iffD2]])"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  S->including\\<^sub>S\\<^sub>e\\<^sub>t(i)->including\\<^sub>S\\<^sub>e\\<^sub>t(j) =\n  S->including\\<^sub>S\\<^sub>e\\<^sub>t(j)->including\\<^sub>S\\<^sub>e\\<^sub>t(i)\n\ngoal:\nNo subgoals!", "qed"], ["", "subsubsection\\<open>Execution Rules on Excluding\\<close>"], ["", "lemma OclExcluding_finite_rep_set :\n  assumes X_def : \"\\<tau> \\<Turnstile> \\<delta> X\"\n      and x_val : \"\\<tau> \\<Turnstile> \\<upsilon> x\"\n    shows \"finite \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e (X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(x) \\<tau>)\\<rceil>\\<rceil> = finite \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e (X \\<tau>)\\<rceil>\\<rceil>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite\n     \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                      (X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(x)\n                        \\<tau>)\\<rceil>\\<rceil> =\n    finite\n     \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                      (X \\<tau>)\\<rceil>\\<rceil>", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. finite\n     \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                      (X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(x)\n                        \\<tau>)\\<rceil>\\<rceil> =\n    finite\n     \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                      (X \\<tau>)\\<rceil>\\<rceil>", "have C : \"\\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e (X \\<tau>)\\<rceil>\\<rceil> - {x \\<tau>}\\<rfloor>\\<rfloor> \\<in> {X. X = bot \\<or> X = null \\<or> (\\<forall>x\\<in>\\<lceil>\\<lceil>X\\<rceil>\\<rceil>. x \\<noteq> bot)}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n (X \\<tau>)\\<rceil>\\<rceil> -\n                      {x \\<tau>}\\<rfloor>\\<rfloor>\n    \\<in> {X. X = \\<bottom> \\<or>\n              X = null \\<or>\n              (\\<forall>x\\<in>\\<lceil>\\<lceil>X\\<rceil>\\<rceil>.\n                  x \\<noteq> \\<bottom>)}", "apply(insert X_def x_val, frule Set_inv_lemma)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<tau> \\<Turnstile> \\<delta> X;\n     \\<tau> \\<Turnstile> \\<upsilon> x;\n     \\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                     (X \\<tau>)\\<rceil>\\<rceil>.\n        x \\<noteq> \\<bottom>\\<rbrakk>\n    \\<Longrightarrow> \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                   (X \\<tau>)\\<rceil>\\<rceil> -\n  {x \\<tau>}\\<rfloor>\\<rfloor>\n                      \\<in> {X. X = \\<bottom> \\<or>\n                                X = null \\<or>\n                                (\\<forall>x\n    \\<in>\\<lceil>\\<lceil>X\\<rceil>\\<rceil>.\n                                    x \\<noteq> \\<bottom>)}", "apply(simp add: foundation18 invalid_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                     (X \\<tau>)\\<rceil>\\<rceil> -\n                    {x \\<tau>}\\<rfloor>\\<rfloor>\n  \\<in> {X. X = \\<bottom> \\<or>\n            X = null \\<or>\n            (\\<forall>x\\<in>\\<lceil>\\<lceil>X\\<rceil>\\<rceil>.\n                x \\<noteq> \\<bottom>)}\n\ngoal (1 subgoal):\n 1. finite\n     \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                      (X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(x)\n                        \\<tau>)\\<rceil>\\<rceil> =\n    finite\n     \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                      (X \\<tau>)\\<rceil>\\<rceil>", "show \"?thesis\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite\n     \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                      (X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(x)\n                        \\<tau>)\\<rceil>\\<rceil> =\n    finite\n     \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                      (X \\<tau>)\\<rceil>\\<rceil>", "by(insert X_def x_val,\n     auto simp: OclExcluding_def Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e_inverse[OF C]\n          dest: foundation13[THEN iffD2, THEN foundation22[THEN iffD1]])"], ["proof (state)\nthis:\n  finite\n   \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                    (X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(x)\n                      \\<tau>)\\<rceil>\\<rceil> =\n  finite\n   \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                    (X \\<tau>)\\<rceil>\\<rceil>\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma OclExcluding_rep_set:\n assumes S_def: \"\\<tau> \\<Turnstile> \\<delta> S\"\n   shows \"\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e (S->excluding\\<^sub>S\\<^sub>e\\<^sub>t(\\<lambda>_. \\<lfloor>\\<lfloor>x\\<rfloor>\\<rfloor>) \\<tau>)\\<rceil>\\<rceil> = \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e (S \\<tau>)\\<rceil>\\<rceil> - {\\<lfloor>\\<lfloor>x\\<rfloor>\\<rfloor>}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                     (S->excluding\\<^sub>S\\<^sub>e\\<^sub>t(\\<lambda>_.\n                        \\<lfloor>\\<lfloor>x\\<rfloor>\\<rfloor>)\n                       \\<tau>)\\<rceil>\\<rceil> =\n    \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                     (S \\<tau>)\\<rceil>\\<rceil> -\n    {\\<lfloor>\\<lfloor>x\\<rfloor>\\<rfloor>}", "apply(simp add: OclExcluding_def S_def[simplified OclValid_def])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                     (Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                       \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                    (S \\<tau>)\\<rceil>\\<rceil> -\n   {\\<lfloor>\\<lfloor>x\\<rfloor>\\<rfloor>}\\<rfloor>\\<rfloor>)\\<rceil>\\<rceil> =\n    \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                     (S \\<tau>)\\<rceil>\\<rceil> -\n    {\\<lfloor>\\<lfloor>x\\<rfloor>\\<rfloor>}", "apply(subst Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e_inverse, simp add: bot_option_def null_option_def)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                    (S \\<tau>)\\<rceil>\\<rceil> -\n                   {\\<lfloor>\\<lfloor>x\\<rfloor>\\<rfloor>}.\n       \\<exists>y. x = \\<lfloor>y\\<rfloor>\n 2. \\<lceil>\\<lceil>\\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                 (S \\<tau>)\\<rceil>\\<rceil> -\n{\\<lfloor>\\<lfloor>x\\<rfloor>\\<rfloor>}\\<rfloor>\\<rfloor>\\<rceil>\\<rceil> =\n    \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                     (S \\<tau>)\\<rceil>\\<rceil> -\n    {\\<lfloor>\\<lfloor>x\\<rfloor>\\<rfloor>}", "apply(insert Set_inv_lemma[OF S_def], metis Diff_iff bot_option_def not_None_eq)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                    (S \\<tau>)\\<rceil>\\<rceil>.\n       x \\<noteq> \\<bottom> \\<Longrightarrow>\n    \\<lceil>\\<lceil>\\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                 (S \\<tau>)\\<rceil>\\<rceil> -\n{\\<lfloor>\\<lfloor>x\\<rfloor>\\<rfloor>}\\<rfloor>\\<rfloor>\\<rceil>\\<rceil> =\n    \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                     (S \\<tau>)\\<rceil>\\<rceil> -\n    {\\<lfloor>\\<lfloor>x\\<rfloor>\\<rfloor>}", "by(simp)"], ["", "lemma OclExcluding_excludes0:\n assumes \"\\<tau> \\<Turnstile> X->excludes\\<^sub>S\\<^sub>e\\<^sub>t(x)\"\n   shows \"X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(x) \\<tau> = X \\<tau>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(x) \\<tau> = X \\<tau>", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(x) \\<tau> = X \\<tau>", "have excludes_def: \"\\<tau> \\<Turnstile> X->excludes\\<^sub>S\\<^sub>e\\<^sub>t(x) \\<Longrightarrow> \\<tau> \\<Turnstile> \\<delta> X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<tau>\n     \\<Turnstile> X->excludes\\<^sub>S\\<^sub>e\\<^sub>t(x) \\<Longrightarrow>\n    \\<tau> \\<Turnstile> \\<delta> X", "by (metis OclExcludes.def_valid_then_def OclExcludes_valid_args_valid'' foundation10' foundation6)"], ["proof (state)\nthis:\n  \\<tau>\n   \\<Turnstile> X->excludes\\<^sub>S\\<^sub>e\\<^sub>t(x) \\<Longrightarrow>\n  \\<tau> \\<Turnstile> \\<delta> X\n\ngoal (1 subgoal):\n 1. X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(x) \\<tau> = X \\<tau>", "have excludes_val: \"\\<tau> \\<Turnstile> X->excludes\\<^sub>S\\<^sub>e\\<^sub>t(x) \\<Longrightarrow> \\<tau> \\<Turnstile> \\<upsilon> x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<tau>\n     \\<Turnstile> X->excludes\\<^sub>S\\<^sub>e\\<^sub>t(x) \\<Longrightarrow>\n    \\<tau> \\<Turnstile> \\<upsilon> x", "by (metis OclExcludes.def_valid_then_def OclExcludes_valid_args_valid'' foundation10' foundation6)"], ["proof (state)\nthis:\n  \\<tau>\n   \\<Turnstile> X->excludes\\<^sub>S\\<^sub>e\\<^sub>t(x) \\<Longrightarrow>\n  \\<tau> \\<Turnstile> \\<upsilon> x\n\ngoal (1 subgoal):\n 1. X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(x) \\<tau> = X \\<tau>", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(x) \\<tau> = X \\<tau>", "apply(insert excludes_def[OF assms] excludes_val[OF assms] assms,\n        simp add: OclExcluding_def OclExcludes_def OclIncludes_def OclNot_def OclValid_def true_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>(\\<delta> X) \\<tau> = \\<lfloor>\\<lfloor>True\\<rfloor>\\<rfloor>;\n     (\\<upsilon> x) \\<tau> = \\<lfloor>\\<lfloor>True\\<rfloor>\\<rfloor>;\n     x \\<tau>\n     \\<notin> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                               (X \\<tau>)\\<rceil>\\<rceil>\\<rbrakk>\n    \\<Longrightarrow> Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                       \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                    (X \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor> =\n                      X \\<tau>", "by (metis (hide_lams, no_types) abs_rep_simp' assms excludes_def)"], ["proof (state)\nthis:\n  X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(x) \\<tau> = X \\<tau>\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma OclExcluding_excludes:\n assumes \"\\<tau> \\<Turnstile> X->excludes\\<^sub>S\\<^sub>e\\<^sub>t(x)\"\n   shows \"\\<tau> \\<Turnstile> X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(x) \\<triangleq> X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<tau>\n     \\<Turnstile> X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(x) \\<triangleq> X", "by(simp add: StrongEq_def OclValid_def true_def OclExcluding_excludes0[OF assms])"], ["", "lemma OclExcluding_charn0[simp]:\nassumes val_x:\"\\<tau> \\<Turnstile> (\\<upsilon> x)\"\nshows         \"\\<tau> \\<Turnstile> ((Set{}->excluding\\<^sub>S\\<^sub>e\\<^sub>t(x))  \\<triangleq>  Set{})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<tau>\n     \\<Turnstile> Set{}->excluding\\<^sub>S\\<^sub>e\\<^sub>t(x) \\<triangleq>\n                  Set{}", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<tau>\n     \\<Turnstile> Set{}->excluding\\<^sub>S\\<^sub>e\\<^sub>t(x) \\<triangleq>\n                  Set{}", "have A : \"\\<lfloor>None\\<rfloor> \\<in> {X. X = bot \\<or> X = null \\<or> (\\<forall>x\\<in>\\<lceil>\\<lceil>X\\<rceil>\\<rceil>. x \\<noteq> bot)}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lfloor>None\\<rfloor>\n    \\<in> {X. X = \\<bottom> \\<or>\n              X = null \\<or>\n              (\\<forall>x\\<in>\\<lceil>\\<lceil>X\\<rceil>\\<rceil>.\n                  x \\<noteq> \\<bottom>)}", "by(simp add: null_option_def bot_option_def)"], ["proof (state)\nthis:\n  \\<lfloor>None\\<rfloor>\n  \\<in> {X. X = \\<bottom> \\<or>\n            X = null \\<or>\n            (\\<forall>x\\<in>\\<lceil>\\<lceil>X\\<rceil>\\<rceil>.\n                x \\<noteq> \\<bottom>)}\n\ngoal (1 subgoal):\n 1. \\<tau>\n     \\<Turnstile> Set{}->excluding\\<^sub>S\\<^sub>e\\<^sub>t(x) \\<triangleq>\n                  Set{}", "have B : \"\\<lfloor>\\<lfloor>{}\\<rfloor>\\<rfloor> \\<in> {X. X = bot \\<or> X = null \\<or> (\\<forall>x\\<in>\\<lceil>\\<lceil>X\\<rceil>\\<rceil>. x \\<noteq> bot)}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lfloor>\\<lfloor>{}\\<rfloor>\\<rfloor>\n    \\<in> {X. X = \\<bottom> \\<or>\n              X = null \\<or>\n              (\\<forall>x\\<in>\\<lceil>\\<lceil>X\\<rceil>\\<rceil>.\n                  x \\<noteq> \\<bottom>)}", "by(simp add: mtSet_def)"], ["proof (state)\nthis:\n  \\<lfloor>\\<lfloor>{}\\<rfloor>\\<rfloor>\n  \\<in> {X. X = \\<bottom> \\<or>\n            X = null \\<or>\n            (\\<forall>x\\<in>\\<lceil>\\<lceil>X\\<rceil>\\<rceil>.\n                x \\<noteq> \\<bottom>)}\n\ngoal (1 subgoal):\n 1. \\<tau>\n     \\<Turnstile> Set{}->excluding\\<^sub>S\\<^sub>e\\<^sub>t(x) \\<triangleq>\n                  Set{}", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<tau>\n     \\<Turnstile> Set{}->excluding\\<^sub>S\\<^sub>e\\<^sub>t(x) \\<triangleq>\n                  Set{}", "using val_x"], ["proof (prove)\nusing this:\n  \\<tau> \\<Turnstile> \\<upsilon> x\n\ngoal (1 subgoal):\n 1. \\<tau>\n     \\<Turnstile> Set{}->excluding\\<^sub>S\\<^sub>e\\<^sub>t(x) \\<triangleq>\n                  Set{}", "apply(auto simp: OclValid_def OclIncludes_def OclNot_def false_def true_def StrongEq_def\n                     OclExcluding_def mtSet_def defined_def bot_fun_def null_fun_def null_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e_def)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>(\\<upsilon> x) \\<tau> =\n             \\<lfloor>\\<lfloor>True\\<rfloor>\\<rfloor>;\n     Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n      \\<lfloor>\\<lfloor>{}\\<rfloor>\\<rfloor> =\n     Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e \\<lfloor>None\\<rfloor>\\<rbrakk>\n    \\<Longrightarrow> \\<bottom> =\n                      Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                       \\<lfloor>None\\<rfloor>\n 2. \\<lbrakk>(\\<upsilon> x) \\<tau> =\n             \\<lfloor>\\<lfloor>True\\<rfloor>\\<rfloor>;\n     Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n      \\<lfloor>\\<lfloor>{}\\<rfloor>\\<rfloor> \\<noteq>\n     \\<bottom>;\n     Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n      \\<lfloor>\\<lfloor>{}\\<rfloor>\\<rfloor> \\<noteq>\n     Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e \\<lfloor>None\\<rfloor>\\<rbrakk>\n    \\<Longrightarrow> Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                       \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                    (Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                      \\<lfloor>\\<lfloor>{}\\<rfloor>\\<rfloor>)\\<rceil>\\<rceil> -\n   {x \\<tau>}\\<rfloor>\\<rfloor> =\n                      Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                       \\<lfloor>\\<lfloor>{}\\<rfloor>\\<rfloor>", "apply(auto simp: mtSet_def Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e.Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e_inverse\n                      Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e.Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e_inject[OF B A])"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  \\<tau>\n   \\<Turnstile> Set{}->excluding\\<^sub>S\\<^sub>e\\<^sub>t(x) \\<triangleq>\n                Set{}\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma OclExcluding_commute0 :\n assumes S_def : \"\\<tau> \\<Turnstile> \\<delta> S\"\n     and i_val : \"\\<tau> \\<Turnstile> \\<upsilon> i\"\n     and j_val : \"\\<tau> \\<Turnstile> \\<upsilon> j\"\n   shows \"\\<tau> \\<Turnstile> ((S :: ('\\<AA>, 'a::null) Set)->excluding\\<^sub>S\\<^sub>e\\<^sub>t(i)->excluding\\<^sub>S\\<^sub>e\\<^sub>t(j) \\<triangleq> (S->excluding\\<^sub>S\\<^sub>e\\<^sub>t(j)->excluding\\<^sub>S\\<^sub>e\\<^sub>t(i)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<tau>\n     \\<Turnstile> S->excluding\\<^sub>S\\<^sub>e\\<^sub>t(i)->excluding\\<^sub>S\\<^sub>e\\<^sub>t(j) \\<triangleq>\n                  S->excluding\\<^sub>S\\<^sub>e\\<^sub>t(j)->excluding\\<^sub>S\\<^sub>e\\<^sub>t(i)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<tau>\n     \\<Turnstile> S->excluding\\<^sub>S\\<^sub>e\\<^sub>t(i)->excluding\\<^sub>S\\<^sub>e\\<^sub>t(j) \\<triangleq>\n                  S->excluding\\<^sub>S\\<^sub>e\\<^sub>t(j)->excluding\\<^sub>S\\<^sub>e\\<^sub>t(i)", "have A : \"\\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e (S \\<tau>)\\<rceil>\\<rceil> - {i \\<tau>}\\<rfloor>\\<rfloor> \\<in> {X. X = bot \\<or> X = null \\<or> (\\<forall>x\\<in>\\<lceil>\\<lceil>X\\<rceil>\\<rceil>. x \\<noteq> bot)}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n (S \\<tau>)\\<rceil>\\<rceil> -\n                      {i \\<tau>}\\<rfloor>\\<rfloor>\n    \\<in> {X. X = \\<bottom> \\<or>\n              X = null \\<or>\n              (\\<forall>x\\<in>\\<lceil>\\<lceil>X\\<rceil>\\<rceil>.\n                  x \\<noteq> \\<bottom>)}", "by(insert S_def i_val, frule Set_inv_lemma, simp add: foundation18 invalid_def)"], ["proof (state)\nthis:\n  \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                     (S \\<tau>)\\<rceil>\\<rceil> -\n                    {i \\<tau>}\\<rfloor>\\<rfloor>\n  \\<in> {X. X = \\<bottom> \\<or>\n            X = null \\<or>\n            (\\<forall>x\\<in>\\<lceil>\\<lceil>X\\<rceil>\\<rceil>.\n                x \\<noteq> \\<bottom>)}\n\ngoal (1 subgoal):\n 1. \\<tau>\n     \\<Turnstile> S->excluding\\<^sub>S\\<^sub>e\\<^sub>t(i)->excluding\\<^sub>S\\<^sub>e\\<^sub>t(j) \\<triangleq>\n                  S->excluding\\<^sub>S\\<^sub>e\\<^sub>t(j)->excluding\\<^sub>S\\<^sub>e\\<^sub>t(i)", "have B : \"\\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e (S \\<tau>)\\<rceil>\\<rceil> - {j \\<tau>}\\<rfloor>\\<rfloor> \\<in> {X. X = bot \\<or> X = null \\<or> (\\<forall>x\\<in>\\<lceil>\\<lceil>X\\<rceil>\\<rceil>. x \\<noteq> bot)}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n (S \\<tau>)\\<rceil>\\<rceil> -\n                      {j \\<tau>}\\<rfloor>\\<rfloor>\n    \\<in> {X. X = \\<bottom> \\<or>\n              X = null \\<or>\n              (\\<forall>x\\<in>\\<lceil>\\<lceil>X\\<rceil>\\<rceil>.\n                  x \\<noteq> \\<bottom>)}", "by(insert S_def j_val, frule Set_inv_lemma, simp add: foundation18 invalid_def)"], ["proof (state)\nthis:\n  \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                     (S \\<tau>)\\<rceil>\\<rceil> -\n                    {j \\<tau>}\\<rfloor>\\<rfloor>\n  \\<in> {X. X = \\<bottom> \\<or>\n            X = null \\<or>\n            (\\<forall>x\\<in>\\<lceil>\\<lceil>X\\<rceil>\\<rceil>.\n                x \\<noteq> \\<bottom>)}\n\ngoal (1 subgoal):\n 1. \\<tau>\n     \\<Turnstile> S->excluding\\<^sub>S\\<^sub>e\\<^sub>t(i)->excluding\\<^sub>S\\<^sub>e\\<^sub>t(j) \\<triangleq>\n                  S->excluding\\<^sub>S\\<^sub>e\\<^sub>t(j)->excluding\\<^sub>S\\<^sub>e\\<^sub>t(i)", "have G1 : \"Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e (S \\<tau>)\\<rceil>\\<rceil> - {i \\<tau>}\\<rfloor>\\<rfloor> \\<noteq> Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e None\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n     \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n  (S \\<tau>)\\<rceil>\\<rceil> -\n                       {i \\<tau>}\\<rfloor>\\<rfloor> \\<noteq>\n    Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e None", "by(insert A, simp add: Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e_inject bot_option_def null_option_def)"], ["proof (state)\nthis:\n  Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n   \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n(S \\<tau>)\\<rceil>\\<rceil> -\n                     {i \\<tau>}\\<rfloor>\\<rfloor> \\<noteq>\n  Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e None\n\ngoal (1 subgoal):\n 1. \\<tau>\n     \\<Turnstile> S->excluding\\<^sub>S\\<^sub>e\\<^sub>t(i)->excluding\\<^sub>S\\<^sub>e\\<^sub>t(j) \\<triangleq>\n                  S->excluding\\<^sub>S\\<^sub>e\\<^sub>t(j)->excluding\\<^sub>S\\<^sub>e\\<^sub>t(i)", "have G2 : \"Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e (S \\<tau>)\\<rceil>\\<rceil> - {i \\<tau>}\\<rfloor>\\<rfloor> \\<noteq> Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e \\<lfloor>None\\<rfloor>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n     \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n  (S \\<tau>)\\<rceil>\\<rceil> -\n                       {i \\<tau>}\\<rfloor>\\<rfloor> \\<noteq>\n    Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e \\<lfloor>None\\<rfloor>", "by(insert A, simp add: Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e_inject bot_option_def null_option_def)"], ["proof (state)\nthis:\n  Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n   \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n(S \\<tau>)\\<rceil>\\<rceil> -\n                     {i \\<tau>}\\<rfloor>\\<rfloor> \\<noteq>\n  Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e \\<lfloor>None\\<rfloor>\n\ngoal (1 subgoal):\n 1. \\<tau>\n     \\<Turnstile> S->excluding\\<^sub>S\\<^sub>e\\<^sub>t(i)->excluding\\<^sub>S\\<^sub>e\\<^sub>t(j) \\<triangleq>\n                  S->excluding\\<^sub>S\\<^sub>e\\<^sub>t(j)->excluding\\<^sub>S\\<^sub>e\\<^sub>t(i)", "have G3 : \"Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e (S \\<tau>)\\<rceil>\\<rceil> - {j \\<tau>}\\<rfloor>\\<rfloor> \\<noteq> Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e None\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n     \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n  (S \\<tau>)\\<rceil>\\<rceil> -\n                       {j \\<tau>}\\<rfloor>\\<rfloor> \\<noteq>\n    Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e None", "by(insert B, simp add: Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e_inject bot_option_def null_option_def)"], ["proof (state)\nthis:\n  Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n   \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n(S \\<tau>)\\<rceil>\\<rceil> -\n                     {j \\<tau>}\\<rfloor>\\<rfloor> \\<noteq>\n  Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e None\n\ngoal (1 subgoal):\n 1. \\<tau>\n     \\<Turnstile> S->excluding\\<^sub>S\\<^sub>e\\<^sub>t(i)->excluding\\<^sub>S\\<^sub>e\\<^sub>t(j) \\<triangleq>\n                  S->excluding\\<^sub>S\\<^sub>e\\<^sub>t(j)->excluding\\<^sub>S\\<^sub>e\\<^sub>t(i)", "have G4 : \"Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e (S \\<tau>)\\<rceil>\\<rceil> - {j \\<tau>}\\<rfloor>\\<rfloor> \\<noteq> Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e \\<lfloor>None\\<rfloor>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n     \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n  (S \\<tau>)\\<rceil>\\<rceil> -\n                       {j \\<tau>}\\<rfloor>\\<rfloor> \\<noteq>\n    Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e \\<lfloor>None\\<rfloor>", "by(insert B, simp add: Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e_inject bot_option_def null_option_def)"], ["proof (state)\nthis:\n  Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n   \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n(S \\<tau>)\\<rceil>\\<rceil> -\n                     {j \\<tau>}\\<rfloor>\\<rfloor> \\<noteq>\n  Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e \\<lfloor>None\\<rfloor>\n\ngoal (1 subgoal):\n 1. \\<tau>\n     \\<Turnstile> S->excluding\\<^sub>S\\<^sub>e\\<^sub>t(i)->excluding\\<^sub>S\\<^sub>e\\<^sub>t(j) \\<triangleq>\n                  S->excluding\\<^sub>S\\<^sub>e\\<^sub>t(j)->excluding\\<^sub>S\\<^sub>e\\<^sub>t(i)", "have *   : \"(\\<delta> (\\<lambda>_. Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e (S \\<tau>)\\<rceil>\\<rceil> - {i \\<tau>}\\<rfloor>\\<rfloor>)) \\<tau> = \\<lfloor>\\<lfloor>True\\<rfloor>\\<rfloor>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<delta> (\\<lambda>_.\n                  Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                   \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                (S \\<tau>)\\<rceil>\\<rceil> -\n                                     {i \\<tau>}\\<rfloor>\\<rfloor>))\n     \\<tau> =\n    \\<lfloor>\\<lfloor>True\\<rfloor>\\<rfloor>", "by(auto simp: OclValid_def false_def  defined_def null_fun_def  true_def\n                              bot_fun_def bot_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e_def  null_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e_def S_def i_val G1 G2)"], ["proof (state)\nthis:\n  (\\<delta> (\\<lambda>_.\n                Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                 \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n              (S \\<tau>)\\<rceil>\\<rceil> -\n                                   {i \\<tau>}\\<rfloor>\\<rfloor>))\n   \\<tau> =\n  \\<lfloor>\\<lfloor>True\\<rfloor>\\<rfloor>\n\ngoal (1 subgoal):\n 1. \\<tau>\n     \\<Turnstile> S->excluding\\<^sub>S\\<^sub>e\\<^sub>t(i)->excluding\\<^sub>S\\<^sub>e\\<^sub>t(j) \\<triangleq>\n                  S->excluding\\<^sub>S\\<^sub>e\\<^sub>t(j)->excluding\\<^sub>S\\<^sub>e\\<^sub>t(i)", "have **  : \"(\\<delta> (\\<lambda>_. Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e (S \\<tau>)\\<rceil>\\<rceil> - {j \\<tau>}\\<rfloor>\\<rfloor>)) \\<tau> = \\<lfloor>\\<lfloor>True\\<rfloor>\\<rfloor>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<delta> (\\<lambda>_.\n                  Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                   \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                (S \\<tau>)\\<rceil>\\<rceil> -\n                                     {j \\<tau>}\\<rfloor>\\<rfloor>))\n     \\<tau> =\n    \\<lfloor>\\<lfloor>True\\<rfloor>\\<rfloor>", "by(auto simp: OclValid_def false_def  defined_def null_fun_def  true_def\n                              bot_fun_def bot_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e_def  null_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e_def S_def i_val G3 G4)"], ["proof (state)\nthis:\n  (\\<delta> (\\<lambda>_.\n                Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                 \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n              (S \\<tau>)\\<rceil>\\<rceil> -\n                                   {j \\<tau>}\\<rfloor>\\<rfloor>))\n   \\<tau> =\n  \\<lfloor>\\<lfloor>True\\<rfloor>\\<rfloor>\n\ngoal (1 subgoal):\n 1. \\<tau>\n     \\<Turnstile> S->excluding\\<^sub>S\\<^sub>e\\<^sub>t(i)->excluding\\<^sub>S\\<^sub>e\\<^sub>t(j) \\<triangleq>\n                  S->excluding\\<^sub>S\\<^sub>e\\<^sub>t(j)->excluding\\<^sub>S\\<^sub>e\\<^sub>t(i)", "have *** : \"Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e(Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e(S \\<tau>)\\<rceil>\\<rceil>-{i \\<tau>}\\<rfloor>\\<rfloor>)\\<rceil>\\<rceil>-{j \\<tau>}\\<rfloor>\\<rfloor> =\n              Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e(Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e(S \\<tau>)\\<rceil>\\<rceil>-{j \\<tau>}\\<rfloor>\\<rfloor>)\\<rceil>\\<rceil>-{i \\<tau>}\\<rfloor>\\<rfloor>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n     \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n  (Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n    \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n (S \\<tau>)\\<rceil>\\<rceil> -\n                      {i \\<tau>}\\<rfloor>\\<rfloor>)\\<rceil>\\<rceil> -\n                       {j \\<tau>}\\<rfloor>\\<rfloor> =\n    Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n     \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n  (Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n    \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n (S \\<tau>)\\<rceil>\\<rceil> -\n                      {j \\<tau>}\\<rfloor>\\<rfloor>)\\<rceil>\\<rceil> -\n                       {i \\<tau>}\\<rfloor>\\<rfloor>", "apply(simp add: Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e_inverse[OF A] Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e_inverse[OF B])"], ["proof (prove)\ngoal (1 subgoal):\n 1. Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n     \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n  (S \\<tau>)\\<rceil>\\<rceil> -\n                       {i \\<tau>} -\n                       {j \\<tau>}\\<rfloor>\\<rfloor> =\n    Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n     \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n  (S \\<tau>)\\<rceil>\\<rceil> -\n                       {j \\<tau>} -\n                       {i \\<tau>}\\<rfloor>\\<rfloor>", "by (metis Diff_insert2 insert_commute)"], ["proof (state)\nthis:\n  Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n   \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n(Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n  \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                     (S \\<tau>)\\<rceil>\\<rceil> -\n                    {i \\<tau>}\\<rfloor>\\<rfloor>)\\<rceil>\\<rceil> -\n                     {j \\<tau>}\\<rfloor>\\<rfloor> =\n  Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n   \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n(Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n  \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                     (S \\<tau>)\\<rceil>\\<rceil> -\n                    {j \\<tau>}\\<rfloor>\\<rfloor>)\\<rceil>\\<rceil> -\n                     {i \\<tau>}\\<rfloor>\\<rfloor>\n\ngoal (1 subgoal):\n 1. \\<tau>\n     \\<Turnstile> S->excluding\\<^sub>S\\<^sub>e\\<^sub>t(i)->excluding\\<^sub>S\\<^sub>e\\<^sub>t(j) \\<triangleq>\n                  S->excluding\\<^sub>S\\<^sub>e\\<^sub>t(j)->excluding\\<^sub>S\\<^sub>e\\<^sub>t(i)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<tau>\n     \\<Turnstile> S->excluding\\<^sub>S\\<^sub>e\\<^sub>t(i)->excluding\\<^sub>S\\<^sub>e\\<^sub>t(j) \\<triangleq>\n                  S->excluding\\<^sub>S\\<^sub>e\\<^sub>t(j)->excluding\\<^sub>S\\<^sub>e\\<^sub>t(i)", "apply(simp add: OclExcluding_def S_def[simplified OclValid_def]\n                  i_val[simplified OclValid_def] j_val[simplified OclValid_def]\n                  true_def OclValid_def StrongEq_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. ((\\<delta> (\\<lambda>\\<tau>.\n                   if (\\<delta> S) \\<tau> =\n                      \\<lfloor>\\<lfloor>True\\<rfloor>\\<rfloor> \\<and>\n                      (\\<upsilon> i) \\<tau> =\n                      \\<lfloor>\\<lfloor>True\\<rfloor>\\<rfloor>\n                   then Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                         \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                      (S \\<tau>)\\<rceil>\\<rceil> -\n     {i \\<tau>}\\<rfloor>\\<rfloor>\n                   else \\<bottom>))\n      \\<tau> =\n     \\<lfloor>\\<lfloor>True\\<rfloor>\\<rfloor> \\<longrightarrow>\n     ((\\<delta> (\\<lambda>\\<tau>.\n                    if (\\<delta> S) \\<tau> =\n                       \\<lfloor>\\<lfloor>True\\<rfloor>\\<rfloor> \\<and>\n                       (\\<upsilon> j) \\<tau> =\n                       \\<lfloor>\\<lfloor>True\\<rfloor>\\<rfloor>\n                    then Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                          \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                       (S \\<tau>)\\<rceil>\\<rceil> -\n      {j \\<tau>}\\<rfloor>\\<rfloor>\n                    else \\<bottom>))\n       \\<tau> =\n      \\<lfloor>\\<lfloor>True\\<rfloor>\\<rfloor> \\<longrightarrow>\n      Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n       \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n    (Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n      \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n   (S \\<tau>)\\<rceil>\\<rceil> -\n                        {i \\<tau>}\\<rfloor>\\<rfloor>)\\<rceil>\\<rceil> -\n                         {j \\<tau>}\\<rfloor>\\<rfloor> =\n      Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n       \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n    (Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n      \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n   (S \\<tau>)\\<rceil>\\<rceil> -\n                        {j \\<tau>}\\<rfloor>\\<rfloor>)\\<rceil>\\<rceil> -\n                         {i \\<tau>}\\<rfloor>\\<rfloor>) \\<and>\n     ((\\<delta> (\\<lambda>\\<tau>.\n                    if (\\<delta> S) \\<tau> =\n                       \\<lfloor>\\<lfloor>True\\<rfloor>\\<rfloor> \\<and>\n                       (\\<upsilon> j) \\<tau> =\n                       \\<lfloor>\\<lfloor>True\\<rfloor>\\<rfloor>\n                    then Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                          \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                       (S \\<tau>)\\<rceil>\\<rceil> -\n      {j \\<tau>}\\<rfloor>\\<rfloor>\n                    else \\<bottom>))\n       \\<tau> \\<noteq>\n      \\<lfloor>\\<lfloor>True\\<rfloor>\\<rfloor> \\<longrightarrow>\n      Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n       \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n    (Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n      \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n   (S \\<tau>)\\<rceil>\\<rceil> -\n                        {i \\<tau>}\\<rfloor>\\<rfloor>)\\<rceil>\\<rceil> -\n                         {j \\<tau>}\\<rfloor>\\<rfloor> =\n      \\<bottom>)) \\<and>\n    ((\\<delta> (\\<lambda>\\<tau>.\n                   if (\\<delta> S) \\<tau> =\n                      \\<lfloor>\\<lfloor>True\\<rfloor>\\<rfloor> \\<and>\n                      (\\<upsilon> i) \\<tau> =\n                      \\<lfloor>\\<lfloor>True\\<rfloor>\\<rfloor>\n                   then Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                         \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                      (S \\<tau>)\\<rceil>\\<rceil> -\n     {i \\<tau>}\\<rfloor>\\<rfloor>\n                   else \\<bottom>))\n      \\<tau> \\<noteq>\n     \\<lfloor>\\<lfloor>True\\<rfloor>\\<rfloor> \\<longrightarrow>\n     (\\<delta> (\\<lambda>\\<tau>.\n                   if (\\<delta> S) \\<tau> =\n                      \\<lfloor>\\<lfloor>True\\<rfloor>\\<rfloor> \\<and>\n                      (\\<upsilon> j) \\<tau> =\n                      \\<lfloor>\\<lfloor>True\\<rfloor>\\<rfloor>\n                   then Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                         \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                      (S \\<tau>)\\<rceil>\\<rceil> -\n     {j \\<tau>}\\<rfloor>\\<rfloor>\n                   else \\<bottom>))\n      \\<tau> =\n     \\<lfloor>\\<lfloor>True\\<rfloor>\\<rfloor> \\<longrightarrow>\n     \\<bottom> =\n     Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n      \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n   (Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n     \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n  (S \\<tau>)\\<rceil>\\<rceil> -\n                       {j \\<tau>}\\<rfloor>\\<rfloor>)\\<rceil>\\<rceil> -\n                        {i \\<tau>}\\<rfloor>\\<rfloor>)", "apply(subst cp_defined,\n           simp add: S_def[simplified OclValid_def]\n                     i_val[simplified OclValid_def] j_val[simplified OclValid_def] true_def *)"], ["proof (prove)\ngoal (1 subgoal):\n 1. ((\\<delta> (\\<lambda>\\<tau>.\n                   if (\\<delta> S) \\<tau> =\n                      \\<lfloor>\\<lfloor>True\\<rfloor>\\<rfloor> \\<and>\n                      (\\<upsilon> j) \\<tau> =\n                      \\<lfloor>\\<lfloor>True\\<rfloor>\\<rfloor>\n                   then Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                         \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                      (S \\<tau>)\\<rceil>\\<rceil> -\n     {j \\<tau>}\\<rfloor>\\<rfloor>\n                   else \\<bottom>))\n      \\<tau> =\n     \\<lfloor>\\<lfloor>True\\<rfloor>\\<rfloor> \\<longrightarrow>\n     Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n      \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n   (Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n     \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n  (S \\<tau>)\\<rceil>\\<rceil> -\n                       {i \\<tau>}\\<rfloor>\\<rfloor>)\\<rceil>\\<rceil> -\n                        {j \\<tau>}\\<rfloor>\\<rfloor> =\n     Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n      \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n   (Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n     \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n  (S \\<tau>)\\<rceil>\\<rceil> -\n                       {j \\<tau>}\\<rfloor>\\<rfloor>)\\<rceil>\\<rceil> -\n                        {i \\<tau>}\\<rfloor>\\<rfloor>) \\<and>\n    ((\\<delta> (\\<lambda>\\<tau>.\n                   if (\\<delta> S) \\<tau> =\n                      \\<lfloor>\\<lfloor>True\\<rfloor>\\<rfloor> \\<and>\n                      (\\<upsilon> j) \\<tau> =\n                      \\<lfloor>\\<lfloor>True\\<rfloor>\\<rfloor>\n                   then Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                         \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                      (S \\<tau>)\\<rceil>\\<rceil> -\n     {j \\<tau>}\\<rfloor>\\<rfloor>\n                   else \\<bottom>))\n      \\<tau> \\<noteq>\n     \\<lfloor>\\<lfloor>True\\<rfloor>\\<rfloor> \\<longrightarrow>\n     Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n      \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n   (Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n     \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n  (S \\<tau>)\\<rceil>\\<rceil> -\n                       {i \\<tau>}\\<rfloor>\\<rfloor>)\\<rceil>\\<rceil> -\n                        {j \\<tau>}\\<rfloor>\\<rfloor> =\n     \\<bottom>) \\<and>\n    ((\\<delta> (\\<lambda>\\<tau>.\n                   if (\\<delta> S) \\<tau> =\n                      \\<lfloor>\\<lfloor>True\\<rfloor>\\<rfloor> \\<and>\n                      (\\<upsilon> i) \\<tau> =\n                      \\<lfloor>\\<lfloor>True\\<rfloor>\\<rfloor>\n                   then Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                         \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                      (S \\<tau>)\\<rceil>\\<rceil> -\n     {i \\<tau>}\\<rfloor>\\<rfloor>\n                   else \\<bottom>))\n      \\<tau> \\<noteq>\n     \\<lfloor>\\<lfloor>True\\<rfloor>\\<rfloor> \\<longrightarrow>\n     (\\<delta> (\\<lambda>\\<tau>.\n                   if (\\<delta> S) \\<tau> =\n                      \\<lfloor>\\<lfloor>True\\<rfloor>\\<rfloor> \\<and>\n                      (\\<upsilon> j) \\<tau> =\n                      \\<lfloor>\\<lfloor>True\\<rfloor>\\<rfloor>\n                   then Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                         \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                      (S \\<tau>)\\<rceil>\\<rceil> -\n     {j \\<tau>}\\<rfloor>\\<rfloor>\n                   else \\<bottom>))\n      \\<tau> =\n     \\<lfloor>\\<lfloor>True\\<rfloor>\\<rfloor> \\<longrightarrow>\n     \\<bottom> =\n     Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n      \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n   (Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n     \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n  (S \\<tau>)\\<rceil>\\<rceil> -\n                       {j \\<tau>}\\<rfloor>\\<rfloor>)\\<rceil>\\<rceil> -\n                        {i \\<tau>}\\<rfloor>\\<rfloor>)", "apply(subst cp_defined,\n           simp add: S_def[simplified OclValid_def]\n                     i_val[simplified OclValid_def] j_val[simplified OclValid_def] true_def ** ***)"], ["proof (prove)\ngoal (1 subgoal):\n 1. ((\\<delta> (\\<lambda>\\<tau>.\n                   if (\\<delta> S) \\<tau> =\n                      \\<lfloor>\\<lfloor>True\\<rfloor>\\<rfloor> \\<and>\n                      (\\<upsilon> j) \\<tau> =\n                      \\<lfloor>\\<lfloor>True\\<rfloor>\\<rfloor>\n                   then Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                         \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                      (S \\<tau>)\\<rceil>\\<rceil> -\n     {j \\<tau>}\\<rfloor>\\<rfloor>\n                   else \\<bottom>))\n      \\<tau> \\<noteq>\n     \\<lfloor>\\<lfloor>True\\<rfloor>\\<rfloor> \\<longrightarrow>\n     Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n      \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n   (Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n     \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n  (S \\<tau>)\\<rceil>\\<rceil> -\n                       {j \\<tau>}\\<rfloor>\\<rfloor>)\\<rceil>\\<rceil> -\n                        {i \\<tau>}\\<rfloor>\\<rfloor> =\n     \\<bottom>) \\<and>\n    ((\\<delta> (\\<lambda>\\<tau>.\n                   if (\\<delta> S) \\<tau> =\n                      \\<lfloor>\\<lfloor>True\\<rfloor>\\<rfloor> \\<and>\n                      (\\<upsilon> i) \\<tau> =\n                      \\<lfloor>\\<lfloor>True\\<rfloor>\\<rfloor>\n                   then Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                         \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                      (S \\<tau>)\\<rceil>\\<rceil> -\n     {i \\<tau>}\\<rfloor>\\<rfloor>\n                   else \\<bottom>))\n      \\<tau> \\<noteq>\n     \\<lfloor>\\<lfloor>True\\<rfloor>\\<rfloor> \\<longrightarrow>\n     (\\<delta> (\\<lambda>\\<tau>.\n                   if (\\<delta> S) \\<tau> =\n                      \\<lfloor>\\<lfloor>True\\<rfloor>\\<rfloor> \\<and>\n                      (\\<upsilon> j) \\<tau> =\n                      \\<lfloor>\\<lfloor>True\\<rfloor>\\<rfloor>\n                   then Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                         \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                      (S \\<tau>)\\<rceil>\\<rceil> -\n     {j \\<tau>}\\<rfloor>\\<rfloor>\n                   else \\<bottom>))\n      \\<tau> =\n     \\<lfloor>\\<lfloor>True\\<rfloor>\\<rfloor> \\<longrightarrow>\n     \\<bottom> =\n     Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n      \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n   (Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n     \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n  (S \\<tau>)\\<rceil>\\<rceil> -\n                       {j \\<tau>}\\<rfloor>\\<rfloor>)\\<rceil>\\<rceil> -\n                        {i \\<tau>}\\<rfloor>\\<rfloor>)", "apply(subst cp_defined,\n           simp add: S_def[simplified OclValid_def]\n                     i_val[simplified OclValid_def] j_val[simplified OclValid_def] true_def *)"], ["proof (prove)\ngoal (1 subgoal):\n 1. ((\\<delta> (\\<lambda>_.\n                   Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                    \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                 (S \\<tau>)\\<rceil>\\<rceil> -\n{j \\<tau>}\\<rfloor>\\<rfloor>))\n      \\<tau> \\<noteq>\n     \\<lfloor>\\<lfloor>True\\<rfloor>\\<rfloor> \\<longrightarrow>\n     Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n      \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n   (Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n     \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n  (S \\<tau>)\\<rceil>\\<rceil> -\n                       {j \\<tau>}\\<rfloor>\\<rfloor>)\\<rceil>\\<rceil> -\n                        {i \\<tau>}\\<rfloor>\\<rfloor> =\n     \\<bottom>) \\<and>\n    ((\\<delta> (\\<lambda>\\<tau>.\n                   if (\\<delta> S) \\<tau> =\n                      \\<lfloor>\\<lfloor>True\\<rfloor>\\<rfloor> \\<and>\n                      (\\<upsilon> i) \\<tau> =\n                      \\<lfloor>\\<lfloor>True\\<rfloor>\\<rfloor>\n                   then Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                         \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                      (S \\<tau>)\\<rceil>\\<rceil> -\n     {i \\<tau>}\\<rfloor>\\<rfloor>\n                   else \\<bottom>))\n      \\<tau> \\<noteq>\n     \\<lfloor>\\<lfloor>True\\<rfloor>\\<rfloor> \\<longrightarrow>\n     (\\<delta> (\\<lambda>\\<tau>.\n                   if (\\<delta> S) \\<tau> =\n                      \\<lfloor>\\<lfloor>True\\<rfloor>\\<rfloor> \\<and>\n                      (\\<upsilon> j) \\<tau> =\n                      \\<lfloor>\\<lfloor>True\\<rfloor>\\<rfloor>\n                   then Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                         \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                      (S \\<tau>)\\<rceil>\\<rceil> -\n     {j \\<tau>}\\<rfloor>\\<rfloor>\n                   else \\<bottom>))\n      \\<tau> =\n     \\<lfloor>\\<lfloor>True\\<rfloor>\\<rfloor> \\<longrightarrow>\n     \\<bottom> =\n     Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n      \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n   (Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n     \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n  (S \\<tau>)\\<rceil>\\<rceil> -\n                       {j \\<tau>}\\<rfloor>\\<rfloor>)\\<rceil>\\<rceil> -\n                        {i \\<tau>}\\<rfloor>\\<rfloor>)", "apply(subst cp_defined,\n           simp add: S_def[simplified OclValid_def]\n                     i_val[simplified OclValid_def] j_val[simplified OclValid_def] true_def * )"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<delta> (\\<lambda>_.\n                  Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                   \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                (S \\<tau>)\\<rceil>\\<rceil> -\n                                     {j \\<tau>}\\<rfloor>\\<rfloor>))\n     \\<tau> \\<noteq>\n    \\<lfloor>\\<lfloor>True\\<rfloor>\\<rfloor> \\<longrightarrow>\n    Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n     \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n  (Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n    \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n (S \\<tau>)\\<rceil>\\<rceil> -\n                      {j \\<tau>}\\<rfloor>\\<rfloor>)\\<rceil>\\<rceil> -\n                       {i \\<tau>}\\<rfloor>\\<rfloor> =\n    \\<bottom>", "apply(subst cp_defined,\n           simp add: S_def[simplified OclValid_def]\n                     i_val[simplified OclValid_def] j_val[simplified OclValid_def] true_def * **)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  \\<tau>\n   \\<Turnstile> S->excluding\\<^sub>S\\<^sub>e\\<^sub>t(i)->excluding\\<^sub>S\\<^sub>e\\<^sub>t(j) \\<triangleq>\n                S->excluding\\<^sub>S\\<^sub>e\\<^sub>t(j)->excluding\\<^sub>S\\<^sub>e\\<^sub>t(i)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma OclExcluding_commute[simp,code_unfold]:\n\"((S :: ('\\<AA>, 'a::null) Set)->excluding\\<^sub>S\\<^sub>e\\<^sub>t(i)->excluding\\<^sub>S\\<^sub>e\\<^sub>t(j) = (S->excluding\\<^sub>S\\<^sub>e\\<^sub>t(j)->excluding\\<^sub>S\\<^sub>e\\<^sub>t(i)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. S->excluding\\<^sub>S\\<^sub>e\\<^sub>t(i)->excluding\\<^sub>S\\<^sub>e\\<^sub>t(j) =\n    S->excluding\\<^sub>S\\<^sub>e\\<^sub>t(j)->excluding\\<^sub>S\\<^sub>e\\<^sub>t(i)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. S->excluding\\<^sub>S\\<^sub>e\\<^sub>t(i)->excluding\\<^sub>S\\<^sub>e\\<^sub>t(j) =\n    S->excluding\\<^sub>S\\<^sub>e\\<^sub>t(j)->excluding\\<^sub>S\\<^sub>e\\<^sub>t(i)", "have A: \"\\<And> \\<tau>.   \\<tau> \\<Turnstile> i \\<triangleq> invalid   \\<Longrightarrow> (S->excluding\\<^sub>S\\<^sub>e\\<^sub>t(i)->excluding\\<^sub>S\\<^sub>e\\<^sub>t(j)) \\<tau> = invalid \\<tau>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<tau>.\n       \\<tau> \\<Turnstile> i \\<triangleq> invalid \\<Longrightarrow>\n       S->excluding\\<^sub>S\\<^sub>e\\<^sub>t(i)->excluding\\<^sub>S\\<^sub>e\\<^sub>t(j)\n        \\<tau> =\n       invalid \\<tau>", "apply(rule foundation22[THEN iffD1])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<tau>.\n       \\<tau> \\<Turnstile> i \\<triangleq> invalid \\<Longrightarrow>\n       \\<tau>\n        \\<Turnstile> S->excluding\\<^sub>S\\<^sub>e\\<^sub>t(i)->excluding\\<^sub>S\\<^sub>e\\<^sub>t(j) \\<triangleq>\n                     invalid", "by(erule StrongEq_L_subst2_rev, simp,simp)"], ["proof (state)\nthis:\n  ?\\<tau> \\<Turnstile> i \\<triangleq> invalid \\<Longrightarrow>\n  S->excluding\\<^sub>S\\<^sub>e\\<^sub>t(i)->excluding\\<^sub>S\\<^sub>e\\<^sub>t(j)\n   ?\\<tau> =\n  invalid ?\\<tau>\n\ngoal (1 subgoal):\n 1. S->excluding\\<^sub>S\\<^sub>e\\<^sub>t(i)->excluding\\<^sub>S\\<^sub>e\\<^sub>t(j) =\n    S->excluding\\<^sub>S\\<^sub>e\\<^sub>t(j)->excluding\\<^sub>S\\<^sub>e\\<^sub>t(i)", "have A': \"\\<And> \\<tau>.   \\<tau> \\<Turnstile> i \\<triangleq> invalid   \\<Longrightarrow> (S->excluding\\<^sub>S\\<^sub>e\\<^sub>t(j)->excluding\\<^sub>S\\<^sub>e\\<^sub>t(i)) \\<tau> = invalid \\<tau>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<tau>.\n       \\<tau> \\<Turnstile> i \\<triangleq> invalid \\<Longrightarrow>\n       S->excluding\\<^sub>S\\<^sub>e\\<^sub>t(j)->excluding\\<^sub>S\\<^sub>e\\<^sub>t(i)\n        \\<tau> =\n       invalid \\<tau>", "apply(rule foundation22[THEN iffD1])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<tau>.\n       \\<tau> \\<Turnstile> i \\<triangleq> invalid \\<Longrightarrow>\n       \\<tau>\n        \\<Turnstile> S->excluding\\<^sub>S\\<^sub>e\\<^sub>t(j)->excluding\\<^sub>S\\<^sub>e\\<^sub>t(i) \\<triangleq>\n                     invalid", "by(erule StrongEq_L_subst2_rev, simp,simp)"], ["proof (state)\nthis:\n  ?\\<tau> \\<Turnstile> i \\<triangleq> invalid \\<Longrightarrow>\n  S->excluding\\<^sub>S\\<^sub>e\\<^sub>t(j)->excluding\\<^sub>S\\<^sub>e\\<^sub>t(i)\n   ?\\<tau> =\n  invalid ?\\<tau>\n\ngoal (1 subgoal):\n 1. S->excluding\\<^sub>S\\<^sub>e\\<^sub>t(i)->excluding\\<^sub>S\\<^sub>e\\<^sub>t(j) =\n    S->excluding\\<^sub>S\\<^sub>e\\<^sub>t(j)->excluding\\<^sub>S\\<^sub>e\\<^sub>t(i)", "have B:\"\\<And> \\<tau>.   \\<tau> \\<Turnstile> j \\<triangleq> invalid   \\<Longrightarrow> (S->excluding\\<^sub>S\\<^sub>e\\<^sub>t(i)->excluding\\<^sub>S\\<^sub>e\\<^sub>t(j)) \\<tau> = invalid \\<tau>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<tau>.\n       \\<tau> \\<Turnstile> j \\<triangleq> invalid \\<Longrightarrow>\n       S->excluding\\<^sub>S\\<^sub>e\\<^sub>t(i)->excluding\\<^sub>S\\<^sub>e\\<^sub>t(j)\n        \\<tau> =\n       invalid \\<tau>", "apply(rule foundation22[THEN iffD1])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<tau>.\n       \\<tau> \\<Turnstile> j \\<triangleq> invalid \\<Longrightarrow>\n       \\<tau>\n        \\<Turnstile> S->excluding\\<^sub>S\\<^sub>e\\<^sub>t(i)->excluding\\<^sub>S\\<^sub>e\\<^sub>t(j) \\<triangleq>\n                     invalid", "by(erule StrongEq_L_subst2_rev, simp,simp)"], ["proof (state)\nthis:\n  ?\\<tau> \\<Turnstile> j \\<triangleq> invalid \\<Longrightarrow>\n  S->excluding\\<^sub>S\\<^sub>e\\<^sub>t(i)->excluding\\<^sub>S\\<^sub>e\\<^sub>t(j)\n   ?\\<tau> =\n  invalid ?\\<tau>\n\ngoal (1 subgoal):\n 1. S->excluding\\<^sub>S\\<^sub>e\\<^sub>t(i)->excluding\\<^sub>S\\<^sub>e\\<^sub>t(j) =\n    S->excluding\\<^sub>S\\<^sub>e\\<^sub>t(j)->excluding\\<^sub>S\\<^sub>e\\<^sub>t(i)", "have B':\"\\<And> \\<tau>.   \\<tau> \\<Turnstile> j \\<triangleq> invalid   \\<Longrightarrow> (S->excluding\\<^sub>S\\<^sub>e\\<^sub>t(j)->excluding\\<^sub>S\\<^sub>e\\<^sub>t(i)) \\<tau> = invalid \\<tau>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<tau>.\n       \\<tau> \\<Turnstile> j \\<triangleq> invalid \\<Longrightarrow>\n       S->excluding\\<^sub>S\\<^sub>e\\<^sub>t(j)->excluding\\<^sub>S\\<^sub>e\\<^sub>t(i)\n        \\<tau> =\n       invalid \\<tau>", "apply(rule foundation22[THEN iffD1])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<tau>.\n       \\<tau> \\<Turnstile> j \\<triangleq> invalid \\<Longrightarrow>\n       \\<tau>\n        \\<Turnstile> S->excluding\\<^sub>S\\<^sub>e\\<^sub>t(j)->excluding\\<^sub>S\\<^sub>e\\<^sub>t(i) \\<triangleq>\n                     invalid", "by(erule StrongEq_L_subst2_rev, simp,simp)"], ["proof (state)\nthis:\n  ?\\<tau> \\<Turnstile> j \\<triangleq> invalid \\<Longrightarrow>\n  S->excluding\\<^sub>S\\<^sub>e\\<^sub>t(j)->excluding\\<^sub>S\\<^sub>e\\<^sub>t(i)\n   ?\\<tau> =\n  invalid ?\\<tau>\n\ngoal (1 subgoal):\n 1. S->excluding\\<^sub>S\\<^sub>e\\<^sub>t(i)->excluding\\<^sub>S\\<^sub>e\\<^sub>t(j) =\n    S->excluding\\<^sub>S\\<^sub>e\\<^sub>t(j)->excluding\\<^sub>S\\<^sub>e\\<^sub>t(i)", "have C: \"\\<And> \\<tau>.   \\<tau> \\<Turnstile> S \\<triangleq> invalid   \\<Longrightarrow> (S->excluding\\<^sub>S\\<^sub>e\\<^sub>t(i)->excluding\\<^sub>S\\<^sub>e\\<^sub>t(j)) \\<tau> = invalid \\<tau>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<tau>.\n       \\<tau> \\<Turnstile> S \\<triangleq> invalid \\<Longrightarrow>\n       S->excluding\\<^sub>S\\<^sub>e\\<^sub>t(i)->excluding\\<^sub>S\\<^sub>e\\<^sub>t(j)\n        \\<tau> =\n       invalid \\<tau>", "apply(rule foundation22[THEN iffD1])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<tau>.\n       \\<tau> \\<Turnstile> S \\<triangleq> invalid \\<Longrightarrow>\n       \\<tau>\n        \\<Turnstile> S->excluding\\<^sub>S\\<^sub>e\\<^sub>t(i)->excluding\\<^sub>S\\<^sub>e\\<^sub>t(j) \\<triangleq>\n                     invalid", "by(erule StrongEq_L_subst2_rev, simp,simp)"], ["proof (state)\nthis:\n  ?\\<tau> \\<Turnstile> S \\<triangleq> invalid \\<Longrightarrow>\n  S->excluding\\<^sub>S\\<^sub>e\\<^sub>t(i)->excluding\\<^sub>S\\<^sub>e\\<^sub>t(j)\n   ?\\<tau> =\n  invalid ?\\<tau>\n\ngoal (1 subgoal):\n 1. S->excluding\\<^sub>S\\<^sub>e\\<^sub>t(i)->excluding\\<^sub>S\\<^sub>e\\<^sub>t(j) =\n    S->excluding\\<^sub>S\\<^sub>e\\<^sub>t(j)->excluding\\<^sub>S\\<^sub>e\\<^sub>t(i)", "have C': \"\\<And> \\<tau>.  \\<tau> \\<Turnstile> S \\<triangleq> invalid   \\<Longrightarrow> (S->excluding\\<^sub>S\\<^sub>e\\<^sub>t(j)->excluding\\<^sub>S\\<^sub>e\\<^sub>t(i)) \\<tau> = invalid \\<tau>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<tau>.\n       \\<tau> \\<Turnstile> S \\<triangleq> invalid \\<Longrightarrow>\n       S->excluding\\<^sub>S\\<^sub>e\\<^sub>t(j)->excluding\\<^sub>S\\<^sub>e\\<^sub>t(i)\n        \\<tau> =\n       invalid \\<tau>", "apply(rule foundation22[THEN iffD1])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<tau>.\n       \\<tau> \\<Turnstile> S \\<triangleq> invalid \\<Longrightarrow>\n       \\<tau>\n        \\<Turnstile> S->excluding\\<^sub>S\\<^sub>e\\<^sub>t(j)->excluding\\<^sub>S\\<^sub>e\\<^sub>t(i) \\<triangleq>\n                     invalid", "by(erule StrongEq_L_subst2_rev, simp,simp)"], ["proof (state)\nthis:\n  ?\\<tau> \\<Turnstile> S \\<triangleq> invalid \\<Longrightarrow>\n  S->excluding\\<^sub>S\\<^sub>e\\<^sub>t(j)->excluding\\<^sub>S\\<^sub>e\\<^sub>t(i)\n   ?\\<tau> =\n  invalid ?\\<tau>\n\ngoal (1 subgoal):\n 1. S->excluding\\<^sub>S\\<^sub>e\\<^sub>t(i)->excluding\\<^sub>S\\<^sub>e\\<^sub>t(j) =\n    S->excluding\\<^sub>S\\<^sub>e\\<^sub>t(j)->excluding\\<^sub>S\\<^sub>e\\<^sub>t(i)", "have D: \"\\<And> \\<tau>.   \\<tau> \\<Turnstile> S \\<triangleq> null   \\<Longrightarrow> (S->excluding\\<^sub>S\\<^sub>e\\<^sub>t(i)->excluding\\<^sub>S\\<^sub>e\\<^sub>t(j)) \\<tau> = invalid \\<tau>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<tau>.\n       \\<tau> \\<Turnstile> S \\<triangleq> null \\<Longrightarrow>\n       S->excluding\\<^sub>S\\<^sub>e\\<^sub>t(i)->excluding\\<^sub>S\\<^sub>e\\<^sub>t(j)\n        \\<tau> =\n       invalid \\<tau>", "apply(rule foundation22[THEN iffD1])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<tau>.\n       \\<tau> \\<Turnstile> S \\<triangleq> null \\<Longrightarrow>\n       \\<tau>\n        \\<Turnstile> S->excluding\\<^sub>S\\<^sub>e\\<^sub>t(i)->excluding\\<^sub>S\\<^sub>e\\<^sub>t(j) \\<triangleq>\n                     invalid", "by(erule StrongEq_L_subst2_rev, simp,simp)"], ["proof (state)\nthis:\n  ?\\<tau> \\<Turnstile> S \\<triangleq> null \\<Longrightarrow>\n  S->excluding\\<^sub>S\\<^sub>e\\<^sub>t(i)->excluding\\<^sub>S\\<^sub>e\\<^sub>t(j)\n   ?\\<tau> =\n  invalid ?\\<tau>\n\ngoal (1 subgoal):\n 1. S->excluding\\<^sub>S\\<^sub>e\\<^sub>t(i)->excluding\\<^sub>S\\<^sub>e\\<^sub>t(j) =\n    S->excluding\\<^sub>S\\<^sub>e\\<^sub>t(j)->excluding\\<^sub>S\\<^sub>e\\<^sub>t(i)", "have D': \"\\<And> \\<tau>.  \\<tau> \\<Turnstile> S \\<triangleq> null   \\<Longrightarrow> (S->excluding\\<^sub>S\\<^sub>e\\<^sub>t(j)->excluding\\<^sub>S\\<^sub>e\\<^sub>t(i)) \\<tau> = invalid \\<tau>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<tau>.\n       \\<tau> \\<Turnstile> S \\<triangleq> null \\<Longrightarrow>\n       S->excluding\\<^sub>S\\<^sub>e\\<^sub>t(j)->excluding\\<^sub>S\\<^sub>e\\<^sub>t(i)\n        \\<tau> =\n       invalid \\<tau>", "apply(rule foundation22[THEN iffD1])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<tau>.\n       \\<tau> \\<Turnstile> S \\<triangleq> null \\<Longrightarrow>\n       \\<tau>\n        \\<Turnstile> S->excluding\\<^sub>S\\<^sub>e\\<^sub>t(j)->excluding\\<^sub>S\\<^sub>e\\<^sub>t(i) \\<triangleq>\n                     invalid", "by(erule StrongEq_L_subst2_rev, simp,simp)"], ["proof (state)\nthis:\n  ?\\<tau> \\<Turnstile> S \\<triangleq> null \\<Longrightarrow>\n  S->excluding\\<^sub>S\\<^sub>e\\<^sub>t(j)->excluding\\<^sub>S\\<^sub>e\\<^sub>t(i)\n   ?\\<tau> =\n  invalid ?\\<tau>\n\ngoal (1 subgoal):\n 1. S->excluding\\<^sub>S\\<^sub>e\\<^sub>t(i)->excluding\\<^sub>S\\<^sub>e\\<^sub>t(j) =\n    S->excluding\\<^sub>S\\<^sub>e\\<^sub>t(j)->excluding\\<^sub>S\\<^sub>e\\<^sub>t(i)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. S->excluding\\<^sub>S\\<^sub>e\\<^sub>t(i)->excluding\\<^sub>S\\<^sub>e\\<^sub>t(j) =\n    S->excluding\\<^sub>S\\<^sub>e\\<^sub>t(j)->excluding\\<^sub>S\\<^sub>e\\<^sub>t(i)", "apply(rule ext, rename_tac \\<tau>)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<tau>.\n       S->excluding\\<^sub>S\\<^sub>e\\<^sub>t(i)->excluding\\<^sub>S\\<^sub>e\\<^sub>t(j)\n        \\<tau> =\n       S->excluding\\<^sub>S\\<^sub>e\\<^sub>t(j)->excluding\\<^sub>S\\<^sub>e\\<^sub>t(i)\n        \\<tau>", "apply(case_tac \"\\<tau> \\<Turnstile> (\\<upsilon> i)\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>\\<tau>.\n       \\<tau> \\<Turnstile> \\<upsilon> i \\<Longrightarrow>\n       S->excluding\\<^sub>S\\<^sub>e\\<^sub>t(i)->excluding\\<^sub>S\\<^sub>e\\<^sub>t(j)\n        \\<tau> =\n       S->excluding\\<^sub>S\\<^sub>e\\<^sub>t(j)->excluding\\<^sub>S\\<^sub>e\\<^sub>t(i)\n        \\<tau>\n 2. \\<And>\\<tau>.\n       \\<tau> |\\<noteq> \\<upsilon> i \\<Longrightarrow>\n       S->excluding\\<^sub>S\\<^sub>e\\<^sub>t(i)->excluding\\<^sub>S\\<^sub>e\\<^sub>t(j)\n        \\<tau> =\n       S->excluding\\<^sub>S\\<^sub>e\\<^sub>t(j)->excluding\\<^sub>S\\<^sub>e\\<^sub>t(i)\n        \\<tau>", "apply(case_tac \"\\<tau> \\<Turnstile> (\\<upsilon> j)\")"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>\\<tau>.\n       \\<lbrakk>\\<tau> \\<Turnstile> \\<upsilon> i;\n        \\<tau> \\<Turnstile> \\<upsilon> j\\<rbrakk>\n       \\<Longrightarrow> S->excluding\\<^sub>S\\<^sub>e\\<^sub>t(i)->excluding\\<^sub>S\\<^sub>e\\<^sub>t(j)\n                          \\<tau> =\n                         S->excluding\\<^sub>S\\<^sub>e\\<^sub>t(j)->excluding\\<^sub>S\\<^sub>e\\<^sub>t(i)\n                          \\<tau>\n 2. \\<And>\\<tau>.\n       \\<lbrakk>\\<tau> \\<Turnstile> \\<upsilon> i;\n        \\<tau> |\\<noteq> \\<upsilon> j\\<rbrakk>\n       \\<Longrightarrow> S->excluding\\<^sub>S\\<^sub>e\\<^sub>t(i)->excluding\\<^sub>S\\<^sub>e\\<^sub>t(j)\n                          \\<tau> =\n                         S->excluding\\<^sub>S\\<^sub>e\\<^sub>t(j)->excluding\\<^sub>S\\<^sub>e\\<^sub>t(i)\n                          \\<tau>\n 3. \\<And>\\<tau>.\n       \\<tau> |\\<noteq> \\<upsilon> i \\<Longrightarrow>\n       S->excluding\\<^sub>S\\<^sub>e\\<^sub>t(i)->excluding\\<^sub>S\\<^sub>e\\<^sub>t(j)\n        \\<tau> =\n       S->excluding\\<^sub>S\\<^sub>e\\<^sub>t(j)->excluding\\<^sub>S\\<^sub>e\\<^sub>t(i)\n        \\<tau>", "apply(case_tac \"\\<tau> \\<Turnstile> (\\<delta> S)\")"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>\\<tau>.\n       \\<lbrakk>\\<tau> \\<Turnstile> \\<upsilon> i;\n        \\<tau> \\<Turnstile> \\<upsilon> j;\n        \\<tau> \\<Turnstile> \\<delta> S\\<rbrakk>\n       \\<Longrightarrow> S->excluding\\<^sub>S\\<^sub>e\\<^sub>t(i)->excluding\\<^sub>S\\<^sub>e\\<^sub>t(j)\n                          \\<tau> =\n                         S->excluding\\<^sub>S\\<^sub>e\\<^sub>t(j)->excluding\\<^sub>S\\<^sub>e\\<^sub>t(i)\n                          \\<tau>\n 2. \\<And>\\<tau>.\n       \\<lbrakk>\\<tau> \\<Turnstile> \\<upsilon> i;\n        \\<tau> \\<Turnstile> \\<upsilon> j;\n        \\<tau> |\\<noteq> \\<delta> S\\<rbrakk>\n       \\<Longrightarrow> S->excluding\\<^sub>S\\<^sub>e\\<^sub>t(i)->excluding\\<^sub>S\\<^sub>e\\<^sub>t(j)\n                          \\<tau> =\n                         S->excluding\\<^sub>S\\<^sub>e\\<^sub>t(j)->excluding\\<^sub>S\\<^sub>e\\<^sub>t(i)\n                          \\<tau>\n 3. \\<And>\\<tau>.\n       \\<lbrakk>\\<tau> \\<Turnstile> \\<upsilon> i;\n        \\<tau> |\\<noteq> \\<upsilon> j\\<rbrakk>\n       \\<Longrightarrow> S->excluding\\<^sub>S\\<^sub>e\\<^sub>t(i)->excluding\\<^sub>S\\<^sub>e\\<^sub>t(j)\n                          \\<tau> =\n                         S->excluding\\<^sub>S\\<^sub>e\\<^sub>t(j)->excluding\\<^sub>S\\<^sub>e\\<^sub>t(i)\n                          \\<tau>\n 4. \\<And>\\<tau>.\n       \\<tau> |\\<noteq> \\<upsilon> i \\<Longrightarrow>\n       S->excluding\\<^sub>S\\<^sub>e\\<^sub>t(i)->excluding\\<^sub>S\\<^sub>e\\<^sub>t(j)\n        \\<tau> =\n       S->excluding\\<^sub>S\\<^sub>e\\<^sub>t(j)->excluding\\<^sub>S\\<^sub>e\\<^sub>t(i)\n        \\<tau>", "apply(simp only: OclExcluding_commute0[THEN foundation22[THEN iffD1]])"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>\\<tau>.\n       \\<lbrakk>\\<tau> \\<Turnstile> \\<upsilon> i;\n        \\<tau> \\<Turnstile> \\<upsilon> j;\n        \\<tau> |\\<noteq> \\<delta> S\\<rbrakk>\n       \\<Longrightarrow> S->excluding\\<^sub>S\\<^sub>e\\<^sub>t(i)->excluding\\<^sub>S\\<^sub>e\\<^sub>t(j)\n                          \\<tau> =\n                         S->excluding\\<^sub>S\\<^sub>e\\<^sub>t(j)->excluding\\<^sub>S\\<^sub>e\\<^sub>t(i)\n                          \\<tau>\n 2. \\<And>\\<tau>.\n       \\<lbrakk>\\<tau> \\<Turnstile> \\<upsilon> i;\n        \\<tau> |\\<noteq> \\<upsilon> j\\<rbrakk>\n       \\<Longrightarrow> S->excluding\\<^sub>S\\<^sub>e\\<^sub>t(i)->excluding\\<^sub>S\\<^sub>e\\<^sub>t(j)\n                          \\<tau> =\n                         S->excluding\\<^sub>S\\<^sub>e\\<^sub>t(j)->excluding\\<^sub>S\\<^sub>e\\<^sub>t(i)\n                          \\<tau>\n 3. \\<And>\\<tau>.\n       \\<tau> |\\<noteq> \\<upsilon> i \\<Longrightarrow>\n       S->excluding\\<^sub>S\\<^sub>e\\<^sub>t(i)->excluding\\<^sub>S\\<^sub>e\\<^sub>t(j)\n        \\<tau> =\n       S->excluding\\<^sub>S\\<^sub>e\\<^sub>t(j)->excluding\\<^sub>S\\<^sub>e\\<^sub>t(i)\n        \\<tau>", "apply(simp add: foundation16', elim disjE)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>\\<tau>.\n       \\<lbrakk>\\<tau> \\<Turnstile> \\<upsilon> i;\n        \\<tau> \\<Turnstile> \\<upsilon> j; S \\<tau> = invalid \\<tau>\\<rbrakk>\n       \\<Longrightarrow> S->excluding\\<^sub>S\\<^sub>e\\<^sub>t(i)->excluding\\<^sub>S\\<^sub>e\\<^sub>t(j)\n                          \\<tau> =\n                         S->excluding\\<^sub>S\\<^sub>e\\<^sub>t(j)->excluding\\<^sub>S\\<^sub>e\\<^sub>t(i)\n                          \\<tau>\n 2. \\<And>\\<tau>.\n       \\<lbrakk>\\<tau> \\<Turnstile> \\<upsilon> i;\n        \\<tau> \\<Turnstile> \\<upsilon> j; S \\<tau> = null \\<tau>\\<rbrakk>\n       \\<Longrightarrow> S->excluding\\<^sub>S\\<^sub>e\\<^sub>t(i)->excluding\\<^sub>S\\<^sub>e\\<^sub>t(j)\n                          \\<tau> =\n                         S->excluding\\<^sub>S\\<^sub>e\\<^sub>t(j)->excluding\\<^sub>S\\<^sub>e\\<^sub>t(i)\n                          \\<tau>\n 3. \\<And>\\<tau>.\n       \\<lbrakk>\\<tau> \\<Turnstile> \\<upsilon> i;\n        \\<tau> |\\<noteq> \\<upsilon> j\\<rbrakk>\n       \\<Longrightarrow> S->excluding\\<^sub>S\\<^sub>e\\<^sub>t(i)->excluding\\<^sub>S\\<^sub>e\\<^sub>t(j)\n                          \\<tau> =\n                         S->excluding\\<^sub>S\\<^sub>e\\<^sub>t(j)->excluding\\<^sub>S\\<^sub>e\\<^sub>t(i)\n                          \\<tau>\n 4. \\<And>\\<tau>.\n       \\<tau> |\\<noteq> \\<upsilon> i \\<Longrightarrow>\n       S->excluding\\<^sub>S\\<^sub>e\\<^sub>t(i)->excluding\\<^sub>S\\<^sub>e\\<^sub>t(j)\n        \\<tau> =\n       S->excluding\\<^sub>S\\<^sub>e\\<^sub>t(j)->excluding\\<^sub>S\\<^sub>e\\<^sub>t(i)\n        \\<tau>", "apply(simp add: C[OF foundation22[THEN iffD2]] C'[OF foundation22[THEN iffD2]])"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>\\<tau>.\n       \\<lbrakk>\\<tau> \\<Turnstile> \\<upsilon> i;\n        \\<tau> \\<Turnstile> \\<upsilon> j; S \\<tau> = null \\<tau>\\<rbrakk>\n       \\<Longrightarrow> S->excluding\\<^sub>S\\<^sub>e\\<^sub>t(i)->excluding\\<^sub>S\\<^sub>e\\<^sub>t(j)\n                          \\<tau> =\n                         S->excluding\\<^sub>S\\<^sub>e\\<^sub>t(j)->excluding\\<^sub>S\\<^sub>e\\<^sub>t(i)\n                          \\<tau>\n 2. \\<And>\\<tau>.\n       \\<lbrakk>\\<tau> \\<Turnstile> \\<upsilon> i;\n        \\<tau> |\\<noteq> \\<upsilon> j\\<rbrakk>\n       \\<Longrightarrow> S->excluding\\<^sub>S\\<^sub>e\\<^sub>t(i)->excluding\\<^sub>S\\<^sub>e\\<^sub>t(j)\n                          \\<tau> =\n                         S->excluding\\<^sub>S\\<^sub>e\\<^sub>t(j)->excluding\\<^sub>S\\<^sub>e\\<^sub>t(i)\n                          \\<tau>\n 3. \\<And>\\<tau>.\n       \\<tau> |\\<noteq> \\<upsilon> i \\<Longrightarrow>\n       S->excluding\\<^sub>S\\<^sub>e\\<^sub>t(i)->excluding\\<^sub>S\\<^sub>e\\<^sub>t(j)\n        \\<tau> =\n       S->excluding\\<^sub>S\\<^sub>e\\<^sub>t(j)->excluding\\<^sub>S\\<^sub>e\\<^sub>t(i)\n        \\<tau>", "apply(simp add: D[OF foundation22[THEN iffD2]] D'[OF foundation22[THEN iffD2]])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>\\<tau>.\n       \\<lbrakk>\\<tau> \\<Turnstile> \\<upsilon> i;\n        \\<tau> |\\<noteq> \\<upsilon> j\\<rbrakk>\n       \\<Longrightarrow> S->excluding\\<^sub>S\\<^sub>e\\<^sub>t(i)->excluding\\<^sub>S\\<^sub>e\\<^sub>t(j)\n                          \\<tau> =\n                         S->excluding\\<^sub>S\\<^sub>e\\<^sub>t(j)->excluding\\<^sub>S\\<^sub>e\\<^sub>t(i)\n                          \\<tau>\n 2. \\<And>\\<tau>.\n       \\<tau> |\\<noteq> \\<upsilon> i \\<Longrightarrow>\n       S->excluding\\<^sub>S\\<^sub>e\\<^sub>t(i)->excluding\\<^sub>S\\<^sub>e\\<^sub>t(j)\n        \\<tau> =\n       S->excluding\\<^sub>S\\<^sub>e\\<^sub>t(j)->excluding\\<^sub>S\\<^sub>e\\<^sub>t(i)\n        \\<tau>", "apply(simp add:foundation18 B[OF foundation22[THEN iffD2]] B'[OF foundation22[THEN iffD2]])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<tau>.\n       \\<tau> |\\<noteq> \\<upsilon> i \\<Longrightarrow>\n       S->excluding\\<^sub>S\\<^sub>e\\<^sub>t(i)->excluding\\<^sub>S\\<^sub>e\\<^sub>t(j)\n        \\<tau> =\n       S->excluding\\<^sub>S\\<^sub>e\\<^sub>t(j)->excluding\\<^sub>S\\<^sub>e\\<^sub>t(i)\n        \\<tau>", "apply(simp add:foundation18 A[OF foundation22[THEN iffD2]] A'[OF foundation22[THEN iffD2]])"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  S->excluding\\<^sub>S\\<^sub>e\\<^sub>t(i)->excluding\\<^sub>S\\<^sub>e\\<^sub>t(j) =\n  S->excluding\\<^sub>S\\<^sub>e\\<^sub>t(j)->excluding\\<^sub>S\\<^sub>e\\<^sub>t(i)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma OclExcluding_charn0_exec[simp,code_unfold]:\n\"(Set{}->excluding\\<^sub>S\\<^sub>e\\<^sub>t(x)) = (if (\\<upsilon> x) then Set{} else invalid endif)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Set{}->excluding\\<^sub>S\\<^sub>e\\<^sub>t(x) =\n    (if \\<upsilon> x then Set{} else invalid endif)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. Set{}->excluding\\<^sub>S\\<^sub>e\\<^sub>t(x) =\n    (if \\<upsilon> x then Set{} else invalid endif)", "have A: \"\\<And> \\<tau>. (Set{}->excluding\\<^sub>S\\<^sub>e\\<^sub>t(invalid)) \\<tau> = (if (\\<upsilon> invalid) then Set{} else invalid endif) \\<tau>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<tau>.\n       Set{}->excluding\\<^sub>S\\<^sub>e\\<^sub>t(invalid) \\<tau> =\n       (if \\<upsilon> invalid then Set{} else invalid endif) \\<tau>", "by simp"], ["proof (state)\nthis:\n  Set{}->excluding\\<^sub>S\\<^sub>e\\<^sub>t(invalid) ?\\<tau> =\n  (if \\<upsilon> invalid then Set{} else invalid endif) ?\\<tau>\n\ngoal (1 subgoal):\n 1. Set{}->excluding\\<^sub>S\\<^sub>e\\<^sub>t(x) =\n    (if \\<upsilon> x then Set{} else invalid endif)", "have B: \"\\<And> \\<tau> x. \\<tau> \\<Turnstile> (\\<upsilon> x) \\<Longrightarrow>\n                 (Set{}->excluding\\<^sub>S\\<^sub>e\\<^sub>t(x)) \\<tau> = (if (\\<upsilon> x) then Set{} else invalid endif) \\<tau>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<tau> x.\n       \\<tau> \\<Turnstile> \\<upsilon> x \\<Longrightarrow>\n       Set{}->excluding\\<^sub>S\\<^sub>e\\<^sub>t(x) \\<tau> =\n       (if \\<upsilon> x then Set{} else invalid endif) \\<tau>", "by(simp add: OclExcluding_charn0[THEN foundation22[THEN iffD1]])"], ["proof (state)\nthis:\n  ?\\<tau>1 \\<Turnstile> \\<upsilon> ?x1 \\<Longrightarrow>\n  Set{}->excluding\\<^sub>S\\<^sub>e\\<^sub>t(?x1) ?\\<tau>1 =\n  (if \\<upsilon> ?x1 then Set{} else invalid endif) ?\\<tau>1\n\ngoal (1 subgoal):\n 1. Set{}->excluding\\<^sub>S\\<^sub>e\\<^sub>t(x) =\n    (if \\<upsilon> x then Set{} else invalid endif)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. Set{}->excluding\\<^sub>S\\<^sub>e\\<^sub>t(x) =\n    (if \\<upsilon> x then Set{} else invalid endif)", "apply(rule ext, rename_tac \\<tau>)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<tau>.\n       Set{}->excluding\\<^sub>S\\<^sub>e\\<^sub>t(x) \\<tau> =\n       (if \\<upsilon> x then Set{} else invalid endif) \\<tau>", "apply(case_tac \"\\<tau> \\<Turnstile> (\\<upsilon> x)\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>\\<tau>.\n       \\<tau> \\<Turnstile> \\<upsilon> x \\<Longrightarrow>\n       Set{}->excluding\\<^sub>S\\<^sub>e\\<^sub>t(x) \\<tau> =\n       (if \\<upsilon> x then Set{} else invalid endif) \\<tau>\n 2. \\<And>\\<tau>.\n       \\<tau> |\\<noteq> \\<upsilon> x \\<Longrightarrow>\n       Set{}->excluding\\<^sub>S\\<^sub>e\\<^sub>t(x) \\<tau> =\n       (if \\<upsilon> x then Set{} else invalid endif) \\<tau>", "apply(simp add: B)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<tau>.\n       \\<tau> |\\<noteq> \\<upsilon> x \\<Longrightarrow>\n       Set{}->excluding\\<^sub>S\\<^sub>e\\<^sub>t(x) \\<tau> =\n       (if \\<upsilon> x then Set{} else invalid endif) \\<tau>", "apply(simp add: foundation18)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<tau>.\n       x \\<tau> = invalid \\<tau> \\<Longrightarrow>\n       Set{}->excluding\\<^sub>S\\<^sub>e\\<^sub>t(x) \\<tau> = invalid \\<tau>", "apply(subst OclExcluding.cp0, simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<tau>.\n       x \\<tau> = invalid \\<tau> \\<Longrightarrow>\n       \\<lambda>_.\n          Set{}\n           \\<tau>->excluding\\<^sub>S\\<^sub>e\\<^sub>t(\\<lambda>_.\n                  invalid \\<tau>)\n        \\<tau> =\n       invalid \\<tau>", "apply(simp add: cp_OclIf[symmetric] OclExcluding.cp0[symmetric] cp_valid[symmetric] A)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  Set{}->excluding\\<^sub>S\\<^sub>e\\<^sub>t(x) =\n  (if \\<upsilon> x then Set{} else invalid endif)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma OclExcluding_charn1:\nassumes def_X:\"\\<tau> \\<Turnstile> (\\<delta> X)\"\nand     val_x:\"\\<tau> \\<Turnstile> (\\<upsilon> x)\"\nand     val_y:\"\\<tau> \\<Turnstile> (\\<upsilon> y)\"\nand     neq  :\"\\<tau> \\<Turnstile> not(x \\<triangleq> y)\"\nshows         \"\\<tau> \\<Turnstile> ((X->including\\<^sub>S\\<^sub>e\\<^sub>t(x))->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y)) \\<triangleq> ((X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y))->including\\<^sub>S\\<^sub>e\\<^sub>t(x))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<tau>\n     \\<Turnstile> X->including\\<^sub>S\\<^sub>e\\<^sub>t(x)->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) \\<triangleq>\n                  X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y)->including\\<^sub>S\\<^sub>e\\<^sub>t(x)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<tau>\n     \\<Turnstile> X->including\\<^sub>S\\<^sub>e\\<^sub>t(x)->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) \\<triangleq>\n                  X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y)->including\\<^sub>S\\<^sub>e\\<^sub>t(x)", "have C : \"\\<lfloor>\\<lfloor>insert (x \\<tau>) \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e (X \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor> \\<in> {X. X = bot \\<or> X = null \\<or> (\\<forall>x\\<in>\\<lceil>\\<lceil>X\\<rceil>\\<rceil>. x \\<noteq> bot)}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lfloor>\\<lfloor>insert (x \\<tau>)\n                       \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n  (X \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>\n    \\<in> {X. X = \\<bottom> \\<or>\n              X = null \\<or>\n              (\\<forall>x\\<in>\\<lceil>\\<lceil>X\\<rceil>\\<rceil>.\n                  x \\<noteq> \\<bottom>)}", "by(insert def_X val_x, frule Set_inv_lemma, simp add: foundation18 invalid_def)"], ["proof (state)\nthis:\n  \\<lfloor>\\<lfloor>insert (x \\<tau>)\n                     \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n(X \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>\n  \\<in> {X. X = \\<bottom> \\<or>\n            X = null \\<or>\n            (\\<forall>x\\<in>\\<lceil>\\<lceil>X\\<rceil>\\<rceil>.\n                x \\<noteq> \\<bottom>)}\n\ngoal (1 subgoal):\n 1. \\<tau>\n     \\<Turnstile> X->including\\<^sub>S\\<^sub>e\\<^sub>t(x)->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) \\<triangleq>\n                  X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y)->including\\<^sub>S\\<^sub>e\\<^sub>t(x)", "have D : \"\\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e (X \\<tau>)\\<rceil>\\<rceil> - {y \\<tau>}\\<rfloor>\\<rfloor> \\<in> {X. X = bot \\<or> X = null \\<or> (\\<forall>x\\<in>\\<lceil>\\<lceil>X\\<rceil>\\<rceil>. x \\<noteq> bot)}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n (X \\<tau>)\\<rceil>\\<rceil> -\n                      {y \\<tau>}\\<rfloor>\\<rfloor>\n    \\<in> {X. X = \\<bottom> \\<or>\n              X = null \\<or>\n              (\\<forall>x\\<in>\\<lceil>\\<lceil>X\\<rceil>\\<rceil>.\n                  x \\<noteq> \\<bottom>)}", "by(insert def_X val_x, frule Set_inv_lemma, simp add: foundation18 invalid_def)"], ["proof (state)\nthis:\n  \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                     (X \\<tau>)\\<rceil>\\<rceil> -\n                    {y \\<tau>}\\<rfloor>\\<rfloor>\n  \\<in> {X. X = \\<bottom> \\<or>\n            X = null \\<or>\n            (\\<forall>x\\<in>\\<lceil>\\<lceil>X\\<rceil>\\<rceil>.\n                x \\<noteq> \\<bottom>)}\n\ngoal (1 subgoal):\n 1. \\<tau>\n     \\<Turnstile> X->including\\<^sub>S\\<^sub>e\\<^sub>t(x)->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) \\<triangleq>\n                  X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y)->including\\<^sub>S\\<^sub>e\\<^sub>t(x)", "have E : \"x \\<tau> \\<noteq> y \\<tau>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<tau> \\<noteq> y \\<tau>", "by(insert neq,\n             auto simp: OclValid_def bot_fun_def OclIncluding_def OclIncludes_def\n                        false_def true_def defined_def valid_def bot_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e_def\n                        null_fun_def null_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e_def StrongEq_def OclNot_def)"], ["proof (state)\nthis:\n  x \\<tau> \\<noteq> y \\<tau>\n\ngoal (1 subgoal):\n 1. \\<tau>\n     \\<Turnstile> X->including\\<^sub>S\\<^sub>e\\<^sub>t(x)->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) \\<triangleq>\n                  X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y)->including\\<^sub>S\\<^sub>e\\<^sub>t(x)", "have G1 : \"Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e \\<lfloor>\\<lfloor>insert (x \\<tau>) \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e (X \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor> \\<noteq> Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e None\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n     \\<lfloor>\\<lfloor>insert (x \\<tau>)\n                        \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n   (X \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor> \\<noteq>\n    Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e None", "by(insert C, simp add: Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e_inject bot_option_def null_option_def)"], ["proof (state)\nthis:\n  Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n   \\<lfloor>\\<lfloor>insert (x \\<tau>)\n                      \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n (X \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor> \\<noteq>\n  Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e None\n\ngoal (1 subgoal):\n 1. \\<tau>\n     \\<Turnstile> X->including\\<^sub>S\\<^sub>e\\<^sub>t(x)->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) \\<triangleq>\n                  X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y)->including\\<^sub>S\\<^sub>e\\<^sub>t(x)", "have G2 : \"Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e \\<lfloor>\\<lfloor>insert (x \\<tau>) \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e (X \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor> \\<noteq> Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e \\<lfloor>None\\<rfloor>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n     \\<lfloor>\\<lfloor>insert (x \\<tau>)\n                        \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n   (X \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor> \\<noteq>\n    Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e \\<lfloor>None\\<rfloor>", "by(insert C, simp add: Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e_inject bot_option_def null_option_def)"], ["proof (state)\nthis:\n  Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n   \\<lfloor>\\<lfloor>insert (x \\<tau>)\n                      \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n (X \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor> \\<noteq>\n  Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e \\<lfloor>None\\<rfloor>\n\ngoal (1 subgoal):\n 1. \\<tau>\n     \\<Turnstile> X->including\\<^sub>S\\<^sub>e\\<^sub>t(x)->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) \\<triangleq>\n                  X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y)->including\\<^sub>S\\<^sub>e\\<^sub>t(x)", "have G : \"(\\<delta> (\\<lambda>_. Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e \\<lfloor>\\<lfloor>insert (x \\<tau>) \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e (X \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>)) \\<tau> = true \\<tau>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<delta> (\\<lambda>_.\n                  Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                   \\<lfloor>\\<lfloor>insert (x \\<tau>)\n\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                 (X \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>))\n     \\<tau> =\n    true \\<tau>", "by(auto simp: OclValid_def false_def true_def defined_def\n                        bot_fun_def bot_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e_def null_fun_def null_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e_def G1 G2)"], ["proof (state)\nthis:\n  (\\<delta> (\\<lambda>_.\n                Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                 \\<lfloor>\\<lfloor>insert (x \\<tau>)\n                                    \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n               (X \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>))\n   \\<tau> =\n  true \\<tau>\n\ngoal (1 subgoal):\n 1. \\<tau>\n     \\<Turnstile> X->including\\<^sub>S\\<^sub>e\\<^sub>t(x)->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) \\<triangleq>\n                  X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y)->including\\<^sub>S\\<^sub>e\\<^sub>t(x)", "have H1 : \"Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e (X \\<tau>)\\<rceil>\\<rceil> - {y \\<tau>}\\<rfloor>\\<rfloor> \\<noteq> Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e None\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n     \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n  (X \\<tau>)\\<rceil>\\<rceil> -\n                       {y \\<tau>}\\<rfloor>\\<rfloor> \\<noteq>\n    Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e None", "by(insert D, simp add: Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e_inject bot_option_def null_option_def)"], ["proof (state)\nthis:\n  Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n   \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n(X \\<tau>)\\<rceil>\\<rceil> -\n                     {y \\<tau>}\\<rfloor>\\<rfloor> \\<noteq>\n  Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e None\n\ngoal (1 subgoal):\n 1. \\<tau>\n     \\<Turnstile> X->including\\<^sub>S\\<^sub>e\\<^sub>t(x)->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) \\<triangleq>\n                  X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y)->including\\<^sub>S\\<^sub>e\\<^sub>t(x)", "have H2 : \"Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e (X \\<tau>)\\<rceil>\\<rceil> - {y \\<tau>}\\<rfloor>\\<rfloor> \\<noteq> Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e \\<lfloor>None\\<rfloor>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n     \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n  (X \\<tau>)\\<rceil>\\<rceil> -\n                       {y \\<tau>}\\<rfloor>\\<rfloor> \\<noteq>\n    Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e \\<lfloor>None\\<rfloor>", "by(insert D, simp add: Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e_inject bot_option_def null_option_def)"], ["proof (state)\nthis:\n  Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n   \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n(X \\<tau>)\\<rceil>\\<rceil> -\n                     {y \\<tau>}\\<rfloor>\\<rfloor> \\<noteq>\n  Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e \\<lfloor>None\\<rfloor>\n\ngoal (1 subgoal):\n 1. \\<tau>\n     \\<Turnstile> X->including\\<^sub>S\\<^sub>e\\<^sub>t(x)->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) \\<triangleq>\n                  X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y)->including\\<^sub>S\\<^sub>e\\<^sub>t(x)", "have H : \"(\\<delta> (\\<lambda>_. Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e (X \\<tau>)\\<rceil>\\<rceil> - {y \\<tau>}\\<rfloor>\\<rfloor>)) \\<tau> = true \\<tau>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<delta> (\\<lambda>_.\n                  Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                   \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                (X \\<tau>)\\<rceil>\\<rceil> -\n                                     {y \\<tau>}\\<rfloor>\\<rfloor>))\n     \\<tau> =\n    true \\<tau>", "by(auto simp: OclValid_def false_def true_def defined_def\n                           bot_fun_def bot_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e_def null_fun_def null_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e_def H1 H2)"], ["proof (state)\nthis:\n  (\\<delta> (\\<lambda>_.\n                Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                 \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n              (X \\<tau>)\\<rceil>\\<rceil> -\n                                   {y \\<tau>}\\<rfloor>\\<rfloor>))\n   \\<tau> =\n  true \\<tau>\n\ngoal (1 subgoal):\n 1. \\<tau>\n     \\<Turnstile> X->including\\<^sub>S\\<^sub>e\\<^sub>t(x)->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) \\<triangleq>\n                  X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y)->including\\<^sub>S\\<^sub>e\\<^sub>t(x)", "have Z : \"insert (x \\<tau>) \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e (X \\<tau>)\\<rceil>\\<rceil> - {y \\<tau>} = insert (x \\<tau>) (\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e (X \\<tau>)\\<rceil>\\<rceil> - {y \\<tau>})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. insert (x \\<tau>)\n     \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                      (X \\<tau>)\\<rceil>\\<rceil> -\n    {y \\<tau>} =\n    insert (x \\<tau>)\n     (\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                       (X \\<tau>)\\<rceil>\\<rceil> -\n      {y \\<tau>})", "by(auto simp: E)"], ["proof (state)\nthis:\n  insert (x \\<tau>)\n   \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                    (X \\<tau>)\\<rceil>\\<rceil> -\n  {y \\<tau>} =\n  insert (x \\<tau>)\n   (\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                     (X \\<tau>)\\<rceil>\\<rceil> -\n    {y \\<tau>})\n\ngoal (1 subgoal):\n 1. \\<tau>\n     \\<Turnstile> X->including\\<^sub>S\\<^sub>e\\<^sub>t(x)->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) \\<triangleq>\n                  X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y)->including\\<^sub>S\\<^sub>e\\<^sub>t(x)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<tau>\n     \\<Turnstile> X->including\\<^sub>S\\<^sub>e\\<^sub>t(x)->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) \\<triangleq>\n                  X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y)->including\\<^sub>S\\<^sub>e\\<^sub>t(x)", "apply(insert def_X[THEN  foundation13[THEN iffD2]] val_x[THEN  foundation13[THEN iffD2]]\n               val_y[THEN  foundation13[THEN iffD2]])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<tau> \\<Turnstile> \\<delta> X \\<triangleq> true;\n     \\<tau> \\<Turnstile> \\<upsilon> x \\<triangleq> true;\n     \\<tau> \\<Turnstile> \\<upsilon> y \\<triangleq> true\\<rbrakk>\n    \\<Longrightarrow> \\<tau>\n                       \\<Turnstile> X->including\\<^sub>S\\<^sub>e\\<^sub>t(x)->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) \\<triangleq>\n                                    X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y)->including\\<^sub>S\\<^sub>e\\<^sub>t(x)", "apply(simp add: foundation22 OclIncluding_def OclExcluding_def def_X[THEN foundation16[THEN iffD1]])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>(\\<delta> X) \\<tau> = true \\<tau>;\n     (\\<upsilon> x) \\<tau> = true \\<tau>;\n     (\\<upsilon> y) \\<tau> = true \\<tau>\\<rbrakk>\n    \\<Longrightarrow> ((\\<delta> (\\<lambda>\\<tau>.\n                                     if (\\<delta> X) \\<tau> =\n  true \\<tau> \\<and>\n  (\\<upsilon> x) \\<tau> = true \\<tau>\n                                     then Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n     \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n  (X \\<tau>)\\<rceil>\\<rceil> \\<union>\n                       {x \\<tau>}\\<rfloor>\\<rfloor>\n                                     else invalid \\<tau>))\n                        \\<tau> =\n                       true \\<tau> \\<longrightarrow>\n                       ((\\<delta> (\\<lambda>\\<tau>.\nif (\\<delta> X) \\<tau> = true \\<tau> \\<and>\n   (\\<upsilon> y) \\<tau> = true \\<tau>\nthen Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n      \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n   (X \\<tau>)\\<rceil>\\<rceil> -\n                        {y \\<tau>}\\<rfloor>\\<rfloor>\nelse \\<bottom>))\n                         \\<tau> =\n                        true \\<tau> \\<longrightarrow>\n                        Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                         \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                      (Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                        \\<lfloor>\\<lfloor>insert (x \\<tau>)\n     \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                      (X \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>)\\<rceil>\\<rceil> -\n     {y \\<tau>}\\<rfloor>\\<rfloor> =\n                        Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                         \\<lfloor>\\<lfloor>insert (x \\<tau>)\n      \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                       (Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                         \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                      (X \\<tau>)\\<rceil>\\<rceil> -\n     {y \\<tau>}\\<rfloor>\\<rfloor>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>) \\<and>\n                       ((\\<delta> (\\<lambda>\\<tau>.\nif (\\<delta> X) \\<tau> = true \\<tau> \\<and>\n   (\\<upsilon> y) \\<tau> = true \\<tau>\nthen Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n      \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n   (X \\<tau>)\\<rceil>\\<rceil> -\n                        {y \\<tau>}\\<rfloor>\\<rfloor>\nelse \\<bottom>))\n                         \\<tau> \\<noteq>\n                        true \\<tau> \\<longrightarrow>\n                        Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                         \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                      (Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                        \\<lfloor>\\<lfloor>insert (x \\<tau>)\n     \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                      (X \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>)\\<rceil>\\<rceil> -\n     {y \\<tau>}\\<rfloor>\\<rfloor> =\n                        invalid \\<tau>)) \\<and>\n                      ((\\<delta> (\\<lambda>\\<tau>.\n                                     if (\\<delta> X) \\<tau> =\n  true \\<tau> \\<and>\n  (\\<upsilon> x) \\<tau> = true \\<tau>\n                                     then Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n     \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n  (X \\<tau>)\\<rceil>\\<rceil> \\<union>\n                       {x \\<tau>}\\<rfloor>\\<rfloor>\n                                     else invalid \\<tau>))\n                        \\<tau> \\<noteq>\n                       true \\<tau> \\<longrightarrow>\n                       ((\\<delta> (\\<lambda>\\<tau>.\nif (\\<delta> X) \\<tau> = true \\<tau> \\<and>\n   (\\<upsilon> y) \\<tau> = true \\<tau>\nthen Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n      \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n   (X \\<tau>)\\<rceil>\\<rceil> -\n                        {y \\<tau>}\\<rfloor>\\<rfloor>\nelse \\<bottom>))\n                         \\<tau> =\n                        true \\<tau> \\<longrightarrow>\n                        \\<bottom> =\n                        Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                         \\<lfloor>\\<lfloor>insert (x \\<tau>)\n      \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                       (Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                         \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                      (X \\<tau>)\\<rceil>\\<rceil> -\n     {y \\<tau>}\\<rfloor>\\<rfloor>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>) \\<and>\n                       ((\\<delta> (\\<lambda>\\<tau>.\nif (\\<delta> X) \\<tau> = true \\<tau> \\<and>\n   (\\<upsilon> y) \\<tau> = true \\<tau>\nthen Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n      \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n   (X \\<tau>)\\<rceil>\\<rceil> -\n                        {y \\<tau>}\\<rfloor>\\<rfloor>\nelse \\<bottom>))\n                         \\<tau> \\<noteq>\n                        true \\<tau> \\<longrightarrow>\n                        \\<bottom> = invalid \\<tau>))", "apply(subst cp_defined, simp)+"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>(\\<delta> X) \\<tau> = true \\<tau>;\n     (\\<upsilon> x) \\<tau> = true \\<tau>;\n     (\\<upsilon> y) \\<tau> = true \\<tau>\\<rbrakk>\n    \\<Longrightarrow> ((\\<delta> (\\<lambda>_.\n                                     Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n\\<lfloor>\\<lfloor>insert (x \\<tau>)\n                   \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                    (X\n\\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>))\n                        \\<tau> =\n                       true \\<tau> \\<longrightarrow>\n                       ((\\<delta> (\\<lambda>_.\nAbs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                    (X \\<tau>)\\<rceil>\\<rceil> -\n                   {y \\<tau>}\\<rfloor>\\<rfloor>))\n                         \\<tau> =\n                        true \\<tau> \\<longrightarrow>\n                        Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                         \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                      (Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                        \\<lfloor>\\<lfloor>insert (x \\<tau>)\n     \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                      (X \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>)\\<rceil>\\<rceil> -\n     {y \\<tau>}\\<rfloor>\\<rfloor> =\n                        Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                         \\<lfloor>\\<lfloor>insert (x \\<tau>)\n      \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                       (Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                         \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                      (X \\<tau>)\\<rceil>\\<rceil> -\n     {y \\<tau>}\\<rfloor>\\<rfloor>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>) \\<and>\n                       ((\\<delta> (\\<lambda>_.\nAbs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                    (X \\<tau>)\\<rceil>\\<rceil> -\n                   {y \\<tau>}\\<rfloor>\\<rfloor>))\n                         \\<tau> \\<noteq>\n                        true \\<tau> \\<longrightarrow>\n                        Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                         \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                      (Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                        \\<lfloor>\\<lfloor>insert (x \\<tau>)\n     \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                      (X \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>)\\<rceil>\\<rceil> -\n     {y \\<tau>}\\<rfloor>\\<rfloor> =\n                        invalid \\<tau>)) \\<and>\n                      ((\\<delta> (\\<lambda>_.\n                                     Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n\\<lfloor>\\<lfloor>insert (x \\<tau>)\n                   \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                    (X\n\\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>))\n                        \\<tau> \\<noteq>\n                       true \\<tau> \\<longrightarrow>\n                       ((\\<delta> (\\<lambda>_.\nAbs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                    (X \\<tau>)\\<rceil>\\<rceil> -\n                   {y \\<tau>}\\<rfloor>\\<rfloor>))\n                         \\<tau> =\n                        true \\<tau> \\<longrightarrow>\n                        \\<bottom> =\n                        Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                         \\<lfloor>\\<lfloor>insert (x \\<tau>)\n      \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                       (Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                         \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                      (X \\<tau>)\\<rceil>\\<rceil> -\n     {y \\<tau>}\\<rfloor>\\<rfloor>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>) \\<and>\n                       ((\\<delta> (\\<lambda>_.\nAbs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                    (X \\<tau>)\\<rceil>\\<rceil> -\n                   {y \\<tau>}\\<rfloor>\\<rfloor>))\n                         \\<tau> \\<noteq>\n                        true \\<tau> \\<longrightarrow>\n                        \\<bottom> = invalid \\<tau>))", "apply(simp add: G H Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e_inverse[OF C] Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e_inverse[OF D] Z)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  \\<tau>\n   \\<Turnstile> X->including\\<^sub>S\\<^sub>e\\<^sub>t(x)->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) \\<triangleq>\n                X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y)->including\\<^sub>S\\<^sub>e\\<^sub>t(x)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma OclExcluding_charn2:\nassumes def_X:\"\\<tau> \\<Turnstile> (\\<delta> X)\"\nand     val_x:\"\\<tau> \\<Turnstile> (\\<upsilon> x)\"\nshows         \"\\<tau> \\<Turnstile> (((X->including\\<^sub>S\\<^sub>e\\<^sub>t(x))->excluding\\<^sub>S\\<^sub>e\\<^sub>t(x)) \\<triangleq> (X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(x)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<tau>\n     \\<Turnstile> X->including\\<^sub>S\\<^sub>e\\<^sub>t(x)->excluding\\<^sub>S\\<^sub>e\\<^sub>t(x) \\<triangleq>\n                  X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(x)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<tau>\n     \\<Turnstile> X->including\\<^sub>S\\<^sub>e\\<^sub>t(x)->excluding\\<^sub>S\\<^sub>e\\<^sub>t(x) \\<triangleq>\n                  X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(x)", "have C : \"\\<lfloor>\\<lfloor>insert (x \\<tau>) \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e (X \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor> \\<in> {X. X = bot \\<or> X = null \\<or> (\\<forall>x\\<in>\\<lceil>\\<lceil>X\\<rceil>\\<rceil>. x \\<noteq> bot)}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lfloor>\\<lfloor>insert (x \\<tau>)\n                       \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n  (X \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>\n    \\<in> {X. X = \\<bottom> \\<or>\n              X = null \\<or>\n              (\\<forall>x\\<in>\\<lceil>\\<lceil>X\\<rceil>\\<rceil>.\n                  x \\<noteq> \\<bottom>)}", "by(insert def_X val_x, frule Set_inv_lemma, simp add: foundation18 invalid_def)"], ["proof (state)\nthis:\n  \\<lfloor>\\<lfloor>insert (x \\<tau>)\n                     \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n(X \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>\n  \\<in> {X. X = \\<bottom> \\<or>\n            X = null \\<or>\n            (\\<forall>x\\<in>\\<lceil>\\<lceil>X\\<rceil>\\<rceil>.\n                x \\<noteq> \\<bottom>)}\n\ngoal (1 subgoal):\n 1. \\<tau>\n     \\<Turnstile> X->including\\<^sub>S\\<^sub>e\\<^sub>t(x)->excluding\\<^sub>S\\<^sub>e\\<^sub>t(x) \\<triangleq>\n                  X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(x)", "have G1 : \"Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e \\<lfloor>\\<lfloor>insert (x \\<tau>) \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e (X \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor> \\<noteq> Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e None\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n     \\<lfloor>\\<lfloor>insert (x \\<tau>)\n                        \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n   (X \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor> \\<noteq>\n    Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e None", "by(insert C, simp add: Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e_inject bot_option_def null_option_def)"], ["proof (state)\nthis:\n  Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n   \\<lfloor>\\<lfloor>insert (x \\<tau>)\n                      \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n (X \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor> \\<noteq>\n  Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e None\n\ngoal (1 subgoal):\n 1. \\<tau>\n     \\<Turnstile> X->including\\<^sub>S\\<^sub>e\\<^sub>t(x)->excluding\\<^sub>S\\<^sub>e\\<^sub>t(x) \\<triangleq>\n                  X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(x)", "have G2 : \"Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e \\<lfloor>\\<lfloor>insert (x \\<tau>) \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e (X \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor> \\<noteq> Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e \\<lfloor>None\\<rfloor>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n     \\<lfloor>\\<lfloor>insert (x \\<tau>)\n                        \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n   (X \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor> \\<noteq>\n    Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e \\<lfloor>None\\<rfloor>", "by(insert C, simp add: Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e_inject bot_option_def null_option_def)"], ["proof (state)\nthis:\n  Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n   \\<lfloor>\\<lfloor>insert (x \\<tau>)\n                      \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n (X \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor> \\<noteq>\n  Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e \\<lfloor>None\\<rfloor>\n\ngoal (1 subgoal):\n 1. \\<tau>\n     \\<Turnstile> X->including\\<^sub>S\\<^sub>e\\<^sub>t(x)->excluding\\<^sub>S\\<^sub>e\\<^sub>t(x) \\<triangleq>\n                  X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(x)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<tau>\n     \\<Turnstile> X->including\\<^sub>S\\<^sub>e\\<^sub>t(x)->excluding\\<^sub>S\\<^sub>e\\<^sub>t(x) \\<triangleq>\n                  X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(x)", "apply(insert def_X[THEN foundation16[THEN iffD1]]\n                val_x[THEN foundation18[THEN iffD1]])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>X \\<tau> \\<noteq> \\<bottom> \\<and> X \\<tau> \\<noteq> null;\n     x \\<tau> \\<noteq> invalid \\<tau>\\<rbrakk>\n    \\<Longrightarrow> \\<tau>\n                       \\<Turnstile> X->including\\<^sub>S\\<^sub>e\\<^sub>t(x)->excluding\\<^sub>S\\<^sub>e\\<^sub>t(x) \\<triangleq>\n                                    X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(x)", "apply(auto simp: OclValid_def bot_fun_def OclIncluding_def OclIncludes_def false_def true_def\n                    invalid_def defined_def valid_def bot_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e_def null_fun_def null_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e_def\n                    StrongEq_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<tau> \\<noteq> \\<bottom>;\n     X \\<tau> \\<noteq> Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e None;\n     X \\<tau> \\<noteq>\n     Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e \\<lfloor>None\\<rfloor>\\<rbrakk>\n    \\<Longrightarrow> \\<lambda>\\<tau>.\n                         if (if X \\<tau> =\n                                Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                 None \\<or>\n                                X \\<tau> =\n                                Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                 \\<lfloor>None\\<rfloor>\n                             then false \\<tau> else true \\<tau>) =\n                            \\<lfloor>\\<lfloor>True\\<rfloor>\\<rfloor> \\<and>\n                            (if x \\<tau> = \\<bottom> then false \\<tau>\n                             else true \\<tau>) =\n                            \\<lfloor>\\<lfloor>True\\<rfloor>\\<rfloor>\n                         then Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                               \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                            (X \\<tau>)\\<rceil>\\<rceil> \\<union>\n           {x \\<tau>}\\<rfloor>\\<rfloor>\n                         else invalid\n                               \\<tau>->excluding\\<^sub>S\\<^sub>e\\<^sub>t(x)\n                       \\<tau> =\n                      X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(x) \\<tau>", "apply(subst OclExcluding.cp0)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<tau> \\<noteq> \\<bottom>;\n     X \\<tau> \\<noteq> Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e None;\n     X \\<tau> \\<noteq>\n     Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e \\<lfloor>None\\<rfloor>\\<rbrakk>\n    \\<Longrightarrow> \\<lambda>_.\n                         if (if X \\<tau> =\n                                Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                 None \\<or>\n                                X \\<tau> =\n                                Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                 \\<lfloor>None\\<rfloor>\n                             then false \\<tau> else true \\<tau>) =\n                            \\<lfloor>\\<lfloor>True\\<rfloor>\\<rfloor> \\<and>\n                            (if x \\<tau> = \\<bottom> then false \\<tau>\n                             else true \\<tau>) =\n                            \\<lfloor>\\<lfloor>True\\<rfloor>\\<rfloor>\n                         then Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                               \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                            (X \\<tau>)\\<rceil>\\<rceil> \\<union>\n           {x \\<tau>}\\<rfloor>\\<rfloor>\n                         else invalid\n                               \\<tau>->excluding\\<^sub>S\\<^sub>e\\<^sub>t(\\<lambda>_.\nx \\<tau>)\n                       \\<tau> =\n                      X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(x) \\<tau>", "apply(auto simp:OclExcluding_def)"], ["proof (prove)\ngoal (10 subgoals):\n 1. \\<lbrakk>x \\<tau> \\<noteq> \\<bottom>;\n     X \\<tau> \\<noteq> Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e None;\n     X \\<tau> \\<noteq>\n     Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e \\<lfloor>None\\<rfloor>;\n     true \\<tau> = \\<lfloor>\\<lfloor>True\\<rfloor>\\<rfloor>;\n     (\\<delta> (\\<lambda>_.\n                   Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                    \\<lfloor>\\<lfloor>insert (x \\<tau>)\n \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                  (X \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>))\n      \\<tau> =\n     \\<lfloor>\\<lfloor>True\\<rfloor>\\<rfloor>;\n     (\\<upsilon> (\\<lambda>_. x \\<tau>)) \\<tau> =\n     \\<lfloor>\\<lfloor>True\\<rfloor>\\<rfloor>;\n     (\\<delta> X) \\<tau> = \\<lfloor>\\<lfloor>True\\<rfloor>\\<rfloor>;\n     (\\<upsilon> x) \\<tau> =\n     \\<lfloor>\\<lfloor>True\\<rfloor>\\<rfloor>\\<rbrakk>\n    \\<Longrightarrow> Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                       \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                    (Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                      \\<lfloor>\\<lfloor>insert (x \\<tau>)\n   \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                    (X \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>)\\<rceil>\\<rceil> -\n   {x \\<tau>}\\<rfloor>\\<rfloor> =\n                      Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                       \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                    (X \\<tau>)\\<rceil>\\<rceil> -\n   {x \\<tau>}\\<rfloor>\\<rfloor>\n 2. \\<lbrakk>x \\<tau> \\<noteq> \\<bottom>;\n     X \\<tau> \\<noteq> Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e None;\n     X \\<tau> \\<noteq>\n     Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e \\<lfloor>None\\<rfloor>;\n     true \\<tau> = \\<lfloor>\\<lfloor>True\\<rfloor>\\<rfloor>;\n     (\\<delta> (\\<lambda>_.\n                   Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                    \\<lfloor>\\<lfloor>insert (x \\<tau>)\n \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                  (X \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>))\n      \\<tau> =\n     \\<lfloor>\\<lfloor>True\\<rfloor>\\<rfloor>;\n     (\\<upsilon> (\\<lambda>_. x \\<tau>)) \\<tau> =\n     \\<lfloor>\\<lfloor>True\\<rfloor>\\<rfloor>;\n     (\\<delta> X) \\<tau> \\<noteq>\n     \\<lfloor>\\<lfloor>True\\<rfloor>\\<rfloor>\\<rbrakk>\n    \\<Longrightarrow> Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                       \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                    (Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                      \\<lfloor>\\<lfloor>insert (x \\<tau>)\n   \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                    (X \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>)\\<rceil>\\<rceil> -\n   {x \\<tau>}\\<rfloor>\\<rfloor> =\n                      \\<bottom>\n 3. \\<lbrakk>x \\<tau> \\<noteq> \\<bottom>;\n     X \\<tau> \\<noteq> Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e None;\n     X \\<tau> \\<noteq>\n     Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e \\<lfloor>None\\<rfloor>;\n     true \\<tau> = \\<lfloor>\\<lfloor>True\\<rfloor>\\<rfloor>;\n     (\\<delta> (\\<lambda>_.\n                   Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                    \\<lfloor>\\<lfloor>insert (x \\<tau>)\n \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                  (X \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>))\n      \\<tau> =\n     \\<lfloor>\\<lfloor>True\\<rfloor>\\<rfloor>;\n     (\\<upsilon> (\\<lambda>_. x \\<tau>)) \\<tau> =\n     \\<lfloor>\\<lfloor>True\\<rfloor>\\<rfloor>;\n     (\\<upsilon> x) \\<tau> \\<noteq>\n     \\<lfloor>\\<lfloor>True\\<rfloor>\\<rfloor>\\<rbrakk>\n    \\<Longrightarrow> Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                       \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                    (Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                      \\<lfloor>\\<lfloor>insert (x \\<tau>)\n   \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                    (X \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>)\\<rceil>\\<rceil> -\n   {x \\<tau>}\\<rfloor>\\<rfloor> =\n                      \\<bottom>\n 4. \\<lbrakk>x \\<tau> \\<noteq> \\<bottom>;\n     X \\<tau> \\<noteq> Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e None;\n     X \\<tau> \\<noteq>\n     Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e \\<lfloor>None\\<rfloor>;\n     true \\<tau> = \\<lfloor>\\<lfloor>True\\<rfloor>\\<rfloor>;\n     (\\<delta> X) \\<tau> = \\<lfloor>\\<lfloor>True\\<rfloor>\\<rfloor>;\n     (\\<upsilon> x) \\<tau> = \\<lfloor>\\<lfloor>True\\<rfloor>\\<rfloor>;\n     (\\<delta> (\\<lambda>_.\n                   Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                    \\<lfloor>\\<lfloor>insert (x \\<tau>)\n \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                  (X \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>))\n      \\<tau> \\<noteq>\n     \\<lfloor>\\<lfloor>True\\<rfloor>\\<rfloor>\\<rbrakk>\n    \\<Longrightarrow> \\<bottom> =\n                      Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                       \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                    (X \\<tau>)\\<rceil>\\<rceil> -\n   {x \\<tau>}\\<rfloor>\\<rfloor>\n 5. \\<lbrakk>x \\<tau> \\<noteq> \\<bottom>;\n     X \\<tau> \\<noteq> Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e None;\n     X \\<tau> \\<noteq>\n     Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e \\<lfloor>None\\<rfloor>;\n     true \\<tau> = \\<lfloor>\\<lfloor>True\\<rfloor>\\<rfloor>;\n     (\\<delta> X) \\<tau> = \\<lfloor>\\<lfloor>True\\<rfloor>\\<rfloor>;\n     (\\<upsilon> x) \\<tau> = \\<lfloor>\\<lfloor>True\\<rfloor>\\<rfloor>;\n     (\\<upsilon> (\\<lambda>_. x \\<tau>)) \\<tau> \\<noteq>\n     \\<lfloor>\\<lfloor>True\\<rfloor>\\<rfloor>\\<rbrakk>\n    \\<Longrightarrow> \\<bottom> =\n                      Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                       \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                    (X \\<tau>)\\<rceil>\\<rceil> -\n   {x \\<tau>}\\<rfloor>\\<rfloor>\n 6. \\<lbrakk>x \\<tau> \\<noteq> \\<bottom>;\n     X \\<tau> \\<noteq> Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e None;\n     X \\<tau> \\<noteq>\n     Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e \\<lfloor>None\\<rfloor>;\n     true \\<tau> \\<noteq> \\<lfloor>\\<lfloor>True\\<rfloor>\\<rfloor>;\n     (\\<delta> (\\<lambda>_. invalid \\<tau>)) \\<tau> = true \\<tau>;\n     (\\<upsilon> (\\<lambda>_. x \\<tau>)) \\<tau> = true \\<tau>;\n     (\\<delta> X) \\<tau> = true \\<tau>;\n     (\\<upsilon> x) \\<tau> = true \\<tau>\\<rbrakk>\n    \\<Longrightarrow> Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                       \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                    (invalid \\<tau>)\\<rceil>\\<rceil> -\n   {x \\<tau>}\\<rfloor>\\<rfloor> =\n                      Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                       \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                    (X \\<tau>)\\<rceil>\\<rceil> -\n   {x \\<tau>}\\<rfloor>\\<rfloor>\n 7. \\<lbrakk>x \\<tau> \\<noteq> \\<bottom>;\n     X \\<tau> \\<noteq> Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e None;\n     X \\<tau> \\<noteq>\n     Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e \\<lfloor>None\\<rfloor>;\n     true \\<tau> \\<noteq> \\<lfloor>\\<lfloor>True\\<rfloor>\\<rfloor>;\n     (\\<delta> (\\<lambda>_. invalid \\<tau>)) \\<tau> = true \\<tau>;\n     (\\<upsilon> (\\<lambda>_. x \\<tau>)) \\<tau> = true \\<tau>;\n     (\\<delta> X) \\<tau> \\<noteq> true \\<tau>\\<rbrakk>\n    \\<Longrightarrow> Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                       \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                    (invalid \\<tau>)\\<rceil>\\<rceil> -\n   {x \\<tau>}\\<rfloor>\\<rfloor> =\n                      \\<bottom>\n 8. \\<lbrakk>x \\<tau> \\<noteq> \\<bottom>;\n     X \\<tau> \\<noteq> Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e None;\n     X \\<tau> \\<noteq>\n     Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e \\<lfloor>None\\<rfloor>;\n     true \\<tau> \\<noteq> \\<lfloor>\\<lfloor>True\\<rfloor>\\<rfloor>;\n     (\\<delta> (\\<lambda>_. invalid \\<tau>)) \\<tau> = true \\<tau>;\n     (\\<upsilon> (\\<lambda>_. x \\<tau>)) \\<tau> = true \\<tau>;\n     (\\<upsilon> x) \\<tau> \\<noteq> true \\<tau>\\<rbrakk>\n    \\<Longrightarrow> Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                       \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                    (invalid \\<tau>)\\<rceil>\\<rceil> -\n   {x \\<tau>}\\<rfloor>\\<rfloor> =\n                      \\<bottom>\n 9. \\<lbrakk>x \\<tau> \\<noteq> \\<bottom>;\n     X \\<tau> \\<noteq> Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e None;\n     X \\<tau> \\<noteq>\n     Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e \\<lfloor>None\\<rfloor>;\n     true \\<tau> \\<noteq> \\<lfloor>\\<lfloor>True\\<rfloor>\\<rfloor>;\n     (\\<delta> X) \\<tau> = true \\<tau>; (\\<upsilon> x) \\<tau> = true \\<tau>;\n     (\\<delta> (\\<lambda>_. invalid \\<tau>)) \\<tau> \\<noteq>\n     true \\<tau>\\<rbrakk>\n    \\<Longrightarrow> \\<bottom> =\n                      Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                       \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                    (X \\<tau>)\\<rceil>\\<rceil> -\n   {x \\<tau>}\\<rfloor>\\<rfloor>\n 10. \\<lbrakk>x \\<tau> \\<noteq> \\<bottom>;\n      X \\<tau> \\<noteq> Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e None;\n      X \\<tau> \\<noteq>\n      Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e \\<lfloor>None\\<rfloor>;\n      true \\<tau> \\<noteq> \\<lfloor>\\<lfloor>True\\<rfloor>\\<rfloor>;\n      (\\<delta> X) \\<tau> = true \\<tau>;\n      (\\<upsilon> x) \\<tau> = true \\<tau>;\n      (\\<upsilon> (\\<lambda>_. x \\<tau>)) \\<tau> \\<noteq>\n      true \\<tau>\\<rbrakk>\n     \\<Longrightarrow> \\<bottom> =\n                       Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                        \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                     (X \\<tau>)\\<rceil>\\<rceil> -\n    {x \\<tau>}\\<rfloor>\\<rfloor>", "apply(simp add: Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e_inverse[OF C])"], ["proof (prove)\ngoal (9 subgoals):\n 1. \\<lbrakk>x \\<tau> \\<noteq> \\<bottom>;\n     X \\<tau> \\<noteq> Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e None;\n     X \\<tau> \\<noteq>\n     Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e \\<lfloor>None\\<rfloor>;\n     true \\<tau> = \\<lfloor>\\<lfloor>True\\<rfloor>\\<rfloor>;\n     (\\<delta> (\\<lambda>_.\n                   Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                    \\<lfloor>\\<lfloor>insert (x \\<tau>)\n \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                  (X \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>))\n      \\<tau> =\n     \\<lfloor>\\<lfloor>True\\<rfloor>\\<rfloor>;\n     (\\<upsilon> (\\<lambda>_. x \\<tau>)) \\<tau> =\n     \\<lfloor>\\<lfloor>True\\<rfloor>\\<rfloor>;\n     (\\<delta> X) \\<tau> \\<noteq>\n     \\<lfloor>\\<lfloor>True\\<rfloor>\\<rfloor>\\<rbrakk>\n    \\<Longrightarrow> Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                       \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                    (Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                      \\<lfloor>\\<lfloor>insert (x \\<tau>)\n   \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                    (X \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>)\\<rceil>\\<rceil> -\n   {x \\<tau>}\\<rfloor>\\<rfloor> =\n                      \\<bottom>\n 2. \\<lbrakk>x \\<tau> \\<noteq> \\<bottom>;\n     X \\<tau> \\<noteq> Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e None;\n     X \\<tau> \\<noteq>\n     Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e \\<lfloor>None\\<rfloor>;\n     true \\<tau> = \\<lfloor>\\<lfloor>True\\<rfloor>\\<rfloor>;\n     (\\<delta> (\\<lambda>_.\n                   Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                    \\<lfloor>\\<lfloor>insert (x \\<tau>)\n \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                  (X \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>))\n      \\<tau> =\n     \\<lfloor>\\<lfloor>True\\<rfloor>\\<rfloor>;\n     (\\<upsilon> (\\<lambda>_. x \\<tau>)) \\<tau> =\n     \\<lfloor>\\<lfloor>True\\<rfloor>\\<rfloor>;\n     (\\<upsilon> x) \\<tau> \\<noteq>\n     \\<lfloor>\\<lfloor>True\\<rfloor>\\<rfloor>\\<rbrakk>\n    \\<Longrightarrow> Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                       \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                    (Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                      \\<lfloor>\\<lfloor>insert (x \\<tau>)\n   \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                    (X \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>)\\<rceil>\\<rceil> -\n   {x \\<tau>}\\<rfloor>\\<rfloor> =\n                      \\<bottom>\n 3. \\<lbrakk>x \\<tau> \\<noteq> \\<bottom>;\n     X \\<tau> \\<noteq> Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e None;\n     X \\<tau> \\<noteq>\n     Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e \\<lfloor>None\\<rfloor>;\n     true \\<tau> = \\<lfloor>\\<lfloor>True\\<rfloor>\\<rfloor>;\n     (\\<delta> X) \\<tau> = \\<lfloor>\\<lfloor>True\\<rfloor>\\<rfloor>;\n     (\\<upsilon> x) \\<tau> = \\<lfloor>\\<lfloor>True\\<rfloor>\\<rfloor>;\n     (\\<delta> (\\<lambda>_.\n                   Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                    \\<lfloor>\\<lfloor>insert (x \\<tau>)\n \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                  (X \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>))\n      \\<tau> \\<noteq>\n     \\<lfloor>\\<lfloor>True\\<rfloor>\\<rfloor>\\<rbrakk>\n    \\<Longrightarrow> \\<bottom> =\n                      Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                       \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                    (X \\<tau>)\\<rceil>\\<rceil> -\n   {x \\<tau>}\\<rfloor>\\<rfloor>\n 4. \\<lbrakk>x \\<tau> \\<noteq> \\<bottom>;\n     X \\<tau> \\<noteq> Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e None;\n     X \\<tau> \\<noteq>\n     Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e \\<lfloor>None\\<rfloor>;\n     true \\<tau> = \\<lfloor>\\<lfloor>True\\<rfloor>\\<rfloor>;\n     (\\<delta> X) \\<tau> = \\<lfloor>\\<lfloor>True\\<rfloor>\\<rfloor>;\n     (\\<upsilon> x) \\<tau> = \\<lfloor>\\<lfloor>True\\<rfloor>\\<rfloor>;\n     (\\<upsilon> (\\<lambda>_. x \\<tau>)) \\<tau> \\<noteq>\n     \\<lfloor>\\<lfloor>True\\<rfloor>\\<rfloor>\\<rbrakk>\n    \\<Longrightarrow> \\<bottom> =\n                      Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                       \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                    (X \\<tau>)\\<rceil>\\<rceil> -\n   {x \\<tau>}\\<rfloor>\\<rfloor>\n 5. \\<lbrakk>x \\<tau> \\<noteq> \\<bottom>;\n     X \\<tau> \\<noteq> Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e None;\n     X \\<tau> \\<noteq>\n     Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e \\<lfloor>None\\<rfloor>;\n     true \\<tau> \\<noteq> \\<lfloor>\\<lfloor>True\\<rfloor>\\<rfloor>;\n     (\\<delta> (\\<lambda>_. invalid \\<tau>)) \\<tau> = true \\<tau>;\n     (\\<upsilon> (\\<lambda>_. x \\<tau>)) \\<tau> = true \\<tau>;\n     (\\<delta> X) \\<tau> = true \\<tau>;\n     (\\<upsilon> x) \\<tau> = true \\<tau>\\<rbrakk>\n    \\<Longrightarrow> Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                       \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                    (invalid \\<tau>)\\<rceil>\\<rceil> -\n   {x \\<tau>}\\<rfloor>\\<rfloor> =\n                      Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                       \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                    (X \\<tau>)\\<rceil>\\<rceil> -\n   {x \\<tau>}\\<rfloor>\\<rfloor>\n 6. \\<lbrakk>x \\<tau> \\<noteq> \\<bottom>;\n     X \\<tau> \\<noteq> Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e None;\n     X \\<tau> \\<noteq>\n     Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e \\<lfloor>None\\<rfloor>;\n     true \\<tau> \\<noteq> \\<lfloor>\\<lfloor>True\\<rfloor>\\<rfloor>;\n     (\\<delta> (\\<lambda>_. invalid \\<tau>)) \\<tau> = true \\<tau>;\n     (\\<upsilon> (\\<lambda>_. x \\<tau>)) \\<tau> = true \\<tau>;\n     (\\<delta> X) \\<tau> \\<noteq> true \\<tau>\\<rbrakk>\n    \\<Longrightarrow> Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                       \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                    (invalid \\<tau>)\\<rceil>\\<rceil> -\n   {x \\<tau>}\\<rfloor>\\<rfloor> =\n                      \\<bottom>\n 7. \\<lbrakk>x \\<tau> \\<noteq> \\<bottom>;\n     X \\<tau> \\<noteq> Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e None;\n     X \\<tau> \\<noteq>\n     Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e \\<lfloor>None\\<rfloor>;\n     true \\<tau> \\<noteq> \\<lfloor>\\<lfloor>True\\<rfloor>\\<rfloor>;\n     (\\<delta> (\\<lambda>_. invalid \\<tau>)) \\<tau> = true \\<tau>;\n     (\\<upsilon> (\\<lambda>_. x \\<tau>)) \\<tau> = true \\<tau>;\n     (\\<upsilon> x) \\<tau> \\<noteq> true \\<tau>\\<rbrakk>\n    \\<Longrightarrow> Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                       \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                    (invalid \\<tau>)\\<rceil>\\<rceil> -\n   {x \\<tau>}\\<rfloor>\\<rfloor> =\n                      \\<bottom>\n 8. \\<lbrakk>x \\<tau> \\<noteq> \\<bottom>;\n     X \\<tau> \\<noteq> Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e None;\n     X \\<tau> \\<noteq>\n     Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e \\<lfloor>None\\<rfloor>;\n     true \\<tau> \\<noteq> \\<lfloor>\\<lfloor>True\\<rfloor>\\<rfloor>;\n     (\\<delta> X) \\<tau> = true \\<tau>; (\\<upsilon> x) \\<tau> = true \\<tau>;\n     (\\<delta> (\\<lambda>_. invalid \\<tau>)) \\<tau> \\<noteq>\n     true \\<tau>\\<rbrakk>\n    \\<Longrightarrow> \\<bottom> =\n                      Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                       \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                    (X \\<tau>)\\<rceil>\\<rceil> -\n   {x \\<tau>}\\<rfloor>\\<rfloor>\n 9. \\<lbrakk>x \\<tau> \\<noteq> \\<bottom>;\n     X \\<tau> \\<noteq> Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e None;\n     X \\<tau> \\<noteq>\n     Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e \\<lfloor>None\\<rfloor>;\n     true \\<tau> \\<noteq> \\<lfloor>\\<lfloor>True\\<rfloor>\\<rfloor>;\n     (\\<delta> X) \\<tau> = true \\<tau>; (\\<upsilon> x) \\<tau> = true \\<tau>;\n     (\\<upsilon> (\\<lambda>_. x \\<tau>)) \\<tau> \\<noteq>\n     true \\<tau>\\<rbrakk>\n    \\<Longrightarrow> \\<bottom> =\n                      Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                       \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                    (X \\<tau>)\\<rceil>\\<rceil> -\n   {x \\<tau>}\\<rfloor>\\<rfloor>", "apply(simp_all add: false_def true_def defined_def valid_def\n                               null_fun_def bot_fun_def null_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e_def bot_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e_def\n                          split: bool.split_asm HOL.if_split_asm option.split)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<tau> \\<noteq> \\<bottom>;\n     X \\<tau> \\<noteq> Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e None;\n     X \\<tau> \\<noteq>\n     Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e \\<lfloor>None\\<rfloor>;\n     Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n      \\<lfloor>\\<lfloor>insert (x \\<tau>)\n                         \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n    (X \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor> =\n     Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e None \\<or>\n     Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n      \\<lfloor>\\<lfloor>insert (x \\<tau>)\n                         \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n    (X \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor> =\n     Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e \\<lfloor>None\\<rfloor>\\<rbrakk>\n    \\<Longrightarrow> Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e None =\n                      Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                       \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                    (X \\<tau>)\\<rceil>\\<rceil> -\n   {x \\<tau>}\\<rfloor>\\<rfloor>", "apply(auto simp: G1 G2)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  \\<tau>\n   \\<Turnstile> X->including\\<^sub>S\\<^sub>e\\<^sub>t(x)->excluding\\<^sub>S\\<^sub>e\\<^sub>t(x) \\<triangleq>\n                X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(x)\n\ngoal:\nNo subgoals!", "qed"], ["", "theorem OclExcluding_charn3:  \"((X->including\\<^sub>S\\<^sub>e\\<^sub>t(x))->excluding\\<^sub>S\\<^sub>e\\<^sub>t(x)) = (X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(x))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. X->including\\<^sub>S\\<^sub>e\\<^sub>t(x)->excluding\\<^sub>S\\<^sub>e\\<^sub>t(x) =\n    X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(x)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. X->including\\<^sub>S\\<^sub>e\\<^sub>t(x)->excluding\\<^sub>S\\<^sub>e\\<^sub>t(x) =\n    X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(x)", "have A1 : \"\\<And>\\<tau>. \\<tau> \\<Turnstile> (X \\<triangleq> invalid) \\<Longrightarrow> (X->including\\<^sub>S\\<^sub>e\\<^sub>t(x)->excluding\\<^sub>S\\<^sub>e\\<^sub>t(x)) \\<tau> = invalid \\<tau>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<tau>.\n       \\<tau> \\<Turnstile> X \\<triangleq> invalid \\<Longrightarrow>\n       X->including\\<^sub>S\\<^sub>e\\<^sub>t(x)->excluding\\<^sub>S\\<^sub>e\\<^sub>t(x)\n        \\<tau> =\n       invalid \\<tau>", "apply(rule foundation22[THEN iffD1])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<tau>.\n       \\<tau> \\<Turnstile> X \\<triangleq> invalid \\<Longrightarrow>\n       \\<tau>\n        \\<Turnstile> X->including\\<^sub>S\\<^sub>e\\<^sub>t(x)->excluding\\<^sub>S\\<^sub>e\\<^sub>t(x) \\<triangleq>\n                     invalid", "by(erule StrongEq_L_subst2_rev, simp,simp)"], ["proof (state)\nthis:\n  ?\\<tau> \\<Turnstile> X \\<triangleq> invalid \\<Longrightarrow>\n  X->including\\<^sub>S\\<^sub>e\\<^sub>t(x)->excluding\\<^sub>S\\<^sub>e\\<^sub>t(x)\n   ?\\<tau> =\n  invalid ?\\<tau>\n\ngoal (1 subgoal):\n 1. X->including\\<^sub>S\\<^sub>e\\<^sub>t(x)->excluding\\<^sub>S\\<^sub>e\\<^sub>t(x) =\n    X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(x)", "have A1': \"\\<And>\\<tau>. \\<tau> \\<Turnstile> (X \\<triangleq> invalid) \\<Longrightarrow> (X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(x)) \\<tau> = invalid \\<tau>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<tau>.\n       \\<tau> \\<Turnstile> X \\<triangleq> invalid \\<Longrightarrow>\n       X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(x) \\<tau> = invalid \\<tau>", "apply(rule foundation22[THEN iffD1])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<tau>.\n       \\<tau> \\<Turnstile> X \\<triangleq> invalid \\<Longrightarrow>\n       \\<tau>\n        \\<Turnstile> X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(x) \\<triangleq>\n                     invalid", "by(erule StrongEq_L_subst2_rev, simp,simp)"], ["proof (state)\nthis:\n  ?\\<tau> \\<Turnstile> X \\<triangleq> invalid \\<Longrightarrow>\n  X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(x) ?\\<tau> = invalid ?\\<tau>\n\ngoal (1 subgoal):\n 1. X->including\\<^sub>S\\<^sub>e\\<^sub>t(x)->excluding\\<^sub>S\\<^sub>e\\<^sub>t(x) =\n    X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(x)", "have A2 : \"\\<And>\\<tau>. \\<tau> \\<Turnstile> (X \\<triangleq> null) \\<Longrightarrow> (X->including\\<^sub>S\\<^sub>e\\<^sub>t(x)->excluding\\<^sub>S\\<^sub>e\\<^sub>t(x)) \\<tau> = invalid \\<tau>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<tau>.\n       \\<tau> \\<Turnstile> X \\<triangleq> null \\<Longrightarrow>\n       X->including\\<^sub>S\\<^sub>e\\<^sub>t(x)->excluding\\<^sub>S\\<^sub>e\\<^sub>t(x)\n        \\<tau> =\n       invalid \\<tau>", "apply(rule foundation22[THEN iffD1])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<tau>.\n       \\<tau> \\<Turnstile> X \\<triangleq> null \\<Longrightarrow>\n       \\<tau>\n        \\<Turnstile> X->including\\<^sub>S\\<^sub>e\\<^sub>t(x)->excluding\\<^sub>S\\<^sub>e\\<^sub>t(x) \\<triangleq>\n                     invalid", "by(erule StrongEq_L_subst2_rev, simp,simp)"], ["proof (state)\nthis:\n  ?\\<tau> \\<Turnstile> X \\<triangleq> null \\<Longrightarrow>\n  X->including\\<^sub>S\\<^sub>e\\<^sub>t(x)->excluding\\<^sub>S\\<^sub>e\\<^sub>t(x)\n   ?\\<tau> =\n  invalid ?\\<tau>\n\ngoal (1 subgoal):\n 1. X->including\\<^sub>S\\<^sub>e\\<^sub>t(x)->excluding\\<^sub>S\\<^sub>e\\<^sub>t(x) =\n    X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(x)", "have A2': \"\\<And>\\<tau>. \\<tau> \\<Turnstile> (X \\<triangleq> null) \\<Longrightarrow> (X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(x)) \\<tau> = invalid \\<tau>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<tau>.\n       \\<tau> \\<Turnstile> X \\<triangleq> null \\<Longrightarrow>\n       X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(x) \\<tau> = invalid \\<tau>", "apply(rule foundation22[THEN iffD1])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<tau>.\n       \\<tau> \\<Turnstile> X \\<triangleq> null \\<Longrightarrow>\n       \\<tau>\n        \\<Turnstile> X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(x) \\<triangleq>\n                     invalid", "by(erule StrongEq_L_subst2_rev, simp,simp)"], ["proof (state)\nthis:\n  ?\\<tau> \\<Turnstile> X \\<triangleq> null \\<Longrightarrow>\n  X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(x) ?\\<tau> = invalid ?\\<tau>\n\ngoal (1 subgoal):\n 1. X->including\\<^sub>S\\<^sub>e\\<^sub>t(x)->excluding\\<^sub>S\\<^sub>e\\<^sub>t(x) =\n    X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(x)", "have A3 : \"\\<And>\\<tau>. \\<tau> \\<Turnstile> (x \\<triangleq> invalid) \\<Longrightarrow> (X->including\\<^sub>S\\<^sub>e\\<^sub>t(x)->excluding\\<^sub>S\\<^sub>e\\<^sub>t(x)) \\<tau> = invalid \\<tau>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<tau>.\n       \\<tau> \\<Turnstile> x \\<triangleq> invalid \\<Longrightarrow>\n       X->including\\<^sub>S\\<^sub>e\\<^sub>t(x)->excluding\\<^sub>S\\<^sub>e\\<^sub>t(x)\n        \\<tau> =\n       invalid \\<tau>", "apply(rule foundation22[THEN iffD1])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<tau>.\n       \\<tau> \\<Turnstile> x \\<triangleq> invalid \\<Longrightarrow>\n       \\<tau>\n        \\<Turnstile> X->including\\<^sub>S\\<^sub>e\\<^sub>t(x)->excluding\\<^sub>S\\<^sub>e\\<^sub>t(x) \\<triangleq>\n                     invalid", "by(erule StrongEq_L_subst2_rev, simp,simp)"], ["proof (state)\nthis:\n  ?\\<tau> \\<Turnstile> x \\<triangleq> invalid \\<Longrightarrow>\n  X->including\\<^sub>S\\<^sub>e\\<^sub>t(x)->excluding\\<^sub>S\\<^sub>e\\<^sub>t(x)\n   ?\\<tau> =\n  invalid ?\\<tau>\n\ngoal (1 subgoal):\n 1. X->including\\<^sub>S\\<^sub>e\\<^sub>t(x)->excluding\\<^sub>S\\<^sub>e\\<^sub>t(x) =\n    X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(x)", "have A3': \"\\<And>\\<tau>. \\<tau> \\<Turnstile> (x \\<triangleq> invalid) \\<Longrightarrow> (X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(x)) \\<tau> = invalid \\<tau>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<tau>.\n       \\<tau> \\<Turnstile> x \\<triangleq> invalid \\<Longrightarrow>\n       X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(x) \\<tau> = invalid \\<tau>", "apply(rule foundation22[THEN iffD1])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<tau>.\n       \\<tau> \\<Turnstile> x \\<triangleq> invalid \\<Longrightarrow>\n       \\<tau>\n        \\<Turnstile> X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(x) \\<triangleq>\n                     invalid", "by(erule StrongEq_L_subst2_rev, simp,simp)"], ["proof (state)\nthis:\n  ?\\<tau> \\<Turnstile> x \\<triangleq> invalid \\<Longrightarrow>\n  X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(x) ?\\<tau> = invalid ?\\<tau>\n\ngoal (1 subgoal):\n 1. X->including\\<^sub>S\\<^sub>e\\<^sub>t(x)->excluding\\<^sub>S\\<^sub>e\\<^sub>t(x) =\n    X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(x)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. X->including\\<^sub>S\\<^sub>e\\<^sub>t(x)->excluding\\<^sub>S\\<^sub>e\\<^sub>t(x) =\n    X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(x)", "apply(rule ext, rename_tac \"\\<tau>\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<tau>.\n       X->including\\<^sub>S\\<^sub>e\\<^sub>t(x)->excluding\\<^sub>S\\<^sub>e\\<^sub>t(x)\n        \\<tau> =\n       X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(x) \\<tau>", "apply(case_tac \"\\<tau> \\<Turnstile> (\\<upsilon> x)\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>\\<tau>.\n       \\<tau> \\<Turnstile> \\<upsilon> x \\<Longrightarrow>\n       X->including\\<^sub>S\\<^sub>e\\<^sub>t(x)->excluding\\<^sub>S\\<^sub>e\\<^sub>t(x)\n        \\<tau> =\n       X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(x) \\<tau>\n 2. \\<And>\\<tau>.\n       \\<tau> |\\<noteq> \\<upsilon> x \\<Longrightarrow>\n       X->including\\<^sub>S\\<^sub>e\\<^sub>t(x)->excluding\\<^sub>S\\<^sub>e\\<^sub>t(x)\n        \\<tau> =\n       X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(x) \\<tau>", "apply(case_tac \"\\<tau> \\<Turnstile> (\\<delta> X)\")"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>\\<tau>.\n       \\<lbrakk>\\<tau> \\<Turnstile> \\<upsilon> x;\n        \\<tau> \\<Turnstile> \\<delta> X\\<rbrakk>\n       \\<Longrightarrow> X->including\\<^sub>S\\<^sub>e\\<^sub>t(x)->excluding\\<^sub>S\\<^sub>e\\<^sub>t(x)\n                          \\<tau> =\n                         X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(x) \\<tau>\n 2. \\<And>\\<tau>.\n       \\<lbrakk>\\<tau> \\<Turnstile> \\<upsilon> x;\n        \\<tau> |\\<noteq> \\<delta> X\\<rbrakk>\n       \\<Longrightarrow> X->including\\<^sub>S\\<^sub>e\\<^sub>t(x)->excluding\\<^sub>S\\<^sub>e\\<^sub>t(x)\n                          \\<tau> =\n                         X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(x) \\<tau>\n 3. \\<And>\\<tau>.\n       \\<tau> |\\<noteq> \\<upsilon> x \\<Longrightarrow>\n       X->including\\<^sub>S\\<^sub>e\\<^sub>t(x)->excluding\\<^sub>S\\<^sub>e\\<^sub>t(x)\n        \\<tau> =\n       X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(x) \\<tau>", "apply(simp only: OclExcluding_charn2[THEN foundation22[THEN iffD1]])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>\\<tau>.\n       \\<lbrakk>\\<tau> \\<Turnstile> \\<upsilon> x;\n        \\<tau> |\\<noteq> \\<delta> X\\<rbrakk>\n       \\<Longrightarrow> X->including\\<^sub>S\\<^sub>e\\<^sub>t(x)->excluding\\<^sub>S\\<^sub>e\\<^sub>t(x)\n                          \\<tau> =\n                         X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(x) \\<tau>\n 2. \\<And>\\<tau>.\n       \\<tau> |\\<noteq> \\<upsilon> x \\<Longrightarrow>\n       X->including\\<^sub>S\\<^sub>e\\<^sub>t(x)->excluding\\<^sub>S\\<^sub>e\\<^sub>t(x)\n        \\<tau> =\n       X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(x) \\<tau>", "apply(simp add: foundation16', elim disjE)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>\\<tau>.\n       \\<lbrakk>\\<tau> \\<Turnstile> \\<upsilon> x;\n        X \\<tau> = invalid \\<tau>\\<rbrakk>\n       \\<Longrightarrow> X->including\\<^sub>S\\<^sub>e\\<^sub>t(x)->excluding\\<^sub>S\\<^sub>e\\<^sub>t(x)\n                          \\<tau> =\n                         X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(x) \\<tau>\n 2. \\<And>\\<tau>.\n       \\<lbrakk>\\<tau> \\<Turnstile> \\<upsilon> x;\n        X \\<tau> = null \\<tau>\\<rbrakk>\n       \\<Longrightarrow> X->including\\<^sub>S\\<^sub>e\\<^sub>t(x)->excluding\\<^sub>S\\<^sub>e\\<^sub>t(x)\n                          \\<tau> =\n                         X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(x) \\<tau>\n 3. \\<And>\\<tau>.\n       \\<tau> |\\<noteq> \\<upsilon> x \\<Longrightarrow>\n       X->including\\<^sub>S\\<^sub>e\\<^sub>t(x)->excluding\\<^sub>S\\<^sub>e\\<^sub>t(x)\n        \\<tau> =\n       X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(x) \\<tau>", "apply(simp add: A1[OF foundation22[THEN iffD2]] A1'[OF foundation22[THEN iffD2]])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>\\<tau>.\n       \\<lbrakk>\\<tau> \\<Turnstile> \\<upsilon> x;\n        X \\<tau> = null \\<tau>\\<rbrakk>\n       \\<Longrightarrow> X->including\\<^sub>S\\<^sub>e\\<^sub>t(x)->excluding\\<^sub>S\\<^sub>e\\<^sub>t(x)\n                          \\<tau> =\n                         X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(x) \\<tau>\n 2. \\<And>\\<tau>.\n       \\<tau> |\\<noteq> \\<upsilon> x \\<Longrightarrow>\n       X->including\\<^sub>S\\<^sub>e\\<^sub>t(x)->excluding\\<^sub>S\\<^sub>e\\<^sub>t(x)\n        \\<tau> =\n       X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(x) \\<tau>", "apply(simp add: A2[OF foundation22[THEN iffD2]] A2'[OF foundation22[THEN iffD2]])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<tau>.\n       \\<tau> |\\<noteq> \\<upsilon> x \\<Longrightarrow>\n       X->including\\<^sub>S\\<^sub>e\\<^sub>t(x)->excluding\\<^sub>S\\<^sub>e\\<^sub>t(x)\n        \\<tau> =\n       X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(x) \\<tau>", "apply(simp add:foundation18 A3[OF foundation22[THEN iffD2]] A3'[OF foundation22[THEN iffD2]])"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  X->including\\<^sub>S\\<^sub>e\\<^sub>t(x)->excluding\\<^sub>S\\<^sub>e\\<^sub>t(x) =\n  X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(x)\n\ngoal:\nNo subgoals!", "qed"], ["", "text\\<open>One would like a generic theorem of the form:\n\\begin{isar}[mathescape]\nlemma OclExcluding_charn_exec:\n       \"(X->including$_{Set}$(x::('$\\mathfrak{A}$,'a::null)val)->excluding$_{Set}$(y)) =\n        (if \\<delta> X then if x \\<doteq> y\n                     then X->excluding$_{Set}$(y)\n                     else X->excluding$_{Set}$(y)->including$_{Set}$(x)\n                     endif\n                else invalid endif)\"\n\\end{isar}\nUnfortunately, this does not hold in general, since referential equality is\nan overloaded concept and has to be defined for each type individually.\nConsequently, it is only valid for concrete  type instances for Boolean,\nInteger, and Sets thereof...\n\\<close>"], ["", "text\\<open>The computational law \\emph{OclExcluding-charn-exec} becomes generic since it\nuses strict equality which in itself is generic. It is possible to prove\nthe following generic theorem and instantiate it later (using properties\nthat link the polymorphic logical strong equality with the concrete instance\nof strict quality).\\<close>"], ["", "lemma OclExcluding_charn_exec:\n assumes strict1: \"(invalid \\<doteq> y) = invalid\"\n and     strict2: \"(x \\<doteq> invalid) = invalid\"\n and     StrictRefEq_valid_args_valid: \"\\<And> (x::('\\<AA>,'a::null)val) y \\<tau>.\n                                     (\\<tau> \\<Turnstile> \\<delta> (x \\<doteq> y)) = ((\\<tau> \\<Turnstile> (\\<upsilon> x)) \\<and> (\\<tau> \\<Turnstile> \\<upsilon> y))\"\n and     cp_StrictRefEq: \"\\<And> (X::('\\<AA>,'a::null)val) Y \\<tau>. (X \\<doteq> Y) \\<tau> = ((\\<lambda>_. X \\<tau>) \\<doteq> (\\<lambda>_. Y \\<tau>)) \\<tau>\"\n and     StrictRefEq_vs_StrongEq: \"\\<And> (x::('\\<AA>,'a::null)val) y \\<tau>.\n                                      \\<tau> \\<Turnstile> \\<upsilon> x \\<Longrightarrow> \\<tau> \\<Turnstile> \\<upsilon> y \\<Longrightarrow> (\\<tau> \\<Turnstile> ((x \\<doteq> y) \\<triangleq> (x \\<triangleq> y)))\"\n shows \"(X->including\\<^sub>S\\<^sub>e\\<^sub>t(x::('\\<AA>,'a::null)val)->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y)) =\n        (if \\<delta> X then if x \\<doteq> y\n                     then X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y)\n                     else X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y)->including\\<^sub>S\\<^sub>e\\<^sub>t(x)\n                     endif\n                else invalid endif)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. X->including\\<^sub>S\\<^sub>e\\<^sub>t(x)->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) =\n    (if \\<delta> X then if x \\<doteq>\n                           y then X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) else X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y)->including\\<^sub>S\\<^sub>e\\<^sub>t(x) endif else invalid endif)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. X->including\\<^sub>S\\<^sub>e\\<^sub>t(x)->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) =\n    (if \\<delta> X then if x \\<doteq>\n                           y then X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) else X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y)->including\\<^sub>S\\<^sub>e\\<^sub>t(x) endif else invalid endif)", "(* Lifting theorems, largely analogous OclIncludes_execute_generic,\n         with the same problems wrt. strict equality. *)"], ["proof (state)\ngoal (1 subgoal):\n 1. X->including\\<^sub>S\\<^sub>e\\<^sub>t(x)->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) =\n    (if \\<delta> X then if x \\<doteq>\n                           y then X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) else X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y)->including\\<^sub>S\\<^sub>e\\<^sub>t(x) endif else invalid endif)", "have A1: \"\\<And>\\<tau>. \\<tau> \\<Turnstile> (X \\<triangleq> invalid) \\<Longrightarrow>\n            (X->including\\<^sub>S\\<^sub>e\\<^sub>t(x)->includes\\<^sub>S\\<^sub>e\\<^sub>t(y)) \\<tau> = invalid \\<tau>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<tau>.\n       \\<tau> \\<Turnstile> X \\<triangleq> invalid \\<Longrightarrow>\n       X->including\\<^sub>S\\<^sub>e\\<^sub>t(x)->includes\\<^sub>S\\<^sub>e\\<^sub>t(y)\n        \\<tau> =\n       invalid \\<tau>", "apply(rule foundation22[THEN iffD1])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<tau>.\n       \\<tau> \\<Turnstile> X \\<triangleq> invalid \\<Longrightarrow>\n       \\<tau>\n        \\<Turnstile> X->including\\<^sub>S\\<^sub>e\\<^sub>t(x)->includes\\<^sub>S\\<^sub>e\\<^sub>t(y) \\<triangleq>\n                     invalid", "by(erule StrongEq_L_subst2_rev, simp,simp)"], ["proof (state)\nthis:\n  ?\\<tau> \\<Turnstile> X \\<triangleq> invalid \\<Longrightarrow>\n  X->including\\<^sub>S\\<^sub>e\\<^sub>t(x)->includes\\<^sub>S\\<^sub>e\\<^sub>t(y)\n   ?\\<tau> =\n  invalid ?\\<tau>\n\ngoal (1 subgoal):\n 1. X->including\\<^sub>S\\<^sub>e\\<^sub>t(x)->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) =\n    (if \\<delta> X then if x \\<doteq>\n                           y then X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) else X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y)->including\\<^sub>S\\<^sub>e\\<^sub>t(x) endif else invalid endif)", "have B1: \"\\<And>\\<tau>. \\<tau> \\<Turnstile> (X \\<triangleq> null) \\<Longrightarrow>\n            (X->including\\<^sub>S\\<^sub>e\\<^sub>t(x)->includes\\<^sub>S\\<^sub>e\\<^sub>t(y)) \\<tau> = invalid  \\<tau>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<tau>.\n       \\<tau> \\<Turnstile> X \\<triangleq> null \\<Longrightarrow>\n       X->including\\<^sub>S\\<^sub>e\\<^sub>t(x)->includes\\<^sub>S\\<^sub>e\\<^sub>t(y)\n        \\<tau> =\n       invalid \\<tau>", "apply(rule foundation22[THEN iffD1])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<tau>.\n       \\<tau> \\<Turnstile> X \\<triangleq> null \\<Longrightarrow>\n       \\<tau>\n        \\<Turnstile> X->including\\<^sub>S\\<^sub>e\\<^sub>t(x)->includes\\<^sub>S\\<^sub>e\\<^sub>t(y) \\<triangleq>\n                     invalid", "by(erule StrongEq_L_subst2_rev, simp,simp)"], ["proof (state)\nthis:\n  ?\\<tau> \\<Turnstile> X \\<triangleq> null \\<Longrightarrow>\n  X->including\\<^sub>S\\<^sub>e\\<^sub>t(x)->includes\\<^sub>S\\<^sub>e\\<^sub>t(y)\n   ?\\<tau> =\n  invalid ?\\<tau>\n\ngoal (1 subgoal):\n 1. X->including\\<^sub>S\\<^sub>e\\<^sub>t(x)->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) =\n    (if \\<delta> X then if x \\<doteq>\n                           y then X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) else X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y)->including\\<^sub>S\\<^sub>e\\<^sub>t(x) endif else invalid endif)", "have A2: \"\\<And>\\<tau>. \\<tau> \\<Turnstile> (X \\<triangleq> invalid) \\<Longrightarrow> X->including\\<^sub>S\\<^sub>e\\<^sub>t(x)->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) \\<tau> = invalid \\<tau>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<tau>.\n       \\<tau> \\<Turnstile> X \\<triangleq> invalid \\<Longrightarrow>\n       X->including\\<^sub>S\\<^sub>e\\<^sub>t(x)->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y)\n        \\<tau> =\n       invalid \\<tau>", "apply(rule foundation22[THEN iffD1])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<tau>.\n       \\<tau> \\<Turnstile> X \\<triangleq> invalid \\<Longrightarrow>\n       \\<tau>\n        \\<Turnstile> X->including\\<^sub>S\\<^sub>e\\<^sub>t(x)->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) \\<triangleq>\n                     invalid", "by(erule StrongEq_L_subst2_rev, simp,simp)"], ["proof (state)\nthis:\n  ?\\<tau> \\<Turnstile> X \\<triangleq> invalid \\<Longrightarrow>\n  X->including\\<^sub>S\\<^sub>e\\<^sub>t(x)->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y)\n   ?\\<tau> =\n  invalid ?\\<tau>\n\ngoal (1 subgoal):\n 1. X->including\\<^sub>S\\<^sub>e\\<^sub>t(x)->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) =\n    (if \\<delta> X then if x \\<doteq>\n                           y then X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) else X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y)->including\\<^sub>S\\<^sub>e\\<^sub>t(x) endif else invalid endif)", "have B2: \"\\<And>\\<tau>. \\<tau> \\<Turnstile> (X \\<triangleq> null) \\<Longrightarrow> X->including\\<^sub>S\\<^sub>e\\<^sub>t(x)->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) \\<tau> = invalid \\<tau>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<tau>.\n       \\<tau> \\<Turnstile> X \\<triangleq> null \\<Longrightarrow>\n       X->including\\<^sub>S\\<^sub>e\\<^sub>t(x)->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y)\n        \\<tau> =\n       invalid \\<tau>", "apply(rule foundation22[THEN iffD1])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<tau>.\n       \\<tau> \\<Turnstile> X \\<triangleq> null \\<Longrightarrow>\n       \\<tau>\n        \\<Turnstile> X->including\\<^sub>S\\<^sub>e\\<^sub>t(x)->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) \\<triangleq>\n                     invalid", "by(erule StrongEq_L_subst2_rev, simp,simp)"], ["proof (state)\nthis:\n  ?\\<tau> \\<Turnstile> X \\<triangleq> null \\<Longrightarrow>\n  X->including\\<^sub>S\\<^sub>e\\<^sub>t(x)->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y)\n   ?\\<tau> =\n  invalid ?\\<tau>\n\ngoal (1 subgoal):\n 1. X->including\\<^sub>S\\<^sub>e\\<^sub>t(x)->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) =\n    (if \\<delta> X then if x \\<doteq>\n                           y then X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) else X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y)->including\\<^sub>S\\<^sub>e\\<^sub>t(x) endif else invalid endif)", "note [simp] = cp_StrictRefEq [THEN allI[THEN allI[THEN allI[THEN cpI2]], of \"StrictRefEq\"]]"], ["proof (state)\nthis:\n  \\<lbrakk>cp ?P; cp ?Q\\<rbrakk>\n  \\<Longrightarrow> cp (\\<lambda>X. ?P X \\<doteq> ?Q X)\n\ngoal (1 subgoal):\n 1. X->including\\<^sub>S\\<^sub>e\\<^sub>t(x)->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) =\n    (if \\<delta> X then if x \\<doteq>\n                           y then X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) else X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y)->including\\<^sub>S\\<^sub>e\\<^sub>t(x) endif else invalid endif)", "have C: \"\\<And>\\<tau>. \\<tau> \\<Turnstile> (x \\<triangleq> invalid) \\<Longrightarrow>\n           (X->including\\<^sub>S\\<^sub>e\\<^sub>t(x)->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y)) \\<tau> =\n           (if x \\<doteq> y then X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) else X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y)->including\\<^sub>S\\<^sub>e\\<^sub>t(x) endif) \\<tau>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<tau>.\n       \\<tau> \\<Turnstile> x \\<triangleq> invalid \\<Longrightarrow>\n       X->including\\<^sub>S\\<^sub>e\\<^sub>t(x)->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y)\n        \\<tau> =\n       (if x \\<doteq>\n           y then X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) else X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y)->including\\<^sub>S\\<^sub>e\\<^sub>t(x) endif)\n        \\<tau>", "apply(rule foundation22[THEN iffD1])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<tau>.\n       \\<tau> \\<Turnstile> x \\<triangleq> invalid \\<Longrightarrow>\n       \\<tau>\n        \\<Turnstile> X->including\\<^sub>S\\<^sub>e\\<^sub>t(x)->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) \\<triangleq>\n                     if x \\<doteq>\n                        y then X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) else X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y)->including\\<^sub>S\\<^sub>e\\<^sub>t(x) endif", "apply(erule StrongEq_L_subst2_rev,simp,simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<tau>.\n       \\<tau>\n        \\<Turnstile> invalid \\<triangleq>\n                     if invalid \\<doteq>\n                        y then X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) else invalid endif", "by(simp add: strict1)"], ["proof (state)\nthis:\n  ?\\<tau> \\<Turnstile> x \\<triangleq> invalid \\<Longrightarrow>\n  X->including\\<^sub>S\\<^sub>e\\<^sub>t(x)->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y)\n   ?\\<tau> =\n  (if x \\<doteq>\n      y then X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) else X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y)->including\\<^sub>S\\<^sub>e\\<^sub>t(x) endif)\n   ?\\<tau>\n\ngoal (1 subgoal):\n 1. X->including\\<^sub>S\\<^sub>e\\<^sub>t(x)->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) =\n    (if \\<delta> X then if x \\<doteq>\n                           y then X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) else X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y)->including\\<^sub>S\\<^sub>e\\<^sub>t(x) endif else invalid endif)", "have D: \"\\<And>\\<tau>. \\<tau> \\<Turnstile> (y \\<triangleq> invalid) \\<Longrightarrow>\n           (X->including\\<^sub>S\\<^sub>e\\<^sub>t(x)->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y)) \\<tau> =\n           (if x \\<doteq> y then X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) else X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y)->including\\<^sub>S\\<^sub>e\\<^sub>t(x) endif) \\<tau>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<tau>.\n       \\<tau> \\<Turnstile> y \\<triangleq> invalid \\<Longrightarrow>\n       X->including\\<^sub>S\\<^sub>e\\<^sub>t(x)->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y)\n        \\<tau> =\n       (if x \\<doteq>\n           y then X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) else X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y)->including\\<^sub>S\\<^sub>e\\<^sub>t(x) endif)\n        \\<tau>", "apply(rule foundation22[THEN iffD1])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<tau>.\n       \\<tau> \\<Turnstile> y \\<triangleq> invalid \\<Longrightarrow>\n       \\<tau>\n        \\<Turnstile> X->including\\<^sub>S\\<^sub>e\\<^sub>t(x)->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) \\<triangleq>\n                     if x \\<doteq>\n                        y then X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) else X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y)->including\\<^sub>S\\<^sub>e\\<^sub>t(x) endif", "apply(erule StrongEq_L_subst2_rev,simp,simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<tau>.\n       \\<tau>\n        \\<Turnstile> invalid \\<triangleq>\n                     if x \\<doteq> invalid then invalid else invalid endif", "by (simp add: strict2)"], ["proof (state)\nthis:\n  ?\\<tau> \\<Turnstile> y \\<triangleq> invalid \\<Longrightarrow>\n  X->including\\<^sub>S\\<^sub>e\\<^sub>t(x)->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y)\n   ?\\<tau> =\n  (if x \\<doteq>\n      y then X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) else X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y)->including\\<^sub>S\\<^sub>e\\<^sub>t(x) endif)\n   ?\\<tau>\n\ngoal (1 subgoal):\n 1. X->including\\<^sub>S\\<^sub>e\\<^sub>t(x)->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) =\n    (if \\<delta> X then if x \\<doteq>\n                           y then X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) else X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y)->including\\<^sub>S\\<^sub>e\\<^sub>t(x) endif else invalid endif)", "have E: \"\\<And>\\<tau>. \\<tau> \\<Turnstile> \\<upsilon> x \\<Longrightarrow> \\<tau> \\<Turnstile> \\<upsilon> y \\<Longrightarrow>\n              (if x \\<doteq> y then X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) else X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y)->including\\<^sub>S\\<^sub>e\\<^sub>t(x) endif) \\<tau> =\n              (if x \\<triangleq> y then X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) else X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y)->including\\<^sub>S\\<^sub>e\\<^sub>t(x) endif) \\<tau>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<tau>.\n       \\<lbrakk>\\<tau> \\<Turnstile> \\<upsilon> x;\n        \\<tau> \\<Turnstile> \\<upsilon> y\\<rbrakk>\n       \\<Longrightarrow> (if x \\<doteq>\n                             y then X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) else X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y)->including\\<^sub>S\\<^sub>e\\<^sub>t(x) endif)\n                          \\<tau> =\n                         (if x \\<triangleq>\n                             y then X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) else X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y)->including\\<^sub>S\\<^sub>e\\<^sub>t(x) endif)\n                          \\<tau>", "apply(subst cp_OclIf)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<tau>.\n       \\<lbrakk>\\<tau> \\<Turnstile> \\<upsilon> x;\n        \\<tau> \\<Turnstile> \\<upsilon> y\\<rbrakk>\n       \\<Longrightarrow> (if (\\<lambda>_.\n                                 (x \\<doteq> y)\n                                  \\<tau>) then (\\<lambda>_.\n             X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y)\n              \\<tau>) else (\\<lambda>_.\n                               X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y)->including\\<^sub>S\\<^sub>e\\<^sub>t(x)\n                                \\<tau>) endif)\n                          \\<tau> =\n                         (if x \\<triangleq>\n                             y then X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) else X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y)->including\\<^sub>S\\<^sub>e\\<^sub>t(x) endif)\n                          \\<tau>", "apply(subst StrictRefEq_vs_StrongEq[THEN foundation22[THEN iffD1]])"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>\\<tau> _.\n       \\<lbrakk>\\<tau> \\<Turnstile> \\<upsilon> x;\n        \\<tau> \\<Turnstile> \\<upsilon> y\\<rbrakk>\n       \\<Longrightarrow> \\<tau> \\<Turnstile> \\<upsilon> x\n 2. \\<And>\\<tau> _.\n       \\<lbrakk>\\<tau> \\<Turnstile> \\<upsilon> x;\n        \\<tau> \\<Turnstile> \\<upsilon> y\\<rbrakk>\n       \\<Longrightarrow> \\<tau> \\<Turnstile> \\<upsilon> y\n 3. \\<And>\\<tau>.\n       \\<lbrakk>\\<tau> \\<Turnstile> \\<upsilon> x;\n        \\<tau> \\<Turnstile> \\<upsilon> y\\<rbrakk>\n       \\<Longrightarrow> (if (\\<lambda>_.\n                                 (x \\<triangleq> y)\n                                  \\<tau>) then (\\<lambda>_.\n             X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y)\n              \\<tau>) else (\\<lambda>_.\n                               X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y)->including\\<^sub>S\\<^sub>e\\<^sub>t(x)\n                                \\<tau>) endif)\n                          \\<tau> =\n                         (if x \\<triangleq>\n                             y then X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) else X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y)->including\\<^sub>S\\<^sub>e\\<^sub>t(x) endif)\n                          \\<tau>", "by(simp_all add: cp_OclIf[symmetric])"], ["proof (state)\nthis:\n  \\<lbrakk>?\\<tau> \\<Turnstile> \\<upsilon> x;\n   ?\\<tau> \\<Turnstile> \\<upsilon> y\\<rbrakk>\n  \\<Longrightarrow> (if x \\<doteq>\n                        y then X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) else X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y)->including\\<^sub>S\\<^sub>e\\<^sub>t(x) endif)\n                     ?\\<tau> =\n                    (if x \\<triangleq>\n                        y then X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) else X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y)->including\\<^sub>S\\<^sub>e\\<^sub>t(x) endif)\n                     ?\\<tau>\n\ngoal (1 subgoal):\n 1. X->including\\<^sub>S\\<^sub>e\\<^sub>t(x)->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) =\n    (if \\<delta> X then if x \\<doteq>\n                           y then X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) else X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y)->including\\<^sub>S\\<^sub>e\\<^sub>t(x) endif else invalid endif)", "have F: \"\\<And>\\<tau>. \\<tau> \\<Turnstile> \\<delta> X \\<Longrightarrow> \\<tau> \\<Turnstile> \\<upsilon> x \\<Longrightarrow> \\<tau> \\<Turnstile> (x \\<triangleq> y) \\<Longrightarrow>\n           (X->including\\<^sub>S\\<^sub>e\\<^sub>t(x)->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) \\<tau>) = (X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) \\<tau>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<tau>.\n       \\<lbrakk>\\<tau> \\<Turnstile> \\<delta> X;\n        \\<tau> \\<Turnstile> \\<upsilon> x;\n        \\<tau> \\<Turnstile> x \\<triangleq> y\\<rbrakk>\n       \\<Longrightarrow> X->including\\<^sub>S\\<^sub>e\\<^sub>t(x)->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y)\n                          \\<tau> =\n                         X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) \\<tau>", "apply(drule StrongEq_L_sym)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<tau>.\n       \\<lbrakk>\\<tau> \\<Turnstile> \\<delta> X;\n        \\<tau> \\<Turnstile> \\<upsilon> x;\n        \\<tau> \\<Turnstile> y \\<triangleq> x\\<rbrakk>\n       \\<Longrightarrow> X->including\\<^sub>S\\<^sub>e\\<^sub>t(x)->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y)\n                          \\<tau> =\n                         X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) \\<tau>", "apply(rule foundation22[THEN iffD1])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<tau>.\n       \\<lbrakk>\\<tau> \\<Turnstile> \\<delta> X;\n        \\<tau> \\<Turnstile> \\<upsilon> x;\n        \\<tau> \\<Turnstile> y \\<triangleq> x\\<rbrakk>\n       \\<Longrightarrow> \\<tau>\n                          \\<Turnstile> X->including\\<^sub>S\\<^sub>e\\<^sub>t(x)->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) \\<triangleq>\n X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y)", "apply(erule StrongEq_L_subst2_rev,simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<tau>.\n       \\<lbrakk>\\<tau> \\<Turnstile> \\<delta> X;\n        \\<tau> \\<Turnstile> \\<upsilon> x\\<rbrakk>\n       \\<Longrightarrow> \\<tau>\n                          \\<Turnstile> X->including\\<^sub>S\\<^sub>e\\<^sub>t(x)->excluding\\<^sub>S\\<^sub>e\\<^sub>t(x) \\<triangleq>\n X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(x)", "by(simp add: OclExcluding_charn2)"], ["proof (state)\nthis:\n  \\<lbrakk>?\\<tau> \\<Turnstile> \\<delta> X;\n   ?\\<tau> \\<Turnstile> \\<upsilon> x;\n   ?\\<tau> \\<Turnstile> x \\<triangleq> y\\<rbrakk>\n  \\<Longrightarrow> X->including\\<^sub>S\\<^sub>e\\<^sub>t(x)->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y)\n                     ?\\<tau> =\n                    X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) ?\\<tau>\n\ngoal (1 subgoal):\n 1. X->including\\<^sub>S\\<^sub>e\\<^sub>t(x)->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) =\n    (if \\<delta> X then if x \\<doteq>\n                           y then X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) else X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y)->including\\<^sub>S\\<^sub>e\\<^sub>t(x) endif else invalid endif)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. X->including\\<^sub>S\\<^sub>e\\<^sub>t(x)->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) =\n    (if \\<delta> X then if x \\<doteq>\n                           y then X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) else X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y)->including\\<^sub>S\\<^sub>e\\<^sub>t(x) endif else invalid endif)", "apply(rule ext, rename_tac \"\\<tau>\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<tau>.\n       X->including\\<^sub>S\\<^sub>e\\<^sub>t(x)->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y)\n        \\<tau> =\n       (if \\<delta> X then if x \\<doteq>\n                              y then X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) else X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y)->including\\<^sub>S\\<^sub>e\\<^sub>t(x) endif else invalid endif)\n        \\<tau>", "apply(case_tac \"\\<not> (\\<tau> \\<Turnstile> (\\<delta> X))\", simp add:defined_split,elim disjE A1 B1 A2 B2)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<tau>.\n       \\<not> \\<tau> |\\<noteq> \\<delta> X \\<Longrightarrow>\n       X->including\\<^sub>S\\<^sub>e\\<^sub>t(x)->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y)\n        \\<tau> =\n       (if \\<delta> X then if x \\<doteq>\n                              y then X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) else X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y)->including\\<^sub>S\\<^sub>e\\<^sub>t(x) endif else invalid endif)\n        \\<tau>", "apply(case_tac \"\\<not> (\\<tau> \\<Turnstile> (\\<upsilon> x))\",\n          simp add:foundation18 foundation22[symmetric],\n          drule StrongEq_L_sym)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>\\<tau>.\n       \\<lbrakk>\\<tau> \\<Turnstile> \\<delta> X;\n        \\<tau> \\<Turnstile> invalid \\<triangleq> x\\<rbrakk>\n       \\<Longrightarrow> \\<tau>\n                          \\<Turnstile> X->including\\<^sub>S\\<^sub>e\\<^sub>t(x)->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) \\<triangleq>\n if x \\<doteq>\n    y then X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) else X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y)->including\\<^sub>S\\<^sub>e\\<^sub>t(x) endif\n 2. \\<And>\\<tau>.\n       \\<lbrakk>\\<not> \\<tau> |\\<noteq> \\<delta> X;\n        \\<not> \\<tau> |\\<noteq> \\<upsilon> x\\<rbrakk>\n       \\<Longrightarrow> X->including\\<^sub>S\\<^sub>e\\<^sub>t(x)->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y)\n                          \\<tau> =\n                         (if \\<delta> X then if x \\<doteq>\n          y then X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) else X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y)->including\\<^sub>S\\<^sub>e\\<^sub>t(x) endif else invalid endif)\n                          \\<tau>", "apply(simp add: foundation22 C)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<tau>.\n       \\<lbrakk>\\<not> \\<tau> |\\<noteq> \\<delta> X;\n        \\<not> \\<tau> |\\<noteq> \\<upsilon> x\\<rbrakk>\n       \\<Longrightarrow> X->including\\<^sub>S\\<^sub>e\\<^sub>t(x)->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y)\n                          \\<tau> =\n                         (if \\<delta> X then if x \\<doteq>\n          y then X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) else X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y)->including\\<^sub>S\\<^sub>e\\<^sub>t(x) endif else invalid endif)\n                          \\<tau>", "apply(case_tac \"\\<not> (\\<tau> \\<Turnstile> (\\<upsilon> y))\",\n          simp add:foundation18 foundation22[symmetric],\n          drule StrongEq_L_sym, simp add: foundation22 D, simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<tau>.\n       \\<lbrakk>\\<tau> \\<Turnstile> \\<delta> X;\n        \\<tau> \\<Turnstile> \\<upsilon> x;\n        \\<tau> \\<Turnstile> \\<upsilon> y\\<rbrakk>\n       \\<Longrightarrow> X->including\\<^sub>S\\<^sub>e\\<^sub>t(x)->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y)\n                          \\<tau> =\n                         (if x \\<doteq>\n                             y then X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) else X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y)->including\\<^sub>S\\<^sub>e\\<^sub>t(x) endif)\n                          \\<tau>", "apply(subst E,simp_all)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<tau>.\n       \\<lbrakk>\\<tau> \\<Turnstile> \\<delta> X;\n        \\<tau> \\<Turnstile> \\<upsilon> x;\n        \\<tau> \\<Turnstile> \\<upsilon> y\\<rbrakk>\n       \\<Longrightarrow> X->including\\<^sub>S\\<^sub>e\\<^sub>t(x)->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y)\n                          \\<tau> =\n                         (if x \\<triangleq>\n                             y then X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) else X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y)->including\\<^sub>S\\<^sub>e\\<^sub>t(x) endif)\n                          \\<tau>", "apply(case_tac \"\\<tau> \\<Turnstile> not (x \\<triangleq> y)\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>\\<tau>.\n       \\<lbrakk>\\<tau> \\<Turnstile> \\<delta> X;\n        \\<tau> \\<Turnstile> \\<upsilon> x; \\<tau> \\<Turnstile> \\<upsilon> y;\n        \\<tau> \\<Turnstile> not (x \\<triangleq> y)\\<rbrakk>\n       \\<Longrightarrow> X->including\\<^sub>S\\<^sub>e\\<^sub>t(x)->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y)\n                          \\<tau> =\n                         (if x \\<triangleq>\n                             y then X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) else X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y)->including\\<^sub>S\\<^sub>e\\<^sub>t(x) endif)\n                          \\<tau>\n 2. \\<And>\\<tau>.\n       \\<lbrakk>\\<tau> \\<Turnstile> \\<delta> X;\n        \\<tau> \\<Turnstile> \\<upsilon> x; \\<tau> \\<Turnstile> \\<upsilon> y;\n        \\<tau> |\\<noteq> not (x \\<triangleq> y)\\<rbrakk>\n       \\<Longrightarrow> X->including\\<^sub>S\\<^sub>e\\<^sub>t(x)->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y)\n                          \\<tau> =\n                         (if x \\<triangleq>\n                             y then X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) else X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y)->including\\<^sub>S\\<^sub>e\\<^sub>t(x) endif)\n                          \\<tau>", "apply(simp add: OclExcluding_charn1[simplified foundation22]\n                     OclExcluding_charn2[simplified foundation22])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<tau>.\n       \\<lbrakk>\\<tau> \\<Turnstile> \\<delta> X;\n        \\<tau> \\<Turnstile> \\<upsilon> x; \\<tau> \\<Turnstile> \\<upsilon> y;\n        \\<tau> |\\<noteq> not (x \\<triangleq> y)\\<rbrakk>\n       \\<Longrightarrow> X->including\\<^sub>S\\<^sub>e\\<^sub>t(x)->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y)\n                          \\<tau> =\n                         (if x \\<triangleq>\n                             y then X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) else X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y)->including\\<^sub>S\\<^sub>e\\<^sub>t(x) endif)\n                          \\<tau>", "apply(simp add: foundation9 F)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  X->including\\<^sub>S\\<^sub>e\\<^sub>t(x)->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) =\n  (if \\<delta> X then if x \\<doteq>\n                         y then X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) else X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y)->including\\<^sub>S\\<^sub>e\\<^sub>t(x) endif else invalid endif)\n\ngoal:\nNo subgoals!", "qed"], ["", "(* Hack to work around OF-Bug *)"], ["", "schematic_goal OclExcluding_charn_exec\\<^sub>I\\<^sub>n\\<^sub>t\\<^sub>e\\<^sub>g\\<^sub>e\\<^sub>r[simp,code_unfold]: \"?X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ?X", "by(rule OclExcluding_charn_exec[OF StrictRefEq\\<^sub>I\\<^sub>n\\<^sub>t\\<^sub>e\\<^sub>g\\<^sub>e\\<^sub>r.strict1 StrictRefEq\\<^sub>I\\<^sub>n\\<^sub>t\\<^sub>e\\<^sub>g\\<^sub>e\\<^sub>r.strict2\n                                StrictRefEq\\<^sub>I\\<^sub>n\\<^sub>t\\<^sub>e\\<^sub>g\\<^sub>e\\<^sub>r.defined_args_valid\n                                StrictRefEq\\<^sub>I\\<^sub>n\\<^sub>t\\<^sub>e\\<^sub>g\\<^sub>e\\<^sub>r.cp0 StrictRefEq\\<^sub>I\\<^sub>n\\<^sub>t\\<^sub>e\\<^sub>g\\<^sub>e\\<^sub>r.StrictRefEq_vs_StrongEq], simp_all)"], ["", "schematic_goal OclExcluding_charn_exec\\<^sub>B\\<^sub>o\\<^sub>o\\<^sub>l\\<^sub>e\\<^sub>a\\<^sub>n[simp,code_unfold]: \"?X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ?X", "by(rule OclExcluding_charn_exec[OF StrictRefEq\\<^sub>B\\<^sub>o\\<^sub>o\\<^sub>l\\<^sub>e\\<^sub>a\\<^sub>n.strict1 StrictRefEq\\<^sub>B\\<^sub>o\\<^sub>o\\<^sub>l\\<^sub>e\\<^sub>a\\<^sub>n.strict2\n                                StrictRefEq\\<^sub>B\\<^sub>o\\<^sub>o\\<^sub>l\\<^sub>e\\<^sub>a\\<^sub>n.defined_args_valid\n                             StrictRefEq\\<^sub>B\\<^sub>o\\<^sub>o\\<^sub>l\\<^sub>e\\<^sub>a\\<^sub>n.cp0 StrictRefEq\\<^sub>B\\<^sub>o\\<^sub>o\\<^sub>l\\<^sub>e\\<^sub>a\\<^sub>n.StrictRefEq_vs_StrongEq], simp_all)"], ["", "schematic_goal OclExcluding_charn_exec\\<^sub>S\\<^sub>e\\<^sub>t[simp,code_unfold]: \"?X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ?X", "by(rule OclExcluding_charn_exec[OF StrictRefEq\\<^sub>S\\<^sub>e\\<^sub>t.strict1 StrictRefEq\\<^sub>S\\<^sub>e\\<^sub>t.strict2\n                                StrictRefEq\\<^sub>S\\<^sub>e\\<^sub>t.defined_args_valid\n                                StrictRefEq\\<^sub>S\\<^sub>e\\<^sub>t.cp0 StrictRefEq\\<^sub>S\\<^sub>e\\<^sub>t.StrictRefEq_vs_StrongEq], simp_all)"], ["", "subsubsection\\<open>Execution Rules on Includes\\<close>"], ["", "lemma OclIncludes_charn0[simp]:\nassumes val_x:\"\\<tau> \\<Turnstile> (\\<upsilon> x)\"\nshows         \"\\<tau> \\<Turnstile> not(Set{}->includes\\<^sub>S\\<^sub>e\\<^sub>t(x))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<tau> \\<Turnstile> not Set{}->includes\\<^sub>S\\<^sub>e\\<^sub>t(x)", "using val_x"], ["proof (prove)\nusing this:\n  \\<tau> \\<Turnstile> \\<upsilon> x\n\ngoal (1 subgoal):\n 1. \\<tau> \\<Turnstile> not Set{}->includes\\<^sub>S\\<^sub>e\\<^sub>t(x)", "apply(auto simp: OclValid_def OclIncludes_def OclNot_def false_def true_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>(\\<upsilon> x) \\<tau> =\n             \\<lfloor>\\<lfloor>True\\<rfloor>\\<rfloor>;\n     x \\<tau>\n     \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                            (Set{} \\<tau>)\\<rceil>\\<rceil>\\<rbrakk>\n    \\<Longrightarrow> False", "apply(auto simp: mtSet_def Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e.Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e_inverse)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma OclIncludes_charn0'[simp,code_unfold]:\n\"Set{}->includes\\<^sub>S\\<^sub>e\\<^sub>t(x) = (if \\<upsilon> x then false else invalid endif)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Set{}->includes\\<^sub>S\\<^sub>e\\<^sub>t(x) =\n    (if \\<upsilon> x then false else invalid endif)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. Set{}->includes\\<^sub>S\\<^sub>e\\<^sub>t(x) =\n    (if \\<upsilon> x then false else invalid endif)", "have A: \"\\<And> \\<tau>. (Set{}->includes\\<^sub>S\\<^sub>e\\<^sub>t(invalid)) \\<tau> = (if (\\<upsilon> invalid) then false else invalid endif) \\<tau>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<tau>.\n       Set{}->includes\\<^sub>S\\<^sub>e\\<^sub>t(invalid) \\<tau> =\n       (if \\<upsilon> invalid then false else invalid endif) \\<tau>", "by simp"], ["proof (state)\nthis:\n  Set{}->includes\\<^sub>S\\<^sub>e\\<^sub>t(invalid) ?\\<tau> =\n  (if \\<upsilon> invalid then false else invalid endif) ?\\<tau>\n\ngoal (1 subgoal):\n 1. Set{}->includes\\<^sub>S\\<^sub>e\\<^sub>t(x) =\n    (if \\<upsilon> x then false else invalid endif)", "have B: \"\\<And> \\<tau> x. \\<tau> \\<Turnstile> (\\<upsilon> x) \\<Longrightarrow> (Set{}->includes\\<^sub>S\\<^sub>e\\<^sub>t(x)) \\<tau> = (if \\<upsilon> x then false else invalid endif) \\<tau>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<tau> x.\n       \\<tau> \\<Turnstile> \\<upsilon> x \\<Longrightarrow>\n       Set{}->includes\\<^sub>S\\<^sub>e\\<^sub>t(x) \\<tau> =\n       (if \\<upsilon> x then false else invalid endif) \\<tau>", "apply(frule OclIncludes_charn0, simp add: OclValid_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<tau> x.\n       \\<lbrakk>(\\<upsilon> x) \\<tau> = true \\<tau>;\n        not Set{}->includes\\<^sub>S\\<^sub>e\\<^sub>t(x) \\<tau> =\n        true \\<tau>\\<rbrakk>\n       \\<Longrightarrow> Set{}->includes\\<^sub>S\\<^sub>e\\<^sub>t(x) \\<tau> =\n                         false \\<tau>", "apply(rule foundation21[THEN fun_cong, simplified StrongEq_def,simplified,\n                     THEN iffD1, of _ _ \"false\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<tau> x.\n       \\<lbrakk>(\\<upsilon> x) \\<tau> = true \\<tau>;\n        not Set{}->includes\\<^sub>S\\<^sub>e\\<^sub>t(x) \\<tau> =\n        true \\<tau>\\<rbrakk>\n       \\<Longrightarrow> not Set{}->includes\\<^sub>S\\<^sub>e\\<^sub>t(x)\n                          \\<tau> =\n                         not false \\<tau>", "by simp"], ["proof (state)\nthis:\n  ?\\<tau>1 \\<Turnstile> \\<upsilon> ?x1 \\<Longrightarrow>\n  Set{}->includes\\<^sub>S\\<^sub>e\\<^sub>t(?x1) ?\\<tau>1 =\n  (if \\<upsilon> ?x1 then false else invalid endif) ?\\<tau>1\n\ngoal (1 subgoal):\n 1. Set{}->includes\\<^sub>S\\<^sub>e\\<^sub>t(x) =\n    (if \\<upsilon> x then false else invalid endif)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. Set{}->includes\\<^sub>S\\<^sub>e\\<^sub>t(x) =\n    (if \\<upsilon> x then false else invalid endif)", "apply(rule ext, rename_tac \\<tau>)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<tau>.\n       Set{}->includes\\<^sub>S\\<^sub>e\\<^sub>t(x) \\<tau> =\n       (if \\<upsilon> x then false else invalid endif) \\<tau>", "apply(case_tac \"\\<tau> \\<Turnstile> (\\<upsilon> x)\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>\\<tau>.\n       \\<tau> \\<Turnstile> \\<upsilon> x \\<Longrightarrow>\n       Set{}->includes\\<^sub>S\\<^sub>e\\<^sub>t(x) \\<tau> =\n       (if \\<upsilon> x then false else invalid endif) \\<tau>\n 2. \\<And>\\<tau>.\n       \\<tau> |\\<noteq> \\<upsilon> x \\<Longrightarrow>\n       Set{}->includes\\<^sub>S\\<^sub>e\\<^sub>t(x) \\<tau> =\n       (if \\<upsilon> x then false else invalid endif) \\<tau>", "apply(simp_all add: B foundation18)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<tau>.\n       x \\<tau> = invalid \\<tau> \\<Longrightarrow>\n       Set{}->includes\\<^sub>S\\<^sub>e\\<^sub>t(x) \\<tau> = invalid \\<tau>", "apply(subst OclIncludes.cp0, simp add: OclIncludes.cp0[symmetric] A)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  Set{}->includes\\<^sub>S\\<^sub>e\\<^sub>t(x) =\n  (if \\<upsilon> x then false else invalid endif)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma OclIncludes_charn1:\nassumes def_X:\"\\<tau> \\<Turnstile> (\\<delta> X)\"\nassumes val_x:\"\\<tau> \\<Turnstile> (\\<upsilon> x)\"\nshows         \"\\<tau> \\<Turnstile> (X->including\\<^sub>S\\<^sub>e\\<^sub>t(x)->includes\\<^sub>S\\<^sub>e\\<^sub>t(x))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<tau>\n     \\<Turnstile> X->including\\<^sub>S\\<^sub>e\\<^sub>t(x)->includes\\<^sub>S\\<^sub>e\\<^sub>t(x)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<tau>\n     \\<Turnstile> X->including\\<^sub>S\\<^sub>e\\<^sub>t(x)->includes\\<^sub>S\\<^sub>e\\<^sub>t(x)", "have C : \"\\<lfloor>\\<lfloor>insert (x \\<tau>) \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e (X \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor> \\<in> {X. X = bot \\<or> X = null \\<or> (\\<forall>x\\<in>\\<lceil>\\<lceil>X\\<rceil>\\<rceil>. x \\<noteq> bot)}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lfloor>\\<lfloor>insert (x \\<tau>)\n                       \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n  (X \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>\n    \\<in> {X. X = \\<bottom> \\<or>\n              X = null \\<or>\n              (\\<forall>x\\<in>\\<lceil>\\<lceil>X\\<rceil>\\<rceil>.\n                  x \\<noteq> \\<bottom>)}", "by(insert def_X val_x, frule Set_inv_lemma, simp add: foundation18 invalid_def)"], ["proof (state)\nthis:\n  \\<lfloor>\\<lfloor>insert (x \\<tau>)\n                     \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n(X \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>\n  \\<in> {X. X = \\<bottom> \\<or>\n            X = null \\<or>\n            (\\<forall>x\\<in>\\<lceil>\\<lceil>X\\<rceil>\\<rceil>.\n                x \\<noteq> \\<bottom>)}\n\ngoal (1 subgoal):\n 1. \\<tau>\n     \\<Turnstile> X->including\\<^sub>S\\<^sub>e\\<^sub>t(x)->includes\\<^sub>S\\<^sub>e\\<^sub>t(x)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<tau>\n     \\<Turnstile> X->including\\<^sub>S\\<^sub>e\\<^sub>t(x)->includes\\<^sub>S\\<^sub>e\\<^sub>t(x)", "apply(subst OclIncludes_def, simp add: foundation10[simplified OclValid_def] OclValid_def\n                                 def_X[simplified OclValid_def] val_x[simplified OclValid_def])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lfloor>\\<lfloor>x \\<tau>\n                      \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n       (X->including\\<^sub>S\\<^sub>e\\<^sub>t(x)\n         \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor> =\n    true \\<tau>", "apply(simp add: OclIncluding_def def_X[simplified OclValid_def] val_x[simplified OclValid_def]\n                  Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e_inverse[OF C] true_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  \\<tau>\n   \\<Turnstile> X->including\\<^sub>S\\<^sub>e\\<^sub>t(x)->includes\\<^sub>S\\<^sub>e\\<^sub>t(x)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma OclIncludes_charn2:\nassumes def_X:\"\\<tau> \\<Turnstile> (\\<delta> X)\"\nand     val_x:\"\\<tau> \\<Turnstile> (\\<upsilon> x)\"\nand     val_y:\"\\<tau> \\<Turnstile> (\\<upsilon> y)\"\nand     neq  :\"\\<tau> \\<Turnstile> not(x \\<triangleq> y)\"\nshows         \"\\<tau> \\<Turnstile> (X->including\\<^sub>S\\<^sub>e\\<^sub>t(x)->includes\\<^sub>S\\<^sub>e\\<^sub>t(y)) \\<triangleq> (X->includes\\<^sub>S\\<^sub>e\\<^sub>t(y))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<tau>\n     \\<Turnstile> X->including\\<^sub>S\\<^sub>e\\<^sub>t(x)->includes\\<^sub>S\\<^sub>e\\<^sub>t(y) \\<triangleq>\n                  X->includes\\<^sub>S\\<^sub>e\\<^sub>t(y)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<tau>\n     \\<Turnstile> X->including\\<^sub>S\\<^sub>e\\<^sub>t(x)->includes\\<^sub>S\\<^sub>e\\<^sub>t(y) \\<triangleq>\n                  X->includes\\<^sub>S\\<^sub>e\\<^sub>t(y)", "have C : \"\\<lfloor>\\<lfloor>insert (x \\<tau>) \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e (X \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor> \\<in> {X. X = bot \\<or> X = null \\<or> (\\<forall>x\\<in>\\<lceil>\\<lceil>X\\<rceil>\\<rceil>. x \\<noteq> bot)}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lfloor>\\<lfloor>insert (x \\<tau>)\n                       \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n  (X \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>\n    \\<in> {X. X = \\<bottom> \\<or>\n              X = null \\<or>\n              (\\<forall>x\\<in>\\<lceil>\\<lceil>X\\<rceil>\\<rceil>.\n                  x \\<noteq> \\<bottom>)}", "by(insert def_X val_x, frule Set_inv_lemma, simp add: foundation18 invalid_def)"], ["proof (state)\nthis:\n  \\<lfloor>\\<lfloor>insert (x \\<tau>)\n                     \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n(X \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>\n  \\<in> {X. X = \\<bottom> \\<or>\n            X = null \\<or>\n            (\\<forall>x\\<in>\\<lceil>\\<lceil>X\\<rceil>\\<rceil>.\n                x \\<noteq> \\<bottom>)}\n\ngoal (1 subgoal):\n 1. \\<tau>\n     \\<Turnstile> X->including\\<^sub>S\\<^sub>e\\<^sub>t(x)->includes\\<^sub>S\\<^sub>e\\<^sub>t(y) \\<triangleq>\n                  X->includes\\<^sub>S\\<^sub>e\\<^sub>t(y)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<tau>\n     \\<Turnstile> X->including\\<^sub>S\\<^sub>e\\<^sub>t(x)->includes\\<^sub>S\\<^sub>e\\<^sub>t(y) \\<triangleq>\n                  X->includes\\<^sub>S\\<^sub>e\\<^sub>t(y)", "apply(subst OclIncludes_def,\n        simp add: def_X[simplified OclValid_def] val_x[simplified OclValid_def]\n                  val_y[simplified OclValid_def] foundation10[simplified OclValid_def]\n                  OclValid_def StrongEq_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lfloor>\\<lfloor>\\<lfloor>\\<lfloor>y \\<tau>\n  \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                         (X->including\\<^sub>S\\<^sub>e\\<^sub>t(x)\n                           \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor> =\n                      X->includes\\<^sub>S\\<^sub>e\\<^sub>t(y)\n                       \\<tau>\\<rfloor>\\<rfloor> =\n    true \\<tau>", "apply(simp add: OclIncluding_def OclIncludes_def def_X[simplified OclValid_def]\n                  val_x[simplified OclValid_def] val_y[simplified OclValid_def]\n                  Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e_inverse[OF C] true_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (y \\<tau> = x \\<tau> \\<or>\n     y \\<tau>\n     \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                            (X \\<tau>)\\<rceil>\\<rceil>) =\n    (y \\<tau>\n     \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                            (X \\<tau>)\\<rceil>\\<rceil>)", "by(metis foundation22 foundation6 foundation9 neq)"], ["proof (state)\nthis:\n  \\<tau>\n   \\<Turnstile> X->including\\<^sub>S\\<^sub>e\\<^sub>t(x)->includes\\<^sub>S\\<^sub>e\\<^sub>t(y) \\<triangleq>\n                X->includes\\<^sub>S\\<^sub>e\\<^sub>t(y)\n\ngoal:\nNo subgoals!", "qed"], ["", "text\\<open>Here is again a generic theorem similar as above.\\<close>"], ["", "lemma OclIncludes_execute_generic:\nassumes strict1: \"(invalid \\<doteq> y) = invalid\"\nand     strict2: \"(x \\<doteq> invalid) = invalid\"\nand     cp_StrictRefEq: \"\\<And> (X::('\\<AA>,'a::null)val) Y \\<tau>. (X \\<doteq> Y) \\<tau> = ((\\<lambda>_. X \\<tau>) \\<doteq> (\\<lambda>_. Y \\<tau>)) \\<tau>\"\nand     StrictRefEq_vs_StrongEq: \"\\<And> (x::('\\<AA>,'a::null)val) y \\<tau>.\n                                      \\<tau> \\<Turnstile> \\<upsilon> x \\<Longrightarrow> \\<tau> \\<Turnstile> \\<upsilon> y \\<Longrightarrow> (\\<tau> \\<Turnstile> ((x \\<doteq> y) \\<triangleq> (x \\<triangleq> y)))\"\nshows\n      \"(X->including\\<^sub>S\\<^sub>e\\<^sub>t(x::('\\<AA>,'a::null)val)->includes\\<^sub>S\\<^sub>e\\<^sub>t(y)) =\n       (if \\<delta> X then if x \\<doteq> y then true else X->includes\\<^sub>S\\<^sub>e\\<^sub>t(y) endif else invalid endif)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. X->including\\<^sub>S\\<^sub>e\\<^sub>t(x)->includes\\<^sub>S\\<^sub>e\\<^sub>t(y) =\n    (if \\<delta> X then if x \\<doteq>\n                           y then true else X->includes\\<^sub>S\\<^sub>e\\<^sub>t(y) endif else invalid endif)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. X->including\\<^sub>S\\<^sub>e\\<^sub>t(x)->includes\\<^sub>S\\<^sub>e\\<^sub>t(y) =\n    (if \\<delta> X then if x \\<doteq>\n                           y then true else X->includes\\<^sub>S\\<^sub>e\\<^sub>t(y) endif else invalid endif)", "have A: \"\\<And>\\<tau>. \\<tau> \\<Turnstile> (X \\<triangleq> invalid) \\<Longrightarrow>\n            (X->including\\<^sub>S\\<^sub>e\\<^sub>t(x)->includes\\<^sub>S\\<^sub>e\\<^sub>t(y)) \\<tau> = invalid \\<tau>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<tau>.\n       \\<tau> \\<Turnstile> X \\<triangleq> invalid \\<Longrightarrow>\n       X->including\\<^sub>S\\<^sub>e\\<^sub>t(x)->includes\\<^sub>S\\<^sub>e\\<^sub>t(y)\n        \\<tau> =\n       invalid \\<tau>", "apply(rule foundation22[THEN iffD1])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<tau>.\n       \\<tau> \\<Turnstile> X \\<triangleq> invalid \\<Longrightarrow>\n       \\<tau>\n        \\<Turnstile> X->including\\<^sub>S\\<^sub>e\\<^sub>t(x)->includes\\<^sub>S\\<^sub>e\\<^sub>t(y) \\<triangleq>\n                     invalid", "by(erule StrongEq_L_subst2_rev,simp,simp)"], ["proof (state)\nthis:\n  ?\\<tau> \\<Turnstile> X \\<triangleq> invalid \\<Longrightarrow>\n  X->including\\<^sub>S\\<^sub>e\\<^sub>t(x)->includes\\<^sub>S\\<^sub>e\\<^sub>t(y)\n   ?\\<tau> =\n  invalid ?\\<tau>\n\ngoal (1 subgoal):\n 1. X->including\\<^sub>S\\<^sub>e\\<^sub>t(x)->includes\\<^sub>S\\<^sub>e\\<^sub>t(y) =\n    (if \\<delta> X then if x \\<doteq>\n                           y then true else X->includes\\<^sub>S\\<^sub>e\\<^sub>t(y) endif else invalid endif)", "have B: \"\\<And>\\<tau>. \\<tau> \\<Turnstile> (X \\<triangleq> null) \\<Longrightarrow>\n            (X->including\\<^sub>S\\<^sub>e\\<^sub>t(x)->includes\\<^sub>S\\<^sub>e\\<^sub>t(y)) \\<tau> = invalid  \\<tau>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<tau>.\n       \\<tau> \\<Turnstile> X \\<triangleq> null \\<Longrightarrow>\n       X->including\\<^sub>S\\<^sub>e\\<^sub>t(x)->includes\\<^sub>S\\<^sub>e\\<^sub>t(y)\n        \\<tau> =\n       invalid \\<tau>", "apply(rule foundation22[THEN iffD1])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<tau>.\n       \\<tau> \\<Turnstile> X \\<triangleq> null \\<Longrightarrow>\n       \\<tau>\n        \\<Turnstile> X->including\\<^sub>S\\<^sub>e\\<^sub>t(x)->includes\\<^sub>S\\<^sub>e\\<^sub>t(y) \\<triangleq>\n                     invalid", "by(erule StrongEq_L_subst2_rev,simp,simp)"], ["proof (state)\nthis:\n  ?\\<tau> \\<Turnstile> X \\<triangleq> null \\<Longrightarrow>\n  X->including\\<^sub>S\\<^sub>e\\<^sub>t(x)->includes\\<^sub>S\\<^sub>e\\<^sub>t(y)\n   ?\\<tau> =\n  invalid ?\\<tau>\n\ngoal (1 subgoal):\n 1. X->including\\<^sub>S\\<^sub>e\\<^sub>t(x)->includes\\<^sub>S\\<^sub>e\\<^sub>t(y) =\n    (if \\<delta> X then if x \\<doteq>\n                           y then true else X->includes\\<^sub>S\\<^sub>e\\<^sub>t(y) endif else invalid endif)", "note [simp] = cp_StrictRefEq [THEN allI[THEN allI[THEN allI[THEN cpI2]], of \"StrictRefEq\"]]"], ["proof (state)\nthis:\n  \\<lbrakk>cp ?P; cp ?Q\\<rbrakk>\n  \\<Longrightarrow> cp (\\<lambda>X. ?P X \\<doteq> ?Q X)\n\ngoal (1 subgoal):\n 1. X->including\\<^sub>S\\<^sub>e\\<^sub>t(x)->includes\\<^sub>S\\<^sub>e\\<^sub>t(y) =\n    (if \\<delta> X then if x \\<doteq>\n                           y then true else X->includes\\<^sub>S\\<^sub>e\\<^sub>t(y) endif else invalid endif)", "have C: \"\\<And>\\<tau>. \\<tau> \\<Turnstile> (x \\<triangleq> invalid) \\<Longrightarrow>\n           (X->including\\<^sub>S\\<^sub>e\\<^sub>t(x)->includes\\<^sub>S\\<^sub>e\\<^sub>t(y)) \\<tau> =\n           (if x \\<doteq> y then true else X->includes\\<^sub>S\\<^sub>e\\<^sub>t(y) endif) \\<tau>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<tau>.\n       \\<tau> \\<Turnstile> x \\<triangleq> invalid \\<Longrightarrow>\n       X->including\\<^sub>S\\<^sub>e\\<^sub>t(x)->includes\\<^sub>S\\<^sub>e\\<^sub>t(y)\n        \\<tau> =\n       (if x \\<doteq>\n           y then true else X->includes\\<^sub>S\\<^sub>e\\<^sub>t(y) endif)\n        \\<tau>", "apply(rule foundation22[THEN iffD1])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<tau>.\n       \\<tau> \\<Turnstile> x \\<triangleq> invalid \\<Longrightarrow>\n       \\<tau>\n        \\<Turnstile> X->including\\<^sub>S\\<^sub>e\\<^sub>t(x)->includes\\<^sub>S\\<^sub>e\\<^sub>t(y) \\<triangleq>\n                     if x \\<doteq>\n                        y then true else X->includes\\<^sub>S\\<^sub>e\\<^sub>t(y) endif", "apply(erule StrongEq_L_subst2_rev,simp,simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<tau>.\n       \\<tau>\n        \\<Turnstile> invalid \\<triangleq>\n                     if invalid \\<doteq>\n                        y then true else X->includes\\<^sub>S\\<^sub>e\\<^sub>t(y) endif", "by (simp add: strict1)"], ["proof (state)\nthis:\n  ?\\<tau> \\<Turnstile> x \\<triangleq> invalid \\<Longrightarrow>\n  X->including\\<^sub>S\\<^sub>e\\<^sub>t(x)->includes\\<^sub>S\\<^sub>e\\<^sub>t(y)\n   ?\\<tau> =\n  (if x \\<doteq>\n      y then true else X->includes\\<^sub>S\\<^sub>e\\<^sub>t(y) endif)\n   ?\\<tau>\n\ngoal (1 subgoal):\n 1. X->including\\<^sub>S\\<^sub>e\\<^sub>t(x)->includes\\<^sub>S\\<^sub>e\\<^sub>t(y) =\n    (if \\<delta> X then if x \\<doteq>\n                           y then true else X->includes\\<^sub>S\\<^sub>e\\<^sub>t(y) endif else invalid endif)", "have D:\"\\<And>\\<tau>. \\<tau> \\<Turnstile> (y \\<triangleq> invalid) \\<Longrightarrow>\n           (X->including\\<^sub>S\\<^sub>e\\<^sub>t(x)->includes\\<^sub>S\\<^sub>e\\<^sub>t(y)) \\<tau> =\n           (if x \\<doteq> y then true else X->includes\\<^sub>S\\<^sub>e\\<^sub>t(y) endif) \\<tau>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<tau>.\n       \\<tau> \\<Turnstile> y \\<triangleq> invalid \\<Longrightarrow>\n       X->including\\<^sub>S\\<^sub>e\\<^sub>t(x)->includes\\<^sub>S\\<^sub>e\\<^sub>t(y)\n        \\<tau> =\n       (if x \\<doteq>\n           y then true else X->includes\\<^sub>S\\<^sub>e\\<^sub>t(y) endif)\n        \\<tau>", "apply(rule foundation22[THEN iffD1])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<tau>.\n       \\<tau> \\<Turnstile> y \\<triangleq> invalid \\<Longrightarrow>\n       \\<tau>\n        \\<Turnstile> X->including\\<^sub>S\\<^sub>e\\<^sub>t(x)->includes\\<^sub>S\\<^sub>e\\<^sub>t(y) \\<triangleq>\n                     if x \\<doteq>\n                        y then true else X->includes\\<^sub>S\\<^sub>e\\<^sub>t(y) endif", "apply(erule StrongEq_L_subst2_rev,simp,simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<tau>.\n       \\<tau>\n        \\<Turnstile> invalid \\<triangleq>\n                     if x \\<doteq> invalid then true else invalid endif", "by (simp add: strict2)"], ["proof (state)\nthis:\n  ?\\<tau> \\<Turnstile> y \\<triangleq> invalid \\<Longrightarrow>\n  X->including\\<^sub>S\\<^sub>e\\<^sub>t(x)->includes\\<^sub>S\\<^sub>e\\<^sub>t(y)\n   ?\\<tau> =\n  (if x \\<doteq>\n      y then true else X->includes\\<^sub>S\\<^sub>e\\<^sub>t(y) endif)\n   ?\\<tau>\n\ngoal (1 subgoal):\n 1. X->including\\<^sub>S\\<^sub>e\\<^sub>t(x)->includes\\<^sub>S\\<^sub>e\\<^sub>t(y) =\n    (if \\<delta> X then if x \\<doteq>\n                           y then true else X->includes\\<^sub>S\\<^sub>e\\<^sub>t(y) endif else invalid endif)", "have E: \"\\<And>\\<tau>. \\<tau> \\<Turnstile> \\<upsilon> x \\<Longrightarrow> \\<tau> \\<Turnstile> \\<upsilon> y \\<Longrightarrow>\n              (if x \\<doteq> y then true else X->includes\\<^sub>S\\<^sub>e\\<^sub>t(y) endif) \\<tau> =\n              (if x \\<triangleq> y then true else X->includes\\<^sub>S\\<^sub>e\\<^sub>t(y) endif) \\<tau>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<tau>.\n       \\<lbrakk>\\<tau> \\<Turnstile> \\<upsilon> x;\n        \\<tau> \\<Turnstile> \\<upsilon> y\\<rbrakk>\n       \\<Longrightarrow> (if x \\<doteq>\n                             y then true else X->includes\\<^sub>S\\<^sub>e\\<^sub>t(y) endif)\n                          \\<tau> =\n                         (if x \\<triangleq>\n                             y then true else X->includes\\<^sub>S\\<^sub>e\\<^sub>t(y) endif)\n                          \\<tau>", "apply(subst cp_OclIf)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<tau>.\n       \\<lbrakk>\\<tau> \\<Turnstile> \\<upsilon> x;\n        \\<tau> \\<Turnstile> \\<upsilon> y\\<rbrakk>\n       \\<Longrightarrow> (if (\\<lambda>_.\n                                 (x \\<doteq> y)\n                                  \\<tau>) then (\\<lambda>_.\n             true\n              \\<tau>) else (\\<lambda>_.\n                               X->includes\\<^sub>S\\<^sub>e\\<^sub>t(y)\n                                \\<tau>) endif)\n                          \\<tau> =\n                         (if x \\<triangleq>\n                             y then true else X->includes\\<^sub>S\\<^sub>e\\<^sub>t(y) endif)\n                          \\<tau>", "apply(subst StrictRefEq_vs_StrongEq[THEN foundation22[THEN iffD1]])"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>\\<tau> _.\n       \\<lbrakk>\\<tau> \\<Turnstile> \\<upsilon> x;\n        \\<tau> \\<Turnstile> \\<upsilon> y\\<rbrakk>\n       \\<Longrightarrow> \\<tau> \\<Turnstile> \\<upsilon> x\n 2. \\<And>\\<tau> _.\n       \\<lbrakk>\\<tau> \\<Turnstile> \\<upsilon> x;\n        \\<tau> \\<Turnstile> \\<upsilon> y\\<rbrakk>\n       \\<Longrightarrow> \\<tau> \\<Turnstile> \\<upsilon> y\n 3. \\<And>\\<tau>.\n       \\<lbrakk>\\<tau> \\<Turnstile> \\<upsilon> x;\n        \\<tau> \\<Turnstile> \\<upsilon> y\\<rbrakk>\n       \\<Longrightarrow> (if (\\<lambda>_.\n                                 (x \\<triangleq> y)\n                                  \\<tau>) then (\\<lambda>_.\n             true\n              \\<tau>) else (\\<lambda>_.\n                               X->includes\\<^sub>S\\<^sub>e\\<^sub>t(y)\n                                \\<tau>) endif)\n                          \\<tau> =\n                         (if x \\<triangleq>\n                             y then true else X->includes\\<^sub>S\\<^sub>e\\<^sub>t(y) endif)\n                          \\<tau>", "by(simp_all add: cp_OclIf[symmetric])"], ["proof (state)\nthis:\n  \\<lbrakk>?\\<tau> \\<Turnstile> \\<upsilon> x;\n   ?\\<tau> \\<Turnstile> \\<upsilon> y\\<rbrakk>\n  \\<Longrightarrow> (if x \\<doteq>\n                        y then true else X->includes\\<^sub>S\\<^sub>e\\<^sub>t(y) endif)\n                     ?\\<tau> =\n                    (if x \\<triangleq>\n                        y then true else X->includes\\<^sub>S\\<^sub>e\\<^sub>t(y) endif)\n                     ?\\<tau>\n\ngoal (1 subgoal):\n 1. X->including\\<^sub>S\\<^sub>e\\<^sub>t(x)->includes\\<^sub>S\\<^sub>e\\<^sub>t(y) =\n    (if \\<delta> X then if x \\<doteq>\n                           y then true else X->includes\\<^sub>S\\<^sub>e\\<^sub>t(y) endif else invalid endif)", "have F: \"\\<And>\\<tau>. \\<tau> \\<Turnstile> (x \\<triangleq> y) \\<Longrightarrow>\n               (X->including\\<^sub>S\\<^sub>e\\<^sub>t(x)->includes\\<^sub>S\\<^sub>e\\<^sub>t(y)) \\<tau> = (X->including\\<^sub>S\\<^sub>e\\<^sub>t(x)->includes\\<^sub>S\\<^sub>e\\<^sub>t(x)) \\<tau>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<tau>.\n       \\<tau> \\<Turnstile> x \\<triangleq> y \\<Longrightarrow>\n       X->including\\<^sub>S\\<^sub>e\\<^sub>t(x)->includes\\<^sub>S\\<^sub>e\\<^sub>t(y)\n        \\<tau> =\n       X->including\\<^sub>S\\<^sub>e\\<^sub>t(x)->includes\\<^sub>S\\<^sub>e\\<^sub>t(x)\n        \\<tau>", "apply(rule foundation22[THEN iffD1])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<tau>.\n       \\<tau> \\<Turnstile> x \\<triangleq> y \\<Longrightarrow>\n       \\<tau>\n        \\<Turnstile> X->including\\<^sub>S\\<^sub>e\\<^sub>t(x)->includes\\<^sub>S\\<^sub>e\\<^sub>t(y) \\<triangleq>\n                     X->including\\<^sub>S\\<^sub>e\\<^sub>t(x)->includes\\<^sub>S\\<^sub>e\\<^sub>t(x)", "by(erule StrongEq_L_subst2_rev,simp, simp)"], ["proof (state)\nthis:\n  ?\\<tau> \\<Turnstile> x \\<triangleq> y \\<Longrightarrow>\n  X->including\\<^sub>S\\<^sub>e\\<^sub>t(x)->includes\\<^sub>S\\<^sub>e\\<^sub>t(y)\n   ?\\<tau> =\n  X->including\\<^sub>S\\<^sub>e\\<^sub>t(x)->includes\\<^sub>S\\<^sub>e\\<^sub>t(x)\n   ?\\<tau>\n\ngoal (1 subgoal):\n 1. X->including\\<^sub>S\\<^sub>e\\<^sub>t(x)->includes\\<^sub>S\\<^sub>e\\<^sub>t(y) =\n    (if \\<delta> X then if x \\<doteq>\n                           y then true else X->includes\\<^sub>S\\<^sub>e\\<^sub>t(y) endif else invalid endif)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. X->including\\<^sub>S\\<^sub>e\\<^sub>t(x)->includes\\<^sub>S\\<^sub>e\\<^sub>t(y) =\n    (if \\<delta> X then if x \\<doteq>\n                           y then true else X->includes\\<^sub>S\\<^sub>e\\<^sub>t(y) endif else invalid endif)", "apply(rule ext, rename_tac \"\\<tau>\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<tau>.\n       X->including\\<^sub>S\\<^sub>e\\<^sub>t(x)->includes\\<^sub>S\\<^sub>e\\<^sub>t(y)\n        \\<tau> =\n       (if \\<delta> X then if x \\<doteq>\n                              y then true else X->includes\\<^sub>S\\<^sub>e\\<^sub>t(y) endif else invalid endif)\n        \\<tau>", "apply(case_tac \"\\<not> (\\<tau> \\<Turnstile> (\\<delta> X))\", simp add:defined_split,elim disjE A B)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<tau>.\n       \\<not> \\<tau> |\\<noteq> \\<delta> X \\<Longrightarrow>\n       X->including\\<^sub>S\\<^sub>e\\<^sub>t(x)->includes\\<^sub>S\\<^sub>e\\<^sub>t(y)\n        \\<tau> =\n       (if \\<delta> X then if x \\<doteq>\n                              y then true else X->includes\\<^sub>S\\<^sub>e\\<^sub>t(y) endif else invalid endif)\n        \\<tau>", "apply(case_tac \"\\<not> (\\<tau> \\<Turnstile> (\\<upsilon> x))\",\n          simp add:foundation18 foundation22[symmetric],\n          drule StrongEq_L_sym)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>\\<tau>.\n       \\<lbrakk>\\<tau> \\<Turnstile> \\<delta> X;\n        \\<tau> \\<Turnstile> invalid \\<triangleq> x\\<rbrakk>\n       \\<Longrightarrow> \\<tau>\n                          \\<Turnstile> X->including\\<^sub>S\\<^sub>e\\<^sub>t(x)->includes\\<^sub>S\\<^sub>e\\<^sub>t(y) \\<triangleq>\n if x \\<doteq> y then true else X->includes\\<^sub>S\\<^sub>e\\<^sub>t(y) endif\n 2. \\<And>\\<tau>.\n       \\<lbrakk>\\<not> \\<tau> |\\<noteq> \\<delta> X;\n        \\<not> \\<tau> |\\<noteq> \\<upsilon> x\\<rbrakk>\n       \\<Longrightarrow> X->including\\<^sub>S\\<^sub>e\\<^sub>t(x)->includes\\<^sub>S\\<^sub>e\\<^sub>t(y)\n                          \\<tau> =\n                         (if \\<delta> X then if x \\<doteq>\n          y then true else X->includes\\<^sub>S\\<^sub>e\\<^sub>t(y) endif else invalid endif)\n                          \\<tau>", "apply(simp add: foundation22 C)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<tau>.\n       \\<lbrakk>\\<not> \\<tau> |\\<noteq> \\<delta> X;\n        \\<not> \\<tau> |\\<noteq> \\<upsilon> x\\<rbrakk>\n       \\<Longrightarrow> X->including\\<^sub>S\\<^sub>e\\<^sub>t(x)->includes\\<^sub>S\\<^sub>e\\<^sub>t(y)\n                          \\<tau> =\n                         (if \\<delta> X then if x \\<doteq>\n          y then true else X->includes\\<^sub>S\\<^sub>e\\<^sub>t(y) endif else invalid endif)\n                          \\<tau>", "apply(case_tac \"\\<not> (\\<tau> \\<Turnstile> (\\<upsilon> y))\",\n          simp add:foundation18 foundation22[symmetric],\n          drule StrongEq_L_sym, simp add: foundation22 D, simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<tau>.\n       \\<lbrakk>\\<tau> \\<Turnstile> \\<delta> X;\n        \\<tau> \\<Turnstile> \\<upsilon> x;\n        \\<tau> \\<Turnstile> \\<upsilon> y\\<rbrakk>\n       \\<Longrightarrow> X->including\\<^sub>S\\<^sub>e\\<^sub>t(x)->includes\\<^sub>S\\<^sub>e\\<^sub>t(y)\n                          \\<tau> =\n                         (if x \\<doteq>\n                             y then true else X->includes\\<^sub>S\\<^sub>e\\<^sub>t(y) endif)\n                          \\<tau>", "apply(subst E,simp_all)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<tau>.\n       \\<lbrakk>\\<tau> \\<Turnstile> \\<delta> X;\n        \\<tau> \\<Turnstile> \\<upsilon> x;\n        \\<tau> \\<Turnstile> \\<upsilon> y\\<rbrakk>\n       \\<Longrightarrow> X->including\\<^sub>S\\<^sub>e\\<^sub>t(x)->includes\\<^sub>S\\<^sub>e\\<^sub>t(y)\n                          \\<tau> =\n                         (if x \\<triangleq>\n                             y then true else X->includes\\<^sub>S\\<^sub>e\\<^sub>t(y) endif)\n                          \\<tau>", "apply(case_tac \"\\<tau> \\<Turnstile> not(x \\<triangleq> y)\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>\\<tau>.\n       \\<lbrakk>\\<tau> \\<Turnstile> \\<delta> X;\n        \\<tau> \\<Turnstile> \\<upsilon> x; \\<tau> \\<Turnstile> \\<upsilon> y;\n        \\<tau> \\<Turnstile> not (x \\<triangleq> y)\\<rbrakk>\n       \\<Longrightarrow> X->including\\<^sub>S\\<^sub>e\\<^sub>t(x)->includes\\<^sub>S\\<^sub>e\\<^sub>t(y)\n                          \\<tau> =\n                         (if x \\<triangleq>\n                             y then true else X->includes\\<^sub>S\\<^sub>e\\<^sub>t(y) endif)\n                          \\<tau>\n 2. \\<And>\\<tau>.\n       \\<lbrakk>\\<tau> \\<Turnstile> \\<delta> X;\n        \\<tau> \\<Turnstile> \\<upsilon> x; \\<tau> \\<Turnstile> \\<upsilon> y;\n        \\<tau> |\\<noteq> not (x \\<triangleq> y)\\<rbrakk>\n       \\<Longrightarrow> X->including\\<^sub>S\\<^sub>e\\<^sub>t(x)->includes\\<^sub>S\\<^sub>e\\<^sub>t(y)\n                          \\<tau> =\n                         (if x \\<triangleq>\n                             y then true else X->includes\\<^sub>S\\<^sub>e\\<^sub>t(y) endif)\n                          \\<tau>", "apply(simp add: OclIncludes_charn2[simplified foundation22])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<tau>.\n       \\<lbrakk>\\<tau> \\<Turnstile> \\<delta> X;\n        \\<tau> \\<Turnstile> \\<upsilon> x; \\<tau> \\<Turnstile> \\<upsilon> y;\n        \\<tau> |\\<noteq> not (x \\<triangleq> y)\\<rbrakk>\n       \\<Longrightarrow> X->including\\<^sub>S\\<^sub>e\\<^sub>t(x)->includes\\<^sub>S\\<^sub>e\\<^sub>t(y)\n                          \\<tau> =\n                         (if x \\<triangleq>\n                             y then true else X->includes\\<^sub>S\\<^sub>e\\<^sub>t(y) endif)\n                          \\<tau>", "apply(simp add: foundation9 F\n                    OclIncludes_charn1[THEN foundation13[THEN iffD2],\n                                     THEN foundation22[THEN iffD1]])"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  X->including\\<^sub>S\\<^sub>e\\<^sub>t(x)->includes\\<^sub>S\\<^sub>e\\<^sub>t(y) =\n  (if \\<delta> X then if x \\<doteq>\n                         y then true else X->includes\\<^sub>S\\<^sub>e\\<^sub>t(y) endif else invalid endif)\n\ngoal:\nNo subgoals!", "qed"], ["", "(* Hack to work around OF-Bug *)"], ["", "schematic_goal OclIncludes_execute\\<^sub>I\\<^sub>n\\<^sub>t\\<^sub>e\\<^sub>g\\<^sub>e\\<^sub>r[simp,code_unfold]: \"?X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ?X", "by(rule OclIncludes_execute_generic[OF StrictRefEq\\<^sub>I\\<^sub>n\\<^sub>t\\<^sub>e\\<^sub>g\\<^sub>e\\<^sub>r.strict1 StrictRefEq\\<^sub>I\\<^sub>n\\<^sub>t\\<^sub>e\\<^sub>g\\<^sub>e\\<^sub>r.strict2\n                                    StrictRefEq\\<^sub>I\\<^sub>n\\<^sub>t\\<^sub>e\\<^sub>g\\<^sub>e\\<^sub>r.cp0\n                                    StrictRefEq\\<^sub>I\\<^sub>n\\<^sub>t\\<^sub>e\\<^sub>g\\<^sub>e\\<^sub>r.StrictRefEq_vs_StrongEq], simp_all)"], ["", "schematic_goal OclIncludes_execute\\<^sub>B\\<^sub>o\\<^sub>o\\<^sub>l\\<^sub>e\\<^sub>a\\<^sub>n[simp,code_unfold]: \"?X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ?X", "by(rule OclIncludes_execute_generic[OF StrictRefEq\\<^sub>B\\<^sub>o\\<^sub>o\\<^sub>l\\<^sub>e\\<^sub>a\\<^sub>n.strict1 StrictRefEq\\<^sub>B\\<^sub>o\\<^sub>o\\<^sub>l\\<^sub>e\\<^sub>a\\<^sub>n.strict2\n                                    StrictRefEq\\<^sub>B\\<^sub>o\\<^sub>o\\<^sub>l\\<^sub>e\\<^sub>a\\<^sub>n.cp0\n                                    StrictRefEq\\<^sub>B\\<^sub>o\\<^sub>o\\<^sub>l\\<^sub>e\\<^sub>a\\<^sub>n.StrictRefEq_vs_StrongEq], simp_all)"], ["", "schematic_goal OclIncludes_execute\\<^sub>S\\<^sub>e\\<^sub>t[simp,code_unfold]: \"?X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ?X", "by(rule OclIncludes_execute_generic[OF StrictRefEq\\<^sub>S\\<^sub>e\\<^sub>t.strict1 StrictRefEq\\<^sub>S\\<^sub>e\\<^sub>t.strict2\n                                    StrictRefEq\\<^sub>S\\<^sub>e\\<^sub>t.cp0\n                                    StrictRefEq\\<^sub>S\\<^sub>e\\<^sub>t.StrictRefEq_vs_StrongEq], simp_all)"], ["", "lemma OclIncludes_including_generic :\n assumes OclIncludes_execute_generic [simp] : \"\\<And>X x y.\n           (X->including\\<^sub>S\\<^sub>e\\<^sub>t(x::('\\<AA>,'a::null)val)->includes\\<^sub>S\\<^sub>e\\<^sub>t(y)) =\n           (if \\<delta> X then if x \\<doteq> y then true else X->includes\\<^sub>S\\<^sub>e\\<^sub>t(y) endif else invalid endif)\"\n     and StrictRefEq_strict'' : \"\\<And>x y. \\<delta> ((x::('\\<AA>,'a::null)val) \\<doteq> y) = (\\<upsilon>(x) and \\<upsilon>(y))\"\n     and a_val : \"\\<tau> \\<Turnstile> \\<upsilon> a\"\n     and x_val : \"\\<tau> \\<Turnstile> \\<upsilon> x\"\n     and S_incl : \"\\<tau> \\<Turnstile> (S)->includes\\<^sub>S\\<^sub>e\\<^sub>t((x::('\\<AA>,'a::null)val))\"\n   shows \"\\<tau> \\<Turnstile> S->including\\<^sub>S\\<^sub>e\\<^sub>t((a::('\\<AA>,'a::null)val))->includes\\<^sub>S\\<^sub>e\\<^sub>t(x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<tau>\n     \\<Turnstile> S->including\\<^sub>S\\<^sub>e\\<^sub>t(a)->includes\\<^sub>S\\<^sub>e\\<^sub>t(x)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<tau>\n     \\<Turnstile> S->including\\<^sub>S\\<^sub>e\\<^sub>t(a)->includes\\<^sub>S\\<^sub>e\\<^sub>t(x)", "have discr_eq_bot1_true : \"\\<And>\\<tau>. (\\<bottom> \\<tau> = true \\<tau>) = False\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<tau>. (\\<bottom> \\<tau> = true \\<tau>) = False", "by (metis bot_fun_def foundation1 foundation18' valid3)"], ["proof (state)\nthis:\n  (\\<bottom> ?\\<tau> = true ?\\<tau>) = False\n\ngoal (1 subgoal):\n 1. \\<tau>\n     \\<Turnstile> S->including\\<^sub>S\\<^sub>e\\<^sub>t(a)->includes\\<^sub>S\\<^sub>e\\<^sub>t(x)", "have discr_eq_bot2_true : \"\\<And>\\<tau>. (\\<bottom> = true \\<tau>) = False\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<tau>. (\\<bottom> = true \\<tau>) = False", "by (metis bot_fun_def discr_eq_bot1_true)"], ["proof (state)\nthis:\n  (\\<bottom> = true ?\\<tau>1) = False\n\ngoal (1 subgoal):\n 1. \\<tau>\n     \\<Turnstile> S->including\\<^sub>S\\<^sub>e\\<^sub>t(a)->includes\\<^sub>S\\<^sub>e\\<^sub>t(x)", "have discr_neq_invalid_true : \"\\<And>\\<tau>. (invalid \\<tau> \\<noteq> true \\<tau>) = True\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<tau>. (invalid \\<tau> \\<noteq> true \\<tau>) = True", "by (metis discr_eq_bot2_true invalid_def)"], ["proof (state)\nthis:\n  (invalid ?\\<tau>2 \\<noteq> true ?\\<tau>2) = True\n\ngoal (1 subgoal):\n 1. \\<tau>\n     \\<Turnstile> S->including\\<^sub>S\\<^sub>e\\<^sub>t(a)->includes\\<^sub>S\\<^sub>e\\<^sub>t(x)", "have discr_eq_invalid_true : \"\\<And>\\<tau>. (invalid \\<tau> = true \\<tau>) = False\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<tau>. (invalid \\<tau> = true \\<tau>) = False", "by (metis bot_option_def invalid_def option.simps(2) true_def)"], ["proof (state)\nthis:\n  (invalid ?\\<tau>3 = true ?\\<tau>3) = False\n\ngoal (1 subgoal):\n 1. \\<tau>\n     \\<Turnstile> S->including\\<^sub>S\\<^sub>e\\<^sub>t(a)->includes\\<^sub>S\\<^sub>e\\<^sub>t(x)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<tau>\n     \\<Turnstile> S->including\\<^sub>S\\<^sub>e\\<^sub>t(a)->includes\\<^sub>S\\<^sub>e\\<^sub>t(x)", "apply(simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<tau>\n     \\<Turnstile> if \\<delta> S then if a \\<doteq>\n  x then true else S->includes\\<^sub>S\\<^sub>e\\<^sub>t(x) endif else invalid endif", "apply(subgoal_tac \"\\<tau> \\<Turnstile> \\<delta> S\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<tau> \\<Turnstile> \\<delta> S \\<Longrightarrow>\n    \\<tau>\n     \\<Turnstile> if \\<delta> S then if a \\<doteq>\n  x then true else S->includes\\<^sub>S\\<^sub>e\\<^sub>t(x) endif else invalid endif\n 2. \\<tau> \\<Turnstile> \\<delta> S", "prefer 2"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<tau> \\<Turnstile> \\<delta> S\n 2. \\<tau> \\<Turnstile> \\<delta> S \\<Longrightarrow>\n    \\<tau>\n     \\<Turnstile> if \\<delta> S then if a \\<doteq>\n  x then true else S->includes\\<^sub>S\\<^sub>e\\<^sub>t(x) endif else invalid endif", "apply(insert S_incl[simplified OclIncludes_def], simp add:  OclValid_def)"], ["proof (prove)\ngoal (2 subgoals):\n 1. (if (\\<delta> S) \\<tau> = true \\<tau> \\<and>\n        (\\<upsilon> x) \\<tau> = true \\<tau>\n     then \\<lfloor>\\<lfloor>x \\<tau>\n                            \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n             (S \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>\n     else \\<bottom>) =\n    true \\<tau> \\<Longrightarrow>\n    (\\<delta> S) \\<tau> = true \\<tau>\n 2. \\<lbrakk>\\<tau> \\<Turnstile> \\<delta> S;\n     \\<tau>\n      \\<Turnstile> \\<lambda>\\<tau>.\n                      if (\\<delta> S) \\<tau> = true \\<tau> \\<and>\n                         (\\<upsilon> x) \\<tau> = true \\<tau>\n                      then \\<lfloor>\\<lfloor>x \\<tau>\n       \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                              (S \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>\n                      else \\<bottom>\\<rbrakk>\n    \\<Longrightarrow> \\<tau>\n                       \\<Turnstile> if \\<delta> S then if a \\<doteq>\n                    x then true else S->includes\\<^sub>S\\<^sub>e\\<^sub>t(x) endif else invalid endif", "apply(metis discr_eq_bot2_true)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<tau> \\<Turnstile> \\<delta> S;\n     \\<tau>\n      \\<Turnstile> \\<lambda>\\<tau>.\n                      if (\\<delta> S) \\<tau> = true \\<tau> \\<and>\n                         (\\<upsilon> x) \\<tau> = true \\<tau>\n                      then \\<lfloor>\\<lfloor>x \\<tau>\n       \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                              (S \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>\n                      else \\<bottom>\\<rbrakk>\n    \\<Longrightarrow> \\<tau>\n                       \\<Turnstile> if \\<delta> S then if a \\<doteq>\n                    x then true else S->includes\\<^sub>S\\<^sub>e\\<^sub>t(x) endif else invalid endif", "apply(simp add: cp_OclIf[of \"\\<delta> S\"] OclValid_def OclIf_def x_val[simplified OclValid_def]\n                  discr_neq_invalid_true discr_eq_invalid_true)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>(\\<delta> S) \\<tau> = true \\<tau>;\n     \\<lfloor>\\<lfloor>x \\<tau>\n                       \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n        (S \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor> =\n     true \\<tau>\\<rbrakk>\n    \\<Longrightarrow> ((a \\<doteq> x) \\<tau> = true \\<tau> \\<longrightarrow>\n                       (\\<delta> (a \\<doteq> x)) \\<tau> =\n                       true \\<tau>) \\<and>\n                      ((a \\<doteq> x) \\<tau> \\<noteq>\n                       true \\<tau> \\<longrightarrow>\n                       ((\\<delta> (a \\<doteq> x)) \\<tau> =\n                        true \\<tau> \\<longrightarrow>\n                        S->includes\\<^sub>S\\<^sub>e\\<^sub>t(x) \\<tau> =\n                        true \\<tau>) \\<and>\n                       (\\<delta> (a \\<doteq> x)) \\<tau> = true \\<tau>)", "by (metis OclValid_def S_incl StrictRefEq_strict'' a_val foundation10 foundation6 x_val)"], ["proof (state)\nthis:\n  \\<tau>\n   \\<Turnstile> S->including\\<^sub>S\\<^sub>e\\<^sub>t(a)->includes\\<^sub>S\\<^sub>e\\<^sub>t(x)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemmas OclIncludes_including\\<^sub>I\\<^sub>n\\<^sub>t\\<^sub>e\\<^sub>g\\<^sub>e\\<^sub>r =\n       OclIncludes_including_generic[OF OclIncludes_execute\\<^sub>I\\<^sub>n\\<^sub>t\\<^sub>e\\<^sub>g\\<^sub>e\\<^sub>r StrictRefEq\\<^sub>I\\<^sub>n\\<^sub>t\\<^sub>e\\<^sub>g\\<^sub>e\\<^sub>r.def_homo]"], ["", "subsubsection\\<open>Execution Rules on Excludes\\<close>"], ["", "lemma OclExcludes_charn1:\nassumes def_X:\"\\<tau> \\<Turnstile> (\\<delta> X)\"\nassumes val_x:\"\\<tau> \\<Turnstile> (\\<upsilon> x)\"\nshows         \"\\<tau> \\<Turnstile> (X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(x)->excludes\\<^sub>S\\<^sub>e\\<^sub>t(x))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<tau>\n     \\<Turnstile> X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(x)->excludes\\<^sub>S\\<^sub>e\\<^sub>t(x)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<tau>\n     \\<Turnstile> X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(x)->excludes\\<^sub>S\\<^sub>e\\<^sub>t(x)", "let ?OclSet = \"\\<lambda>S. \\<lfloor>\\<lfloor>S\\<rfloor>\\<rfloor> \\<in> {X. X = \\<bottom> \\<or> X = null \\<or> (\\<forall>x\\<in>\\<lceil>\\<lceil>X\\<rceil>\\<rceil>. x \\<noteq> \\<bottom>)}\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<tau>\n     \\<Turnstile> X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(x)->excludes\\<^sub>S\\<^sub>e\\<^sub>t(x)", "have diff_in_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e : \"?OclSet (\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e (X \\<tau>)\\<rceil>\\<rceil> - {x \\<tau>})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n (X \\<tau>)\\<rceil>\\<rceil> -\n                      {x \\<tau>}\\<rfloor>\\<rfloor>\n    \\<in> {X. X = \\<bottom> \\<or>\n              X = null \\<or>\n              (\\<forall>x\\<in>\\<lceil>\\<lceil>X\\<rceil>\\<rceil>.\n                  x \\<noteq> \\<bottom>)}", "apply(simp, (rule disjI2)+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                    (X \\<tau>)\\<rceil>\\<rceil> -\n                   {x \\<tau>}.\n       x \\<noteq> \\<bottom>", "by (metis (hide_lams, no_types) Diff_iff Set_inv_lemma def_X)"], ["proof (state)\nthis:\n  \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                     (X \\<tau>)\\<rceil>\\<rceil> -\n                    {x \\<tau>}\\<rfloor>\\<rfloor>\n  \\<in> {X. X = \\<bottom> \\<or>\n            X = null \\<or>\n            (\\<forall>x\\<in>\\<lceil>\\<lceil>X\\<rceil>\\<rceil>.\n                x \\<noteq> \\<bottom>)}\n\ngoal (1 subgoal):\n 1. \\<tau>\n     \\<Turnstile> X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(x)->excludes\\<^sub>S\\<^sub>e\\<^sub>t(x)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<tau>\n     \\<Turnstile> X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(x)->excludes\\<^sub>S\\<^sub>e\\<^sub>t(x)", "apply(subst OclExcludes_def, simp add: foundation10[simplified OclValid_def] OclValid_def\n                                 def_X[simplified OclValid_def] val_x[simplified OclValid_def])"], ["proof (prove)\ngoal (1 subgoal):\n 1. not X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(x)->includes\\<^sub>S\\<^sub>e\\<^sub>t(x)\n     \\<tau> =\n    true \\<tau>", "apply(subst OclIncludes_def, simp add: OclNot_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. ((\\<delta> X and \\<upsilon> x) \\<tau> = true \\<tau> \\<and>\n     (\\<upsilon> x) \\<tau> = true \\<tau> \\<longrightarrow>\n     \\<lfloor>\\<lfloor>x \\<tau>\n                       \\<notin> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n           (X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(x)\n             \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor> =\n     true \\<tau>) \\<and>\n    (((\\<delta> X and \\<upsilon> x) \\<tau> = true \\<tau> \\<longrightarrow>\n      (\\<upsilon> x) \\<tau> \\<noteq> true \\<tau>) \\<longrightarrow>\n     (case \\<bottom> of None \\<Rightarrow> None\n      | \\<lfloor>None\\<rfloor> \\<Rightarrow> \\<lfloor>None\\<rfloor>\n      | \\<lfloor>\\<lfloor>xa\\<rfloor>\\<rfloor> \\<Rightarrow>\n          \\<lfloor>\\<lfloor>\\<not> xa\\<rfloor>\\<rfloor>) =\n     true \\<tau>)", "apply(simp add: OclExcluding_def def_X[simplified OclValid_def] val_x[simplified OclValid_def]\n                  Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e_inverse[OF diff_in_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e] true_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<delta> X and \\<upsilon> x) \\<tau> \\<noteq>\n    \\<lfloor>\\<lfloor>True\\<rfloor>\\<rfloor> \\<longrightarrow>\n    (case \\<bottom> of None \\<Rightarrow> None\n     | \\<lfloor>None\\<rfloor> \\<Rightarrow> \\<lfloor>None\\<rfloor>\n     | \\<lfloor>\\<lfloor>xa\\<rfloor>\\<rfloor> \\<Rightarrow>\n         \\<lfloor>\\<lfloor>\\<not> xa\\<rfloor>\\<rfloor>) =\n    \\<lfloor>\\<lfloor>True\\<rfloor>\\<rfloor>", "by(simp add: OclAnd_def def_X[simplified OclValid_def] val_x[simplified OclValid_def] true_def)"], ["proof (state)\nthis:\n  \\<tau>\n   \\<Turnstile> X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(x)->excludes\\<^sub>S\\<^sub>e\\<^sub>t(x)\n\ngoal:\nNo subgoals!", "qed"], ["", "subsubsection\\<open>Execution Rules on Size\\<close>"], ["", "lemma [simp,code_unfold]: \"Set{} ->size\\<^sub>S\\<^sub>e\\<^sub>t() = \\<zero>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Set{}->size\\<^sub>S\\<^sub>e\\<^sub>t() = \\<zero>", "apply(rule ext)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x. Set{}->size\\<^sub>S\\<^sub>e\\<^sub>t() x = \\<zero> x", "apply(simp add: defined_def mtSet_def OclSize_def\n                 bot_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e_def bot_fun_def\n                 null_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e_def null_fun_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       (Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n         \\<lfloor>\\<lfloor>{}\\<rfloor>\\<rfloor> =\n        Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e None \\<longrightarrow>\n        (false x = true x \\<and>\n         finite\n          \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                           (Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                             None)\\<rceil>\\<rceil> \\<longrightarrow>\n         \\<lfloor>\\<lfloor>int (card\n                                 \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n            (Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n              None)\\<rceil>\\<rceil>)\\<rfloor>\\<rfloor> =\n         \\<zero> x) \\<and>\n        ((false x = true x \\<longrightarrow>\n          infinite\n           \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                            (Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                              None)\\<rceil>\\<rceil>) \\<longrightarrow>\n         \\<bottom> = \\<zero> x)) \\<and>\n       (Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n         \\<lfloor>\\<lfloor>{}\\<rfloor>\\<rfloor> =\n        Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n         \\<lfloor>None\\<rfloor> \\<longrightarrow>\n        (false x = true x \\<and>\n         finite\n          \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                           (Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                             \\<lfloor>None\\<rfloor>)\\<rceil>\\<rceil> \\<longrightarrow>\n         \\<lfloor>\\<lfloor>int (card\n                                 \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n            (Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n              \\<lfloor>None\\<rfloor>)\\<rceil>\\<rceil>)\\<rfloor>\\<rfloor> =\n         \\<zero> x) \\<and>\n        ((false x = true x \\<longrightarrow>\n          infinite\n           \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                            (Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                              \\<lfloor>None\\<rfloor>)\\<rceil>\\<rceil>) \\<longrightarrow>\n         \\<bottom> = \\<zero> x)) \\<and>\n       (Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n         \\<lfloor>\\<lfloor>{}\\<rfloor>\\<rfloor> \\<noteq>\n        Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e None \\<and>\n        Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n         \\<lfloor>\\<lfloor>{}\\<rfloor>\\<rfloor> \\<noteq>\n        Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n         \\<lfloor>None\\<rfloor> \\<longrightarrow>\n        (finite\n          \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                           (Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                             \\<lfloor>\\<lfloor>{}\\<rfloor>\\<rfloor>)\\<rceil>\\<rceil> \\<longrightarrow>\n         \\<lfloor>\\<lfloor>int (card\n                                 \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n            (Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n              \\<lfloor>\\<lfloor>{}\\<rfloor>\\<rfloor>)\\<rceil>\\<rceil>)\\<rfloor>\\<rfloor> =\n         \\<zero> x) \\<and>\n        (infinite\n          \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                           (Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                             \\<lfloor>\\<lfloor>{}\\<rfloor>\\<rfloor>)\\<rceil>\\<rceil> \\<longrightarrow>\n         \\<bottom> = \\<zero> x))", "apply(subst Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e_inject, simp_all add: bot_option_def null_option_def) +"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       (finite\n         \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                          (Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                            \\<lfloor>\\<lfloor>{}\\<rfloor>\\<rfloor>)\\<rceil>\\<rceil> \\<longrightarrow>\n        \\<lfloor>\\<lfloor>int (card\n                                \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n           (Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n             \\<lfloor>\\<lfloor>{}\\<rfloor>\\<rfloor>)\\<rceil>\\<rceil>)\\<rfloor>\\<rfloor> =\n        \\<zero> x) \\<and>\n       (infinite\n         \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                          (Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                            \\<lfloor>\\<lfloor>{}\\<rfloor>\\<rfloor>)\\<rceil>\\<rceil> \\<longrightarrow>\n        None = \\<zero> x)", "by(simp add: Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e_inverse bot_option_def null_option_def OclInt0_def)"], ["", "lemma OclSize_including_exec[simp,code_unfold]:\n \"((X ->including\\<^sub>S\\<^sub>e\\<^sub>t(x)) ->size\\<^sub>S\\<^sub>e\\<^sub>t()) = (if \\<delta> X and \\<upsilon> x then\n                                     X ->size\\<^sub>S\\<^sub>e\\<^sub>t() +\\<^sub>i\\<^sub>n\\<^sub>t if X ->includes\\<^sub>S\\<^sub>e\\<^sub>t(x) then \\<zero> else \\<one> endif\n                                   else\n                                     invalid\n                                   endif)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. X->including\\<^sub>S\\<^sub>e\\<^sub>t(x)->size\\<^sub>S\\<^sub>e\\<^sub>t() =\n    (if \\<delta> X and\n        \\<upsilon> x then X->size\\<^sub>S\\<^sub>e\\<^sub>t() +\\<^sub>i\\<^sub>n\\<^sub>t\n                          if X->includes\\<^sub>S\\<^sub>e\\<^sub>t(x) then \\<zero> else \\<one> endif else invalid endif)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. X->including\\<^sub>S\\<^sub>e\\<^sub>t(x)->size\\<^sub>S\\<^sub>e\\<^sub>t() =\n    (if \\<delta> X and\n        \\<upsilon> x then X->size\\<^sub>S\\<^sub>e\\<^sub>t() +\\<^sub>i\\<^sub>n\\<^sub>t\n                          if X->includes\\<^sub>S\\<^sub>e\\<^sub>t(x) then \\<zero> else \\<one> endif else invalid endif)", "have valid_inject_true : \"\\<And>\\<tau> P. (\\<upsilon> P) \\<tau> \\<noteq> true \\<tau> \\<Longrightarrow> (\\<upsilon> P) \\<tau> = false \\<tau>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<tau> P.\n       (\\<upsilon> P) \\<tau> \\<noteq> true \\<tau> \\<Longrightarrow>\n       (\\<upsilon> P) \\<tau> = false \\<tau>", "apply(simp add: valid_def true_def false_def bot_fun_def bot_option_def\n                      null_fun_def null_option_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<tau> P.\n       (if P \\<tau> = \\<bottom> then false \\<tau> else true \\<tau>) \\<noteq>\n       \\<lfloor>\\<lfloor>True\\<rfloor>\\<rfloor> \\<Longrightarrow>\n       P \\<tau> = \\<bottom>", "by (case_tac \"P \\<tau> = \\<bottom>\", simp_all add: true_def)"], ["proof (state)\nthis:\n  (\\<upsilon> ?P) ?\\<tau> \\<noteq> true ?\\<tau> \\<Longrightarrow>\n  (\\<upsilon> ?P) ?\\<tau> = false ?\\<tau>\n\ngoal (1 subgoal):\n 1. X->including\\<^sub>S\\<^sub>e\\<^sub>t(x)->size\\<^sub>S\\<^sub>e\\<^sub>t() =\n    (if \\<delta> X and\n        \\<upsilon> x then X->size\\<^sub>S\\<^sub>e\\<^sub>t() +\\<^sub>i\\<^sub>n\\<^sub>t\n                          if X->includes\\<^sub>S\\<^sub>e\\<^sub>t(x) then \\<zero> else \\<one> endif else invalid endif)", "have defined_inject_true : \"\\<And>\\<tau> P. (\\<delta> P) \\<tau> \\<noteq> true \\<tau> \\<Longrightarrow> (\\<delta> P) \\<tau> = false \\<tau>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<tau> P.\n       (\\<delta> P) \\<tau> \\<noteq> true \\<tau> \\<Longrightarrow>\n       (\\<delta> P) \\<tau> = false \\<tau>", "apply(simp add: defined_def true_def false_def bot_fun_def bot_option_def\n                      null_fun_def null_option_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<tau> P.\n       (if P \\<tau> = \\<bottom> \\<or> P \\<tau> = null then false \\<tau>\n        else true \\<tau>) \\<noteq>\n       \\<lfloor>\\<lfloor>True\\<rfloor>\\<rfloor> \\<Longrightarrow>\n       P \\<tau> = \\<bottom> \\<or> P \\<tau> = null", "by (case_tac \" P \\<tau> = \\<bottom> \\<or> P \\<tau> = null\", simp_all add: true_def)"], ["proof (state)\nthis:\n  (\\<delta> ?P1) ?\\<tau>1 \\<noteq> true ?\\<tau>1 \\<Longrightarrow>\n  (\\<delta> ?P1) ?\\<tau>1 = false ?\\<tau>1\n\ngoal (1 subgoal):\n 1. X->including\\<^sub>S\\<^sub>e\\<^sub>t(x)->size\\<^sub>S\\<^sub>e\\<^sub>t() =\n    (if \\<delta> X and\n        \\<upsilon> x then X->size\\<^sub>S\\<^sub>e\\<^sub>t() +\\<^sub>i\\<^sub>n\\<^sub>t\n                          if X->includes\\<^sub>S\\<^sub>e\\<^sub>t(x) then \\<zero> else \\<one> endif else invalid endif)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. X->including\\<^sub>S\\<^sub>e\\<^sub>t(x)->size\\<^sub>S\\<^sub>e\\<^sub>t() =\n    (if \\<delta> X and\n        \\<upsilon> x then X->size\\<^sub>S\\<^sub>e\\<^sub>t() +\\<^sub>i\\<^sub>n\\<^sub>t\n                          if X->includes\\<^sub>S\\<^sub>e\\<^sub>t(x) then \\<zero> else \\<one> endif else invalid endif)", "apply(rule ext, rename_tac \\<tau>)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<tau>.\n       X->including\\<^sub>S\\<^sub>e\\<^sub>t(x)->size\\<^sub>S\\<^sub>e\\<^sub>t()\n        \\<tau> =\n       (if \\<delta> X and\n           \\<upsilon> x then X->size\\<^sub>S\\<^sub>e\\<^sub>t() +\\<^sub>i\\<^sub>n\\<^sub>t\n                             if X->includes\\<^sub>S\\<^sub>e\\<^sub>t(x) then \\<zero> else \\<one> endif else invalid endif)\n        \\<tau>", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>\\<tau>.\n       X->including\\<^sub>S\\<^sub>e\\<^sub>t(x)->size\\<^sub>S\\<^sub>e\\<^sub>t()\n        \\<tau> =\n       (if \\<delta> X and\n           \\<upsilon> x then X->size\\<^sub>S\\<^sub>e\\<^sub>t() +\\<^sub>i\\<^sub>n\\<^sub>t\n                             if X->includes\\<^sub>S\\<^sub>e\\<^sub>t(x) then \\<zero> else \\<one> endif else invalid endif)\n        \\<tau>", "fix \\<tau>"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>\\<tau>.\n       X->including\\<^sub>S\\<^sub>e\\<^sub>t(x)->size\\<^sub>S\\<^sub>e\\<^sub>t()\n        \\<tau> =\n       (if \\<delta> X and\n           \\<upsilon> x then X->size\\<^sub>S\\<^sub>e\\<^sub>t() +\\<^sub>i\\<^sub>n\\<^sub>t\n                             if X->includes\\<^sub>S\\<^sub>e\\<^sub>t(x) then \\<zero> else \\<one> endif else invalid endif)\n        \\<tau>", "have includes_notin: \"\\<not> \\<tau> \\<Turnstile> X->includes\\<^sub>S\\<^sub>e\\<^sub>t(x) \\<Longrightarrow> (\\<delta> X) \\<tau> = true \\<tau> \\<and> (\\<upsilon> x) \\<tau> = true \\<tau> \\<Longrightarrow>\n                        x \\<tau> \\<notin> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e (X \\<tau>)\\<rceil>\\<rceil>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<tau> |\\<noteq> X->includes\\<^sub>S\\<^sub>e\\<^sub>t(x);\n     (\\<delta> X) \\<tau> = true \\<tau> \\<and>\n     (\\<upsilon> x) \\<tau> = true \\<tau>\\<rbrakk>\n    \\<Longrightarrow> x \\<tau>\n                      \\<notin> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n          (X \\<tau>)\\<rceil>\\<rceil>", "by(simp add: OclIncludes_def OclValid_def true_def)"], ["proof (state)\nthis:\n  \\<lbrakk>\\<tau> |\\<noteq> X->includes\\<^sub>S\\<^sub>e\\<^sub>t(x);\n   (\\<delta> X) \\<tau> = true \\<tau> \\<and>\n   (\\<upsilon> x) \\<tau> = true \\<tau>\\<rbrakk>\n  \\<Longrightarrow> x \\<tau>\n                    \\<notin> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n        (X \\<tau>)\\<rceil>\\<rceil>\n\ngoal (1 subgoal):\n 1. \\<And>\\<tau>.\n       X->including\\<^sub>S\\<^sub>e\\<^sub>t(x)->size\\<^sub>S\\<^sub>e\\<^sub>t()\n        \\<tau> =\n       (if \\<delta> X and\n           \\<upsilon> x then X->size\\<^sub>S\\<^sub>e\\<^sub>t() +\\<^sub>i\\<^sub>n\\<^sub>t\n                             if X->includes\\<^sub>S\\<^sub>e\\<^sub>t(x) then \\<zero> else \\<one> endif else invalid endif)\n        \\<tau>", "have includes_def: \"\\<tau> \\<Turnstile> X->includes\\<^sub>S\\<^sub>e\\<^sub>t(x) \\<Longrightarrow> \\<tau> \\<Turnstile> \\<delta> X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<tau>\n     \\<Turnstile> X->includes\\<^sub>S\\<^sub>e\\<^sub>t(x) \\<Longrightarrow>\n    \\<tau> \\<Turnstile> \\<delta> X", "by (metis bot_fun_def OclIncludes_def OclValid_def defined3 foundation16)"], ["proof (state)\nthis:\n  \\<tau>\n   \\<Turnstile> X->includes\\<^sub>S\\<^sub>e\\<^sub>t(x) \\<Longrightarrow>\n  \\<tau> \\<Turnstile> \\<delta> X\n\ngoal (1 subgoal):\n 1. \\<And>\\<tau>.\n       X->including\\<^sub>S\\<^sub>e\\<^sub>t(x)->size\\<^sub>S\\<^sub>e\\<^sub>t()\n        \\<tau> =\n       (if \\<delta> X and\n           \\<upsilon> x then X->size\\<^sub>S\\<^sub>e\\<^sub>t() +\\<^sub>i\\<^sub>n\\<^sub>t\n                             if X->includes\\<^sub>S\\<^sub>e\\<^sub>t(x) then \\<zero> else \\<one> endif else invalid endif)\n        \\<tau>", "have includes_val: \"\\<tau> \\<Turnstile> X->includes\\<^sub>S\\<^sub>e\\<^sub>t(x) \\<Longrightarrow> \\<tau> \\<Turnstile> \\<upsilon> x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<tau>\n     \\<Turnstile> X->includes\\<^sub>S\\<^sub>e\\<^sub>t(x) \\<Longrightarrow>\n    \\<tau> \\<Turnstile> \\<upsilon> x", "using foundation5 foundation6"], ["proof (prove)\nusing this:\n  ?\\<tau> \\<Turnstile> ?P and ?Q \\<Longrightarrow>\n  ?\\<tau> \\<Turnstile> ?P \\<and> ?\\<tau> \\<Turnstile> ?Q\n  ?\\<tau> \\<Turnstile> ?P \\<Longrightarrow> ?\\<tau> \\<Turnstile> \\<delta> ?P\n\ngoal (1 subgoal):\n 1. \\<tau>\n     \\<Turnstile> X->includes\\<^sub>S\\<^sub>e\\<^sub>t(x) \\<Longrightarrow>\n    \\<tau> \\<Turnstile> \\<upsilon> x", "by fastforce"], ["proof (state)\nthis:\n  \\<tau>\n   \\<Turnstile> X->includes\\<^sub>S\\<^sub>e\\<^sub>t(x) \\<Longrightarrow>\n  \\<tau> \\<Turnstile> \\<upsilon> x\n\ngoal (1 subgoal):\n 1. \\<And>\\<tau>.\n       X->including\\<^sub>S\\<^sub>e\\<^sub>t(x)->size\\<^sub>S\\<^sub>e\\<^sub>t()\n        \\<tau> =\n       (if \\<delta> X and\n           \\<upsilon> x then X->size\\<^sub>S\\<^sub>e\\<^sub>t() +\\<^sub>i\\<^sub>n\\<^sub>t\n                             if X->includes\\<^sub>S\\<^sub>e\\<^sub>t(x) then \\<zero> else \\<one> endif else invalid endif)\n        \\<tau>", "have ins_in_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e: \"\\<tau> \\<Turnstile> \\<delta> X \\<Longrightarrow> \\<tau> \\<Turnstile> \\<upsilon> x \\<Longrightarrow>\n    \\<lfloor>\\<lfloor>insert (x \\<tau>) \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e (X \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor> \\<in> {X. X = \\<bottom> \\<or> X = null \\<or> (\\<forall>x\\<in>\\<lceil>\\<lceil>X\\<rceil>\\<rceil>. x \\<noteq> \\<bottom>)}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<tau> \\<Turnstile> \\<delta> X;\n     \\<tau> \\<Turnstile> \\<upsilon> x\\<rbrakk>\n    \\<Longrightarrow> \\<lfloor>\\<lfloor>insert (x \\<tau>)\n   \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                    (X \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>\n                      \\<in> {X. X = \\<bottom> \\<or>\n                                X = null \\<or>\n                                (\\<forall>x\n    \\<in>\\<lceil>\\<lceil>X\\<rceil>\\<rceil>.\n                                    x \\<noteq> \\<bottom>)}", "apply(simp add: bot_option_def null_option_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<tau> \\<Turnstile> \\<delta> X;\n     \\<tau> \\<Turnstile> \\<upsilon> x\\<rbrakk>\n    \\<Longrightarrow> x \\<tau> \\<noteq> \\<bottom> \\<and>\n                      (\\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                 (X \\<tau>)\\<rceil>\\<rceil>.\n                          x \\<noteq> \\<bottom>)", "by (metis (hide_lams, no_types) Set_inv_lemma foundation18' foundation5)"], ["proof (state)\nthis:\n  \\<lbrakk>\\<tau> \\<Turnstile> \\<delta> X;\n   \\<tau> \\<Turnstile> \\<upsilon> x\\<rbrakk>\n  \\<Longrightarrow> \\<lfloor>\\<lfloor>insert (x \\<tau>)\n \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                  (X \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>\n                    \\<in> {X. X = \\<bottom> \\<or>\n                              X = null \\<or>\n                              (\\<forall>x\n  \\<in>\\<lceil>\\<lceil>X\\<rceil>\\<rceil>.\n                                  x \\<noteq> \\<bottom>)}\n\ngoal (1 subgoal):\n 1. \\<And>\\<tau>.\n       X->including\\<^sub>S\\<^sub>e\\<^sub>t(x)->size\\<^sub>S\\<^sub>e\\<^sub>t()\n        \\<tau> =\n       (if \\<delta> X and\n           \\<upsilon> x then X->size\\<^sub>S\\<^sub>e\\<^sub>t() +\\<^sub>i\\<^sub>n\\<^sub>t\n                             if X->includes\\<^sub>S\\<^sub>e\\<^sub>t(x) then \\<zero> else \\<one> endif else invalid endif)\n        \\<tau>", "have m : \"\\<And>\\<tau>. (\\<lambda>_. \\<bottom>) = (\\<lambda>_. invalid \\<tau>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<tau>. (\\<lambda>_. \\<bottom>) = (\\<lambda>_. invalid \\<tau>)", "by(rule ext, simp add:invalid_def)"], ["proof (state)\nthis:\n  (\\<lambda>_. \\<bottom>) = (\\<lambda>_. invalid ?\\<tau>2)\n\ngoal (1 subgoal):\n 1. \\<And>\\<tau>.\n       X->including\\<^sub>S\\<^sub>e\\<^sub>t(x)->size\\<^sub>S\\<^sub>e\\<^sub>t()\n        \\<tau> =\n       (if \\<delta> X and\n           \\<upsilon> x then X->size\\<^sub>S\\<^sub>e\\<^sub>t() +\\<^sub>i\\<^sub>n\\<^sub>t\n                             if X->includes\\<^sub>S\\<^sub>e\\<^sub>t(x) then \\<zero> else \\<one> endif else invalid endif)\n        \\<tau>", "show \"X->including\\<^sub>S\\<^sub>e\\<^sub>t(x)->size\\<^sub>S\\<^sub>e\\<^sub>t() \\<tau> = (if \\<delta> X and \\<upsilon> x\n                                     then X->size\\<^sub>S\\<^sub>e\\<^sub>t() +\\<^sub>i\\<^sub>n\\<^sub>t if X->includes\\<^sub>S\\<^sub>e\\<^sub>t(x) then \\<zero> else \\<one> endif\n                                     else invalid endif) \\<tau>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. X->including\\<^sub>S\\<^sub>e\\<^sub>t(x)->size\\<^sub>S\\<^sub>e\\<^sub>t()\n     \\<tau> =\n    (if \\<delta> X and\n        \\<upsilon> x then X->size\\<^sub>S\\<^sub>e\\<^sub>t() +\\<^sub>i\\<^sub>n\\<^sub>t\n                          if X->includes\\<^sub>S\\<^sub>e\\<^sub>t(x) then \\<zero> else \\<one> endif else invalid endif)\n     \\<tau>", "apply(case_tac \"\\<tau> \\<Turnstile> \\<delta> X and \\<upsilon> x\", simp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<tau> \\<Turnstile> \\<delta> X and \\<upsilon> x \\<Longrightarrow>\n    X->including\\<^sub>S\\<^sub>e\\<^sub>t(x)->size\\<^sub>S\\<^sub>e\\<^sub>t()\n     \\<tau> =\n    (X->size\\<^sub>S\\<^sub>e\\<^sub>t() +\\<^sub>i\\<^sub>n\\<^sub>t\n     if X->includes\\<^sub>S\\<^sub>e\\<^sub>t(x) then \\<zero> else \\<one> endif)\n     \\<tau>\n 2. \\<tau> |\\<noteq> \\<delta> X and \\<upsilon> x \\<Longrightarrow>\n    X->including\\<^sub>S\\<^sub>e\\<^sub>t(x)->size\\<^sub>S\\<^sub>e\\<^sub>t()\n     \\<tau> =\n    (if \\<delta> X and\n        \\<upsilon> x then X->size\\<^sub>S\\<^sub>e\\<^sub>t() +\\<^sub>i\\<^sub>n\\<^sub>t\n                          if X->includes\\<^sub>S\\<^sub>e\\<^sub>t(x) then \\<zero> else \\<one> endif else invalid endif)\n     \\<tau>", "apply(subst OclAdd\\<^sub>I\\<^sub>n\\<^sub>t\\<^sub>e\\<^sub>g\\<^sub>e\\<^sub>r.cp0)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<tau> \\<Turnstile> \\<delta> X and \\<upsilon> x \\<Longrightarrow>\n    X->including\\<^sub>S\\<^sub>e\\<^sub>t(x)->size\\<^sub>S\\<^sub>e\\<^sub>t()\n     \\<tau> =\n    ((\\<lambda>_.\n         X->size\\<^sub>S\\<^sub>e\\<^sub>t() \\<tau>) +\\<^sub>i\\<^sub>n\\<^sub>t\n     (\\<lambda>_.\n         (if X->includes\\<^sub>S\\<^sub>e\\<^sub>t(x) then \\<zero> else \\<one> endif)\n          \\<tau>))\n     \\<tau>\n 2. \\<tau> |\\<noteq> \\<delta> X and \\<upsilon> x \\<Longrightarrow>\n    X->including\\<^sub>S\\<^sub>e\\<^sub>t(x)->size\\<^sub>S\\<^sub>e\\<^sub>t()\n     \\<tau> =\n    (if \\<delta> X and\n        \\<upsilon> x then X->size\\<^sub>S\\<^sub>e\\<^sub>t() +\\<^sub>i\\<^sub>n\\<^sub>t\n                          if X->includes\\<^sub>S\\<^sub>e\\<^sub>t(x) then \\<zero> else \\<one> endif else invalid endif)\n     \\<tau>", "apply(case_tac \"\\<tau> \\<Turnstile> X->includes\\<^sub>S\\<^sub>e\\<^sub>t(x)\", simp add: OclAdd\\<^sub>I\\<^sub>n\\<^sub>t\\<^sub>e\\<^sub>g\\<^sub>e\\<^sub>r.cp0[symmetric])"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>\\<tau> \\<Turnstile> \\<delta> X and \\<upsilon> x;\n     \\<tau> \\<Turnstile> X->includes\\<^sub>S\\<^sub>e\\<^sub>t(x)\\<rbrakk>\n    \\<Longrightarrow> X->including\\<^sub>S\\<^sub>e\\<^sub>t(x)->size\\<^sub>S\\<^sub>e\\<^sub>t()\n                       \\<tau> =\n                      (if \\<upsilon> X->size\\<^sub>S\\<^sub>e\\<^sub>t() and\n                          not (\\<delta> X->size\\<^sub>S\\<^sub>e\\<^sub>t()) then invalid else X->size\\<^sub>S\\<^sub>e\\<^sub>t() endif)\n                       \\<tau>\n 2. \\<lbrakk>\\<tau> \\<Turnstile> \\<delta> X and \\<upsilon> x;\n     \\<tau> |\\<noteq> X->includes\\<^sub>S\\<^sub>e\\<^sub>t(x)\\<rbrakk>\n    \\<Longrightarrow> X->including\\<^sub>S\\<^sub>e\\<^sub>t(x)->size\\<^sub>S\\<^sub>e\\<^sub>t()\n                       \\<tau> =\n                      ((\\<lambda>_.\n                           X->size\\<^sub>S\\<^sub>e\\<^sub>t()\n                            \\<tau>) +\\<^sub>i\\<^sub>n\\<^sub>t\n                       (\\<lambda>_.\n                           (if X->includes\\<^sub>S\\<^sub>e\\<^sub>t(x) then \\<zero> else \\<one> endif)\n                            \\<tau>))\n                       \\<tau>\n 3. \\<tau> |\\<noteq> \\<delta> X and \\<upsilon> x \\<Longrightarrow>\n    X->including\\<^sub>S\\<^sub>e\\<^sub>t(x)->size\\<^sub>S\\<^sub>e\\<^sub>t()\n     \\<tau> =\n    (if \\<delta> X and\n        \\<upsilon> x then X->size\\<^sub>S\\<^sub>e\\<^sub>t() +\\<^sub>i\\<^sub>n\\<^sub>t\n                          if X->includes\\<^sub>S\\<^sub>e\\<^sub>t(x) then \\<zero> else \\<one> endif else invalid endif)\n     \\<tau>", "apply(case_tac \"\\<tau> \\<Turnstile> ((\\<upsilon> (X->size\\<^sub>S\\<^sub>e\\<^sub>t())) and not (\\<delta> (X->size\\<^sub>S\\<^sub>e\\<^sub>t())))\", simp)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<lbrakk>\\<tau> \\<Turnstile> \\<delta> X and \\<upsilon> x;\n     \\<tau> \\<Turnstile> X->includes\\<^sub>S\\<^sub>e\\<^sub>t(x);\n     \\<tau>\n      \\<Turnstile> \\<upsilon> X->size\\<^sub>S\\<^sub>e\\<^sub>t() and\n                   not (\\<delta> X->size\\<^sub>S\\<^sub>e\\<^sub>t())\\<rbrakk>\n    \\<Longrightarrow> X->including\\<^sub>S\\<^sub>e\\<^sub>t(x)->size\\<^sub>S\\<^sub>e\\<^sub>t()\n                       \\<tau> =\n                      invalid \\<tau>\n 2. \\<lbrakk>\\<tau> \\<Turnstile> \\<delta> X and \\<upsilon> x;\n     \\<tau> \\<Turnstile> X->includes\\<^sub>S\\<^sub>e\\<^sub>t(x);\n     \\<tau>\n      |\\<noteq> \\<upsilon> X->size\\<^sub>S\\<^sub>e\\<^sub>t() and\n                not (\\<delta> X->size\\<^sub>S\\<^sub>e\\<^sub>t())\\<rbrakk>\n    \\<Longrightarrow> X->including\\<^sub>S\\<^sub>e\\<^sub>t(x)->size\\<^sub>S\\<^sub>e\\<^sub>t()\n                       \\<tau> =\n                      (if \\<upsilon> X->size\\<^sub>S\\<^sub>e\\<^sub>t() and\n                          not (\\<delta> X->size\\<^sub>S\\<^sub>e\\<^sub>t()) then invalid else X->size\\<^sub>S\\<^sub>e\\<^sub>t() endif)\n                       \\<tau>\n 3. \\<lbrakk>\\<tau> \\<Turnstile> \\<delta> X and \\<upsilon> x;\n     \\<tau> |\\<noteq> X->includes\\<^sub>S\\<^sub>e\\<^sub>t(x)\\<rbrakk>\n    \\<Longrightarrow> X->including\\<^sub>S\\<^sub>e\\<^sub>t(x)->size\\<^sub>S\\<^sub>e\\<^sub>t()\n                       \\<tau> =\n                      ((\\<lambda>_.\n                           X->size\\<^sub>S\\<^sub>e\\<^sub>t()\n                            \\<tau>) +\\<^sub>i\\<^sub>n\\<^sub>t\n                       (\\<lambda>_.\n                           (if X->includes\\<^sub>S\\<^sub>e\\<^sub>t(x) then \\<zero> else \\<one> endif)\n                            \\<tau>))\n                       \\<tau>\n 4. \\<tau> |\\<noteq> \\<delta> X and \\<upsilon> x \\<Longrightarrow>\n    X->including\\<^sub>S\\<^sub>e\\<^sub>t(x)->size\\<^sub>S\\<^sub>e\\<^sub>t()\n     \\<tau> =\n    (if \\<delta> X and\n        \\<upsilon> x then X->size\\<^sub>S\\<^sub>e\\<^sub>t() +\\<^sub>i\\<^sub>n\\<^sub>t\n                          if X->includes\\<^sub>S\\<^sub>e\\<^sub>t(x) then \\<zero> else \\<one> endif else invalid endif)\n     \\<tau>", "apply(drule foundation5[where P = \"\\<upsilon> X->size\\<^sub>S\\<^sub>e\\<^sub>t()\"], erule conjE)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<lbrakk>\\<tau> \\<Turnstile> \\<delta> X and \\<upsilon> x;\n     \\<tau> \\<Turnstile> X->includes\\<^sub>S\\<^sub>e\\<^sub>t(x);\n     \\<tau> \\<Turnstile> \\<upsilon> X->size\\<^sub>S\\<^sub>e\\<^sub>t();\n     \\<tau>\n      \\<Turnstile> not (\\<delta> X->size\\<^sub>S\\<^sub>e\\<^sub>t())\\<rbrakk>\n    \\<Longrightarrow> X->including\\<^sub>S\\<^sub>e\\<^sub>t(x)->size\\<^sub>S\\<^sub>e\\<^sub>t()\n                       \\<tau> =\n                      invalid \\<tau>\n 2. \\<lbrakk>\\<tau> \\<Turnstile> \\<delta> X and \\<upsilon> x;\n     \\<tau> \\<Turnstile> X->includes\\<^sub>S\\<^sub>e\\<^sub>t(x);\n     \\<tau>\n      |\\<noteq> \\<upsilon> X->size\\<^sub>S\\<^sub>e\\<^sub>t() and\n                not (\\<delta> X->size\\<^sub>S\\<^sub>e\\<^sub>t())\\<rbrakk>\n    \\<Longrightarrow> X->including\\<^sub>S\\<^sub>e\\<^sub>t(x)->size\\<^sub>S\\<^sub>e\\<^sub>t()\n                       \\<tau> =\n                      (if \\<upsilon> X->size\\<^sub>S\\<^sub>e\\<^sub>t() and\n                          not (\\<delta> X->size\\<^sub>S\\<^sub>e\\<^sub>t()) then invalid else X->size\\<^sub>S\\<^sub>e\\<^sub>t() endif)\n                       \\<tau>\n 3. \\<lbrakk>\\<tau> \\<Turnstile> \\<delta> X and \\<upsilon> x;\n     \\<tau> |\\<noteq> X->includes\\<^sub>S\\<^sub>e\\<^sub>t(x)\\<rbrakk>\n    \\<Longrightarrow> X->including\\<^sub>S\\<^sub>e\\<^sub>t(x)->size\\<^sub>S\\<^sub>e\\<^sub>t()\n                       \\<tau> =\n                      ((\\<lambda>_.\n                           X->size\\<^sub>S\\<^sub>e\\<^sub>t()\n                            \\<tau>) +\\<^sub>i\\<^sub>n\\<^sub>t\n                       (\\<lambda>_.\n                           (if X->includes\\<^sub>S\\<^sub>e\\<^sub>t(x) then \\<zero> else \\<one> endif)\n                            \\<tau>))\n                       \\<tau>\n 4. \\<tau> |\\<noteq> \\<delta> X and \\<upsilon> x \\<Longrightarrow>\n    X->including\\<^sub>S\\<^sub>e\\<^sub>t(x)->size\\<^sub>S\\<^sub>e\\<^sub>t()\n     \\<tau> =\n    (if \\<delta> X and\n        \\<upsilon> x then X->size\\<^sub>S\\<^sub>e\\<^sub>t() +\\<^sub>i\\<^sub>n\\<^sub>t\n                          if X->includes\\<^sub>S\\<^sub>e\\<^sub>t(x) then \\<zero> else \\<one> endif else invalid endif)\n     \\<tau>", "apply(drule OclSize_infinite)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<lbrakk>\\<tau> \\<Turnstile> \\<delta> X and \\<upsilon> x;\n     \\<tau> \\<Turnstile> X->includes\\<^sub>S\\<^sub>e\\<^sub>t(x);\n     \\<tau> \\<Turnstile> \\<upsilon> X->size\\<^sub>S\\<^sub>e\\<^sub>t();\n     \\<tau> \\<Turnstile> not (\\<delta> X) \\<or>\n     infinite\n      \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                       (X \\<tau>)\\<rceil>\\<rceil>\\<rbrakk>\n    \\<Longrightarrow> X->including\\<^sub>S\\<^sub>e\\<^sub>t(x)->size\\<^sub>S\\<^sub>e\\<^sub>t()\n                       \\<tau> =\n                      invalid \\<tau>\n 2. \\<lbrakk>\\<tau> \\<Turnstile> \\<delta> X and \\<upsilon> x;\n     \\<tau> \\<Turnstile> X->includes\\<^sub>S\\<^sub>e\\<^sub>t(x);\n     \\<tau>\n      |\\<noteq> \\<upsilon> X->size\\<^sub>S\\<^sub>e\\<^sub>t() and\n                not (\\<delta> X->size\\<^sub>S\\<^sub>e\\<^sub>t())\\<rbrakk>\n    \\<Longrightarrow> X->including\\<^sub>S\\<^sub>e\\<^sub>t(x)->size\\<^sub>S\\<^sub>e\\<^sub>t()\n                       \\<tau> =\n                      (if \\<upsilon> X->size\\<^sub>S\\<^sub>e\\<^sub>t() and\n                          not (\\<delta> X->size\\<^sub>S\\<^sub>e\\<^sub>t()) then invalid else X->size\\<^sub>S\\<^sub>e\\<^sub>t() endif)\n                       \\<tau>\n 3. \\<lbrakk>\\<tau> \\<Turnstile> \\<delta> X and \\<upsilon> x;\n     \\<tau> |\\<noteq> X->includes\\<^sub>S\\<^sub>e\\<^sub>t(x)\\<rbrakk>\n    \\<Longrightarrow> X->including\\<^sub>S\\<^sub>e\\<^sub>t(x)->size\\<^sub>S\\<^sub>e\\<^sub>t()\n                       \\<tau> =\n                      ((\\<lambda>_.\n                           X->size\\<^sub>S\\<^sub>e\\<^sub>t()\n                            \\<tau>) +\\<^sub>i\\<^sub>n\\<^sub>t\n                       (\\<lambda>_.\n                           (if X->includes\\<^sub>S\\<^sub>e\\<^sub>t(x) then \\<zero> else \\<one> endif)\n                            \\<tau>))\n                       \\<tau>\n 4. \\<tau> |\\<noteq> \\<delta> X and \\<upsilon> x \\<Longrightarrow>\n    X->including\\<^sub>S\\<^sub>e\\<^sub>t(x)->size\\<^sub>S\\<^sub>e\\<^sub>t()\n     \\<tau> =\n    (if \\<delta> X and\n        \\<upsilon> x then X->size\\<^sub>S\\<^sub>e\\<^sub>t() +\\<^sub>i\\<^sub>n\\<^sub>t\n                          if X->includes\\<^sub>S\\<^sub>e\\<^sub>t(x) then \\<zero> else \\<one> endif else invalid endif)\n     \\<tau>", "apply(frule includes_def, drule includes_val, simp)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<lbrakk>\\<tau> \\<Turnstile> \\<delta> X and \\<upsilon> x;\n     \\<tau> \\<Turnstile> \\<upsilon> X->size\\<^sub>S\\<^sub>e\\<^sub>t();\n     infinite\n      \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                       (X \\<tau>)\\<rceil>\\<rceil>;\n     \\<tau> \\<Turnstile> \\<delta> X;\n     \\<tau> \\<Turnstile> \\<upsilon> x\\<rbrakk>\n    \\<Longrightarrow> X->including\\<^sub>S\\<^sub>e\\<^sub>t(x)->size\\<^sub>S\\<^sub>e\\<^sub>t()\n                       \\<tau> =\n                      invalid \\<tau>\n 2. \\<lbrakk>\\<tau> \\<Turnstile> \\<delta> X and \\<upsilon> x;\n     \\<tau> \\<Turnstile> X->includes\\<^sub>S\\<^sub>e\\<^sub>t(x);\n     \\<tau>\n      |\\<noteq> \\<upsilon> X->size\\<^sub>S\\<^sub>e\\<^sub>t() and\n                not (\\<delta> X->size\\<^sub>S\\<^sub>e\\<^sub>t())\\<rbrakk>\n    \\<Longrightarrow> X->including\\<^sub>S\\<^sub>e\\<^sub>t(x)->size\\<^sub>S\\<^sub>e\\<^sub>t()\n                       \\<tau> =\n                      (if \\<upsilon> X->size\\<^sub>S\\<^sub>e\\<^sub>t() and\n                          not (\\<delta> X->size\\<^sub>S\\<^sub>e\\<^sub>t()) then invalid else X->size\\<^sub>S\\<^sub>e\\<^sub>t() endif)\n                       \\<tau>\n 3. \\<lbrakk>\\<tau> \\<Turnstile> \\<delta> X and \\<upsilon> x;\n     \\<tau> |\\<noteq> X->includes\\<^sub>S\\<^sub>e\\<^sub>t(x)\\<rbrakk>\n    \\<Longrightarrow> X->including\\<^sub>S\\<^sub>e\\<^sub>t(x)->size\\<^sub>S\\<^sub>e\\<^sub>t()\n                       \\<tau> =\n                      ((\\<lambda>_.\n                           X->size\\<^sub>S\\<^sub>e\\<^sub>t()\n                            \\<tau>) +\\<^sub>i\\<^sub>n\\<^sub>t\n                       (\\<lambda>_.\n                           (if X->includes\\<^sub>S\\<^sub>e\\<^sub>t(x) then \\<zero> else \\<one> endif)\n                            \\<tau>))\n                       \\<tau>\n 4. \\<tau> |\\<noteq> \\<delta> X and \\<upsilon> x \\<Longrightarrow>\n    X->including\\<^sub>S\\<^sub>e\\<^sub>t(x)->size\\<^sub>S\\<^sub>e\\<^sub>t()\n     \\<tau> =\n    (if \\<delta> X and\n        \\<upsilon> x then X->size\\<^sub>S\\<^sub>e\\<^sub>t() +\\<^sub>i\\<^sub>n\\<^sub>t\n                          if X->includes\\<^sub>S\\<^sub>e\\<^sub>t(x) then \\<zero> else \\<one> endif else invalid endif)\n     \\<tau>", "apply(subst OclSize_def, subst OclIncluding_finite_rep_set, assumption+)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<lbrakk>\\<tau> \\<Turnstile> \\<delta> X and \\<upsilon> x;\n     \\<tau> \\<Turnstile> \\<upsilon> X->size\\<^sub>S\\<^sub>e\\<^sub>t();\n     infinite\n      \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                       (X \\<tau>)\\<rceil>\\<rceil>;\n     \\<tau> \\<Turnstile> \\<delta> X;\n     \\<tau> \\<Turnstile> \\<upsilon> x\\<rbrakk>\n    \\<Longrightarrow> (if (\\<delta> X->including\\<^sub>S\\<^sub>e\\<^sub>t(x))\n                           \\<tau> =\n                          true \\<tau> \\<and>\n                          finite\n                           \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n      (X \\<tau>)\\<rceil>\\<rceil>\n                       then \\<lfloor>\\<lfloor>int\n         (card\n           \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                            (X->including\\<^sub>S\\<^sub>e\\<^sub>t(x)\n                              \\<tau>)\\<rceil>\\<rceil>)\\<rfloor>\\<rfloor>\n                       else \\<bottom>) =\n                      invalid \\<tau>\n 2. \\<lbrakk>\\<tau> \\<Turnstile> \\<delta> X and \\<upsilon> x;\n     \\<tau> \\<Turnstile> X->includes\\<^sub>S\\<^sub>e\\<^sub>t(x);\n     \\<tau>\n      |\\<noteq> \\<upsilon> X->size\\<^sub>S\\<^sub>e\\<^sub>t() and\n                not (\\<delta> X->size\\<^sub>S\\<^sub>e\\<^sub>t())\\<rbrakk>\n    \\<Longrightarrow> X->including\\<^sub>S\\<^sub>e\\<^sub>t(x)->size\\<^sub>S\\<^sub>e\\<^sub>t()\n                       \\<tau> =\n                      (if \\<upsilon> X->size\\<^sub>S\\<^sub>e\\<^sub>t() and\n                          not (\\<delta> X->size\\<^sub>S\\<^sub>e\\<^sub>t()) then invalid else X->size\\<^sub>S\\<^sub>e\\<^sub>t() endif)\n                       \\<tau>\n 3. \\<lbrakk>\\<tau> \\<Turnstile> \\<delta> X and \\<upsilon> x;\n     \\<tau> |\\<noteq> X->includes\\<^sub>S\\<^sub>e\\<^sub>t(x)\\<rbrakk>\n    \\<Longrightarrow> X->including\\<^sub>S\\<^sub>e\\<^sub>t(x)->size\\<^sub>S\\<^sub>e\\<^sub>t()\n                       \\<tau> =\n                      ((\\<lambda>_.\n                           X->size\\<^sub>S\\<^sub>e\\<^sub>t()\n                            \\<tau>) +\\<^sub>i\\<^sub>n\\<^sub>t\n                       (\\<lambda>_.\n                           (if X->includes\\<^sub>S\\<^sub>e\\<^sub>t(x) then \\<zero> else \\<one> endif)\n                            \\<tau>))\n                       \\<tau>\n 4. \\<tau> |\\<noteq> \\<delta> X and \\<upsilon> x \\<Longrightarrow>\n    X->including\\<^sub>S\\<^sub>e\\<^sub>t(x)->size\\<^sub>S\\<^sub>e\\<^sub>t()\n     \\<tau> =\n    (if \\<delta> X and\n        \\<upsilon> x then X->size\\<^sub>S\\<^sub>e\\<^sub>t() +\\<^sub>i\\<^sub>n\\<^sub>t\n                          if X->includes\\<^sub>S\\<^sub>e\\<^sub>t(x) then \\<zero> else \\<one> endif else invalid endif)\n     \\<tau>", "apply (metis (hide_lams, no_types) invalid_def)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>\\<tau> \\<Turnstile> \\<delta> X and \\<upsilon> x;\n     \\<tau> \\<Turnstile> X->includes\\<^sub>S\\<^sub>e\\<^sub>t(x);\n     \\<tau>\n      |\\<noteq> \\<upsilon> X->size\\<^sub>S\\<^sub>e\\<^sub>t() and\n                not (\\<delta> X->size\\<^sub>S\\<^sub>e\\<^sub>t())\\<rbrakk>\n    \\<Longrightarrow> X->including\\<^sub>S\\<^sub>e\\<^sub>t(x)->size\\<^sub>S\\<^sub>e\\<^sub>t()\n                       \\<tau> =\n                      (if \\<upsilon> X->size\\<^sub>S\\<^sub>e\\<^sub>t() and\n                          not (\\<delta> X->size\\<^sub>S\\<^sub>e\\<^sub>t()) then invalid else X->size\\<^sub>S\\<^sub>e\\<^sub>t() endif)\n                       \\<tau>\n 2. \\<lbrakk>\\<tau> \\<Turnstile> \\<delta> X and \\<upsilon> x;\n     \\<tau> |\\<noteq> X->includes\\<^sub>S\\<^sub>e\\<^sub>t(x)\\<rbrakk>\n    \\<Longrightarrow> X->including\\<^sub>S\\<^sub>e\\<^sub>t(x)->size\\<^sub>S\\<^sub>e\\<^sub>t()\n                       \\<tau> =\n                      ((\\<lambda>_.\n                           X->size\\<^sub>S\\<^sub>e\\<^sub>t()\n                            \\<tau>) +\\<^sub>i\\<^sub>n\\<^sub>t\n                       (\\<lambda>_.\n                           (if X->includes\\<^sub>S\\<^sub>e\\<^sub>t(x) then \\<zero> else \\<one> endif)\n                            \\<tau>))\n                       \\<tau>\n 3. \\<tau> |\\<noteq> \\<delta> X and \\<upsilon> x \\<Longrightarrow>\n    X->including\\<^sub>S\\<^sub>e\\<^sub>t(x)->size\\<^sub>S\\<^sub>e\\<^sub>t()\n     \\<tau> =\n    (if \\<delta> X and\n        \\<upsilon> x then X->size\\<^sub>S\\<^sub>e\\<^sub>t() +\\<^sub>i\\<^sub>n\\<^sub>t\n                          if X->includes\\<^sub>S\\<^sub>e\\<^sub>t(x) then \\<zero> else \\<one> endif else invalid endif)\n     \\<tau>", "apply(subst OclIf_false',\n           metis (hide_lams, no_types) defined5 defined6 defined_and_I defined_not_I\n                                       foundation1 foundation9)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>\\<tau> \\<Turnstile> \\<delta> X and \\<upsilon> x;\n     \\<tau> \\<Turnstile> X->includes\\<^sub>S\\<^sub>e\\<^sub>t(x);\n     \\<tau>\n      |\\<noteq> \\<upsilon> X->size\\<^sub>S\\<^sub>e\\<^sub>t() and\n                not (\\<delta> X->size\\<^sub>S\\<^sub>e\\<^sub>t())\\<rbrakk>\n    \\<Longrightarrow> X->including\\<^sub>S\\<^sub>e\\<^sub>t(x)->size\\<^sub>S\\<^sub>e\\<^sub>t()\n                       \\<tau> =\n                      X->size\\<^sub>S\\<^sub>e\\<^sub>t() \\<tau>\n 2. \\<lbrakk>\\<tau> \\<Turnstile> \\<delta> X and \\<upsilon> x;\n     \\<tau> |\\<noteq> X->includes\\<^sub>S\\<^sub>e\\<^sub>t(x)\\<rbrakk>\n    \\<Longrightarrow> X->including\\<^sub>S\\<^sub>e\\<^sub>t(x)->size\\<^sub>S\\<^sub>e\\<^sub>t()\n                       \\<tau> =\n                      ((\\<lambda>_.\n                           X->size\\<^sub>S\\<^sub>e\\<^sub>t()\n                            \\<tau>) +\\<^sub>i\\<^sub>n\\<^sub>t\n                       (\\<lambda>_.\n                           (if X->includes\\<^sub>S\\<^sub>e\\<^sub>t(x) then \\<zero> else \\<one> endif)\n                            \\<tau>))\n                       \\<tau>\n 3. \\<tau> |\\<noteq> \\<delta> X and \\<upsilon> x \\<Longrightarrow>\n    X->including\\<^sub>S\\<^sub>e\\<^sub>t(x)->size\\<^sub>S\\<^sub>e\\<^sub>t()\n     \\<tau> =\n    (if \\<delta> X and\n        \\<upsilon> x then X->size\\<^sub>S\\<^sub>e\\<^sub>t() +\\<^sub>i\\<^sub>n\\<^sub>t\n                          if X->includes\\<^sub>S\\<^sub>e\\<^sub>t(x) then \\<zero> else \\<one> endif else invalid endif)\n     \\<tau>", "apply(subst cp_OclSize, simp add: OclIncluding_includes0 cp_OclSize[symmetric])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<tau> \\<Turnstile> \\<delta> X and \\<upsilon> x;\n     \\<tau> |\\<noteq> X->includes\\<^sub>S\\<^sub>e\\<^sub>t(x)\\<rbrakk>\n    \\<Longrightarrow> X->including\\<^sub>S\\<^sub>e\\<^sub>t(x)->size\\<^sub>S\\<^sub>e\\<^sub>t()\n                       \\<tau> =\n                      ((\\<lambda>_.\n                           X->size\\<^sub>S\\<^sub>e\\<^sub>t()\n                            \\<tau>) +\\<^sub>i\\<^sub>n\\<^sub>t\n                       (\\<lambda>_.\n                           (if X->includes\\<^sub>S\\<^sub>e\\<^sub>t(x) then \\<zero> else \\<one> endif)\n                            \\<tau>))\n                       \\<tau>\n 2. \\<tau> |\\<noteq> \\<delta> X and \\<upsilon> x \\<Longrightarrow>\n    X->including\\<^sub>S\\<^sub>e\\<^sub>t(x)->size\\<^sub>S\\<^sub>e\\<^sub>t()\n     \\<tau> =\n    (if \\<delta> X and\n        \\<upsilon> x then X->size\\<^sub>S\\<^sub>e\\<^sub>t() +\\<^sub>i\\<^sub>n\\<^sub>t\n                          if X->includes\\<^sub>S\\<^sub>e\\<^sub>t(x) then \\<zero> else \\<one> endif else invalid endif)\n     \\<tau>", "(* *)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<tau> \\<Turnstile> \\<delta> X and \\<upsilon> x;\n     \\<tau> |\\<noteq> X->includes\\<^sub>S\\<^sub>e\\<^sub>t(x)\\<rbrakk>\n    \\<Longrightarrow> X->including\\<^sub>S\\<^sub>e\\<^sub>t(x)->size\\<^sub>S\\<^sub>e\\<^sub>t()\n                       \\<tau> =\n                      ((\\<lambda>_.\n                           X->size\\<^sub>S\\<^sub>e\\<^sub>t()\n                            \\<tau>) +\\<^sub>i\\<^sub>n\\<^sub>t\n                       (\\<lambda>_.\n                           (if X->includes\\<^sub>S\\<^sub>e\\<^sub>t(x) then \\<zero> else \\<one> endif)\n                            \\<tau>))\n                       \\<tau>\n 2. \\<tau> |\\<noteq> \\<delta> X and \\<upsilon> x \\<Longrightarrow>\n    X->including\\<^sub>S\\<^sub>e\\<^sub>t(x)->size\\<^sub>S\\<^sub>e\\<^sub>t()\n     \\<tau> =\n    (if \\<delta> X and\n        \\<upsilon> x then X->size\\<^sub>S\\<^sub>e\\<^sub>t() +\\<^sub>i\\<^sub>n\\<^sub>t\n                          if X->includes\\<^sub>S\\<^sub>e\\<^sub>t(x) then \\<zero> else \\<one> endif else invalid endif)\n     \\<tau>", "apply(subst OclIf_false', subst foundation9, auto, simp add: OclSize_def)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<tau> \\<Turnstile> \\<delta> X and \\<upsilon> x;\n     \\<tau> |\\<noteq> X->includes\\<^sub>S\\<^sub>e\\<^sub>t(x)\\<rbrakk>\n    \\<Longrightarrow> ((\\<delta> X) \\<tau> = true \\<tau> \\<and>\n                       finite\n                        \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n   (X \\<tau>)\\<rceil>\\<rceil> \\<longrightarrow>\n                       ((\\<delta> X and \\<upsilon> x) \\<tau> =\n                        true \\<tau> \\<and>\n                        finite\n                         \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n    (X->including\\<^sub>S\\<^sub>e\\<^sub>t(x)\n      \\<tau>)\\<rceil>\\<rceil> \\<longrightarrow>\n                        \\<lfloor>\\<lfloor>int\n     (card\n       \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                        (X->including\\<^sub>S\\<^sub>e\\<^sub>t(x)\n                          \\<tau>)\\<rceil>\\<rceil>)\\<rfloor>\\<rfloor> =\n                        ((\\<lambda>_.\n                             \\<lfloor>\\<lfloor>int\n          (card\n            \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                             (X \\<tau>)\\<rceil>\\<rceil>)\\<rfloor>\\<rfloor>) +\\<^sub>i\\<^sub>n\\<^sub>t\n                         (\\<lambda>_. \\<one> \\<tau>))\n                         \\<tau>) \\<and>\n                       (((\\<delta> X and \\<upsilon> x) \\<tau> =\n                         true \\<tau> \\<longrightarrow>\n                         infinite\n                          \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n     (X->including\\<^sub>S\\<^sub>e\\<^sub>t(x)\n       \\<tau>)\\<rceil>\\<rceil>) \\<longrightarrow>\n                        \\<bottom> =\n                        ((\\<lambda>_.\n                             \\<lfloor>\\<lfloor>int\n          (card\n            \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                             (X \\<tau>)\\<rceil>\\<rceil>)\\<rfloor>\\<rfloor>) +\\<^sub>i\\<^sub>n\\<^sub>t\n                         (\\<lambda>_. \\<one> \\<tau>))\n                         \\<tau>)) \\<and>\n                      (((\\<delta> X) \\<tau> = true \\<tau> \\<longrightarrow>\n                        infinite\n                         \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n    (X \\<tau>)\\<rceil>\\<rceil>) \\<longrightarrow>\n                       ((\\<delta> X and \\<upsilon> x) \\<tau> =\n                        true \\<tau> \\<and>\n                        finite\n                         \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n    (X->including\\<^sub>S\\<^sub>e\\<^sub>t(x)\n      \\<tau>)\\<rceil>\\<rceil> \\<longrightarrow>\n                        \\<lfloor>\\<lfloor>int\n     (card\n       \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                        (X->including\\<^sub>S\\<^sub>e\\<^sub>t(x)\n                          \\<tau>)\\<rceil>\\<rceil>)\\<rfloor>\\<rfloor> =\n                        ((\\<lambda>_. \\<bottom>) +\\<^sub>i\\<^sub>n\\<^sub>t\n                         (\\<lambda>_. \\<one> \\<tau>))\n                         \\<tau>) \\<and>\n                       (((\\<delta> X and \\<upsilon> x) \\<tau> =\n                         true \\<tau> \\<longrightarrow>\n                         infinite\n                          \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n     (X->including\\<^sub>S\\<^sub>e\\<^sub>t(x)\n       \\<tau>)\\<rceil>\\<rceil>) \\<longrightarrow>\n                        \\<bottom> =\n                        ((\\<lambda>_. \\<bottom>) +\\<^sub>i\\<^sub>n\\<^sub>t\n                         (\\<lambda>_. \\<one> \\<tau>))\n                         \\<tau>))\n 2. \\<tau> |\\<noteq> \\<delta> X and \\<upsilon> x \\<Longrightarrow>\n    X->including\\<^sub>S\\<^sub>e\\<^sub>t(x)->size\\<^sub>S\\<^sub>e\\<^sub>t()\n     \\<tau> =\n    (if \\<delta> X and\n        \\<upsilon> x then X->size\\<^sub>S\\<^sub>e\\<^sub>t() +\\<^sub>i\\<^sub>n\\<^sub>t\n                          if X->includes\\<^sub>S\\<^sub>e\\<^sub>t(x) then \\<zero> else \\<one> endif else invalid endif)\n     \\<tau>", "apply(drule foundation5)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<tau> |\\<noteq> X->includes\\<^sub>S\\<^sub>e\\<^sub>t(x);\n     \\<tau> \\<Turnstile> \\<delta> X \\<and>\n     \\<tau> \\<Turnstile> \\<upsilon> x\\<rbrakk>\n    \\<Longrightarrow> ((\\<delta> X) \\<tau> = true \\<tau> \\<and>\n                       finite\n                        \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n   (X \\<tau>)\\<rceil>\\<rceil> \\<longrightarrow>\n                       ((\\<delta> X and \\<upsilon> x) \\<tau> =\n                        true \\<tau> \\<and>\n                        finite\n                         \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n    (X->including\\<^sub>S\\<^sub>e\\<^sub>t(x)\n      \\<tau>)\\<rceil>\\<rceil> \\<longrightarrow>\n                        \\<lfloor>\\<lfloor>int\n     (card\n       \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                        (X->including\\<^sub>S\\<^sub>e\\<^sub>t(x)\n                          \\<tau>)\\<rceil>\\<rceil>)\\<rfloor>\\<rfloor> =\n                        ((\\<lambda>_.\n                             \\<lfloor>\\<lfloor>int\n          (card\n            \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                             (X \\<tau>)\\<rceil>\\<rceil>)\\<rfloor>\\<rfloor>) +\\<^sub>i\\<^sub>n\\<^sub>t\n                         (\\<lambda>_. \\<one> \\<tau>))\n                         \\<tau>) \\<and>\n                       (((\\<delta> X and \\<upsilon> x) \\<tau> =\n                         true \\<tau> \\<longrightarrow>\n                         infinite\n                          \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n     (X->including\\<^sub>S\\<^sub>e\\<^sub>t(x)\n       \\<tau>)\\<rceil>\\<rceil>) \\<longrightarrow>\n                        \\<bottom> =\n                        ((\\<lambda>_.\n                             \\<lfloor>\\<lfloor>int\n          (card\n            \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                             (X \\<tau>)\\<rceil>\\<rceil>)\\<rfloor>\\<rfloor>) +\\<^sub>i\\<^sub>n\\<^sub>t\n                         (\\<lambda>_. \\<one> \\<tau>))\n                         \\<tau>)) \\<and>\n                      (((\\<delta> X) \\<tau> = true \\<tau> \\<longrightarrow>\n                        infinite\n                         \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n    (X \\<tau>)\\<rceil>\\<rceil>) \\<longrightarrow>\n                       ((\\<delta> X and \\<upsilon> x) \\<tau> =\n                        true \\<tau> \\<and>\n                        finite\n                         \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n    (X->including\\<^sub>S\\<^sub>e\\<^sub>t(x)\n      \\<tau>)\\<rceil>\\<rceil> \\<longrightarrow>\n                        \\<lfloor>\\<lfloor>int\n     (card\n       \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                        (X->including\\<^sub>S\\<^sub>e\\<^sub>t(x)\n                          \\<tau>)\\<rceil>\\<rceil>)\\<rfloor>\\<rfloor> =\n                        ((\\<lambda>_. \\<bottom>) +\\<^sub>i\\<^sub>n\\<^sub>t\n                         (\\<lambda>_. \\<one> \\<tau>))\n                         \\<tau>) \\<and>\n                       (((\\<delta> X and \\<upsilon> x) \\<tau> =\n                         true \\<tau> \\<longrightarrow>\n                         infinite\n                          \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n     (X->including\\<^sub>S\\<^sub>e\\<^sub>t(x)\n       \\<tau>)\\<rceil>\\<rceil>) \\<longrightarrow>\n                        \\<bottom> =\n                        ((\\<lambda>_. \\<bottom>) +\\<^sub>i\\<^sub>n\\<^sub>t\n                         (\\<lambda>_. \\<one> \\<tau>))\n                         \\<tau>))\n 2. \\<tau> |\\<noteq> \\<delta> X and \\<upsilon> x \\<Longrightarrow>\n    X->including\\<^sub>S\\<^sub>e\\<^sub>t(x)->size\\<^sub>S\\<^sub>e\\<^sub>t()\n     \\<tau> =\n    (if \\<delta> X and\n        \\<upsilon> x then X->size\\<^sub>S\\<^sub>e\\<^sub>t() +\\<^sub>i\\<^sub>n\\<^sub>t\n                          if X->includes\\<^sub>S\\<^sub>e\\<^sub>t(x) then \\<zero> else \\<one> endif else invalid endif)\n     \\<tau>", "apply(subst (1 2) OclIncluding_finite_rep_set, fast+)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<tau> |\\<noteq> X->includes\\<^sub>S\\<^sub>e\\<^sub>t(x);\n     \\<tau> \\<Turnstile> \\<delta> X \\<and>\n     \\<tau> \\<Turnstile> \\<upsilon> x\\<rbrakk>\n    \\<Longrightarrow> ((\\<delta> X) \\<tau> = true \\<tau> \\<and>\n                       finite\n                        \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n   (X \\<tau>)\\<rceil>\\<rceil> \\<longrightarrow>\n                       ((\\<delta> X and \\<upsilon> x) \\<tau> =\n                        true \\<tau> \\<and>\n                        finite\n                         \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n    (X \\<tau>)\\<rceil>\\<rceil> \\<longrightarrow>\n                        \\<lfloor>\\<lfloor>int\n     (card\n       \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                        (X->including\\<^sub>S\\<^sub>e\\<^sub>t(x)\n                          \\<tau>)\\<rceil>\\<rceil>)\\<rfloor>\\<rfloor> =\n                        ((\\<lambda>_.\n                             \\<lfloor>\\<lfloor>int\n          (card\n            \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                             (X \\<tau>)\\<rceil>\\<rceil>)\\<rfloor>\\<rfloor>) +\\<^sub>i\\<^sub>n\\<^sub>t\n                         (\\<lambda>_. \\<one> \\<tau>))\n                         \\<tau>) \\<and>\n                       (((\\<delta> X and \\<upsilon> x) \\<tau> =\n                         true \\<tau> \\<longrightarrow>\n                         infinite\n                          \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n     (X \\<tau>)\\<rceil>\\<rceil>) \\<longrightarrow>\n                        \\<bottom> =\n                        ((\\<lambda>_.\n                             \\<lfloor>\\<lfloor>int\n          (card\n            \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                             (X \\<tau>)\\<rceil>\\<rceil>)\\<rfloor>\\<rfloor>) +\\<^sub>i\\<^sub>n\\<^sub>t\n                         (\\<lambda>_. \\<one> \\<tau>))\n                         \\<tau>)) \\<and>\n                      (((\\<delta> X) \\<tau> = true \\<tau> \\<longrightarrow>\n                        infinite\n                         \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n    (X \\<tau>)\\<rceil>\\<rceil>) \\<longrightarrow>\n                       ((\\<delta> X and \\<upsilon> x) \\<tau> =\n                        true \\<tau> \\<and>\n                        finite\n                         \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n    (X->including\\<^sub>S\\<^sub>e\\<^sub>t(x)\n      \\<tau>)\\<rceil>\\<rceil> \\<longrightarrow>\n                        \\<lfloor>\\<lfloor>int\n     (card\n       \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                        (X->including\\<^sub>S\\<^sub>e\\<^sub>t(x)\n                          \\<tau>)\\<rceil>\\<rceil>)\\<rfloor>\\<rfloor> =\n                        ((\\<lambda>_. \\<bottom>) +\\<^sub>i\\<^sub>n\\<^sub>t\n                         (\\<lambda>_. \\<one> \\<tau>))\n                         \\<tau>) \\<and>\n                       (((\\<delta> X and \\<upsilon> x) \\<tau> =\n                         true \\<tau> \\<longrightarrow>\n                         infinite\n                          \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n     (X->including\\<^sub>S\\<^sub>e\\<^sub>t(x)\n       \\<tau>)\\<rceil>\\<rceil>) \\<longrightarrow>\n                        \\<bottom> =\n                        ((\\<lambda>_. \\<bottom>) +\\<^sub>i\\<^sub>n\\<^sub>t\n                         (\\<lambda>_. \\<one> \\<tau>))\n                         \\<tau>))\n 2. \\<tau> |\\<noteq> \\<delta> X and \\<upsilon> x \\<Longrightarrow>\n    X->including\\<^sub>S\\<^sub>e\\<^sub>t(x)->size\\<^sub>S\\<^sub>e\\<^sub>t()\n     \\<tau> =\n    (if \\<delta> X and\n        \\<upsilon> x then X->size\\<^sub>S\\<^sub>e\\<^sub>t() +\\<^sub>i\\<^sub>n\\<^sub>t\n                          if X->includes\\<^sub>S\\<^sub>e\\<^sub>t(x) then \\<zero> else \\<one> endif else invalid endif)\n     \\<tau>", "apply(subst (1 2) cp_OclAnd, subst (1 2) OclAdd\\<^sub>I\\<^sub>n\\<^sub>t\\<^sub>e\\<^sub>g\\<^sub>e\\<^sub>r.cp0, simp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<tau> |\\<noteq> X->includes\\<^sub>S\\<^sub>e\\<^sub>t(x);\n     \\<tau> \\<Turnstile> \\<delta> X \\<and>\n     \\<tau> \\<Turnstile> \\<upsilon> x\\<rbrakk>\n    \\<Longrightarrow> ((\\<delta> X) \\<tau> = true \\<tau> \\<and>\n                       finite\n                        \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n   (X \\<tau>)\\<rceil>\\<rceil> \\<longrightarrow>\n                       (((\\<lambda>_. true \\<tau>) and\n                         (\\<lambda>_. (\\<upsilon> x) \\<tau>))\n                         \\<tau> =\n                        true \\<tau> \\<longrightarrow>\n                        \\<lfloor>\\<lfloor>int\n     (card\n       \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                        (X->including\\<^sub>S\\<^sub>e\\<^sub>t(x)\n                          \\<tau>)\\<rceil>\\<rceil>)\\<rfloor>\\<rfloor> =\n                        ((\\<lambda>_.\n                             \\<lfloor>\\<lfloor>int\n          (card\n            \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                             (X \\<tau>)\\<rceil>\\<rceil>)\\<rfloor>\\<rfloor>) +\\<^sub>i\\<^sub>n\\<^sub>t\n                         (\\<lambda>_. \\<one> \\<tau>))\n                         \\<tau>) \\<and>\n                       (((\\<lambda>_. true \\<tau>) and\n                         (\\<lambda>_. (\\<upsilon> x) \\<tau>))\n                         \\<tau> \\<noteq>\n                        true \\<tau> \\<longrightarrow>\n                        \\<bottom> =\n                        ((\\<lambda>_.\n                             \\<lfloor>\\<lfloor>int\n          (card\n            \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                             (X \\<tau>)\\<rceil>\\<rceil>)\\<rfloor>\\<rfloor>) +\\<^sub>i\\<^sub>n\\<^sub>t\n                         (\\<lambda>_. \\<one> \\<tau>))\n                         \\<tau>)) \\<and>\n                      (((\\<delta> X) \\<tau> = true \\<tau> \\<longrightarrow>\n                        infinite\n                         \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n    (X \\<tau>)\\<rceil>\\<rceil>) \\<longrightarrow>\n                       ((\\<delta> X and \\<upsilon> x) \\<tau> =\n                        true \\<tau> \\<and>\n                        finite\n                         \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n    (X->including\\<^sub>S\\<^sub>e\\<^sub>t(x)\n      \\<tau>)\\<rceil>\\<rceil> \\<longrightarrow>\n                        \\<lfloor>\\<lfloor>int\n     (card\n       \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                        (X->including\\<^sub>S\\<^sub>e\\<^sub>t(x)\n                          \\<tau>)\\<rceil>\\<rceil>)\\<rfloor>\\<rfloor> =\n                        ((\\<lambda>_. \\<bottom>) +\\<^sub>i\\<^sub>n\\<^sub>t\n                         (\\<lambda>_. \\<one> \\<tau>))\n                         \\<tau>) \\<and>\n                       (((\\<delta> X and \\<upsilon> x) \\<tau> =\n                         true \\<tau> \\<longrightarrow>\n                         infinite\n                          \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n     (X->including\\<^sub>S\\<^sub>e\\<^sub>t(x)\n       \\<tau>)\\<rceil>\\<rceil>) \\<longrightarrow>\n                        \\<bottom> =\n                        ((\\<lambda>_. \\<bottom>) +\\<^sub>i\\<^sub>n\\<^sub>t\n                         (\\<lambda>_. \\<one> \\<tau>))\n                         \\<tau>))\n 2. \\<tau> |\\<noteq> \\<delta> X and \\<upsilon> x \\<Longrightarrow>\n    X->including\\<^sub>S\\<^sub>e\\<^sub>t(x)->size\\<^sub>S\\<^sub>e\\<^sub>t()\n     \\<tau> =\n    (if \\<delta> X and\n        \\<upsilon> x then X->size\\<^sub>S\\<^sub>e\\<^sub>t() +\\<^sub>i\\<^sub>n\\<^sub>t\n                          if X->includes\\<^sub>S\\<^sub>e\\<^sub>t(x) then \\<zero> else \\<one> endif else invalid endif)\n     \\<tau>", "apply(rule conjI)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>\\<tau> |\\<noteq> X->includes\\<^sub>S\\<^sub>e\\<^sub>t(x);\n     \\<tau> \\<Turnstile> \\<delta> X \\<and>\n     \\<tau> \\<Turnstile> \\<upsilon> x\\<rbrakk>\n    \\<Longrightarrow> (\\<delta> X) \\<tau> = true \\<tau> \\<and>\n                      finite\n                       \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n  (X \\<tau>)\\<rceil>\\<rceil> \\<longrightarrow>\n                      (((\\<lambda>_. true \\<tau>) and\n                        (\\<lambda>_. (\\<upsilon> x) \\<tau>))\n                        \\<tau> =\n                       true \\<tau> \\<longrightarrow>\n                       \\<lfloor>\\<lfloor>int\n    (card\n      \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                       (X->including\\<^sub>S\\<^sub>e\\<^sub>t(x)\n                         \\<tau>)\\<rceil>\\<rceil>)\\<rfloor>\\<rfloor> =\n                       ((\\<lambda>_.\n                            \\<lfloor>\\<lfloor>int\n         (card\n           \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                            (X \\<tau>)\\<rceil>\\<rceil>)\\<rfloor>\\<rfloor>) +\\<^sub>i\\<^sub>n\\<^sub>t\n                        (\\<lambda>_. \\<one> \\<tau>))\n                        \\<tau>) \\<and>\n                      (((\\<lambda>_. true \\<tau>) and\n                        (\\<lambda>_. (\\<upsilon> x) \\<tau>))\n                        \\<tau> \\<noteq>\n                       true \\<tau> \\<longrightarrow>\n                       \\<bottom> =\n                       ((\\<lambda>_.\n                            \\<lfloor>\\<lfloor>int\n         (card\n           \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                            (X \\<tau>)\\<rceil>\\<rceil>)\\<rfloor>\\<rfloor>) +\\<^sub>i\\<^sub>n\\<^sub>t\n                        (\\<lambda>_. \\<one> \\<tau>))\n                        \\<tau>)\n 2. \\<lbrakk>\\<tau> |\\<noteq> X->includes\\<^sub>S\\<^sub>e\\<^sub>t(x);\n     \\<tau> \\<Turnstile> \\<delta> X \\<and>\n     \\<tau> \\<Turnstile> \\<upsilon> x\\<rbrakk>\n    \\<Longrightarrow> ((\\<delta> X) \\<tau> = true \\<tau> \\<longrightarrow>\n                       infinite\n                        \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n   (X \\<tau>)\\<rceil>\\<rceil>) \\<longrightarrow>\n                      ((\\<delta> X and \\<upsilon> x) \\<tau> =\n                       true \\<tau> \\<and>\n                       finite\n                        \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n   (X->including\\<^sub>S\\<^sub>e\\<^sub>t(x)\n     \\<tau>)\\<rceil>\\<rceil> \\<longrightarrow>\n                       \\<lfloor>\\<lfloor>int\n    (card\n      \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                       (X->including\\<^sub>S\\<^sub>e\\<^sub>t(x)\n                         \\<tau>)\\<rceil>\\<rceil>)\\<rfloor>\\<rfloor> =\n                       ((\\<lambda>_. \\<bottom>) +\\<^sub>i\\<^sub>n\\<^sub>t\n                        (\\<lambda>_. \\<one> \\<tau>))\n                        \\<tau>) \\<and>\n                      (((\\<delta> X and \\<upsilon> x) \\<tau> =\n                        true \\<tau> \\<longrightarrow>\n                        infinite\n                         \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n    (X->including\\<^sub>S\\<^sub>e\\<^sub>t(x)\n      \\<tau>)\\<rceil>\\<rceil>) \\<longrightarrow>\n                       \\<bottom> =\n                       ((\\<lambda>_. \\<bottom>) +\\<^sub>i\\<^sub>n\\<^sub>t\n                        (\\<lambda>_. \\<one> \\<tau>))\n                        \\<tau>)\n 3. \\<tau> |\\<noteq> \\<delta> X and \\<upsilon> x \\<Longrightarrow>\n    X->including\\<^sub>S\\<^sub>e\\<^sub>t(x)->size\\<^sub>S\\<^sub>e\\<^sub>t()\n     \\<tau> =\n    (if \\<delta> X and\n        \\<upsilon> x then X->size\\<^sub>S\\<^sub>e\\<^sub>t() +\\<^sub>i\\<^sub>n\\<^sub>t\n                          if X->includes\\<^sub>S\\<^sub>e\\<^sub>t(x) then \\<zero> else \\<one> endif else invalid endif)\n     \\<tau>", "apply(simp add: OclIncluding_def)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>\\<tau> |\\<noteq> X->includes\\<^sub>S\\<^sub>e\\<^sub>t(x);\n     \\<tau> \\<Turnstile> \\<delta> X \\<and>\n     \\<tau> \\<Turnstile> \\<upsilon> x\\<rbrakk>\n    \\<Longrightarrow> ((\\<upsilon> x) \\<tau> = true \\<tau> \\<longrightarrow>\n                       (\\<delta> X) \\<tau> = true \\<tau> \\<and>\n                       finite\n                        \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n   (X \\<tau>)\\<rceil>\\<rceil> \\<longrightarrow>\n                       \\<lfloor>\\<lfloor>int\n    (card\n      \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                       (Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                         \\<lfloor>\\<lfloor>insert (x \\<tau>)\n      \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                       (X \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>)\\<rceil>\\<rceil>)\\<rfloor>\\<rfloor> =\n                       ((\\<lambda>_.\n                            \\<lfloor>\\<lfloor>int\n         (card\n           \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                            (X \\<tau>)\\<rceil>\\<rceil>)\\<rfloor>\\<rfloor>) +\\<^sub>i\\<^sub>n\\<^sub>t\n                        (\\<lambda>_. \\<one> \\<tau>))\n                        \\<tau>) \\<and>\n                      ((\\<upsilon> x) \\<tau> \\<noteq>\n                       true \\<tau> \\<longrightarrow>\n                       (\\<delta> X) \\<tau> = true \\<tau> \\<and>\n                       finite\n                        \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n   (X \\<tau>)\\<rceil>\\<rceil> \\<longrightarrow>\n                       (((\\<lambda>_. true \\<tau>) and\n                         (\\<lambda>_. (\\<upsilon> x) \\<tau>))\n                         \\<tau> =\n                        true \\<tau> \\<longrightarrow>\n                        \\<lfloor>\\<lfloor>int\n     (card\n       \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                        (invalid\n                          \\<tau>)\\<rceil>\\<rceil>)\\<rfloor>\\<rfloor> =\n                        ((\\<lambda>_.\n                             \\<lfloor>\\<lfloor>int\n          (card\n            \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                             (X \\<tau>)\\<rceil>\\<rceil>)\\<rfloor>\\<rfloor>) +\\<^sub>i\\<^sub>n\\<^sub>t\n                         (\\<lambda>_. \\<one> \\<tau>))\n                         \\<tau>) \\<and>\n                       (((\\<lambda>_. true \\<tau>) and\n                         (\\<lambda>_. (\\<upsilon> x) \\<tau>))\n                         \\<tau> \\<noteq>\n                        true \\<tau> \\<longrightarrow>\n                        \\<bottom> =\n                        ((\\<lambda>_.\n                             \\<lfloor>\\<lfloor>int\n          (card\n            \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                             (X \\<tau>)\\<rceil>\\<rceil>)\\<rfloor>\\<rfloor>) +\\<^sub>i\\<^sub>n\\<^sub>t\n                         (\\<lambda>_. \\<one> \\<tau>))\n                         \\<tau>))\n 2. \\<lbrakk>\\<tau> |\\<noteq> X->includes\\<^sub>S\\<^sub>e\\<^sub>t(x);\n     \\<tau> \\<Turnstile> \\<delta> X \\<and>\n     \\<tau> \\<Turnstile> \\<upsilon> x\\<rbrakk>\n    \\<Longrightarrow> ((\\<delta> X) \\<tau> = true \\<tau> \\<longrightarrow>\n                       infinite\n                        \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n   (X \\<tau>)\\<rceil>\\<rceil>) \\<longrightarrow>\n                      ((\\<delta> X and \\<upsilon> x) \\<tau> =\n                       true \\<tau> \\<and>\n                       finite\n                        \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n   (X->including\\<^sub>S\\<^sub>e\\<^sub>t(x)\n     \\<tau>)\\<rceil>\\<rceil> \\<longrightarrow>\n                       \\<lfloor>\\<lfloor>int\n    (card\n      \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                       (X->including\\<^sub>S\\<^sub>e\\<^sub>t(x)\n                         \\<tau>)\\<rceil>\\<rceil>)\\<rfloor>\\<rfloor> =\n                       ((\\<lambda>_. \\<bottom>) +\\<^sub>i\\<^sub>n\\<^sub>t\n                        (\\<lambda>_. \\<one> \\<tau>))\n                        \\<tau>) \\<and>\n                      (((\\<delta> X and \\<upsilon> x) \\<tau> =\n                        true \\<tau> \\<longrightarrow>\n                        infinite\n                         \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n    (X->including\\<^sub>S\\<^sub>e\\<^sub>t(x)\n      \\<tau>)\\<rceil>\\<rceil>) \\<longrightarrow>\n                       \\<bottom> =\n                       ((\\<lambda>_. \\<bottom>) +\\<^sub>i\\<^sub>n\\<^sub>t\n                        (\\<lambda>_. \\<one> \\<tau>))\n                        \\<tau>)\n 3. \\<tau> |\\<noteq> \\<delta> X and \\<upsilon> x \\<Longrightarrow>\n    X->including\\<^sub>S\\<^sub>e\\<^sub>t(x)->size\\<^sub>S\\<^sub>e\\<^sub>t()\n     \\<tau> =\n    (if \\<delta> X and\n        \\<upsilon> x then X->size\\<^sub>S\\<^sub>e\\<^sub>t() +\\<^sub>i\\<^sub>n\\<^sub>t\n                          if X->includes\\<^sub>S\\<^sub>e\\<^sub>t(x) then \\<zero> else \\<one> endif else invalid endif)\n     \\<tau>", "apply(subst Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e_inverse[OF ins_in_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e], fast+)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>\\<tau> |\\<noteq> X->includes\\<^sub>S\\<^sub>e\\<^sub>t(x);\n     \\<tau> \\<Turnstile> \\<delta> X \\<and>\n     \\<tau> \\<Turnstile> \\<upsilon> x\\<rbrakk>\n    \\<Longrightarrow> ((\\<upsilon> x) \\<tau> = true \\<tau> \\<longrightarrow>\n                       (\\<delta> X) \\<tau> = true \\<tau> \\<and>\n                       finite\n                        \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n   (X \\<tau>)\\<rceil>\\<rceil> \\<longrightarrow>\n                       \\<lfloor>\\<lfloor>int\n    (card\n      \\<lceil>\\<lceil>\\<lfloor>\\<lfloor>insert (x \\<tau>)\n   \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                    (X \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>\\<rceil>\\<rceil>)\\<rfloor>\\<rfloor> =\n                       ((\\<lambda>_.\n                            \\<lfloor>\\<lfloor>int\n         (card\n           \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                            (X \\<tau>)\\<rceil>\\<rceil>)\\<rfloor>\\<rfloor>) +\\<^sub>i\\<^sub>n\\<^sub>t\n                        (\\<lambda>_. \\<one> \\<tau>))\n                        \\<tau>) \\<and>\n                      ((\\<upsilon> x) \\<tau> \\<noteq>\n                       true \\<tau> \\<longrightarrow>\n                       (\\<delta> X) \\<tau> = true \\<tau> \\<and>\n                       finite\n                        \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n   (X \\<tau>)\\<rceil>\\<rceil> \\<longrightarrow>\n                       (((\\<lambda>_. true \\<tau>) and\n                         (\\<lambda>_. (\\<upsilon> x) \\<tau>))\n                         \\<tau> =\n                        true \\<tau> \\<longrightarrow>\n                        \\<lfloor>\\<lfloor>int\n     (card\n       \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                        (invalid\n                          \\<tau>)\\<rceil>\\<rceil>)\\<rfloor>\\<rfloor> =\n                        ((\\<lambda>_.\n                             \\<lfloor>\\<lfloor>int\n          (card\n            \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                             (X \\<tau>)\\<rceil>\\<rceil>)\\<rfloor>\\<rfloor>) +\\<^sub>i\\<^sub>n\\<^sub>t\n                         (\\<lambda>_. \\<one> \\<tau>))\n                         \\<tau>) \\<and>\n                       (((\\<lambda>_. true \\<tau>) and\n                         (\\<lambda>_. (\\<upsilon> x) \\<tau>))\n                         \\<tau> \\<noteq>\n                        true \\<tau> \\<longrightarrow>\n                        \\<bottom> =\n                        ((\\<lambda>_.\n                             \\<lfloor>\\<lfloor>int\n          (card\n            \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                             (X \\<tau>)\\<rceil>\\<rceil>)\\<rfloor>\\<rfloor>) +\\<^sub>i\\<^sub>n\\<^sub>t\n                         (\\<lambda>_. \\<one> \\<tau>))\n                         \\<tau>))\n 2. \\<lbrakk>\\<tau> |\\<noteq> X->includes\\<^sub>S\\<^sub>e\\<^sub>t(x);\n     \\<tau> \\<Turnstile> \\<delta> X \\<and>\n     \\<tau> \\<Turnstile> \\<upsilon> x\\<rbrakk>\n    \\<Longrightarrow> ((\\<delta> X) \\<tau> = true \\<tau> \\<longrightarrow>\n                       infinite\n                        \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n   (X \\<tau>)\\<rceil>\\<rceil>) \\<longrightarrow>\n                      ((\\<delta> X and \\<upsilon> x) \\<tau> =\n                       true \\<tau> \\<and>\n                       finite\n                        \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n   (X->including\\<^sub>S\\<^sub>e\\<^sub>t(x)\n     \\<tau>)\\<rceil>\\<rceil> \\<longrightarrow>\n                       \\<lfloor>\\<lfloor>int\n    (card\n      \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                       (X->including\\<^sub>S\\<^sub>e\\<^sub>t(x)\n                         \\<tau>)\\<rceil>\\<rceil>)\\<rfloor>\\<rfloor> =\n                       ((\\<lambda>_. \\<bottom>) +\\<^sub>i\\<^sub>n\\<^sub>t\n                        (\\<lambda>_. \\<one> \\<tau>))\n                        \\<tau>) \\<and>\n                      (((\\<delta> X and \\<upsilon> x) \\<tau> =\n                        true \\<tau> \\<longrightarrow>\n                        infinite\n                         \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n    (X->including\\<^sub>S\\<^sub>e\\<^sub>t(x)\n      \\<tau>)\\<rceil>\\<rceil>) \\<longrightarrow>\n                       \\<bottom> =\n                       ((\\<lambda>_. \\<bottom>) +\\<^sub>i\\<^sub>n\\<^sub>t\n                        (\\<lambda>_. \\<one> \\<tau>))\n                        \\<tau>)\n 3. \\<tau> |\\<noteq> \\<delta> X and \\<upsilon> x \\<Longrightarrow>\n    X->including\\<^sub>S\\<^sub>e\\<^sub>t(x)->size\\<^sub>S\\<^sub>e\\<^sub>t()\n     \\<tau> =\n    (if \\<delta> X and\n        \\<upsilon> x then X->size\\<^sub>S\\<^sub>e\\<^sub>t() +\\<^sub>i\\<^sub>n\\<^sub>t\n                          if X->includes\\<^sub>S\\<^sub>e\\<^sub>t(x) then \\<zero> else \\<one> endif else invalid endif)\n     \\<tau>", "apply(subst (asm) (2 3) OclValid_def, simp add: OclAdd\\<^sub>I\\<^sub>n\\<^sub>t\\<^sub>e\\<^sub>g\\<^sub>e\\<^sub>r_def OclInt1_def)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>\\<tau> |\\<noteq> X->includes\\<^sub>S\\<^sub>e\\<^sub>t(x);\n     (\\<delta> X) \\<tau> = true \\<tau> \\<and>\n     (\\<upsilon> x) \\<tau> = true \\<tau>\\<rbrakk>\n    \\<Longrightarrow> finite\n                       \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n  (X \\<tau>)\\<rceil>\\<rceil> \\<longrightarrow>\n                      int (card\n                            (insert (x \\<tau>)\n                              \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n         (X \\<tau>)\\<rceil>\\<rceil>)) =\n                      int (card\n                            \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n       (X \\<tau>)\\<rceil>\\<rceil>) +\n                      1\n 2. \\<lbrakk>\\<tau> |\\<noteq> X->includes\\<^sub>S\\<^sub>e\\<^sub>t(x);\n     \\<tau> \\<Turnstile> \\<delta> X \\<and>\n     \\<tau> \\<Turnstile> \\<upsilon> x\\<rbrakk>\n    \\<Longrightarrow> ((\\<delta> X) \\<tau> = true \\<tau> \\<longrightarrow>\n                       infinite\n                        \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n   (X \\<tau>)\\<rceil>\\<rceil>) \\<longrightarrow>\n                      ((\\<delta> X and \\<upsilon> x) \\<tau> =\n                       true \\<tau> \\<and>\n                       finite\n                        \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n   (X->including\\<^sub>S\\<^sub>e\\<^sub>t(x)\n     \\<tau>)\\<rceil>\\<rceil> \\<longrightarrow>\n                       \\<lfloor>\\<lfloor>int\n    (card\n      \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                       (X->including\\<^sub>S\\<^sub>e\\<^sub>t(x)\n                         \\<tau>)\\<rceil>\\<rceil>)\\<rfloor>\\<rfloor> =\n                       ((\\<lambda>_. \\<bottom>) +\\<^sub>i\\<^sub>n\\<^sub>t\n                        (\\<lambda>_. \\<one> \\<tau>))\n                        \\<tau>) \\<and>\n                      (((\\<delta> X and \\<upsilon> x) \\<tau> =\n                        true \\<tau> \\<longrightarrow>\n                        infinite\n                         \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n    (X->including\\<^sub>S\\<^sub>e\\<^sub>t(x)\n      \\<tau>)\\<rceil>\\<rceil>) \\<longrightarrow>\n                       \\<bottom> =\n                       ((\\<lambda>_. \\<bottom>) +\\<^sub>i\\<^sub>n\\<^sub>t\n                        (\\<lambda>_. \\<one> \\<tau>))\n                        \\<tau>)\n 3. \\<tau> |\\<noteq> \\<delta> X and \\<upsilon> x \\<Longrightarrow>\n    X->including\\<^sub>S\\<^sub>e\\<^sub>t(x)->size\\<^sub>S\\<^sub>e\\<^sub>t()\n     \\<tau> =\n    (if \\<delta> X and\n        \\<upsilon> x then X->size\\<^sub>S\\<^sub>e\\<^sub>t() +\\<^sub>i\\<^sub>n\\<^sub>t\n                          if X->includes\\<^sub>S\\<^sub>e\\<^sub>t(x) then \\<zero> else \\<one> endif else invalid endif)\n     \\<tau>", "apply(rule impI)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>\\<tau> |\\<noteq> X->includes\\<^sub>S\\<^sub>e\\<^sub>t(x);\n     (\\<delta> X) \\<tau> = true \\<tau> \\<and>\n     (\\<upsilon> x) \\<tau> = true \\<tau>;\n     finite\n      \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                       (X \\<tau>)\\<rceil>\\<rceil>\\<rbrakk>\n    \\<Longrightarrow> int (card\n                            (insert (x \\<tau>)\n                              \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n         (X \\<tau>)\\<rceil>\\<rceil>)) =\n                      int (card\n                            \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n       (X \\<tau>)\\<rceil>\\<rceil>) +\n                      1\n 2. \\<lbrakk>\\<tau> |\\<noteq> X->includes\\<^sub>S\\<^sub>e\\<^sub>t(x);\n     \\<tau> \\<Turnstile> \\<delta> X \\<and>\n     \\<tau> \\<Turnstile> \\<upsilon> x\\<rbrakk>\n    \\<Longrightarrow> ((\\<delta> X) \\<tau> = true \\<tau> \\<longrightarrow>\n                       infinite\n                        \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n   (X \\<tau>)\\<rceil>\\<rceil>) \\<longrightarrow>\n                      ((\\<delta> X and \\<upsilon> x) \\<tau> =\n                       true \\<tau> \\<and>\n                       finite\n                        \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n   (X->including\\<^sub>S\\<^sub>e\\<^sub>t(x)\n     \\<tau>)\\<rceil>\\<rceil> \\<longrightarrow>\n                       \\<lfloor>\\<lfloor>int\n    (card\n      \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                       (X->including\\<^sub>S\\<^sub>e\\<^sub>t(x)\n                         \\<tau>)\\<rceil>\\<rceil>)\\<rfloor>\\<rfloor> =\n                       ((\\<lambda>_. \\<bottom>) +\\<^sub>i\\<^sub>n\\<^sub>t\n                        (\\<lambda>_. \\<one> \\<tau>))\n                        \\<tau>) \\<and>\n                      (((\\<delta> X and \\<upsilon> x) \\<tau> =\n                        true \\<tau> \\<longrightarrow>\n                        infinite\n                         \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n    (X->including\\<^sub>S\\<^sub>e\\<^sub>t(x)\n      \\<tau>)\\<rceil>\\<rceil>) \\<longrightarrow>\n                       \\<bottom> =\n                       ((\\<lambda>_. \\<bottom>) +\\<^sub>i\\<^sub>n\\<^sub>t\n                        (\\<lambda>_. \\<one> \\<tau>))\n                        \\<tau>)\n 3. \\<tau> |\\<noteq> \\<delta> X and \\<upsilon> x \\<Longrightarrow>\n    X->including\\<^sub>S\\<^sub>e\\<^sub>t(x)->size\\<^sub>S\\<^sub>e\\<^sub>t()\n     \\<tau> =\n    (if \\<delta> X and\n        \\<upsilon> x then X->size\\<^sub>S\\<^sub>e\\<^sub>t() +\\<^sub>i\\<^sub>n\\<^sub>t\n                          if X->includes\\<^sub>S\\<^sub>e\\<^sub>t(x) then \\<zero> else \\<one> endif else invalid endif)\n     \\<tau>", "apply(drule Finite_Set.card.insert[where x = \"x \\<tau>\"])"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<lbrakk>\\<tau> |\\<noteq> X->includes\\<^sub>S\\<^sub>e\\<^sub>t(x);\n     (\\<delta> X) \\<tau> = true \\<tau> \\<and>\n     (\\<upsilon> x) \\<tau> = true \\<tau>\\<rbrakk>\n    \\<Longrightarrow> x \\<tau>\n                      \\<notin> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n          (X \\<tau>)\\<rceil>\\<rceil>\n 2. \\<lbrakk>\\<tau> |\\<noteq> X->includes\\<^sub>S\\<^sub>e\\<^sub>t(x);\n     (\\<delta> X) \\<tau> = true \\<tau> \\<and>\n     (\\<upsilon> x) \\<tau> = true \\<tau>;\n     card\n      (insert (x \\<tau>)\n        \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                         (X \\<tau>)\\<rceil>\\<rceil>) =\n     Suc (card\n           \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                            (X \\<tau>)\\<rceil>\\<rceil>)\\<rbrakk>\n    \\<Longrightarrow> int (card\n                            (insert (x \\<tau>)\n                              \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n         (X \\<tau>)\\<rceil>\\<rceil>)) =\n                      int (card\n                            \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n       (X \\<tau>)\\<rceil>\\<rceil>) +\n                      1\n 3. \\<lbrakk>\\<tau> |\\<noteq> X->includes\\<^sub>S\\<^sub>e\\<^sub>t(x);\n     \\<tau> \\<Turnstile> \\<delta> X \\<and>\n     \\<tau> \\<Turnstile> \\<upsilon> x\\<rbrakk>\n    \\<Longrightarrow> ((\\<delta> X) \\<tau> = true \\<tau> \\<longrightarrow>\n                       infinite\n                        \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n   (X \\<tau>)\\<rceil>\\<rceil>) \\<longrightarrow>\n                      ((\\<delta> X and \\<upsilon> x) \\<tau> =\n                       true \\<tau> \\<and>\n                       finite\n                        \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n   (X->including\\<^sub>S\\<^sub>e\\<^sub>t(x)\n     \\<tau>)\\<rceil>\\<rceil> \\<longrightarrow>\n                       \\<lfloor>\\<lfloor>int\n    (card\n      \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                       (X->including\\<^sub>S\\<^sub>e\\<^sub>t(x)\n                         \\<tau>)\\<rceil>\\<rceil>)\\<rfloor>\\<rfloor> =\n                       ((\\<lambda>_. \\<bottom>) +\\<^sub>i\\<^sub>n\\<^sub>t\n                        (\\<lambda>_. \\<one> \\<tau>))\n                        \\<tau>) \\<and>\n                      (((\\<delta> X and \\<upsilon> x) \\<tau> =\n                        true \\<tau> \\<longrightarrow>\n                        infinite\n                         \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n    (X->including\\<^sub>S\\<^sub>e\\<^sub>t(x)\n      \\<tau>)\\<rceil>\\<rceil>) \\<longrightarrow>\n                       \\<bottom> =\n                       ((\\<lambda>_. \\<bottom>) +\\<^sub>i\\<^sub>n\\<^sub>t\n                        (\\<lambda>_. \\<one> \\<tau>))\n                        \\<tau>)\n 4. \\<tau> |\\<noteq> \\<delta> X and \\<upsilon> x \\<Longrightarrow>\n    X->including\\<^sub>S\\<^sub>e\\<^sub>t(x)->size\\<^sub>S\\<^sub>e\\<^sub>t()\n     \\<tau> =\n    (if \\<delta> X and\n        \\<upsilon> x then X->size\\<^sub>S\\<^sub>e\\<^sub>t() +\\<^sub>i\\<^sub>n\\<^sub>t\n                          if X->includes\\<^sub>S\\<^sub>e\\<^sub>t(x) then \\<zero> else \\<one> endif else invalid endif)\n     \\<tau>", "apply(rule includes_notin, simp, simp)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>\\<tau> |\\<noteq> X->includes\\<^sub>S\\<^sub>e\\<^sub>t(x);\n     (\\<delta> X) \\<tau> = true \\<tau> \\<and>\n     (\\<upsilon> x) \\<tau> = true \\<tau>;\n     card\n      (insert (x \\<tau>)\n        \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                         (X \\<tau>)\\<rceil>\\<rceil>) =\n     Suc (card\n           \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                            (X \\<tau>)\\<rceil>\\<rceil>)\\<rbrakk>\n    \\<Longrightarrow> int (card\n                            (insert (x \\<tau>)\n                              \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n         (X \\<tau>)\\<rceil>\\<rceil>)) =\n                      int (card\n                            \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n       (X \\<tau>)\\<rceil>\\<rceil>) +\n                      1\n 2. \\<lbrakk>\\<tau> |\\<noteq> X->includes\\<^sub>S\\<^sub>e\\<^sub>t(x);\n     \\<tau> \\<Turnstile> \\<delta> X \\<and>\n     \\<tau> \\<Turnstile> \\<upsilon> x\\<rbrakk>\n    \\<Longrightarrow> ((\\<delta> X) \\<tau> = true \\<tau> \\<longrightarrow>\n                       infinite\n                        \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n   (X \\<tau>)\\<rceil>\\<rceil>) \\<longrightarrow>\n                      ((\\<delta> X and \\<upsilon> x) \\<tau> =\n                       true \\<tau> \\<and>\n                       finite\n                        \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n   (X->including\\<^sub>S\\<^sub>e\\<^sub>t(x)\n     \\<tau>)\\<rceil>\\<rceil> \\<longrightarrow>\n                       \\<lfloor>\\<lfloor>int\n    (card\n      \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                       (X->including\\<^sub>S\\<^sub>e\\<^sub>t(x)\n                         \\<tau>)\\<rceil>\\<rceil>)\\<rfloor>\\<rfloor> =\n                       ((\\<lambda>_. \\<bottom>) +\\<^sub>i\\<^sub>n\\<^sub>t\n                        (\\<lambda>_. \\<one> \\<tau>))\n                        \\<tau>) \\<and>\n                      (((\\<delta> X and \\<upsilon> x) \\<tau> =\n                        true \\<tau> \\<longrightarrow>\n                        infinite\n                         \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n    (X->including\\<^sub>S\\<^sub>e\\<^sub>t(x)\n      \\<tau>)\\<rceil>\\<rceil>) \\<longrightarrow>\n                       \\<bottom> =\n                       ((\\<lambda>_. \\<bottom>) +\\<^sub>i\\<^sub>n\\<^sub>t\n                        (\\<lambda>_. \\<one> \\<tau>))\n                        \\<tau>)\n 3. \\<tau> |\\<noteq> \\<delta> X and \\<upsilon> x \\<Longrightarrow>\n    X->including\\<^sub>S\\<^sub>e\\<^sub>t(x)->size\\<^sub>S\\<^sub>e\\<^sub>t()\n     \\<tau> =\n    (if \\<delta> X and\n        \\<upsilon> x then X->size\\<^sub>S\\<^sub>e\\<^sub>t() +\\<^sub>i\\<^sub>n\\<^sub>t\n                          if X->includes\\<^sub>S\\<^sub>e\\<^sub>t(x) then \\<zero> else \\<one> endif else invalid endif)\n     \\<tau>", "apply (metis Suc_eq_plus1 of_nat_1 of_nat_add)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<tau> |\\<noteq> X->includes\\<^sub>S\\<^sub>e\\<^sub>t(x);\n     \\<tau> \\<Turnstile> \\<delta> X \\<and>\n     \\<tau> \\<Turnstile> \\<upsilon> x\\<rbrakk>\n    \\<Longrightarrow> ((\\<delta> X) \\<tau> = true \\<tau> \\<longrightarrow>\n                       infinite\n                        \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n   (X \\<tau>)\\<rceil>\\<rceil>) \\<longrightarrow>\n                      ((\\<delta> X and \\<upsilon> x) \\<tau> =\n                       true \\<tau> \\<and>\n                       finite\n                        \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n   (X->including\\<^sub>S\\<^sub>e\\<^sub>t(x)\n     \\<tau>)\\<rceil>\\<rceil> \\<longrightarrow>\n                       \\<lfloor>\\<lfloor>int\n    (card\n      \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                       (X->including\\<^sub>S\\<^sub>e\\<^sub>t(x)\n                         \\<tau>)\\<rceil>\\<rceil>)\\<rfloor>\\<rfloor> =\n                       ((\\<lambda>_. \\<bottom>) +\\<^sub>i\\<^sub>n\\<^sub>t\n                        (\\<lambda>_. \\<one> \\<tau>))\n                        \\<tau>) \\<and>\n                      (((\\<delta> X and \\<upsilon> x) \\<tau> =\n                        true \\<tau> \\<longrightarrow>\n                        infinite\n                         \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n    (X->including\\<^sub>S\\<^sub>e\\<^sub>t(x)\n      \\<tau>)\\<rceil>\\<rceil>) \\<longrightarrow>\n                       \\<bottom> =\n                       ((\\<lambda>_. \\<bottom>) +\\<^sub>i\\<^sub>n\\<^sub>t\n                        (\\<lambda>_. \\<one> \\<tau>))\n                        \\<tau>)\n 2. \\<tau> |\\<noteq> \\<delta> X and \\<upsilon> x \\<Longrightarrow>\n    X->including\\<^sub>S\\<^sub>e\\<^sub>t(x)->size\\<^sub>S\\<^sub>e\\<^sub>t()\n     \\<tau> =\n    (if \\<delta> X and\n        \\<upsilon> x then X->size\\<^sub>S\\<^sub>e\\<^sub>t() +\\<^sub>i\\<^sub>n\\<^sub>t\n                          if X->includes\\<^sub>S\\<^sub>e\\<^sub>t(x) then \\<zero> else \\<one> endif else invalid endif)\n     \\<tau>", "apply(subst (1 2) m[of \\<tau>], simp only:   OclAdd\\<^sub>I\\<^sub>n\\<^sub>t\\<^sub>e\\<^sub>g\\<^sub>e\\<^sub>r.cp0[symmetric],simp, simp add:invalid_def)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<tau> |\\<noteq> X->includes\\<^sub>S\\<^sub>e\\<^sub>t(x);\n     \\<tau> \\<Turnstile> \\<delta> X \\<and>\n     \\<tau> \\<Turnstile> \\<upsilon> x\\<rbrakk>\n    \\<Longrightarrow> ((\\<delta> X) \\<tau> = true \\<tau> \\<longrightarrow>\n                       infinite\n                        \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n   (X \\<tau>)\\<rceil>\\<rceil>) \\<longrightarrow>\n                      (\\<delta> X and \\<upsilon> x) \\<tau> =\n                      true \\<tau> \\<and>\n                      finite\n                       \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n  (X->including\\<^sub>S\\<^sub>e\\<^sub>t(x)\n    \\<tau>)\\<rceil>\\<rceil> \\<longrightarrow>\n                      \\<lfloor>\\<lfloor>int\n   (card\n     \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                      (X->including\\<^sub>S\\<^sub>e\\<^sub>t(x)\n                        \\<tau>)\\<rceil>\\<rceil>)\\<rfloor>\\<rfloor> =\n                      \\<bottom>\n 2. \\<tau> |\\<noteq> \\<delta> X and \\<upsilon> x \\<Longrightarrow>\n    X->including\\<^sub>S\\<^sub>e\\<^sub>t(x)->size\\<^sub>S\\<^sub>e\\<^sub>t()\n     \\<tau> =\n    (if \\<delta> X and\n        \\<upsilon> x then X->size\\<^sub>S\\<^sub>e\\<^sub>t() +\\<^sub>i\\<^sub>n\\<^sub>t\n                          if X->includes\\<^sub>S\\<^sub>e\\<^sub>t(x) then \\<zero> else \\<one> endif else invalid endif)\n     \\<tau>", "apply(subst OclIncluding_finite_rep_set, fast+, simp add: OclValid_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<tau> |\\<noteq> \\<delta> X and \\<upsilon> x \\<Longrightarrow>\n    X->including\\<^sub>S\\<^sub>e\\<^sub>t(x)->size\\<^sub>S\\<^sub>e\\<^sub>t()\n     \\<tau> =\n    (if \\<delta> X and\n        \\<upsilon> x then X->size\\<^sub>S\\<^sub>e\\<^sub>t() +\\<^sub>i\\<^sub>n\\<^sub>t\n                          if X->includes\\<^sub>S\\<^sub>e\\<^sub>t(x) then \\<zero> else \\<one> endif else invalid endif)\n     \\<tau>", "(* *)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<tau> |\\<noteq> \\<delta> X and \\<upsilon> x \\<Longrightarrow>\n    X->including\\<^sub>S\\<^sub>e\\<^sub>t(x)->size\\<^sub>S\\<^sub>e\\<^sub>t()\n     \\<tau> =\n    (if \\<delta> X and\n        \\<upsilon> x then X->size\\<^sub>S\\<^sub>e\\<^sub>t() +\\<^sub>i\\<^sub>n\\<^sub>t\n                          if X->includes\\<^sub>S\\<^sub>e\\<^sub>t(x) then \\<zero> else \\<one> endif else invalid endif)\n     \\<tau>", "apply(subst OclIf_false', metis (hide_lams, no_types) defined6 foundation1 foundation9\n                                                         OclExcluding_valid_args_valid'')"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<tau> |\\<noteq> \\<delta> X and \\<upsilon> x \\<Longrightarrow>\n    X->including\\<^sub>S\\<^sub>e\\<^sub>t(x)->size\\<^sub>S\\<^sub>e\\<^sub>t()\n     \\<tau> =\n    invalid \\<tau>", "by (metis cp_OclSize foundation18' OclIncluding_valid_args_valid'' invalid_def OclSize_invalid)"], ["proof (state)\nthis:\n  X->including\\<^sub>S\\<^sub>e\\<^sub>t(x)->size\\<^sub>S\\<^sub>e\\<^sub>t()\n   \\<tau> =\n  (if \\<delta> X and\n      \\<upsilon> x then X->size\\<^sub>S\\<^sub>e\\<^sub>t() +\\<^sub>i\\<^sub>n\\<^sub>t\n                        if X->includes\\<^sub>S\\<^sub>e\\<^sub>t(x) then \\<zero> else \\<one> endif else invalid endif)\n   \\<tau>\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  X->including\\<^sub>S\\<^sub>e\\<^sub>t(x)->size\\<^sub>S\\<^sub>e\\<^sub>t() =\n  (if \\<delta> X and\n      \\<upsilon> x then X->size\\<^sub>S\\<^sub>e\\<^sub>t() +\\<^sub>i\\<^sub>n\\<^sub>t\n                        if X->includes\\<^sub>S\\<^sub>e\\<^sub>t(x) then \\<zero> else \\<one> endif else invalid endif)\n\ngoal:\nNo subgoals!", "qed"], ["", "subsubsection\\<open>Execution Rules on IsEmpty\\<close>"], ["", "lemma [simp,code_unfold]: \"Set{}->isEmpty\\<^sub>S\\<^sub>e\\<^sub>t() = true\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Set{}->isEmpty\\<^sub>S\\<^sub>e\\<^sub>t() = true", "by(simp add: OclIsEmpty_def)"], ["", "lemma OclIsEmpty_including [simp]:\nassumes X_def: \"\\<tau> \\<Turnstile> \\<delta> X\"\n    and X_finite: \"finite \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e (X \\<tau>)\\<rceil>\\<rceil>\"\n    and a_val: \"\\<tau> \\<Turnstile> \\<upsilon> a\"\nshows \"X->including\\<^sub>S\\<^sub>e\\<^sub>t(a)->isEmpty\\<^sub>S\\<^sub>e\\<^sub>t() \\<tau> = false \\<tau>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. X->including\\<^sub>S\\<^sub>e\\<^sub>t(a)->isEmpty\\<^sub>S\\<^sub>e\\<^sub>t()\n     \\<tau> =\n    false \\<tau>", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. X->including\\<^sub>S\\<^sub>e\\<^sub>t(a)->isEmpty\\<^sub>S\\<^sub>e\\<^sub>t()\n     \\<tau> =\n    false \\<tau>", "have A1 : \"\\<And>\\<tau> X. X \\<tau> = true \\<tau> \\<or> X \\<tau> = false \\<tau> \\<Longrightarrow> (X and not X) \\<tau> = false \\<tau>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<tau> X.\n       X \\<tau> = true \\<tau> \\<or>\n       X \\<tau> = false \\<tau> \\<Longrightarrow>\n       (X and not X) \\<tau> = false \\<tau>", "by (metis (no_types) OclAnd_false1 OclAnd_idem OclImplies_def OclNot3 OclNot_not OclOr_false1\n                      cp_OclAnd cp_OclNot deMorgan1 deMorgan2)"], ["proof (state)\nthis:\n  ?X ?\\<tau> = true ?\\<tau> \\<or>\n  ?X ?\\<tau> = false ?\\<tau> \\<Longrightarrow>\n  (?X and not ?X) ?\\<tau> = false ?\\<tau>\n\ngoal (1 subgoal):\n 1. X->including\\<^sub>S\\<^sub>e\\<^sub>t(a)->isEmpty\\<^sub>S\\<^sub>e\\<^sub>t()\n     \\<tau> =\n    false \\<tau>", "have defined_inject_true : \"\\<And>\\<tau> P. (\\<delta> P) \\<tau> \\<noteq> true \\<tau> \\<Longrightarrow> (\\<delta> P) \\<tau> = false \\<tau>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<tau> P.\n       (\\<delta> P) \\<tau> \\<noteq> true \\<tau> \\<Longrightarrow>\n       (\\<delta> P) \\<tau> = false \\<tau>", "apply(simp add: defined_def true_def false_def bot_fun_def bot_option_def\n                      null_fun_def null_option_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<tau> P.\n       (if P \\<tau> = \\<bottom> \\<or> P \\<tau> = null then false \\<tau>\n        else true \\<tau>) \\<noteq>\n       \\<lfloor>\\<lfloor>True\\<rfloor>\\<rfloor> \\<Longrightarrow>\n       P \\<tau> = \\<bottom> \\<or> P \\<tau> = null", "by (case_tac \" P \\<tau> = \\<bottom> \\<or> P \\<tau> = null\", simp_all add: true_def)"], ["proof (state)\nthis:\n  (\\<delta> ?P1) ?\\<tau>1 \\<noteq> true ?\\<tau>1 \\<Longrightarrow>\n  (\\<delta> ?P1) ?\\<tau>1 = false ?\\<tau>1\n\ngoal (1 subgoal):\n 1. X->including\\<^sub>S\\<^sub>e\\<^sub>t(a)->isEmpty\\<^sub>S\\<^sub>e\\<^sub>t()\n     \\<tau> =\n    false \\<tau>", "have B : \"\\<And>X \\<tau>. \\<tau> \\<Turnstile> \\<upsilon> X \\<Longrightarrow> X \\<tau> \\<noteq> \\<zero> \\<tau> \\<Longrightarrow> (X \\<doteq> \\<zero>) \\<tau> = false \\<tau>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>X \\<tau>.\n       \\<lbrakk>\\<tau> \\<Turnstile> \\<upsilon> X;\n        X \\<tau> \\<noteq> \\<zero> \\<tau>\\<rbrakk>\n       \\<Longrightarrow> (X \\<doteq> \\<zero>) \\<tau> = false \\<tau>", "apply(simp add: foundation22[symmetric] foundation14 foundation9)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>X \\<tau>.\n       \\<lbrakk>\\<tau> \\<Turnstile> \\<upsilon> X;\n        \\<tau> |\\<noteq> X \\<triangleq> \\<zero>\\<rbrakk>\n       \\<Longrightarrow> \\<tau> |\\<noteq> X \\<doteq> \\<zero>", "apply(erule StrongEq_L_subst4_rev[THEN iffD2, OF StrictRefEq\\<^sub>I\\<^sub>n\\<^sub>t\\<^sub>e\\<^sub>g\\<^sub>e\\<^sub>r.StrictRefEq_vs_StrongEq])"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>X \\<tau>.\n       \\<tau> |\\<noteq> X \\<triangleq> \\<zero> \\<Longrightarrow>\n       \\<tau> \\<Turnstile> \\<upsilon> \\<zero>\n 2. \\<And>X \\<tau>.\n       \\<tau> |\\<noteq> X \\<triangleq> \\<zero> \\<Longrightarrow>\n       cp (\\<lambda>a. a)\n 3. \\<And>X \\<tau>.\n       \\<tau> |\\<noteq> X \\<triangleq> \\<zero> \\<Longrightarrow>\n       \\<tau> |\\<noteq> X \\<triangleq> \\<zero>", "by(simp_all)"], ["proof (state)\nthis:\n  \\<lbrakk>?\\<tau>2 \\<Turnstile> \\<upsilon> ?X2;\n   ?X2 ?\\<tau>2 \\<noteq> \\<zero> ?\\<tau>2\\<rbrakk>\n  \\<Longrightarrow> (?X2 \\<doteq> \\<zero>) ?\\<tau>2 = false ?\\<tau>2\n\ngoal (1 subgoal):\n 1. X->including\\<^sub>S\\<^sub>e\\<^sub>t(a)->isEmpty\\<^sub>S\\<^sub>e\\<^sub>t()\n     \\<tau> =\n    false \\<tau>", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. X->including\\<^sub>S\\<^sub>e\\<^sub>t(a)->isEmpty\\<^sub>S\\<^sub>e\\<^sub>t()\n     \\<tau> =\n    false \\<tau>", "apply(simp add: OclIsEmpty_def del: OclSize_including_exec)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<delta> X and \\<upsilon> a and not (\\<delta> X and \\<upsilon> a) or\n     X->including\\<^sub>S\\<^sub>e\\<^sub>t(a)->size\\<^sub>S\\<^sub>e\\<^sub>t() \\<doteq>\n     \\<zero>)\n     \\<tau> =\n    false \\<tau>", "apply(subst cp_OclOr, subst A1)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>_.\n       (\\<delta> X and \\<upsilon> a) \\<tau> = true \\<tau> \\<or>\n       (\\<delta> X and \\<upsilon> a) \\<tau> = false \\<tau>\n 2. ((\\<lambda>_. false \\<tau>) or\n     (\\<lambda>_.\n         (X->including\\<^sub>S\\<^sub>e\\<^sub>t(a)->size\\<^sub>S\\<^sub>e\\<^sub>t() \\<doteq>\n          \\<zero>)\n          \\<tau>))\n     \\<tau> =\n    false \\<tau>", "apply (metis OclExcludes.def_homo defined_inject_true)"], ["proof (prove)\ngoal (1 subgoal):\n 1. ((\\<lambda>_. false \\<tau>) or\n     (\\<lambda>_.\n         (X->including\\<^sub>S\\<^sub>e\\<^sub>t(a)->size\\<^sub>S\\<^sub>e\\<^sub>t() \\<doteq>\n          \\<zero>)\n          \\<tau>))\n     \\<tau> =\n    false \\<tau>", "apply(simp add: cp_OclOr[symmetric] del: OclSize_including_exec)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (X->including\\<^sub>S\\<^sub>e\\<^sub>t(a)->size\\<^sub>S\\<^sub>e\\<^sub>t() \\<doteq>\n     \\<zero>)\n     \\<tau> =\n    false \\<tau>", "apply(rule B,\n        rule foundation20,\n        metis OclIncluding.def_homo OclIncluding_finite_rep_set X_def X_finite a_val foundation10' size_defined')"], ["proof (prove)\ngoal (1 subgoal):\n 1. X->including\\<^sub>S\\<^sub>e\\<^sub>t(a)->size\\<^sub>S\\<^sub>e\\<^sub>t()\n     \\<tau> \\<noteq>\n    \\<zero> \\<tau>", "apply(simp add: OclSize_def OclIncluding_finite_rep_set[OF X_def a_val] X_finite OclInt0_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. ((\\<delta> X and \\<upsilon> a) \\<tau> = true \\<tau> \\<longrightarrow>\n     \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                      (X->including\\<^sub>S\\<^sub>e\\<^sub>t(a)\n                        \\<tau>)\\<rceil>\\<rceil> \\<noteq>\n     {}) \\<and>\n    ((\\<delta> X and \\<upsilon> a) \\<tau> \\<noteq>\n     true \\<tau> \\<longrightarrow>\n     \\<bottom> \\<noteq> \\<lfloor>\\<lfloor>0\\<rfloor>\\<rfloor>)", "by (metis OclValid_def X_def a_val foundation10 foundation6\n           OclIncluding_notempty_rep_set[OF X_def a_val])"], ["proof (state)\nthis:\n  X->including\\<^sub>S\\<^sub>e\\<^sub>t(a)->isEmpty\\<^sub>S\\<^sub>e\\<^sub>t()\n   \\<tau> =\n  false \\<tau>\n\ngoal:\nNo subgoals!", "qed"], ["", "subsubsection\\<open>Execution Rules on NotEmpty\\<close>"], ["", "lemma [simp,code_unfold]: \"Set{}->notEmpty\\<^sub>S\\<^sub>e\\<^sub>t() = false\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Set{}->notEmpty\\<^sub>S\\<^sub>e\\<^sub>t() = false", "by(simp add: OclNotEmpty_def)"], ["", "lemma OclNotEmpty_including [simp,code_unfold]:\nassumes X_def: \"\\<tau> \\<Turnstile> \\<delta> X\"\n    and X_finite: \"finite \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e (X \\<tau>)\\<rceil>\\<rceil>\"\n    and a_val: \"\\<tau> \\<Turnstile> \\<upsilon> a\"\nshows \"X->including\\<^sub>S\\<^sub>e\\<^sub>t(a)->notEmpty\\<^sub>S\\<^sub>e\\<^sub>t() \\<tau> = true \\<tau>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. X->including\\<^sub>S\\<^sub>e\\<^sub>t(a)->notEmpty\\<^sub>S\\<^sub>e\\<^sub>t()\n     \\<tau> =\n    true \\<tau>", "apply(simp add: OclNotEmpty_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. not X->including\\<^sub>S\\<^sub>e\\<^sub>t(a)->isEmpty\\<^sub>S\\<^sub>e\\<^sub>t()\n     \\<tau> =\n    true \\<tau>", "apply(subst cp_OclNot, subst OclIsEmpty_including, simp_all add: assms)"], ["proof (prove)\ngoal (1 subgoal):\n 1. not (\\<lambda>_. false \\<tau>) \\<tau> = true \\<tau>", "by (metis OclNot4 cp_OclNot)"], ["", "subsubsection\\<open>Execution Rules on Any\\<close>"], ["", "lemma [simp,code_unfold]: \"Set{}->any\\<^sub>S\\<^sub>e\\<^sub>t() = null\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Set{}->any\\<^sub>S\\<^sub>e\\<^sub>t() = null", "by(rule ext, simp add: OclANY_def, simp add: false_def true_def)"], ["", "lemma OclANY_singleton_exec[simp,code_unfold]:\n      \"(Set{}->including\\<^sub>S\\<^sub>e\\<^sub>t(a))->any\\<^sub>S\\<^sub>e\\<^sub>t() = a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Set{a}->any\\<^sub>S\\<^sub>e\\<^sub>t() = a", "apply(rule ext, rename_tac \\<tau>, simp add: mtSet_def OclANY_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<tau>.\n       ((\\<delta> (\\<lambda>\\<tau>.\n                      Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                       \\<lfloor>\\<lfloor>{}\\<rfloor>\\<rfloor>) and\n         \\<upsilon> a and\n         \\<lambda>\\<tau>.\n            Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n             \\<lfloor>\\<lfloor>{}\\<rfloor>\\<rfloor>->including\\<^sub>S\\<^sub>e\\<^sub>t(a)->notEmpty\\<^sub>S\\<^sub>e\\<^sub>t())\n         \\<tau> =\n        true \\<tau> \\<longrightarrow>\n        ((\\<delta> (\\<lambda>\\<tau>.\n                       Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                        \\<lfloor>\\<lfloor>{}\\<rfloor>\\<rfloor>) and\n          \\<upsilon> a)\n          \\<tau> =\n         true \\<tau> \\<longrightarrow>\n         (SOME y.\n             y \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n(\\<lambda>\\<tau>.\n    Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n     \\<lfloor>\\<lfloor>{}\\<rfloor>\\<rfloor>->including\\<^sub>S\\<^sub>e\\<^sub>t(a)\n  \\<tau>)\\<rceil>\\<rceil>) =\n         a \\<tau>) \\<and>\n        ((\\<delta> (\\<lambda>\\<tau>.\n                       Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                        \\<lfloor>\\<lfloor>{}\\<rfloor>\\<rfloor>) and\n          \\<upsilon> a)\n          \\<tau> \\<noteq>\n         true \\<tau> \\<longrightarrow>\n         \\<bottom> = a \\<tau>)) \\<and>\n       ((\\<delta> (\\<lambda>\\<tau>.\n                      Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                       \\<lfloor>\\<lfloor>{}\\<rfloor>\\<rfloor>) and\n         \\<upsilon> a and\n         \\<lambda>\\<tau>.\n            Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n             \\<lfloor>\\<lfloor>{}\\<rfloor>\\<rfloor>->including\\<^sub>S\\<^sub>e\\<^sub>t(a)->notEmpty\\<^sub>S\\<^sub>e\\<^sub>t())\n         \\<tau> \\<noteq>\n        true \\<tau> \\<longrightarrow>\n        ((\\<delta> (\\<lambda>\\<tau>.\n                       Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                        \\<lfloor>\\<lfloor>{}\\<rfloor>\\<rfloor>) and\n          \\<upsilon> a)\n          \\<tau> =\n         true \\<tau> \\<longrightarrow>\n         null \\<tau> = a \\<tau>) \\<and>\n        ((\\<delta> (\\<lambda>\\<tau>.\n                       Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                        \\<lfloor>\\<lfloor>{}\\<rfloor>\\<rfloor>) and\n          \\<upsilon> a)\n          \\<tau> \\<noteq>\n         true \\<tau> \\<longrightarrow>\n         \\<bottom> = a \\<tau>))", "apply(case_tac \"\\<tau> \\<Turnstile> \\<upsilon> a\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>\\<tau>.\n       \\<tau> \\<Turnstile> \\<upsilon> a \\<Longrightarrow>\n       ((\\<delta> (\\<lambda>\\<tau>.\n                      Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                       \\<lfloor>\\<lfloor>{}\\<rfloor>\\<rfloor>) and\n         \\<upsilon> a and\n         \\<lambda>\\<tau>.\n            Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n             \\<lfloor>\\<lfloor>{}\\<rfloor>\\<rfloor>->including\\<^sub>S\\<^sub>e\\<^sub>t(a)->notEmpty\\<^sub>S\\<^sub>e\\<^sub>t())\n         \\<tau> =\n        true \\<tau> \\<longrightarrow>\n        ((\\<delta> (\\<lambda>\\<tau>.\n                       Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                        \\<lfloor>\\<lfloor>{}\\<rfloor>\\<rfloor>) and\n          \\<upsilon> a)\n          \\<tau> =\n         true \\<tau> \\<longrightarrow>\n         (SOME y.\n             y \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n(\\<lambda>\\<tau>.\n    Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n     \\<lfloor>\\<lfloor>{}\\<rfloor>\\<rfloor>->including\\<^sub>S\\<^sub>e\\<^sub>t(a)\n  \\<tau>)\\<rceil>\\<rceil>) =\n         a \\<tau>) \\<and>\n        ((\\<delta> (\\<lambda>\\<tau>.\n                       Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                        \\<lfloor>\\<lfloor>{}\\<rfloor>\\<rfloor>) and\n          \\<upsilon> a)\n          \\<tau> \\<noteq>\n         true \\<tau> \\<longrightarrow>\n         \\<bottom> = a \\<tau>)) \\<and>\n       ((\\<delta> (\\<lambda>\\<tau>.\n                      Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                       \\<lfloor>\\<lfloor>{}\\<rfloor>\\<rfloor>) and\n         \\<upsilon> a and\n         \\<lambda>\\<tau>.\n            Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n             \\<lfloor>\\<lfloor>{}\\<rfloor>\\<rfloor>->including\\<^sub>S\\<^sub>e\\<^sub>t(a)->notEmpty\\<^sub>S\\<^sub>e\\<^sub>t())\n         \\<tau> \\<noteq>\n        true \\<tau> \\<longrightarrow>\n        ((\\<delta> (\\<lambda>\\<tau>.\n                       Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                        \\<lfloor>\\<lfloor>{}\\<rfloor>\\<rfloor>) and\n          \\<upsilon> a)\n          \\<tau> =\n         true \\<tau> \\<longrightarrow>\n         null \\<tau> = a \\<tau>) \\<and>\n        ((\\<delta> (\\<lambda>\\<tau>.\n                       Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                        \\<lfloor>\\<lfloor>{}\\<rfloor>\\<rfloor>) and\n          \\<upsilon> a)\n          \\<tau> \\<noteq>\n         true \\<tau> \\<longrightarrow>\n         \\<bottom> = a \\<tau>))\n 2. \\<And>\\<tau>.\n       \\<tau> |\\<noteq> \\<upsilon> a \\<Longrightarrow>\n       ((\\<delta> (\\<lambda>\\<tau>.\n                      Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                       \\<lfloor>\\<lfloor>{}\\<rfloor>\\<rfloor>) and\n         \\<upsilon> a and\n         \\<lambda>\\<tau>.\n            Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n             \\<lfloor>\\<lfloor>{}\\<rfloor>\\<rfloor>->including\\<^sub>S\\<^sub>e\\<^sub>t(a)->notEmpty\\<^sub>S\\<^sub>e\\<^sub>t())\n         \\<tau> =\n        true \\<tau> \\<longrightarrow>\n        ((\\<delta> (\\<lambda>\\<tau>.\n                       Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                        \\<lfloor>\\<lfloor>{}\\<rfloor>\\<rfloor>) and\n          \\<upsilon> a)\n          \\<tau> =\n         true \\<tau> \\<longrightarrow>\n         (SOME y.\n             y \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n(\\<lambda>\\<tau>.\n    Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n     \\<lfloor>\\<lfloor>{}\\<rfloor>\\<rfloor>->including\\<^sub>S\\<^sub>e\\<^sub>t(a)\n  \\<tau>)\\<rceil>\\<rceil>) =\n         a \\<tau>) \\<and>\n        ((\\<delta> (\\<lambda>\\<tau>.\n                       Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                        \\<lfloor>\\<lfloor>{}\\<rfloor>\\<rfloor>) and\n          \\<upsilon> a)\n          \\<tau> \\<noteq>\n         true \\<tau> \\<longrightarrow>\n         \\<bottom> = a \\<tau>)) \\<and>\n       ((\\<delta> (\\<lambda>\\<tau>.\n                      Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                       \\<lfloor>\\<lfloor>{}\\<rfloor>\\<rfloor>) and\n         \\<upsilon> a and\n         \\<lambda>\\<tau>.\n            Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n             \\<lfloor>\\<lfloor>{}\\<rfloor>\\<rfloor>->including\\<^sub>S\\<^sub>e\\<^sub>t(a)->notEmpty\\<^sub>S\\<^sub>e\\<^sub>t())\n         \\<tau> \\<noteq>\n        true \\<tau> \\<longrightarrow>\n        ((\\<delta> (\\<lambda>\\<tau>.\n                       Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                        \\<lfloor>\\<lfloor>{}\\<rfloor>\\<rfloor>) and\n          \\<upsilon> a)\n          \\<tau> =\n         true \\<tau> \\<longrightarrow>\n         null \\<tau> = a \\<tau>) \\<and>\n        ((\\<delta> (\\<lambda>\\<tau>.\n                       Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                        \\<lfloor>\\<lfloor>{}\\<rfloor>\\<rfloor>) and\n          \\<upsilon> a)\n          \\<tau> \\<noteq>\n         true \\<tau> \\<longrightarrow>\n         \\<bottom> = a \\<tau>))", "apply(simp add: OclValid_def mtSet_defined[simplified mtSet_def]\n                  mtSet_valid[simplified mtSet_def] mtSet_rep_set[simplified mtSet_def])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>\\<tau>.\n       (\\<upsilon> a) \\<tau> = true \\<tau> \\<Longrightarrow>\n       ((\\<upsilon> a and\n         \\<lambda>\\<tau>.\n            Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n             \\<lfloor>\\<lfloor>{}\\<rfloor>\\<rfloor>->including\\<^sub>S\\<^sub>e\\<^sub>t(a)->notEmpty\\<^sub>S\\<^sub>e\\<^sub>t())\n         \\<tau> =\n        true \\<tau> \\<longrightarrow>\n        (SOME y.\n            y \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                     (\\<lambda>\\<tau>.\n   Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n    \\<lfloor>\\<lfloor>{}\\<rfloor>\\<rfloor>->including\\<^sub>S\\<^sub>e\\<^sub>t(a)\n \\<tau>)\\<rceil>\\<rceil>) =\n        a \\<tau>) \\<and>\n       ((\\<upsilon> a and\n         \\<lambda>\\<tau>.\n            Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n             \\<lfloor>\\<lfloor>{}\\<rfloor>\\<rfloor>->including\\<^sub>S\\<^sub>e\\<^sub>t(a)->notEmpty\\<^sub>S\\<^sub>e\\<^sub>t())\n         \\<tau> \\<noteq>\n        true \\<tau> \\<longrightarrow>\n        null \\<tau> = a \\<tau>)\n 2. \\<And>\\<tau>.\n       \\<tau> |\\<noteq> \\<upsilon> a \\<Longrightarrow>\n       ((\\<delta> (\\<lambda>\\<tau>.\n                      Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                       \\<lfloor>\\<lfloor>{}\\<rfloor>\\<rfloor>) and\n         \\<upsilon> a and\n         \\<lambda>\\<tau>.\n            Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n             \\<lfloor>\\<lfloor>{}\\<rfloor>\\<rfloor>->including\\<^sub>S\\<^sub>e\\<^sub>t(a)->notEmpty\\<^sub>S\\<^sub>e\\<^sub>t())\n         \\<tau> =\n        true \\<tau> \\<longrightarrow>\n        ((\\<delta> (\\<lambda>\\<tau>.\n                       Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                        \\<lfloor>\\<lfloor>{}\\<rfloor>\\<rfloor>) and\n          \\<upsilon> a)\n          \\<tau> =\n         true \\<tau> \\<longrightarrow>\n         (SOME y.\n             y \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n(\\<lambda>\\<tau>.\n    Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n     \\<lfloor>\\<lfloor>{}\\<rfloor>\\<rfloor>->including\\<^sub>S\\<^sub>e\\<^sub>t(a)\n  \\<tau>)\\<rceil>\\<rceil>) =\n         a \\<tau>) \\<and>\n        ((\\<delta> (\\<lambda>\\<tau>.\n                       Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                        \\<lfloor>\\<lfloor>{}\\<rfloor>\\<rfloor>) and\n          \\<upsilon> a)\n          \\<tau> \\<noteq>\n         true \\<tau> \\<longrightarrow>\n         \\<bottom> = a \\<tau>)) \\<and>\n       ((\\<delta> (\\<lambda>\\<tau>.\n                      Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                       \\<lfloor>\\<lfloor>{}\\<rfloor>\\<rfloor>) and\n         \\<upsilon> a and\n         \\<lambda>\\<tau>.\n            Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n             \\<lfloor>\\<lfloor>{}\\<rfloor>\\<rfloor>->including\\<^sub>S\\<^sub>e\\<^sub>t(a)->notEmpty\\<^sub>S\\<^sub>e\\<^sub>t())\n         \\<tau> \\<noteq>\n        true \\<tau> \\<longrightarrow>\n        ((\\<delta> (\\<lambda>\\<tau>.\n                       Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                        \\<lfloor>\\<lfloor>{}\\<rfloor>\\<rfloor>) and\n          \\<upsilon> a)\n          \\<tau> =\n         true \\<tau> \\<longrightarrow>\n         null \\<tau> = a \\<tau>) \\<and>\n        ((\\<delta> (\\<lambda>\\<tau>.\n                       Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                        \\<lfloor>\\<lfloor>{}\\<rfloor>\\<rfloor>) and\n          \\<upsilon> a)\n          \\<tau> \\<noteq>\n         true \\<tau> \\<longrightarrow>\n         \\<bottom> = a \\<tau>))", "apply(subst (1 2) cp_OclAnd,\n        subst (1 2) OclNotEmpty_including[where X = \"Set{}\", simplified mtSet_def])"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>\\<tau> _.\n       (\\<upsilon> a) \\<tau> = true \\<tau> \\<Longrightarrow>\n       \\<tau>\n        \\<Turnstile> \\<delta> (\\<lambda>\\<tau>.\n                                  Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                   \\<lfloor>\\<lfloor>{}\\<rfloor>\\<rfloor>)\n 2. \\<And>\\<tau> _.\n       (\\<upsilon> a) \\<tau> = true \\<tau> \\<Longrightarrow>\n       finite\n        \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                         (Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                           \\<lfloor>\\<lfloor>{}\\<rfloor>\\<rfloor>)\\<rceil>\\<rceil>\n 3. \\<And>\\<tau> _.\n       (\\<upsilon> a) \\<tau> = true \\<tau> \\<Longrightarrow>\n       \\<tau> \\<Turnstile> \\<upsilon> a\n 4. \\<And>\\<tau>.\n       (\\<upsilon> a) \\<tau> = true \\<tau> \\<Longrightarrow>\n       (((\\<lambda>_. (\\<upsilon> a) \\<tau>) and (\\<lambda>_. true \\<tau>))\n         \\<tau> =\n        true \\<tau> \\<longrightarrow>\n        (SOME y.\n            y \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                     (\\<lambda>\\<tau>.\n   Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n    \\<lfloor>\\<lfloor>{}\\<rfloor>\\<rfloor>->including\\<^sub>S\\<^sub>e\\<^sub>t(a)\n \\<tau>)\\<rceil>\\<rceil>) =\n        a \\<tau>) \\<and>\n       (((\\<lambda>_. (\\<upsilon> a) \\<tau>) and (\\<lambda>_. true \\<tau>))\n         \\<tau> \\<noteq>\n        true \\<tau> \\<longrightarrow>\n        null \\<tau> = a \\<tau>)\n 5. \\<And>\\<tau>.\n       \\<tau> |\\<noteq> \\<upsilon> a \\<Longrightarrow>\n       ((\\<delta> (\\<lambda>\\<tau>.\n                      Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                       \\<lfloor>\\<lfloor>{}\\<rfloor>\\<rfloor>) and\n         \\<upsilon> a and\n         \\<lambda>\\<tau>.\n            Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n             \\<lfloor>\\<lfloor>{}\\<rfloor>\\<rfloor>->including\\<^sub>S\\<^sub>e\\<^sub>t(a)->notEmpty\\<^sub>S\\<^sub>e\\<^sub>t())\n         \\<tau> =\n        true \\<tau> \\<longrightarrow>\n        ((\\<delta> (\\<lambda>\\<tau>.\n                       Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                        \\<lfloor>\\<lfloor>{}\\<rfloor>\\<rfloor>) and\n          \\<upsilon> a)\n          \\<tau> =\n         true \\<tau> \\<longrightarrow>\n         (SOME y.\n             y \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n(\\<lambda>\\<tau>.\n    Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n     \\<lfloor>\\<lfloor>{}\\<rfloor>\\<rfloor>->including\\<^sub>S\\<^sub>e\\<^sub>t(a)\n  \\<tau>)\\<rceil>\\<rceil>) =\n         a \\<tau>) \\<and>\n        ((\\<delta> (\\<lambda>\\<tau>.\n                       Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                        \\<lfloor>\\<lfloor>{}\\<rfloor>\\<rfloor>) and\n          \\<upsilon> a)\n          \\<tau> \\<noteq>\n         true \\<tau> \\<longrightarrow>\n         \\<bottom> = a \\<tau>)) \\<and>\n       ((\\<delta> (\\<lambda>\\<tau>.\n                      Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                       \\<lfloor>\\<lfloor>{}\\<rfloor>\\<rfloor>) and\n         \\<upsilon> a and\n         \\<lambda>\\<tau>.\n            Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n             \\<lfloor>\\<lfloor>{}\\<rfloor>\\<rfloor>->including\\<^sub>S\\<^sub>e\\<^sub>t(a)->notEmpty\\<^sub>S\\<^sub>e\\<^sub>t())\n         \\<tau> \\<noteq>\n        true \\<tau> \\<longrightarrow>\n        ((\\<delta> (\\<lambda>\\<tau>.\n                       Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                        \\<lfloor>\\<lfloor>{}\\<rfloor>\\<rfloor>) and\n          \\<upsilon> a)\n          \\<tau> =\n         true \\<tau> \\<longrightarrow>\n         null \\<tau> = a \\<tau>) \\<and>\n        ((\\<delta> (\\<lambda>\\<tau>.\n                       Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                        \\<lfloor>\\<lfloor>{}\\<rfloor>\\<rfloor>) and\n          \\<upsilon> a)\n          \\<tau> \\<noteq>\n         true \\<tau> \\<longrightarrow>\n         \\<bottom> = a \\<tau>))", "apply(simp add: mtSet_defined[simplified mtSet_def])"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>\\<tau> _.\n       (\\<upsilon> a) \\<tau> = true \\<tau> \\<Longrightarrow>\n       finite\n        \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                         (Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                           \\<lfloor>\\<lfloor>{}\\<rfloor>\\<rfloor>)\\<rceil>\\<rceil>\n 2. \\<And>\\<tau> _.\n       (\\<upsilon> a) \\<tau> = true \\<tau> \\<Longrightarrow>\n       \\<tau> \\<Turnstile> \\<upsilon> a\n 3. \\<And>\\<tau>.\n       (\\<upsilon> a) \\<tau> = true \\<tau> \\<Longrightarrow>\n       (((\\<lambda>_. (\\<upsilon> a) \\<tau>) and (\\<lambda>_. true \\<tau>))\n         \\<tau> =\n        true \\<tau> \\<longrightarrow>\n        (SOME y.\n            y \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                     (\\<lambda>\\<tau>.\n   Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n    \\<lfloor>\\<lfloor>{}\\<rfloor>\\<rfloor>->including\\<^sub>S\\<^sub>e\\<^sub>t(a)\n \\<tau>)\\<rceil>\\<rceil>) =\n        a \\<tau>) \\<and>\n       (((\\<lambda>_. (\\<upsilon> a) \\<tau>) and (\\<lambda>_. true \\<tau>))\n         \\<tau> \\<noteq>\n        true \\<tau> \\<longrightarrow>\n        null \\<tau> = a \\<tau>)\n 4. \\<And>\\<tau>.\n       \\<tau> |\\<noteq> \\<upsilon> a \\<Longrightarrow>\n       ((\\<delta> (\\<lambda>\\<tau>.\n                      Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                       \\<lfloor>\\<lfloor>{}\\<rfloor>\\<rfloor>) and\n         \\<upsilon> a and\n         \\<lambda>\\<tau>.\n            Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n             \\<lfloor>\\<lfloor>{}\\<rfloor>\\<rfloor>->including\\<^sub>S\\<^sub>e\\<^sub>t(a)->notEmpty\\<^sub>S\\<^sub>e\\<^sub>t())\n         \\<tau> =\n        true \\<tau> \\<longrightarrow>\n        ((\\<delta> (\\<lambda>\\<tau>.\n                       Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                        \\<lfloor>\\<lfloor>{}\\<rfloor>\\<rfloor>) and\n          \\<upsilon> a)\n          \\<tau> =\n         true \\<tau> \\<longrightarrow>\n         (SOME y.\n             y \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n(\\<lambda>\\<tau>.\n    Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n     \\<lfloor>\\<lfloor>{}\\<rfloor>\\<rfloor>->including\\<^sub>S\\<^sub>e\\<^sub>t(a)\n  \\<tau>)\\<rceil>\\<rceil>) =\n         a \\<tau>) \\<and>\n        ((\\<delta> (\\<lambda>\\<tau>.\n                       Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                        \\<lfloor>\\<lfloor>{}\\<rfloor>\\<rfloor>) and\n          \\<upsilon> a)\n          \\<tau> \\<noteq>\n         true \\<tau> \\<longrightarrow>\n         \\<bottom> = a \\<tau>)) \\<and>\n       ((\\<delta> (\\<lambda>\\<tau>.\n                      Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                       \\<lfloor>\\<lfloor>{}\\<rfloor>\\<rfloor>) and\n         \\<upsilon> a and\n         \\<lambda>\\<tau>.\n            Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n             \\<lfloor>\\<lfloor>{}\\<rfloor>\\<rfloor>->including\\<^sub>S\\<^sub>e\\<^sub>t(a)->notEmpty\\<^sub>S\\<^sub>e\\<^sub>t())\n         \\<tau> \\<noteq>\n        true \\<tau> \\<longrightarrow>\n        ((\\<delta> (\\<lambda>\\<tau>.\n                       Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                        \\<lfloor>\\<lfloor>{}\\<rfloor>\\<rfloor>) and\n          \\<upsilon> a)\n          \\<tau> =\n         true \\<tau> \\<longrightarrow>\n         null \\<tau> = a \\<tau>) \\<and>\n        ((\\<delta> (\\<lambda>\\<tau>.\n                       Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                        \\<lfloor>\\<lfloor>{}\\<rfloor>\\<rfloor>) and\n          \\<upsilon> a)\n          \\<tau> \\<noteq>\n         true \\<tau> \\<longrightarrow>\n         \\<bottom> = a \\<tau>))", "apply(metis (hide_lams, no_types) finite.emptyI mtSet_def mtSet_rep_set)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>\\<tau> _.\n       (\\<upsilon> a) \\<tau> = true \\<tau> \\<Longrightarrow>\n       \\<tau> \\<Turnstile> \\<upsilon> a\n 2. \\<And>\\<tau>.\n       (\\<upsilon> a) \\<tau> = true \\<tau> \\<Longrightarrow>\n       (((\\<lambda>_. (\\<upsilon> a) \\<tau>) and (\\<lambda>_. true \\<tau>))\n         \\<tau> =\n        true \\<tau> \\<longrightarrow>\n        (SOME y.\n            y \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                     (\\<lambda>\\<tau>.\n   Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n    \\<lfloor>\\<lfloor>{}\\<rfloor>\\<rfloor>->including\\<^sub>S\\<^sub>e\\<^sub>t(a)\n \\<tau>)\\<rceil>\\<rceil>) =\n        a \\<tau>) \\<and>\n       (((\\<lambda>_. (\\<upsilon> a) \\<tau>) and (\\<lambda>_. true \\<tau>))\n         \\<tau> \\<noteq>\n        true \\<tau> \\<longrightarrow>\n        null \\<tau> = a \\<tau>)\n 3. \\<And>\\<tau>.\n       \\<tau> |\\<noteq> \\<upsilon> a \\<Longrightarrow>\n       ((\\<delta> (\\<lambda>\\<tau>.\n                      Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                       \\<lfloor>\\<lfloor>{}\\<rfloor>\\<rfloor>) and\n         \\<upsilon> a and\n         \\<lambda>\\<tau>.\n            Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n             \\<lfloor>\\<lfloor>{}\\<rfloor>\\<rfloor>->including\\<^sub>S\\<^sub>e\\<^sub>t(a)->notEmpty\\<^sub>S\\<^sub>e\\<^sub>t())\n         \\<tau> =\n        true \\<tau> \\<longrightarrow>\n        ((\\<delta> (\\<lambda>\\<tau>.\n                       Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                        \\<lfloor>\\<lfloor>{}\\<rfloor>\\<rfloor>) and\n          \\<upsilon> a)\n          \\<tau> =\n         true \\<tau> \\<longrightarrow>\n         (SOME y.\n             y \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n(\\<lambda>\\<tau>.\n    Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n     \\<lfloor>\\<lfloor>{}\\<rfloor>\\<rfloor>->including\\<^sub>S\\<^sub>e\\<^sub>t(a)\n  \\<tau>)\\<rceil>\\<rceil>) =\n         a \\<tau>) \\<and>\n        ((\\<delta> (\\<lambda>\\<tau>.\n                       Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                        \\<lfloor>\\<lfloor>{}\\<rfloor>\\<rfloor>) and\n          \\<upsilon> a)\n          \\<tau> \\<noteq>\n         true \\<tau> \\<longrightarrow>\n         \\<bottom> = a \\<tau>)) \\<and>\n       ((\\<delta> (\\<lambda>\\<tau>.\n                      Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                       \\<lfloor>\\<lfloor>{}\\<rfloor>\\<rfloor>) and\n         \\<upsilon> a and\n         \\<lambda>\\<tau>.\n            Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n             \\<lfloor>\\<lfloor>{}\\<rfloor>\\<rfloor>->including\\<^sub>S\\<^sub>e\\<^sub>t(a)->notEmpty\\<^sub>S\\<^sub>e\\<^sub>t())\n         \\<tau> \\<noteq>\n        true \\<tau> \\<longrightarrow>\n        ((\\<delta> (\\<lambda>\\<tau>.\n                       Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                        \\<lfloor>\\<lfloor>{}\\<rfloor>\\<rfloor>) and\n          \\<upsilon> a)\n          \\<tau> =\n         true \\<tau> \\<longrightarrow>\n         null \\<tau> = a \\<tau>) \\<and>\n        ((\\<delta> (\\<lambda>\\<tau>.\n                       Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                        \\<lfloor>\\<lfloor>{}\\<rfloor>\\<rfloor>) and\n          \\<upsilon> a)\n          \\<tau> \\<noteq>\n         true \\<tau> \\<longrightarrow>\n         \\<bottom> = a \\<tau>))", "apply(simp add: OclValid_def)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>\\<tau>.\n       (\\<upsilon> a) \\<tau> = true \\<tau> \\<Longrightarrow>\n       (((\\<lambda>_. (\\<upsilon> a) \\<tau>) and (\\<lambda>_. true \\<tau>))\n         \\<tau> =\n        true \\<tau> \\<longrightarrow>\n        (SOME y.\n            y \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                     (\\<lambda>\\<tau>.\n   Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n    \\<lfloor>\\<lfloor>{}\\<rfloor>\\<rfloor>->including\\<^sub>S\\<^sub>e\\<^sub>t(a)\n \\<tau>)\\<rceil>\\<rceil>) =\n        a \\<tau>) \\<and>\n       (((\\<lambda>_. (\\<upsilon> a) \\<tau>) and (\\<lambda>_. true \\<tau>))\n         \\<tau> \\<noteq>\n        true \\<tau> \\<longrightarrow>\n        null \\<tau> = a \\<tau>)\n 2. \\<And>\\<tau>.\n       \\<tau> |\\<noteq> \\<upsilon> a \\<Longrightarrow>\n       ((\\<delta> (\\<lambda>\\<tau>.\n                      Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                       \\<lfloor>\\<lfloor>{}\\<rfloor>\\<rfloor>) and\n         \\<upsilon> a and\n         \\<lambda>\\<tau>.\n            Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n             \\<lfloor>\\<lfloor>{}\\<rfloor>\\<rfloor>->including\\<^sub>S\\<^sub>e\\<^sub>t(a)->notEmpty\\<^sub>S\\<^sub>e\\<^sub>t())\n         \\<tau> =\n        true \\<tau> \\<longrightarrow>\n        ((\\<delta> (\\<lambda>\\<tau>.\n                       Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                        \\<lfloor>\\<lfloor>{}\\<rfloor>\\<rfloor>) and\n          \\<upsilon> a)\n          \\<tau> =\n         true \\<tau> \\<longrightarrow>\n         (SOME y.\n             y \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n(\\<lambda>\\<tau>.\n    Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n     \\<lfloor>\\<lfloor>{}\\<rfloor>\\<rfloor>->including\\<^sub>S\\<^sub>e\\<^sub>t(a)\n  \\<tau>)\\<rceil>\\<rceil>) =\n         a \\<tau>) \\<and>\n        ((\\<delta> (\\<lambda>\\<tau>.\n                       Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                        \\<lfloor>\\<lfloor>{}\\<rfloor>\\<rfloor>) and\n          \\<upsilon> a)\n          \\<tau> \\<noteq>\n         true \\<tau> \\<longrightarrow>\n         \\<bottom> = a \\<tau>)) \\<and>\n       ((\\<delta> (\\<lambda>\\<tau>.\n                      Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                       \\<lfloor>\\<lfloor>{}\\<rfloor>\\<rfloor>) and\n         \\<upsilon> a and\n         \\<lambda>\\<tau>.\n            Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n             \\<lfloor>\\<lfloor>{}\\<rfloor>\\<rfloor>->including\\<^sub>S\\<^sub>e\\<^sub>t(a)->notEmpty\\<^sub>S\\<^sub>e\\<^sub>t())\n         \\<tau> \\<noteq>\n        true \\<tau> \\<longrightarrow>\n        ((\\<delta> (\\<lambda>\\<tau>.\n                       Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                        \\<lfloor>\\<lfloor>{}\\<rfloor>\\<rfloor>) and\n          \\<upsilon> a)\n          \\<tau> =\n         true \\<tau> \\<longrightarrow>\n         null \\<tau> = a \\<tau>) \\<and>\n        ((\\<delta> (\\<lambda>\\<tau>.\n                       Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                        \\<lfloor>\\<lfloor>{}\\<rfloor>\\<rfloor>) and\n          \\<upsilon> a)\n          \\<tau> \\<noteq>\n         true \\<tau> \\<longrightarrow>\n         \\<bottom> = a \\<tau>))", "apply(simp add: OclIncluding_def)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>\\<tau>.\n       (\\<upsilon> a) \\<tau> = true \\<tau> \\<Longrightarrow>\n       ((\\<delta> (\\<lambda>\\<tau>.\n                      Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                       \\<lfloor>\\<lfloor>{}\\<rfloor>\\<rfloor>))\n         \\<tau> =\n        true \\<tau> \\<longrightarrow>\n        (SOME y.\n            y \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                     (Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n \\<lfloor>\\<lfloor>insert (a \\<tau>)\n                    \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                     (Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n \\<lfloor>\\<lfloor>{}\\<rfloor>\\<rfloor>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>)\\<rceil>\\<rceil>) =\n        a \\<tau>) \\<and>\n       ((\\<delta> (\\<lambda>\\<tau>.\n                      Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                       \\<lfloor>\\<lfloor>{}\\<rfloor>\\<rfloor>))\n         \\<tau> \\<noteq>\n        true \\<tau> \\<longrightarrow>\n        (SOME y.\n            y \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                     (invalid \\<tau>)\\<rceil>\\<rceil>) =\n        a \\<tau>)\n 2. \\<And>\\<tau>.\n       \\<tau> |\\<noteq> \\<upsilon> a \\<Longrightarrow>\n       ((\\<delta> (\\<lambda>\\<tau>.\n                      Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                       \\<lfloor>\\<lfloor>{}\\<rfloor>\\<rfloor>) and\n         \\<upsilon> a and\n         \\<lambda>\\<tau>.\n            Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n             \\<lfloor>\\<lfloor>{}\\<rfloor>\\<rfloor>->including\\<^sub>S\\<^sub>e\\<^sub>t(a)->notEmpty\\<^sub>S\\<^sub>e\\<^sub>t())\n         \\<tau> =\n        true \\<tau> \\<longrightarrow>\n        ((\\<delta> (\\<lambda>\\<tau>.\n                       Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                        \\<lfloor>\\<lfloor>{}\\<rfloor>\\<rfloor>) and\n          \\<upsilon> a)\n          \\<tau> =\n         true \\<tau> \\<longrightarrow>\n         (SOME y.\n             y \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n(\\<lambda>\\<tau>.\n    Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n     \\<lfloor>\\<lfloor>{}\\<rfloor>\\<rfloor>->including\\<^sub>S\\<^sub>e\\<^sub>t(a)\n  \\<tau>)\\<rceil>\\<rceil>) =\n         a \\<tau>) \\<and>\n        ((\\<delta> (\\<lambda>\\<tau>.\n                       Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                        \\<lfloor>\\<lfloor>{}\\<rfloor>\\<rfloor>) and\n          \\<upsilon> a)\n          \\<tau> \\<noteq>\n         true \\<tau> \\<longrightarrow>\n         \\<bottom> = a \\<tau>)) \\<and>\n       ((\\<delta> (\\<lambda>\\<tau>.\n                      Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                       \\<lfloor>\\<lfloor>{}\\<rfloor>\\<rfloor>) and\n         \\<upsilon> a and\n         \\<lambda>\\<tau>.\n            Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n             \\<lfloor>\\<lfloor>{}\\<rfloor>\\<rfloor>->including\\<^sub>S\\<^sub>e\\<^sub>t(a)->notEmpty\\<^sub>S\\<^sub>e\\<^sub>t())\n         \\<tau> \\<noteq>\n        true \\<tau> \\<longrightarrow>\n        ((\\<delta> (\\<lambda>\\<tau>.\n                       Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                        \\<lfloor>\\<lfloor>{}\\<rfloor>\\<rfloor>) and\n          \\<upsilon> a)\n          \\<tau> =\n         true \\<tau> \\<longrightarrow>\n         null \\<tau> = a \\<tau>) \\<and>\n        ((\\<delta> (\\<lambda>\\<tau>.\n                       Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                        \\<lfloor>\\<lfloor>{}\\<rfloor>\\<rfloor>) and\n          \\<upsilon> a)\n          \\<tau> \\<noteq>\n         true \\<tau> \\<longrightarrow>\n         \\<bottom> = a \\<tau>))", "apply(rule conjI)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>\\<tau>.\n       (\\<upsilon> a) \\<tau> = true \\<tau> \\<Longrightarrow>\n       (\\<delta> (\\<lambda>\\<tau>.\n                     Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                      \\<lfloor>\\<lfloor>{}\\<rfloor>\\<rfloor>))\n        \\<tau> =\n       true \\<tau> \\<longrightarrow>\n       (SOME y.\n           y \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                    (Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n\\<lfloor>\\<lfloor>insert (a \\<tau>)\n                   \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                    (Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n\\<lfloor>\\<lfloor>{}\\<rfloor>\\<rfloor>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>)\\<rceil>\\<rceil>) =\n       a \\<tau>\n 2. \\<And>\\<tau>.\n       (\\<upsilon> a) \\<tau> = true \\<tau> \\<Longrightarrow>\n       (\\<delta> (\\<lambda>\\<tau>.\n                     Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                      \\<lfloor>\\<lfloor>{}\\<rfloor>\\<rfloor>))\n        \\<tau> \\<noteq>\n       true \\<tau> \\<longrightarrow>\n       (SOME y.\n           y \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                    (invalid \\<tau>)\\<rceil>\\<rceil>) =\n       a \\<tau>\n 3. \\<And>\\<tau>.\n       \\<tau> |\\<noteq> \\<upsilon> a \\<Longrightarrow>\n       ((\\<delta> (\\<lambda>\\<tau>.\n                      Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                       \\<lfloor>\\<lfloor>{}\\<rfloor>\\<rfloor>) and\n         \\<upsilon> a and\n         \\<lambda>\\<tau>.\n            Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n             \\<lfloor>\\<lfloor>{}\\<rfloor>\\<rfloor>->including\\<^sub>S\\<^sub>e\\<^sub>t(a)->notEmpty\\<^sub>S\\<^sub>e\\<^sub>t())\n         \\<tau> =\n        true \\<tau> \\<longrightarrow>\n        ((\\<delta> (\\<lambda>\\<tau>.\n                       Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                        \\<lfloor>\\<lfloor>{}\\<rfloor>\\<rfloor>) and\n          \\<upsilon> a)\n          \\<tau> =\n         true \\<tau> \\<longrightarrow>\n         (SOME y.\n             y \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n(\\<lambda>\\<tau>.\n    Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n     \\<lfloor>\\<lfloor>{}\\<rfloor>\\<rfloor>->including\\<^sub>S\\<^sub>e\\<^sub>t(a)\n  \\<tau>)\\<rceil>\\<rceil>) =\n         a \\<tau>) \\<and>\n        ((\\<delta> (\\<lambda>\\<tau>.\n                       Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                        \\<lfloor>\\<lfloor>{}\\<rfloor>\\<rfloor>) and\n          \\<upsilon> a)\n          \\<tau> \\<noteq>\n         true \\<tau> \\<longrightarrow>\n         \\<bottom> = a \\<tau>)) \\<and>\n       ((\\<delta> (\\<lambda>\\<tau>.\n                      Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                       \\<lfloor>\\<lfloor>{}\\<rfloor>\\<rfloor>) and\n         \\<upsilon> a and\n         \\<lambda>\\<tau>.\n            Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n             \\<lfloor>\\<lfloor>{}\\<rfloor>\\<rfloor>->including\\<^sub>S\\<^sub>e\\<^sub>t(a)->notEmpty\\<^sub>S\\<^sub>e\\<^sub>t())\n         \\<tau> \\<noteq>\n        true \\<tau> \\<longrightarrow>\n        ((\\<delta> (\\<lambda>\\<tau>.\n                       Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                        \\<lfloor>\\<lfloor>{}\\<rfloor>\\<rfloor>) and\n          \\<upsilon> a)\n          \\<tau> =\n         true \\<tau> \\<longrightarrow>\n         null \\<tau> = a \\<tau>) \\<and>\n        ((\\<delta> (\\<lambda>\\<tau>.\n                       Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                        \\<lfloor>\\<lfloor>{}\\<rfloor>\\<rfloor>) and\n          \\<upsilon> a)\n          \\<tau> \\<noteq>\n         true \\<tau> \\<longrightarrow>\n         \\<bottom> = a \\<tau>))", "apply(subst (1 2) Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e_inverse, simp add: bot_option_def null_option_def)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>\\<tau> y.\n       (\\<upsilon> a) \\<tau> = true \\<tau> \\<Longrightarrow>\n       \\<lfloor>\\<lfloor>insert (a \\<tau>)\n                          \\<lceil>\\<lceil>\\<lfloor>\\<lfloor>{}\\<rfloor>\\<rfloor>\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>\n       \\<in> {X. X = \\<bottom> \\<or>\n                 X = null \\<or>\n                 (\\<forall>x\\<in>\\<lceil>\\<lceil>X\\<rceil>\\<rceil>.\n                     x \\<noteq> \\<bottom>)}\n 2. \\<And>\\<tau>.\n       (\\<upsilon> a) \\<tau> = true \\<tau> \\<Longrightarrow>\n       (\\<delta> (\\<lambda>\\<tau>.\n                     Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                      \\<lfloor>\\<lfloor>{}\\<rfloor>\\<rfloor>))\n        \\<tau> =\n       true \\<tau> \\<longrightarrow>\n       (SOME y.\n           y \\<in> \\<lceil>\\<lceil>\\<lfloor>\\<lfloor>insert (a \\<tau>)\n                \\<lceil>\\<lceil>\\<lfloor>\\<lfloor>{}\\<rfloor>\\<rfloor>\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>\\<rceil>\\<rceil>) =\n       a \\<tau>\n 3. \\<And>\\<tau>.\n       (\\<upsilon> a) \\<tau> = true \\<tau> \\<Longrightarrow>\n       (\\<delta> (\\<lambda>\\<tau>.\n                     Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                      \\<lfloor>\\<lfloor>{}\\<rfloor>\\<rfloor>))\n        \\<tau> \\<noteq>\n       true \\<tau> \\<longrightarrow>\n       (SOME y.\n           y \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                    (invalid \\<tau>)\\<rceil>\\<rceil>) =\n       a \\<tau>\n 4. \\<And>\\<tau>.\n       \\<tau> |\\<noteq> \\<upsilon> a \\<Longrightarrow>\n       ((\\<delta> (\\<lambda>\\<tau>.\n                      Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                       \\<lfloor>\\<lfloor>{}\\<rfloor>\\<rfloor>) and\n         \\<upsilon> a and\n         \\<lambda>\\<tau>.\n            Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n             \\<lfloor>\\<lfloor>{}\\<rfloor>\\<rfloor>->including\\<^sub>S\\<^sub>e\\<^sub>t(a)->notEmpty\\<^sub>S\\<^sub>e\\<^sub>t())\n         \\<tau> =\n        true \\<tau> \\<longrightarrow>\n        ((\\<delta> (\\<lambda>\\<tau>.\n                       Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                        \\<lfloor>\\<lfloor>{}\\<rfloor>\\<rfloor>) and\n          \\<upsilon> a)\n          \\<tau> =\n         true \\<tau> \\<longrightarrow>\n         (SOME y.\n             y \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n(\\<lambda>\\<tau>.\n    Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n     \\<lfloor>\\<lfloor>{}\\<rfloor>\\<rfloor>->including\\<^sub>S\\<^sub>e\\<^sub>t(a)\n  \\<tau>)\\<rceil>\\<rceil>) =\n         a \\<tau>) \\<and>\n        ((\\<delta> (\\<lambda>\\<tau>.\n                       Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                        \\<lfloor>\\<lfloor>{}\\<rfloor>\\<rfloor>) and\n          \\<upsilon> a)\n          \\<tau> \\<noteq>\n         true \\<tau> \\<longrightarrow>\n         \\<bottom> = a \\<tau>)) \\<and>\n       ((\\<delta> (\\<lambda>\\<tau>.\n                      Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                       \\<lfloor>\\<lfloor>{}\\<rfloor>\\<rfloor>) and\n         \\<upsilon> a and\n         \\<lambda>\\<tau>.\n            Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n             \\<lfloor>\\<lfloor>{}\\<rfloor>\\<rfloor>->including\\<^sub>S\\<^sub>e\\<^sub>t(a)->notEmpty\\<^sub>S\\<^sub>e\\<^sub>t())\n         \\<tau> \\<noteq>\n        true \\<tau> \\<longrightarrow>\n        ((\\<delta> (\\<lambda>\\<tau>.\n                       Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                        \\<lfloor>\\<lfloor>{}\\<rfloor>\\<rfloor>) and\n          \\<upsilon> a)\n          \\<tau> =\n         true \\<tau> \\<longrightarrow>\n         null \\<tau> = a \\<tau>) \\<and>\n        ((\\<delta> (\\<lambda>\\<tau>.\n                       Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                        \\<lfloor>\\<lfloor>{}\\<rfloor>\\<rfloor>) and\n          \\<upsilon> a)\n          \\<tau> \\<noteq>\n         true \\<tau> \\<longrightarrow>\n         \\<bottom> = a \\<tau>))", "apply(simp, metis OclValid_def foundation18')"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>\\<tau>.\n       (\\<upsilon> a) \\<tau> = true \\<tau> \\<Longrightarrow>\n       (\\<delta> (\\<lambda>\\<tau>.\n                     Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                      \\<lfloor>\\<lfloor>{}\\<rfloor>\\<rfloor>))\n        \\<tau> =\n       true \\<tau> \\<longrightarrow>\n       (SOME y.\n           y \\<in> \\<lceil>\\<lceil>\\<lfloor>\\<lfloor>insert (a \\<tau>)\n                \\<lceil>\\<lceil>\\<lfloor>\\<lfloor>{}\\<rfloor>\\<rfloor>\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>\\<rceil>\\<rceil>) =\n       a \\<tau>\n 2. \\<And>\\<tau>.\n       (\\<upsilon> a) \\<tau> = true \\<tau> \\<Longrightarrow>\n       (\\<delta> (\\<lambda>\\<tau>.\n                     Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                      \\<lfloor>\\<lfloor>{}\\<rfloor>\\<rfloor>))\n        \\<tau> \\<noteq>\n       true \\<tau> \\<longrightarrow>\n       (SOME y.\n           y \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                    (invalid \\<tau>)\\<rceil>\\<rceil>) =\n       a \\<tau>\n 3. \\<And>\\<tau>.\n       \\<tau> |\\<noteq> \\<upsilon> a \\<Longrightarrow>\n       ((\\<delta> (\\<lambda>\\<tau>.\n                      Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                       \\<lfloor>\\<lfloor>{}\\<rfloor>\\<rfloor>) and\n         \\<upsilon> a and\n         \\<lambda>\\<tau>.\n            Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n             \\<lfloor>\\<lfloor>{}\\<rfloor>\\<rfloor>->including\\<^sub>S\\<^sub>e\\<^sub>t(a)->notEmpty\\<^sub>S\\<^sub>e\\<^sub>t())\n         \\<tau> =\n        true \\<tau> \\<longrightarrow>\n        ((\\<delta> (\\<lambda>\\<tau>.\n                       Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                        \\<lfloor>\\<lfloor>{}\\<rfloor>\\<rfloor>) and\n          \\<upsilon> a)\n          \\<tau> =\n         true \\<tau> \\<longrightarrow>\n         (SOME y.\n             y \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n(\\<lambda>\\<tau>.\n    Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n     \\<lfloor>\\<lfloor>{}\\<rfloor>\\<rfloor>->including\\<^sub>S\\<^sub>e\\<^sub>t(a)\n  \\<tau>)\\<rceil>\\<rceil>) =\n         a \\<tau>) \\<and>\n        ((\\<delta> (\\<lambda>\\<tau>.\n                       Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                        \\<lfloor>\\<lfloor>{}\\<rfloor>\\<rfloor>) and\n          \\<upsilon> a)\n          \\<tau> \\<noteq>\n         true \\<tau> \\<longrightarrow>\n         \\<bottom> = a \\<tau>)) \\<and>\n       ((\\<delta> (\\<lambda>\\<tau>.\n                      Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                       \\<lfloor>\\<lfloor>{}\\<rfloor>\\<rfloor>) and\n         \\<upsilon> a and\n         \\<lambda>\\<tau>.\n            Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n             \\<lfloor>\\<lfloor>{}\\<rfloor>\\<rfloor>->including\\<^sub>S\\<^sub>e\\<^sub>t(a)->notEmpty\\<^sub>S\\<^sub>e\\<^sub>t())\n         \\<tau> \\<noteq>\n        true \\<tau> \\<longrightarrow>\n        ((\\<delta> (\\<lambda>\\<tau>.\n                       Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                        \\<lfloor>\\<lfloor>{}\\<rfloor>\\<rfloor>) and\n          \\<upsilon> a)\n          \\<tau> =\n         true \\<tau> \\<longrightarrow>\n         null \\<tau> = a \\<tau>) \\<and>\n        ((\\<delta> (\\<lambda>\\<tau>.\n                       Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                        \\<lfloor>\\<lfloor>{}\\<rfloor>\\<rfloor>) and\n          \\<upsilon> a)\n          \\<tau> \\<noteq>\n         true \\<tau> \\<longrightarrow>\n         \\<bottom> = a \\<tau>))", "apply(simp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>\\<tau>.\n       (\\<upsilon> a) \\<tau> = true \\<tau> \\<Longrightarrow>\n       (\\<delta> (\\<lambda>\\<tau>.\n                     Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                      \\<lfloor>\\<lfloor>{}\\<rfloor>\\<rfloor>))\n        \\<tau> \\<noteq>\n       true \\<tau> \\<longrightarrow>\n       (SOME y.\n           y \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                    (invalid \\<tau>)\\<rceil>\\<rceil>) =\n       a \\<tau>\n 2. \\<And>\\<tau>.\n       \\<tau> |\\<noteq> \\<upsilon> a \\<Longrightarrow>\n       ((\\<delta> (\\<lambda>\\<tau>.\n                      Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                       \\<lfloor>\\<lfloor>{}\\<rfloor>\\<rfloor>) and\n         \\<upsilon> a and\n         \\<lambda>\\<tau>.\n            Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n             \\<lfloor>\\<lfloor>{}\\<rfloor>\\<rfloor>->including\\<^sub>S\\<^sub>e\\<^sub>t(a)->notEmpty\\<^sub>S\\<^sub>e\\<^sub>t())\n         \\<tau> =\n        true \\<tau> \\<longrightarrow>\n        ((\\<delta> (\\<lambda>\\<tau>.\n                       Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                        \\<lfloor>\\<lfloor>{}\\<rfloor>\\<rfloor>) and\n          \\<upsilon> a)\n          \\<tau> =\n         true \\<tau> \\<longrightarrow>\n         (SOME y.\n             y \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n(\\<lambda>\\<tau>.\n    Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n     \\<lfloor>\\<lfloor>{}\\<rfloor>\\<rfloor>->including\\<^sub>S\\<^sub>e\\<^sub>t(a)\n  \\<tau>)\\<rceil>\\<rceil>) =\n         a \\<tau>) \\<and>\n        ((\\<delta> (\\<lambda>\\<tau>.\n                       Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                        \\<lfloor>\\<lfloor>{}\\<rfloor>\\<rfloor>) and\n          \\<upsilon> a)\n          \\<tau> \\<noteq>\n         true \\<tau> \\<longrightarrow>\n         \\<bottom> = a \\<tau>)) \\<and>\n       ((\\<delta> (\\<lambda>\\<tau>.\n                      Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                       \\<lfloor>\\<lfloor>{}\\<rfloor>\\<rfloor>) and\n         \\<upsilon> a and\n         \\<lambda>\\<tau>.\n            Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n             \\<lfloor>\\<lfloor>{}\\<rfloor>\\<rfloor>->including\\<^sub>S\\<^sub>e\\<^sub>t(a)->notEmpty\\<^sub>S\\<^sub>e\\<^sub>t())\n         \\<tau> \\<noteq>\n        true \\<tau> \\<longrightarrow>\n        ((\\<delta> (\\<lambda>\\<tau>.\n                       Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                        \\<lfloor>\\<lfloor>{}\\<rfloor>\\<rfloor>) and\n          \\<upsilon> a)\n          \\<tau> =\n         true \\<tau> \\<longrightarrow>\n         null \\<tau> = a \\<tau>) \\<and>\n        ((\\<delta> (\\<lambda>\\<tau>.\n                       Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                        \\<lfloor>\\<lfloor>{}\\<rfloor>\\<rfloor>) and\n          \\<upsilon> a)\n          \\<tau> \\<noteq>\n         true \\<tau> \\<longrightarrow>\n         \\<bottom> = a \\<tau>))", "apply(simp add: mtSet_defined[simplified mtSet_def])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<tau>.\n       \\<tau> |\\<noteq> \\<upsilon> a \\<Longrightarrow>\n       ((\\<delta> (\\<lambda>\\<tau>.\n                      Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                       \\<lfloor>\\<lfloor>{}\\<rfloor>\\<rfloor>) and\n         \\<upsilon> a and\n         \\<lambda>\\<tau>.\n            Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n             \\<lfloor>\\<lfloor>{}\\<rfloor>\\<rfloor>->including\\<^sub>S\\<^sub>e\\<^sub>t(a)->notEmpty\\<^sub>S\\<^sub>e\\<^sub>t())\n         \\<tau> =\n        true \\<tau> \\<longrightarrow>\n        ((\\<delta> (\\<lambda>\\<tau>.\n                       Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                        \\<lfloor>\\<lfloor>{}\\<rfloor>\\<rfloor>) and\n          \\<upsilon> a)\n          \\<tau> =\n         true \\<tau> \\<longrightarrow>\n         (SOME y.\n             y \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n(\\<lambda>\\<tau>.\n    Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n     \\<lfloor>\\<lfloor>{}\\<rfloor>\\<rfloor>->including\\<^sub>S\\<^sub>e\\<^sub>t(a)\n  \\<tau>)\\<rceil>\\<rceil>) =\n         a \\<tau>) \\<and>\n        ((\\<delta> (\\<lambda>\\<tau>.\n                       Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                        \\<lfloor>\\<lfloor>{}\\<rfloor>\\<rfloor>) and\n          \\<upsilon> a)\n          \\<tau> \\<noteq>\n         true \\<tau> \\<longrightarrow>\n         \\<bottom> = a \\<tau>)) \\<and>\n       ((\\<delta> (\\<lambda>\\<tau>.\n                      Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                       \\<lfloor>\\<lfloor>{}\\<rfloor>\\<rfloor>) and\n         \\<upsilon> a and\n         \\<lambda>\\<tau>.\n            Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n             \\<lfloor>\\<lfloor>{}\\<rfloor>\\<rfloor>->including\\<^sub>S\\<^sub>e\\<^sub>t(a)->notEmpty\\<^sub>S\\<^sub>e\\<^sub>t())\n         \\<tau> \\<noteq>\n        true \\<tau> \\<longrightarrow>\n        ((\\<delta> (\\<lambda>\\<tau>.\n                       Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                        \\<lfloor>\\<lfloor>{}\\<rfloor>\\<rfloor>) and\n          \\<upsilon> a)\n          \\<tau> =\n         true \\<tau> \\<longrightarrow>\n         null \\<tau> = a \\<tau>) \\<and>\n        ((\\<delta> (\\<lambda>\\<tau>.\n                       Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                        \\<lfloor>\\<lfloor>{}\\<rfloor>\\<rfloor>) and\n          \\<upsilon> a)\n          \\<tau> \\<noteq>\n         true \\<tau> \\<longrightarrow>\n         \\<bottom> = a \\<tau>))", "(* *)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<tau>.\n       \\<tau> |\\<noteq> \\<upsilon> a \\<Longrightarrow>\n       ((\\<delta> (\\<lambda>\\<tau>.\n                      Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                       \\<lfloor>\\<lfloor>{}\\<rfloor>\\<rfloor>) and\n         \\<upsilon> a and\n         \\<lambda>\\<tau>.\n            Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n             \\<lfloor>\\<lfloor>{}\\<rfloor>\\<rfloor>->including\\<^sub>S\\<^sub>e\\<^sub>t(a)->notEmpty\\<^sub>S\\<^sub>e\\<^sub>t())\n         \\<tau> =\n        true \\<tau> \\<longrightarrow>\n        ((\\<delta> (\\<lambda>\\<tau>.\n                       Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                        \\<lfloor>\\<lfloor>{}\\<rfloor>\\<rfloor>) and\n          \\<upsilon> a)\n          \\<tau> =\n         true \\<tau> \\<longrightarrow>\n         (SOME y.\n             y \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n(\\<lambda>\\<tau>.\n    Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n     \\<lfloor>\\<lfloor>{}\\<rfloor>\\<rfloor>->including\\<^sub>S\\<^sub>e\\<^sub>t(a)\n  \\<tau>)\\<rceil>\\<rceil>) =\n         a \\<tau>) \\<and>\n        ((\\<delta> (\\<lambda>\\<tau>.\n                       Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                        \\<lfloor>\\<lfloor>{}\\<rfloor>\\<rfloor>) and\n          \\<upsilon> a)\n          \\<tau> \\<noteq>\n         true \\<tau> \\<longrightarrow>\n         \\<bottom> = a \\<tau>)) \\<and>\n       ((\\<delta> (\\<lambda>\\<tau>.\n                      Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                       \\<lfloor>\\<lfloor>{}\\<rfloor>\\<rfloor>) and\n         \\<upsilon> a and\n         \\<lambda>\\<tau>.\n            Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n             \\<lfloor>\\<lfloor>{}\\<rfloor>\\<rfloor>->including\\<^sub>S\\<^sub>e\\<^sub>t(a)->notEmpty\\<^sub>S\\<^sub>e\\<^sub>t())\n         \\<tau> \\<noteq>\n        true \\<tau> \\<longrightarrow>\n        ((\\<delta> (\\<lambda>\\<tau>.\n                       Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                        \\<lfloor>\\<lfloor>{}\\<rfloor>\\<rfloor>) and\n          \\<upsilon> a)\n          \\<tau> =\n         true \\<tau> \\<longrightarrow>\n         null \\<tau> = a \\<tau>) \\<and>\n        ((\\<delta> (\\<lambda>\\<tau>.\n                       Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                        \\<lfloor>\\<lfloor>{}\\<rfloor>\\<rfloor>) and\n          \\<upsilon> a)\n          \\<tau> \\<noteq>\n         true \\<tau> \\<longrightarrow>\n         \\<bottom> = a \\<tau>))", "apply(subgoal_tac \"a \\<tau> = \\<bottom>\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>\\<tau>.\n       \\<lbrakk>\\<tau> |\\<noteq> \\<upsilon> a; a \\<tau> = \\<bottom>\\<rbrakk>\n       \\<Longrightarrow> ((\\<delta> (\\<lambda>\\<tau>.\n  Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n   \\<lfloor>\\<lfloor>{}\\<rfloor>\\<rfloor>) and\n                           \\<upsilon> a and\n                           \\<lambda>\\<tau>.\n                              Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                               \\<lfloor>\\<lfloor>{}\\<rfloor>\\<rfloor>->including\\<^sub>S\\<^sub>e\\<^sub>t(a)->notEmpty\\<^sub>S\\<^sub>e\\<^sub>t())\n                           \\<tau> =\n                          true \\<tau> \\<longrightarrow>\n                          ((\\<delta> (\\<lambda>\\<tau>.\n   Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n    \\<lfloor>\\<lfloor>{}\\<rfloor>\\<rfloor>) and\n                            \\<upsilon> a)\n                            \\<tau> =\n                           true \\<tau> \\<longrightarrow>\n                           (SOME y.\n                               y \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                  (\\<lambda>\\<tau>.\n                      Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                       \\<lfloor>\\<lfloor>{}\\<rfloor>\\<rfloor>->including\\<^sub>S\\<^sub>e\\<^sub>t(a)\n                    \\<tau>)\\<rceil>\\<rceil>) =\n                           a \\<tau>) \\<and>\n                          ((\\<delta> (\\<lambda>\\<tau>.\n   Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n    \\<lfloor>\\<lfloor>{}\\<rfloor>\\<rfloor>) and\n                            \\<upsilon> a)\n                            \\<tau> \\<noteq>\n                           true \\<tau> \\<longrightarrow>\n                           \\<bottom> = a \\<tau>)) \\<and>\n                         ((\\<delta> (\\<lambda>\\<tau>.\n  Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n   \\<lfloor>\\<lfloor>{}\\<rfloor>\\<rfloor>) and\n                           \\<upsilon> a and\n                           \\<lambda>\\<tau>.\n                              Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                               \\<lfloor>\\<lfloor>{}\\<rfloor>\\<rfloor>->including\\<^sub>S\\<^sub>e\\<^sub>t(a)->notEmpty\\<^sub>S\\<^sub>e\\<^sub>t())\n                           \\<tau> \\<noteq>\n                          true \\<tau> \\<longrightarrow>\n                          ((\\<delta> (\\<lambda>\\<tau>.\n   Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n    \\<lfloor>\\<lfloor>{}\\<rfloor>\\<rfloor>) and\n                            \\<upsilon> a)\n                            \\<tau> =\n                           true \\<tau> \\<longrightarrow>\n                           null \\<tau> = a \\<tau>) \\<and>\n                          ((\\<delta> (\\<lambda>\\<tau>.\n   Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n    \\<lfloor>\\<lfloor>{}\\<rfloor>\\<rfloor>) and\n                            \\<upsilon> a)\n                            \\<tau> \\<noteq>\n                           true \\<tau> \\<longrightarrow>\n                           \\<bottom> = a \\<tau>))\n 2. \\<And>\\<tau>.\n       \\<tau> |\\<noteq> \\<upsilon> a \\<Longrightarrow> a \\<tau> = \\<bottom>", "prefer 2"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>\\<tau>.\n       \\<tau> |\\<noteq> \\<upsilon> a \\<Longrightarrow> a \\<tau> = \\<bottom>\n 2. \\<And>\\<tau>.\n       \\<lbrakk>\\<tau> |\\<noteq> \\<upsilon> a; a \\<tau> = \\<bottom>\\<rbrakk>\n       \\<Longrightarrow> ((\\<delta> (\\<lambda>\\<tau>.\n  Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n   \\<lfloor>\\<lfloor>{}\\<rfloor>\\<rfloor>) and\n                           \\<upsilon> a and\n                           \\<lambda>\\<tau>.\n                              Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                               \\<lfloor>\\<lfloor>{}\\<rfloor>\\<rfloor>->including\\<^sub>S\\<^sub>e\\<^sub>t(a)->notEmpty\\<^sub>S\\<^sub>e\\<^sub>t())\n                           \\<tau> =\n                          true \\<tau> \\<longrightarrow>\n                          ((\\<delta> (\\<lambda>\\<tau>.\n   Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n    \\<lfloor>\\<lfloor>{}\\<rfloor>\\<rfloor>) and\n                            \\<upsilon> a)\n                            \\<tau> =\n                           true \\<tau> \\<longrightarrow>\n                           (SOME y.\n                               y \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                  (\\<lambda>\\<tau>.\n                      Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                       \\<lfloor>\\<lfloor>{}\\<rfloor>\\<rfloor>->including\\<^sub>S\\<^sub>e\\<^sub>t(a)\n                    \\<tau>)\\<rceil>\\<rceil>) =\n                           a \\<tau>) \\<and>\n                          ((\\<delta> (\\<lambda>\\<tau>.\n   Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n    \\<lfloor>\\<lfloor>{}\\<rfloor>\\<rfloor>) and\n                            \\<upsilon> a)\n                            \\<tau> \\<noteq>\n                           true \\<tau> \\<longrightarrow>\n                           \\<bottom> = a \\<tau>)) \\<and>\n                         ((\\<delta> (\\<lambda>\\<tau>.\n  Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n   \\<lfloor>\\<lfloor>{}\\<rfloor>\\<rfloor>) and\n                           \\<upsilon> a and\n                           \\<lambda>\\<tau>.\n                              Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                               \\<lfloor>\\<lfloor>{}\\<rfloor>\\<rfloor>->including\\<^sub>S\\<^sub>e\\<^sub>t(a)->notEmpty\\<^sub>S\\<^sub>e\\<^sub>t())\n                           \\<tau> \\<noteq>\n                          true \\<tau> \\<longrightarrow>\n                          ((\\<delta> (\\<lambda>\\<tau>.\n   Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n    \\<lfloor>\\<lfloor>{}\\<rfloor>\\<rfloor>) and\n                            \\<upsilon> a)\n                            \\<tau> =\n                           true \\<tau> \\<longrightarrow>\n                           null \\<tau> = a \\<tau>) \\<and>\n                          ((\\<delta> (\\<lambda>\\<tau>.\n   Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n    \\<lfloor>\\<lfloor>{}\\<rfloor>\\<rfloor>) and\n                            \\<upsilon> a)\n                            \\<tau> \\<noteq>\n                           true \\<tau> \\<longrightarrow>\n                           \\<bottom> = a \\<tau>))", "apply(simp add: OclValid_def valid_def bot_fun_def split: if_split_asm)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<tau>.\n       \\<lbrakk>\\<tau> |\\<noteq> \\<upsilon> a; a \\<tau> = \\<bottom>\\<rbrakk>\n       \\<Longrightarrow> ((\\<delta> (\\<lambda>\\<tau>.\n  Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n   \\<lfloor>\\<lfloor>{}\\<rfloor>\\<rfloor>) and\n                           \\<upsilon> a and\n                           \\<lambda>\\<tau>.\n                              Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                               \\<lfloor>\\<lfloor>{}\\<rfloor>\\<rfloor>->including\\<^sub>S\\<^sub>e\\<^sub>t(a)->notEmpty\\<^sub>S\\<^sub>e\\<^sub>t())\n                           \\<tau> =\n                          true \\<tau> \\<longrightarrow>\n                          ((\\<delta> (\\<lambda>\\<tau>.\n   Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n    \\<lfloor>\\<lfloor>{}\\<rfloor>\\<rfloor>) and\n                            \\<upsilon> a)\n                            \\<tau> =\n                           true \\<tau> \\<longrightarrow>\n                           (SOME y.\n                               y \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                  (\\<lambda>\\<tau>.\n                      Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                       \\<lfloor>\\<lfloor>{}\\<rfloor>\\<rfloor>->including\\<^sub>S\\<^sub>e\\<^sub>t(a)\n                    \\<tau>)\\<rceil>\\<rceil>) =\n                           a \\<tau>) \\<and>\n                          ((\\<delta> (\\<lambda>\\<tau>.\n   Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n    \\<lfloor>\\<lfloor>{}\\<rfloor>\\<rfloor>) and\n                            \\<upsilon> a)\n                            \\<tau> \\<noteq>\n                           true \\<tau> \\<longrightarrow>\n                           \\<bottom> = a \\<tau>)) \\<and>\n                         ((\\<delta> (\\<lambda>\\<tau>.\n  Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n   \\<lfloor>\\<lfloor>{}\\<rfloor>\\<rfloor>) and\n                           \\<upsilon> a and\n                           \\<lambda>\\<tau>.\n                              Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                               \\<lfloor>\\<lfloor>{}\\<rfloor>\\<rfloor>->including\\<^sub>S\\<^sub>e\\<^sub>t(a)->notEmpty\\<^sub>S\\<^sub>e\\<^sub>t())\n                           \\<tau> \\<noteq>\n                          true \\<tau> \\<longrightarrow>\n                          ((\\<delta> (\\<lambda>\\<tau>.\n   Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n    \\<lfloor>\\<lfloor>{}\\<rfloor>\\<rfloor>) and\n                            \\<upsilon> a)\n                            \\<tau> =\n                           true \\<tau> \\<longrightarrow>\n                           null \\<tau> = a \\<tau>) \\<and>\n                          ((\\<delta> (\\<lambda>\\<tau>.\n   Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n    \\<lfloor>\\<lfloor>{}\\<rfloor>\\<rfloor>) and\n                            \\<upsilon> a)\n                            \\<tau> \\<noteq>\n                           true \\<tau> \\<longrightarrow>\n                           \\<bottom> = a \\<tau>))", "apply(simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<tau>.\n       \\<lbrakk>\\<tau> |\\<noteq> \\<upsilon> a; a \\<tau> = \\<bottom>\\<rbrakk>\n       \\<Longrightarrow> ((\\<delta> (\\<lambda>\\<tau>.\n  Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n   \\<lfloor>\\<lfloor>{}\\<rfloor>\\<rfloor>) and\n                           \\<upsilon> a and\n                           \\<lambda>\\<tau>.\n                              Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                               \\<lfloor>\\<lfloor>{}\\<rfloor>\\<rfloor>->including\\<^sub>S\\<^sub>e\\<^sub>t(a)->notEmpty\\<^sub>S\\<^sub>e\\<^sub>t())\n                           \\<tau> =\n                          true \\<tau> \\<longrightarrow>\n                          (\\<delta> (\\<lambda>\\<tau>.\n  Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n   \\<lfloor>\\<lfloor>{}\\<rfloor>\\<rfloor>) and\n                           \\<upsilon> a)\n                           \\<tau> =\n                          true \\<tau> \\<longrightarrow>\n                          (SOME y.\n                              y \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                 (\\<lambda>\\<tau>.\n                     Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                      \\<lfloor>\\<lfloor>{}\\<rfloor>\\<rfloor>->including\\<^sub>S\\<^sub>e\\<^sub>t(a)\n                   \\<tau>)\\<rceil>\\<rceil>) =\n                          \\<bottom>) \\<and>\n                         ((\\<delta> (\\<lambda>\\<tau>.\n  Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n   \\<lfloor>\\<lfloor>{}\\<rfloor>\\<rfloor>) and\n                           \\<upsilon> a and\n                           \\<lambda>\\<tau>.\n                              Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                               \\<lfloor>\\<lfloor>{}\\<rfloor>\\<rfloor>->including\\<^sub>S\\<^sub>e\\<^sub>t(a)->notEmpty\\<^sub>S\\<^sub>e\\<^sub>t())\n                           \\<tau> \\<noteq>\n                          true \\<tau> \\<longrightarrow>\n                          (\\<delta> (\\<lambda>\\<tau>.\n  Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n   \\<lfloor>\\<lfloor>{}\\<rfloor>\\<rfloor>) and\n                           \\<upsilon> a)\n                           \\<tau> =\n                          true \\<tau> \\<longrightarrow>\n                          null \\<tau> = \\<bottom>)", "apply(subst (1 2 3 4) cp_OclAnd,\n       simp add: mtSet_defined[simplified mtSet_def] valid_def bot_fun_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<tau>.\n       \\<lbrakk>\\<tau>\n                 |\\<noteq> \\<lambda>\\<tau>.\n                              if a \\<tau> = \\<bottom> then false \\<tau>\n                              else true \\<tau>;\n        a \\<tau> = \\<bottom>\\<rbrakk>\n       \\<Longrightarrow> (((\\<lambda>_. false \\<tau>) and\n                           (\\<lambda>_.\n                               \\<lambda>\\<tau>.\n                                  Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                   \\<lfloor>\\<lfloor>{}\\<rfloor>\\<rfloor>->including\\<^sub>S\\<^sub>e\\<^sub>t(a)->notEmpty\\<^sub>S\\<^sub>e\\<^sub>t()\n                                \\<tau>))\n                           \\<tau> =\n                          true \\<tau> \\<longrightarrow>\n                          ((\\<lambda>_. true \\<tau>) and\n                           (\\<lambda>_. false \\<tau>))\n                           \\<tau> =\n                          true \\<tau> \\<longrightarrow>\n                          (SOME y.\n                              y \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                 (\\<lambda>\\<tau>.\n                     Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                      \\<lfloor>\\<lfloor>{}\\<rfloor>\\<rfloor>->including\\<^sub>S\\<^sub>e\\<^sub>t(a)\n                   \\<tau>)\\<rceil>\\<rceil>) =\n                          \\<bottom>) \\<and>\n                         (((\\<lambda>_. false \\<tau>) and\n                           (\\<lambda>_.\n                               \\<lambda>\\<tau>.\n                                  Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                   \\<lfloor>\\<lfloor>{}\\<rfloor>\\<rfloor>->including\\<^sub>S\\<^sub>e\\<^sub>t(a)->notEmpty\\<^sub>S\\<^sub>e\\<^sub>t()\n                                \\<tau>))\n                           \\<tau> \\<noteq>\n                          true \\<tau> \\<longrightarrow>\n                          ((\\<lambda>_. true \\<tau>) and\n                           (\\<lambda>_. false \\<tau>))\n                           \\<tau> =\n                          true \\<tau> \\<longrightarrow>\n                          null \\<tau> = \\<bottom>)", "by(simp add: cp_OclAnd[symmetric], rule impI, simp add: false_def true_def)"], ["", "subsubsection\\<open>Execution Rules on Forall\\<close>"], ["", "lemma OclForall_mtSet_exec[simp,code_unfold] :\"((Set{})->forAll\\<^sub>S\\<^sub>e\\<^sub>t(z| P(z))) = true\""], ["proof (prove)\ngoal (1 subgoal):\n 1. OclForall Set{} P = true", "apply(simp add: OclForall_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>\\<tau>.\n        if \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n     (Set{} \\<tau>)\\<rceil>\\<rceil>.\n              P (\\<lambda>_. x) \\<tau> = false \\<tau>\n        then false \\<tau>\n        else if \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n          (Set{} \\<tau>)\\<rceil>\\<rceil>.\n                   P (\\<lambda>_. x) \\<tau> = invalid \\<tau>\n             then invalid \\<tau>\n             else if \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n               (Set{} \\<tau>)\\<rceil>\\<rceil>.\n                        P (\\<lambda>_. x) \\<tau> = null \\<tau>\n                  then null \\<tau> else true \\<tau>) =\n    true", "apply(subst mtSet_def)+"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>\\<tau>.\n        if \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n     (Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n       \\<lfloor>\\<lfloor>{}\\<rfloor>\\<rfloor>)\\<rceil>\\<rceil>.\n              P (\\<lambda>_. x) \\<tau> = false \\<tau>\n        then false \\<tau>\n        else if \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n          (Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n            \\<lfloor>\\<lfloor>{}\\<rfloor>\\<rfloor>)\\<rceil>\\<rceil>.\n                   P (\\<lambda>_. x) \\<tau> = invalid \\<tau>\n             then invalid \\<tau>\n             else if \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n               (Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                 \\<lfloor>\\<lfloor>{}\\<rfloor>\\<rfloor>)\\<rceil>\\<rceil>.\n                        P (\\<lambda>_. x) \\<tau> = null \\<tau>\n                  then null \\<tau> else true \\<tau>) =\n    true", "apply(subst Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e_inverse, simp_all add: true_def)+"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "text\\<open>The following rule is a main theorem of our approach: From a denotational definition\nthat assures consistency, but may be --- as in the case of the @{term \"X->forAll\\<^sub>S\\<^sub>e\\<^sub>t(x | P x)\"} ---\ndauntingly complex, we derive operational rules that can serve as a gold-standard for operational\nexecution, since they may be evaluated in whatever situation and according to whatever strategy.\nIn the case of @{term \"X->forAll\\<^sub>S\\<^sub>e\\<^sub>t(x | P x)\"}, the operational rule gives immediately a way to\nevaluation in any finite (in terms of conventional OCL: denotable) set, although the rule also\nholds for the infinite case:\n\n@{term \"Integer\\<^sub>n\\<^sub>u\\<^sub>l\\<^sub>l ->forAll\\<^sub>S\\<^sub>e\\<^sub>t(x | (Integer\\<^sub>n\\<^sub>u\\<^sub>l\\<^sub>l ->forAll\\<^sub>S\\<^sub>e\\<^sub>t(y | x +\\<^sub>i\\<^sub>n\\<^sub>t y \\<triangleq> y +\\<^sub>i\\<^sub>n\\<^sub>t x)))\"}\n\nor even:\n\n@{term \"Integer ->forAll\\<^sub>S\\<^sub>e\\<^sub>t(x | (Integer ->forAll\\<^sub>S\\<^sub>e\\<^sub>t(y | x +\\<^sub>i\\<^sub>n\\<^sub>t y \\<doteq> y +\\<^sub>i\\<^sub>n\\<^sub>t x)))\"}\n\nare valid OCL statements in any context $\\tau$.\n\\<close>"], ["", "theorem OclForall_including_exec[simp,code_unfold] :\n        assumes cp0 : \"cp P\"\n        shows         \"((S->including\\<^sub>S\\<^sub>e\\<^sub>t(x))->forAll\\<^sub>S\\<^sub>e\\<^sub>t(z | P(z))) = (if \\<delta> S and \\<upsilon> x\n                                                                then P x and (S->forAll\\<^sub>S\\<^sub>e\\<^sub>t(z | P(z)))\n                                                                else invalid\n                                                                endif)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. OclForall S->including\\<^sub>S\\<^sub>e\\<^sub>t(x) P =\n    (if \\<delta> S and\n        \\<upsilon> x then P x and OclForall S P else invalid endif)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. OclForall S->including\\<^sub>S\\<^sub>e\\<^sub>t(x) P =\n    (if \\<delta> S and\n        \\<upsilon> x then P x and OclForall S P else invalid endif)", "have cp: \"\\<And>\\<tau>. P x \\<tau> = P (\\<lambda>_. x \\<tau>) \\<tau>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<tau>. P x \\<tau> = P (\\<lambda>_. x \\<tau>) \\<tau>", "by(insert cp0, auto simp: cp_def)"], ["proof (state)\nthis:\n  P x ?\\<tau> = P (\\<lambda>_. x ?\\<tau>) ?\\<tau>\n\ngoal (1 subgoal):\n 1. OclForall S->including\\<^sub>S\\<^sub>e\\<^sub>t(x) P =\n    (if \\<delta> S and\n        \\<upsilon> x then P x and OclForall S P else invalid endif)", "have cp_eq : \"\\<And>\\<tau> v. (P x \\<tau> = v) = (P (\\<lambda>_. x \\<tau>) \\<tau> = v)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<tau> v. (P x \\<tau> = v) = (P (\\<lambda>_. x \\<tau>) \\<tau> = v)", "by(subst cp, simp)"], ["proof (state)\nthis:\n  (P x ?\\<tau> = ?v) = (P (\\<lambda>_. x ?\\<tau>) ?\\<tau> = ?v)\n\ngoal (1 subgoal):\n 1. OclForall S->including\\<^sub>S\\<^sub>e\\<^sub>t(x) P =\n    (if \\<delta> S and\n        \\<upsilon> x then P x and OclForall S P else invalid endif)", "have cp_OclNot_eq : \"\\<And>\\<tau> v. (P x \\<tau> \\<noteq> v) = (P (\\<lambda>_. x \\<tau>) \\<tau> \\<noteq> v)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<tau> v.\n       (P x \\<tau> \\<noteq> v) =\n       (P (\\<lambda>_. x \\<tau>) \\<tau> \\<noteq> v)", "by(subst cp, simp)"], ["proof (state)\nthis:\n  (P x ?\\<tau> \\<noteq> ?v) =\n  (P (\\<lambda>_. x ?\\<tau>) ?\\<tau> \\<noteq> ?v)\n\ngoal (1 subgoal):\n 1. OclForall S->including\\<^sub>S\\<^sub>e\\<^sub>t(x) P =\n    (if \\<delta> S and\n        \\<upsilon> x then P x and OclForall S P else invalid endif)", "have insert_in_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e : \"\\<And>\\<tau>. (\\<tau> \\<Turnstile>(\\<delta> S)) \\<Longrightarrow> (\\<tau> \\<Turnstile>(\\<upsilon> x)) \\<Longrightarrow>\n                               \\<lfloor>\\<lfloor>insert (x \\<tau>) \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e (S \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor> \\<in>\n                                 {X. X = bot \\<or> X = null \\<or> (\\<forall>x\\<in>\\<lceil>\\<lceil>X\\<rceil>\\<rceil>. x \\<noteq> bot)}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<tau>.\n       \\<lbrakk>\\<tau> \\<Turnstile> \\<delta> S;\n        \\<tau> \\<Turnstile> \\<upsilon> x\\<rbrakk>\n       \\<Longrightarrow> \\<lfloor>\\<lfloor>insert (x \\<tau>)\n      \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                       (S \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>\n                         \\<in> {X. X = \\<bottom> \\<or>\n                                   X = null \\<or>\n                                   (\\<forall>x\n       \\<in>\\<lceil>\\<lceil>X\\<rceil>\\<rceil>.\n x \\<noteq> \\<bottom>)}", "by(frule Set_inv_lemma, simp add: foundation18 invalid_def)"], ["proof (state)\nthis:\n  \\<lbrakk>?\\<tau> \\<Turnstile> \\<delta> S;\n   ?\\<tau> \\<Turnstile> \\<upsilon> x\\<rbrakk>\n  \\<Longrightarrow> \\<lfloor>\\<lfloor>insert (x ?\\<tau>)\n \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                  (S ?\\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>\n                    \\<in> {X. X = \\<bottom> \\<or>\n                              X = null \\<or>\n                              (\\<forall>x\n  \\<in>\\<lceil>\\<lceil>X\\<rceil>\\<rceil>.\n                                  x \\<noteq> \\<bottom>)}\n\ngoal (1 subgoal):\n 1. OclForall S->including\\<^sub>S\\<^sub>e\\<^sub>t(x) P =\n    (if \\<delta> S and\n        \\<upsilon> x then P x and OclForall S P else invalid endif)", "have forall_including_invert : \"\\<And>\\<tau> f. (f x \\<tau> = f (\\<lambda> _. x \\<tau>) \\<tau>) \\<Longrightarrow>\n                                          \\<tau> \\<Turnstile> (\\<delta> S and \\<upsilon> x) \\<Longrightarrow>\n                                          (\\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e (S->including\\<^sub>S\\<^sub>e\\<^sub>t(x) \\<tau>)\\<rceil>\\<rceil>. f (\\<lambda>_. x) \\<tau>) =\n                                            (f x \\<tau> \\<and> (\\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e (S \\<tau>)\\<rceil>\\<rceil>. f (\\<lambda>_. x) \\<tau>))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<tau> f.\n       \\<lbrakk>f x \\<tau> = f (\\<lambda>_. x \\<tau>) \\<tau>;\n        \\<tau> \\<Turnstile> \\<delta> S and \\<upsilon> x\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                    (S->including\\<^sub>S\\<^sub>e\\<^sub>t(x)\n                      \\<tau>)\\<rceil>\\<rceil>.\n                             f (\\<lambda>_. x) \\<tau>) =\n                         (f x \\<tau> \\<and>\n                          (\\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                     (S \\<tau>)\\<rceil>\\<rceil>.\n                              f (\\<lambda>_. x) \\<tau>))", "apply(drule foundation5, simp add: OclIncluding_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<tau> f.\n       \\<lbrakk>f x \\<tau> = f (\\<lambda>_. x \\<tau>) \\<tau>;\n        \\<tau> \\<Turnstile> \\<delta> S \\<and>\n        \\<tau> \\<Turnstile> \\<upsilon> x\\<rbrakk>\n       \\<Longrightarrow> ((\\<delta> S) \\<tau> = true \\<tau> \\<and>\n                          (\\<upsilon> x) \\<tau> =\n                          true \\<tau> \\<longrightarrow>\n                          (\\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                     (Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                       \\<lfloor>\\<lfloor>insert (x \\<tau>)\n    \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                     (S \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>)\\<rceil>\\<rceil>.\n                              f (\\<lambda>_. x) \\<tau>) =\n                          (f (\\<lambda>_. x \\<tau>) \\<tau> \\<and>\n                           (\\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                      (S \\<tau>)\\<rceil>\\<rceil>.\n                               f (\\<lambda>_. x) \\<tau>))) \\<and>\n                         (((\\<delta> S) \\<tau> =\n                           true \\<tau> \\<longrightarrow>\n                           (\\<upsilon> x) \\<tau> \\<noteq>\n                           true \\<tau>) \\<longrightarrow>\n                          (\\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                     (invalid \\<tau>)\\<rceil>\\<rceil>.\n                              f (\\<lambda>_. x) \\<tau>) =\n                          (f (\\<lambda>_. x \\<tau>) \\<tau> \\<and>\n                           (\\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                      (S \\<tau>)\\<rceil>\\<rceil>.\n                               f (\\<lambda>_. x) \\<tau>)))", "apply(subst Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e_inverse)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>\\<tau> f.\n       \\<lbrakk>f x \\<tau> = f (\\<lambda>_. x \\<tau>) \\<tau>;\n        \\<tau> \\<Turnstile> \\<delta> S \\<and>\n        \\<tau> \\<Turnstile> \\<upsilon> x\\<rbrakk>\n       \\<Longrightarrow> \\<lfloor>\\<lfloor>insert (x \\<tau>)\n      \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                       (S \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>\n                         \\<in> {X. X = \\<bottom> \\<or>\n                                   X = null \\<or>\n                                   (\\<forall>x\n       \\<in>\\<lceil>\\<lceil>X\\<rceil>\\<rceil>.\n x \\<noteq> \\<bottom>)}\n 2. \\<And>\\<tau> f.\n       \\<lbrakk>f x \\<tau> = f (\\<lambda>_. x \\<tau>) \\<tau>;\n        \\<tau> \\<Turnstile> \\<delta> S \\<and>\n        \\<tau> \\<Turnstile> \\<upsilon> x\\<rbrakk>\n       \\<Longrightarrow> ((\\<delta> S) \\<tau> = true \\<tau> \\<and>\n                          (\\<upsilon> x) \\<tau> =\n                          true \\<tau> \\<longrightarrow>\n                          (\\<forall>x\\<in>\\<lceil>\\<lceil>\\<lfloor>\\<lfloor>insert\n (x \\<tau>)\n \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                  (S \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>\\<rceil>\\<rceil>.\n                              f (\\<lambda>a. x) \\<tau>) =\n                          (f (\\<lambda>a. x \\<tau>) \\<tau> \\<and>\n                           (\\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                      (S \\<tau>)\\<rceil>\\<rceil>.\n                               f (\\<lambda>a. x) \\<tau>))) \\<and>\n                         (((\\<delta> S) \\<tau> =\n                           true \\<tau> \\<longrightarrow>\n                           (\\<upsilon> x) \\<tau> \\<noteq>\n                           true \\<tau>) \\<longrightarrow>\n                          (\\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                     (invalid \\<tau>)\\<rceil>\\<rceil>.\n                              f (\\<lambda>a. x) \\<tau>) =\n                          (f (\\<lambda>a. x \\<tau>) \\<tau> \\<and>\n                           (\\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                      (S \\<tau>)\\<rceil>\\<rceil>.\n                               f (\\<lambda>a. x) \\<tau>)))", "apply(rule insert_in_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e, fast+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<tau> f.\n       \\<lbrakk>f x \\<tau> = f (\\<lambda>_. x \\<tau>) \\<tau>;\n        \\<tau> \\<Turnstile> \\<delta> S \\<and>\n        \\<tau> \\<Turnstile> \\<upsilon> x\\<rbrakk>\n       \\<Longrightarrow> ((\\<delta> S) \\<tau> = true \\<tau> \\<and>\n                          (\\<upsilon> x) \\<tau> =\n                          true \\<tau> \\<longrightarrow>\n                          (\\<forall>x\\<in>\\<lceil>\\<lceil>\\<lfloor>\\<lfloor>insert\n (x \\<tau>)\n \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                  (S \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>\\<rceil>\\<rceil>.\n                              f (\\<lambda>a. x) \\<tau>) =\n                          (f (\\<lambda>a. x \\<tau>) \\<tau> \\<and>\n                           (\\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                      (S \\<tau>)\\<rceil>\\<rceil>.\n                               f (\\<lambda>a. x) \\<tau>))) \\<and>\n                         (((\\<delta> S) \\<tau> =\n                           true \\<tau> \\<longrightarrow>\n                           (\\<upsilon> x) \\<tau> \\<noteq>\n                           true \\<tau>) \\<longrightarrow>\n                          (\\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                     (invalid \\<tau>)\\<rceil>\\<rceil>.\n                              f (\\<lambda>a. x) \\<tau>) =\n                          (f (\\<lambda>a. x \\<tau>) \\<tau> \\<and>\n                           (\\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                      (S \\<tau>)\\<rceil>\\<rceil>.\n                               f (\\<lambda>a. x) \\<tau>)))", "by(simp add: OclValid_def)"], ["proof (state)\nthis:\n  \\<lbrakk>?f x ?\\<tau> = ?f (\\<lambda>_. x ?\\<tau>) ?\\<tau>;\n   ?\\<tau> \\<Turnstile> \\<delta> S and \\<upsilon> x\\<rbrakk>\n  \\<Longrightarrow> (\\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n               (S->including\\<^sub>S\\<^sub>e\\<^sub>t(x)\n                 ?\\<tau>)\\<rceil>\\<rceil>.\n                        ?f (\\<lambda>_. x) ?\\<tau>) =\n                    (?f x ?\\<tau> \\<and>\n                     (\\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                (S ?\\<tau>)\\<rceil>\\<rceil>.\n                         ?f (\\<lambda>_. x) ?\\<tau>))\n\ngoal (1 subgoal):\n 1. OclForall S->including\\<^sub>S\\<^sub>e\\<^sub>t(x) P =\n    (if \\<delta> S and\n        \\<upsilon> x then P x and OclForall S P else invalid endif)", "have exists_including_invert : \"\\<And>\\<tau> f. (f x \\<tau> = f (\\<lambda> _. x \\<tau>) \\<tau>) \\<Longrightarrow>\n                                          \\<tau> \\<Turnstile> (\\<delta> S and \\<upsilon> x) \\<Longrightarrow>\n                                          (\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e (S->including\\<^sub>S\\<^sub>e\\<^sub>t(x) \\<tau>)\\<rceil>\\<rceil>. f (\\<lambda>_. x) \\<tau>) =\n                                            (f x \\<tau> \\<or> (\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e (S \\<tau>)\\<rceil>\\<rceil>. f (\\<lambda>_. x) \\<tau>))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<tau> f.\n       \\<lbrakk>f x \\<tau> = f (\\<lambda>_. x \\<tau>) \\<tau>;\n        \\<tau> \\<Turnstile> \\<delta> S and \\<upsilon> x\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                    (S->including\\<^sub>S\\<^sub>e\\<^sub>t(x)\n                      \\<tau>)\\<rceil>\\<rceil>.\n                             f (\\<lambda>_. x) \\<tau>) =\n                         (f x \\<tau> \\<or>\n                          (\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                     (S \\<tau>)\\<rceil>\\<rceil>.\n                              f (\\<lambda>_. x) \\<tau>))", "apply(subst arg_cong[where f = \"\\<lambda>x. \\<not>x\",\n                                OF forall_including_invert[where f = \"\\<lambda>x \\<tau>. \\<not> (f x \\<tau>)\"],\n                                simplified])"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>\\<tau> f.\n       \\<lbrakk>f x \\<tau> = f (\\<lambda>_. x \\<tau>) \\<tau>;\n        \\<tau> \\<Turnstile> \\<delta> S and \\<upsilon> x\\<rbrakk>\n       \\<Longrightarrow> f x \\<tau> = f (\\<lambda>a. x \\<tau>) \\<tau>\n 2. \\<And>\\<tau> f.\n       \\<lbrakk>f x \\<tau> = f (\\<lambda>_. x \\<tau>) \\<tau>;\n        \\<tau> \\<Turnstile> \\<delta> S and \\<upsilon> x\\<rbrakk>\n       \\<Longrightarrow> \\<tau> \\<Turnstile> \\<delta> S and \\<upsilon> x\n 3. \\<And>\\<tau> f.\n       \\<lbrakk>f x \\<tau> = f (\\<lambda>_. x \\<tau>) \\<tau>;\n        \\<tau> \\<Turnstile> \\<delta> S and \\<upsilon> x\\<rbrakk>\n       \\<Longrightarrow> (f x \\<tau> \\<or>\n                          (\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                     (S \\<tau>)\\<rceil>\\<rceil>.\n                              f (\\<lambda>a. x) \\<tau>)) =\n                         (f x \\<tau> \\<or>\n                          (\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                     (S \\<tau>)\\<rceil>\\<rceil>.\n                              f (\\<lambda>a. x) \\<tau>))", "by simp_all"], ["proof (state)\nthis:\n  \\<lbrakk>?f x ?\\<tau> = ?f (\\<lambda>_. x ?\\<tau>) ?\\<tau>;\n   ?\\<tau> \\<Turnstile> \\<delta> S and \\<upsilon> x\\<rbrakk>\n  \\<Longrightarrow> (\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n               (S->including\\<^sub>S\\<^sub>e\\<^sub>t(x)\n                 ?\\<tau>)\\<rceil>\\<rceil>.\n                        ?f (\\<lambda>_. x) ?\\<tau>) =\n                    (?f x ?\\<tau> \\<or>\n                     (\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                (S ?\\<tau>)\\<rceil>\\<rceil>.\n                         ?f (\\<lambda>_. x) ?\\<tau>))\n\ngoal (1 subgoal):\n 1. OclForall S->including\\<^sub>S\\<^sub>e\\<^sub>t(x) P =\n    (if \\<delta> S and\n        \\<upsilon> x then P x and OclForall S P else invalid endif)", "have contradict_Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e: \"\\<And>\\<tau> S f. \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e S\\<rceil>\\<rceil>. f (\\<lambda>_. x) \\<tau> \\<Longrightarrow>\n                                       (\\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e S\\<rceil>\\<rceil>. \\<not> (f (\\<lambda>_. x) \\<tau>)) = False\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<tau> S f.\n       \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n S\\<rceil>\\<rceil>.\n          f (\\<lambda>_. x) \\<tau> \\<Longrightarrow>\n       (\\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n  S\\<rceil>\\<rceil>.\n           \\<not> f (\\<lambda>_. x) \\<tau>) =\n       False", "by(case_tac \"(\\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e S\\<rceil>\\<rceil>. \\<not> (f (\\<lambda>_. x) \\<tau>)) = True\", simp_all)"], ["proof (state)\nthis:\n  \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                  ?S\\<rceil>\\<rceil>.\n     ?f (\\<lambda>_. x) ?\\<tau> \\<Longrightarrow>\n  (\\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                   ?S\\<rceil>\\<rceil>.\n      \\<not> ?f (\\<lambda>_. x) ?\\<tau>) =\n  False\n\ngoal (1 subgoal):\n 1. OclForall S->including\\<^sub>S\\<^sub>e\\<^sub>t(x) P =\n    (if \\<delta> S and\n        \\<upsilon> x then P x and OclForall S P else invalid endif)", "have bot_invalid : \"\\<bottom> = invalid\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<bottom> = invalid", "by(rule ext, simp add: invalid_def bot_fun_def)"], ["proof (state)\nthis:\n  \\<bottom> = invalid\n\ngoal (1 subgoal):\n 1. OclForall S->including\\<^sub>S\\<^sub>e\\<^sub>t(x) P =\n    (if \\<delta> S and\n        \\<upsilon> x then P x and OclForall S P else invalid endif)", "have bot_invalid2 : \"\\<And>\\<tau>. \\<bottom> = invalid \\<tau>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<tau>. \\<bottom> = invalid \\<tau>", "by(simp add: invalid_def)"], ["proof (state)\nthis:\n  \\<bottom> = invalid ?\\<tau>2\n\ngoal (1 subgoal):\n 1. OclForall S->including\\<^sub>S\\<^sub>e\\<^sub>t(x) P =\n    (if \\<delta> S and\n        \\<upsilon> x then P x and OclForall S P else invalid endif)", "have C1 : \"\\<And>\\<tau>. P x \\<tau> = false \\<tau> \\<or> (\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e (S \\<tau>)\\<rceil>\\<rceil>. P (\\<lambda>_. x) \\<tau> = false \\<tau>) \\<Longrightarrow>\n                  \\<tau> \\<Turnstile> (\\<delta> S and \\<upsilon> x) \\<Longrightarrow>\n                  false \\<tau> = (P x and OclForall S P) \\<tau>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<tau>.\n       \\<lbrakk>P x \\<tau> = false \\<tau> \\<or>\n                (\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n           (S \\<tau>)\\<rceil>\\<rceil>.\n                    P (\\<lambda>_. x) \\<tau> = false \\<tau>);\n        \\<tau> \\<Turnstile> \\<delta> S and \\<upsilon> x\\<rbrakk>\n       \\<Longrightarrow> false \\<tau> = (P x and OclForall S P) \\<tau>", "apply(simp add: cp_OclAnd[of \"P x\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<tau>.\n       \\<lbrakk>P x \\<tau> = false \\<tau> \\<or>\n                (\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n           (S \\<tau>)\\<rceil>\\<rceil>.\n                    P (\\<lambda>_. x) \\<tau> = false \\<tau>);\n        \\<tau> \\<Turnstile> \\<delta> S and \\<upsilon> x\\<rbrakk>\n       \\<Longrightarrow> false \\<tau> =\n                         ((\\<lambda>_. P x \\<tau>) and\n                          (\\<lambda>_. OclForall S P \\<tau>))\n                          \\<tau>", "apply(elim disjE, simp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>\\<tau>.\n       \\<lbrakk>\\<tau> \\<Turnstile> \\<delta> S and \\<upsilon> x;\n        P x \\<tau> = false \\<tau>\\<rbrakk>\n       \\<Longrightarrow> false \\<tau> =\n                         ((\\<lambda>_. false \\<tau>) and\n                          (\\<lambda>_. OclForall S P \\<tau>))\n                          \\<tau>\n 2. \\<And>\\<tau>.\n       \\<lbrakk>\\<tau> \\<Turnstile> \\<delta> S and \\<upsilon> x;\n        \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n  (S \\<tau>)\\<rceil>\\<rceil>.\n           P (\\<lambda>_. x) \\<tau> = false \\<tau>\\<rbrakk>\n       \\<Longrightarrow> false \\<tau> =\n                         ((\\<lambda>_. P x \\<tau>) and\n                          (\\<lambda>_. OclForall S P \\<tau>))\n                          \\<tau>", "apply(simp only: cp_OclAnd[symmetric], simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<tau>.\n       \\<lbrakk>\\<tau> \\<Turnstile> \\<delta> S and \\<upsilon> x;\n        \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n  (S \\<tau>)\\<rceil>\\<rceil>.\n           P (\\<lambda>_. x) \\<tau> = false \\<tau>\\<rbrakk>\n       \\<Longrightarrow> false \\<tau> =\n                         ((\\<lambda>_. P x \\<tau>) and\n                          (\\<lambda>_. OclForall S P \\<tau>))\n                          \\<tau>", "apply(subgoal_tac \"OclForall S P \\<tau> = false \\<tau>\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>\\<tau>.\n       \\<lbrakk>\\<tau> \\<Turnstile> \\<delta> S and \\<upsilon> x;\n        \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n  (S \\<tau>)\\<rceil>\\<rceil>.\n           P (\\<lambda>_. x) \\<tau> = false \\<tau>;\n        OclForall S P \\<tau> = false \\<tau>\\<rbrakk>\n       \\<Longrightarrow> false \\<tau> =\n                         ((\\<lambda>_. P x \\<tau>) and\n                          (\\<lambda>_. OclForall S P \\<tau>))\n                          \\<tau>\n 2. \\<And>\\<tau>.\n       \\<lbrakk>\\<tau> \\<Turnstile> \\<delta> S and \\<upsilon> x;\n        \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n  (S \\<tau>)\\<rceil>\\<rceil>.\n           P (\\<lambda>_. x) \\<tau> = false \\<tau>\\<rbrakk>\n       \\<Longrightarrow> OclForall S P \\<tau> = false \\<tau>", "apply(simp only: cp_OclAnd[symmetric], simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<tau>.\n       \\<lbrakk>\\<tau> \\<Turnstile> \\<delta> S and \\<upsilon> x;\n        \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n  (S \\<tau>)\\<rceil>\\<rceil>.\n           P (\\<lambda>_. x) \\<tau> = false \\<tau>\\<rbrakk>\n       \\<Longrightarrow> OclForall S P \\<tau> = false \\<tau>", "apply(simp add: OclForall_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<tau>.\n       \\<lbrakk>\\<tau> \\<Turnstile> \\<delta> S and \\<upsilon> x;\n        \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n  (S \\<tau>)\\<rceil>\\<rceil>.\n           P (\\<lambda>_. x) \\<tau> = false \\<tau>\\<rbrakk>\n       \\<Longrightarrow> (\\<delta> S) \\<tau> \\<noteq>\n                         true \\<tau> \\<longrightarrow>\n                         \\<bottom> = false \\<tau>", "apply(fold OclValid_def, simp add:  foundation10')"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  \\<lbrakk>P x ?\\<tau>3 = false ?\\<tau>3 \\<or>\n           (\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n      (S ?\\<tau>3)\\<rceil>\\<rceil>.\n               P (\\<lambda>_. x) ?\\<tau>3 = false ?\\<tau>3);\n   ?\\<tau>3 \\<Turnstile> \\<delta> S and \\<upsilon> x\\<rbrakk>\n  \\<Longrightarrow> false ?\\<tau>3 = (P x and OclForall S P) ?\\<tau>3\n\ngoal (1 subgoal):\n 1. OclForall S->including\\<^sub>S\\<^sub>e\\<^sub>t(x) P =\n    (if \\<delta> S and\n        \\<upsilon> x then P x and OclForall S P else invalid endif)", "have C2 : \"\\<And>\\<tau>. \\<tau> \\<Turnstile> (\\<delta> S and \\<upsilon> x) \\<Longrightarrow>\n                  P x \\<tau> = null \\<tau> \\<or> (\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e (S \\<tau>)\\<rceil>\\<rceil>. P (\\<lambda>_. x) \\<tau> = null \\<tau>) \\<Longrightarrow>\n                  P x \\<tau> = invalid \\<tau> \\<or> (\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e (S \\<tau>)\\<rceil>\\<rceil>. P (\\<lambda>_. x) \\<tau> = invalid \\<tau>) \\<Longrightarrow>\n                  \\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e (S->including\\<^sub>S\\<^sub>e\\<^sub>t(x) \\<tau>)\\<rceil>\\<rceil>. P (\\<lambda>_. x) \\<tau> \\<noteq> false \\<tau> \\<Longrightarrow>\n                  invalid \\<tau> = (P x and OclForall S P) \\<tau>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<tau>.\n       \\<lbrakk>\\<tau> \\<Turnstile> \\<delta> S and \\<upsilon> x;\n        P x \\<tau> = null \\<tau> \\<or>\n        (\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n   (S \\<tau>)\\<rceil>\\<rceil>.\n            P (\\<lambda>_. x) \\<tau> = null \\<tau>);\n        P x \\<tau> = invalid \\<tau> \\<or>\n        (\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n   (S \\<tau>)\\<rceil>\\<rceil>.\n            P (\\<lambda>_. x) \\<tau> = invalid \\<tau>);\n        \\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n  (S->including\\<^sub>S\\<^sub>e\\<^sub>t(x) \\<tau>)\\<rceil>\\<rceil>.\n           P (\\<lambda>_. x) \\<tau> \\<noteq> false \\<tau>\\<rbrakk>\n       \\<Longrightarrow> invalid \\<tau> = (P x and OclForall S P) \\<tau>", "apply(subgoal_tac \"(\\<delta> S)\\<tau> = true \\<tau>\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>\\<tau>.\n       \\<lbrakk>\\<tau> \\<Turnstile> \\<delta> S and \\<upsilon> x;\n        P x \\<tau> = null \\<tau> \\<or>\n        (\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n   (S \\<tau>)\\<rceil>\\<rceil>.\n            P (\\<lambda>_. x) \\<tau> = null \\<tau>);\n        P x \\<tau> = invalid \\<tau> \\<or>\n        (\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n   (S \\<tau>)\\<rceil>\\<rceil>.\n            P (\\<lambda>_. x) \\<tau> = invalid \\<tau>);\n        \\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n  (S->including\\<^sub>S\\<^sub>e\\<^sub>t(x) \\<tau>)\\<rceil>\\<rceil>.\n           P (\\<lambda>_. x) \\<tau> \\<noteq> false \\<tau>;\n        (\\<delta> S) \\<tau> = true \\<tau>\\<rbrakk>\n       \\<Longrightarrow> invalid \\<tau> = (P x and OclForall S P) \\<tau>\n 2. \\<And>\\<tau>.\n       \\<lbrakk>\\<tau> \\<Turnstile> \\<delta> S and \\<upsilon> x;\n        P x \\<tau> = null \\<tau> \\<or>\n        (\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n   (S \\<tau>)\\<rceil>\\<rceil>.\n            P (\\<lambda>_. x) \\<tau> = null \\<tau>);\n        P x \\<tau> = invalid \\<tau> \\<or>\n        (\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n   (S \\<tau>)\\<rceil>\\<rceil>.\n            P (\\<lambda>_. x) \\<tau> = invalid \\<tau>);\n        \\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n  (S->including\\<^sub>S\\<^sub>e\\<^sub>t(x) \\<tau>)\\<rceil>\\<rceil>.\n           P (\\<lambda>_. x) \\<tau> \\<noteq> false \\<tau>\\<rbrakk>\n       \\<Longrightarrow> (\\<delta> S) \\<tau> = true \\<tau>", "prefer 2"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>\\<tau>.\n       \\<lbrakk>\\<tau> \\<Turnstile> \\<delta> S and \\<upsilon> x;\n        P x \\<tau> = null \\<tau> \\<or>\n        (\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n   (S \\<tau>)\\<rceil>\\<rceil>.\n            P (\\<lambda>_. x) \\<tau> = null \\<tau>);\n        P x \\<tau> = invalid \\<tau> \\<or>\n        (\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n   (S \\<tau>)\\<rceil>\\<rceil>.\n            P (\\<lambda>_. x) \\<tau> = invalid \\<tau>);\n        \\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n  (S->including\\<^sub>S\\<^sub>e\\<^sub>t(x) \\<tau>)\\<rceil>\\<rceil>.\n           P (\\<lambda>_. x) \\<tau> \\<noteq> false \\<tau>\\<rbrakk>\n       \\<Longrightarrow> (\\<delta> S) \\<tau> = true \\<tau>\n 2. \\<And>\\<tau>.\n       \\<lbrakk>\\<tau> \\<Turnstile> \\<delta> S and \\<upsilon> x;\n        P x \\<tau> = null \\<tau> \\<or>\n        (\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n   (S \\<tau>)\\<rceil>\\<rceil>.\n            P (\\<lambda>_. x) \\<tau> = null \\<tau>);\n        P x \\<tau> = invalid \\<tau> \\<or>\n        (\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n   (S \\<tau>)\\<rceil>\\<rceil>.\n            P (\\<lambda>_. x) \\<tau> = invalid \\<tau>);\n        \\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n  (S->including\\<^sub>S\\<^sub>e\\<^sub>t(x) \\<tau>)\\<rceil>\\<rceil>.\n           P (\\<lambda>_. x) \\<tau> \\<noteq> false \\<tau>;\n        (\\<delta> S) \\<tau> = true \\<tau>\\<rbrakk>\n       \\<Longrightarrow> invalid \\<tau> = (P x and OclForall S P) \\<tau>", "apply(simp add: foundation10', simp add: OclValid_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<tau>.\n       \\<lbrakk>\\<tau> \\<Turnstile> \\<delta> S and \\<upsilon> x;\n        P x \\<tau> = null \\<tau> \\<or>\n        (\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n   (S \\<tau>)\\<rceil>\\<rceil>.\n            P (\\<lambda>_. x) \\<tau> = null \\<tau>);\n        P x \\<tau> = invalid \\<tau> \\<or>\n        (\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n   (S \\<tau>)\\<rceil>\\<rceil>.\n            P (\\<lambda>_. x) \\<tau> = invalid \\<tau>);\n        \\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n  (S->including\\<^sub>S\\<^sub>e\\<^sub>t(x) \\<tau>)\\<rceil>\\<rceil>.\n           P (\\<lambda>_. x) \\<tau> \\<noteq> false \\<tau>;\n        (\\<delta> S) \\<tau> = true \\<tau>\\<rbrakk>\n       \\<Longrightarrow> invalid \\<tau> = (P x and OclForall S P) \\<tau>", "apply(drule forall_including_invert[of \"\\<lambda> x \\<tau>. P x \\<tau> \\<noteq> false \\<tau>\", OF cp_OclNot_eq, THEN iffD1])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>\\<tau>.\n       \\<lbrakk>P x \\<tau> = null \\<tau> \\<or>\n                (\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n           (S \\<tau>)\\<rceil>\\<rceil>.\n                    P (\\<lambda>_. x) \\<tau> = null \\<tau>);\n        P x \\<tau> = invalid \\<tau> \\<or>\n        (\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n   (S \\<tau>)\\<rceil>\\<rceil>.\n            P (\\<lambda>_. x) \\<tau> = invalid \\<tau>);\n        \\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n  (S->including\\<^sub>S\\<^sub>e\\<^sub>t(x) \\<tau>)\\<rceil>\\<rceil>.\n           P (\\<lambda>_. x) \\<tau> \\<noteq> false \\<tau>;\n        (\\<delta> S) \\<tau> = true \\<tau>\\<rbrakk>\n       \\<Longrightarrow> \\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                   (S->including\\<^sub>S\\<^sub>e\\<^sub>t(x)\n                     \\<tau>)\\<rceil>\\<rceil>.\n                            P (\\<lambda>_. x) \\<tau> \\<noteq> false \\<tau>\n 2. \\<And>\\<tau>.\n       \\<lbrakk>P x \\<tau> = null \\<tau> \\<or>\n                (\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n           (S \\<tau>)\\<rceil>\\<rceil>.\n                    P (\\<lambda>_. x) \\<tau> = null \\<tau>);\n        P x \\<tau> = invalid \\<tau> \\<or>\n        (\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n   (S \\<tau>)\\<rceil>\\<rceil>.\n            P (\\<lambda>_. x) \\<tau> = invalid \\<tau>);\n        \\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n  (S->including\\<^sub>S\\<^sub>e\\<^sub>t(x) \\<tau>)\\<rceil>\\<rceil>.\n           P (\\<lambda>_. x) \\<tau> \\<noteq> false \\<tau>;\n        (\\<delta> S) \\<tau> = true \\<tau>;\n        P x \\<tau> \\<noteq> false \\<tau> \\<and>\n        (\\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n   (S \\<tau>)\\<rceil>\\<rceil>.\n            P (\\<lambda>_. x) \\<tau> \\<noteq> false \\<tau>)\\<rbrakk>\n       \\<Longrightarrow> invalid \\<tau> = (P x and OclForall S P) \\<tau>", "apply(assumption)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<tau>.\n       \\<lbrakk>P x \\<tau> = null \\<tau> \\<or>\n                (\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n           (S \\<tau>)\\<rceil>\\<rceil>.\n                    P (\\<lambda>_. x) \\<tau> = null \\<tau>);\n        P x \\<tau> = invalid \\<tau> \\<or>\n        (\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n   (S \\<tau>)\\<rceil>\\<rceil>.\n            P (\\<lambda>_. x) \\<tau> = invalid \\<tau>);\n        \\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n  (S->including\\<^sub>S\\<^sub>e\\<^sub>t(x) \\<tau>)\\<rceil>\\<rceil>.\n           P (\\<lambda>_. x) \\<tau> \\<noteq> false \\<tau>;\n        (\\<delta> S) \\<tau> = true \\<tau>;\n        P x \\<tau> \\<noteq> false \\<tau> \\<and>\n        (\\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n   (S \\<tau>)\\<rceil>\\<rceil>.\n            P (\\<lambda>_. x) \\<tau> \\<noteq> false \\<tau>)\\<rbrakk>\n       \\<Longrightarrow> invalid \\<tau> = (P x and OclForall S P) \\<tau>", "apply(simp add: cp_OclAnd[of \"P x\"],elim disjE, simp_all)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>\\<tau>.\n       \\<lbrakk>\\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n          (S->including\\<^sub>S\\<^sub>e\\<^sub>t(x) \\<tau>)\\<rceil>\\<rceil>.\n                   P (\\<lambda>_. x) \\<tau> \\<noteq> false \\<tau>;\n        (\\<delta> S) \\<tau> = true \\<tau>;\n        null \\<tau> \\<noteq> false \\<tau> \\<and>\n        (\\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n   (S \\<tau>)\\<rceil>\\<rceil>.\n            P (\\<lambda>_. x) \\<tau> \\<noteq> false \\<tau>);\n        invalid \\<tau> = null \\<tau>; P x \\<tau> = null \\<tau>\\<rbrakk>\n       \\<Longrightarrow> null \\<tau> =\n                         ((\\<lambda>_. null \\<tau>) and\n                          (\\<lambda>_. OclForall S P \\<tau>))\n                          \\<tau>\n 2. \\<And>\\<tau>.\n       \\<lbrakk>\\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n          (S->including\\<^sub>S\\<^sub>e\\<^sub>t(x) \\<tau>)\\<rceil>\\<rceil>.\n                   P (\\<lambda>_. x) \\<tau> \\<noteq> false \\<tau>;\n        (\\<delta> S) \\<tau> = true \\<tau>;\n        null \\<tau> \\<noteq> false \\<tau> \\<and>\n        (\\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n   (S \\<tau>)\\<rceil>\\<rceil>.\n            P (\\<lambda>_. x) \\<tau> \\<noteq> false \\<tau>);\n        P x \\<tau> = null \\<tau>;\n        \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n  (S \\<tau>)\\<rceil>\\<rceil>.\n           P (\\<lambda>_. x) \\<tau> = invalid \\<tau>\\<rbrakk>\n       \\<Longrightarrow> invalid \\<tau> =\n                         ((\\<lambda>_. null \\<tau>) and\n                          (\\<lambda>_. OclForall S P \\<tau>))\n                          \\<tau>\n 3. \\<And>\\<tau>.\n       \\<lbrakk>\\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n          (S->including\\<^sub>S\\<^sub>e\\<^sub>t(x) \\<tau>)\\<rceil>\\<rceil>.\n                   P (\\<lambda>_. x) \\<tau> \\<noteq> false \\<tau>;\n        (\\<delta> S) \\<tau> = true \\<tau>;\n        invalid \\<tau> \\<noteq> false \\<tau> \\<and>\n        (\\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n   (S \\<tau>)\\<rceil>\\<rceil>.\n            P (\\<lambda>_. x) \\<tau> \\<noteq> false \\<tau>);\n        \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n  (S \\<tau>)\\<rceil>\\<rceil>.\n           P (\\<lambda>_. x) \\<tau> = null \\<tau>;\n        P x \\<tau> = invalid \\<tau>\\<rbrakk>\n       \\<Longrightarrow> invalid \\<tau> =\n                         ((\\<lambda>_. invalid \\<tau>) and\n                          (\\<lambda>_. OclForall S P \\<tau>))\n                          \\<tau>\n 4. \\<And>\\<tau>.\n       \\<lbrakk>\\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n          (S->including\\<^sub>S\\<^sub>e\\<^sub>t(x) \\<tau>)\\<rceil>\\<rceil>.\n                   P (\\<lambda>_. x) \\<tau> \\<noteq> false \\<tau>;\n        (\\<delta> S) \\<tau> = true \\<tau>;\n        P x \\<tau> \\<noteq> false \\<tau> \\<and>\n        (\\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n   (S \\<tau>)\\<rceil>\\<rceil>.\n            P (\\<lambda>_. x) \\<tau> \\<noteq> false \\<tau>);\n        \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n  (S \\<tau>)\\<rceil>\\<rceil>.\n           P (\\<lambda>_. x) \\<tau> = null \\<tau>;\n        \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n  (S \\<tau>)\\<rceil>\\<rceil>.\n           P (\\<lambda>_. x) \\<tau> = invalid \\<tau>\\<rbrakk>\n       \\<Longrightarrow> invalid \\<tau> =\n                         ((\\<lambda>_. P x \\<tau>) and\n                          (\\<lambda>_. OclForall S P \\<tau>))\n                          \\<tau>", "apply(simp add: invalid_def null_fun_def null_option_def bot_fun_def bot_option_def)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>\\<tau>.\n       \\<lbrakk>\\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n          (S->including\\<^sub>S\\<^sub>e\\<^sub>t(x) \\<tau>)\\<rceil>\\<rceil>.\n                   P (\\<lambda>_. x) \\<tau> \\<noteq> false \\<tau>;\n        (\\<delta> S) \\<tau> = true \\<tau>;\n        null \\<tau> \\<noteq> false \\<tau> \\<and>\n        (\\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n   (S \\<tau>)\\<rceil>\\<rceil>.\n            P (\\<lambda>_. x) \\<tau> \\<noteq> false \\<tau>);\n        P x \\<tau> = null \\<tau>;\n        \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n  (S \\<tau>)\\<rceil>\\<rceil>.\n           P (\\<lambda>_. x) \\<tau> = invalid \\<tau>\\<rbrakk>\n       \\<Longrightarrow> invalid \\<tau> =\n                         ((\\<lambda>_. null \\<tau>) and\n                          (\\<lambda>_. OclForall S P \\<tau>))\n                          \\<tau>\n 2. \\<And>\\<tau>.\n       \\<lbrakk>\\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n          (S->including\\<^sub>S\\<^sub>e\\<^sub>t(x) \\<tau>)\\<rceil>\\<rceil>.\n                   P (\\<lambda>_. x) \\<tau> \\<noteq> false \\<tau>;\n        (\\<delta> S) \\<tau> = true \\<tau>;\n        invalid \\<tau> \\<noteq> false \\<tau> \\<and>\n        (\\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n   (S \\<tau>)\\<rceil>\\<rceil>.\n            P (\\<lambda>_. x) \\<tau> \\<noteq> false \\<tau>);\n        \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n  (S \\<tau>)\\<rceil>\\<rceil>.\n           P (\\<lambda>_. x) \\<tau> = null \\<tau>;\n        P x \\<tau> = invalid \\<tau>\\<rbrakk>\n       \\<Longrightarrow> invalid \\<tau> =\n                         ((\\<lambda>_. invalid \\<tau>) and\n                          (\\<lambda>_. OclForall S P \\<tau>))\n                          \\<tau>\n 3. \\<And>\\<tau>.\n       \\<lbrakk>\\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n          (S->including\\<^sub>S\\<^sub>e\\<^sub>t(x) \\<tau>)\\<rceil>\\<rceil>.\n                   P (\\<lambda>_. x) \\<tau> \\<noteq> false \\<tau>;\n        (\\<delta> S) \\<tau> = true \\<tau>;\n        P x \\<tau> \\<noteq> false \\<tau> \\<and>\n        (\\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n   (S \\<tau>)\\<rceil>\\<rceil>.\n            P (\\<lambda>_. x) \\<tau> \\<noteq> false \\<tau>);\n        \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n  (S \\<tau>)\\<rceil>\\<rceil>.\n           P (\\<lambda>_. x) \\<tau> = null \\<tau>;\n        \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n  (S \\<tau>)\\<rceil>\\<rceil>.\n           P (\\<lambda>_. x) \\<tau> = invalid \\<tau>\\<rbrakk>\n       \\<Longrightarrow> invalid \\<tau> =\n                         ((\\<lambda>_. P x \\<tau>) and\n                          (\\<lambda>_. OclForall S P \\<tau>))\n                          \\<tau>", "apply(subgoal_tac \"OclForall S P \\<tau> = invalid \\<tau>\")"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>\\<tau>.\n       \\<lbrakk>\\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n          (S->including\\<^sub>S\\<^sub>e\\<^sub>t(x) \\<tau>)\\<rceil>\\<rceil>.\n                   P (\\<lambda>_. x) \\<tau> \\<noteq> false \\<tau>;\n        (\\<delta> S) \\<tau> = true \\<tau>;\n        null \\<tau> \\<noteq> false \\<tau> \\<and>\n        (\\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n   (S \\<tau>)\\<rceil>\\<rceil>.\n            P (\\<lambda>_. x) \\<tau> \\<noteq> false \\<tau>);\n        P x \\<tau> = null \\<tau>;\n        \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n  (S \\<tau>)\\<rceil>\\<rceil>.\n           P (\\<lambda>_. x) \\<tau> = invalid \\<tau>;\n        OclForall S P \\<tau> = invalid \\<tau>\\<rbrakk>\n       \\<Longrightarrow> invalid \\<tau> =\n                         ((\\<lambda>_. null \\<tau>) and\n                          (\\<lambda>_. OclForall S P \\<tau>))\n                          \\<tau>\n 2. \\<And>\\<tau>.\n       \\<lbrakk>\\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n          (S->including\\<^sub>S\\<^sub>e\\<^sub>t(x) \\<tau>)\\<rceil>\\<rceil>.\n                   P (\\<lambda>_. x) \\<tau> \\<noteq> false \\<tau>;\n        (\\<delta> S) \\<tau> = true \\<tau>;\n        null \\<tau> \\<noteq> false \\<tau> \\<and>\n        (\\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n   (S \\<tau>)\\<rceil>\\<rceil>.\n            P (\\<lambda>_. x) \\<tau> \\<noteq> false \\<tau>);\n        P x \\<tau> = null \\<tau>;\n        \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n  (S \\<tau>)\\<rceil>\\<rceil>.\n           P (\\<lambda>_. x) \\<tau> = invalid \\<tau>\\<rbrakk>\n       \\<Longrightarrow> OclForall S P \\<tau> = invalid \\<tau>\n 3. \\<And>\\<tau>.\n       \\<lbrakk>\\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n          (S->including\\<^sub>S\\<^sub>e\\<^sub>t(x) \\<tau>)\\<rceil>\\<rceil>.\n                   P (\\<lambda>_. x) \\<tau> \\<noteq> false \\<tau>;\n        (\\<delta> S) \\<tau> = true \\<tau>;\n        invalid \\<tau> \\<noteq> false \\<tau> \\<and>\n        (\\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n   (S \\<tau>)\\<rceil>\\<rceil>.\n            P (\\<lambda>_. x) \\<tau> \\<noteq> false \\<tau>);\n        \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n  (S \\<tau>)\\<rceil>\\<rceil>.\n           P (\\<lambda>_. x) \\<tau> = null \\<tau>;\n        P x \\<tau> = invalid \\<tau>\\<rbrakk>\n       \\<Longrightarrow> invalid \\<tau> =\n                         ((\\<lambda>_. invalid \\<tau>) and\n                          (\\<lambda>_. OclForall S P \\<tau>))\n                          \\<tau>\n 4. \\<And>\\<tau>.\n       \\<lbrakk>\\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n          (S->including\\<^sub>S\\<^sub>e\\<^sub>t(x) \\<tau>)\\<rceil>\\<rceil>.\n                   P (\\<lambda>_. x) \\<tau> \\<noteq> false \\<tau>;\n        (\\<delta> S) \\<tau> = true \\<tau>;\n        P x \\<tau> \\<noteq> false \\<tau> \\<and>\n        (\\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n   (S \\<tau>)\\<rceil>\\<rceil>.\n            P (\\<lambda>_. x) \\<tau> \\<noteq> false \\<tau>);\n        \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n  (S \\<tau>)\\<rceil>\\<rceil>.\n           P (\\<lambda>_. x) \\<tau> = null \\<tau>;\n        \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n  (S \\<tau>)\\<rceil>\\<rceil>.\n           P (\\<lambda>_. x) \\<tau> = invalid \\<tau>\\<rbrakk>\n       \\<Longrightarrow> invalid \\<tau> =\n                         ((\\<lambda>_. P x \\<tau>) and\n                          (\\<lambda>_. OclForall S P \\<tau>))\n                          \\<tau>", "apply(simp only:cp_OclAnd[symmetric],simp,simp add:invalid_def bot_fun_def)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>\\<tau>.\n       \\<lbrakk>\\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n          (S->including\\<^sub>S\\<^sub>e\\<^sub>t(x) \\<tau>)\\<rceil>\\<rceil>.\n                   P (\\<lambda>_. x) \\<tau> \\<noteq> false \\<tau>;\n        (\\<delta> S) \\<tau> = true \\<tau>;\n        null \\<tau> \\<noteq> false \\<tau> \\<and>\n        (\\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n   (S \\<tau>)\\<rceil>\\<rceil>.\n            P (\\<lambda>_. x) \\<tau> \\<noteq> false \\<tau>);\n        P x \\<tau> = null \\<tau>;\n        \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n  (S \\<tau>)\\<rceil>\\<rceil>.\n           P (\\<lambda>_. x) \\<tau> = \\<bottom>\\<rbrakk>\n       \\<Longrightarrow> OclForall S P \\<tau> = \\<bottom>\n 2. \\<And>\\<tau>.\n       \\<lbrakk>\\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n          (S->including\\<^sub>S\\<^sub>e\\<^sub>t(x) \\<tau>)\\<rceil>\\<rceil>.\n                   P (\\<lambda>_. x) \\<tau> \\<noteq> false \\<tau>;\n        (\\<delta> S) \\<tau> = true \\<tau>;\n        invalid \\<tau> \\<noteq> false \\<tau> \\<and>\n        (\\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n   (S \\<tau>)\\<rceil>\\<rceil>.\n            P (\\<lambda>_. x) \\<tau> \\<noteq> false \\<tau>);\n        \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n  (S \\<tau>)\\<rceil>\\<rceil>.\n           P (\\<lambda>_. x) \\<tau> = null \\<tau>;\n        P x \\<tau> = invalid \\<tau>\\<rbrakk>\n       \\<Longrightarrow> invalid \\<tau> =\n                         ((\\<lambda>_. invalid \\<tau>) and\n                          (\\<lambda>_. OclForall S P \\<tau>))\n                          \\<tau>\n 3. \\<And>\\<tau>.\n       \\<lbrakk>\\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n          (S->including\\<^sub>S\\<^sub>e\\<^sub>t(x) \\<tau>)\\<rceil>\\<rceil>.\n                   P (\\<lambda>_. x) \\<tau> \\<noteq> false \\<tau>;\n        (\\<delta> S) \\<tau> = true \\<tau>;\n        P x \\<tau> \\<noteq> false \\<tau> \\<and>\n        (\\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n   (S \\<tau>)\\<rceil>\\<rceil>.\n            P (\\<lambda>_. x) \\<tau> \\<noteq> false \\<tau>);\n        \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n  (S \\<tau>)\\<rceil>\\<rceil>.\n           P (\\<lambda>_. x) \\<tau> = null \\<tau>;\n        \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n  (S \\<tau>)\\<rceil>\\<rceil>.\n           P (\\<lambda>_. x) \\<tau> = invalid \\<tau>\\<rbrakk>\n       \\<Longrightarrow> invalid \\<tau> =\n                         ((\\<lambda>_. P x \\<tau>) and\n                          (\\<lambda>_. OclForall S P \\<tau>))\n                          \\<tau>", "apply(unfold OclForall_def, simp add: invalid_def false_def bot_fun_def,simp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>\\<tau>.\n       \\<lbrakk>\\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n          (S->including\\<^sub>S\\<^sub>e\\<^sub>t(x) \\<tau>)\\<rceil>\\<rceil>.\n                   P (\\<lambda>_. x) \\<tau> \\<noteq> false \\<tau>;\n        (\\<delta> S) \\<tau> = true \\<tau>;\n        invalid \\<tau> \\<noteq> false \\<tau> \\<and>\n        (\\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n   (S \\<tau>)\\<rceil>\\<rceil>.\n            P (\\<lambda>_. x) \\<tau> \\<noteq> false \\<tau>);\n        \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n  (S \\<tau>)\\<rceil>\\<rceil>.\n           P (\\<lambda>_. x) \\<tau> = null \\<tau>;\n        P x \\<tau> = invalid \\<tau>\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                    (S \\<tau>)\\<rceil>\\<rceil>.\n                             P (\\<lambda>_. x) \\<tau> \\<noteq>\n                             invalid \\<tau>) \\<longrightarrow>\n                         invalid \\<tau> =\n                         ((\\<lambda>_. invalid \\<tau>) and\n                          (\\<lambda>_. null \\<tau>))\n                          \\<tau>\n 2. \\<And>\\<tau>.\n       \\<lbrakk>\\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n          (S->including\\<^sub>S\\<^sub>e\\<^sub>t(x) \\<tau>)\\<rceil>\\<rceil>.\n                   P (\\<lambda>_. x) \\<tau> \\<noteq> false \\<tau>;\n        (\\<delta> S) \\<tau> = true \\<tau>;\n        P x \\<tau> \\<noteq> false \\<tau> \\<and>\n        (\\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n   (S \\<tau>)\\<rceil>\\<rceil>.\n            P (\\<lambda>_. x) \\<tau> \\<noteq> false \\<tau>);\n        \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n  (S \\<tau>)\\<rceil>\\<rceil>.\n           P (\\<lambda>_. x) \\<tau> = null \\<tau>;\n        \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n  (S \\<tau>)\\<rceil>\\<rceil>.\n           P (\\<lambda>_. x) \\<tau> = invalid \\<tau>\\<rbrakk>\n       \\<Longrightarrow> invalid \\<tau> =\n                         ((\\<lambda>_. P x \\<tau>) and\n                          (\\<lambda>_.\n                              if (\\<delta> S) \\<tau> = true \\<tau>\n                              then if \\<exists>x\n         \\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                               (S \\<tau>)\\<rceil>\\<rceil>.\n   P (\\<lambda>_. x) \\<tau> = false \\<tau>\n                                   then false \\<tau>\n                                   else if \\<exists>x\n              \\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                    (S \\<tau>)\\<rceil>\\<rceil>.\n        P (\\<lambda>_. x) \\<tau> = invalid \\<tau>\n  then invalid \\<tau>\n  else if \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n    (S \\<tau>)\\<rceil>\\<rceil>.\n             P (\\<lambda>_. x) \\<tau> = null \\<tau>\n       then null \\<tau> else true \\<tau>\n                              else \\<bottom>))\n                          \\<tau>", "apply(simp add:cp_OclAnd[symmetric],simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<tau>.\n       \\<lbrakk>\\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n          (S->including\\<^sub>S\\<^sub>e\\<^sub>t(x) \\<tau>)\\<rceil>\\<rceil>.\n                   P (\\<lambda>_. x) \\<tau> \\<noteq> false \\<tau>;\n        (\\<delta> S) \\<tau> = true \\<tau>;\n        P x \\<tau> \\<noteq> false \\<tau> \\<and>\n        (\\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n   (S \\<tau>)\\<rceil>\\<rceil>.\n            P (\\<lambda>_. x) \\<tau> \\<noteq> false \\<tau>);\n        \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n  (S \\<tau>)\\<rceil>\\<rceil>.\n           P (\\<lambda>_. x) \\<tau> = null \\<tau>;\n        \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n  (S \\<tau>)\\<rceil>\\<rceil>.\n           P (\\<lambda>_. x) \\<tau> = invalid \\<tau>\\<rbrakk>\n       \\<Longrightarrow> invalid \\<tau> =\n                         ((\\<lambda>_. P x \\<tau>) and\n                          (\\<lambda>_. invalid \\<tau>))\n                          \\<tau>", "apply(erule conjE)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<tau>.\n       \\<lbrakk>\\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n          (S->including\\<^sub>S\\<^sub>e\\<^sub>t(x) \\<tau>)\\<rceil>\\<rceil>.\n                   P (\\<lambda>_. x) \\<tau> \\<noteq> false \\<tau>;\n        (\\<delta> S) \\<tau> = true \\<tau>;\n        \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n  (S \\<tau>)\\<rceil>\\<rceil>.\n           P (\\<lambda>_. x) \\<tau> = null \\<tau>;\n        \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n  (S \\<tau>)\\<rceil>\\<rceil>.\n           P (\\<lambda>_. x) \\<tau> = invalid \\<tau>;\n        P x \\<tau> \\<noteq> false \\<tau>;\n        \\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n  (S \\<tau>)\\<rceil>\\<rceil>.\n           P (\\<lambda>_. x) \\<tau> \\<noteq> false \\<tau>\\<rbrakk>\n       \\<Longrightarrow> invalid \\<tau> =\n                         ((\\<lambda>_. P x \\<tau>) and\n                          (\\<lambda>_. invalid \\<tau>))\n                          \\<tau>", "apply(subgoal_tac \"(P x \\<tau> = invalid \\<tau>) \\<or> (P x \\<tau> = null \\<tau>) \\<or> (P x \\<tau> = true \\<tau>) \\<or> (P x \\<tau> = false \\<tau>)\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>\\<tau>.\n       \\<lbrakk>\\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n          (S->including\\<^sub>S\\<^sub>e\\<^sub>t(x) \\<tau>)\\<rceil>\\<rceil>.\n                   P (\\<lambda>_. x) \\<tau> \\<noteq> false \\<tau>;\n        (\\<delta> S) \\<tau> = true \\<tau>;\n        \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n  (S \\<tau>)\\<rceil>\\<rceil>.\n           P (\\<lambda>_. x) \\<tau> = null \\<tau>;\n        \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n  (S \\<tau>)\\<rceil>\\<rceil>.\n           P (\\<lambda>_. x) \\<tau> = invalid \\<tau>;\n        P x \\<tau> \\<noteq> false \\<tau>;\n        \\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n  (S \\<tau>)\\<rceil>\\<rceil>.\n           P (\\<lambda>_. x) \\<tau> \\<noteq> false \\<tau>;\n        P x \\<tau> = invalid \\<tau> \\<or>\n        P x \\<tau> = null \\<tau> \\<or>\n        P x \\<tau> = true \\<tau> \\<or> P x \\<tau> = false \\<tau>\\<rbrakk>\n       \\<Longrightarrow> invalid \\<tau> =\n                         ((\\<lambda>_. P x \\<tau>) and\n                          (\\<lambda>_. invalid \\<tau>))\n                          \\<tau>\n 2. \\<And>\\<tau>.\n       \\<lbrakk>\\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n          (S->including\\<^sub>S\\<^sub>e\\<^sub>t(x) \\<tau>)\\<rceil>\\<rceil>.\n                   P (\\<lambda>_. x) \\<tau> \\<noteq> false \\<tau>;\n        (\\<delta> S) \\<tau> = true \\<tau>;\n        \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n  (S \\<tau>)\\<rceil>\\<rceil>.\n           P (\\<lambda>_. x) \\<tau> = null \\<tau>;\n        \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n  (S \\<tau>)\\<rceil>\\<rceil>.\n           P (\\<lambda>_. x) \\<tau> = invalid \\<tau>;\n        P x \\<tau> \\<noteq> false \\<tau>;\n        \\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n  (S \\<tau>)\\<rceil>\\<rceil>.\n           P (\\<lambda>_. x) \\<tau> \\<noteq> false \\<tau>\\<rbrakk>\n       \\<Longrightarrow> P x \\<tau> = invalid \\<tau> \\<or>\n                         P x \\<tau> = null \\<tau> \\<or>\n                         P x \\<tau> = true \\<tau> \\<or>\n                         P x \\<tau> = false \\<tau>", "prefer 2"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>\\<tau>.\n       \\<lbrakk>\\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n          (S->including\\<^sub>S\\<^sub>e\\<^sub>t(x) \\<tau>)\\<rceil>\\<rceil>.\n                   P (\\<lambda>_. x) \\<tau> \\<noteq> false \\<tau>;\n        (\\<delta> S) \\<tau> = true \\<tau>;\n        \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n  (S \\<tau>)\\<rceil>\\<rceil>.\n           P (\\<lambda>_. x) \\<tau> = null \\<tau>;\n        \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n  (S \\<tau>)\\<rceil>\\<rceil>.\n           P (\\<lambda>_. x) \\<tau> = invalid \\<tau>;\n        P x \\<tau> \\<noteq> false \\<tau>;\n        \\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n  (S \\<tau>)\\<rceil>\\<rceil>.\n           P (\\<lambda>_. x) \\<tau> \\<noteq> false \\<tau>\\<rbrakk>\n       \\<Longrightarrow> P x \\<tau> = invalid \\<tau> \\<or>\n                         P x \\<tau> = null \\<tau> \\<or>\n                         P x \\<tau> = true \\<tau> \\<or>\n                         P x \\<tau> = false \\<tau>\n 2. \\<And>\\<tau>.\n       \\<lbrakk>\\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n          (S->including\\<^sub>S\\<^sub>e\\<^sub>t(x) \\<tau>)\\<rceil>\\<rceil>.\n                   P (\\<lambda>_. x) \\<tau> \\<noteq> false \\<tau>;\n        (\\<delta> S) \\<tau> = true \\<tau>;\n        \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n  (S \\<tau>)\\<rceil>\\<rceil>.\n           P (\\<lambda>_. x) \\<tau> = null \\<tau>;\n        \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n  (S \\<tau>)\\<rceil>\\<rceil>.\n           P (\\<lambda>_. x) \\<tau> = invalid \\<tau>;\n        P x \\<tau> \\<noteq> false \\<tau>;\n        \\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n  (S \\<tau>)\\<rceil>\\<rceil>.\n           P (\\<lambda>_. x) \\<tau> \\<noteq> false \\<tau>;\n        P x \\<tau> = invalid \\<tau> \\<or>\n        P x \\<tau> = null \\<tau> \\<or>\n        P x \\<tau> = true \\<tau> \\<or> P x \\<tau> = false \\<tau>\\<rbrakk>\n       \\<Longrightarrow> invalid \\<tau> =\n                         ((\\<lambda>_. P x \\<tau>) and\n                          (\\<lambda>_. invalid \\<tau>))\n                          \\<tau>", "apply(rule bool_split_0)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<tau>.\n       \\<lbrakk>\\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n          (S->including\\<^sub>S\\<^sub>e\\<^sub>t(x) \\<tau>)\\<rceil>\\<rceil>.\n                   P (\\<lambda>_. x) \\<tau> \\<noteq> false \\<tau>;\n        (\\<delta> S) \\<tau> = true \\<tau>;\n        \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n  (S \\<tau>)\\<rceil>\\<rceil>.\n           P (\\<lambda>_. x) \\<tau> = null \\<tau>;\n        \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n  (S \\<tau>)\\<rceil>\\<rceil>.\n           P (\\<lambda>_. x) \\<tau> = invalid \\<tau>;\n        P x \\<tau> \\<noteq> false \\<tau>;\n        \\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n  (S \\<tau>)\\<rceil>\\<rceil>.\n           P (\\<lambda>_. x) \\<tau> \\<noteq> false \\<tau>;\n        P x \\<tau> = invalid \\<tau> \\<or>\n        P x \\<tau> = null \\<tau> \\<or>\n        P x \\<tau> = true \\<tau> \\<or> P x \\<tau> = false \\<tau>\\<rbrakk>\n       \\<Longrightarrow> invalid \\<tau> =\n                         ((\\<lambda>_. P x \\<tau>) and\n                          (\\<lambda>_. invalid \\<tau>))\n                          \\<tau>", "apply(elim disjE, simp_all)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>\\<tau>.\n       \\<lbrakk>\\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n          (S->including\\<^sub>S\\<^sub>e\\<^sub>t(x) \\<tau>)\\<rceil>\\<rceil>.\n                   P (\\<lambda>_. x) \\<tau> \\<noteq> false \\<tau>;\n        (\\<delta> S) \\<tau> = true \\<tau>;\n        \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n  (S \\<tau>)\\<rceil>\\<rceil>.\n           P (\\<lambda>_. x) \\<tau> = null \\<tau>;\n        \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n  (S \\<tau>)\\<rceil>\\<rceil>.\n           P (\\<lambda>_. x) \\<tau> = invalid \\<tau>;\n        null \\<tau> \\<noteq> false \\<tau>;\n        \\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n  (S \\<tau>)\\<rceil>\\<rceil>.\n           P (\\<lambda>_. x) \\<tau> \\<noteq> false \\<tau>;\n        P x \\<tau> = null \\<tau>\\<rbrakk>\n       \\<Longrightarrow> invalid \\<tau> =\n                         ((\\<lambda>_. null \\<tau>) and\n                          (\\<lambda>_. invalid \\<tau>))\n                          \\<tau>\n 2. \\<And>\\<tau>.\n       \\<lbrakk>\\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n          (S->including\\<^sub>S\\<^sub>e\\<^sub>t(x) \\<tau>)\\<rceil>\\<rceil>.\n                   P (\\<lambda>_. x) \\<tau> \\<noteq> false \\<tau>;\n        (\\<delta> S) \\<tau> = true \\<tau>;\n        \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n  (S \\<tau>)\\<rceil>\\<rceil>.\n           P (\\<lambda>_. x) \\<tau> = null \\<tau>;\n        \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n  (S \\<tau>)\\<rceil>\\<rceil>.\n           P (\\<lambda>_. x) \\<tau> = invalid \\<tau>;\n        true \\<tau> \\<noteq> false \\<tau>;\n        \\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n  (S \\<tau>)\\<rceil>\\<rceil>.\n           P (\\<lambda>_. x) \\<tau> \\<noteq> false \\<tau>;\n        P x \\<tau> = true \\<tau>\\<rbrakk>\n       \\<Longrightarrow> invalid \\<tau> =\n                         ((\\<lambda>_. true \\<tau>) and\n                          (\\<lambda>_. invalid \\<tau>))\n                          \\<tau>", "apply(simp only:cp_OclAnd[symmetric],simp)+"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  \\<lbrakk>?\\<tau>3 \\<Turnstile> \\<delta> S and \\<upsilon> x;\n   P x ?\\<tau>3 = null ?\\<tau>3 \\<or>\n   (\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                    (S ?\\<tau>3)\\<rceil>\\<rceil>.\n       P (\\<lambda>_. x) ?\\<tau>3 = null ?\\<tau>3);\n   P x ?\\<tau>3 = invalid ?\\<tau>3 \\<or>\n   (\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                    (S ?\\<tau>3)\\<rceil>\\<rceil>.\n       P (\\<lambda>_. x) ?\\<tau>3 = invalid ?\\<tau>3);\n   \\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                   (S->including\\<^sub>S\\<^sub>e\\<^sub>t(x)\n                                     ?\\<tau>3)\\<rceil>\\<rceil>.\n      P (\\<lambda>_. x) ?\\<tau>3 \\<noteq> false ?\\<tau>3\\<rbrakk>\n  \\<Longrightarrow> invalid ?\\<tau>3 = (P x and OclForall S P) ?\\<tau>3\n\ngoal (1 subgoal):\n 1. OclForall S->including\\<^sub>S\\<^sub>e\\<^sub>t(x) P =\n    (if \\<delta> S and\n        \\<upsilon> x then P x and OclForall S P else invalid endif)", "have A : \"\\<And>\\<tau>. \\<tau> \\<Turnstile> (\\<delta> S and \\<upsilon> x) \\<Longrightarrow>\n                 OclForall (S->including\\<^sub>S\\<^sub>e\\<^sub>t(x)) P \\<tau> = (P x and OclForall S P) \\<tau>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<tau>.\n       \\<tau> \\<Turnstile> \\<delta> S and \\<upsilon> x \\<Longrightarrow>\n       OclForall S->including\\<^sub>S\\<^sub>e\\<^sub>t(x) P \\<tau> =\n       (P x and OclForall S P) \\<tau>", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>\\<tau>.\n       \\<tau> \\<Turnstile> \\<delta> S and \\<upsilon> x \\<Longrightarrow>\n       OclForall S->including\\<^sub>S\\<^sub>e\\<^sub>t(x) P \\<tau> =\n       (P x and OclForall S P) \\<tau>", "fix \\<tau>"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>\\<tau>.\n       \\<tau> \\<Turnstile> \\<delta> S and \\<upsilon> x \\<Longrightarrow>\n       OclForall S->including\\<^sub>S\\<^sub>e\\<^sub>t(x) P \\<tau> =\n       (P x and OclForall S P) \\<tau>", "assume 0 : \"\\<tau> \\<Turnstile> (\\<delta> S and \\<upsilon> x)\""], ["proof (state)\nthis:\n  \\<tau> \\<Turnstile> \\<delta> S and \\<upsilon> x\n\ngoal (1 subgoal):\n 1. \\<And>\\<tau>.\n       \\<tau> \\<Turnstile> \\<delta> S and \\<upsilon> x \\<Longrightarrow>\n       OclForall S->including\\<^sub>S\\<^sub>e\\<^sub>t(x) P \\<tau> =\n       (P x and OclForall S P) \\<tau>", "let ?S = \"\\<lambda>ocl. P x \\<tau> \\<noteq> ocl \\<tau> \\<and> (\\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e (S \\<tau>)\\<rceil>\\<rceil>. P (\\<lambda>_. x) \\<tau> \\<noteq> ocl \\<tau>)\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>\\<tau>.\n       \\<tau> \\<Turnstile> \\<delta> S and \\<upsilon> x \\<Longrightarrow>\n       OclForall S->including\\<^sub>S\\<^sub>e\\<^sub>t(x) P \\<tau> =\n       (P x and OclForall S P) \\<tau>", "let ?S' = \"\\<lambda>ocl. \\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e (S->including\\<^sub>S\\<^sub>e\\<^sub>t(x) \\<tau>)\\<rceil>\\<rceil>. P (\\<lambda>_. x) \\<tau> \\<noteq> ocl \\<tau>\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>\\<tau>.\n       \\<tau> \\<Turnstile> \\<delta> S and \\<upsilon> x \\<Longrightarrow>\n       OclForall S->including\\<^sub>S\\<^sub>e\\<^sub>t(x) P \\<tau> =\n       (P x and OclForall S P) \\<tau>", "let ?assms_1 = \"?S' null\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>\\<tau>.\n       \\<tau> \\<Turnstile> \\<delta> S and \\<upsilon> x \\<Longrightarrow>\n       OclForall S->including\\<^sub>S\\<^sub>e\\<^sub>t(x) P \\<tau> =\n       (P x and OclForall S P) \\<tau>", "let ?assms_2 = \"?S' invalid\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>\\<tau>.\n       \\<tau> \\<Turnstile> \\<delta> S and \\<upsilon> x \\<Longrightarrow>\n       OclForall S->including\\<^sub>S\\<^sub>e\\<^sub>t(x) P \\<tau> =\n       (P x and OclForall S P) \\<tau>", "let ?assms_3 = \"?S' false\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>\\<tau>.\n       \\<tau> \\<Turnstile> \\<delta> S and \\<upsilon> x \\<Longrightarrow>\n       OclForall S->including\\<^sub>S\\<^sub>e\\<^sub>t(x) P \\<tau> =\n       (P x and OclForall S P) \\<tau>", "have 4 : \"?assms_3 \\<Longrightarrow> ?S false\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                    (S->including\\<^sub>S\\<^sub>e\\<^sub>t(x)\n\\<tau>)\\<rceil>\\<rceil>.\n       P (\\<lambda>_. x) \\<tau> \\<noteq> false \\<tau> \\<Longrightarrow>\n    P x \\<tau> \\<noteq> false \\<tau> \\<and>\n    (\\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                     (S \\<tau>)\\<rceil>\\<rceil>.\n        P (\\<lambda>_. x) \\<tau> \\<noteq> false \\<tau>)", "apply(subst  forall_including_invert[of \"\\<lambda> x \\<tau>. P x \\<tau> \\<noteq> false \\<tau>\",symmetric])"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                    (S->including\\<^sub>S\\<^sub>e\\<^sub>t(x)\n\\<tau>)\\<rceil>\\<rceil>.\n       P (\\<lambda>_. x) \\<tau> \\<noteq> false \\<tau> \\<Longrightarrow>\n    (P x \\<tau> \\<noteq> false \\<tau>) =\n    (P (\\<lambda>_. x \\<tau>) \\<tau> \\<noteq> false \\<tau>)\n 2. \\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                    (S->including\\<^sub>S\\<^sub>e\\<^sub>t(x)\n\\<tau>)\\<rceil>\\<rceil>.\n       P (\\<lambda>_. x) \\<tau> \\<noteq> false \\<tau> \\<Longrightarrow>\n    \\<tau> \\<Turnstile> \\<delta> S and \\<upsilon> x\n 3. \\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                    (S->including\\<^sub>S\\<^sub>e\\<^sub>t(x)\n\\<tau>)\\<rceil>\\<rceil>.\n       P (\\<lambda>_. x) \\<tau> \\<noteq> false \\<tau> \\<Longrightarrow>\n    \\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                    (S->including\\<^sub>S\\<^sub>e\\<^sub>t(x)\n\\<tau>)\\<rceil>\\<rceil>.\n       P (\\<lambda>_. x) \\<tau> \\<noteq> false \\<tau>", "by(simp_all add: cp_OclNot_eq 0)"], ["proof (state)\nthis:\n  \\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                  (S->including\\<^sub>S\\<^sub>e\\<^sub>t(x)\n                                    \\<tau>)\\<rceil>\\<rceil>.\n     P (\\<lambda>_. x) \\<tau> \\<noteq> false \\<tau> \\<Longrightarrow>\n  P x \\<tau> \\<noteq> false \\<tau> \\<and>\n  (\\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                   (S \\<tau>)\\<rceil>\\<rceil>.\n      P (\\<lambda>_. x) \\<tau> \\<noteq> false \\<tau>)\n\ngoal (1 subgoal):\n 1. \\<And>\\<tau>.\n       \\<tau> \\<Turnstile> \\<delta> S and \\<upsilon> x \\<Longrightarrow>\n       OclForall S->including\\<^sub>S\\<^sub>e\\<^sub>t(x) P \\<tau> =\n       (P x and OclForall S P) \\<tau>", "have 5 : \"?assms_2 \\<Longrightarrow> ?S invalid\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                    (S->including\\<^sub>S\\<^sub>e\\<^sub>t(x)\n\\<tau>)\\<rceil>\\<rceil>.\n       P (\\<lambda>_. x) \\<tau> \\<noteq> invalid \\<tau> \\<Longrightarrow>\n    P x \\<tau> \\<noteq> invalid \\<tau> \\<and>\n    (\\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                     (S \\<tau>)\\<rceil>\\<rceil>.\n        P (\\<lambda>_. x) \\<tau> \\<noteq> invalid \\<tau>)", "apply(subst  forall_including_invert[of \"\\<lambda> x \\<tau>. P x \\<tau> \\<noteq> invalid \\<tau>\",symmetric])"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                    (S->including\\<^sub>S\\<^sub>e\\<^sub>t(x)\n\\<tau>)\\<rceil>\\<rceil>.\n       P (\\<lambda>_. x) \\<tau> \\<noteq> invalid \\<tau> \\<Longrightarrow>\n    (P x \\<tau> \\<noteq> invalid \\<tau>) =\n    (P (\\<lambda>_. x \\<tau>) \\<tau> \\<noteq> invalid \\<tau>)\n 2. \\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                    (S->including\\<^sub>S\\<^sub>e\\<^sub>t(x)\n\\<tau>)\\<rceil>\\<rceil>.\n       P (\\<lambda>_. x) \\<tau> \\<noteq> invalid \\<tau> \\<Longrightarrow>\n    \\<tau> \\<Turnstile> \\<delta> S and \\<upsilon> x\n 3. \\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                    (S->including\\<^sub>S\\<^sub>e\\<^sub>t(x)\n\\<tau>)\\<rceil>\\<rceil>.\n       P (\\<lambda>_. x) \\<tau> \\<noteq> invalid \\<tau> \\<Longrightarrow>\n    \\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                    (S->including\\<^sub>S\\<^sub>e\\<^sub>t(x)\n\\<tau>)\\<rceil>\\<rceil>.\n       P (\\<lambda>_. x) \\<tau> \\<noteq> invalid \\<tau>", "by(simp_all add: cp_OclNot_eq 0)"], ["proof (state)\nthis:\n  \\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                  (S->including\\<^sub>S\\<^sub>e\\<^sub>t(x)\n                                    \\<tau>)\\<rceil>\\<rceil>.\n     P (\\<lambda>_. x) \\<tau> \\<noteq> invalid \\<tau> \\<Longrightarrow>\n  P x \\<tau> \\<noteq> invalid \\<tau> \\<and>\n  (\\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                   (S \\<tau>)\\<rceil>\\<rceil>.\n      P (\\<lambda>_. x) \\<tau> \\<noteq> invalid \\<tau>)\n\ngoal (1 subgoal):\n 1. \\<And>\\<tau>.\n       \\<tau> \\<Turnstile> \\<delta> S and \\<upsilon> x \\<Longrightarrow>\n       OclForall S->including\\<^sub>S\\<^sub>e\\<^sub>t(x) P \\<tau> =\n       (P x and OclForall S P) \\<tau>", "have 6 : \"?assms_1 \\<Longrightarrow> ?S null\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                    (S->including\\<^sub>S\\<^sub>e\\<^sub>t(x)\n\\<tau>)\\<rceil>\\<rceil>.\n       P (\\<lambda>_. x) \\<tau> \\<noteq> null \\<tau> \\<Longrightarrow>\n    P x \\<tau> \\<noteq> null \\<tau> \\<and>\n    (\\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                     (S \\<tau>)\\<rceil>\\<rceil>.\n        P (\\<lambda>_. x) \\<tau> \\<noteq> null \\<tau>)", "apply(subst forall_including_invert[of \"\\<lambda> x \\<tau>. P x \\<tau> \\<noteq> null \\<tau>\",symmetric])"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                    (S->including\\<^sub>S\\<^sub>e\\<^sub>t(x)\n\\<tau>)\\<rceil>\\<rceil>.\n       P (\\<lambda>_. x) \\<tau> \\<noteq> null \\<tau> \\<Longrightarrow>\n    (P x \\<tau> \\<noteq> null \\<tau>) =\n    (P (\\<lambda>_. x \\<tau>) \\<tau> \\<noteq> null \\<tau>)\n 2. \\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                    (S->including\\<^sub>S\\<^sub>e\\<^sub>t(x)\n\\<tau>)\\<rceil>\\<rceil>.\n       P (\\<lambda>_. x) \\<tau> \\<noteq> null \\<tau> \\<Longrightarrow>\n    \\<tau> \\<Turnstile> \\<delta> S and \\<upsilon> x\n 3. \\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                    (S->including\\<^sub>S\\<^sub>e\\<^sub>t(x)\n\\<tau>)\\<rceil>\\<rceil>.\n       P (\\<lambda>_. x) \\<tau> \\<noteq> null \\<tau> \\<Longrightarrow>\n    \\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                    (S->including\\<^sub>S\\<^sub>e\\<^sub>t(x)\n\\<tau>)\\<rceil>\\<rceil>.\n       P (\\<lambda>_. x) \\<tau> \\<noteq> null \\<tau>", "by(simp_all add: cp_OclNot_eq 0)"], ["proof (state)\nthis:\n  \\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                  (S->including\\<^sub>S\\<^sub>e\\<^sub>t(x)\n                                    \\<tau>)\\<rceil>\\<rceil>.\n     P (\\<lambda>_. x) \\<tau> \\<noteq> null \\<tau> \\<Longrightarrow>\n  P x \\<tau> \\<noteq> null \\<tau> \\<and>\n  (\\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                   (S \\<tau>)\\<rceil>\\<rceil>.\n      P (\\<lambda>_. x) \\<tau> \\<noteq> null \\<tau>)\n\ngoal (1 subgoal):\n 1. \\<And>\\<tau>.\n       \\<tau> \\<Turnstile> \\<delta> S and \\<upsilon> x \\<Longrightarrow>\n       OclForall S->including\\<^sub>S\\<^sub>e\\<^sub>t(x) P \\<tau> =\n       (P x and OclForall S P) \\<tau>", "have 7 : \"(\\<delta> S) \\<tau> = true \\<tau>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<delta> S) \\<tau> = true \\<tau>", "by(insert 0, simp add: foundation10', simp add: OclValid_def)"], ["proof (state)\nthis:\n  (\\<delta> S) \\<tau> = true \\<tau>\n\ngoal (1 subgoal):\n 1. \\<And>\\<tau>.\n       \\<tau> \\<Turnstile> \\<delta> S and \\<upsilon> x \\<Longrightarrow>\n       OclForall S->including\\<^sub>S\\<^sub>e\\<^sub>t(x) P \\<tau> =\n       (P x and OclForall S P) \\<tau>", "show \"?thesis \\<tau>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. OclForall S->including\\<^sub>S\\<^sub>e\\<^sub>t(x) P \\<tau> =\n    (P x and OclForall S P) \\<tau>", "apply(subst OclForall_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (if (\\<delta> S->including\\<^sub>S\\<^sub>e\\<^sub>t(x)) \\<tau> =\n        true \\<tau>\n     then if \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n       (S->including\\<^sub>S\\<^sub>e\\<^sub>t(x) \\<tau>)\\<rceil>\\<rceil>.\n                P (\\<lambda>_. x) \\<tau> = false \\<tau>\n          then false \\<tau>\n          else if \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n            (S->including\\<^sub>S\\<^sub>e\\<^sub>t(x)\n              \\<tau>)\\<rceil>\\<rceil>.\n                     P (\\<lambda>_. x) \\<tau> = invalid \\<tau>\n               then invalid \\<tau>\n               else if \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                 (S->including\\<^sub>S\\<^sub>e\\<^sub>t(x)\n                   \\<tau>)\\<rceil>\\<rceil>.\n                          P (\\<lambda>_. x) \\<tau> = null \\<tau>\n                    then null \\<tau> else true \\<tau>\n     else \\<bottom>) =\n    (P x and OclForall S P) \\<tau>", "apply(simp add: cp_OclAnd[THEN sym] OclValid_def contradict_Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e)"], ["proof (prove)\ngoal (1 subgoal):\n 1. ((\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n(S->including\\<^sub>S\\<^sub>e\\<^sub>t(x) \\<tau>)\\<rceil>\\<rceil>.\n         P (\\<lambda>_. x) \\<tau> = null \\<tau>) \\<longrightarrow>\n     ((\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n (S->including\\<^sub>S\\<^sub>e\\<^sub>t(x) \\<tau>)\\<rceil>\\<rceil>.\n          P (\\<lambda>_. x) \\<tau> = invalid \\<tau>) \\<longrightarrow>\n      ((\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n  (S->including\\<^sub>S\\<^sub>e\\<^sub>t(x) \\<tau>)\\<rceil>\\<rceil>.\n           P (\\<lambda>_. x) \\<tau> = false \\<tau>) \\<longrightarrow>\n       ((\\<delta> S and \\<upsilon> x) \\<tau> = true \\<tau> \\<longrightarrow>\n        false \\<tau> = (P x and OclForall S P) \\<tau>) \\<and>\n       ((\\<delta> S and \\<upsilon> x) \\<tau> \\<noteq>\n        true \\<tau> \\<longrightarrow>\n        \\<bottom> = (P x and OclForall S P) \\<tau>)) \\<and>\n      ((\\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n  (S->including\\<^sub>S\\<^sub>e\\<^sub>t(x) \\<tau>)\\<rceil>\\<rceil>.\n           P (\\<lambda>_. x) \\<tau> \\<noteq> false \\<tau>) \\<longrightarrow>\n       ((\\<delta> S and \\<upsilon> x) \\<tau> = true \\<tau> \\<longrightarrow>\n        invalid \\<tau> = (P x and OclForall S P) \\<tau>) \\<and>\n       ((\\<delta> S and \\<upsilon> x) \\<tau> \\<noteq>\n        true \\<tau> \\<longrightarrow>\n        \\<bottom> = (P x and OclForall S P) \\<tau>))) \\<and>\n     ((\\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n (S->including\\<^sub>S\\<^sub>e\\<^sub>t(x) \\<tau>)\\<rceil>\\<rceil>.\n          P (\\<lambda>_. x) \\<tau> \\<noteq>\n          invalid \\<tau>) \\<longrightarrow>\n      ((\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n  (S->including\\<^sub>S\\<^sub>e\\<^sub>t(x) \\<tau>)\\<rceil>\\<rceil>.\n           P (\\<lambda>_. x) \\<tau> = false \\<tau>) \\<longrightarrow>\n       ((\\<delta> S and \\<upsilon> x) \\<tau> = true \\<tau> \\<longrightarrow>\n        false \\<tau> = (P x and OclForall S P) \\<tau>) \\<and>\n       ((\\<delta> S and \\<upsilon> x) \\<tau> \\<noteq>\n        true \\<tau> \\<longrightarrow>\n        \\<bottom> = (P x and OclForall S P) \\<tau>)) \\<and>\n      ((\\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n  (S->including\\<^sub>S\\<^sub>e\\<^sub>t(x) \\<tau>)\\<rceil>\\<rceil>.\n           P (\\<lambda>_. x) \\<tau> \\<noteq> false \\<tau>) \\<longrightarrow>\n       ((\\<delta> S and \\<upsilon> x) \\<tau> = true \\<tau> \\<longrightarrow>\n        null \\<tau> = (P x and OclForall S P) \\<tau>) \\<and>\n       ((\\<delta> S and \\<upsilon> x) \\<tau> \\<noteq>\n        true \\<tau> \\<longrightarrow>\n        \\<bottom> = (P x and OclForall S P) \\<tau>)))) \\<and>\n    ((\\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n(S->including\\<^sub>S\\<^sub>e\\<^sub>t(x) \\<tau>)\\<rceil>\\<rceil>.\n         P (\\<lambda>_. x) \\<tau> \\<noteq> null \\<tau>) \\<longrightarrow>\n     ((\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n (S->including\\<^sub>S\\<^sub>e\\<^sub>t(x) \\<tau>)\\<rceil>\\<rceil>.\n          P (\\<lambda>_. x) \\<tau> = invalid \\<tau>) \\<longrightarrow>\n      ((\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n  (S->including\\<^sub>S\\<^sub>e\\<^sub>t(x) \\<tau>)\\<rceil>\\<rceil>.\n           P (\\<lambda>_. x) \\<tau> = false \\<tau>) \\<longrightarrow>\n       ((\\<delta> S and \\<upsilon> x) \\<tau> = true \\<tau> \\<longrightarrow>\n        false \\<tau> = (P x and OclForall S P) \\<tau>) \\<and>\n       ((\\<delta> S and \\<upsilon> x) \\<tau> \\<noteq>\n        true \\<tau> \\<longrightarrow>\n        \\<bottom> = (P x and OclForall S P) \\<tau>)) \\<and>\n      ((\\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n  (S->including\\<^sub>S\\<^sub>e\\<^sub>t(x) \\<tau>)\\<rceil>\\<rceil>.\n           P (\\<lambda>_. x) \\<tau> \\<noteq> false \\<tau>) \\<longrightarrow>\n       ((\\<delta> S and \\<upsilon> x) \\<tau> = true \\<tau> \\<longrightarrow>\n        invalid \\<tau> = (P x and OclForall S P) \\<tau>) \\<and>\n       ((\\<delta> S and \\<upsilon> x) \\<tau> \\<noteq>\n        true \\<tau> \\<longrightarrow>\n        \\<bottom> = (P x and OclForall S P) \\<tau>))) \\<and>\n     ((\\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n (S->including\\<^sub>S\\<^sub>e\\<^sub>t(x) \\<tau>)\\<rceil>\\<rceil>.\n          P (\\<lambda>_. x) \\<tau> \\<noteq>\n          invalid \\<tau>) \\<longrightarrow>\n      ((\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n  (S->including\\<^sub>S\\<^sub>e\\<^sub>t(x) \\<tau>)\\<rceil>\\<rceil>.\n           P (\\<lambda>_. x) \\<tau> = false \\<tau>) \\<longrightarrow>\n       ((\\<delta> S and \\<upsilon> x) \\<tau> = true \\<tau> \\<longrightarrow>\n        false \\<tau> = (P x and OclForall S P) \\<tau>) \\<and>\n       ((\\<delta> S and \\<upsilon> x) \\<tau> \\<noteq>\n        true \\<tau> \\<longrightarrow>\n        \\<bottom> = (P x and OclForall S P) \\<tau>)) \\<and>\n      ((\\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n  (S->including\\<^sub>S\\<^sub>e\\<^sub>t(x) \\<tau>)\\<rceil>\\<rceil>.\n           P (\\<lambda>_. x) \\<tau> \\<noteq> false \\<tau>) \\<longrightarrow>\n       ((\\<delta> S and \\<upsilon> x) \\<tau> = true \\<tau> \\<longrightarrow>\n        true \\<tau> = (P x and OclForall S P) \\<tau>) \\<and>\n       ((\\<delta> S and \\<upsilon> x) \\<tau> \\<noteq>\n        true \\<tau> \\<longrightarrow>\n        \\<bottom> = (P x and OclForall S P) \\<tau>))))", "apply(intro conjI impI,fold OclValid_def)"], ["proof (prove)\ngoal (16 subgoals):\n 1. \\<lbrakk>\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n       (S->including\\<^sub>S\\<^sub>e\\<^sub>t(x) \\<tau>)\\<rceil>\\<rceil>.\n                P (\\<lambda>_. x) \\<tau> = null \\<tau>;\n     \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                     (S->including\\<^sub>S\\<^sub>e\\<^sub>t(x)\n \\<tau>)\\<rceil>\\<rceil>.\n        P (\\<lambda>_. x) \\<tau> = invalid \\<tau>;\n     \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                     (S->including\\<^sub>S\\<^sub>e\\<^sub>t(x)\n \\<tau>)\\<rceil>\\<rceil>.\n        P (\\<lambda>_. x) \\<tau> = false \\<tau>;\n     \\<tau> \\<Turnstile> \\<delta> S and \\<upsilon> x\\<rbrakk>\n    \\<Longrightarrow> false \\<tau> = (P x and OclForall S P) \\<tau>\n 2. \\<lbrakk>\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n       (S->including\\<^sub>S\\<^sub>e\\<^sub>t(x) \\<tau>)\\<rceil>\\<rceil>.\n                P (\\<lambda>_. x) \\<tau> = null \\<tau>;\n     \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                     (S->including\\<^sub>S\\<^sub>e\\<^sub>t(x)\n \\<tau>)\\<rceil>\\<rceil>.\n        P (\\<lambda>_. x) \\<tau> = invalid \\<tau>;\n     \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                     (S->including\\<^sub>S\\<^sub>e\\<^sub>t(x)\n \\<tau>)\\<rceil>\\<rceil>.\n        P (\\<lambda>_. x) \\<tau> = false \\<tau>;\n     \\<tau> |\\<noteq> \\<delta> S and \\<upsilon> x\\<rbrakk>\n    \\<Longrightarrow> \\<bottom> = (P x and OclForall S P) \\<tau>\n 3. \\<lbrakk>\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n       (S->including\\<^sub>S\\<^sub>e\\<^sub>t(x) \\<tau>)\\<rceil>\\<rceil>.\n                P (\\<lambda>_. x) \\<tau> = null \\<tau>;\n     \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                     (S->including\\<^sub>S\\<^sub>e\\<^sub>t(x)\n \\<tau>)\\<rceil>\\<rceil>.\n        P (\\<lambda>_. x) \\<tau> = invalid \\<tau>;\n     \\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                     (S->including\\<^sub>S\\<^sub>e\\<^sub>t(x)\n \\<tau>)\\<rceil>\\<rceil>.\n        P (\\<lambda>_. x) \\<tau> \\<noteq> false \\<tau>;\n     \\<tau> \\<Turnstile> \\<delta> S and \\<upsilon> x\\<rbrakk>\n    \\<Longrightarrow> invalid \\<tau> = (P x and OclForall S P) \\<tau>\n 4. \\<lbrakk>\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n       (S->including\\<^sub>S\\<^sub>e\\<^sub>t(x) \\<tau>)\\<rceil>\\<rceil>.\n                P (\\<lambda>_. x) \\<tau> = null \\<tau>;\n     \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                     (S->including\\<^sub>S\\<^sub>e\\<^sub>t(x)\n \\<tau>)\\<rceil>\\<rceil>.\n        P (\\<lambda>_. x) \\<tau> = invalid \\<tau>;\n     \\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                     (S->including\\<^sub>S\\<^sub>e\\<^sub>t(x)\n \\<tau>)\\<rceil>\\<rceil>.\n        P (\\<lambda>_. x) \\<tau> \\<noteq> false \\<tau>;\n     \\<tau> |\\<noteq> \\<delta> S and \\<upsilon> x\\<rbrakk>\n    \\<Longrightarrow> \\<bottom> = (P x and OclForall S P) \\<tau>\n 5. \\<lbrakk>\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n       (S->including\\<^sub>S\\<^sub>e\\<^sub>t(x) \\<tau>)\\<rceil>\\<rceil>.\n                P (\\<lambda>_. x) \\<tau> = null \\<tau>;\n     \\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                     (S->including\\<^sub>S\\<^sub>e\\<^sub>t(x)\n \\<tau>)\\<rceil>\\<rceil>.\n        P (\\<lambda>_. x) \\<tau> \\<noteq> invalid \\<tau>;\n     \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                     (S->including\\<^sub>S\\<^sub>e\\<^sub>t(x)\n \\<tau>)\\<rceil>\\<rceil>.\n        P (\\<lambda>_. x) \\<tau> = false \\<tau>;\n     \\<tau> \\<Turnstile> \\<delta> S and \\<upsilon> x\\<rbrakk>\n    \\<Longrightarrow> false \\<tau> = (P x and OclForall S P) \\<tau>\n 6. \\<lbrakk>\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n       (S->including\\<^sub>S\\<^sub>e\\<^sub>t(x) \\<tau>)\\<rceil>\\<rceil>.\n                P (\\<lambda>_. x) \\<tau> = null \\<tau>;\n     \\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                     (S->including\\<^sub>S\\<^sub>e\\<^sub>t(x)\n \\<tau>)\\<rceil>\\<rceil>.\n        P (\\<lambda>_. x) \\<tau> \\<noteq> invalid \\<tau>;\n     \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                     (S->including\\<^sub>S\\<^sub>e\\<^sub>t(x)\n \\<tau>)\\<rceil>\\<rceil>.\n        P (\\<lambda>_. x) \\<tau> = false \\<tau>;\n     \\<tau> |\\<noteq> \\<delta> S and \\<upsilon> x\\<rbrakk>\n    \\<Longrightarrow> \\<bottom> = (P x and OclForall S P) \\<tau>\n 7. \\<lbrakk>\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n       (S->including\\<^sub>S\\<^sub>e\\<^sub>t(x) \\<tau>)\\<rceil>\\<rceil>.\n                P (\\<lambda>_. x) \\<tau> = null \\<tau>;\n     \\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                     (S->including\\<^sub>S\\<^sub>e\\<^sub>t(x)\n \\<tau>)\\<rceil>\\<rceil>.\n        P (\\<lambda>_. x) \\<tau> \\<noteq> invalid \\<tau>;\n     \\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                     (S->including\\<^sub>S\\<^sub>e\\<^sub>t(x)\n \\<tau>)\\<rceil>\\<rceil>.\n        P (\\<lambda>_. x) \\<tau> \\<noteq> false \\<tau>;\n     \\<tau> \\<Turnstile> \\<delta> S and \\<upsilon> x\\<rbrakk>\n    \\<Longrightarrow> null \\<tau> = (P x and OclForall S P) \\<tau>\n 8. \\<lbrakk>\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n       (S->including\\<^sub>S\\<^sub>e\\<^sub>t(x) \\<tau>)\\<rceil>\\<rceil>.\n                P (\\<lambda>_. x) \\<tau> = null \\<tau>;\n     \\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                     (S->including\\<^sub>S\\<^sub>e\\<^sub>t(x)\n \\<tau>)\\<rceil>\\<rceil>.\n        P (\\<lambda>_. x) \\<tau> \\<noteq> invalid \\<tau>;\n     \\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                     (S->including\\<^sub>S\\<^sub>e\\<^sub>t(x)\n \\<tau>)\\<rceil>\\<rceil>.\n        P (\\<lambda>_. x) \\<tau> \\<noteq> false \\<tau>;\n     \\<tau> |\\<noteq> \\<delta> S and \\<upsilon> x\\<rbrakk>\n    \\<Longrightarrow> \\<bottom> = (P x and OclForall S P) \\<tau>\n 9. \\<lbrakk>\\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n       (S->including\\<^sub>S\\<^sub>e\\<^sub>t(x) \\<tau>)\\<rceil>\\<rceil>.\n                P (\\<lambda>_. x) \\<tau> \\<noteq> null \\<tau>;\n     \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                     (S->including\\<^sub>S\\<^sub>e\\<^sub>t(x)\n \\<tau>)\\<rceil>\\<rceil>.\n        P (\\<lambda>_. x) \\<tau> = invalid \\<tau>;\n     \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                     (S->including\\<^sub>S\\<^sub>e\\<^sub>t(x)\n \\<tau>)\\<rceil>\\<rceil>.\n        P (\\<lambda>_. x) \\<tau> = false \\<tau>;\n     \\<tau> \\<Turnstile> \\<delta> S and \\<upsilon> x\\<rbrakk>\n    \\<Longrightarrow> false \\<tau> = (P x and OclForall S P) \\<tau>\n 10. \\<lbrakk>\\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n        (S->including\\<^sub>S\\<^sub>e\\<^sub>t(x) \\<tau>)\\<rceil>\\<rceil>.\n                 P (\\<lambda>_. x) \\<tau> \\<noteq> null \\<tau>;\n      \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n(S->including\\<^sub>S\\<^sub>e\\<^sub>t(x) \\<tau>)\\<rceil>\\<rceil>.\n         P (\\<lambda>_. x) \\<tau> = invalid \\<tau>;\n      \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n(S->including\\<^sub>S\\<^sub>e\\<^sub>t(x) \\<tau>)\\<rceil>\\<rceil>.\n         P (\\<lambda>_. x) \\<tau> = false \\<tau>;\n      \\<tau> |\\<noteq> \\<delta> S and \\<upsilon> x\\<rbrakk>\n     \\<Longrightarrow> \\<bottom> = (P x and OclForall S P) \\<tau>\nA total of 16 subgoals...", "apply(simp_all add: exists_including_invert[where f = \"\\<lambda> x \\<tau>. P x \\<tau> = null \\<tau>\", OF cp_eq])"], ["proof (prove)\ngoal (16 subgoals):\n 1. \\<lbrakk>P x \\<tau> = null \\<tau> \\<or>\n             (\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n        (S \\<tau>)\\<rceil>\\<rceil>.\n                 P (\\<lambda>_. x) \\<tau> = null \\<tau>);\n     \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                     (S->including\\<^sub>S\\<^sub>e\\<^sub>t(x)\n \\<tau>)\\<rceil>\\<rceil>.\n        P (\\<lambda>_. x) \\<tau> = invalid \\<tau>;\n     \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                     (S->including\\<^sub>S\\<^sub>e\\<^sub>t(x)\n \\<tau>)\\<rceil>\\<rceil>.\n        P (\\<lambda>_. x) \\<tau> = false \\<tau>;\n     \\<tau> \\<Turnstile> \\<delta> S and \\<upsilon> x\\<rbrakk>\n    \\<Longrightarrow> false \\<tau> = (P x and OclForall S P) \\<tau>\n 2. \\<lbrakk>\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n       (S->including\\<^sub>S\\<^sub>e\\<^sub>t(x) \\<tau>)\\<rceil>\\<rceil>.\n                P (\\<lambda>_. x) \\<tau> = null \\<tau>;\n     \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                     (S->including\\<^sub>S\\<^sub>e\\<^sub>t(x)\n \\<tau>)\\<rceil>\\<rceil>.\n        P (\\<lambda>_. x) \\<tau> = invalid \\<tau>;\n     \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                     (S->including\\<^sub>S\\<^sub>e\\<^sub>t(x)\n \\<tau>)\\<rceil>\\<rceil>.\n        P (\\<lambda>_. x) \\<tau> = false \\<tau>;\n     \\<tau> |\\<noteq> \\<delta> S and \\<upsilon> x\\<rbrakk>\n    \\<Longrightarrow> \\<bottom> = (P x and OclForall S P) \\<tau>\n 3. \\<lbrakk>P x \\<tau> = null \\<tau> \\<or>\n             (\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n        (S \\<tau>)\\<rceil>\\<rceil>.\n                 P (\\<lambda>_. x) \\<tau> = null \\<tau>);\n     \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                     (S->including\\<^sub>S\\<^sub>e\\<^sub>t(x)\n \\<tau>)\\<rceil>\\<rceil>.\n        P (\\<lambda>_. x) \\<tau> = invalid \\<tau>;\n     \\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                     (S->including\\<^sub>S\\<^sub>e\\<^sub>t(x)\n \\<tau>)\\<rceil>\\<rceil>.\n        P (\\<lambda>_. x) \\<tau> \\<noteq> false \\<tau>;\n     \\<tau> \\<Turnstile> \\<delta> S and \\<upsilon> x\\<rbrakk>\n    \\<Longrightarrow> invalid \\<tau> = (P x and OclForall S P) \\<tau>\n 4. \\<lbrakk>\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n       (S->including\\<^sub>S\\<^sub>e\\<^sub>t(x) \\<tau>)\\<rceil>\\<rceil>.\n                P (\\<lambda>_. x) \\<tau> = null \\<tau>;\n     \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                     (S->including\\<^sub>S\\<^sub>e\\<^sub>t(x)\n \\<tau>)\\<rceil>\\<rceil>.\n        P (\\<lambda>_. x) \\<tau> = invalid \\<tau>;\n     \\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                     (S->including\\<^sub>S\\<^sub>e\\<^sub>t(x)\n \\<tau>)\\<rceil>\\<rceil>.\n        P (\\<lambda>_. x) \\<tau> \\<noteq> false \\<tau>;\n     \\<tau> |\\<noteq> \\<delta> S and \\<upsilon> x\\<rbrakk>\n    \\<Longrightarrow> \\<bottom> = (P x and OclForall S P) \\<tau>\n 5. \\<lbrakk>P x \\<tau> = null \\<tau> \\<or>\n             (\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n        (S \\<tau>)\\<rceil>\\<rceil>.\n                 P (\\<lambda>_. x) \\<tau> = null \\<tau>);\n     \\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                     (S->including\\<^sub>S\\<^sub>e\\<^sub>t(x)\n \\<tau>)\\<rceil>\\<rceil>.\n        P (\\<lambda>_. x) \\<tau> \\<noteq> invalid \\<tau>;\n     \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                     (S->including\\<^sub>S\\<^sub>e\\<^sub>t(x)\n \\<tau>)\\<rceil>\\<rceil>.\n        P (\\<lambda>_. x) \\<tau> = false \\<tau>;\n     \\<tau> \\<Turnstile> \\<delta> S and \\<upsilon> x\\<rbrakk>\n    \\<Longrightarrow> false \\<tau> = (P x and OclForall S P) \\<tau>\n 6. \\<lbrakk>\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n       (S->including\\<^sub>S\\<^sub>e\\<^sub>t(x) \\<tau>)\\<rceil>\\<rceil>.\n                P (\\<lambda>_. x) \\<tau> = null \\<tau>;\n     \\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                     (S->including\\<^sub>S\\<^sub>e\\<^sub>t(x)\n \\<tau>)\\<rceil>\\<rceil>.\n        P (\\<lambda>_. x) \\<tau> \\<noteq> invalid \\<tau>;\n     \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                     (S->including\\<^sub>S\\<^sub>e\\<^sub>t(x)\n \\<tau>)\\<rceil>\\<rceil>.\n        P (\\<lambda>_. x) \\<tau> = false \\<tau>;\n     \\<tau> |\\<noteq> \\<delta> S and \\<upsilon> x\\<rbrakk>\n    \\<Longrightarrow> \\<bottom> = (P x and OclForall S P) \\<tau>\n 7. \\<lbrakk>P x \\<tau> = null \\<tau> \\<or>\n             (\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n        (S \\<tau>)\\<rceil>\\<rceil>.\n                 P (\\<lambda>_. x) \\<tau> = null \\<tau>);\n     \\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                     (S->including\\<^sub>S\\<^sub>e\\<^sub>t(x)\n \\<tau>)\\<rceil>\\<rceil>.\n        P (\\<lambda>_. x) \\<tau> \\<noteq> invalid \\<tau>;\n     \\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                     (S->including\\<^sub>S\\<^sub>e\\<^sub>t(x)\n \\<tau>)\\<rceil>\\<rceil>.\n        P (\\<lambda>_. x) \\<tau> \\<noteq> false \\<tau>;\n     \\<tau> \\<Turnstile> \\<delta> S and \\<upsilon> x\\<rbrakk>\n    \\<Longrightarrow> null \\<tau> = (P x and OclForall S P) \\<tau>\n 8. \\<lbrakk>\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n       (S->including\\<^sub>S\\<^sub>e\\<^sub>t(x) \\<tau>)\\<rceil>\\<rceil>.\n                P (\\<lambda>_. x) \\<tau> = null \\<tau>;\n     \\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                     (S->including\\<^sub>S\\<^sub>e\\<^sub>t(x)\n \\<tau>)\\<rceil>\\<rceil>.\n        P (\\<lambda>_. x) \\<tau> \\<noteq> invalid \\<tau>;\n     \\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                     (S->including\\<^sub>S\\<^sub>e\\<^sub>t(x)\n \\<tau>)\\<rceil>\\<rceil>.\n        P (\\<lambda>_. x) \\<tau> \\<noteq> false \\<tau>;\n     \\<tau> |\\<noteq> \\<delta> S and \\<upsilon> x\\<rbrakk>\n    \\<Longrightarrow> \\<bottom> = (P x and OclForall S P) \\<tau>\n 9. \\<lbrakk>\\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n       (S->including\\<^sub>S\\<^sub>e\\<^sub>t(x) \\<tau>)\\<rceil>\\<rceil>.\n                P (\\<lambda>_. x) \\<tau> \\<noteq> null \\<tau>;\n     \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                     (S->including\\<^sub>S\\<^sub>e\\<^sub>t(x)\n \\<tau>)\\<rceil>\\<rceil>.\n        P (\\<lambda>_. x) \\<tau> = invalid \\<tau>;\n     \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                     (S->including\\<^sub>S\\<^sub>e\\<^sub>t(x)\n \\<tau>)\\<rceil>\\<rceil>.\n        P (\\<lambda>_. x) \\<tau> = false \\<tau>;\n     \\<tau> \\<Turnstile> \\<delta> S and \\<upsilon> x\\<rbrakk>\n    \\<Longrightarrow> false \\<tau> = (P x and OclForall S P) \\<tau>\n 10. \\<lbrakk>\\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n        (S->including\\<^sub>S\\<^sub>e\\<^sub>t(x) \\<tau>)\\<rceil>\\<rceil>.\n                 P (\\<lambda>_. x) \\<tau> \\<noteq> null \\<tau>;\n      \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n(S->including\\<^sub>S\\<^sub>e\\<^sub>t(x) \\<tau>)\\<rceil>\\<rceil>.\n         P (\\<lambda>_. x) \\<tau> = invalid \\<tau>;\n      \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n(S->including\\<^sub>S\\<^sub>e\\<^sub>t(x) \\<tau>)\\<rceil>\\<rceil>.\n         P (\\<lambda>_. x) \\<tau> = false \\<tau>;\n      \\<tau> |\\<noteq> \\<delta> S and \\<upsilon> x\\<rbrakk>\n     \\<Longrightarrow> \\<bottom> = (P x and OclForall S P) \\<tau>\nA total of 16 subgoals...", "apply(simp_all add: exists_including_invert[where f = \"\\<lambda> x \\<tau>. P x \\<tau> = invalid \\<tau>\", OF cp_eq])"], ["proof (prove)\ngoal (16 subgoals):\n 1. \\<lbrakk>P x \\<tau> = null \\<tau> \\<or>\n             (\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n        (S \\<tau>)\\<rceil>\\<rceil>.\n                 P (\\<lambda>_. x) \\<tau> = null \\<tau>);\n     P x \\<tau> = invalid \\<tau> \\<or>\n     (\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n(S \\<tau>)\\<rceil>\\<rceil>.\n         P (\\<lambda>_. x) \\<tau> = invalid \\<tau>);\n     \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                     (S->including\\<^sub>S\\<^sub>e\\<^sub>t(x)\n \\<tau>)\\<rceil>\\<rceil>.\n        P (\\<lambda>_. x) \\<tau> = false \\<tau>;\n     \\<tau> \\<Turnstile> \\<delta> S and \\<upsilon> x\\<rbrakk>\n    \\<Longrightarrow> false \\<tau> = (P x and OclForall S P) \\<tau>\n 2. \\<lbrakk>\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n       (S->including\\<^sub>S\\<^sub>e\\<^sub>t(x) \\<tau>)\\<rceil>\\<rceil>.\n                P (\\<lambda>_. x) \\<tau> = null \\<tau>;\n     \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                     (S->including\\<^sub>S\\<^sub>e\\<^sub>t(x)\n \\<tau>)\\<rceil>\\<rceil>.\n        P (\\<lambda>_. x) \\<tau> = invalid \\<tau>;\n     \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                     (S->including\\<^sub>S\\<^sub>e\\<^sub>t(x)\n \\<tau>)\\<rceil>\\<rceil>.\n        P (\\<lambda>_. x) \\<tau> = false \\<tau>;\n     \\<tau> |\\<noteq> \\<delta> S and \\<upsilon> x\\<rbrakk>\n    \\<Longrightarrow> \\<bottom> = (P x and OclForall S P) \\<tau>\n 3. \\<lbrakk>P x \\<tau> = null \\<tau> \\<or>\n             (\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n        (S \\<tau>)\\<rceil>\\<rceil>.\n                 P (\\<lambda>_. x) \\<tau> = null \\<tau>);\n     P x \\<tau> = invalid \\<tau> \\<or>\n     (\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n(S \\<tau>)\\<rceil>\\<rceil>.\n         P (\\<lambda>_. x) \\<tau> = invalid \\<tau>);\n     \\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                     (S->including\\<^sub>S\\<^sub>e\\<^sub>t(x)\n \\<tau>)\\<rceil>\\<rceil>.\n        P (\\<lambda>_. x) \\<tau> \\<noteq> false \\<tau>;\n     \\<tau> \\<Turnstile> \\<delta> S and \\<upsilon> x\\<rbrakk>\n    \\<Longrightarrow> invalid \\<tau> = (P x and OclForall S P) \\<tau>\n 4. \\<lbrakk>\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n       (S->including\\<^sub>S\\<^sub>e\\<^sub>t(x) \\<tau>)\\<rceil>\\<rceil>.\n                P (\\<lambda>_. x) \\<tau> = null \\<tau>;\n     \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                     (S->including\\<^sub>S\\<^sub>e\\<^sub>t(x)\n \\<tau>)\\<rceil>\\<rceil>.\n        P (\\<lambda>_. x) \\<tau> = invalid \\<tau>;\n     \\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                     (S->including\\<^sub>S\\<^sub>e\\<^sub>t(x)\n \\<tau>)\\<rceil>\\<rceil>.\n        P (\\<lambda>_. x) \\<tau> \\<noteq> false \\<tau>;\n     \\<tau> |\\<noteq> \\<delta> S and \\<upsilon> x\\<rbrakk>\n    \\<Longrightarrow> \\<bottom> = (P x and OclForall S P) \\<tau>\n 5. \\<lbrakk>P x \\<tau> = null \\<tau> \\<or>\n             (\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n        (S \\<tau>)\\<rceil>\\<rceil>.\n                 P (\\<lambda>_. x) \\<tau> = null \\<tau>);\n     \\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                     (S->including\\<^sub>S\\<^sub>e\\<^sub>t(x)\n \\<tau>)\\<rceil>\\<rceil>.\n        P (\\<lambda>_. x) \\<tau> \\<noteq> invalid \\<tau>;\n     \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                     (S->including\\<^sub>S\\<^sub>e\\<^sub>t(x)\n \\<tau>)\\<rceil>\\<rceil>.\n        P (\\<lambda>_. x) \\<tau> = false \\<tau>;\n     \\<tau> \\<Turnstile> \\<delta> S and \\<upsilon> x\\<rbrakk>\n    \\<Longrightarrow> false \\<tau> = (P x and OclForall S P) \\<tau>\n 6. \\<lbrakk>\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n       (S->including\\<^sub>S\\<^sub>e\\<^sub>t(x) \\<tau>)\\<rceil>\\<rceil>.\n                P (\\<lambda>_. x) \\<tau> = null \\<tau>;\n     \\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                     (S->including\\<^sub>S\\<^sub>e\\<^sub>t(x)\n \\<tau>)\\<rceil>\\<rceil>.\n        P (\\<lambda>_. x) \\<tau> \\<noteq> invalid \\<tau>;\n     \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                     (S->including\\<^sub>S\\<^sub>e\\<^sub>t(x)\n \\<tau>)\\<rceil>\\<rceil>.\n        P (\\<lambda>_. x) \\<tau> = false \\<tau>;\n     \\<tau> |\\<noteq> \\<delta> S and \\<upsilon> x\\<rbrakk>\n    \\<Longrightarrow> \\<bottom> = (P x and OclForall S P) \\<tau>\n 7. \\<lbrakk>P x \\<tau> = null \\<tau> \\<or>\n             (\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n        (S \\<tau>)\\<rceil>\\<rceil>.\n                 P (\\<lambda>_. x) \\<tau> = null \\<tau>);\n     \\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                     (S->including\\<^sub>S\\<^sub>e\\<^sub>t(x)\n \\<tau>)\\<rceil>\\<rceil>.\n        P (\\<lambda>_. x) \\<tau> \\<noteq> invalid \\<tau>;\n     \\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                     (S->including\\<^sub>S\\<^sub>e\\<^sub>t(x)\n \\<tau>)\\<rceil>\\<rceil>.\n        P (\\<lambda>_. x) \\<tau> \\<noteq> false \\<tau>;\n     \\<tau> \\<Turnstile> \\<delta> S and \\<upsilon> x\\<rbrakk>\n    \\<Longrightarrow> null \\<tau> = (P x and OclForall S P) \\<tau>\n 8. \\<lbrakk>\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n       (S->including\\<^sub>S\\<^sub>e\\<^sub>t(x) \\<tau>)\\<rceil>\\<rceil>.\n                P (\\<lambda>_. x) \\<tau> = null \\<tau>;\n     \\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                     (S->including\\<^sub>S\\<^sub>e\\<^sub>t(x)\n \\<tau>)\\<rceil>\\<rceil>.\n        P (\\<lambda>_. x) \\<tau> \\<noteq> invalid \\<tau>;\n     \\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                     (S->including\\<^sub>S\\<^sub>e\\<^sub>t(x)\n \\<tau>)\\<rceil>\\<rceil>.\n        P (\\<lambda>_. x) \\<tau> \\<noteq> false \\<tau>;\n     \\<tau> |\\<noteq> \\<delta> S and \\<upsilon> x\\<rbrakk>\n    \\<Longrightarrow> \\<bottom> = (P x and OclForall S P) \\<tau>\n 9. \\<lbrakk>\\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n       (S->including\\<^sub>S\\<^sub>e\\<^sub>t(x) \\<tau>)\\<rceil>\\<rceil>.\n                P (\\<lambda>_. x) \\<tau> \\<noteq> null \\<tau>;\n     P x \\<tau> = invalid \\<tau> \\<or>\n     (\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n(S \\<tau>)\\<rceil>\\<rceil>.\n         P (\\<lambda>_. x) \\<tau> = invalid \\<tau>);\n     \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                     (S->including\\<^sub>S\\<^sub>e\\<^sub>t(x)\n \\<tau>)\\<rceil>\\<rceil>.\n        P (\\<lambda>_. x) \\<tau> = false \\<tau>;\n     \\<tau> \\<Turnstile> \\<delta> S and \\<upsilon> x\\<rbrakk>\n    \\<Longrightarrow> false \\<tau> = (P x and OclForall S P) \\<tau>\n 10. \\<lbrakk>\\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n        (S->including\\<^sub>S\\<^sub>e\\<^sub>t(x) \\<tau>)\\<rceil>\\<rceil>.\n                 P (\\<lambda>_. x) \\<tau> \\<noteq> null \\<tau>;\n      \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n(S->including\\<^sub>S\\<^sub>e\\<^sub>t(x) \\<tau>)\\<rceil>\\<rceil>.\n         P (\\<lambda>_. x) \\<tau> = invalid \\<tau>;\n      \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n(S->including\\<^sub>S\\<^sub>e\\<^sub>t(x) \\<tau>)\\<rceil>\\<rceil>.\n         P (\\<lambda>_. x) \\<tau> = false \\<tau>;\n      \\<tau> |\\<noteq> \\<delta> S and \\<upsilon> x\\<rbrakk>\n     \\<Longrightarrow> \\<bottom> = (P x and OclForall S P) \\<tau>\nA total of 16 subgoals...", "apply(simp_all add: exists_including_invert[where f = \"\\<lambda> x \\<tau>. P x \\<tau> = false \\<tau>\", OF cp_eq])"], ["proof (prove)\ngoal (16 subgoals):\n 1. \\<lbrakk>P x \\<tau> = null \\<tau> \\<or>\n             (\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n        (S \\<tau>)\\<rceil>\\<rceil>.\n                 P (\\<lambda>_. x) \\<tau> = null \\<tau>);\n     P x \\<tau> = invalid \\<tau> \\<or>\n     (\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n(S \\<tau>)\\<rceil>\\<rceil>.\n         P (\\<lambda>_. x) \\<tau> = invalid \\<tau>);\n     P x \\<tau> = false \\<tau> \\<or>\n     (\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n(S \\<tau>)\\<rceil>\\<rceil>.\n         P (\\<lambda>_. x) \\<tau> = false \\<tau>);\n     \\<tau> \\<Turnstile> \\<delta> S and \\<upsilon> x\\<rbrakk>\n    \\<Longrightarrow> false \\<tau> = (P x and OclForall S P) \\<tau>\n 2. \\<lbrakk>\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n       (S->including\\<^sub>S\\<^sub>e\\<^sub>t(x) \\<tau>)\\<rceil>\\<rceil>.\n                P (\\<lambda>_. x) \\<tau> = null \\<tau>;\n     \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                     (S->including\\<^sub>S\\<^sub>e\\<^sub>t(x)\n \\<tau>)\\<rceil>\\<rceil>.\n        P (\\<lambda>_. x) \\<tau> = invalid \\<tau>;\n     \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                     (S->including\\<^sub>S\\<^sub>e\\<^sub>t(x)\n \\<tau>)\\<rceil>\\<rceil>.\n        P (\\<lambda>_. x) \\<tau> = false \\<tau>;\n     \\<tau> |\\<noteq> \\<delta> S and \\<upsilon> x\\<rbrakk>\n    \\<Longrightarrow> \\<bottom> = (P x and OclForall S P) \\<tau>\n 3. \\<lbrakk>P x \\<tau> = null \\<tau> \\<or>\n             (\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n        (S \\<tau>)\\<rceil>\\<rceil>.\n                 P (\\<lambda>_. x) \\<tau> = null \\<tau>);\n     P x \\<tau> = invalid \\<tau> \\<or>\n     (\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n(S \\<tau>)\\<rceil>\\<rceil>.\n         P (\\<lambda>_. x) \\<tau> = invalid \\<tau>);\n     \\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                     (S->including\\<^sub>S\\<^sub>e\\<^sub>t(x)\n \\<tau>)\\<rceil>\\<rceil>.\n        P (\\<lambda>_. x) \\<tau> \\<noteq> false \\<tau>;\n     \\<tau> \\<Turnstile> \\<delta> S and \\<upsilon> x\\<rbrakk>\n    \\<Longrightarrow> invalid \\<tau> = (P x and OclForall S P) \\<tau>\n 4. \\<lbrakk>\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n       (S->including\\<^sub>S\\<^sub>e\\<^sub>t(x) \\<tau>)\\<rceil>\\<rceil>.\n                P (\\<lambda>_. x) \\<tau> = null \\<tau>;\n     \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                     (S->including\\<^sub>S\\<^sub>e\\<^sub>t(x)\n \\<tau>)\\<rceil>\\<rceil>.\n        P (\\<lambda>_. x) \\<tau> = invalid \\<tau>;\n     \\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                     (S->including\\<^sub>S\\<^sub>e\\<^sub>t(x)\n \\<tau>)\\<rceil>\\<rceil>.\n        P (\\<lambda>_. x) \\<tau> \\<noteq> false \\<tau>;\n     \\<tau> |\\<noteq> \\<delta> S and \\<upsilon> x\\<rbrakk>\n    \\<Longrightarrow> \\<bottom> = (P x and OclForall S P) \\<tau>\n 5. \\<lbrakk>P x \\<tau> = null \\<tau> \\<or>\n             (\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n        (S \\<tau>)\\<rceil>\\<rceil>.\n                 P (\\<lambda>_. x) \\<tau> = null \\<tau>);\n     \\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                     (S->including\\<^sub>S\\<^sub>e\\<^sub>t(x)\n \\<tau>)\\<rceil>\\<rceil>.\n        P (\\<lambda>_. x) \\<tau> \\<noteq> invalid \\<tau>;\n     P x \\<tau> = false \\<tau> \\<or>\n     (\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n(S \\<tau>)\\<rceil>\\<rceil>.\n         P (\\<lambda>_. x) \\<tau> = false \\<tau>);\n     \\<tau> \\<Turnstile> \\<delta> S and \\<upsilon> x\\<rbrakk>\n    \\<Longrightarrow> false \\<tau> = (P x and OclForall S P) \\<tau>\n 6. \\<lbrakk>\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n       (S->including\\<^sub>S\\<^sub>e\\<^sub>t(x) \\<tau>)\\<rceil>\\<rceil>.\n                P (\\<lambda>_. x) \\<tau> = null \\<tau>;\n     \\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                     (S->including\\<^sub>S\\<^sub>e\\<^sub>t(x)\n \\<tau>)\\<rceil>\\<rceil>.\n        P (\\<lambda>_. x) \\<tau> \\<noteq> invalid \\<tau>;\n     \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                     (S->including\\<^sub>S\\<^sub>e\\<^sub>t(x)\n \\<tau>)\\<rceil>\\<rceil>.\n        P (\\<lambda>_. x) \\<tau> = false \\<tau>;\n     \\<tau> |\\<noteq> \\<delta> S and \\<upsilon> x\\<rbrakk>\n    \\<Longrightarrow> \\<bottom> = (P x and OclForall S P) \\<tau>\n 7. \\<lbrakk>P x \\<tau> = null \\<tau> \\<or>\n             (\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n        (S \\<tau>)\\<rceil>\\<rceil>.\n                 P (\\<lambda>_. x) \\<tau> = null \\<tau>);\n     \\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                     (S->including\\<^sub>S\\<^sub>e\\<^sub>t(x)\n \\<tau>)\\<rceil>\\<rceil>.\n        P (\\<lambda>_. x) \\<tau> \\<noteq> invalid \\<tau>;\n     \\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                     (S->including\\<^sub>S\\<^sub>e\\<^sub>t(x)\n \\<tau>)\\<rceil>\\<rceil>.\n        P (\\<lambda>_. x) \\<tau> \\<noteq> false \\<tau>;\n     \\<tau> \\<Turnstile> \\<delta> S and \\<upsilon> x\\<rbrakk>\n    \\<Longrightarrow> null \\<tau> = (P x and OclForall S P) \\<tau>\n 8. \\<lbrakk>\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n       (S->including\\<^sub>S\\<^sub>e\\<^sub>t(x) \\<tau>)\\<rceil>\\<rceil>.\n                P (\\<lambda>_. x) \\<tau> = null \\<tau>;\n     \\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                     (S->including\\<^sub>S\\<^sub>e\\<^sub>t(x)\n \\<tau>)\\<rceil>\\<rceil>.\n        P (\\<lambda>_. x) \\<tau> \\<noteq> invalid \\<tau>;\n     \\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                     (S->including\\<^sub>S\\<^sub>e\\<^sub>t(x)\n \\<tau>)\\<rceil>\\<rceil>.\n        P (\\<lambda>_. x) \\<tau> \\<noteq> false \\<tau>;\n     \\<tau> |\\<noteq> \\<delta> S and \\<upsilon> x\\<rbrakk>\n    \\<Longrightarrow> \\<bottom> = (P x and OclForall S P) \\<tau>\n 9. \\<lbrakk>\\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n       (S->including\\<^sub>S\\<^sub>e\\<^sub>t(x) \\<tau>)\\<rceil>\\<rceil>.\n                P (\\<lambda>_. x) \\<tau> \\<noteq> null \\<tau>;\n     P x \\<tau> = invalid \\<tau> \\<or>\n     (\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n(S \\<tau>)\\<rceil>\\<rceil>.\n         P (\\<lambda>_. x) \\<tau> = invalid \\<tau>);\n     P x \\<tau> = false \\<tau> \\<or>\n     (\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n(S \\<tau>)\\<rceil>\\<rceil>.\n         P (\\<lambda>_. x) \\<tau> = false \\<tau>);\n     \\<tau> \\<Turnstile> \\<delta> S and \\<upsilon> x\\<rbrakk>\n    \\<Longrightarrow> false \\<tau> = (P x and OclForall S P) \\<tau>\n 10. \\<lbrakk>\\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n        (S->including\\<^sub>S\\<^sub>e\\<^sub>t(x) \\<tau>)\\<rceil>\\<rceil>.\n                 P (\\<lambda>_. x) \\<tau> \\<noteq> null \\<tau>;\n      \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n(S->including\\<^sub>S\\<^sub>e\\<^sub>t(x) \\<tau>)\\<rceil>\\<rceil>.\n         P (\\<lambda>_. x) \\<tau> = invalid \\<tau>;\n      \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n(S->including\\<^sub>S\\<^sub>e\\<^sub>t(x) \\<tau>)\\<rceil>\\<rceil>.\n         P (\\<lambda>_. x) \\<tau> = false \\<tau>;\n      \\<tau> |\\<noteq> \\<delta> S and \\<upsilon> x\\<rbrakk>\n     \\<Longrightarrow> \\<bottom> = (P x and OclForall S P) \\<tau>\nA total of 16 subgoals...", "proof -"], ["proof (state)\ngoal (16 subgoals):\n 1. \\<lbrakk>P x \\<tau> = null \\<tau> \\<or>\n             (\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n        (S \\<tau>)\\<rceil>\\<rceil>.\n                 P (\\<lambda>_. x) \\<tau> = null \\<tau>);\n     P x \\<tau> = invalid \\<tau> \\<or>\n     (\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n(S \\<tau>)\\<rceil>\\<rceil>.\n         P (\\<lambda>_. x) \\<tau> = invalid \\<tau>);\n     P x \\<tau> = false \\<tau> \\<or>\n     (\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n(S \\<tau>)\\<rceil>\\<rceil>.\n         P (\\<lambda>_. x) \\<tau> = false \\<tau>);\n     \\<tau> \\<Turnstile> \\<delta> S and \\<upsilon> x\\<rbrakk>\n    \\<Longrightarrow> false \\<tau> = (P x and OclForall S P) \\<tau>\n 2. \\<lbrakk>\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n       (S->including\\<^sub>S\\<^sub>e\\<^sub>t(x) \\<tau>)\\<rceil>\\<rceil>.\n                P (\\<lambda>_. x) \\<tau> = null \\<tau>;\n     \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                     (S->including\\<^sub>S\\<^sub>e\\<^sub>t(x)\n \\<tau>)\\<rceil>\\<rceil>.\n        P (\\<lambda>_. x) \\<tau> = invalid \\<tau>;\n     \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                     (S->including\\<^sub>S\\<^sub>e\\<^sub>t(x)\n \\<tau>)\\<rceil>\\<rceil>.\n        P (\\<lambda>_. x) \\<tau> = false \\<tau>;\n     \\<tau> |\\<noteq> \\<delta> S and \\<upsilon> x\\<rbrakk>\n    \\<Longrightarrow> \\<bottom> = (P x and OclForall S P) \\<tau>\n 3. \\<lbrakk>P x \\<tau> = null \\<tau> \\<or>\n             (\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n        (S \\<tau>)\\<rceil>\\<rceil>.\n                 P (\\<lambda>_. x) \\<tau> = null \\<tau>);\n     P x \\<tau> = invalid \\<tau> \\<or>\n     (\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n(S \\<tau>)\\<rceil>\\<rceil>.\n         P (\\<lambda>_. x) \\<tau> = invalid \\<tau>);\n     \\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                     (S->including\\<^sub>S\\<^sub>e\\<^sub>t(x)\n \\<tau>)\\<rceil>\\<rceil>.\n        P (\\<lambda>_. x) \\<tau> \\<noteq> false \\<tau>;\n     \\<tau> \\<Turnstile> \\<delta> S and \\<upsilon> x\\<rbrakk>\n    \\<Longrightarrow> invalid \\<tau> = (P x and OclForall S P) \\<tau>\n 4. \\<lbrakk>\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n       (S->including\\<^sub>S\\<^sub>e\\<^sub>t(x) \\<tau>)\\<rceil>\\<rceil>.\n                P (\\<lambda>_. x) \\<tau> = null \\<tau>;\n     \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                     (S->including\\<^sub>S\\<^sub>e\\<^sub>t(x)\n \\<tau>)\\<rceil>\\<rceil>.\n        P (\\<lambda>_. x) \\<tau> = invalid \\<tau>;\n     \\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                     (S->including\\<^sub>S\\<^sub>e\\<^sub>t(x)\n \\<tau>)\\<rceil>\\<rceil>.\n        P (\\<lambda>_. x) \\<tau> \\<noteq> false \\<tau>;\n     \\<tau> |\\<noteq> \\<delta> S and \\<upsilon> x\\<rbrakk>\n    \\<Longrightarrow> \\<bottom> = (P x and OclForall S P) \\<tau>\n 5. \\<lbrakk>P x \\<tau> = null \\<tau> \\<or>\n             (\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n        (S \\<tau>)\\<rceil>\\<rceil>.\n                 P (\\<lambda>_. x) \\<tau> = null \\<tau>);\n     \\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                     (S->including\\<^sub>S\\<^sub>e\\<^sub>t(x)\n \\<tau>)\\<rceil>\\<rceil>.\n        P (\\<lambda>_. x) \\<tau> \\<noteq> invalid \\<tau>;\n     P x \\<tau> = false \\<tau> \\<or>\n     (\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n(S \\<tau>)\\<rceil>\\<rceil>.\n         P (\\<lambda>_. x) \\<tau> = false \\<tau>);\n     \\<tau> \\<Turnstile> \\<delta> S and \\<upsilon> x\\<rbrakk>\n    \\<Longrightarrow> false \\<tau> = (P x and OclForall S P) \\<tau>\n 6. \\<lbrakk>\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n       (S->including\\<^sub>S\\<^sub>e\\<^sub>t(x) \\<tau>)\\<rceil>\\<rceil>.\n                P (\\<lambda>_. x) \\<tau> = null \\<tau>;\n     \\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                     (S->including\\<^sub>S\\<^sub>e\\<^sub>t(x)\n \\<tau>)\\<rceil>\\<rceil>.\n        P (\\<lambda>_. x) \\<tau> \\<noteq> invalid \\<tau>;\n     \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                     (S->including\\<^sub>S\\<^sub>e\\<^sub>t(x)\n \\<tau>)\\<rceil>\\<rceil>.\n        P (\\<lambda>_. x) \\<tau> = false \\<tau>;\n     \\<tau> |\\<noteq> \\<delta> S and \\<upsilon> x\\<rbrakk>\n    \\<Longrightarrow> \\<bottom> = (P x and OclForall S P) \\<tau>\n 7. \\<lbrakk>P x \\<tau> = null \\<tau> \\<or>\n             (\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n        (S \\<tau>)\\<rceil>\\<rceil>.\n                 P (\\<lambda>_. x) \\<tau> = null \\<tau>);\n     \\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                     (S->including\\<^sub>S\\<^sub>e\\<^sub>t(x)\n \\<tau>)\\<rceil>\\<rceil>.\n        P (\\<lambda>_. x) \\<tau> \\<noteq> invalid \\<tau>;\n     \\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                     (S->including\\<^sub>S\\<^sub>e\\<^sub>t(x)\n \\<tau>)\\<rceil>\\<rceil>.\n        P (\\<lambda>_. x) \\<tau> \\<noteq> false \\<tau>;\n     \\<tau> \\<Turnstile> \\<delta> S and \\<upsilon> x\\<rbrakk>\n    \\<Longrightarrow> null \\<tau> = (P x and OclForall S P) \\<tau>\n 8. \\<lbrakk>\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n       (S->including\\<^sub>S\\<^sub>e\\<^sub>t(x) \\<tau>)\\<rceil>\\<rceil>.\n                P (\\<lambda>_. x) \\<tau> = null \\<tau>;\n     \\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                     (S->including\\<^sub>S\\<^sub>e\\<^sub>t(x)\n \\<tau>)\\<rceil>\\<rceil>.\n        P (\\<lambda>_. x) \\<tau> \\<noteq> invalid \\<tau>;\n     \\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                     (S->including\\<^sub>S\\<^sub>e\\<^sub>t(x)\n \\<tau>)\\<rceil>\\<rceil>.\n        P (\\<lambda>_. x) \\<tau> \\<noteq> false \\<tau>;\n     \\<tau> |\\<noteq> \\<delta> S and \\<upsilon> x\\<rbrakk>\n    \\<Longrightarrow> \\<bottom> = (P x and OclForall S P) \\<tau>\n 9. \\<lbrakk>\\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n       (S->including\\<^sub>S\\<^sub>e\\<^sub>t(x) \\<tau>)\\<rceil>\\<rceil>.\n                P (\\<lambda>_. x) \\<tau> \\<noteq> null \\<tau>;\n     P x \\<tau> = invalid \\<tau> \\<or>\n     (\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n(S \\<tau>)\\<rceil>\\<rceil>.\n         P (\\<lambda>_. x) \\<tau> = invalid \\<tau>);\n     P x \\<tau> = false \\<tau> \\<or>\n     (\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n(S \\<tau>)\\<rceil>\\<rceil>.\n         P (\\<lambda>_. x) \\<tau> = false \\<tau>);\n     \\<tau> \\<Turnstile> \\<delta> S and \\<upsilon> x\\<rbrakk>\n    \\<Longrightarrow> false \\<tau> = (P x and OclForall S P) \\<tau>\n 10. \\<lbrakk>\\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n        (S->including\\<^sub>S\\<^sub>e\\<^sub>t(x) \\<tau>)\\<rceil>\\<rceil>.\n                 P (\\<lambda>_. x) \\<tau> \\<noteq> null \\<tau>;\n      \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n(S->including\\<^sub>S\\<^sub>e\\<^sub>t(x) \\<tau>)\\<rceil>\\<rceil>.\n         P (\\<lambda>_. x) \\<tau> = invalid \\<tau>;\n      \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n(S->including\\<^sub>S\\<^sub>e\\<^sub>t(x) \\<tau>)\\<rceil>\\<rceil>.\n         P (\\<lambda>_. x) \\<tau> = false \\<tau>;\n      \\<tau> |\\<noteq> \\<delta> S and \\<upsilon> x\\<rbrakk>\n     \\<Longrightarrow> \\<bottom> = (P x and OclForall S P) \\<tau>\nA total of 16 subgoals...", "assume 1 : \"P x \\<tau> = null \\<tau> \\<or> (\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e (S \\<tau>)\\<rceil>\\<rceil>. P (\\<lambda>_. x) \\<tau> = null \\<tau>)\"\n              and    2 : ?assms_2\n              and    3 : ?assms_3"], ["proof (state)\nthis:\n  P x \\<tau> = null \\<tau> \\<or>\n  (\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                   (S \\<tau>)\\<rceil>\\<rceil>.\n      P (\\<lambda>_. x) \\<tau> = null \\<tau>)\n  \\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                  (S->including\\<^sub>S\\<^sub>e\\<^sub>t(x)\n                                    \\<tau>)\\<rceil>\\<rceil>.\n     P (\\<lambda>_. x) \\<tau> \\<noteq> invalid \\<tau>\n  \\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                  (S->including\\<^sub>S\\<^sub>e\\<^sub>t(x)\n                                    \\<tau>)\\<rceil>\\<rceil>.\n     P (\\<lambda>_. x) \\<tau> \\<noteq> false \\<tau>\n\ngoal (16 subgoals):\n 1. \\<lbrakk>P x \\<tau> = null \\<tau> \\<or>\n             (\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n        (S \\<tau>)\\<rceil>\\<rceil>.\n                 P (\\<lambda>_. x) \\<tau> = null \\<tau>);\n     P x \\<tau> = invalid \\<tau> \\<or>\n     (\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n(S \\<tau>)\\<rceil>\\<rceil>.\n         P (\\<lambda>_. x) \\<tau> = invalid \\<tau>);\n     P x \\<tau> = false \\<tau> \\<or>\n     (\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n(S \\<tau>)\\<rceil>\\<rceil>.\n         P (\\<lambda>_. x) \\<tau> = false \\<tau>);\n     \\<tau> \\<Turnstile> \\<delta> S and \\<upsilon> x\\<rbrakk>\n    \\<Longrightarrow> false \\<tau> = (P x and OclForall S P) \\<tau>\n 2. \\<lbrakk>\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n       (S->including\\<^sub>S\\<^sub>e\\<^sub>t(x) \\<tau>)\\<rceil>\\<rceil>.\n                P (\\<lambda>_. x) \\<tau> = null \\<tau>;\n     \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                     (S->including\\<^sub>S\\<^sub>e\\<^sub>t(x)\n \\<tau>)\\<rceil>\\<rceil>.\n        P (\\<lambda>_. x) \\<tau> = invalid \\<tau>;\n     \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                     (S->including\\<^sub>S\\<^sub>e\\<^sub>t(x)\n \\<tau>)\\<rceil>\\<rceil>.\n        P (\\<lambda>_. x) \\<tau> = false \\<tau>;\n     \\<tau> |\\<noteq> \\<delta> S and \\<upsilon> x\\<rbrakk>\n    \\<Longrightarrow> \\<bottom> = (P x and OclForall S P) \\<tau>\n 3. \\<lbrakk>P x \\<tau> = null \\<tau> \\<or>\n             (\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n        (S \\<tau>)\\<rceil>\\<rceil>.\n                 P (\\<lambda>_. x) \\<tau> = null \\<tau>);\n     P x \\<tau> = invalid \\<tau> \\<or>\n     (\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n(S \\<tau>)\\<rceil>\\<rceil>.\n         P (\\<lambda>_. x) \\<tau> = invalid \\<tau>);\n     \\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                     (S->including\\<^sub>S\\<^sub>e\\<^sub>t(x)\n \\<tau>)\\<rceil>\\<rceil>.\n        P (\\<lambda>_. x) \\<tau> \\<noteq> false \\<tau>;\n     \\<tau> \\<Turnstile> \\<delta> S and \\<upsilon> x\\<rbrakk>\n    \\<Longrightarrow> invalid \\<tau> = (P x and OclForall S P) \\<tau>\n 4. \\<lbrakk>\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n       (S->including\\<^sub>S\\<^sub>e\\<^sub>t(x) \\<tau>)\\<rceil>\\<rceil>.\n                P (\\<lambda>_. x) \\<tau> = null \\<tau>;\n     \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                     (S->including\\<^sub>S\\<^sub>e\\<^sub>t(x)\n \\<tau>)\\<rceil>\\<rceil>.\n        P (\\<lambda>_. x) \\<tau> = invalid \\<tau>;\n     \\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                     (S->including\\<^sub>S\\<^sub>e\\<^sub>t(x)\n \\<tau>)\\<rceil>\\<rceil>.\n        P (\\<lambda>_. x) \\<tau> \\<noteq> false \\<tau>;\n     \\<tau> |\\<noteq> \\<delta> S and \\<upsilon> x\\<rbrakk>\n    \\<Longrightarrow> \\<bottom> = (P x and OclForall S P) \\<tau>\n 5. \\<lbrakk>P x \\<tau> = null \\<tau> \\<or>\n             (\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n        (S \\<tau>)\\<rceil>\\<rceil>.\n                 P (\\<lambda>_. x) \\<tau> = null \\<tau>);\n     \\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                     (S->including\\<^sub>S\\<^sub>e\\<^sub>t(x)\n \\<tau>)\\<rceil>\\<rceil>.\n        P (\\<lambda>_. x) \\<tau> \\<noteq> invalid \\<tau>;\n     P x \\<tau> = false \\<tau> \\<or>\n     (\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n(S \\<tau>)\\<rceil>\\<rceil>.\n         P (\\<lambda>_. x) \\<tau> = false \\<tau>);\n     \\<tau> \\<Turnstile> \\<delta> S and \\<upsilon> x\\<rbrakk>\n    \\<Longrightarrow> false \\<tau> = (P x and OclForall S P) \\<tau>\n 6. \\<lbrakk>\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n       (S->including\\<^sub>S\\<^sub>e\\<^sub>t(x) \\<tau>)\\<rceil>\\<rceil>.\n                P (\\<lambda>_. x) \\<tau> = null \\<tau>;\n     \\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                     (S->including\\<^sub>S\\<^sub>e\\<^sub>t(x)\n \\<tau>)\\<rceil>\\<rceil>.\n        P (\\<lambda>_. x) \\<tau> \\<noteq> invalid \\<tau>;\n     \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                     (S->including\\<^sub>S\\<^sub>e\\<^sub>t(x)\n \\<tau>)\\<rceil>\\<rceil>.\n        P (\\<lambda>_. x) \\<tau> = false \\<tau>;\n     \\<tau> |\\<noteq> \\<delta> S and \\<upsilon> x\\<rbrakk>\n    \\<Longrightarrow> \\<bottom> = (P x and OclForall S P) \\<tau>\n 7. \\<lbrakk>P x \\<tau> = null \\<tau> \\<or>\n             (\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n        (S \\<tau>)\\<rceil>\\<rceil>.\n                 P (\\<lambda>_. x) \\<tau> = null \\<tau>);\n     \\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                     (S->including\\<^sub>S\\<^sub>e\\<^sub>t(x)\n \\<tau>)\\<rceil>\\<rceil>.\n        P (\\<lambda>_. x) \\<tau> \\<noteq> invalid \\<tau>;\n     \\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                     (S->including\\<^sub>S\\<^sub>e\\<^sub>t(x)\n \\<tau>)\\<rceil>\\<rceil>.\n        P (\\<lambda>_. x) \\<tau> \\<noteq> false \\<tau>;\n     \\<tau> \\<Turnstile> \\<delta> S and \\<upsilon> x\\<rbrakk>\n    \\<Longrightarrow> null \\<tau> = (P x and OclForall S P) \\<tau>\n 8. \\<lbrakk>\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n       (S->including\\<^sub>S\\<^sub>e\\<^sub>t(x) \\<tau>)\\<rceil>\\<rceil>.\n                P (\\<lambda>_. x) \\<tau> = null \\<tau>;\n     \\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                     (S->including\\<^sub>S\\<^sub>e\\<^sub>t(x)\n \\<tau>)\\<rceil>\\<rceil>.\n        P (\\<lambda>_. x) \\<tau> \\<noteq> invalid \\<tau>;\n     \\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                     (S->including\\<^sub>S\\<^sub>e\\<^sub>t(x)\n \\<tau>)\\<rceil>\\<rceil>.\n        P (\\<lambda>_. x) \\<tau> \\<noteq> false \\<tau>;\n     \\<tau> |\\<noteq> \\<delta> S and \\<upsilon> x\\<rbrakk>\n    \\<Longrightarrow> \\<bottom> = (P x and OclForall S P) \\<tau>\n 9. \\<lbrakk>\\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n       (S->including\\<^sub>S\\<^sub>e\\<^sub>t(x) \\<tau>)\\<rceil>\\<rceil>.\n                P (\\<lambda>_. x) \\<tau> \\<noteq> null \\<tau>;\n     P x \\<tau> = invalid \\<tau> \\<or>\n     (\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n(S \\<tau>)\\<rceil>\\<rceil>.\n         P (\\<lambda>_. x) \\<tau> = invalid \\<tau>);\n     P x \\<tau> = false \\<tau> \\<or>\n     (\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n(S \\<tau>)\\<rceil>\\<rceil>.\n         P (\\<lambda>_. x) \\<tau> = false \\<tau>);\n     \\<tau> \\<Turnstile> \\<delta> S and \\<upsilon> x\\<rbrakk>\n    \\<Longrightarrow> false \\<tau> = (P x and OclForall S P) \\<tau>\n 10. \\<lbrakk>\\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n        (S->including\\<^sub>S\\<^sub>e\\<^sub>t(x) \\<tau>)\\<rceil>\\<rceil>.\n                 P (\\<lambda>_. x) \\<tau> \\<noteq> null \\<tau>;\n      \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n(S->including\\<^sub>S\\<^sub>e\\<^sub>t(x) \\<tau>)\\<rceil>\\<rceil>.\n         P (\\<lambda>_. x) \\<tau> = invalid \\<tau>;\n      \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n(S->including\\<^sub>S\\<^sub>e\\<^sub>t(x) \\<tau>)\\<rceil>\\<rceil>.\n         P (\\<lambda>_. x) \\<tau> = false \\<tau>;\n      \\<tau> |\\<noteq> \\<delta> S and \\<upsilon> x\\<rbrakk>\n     \\<Longrightarrow> \\<bottom> = (P x and OclForall S P) \\<tau>\nA total of 16 subgoals...", "show   \"null \\<tau> = (P x and OclForall S P) \\<tau>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. null \\<tau> = (P x and OclForall S P) \\<tau>", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. null \\<tau> = (P x and OclForall S P) \\<tau>", "note 4 = 4[OF 3]"], ["proof (state)\nthis:\n  P x \\<tau> \\<noteq> false \\<tau> \\<and>\n  (\\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                   (S \\<tau>)\\<rceil>\\<rceil>.\n      P (\\<lambda>_. x) \\<tau> \\<noteq> false \\<tau>)\n\ngoal (1 subgoal):\n 1. null \\<tau> = (P x and OclForall S P) \\<tau>", "note 5 = 5[OF 2]"], ["proof (state)\nthis:\n  P x \\<tau> \\<noteq> invalid \\<tau> \\<and>\n  (\\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                   (S \\<tau>)\\<rceil>\\<rceil>.\n      P (\\<lambda>_. x) \\<tau> \\<noteq> invalid \\<tau>)\n\ngoal (1 subgoal):\n 1. null \\<tau> = (P x and OclForall S P) \\<tau>", "have 6 : \"P x \\<tau> = null \\<tau> \\<or> P x \\<tau> = true \\<tau>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P x \\<tau> = null \\<tau> \\<or> P x \\<tau> = true \\<tau>", "by(metis 4 5 bool_split_0)"], ["proof (state)\nthis:\n  P x \\<tau> = null \\<tau> \\<or> P x \\<tau> = true \\<tau>\n\ngoal (1 subgoal):\n 1. null \\<tau> = (P x and OclForall S P) \\<tau>", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. null \\<tau> = (P x and OclForall S P) \\<tau>", "apply(insert 6, elim disjE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. P x \\<tau> = null \\<tau> \\<Longrightarrow>\n    null \\<tau> = (P x and OclForall S P) \\<tau>\n 2. P x \\<tau> = true \\<tau> \\<Longrightarrow>\n    null \\<tau> = (P x and OclForall S P) \\<tau>", "apply(subst cp_OclAnd)"], ["proof (prove)\ngoal (2 subgoals):\n 1. P x \\<tau> = null \\<tau> \\<Longrightarrow>\n    null \\<tau> =\n    ((\\<lambda>_. P x \\<tau>) and (\\<lambda>_. OclForall S P \\<tau>)) \\<tau>\n 2. P x \\<tau> = true \\<tau> \\<Longrightarrow>\n    null \\<tau> = (P x and OclForall S P) \\<tau>", "apply(simp add: OclForall_def 7 4[THEN conjunct2] 5[THEN conjunct2])"], ["proof (prove)\ngoal (2 subgoals):\n 1. P x \\<tau> = null \\<tau> \\<Longrightarrow>\n    (\\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                     (S \\<tau>)\\<rceil>\\<rceil>.\n        P (\\<lambda>_. x) \\<tau> \\<noteq> null \\<tau>) \\<longrightarrow>\n    null \\<tau> =\n    ((\\<lambda>_. null \\<tau>) and (\\<lambda>_. true \\<tau>)) \\<tau>\n 2. P x \\<tau> = true \\<tau> \\<Longrightarrow>\n    null \\<tau> = (P x and OclForall S P) \\<tau>", "apply(simp_all add:cp_OclAnd[symmetric])"], ["proof (prove)\ngoal (1 subgoal):\n 1. P x \\<tau> = true \\<tau> \\<Longrightarrow>\n    null \\<tau> = (P x and OclForall S P) \\<tau>", "apply(subst cp_OclAnd, simp_all add:cp_OclAnd[symmetric] OclForall_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. P x \\<tau> = true \\<tau> \\<Longrightarrow>\n    ((\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n(S \\<tau>)\\<rceil>\\<rceil>.\n         P (\\<lambda>_. x) \\<tau> = null \\<tau>) \\<longrightarrow>\n     ((\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n (S \\<tau>)\\<rceil>\\<rceil>.\n          P (\\<lambda>_. x) \\<tau> = invalid \\<tau>) \\<longrightarrow>\n      ((\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n  (S \\<tau>)\\<rceil>\\<rceil>.\n           P (\\<lambda>_. x) \\<tau> = false \\<tau>) \\<longrightarrow>\n       ((\\<delta> S) \\<tau> = true \\<tau> \\<longrightarrow>\n        null \\<tau> = false \\<tau>) \\<and>\n       ((\\<delta> S) \\<tau> \\<noteq> true \\<tau> \\<longrightarrow>\n        null \\<tau> =\n        ((\\<lambda>_. true \\<tau>) and (\\<lambda>_. \\<bottom>))\n         \\<tau>)) \\<and>\n      ((\\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n  (S \\<tau>)\\<rceil>\\<rceil>.\n           P (\\<lambda>_. x) \\<tau> \\<noteq> false \\<tau>) \\<longrightarrow>\n       ((\\<delta> S) \\<tau> = true \\<tau> \\<longrightarrow>\n        null \\<tau> = invalid \\<tau>) \\<and>\n       ((\\<delta> S) \\<tau> \\<noteq> true \\<tau> \\<longrightarrow>\n        null \\<tau> =\n        ((\\<lambda>_. true \\<tau>) and (\\<lambda>_. \\<bottom>))\n         \\<tau>))) \\<and>\n     ((\\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n (S \\<tau>)\\<rceil>\\<rceil>.\n          P (\\<lambda>_. x) \\<tau> \\<noteq>\n          invalid \\<tau>) \\<longrightarrow>\n      ((\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n  (S \\<tau>)\\<rceil>\\<rceil>.\n           P (\\<lambda>_. x) \\<tau> = false \\<tau>) \\<longrightarrow>\n       ((\\<delta> S) \\<tau> = true \\<tau> \\<longrightarrow>\n        null \\<tau> = false \\<tau>) \\<and>\n       ((\\<delta> S) \\<tau> \\<noteq> true \\<tau> \\<longrightarrow>\n        null \\<tau> =\n        ((\\<lambda>_. true \\<tau>) and (\\<lambda>_. \\<bottom>))\n         \\<tau>)) \\<and>\n      ((\\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n  (S \\<tau>)\\<rceil>\\<rceil>.\n           P (\\<lambda>_. x) \\<tau> \\<noteq> false \\<tau>) \\<longrightarrow>\n       (\\<delta> S) \\<tau> \\<noteq> true \\<tau> \\<longrightarrow>\n       null \\<tau> =\n       ((\\<lambda>_. true \\<tau>) and (\\<lambda>_. \\<bottom>))\n        \\<tau>))) \\<and>\n    ((\\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n(S \\<tau>)\\<rceil>\\<rceil>.\n         P (\\<lambda>_. x) \\<tau> \\<noteq> null \\<tau>) \\<longrightarrow>\n     ((\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n (S \\<tau>)\\<rceil>\\<rceil>.\n          P (\\<lambda>_. x) \\<tau> = invalid \\<tau>) \\<longrightarrow>\n      ((\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n  (S \\<tau>)\\<rceil>\\<rceil>.\n           P (\\<lambda>_. x) \\<tau> = false \\<tau>) \\<longrightarrow>\n       ((\\<delta> S) \\<tau> = true \\<tau> \\<longrightarrow>\n        null \\<tau> = false \\<tau>) \\<and>\n       ((\\<delta> S) \\<tau> \\<noteq> true \\<tau> \\<longrightarrow>\n        null \\<tau> =\n        ((\\<lambda>_. true \\<tau>) and (\\<lambda>_. \\<bottom>))\n         \\<tau>)) \\<and>\n      ((\\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n  (S \\<tau>)\\<rceil>\\<rceil>.\n           P (\\<lambda>_. x) \\<tau> \\<noteq> false \\<tau>) \\<longrightarrow>\n       ((\\<delta> S) \\<tau> = true \\<tau> \\<longrightarrow>\n        null \\<tau> = invalid \\<tau>) \\<and>\n       ((\\<delta> S) \\<tau> \\<noteq> true \\<tau> \\<longrightarrow>\n        null \\<tau> =\n        ((\\<lambda>_. true \\<tau>) and (\\<lambda>_. \\<bottom>))\n         \\<tau>))) \\<and>\n     ((\\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n (S \\<tau>)\\<rceil>\\<rceil>.\n          P (\\<lambda>_. x) \\<tau> \\<noteq>\n          invalid \\<tau>) \\<longrightarrow>\n      ((\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n  (S \\<tau>)\\<rceil>\\<rceil>.\n           P (\\<lambda>_. x) \\<tau> = false \\<tau>) \\<longrightarrow>\n       ((\\<delta> S) \\<tau> = true \\<tau> \\<longrightarrow>\n        null \\<tau> = false \\<tau>) \\<and>\n       ((\\<delta> S) \\<tau> \\<noteq> true \\<tau> \\<longrightarrow>\n        null \\<tau> =\n        ((\\<lambda>_. true \\<tau>) and (\\<lambda>_. \\<bottom>))\n         \\<tau>)) \\<and>\n      ((\\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n  (S \\<tau>)\\<rceil>\\<rceil>.\n           P (\\<lambda>_. x) \\<tau> \\<noteq> false \\<tau>) \\<longrightarrow>\n       ((\\<delta> S) \\<tau> = true \\<tau> \\<longrightarrow>\n        null \\<tau> = true \\<tau>) \\<and>\n       ((\\<delta> S) \\<tau> \\<noteq> true \\<tau> \\<longrightarrow>\n        null \\<tau> =\n        ((\\<lambda>_. true \\<tau>) and (\\<lambda>_. \\<bottom>)) \\<tau>))))", "apply(simp add:4[THEN conjunct2] 5[THEN conjunct2] 0[simplified OclValid_def] 7)"], ["proof (prove)\ngoal (1 subgoal):\n 1. P x \\<tau> = true \\<tau> \\<Longrightarrow>\n    (\\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                     (S \\<tau>)\\<rceil>\\<rceil>.\n        P (\\<lambda>_. x) \\<tau> \\<noteq> null \\<tau>) \\<longrightarrow>\n    null \\<tau> = true \\<tau>", "apply(insert 1, elim disjE, auto)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  null \\<tau> = (P x and OclForall S P) \\<tau>\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  null \\<tau> = (P x and OclForall S P) \\<tau>\n\ngoal (15 subgoals):\n 1. \\<lbrakk>P x \\<tau> = null \\<tau> \\<or>\n             (\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n        (S \\<tau>)\\<rceil>\\<rceil>.\n                 P (\\<lambda>_. x) \\<tau> = null \\<tau>);\n     P x \\<tau> = invalid \\<tau> \\<or>\n     (\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n(S \\<tau>)\\<rceil>\\<rceil>.\n         P (\\<lambda>_. x) \\<tau> = invalid \\<tau>);\n     P x \\<tau> = false \\<tau> \\<or>\n     (\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n(S \\<tau>)\\<rceil>\\<rceil>.\n         P (\\<lambda>_. x) \\<tau> = false \\<tau>);\n     \\<tau> \\<Turnstile> \\<delta> S and \\<upsilon> x\\<rbrakk>\n    \\<Longrightarrow> false \\<tau> = (P x and OclForall S P) \\<tau>\n 2. \\<lbrakk>\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n       (S->including\\<^sub>S\\<^sub>e\\<^sub>t(x) \\<tau>)\\<rceil>\\<rceil>.\n                P (\\<lambda>_. x) \\<tau> = null \\<tau>;\n     \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                     (S->including\\<^sub>S\\<^sub>e\\<^sub>t(x)\n \\<tau>)\\<rceil>\\<rceil>.\n        P (\\<lambda>_. x) \\<tau> = invalid \\<tau>;\n     \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                     (S->including\\<^sub>S\\<^sub>e\\<^sub>t(x)\n \\<tau>)\\<rceil>\\<rceil>.\n        P (\\<lambda>_. x) \\<tau> = false \\<tau>;\n     \\<tau> |\\<noteq> \\<delta> S and \\<upsilon> x\\<rbrakk>\n    \\<Longrightarrow> \\<bottom> = (P x and OclForall S P) \\<tau>\n 3. \\<lbrakk>P x \\<tau> = null \\<tau> \\<or>\n             (\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n        (S \\<tau>)\\<rceil>\\<rceil>.\n                 P (\\<lambda>_. x) \\<tau> = null \\<tau>);\n     P x \\<tau> = invalid \\<tau> \\<or>\n     (\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n(S \\<tau>)\\<rceil>\\<rceil>.\n         P (\\<lambda>_. x) \\<tau> = invalid \\<tau>);\n     \\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                     (S->including\\<^sub>S\\<^sub>e\\<^sub>t(x)\n \\<tau>)\\<rceil>\\<rceil>.\n        P (\\<lambda>_. x) \\<tau> \\<noteq> false \\<tau>;\n     \\<tau> \\<Turnstile> \\<delta> S and \\<upsilon> x\\<rbrakk>\n    \\<Longrightarrow> invalid \\<tau> = (P x and OclForall S P) \\<tau>\n 4. \\<lbrakk>\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n       (S->including\\<^sub>S\\<^sub>e\\<^sub>t(x) \\<tau>)\\<rceil>\\<rceil>.\n                P (\\<lambda>_. x) \\<tau> = null \\<tau>;\n     \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                     (S->including\\<^sub>S\\<^sub>e\\<^sub>t(x)\n \\<tau>)\\<rceil>\\<rceil>.\n        P (\\<lambda>_. x) \\<tau> = invalid \\<tau>;\n     \\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                     (S->including\\<^sub>S\\<^sub>e\\<^sub>t(x)\n \\<tau>)\\<rceil>\\<rceil>.\n        P (\\<lambda>_. x) \\<tau> \\<noteq> false \\<tau>;\n     \\<tau> |\\<noteq> \\<delta> S and \\<upsilon> x\\<rbrakk>\n    \\<Longrightarrow> \\<bottom> = (P x and OclForall S P) \\<tau>\n 5. \\<lbrakk>P x \\<tau> = null \\<tau> \\<or>\n             (\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n        (S \\<tau>)\\<rceil>\\<rceil>.\n                 P (\\<lambda>_. x) \\<tau> = null \\<tau>);\n     \\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                     (S->including\\<^sub>S\\<^sub>e\\<^sub>t(x)\n \\<tau>)\\<rceil>\\<rceil>.\n        P (\\<lambda>_. x) \\<tau> \\<noteq> invalid \\<tau>;\n     P x \\<tau> = false \\<tau> \\<or>\n     (\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n(S \\<tau>)\\<rceil>\\<rceil>.\n         P (\\<lambda>_. x) \\<tau> = false \\<tau>);\n     \\<tau> \\<Turnstile> \\<delta> S and \\<upsilon> x\\<rbrakk>\n    \\<Longrightarrow> false \\<tau> = (P x and OclForall S P) \\<tau>\n 6. \\<lbrakk>\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n       (S->including\\<^sub>S\\<^sub>e\\<^sub>t(x) \\<tau>)\\<rceil>\\<rceil>.\n                P (\\<lambda>_. x) \\<tau> = null \\<tau>;\n     \\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                     (S->including\\<^sub>S\\<^sub>e\\<^sub>t(x)\n \\<tau>)\\<rceil>\\<rceil>.\n        P (\\<lambda>_. x) \\<tau> \\<noteq> invalid \\<tau>;\n     \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                     (S->including\\<^sub>S\\<^sub>e\\<^sub>t(x)\n \\<tau>)\\<rceil>\\<rceil>.\n        P (\\<lambda>_. x) \\<tau> = false \\<tau>;\n     \\<tau> |\\<noteq> \\<delta> S and \\<upsilon> x\\<rbrakk>\n    \\<Longrightarrow> \\<bottom> = (P x and OclForall S P) \\<tau>\n 7. \\<lbrakk>\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n       (S->including\\<^sub>S\\<^sub>e\\<^sub>t(x) \\<tau>)\\<rceil>\\<rceil>.\n                P (\\<lambda>_. x) \\<tau> = null \\<tau>;\n     \\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                     (S->including\\<^sub>S\\<^sub>e\\<^sub>t(x)\n \\<tau>)\\<rceil>\\<rceil>.\n        P (\\<lambda>_. x) \\<tau> \\<noteq> invalid \\<tau>;\n     \\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                     (S->including\\<^sub>S\\<^sub>e\\<^sub>t(x)\n \\<tau>)\\<rceil>\\<rceil>.\n        P (\\<lambda>_. x) \\<tau> \\<noteq> false \\<tau>;\n     \\<tau> |\\<noteq> \\<delta> S and \\<upsilon> x\\<rbrakk>\n    \\<Longrightarrow> \\<bottom> = (P x and OclForall S P) \\<tau>\n 8. \\<lbrakk>\\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n       (S->including\\<^sub>S\\<^sub>e\\<^sub>t(x) \\<tau>)\\<rceil>\\<rceil>.\n                P (\\<lambda>_. x) \\<tau> \\<noteq> null \\<tau>;\n     P x \\<tau> = invalid \\<tau> \\<or>\n     (\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n(S \\<tau>)\\<rceil>\\<rceil>.\n         P (\\<lambda>_. x) \\<tau> = invalid \\<tau>);\n     P x \\<tau> = false \\<tau> \\<or>\n     (\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n(S \\<tau>)\\<rceil>\\<rceil>.\n         P (\\<lambda>_. x) \\<tau> = false \\<tau>);\n     \\<tau> \\<Turnstile> \\<delta> S and \\<upsilon> x\\<rbrakk>\n    \\<Longrightarrow> false \\<tau> = (P x and OclForall S P) \\<tau>\n 9. \\<lbrakk>\\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n       (S->including\\<^sub>S\\<^sub>e\\<^sub>t(x) \\<tau>)\\<rceil>\\<rceil>.\n                P (\\<lambda>_. x) \\<tau> \\<noteq> null \\<tau>;\n     \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                     (S->including\\<^sub>S\\<^sub>e\\<^sub>t(x)\n \\<tau>)\\<rceil>\\<rceil>.\n        P (\\<lambda>_. x) \\<tau> = invalid \\<tau>;\n     \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                     (S->including\\<^sub>S\\<^sub>e\\<^sub>t(x)\n \\<tau>)\\<rceil>\\<rceil>.\n        P (\\<lambda>_. x) \\<tau> = false \\<tau>;\n     \\<tau> |\\<noteq> \\<delta> S and \\<upsilon> x\\<rbrakk>\n    \\<Longrightarrow> \\<bottom> = (P x and OclForall S P) \\<tau>\n 10. \\<lbrakk>\\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n        (S->including\\<^sub>S\\<^sub>e\\<^sub>t(x) \\<tau>)\\<rceil>\\<rceil>.\n                 P (\\<lambda>_. x) \\<tau> \\<noteq> null \\<tau>;\n      P x \\<tau> = invalid \\<tau> \\<or>\n      (\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n (S \\<tau>)\\<rceil>\\<rceil>.\n          P (\\<lambda>_. x) \\<tau> = invalid \\<tau>);\n      \\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n(S->including\\<^sub>S\\<^sub>e\\<^sub>t(x) \\<tau>)\\<rceil>\\<rceil>.\n         P (\\<lambda>_. x) \\<tau> \\<noteq> false \\<tau>;\n      \\<tau> \\<Turnstile> \\<delta> S and \\<upsilon> x\\<rbrakk>\n     \\<Longrightarrow> invalid \\<tau> = (P x and OclForall S P) \\<tau>\nA total of 15 subgoals...", "next"], ["proof (state)\ngoal (15 subgoals):\n 1. \\<lbrakk>P x \\<tau> = null \\<tau> \\<or>\n             (\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n        (S \\<tau>)\\<rceil>\\<rceil>.\n                 P (\\<lambda>_. x) \\<tau> = null \\<tau>);\n     P x \\<tau> = invalid \\<tau> \\<or>\n     (\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n(S \\<tau>)\\<rceil>\\<rceil>.\n         P (\\<lambda>_. x) \\<tau> = invalid \\<tau>);\n     P x \\<tau> = false \\<tau> \\<or>\n     (\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n(S \\<tau>)\\<rceil>\\<rceil>.\n         P (\\<lambda>_. x) \\<tau> = false \\<tau>);\n     \\<tau> \\<Turnstile> \\<delta> S and \\<upsilon> x\\<rbrakk>\n    \\<Longrightarrow> false \\<tau> = (P x and OclForall S P) \\<tau>\n 2. \\<lbrakk>\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n       (S->including\\<^sub>S\\<^sub>e\\<^sub>t(x) \\<tau>)\\<rceil>\\<rceil>.\n                P (\\<lambda>_. x) \\<tau> = null \\<tau>;\n     \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                     (S->including\\<^sub>S\\<^sub>e\\<^sub>t(x)\n \\<tau>)\\<rceil>\\<rceil>.\n        P (\\<lambda>_. x) \\<tau> = invalid \\<tau>;\n     \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                     (S->including\\<^sub>S\\<^sub>e\\<^sub>t(x)\n \\<tau>)\\<rceil>\\<rceil>.\n        P (\\<lambda>_. x) \\<tau> = false \\<tau>;\n     \\<tau> |\\<noteq> \\<delta> S and \\<upsilon> x\\<rbrakk>\n    \\<Longrightarrow> \\<bottom> = (P x and OclForall S P) \\<tau>\n 3. \\<lbrakk>P x \\<tau> = null \\<tau> \\<or>\n             (\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n        (S \\<tau>)\\<rceil>\\<rceil>.\n                 P (\\<lambda>_. x) \\<tau> = null \\<tau>);\n     P x \\<tau> = invalid \\<tau> \\<or>\n     (\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n(S \\<tau>)\\<rceil>\\<rceil>.\n         P (\\<lambda>_. x) \\<tau> = invalid \\<tau>);\n     \\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                     (S->including\\<^sub>S\\<^sub>e\\<^sub>t(x)\n \\<tau>)\\<rceil>\\<rceil>.\n        P (\\<lambda>_. x) \\<tau> \\<noteq> false \\<tau>;\n     \\<tau> \\<Turnstile> \\<delta> S and \\<upsilon> x\\<rbrakk>\n    \\<Longrightarrow> invalid \\<tau> = (P x and OclForall S P) \\<tau>\n 4. \\<lbrakk>\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n       (S->including\\<^sub>S\\<^sub>e\\<^sub>t(x) \\<tau>)\\<rceil>\\<rceil>.\n                P (\\<lambda>_. x) \\<tau> = null \\<tau>;\n     \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                     (S->including\\<^sub>S\\<^sub>e\\<^sub>t(x)\n \\<tau>)\\<rceil>\\<rceil>.\n        P (\\<lambda>_. x) \\<tau> = invalid \\<tau>;\n     \\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                     (S->including\\<^sub>S\\<^sub>e\\<^sub>t(x)\n \\<tau>)\\<rceil>\\<rceil>.\n        P (\\<lambda>_. x) \\<tau> \\<noteq> false \\<tau>;\n     \\<tau> |\\<noteq> \\<delta> S and \\<upsilon> x\\<rbrakk>\n    \\<Longrightarrow> \\<bottom> = (P x and OclForall S P) \\<tau>\n 5. \\<lbrakk>P x \\<tau> = null \\<tau> \\<or>\n             (\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n        (S \\<tau>)\\<rceil>\\<rceil>.\n                 P (\\<lambda>_. x) \\<tau> = null \\<tau>);\n     \\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                     (S->including\\<^sub>S\\<^sub>e\\<^sub>t(x)\n \\<tau>)\\<rceil>\\<rceil>.\n        P (\\<lambda>_. x) \\<tau> \\<noteq> invalid \\<tau>;\n     P x \\<tau> = false \\<tau> \\<or>\n     (\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n(S \\<tau>)\\<rceil>\\<rceil>.\n         P (\\<lambda>_. x) \\<tau> = false \\<tau>);\n     \\<tau> \\<Turnstile> \\<delta> S and \\<upsilon> x\\<rbrakk>\n    \\<Longrightarrow> false \\<tau> = (P x and OclForall S P) \\<tau>\n 6. \\<lbrakk>\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n       (S->including\\<^sub>S\\<^sub>e\\<^sub>t(x) \\<tau>)\\<rceil>\\<rceil>.\n                P (\\<lambda>_. x) \\<tau> = null \\<tau>;\n     \\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                     (S->including\\<^sub>S\\<^sub>e\\<^sub>t(x)\n \\<tau>)\\<rceil>\\<rceil>.\n        P (\\<lambda>_. x) \\<tau> \\<noteq> invalid \\<tau>;\n     \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                     (S->including\\<^sub>S\\<^sub>e\\<^sub>t(x)\n \\<tau>)\\<rceil>\\<rceil>.\n        P (\\<lambda>_. x) \\<tau> = false \\<tau>;\n     \\<tau> |\\<noteq> \\<delta> S and \\<upsilon> x\\<rbrakk>\n    \\<Longrightarrow> \\<bottom> = (P x and OclForall S P) \\<tau>\n 7. \\<lbrakk>\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n       (S->including\\<^sub>S\\<^sub>e\\<^sub>t(x) \\<tau>)\\<rceil>\\<rceil>.\n                P (\\<lambda>_. x) \\<tau> = null \\<tau>;\n     \\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                     (S->including\\<^sub>S\\<^sub>e\\<^sub>t(x)\n \\<tau>)\\<rceil>\\<rceil>.\n        P (\\<lambda>_. x) \\<tau> \\<noteq> invalid \\<tau>;\n     \\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                     (S->including\\<^sub>S\\<^sub>e\\<^sub>t(x)\n \\<tau>)\\<rceil>\\<rceil>.\n        P (\\<lambda>_. x) \\<tau> \\<noteq> false \\<tau>;\n     \\<tau> |\\<noteq> \\<delta> S and \\<upsilon> x\\<rbrakk>\n    \\<Longrightarrow> \\<bottom> = (P x and OclForall S P) \\<tau>\n 8. \\<lbrakk>\\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n       (S->including\\<^sub>S\\<^sub>e\\<^sub>t(x) \\<tau>)\\<rceil>\\<rceil>.\n                P (\\<lambda>_. x) \\<tau> \\<noteq> null \\<tau>;\n     P x \\<tau> = invalid \\<tau> \\<or>\n     (\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n(S \\<tau>)\\<rceil>\\<rceil>.\n         P (\\<lambda>_. x) \\<tau> = invalid \\<tau>);\n     P x \\<tau> = false \\<tau> \\<or>\n     (\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n(S \\<tau>)\\<rceil>\\<rceil>.\n         P (\\<lambda>_. x) \\<tau> = false \\<tau>);\n     \\<tau> \\<Turnstile> \\<delta> S and \\<upsilon> x\\<rbrakk>\n    \\<Longrightarrow> false \\<tau> = (P x and OclForall S P) \\<tau>\n 9. \\<lbrakk>\\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n       (S->including\\<^sub>S\\<^sub>e\\<^sub>t(x) \\<tau>)\\<rceil>\\<rceil>.\n                P (\\<lambda>_. x) \\<tau> \\<noteq> null \\<tau>;\n     \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                     (S->including\\<^sub>S\\<^sub>e\\<^sub>t(x)\n \\<tau>)\\<rceil>\\<rceil>.\n        P (\\<lambda>_. x) \\<tau> = invalid \\<tau>;\n     \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                     (S->including\\<^sub>S\\<^sub>e\\<^sub>t(x)\n \\<tau>)\\<rceil>\\<rceil>.\n        P (\\<lambda>_. x) \\<tau> = false \\<tau>;\n     \\<tau> |\\<noteq> \\<delta> S and \\<upsilon> x\\<rbrakk>\n    \\<Longrightarrow> \\<bottom> = (P x and OclForall S P) \\<tau>\n 10. \\<lbrakk>\\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n        (S->including\\<^sub>S\\<^sub>e\\<^sub>t(x) \\<tau>)\\<rceil>\\<rceil>.\n                 P (\\<lambda>_. x) \\<tau> \\<noteq> null \\<tau>;\n      P x \\<tau> = invalid \\<tau> \\<or>\n      (\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n (S \\<tau>)\\<rceil>\\<rceil>.\n          P (\\<lambda>_. x) \\<tau> = invalid \\<tau>);\n      \\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n(S->including\\<^sub>S\\<^sub>e\\<^sub>t(x) \\<tau>)\\<rceil>\\<rceil>.\n         P (\\<lambda>_. x) \\<tau> \\<noteq> false \\<tau>;\n      \\<tau> \\<Turnstile> \\<delta> S and \\<upsilon> x\\<rbrakk>\n     \\<Longrightarrow> invalid \\<tau> = (P x and OclForall S P) \\<tau>\nA total of 15 subgoals...", "assume 1 : ?assms_1\n              and    2 : \"P x \\<tau> = invalid \\<tau> \\<or> (\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e (S \\<tau>)\\<rceil>\\<rceil>. P (\\<lambda>_. x) \\<tau> = invalid \\<tau>)\"\n              and    3 : ?assms_3"], ["proof (state)\nthis:\n  \\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                  (S->including\\<^sub>S\\<^sub>e\\<^sub>t(x)\n                                    \\<tau>)\\<rceil>\\<rceil>.\n     P (\\<lambda>_. x) \\<tau> \\<noteq> null \\<tau>\n  P x \\<tau> = invalid \\<tau> \\<or>\n  (\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                   (S \\<tau>)\\<rceil>\\<rceil>.\n      P (\\<lambda>_. x) \\<tau> = invalid \\<tau>)\n  \\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                  (S->including\\<^sub>S\\<^sub>e\\<^sub>t(x)\n                                    \\<tau>)\\<rceil>\\<rceil>.\n     P (\\<lambda>_. x) \\<tau> \\<noteq> false \\<tau>\n\ngoal (15 subgoals):\n 1. \\<lbrakk>P x \\<tau> = null \\<tau> \\<or>\n             (\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n        (S \\<tau>)\\<rceil>\\<rceil>.\n                 P (\\<lambda>_. x) \\<tau> = null \\<tau>);\n     P x \\<tau> = invalid \\<tau> \\<or>\n     (\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n(S \\<tau>)\\<rceil>\\<rceil>.\n         P (\\<lambda>_. x) \\<tau> = invalid \\<tau>);\n     P x \\<tau> = false \\<tau> \\<or>\n     (\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n(S \\<tau>)\\<rceil>\\<rceil>.\n         P (\\<lambda>_. x) \\<tau> = false \\<tau>);\n     \\<tau> \\<Turnstile> \\<delta> S and \\<upsilon> x\\<rbrakk>\n    \\<Longrightarrow> false \\<tau> = (P x and OclForall S P) \\<tau>\n 2. \\<lbrakk>\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n       (S->including\\<^sub>S\\<^sub>e\\<^sub>t(x) \\<tau>)\\<rceil>\\<rceil>.\n                P (\\<lambda>_. x) \\<tau> = null \\<tau>;\n     \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                     (S->including\\<^sub>S\\<^sub>e\\<^sub>t(x)\n \\<tau>)\\<rceil>\\<rceil>.\n        P (\\<lambda>_. x) \\<tau> = invalid \\<tau>;\n     \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                     (S->including\\<^sub>S\\<^sub>e\\<^sub>t(x)\n \\<tau>)\\<rceil>\\<rceil>.\n        P (\\<lambda>_. x) \\<tau> = false \\<tau>;\n     \\<tau> |\\<noteq> \\<delta> S and \\<upsilon> x\\<rbrakk>\n    \\<Longrightarrow> \\<bottom> = (P x and OclForall S P) \\<tau>\n 3. \\<lbrakk>P x \\<tau> = null \\<tau> \\<or>\n             (\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n        (S \\<tau>)\\<rceil>\\<rceil>.\n                 P (\\<lambda>_. x) \\<tau> = null \\<tau>);\n     P x \\<tau> = invalid \\<tau> \\<or>\n     (\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n(S \\<tau>)\\<rceil>\\<rceil>.\n         P (\\<lambda>_. x) \\<tau> = invalid \\<tau>);\n     \\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                     (S->including\\<^sub>S\\<^sub>e\\<^sub>t(x)\n \\<tau>)\\<rceil>\\<rceil>.\n        P (\\<lambda>_. x) \\<tau> \\<noteq> false \\<tau>;\n     \\<tau> \\<Turnstile> \\<delta> S and \\<upsilon> x\\<rbrakk>\n    \\<Longrightarrow> invalid \\<tau> = (P x and OclForall S P) \\<tau>\n 4. \\<lbrakk>\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n       (S->including\\<^sub>S\\<^sub>e\\<^sub>t(x) \\<tau>)\\<rceil>\\<rceil>.\n                P (\\<lambda>_. x) \\<tau> = null \\<tau>;\n     \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                     (S->including\\<^sub>S\\<^sub>e\\<^sub>t(x)\n \\<tau>)\\<rceil>\\<rceil>.\n        P (\\<lambda>_. x) \\<tau> = invalid \\<tau>;\n     \\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                     (S->including\\<^sub>S\\<^sub>e\\<^sub>t(x)\n \\<tau>)\\<rceil>\\<rceil>.\n        P (\\<lambda>_. x) \\<tau> \\<noteq> false \\<tau>;\n     \\<tau> |\\<noteq> \\<delta> S and \\<upsilon> x\\<rbrakk>\n    \\<Longrightarrow> \\<bottom> = (P x and OclForall S P) \\<tau>\n 5. \\<lbrakk>P x \\<tau> = null \\<tau> \\<or>\n             (\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n        (S \\<tau>)\\<rceil>\\<rceil>.\n                 P (\\<lambda>_. x) \\<tau> = null \\<tau>);\n     \\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                     (S->including\\<^sub>S\\<^sub>e\\<^sub>t(x)\n \\<tau>)\\<rceil>\\<rceil>.\n        P (\\<lambda>_. x) \\<tau> \\<noteq> invalid \\<tau>;\n     P x \\<tau> = false \\<tau> \\<or>\n     (\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n(S \\<tau>)\\<rceil>\\<rceil>.\n         P (\\<lambda>_. x) \\<tau> = false \\<tau>);\n     \\<tau> \\<Turnstile> \\<delta> S and \\<upsilon> x\\<rbrakk>\n    \\<Longrightarrow> false \\<tau> = (P x and OclForall S P) \\<tau>\n 6. \\<lbrakk>\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n       (S->including\\<^sub>S\\<^sub>e\\<^sub>t(x) \\<tau>)\\<rceil>\\<rceil>.\n                P (\\<lambda>_. x) \\<tau> = null \\<tau>;\n     \\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                     (S->including\\<^sub>S\\<^sub>e\\<^sub>t(x)\n \\<tau>)\\<rceil>\\<rceil>.\n        P (\\<lambda>_. x) \\<tau> \\<noteq> invalid \\<tau>;\n     \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                     (S->including\\<^sub>S\\<^sub>e\\<^sub>t(x)\n \\<tau>)\\<rceil>\\<rceil>.\n        P (\\<lambda>_. x) \\<tau> = false \\<tau>;\n     \\<tau> |\\<noteq> \\<delta> S and \\<upsilon> x\\<rbrakk>\n    \\<Longrightarrow> \\<bottom> = (P x and OclForall S P) \\<tau>\n 7. \\<lbrakk>\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n       (S->including\\<^sub>S\\<^sub>e\\<^sub>t(x) \\<tau>)\\<rceil>\\<rceil>.\n                P (\\<lambda>_. x) \\<tau> = null \\<tau>;\n     \\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                     (S->including\\<^sub>S\\<^sub>e\\<^sub>t(x)\n \\<tau>)\\<rceil>\\<rceil>.\n        P (\\<lambda>_. x) \\<tau> \\<noteq> invalid \\<tau>;\n     \\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                     (S->including\\<^sub>S\\<^sub>e\\<^sub>t(x)\n \\<tau>)\\<rceil>\\<rceil>.\n        P (\\<lambda>_. x) \\<tau> \\<noteq> false \\<tau>;\n     \\<tau> |\\<noteq> \\<delta> S and \\<upsilon> x\\<rbrakk>\n    \\<Longrightarrow> \\<bottom> = (P x and OclForall S P) \\<tau>\n 8. \\<lbrakk>\\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n       (S->including\\<^sub>S\\<^sub>e\\<^sub>t(x) \\<tau>)\\<rceil>\\<rceil>.\n                P (\\<lambda>_. x) \\<tau> \\<noteq> null \\<tau>;\n     P x \\<tau> = invalid \\<tau> \\<or>\n     (\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n(S \\<tau>)\\<rceil>\\<rceil>.\n         P (\\<lambda>_. x) \\<tau> = invalid \\<tau>);\n     P x \\<tau> = false \\<tau> \\<or>\n     (\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n(S \\<tau>)\\<rceil>\\<rceil>.\n         P (\\<lambda>_. x) \\<tau> = false \\<tau>);\n     \\<tau> \\<Turnstile> \\<delta> S and \\<upsilon> x\\<rbrakk>\n    \\<Longrightarrow> false \\<tau> = (P x and OclForall S P) \\<tau>\n 9. \\<lbrakk>\\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n       (S->including\\<^sub>S\\<^sub>e\\<^sub>t(x) \\<tau>)\\<rceil>\\<rceil>.\n                P (\\<lambda>_. x) \\<tau> \\<noteq> null \\<tau>;\n     \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                     (S->including\\<^sub>S\\<^sub>e\\<^sub>t(x)\n \\<tau>)\\<rceil>\\<rceil>.\n        P (\\<lambda>_. x) \\<tau> = invalid \\<tau>;\n     \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                     (S->including\\<^sub>S\\<^sub>e\\<^sub>t(x)\n \\<tau>)\\<rceil>\\<rceil>.\n        P (\\<lambda>_. x) \\<tau> = false \\<tau>;\n     \\<tau> |\\<noteq> \\<delta> S and \\<upsilon> x\\<rbrakk>\n    \\<Longrightarrow> \\<bottom> = (P x and OclForall S P) \\<tau>\n 10. \\<lbrakk>\\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n        (S->including\\<^sub>S\\<^sub>e\\<^sub>t(x) \\<tau>)\\<rceil>\\<rceil>.\n                 P (\\<lambda>_. x) \\<tau> \\<noteq> null \\<tau>;\n      P x \\<tau> = invalid \\<tau> \\<or>\n      (\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n (S \\<tau>)\\<rceil>\\<rceil>.\n          P (\\<lambda>_. x) \\<tau> = invalid \\<tau>);\n      \\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n(S->including\\<^sub>S\\<^sub>e\\<^sub>t(x) \\<tau>)\\<rceil>\\<rceil>.\n         P (\\<lambda>_. x) \\<tau> \\<noteq> false \\<tau>;\n      \\<tau> \\<Turnstile> \\<delta> S and \\<upsilon> x\\<rbrakk>\n     \\<Longrightarrow> invalid \\<tau> = (P x and OclForall S P) \\<tau>\nA total of 15 subgoals...", "show   \"invalid \\<tau> = (P x and OclForall S P) \\<tau>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. invalid \\<tau> = (P x and OclForall S P) \\<tau>", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. invalid \\<tau> = (P x and OclForall S P) \\<tau>", "note 4 = 4[OF 3]"], ["proof (state)\nthis:\n  P x \\<tau> \\<noteq> false \\<tau> \\<and>\n  (\\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                   (S \\<tau>)\\<rceil>\\<rceil>.\n      P (\\<lambda>_. x) \\<tau> \\<noteq> false \\<tau>)\n\ngoal (1 subgoal):\n 1. invalid \\<tau> = (P x and OclForall S P) \\<tau>", "note 6 = 6[OF 1]"], ["proof (state)\nthis:\n  P x \\<tau> \\<noteq> null \\<tau> \\<and>\n  (\\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                   (S \\<tau>)\\<rceil>\\<rceil>.\n      P (\\<lambda>_. x) \\<tau> \\<noteq> null \\<tau>)\n\ngoal (1 subgoal):\n 1. invalid \\<tau> = (P x and OclForall S P) \\<tau>", "have 5 : \"P x \\<tau> = invalid \\<tau> \\<or> P x \\<tau> = true \\<tau>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P x \\<tau> = invalid \\<tau> \\<or> P x \\<tau> = true \\<tau>", "by(metis 4 6 bool_split_0)"], ["proof (state)\nthis:\n  P x \\<tau> = invalid \\<tau> \\<or> P x \\<tau> = true \\<tau>\n\ngoal (1 subgoal):\n 1. invalid \\<tau> = (P x and OclForall S P) \\<tau>", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. invalid \\<tau> = (P x and OclForall S P) \\<tau>", "apply(insert 5, elim disjE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. P x \\<tau> = invalid \\<tau> \\<Longrightarrow>\n    invalid \\<tau> = (P x and OclForall S P) \\<tau>\n 2. P x \\<tau> = true \\<tau> \\<Longrightarrow>\n    invalid \\<tau> = (P x and OclForall S P) \\<tau>", "apply(subst cp_OclAnd)"], ["proof (prove)\ngoal (2 subgoals):\n 1. P x \\<tau> = invalid \\<tau> \\<Longrightarrow>\n    invalid \\<tau> =\n    ((\\<lambda>_. P x \\<tau>) and (\\<lambda>_. OclForall S P \\<tau>)) \\<tau>\n 2. P x \\<tau> = true \\<tau> \\<Longrightarrow>\n    invalid \\<tau> = (P x and OclForall S P) \\<tau>", "apply(simp add: OclForall_def 4[THEN conjunct2] 6[THEN conjunct2] 7)"], ["proof (prove)\ngoal (2 subgoals):\n 1. P x \\<tau> = invalid \\<tau> \\<Longrightarrow>\n    (\\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                     (S \\<tau>)\\<rceil>\\<rceil>.\n        P (\\<lambda>_. x) \\<tau> \\<noteq> invalid \\<tau>) \\<longrightarrow>\n    invalid \\<tau> =\n    ((\\<lambda>_. invalid \\<tau>) and (\\<lambda>_. true \\<tau>)) \\<tau>\n 2. P x \\<tau> = true \\<tau> \\<Longrightarrow>\n    invalid \\<tau> = (P x and OclForall S P) \\<tau>", "apply(simp_all add:cp_OclAnd[symmetric])"], ["proof (prove)\ngoal (1 subgoal):\n 1. P x \\<tau> = true \\<tau> \\<Longrightarrow>\n    invalid \\<tau> = (P x and OclForall S P) \\<tau>", "apply(subst cp_OclAnd, simp_all add:cp_OclAnd[symmetric] OclForall_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. P x \\<tau> = true \\<tau> \\<Longrightarrow>\n    ((\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n(S \\<tau>)\\<rceil>\\<rceil>.\n         P (\\<lambda>_. x) \\<tau> = null \\<tau>) \\<longrightarrow>\n     ((\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n (S \\<tau>)\\<rceil>\\<rceil>.\n          P (\\<lambda>_. x) \\<tau> = invalid \\<tau>) \\<longrightarrow>\n      ((\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n  (S \\<tau>)\\<rceil>\\<rceil>.\n           P (\\<lambda>_. x) \\<tau> = false \\<tau>) \\<longrightarrow>\n       ((\\<delta> S) \\<tau> = true \\<tau> \\<longrightarrow>\n        invalid \\<tau> = false \\<tau>) \\<and>\n       ((\\<delta> S) \\<tau> \\<noteq> true \\<tau> \\<longrightarrow>\n        invalid \\<tau> =\n        ((\\<lambda>_. true \\<tau>) and (\\<lambda>_. \\<bottom>))\n         \\<tau>)) \\<and>\n      ((\\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n  (S \\<tau>)\\<rceil>\\<rceil>.\n           P (\\<lambda>_. x) \\<tau> \\<noteq> false \\<tau>) \\<longrightarrow>\n       (\\<delta> S) \\<tau> \\<noteq> true \\<tau> \\<longrightarrow>\n       invalid \\<tau> =\n       ((\\<lambda>_. true \\<tau>) and (\\<lambda>_. \\<bottom>))\n        \\<tau>)) \\<and>\n     ((\\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n (S \\<tau>)\\<rceil>\\<rceil>.\n          P (\\<lambda>_. x) \\<tau> \\<noteq>\n          invalid \\<tau>) \\<longrightarrow>\n      ((\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n  (S \\<tau>)\\<rceil>\\<rceil>.\n           P (\\<lambda>_. x) \\<tau> = false \\<tau>) \\<longrightarrow>\n       ((\\<delta> S) \\<tau> = true \\<tau> \\<longrightarrow>\n        invalid \\<tau> = false \\<tau>) \\<and>\n       ((\\<delta> S) \\<tau> \\<noteq> true \\<tau> \\<longrightarrow>\n        invalid \\<tau> =\n        ((\\<lambda>_. true \\<tau>) and (\\<lambda>_. \\<bottom>))\n         \\<tau>)) \\<and>\n      ((\\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n  (S \\<tau>)\\<rceil>\\<rceil>.\n           P (\\<lambda>_. x) \\<tau> \\<noteq> false \\<tau>) \\<longrightarrow>\n       ((\\<delta> S) \\<tau> = true \\<tau> \\<longrightarrow>\n        invalid \\<tau> = null \\<tau>) \\<and>\n       ((\\<delta> S) \\<tau> \\<noteq> true \\<tau> \\<longrightarrow>\n        invalid \\<tau> =\n        ((\\<lambda>_. true \\<tau>) and (\\<lambda>_. \\<bottom>))\n         \\<tau>)))) \\<and>\n    ((\\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n(S \\<tau>)\\<rceil>\\<rceil>.\n         P (\\<lambda>_. x) \\<tau> \\<noteq> null \\<tau>) \\<longrightarrow>\n     ((\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n (S \\<tau>)\\<rceil>\\<rceil>.\n          P (\\<lambda>_. x) \\<tau> = invalid \\<tau>) \\<longrightarrow>\n      ((\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n  (S \\<tau>)\\<rceil>\\<rceil>.\n           P (\\<lambda>_. x) \\<tau> = false \\<tau>) \\<longrightarrow>\n       ((\\<delta> S) \\<tau> = true \\<tau> \\<longrightarrow>\n        invalid \\<tau> = false \\<tau>) \\<and>\n       ((\\<delta> S) \\<tau> \\<noteq> true \\<tau> \\<longrightarrow>\n        invalid \\<tau> =\n        ((\\<lambda>_. true \\<tau>) and (\\<lambda>_. \\<bottom>))\n         \\<tau>)) \\<and>\n      ((\\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n  (S \\<tau>)\\<rceil>\\<rceil>.\n           P (\\<lambda>_. x) \\<tau> \\<noteq> false \\<tau>) \\<longrightarrow>\n       (\\<delta> S) \\<tau> \\<noteq> true \\<tau> \\<longrightarrow>\n       invalid \\<tau> =\n       ((\\<lambda>_. true \\<tau>) and (\\<lambda>_. \\<bottom>))\n        \\<tau>)) \\<and>\n     ((\\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n (S \\<tau>)\\<rceil>\\<rceil>.\n          P (\\<lambda>_. x) \\<tau> \\<noteq>\n          invalid \\<tau>) \\<longrightarrow>\n      ((\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n  (S \\<tau>)\\<rceil>\\<rceil>.\n           P (\\<lambda>_. x) \\<tau> = false \\<tau>) \\<longrightarrow>\n       ((\\<delta> S) \\<tau> = true \\<tau> \\<longrightarrow>\n        invalid \\<tau> = false \\<tau>) \\<and>\n       ((\\<delta> S) \\<tau> \\<noteq> true \\<tau> \\<longrightarrow>\n        invalid \\<tau> =\n        ((\\<lambda>_. true \\<tau>) and (\\<lambda>_. \\<bottom>))\n         \\<tau>)) \\<and>\n      ((\\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n  (S \\<tau>)\\<rceil>\\<rceil>.\n           P (\\<lambda>_. x) \\<tau> \\<noteq> false \\<tau>) \\<longrightarrow>\n       ((\\<delta> S) \\<tau> = true \\<tau> \\<longrightarrow>\n        invalid \\<tau> = true \\<tau>) \\<and>\n       ((\\<delta> S) \\<tau> \\<noteq> true \\<tau> \\<longrightarrow>\n        invalid \\<tau> =\n        ((\\<lambda>_. true \\<tau>) and (\\<lambda>_. \\<bottom>)) \\<tau>))))", "apply(insert 2, elim disjE, simp add: invalid_def true_def bot_option_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>P x \\<tau> = true \\<tau>;\n     \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                     (S \\<tau>)\\<rceil>\\<rceil>.\n        P (\\<lambda>_. x) \\<tau> = invalid \\<tau>\\<rbrakk>\n    \\<Longrightarrow> ((\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                  (S \\<tau>)\\<rceil>\\<rceil>.\n                           P (\\<lambda>_. x) \\<tau> =\n                           null \\<tau>) \\<longrightarrow>\n                       ((\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                   (S \\<tau>)\\<rceil>\\<rceil>.\n                            P (\\<lambda>_. x) \\<tau> =\n                            invalid \\<tau>) \\<longrightarrow>\n                        ((\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                    (S \\<tau>)\\<rceil>\\<rceil>.\n                             P (\\<lambda>_. x) \\<tau> =\n                             false \\<tau>) \\<longrightarrow>\n                         ((\\<delta> S) \\<tau> =\n                          true \\<tau> \\<longrightarrow>\n                          invalid \\<tau> = false \\<tau>) \\<and>\n                         ((\\<delta> S) \\<tau> \\<noteq>\n                          true \\<tau> \\<longrightarrow>\n                          invalid \\<tau> =\n                          ((\\<lambda>_. true \\<tau>) and\n                           (\\<lambda>_. \\<bottom>))\n                           \\<tau>)) \\<and>\n                        ((\\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                    (S \\<tau>)\\<rceil>\\<rceil>.\n                             P (\\<lambda>_. x) \\<tau> \\<noteq>\n                             false \\<tau>) \\<longrightarrow>\n                         (\\<delta> S) \\<tau> \\<noteq>\n                         true \\<tau> \\<longrightarrow>\n                         invalid \\<tau> =\n                         ((\\<lambda>_. true \\<tau>) and\n                          (\\<lambda>_. \\<bottom>))\n                          \\<tau>)) \\<and>\n                       ((\\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                   (S \\<tau>)\\<rceil>\\<rceil>.\n                            P (\\<lambda>_. x) \\<tau> \\<noteq>\n                            invalid \\<tau>) \\<longrightarrow>\n                        ((\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                    (S \\<tau>)\\<rceil>\\<rceil>.\n                             P (\\<lambda>_. x) \\<tau> =\n                             false \\<tau>) \\<longrightarrow>\n                         ((\\<delta> S) \\<tau> =\n                          true \\<tau> \\<longrightarrow>\n                          invalid \\<tau> = false \\<tau>) \\<and>\n                         ((\\<delta> S) \\<tau> \\<noteq>\n                          true \\<tau> \\<longrightarrow>\n                          invalid \\<tau> =\n                          ((\\<lambda>_. true \\<tau>) and\n                           (\\<lambda>_. \\<bottom>))\n                           \\<tau>)) \\<and>\n                        ((\\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                    (S \\<tau>)\\<rceil>\\<rceil>.\n                             P (\\<lambda>_. x) \\<tau> \\<noteq>\n                             false \\<tau>) \\<longrightarrow>\n                         ((\\<delta> S) \\<tau> =\n                          true \\<tau> \\<longrightarrow>\n                          invalid \\<tau> = null \\<tau>) \\<and>\n                         ((\\<delta> S) \\<tau> \\<noteq>\n                          true \\<tau> \\<longrightarrow>\n                          invalid \\<tau> =\n                          ((\\<lambda>_. true \\<tau>) and\n                           (\\<lambda>_. \\<bottom>))\n                           \\<tau>)))) \\<and>\n                      ((\\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                  (S \\<tau>)\\<rceil>\\<rceil>.\n                           P (\\<lambda>_. x) \\<tau> \\<noteq>\n                           null \\<tau>) \\<longrightarrow>\n                       ((\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                   (S \\<tau>)\\<rceil>\\<rceil>.\n                            P (\\<lambda>_. x) \\<tau> =\n                            invalid \\<tau>) \\<longrightarrow>\n                        ((\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                    (S \\<tau>)\\<rceil>\\<rceil>.\n                             P (\\<lambda>_. x) \\<tau> =\n                             false \\<tau>) \\<longrightarrow>\n                         ((\\<delta> S) \\<tau> =\n                          true \\<tau> \\<longrightarrow>\n                          invalid \\<tau> = false \\<tau>) \\<and>\n                         ((\\<delta> S) \\<tau> \\<noteq>\n                          true \\<tau> \\<longrightarrow>\n                          invalid \\<tau> =\n                          ((\\<lambda>_. true \\<tau>) and\n                           (\\<lambda>_. \\<bottom>))\n                           \\<tau>)) \\<and>\n                        ((\\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                    (S \\<tau>)\\<rceil>\\<rceil>.\n                             P (\\<lambda>_. x) \\<tau> \\<noteq>\n                             false \\<tau>) \\<longrightarrow>\n                         (\\<delta> S) \\<tau> \\<noteq>\n                         true \\<tau> \\<longrightarrow>\n                         invalid \\<tau> =\n                         ((\\<lambda>_. true \\<tau>) and\n                          (\\<lambda>_. \\<bottom>))\n                          \\<tau>)) \\<and>\n                       ((\\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                   (S \\<tau>)\\<rceil>\\<rceil>.\n                            P (\\<lambda>_. x) \\<tau> \\<noteq>\n                            invalid \\<tau>) \\<longrightarrow>\n                        ((\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                    (S \\<tau>)\\<rceil>\\<rceil>.\n                             P (\\<lambda>_. x) \\<tau> =\n                             false \\<tau>) \\<longrightarrow>\n                         ((\\<delta> S) \\<tau> =\n                          true \\<tau> \\<longrightarrow>\n                          invalid \\<tau> = false \\<tau>) \\<and>\n                         ((\\<delta> S) \\<tau> \\<noteq>\n                          true \\<tau> \\<longrightarrow>\n                          invalid \\<tau> =\n                          ((\\<lambda>_. true \\<tau>) and\n                           (\\<lambda>_. \\<bottom>))\n                           \\<tau>)) \\<and>\n                        ((\\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                    (S \\<tau>)\\<rceil>\\<rceil>.\n                             P (\\<lambda>_. x) \\<tau> \\<noteq>\n                             false \\<tau>) \\<longrightarrow>\n                         ((\\<delta> S) \\<tau> =\n                          true \\<tau> \\<longrightarrow>\n                          invalid \\<tau> = true \\<tau>) \\<and>\n                         ((\\<delta> S) \\<tau> \\<noteq>\n                          true \\<tau> \\<longrightarrow>\n                          invalid \\<tau> =\n                          ((\\<lambda>_. true \\<tau>) and\n                           (\\<lambda>_. \\<bottom>))\n                           \\<tau>))))", "apply(simp add: 0[simplified OclValid_def] 4[THEN conjunct2] 6[THEN conjunct2] 7)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>P x \\<tau> = true \\<tau>;\n     \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                     (S \\<tau>)\\<rceil>\\<rceil>.\n        P (\\<lambda>_. x) \\<tau> = invalid \\<tau>\\<rbrakk>\n    \\<Longrightarrow> (\\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                 (S \\<tau>)\\<rceil>\\<rceil>.\n                          P (\\<lambda>_. x) \\<tau> \\<noteq>\n                          invalid \\<tau>) \\<longrightarrow>\n                      invalid \\<tau> = true \\<tau>", "by(auto)"], ["proof (state)\nthis:\n  invalid \\<tau> = (P x and OclForall S P) \\<tau>\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  invalid \\<tau> = (P x and OclForall S P) \\<tau>\n\ngoal (14 subgoals):\n 1. \\<lbrakk>P x \\<tau> = null \\<tau> \\<or>\n             (\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n        (S \\<tau>)\\<rceil>\\<rceil>.\n                 P (\\<lambda>_. x) \\<tau> = null \\<tau>);\n     P x \\<tau> = invalid \\<tau> \\<or>\n     (\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n(S \\<tau>)\\<rceil>\\<rceil>.\n         P (\\<lambda>_. x) \\<tau> = invalid \\<tau>);\n     P x \\<tau> = false \\<tau> \\<or>\n     (\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n(S \\<tau>)\\<rceil>\\<rceil>.\n         P (\\<lambda>_. x) \\<tau> = false \\<tau>);\n     \\<tau> \\<Turnstile> \\<delta> S and \\<upsilon> x\\<rbrakk>\n    \\<Longrightarrow> false \\<tau> = (P x and OclForall S P) \\<tau>\n 2. \\<lbrakk>\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n       (S->including\\<^sub>S\\<^sub>e\\<^sub>t(x) \\<tau>)\\<rceil>\\<rceil>.\n                P (\\<lambda>_. x) \\<tau> = null \\<tau>;\n     \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                     (S->including\\<^sub>S\\<^sub>e\\<^sub>t(x)\n \\<tau>)\\<rceil>\\<rceil>.\n        P (\\<lambda>_. x) \\<tau> = invalid \\<tau>;\n     \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                     (S->including\\<^sub>S\\<^sub>e\\<^sub>t(x)\n \\<tau>)\\<rceil>\\<rceil>.\n        P (\\<lambda>_. x) \\<tau> = false \\<tau>;\n     \\<tau> |\\<noteq> \\<delta> S and \\<upsilon> x\\<rbrakk>\n    \\<Longrightarrow> \\<bottom> = (P x and OclForall S P) \\<tau>\n 3. \\<lbrakk>P x \\<tau> = null \\<tau> \\<or>\n             (\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n        (S \\<tau>)\\<rceil>\\<rceil>.\n                 P (\\<lambda>_. x) \\<tau> = null \\<tau>);\n     P x \\<tau> = invalid \\<tau> \\<or>\n     (\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n(S \\<tau>)\\<rceil>\\<rceil>.\n         P (\\<lambda>_. x) \\<tau> = invalid \\<tau>);\n     \\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                     (S->including\\<^sub>S\\<^sub>e\\<^sub>t(x)\n \\<tau>)\\<rceil>\\<rceil>.\n        P (\\<lambda>_. x) \\<tau> \\<noteq> false \\<tau>;\n     \\<tau> \\<Turnstile> \\<delta> S and \\<upsilon> x\\<rbrakk>\n    \\<Longrightarrow> invalid \\<tau> = (P x and OclForall S P) \\<tau>\n 4. \\<lbrakk>\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n       (S->including\\<^sub>S\\<^sub>e\\<^sub>t(x) \\<tau>)\\<rceil>\\<rceil>.\n                P (\\<lambda>_. x) \\<tau> = null \\<tau>;\n     \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                     (S->including\\<^sub>S\\<^sub>e\\<^sub>t(x)\n \\<tau>)\\<rceil>\\<rceil>.\n        P (\\<lambda>_. x) \\<tau> = invalid \\<tau>;\n     \\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                     (S->including\\<^sub>S\\<^sub>e\\<^sub>t(x)\n \\<tau>)\\<rceil>\\<rceil>.\n        P (\\<lambda>_. x) \\<tau> \\<noteq> false \\<tau>;\n     \\<tau> |\\<noteq> \\<delta> S and \\<upsilon> x\\<rbrakk>\n    \\<Longrightarrow> \\<bottom> = (P x and OclForall S P) \\<tau>\n 5. \\<lbrakk>P x \\<tau> = null \\<tau> \\<or>\n             (\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n        (S \\<tau>)\\<rceil>\\<rceil>.\n                 P (\\<lambda>_. x) \\<tau> = null \\<tau>);\n     \\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                     (S->including\\<^sub>S\\<^sub>e\\<^sub>t(x)\n \\<tau>)\\<rceil>\\<rceil>.\n        P (\\<lambda>_. x) \\<tau> \\<noteq> invalid \\<tau>;\n     P x \\<tau> = false \\<tau> \\<or>\n     (\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n(S \\<tau>)\\<rceil>\\<rceil>.\n         P (\\<lambda>_. x) \\<tau> = false \\<tau>);\n     \\<tau> \\<Turnstile> \\<delta> S and \\<upsilon> x\\<rbrakk>\n    \\<Longrightarrow> false \\<tau> = (P x and OclForall S P) \\<tau>\n 6. \\<lbrakk>\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n       (S->including\\<^sub>S\\<^sub>e\\<^sub>t(x) \\<tau>)\\<rceil>\\<rceil>.\n                P (\\<lambda>_. x) \\<tau> = null \\<tau>;\n     \\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                     (S->including\\<^sub>S\\<^sub>e\\<^sub>t(x)\n \\<tau>)\\<rceil>\\<rceil>.\n        P (\\<lambda>_. x) \\<tau> \\<noteq> invalid \\<tau>;\n     \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                     (S->including\\<^sub>S\\<^sub>e\\<^sub>t(x)\n \\<tau>)\\<rceil>\\<rceil>.\n        P (\\<lambda>_. x) \\<tau> = false \\<tau>;\n     \\<tau> |\\<noteq> \\<delta> S and \\<upsilon> x\\<rbrakk>\n    \\<Longrightarrow> \\<bottom> = (P x and OclForall S P) \\<tau>\n 7. \\<lbrakk>\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n       (S->including\\<^sub>S\\<^sub>e\\<^sub>t(x) \\<tau>)\\<rceil>\\<rceil>.\n                P (\\<lambda>_. x) \\<tau> = null \\<tau>;\n     \\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                     (S->including\\<^sub>S\\<^sub>e\\<^sub>t(x)\n \\<tau>)\\<rceil>\\<rceil>.\n        P (\\<lambda>_. x) \\<tau> \\<noteq> invalid \\<tau>;\n     \\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                     (S->including\\<^sub>S\\<^sub>e\\<^sub>t(x)\n \\<tau>)\\<rceil>\\<rceil>.\n        P (\\<lambda>_. x) \\<tau> \\<noteq> false \\<tau>;\n     \\<tau> |\\<noteq> \\<delta> S and \\<upsilon> x\\<rbrakk>\n    \\<Longrightarrow> \\<bottom> = (P x and OclForall S P) \\<tau>\n 8. \\<lbrakk>\\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n       (S->including\\<^sub>S\\<^sub>e\\<^sub>t(x) \\<tau>)\\<rceil>\\<rceil>.\n                P (\\<lambda>_. x) \\<tau> \\<noteq> null \\<tau>;\n     P x \\<tau> = invalid \\<tau> \\<or>\n     (\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n(S \\<tau>)\\<rceil>\\<rceil>.\n         P (\\<lambda>_. x) \\<tau> = invalid \\<tau>);\n     P x \\<tau> = false \\<tau> \\<or>\n     (\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n(S \\<tau>)\\<rceil>\\<rceil>.\n         P (\\<lambda>_. x) \\<tau> = false \\<tau>);\n     \\<tau> \\<Turnstile> \\<delta> S and \\<upsilon> x\\<rbrakk>\n    \\<Longrightarrow> false \\<tau> = (P x and OclForall S P) \\<tau>\n 9. \\<lbrakk>\\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n       (S->including\\<^sub>S\\<^sub>e\\<^sub>t(x) \\<tau>)\\<rceil>\\<rceil>.\n                P (\\<lambda>_. x) \\<tau> \\<noteq> null \\<tau>;\n     \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                     (S->including\\<^sub>S\\<^sub>e\\<^sub>t(x)\n \\<tau>)\\<rceil>\\<rceil>.\n        P (\\<lambda>_. x) \\<tau> = invalid \\<tau>;\n     \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                     (S->including\\<^sub>S\\<^sub>e\\<^sub>t(x)\n \\<tau>)\\<rceil>\\<rceil>.\n        P (\\<lambda>_. x) \\<tau> = false \\<tau>;\n     \\<tau> |\\<noteq> \\<delta> S and \\<upsilon> x\\<rbrakk>\n    \\<Longrightarrow> \\<bottom> = (P x and OclForall S P) \\<tau>\n 10. \\<lbrakk>\\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n        (S->including\\<^sub>S\\<^sub>e\\<^sub>t(x) \\<tau>)\\<rceil>\\<rceil>.\n                 P (\\<lambda>_. x) \\<tau> \\<noteq> null \\<tau>;\n      \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n(S->including\\<^sub>S\\<^sub>e\\<^sub>t(x) \\<tau>)\\<rceil>\\<rceil>.\n         P (\\<lambda>_. x) \\<tau> = invalid \\<tau>;\n      \\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n(S->including\\<^sub>S\\<^sub>e\\<^sub>t(x) \\<tau>)\\<rceil>\\<rceil>.\n         P (\\<lambda>_. x) \\<tau> \\<noteq> false \\<tau>;\n      \\<tau> |\\<noteq> \\<delta> S and \\<upsilon> x\\<rbrakk>\n     \\<Longrightarrow> \\<bottom> = (P x and OclForall S P) \\<tau>\nA total of 14 subgoals...", "next"], ["proof (state)\ngoal (14 subgoals):\n 1. \\<lbrakk>P x \\<tau> = null \\<tau> \\<or>\n             (\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n        (S \\<tau>)\\<rceil>\\<rceil>.\n                 P (\\<lambda>_. x) \\<tau> = null \\<tau>);\n     P x \\<tau> = invalid \\<tau> \\<or>\n     (\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n(S \\<tau>)\\<rceil>\\<rceil>.\n         P (\\<lambda>_. x) \\<tau> = invalid \\<tau>);\n     P x \\<tau> = false \\<tau> \\<or>\n     (\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n(S \\<tau>)\\<rceil>\\<rceil>.\n         P (\\<lambda>_. x) \\<tau> = false \\<tau>);\n     \\<tau> \\<Turnstile> \\<delta> S and \\<upsilon> x\\<rbrakk>\n    \\<Longrightarrow> false \\<tau> = (P x and OclForall S P) \\<tau>\n 2. \\<lbrakk>\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n       (S->including\\<^sub>S\\<^sub>e\\<^sub>t(x) \\<tau>)\\<rceil>\\<rceil>.\n                P (\\<lambda>_. x) \\<tau> = null \\<tau>;\n     \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                     (S->including\\<^sub>S\\<^sub>e\\<^sub>t(x)\n \\<tau>)\\<rceil>\\<rceil>.\n        P (\\<lambda>_. x) \\<tau> = invalid \\<tau>;\n     \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                     (S->including\\<^sub>S\\<^sub>e\\<^sub>t(x)\n \\<tau>)\\<rceil>\\<rceil>.\n        P (\\<lambda>_. x) \\<tau> = false \\<tau>;\n     \\<tau> |\\<noteq> \\<delta> S and \\<upsilon> x\\<rbrakk>\n    \\<Longrightarrow> \\<bottom> = (P x and OclForall S P) \\<tau>\n 3. \\<lbrakk>P x \\<tau> = null \\<tau> \\<or>\n             (\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n        (S \\<tau>)\\<rceil>\\<rceil>.\n                 P (\\<lambda>_. x) \\<tau> = null \\<tau>);\n     P x \\<tau> = invalid \\<tau> \\<or>\n     (\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n(S \\<tau>)\\<rceil>\\<rceil>.\n         P (\\<lambda>_. x) \\<tau> = invalid \\<tau>);\n     \\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                     (S->including\\<^sub>S\\<^sub>e\\<^sub>t(x)\n \\<tau>)\\<rceil>\\<rceil>.\n        P (\\<lambda>_. x) \\<tau> \\<noteq> false \\<tau>;\n     \\<tau> \\<Turnstile> \\<delta> S and \\<upsilon> x\\<rbrakk>\n    \\<Longrightarrow> invalid \\<tau> = (P x and OclForall S P) \\<tau>\n 4. \\<lbrakk>\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n       (S->including\\<^sub>S\\<^sub>e\\<^sub>t(x) \\<tau>)\\<rceil>\\<rceil>.\n                P (\\<lambda>_. x) \\<tau> = null \\<tau>;\n     \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                     (S->including\\<^sub>S\\<^sub>e\\<^sub>t(x)\n \\<tau>)\\<rceil>\\<rceil>.\n        P (\\<lambda>_. x) \\<tau> = invalid \\<tau>;\n     \\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                     (S->including\\<^sub>S\\<^sub>e\\<^sub>t(x)\n \\<tau>)\\<rceil>\\<rceil>.\n        P (\\<lambda>_. x) \\<tau> \\<noteq> false \\<tau>;\n     \\<tau> |\\<noteq> \\<delta> S and \\<upsilon> x\\<rbrakk>\n    \\<Longrightarrow> \\<bottom> = (P x and OclForall S P) \\<tau>\n 5. \\<lbrakk>P x \\<tau> = null \\<tau> \\<or>\n             (\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n        (S \\<tau>)\\<rceil>\\<rceil>.\n                 P (\\<lambda>_. x) \\<tau> = null \\<tau>);\n     \\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                     (S->including\\<^sub>S\\<^sub>e\\<^sub>t(x)\n \\<tau>)\\<rceil>\\<rceil>.\n        P (\\<lambda>_. x) \\<tau> \\<noteq> invalid \\<tau>;\n     P x \\<tau> = false \\<tau> \\<or>\n     (\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n(S \\<tau>)\\<rceil>\\<rceil>.\n         P (\\<lambda>_. x) \\<tau> = false \\<tau>);\n     \\<tau> \\<Turnstile> \\<delta> S and \\<upsilon> x\\<rbrakk>\n    \\<Longrightarrow> false \\<tau> = (P x and OclForall S P) \\<tau>\n 6. \\<lbrakk>\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n       (S->including\\<^sub>S\\<^sub>e\\<^sub>t(x) \\<tau>)\\<rceil>\\<rceil>.\n                P (\\<lambda>_. x) \\<tau> = null \\<tau>;\n     \\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                     (S->including\\<^sub>S\\<^sub>e\\<^sub>t(x)\n \\<tau>)\\<rceil>\\<rceil>.\n        P (\\<lambda>_. x) \\<tau> \\<noteq> invalid \\<tau>;\n     \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                     (S->including\\<^sub>S\\<^sub>e\\<^sub>t(x)\n \\<tau>)\\<rceil>\\<rceil>.\n        P (\\<lambda>_. x) \\<tau> = false \\<tau>;\n     \\<tau> |\\<noteq> \\<delta> S and \\<upsilon> x\\<rbrakk>\n    \\<Longrightarrow> \\<bottom> = (P x and OclForall S P) \\<tau>\n 7. \\<lbrakk>\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n       (S->including\\<^sub>S\\<^sub>e\\<^sub>t(x) \\<tau>)\\<rceil>\\<rceil>.\n                P (\\<lambda>_. x) \\<tau> = null \\<tau>;\n     \\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                     (S->including\\<^sub>S\\<^sub>e\\<^sub>t(x)\n \\<tau>)\\<rceil>\\<rceil>.\n        P (\\<lambda>_. x) \\<tau> \\<noteq> invalid \\<tau>;\n     \\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                     (S->including\\<^sub>S\\<^sub>e\\<^sub>t(x)\n \\<tau>)\\<rceil>\\<rceil>.\n        P (\\<lambda>_. x) \\<tau> \\<noteq> false \\<tau>;\n     \\<tau> |\\<noteq> \\<delta> S and \\<upsilon> x\\<rbrakk>\n    \\<Longrightarrow> \\<bottom> = (P x and OclForall S P) \\<tau>\n 8. \\<lbrakk>\\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n       (S->including\\<^sub>S\\<^sub>e\\<^sub>t(x) \\<tau>)\\<rceil>\\<rceil>.\n                P (\\<lambda>_. x) \\<tau> \\<noteq> null \\<tau>;\n     P x \\<tau> = invalid \\<tau> \\<or>\n     (\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n(S \\<tau>)\\<rceil>\\<rceil>.\n         P (\\<lambda>_. x) \\<tau> = invalid \\<tau>);\n     P x \\<tau> = false \\<tau> \\<or>\n     (\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n(S \\<tau>)\\<rceil>\\<rceil>.\n         P (\\<lambda>_. x) \\<tau> = false \\<tau>);\n     \\<tau> \\<Turnstile> \\<delta> S and \\<upsilon> x\\<rbrakk>\n    \\<Longrightarrow> false \\<tau> = (P x and OclForall S P) \\<tau>\n 9. \\<lbrakk>\\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n       (S->including\\<^sub>S\\<^sub>e\\<^sub>t(x) \\<tau>)\\<rceil>\\<rceil>.\n                P (\\<lambda>_. x) \\<tau> \\<noteq> null \\<tau>;\n     \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                     (S->including\\<^sub>S\\<^sub>e\\<^sub>t(x)\n \\<tau>)\\<rceil>\\<rceil>.\n        P (\\<lambda>_. x) \\<tau> = invalid \\<tau>;\n     \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                     (S->including\\<^sub>S\\<^sub>e\\<^sub>t(x)\n \\<tau>)\\<rceil>\\<rceil>.\n        P (\\<lambda>_. x) \\<tau> = false \\<tau>;\n     \\<tau> |\\<noteq> \\<delta> S and \\<upsilon> x\\<rbrakk>\n    \\<Longrightarrow> \\<bottom> = (P x and OclForall S P) \\<tau>\n 10. \\<lbrakk>\\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n        (S->including\\<^sub>S\\<^sub>e\\<^sub>t(x) \\<tau>)\\<rceil>\\<rceil>.\n                 P (\\<lambda>_. x) \\<tau> \\<noteq> null \\<tau>;\n      \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n(S->including\\<^sub>S\\<^sub>e\\<^sub>t(x) \\<tau>)\\<rceil>\\<rceil>.\n         P (\\<lambda>_. x) \\<tau> = invalid \\<tau>;\n      \\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n(S->including\\<^sub>S\\<^sub>e\\<^sub>t(x) \\<tau>)\\<rceil>\\<rceil>.\n         P (\\<lambda>_. x) \\<tau> \\<noteq> false \\<tau>;\n      \\<tau> |\\<noteq> \\<delta> S and \\<upsilon> x\\<rbrakk>\n     \\<Longrightarrow> \\<bottom> = (P x and OclForall S P) \\<tau>\nA total of 14 subgoals...", "assume 1 : ?assms_1\n              and    2 : ?assms_2\n              and    3 : ?assms_3"], ["proof (state)\nthis:\n  \\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                  (S->including\\<^sub>S\\<^sub>e\\<^sub>t(x)\n                                    \\<tau>)\\<rceil>\\<rceil>.\n     P (\\<lambda>_. x) \\<tau> \\<noteq> null \\<tau>\n  \\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                  (S->including\\<^sub>S\\<^sub>e\\<^sub>t(x)\n                                    \\<tau>)\\<rceil>\\<rceil>.\n     P (\\<lambda>_. x) \\<tau> \\<noteq> invalid \\<tau>\n  \\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                  (S->including\\<^sub>S\\<^sub>e\\<^sub>t(x)\n                                    \\<tau>)\\<rceil>\\<rceil>.\n     P (\\<lambda>_. x) \\<tau> \\<noteq> false \\<tau>\n\ngoal (14 subgoals):\n 1. \\<lbrakk>P x \\<tau> = null \\<tau> \\<or>\n             (\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n        (S \\<tau>)\\<rceil>\\<rceil>.\n                 P (\\<lambda>_. x) \\<tau> = null \\<tau>);\n     P x \\<tau> = invalid \\<tau> \\<or>\n     (\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n(S \\<tau>)\\<rceil>\\<rceil>.\n         P (\\<lambda>_. x) \\<tau> = invalid \\<tau>);\n     P x \\<tau> = false \\<tau> \\<or>\n     (\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n(S \\<tau>)\\<rceil>\\<rceil>.\n         P (\\<lambda>_. x) \\<tau> = false \\<tau>);\n     \\<tau> \\<Turnstile> \\<delta> S and \\<upsilon> x\\<rbrakk>\n    \\<Longrightarrow> false \\<tau> = (P x and OclForall S P) \\<tau>\n 2. \\<lbrakk>\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n       (S->including\\<^sub>S\\<^sub>e\\<^sub>t(x) \\<tau>)\\<rceil>\\<rceil>.\n                P (\\<lambda>_. x) \\<tau> = null \\<tau>;\n     \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                     (S->including\\<^sub>S\\<^sub>e\\<^sub>t(x)\n \\<tau>)\\<rceil>\\<rceil>.\n        P (\\<lambda>_. x) \\<tau> = invalid \\<tau>;\n     \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                     (S->including\\<^sub>S\\<^sub>e\\<^sub>t(x)\n \\<tau>)\\<rceil>\\<rceil>.\n        P (\\<lambda>_. x) \\<tau> = false \\<tau>;\n     \\<tau> |\\<noteq> \\<delta> S and \\<upsilon> x\\<rbrakk>\n    \\<Longrightarrow> \\<bottom> = (P x and OclForall S P) \\<tau>\n 3. \\<lbrakk>P x \\<tau> = null \\<tau> \\<or>\n             (\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n        (S \\<tau>)\\<rceil>\\<rceil>.\n                 P (\\<lambda>_. x) \\<tau> = null \\<tau>);\n     P x \\<tau> = invalid \\<tau> \\<or>\n     (\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n(S \\<tau>)\\<rceil>\\<rceil>.\n         P (\\<lambda>_. x) \\<tau> = invalid \\<tau>);\n     \\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                     (S->including\\<^sub>S\\<^sub>e\\<^sub>t(x)\n \\<tau>)\\<rceil>\\<rceil>.\n        P (\\<lambda>_. x) \\<tau> \\<noteq> false \\<tau>;\n     \\<tau> \\<Turnstile> \\<delta> S and \\<upsilon> x\\<rbrakk>\n    \\<Longrightarrow> invalid \\<tau> = (P x and OclForall S P) \\<tau>\n 4. \\<lbrakk>\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n       (S->including\\<^sub>S\\<^sub>e\\<^sub>t(x) \\<tau>)\\<rceil>\\<rceil>.\n                P (\\<lambda>_. x) \\<tau> = null \\<tau>;\n     \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                     (S->including\\<^sub>S\\<^sub>e\\<^sub>t(x)\n \\<tau>)\\<rceil>\\<rceil>.\n        P (\\<lambda>_. x) \\<tau> = invalid \\<tau>;\n     \\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                     (S->including\\<^sub>S\\<^sub>e\\<^sub>t(x)\n \\<tau>)\\<rceil>\\<rceil>.\n        P (\\<lambda>_. x) \\<tau> \\<noteq> false \\<tau>;\n     \\<tau> |\\<noteq> \\<delta> S and \\<upsilon> x\\<rbrakk>\n    \\<Longrightarrow> \\<bottom> = (P x and OclForall S P) \\<tau>\n 5. \\<lbrakk>P x \\<tau> = null \\<tau> \\<or>\n             (\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n        (S \\<tau>)\\<rceil>\\<rceil>.\n                 P (\\<lambda>_. x) \\<tau> = null \\<tau>);\n     \\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                     (S->including\\<^sub>S\\<^sub>e\\<^sub>t(x)\n \\<tau>)\\<rceil>\\<rceil>.\n        P (\\<lambda>_. x) \\<tau> \\<noteq> invalid \\<tau>;\n     P x \\<tau> = false \\<tau> \\<or>\n     (\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n(S \\<tau>)\\<rceil>\\<rceil>.\n         P (\\<lambda>_. x) \\<tau> = false \\<tau>);\n     \\<tau> \\<Turnstile> \\<delta> S and \\<upsilon> x\\<rbrakk>\n    \\<Longrightarrow> false \\<tau> = (P x and OclForall S P) \\<tau>\n 6. \\<lbrakk>\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n       (S->including\\<^sub>S\\<^sub>e\\<^sub>t(x) \\<tau>)\\<rceil>\\<rceil>.\n                P (\\<lambda>_. x) \\<tau> = null \\<tau>;\n     \\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                     (S->including\\<^sub>S\\<^sub>e\\<^sub>t(x)\n \\<tau>)\\<rceil>\\<rceil>.\n        P (\\<lambda>_. x) \\<tau> \\<noteq> invalid \\<tau>;\n     \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                     (S->including\\<^sub>S\\<^sub>e\\<^sub>t(x)\n \\<tau>)\\<rceil>\\<rceil>.\n        P (\\<lambda>_. x) \\<tau> = false \\<tau>;\n     \\<tau> |\\<noteq> \\<delta> S and \\<upsilon> x\\<rbrakk>\n    \\<Longrightarrow> \\<bottom> = (P x and OclForall S P) \\<tau>\n 7. \\<lbrakk>\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n       (S->including\\<^sub>S\\<^sub>e\\<^sub>t(x) \\<tau>)\\<rceil>\\<rceil>.\n                P (\\<lambda>_. x) \\<tau> = null \\<tau>;\n     \\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                     (S->including\\<^sub>S\\<^sub>e\\<^sub>t(x)\n \\<tau>)\\<rceil>\\<rceil>.\n        P (\\<lambda>_. x) \\<tau> \\<noteq> invalid \\<tau>;\n     \\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                     (S->including\\<^sub>S\\<^sub>e\\<^sub>t(x)\n \\<tau>)\\<rceil>\\<rceil>.\n        P (\\<lambda>_. x) \\<tau> \\<noteq> false \\<tau>;\n     \\<tau> |\\<noteq> \\<delta> S and \\<upsilon> x\\<rbrakk>\n    \\<Longrightarrow> \\<bottom> = (P x and OclForall S P) \\<tau>\n 8. \\<lbrakk>\\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n       (S->including\\<^sub>S\\<^sub>e\\<^sub>t(x) \\<tau>)\\<rceil>\\<rceil>.\n                P (\\<lambda>_. x) \\<tau> \\<noteq> null \\<tau>;\n     P x \\<tau> = invalid \\<tau> \\<or>\n     (\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n(S \\<tau>)\\<rceil>\\<rceil>.\n         P (\\<lambda>_. x) \\<tau> = invalid \\<tau>);\n     P x \\<tau> = false \\<tau> \\<or>\n     (\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n(S \\<tau>)\\<rceil>\\<rceil>.\n         P (\\<lambda>_. x) \\<tau> = false \\<tau>);\n     \\<tau> \\<Turnstile> \\<delta> S and \\<upsilon> x\\<rbrakk>\n    \\<Longrightarrow> false \\<tau> = (P x and OclForall S P) \\<tau>\n 9. \\<lbrakk>\\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n       (S->including\\<^sub>S\\<^sub>e\\<^sub>t(x) \\<tau>)\\<rceil>\\<rceil>.\n                P (\\<lambda>_. x) \\<tau> \\<noteq> null \\<tau>;\n     \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                     (S->including\\<^sub>S\\<^sub>e\\<^sub>t(x)\n \\<tau>)\\<rceil>\\<rceil>.\n        P (\\<lambda>_. x) \\<tau> = invalid \\<tau>;\n     \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                     (S->including\\<^sub>S\\<^sub>e\\<^sub>t(x)\n \\<tau>)\\<rceil>\\<rceil>.\n        P (\\<lambda>_. x) \\<tau> = false \\<tau>;\n     \\<tau> |\\<noteq> \\<delta> S and \\<upsilon> x\\<rbrakk>\n    \\<Longrightarrow> \\<bottom> = (P x and OclForall S P) \\<tau>\n 10. \\<lbrakk>\\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n        (S->including\\<^sub>S\\<^sub>e\\<^sub>t(x) \\<tau>)\\<rceil>\\<rceil>.\n                 P (\\<lambda>_. x) \\<tau> \\<noteq> null \\<tau>;\n      \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n(S->including\\<^sub>S\\<^sub>e\\<^sub>t(x) \\<tau>)\\<rceil>\\<rceil>.\n         P (\\<lambda>_. x) \\<tau> = invalid \\<tau>;\n      \\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n(S->including\\<^sub>S\\<^sub>e\\<^sub>t(x) \\<tau>)\\<rceil>\\<rceil>.\n         P (\\<lambda>_. x) \\<tau> \\<noteq> false \\<tau>;\n      \\<tau> |\\<noteq> \\<delta> S and \\<upsilon> x\\<rbrakk>\n     \\<Longrightarrow> \\<bottom> = (P x and OclForall S P) \\<tau>\nA total of 14 subgoals...", "show   \"true \\<tau> = (P x and OclForall S P) \\<tau>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. true \\<tau> = (P x and OclForall S P) \\<tau>", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. true \\<tau> = (P x and OclForall S P) \\<tau>", "note 4 = 4[OF 3]"], ["proof (state)\nthis:\n  P x \\<tau> \\<noteq> false \\<tau> \\<and>\n  (\\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                   (S \\<tau>)\\<rceil>\\<rceil>.\n      P (\\<lambda>_. x) \\<tau> \\<noteq> false \\<tau>)\n\ngoal (1 subgoal):\n 1. true \\<tau> = (P x and OclForall S P) \\<tau>", "note 5 = 5[OF 2]"], ["proof (state)\nthis:\n  P x \\<tau> \\<noteq> invalid \\<tau> \\<and>\n  (\\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                   (S \\<tau>)\\<rceil>\\<rceil>.\n      P (\\<lambda>_. x) \\<tau> \\<noteq> invalid \\<tau>)\n\ngoal (1 subgoal):\n 1. true \\<tau> = (P x and OclForall S P) \\<tau>", "note 6 = 6[OF 1]"], ["proof (state)\nthis:\n  P x \\<tau> \\<noteq> null \\<tau> \\<and>\n  (\\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                   (S \\<tau>)\\<rceil>\\<rceil>.\n      P (\\<lambda>_. x) \\<tau> \\<noteq> null \\<tau>)\n\ngoal (1 subgoal):\n 1. true \\<tau> = (P x and OclForall S P) \\<tau>", "have 8 : \"P x \\<tau> = true \\<tau>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P x \\<tau> = true \\<tau>", "by(metis 4 5 6 bool_split_0)"], ["proof (state)\nthis:\n  P x \\<tau> = true \\<tau>\n\ngoal (1 subgoal):\n 1. true \\<tau> = (P x and OclForall S P) \\<tau>", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. true \\<tau> = (P x and OclForall S P) \\<tau>", "apply(subst cp_OclAnd, simp add: 8 cp_OclAnd[symmetric])"], ["proof (prove)\ngoal (1 subgoal):\n 1. true \\<tau> = OclForall S P \\<tau>", "by(simp add: OclForall_def 4 5 6 7)"], ["proof (state)\nthis:\n  true \\<tau> = (P x and OclForall S P) \\<tau>\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  true \\<tau> = (P x and OclForall S P) \\<tau>\n\ngoal (13 subgoals):\n 1. \\<lbrakk>P x \\<tau> = null \\<tau> \\<or>\n             (\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n        (S \\<tau>)\\<rceil>\\<rceil>.\n                 P (\\<lambda>_. x) \\<tau> = null \\<tau>);\n     P x \\<tau> = invalid \\<tau> \\<or>\n     (\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n(S \\<tau>)\\<rceil>\\<rceil>.\n         P (\\<lambda>_. x) \\<tau> = invalid \\<tau>);\n     P x \\<tau> = false \\<tau> \\<or>\n     (\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n(S \\<tau>)\\<rceil>\\<rceil>.\n         P (\\<lambda>_. x) \\<tau> = false \\<tau>);\n     \\<tau> \\<Turnstile> \\<delta> S and \\<upsilon> x\\<rbrakk>\n    \\<Longrightarrow> false \\<tau> = (P x and OclForall S P) \\<tau>\n 2. \\<lbrakk>\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n       (S->including\\<^sub>S\\<^sub>e\\<^sub>t(x) \\<tau>)\\<rceil>\\<rceil>.\n                P (\\<lambda>_. x) \\<tau> = null \\<tau>;\n     \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                     (S->including\\<^sub>S\\<^sub>e\\<^sub>t(x)\n \\<tau>)\\<rceil>\\<rceil>.\n        P (\\<lambda>_. x) \\<tau> = invalid \\<tau>;\n     \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                     (S->including\\<^sub>S\\<^sub>e\\<^sub>t(x)\n \\<tau>)\\<rceil>\\<rceil>.\n        P (\\<lambda>_. x) \\<tau> = false \\<tau>;\n     \\<tau> |\\<noteq> \\<delta> S and \\<upsilon> x\\<rbrakk>\n    \\<Longrightarrow> \\<bottom> = (P x and OclForall S P) \\<tau>\n 3. \\<lbrakk>P x \\<tau> = null \\<tau> \\<or>\n             (\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n        (S \\<tau>)\\<rceil>\\<rceil>.\n                 P (\\<lambda>_. x) \\<tau> = null \\<tau>);\n     P x \\<tau> = invalid \\<tau> \\<or>\n     (\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n(S \\<tau>)\\<rceil>\\<rceil>.\n         P (\\<lambda>_. x) \\<tau> = invalid \\<tau>);\n     \\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                     (S->including\\<^sub>S\\<^sub>e\\<^sub>t(x)\n \\<tau>)\\<rceil>\\<rceil>.\n        P (\\<lambda>_. x) \\<tau> \\<noteq> false \\<tau>;\n     \\<tau> \\<Turnstile> \\<delta> S and \\<upsilon> x\\<rbrakk>\n    \\<Longrightarrow> invalid \\<tau> = (P x and OclForall S P) \\<tau>\n 4. \\<lbrakk>\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n       (S->including\\<^sub>S\\<^sub>e\\<^sub>t(x) \\<tau>)\\<rceil>\\<rceil>.\n                P (\\<lambda>_. x) \\<tau> = null \\<tau>;\n     \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                     (S->including\\<^sub>S\\<^sub>e\\<^sub>t(x)\n \\<tau>)\\<rceil>\\<rceil>.\n        P (\\<lambda>_. x) \\<tau> = invalid \\<tau>;\n     \\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                     (S->including\\<^sub>S\\<^sub>e\\<^sub>t(x)\n \\<tau>)\\<rceil>\\<rceil>.\n        P (\\<lambda>_. x) \\<tau> \\<noteq> false \\<tau>;\n     \\<tau> |\\<noteq> \\<delta> S and \\<upsilon> x\\<rbrakk>\n    \\<Longrightarrow> \\<bottom> = (P x and OclForall S P) \\<tau>\n 5. \\<lbrakk>P x \\<tau> = null \\<tau> \\<or>\n             (\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n        (S \\<tau>)\\<rceil>\\<rceil>.\n                 P (\\<lambda>_. x) \\<tau> = null \\<tau>);\n     \\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                     (S->including\\<^sub>S\\<^sub>e\\<^sub>t(x)\n \\<tau>)\\<rceil>\\<rceil>.\n        P (\\<lambda>_. x) \\<tau> \\<noteq> invalid \\<tau>;\n     P x \\<tau> = false \\<tau> \\<or>\n     (\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n(S \\<tau>)\\<rceil>\\<rceil>.\n         P (\\<lambda>_. x) \\<tau> = false \\<tau>);\n     \\<tau> \\<Turnstile> \\<delta> S and \\<upsilon> x\\<rbrakk>\n    \\<Longrightarrow> false \\<tau> = (P x and OclForall S P) \\<tau>\n 6. \\<lbrakk>\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n       (S->including\\<^sub>S\\<^sub>e\\<^sub>t(x) \\<tau>)\\<rceil>\\<rceil>.\n                P (\\<lambda>_. x) \\<tau> = null \\<tau>;\n     \\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                     (S->including\\<^sub>S\\<^sub>e\\<^sub>t(x)\n \\<tau>)\\<rceil>\\<rceil>.\n        P (\\<lambda>_. x) \\<tau> \\<noteq> invalid \\<tau>;\n     \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                     (S->including\\<^sub>S\\<^sub>e\\<^sub>t(x)\n \\<tau>)\\<rceil>\\<rceil>.\n        P (\\<lambda>_. x) \\<tau> = false \\<tau>;\n     \\<tau> |\\<noteq> \\<delta> S and \\<upsilon> x\\<rbrakk>\n    \\<Longrightarrow> \\<bottom> = (P x and OclForall S P) \\<tau>\n 7. \\<lbrakk>\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n       (S->including\\<^sub>S\\<^sub>e\\<^sub>t(x) \\<tau>)\\<rceil>\\<rceil>.\n                P (\\<lambda>_. x) \\<tau> = null \\<tau>;\n     \\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                     (S->including\\<^sub>S\\<^sub>e\\<^sub>t(x)\n \\<tau>)\\<rceil>\\<rceil>.\n        P (\\<lambda>_. x) \\<tau> \\<noteq> invalid \\<tau>;\n     \\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                     (S->including\\<^sub>S\\<^sub>e\\<^sub>t(x)\n \\<tau>)\\<rceil>\\<rceil>.\n        P (\\<lambda>_. x) \\<tau> \\<noteq> false \\<tau>;\n     \\<tau> |\\<noteq> \\<delta> S and \\<upsilon> x\\<rbrakk>\n    \\<Longrightarrow> \\<bottom> = (P x and OclForall S P) \\<tau>\n 8. \\<lbrakk>\\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n       (S->including\\<^sub>S\\<^sub>e\\<^sub>t(x) \\<tau>)\\<rceil>\\<rceil>.\n                P (\\<lambda>_. x) \\<tau> \\<noteq> null \\<tau>;\n     P x \\<tau> = invalid \\<tau> \\<or>\n     (\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n(S \\<tau>)\\<rceil>\\<rceil>.\n         P (\\<lambda>_. x) \\<tau> = invalid \\<tau>);\n     P x \\<tau> = false \\<tau> \\<or>\n     (\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n(S \\<tau>)\\<rceil>\\<rceil>.\n         P (\\<lambda>_. x) \\<tau> = false \\<tau>);\n     \\<tau> \\<Turnstile> \\<delta> S and \\<upsilon> x\\<rbrakk>\n    \\<Longrightarrow> false \\<tau> = (P x and OclForall S P) \\<tau>\n 9. \\<lbrakk>\\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n       (S->including\\<^sub>S\\<^sub>e\\<^sub>t(x) \\<tau>)\\<rceil>\\<rceil>.\n                P (\\<lambda>_. x) \\<tau> \\<noteq> null \\<tau>;\n     \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                     (S->including\\<^sub>S\\<^sub>e\\<^sub>t(x)\n \\<tau>)\\<rceil>\\<rceil>.\n        P (\\<lambda>_. x) \\<tau> = invalid \\<tau>;\n     \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                     (S->including\\<^sub>S\\<^sub>e\\<^sub>t(x)\n \\<tau>)\\<rceil>\\<rceil>.\n        P (\\<lambda>_. x) \\<tau> = false \\<tau>;\n     \\<tau> |\\<noteq> \\<delta> S and \\<upsilon> x\\<rbrakk>\n    \\<Longrightarrow> \\<bottom> = (P x and OclForall S P) \\<tau>\n 10. \\<lbrakk>\\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n        (S->including\\<^sub>S\\<^sub>e\\<^sub>t(x) \\<tau>)\\<rceil>\\<rceil>.\n                 P (\\<lambda>_. x) \\<tau> \\<noteq> null \\<tau>;\n      \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n(S->including\\<^sub>S\\<^sub>e\\<^sub>t(x) \\<tau>)\\<rceil>\\<rceil>.\n         P (\\<lambda>_. x) \\<tau> = invalid \\<tau>;\n      \\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n(S->including\\<^sub>S\\<^sub>e\\<^sub>t(x) \\<tau>)\\<rceil>\\<rceil>.\n         P (\\<lambda>_. x) \\<tau> \\<noteq> false \\<tau>;\n      \\<tau> |\\<noteq> \\<delta> S and \\<upsilon> x\\<rbrakk>\n     \\<Longrightarrow> \\<bottom> = (P x and OclForall S P) \\<tau>\nA total of 13 subgoals...", "qed ( simp add: 0\n               | rule C1, simp+\n               | rule C2, simp add: 0 )+"], ["proof (state)\nthis:\n  OclForall S->including\\<^sub>S\\<^sub>e\\<^sub>t(x) P \\<tau> =\n  (P x and OclForall S P) \\<tau>\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ?\\<tau>3 \\<Turnstile> \\<delta> S and \\<upsilon> x \\<Longrightarrow>\n  OclForall S->including\\<^sub>S\\<^sub>e\\<^sub>t(x) P ?\\<tau>3 =\n  (P x and OclForall S P) ?\\<tau>3\n\ngoal (1 subgoal):\n 1. OclForall S->including\\<^sub>S\\<^sub>e\\<^sub>t(x) P =\n    (if \\<delta> S and\n        \\<upsilon> x then P x and OclForall S P else invalid endif)", "have B : \"\\<And>\\<tau>. \\<not> (\\<tau> \\<Turnstile> (\\<delta> S and \\<upsilon> x)) \\<Longrightarrow>\n                 OclForall (S->including\\<^sub>S\\<^sub>e\\<^sub>t(x)) P \\<tau> = invalid \\<tau>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<tau>.\n       \\<tau> |\\<noteq> \\<delta> S and \\<upsilon> x \\<Longrightarrow>\n       OclForall S->including\\<^sub>S\\<^sub>e\\<^sub>t(x) P \\<tau> =\n       invalid \\<tau>", "apply(rule foundation22[THEN iffD1])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<tau>.\n       \\<tau> |\\<noteq> \\<delta> S and \\<upsilon> x \\<Longrightarrow>\n       \\<tau>\n        \\<Turnstile> OclForall S->including\\<^sub>S\\<^sub>e\\<^sub>t(x)\n                      P \\<triangleq>\n                     invalid", "apply(simp only: foundation10' de_Morgan_conj foundation18'', elim disjE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>\\<tau>.\n       \\<tau> |\\<noteq> \\<delta> S \\<Longrightarrow>\n       \\<tau>\n        \\<Turnstile> OclForall S->including\\<^sub>S\\<^sub>e\\<^sub>t(x)\n                      P \\<triangleq>\n                     invalid\n 2. \\<And>\\<tau>.\n       \\<not> \\<tau> |\\<noteq> x \\<triangleq> invalid \\<Longrightarrow>\n       \\<tau>\n        \\<Turnstile> OclForall S->including\\<^sub>S\\<^sub>e\\<^sub>t(x)\n                      P \\<triangleq>\n                     invalid", "apply(simp add:  defined_split, elim disjE)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>\\<tau>.\n       \\<tau> \\<Turnstile> S \\<triangleq> invalid \\<Longrightarrow>\n       \\<tau>\n        \\<Turnstile> OclForall S->including\\<^sub>S\\<^sub>e\\<^sub>t(x)\n                      P \\<triangleq>\n                     invalid\n 2. \\<And>\\<tau>.\n       \\<tau> \\<Turnstile> S \\<triangleq> null \\<Longrightarrow>\n       \\<tau>\n        \\<Turnstile> OclForall S->including\\<^sub>S\\<^sub>e\\<^sub>t(x)\n                      P \\<triangleq>\n                     invalid\n 3. \\<And>\\<tau>.\n       \\<not> \\<tau> |\\<noteq> x \\<triangleq> invalid \\<Longrightarrow>\n       \\<tau>\n        \\<Turnstile> OclForall S->including\\<^sub>S\\<^sub>e\\<^sub>t(x)\n                      P \\<triangleq>\n                     invalid", "apply(erule StrongEq_L_subst2_rev, simp+)+"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  ?\\<tau>3 |\\<noteq> \\<delta> S and \\<upsilon> x \\<Longrightarrow>\n  OclForall S->including\\<^sub>S\\<^sub>e\\<^sub>t(x) P ?\\<tau>3 =\n  invalid ?\\<tau>3\n\ngoal (1 subgoal):\n 1. OclForall S->including\\<^sub>S\\<^sub>e\\<^sub>t(x) P =\n    (if \\<delta> S and\n        \\<upsilon> x then P x and OclForall S P else invalid endif)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. OclForall S->including\\<^sub>S\\<^sub>e\\<^sub>t(x) P =\n    (if \\<delta> S and\n        \\<upsilon> x then P x and OclForall S P else invalid endif)", "apply(rule ext, rename_tac \\<tau>)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<tau>.\n       OclForall S->including\\<^sub>S\\<^sub>e\\<^sub>t(x) P \\<tau> =\n       (if \\<delta> S and\n           \\<upsilon> x then P x and OclForall S P else invalid endif)\n        \\<tau>", "apply(simp add: OclIf_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<tau>.\n       ((\\<delta> S and \\<upsilon> x) \\<tau> = true \\<tau> \\<longrightarrow>\n        ((\\<delta> (\\<delta> S and \\<upsilon> x)) \\<tau> =\n         true \\<tau> \\<longrightarrow>\n         OclForall S->including\\<^sub>S\\<^sub>e\\<^sub>t(x) P \\<tau> =\n         (P x and OclForall S P) \\<tau>) \\<and>\n        ((\\<delta> (\\<delta> S and \\<upsilon> x)) \\<tau> \\<noteq>\n         true \\<tau> \\<longrightarrow>\n         OclForall S->including\\<^sub>S\\<^sub>e\\<^sub>t(x) P \\<tau> =\n         invalid \\<tau>)) \\<and>\n       ((\\<delta> S and \\<upsilon> x) \\<tau> \\<noteq>\n        true \\<tau> \\<longrightarrow>\n        OclForall S->including\\<^sub>S\\<^sub>e\\<^sub>t(x) P \\<tau> =\n        invalid \\<tau>)", "apply(simp add: cp_defined[of \"\\<delta> S and \\<upsilon> x\"] cp_defined[THEN sym])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<tau>.\n       ((\\<delta> S and \\<upsilon> x) \\<tau> = true \\<tau> \\<longrightarrow>\n        OclForall S->including\\<^sub>S\\<^sub>e\\<^sub>t(x) P \\<tau> =\n        (P x and OclForall S P) \\<tau>) \\<and>\n       ((\\<delta> S and \\<upsilon> x) \\<tau> \\<noteq>\n        true \\<tau> \\<longrightarrow>\n        OclForall S->including\\<^sub>S\\<^sub>e\\<^sub>t(x) P \\<tau> =\n        invalid \\<tau>)", "apply(intro conjI impI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>\\<tau>.\n       (\\<delta> S and \\<upsilon> x) \\<tau> = true \\<tau> \\<Longrightarrow>\n       OclForall S->including\\<^sub>S\\<^sub>e\\<^sub>t(x) P \\<tau> =\n       (P x and OclForall S P) \\<tau>\n 2. \\<And>\\<tau>.\n       (\\<delta> S and \\<upsilon> x) \\<tau> \\<noteq>\n       true \\<tau> \\<Longrightarrow>\n       OclForall S->including\\<^sub>S\\<^sub>e\\<^sub>t(x) P \\<tau> =\n       invalid \\<tau>", "by(auto intro!: A B simp: OclValid_def)"], ["proof (state)\nthis:\n  OclForall S->including\\<^sub>S\\<^sub>e\\<^sub>t(x) P =\n  (if \\<delta> S and\n      \\<upsilon> x then P x and OclForall S P else invalid endif)\n\ngoal:\nNo subgoals!", "qed"], ["", "subsubsection\\<open>Execution Rules on Exists\\<close>"], ["", "lemma OclExists_mtSet_exec[simp,code_unfold] :\n\"((Set{})->exists\\<^sub>S\\<^sub>e\\<^sub>t(z | P(z))) = false\""], ["proof (prove)\ngoal (1 subgoal):\n 1. OclExists Set{} P = false", "by(simp add: OclExists_def)"], ["", "lemma OclExists_including_exec[simp,code_unfold] :\n assumes cp: \"cp P\"\n shows \"((S->including\\<^sub>S\\<^sub>e\\<^sub>t(x))->exists\\<^sub>S\\<^sub>e\\<^sub>t(z | P(z))) = (if \\<delta> S and \\<upsilon> x\n                                                 then P x or (S->exists\\<^sub>S\\<^sub>e\\<^sub>t(z | P(z)))\n                                                 else invalid\n                                                 endif)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. OclExists S->including\\<^sub>S\\<^sub>e\\<^sub>t(x) P =\n    (if \\<delta> S and\n        \\<upsilon> x then P x or OclExists S P else invalid endif)", "by(simp add: OclExists_def OclOr_def  cp OclNot_inject)"], ["", "subsubsection\\<open>Execution Rules on Iterate\\<close>"], ["", "lemma OclIterate_empty[simp,code_unfold]: \"((Set{})->iterate\\<^sub>S\\<^sub>e\\<^sub>t(a; x = A | P a x)) = A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. OclIterate Set{} A P = A", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. OclIterate Set{} A P = A", "have C : \"\\<And> \\<tau>. (\\<delta> (\\<lambda>\\<tau>. Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e \\<lfloor>\\<lfloor>{}\\<rfloor>\\<rfloor>)) \\<tau> = true \\<tau>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<tau>.\n       (\\<delta> (\\<lambda>\\<tau>.\n                     Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                      \\<lfloor>\\<lfloor>{}\\<rfloor>\\<rfloor>))\n        \\<tau> =\n       true \\<tau>", "by (metis (no_types) defined_def mtSet_def mtSet_defined null_fun_def)"], ["proof (state)\nthis:\n  (\\<delta> (\\<lambda>\\<tau>.\n                Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                 \\<lfloor>\\<lfloor>{}\\<rfloor>\\<rfloor>))\n   ?\\<tau> =\n  true ?\\<tau>\n\ngoal (1 subgoal):\n 1. OclIterate Set{} A P = A", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. OclIterate Set{} A P = A", "apply(simp add: OclIterate_def mtSet_def Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e_inverse valid_def C)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>\\<tau>.\n        if (if A \\<tau> = \\<bottom> \\<tau> then false \\<tau>\n            else true \\<tau>) =\n           true \\<tau>\n        then Finite_Set.fold P A\n              ((\\<lambda>a \\<tau>. a) `\n               \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                (Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                  \\<lfloor>\\<lfloor>{}\\<rfloor>\\<rfloor>)\\<rceil>\\<rceil>)\n              \\<tau>\n        else \\<bottom>) =\n    A", "apply(rule ext, rename_tac \\<tau>)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<tau>.\n       (if (if A \\<tau> = \\<bottom> \\<tau> then false \\<tau>\n            else true \\<tau>) =\n           true \\<tau>\n        then Finite_Set.fold P A\n              ((\\<lambda>a \\<tau>. a) `\n               \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                (Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                  \\<lfloor>\\<lfloor>{}\\<rfloor>\\<rfloor>)\\<rceil>\\<rceil>)\n              \\<tau>\n        else \\<bottom>) =\n       A \\<tau>", "apply(case_tac \"A \\<tau> = \\<bottom> \\<tau>\", simp_all, simp add:true_def false_def bot_fun_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<tau>.\n       A \\<tau> \\<noteq> \\<bottom> \\<tau> \\<Longrightarrow>\n       Finite_Set.fold P A\n        ((\\<lambda>a \\<tau>. a) `\n         \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                          (Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                            \\<lfloor>\\<lfloor>{}\\<rfloor>\\<rfloor>)\\<rceil>\\<rceil>)\n        \\<tau> =\n       A \\<tau>", "apply(simp add: Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e_inverse)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  OclIterate Set{} A P = A\n\ngoal:\nNo subgoals!", "qed"], ["", "text\\<open>In particular, this does hold for A = null.\\<close>"], ["", "lemma OclIterate_including:\nassumes S_finite:    \"\\<tau> \\<Turnstile> \\<delta>(S->size\\<^sub>S\\<^sub>e\\<^sub>t())\"\nand     F_valid_arg: \"(\\<upsilon> A) \\<tau> = (\\<upsilon> (F a A)) \\<tau>\"\nand     F_commute:   \"comp_fun_commute F\"\nand     F_cp:        \"\\<And> x y \\<tau>. F x y \\<tau> = F (\\<lambda> _. x \\<tau>) y \\<tau>\"\nshows   \"((S->including\\<^sub>S\\<^sub>e\\<^sub>t(a))->iterate\\<^sub>S\\<^sub>e\\<^sub>t(a; x =     A | F a x)) \\<tau> =\n         ((S->excluding\\<^sub>S\\<^sub>e\\<^sub>t(a))->iterate\\<^sub>S\\<^sub>e\\<^sub>t(a; x = F a A | F a x)) \\<tau>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. OclIterate S->including\\<^sub>S\\<^sub>e\\<^sub>t(a) A F \\<tau> =\n    OclIterate S->excluding\\<^sub>S\\<^sub>e\\<^sub>t(a) (F a A) F \\<tau>", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. OclIterate S->including\\<^sub>S\\<^sub>e\\<^sub>t(a) A F \\<tau> =\n    OclIterate S->excluding\\<^sub>S\\<^sub>e\\<^sub>t(a) (F a A) F \\<tau>", "have insert_in_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e : \"\\<And>\\<tau>. (\\<tau> \\<Turnstile>(\\<delta> S)) \\<Longrightarrow> (\\<tau> \\<Turnstile>(\\<upsilon> a)) \\<Longrightarrow>\n    \\<lfloor>\\<lfloor>insert (a \\<tau>) \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e (S \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor> \\<in> {X. X = bot \\<or> X = null \\<or> (\\<forall>x\\<in>\\<lceil>\\<lceil>X\\<rceil>\\<rceil>. x \\<noteq> bot)}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<tau>.\n       \\<lbrakk>\\<tau> \\<Turnstile> \\<delta> S;\n        \\<tau> \\<Turnstile> \\<upsilon> a\\<rbrakk>\n       \\<Longrightarrow> \\<lfloor>\\<lfloor>insert (a \\<tau>)\n      \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                       (S \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>\n                         \\<in> {X. X = \\<bottom> \\<or>\n                                   X = null \\<or>\n                                   (\\<forall>x\n       \\<in>\\<lceil>\\<lceil>X\\<rceil>\\<rceil>.\n x \\<noteq> \\<bottom>)}", "by(frule Set_inv_lemma, simp add: foundation18 invalid_def)"], ["proof (state)\nthis:\n  \\<lbrakk>?\\<tau> \\<Turnstile> \\<delta> S;\n   ?\\<tau> \\<Turnstile> \\<upsilon> a\\<rbrakk>\n  \\<Longrightarrow> \\<lfloor>\\<lfloor>insert (a ?\\<tau>)\n \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                  (S ?\\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>\n                    \\<in> {X. X = \\<bottom> \\<or>\n                              X = null \\<or>\n                              (\\<forall>x\n  \\<in>\\<lceil>\\<lceil>X\\<rceil>\\<rceil>.\n                                  x \\<noteq> \\<bottom>)}\n\ngoal (1 subgoal):\n 1. OclIterate S->including\\<^sub>S\\<^sub>e\\<^sub>t(a) A F \\<tau> =\n    OclIterate S->excluding\\<^sub>S\\<^sub>e\\<^sub>t(a) (F a A) F \\<tau>", "have insert_defined : \"\\<And>\\<tau>. (\\<tau> \\<Turnstile>(\\<delta> S)) \\<Longrightarrow> (\\<tau> \\<Turnstile>(\\<upsilon> a)) \\<Longrightarrow>\n            (\\<delta> (\\<lambda>_. Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e \\<lfloor>\\<lfloor>insert (a \\<tau>) \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e (S \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>)) \\<tau> = true \\<tau>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<tau>.\n       \\<lbrakk>\\<tau> \\<Turnstile> \\<delta> S;\n        \\<tau> \\<Turnstile> \\<upsilon> a\\<rbrakk>\n       \\<Longrightarrow> (\\<delta> (\\<lambda>_.\n Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n  \\<lfloor>\\<lfloor>insert (a \\<tau>)\n                     \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n(S \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>))\n                          \\<tau> =\n                         true \\<tau>", "apply(subst defined_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<tau>.\n       \\<lbrakk>\\<tau> \\<Turnstile> \\<delta> S;\n        \\<tau> \\<Turnstile> \\<upsilon> a\\<rbrakk>\n       \\<Longrightarrow> (if Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                              \\<lfloor>\\<lfloor>insert (a \\<tau>)\n           \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                            (S \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor> =\n                             \\<bottom> \\<tau> \\<or>\n                             Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                              \\<lfloor>\\<lfloor>insert (a \\<tau>)\n           \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                            (S \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor> =\n                             null \\<tau>\n                          then false \\<tau> else true \\<tau>) =\n                         true \\<tau>", "apply(simp add: bot_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e_def bot_fun_def null_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e_def null_fun_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<tau>.\n       \\<lbrakk>\\<tau> \\<Turnstile> \\<delta> S;\n        \\<tau> \\<Turnstile> \\<upsilon> a\\<rbrakk>\n       \\<Longrightarrow> (Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                           \\<lfloor>\\<lfloor>insert (a \\<tau>)\n        \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                         (S \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor> =\n                          Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                           None \\<longrightarrow>\n                          false \\<tau> = true \\<tau>) \\<and>\n                         (Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                           \\<lfloor>\\<lfloor>insert (a \\<tau>)\n        \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                         (S \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor> =\n                          Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                           \\<lfloor>None\\<rfloor> \\<longrightarrow>\n                          false \\<tau> = true \\<tau>)", "by(subst Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e_inject,\n     rule insert_in_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e, simp_all add: null_option_def bot_option_def)+"], ["proof (state)\nthis:\n  \\<lbrakk>?\\<tau> \\<Turnstile> \\<delta> S;\n   ?\\<tau> \\<Turnstile> \\<upsilon> a\\<rbrakk>\n  \\<Longrightarrow> (\\<delta> (\\<lambda>_.\n                                  Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                   \\<lfloor>\\<lfloor>insert (a ?\\<tau>)\n                \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                 (S ?\\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>))\n                     ?\\<tau> =\n                    true ?\\<tau>\n\ngoal (1 subgoal):\n 1. OclIterate S->including\\<^sub>S\\<^sub>e\\<^sub>t(a) A F \\<tau> =\n    OclIterate S->excluding\\<^sub>S\\<^sub>e\\<^sub>t(a) (F a A) F \\<tau>", "have remove_finite : \"finite \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e (S \\<tau>)\\<rceil>\\<rceil> \\<Longrightarrow>\n                       finite ((\\<lambda>a \\<tau>. a) ` (\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e (S \\<tau>)\\<rceil>\\<rceil> - {a \\<tau>}))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite\n     \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                      (S \\<tau>)\\<rceil>\\<rceil> \\<Longrightarrow>\n    finite\n     ((\\<lambda>a \\<tau>. a) `\n      (\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                        (S \\<tau>)\\<rceil>\\<rceil> -\n       {a \\<tau>}))", "by(simp)"], ["proof (state)\nthis:\n  finite\n   \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                    (S \\<tau>)\\<rceil>\\<rceil> \\<Longrightarrow>\n  finite\n   ((\\<lambda>a \\<tau>. a) `\n    (\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                      (S \\<tau>)\\<rceil>\\<rceil> -\n     {a \\<tau>}))\n\ngoal (1 subgoal):\n 1. OclIterate S->including\\<^sub>S\\<^sub>e\\<^sub>t(a) A F \\<tau> =\n    OclIterate S->excluding\\<^sub>S\\<^sub>e\\<^sub>t(a) (F a A) F \\<tau>", "have remove_in_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e : \"\\<And>\\<tau>. (\\<tau> \\<Turnstile>(\\<delta> S)) \\<Longrightarrow> (\\<tau> \\<Turnstile>(\\<upsilon> a)) \\<Longrightarrow>\n   \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e (S \\<tau>)\\<rceil>\\<rceil> - {a \\<tau>}\\<rfloor>\\<rfloor> \\<in> {X. X = bot \\<or> X = null \\<or> (\\<forall>x\\<in>\\<lceil>\\<lceil>X\\<rceil>\\<rceil>. x \\<noteq> bot)}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<tau>.\n       \\<lbrakk>\\<tau> \\<Turnstile> \\<delta> S;\n        \\<tau> \\<Turnstile> \\<upsilon> a\\<rbrakk>\n       \\<Longrightarrow> \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                      (S \\<tau>)\\<rceil>\\<rceil> -\n     {a \\<tau>}\\<rfloor>\\<rfloor>\n                         \\<in> {X. X = \\<bottom> \\<or>\n                                   X = null \\<or>\n                                   (\\<forall>x\n       \\<in>\\<lceil>\\<lceil>X\\<rceil>\\<rceil>.\n x \\<noteq> \\<bottom>)}", "by(frule Set_inv_lemma, simp add: foundation18 invalid_def)"], ["proof (state)\nthis:\n  \\<lbrakk>?\\<tau>1 \\<Turnstile> \\<delta> S;\n   ?\\<tau>1 \\<Turnstile> \\<upsilon> a\\<rbrakk>\n  \\<Longrightarrow> \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                 (S ?\\<tau>1)\\<rceil>\\<rceil> -\n{a ?\\<tau>1}\\<rfloor>\\<rfloor>\n                    \\<in> {X. X = \\<bottom> \\<or>\n                              X = null \\<or>\n                              (\\<forall>x\n  \\<in>\\<lceil>\\<lceil>X\\<rceil>\\<rceil>.\n                                  x \\<noteq> \\<bottom>)}\n\ngoal (1 subgoal):\n 1. OclIterate S->including\\<^sub>S\\<^sub>e\\<^sub>t(a) A F \\<tau> =\n    OclIterate S->excluding\\<^sub>S\\<^sub>e\\<^sub>t(a) (F a A) F \\<tau>", "have remove_defined : \"\\<And>\\<tau>. (\\<tau> \\<Turnstile>(\\<delta> S)) \\<Longrightarrow> (\\<tau> \\<Turnstile>(\\<upsilon> a)) \\<Longrightarrow>\n            (\\<delta> (\\<lambda>_. Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e (S \\<tau>)\\<rceil>\\<rceil> - {a \\<tau>}\\<rfloor>\\<rfloor>)) \\<tau> = true \\<tau>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<tau>.\n       \\<lbrakk>\\<tau> \\<Turnstile> \\<delta> S;\n        \\<tau> \\<Turnstile> \\<upsilon> a\\<rbrakk>\n       \\<Longrightarrow> (\\<delta> (\\<lambda>_.\n Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n  \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                     (S \\<tau>)\\<rceil>\\<rceil> -\n                    {a \\<tau>}\\<rfloor>\\<rfloor>))\n                          \\<tau> =\n                         true \\<tau>", "apply(subst defined_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<tau>.\n       \\<lbrakk>\\<tau> \\<Turnstile> \\<delta> S;\n        \\<tau> \\<Turnstile> \\<upsilon> a\\<rbrakk>\n       \\<Longrightarrow> (if Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                              \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                           (S \\<tau>)\\<rceil>\\<rceil> -\n          {a \\<tau>}\\<rfloor>\\<rfloor> =\n                             \\<bottom> \\<tau> \\<or>\n                             Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                              \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                           (S \\<tau>)\\<rceil>\\<rceil> -\n          {a \\<tau>}\\<rfloor>\\<rfloor> =\n                             null \\<tau>\n                          then false \\<tau> else true \\<tau>) =\n                         true \\<tau>", "apply(simp add: bot_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e_def bot_fun_def null_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e_def null_fun_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<tau>.\n       \\<lbrakk>\\<tau> \\<Turnstile> \\<delta> S;\n        \\<tau> \\<Turnstile> \\<upsilon> a\\<rbrakk>\n       \\<Longrightarrow> (Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                           \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                        (S \\<tau>)\\<rceil>\\<rceil> -\n       {a \\<tau>}\\<rfloor>\\<rfloor> =\n                          Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                           None \\<longrightarrow>\n                          false \\<tau> = true \\<tau>) \\<and>\n                         (Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                           \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                        (S \\<tau>)\\<rceil>\\<rceil> -\n       {a \\<tau>}\\<rfloor>\\<rfloor> =\n                          Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                           \\<lfloor>None\\<rfloor> \\<longrightarrow>\n                          false \\<tau> = true \\<tau>)", "by(subst Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e_inject,\n     rule remove_in_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e, simp_all add: null_option_def bot_option_def)+"], ["proof (state)\nthis:\n  \\<lbrakk>?\\<tau>1 \\<Turnstile> \\<delta> S;\n   ?\\<tau>1 \\<Turnstile> \\<upsilon> a\\<rbrakk>\n  \\<Longrightarrow> (\\<delta> (\\<lambda>_.\n                                  Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                   \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                (S ?\\<tau>1)\\<rceil>\\<rceil> -\n               {a ?\\<tau>1}\\<rfloor>\\<rfloor>))\n                     ?\\<tau>1 =\n                    true ?\\<tau>1\n\ngoal (1 subgoal):\n 1. OclIterate S->including\\<^sub>S\\<^sub>e\\<^sub>t(a) A F \\<tau> =\n    OclIterate S->excluding\\<^sub>S\\<^sub>e\\<^sub>t(a) (F a A) F \\<tau>", "have abs_rep: \"\\<And>x. \\<lfloor>\\<lfloor>x\\<rfloor>\\<rfloor> \\<in> {X. X = bot \\<or> X = null \\<or> (\\<forall>x\\<in>\\<lceil>\\<lceil>X\\<rceil>\\<rceil>. x \\<noteq> bot)} \\<Longrightarrow>\n                    \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e (Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e \\<lfloor>\\<lfloor>x\\<rfloor>\\<rfloor>)\\<rceil>\\<rceil> = x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lfloor>\\<lfloor>x\\<rfloor>\\<rfloor>\n       \\<in> {X. X = \\<bottom> \\<or>\n                 X = null \\<or>\n                 (\\<forall>x\\<in>\\<lceil>\\<lceil>X\\<rceil>\\<rceil>.\n                     x \\<noteq> \\<bottom>)} \\<Longrightarrow>\n       \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                        (Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                          \\<lfloor>\\<lfloor>x\\<rfloor>\\<rfloor>)\\<rceil>\\<rceil> =\n       x", "by(subst Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e_inverse, simp_all)"], ["proof (state)\nthis:\n  \\<lfloor>\\<lfloor>?x1\\<rfloor>\\<rfloor>\n  \\<in> {X. X = \\<bottom> \\<or>\n            X = null \\<or>\n            (\\<forall>x\\<in>\\<lceil>\\<lceil>X\\<rceil>\\<rceil>.\n                x \\<noteq> \\<bottom>)} \\<Longrightarrow>\n  \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                   (Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                     \\<lfloor>\\<lfloor>?x1\\<rfloor>\\<rfloor>)\\<rceil>\\<rceil> =\n  ?x1\n\ngoal (1 subgoal):\n 1. OclIterate S->including\\<^sub>S\\<^sub>e\\<^sub>t(a) A F \\<tau> =\n    OclIterate S->excluding\\<^sub>S\\<^sub>e\\<^sub>t(a) (F a A) F \\<tau>", "have inject : \"inj (\\<lambda>a \\<tau>. a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. inj (\\<lambda>a \\<tau>. a)", "by(rule inj_fun, simp)"], ["proof (state)\nthis:\n  inj (\\<lambda>a \\<tau>. a)\n\ngoal (1 subgoal):\n 1. OclIterate S->including\\<^sub>S\\<^sub>e\\<^sub>t(a) A F \\<tau> =\n    OclIterate S->excluding\\<^sub>S\\<^sub>e\\<^sub>t(a) (F a A) F \\<tau>", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. OclIterate S->including\\<^sub>S\\<^sub>e\\<^sub>t(a) A F \\<tau> =\n    OclIterate S->excluding\\<^sub>S\\<^sub>e\\<^sub>t(a) (F a A) F \\<tau>", "apply(subst (1 2) cp_OclIterate, subst OclIncluding_def, subst OclExcluding_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. OclIterate\n     (\\<lambda>_.\n         if (\\<delta> S) \\<tau> = true \\<tau> \\<and>\n            (\\<upsilon> a) \\<tau> = true \\<tau>\n         then Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n               \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n            (S \\<tau>)\\<rceil>\\<rceil> \\<union>\n                                 {a \\<tau>}\\<rfloor>\\<rfloor>\n         else invalid \\<tau>)\n     A F \\<tau> =\n    OclIterate\n     (\\<lambda>_.\n         if (\\<delta> S) \\<tau> = true \\<tau> \\<and>\n            (\\<upsilon> a) \\<tau> = true \\<tau>\n         then Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n               \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n            (S \\<tau>)\\<rceil>\\<rceil> -\n                                 {a \\<tau>}\\<rfloor>\\<rfloor>\n         else \\<bottom>)\n     (F a A) F \\<tau>", "apply(case_tac \"\\<not> ((\\<delta> S) \\<tau> = true \\<tau> \\<and> (\\<upsilon> a) \\<tau> = true \\<tau>)\", simp add: invalid_def)"], ["proof (prove)\ngoal (2 subgoals):\n 1. (\\<delta> S) \\<tau> = true \\<tau> \\<longrightarrow>\n    (\\<upsilon> a) \\<tau> \\<noteq> true \\<tau> \\<Longrightarrow>\n    ((\\<delta> S) \\<tau> = true \\<tau> \\<and>\n     (\\<upsilon> a) \\<tau> = true \\<tau> \\<longrightarrow>\n     OclIterate\n      (\\<lambda>_.\n          Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n           \\<lfloor>\\<lfloor>insert (a \\<tau>)\n                              \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n         (S \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>)\n      A F \\<tau> =\n     OclIterate\n      (\\<lambda>_.\n          Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n           \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n        (S \\<tau>)\\<rceil>\\<rceil> -\n                             {a \\<tau>}\\<rfloor>\\<rfloor>)\n      (F a A) F \\<tau> \\<and>\n     OclIterate\n      (\\<lambda>_.\n          Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n           \\<lfloor>\\<lfloor>insert (a \\<tau>)\n                              \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n         (S \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>)\n      A F \\<tau> =\n     OclIterate (\\<lambda>_. \\<bottom>) (F a A) F \\<tau>) \\<and>\n    ((\\<delta> S) \\<tau> = true \\<tau> \\<and>\n     (\\<upsilon> a) \\<tau> = true \\<tau> \\<longrightarrow>\n     OclIterate\n      (\\<lambda>_.\n          Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n           \\<lfloor>\\<lfloor>insert (a \\<tau>)\n                              \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n         (S \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>)\n      A F \\<tau> =\n     OclIterate\n      (\\<lambda>_.\n          Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n           \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n        (S \\<tau>)\\<rceil>\\<rceil> -\n                             {a \\<tau>}\\<rfloor>\\<rfloor>)\n      (F a A) F \\<tau>) \\<and>\n    OclIterate (\\<lambda>_. \\<bottom>) A F \\<tau> =\n    OclIterate (\\<lambda>_. \\<bottom>) (F a A) F \\<tau>\n 2. \\<not> \\<not> ((\\<delta> S) \\<tau> = true \\<tau> \\<and>\n                   (\\<upsilon> a) \\<tau> = true \\<tau>) \\<Longrightarrow>\n    OclIterate\n     (\\<lambda>_.\n         if (\\<delta> S) \\<tau> = true \\<tau> \\<and>\n            (\\<upsilon> a) \\<tau> = true \\<tau>\n         then Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n               \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n            (S \\<tau>)\\<rceil>\\<rceil> \\<union>\n                                 {a \\<tau>}\\<rfloor>\\<rfloor>\n         else invalid \\<tau>)\n     A F \\<tau> =\n    OclIterate\n     (\\<lambda>_.\n         if (\\<delta> S) \\<tau> = true \\<tau> \\<and>\n            (\\<upsilon> a) \\<tau> = true \\<tau>\n         then Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n               \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n            (S \\<tau>)\\<rceil>\\<rceil> -\n                                 {a \\<tau>}\\<rfloor>\\<rfloor>\n         else \\<bottom>)\n     (F a A) F \\<tau>", "apply(subgoal_tac \"OclIterate (\\<lambda>_. \\<bottom>) A F \\<tau> = OclIterate (\\<lambda>_. \\<bottom>) (F a A) F \\<tau>\", simp)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>(\\<delta> S) \\<tau> = true \\<tau> \\<longrightarrow>\n             (\\<upsilon> a) \\<tau> \\<noteq> true \\<tau>;\n     OclIterate (\\<lambda>_. \\<bottom>) A F \\<tau> =\n     OclIterate (\\<lambda>_. \\<bottom>) (F a A) F \\<tau>\\<rbrakk>\n    \\<Longrightarrow> ((\\<delta> S) \\<tau> = true \\<tau> \\<and>\n                       (\\<upsilon> a) \\<tau> = true \\<tau> \\<longrightarrow>\n                       OclIterate\n                        (\\<lambda>_.\n                            Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                             \\<lfloor>\\<lfloor>insert (a \\<tau>)\n          \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                           (S \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>)\n                        A F \\<tau> =\n                       OclIterate\n                        (\\<lambda>_.\n                            Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                             \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                          (S \\<tau>)\\<rceil>\\<rceil> -\n         {a \\<tau>}\\<rfloor>\\<rfloor>)\n                        (F a A) F \\<tau> \\<and>\n                       OclIterate\n                        (\\<lambda>_.\n                            Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                             \\<lfloor>\\<lfloor>insert (a \\<tau>)\n          \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                           (S \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>)\n                        A F \\<tau> =\n                       OclIterate (\\<lambda>_. \\<bottom>) (F a A) F\n                        \\<tau>) \\<and>\n                      ((\\<delta> S) \\<tau> = true \\<tau> \\<and>\n                       (\\<upsilon> a) \\<tau> = true \\<tau> \\<longrightarrow>\n                       OclIterate\n                        (\\<lambda>_.\n                            Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                             \\<lfloor>\\<lfloor>insert (a \\<tau>)\n          \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                           (S \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>)\n                        A F \\<tau> =\n                       OclIterate\n                        (\\<lambda>_.\n                            Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                             \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                          (S \\<tau>)\\<rceil>\\<rceil> -\n         {a \\<tau>}\\<rfloor>\\<rfloor>)\n                        (F a A) F \\<tau>)\n 2. (\\<delta> S) \\<tau> = true \\<tau> \\<longrightarrow>\n    (\\<upsilon> a) \\<tau> \\<noteq> true \\<tau> \\<Longrightarrow>\n    OclIterate (\\<lambda>_. \\<bottom>) A F \\<tau> =\n    OclIterate (\\<lambda>_. \\<bottom>) (F a A) F \\<tau>\n 3. \\<not> \\<not> ((\\<delta> S) \\<tau> = true \\<tau> \\<and>\n                   (\\<upsilon> a) \\<tau> = true \\<tau>) \\<Longrightarrow>\n    OclIterate\n     (\\<lambda>_.\n         if (\\<delta> S) \\<tau> = true \\<tau> \\<and>\n            (\\<upsilon> a) \\<tau> = true \\<tau>\n         then Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n               \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n            (S \\<tau>)\\<rceil>\\<rceil> \\<union>\n                                 {a \\<tau>}\\<rfloor>\\<rfloor>\n         else invalid \\<tau>)\n     A F \\<tau> =\n    OclIterate\n     (\\<lambda>_.\n         if (\\<delta> S) \\<tau> = true \\<tau> \\<and>\n            (\\<upsilon> a) \\<tau> = true \\<tau>\n         then Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n               \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n            (S \\<tau>)\\<rceil>\\<rceil> -\n                                 {a \\<tau>}\\<rfloor>\\<rfloor>\n         else \\<bottom>)\n     (F a A) F \\<tau>", "apply(rule conjI, blast+)"], ["proof (prove)\ngoal (2 subgoals):\n 1. (\\<delta> S) \\<tau> = true \\<tau> \\<longrightarrow>\n    (\\<upsilon> a) \\<tau> \\<noteq> true \\<tau> \\<Longrightarrow>\n    OclIterate (\\<lambda>_. \\<bottom>) A F \\<tau> =\n    OclIterate (\\<lambda>_. \\<bottom>) (F a A) F \\<tau>\n 2. \\<not> \\<not> ((\\<delta> S) \\<tau> = true \\<tau> \\<and>\n                   (\\<upsilon> a) \\<tau> = true \\<tau>) \\<Longrightarrow>\n    OclIterate\n     (\\<lambda>_.\n         if (\\<delta> S) \\<tau> = true \\<tau> \\<and>\n            (\\<upsilon> a) \\<tau> = true \\<tau>\n         then Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n               \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n            (S \\<tau>)\\<rceil>\\<rceil> \\<union>\n                                 {a \\<tau>}\\<rfloor>\\<rfloor>\n         else invalid \\<tau>)\n     A F \\<tau> =\n    OclIterate\n     (\\<lambda>_.\n         if (\\<delta> S) \\<tau> = true \\<tau> \\<and>\n            (\\<upsilon> a) \\<tau> = true \\<tau>\n         then Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n               \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n            (S \\<tau>)\\<rceil>\\<rceil> -\n                                 {a \\<tau>}\\<rfloor>\\<rfloor>\n         else \\<bottom>)\n     (F a A) F \\<tau>", "apply(simp add: OclIterate_def defined_def bot_option_def bot_fun_def false_def true_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> \\<not> ((\\<delta> S) \\<tau> = true \\<tau> \\<and>\n                   (\\<upsilon> a) \\<tau> = true \\<tau>) \\<Longrightarrow>\n    OclIterate\n     (\\<lambda>_.\n         if (\\<delta> S) \\<tau> = true \\<tau> \\<and>\n            (\\<upsilon> a) \\<tau> = true \\<tau>\n         then Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n               \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n            (S \\<tau>)\\<rceil>\\<rceil> \\<union>\n                                 {a \\<tau>}\\<rfloor>\\<rfloor>\n         else invalid \\<tau>)\n     A F \\<tau> =\n    OclIterate\n     (\\<lambda>_.\n         if (\\<delta> S) \\<tau> = true \\<tau> \\<and>\n            (\\<upsilon> a) \\<tau> = true \\<tau>\n         then Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n               \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n            (S \\<tau>)\\<rceil>\\<rceil> -\n                                 {a \\<tau>}\\<rfloor>\\<rfloor>\n         else \\<bottom>)\n     (F a A) F \\<tau>", "apply(simp add: OclIterate_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<delta> S) \\<tau> = true \\<tau> \\<and>\n    (\\<upsilon> a) \\<tau> = true \\<tau> \\<Longrightarrow>\n    ((\\<delta> (\\<lambda>_.\n                   Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                    \\<lfloor>\\<lfloor>insert (a \\<tau>)\n \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                  (S \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>))\n      \\<tau> =\n     true \\<tau> \\<and>\n     (\\<upsilon> A) \\<tau> = true \\<tau> \\<and>\n     finite\n      \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                       (Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                         \\<lfloor>\\<lfloor>insert (a \\<tau>)\n      \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                       (S \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>)\\<rceil>\\<rceil> \\<longrightarrow>\n     ((\\<delta> (\\<lambda>_.\n                    Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                     \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                  (S \\<tau>)\\<rceil>\\<rceil> -\n {a \\<tau>}\\<rfloor>\\<rfloor>))\n       \\<tau> =\n      true \\<tau> \\<and>\n      (\\<upsilon> F a A) \\<tau> = true \\<tau> \\<and>\n      finite\n       \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                        (Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                          \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                       (S \\<tau>)\\<rceil>\\<rceil> -\n      {a \\<tau>}\\<rfloor>\\<rfloor>)\\<rceil>\\<rceil> \\<longrightarrow>\n      Finite_Set.fold F A\n       ((\\<lambda>a \\<tau>. a) `\n        \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                         (Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                           \\<lfloor>\\<lfloor>insert (a \\<tau>)\n        \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                         (S \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>)\\<rceil>\\<rceil>)\n       \\<tau> =\n      Finite_Set.fold F (F a A)\n       ((\\<lambda>a \\<tau>. a) `\n        \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                         (Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                           \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                        (S \\<tau>)\\<rceil>\\<rceil> -\n       {a \\<tau>}\\<rfloor>\\<rfloor>)\\<rceil>\\<rceil>)\n       \\<tau>) \\<and>\n     (((\\<upsilon> F a A) \\<tau> = true \\<tau> \\<longrightarrow>\n       (\\<delta> (\\<lambda>_.\n                     Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                      \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                   (S \\<tau>)\\<rceil>\\<rceil> -\n  {a \\<tau>}\\<rfloor>\\<rfloor>))\n        \\<tau> =\n       true \\<tau> \\<longrightarrow>\n       infinite\n        \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                         (Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                           \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                        (S \\<tau>)\\<rceil>\\<rceil> -\n       {a \\<tau>}\\<rfloor>\\<rfloor>)\\<rceil>\\<rceil>) \\<longrightarrow>\n      Finite_Set.fold F A\n       ((\\<lambda>a \\<tau>. a) `\n        \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                         (Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                           \\<lfloor>\\<lfloor>insert (a \\<tau>)\n        \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                         (S \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>)\\<rceil>\\<rceil>)\n       \\<tau> =\n      \\<bottom>)) \\<and>\n    (((\\<upsilon> A) \\<tau> = true \\<tau> \\<longrightarrow>\n      (\\<delta> (\\<lambda>_.\n                    Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                     \\<lfloor>\\<lfloor>insert (a \\<tau>)\n  \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                   (S \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>))\n       \\<tau> =\n      true \\<tau> \\<longrightarrow>\n      infinite\n       \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                        (Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                          \\<lfloor>\\<lfloor>insert (a \\<tau>)\n       \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                        (S \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>)\\<rceil>\\<rceil>) \\<longrightarrow>\n     (\\<delta> (\\<lambda>_.\n                   Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                    \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                 (S \\<tau>)\\<rceil>\\<rceil> -\n{a \\<tau>}\\<rfloor>\\<rfloor>))\n      \\<tau> =\n     true \\<tau> \\<and>\n     (\\<upsilon> F a A) \\<tau> = true \\<tau> \\<and>\n     finite\n      \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                       (Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                         \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                      (S \\<tau>)\\<rceil>\\<rceil> -\n     {a \\<tau>}\\<rfloor>\\<rfloor>)\\<rceil>\\<rceil> \\<longrightarrow>\n     \\<bottom> =\n     Finite_Set.fold F (F a A)\n      ((\\<lambda>a \\<tau>. a) `\n       \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                        (Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                          \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                       (S \\<tau>)\\<rceil>\\<rceil> -\n      {a \\<tau>}\\<rfloor>\\<rfloor>)\\<rceil>\\<rceil>)\n      \\<tau>)", "apply((subst abs_rep[OF insert_in_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e[simplified OclValid_def], of \\<tau>], simp_all)+,\n        (subst abs_rep[OF remove_in_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e[simplified OclValid_def], of \\<tau>], simp_all)+,\n        (subst insert_defined, simp_all add: OclValid_def)+,\n        (subst remove_defined, simp_all add: OclValid_def)+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<delta> S) \\<tau> = true \\<tau> \\<and>\n    (\\<upsilon> a) \\<tau> = true \\<tau> \\<Longrightarrow>\n    ((\\<upsilon> A) \\<tau> = true \\<tau> \\<and>\n     finite\n      \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                       (S \\<tau>)\\<rceil>\\<rceil> \\<longrightarrow>\n     ((\\<upsilon> F a A) \\<tau> = true \\<tau> \\<longrightarrow>\n      Finite_Set.fold F A\n       (insert (\\<lambda>\\<tau>'. a \\<tau>)\n         ((\\<lambda>a \\<tau>. a) `\n          \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                           (S \\<tau>)\\<rceil>\\<rceil>))\n       \\<tau> =\n      Finite_Set.fold F (F a A)\n       ((\\<lambda>a \\<tau>. a) `\n        (\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                          (S \\<tau>)\\<rceil>\\<rceil> -\n         {a \\<tau>}))\n       \\<tau>) \\<and>\n     ((\\<upsilon> F a A) \\<tau> \\<noteq> true \\<tau> \\<longrightarrow>\n      Finite_Set.fold F A\n       (insert (\\<lambda>\\<tau>'. a \\<tau>)\n         ((\\<lambda>a \\<tau>. a) `\n          \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                           (S \\<tau>)\\<rceil>\\<rceil>))\n       \\<tau> =\n      \\<bottom>)) \\<and>\n    (((\\<upsilon> A) \\<tau> = true \\<tau> \\<longrightarrow>\n      infinite\n       \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                        (S \\<tau>)\\<rceil>\\<rceil>) \\<longrightarrow>\n     (\\<upsilon> F a A) \\<tau> = true \\<tau> \\<and>\n     finite\n      \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                       (S \\<tau>)\\<rceil>\\<rceil> \\<longrightarrow>\n     \\<bottom> =\n     Finite_Set.fold F (F a A)\n      ((\\<lambda>a \\<tau>. a) `\n       (\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                         (S \\<tau>)\\<rceil>\\<rceil> -\n        {a \\<tau>}))\n      \\<tau>)", "apply(case_tac \"\\<not> ((\\<upsilon> A) \\<tau> = true \\<tau>)\", (simp add: F_valid_arg)+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>(\\<delta> S) \\<tau> = true \\<tau> \\<and>\n             (\\<upsilon> a) \\<tau> = true \\<tau>;\n     (\\<upsilon> F a A) \\<tau> = true \\<tau>\\<rbrakk>\n    \\<Longrightarrow> finite\n                       \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n  (S \\<tau>)\\<rceil>\\<rceil> \\<longrightarrow>\n                      Finite_Set.fold F A\n                       (insert (\\<lambda>\\<tau>'. a \\<tau>)\n                         ((\\<lambda>a \\<tau>. a) `\n                          \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n     (S \\<tau>)\\<rceil>\\<rceil>))\n                       \\<tau> =\n                      Finite_Set.fold F (F a A)\n                       ((\\<lambda>a \\<tau>. a) `\n                        (\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n    (S \\<tau>)\\<rceil>\\<rceil> -\n                         {a \\<tau>}))\n                       \\<tau>", "apply(rule impI,\n        subst Finite_Set.comp_fun_commute.fold_fun_left_comm[symmetric, OF F_commute],\n        rule remove_finite, simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>(\\<delta> S) \\<tau> = true \\<tau> \\<and>\n             (\\<upsilon> a) \\<tau> = true \\<tau>;\n     (\\<upsilon> F a A) \\<tau> = true \\<tau>;\n     finite\n      \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                       (S \\<tau>)\\<rceil>\\<rceil>\\<rbrakk>\n    \\<Longrightarrow> Finite_Set.fold F A\n                       (insert (\\<lambda>\\<tau>'. a \\<tau>)\n                         ((\\<lambda>a \\<tau>. a) `\n                          \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n     (S \\<tau>)\\<rceil>\\<rceil>))\n                       \\<tau> =\n                      F a (Finite_Set.fold F A\n                            ((\\<lambda>a \\<tau>. a) `\n                             (\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n         (S \\<tau>)\\<rceil>\\<rceil> -\n                              {a \\<tau>})))\n                       \\<tau>", "apply(subst image_set_diff[OF inject], simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>(\\<delta> S) \\<tau> = true \\<tau> \\<and>\n             (\\<upsilon> a) \\<tau> = true \\<tau>;\n     (\\<upsilon> F a A) \\<tau> = true \\<tau>;\n     finite\n      \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                       (S \\<tau>)\\<rceil>\\<rceil>\\<rbrakk>\n    \\<Longrightarrow> Finite_Set.fold F A\n                       (insert (\\<lambda>\\<tau>'. a \\<tau>)\n                         ((\\<lambda>a \\<tau>. a) `\n                          \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n     (S \\<tau>)\\<rceil>\\<rceil>))\n                       \\<tau> =\n                      F a (Finite_Set.fold F A\n                            ((\\<lambda>a \\<tau>. a) `\n                             \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n        (S \\<tau>)\\<rceil>\\<rceil> -\n                             {\\<lambda>\\<tau>'. a \\<tau>}))\n                       \\<tau>", "apply(subgoal_tac \"Finite_Set.fold F A (insert (\\<lambda>\\<tau>'. a \\<tau>) ((\\<lambda>a \\<tau>. a) ` \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e (S \\<tau>)\\<rceil>\\<rceil>)) \\<tau> =\n      F (\\<lambda>\\<tau>'. a \\<tau>) (Finite_Set.fold F A ((\\<lambda>a \\<tau>. a) ` \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e (S \\<tau>)\\<rceil>\\<rceil> - {\\<lambda>\\<tau>'. a \\<tau>})) \\<tau>\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>(\\<delta> S) \\<tau> = true \\<tau> \\<and>\n             (\\<upsilon> a) \\<tau> = true \\<tau>;\n     (\\<upsilon> F a A) \\<tau> = true \\<tau>;\n     finite\n      \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                       (S \\<tau>)\\<rceil>\\<rceil>;\n     Finite_Set.fold F A\n      (insert (\\<lambda>\\<tau>'. a \\<tau>)\n        ((\\<lambda>a \\<tau>. a) `\n         \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                          (S \\<tau>)\\<rceil>\\<rceil>))\n      \\<tau> =\n     F (\\<lambda>\\<tau>'. a \\<tau>)\n      (Finite_Set.fold F A\n        ((\\<lambda>a \\<tau>. a) `\n         \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                          (S \\<tau>)\\<rceil>\\<rceil> -\n         {\\<lambda>\\<tau>'. a \\<tau>}))\n      \\<tau>\\<rbrakk>\n    \\<Longrightarrow> Finite_Set.fold F A\n                       (insert (\\<lambda>\\<tau>'. a \\<tau>)\n                         ((\\<lambda>a \\<tau>. a) `\n                          \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n     (S \\<tau>)\\<rceil>\\<rceil>))\n                       \\<tau> =\n                      F a (Finite_Set.fold F A\n                            ((\\<lambda>a \\<tau>. a) `\n                             \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n        (S \\<tau>)\\<rceil>\\<rceil> -\n                             {\\<lambda>\\<tau>'. a \\<tau>}))\n                       \\<tau>\n 2. \\<lbrakk>(\\<delta> S) \\<tau> = true \\<tau> \\<and>\n             (\\<upsilon> a) \\<tau> = true \\<tau>;\n     (\\<upsilon> F a A) \\<tau> = true \\<tau>;\n     finite\n      \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                       (S \\<tau>)\\<rceil>\\<rceil>\\<rbrakk>\n    \\<Longrightarrow> Finite_Set.fold F A\n                       (insert (\\<lambda>\\<tau>'. a \\<tau>)\n                         ((\\<lambda>a \\<tau>. a) `\n                          \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n     (S \\<tau>)\\<rceil>\\<rceil>))\n                       \\<tau> =\n                      F (\\<lambda>\\<tau>'. a \\<tau>)\n                       (Finite_Set.fold F A\n                         ((\\<lambda>a \\<tau>. a) `\n                          \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n     (S \\<tau>)\\<rceil>\\<rceil> -\n                          {\\<lambda>\\<tau>'. a \\<tau>}))\n                       \\<tau>", "apply(subst F_cp, simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>(\\<delta> S) \\<tau> = true \\<tau> \\<and>\n             (\\<upsilon> a) \\<tau> = true \\<tau>;\n     (\\<upsilon> F a A) \\<tau> = true \\<tau>;\n     finite\n      \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                       (S \\<tau>)\\<rceil>\\<rceil>\\<rbrakk>\n    \\<Longrightarrow> Finite_Set.fold F A\n                       (insert (\\<lambda>\\<tau>'. a \\<tau>)\n                         ((\\<lambda>a \\<tau>. a) `\n                          \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n     (S \\<tau>)\\<rceil>\\<rceil>))\n                       \\<tau> =\n                      F (\\<lambda>\\<tau>'. a \\<tau>)\n                       (Finite_Set.fold F A\n                         ((\\<lambda>a \\<tau>. a) `\n                          \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n     (S \\<tau>)\\<rceil>\\<rceil> -\n                          {\\<lambda>\\<tau>'. a \\<tau>}))\n                       \\<tau>", "by(subst Finite_Set.comp_fun_commute.fold_insert_remove[OF F_commute], simp+)"], ["proof (state)\nthis:\n  OclIterate S->including\\<^sub>S\\<^sub>e\\<^sub>t(a) A F \\<tau> =\n  OclIterate S->excluding\\<^sub>S\\<^sub>e\\<^sub>t(a) (F a A) F \\<tau>\n\ngoal:\nNo subgoals!", "qed"], ["", "subsubsection\\<open>Execution Rules on Select\\<close>"], ["", "lemma OclSelect_mtSet_exec[simp,code_unfold]: \"OclSelect mtSet P = mtSet\""], ["proof (prove)\ngoal (1 subgoal):\n 1. OclSelect Set{} P = Set{}", "apply(rule ext, rename_tac \\<tau>)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<tau>. OclSelect Set{} P \\<tau> = Set{} \\<tau>", "apply(simp add: OclSelect_def mtSet_def defined_def false_def true_def\n                 bot_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e_def bot_fun_def null_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e_def null_fun_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<tau>.\n       (Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n         \\<lfloor>\\<lfloor>{}\\<rfloor>\\<rfloor> =\n        Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e None \\<longrightarrow>\n        ((\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n    (Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e None)\\<rceil>\\<rceil>.\n             P (\\<lambda>_. x) \\<tau> = invalid \\<tau>) \\<longrightarrow>\n         invalid \\<tau> =\n         Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e None) \\<and>\n        ((\\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n    (Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e None)\\<rceil>\\<rceil>.\n             P (\\<lambda>_. x) \\<tau> \\<noteq>\n             invalid \\<tau>) \\<longrightarrow>\n         invalid \\<tau> =\n         Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e None)) \\<and>\n       (Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n         \\<lfloor>\\<lfloor>{}\\<rfloor>\\<rfloor> =\n        Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n         \\<lfloor>None\\<rfloor> \\<longrightarrow>\n        ((\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n    (Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n      \\<lfloor>None\\<rfloor>)\\<rceil>\\<rceil>.\n             P (\\<lambda>_. x) \\<tau> = invalid \\<tau>) \\<longrightarrow>\n         invalid \\<tau> =\n         Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n          \\<lfloor>None\\<rfloor>) \\<and>\n        ((\\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n    (Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n      \\<lfloor>None\\<rfloor>)\\<rceil>\\<rceil>.\n             P (\\<lambda>_. x) \\<tau> \\<noteq>\n             invalid \\<tau>) \\<longrightarrow>\n         invalid \\<tau> =\n         Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n          \\<lfloor>None\\<rfloor>)) \\<and>\n       (Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n         \\<lfloor>\\<lfloor>{}\\<rfloor>\\<rfloor> \\<noteq>\n        Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e None \\<and>\n        Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n         \\<lfloor>\\<lfloor>{}\\<rfloor>\\<rfloor> \\<noteq>\n        Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n         \\<lfloor>None\\<rfloor> \\<longrightarrow>\n        ((\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n    (Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n      \\<lfloor>\\<lfloor>{}\\<rfloor>\\<rfloor>)\\<rceil>\\<rceil>.\n             P (\\<lambda>_. x) \\<tau> = invalid \\<tau>) \\<longrightarrow>\n         invalid \\<tau> =\n         Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n          \\<lfloor>\\<lfloor>{}\\<rfloor>\\<rfloor>) \\<and>\n        ((\\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n    (Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n      \\<lfloor>\\<lfloor>{}\\<rfloor>\\<rfloor>)\\<rceil>\\<rceil>.\n             P (\\<lambda>_. x) \\<tau> \\<noteq>\n             invalid \\<tau>) \\<longrightarrow>\n         Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n          \\<lfloor>\\<lfloor>{x \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                (Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                  \\<lfloor>\\<lfloor>{}\\<rfloor>\\<rfloor>)\\<rceil>\\<rceil>.\n                             P (\\<lambda>_. x) \\<tau> \\<noteq>\n                             \\<lfloor>\\<lfloor>False\\<rfloor>\\<rfloor>}\\<rfloor>\\<rfloor> =\n         Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n          \\<lfloor>\\<lfloor>{}\\<rfloor>\\<rfloor>))", "by(( subst (1 2 3 4 5) Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e_inverse\n   | subst Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e_inject), (simp add: null_option_def bot_option_def)+)+"], ["", "definition \"OclSelect_body :: _ \\<Rightarrow> _ \\<Rightarrow> _ \\<Rightarrow> ('\\<AA>, 'a option option) Set\n           \\<equiv> (\\<lambda>P x acc. if P x \\<doteq> false then acc else acc->including\\<^sub>S\\<^sub>e\\<^sub>t(x) endif)\""], ["", "theorem OclSelect_including_exec[simp,code_unfold]:\n assumes P_cp : \"cp P\"\n shows \"OclSelect (X->including\\<^sub>S\\<^sub>e\\<^sub>t(y)) P = OclSelect_body P y (OclSelect (X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y)) P)\"\n (is \"_ = ?select\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. OclSelect X->including\\<^sub>S\\<^sub>e\\<^sub>t(y) P =\n    OclSelect_body P y (OclSelect X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) P)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. OclSelect X->including\\<^sub>S\\<^sub>e\\<^sub>t(y) P =\n    OclSelect_body P y (OclSelect X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) P)", "have P_cp: \"\\<And>x \\<tau>. P x \\<tau> = P (\\<lambda>_. x \\<tau>) \\<tau>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x \\<tau>. P x \\<tau> = P (\\<lambda>_. x \\<tau>) \\<tau>", "by(insert P_cp, auto simp: cp_def)"], ["proof (state)\nthis:\n  P ?x ?\\<tau> = P (\\<lambda>_. ?x ?\\<tau>) ?\\<tau>\n\ngoal (1 subgoal):\n 1. OclSelect X->including\\<^sub>S\\<^sub>e\\<^sub>t(y) P =\n    OclSelect_body P y (OclSelect X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) P)", "have ex_including : \"\\<And>f X y \\<tau>. \\<tau> \\<Turnstile> \\<delta> X \\<Longrightarrow> \\<tau> \\<Turnstile> \\<upsilon> y \\<Longrightarrow>\n                                   (\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e (X->including\\<^sub>S\\<^sub>e\\<^sub>t(y) \\<tau>)\\<rceil>\\<rceil>. f (P (\\<lambda>_. x)) \\<tau>) =\n                                   (f (P (\\<lambda>_. y \\<tau>)) \\<tau> \\<or> (\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e (X \\<tau>)\\<rceil>\\<rceil>. f (P (\\<lambda>_. x)) \\<tau>))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>f X y \\<tau>.\n       \\<lbrakk>\\<tau> \\<Turnstile> \\<delta> X;\n        \\<tau> \\<Turnstile> \\<upsilon> y\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                    (X->including\\<^sub>S\\<^sub>e\\<^sub>t(y)\n                      \\<tau>)\\<rceil>\\<rceil>.\n                             f (P (\\<lambda>_. x)) \\<tau>) =\n                         (f (P (\\<lambda>_. y \\<tau>)) \\<tau> \\<or>\n                          (\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                     (X \\<tau>)\\<rceil>\\<rceil>.\n                              f (P (\\<lambda>_. x)) \\<tau>))", "apply(simp add: OclIncluding_def OclValid_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>f X y \\<tau>.\n       \\<lbrakk>(\\<delta> X) \\<tau> = true \\<tau>;\n        (\\<upsilon> y) \\<tau> = true \\<tau>\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                    (Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                      \\<lfloor>\\<lfloor>insert (y \\<tau>)\n   \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                    (X \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>)\\<rceil>\\<rceil>.\n                             f (P (\\<lambda>_. x)) \\<tau>) =\n                         (f (P (\\<lambda>_. y \\<tau>)) \\<tau> \\<or>\n                          (\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                     (X \\<tau>)\\<rceil>\\<rceil>.\n                              f (P (\\<lambda>_. x)) \\<tau>))", "apply(subst Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e_inverse, simp, (rule disjI2)+)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>X y \\<tau>.\n       \\<lbrakk>(\\<delta> X) \\<tau> = true \\<tau>;\n        (\\<upsilon> y) \\<tau> = true \\<tau>\\<rbrakk>\n       \\<Longrightarrow> y \\<tau> \\<noteq> \\<bottom> \\<and>\n                         (\\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                    (X \\<tau>)\\<rceil>\\<rceil>.\n                             x \\<noteq> \\<bottom>)\n 2. \\<And>f X y \\<tau>.\n       \\<lbrakk>(\\<delta> X) \\<tau> = true \\<tau>;\n        (\\<upsilon> y) \\<tau> = true \\<tau>\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>x\\<in>\\<lceil>\\<lceil>\\<lfloor>\\<lfloor>insert\n(y \\<tau>)\n\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                 (X \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>\\<rceil>\\<rceil>.\n                             f (P (\\<lambda>_. x)) \\<tau>) =\n                         (f (P (\\<lambda>_. y \\<tau>)) \\<tau> \\<or>\n                          (\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                     (X \\<tau>)\\<rceil>\\<rceil>.\n                              f (P (\\<lambda>_. x)) \\<tau>))", "by (metis (hide_lams, no_types) OclValid_def Set_inv_lemma foundation18',simp)"], ["proof (state)\nthis:\n  \\<lbrakk>?\\<tau> \\<Turnstile> \\<delta> ?X;\n   ?\\<tau> \\<Turnstile> \\<upsilon> ?y\\<rbrakk>\n  \\<Longrightarrow> (\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n               (?X->including\\<^sub>S\\<^sub>e\\<^sub>t(?y)\n                 ?\\<tau>)\\<rceil>\\<rceil>.\n                        ?f (P (\\<lambda>_. x)) ?\\<tau>) =\n                    (?f (P (\\<lambda>_. ?y ?\\<tau>)) ?\\<tau> \\<or>\n                     (\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                (?X ?\\<tau>)\\<rceil>\\<rceil>.\n                         ?f (P (\\<lambda>_. x)) ?\\<tau>))\n\ngoal (1 subgoal):\n 1. OclSelect X->including\\<^sub>S\\<^sub>e\\<^sub>t(y) P =\n    OclSelect_body P y (OclSelect X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) P)", "have al_including : \"\\<And>f X y \\<tau>. \\<tau> \\<Turnstile> \\<delta> X \\<Longrightarrow> \\<tau> \\<Turnstile> \\<upsilon> y \\<Longrightarrow>\n                                   (\\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e (X->including\\<^sub>S\\<^sub>e\\<^sub>t(y) \\<tau>)\\<rceil>\\<rceil>. f (P (\\<lambda>_. x)) \\<tau>) =\n                                   (f (P (\\<lambda>_. y \\<tau>)) \\<tau> \\<and> (\\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e (X \\<tau>)\\<rceil>\\<rceil>. f (P (\\<lambda>_. x)) \\<tau>))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>f X y \\<tau>.\n       \\<lbrakk>\\<tau> \\<Turnstile> \\<delta> X;\n        \\<tau> \\<Turnstile> \\<upsilon> y\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                    (X->including\\<^sub>S\\<^sub>e\\<^sub>t(y)\n                      \\<tau>)\\<rceil>\\<rceil>.\n                             f (P (\\<lambda>_. x)) \\<tau>) =\n                         (f (P (\\<lambda>_. y \\<tau>)) \\<tau> \\<and>\n                          (\\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                     (X \\<tau>)\\<rceil>\\<rceil>.\n                              f (P (\\<lambda>_. x)) \\<tau>))", "apply(simp add: OclIncluding_def OclValid_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>f X y \\<tau>.\n       \\<lbrakk>(\\<delta> X) \\<tau> = true \\<tau>;\n        (\\<upsilon> y) \\<tau> = true \\<tau>\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                    (Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                      \\<lfloor>\\<lfloor>insert (y \\<tau>)\n   \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                    (X \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>)\\<rceil>\\<rceil>.\n                             f (P (\\<lambda>_. x)) \\<tau>) =\n                         (f (P (\\<lambda>_. y \\<tau>)) \\<tau> \\<and>\n                          (\\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                     (X \\<tau>)\\<rceil>\\<rceil>.\n                              f (P (\\<lambda>_. x)) \\<tau>))", "apply(subst Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e_inverse, simp, (rule disjI2)+)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>X y \\<tau>.\n       \\<lbrakk>(\\<delta> X) \\<tau> = true \\<tau>;\n        (\\<upsilon> y) \\<tau> = true \\<tau>\\<rbrakk>\n       \\<Longrightarrow> y \\<tau> \\<noteq> \\<bottom> \\<and>\n                         (\\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                    (X \\<tau>)\\<rceil>\\<rceil>.\n                             x \\<noteq> \\<bottom>)\n 2. \\<And>f X y \\<tau>.\n       \\<lbrakk>(\\<delta> X) \\<tau> = true \\<tau>;\n        (\\<upsilon> y) \\<tau> = true \\<tau>\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>x\\<in>\\<lceil>\\<lceil>\\<lfloor>\\<lfloor>insert\n(y \\<tau>)\n\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                 (X \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>\\<rceil>\\<rceil>.\n                             f (P (\\<lambda>_. x)) \\<tau>) =\n                         (f (P (\\<lambda>_. y \\<tau>)) \\<tau> \\<and>\n                          (\\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                     (X \\<tau>)\\<rceil>\\<rceil>.\n                              f (P (\\<lambda>_. x)) \\<tau>))", "by (metis (hide_lams, no_types) OclValid_def Set_inv_lemma foundation18', simp)"], ["proof (state)\nthis:\n  \\<lbrakk>?\\<tau>1 \\<Turnstile> \\<delta> ?X1;\n   ?\\<tau>1 \\<Turnstile> \\<upsilon> ?y1\\<rbrakk>\n  \\<Longrightarrow> (\\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n               (?X1->including\\<^sub>S\\<^sub>e\\<^sub>t(?y1)\n                 ?\\<tau>1)\\<rceil>\\<rceil>.\n                        ?f1 (P (\\<lambda>_. x)) ?\\<tau>1) =\n                    (?f1 (P (\\<lambda>_. ?y1 ?\\<tau>1)) ?\\<tau>1 \\<and>\n                     (\\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                (?X1 ?\\<tau>1)\\<rceil>\\<rceil>.\n                         ?f1 (P (\\<lambda>_. x)) ?\\<tau>1))\n\ngoal (1 subgoal):\n 1. OclSelect X->including\\<^sub>S\\<^sub>e\\<^sub>t(y) P =\n    OclSelect_body P y (OclSelect X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) P)", "have ex_excluding1 : \"\\<And>f X y \\<tau>. \\<tau> \\<Turnstile> \\<delta> X \\<Longrightarrow> \\<tau> \\<Turnstile> \\<upsilon> y \\<Longrightarrow> \\<not> (f (P (\\<lambda>_. y \\<tau>)) \\<tau>) \\<Longrightarrow>\n                                   (\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e (X \\<tau>)\\<rceil>\\<rceil>. f (P (\\<lambda>_. x)) \\<tau>) =\n                                   (\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e (X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) \\<tau>)\\<rceil>\\<rceil>. f (P (\\<lambda>_. x)) \\<tau>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>f X y \\<tau>.\n       \\<lbrakk>\\<tau> \\<Turnstile> \\<delta> X;\n        \\<tau> \\<Turnstile> \\<upsilon> y;\n        \\<not> f (P (\\<lambda>_. y \\<tau>)) \\<tau>\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                    (X \\<tau>)\\<rceil>\\<rceil>.\n                             f (P (\\<lambda>_. x)) \\<tau>) =\n                         (\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                    (X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y)\n                      \\<tau>)\\<rceil>\\<rceil>.\n                             f (P (\\<lambda>_. x)) \\<tau>)", "apply(simp add: OclExcluding_def OclValid_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>f X y \\<tau>.\n       \\<lbrakk>(\\<delta> X) \\<tau> = true \\<tau>;\n        (\\<upsilon> y) \\<tau> = true \\<tau>;\n        \\<not> f (P (\\<lambda>_. y \\<tau>)) \\<tau>\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                    (X \\<tau>)\\<rceil>\\<rceil>.\n                             f (P (\\<lambda>_. x)) \\<tau>) =\n                         (\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                    (Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                      \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                   (X \\<tau>)\\<rceil>\\<rceil> -\n  {y \\<tau>}\\<rfloor>\\<rfloor>)\\<rceil>\\<rceil>.\n                             f (P (\\<lambda>_. x)) \\<tau>)", "apply(subst Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e_inverse, simp, (rule disjI2)+)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>f X y \\<tau>.\n       \\<lbrakk>(\\<delta> X) \\<tau> = true \\<tau>;\n        (\\<upsilon> y) \\<tau> = true \\<tau>;\n        \\<not> f (P (\\<lambda>_. y \\<tau>)) \\<tau>\\<rbrakk>\n       \\<Longrightarrow> \\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                   (X \\<tau>)\\<rceil>\\<rceil> -\n  {y \\<tau>}.\n                            x \\<noteq> \\<bottom>\n 2. \\<And>f X y \\<tau>.\n       \\<lbrakk>(\\<delta> X) \\<tau> = true \\<tau>;\n        (\\<upsilon> y) \\<tau> = true \\<tau>;\n        \\<not> f (P (\\<lambda>_. y \\<tau>)) \\<tau>\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                    (X \\<tau>)\\<rceil>\\<rceil>.\n                             f (P (\\<lambda>_. x)) \\<tau>) =\n                         (\\<exists>x\\<in>\\<lceil>\\<lceil>\\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                (X \\<tau>)\\<rceil>\\<rceil> -\n                                     {y\n \\<tau>}\\<rfloor>\\<rfloor>\\<rceil>\\<rceil>.\n                             f (P (\\<lambda>_. x)) \\<tau>)", "by (metis (no_types) Diff_iff OclValid_def Set_inv_lemma) auto"], ["proof (state)\nthis:\n  \\<lbrakk>?\\<tau>2 \\<Turnstile> \\<delta> ?X2;\n   ?\\<tau>2 \\<Turnstile> \\<upsilon> ?y2;\n   \\<not> ?f2 (P (\\<lambda>_. ?y2 ?\\<tau>2)) ?\\<tau>2\\<rbrakk>\n  \\<Longrightarrow> (\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n               (?X2 ?\\<tau>2)\\<rceil>\\<rceil>.\n                        ?f2 (P (\\<lambda>_. x)) ?\\<tau>2) =\n                    (\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n               (?X2->excluding\\<^sub>S\\<^sub>e\\<^sub>t(?y2)\n                 ?\\<tau>2)\\<rceil>\\<rceil>.\n                        ?f2 (P (\\<lambda>_. x)) ?\\<tau>2)\n\ngoal (1 subgoal):\n 1. OclSelect X->including\\<^sub>S\\<^sub>e\\<^sub>t(y) P =\n    OclSelect_body P y (OclSelect X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) P)", "have al_excluding1 : \"\\<And>f X y \\<tau>. \\<tau> \\<Turnstile> \\<delta> X \\<Longrightarrow> \\<tau> \\<Turnstile> \\<upsilon> y \\<Longrightarrow> f (P (\\<lambda>_. y \\<tau>)) \\<tau> \\<Longrightarrow>\n                                   (\\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e (X \\<tau>)\\<rceil>\\<rceil>. f (P (\\<lambda>_. x)) \\<tau>) =\n                                   (\\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e (X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) \\<tau>)\\<rceil>\\<rceil>. f (P (\\<lambda>_. x)) \\<tau>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>f X y \\<tau>.\n       \\<lbrakk>\\<tau> \\<Turnstile> \\<delta> X;\n        \\<tau> \\<Turnstile> \\<upsilon> y;\n        f (P (\\<lambda>_. y \\<tau>)) \\<tau>\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                    (X \\<tau>)\\<rceil>\\<rceil>.\n                             f (P (\\<lambda>_. x)) \\<tau>) =\n                         (\\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                    (X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y)\n                      \\<tau>)\\<rceil>\\<rceil>.\n                             f (P (\\<lambda>_. x)) \\<tau>)", "apply(simp add: OclExcluding_def OclValid_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>f X y \\<tau>.\n       \\<lbrakk>(\\<delta> X) \\<tau> = true \\<tau>;\n        (\\<upsilon> y) \\<tau> = true \\<tau>;\n        f (P (\\<lambda>_. y \\<tau>)) \\<tau>\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                    (X \\<tau>)\\<rceil>\\<rceil>.\n                             f (P (\\<lambda>_. x)) \\<tau>) =\n                         (\\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                    (Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                      \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                   (X \\<tau>)\\<rceil>\\<rceil> -\n  {y \\<tau>}\\<rfloor>\\<rfloor>)\\<rceil>\\<rceil>.\n                             f (P (\\<lambda>_. x)) \\<tau>)", "apply(subst Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e_inverse, simp, (rule disjI2)+)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>f X y \\<tau>.\n       \\<lbrakk>(\\<delta> X) \\<tau> = true \\<tau>;\n        (\\<upsilon> y) \\<tau> = true \\<tau>;\n        f (P (\\<lambda>_. y \\<tau>)) \\<tau>\\<rbrakk>\n       \\<Longrightarrow> \\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                   (X \\<tau>)\\<rceil>\\<rceil> -\n  {y \\<tau>}.\n                            x \\<noteq> \\<bottom>\n 2. \\<And>f X y \\<tau>.\n       \\<lbrakk>(\\<delta> X) \\<tau> = true \\<tau>;\n        (\\<upsilon> y) \\<tau> = true \\<tau>;\n        f (P (\\<lambda>_. y \\<tau>)) \\<tau>\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                    (X \\<tau>)\\<rceil>\\<rceil>.\n                             f (P (\\<lambda>_. x)) \\<tau>) =\n                         (\\<forall>x\\<in>\\<lceil>\\<lceil>\\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                (X \\<tau>)\\<rceil>\\<rceil> -\n                                     {y\n \\<tau>}\\<rfloor>\\<rfloor>\\<rceil>\\<rceil>.\n                             f (P (\\<lambda>_. x)) \\<tau>)", "by (metis (no_types) Diff_iff OclValid_def Set_inv_lemma) auto"], ["proof (state)\nthis:\n  \\<lbrakk>?\\<tau>3 \\<Turnstile> \\<delta> ?X3;\n   ?\\<tau>3 \\<Turnstile> \\<upsilon> ?y3;\n   ?f3 (P (\\<lambda>_. ?y3 ?\\<tau>3)) ?\\<tau>3\\<rbrakk>\n  \\<Longrightarrow> (\\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n               (?X3 ?\\<tau>3)\\<rceil>\\<rceil>.\n                        ?f3 (P (\\<lambda>_. x)) ?\\<tau>3) =\n                    (\\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n               (?X3->excluding\\<^sub>S\\<^sub>e\\<^sub>t(?y3)\n                 ?\\<tau>3)\\<rceil>\\<rceil>.\n                        ?f3 (P (\\<lambda>_. x)) ?\\<tau>3)\n\ngoal (1 subgoal):\n 1. OclSelect X->including\\<^sub>S\\<^sub>e\\<^sub>t(y) P =\n    OclSelect_body P y (OclSelect X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) P)", "have in_including : \"\\<And>f X y \\<tau>. \\<tau> \\<Turnstile> \\<delta> X \\<Longrightarrow> \\<tau> \\<Turnstile> \\<upsilon> y \\<Longrightarrow>\n                                  {x \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e (X->including\\<^sub>S\\<^sub>e\\<^sub>t(y) \\<tau>)\\<rceil>\\<rceil>. f (P (\\<lambda>_. x) \\<tau>)} =\n                                   (let s = {x \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e (X \\<tau>)\\<rceil>\\<rceil>. f (P (\\<lambda>_. x) \\<tau>)} in\n                                    if f (P (\\<lambda>_. y \\<tau>) \\<tau>) then insert (y \\<tau>) s else s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>f X y \\<tau>.\n       \\<lbrakk>\\<tau> \\<Turnstile> \\<delta> X;\n        \\<tau> \\<Turnstile> \\<upsilon> y\\<rbrakk>\n       \\<Longrightarrow> {x \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n             (X->including\\<^sub>S\\<^sub>e\\<^sub>t(y)\n               \\<tau>)\\<rceil>\\<rceil>.\n                          f (P (\\<lambda>_. x) \\<tau>)} =\n                         (let s = {x \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                      (X \\<tau>)\\<rceil>\\<rceil>.\n                                   f (P (\\<lambda>_. x) \\<tau>)}\n                          in if f (P (\\<lambda>_. y \\<tau>) \\<tau>)\n                             then insert (y \\<tau>) s else s)", "apply(simp add: OclIncluding_def OclValid_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>f X y \\<tau>.\n       \\<lbrakk>(\\<delta> X) \\<tau> = true \\<tau>;\n        (\\<upsilon> y) \\<tau> = true \\<tau>\\<rbrakk>\n       \\<Longrightarrow> {x \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n             (Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n               \\<lfloor>\\<lfloor>insert (y \\<tau>)\n                                  \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n             (X \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>)\\<rceil>\\<rceil>.\n                          f (P (\\<lambda>_. x) \\<tau>)} =\n                         (let s = {x \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                      (X \\<tau>)\\<rceil>\\<rceil>.\n                                   f (P (\\<lambda>_. x) \\<tau>)}\n                          in if f (P (\\<lambda>_. y \\<tau>) \\<tau>)\n                             then insert (y \\<tau>) s else s)", "apply(subst Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e_inverse, simp, (rule disjI2)+)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>X y \\<tau>.\n       \\<lbrakk>(\\<delta> X) \\<tau> = true \\<tau>;\n        (\\<upsilon> y) \\<tau> = true \\<tau>\\<rbrakk>\n       \\<Longrightarrow> y \\<tau> \\<noteq> \\<bottom> \\<and>\n                         (\\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                    (X \\<tau>)\\<rceil>\\<rceil>.\n                             x \\<noteq> \\<bottom>)\n 2. \\<And>f X y \\<tau>.\n       \\<lbrakk>(\\<delta> X) \\<tau> = true \\<tau>;\n        (\\<upsilon> y) \\<tau> = true \\<tau>\\<rbrakk>\n       \\<Longrightarrow> {x \\<in> \\<lceil>\\<lceil>\\<lfloor>\\<lfloor>insert\n                               (y \\<tau>)\n                               \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n          (X \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>\\<rceil>\\<rceil>.\n                          f (P (\\<lambda>_. x) \\<tau>)} =\n                         (let s = {x \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                      (X \\<tau>)\\<rceil>\\<rceil>.\n                                   f (P (\\<lambda>_. x) \\<tau>)}\n                          in if f (P (\\<lambda>_. y \\<tau>) \\<tau>)\n                             then insert (y \\<tau>) s else s)", "apply (metis (hide_lams, no_types) OclValid_def Set_inv_lemma foundation18')"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>f X y \\<tau>.\n       \\<lbrakk>(\\<delta> X) \\<tau> = true \\<tau>;\n        (\\<upsilon> y) \\<tau> = true \\<tau>\\<rbrakk>\n       \\<Longrightarrow> {x \\<in> \\<lceil>\\<lceil>\\<lfloor>\\<lfloor>insert\n                               (y \\<tau>)\n                               \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n          (X \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>\\<rceil>\\<rceil>.\n                          f (P (\\<lambda>_. x) \\<tau>)} =\n                         (let s = {x \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                      (X \\<tau>)\\<rceil>\\<rceil>.\n                                   f (P (\\<lambda>_. x) \\<tau>)}\n                          in if f (P (\\<lambda>_. y \\<tau>) \\<tau>)\n                             then insert (y \\<tau>) s else s)", "by(simp add: Let_def, auto)"], ["proof (state)\nthis:\n  \\<lbrakk>?\\<tau>4 \\<Turnstile> \\<delta> ?X4;\n   ?\\<tau>4 \\<Turnstile> \\<upsilon> ?y4\\<rbrakk>\n  \\<Longrightarrow> {x \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n        (?X4->including\\<^sub>S\\<^sub>e\\<^sub>t(?y4)\n          ?\\<tau>4)\\<rceil>\\<rceil>.\n                     ?f4 (P (\\<lambda>_. x) ?\\<tau>4)} =\n                    (let s = {x \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                 (?X4 ?\\<tau>4)\\<rceil>\\<rceil>.\n                              ?f4 (P (\\<lambda>_. x) ?\\<tau>4)}\n                     in if ?f4 (P (\\<lambda>_. ?y4 ?\\<tau>4) ?\\<tau>4)\n                        then insert (?y4 ?\\<tau>4) s else s)\n\ngoal (1 subgoal):\n 1. OclSelect X->including\\<^sub>S\\<^sub>e\\<^sub>t(y) P =\n    OclSelect_body P y (OclSelect X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) P)", "let ?OclSet = \"\\<lambda>S. \\<lfloor>\\<lfloor>S\\<rfloor>\\<rfloor> \\<in> {X. X = \\<bottom> \\<or> X = null \\<or> (\\<forall>x\\<in>\\<lceil>\\<lceil>X\\<rceil>\\<rceil>. x \\<noteq> \\<bottom>)}\""], ["proof (state)\ngoal (1 subgoal):\n 1. OclSelect X->including\\<^sub>S\\<^sub>e\\<^sub>t(y) P =\n    OclSelect_body P y (OclSelect X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) P)", "have diff_in_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e : \"\\<And>\\<tau>. (\\<delta> X) \\<tau> = true \\<tau> \\<Longrightarrow> ?OclSet (\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e (X \\<tau>)\\<rceil>\\<rceil> - {y \\<tau>})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<tau>.\n       (\\<delta> X) \\<tau> = true \\<tau> \\<Longrightarrow>\n       \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n    (X \\<tau>)\\<rceil>\\<rceil> -\n                         {y \\<tau>}\\<rfloor>\\<rfloor>\n       \\<in> {X. X = \\<bottom> \\<or>\n                 X = null \\<or>\n                 (\\<forall>x\\<in>\\<lceil>\\<lceil>X\\<rceil>\\<rceil>.\n                     x \\<noteq> \\<bottom>)}", "apply(simp, (rule disjI2)+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<tau>.\n       (\\<delta> X) \\<tau> = true \\<tau> \\<Longrightarrow>\n       \\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n (X \\<tau>)\\<rceil>\\<rceil> -\n                      {y \\<tau>}.\n          x \\<noteq> \\<bottom>", "by (metis (mono_tags) Diff_iff OclValid_def Set_inv_lemma)"], ["proof (state)\nthis:\n  (\\<delta> X) ?\\<tau>5 = true ?\\<tau>5 \\<Longrightarrow>\n  \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                     (X ?\\<tau>5)\\<rceil>\\<rceil> -\n                    {y ?\\<tau>5}\\<rfloor>\\<rfloor>\n  \\<in> {X. X = \\<bottom> \\<or>\n            X = null \\<or>\n            (\\<forall>x\\<in>\\<lceil>\\<lceil>X\\<rceil>\\<rceil>.\n                x \\<noteq> \\<bottom>)}\n\ngoal (1 subgoal):\n 1. OclSelect X->including\\<^sub>S\\<^sub>e\\<^sub>t(y) P =\n    OclSelect_body P y (OclSelect X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) P)", "have ins_in_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e : \"\\<And>\\<tau>. (\\<delta> X) \\<tau> = true \\<tau> \\<Longrightarrow> (\\<upsilon> y) \\<tau> = true \\<tau> \\<Longrightarrow>\n                           ?OclSet (insert (y \\<tau>) {x \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e (X \\<tau>)\\<rceil>\\<rceil>. P (\\<lambda>_. x) \\<tau> \\<noteq> false \\<tau>})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<tau>.\n       \\<lbrakk>(\\<delta> X) \\<tau> = true \\<tau>;\n        (\\<upsilon> y) \\<tau> = true \\<tau>\\<rbrakk>\n       \\<Longrightarrow> \\<lfloor>\\<lfloor>insert (y \\<tau>)\n      {x \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                (X \\<tau>)\\<rceil>\\<rceil>.\n       P (\\<lambda>_. x) \\<tau> \\<noteq> false \\<tau>}\\<rfloor>\\<rfloor>\n                         \\<in> {X. X = \\<bottom> \\<or>\n                                   X = null \\<or>\n                                   (\\<forall>x\n       \\<in>\\<lceil>\\<lceil>X\\<rceil>\\<rceil>.\n x \\<noteq> \\<bottom>)}", "apply(simp, (rule disjI2)+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<tau>.\n       \\<lbrakk>(\\<delta> X) \\<tau> = true \\<tau>;\n        (\\<upsilon> y) \\<tau> = true \\<tau>\\<rbrakk>\n       \\<Longrightarrow> y \\<tau> \\<noteq> \\<bottom> \\<and>\n                         (\\<forall>x.\n                             x \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                (X \\<tau>)\\<rceil>\\<rceil> \\<and>\n                             P (\\<lambda>_. x) \\<tau> \\<noteq>\n                             false \\<tau> \\<longrightarrow>\n                             x \\<noteq> \\<bottom>)", "by (metis (hide_lams, no_types) OclValid_def Set_inv_lemma foundation18')"], ["proof (state)\nthis:\n  \\<lbrakk>(\\<delta> X) ?\\<tau>5 = true ?\\<tau>5;\n   (\\<upsilon> y) ?\\<tau>5 = true ?\\<tau>5\\<rbrakk>\n  \\<Longrightarrow> \\<lfloor>\\<lfloor>insert (y ?\\<tau>5)\n {x \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                           (X ?\\<tau>5)\\<rceil>\\<rceil>.\n  P (\\<lambda>_. x) ?\\<tau>5 \\<noteq> false ?\\<tau>5}\\<rfloor>\\<rfloor>\n                    \\<in> {X. X = \\<bottom> \\<or>\n                              X = null \\<or>\n                              (\\<forall>x\n  \\<in>\\<lceil>\\<lceil>X\\<rceil>\\<rceil>.\n                                  x \\<noteq> \\<bottom>)}\n\ngoal (1 subgoal):\n 1. OclSelect X->including\\<^sub>S\\<^sub>e\\<^sub>t(y) P =\n    OclSelect_body P y (OclSelect X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) P)", "have ins_in_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e' : \"\\<And>\\<tau>. (\\<delta> X) \\<tau> = true \\<tau> \\<Longrightarrow> (\\<upsilon> y) \\<tau> = true \\<tau> \\<Longrightarrow>\n        ?OclSet (insert (y \\<tau>) {x \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e (X \\<tau>)\\<rceil>\\<rceil>. x \\<noteq> y \\<tau> \\<and> P (\\<lambda>_. x) \\<tau> \\<noteq> false \\<tau>})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<tau>.\n       \\<lbrakk>(\\<delta> X) \\<tau> = true \\<tau>;\n        (\\<upsilon> y) \\<tau> = true \\<tau>\\<rbrakk>\n       \\<Longrightarrow> \\<lfloor>\\<lfloor>insert (y \\<tau>)\n      {x \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                (X \\<tau>)\\<rceil>\\<rceil>.\n       x \\<noteq> y \\<tau> \\<and>\n       P (\\<lambda>_. x) \\<tau> \\<noteq> false \\<tau>}\\<rfloor>\\<rfloor>\n                         \\<in> {X. X = \\<bottom> \\<or>\n                                   X = null \\<or>\n                                   (\\<forall>x\n       \\<in>\\<lceil>\\<lceil>X\\<rceil>\\<rceil>.\n x \\<noteq> \\<bottom>)}", "apply(simp, (rule disjI2)+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<tau>.\n       \\<lbrakk>(\\<delta> X) \\<tau> = true \\<tau>;\n        (\\<upsilon> y) \\<tau> = true \\<tau>\\<rbrakk>\n       \\<Longrightarrow> y \\<tau> \\<noteq> \\<bottom> \\<and>\n                         (\\<forall>x.\n                             x \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                (X \\<tau>)\\<rceil>\\<rceil> \\<and>\n                             x \\<noteq> y \\<tau> \\<and>\n                             P (\\<lambda>_. x) \\<tau> \\<noteq>\n                             false \\<tau> \\<longrightarrow>\n                             x \\<noteq> \\<bottom>)", "by (metis (hide_lams, no_types) OclValid_def Set_inv_lemma foundation18')"], ["proof (state)\nthis:\n  \\<lbrakk>(\\<delta> X) ?\\<tau>5 = true ?\\<tau>5;\n   (\\<upsilon> y) ?\\<tau>5 = true ?\\<tau>5\\<rbrakk>\n  \\<Longrightarrow> \\<lfloor>\\<lfloor>insert (y ?\\<tau>5)\n {x \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                           (X ?\\<tau>5)\\<rceil>\\<rceil>.\n  x \\<noteq> y ?\\<tau>5 \\<and>\n  P (\\<lambda>_. x) ?\\<tau>5 \\<noteq> false ?\\<tau>5}\\<rfloor>\\<rfloor>\n                    \\<in> {X. X = \\<bottom> \\<or>\n                              X = null \\<or>\n                              (\\<forall>x\n  \\<in>\\<lceil>\\<lceil>X\\<rceil>\\<rceil>.\n                                  x \\<noteq> \\<bottom>)}\n\ngoal (1 subgoal):\n 1. OclSelect X->including\\<^sub>S\\<^sub>e\\<^sub>t(y) P =\n    OclSelect_body P y (OclSelect X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) P)", "have ins_in_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e'' : \"\\<And>\\<tau>. (\\<delta> X) \\<tau> = true \\<tau> \\<Longrightarrow>\n        ?OclSet {x \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e (X \\<tau>)\\<rceil>\\<rceil>. P (\\<lambda>_. x) \\<tau> \\<noteq> false \\<tau>}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<tau>.\n       (\\<delta> X) \\<tau> = true \\<tau> \\<Longrightarrow>\n       \\<lfloor>\\<lfloor>{x \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n             (X \\<tau>)\\<rceil>\\<rceil>.\n                          P (\\<lambda>_. x) \\<tau> \\<noteq>\n                          false \\<tau>}\\<rfloor>\\<rfloor>\n       \\<in> {X. X = \\<bottom> \\<or>\n                 X = null \\<or>\n                 (\\<forall>x\\<in>\\<lceil>\\<lceil>X\\<rceil>\\<rceil>.\n                     x \\<noteq> \\<bottom>)}", "apply(simp, (rule disjI2)+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<tau>.\n       (\\<delta> X) \\<tau> = true \\<tau> \\<Longrightarrow>\n       \\<forall>x.\n          x \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                   (X \\<tau>)\\<rceil>\\<rceil> \\<and>\n          P (\\<lambda>_. x) \\<tau> \\<noteq> false \\<tau> \\<longrightarrow>\n          x \\<noteq> \\<bottom>", "by (metis (hide_lams, no_types) OclValid_def Set_inv_lemma)"], ["proof (state)\nthis:\n  (\\<delta> X) ?\\<tau>5 = true ?\\<tau>5 \\<Longrightarrow>\n  \\<lfloor>\\<lfloor>{x \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n        (X ?\\<tau>5)\\<rceil>\\<rceil>.\n                     P (\\<lambda>_. x) ?\\<tau>5 \\<noteq>\n                     false ?\\<tau>5}\\<rfloor>\\<rfloor>\n  \\<in> {X. X = \\<bottom> \\<or>\n            X = null \\<or>\n            (\\<forall>x\\<in>\\<lceil>\\<lceil>X\\<rceil>\\<rceil>.\n                x \\<noteq> \\<bottom>)}\n\ngoal (1 subgoal):\n 1. OclSelect X->including\\<^sub>S\\<^sub>e\\<^sub>t(y) P =\n    OclSelect_body P y (OclSelect X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) P)", "have ins_in_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e''' : \"\\<And>\\<tau>. (\\<delta> X) \\<tau> = true \\<tau> \\<Longrightarrow>\n        ?OclSet {x \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e (X \\<tau>)\\<rceil>\\<rceil>. x \\<noteq> y \\<tau> \\<and> P (\\<lambda>_. x) \\<tau> \\<noteq> false \\<tau>}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<tau>.\n       (\\<delta> X) \\<tau> = true \\<tau> \\<Longrightarrow>\n       \\<lfloor>\\<lfloor>{x \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n             (X \\<tau>)\\<rceil>\\<rceil>.\n                          x \\<noteq> y \\<tau> \\<and>\n                          P (\\<lambda>_. x) \\<tau> \\<noteq>\n                          false \\<tau>}\\<rfloor>\\<rfloor>\n       \\<in> {X. X = \\<bottom> \\<or>\n                 X = null \\<or>\n                 (\\<forall>x\\<in>\\<lceil>\\<lceil>X\\<rceil>\\<rceil>.\n                     x \\<noteq> \\<bottom>)}", "apply(simp, (rule disjI2)+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<tau>.\n       (\\<delta> X) \\<tau> = true \\<tau> \\<Longrightarrow>\n       \\<forall>x.\n          x \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                   (X \\<tau>)\\<rceil>\\<rceil> \\<and>\n          x \\<noteq> y \\<tau> \\<and>\n          P (\\<lambda>_. x) \\<tau> \\<noteq> false \\<tau> \\<longrightarrow>\n          x \\<noteq> \\<bottom>", "by(metis (hide_lams, no_types) OclValid_def Set_inv_lemma)"], ["proof (state)\nthis:\n  (\\<delta> X) ?\\<tau>5 = true ?\\<tau>5 \\<Longrightarrow>\n  \\<lfloor>\\<lfloor>{x \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n        (X ?\\<tau>5)\\<rceil>\\<rceil>.\n                     x \\<noteq> y ?\\<tau>5 \\<and>\n                     P (\\<lambda>_. x) ?\\<tau>5 \\<noteq>\n                     false ?\\<tau>5}\\<rfloor>\\<rfloor>\n  \\<in> {X. X = \\<bottom> \\<or>\n            X = null \\<or>\n            (\\<forall>x\\<in>\\<lceil>\\<lceil>X\\<rceil>\\<rceil>.\n                x \\<noteq> \\<bottom>)}\n\ngoal (1 subgoal):\n 1. OclSelect X->including\\<^sub>S\\<^sub>e\\<^sub>t(y) P =\n    OclSelect_body P y (OclSelect X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) P)", "have if_same : \"\\<And>a b c d \\<tau>. \\<tau> \\<Turnstile> \\<delta> a \\<Longrightarrow> b \\<tau> = d \\<tau> \\<Longrightarrow> c \\<tau> = d \\<tau> \\<Longrightarrow>\n                             (if a then b else c endif) \\<tau> = d \\<tau>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b c d \\<tau>.\n       \\<lbrakk>\\<tau> \\<Turnstile> \\<delta> a; b \\<tau> = d \\<tau>;\n        c \\<tau> = d \\<tau>\\<rbrakk>\n       \\<Longrightarrow> (if a then b else c endif) \\<tau> = d \\<tau>", "by(simp add: OclIf_def OclValid_def)"], ["proof (state)\nthis:\n  \\<lbrakk>?\\<tau>5 \\<Turnstile> \\<delta> ?a5; ?b5 ?\\<tau>5 = ?d5 ?\\<tau>5;\n   ?c5 ?\\<tau>5 = ?d5 ?\\<tau>5\\<rbrakk>\n  \\<Longrightarrow> (if ?a5 then ?b5 else ?c5 endif) ?\\<tau>5 = ?d5 ?\\<tau>5\n\ngoal (1 subgoal):\n 1. OclSelect X->including\\<^sub>S\\<^sub>e\\<^sub>t(y) P =\n    OclSelect_body P y (OclSelect X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) P)", "have invert_including : \"\\<And>P y \\<tau>. P \\<tau> = \\<bottom> \\<Longrightarrow> P->including\\<^sub>S\\<^sub>e\\<^sub>t(y) \\<tau> = \\<bottom>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>P y \\<tau>.\n       P \\<tau> = \\<bottom> \\<Longrightarrow>\n       P->including\\<^sub>S\\<^sub>e\\<^sub>t(y) \\<tau> = \\<bottom>", "by (metis (hide_lams, no_types) foundation16[THEN iffD1]\n                foundation18' OclIncluding_valid_args_valid)"], ["proof (state)\nthis:\n  ?P6 ?\\<tau>6 = \\<bottom> \\<Longrightarrow>\n  ?P6->including\\<^sub>S\\<^sub>e\\<^sub>t(?y6) ?\\<tau>6 = \\<bottom>\n\ngoal (1 subgoal):\n 1. OclSelect X->including\\<^sub>S\\<^sub>e\\<^sub>t(y) P =\n    OclSelect_body P y (OclSelect X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) P)", "have exclude_defined : \"\\<And>\\<tau>. \\<tau> \\<Turnstile> \\<delta> X \\<Longrightarrow>\n           (\\<delta>(\\<lambda>_. Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e \\<lfloor>\\<lfloor>{x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e (X \\<tau>)\\<rceil>\\<rceil>. x \\<noteq> y \\<tau> \\<and> P (\\<lambda>_. x) \\<tau>\\<noteq>false \\<tau>}\\<rfloor>\\<rfloor>)) \\<tau> = true \\<tau>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<tau>.\n       \\<tau> \\<Turnstile> \\<delta> X \\<Longrightarrow>\n       (\\<delta> (\\<lambda>_.\n                     Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                      \\<lfloor>\\<lfloor>{x\n   \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                          (X \\<tau>)\\<rceil>\\<rceil>.\n   x \\<noteq> y \\<tau> \\<and>\n   P (\\<lambda>_. x) \\<tau> \\<noteq> false \\<tau>}\\<rfloor>\\<rfloor>))\n        \\<tau> =\n       true \\<tau>", "apply(subst defined_def,\n            simp add: false_def true_def bot_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e_def bot_fun_def null_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e_def null_fun_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<tau>.\n       \\<tau> \\<Turnstile> \\<delta> X \\<Longrightarrow>\n       Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n        \\<lfloor>\\<lfloor>{x \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n              (X \\<tau>)\\<rceil>\\<rceil>.\n                           x \\<noteq> y \\<tau> \\<and>\n                           P (\\<lambda>_. x) \\<tau> \\<noteq>\n                           \\<lfloor>\\<lfloor>False\\<rfloor>\\<rfloor>}\\<rfloor>\\<rfloor> \\<noteq>\n       Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e None \\<and>\n       Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n        \\<lfloor>\\<lfloor>{x \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n              (X \\<tau>)\\<rceil>\\<rceil>.\n                           x \\<noteq> y \\<tau> \\<and>\n                           P (\\<lambda>_. x) \\<tau> \\<noteq>\n                           \\<lfloor>\\<lfloor>False\\<rfloor>\\<rfloor>}\\<rfloor>\\<rfloor> \\<noteq>\n       Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e \\<lfloor>None\\<rfloor>", "by(subst Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e_inject[OF ins_in_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e'''[simplified false_def]],\n         (simp add: OclValid_def bot_option_def null_option_def)+)+"], ["proof (state)\nthis:\n  ?\\<tau>7 \\<Turnstile> \\<delta> X \\<Longrightarrow>\n  (\\<delta> (\\<lambda>_.\n                Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                 \\<lfloor>\\<lfloor>{x \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                       (X ?\\<tau>7)\\<rceil>\\<rceil>.\n                                    x \\<noteq> y ?\\<tau>7 \\<and>\n                                    P (\\<lambda>_. x) ?\\<tau>7 \\<noteq>\n                                    false ?\\<tau>7}\\<rfloor>\\<rfloor>))\n   ?\\<tau>7 =\n  true ?\\<tau>7\n\ngoal (1 subgoal):\n 1. OclSelect X->including\\<^sub>S\\<^sub>e\\<^sub>t(y) P =\n    OclSelect_body P y (OclSelect X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) P)", "have if_eq : \"\\<And>x A B \\<tau>. \\<tau> \\<Turnstile> \\<upsilon> x \\<Longrightarrow> \\<tau> \\<Turnstile> ((if x \\<doteq> false then A else B endif) \\<triangleq>\n                                          (if x \\<triangleq> false then A else B endif))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x A B \\<tau>.\n       \\<tau> \\<Turnstile> \\<upsilon> x \\<Longrightarrow>\n       \\<tau>\n        \\<Turnstile> if x \\<doteq> false then A else B endif \\<triangleq>\n                     if x \\<triangleq> false then A else B endif", "apply(simp add: StrictRefEq\\<^sub>B\\<^sub>o\\<^sub>o\\<^sub>l\\<^sub>e\\<^sub>a\\<^sub>n OclValid_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x A B \\<tau>.\n       (\\<upsilon> x) \\<tau> = true \\<tau> \\<Longrightarrow>\n       (if (\\<lambda>\\<tau>.\n               if (\\<upsilon> x) \\<tau> = true \\<tau>\n               then (x \\<triangleq> false) \\<tau>\n               else invalid \\<tau>) then A else B endif \\<triangleq>\n        if x \\<triangleq> false then A else B endif)\n        \\<tau> =\n       true \\<tau>", "apply(subst (2) StrongEq_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x A B \\<tau>.\n       (\\<upsilon> x) \\<tau> = true \\<tau> \\<Longrightarrow>\n       \\<lfloor>\\<lfloor>(if (\\<lambda>\\<tau>.\n                                 if (\\<upsilon> x) \\<tau> = true \\<tau>\n                                 then (x \\<triangleq> false) \\<tau>\n                                 else invalid \\<tau>) then A else B endif)\n                          \\<tau> =\n                         (if x \\<triangleq> false then A else B endif)\n                          \\<tau>\\<rfloor>\\<rfloor> =\n       true \\<tau>", "by(subst cp_OclIf, simp add: cp_OclIf[symmetric] true_def)"], ["proof (state)\nthis:\n  ?\\<tau>7 \\<Turnstile> \\<upsilon> ?x7 \\<Longrightarrow>\n  ?\\<tau>7\n   \\<Turnstile> if ?x7 \\<doteq> false then ?A7 else ?B7 endif \\<triangleq>\n                if ?x7 \\<triangleq> false then ?A7 else ?B7 endif\n\ngoal (1 subgoal):\n 1. OclSelect X->including\\<^sub>S\\<^sub>e\\<^sub>t(y) P =\n    OclSelect_body P y (OclSelect X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) P)", "have OclSelect_body_bot: \"\\<And>\\<tau>. \\<tau> \\<Turnstile> \\<delta> X \\<Longrightarrow> \\<tau> \\<Turnstile> \\<upsilon> y \\<Longrightarrow> P y \\<tau> \\<noteq> \\<bottom> \\<Longrightarrow>\n                               (\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e (X \\<tau>)\\<rceil>\\<rceil>. P (\\<lambda>_. x) \\<tau> = \\<bottom>) \\<Longrightarrow> \\<bottom> = ?select \\<tau>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<tau>.\n       \\<lbrakk>\\<tau> \\<Turnstile> \\<delta> X;\n        \\<tau> \\<Turnstile> \\<upsilon> y; P y \\<tau> \\<noteq> \\<bottom>;\n        \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n  (X \\<tau>)\\<rceil>\\<rceil>.\n           P (\\<lambda>_. x) \\<tau> = \\<bottom>\\<rbrakk>\n       \\<Longrightarrow> \\<bottom> =\n                         OclSelect_body P y\n                          (OclSelect X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y)\n                            P)\n                          \\<tau>", "apply(drule ex_excluding1[where X2 = X and y2 = y and f2 = \"\\<lambda>x \\<tau>. x \\<tau> = \\<bottom>\"],\n            (simp add: P_cp[symmetric])+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<tau>.\n       \\<lbrakk>\\<tau> \\<Turnstile> \\<upsilon> y;\n        P y \\<tau> \\<noteq> \\<bottom>;\n        \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n  (X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) \\<tau>)\\<rceil>\\<rceil>.\n           P (\\<lambda>_. x) \\<tau> = \\<bottom>;\n        \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n  (X \\<tau>)\\<rceil>\\<rceil>.\n           P (\\<lambda>_. x) \\<tau> = \\<bottom>\\<rbrakk>\n       \\<Longrightarrow> \\<bottom> =\n                         OclSelect_body P y\n                          (OclSelect X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y)\n                            P)\n                          \\<tau>", "apply(subgoal_tac \"\\<tau> \\<Turnstile> (\\<bottom> \\<triangleq> ?select)\", simp add: OclValid_def StrongEq_def true_def bot_fun_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<tau>.\n       \\<lbrakk>\\<tau> \\<Turnstile> \\<upsilon> y;\n        P y \\<tau> \\<noteq> \\<bottom>;\n        \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n  (X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) \\<tau>)\\<rceil>\\<rceil>.\n           P (\\<lambda>_. x) \\<tau> = \\<bottom>;\n        \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n  (X \\<tau>)\\<rceil>\\<rceil>.\n           P (\\<lambda>_. x) \\<tau> = \\<bottom>\\<rbrakk>\n       \\<Longrightarrow> \\<tau>\n                          \\<Turnstile> \\<bottom> \\<triangleq>\n OclSelect_body P y (OclSelect X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) P)", "apply(simp add: OclSelect_body_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<tau>.\n       \\<lbrakk>\\<tau> \\<Turnstile> \\<upsilon> y;\n        P y \\<tau> \\<noteq> \\<bottom>;\n        \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n  (X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) \\<tau>)\\<rceil>\\<rceil>.\n           P (\\<lambda>_. x) \\<tau> = \\<bottom>;\n        \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n  (X \\<tau>)\\<rceil>\\<rceil>.\n           P (\\<lambda>_. x) \\<tau> = \\<bottom>\\<rbrakk>\n       \\<Longrightarrow> \\<tau>\n                          \\<Turnstile> \\<bottom> \\<triangleq>\n if P y \\<doteq>\n    false then OclSelect X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y)\n                P else OclSelect X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y)\n                        P->including\\<^sub>S\\<^sub>e\\<^sub>t(y) endif", "apply(subst StrongEq_L_subst3[OF _ if_eq], simp, metis foundation18')"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<tau>.\n       \\<lbrakk>\\<tau> \\<Turnstile> \\<upsilon> y;\n        P y \\<tau> \\<noteq> \\<bottom>;\n        \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n  (X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) \\<tau>)\\<rceil>\\<rceil>.\n           P (\\<lambda>_. x) \\<tau> = \\<bottom>;\n        \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n  (X \\<tau>)\\<rceil>\\<rceil>.\n           P (\\<lambda>_. x) \\<tau> = \\<bottom>\\<rbrakk>\n       \\<Longrightarrow> \\<tau>\n                          \\<Turnstile> \\<bottom> \\<triangleq>\n if P y \\<triangleq>\n    false then OclSelect X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y)\n                P else OclSelect X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y)\n                        P->including\\<^sub>S\\<^sub>e\\<^sub>t(y) endif", "apply(simp add: OclValid_def, subst StrongEq_def, subst true_def, simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<tau>.\n       \\<lbrakk>(\\<upsilon> y) \\<tau> = true \\<tau>;\n        P y \\<tau> \\<noteq> \\<bottom>;\n        \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n  (X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) \\<tau>)\\<rceil>\\<rceil>.\n           P (\\<lambda>_. x) \\<tau> = \\<bottom>;\n        \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n  (X \\<tau>)\\<rceil>\\<rceil>.\n           P (\\<lambda>_. x) \\<tau> = \\<bottom>\\<rbrakk>\n       \\<Longrightarrow> \\<bottom> \\<tau> =\n                         (if P y \\<triangleq>\n                             false then OclSelect\n   X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y)\n   P else OclSelect X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y)\n           P->including\\<^sub>S\\<^sub>e\\<^sub>t(y) endif)\n                          \\<tau>", "apply(subgoal_tac \"\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e (X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) \\<tau>)\\<rceil>\\<rceil>. P (\\<lambda>_. x) \\<tau> = \\<bottom> \\<tau>\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>\\<tau>.\n       \\<lbrakk>(\\<upsilon> y) \\<tau> = true \\<tau>;\n        P y \\<tau> \\<noteq> \\<bottom>;\n        \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n  (X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) \\<tau>)\\<rceil>\\<rceil>.\n           P (\\<lambda>_. x) \\<tau> = \\<bottom>;\n        \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n  (X \\<tau>)\\<rceil>\\<rceil>.\n           P (\\<lambda>_. x) \\<tau> = \\<bottom>;\n        \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n  (X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) \\<tau>)\\<rceil>\\<rceil>.\n           P (\\<lambda>_. x) \\<tau> = \\<bottom> \\<tau>\\<rbrakk>\n       \\<Longrightarrow> \\<bottom> \\<tau> =\n                         (if P y \\<triangleq>\n                             false then OclSelect\n   X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y)\n   P else OclSelect X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y)\n           P->including\\<^sub>S\\<^sub>e\\<^sub>t(y) endif)\n                          \\<tau>\n 2. \\<And>\\<tau>.\n       \\<lbrakk>(\\<upsilon> y) \\<tau> = true \\<tau>;\n        P y \\<tau> \\<noteq> \\<bottom>;\n        \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n  (X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) \\<tau>)\\<rceil>\\<rceil>.\n           P (\\<lambda>_. x) \\<tau> = \\<bottom>;\n        \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n  (X \\<tau>)\\<rceil>\\<rceil>.\n           P (\\<lambda>_. x) \\<tau> = \\<bottom>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                   (X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y)\n                     \\<tau>)\\<rceil>\\<rceil>.\n                            P (\\<lambda>_. x) \\<tau> = \\<bottom> \\<tau>", "prefer 2"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>\\<tau>.\n       \\<lbrakk>(\\<upsilon> y) \\<tau> = true \\<tau>;\n        P y \\<tau> \\<noteq> \\<bottom>;\n        \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n  (X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) \\<tau>)\\<rceil>\\<rceil>.\n           P (\\<lambda>_. x) \\<tau> = \\<bottom>;\n        \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n  (X \\<tau>)\\<rceil>\\<rceil>.\n           P (\\<lambda>_. x) \\<tau> = \\<bottom>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                   (X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y)\n                     \\<tau>)\\<rceil>\\<rceil>.\n                            P (\\<lambda>_. x) \\<tau> = \\<bottom> \\<tau>\n 2. \\<And>\\<tau>.\n       \\<lbrakk>(\\<upsilon> y) \\<tau> = true \\<tau>;\n        P y \\<tau> \\<noteq> \\<bottom>;\n        \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n  (X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) \\<tau>)\\<rceil>\\<rceil>.\n           P (\\<lambda>_. x) \\<tau> = \\<bottom>;\n        \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n  (X \\<tau>)\\<rceil>\\<rceil>.\n           P (\\<lambda>_. x) \\<tau> = \\<bottom>;\n        \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n  (X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) \\<tau>)\\<rceil>\\<rceil>.\n           P (\\<lambda>_. x) \\<tau> = \\<bottom> \\<tau>\\<rbrakk>\n       \\<Longrightarrow> \\<bottom> \\<tau> =\n                         (if P y \\<triangleq>\n                             false then OclSelect\n   X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y)\n   P else OclSelect X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y)\n           P->including\\<^sub>S\\<^sub>e\\<^sub>t(y) endif)\n                          \\<tau>", "apply (metis bot_fun_def )"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<tau>.\n       \\<lbrakk>(\\<upsilon> y) \\<tau> = true \\<tau>;\n        P y \\<tau> \\<noteq> \\<bottom>;\n        \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n  (X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) \\<tau>)\\<rceil>\\<rceil>.\n           P (\\<lambda>_. x) \\<tau> = \\<bottom>;\n        \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n  (X \\<tau>)\\<rceil>\\<rceil>.\n           P (\\<lambda>_. x) \\<tau> = \\<bottom>;\n        \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n  (X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) \\<tau>)\\<rceil>\\<rceil>.\n           P (\\<lambda>_. x) \\<tau> = \\<bottom> \\<tau>\\<rbrakk>\n       \\<Longrightarrow> \\<bottom> \\<tau> =\n                         (if P y \\<triangleq>\n                             false then OclSelect\n   X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y)\n   P else OclSelect X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y)\n           P->including\\<^sub>S\\<^sub>e\\<^sub>t(y) endif)\n                          \\<tau>", "apply(subst if_same[where d5 = \"\\<bottom>\"])"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>\\<tau>.\n       \\<lbrakk>(\\<upsilon> y) \\<tau> = true \\<tau>;\n        P y \\<tau> \\<noteq> \\<bottom>;\n        \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n  (X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) \\<tau>)\\<rceil>\\<rceil>.\n           P (\\<lambda>_. x) \\<tau> = \\<bottom>;\n        \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n  (X \\<tau>)\\<rceil>\\<rceil>.\n           P (\\<lambda>_. x) \\<tau> = \\<bottom>;\n        \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n  (X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) \\<tau>)\\<rceil>\\<rceil>.\n           P (\\<lambda>_. x) \\<tau> = \\<bottom> \\<tau>\\<rbrakk>\n       \\<Longrightarrow> \\<tau>\n                          \\<Turnstile> \\<delta> (P y \\<triangleq> false)\n 2. \\<And>\\<tau>.\n       \\<lbrakk>(\\<upsilon> y) \\<tau> = true \\<tau>;\n        P y \\<tau> \\<noteq> \\<bottom>;\n        \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n  (X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) \\<tau>)\\<rceil>\\<rceil>.\n           P (\\<lambda>_. x) \\<tau> = \\<bottom>;\n        \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n  (X \\<tau>)\\<rceil>\\<rceil>.\n           P (\\<lambda>_. x) \\<tau> = \\<bottom>;\n        \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n  (X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) \\<tau>)\\<rceil>\\<rceil>.\n           P (\\<lambda>_. x) \\<tau> = \\<bottom> \\<tau>\\<rbrakk>\n       \\<Longrightarrow> OclSelect X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) P\n                          \\<tau> =\n                         \\<bottom> \\<tau>\n 3. \\<And>\\<tau>.\n       \\<lbrakk>(\\<upsilon> y) \\<tau> = true \\<tau>;\n        P y \\<tau> \\<noteq> \\<bottom>;\n        \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n  (X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) \\<tau>)\\<rceil>\\<rceil>.\n           P (\\<lambda>_. x) \\<tau> = \\<bottom>;\n        \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n  (X \\<tau>)\\<rceil>\\<rceil>.\n           P (\\<lambda>_. x) \\<tau> = \\<bottom>;\n        \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n  (X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) \\<tau>)\\<rceil>\\<rceil>.\n           P (\\<lambda>_. x) \\<tau> = \\<bottom> \\<tau>\\<rbrakk>\n       \\<Longrightarrow> OclSelect X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y)\n                          P->including\\<^sub>S\\<^sub>e\\<^sub>t(y)\n                          \\<tau> =\n                         \\<bottom> \\<tau>\n 4. \\<And>\\<tau>.\n       \\<lbrakk>(\\<upsilon> y) \\<tau> = true \\<tau>;\n        P y \\<tau> \\<noteq> \\<bottom>;\n        \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n  (X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) \\<tau>)\\<rceil>\\<rceil>.\n           P (\\<lambda>_. x) \\<tau> = \\<bottom>;\n        \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n  (X \\<tau>)\\<rceil>\\<rceil>.\n           P (\\<lambda>_. x) \\<tau> = \\<bottom>;\n        \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n  (X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) \\<tau>)\\<rceil>\\<rceil>.\n           P (\\<lambda>_. x) \\<tau> = \\<bottom> \\<tau>\\<rbrakk>\n       \\<Longrightarrow> \\<bottom> \\<tau> = \\<bottom> \\<tau>", "apply (metis defined7 transform1)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>\\<tau>.\n       \\<lbrakk>(\\<upsilon> y) \\<tau> = true \\<tau>;\n        P y \\<tau> \\<noteq> \\<bottom>;\n        \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n  (X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) \\<tau>)\\<rceil>\\<rceil>.\n           P (\\<lambda>_. x) \\<tau> = \\<bottom>;\n        \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n  (X \\<tau>)\\<rceil>\\<rceil>.\n           P (\\<lambda>_. x) \\<tau> = \\<bottom>;\n        \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n  (X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) \\<tau>)\\<rceil>\\<rceil>.\n           P (\\<lambda>_. x) \\<tau> = \\<bottom> \\<tau>\\<rbrakk>\n       \\<Longrightarrow> OclSelect X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) P\n                          \\<tau> =\n                         \\<bottom> \\<tau>\n 2. \\<And>\\<tau>.\n       \\<lbrakk>(\\<upsilon> y) \\<tau> = true \\<tau>;\n        P y \\<tau> \\<noteq> \\<bottom>;\n        \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n  (X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) \\<tau>)\\<rceil>\\<rceil>.\n           P (\\<lambda>_. x) \\<tau> = \\<bottom>;\n        \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n  (X \\<tau>)\\<rceil>\\<rceil>.\n           P (\\<lambda>_. x) \\<tau> = \\<bottom>;\n        \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n  (X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) \\<tau>)\\<rceil>\\<rceil>.\n           P (\\<lambda>_. x) \\<tau> = \\<bottom> \\<tau>\\<rbrakk>\n       \\<Longrightarrow> OclSelect X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y)\n                          P->including\\<^sub>S\\<^sub>e\\<^sub>t(y)\n                          \\<tau> =\n                         \\<bottom> \\<tau>\n 3. \\<And>\\<tau>.\n       \\<lbrakk>(\\<upsilon> y) \\<tau> = true \\<tau>;\n        P y \\<tau> \\<noteq> \\<bottom>;\n        \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n  (X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) \\<tau>)\\<rceil>\\<rceil>.\n           P (\\<lambda>_. x) \\<tau> = \\<bottom>;\n        \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n  (X \\<tau>)\\<rceil>\\<rceil>.\n           P (\\<lambda>_. x) \\<tau> = \\<bottom>;\n        \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n  (X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) \\<tau>)\\<rceil>\\<rceil>.\n           P (\\<lambda>_. x) \\<tau> = \\<bottom> \\<tau>\\<rbrakk>\n       \\<Longrightarrow> \\<bottom> \\<tau> = \\<bottom> \\<tau>", "apply(simp add: OclSelect_def bot_option_def bot_fun_def invalid_def)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>\\<tau>.\n       \\<lbrakk>(\\<upsilon> y) \\<tau> = true \\<tau>;\n        P y \\<tau> \\<noteq> \\<bottom>;\n        \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n  (X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) \\<tau>)\\<rceil>\\<rceil>.\n           P (\\<lambda>_. x) \\<tau> = \\<bottom>;\n        \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n  (X \\<tau>)\\<rceil>\\<rceil>.\n           P (\\<lambda>_. x) \\<tau> = \\<bottom>;\n        \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n  (X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) \\<tau>)\\<rceil>\\<rceil>.\n           P (\\<lambda>_. x) \\<tau> = \\<bottom> \\<tau>\\<rbrakk>\n       \\<Longrightarrow> OclSelect X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y)\n                          P->including\\<^sub>S\\<^sub>e\\<^sub>t(y)\n                          \\<tau> =\n                         \\<bottom> \\<tau>\n 2. \\<And>\\<tau>.\n       \\<lbrakk>(\\<upsilon> y) \\<tau> = true \\<tau>;\n        P y \\<tau> \\<noteq> \\<bottom>;\n        \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n  (X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) \\<tau>)\\<rceil>\\<rceil>.\n           P (\\<lambda>_. x) \\<tau> = \\<bottom>;\n        \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n  (X \\<tau>)\\<rceil>\\<rceil>.\n           P (\\<lambda>_. x) \\<tau> = \\<bottom>;\n        \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n  (X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) \\<tau>)\\<rceil>\\<rceil>.\n           P (\\<lambda>_. x) \\<tau> = \\<bottom> \\<tau>\\<rbrakk>\n       \\<Longrightarrow> \\<bottom> \\<tau> = \\<bottom> \\<tau>", "apply(subst invert_including)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>\\<tau>.\n       \\<lbrakk>(\\<upsilon> y) \\<tau> = true \\<tau>;\n        P y \\<tau> \\<noteq> \\<bottom>;\n        \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n  (X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) \\<tau>)\\<rceil>\\<rceil>.\n           P (\\<lambda>_. x) \\<tau> = \\<bottom>;\n        \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n  (X \\<tau>)\\<rceil>\\<rceil>.\n           P (\\<lambda>_. x) \\<tau> = \\<bottom>;\n        \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n  (X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) \\<tau>)\\<rceil>\\<rceil>.\n           P (\\<lambda>_. x) \\<tau> = \\<bottom> \\<tau>\\<rbrakk>\n       \\<Longrightarrow> OclSelect X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) P\n                          \\<tau> =\n                         \\<bottom>\n 2. \\<And>\\<tau>.\n       \\<lbrakk>(\\<upsilon> y) \\<tau> = true \\<tau>;\n        P y \\<tau> \\<noteq> \\<bottom>;\n        \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n  (X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) \\<tau>)\\<rceil>\\<rceil>.\n           P (\\<lambda>_. x) \\<tau> = \\<bottom>;\n        \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n  (X \\<tau>)\\<rceil>\\<rceil>.\n           P (\\<lambda>_. x) \\<tau> = \\<bottom>;\n        \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n  (X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) \\<tau>)\\<rceil>\\<rceil>.\n           P (\\<lambda>_. x) \\<tau> = \\<bottom> \\<tau>\\<rbrakk>\n       \\<Longrightarrow> \\<bottom> = \\<bottom> \\<tau>\n 3. \\<And>\\<tau>.\n       \\<lbrakk>(\\<upsilon> y) \\<tau> = true \\<tau>;\n        P y \\<tau> \\<noteq> \\<bottom>;\n        \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n  (X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) \\<tau>)\\<rceil>\\<rceil>.\n           P (\\<lambda>_. x) \\<tau> = \\<bottom>;\n        \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n  (X \\<tau>)\\<rceil>\\<rceil>.\n           P (\\<lambda>_. x) \\<tau> = \\<bottom>;\n        \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n  (X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) \\<tau>)\\<rceil>\\<rceil>.\n           P (\\<lambda>_. x) \\<tau> = \\<bottom> \\<tau>\\<rbrakk>\n       \\<Longrightarrow> \\<bottom> \\<tau> = \\<bottom> \\<tau>", "by(simp add: OclSelect_def bot_option_def bot_fun_def invalid_def)+"], ["proof (state)\nthis:\n  \\<lbrakk>?\\<tau>8 \\<Turnstile> \\<delta> X;\n   ?\\<tau>8 \\<Turnstile> \\<upsilon> y; P y ?\\<tau>8 \\<noteq> \\<bottom>;\n   \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                   (X ?\\<tau>8)\\<rceil>\\<rceil>.\n      P (\\<lambda>_. x) ?\\<tau>8 = \\<bottom>\\<rbrakk>\n  \\<Longrightarrow> \\<bottom> =\n                    OclSelect_body P y\n                     (OclSelect X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) P)\n                     ?\\<tau>8\n\ngoal (1 subgoal):\n 1. OclSelect X->including\\<^sub>S\\<^sub>e\\<^sub>t(y) P =\n    OclSelect_body P y (OclSelect X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) P)", "have d_and_v_inject : \"\\<And>\\<tau> X y. (\\<delta> X and \\<upsilon> y) \\<tau> \\<noteq> true \\<tau> \\<Longrightarrow> (\\<delta> X and \\<upsilon> y) \\<tau> = false \\<tau>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<tau> X y.\n       (\\<delta> X and \\<upsilon> y) \\<tau> \\<noteq>\n       true \\<tau> \\<Longrightarrow>\n       (\\<delta> X and \\<upsilon> y) \\<tau> = false \\<tau>", "apply(fold OclValid_def, subst foundation22[symmetric])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<tau> X y.\n       \\<tau> |\\<noteq> \\<delta> X and \\<upsilon> y \\<Longrightarrow>\n       \\<tau> \\<Turnstile> \\<delta> X and \\<upsilon> y \\<triangleq> false", "apply(auto simp:foundation10'  defined_split)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>a b X y.\n       (a, b) \\<Turnstile> X \\<triangleq> invalid \\<Longrightarrow>\n       (a, b) \\<Turnstile> \\<delta> X and \\<upsilon> y \\<triangleq> false\n 2. \\<And>a b X y.\n       (a, b) \\<Turnstile> X \\<triangleq> null \\<Longrightarrow>\n       (a, b) \\<Turnstile> \\<delta> X and \\<upsilon> y \\<triangleq> false\n 3. \\<And>a b X y.\n       (a, b) |\\<noteq> \\<upsilon> y \\<Longrightarrow>\n       (a, b) \\<Turnstile> \\<delta> X and \\<upsilon> y \\<triangleq> false", "apply(erule StrongEq_L_subst2_rev,simp,simp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a b X y.\n       (a, b) \\<Turnstile> X \\<triangleq> null \\<Longrightarrow>\n       (a, b) \\<Turnstile> \\<delta> X and \\<upsilon> y \\<triangleq> false\n 2. \\<And>a b X y.\n       (a, b) |\\<noteq> \\<upsilon> y \\<Longrightarrow>\n       (a, b) \\<Turnstile> \\<delta> X and \\<upsilon> y \\<triangleq> false", "apply(erule StrongEq_L_subst2_rev,simp,simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b X y.\n       (a, b) |\\<noteq> \\<upsilon> y \\<Longrightarrow>\n       (a, b) \\<Turnstile> \\<delta> X and \\<upsilon> y \\<triangleq> false", "by(erule foundation7'[THEN iffD2, THEN foundation15[THEN iffD2,\n                                       THEN StrongEq_L_subst2_rev]],simp,simp)"], ["proof (state)\nthis:\n  (\\<delta> ?X8 and \\<upsilon> ?y8) ?\\<tau>8 \\<noteq>\n  true ?\\<tau>8 \\<Longrightarrow>\n  (\\<delta> ?X8 and \\<upsilon> ?y8) ?\\<tau>8 = false ?\\<tau>8\n\ngoal (1 subgoal):\n 1. OclSelect X->including\\<^sub>S\\<^sub>e\\<^sub>t(y) P =\n    OclSelect_body P y (OclSelect X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) P)", "have OclSelect_body_bot': \"\\<And>\\<tau>. (\\<delta> X and \\<upsilon> y) \\<tau> \\<noteq> true \\<tau> \\<Longrightarrow> \\<bottom> = ?select \\<tau>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<tau>.\n       (\\<delta> X and \\<upsilon> y) \\<tau> \\<noteq>\n       true \\<tau> \\<Longrightarrow>\n       \\<bottom> =\n       OclSelect_body P y\n        (OclSelect X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) P) \\<tau>", "apply(drule d_and_v_inject)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<tau>.\n       (\\<delta> X and \\<upsilon> y) \\<tau> = false \\<tau> \\<Longrightarrow>\n       \\<bottom> =\n       OclSelect_body P y\n        (OclSelect X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) P) \\<tau>", "apply(simp add: OclSelect_def OclSelect_body_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<tau>.\n       (\\<delta> X and \\<upsilon> y) \\<tau> = false \\<tau> \\<Longrightarrow>\n       \\<bottom> =\n       (if P y \\<doteq>\n           false then (\\<lambda>\\<tau>.\n                          if (\\<delta> X and \\<upsilon> y) \\<tau> =\n                             true \\<tau>\n                          then if \\<exists>x\n     \\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                           (X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y)\n                             \\<tau>)\\<rceil>\\<rceil>.\n                                     P (\\<lambda>_. x) \\<tau> =\n                                     invalid \\<tau>\n                               then invalid \\<tau>\n                               else Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                     \\<lfloor>\\<lfloor>{x\n                  \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n   (X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) \\<tau>)\\<rceil>\\<rceil>.\n                  P (\\<lambda>_. x) \\<tau> \\<noteq>\n                  false \\<tau>}\\<rfloor>\\<rfloor>\n                          else invalid\n                                \\<tau>) else \\<lambda>\\<tau>.\n          if (\\<delta> X and \\<upsilon> y) \\<tau> = true \\<tau>\n          then if \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n            (X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y)\n              \\<tau>)\\<rceil>\\<rceil>.\n                     P (\\<lambda>_. x) \\<tau> = invalid \\<tau>\n               then invalid \\<tau>\n               else Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                     \\<lfloor>\\<lfloor>{x\n  \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                         (X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y)\n                           \\<tau>)\\<rceil>\\<rceil>.\n  P (\\<lambda>_. x) \\<tau> \\<noteq> false \\<tau>}\\<rfloor>\\<rfloor>\n          else invalid \\<tau>->including\\<^sub>S\\<^sub>e\\<^sub>t(y) endif)\n        \\<tau>", "apply(subst cp_OclIf, subst OclIncluding.cp0, simp add: false_def true_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<tau>.\n       (\\<delta> X and \\<upsilon> y) \\<tau> =\n       \\<lfloor>\\<lfloor>False\\<rfloor>\\<rfloor> \\<Longrightarrow>\n       \\<bottom> =\n       (if (\\<lambda>_.\n               (P y \\<doteq>\n                (\\<lambda>\\<tau>.\n                    \\<lfloor>\\<lfloor>False\\<rfloor>\\<rfloor>))\n                \\<tau>) then (\\<lambda>_.\n                                 invalid\n                                  \\<tau>) else (\\<lambda>_.\n             \\<lambda>_.\n                invalid\n                 \\<tau>->including\\<^sub>S\\<^sub>e\\<^sub>t(\\<lambda>_.\n                        y \\<tau>)\n              \\<tau>) endif)\n        \\<tau>", "apply(subst cp_OclIf[symmetric], subst OclIncluding.cp0[symmetric])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<tau>.\n       (\\<delta> X and \\<upsilon> y) \\<tau> =\n       \\<lfloor>\\<lfloor>False\\<rfloor>\\<rfloor> \\<Longrightarrow>\n       \\<bottom> =\n       (if P y \\<doteq>\n           (\\<lambda>\\<tau>.\n               \\<lfloor>\\<lfloor>False\\<rfloor>\\<rfloor>) then invalid else invalid->including\\<^sub>S\\<^sub>e\\<^sub>t(y) endif)\n        \\<tau>", "by (metis (lifting, no_types) OclIf_def foundation18 foundation18' invert_including)"], ["proof (state)\nthis:\n  (\\<delta> X and \\<upsilon> y) ?\\<tau>9 \\<noteq>\n  true ?\\<tau>9 \\<Longrightarrow>\n  \\<bottom> =\n  OclSelect_body P y (OclSelect X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) P)\n   ?\\<tau>9\n\ngoal (1 subgoal):\n 1. OclSelect X->including\\<^sub>S\\<^sub>e\\<^sub>t(y) P =\n    OclSelect_body P y (OclSelect X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) P)", "have conj_split2 : \"\\<And>a b c \\<tau>. ((a \\<triangleq> false) \\<tau> = false \\<tau> \\<longrightarrow> b) \\<and> ((a \\<triangleq> false) \\<tau> = true \\<tau> \\<longrightarrow> c) \\<Longrightarrow>\n                               (a \\<tau> \\<noteq> false \\<tau> \\<longrightarrow> b) \\<and> (a \\<tau> = false \\<tau> \\<longrightarrow> c)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b c \\<tau>.\n       ((a \\<triangleq> false) \\<tau> = false \\<tau> \\<longrightarrow>\n        b) \\<and>\n       ((a \\<triangleq> false) \\<tau> = true \\<tau> \\<longrightarrow>\n        c) \\<Longrightarrow>\n       (a \\<tau> \\<noteq> false \\<tau> \\<longrightarrow> b) \\<and>\n       (a \\<tau> = false \\<tau> \\<longrightarrow> c)", "by (metis OclValid_def defined7 foundation14 foundation22 foundation9)"], ["proof (state)\nthis:\n  ((?a9 \\<triangleq> false) ?\\<tau>9 = false ?\\<tau>9 \\<longrightarrow>\n   ?b9) \\<and>\n  ((?a9 \\<triangleq> false) ?\\<tau>9 = true ?\\<tau>9 \\<longrightarrow>\n   ?c9) \\<Longrightarrow>\n  (?a9 ?\\<tau>9 \\<noteq> false ?\\<tau>9 \\<longrightarrow> ?b9) \\<and>\n  (?a9 ?\\<tau>9 = false ?\\<tau>9 \\<longrightarrow> ?c9)\n\ngoal (1 subgoal):\n 1. OclSelect X->including\\<^sub>S\\<^sub>e\\<^sub>t(y) P =\n    OclSelect_body P y (OclSelect X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) P)", "have defined_inject_true : \"\\<And>\\<tau> P. (\\<delta> P) \\<tau> \\<noteq> true \\<tau> \\<Longrightarrow> (\\<delta> P) \\<tau> = false \\<tau>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<tau> P.\n       (\\<delta> P) \\<tau> \\<noteq> true \\<tau> \\<Longrightarrow>\n       (\\<delta> P) \\<tau> = false \\<tau>", "apply(simp add: defined_def true_def false_def bot_fun_def bot_option_def\n                      null_fun_def null_option_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<tau> P.\n       (if P \\<tau> = \\<bottom> \\<or> P \\<tau> = null then false \\<tau>\n        else true \\<tau>) \\<noteq>\n       \\<lfloor>\\<lfloor>True\\<rfloor>\\<rfloor> \\<Longrightarrow>\n       P \\<tau> = \\<bottom> \\<or> P \\<tau> = null", "by (case_tac \" P \\<tau> = \\<bottom> \\<or> P \\<tau> = null\", simp_all add: true_def)"], ["proof (state)\nthis:\n  (\\<delta> ?P10) ?\\<tau>10 \\<noteq> true ?\\<tau>10 \\<Longrightarrow>\n  (\\<delta> ?P10) ?\\<tau>10 = false ?\\<tau>10\n\ngoal (1 subgoal):\n 1. OclSelect X->including\\<^sub>S\\<^sub>e\\<^sub>t(y) P =\n    OclSelect_body P y (OclSelect X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) P)", "have cp_OclSelect_body : \"\\<And>\\<tau>. ?select \\<tau> = OclSelect_body P y (\\<lambda>_.(OclSelect (X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y))P)\\<tau>)\\<tau>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<tau>.\n       OclSelect_body P y\n        (OclSelect X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) P) \\<tau> =\n       OclSelect_body P y\n        (\\<lambda>_.\n            OclSelect X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) P \\<tau>)\n        \\<tau>", "apply(simp add: OclSelect_body_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<tau>.\n       (if P y \\<doteq>\n           false then OclSelect X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y)\n                       P else OclSelect\n                               X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y)\n                               P->including\\<^sub>S\\<^sub>e\\<^sub>t(y) endif)\n        \\<tau> =\n       (if P y \\<doteq>\n           false then (\\<lambda>_.\n                          OclSelect X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y)\n                           P \\<tau>) else \\<lambda>_.\n       OclSelect X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) P\n        \\<tau>->including\\<^sub>S\\<^sub>e\\<^sub>t(y) endif)\n        \\<tau>", "by(subst (1 2) cp_OclIf, subst (1 2) OclIncluding.cp0, blast)"], ["proof (state)\nthis:\n  OclSelect_body P y (OclSelect X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) P)\n   ?\\<tau>11 =\n  OclSelect_body P y\n   (\\<lambda>_.\n       OclSelect X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) P ?\\<tau>11)\n   ?\\<tau>11\n\ngoal (1 subgoal):\n 1. OclSelect X->including\\<^sub>S\\<^sub>e\\<^sub>t(y) P =\n    OclSelect_body P y (OclSelect X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) P)", "have OclSelect_body_strict1 : \"OclSelect_body P y invalid = invalid\""], ["proof (prove)\ngoal (1 subgoal):\n 1. OclSelect_body P y invalid = invalid", "by(rule ext, simp add: OclSelect_body_def OclIf_def)"], ["proof (state)\nthis:\n  OclSelect_body P y invalid = invalid\n\ngoal (1 subgoal):\n 1. OclSelect X->including\\<^sub>S\\<^sub>e\\<^sub>t(y) P =\n    OclSelect_body P y (OclSelect X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) P)", "have bool_invalid: \"\\<And>(x::('\\<AA>)Boolean) y \\<tau>. \\<not> (\\<tau> \\<Turnstile> \\<upsilon> x) \\<Longrightarrow> \\<tau> \\<Turnstile> ((x \\<doteq> y) \\<triangleq> invalid)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x y \\<tau>.\n       \\<tau> |\\<noteq> \\<upsilon> x \\<Longrightarrow>\n       \\<tau> \\<Turnstile> x \\<doteq> y \\<triangleq> invalid", "by(simp add: StrictRefEq\\<^sub>B\\<^sub>o\\<^sub>o\\<^sub>l\\<^sub>e\\<^sub>a\\<^sub>n OclValid_def StrongEq_def true_def)"], ["proof (state)\nthis:\n  ?\\<tau>11 |\\<noteq> \\<upsilon> ?x11 \\<Longrightarrow>\n  ?\\<tau>11 \\<Turnstile> ?x11 \\<doteq> ?y11 \\<triangleq> invalid\n\ngoal (1 subgoal):\n 1. OclSelect X->including\\<^sub>S\\<^sub>e\\<^sub>t(y) P =\n    OclSelect_body P y (OclSelect X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) P)", "have conj_comm : \"\\<And>p q r. (p \\<and> q \\<and> r) = ((p \\<and> q) \\<and> r)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>p q r. (p \\<and> q \\<and> r) = ((p \\<and> q) \\<and> r)", "by blast"], ["proof (state)\nthis:\n  (?p12 \\<and> ?q12 \\<and> ?r12) = ((?p12 \\<and> ?q12) \\<and> ?r12)\n\ngoal (1 subgoal):\n 1. OclSelect X->including\\<^sub>S\\<^sub>e\\<^sub>t(y) P =\n    OclSelect_body P y (OclSelect X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) P)", "have inv_bot : \"\\<And>\\<tau>. invalid \\<tau> = \\<bottom> \\<tau>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<tau>. invalid \\<tau> = \\<bottom> \\<tau>", "by (metis bot_fun_def invalid_def)"], ["proof (state)\nthis:\n  invalid ?\\<tau>12 = \\<bottom> ?\\<tau>12\n\ngoal (1 subgoal):\n 1. OclSelect X->including\\<^sub>S\\<^sub>e\\<^sub>t(y) P =\n    OclSelect_body P y (OclSelect X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) P)", "have inv_bot' : \"\\<And>\\<tau>. invalid \\<tau> = \\<bottom>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<tau>. invalid \\<tau> = \\<bottom>", "by (simp add: invalid_def)"], ["proof (state)\nthis:\n  invalid ?\\<tau>13 = \\<bottom>\n\ngoal (1 subgoal):\n 1. OclSelect X->including\\<^sub>S\\<^sub>e\\<^sub>t(y) P =\n    OclSelect_body P y (OclSelect X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) P)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. OclSelect X->including\\<^sub>S\\<^sub>e\\<^sub>t(y) P =\n    OclSelect_body P y (OclSelect X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) P)", "apply(rule ext, rename_tac \\<tau>)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<tau>.\n       OclSelect X->including\\<^sub>S\\<^sub>e\\<^sub>t(y) P \\<tau> =\n       OclSelect_body P y\n        (OclSelect X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) P) \\<tau>", "apply(subst OclSelect_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<tau>.\n       (if (\\<delta> X->including\\<^sub>S\\<^sub>e\\<^sub>t(y)) \\<tau> =\n           true \\<tau>\n        then if \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n          (X->including\\<^sub>S\\<^sub>e\\<^sub>t(y) \\<tau>)\\<rceil>\\<rceil>.\n                   P (\\<lambda>_. x) \\<tau> = invalid \\<tau>\n             then invalid \\<tau>\n             else Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                   \\<lfloor>\\<lfloor>{x\n\\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                       (X->including\\<^sub>S\\<^sub>e\\<^sub>t(y)\n                         \\<tau>)\\<rceil>\\<rceil>.\nP (\\<lambda>_. x) \\<tau> \\<noteq> false \\<tau>}\\<rfloor>\\<rfloor>\n        else invalid \\<tau>) =\n       OclSelect_body P y\n        (OclSelect X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) P) \\<tau>", "apply(case_tac \"(\\<delta> (X->including\\<^sub>S\\<^sub>e\\<^sub>t(y))) \\<tau> = true \\<tau>\", simp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>\\<tau>.\n       (\\<delta> X and \\<upsilon> y) \\<tau> = true \\<tau> \\<Longrightarrow>\n       ((\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n   (X->including\\<^sub>S\\<^sub>e\\<^sub>t(y) \\<tau>)\\<rceil>\\<rceil>.\n            P (\\<lambda>_. x) \\<tau> = invalid \\<tau>) \\<longrightarrow>\n        invalid \\<tau> =\n        OclSelect_body P y\n         (OclSelect X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) P)\n         \\<tau>) \\<and>\n       ((\\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n   (X->including\\<^sub>S\\<^sub>e\\<^sub>t(y) \\<tau>)\\<rceil>\\<rceil>.\n            P (\\<lambda>_. x) \\<tau> \\<noteq>\n            invalid \\<tau>) \\<longrightarrow>\n        Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n         \\<lfloor>\\<lfloor>{x \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n               (X->including\\<^sub>S\\<^sub>e\\<^sub>t(y)\n                 \\<tau>)\\<rceil>\\<rceil>.\n                            P (\\<lambda>_. x) \\<tau> \\<noteq>\n                            false \\<tau>}\\<rfloor>\\<rfloor> =\n        OclSelect_body P y\n         (OclSelect X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) P) \\<tau>)\n 2. \\<And>\\<tau>.\n       (\\<delta> X->including\\<^sub>S\\<^sub>e\\<^sub>t(y)) \\<tau> \\<noteq>\n       true \\<tau> \\<Longrightarrow>\n       (if (\\<delta> X->including\\<^sub>S\\<^sub>e\\<^sub>t(y)) \\<tau> =\n           true \\<tau>\n        then if \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n          (X->including\\<^sub>S\\<^sub>e\\<^sub>t(y) \\<tau>)\\<rceil>\\<rceil>.\n                   P (\\<lambda>_. x) \\<tau> = invalid \\<tau>\n             then invalid \\<tau>\n             else Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                   \\<lfloor>\\<lfloor>{x\n\\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                       (X->including\\<^sub>S\\<^sub>e\\<^sub>t(y)\n                         \\<tau>)\\<rceil>\\<rceil>.\nP (\\<lambda>_. x) \\<tau> \\<noteq> false \\<tau>}\\<rfloor>\\<rfloor>\n        else invalid \\<tau>) =\n       OclSelect_body P y\n        (OclSelect X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) P) \\<tau>", "apply(( subst ex_including | subst in_including),\n         metis OclValid_def foundation5,\n         metis OclValid_def foundation5)+"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>\\<tau>.\n       (\\<delta> X and \\<upsilon> y) \\<tau> = true \\<tau> \\<Longrightarrow>\n       (P (\\<lambda>_. y \\<tau>) \\<tau> = invalid \\<tau> \\<or>\n        (\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n   (X \\<tau>)\\<rceil>\\<rceil>.\n            P (\\<lambda>_. x) \\<tau> = invalid \\<tau>) \\<longrightarrow>\n        invalid \\<tau> =\n        OclSelect_body P y\n         (OclSelect X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) P)\n         \\<tau>) \\<and>\n       ((\\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n   (X->including\\<^sub>S\\<^sub>e\\<^sub>t(y) \\<tau>)\\<rceil>\\<rceil>.\n            P (\\<lambda>_. x) \\<tau> \\<noteq>\n            invalid \\<tau>) \\<longrightarrow>\n        Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n         \\<lfloor>\\<lfloor>let s = {x \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                       (X \\<tau>)\\<rceil>\\<rceil>.\n                                    P (\\<lambda>_. x) \\<tau> \\<noteq>\n                                    false \\<tau>}\n                           in if P (\\<lambda>_. y \\<tau>) \\<tau> \\<noteq>\n                                 false \\<tau>\n                              then insert (y \\<tau>) s\n                              else s\\<rfloor>\\<rfloor> =\n        OclSelect_body P y\n         (OclSelect X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) P) \\<tau>)\n 2. \\<And>\\<tau>.\n       (\\<delta> X->including\\<^sub>S\\<^sub>e\\<^sub>t(y)) \\<tau> \\<noteq>\n       true \\<tau> \\<Longrightarrow>\n       (if (\\<delta> X->including\\<^sub>S\\<^sub>e\\<^sub>t(y)) \\<tau> =\n           true \\<tau>\n        then if \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n          (X->including\\<^sub>S\\<^sub>e\\<^sub>t(y) \\<tau>)\\<rceil>\\<rceil>.\n                   P (\\<lambda>_. x) \\<tau> = invalid \\<tau>\n             then invalid \\<tau>\n             else Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                   \\<lfloor>\\<lfloor>{x\n\\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                       (X->including\\<^sub>S\\<^sub>e\\<^sub>t(y)\n                         \\<tau>)\\<rceil>\\<rceil>.\nP (\\<lambda>_. x) \\<tau> \\<noteq> false \\<tau>}\\<rfloor>\\<rfloor>\n        else invalid \\<tau>) =\n       OclSelect_body P y\n        (OclSelect X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) P) \\<tau>", "apply(simp add: Let_def inv_bot)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>\\<tau>.\n       (\\<delta> X and \\<upsilon> y) \\<tau> = true \\<tau> \\<Longrightarrow>\n       (P (\\<lambda>_. y \\<tau>) \\<tau> \\<noteq>\n        false \\<tau> \\<longrightarrow>\n        (P (\\<lambda>_. y \\<tau>) \\<tau> =\n         \\<bottom> \\<tau> \\<longrightarrow>\n         \\<bottom> \\<tau> =\n         OclSelect_body P y\n          (OclSelect X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) P)\n          \\<tau>) \\<and>\n        ((\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n    (X \\<tau>)\\<rceil>\\<rceil>.\n             P (\\<lambda>_. x) \\<tau> = \\<bottom> \\<tau>) \\<longrightarrow>\n         \\<bottom> \\<tau> =\n         OclSelect_body P y\n          (OclSelect X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) P)\n          \\<tau>) \\<and>\n        ((\\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n    (X->including\\<^sub>S\\<^sub>e\\<^sub>t(y) \\<tau>)\\<rceil>\\<rceil>.\n             P (\\<lambda>_. x) \\<tau> \\<noteq>\n             \\<bottom> \\<tau>) \\<longrightarrow>\n         Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n          \\<lfloor>\\<lfloor>insert (y \\<tau>)\n                             {x \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                 (X \\<tau>)\\<rceil>\\<rceil>.\n                              P (\\<lambda>_. x) \\<tau> \\<noteq>\n                              false \\<tau>}\\<rfloor>\\<rfloor> =\n         OclSelect_body P y\n          (OclSelect X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) P)\n          \\<tau>)) \\<and>\n       (P (\\<lambda>_. y \\<tau>) \\<tau> = false \\<tau> \\<longrightarrow>\n        (false \\<tau> = \\<bottom> \\<tau> \\<longrightarrow>\n         \\<bottom> \\<tau> =\n         OclSelect_body P y\n          (OclSelect X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) P)\n          \\<tau>) \\<and>\n        ((\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n    (X \\<tau>)\\<rceil>\\<rceil>.\n             P (\\<lambda>_. x) \\<tau> = \\<bottom> \\<tau>) \\<longrightarrow>\n         \\<bottom> \\<tau> =\n         OclSelect_body P y\n          (OclSelect X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) P)\n          \\<tau>) \\<and>\n        ((\\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n    (X->including\\<^sub>S\\<^sub>e\\<^sub>t(y) \\<tau>)\\<rceil>\\<rceil>.\n             P (\\<lambda>_. x) \\<tau> \\<noteq>\n             \\<bottom> \\<tau>) \\<longrightarrow>\n         Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n          \\<lfloor>\\<lfloor>{x \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                (X \\<tau>)\\<rceil>\\<rceil>.\n                             P (\\<lambda>_. x) \\<tau> \\<noteq>\n                             false \\<tau>}\\<rfloor>\\<rfloor> =\n         OclSelect_body P y\n          (OclSelect X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) P) \\<tau>))\n 2. \\<And>\\<tau>.\n       (\\<delta> X->including\\<^sub>S\\<^sub>e\\<^sub>t(y)) \\<tau> \\<noteq>\n       true \\<tau> \\<Longrightarrow>\n       (if (\\<delta> X->including\\<^sub>S\\<^sub>e\\<^sub>t(y)) \\<tau> =\n           true \\<tau>\n        then if \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n          (X->including\\<^sub>S\\<^sub>e\\<^sub>t(y) \\<tau>)\\<rceil>\\<rceil>.\n                   P (\\<lambda>_. x) \\<tau> = invalid \\<tau>\n             then invalid \\<tau>\n             else Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                   \\<lfloor>\\<lfloor>{x\n\\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                       (X->including\\<^sub>S\\<^sub>e\\<^sub>t(y)\n                         \\<tau>)\\<rceil>\\<rceil>.\nP (\\<lambda>_. x) \\<tau> \\<noteq> false \\<tau>}\\<rfloor>\\<rfloor>\n        else invalid \\<tau>) =\n       OclSelect_body P y\n        (OclSelect X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) P) \\<tau>", "apply(subst (2 4 7 9) bot_fun_def)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>\\<tau>.\n       (\\<delta> X and \\<upsilon> y) \\<tau> = true \\<tau> \\<Longrightarrow>\n       (P (\\<lambda>_. y \\<tau>) \\<tau> \\<noteq>\n        false \\<tau> \\<longrightarrow>\n        (P (\\<lambda>_. y \\<tau>) \\<tau> =\n         \\<bottom> \\<tau> \\<longrightarrow>\n         \\<bottom> =\n         OclSelect_body P y\n          (OclSelect X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) P)\n          \\<tau>) \\<and>\n        ((\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n    (X \\<tau>)\\<rceil>\\<rceil>.\n             P (\\<lambda>_. x) \\<tau> = \\<bottom> \\<tau>) \\<longrightarrow>\n         \\<bottom> =\n         OclSelect_body P y\n          (OclSelect X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) P)\n          \\<tau>) \\<and>\n        ((\\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n    (X->including\\<^sub>S\\<^sub>e\\<^sub>t(y) \\<tau>)\\<rceil>\\<rceil>.\n             P (\\<lambda>_. x) \\<tau> \\<noteq>\n             \\<bottom> \\<tau>) \\<longrightarrow>\n         Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n          \\<lfloor>\\<lfloor>insert (y \\<tau>)\n                             {x \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                 (X \\<tau>)\\<rceil>\\<rceil>.\n                              P (\\<lambda>_. x) \\<tau> \\<noteq>\n                              false \\<tau>}\\<rfloor>\\<rfloor> =\n         OclSelect_body P y\n          (OclSelect X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) P)\n          \\<tau>)) \\<and>\n       (P (\\<lambda>_. y \\<tau>) \\<tau> = false \\<tau> \\<longrightarrow>\n        (false \\<tau> = \\<bottom> \\<tau> \\<longrightarrow>\n         \\<bottom> =\n         OclSelect_body P y\n          (OclSelect X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) P)\n          \\<tau>) \\<and>\n        ((\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n    (X \\<tau>)\\<rceil>\\<rceil>.\n             P (\\<lambda>_. x) \\<tau> = \\<bottom> \\<tau>) \\<longrightarrow>\n         \\<bottom> =\n         OclSelect_body P y\n          (OclSelect X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) P)\n          \\<tau>) \\<and>\n        ((\\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n    (X->including\\<^sub>S\\<^sub>e\\<^sub>t(y) \\<tau>)\\<rceil>\\<rceil>.\n             P (\\<lambda>_. x) \\<tau> \\<noteq>\n             \\<bottom> \\<tau>) \\<longrightarrow>\n         Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n          \\<lfloor>\\<lfloor>{x \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                (X \\<tau>)\\<rceil>\\<rceil>.\n                             P (\\<lambda>_. x) \\<tau> \\<noteq>\n                             false \\<tau>}\\<rfloor>\\<rfloor> =\n         OclSelect_body P y\n          (OclSelect X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) P) \\<tau>))\n 2. \\<And>\\<tau>.\n       (\\<delta> X->including\\<^sub>S\\<^sub>e\\<^sub>t(y)) \\<tau> \\<noteq>\n       true \\<tau> \\<Longrightarrow>\n       (if (\\<delta> X->including\\<^sub>S\\<^sub>e\\<^sub>t(y)) \\<tau> =\n           true \\<tau>\n        then if \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n          (X->including\\<^sub>S\\<^sub>e\\<^sub>t(y) \\<tau>)\\<rceil>\\<rceil>.\n                   P (\\<lambda>_. x) \\<tau> = invalid \\<tau>\n             then invalid \\<tau>\n             else Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                   \\<lfloor>\\<lfloor>{x\n\\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                       (X->including\\<^sub>S\\<^sub>e\\<^sub>t(y)\n                         \\<tau>)\\<rceil>\\<rceil>.\nP (\\<lambda>_. x) \\<tau> \\<noteq> false \\<tau>}\\<rfloor>\\<rfloor>\n        else invalid \\<tau>) =\n       OclSelect_body P y\n        (OclSelect X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) P) \\<tau>", "apply(subst (4) false_def, subst (4) bot_fun_def, simp add: bot_option_def P_cp[symmetric])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>\\<tau>.\n       (\\<delta> X and \\<upsilon> y) \\<tau> = true \\<tau> \\<Longrightarrow>\n       (P y \\<tau> \\<noteq> false \\<tau> \\<longrightarrow>\n        (P y \\<tau> = \\<bottom> \\<tau> \\<longrightarrow>\n         \\<bottom> =\n         OclSelect_body P y\n          (OclSelect X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) P)\n          \\<tau>) \\<and>\n        ((\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n    (X \\<tau>)\\<rceil>\\<rceil>.\n             P (\\<lambda>_. x) \\<tau> = \\<bottom> \\<tau>) \\<longrightarrow>\n         \\<bottom> =\n         OclSelect_body P y\n          (OclSelect X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) P)\n          \\<tau>) \\<and>\n        ((\\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n    (X->including\\<^sub>S\\<^sub>e\\<^sub>t(y) \\<tau>)\\<rceil>\\<rceil>.\n             P (\\<lambda>_. x) \\<tau> \\<noteq>\n             \\<bottom> \\<tau>) \\<longrightarrow>\n         Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n          \\<lfloor>\\<lfloor>insert (y \\<tau>)\n                             {x \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                 (X \\<tau>)\\<rceil>\\<rceil>.\n                              P (\\<lambda>_. x) \\<tau> \\<noteq>\n                              false \\<tau>}\\<rfloor>\\<rfloor> =\n         OclSelect_body P y\n          (OclSelect X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) P)\n          \\<tau>)) \\<and>\n       (P y \\<tau> = false \\<tau> \\<longrightarrow>\n        ((\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n    (X \\<tau>)\\<rceil>\\<rceil>.\n             P (\\<lambda>_. x) \\<tau> = \\<bottom> \\<tau>) \\<longrightarrow>\n         \\<bottom> =\n         OclSelect_body P y\n          (OclSelect X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) P)\n          \\<tau>) \\<and>\n        ((\\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n    (X->including\\<^sub>S\\<^sub>e\\<^sub>t(y) \\<tau>)\\<rceil>\\<rceil>.\n             P (\\<lambda>_. x) \\<tau> \\<noteq>\n             \\<bottom> \\<tau>) \\<longrightarrow>\n         Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n          \\<lfloor>\\<lfloor>{x \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                (X \\<tau>)\\<rceil>\\<rceil>.\n                             P (\\<lambda>_. x) \\<tau> \\<noteq>\n                             false \\<tau>}\\<rfloor>\\<rfloor> =\n         OclSelect_body P y\n          (OclSelect X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) P) \\<tau>))\n 2. \\<And>\\<tau>.\n       (\\<delta> X->including\\<^sub>S\\<^sub>e\\<^sub>t(y)) \\<tau> \\<noteq>\n       true \\<tau> \\<Longrightarrow>\n       (if (\\<delta> X->including\\<^sub>S\\<^sub>e\\<^sub>t(y)) \\<tau> =\n           true \\<tau>\n        then if \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n          (X->including\\<^sub>S\\<^sub>e\\<^sub>t(y) \\<tau>)\\<rceil>\\<rceil>.\n                   P (\\<lambda>_. x) \\<tau> = invalid \\<tau>\n             then invalid \\<tau>\n             else Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                   \\<lfloor>\\<lfloor>{x\n\\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                       (X->including\\<^sub>S\\<^sub>e\\<^sub>t(y)\n                         \\<tau>)\\<rceil>\\<rceil>.\nP (\\<lambda>_. x) \\<tau> \\<noteq> false \\<tau>}\\<rfloor>\\<rfloor>\n        else invalid \\<tau>) =\n       OclSelect_body P y\n        (OclSelect X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) P) \\<tau>", "(* *)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>\\<tau>.\n       (\\<delta> X and \\<upsilon> y) \\<tau> = true \\<tau> \\<Longrightarrow>\n       (P y \\<tau> \\<noteq> false \\<tau> \\<longrightarrow>\n        (P y \\<tau> = \\<bottom> \\<tau> \\<longrightarrow>\n         \\<bottom> =\n         OclSelect_body P y\n          (OclSelect X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) P)\n          \\<tau>) \\<and>\n        ((\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n    (X \\<tau>)\\<rceil>\\<rceil>.\n             P (\\<lambda>_. x) \\<tau> = \\<bottom> \\<tau>) \\<longrightarrow>\n         \\<bottom> =\n         OclSelect_body P y\n          (OclSelect X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) P)\n          \\<tau>) \\<and>\n        ((\\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n    (X->including\\<^sub>S\\<^sub>e\\<^sub>t(y) \\<tau>)\\<rceil>\\<rceil>.\n             P (\\<lambda>_. x) \\<tau> \\<noteq>\n             \\<bottom> \\<tau>) \\<longrightarrow>\n         Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n          \\<lfloor>\\<lfloor>insert (y \\<tau>)\n                             {x \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                 (X \\<tau>)\\<rceil>\\<rceil>.\n                              P (\\<lambda>_. x) \\<tau> \\<noteq>\n                              false \\<tau>}\\<rfloor>\\<rfloor> =\n         OclSelect_body P y\n          (OclSelect X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) P)\n          \\<tau>)) \\<and>\n       (P y \\<tau> = false \\<tau> \\<longrightarrow>\n        ((\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n    (X \\<tau>)\\<rceil>\\<rceil>.\n             P (\\<lambda>_. x) \\<tau> = \\<bottom> \\<tau>) \\<longrightarrow>\n         \\<bottom> =\n         OclSelect_body P y\n          (OclSelect X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) P)\n          \\<tau>) \\<and>\n        ((\\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n    (X->including\\<^sub>S\\<^sub>e\\<^sub>t(y) \\<tau>)\\<rceil>\\<rceil>.\n             P (\\<lambda>_. x) \\<tau> \\<noteq>\n             \\<bottom> \\<tau>) \\<longrightarrow>\n         Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n          \\<lfloor>\\<lfloor>{x \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                (X \\<tau>)\\<rceil>\\<rceil>.\n                             P (\\<lambda>_. x) \\<tau> \\<noteq>\n                             false \\<tau>}\\<rfloor>\\<rfloor> =\n         OclSelect_body P y\n          (OclSelect X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) P) \\<tau>))\n 2. \\<And>\\<tau>.\n       (\\<delta> X->including\\<^sub>S\\<^sub>e\\<^sub>t(y)) \\<tau> \\<noteq>\n       true \\<tau> \\<Longrightarrow>\n       (if (\\<delta> X->including\\<^sub>S\\<^sub>e\\<^sub>t(y)) \\<tau> =\n           true \\<tau>\n        then if \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n          (X->including\\<^sub>S\\<^sub>e\\<^sub>t(y) \\<tau>)\\<rceil>\\<rceil>.\n                   P (\\<lambda>_. x) \\<tau> = invalid \\<tau>\n             then invalid \\<tau>\n             else Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                   \\<lfloor>\\<lfloor>{x\n\\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                       (X->including\\<^sub>S\\<^sub>e\\<^sub>t(y)\n                         \\<tau>)\\<rceil>\\<rceil>.\nP (\\<lambda>_. x) \\<tau> \\<noteq> false \\<tau>}\\<rfloor>\\<rfloor>\n        else invalid \\<tau>) =\n       OclSelect_body P y\n        (OclSelect X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) P) \\<tau>", "apply(case_tac \"\\<not> (\\<tau> \\<Turnstile> (\\<upsilon> P y))\")"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>\\<tau>.\n       \\<lbrakk>(\\<delta> X and \\<upsilon> y) \\<tau> = true \\<tau>;\n        \\<tau> |\\<noteq> \\<upsilon> P y\\<rbrakk>\n       \\<Longrightarrow> (P y \\<tau> \\<noteq> false \\<tau> \\<longrightarrow>\n                          (P y \\<tau> = \\<bottom> \\<tau> \\<longrightarrow>\n                           \\<bottom> =\n                           OclSelect_body P y\n                            (OclSelect\n                              X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) P)\n                            \\<tau>) \\<and>\n                          ((\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                      (X \\<tau>)\\<rceil>\\<rceil>.\n                               P (\\<lambda>_. x) \\<tau> =\n                               \\<bottom> \\<tau>) \\<longrightarrow>\n                           \\<bottom> =\n                           OclSelect_body P y\n                            (OclSelect\n                              X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) P)\n                            \\<tau>) \\<and>\n                          ((\\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                      (X->including\\<^sub>S\\<^sub>e\\<^sub>t(y)\n                        \\<tau>)\\<rceil>\\<rceil>.\n                               P (\\<lambda>_. x) \\<tau> \\<noteq>\n                               \\<bottom> \\<tau>) \\<longrightarrow>\n                           Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                            \\<lfloor>\\<lfloor>insert (y \\<tau>)\n         {x \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                   (X \\<tau>)\\<rceil>\\<rceil>.\n          P (\\<lambda>_. x) \\<tau> \\<noteq>\n          false \\<tau>}\\<rfloor>\\<rfloor> =\n                           OclSelect_body P y\n                            (OclSelect\n                              X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) P)\n                            \\<tau>)) \\<and>\n                         (P y \\<tau> = false \\<tau> \\<longrightarrow>\n                          ((\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                      (X \\<tau>)\\<rceil>\\<rceil>.\n                               P (\\<lambda>_. x) \\<tau> =\n                               \\<bottom> \\<tau>) \\<longrightarrow>\n                           \\<bottom> =\n                           OclSelect_body P y\n                            (OclSelect\n                              X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) P)\n                            \\<tau>) \\<and>\n                          ((\\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                      (X->including\\<^sub>S\\<^sub>e\\<^sub>t(y)\n                        \\<tau>)\\<rceil>\\<rceil>.\n                               P (\\<lambda>_. x) \\<tau> \\<noteq>\n                               \\<bottom> \\<tau>) \\<longrightarrow>\n                           Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                            \\<lfloor>\\<lfloor>{x\n         \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                (X \\<tau>)\\<rceil>\\<rceil>.\n         P (\\<lambda>_. x) \\<tau> \\<noteq> false \\<tau>}\\<rfloor>\\<rfloor> =\n                           OclSelect_body P y\n                            (OclSelect\n                              X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) P)\n                            \\<tau>))\n 2. \\<And>\\<tau>.\n       \\<lbrakk>(\\<delta> X and \\<upsilon> y) \\<tau> = true \\<tau>;\n        \\<not> \\<tau> |\\<noteq> \\<upsilon> P y\\<rbrakk>\n       \\<Longrightarrow> (P y \\<tau> \\<noteq> false \\<tau> \\<longrightarrow>\n                          (P y \\<tau> = \\<bottom> \\<tau> \\<longrightarrow>\n                           \\<bottom> =\n                           OclSelect_body P y\n                            (OclSelect\n                              X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) P)\n                            \\<tau>) \\<and>\n                          ((\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                      (X \\<tau>)\\<rceil>\\<rceil>.\n                               P (\\<lambda>_. x) \\<tau> =\n                               \\<bottom> \\<tau>) \\<longrightarrow>\n                           \\<bottom> =\n                           OclSelect_body P y\n                            (OclSelect\n                              X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) P)\n                            \\<tau>) \\<and>\n                          ((\\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                      (X->including\\<^sub>S\\<^sub>e\\<^sub>t(y)\n                        \\<tau>)\\<rceil>\\<rceil>.\n                               P (\\<lambda>_. x) \\<tau> \\<noteq>\n                               \\<bottom> \\<tau>) \\<longrightarrow>\n                           Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                            \\<lfloor>\\<lfloor>insert (y \\<tau>)\n         {x \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                   (X \\<tau>)\\<rceil>\\<rceil>.\n          P (\\<lambda>_. x) \\<tau> \\<noteq>\n          false \\<tau>}\\<rfloor>\\<rfloor> =\n                           OclSelect_body P y\n                            (OclSelect\n                              X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) P)\n                            \\<tau>)) \\<and>\n                         (P y \\<tau> = false \\<tau> \\<longrightarrow>\n                          ((\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                      (X \\<tau>)\\<rceil>\\<rceil>.\n                               P (\\<lambda>_. x) \\<tau> =\n                               \\<bottom> \\<tau>) \\<longrightarrow>\n                           \\<bottom> =\n                           OclSelect_body P y\n                            (OclSelect\n                              X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) P)\n                            \\<tau>) \\<and>\n                          ((\\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                      (X->including\\<^sub>S\\<^sub>e\\<^sub>t(y)\n                        \\<tau>)\\<rceil>\\<rceil>.\n                               P (\\<lambda>_. x) \\<tau> \\<noteq>\n                               \\<bottom> \\<tau>) \\<longrightarrow>\n                           Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                            \\<lfloor>\\<lfloor>{x\n         \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                (X \\<tau>)\\<rceil>\\<rceil>.\n         P (\\<lambda>_. x) \\<tau> \\<noteq> false \\<tau>}\\<rfloor>\\<rfloor> =\n                           OclSelect_body P y\n                            (OclSelect\n                              X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) P)\n                            \\<tau>))\n 3. \\<And>\\<tau>.\n       (\\<delta> X->including\\<^sub>S\\<^sub>e\\<^sub>t(y)) \\<tau> \\<noteq>\n       true \\<tau> \\<Longrightarrow>\n       (if (\\<delta> X->including\\<^sub>S\\<^sub>e\\<^sub>t(y)) \\<tau> =\n           true \\<tau>\n        then if \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n          (X->including\\<^sub>S\\<^sub>e\\<^sub>t(y) \\<tau>)\\<rceil>\\<rceil>.\n                   P (\\<lambda>_. x) \\<tau> = invalid \\<tau>\n             then invalid \\<tau>\n             else Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                   \\<lfloor>\\<lfloor>{x\n\\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                       (X->including\\<^sub>S\\<^sub>e\\<^sub>t(y)\n                         \\<tau>)\\<rceil>\\<rceil>.\nP (\\<lambda>_. x) \\<tau> \\<noteq> false \\<tau>}\\<rfloor>\\<rfloor>\n        else invalid \\<tau>) =\n       OclSelect_body P y\n        (OclSelect X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) P) \\<tau>", "apply(subgoal_tac \"P y \\<tau> \\<noteq> false \\<tau>\")"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>\\<tau>.\n       \\<lbrakk>(\\<delta> X and \\<upsilon> y) \\<tau> = true \\<tau>;\n        \\<tau> |\\<noteq> \\<upsilon> P y;\n        P y \\<tau> \\<noteq> false \\<tau>\\<rbrakk>\n       \\<Longrightarrow> (P y \\<tau> \\<noteq> false \\<tau> \\<longrightarrow>\n                          (P y \\<tau> = \\<bottom> \\<tau> \\<longrightarrow>\n                           \\<bottom> =\n                           OclSelect_body P y\n                            (OclSelect\n                              X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) P)\n                            \\<tau>) \\<and>\n                          ((\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                      (X \\<tau>)\\<rceil>\\<rceil>.\n                               P (\\<lambda>_. x) \\<tau> =\n                               \\<bottom> \\<tau>) \\<longrightarrow>\n                           \\<bottom> =\n                           OclSelect_body P y\n                            (OclSelect\n                              X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) P)\n                            \\<tau>) \\<and>\n                          ((\\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                      (X->including\\<^sub>S\\<^sub>e\\<^sub>t(y)\n                        \\<tau>)\\<rceil>\\<rceil>.\n                               P (\\<lambda>_. x) \\<tau> \\<noteq>\n                               \\<bottom> \\<tau>) \\<longrightarrow>\n                           Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                            \\<lfloor>\\<lfloor>insert (y \\<tau>)\n         {x \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                   (X \\<tau>)\\<rceil>\\<rceil>.\n          P (\\<lambda>_. x) \\<tau> \\<noteq>\n          false \\<tau>}\\<rfloor>\\<rfloor> =\n                           OclSelect_body P y\n                            (OclSelect\n                              X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) P)\n                            \\<tau>)) \\<and>\n                         (P y \\<tau> = false \\<tau> \\<longrightarrow>\n                          ((\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                      (X \\<tau>)\\<rceil>\\<rceil>.\n                               P (\\<lambda>_. x) \\<tau> =\n                               \\<bottom> \\<tau>) \\<longrightarrow>\n                           \\<bottom> =\n                           OclSelect_body P y\n                            (OclSelect\n                              X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) P)\n                            \\<tau>) \\<and>\n                          ((\\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                      (X->including\\<^sub>S\\<^sub>e\\<^sub>t(y)\n                        \\<tau>)\\<rceil>\\<rceil>.\n                               P (\\<lambda>_. x) \\<tau> \\<noteq>\n                               \\<bottom> \\<tau>) \\<longrightarrow>\n                           Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                            \\<lfloor>\\<lfloor>{x\n         \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                (X \\<tau>)\\<rceil>\\<rceil>.\n         P (\\<lambda>_. x) \\<tau> \\<noteq> false \\<tau>}\\<rfloor>\\<rfloor> =\n                           OclSelect_body P y\n                            (OclSelect\n                              X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) P)\n                            \\<tau>))\n 2. \\<And>\\<tau>.\n       \\<lbrakk>(\\<delta> X and \\<upsilon> y) \\<tau> = true \\<tau>;\n        \\<tau> |\\<noteq> \\<upsilon> P y\\<rbrakk>\n       \\<Longrightarrow> P y \\<tau> \\<noteq> false \\<tau>\n 3. \\<And>\\<tau>.\n       \\<lbrakk>(\\<delta> X and \\<upsilon> y) \\<tau> = true \\<tau>;\n        \\<not> \\<tau> |\\<noteq> \\<upsilon> P y\\<rbrakk>\n       \\<Longrightarrow> (P y \\<tau> \\<noteq> false \\<tau> \\<longrightarrow>\n                          (P y \\<tau> = \\<bottom> \\<tau> \\<longrightarrow>\n                           \\<bottom> =\n                           OclSelect_body P y\n                            (OclSelect\n                              X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) P)\n                            \\<tau>) \\<and>\n                          ((\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                      (X \\<tau>)\\<rceil>\\<rceil>.\n                               P (\\<lambda>_. x) \\<tau> =\n                               \\<bottom> \\<tau>) \\<longrightarrow>\n                           \\<bottom> =\n                           OclSelect_body P y\n                            (OclSelect\n                              X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) P)\n                            \\<tau>) \\<and>\n                          ((\\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                      (X->including\\<^sub>S\\<^sub>e\\<^sub>t(y)\n                        \\<tau>)\\<rceil>\\<rceil>.\n                               P (\\<lambda>_. x) \\<tau> \\<noteq>\n                               \\<bottom> \\<tau>) \\<longrightarrow>\n                           Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                            \\<lfloor>\\<lfloor>insert (y \\<tau>)\n         {x \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                   (X \\<tau>)\\<rceil>\\<rceil>.\n          P (\\<lambda>_. x) \\<tau> \\<noteq>\n          false \\<tau>}\\<rfloor>\\<rfloor> =\n                           OclSelect_body P y\n                            (OclSelect\n                              X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) P)\n                            \\<tau>)) \\<and>\n                         (P y \\<tau> = false \\<tau> \\<longrightarrow>\n                          ((\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                      (X \\<tau>)\\<rceil>\\<rceil>.\n                               P (\\<lambda>_. x) \\<tau> =\n                               \\<bottom> \\<tau>) \\<longrightarrow>\n                           \\<bottom> =\n                           OclSelect_body P y\n                            (OclSelect\n                              X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) P)\n                            \\<tau>) \\<and>\n                          ((\\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                      (X->including\\<^sub>S\\<^sub>e\\<^sub>t(y)\n                        \\<tau>)\\<rceil>\\<rceil>.\n                               P (\\<lambda>_. x) \\<tau> \\<noteq>\n                               \\<bottom> \\<tau>) \\<longrightarrow>\n                           Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                            \\<lfloor>\\<lfloor>{x\n         \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                (X \\<tau>)\\<rceil>\\<rceil>.\n         P (\\<lambda>_. x) \\<tau> \\<noteq> false \\<tau>}\\<rfloor>\\<rfloor> =\n                           OclSelect_body P y\n                            (OclSelect\n                              X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) P)\n                            \\<tau>))\n 4. \\<And>\\<tau>.\n       (\\<delta> X->including\\<^sub>S\\<^sub>e\\<^sub>t(y)) \\<tau> \\<noteq>\n       true \\<tau> \\<Longrightarrow>\n       (if (\\<delta> X->including\\<^sub>S\\<^sub>e\\<^sub>t(y)) \\<tau> =\n           true \\<tau>\n        then if \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n          (X->including\\<^sub>S\\<^sub>e\\<^sub>t(y) \\<tau>)\\<rceil>\\<rceil>.\n                   P (\\<lambda>_. x) \\<tau> = invalid \\<tau>\n             then invalid \\<tau>\n             else Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                   \\<lfloor>\\<lfloor>{x\n\\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                       (X->including\\<^sub>S\\<^sub>e\\<^sub>t(y)\n                         \\<tau>)\\<rceil>\\<rceil>.\nP (\\<lambda>_. x) \\<tau> \\<noteq> false \\<tau>}\\<rfloor>\\<rfloor>\n        else invalid \\<tau>) =\n       OclSelect_body P y\n        (OclSelect X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) P) \\<tau>", "prefer 2"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>\\<tau>.\n       \\<lbrakk>(\\<delta> X and \\<upsilon> y) \\<tau> = true \\<tau>;\n        \\<tau> |\\<noteq> \\<upsilon> P y\\<rbrakk>\n       \\<Longrightarrow> P y \\<tau> \\<noteq> false \\<tau>\n 2. \\<And>\\<tau>.\n       \\<lbrakk>(\\<delta> X and \\<upsilon> y) \\<tau> = true \\<tau>;\n        \\<tau> |\\<noteq> \\<upsilon> P y;\n        P y \\<tau> \\<noteq> false \\<tau>\\<rbrakk>\n       \\<Longrightarrow> (P y \\<tau> \\<noteq> false \\<tau> \\<longrightarrow>\n                          (P y \\<tau> = \\<bottom> \\<tau> \\<longrightarrow>\n                           \\<bottom> =\n                           OclSelect_body P y\n                            (OclSelect\n                              X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) P)\n                            \\<tau>) \\<and>\n                          ((\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                      (X \\<tau>)\\<rceil>\\<rceil>.\n                               P (\\<lambda>_. x) \\<tau> =\n                               \\<bottom> \\<tau>) \\<longrightarrow>\n                           \\<bottom> =\n                           OclSelect_body P y\n                            (OclSelect\n                              X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) P)\n                            \\<tau>) \\<and>\n                          ((\\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                      (X->including\\<^sub>S\\<^sub>e\\<^sub>t(y)\n                        \\<tau>)\\<rceil>\\<rceil>.\n                               P (\\<lambda>_. x) \\<tau> \\<noteq>\n                               \\<bottom> \\<tau>) \\<longrightarrow>\n                           Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                            \\<lfloor>\\<lfloor>insert (y \\<tau>)\n         {x \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                   (X \\<tau>)\\<rceil>\\<rceil>.\n          P (\\<lambda>_. x) \\<tau> \\<noteq>\n          false \\<tau>}\\<rfloor>\\<rfloor> =\n                           OclSelect_body P y\n                            (OclSelect\n                              X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) P)\n                            \\<tau>)) \\<and>\n                         (P y \\<tau> = false \\<tau> \\<longrightarrow>\n                          ((\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                      (X \\<tau>)\\<rceil>\\<rceil>.\n                               P (\\<lambda>_. x) \\<tau> =\n                               \\<bottom> \\<tau>) \\<longrightarrow>\n                           \\<bottom> =\n                           OclSelect_body P y\n                            (OclSelect\n                              X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) P)\n                            \\<tau>) \\<and>\n                          ((\\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                      (X->including\\<^sub>S\\<^sub>e\\<^sub>t(y)\n                        \\<tau>)\\<rceil>\\<rceil>.\n                               P (\\<lambda>_. x) \\<tau> \\<noteq>\n                               \\<bottom> \\<tau>) \\<longrightarrow>\n                           Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                            \\<lfloor>\\<lfloor>{x\n         \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                (X \\<tau>)\\<rceil>\\<rceil>.\n         P (\\<lambda>_. x) \\<tau> \\<noteq> false \\<tau>}\\<rfloor>\\<rfloor> =\n                           OclSelect_body P y\n                            (OclSelect\n                              X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) P)\n                            \\<tau>))\n 3. \\<And>\\<tau>.\n       \\<lbrakk>(\\<delta> X and \\<upsilon> y) \\<tau> = true \\<tau>;\n        \\<not> \\<tau> |\\<noteq> \\<upsilon> P y\\<rbrakk>\n       \\<Longrightarrow> (P y \\<tau> \\<noteq> false \\<tau> \\<longrightarrow>\n                          (P y \\<tau> = \\<bottom> \\<tau> \\<longrightarrow>\n                           \\<bottom> =\n                           OclSelect_body P y\n                            (OclSelect\n                              X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) P)\n                            \\<tau>) \\<and>\n                          ((\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                      (X \\<tau>)\\<rceil>\\<rceil>.\n                               P (\\<lambda>_. x) \\<tau> =\n                               \\<bottom> \\<tau>) \\<longrightarrow>\n                           \\<bottom> =\n                           OclSelect_body P y\n                            (OclSelect\n                              X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) P)\n                            \\<tau>) \\<and>\n                          ((\\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                      (X->including\\<^sub>S\\<^sub>e\\<^sub>t(y)\n                        \\<tau>)\\<rceil>\\<rceil>.\n                               P (\\<lambda>_. x) \\<tau> \\<noteq>\n                               \\<bottom> \\<tau>) \\<longrightarrow>\n                           Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                            \\<lfloor>\\<lfloor>insert (y \\<tau>)\n         {x \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                   (X \\<tau>)\\<rceil>\\<rceil>.\n          P (\\<lambda>_. x) \\<tau> \\<noteq>\n          false \\<tau>}\\<rfloor>\\<rfloor> =\n                           OclSelect_body P y\n                            (OclSelect\n                              X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) P)\n                            \\<tau>)) \\<and>\n                         (P y \\<tau> = false \\<tau> \\<longrightarrow>\n                          ((\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                      (X \\<tau>)\\<rceil>\\<rceil>.\n                               P (\\<lambda>_. x) \\<tau> =\n                               \\<bottom> \\<tau>) \\<longrightarrow>\n                           \\<bottom> =\n                           OclSelect_body P y\n                            (OclSelect\n                              X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) P)\n                            \\<tau>) \\<and>\n                          ((\\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                      (X->including\\<^sub>S\\<^sub>e\\<^sub>t(y)\n                        \\<tau>)\\<rceil>\\<rceil>.\n                               P (\\<lambda>_. x) \\<tau> \\<noteq>\n                               \\<bottom> \\<tau>) \\<longrightarrow>\n                           Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                            \\<lfloor>\\<lfloor>{x\n         \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                (X \\<tau>)\\<rceil>\\<rceil>.\n         P (\\<lambda>_. x) \\<tau> \\<noteq> false \\<tau>}\\<rfloor>\\<rfloor> =\n                           OclSelect_body P y\n                            (OclSelect\n                              X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) P)\n                            \\<tau>))\n 4. \\<And>\\<tau>.\n       (\\<delta> X->including\\<^sub>S\\<^sub>e\\<^sub>t(y)) \\<tau> \\<noteq>\n       true \\<tau> \\<Longrightarrow>\n       (if (\\<delta> X->including\\<^sub>S\\<^sub>e\\<^sub>t(y)) \\<tau> =\n           true \\<tau>\n        then if \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n          (X->including\\<^sub>S\\<^sub>e\\<^sub>t(y) \\<tau>)\\<rceil>\\<rceil>.\n                   P (\\<lambda>_. x) \\<tau> = invalid \\<tau>\n             then invalid \\<tau>\n             else Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                   \\<lfloor>\\<lfloor>{x\n\\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                       (X->including\\<^sub>S\\<^sub>e\\<^sub>t(y)\n                         \\<tau>)\\<rceil>\\<rceil>.\nP (\\<lambda>_. x) \\<tau> \\<noteq> false \\<tau>}\\<rfloor>\\<rfloor>\n        else invalid \\<tau>) =\n       OclSelect_body P y\n        (OclSelect X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) P) \\<tau>", "apply (metis (hide_lams, no_types) foundation1 foundation18' valid4)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>\\<tau>.\n       \\<lbrakk>(\\<delta> X and \\<upsilon> y) \\<tau> = true \\<tau>;\n        \\<tau> |\\<noteq> \\<upsilon> P y;\n        P y \\<tau> \\<noteq> false \\<tau>\\<rbrakk>\n       \\<Longrightarrow> (P y \\<tau> \\<noteq> false \\<tau> \\<longrightarrow>\n                          (P y \\<tau> = \\<bottom> \\<tau> \\<longrightarrow>\n                           \\<bottom> =\n                           OclSelect_body P y\n                            (OclSelect\n                              X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) P)\n                            \\<tau>) \\<and>\n                          ((\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                      (X \\<tau>)\\<rceil>\\<rceil>.\n                               P (\\<lambda>_. x) \\<tau> =\n                               \\<bottom> \\<tau>) \\<longrightarrow>\n                           \\<bottom> =\n                           OclSelect_body P y\n                            (OclSelect\n                              X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) P)\n                            \\<tau>) \\<and>\n                          ((\\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                      (X->including\\<^sub>S\\<^sub>e\\<^sub>t(y)\n                        \\<tau>)\\<rceil>\\<rceil>.\n                               P (\\<lambda>_. x) \\<tau> \\<noteq>\n                               \\<bottom> \\<tau>) \\<longrightarrow>\n                           Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                            \\<lfloor>\\<lfloor>insert (y \\<tau>)\n         {x \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                   (X \\<tau>)\\<rceil>\\<rceil>.\n          P (\\<lambda>_. x) \\<tau> \\<noteq>\n          false \\<tau>}\\<rfloor>\\<rfloor> =\n                           OclSelect_body P y\n                            (OclSelect\n                              X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) P)\n                            \\<tau>)) \\<and>\n                         (P y \\<tau> = false \\<tau> \\<longrightarrow>\n                          ((\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                      (X \\<tau>)\\<rceil>\\<rceil>.\n                               P (\\<lambda>_. x) \\<tau> =\n                               \\<bottom> \\<tau>) \\<longrightarrow>\n                           \\<bottom> =\n                           OclSelect_body P y\n                            (OclSelect\n                              X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) P)\n                            \\<tau>) \\<and>\n                          ((\\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                      (X->including\\<^sub>S\\<^sub>e\\<^sub>t(y)\n                        \\<tau>)\\<rceil>\\<rceil>.\n                               P (\\<lambda>_. x) \\<tau> \\<noteq>\n                               \\<bottom> \\<tau>) \\<longrightarrow>\n                           Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                            \\<lfloor>\\<lfloor>{x\n         \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                (X \\<tau>)\\<rceil>\\<rceil>.\n         P (\\<lambda>_. x) \\<tau> \\<noteq> false \\<tau>}\\<rfloor>\\<rfloor> =\n                           OclSelect_body P y\n                            (OclSelect\n                              X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) P)\n                            \\<tau>))\n 2. \\<And>\\<tau>.\n       \\<lbrakk>(\\<delta> X and \\<upsilon> y) \\<tau> = true \\<tau>;\n        \\<not> \\<tau> |\\<noteq> \\<upsilon> P y\\<rbrakk>\n       \\<Longrightarrow> (P y \\<tau> \\<noteq> false \\<tau> \\<longrightarrow>\n                          (P y \\<tau> = \\<bottom> \\<tau> \\<longrightarrow>\n                           \\<bottom> =\n                           OclSelect_body P y\n                            (OclSelect\n                              X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) P)\n                            \\<tau>) \\<and>\n                          ((\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                      (X \\<tau>)\\<rceil>\\<rceil>.\n                               P (\\<lambda>_. x) \\<tau> =\n                               \\<bottom> \\<tau>) \\<longrightarrow>\n                           \\<bottom> =\n                           OclSelect_body P y\n                            (OclSelect\n                              X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) P)\n                            \\<tau>) \\<and>\n                          ((\\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                      (X->including\\<^sub>S\\<^sub>e\\<^sub>t(y)\n                        \\<tau>)\\<rceil>\\<rceil>.\n                               P (\\<lambda>_. x) \\<tau> \\<noteq>\n                               \\<bottom> \\<tau>) \\<longrightarrow>\n                           Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                            \\<lfloor>\\<lfloor>insert (y \\<tau>)\n         {x \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                   (X \\<tau>)\\<rceil>\\<rceil>.\n          P (\\<lambda>_. x) \\<tau> \\<noteq>\n          false \\<tau>}\\<rfloor>\\<rfloor> =\n                           OclSelect_body P y\n                            (OclSelect\n                              X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) P)\n                            \\<tau>)) \\<and>\n                         (P y \\<tau> = false \\<tau> \\<longrightarrow>\n                          ((\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                      (X \\<tau>)\\<rceil>\\<rceil>.\n                               P (\\<lambda>_. x) \\<tau> =\n                               \\<bottom> \\<tau>) \\<longrightarrow>\n                           \\<bottom> =\n                           OclSelect_body P y\n                            (OclSelect\n                              X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) P)\n                            \\<tau>) \\<and>\n                          ((\\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                      (X->including\\<^sub>S\\<^sub>e\\<^sub>t(y)\n                        \\<tau>)\\<rceil>\\<rceil>.\n                               P (\\<lambda>_. x) \\<tau> \\<noteq>\n                               \\<bottom> \\<tau>) \\<longrightarrow>\n                           Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                            \\<lfloor>\\<lfloor>{x\n         \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                (X \\<tau>)\\<rceil>\\<rceil>.\n         P (\\<lambda>_. x) \\<tau> \\<noteq> false \\<tau>}\\<rfloor>\\<rfloor> =\n                           OclSelect_body P y\n                            (OclSelect\n                              X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) P)\n                            \\<tau>))\n 3. \\<And>\\<tau>.\n       (\\<delta> X->including\\<^sub>S\\<^sub>e\\<^sub>t(y)) \\<tau> \\<noteq>\n       true \\<tau> \\<Longrightarrow>\n       (if (\\<delta> X->including\\<^sub>S\\<^sub>e\\<^sub>t(y)) \\<tau> =\n           true \\<tau>\n        then if \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n          (X->including\\<^sub>S\\<^sub>e\\<^sub>t(y) \\<tau>)\\<rceil>\\<rceil>.\n                   P (\\<lambda>_. x) \\<tau> = invalid \\<tau>\n             then invalid \\<tau>\n             else Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                   \\<lfloor>\\<lfloor>{x\n\\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                       (X->including\\<^sub>S\\<^sub>e\\<^sub>t(y)\n                         \\<tau>)\\<rceil>\\<rceil>.\nP (\\<lambda>_. x) \\<tau> \\<noteq> false \\<tau>}\\<rfloor>\\<rfloor>\n        else invalid \\<tau>) =\n       OclSelect_body P y\n        (OclSelect X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) P) \\<tau>", "apply(simp)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>\\<tau>.\n       \\<lbrakk>(\\<delta> X and \\<upsilon> y) \\<tau> = true \\<tau>;\n        \\<tau> |\\<noteq> \\<upsilon> P y;\n        P y \\<tau> \\<noteq> false \\<tau>\\<rbrakk>\n       \\<Longrightarrow> (P y \\<tau> = \\<bottom> \\<tau> \\<longrightarrow>\n                          \\<bottom> =\n                          OclSelect_body P y\n                           (OclSelect\n                             X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) P)\n                           \\<tau>) \\<and>\n                         ((\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                     (X \\<tau>)\\<rceil>\\<rceil>.\n                              P (\\<lambda>_. x) \\<tau> =\n                              \\<bottom> \\<tau>) \\<longrightarrow>\n                          \\<bottom> =\n                          OclSelect_body P y\n                           (OclSelect\n                             X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) P)\n                           \\<tau>) \\<and>\n                         ((\\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                     (X->including\\<^sub>S\\<^sub>e\\<^sub>t(y)\n                       \\<tau>)\\<rceil>\\<rceil>.\n                              P (\\<lambda>_. x) \\<tau> \\<noteq>\n                              \\<bottom> \\<tau>) \\<longrightarrow>\n                          Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                           \\<lfloor>\\<lfloor>insert (y \\<tau>)\n        {x \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                  (X \\<tau>)\\<rceil>\\<rceil>.\n         P (\\<lambda>_. x) \\<tau> \\<noteq> false \\<tau>}\\<rfloor>\\<rfloor> =\n                          OclSelect_body P y\n                           (OclSelect\n                             X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) P)\n                           \\<tau>)\n 2. \\<And>\\<tau>.\n       \\<lbrakk>(\\<delta> X and \\<upsilon> y) \\<tau> = true \\<tau>;\n        \\<not> \\<tau> |\\<noteq> \\<upsilon> P y\\<rbrakk>\n       \\<Longrightarrow> (P y \\<tau> \\<noteq> false \\<tau> \\<longrightarrow>\n                          (P y \\<tau> = \\<bottom> \\<tau> \\<longrightarrow>\n                           \\<bottom> =\n                           OclSelect_body P y\n                            (OclSelect\n                              X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) P)\n                            \\<tau>) \\<and>\n                          ((\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                      (X \\<tau>)\\<rceil>\\<rceil>.\n                               P (\\<lambda>_. x) \\<tau> =\n                               \\<bottom> \\<tau>) \\<longrightarrow>\n                           \\<bottom> =\n                           OclSelect_body P y\n                            (OclSelect\n                              X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) P)\n                            \\<tau>) \\<and>\n                          ((\\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                      (X->including\\<^sub>S\\<^sub>e\\<^sub>t(y)\n                        \\<tau>)\\<rceil>\\<rceil>.\n                               P (\\<lambda>_. x) \\<tau> \\<noteq>\n                               \\<bottom> \\<tau>) \\<longrightarrow>\n                           Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                            \\<lfloor>\\<lfloor>insert (y \\<tau>)\n         {x \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                   (X \\<tau>)\\<rceil>\\<rceil>.\n          P (\\<lambda>_. x) \\<tau> \\<noteq>\n          false \\<tau>}\\<rfloor>\\<rfloor> =\n                           OclSelect_body P y\n                            (OclSelect\n                              X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) P)\n                            \\<tau>)) \\<and>\n                         (P y \\<tau> = false \\<tau> \\<longrightarrow>\n                          ((\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                      (X \\<tau>)\\<rceil>\\<rceil>.\n                               P (\\<lambda>_. x) \\<tau> =\n                               \\<bottom> \\<tau>) \\<longrightarrow>\n                           \\<bottom> =\n                           OclSelect_body P y\n                            (OclSelect\n                              X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) P)\n                            \\<tau>) \\<and>\n                          ((\\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                      (X->including\\<^sub>S\\<^sub>e\\<^sub>t(y)\n                        \\<tau>)\\<rceil>\\<rceil>.\n                               P (\\<lambda>_. x) \\<tau> \\<noteq>\n                               \\<bottom> \\<tau>) \\<longrightarrow>\n                           Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                            \\<lfloor>\\<lfloor>{x\n         \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                (X \\<tau>)\\<rceil>\\<rceil>.\n         P (\\<lambda>_. x) \\<tau> \\<noteq> false \\<tau>}\\<rfloor>\\<rfloor> =\n                           OclSelect_body P y\n                            (OclSelect\n                              X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) P)\n                            \\<tau>))\n 3. \\<And>\\<tau>.\n       (\\<delta> X->including\\<^sub>S\\<^sub>e\\<^sub>t(y)) \\<tau> \\<noteq>\n       true \\<tau> \\<Longrightarrow>\n       (if (\\<delta> X->including\\<^sub>S\\<^sub>e\\<^sub>t(y)) \\<tau> =\n           true \\<tau>\n        then if \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n          (X->including\\<^sub>S\\<^sub>e\\<^sub>t(y) \\<tau>)\\<rceil>\\<rceil>.\n                   P (\\<lambda>_. x) \\<tau> = invalid \\<tau>\n             then invalid \\<tau>\n             else Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                   \\<lfloor>\\<lfloor>{x\n\\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                       (X->including\\<^sub>S\\<^sub>e\\<^sub>t(y)\n                         \\<tau>)\\<rceil>\\<rceil>.\nP (\\<lambda>_. x) \\<tau> \\<noteq> false \\<tau>}\\<rfloor>\\<rfloor>\n        else invalid \\<tau>) =\n       OclSelect_body P y\n        (OclSelect X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) P) \\<tau>", "(* *)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>\\<tau>.\n       \\<lbrakk>(\\<delta> X and \\<upsilon> y) \\<tau> = true \\<tau>;\n        \\<tau> |\\<noteq> \\<upsilon> P y;\n        P y \\<tau> \\<noteq> false \\<tau>\\<rbrakk>\n       \\<Longrightarrow> (P y \\<tau> = \\<bottom> \\<tau> \\<longrightarrow>\n                          \\<bottom> =\n                          OclSelect_body P y\n                           (OclSelect\n                             X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) P)\n                           \\<tau>) \\<and>\n                         ((\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                     (X \\<tau>)\\<rceil>\\<rceil>.\n                              P (\\<lambda>_. x) \\<tau> =\n                              \\<bottom> \\<tau>) \\<longrightarrow>\n                          \\<bottom> =\n                          OclSelect_body P y\n                           (OclSelect\n                             X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) P)\n                           \\<tau>) \\<and>\n                         ((\\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                     (X->including\\<^sub>S\\<^sub>e\\<^sub>t(y)\n                       \\<tau>)\\<rceil>\\<rceil>.\n                              P (\\<lambda>_. x) \\<tau> \\<noteq>\n                              \\<bottom> \\<tau>) \\<longrightarrow>\n                          Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                           \\<lfloor>\\<lfloor>insert (y \\<tau>)\n        {x \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                  (X \\<tau>)\\<rceil>\\<rceil>.\n         P (\\<lambda>_. x) \\<tau> \\<noteq> false \\<tau>}\\<rfloor>\\<rfloor> =\n                          OclSelect_body P y\n                           (OclSelect\n                             X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) P)\n                           \\<tau>)\n 2. \\<And>\\<tau>.\n       \\<lbrakk>(\\<delta> X and \\<upsilon> y) \\<tau> = true \\<tau>;\n        \\<not> \\<tau> |\\<noteq> \\<upsilon> P y\\<rbrakk>\n       \\<Longrightarrow> (P y \\<tau> \\<noteq> false \\<tau> \\<longrightarrow>\n                          (P y \\<tau> = \\<bottom> \\<tau> \\<longrightarrow>\n                           \\<bottom> =\n                           OclSelect_body P y\n                            (OclSelect\n                              X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) P)\n                            \\<tau>) \\<and>\n                          ((\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                      (X \\<tau>)\\<rceil>\\<rceil>.\n                               P (\\<lambda>_. x) \\<tau> =\n                               \\<bottom> \\<tau>) \\<longrightarrow>\n                           \\<bottom> =\n                           OclSelect_body P y\n                            (OclSelect\n                              X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) P)\n                            \\<tau>) \\<and>\n                          ((\\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                      (X->including\\<^sub>S\\<^sub>e\\<^sub>t(y)\n                        \\<tau>)\\<rceil>\\<rceil>.\n                               P (\\<lambda>_. x) \\<tau> \\<noteq>\n                               \\<bottom> \\<tau>) \\<longrightarrow>\n                           Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                            \\<lfloor>\\<lfloor>insert (y \\<tau>)\n         {x \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                   (X \\<tau>)\\<rceil>\\<rceil>.\n          P (\\<lambda>_. x) \\<tau> \\<noteq>\n          false \\<tau>}\\<rfloor>\\<rfloor> =\n                           OclSelect_body P y\n                            (OclSelect\n                              X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) P)\n                            \\<tau>)) \\<and>\n                         (P y \\<tau> = false \\<tau> \\<longrightarrow>\n                          ((\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                      (X \\<tau>)\\<rceil>\\<rceil>.\n                               P (\\<lambda>_. x) \\<tau> =\n                               \\<bottom> \\<tau>) \\<longrightarrow>\n                           \\<bottom> =\n                           OclSelect_body P y\n                            (OclSelect\n                              X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) P)\n                            \\<tau>) \\<and>\n                          ((\\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                      (X->including\\<^sub>S\\<^sub>e\\<^sub>t(y)\n                        \\<tau>)\\<rceil>\\<rceil>.\n                               P (\\<lambda>_. x) \\<tau> \\<noteq>\n                               \\<bottom> \\<tau>) \\<longrightarrow>\n                           Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                            \\<lfloor>\\<lfloor>{x\n         \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                (X \\<tau>)\\<rceil>\\<rceil>.\n         P (\\<lambda>_. x) \\<tau> \\<noteq> false \\<tau>}\\<rfloor>\\<rfloor> =\n                           OclSelect_body P y\n                            (OclSelect\n                              X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) P)\n                            \\<tau>))\n 3. \\<And>\\<tau>.\n       (\\<delta> X->including\\<^sub>S\\<^sub>e\\<^sub>t(y)) \\<tau> \\<noteq>\n       true \\<tau> \\<Longrightarrow>\n       (if (\\<delta> X->including\\<^sub>S\\<^sub>e\\<^sub>t(y)) \\<tau> =\n           true \\<tau>\n        then if \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n          (X->including\\<^sub>S\\<^sub>e\\<^sub>t(y) \\<tau>)\\<rceil>\\<rceil>.\n                   P (\\<lambda>_. x) \\<tau> = invalid \\<tau>\n             then invalid \\<tau>\n             else Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                   \\<lfloor>\\<lfloor>{x\n\\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                       (X->including\\<^sub>S\\<^sub>e\\<^sub>t(y)\n                         \\<tau>)\\<rceil>\\<rceil>.\nP (\\<lambda>_. x) \\<tau> \\<noteq> false \\<tau>}\\<rfloor>\\<rfloor>\n        else invalid \\<tau>) =\n       OclSelect_body P y\n        (OclSelect X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) P) \\<tau>", "apply(subst conj_comm, rule conjI)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>\\<tau>.\n       \\<lbrakk>(\\<delta> X and \\<upsilon> y) \\<tau> = true \\<tau>;\n        \\<tau> |\\<noteq> \\<upsilon> P y;\n        P y \\<tau> \\<noteq> false \\<tau>\\<rbrakk>\n       \\<Longrightarrow> (P y \\<tau> = \\<bottom> \\<tau> \\<longrightarrow>\n                          \\<bottom> =\n                          OclSelect_body P y\n                           (OclSelect\n                             X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) P)\n                           \\<tau>) \\<and>\n                         ((\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                     (X \\<tau>)\\<rceil>\\<rceil>.\n                              P (\\<lambda>_. x) \\<tau> =\n                              \\<bottom> \\<tau>) \\<longrightarrow>\n                          \\<bottom> =\n                          OclSelect_body P y\n                           (OclSelect\n                             X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) P)\n                           \\<tau>)\n 2. \\<And>\\<tau>.\n       \\<lbrakk>(\\<delta> X and \\<upsilon> y) \\<tau> = true \\<tau>;\n        \\<tau> |\\<noteq> \\<upsilon> P y;\n        P y \\<tau> \\<noteq> false \\<tau>\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                    (X->including\\<^sub>S\\<^sub>e\\<^sub>t(y)\n                      \\<tau>)\\<rceil>\\<rceil>.\n                             P (\\<lambda>_. x) \\<tau> \\<noteq>\n                             \\<bottom> \\<tau>) \\<longrightarrow>\n                         Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                          \\<lfloor>\\<lfloor>insert (y \\<tau>)\n       {x \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                 (X \\<tau>)\\<rceil>\\<rceil>.\n        P (\\<lambda>_. x) \\<tau> \\<noteq> false \\<tau>}\\<rfloor>\\<rfloor> =\n                         OclSelect_body P y\n                          (OclSelect X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y)\n                            P)\n                          \\<tau>\n 3. \\<And>\\<tau>.\n       \\<lbrakk>(\\<delta> X and \\<upsilon> y) \\<tau> = true \\<tau>;\n        \\<not> \\<tau> |\\<noteq> \\<upsilon> P y\\<rbrakk>\n       \\<Longrightarrow> (P y \\<tau> \\<noteq> false \\<tau> \\<longrightarrow>\n                          (P y \\<tau> = \\<bottom> \\<tau> \\<longrightarrow>\n                           \\<bottom> =\n                           OclSelect_body P y\n                            (OclSelect\n                              X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) P)\n                            \\<tau>) \\<and>\n                          ((\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                      (X \\<tau>)\\<rceil>\\<rceil>.\n                               P (\\<lambda>_. x) \\<tau> =\n                               \\<bottom> \\<tau>) \\<longrightarrow>\n                           \\<bottom> =\n                           OclSelect_body P y\n                            (OclSelect\n                              X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) P)\n                            \\<tau>) \\<and>\n                          ((\\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                      (X->including\\<^sub>S\\<^sub>e\\<^sub>t(y)\n                        \\<tau>)\\<rceil>\\<rceil>.\n                               P (\\<lambda>_. x) \\<tau> \\<noteq>\n                               \\<bottom> \\<tau>) \\<longrightarrow>\n                           Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                            \\<lfloor>\\<lfloor>insert (y \\<tau>)\n         {x \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                   (X \\<tau>)\\<rceil>\\<rceil>.\n          P (\\<lambda>_. x) \\<tau> \\<noteq>\n          false \\<tau>}\\<rfloor>\\<rfloor> =\n                           OclSelect_body P y\n                            (OclSelect\n                              X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) P)\n                            \\<tau>)) \\<and>\n                         (P y \\<tau> = false \\<tau> \\<longrightarrow>\n                          ((\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                      (X \\<tau>)\\<rceil>\\<rceil>.\n                               P (\\<lambda>_. x) \\<tau> =\n                               \\<bottom> \\<tau>) \\<longrightarrow>\n                           \\<bottom> =\n                           OclSelect_body P y\n                            (OclSelect\n                              X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) P)\n                            \\<tau>) \\<and>\n                          ((\\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                      (X->including\\<^sub>S\\<^sub>e\\<^sub>t(y)\n                        \\<tau>)\\<rceil>\\<rceil>.\n                               P (\\<lambda>_. x) \\<tau> \\<noteq>\n                               \\<bottom> \\<tau>) \\<longrightarrow>\n                           Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                            \\<lfloor>\\<lfloor>{x\n         \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                (X \\<tau>)\\<rceil>\\<rceil>.\n         P (\\<lambda>_. x) \\<tau> \\<noteq> false \\<tau>}\\<rfloor>\\<rfloor> =\n                           OclSelect_body P y\n                            (OclSelect\n                              X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) P)\n                            \\<tau>))\n 4. \\<And>\\<tau>.\n       (\\<delta> X->including\\<^sub>S\\<^sub>e\\<^sub>t(y)) \\<tau> \\<noteq>\n       true \\<tau> \\<Longrightarrow>\n       (if (\\<delta> X->including\\<^sub>S\\<^sub>e\\<^sub>t(y)) \\<tau> =\n           true \\<tau>\n        then if \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n          (X->including\\<^sub>S\\<^sub>e\\<^sub>t(y) \\<tau>)\\<rceil>\\<rceil>.\n                   P (\\<lambda>_. x) \\<tau> = invalid \\<tau>\n             then invalid \\<tau>\n             else Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                   \\<lfloor>\\<lfloor>{x\n\\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                       (X->including\\<^sub>S\\<^sub>e\\<^sub>t(y)\n                         \\<tau>)\\<rceil>\\<rceil>.\nP (\\<lambda>_. x) \\<tau> \\<noteq> false \\<tau>}\\<rfloor>\\<rfloor>\n        else invalid \\<tau>) =\n       OclSelect_body P y\n        (OclSelect X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) P) \\<tau>", "apply(drule_tac y11 = false in bool_invalid)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>\\<tau>.\n       \\<lbrakk>(\\<delta> X and \\<upsilon> y) \\<tau> = true \\<tau>;\n        P y \\<tau> \\<noteq> false \\<tau>;\n        \\<tau> \\<Turnstile> P y \\<doteq> false \\<triangleq> invalid\\<rbrakk>\n       \\<Longrightarrow> (P y \\<tau> = \\<bottom> \\<tau> \\<longrightarrow>\n                          \\<bottom> =\n                          OclSelect_body P y\n                           (OclSelect\n                             X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) P)\n                           \\<tau>) \\<and>\n                         ((\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                     (X \\<tau>)\\<rceil>\\<rceil>.\n                              P (\\<lambda>_. x) \\<tau> =\n                              \\<bottom> \\<tau>) \\<longrightarrow>\n                          \\<bottom> =\n                          OclSelect_body P y\n                           (OclSelect\n                             X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) P)\n                           \\<tau>)\n 2. \\<And>\\<tau>.\n       \\<lbrakk>(\\<delta> X and \\<upsilon> y) \\<tau> = true \\<tau>;\n        \\<tau> |\\<noteq> \\<upsilon> P y;\n        P y \\<tau> \\<noteq> false \\<tau>\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                    (X->including\\<^sub>S\\<^sub>e\\<^sub>t(y)\n                      \\<tau>)\\<rceil>\\<rceil>.\n                             P (\\<lambda>_. x) \\<tau> \\<noteq>\n                             \\<bottom> \\<tau>) \\<longrightarrow>\n                         Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                          \\<lfloor>\\<lfloor>insert (y \\<tau>)\n       {x \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                 (X \\<tau>)\\<rceil>\\<rceil>.\n        P (\\<lambda>_. x) \\<tau> \\<noteq> false \\<tau>}\\<rfloor>\\<rfloor> =\n                         OclSelect_body P y\n                          (OclSelect X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y)\n                            P)\n                          \\<tau>\n 3. \\<And>\\<tau>.\n       \\<lbrakk>(\\<delta> X and \\<upsilon> y) \\<tau> = true \\<tau>;\n        \\<not> \\<tau> |\\<noteq> \\<upsilon> P y\\<rbrakk>\n       \\<Longrightarrow> (P y \\<tau> \\<noteq> false \\<tau> \\<longrightarrow>\n                          (P y \\<tau> = \\<bottom> \\<tau> \\<longrightarrow>\n                           \\<bottom> =\n                           OclSelect_body P y\n                            (OclSelect\n                              X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) P)\n                            \\<tau>) \\<and>\n                          ((\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                      (X \\<tau>)\\<rceil>\\<rceil>.\n                               P (\\<lambda>_. x) \\<tau> =\n                               \\<bottom> \\<tau>) \\<longrightarrow>\n                           \\<bottom> =\n                           OclSelect_body P y\n                            (OclSelect\n                              X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) P)\n                            \\<tau>) \\<and>\n                          ((\\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                      (X->including\\<^sub>S\\<^sub>e\\<^sub>t(y)\n                        \\<tau>)\\<rceil>\\<rceil>.\n                               P (\\<lambda>_. x) \\<tau> \\<noteq>\n                               \\<bottom> \\<tau>) \\<longrightarrow>\n                           Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                            \\<lfloor>\\<lfloor>insert (y \\<tau>)\n         {x \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                   (X \\<tau>)\\<rceil>\\<rceil>.\n          P (\\<lambda>_. x) \\<tau> \\<noteq>\n          false \\<tau>}\\<rfloor>\\<rfloor> =\n                           OclSelect_body P y\n                            (OclSelect\n                              X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) P)\n                            \\<tau>)) \\<and>\n                         (P y \\<tau> = false \\<tau> \\<longrightarrow>\n                          ((\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                      (X \\<tau>)\\<rceil>\\<rceil>.\n                               P (\\<lambda>_. x) \\<tau> =\n                               \\<bottom> \\<tau>) \\<longrightarrow>\n                           \\<bottom> =\n                           OclSelect_body P y\n                            (OclSelect\n                              X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) P)\n                            \\<tau>) \\<and>\n                          ((\\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                      (X->including\\<^sub>S\\<^sub>e\\<^sub>t(y)\n                        \\<tau>)\\<rceil>\\<rceil>.\n                               P (\\<lambda>_. x) \\<tau> \\<noteq>\n                               \\<bottom> \\<tau>) \\<longrightarrow>\n                           Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                            \\<lfloor>\\<lfloor>{x\n         \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                (X \\<tau>)\\<rceil>\\<rceil>.\n         P (\\<lambda>_. x) \\<tau> \\<noteq> false \\<tau>}\\<rfloor>\\<rfloor> =\n                           OclSelect_body P y\n                            (OclSelect\n                              X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) P)\n                            \\<tau>))\n 4. \\<And>\\<tau>.\n       (\\<delta> X->including\\<^sub>S\\<^sub>e\\<^sub>t(y)) \\<tau> \\<noteq>\n       true \\<tau> \\<Longrightarrow>\n       (if (\\<delta> X->including\\<^sub>S\\<^sub>e\\<^sub>t(y)) \\<tau> =\n           true \\<tau>\n        then if \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n          (X->including\\<^sub>S\\<^sub>e\\<^sub>t(y) \\<tau>)\\<rceil>\\<rceil>.\n                   P (\\<lambda>_. x) \\<tau> = invalid \\<tau>\n             then invalid \\<tau>\n             else Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                   \\<lfloor>\\<lfloor>{x\n\\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                       (X->including\\<^sub>S\\<^sub>e\\<^sub>t(y)\n                         \\<tau>)\\<rceil>\\<rceil>.\nP (\\<lambda>_. x) \\<tau> \\<noteq> false \\<tau>}\\<rfloor>\\<rfloor>\n        else invalid \\<tau>) =\n       OclSelect_body P y\n        (OclSelect X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) P) \\<tau>", "apply(simp only: OclSelect_body_def,\n           metis OclIf_def OclValid_def defined_def foundation2 foundation22\n                 bot_fun_def invalid_def)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>\\<tau>.\n       \\<lbrakk>(\\<delta> X and \\<upsilon> y) \\<tau> = true \\<tau>;\n        \\<tau> |\\<noteq> \\<upsilon> P y;\n        P y \\<tau> \\<noteq> false \\<tau>\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                    (X->including\\<^sub>S\\<^sub>e\\<^sub>t(y)\n                      \\<tau>)\\<rceil>\\<rceil>.\n                             P (\\<lambda>_. x) \\<tau> \\<noteq>\n                             \\<bottom> \\<tau>) \\<longrightarrow>\n                         Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                          \\<lfloor>\\<lfloor>insert (y \\<tau>)\n       {x \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                 (X \\<tau>)\\<rceil>\\<rceil>.\n        P (\\<lambda>_. x) \\<tau> \\<noteq> false \\<tau>}\\<rfloor>\\<rfloor> =\n                         OclSelect_body P y\n                          (OclSelect X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y)\n                            P)\n                          \\<tau>\n 2. \\<And>\\<tau>.\n       \\<lbrakk>(\\<delta> X and \\<upsilon> y) \\<tau> = true \\<tau>;\n        \\<not> \\<tau> |\\<noteq> \\<upsilon> P y\\<rbrakk>\n       \\<Longrightarrow> (P y \\<tau> \\<noteq> false \\<tau> \\<longrightarrow>\n                          (P y \\<tau> = \\<bottom> \\<tau> \\<longrightarrow>\n                           \\<bottom> =\n                           OclSelect_body P y\n                            (OclSelect\n                              X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) P)\n                            \\<tau>) \\<and>\n                          ((\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                      (X \\<tau>)\\<rceil>\\<rceil>.\n                               P (\\<lambda>_. x) \\<tau> =\n                               \\<bottom> \\<tau>) \\<longrightarrow>\n                           \\<bottom> =\n                           OclSelect_body P y\n                            (OclSelect\n                              X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) P)\n                            \\<tau>) \\<and>\n                          ((\\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                      (X->including\\<^sub>S\\<^sub>e\\<^sub>t(y)\n                        \\<tau>)\\<rceil>\\<rceil>.\n                               P (\\<lambda>_. x) \\<tau> \\<noteq>\n                               \\<bottom> \\<tau>) \\<longrightarrow>\n                           Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                            \\<lfloor>\\<lfloor>insert (y \\<tau>)\n         {x \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                   (X \\<tau>)\\<rceil>\\<rceil>.\n          P (\\<lambda>_. x) \\<tau> \\<noteq>\n          false \\<tau>}\\<rfloor>\\<rfloor> =\n                           OclSelect_body P y\n                            (OclSelect\n                              X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) P)\n                            \\<tau>)) \\<and>\n                         (P y \\<tau> = false \\<tau> \\<longrightarrow>\n                          ((\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                      (X \\<tau>)\\<rceil>\\<rceil>.\n                               P (\\<lambda>_. x) \\<tau> =\n                               \\<bottom> \\<tau>) \\<longrightarrow>\n                           \\<bottom> =\n                           OclSelect_body P y\n                            (OclSelect\n                              X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) P)\n                            \\<tau>) \\<and>\n                          ((\\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                      (X->including\\<^sub>S\\<^sub>e\\<^sub>t(y)\n                        \\<tau>)\\<rceil>\\<rceil>.\n                               P (\\<lambda>_. x) \\<tau> \\<noteq>\n                               \\<bottom> \\<tau>) \\<longrightarrow>\n                           Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                            \\<lfloor>\\<lfloor>{x\n         \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                (X \\<tau>)\\<rceil>\\<rceil>.\n         P (\\<lambda>_. x) \\<tau> \\<noteq> false \\<tau>}\\<rfloor>\\<rfloor> =\n                           OclSelect_body P y\n                            (OclSelect\n                              X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) P)\n                            \\<tau>))\n 3. \\<And>\\<tau>.\n       (\\<delta> X->including\\<^sub>S\\<^sub>e\\<^sub>t(y)) \\<tau> \\<noteq>\n       true \\<tau> \\<Longrightarrow>\n       (if (\\<delta> X->including\\<^sub>S\\<^sub>e\\<^sub>t(y)) \\<tau> =\n           true \\<tau>\n        then if \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n          (X->including\\<^sub>S\\<^sub>e\\<^sub>t(y) \\<tau>)\\<rceil>\\<rceil>.\n                   P (\\<lambda>_. x) \\<tau> = invalid \\<tau>\n             then invalid \\<tau>\n             else Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                   \\<lfloor>\\<lfloor>{x\n\\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                       (X->including\\<^sub>S\\<^sub>e\\<^sub>t(y)\n                         \\<tau>)\\<rceil>\\<rceil>.\nP (\\<lambda>_. x) \\<tau> \\<noteq> false \\<tau>}\\<rfloor>\\<rfloor>\n        else invalid \\<tau>) =\n       OclSelect_body P y\n        (OclSelect X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) P) \\<tau>", "(* *)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>\\<tau>.\n       \\<lbrakk>(\\<delta> X and \\<upsilon> y) \\<tau> = true \\<tau>;\n        \\<tau> |\\<noteq> \\<upsilon> P y;\n        P y \\<tau> \\<noteq> false \\<tau>\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                    (X->including\\<^sub>S\\<^sub>e\\<^sub>t(y)\n                      \\<tau>)\\<rceil>\\<rceil>.\n                             P (\\<lambda>_. x) \\<tau> \\<noteq>\n                             \\<bottom> \\<tau>) \\<longrightarrow>\n                         Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                          \\<lfloor>\\<lfloor>insert (y \\<tau>)\n       {x \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                 (X \\<tau>)\\<rceil>\\<rceil>.\n        P (\\<lambda>_. x) \\<tau> \\<noteq> false \\<tau>}\\<rfloor>\\<rfloor> =\n                         OclSelect_body P y\n                          (OclSelect X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y)\n                            P)\n                          \\<tau>\n 2. \\<And>\\<tau>.\n       \\<lbrakk>(\\<delta> X and \\<upsilon> y) \\<tau> = true \\<tau>;\n        \\<not> \\<tau> |\\<noteq> \\<upsilon> P y\\<rbrakk>\n       \\<Longrightarrow> (P y \\<tau> \\<noteq> false \\<tau> \\<longrightarrow>\n                          (P y \\<tau> = \\<bottom> \\<tau> \\<longrightarrow>\n                           \\<bottom> =\n                           OclSelect_body P y\n                            (OclSelect\n                              X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) P)\n                            \\<tau>) \\<and>\n                          ((\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                      (X \\<tau>)\\<rceil>\\<rceil>.\n                               P (\\<lambda>_. x) \\<tau> =\n                               \\<bottom> \\<tau>) \\<longrightarrow>\n                           \\<bottom> =\n                           OclSelect_body P y\n                            (OclSelect\n                              X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) P)\n                            \\<tau>) \\<and>\n                          ((\\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                      (X->including\\<^sub>S\\<^sub>e\\<^sub>t(y)\n                        \\<tau>)\\<rceil>\\<rceil>.\n                               P (\\<lambda>_. x) \\<tau> \\<noteq>\n                               \\<bottom> \\<tau>) \\<longrightarrow>\n                           Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                            \\<lfloor>\\<lfloor>insert (y \\<tau>)\n         {x \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                   (X \\<tau>)\\<rceil>\\<rceil>.\n          P (\\<lambda>_. x) \\<tau> \\<noteq>\n          false \\<tau>}\\<rfloor>\\<rfloor> =\n                           OclSelect_body P y\n                            (OclSelect\n                              X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) P)\n                            \\<tau>)) \\<and>\n                         (P y \\<tau> = false \\<tau> \\<longrightarrow>\n                          ((\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                      (X \\<tau>)\\<rceil>\\<rceil>.\n                               P (\\<lambda>_. x) \\<tau> =\n                               \\<bottom> \\<tau>) \\<longrightarrow>\n                           \\<bottom> =\n                           OclSelect_body P y\n                            (OclSelect\n                              X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) P)\n                            \\<tau>) \\<and>\n                          ((\\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                      (X->including\\<^sub>S\\<^sub>e\\<^sub>t(y)\n                        \\<tau>)\\<rceil>\\<rceil>.\n                               P (\\<lambda>_. x) \\<tau> \\<noteq>\n                               \\<bottom> \\<tau>) \\<longrightarrow>\n                           Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                            \\<lfloor>\\<lfloor>{x\n         \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                (X \\<tau>)\\<rceil>\\<rceil>.\n         P (\\<lambda>_. x) \\<tau> \\<noteq> false \\<tau>}\\<rfloor>\\<rfloor> =\n                           OclSelect_body P y\n                            (OclSelect\n                              X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) P)\n                            \\<tau>))\n 3. \\<And>\\<tau>.\n       (\\<delta> X->including\\<^sub>S\\<^sub>e\\<^sub>t(y)) \\<tau> \\<noteq>\n       true \\<tau> \\<Longrightarrow>\n       (if (\\<delta> X->including\\<^sub>S\\<^sub>e\\<^sub>t(y)) \\<tau> =\n           true \\<tau>\n        then if \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n          (X->including\\<^sub>S\\<^sub>e\\<^sub>t(y) \\<tau>)\\<rceil>\\<rceil>.\n                   P (\\<lambda>_. x) \\<tau> = invalid \\<tau>\n             then invalid \\<tau>\n             else Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                   \\<lfloor>\\<lfloor>{x\n\\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                       (X->including\\<^sub>S\\<^sub>e\\<^sub>t(y)\n                         \\<tau>)\\<rceil>\\<rceil>.\nP (\\<lambda>_. x) \\<tau> \\<noteq> false \\<tau>}\\<rfloor>\\<rfloor>\n        else invalid \\<tau>) =\n       OclSelect_body P y\n        (OclSelect X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) P) \\<tau>", "apply(drule foundation5[simplified OclValid_def],\n          subst al_including[simplified OclValid_def],\n          simp,\n          simp)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>\\<tau>.\n       \\<lbrakk>\\<tau> |\\<noteq> \\<upsilon> P y;\n        P y \\<tau> \\<noteq> false \\<tau>;\n        (\\<delta> X) \\<tau> = true \\<tau> \\<and>\n        (\\<upsilon> y) \\<tau> = true \\<tau>\\<rbrakk>\n       \\<Longrightarrow> P (\\<lambda>_. y \\<tau>) \\<tau> \\<noteq>\n                         \\<bottom> \\<tau> \\<and>\n                         (\\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                    (X \\<tau>)\\<rceil>\\<rceil>.\n                             P (\\<lambda>_. x) \\<tau> \\<noteq>\n                             \\<bottom> \\<tau>) \\<longrightarrow>\n                         Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                          \\<lfloor>\\<lfloor>insert (y \\<tau>)\n       {x \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                 (X \\<tau>)\\<rceil>\\<rceil>.\n        P (\\<lambda>_. x) \\<tau> \\<noteq> false \\<tau>}\\<rfloor>\\<rfloor> =\n                         OclSelect_body P y\n                          (OclSelect X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y)\n                            P)\n                          \\<tau>\n 2. \\<And>\\<tau>.\n       \\<lbrakk>(\\<delta> X and \\<upsilon> y) \\<tau> = true \\<tau>;\n        \\<not> \\<tau> |\\<noteq> \\<upsilon> P y\\<rbrakk>\n       \\<Longrightarrow> (P y \\<tau> \\<noteq> false \\<tau> \\<longrightarrow>\n                          (P y \\<tau> = \\<bottom> \\<tau> \\<longrightarrow>\n                           \\<bottom> =\n                           OclSelect_body P y\n                            (OclSelect\n                              X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) P)\n                            \\<tau>) \\<and>\n                          ((\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                      (X \\<tau>)\\<rceil>\\<rceil>.\n                               P (\\<lambda>_. x) \\<tau> =\n                               \\<bottom> \\<tau>) \\<longrightarrow>\n                           \\<bottom> =\n                           OclSelect_body P y\n                            (OclSelect\n                              X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) P)\n                            \\<tau>) \\<and>\n                          ((\\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                      (X->including\\<^sub>S\\<^sub>e\\<^sub>t(y)\n                        \\<tau>)\\<rceil>\\<rceil>.\n                               P (\\<lambda>_. x) \\<tau> \\<noteq>\n                               \\<bottom> \\<tau>) \\<longrightarrow>\n                           Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                            \\<lfloor>\\<lfloor>insert (y \\<tau>)\n         {x \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                   (X \\<tau>)\\<rceil>\\<rceil>.\n          P (\\<lambda>_. x) \\<tau> \\<noteq>\n          false \\<tau>}\\<rfloor>\\<rfloor> =\n                           OclSelect_body P y\n                            (OclSelect\n                              X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) P)\n                            \\<tau>)) \\<and>\n                         (P y \\<tau> = false \\<tau> \\<longrightarrow>\n                          ((\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                      (X \\<tau>)\\<rceil>\\<rceil>.\n                               P (\\<lambda>_. x) \\<tau> =\n                               \\<bottom> \\<tau>) \\<longrightarrow>\n                           \\<bottom> =\n                           OclSelect_body P y\n                            (OclSelect\n                              X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) P)\n                            \\<tau>) \\<and>\n                          ((\\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                      (X->including\\<^sub>S\\<^sub>e\\<^sub>t(y)\n                        \\<tau>)\\<rceil>\\<rceil>.\n                               P (\\<lambda>_. x) \\<tau> \\<noteq>\n                               \\<bottom> \\<tau>) \\<longrightarrow>\n                           Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                            \\<lfloor>\\<lfloor>{x\n         \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                (X \\<tau>)\\<rceil>\\<rceil>.\n         P (\\<lambda>_. x) \\<tau> \\<noteq> false \\<tau>}\\<rfloor>\\<rfloor> =\n                           OclSelect_body P y\n                            (OclSelect\n                              X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) P)\n                            \\<tau>))\n 3. \\<And>\\<tau>.\n       (\\<delta> X->including\\<^sub>S\\<^sub>e\\<^sub>t(y)) \\<tau> \\<noteq>\n       true \\<tau> \\<Longrightarrow>\n       (if (\\<delta> X->including\\<^sub>S\\<^sub>e\\<^sub>t(y)) \\<tau> =\n           true \\<tau>\n        then if \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n          (X->including\\<^sub>S\\<^sub>e\\<^sub>t(y) \\<tau>)\\<rceil>\\<rceil>.\n                   P (\\<lambda>_. x) \\<tau> = invalid \\<tau>\n             then invalid \\<tau>\n             else Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                   \\<lfloor>\\<lfloor>{x\n\\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                       (X->including\\<^sub>S\\<^sub>e\\<^sub>t(y)\n                         \\<tau>)\\<rceil>\\<rceil>.\nP (\\<lambda>_. x) \\<tau> \\<noteq> false \\<tau>}\\<rfloor>\\<rfloor>\n        else invalid \\<tau>) =\n       OclSelect_body P y\n        (OclSelect X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) P) \\<tau>", "apply(simp add: P_cp[symmetric])"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>\\<tau>.\n       \\<lbrakk>\\<tau> |\\<noteq> \\<upsilon> P y;\n        P y \\<tau> \\<noteq> false \\<tau>;\n        (\\<delta> X) \\<tau> = true \\<tau> \\<and>\n        (\\<upsilon> y) \\<tau> = true \\<tau>\\<rbrakk>\n       \\<Longrightarrow> P y \\<tau> \\<noteq> \\<bottom> \\<tau> \\<and>\n                         (\\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                    (X \\<tau>)\\<rceil>\\<rceil>.\n                             P (\\<lambda>_. x) \\<tau> \\<noteq>\n                             \\<bottom> \\<tau>) \\<longrightarrow>\n                         Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                          \\<lfloor>\\<lfloor>insert (y \\<tau>)\n       {x \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                 (X \\<tau>)\\<rceil>\\<rceil>.\n        P (\\<lambda>_. x) \\<tau> \\<noteq> false \\<tau>}\\<rfloor>\\<rfloor> =\n                         OclSelect_body P y\n                          (OclSelect X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y)\n                            P)\n                          \\<tau>\n 2. \\<And>\\<tau>.\n       \\<lbrakk>(\\<delta> X and \\<upsilon> y) \\<tau> = true \\<tau>;\n        \\<not> \\<tau> |\\<noteq> \\<upsilon> P y\\<rbrakk>\n       \\<Longrightarrow> (P y \\<tau> \\<noteq> false \\<tau> \\<longrightarrow>\n                          (P y \\<tau> = \\<bottom> \\<tau> \\<longrightarrow>\n                           \\<bottom> =\n                           OclSelect_body P y\n                            (OclSelect\n                              X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) P)\n                            \\<tau>) \\<and>\n                          ((\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                      (X \\<tau>)\\<rceil>\\<rceil>.\n                               P (\\<lambda>_. x) \\<tau> =\n                               \\<bottom> \\<tau>) \\<longrightarrow>\n                           \\<bottom> =\n                           OclSelect_body P y\n                            (OclSelect\n                              X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) P)\n                            \\<tau>) \\<and>\n                          ((\\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                      (X->including\\<^sub>S\\<^sub>e\\<^sub>t(y)\n                        \\<tau>)\\<rceil>\\<rceil>.\n                               P (\\<lambda>_. x) \\<tau> \\<noteq>\n                               \\<bottom> \\<tau>) \\<longrightarrow>\n                           Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                            \\<lfloor>\\<lfloor>insert (y \\<tau>)\n         {x \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                   (X \\<tau>)\\<rceil>\\<rceil>.\n          P (\\<lambda>_. x) \\<tau> \\<noteq>\n          false \\<tau>}\\<rfloor>\\<rfloor> =\n                           OclSelect_body P y\n                            (OclSelect\n                              X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) P)\n                            \\<tau>)) \\<and>\n                         (P y \\<tau> = false \\<tau> \\<longrightarrow>\n                          ((\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                      (X \\<tau>)\\<rceil>\\<rceil>.\n                               P (\\<lambda>_. x) \\<tau> =\n                               \\<bottom> \\<tau>) \\<longrightarrow>\n                           \\<bottom> =\n                           OclSelect_body P y\n                            (OclSelect\n                              X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) P)\n                            \\<tau>) \\<and>\n                          ((\\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                      (X->including\\<^sub>S\\<^sub>e\\<^sub>t(y)\n                        \\<tau>)\\<rceil>\\<rceil>.\n                               P (\\<lambda>_. x) \\<tau> \\<noteq>\n                               \\<bottom> \\<tau>) \\<longrightarrow>\n                           Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                            \\<lfloor>\\<lfloor>{x\n         \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                (X \\<tau>)\\<rceil>\\<rceil>.\n         P (\\<lambda>_. x) \\<tau> \\<noteq> false \\<tau>}\\<rfloor>\\<rfloor> =\n                           OclSelect_body P y\n                            (OclSelect\n                              X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) P)\n                            \\<tau>))\n 3. \\<And>\\<tau>.\n       (\\<delta> X->including\\<^sub>S\\<^sub>e\\<^sub>t(y)) \\<tau> \\<noteq>\n       true \\<tau> \\<Longrightarrow>\n       (if (\\<delta> X->including\\<^sub>S\\<^sub>e\\<^sub>t(y)) \\<tau> =\n           true \\<tau>\n        then if \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n          (X->including\\<^sub>S\\<^sub>e\\<^sub>t(y) \\<tau>)\\<rceil>\\<rceil>.\n                   P (\\<lambda>_. x) \\<tau> = invalid \\<tau>\n             then invalid \\<tau>\n             else Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                   \\<lfloor>\\<lfloor>{x\n\\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                       (X->including\\<^sub>S\\<^sub>e\\<^sub>t(y)\n                         \\<tau>)\\<rceil>\\<rceil>.\nP (\\<lambda>_. x) \\<tau> \\<noteq> false \\<tau>}\\<rfloor>\\<rfloor>\n        else invalid \\<tau>) =\n       OclSelect_body P y\n        (OclSelect X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) P) \\<tau>", "apply (metis bot_fun_def foundation18')"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>\\<tau>.\n       \\<lbrakk>(\\<delta> X and \\<upsilon> y) \\<tau> = true \\<tau>;\n        \\<not> \\<tau> |\\<noteq> \\<upsilon> P y\\<rbrakk>\n       \\<Longrightarrow> (P y \\<tau> \\<noteq> false \\<tau> \\<longrightarrow>\n                          (P y \\<tau> = \\<bottom> \\<tau> \\<longrightarrow>\n                           \\<bottom> =\n                           OclSelect_body P y\n                            (OclSelect\n                              X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) P)\n                            \\<tau>) \\<and>\n                          ((\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                      (X \\<tau>)\\<rceil>\\<rceil>.\n                               P (\\<lambda>_. x) \\<tau> =\n                               \\<bottom> \\<tau>) \\<longrightarrow>\n                           \\<bottom> =\n                           OclSelect_body P y\n                            (OclSelect\n                              X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) P)\n                            \\<tau>) \\<and>\n                          ((\\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                      (X->including\\<^sub>S\\<^sub>e\\<^sub>t(y)\n                        \\<tau>)\\<rceil>\\<rceil>.\n                               P (\\<lambda>_. x) \\<tau> \\<noteq>\n                               \\<bottom> \\<tau>) \\<longrightarrow>\n                           Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                            \\<lfloor>\\<lfloor>insert (y \\<tau>)\n         {x \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                   (X \\<tau>)\\<rceil>\\<rceil>.\n          P (\\<lambda>_. x) \\<tau> \\<noteq>\n          false \\<tau>}\\<rfloor>\\<rfloor> =\n                           OclSelect_body P y\n                            (OclSelect\n                              X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) P)\n                            \\<tau>)) \\<and>\n                         (P y \\<tau> = false \\<tau> \\<longrightarrow>\n                          ((\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                      (X \\<tau>)\\<rceil>\\<rceil>.\n                               P (\\<lambda>_. x) \\<tau> =\n                               \\<bottom> \\<tau>) \\<longrightarrow>\n                           \\<bottom> =\n                           OclSelect_body P y\n                            (OclSelect\n                              X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) P)\n                            \\<tau>) \\<and>\n                          ((\\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                      (X->including\\<^sub>S\\<^sub>e\\<^sub>t(y)\n                        \\<tau>)\\<rceil>\\<rceil>.\n                               P (\\<lambda>_. x) \\<tau> \\<noteq>\n                               \\<bottom> \\<tau>) \\<longrightarrow>\n                           Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                            \\<lfloor>\\<lfloor>{x\n         \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                (X \\<tau>)\\<rceil>\\<rceil>.\n         P (\\<lambda>_. x) \\<tau> \\<noteq> false \\<tau>}\\<rfloor>\\<rfloor> =\n                           OclSelect_body P y\n                            (OclSelect\n                              X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) P)\n                            \\<tau>))\n 2. \\<And>\\<tau>.\n       (\\<delta> X->including\\<^sub>S\\<^sub>e\\<^sub>t(y)) \\<tau> \\<noteq>\n       true \\<tau> \\<Longrightarrow>\n       (if (\\<delta> X->including\\<^sub>S\\<^sub>e\\<^sub>t(y)) \\<tau> =\n           true \\<tau>\n        then if \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n          (X->including\\<^sub>S\\<^sub>e\\<^sub>t(y) \\<tau>)\\<rceil>\\<rceil>.\n                   P (\\<lambda>_. x) \\<tau> = invalid \\<tau>\n             then invalid \\<tau>\n             else Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                   \\<lfloor>\\<lfloor>{x\n\\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                       (X->including\\<^sub>S\\<^sub>e\\<^sub>t(y)\n                         \\<tau>)\\<rceil>\\<rceil>.\nP (\\<lambda>_. x) \\<tau> \\<noteq> false \\<tau>}\\<rfloor>\\<rfloor>\n        else invalid \\<tau>) =\n       OclSelect_body P y\n        (OclSelect X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) P) \\<tau>", "apply(simp add: foundation18' bot_fun_def OclSelect_body_bot OclSelect_body_bot')"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>\\<tau>.\n       \\<lbrakk>(\\<delta> X and \\<upsilon> y) \\<tau> = true \\<tau>;\n        P y \\<tau> \\<noteq> \\<bottom>\\<rbrakk>\n       \\<Longrightarrow> (P y \\<tau> \\<noteq> false \\<tau> \\<longrightarrow>\n                          ((\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                      (X \\<tau>)\\<rceil>\\<rceil>.\n                               P (\\<lambda>_. x) \\<tau> =\n                               \\<bottom>) \\<longrightarrow>\n                           \\<bottom> =\n                           OclSelect_body P y\n                            (OclSelect\n                              X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) P)\n                            \\<tau>) \\<and>\n                          ((\\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                      (X->including\\<^sub>S\\<^sub>e\\<^sub>t(y)\n                        \\<tau>)\\<rceil>\\<rceil>.\n                               P (\\<lambda>_. x) \\<tau> \\<noteq>\n                               \\<bottom>) \\<longrightarrow>\n                           Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                            \\<lfloor>\\<lfloor>insert (y \\<tau>)\n         {x \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                   (X \\<tau>)\\<rceil>\\<rceil>.\n          P (\\<lambda>_. x) \\<tau> \\<noteq>\n          false \\<tau>}\\<rfloor>\\<rfloor> =\n                           OclSelect_body P y\n                            (OclSelect\n                              X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) P)\n                            \\<tau>)) \\<and>\n                         (P y \\<tau> = false \\<tau> \\<longrightarrow>\n                          ((\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                      (X \\<tau>)\\<rceil>\\<rceil>.\n                               P (\\<lambda>_. x) \\<tau> =\n                               \\<bottom>) \\<longrightarrow>\n                           \\<bottom> =\n                           OclSelect_body P y\n                            (OclSelect\n                              X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) P)\n                            \\<tau>) \\<and>\n                          ((\\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                      (X->including\\<^sub>S\\<^sub>e\\<^sub>t(y)\n                        \\<tau>)\\<rceil>\\<rceil>.\n                               P (\\<lambda>_. x) \\<tau> \\<noteq>\n                               \\<bottom>) \\<longrightarrow>\n                           Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                            \\<lfloor>\\<lfloor>{x\n         \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                (X \\<tau>)\\<rceil>\\<rceil>.\n         P (\\<lambda>_. x) \\<tau> \\<noteq> false \\<tau>}\\<rfloor>\\<rfloor> =\n                           OclSelect_body P y\n                            (OclSelect\n                              X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) P)\n                            \\<tau>))\n 2. \\<And>\\<tau>.\n       (\\<delta> X->including\\<^sub>S\\<^sub>e\\<^sub>t(y)) \\<tau> \\<noteq>\n       true \\<tau> \\<Longrightarrow>\n       (if (\\<delta> X->including\\<^sub>S\\<^sub>e\\<^sub>t(y)) \\<tau> =\n           true \\<tau>\n        then if \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n          (X->including\\<^sub>S\\<^sub>e\\<^sub>t(y) \\<tau>)\\<rceil>\\<rceil>.\n                   P (\\<lambda>_. x) \\<tau> = invalid \\<tau>\n             then invalid \\<tau>\n             else Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                   \\<lfloor>\\<lfloor>{x\n\\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                       (X->including\\<^sub>S\\<^sub>e\\<^sub>t(y)\n                         \\<tau>)\\<rceil>\\<rceil>.\nP (\\<lambda>_. x) \\<tau> \\<noteq> false \\<tau>}\\<rfloor>\\<rfloor>\n        else invalid \\<tau>) =\n       OclSelect_body P y\n        (OclSelect X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) P) \\<tau>", "(* *)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>\\<tau>.\n       \\<lbrakk>(\\<delta> X and \\<upsilon> y) \\<tau> = true \\<tau>;\n        P y \\<tau> \\<noteq> \\<bottom>\\<rbrakk>\n       \\<Longrightarrow> (P y \\<tau> \\<noteq> false \\<tau> \\<longrightarrow>\n                          ((\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                      (X \\<tau>)\\<rceil>\\<rceil>.\n                               P (\\<lambda>_. x) \\<tau> =\n                               \\<bottom>) \\<longrightarrow>\n                           \\<bottom> =\n                           OclSelect_body P y\n                            (OclSelect\n                              X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) P)\n                            \\<tau>) \\<and>\n                          ((\\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                      (X->including\\<^sub>S\\<^sub>e\\<^sub>t(y)\n                        \\<tau>)\\<rceil>\\<rceil>.\n                               P (\\<lambda>_. x) \\<tau> \\<noteq>\n                               \\<bottom>) \\<longrightarrow>\n                           Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                            \\<lfloor>\\<lfloor>insert (y \\<tau>)\n         {x \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                   (X \\<tau>)\\<rceil>\\<rceil>.\n          P (\\<lambda>_. x) \\<tau> \\<noteq>\n          false \\<tau>}\\<rfloor>\\<rfloor> =\n                           OclSelect_body P y\n                            (OclSelect\n                              X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) P)\n                            \\<tau>)) \\<and>\n                         (P y \\<tau> = false \\<tau> \\<longrightarrow>\n                          ((\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                      (X \\<tau>)\\<rceil>\\<rceil>.\n                               P (\\<lambda>_. x) \\<tau> =\n                               \\<bottom>) \\<longrightarrow>\n                           \\<bottom> =\n                           OclSelect_body P y\n                            (OclSelect\n                              X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) P)\n                            \\<tau>) \\<and>\n                          ((\\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                      (X->including\\<^sub>S\\<^sub>e\\<^sub>t(y)\n                        \\<tau>)\\<rceil>\\<rceil>.\n                               P (\\<lambda>_. x) \\<tau> \\<noteq>\n                               \\<bottom>) \\<longrightarrow>\n                           Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                            \\<lfloor>\\<lfloor>{x\n         \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                (X \\<tau>)\\<rceil>\\<rceil>.\n         P (\\<lambda>_. x) \\<tau> \\<noteq> false \\<tau>}\\<rfloor>\\<rfloor> =\n                           OclSelect_body P y\n                            (OclSelect\n                              X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) P)\n                            \\<tau>))\n 2. \\<And>\\<tau>.\n       (\\<delta> X->including\\<^sub>S\\<^sub>e\\<^sub>t(y)) \\<tau> \\<noteq>\n       true \\<tau> \\<Longrightarrow>\n       (if (\\<delta> X->including\\<^sub>S\\<^sub>e\\<^sub>t(y)) \\<tau> =\n           true \\<tau>\n        then if \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n          (X->including\\<^sub>S\\<^sub>e\\<^sub>t(y) \\<tau>)\\<rceil>\\<rceil>.\n                   P (\\<lambda>_. x) \\<tau> = invalid \\<tau>\n             then invalid \\<tau>\n             else Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                   \\<lfloor>\\<lfloor>{x\n\\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                       (X->including\\<^sub>S\\<^sub>e\\<^sub>t(y)\n                         \\<tau>)\\<rceil>\\<rceil>.\nP (\\<lambda>_. x) \\<tau> \\<noteq> false \\<tau>}\\<rfloor>\\<rfloor>\n        else invalid \\<tau>) =\n       OclSelect_body P y\n        (OclSelect X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) P) \\<tau>", "apply(subst (1 2) al_including, metis OclValid_def foundation5, metis OclValid_def foundation5)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>\\<tau>.\n       \\<lbrakk>(\\<delta> X and \\<upsilon> y) \\<tau> = true \\<tau>;\n        P y \\<tau> \\<noteq> \\<bottom>\\<rbrakk>\n       \\<Longrightarrow> (P y \\<tau> \\<noteq> false \\<tau> \\<longrightarrow>\n                          ((\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                      (X \\<tau>)\\<rceil>\\<rceil>.\n                               P (\\<lambda>_. x) \\<tau> =\n                               \\<bottom>) \\<longrightarrow>\n                           \\<bottom> =\n                           OclSelect_body P y\n                            (OclSelect\n                              X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) P)\n                            \\<tau>) \\<and>\n                          (P (\\<lambda>_. y \\<tau>) \\<tau> \\<noteq>\n                           \\<bottom> \\<and>\n                           (\\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                      (X \\<tau>)\\<rceil>\\<rceil>.\n                               P (\\<lambda>_. x) \\<tau> \\<noteq>\n                               \\<bottom>) \\<longrightarrow>\n                           Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                            \\<lfloor>\\<lfloor>insert (y \\<tau>)\n         {x \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                   (X \\<tau>)\\<rceil>\\<rceil>.\n          P (\\<lambda>_. x) \\<tau> \\<noteq>\n          false \\<tau>}\\<rfloor>\\<rfloor> =\n                           OclSelect_body P y\n                            (OclSelect\n                              X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) P)\n                            \\<tau>)) \\<and>\n                         (P y \\<tau> = false \\<tau> \\<longrightarrow>\n                          ((\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                      (X \\<tau>)\\<rceil>\\<rceil>.\n                               P (\\<lambda>_. x) \\<tau> =\n                               \\<bottom>) \\<longrightarrow>\n                           \\<bottom> =\n                           OclSelect_body P y\n                            (OclSelect\n                              X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) P)\n                            \\<tau>) \\<and>\n                          (P (\\<lambda>_. y \\<tau>) \\<tau> \\<noteq>\n                           \\<bottom> \\<and>\n                           (\\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                      (X \\<tau>)\\<rceil>\\<rceil>.\n                               P (\\<lambda>_. x) \\<tau> \\<noteq>\n                               \\<bottom>) \\<longrightarrow>\n                           Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                            \\<lfloor>\\<lfloor>{x\n         \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                (X \\<tau>)\\<rceil>\\<rceil>.\n         P (\\<lambda>_. x) \\<tau> \\<noteq> false \\<tau>}\\<rfloor>\\<rfloor> =\n                           OclSelect_body P y\n                            (OclSelect\n                              X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) P)\n                            \\<tau>))\n 2. \\<And>\\<tau>.\n       (\\<delta> X->including\\<^sub>S\\<^sub>e\\<^sub>t(y)) \\<tau> \\<noteq>\n       true \\<tau> \\<Longrightarrow>\n       (if (\\<delta> X->including\\<^sub>S\\<^sub>e\\<^sub>t(y)) \\<tau> =\n           true \\<tau>\n        then if \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n          (X->including\\<^sub>S\\<^sub>e\\<^sub>t(y) \\<tau>)\\<rceil>\\<rceil>.\n                   P (\\<lambda>_. x) \\<tau> = invalid \\<tau>\n             then invalid \\<tau>\n             else Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                   \\<lfloor>\\<lfloor>{x\n\\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                       (X->including\\<^sub>S\\<^sub>e\\<^sub>t(y)\n                         \\<tau>)\\<rceil>\\<rceil>.\nP (\\<lambda>_. x) \\<tau> \\<noteq> false \\<tau>}\\<rfloor>\\<rfloor>\n        else invalid \\<tau>) =\n       OclSelect_body P y\n        (OclSelect X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) P) \\<tau>", "apply(simp add: P_cp[symmetric], subst (4) false_def, subst (4) bot_option_def, simp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>\\<tau>.\n       \\<lbrakk>(\\<delta> X and \\<upsilon> y) \\<tau> = true \\<tau>;\n        P y \\<tau> \\<noteq> \\<bottom>\\<rbrakk>\n       \\<Longrightarrow> (P y \\<tau> \\<noteq> false \\<tau> \\<longrightarrow>\n                          ((\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                      (X \\<tau>)\\<rceil>\\<rceil>.\n                               P (\\<lambda>_. x) \\<tau> =\n                               \\<bottom>) \\<longrightarrow>\n                           \\<bottom> =\n                           OclSelect_body P y\n                            (OclSelect\n                              X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) P)\n                            \\<tau>) \\<and>\n                          ((\\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                      (X \\<tau>)\\<rceil>\\<rceil>.\n                               P (\\<lambda>_. x) \\<tau> \\<noteq>\n                               \\<bottom>) \\<longrightarrow>\n                           Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                            \\<lfloor>\\<lfloor>insert (y \\<tau>)\n         {x \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                   (X \\<tau>)\\<rceil>\\<rceil>.\n          P (\\<lambda>_. x) \\<tau> \\<noteq>\n          false \\<tau>}\\<rfloor>\\<rfloor> =\n                           OclSelect_body P y\n                            (OclSelect\n                              X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) P)\n                            \\<tau>)) \\<and>\n                         (P y \\<tau> = false \\<tau> \\<longrightarrow>\n                          ((\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                      (X \\<tau>)\\<rceil>\\<rceil>.\n                               P (\\<lambda>_. x) \\<tau> =\n                               \\<bottom>) \\<longrightarrow>\n                           \\<bottom> =\n                           OclSelect_body P y\n                            (OclSelect\n                              X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) P)\n                            \\<tau>) \\<and>\n                          ((\\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                      (X \\<tau>)\\<rceil>\\<rceil>.\n                               P (\\<lambda>_. x) \\<tau> \\<noteq>\n                               \\<bottom>) \\<longrightarrow>\n                           Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                            \\<lfloor>\\<lfloor>{x\n         \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                (X \\<tau>)\\<rceil>\\<rceil>.\n         P (\\<lambda>_. x) \\<tau> \\<noteq> false \\<tau>}\\<rfloor>\\<rfloor> =\n                           OclSelect_body P y\n                            (OclSelect\n                              X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) P)\n                            \\<tau>))\n 2. \\<And>\\<tau>.\n       (\\<delta> X->including\\<^sub>S\\<^sub>e\\<^sub>t(y)) \\<tau> \\<noteq>\n       true \\<tau> \\<Longrightarrow>\n       (if (\\<delta> X->including\\<^sub>S\\<^sub>e\\<^sub>t(y)) \\<tau> =\n           true \\<tau>\n        then if \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n          (X->including\\<^sub>S\\<^sub>e\\<^sub>t(y) \\<tau>)\\<rceil>\\<rceil>.\n                   P (\\<lambda>_. x) \\<tau> = invalid \\<tau>\n             then invalid \\<tau>\n             else Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                   \\<lfloor>\\<lfloor>{x\n\\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                       (X->including\\<^sub>S\\<^sub>e\\<^sub>t(y)\n                         \\<tau>)\\<rceil>\\<rceil>.\nP (\\<lambda>_. x) \\<tau> \\<noteq> false \\<tau>}\\<rfloor>\\<rfloor>\n        else invalid \\<tau>) =\n       OclSelect_body P y\n        (OclSelect X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) P) \\<tau>", "apply(simp add: OclSelect_def[simplified inv_bot'] OclSelect_body_def StrictRefEq\\<^sub>B\\<^sub>o\\<^sub>o\\<^sub>l\\<^sub>e\\<^sub>a\\<^sub>n)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>\\<tau>.\n       \\<lbrakk>(\\<delta> X and \\<upsilon> y) \\<tau> = true \\<tau>;\n        P y \\<tau> \\<noteq> \\<bottom>\\<rbrakk>\n       \\<Longrightarrow> (P y \\<tau> \\<noteq> false \\<tau> \\<longrightarrow>\n                          ((\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                      (X \\<tau>)\\<rceil>\\<rceil>.\n                               P (\\<lambda>_. x) \\<tau> =\n                               \\<bottom>) \\<longrightarrow>\n                           \\<bottom> =\n                           (if (\\<lambda>\\<tau>.\n                                   if (\\<upsilon> P y) \\<tau> = true \\<tau>\n                                   then (P y \\<triangleq> false) \\<tau>\n                                   else invalid\n   \\<tau>) then (\\<lambda>\\<tau>.\n                    if (\\<delta> X and \\<upsilon> y) \\<tau> = true \\<tau>\n                    then if \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                      (X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y)\n                        \\<tau>)\\<rceil>\\<rceil>.\n                               P (\\<lambda>_. x) \\<tau> = \\<bottom>\n                         then \\<bottom>\n                         else Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                               \\<lfloor>\\<lfloor>{x\n            \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                   (X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y)\n                                     \\<tau>)\\<rceil>\\<rceil>.\n            P (\\<lambda>_. x) \\<tau> \\<noteq>\n            false \\<tau>}\\<rfloor>\\<rfloor>\n                    else \\<bottom>) else \\<lambda>\\<tau>.\n      if (\\<delta> X and \\<upsilon> y) \\<tau> = true \\<tau>\n      then if \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n        (X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) \\<tau>)\\<rceil>\\<rceil>.\n                 P (\\<lambda>_. x) \\<tau> = \\<bottom>\n           then \\<bottom>\n           else Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                 \\<lfloor>\\<lfloor>{x \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                       (X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y)\n                         \\<tau>)\\<rceil>\\<rceil>.\n                                    P (\\<lambda>_. x) \\<tau> \\<noteq>\n                                    false \\<tau>}\\<rfloor>\\<rfloor>\n      else \\<bottom>->including\\<^sub>S\\<^sub>e\\<^sub>t(y) endif)\n                            \\<tau>) \\<and>\n                          ((\\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                      (X \\<tau>)\\<rceil>\\<rceil>.\n                               P (\\<lambda>_. x) \\<tau> \\<noteq>\n                               \\<bottom>) \\<longrightarrow>\n                           Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                            \\<lfloor>\\<lfloor>insert (y \\<tau>)\n         {x \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                   (X \\<tau>)\\<rceil>\\<rceil>.\n          P (\\<lambda>_. x) \\<tau> \\<noteq>\n          false \\<tau>}\\<rfloor>\\<rfloor> =\n                           (if (\\<lambda>\\<tau>.\n                                   if (\\<upsilon> P y) \\<tau> = true \\<tau>\n                                   then (P y \\<triangleq> false) \\<tau>\n                                   else invalid\n   \\<tau>) then (\\<lambda>\\<tau>.\n                    if (\\<delta> X and \\<upsilon> y) \\<tau> = true \\<tau>\n                    then if \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                      (X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y)\n                        \\<tau>)\\<rceil>\\<rceil>.\n                               P (\\<lambda>_. x) \\<tau> = \\<bottom>\n                         then \\<bottom>\n                         else Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                               \\<lfloor>\\<lfloor>{x\n            \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                   (X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y)\n                                     \\<tau>)\\<rceil>\\<rceil>.\n            P (\\<lambda>_. x) \\<tau> \\<noteq>\n            false \\<tau>}\\<rfloor>\\<rfloor>\n                    else \\<bottom>) else \\<lambda>\\<tau>.\n      if (\\<delta> X and \\<upsilon> y) \\<tau> = true \\<tau>\n      then if \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n        (X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) \\<tau>)\\<rceil>\\<rceil>.\n                 P (\\<lambda>_. x) \\<tau> = \\<bottom>\n           then \\<bottom>\n           else Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                 \\<lfloor>\\<lfloor>{x \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                       (X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y)\n                         \\<tau>)\\<rceil>\\<rceil>.\n                                    P (\\<lambda>_. x) \\<tau> \\<noteq>\n                                    false \\<tau>}\\<rfloor>\\<rfloor>\n      else \\<bottom>->including\\<^sub>S\\<^sub>e\\<^sub>t(y) endif)\n                            \\<tau>)) \\<and>\n                         (P y \\<tau> = false \\<tau> \\<longrightarrow>\n                          ((\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                      (X \\<tau>)\\<rceil>\\<rceil>.\n                               P (\\<lambda>_. x) \\<tau> =\n                               \\<bottom>) \\<longrightarrow>\n                           \\<bottom> =\n                           (if (\\<lambda>\\<tau>.\n                                   if (\\<upsilon> P y) \\<tau> = true \\<tau>\n                                   then (P y \\<triangleq> false) \\<tau>\n                                   else invalid\n   \\<tau>) then (\\<lambda>\\<tau>.\n                    if (\\<delta> X and \\<upsilon> y) \\<tau> = true \\<tau>\n                    then if \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                      (X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y)\n                        \\<tau>)\\<rceil>\\<rceil>.\n                               P (\\<lambda>_. x) \\<tau> = \\<bottom>\n                         then \\<bottom>\n                         else Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                               \\<lfloor>\\<lfloor>{x\n            \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                   (X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y)\n                                     \\<tau>)\\<rceil>\\<rceil>.\n            P (\\<lambda>_. x) \\<tau> \\<noteq>\n            false \\<tau>}\\<rfloor>\\<rfloor>\n                    else \\<bottom>) else \\<lambda>\\<tau>.\n      if (\\<delta> X and \\<upsilon> y) \\<tau> = true \\<tau>\n      then if \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n        (X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) \\<tau>)\\<rceil>\\<rceil>.\n                 P (\\<lambda>_. x) \\<tau> = \\<bottom>\n           then \\<bottom>\n           else Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                 \\<lfloor>\\<lfloor>{x \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                       (X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y)\n                         \\<tau>)\\<rceil>\\<rceil>.\n                                    P (\\<lambda>_. x) \\<tau> \\<noteq>\n                                    false \\<tau>}\\<rfloor>\\<rfloor>\n      else \\<bottom>->including\\<^sub>S\\<^sub>e\\<^sub>t(y) endif)\n                            \\<tau>) \\<and>\n                          ((\\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                      (X \\<tau>)\\<rceil>\\<rceil>.\n                               P (\\<lambda>_. x) \\<tau> \\<noteq>\n                               \\<bottom>) \\<longrightarrow>\n                           Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                            \\<lfloor>\\<lfloor>{x\n         \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                (X \\<tau>)\\<rceil>\\<rceil>.\n         P (\\<lambda>_. x) \\<tau> \\<noteq> false \\<tau>}\\<rfloor>\\<rfloor> =\n                           (if (\\<lambda>\\<tau>.\n                                   if (\\<upsilon> P y) \\<tau> = true \\<tau>\n                                   then (P y \\<triangleq> false) \\<tau>\n                                   else invalid\n   \\<tau>) then (\\<lambda>\\<tau>.\n                    if (\\<delta> X and \\<upsilon> y) \\<tau> = true \\<tau>\n                    then if \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                      (X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y)\n                        \\<tau>)\\<rceil>\\<rceil>.\n                               P (\\<lambda>_. x) \\<tau> = \\<bottom>\n                         then \\<bottom>\n                         else Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                               \\<lfloor>\\<lfloor>{x\n            \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                   (X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y)\n                                     \\<tau>)\\<rceil>\\<rceil>.\n            P (\\<lambda>_. x) \\<tau> \\<noteq>\n            false \\<tau>}\\<rfloor>\\<rfloor>\n                    else \\<bottom>) else \\<lambda>\\<tau>.\n      if (\\<delta> X and \\<upsilon> y) \\<tau> = true \\<tau>\n      then if \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n        (X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) \\<tau>)\\<rceil>\\<rceil>.\n                 P (\\<lambda>_. x) \\<tau> = \\<bottom>\n           then \\<bottom>\n           else Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                 \\<lfloor>\\<lfloor>{x \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                       (X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y)\n                         \\<tau>)\\<rceil>\\<rceil>.\n                                    P (\\<lambda>_. x) \\<tau> \\<noteq>\n                                    false \\<tau>}\\<rfloor>\\<rfloor>\n      else \\<bottom>->including\\<^sub>S\\<^sub>e\\<^sub>t(y) endif)\n                            \\<tau>))\n 2. \\<And>\\<tau>.\n       (\\<delta> X->including\\<^sub>S\\<^sub>e\\<^sub>t(y)) \\<tau> \\<noteq>\n       true \\<tau> \\<Longrightarrow>\n       (if (\\<delta> X->including\\<^sub>S\\<^sub>e\\<^sub>t(y)) \\<tau> =\n           true \\<tau>\n        then if \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n          (X->including\\<^sub>S\\<^sub>e\\<^sub>t(y) \\<tau>)\\<rceil>\\<rceil>.\n                   P (\\<lambda>_. x) \\<tau> = invalid \\<tau>\n             then invalid \\<tau>\n             else Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                   \\<lfloor>\\<lfloor>{x\n\\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                       (X->including\\<^sub>S\\<^sub>e\\<^sub>t(y)\n                         \\<tau>)\\<rceil>\\<rceil>.\nP (\\<lambda>_. x) \\<tau> \\<noteq> false \\<tau>}\\<rfloor>\\<rfloor>\n        else invalid \\<tau>) =\n       OclSelect_body P y\n        (OclSelect X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) P) \\<tau>", "apply(subst (1 2 3 4) cp_OclIf,\n         subst (1 2 3 4) foundation18'[THEN iffD2, simplified OclValid_def],\n         simp,\n         simp only: cp_OclIf[symmetric] refl if_True)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>\\<tau>.\n       \\<lbrakk>(\\<delta> X and \\<upsilon> y) \\<tau> = true \\<tau>;\n        P y \\<tau> \\<noteq> \\<bottom>\\<rbrakk>\n       \\<Longrightarrow> (P y \\<tau> \\<noteq> false \\<tau> \\<longrightarrow>\n                          ((\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                      (X \\<tau>)\\<rceil>\\<rceil>.\n                               P (\\<lambda>_. x) \\<tau> =\n                               \\<bottom>) \\<longrightarrow>\n                           \\<bottom> =\n                           (if (\\<lambda>_.\n                                   (P y \\<triangleq> false)\n                                    \\<tau>) then (\\<lambda>_.\n               if \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n            (X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y)\n              \\<tau>)\\<rceil>\\<rceil>.\n                     P (\\<lambda>_. x) \\<tau> = \\<bottom>\n               then \\<bottom>\n               else Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                     \\<lfloor>\\<lfloor>{x\n  \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                         (X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y)\n                           \\<tau>)\\<rceil>\\<rceil>.\n  P (\\<lambda>_. x) \\<tau> \\<noteq>\n  false\n   \\<tau>}\\<rfloor>\\<rfloor>) else (\\<lambda>_.\n \\<lambda>\\<tau>.\n    if (\\<delta> X and \\<upsilon> y) \\<tau> = true \\<tau>\n    then if \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n      (X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) \\<tau>)\\<rceil>\\<rceil>.\n               P (\\<lambda>_. x) \\<tau> = \\<bottom>\n         then \\<bottom>\n         else Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n               \\<lfloor>\\<lfloor>{x \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                     (X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y)\n                       \\<tau>)\\<rceil>\\<rceil>.\n                                  P (\\<lambda>_. x) \\<tau> \\<noteq>\n                                  false \\<tau>}\\<rfloor>\\<rfloor>\n    else \\<bottom>->including\\<^sub>S\\<^sub>e\\<^sub>t(y)\n  \\<tau>) endif)\n                            \\<tau>) \\<and>\n                          ((\\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                      (X \\<tau>)\\<rceil>\\<rceil>.\n                               P (\\<lambda>_. x) \\<tau> \\<noteq>\n                               \\<bottom>) \\<longrightarrow>\n                           Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                            \\<lfloor>\\<lfloor>insert (y \\<tau>)\n         {x \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                   (X \\<tau>)\\<rceil>\\<rceil>.\n          P (\\<lambda>_. x) \\<tau> \\<noteq>\n          false \\<tau>}\\<rfloor>\\<rfloor> =\n                           (if (\\<lambda>_.\n                                   (P y \\<triangleq> false)\n                                    \\<tau>) then (\\<lambda>_.\n               if \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n            (X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y)\n              \\<tau>)\\<rceil>\\<rceil>.\n                     P (\\<lambda>_. x) \\<tau> = \\<bottom>\n               then \\<bottom>\n               else Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                     \\<lfloor>\\<lfloor>{x\n  \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                         (X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y)\n                           \\<tau>)\\<rceil>\\<rceil>.\n  P (\\<lambda>_. x) \\<tau> \\<noteq>\n  false\n   \\<tau>}\\<rfloor>\\<rfloor>) else (\\<lambda>_.\n \\<lambda>\\<tau>.\n    if (\\<delta> X and \\<upsilon> y) \\<tau> = true \\<tau>\n    then if \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n      (X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) \\<tau>)\\<rceil>\\<rceil>.\n               P (\\<lambda>_. x) \\<tau> = \\<bottom>\n         then \\<bottom>\n         else Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n               \\<lfloor>\\<lfloor>{x \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                     (X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y)\n                       \\<tau>)\\<rceil>\\<rceil>.\n                                  P (\\<lambda>_. x) \\<tau> \\<noteq>\n                                  false \\<tau>}\\<rfloor>\\<rfloor>\n    else \\<bottom>->including\\<^sub>S\\<^sub>e\\<^sub>t(y)\n  \\<tau>) endif)\n                            \\<tau>)) \\<and>\n                         (P y \\<tau> = false \\<tau> \\<longrightarrow>\n                          ((\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                      (X \\<tau>)\\<rceil>\\<rceil>.\n                               P (\\<lambda>_. x) \\<tau> =\n                               \\<bottom>) \\<longrightarrow>\n                           \\<bottom> =\n                           (if (\\<lambda>_.\n                                   (P y \\<triangleq> false)\n                                    \\<tau>) then (\\<lambda>_.\n               if \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n            (X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y)\n              \\<tau>)\\<rceil>\\<rceil>.\n                     P (\\<lambda>_. x) \\<tau> = \\<bottom>\n               then \\<bottom>\n               else Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                     \\<lfloor>\\<lfloor>{x\n  \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                         (X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y)\n                           \\<tau>)\\<rceil>\\<rceil>.\n  P (\\<lambda>_. x) \\<tau> \\<noteq>\n  false\n   \\<tau>}\\<rfloor>\\<rfloor>) else (\\<lambda>_.\n \\<lambda>\\<tau>.\n    if (\\<delta> X and \\<upsilon> y) \\<tau> = true \\<tau>\n    then if \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n      (X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) \\<tau>)\\<rceil>\\<rceil>.\n               P (\\<lambda>_. x) \\<tau> = \\<bottom>\n         then \\<bottom>\n         else Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n               \\<lfloor>\\<lfloor>{x \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                     (X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y)\n                       \\<tau>)\\<rceil>\\<rceil>.\n                                  P (\\<lambda>_. x) \\<tau> \\<noteq>\n                                  false \\<tau>}\\<rfloor>\\<rfloor>\n    else \\<bottom>->including\\<^sub>S\\<^sub>e\\<^sub>t(y)\n  \\<tau>) endif)\n                            \\<tau>) \\<and>\n                          ((\\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                      (X \\<tau>)\\<rceil>\\<rceil>.\n                               P (\\<lambda>_. x) \\<tau> \\<noteq>\n                               \\<bottom>) \\<longrightarrow>\n                           Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                            \\<lfloor>\\<lfloor>{x\n         \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                (X \\<tau>)\\<rceil>\\<rceil>.\n         P (\\<lambda>_. x) \\<tau> \\<noteq> false \\<tau>}\\<rfloor>\\<rfloor> =\n                           (if (\\<lambda>_.\n                                   (P y \\<triangleq> false)\n                                    \\<tau>) then (\\<lambda>_.\n               if \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n            (X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y)\n              \\<tau>)\\<rceil>\\<rceil>.\n                     P (\\<lambda>_. x) \\<tau> = \\<bottom>\n               then \\<bottom>\n               else Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                     \\<lfloor>\\<lfloor>{x\n  \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                         (X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y)\n                           \\<tau>)\\<rceil>\\<rceil>.\n  P (\\<lambda>_. x) \\<tau> \\<noteq>\n  false\n   \\<tau>}\\<rfloor>\\<rfloor>) else (\\<lambda>_.\n \\<lambda>\\<tau>.\n    if (\\<delta> X and \\<upsilon> y) \\<tau> = true \\<tau>\n    then if \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n      (X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) \\<tau>)\\<rceil>\\<rceil>.\n               P (\\<lambda>_. x) \\<tau> = \\<bottom>\n         then \\<bottom>\n         else Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n               \\<lfloor>\\<lfloor>{x \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                     (X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y)\n                       \\<tau>)\\<rceil>\\<rceil>.\n                                  P (\\<lambda>_. x) \\<tau> \\<noteq>\n                                  false \\<tau>}\\<rfloor>\\<rfloor>\n    else \\<bottom>->including\\<^sub>S\\<^sub>e\\<^sub>t(y)\n  \\<tau>) endif)\n                            \\<tau>))\n 2. \\<And>\\<tau>.\n       (\\<delta> X->including\\<^sub>S\\<^sub>e\\<^sub>t(y)) \\<tau> \\<noteq>\n       true \\<tau> \\<Longrightarrow>\n       (if (\\<delta> X->including\\<^sub>S\\<^sub>e\\<^sub>t(y)) \\<tau> =\n           true \\<tau>\n        then if \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n          (X->including\\<^sub>S\\<^sub>e\\<^sub>t(y) \\<tau>)\\<rceil>\\<rceil>.\n                   P (\\<lambda>_. x) \\<tau> = invalid \\<tau>\n             then invalid \\<tau>\n             else Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                   \\<lfloor>\\<lfloor>{x\n\\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                       (X->including\\<^sub>S\\<^sub>e\\<^sub>t(y)\n                         \\<tau>)\\<rceil>\\<rceil>.\nP (\\<lambda>_. x) \\<tau> \\<noteq> false \\<tau>}\\<rfloor>\\<rfloor>\n        else invalid \\<tau>) =\n       OclSelect_body P y\n        (OclSelect X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) P) \\<tau>", "apply(subst (1 2) OclIncluding.cp0, rule conj_split2, simp add: cp_OclIf[symmetric])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>\\<tau>.\n       \\<lbrakk>(\\<delta> X and \\<upsilon> y) \\<tau> = true \\<tau>;\n        P y \\<tau> \\<noteq> \\<bottom>\\<rbrakk>\n       \\<Longrightarrow> ((\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                     (X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y)\n                       \\<tau>)\\<rceil>\\<rceil>.\n                              P (\\<lambda>_. x) \\<tau> =\n                              \\<bottom>) \\<longrightarrow>\n                          ((P y \\<triangleq> false) \\<tau> =\n                           false \\<tau> \\<longrightarrow>\n                           ((\\<exists>x\n\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                      (X \\<tau>)\\<rceil>\\<rceil>.\n                                P (\\<lambda>_. x) \\<tau> =\n                                \\<bottom>) \\<longrightarrow>\n                            \\<bottom> =\n                            (if (\\<lambda>_.\n                                    false\n                                     \\<tau>) then (\\<lambda>_.\n                \\<bottom>) else (\\<lambda>_.\n                                    \\<lambda>_.\n \\<bottom>->including\\<^sub>S\\<^sub>e\\<^sub>t(\\<lambda>_. y \\<tau>)\n                                     \\<tau>) endif)\n                             \\<tau>) \\<and>\n                           ((\\<forall>x\n\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                      (X \\<tau>)\\<rceil>\\<rceil>.\n                                P (\\<lambda>_. x) \\<tau> \\<noteq>\n                                \\<bottom>) \\<longrightarrow>\n                            Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                             \\<lfloor>\\<lfloor>insert (y \\<tau>)\n          {x \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                    (X \\<tau>)\\<rceil>\\<rceil>.\n           P (\\<lambda>_. x) \\<tau> \\<noteq>\n           false \\<tau>}\\<rfloor>\\<rfloor> =\n                            (if (\\<lambda>_.\n                                    false\n                                     \\<tau>) then (\\<lambda>_.\n                \\<bottom>) else (\\<lambda>_.\n                                    \\<lambda>_.\n \\<bottom>->including\\<^sub>S\\<^sub>e\\<^sub>t(\\<lambda>_. y \\<tau>)\n                                     \\<tau>) endif)\n                             \\<tau>)) \\<and>\n                          ((P y \\<triangleq> false) \\<tau> =\n                           true \\<tau> \\<longrightarrow>\n                           ((\\<exists>x\n\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                      (X \\<tau>)\\<rceil>\\<rceil>.\n                                P (\\<lambda>_. x) \\<tau> =\n                                \\<bottom>) \\<longrightarrow>\n                            \\<bottom> =\n                            (if (\\<lambda>_.\n                                    true\n                                     \\<tau>) then (\\<lambda>_.\n                \\<bottom>) else (\\<lambda>_.\n                                    \\<lambda>\\<tau>.\n if (\\<delta> X and \\<upsilon> y) \\<tau> = true \\<tau>\n then if \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n   (X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) \\<tau>)\\<rceil>\\<rceil>.\n            P (\\<lambda>_. x) \\<tau> = \\<bottom>\n      then \\<bottom>\n      else Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n            \\<lfloor>\\<lfloor>{x \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                  (X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y)\n                    \\<tau>)\\<rceil>\\<rceil>.\n                               P (\\<lambda>_. x) \\<tau> \\<noteq>\n                               false \\<tau>}\\<rfloor>\\<rfloor>\n else \\<bottom>->including\\<^sub>S\\<^sub>e\\<^sub>t(y)\n                                     \\<tau>) endif)\n                             \\<tau>) \\<and>\n                           ((\\<forall>x\n\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                      (X \\<tau>)\\<rceil>\\<rceil>.\n                                P (\\<lambda>_. x) \\<tau> \\<noteq>\n                                \\<bottom>) \\<longrightarrow>\n                            Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                             \\<lfloor>\\<lfloor>{x\n          \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                 (X \\<tau>)\\<rceil>\\<rceil>.\n          P (\\<lambda>_. x) \\<tau> \\<noteq>\n          false \\<tau>}\\<rfloor>\\<rfloor> =\n                            (if (\\<lambda>_.\n                                    true\n                                     \\<tau>) then (\\<lambda>_.\n                \\<bottom>) else (\\<lambda>_.\n                                    \\<lambda>\\<tau>.\n if (\\<delta> X and \\<upsilon> y) \\<tau> = true \\<tau>\n then if \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n   (X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) \\<tau>)\\<rceil>\\<rceil>.\n            P (\\<lambda>_. x) \\<tau> = \\<bottom>\n      then \\<bottom>\n      else Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n            \\<lfloor>\\<lfloor>{x \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                  (X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y)\n                    \\<tau>)\\<rceil>\\<rceil>.\n                               P (\\<lambda>_. x) \\<tau> \\<noteq>\n                               false \\<tau>}\\<rfloor>\\<rfloor>\n else \\<bottom>->including\\<^sub>S\\<^sub>e\\<^sub>t(y)\n                                     \\<tau>) endif)\n                             \\<tau>))) \\<and>\n                         ((\\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                     (X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y)\n                       \\<tau>)\\<rceil>\\<rceil>.\n                              P (\\<lambda>_. x) \\<tau> \\<noteq>\n                              \\<bottom>) \\<longrightarrow>\n                          ((P y \\<triangleq> false) \\<tau> =\n                           false \\<tau> \\<longrightarrow>\n                           ((\\<exists>x\n\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                      (X \\<tau>)\\<rceil>\\<rceil>.\n                                P (\\<lambda>_. x) \\<tau> =\n                                \\<bottom>) \\<longrightarrow>\n                            \\<bottom> =\n                            (if (\\<lambda>_.\n                                    false\n                                     \\<tau>) then (\\<lambda>_.\n                Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                 \\<lfloor>\\<lfloor>{x \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                       (X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y)\n                         \\<tau>)\\<rceil>\\<rceil>.\n                                    P (\\<lambda>_. x) \\<tau> \\<noteq>\n                                    false\n                                     \\<tau>}\\<rfloor>\\<rfloor>) else (\\<lambda>_.\n                                   \\<lambda>_.\nAbs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n \\<lfloor>\\<lfloor>{x \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n       (X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) \\<tau>)\\<rceil>\\<rceil>.\n                    P (\\<lambda>_. x) \\<tau> \\<noteq>\n                    false\n                     \\<tau>}\\<rfloor>\\<rfloor>->including\\<^sub>S\\<^sub>e\\<^sub>t(\\<lambda>_.\n         y \\<tau>)\n                                    \\<tau>) endif)\n                             \\<tau>) \\<and>\n                           ((\\<forall>x\n\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                      (X \\<tau>)\\<rceil>\\<rceil>.\n                                P (\\<lambda>_. x) \\<tau> \\<noteq>\n                                \\<bottom>) \\<longrightarrow>\n                            Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                             \\<lfloor>\\<lfloor>insert (y \\<tau>)\n          {x \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                    (X \\<tau>)\\<rceil>\\<rceil>.\n           P (\\<lambda>_. x) \\<tau> \\<noteq>\n           false \\<tau>}\\<rfloor>\\<rfloor> =\n                            (if (\\<lambda>_.\n                                    false\n                                     \\<tau>) then (\\<lambda>_.\n                Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                 \\<lfloor>\\<lfloor>{x \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                       (X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y)\n                         \\<tau>)\\<rceil>\\<rceil>.\n                                    P (\\<lambda>_. x) \\<tau> \\<noteq>\n                                    false\n                                     \\<tau>}\\<rfloor>\\<rfloor>) else (\\<lambda>_.\n                                   \\<lambda>_.\nAbs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n \\<lfloor>\\<lfloor>{x \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n       (X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) \\<tau>)\\<rceil>\\<rceil>.\n                    P (\\<lambda>_. x) \\<tau> \\<noteq>\n                    false\n                     \\<tau>}\\<rfloor>\\<rfloor>->including\\<^sub>S\\<^sub>e\\<^sub>t(\\<lambda>_.\n         y \\<tau>)\n                                    \\<tau>) endif)\n                             \\<tau>)) \\<and>\n                          ((P y \\<triangleq> false) \\<tau> =\n                           true \\<tau> \\<longrightarrow>\n                           ((\\<exists>x\n\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                      (X \\<tau>)\\<rceil>\\<rceil>.\n                                P (\\<lambda>_. x) \\<tau> =\n                                \\<bottom>) \\<longrightarrow>\n                            \\<bottom> =\n                            (if (\\<lambda>_.\n                                    true\n                                     \\<tau>) then (\\<lambda>_.\n                Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                 \\<lfloor>\\<lfloor>{x \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                       (X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y)\n                         \\<tau>)\\<rceil>\\<rceil>.\n                                    P (\\<lambda>_. x) \\<tau> \\<noteq>\n                                    false\n                                     \\<tau>}\\<rfloor>\\<rfloor>) else (\\<lambda>_.\n                                   \\<lambda>\\<tau>.\nif (\\<delta> X and \\<upsilon> y) \\<tau> = true \\<tau>\nthen if \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n  (X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) \\<tau>)\\<rceil>\\<rceil>.\n           P (\\<lambda>_. x) \\<tau> = \\<bottom>\n     then \\<bottom>\n     else Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n           \\<lfloor>\\<lfloor>{x \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                 (X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y)\n                   \\<tau>)\\<rceil>\\<rceil>.\n                              P (\\<lambda>_. x) \\<tau> \\<noteq>\n                              false \\<tau>}\\<rfloor>\\<rfloor>\nelse \\<bottom>->including\\<^sub>S\\<^sub>e\\<^sub>t(y)\n                                    \\<tau>) endif)\n                             \\<tau>) \\<and>\n                           ((\\<forall>x\n\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                      (X \\<tau>)\\<rceil>\\<rceil>.\n                                P (\\<lambda>_. x) \\<tau> \\<noteq>\n                                \\<bottom>) \\<longrightarrow>\n                            Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                             \\<lfloor>\\<lfloor>{x\n          \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                 (X \\<tau>)\\<rceil>\\<rceil>.\n          P (\\<lambda>_. x) \\<tau> \\<noteq>\n          false \\<tau>}\\<rfloor>\\<rfloor> =\n                            (if (\\<lambda>_.\n                                    true\n                                     \\<tau>) then (\\<lambda>_.\n                Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                 \\<lfloor>\\<lfloor>{x \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                       (X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y)\n                         \\<tau>)\\<rceil>\\<rceil>.\n                                    P (\\<lambda>_. x) \\<tau> \\<noteq>\n                                    false\n                                     \\<tau>}\\<rfloor>\\<rfloor>) else (\\<lambda>_.\n                                   \\<lambda>\\<tau>.\nif (\\<delta> X and \\<upsilon> y) \\<tau> = true \\<tau>\nthen if \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n  (X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) \\<tau>)\\<rceil>\\<rceil>.\n           P (\\<lambda>_. x) \\<tau> = \\<bottom>\n     then \\<bottom>\n     else Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n           \\<lfloor>\\<lfloor>{x \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                 (X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y)\n                   \\<tau>)\\<rceil>\\<rceil>.\n                              P (\\<lambda>_. x) \\<tau> \\<noteq>\n                              false \\<tau>}\\<rfloor>\\<rfloor>\nelse \\<bottom>->including\\<^sub>S\\<^sub>e\\<^sub>t(y)\n                                    \\<tau>) endif)\n                             \\<tau>)))\n 2. \\<And>\\<tau>.\n       (\\<delta> X->including\\<^sub>S\\<^sub>e\\<^sub>t(y)) \\<tau> \\<noteq>\n       true \\<tau> \\<Longrightarrow>\n       (if (\\<delta> X->including\\<^sub>S\\<^sub>e\\<^sub>t(y)) \\<tau> =\n           true \\<tau>\n        then if \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n          (X->including\\<^sub>S\\<^sub>e\\<^sub>t(y) \\<tau>)\\<rceil>\\<rceil>.\n                   P (\\<lambda>_. x) \\<tau> = invalid \\<tau>\n             then invalid \\<tau>\n             else Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                   \\<lfloor>\\<lfloor>{x\n\\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                       (X->including\\<^sub>S\\<^sub>e\\<^sub>t(y)\n                         \\<tau>)\\<rceil>\\<rceil>.\nP (\\<lambda>_. x) \\<tau> \\<noteq> false \\<tau>}\\<rfloor>\\<rfloor>\n        else invalid \\<tau>) =\n       OclSelect_body P y\n        (OclSelect X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) P) \\<tau>", "apply(subst (1 2 3 4 5 6 7 8) cp_OclIf[symmetric], simp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>\\<tau>.\n       \\<lbrakk>(\\<delta> X and \\<upsilon> y) \\<tau> = true \\<tau>;\n        P y \\<tau> \\<noteq> \\<bottom>\\<rbrakk>\n       \\<Longrightarrow> ((\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                     (X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y)\n                       \\<tau>)\\<rceil>\\<rceil>.\n                              P (\\<lambda>_. x) \\<tau> =\n                              \\<bottom>) \\<longrightarrow>\n                          ((P y \\<triangleq> false) \\<tau> =\n                           false \\<tau> \\<longrightarrow>\n                           ((\\<exists>x\n\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                      (X \\<tau>)\\<rceil>\\<rceil>.\n                                P (\\<lambda>_. x) \\<tau> =\n                                \\<bottom>) \\<longrightarrow>\n                            \\<bottom> =\n                            \\<lambda>_.\n                               \\<bottom>->including\\<^sub>S\\<^sub>e\\<^sub>t(\\<lambda>_.\n   y \\<tau>)\n                             \\<tau>) \\<and>\n                           ((\\<forall>x\n\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                      (X \\<tau>)\\<rceil>\\<rceil>.\n                                P (\\<lambda>_. x) \\<tau> \\<noteq>\n                                \\<bottom>) \\<longrightarrow>\n                            Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                             \\<lfloor>\\<lfloor>insert (y \\<tau>)\n          {x \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                    (X \\<tau>)\\<rceil>\\<rceil>.\n           P (\\<lambda>_. x) \\<tau> \\<noteq>\n           false \\<tau>}\\<rfloor>\\<rfloor> =\n                            \\<lambda>_.\n                               \\<bottom>->including\\<^sub>S\\<^sub>e\\<^sub>t(\\<lambda>_.\n   y \\<tau>)\n                             \\<tau>)) \\<and>\n                          ((P y \\<triangleq> false) \\<tau> =\n                           true \\<tau> \\<longrightarrow>\n                           (\\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                      (X \\<tau>)\\<rceil>\\<rceil>.\n                               P (\\<lambda>_. x) \\<tau> \\<noteq>\n                               \\<bottom>) \\<longrightarrow>\n                           Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                            \\<lfloor>\\<lfloor>{x\n         \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                (X \\<tau>)\\<rceil>\\<rceil>.\n         P (\\<lambda>_. x) \\<tau> \\<noteq> false \\<tau>}\\<rfloor>\\<rfloor> =\n                           \\<bottom>)) \\<and>\n                         ((\\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                     (X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y)\n                       \\<tau>)\\<rceil>\\<rceil>.\n                              P (\\<lambda>_. x) \\<tau> \\<noteq>\n                              \\<bottom>) \\<longrightarrow>\n                          ((P y \\<triangleq> false) \\<tau> =\n                           false \\<tau> \\<longrightarrow>\n                           ((\\<exists>x\n\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                      (X \\<tau>)\\<rceil>\\<rceil>.\n                                P (\\<lambda>_. x) \\<tau> =\n                                \\<bottom>) \\<longrightarrow>\n                            \\<bottom> =\n                            \\<lambda>_.\n                               Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                \\<lfloor>\\<lfloor>{x\n             \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                    (X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y)\n\\<tau>)\\<rceil>\\<rceil>.\n             P (\\<lambda>_. x) \\<tau> \\<noteq>\n             false\n              \\<tau>}\\<rfloor>\\<rfloor>->including\\<^sub>S\\<^sub>e\\<^sub>t(\\<lambda>_.\n  y \\<tau>)\n                             \\<tau>) \\<and>\n                           ((\\<forall>x\n\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                      (X \\<tau>)\\<rceil>\\<rceil>.\n                                P (\\<lambda>_. x) \\<tau> \\<noteq>\n                                \\<bottom>) \\<longrightarrow>\n                            Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                             \\<lfloor>\\<lfloor>insert (y \\<tau>)\n          {x \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                    (X \\<tau>)\\<rceil>\\<rceil>.\n           P (\\<lambda>_. x) \\<tau> \\<noteq>\n           false \\<tau>}\\<rfloor>\\<rfloor> =\n                            \\<lambda>_.\n                               Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                \\<lfloor>\\<lfloor>{x\n             \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                    (X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y)\n\\<tau>)\\<rceil>\\<rceil>.\n             P (\\<lambda>_. x) \\<tau> \\<noteq>\n             false\n              \\<tau>}\\<rfloor>\\<rfloor>->including\\<^sub>S\\<^sub>e\\<^sub>t(\\<lambda>_.\n  y \\<tau>)\n                             \\<tau>)) \\<and>\n                          ((P y \\<triangleq> false) \\<tau> =\n                           true \\<tau> \\<longrightarrow>\n                           ((\\<exists>x\n\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                      (X \\<tau>)\\<rceil>\\<rceil>.\n                                P (\\<lambda>_. x) \\<tau> =\n                                \\<bottom>) \\<longrightarrow>\n                            \\<bottom> =\n                            Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                             \\<lfloor>\\<lfloor>{x\n          \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                 (X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y)\n                                   \\<tau>)\\<rceil>\\<rceil>.\n          P (\\<lambda>_. x) \\<tau> \\<noteq>\n          false \\<tau>}\\<rfloor>\\<rfloor>) \\<and>\n                           ((\\<forall>x\n\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                      (X \\<tau>)\\<rceil>\\<rceil>.\n                                P (\\<lambda>_. x) \\<tau> \\<noteq>\n                                \\<bottom>) \\<longrightarrow>\n                            Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                             \\<lfloor>\\<lfloor>{x\n          \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                 (X \\<tau>)\\<rceil>\\<rceil>.\n          P (\\<lambda>_. x) \\<tau> \\<noteq>\n          false \\<tau>}\\<rfloor>\\<rfloor> =\n                            Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                             \\<lfloor>\\<lfloor>{x\n          \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                 (X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y)\n                                   \\<tau>)\\<rceil>\\<rceil>.\n          P (\\<lambda>_. x) \\<tau> \\<noteq>\n          false \\<tau>}\\<rfloor>\\<rfloor>)))\n 2. \\<And>\\<tau>.\n       (\\<delta> X->including\\<^sub>S\\<^sub>e\\<^sub>t(y)) \\<tau> \\<noteq>\n       true \\<tau> \\<Longrightarrow>\n       (if (\\<delta> X->including\\<^sub>S\\<^sub>e\\<^sub>t(y)) \\<tau> =\n           true \\<tau>\n        then if \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n          (X->including\\<^sub>S\\<^sub>e\\<^sub>t(y) \\<tau>)\\<rceil>\\<rceil>.\n                   P (\\<lambda>_. x) \\<tau> = invalid \\<tau>\n             then invalid \\<tau>\n             else Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                   \\<lfloor>\\<lfloor>{x\n\\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                       (X->including\\<^sub>S\\<^sub>e\\<^sub>t(y)\n                         \\<tau>)\\<rceil>\\<rceil>.\nP (\\<lambda>_. x) \\<tau> \\<noteq> false \\<tau>}\\<rfloor>\\<rfloor>\n        else invalid \\<tau>) =\n       OclSelect_body P y\n        (OclSelect X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) P) \\<tau>", "apply(( subst ex_excluding1[symmetric]\n         | subst al_excluding1[symmetric] ),\n         metis OclValid_def foundation5,\n         metis OclValid_def foundation5,\n         simp add: P_cp[symmetric] bot_fun_def)+"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>\\<tau>.\n       \\<lbrakk>(\\<delta> X and \\<upsilon> y) \\<tau> = true \\<tau>;\n        P y \\<tau> \\<noteq> \\<bottom>\\<rbrakk>\n       \\<Longrightarrow> ((\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                     (X \\<tau>)\\<rceil>\\<rceil>.\n                              P (\\<lambda>_. x) \\<tau> =\n                              \\<bottom>) \\<longrightarrow>\n                          ((P y \\<triangleq> false) \\<tau> =\n                           false \\<tau> \\<longrightarrow>\n                           ((\\<exists>x\n\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                      (X \\<tau>)\\<rceil>\\<rceil>.\n                                P (\\<lambda>_. x) \\<tau> =\n                                \\<bottom>) \\<longrightarrow>\n                            \\<bottom> =\n                            \\<lambda>_.\n                               \\<bottom>->including\\<^sub>S\\<^sub>e\\<^sub>t(\\<lambda>_.\n   y \\<tau>)\n                             \\<tau>) \\<and>\n                           ((\\<forall>x\n\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                      (X \\<tau>)\\<rceil>\\<rceil>.\n                                P (\\<lambda>_. x) \\<tau> \\<noteq>\n                                \\<bottom>) \\<longrightarrow>\n                            Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                             \\<lfloor>\\<lfloor>insert (y \\<tau>)\n          {x \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                    (X \\<tau>)\\<rceil>\\<rceil>.\n           P (\\<lambda>_. x) \\<tau> \\<noteq>\n           false \\<tau>}\\<rfloor>\\<rfloor> =\n                            \\<lambda>_.\n                               \\<bottom>->including\\<^sub>S\\<^sub>e\\<^sub>t(\\<lambda>_.\n   y \\<tau>)\n                             \\<tau>)) \\<and>\n                          ((P y \\<triangleq> false) \\<tau> =\n                           true \\<tau> \\<longrightarrow>\n                           (\\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                      (X \\<tau>)\\<rceil>\\<rceil>.\n                               P (\\<lambda>_. x) \\<tau> \\<noteq>\n                               \\<bottom>) \\<longrightarrow>\n                           Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                            \\<lfloor>\\<lfloor>{x\n         \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                (X \\<tau>)\\<rceil>\\<rceil>.\n         P (\\<lambda>_. x) \\<tau> \\<noteq> false \\<tau>}\\<rfloor>\\<rfloor> =\n                           \\<bottom>)) \\<and>\n                         ((\\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                     (X \\<tau>)\\<rceil>\\<rceil>.\n                              P (\\<lambda>_. x) \\<tau> \\<noteq>\n                              \\<bottom>) \\<longrightarrow>\n                          ((P y \\<triangleq> false) \\<tau> =\n                           false \\<tau> \\<longrightarrow>\n                           ((\\<exists>x\n\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                      (X \\<tau>)\\<rceil>\\<rceil>.\n                                P (\\<lambda>_. x) \\<tau> =\n                                \\<bottom>) \\<longrightarrow>\n                            \\<bottom> =\n                            \\<lambda>_.\n                               Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                \\<lfloor>\\<lfloor>{x\n             \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                    (X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y)\n\\<tau>)\\<rceil>\\<rceil>.\n             P (\\<lambda>_. x) \\<tau> \\<noteq>\n             false\n              \\<tau>}\\<rfloor>\\<rfloor>->including\\<^sub>S\\<^sub>e\\<^sub>t(\\<lambda>_.\n  y \\<tau>)\n                             \\<tau>) \\<and>\n                           ((\\<forall>x\n\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                      (X \\<tau>)\\<rceil>\\<rceil>.\n                                P (\\<lambda>_. x) \\<tau> \\<noteq>\n                                \\<bottom>) \\<longrightarrow>\n                            Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                             \\<lfloor>\\<lfloor>insert (y \\<tau>)\n          {x \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                    (X \\<tau>)\\<rceil>\\<rceil>.\n           P (\\<lambda>_. x) \\<tau> \\<noteq>\n           false \\<tau>}\\<rfloor>\\<rfloor> =\n                            \\<lambda>_.\n                               Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                \\<lfloor>\\<lfloor>{x\n             \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                    (X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y)\n\\<tau>)\\<rceil>\\<rceil>.\n             P (\\<lambda>_. x) \\<tau> \\<noteq>\n             false\n              \\<tau>}\\<rfloor>\\<rfloor>->including\\<^sub>S\\<^sub>e\\<^sub>t(\\<lambda>_.\n  y \\<tau>)\n                             \\<tau>)) \\<and>\n                          ((P y \\<triangleq> false) \\<tau> =\n                           true \\<tau> \\<longrightarrow>\n                           ((\\<exists>x\n\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                      (X \\<tau>)\\<rceil>\\<rceil>.\n                                P (\\<lambda>_. x) \\<tau> =\n                                \\<bottom>) \\<longrightarrow>\n                            \\<bottom> =\n                            Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                             \\<lfloor>\\<lfloor>{x\n          \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                 (X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y)\n                                   \\<tau>)\\<rceil>\\<rceil>.\n          P (\\<lambda>_. x) \\<tau> \\<noteq>\n          false \\<tau>}\\<rfloor>\\<rfloor>) \\<and>\n                           ((\\<forall>x\n\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                      (X \\<tau>)\\<rceil>\\<rceil>.\n                                P (\\<lambda>_. x) \\<tau> \\<noteq>\n                                \\<bottom>) \\<longrightarrow>\n                            Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                             \\<lfloor>\\<lfloor>{x\n          \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                 (X \\<tau>)\\<rceil>\\<rceil>.\n          P (\\<lambda>_. x) \\<tau> \\<noteq>\n          false \\<tau>}\\<rfloor>\\<rfloor> =\n                            Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                             \\<lfloor>\\<lfloor>{x\n          \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                 (X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y)\n                                   \\<tau>)\\<rceil>\\<rceil>.\n          P (\\<lambda>_. x) \\<tau> \\<noteq>\n          false \\<tau>}\\<rfloor>\\<rfloor>)))\n 2. \\<And>\\<tau>.\n       (\\<delta> X->including\\<^sub>S\\<^sub>e\\<^sub>t(y)) \\<tau> \\<noteq>\n       true \\<tau> \\<Longrightarrow>\n       (if (\\<delta> X->including\\<^sub>S\\<^sub>e\\<^sub>t(y)) \\<tau> =\n           true \\<tau>\n        then if \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n          (X->including\\<^sub>S\\<^sub>e\\<^sub>t(y) \\<tau>)\\<rceil>\\<rceil>.\n                   P (\\<lambda>_. x) \\<tau> = invalid \\<tau>\n             then invalid \\<tau>\n             else Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                   \\<lfloor>\\<lfloor>{x\n\\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                       (X->including\\<^sub>S\\<^sub>e\\<^sub>t(y)\n                         \\<tau>)\\<rceil>\\<rceil>.\nP (\\<lambda>_. x) \\<tau> \\<noteq> false \\<tau>}\\<rfloor>\\<rfloor>\n        else invalid \\<tau>) =\n       OclSelect_body P y\n        (OclSelect X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) P) \\<tau>", "apply(simp add: bot_fun_def)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>\\<tau>.\n       \\<lbrakk>(\\<delta> X and \\<upsilon> y) \\<tau> = true \\<tau>;\n        P y \\<tau> \\<noteq> \\<bottom>\\<rbrakk>\n       \\<Longrightarrow> ((\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                     (X \\<tau>)\\<rceil>\\<rceil>.\n                              P (\\<lambda>_. x) \\<tau> =\n                              \\<bottom>) \\<longrightarrow>\n                          ((P y \\<triangleq> false) \\<tau> =\n                           false \\<tau> \\<longrightarrow>\n                           \\<bottom> =\n                           \\<lambda>_.\n                              \\<bottom>->including\\<^sub>S\\<^sub>e\\<^sub>t(\\<lambda>_.\n  y \\<tau>)\n                            \\<tau> \\<and>\n                           ((\\<forall>x\n\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                      (X \\<tau>)\\<rceil>\\<rceil>.\n                                P (\\<lambda>_. x) \\<tau> \\<noteq>\n                                \\<bottom>) \\<longrightarrow>\n                            Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                             \\<lfloor>\\<lfloor>insert (y \\<tau>)\n          {x \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                    (X \\<tau>)\\<rceil>\\<rceil>.\n           P (\\<lambda>_. x) \\<tau> \\<noteq>\n           false \\<tau>}\\<rfloor>\\<rfloor> =\n                            \\<lambda>_.\n                               \\<bottom>->including\\<^sub>S\\<^sub>e\\<^sub>t(\\<lambda>_.\n   y \\<tau>)\n                             \\<tau>)) \\<and>\n                          ((P y \\<triangleq> false) \\<tau> =\n                           true \\<tau> \\<longrightarrow>\n                           (\\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                      (X \\<tau>)\\<rceil>\\<rceil>.\n                               P (\\<lambda>_. x) \\<tau> \\<noteq>\n                               \\<bottom>) \\<longrightarrow>\n                           Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                            \\<lfloor>\\<lfloor>{x\n         \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                (X \\<tau>)\\<rceil>\\<rceil>.\n         P (\\<lambda>_. x) \\<tau> \\<noteq> false \\<tau>}\\<rfloor>\\<rfloor> =\n                           \\<bottom>)) \\<and>\n                         ((\\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                     (X \\<tau>)\\<rceil>\\<rceil>.\n                              P (\\<lambda>_. x) \\<tau> \\<noteq>\n                              \\<bottom>) \\<longrightarrow>\n                          ((P y \\<triangleq> false) \\<tau> =\n                           false \\<tau> \\<longrightarrow>\n                           Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                            \\<lfloor>\\<lfloor>insert (y \\<tau>)\n         {x \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                   (X \\<tau>)\\<rceil>\\<rceil>.\n          P (\\<lambda>_. x) \\<tau> \\<noteq>\n          false \\<tau>}\\<rfloor>\\<rfloor> =\n                           \\<lambda>_.\n                              Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                               \\<lfloor>\\<lfloor>{x\n            \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                   (X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y)\n                                     \\<tau>)\\<rceil>\\<rceil>.\n            P (\\<lambda>_. x) \\<tau> \\<noteq>\n            false\n             \\<tau>}\\<rfloor>\\<rfloor>->including\\<^sub>S\\<^sub>e\\<^sub>t(\\<lambda>_.\n y \\<tau>)\n                            \\<tau>) \\<and>\n                          ((P y \\<triangleq> false) \\<tau> =\n                           true \\<tau> \\<longrightarrow>\n                           Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                            \\<lfloor>\\<lfloor>{x\n         \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                (X \\<tau>)\\<rceil>\\<rceil>.\n         P (\\<lambda>_. x) \\<tau> \\<noteq> false \\<tau>}\\<rfloor>\\<rfloor> =\n                           Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                            \\<lfloor>\\<lfloor>{x\n         \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                (X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y)\n                                  \\<tau>)\\<rceil>\\<rceil>.\n         P (\\<lambda>_. x) \\<tau> \\<noteq> false \\<tau>}\\<rfloor>\\<rfloor>))\n 2. \\<And>\\<tau>.\n       (\\<delta> X->including\\<^sub>S\\<^sub>e\\<^sub>t(y)) \\<tau> \\<noteq>\n       true \\<tau> \\<Longrightarrow>\n       (if (\\<delta> X->including\\<^sub>S\\<^sub>e\\<^sub>t(y)) \\<tau> =\n           true \\<tau>\n        then if \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n          (X->including\\<^sub>S\\<^sub>e\\<^sub>t(y) \\<tau>)\\<rceil>\\<rceil>.\n                   P (\\<lambda>_. x) \\<tau> = invalid \\<tau>\n             then invalid \\<tau>\n             else Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                   \\<lfloor>\\<lfloor>{x\n\\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                       (X->including\\<^sub>S\\<^sub>e\\<^sub>t(y)\n                         \\<tau>)\\<rceil>\\<rceil>.\nP (\\<lambda>_. x) \\<tau> \\<noteq> false \\<tau>}\\<rfloor>\\<rfloor>\n        else invalid \\<tau>) =\n       OclSelect_body P y\n        (OclSelect X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) P) \\<tau>", "apply(subst (1 2) invert_including, simp+)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>\\<tau>.\n       \\<lbrakk>(\\<delta> X and \\<upsilon> y) \\<tau> = true \\<tau>;\n        P y \\<tau> \\<noteq> \\<bottom>\\<rbrakk>\n       \\<Longrightarrow> ((\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                     (X \\<tau>)\\<rceil>\\<rceil>.\n                              P (\\<lambda>_. x) \\<tau> =\n                              \\<bottom>) \\<longrightarrow>\n                          ((P y \\<triangleq> false) \\<tau> =\n                           false \\<tau> \\<longrightarrow>\n                           (\\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                      (X \\<tau>)\\<rceil>\\<rceil>.\n                               P (\\<lambda>_. x) \\<tau> \\<noteq>\n                               \\<bottom>) \\<longrightarrow>\n                           Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                            \\<lfloor>\\<lfloor>insert (y \\<tau>)\n         {x \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                   (X \\<tau>)\\<rceil>\\<rceil>.\n          P (\\<lambda>_. x) \\<tau> \\<noteq>\n          false \\<tau>}\\<rfloor>\\<rfloor> =\n                           \\<bottom>) \\<and>\n                          ((P y \\<triangleq> false) \\<tau> =\n                           true \\<tau> \\<longrightarrow>\n                           (\\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                      (X \\<tau>)\\<rceil>\\<rceil>.\n                               P (\\<lambda>_. x) \\<tau> \\<noteq>\n                               \\<bottom>) \\<longrightarrow>\n                           Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                            \\<lfloor>\\<lfloor>{x\n         \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                (X \\<tau>)\\<rceil>\\<rceil>.\n         P (\\<lambda>_. x) \\<tau> \\<noteq> false \\<tau>}\\<rfloor>\\<rfloor> =\n                           \\<bottom>)) \\<and>\n                         ((\\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                     (X \\<tau>)\\<rceil>\\<rceil>.\n                              P (\\<lambda>_. x) \\<tau> \\<noteq>\n                              \\<bottom>) \\<longrightarrow>\n                          ((P y \\<triangleq> false) \\<tau> =\n                           false \\<tau> \\<longrightarrow>\n                           Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                            \\<lfloor>\\<lfloor>insert (y \\<tau>)\n         {x \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                   (X \\<tau>)\\<rceil>\\<rceil>.\n          P (\\<lambda>_. x) \\<tau> \\<noteq>\n          false \\<tau>}\\<rfloor>\\<rfloor> =\n                           \\<lambda>_.\n                              Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                               \\<lfloor>\\<lfloor>{x\n            \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                   (X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y)\n                                     \\<tau>)\\<rceil>\\<rceil>.\n            P (\\<lambda>_. x) \\<tau> \\<noteq>\n            false\n             \\<tau>}\\<rfloor>\\<rfloor>->including\\<^sub>S\\<^sub>e\\<^sub>t(\\<lambda>_.\n y \\<tau>)\n                            \\<tau>) \\<and>\n                          ((P y \\<triangleq> false) \\<tau> =\n                           true \\<tau> \\<longrightarrow>\n                           Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                            \\<lfloor>\\<lfloor>{x\n         \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                (X \\<tau>)\\<rceil>\\<rceil>.\n         P (\\<lambda>_. x) \\<tau> \\<noteq> false \\<tau>}\\<rfloor>\\<rfloor> =\n                           Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                            \\<lfloor>\\<lfloor>{x\n         \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                (X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y)\n                                  \\<tau>)\\<rceil>\\<rceil>.\n         P (\\<lambda>_. x) \\<tau> \\<noteq> false \\<tau>}\\<rfloor>\\<rfloor>))\n 2. \\<And>\\<tau>.\n       (\\<delta> X->including\\<^sub>S\\<^sub>e\\<^sub>t(y)) \\<tau> \\<noteq>\n       true \\<tau> \\<Longrightarrow>\n       (if (\\<delta> X->including\\<^sub>S\\<^sub>e\\<^sub>t(y)) \\<tau> =\n           true \\<tau>\n        then if \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n          (X->including\\<^sub>S\\<^sub>e\\<^sub>t(y) \\<tau>)\\<rceil>\\<rceil>.\n                   P (\\<lambda>_. x) \\<tau> = invalid \\<tau>\n             then invalid \\<tau>\n             else Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                   \\<lfloor>\\<lfloor>{x\n\\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                       (X->including\\<^sub>S\\<^sub>e\\<^sub>t(y)\n                         \\<tau>)\\<rceil>\\<rceil>.\nP (\\<lambda>_. x) \\<tau> \\<noteq> false \\<tau>}\\<rfloor>\\<rfloor>\n        else invalid \\<tau>) =\n       OclSelect_body P y\n        (OclSelect X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) P) \\<tau>", "(* *)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>\\<tau>.\n       \\<lbrakk>(\\<delta> X and \\<upsilon> y) \\<tau> = true \\<tau>;\n        P y \\<tau> \\<noteq> \\<bottom>\\<rbrakk>\n       \\<Longrightarrow> ((\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                     (X \\<tau>)\\<rceil>\\<rceil>.\n                              P (\\<lambda>_. x) \\<tau> =\n                              \\<bottom>) \\<longrightarrow>\n                          ((P y \\<triangleq> false) \\<tau> =\n                           false \\<tau> \\<longrightarrow>\n                           (\\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                      (X \\<tau>)\\<rceil>\\<rceil>.\n                               P (\\<lambda>_. x) \\<tau> \\<noteq>\n                               \\<bottom>) \\<longrightarrow>\n                           Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                            \\<lfloor>\\<lfloor>insert (y \\<tau>)\n         {x \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                   (X \\<tau>)\\<rceil>\\<rceil>.\n          P (\\<lambda>_. x) \\<tau> \\<noteq>\n          false \\<tau>}\\<rfloor>\\<rfloor> =\n                           \\<bottom>) \\<and>\n                          ((P y \\<triangleq> false) \\<tau> =\n                           true \\<tau> \\<longrightarrow>\n                           (\\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                      (X \\<tau>)\\<rceil>\\<rceil>.\n                               P (\\<lambda>_. x) \\<tau> \\<noteq>\n                               \\<bottom>) \\<longrightarrow>\n                           Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                            \\<lfloor>\\<lfloor>{x\n         \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                (X \\<tau>)\\<rceil>\\<rceil>.\n         P (\\<lambda>_. x) \\<tau> \\<noteq> false \\<tau>}\\<rfloor>\\<rfloor> =\n                           \\<bottom>)) \\<and>\n                         ((\\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                     (X \\<tau>)\\<rceil>\\<rceil>.\n                              P (\\<lambda>_. x) \\<tau> \\<noteq>\n                              \\<bottom>) \\<longrightarrow>\n                          ((P y \\<triangleq> false) \\<tau> =\n                           false \\<tau> \\<longrightarrow>\n                           Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                            \\<lfloor>\\<lfloor>insert (y \\<tau>)\n         {x \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                   (X \\<tau>)\\<rceil>\\<rceil>.\n          P (\\<lambda>_. x) \\<tau> \\<noteq>\n          false \\<tau>}\\<rfloor>\\<rfloor> =\n                           \\<lambda>_.\n                              Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                               \\<lfloor>\\<lfloor>{x\n            \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                   (X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y)\n                                     \\<tau>)\\<rceil>\\<rceil>.\n            P (\\<lambda>_. x) \\<tau> \\<noteq>\n            false\n             \\<tau>}\\<rfloor>\\<rfloor>->including\\<^sub>S\\<^sub>e\\<^sub>t(\\<lambda>_.\n y \\<tau>)\n                            \\<tau>) \\<and>\n                          ((P y \\<triangleq> false) \\<tau> =\n                           true \\<tau> \\<longrightarrow>\n                           Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                            \\<lfloor>\\<lfloor>{x\n         \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                (X \\<tau>)\\<rceil>\\<rceil>.\n         P (\\<lambda>_. x) \\<tau> \\<noteq> false \\<tau>}\\<rfloor>\\<rfloor> =\n                           Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                            \\<lfloor>\\<lfloor>{x\n         \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                (X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y)\n                                  \\<tau>)\\<rceil>\\<rceil>.\n         P (\\<lambda>_. x) \\<tau> \\<noteq> false \\<tau>}\\<rfloor>\\<rfloor>))\n 2. \\<And>\\<tau>.\n       (\\<delta> X->including\\<^sub>S\\<^sub>e\\<^sub>t(y)) \\<tau> \\<noteq>\n       true \\<tau> \\<Longrightarrow>\n       (if (\\<delta> X->including\\<^sub>S\\<^sub>e\\<^sub>t(y)) \\<tau> =\n           true \\<tau>\n        then if \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n          (X->including\\<^sub>S\\<^sub>e\\<^sub>t(y) \\<tau>)\\<rceil>\\<rceil>.\n                   P (\\<lambda>_. x) \\<tau> = invalid \\<tau>\n             then invalid \\<tau>\n             else Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                   \\<lfloor>\\<lfloor>{x\n\\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                       (X->including\\<^sub>S\\<^sub>e\\<^sub>t(y)\n                         \\<tau>)\\<rceil>\\<rceil>.\nP (\\<lambda>_. x) \\<tau> \\<noteq> false \\<tau>}\\<rfloor>\\<rfloor>\n        else invalid \\<tau>) =\n       OclSelect_body P y\n        (OclSelect X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) P) \\<tau>", "apply(rule conjI, blast)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>\\<tau>.\n       \\<lbrakk>(\\<delta> X and \\<upsilon> y) \\<tau> = true \\<tau>;\n        P y \\<tau> \\<noteq> \\<bottom>\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                    (X \\<tau>)\\<rceil>\\<rceil>.\n                             P (\\<lambda>_. x) \\<tau> \\<noteq>\n                             \\<bottom>) \\<longrightarrow>\n                         ((P y \\<triangleq> false) \\<tau> =\n                          false \\<tau> \\<longrightarrow>\n                          Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                           \\<lfloor>\\<lfloor>insert (y \\<tau>)\n        {x \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                  (X \\<tau>)\\<rceil>\\<rceil>.\n         P (\\<lambda>_. x) \\<tau> \\<noteq> false \\<tau>}\\<rfloor>\\<rfloor> =\n                          \\<lambda>_.\n                             Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                              \\<lfloor>\\<lfloor>{x\n           \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                  (X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y)\n                                    \\<tau>)\\<rceil>\\<rceil>.\n           P (\\<lambda>_. x) \\<tau> \\<noteq>\n           false\n            \\<tau>}\\<rfloor>\\<rfloor>->including\\<^sub>S\\<^sub>e\\<^sub>t(\\<lambda>_.\ny \\<tau>)\n                           \\<tau>) \\<and>\n                         ((P y \\<triangleq> false) \\<tau> =\n                          true \\<tau> \\<longrightarrow>\n                          Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                           \\<lfloor>\\<lfloor>{x\n        \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                               (X \\<tau>)\\<rceil>\\<rceil>.\n        P (\\<lambda>_. x) \\<tau> \\<noteq> false \\<tau>}\\<rfloor>\\<rfloor> =\n                          Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                           \\<lfloor>\\<lfloor>{x\n        \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                               (X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y)\n                                 \\<tau>)\\<rceil>\\<rceil>.\n        P (\\<lambda>_. x) \\<tau> \\<noteq> false \\<tau>}\\<rfloor>\\<rfloor>)\n 2. \\<And>\\<tau>.\n       (\\<delta> X->including\\<^sub>S\\<^sub>e\\<^sub>t(y)) \\<tau> \\<noteq>\n       true \\<tau> \\<Longrightarrow>\n       (if (\\<delta> X->including\\<^sub>S\\<^sub>e\\<^sub>t(y)) \\<tau> =\n           true \\<tau>\n        then if \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n          (X->including\\<^sub>S\\<^sub>e\\<^sub>t(y) \\<tau>)\\<rceil>\\<rceil>.\n                   P (\\<lambda>_. x) \\<tau> = invalid \\<tau>\n             then invalid \\<tau>\n             else Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                   \\<lfloor>\\<lfloor>{x\n\\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                       (X->including\\<^sub>S\\<^sub>e\\<^sub>t(y)\n                         \\<tau>)\\<rceil>\\<rceil>.\nP (\\<lambda>_. x) \\<tau> \\<noteq> false \\<tau>}\\<rfloor>\\<rfloor>\n        else invalid \\<tau>) =\n       OclSelect_body P y\n        (OclSelect X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) P) \\<tau>", "apply(intro impI conjI)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>\\<tau>.\n       \\<lbrakk>(\\<delta> X and \\<upsilon> y) \\<tau> = true \\<tau>;\n        P y \\<tau> \\<noteq> \\<bottom>;\n        \\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n  (X \\<tau>)\\<rceil>\\<rceil>.\n           P (\\<lambda>_. x) \\<tau> \\<noteq> \\<bottom>;\n        (P y \\<triangleq> false) \\<tau> = false \\<tau>\\<rbrakk>\n       \\<Longrightarrow> Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                          \\<lfloor>\\<lfloor>insert (y \\<tau>)\n       {x \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                 (X \\<tau>)\\<rceil>\\<rceil>.\n        P (\\<lambda>_. x) \\<tau> \\<noteq> false \\<tau>}\\<rfloor>\\<rfloor> =\n                         \\<lambda>_.\n                            Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                             \\<lfloor>\\<lfloor>{x\n          \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                 (X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y)\n                                   \\<tau>)\\<rceil>\\<rceil>.\n          P (\\<lambda>_. x) \\<tau> \\<noteq>\n          false\n           \\<tau>}\\<rfloor>\\<rfloor>->including\\<^sub>S\\<^sub>e\\<^sub>t(\\<lambda>_.\n                                     y \\<tau>)\n                          \\<tau>\n 2. \\<And>\\<tau>.\n       \\<lbrakk>(\\<delta> X and \\<upsilon> y) \\<tau> = true \\<tau>;\n        P y \\<tau> \\<noteq> \\<bottom>;\n        \\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n  (X \\<tau>)\\<rceil>\\<rceil>.\n           P (\\<lambda>_. x) \\<tau> \\<noteq> \\<bottom>;\n        (P y \\<triangleq> false) \\<tau> = true \\<tau>\\<rbrakk>\n       \\<Longrightarrow> Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                          \\<lfloor>\\<lfloor>{x\n       \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                              (X \\<tau>)\\<rceil>\\<rceil>.\n       P (\\<lambda>_. x) \\<tau> \\<noteq> false \\<tau>}\\<rfloor>\\<rfloor> =\n                         Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                          \\<lfloor>\\<lfloor>{x\n       \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                              (X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y)\n                                \\<tau>)\\<rceil>\\<rceil>.\n       P (\\<lambda>_. x) \\<tau> \\<noteq> false \\<tau>}\\<rfloor>\\<rfloor>\n 3. \\<And>\\<tau>.\n       (\\<delta> X->including\\<^sub>S\\<^sub>e\\<^sub>t(y)) \\<tau> \\<noteq>\n       true \\<tau> \\<Longrightarrow>\n       (if (\\<delta> X->including\\<^sub>S\\<^sub>e\\<^sub>t(y)) \\<tau> =\n           true \\<tau>\n        then if \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n          (X->including\\<^sub>S\\<^sub>e\\<^sub>t(y) \\<tau>)\\<rceil>\\<rceil>.\n                   P (\\<lambda>_. x) \\<tau> = invalid \\<tau>\n             then invalid \\<tau>\n             else Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                   \\<lfloor>\\<lfloor>{x\n\\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                       (X->including\\<^sub>S\\<^sub>e\\<^sub>t(y)\n                         \\<tau>)\\<rceil>\\<rceil>.\nP (\\<lambda>_. x) \\<tau> \\<noteq> false \\<tau>}\\<rfloor>\\<rfloor>\n        else invalid \\<tau>) =\n       OclSelect_body P y\n        (OclSelect X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) P) \\<tau>", "apply(subst OclExcluding_def)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>\\<tau>.\n       \\<lbrakk>(\\<delta> X and \\<upsilon> y) \\<tau> = true \\<tau>;\n        P y \\<tau> \\<noteq> \\<bottom>;\n        \\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n  (X \\<tau>)\\<rceil>\\<rceil>.\n           P (\\<lambda>_. x) \\<tau> \\<noteq> \\<bottom>;\n        (P y \\<triangleq> false) \\<tau> = false \\<tau>\\<rbrakk>\n       \\<Longrightarrow> Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                          \\<lfloor>\\<lfloor>insert (y \\<tau>)\n       {x \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                 (X \\<tau>)\\<rceil>\\<rceil>.\n        P (\\<lambda>_. x) \\<tau> \\<noteq> false \\<tau>}\\<rfloor>\\<rfloor> =\n                         \\<lambda>_.\n                            Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                             \\<lfloor>\\<lfloor>{x\n          \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                 (if (\\<delta> X) \\<tau> =\n                                     true \\<tau> \\<and>\n                                     (\\<upsilon> y) \\<tau> = true \\<tau>\n                                  then Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n  \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                     (X \\<tau>)\\<rceil>\\<rceil> -\n                    {y \\<tau>}\\<rfloor>\\<rfloor>\n                                  else \\<bottom>)\\<rceil>\\<rceil>.\n          P (\\<lambda>_. x) \\<tau> \\<noteq>\n          false\n           \\<tau>}\\<rfloor>\\<rfloor>->including\\<^sub>S\\<^sub>e\\<^sub>t(\\<lambda>_.\n                                     y \\<tau>)\n                          \\<tau>\n 2. \\<And>\\<tau>.\n       \\<lbrakk>(\\<delta> X and \\<upsilon> y) \\<tau> = true \\<tau>;\n        P y \\<tau> \\<noteq> \\<bottom>;\n        \\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n  (X \\<tau>)\\<rceil>\\<rceil>.\n           P (\\<lambda>_. x) \\<tau> \\<noteq> \\<bottom>;\n        (P y \\<triangleq> false) \\<tau> = true \\<tau>\\<rbrakk>\n       \\<Longrightarrow> Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                          \\<lfloor>\\<lfloor>{x\n       \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                              (X \\<tau>)\\<rceil>\\<rceil>.\n       P (\\<lambda>_. x) \\<tau> \\<noteq> false \\<tau>}\\<rfloor>\\<rfloor> =\n                         Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                          \\<lfloor>\\<lfloor>{x\n       \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                              (X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y)\n                                \\<tau>)\\<rceil>\\<rceil>.\n       P (\\<lambda>_. x) \\<tau> \\<noteq> false \\<tau>}\\<rfloor>\\<rfloor>\n 3. \\<And>\\<tau>.\n       (\\<delta> X->including\\<^sub>S\\<^sub>e\\<^sub>t(y)) \\<tau> \\<noteq>\n       true \\<tau> \\<Longrightarrow>\n       (if (\\<delta> X->including\\<^sub>S\\<^sub>e\\<^sub>t(y)) \\<tau> =\n           true \\<tau>\n        then if \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n          (X->including\\<^sub>S\\<^sub>e\\<^sub>t(y) \\<tau>)\\<rceil>\\<rceil>.\n                   P (\\<lambda>_. x) \\<tau> = invalid \\<tau>\n             then invalid \\<tau>\n             else Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                   \\<lfloor>\\<lfloor>{x\n\\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                       (X->including\\<^sub>S\\<^sub>e\\<^sub>t(y)\n                         \\<tau>)\\<rceil>\\<rceil>.\nP (\\<lambda>_. x) \\<tau> \\<noteq> false \\<tau>}\\<rfloor>\\<rfloor>\n        else invalid \\<tau>) =\n       OclSelect_body P y\n        (OclSelect X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) P) \\<tau>", "apply(drule foundation5[simplified OclValid_def], simp)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>\\<tau>.\n       \\<lbrakk>P y \\<tau> \\<noteq> \\<bottom>;\n        \\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n  (X \\<tau>)\\<rceil>\\<rceil>.\n           P (\\<lambda>_. x) \\<tau> \\<noteq> \\<bottom>;\n        (P y \\<triangleq> false) \\<tau> = false \\<tau>;\n        (\\<delta> X) \\<tau> = true \\<tau> \\<and>\n        (\\<upsilon> y) \\<tau> = true \\<tau>\\<rbrakk>\n       \\<Longrightarrow> Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                          \\<lfloor>\\<lfloor>insert (y \\<tau>)\n       {x \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                 (X \\<tau>)\\<rceil>\\<rceil>.\n        P (\\<lambda>_. x) \\<tau> \\<noteq> false \\<tau>}\\<rfloor>\\<rfloor> =\n                         \\<lambda>_.\n                            Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                             \\<lfloor>\\<lfloor>{x\n          \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                 (Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                   \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                (X \\<tau>)\\<rceil>\\<rceil> -\n               {y \\<tau>}\\<rfloor>\\<rfloor>)\\<rceil>\\<rceil>.\n          P (\\<lambda>_. x) \\<tau> \\<noteq>\n          false\n           \\<tau>}\\<rfloor>\\<rfloor>->including\\<^sub>S\\<^sub>e\\<^sub>t(\\<lambda>_.\n                                     y \\<tau>)\n                          \\<tau>\n 2. \\<And>\\<tau>.\n       \\<lbrakk>(\\<delta> X and \\<upsilon> y) \\<tau> = true \\<tau>;\n        P y \\<tau> \\<noteq> \\<bottom>;\n        \\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n  (X \\<tau>)\\<rceil>\\<rceil>.\n           P (\\<lambda>_. x) \\<tau> \\<noteq> \\<bottom>;\n        (P y \\<triangleq> false) \\<tau> = true \\<tau>\\<rbrakk>\n       \\<Longrightarrow> Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                          \\<lfloor>\\<lfloor>{x\n       \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                              (X \\<tau>)\\<rceil>\\<rceil>.\n       P (\\<lambda>_. x) \\<tau> \\<noteq> false \\<tau>}\\<rfloor>\\<rfloor> =\n                         Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                          \\<lfloor>\\<lfloor>{x\n       \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                              (X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y)\n                                \\<tau>)\\<rceil>\\<rceil>.\n       P (\\<lambda>_. x) \\<tau> \\<noteq> false \\<tau>}\\<rfloor>\\<rfloor>\n 3. \\<And>\\<tau>.\n       (\\<delta> X->including\\<^sub>S\\<^sub>e\\<^sub>t(y)) \\<tau> \\<noteq>\n       true \\<tau> \\<Longrightarrow>\n       (if (\\<delta> X->including\\<^sub>S\\<^sub>e\\<^sub>t(y)) \\<tau> =\n           true \\<tau>\n        then if \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n          (X->including\\<^sub>S\\<^sub>e\\<^sub>t(y) \\<tau>)\\<rceil>\\<rceil>.\n                   P (\\<lambda>_. x) \\<tau> = invalid \\<tau>\n             then invalid \\<tau>\n             else Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                   \\<lfloor>\\<lfloor>{x\n\\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                       (X->including\\<^sub>S\\<^sub>e\\<^sub>t(y)\n                         \\<tau>)\\<rceil>\\<rceil>.\nP (\\<lambda>_. x) \\<tau> \\<noteq> false \\<tau>}\\<rfloor>\\<rfloor>\n        else invalid \\<tau>) =\n       OclSelect_body P y\n        (OclSelect X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) P) \\<tau>", "apply(subst Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e_inverse[OF diff_in_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e], fast)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>\\<tau>.\n       \\<lbrakk>P y \\<tau> \\<noteq> \\<bottom>;\n        \\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n  (X \\<tau>)\\<rceil>\\<rceil>.\n           P (\\<lambda>_. x) \\<tau> \\<noteq> \\<bottom>;\n        (P y \\<triangleq> false) \\<tau> = false \\<tau>;\n        (\\<delta> X) \\<tau> = true \\<tau> \\<and>\n        (\\<upsilon> y) \\<tau> = true \\<tau>\\<rbrakk>\n       \\<Longrightarrow> Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                          \\<lfloor>\\<lfloor>insert (y \\<tau>)\n       {x \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                 (X \\<tau>)\\<rceil>\\<rceil>.\n        P (\\<lambda>_. x) \\<tau> \\<noteq> false \\<tau>}\\<rfloor>\\<rfloor> =\n                         \\<lambda>_.\n                            Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                             \\<lfloor>\\<lfloor>{x\n          \\<in> \\<lceil>\\<lceil>\\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                             (X \\<tau>)\\<rceil>\\<rceil> -\n            {y \\<tau>}\\<rfloor>\\<rfloor>\\<rceil>\\<rceil>.\n          P (\\<lambda>_. x) \\<tau> \\<noteq>\n          false\n           \\<tau>}\\<rfloor>\\<rfloor>->including\\<^sub>S\\<^sub>e\\<^sub>t(\\<lambda>_.\n                                     y \\<tau>)\n                          \\<tau>\n 2. \\<And>\\<tau>.\n       \\<lbrakk>(\\<delta> X and \\<upsilon> y) \\<tau> = true \\<tau>;\n        P y \\<tau> \\<noteq> \\<bottom>;\n        \\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n  (X \\<tau>)\\<rceil>\\<rceil>.\n           P (\\<lambda>_. x) \\<tau> \\<noteq> \\<bottom>;\n        (P y \\<triangleq> false) \\<tau> = true \\<tau>\\<rbrakk>\n       \\<Longrightarrow> Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                          \\<lfloor>\\<lfloor>{x\n       \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                              (X \\<tau>)\\<rceil>\\<rceil>.\n       P (\\<lambda>_. x) \\<tau> \\<noteq> false \\<tau>}\\<rfloor>\\<rfloor> =\n                         Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                          \\<lfloor>\\<lfloor>{x\n       \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                              (X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y)\n                                \\<tau>)\\<rceil>\\<rceil>.\n       P (\\<lambda>_. x) \\<tau> \\<noteq> false \\<tau>}\\<rfloor>\\<rfloor>\n 3. \\<And>\\<tau>.\n       (\\<delta> X->including\\<^sub>S\\<^sub>e\\<^sub>t(y)) \\<tau> \\<noteq>\n       true \\<tau> \\<Longrightarrow>\n       (if (\\<delta> X->including\\<^sub>S\\<^sub>e\\<^sub>t(y)) \\<tau> =\n           true \\<tau>\n        then if \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n          (X->including\\<^sub>S\\<^sub>e\\<^sub>t(y) \\<tau>)\\<rceil>\\<rceil>.\n                   P (\\<lambda>_. x) \\<tau> = invalid \\<tau>\n             then invalid \\<tau>\n             else Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                   \\<lfloor>\\<lfloor>{x\n\\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                       (X->including\\<^sub>S\\<^sub>e\\<^sub>t(y)\n                         \\<tau>)\\<rceil>\\<rceil>.\nP (\\<lambda>_. x) \\<tau> \\<noteq> false \\<tau>}\\<rfloor>\\<rfloor>\n        else invalid \\<tau>) =\n       OclSelect_body P y\n        (OclSelect X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) P) \\<tau>", "apply(simp add: OclIncluding_def cp_valid[symmetric])"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>\\<tau>.\n       \\<lbrakk>P y \\<tau> \\<noteq> \\<bottom>;\n        \\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n  (X \\<tau>)\\<rceil>\\<rceil>.\n           P (\\<lambda>_. x) \\<tau> \\<noteq> \\<bottom>;\n        (P y \\<triangleq> false) \\<tau> = false \\<tau>;\n        (\\<delta> X) \\<tau> = true \\<tau> \\<and>\n        (\\<upsilon> y) \\<tau> = true \\<tau>\\<rbrakk>\n       \\<Longrightarrow> ((\\<delta> (\\<lambda>_.\n  Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n   \\<lfloor>\\<lfloor>{x \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n         (X \\<tau>)\\<rceil>\\<rceil>.\n                      x \\<noteq> y \\<tau> \\<and>\n                      P (\\<lambda>_. x) \\<tau> \\<noteq>\n                      false \\<tau>}\\<rfloor>\\<rfloor>))\n                           \\<tau> =\n                          true \\<tau> \\<longrightarrow>\n                          Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                           \\<lfloor>\\<lfloor>insert (y \\<tau>)\n        {x \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                  (X \\<tau>)\\<rceil>\\<rceil>.\n         P (\\<lambda>_. x) \\<tau> \\<noteq> false \\<tau>}\\<rfloor>\\<rfloor> =\n                          Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                           \\<lfloor>\\<lfloor>insert (y \\<tau>)\n        \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                         (Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                           \\<lfloor>\\<lfloor>{x\n        \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                               (X \\<tau>)\\<rceil>\\<rceil>.\n        x \\<noteq> y \\<tau> \\<and>\n        P (\\<lambda>_. x) \\<tau> \\<noteq>\n        false\n         \\<tau>}\\<rfloor>\\<rfloor>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>) \\<and>\n                         ((\\<delta> (\\<lambda>_.\n  Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n   \\<lfloor>\\<lfloor>{x \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n         (X \\<tau>)\\<rceil>\\<rceil>.\n                      x \\<noteq> y \\<tau> \\<and>\n                      P (\\<lambda>_. x) \\<tau> \\<noteq>\n                      false \\<tau>}\\<rfloor>\\<rfloor>))\n                           \\<tau> \\<noteq>\n                          true \\<tau> \\<longrightarrow>\n                          Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                           \\<lfloor>\\<lfloor>insert (y \\<tau>)\n        {x \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                  (X \\<tau>)\\<rceil>\\<rceil>.\n         P (\\<lambda>_. x) \\<tau> \\<noteq> false \\<tau>}\\<rfloor>\\<rfloor> =\n                          invalid \\<tau>)\n 2. \\<And>\\<tau>.\n       \\<lbrakk>(\\<delta> X and \\<upsilon> y) \\<tau> = true \\<tau>;\n        P y \\<tau> \\<noteq> \\<bottom>;\n        \\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n  (X \\<tau>)\\<rceil>\\<rceil>.\n           P (\\<lambda>_. x) \\<tau> \\<noteq> \\<bottom>;\n        (P y \\<triangleq> false) \\<tau> = true \\<tau>\\<rbrakk>\n       \\<Longrightarrow> Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                          \\<lfloor>\\<lfloor>{x\n       \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                              (X \\<tau>)\\<rceil>\\<rceil>.\n       P (\\<lambda>_. x) \\<tau> \\<noteq> false \\<tau>}\\<rfloor>\\<rfloor> =\n                         Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                          \\<lfloor>\\<lfloor>{x\n       \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                              (X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y)\n                                \\<tau>)\\<rceil>\\<rceil>.\n       P (\\<lambda>_. x) \\<tau> \\<noteq> false \\<tau>}\\<rfloor>\\<rfloor>\n 3. \\<And>\\<tau>.\n       (\\<delta> X->including\\<^sub>S\\<^sub>e\\<^sub>t(y)) \\<tau> \\<noteq>\n       true \\<tau> \\<Longrightarrow>\n       (if (\\<delta> X->including\\<^sub>S\\<^sub>e\\<^sub>t(y)) \\<tau> =\n           true \\<tau>\n        then if \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n          (X->including\\<^sub>S\\<^sub>e\\<^sub>t(y) \\<tau>)\\<rceil>\\<rceil>.\n                   P (\\<lambda>_. x) \\<tau> = invalid \\<tau>\n             then invalid \\<tau>\n             else Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                   \\<lfloor>\\<lfloor>{x\n\\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                       (X->including\\<^sub>S\\<^sub>e\\<^sub>t(y)\n                         \\<tau>)\\<rceil>\\<rceil>.\nP (\\<lambda>_. x) \\<tau> \\<noteq> false \\<tau>}\\<rfloor>\\<rfloor>\n        else invalid \\<tau>) =\n       OclSelect_body P y\n        (OclSelect X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) P) \\<tau>", "apply((erule conjE)+, frule exclude_defined[simplified OclValid_def], simp)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>\\<tau>.\n       \\<lbrakk>P y \\<tau> \\<noteq> \\<bottom>;\n        \\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n  (X \\<tau>)\\<rceil>\\<rceil>.\n           P (\\<lambda>_. x) \\<tau> \\<noteq> \\<bottom>;\n        (P y \\<triangleq> false) \\<tau> = false \\<tau>;\n        (\\<delta> X) \\<tau> = true \\<tau>;\n        (\\<upsilon> y) \\<tau> = true \\<tau>;\n        (\\<delta> (\\<lambda>_.\n                      Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                       \\<lfloor>\\<lfloor>{x\n    \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                           (X \\<tau>)\\<rceil>\\<rceil>.\n    x \\<noteq> y \\<tau> \\<and>\n    P (\\<lambda>_. x) \\<tau> \\<noteq> false \\<tau>}\\<rfloor>\\<rfloor>))\n         \\<tau> =\n        true \\<tau>\\<rbrakk>\n       \\<Longrightarrow> Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                          \\<lfloor>\\<lfloor>insert (y \\<tau>)\n       {x \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                 (X \\<tau>)\\<rceil>\\<rceil>.\n        P (\\<lambda>_. x) \\<tau> \\<noteq> false \\<tau>}\\<rfloor>\\<rfloor> =\n                         Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                          \\<lfloor>\\<lfloor>insert (y \\<tau>)\n       \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                        (Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                          \\<lfloor>\\<lfloor>{x\n       \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                              (X \\<tau>)\\<rceil>\\<rceil>.\n       x \\<noteq> y \\<tau> \\<and>\n       P (\\<lambda>_. x) \\<tau> \\<noteq>\n       false \\<tau>}\\<rfloor>\\<rfloor>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>\n 2. \\<And>\\<tau>.\n       \\<lbrakk>(\\<delta> X and \\<upsilon> y) \\<tau> = true \\<tau>;\n        P y \\<tau> \\<noteq> \\<bottom>;\n        \\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n  (X \\<tau>)\\<rceil>\\<rceil>.\n           P (\\<lambda>_. x) \\<tau> \\<noteq> \\<bottom>;\n        (P y \\<triangleq> false) \\<tau> = true \\<tau>\\<rbrakk>\n       \\<Longrightarrow> Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                          \\<lfloor>\\<lfloor>{x\n       \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                              (X \\<tau>)\\<rceil>\\<rceil>.\n       P (\\<lambda>_. x) \\<tau> \\<noteq> false \\<tau>}\\<rfloor>\\<rfloor> =\n                         Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                          \\<lfloor>\\<lfloor>{x\n       \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                              (X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y)\n                                \\<tau>)\\<rceil>\\<rceil>.\n       P (\\<lambda>_. x) \\<tau> \\<noteq> false \\<tau>}\\<rfloor>\\<rfloor>\n 3. \\<And>\\<tau>.\n       (\\<delta> X->including\\<^sub>S\\<^sub>e\\<^sub>t(y)) \\<tau> \\<noteq>\n       true \\<tau> \\<Longrightarrow>\n       (if (\\<delta> X->including\\<^sub>S\\<^sub>e\\<^sub>t(y)) \\<tau> =\n           true \\<tau>\n        then if \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n          (X->including\\<^sub>S\\<^sub>e\\<^sub>t(y) \\<tau>)\\<rceil>\\<rceil>.\n                   P (\\<lambda>_. x) \\<tau> = invalid \\<tau>\n             then invalid \\<tau>\n             else Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                   \\<lfloor>\\<lfloor>{x\n\\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                       (X->including\\<^sub>S\\<^sub>e\\<^sub>t(y)\n                         \\<tau>)\\<rceil>\\<rceil>.\nP (\\<lambda>_. x) \\<tau> \\<noteq> false \\<tau>}\\<rfloor>\\<rfloor>\n        else invalid \\<tau>) =\n       OclSelect_body P y\n        (OclSelect X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) P) \\<tau>", "apply(subst Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e_inverse[OF ins_in_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e'''], simp+)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>\\<tau>.\n       \\<lbrakk>P y \\<tau> \\<noteq> \\<bottom>;\n        \\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n  (X \\<tau>)\\<rceil>\\<rceil>.\n           P (\\<lambda>_. x) \\<tau> \\<noteq> \\<bottom>;\n        (P y \\<triangleq> false) \\<tau> = false \\<tau>;\n        (\\<delta> X) \\<tau> = true \\<tau>;\n        (\\<upsilon> y) \\<tau> = true \\<tau>;\n        (\\<delta> (\\<lambda>_.\n                      Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                       \\<lfloor>\\<lfloor>{x\n    \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                           (X \\<tau>)\\<rceil>\\<rceil>.\n    x \\<noteq> y \\<tau> \\<and>\n    P (\\<lambda>_. x) \\<tau> \\<noteq> false \\<tau>}\\<rfloor>\\<rfloor>))\n         \\<tau> =\n        true \\<tau>\\<rbrakk>\n       \\<Longrightarrow> Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                          \\<lfloor>\\<lfloor>insert (y \\<tau>)\n       {x \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                 (X \\<tau>)\\<rceil>\\<rceil>.\n        P (\\<lambda>_. x) \\<tau> \\<noteq> false \\<tau>}\\<rfloor>\\<rfloor> =\n                         Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                          \\<lfloor>\\<lfloor>insert (y \\<tau>)\n       {x \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                 (X \\<tau>)\\<rceil>\\<rceil>.\n        x \\<noteq> y \\<tau> \\<and>\n        P (\\<lambda>_. x) \\<tau> \\<noteq> false \\<tau>}\\<rfloor>\\<rfloor>\n 2. \\<And>\\<tau>.\n       \\<lbrakk>(\\<delta> X and \\<upsilon> y) \\<tau> = true \\<tau>;\n        P y \\<tau> \\<noteq> \\<bottom>;\n        \\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n  (X \\<tau>)\\<rceil>\\<rceil>.\n           P (\\<lambda>_. x) \\<tau> \\<noteq> \\<bottom>;\n        (P y \\<triangleq> false) \\<tau> = true \\<tau>\\<rbrakk>\n       \\<Longrightarrow> Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                          \\<lfloor>\\<lfloor>{x\n       \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                              (X \\<tau>)\\<rceil>\\<rceil>.\n       P (\\<lambda>_. x) \\<tau> \\<noteq> false \\<tau>}\\<rfloor>\\<rfloor> =\n                         Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                          \\<lfloor>\\<lfloor>{x\n       \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                              (X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y)\n                                \\<tau>)\\<rceil>\\<rceil>.\n       P (\\<lambda>_. x) \\<tau> \\<noteq> false \\<tau>}\\<rfloor>\\<rfloor>\n 3. \\<And>\\<tau>.\n       (\\<delta> X->including\\<^sub>S\\<^sub>e\\<^sub>t(y)) \\<tau> \\<noteq>\n       true \\<tau> \\<Longrightarrow>\n       (if (\\<delta> X->including\\<^sub>S\\<^sub>e\\<^sub>t(y)) \\<tau> =\n           true \\<tau>\n        then if \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n          (X->including\\<^sub>S\\<^sub>e\\<^sub>t(y) \\<tau>)\\<rceil>\\<rceil>.\n                   P (\\<lambda>_. x) \\<tau> = invalid \\<tau>\n             then invalid \\<tau>\n             else Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                   \\<lfloor>\\<lfloor>{x\n\\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                       (X->including\\<^sub>S\\<^sub>e\\<^sub>t(y)\n                         \\<tau>)\\<rceil>\\<rceil>.\nP (\\<lambda>_. x) \\<tau> \\<noteq> false \\<tau>}\\<rfloor>\\<rfloor>\n        else invalid \\<tau>) =\n       OclSelect_body P y\n        (OclSelect X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) P) \\<tau>", "apply(subst Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e_inject[OF ins_in_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e ins_in_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e'], fast+)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>\\<tau>.\n       \\<lbrakk>(\\<delta> X and \\<upsilon> y) \\<tau> = true \\<tau>;\n        P y \\<tau> \\<noteq> \\<bottom>;\n        \\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n  (X \\<tau>)\\<rceil>\\<rceil>.\n           P (\\<lambda>_. x) \\<tau> \\<noteq> \\<bottom>;\n        (P y \\<triangleq> false) \\<tau> = true \\<tau>\\<rbrakk>\n       \\<Longrightarrow> Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                          \\<lfloor>\\<lfloor>{x\n       \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                              (X \\<tau>)\\<rceil>\\<rceil>.\n       P (\\<lambda>_. x) \\<tau> \\<noteq> false \\<tau>}\\<rfloor>\\<rfloor> =\n                         Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                          \\<lfloor>\\<lfloor>{x\n       \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                              (X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y)\n                                \\<tau>)\\<rceil>\\<rceil>.\n       P (\\<lambda>_. x) \\<tau> \\<noteq> false \\<tau>}\\<rfloor>\\<rfloor>\n 2. \\<And>\\<tau>.\n       (\\<delta> X->including\\<^sub>S\\<^sub>e\\<^sub>t(y)) \\<tau> \\<noteq>\n       true \\<tau> \\<Longrightarrow>\n       (if (\\<delta> X->including\\<^sub>S\\<^sub>e\\<^sub>t(y)) \\<tau> =\n           true \\<tau>\n        then if \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n          (X->including\\<^sub>S\\<^sub>e\\<^sub>t(y) \\<tau>)\\<rceil>\\<rceil>.\n                   P (\\<lambda>_. x) \\<tau> = invalid \\<tau>\n             then invalid \\<tau>\n             else Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                   \\<lfloor>\\<lfloor>{x\n\\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                       (X->including\\<^sub>S\\<^sub>e\\<^sub>t(y)\n                         \\<tau>)\\<rceil>\\<rceil>.\nP (\\<lambda>_. x) \\<tau> \\<noteq> false \\<tau>}\\<rfloor>\\<rfloor>\n        else invalid \\<tau>) =\n       OclSelect_body P y\n        (OclSelect X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) P) \\<tau>", "(* *)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>\\<tau>.\n       \\<lbrakk>(\\<delta> X and \\<upsilon> y) \\<tau> = true \\<tau>;\n        P y \\<tau> \\<noteq> \\<bottom>;\n        \\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n  (X \\<tau>)\\<rceil>\\<rceil>.\n           P (\\<lambda>_. x) \\<tau> \\<noteq> \\<bottom>;\n        (P y \\<triangleq> false) \\<tau> = true \\<tau>\\<rbrakk>\n       \\<Longrightarrow> Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                          \\<lfloor>\\<lfloor>{x\n       \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                              (X \\<tau>)\\<rceil>\\<rceil>.\n       P (\\<lambda>_. x) \\<tau> \\<noteq> false \\<tau>}\\<rfloor>\\<rfloor> =\n                         Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                          \\<lfloor>\\<lfloor>{x\n       \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                              (X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y)\n                                \\<tau>)\\<rceil>\\<rceil>.\n       P (\\<lambda>_. x) \\<tau> \\<noteq> false \\<tau>}\\<rfloor>\\<rfloor>\n 2. \\<And>\\<tau>.\n       (\\<delta> X->including\\<^sub>S\\<^sub>e\\<^sub>t(y)) \\<tau> \\<noteq>\n       true \\<tau> \\<Longrightarrow>\n       (if (\\<delta> X->including\\<^sub>S\\<^sub>e\\<^sub>t(y)) \\<tau> =\n           true \\<tau>\n        then if \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n          (X->including\\<^sub>S\\<^sub>e\\<^sub>t(y) \\<tau>)\\<rceil>\\<rceil>.\n                   P (\\<lambda>_. x) \\<tau> = invalid \\<tau>\n             then invalid \\<tau>\n             else Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                   \\<lfloor>\\<lfloor>{x\n\\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                       (X->including\\<^sub>S\\<^sub>e\\<^sub>t(y)\n                         \\<tau>)\\<rceil>\\<rceil>.\nP (\\<lambda>_. x) \\<tau> \\<noteq> false \\<tau>}\\<rfloor>\\<rfloor>\n        else invalid \\<tau>) =\n       OclSelect_body P y\n        (OclSelect X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) P) \\<tau>", "apply(simp add: OclExcluding_def)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>\\<tau>.\n       \\<lbrakk>(\\<delta> X and \\<upsilon> y) \\<tau> = true \\<tau>;\n        P y \\<tau> \\<noteq> \\<bottom>;\n        \\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n  (X \\<tau>)\\<rceil>\\<rceil>.\n           P (\\<lambda>_. x) \\<tau> \\<noteq> \\<bottom>;\n        (P y \\<triangleq> false) \\<tau> = true \\<tau>\\<rbrakk>\n       \\<Longrightarrow> ((\\<delta> X) \\<tau> = true \\<tau> \\<and>\n                          (\\<upsilon> y) \\<tau> =\n                          true \\<tau> \\<longrightarrow>\n                          Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                           \\<lfloor>\\<lfloor>{x\n        \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                               (X \\<tau>)\\<rceil>\\<rceil>.\n        P (\\<lambda>_. x) \\<tau> \\<noteq> false \\<tau>}\\<rfloor>\\<rfloor> =\n                          Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                           \\<lfloor>\\<lfloor>{x\n        \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                               (Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                 \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                              (X \\<tau>)\\<rceil>\\<rceil> -\n             {y \\<tau>}\\<rfloor>\\<rfloor>)\\<rceil>\\<rceil>.\n        P (\\<lambda>_. x) \\<tau> \\<noteq>\n        false \\<tau>}\\<rfloor>\\<rfloor>) \\<and>\n                         (((\\<delta> X) \\<tau> =\n                           true \\<tau> \\<longrightarrow>\n                           (\\<upsilon> y) \\<tau> \\<noteq>\n                           true \\<tau>) \\<longrightarrow>\n                          Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                           \\<lfloor>\\<lfloor>{x\n        \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                               (X \\<tau>)\\<rceil>\\<rceil>.\n        P (\\<lambda>_. x) \\<tau> \\<noteq> false \\<tau>}\\<rfloor>\\<rfloor> =\n                          Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                           \\<lfloor>\\<lfloor>{x\n        \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                               \\<bottom>\\<rceil>\\<rceil>.\n        P (\\<lambda>_. x) \\<tau> \\<noteq> false \\<tau>}\\<rfloor>\\<rfloor>)\n 2. \\<And>\\<tau>.\n       (\\<delta> X->including\\<^sub>S\\<^sub>e\\<^sub>t(y)) \\<tau> \\<noteq>\n       true \\<tau> \\<Longrightarrow>\n       (if (\\<delta> X->including\\<^sub>S\\<^sub>e\\<^sub>t(y)) \\<tau> =\n           true \\<tau>\n        then if \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n          (X->including\\<^sub>S\\<^sub>e\\<^sub>t(y) \\<tau>)\\<rceil>\\<rceil>.\n                   P (\\<lambda>_. x) \\<tau> = invalid \\<tau>\n             then invalid \\<tau>\n             else Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                   \\<lfloor>\\<lfloor>{x\n\\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                       (X->including\\<^sub>S\\<^sub>e\\<^sub>t(y)\n                         \\<tau>)\\<rceil>\\<rceil>.\nP (\\<lambda>_. x) \\<tau> \\<noteq> false \\<tau>}\\<rfloor>\\<rfloor>\n        else invalid \\<tau>) =\n       OclSelect_body P y\n        (OclSelect X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) P) \\<tau>", "apply(simp add: foundation10[simplified OclValid_def])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>\\<tau>.\n       \\<lbrakk>(\\<delta> X) \\<tau> = true \\<tau> \\<and>\n                (\\<upsilon> y) \\<tau> = true \\<tau>;\n        P y \\<tau> \\<noteq> \\<bottom>;\n        \\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n  (X \\<tau>)\\<rceil>\\<rceil>.\n           P (\\<lambda>_. x) \\<tau> \\<noteq> \\<bottom>;\n        (P y \\<triangleq> false) \\<tau> = true \\<tau>\\<rbrakk>\n       \\<Longrightarrow> Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                          \\<lfloor>\\<lfloor>{x\n       \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                              (X \\<tau>)\\<rceil>\\<rceil>.\n       P (\\<lambda>_. x) \\<tau> \\<noteq> false \\<tau>}\\<rfloor>\\<rfloor> =\n                         Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                          \\<lfloor>\\<lfloor>{x\n       \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                              (Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                             (X \\<tau>)\\<rceil>\\<rceil> -\n            {y \\<tau>}\\<rfloor>\\<rfloor>)\\<rceil>\\<rceil>.\n       P (\\<lambda>_. x) \\<tau> \\<noteq> false \\<tau>}\\<rfloor>\\<rfloor>\n 2. \\<And>\\<tau>.\n       (\\<delta> X->including\\<^sub>S\\<^sub>e\\<^sub>t(y)) \\<tau> \\<noteq>\n       true \\<tau> \\<Longrightarrow>\n       (if (\\<delta> X->including\\<^sub>S\\<^sub>e\\<^sub>t(y)) \\<tau> =\n           true \\<tau>\n        then if \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n          (X->including\\<^sub>S\\<^sub>e\\<^sub>t(y) \\<tau>)\\<rceil>\\<rceil>.\n                   P (\\<lambda>_. x) \\<tau> = invalid \\<tau>\n             then invalid \\<tau>\n             else Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                   \\<lfloor>\\<lfloor>{x\n\\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                       (X->including\\<^sub>S\\<^sub>e\\<^sub>t(y)\n                         \\<tau>)\\<rceil>\\<rceil>.\nP (\\<lambda>_. x) \\<tau> \\<noteq> false \\<tau>}\\<rfloor>\\<rfloor>\n        else invalid \\<tau>) =\n       OclSelect_body P y\n        (OclSelect X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) P) \\<tau>", "apply(subst Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e_inverse[OF diff_in_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e], simp+)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>\\<tau>.\n       \\<lbrakk>(\\<delta> X) \\<tau> = true \\<tau> \\<and>\n                (\\<upsilon> y) \\<tau> = true \\<tau>;\n        P y \\<tau> \\<noteq> \\<bottom>;\n        \\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n  (X \\<tau>)\\<rceil>\\<rceil>.\n           P (\\<lambda>_. x) \\<tau> \\<noteq> \\<bottom>;\n        (P y \\<triangleq> false) \\<tau> = true \\<tau>\\<rbrakk>\n       \\<Longrightarrow> Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                          \\<lfloor>\\<lfloor>{x\n       \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                              (X \\<tau>)\\<rceil>\\<rceil>.\n       P (\\<lambda>_. x) \\<tau> \\<noteq> false \\<tau>}\\<rfloor>\\<rfloor> =\n                         Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                          \\<lfloor>\\<lfloor>{x\n       \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                              (X \\<tau>)\\<rceil>\\<rceil>.\n       x \\<noteq> y \\<tau> \\<and>\n       P (\\<lambda>_. x) \\<tau> \\<noteq> false \\<tau>}\\<rfloor>\\<rfloor>\n 2. \\<And>\\<tau>.\n       (\\<delta> X->including\\<^sub>S\\<^sub>e\\<^sub>t(y)) \\<tau> \\<noteq>\n       true \\<tau> \\<Longrightarrow>\n       (if (\\<delta> X->including\\<^sub>S\\<^sub>e\\<^sub>t(y)) \\<tau> =\n           true \\<tau>\n        then if \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n          (X->including\\<^sub>S\\<^sub>e\\<^sub>t(y) \\<tau>)\\<rceil>\\<rceil>.\n                   P (\\<lambda>_. x) \\<tau> = invalid \\<tau>\n             then invalid \\<tau>\n             else Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                   \\<lfloor>\\<lfloor>{x\n\\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                       (X->including\\<^sub>S\\<^sub>e\\<^sub>t(y)\n                         \\<tau>)\\<rceil>\\<rceil>.\nP (\\<lambda>_. x) \\<tau> \\<noteq> false \\<tau>}\\<rfloor>\\<rfloor>\n        else invalid \\<tau>) =\n       OclSelect_body P y\n        (OclSelect X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) P) \\<tau>", "apply(subst Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e_inject[OF ins_in_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e'' ins_in_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e'''], simp+)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>\\<tau>.\n       \\<lbrakk>(\\<delta> X) \\<tau> = true \\<tau> \\<and>\n                (\\<upsilon> y) \\<tau> = true \\<tau>;\n        P y \\<tau> \\<noteq> \\<bottom>;\n        \\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n  (X \\<tau>)\\<rceil>\\<rceil>.\n           P (\\<lambda>_. x) \\<tau> \\<noteq> \\<bottom>;\n        (P y \\<triangleq> false) \\<tau> = true \\<tau>\\<rbrakk>\n       \\<Longrightarrow> {x \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n             (X \\<tau>)\\<rceil>\\<rceil>.\n                          P (\\<lambda>_. x) \\<tau> \\<noteq> false \\<tau>} =\n                         {x \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n             (X \\<tau>)\\<rceil>\\<rceil>.\n                          x \\<noteq> y \\<tau> \\<and>\n                          P (\\<lambda>_. x) \\<tau> \\<noteq> false \\<tau>}\n 2. \\<And>\\<tau>.\n       (\\<delta> X->including\\<^sub>S\\<^sub>e\\<^sub>t(y)) \\<tau> \\<noteq>\n       true \\<tau> \\<Longrightarrow>\n       (if (\\<delta> X->including\\<^sub>S\\<^sub>e\\<^sub>t(y)) \\<tau> =\n           true \\<tau>\n        then if \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n          (X->including\\<^sub>S\\<^sub>e\\<^sub>t(y) \\<tau>)\\<rceil>\\<rceil>.\n                   P (\\<lambda>_. x) \\<tau> = invalid \\<tau>\n             then invalid \\<tau>\n             else Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                   \\<lfloor>\\<lfloor>{x\n\\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                       (X->including\\<^sub>S\\<^sub>e\\<^sub>t(y)\n                         \\<tau>)\\<rceil>\\<rceil>.\nP (\\<lambda>_. x) \\<tau> \\<noteq> false \\<tau>}\\<rfloor>\\<rfloor>\n        else invalid \\<tau>) =\n       OclSelect_body P y\n        (OclSelect X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) P) \\<tau>", "apply(subgoal_tac \"P (\\<lambda>_. y \\<tau>) \\<tau> = false \\<tau>\")"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>\\<tau>.\n       \\<lbrakk>(\\<delta> X) \\<tau> = true \\<tau> \\<and>\n                (\\<upsilon> y) \\<tau> = true \\<tau>;\n        P y \\<tau> \\<noteq> \\<bottom>;\n        \\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n  (X \\<tau>)\\<rceil>\\<rceil>.\n           P (\\<lambda>_. x) \\<tau> \\<noteq> \\<bottom>;\n        (P y \\<triangleq> false) \\<tau> = true \\<tau>;\n        P (\\<lambda>_. y \\<tau>) \\<tau> = false \\<tau>\\<rbrakk>\n       \\<Longrightarrow> {x \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n             (X \\<tau>)\\<rceil>\\<rceil>.\n                          P (\\<lambda>_. x) \\<tau> \\<noteq> false \\<tau>} =\n                         {x \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n             (X \\<tau>)\\<rceil>\\<rceil>.\n                          x \\<noteq> y \\<tau> \\<and>\n                          P (\\<lambda>_. x) \\<tau> \\<noteq> false \\<tau>}\n 2. \\<And>\\<tau>.\n       \\<lbrakk>(\\<delta> X) \\<tau> = true \\<tau> \\<and>\n                (\\<upsilon> y) \\<tau> = true \\<tau>;\n        P y \\<tau> \\<noteq> \\<bottom>;\n        \\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n  (X \\<tau>)\\<rceil>\\<rceil>.\n           P (\\<lambda>_. x) \\<tau> \\<noteq> \\<bottom>;\n        (P y \\<triangleq> false) \\<tau> = true \\<tau>\\<rbrakk>\n       \\<Longrightarrow> P (\\<lambda>_. y \\<tau>) \\<tau> = false \\<tau>\n 3. \\<And>\\<tau>.\n       (\\<delta> X->including\\<^sub>S\\<^sub>e\\<^sub>t(y)) \\<tau> \\<noteq>\n       true \\<tau> \\<Longrightarrow>\n       (if (\\<delta> X->including\\<^sub>S\\<^sub>e\\<^sub>t(y)) \\<tau> =\n           true \\<tau>\n        then if \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n          (X->including\\<^sub>S\\<^sub>e\\<^sub>t(y) \\<tau>)\\<rceil>\\<rceil>.\n                   P (\\<lambda>_. x) \\<tau> = invalid \\<tau>\n             then invalid \\<tau>\n             else Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                   \\<lfloor>\\<lfloor>{x\n\\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                       (X->including\\<^sub>S\\<^sub>e\\<^sub>t(y)\n                         \\<tau>)\\<rceil>\\<rceil>.\nP (\\<lambda>_. x) \\<tau> \\<noteq> false \\<tau>}\\<rfloor>\\<rfloor>\n        else invalid \\<tau>) =\n       OclSelect_body P y\n        (OclSelect X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) P) \\<tau>", "prefer 2"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>\\<tau>.\n       \\<lbrakk>(\\<delta> X) \\<tau> = true \\<tau> \\<and>\n                (\\<upsilon> y) \\<tau> = true \\<tau>;\n        P y \\<tau> \\<noteq> \\<bottom>;\n        \\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n  (X \\<tau>)\\<rceil>\\<rceil>.\n           P (\\<lambda>_. x) \\<tau> \\<noteq> \\<bottom>;\n        (P y \\<triangleq> false) \\<tau> = true \\<tau>\\<rbrakk>\n       \\<Longrightarrow> P (\\<lambda>_. y \\<tau>) \\<tau> = false \\<tau>\n 2. \\<And>\\<tau>.\n       \\<lbrakk>(\\<delta> X) \\<tau> = true \\<tau> \\<and>\n                (\\<upsilon> y) \\<tau> = true \\<tau>;\n        P y \\<tau> \\<noteq> \\<bottom>;\n        \\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n  (X \\<tau>)\\<rceil>\\<rceil>.\n           P (\\<lambda>_. x) \\<tau> \\<noteq> \\<bottom>;\n        (P y \\<triangleq> false) \\<tau> = true \\<tau>;\n        P (\\<lambda>_. y \\<tau>) \\<tau> = false \\<tau>\\<rbrakk>\n       \\<Longrightarrow> {x \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n             (X \\<tau>)\\<rceil>\\<rceil>.\n                          P (\\<lambda>_. x) \\<tau> \\<noteq> false \\<tau>} =\n                         {x \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n             (X \\<tau>)\\<rceil>\\<rceil>.\n                          x \\<noteq> y \\<tau> \\<and>\n                          P (\\<lambda>_. x) \\<tau> \\<noteq> false \\<tau>}\n 3. \\<And>\\<tau>.\n       (\\<delta> X->including\\<^sub>S\\<^sub>e\\<^sub>t(y)) \\<tau> \\<noteq>\n       true \\<tau> \\<Longrightarrow>\n       (if (\\<delta> X->including\\<^sub>S\\<^sub>e\\<^sub>t(y)) \\<tau> =\n           true \\<tau>\n        then if \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n          (X->including\\<^sub>S\\<^sub>e\\<^sub>t(y) \\<tau>)\\<rceil>\\<rceil>.\n                   P (\\<lambda>_. x) \\<tau> = invalid \\<tau>\n             then invalid \\<tau>\n             else Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                   \\<lfloor>\\<lfloor>{x\n\\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                       (X->including\\<^sub>S\\<^sub>e\\<^sub>t(y)\n                         \\<tau>)\\<rceil>\\<rceil>.\nP (\\<lambda>_. x) \\<tau> \\<noteq> false \\<tau>}\\<rfloor>\\<rfloor>\n        else invalid \\<tau>) =\n       OclSelect_body P y\n        (OclSelect X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) P) \\<tau>", "apply(subst P_cp[symmetric], metis OclValid_def foundation22)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>\\<tau>.\n       \\<lbrakk>(\\<delta> X) \\<tau> = true \\<tau> \\<and>\n                (\\<upsilon> y) \\<tau> = true \\<tau>;\n        P y \\<tau> \\<noteq> \\<bottom>;\n        \\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n  (X \\<tau>)\\<rceil>\\<rceil>.\n           P (\\<lambda>_. x) \\<tau> \\<noteq> \\<bottom>;\n        (P y \\<triangleq> false) \\<tau> = true \\<tau>;\n        P (\\<lambda>_. y \\<tau>) \\<tau> = false \\<tau>\\<rbrakk>\n       \\<Longrightarrow> {x \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n             (X \\<tau>)\\<rceil>\\<rceil>.\n                          P (\\<lambda>_. x) \\<tau> \\<noteq> false \\<tau>} =\n                         {x \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n             (X \\<tau>)\\<rceil>\\<rceil>.\n                          x \\<noteq> y \\<tau> \\<and>\n                          P (\\<lambda>_. x) \\<tau> \\<noteq> false \\<tau>}\n 2. \\<And>\\<tau>.\n       (\\<delta> X->including\\<^sub>S\\<^sub>e\\<^sub>t(y)) \\<tau> \\<noteq>\n       true \\<tau> \\<Longrightarrow>\n       (if (\\<delta> X->including\\<^sub>S\\<^sub>e\\<^sub>t(y)) \\<tau> =\n           true \\<tau>\n        then if \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n          (X->including\\<^sub>S\\<^sub>e\\<^sub>t(y) \\<tau>)\\<rceil>\\<rceil>.\n                   P (\\<lambda>_. x) \\<tau> = invalid \\<tau>\n             then invalid \\<tau>\n             else Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                   \\<lfloor>\\<lfloor>{x\n\\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                       (X->including\\<^sub>S\\<^sub>e\\<^sub>t(y)\n                         \\<tau>)\\<rceil>\\<rceil>.\nP (\\<lambda>_. x) \\<tau> \\<noteq> false \\<tau>}\\<rfloor>\\<rfloor>\n        else invalid \\<tau>) =\n       OclSelect_body P y\n        (OclSelect X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) P) \\<tau>", "apply(rule equalityI)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>\\<tau>.\n       \\<lbrakk>(\\<delta> X) \\<tau> = true \\<tau> \\<and>\n                (\\<upsilon> y) \\<tau> = true \\<tau>;\n        P y \\<tau> \\<noteq> \\<bottom>;\n        \\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n  (X \\<tau>)\\<rceil>\\<rceil>.\n           P (\\<lambda>_. x) \\<tau> \\<noteq> \\<bottom>;\n        (P y \\<triangleq> false) \\<tau> = true \\<tau>;\n        P (\\<lambda>_. y \\<tau>) \\<tau> = false \\<tau>\\<rbrakk>\n       \\<Longrightarrow> {x \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n             (X \\<tau>)\\<rceil>\\<rceil>.\n                          P (\\<lambda>_. x) \\<tau> \\<noteq> false \\<tau>}\n                         \\<subseteq> {x\n\\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                       (X \\<tau>)\\<rceil>\\<rceil>.\nx \\<noteq> y \\<tau> \\<and> P (\\<lambda>_. x) \\<tau> \\<noteq> false \\<tau>}\n 2. \\<And>\\<tau>.\n       \\<lbrakk>(\\<delta> X) \\<tau> = true \\<tau> \\<and>\n                (\\<upsilon> y) \\<tau> = true \\<tau>;\n        P y \\<tau> \\<noteq> \\<bottom>;\n        \\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n  (X \\<tau>)\\<rceil>\\<rceil>.\n           P (\\<lambda>_. x) \\<tau> \\<noteq> \\<bottom>;\n        (P y \\<triangleq> false) \\<tau> = true \\<tau>;\n        P (\\<lambda>_. y \\<tau>) \\<tau> = false \\<tau>\\<rbrakk>\n       \\<Longrightarrow> {x \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n             (X \\<tau>)\\<rceil>\\<rceil>.\n                          x \\<noteq> y \\<tau> \\<and>\n                          P (\\<lambda>_. x) \\<tau> \\<noteq> false \\<tau>}\n                         \\<subseteq> {x\n\\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                       (X \\<tau>)\\<rceil>\\<rceil>.\nP (\\<lambda>_. x) \\<tau> \\<noteq> false \\<tau>}\n 3. \\<And>\\<tau>.\n       (\\<delta> X->including\\<^sub>S\\<^sub>e\\<^sub>t(y)) \\<tau> \\<noteq>\n       true \\<tau> \\<Longrightarrow>\n       (if (\\<delta> X->including\\<^sub>S\\<^sub>e\\<^sub>t(y)) \\<tau> =\n           true \\<tau>\n        then if \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n          (X->including\\<^sub>S\\<^sub>e\\<^sub>t(y) \\<tau>)\\<rceil>\\<rceil>.\n                   P (\\<lambda>_. x) \\<tau> = invalid \\<tau>\n             then invalid \\<tau>\n             else Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                   \\<lfloor>\\<lfloor>{x\n\\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                       (X->including\\<^sub>S\\<^sub>e\\<^sub>t(y)\n                         \\<tau>)\\<rceil>\\<rceil>.\nP (\\<lambda>_. x) \\<tau> \\<noteq> false \\<tau>}\\<rfloor>\\<rfloor>\n        else invalid \\<tau>) =\n       OclSelect_body P y\n        (OclSelect X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) P) \\<tau>", "apply(rule subsetI, simp, metis)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>\\<tau>.\n       \\<lbrakk>(\\<delta> X) \\<tau> = true \\<tau> \\<and>\n                (\\<upsilon> y) \\<tau> = true \\<tau>;\n        P y \\<tau> \\<noteq> \\<bottom>;\n        \\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n  (X \\<tau>)\\<rceil>\\<rceil>.\n           P (\\<lambda>_. x) \\<tau> \\<noteq> \\<bottom>;\n        (P y \\<triangleq> false) \\<tau> = true \\<tau>;\n        P (\\<lambda>_. y \\<tau>) \\<tau> = false \\<tau>\\<rbrakk>\n       \\<Longrightarrow> {x \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n             (X \\<tau>)\\<rceil>\\<rceil>.\n                          x \\<noteq> y \\<tau> \\<and>\n                          P (\\<lambda>_. x) \\<tau> \\<noteq> false \\<tau>}\n                         \\<subseteq> {x\n\\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                       (X \\<tau>)\\<rceil>\\<rceil>.\nP (\\<lambda>_. x) \\<tau> \\<noteq> false \\<tau>}\n 2. \\<And>\\<tau>.\n       (\\<delta> X->including\\<^sub>S\\<^sub>e\\<^sub>t(y)) \\<tau> \\<noteq>\n       true \\<tau> \\<Longrightarrow>\n       (if (\\<delta> X->including\\<^sub>S\\<^sub>e\\<^sub>t(y)) \\<tau> =\n           true \\<tau>\n        then if \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n          (X->including\\<^sub>S\\<^sub>e\\<^sub>t(y) \\<tau>)\\<rceil>\\<rceil>.\n                   P (\\<lambda>_. x) \\<tau> = invalid \\<tau>\n             then invalid \\<tau>\n             else Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                   \\<lfloor>\\<lfloor>{x\n\\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                       (X->including\\<^sub>S\\<^sub>e\\<^sub>t(y)\n                         \\<tau>)\\<rceil>\\<rceil>.\nP (\\<lambda>_. x) \\<tau> \\<noteq> false \\<tau>}\\<rfloor>\\<rfloor>\n        else invalid \\<tau>) =\n       OclSelect_body P y\n        (OclSelect X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) P) \\<tau>", "apply(rule subsetI, simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<tau>.\n       (\\<delta> X->including\\<^sub>S\\<^sub>e\\<^sub>t(y)) \\<tau> \\<noteq>\n       true \\<tau> \\<Longrightarrow>\n       (if (\\<delta> X->including\\<^sub>S\\<^sub>e\\<^sub>t(y)) \\<tau> =\n           true \\<tau>\n        then if \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n          (X->including\\<^sub>S\\<^sub>e\\<^sub>t(y) \\<tau>)\\<rceil>\\<rceil>.\n                   P (\\<lambda>_. x) \\<tau> = invalid \\<tau>\n             then invalid \\<tau>\n             else Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                   \\<lfloor>\\<lfloor>{x\n\\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                       (X->including\\<^sub>S\\<^sub>e\\<^sub>t(y)\n                         \\<tau>)\\<rceil>\\<rceil>.\nP (\\<lambda>_. x) \\<tau> \\<noteq> false \\<tau>}\\<rfloor>\\<rfloor>\n        else invalid \\<tau>) =\n       OclSelect_body P y\n        (OclSelect X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) P) \\<tau>", "(* *)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<tau>.\n       (\\<delta> X->including\\<^sub>S\\<^sub>e\\<^sub>t(y)) \\<tau> \\<noteq>\n       true \\<tau> \\<Longrightarrow>\n       (if (\\<delta> X->including\\<^sub>S\\<^sub>e\\<^sub>t(y)) \\<tau> =\n           true \\<tau>\n        then if \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n          (X->including\\<^sub>S\\<^sub>e\\<^sub>t(y) \\<tau>)\\<rceil>\\<rceil>.\n                   P (\\<lambda>_. x) \\<tau> = invalid \\<tau>\n             then invalid \\<tau>\n             else Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                   \\<lfloor>\\<lfloor>{x\n\\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                       (X->including\\<^sub>S\\<^sub>e\\<^sub>t(y)\n                         \\<tau>)\\<rceil>\\<rceil>.\nP (\\<lambda>_. x) \\<tau> \\<noteq> false \\<tau>}\\<rfloor>\\<rfloor>\n        else invalid \\<tau>) =\n       OclSelect_body P y\n        (OclSelect X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) P) \\<tau>", "apply(drule defined_inject_true)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<tau>.\n       (\\<delta> X->including\\<^sub>S\\<^sub>e\\<^sub>t(y)) \\<tau> =\n       false \\<tau> \\<Longrightarrow>\n       (if (\\<delta> X->including\\<^sub>S\\<^sub>e\\<^sub>t(y)) \\<tau> =\n           true \\<tau>\n        then if \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n          (X->including\\<^sub>S\\<^sub>e\\<^sub>t(y) \\<tau>)\\<rceil>\\<rceil>.\n                   P (\\<lambda>_. x) \\<tau> = invalid \\<tau>\n             then invalid \\<tau>\n             else Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                   \\<lfloor>\\<lfloor>{x\n\\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                       (X->including\\<^sub>S\\<^sub>e\\<^sub>t(y)\n                         \\<tau>)\\<rceil>\\<rceil>.\nP (\\<lambda>_. x) \\<tau> \\<noteq> false \\<tau>}\\<rfloor>\\<rfloor>\n        else invalid \\<tau>) =\n       OclSelect_body P y\n        (OclSelect X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) P) \\<tau>", "apply(subgoal_tac \"\\<not> (\\<tau> \\<Turnstile> \\<delta> X) \\<or> \\<not> (\\<tau> \\<Turnstile> \\<upsilon> y)\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>\\<tau>.\n       \\<lbrakk>(\\<delta> X->including\\<^sub>S\\<^sub>e\\<^sub>t(y)) \\<tau> =\n                false \\<tau>;\n        \\<tau> |\\<noteq> \\<delta> X \\<or>\n        \\<tau> |\\<noteq> \\<upsilon> y\\<rbrakk>\n       \\<Longrightarrow> (if (\\<delta> X->including\\<^sub>S\\<^sub>e\\<^sub>t(y))\n                              \\<tau> =\n                             true \\<tau>\n                          then if \\<exists>x\n     \\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                           (X->including\\<^sub>S\\<^sub>e\\<^sub>t(y)\n                             \\<tau>)\\<rceil>\\<rceil>.\n                                     P (\\<lambda>_. x) \\<tau> =\n                                     invalid \\<tau>\n                               then invalid \\<tau>\n                               else Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                     \\<lfloor>\\<lfloor>{x\n                  \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n   (X->including\\<^sub>S\\<^sub>e\\<^sub>t(y) \\<tau>)\\<rceil>\\<rceil>.\n                  P (\\<lambda>_. x) \\<tau> \\<noteq>\n                  false \\<tau>}\\<rfloor>\\<rfloor>\n                          else invalid \\<tau>) =\n                         OclSelect_body P y\n                          (OclSelect X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y)\n                            P)\n                          \\<tau>\n 2. \\<And>\\<tau>.\n       (\\<delta> X->including\\<^sub>S\\<^sub>e\\<^sub>t(y)) \\<tau> =\n       false \\<tau> \\<Longrightarrow>\n       \\<tau> |\\<noteq> \\<delta> X \\<or> \\<tau> |\\<noteq> \\<upsilon> y", "prefer 2"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>\\<tau>.\n       (\\<delta> X->including\\<^sub>S\\<^sub>e\\<^sub>t(y)) \\<tau> =\n       false \\<tau> \\<Longrightarrow>\n       \\<tau> |\\<noteq> \\<delta> X \\<or> \\<tau> |\\<noteq> \\<upsilon> y\n 2. \\<And>\\<tau>.\n       \\<lbrakk>(\\<delta> X->including\\<^sub>S\\<^sub>e\\<^sub>t(y)) \\<tau> =\n                false \\<tau>;\n        \\<tau> |\\<noteq> \\<delta> X \\<or>\n        \\<tau> |\\<noteq> \\<upsilon> y\\<rbrakk>\n       \\<Longrightarrow> (if (\\<delta> X->including\\<^sub>S\\<^sub>e\\<^sub>t(y))\n                              \\<tau> =\n                             true \\<tau>\n                          then if \\<exists>x\n     \\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                           (X->including\\<^sub>S\\<^sub>e\\<^sub>t(y)\n                             \\<tau>)\\<rceil>\\<rceil>.\n                                     P (\\<lambda>_. x) \\<tau> =\n                                     invalid \\<tau>\n                               then invalid \\<tau>\n                               else Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                     \\<lfloor>\\<lfloor>{x\n                  \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n   (X->including\\<^sub>S\\<^sub>e\\<^sub>t(y) \\<tau>)\\<rceil>\\<rceil>.\n                  P (\\<lambda>_. x) \\<tau> \\<noteq>\n                  false \\<tau>}\\<rfloor>\\<rfloor>\n                          else invalid \\<tau>) =\n                         OclSelect_body P y\n                          (OclSelect X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y)\n                            P)\n                          \\<tau>", "apply (metis OclIncluding.def_homo OclIncluding_valid_args_valid OclIncluding_valid_args_valid'' OclValid_def foundation18 valid1)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<tau>.\n       \\<lbrakk>(\\<delta> X->including\\<^sub>S\\<^sub>e\\<^sub>t(y)) \\<tau> =\n                false \\<tau>;\n        \\<tau> |\\<noteq> \\<delta> X \\<or>\n        \\<tau> |\\<noteq> \\<upsilon> y\\<rbrakk>\n       \\<Longrightarrow> (if (\\<delta> X->including\\<^sub>S\\<^sub>e\\<^sub>t(y))\n                              \\<tau> =\n                             true \\<tau>\n                          then if \\<exists>x\n     \\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                           (X->including\\<^sub>S\\<^sub>e\\<^sub>t(y)\n                             \\<tau>)\\<rceil>\\<rceil>.\n                                     P (\\<lambda>_. x) \\<tau> =\n                                     invalid \\<tau>\n                               then invalid \\<tau>\n                               else Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                     \\<lfloor>\\<lfloor>{x\n                  \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n   (X->including\\<^sub>S\\<^sub>e\\<^sub>t(y) \\<tau>)\\<rceil>\\<rceil>.\n                  P (\\<lambda>_. x) \\<tau> \\<noteq>\n                  false \\<tau>}\\<rfloor>\\<rfloor>\n                          else invalid \\<tau>) =\n                         OclSelect_body P y\n                          (OclSelect X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y)\n                            P)\n                          \\<tau>", "apply(subst cp_OclSelect_body, subst cp_OclSelect, subst OclExcluding_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<tau>.\n       \\<lbrakk>(\\<delta> X->including\\<^sub>S\\<^sub>e\\<^sub>t(y)) \\<tau> =\n                false \\<tau>;\n        \\<tau> |\\<noteq> \\<delta> X \\<or>\n        \\<tau> |\\<noteq> \\<upsilon> y\\<rbrakk>\n       \\<Longrightarrow> (if (\\<delta> X->including\\<^sub>S\\<^sub>e\\<^sub>t(y))\n                              \\<tau> =\n                             true \\<tau>\n                          then if \\<exists>x\n     \\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                           (X->including\\<^sub>S\\<^sub>e\\<^sub>t(y)\n                             \\<tau>)\\<rceil>\\<rceil>.\n                                     P (\\<lambda>_. x) \\<tau> =\n                                     invalid \\<tau>\n                               then invalid \\<tau>\n                               else Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                     \\<lfloor>\\<lfloor>{x\n                  \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n   (X->including\\<^sub>S\\<^sub>e\\<^sub>t(y) \\<tau>)\\<rceil>\\<rceil>.\n                  P (\\<lambda>_. x) \\<tau> \\<noteq>\n                  false \\<tau>}\\<rfloor>\\<rfloor>\n                          else invalid \\<tau>) =\n                         OclSelect_body P y\n                          (\\<lambda>_.\n                              OclSelect\n                               (\\<lambda>_.\n                                   if (\\<delta> X) \\<tau> =\ntrue \\<tau> \\<and>\n(\\<upsilon> y) \\<tau> = true \\<tau>\n                                   then Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n   \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n(X \\<tau>)\\<rceil>\\<rceil> -\n                     {y \\<tau>}\\<rfloor>\\<rfloor>\n                                   else \\<bottom>)\n                               P \\<tau>)\n                          \\<tau>", "apply(simp add: OclValid_def false_def true_def, rule conjI, blast)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<tau>.\n       \\<lbrakk>(\\<delta> X and \\<upsilon> y) \\<tau> =\n                \\<lfloor>\\<lfloor>False\\<rfloor>\\<rfloor>;\n        (\\<delta> X) \\<tau> =\n        \\<lfloor>\\<lfloor>True\\<rfloor>\\<rfloor> \\<longrightarrow>\n        (\\<upsilon> y) \\<tau> \\<noteq>\n        \\<lfloor>\\<lfloor>True\\<rfloor>\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> invalid \\<tau> =\n                         OclSelect_body P y\n                          (\\<lambda>_.\n                              OclSelect (\\<lambda>_. \\<bottom>) P \\<tau>)\n                          \\<tau>", "apply(simp add: OclSelect_invalid[simplified invalid_def]\n                  OclSelect_body_strict1[simplified invalid_def]\n                  inv_bot')"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  OclSelect X->including\\<^sub>S\\<^sub>e\\<^sub>t(y) P =\n  OclSelect_body P y (OclSelect X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) P)\n\ngoal:\nNo subgoals!", "qed"], ["", "subsubsection\\<open>Execution Rules on Reject\\<close>"], ["", "lemma OclReject_mtSet_exec[simp,code_unfold]: \"OclReject mtSet P = mtSet\""], ["proof (prove)\ngoal (1 subgoal):\n 1. OclReject Set{} P = Set{}", "by(simp add: OclReject_def)"], ["", "lemma OclReject_including_exec[simp,code_unfold]:\n assumes P_cp : \"cp P\"\n shows \"OclReject (X->including\\<^sub>S\\<^sub>e\\<^sub>t(y)) P = OclSelect_body (not o P) y (OclReject (X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y)) P)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. OclReject X->including\\<^sub>S\\<^sub>e\\<^sub>t(y) P =\n    OclSelect_body (not \\<circ> P) y\n     (OclReject X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(y) P)", "apply(simp add: OclReject_def comp_def, rule OclSelect_including_exec)"], ["proof (prove)\ngoal (1 subgoal):\n 1. cp (\\<lambda>x. not (P x))", "by (metis  assms cp_intro'(5))"], ["", "subsubsection\\<open>Execution Rules Combining Previous Operators\\<close>"], ["", "text\\<open>OclIncluding\\<close>"], ["", "(* logical level : *)"], ["", "lemma OclIncluding_idem0 :\n assumes \"\\<tau> \\<Turnstile> \\<delta> S\"\n     and \"\\<tau> \\<Turnstile> \\<upsilon> i\"\n   shows \"\\<tau> \\<Turnstile> (S->including\\<^sub>S\\<^sub>e\\<^sub>t(i)->including\\<^sub>S\\<^sub>e\\<^sub>t(i) \\<triangleq> (S->including\\<^sub>S\\<^sub>e\\<^sub>t(i)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<tau>\n     \\<Turnstile> S->including\\<^sub>S\\<^sub>e\\<^sub>t(i)->including\\<^sub>S\\<^sub>e\\<^sub>t(i) \\<triangleq>\n                  S->including\\<^sub>S\\<^sub>e\\<^sub>t(i)", "by(simp add: OclIncluding_includes OclIncludes_charn1 assms)"], ["", "(* Pure algebraic level *)"], ["", "theorem OclIncluding_idem[simp,code_unfold]: \"((S :: ('\\<AA>,'a::null)Set)->including\\<^sub>S\\<^sub>e\\<^sub>t(i)->including\\<^sub>S\\<^sub>e\\<^sub>t(i) = (S->including\\<^sub>S\\<^sub>e\\<^sub>t(i)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. S->including\\<^sub>S\\<^sub>e\\<^sub>t(i)->including\\<^sub>S\\<^sub>e\\<^sub>t(i) =\n    S->including\\<^sub>S\\<^sub>e\\<^sub>t(i)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. S->including\\<^sub>S\\<^sub>e\\<^sub>t(i)->including\\<^sub>S\\<^sub>e\\<^sub>t(i) =\n    S->including\\<^sub>S\\<^sub>e\\<^sub>t(i)", "have A: \"\\<And> \\<tau>.   \\<tau> \\<Turnstile> (i \\<triangleq> invalid)   \\<Longrightarrow> (S->including\\<^sub>S\\<^sub>e\\<^sub>t(i)->including\\<^sub>S\\<^sub>e\\<^sub>t(i)) \\<tau> = invalid \\<tau>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<tau>.\n       \\<tau> \\<Turnstile> i \\<triangleq> invalid \\<Longrightarrow>\n       S->including\\<^sub>S\\<^sub>e\\<^sub>t(i)->including\\<^sub>S\\<^sub>e\\<^sub>t(i)\n        \\<tau> =\n       invalid \\<tau>", "apply(rule foundation22[THEN iffD1])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<tau>.\n       \\<tau> \\<Turnstile> i \\<triangleq> invalid \\<Longrightarrow>\n       \\<tau>\n        \\<Turnstile> S->including\\<^sub>S\\<^sub>e\\<^sub>t(i)->including\\<^sub>S\\<^sub>e\\<^sub>t(i) \\<triangleq>\n                     invalid", "by(erule StrongEq_L_subst2_rev, simp,simp)"], ["proof (state)\nthis:\n  ?\\<tau> \\<Turnstile> i \\<triangleq> invalid \\<Longrightarrow>\n  S->including\\<^sub>S\\<^sub>e\\<^sub>t(i)->including\\<^sub>S\\<^sub>e\\<^sub>t(i)\n   ?\\<tau> =\n  invalid ?\\<tau>\n\ngoal (1 subgoal):\n 1. S->including\\<^sub>S\\<^sub>e\\<^sub>t(i)->including\\<^sub>S\\<^sub>e\\<^sub>t(i) =\n    S->including\\<^sub>S\\<^sub>e\\<^sub>t(i)", "have A':\"\\<And> \\<tau>.   \\<tau> \\<Turnstile> (i \\<triangleq> invalid)   \\<Longrightarrow> (S->including\\<^sub>S\\<^sub>e\\<^sub>t(i)) \\<tau> = invalid \\<tau>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<tau>.\n       \\<tau> \\<Turnstile> i \\<triangleq> invalid \\<Longrightarrow>\n       S->including\\<^sub>S\\<^sub>e\\<^sub>t(i) \\<tau> = invalid \\<tau>", "apply(rule foundation22[THEN iffD1])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<tau>.\n       \\<tau> \\<Turnstile> i \\<triangleq> invalid \\<Longrightarrow>\n       \\<tau>\n        \\<Turnstile> S->including\\<^sub>S\\<^sub>e\\<^sub>t(i) \\<triangleq>\n                     invalid", "by(erule StrongEq_L_subst2_rev, simp,simp)"], ["proof (state)\nthis:\n  ?\\<tau> \\<Turnstile> i \\<triangleq> invalid \\<Longrightarrow>\n  S->including\\<^sub>S\\<^sub>e\\<^sub>t(i) ?\\<tau> = invalid ?\\<tau>\n\ngoal (1 subgoal):\n 1. S->including\\<^sub>S\\<^sub>e\\<^sub>t(i)->including\\<^sub>S\\<^sub>e\\<^sub>t(i) =\n    S->including\\<^sub>S\\<^sub>e\\<^sub>t(i)", "have C: \"\\<And> \\<tau>.   \\<tau> \\<Turnstile> (S \\<triangleq> invalid)   \\<Longrightarrow> (S->including\\<^sub>S\\<^sub>e\\<^sub>t(i)->including\\<^sub>S\\<^sub>e\\<^sub>t(i)) \\<tau> = invalid \\<tau>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<tau>.\n       \\<tau> \\<Turnstile> S \\<triangleq> invalid \\<Longrightarrow>\n       S->including\\<^sub>S\\<^sub>e\\<^sub>t(i)->including\\<^sub>S\\<^sub>e\\<^sub>t(i)\n        \\<tau> =\n       invalid \\<tau>", "apply(rule foundation22[THEN iffD1])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<tau>.\n       \\<tau> \\<Turnstile> S \\<triangleq> invalid \\<Longrightarrow>\n       \\<tau>\n        \\<Turnstile> S->including\\<^sub>S\\<^sub>e\\<^sub>t(i)->including\\<^sub>S\\<^sub>e\\<^sub>t(i) \\<triangleq>\n                     invalid", "by(erule StrongEq_L_subst2_rev, simp,simp)"], ["proof (state)\nthis:\n  ?\\<tau> \\<Turnstile> S \\<triangleq> invalid \\<Longrightarrow>\n  S->including\\<^sub>S\\<^sub>e\\<^sub>t(i)->including\\<^sub>S\\<^sub>e\\<^sub>t(i)\n   ?\\<tau> =\n  invalid ?\\<tau>\n\ngoal (1 subgoal):\n 1. S->including\\<^sub>S\\<^sub>e\\<^sub>t(i)->including\\<^sub>S\\<^sub>e\\<^sub>t(i) =\n    S->including\\<^sub>S\\<^sub>e\\<^sub>t(i)", "have C': \"\\<And> \\<tau>.  \\<tau> \\<Turnstile> (S \\<triangleq> invalid)   \\<Longrightarrow> (S->including\\<^sub>S\\<^sub>e\\<^sub>t(i)) \\<tau> = invalid \\<tau>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<tau>.\n       \\<tau> \\<Turnstile> S \\<triangleq> invalid \\<Longrightarrow>\n       S->including\\<^sub>S\\<^sub>e\\<^sub>t(i) \\<tau> = invalid \\<tau>", "apply(rule foundation22[THEN iffD1])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<tau>.\n       \\<tau> \\<Turnstile> S \\<triangleq> invalid \\<Longrightarrow>\n       \\<tau>\n        \\<Turnstile> S->including\\<^sub>S\\<^sub>e\\<^sub>t(i) \\<triangleq>\n                     invalid", "by(erule StrongEq_L_subst2_rev, simp,simp)"], ["proof (state)\nthis:\n  ?\\<tau> \\<Turnstile> S \\<triangleq> invalid \\<Longrightarrow>\n  S->including\\<^sub>S\\<^sub>e\\<^sub>t(i) ?\\<tau> = invalid ?\\<tau>\n\ngoal (1 subgoal):\n 1. S->including\\<^sub>S\\<^sub>e\\<^sub>t(i)->including\\<^sub>S\\<^sub>e\\<^sub>t(i) =\n    S->including\\<^sub>S\\<^sub>e\\<^sub>t(i)", "have D: \"\\<And> \\<tau>.   \\<tau> \\<Turnstile> (S \\<triangleq> null)   \\<Longrightarrow> (S->including\\<^sub>S\\<^sub>e\\<^sub>t(i)->including\\<^sub>S\\<^sub>e\\<^sub>t(i)) \\<tau> = invalid \\<tau>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<tau>.\n       \\<tau> \\<Turnstile> S \\<triangleq> null \\<Longrightarrow>\n       S->including\\<^sub>S\\<^sub>e\\<^sub>t(i)->including\\<^sub>S\\<^sub>e\\<^sub>t(i)\n        \\<tau> =\n       invalid \\<tau>", "apply(rule foundation22[THEN iffD1])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<tau>.\n       \\<tau> \\<Turnstile> S \\<triangleq> null \\<Longrightarrow>\n       \\<tau>\n        \\<Turnstile> S->including\\<^sub>S\\<^sub>e\\<^sub>t(i)->including\\<^sub>S\\<^sub>e\\<^sub>t(i) \\<triangleq>\n                     invalid", "by(erule StrongEq_L_subst2_rev, simp,simp)"], ["proof (state)\nthis:\n  ?\\<tau> \\<Turnstile> S \\<triangleq> null \\<Longrightarrow>\n  S->including\\<^sub>S\\<^sub>e\\<^sub>t(i)->including\\<^sub>S\\<^sub>e\\<^sub>t(i)\n   ?\\<tau> =\n  invalid ?\\<tau>\n\ngoal (1 subgoal):\n 1. S->including\\<^sub>S\\<^sub>e\\<^sub>t(i)->including\\<^sub>S\\<^sub>e\\<^sub>t(i) =\n    S->including\\<^sub>S\\<^sub>e\\<^sub>t(i)", "have D': \"\\<And> \\<tau>.  \\<tau> \\<Turnstile> (S \\<triangleq> null)   \\<Longrightarrow> (S->including\\<^sub>S\\<^sub>e\\<^sub>t(i)) \\<tau> = invalid \\<tau>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<tau>.\n       \\<tau> \\<Turnstile> S \\<triangleq> null \\<Longrightarrow>\n       S->including\\<^sub>S\\<^sub>e\\<^sub>t(i) \\<tau> = invalid \\<tau>", "apply(rule foundation22[THEN iffD1])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<tau>.\n       \\<tau> \\<Turnstile> S \\<triangleq> null \\<Longrightarrow>\n       \\<tau>\n        \\<Turnstile> S->including\\<^sub>S\\<^sub>e\\<^sub>t(i) \\<triangleq>\n                     invalid", "by(erule StrongEq_L_subst2_rev, simp,simp)"], ["proof (state)\nthis:\n  ?\\<tau> \\<Turnstile> S \\<triangleq> null \\<Longrightarrow>\n  S->including\\<^sub>S\\<^sub>e\\<^sub>t(i) ?\\<tau> = invalid ?\\<tau>\n\ngoal (1 subgoal):\n 1. S->including\\<^sub>S\\<^sub>e\\<^sub>t(i)->including\\<^sub>S\\<^sub>e\\<^sub>t(i) =\n    S->including\\<^sub>S\\<^sub>e\\<^sub>t(i)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. S->including\\<^sub>S\\<^sub>e\\<^sub>t(i)->including\\<^sub>S\\<^sub>e\\<^sub>t(i) =\n    S->including\\<^sub>S\\<^sub>e\\<^sub>t(i)", "apply(rule ext, rename_tac \\<tau>)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<tau>.\n       S->including\\<^sub>S\\<^sub>e\\<^sub>t(i)->including\\<^sub>S\\<^sub>e\\<^sub>t(i)\n        \\<tau> =\n       S->including\\<^sub>S\\<^sub>e\\<^sub>t(i) \\<tau>", "apply(case_tac \"\\<tau> \\<Turnstile> (\\<upsilon> i)\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>\\<tau>.\n       \\<tau> \\<Turnstile> \\<upsilon> i \\<Longrightarrow>\n       S->including\\<^sub>S\\<^sub>e\\<^sub>t(i)->including\\<^sub>S\\<^sub>e\\<^sub>t(i)\n        \\<tau> =\n       S->including\\<^sub>S\\<^sub>e\\<^sub>t(i) \\<tau>\n 2. \\<And>\\<tau>.\n       \\<tau> |\\<noteq> \\<upsilon> i \\<Longrightarrow>\n       S->including\\<^sub>S\\<^sub>e\\<^sub>t(i)->including\\<^sub>S\\<^sub>e\\<^sub>t(i)\n        \\<tau> =\n       S->including\\<^sub>S\\<^sub>e\\<^sub>t(i) \\<tau>", "apply(case_tac \"\\<tau> \\<Turnstile> (\\<delta> S)\")"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>\\<tau>.\n       \\<lbrakk>\\<tau> \\<Turnstile> \\<upsilon> i;\n        \\<tau> \\<Turnstile> \\<delta> S\\<rbrakk>\n       \\<Longrightarrow> S->including\\<^sub>S\\<^sub>e\\<^sub>t(i)->including\\<^sub>S\\<^sub>e\\<^sub>t(i)\n                          \\<tau> =\n                         S->including\\<^sub>S\\<^sub>e\\<^sub>t(i) \\<tau>\n 2. \\<And>\\<tau>.\n       \\<lbrakk>\\<tau> \\<Turnstile> \\<upsilon> i;\n        \\<tau> |\\<noteq> \\<delta> S\\<rbrakk>\n       \\<Longrightarrow> S->including\\<^sub>S\\<^sub>e\\<^sub>t(i)->including\\<^sub>S\\<^sub>e\\<^sub>t(i)\n                          \\<tau> =\n                         S->including\\<^sub>S\\<^sub>e\\<^sub>t(i) \\<tau>\n 3. \\<And>\\<tau>.\n       \\<tau> |\\<noteq> \\<upsilon> i \\<Longrightarrow>\n       S->including\\<^sub>S\\<^sub>e\\<^sub>t(i)->including\\<^sub>S\\<^sub>e\\<^sub>t(i)\n        \\<tau> =\n       S->including\\<^sub>S\\<^sub>e\\<^sub>t(i) \\<tau>", "apply(simp only: OclIncluding_idem0[THEN foundation22[THEN iffD1]])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>\\<tau>.\n       \\<lbrakk>\\<tau> \\<Turnstile> \\<upsilon> i;\n        \\<tau> |\\<noteq> \\<delta> S\\<rbrakk>\n       \\<Longrightarrow> S->including\\<^sub>S\\<^sub>e\\<^sub>t(i)->including\\<^sub>S\\<^sub>e\\<^sub>t(i)\n                          \\<tau> =\n                         S->including\\<^sub>S\\<^sub>e\\<^sub>t(i) \\<tau>\n 2. \\<And>\\<tau>.\n       \\<tau> |\\<noteq> \\<upsilon> i \\<Longrightarrow>\n       S->including\\<^sub>S\\<^sub>e\\<^sub>t(i)->including\\<^sub>S\\<^sub>e\\<^sub>t(i)\n        \\<tau> =\n       S->including\\<^sub>S\\<^sub>e\\<^sub>t(i) \\<tau>", "apply(simp add: foundation16', elim disjE)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>\\<tau>.\n       \\<lbrakk>\\<tau> \\<Turnstile> \\<upsilon> i;\n        S \\<tau> = invalid \\<tau>\\<rbrakk>\n       \\<Longrightarrow> S->including\\<^sub>S\\<^sub>e\\<^sub>t(i)->including\\<^sub>S\\<^sub>e\\<^sub>t(i)\n                          \\<tau> =\n                         S->including\\<^sub>S\\<^sub>e\\<^sub>t(i) \\<tau>\n 2. \\<And>\\<tau>.\n       \\<lbrakk>\\<tau> \\<Turnstile> \\<upsilon> i;\n        S \\<tau> = null \\<tau>\\<rbrakk>\n       \\<Longrightarrow> S->including\\<^sub>S\\<^sub>e\\<^sub>t(i)->including\\<^sub>S\\<^sub>e\\<^sub>t(i)\n                          \\<tau> =\n                         S->including\\<^sub>S\\<^sub>e\\<^sub>t(i) \\<tau>\n 3. \\<And>\\<tau>.\n       \\<tau> |\\<noteq> \\<upsilon> i \\<Longrightarrow>\n       S->including\\<^sub>S\\<^sub>e\\<^sub>t(i)->including\\<^sub>S\\<^sub>e\\<^sub>t(i)\n        \\<tau> =\n       S->including\\<^sub>S\\<^sub>e\\<^sub>t(i) \\<tau>", "apply(simp add: C[OF foundation22[THEN iffD2]] C'[OF foundation22[THEN iffD2]])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>\\<tau>.\n       \\<lbrakk>\\<tau> \\<Turnstile> \\<upsilon> i;\n        S \\<tau> = null \\<tau>\\<rbrakk>\n       \\<Longrightarrow> S->including\\<^sub>S\\<^sub>e\\<^sub>t(i)->including\\<^sub>S\\<^sub>e\\<^sub>t(i)\n                          \\<tau> =\n                         S->including\\<^sub>S\\<^sub>e\\<^sub>t(i) \\<tau>\n 2. \\<And>\\<tau>.\n       \\<tau> |\\<noteq> \\<upsilon> i \\<Longrightarrow>\n       S->including\\<^sub>S\\<^sub>e\\<^sub>t(i)->including\\<^sub>S\\<^sub>e\\<^sub>t(i)\n        \\<tau> =\n       S->including\\<^sub>S\\<^sub>e\\<^sub>t(i) \\<tau>", "apply(simp add: D[OF foundation22[THEN iffD2]] D'[OF foundation22[THEN iffD2]])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<tau>.\n       \\<tau> |\\<noteq> \\<upsilon> i \\<Longrightarrow>\n       S->including\\<^sub>S\\<^sub>e\\<^sub>t(i)->including\\<^sub>S\\<^sub>e\\<^sub>t(i)\n        \\<tau> =\n       S->including\\<^sub>S\\<^sub>e\\<^sub>t(i) \\<tau>", "apply(simp add:foundation18 A[OF foundation22[THEN iffD2]] A'[OF foundation22[THEN iffD2]])"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  S->including\\<^sub>S\\<^sub>e\\<^sub>t(i)->including\\<^sub>S\\<^sub>e\\<^sub>t(i) =\n  S->including\\<^sub>S\\<^sub>e\\<^sub>t(i)\n\ngoal:\nNo subgoals!", "qed"], ["", "text\\<open>OclExcluding\\<close>"], ["", "(* logical level : *)"], ["", "lemma OclExcluding_idem0 :\n assumes \"\\<tau> \\<Turnstile> \\<delta> S\"\n     and \"\\<tau> \\<Turnstile> \\<upsilon> i\"\n   shows \"\\<tau> \\<Turnstile> (S->excluding\\<^sub>S\\<^sub>e\\<^sub>t(i)->excluding\\<^sub>S\\<^sub>e\\<^sub>t(i) \\<triangleq> (S->excluding\\<^sub>S\\<^sub>e\\<^sub>t(i)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<tau>\n     \\<Turnstile> S->excluding\\<^sub>S\\<^sub>e\\<^sub>t(i)->excluding\\<^sub>S\\<^sub>e\\<^sub>t(i) \\<triangleq>\n                  S->excluding\\<^sub>S\\<^sub>e\\<^sub>t(i)", "by(simp add: OclExcluding_excludes OclExcludes_charn1 assms)"], ["", "(* Pure algebraic level *)"], ["", "theorem OclExcluding_idem[simp,code_unfold]: \"((S->excluding\\<^sub>S\\<^sub>e\\<^sub>t(i))->excluding\\<^sub>S\\<^sub>e\\<^sub>t(i)) = (S->excluding\\<^sub>S\\<^sub>e\\<^sub>t(i))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. S->excluding\\<^sub>S\\<^sub>e\\<^sub>t(i)->excluding\\<^sub>S\\<^sub>e\\<^sub>t(i) =\n    S->excluding\\<^sub>S\\<^sub>e\\<^sub>t(i)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. S->excluding\\<^sub>S\\<^sub>e\\<^sub>t(i)->excluding\\<^sub>S\\<^sub>e\\<^sub>t(i) =\n    S->excluding\\<^sub>S\\<^sub>e\\<^sub>t(i)", "have A: \"\\<And> \\<tau>.   \\<tau> \\<Turnstile> (i \\<triangleq> invalid)   \\<Longrightarrow> (S->excluding\\<^sub>S\\<^sub>e\\<^sub>t(i)->excluding\\<^sub>S\\<^sub>e\\<^sub>t(i)) \\<tau> = invalid \\<tau>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<tau>.\n       \\<tau> \\<Turnstile> i \\<triangleq> invalid \\<Longrightarrow>\n       S->excluding\\<^sub>S\\<^sub>e\\<^sub>t(i)->excluding\\<^sub>S\\<^sub>e\\<^sub>t(i)\n        \\<tau> =\n       invalid \\<tau>", "apply(rule foundation22[THEN iffD1])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<tau>.\n       \\<tau> \\<Turnstile> i \\<triangleq> invalid \\<Longrightarrow>\n       \\<tau>\n        \\<Turnstile> S->excluding\\<^sub>S\\<^sub>e\\<^sub>t(i)->excluding\\<^sub>S\\<^sub>e\\<^sub>t(i) \\<triangleq>\n                     invalid", "by(erule StrongEq_L_subst2_rev, simp,simp)"], ["proof (state)\nthis:\n  ?\\<tau> \\<Turnstile> i \\<triangleq> invalid \\<Longrightarrow>\n  S->excluding\\<^sub>S\\<^sub>e\\<^sub>t(i)->excluding\\<^sub>S\\<^sub>e\\<^sub>t(i)\n   ?\\<tau> =\n  invalid ?\\<tau>\n\ngoal (1 subgoal):\n 1. S->excluding\\<^sub>S\\<^sub>e\\<^sub>t(i)->excluding\\<^sub>S\\<^sub>e\\<^sub>t(i) =\n    S->excluding\\<^sub>S\\<^sub>e\\<^sub>t(i)", "have A':\"\\<And> \\<tau>.   \\<tau> \\<Turnstile> (i \\<triangleq> invalid)   \\<Longrightarrow> (S->excluding\\<^sub>S\\<^sub>e\\<^sub>t(i)) \\<tau> = invalid \\<tau>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<tau>.\n       \\<tau> \\<Turnstile> i \\<triangleq> invalid \\<Longrightarrow>\n       S->excluding\\<^sub>S\\<^sub>e\\<^sub>t(i) \\<tau> = invalid \\<tau>", "apply(rule foundation22[THEN iffD1])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<tau>.\n       \\<tau> \\<Turnstile> i \\<triangleq> invalid \\<Longrightarrow>\n       \\<tau>\n        \\<Turnstile> S->excluding\\<^sub>S\\<^sub>e\\<^sub>t(i) \\<triangleq>\n                     invalid", "by(erule StrongEq_L_subst2_rev, simp,simp)"], ["proof (state)\nthis:\n  ?\\<tau> \\<Turnstile> i \\<triangleq> invalid \\<Longrightarrow>\n  S->excluding\\<^sub>S\\<^sub>e\\<^sub>t(i) ?\\<tau> = invalid ?\\<tau>\n\ngoal (1 subgoal):\n 1. S->excluding\\<^sub>S\\<^sub>e\\<^sub>t(i)->excluding\\<^sub>S\\<^sub>e\\<^sub>t(i) =\n    S->excluding\\<^sub>S\\<^sub>e\\<^sub>t(i)", "have C: \"\\<And> \\<tau>.   \\<tau> \\<Turnstile> (S \\<triangleq> invalid)   \\<Longrightarrow> (S->excluding\\<^sub>S\\<^sub>e\\<^sub>t(i)->excluding\\<^sub>S\\<^sub>e\\<^sub>t(i)) \\<tau> = invalid \\<tau>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<tau>.\n       \\<tau> \\<Turnstile> S \\<triangleq> invalid \\<Longrightarrow>\n       S->excluding\\<^sub>S\\<^sub>e\\<^sub>t(i)->excluding\\<^sub>S\\<^sub>e\\<^sub>t(i)\n        \\<tau> =\n       invalid \\<tau>", "apply(rule foundation22[THEN iffD1])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<tau>.\n       \\<tau> \\<Turnstile> S \\<triangleq> invalid \\<Longrightarrow>\n       \\<tau>\n        \\<Turnstile> S->excluding\\<^sub>S\\<^sub>e\\<^sub>t(i)->excluding\\<^sub>S\\<^sub>e\\<^sub>t(i) \\<triangleq>\n                     invalid", "by(erule StrongEq_L_subst2_rev, simp,simp)"], ["proof (state)\nthis:\n  ?\\<tau> \\<Turnstile> S \\<triangleq> invalid \\<Longrightarrow>\n  S->excluding\\<^sub>S\\<^sub>e\\<^sub>t(i)->excluding\\<^sub>S\\<^sub>e\\<^sub>t(i)\n   ?\\<tau> =\n  invalid ?\\<tau>\n\ngoal (1 subgoal):\n 1. S->excluding\\<^sub>S\\<^sub>e\\<^sub>t(i)->excluding\\<^sub>S\\<^sub>e\\<^sub>t(i) =\n    S->excluding\\<^sub>S\\<^sub>e\\<^sub>t(i)", "have C': \"\\<And> \\<tau>.  \\<tau> \\<Turnstile> (S \\<triangleq> invalid)   \\<Longrightarrow> (S->excluding\\<^sub>S\\<^sub>e\\<^sub>t(i)) \\<tau> = invalid \\<tau>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<tau>.\n       \\<tau> \\<Turnstile> S \\<triangleq> invalid \\<Longrightarrow>\n       S->excluding\\<^sub>S\\<^sub>e\\<^sub>t(i) \\<tau> = invalid \\<tau>", "apply(rule foundation22[THEN iffD1])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<tau>.\n       \\<tau> \\<Turnstile> S \\<triangleq> invalid \\<Longrightarrow>\n       \\<tau>\n        \\<Turnstile> S->excluding\\<^sub>S\\<^sub>e\\<^sub>t(i) \\<triangleq>\n                     invalid", "by(erule StrongEq_L_subst2_rev, simp,simp)"], ["proof (state)\nthis:\n  ?\\<tau> \\<Turnstile> S \\<triangleq> invalid \\<Longrightarrow>\n  S->excluding\\<^sub>S\\<^sub>e\\<^sub>t(i) ?\\<tau> = invalid ?\\<tau>\n\ngoal (1 subgoal):\n 1. S->excluding\\<^sub>S\\<^sub>e\\<^sub>t(i)->excluding\\<^sub>S\\<^sub>e\\<^sub>t(i) =\n    S->excluding\\<^sub>S\\<^sub>e\\<^sub>t(i)", "have D: \"\\<And> \\<tau>.   \\<tau> \\<Turnstile> (S \\<triangleq> null)   \\<Longrightarrow> (S->excluding\\<^sub>S\\<^sub>e\\<^sub>t(i)->excluding\\<^sub>S\\<^sub>e\\<^sub>t(i)) \\<tau> = invalid \\<tau>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<tau>.\n       \\<tau> \\<Turnstile> S \\<triangleq> null \\<Longrightarrow>\n       S->excluding\\<^sub>S\\<^sub>e\\<^sub>t(i)->excluding\\<^sub>S\\<^sub>e\\<^sub>t(i)\n        \\<tau> =\n       invalid \\<tau>", "apply(rule foundation22[THEN iffD1])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<tau>.\n       \\<tau> \\<Turnstile> S \\<triangleq> null \\<Longrightarrow>\n       \\<tau>\n        \\<Turnstile> S->excluding\\<^sub>S\\<^sub>e\\<^sub>t(i)->excluding\\<^sub>S\\<^sub>e\\<^sub>t(i) \\<triangleq>\n                     invalid", "by(erule StrongEq_L_subst2_rev, simp,simp)"], ["proof (state)\nthis:\n  ?\\<tau> \\<Turnstile> S \\<triangleq> null \\<Longrightarrow>\n  S->excluding\\<^sub>S\\<^sub>e\\<^sub>t(i)->excluding\\<^sub>S\\<^sub>e\\<^sub>t(i)\n   ?\\<tau> =\n  invalid ?\\<tau>\n\ngoal (1 subgoal):\n 1. S->excluding\\<^sub>S\\<^sub>e\\<^sub>t(i)->excluding\\<^sub>S\\<^sub>e\\<^sub>t(i) =\n    S->excluding\\<^sub>S\\<^sub>e\\<^sub>t(i)", "have D': \"\\<And> \\<tau>.  \\<tau> \\<Turnstile> (S \\<triangleq> null)   \\<Longrightarrow> (S->excluding\\<^sub>S\\<^sub>e\\<^sub>t(i)) \\<tau> = invalid \\<tau>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<tau>.\n       \\<tau> \\<Turnstile> S \\<triangleq> null \\<Longrightarrow>\n       S->excluding\\<^sub>S\\<^sub>e\\<^sub>t(i) \\<tau> = invalid \\<tau>", "apply(rule foundation22[THEN iffD1])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<tau>.\n       \\<tau> \\<Turnstile> S \\<triangleq> null \\<Longrightarrow>\n       \\<tau>\n        \\<Turnstile> S->excluding\\<^sub>S\\<^sub>e\\<^sub>t(i) \\<triangleq>\n                     invalid", "by(erule StrongEq_L_subst2_rev, simp,simp)"], ["proof (state)\nthis:\n  ?\\<tau> \\<Turnstile> S \\<triangleq> null \\<Longrightarrow>\n  S->excluding\\<^sub>S\\<^sub>e\\<^sub>t(i) ?\\<tau> = invalid ?\\<tau>\n\ngoal (1 subgoal):\n 1. S->excluding\\<^sub>S\\<^sub>e\\<^sub>t(i)->excluding\\<^sub>S\\<^sub>e\\<^sub>t(i) =\n    S->excluding\\<^sub>S\\<^sub>e\\<^sub>t(i)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. S->excluding\\<^sub>S\\<^sub>e\\<^sub>t(i)->excluding\\<^sub>S\\<^sub>e\\<^sub>t(i) =\n    S->excluding\\<^sub>S\\<^sub>e\\<^sub>t(i)", "apply(rule ext, rename_tac \\<tau>)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<tau>.\n       S->excluding\\<^sub>S\\<^sub>e\\<^sub>t(i)->excluding\\<^sub>S\\<^sub>e\\<^sub>t(i)\n        \\<tau> =\n       S->excluding\\<^sub>S\\<^sub>e\\<^sub>t(i) \\<tau>", "apply(case_tac \"\\<tau> \\<Turnstile> (\\<upsilon> i)\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>\\<tau>.\n       \\<tau> \\<Turnstile> \\<upsilon> i \\<Longrightarrow>\n       S->excluding\\<^sub>S\\<^sub>e\\<^sub>t(i)->excluding\\<^sub>S\\<^sub>e\\<^sub>t(i)\n        \\<tau> =\n       S->excluding\\<^sub>S\\<^sub>e\\<^sub>t(i) \\<tau>\n 2. \\<And>\\<tau>.\n       \\<tau> |\\<noteq> \\<upsilon> i \\<Longrightarrow>\n       S->excluding\\<^sub>S\\<^sub>e\\<^sub>t(i)->excluding\\<^sub>S\\<^sub>e\\<^sub>t(i)\n        \\<tau> =\n       S->excluding\\<^sub>S\\<^sub>e\\<^sub>t(i) \\<tau>", "apply(case_tac \"\\<tau> \\<Turnstile> (\\<delta> S)\")"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>\\<tau>.\n       \\<lbrakk>\\<tau> \\<Turnstile> \\<upsilon> i;\n        \\<tau> \\<Turnstile> \\<delta> S\\<rbrakk>\n       \\<Longrightarrow> S->excluding\\<^sub>S\\<^sub>e\\<^sub>t(i)->excluding\\<^sub>S\\<^sub>e\\<^sub>t(i)\n                          \\<tau> =\n                         S->excluding\\<^sub>S\\<^sub>e\\<^sub>t(i) \\<tau>\n 2. \\<And>\\<tau>.\n       \\<lbrakk>\\<tau> \\<Turnstile> \\<upsilon> i;\n        \\<tau> |\\<noteq> \\<delta> S\\<rbrakk>\n       \\<Longrightarrow> S->excluding\\<^sub>S\\<^sub>e\\<^sub>t(i)->excluding\\<^sub>S\\<^sub>e\\<^sub>t(i)\n                          \\<tau> =\n                         S->excluding\\<^sub>S\\<^sub>e\\<^sub>t(i) \\<tau>\n 3. \\<And>\\<tau>.\n       \\<tau> |\\<noteq> \\<upsilon> i \\<Longrightarrow>\n       S->excluding\\<^sub>S\\<^sub>e\\<^sub>t(i)->excluding\\<^sub>S\\<^sub>e\\<^sub>t(i)\n        \\<tau> =\n       S->excluding\\<^sub>S\\<^sub>e\\<^sub>t(i) \\<tau>", "apply(simp only: OclExcluding_idem0[THEN foundation22[THEN iffD1]])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>\\<tau>.\n       \\<lbrakk>\\<tau> \\<Turnstile> \\<upsilon> i;\n        \\<tau> |\\<noteq> \\<delta> S\\<rbrakk>\n       \\<Longrightarrow> S->excluding\\<^sub>S\\<^sub>e\\<^sub>t(i)->excluding\\<^sub>S\\<^sub>e\\<^sub>t(i)\n                          \\<tau> =\n                         S->excluding\\<^sub>S\\<^sub>e\\<^sub>t(i) \\<tau>\n 2. \\<And>\\<tau>.\n       \\<tau> |\\<noteq> \\<upsilon> i \\<Longrightarrow>\n       S->excluding\\<^sub>S\\<^sub>e\\<^sub>t(i)->excluding\\<^sub>S\\<^sub>e\\<^sub>t(i)\n        \\<tau> =\n       S->excluding\\<^sub>S\\<^sub>e\\<^sub>t(i) \\<tau>", "apply(simp add: foundation16', elim disjE)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>\\<tau>.\n       \\<lbrakk>\\<tau> \\<Turnstile> \\<upsilon> i;\n        S \\<tau> = invalid \\<tau>\\<rbrakk>\n       \\<Longrightarrow> S->excluding\\<^sub>S\\<^sub>e\\<^sub>t(i)->excluding\\<^sub>S\\<^sub>e\\<^sub>t(i)\n                          \\<tau> =\n                         S->excluding\\<^sub>S\\<^sub>e\\<^sub>t(i) \\<tau>\n 2. \\<And>\\<tau>.\n       \\<lbrakk>\\<tau> \\<Turnstile> \\<upsilon> i;\n        S \\<tau> = null \\<tau>\\<rbrakk>\n       \\<Longrightarrow> S->excluding\\<^sub>S\\<^sub>e\\<^sub>t(i)->excluding\\<^sub>S\\<^sub>e\\<^sub>t(i)\n                          \\<tau> =\n                         S->excluding\\<^sub>S\\<^sub>e\\<^sub>t(i) \\<tau>\n 3. \\<And>\\<tau>.\n       \\<tau> |\\<noteq> \\<upsilon> i \\<Longrightarrow>\n       S->excluding\\<^sub>S\\<^sub>e\\<^sub>t(i)->excluding\\<^sub>S\\<^sub>e\\<^sub>t(i)\n        \\<tau> =\n       S->excluding\\<^sub>S\\<^sub>e\\<^sub>t(i) \\<tau>", "apply(simp add: C[OF foundation22[THEN iffD2]] C'[OF foundation22[THEN iffD2]])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>\\<tau>.\n       \\<lbrakk>\\<tau> \\<Turnstile> \\<upsilon> i;\n        S \\<tau> = null \\<tau>\\<rbrakk>\n       \\<Longrightarrow> S->excluding\\<^sub>S\\<^sub>e\\<^sub>t(i)->excluding\\<^sub>S\\<^sub>e\\<^sub>t(i)\n                          \\<tau> =\n                         S->excluding\\<^sub>S\\<^sub>e\\<^sub>t(i) \\<tau>\n 2. \\<And>\\<tau>.\n       \\<tau> |\\<noteq> \\<upsilon> i \\<Longrightarrow>\n       S->excluding\\<^sub>S\\<^sub>e\\<^sub>t(i)->excluding\\<^sub>S\\<^sub>e\\<^sub>t(i)\n        \\<tau> =\n       S->excluding\\<^sub>S\\<^sub>e\\<^sub>t(i) \\<tau>", "apply(simp add: D[OF foundation22[THEN iffD2]] D'[OF foundation22[THEN iffD2]])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<tau>.\n       \\<tau> |\\<noteq> \\<upsilon> i \\<Longrightarrow>\n       S->excluding\\<^sub>S\\<^sub>e\\<^sub>t(i)->excluding\\<^sub>S\\<^sub>e\\<^sub>t(i)\n        \\<tau> =\n       S->excluding\\<^sub>S\\<^sub>e\\<^sub>t(i) \\<tau>", "apply(simp add:foundation18 A[OF foundation22[THEN iffD2]] A'[OF foundation22[THEN iffD2]])"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  S->excluding\\<^sub>S\\<^sub>e\\<^sub>t(i)->excluding\\<^sub>S\\<^sub>e\\<^sub>t(i) =\n  S->excluding\\<^sub>S\\<^sub>e\\<^sub>t(i)\n\ngoal:\nNo subgoals!", "qed"], ["", "text\\<open>OclIncludes\\<close>"], ["", "lemma OclIncludes_any[simp,code_unfold]:\n      \"X->includes\\<^sub>S\\<^sub>e\\<^sub>t(X->any\\<^sub>S\\<^sub>e\\<^sub>t()) = (if \\<delta> X then\n                                  if \\<delta> (X->size\\<^sub>S\\<^sub>e\\<^sub>t()) then not(X->isEmpty\\<^sub>S\\<^sub>e\\<^sub>t())\n                                  else X->includes\\<^sub>S\\<^sub>e\\<^sub>t(null) endif\n                                else invalid endif)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. X->includes\\<^sub>S\\<^sub>e\\<^sub>t(X->any\\<^sub>S\\<^sub>e\\<^sub>t()) =\n    (if \\<delta> X then if \\<delta> X->size\\<^sub>S\\<^sub>e\\<^sub>t() then not\nX->isEmpty\\<^sub>S\\<^sub>e\\<^sub>t() else X->includes\\<^sub>S\\<^sub>e\\<^sub>t(null) endif else invalid endif)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. X->includes\\<^sub>S\\<^sub>e\\<^sub>t(X->any\\<^sub>S\\<^sub>e\\<^sub>t()) =\n    (if \\<delta> X then if \\<delta> X->size\\<^sub>S\\<^sub>e\\<^sub>t() then not\nX->isEmpty\\<^sub>S\\<^sub>e\\<^sub>t() else X->includes\\<^sub>S\\<^sub>e\\<^sub>t(null) endif else invalid endif)", "have defined_inject_true : \"\\<And>\\<tau> P. (\\<delta> P) \\<tau> \\<noteq> true \\<tau> \\<Longrightarrow> (\\<delta> P) \\<tau> = false \\<tau>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<tau> P.\n       (\\<delta> P) \\<tau> \\<noteq> true \\<tau> \\<Longrightarrow>\n       (\\<delta> P) \\<tau> = false \\<tau>", "apply(simp add: defined_def true_def false_def bot_fun_def bot_option_def\n                      null_fun_def null_option_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<tau> P.\n       (if P \\<tau> = \\<bottom> \\<or> P \\<tau> = null then false \\<tau>\n        else true \\<tau>) \\<noteq>\n       \\<lfloor>\\<lfloor>True\\<rfloor>\\<rfloor> \\<Longrightarrow>\n       P \\<tau> = \\<bottom> \\<or> P \\<tau> = null", "by (case_tac \" P \\<tau> = \\<bottom> \\<or> P \\<tau> = null\", simp_all add: true_def)"], ["proof (state)\nthis:\n  (\\<delta> ?P) ?\\<tau> \\<noteq> true ?\\<tau> \\<Longrightarrow>\n  (\\<delta> ?P) ?\\<tau> = false ?\\<tau>\n\ngoal (1 subgoal):\n 1. X->includes\\<^sub>S\\<^sub>e\\<^sub>t(X->any\\<^sub>S\\<^sub>e\\<^sub>t()) =\n    (if \\<delta> X then if \\<delta> X->size\\<^sub>S\\<^sub>e\\<^sub>t() then not\nX->isEmpty\\<^sub>S\\<^sub>e\\<^sub>t() else X->includes\\<^sub>S\\<^sub>e\\<^sub>t(null) endif else invalid endif)", "have valid_inject_true : \"\\<And>\\<tau> P. (\\<upsilon> P) \\<tau> \\<noteq> true \\<tau> \\<Longrightarrow> (\\<upsilon> P) \\<tau> = false \\<tau>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<tau> P.\n       (\\<upsilon> P) \\<tau> \\<noteq> true \\<tau> \\<Longrightarrow>\n       (\\<upsilon> P) \\<tau> = false \\<tau>", "apply(simp add: valid_def true_def false_def bot_fun_def bot_option_def\n                      null_fun_def null_option_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<tau> P.\n       (if P \\<tau> = \\<bottom> then false \\<tau> else true \\<tau>) \\<noteq>\n       \\<lfloor>\\<lfloor>True\\<rfloor>\\<rfloor> \\<Longrightarrow>\n       P \\<tau> = \\<bottom>", "by (case_tac \"P \\<tau> = \\<bottom>\", simp_all add: true_def)"], ["proof (state)\nthis:\n  (\\<upsilon> ?P1) ?\\<tau>1 \\<noteq> true ?\\<tau>1 \\<Longrightarrow>\n  (\\<upsilon> ?P1) ?\\<tau>1 = false ?\\<tau>1\n\ngoal (1 subgoal):\n 1. X->includes\\<^sub>S\\<^sub>e\\<^sub>t(X->any\\<^sub>S\\<^sub>e\\<^sub>t()) =\n    (if \\<delta> X then if \\<delta> X->size\\<^sub>S\\<^sub>e\\<^sub>t() then not\nX->isEmpty\\<^sub>S\\<^sub>e\\<^sub>t() else X->includes\\<^sub>S\\<^sub>e\\<^sub>t(null) endif else invalid endif)", "have notempty': \"\\<And>\\<tau> X. \\<tau> \\<Turnstile> \\<delta> X \\<Longrightarrow> finite \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e (X \\<tau>)\\<rceil>\\<rceil> \\<Longrightarrow> not (X->isEmpty\\<^sub>S\\<^sub>e\\<^sub>t()) \\<tau> \\<noteq> true \\<tau> \\<Longrightarrow>\n                        X \\<tau> = Set{} \\<tau>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<tau> X.\n       \\<lbrakk>\\<tau> \\<Turnstile> \\<delta> X;\n        finite\n         \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                          (X \\<tau>)\\<rceil>\\<rceil>;\n        not X->isEmpty\\<^sub>S\\<^sub>e\\<^sub>t() \\<tau> \\<noteq>\n        true \\<tau>\\<rbrakk>\n       \\<Longrightarrow> X \\<tau> = Set{} \\<tau>", "apply(case_tac \"X \\<tau>\", rename_tac X', simp add: mtSet_def Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e_inject)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<tau> X X'.\n       \\<lbrakk>\\<tau> \\<Turnstile> \\<delta> X;\n        finite\n         \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                          (Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                            X')\\<rceil>\\<rceil>;\n        not X->isEmpty\\<^sub>S\\<^sub>e\\<^sub>t() \\<tau> \\<noteq>\n        true \\<tau>;\n        X \\<tau> = Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e X';\n        X' = \\<bottom> \\<or>\n        X' = null \\<or>\n        (\\<forall>x\\<in>\\<lceil>\\<lceil>X'\\<rceil>\\<rceil>.\n            x \\<noteq> \\<bottom>)\\<rbrakk>\n       \\<Longrightarrow> X' = \\<lfloor>\\<lfloor>{}\\<rfloor>\\<rfloor>", "apply(erule disjE, metis (hide_lams, mono_tags) bot_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e_def bot_option_def foundation16)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<tau> X X'.\n       \\<lbrakk>\\<tau> \\<Turnstile> \\<delta> X;\n        finite\n         \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                          (Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                            X')\\<rceil>\\<rceil>;\n        not X->isEmpty\\<^sub>S\\<^sub>e\\<^sub>t() \\<tau> \\<noteq>\n        true \\<tau>;\n        X \\<tau> = Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e X';\n        X' = null \\<or>\n        (\\<forall>x\\<in>\\<lceil>\\<lceil>X'\\<rceil>\\<rceil>.\n            x \\<noteq> \\<bottom>)\\<rbrakk>\n       \\<Longrightarrow> X' = \\<lfloor>\\<lfloor>{}\\<rfloor>\\<rfloor>", "apply(erule disjE, metis (hide_lams, no_types) bot_option_def\n                                                 null_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e_def null_option_def foundation16[THEN iffD1])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<tau> X X'.\n       \\<lbrakk>\\<tau> \\<Turnstile> \\<delta> X;\n        finite\n         \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                          (Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                            X')\\<rceil>\\<rceil>;\n        not X->isEmpty\\<^sub>S\\<^sub>e\\<^sub>t() \\<tau> \\<noteq>\n        true \\<tau>;\n        X \\<tau> = Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e X';\n        \\<forall>x\\<in>\\<lceil>\\<lceil>X'\\<rceil>\\<rceil>.\n           x \\<noteq> \\<bottom>\\<rbrakk>\n       \\<Longrightarrow> X' = \\<lfloor>\\<lfloor>{}\\<rfloor>\\<rfloor>", "apply(case_tac X', simp, metis (hide_lams, no_types) bot_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e_def foundation16[THEN iffD1])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<tau> X X' a.\n       \\<lbrakk>\\<tau> \\<Turnstile> \\<delta> X;\n        finite\n         \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                          (Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                            X')\\<rceil>\\<rceil>;\n        not X->isEmpty\\<^sub>S\\<^sub>e\\<^sub>t() \\<tau> \\<noteq>\n        true \\<tau>;\n        X \\<tau> = Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e X';\n        \\<forall>x\\<in>\\<lceil>\\<lceil>X'\\<rceil>\\<rceil>.\n           x \\<noteq> \\<bottom>;\n        X' = \\<lfloor>a\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> X' = \\<lfloor>\\<lfloor>{}\\<rfloor>\\<rfloor>", "apply(rename_tac X'', case_tac X'', simp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>\\<tau> X X' X''.\n       \\<lbrakk>\\<tau> \\<Turnstile> \\<delta> X;\n        finite\n         \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                          (Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                            \\<lfloor>None\\<rfloor>)\\<rceil>\\<rceil>;\n        not X->isEmpty\\<^sub>S\\<^sub>e\\<^sub>t() \\<tau> \\<noteq>\n        true \\<tau>;\n        X \\<tau> =\n        Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e \\<lfloor>None\\<rfloor>;\n        \\<forall>x\\<in>\\<lceil>None\\<rceil>. x \\<noteq> \\<bottom>;\n        X' = \\<lfloor>None\\<rfloor>; X'' = None\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>\\<tau> X X' X'' a.\n       \\<lbrakk>\\<tau> \\<Turnstile> \\<delta> X;\n        finite\n         \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                          (Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                            X')\\<rceil>\\<rceil>;\n        not X->isEmpty\\<^sub>S\\<^sub>e\\<^sub>t() \\<tau> \\<noteq>\n        true \\<tau>;\n        X \\<tau> = Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e X';\n        \\<forall>x\\<in>\\<lceil>\\<lceil>X'\\<rceil>\\<rceil>.\n           x \\<noteq> \\<bottom>;\n        X' = \\<lfloor>X''\\<rfloor>; X'' = \\<lfloor>a\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> X' = \\<lfloor>\\<lfloor>{}\\<rfloor>\\<rfloor>", "apply (metis (hide_lams, no_types) foundation16[THEN iffD1] null_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<tau> X X' X'' a.\n       \\<lbrakk>\\<tau> \\<Turnstile> \\<delta> X;\n        finite\n         \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                          (Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                            X')\\<rceil>\\<rceil>;\n        not X->isEmpty\\<^sub>S\\<^sub>e\\<^sub>t() \\<tau> \\<noteq>\n        true \\<tau>;\n        X \\<tau> = Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e X';\n        \\<forall>x\\<in>\\<lceil>\\<lceil>X'\\<rceil>\\<rceil>.\n           x \\<noteq> \\<bottom>;\n        X' = \\<lfloor>X''\\<rfloor>; X'' = \\<lfloor>a\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> X' = \\<lfloor>\\<lfloor>{}\\<rfloor>\\<rfloor>", "apply(simp add: OclIsEmpty_def OclSize_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<tau> X X' X'' a.\n       \\<lbrakk>\\<tau> \\<Turnstile> \\<delta> X;\n        finite\n         \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                          (Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                            \\<lfloor>\\<lfloor>a\\<rfloor>\\<rfloor>)\\<rceil>\\<rceil>;\n        not (\\<upsilon> X and not (\\<delta> X) or\n             (\\<lambda>\\<tau>.\n                 if (\\<delta> X) \\<tau> = true \\<tau> \\<and>\n                    finite\n                     \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n(X \\<tau>)\\<rceil>\\<rceil>\n                 then \\<lfloor>\\<lfloor>int\n   (card\n     \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                      (X \\<tau>)\\<rceil>\\<rceil>)\\<rfloor>\\<rfloor>\n                 else \\<bottom>) \\<doteq>\n             \\<zero>)\n         \\<tau> \\<noteq>\n        true \\<tau>;\n        X \\<tau> =\n        Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n         \\<lfloor>\\<lfloor>a\\<rfloor>\\<rfloor>;\n        \\<forall>x\\<in>a. x \\<noteq> \\<bottom>;\n        X' = \\<lfloor>\\<lfloor>a\\<rfloor>\\<rfloor>;\n        X'' = \\<lfloor>a\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> a = {}", "apply(subst (asm) cp_OclNot, subst (asm) cp_OclOr, subst (asm) StrictRefEq\\<^sub>I\\<^sub>n\\<^sub>t\\<^sub>e\\<^sub>g\\<^sub>e\\<^sub>r.cp0,\n        subst (asm) cp_OclAnd, subst (asm) cp_OclNot)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<tau> X X' X'' a.\n       \\<lbrakk>\\<tau> \\<Turnstile> \\<delta> X;\n        finite\n         \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                          (Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                            \\<lfloor>\\<lfloor>a\\<rfloor>\\<rfloor>)\\<rceil>\\<rceil>;\n        not (\\<lambda>_.\n                ((\\<lambda>_.\n                     ((\\<lambda>_. (\\<upsilon> X) \\<tau>) and\n                      (\\<lambda>_.\n                          not (\\<lambda>_. (\\<delta> X) \\<tau>) \\<tau>))\n                      \\<tau>) or\n                 (\\<lambda>_.\n                     ((\\<lambda>_.\n                          if (\\<delta> X) \\<tau> = true \\<tau> \\<and>\n                             finite\n                              \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n         (X \\<tau>)\\<rceil>\\<rceil>\n                          then \\<lfloor>\\<lfloor>int\n            (card\n              \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                               (X \\<tau>)\\<rceil>\\<rceil>)\\<rfloor>\\<rfloor>\n                          else \\<bottom>) \\<doteq>\n                      (\\<lambda>_. \\<zero> \\<tau>))\n                      \\<tau>))\n                 \\<tau>)\n         \\<tau> \\<noteq>\n        true \\<tau>;\n        X \\<tau> =\n        Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n         \\<lfloor>\\<lfloor>a\\<rfloor>\\<rfloor>;\n        \\<forall>x\\<in>a. x \\<noteq> \\<bottom>;\n        X' = \\<lfloor>\\<lfloor>a\\<rfloor>\\<rfloor>;\n        X'' = \\<lfloor>a\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> a = {}", "apply(simp only: OclValid_def foundation20[simplified OclValid_def]\n                   cp_OclNot[symmetric] cp_OclAnd[symmetric] cp_OclOr[symmetric])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<tau> X X' X'' a.\n       \\<lbrakk>(\\<delta> X) \\<tau> = true \\<tau>;\n        finite\n         \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                          (Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                            \\<lfloor>\\<lfloor>a\\<rfloor>\\<rfloor>)\\<rceil>\\<rceil>;\n        not (true and not true or\n             (\\<lambda>_.\n                 if true \\<tau> = true \\<tau> \\<and> True\n                 then \\<lfloor>\\<lfloor>int\n   (card\n     \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                      (Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                        \\<lfloor>\\<lfloor>a\\<rfloor>\\<rfloor>)\\<rceil>\\<rceil>)\\<rfloor>\\<rfloor>\n                 else \\<bottom>) \\<doteq>\n             (\\<lambda>_. \\<zero> \\<tau>))\n         \\<tau> \\<noteq>\n        true \\<tau>;\n        X \\<tau> =\n        Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n         \\<lfloor>\\<lfloor>a\\<rfloor>\\<rfloor>;\n        \\<forall>x\\<in>a. x \\<noteq> \\<bottom>;\n        X' = \\<lfloor>\\<lfloor>a\\<rfloor>\\<rfloor>;\n        X'' = \\<lfloor>a\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> a = {}", "apply(simp add: Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e_inverse split: if_split_asm)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<tau> X X' X'' a.\n       \\<lbrakk>(\\<delta> X) \\<tau> = true \\<tau>; finite a;\n        ((\\<lambda>_. \\<lfloor>\\<lfloor>int (card a)\\<rfloor>\\<rfloor>) <>\n         (\\<lambda>_. \\<zero> \\<tau>))\n         \\<tau> \\<noteq>\n        true \\<tau>;\n        X \\<tau> =\n        Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n         \\<lfloor>\\<lfloor>a\\<rfloor>\\<rfloor>;\n        \\<forall>x\\<in>a. x \\<noteq> \\<bottom>;\n        X' = \\<lfloor>\\<lfloor>a\\<rfloor>\\<rfloor>;\n        X'' = \\<lfloor>a\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> a = {}", "by(simp add: true_def OclInt0_def OclNot_def StrictRefEq\\<^sub>I\\<^sub>n\\<^sub>t\\<^sub>e\\<^sub>g\\<^sub>e\\<^sub>r StrongEq_def)"], ["proof (state)\nthis:\n  \\<lbrakk>?\\<tau>2 \\<Turnstile> \\<delta> ?X2;\n   finite\n    \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                     (?X2 ?\\<tau>2)\\<rceil>\\<rceil>;\n   not ?X2->isEmpty\\<^sub>S\\<^sub>e\\<^sub>t() ?\\<tau>2 \\<noteq>\n   true ?\\<tau>2\\<rbrakk>\n  \\<Longrightarrow> ?X2 ?\\<tau>2 = Set{} ?\\<tau>2\n\ngoal (1 subgoal):\n 1. X->includes\\<^sub>S\\<^sub>e\\<^sub>t(X->any\\<^sub>S\\<^sub>e\\<^sub>t()) =\n    (if \\<delta> X then if \\<delta> X->size\\<^sub>S\\<^sub>e\\<^sub>t() then not\nX->isEmpty\\<^sub>S\\<^sub>e\\<^sub>t() else X->includes\\<^sub>S\\<^sub>e\\<^sub>t(null) endif else invalid endif)", "have B: \"\\<And>X \\<tau>. \\<not> finite \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e (X \\<tau>)\\<rceil>\\<rceil> \\<Longrightarrow> (\\<delta> (X->size\\<^sub>S\\<^sub>e\\<^sub>t())) \\<tau> = false \\<tau>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>X \\<tau>.\n       infinite\n        \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                         (X \\<tau>)\\<rceil>\\<rceil> \\<Longrightarrow>\n       (\\<delta> X->size\\<^sub>S\\<^sub>e\\<^sub>t()) \\<tau> = false \\<tau>", "apply(subst cp_defined)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>X \\<tau>.\n       infinite\n        \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                         (X \\<tau>)\\<rceil>\\<rceil> \\<Longrightarrow>\n       (\\<delta> (\\<lambda>_. X->size\\<^sub>S\\<^sub>e\\<^sub>t() \\<tau>))\n        \\<tau> =\n       false \\<tau>", "apply(simp add: OclSize_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>X \\<tau>.\n       infinite\n        \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                         (X \\<tau>)\\<rceil>\\<rceil> \\<Longrightarrow>\n       (\\<delta> (\\<lambda>_. \\<bottom>)) \\<tau> = false \\<tau>", "by (metis bot_fun_def defined_def)"], ["proof (state)\nthis:\n  infinite\n   \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                    (?X3 ?\\<tau>3)\\<rceil>\\<rceil> \\<Longrightarrow>\n  (\\<delta> ?X3->size\\<^sub>S\\<^sub>e\\<^sub>t()) ?\\<tau>3 = false ?\\<tau>3\n\ngoal (1 subgoal):\n 1. X->includes\\<^sub>S\\<^sub>e\\<^sub>t(X->any\\<^sub>S\\<^sub>e\\<^sub>t()) =\n    (if \\<delta> X then if \\<delta> X->size\\<^sub>S\\<^sub>e\\<^sub>t() then not\nX->isEmpty\\<^sub>S\\<^sub>e\\<^sub>t() else X->includes\\<^sub>S\\<^sub>e\\<^sub>t(null) endif else invalid endif)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. X->includes\\<^sub>S\\<^sub>e\\<^sub>t(X->any\\<^sub>S\\<^sub>e\\<^sub>t()) =\n    (if \\<delta> X then if \\<delta> X->size\\<^sub>S\\<^sub>e\\<^sub>t() then not\nX->isEmpty\\<^sub>S\\<^sub>e\\<^sub>t() else X->includes\\<^sub>S\\<^sub>e\\<^sub>t(null) endif else invalid endif)", "apply(rule ext, rename_tac \\<tau>, simp only: OclIncludes_def OclANY_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<tau>.\n       (if (\\<delta> X) \\<tau> = true \\<tau> \\<and>\n           (\\<upsilon> (\\<lambda>\\<tau>.\n                           if (\\<upsilon> X) \\<tau> = true \\<tau>\n                           then if (\\<delta> X and\n                                    X->notEmpty\\<^sub>S\\<^sub>e\\<^sub>t())\n                                    \\<tau> =\n                                   true \\<tau>\n                                then SOME y.\n  y \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                           (X \\<tau>)\\<rceil>\\<rceil>\n                                else null \\<tau>\n                           else \\<bottom>))\n            \\<tau> =\n           true \\<tau>\n        then \\<lfloor>\\<lfloor>(if (\\<upsilon> X) \\<tau> = true \\<tau>\n                                then if (\\<delta> X and\n   X->notEmpty\\<^sub>S\\<^sub>e\\<^sub>t())\n   \\<tau> =\n  true \\<tau>\n                                     then SOME y.\n       y \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                (X \\<tau>)\\<rceil>\\<rceil>\n                                     else null \\<tau>\n                                else \\<bottom>)\n                               \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                (X \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>\n        else \\<bottom>) =\n       (if \\<delta> X then if \\<delta> X->size\\<^sub>S\\<^sub>e\\<^sub>t() then not\n   X->isEmpty\\<^sub>S\\<^sub>e\\<^sub>t() else (\\<lambda>\\<tau>.\n           if (\\<delta> X) \\<tau> = true \\<tau> \\<and>\n              (\\<upsilon> null) \\<tau> = true \\<tau>\n           then \\<lfloor>\\<lfloor>null \\<tau>\n                                  \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                   (X \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>\n           else \\<bottom>) endif else invalid endif)\n        \\<tau>", "apply(subst cp_OclIf, subst (2) cp_valid)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<tau>.\n       (if (\\<delta> X) \\<tau> = true \\<tau> \\<and>\n           (\\<upsilon> (\\<lambda>_.\n                           if (\\<upsilon> X) \\<tau> = true \\<tau>\n                           then if (\\<delta> X and\n                                    X->notEmpty\\<^sub>S\\<^sub>e\\<^sub>t())\n                                    \\<tau> =\n                                   true \\<tau>\n                                then SOME y.\n  y \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                           (X \\<tau>)\\<rceil>\\<rceil>\n                                else null \\<tau>\n                           else \\<bottom>))\n            \\<tau> =\n           true \\<tau>\n        then \\<lfloor>\\<lfloor>(if (\\<upsilon> X) \\<tau> = true \\<tau>\n                                then if (\\<delta> X and\n   X->notEmpty\\<^sub>S\\<^sub>e\\<^sub>t())\n   \\<tau> =\n  true \\<tau>\n                                     then SOME y.\n       y \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                (X \\<tau>)\\<rceil>\\<rceil>\n                                     else null \\<tau>\n                                else \\<bottom>)\n                               \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                (X \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>\n        else \\<bottom>) =\n       (if (\\<lambda>_.\n               (\\<delta> X)\n                \\<tau>) then (\\<lambda>_.\n                                 (if \\<delta> X->size\\<^sub>S\\<^sub>e\\<^sub>t() then not\n          X->isEmpty\\<^sub>S\\<^sub>e\\<^sub>t() else (\\<lambda>\\<tau>.\n                  if (\\<delta> X) \\<tau> = true \\<tau> \\<and>\n                     (\\<upsilon> null) \\<tau> = true \\<tau>\n                  then \\<lfloor>\\<lfloor>null \\<tau>\n   \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                          (X \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>\n                  else \\<bottom>) endif)\n                                  \\<tau>) else (\\<lambda>_.\n             invalid \\<tau>) endif)\n        \\<tau>", "apply(case_tac \"(\\<delta> X) \\<tau> = true \\<tau>\",\n        simp only: foundation20[simplified OclValid_def] cp_OclIf[symmetric], simp,\n        subst (1 2) cp_OclAnd, simp add: cp_OclAnd[symmetric])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>\\<tau>.\n       (\\<delta> X) \\<tau> = true \\<tau> \\<Longrightarrow>\n       (X->notEmpty\\<^sub>S\\<^sub>e\\<^sub>t() \\<tau> =\n        true \\<tau> \\<longrightarrow>\n        ((\\<upsilon> (\\<lambda>_.\n                         SOME y.\n                            y \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n               (X \\<tau>)\\<rceil>\\<rceil>))\n          \\<tau> =\n         true \\<tau> \\<longrightarrow>\n         \\<lfloor>\\<lfloor>(SOME y.\n                               y \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                  (X \\<tau>)\\<rceil>\\<rceil>)\n                           \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n            (X \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor> =\n         (if \\<delta> X->size\\<^sub>S\\<^sub>e\\<^sub>t() then not\n                        X->isEmpty\\<^sub>S\\<^sub>e\\<^sub>t() else (\\<lambda>\\<tau>.\n                                if (\\<delta> X) \\<tau> = true \\<tau>\n                                then \\<lfloor>\\<lfloor>null \\<tau>\n                 \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n  (X \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>\n                                else \\<bottom>) endif)\n          \\<tau>) \\<and>\n        ((\\<upsilon> (\\<lambda>_.\n                         SOME y.\n                            y \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n               (X \\<tau>)\\<rceil>\\<rceil>))\n          \\<tau> \\<noteq>\n         true \\<tau> \\<longrightarrow>\n         \\<bottom> =\n         (if \\<delta> X->size\\<^sub>S\\<^sub>e\\<^sub>t() then not\n                        X->isEmpty\\<^sub>S\\<^sub>e\\<^sub>t() else (\\<lambda>\\<tau>.\n                                if (\\<delta> X) \\<tau> = true \\<tau>\n                                then \\<lfloor>\\<lfloor>null \\<tau>\n                 \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n  (X \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>\n                                else \\<bottom>) endif)\n          \\<tau>)) \\<and>\n       (X->notEmpty\\<^sub>S\\<^sub>e\\<^sub>t() \\<tau> \\<noteq>\n        true \\<tau> \\<longrightarrow>\n        ((\\<upsilon> (\\<lambda>_. null \\<tau>)) \\<tau> =\n         true \\<tau> \\<longrightarrow>\n         \\<lfloor>\\<lfloor>null \\<tau>\n                           \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n            (X \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor> =\n         (if \\<delta> X->size\\<^sub>S\\<^sub>e\\<^sub>t() then not\n                        X->isEmpty\\<^sub>S\\<^sub>e\\<^sub>t() else (\\<lambda>\\<tau>.\n                                if (\\<delta> X) \\<tau> = true \\<tau>\n                                then \\<lfloor>\\<lfloor>null \\<tau>\n                 \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n  (X \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>\n                                else \\<bottom>) endif)\n          \\<tau>) \\<and>\n        ((\\<upsilon> (\\<lambda>_. null \\<tau>)) \\<tau> \\<noteq>\n         true \\<tau> \\<longrightarrow>\n         \\<bottom> =\n         (if \\<delta> X->size\\<^sub>S\\<^sub>e\\<^sub>t() then not\n                        X->isEmpty\\<^sub>S\\<^sub>e\\<^sub>t() else (\\<lambda>\\<tau>.\n                                if (\\<delta> X) \\<tau> = true \\<tau>\n                                then \\<lfloor>\\<lfloor>null \\<tau>\n                 \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n  (X \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>\n                                else \\<bottom>) endif)\n          \\<tau>))\n 2. \\<And>\\<tau>.\n       (\\<delta> X) \\<tau> \\<noteq> true \\<tau> \\<Longrightarrow>\n       (if (\\<delta> X) \\<tau> = true \\<tau> \\<and>\n           (\\<upsilon> (\\<lambda>_.\n                           if (\\<upsilon> X) \\<tau> = true \\<tau>\n                           then if (\\<delta> X and\n                                    X->notEmpty\\<^sub>S\\<^sub>e\\<^sub>t())\n                                    \\<tau> =\n                                   true \\<tau>\n                                then SOME y.\n  y \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                           (X \\<tau>)\\<rceil>\\<rceil>\n                                else null \\<tau>\n                           else \\<bottom>))\n            \\<tau> =\n           true \\<tau>\n        then \\<lfloor>\\<lfloor>(if (\\<upsilon> X) \\<tau> = true \\<tau>\n                                then if (\\<delta> X and\n   X->notEmpty\\<^sub>S\\<^sub>e\\<^sub>t())\n   \\<tau> =\n  true \\<tau>\n                                     then SOME y.\n       y \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                (X \\<tau>)\\<rceil>\\<rceil>\n                                     else null \\<tau>\n                                else \\<bottom>)\n                               \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                (X \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>\n        else \\<bottom>) =\n       (if (\\<lambda>_.\n               (\\<delta> X)\n                \\<tau>) then (\\<lambda>_.\n                                 (if \\<delta> X->size\\<^sub>S\\<^sub>e\\<^sub>t() then not\n          X->isEmpty\\<^sub>S\\<^sub>e\\<^sub>t() else (\\<lambda>\\<tau>.\n                  if (\\<delta> X) \\<tau> = true \\<tau> \\<and>\n                     (\\<upsilon> null) \\<tau> = true \\<tau>\n                  then \\<lfloor>\\<lfloor>null \\<tau>\n   \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                          (X \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>\n                  else \\<bottom>) endif)\n                                  \\<tau>) else (\\<lambda>_.\n             invalid \\<tau>) endif)\n        \\<tau>", "apply(case_tac \"finite \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e (X \\<tau>)\\<rceil>\\<rceil>\")"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>\\<tau>.\n       \\<lbrakk>(\\<delta> X) \\<tau> = true \\<tau>;\n        finite\n         \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                          (X \\<tau>)\\<rceil>\\<rceil>\\<rbrakk>\n       \\<Longrightarrow> (X->notEmpty\\<^sub>S\\<^sub>e\\<^sub>t() \\<tau> =\n                          true \\<tau> \\<longrightarrow>\n                          ((\\<upsilon> (\\<lambda>_.\n     SOME y.\n        y \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                 (X \\<tau>)\\<rceil>\\<rceil>))\n                            \\<tau> =\n                           true \\<tau> \\<longrightarrow>\n                           \\<lfloor>\\<lfloor>(SOME y.\n           y \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                    (X \\<tau>)\\<rceil>\\<rceil>)\n       \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                              (X \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor> =\n                           (if \\<delta> X->size\\<^sub>S\\<^sub>e\\<^sub>t() then not\n    X->isEmpty\\<^sub>S\\<^sub>e\\<^sub>t() else (\\<lambda>\\<tau>.\n            if (\\<delta> X) \\<tau> = true \\<tau>\n            then \\<lfloor>\\<lfloor>null \\<tau>\n                                   \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                    (X \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>\n            else \\<bottom>) endif)\n                            \\<tau>) \\<and>\n                          ((\\<upsilon> (\\<lambda>_.\n     SOME y.\n        y \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                 (X \\<tau>)\\<rceil>\\<rceil>))\n                            \\<tau> \\<noteq>\n                           true \\<tau> \\<longrightarrow>\n                           \\<bottom> =\n                           (if \\<delta> X->size\\<^sub>S\\<^sub>e\\<^sub>t() then not\n    X->isEmpty\\<^sub>S\\<^sub>e\\<^sub>t() else (\\<lambda>\\<tau>.\n            if (\\<delta> X) \\<tau> = true \\<tau>\n            then \\<lfloor>\\<lfloor>null \\<tau>\n                                   \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                    (X \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>\n            else \\<bottom>) endif)\n                            \\<tau>)) \\<and>\n                         (X->notEmpty\\<^sub>S\\<^sub>e\\<^sub>t()\n                           \\<tau> \\<noteq>\n                          true \\<tau> \\<longrightarrow>\n                          ((\\<upsilon> (\\<lambda>_. null \\<tau>)) \\<tau> =\n                           true \\<tau> \\<longrightarrow>\n                           \\<lfloor>\\<lfloor>null \\<tau>\n       \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                              (X \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor> =\n                           (if \\<delta> X->size\\<^sub>S\\<^sub>e\\<^sub>t() then not\n    X->isEmpty\\<^sub>S\\<^sub>e\\<^sub>t() else (\\<lambda>\\<tau>.\n            if (\\<delta> X) \\<tau> = true \\<tau>\n            then \\<lfloor>\\<lfloor>null \\<tau>\n                                   \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                    (X \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>\n            else \\<bottom>) endif)\n                            \\<tau>) \\<and>\n                          ((\\<upsilon> (\\<lambda>_. null \\<tau>))\n                            \\<tau> \\<noteq>\n                           true \\<tau> \\<longrightarrow>\n                           \\<bottom> =\n                           (if \\<delta> X->size\\<^sub>S\\<^sub>e\\<^sub>t() then not\n    X->isEmpty\\<^sub>S\\<^sub>e\\<^sub>t() else (\\<lambda>\\<tau>.\n            if (\\<delta> X) \\<tau> = true \\<tau>\n            then \\<lfloor>\\<lfloor>null \\<tau>\n                                   \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                    (X \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>\n            else \\<bottom>) endif)\n                            \\<tau>))\n 2. \\<And>\\<tau>.\n       \\<lbrakk>(\\<delta> X) \\<tau> = true \\<tau>;\n        infinite\n         \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                          (X \\<tau>)\\<rceil>\\<rceil>\\<rbrakk>\n       \\<Longrightarrow> (X->notEmpty\\<^sub>S\\<^sub>e\\<^sub>t() \\<tau> =\n                          true \\<tau> \\<longrightarrow>\n                          ((\\<upsilon> (\\<lambda>_.\n     SOME y.\n        y \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                 (X \\<tau>)\\<rceil>\\<rceil>))\n                            \\<tau> =\n                           true \\<tau> \\<longrightarrow>\n                           \\<lfloor>\\<lfloor>(SOME y.\n           y \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                    (X \\<tau>)\\<rceil>\\<rceil>)\n       \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                              (X \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor> =\n                           (if \\<delta> X->size\\<^sub>S\\<^sub>e\\<^sub>t() then not\n    X->isEmpty\\<^sub>S\\<^sub>e\\<^sub>t() else (\\<lambda>\\<tau>.\n            if (\\<delta> X) \\<tau> = true \\<tau>\n            then \\<lfloor>\\<lfloor>null \\<tau>\n                                   \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                    (X \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>\n            else \\<bottom>) endif)\n                            \\<tau>) \\<and>\n                          ((\\<upsilon> (\\<lambda>_.\n     SOME y.\n        y \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                 (X \\<tau>)\\<rceil>\\<rceil>))\n                            \\<tau> \\<noteq>\n                           true \\<tau> \\<longrightarrow>\n                           \\<bottom> =\n                           (if \\<delta> X->size\\<^sub>S\\<^sub>e\\<^sub>t() then not\n    X->isEmpty\\<^sub>S\\<^sub>e\\<^sub>t() else (\\<lambda>\\<tau>.\n            if (\\<delta> X) \\<tau> = true \\<tau>\n            then \\<lfloor>\\<lfloor>null \\<tau>\n                                   \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                    (X \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>\n            else \\<bottom>) endif)\n                            \\<tau>)) \\<and>\n                         (X->notEmpty\\<^sub>S\\<^sub>e\\<^sub>t()\n                           \\<tau> \\<noteq>\n                          true \\<tau> \\<longrightarrow>\n                          ((\\<upsilon> (\\<lambda>_. null \\<tau>)) \\<tau> =\n                           true \\<tau> \\<longrightarrow>\n                           \\<lfloor>\\<lfloor>null \\<tau>\n       \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                              (X \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor> =\n                           (if \\<delta> X->size\\<^sub>S\\<^sub>e\\<^sub>t() then not\n    X->isEmpty\\<^sub>S\\<^sub>e\\<^sub>t() else (\\<lambda>\\<tau>.\n            if (\\<delta> X) \\<tau> = true \\<tau>\n            then \\<lfloor>\\<lfloor>null \\<tau>\n                                   \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                    (X \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>\n            else \\<bottom>) endif)\n                            \\<tau>) \\<and>\n                          ((\\<upsilon> (\\<lambda>_. null \\<tau>))\n                            \\<tau> \\<noteq>\n                           true \\<tau> \\<longrightarrow>\n                           \\<bottom> =\n                           (if \\<delta> X->size\\<^sub>S\\<^sub>e\\<^sub>t() then not\n    X->isEmpty\\<^sub>S\\<^sub>e\\<^sub>t() else (\\<lambda>\\<tau>.\n            if (\\<delta> X) \\<tau> = true \\<tau>\n            then \\<lfloor>\\<lfloor>null \\<tau>\n                                   \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                    (X \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>\n            else \\<bottom>) endif)\n                            \\<tau>))\n 3. \\<And>\\<tau>.\n       (\\<delta> X) \\<tau> \\<noteq> true \\<tau> \\<Longrightarrow>\n       (if (\\<delta> X) \\<tau> = true \\<tau> \\<and>\n           (\\<upsilon> (\\<lambda>_.\n                           if (\\<upsilon> X) \\<tau> = true \\<tau>\n                           then if (\\<delta> X and\n                                    X->notEmpty\\<^sub>S\\<^sub>e\\<^sub>t())\n                                    \\<tau> =\n                                   true \\<tau>\n                                then SOME y.\n  y \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                           (X \\<tau>)\\<rceil>\\<rceil>\n                                else null \\<tau>\n                           else \\<bottom>))\n            \\<tau> =\n           true \\<tau>\n        then \\<lfloor>\\<lfloor>(if (\\<upsilon> X) \\<tau> = true \\<tau>\n                                then if (\\<delta> X and\n   X->notEmpty\\<^sub>S\\<^sub>e\\<^sub>t())\n   \\<tau> =\n  true \\<tau>\n                                     then SOME y.\n       y \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                (X \\<tau>)\\<rceil>\\<rceil>\n                                     else null \\<tau>\n                                else \\<bottom>)\n                               \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                (X \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>\n        else \\<bottom>) =\n       (if (\\<lambda>_.\n               (\\<delta> X)\n                \\<tau>) then (\\<lambda>_.\n                                 (if \\<delta> X->size\\<^sub>S\\<^sub>e\\<^sub>t() then not\n          X->isEmpty\\<^sub>S\\<^sub>e\\<^sub>t() else (\\<lambda>\\<tau>.\n                  if (\\<delta> X) \\<tau> = true \\<tau> \\<and>\n                     (\\<upsilon> null) \\<tau> = true \\<tau>\n                  then \\<lfloor>\\<lfloor>null \\<tau>\n   \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                          (X \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>\n                  else \\<bottom>) endif)\n                                  \\<tau>) else (\\<lambda>_.\n             invalid \\<tau>) endif)\n        \\<tau>", "apply(frule size_defined'[THEN iffD2, simplified OclValid_def], assumption)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>\\<tau>.\n       \\<lbrakk>(\\<delta> X) \\<tau> = true \\<tau>;\n        finite\n         \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                          (X \\<tau>)\\<rceil>\\<rceil>;\n        (\\<delta> X->size\\<^sub>S\\<^sub>e\\<^sub>t()) \\<tau> =\n        true \\<tau>\\<rbrakk>\n       \\<Longrightarrow> (X->notEmpty\\<^sub>S\\<^sub>e\\<^sub>t() \\<tau> =\n                          true \\<tau> \\<longrightarrow>\n                          ((\\<upsilon> (\\<lambda>_.\n     SOME y.\n        y \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                 (X \\<tau>)\\<rceil>\\<rceil>))\n                            \\<tau> =\n                           true \\<tau> \\<longrightarrow>\n                           \\<lfloor>\\<lfloor>(SOME y.\n           y \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                    (X \\<tau>)\\<rceil>\\<rceil>)\n       \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                              (X \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor> =\n                           (if \\<delta> X->size\\<^sub>S\\<^sub>e\\<^sub>t() then not\n    X->isEmpty\\<^sub>S\\<^sub>e\\<^sub>t() else (\\<lambda>\\<tau>.\n            if (\\<delta> X) \\<tau> = true \\<tau>\n            then \\<lfloor>\\<lfloor>null \\<tau>\n                                   \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                    (X \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>\n            else \\<bottom>) endif)\n                            \\<tau>) \\<and>\n                          ((\\<upsilon> (\\<lambda>_.\n     SOME y.\n        y \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                 (X \\<tau>)\\<rceil>\\<rceil>))\n                            \\<tau> \\<noteq>\n                           true \\<tau> \\<longrightarrow>\n                           \\<bottom> =\n                           (if \\<delta> X->size\\<^sub>S\\<^sub>e\\<^sub>t() then not\n    X->isEmpty\\<^sub>S\\<^sub>e\\<^sub>t() else (\\<lambda>\\<tau>.\n            if (\\<delta> X) \\<tau> = true \\<tau>\n            then \\<lfloor>\\<lfloor>null \\<tau>\n                                   \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                    (X \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>\n            else \\<bottom>) endif)\n                            \\<tau>)) \\<and>\n                         (X->notEmpty\\<^sub>S\\<^sub>e\\<^sub>t()\n                           \\<tau> \\<noteq>\n                          true \\<tau> \\<longrightarrow>\n                          ((\\<upsilon> (\\<lambda>_. null \\<tau>)) \\<tau> =\n                           true \\<tau> \\<longrightarrow>\n                           \\<lfloor>\\<lfloor>null \\<tau>\n       \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                              (X \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor> =\n                           (if \\<delta> X->size\\<^sub>S\\<^sub>e\\<^sub>t() then not\n    X->isEmpty\\<^sub>S\\<^sub>e\\<^sub>t() else (\\<lambda>\\<tau>.\n            if (\\<delta> X) \\<tau> = true \\<tau>\n            then \\<lfloor>\\<lfloor>null \\<tau>\n                                   \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                    (X \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>\n            else \\<bottom>) endif)\n                            \\<tau>) \\<and>\n                          ((\\<upsilon> (\\<lambda>_. null \\<tau>))\n                            \\<tau> \\<noteq>\n                           true \\<tau> \\<longrightarrow>\n                           \\<bottom> =\n                           (if \\<delta> X->size\\<^sub>S\\<^sub>e\\<^sub>t() then not\n    X->isEmpty\\<^sub>S\\<^sub>e\\<^sub>t() else (\\<lambda>\\<tau>.\n            if (\\<delta> X) \\<tau> = true \\<tau>\n            then \\<lfloor>\\<lfloor>null \\<tau>\n                                   \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                    (X \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>\n            else \\<bottom>) endif)\n                            \\<tau>))\n 2. \\<And>\\<tau>.\n       \\<lbrakk>(\\<delta> X) \\<tau> = true \\<tau>;\n        infinite\n         \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                          (X \\<tau>)\\<rceil>\\<rceil>\\<rbrakk>\n       \\<Longrightarrow> (X->notEmpty\\<^sub>S\\<^sub>e\\<^sub>t() \\<tau> =\n                          true \\<tau> \\<longrightarrow>\n                          ((\\<upsilon> (\\<lambda>_.\n     SOME y.\n        y \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                 (X \\<tau>)\\<rceil>\\<rceil>))\n                            \\<tau> =\n                           true \\<tau> \\<longrightarrow>\n                           \\<lfloor>\\<lfloor>(SOME y.\n           y \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                    (X \\<tau>)\\<rceil>\\<rceil>)\n       \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                              (X \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor> =\n                           (if \\<delta> X->size\\<^sub>S\\<^sub>e\\<^sub>t() then not\n    X->isEmpty\\<^sub>S\\<^sub>e\\<^sub>t() else (\\<lambda>\\<tau>.\n            if (\\<delta> X) \\<tau> = true \\<tau>\n            then \\<lfloor>\\<lfloor>null \\<tau>\n                                   \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                    (X \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>\n            else \\<bottom>) endif)\n                            \\<tau>) \\<and>\n                          ((\\<upsilon> (\\<lambda>_.\n     SOME y.\n        y \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                 (X \\<tau>)\\<rceil>\\<rceil>))\n                            \\<tau> \\<noteq>\n                           true \\<tau> \\<longrightarrow>\n                           \\<bottom> =\n                           (if \\<delta> X->size\\<^sub>S\\<^sub>e\\<^sub>t() then not\n    X->isEmpty\\<^sub>S\\<^sub>e\\<^sub>t() else (\\<lambda>\\<tau>.\n            if (\\<delta> X) \\<tau> = true \\<tau>\n            then \\<lfloor>\\<lfloor>null \\<tau>\n                                   \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                    (X \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>\n            else \\<bottom>) endif)\n                            \\<tau>)) \\<and>\n                         (X->notEmpty\\<^sub>S\\<^sub>e\\<^sub>t()\n                           \\<tau> \\<noteq>\n                          true \\<tau> \\<longrightarrow>\n                          ((\\<upsilon> (\\<lambda>_. null \\<tau>)) \\<tau> =\n                           true \\<tau> \\<longrightarrow>\n                           \\<lfloor>\\<lfloor>null \\<tau>\n       \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                              (X \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor> =\n                           (if \\<delta> X->size\\<^sub>S\\<^sub>e\\<^sub>t() then not\n    X->isEmpty\\<^sub>S\\<^sub>e\\<^sub>t() else (\\<lambda>\\<tau>.\n            if (\\<delta> X) \\<tau> = true \\<tau>\n            then \\<lfloor>\\<lfloor>null \\<tau>\n                                   \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                    (X \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>\n            else \\<bottom>) endif)\n                            \\<tau>) \\<and>\n                          ((\\<upsilon> (\\<lambda>_. null \\<tau>))\n                            \\<tau> \\<noteq>\n                           true \\<tau> \\<longrightarrow>\n                           \\<bottom> =\n                           (if \\<delta> X->size\\<^sub>S\\<^sub>e\\<^sub>t() then not\n    X->isEmpty\\<^sub>S\\<^sub>e\\<^sub>t() else (\\<lambda>\\<tau>.\n            if (\\<delta> X) \\<tau> = true \\<tau>\n            then \\<lfloor>\\<lfloor>null \\<tau>\n                                   \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                    (X \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>\n            else \\<bottom>) endif)\n                            \\<tau>))\n 3. \\<And>\\<tau>.\n       (\\<delta> X) \\<tau> \\<noteq> true \\<tau> \\<Longrightarrow>\n       (if (\\<delta> X) \\<tau> = true \\<tau> \\<and>\n           (\\<upsilon> (\\<lambda>_.\n                           if (\\<upsilon> X) \\<tau> = true \\<tau>\n                           then if (\\<delta> X and\n                                    X->notEmpty\\<^sub>S\\<^sub>e\\<^sub>t())\n                                    \\<tau> =\n                                   true \\<tau>\n                                then SOME y.\n  y \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                           (X \\<tau>)\\<rceil>\\<rceil>\n                                else null \\<tau>\n                           else \\<bottom>))\n            \\<tau> =\n           true \\<tau>\n        then \\<lfloor>\\<lfloor>(if (\\<upsilon> X) \\<tau> = true \\<tau>\n                                then if (\\<delta> X and\n   X->notEmpty\\<^sub>S\\<^sub>e\\<^sub>t())\n   \\<tau> =\n  true \\<tau>\n                                     then SOME y.\n       y \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                (X \\<tau>)\\<rceil>\\<rceil>\n                                     else null \\<tau>\n                                else \\<bottom>)\n                               \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                (X \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>\n        else \\<bottom>) =\n       (if (\\<lambda>_.\n               (\\<delta> X)\n                \\<tau>) then (\\<lambda>_.\n                                 (if \\<delta> X->size\\<^sub>S\\<^sub>e\\<^sub>t() then not\n          X->isEmpty\\<^sub>S\\<^sub>e\\<^sub>t() else (\\<lambda>\\<tau>.\n                  if (\\<delta> X) \\<tau> = true \\<tau> \\<and>\n                     (\\<upsilon> null) \\<tau> = true \\<tau>\n                  then \\<lfloor>\\<lfloor>null \\<tau>\n   \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                          (X \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>\n                  else \\<bottom>) endif)\n                                  \\<tau>) else (\\<lambda>_.\n             invalid \\<tau>) endif)\n        \\<tau>", "apply(subst (1 2 3 4) cp_OclIf, simp)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>\\<tau>.\n       \\<lbrakk>(\\<delta> X) \\<tau> = true \\<tau>;\n        finite\n         \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                          (X \\<tau>)\\<rceil>\\<rceil>;\n        (\\<delta> X->size\\<^sub>S\\<^sub>e\\<^sub>t()) \\<tau> =\n        true \\<tau>\\<rbrakk>\n       \\<Longrightarrow> (X->notEmpty\\<^sub>S\\<^sub>e\\<^sub>t() \\<tau> =\n                          true \\<tau> \\<longrightarrow>\n                          ((\\<upsilon> (\\<lambda>_.\n     SOME y.\n        y \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                 (X \\<tau>)\\<rceil>\\<rceil>))\n                            \\<tau> =\n                           true \\<tau> \\<longrightarrow>\n                           \\<lfloor>\\<lfloor>(SOME y.\n           y \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                    (X \\<tau>)\\<rceil>\\<rceil>)\n       \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                              (X \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor> =\n                           (if (\\<lambda>_.\n                                   true\n                                    \\<tau>) then (\\<lambda>_.\n               not X->isEmpty\\<^sub>S\\<^sub>e\\<^sub>t()\n                \\<tau>) else (\\<lambda>_.\n                                 \\<lfloor>\\<lfloor>null \\<tau>\n             \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                    (X\n\\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>) endif)\n                            \\<tau>) \\<and>\n                          ((\\<upsilon> (\\<lambda>_.\n     SOME y.\n        y \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                 (X \\<tau>)\\<rceil>\\<rceil>))\n                            \\<tau> \\<noteq>\n                           true \\<tau> \\<longrightarrow>\n                           \\<bottom> =\n                           (if (\\<lambda>_.\n                                   true\n                                    \\<tau>) then (\\<lambda>_.\n               not X->isEmpty\\<^sub>S\\<^sub>e\\<^sub>t()\n                \\<tau>) else (\\<lambda>_.\n                                 \\<lfloor>\\<lfloor>null \\<tau>\n             \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                    (X\n\\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>) endif)\n                            \\<tau>)) \\<and>\n                         (X->notEmpty\\<^sub>S\\<^sub>e\\<^sub>t()\n                           \\<tau> \\<noteq>\n                          true \\<tau> \\<longrightarrow>\n                          ((\\<upsilon> (\\<lambda>_. null \\<tau>)) \\<tau> =\n                           true \\<tau> \\<longrightarrow>\n                           \\<lfloor>\\<lfloor>null \\<tau>\n       \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                              (X \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor> =\n                           (if (\\<lambda>_.\n                                   true\n                                    \\<tau>) then (\\<lambda>_.\n               not X->isEmpty\\<^sub>S\\<^sub>e\\<^sub>t()\n                \\<tau>) else (\\<lambda>_.\n                                 \\<lfloor>\\<lfloor>null \\<tau>\n             \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                    (X\n\\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>) endif)\n                            \\<tau>) \\<and>\n                          ((\\<upsilon> (\\<lambda>_. null \\<tau>))\n                            \\<tau> \\<noteq>\n                           true \\<tau> \\<longrightarrow>\n                           \\<bottom> =\n                           (if (\\<lambda>_.\n                                   true\n                                    \\<tau>) then (\\<lambda>_.\n               not X->isEmpty\\<^sub>S\\<^sub>e\\<^sub>t()\n                \\<tau>) else (\\<lambda>_.\n                                 \\<lfloor>\\<lfloor>null \\<tau>\n             \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                    (X\n\\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>) endif)\n                            \\<tau>))\n 2. \\<And>\\<tau>.\n       \\<lbrakk>(\\<delta> X) \\<tau> = true \\<tau>;\n        infinite\n         \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                          (X \\<tau>)\\<rceil>\\<rceil>\\<rbrakk>\n       \\<Longrightarrow> (X->notEmpty\\<^sub>S\\<^sub>e\\<^sub>t() \\<tau> =\n                          true \\<tau> \\<longrightarrow>\n                          ((\\<upsilon> (\\<lambda>_.\n     SOME y.\n        y \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                 (X \\<tau>)\\<rceil>\\<rceil>))\n                            \\<tau> =\n                           true \\<tau> \\<longrightarrow>\n                           \\<lfloor>\\<lfloor>(SOME y.\n           y \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                    (X \\<tau>)\\<rceil>\\<rceil>)\n       \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                              (X \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor> =\n                           (if \\<delta> X->size\\<^sub>S\\<^sub>e\\<^sub>t() then not\n    X->isEmpty\\<^sub>S\\<^sub>e\\<^sub>t() else (\\<lambda>\\<tau>.\n            if (\\<delta> X) \\<tau> = true \\<tau>\n            then \\<lfloor>\\<lfloor>null \\<tau>\n                                   \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                    (X \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>\n            else \\<bottom>) endif)\n                            \\<tau>) \\<and>\n                          ((\\<upsilon> (\\<lambda>_.\n     SOME y.\n        y \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                 (X \\<tau>)\\<rceil>\\<rceil>))\n                            \\<tau> \\<noteq>\n                           true \\<tau> \\<longrightarrow>\n                           \\<bottom> =\n                           (if \\<delta> X->size\\<^sub>S\\<^sub>e\\<^sub>t() then not\n    X->isEmpty\\<^sub>S\\<^sub>e\\<^sub>t() else (\\<lambda>\\<tau>.\n            if (\\<delta> X) \\<tau> = true \\<tau>\n            then \\<lfloor>\\<lfloor>null \\<tau>\n                                   \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                    (X \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>\n            else \\<bottom>) endif)\n                            \\<tau>)) \\<and>\n                         (X->notEmpty\\<^sub>S\\<^sub>e\\<^sub>t()\n                           \\<tau> \\<noteq>\n                          true \\<tau> \\<longrightarrow>\n                          ((\\<upsilon> (\\<lambda>_. null \\<tau>)) \\<tau> =\n                           true \\<tau> \\<longrightarrow>\n                           \\<lfloor>\\<lfloor>null \\<tau>\n       \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                              (X \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor> =\n                           (if \\<delta> X->size\\<^sub>S\\<^sub>e\\<^sub>t() then not\n    X->isEmpty\\<^sub>S\\<^sub>e\\<^sub>t() else (\\<lambda>\\<tau>.\n            if (\\<delta> X) \\<tau> = true \\<tau>\n            then \\<lfloor>\\<lfloor>null \\<tau>\n                                   \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                    (X \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>\n            else \\<bottom>) endif)\n                            \\<tau>) \\<and>\n                          ((\\<upsilon> (\\<lambda>_. null \\<tau>))\n                            \\<tau> \\<noteq>\n                           true \\<tau> \\<longrightarrow>\n                           \\<bottom> =\n                           (if \\<delta> X->size\\<^sub>S\\<^sub>e\\<^sub>t() then not\n    X->isEmpty\\<^sub>S\\<^sub>e\\<^sub>t() else (\\<lambda>\\<tau>.\n            if (\\<delta> X) \\<tau> = true \\<tau>\n            then \\<lfloor>\\<lfloor>null \\<tau>\n                                   \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                    (X \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>\n            else \\<bottom>) endif)\n                            \\<tau>))\n 3. \\<And>\\<tau>.\n       (\\<delta> X) \\<tau> \\<noteq> true \\<tau> \\<Longrightarrow>\n       (if (\\<delta> X) \\<tau> = true \\<tau> \\<and>\n           (\\<upsilon> (\\<lambda>_.\n                           if (\\<upsilon> X) \\<tau> = true \\<tau>\n                           then if (\\<delta> X and\n                                    X->notEmpty\\<^sub>S\\<^sub>e\\<^sub>t())\n                                    \\<tau> =\n                                   true \\<tau>\n                                then SOME y.\n  y \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                           (X \\<tau>)\\<rceil>\\<rceil>\n                                else null \\<tau>\n                           else \\<bottom>))\n            \\<tau> =\n           true \\<tau>\n        then \\<lfloor>\\<lfloor>(if (\\<upsilon> X) \\<tau> = true \\<tau>\n                                then if (\\<delta> X and\n   X->notEmpty\\<^sub>S\\<^sub>e\\<^sub>t())\n   \\<tau> =\n  true \\<tau>\n                                     then SOME y.\n       y \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                (X \\<tau>)\\<rceil>\\<rceil>\n                                     else null \\<tau>\n                                else \\<bottom>)\n                               \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                (X \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>\n        else \\<bottom>) =\n       (if (\\<lambda>_.\n               (\\<delta> X)\n                \\<tau>) then (\\<lambda>_.\n                                 (if \\<delta> X->size\\<^sub>S\\<^sub>e\\<^sub>t() then not\n          X->isEmpty\\<^sub>S\\<^sub>e\\<^sub>t() else (\\<lambda>\\<tau>.\n                  if (\\<delta> X) \\<tau> = true \\<tau> \\<and>\n                     (\\<upsilon> null) \\<tau> = true \\<tau>\n                  then \\<lfloor>\\<lfloor>null \\<tau>\n   \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                          (X \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>\n                  else \\<bottom>) endif)\n                                  \\<tau>) else (\\<lambda>_.\n             invalid \\<tau>) endif)\n        \\<tau>", "apply(subst (1 2 3 4) cp_OclIf[symmetric], simp)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>\\<tau>.\n       \\<lbrakk>(\\<delta> X) \\<tau> = true \\<tau>;\n        finite\n         \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                          (X \\<tau>)\\<rceil>\\<rceil>;\n        (\\<delta> X->size\\<^sub>S\\<^sub>e\\<^sub>t()) \\<tau> =\n        true \\<tau>\\<rbrakk>\n       \\<Longrightarrow> (X->notEmpty\\<^sub>S\\<^sub>e\\<^sub>t() \\<tau> =\n                          true \\<tau> \\<longrightarrow>\n                          ((\\<upsilon> (\\<lambda>_.\n     SOME y.\n        y \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                 (X \\<tau>)\\<rceil>\\<rceil>))\n                            \\<tau> =\n                           true \\<tau> \\<longrightarrow>\n                           \\<lfloor>\\<lfloor>(SOME y.\n           y \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                    (X \\<tau>)\\<rceil>\\<rceil>)\n       \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                              (X \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor> =\n                           not X->isEmpty\\<^sub>S\\<^sub>e\\<^sub>t()\n                            \\<tau>) \\<and>\n                          ((\\<upsilon> (\\<lambda>_.\n     SOME y.\n        y \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                 (X \\<tau>)\\<rceil>\\<rceil>))\n                            \\<tau> \\<noteq>\n                           true \\<tau> \\<longrightarrow>\n                           \\<bottom> =\n                           not X->isEmpty\\<^sub>S\\<^sub>e\\<^sub>t()\n                            \\<tau>)) \\<and>\n                         (X->notEmpty\\<^sub>S\\<^sub>e\\<^sub>t()\n                           \\<tau> \\<noteq>\n                          true \\<tau> \\<longrightarrow>\n                          ((\\<upsilon> (\\<lambda>_. null \\<tau>)) \\<tau> =\n                           true \\<tau> \\<longrightarrow>\n                           \\<lfloor>\\<lfloor>null \\<tau>\n       \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                              (X \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor> =\n                           not X->isEmpty\\<^sub>S\\<^sub>e\\<^sub>t()\n                            \\<tau>) \\<and>\n                          ((\\<upsilon> (\\<lambda>_. null \\<tau>))\n                            \\<tau> \\<noteq>\n                           true \\<tau> \\<longrightarrow>\n                           \\<bottom> =\n                           not X->isEmpty\\<^sub>S\\<^sub>e\\<^sub>t() \\<tau>))\n 2. \\<And>\\<tau>.\n       \\<lbrakk>(\\<delta> X) \\<tau> = true \\<tau>;\n        infinite\n         \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                          (X \\<tau>)\\<rceil>\\<rceil>\\<rbrakk>\n       \\<Longrightarrow> (X->notEmpty\\<^sub>S\\<^sub>e\\<^sub>t() \\<tau> =\n                          true \\<tau> \\<longrightarrow>\n                          ((\\<upsilon> (\\<lambda>_.\n     SOME y.\n        y \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                 (X \\<tau>)\\<rceil>\\<rceil>))\n                            \\<tau> =\n                           true \\<tau> \\<longrightarrow>\n                           \\<lfloor>\\<lfloor>(SOME y.\n           y \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                    (X \\<tau>)\\<rceil>\\<rceil>)\n       \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                              (X \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor> =\n                           (if \\<delta> X->size\\<^sub>S\\<^sub>e\\<^sub>t() then not\n    X->isEmpty\\<^sub>S\\<^sub>e\\<^sub>t() else (\\<lambda>\\<tau>.\n            if (\\<delta> X) \\<tau> = true \\<tau>\n            then \\<lfloor>\\<lfloor>null \\<tau>\n                                   \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                    (X \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>\n            else \\<bottom>) endif)\n                            \\<tau>) \\<and>\n                          ((\\<upsilon> (\\<lambda>_.\n     SOME y.\n        y \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                 (X \\<tau>)\\<rceil>\\<rceil>))\n                            \\<tau> \\<noteq>\n                           true \\<tau> \\<longrightarrow>\n                           \\<bottom> =\n                           (if \\<delta> X->size\\<^sub>S\\<^sub>e\\<^sub>t() then not\n    X->isEmpty\\<^sub>S\\<^sub>e\\<^sub>t() else (\\<lambda>\\<tau>.\n            if (\\<delta> X) \\<tau> = true \\<tau>\n            then \\<lfloor>\\<lfloor>null \\<tau>\n                                   \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                    (X \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>\n            else \\<bottom>) endif)\n                            \\<tau>)) \\<and>\n                         (X->notEmpty\\<^sub>S\\<^sub>e\\<^sub>t()\n                           \\<tau> \\<noteq>\n                          true \\<tau> \\<longrightarrow>\n                          ((\\<upsilon> (\\<lambda>_. null \\<tau>)) \\<tau> =\n                           true \\<tau> \\<longrightarrow>\n                           \\<lfloor>\\<lfloor>null \\<tau>\n       \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                              (X \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor> =\n                           (if \\<delta> X->size\\<^sub>S\\<^sub>e\\<^sub>t() then not\n    X->isEmpty\\<^sub>S\\<^sub>e\\<^sub>t() else (\\<lambda>\\<tau>.\n            if (\\<delta> X) \\<tau> = true \\<tau>\n            then \\<lfloor>\\<lfloor>null \\<tau>\n                                   \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                    (X \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>\n            else \\<bottom>) endif)\n                            \\<tau>) \\<and>\n                          ((\\<upsilon> (\\<lambda>_. null \\<tau>))\n                            \\<tau> \\<noteq>\n                           true \\<tau> \\<longrightarrow>\n                           \\<bottom> =\n                           (if \\<delta> X->size\\<^sub>S\\<^sub>e\\<^sub>t() then not\n    X->isEmpty\\<^sub>S\\<^sub>e\\<^sub>t() else (\\<lambda>\\<tau>.\n            if (\\<delta> X) \\<tau> = true \\<tau>\n            then \\<lfloor>\\<lfloor>null \\<tau>\n                                   \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                    (X \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>\n            else \\<bottom>) endif)\n                            \\<tau>))\n 3. \\<And>\\<tau>.\n       (\\<delta> X) \\<tau> \\<noteq> true \\<tau> \\<Longrightarrow>\n       (if (\\<delta> X) \\<tau> = true \\<tau> \\<and>\n           (\\<upsilon> (\\<lambda>_.\n                           if (\\<upsilon> X) \\<tau> = true \\<tau>\n                           then if (\\<delta> X and\n                                    X->notEmpty\\<^sub>S\\<^sub>e\\<^sub>t())\n                                    \\<tau> =\n                                   true \\<tau>\n                                then SOME y.\n  y \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                           (X \\<tau>)\\<rceil>\\<rceil>\n                                else null \\<tau>\n                           else \\<bottom>))\n            \\<tau> =\n           true \\<tau>\n        then \\<lfloor>\\<lfloor>(if (\\<upsilon> X) \\<tau> = true \\<tau>\n                                then if (\\<delta> X and\n   X->notEmpty\\<^sub>S\\<^sub>e\\<^sub>t())\n   \\<tau> =\n  true \\<tau>\n                                     then SOME y.\n       y \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                (X \\<tau>)\\<rceil>\\<rceil>\n                                     else null \\<tau>\n                                else \\<bottom>)\n                               \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                (X \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>\n        else \\<bottom>) =\n       (if (\\<lambda>_.\n               (\\<delta> X)\n                \\<tau>) then (\\<lambda>_.\n                                 (if \\<delta> X->size\\<^sub>S\\<^sub>e\\<^sub>t() then not\n          X->isEmpty\\<^sub>S\\<^sub>e\\<^sub>t() else (\\<lambda>\\<tau>.\n                  if (\\<delta> X) \\<tau> = true \\<tau> \\<and>\n                     (\\<upsilon> null) \\<tau> = true \\<tau>\n                  then \\<lfloor>\\<lfloor>null \\<tau>\n   \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                          (X \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>\n                  else \\<bottom>) endif)\n                                  \\<tau>) else (\\<lambda>_.\n             invalid \\<tau>) endif)\n        \\<tau>", "apply(case_tac \"(X->notEmpty\\<^sub>S\\<^sub>e\\<^sub>t()) \\<tau> = true \\<tau>\", simp)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>\\<tau>.\n       \\<lbrakk>(\\<delta> X) \\<tau> = true \\<tau>;\n        finite\n         \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                          (X \\<tau>)\\<rceil>\\<rceil>;\n        (\\<delta> X->size\\<^sub>S\\<^sub>e\\<^sub>t()) \\<tau> = true \\<tau>;\n        X->notEmpty\\<^sub>S\\<^sub>e\\<^sub>t() \\<tau> = true \\<tau>\\<rbrakk>\n       \\<Longrightarrow> ((\\<upsilon> (\\<lambda>_.\n    SOME y.\n       y \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                (X \\<tau>)\\<rceil>\\<rceil>))\n                           \\<tau> =\n                          true \\<tau> \\<longrightarrow>\n                          \\<lfloor>\\<lfloor>(SOME y.\n          y \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                   (X \\<tau>)\\<rceil>\\<rceil>)\n      \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                             (X \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor> =\n                          not X->isEmpty\\<^sub>S\\<^sub>e\\<^sub>t()\n                           \\<tau>) \\<and>\n                         ((\\<upsilon> (\\<lambda>_.\n    SOME y.\n       y \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                (X \\<tau>)\\<rceil>\\<rceil>))\n                           \\<tau> \\<noteq>\n                          true \\<tau> \\<longrightarrow>\n                          \\<bottom> =\n                          not X->isEmpty\\<^sub>S\\<^sub>e\\<^sub>t() \\<tau>)\n 2. \\<And>\\<tau>.\n       \\<lbrakk>(\\<delta> X) \\<tau> = true \\<tau>;\n        finite\n         \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                          (X \\<tau>)\\<rceil>\\<rceil>;\n        (\\<delta> X->size\\<^sub>S\\<^sub>e\\<^sub>t()) \\<tau> = true \\<tau>;\n        X->notEmpty\\<^sub>S\\<^sub>e\\<^sub>t() \\<tau> \\<noteq>\n        true \\<tau>\\<rbrakk>\n       \\<Longrightarrow> (X->notEmpty\\<^sub>S\\<^sub>e\\<^sub>t() \\<tau> =\n                          true \\<tau> \\<longrightarrow>\n                          ((\\<upsilon> (\\<lambda>_.\n     SOME y.\n        y \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                 (X \\<tau>)\\<rceil>\\<rceil>))\n                            \\<tau> =\n                           true \\<tau> \\<longrightarrow>\n                           \\<lfloor>\\<lfloor>(SOME y.\n           y \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                    (X \\<tau>)\\<rceil>\\<rceil>)\n       \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                              (X \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor> =\n                           not X->isEmpty\\<^sub>S\\<^sub>e\\<^sub>t()\n                            \\<tau>) \\<and>\n                          ((\\<upsilon> (\\<lambda>_.\n     SOME y.\n        y \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                 (X \\<tau>)\\<rceil>\\<rceil>))\n                            \\<tau> \\<noteq>\n                           true \\<tau> \\<longrightarrow>\n                           \\<bottom> =\n                           not X->isEmpty\\<^sub>S\\<^sub>e\\<^sub>t()\n                            \\<tau>)) \\<and>\n                         (X->notEmpty\\<^sub>S\\<^sub>e\\<^sub>t()\n                           \\<tau> \\<noteq>\n                          true \\<tau> \\<longrightarrow>\n                          ((\\<upsilon> (\\<lambda>_. null \\<tau>)) \\<tau> =\n                           true \\<tau> \\<longrightarrow>\n                           \\<lfloor>\\<lfloor>null \\<tau>\n       \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                              (X \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor> =\n                           not X->isEmpty\\<^sub>S\\<^sub>e\\<^sub>t()\n                            \\<tau>) \\<and>\n                          ((\\<upsilon> (\\<lambda>_. null \\<tau>))\n                            \\<tau> \\<noteq>\n                           true \\<tau> \\<longrightarrow>\n                           \\<bottom> =\n                           not X->isEmpty\\<^sub>S\\<^sub>e\\<^sub>t() \\<tau>))\n 3. \\<And>\\<tau>.\n       \\<lbrakk>(\\<delta> X) \\<tau> = true \\<tau>;\n        infinite\n         \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                          (X \\<tau>)\\<rceil>\\<rceil>\\<rbrakk>\n       \\<Longrightarrow> (X->notEmpty\\<^sub>S\\<^sub>e\\<^sub>t() \\<tau> =\n                          true \\<tau> \\<longrightarrow>\n                          ((\\<upsilon> (\\<lambda>_.\n     SOME y.\n        y \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                 (X \\<tau>)\\<rceil>\\<rceil>))\n                            \\<tau> =\n                           true \\<tau> \\<longrightarrow>\n                           \\<lfloor>\\<lfloor>(SOME y.\n           y \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                    (X \\<tau>)\\<rceil>\\<rceil>)\n       \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                              (X \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor> =\n                           (if \\<delta> X->size\\<^sub>S\\<^sub>e\\<^sub>t() then not\n    X->isEmpty\\<^sub>S\\<^sub>e\\<^sub>t() else (\\<lambda>\\<tau>.\n            if (\\<delta> X) \\<tau> = true \\<tau>\n            then \\<lfloor>\\<lfloor>null \\<tau>\n                                   \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                    (X \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>\n            else \\<bottom>) endif)\n                            \\<tau>) \\<and>\n                          ((\\<upsilon> (\\<lambda>_.\n     SOME y.\n        y \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                 (X \\<tau>)\\<rceil>\\<rceil>))\n                            \\<tau> \\<noteq>\n                           true \\<tau> \\<longrightarrow>\n                           \\<bottom> =\n                           (if \\<delta> X->size\\<^sub>S\\<^sub>e\\<^sub>t() then not\n    X->isEmpty\\<^sub>S\\<^sub>e\\<^sub>t() else (\\<lambda>\\<tau>.\n            if (\\<delta> X) \\<tau> = true \\<tau>\n            then \\<lfloor>\\<lfloor>null \\<tau>\n                                   \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                    (X \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>\n            else \\<bottom>) endif)\n                            \\<tau>)) \\<and>\n                         (X->notEmpty\\<^sub>S\\<^sub>e\\<^sub>t()\n                           \\<tau> \\<noteq>\n                          true \\<tau> \\<longrightarrow>\n                          ((\\<upsilon> (\\<lambda>_. null \\<tau>)) \\<tau> =\n                           true \\<tau> \\<longrightarrow>\n                           \\<lfloor>\\<lfloor>null \\<tau>\n       \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                              (X \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor> =\n                           (if \\<delta> X->size\\<^sub>S\\<^sub>e\\<^sub>t() then not\n    X->isEmpty\\<^sub>S\\<^sub>e\\<^sub>t() else (\\<lambda>\\<tau>.\n            if (\\<delta> X) \\<tau> = true \\<tau>\n            then \\<lfloor>\\<lfloor>null \\<tau>\n                                   \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                    (X \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>\n            else \\<bottom>) endif)\n                            \\<tau>) \\<and>\n                          ((\\<upsilon> (\\<lambda>_. null \\<tau>))\n                            \\<tau> \\<noteq>\n                           true \\<tau> \\<longrightarrow>\n                           \\<bottom> =\n                           (if \\<delta> X->size\\<^sub>S\\<^sub>e\\<^sub>t() then not\n    X->isEmpty\\<^sub>S\\<^sub>e\\<^sub>t() else (\\<lambda>\\<tau>.\n            if (\\<delta> X) \\<tau> = true \\<tau>\n            then \\<lfloor>\\<lfloor>null \\<tau>\n                                   \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                    (X \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>\n            else \\<bottom>) endif)\n                            \\<tau>))\n 4. \\<And>\\<tau>.\n       (\\<delta> X) \\<tau> \\<noteq> true \\<tau> \\<Longrightarrow>\n       (if (\\<delta> X) \\<tau> = true \\<tau> \\<and>\n           (\\<upsilon> (\\<lambda>_.\n                           if (\\<upsilon> X) \\<tau> = true \\<tau>\n                           then if (\\<delta> X and\n                                    X->notEmpty\\<^sub>S\\<^sub>e\\<^sub>t())\n                                    \\<tau> =\n                                   true \\<tau>\n                                then SOME y.\n  y \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                           (X \\<tau>)\\<rceil>\\<rceil>\n                                else null \\<tau>\n                           else \\<bottom>))\n            \\<tau> =\n           true \\<tau>\n        then \\<lfloor>\\<lfloor>(if (\\<upsilon> X) \\<tau> = true \\<tau>\n                                then if (\\<delta> X and\n   X->notEmpty\\<^sub>S\\<^sub>e\\<^sub>t())\n   \\<tau> =\n  true \\<tau>\n                                     then SOME y.\n       y \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                (X \\<tau>)\\<rceil>\\<rceil>\n                                     else null \\<tau>\n                                else \\<bottom>)\n                               \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                (X \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>\n        else \\<bottom>) =\n       (if (\\<lambda>_.\n               (\\<delta> X)\n                \\<tau>) then (\\<lambda>_.\n                                 (if \\<delta> X->size\\<^sub>S\\<^sub>e\\<^sub>t() then not\n          X->isEmpty\\<^sub>S\\<^sub>e\\<^sub>t() else (\\<lambda>\\<tau>.\n                  if (\\<delta> X) \\<tau> = true \\<tau> \\<and>\n                     (\\<upsilon> null) \\<tau> = true \\<tau>\n                  then \\<lfloor>\\<lfloor>null \\<tau>\n   \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                          (X \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>\n                  else \\<bottom>) endif)\n                                  \\<tau>) else (\\<lambda>_.\n             invalid \\<tau>) endif)\n        \\<tau>", "apply(frule OclNotEmpty_has_elt[simplified OclValid_def], simp)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>\\<tau>.\n       \\<lbrakk>(\\<delta> X) \\<tau> = true \\<tau>;\n        finite\n         \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                          (X \\<tau>)\\<rceil>\\<rceil>;\n        (\\<delta> X->size\\<^sub>S\\<^sub>e\\<^sub>t()) \\<tau> = true \\<tau>;\n        X->notEmpty\\<^sub>S\\<^sub>e\\<^sub>t() \\<tau> = true \\<tau>;\n        \\<exists>e.\n           e \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                    (X \\<tau>)\\<rceil>\\<rceil>\\<rbrakk>\n       \\<Longrightarrow> ((\\<upsilon> (\\<lambda>_.\n    SOME y.\n       y \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                (X \\<tau>)\\<rceil>\\<rceil>))\n                           \\<tau> =\n                          true \\<tau> \\<longrightarrow>\n                          \\<lfloor>\\<lfloor>(SOME y.\n          y \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                   (X \\<tau>)\\<rceil>\\<rceil>)\n      \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                             (X \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor> =\n                          not X->isEmpty\\<^sub>S\\<^sub>e\\<^sub>t()\n                           \\<tau>) \\<and>\n                         ((\\<upsilon> (\\<lambda>_.\n    SOME y.\n       y \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                (X \\<tau>)\\<rceil>\\<rceil>))\n                           \\<tau> \\<noteq>\n                          true \\<tau> \\<longrightarrow>\n                          \\<bottom> =\n                          not X->isEmpty\\<^sub>S\\<^sub>e\\<^sub>t() \\<tau>)\n 2. \\<And>\\<tau>.\n       \\<lbrakk>(\\<delta> X) \\<tau> = true \\<tau>;\n        finite\n         \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                          (X \\<tau>)\\<rceil>\\<rceil>;\n        (\\<delta> X->size\\<^sub>S\\<^sub>e\\<^sub>t()) \\<tau> = true \\<tau>;\n        X->notEmpty\\<^sub>S\\<^sub>e\\<^sub>t() \\<tau> \\<noteq>\n        true \\<tau>\\<rbrakk>\n       \\<Longrightarrow> (X->notEmpty\\<^sub>S\\<^sub>e\\<^sub>t() \\<tau> =\n                          true \\<tau> \\<longrightarrow>\n                          ((\\<upsilon> (\\<lambda>_.\n     SOME y.\n        y \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                 (X \\<tau>)\\<rceil>\\<rceil>))\n                            \\<tau> =\n                           true \\<tau> \\<longrightarrow>\n                           \\<lfloor>\\<lfloor>(SOME y.\n           y \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                    (X \\<tau>)\\<rceil>\\<rceil>)\n       \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                              (X \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor> =\n                           not X->isEmpty\\<^sub>S\\<^sub>e\\<^sub>t()\n                            \\<tau>) \\<and>\n                          ((\\<upsilon> (\\<lambda>_.\n     SOME y.\n        y \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                 (X \\<tau>)\\<rceil>\\<rceil>))\n                            \\<tau> \\<noteq>\n                           true \\<tau> \\<longrightarrow>\n                           \\<bottom> =\n                           not X->isEmpty\\<^sub>S\\<^sub>e\\<^sub>t()\n                            \\<tau>)) \\<and>\n                         (X->notEmpty\\<^sub>S\\<^sub>e\\<^sub>t()\n                           \\<tau> \\<noteq>\n                          true \\<tau> \\<longrightarrow>\n                          ((\\<upsilon> (\\<lambda>_. null \\<tau>)) \\<tau> =\n                           true \\<tau> \\<longrightarrow>\n                           \\<lfloor>\\<lfloor>null \\<tau>\n       \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                              (X \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor> =\n                           not X->isEmpty\\<^sub>S\\<^sub>e\\<^sub>t()\n                            \\<tau>) \\<and>\n                          ((\\<upsilon> (\\<lambda>_. null \\<tau>))\n                            \\<tau> \\<noteq>\n                           true \\<tau> \\<longrightarrow>\n                           \\<bottom> =\n                           not X->isEmpty\\<^sub>S\\<^sub>e\\<^sub>t() \\<tau>))\n 3. \\<And>\\<tau>.\n       \\<lbrakk>(\\<delta> X) \\<tau> = true \\<tau>;\n        infinite\n         \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                          (X \\<tau>)\\<rceil>\\<rceil>\\<rbrakk>\n       \\<Longrightarrow> (X->notEmpty\\<^sub>S\\<^sub>e\\<^sub>t() \\<tau> =\n                          true \\<tau> \\<longrightarrow>\n                          ((\\<upsilon> (\\<lambda>_.\n     SOME y.\n        y \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                 (X \\<tau>)\\<rceil>\\<rceil>))\n                            \\<tau> =\n                           true \\<tau> \\<longrightarrow>\n                           \\<lfloor>\\<lfloor>(SOME y.\n           y \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                    (X \\<tau>)\\<rceil>\\<rceil>)\n       \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                              (X \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor> =\n                           (if \\<delta> X->size\\<^sub>S\\<^sub>e\\<^sub>t() then not\n    X->isEmpty\\<^sub>S\\<^sub>e\\<^sub>t() else (\\<lambda>\\<tau>.\n            if (\\<delta> X) \\<tau> = true \\<tau>\n            then \\<lfloor>\\<lfloor>null \\<tau>\n                                   \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                    (X \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>\n            else \\<bottom>) endif)\n                            \\<tau>) \\<and>\n                          ((\\<upsilon> (\\<lambda>_.\n     SOME y.\n        y \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                 (X \\<tau>)\\<rceil>\\<rceil>))\n                            \\<tau> \\<noteq>\n                           true \\<tau> \\<longrightarrow>\n                           \\<bottom> =\n                           (if \\<delta> X->size\\<^sub>S\\<^sub>e\\<^sub>t() then not\n    X->isEmpty\\<^sub>S\\<^sub>e\\<^sub>t() else (\\<lambda>\\<tau>.\n            if (\\<delta> X) \\<tau> = true \\<tau>\n            then \\<lfloor>\\<lfloor>null \\<tau>\n                                   \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                    (X \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>\n            else \\<bottom>) endif)\n                            \\<tau>)) \\<and>\n                         (X->notEmpty\\<^sub>S\\<^sub>e\\<^sub>t()\n                           \\<tau> \\<noteq>\n                          true \\<tau> \\<longrightarrow>\n                          ((\\<upsilon> (\\<lambda>_. null \\<tau>)) \\<tau> =\n                           true \\<tau> \\<longrightarrow>\n                           \\<lfloor>\\<lfloor>null \\<tau>\n       \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                              (X \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor> =\n                           (if \\<delta> X->size\\<^sub>S\\<^sub>e\\<^sub>t() then not\n    X->isEmpty\\<^sub>S\\<^sub>e\\<^sub>t() else (\\<lambda>\\<tau>.\n            if (\\<delta> X) \\<tau> = true \\<tau>\n            then \\<lfloor>\\<lfloor>null \\<tau>\n                                   \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                    (X \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>\n            else \\<bottom>) endif)\n                            \\<tau>) \\<and>\n                          ((\\<upsilon> (\\<lambda>_. null \\<tau>))\n                            \\<tau> \\<noteq>\n                           true \\<tau> \\<longrightarrow>\n                           \\<bottom> =\n                           (if \\<delta> X->size\\<^sub>S\\<^sub>e\\<^sub>t() then not\n    X->isEmpty\\<^sub>S\\<^sub>e\\<^sub>t() else (\\<lambda>\\<tau>.\n            if (\\<delta> X) \\<tau> = true \\<tau>\n            then \\<lfloor>\\<lfloor>null \\<tau>\n                                   \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                    (X \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>\n            else \\<bottom>) endif)\n                            \\<tau>))\n 4. \\<And>\\<tau>.\n       (\\<delta> X) \\<tau> \\<noteq> true \\<tau> \\<Longrightarrow>\n       (if (\\<delta> X) \\<tau> = true \\<tau> \\<and>\n           (\\<upsilon> (\\<lambda>_.\n                           if (\\<upsilon> X) \\<tau> = true \\<tau>\n                           then if (\\<delta> X and\n                                    X->notEmpty\\<^sub>S\\<^sub>e\\<^sub>t())\n                                    \\<tau> =\n                                   true \\<tau>\n                                then SOME y.\n  y \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                           (X \\<tau>)\\<rceil>\\<rceil>\n                                else null \\<tau>\n                           else \\<bottom>))\n            \\<tau> =\n           true \\<tau>\n        then \\<lfloor>\\<lfloor>(if (\\<upsilon> X) \\<tau> = true \\<tau>\n                                then if (\\<delta> X and\n   X->notEmpty\\<^sub>S\\<^sub>e\\<^sub>t())\n   \\<tau> =\n  true \\<tau>\n                                     then SOME y.\n       y \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                (X \\<tau>)\\<rceil>\\<rceil>\n                                     else null \\<tau>\n                                else \\<bottom>)\n                               \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                (X \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>\n        else \\<bottom>) =\n       (if (\\<lambda>_.\n               (\\<delta> X)\n                \\<tau>) then (\\<lambda>_.\n                                 (if \\<delta> X->size\\<^sub>S\\<^sub>e\\<^sub>t() then not\n          X->isEmpty\\<^sub>S\\<^sub>e\\<^sub>t() else (\\<lambda>\\<tau>.\n                  if (\\<delta> X) \\<tau> = true \\<tau> \\<and>\n                     (\\<upsilon> null) \\<tau> = true \\<tau>\n                  then \\<lfloor>\\<lfloor>null \\<tau>\n   \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                          (X \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>\n                  else \\<bottom>) endif)\n                                  \\<tau>) else (\\<lambda>_.\n             invalid \\<tau>) endif)\n        \\<tau>", "apply(simp add: OclNotEmpty_def cp_OclIf[symmetric])"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>\\<tau>.\n       \\<lbrakk>(\\<delta> X) \\<tau> = true \\<tau>;\n        finite\n         \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                          (X \\<tau>)\\<rceil>\\<rceil>;\n        (\\<delta> X->size\\<^sub>S\\<^sub>e\\<^sub>t()) \\<tau> = true \\<tau>;\n        not X->isEmpty\\<^sub>S\\<^sub>e\\<^sub>t() \\<tau> = true \\<tau>;\n        \\<exists>e.\n           e \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                    (X \\<tau>)\\<rceil>\\<rceil>\\<rbrakk>\n       \\<Longrightarrow> ((\\<upsilon> (\\<lambda>_.\n    SOME y.\n       y \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                (X \\<tau>)\\<rceil>\\<rceil>))\n                           \\<tau> =\n                          true \\<tau> \\<longrightarrow>\n                          \\<lfloor>\\<lfloor>(SOME y.\n          y \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                   (X \\<tau>)\\<rceil>\\<rceil>)\n      \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                             (X \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor> =\n                          true \\<tau>) \\<and>\n                         ((\\<upsilon> (\\<lambda>_.\n    SOME y.\n       y \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                (X \\<tau>)\\<rceil>\\<rceil>))\n                           \\<tau> \\<noteq>\n                          true \\<tau> \\<longrightarrow>\n                          \\<bottom> = true \\<tau>)\n 2. \\<And>\\<tau>.\n       \\<lbrakk>(\\<delta> X) \\<tau> = true \\<tau>;\n        finite\n         \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                          (X \\<tau>)\\<rceil>\\<rceil>;\n        (\\<delta> X->size\\<^sub>S\\<^sub>e\\<^sub>t()) \\<tau> = true \\<tau>;\n        X->notEmpty\\<^sub>S\\<^sub>e\\<^sub>t() \\<tau> \\<noteq>\n        true \\<tau>\\<rbrakk>\n       \\<Longrightarrow> (X->notEmpty\\<^sub>S\\<^sub>e\\<^sub>t() \\<tau> =\n                          true \\<tau> \\<longrightarrow>\n                          ((\\<upsilon> (\\<lambda>_.\n     SOME y.\n        y \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                 (X \\<tau>)\\<rceil>\\<rceil>))\n                            \\<tau> =\n                           true \\<tau> \\<longrightarrow>\n                           \\<lfloor>\\<lfloor>(SOME y.\n           y \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                    (X \\<tau>)\\<rceil>\\<rceil>)\n       \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                              (X \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor> =\n                           not X->isEmpty\\<^sub>S\\<^sub>e\\<^sub>t()\n                            \\<tau>) \\<and>\n                          ((\\<upsilon> (\\<lambda>_.\n     SOME y.\n        y \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                 (X \\<tau>)\\<rceil>\\<rceil>))\n                            \\<tau> \\<noteq>\n                           true \\<tau> \\<longrightarrow>\n                           \\<bottom> =\n                           not X->isEmpty\\<^sub>S\\<^sub>e\\<^sub>t()\n                            \\<tau>)) \\<and>\n                         (X->notEmpty\\<^sub>S\\<^sub>e\\<^sub>t()\n                           \\<tau> \\<noteq>\n                          true \\<tau> \\<longrightarrow>\n                          ((\\<upsilon> (\\<lambda>_. null \\<tau>)) \\<tau> =\n                           true \\<tau> \\<longrightarrow>\n                           \\<lfloor>\\<lfloor>null \\<tau>\n       \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                              (X \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor> =\n                           not X->isEmpty\\<^sub>S\\<^sub>e\\<^sub>t()\n                            \\<tau>) \\<and>\n                          ((\\<upsilon> (\\<lambda>_. null \\<tau>))\n                            \\<tau> \\<noteq>\n                           true \\<tau> \\<longrightarrow>\n                           \\<bottom> =\n                           not X->isEmpty\\<^sub>S\\<^sub>e\\<^sub>t() \\<tau>))\n 3. \\<And>\\<tau>.\n       \\<lbrakk>(\\<delta> X) \\<tau> = true \\<tau>;\n        infinite\n         \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                          (X \\<tau>)\\<rceil>\\<rceil>\\<rbrakk>\n       \\<Longrightarrow> (X->notEmpty\\<^sub>S\\<^sub>e\\<^sub>t() \\<tau> =\n                          true \\<tau> \\<longrightarrow>\n                          ((\\<upsilon> (\\<lambda>_.\n     SOME y.\n        y \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                 (X \\<tau>)\\<rceil>\\<rceil>))\n                            \\<tau> =\n                           true \\<tau> \\<longrightarrow>\n                           \\<lfloor>\\<lfloor>(SOME y.\n           y \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                    (X \\<tau>)\\<rceil>\\<rceil>)\n       \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                              (X \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor> =\n                           (if \\<delta> X->size\\<^sub>S\\<^sub>e\\<^sub>t() then not\n    X->isEmpty\\<^sub>S\\<^sub>e\\<^sub>t() else (\\<lambda>\\<tau>.\n            if (\\<delta> X) \\<tau> = true \\<tau>\n            then \\<lfloor>\\<lfloor>null \\<tau>\n                                   \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                    (X \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>\n            else \\<bottom>) endif)\n                            \\<tau>) \\<and>\n                          ((\\<upsilon> (\\<lambda>_.\n     SOME y.\n        y \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                 (X \\<tau>)\\<rceil>\\<rceil>))\n                            \\<tau> \\<noteq>\n                           true \\<tau> \\<longrightarrow>\n                           \\<bottom> =\n                           (if \\<delta> X->size\\<^sub>S\\<^sub>e\\<^sub>t() then not\n    X->isEmpty\\<^sub>S\\<^sub>e\\<^sub>t() else (\\<lambda>\\<tau>.\n            if (\\<delta> X) \\<tau> = true \\<tau>\n            then \\<lfloor>\\<lfloor>null \\<tau>\n                                   \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                    (X \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>\n            else \\<bottom>) endif)\n                            \\<tau>)) \\<and>\n                         (X->notEmpty\\<^sub>S\\<^sub>e\\<^sub>t()\n                           \\<tau> \\<noteq>\n                          true \\<tau> \\<longrightarrow>\n                          ((\\<upsilon> (\\<lambda>_. null \\<tau>)) \\<tau> =\n                           true \\<tau> \\<longrightarrow>\n                           \\<lfloor>\\<lfloor>null \\<tau>\n       \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                              (X \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor> =\n                           (if \\<delta> X->size\\<^sub>S\\<^sub>e\\<^sub>t() then not\n    X->isEmpty\\<^sub>S\\<^sub>e\\<^sub>t() else (\\<lambda>\\<tau>.\n            if (\\<delta> X) \\<tau> = true \\<tau>\n            then \\<lfloor>\\<lfloor>null \\<tau>\n                                   \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                    (X \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>\n            else \\<bottom>) endif)\n                            \\<tau>) \\<and>\n                          ((\\<upsilon> (\\<lambda>_. null \\<tau>))\n                            \\<tau> \\<noteq>\n                           true \\<tau> \\<longrightarrow>\n                           \\<bottom> =\n                           (if \\<delta> X->size\\<^sub>S\\<^sub>e\\<^sub>t() then not\n    X->isEmpty\\<^sub>S\\<^sub>e\\<^sub>t() else (\\<lambda>\\<tau>.\n            if (\\<delta> X) \\<tau> = true \\<tau>\n            then \\<lfloor>\\<lfloor>null \\<tau>\n                                   \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                    (X \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>\n            else \\<bottom>) endif)\n                            \\<tau>))\n 4. \\<And>\\<tau>.\n       (\\<delta> X) \\<tau> \\<noteq> true \\<tau> \\<Longrightarrow>\n       (if (\\<delta> X) \\<tau> = true \\<tau> \\<and>\n           (\\<upsilon> (\\<lambda>_.\n                           if (\\<upsilon> X) \\<tau> = true \\<tau>\n                           then if (\\<delta> X and\n                                    X->notEmpty\\<^sub>S\\<^sub>e\\<^sub>t())\n                                    \\<tau> =\n                                   true \\<tau>\n                                then SOME y.\n  y \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                           (X \\<tau>)\\<rceil>\\<rceil>\n                                else null \\<tau>\n                           else \\<bottom>))\n            \\<tau> =\n           true \\<tau>\n        then \\<lfloor>\\<lfloor>(if (\\<upsilon> X) \\<tau> = true \\<tau>\n                                then if (\\<delta> X and\n   X->notEmpty\\<^sub>S\\<^sub>e\\<^sub>t())\n   \\<tau> =\n  true \\<tau>\n                                     then SOME y.\n       y \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                (X \\<tau>)\\<rceil>\\<rceil>\n                                     else null \\<tau>\n                                else \\<bottom>)\n                               \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                (X \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>\n        else \\<bottom>) =\n       (if (\\<lambda>_.\n               (\\<delta> X)\n                \\<tau>) then (\\<lambda>_.\n                                 (if \\<delta> X->size\\<^sub>S\\<^sub>e\\<^sub>t() then not\n          X->isEmpty\\<^sub>S\\<^sub>e\\<^sub>t() else (\\<lambda>\\<tau>.\n                  if (\\<delta> X) \\<tau> = true \\<tau> \\<and>\n                     (\\<upsilon> null) \\<tau> = true \\<tau>\n                  then \\<lfloor>\\<lfloor>null \\<tau>\n   \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                          (X \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>\n                  else \\<bottom>) endif)\n                                  \\<tau>) else (\\<lambda>_.\n             invalid \\<tau>) endif)\n        \\<tau>", "apply(subgoal_tac \"(SOME y. y \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e (X \\<tau>)\\<rceil>\\<rceil>) \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e (X \\<tau>)\\<rceil>\\<rceil>\", simp add: true_def)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>\\<tau>.\n       \\<lbrakk>(\\<delta> X) \\<tau> =\n                \\<lfloor>\\<lfloor>True\\<rfloor>\\<rfloor>;\n        finite\n         \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                          (X \\<tau>)\\<rceil>\\<rceil>;\n        (\\<delta> X->size\\<^sub>S\\<^sub>e\\<^sub>t()) \\<tau> =\n        \\<lfloor>\\<lfloor>True\\<rfloor>\\<rfloor>;\n        not X->isEmpty\\<^sub>S\\<^sub>e\\<^sub>t() \\<tau> =\n        \\<lfloor>\\<lfloor>True\\<rfloor>\\<rfloor>;\n        \\<exists>e.\n           e \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                    (X \\<tau>)\\<rceil>\\<rceil>;\n        (SOME y.\n            y \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                     (X \\<tau>)\\<rceil>\\<rceil>)\n        \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                               (X \\<tau>)\\<rceil>\\<rceil>\\<rbrakk>\n       \\<Longrightarrow> (\\<upsilon> (\\<lambda>_.\n   SOME y.\n      y \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                               (X \\<tau>)\\<rceil>\\<rceil>))\n                          \\<tau> \\<noteq>\n                         \\<lfloor>\\<lfloor>True\\<rfloor>\\<rfloor> \\<longrightarrow>\n                         \\<bottom> =\n                         \\<lfloor>\\<lfloor>True\\<rfloor>\\<rfloor>\n 2. \\<And>\\<tau>.\n       \\<lbrakk>(\\<delta> X) \\<tau> = true \\<tau>;\n        finite\n         \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                          (X \\<tau>)\\<rceil>\\<rceil>;\n        (\\<delta> X->size\\<^sub>S\\<^sub>e\\<^sub>t()) \\<tau> = true \\<tau>;\n        not X->isEmpty\\<^sub>S\\<^sub>e\\<^sub>t() \\<tau> = true \\<tau>;\n        \\<exists>e.\n           e \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                    (X \\<tau>)\\<rceil>\\<rceil>\\<rbrakk>\n       \\<Longrightarrow> (SOME y.\n                             y \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                (X \\<tau>)\\<rceil>\\<rceil>)\n                         \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n          (X \\<tau>)\\<rceil>\\<rceil>\n 3. \\<And>\\<tau>.\n       \\<lbrakk>(\\<delta> X) \\<tau> = true \\<tau>;\n        finite\n         \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                          (X \\<tau>)\\<rceil>\\<rceil>;\n        (\\<delta> X->size\\<^sub>S\\<^sub>e\\<^sub>t()) \\<tau> = true \\<tau>;\n        X->notEmpty\\<^sub>S\\<^sub>e\\<^sub>t() \\<tau> \\<noteq>\n        true \\<tau>\\<rbrakk>\n       \\<Longrightarrow> (X->notEmpty\\<^sub>S\\<^sub>e\\<^sub>t() \\<tau> =\n                          true \\<tau> \\<longrightarrow>\n                          ((\\<upsilon> (\\<lambda>_.\n     SOME y.\n        y \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                 (X \\<tau>)\\<rceil>\\<rceil>))\n                            \\<tau> =\n                           true \\<tau> \\<longrightarrow>\n                           \\<lfloor>\\<lfloor>(SOME y.\n           y \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                    (X \\<tau>)\\<rceil>\\<rceil>)\n       \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                              (X \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor> =\n                           not X->isEmpty\\<^sub>S\\<^sub>e\\<^sub>t()\n                            \\<tau>) \\<and>\n                          ((\\<upsilon> (\\<lambda>_.\n     SOME y.\n        y \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                 (X \\<tau>)\\<rceil>\\<rceil>))\n                            \\<tau> \\<noteq>\n                           true \\<tau> \\<longrightarrow>\n                           \\<bottom> =\n                           not X->isEmpty\\<^sub>S\\<^sub>e\\<^sub>t()\n                            \\<tau>)) \\<and>\n                         (X->notEmpty\\<^sub>S\\<^sub>e\\<^sub>t()\n                           \\<tau> \\<noteq>\n                          true \\<tau> \\<longrightarrow>\n                          ((\\<upsilon> (\\<lambda>_. null \\<tau>)) \\<tau> =\n                           true \\<tau> \\<longrightarrow>\n                           \\<lfloor>\\<lfloor>null \\<tau>\n       \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                              (X \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor> =\n                           not X->isEmpty\\<^sub>S\\<^sub>e\\<^sub>t()\n                            \\<tau>) \\<and>\n                          ((\\<upsilon> (\\<lambda>_. null \\<tau>))\n                            \\<tau> \\<noteq>\n                           true \\<tau> \\<longrightarrow>\n                           \\<bottom> =\n                           not X->isEmpty\\<^sub>S\\<^sub>e\\<^sub>t() \\<tau>))\n 4. \\<And>\\<tau>.\n       \\<lbrakk>(\\<delta> X) \\<tau> = true \\<tau>;\n        infinite\n         \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                          (X \\<tau>)\\<rceil>\\<rceil>\\<rbrakk>\n       \\<Longrightarrow> (X->notEmpty\\<^sub>S\\<^sub>e\\<^sub>t() \\<tau> =\n                          true \\<tau> \\<longrightarrow>\n                          ((\\<upsilon> (\\<lambda>_.\n     SOME y.\n        y \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                 (X \\<tau>)\\<rceil>\\<rceil>))\n                            \\<tau> =\n                           true \\<tau> \\<longrightarrow>\n                           \\<lfloor>\\<lfloor>(SOME y.\n           y \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                    (X \\<tau>)\\<rceil>\\<rceil>)\n       \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                              (X \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor> =\n                           (if \\<delta> X->size\\<^sub>S\\<^sub>e\\<^sub>t() then not\n    X->isEmpty\\<^sub>S\\<^sub>e\\<^sub>t() else (\\<lambda>\\<tau>.\n            if (\\<delta> X) \\<tau> = true \\<tau>\n            then \\<lfloor>\\<lfloor>null \\<tau>\n                                   \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                    (X \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>\n            else \\<bottom>) endif)\n                            \\<tau>) \\<and>\n                          ((\\<upsilon> (\\<lambda>_.\n     SOME y.\n        y \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                 (X \\<tau>)\\<rceil>\\<rceil>))\n                            \\<tau> \\<noteq>\n                           true \\<tau> \\<longrightarrow>\n                           \\<bottom> =\n                           (if \\<delta> X->size\\<^sub>S\\<^sub>e\\<^sub>t() then not\n    X->isEmpty\\<^sub>S\\<^sub>e\\<^sub>t() else (\\<lambda>\\<tau>.\n            if (\\<delta> X) \\<tau> = true \\<tau>\n            then \\<lfloor>\\<lfloor>null \\<tau>\n                                   \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                    (X \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>\n            else \\<bottom>) endif)\n                            \\<tau>)) \\<and>\n                         (X->notEmpty\\<^sub>S\\<^sub>e\\<^sub>t()\n                           \\<tau> \\<noteq>\n                          true \\<tau> \\<longrightarrow>\n                          ((\\<upsilon> (\\<lambda>_. null \\<tau>)) \\<tau> =\n                           true \\<tau> \\<longrightarrow>\n                           \\<lfloor>\\<lfloor>null \\<tau>\n       \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                              (X \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor> =\n                           (if \\<delta> X->size\\<^sub>S\\<^sub>e\\<^sub>t() then not\n    X->isEmpty\\<^sub>S\\<^sub>e\\<^sub>t() else (\\<lambda>\\<tau>.\n            if (\\<delta> X) \\<tau> = true \\<tau>\n            then \\<lfloor>\\<lfloor>null \\<tau>\n                                   \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                    (X \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>\n            else \\<bottom>) endif)\n                            \\<tau>) \\<and>\n                          ((\\<upsilon> (\\<lambda>_. null \\<tau>))\n                            \\<tau> \\<noteq>\n                           true \\<tau> \\<longrightarrow>\n                           \\<bottom> =\n                           (if \\<delta> X->size\\<^sub>S\\<^sub>e\\<^sub>t() then not\n    X->isEmpty\\<^sub>S\\<^sub>e\\<^sub>t() else (\\<lambda>\\<tau>.\n            if (\\<delta> X) \\<tau> = true \\<tau>\n            then \\<lfloor>\\<lfloor>null \\<tau>\n                                   \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                    (X \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>\n            else \\<bottom>) endif)\n                            \\<tau>))\n 5. \\<And>\\<tau>.\n       (\\<delta> X) \\<tau> \\<noteq> true \\<tau> \\<Longrightarrow>\n       (if (\\<delta> X) \\<tau> = true \\<tau> \\<and>\n           (\\<upsilon> (\\<lambda>_.\n                           if (\\<upsilon> X) \\<tau> = true \\<tau>\n                           then if (\\<delta> X and\n                                    X->notEmpty\\<^sub>S\\<^sub>e\\<^sub>t())\n                                    \\<tau> =\n                                   true \\<tau>\n                                then SOME y.\n  y \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                           (X \\<tau>)\\<rceil>\\<rceil>\n                                else null \\<tau>\n                           else \\<bottom>))\n            \\<tau> =\n           true \\<tau>\n        then \\<lfloor>\\<lfloor>(if (\\<upsilon> X) \\<tau> = true \\<tau>\n                                then if (\\<delta> X and\n   X->notEmpty\\<^sub>S\\<^sub>e\\<^sub>t())\n   \\<tau> =\n  true \\<tau>\n                                     then SOME y.\n       y \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                (X \\<tau>)\\<rceil>\\<rceil>\n                                     else null \\<tau>\n                                else \\<bottom>)\n                               \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                (X \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>\n        else \\<bottom>) =\n       (if (\\<lambda>_.\n               (\\<delta> X)\n                \\<tau>) then (\\<lambda>_.\n                                 (if \\<delta> X->size\\<^sub>S\\<^sub>e\\<^sub>t() then not\n          X->isEmpty\\<^sub>S\\<^sub>e\\<^sub>t() else (\\<lambda>\\<tau>.\n                  if (\\<delta> X) \\<tau> = true \\<tau> \\<and>\n                     (\\<upsilon> null) \\<tau> = true \\<tau>\n                  then \\<lfloor>\\<lfloor>null \\<tau>\n   \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                          (X \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>\n                  else \\<bottom>) endif)\n                                  \\<tau>) else (\\<lambda>_.\n             invalid \\<tau>) endif)\n        \\<tau>", "apply(metis OclValid_def Set_inv_lemma foundation18' null_option_def true_def)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>\\<tau>.\n       \\<lbrakk>(\\<delta> X) \\<tau> = true \\<tau>;\n        finite\n         \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                          (X \\<tau>)\\<rceil>\\<rceil>;\n        (\\<delta> X->size\\<^sub>S\\<^sub>e\\<^sub>t()) \\<tau> = true \\<tau>;\n        not X->isEmpty\\<^sub>S\\<^sub>e\\<^sub>t() \\<tau> = true \\<tau>;\n        \\<exists>e.\n           e \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                    (X \\<tau>)\\<rceil>\\<rceil>\\<rbrakk>\n       \\<Longrightarrow> (SOME y.\n                             y \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                (X \\<tau>)\\<rceil>\\<rceil>)\n                         \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n          (X \\<tau>)\\<rceil>\\<rceil>\n 2. \\<And>\\<tau>.\n       \\<lbrakk>(\\<delta> X) \\<tau> = true \\<tau>;\n        finite\n         \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                          (X \\<tau>)\\<rceil>\\<rceil>;\n        (\\<delta> X->size\\<^sub>S\\<^sub>e\\<^sub>t()) \\<tau> = true \\<tau>;\n        X->notEmpty\\<^sub>S\\<^sub>e\\<^sub>t() \\<tau> \\<noteq>\n        true \\<tau>\\<rbrakk>\n       \\<Longrightarrow> (X->notEmpty\\<^sub>S\\<^sub>e\\<^sub>t() \\<tau> =\n                          true \\<tau> \\<longrightarrow>\n                          ((\\<upsilon> (\\<lambda>_.\n     SOME y.\n        y \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                 (X \\<tau>)\\<rceil>\\<rceil>))\n                            \\<tau> =\n                           true \\<tau> \\<longrightarrow>\n                           \\<lfloor>\\<lfloor>(SOME y.\n           y \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                    (X \\<tau>)\\<rceil>\\<rceil>)\n       \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                              (X \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor> =\n                           not X->isEmpty\\<^sub>S\\<^sub>e\\<^sub>t()\n                            \\<tau>) \\<and>\n                          ((\\<upsilon> (\\<lambda>_.\n     SOME y.\n        y \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                 (X \\<tau>)\\<rceil>\\<rceil>))\n                            \\<tau> \\<noteq>\n                           true \\<tau> \\<longrightarrow>\n                           \\<bottom> =\n                           not X->isEmpty\\<^sub>S\\<^sub>e\\<^sub>t()\n                            \\<tau>)) \\<and>\n                         (X->notEmpty\\<^sub>S\\<^sub>e\\<^sub>t()\n                           \\<tau> \\<noteq>\n                          true \\<tau> \\<longrightarrow>\n                          ((\\<upsilon> (\\<lambda>_. null \\<tau>)) \\<tau> =\n                           true \\<tau> \\<longrightarrow>\n                           \\<lfloor>\\<lfloor>null \\<tau>\n       \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                              (X \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor> =\n                           not X->isEmpty\\<^sub>S\\<^sub>e\\<^sub>t()\n                            \\<tau>) \\<and>\n                          ((\\<upsilon> (\\<lambda>_. null \\<tau>))\n                            \\<tau> \\<noteq>\n                           true \\<tau> \\<longrightarrow>\n                           \\<bottom> =\n                           not X->isEmpty\\<^sub>S\\<^sub>e\\<^sub>t() \\<tau>))\n 3. \\<And>\\<tau>.\n       \\<lbrakk>(\\<delta> X) \\<tau> = true \\<tau>;\n        infinite\n         \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                          (X \\<tau>)\\<rceil>\\<rceil>\\<rbrakk>\n       \\<Longrightarrow> (X->notEmpty\\<^sub>S\\<^sub>e\\<^sub>t() \\<tau> =\n                          true \\<tau> \\<longrightarrow>\n                          ((\\<upsilon> (\\<lambda>_.\n     SOME y.\n        y \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                 (X \\<tau>)\\<rceil>\\<rceil>))\n                            \\<tau> =\n                           true \\<tau> \\<longrightarrow>\n                           \\<lfloor>\\<lfloor>(SOME y.\n           y \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                    (X \\<tau>)\\<rceil>\\<rceil>)\n       \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                              (X \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor> =\n                           (if \\<delta> X->size\\<^sub>S\\<^sub>e\\<^sub>t() then not\n    X->isEmpty\\<^sub>S\\<^sub>e\\<^sub>t() else (\\<lambda>\\<tau>.\n            if (\\<delta> X) \\<tau> = true \\<tau>\n            then \\<lfloor>\\<lfloor>null \\<tau>\n                                   \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                    (X \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>\n            else \\<bottom>) endif)\n                            \\<tau>) \\<and>\n                          ((\\<upsilon> (\\<lambda>_.\n     SOME y.\n        y \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                 (X \\<tau>)\\<rceil>\\<rceil>))\n                            \\<tau> \\<noteq>\n                           true \\<tau> \\<longrightarrow>\n                           \\<bottom> =\n                           (if \\<delta> X->size\\<^sub>S\\<^sub>e\\<^sub>t() then not\n    X->isEmpty\\<^sub>S\\<^sub>e\\<^sub>t() else (\\<lambda>\\<tau>.\n            if (\\<delta> X) \\<tau> = true \\<tau>\n            then \\<lfloor>\\<lfloor>null \\<tau>\n                                   \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                    (X \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>\n            else \\<bottom>) endif)\n                            \\<tau>)) \\<and>\n                         (X->notEmpty\\<^sub>S\\<^sub>e\\<^sub>t()\n                           \\<tau> \\<noteq>\n                          true \\<tau> \\<longrightarrow>\n                          ((\\<upsilon> (\\<lambda>_. null \\<tau>)) \\<tau> =\n                           true \\<tau> \\<longrightarrow>\n                           \\<lfloor>\\<lfloor>null \\<tau>\n       \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                              (X \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor> =\n                           (if \\<delta> X->size\\<^sub>S\\<^sub>e\\<^sub>t() then not\n    X->isEmpty\\<^sub>S\\<^sub>e\\<^sub>t() else (\\<lambda>\\<tau>.\n            if (\\<delta> X) \\<tau> = true \\<tau>\n            then \\<lfloor>\\<lfloor>null \\<tau>\n                                   \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                    (X \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>\n            else \\<bottom>) endif)\n                            \\<tau>) \\<and>\n                          ((\\<upsilon> (\\<lambda>_. null \\<tau>))\n                            \\<tau> \\<noteq>\n                           true \\<tau> \\<longrightarrow>\n                           \\<bottom> =\n                           (if \\<delta> X->size\\<^sub>S\\<^sub>e\\<^sub>t() then not\n    X->isEmpty\\<^sub>S\\<^sub>e\\<^sub>t() else (\\<lambda>\\<tau>.\n            if (\\<delta> X) \\<tau> = true \\<tau>\n            then \\<lfloor>\\<lfloor>null \\<tau>\n                                   \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                    (X \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>\n            else \\<bottom>) endif)\n                            \\<tau>))\n 4. \\<And>\\<tau>.\n       (\\<delta> X) \\<tau> \\<noteq> true \\<tau> \\<Longrightarrow>\n       (if (\\<delta> X) \\<tau> = true \\<tau> \\<and>\n           (\\<upsilon> (\\<lambda>_.\n                           if (\\<upsilon> X) \\<tau> = true \\<tau>\n                           then if (\\<delta> X and\n                                    X->notEmpty\\<^sub>S\\<^sub>e\\<^sub>t())\n                                    \\<tau> =\n                                   true \\<tau>\n                                then SOME y.\n  y \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                           (X \\<tau>)\\<rceil>\\<rceil>\n                                else null \\<tau>\n                           else \\<bottom>))\n            \\<tau> =\n           true \\<tau>\n        then \\<lfloor>\\<lfloor>(if (\\<upsilon> X) \\<tau> = true \\<tau>\n                                then if (\\<delta> X and\n   X->notEmpty\\<^sub>S\\<^sub>e\\<^sub>t())\n   \\<tau> =\n  true \\<tau>\n                                     then SOME y.\n       y \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                (X \\<tau>)\\<rceil>\\<rceil>\n                                     else null \\<tau>\n                                else \\<bottom>)\n                               \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                (X \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>\n        else \\<bottom>) =\n       (if (\\<lambda>_.\n               (\\<delta> X)\n                \\<tau>) then (\\<lambda>_.\n                                 (if \\<delta> X->size\\<^sub>S\\<^sub>e\\<^sub>t() then not\n          X->isEmpty\\<^sub>S\\<^sub>e\\<^sub>t() else (\\<lambda>\\<tau>.\n                  if (\\<delta> X) \\<tau> = true \\<tau> \\<and>\n                     (\\<upsilon> null) \\<tau> = true \\<tau>\n                  then \\<lfloor>\\<lfloor>null \\<tau>\n   \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                          (X \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>\n                  else \\<bottom>) endif)\n                                  \\<tau>) else (\\<lambda>_.\n             invalid \\<tau>) endif)\n        \\<tau>", "apply(rule someI_ex, simp)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>\\<tau>.\n       \\<lbrakk>(\\<delta> X) \\<tau> = true \\<tau>;\n        finite\n         \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                          (X \\<tau>)\\<rceil>\\<rceil>;\n        (\\<delta> X->size\\<^sub>S\\<^sub>e\\<^sub>t()) \\<tau> = true \\<tau>;\n        X->notEmpty\\<^sub>S\\<^sub>e\\<^sub>t() \\<tau> \\<noteq>\n        true \\<tau>\\<rbrakk>\n       \\<Longrightarrow> (X->notEmpty\\<^sub>S\\<^sub>e\\<^sub>t() \\<tau> =\n                          true \\<tau> \\<longrightarrow>\n                          ((\\<upsilon> (\\<lambda>_.\n     SOME y.\n        y \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                 (X \\<tau>)\\<rceil>\\<rceil>))\n                            \\<tau> =\n                           true \\<tau> \\<longrightarrow>\n                           \\<lfloor>\\<lfloor>(SOME y.\n           y \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                    (X \\<tau>)\\<rceil>\\<rceil>)\n       \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                              (X \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor> =\n                           not X->isEmpty\\<^sub>S\\<^sub>e\\<^sub>t()\n                            \\<tau>) \\<and>\n                          ((\\<upsilon> (\\<lambda>_.\n     SOME y.\n        y \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                 (X \\<tau>)\\<rceil>\\<rceil>))\n                            \\<tau> \\<noteq>\n                           true \\<tau> \\<longrightarrow>\n                           \\<bottom> =\n                           not X->isEmpty\\<^sub>S\\<^sub>e\\<^sub>t()\n                            \\<tau>)) \\<and>\n                         (X->notEmpty\\<^sub>S\\<^sub>e\\<^sub>t()\n                           \\<tau> \\<noteq>\n                          true \\<tau> \\<longrightarrow>\n                          ((\\<upsilon> (\\<lambda>_. null \\<tau>)) \\<tau> =\n                           true \\<tau> \\<longrightarrow>\n                           \\<lfloor>\\<lfloor>null \\<tau>\n       \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                              (X \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor> =\n                           not X->isEmpty\\<^sub>S\\<^sub>e\\<^sub>t()\n                            \\<tau>) \\<and>\n                          ((\\<upsilon> (\\<lambda>_. null \\<tau>))\n                            \\<tau> \\<noteq>\n                           true \\<tau> \\<longrightarrow>\n                           \\<bottom> =\n                           not X->isEmpty\\<^sub>S\\<^sub>e\\<^sub>t() \\<tau>))\n 2. \\<And>\\<tau>.\n       \\<lbrakk>(\\<delta> X) \\<tau> = true \\<tau>;\n        infinite\n         \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                          (X \\<tau>)\\<rceil>\\<rceil>\\<rbrakk>\n       \\<Longrightarrow> (X->notEmpty\\<^sub>S\\<^sub>e\\<^sub>t() \\<tau> =\n                          true \\<tau> \\<longrightarrow>\n                          ((\\<upsilon> (\\<lambda>_.\n     SOME y.\n        y \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                 (X \\<tau>)\\<rceil>\\<rceil>))\n                            \\<tau> =\n                           true \\<tau> \\<longrightarrow>\n                           \\<lfloor>\\<lfloor>(SOME y.\n           y \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                    (X \\<tau>)\\<rceil>\\<rceil>)\n       \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                              (X \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor> =\n                           (if \\<delta> X->size\\<^sub>S\\<^sub>e\\<^sub>t() then not\n    X->isEmpty\\<^sub>S\\<^sub>e\\<^sub>t() else (\\<lambda>\\<tau>.\n            if (\\<delta> X) \\<tau> = true \\<tau>\n            then \\<lfloor>\\<lfloor>null \\<tau>\n                                   \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                    (X \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>\n            else \\<bottom>) endif)\n                            \\<tau>) \\<and>\n                          ((\\<upsilon> (\\<lambda>_.\n     SOME y.\n        y \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                 (X \\<tau>)\\<rceil>\\<rceil>))\n                            \\<tau> \\<noteq>\n                           true \\<tau> \\<longrightarrow>\n                           \\<bottom> =\n                           (if \\<delta> X->size\\<^sub>S\\<^sub>e\\<^sub>t() then not\n    X->isEmpty\\<^sub>S\\<^sub>e\\<^sub>t() else (\\<lambda>\\<tau>.\n            if (\\<delta> X) \\<tau> = true \\<tau>\n            then \\<lfloor>\\<lfloor>null \\<tau>\n                                   \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                    (X \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>\n            else \\<bottom>) endif)\n                            \\<tau>)) \\<and>\n                         (X->notEmpty\\<^sub>S\\<^sub>e\\<^sub>t()\n                           \\<tau> \\<noteq>\n                          true \\<tau> \\<longrightarrow>\n                          ((\\<upsilon> (\\<lambda>_. null \\<tau>)) \\<tau> =\n                           true \\<tau> \\<longrightarrow>\n                           \\<lfloor>\\<lfloor>null \\<tau>\n       \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                              (X \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor> =\n                           (if \\<delta> X->size\\<^sub>S\\<^sub>e\\<^sub>t() then not\n    X->isEmpty\\<^sub>S\\<^sub>e\\<^sub>t() else (\\<lambda>\\<tau>.\n            if (\\<delta> X) \\<tau> = true \\<tau>\n            then \\<lfloor>\\<lfloor>null \\<tau>\n                                   \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                    (X \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>\n            else \\<bottom>) endif)\n                            \\<tau>) \\<and>\n                          ((\\<upsilon> (\\<lambda>_. null \\<tau>))\n                            \\<tau> \\<noteq>\n                           true \\<tau> \\<longrightarrow>\n                           \\<bottom> =\n                           (if \\<delta> X->size\\<^sub>S\\<^sub>e\\<^sub>t() then not\n    X->isEmpty\\<^sub>S\\<^sub>e\\<^sub>t() else (\\<lambda>\\<tau>.\n            if (\\<delta> X) \\<tau> = true \\<tau>\n            then \\<lfloor>\\<lfloor>null \\<tau>\n                                   \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                    (X \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>\n            else \\<bottom>) endif)\n                            \\<tau>))\n 3. \\<And>\\<tau>.\n       (\\<delta> X) \\<tau> \\<noteq> true \\<tau> \\<Longrightarrow>\n       (if (\\<delta> X) \\<tau> = true \\<tau> \\<and>\n           (\\<upsilon> (\\<lambda>_.\n                           if (\\<upsilon> X) \\<tau> = true \\<tau>\n                           then if (\\<delta> X and\n                                    X->notEmpty\\<^sub>S\\<^sub>e\\<^sub>t())\n                                    \\<tau> =\n                                   true \\<tau>\n                                then SOME y.\n  y \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                           (X \\<tau>)\\<rceil>\\<rceil>\n                                else null \\<tau>\n                           else \\<bottom>))\n            \\<tau> =\n           true \\<tau>\n        then \\<lfloor>\\<lfloor>(if (\\<upsilon> X) \\<tau> = true \\<tau>\n                                then if (\\<delta> X and\n   X->notEmpty\\<^sub>S\\<^sub>e\\<^sub>t())\n   \\<tau> =\n  true \\<tau>\n                                     then SOME y.\n       y \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                (X \\<tau>)\\<rceil>\\<rceil>\n                                     else null \\<tau>\n                                else \\<bottom>)\n                               \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                (X \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>\n        else \\<bottom>) =\n       (if (\\<lambda>_.\n               (\\<delta> X)\n                \\<tau>) then (\\<lambda>_.\n                                 (if \\<delta> X->size\\<^sub>S\\<^sub>e\\<^sub>t() then not\n          X->isEmpty\\<^sub>S\\<^sub>e\\<^sub>t() else (\\<lambda>\\<tau>.\n                  if (\\<delta> X) \\<tau> = true \\<tau> \\<and>\n                     (\\<upsilon> null) \\<tau> = true \\<tau>\n                  then \\<lfloor>\\<lfloor>null \\<tau>\n   \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                          (X \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>\n                  else \\<bottom>) endif)\n                                  \\<tau>) else (\\<lambda>_.\n             invalid \\<tau>) endif)\n        \\<tau>", "apply(simp add: OclNotEmpty_def cp_valid[symmetric])"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>\\<tau>.\n       \\<lbrakk>(\\<delta> X) \\<tau> = true \\<tau>;\n        finite\n         \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                          (X \\<tau>)\\<rceil>\\<rceil>;\n        (\\<delta> X->size\\<^sub>S\\<^sub>e\\<^sub>t()) \\<tau> = true \\<tau>;\n        not X->isEmpty\\<^sub>S\\<^sub>e\\<^sub>t() \\<tau> \\<noteq>\n        true \\<tau>\\<rbrakk>\n       \\<Longrightarrow> \\<lfloor>\\<lfloor>null \\<tau>\n     \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                            (X \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor> =\n                         not X->isEmpty\\<^sub>S\\<^sub>e\\<^sub>t() \\<tau>\n 2. \\<And>\\<tau>.\n       \\<lbrakk>(\\<delta> X) \\<tau> = true \\<tau>;\n        infinite\n         \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                          (X \\<tau>)\\<rceil>\\<rceil>\\<rbrakk>\n       \\<Longrightarrow> (X->notEmpty\\<^sub>S\\<^sub>e\\<^sub>t() \\<tau> =\n                          true \\<tau> \\<longrightarrow>\n                          ((\\<upsilon> (\\<lambda>_.\n     SOME y.\n        y \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                 (X \\<tau>)\\<rceil>\\<rceil>))\n                            \\<tau> =\n                           true \\<tau> \\<longrightarrow>\n                           \\<lfloor>\\<lfloor>(SOME y.\n           y \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                    (X \\<tau>)\\<rceil>\\<rceil>)\n       \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                              (X \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor> =\n                           (if \\<delta> X->size\\<^sub>S\\<^sub>e\\<^sub>t() then not\n    X->isEmpty\\<^sub>S\\<^sub>e\\<^sub>t() else (\\<lambda>\\<tau>.\n            if (\\<delta> X) \\<tau> = true \\<tau>\n            then \\<lfloor>\\<lfloor>null \\<tau>\n                                   \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                    (X \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>\n            else \\<bottom>) endif)\n                            \\<tau>) \\<and>\n                          ((\\<upsilon> (\\<lambda>_.\n     SOME y.\n        y \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                 (X \\<tau>)\\<rceil>\\<rceil>))\n                            \\<tau> \\<noteq>\n                           true \\<tau> \\<longrightarrow>\n                           \\<bottom> =\n                           (if \\<delta> X->size\\<^sub>S\\<^sub>e\\<^sub>t() then not\n    X->isEmpty\\<^sub>S\\<^sub>e\\<^sub>t() else (\\<lambda>\\<tau>.\n            if (\\<delta> X) \\<tau> = true \\<tau>\n            then \\<lfloor>\\<lfloor>null \\<tau>\n                                   \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                    (X \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>\n            else \\<bottom>) endif)\n                            \\<tau>)) \\<and>\n                         (X->notEmpty\\<^sub>S\\<^sub>e\\<^sub>t()\n                           \\<tau> \\<noteq>\n                          true \\<tau> \\<longrightarrow>\n                          ((\\<upsilon> (\\<lambda>_. null \\<tau>)) \\<tau> =\n                           true \\<tau> \\<longrightarrow>\n                           \\<lfloor>\\<lfloor>null \\<tau>\n       \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                              (X \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor> =\n                           (if \\<delta> X->size\\<^sub>S\\<^sub>e\\<^sub>t() then not\n    X->isEmpty\\<^sub>S\\<^sub>e\\<^sub>t() else (\\<lambda>\\<tau>.\n            if (\\<delta> X) \\<tau> = true \\<tau>\n            then \\<lfloor>\\<lfloor>null \\<tau>\n                                   \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                    (X \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>\n            else \\<bottom>) endif)\n                            \\<tau>) \\<and>\n                          ((\\<upsilon> (\\<lambda>_. null \\<tau>))\n                            \\<tau> \\<noteq>\n                           true \\<tau> \\<longrightarrow>\n                           \\<bottom> =\n                           (if \\<delta> X->size\\<^sub>S\\<^sub>e\\<^sub>t() then not\n    X->isEmpty\\<^sub>S\\<^sub>e\\<^sub>t() else (\\<lambda>\\<tau>.\n            if (\\<delta> X) \\<tau> = true \\<tau>\n            then \\<lfloor>\\<lfloor>null \\<tau>\n                                   \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                    (X \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>\n            else \\<bottom>) endif)\n                            \\<tau>))\n 3. \\<And>\\<tau>.\n       (\\<delta> X) \\<tau> \\<noteq> true \\<tau> \\<Longrightarrow>\n       (if (\\<delta> X) \\<tau> = true \\<tau> \\<and>\n           (\\<upsilon> (\\<lambda>_.\n                           if (\\<upsilon> X) \\<tau> = true \\<tau>\n                           then if (\\<delta> X and\n                                    X->notEmpty\\<^sub>S\\<^sub>e\\<^sub>t())\n                                    \\<tau> =\n                                   true \\<tau>\n                                then SOME y.\n  y \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                           (X \\<tau>)\\<rceil>\\<rceil>\n                                else null \\<tau>\n                           else \\<bottom>))\n            \\<tau> =\n           true \\<tau>\n        then \\<lfloor>\\<lfloor>(if (\\<upsilon> X) \\<tau> = true \\<tau>\n                                then if (\\<delta> X and\n   X->notEmpty\\<^sub>S\\<^sub>e\\<^sub>t())\n   \\<tau> =\n  true \\<tau>\n                                     then SOME y.\n       y \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                (X \\<tau>)\\<rceil>\\<rceil>\n                                     else null \\<tau>\n                                else \\<bottom>)\n                               \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                (X \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>\n        else \\<bottom>) =\n       (if (\\<lambda>_.\n               (\\<delta> X)\n                \\<tau>) then (\\<lambda>_.\n                                 (if \\<delta> X->size\\<^sub>S\\<^sub>e\\<^sub>t() then not\n          X->isEmpty\\<^sub>S\\<^sub>e\\<^sub>t() else (\\<lambda>\\<tau>.\n                  if (\\<delta> X) \\<tau> = true \\<tau> \\<and>\n                     (\\<upsilon> null) \\<tau> = true \\<tau>\n                  then \\<lfloor>\\<lfloor>null \\<tau>\n   \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                          (X \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>\n                  else \\<bottom>) endif)\n                                  \\<tau>) else (\\<lambda>_.\n             invalid \\<tau>) endif)\n        \\<tau>", "apply(subgoal_tac \"\\<not> (null \\<tau> \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e (X \\<tau>)\\<rceil>\\<rceil>)\", simp)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>\\<tau>.\n       \\<lbrakk>(\\<delta> X) \\<tau> = true \\<tau>;\n        finite\n         \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                          (X \\<tau>)\\<rceil>\\<rceil>;\n        (\\<delta> X->size\\<^sub>S\\<^sub>e\\<^sub>t()) \\<tau> = true \\<tau>;\n        not X->isEmpty\\<^sub>S\\<^sub>e\\<^sub>t() \\<tau> \\<noteq>\n        true \\<tau>;\n        null \\<tau>\n        \\<notin> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                  (X \\<tau>)\\<rceil>\\<rceil>\\<rbrakk>\n       \\<Longrightarrow> \\<lfloor>\\<lfloor>False\\<rfloor>\\<rfloor> =\n                         not X->isEmpty\\<^sub>S\\<^sub>e\\<^sub>t() \\<tau>\n 2. \\<And>\\<tau>.\n       \\<lbrakk>(\\<delta> X) \\<tau> = true \\<tau>;\n        finite\n         \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                          (X \\<tau>)\\<rceil>\\<rceil>;\n        (\\<delta> X->size\\<^sub>S\\<^sub>e\\<^sub>t()) \\<tau> = true \\<tau>;\n        not X->isEmpty\\<^sub>S\\<^sub>e\\<^sub>t() \\<tau> \\<noteq>\n        true \\<tau>\\<rbrakk>\n       \\<Longrightarrow> null \\<tau>\n                         \\<notin> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n             (X \\<tau>)\\<rceil>\\<rceil>\n 3. \\<And>\\<tau>.\n       \\<lbrakk>(\\<delta> X) \\<tau> = true \\<tau>;\n        infinite\n         \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                          (X \\<tau>)\\<rceil>\\<rceil>\\<rbrakk>\n       \\<Longrightarrow> (X->notEmpty\\<^sub>S\\<^sub>e\\<^sub>t() \\<tau> =\n                          true \\<tau> \\<longrightarrow>\n                          ((\\<upsilon> (\\<lambda>_.\n     SOME y.\n        y \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                 (X \\<tau>)\\<rceil>\\<rceil>))\n                            \\<tau> =\n                           true \\<tau> \\<longrightarrow>\n                           \\<lfloor>\\<lfloor>(SOME y.\n           y \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                    (X \\<tau>)\\<rceil>\\<rceil>)\n       \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                              (X \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor> =\n                           (if \\<delta> X->size\\<^sub>S\\<^sub>e\\<^sub>t() then not\n    X->isEmpty\\<^sub>S\\<^sub>e\\<^sub>t() else (\\<lambda>\\<tau>.\n            if (\\<delta> X) \\<tau> = true \\<tau>\n            then \\<lfloor>\\<lfloor>null \\<tau>\n                                   \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                    (X \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>\n            else \\<bottom>) endif)\n                            \\<tau>) \\<and>\n                          ((\\<upsilon> (\\<lambda>_.\n     SOME y.\n        y \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                 (X \\<tau>)\\<rceil>\\<rceil>))\n                            \\<tau> \\<noteq>\n                           true \\<tau> \\<longrightarrow>\n                           \\<bottom> =\n                           (if \\<delta> X->size\\<^sub>S\\<^sub>e\\<^sub>t() then not\n    X->isEmpty\\<^sub>S\\<^sub>e\\<^sub>t() else (\\<lambda>\\<tau>.\n            if (\\<delta> X) \\<tau> = true \\<tau>\n            then \\<lfloor>\\<lfloor>null \\<tau>\n                                   \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                    (X \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>\n            else \\<bottom>) endif)\n                            \\<tau>)) \\<and>\n                         (X->notEmpty\\<^sub>S\\<^sub>e\\<^sub>t()\n                           \\<tau> \\<noteq>\n                          true \\<tau> \\<longrightarrow>\n                          ((\\<upsilon> (\\<lambda>_. null \\<tau>)) \\<tau> =\n                           true \\<tau> \\<longrightarrow>\n                           \\<lfloor>\\<lfloor>null \\<tau>\n       \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                              (X \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor> =\n                           (if \\<delta> X->size\\<^sub>S\\<^sub>e\\<^sub>t() then not\n    X->isEmpty\\<^sub>S\\<^sub>e\\<^sub>t() else (\\<lambda>\\<tau>.\n            if (\\<delta> X) \\<tau> = true \\<tau>\n            then \\<lfloor>\\<lfloor>null \\<tau>\n                                   \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                    (X \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>\n            else \\<bottom>) endif)\n                            \\<tau>) \\<and>\n                          ((\\<upsilon> (\\<lambda>_. null \\<tau>))\n                            \\<tau> \\<noteq>\n                           true \\<tau> \\<longrightarrow>\n                           \\<bottom> =\n                           (if \\<delta> X->size\\<^sub>S\\<^sub>e\\<^sub>t() then not\n    X->isEmpty\\<^sub>S\\<^sub>e\\<^sub>t() else (\\<lambda>\\<tau>.\n            if (\\<delta> X) \\<tau> = true \\<tau>\n            then \\<lfloor>\\<lfloor>null \\<tau>\n                                   \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                    (X \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>\n            else \\<bottom>) endif)\n                            \\<tau>))\n 4. \\<And>\\<tau>.\n       (\\<delta> X) \\<tau> \\<noteq> true \\<tau> \\<Longrightarrow>\n       (if (\\<delta> X) \\<tau> = true \\<tau> \\<and>\n           (\\<upsilon> (\\<lambda>_.\n                           if (\\<upsilon> X) \\<tau> = true \\<tau>\n                           then if (\\<delta> X and\n                                    X->notEmpty\\<^sub>S\\<^sub>e\\<^sub>t())\n                                    \\<tau> =\n                                   true \\<tau>\n                                then SOME y.\n  y \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                           (X \\<tau>)\\<rceil>\\<rceil>\n                                else null \\<tau>\n                           else \\<bottom>))\n            \\<tau> =\n           true \\<tau>\n        then \\<lfloor>\\<lfloor>(if (\\<upsilon> X) \\<tau> = true \\<tau>\n                                then if (\\<delta> X and\n   X->notEmpty\\<^sub>S\\<^sub>e\\<^sub>t())\n   \\<tau> =\n  true \\<tau>\n                                     then SOME y.\n       y \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                (X \\<tau>)\\<rceil>\\<rceil>\n                                     else null \\<tau>\n                                else \\<bottom>)\n                               \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                (X \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>\n        else \\<bottom>) =\n       (if (\\<lambda>_.\n               (\\<delta> X)\n                \\<tau>) then (\\<lambda>_.\n                                 (if \\<delta> X->size\\<^sub>S\\<^sub>e\\<^sub>t() then not\n          X->isEmpty\\<^sub>S\\<^sub>e\\<^sub>t() else (\\<lambda>\\<tau>.\n                  if (\\<delta> X) \\<tau> = true \\<tau> \\<and>\n                     (\\<upsilon> null) \\<tau> = true \\<tau>\n                  then \\<lfloor>\\<lfloor>null \\<tau>\n   \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                          (X \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>\n                  else \\<bottom>) endif)\n                                  \\<tau>) else (\\<lambda>_.\n             invalid \\<tau>) endif)\n        \\<tau>", "apply(subst OclIsEmpty_def, simp add: OclSize_def)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>\\<tau>.\n       \\<lbrakk>(\\<delta> X) \\<tau> = true \\<tau>;\n        finite\n         \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                          (X \\<tau>)\\<rceil>\\<rceil>;\n        (\\<delta> (\\<lambda>\\<tau>.\n                      if (\\<delta> X) \\<tau> = true \\<tau> \\<and>\n                         finite\n                          \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n     (X \\<tau>)\\<rceil>\\<rceil>\n                      then \\<lfloor>\\<lfloor>int\n        (card\n          \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                           (X \\<tau>)\\<rceil>\\<rceil>)\\<rfloor>\\<rfloor>\n                      else \\<bottom>))\n         \\<tau> =\n        true \\<tau>;\n        not X->isEmpty\\<^sub>S\\<^sub>e\\<^sub>t() \\<tau> \\<noteq>\n        true \\<tau>;\n        null \\<tau>\n        \\<notin> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                  (X \\<tau>)\\<rceil>\\<rceil>\\<rbrakk>\n       \\<Longrightarrow> \\<lfloor>\\<lfloor>False\\<rfloor>\\<rfloor> =\n                         not (\\<upsilon> X and not (\\<delta> X) or\n                              (\\<lambda>\\<tau>.\n                                  if (\\<delta> X) \\<tau> =\n                                     true \\<tau> \\<and>\n                                     finite\n\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                 (X \\<tau>)\\<rceil>\\<rceil>\n                                  then \\<lfloor>\\<lfloor>int\n                    (card\n                      \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n (X \\<tau>)\\<rceil>\\<rceil>)\\<rfloor>\\<rfloor>\n                                  else \\<bottom>) \\<doteq>\n                              \\<zero>)\n                          \\<tau>\n 2. \\<And>\\<tau>.\n       \\<lbrakk>(\\<delta> X) \\<tau> = true \\<tau>;\n        finite\n         \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                          (X \\<tau>)\\<rceil>\\<rceil>;\n        (\\<delta> X->size\\<^sub>S\\<^sub>e\\<^sub>t()) \\<tau> = true \\<tau>;\n        not X->isEmpty\\<^sub>S\\<^sub>e\\<^sub>t() \\<tau> \\<noteq>\n        true \\<tau>\\<rbrakk>\n       \\<Longrightarrow> null \\<tau>\n                         \\<notin> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n             (X \\<tau>)\\<rceil>\\<rceil>\n 3. \\<And>\\<tau>.\n       \\<lbrakk>(\\<delta> X) \\<tau> = true \\<tau>;\n        infinite\n         \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                          (X \\<tau>)\\<rceil>\\<rceil>\\<rbrakk>\n       \\<Longrightarrow> (X->notEmpty\\<^sub>S\\<^sub>e\\<^sub>t() \\<tau> =\n                          true \\<tau> \\<longrightarrow>\n                          ((\\<upsilon> (\\<lambda>_.\n     SOME y.\n        y \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                 (X \\<tau>)\\<rceil>\\<rceil>))\n                            \\<tau> =\n                           true \\<tau> \\<longrightarrow>\n                           \\<lfloor>\\<lfloor>(SOME y.\n           y \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                    (X \\<tau>)\\<rceil>\\<rceil>)\n       \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                              (X \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor> =\n                           (if \\<delta> X->size\\<^sub>S\\<^sub>e\\<^sub>t() then not\n    X->isEmpty\\<^sub>S\\<^sub>e\\<^sub>t() else (\\<lambda>\\<tau>.\n            if (\\<delta> X) \\<tau> = true \\<tau>\n            then \\<lfloor>\\<lfloor>null \\<tau>\n                                   \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                    (X \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>\n            else \\<bottom>) endif)\n                            \\<tau>) \\<and>\n                          ((\\<upsilon> (\\<lambda>_.\n     SOME y.\n        y \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                 (X \\<tau>)\\<rceil>\\<rceil>))\n                            \\<tau> \\<noteq>\n                           true \\<tau> \\<longrightarrow>\n                           \\<bottom> =\n                           (if \\<delta> X->size\\<^sub>S\\<^sub>e\\<^sub>t() then not\n    X->isEmpty\\<^sub>S\\<^sub>e\\<^sub>t() else (\\<lambda>\\<tau>.\n            if (\\<delta> X) \\<tau> = true \\<tau>\n            then \\<lfloor>\\<lfloor>null \\<tau>\n                                   \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                    (X \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>\n            else \\<bottom>) endif)\n                            \\<tau>)) \\<and>\n                         (X->notEmpty\\<^sub>S\\<^sub>e\\<^sub>t()\n                           \\<tau> \\<noteq>\n                          true \\<tau> \\<longrightarrow>\n                          ((\\<upsilon> (\\<lambda>_. null \\<tau>)) \\<tau> =\n                           true \\<tau> \\<longrightarrow>\n                           \\<lfloor>\\<lfloor>null \\<tau>\n       \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                              (X \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor> =\n                           (if \\<delta> X->size\\<^sub>S\\<^sub>e\\<^sub>t() then not\n    X->isEmpty\\<^sub>S\\<^sub>e\\<^sub>t() else (\\<lambda>\\<tau>.\n            if (\\<delta> X) \\<tau> = true \\<tau>\n            then \\<lfloor>\\<lfloor>null \\<tau>\n                                   \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                    (X \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>\n            else \\<bottom>) endif)\n                            \\<tau>) \\<and>\n                          ((\\<upsilon> (\\<lambda>_. null \\<tau>))\n                            \\<tau> \\<noteq>\n                           true \\<tau> \\<longrightarrow>\n                           \\<bottom> =\n                           (if \\<delta> X->size\\<^sub>S\\<^sub>e\\<^sub>t() then not\n    X->isEmpty\\<^sub>S\\<^sub>e\\<^sub>t() else (\\<lambda>\\<tau>.\n            if (\\<delta> X) \\<tau> = true \\<tau>\n            then \\<lfloor>\\<lfloor>null \\<tau>\n                                   \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                    (X \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>\n            else \\<bottom>) endif)\n                            \\<tau>))\n 4. \\<And>\\<tau>.\n       (\\<delta> X) \\<tau> \\<noteq> true \\<tau> \\<Longrightarrow>\n       (if (\\<delta> X) \\<tau> = true \\<tau> \\<and>\n           (\\<upsilon> (\\<lambda>_.\n                           if (\\<upsilon> X) \\<tau> = true \\<tau>\n                           then if (\\<delta> X and\n                                    X->notEmpty\\<^sub>S\\<^sub>e\\<^sub>t())\n                                    \\<tau> =\n                                   true \\<tau>\n                                then SOME y.\n  y \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                           (X \\<tau>)\\<rceil>\\<rceil>\n                                else null \\<tau>\n                           else \\<bottom>))\n            \\<tau> =\n           true \\<tau>\n        then \\<lfloor>\\<lfloor>(if (\\<upsilon> X) \\<tau> = true \\<tau>\n                                then if (\\<delta> X and\n   X->notEmpty\\<^sub>S\\<^sub>e\\<^sub>t())\n   \\<tau> =\n  true \\<tau>\n                                     then SOME y.\n       y \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                (X \\<tau>)\\<rceil>\\<rceil>\n                                     else null \\<tau>\n                                else \\<bottom>)\n                               \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                (X \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>\n        else \\<bottom>) =\n       (if (\\<lambda>_.\n               (\\<delta> X)\n                \\<tau>) then (\\<lambda>_.\n                                 (if \\<delta> X->size\\<^sub>S\\<^sub>e\\<^sub>t() then not\n          X->isEmpty\\<^sub>S\\<^sub>e\\<^sub>t() else (\\<lambda>\\<tau>.\n                  if (\\<delta> X) \\<tau> = true \\<tau> \\<and>\n                     (\\<upsilon> null) \\<tau> = true \\<tau>\n                  then \\<lfloor>\\<lfloor>null \\<tau>\n   \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                          (X \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>\n                  else \\<bottom>) endif)\n                                  \\<tau>) else (\\<lambda>_.\n             invalid \\<tau>) endif)\n        \\<tau>", "apply(subst cp_OclNot, subst cp_OclOr, subst StrictRefEq\\<^sub>I\\<^sub>n\\<^sub>t\\<^sub>e\\<^sub>g\\<^sub>e\\<^sub>r.cp0, subst cp_OclAnd,\n           subst cp_OclNot, simp add: OclValid_def foundation20[simplified OclValid_def]\n                                      cp_OclNot[symmetric] cp_OclAnd[symmetric] cp_OclOr[symmetric])"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>\\<tau>.\n       \\<lbrakk>(\\<delta> X) \\<tau> = true \\<tau>;\n        finite\n         \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                          (X \\<tau>)\\<rceil>\\<rceil>;\n        (\\<delta> (\\<lambda>\\<tau>.\n                      if (\\<delta> X) \\<tau> = true \\<tau> \\<and>\n                         finite\n                          \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n     (X \\<tau>)\\<rceil>\\<rceil>\n                      then \\<lfloor>\\<lfloor>int\n        (card\n          \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                           (X \\<tau>)\\<rceil>\\<rceil>)\\<rfloor>\\<rfloor>\n                      else \\<bottom>))\n         \\<tau> =\n        true \\<tau>;\n        not X->isEmpty\\<^sub>S\\<^sub>e\\<^sub>t() \\<tau> \\<noteq>\n        true \\<tau>;\n        null \\<tau>\n        \\<notin> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                  (X \\<tau>)\\<rceil>\\<rceil>\\<rbrakk>\n       \\<Longrightarrow> \\<lfloor>\\<lfloor>False\\<rfloor>\\<rfloor> =\n                         ((\\<lambda>_.\n                              \\<lfloor>\\<lfloor>int\n           (card\n             \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                              (X \\<tau>)\\<rceil>\\<rceil>)\\<rfloor>\\<rfloor>) <>\n                          (\\<lambda>_. \\<zero> \\<tau>))\n                          \\<tau>\n 2. \\<And>\\<tau>.\n       \\<lbrakk>(\\<delta> X) \\<tau> = true \\<tau>;\n        finite\n         \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                          (X \\<tau>)\\<rceil>\\<rceil>;\n        (\\<delta> X->size\\<^sub>S\\<^sub>e\\<^sub>t()) \\<tau> = true \\<tau>;\n        not X->isEmpty\\<^sub>S\\<^sub>e\\<^sub>t() \\<tau> \\<noteq>\n        true \\<tau>\\<rbrakk>\n       \\<Longrightarrow> null \\<tau>\n                         \\<notin> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n             (X \\<tau>)\\<rceil>\\<rceil>\n 3. \\<And>\\<tau>.\n       \\<lbrakk>(\\<delta> X) \\<tau> = true \\<tau>;\n        infinite\n         \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                          (X \\<tau>)\\<rceil>\\<rceil>\\<rbrakk>\n       \\<Longrightarrow> (X->notEmpty\\<^sub>S\\<^sub>e\\<^sub>t() \\<tau> =\n                          true \\<tau> \\<longrightarrow>\n                          ((\\<upsilon> (\\<lambda>_.\n     SOME y.\n        y \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                 (X \\<tau>)\\<rceil>\\<rceil>))\n                            \\<tau> =\n                           true \\<tau> \\<longrightarrow>\n                           \\<lfloor>\\<lfloor>(SOME y.\n           y \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                    (X \\<tau>)\\<rceil>\\<rceil>)\n       \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                              (X \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor> =\n                           (if \\<delta> X->size\\<^sub>S\\<^sub>e\\<^sub>t() then not\n    X->isEmpty\\<^sub>S\\<^sub>e\\<^sub>t() else (\\<lambda>\\<tau>.\n            if (\\<delta> X) \\<tau> = true \\<tau>\n            then \\<lfloor>\\<lfloor>null \\<tau>\n                                   \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                    (X \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>\n            else \\<bottom>) endif)\n                            \\<tau>) \\<and>\n                          ((\\<upsilon> (\\<lambda>_.\n     SOME y.\n        y \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                 (X \\<tau>)\\<rceil>\\<rceil>))\n                            \\<tau> \\<noteq>\n                           true \\<tau> \\<longrightarrow>\n                           \\<bottom> =\n                           (if \\<delta> X->size\\<^sub>S\\<^sub>e\\<^sub>t() then not\n    X->isEmpty\\<^sub>S\\<^sub>e\\<^sub>t() else (\\<lambda>\\<tau>.\n            if (\\<delta> X) \\<tau> = true \\<tau>\n            then \\<lfloor>\\<lfloor>null \\<tau>\n                                   \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                    (X \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>\n            else \\<bottom>) endif)\n                            \\<tau>)) \\<and>\n                         (X->notEmpty\\<^sub>S\\<^sub>e\\<^sub>t()\n                           \\<tau> \\<noteq>\n                          true \\<tau> \\<longrightarrow>\n                          ((\\<upsilon> (\\<lambda>_. null \\<tau>)) \\<tau> =\n                           true \\<tau> \\<longrightarrow>\n                           \\<lfloor>\\<lfloor>null \\<tau>\n       \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                              (X \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor> =\n                           (if \\<delta> X->size\\<^sub>S\\<^sub>e\\<^sub>t() then not\n    X->isEmpty\\<^sub>S\\<^sub>e\\<^sub>t() else (\\<lambda>\\<tau>.\n            if (\\<delta> X) \\<tau> = true \\<tau>\n            then \\<lfloor>\\<lfloor>null \\<tau>\n                                   \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                    (X \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>\n            else \\<bottom>) endif)\n                            \\<tau>) \\<and>\n                          ((\\<upsilon> (\\<lambda>_. null \\<tau>))\n                            \\<tau> \\<noteq>\n                           true \\<tau> \\<longrightarrow>\n                           \\<bottom> =\n                           (if \\<delta> X->size\\<^sub>S\\<^sub>e\\<^sub>t() then not\n    X->isEmpty\\<^sub>S\\<^sub>e\\<^sub>t() else (\\<lambda>\\<tau>.\n            if (\\<delta> X) \\<tau> = true \\<tau>\n            then \\<lfloor>\\<lfloor>null \\<tau>\n                                   \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                    (X \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>\n            else \\<bottom>) endif)\n                            \\<tau>))\n 4. \\<And>\\<tau>.\n       (\\<delta> X) \\<tau> \\<noteq> true \\<tau> \\<Longrightarrow>\n       (if (\\<delta> X) \\<tau> = true \\<tau> \\<and>\n           (\\<upsilon> (\\<lambda>_.\n                           if (\\<upsilon> X) \\<tau> = true \\<tau>\n                           then if (\\<delta> X and\n                                    X->notEmpty\\<^sub>S\\<^sub>e\\<^sub>t())\n                                    \\<tau> =\n                                   true \\<tau>\n                                then SOME y.\n  y \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                           (X \\<tau>)\\<rceil>\\<rceil>\n                                else null \\<tau>\n                           else \\<bottom>))\n            \\<tau> =\n           true \\<tau>\n        then \\<lfloor>\\<lfloor>(if (\\<upsilon> X) \\<tau> = true \\<tau>\n                                then if (\\<delta> X and\n   X->notEmpty\\<^sub>S\\<^sub>e\\<^sub>t())\n   \\<tau> =\n  true \\<tau>\n                                     then SOME y.\n       y \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                (X \\<tau>)\\<rceil>\\<rceil>\n                                     else null \\<tau>\n                                else \\<bottom>)\n                               \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                (X \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>\n        else \\<bottom>) =\n       (if (\\<lambda>_.\n               (\\<delta> X)\n                \\<tau>) then (\\<lambda>_.\n                                 (if \\<delta> X->size\\<^sub>S\\<^sub>e\\<^sub>t() then not\n          X->isEmpty\\<^sub>S\\<^sub>e\\<^sub>t() else (\\<lambda>\\<tau>.\n                  if (\\<delta> X) \\<tau> = true \\<tau> \\<and>\n                     (\\<upsilon> null) \\<tau> = true \\<tau>\n                  then \\<lfloor>\\<lfloor>null \\<tau>\n   \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                          (X \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>\n                  else \\<bottom>) endif)\n                                  \\<tau>) else (\\<lambda>_.\n             invalid \\<tau>) endif)\n        \\<tau>", "apply(frule notempty'[simplified OclValid_def],\n           (simp add: mtSet_def Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e_inverse OclInt0_def false_def)+)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>\\<tau>.\n       \\<lbrakk>(\\<delta> X) \\<tau> = true \\<tau>;\n        finite\n         \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                          (X \\<tau>)\\<rceil>\\<rceil>;\n        (\\<delta> X->size\\<^sub>S\\<^sub>e\\<^sub>t()) \\<tau> = true \\<tau>;\n        not X->isEmpty\\<^sub>S\\<^sub>e\\<^sub>t() \\<tau> \\<noteq>\n        true \\<tau>\\<rbrakk>\n       \\<Longrightarrow> null \\<tau>\n                         \\<notin> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n             (X \\<tau>)\\<rceil>\\<rceil>\n 2. \\<And>\\<tau>.\n       \\<lbrakk>(\\<delta> X) \\<tau> = true \\<tau>;\n        infinite\n         \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                          (X \\<tau>)\\<rceil>\\<rceil>\\<rbrakk>\n       \\<Longrightarrow> (X->notEmpty\\<^sub>S\\<^sub>e\\<^sub>t() \\<tau> =\n                          true \\<tau> \\<longrightarrow>\n                          ((\\<upsilon> (\\<lambda>_.\n     SOME y.\n        y \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                 (X \\<tau>)\\<rceil>\\<rceil>))\n                            \\<tau> =\n                           true \\<tau> \\<longrightarrow>\n                           \\<lfloor>\\<lfloor>(SOME y.\n           y \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                    (X \\<tau>)\\<rceil>\\<rceil>)\n       \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                              (X \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor> =\n                           (if \\<delta> X->size\\<^sub>S\\<^sub>e\\<^sub>t() then not\n    X->isEmpty\\<^sub>S\\<^sub>e\\<^sub>t() else (\\<lambda>\\<tau>.\n            if (\\<delta> X) \\<tau> = true \\<tau>\n            then \\<lfloor>\\<lfloor>null \\<tau>\n                                   \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                    (X \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>\n            else \\<bottom>) endif)\n                            \\<tau>) \\<and>\n                          ((\\<upsilon> (\\<lambda>_.\n     SOME y.\n        y \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                 (X \\<tau>)\\<rceil>\\<rceil>))\n                            \\<tau> \\<noteq>\n                           true \\<tau> \\<longrightarrow>\n                           \\<bottom> =\n                           (if \\<delta> X->size\\<^sub>S\\<^sub>e\\<^sub>t() then not\n    X->isEmpty\\<^sub>S\\<^sub>e\\<^sub>t() else (\\<lambda>\\<tau>.\n            if (\\<delta> X) \\<tau> = true \\<tau>\n            then \\<lfloor>\\<lfloor>null \\<tau>\n                                   \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                    (X \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>\n            else \\<bottom>) endif)\n                            \\<tau>)) \\<and>\n                         (X->notEmpty\\<^sub>S\\<^sub>e\\<^sub>t()\n                           \\<tau> \\<noteq>\n                          true \\<tau> \\<longrightarrow>\n                          ((\\<upsilon> (\\<lambda>_. null \\<tau>)) \\<tau> =\n                           true \\<tau> \\<longrightarrow>\n                           \\<lfloor>\\<lfloor>null \\<tau>\n       \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                              (X \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor> =\n                           (if \\<delta> X->size\\<^sub>S\\<^sub>e\\<^sub>t() then not\n    X->isEmpty\\<^sub>S\\<^sub>e\\<^sub>t() else (\\<lambda>\\<tau>.\n            if (\\<delta> X) \\<tau> = true \\<tau>\n            then \\<lfloor>\\<lfloor>null \\<tau>\n                                   \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                    (X \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>\n            else \\<bottom>) endif)\n                            \\<tau>) \\<and>\n                          ((\\<upsilon> (\\<lambda>_. null \\<tau>))\n                            \\<tau> \\<noteq>\n                           true \\<tau> \\<longrightarrow>\n                           \\<bottom> =\n                           (if \\<delta> X->size\\<^sub>S\\<^sub>e\\<^sub>t() then not\n    X->isEmpty\\<^sub>S\\<^sub>e\\<^sub>t() else (\\<lambda>\\<tau>.\n            if (\\<delta> X) \\<tau> = true \\<tau>\n            then \\<lfloor>\\<lfloor>null \\<tau>\n                                   \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                    (X \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>\n            else \\<bottom>) endif)\n                            \\<tau>))\n 3. \\<And>\\<tau>.\n       (\\<delta> X) \\<tau> \\<noteq> true \\<tau> \\<Longrightarrow>\n       (if (\\<delta> X) \\<tau> = true \\<tau> \\<and>\n           (\\<upsilon> (\\<lambda>_.\n                           if (\\<upsilon> X) \\<tau> = true \\<tau>\n                           then if (\\<delta> X and\n                                    X->notEmpty\\<^sub>S\\<^sub>e\\<^sub>t())\n                                    \\<tau> =\n                                   true \\<tau>\n                                then SOME y.\n  y \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                           (X \\<tau>)\\<rceil>\\<rceil>\n                                else null \\<tau>\n                           else \\<bottom>))\n            \\<tau> =\n           true \\<tau>\n        then \\<lfloor>\\<lfloor>(if (\\<upsilon> X) \\<tau> = true \\<tau>\n                                then if (\\<delta> X and\n   X->notEmpty\\<^sub>S\\<^sub>e\\<^sub>t())\n   \\<tau> =\n  true \\<tau>\n                                     then SOME y.\n       y \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                (X \\<tau>)\\<rceil>\\<rceil>\n                                     else null \\<tau>\n                                else \\<bottom>)\n                               \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                (X \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>\n        else \\<bottom>) =\n       (if (\\<lambda>_.\n               (\\<delta> X)\n                \\<tau>) then (\\<lambda>_.\n                                 (if \\<delta> X->size\\<^sub>S\\<^sub>e\\<^sub>t() then not\n          X->isEmpty\\<^sub>S\\<^sub>e\\<^sub>t() else (\\<lambda>\\<tau>.\n                  if (\\<delta> X) \\<tau> = true \\<tau> \\<and>\n                     (\\<upsilon> null) \\<tau> = true \\<tau>\n                  then \\<lfloor>\\<lfloor>null \\<tau>\n   \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                          (X \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>\n                  else \\<bottom>) endif)\n                                  \\<tau>) else (\\<lambda>_.\n             invalid \\<tau>) endif)\n        \\<tau>", "apply(drule notempty'[simplified OclValid_def], simp, simp)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>\\<tau>.\n       \\<lbrakk>finite\n                 \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                  (X \\<tau>)\\<rceil>\\<rceil>;\n        (\\<delta> X->size\\<^sub>S\\<^sub>e\\<^sub>t()) \\<tau> = true \\<tau>;\n        not X->isEmpty\\<^sub>S\\<^sub>e\\<^sub>t() \\<tau> \\<noteq>\n        true \\<tau>;\n        X \\<tau> = Set{} \\<tau>\\<rbrakk>\n       \\<Longrightarrow> null \\<tau>\n                         \\<notin> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n             (X \\<tau>)\\<rceil>\\<rceil>\n 2. \\<And>\\<tau>.\n       \\<lbrakk>(\\<delta> X) \\<tau> = true \\<tau>;\n        infinite\n         \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                          (X \\<tau>)\\<rceil>\\<rceil>\\<rbrakk>\n       \\<Longrightarrow> (X->notEmpty\\<^sub>S\\<^sub>e\\<^sub>t() \\<tau> =\n                          true \\<tau> \\<longrightarrow>\n                          ((\\<upsilon> (\\<lambda>_.\n     SOME y.\n        y \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                 (X \\<tau>)\\<rceil>\\<rceil>))\n                            \\<tau> =\n                           true \\<tau> \\<longrightarrow>\n                           \\<lfloor>\\<lfloor>(SOME y.\n           y \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                    (X \\<tau>)\\<rceil>\\<rceil>)\n       \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                              (X \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor> =\n                           (if \\<delta> X->size\\<^sub>S\\<^sub>e\\<^sub>t() then not\n    X->isEmpty\\<^sub>S\\<^sub>e\\<^sub>t() else (\\<lambda>\\<tau>.\n            if (\\<delta> X) \\<tau> = true \\<tau>\n            then \\<lfloor>\\<lfloor>null \\<tau>\n                                   \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                    (X \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>\n            else \\<bottom>) endif)\n                            \\<tau>) \\<and>\n                          ((\\<upsilon> (\\<lambda>_.\n     SOME y.\n        y \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                 (X \\<tau>)\\<rceil>\\<rceil>))\n                            \\<tau> \\<noteq>\n                           true \\<tau> \\<longrightarrow>\n                           \\<bottom> =\n                           (if \\<delta> X->size\\<^sub>S\\<^sub>e\\<^sub>t() then not\n    X->isEmpty\\<^sub>S\\<^sub>e\\<^sub>t() else (\\<lambda>\\<tau>.\n            if (\\<delta> X) \\<tau> = true \\<tau>\n            then \\<lfloor>\\<lfloor>null \\<tau>\n                                   \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                    (X \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>\n            else \\<bottom>) endif)\n                            \\<tau>)) \\<and>\n                         (X->notEmpty\\<^sub>S\\<^sub>e\\<^sub>t()\n                           \\<tau> \\<noteq>\n                          true \\<tau> \\<longrightarrow>\n                          ((\\<upsilon> (\\<lambda>_. null \\<tau>)) \\<tau> =\n                           true \\<tau> \\<longrightarrow>\n                           \\<lfloor>\\<lfloor>null \\<tau>\n       \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                              (X \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor> =\n                           (if \\<delta> X->size\\<^sub>S\\<^sub>e\\<^sub>t() then not\n    X->isEmpty\\<^sub>S\\<^sub>e\\<^sub>t() else (\\<lambda>\\<tau>.\n            if (\\<delta> X) \\<tau> = true \\<tau>\n            then \\<lfloor>\\<lfloor>null \\<tau>\n                                   \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                    (X \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>\n            else \\<bottom>) endif)\n                            \\<tau>) \\<and>\n                          ((\\<upsilon> (\\<lambda>_. null \\<tau>))\n                            \\<tau> \\<noteq>\n                           true \\<tau> \\<longrightarrow>\n                           \\<bottom> =\n                           (if \\<delta> X->size\\<^sub>S\\<^sub>e\\<^sub>t() then not\n    X->isEmpty\\<^sub>S\\<^sub>e\\<^sub>t() else (\\<lambda>\\<tau>.\n            if (\\<delta> X) \\<tau> = true \\<tau>\n            then \\<lfloor>\\<lfloor>null \\<tau>\n                                   \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                    (X \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>\n            else \\<bottom>) endif)\n                            \\<tau>))\n 3. \\<And>\\<tau>.\n       (\\<delta> X) \\<tau> \\<noteq> true \\<tau> \\<Longrightarrow>\n       (if (\\<delta> X) \\<tau> = true \\<tau> \\<and>\n           (\\<upsilon> (\\<lambda>_.\n                           if (\\<upsilon> X) \\<tau> = true \\<tau>\n                           then if (\\<delta> X and\n                                    X->notEmpty\\<^sub>S\\<^sub>e\\<^sub>t())\n                                    \\<tau> =\n                                   true \\<tau>\n                                then SOME y.\n  y \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                           (X \\<tau>)\\<rceil>\\<rceil>\n                                else null \\<tau>\n                           else \\<bottom>))\n            \\<tau> =\n           true \\<tau>\n        then \\<lfloor>\\<lfloor>(if (\\<upsilon> X) \\<tau> = true \\<tau>\n                                then if (\\<delta> X and\n   X->notEmpty\\<^sub>S\\<^sub>e\\<^sub>t())\n   \\<tau> =\n  true \\<tau>\n                                     then SOME y.\n       y \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                (X \\<tau>)\\<rceil>\\<rceil>\n                                     else null \\<tau>\n                                else \\<bottom>)\n                               \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                (X \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>\n        else \\<bottom>) =\n       (if (\\<lambda>_.\n               (\\<delta> X)\n                \\<tau>) then (\\<lambda>_.\n                                 (if \\<delta> X->size\\<^sub>S\\<^sub>e\\<^sub>t() then not\n          X->isEmpty\\<^sub>S\\<^sub>e\\<^sub>t() else (\\<lambda>\\<tau>.\n                  if (\\<delta> X) \\<tau> = true \\<tau> \\<and>\n                     (\\<upsilon> null) \\<tau> = true \\<tau>\n                  then \\<lfloor>\\<lfloor>null \\<tau>\n   \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                          (X \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>\n                  else \\<bottom>) endif)\n                                  \\<tau>) else (\\<lambda>_.\n             invalid \\<tau>) endif)\n        \\<tau>", "apply (metis (hide_lams, no_types) empty_iff mtSet_rep_set)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>\\<tau>.\n       \\<lbrakk>(\\<delta> X) \\<tau> = true \\<tau>;\n        infinite\n         \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                          (X \\<tau>)\\<rceil>\\<rceil>\\<rbrakk>\n       \\<Longrightarrow> (X->notEmpty\\<^sub>S\\<^sub>e\\<^sub>t() \\<tau> =\n                          true \\<tau> \\<longrightarrow>\n                          ((\\<upsilon> (\\<lambda>_.\n     SOME y.\n        y \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                 (X \\<tau>)\\<rceil>\\<rceil>))\n                            \\<tau> =\n                           true \\<tau> \\<longrightarrow>\n                           \\<lfloor>\\<lfloor>(SOME y.\n           y \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                    (X \\<tau>)\\<rceil>\\<rceil>)\n       \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                              (X \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor> =\n                           (if \\<delta> X->size\\<^sub>S\\<^sub>e\\<^sub>t() then not\n    X->isEmpty\\<^sub>S\\<^sub>e\\<^sub>t() else (\\<lambda>\\<tau>.\n            if (\\<delta> X) \\<tau> = true \\<tau>\n            then \\<lfloor>\\<lfloor>null \\<tau>\n                                   \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                    (X \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>\n            else \\<bottom>) endif)\n                            \\<tau>) \\<and>\n                          ((\\<upsilon> (\\<lambda>_.\n     SOME y.\n        y \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                 (X \\<tau>)\\<rceil>\\<rceil>))\n                            \\<tau> \\<noteq>\n                           true \\<tau> \\<longrightarrow>\n                           \\<bottom> =\n                           (if \\<delta> X->size\\<^sub>S\\<^sub>e\\<^sub>t() then not\n    X->isEmpty\\<^sub>S\\<^sub>e\\<^sub>t() else (\\<lambda>\\<tau>.\n            if (\\<delta> X) \\<tau> = true \\<tau>\n            then \\<lfloor>\\<lfloor>null \\<tau>\n                                   \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                    (X \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>\n            else \\<bottom>) endif)\n                            \\<tau>)) \\<and>\n                         (X->notEmpty\\<^sub>S\\<^sub>e\\<^sub>t()\n                           \\<tau> \\<noteq>\n                          true \\<tau> \\<longrightarrow>\n                          ((\\<upsilon> (\\<lambda>_. null \\<tau>)) \\<tau> =\n                           true \\<tau> \\<longrightarrow>\n                           \\<lfloor>\\<lfloor>null \\<tau>\n       \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                              (X \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor> =\n                           (if \\<delta> X->size\\<^sub>S\\<^sub>e\\<^sub>t() then not\n    X->isEmpty\\<^sub>S\\<^sub>e\\<^sub>t() else (\\<lambda>\\<tau>.\n            if (\\<delta> X) \\<tau> = true \\<tau>\n            then \\<lfloor>\\<lfloor>null \\<tau>\n                                   \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                    (X \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>\n            else \\<bottom>) endif)\n                            \\<tau>) \\<and>\n                          ((\\<upsilon> (\\<lambda>_. null \\<tau>))\n                            \\<tau> \\<noteq>\n                           true \\<tau> \\<longrightarrow>\n                           \\<bottom> =\n                           (if \\<delta> X->size\\<^sub>S\\<^sub>e\\<^sub>t() then not\n    X->isEmpty\\<^sub>S\\<^sub>e\\<^sub>t() else (\\<lambda>\\<tau>.\n            if (\\<delta> X) \\<tau> = true \\<tau>\n            then \\<lfloor>\\<lfloor>null \\<tau>\n                                   \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                    (X \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>\n            else \\<bottom>) endif)\n                            \\<tau>))\n 2. \\<And>\\<tau>.\n       (\\<delta> X) \\<tau> \\<noteq> true \\<tau> \\<Longrightarrow>\n       (if (\\<delta> X) \\<tau> = true \\<tau> \\<and>\n           (\\<upsilon> (\\<lambda>_.\n                           if (\\<upsilon> X) \\<tau> = true \\<tau>\n                           then if (\\<delta> X and\n                                    X->notEmpty\\<^sub>S\\<^sub>e\\<^sub>t())\n                                    \\<tau> =\n                                   true \\<tau>\n                                then SOME y.\n  y \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                           (X \\<tau>)\\<rceil>\\<rceil>\n                                else null \\<tau>\n                           else \\<bottom>))\n            \\<tau> =\n           true \\<tau>\n        then \\<lfloor>\\<lfloor>(if (\\<upsilon> X) \\<tau> = true \\<tau>\n                                then if (\\<delta> X and\n   X->notEmpty\\<^sub>S\\<^sub>e\\<^sub>t())\n   \\<tau> =\n  true \\<tau>\n                                     then SOME y.\n       y \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                (X \\<tau>)\\<rceil>\\<rceil>\n                                     else null \\<tau>\n                                else \\<bottom>)\n                               \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                (X \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>\n        else \\<bottom>) =\n       (if (\\<lambda>_.\n               (\\<delta> X)\n                \\<tau>) then (\\<lambda>_.\n                                 (if \\<delta> X->size\\<^sub>S\\<^sub>e\\<^sub>t() then not\n          X->isEmpty\\<^sub>S\\<^sub>e\\<^sub>t() else (\\<lambda>\\<tau>.\n                  if (\\<delta> X) \\<tau> = true \\<tau> \\<and>\n                     (\\<upsilon> null) \\<tau> = true \\<tau>\n                  then \\<lfloor>\\<lfloor>null \\<tau>\n   \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                          (X \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>\n                  else \\<bottom>) endif)\n                                  \\<tau>) else (\\<lambda>_.\n             invalid \\<tau>) endif)\n        \\<tau>", "(* *)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>\\<tau>.\n       \\<lbrakk>(\\<delta> X) \\<tau> = true \\<tau>;\n        infinite\n         \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                          (X \\<tau>)\\<rceil>\\<rceil>\\<rbrakk>\n       \\<Longrightarrow> (X->notEmpty\\<^sub>S\\<^sub>e\\<^sub>t() \\<tau> =\n                          true \\<tau> \\<longrightarrow>\n                          ((\\<upsilon> (\\<lambda>_.\n     SOME y.\n        y \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                 (X \\<tau>)\\<rceil>\\<rceil>))\n                            \\<tau> =\n                           true \\<tau> \\<longrightarrow>\n                           \\<lfloor>\\<lfloor>(SOME y.\n           y \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                    (X \\<tau>)\\<rceil>\\<rceil>)\n       \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                              (X \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor> =\n                           (if \\<delta> X->size\\<^sub>S\\<^sub>e\\<^sub>t() then not\n    X->isEmpty\\<^sub>S\\<^sub>e\\<^sub>t() else (\\<lambda>\\<tau>.\n            if (\\<delta> X) \\<tau> = true \\<tau>\n            then \\<lfloor>\\<lfloor>null \\<tau>\n                                   \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                    (X \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>\n            else \\<bottom>) endif)\n                            \\<tau>) \\<and>\n                          ((\\<upsilon> (\\<lambda>_.\n     SOME y.\n        y \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                 (X \\<tau>)\\<rceil>\\<rceil>))\n                            \\<tau> \\<noteq>\n                           true \\<tau> \\<longrightarrow>\n                           \\<bottom> =\n                           (if \\<delta> X->size\\<^sub>S\\<^sub>e\\<^sub>t() then not\n    X->isEmpty\\<^sub>S\\<^sub>e\\<^sub>t() else (\\<lambda>\\<tau>.\n            if (\\<delta> X) \\<tau> = true \\<tau>\n            then \\<lfloor>\\<lfloor>null \\<tau>\n                                   \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                    (X \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>\n            else \\<bottom>) endif)\n                            \\<tau>)) \\<and>\n                         (X->notEmpty\\<^sub>S\\<^sub>e\\<^sub>t()\n                           \\<tau> \\<noteq>\n                          true \\<tau> \\<longrightarrow>\n                          ((\\<upsilon> (\\<lambda>_. null \\<tau>)) \\<tau> =\n                           true \\<tau> \\<longrightarrow>\n                           \\<lfloor>\\<lfloor>null \\<tau>\n       \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                              (X \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor> =\n                           (if \\<delta> X->size\\<^sub>S\\<^sub>e\\<^sub>t() then not\n    X->isEmpty\\<^sub>S\\<^sub>e\\<^sub>t() else (\\<lambda>\\<tau>.\n            if (\\<delta> X) \\<tau> = true \\<tau>\n            then \\<lfloor>\\<lfloor>null \\<tau>\n                                   \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                    (X \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>\n            else \\<bottom>) endif)\n                            \\<tau>) \\<and>\n                          ((\\<upsilon> (\\<lambda>_. null \\<tau>))\n                            \\<tau> \\<noteq>\n                           true \\<tau> \\<longrightarrow>\n                           \\<bottom> =\n                           (if \\<delta> X->size\\<^sub>S\\<^sub>e\\<^sub>t() then not\n    X->isEmpty\\<^sub>S\\<^sub>e\\<^sub>t() else (\\<lambda>\\<tau>.\n            if (\\<delta> X) \\<tau> = true \\<tau>\n            then \\<lfloor>\\<lfloor>null \\<tau>\n                                   \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                    (X \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>\n            else \\<bottom>) endif)\n                            \\<tau>))\n 2. \\<And>\\<tau>.\n       (\\<delta> X) \\<tau> \\<noteq> true \\<tau> \\<Longrightarrow>\n       (if (\\<delta> X) \\<tau> = true \\<tau> \\<and>\n           (\\<upsilon> (\\<lambda>_.\n                           if (\\<upsilon> X) \\<tau> = true \\<tau>\n                           then if (\\<delta> X and\n                                    X->notEmpty\\<^sub>S\\<^sub>e\\<^sub>t())\n                                    \\<tau> =\n                                   true \\<tau>\n                                then SOME y.\n  y \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                           (X \\<tau>)\\<rceil>\\<rceil>\n                                else null \\<tau>\n                           else \\<bottom>))\n            \\<tau> =\n           true \\<tau>\n        then \\<lfloor>\\<lfloor>(if (\\<upsilon> X) \\<tau> = true \\<tau>\n                                then if (\\<delta> X and\n   X->notEmpty\\<^sub>S\\<^sub>e\\<^sub>t())\n   \\<tau> =\n  true \\<tau>\n                                     then SOME y.\n       y \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                (X \\<tau>)\\<rceil>\\<rceil>\n                                     else null \\<tau>\n                                else \\<bottom>)\n                               \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                (X \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>\n        else \\<bottom>) =\n       (if (\\<lambda>_.\n               (\\<delta> X)\n                \\<tau>) then (\\<lambda>_.\n                                 (if \\<delta> X->size\\<^sub>S\\<^sub>e\\<^sub>t() then not\n          X->isEmpty\\<^sub>S\\<^sub>e\\<^sub>t() else (\\<lambda>\\<tau>.\n                  if (\\<delta> X) \\<tau> = true \\<tau> \\<and>\n                     (\\<upsilon> null) \\<tau> = true \\<tau>\n                  then \\<lfloor>\\<lfloor>null \\<tau>\n   \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                          (X \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>\n                  else \\<bottom>) endif)\n                                  \\<tau>) else (\\<lambda>_.\n             invalid \\<tau>) endif)\n        \\<tau>", "apply(frule B)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>\\<tau>.\n       \\<lbrakk>(\\<delta> X) \\<tau> = true \\<tau>;\n        infinite\n         \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                          (X \\<tau>)\\<rceil>\\<rceil>;\n        (\\<delta> X->size\\<^sub>S\\<^sub>e\\<^sub>t()) \\<tau> =\n        false \\<tau>\\<rbrakk>\n       \\<Longrightarrow> (X->notEmpty\\<^sub>S\\<^sub>e\\<^sub>t() \\<tau> =\n                          true \\<tau> \\<longrightarrow>\n                          ((\\<upsilon> (\\<lambda>_.\n     SOME y.\n        y \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                 (X \\<tau>)\\<rceil>\\<rceil>))\n                            \\<tau> =\n                           true \\<tau> \\<longrightarrow>\n                           \\<lfloor>\\<lfloor>(SOME y.\n           y \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                    (X \\<tau>)\\<rceil>\\<rceil>)\n       \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                              (X \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor> =\n                           (if \\<delta> X->size\\<^sub>S\\<^sub>e\\<^sub>t() then not\n    X->isEmpty\\<^sub>S\\<^sub>e\\<^sub>t() else (\\<lambda>\\<tau>.\n            if (\\<delta> X) \\<tau> = true \\<tau>\n            then \\<lfloor>\\<lfloor>null \\<tau>\n                                   \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                    (X \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>\n            else \\<bottom>) endif)\n                            \\<tau>) \\<and>\n                          ((\\<upsilon> (\\<lambda>_.\n     SOME y.\n        y \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                 (X \\<tau>)\\<rceil>\\<rceil>))\n                            \\<tau> \\<noteq>\n                           true \\<tau> \\<longrightarrow>\n                           \\<bottom> =\n                           (if \\<delta> X->size\\<^sub>S\\<^sub>e\\<^sub>t() then not\n    X->isEmpty\\<^sub>S\\<^sub>e\\<^sub>t() else (\\<lambda>\\<tau>.\n            if (\\<delta> X) \\<tau> = true \\<tau>\n            then \\<lfloor>\\<lfloor>null \\<tau>\n                                   \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                    (X \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>\n            else \\<bottom>) endif)\n                            \\<tau>)) \\<and>\n                         (X->notEmpty\\<^sub>S\\<^sub>e\\<^sub>t()\n                           \\<tau> \\<noteq>\n                          true \\<tau> \\<longrightarrow>\n                          ((\\<upsilon> (\\<lambda>_. null \\<tau>)) \\<tau> =\n                           true \\<tau> \\<longrightarrow>\n                           \\<lfloor>\\<lfloor>null \\<tau>\n       \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                              (X \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor> =\n                           (if \\<delta> X->size\\<^sub>S\\<^sub>e\\<^sub>t() then not\n    X->isEmpty\\<^sub>S\\<^sub>e\\<^sub>t() else (\\<lambda>\\<tau>.\n            if (\\<delta> X) \\<tau> = true \\<tau>\n            then \\<lfloor>\\<lfloor>null \\<tau>\n                                   \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                    (X \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>\n            else \\<bottom>) endif)\n                            \\<tau>) \\<and>\n                          ((\\<upsilon> (\\<lambda>_. null \\<tau>))\n                            \\<tau> \\<noteq>\n                           true \\<tau> \\<longrightarrow>\n                           \\<bottom> =\n                           (if \\<delta> X->size\\<^sub>S\\<^sub>e\\<^sub>t() then not\n    X->isEmpty\\<^sub>S\\<^sub>e\\<^sub>t() else (\\<lambda>\\<tau>.\n            if (\\<delta> X) \\<tau> = true \\<tau>\n            then \\<lfloor>\\<lfloor>null \\<tau>\n                                   \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                    (X \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>\n            else \\<bottom>) endif)\n                            \\<tau>))\n 2. \\<And>\\<tau>.\n       (\\<delta> X) \\<tau> \\<noteq> true \\<tau> \\<Longrightarrow>\n       (if (\\<delta> X) \\<tau> = true \\<tau> \\<and>\n           (\\<upsilon> (\\<lambda>_.\n                           if (\\<upsilon> X) \\<tau> = true \\<tau>\n                           then if (\\<delta> X and\n                                    X->notEmpty\\<^sub>S\\<^sub>e\\<^sub>t())\n                                    \\<tau> =\n                                   true \\<tau>\n                                then SOME y.\n  y \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                           (X \\<tau>)\\<rceil>\\<rceil>\n                                else null \\<tau>\n                           else \\<bottom>))\n            \\<tau> =\n           true \\<tau>\n        then \\<lfloor>\\<lfloor>(if (\\<upsilon> X) \\<tau> = true \\<tau>\n                                then if (\\<delta> X and\n   X->notEmpty\\<^sub>S\\<^sub>e\\<^sub>t())\n   \\<tau> =\n  true \\<tau>\n                                     then SOME y.\n       y \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                (X \\<tau>)\\<rceil>\\<rceil>\n                                     else null \\<tau>\n                                else \\<bottom>)\n                               \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                (X \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>\n        else \\<bottom>) =\n       (if (\\<lambda>_.\n               (\\<delta> X)\n                \\<tau>) then (\\<lambda>_.\n                                 (if \\<delta> X->size\\<^sub>S\\<^sub>e\\<^sub>t() then not\n          X->isEmpty\\<^sub>S\\<^sub>e\\<^sub>t() else (\\<lambda>\\<tau>.\n                  if (\\<delta> X) \\<tau> = true \\<tau> \\<and>\n                     (\\<upsilon> null) \\<tau> = true \\<tau>\n                  then \\<lfloor>\\<lfloor>null \\<tau>\n   \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                          (X \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>\n                  else \\<bottom>) endif)\n                                  \\<tau>) else (\\<lambda>_.\n             invalid \\<tau>) endif)\n        \\<tau>", "apply(subst (1 2 3 4) cp_OclIf, simp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>\\<tau>.\n       \\<lbrakk>(\\<delta> X) \\<tau> = true \\<tau>;\n        infinite\n         \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                          (X \\<tau>)\\<rceil>\\<rceil>;\n        (\\<delta> X->size\\<^sub>S\\<^sub>e\\<^sub>t()) \\<tau> =\n        false \\<tau>\\<rbrakk>\n       \\<Longrightarrow> (X->notEmpty\\<^sub>S\\<^sub>e\\<^sub>t() \\<tau> =\n                          true \\<tau> \\<longrightarrow>\n                          ((\\<upsilon> (\\<lambda>_.\n     SOME y.\n        y \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                 (X \\<tau>)\\<rceil>\\<rceil>))\n                            \\<tau> =\n                           true \\<tau> \\<longrightarrow>\n                           \\<lfloor>\\<lfloor>(SOME y.\n           y \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                    (X \\<tau>)\\<rceil>\\<rceil>)\n       \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                              (X \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor> =\n                           (if (\\<lambda>_.\n                                   false\n                                    \\<tau>) then (\\<lambda>_.\n               not X->isEmpty\\<^sub>S\\<^sub>e\\<^sub>t()\n                \\<tau>) else (\\<lambda>_.\n                                 \\<lfloor>\\<lfloor>null \\<tau>\n             \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                    (X\n\\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>) endif)\n                            \\<tau>) \\<and>\n                          ((\\<upsilon> (\\<lambda>_.\n     SOME y.\n        y \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                 (X \\<tau>)\\<rceil>\\<rceil>))\n                            \\<tau> \\<noteq>\n                           true \\<tau> \\<longrightarrow>\n                           \\<bottom> =\n                           (if (\\<lambda>_.\n                                   false\n                                    \\<tau>) then (\\<lambda>_.\n               not X->isEmpty\\<^sub>S\\<^sub>e\\<^sub>t()\n                \\<tau>) else (\\<lambda>_.\n                                 \\<lfloor>\\<lfloor>null \\<tau>\n             \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                    (X\n\\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>) endif)\n                            \\<tau>)) \\<and>\n                         (X->notEmpty\\<^sub>S\\<^sub>e\\<^sub>t()\n                           \\<tau> \\<noteq>\n                          true \\<tau> \\<longrightarrow>\n                          ((\\<upsilon> (\\<lambda>_. null \\<tau>)) \\<tau> =\n                           true \\<tau> \\<longrightarrow>\n                           \\<lfloor>\\<lfloor>null \\<tau>\n       \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                              (X \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor> =\n                           (if (\\<lambda>_.\n                                   false\n                                    \\<tau>) then (\\<lambda>_.\n               not X->isEmpty\\<^sub>S\\<^sub>e\\<^sub>t()\n                \\<tau>) else (\\<lambda>_.\n                                 \\<lfloor>\\<lfloor>null \\<tau>\n             \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                    (X\n\\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>) endif)\n                            \\<tau>) \\<and>\n                          ((\\<upsilon> (\\<lambda>_. null \\<tau>))\n                            \\<tau> \\<noteq>\n                           true \\<tau> \\<longrightarrow>\n                           \\<bottom> =\n                           (if (\\<lambda>_.\n                                   false\n                                    \\<tau>) then (\\<lambda>_.\n               not X->isEmpty\\<^sub>S\\<^sub>e\\<^sub>t()\n                \\<tau>) else (\\<lambda>_.\n                                 \\<lfloor>\\<lfloor>null \\<tau>\n             \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                    (X\n\\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>) endif)\n                            \\<tau>))\n 2. \\<And>\\<tau>.\n       (\\<delta> X) \\<tau> \\<noteq> true \\<tau> \\<Longrightarrow>\n       (if (\\<delta> X) \\<tau> = true \\<tau> \\<and>\n           (\\<upsilon> (\\<lambda>_.\n                           if (\\<upsilon> X) \\<tau> = true \\<tau>\n                           then if (\\<delta> X and\n                                    X->notEmpty\\<^sub>S\\<^sub>e\\<^sub>t())\n                                    \\<tau> =\n                                   true \\<tau>\n                                then SOME y.\n  y \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                           (X \\<tau>)\\<rceil>\\<rceil>\n                                else null \\<tau>\n                           else \\<bottom>))\n            \\<tau> =\n           true \\<tau>\n        then \\<lfloor>\\<lfloor>(if (\\<upsilon> X) \\<tau> = true \\<tau>\n                                then if (\\<delta> X and\n   X->notEmpty\\<^sub>S\\<^sub>e\\<^sub>t())\n   \\<tau> =\n  true \\<tau>\n                                     then SOME y.\n       y \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                (X \\<tau>)\\<rceil>\\<rceil>\n                                     else null \\<tau>\n                                else \\<bottom>)\n                               \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                (X \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>\n        else \\<bottom>) =\n       (if (\\<lambda>_.\n               (\\<delta> X)\n                \\<tau>) then (\\<lambda>_.\n                                 (if \\<delta> X->size\\<^sub>S\\<^sub>e\\<^sub>t() then not\n          X->isEmpty\\<^sub>S\\<^sub>e\\<^sub>t() else (\\<lambda>\\<tau>.\n                  if (\\<delta> X) \\<tau> = true \\<tau> \\<and>\n                     (\\<upsilon> null) \\<tau> = true \\<tau>\n                  then \\<lfloor>\\<lfloor>null \\<tau>\n   \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                          (X \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>\n                  else \\<bottom>) endif)\n                                  \\<tau>) else (\\<lambda>_.\n             invalid \\<tau>) endif)\n        \\<tau>", "apply(subst (1 2 3 4) cp_OclIf[symmetric], simp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>\\<tau>.\n       \\<lbrakk>(\\<delta> X) \\<tau> = true \\<tau>;\n        infinite\n         \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                          (X \\<tau>)\\<rceil>\\<rceil>;\n        (\\<delta> X->size\\<^sub>S\\<^sub>e\\<^sub>t()) \\<tau> =\n        false \\<tau>\\<rbrakk>\n       \\<Longrightarrow> (X->notEmpty\\<^sub>S\\<^sub>e\\<^sub>t() \\<tau> =\n                          true \\<tau> \\<longrightarrow>\n                          ((\\<upsilon> (\\<lambda>_.\n     SOME y.\n        y \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                 (X \\<tau>)\\<rceil>\\<rceil>))\n                            \\<tau> =\n                           true \\<tau> \\<longrightarrow>\n                           ((SOME y.\n                                y \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                   (X \\<tau>)\\<rceil>\\<rceil>)\n                            \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n             (X \\<tau>)\\<rceil>\\<rceil>) =\n                           (null \\<tau>\n                            \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n             (X \\<tau>)\\<rceil>\\<rceil>)) \\<and>\n                          ((\\<upsilon> (\\<lambda>_.\n     SOME y.\n        y \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                 (X \\<tau>)\\<rceil>\\<rceil>))\n                            \\<tau> \\<noteq>\n                           true \\<tau> \\<longrightarrow>\n                           \\<bottom> =\n                           \\<lfloor>\\<lfloor>null \\<tau>\n       \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                              (X \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>)) \\<and>\n                         (X->notEmpty\\<^sub>S\\<^sub>e\\<^sub>t()\n                           \\<tau> \\<noteq>\n                          true \\<tau> \\<longrightarrow>\n                          (\\<upsilon> (\\<lambda>_. null \\<tau>))\n                           \\<tau> \\<noteq>\n                          true \\<tau> \\<longrightarrow>\n                          \\<bottom> =\n                          \\<lfloor>\\<lfloor>null \\<tau>\n      \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                             (X \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>)\n 2. \\<And>\\<tau>.\n       (\\<delta> X) \\<tau> \\<noteq> true \\<tau> \\<Longrightarrow>\n       (if (\\<delta> X) \\<tau> = true \\<tau> \\<and>\n           (\\<upsilon> (\\<lambda>_.\n                           if (\\<upsilon> X) \\<tau> = true \\<tau>\n                           then if (\\<delta> X and\n                                    X->notEmpty\\<^sub>S\\<^sub>e\\<^sub>t())\n                                    \\<tau> =\n                                   true \\<tau>\n                                then SOME y.\n  y \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                           (X \\<tau>)\\<rceil>\\<rceil>\n                                else null \\<tau>\n                           else \\<bottom>))\n            \\<tau> =\n           true \\<tau>\n        then \\<lfloor>\\<lfloor>(if (\\<upsilon> X) \\<tau> = true \\<tau>\n                                then if (\\<delta> X and\n   X->notEmpty\\<^sub>S\\<^sub>e\\<^sub>t())\n   \\<tau> =\n  true \\<tau>\n                                     then SOME y.\n       y \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                (X \\<tau>)\\<rceil>\\<rceil>\n                                     else null \\<tau>\n                                else \\<bottom>)\n                               \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                (X \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>\n        else \\<bottom>) =\n       (if (\\<lambda>_.\n               (\\<delta> X)\n                \\<tau>) then (\\<lambda>_.\n                                 (if \\<delta> X->size\\<^sub>S\\<^sub>e\\<^sub>t() then not\n          X->isEmpty\\<^sub>S\\<^sub>e\\<^sub>t() else (\\<lambda>\\<tau>.\n                  if (\\<delta> X) \\<tau> = true \\<tau> \\<and>\n                     (\\<upsilon> null) \\<tau> = true \\<tau>\n                  then \\<lfloor>\\<lfloor>null \\<tau>\n   \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                          (X \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>\n                  else \\<bottom>) endif)\n                                  \\<tau>) else (\\<lambda>_.\n             invalid \\<tau>) endif)\n        \\<tau>", "apply(case_tac \"(X->notEmpty\\<^sub>S\\<^sub>e\\<^sub>t()) \\<tau> = true \\<tau>\", simp)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>\\<tau>.\n       \\<lbrakk>(\\<delta> X) \\<tau> = true \\<tau>;\n        infinite\n         \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                          (X \\<tau>)\\<rceil>\\<rceil>;\n        (\\<delta> X->size\\<^sub>S\\<^sub>e\\<^sub>t()) \\<tau> = false \\<tau>;\n        X->notEmpty\\<^sub>S\\<^sub>e\\<^sub>t() \\<tau> = true \\<tau>\\<rbrakk>\n       \\<Longrightarrow> ((\\<upsilon> (\\<lambda>_.\n    SOME y.\n       y \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                (X \\<tau>)\\<rceil>\\<rceil>))\n                           \\<tau> =\n                          true \\<tau> \\<longrightarrow>\n                          ((SOME y.\n                               y \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                  (X \\<tau>)\\<rceil>\\<rceil>)\n                           \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n            (X \\<tau>)\\<rceil>\\<rceil>) =\n                          (null \\<tau>\n                           \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n            (X \\<tau>)\\<rceil>\\<rceil>)) \\<and>\n                         ((\\<upsilon> (\\<lambda>_.\n    SOME y.\n       y \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                (X \\<tau>)\\<rceil>\\<rceil>))\n                           \\<tau> \\<noteq>\n                          true \\<tau> \\<longrightarrow>\n                          \\<bottom> =\n                          \\<lfloor>\\<lfloor>null \\<tau>\n      \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                             (X \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>)\n 2. \\<And>\\<tau>.\n       \\<lbrakk>(\\<delta> X) \\<tau> = true \\<tau>;\n        infinite\n         \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                          (X \\<tau>)\\<rceil>\\<rceil>;\n        (\\<delta> X->size\\<^sub>S\\<^sub>e\\<^sub>t()) \\<tau> = false \\<tau>;\n        X->notEmpty\\<^sub>S\\<^sub>e\\<^sub>t() \\<tau> \\<noteq>\n        true \\<tau>\\<rbrakk>\n       \\<Longrightarrow> (X->notEmpty\\<^sub>S\\<^sub>e\\<^sub>t() \\<tau> =\n                          true \\<tau> \\<longrightarrow>\n                          ((\\<upsilon> (\\<lambda>_.\n     SOME y.\n        y \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                 (X \\<tau>)\\<rceil>\\<rceil>))\n                            \\<tau> =\n                           true \\<tau> \\<longrightarrow>\n                           ((SOME y.\n                                y \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                   (X \\<tau>)\\<rceil>\\<rceil>)\n                            \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n             (X \\<tau>)\\<rceil>\\<rceil>) =\n                           (null \\<tau>\n                            \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n             (X \\<tau>)\\<rceil>\\<rceil>)) \\<and>\n                          ((\\<upsilon> (\\<lambda>_.\n     SOME y.\n        y \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                 (X \\<tau>)\\<rceil>\\<rceil>))\n                            \\<tau> \\<noteq>\n                           true \\<tau> \\<longrightarrow>\n                           \\<bottom> =\n                           \\<lfloor>\\<lfloor>null \\<tau>\n       \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                              (X \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>)) \\<and>\n                         (X->notEmpty\\<^sub>S\\<^sub>e\\<^sub>t()\n                           \\<tau> \\<noteq>\n                          true \\<tau> \\<longrightarrow>\n                          (\\<upsilon> (\\<lambda>_. null \\<tau>))\n                           \\<tau> \\<noteq>\n                          true \\<tau> \\<longrightarrow>\n                          \\<bottom> =\n                          \\<lfloor>\\<lfloor>null \\<tau>\n      \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                             (X \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>)\n 3. \\<And>\\<tau>.\n       (\\<delta> X) \\<tau> \\<noteq> true \\<tau> \\<Longrightarrow>\n       (if (\\<delta> X) \\<tau> = true \\<tau> \\<and>\n           (\\<upsilon> (\\<lambda>_.\n                           if (\\<upsilon> X) \\<tau> = true \\<tau>\n                           then if (\\<delta> X and\n                                    X->notEmpty\\<^sub>S\\<^sub>e\\<^sub>t())\n                                    \\<tau> =\n                                   true \\<tau>\n                                then SOME y.\n  y \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                           (X \\<tau>)\\<rceil>\\<rceil>\n                                else null \\<tau>\n                           else \\<bottom>))\n            \\<tau> =\n           true \\<tau>\n        then \\<lfloor>\\<lfloor>(if (\\<upsilon> X) \\<tau> = true \\<tau>\n                                then if (\\<delta> X and\n   X->notEmpty\\<^sub>S\\<^sub>e\\<^sub>t())\n   \\<tau> =\n  true \\<tau>\n                                     then SOME y.\n       y \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                (X \\<tau>)\\<rceil>\\<rceil>\n                                     else null \\<tau>\n                                else \\<bottom>)\n                               \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                (X \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>\n        else \\<bottom>) =\n       (if (\\<lambda>_.\n               (\\<delta> X)\n                \\<tau>) then (\\<lambda>_.\n                                 (if \\<delta> X->size\\<^sub>S\\<^sub>e\\<^sub>t() then not\n          X->isEmpty\\<^sub>S\\<^sub>e\\<^sub>t() else (\\<lambda>\\<tau>.\n                  if (\\<delta> X) \\<tau> = true \\<tau> \\<and>\n                     (\\<upsilon> null) \\<tau> = true \\<tau>\n                  then \\<lfloor>\\<lfloor>null \\<tau>\n   \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                          (X \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>\n                  else \\<bottom>) endif)\n                                  \\<tau>) else (\\<lambda>_.\n             invalid \\<tau>) endif)\n        \\<tau>", "apply(frule OclNotEmpty_has_elt[simplified OclValid_def], simp)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>\\<tau>.\n       \\<lbrakk>(\\<delta> X) \\<tau> = true \\<tau>;\n        infinite\n         \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                          (X \\<tau>)\\<rceil>\\<rceil>;\n        (\\<delta> X->size\\<^sub>S\\<^sub>e\\<^sub>t()) \\<tau> = false \\<tau>;\n        X->notEmpty\\<^sub>S\\<^sub>e\\<^sub>t() \\<tau> = true \\<tau>;\n        \\<exists>e.\n           e \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                    (X \\<tau>)\\<rceil>\\<rceil>\\<rbrakk>\n       \\<Longrightarrow> ((\\<upsilon> (\\<lambda>_.\n    SOME y.\n       y \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                (X \\<tau>)\\<rceil>\\<rceil>))\n                           \\<tau> =\n                          true \\<tau> \\<longrightarrow>\n                          ((SOME y.\n                               y \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                  (X \\<tau>)\\<rceil>\\<rceil>)\n                           \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n            (X \\<tau>)\\<rceil>\\<rceil>) =\n                          (null \\<tau>\n                           \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n            (X \\<tau>)\\<rceil>\\<rceil>)) \\<and>\n                         ((\\<upsilon> (\\<lambda>_.\n    SOME y.\n       y \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                (X \\<tau>)\\<rceil>\\<rceil>))\n                           \\<tau> \\<noteq>\n                          true \\<tau> \\<longrightarrow>\n                          \\<bottom> =\n                          \\<lfloor>\\<lfloor>null \\<tau>\n      \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                             (X \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>)\n 2. \\<And>\\<tau>.\n       \\<lbrakk>(\\<delta> X) \\<tau> = true \\<tau>;\n        infinite\n         \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                          (X \\<tau>)\\<rceil>\\<rceil>;\n        (\\<delta> X->size\\<^sub>S\\<^sub>e\\<^sub>t()) \\<tau> = false \\<tau>;\n        X->notEmpty\\<^sub>S\\<^sub>e\\<^sub>t() \\<tau> \\<noteq>\n        true \\<tau>\\<rbrakk>\n       \\<Longrightarrow> (X->notEmpty\\<^sub>S\\<^sub>e\\<^sub>t() \\<tau> =\n                          true \\<tau> \\<longrightarrow>\n                          ((\\<upsilon> (\\<lambda>_.\n     SOME y.\n        y \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                 (X \\<tau>)\\<rceil>\\<rceil>))\n                            \\<tau> =\n                           true \\<tau> \\<longrightarrow>\n                           ((SOME y.\n                                y \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                   (X \\<tau>)\\<rceil>\\<rceil>)\n                            \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n             (X \\<tau>)\\<rceil>\\<rceil>) =\n                           (null \\<tau>\n                            \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n             (X \\<tau>)\\<rceil>\\<rceil>)) \\<and>\n                          ((\\<upsilon> (\\<lambda>_.\n     SOME y.\n        y \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                 (X \\<tau>)\\<rceil>\\<rceil>))\n                            \\<tau> \\<noteq>\n                           true \\<tau> \\<longrightarrow>\n                           \\<bottom> =\n                           \\<lfloor>\\<lfloor>null \\<tau>\n       \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                              (X \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>)) \\<and>\n                         (X->notEmpty\\<^sub>S\\<^sub>e\\<^sub>t()\n                           \\<tau> \\<noteq>\n                          true \\<tau> \\<longrightarrow>\n                          (\\<upsilon> (\\<lambda>_. null \\<tau>))\n                           \\<tau> \\<noteq>\n                          true \\<tau> \\<longrightarrow>\n                          \\<bottom> =\n                          \\<lfloor>\\<lfloor>null \\<tau>\n      \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                             (X \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>)\n 3. \\<And>\\<tau>.\n       (\\<delta> X) \\<tau> \\<noteq> true \\<tau> \\<Longrightarrow>\n       (if (\\<delta> X) \\<tau> = true \\<tau> \\<and>\n           (\\<upsilon> (\\<lambda>_.\n                           if (\\<upsilon> X) \\<tau> = true \\<tau>\n                           then if (\\<delta> X and\n                                    X->notEmpty\\<^sub>S\\<^sub>e\\<^sub>t())\n                                    \\<tau> =\n                                   true \\<tau>\n                                then SOME y.\n  y \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                           (X \\<tau>)\\<rceil>\\<rceil>\n                                else null \\<tau>\n                           else \\<bottom>))\n            \\<tau> =\n           true \\<tau>\n        then \\<lfloor>\\<lfloor>(if (\\<upsilon> X) \\<tau> = true \\<tau>\n                                then if (\\<delta> X and\n   X->notEmpty\\<^sub>S\\<^sub>e\\<^sub>t())\n   \\<tau> =\n  true \\<tau>\n                                     then SOME y.\n       y \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                (X \\<tau>)\\<rceil>\\<rceil>\n                                     else null \\<tau>\n                                else \\<bottom>)\n                               \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                (X \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>\n        else \\<bottom>) =\n       (if (\\<lambda>_.\n               (\\<delta> X)\n                \\<tau>) then (\\<lambda>_.\n                                 (if \\<delta> X->size\\<^sub>S\\<^sub>e\\<^sub>t() then not\n          X->isEmpty\\<^sub>S\\<^sub>e\\<^sub>t() else (\\<lambda>\\<tau>.\n                  if (\\<delta> X) \\<tau> = true \\<tau> \\<and>\n                     (\\<upsilon> null) \\<tau> = true \\<tau>\n                  then \\<lfloor>\\<lfloor>null \\<tau>\n   \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                          (X \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>\n                  else \\<bottom>) endif)\n                                  \\<tau>) else (\\<lambda>_.\n             invalid \\<tau>) endif)\n        \\<tau>", "apply(simp add: OclNotEmpty_def OclIsEmpty_def)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>\\<tau>.\n       \\<lbrakk>(\\<delta> X) \\<tau> = true \\<tau>;\n        infinite\n         \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                          (X \\<tau>)\\<rceil>\\<rceil>;\n        (\\<delta> X->size\\<^sub>S\\<^sub>e\\<^sub>t()) \\<tau> = false \\<tau>;\n        not (\\<upsilon> X and not (\\<delta> X) or\n             X->size\\<^sub>S\\<^sub>e\\<^sub>t() \\<doteq> \\<zero>)\n         \\<tau> =\n        true \\<tau>;\n        \\<exists>e.\n           e \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                    (X \\<tau>)\\<rceil>\\<rceil>\\<rbrakk>\n       \\<Longrightarrow> ((\\<upsilon> (\\<lambda>_.\n    SOME y.\n       y \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                (X \\<tau>)\\<rceil>\\<rceil>))\n                           \\<tau> =\n                          true \\<tau> \\<longrightarrow>\n                          ((SOME y.\n                               y \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                  (X \\<tau>)\\<rceil>\\<rceil>)\n                           \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n            (X \\<tau>)\\<rceil>\\<rceil>) =\n                          (null \\<tau>\n                           \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n            (X \\<tau>)\\<rceil>\\<rceil>)) \\<and>\n                         ((\\<upsilon> (\\<lambda>_.\n    SOME y.\n       y \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                (X \\<tau>)\\<rceil>\\<rceil>))\n                           \\<tau> \\<noteq>\n                          true \\<tau> \\<longrightarrow>\n                          \\<bottom> =\n                          \\<lfloor>\\<lfloor>null \\<tau>\n      \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                             (X \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>)\n 2. \\<And>\\<tau>.\n       \\<lbrakk>(\\<delta> X) \\<tau> = true \\<tau>;\n        infinite\n         \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                          (X \\<tau>)\\<rceil>\\<rceil>;\n        (\\<delta> X->size\\<^sub>S\\<^sub>e\\<^sub>t()) \\<tau> = false \\<tau>;\n        X->notEmpty\\<^sub>S\\<^sub>e\\<^sub>t() \\<tau> \\<noteq>\n        true \\<tau>\\<rbrakk>\n       \\<Longrightarrow> (X->notEmpty\\<^sub>S\\<^sub>e\\<^sub>t() \\<tau> =\n                          true \\<tau> \\<longrightarrow>\n                          ((\\<upsilon> (\\<lambda>_.\n     SOME y.\n        y \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                 (X \\<tau>)\\<rceil>\\<rceil>))\n                            \\<tau> =\n                           true \\<tau> \\<longrightarrow>\n                           ((SOME y.\n                                y \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                   (X \\<tau>)\\<rceil>\\<rceil>)\n                            \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n             (X \\<tau>)\\<rceil>\\<rceil>) =\n                           (null \\<tau>\n                            \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n             (X \\<tau>)\\<rceil>\\<rceil>)) \\<and>\n                          ((\\<upsilon> (\\<lambda>_.\n     SOME y.\n        y \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                 (X \\<tau>)\\<rceil>\\<rceil>))\n                            \\<tau> \\<noteq>\n                           true \\<tau> \\<longrightarrow>\n                           \\<bottom> =\n                           \\<lfloor>\\<lfloor>null \\<tau>\n       \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                              (X \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>)) \\<and>\n                         (X->notEmpty\\<^sub>S\\<^sub>e\\<^sub>t()\n                           \\<tau> \\<noteq>\n                          true \\<tau> \\<longrightarrow>\n                          (\\<upsilon> (\\<lambda>_. null \\<tau>))\n                           \\<tau> \\<noteq>\n                          true \\<tau> \\<longrightarrow>\n                          \\<bottom> =\n                          \\<lfloor>\\<lfloor>null \\<tau>\n      \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                             (X \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>)\n 3. \\<And>\\<tau>.\n       (\\<delta> X) \\<tau> \\<noteq> true \\<tau> \\<Longrightarrow>\n       (if (\\<delta> X) \\<tau> = true \\<tau> \\<and>\n           (\\<upsilon> (\\<lambda>_.\n                           if (\\<upsilon> X) \\<tau> = true \\<tau>\n                           then if (\\<delta> X and\n                                    X->notEmpty\\<^sub>S\\<^sub>e\\<^sub>t())\n                                    \\<tau> =\n                                   true \\<tau>\n                                then SOME y.\n  y \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                           (X \\<tau>)\\<rceil>\\<rceil>\n                                else null \\<tau>\n                           else \\<bottom>))\n            \\<tau> =\n           true \\<tau>\n        then \\<lfloor>\\<lfloor>(if (\\<upsilon> X) \\<tau> = true \\<tau>\n                                then if (\\<delta> X and\n   X->notEmpty\\<^sub>S\\<^sub>e\\<^sub>t())\n   \\<tau> =\n  true \\<tau>\n                                     then SOME y.\n       y \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                (X \\<tau>)\\<rceil>\\<rceil>\n                                     else null \\<tau>\n                                else \\<bottom>)\n                               \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                (X \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>\n        else \\<bottom>) =\n       (if (\\<lambda>_.\n               (\\<delta> X)\n                \\<tau>) then (\\<lambda>_.\n                                 (if \\<delta> X->size\\<^sub>S\\<^sub>e\\<^sub>t() then not\n          X->isEmpty\\<^sub>S\\<^sub>e\\<^sub>t() else (\\<lambda>\\<tau>.\n                  if (\\<delta> X) \\<tau> = true \\<tau> \\<and>\n                     (\\<upsilon> null) \\<tau> = true \\<tau>\n                  then \\<lfloor>\\<lfloor>null \\<tau>\n   \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                          (X \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>\n                  else \\<bottom>) endif)\n                                  \\<tau>) else (\\<lambda>_.\n             invalid \\<tau>) endif)\n        \\<tau>", "apply(subgoal_tac \"X->size\\<^sub>S\\<^sub>e\\<^sub>t() \\<tau> = \\<bottom>\")"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>\\<tau>.\n       \\<lbrakk>(\\<delta> X) \\<tau> = true \\<tau>;\n        infinite\n         \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                          (X \\<tau>)\\<rceil>\\<rceil>;\n        (\\<delta> X->size\\<^sub>S\\<^sub>e\\<^sub>t()) \\<tau> = false \\<tau>;\n        not (\\<upsilon> X and not (\\<delta> X) or\n             X->size\\<^sub>S\\<^sub>e\\<^sub>t() \\<doteq> \\<zero>)\n         \\<tau> =\n        true \\<tau>;\n        \\<exists>e.\n           e \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                    (X \\<tau>)\\<rceil>\\<rceil>;\n        X->size\\<^sub>S\\<^sub>e\\<^sub>t() \\<tau> = \\<bottom>\\<rbrakk>\n       \\<Longrightarrow> ((\\<upsilon> (\\<lambda>_.\n    SOME y.\n       y \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                (X \\<tau>)\\<rceil>\\<rceil>))\n                           \\<tau> =\n                          true \\<tau> \\<longrightarrow>\n                          ((SOME y.\n                               y \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                  (X \\<tau>)\\<rceil>\\<rceil>)\n                           \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n            (X \\<tau>)\\<rceil>\\<rceil>) =\n                          (null \\<tau>\n                           \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n            (X \\<tau>)\\<rceil>\\<rceil>)) \\<and>\n                         ((\\<upsilon> (\\<lambda>_.\n    SOME y.\n       y \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                (X \\<tau>)\\<rceil>\\<rceil>))\n                           \\<tau> \\<noteq>\n                          true \\<tau> \\<longrightarrow>\n                          \\<bottom> =\n                          \\<lfloor>\\<lfloor>null \\<tau>\n      \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                             (X \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>)\n 2. \\<And>\\<tau>.\n       \\<lbrakk>(\\<delta> X) \\<tau> = true \\<tau>;\n        infinite\n         \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                          (X \\<tau>)\\<rceil>\\<rceil>;\n        (\\<delta> X->size\\<^sub>S\\<^sub>e\\<^sub>t()) \\<tau> = false \\<tau>;\n        not (\\<upsilon> X and not (\\<delta> X) or\n             X->size\\<^sub>S\\<^sub>e\\<^sub>t() \\<doteq> \\<zero>)\n         \\<tau> =\n        true \\<tau>;\n        \\<exists>e.\n           e \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                    (X \\<tau>)\\<rceil>\\<rceil>\\<rbrakk>\n       \\<Longrightarrow> X->size\\<^sub>S\\<^sub>e\\<^sub>t() \\<tau> =\n                         \\<bottom>\n 3. \\<And>\\<tau>.\n       \\<lbrakk>(\\<delta> X) \\<tau> = true \\<tau>;\n        infinite\n         \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                          (X \\<tau>)\\<rceil>\\<rceil>;\n        (\\<delta> X->size\\<^sub>S\\<^sub>e\\<^sub>t()) \\<tau> = false \\<tau>;\n        X->notEmpty\\<^sub>S\\<^sub>e\\<^sub>t() \\<tau> \\<noteq>\n        true \\<tau>\\<rbrakk>\n       \\<Longrightarrow> (X->notEmpty\\<^sub>S\\<^sub>e\\<^sub>t() \\<tau> =\n                          true \\<tau> \\<longrightarrow>\n                          ((\\<upsilon> (\\<lambda>_.\n     SOME y.\n        y \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                 (X \\<tau>)\\<rceil>\\<rceil>))\n                            \\<tau> =\n                           true \\<tau> \\<longrightarrow>\n                           ((SOME y.\n                                y \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                   (X \\<tau>)\\<rceil>\\<rceil>)\n                            \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n             (X \\<tau>)\\<rceil>\\<rceil>) =\n                           (null \\<tau>\n                            \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n             (X \\<tau>)\\<rceil>\\<rceil>)) \\<and>\n                          ((\\<upsilon> (\\<lambda>_.\n     SOME y.\n        y \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                 (X \\<tau>)\\<rceil>\\<rceil>))\n                            \\<tau> \\<noteq>\n                           true \\<tau> \\<longrightarrow>\n                           \\<bottom> =\n                           \\<lfloor>\\<lfloor>null \\<tau>\n       \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                              (X \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>)) \\<and>\n                         (X->notEmpty\\<^sub>S\\<^sub>e\\<^sub>t()\n                           \\<tau> \\<noteq>\n                          true \\<tau> \\<longrightarrow>\n                          (\\<upsilon> (\\<lambda>_. null \\<tau>))\n                           \\<tau> \\<noteq>\n                          true \\<tau> \\<longrightarrow>\n                          \\<bottom> =\n                          \\<lfloor>\\<lfloor>null \\<tau>\n      \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                             (X \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>)\n 4. \\<And>\\<tau>.\n       (\\<delta> X) \\<tau> \\<noteq> true \\<tau> \\<Longrightarrow>\n       (if (\\<delta> X) \\<tau> = true \\<tau> \\<and>\n           (\\<upsilon> (\\<lambda>_.\n                           if (\\<upsilon> X) \\<tau> = true \\<tau>\n                           then if (\\<delta> X and\n                                    X->notEmpty\\<^sub>S\\<^sub>e\\<^sub>t())\n                                    \\<tau> =\n                                   true \\<tau>\n                                then SOME y.\n  y \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                           (X \\<tau>)\\<rceil>\\<rceil>\n                                else null \\<tau>\n                           else \\<bottom>))\n            \\<tau> =\n           true \\<tau>\n        then \\<lfloor>\\<lfloor>(if (\\<upsilon> X) \\<tau> = true \\<tau>\n                                then if (\\<delta> X and\n   X->notEmpty\\<^sub>S\\<^sub>e\\<^sub>t())\n   \\<tau> =\n  true \\<tau>\n                                     then SOME y.\n       y \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                (X \\<tau>)\\<rceil>\\<rceil>\n                                     else null \\<tau>\n                                else \\<bottom>)\n                               \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                (X \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>\n        else \\<bottom>) =\n       (if (\\<lambda>_.\n               (\\<delta> X)\n                \\<tau>) then (\\<lambda>_.\n                                 (if \\<delta> X->size\\<^sub>S\\<^sub>e\\<^sub>t() then not\n          X->isEmpty\\<^sub>S\\<^sub>e\\<^sub>t() else (\\<lambda>\\<tau>.\n                  if (\\<delta> X) \\<tau> = true \\<tau> \\<and>\n                     (\\<upsilon> null) \\<tau> = true \\<tau>\n                  then \\<lfloor>\\<lfloor>null \\<tau>\n   \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                          (X \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>\n                  else \\<bottom>) endif)\n                                  \\<tau>) else (\\<lambda>_.\n             invalid \\<tau>) endif)\n        \\<tau>", "prefer 2"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>\\<tau>.\n       \\<lbrakk>(\\<delta> X) \\<tau> = true \\<tau>;\n        infinite\n         \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                          (X \\<tau>)\\<rceil>\\<rceil>;\n        (\\<delta> X->size\\<^sub>S\\<^sub>e\\<^sub>t()) \\<tau> = false \\<tau>;\n        not (\\<upsilon> X and not (\\<delta> X) or\n             X->size\\<^sub>S\\<^sub>e\\<^sub>t() \\<doteq> \\<zero>)\n         \\<tau> =\n        true \\<tau>;\n        \\<exists>e.\n           e \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                    (X \\<tau>)\\<rceil>\\<rceil>\\<rbrakk>\n       \\<Longrightarrow> X->size\\<^sub>S\\<^sub>e\\<^sub>t() \\<tau> =\n                         \\<bottom>\n 2. \\<And>\\<tau>.\n       \\<lbrakk>(\\<delta> X) \\<tau> = true \\<tau>;\n        infinite\n         \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                          (X \\<tau>)\\<rceil>\\<rceil>;\n        (\\<delta> X->size\\<^sub>S\\<^sub>e\\<^sub>t()) \\<tau> = false \\<tau>;\n        not (\\<upsilon> X and not (\\<delta> X) or\n             X->size\\<^sub>S\\<^sub>e\\<^sub>t() \\<doteq> \\<zero>)\n         \\<tau> =\n        true \\<tau>;\n        \\<exists>e.\n           e \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                    (X \\<tau>)\\<rceil>\\<rceil>;\n        X->size\\<^sub>S\\<^sub>e\\<^sub>t() \\<tau> = \\<bottom>\\<rbrakk>\n       \\<Longrightarrow> ((\\<upsilon> (\\<lambda>_.\n    SOME y.\n       y \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                (X \\<tau>)\\<rceil>\\<rceil>))\n                           \\<tau> =\n                          true \\<tau> \\<longrightarrow>\n                          ((SOME y.\n                               y \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                  (X \\<tau>)\\<rceil>\\<rceil>)\n                           \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n            (X \\<tau>)\\<rceil>\\<rceil>) =\n                          (null \\<tau>\n                           \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n            (X \\<tau>)\\<rceil>\\<rceil>)) \\<and>\n                         ((\\<upsilon> (\\<lambda>_.\n    SOME y.\n       y \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                (X \\<tau>)\\<rceil>\\<rceil>))\n                           \\<tau> \\<noteq>\n                          true \\<tau> \\<longrightarrow>\n                          \\<bottom> =\n                          \\<lfloor>\\<lfloor>null \\<tau>\n      \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                             (X \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>)\n 3. \\<And>\\<tau>.\n       \\<lbrakk>(\\<delta> X) \\<tau> = true \\<tau>;\n        infinite\n         \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                          (X \\<tau>)\\<rceil>\\<rceil>;\n        (\\<delta> X->size\\<^sub>S\\<^sub>e\\<^sub>t()) \\<tau> = false \\<tau>;\n        X->notEmpty\\<^sub>S\\<^sub>e\\<^sub>t() \\<tau> \\<noteq>\n        true \\<tau>\\<rbrakk>\n       \\<Longrightarrow> (X->notEmpty\\<^sub>S\\<^sub>e\\<^sub>t() \\<tau> =\n                          true \\<tau> \\<longrightarrow>\n                          ((\\<upsilon> (\\<lambda>_.\n     SOME y.\n        y \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                 (X \\<tau>)\\<rceil>\\<rceil>))\n                            \\<tau> =\n                           true \\<tau> \\<longrightarrow>\n                           ((SOME y.\n                                y \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                   (X \\<tau>)\\<rceil>\\<rceil>)\n                            \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n             (X \\<tau>)\\<rceil>\\<rceil>) =\n                           (null \\<tau>\n                            \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n             (X \\<tau>)\\<rceil>\\<rceil>)) \\<and>\n                          ((\\<upsilon> (\\<lambda>_.\n     SOME y.\n        y \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                 (X \\<tau>)\\<rceil>\\<rceil>))\n                            \\<tau> \\<noteq>\n                           true \\<tau> \\<longrightarrow>\n                           \\<bottom> =\n                           \\<lfloor>\\<lfloor>null \\<tau>\n       \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                              (X \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>)) \\<and>\n                         (X->notEmpty\\<^sub>S\\<^sub>e\\<^sub>t()\n                           \\<tau> \\<noteq>\n                          true \\<tau> \\<longrightarrow>\n                          (\\<upsilon> (\\<lambda>_. null \\<tau>))\n                           \\<tau> \\<noteq>\n                          true \\<tau> \\<longrightarrow>\n                          \\<bottom> =\n                          \\<lfloor>\\<lfloor>null \\<tau>\n      \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                             (X \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>)\n 4. \\<And>\\<tau>.\n       (\\<delta> X) \\<tau> \\<noteq> true \\<tau> \\<Longrightarrow>\n       (if (\\<delta> X) \\<tau> = true \\<tau> \\<and>\n           (\\<upsilon> (\\<lambda>_.\n                           if (\\<upsilon> X) \\<tau> = true \\<tau>\n                           then if (\\<delta> X and\n                                    X->notEmpty\\<^sub>S\\<^sub>e\\<^sub>t())\n                                    \\<tau> =\n                                   true \\<tau>\n                                then SOME y.\n  y \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                           (X \\<tau>)\\<rceil>\\<rceil>\n                                else null \\<tau>\n                           else \\<bottom>))\n            \\<tau> =\n           true \\<tau>\n        then \\<lfloor>\\<lfloor>(if (\\<upsilon> X) \\<tau> = true \\<tau>\n                                then if (\\<delta> X and\n   X->notEmpty\\<^sub>S\\<^sub>e\\<^sub>t())\n   \\<tau> =\n  true \\<tau>\n                                     then SOME y.\n       y \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                (X \\<tau>)\\<rceil>\\<rceil>\n                                     else null \\<tau>\n                                else \\<bottom>)\n                               \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                (X \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>\n        else \\<bottom>) =\n       (if (\\<lambda>_.\n               (\\<delta> X)\n                \\<tau>) then (\\<lambda>_.\n                                 (if \\<delta> X->size\\<^sub>S\\<^sub>e\\<^sub>t() then not\n          X->isEmpty\\<^sub>S\\<^sub>e\\<^sub>t() else (\\<lambda>\\<tau>.\n                  if (\\<delta> X) \\<tau> = true \\<tau> \\<and>\n                     (\\<upsilon> null) \\<tau> = true \\<tau>\n                  then \\<lfloor>\\<lfloor>null \\<tau>\n   \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                          (X \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>\n                  else \\<bottom>) endif)\n                                  \\<tau>) else (\\<lambda>_.\n             invalid \\<tau>) endif)\n        \\<tau>", "apply (metis (hide_lams, no_types) OclSize_def)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>\\<tau>.\n       \\<lbrakk>(\\<delta> X) \\<tau> = true \\<tau>;\n        infinite\n         \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                          (X \\<tau>)\\<rceil>\\<rceil>;\n        (\\<delta> X->size\\<^sub>S\\<^sub>e\\<^sub>t()) \\<tau> = false \\<tau>;\n        not (\\<upsilon> X and not (\\<delta> X) or\n             X->size\\<^sub>S\\<^sub>e\\<^sub>t() \\<doteq> \\<zero>)\n         \\<tau> =\n        true \\<tau>;\n        \\<exists>e.\n           e \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                    (X \\<tau>)\\<rceil>\\<rceil>;\n        X->size\\<^sub>S\\<^sub>e\\<^sub>t() \\<tau> = \\<bottom>\\<rbrakk>\n       \\<Longrightarrow> ((\\<upsilon> (\\<lambda>_.\n    SOME y.\n       y \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                (X \\<tau>)\\<rceil>\\<rceil>))\n                           \\<tau> =\n                          true \\<tau> \\<longrightarrow>\n                          ((SOME y.\n                               y \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                  (X \\<tau>)\\<rceil>\\<rceil>)\n                           \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n            (X \\<tau>)\\<rceil>\\<rceil>) =\n                          (null \\<tau>\n                           \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n            (X \\<tau>)\\<rceil>\\<rceil>)) \\<and>\n                         ((\\<upsilon> (\\<lambda>_.\n    SOME y.\n       y \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                (X \\<tau>)\\<rceil>\\<rceil>))\n                           \\<tau> \\<noteq>\n                          true \\<tau> \\<longrightarrow>\n                          \\<bottom> =\n                          \\<lfloor>\\<lfloor>null \\<tau>\n      \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                             (X \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>)\n 2. \\<And>\\<tau>.\n       \\<lbrakk>(\\<delta> X) \\<tau> = true \\<tau>;\n        infinite\n         \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                          (X \\<tau>)\\<rceil>\\<rceil>;\n        (\\<delta> X->size\\<^sub>S\\<^sub>e\\<^sub>t()) \\<tau> = false \\<tau>;\n        X->notEmpty\\<^sub>S\\<^sub>e\\<^sub>t() \\<tau> \\<noteq>\n        true \\<tau>\\<rbrakk>\n       \\<Longrightarrow> (X->notEmpty\\<^sub>S\\<^sub>e\\<^sub>t() \\<tau> =\n                          true \\<tau> \\<longrightarrow>\n                          ((\\<upsilon> (\\<lambda>_.\n     SOME y.\n        y \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                 (X \\<tau>)\\<rceil>\\<rceil>))\n                            \\<tau> =\n                           true \\<tau> \\<longrightarrow>\n                           ((SOME y.\n                                y \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                   (X \\<tau>)\\<rceil>\\<rceil>)\n                            \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n             (X \\<tau>)\\<rceil>\\<rceil>) =\n                           (null \\<tau>\n                            \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n             (X \\<tau>)\\<rceil>\\<rceil>)) \\<and>\n                          ((\\<upsilon> (\\<lambda>_.\n     SOME y.\n        y \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                 (X \\<tau>)\\<rceil>\\<rceil>))\n                            \\<tau> \\<noteq>\n                           true \\<tau> \\<longrightarrow>\n                           \\<bottom> =\n                           \\<lfloor>\\<lfloor>null \\<tau>\n       \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                              (X \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>)) \\<and>\n                         (X->notEmpty\\<^sub>S\\<^sub>e\\<^sub>t()\n                           \\<tau> \\<noteq>\n                          true \\<tau> \\<longrightarrow>\n                          (\\<upsilon> (\\<lambda>_. null \\<tau>))\n                           \\<tau> \\<noteq>\n                          true \\<tau> \\<longrightarrow>\n                          \\<bottom> =\n                          \\<lfloor>\\<lfloor>null \\<tau>\n      \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                             (X \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>)\n 3. \\<And>\\<tau>.\n       (\\<delta> X) \\<tau> \\<noteq> true \\<tau> \\<Longrightarrow>\n       (if (\\<delta> X) \\<tau> = true \\<tau> \\<and>\n           (\\<upsilon> (\\<lambda>_.\n                           if (\\<upsilon> X) \\<tau> = true \\<tau>\n                           then if (\\<delta> X and\n                                    X->notEmpty\\<^sub>S\\<^sub>e\\<^sub>t())\n                                    \\<tau> =\n                                   true \\<tau>\n                                then SOME y.\n  y \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                           (X \\<tau>)\\<rceil>\\<rceil>\n                                else null \\<tau>\n                           else \\<bottom>))\n            \\<tau> =\n           true \\<tau>\n        then \\<lfloor>\\<lfloor>(if (\\<upsilon> X) \\<tau> = true \\<tau>\n                                then if (\\<delta> X and\n   X->notEmpty\\<^sub>S\\<^sub>e\\<^sub>t())\n   \\<tau> =\n  true \\<tau>\n                                     then SOME y.\n       y \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                (X \\<tau>)\\<rceil>\\<rceil>\n                                     else null \\<tau>\n                                else \\<bottom>)\n                               \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                (X \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>\n        else \\<bottom>) =\n       (if (\\<lambda>_.\n               (\\<delta> X)\n                \\<tau>) then (\\<lambda>_.\n                                 (if \\<delta> X->size\\<^sub>S\\<^sub>e\\<^sub>t() then not\n          X->isEmpty\\<^sub>S\\<^sub>e\\<^sub>t() else (\\<lambda>\\<tau>.\n                  if (\\<delta> X) \\<tau> = true \\<tau> \\<and>\n                     (\\<upsilon> null) \\<tau> = true \\<tau>\n                  then \\<lfloor>\\<lfloor>null \\<tau>\n   \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                          (X \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>\n                  else \\<bottom>) endif)\n                                  \\<tau>) else (\\<lambda>_.\n             invalid \\<tau>) endif)\n        \\<tau>", "apply(subst (asm) cp_OclNot, subst (asm) cp_OclOr, subst (asm) StrictRefEq\\<^sub>I\\<^sub>n\\<^sub>t\\<^sub>e\\<^sub>g\\<^sub>e\\<^sub>r.cp0,\n          subst (asm) cp_OclAnd, subst (asm) cp_OclNot)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>\\<tau>.\n       \\<lbrakk>(\\<delta> X) \\<tau> = true \\<tau>;\n        infinite\n         \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                          (X \\<tau>)\\<rceil>\\<rceil>;\n        (\\<delta> X->size\\<^sub>S\\<^sub>e\\<^sub>t()) \\<tau> = false \\<tau>;\n        not (\\<lambda>_.\n                ((\\<lambda>_.\n                     ((\\<lambda>_. (\\<upsilon> X) \\<tau>) and\n                      (\\<lambda>_.\n                          not (\\<lambda>_. (\\<delta> X) \\<tau>) \\<tau>))\n                      \\<tau>) or\n                 (\\<lambda>_.\n                     ((\\<lambda>_.\n                          X->size\\<^sub>S\\<^sub>e\\<^sub>t() \\<tau>) \\<doteq>\n                      (\\<lambda>_. \\<zero> \\<tau>))\n                      \\<tau>))\n                 \\<tau>)\n         \\<tau> =\n        true \\<tau>;\n        \\<exists>e.\n           e \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                    (X \\<tau>)\\<rceil>\\<rceil>;\n        X->size\\<^sub>S\\<^sub>e\\<^sub>t() \\<tau> = \\<bottom>\\<rbrakk>\n       \\<Longrightarrow> ((\\<upsilon> (\\<lambda>_.\n    SOME y.\n       y \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                (X \\<tau>)\\<rceil>\\<rceil>))\n                           \\<tau> =\n                          true \\<tau> \\<longrightarrow>\n                          ((SOME y.\n                               y \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                  (X \\<tau>)\\<rceil>\\<rceil>)\n                           \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n            (X \\<tau>)\\<rceil>\\<rceil>) =\n                          (null \\<tau>\n                           \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n            (X \\<tau>)\\<rceil>\\<rceil>)) \\<and>\n                         ((\\<upsilon> (\\<lambda>_.\n    SOME y.\n       y \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                (X \\<tau>)\\<rceil>\\<rceil>))\n                           \\<tau> \\<noteq>\n                          true \\<tau> \\<longrightarrow>\n                          \\<bottom> =\n                          \\<lfloor>\\<lfloor>null \\<tau>\n      \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                             (X \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>)\n 2. \\<And>\\<tau>.\n       \\<lbrakk>(\\<delta> X) \\<tau> = true \\<tau>;\n        infinite\n         \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                          (X \\<tau>)\\<rceil>\\<rceil>;\n        (\\<delta> X->size\\<^sub>S\\<^sub>e\\<^sub>t()) \\<tau> = false \\<tau>;\n        X->notEmpty\\<^sub>S\\<^sub>e\\<^sub>t() \\<tau> \\<noteq>\n        true \\<tau>\\<rbrakk>\n       \\<Longrightarrow> (X->notEmpty\\<^sub>S\\<^sub>e\\<^sub>t() \\<tau> =\n                          true \\<tau> \\<longrightarrow>\n                          ((\\<upsilon> (\\<lambda>_.\n     SOME y.\n        y \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                 (X \\<tau>)\\<rceil>\\<rceil>))\n                            \\<tau> =\n                           true \\<tau> \\<longrightarrow>\n                           ((SOME y.\n                                y \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                   (X \\<tau>)\\<rceil>\\<rceil>)\n                            \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n             (X \\<tau>)\\<rceil>\\<rceil>) =\n                           (null \\<tau>\n                            \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n             (X \\<tau>)\\<rceil>\\<rceil>)) \\<and>\n                          ((\\<upsilon> (\\<lambda>_.\n     SOME y.\n        y \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                 (X \\<tau>)\\<rceil>\\<rceil>))\n                            \\<tau> \\<noteq>\n                           true \\<tau> \\<longrightarrow>\n                           \\<bottom> =\n                           \\<lfloor>\\<lfloor>null \\<tau>\n       \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                              (X \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>)) \\<and>\n                         (X->notEmpty\\<^sub>S\\<^sub>e\\<^sub>t()\n                           \\<tau> \\<noteq>\n                          true \\<tau> \\<longrightarrow>\n                          (\\<upsilon> (\\<lambda>_. null \\<tau>))\n                           \\<tau> \\<noteq>\n                          true \\<tau> \\<longrightarrow>\n                          \\<bottom> =\n                          \\<lfloor>\\<lfloor>null \\<tau>\n      \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                             (X \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>)\n 3. \\<And>\\<tau>.\n       (\\<delta> X) \\<tau> \\<noteq> true \\<tau> \\<Longrightarrow>\n       (if (\\<delta> X) \\<tau> = true \\<tau> \\<and>\n           (\\<upsilon> (\\<lambda>_.\n                           if (\\<upsilon> X) \\<tau> = true \\<tau>\n                           then if (\\<delta> X and\n                                    X->notEmpty\\<^sub>S\\<^sub>e\\<^sub>t())\n                                    \\<tau> =\n                                   true \\<tau>\n                                then SOME y.\n  y \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                           (X \\<tau>)\\<rceil>\\<rceil>\n                                else null \\<tau>\n                           else \\<bottom>))\n            \\<tau> =\n           true \\<tau>\n        then \\<lfloor>\\<lfloor>(if (\\<upsilon> X) \\<tau> = true \\<tau>\n                                then if (\\<delta> X and\n   X->notEmpty\\<^sub>S\\<^sub>e\\<^sub>t())\n   \\<tau> =\n  true \\<tau>\n                                     then SOME y.\n       y \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                (X \\<tau>)\\<rceil>\\<rceil>\n                                     else null \\<tau>\n                                else \\<bottom>)\n                               \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                (X \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>\n        else \\<bottom>) =\n       (if (\\<lambda>_.\n               (\\<delta> X)\n                \\<tau>) then (\\<lambda>_.\n                                 (if \\<delta> X->size\\<^sub>S\\<^sub>e\\<^sub>t() then not\n          X->isEmpty\\<^sub>S\\<^sub>e\\<^sub>t() else (\\<lambda>\\<tau>.\n                  if (\\<delta> X) \\<tau> = true \\<tau> \\<and>\n                     (\\<upsilon> null) \\<tau> = true \\<tau>\n                  then \\<lfloor>\\<lfloor>null \\<tau>\n   \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                          (X \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>\n                  else \\<bottom>) endif)\n                                  \\<tau>) else (\\<lambda>_.\n             invalid \\<tau>) endif)\n        \\<tau>", "apply(simp add: OclValid_def foundation20[simplified OclValid_def]\n                    cp_OclNot[symmetric] cp_OclAnd[symmetric] cp_OclOr[symmetric])"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>\\<tau>.\n       \\<lbrakk>(\\<delta> X) \\<tau> = true \\<tau>;\n        infinite\n         \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                          (X \\<tau>)\\<rceil>\\<rceil>;\n        (\\<delta> X->size\\<^sub>S\\<^sub>e\\<^sub>t()) \\<tau> = false \\<tau>;\n        ((\\<lambda>_. \\<bottom>) <> (\\<lambda>_. \\<zero> \\<tau>)) \\<tau> =\n        true \\<tau>;\n        \\<exists>e.\n           e \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                    (X \\<tau>)\\<rceil>\\<rceil>;\n        X->size\\<^sub>S\\<^sub>e\\<^sub>t() \\<tau> = \\<bottom>\\<rbrakk>\n       \\<Longrightarrow> ((\\<upsilon> (\\<lambda>_.\n    SOME y.\n       y \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                (X \\<tau>)\\<rceil>\\<rceil>))\n                           \\<tau> =\n                          true \\<tau> \\<longrightarrow>\n                          ((SOME y.\n                               y \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                  (X \\<tau>)\\<rceil>\\<rceil>)\n                           \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n            (X \\<tau>)\\<rceil>\\<rceil>) =\n                          (null \\<tau>\n                           \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n            (X \\<tau>)\\<rceil>\\<rceil>)) \\<and>\n                         ((\\<upsilon> (\\<lambda>_.\n    SOME y.\n       y \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                (X \\<tau>)\\<rceil>\\<rceil>))\n                           \\<tau> \\<noteq>\n                          true \\<tau> \\<longrightarrow>\n                          \\<bottom> =\n                          \\<lfloor>\\<lfloor>null \\<tau>\n      \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                             (X \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>)\n 2. \\<And>\\<tau>.\n       \\<lbrakk>(\\<delta> X) \\<tau> = true \\<tau>;\n        infinite\n         \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                          (X \\<tau>)\\<rceil>\\<rceil>;\n        (\\<delta> X->size\\<^sub>S\\<^sub>e\\<^sub>t()) \\<tau> = false \\<tau>;\n        X->notEmpty\\<^sub>S\\<^sub>e\\<^sub>t() \\<tau> \\<noteq>\n        true \\<tau>\\<rbrakk>\n       \\<Longrightarrow> (X->notEmpty\\<^sub>S\\<^sub>e\\<^sub>t() \\<tau> =\n                          true \\<tau> \\<longrightarrow>\n                          ((\\<upsilon> (\\<lambda>_.\n     SOME y.\n        y \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                 (X \\<tau>)\\<rceil>\\<rceil>))\n                            \\<tau> =\n                           true \\<tau> \\<longrightarrow>\n                           ((SOME y.\n                                y \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                   (X \\<tau>)\\<rceil>\\<rceil>)\n                            \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n             (X \\<tau>)\\<rceil>\\<rceil>) =\n                           (null \\<tau>\n                            \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n             (X \\<tau>)\\<rceil>\\<rceil>)) \\<and>\n                          ((\\<upsilon> (\\<lambda>_.\n     SOME y.\n        y \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                 (X \\<tau>)\\<rceil>\\<rceil>))\n                            \\<tau> \\<noteq>\n                           true \\<tau> \\<longrightarrow>\n                           \\<bottom> =\n                           \\<lfloor>\\<lfloor>null \\<tau>\n       \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                              (X \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>)) \\<and>\n                         (X->notEmpty\\<^sub>S\\<^sub>e\\<^sub>t()\n                           \\<tau> \\<noteq>\n                          true \\<tau> \\<longrightarrow>\n                          (\\<upsilon> (\\<lambda>_. null \\<tau>))\n                           \\<tau> \\<noteq>\n                          true \\<tau> \\<longrightarrow>\n                          \\<bottom> =\n                          \\<lfloor>\\<lfloor>null \\<tau>\n      \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                             (X \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>)\n 3. \\<And>\\<tau>.\n       (\\<delta> X) \\<tau> \\<noteq> true \\<tau> \\<Longrightarrow>\n       (if (\\<delta> X) \\<tau> = true \\<tau> \\<and>\n           (\\<upsilon> (\\<lambda>_.\n                           if (\\<upsilon> X) \\<tau> = true \\<tau>\n                           then if (\\<delta> X and\n                                    X->notEmpty\\<^sub>S\\<^sub>e\\<^sub>t())\n                                    \\<tau> =\n                                   true \\<tau>\n                                then SOME y.\n  y \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                           (X \\<tau>)\\<rceil>\\<rceil>\n                                else null \\<tau>\n                           else \\<bottom>))\n            \\<tau> =\n           true \\<tau>\n        then \\<lfloor>\\<lfloor>(if (\\<upsilon> X) \\<tau> = true \\<tau>\n                                then if (\\<delta> X and\n   X->notEmpty\\<^sub>S\\<^sub>e\\<^sub>t())\n   \\<tau> =\n  true \\<tau>\n                                     then SOME y.\n       y \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                (X \\<tau>)\\<rceil>\\<rceil>\n                                     else null \\<tau>\n                                else \\<bottom>)\n                               \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                (X \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>\n        else \\<bottom>) =\n       (if (\\<lambda>_.\n               (\\<delta> X)\n                \\<tau>) then (\\<lambda>_.\n                                 (if \\<delta> X->size\\<^sub>S\\<^sub>e\\<^sub>t() then not\n          X->isEmpty\\<^sub>S\\<^sub>e\\<^sub>t() else (\\<lambda>\\<tau>.\n                  if (\\<delta> X) \\<tau> = true \\<tau> \\<and>\n                     (\\<upsilon> null) \\<tau> = true \\<tau>\n                  then \\<lfloor>\\<lfloor>null \\<tau>\n   \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                          (X \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>\n                  else \\<bottom>) endif)\n                                  \\<tau>) else (\\<lambda>_.\n             invalid \\<tau>) endif)\n        \\<tau>", "apply(simp add: OclNot_def StrongEq_def StrictRefEq\\<^sub>I\\<^sub>n\\<^sub>t\\<^sub>e\\<^sub>g\\<^sub>e\\<^sub>r valid_def false_def true_def\n                    bot_option_def bot_fun_def invalid_def)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>\\<tau>.\n       \\<lbrakk>(\\<delta> X) \\<tau> = true \\<tau>;\n        infinite\n         \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                          (X \\<tau>)\\<rceil>\\<rceil>;\n        (\\<delta> X->size\\<^sub>S\\<^sub>e\\<^sub>t()) \\<tau> = false \\<tau>;\n        X->notEmpty\\<^sub>S\\<^sub>e\\<^sub>t() \\<tau> \\<noteq>\n        true \\<tau>\\<rbrakk>\n       \\<Longrightarrow> (X->notEmpty\\<^sub>S\\<^sub>e\\<^sub>t() \\<tau> =\n                          true \\<tau> \\<longrightarrow>\n                          ((\\<upsilon> (\\<lambda>_.\n     SOME y.\n        y \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                 (X \\<tau>)\\<rceil>\\<rceil>))\n                            \\<tau> =\n                           true \\<tau> \\<longrightarrow>\n                           ((SOME y.\n                                y \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                   (X \\<tau>)\\<rceil>\\<rceil>)\n                            \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n             (X \\<tau>)\\<rceil>\\<rceil>) =\n                           (null \\<tau>\n                            \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n             (X \\<tau>)\\<rceil>\\<rceil>)) \\<and>\n                          ((\\<upsilon> (\\<lambda>_.\n     SOME y.\n        y \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                 (X \\<tau>)\\<rceil>\\<rceil>))\n                            \\<tau> \\<noteq>\n                           true \\<tau> \\<longrightarrow>\n                           \\<bottom> =\n                           \\<lfloor>\\<lfloor>null \\<tau>\n       \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                              (X \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>)) \\<and>\n                         (X->notEmpty\\<^sub>S\\<^sub>e\\<^sub>t()\n                           \\<tau> \\<noteq>\n                          true \\<tau> \\<longrightarrow>\n                          (\\<upsilon> (\\<lambda>_. null \\<tau>))\n                           \\<tau> \\<noteq>\n                          true \\<tau> \\<longrightarrow>\n                          \\<bottom> =\n                          \\<lfloor>\\<lfloor>null \\<tau>\n      \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                             (X \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>)\n 2. \\<And>\\<tau>.\n       (\\<delta> X) \\<tau> \\<noteq> true \\<tau> \\<Longrightarrow>\n       (if (\\<delta> X) \\<tau> = true \\<tau> \\<and>\n           (\\<upsilon> (\\<lambda>_.\n                           if (\\<upsilon> X) \\<tau> = true \\<tau>\n                           then if (\\<delta> X and\n                                    X->notEmpty\\<^sub>S\\<^sub>e\\<^sub>t())\n                                    \\<tau> =\n                                   true \\<tau>\n                                then SOME y.\n  y \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                           (X \\<tau>)\\<rceil>\\<rceil>\n                                else null \\<tau>\n                           else \\<bottom>))\n            \\<tau> =\n           true \\<tau>\n        then \\<lfloor>\\<lfloor>(if (\\<upsilon> X) \\<tau> = true \\<tau>\n                                then if (\\<delta> X and\n   X->notEmpty\\<^sub>S\\<^sub>e\\<^sub>t())\n   \\<tau> =\n  true \\<tau>\n                                     then SOME y.\n       y \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                (X \\<tau>)\\<rceil>\\<rceil>\n                                     else null \\<tau>\n                                else \\<bottom>)\n                               \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                (X \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>\n        else \\<bottom>) =\n       (if (\\<lambda>_.\n               (\\<delta> X)\n                \\<tau>) then (\\<lambda>_.\n                                 (if \\<delta> X->size\\<^sub>S\\<^sub>e\\<^sub>t() then not\n          X->isEmpty\\<^sub>S\\<^sub>e\\<^sub>t() else (\\<lambda>\\<tau>.\n                  if (\\<delta> X) \\<tau> = true \\<tau> \\<and>\n                     (\\<upsilon> null) \\<tau> = true \\<tau>\n                  then \\<lfloor>\\<lfloor>null \\<tau>\n   \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                          (X \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>\n                  else \\<bottom>) endif)\n                                  \\<tau>) else (\\<lambda>_.\n             invalid \\<tau>) endif)\n        \\<tau>", "apply (metis bot_fun_def null_fun_def null_is_valid valid_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<tau>.\n       (\\<delta> X) \\<tau> \\<noteq> true \\<tau> \\<Longrightarrow>\n       (if (\\<delta> X) \\<tau> = true \\<tau> \\<and>\n           (\\<upsilon> (\\<lambda>_.\n                           if (\\<upsilon> X) \\<tau> = true \\<tau>\n                           then if (\\<delta> X and\n                                    X->notEmpty\\<^sub>S\\<^sub>e\\<^sub>t())\n                                    \\<tau> =\n                                   true \\<tau>\n                                then SOME y.\n  y \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                           (X \\<tau>)\\<rceil>\\<rceil>\n                                else null \\<tau>\n                           else \\<bottom>))\n            \\<tau> =\n           true \\<tau>\n        then \\<lfloor>\\<lfloor>(if (\\<upsilon> X) \\<tau> = true \\<tau>\n                                then if (\\<delta> X and\n   X->notEmpty\\<^sub>S\\<^sub>e\\<^sub>t())\n   \\<tau> =\n  true \\<tau>\n                                     then SOME y.\n       y \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                (X \\<tau>)\\<rceil>\\<rceil>\n                                     else null \\<tau>\n                                else \\<bottom>)\n                               \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                (X \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>\n        else \\<bottom>) =\n       (if (\\<lambda>_.\n               (\\<delta> X)\n                \\<tau>) then (\\<lambda>_.\n                                 (if \\<delta> X->size\\<^sub>S\\<^sub>e\\<^sub>t() then not\n          X->isEmpty\\<^sub>S\\<^sub>e\\<^sub>t() else (\\<lambda>\\<tau>.\n                  if (\\<delta> X) \\<tau> = true \\<tau> \\<and>\n                     (\\<upsilon> null) \\<tau> = true \\<tau>\n                  then \\<lfloor>\\<lfloor>null \\<tau>\n   \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                          (X \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>\n                  else \\<bottom>) endif)\n                                  \\<tau>) else (\\<lambda>_.\n             invalid \\<tau>) endif)\n        \\<tau>", "by(drule defined_inject_true,\n    simp add: false_def true_def OclIf_false[simplified false_def] invalid_def)"], ["proof (state)\nthis:\n  X->includes\\<^sub>S\\<^sub>e\\<^sub>t(X->any\\<^sub>S\\<^sub>e\\<^sub>t()) =\n  (if \\<delta> X then if \\<delta> X->size\\<^sub>S\\<^sub>e\\<^sub>t() then not\n                                    X->isEmpty\\<^sub>S\\<^sub>e\\<^sub>t() else X->includes\\<^sub>S\\<^sub>e\\<^sub>t(null) endif else invalid endif)\n\ngoal:\nNo subgoals!", "qed"], ["", "text\\<open>OclSize\\<close>"], ["", "lemma [simp,code_unfold]: \"\\<delta> (Set{} ->size\\<^sub>S\\<^sub>e\\<^sub>t()) = true\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<delta> Set{}->size\\<^sub>S\\<^sub>e\\<^sub>t() = true", "by simp"], ["", "lemma [simp,code_unfold]: \"\\<delta> ((X ->including\\<^sub>S\\<^sub>e\\<^sub>t(x)) ->size\\<^sub>S\\<^sub>e\\<^sub>t()) = (\\<delta>(X->size\\<^sub>S\\<^sub>e\\<^sub>t()) and \\<upsilon>(x))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<delta> X->including\\<^sub>S\\<^sub>e\\<^sub>t(x)->size\\<^sub>S\\<^sub>e\\<^sub>t() =\n    (\\<delta> X->size\\<^sub>S\\<^sub>e\\<^sub>t() and \\<upsilon> x)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<delta> X->including\\<^sub>S\\<^sub>e\\<^sub>t(x)->size\\<^sub>S\\<^sub>e\\<^sub>t() =\n    (\\<delta> X->size\\<^sub>S\\<^sub>e\\<^sub>t() and \\<upsilon> x)", "have defined_inject_true : \"\\<And>\\<tau> P. (\\<delta> P) \\<tau> \\<noteq> true \\<tau> \\<Longrightarrow> (\\<delta> P) \\<tau> = false \\<tau>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<tau> P.\n       (\\<delta> P) \\<tau> \\<noteq> true \\<tau> \\<Longrightarrow>\n       (\\<delta> P) \\<tau> = false \\<tau>", "apply(simp add: defined_def true_def false_def bot_fun_def bot_option_def\n                      null_fun_def null_option_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<tau> P.\n       (if P \\<tau> = \\<bottom> \\<or> P \\<tau> = null then false \\<tau>\n        else true \\<tau>) \\<noteq>\n       \\<lfloor>\\<lfloor>True\\<rfloor>\\<rfloor> \\<Longrightarrow>\n       P \\<tau> = \\<bottom> \\<or> P \\<tau> = null", "by (case_tac \" P \\<tau> = \\<bottom> \\<or> P \\<tau> = null\", simp_all add: true_def)"], ["proof (state)\nthis:\n  (\\<delta> ?P) ?\\<tau> \\<noteq> true ?\\<tau> \\<Longrightarrow>\n  (\\<delta> ?P) ?\\<tau> = false ?\\<tau>\n\ngoal (1 subgoal):\n 1. \\<delta> X->including\\<^sub>S\\<^sub>e\\<^sub>t(x)->size\\<^sub>S\\<^sub>e\\<^sub>t() =\n    (\\<delta> X->size\\<^sub>S\\<^sub>e\\<^sub>t() and \\<upsilon> x)", "have valid_inject_true : \"\\<And>\\<tau> P. (\\<upsilon> P) \\<tau> \\<noteq> true \\<tau> \\<Longrightarrow> (\\<upsilon> P) \\<tau> = false \\<tau>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<tau> P.\n       (\\<upsilon> P) \\<tau> \\<noteq> true \\<tau> \\<Longrightarrow>\n       (\\<upsilon> P) \\<tau> = false \\<tau>", "apply(simp add: valid_def true_def false_def bot_fun_def bot_option_def\n                      null_fun_def null_option_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<tau> P.\n       (if P \\<tau> = \\<bottom> then false \\<tau> else true \\<tau>) \\<noteq>\n       \\<lfloor>\\<lfloor>True\\<rfloor>\\<rfloor> \\<Longrightarrow>\n       P \\<tau> = \\<bottom>", "by (case_tac \"P \\<tau> = \\<bottom>\", simp_all add: true_def)"], ["proof (state)\nthis:\n  (\\<upsilon> ?P1) ?\\<tau>1 \\<noteq> true ?\\<tau>1 \\<Longrightarrow>\n  (\\<upsilon> ?P1) ?\\<tau>1 = false ?\\<tau>1\n\ngoal (1 subgoal):\n 1. \\<delta> X->including\\<^sub>S\\<^sub>e\\<^sub>t(x)->size\\<^sub>S\\<^sub>e\\<^sub>t() =\n    (\\<delta> X->size\\<^sub>S\\<^sub>e\\<^sub>t() and \\<upsilon> x)", "have OclIncluding_finite_rep_set : \"\\<And>\\<tau>. (\\<delta> X and \\<upsilon> x) \\<tau> = true \\<tau> \\<Longrightarrow>\n                 finite \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e (X->including\\<^sub>S\\<^sub>e\\<^sub>t(x) \\<tau>)\\<rceil>\\<rceil> = finite \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e (X \\<tau>)\\<rceil>\\<rceil>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<tau>.\n       (\\<delta> X and \\<upsilon> x) \\<tau> = true \\<tau> \\<Longrightarrow>\n       finite\n        \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                         (X->including\\<^sub>S\\<^sub>e\\<^sub>t(x)\n                           \\<tau>)\\<rceil>\\<rceil> =\n       finite\n        \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                         (X \\<tau>)\\<rceil>\\<rceil>", "apply(rule OclIncluding_finite_rep_set)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>\\<tau>.\n       (\\<delta> X and \\<upsilon> x) \\<tau> = true \\<tau> \\<Longrightarrow>\n       \\<tau> \\<Turnstile> \\<delta> X\n 2. \\<And>\\<tau>.\n       (\\<delta> X and \\<upsilon> x) \\<tau> = true \\<tau> \\<Longrightarrow>\n       \\<tau> \\<Turnstile> \\<upsilon> x", "by(metis OclValid_def foundation5)+"], ["proof (state)\nthis:\n  (\\<delta> X and \\<upsilon> x) ?\\<tau>2 = true ?\\<tau>2 \\<Longrightarrow>\n  finite\n   \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                    (X->including\\<^sub>S\\<^sub>e\\<^sub>t(x)\n                      ?\\<tau>2)\\<rceil>\\<rceil> =\n  finite\n   \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                    (X ?\\<tau>2)\\<rceil>\\<rceil>\n\ngoal (1 subgoal):\n 1. \\<delta> X->including\\<^sub>S\\<^sub>e\\<^sub>t(x)->size\\<^sub>S\\<^sub>e\\<^sub>t() =\n    (\\<delta> X->size\\<^sub>S\\<^sub>e\\<^sub>t() and \\<upsilon> x)", "have card_including_exec : \"\\<And>\\<tau>. (\\<delta> (\\<lambda>_. \\<lfloor>\\<lfloor>int (card \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e (X->including\\<^sub>S\\<^sub>e\\<^sub>t(x) \\<tau>)\\<rceil>\\<rceil>)\\<rfloor>\\<rfloor>)) \\<tau> =\n                                 (\\<delta> (\\<lambda>_. \\<lfloor>\\<lfloor>int (card \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e (X \\<tau>)\\<rceil>\\<rceil>)\\<rfloor>\\<rfloor>)) \\<tau>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<tau>.\n       (\\<delta> (\\<lambda>_.\n                     \\<lfloor>\\<lfloor>int\n  (card\n    \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                     (X->including\\<^sub>S\\<^sub>e\\<^sub>t(x)\n                       \\<tau>)\\<rceil>\\<rceil>)\\<rfloor>\\<rfloor>))\n        \\<tau> =\n       (\\<delta> (\\<lambda>_.\n                     \\<lfloor>\\<lfloor>int\n  (card\n    \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                     (X \\<tau>)\\<rceil>\\<rceil>)\\<rfloor>\\<rfloor>))\n        \\<tau>", "by(simp add: defined_def bot_fun_def bot_option_def null_fun_def null_option_def)"], ["proof (state)\nthis:\n  (\\<delta> (\\<lambda>_.\n                \\<lfloor>\\<lfloor>int (card\n  \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                   (X->including\\<^sub>S\\<^sub>e\\<^sub>t(x)\n                     ?\\<tau>2)\\<rceil>\\<rceil>)\\<rfloor>\\<rfloor>))\n   ?\\<tau>2 =\n  (\\<delta> (\\<lambda>_.\n                \\<lfloor>\\<lfloor>int (card\n  \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                   (X ?\\<tau>2)\\<rceil>\\<rceil>)\\<rfloor>\\<rfloor>))\n   ?\\<tau>2\n\ngoal (1 subgoal):\n 1. \\<delta> X->including\\<^sub>S\\<^sub>e\\<^sub>t(x)->size\\<^sub>S\\<^sub>e\\<^sub>t() =\n    (\\<delta> X->size\\<^sub>S\\<^sub>e\\<^sub>t() and \\<upsilon> x)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<delta> X->including\\<^sub>S\\<^sub>e\\<^sub>t(x)->size\\<^sub>S\\<^sub>e\\<^sub>t() =\n    (\\<delta> X->size\\<^sub>S\\<^sub>e\\<^sub>t() and \\<upsilon> x)", "apply(rule ext, rename_tac \\<tau>)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<tau>.\n       (\\<delta> X->including\\<^sub>S\\<^sub>e\\<^sub>t(x)->size\\<^sub>S\\<^sub>e\\<^sub>t())\n        \\<tau> =\n       (\\<delta> X->size\\<^sub>S\\<^sub>e\\<^sub>t() and \\<upsilon> x) \\<tau>", "apply(case_tac \"(\\<delta> (X->including\\<^sub>S\\<^sub>e\\<^sub>t(x)->size\\<^sub>S\\<^sub>e\\<^sub>t())) \\<tau> = true \\<tau>\", simp del: OclSize_including_exec)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>\\<tau>.\n       (\\<delta> X->including\\<^sub>S\\<^sub>e\\<^sub>t(x)->size\\<^sub>S\\<^sub>e\\<^sub>t())\n        \\<tau> =\n       true \\<tau> \\<Longrightarrow>\n       true \\<tau> =\n       (\\<delta> X->size\\<^sub>S\\<^sub>e\\<^sub>t() and \\<upsilon> x) \\<tau>\n 2. \\<And>\\<tau>.\n       (\\<delta> X->including\\<^sub>S\\<^sub>e\\<^sub>t(x)->size\\<^sub>S\\<^sub>e\\<^sub>t())\n        \\<tau> \\<noteq>\n       true \\<tau> \\<Longrightarrow>\n       (\\<delta> X->including\\<^sub>S\\<^sub>e\\<^sub>t(x)->size\\<^sub>S\\<^sub>e\\<^sub>t())\n        \\<tau> =\n       (\\<delta> X->size\\<^sub>S\\<^sub>e\\<^sub>t() and \\<upsilon> x) \\<tau>", "apply(subst cp_OclAnd, subst cp_defined, simp only: cp_defined[of \"X->including\\<^sub>S\\<^sub>e\\<^sub>t(x)->size\\<^sub>S\\<^sub>e\\<^sub>t()\"],\n         simp add: OclSize_def)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>\\<tau>.\n       (\\<delta> (\\<lambda>_.\n                     if (\\<delta> X and \\<upsilon> x) \\<tau> =\n                        true \\<tau> \\<and>\n                        finite\n                         \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n    (X->including\\<^sub>S\\<^sub>e\\<^sub>t(x) \\<tau>)\\<rceil>\\<rceil>\n                     then \\<lfloor>\\<lfloor>int\n       (card\n         \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                          (X->including\\<^sub>S\\<^sub>e\\<^sub>t(x)\n                            \\<tau>)\\<rceil>\\<rceil>)\\<rfloor>\\<rfloor>\n                     else \\<bottom>))\n        \\<tau> =\n       true \\<tau> \\<Longrightarrow>\n       ((\\<delta> X) \\<tau> = true \\<tau> \\<and>\n        finite\n         \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                          (X \\<tau>)\\<rceil>\\<rceil> \\<longrightarrow>\n        true \\<tau> =\n        ((\\<lambda>_. true \\<tau>) and (\\<lambda>_. (\\<upsilon> x) \\<tau>))\n         \\<tau>) \\<and>\n       (((\\<delta> X) \\<tau> = true \\<tau> \\<longrightarrow>\n         infinite\n          \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                           (X \\<tau>)\\<rceil>\\<rceil>) \\<longrightarrow>\n        true \\<tau> =\n        ((\\<lambda>_. (\\<delta> (\\<lambda>_. \\<bottom>)) \\<tau>) and\n         (\\<lambda>_. (\\<upsilon> x) \\<tau>))\n         \\<tau>)\n 2. \\<And>\\<tau>.\n       (\\<delta> X->including\\<^sub>S\\<^sub>e\\<^sub>t(x)->size\\<^sub>S\\<^sub>e\\<^sub>t())\n        \\<tau> \\<noteq>\n       true \\<tau> \\<Longrightarrow>\n       (\\<delta> X->including\\<^sub>S\\<^sub>e\\<^sub>t(x)->size\\<^sub>S\\<^sub>e\\<^sub>t())\n        \\<tau> =\n       (\\<delta> X->size\\<^sub>S\\<^sub>e\\<^sub>t() and \\<upsilon> x) \\<tau>", "apply(case_tac \"((\\<delta> X and \\<upsilon> x) \\<tau> = true \\<tau> \\<and> finite \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e (X->including\\<^sub>S\\<^sub>e\\<^sub>t(x) \\<tau>)\\<rceil>\\<rceil>)\", simp)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>\\<tau>.\n       (\\<delta> X and \\<upsilon> x) \\<tau> = true \\<tau> \\<and>\n       finite\n        \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                         (X->including\\<^sub>S\\<^sub>e\\<^sub>t(x)\n                           \\<tau>)\\<rceil>\\<rceil> \\<Longrightarrow>\n       ((\\<delta> X) \\<tau> = true \\<tau> \\<and>\n        finite\n         \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                          (X \\<tau>)\\<rceil>\\<rceil> \\<longrightarrow>\n        true \\<tau> =\n        ((\\<lambda>_. true \\<tau>) and (\\<lambda>_. (\\<upsilon> x) \\<tau>))\n         \\<tau>) \\<and>\n       (((\\<delta> X) \\<tau> = true \\<tau> \\<longrightarrow>\n         infinite\n          \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                           (X \\<tau>)\\<rceil>\\<rceil>) \\<longrightarrow>\n        true \\<tau> =\n        ((\\<lambda>_. (\\<delta> (\\<lambda>_. \\<bottom>)) \\<tau>) and\n         (\\<lambda>_. (\\<upsilon> x) \\<tau>))\n         \\<tau>)\n 2. \\<And>\\<tau>.\n       \\<lbrakk>(\\<delta> (\\<lambda>_.\n                              if (\\<delta> X and \\<upsilon> x) \\<tau> =\n                                 true \\<tau> \\<and>\n                                 finite\n                                  \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n             (X->including\\<^sub>S\\<^sub>e\\<^sub>t(x)\n               \\<tau>)\\<rceil>\\<rceil>\n                              then \\<lfloor>\\<lfloor>int\n                (card\n                  \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                   (X->including\\<^sub>S\\<^sub>e\\<^sub>t(x)\n                                     \\<tau>)\\<rceil>\\<rceil>)\\<rfloor>\\<rfloor>\n                              else \\<bottom>))\n                 \\<tau> =\n                true \\<tau>;\n        \\<not> ((\\<delta> X and \\<upsilon> x) \\<tau> = true \\<tau> \\<and>\n                finite\n                 \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                  (X->including\\<^sub>S\\<^sub>e\\<^sub>t(x)\n                                    \\<tau>)\\<rceil>\\<rceil>)\\<rbrakk>\n       \\<Longrightarrow> ((\\<delta> X) \\<tau> = true \\<tau> \\<and>\n                          finite\n                           \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n      (X \\<tau>)\\<rceil>\\<rceil> \\<longrightarrow>\n                          true \\<tau> =\n                          ((\\<lambda>_. true \\<tau>) and\n                           (\\<lambda>_. (\\<upsilon> x) \\<tau>))\n                           \\<tau>) \\<and>\n                         (((\\<delta> X) \\<tau> =\n                           true \\<tau> \\<longrightarrow>\n                           infinite\n                            \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n       (X \\<tau>)\\<rceil>\\<rceil>) \\<longrightarrow>\n                          true \\<tau> =\n                          ((\\<lambda>_.\n                               (\\<delta> (\\<lambda>_. \\<bottom>))\n                                \\<tau>) and\n                           (\\<lambda>_. (\\<upsilon> x) \\<tau>))\n                           \\<tau>)\n 3. \\<And>\\<tau>.\n       (\\<delta> X->including\\<^sub>S\\<^sub>e\\<^sub>t(x)->size\\<^sub>S\\<^sub>e\\<^sub>t())\n        \\<tau> \\<noteq>\n       true \\<tau> \\<Longrightarrow>\n       (\\<delta> X->including\\<^sub>S\\<^sub>e\\<^sub>t(x)->size\\<^sub>S\\<^sub>e\\<^sub>t())\n        \\<tau> =\n       (\\<delta> X->size\\<^sub>S\\<^sub>e\\<^sub>t() and \\<upsilon> x) \\<tau>", "apply(erule conjE,\n          simp add: OclIncluding_finite_rep_set[simplified OclValid_def] card_including_exec\n                    cp_OclAnd[of \"\\<delta> X\" \"\\<upsilon> x\"]\n                    cp_OclAnd[of \"true\", THEN sym])"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>\\<tau>.\n       \\<lbrakk>((\\<lambda>_. (\\<delta> X) \\<tau>) and\n                 (\\<lambda>_. (\\<upsilon> x) \\<tau>))\n                 \\<tau> =\n                true \\<tau>;\n        finite\n         \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                          (X \\<tau>)\\<rceil>\\<rceil>\\<rbrakk>\n       \\<Longrightarrow> ((\\<delta> X) \\<tau> =\n                          true \\<tau> \\<longrightarrow>\n                          true \\<tau> = (\\<upsilon> x) \\<tau>) \\<and>\n                         ((\\<delta> X) \\<tau> \\<noteq>\n                          true \\<tau> \\<longrightarrow>\n                          true \\<tau> =\n                          ((\\<lambda>_.\n                               (\\<delta> (\\<lambda>_. \\<bottom>))\n                                \\<tau>) and\n                           (\\<lambda>_. (\\<upsilon> x) \\<tau>))\n                           \\<tau>)\n 2. \\<And>\\<tau>.\n       \\<lbrakk>(\\<delta> (\\<lambda>_.\n                              if (\\<delta> X and \\<upsilon> x) \\<tau> =\n                                 true \\<tau> \\<and>\n                                 finite\n                                  \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n             (X->including\\<^sub>S\\<^sub>e\\<^sub>t(x)\n               \\<tau>)\\<rceil>\\<rceil>\n                              then \\<lfloor>\\<lfloor>int\n                (card\n                  \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                   (X->including\\<^sub>S\\<^sub>e\\<^sub>t(x)\n                                     \\<tau>)\\<rceil>\\<rceil>)\\<rfloor>\\<rfloor>\n                              else \\<bottom>))\n                 \\<tau> =\n                true \\<tau>;\n        \\<not> ((\\<delta> X and \\<upsilon> x) \\<tau> = true \\<tau> \\<and>\n                finite\n                 \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                  (X->including\\<^sub>S\\<^sub>e\\<^sub>t(x)\n                                    \\<tau>)\\<rceil>\\<rceil>)\\<rbrakk>\n       \\<Longrightarrow> ((\\<delta> X) \\<tau> = true \\<tau> \\<and>\n                          finite\n                           \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n      (X \\<tau>)\\<rceil>\\<rceil> \\<longrightarrow>\n                          true \\<tau> =\n                          ((\\<lambda>_. true \\<tau>) and\n                           (\\<lambda>_. (\\<upsilon> x) \\<tau>))\n                           \\<tau>) \\<and>\n                         (((\\<delta> X) \\<tau> =\n                           true \\<tau> \\<longrightarrow>\n                           infinite\n                            \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n       (X \\<tau>)\\<rceil>\\<rceil>) \\<longrightarrow>\n                          true \\<tau> =\n                          ((\\<lambda>_.\n                               (\\<delta> (\\<lambda>_. \\<bottom>))\n                                \\<tau>) and\n                           (\\<lambda>_. (\\<upsilon> x) \\<tau>))\n                           \\<tau>)\n 3. \\<And>\\<tau>.\n       (\\<delta> X->including\\<^sub>S\\<^sub>e\\<^sub>t(x)->size\\<^sub>S\\<^sub>e\\<^sub>t())\n        \\<tau> \\<noteq>\n       true \\<tau> \\<Longrightarrow>\n       (\\<delta> X->including\\<^sub>S\\<^sub>e\\<^sub>t(x)->size\\<^sub>S\\<^sub>e\\<^sub>t())\n        \\<tau> =\n       (\\<delta> X->size\\<^sub>S\\<^sub>e\\<^sub>t() and \\<upsilon> x) \\<tau>", "apply(subgoal_tac \"(\\<delta> X) \\<tau> = true \\<tau> \\<and> (\\<upsilon> x) \\<tau> = true \\<tau>\", simp)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>\\<tau>.\n       \\<lbrakk>((\\<lambda>_. (\\<delta> X) \\<tau>) and\n                 (\\<lambda>_. (\\<upsilon> x) \\<tau>))\n                 \\<tau> =\n                true \\<tau>;\n        finite\n         \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                          (X \\<tau>)\\<rceil>\\<rceil>\\<rbrakk>\n       \\<Longrightarrow> (\\<delta> X) \\<tau> = true \\<tau> \\<and>\n                         (\\<upsilon> x) \\<tau> = true \\<tau>\n 2. \\<And>\\<tau>.\n       \\<lbrakk>(\\<delta> (\\<lambda>_.\n                              if (\\<delta> X and \\<upsilon> x) \\<tau> =\n                                 true \\<tau> \\<and>\n                                 finite\n                                  \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n             (X->including\\<^sub>S\\<^sub>e\\<^sub>t(x)\n               \\<tau>)\\<rceil>\\<rceil>\n                              then \\<lfloor>\\<lfloor>int\n                (card\n                  \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                   (X->including\\<^sub>S\\<^sub>e\\<^sub>t(x)\n                                     \\<tau>)\\<rceil>\\<rceil>)\\<rfloor>\\<rfloor>\n                              else \\<bottom>))\n                 \\<tau> =\n                true \\<tau>;\n        \\<not> ((\\<delta> X and \\<upsilon> x) \\<tau> = true \\<tau> \\<and>\n                finite\n                 \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                  (X->including\\<^sub>S\\<^sub>e\\<^sub>t(x)\n                                    \\<tau>)\\<rceil>\\<rceil>)\\<rbrakk>\n       \\<Longrightarrow> ((\\<delta> X) \\<tau> = true \\<tau> \\<and>\n                          finite\n                           \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n      (X \\<tau>)\\<rceil>\\<rceil> \\<longrightarrow>\n                          true \\<tau> =\n                          ((\\<lambda>_. true \\<tau>) and\n                           (\\<lambda>_. (\\<upsilon> x) \\<tau>))\n                           \\<tau>) \\<and>\n                         (((\\<delta> X) \\<tau> =\n                           true \\<tau> \\<longrightarrow>\n                           infinite\n                            \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n       (X \\<tau>)\\<rceil>\\<rceil>) \\<longrightarrow>\n                          true \\<tau> =\n                          ((\\<lambda>_.\n                               (\\<delta> (\\<lambda>_. \\<bottom>))\n                                \\<tau>) and\n                           (\\<lambda>_. (\\<upsilon> x) \\<tau>))\n                           \\<tau>)\n 3. \\<And>\\<tau>.\n       (\\<delta> X->including\\<^sub>S\\<^sub>e\\<^sub>t(x)->size\\<^sub>S\\<^sub>e\\<^sub>t())\n        \\<tau> \\<noteq>\n       true \\<tau> \\<Longrightarrow>\n       (\\<delta> X->including\\<^sub>S\\<^sub>e\\<^sub>t(x)->size\\<^sub>S\\<^sub>e\\<^sub>t())\n        \\<tau> =\n       (\\<delta> X->size\\<^sub>S\\<^sub>e\\<^sub>t() and \\<upsilon> x) \\<tau>", "apply(rule foundation5[of _ \"\\<delta> X\" \"\\<upsilon> x\", simplified OclValid_def],\n          simp only: cp_OclAnd[THEN sym])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>\\<tau>.\n       \\<lbrakk>(\\<delta> (\\<lambda>_.\n                              if (\\<delta> X and \\<upsilon> x) \\<tau> =\n                                 true \\<tau> \\<and>\n                                 finite\n                                  \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n             (X->including\\<^sub>S\\<^sub>e\\<^sub>t(x)\n               \\<tau>)\\<rceil>\\<rceil>\n                              then \\<lfloor>\\<lfloor>int\n                (card\n                  \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                   (X->including\\<^sub>S\\<^sub>e\\<^sub>t(x)\n                                     \\<tau>)\\<rceil>\\<rceil>)\\<rfloor>\\<rfloor>\n                              else \\<bottom>))\n                 \\<tau> =\n                true \\<tau>;\n        \\<not> ((\\<delta> X and \\<upsilon> x) \\<tau> = true \\<tau> \\<and>\n                finite\n                 \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                  (X->including\\<^sub>S\\<^sub>e\\<^sub>t(x)\n                                    \\<tau>)\\<rceil>\\<rceil>)\\<rbrakk>\n       \\<Longrightarrow> ((\\<delta> X) \\<tau> = true \\<tau> \\<and>\n                          finite\n                           \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n      (X \\<tau>)\\<rceil>\\<rceil> \\<longrightarrow>\n                          true \\<tau> =\n                          ((\\<lambda>_. true \\<tau>) and\n                           (\\<lambda>_. (\\<upsilon> x) \\<tau>))\n                           \\<tau>) \\<and>\n                         (((\\<delta> X) \\<tau> =\n                           true \\<tau> \\<longrightarrow>\n                           infinite\n                            \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n       (X \\<tau>)\\<rceil>\\<rceil>) \\<longrightarrow>\n                          true \\<tau> =\n                          ((\\<lambda>_.\n                               (\\<delta> (\\<lambda>_. \\<bottom>))\n                                \\<tau>) and\n                           (\\<lambda>_. (\\<upsilon> x) \\<tau>))\n                           \\<tau>)\n 2. \\<And>\\<tau>.\n       (\\<delta> X->including\\<^sub>S\\<^sub>e\\<^sub>t(x)->size\\<^sub>S\\<^sub>e\\<^sub>t())\n        \\<tau> \\<noteq>\n       true \\<tau> \\<Longrightarrow>\n       (\\<delta> X->including\\<^sub>S\\<^sub>e\\<^sub>t(x)->size\\<^sub>S\\<^sub>e\\<^sub>t())\n        \\<tau> =\n       (\\<delta> X->size\\<^sub>S\\<^sub>e\\<^sub>t() and \\<upsilon> x) \\<tau>", "apply(simp, simp add: defined_def true_def false_def bot_fun_def bot_option_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<tau>.\n       (\\<delta> X->including\\<^sub>S\\<^sub>e\\<^sub>t(x)->size\\<^sub>S\\<^sub>e\\<^sub>t())\n        \\<tau> \\<noteq>\n       true \\<tau> \\<Longrightarrow>\n       (\\<delta> X->including\\<^sub>S\\<^sub>e\\<^sub>t(x)->size\\<^sub>S\\<^sub>e\\<^sub>t())\n        \\<tau> =\n       (\\<delta> X->size\\<^sub>S\\<^sub>e\\<^sub>t() and \\<upsilon> x) \\<tau>", "apply(drule defined_inject_true[of \"X->including\\<^sub>S\\<^sub>e\\<^sub>t(x)->size\\<^sub>S\\<^sub>e\\<^sub>t()\"],\n        simp del: OclSize_including_exec,\n        simp only: cp_OclAnd[of \"\\<delta> (X->size\\<^sub>S\\<^sub>e\\<^sub>t())\" \"\\<upsilon> x\"],\n        simp add: cp_defined[of \"X->including\\<^sub>S\\<^sub>e\\<^sub>t(x)->size\\<^sub>S\\<^sub>e\\<^sub>t()\" ] cp_defined[of \"X->size\\<^sub>S\\<^sub>e\\<^sub>t()\" ]\n             del: OclSize_including_exec,\n        simp add: OclSize_def card_including_exec\n             del: OclSize_including_exec)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<tau>.\n       (\\<delta> (\\<lambda>_.\n                     if (\\<delta> X and \\<upsilon> x) \\<tau> =\n                        true \\<tau> \\<and>\n                        finite\n                         \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n    (X->including\\<^sub>S\\<^sub>e\\<^sub>t(x) \\<tau>)\\<rceil>\\<rceil>\n                     then \\<lfloor>\\<lfloor>int\n       (card\n         \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                          (X->including\\<^sub>S\\<^sub>e\\<^sub>t(x)\n                            \\<tau>)\\<rceil>\\<rceil>)\\<rfloor>\\<rfloor>\n                     else \\<bottom>))\n        \\<tau> =\n       false \\<tau> \\<Longrightarrow>\n       ((\\<delta> X) \\<tau> = true \\<tau> \\<and>\n        finite\n         \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                          (X \\<tau>)\\<rceil>\\<rceil> \\<longrightarrow>\n        false \\<tau> =\n        ((\\<lambda>_. true \\<tau>) and (\\<lambda>_. (\\<upsilon> x) \\<tau>))\n         \\<tau>) \\<and>\n       (((\\<delta> X) \\<tau> = true \\<tau> \\<longrightarrow>\n         infinite\n          \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                           (X \\<tau>)\\<rceil>\\<rceil>) \\<longrightarrow>\n        false \\<tau> =\n        ((\\<lambda>_. (\\<delta> (\\<lambda>_. \\<bottom>)) \\<tau>) and\n         (\\<lambda>_. (\\<upsilon> x) \\<tau>))\n         \\<tau>)", "apply(case_tac \"(\\<delta> X and \\<upsilon> x) \\<tau> = true \\<tau> \\<and> finite \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e (X \\<tau>)\\<rceil>\\<rceil>\",\n        simp add: OclIncluding_finite_rep_set[simplified OclValid_def] card_including_exec,\n        simp only: cp_OclAnd[THEN sym],\n        simp add: defined_def bot_fun_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<tau>.\n       \\<lbrakk>(\\<delta> (\\<lambda>_.\n                              if (\\<delta> X and \\<upsilon> x) \\<tau> =\n                                 true \\<tau> \\<and>\n                                 finite\n                                  \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n             (X->including\\<^sub>S\\<^sub>e\\<^sub>t(x)\n               \\<tau>)\\<rceil>\\<rceil>\n                              then \\<lfloor>\\<lfloor>int\n                (card\n                  \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                   (X->including\\<^sub>S\\<^sub>e\\<^sub>t(x)\n                                     \\<tau>)\\<rceil>\\<rceil>)\\<rfloor>\\<rfloor>\n                              else \\<bottom>))\n                 \\<tau> =\n                false \\<tau>;\n        \\<not> ((\\<delta> X and \\<upsilon> x) \\<tau> = true \\<tau> \\<and>\n                finite\n                 \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                  (X \\<tau>)\\<rceil>\\<rceil>)\\<rbrakk>\n       \\<Longrightarrow> ((\\<delta> X) \\<tau> = true \\<tau> \\<and>\n                          finite\n                           \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n      (X \\<tau>)\\<rceil>\\<rceil> \\<longrightarrow>\n                          false \\<tau> =\n                          ((\\<lambda>_. true \\<tau>) and\n                           (\\<lambda>_. (\\<upsilon> x) \\<tau>))\n                           \\<tau>) \\<and>\n                         (((\\<delta> X) \\<tau> =\n                           true \\<tau> \\<longrightarrow>\n                           infinite\n                            \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n       (X \\<tau>)\\<rceil>\\<rceil>) \\<longrightarrow>\n                          false \\<tau> =\n                          ((\\<lambda>_.\n                               (\\<delta> (\\<lambda>_. \\<bottom>))\n                                \\<tau>) and\n                           (\\<lambda>_. (\\<upsilon> x) \\<tau>))\n                           \\<tau>)", "apply(split if_split_asm)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>\\<tau>.\n       \\<lbrakk>\\<not> ((\\<delta> X and \\<upsilon> x) \\<tau> =\n                        true \\<tau> \\<and>\n                        finite\n                         \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n    (X \\<tau>)\\<rceil>\\<rceil>);\n        (\\<delta> X and \\<upsilon> x) \\<tau> = true \\<tau>;\n        finite\n         \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                          (X->including\\<^sub>S\\<^sub>e\\<^sub>t(x)\n                            \\<tau>)\\<rceil>\\<rceil>;\n        (\\<delta> (\\<lambda>_.\n                      \\<lfloor>\\<lfloor>int\n   (card\n     \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                      (X->including\\<^sub>S\\<^sub>e\\<^sub>t(x)\n                        \\<tau>)\\<rceil>\\<rceil>)\\<rfloor>\\<rfloor>))\n         \\<tau> =\n        false \\<tau>\\<rbrakk>\n       \\<Longrightarrow> ((\\<delta> X) \\<tau> = true \\<tau> \\<and>\n                          finite\n                           \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n      (X \\<tau>)\\<rceil>\\<rceil> \\<longrightarrow>\n                          false \\<tau> =\n                          ((\\<lambda>_. true \\<tau>) and\n                           (\\<lambda>_. (\\<upsilon> x) \\<tau>))\n                           \\<tau>) \\<and>\n                         (((\\<delta> X) \\<tau> =\n                           true \\<tau> \\<longrightarrow>\n                           infinite\n                            \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n       (X \\<tau>)\\<rceil>\\<rceil>) \\<longrightarrow>\n                          false \\<tau> =\n                          ((\\<lambda>_.\n                               (\\<delta> (\\<lambda>_. \\<bottom>))\n                                \\<tau>) and\n                           (\\<lambda>_. (\\<upsilon> x) \\<tau>))\n                           \\<tau>)\n 2. \\<And>\\<tau>.\n       \\<lbrakk>\\<not> ((\\<delta> X and \\<upsilon> x) \\<tau> =\n                        true \\<tau> \\<and>\n                        finite\n                         \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n    (X \\<tau>)\\<rceil>\\<rceil>);\n        \\<not> ((\\<delta> X and \\<upsilon> x) \\<tau> = true \\<tau> \\<and>\n                finite\n                 \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                  (X->including\\<^sub>S\\<^sub>e\\<^sub>t(x)\n                                    \\<tau>)\\<rceil>\\<rceil>);\n        (\\<delta> (\\<lambda>_. \\<bottom>)) \\<tau> = false \\<tau>\\<rbrakk>\n       \\<Longrightarrow> ((\\<delta> X) \\<tau> = true \\<tau> \\<and>\n                          finite\n                           \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n      (X \\<tau>)\\<rceil>\\<rceil> \\<longrightarrow>\n                          false \\<tau> =\n                          ((\\<lambda>_. true \\<tau>) and\n                           (\\<lambda>_. (\\<upsilon> x) \\<tau>))\n                           \\<tau>) \\<and>\n                         (((\\<delta> X) \\<tau> =\n                           true \\<tau> \\<longrightarrow>\n                           infinite\n                            \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n       (X \\<tau>)\\<rceil>\\<rceil>) \\<longrightarrow>\n                          false \\<tau> =\n                          ((\\<lambda>_.\n                               (\\<delta> (\\<lambda>_. \\<bottom>))\n                                \\<tau>) and\n                           (\\<lambda>_. (\\<upsilon> x) \\<tau>))\n                           \\<tau>)", "apply(simp add: OclIncluding_finite_rep_set[simplified OclValid_def] card_including_exec)+"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<tau>.\n       \\<lbrakk>(\\<delta> X and \\<upsilon> x) \\<tau> =\n                true \\<tau> \\<longrightarrow>\n                infinite\n                 \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                  (X \\<tau>)\\<rceil>\\<rceil>;\n        (\\<delta> (\\<lambda>_. \\<bottom>)) \\<tau> = false \\<tau>\\<rbrakk>\n       \\<Longrightarrow> ((\\<delta> X) \\<tau> = true \\<tau> \\<and>\n                          finite\n                           \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n      (X \\<tau>)\\<rceil>\\<rceil> \\<longrightarrow>\n                          false \\<tau> =\n                          ((\\<lambda>_. true \\<tau>) and\n                           (\\<lambda>_. (\\<upsilon> x) \\<tau>))\n                           \\<tau>) \\<and>\n                         (((\\<delta> X) \\<tau> =\n                           true \\<tau> \\<longrightarrow>\n                           infinite\n                            \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n       (X \\<tau>)\\<rceil>\\<rceil>) \\<longrightarrow>\n                          false \\<tau> =\n                          ((\\<lambda>_. false \\<tau>) and\n                           (\\<lambda>_. (\\<upsilon> x) \\<tau>))\n                           \\<tau>)", "apply(simp only: cp_OclAnd[THEN sym], simp, rule impI, erule conjE)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<tau>.\n       \\<lbrakk>(\\<delta> X and \\<upsilon> x) \\<tau> =\n                true \\<tau> \\<longrightarrow>\n                infinite\n                 \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                  (X \\<tau>)\\<rceil>\\<rceil>;\n        (\\<delta> (\\<lambda>_. \\<bottom>)) \\<tau> = false \\<tau>;\n        (\\<delta> X) \\<tau> = true \\<tau>;\n        finite\n         \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                          (X \\<tau>)\\<rceil>\\<rceil>\\<rbrakk>\n       \\<Longrightarrow> false \\<tau> = (\\<upsilon> x) \\<tau>", "apply(case_tac \"(\\<upsilon> x) \\<tau> = true \\<tau>\", simp add: cp_OclAnd[of \"\\<delta> X\" \"\\<upsilon> x\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<tau>.\n       \\<lbrakk>(\\<delta> X and \\<upsilon> x) \\<tau> =\n                true \\<tau> \\<longrightarrow>\n                infinite\n                 \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                  (X \\<tau>)\\<rceil>\\<rceil>;\n        (\\<delta> (\\<lambda>_. \\<bottom>)) \\<tau> = false \\<tau>;\n        (\\<delta> X) \\<tau> = true \\<tau>;\n        finite\n         \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                          (X \\<tau>)\\<rceil>\\<rceil>;\n        (\\<upsilon> x) \\<tau> \\<noteq> true \\<tau>\\<rbrakk>\n       \\<Longrightarrow> false \\<tau> = (\\<upsilon> x) \\<tau>", "by(drule valid_inject_true[of \"x\"], simp add: cp_OclAnd[of _ \"\\<upsilon> x\"])"], ["proof (state)\nthis:\n  \\<delta> X->including\\<^sub>S\\<^sub>e\\<^sub>t(x)->size\\<^sub>S\\<^sub>e\\<^sub>t() =\n  (\\<delta> X->size\\<^sub>S\\<^sub>e\\<^sub>t() and \\<upsilon> x)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma [simp,code_unfold]: \"\\<delta> ((X ->excluding\\<^sub>S\\<^sub>e\\<^sub>t(x)) ->size\\<^sub>S\\<^sub>e\\<^sub>t()) = (\\<delta>(X->size\\<^sub>S\\<^sub>e\\<^sub>t()) and \\<upsilon>(x))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<delta> X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(x)->size\\<^sub>S\\<^sub>e\\<^sub>t() =\n    (\\<delta> X->size\\<^sub>S\\<^sub>e\\<^sub>t() and \\<upsilon> x)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<delta> X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(x)->size\\<^sub>S\\<^sub>e\\<^sub>t() =\n    (\\<delta> X->size\\<^sub>S\\<^sub>e\\<^sub>t() and \\<upsilon> x)", "have defined_inject_true : \"\\<And>\\<tau> P. (\\<delta> P) \\<tau> \\<noteq> true \\<tau> \\<Longrightarrow> (\\<delta> P) \\<tau> = false \\<tau>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<tau> P.\n       (\\<delta> P) \\<tau> \\<noteq> true \\<tau> \\<Longrightarrow>\n       (\\<delta> P) \\<tau> = false \\<tau>", "apply(simp add: defined_def true_def false_def bot_fun_def bot_option_def\n                      null_fun_def null_option_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<tau> P.\n       (if P \\<tau> = \\<bottom> \\<or> P \\<tau> = null then false \\<tau>\n        else true \\<tau>) \\<noteq>\n       \\<lfloor>\\<lfloor>True\\<rfloor>\\<rfloor> \\<Longrightarrow>\n       P \\<tau> = \\<bottom> \\<or> P \\<tau> = null", "by (case_tac \" P \\<tau> = \\<bottom> \\<or> P \\<tau> = null\", simp_all add: true_def)"], ["proof (state)\nthis:\n  (\\<delta> ?P) ?\\<tau> \\<noteq> true ?\\<tau> \\<Longrightarrow>\n  (\\<delta> ?P) ?\\<tau> = false ?\\<tau>\n\ngoal (1 subgoal):\n 1. \\<delta> X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(x)->size\\<^sub>S\\<^sub>e\\<^sub>t() =\n    (\\<delta> X->size\\<^sub>S\\<^sub>e\\<^sub>t() and \\<upsilon> x)", "have valid_inject_true : \"\\<And>\\<tau> P. (\\<upsilon> P) \\<tau> \\<noteq> true \\<tau> \\<Longrightarrow> (\\<upsilon> P) \\<tau> = false \\<tau>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<tau> P.\n       (\\<upsilon> P) \\<tau> \\<noteq> true \\<tau> \\<Longrightarrow>\n       (\\<upsilon> P) \\<tau> = false \\<tau>", "apply(simp add: valid_def true_def false_def bot_fun_def bot_option_def\n                      null_fun_def null_option_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<tau> P.\n       (if P \\<tau> = \\<bottom> then false \\<tau> else true \\<tau>) \\<noteq>\n       \\<lfloor>\\<lfloor>True\\<rfloor>\\<rfloor> \\<Longrightarrow>\n       P \\<tau> = \\<bottom>", "by (case_tac \"P \\<tau> = \\<bottom>\", simp_all add: true_def)"], ["proof (state)\nthis:\n  (\\<upsilon> ?P1) ?\\<tau>1 \\<noteq> true ?\\<tau>1 \\<Longrightarrow>\n  (\\<upsilon> ?P1) ?\\<tau>1 = false ?\\<tau>1\n\ngoal (1 subgoal):\n 1. \\<delta> X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(x)->size\\<^sub>S\\<^sub>e\\<^sub>t() =\n    (\\<delta> X->size\\<^sub>S\\<^sub>e\\<^sub>t() and \\<upsilon> x)", "have OclExcluding_finite_rep_set : \"\\<And>\\<tau>. (\\<delta> X and \\<upsilon> x) \\<tau> = true \\<tau> \\<Longrightarrow>\n                                     finite \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e (X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(x) \\<tau>)\\<rceil>\\<rceil> =\n                                     finite \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e (X \\<tau>)\\<rceil>\\<rceil>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<tau>.\n       (\\<delta> X and \\<upsilon> x) \\<tau> = true \\<tau> \\<Longrightarrow>\n       finite\n        \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                         (X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(x)\n                           \\<tau>)\\<rceil>\\<rceil> =\n       finite\n        \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                         (X \\<tau>)\\<rceil>\\<rceil>", "apply(rule OclExcluding_finite_rep_set)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>\\<tau>.\n       (\\<delta> X and \\<upsilon> x) \\<tau> = true \\<tau> \\<Longrightarrow>\n       \\<tau> \\<Turnstile> \\<delta> X\n 2. \\<And>\\<tau>.\n       (\\<delta> X and \\<upsilon> x) \\<tau> = true \\<tau> \\<Longrightarrow>\n       \\<tau> \\<Turnstile> \\<upsilon> x", "by(metis OclValid_def foundation5)+"], ["proof (state)\nthis:\n  (\\<delta> X and \\<upsilon> x) ?\\<tau>2 = true ?\\<tau>2 \\<Longrightarrow>\n  finite\n   \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                    (X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(x)\n                      ?\\<tau>2)\\<rceil>\\<rceil> =\n  finite\n   \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                    (X ?\\<tau>2)\\<rceil>\\<rceil>\n\ngoal (1 subgoal):\n 1. \\<delta> X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(x)->size\\<^sub>S\\<^sub>e\\<^sub>t() =\n    (\\<delta> X->size\\<^sub>S\\<^sub>e\\<^sub>t() and \\<upsilon> x)", "have card_excluding_exec : \"\\<And>\\<tau>. (\\<delta> (\\<lambda>_. \\<lfloor>\\<lfloor>int (card \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e (X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(x) \\<tau>)\\<rceil>\\<rceil>)\\<rfloor>\\<rfloor>)) \\<tau> =\n                                   (\\<delta> (\\<lambda>_. \\<lfloor>\\<lfloor>int (card \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e (X \\<tau>)\\<rceil>\\<rceil>)\\<rfloor>\\<rfloor>)) \\<tau>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<tau>.\n       (\\<delta> (\\<lambda>_.\n                     \\<lfloor>\\<lfloor>int\n  (card\n    \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                     (X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(x)\n                       \\<tau>)\\<rceil>\\<rceil>)\\<rfloor>\\<rfloor>))\n        \\<tau> =\n       (\\<delta> (\\<lambda>_.\n                     \\<lfloor>\\<lfloor>int\n  (card\n    \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                     (X \\<tau>)\\<rceil>\\<rceil>)\\<rfloor>\\<rfloor>))\n        \\<tau>", "by(simp add: defined_def bot_fun_def bot_option_def null_fun_def null_option_def)"], ["proof (state)\nthis:\n  (\\<delta> (\\<lambda>_.\n                \\<lfloor>\\<lfloor>int (card\n  \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                   (X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(x)\n                     ?\\<tau>2)\\<rceil>\\<rceil>)\\<rfloor>\\<rfloor>))\n   ?\\<tau>2 =\n  (\\<delta> (\\<lambda>_.\n                \\<lfloor>\\<lfloor>int (card\n  \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                   (X ?\\<tau>2)\\<rceil>\\<rceil>)\\<rfloor>\\<rfloor>))\n   ?\\<tau>2\n\ngoal (1 subgoal):\n 1. \\<delta> X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(x)->size\\<^sub>S\\<^sub>e\\<^sub>t() =\n    (\\<delta> X->size\\<^sub>S\\<^sub>e\\<^sub>t() and \\<upsilon> x)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<delta> X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(x)->size\\<^sub>S\\<^sub>e\\<^sub>t() =\n    (\\<delta> X->size\\<^sub>S\\<^sub>e\\<^sub>t() and \\<upsilon> x)", "apply(rule ext, rename_tac \\<tau>)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<tau>.\n       (\\<delta> X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(x)->size\\<^sub>S\\<^sub>e\\<^sub>t())\n        \\<tau> =\n       (\\<delta> X->size\\<^sub>S\\<^sub>e\\<^sub>t() and \\<upsilon> x) \\<tau>", "apply(case_tac \"(\\<delta> (X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(x)->size\\<^sub>S\\<^sub>e\\<^sub>t())) \\<tau> = true \\<tau>\", simp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>\\<tau>.\n       (\\<delta> X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(x)->size\\<^sub>S\\<^sub>e\\<^sub>t())\n        \\<tau> =\n       true \\<tau> \\<Longrightarrow>\n       true \\<tau> =\n       (\\<delta> X->size\\<^sub>S\\<^sub>e\\<^sub>t() and \\<upsilon> x) \\<tau>\n 2. \\<And>\\<tau>.\n       (\\<delta> X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(x)->size\\<^sub>S\\<^sub>e\\<^sub>t())\n        \\<tau> \\<noteq>\n       true \\<tau> \\<Longrightarrow>\n       (\\<delta> X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(x)->size\\<^sub>S\\<^sub>e\\<^sub>t())\n        \\<tau> =\n       (\\<delta> X->size\\<^sub>S\\<^sub>e\\<^sub>t() and \\<upsilon> x) \\<tau>", "apply(subst cp_OclAnd, subst cp_defined, simp only: cp_defined[of \"X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(x)->size\\<^sub>S\\<^sub>e\\<^sub>t()\"],\n         simp add: OclSize_def)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>\\<tau>.\n       (\\<delta> (\\<lambda>_.\n                     if (\\<delta> X and \\<upsilon> x) \\<tau> =\n                        true \\<tau> \\<and>\n                        finite\n                         \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n    (X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(x) \\<tau>)\\<rceil>\\<rceil>\n                     then \\<lfloor>\\<lfloor>int\n       (card\n         \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                          (X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(x)\n                            \\<tau>)\\<rceil>\\<rceil>)\\<rfloor>\\<rfloor>\n                     else \\<bottom>))\n        \\<tau> =\n       true \\<tau> \\<Longrightarrow>\n       ((\\<delta> X) \\<tau> = true \\<tau> \\<and>\n        finite\n         \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                          (X \\<tau>)\\<rceil>\\<rceil> \\<longrightarrow>\n        true \\<tau> =\n        ((\\<lambda>_. true \\<tau>) and (\\<lambda>_. (\\<upsilon> x) \\<tau>))\n         \\<tau>) \\<and>\n       (((\\<delta> X) \\<tau> = true \\<tau> \\<longrightarrow>\n         infinite\n          \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                           (X \\<tau>)\\<rceil>\\<rceil>) \\<longrightarrow>\n        true \\<tau> =\n        ((\\<lambda>_. (\\<delta> (\\<lambda>_. \\<bottom>)) \\<tau>) and\n         (\\<lambda>_. (\\<upsilon> x) \\<tau>))\n         \\<tau>)\n 2. \\<And>\\<tau>.\n       (\\<delta> X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(x)->size\\<^sub>S\\<^sub>e\\<^sub>t())\n        \\<tau> \\<noteq>\n       true \\<tau> \\<Longrightarrow>\n       (\\<delta> X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(x)->size\\<^sub>S\\<^sub>e\\<^sub>t())\n        \\<tau> =\n       (\\<delta> X->size\\<^sub>S\\<^sub>e\\<^sub>t() and \\<upsilon> x) \\<tau>", "apply(case_tac \"((\\<delta> X and \\<upsilon> x) \\<tau> = true \\<tau> \\<and> finite \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e (X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(x) \\<tau>)\\<rceil>\\<rceil>)\", simp)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>\\<tau>.\n       (\\<delta> X and \\<upsilon> x) \\<tau> = true \\<tau> \\<and>\n       finite\n        \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                         (X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(x)\n                           \\<tau>)\\<rceil>\\<rceil> \\<Longrightarrow>\n       ((\\<delta> X) \\<tau> = true \\<tau> \\<and>\n        finite\n         \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                          (X \\<tau>)\\<rceil>\\<rceil> \\<longrightarrow>\n        true \\<tau> =\n        ((\\<lambda>_. true \\<tau>) and (\\<lambda>_. (\\<upsilon> x) \\<tau>))\n         \\<tau>) \\<and>\n       (((\\<delta> X) \\<tau> = true \\<tau> \\<longrightarrow>\n         infinite\n          \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                           (X \\<tau>)\\<rceil>\\<rceil>) \\<longrightarrow>\n        true \\<tau> =\n        ((\\<lambda>_. (\\<delta> (\\<lambda>_. \\<bottom>)) \\<tau>) and\n         (\\<lambda>_. (\\<upsilon> x) \\<tau>))\n         \\<tau>)\n 2. \\<And>\\<tau>.\n       \\<lbrakk>(\\<delta> (\\<lambda>_.\n                              if (\\<delta> X and \\<upsilon> x) \\<tau> =\n                                 true \\<tau> \\<and>\n                                 finite\n                                  \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n             (X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(x)\n               \\<tau>)\\<rceil>\\<rceil>\n                              then \\<lfloor>\\<lfloor>int\n                (card\n                  \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                   (X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(x)\n                                     \\<tau>)\\<rceil>\\<rceil>)\\<rfloor>\\<rfloor>\n                              else \\<bottom>))\n                 \\<tau> =\n                true \\<tau>;\n        \\<not> ((\\<delta> X and \\<upsilon> x) \\<tau> = true \\<tau> \\<and>\n                finite\n                 \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                  (X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(x)\n                                    \\<tau>)\\<rceil>\\<rceil>)\\<rbrakk>\n       \\<Longrightarrow> ((\\<delta> X) \\<tau> = true \\<tau> \\<and>\n                          finite\n                           \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n      (X \\<tau>)\\<rceil>\\<rceil> \\<longrightarrow>\n                          true \\<tau> =\n                          ((\\<lambda>_. true \\<tau>) and\n                           (\\<lambda>_. (\\<upsilon> x) \\<tau>))\n                           \\<tau>) \\<and>\n                         (((\\<delta> X) \\<tau> =\n                           true \\<tau> \\<longrightarrow>\n                           infinite\n                            \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n       (X \\<tau>)\\<rceil>\\<rceil>) \\<longrightarrow>\n                          true \\<tau> =\n                          ((\\<lambda>_.\n                               (\\<delta> (\\<lambda>_. \\<bottom>))\n                                \\<tau>) and\n                           (\\<lambda>_. (\\<upsilon> x) \\<tau>))\n                           \\<tau>)\n 3. \\<And>\\<tau>.\n       (\\<delta> X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(x)->size\\<^sub>S\\<^sub>e\\<^sub>t())\n        \\<tau> \\<noteq>\n       true \\<tau> \\<Longrightarrow>\n       (\\<delta> X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(x)->size\\<^sub>S\\<^sub>e\\<^sub>t())\n        \\<tau> =\n       (\\<delta> X->size\\<^sub>S\\<^sub>e\\<^sub>t() and \\<upsilon> x) \\<tau>", "apply(erule conjE,\n          simp add: OclExcluding_finite_rep_set[simplified OclValid_def] card_excluding_exec\n                    cp_OclAnd[of \"\\<delta> X\" \"\\<upsilon> x\"]\n                    cp_OclAnd[of \"true\", THEN sym])"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>\\<tau>.\n       \\<lbrakk>((\\<lambda>_. (\\<delta> X) \\<tau>) and\n                 (\\<lambda>_. (\\<upsilon> x) \\<tau>))\n                 \\<tau> =\n                true \\<tau>;\n        finite\n         \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                          (X \\<tau>)\\<rceil>\\<rceil>\\<rbrakk>\n       \\<Longrightarrow> ((\\<delta> X) \\<tau> =\n                          true \\<tau> \\<longrightarrow>\n                          true \\<tau> = (\\<upsilon> x) \\<tau>) \\<and>\n                         ((\\<delta> X) \\<tau> \\<noteq>\n                          true \\<tau> \\<longrightarrow>\n                          true \\<tau> =\n                          ((\\<lambda>_.\n                               (\\<delta> (\\<lambda>_. \\<bottom>))\n                                \\<tau>) and\n                           (\\<lambda>_. (\\<upsilon> x) \\<tau>))\n                           \\<tau>)\n 2. \\<And>\\<tau>.\n       \\<lbrakk>(\\<delta> (\\<lambda>_.\n                              if (\\<delta> X and \\<upsilon> x) \\<tau> =\n                                 true \\<tau> \\<and>\n                                 finite\n                                  \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n             (X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(x)\n               \\<tau>)\\<rceil>\\<rceil>\n                              then \\<lfloor>\\<lfloor>int\n                (card\n                  \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                   (X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(x)\n                                     \\<tau>)\\<rceil>\\<rceil>)\\<rfloor>\\<rfloor>\n                              else \\<bottom>))\n                 \\<tau> =\n                true \\<tau>;\n        \\<not> ((\\<delta> X and \\<upsilon> x) \\<tau> = true \\<tau> \\<and>\n                finite\n                 \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                  (X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(x)\n                                    \\<tau>)\\<rceil>\\<rceil>)\\<rbrakk>\n       \\<Longrightarrow> ((\\<delta> X) \\<tau> = true \\<tau> \\<and>\n                          finite\n                           \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n      (X \\<tau>)\\<rceil>\\<rceil> \\<longrightarrow>\n                          true \\<tau> =\n                          ((\\<lambda>_. true \\<tau>) and\n                           (\\<lambda>_. (\\<upsilon> x) \\<tau>))\n                           \\<tau>) \\<and>\n                         (((\\<delta> X) \\<tau> =\n                           true \\<tau> \\<longrightarrow>\n                           infinite\n                            \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n       (X \\<tau>)\\<rceil>\\<rceil>) \\<longrightarrow>\n                          true \\<tau> =\n                          ((\\<lambda>_.\n                               (\\<delta> (\\<lambda>_. \\<bottom>))\n                                \\<tau>) and\n                           (\\<lambda>_. (\\<upsilon> x) \\<tau>))\n                           \\<tau>)\n 3. \\<And>\\<tau>.\n       (\\<delta> X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(x)->size\\<^sub>S\\<^sub>e\\<^sub>t())\n        \\<tau> \\<noteq>\n       true \\<tau> \\<Longrightarrow>\n       (\\<delta> X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(x)->size\\<^sub>S\\<^sub>e\\<^sub>t())\n        \\<tau> =\n       (\\<delta> X->size\\<^sub>S\\<^sub>e\\<^sub>t() and \\<upsilon> x) \\<tau>", "apply(subgoal_tac \"(\\<delta> X) \\<tau> = true \\<tau> \\<and> (\\<upsilon> x) \\<tau> = true \\<tau>\", simp)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>\\<tau>.\n       \\<lbrakk>((\\<lambda>_. (\\<delta> X) \\<tau>) and\n                 (\\<lambda>_. (\\<upsilon> x) \\<tau>))\n                 \\<tau> =\n                true \\<tau>;\n        finite\n         \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                          (X \\<tau>)\\<rceil>\\<rceil>\\<rbrakk>\n       \\<Longrightarrow> (\\<delta> X) \\<tau> = true \\<tau> \\<and>\n                         (\\<upsilon> x) \\<tau> = true \\<tau>\n 2. \\<And>\\<tau>.\n       \\<lbrakk>(\\<delta> (\\<lambda>_.\n                              if (\\<delta> X and \\<upsilon> x) \\<tau> =\n                                 true \\<tau> \\<and>\n                                 finite\n                                  \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n             (X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(x)\n               \\<tau>)\\<rceil>\\<rceil>\n                              then \\<lfloor>\\<lfloor>int\n                (card\n                  \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                   (X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(x)\n                                     \\<tau>)\\<rceil>\\<rceil>)\\<rfloor>\\<rfloor>\n                              else \\<bottom>))\n                 \\<tau> =\n                true \\<tau>;\n        \\<not> ((\\<delta> X and \\<upsilon> x) \\<tau> = true \\<tau> \\<and>\n                finite\n                 \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                  (X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(x)\n                                    \\<tau>)\\<rceil>\\<rceil>)\\<rbrakk>\n       \\<Longrightarrow> ((\\<delta> X) \\<tau> = true \\<tau> \\<and>\n                          finite\n                           \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n      (X \\<tau>)\\<rceil>\\<rceil> \\<longrightarrow>\n                          true \\<tau> =\n                          ((\\<lambda>_. true \\<tau>) and\n                           (\\<lambda>_. (\\<upsilon> x) \\<tau>))\n                           \\<tau>) \\<and>\n                         (((\\<delta> X) \\<tau> =\n                           true \\<tau> \\<longrightarrow>\n                           infinite\n                            \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n       (X \\<tau>)\\<rceil>\\<rceil>) \\<longrightarrow>\n                          true \\<tau> =\n                          ((\\<lambda>_.\n                               (\\<delta> (\\<lambda>_. \\<bottom>))\n                                \\<tau>) and\n                           (\\<lambda>_. (\\<upsilon> x) \\<tau>))\n                           \\<tau>)\n 3. \\<And>\\<tau>.\n       (\\<delta> X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(x)->size\\<^sub>S\\<^sub>e\\<^sub>t())\n        \\<tau> \\<noteq>\n       true \\<tau> \\<Longrightarrow>\n       (\\<delta> X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(x)->size\\<^sub>S\\<^sub>e\\<^sub>t())\n        \\<tau> =\n       (\\<delta> X->size\\<^sub>S\\<^sub>e\\<^sub>t() and \\<upsilon> x) \\<tau>", "apply(rule foundation5[of _ \"\\<delta> X\" \"\\<upsilon> x\", simplified OclValid_def],\n          simp only: cp_OclAnd[THEN sym])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>\\<tau>.\n       \\<lbrakk>(\\<delta> (\\<lambda>_.\n                              if (\\<delta> X and \\<upsilon> x) \\<tau> =\n                                 true \\<tau> \\<and>\n                                 finite\n                                  \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n             (X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(x)\n               \\<tau>)\\<rceil>\\<rceil>\n                              then \\<lfloor>\\<lfloor>int\n                (card\n                  \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                   (X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(x)\n                                     \\<tau>)\\<rceil>\\<rceil>)\\<rfloor>\\<rfloor>\n                              else \\<bottom>))\n                 \\<tau> =\n                true \\<tau>;\n        \\<not> ((\\<delta> X and \\<upsilon> x) \\<tau> = true \\<tau> \\<and>\n                finite\n                 \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                  (X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(x)\n                                    \\<tau>)\\<rceil>\\<rceil>)\\<rbrakk>\n       \\<Longrightarrow> ((\\<delta> X) \\<tau> = true \\<tau> \\<and>\n                          finite\n                           \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n      (X \\<tau>)\\<rceil>\\<rceil> \\<longrightarrow>\n                          true \\<tau> =\n                          ((\\<lambda>_. true \\<tau>) and\n                           (\\<lambda>_. (\\<upsilon> x) \\<tau>))\n                           \\<tau>) \\<and>\n                         (((\\<delta> X) \\<tau> =\n                           true \\<tau> \\<longrightarrow>\n                           infinite\n                            \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n       (X \\<tau>)\\<rceil>\\<rceil>) \\<longrightarrow>\n                          true \\<tau> =\n                          ((\\<lambda>_.\n                               (\\<delta> (\\<lambda>_. \\<bottom>))\n                                \\<tau>) and\n                           (\\<lambda>_. (\\<upsilon> x) \\<tau>))\n                           \\<tau>)\n 2. \\<And>\\<tau>.\n       (\\<delta> X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(x)->size\\<^sub>S\\<^sub>e\\<^sub>t())\n        \\<tau> \\<noteq>\n       true \\<tau> \\<Longrightarrow>\n       (\\<delta> X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(x)->size\\<^sub>S\\<^sub>e\\<^sub>t())\n        \\<tau> =\n       (\\<delta> X->size\\<^sub>S\\<^sub>e\\<^sub>t() and \\<upsilon> x) \\<tau>", "apply(simp, simp add: defined_def true_def false_def bot_fun_def bot_option_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<tau>.\n       (\\<delta> X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(x)->size\\<^sub>S\\<^sub>e\\<^sub>t())\n        \\<tau> \\<noteq>\n       true \\<tau> \\<Longrightarrow>\n       (\\<delta> X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(x)->size\\<^sub>S\\<^sub>e\\<^sub>t())\n        \\<tau> =\n       (\\<delta> X->size\\<^sub>S\\<^sub>e\\<^sub>t() and \\<upsilon> x) \\<tau>", "apply(drule defined_inject_true[of \"X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(x)->size\\<^sub>S\\<^sub>e\\<^sub>t()\"],\n        simp,\n        simp only: cp_OclAnd[of \"\\<delta> (X->size\\<^sub>S\\<^sub>e\\<^sub>t())\" \"\\<upsilon> x\"],\n        simp add: cp_defined[of \"X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(x)->size\\<^sub>S\\<^sub>e\\<^sub>t()\" ] cp_defined[of \"X->size\\<^sub>S\\<^sub>e\\<^sub>t()\" ],\n        simp add: OclSize_def card_excluding_exec)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<tau>.\n       (\\<delta> (\\<lambda>_.\n                     if (\\<delta> X and \\<upsilon> x) \\<tau> =\n                        true \\<tau> \\<and>\n                        finite\n                         \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n    (X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(x) \\<tau>)\\<rceil>\\<rceil>\n                     then \\<lfloor>\\<lfloor>int\n       (card\n         \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                          (X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(x)\n                            \\<tau>)\\<rceil>\\<rceil>)\\<rfloor>\\<rfloor>\n                     else \\<bottom>))\n        \\<tau> =\n       false \\<tau> \\<Longrightarrow>\n       ((\\<delta> X) \\<tau> = true \\<tau> \\<and>\n        finite\n         \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                          (X \\<tau>)\\<rceil>\\<rceil> \\<longrightarrow>\n        false \\<tau> =\n        ((\\<lambda>_. true \\<tau>) and (\\<lambda>_. (\\<upsilon> x) \\<tau>))\n         \\<tau>) \\<and>\n       (((\\<delta> X) \\<tau> = true \\<tau> \\<longrightarrow>\n         infinite\n          \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                           (X \\<tau>)\\<rceil>\\<rceil>) \\<longrightarrow>\n        false \\<tau> =\n        ((\\<lambda>_. (\\<delta> (\\<lambda>_. \\<bottom>)) \\<tau>) and\n         (\\<lambda>_. (\\<upsilon> x) \\<tau>))\n         \\<tau>)", "apply(case_tac \"(\\<delta> X and \\<upsilon> x) \\<tau> = true \\<tau> \\<and> finite \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e (X \\<tau>)\\<rceil>\\<rceil>\",\n        simp add: OclExcluding_finite_rep_set[simplified OclValid_def] card_excluding_exec,\n        simp only: cp_OclAnd[THEN sym],\n        simp add: defined_def bot_fun_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<tau>.\n       \\<lbrakk>(\\<delta> (\\<lambda>_.\n                              if (\\<delta> X and \\<upsilon> x) \\<tau> =\n                                 true \\<tau> \\<and>\n                                 finite\n                                  \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n             (X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(x)\n               \\<tau>)\\<rceil>\\<rceil>\n                              then \\<lfloor>\\<lfloor>int\n                (card\n                  \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                   (X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(x)\n                                     \\<tau>)\\<rceil>\\<rceil>)\\<rfloor>\\<rfloor>\n                              else \\<bottom>))\n                 \\<tau> =\n                false \\<tau>;\n        \\<not> ((\\<delta> X and \\<upsilon> x) \\<tau> = true \\<tau> \\<and>\n                finite\n                 \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                  (X \\<tau>)\\<rceil>\\<rceil>)\\<rbrakk>\n       \\<Longrightarrow> ((\\<delta> X) \\<tau> = true \\<tau> \\<and>\n                          finite\n                           \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n      (X \\<tau>)\\<rceil>\\<rceil> \\<longrightarrow>\n                          false \\<tau> =\n                          ((\\<lambda>_. true \\<tau>) and\n                           (\\<lambda>_. (\\<upsilon> x) \\<tau>))\n                           \\<tau>) \\<and>\n                         (((\\<delta> X) \\<tau> =\n                           true \\<tau> \\<longrightarrow>\n                           infinite\n                            \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n       (X \\<tau>)\\<rceil>\\<rceil>) \\<longrightarrow>\n                          false \\<tau> =\n                          ((\\<lambda>_.\n                               (\\<delta> (\\<lambda>_. \\<bottom>))\n                                \\<tau>) and\n                           (\\<lambda>_. (\\<upsilon> x) \\<tau>))\n                           \\<tau>)", "apply(split if_split_asm)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>\\<tau>.\n       \\<lbrakk>\\<not> ((\\<delta> X and \\<upsilon> x) \\<tau> =\n                        true \\<tau> \\<and>\n                        finite\n                         \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n    (X \\<tau>)\\<rceil>\\<rceil>);\n        (\\<delta> X and \\<upsilon> x) \\<tau> = true \\<tau>;\n        finite\n         \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                          (X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(x)\n                            \\<tau>)\\<rceil>\\<rceil>;\n        (\\<delta> (\\<lambda>_.\n                      \\<lfloor>\\<lfloor>int\n   (card\n     \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                      (X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(x)\n                        \\<tau>)\\<rceil>\\<rceil>)\\<rfloor>\\<rfloor>))\n         \\<tau> =\n        false \\<tau>\\<rbrakk>\n       \\<Longrightarrow> ((\\<delta> X) \\<tau> = true \\<tau> \\<and>\n                          finite\n                           \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n      (X \\<tau>)\\<rceil>\\<rceil> \\<longrightarrow>\n                          false \\<tau> =\n                          ((\\<lambda>_. true \\<tau>) and\n                           (\\<lambda>_. (\\<upsilon> x) \\<tau>))\n                           \\<tau>) \\<and>\n                         (((\\<delta> X) \\<tau> =\n                           true \\<tau> \\<longrightarrow>\n                           infinite\n                            \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n       (X \\<tau>)\\<rceil>\\<rceil>) \\<longrightarrow>\n                          false \\<tau> =\n                          ((\\<lambda>_.\n                               (\\<delta> (\\<lambda>_. \\<bottom>))\n                                \\<tau>) and\n                           (\\<lambda>_. (\\<upsilon> x) \\<tau>))\n                           \\<tau>)\n 2. \\<And>\\<tau>.\n       \\<lbrakk>\\<not> ((\\<delta> X and \\<upsilon> x) \\<tau> =\n                        true \\<tau> \\<and>\n                        finite\n                         \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n    (X \\<tau>)\\<rceil>\\<rceil>);\n        \\<not> ((\\<delta> X and \\<upsilon> x) \\<tau> = true \\<tau> \\<and>\n                finite\n                 \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                  (X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(x)\n                                    \\<tau>)\\<rceil>\\<rceil>);\n        (\\<delta> (\\<lambda>_. \\<bottom>)) \\<tau> = false \\<tau>\\<rbrakk>\n       \\<Longrightarrow> ((\\<delta> X) \\<tau> = true \\<tau> \\<and>\n                          finite\n                           \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n      (X \\<tau>)\\<rceil>\\<rceil> \\<longrightarrow>\n                          false \\<tau> =\n                          ((\\<lambda>_. true \\<tau>) and\n                           (\\<lambda>_. (\\<upsilon> x) \\<tau>))\n                           \\<tau>) \\<and>\n                         (((\\<delta> X) \\<tau> =\n                           true \\<tau> \\<longrightarrow>\n                           infinite\n                            \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n       (X \\<tau>)\\<rceil>\\<rceil>) \\<longrightarrow>\n                          false \\<tau> =\n                          ((\\<lambda>_.\n                               (\\<delta> (\\<lambda>_. \\<bottom>))\n                                \\<tau>) and\n                           (\\<lambda>_. (\\<upsilon> x) \\<tau>))\n                           \\<tau>)", "apply(simp add: OclExcluding_finite_rep_set[simplified OclValid_def] card_excluding_exec)+"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<tau>.\n       \\<lbrakk>(\\<delta> X and \\<upsilon> x) \\<tau> =\n                true \\<tau> \\<longrightarrow>\n                infinite\n                 \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                  (X \\<tau>)\\<rceil>\\<rceil>;\n        (\\<delta> (\\<lambda>_. \\<bottom>)) \\<tau> = false \\<tau>\\<rbrakk>\n       \\<Longrightarrow> ((\\<delta> X) \\<tau> = true \\<tau> \\<and>\n                          finite\n                           \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n      (X \\<tau>)\\<rceil>\\<rceil> \\<longrightarrow>\n                          false \\<tau> =\n                          ((\\<lambda>_. true \\<tau>) and\n                           (\\<lambda>_. (\\<upsilon> x) \\<tau>))\n                           \\<tau>) \\<and>\n                         (((\\<delta> X) \\<tau> =\n                           true \\<tau> \\<longrightarrow>\n                           infinite\n                            \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n       (X \\<tau>)\\<rceil>\\<rceil>) \\<longrightarrow>\n                          false \\<tau> =\n                          ((\\<lambda>_. false \\<tau>) and\n                           (\\<lambda>_. (\\<upsilon> x) \\<tau>))\n                           \\<tau>)", "apply(simp only: cp_OclAnd[THEN sym], simp, rule impI, erule conjE)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<tau>.\n       \\<lbrakk>(\\<delta> X and \\<upsilon> x) \\<tau> =\n                true \\<tau> \\<longrightarrow>\n                infinite\n                 \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                  (X \\<tau>)\\<rceil>\\<rceil>;\n        (\\<delta> (\\<lambda>_. \\<bottom>)) \\<tau> = false \\<tau>;\n        (\\<delta> X) \\<tau> = true \\<tau>;\n        finite\n         \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                          (X \\<tau>)\\<rceil>\\<rceil>\\<rbrakk>\n       \\<Longrightarrow> false \\<tau> = (\\<upsilon> x) \\<tau>", "apply(case_tac \"(\\<upsilon> x) \\<tau> = true \\<tau>\", simp add: cp_OclAnd[of \"\\<delta> X\" \"\\<upsilon> x\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<tau>.\n       \\<lbrakk>(\\<delta> X and \\<upsilon> x) \\<tau> =\n                true \\<tau> \\<longrightarrow>\n                infinite\n                 \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                  (X \\<tau>)\\<rceil>\\<rceil>;\n        (\\<delta> (\\<lambda>_. \\<bottom>)) \\<tau> = false \\<tau>;\n        (\\<delta> X) \\<tau> = true \\<tau>;\n        finite\n         \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                          (X \\<tau>)\\<rceil>\\<rceil>;\n        (\\<upsilon> x) \\<tau> \\<noteq> true \\<tau>\\<rbrakk>\n       \\<Longrightarrow> false \\<tau> = (\\<upsilon> x) \\<tau>", "by(drule valid_inject_true[of \"x\"], simp add: cp_OclAnd[of _ \"\\<upsilon> x\"])"], ["proof (state)\nthis:\n  \\<delta> X->excluding\\<^sub>S\\<^sub>e\\<^sub>t(x)->size\\<^sub>S\\<^sub>e\\<^sub>t() =\n  (\\<delta> X->size\\<^sub>S\\<^sub>e\\<^sub>t() and \\<upsilon> x)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma [simp]:\n assumes X_finite: \"\\<And>\\<tau>. finite \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e (X \\<tau>)\\<rceil>\\<rceil>\"\n shows \"\\<delta> ((X ->including\\<^sub>S\\<^sub>e\\<^sub>t(x)) ->size\\<^sub>S\\<^sub>e\\<^sub>t()) = (\\<delta>(X) and \\<upsilon>(x))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<delta> X->including\\<^sub>S\\<^sub>e\\<^sub>t(x)->size\\<^sub>S\\<^sub>e\\<^sub>t() =\n    (\\<delta> X and \\<upsilon> x)", "by(simp add: size_defined[OF X_finite] del: OclSize_including_exec)"], ["", "text\\<open>OclForall\\<close>"], ["", "lemma OclForall_rep_set_false:\n assumes \"\\<tau> \\<Turnstile> \\<delta> X\"\n shows \"(OclForall X P \\<tau> = false \\<tau>) = (\\<exists>x \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e (X \\<tau>)\\<rceil>\\<rceil>. P (\\<lambda>\\<tau>. x) \\<tau> = false \\<tau>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (OclForall X P \\<tau> = false \\<tau>) =\n    (\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                     (X \\<tau>)\\<rceil>\\<rceil>.\n        P (\\<lambda>\\<tau>. x) \\<tau> = false \\<tau>)", "by(insert assms, simp add: OclForall_def OclValid_def false_def true_def invalid_def\n                           bot_fun_def bot_option_def null_fun_def null_option_def)"], ["", "lemma OclForall_rep_set_true:\n assumes \"\\<tau> \\<Turnstile> \\<delta> X\"\n shows \"(\\<tau> \\<Turnstile> OclForall X P) = (\\<forall>x \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e (X \\<tau>)\\<rceil>\\<rceil>. \\<tau> \\<Turnstile> P (\\<lambda>\\<tau>. x))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<tau> \\<Turnstile> OclForall X P) =\n    (\\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                     (X \\<tau>)\\<rceil>\\<rceil>.\n        \\<tau> \\<Turnstile> P (\\<lambda>\\<tau>. x))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<tau> \\<Turnstile> OclForall X P) =\n    (\\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                     (X \\<tau>)\\<rceil>\\<rceil>.\n        \\<tau> \\<Turnstile> P (\\<lambda>\\<tau>. x))", "have destruct_ocl : \"\\<And>x \\<tau>. x = true \\<tau> \\<or> x = false \\<tau> \\<or> x = null \\<tau> \\<or> x = \\<bottom> \\<tau>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x \\<tau>.\n       x = true \\<tau> \\<or>\n       x = false \\<tau> \\<or> x = null \\<tau> \\<or> x = \\<bottom> \\<tau>", "apply(case_tac x)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x \\<tau>.\n       x = None \\<Longrightarrow>\n       x = true \\<tau> \\<or>\n       x = false \\<tau> \\<or> x = null \\<tau> \\<or> x = \\<bottom> \\<tau>\n 2. \\<And>x \\<tau> a.\n       x = \\<lfloor>a\\<rfloor> \\<Longrightarrow>\n       x = true \\<tau> \\<or>\n       x = false \\<tau> \\<or> x = null \\<tau> \\<or> x = \\<bottom> \\<tau>", "apply (metis bot_Boolean_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x \\<tau> a.\n       x = \\<lfloor>a\\<rfloor> \\<Longrightarrow>\n       x = true \\<tau> \\<or>\n       x = false \\<tau> \\<or> x = null \\<tau> \\<or> x = \\<bottom> \\<tau>", "apply(rename_tac x', case_tac x')"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x \\<tau> x'.\n       \\<lbrakk>x = \\<lfloor>x'\\<rfloor>; x' = None\\<rbrakk>\n       \\<Longrightarrow> x = true \\<tau> \\<or>\n                         x = false \\<tau> \\<or>\n                         x = null \\<tau> \\<or> x = \\<bottom> \\<tau>\n 2. \\<And>x \\<tau> x' a.\n       \\<lbrakk>x = \\<lfloor>x'\\<rfloor>; x' = \\<lfloor>a\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> x = true \\<tau> \\<or>\n                         x = false \\<tau> \\<or>\n                         x = null \\<tau> \\<or> x = \\<bottom> \\<tau>", "apply (metis null_Boolean_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x \\<tau> x' a.\n       \\<lbrakk>x = \\<lfloor>x'\\<rfloor>; x' = \\<lfloor>a\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> x = true \\<tau> \\<or>\n                         x = false \\<tau> \\<or>\n                         x = null \\<tau> \\<or> x = \\<bottom> \\<tau>", "apply(rename_tac x'', case_tac x'')"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x \\<tau> x' x''.\n       \\<lbrakk>x = \\<lfloor>x'\\<rfloor>; x' = \\<lfloor>x''\\<rfloor>;\n        x''\\<rbrakk>\n       \\<Longrightarrow> x = true \\<tau> \\<or>\n                         x = false \\<tau> \\<or>\n                         x = null \\<tau> \\<or> x = \\<bottom> \\<tau>\n 2. \\<And>x \\<tau> x' x''.\n       \\<lbrakk>x = \\<lfloor>x'\\<rfloor>; x' = \\<lfloor>x''\\<rfloor>;\n        \\<not> x''\\<rbrakk>\n       \\<Longrightarrow> x = true \\<tau> \\<or>\n                         x = false \\<tau> \\<or>\n                         x = null \\<tau> \\<or> x = \\<bottom> \\<tau>", "apply (metis (full_types) true_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x \\<tau> x' x''.\n       \\<lbrakk>x = \\<lfloor>x'\\<rfloor>; x' = \\<lfloor>x''\\<rfloor>;\n        \\<not> x''\\<rbrakk>\n       \\<Longrightarrow> x = true \\<tau> \\<or>\n                         x = false \\<tau> \\<or>\n                         x = null \\<tau> \\<or> x = \\<bottom> \\<tau>", "by (metis (full_types) false_def)"], ["proof (state)\nthis:\n  ?x = true ?\\<tau> \\<or>\n  ?x = false ?\\<tau> \\<or> ?x = null ?\\<tau> \\<or> ?x = \\<bottom> ?\\<tau>\n\ngoal (1 subgoal):\n 1. (\\<tau> \\<Turnstile> OclForall X P) =\n    (\\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                     (X \\<tau>)\\<rceil>\\<rceil>.\n        \\<tau> \\<Turnstile> P (\\<lambda>\\<tau>. x))", "have disjE4 : \"\\<And> P1 P2 P3 P4 R.\n   (P1 \\<or> P2 \\<or> P3 \\<or> P4) \\<Longrightarrow> (P1 \\<Longrightarrow> R) \\<Longrightarrow> (P2 \\<Longrightarrow> R) \\<Longrightarrow> (P3 \\<Longrightarrow> R) \\<Longrightarrow> (P4 \\<Longrightarrow> R) \\<Longrightarrow> R\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>P1 P2 P3 P4 R.\n       \\<lbrakk>P1 \\<or> P2 \\<or> P3 \\<or> P4; P1 \\<Longrightarrow> R;\n        P2 \\<Longrightarrow> R; P3 \\<Longrightarrow> R;\n        P4 \\<Longrightarrow> R\\<rbrakk>\n       \\<Longrightarrow> R", "by metis"], ["proof (state)\nthis:\n  \\<lbrakk>?P1.1 \\<or> ?P2.1 \\<or> ?P3.1 \\<or> ?P4.1;\n   ?P1.1 \\<Longrightarrow> ?R1; ?P2.1 \\<Longrightarrow> ?R1;\n   ?P3.1 \\<Longrightarrow> ?R1; ?P4.1 \\<Longrightarrow> ?R1\\<rbrakk>\n  \\<Longrightarrow> ?R1\n\ngoal (1 subgoal):\n 1. (\\<tau> \\<Turnstile> OclForall X P) =\n    (\\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                     (X \\<tau>)\\<rceil>\\<rceil>.\n        \\<tau> \\<Turnstile> P (\\<lambda>\\<tau>. x))", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<tau> \\<Turnstile> OclForall X P) =\n    (\\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                     (X \\<tau>)\\<rceil>\\<rceil>.\n        \\<tau> \\<Turnstile> P (\\<lambda>\\<tau>. x))", "apply(simp add: OclForall_def OclValid_def true_def false_def invalid_def\n                  bot_fun_def bot_option_def null_fun_def null_option_def split: if_split_asm)"], ["proof (prove)\ngoal (1 subgoal):\n 1. ((\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n(X \\<tau>)\\<rceil>\\<rceil>.\n         P (\\<lambda>_. x) \\<tau> =\n         \\<lfloor>None\\<rfloor>) \\<longrightarrow>\n     ((\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n (X \\<tau>)\\<rceil>\\<rceil>.\n          P (\\<lambda>_. x) \\<tau> = None) \\<longrightarrow>\n      ((\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n  (X \\<tau>)\\<rceil>\\<rceil>.\n           P (\\<lambda>_. x) \\<tau> =\n           \\<lfloor>\\<lfloor>False\\<rfloor>\\<rfloor>) \\<longrightarrow>\n       (\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n  (X \\<tau>)\\<rceil>\\<rceil>.\n           P (\\<lambda>\\<tau>. x) \\<tau> \\<noteq>\n           \\<lfloor>\\<lfloor>True\\<rfloor>\\<rfloor>)) \\<and>\n      ((\\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n  (X \\<tau>)\\<rceil>\\<rceil>.\n           P (\\<lambda>_. x) \\<tau> \\<noteq>\n           \\<lfloor>\\<lfloor>False\\<rfloor>\\<rfloor>) \\<longrightarrow>\n       (\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n  (X \\<tau>)\\<rceil>\\<rceil>.\n           P (\\<lambda>\\<tau>. x) \\<tau> \\<noteq>\n           \\<lfloor>\\<lfloor>True\\<rfloor>\\<rfloor>))) \\<and>\n     ((\\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n (X \\<tau>)\\<rceil>\\<rceil>.\n          \\<exists>y.\n             P (\\<lambda>_. x) \\<tau> =\n             \\<lfloor>y\\<rfloor>) \\<longrightarrow>\n      ((\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n  (X \\<tau>)\\<rceil>\\<rceil>.\n           P (\\<lambda>_. x) \\<tau> =\n           \\<lfloor>\\<lfloor>False\\<rfloor>\\<rfloor>) \\<longrightarrow>\n       (\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n  (X \\<tau>)\\<rceil>\\<rceil>.\n           P (\\<lambda>\\<tau>. x) \\<tau> \\<noteq>\n           \\<lfloor>\\<lfloor>True\\<rfloor>\\<rfloor>)) \\<and>\n      ((\\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n  (X \\<tau>)\\<rceil>\\<rceil>.\n           P (\\<lambda>_. x) \\<tau> \\<noteq>\n           \\<lfloor>\\<lfloor>False\\<rfloor>\\<rfloor>) \\<longrightarrow>\n       (\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n  (X \\<tau>)\\<rceil>\\<rceil>.\n           P (\\<lambda>\\<tau>. x) \\<tau> \\<noteq>\n           \\<lfloor>\\<lfloor>True\\<rfloor>\\<rfloor>)))) \\<and>\n    ((\\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n(X \\<tau>)\\<rceil>\\<rceil>.\n         P (\\<lambda>_. x) \\<tau> \\<noteq>\n         \\<lfloor>None\\<rfloor>) \\<longrightarrow>\n     ((\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n (X \\<tau>)\\<rceil>\\<rceil>.\n          P (\\<lambda>_. x) \\<tau> = None) \\<longrightarrow>\n      ((\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n  (X \\<tau>)\\<rceil>\\<rceil>.\n           P (\\<lambda>_. x) \\<tau> =\n           \\<lfloor>\\<lfloor>False\\<rfloor>\\<rfloor>) \\<longrightarrow>\n       (\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n  (X \\<tau>)\\<rceil>\\<rceil>.\n           P (\\<lambda>\\<tau>. x) \\<tau> \\<noteq>\n           \\<lfloor>\\<lfloor>True\\<rfloor>\\<rfloor>)) \\<and>\n      ((\\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n  (X \\<tau>)\\<rceil>\\<rceil>.\n           P (\\<lambda>_. x) \\<tau> \\<noteq>\n           \\<lfloor>\\<lfloor>False\\<rfloor>\\<rfloor>) \\<longrightarrow>\n       (\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n  (X \\<tau>)\\<rceil>\\<rceil>.\n           P (\\<lambda>\\<tau>. x) \\<tau> \\<noteq>\n           \\<lfloor>\\<lfloor>True\\<rfloor>\\<rfloor>))) \\<and>\n     ((\\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n (X \\<tau>)\\<rceil>\\<rceil>.\n          \\<exists>y.\n             P (\\<lambda>_. x) \\<tau> =\n             \\<lfloor>y\\<rfloor>) \\<longrightarrow>\n      ((\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n  (X \\<tau>)\\<rceil>\\<rceil>.\n           P (\\<lambda>_. x) \\<tau> =\n           \\<lfloor>\\<lfloor>False\\<rfloor>\\<rfloor>) \\<longrightarrow>\n       (\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n  (X \\<tau>)\\<rceil>\\<rceil>.\n           P (\\<lambda>\\<tau>. x) \\<tau> \\<noteq>\n           \\<lfloor>\\<lfloor>True\\<rfloor>\\<rfloor>)) \\<and>\n      ((\\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n  (X \\<tau>)\\<rceil>\\<rceil>.\n           P (\\<lambda>_. x) \\<tau> \\<noteq>\n           \\<lfloor>\\<lfloor>False\\<rfloor>\\<rfloor>) \\<longrightarrow>\n       ((\\<delta> X) \\<tau> =\n        \\<lfloor>\\<lfloor>True\\<rfloor>\\<rfloor> \\<longrightarrow>\n        (\\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n   (X \\<tau>)\\<rceil>\\<rceil>.\n            P (\\<lambda>\\<tau>. x) \\<tau> =\n            \\<lfloor>\\<lfloor>True\\<rfloor>\\<rfloor>)) \\<and>\n       ((\\<delta> X) \\<tau> \\<noteq>\n        \\<lfloor>\\<lfloor>True\\<rfloor>\\<rfloor> \\<longrightarrow>\n        (\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n   (X \\<tau>)\\<rceil>\\<rceil>.\n            P (\\<lambda>\\<tau>. x) \\<tau> \\<noteq>\n            \\<lfloor>\\<lfloor>True\\<rfloor>\\<rfloor>)))))", "apply(rule conjI, rule impI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                    (X \\<tau>)\\<rceil>\\<rceil>.\n       P (\\<lambda>_. x) \\<tau> = \\<lfloor>None\\<rfloor> \\<Longrightarrow>\n    ((\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n(X \\<tau>)\\<rceil>\\<rceil>.\n         P (\\<lambda>_. x) \\<tau> = None) \\<longrightarrow>\n     ((\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n (X \\<tau>)\\<rceil>\\<rceil>.\n          P (\\<lambda>_. x) \\<tau> =\n          \\<lfloor>\\<lfloor>False\\<rfloor>\\<rfloor>) \\<longrightarrow>\n      (\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n (X \\<tau>)\\<rceil>\\<rceil>.\n          P (\\<lambda>\\<tau>. x) \\<tau> \\<noteq>\n          \\<lfloor>\\<lfloor>True\\<rfloor>\\<rfloor>)) \\<and>\n     ((\\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n (X \\<tau>)\\<rceil>\\<rceil>.\n          P (\\<lambda>_. x) \\<tau> \\<noteq>\n          \\<lfloor>\\<lfloor>False\\<rfloor>\\<rfloor>) \\<longrightarrow>\n      (\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n (X \\<tau>)\\<rceil>\\<rceil>.\n          P (\\<lambda>\\<tau>. x) \\<tau> \\<noteq>\n          \\<lfloor>\\<lfloor>True\\<rfloor>\\<rfloor>))) \\<and>\n    ((\\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n(X \\<tau>)\\<rceil>\\<rceil>.\n         \\<exists>y.\n            P (\\<lambda>_. x) \\<tau> =\n            \\<lfloor>y\\<rfloor>) \\<longrightarrow>\n     ((\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n (X \\<tau>)\\<rceil>\\<rceil>.\n          P (\\<lambda>_. x) \\<tau> =\n          \\<lfloor>\\<lfloor>False\\<rfloor>\\<rfloor>) \\<longrightarrow>\n      (\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n (X \\<tau>)\\<rceil>\\<rceil>.\n          P (\\<lambda>\\<tau>. x) \\<tau> \\<noteq>\n          \\<lfloor>\\<lfloor>True\\<rfloor>\\<rfloor>)) \\<and>\n     ((\\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n (X \\<tau>)\\<rceil>\\<rceil>.\n          P (\\<lambda>_. x) \\<tau> \\<noteq>\n          \\<lfloor>\\<lfloor>False\\<rfloor>\\<rfloor>) \\<longrightarrow>\n      (\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n (X \\<tau>)\\<rceil>\\<rceil>.\n          P (\\<lambda>\\<tau>. x) \\<tau> \\<noteq>\n          \\<lfloor>\\<lfloor>True\\<rfloor>\\<rfloor>)))\n 2. (\\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                     (X \\<tau>)\\<rceil>\\<rceil>.\n        P (\\<lambda>_. x) \\<tau> \\<noteq>\n        \\<lfloor>None\\<rfloor>) \\<longrightarrow>\n    ((\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n(X \\<tau>)\\<rceil>\\<rceil>.\n         P (\\<lambda>_. x) \\<tau> = None) \\<longrightarrow>\n     ((\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n (X \\<tau>)\\<rceil>\\<rceil>.\n          P (\\<lambda>_. x) \\<tau> =\n          \\<lfloor>\\<lfloor>False\\<rfloor>\\<rfloor>) \\<longrightarrow>\n      (\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n (X \\<tau>)\\<rceil>\\<rceil>.\n          P (\\<lambda>\\<tau>. x) \\<tau> \\<noteq>\n          \\<lfloor>\\<lfloor>True\\<rfloor>\\<rfloor>)) \\<and>\n     ((\\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n (X \\<tau>)\\<rceil>\\<rceil>.\n          P (\\<lambda>_. x) \\<tau> \\<noteq>\n          \\<lfloor>\\<lfloor>False\\<rfloor>\\<rfloor>) \\<longrightarrow>\n      (\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n (X \\<tau>)\\<rceil>\\<rceil>.\n          P (\\<lambda>\\<tau>. x) \\<tau> \\<noteq>\n          \\<lfloor>\\<lfloor>True\\<rfloor>\\<rfloor>))) \\<and>\n    ((\\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n(X \\<tau>)\\<rceil>\\<rceil>.\n         \\<exists>y.\n            P (\\<lambda>_. x) \\<tau> =\n            \\<lfloor>y\\<rfloor>) \\<longrightarrow>\n     ((\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n (X \\<tau>)\\<rceil>\\<rceil>.\n          P (\\<lambda>_. x) \\<tau> =\n          \\<lfloor>\\<lfloor>False\\<rfloor>\\<rfloor>) \\<longrightarrow>\n      (\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n (X \\<tau>)\\<rceil>\\<rceil>.\n          P (\\<lambda>\\<tau>. x) \\<tau> \\<noteq>\n          \\<lfloor>\\<lfloor>True\\<rfloor>\\<rfloor>)) \\<and>\n     ((\\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n (X \\<tau>)\\<rceil>\\<rceil>.\n          P (\\<lambda>_. x) \\<tau> \\<noteq>\n          \\<lfloor>\\<lfloor>False\\<rfloor>\\<rfloor>) \\<longrightarrow>\n      ((\\<delta> X) \\<tau> =\n       \\<lfloor>\\<lfloor>True\\<rfloor>\\<rfloor> \\<longrightarrow>\n       (\\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n  (X \\<tau>)\\<rceil>\\<rceil>.\n           P (\\<lambda>\\<tau>. x) \\<tau> =\n           \\<lfloor>\\<lfloor>True\\<rfloor>\\<rfloor>)) \\<and>\n      ((\\<delta> X) \\<tau> \\<noteq>\n       \\<lfloor>\\<lfloor>True\\<rfloor>\\<rfloor> \\<longrightarrow>\n       (\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n  (X \\<tau>)\\<rceil>\\<rceil>.\n           P (\\<lambda>\\<tau>. x) \\<tau> \\<noteq>\n           \\<lfloor>\\<lfloor>True\\<rfloor>\\<rfloor>))))", "apply (metis drop.simps option.distinct(1) invalid_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                     (X \\<tau>)\\<rceil>\\<rceil>.\n        P (\\<lambda>_. x) \\<tau> \\<noteq>\n        \\<lfloor>None\\<rfloor>) \\<longrightarrow>\n    ((\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n(X \\<tau>)\\<rceil>\\<rceil>.\n         P (\\<lambda>_. x) \\<tau> = None) \\<longrightarrow>\n     ((\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n (X \\<tau>)\\<rceil>\\<rceil>.\n          P (\\<lambda>_. x) \\<tau> =\n          \\<lfloor>\\<lfloor>False\\<rfloor>\\<rfloor>) \\<longrightarrow>\n      (\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n (X \\<tau>)\\<rceil>\\<rceil>.\n          P (\\<lambda>\\<tau>. x) \\<tau> \\<noteq>\n          \\<lfloor>\\<lfloor>True\\<rfloor>\\<rfloor>)) \\<and>\n     ((\\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n (X \\<tau>)\\<rceil>\\<rceil>.\n          P (\\<lambda>_. x) \\<tau> \\<noteq>\n          \\<lfloor>\\<lfloor>False\\<rfloor>\\<rfloor>) \\<longrightarrow>\n      (\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n (X \\<tau>)\\<rceil>\\<rceil>.\n          P (\\<lambda>\\<tau>. x) \\<tau> \\<noteq>\n          \\<lfloor>\\<lfloor>True\\<rfloor>\\<rfloor>))) \\<and>\n    ((\\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n(X \\<tau>)\\<rceil>\\<rceil>.\n         \\<exists>y.\n            P (\\<lambda>_. x) \\<tau> =\n            \\<lfloor>y\\<rfloor>) \\<longrightarrow>\n     ((\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n (X \\<tau>)\\<rceil>\\<rceil>.\n          P (\\<lambda>_. x) \\<tau> =\n          \\<lfloor>\\<lfloor>False\\<rfloor>\\<rfloor>) \\<longrightarrow>\n      (\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n (X \\<tau>)\\<rceil>\\<rceil>.\n          P (\\<lambda>\\<tau>. x) \\<tau> \\<noteq>\n          \\<lfloor>\\<lfloor>True\\<rfloor>\\<rfloor>)) \\<and>\n     ((\\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n (X \\<tau>)\\<rceil>\\<rceil>.\n          P (\\<lambda>_. x) \\<tau> \\<noteq>\n          \\<lfloor>\\<lfloor>False\\<rfloor>\\<rfloor>) \\<longrightarrow>\n      ((\\<delta> X) \\<tau> =\n       \\<lfloor>\\<lfloor>True\\<rfloor>\\<rfloor> \\<longrightarrow>\n       (\\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n  (X \\<tau>)\\<rceil>\\<rceil>.\n           P (\\<lambda>\\<tau>. x) \\<tau> =\n           \\<lfloor>\\<lfloor>True\\<rfloor>\\<rfloor>)) \\<and>\n      ((\\<delta> X) \\<tau> \\<noteq>\n       \\<lfloor>\\<lfloor>True\\<rfloor>\\<rfloor> \\<longrightarrow>\n       (\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n  (X \\<tau>)\\<rceil>\\<rceil>.\n           P (\\<lambda>\\<tau>. x) \\<tau> \\<noteq>\n           \\<lfloor>\\<lfloor>True\\<rfloor>\\<rfloor>))))", "apply(rule impI, rule conjI, rule impI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n       (X \\<tau>)\\<rceil>\\<rceil>.\n                P (\\<lambda>_. x) \\<tau> \\<noteq> \\<lfloor>None\\<rfloor>;\n     \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                     (X \\<tau>)\\<rceil>\\<rceil>.\n        P (\\<lambda>_. x) \\<tau> = None\\<rbrakk>\n    \\<Longrightarrow> ((\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                  (X \\<tau>)\\<rceil>\\<rceil>.\n                           P (\\<lambda>_. x) \\<tau> =\n                           \\<lfloor>\\<lfloor>False\\<rfloor>\\<rfloor>) \\<longrightarrow>\n                       (\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                  (X \\<tau>)\\<rceil>\\<rceil>.\n                           P (\\<lambda>\\<tau>. x) \\<tau> \\<noteq>\n                           \\<lfloor>\\<lfloor>True\\<rfloor>\\<rfloor>)) \\<and>\n                      ((\\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                  (X \\<tau>)\\<rceil>\\<rceil>.\n                           P (\\<lambda>_. x) \\<tau> \\<noteq>\n                           \\<lfloor>\\<lfloor>False\\<rfloor>\\<rfloor>) \\<longrightarrow>\n                       (\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                  (X \\<tau>)\\<rceil>\\<rceil>.\n                           P (\\<lambda>\\<tau>. x) \\<tau> \\<noteq>\n                           \\<lfloor>\\<lfloor>True\\<rfloor>\\<rfloor>))\n 2. \\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                    (X \\<tau>)\\<rceil>\\<rceil>.\n       P (\\<lambda>_. x) \\<tau> \\<noteq>\n       \\<lfloor>None\\<rfloor> \\<Longrightarrow>\n    (\\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                     (X \\<tau>)\\<rceil>\\<rceil>.\n        \\<exists>y.\n           P (\\<lambda>_. x) \\<tau> = \\<lfloor>y\\<rfloor>) \\<longrightarrow>\n    ((\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n(X \\<tau>)\\<rceil>\\<rceil>.\n         P (\\<lambda>_. x) \\<tau> =\n         \\<lfloor>\\<lfloor>False\\<rfloor>\\<rfloor>) \\<longrightarrow>\n     (\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n(X \\<tau>)\\<rceil>\\<rceil>.\n         P (\\<lambda>\\<tau>. x) \\<tau> \\<noteq>\n         \\<lfloor>\\<lfloor>True\\<rfloor>\\<rfloor>)) \\<and>\n    ((\\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n(X \\<tau>)\\<rceil>\\<rceil>.\n         P (\\<lambda>_. x) \\<tau> \\<noteq>\n         \\<lfloor>\\<lfloor>False\\<rfloor>\\<rfloor>) \\<longrightarrow>\n     ((\\<delta> X) \\<tau> =\n      \\<lfloor>\\<lfloor>True\\<rfloor>\\<rfloor> \\<longrightarrow>\n      (\\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n (X \\<tau>)\\<rceil>\\<rceil>.\n          P (\\<lambda>\\<tau>. x) \\<tau> =\n          \\<lfloor>\\<lfloor>True\\<rfloor>\\<rfloor>)) \\<and>\n     ((\\<delta> X) \\<tau> \\<noteq>\n      \\<lfloor>\\<lfloor>True\\<rfloor>\\<rfloor> \\<longrightarrow>\n      (\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n (X \\<tau>)\\<rceil>\\<rceil>.\n          P (\\<lambda>\\<tau>. x) \\<tau> \\<noteq>\n          \\<lfloor>\\<lfloor>True\\<rfloor>\\<rfloor>)))", "apply (metis option.distinct(1))"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                    (X \\<tau>)\\<rceil>\\<rceil>.\n       P (\\<lambda>_. x) \\<tau> \\<noteq>\n       \\<lfloor>None\\<rfloor> \\<Longrightarrow>\n    (\\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                     (X \\<tau>)\\<rceil>\\<rceil>.\n        \\<exists>y.\n           P (\\<lambda>_. x) \\<tau> = \\<lfloor>y\\<rfloor>) \\<longrightarrow>\n    ((\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n(X \\<tau>)\\<rceil>\\<rceil>.\n         P (\\<lambda>_. x) \\<tau> =\n         \\<lfloor>\\<lfloor>False\\<rfloor>\\<rfloor>) \\<longrightarrow>\n     (\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n(X \\<tau>)\\<rceil>\\<rceil>.\n         P (\\<lambda>\\<tau>. x) \\<tau> \\<noteq>\n         \\<lfloor>\\<lfloor>True\\<rfloor>\\<rfloor>)) \\<and>\n    ((\\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n(X \\<tau>)\\<rceil>\\<rceil>.\n         P (\\<lambda>_. x) \\<tau> \\<noteq>\n         \\<lfloor>\\<lfloor>False\\<rfloor>\\<rfloor>) \\<longrightarrow>\n     ((\\<delta> X) \\<tau> =\n      \\<lfloor>\\<lfloor>True\\<rfloor>\\<rfloor> \\<longrightarrow>\n      (\\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n (X \\<tau>)\\<rceil>\\<rceil>.\n          P (\\<lambda>\\<tau>. x) \\<tau> =\n          \\<lfloor>\\<lfloor>True\\<rfloor>\\<rfloor>)) \\<and>\n     ((\\<delta> X) \\<tau> \\<noteq>\n      \\<lfloor>\\<lfloor>True\\<rfloor>\\<rfloor> \\<longrightarrow>\n      (\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n (X \\<tau>)\\<rceil>\\<rceil>.\n          P (\\<lambda>\\<tau>. x) \\<tau> \\<noteq>\n          \\<lfloor>\\<lfloor>True\\<rfloor>\\<rfloor>)))", "apply(rule impI, rule conjI, rule impI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n       (X \\<tau>)\\<rceil>\\<rceil>.\n                P (\\<lambda>_. x) \\<tau> \\<noteq> \\<lfloor>None\\<rfloor>;\n     \\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                     (X \\<tau>)\\<rceil>\\<rceil>.\n        \\<exists>y. P (\\<lambda>_. x) \\<tau> = \\<lfloor>y\\<rfloor>;\n     \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                     (X \\<tau>)\\<rceil>\\<rceil>.\n        P (\\<lambda>_. x) \\<tau> =\n        \\<lfloor>\\<lfloor>False\\<rfloor>\\<rfloor>\\<rbrakk>\n    \\<Longrightarrow> \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                (X \\<tau>)\\<rceil>\\<rceil>.\n                         P (\\<lambda>\\<tau>. x) \\<tau> \\<noteq>\n                         \\<lfloor>\\<lfloor>True\\<rfloor>\\<rfloor>\n 2. \\<lbrakk>\\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n       (X \\<tau>)\\<rceil>\\<rceil>.\n                P (\\<lambda>_. x) \\<tau> \\<noteq> \\<lfloor>None\\<rfloor>;\n     \\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                     (X \\<tau>)\\<rceil>\\<rceil>.\n        \\<exists>y. P (\\<lambda>_. x) \\<tau> = \\<lfloor>y\\<rfloor>\\<rbrakk>\n    \\<Longrightarrow> (\\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                 (X \\<tau>)\\<rceil>\\<rceil>.\n                          P (\\<lambda>_. x) \\<tau> \\<noteq>\n                          \\<lfloor>\\<lfloor>False\\<rfloor>\\<rfloor>) \\<longrightarrow>\n                      ((\\<delta> X) \\<tau> =\n                       \\<lfloor>\\<lfloor>True\\<rfloor>\\<rfloor> \\<longrightarrow>\n                       (\\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                  (X \\<tau>)\\<rceil>\\<rceil>.\n                           P (\\<lambda>\\<tau>. x) \\<tau> =\n                           \\<lfloor>\\<lfloor>True\\<rfloor>\\<rfloor>)) \\<and>\n                      ((\\<delta> X) \\<tau> \\<noteq>\n                       \\<lfloor>\\<lfloor>True\\<rfloor>\\<rfloor> \\<longrightarrow>\n                       (\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                  (X \\<tau>)\\<rceil>\\<rceil>.\n                           P (\\<lambda>\\<tau>. x) \\<tau> \\<noteq>\n                           \\<lfloor>\\<lfloor>True\\<rfloor>\\<rfloor>))", "apply (metis drop.simps)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n       (X \\<tau>)\\<rceil>\\<rceil>.\n                P (\\<lambda>_. x) \\<tau> \\<noteq> \\<lfloor>None\\<rfloor>;\n     \\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                     (X \\<tau>)\\<rceil>\\<rceil>.\n        \\<exists>y. P (\\<lambda>_. x) \\<tau> = \\<lfloor>y\\<rfloor>\\<rbrakk>\n    \\<Longrightarrow> (\\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                 (X \\<tau>)\\<rceil>\\<rceil>.\n                          P (\\<lambda>_. x) \\<tau> \\<noteq>\n                          \\<lfloor>\\<lfloor>False\\<rfloor>\\<rfloor>) \\<longrightarrow>\n                      ((\\<delta> X) \\<tau> =\n                       \\<lfloor>\\<lfloor>True\\<rfloor>\\<rfloor> \\<longrightarrow>\n                       (\\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                  (X \\<tau>)\\<rceil>\\<rceil>.\n                           P (\\<lambda>\\<tau>. x) \\<tau> =\n                           \\<lfloor>\\<lfloor>True\\<rfloor>\\<rfloor>)) \\<and>\n                      ((\\<delta> X) \\<tau> \\<noteq>\n                       \\<lfloor>\\<lfloor>True\\<rfloor>\\<rfloor> \\<longrightarrow>\n                       (\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                  (X \\<tau>)\\<rceil>\\<rceil>.\n                           P (\\<lambda>\\<tau>. x) \\<tau> \\<noteq>\n                           \\<lfloor>\\<lfloor>True\\<rfloor>\\<rfloor>))", "apply(intro conjI impI ballI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>\\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n          (X \\<tau>)\\<rceil>\\<rceil>.\n                   P (\\<lambda>_. x) \\<tau> \\<noteq> \\<lfloor>None\\<rfloor>;\n        \\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n  (X \\<tau>)\\<rceil>\\<rceil>.\n           \\<exists>y. P (\\<lambda>_. x) \\<tau> = \\<lfloor>y\\<rfloor>;\n        \\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n  (X \\<tau>)\\<rceil>\\<rceil>.\n           P (\\<lambda>_. x) \\<tau> \\<noteq>\n           \\<lfloor>\\<lfloor>False\\<rfloor>\\<rfloor>;\n        (\\<delta> X) \\<tau> = \\<lfloor>\\<lfloor>True\\<rfloor>\\<rfloor>;\n        x \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                 (X \\<tau>)\\<rceil>\\<rceil>\\<rbrakk>\n       \\<Longrightarrow> P (\\<lambda>\\<tau>. x) \\<tau> =\n                         \\<lfloor>\\<lfloor>True\\<rfloor>\\<rfloor>\n 2. \\<lbrakk>\\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n       (X \\<tau>)\\<rceil>\\<rceil>.\n                P (\\<lambda>_. x) \\<tau> \\<noteq> \\<lfloor>None\\<rfloor>;\n     \\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                     (X \\<tau>)\\<rceil>\\<rceil>.\n        \\<exists>y. P (\\<lambda>_. x) \\<tau> = \\<lfloor>y\\<rfloor>;\n     \\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                     (X \\<tau>)\\<rceil>\\<rceil>.\n        P (\\<lambda>_. x) \\<tau> \\<noteq>\n        \\<lfloor>\\<lfloor>False\\<rfloor>\\<rfloor>;\n     (\\<delta> X) \\<tau> \\<noteq>\n     \\<lfloor>\\<lfloor>True\\<rfloor>\\<rfloor>\\<rbrakk>\n    \\<Longrightarrow> \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                (X \\<tau>)\\<rceil>\\<rceil>.\n                         P (\\<lambda>\\<tau>. x) \\<tau> \\<noteq>\n                         \\<lfloor>\\<lfloor>True\\<rfloor>\\<rfloor>", "proof -"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>\\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n          (X \\<tau>)\\<rceil>\\<rceil>.\n                   P (\\<lambda>_. x) \\<tau> \\<noteq> \\<lfloor>None\\<rfloor>;\n        \\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n  (X \\<tau>)\\<rceil>\\<rceil>.\n           \\<exists>y. P (\\<lambda>_. x) \\<tau> = \\<lfloor>y\\<rfloor>;\n        \\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n  (X \\<tau>)\\<rceil>\\<rceil>.\n           P (\\<lambda>_. x) \\<tau> \\<noteq>\n           \\<lfloor>\\<lfloor>False\\<rfloor>\\<rfloor>;\n        (\\<delta> X) \\<tau> = \\<lfloor>\\<lfloor>True\\<rfloor>\\<rfloor>;\n        x \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                 (X \\<tau>)\\<rceil>\\<rceil>\\<rbrakk>\n       \\<Longrightarrow> P (\\<lambda>\\<tau>. x) \\<tau> =\n                         \\<lfloor>\\<lfloor>True\\<rfloor>\\<rfloor>\n 2. \\<lbrakk>\\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n       (X \\<tau>)\\<rceil>\\<rceil>.\n                P (\\<lambda>_. x) \\<tau> \\<noteq> \\<lfloor>None\\<rfloor>;\n     \\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                     (X \\<tau>)\\<rceil>\\<rceil>.\n        \\<exists>y. P (\\<lambda>_. x) \\<tau> = \\<lfloor>y\\<rfloor>;\n     \\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                     (X \\<tau>)\\<rceil>\\<rceil>.\n        P (\\<lambda>_. x) \\<tau> \\<noteq>\n        \\<lfloor>\\<lfloor>False\\<rfloor>\\<rfloor>;\n     (\\<delta> X) \\<tau> \\<noteq>\n     \\<lfloor>\\<lfloor>True\\<rfloor>\\<rfloor>\\<rbrakk>\n    \\<Longrightarrow> \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                (X \\<tau>)\\<rceil>\\<rceil>.\n                         P (\\<lambda>\\<tau>. x) \\<tau> \\<noteq>\n                         \\<lfloor>\\<lfloor>True\\<rfloor>\\<rfloor>", "fix x"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>\\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n          (X \\<tau>)\\<rceil>\\<rceil>.\n                   P (\\<lambda>_. x) \\<tau> \\<noteq> \\<lfloor>None\\<rfloor>;\n        \\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n  (X \\<tau>)\\<rceil>\\<rceil>.\n           \\<exists>y. P (\\<lambda>_. x) \\<tau> = \\<lfloor>y\\<rfloor>;\n        \\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n  (X \\<tau>)\\<rceil>\\<rceil>.\n           P (\\<lambda>_. x) \\<tau> \\<noteq>\n           \\<lfloor>\\<lfloor>False\\<rfloor>\\<rfloor>;\n        (\\<delta> X) \\<tau> = \\<lfloor>\\<lfloor>True\\<rfloor>\\<rfloor>;\n        x \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                 (X \\<tau>)\\<rceil>\\<rceil>\\<rbrakk>\n       \\<Longrightarrow> P (\\<lambda>\\<tau>. x) \\<tau> =\n                         \\<lfloor>\\<lfloor>True\\<rfloor>\\<rfloor>\n 2. \\<lbrakk>\\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n       (X \\<tau>)\\<rceil>\\<rceil>.\n                P (\\<lambda>_. x) \\<tau> \\<noteq> \\<lfloor>None\\<rfloor>;\n     \\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                     (X \\<tau>)\\<rceil>\\<rceil>.\n        \\<exists>y. P (\\<lambda>_. x) \\<tau> = \\<lfloor>y\\<rfloor>;\n     \\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                     (X \\<tau>)\\<rceil>\\<rceil>.\n        P (\\<lambda>_. x) \\<tau> \\<noteq>\n        \\<lfloor>\\<lfloor>False\\<rfloor>\\<rfloor>;\n     (\\<delta> X) \\<tau> \\<noteq>\n     \\<lfloor>\\<lfloor>True\\<rfloor>\\<rfloor>\\<rbrakk>\n    \\<Longrightarrow> \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                (X \\<tau>)\\<rceil>\\<rceil>.\n                         P (\\<lambda>\\<tau>. x) \\<tau> \\<noteq>\n                         \\<lfloor>\\<lfloor>True\\<rfloor>\\<rfloor>", "show \"\\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e (X \\<tau>)\\<rceil>\\<rceil>. P (\\<lambda>_. x) \\<tau> \\<noteq> \\<lfloor>None\\<rfloor> \\<Longrightarrow>\n                       \\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e (X \\<tau>)\\<rceil>\\<rceil>. \\<exists>y. P (\\<lambda>_. x) \\<tau> = \\<lfloor>y\\<rfloor> \\<Longrightarrow>\n                       \\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e (X \\<tau>)\\<rceil>\\<rceil>. P (\\<lambda>_. x) \\<tau> \\<noteq> \\<lfloor>\\<lfloor>False\\<rfloor>\\<rfloor> \\<Longrightarrow>\n                       x \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e (X \\<tau>)\\<rceil>\\<rceil> \\<Longrightarrow> P (\\<lambda>\\<tau>. x) \\<tau> = \\<lfloor>\\<lfloor>True\\<rfloor>\\<rfloor>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n       (X \\<tau>)\\<rceil>\\<rceil>.\n                P (\\<lambda>_. x) \\<tau> \\<noteq> \\<lfloor>None\\<rfloor>;\n     \\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                     (X \\<tau>)\\<rceil>\\<rceil>.\n        \\<exists>y. P (\\<lambda>_. x) \\<tau> = \\<lfloor>y\\<rfloor>;\n     \\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                     (X \\<tau>)\\<rceil>\\<rceil>.\n        P (\\<lambda>_. x) \\<tau> \\<noteq>\n        \\<lfloor>\\<lfloor>False\\<rfloor>\\<rfloor>;\n     x \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                              (X \\<tau>)\\<rceil>\\<rceil>\\<rbrakk>\n    \\<Longrightarrow> P (\\<lambda>\\<tau>. x) \\<tau> =\n                      \\<lfloor>\\<lfloor>True\\<rfloor>\\<rfloor>", "apply(erule_tac x = x in ballE)+"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<lbrakk>x \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n(X \\<tau>)\\<rceil>\\<rceil>;\n     P (\\<lambda>_. x) \\<tau> \\<noteq> \\<lfloor>None\\<rfloor>;\n     \\<exists>y. P (\\<lambda>_. x) \\<tau> = \\<lfloor>y\\<rfloor>;\n     P (\\<lambda>_. x) \\<tau> \\<noteq>\n     \\<lfloor>\\<lfloor>False\\<rfloor>\\<rfloor>\\<rbrakk>\n    \\<Longrightarrow> P (\\<lambda>\\<tau>. x) \\<tau> =\n                      \\<lfloor>\\<lfloor>True\\<rfloor>\\<rfloor>\n 2. \\<lbrakk>x \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n(X \\<tau>)\\<rceil>\\<rceil>;\n     P (\\<lambda>_. x) \\<tau> \\<noteq> \\<lfloor>None\\<rfloor>;\n     \\<exists>y. P (\\<lambda>_. x) \\<tau> = \\<lfloor>y\\<rfloor>;\n     x \\<notin> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                 (X \\<tau>)\\<rceil>\\<rceil>\\<rbrakk>\n    \\<Longrightarrow> P (\\<lambda>\\<tau>. x) \\<tau> =\n                      \\<lfloor>\\<lfloor>True\\<rfloor>\\<rfloor>\n 3. \\<lbrakk>\\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n       (X \\<tau>)\\<rceil>\\<rceil>.\n                P (\\<lambda>_. x) \\<tau> \\<noteq>\n                \\<lfloor>\\<lfloor>False\\<rfloor>\\<rfloor>;\n     x \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                              (X \\<tau>)\\<rceil>\\<rceil>;\n     P (\\<lambda>_. x) \\<tau> \\<noteq> \\<lfloor>None\\<rfloor>;\n     x \\<notin> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                 (X \\<tau>)\\<rceil>\\<rceil>\\<rbrakk>\n    \\<Longrightarrow> P (\\<lambda>\\<tau>. x) \\<tau> =\n                      \\<lfloor>\\<lfloor>True\\<rfloor>\\<rfloor>\n 4. \\<lbrakk>\\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n       (X \\<tau>)\\<rceil>\\<rceil>.\n                \\<exists>y. P (\\<lambda>_. x) \\<tau> = \\<lfloor>y\\<rfloor>;\n     \\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                     (X \\<tau>)\\<rceil>\\<rceil>.\n        P (\\<lambda>_. x) \\<tau> \\<noteq>\n        \\<lfloor>\\<lfloor>False\\<rfloor>\\<rfloor>;\n     x \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                              (X \\<tau>)\\<rceil>\\<rceil>;\n     x \\<notin> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                 (X \\<tau>)\\<rceil>\\<rceil>\\<rbrakk>\n    \\<Longrightarrow> P (\\<lambda>\\<tau>. x) \\<tau> =\n                      \\<lfloor>\\<lfloor>True\\<rfloor>\\<rfloor>", "by(rule disjE4[OF destruct_ocl[of \"P (\\<lambda>\\<tau>. x) \\<tau>\"]],\n      (simp add: true_def false_def null_fun_def null_option_def bot_fun_def bot_option_def)+)"], ["proof (state)\nthis:\n  \\<lbrakk>\\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n     (X \\<tau>)\\<rceil>\\<rceil>.\n              P (\\<lambda>_. x) \\<tau> \\<noteq> \\<lfloor>None\\<rfloor>;\n   \\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                   (X \\<tau>)\\<rceil>\\<rceil>.\n      \\<exists>y. P (\\<lambda>_. x) \\<tau> = \\<lfloor>y\\<rfloor>;\n   \\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                   (X \\<tau>)\\<rceil>\\<rceil>.\n      P (\\<lambda>_. x) \\<tau> \\<noteq>\n      \\<lfloor>\\<lfloor>False\\<rfloor>\\<rfloor>;\n   x \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                            (X \\<tau>)\\<rceil>\\<rceil>\\<rbrakk>\n  \\<Longrightarrow> P (\\<lambda>\\<tau>. x) \\<tau> =\n                    \\<lfloor>\\<lfloor>True\\<rfloor>\\<rfloor>\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n       (X \\<tau>)\\<rceil>\\<rceil>.\n                P (\\<lambda>_. x) \\<tau> \\<noteq> \\<lfloor>None\\<rfloor>;\n     \\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                     (X \\<tau>)\\<rceil>\\<rceil>.\n        \\<exists>y. P (\\<lambda>_. x) \\<tau> = \\<lfloor>y\\<rfloor>;\n     \\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                     (X \\<tau>)\\<rceil>\\<rceil>.\n        P (\\<lambda>_. x) \\<tau> \\<noteq>\n        \\<lfloor>\\<lfloor>False\\<rfloor>\\<rfloor>;\n     (\\<delta> X) \\<tau> \\<noteq>\n     \\<lfloor>\\<lfloor>True\\<rfloor>\\<rfloor>\\<rbrakk>\n    \\<Longrightarrow> \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                (X \\<tau>)\\<rceil>\\<rceil>.\n                         P (\\<lambda>\\<tau>. x) \\<tau> \\<noteq>\n                         \\<lfloor>\\<lfloor>True\\<rfloor>\\<rfloor>", "qed(simp add: assms[simplified OclValid_def true_def])+"], ["proof (state)\nthis:\n  (\\<tau> \\<Turnstile> OclForall X P) =\n  (\\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                   (X \\<tau>)\\<rceil>\\<rceil>.\n      \\<tau> \\<Turnstile> P (\\<lambda>\\<tau>. x))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma OclForall_includes :\n assumes x_def : \"\\<tau> \\<Turnstile> \\<delta> x\"\n     and y_def : \"\\<tau> \\<Turnstile> \\<delta> y\"\n   shows \"(\\<tau> \\<Turnstile> OclForall x (OclIncludes y)) = (\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e (x \\<tau>)\\<rceil>\\<rceil> \\<subseteq> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e (y \\<tau>)\\<rceil>\\<rceil>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<tau> \\<Turnstile> OclForall x (OclIncludes y)) =\n    (\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                      (x \\<tau>)\\<rceil>\\<rceil>\n     \\<subseteq> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                  (y \\<tau>)\\<rceil>\\<rceil>)", "apply(simp add: OclForall_rep_set_true[OF x_def],\n       simp add: OclIncludes_def OclValid_def y_def[simplified OclValid_def])"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                     (x \\<tau>)\\<rceil>\\<rceil>.\n        ((\\<upsilon> (\\<lambda>\\<tau>. x)) \\<tau> =\n         true \\<tau> \\<longrightarrow>\n         \\<lfloor>\\<lfloor>x \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n              (y \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor> =\n         true \\<tau>) \\<and>\n        ((\\<upsilon> (\\<lambda>\\<tau>. x)) \\<tau> \\<noteq>\n         true \\<tau> \\<longrightarrow>\n         \\<bottom> = true \\<tau>)) =\n    (\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                      (x \\<tau>)\\<rceil>\\<rceil>\n     \\<subseteq> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                  (y \\<tau>)\\<rceil>\\<rceil>)", "apply(insert Set_inv_lemma[OF x_def], simp add: valid_def false_def true_def bot_fun_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                    (x \\<tau>)\\<rceil>\\<rceil>.\n       x \\<noteq> \\<bottom> \\<Longrightarrow>\n    (\\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                     (x \\<tau>)\\<rceil>\\<rceil>.\n        x \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                 (y \\<tau>)\\<rceil>\\<rceil>) =\n    (\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                      (x \\<tau>)\\<rceil>\\<rceil>\n     \\<subseteq> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                  (y \\<tau>)\\<rceil>\\<rceil>)", "by(rule iffI, simp add: subsetI, simp add: subsetD)"], ["", "lemma OclForall_not_includes :\n assumes x_def : \"\\<tau> \\<Turnstile> \\<delta> x\"\n     and y_def : \"\\<tau> \\<Turnstile> \\<delta> y\"\n   shows \"(OclForall x (OclIncludes y) \\<tau> = false \\<tau>) = (\\<not> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e (x \\<tau>)\\<rceil>\\<rceil> \\<subseteq> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e (y \\<tau>)\\<rceil>\\<rceil>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (OclForall x (OclIncludes y) \\<tau> = false \\<tau>) =\n    (\\<not> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                             (x \\<tau>)\\<rceil>\\<rceil>\n            \\<subseteq> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n   (y \\<tau>)\\<rceil>\\<rceil>)", "apply(simp add: OclForall_rep_set_false[OF x_def],\n       simp add: OclIncludes_def OclValid_def y_def[simplified OclValid_def])"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                     (x \\<tau>)\\<rceil>\\<rceil>.\n        ((\\<upsilon> (\\<lambda>\\<tau>. x)) \\<tau> =\n         true \\<tau> \\<longrightarrow>\n         \\<lfloor>\\<lfloor>x \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n              (y \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor> =\n         false \\<tau>) \\<and>\n        ((\\<upsilon> (\\<lambda>\\<tau>. x)) \\<tau> \\<noteq>\n         true \\<tau> \\<longrightarrow>\n         \\<bottom> = false \\<tau>)) =\n    (\\<not> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                             (x \\<tau>)\\<rceil>\\<rceil>\n            \\<subseteq> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n   (y \\<tau>)\\<rceil>\\<rceil>)", "apply(insert Set_inv_lemma[OF x_def], simp add: valid_def false_def true_def bot_fun_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                    (x \\<tau>)\\<rceil>\\<rceil>.\n       x \\<noteq> \\<bottom> \\<Longrightarrow>\n    (\\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                     (x \\<tau>)\\<rceil>\\<rceil>.\n        x \\<notin> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                    (y \\<tau>)\\<rceil>\\<rceil>) =\n    (\\<not> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                             (x \\<tau>)\\<rceil>\\<rceil>\n            \\<subseteq> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n   (y \\<tau>)\\<rceil>\\<rceil>)", "by(rule iffI, metis rev_subsetD, metis subsetI)"], ["", "lemma OclForall_iterate:\n assumes S_finite: \"finite \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e (S \\<tau>)\\<rceil>\\<rceil>\"\n   shows \"S->forAll\\<^sub>S\\<^sub>e\\<^sub>t(x | P x) \\<tau> = (S->iterate\\<^sub>S\\<^sub>e\\<^sub>t(x; acc = true | acc and P x)) \\<tau>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. OclForall S P \\<tau> =\n    S ->iterate\\<^sub>S\\<^sub>e\\<^sub>t(x;acc=true | acc and P x) \\<tau>", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. OclForall S P \\<tau> =\n    S ->iterate\\<^sub>S\\<^sub>e\\<^sub>t(x;acc=true | acc and P x) \\<tau>", "have and_comm : \"comp_fun_commute (\\<lambda>x acc. acc and P x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. comp_fun_commute (\\<lambda>x acc. acc and P x)", "apply(simp add: comp_fun_commute_def comp_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>y x.\n       (\\<lambda>xa. xa and P x and P y) = (\\<lambda>xa. xa and P y and P x)", "by (metis OclAnd_assoc OclAnd_commute)"], ["proof (state)\nthis:\n  comp_fun_commute (\\<lambda>x acc. acc and P x)\n\ngoal (1 subgoal):\n 1. OclForall S P \\<tau> =\n    S ->iterate\\<^sub>S\\<^sub>e\\<^sub>t(x;acc=true | acc and P x) \\<tau>", "have ex_insert : \"\\<And>x F P. (\\<exists>x\\<in>insert x F. P x) = (P x \\<or> (\\<exists>x\\<in>F. P x))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x F P.\n       (\\<exists>x\\<in>insert x F. P x) =\n       (P x \\<or> (\\<exists>x\\<in>F. P x))", "by (metis insert_iff)"], ["proof (state)\nthis:\n  (\\<exists>x\\<in>insert ?x ?F. ?P x) =\n  (?P ?x \\<or> (\\<exists>x\\<in>?F. ?P x))\n\ngoal (1 subgoal):\n 1. OclForall S P \\<tau> =\n    S ->iterate\\<^sub>S\\<^sub>e\\<^sub>t(x;acc=true | acc and P x) \\<tau>", "have destruct_ocl : \"\\<And>x \\<tau>. x = true \\<tau> \\<or> x = false \\<tau> \\<or> x = null \\<tau> \\<or> x = \\<bottom> \\<tau>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x \\<tau>.\n       x = true \\<tau> \\<or>\n       x = false \\<tau> \\<or> x = null \\<tau> \\<or> x = \\<bottom> \\<tau>", "apply(case_tac x)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x \\<tau>.\n       x = None \\<Longrightarrow>\n       x = true \\<tau> \\<or>\n       x = false \\<tau> \\<or> x = null \\<tau> \\<or> x = \\<bottom> \\<tau>\n 2. \\<And>x \\<tau> a.\n       x = \\<lfloor>a\\<rfloor> \\<Longrightarrow>\n       x = true \\<tau> \\<or>\n       x = false \\<tau> \\<or> x = null \\<tau> \\<or> x = \\<bottom> \\<tau>", "apply (metis bot_Boolean_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x \\<tau> a.\n       x = \\<lfloor>a\\<rfloor> \\<Longrightarrow>\n       x = true \\<tau> \\<or>\n       x = false \\<tau> \\<or> x = null \\<tau> \\<or> x = \\<bottom> \\<tau>", "apply(rename_tac x', case_tac x')"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x \\<tau> x'.\n       \\<lbrakk>x = \\<lfloor>x'\\<rfloor>; x' = None\\<rbrakk>\n       \\<Longrightarrow> x = true \\<tau> \\<or>\n                         x = false \\<tau> \\<or>\n                         x = null \\<tau> \\<or> x = \\<bottom> \\<tau>\n 2. \\<And>x \\<tau> x' a.\n       \\<lbrakk>x = \\<lfloor>x'\\<rfloor>; x' = \\<lfloor>a\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> x = true \\<tau> \\<or>\n                         x = false \\<tau> \\<or>\n                         x = null \\<tau> \\<or> x = \\<bottom> \\<tau>", "apply (metis null_Boolean_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x \\<tau> x' a.\n       \\<lbrakk>x = \\<lfloor>x'\\<rfloor>; x' = \\<lfloor>a\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> x = true \\<tau> \\<or>\n                         x = false \\<tau> \\<or>\n                         x = null \\<tau> \\<or> x = \\<bottom> \\<tau>", "apply(rename_tac x'', case_tac x'')"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x \\<tau> x' x''.\n       \\<lbrakk>x = \\<lfloor>x'\\<rfloor>; x' = \\<lfloor>x''\\<rfloor>;\n        x''\\<rbrakk>\n       \\<Longrightarrow> x = true \\<tau> \\<or>\n                         x = false \\<tau> \\<or>\n                         x = null \\<tau> \\<or> x = \\<bottom> \\<tau>\n 2. \\<And>x \\<tau> x' x''.\n       \\<lbrakk>x = \\<lfloor>x'\\<rfloor>; x' = \\<lfloor>x''\\<rfloor>;\n        \\<not> x''\\<rbrakk>\n       \\<Longrightarrow> x = true \\<tau> \\<or>\n                         x = false \\<tau> \\<or>\n                         x = null \\<tau> \\<or> x = \\<bottom> \\<tau>", "apply (metis (full_types) true_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x \\<tau> x' x''.\n       \\<lbrakk>x = \\<lfloor>x'\\<rfloor>; x' = \\<lfloor>x''\\<rfloor>;\n        \\<not> x''\\<rbrakk>\n       \\<Longrightarrow> x = true \\<tau> \\<or>\n                         x = false \\<tau> \\<or>\n                         x = null \\<tau> \\<or> x = \\<bottom> \\<tau>", "by (metis (full_types) false_def)"], ["proof (state)\nthis:\n  ?x1 = true ?\\<tau>1 \\<or>\n  ?x1 = false ?\\<tau>1 \\<or>\n  ?x1 = null ?\\<tau>1 \\<or> ?x1 = \\<bottom> ?\\<tau>1\n\ngoal (1 subgoal):\n 1. OclForall S P \\<tau> =\n    S ->iterate\\<^sub>S\\<^sub>e\\<^sub>t(x;acc=true | acc and P x) \\<tau>", "have disjE4 : \"\\<And> P1 P2 P3 P4 R.\n   (P1 \\<or> P2 \\<or> P3 \\<or> P4) \\<Longrightarrow> (P1 \\<Longrightarrow> R) \\<Longrightarrow> (P2 \\<Longrightarrow> R) \\<Longrightarrow> (P3 \\<Longrightarrow> R) \\<Longrightarrow> (P4 \\<Longrightarrow> R) \\<Longrightarrow> R\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>P1 P2 P3 P4 R.\n       \\<lbrakk>P1 \\<or> P2 \\<or> P3 \\<or> P4; P1 \\<Longrightarrow> R;\n        P2 \\<Longrightarrow> R; P3 \\<Longrightarrow> R;\n        P4 \\<Longrightarrow> R\\<rbrakk>\n       \\<Longrightarrow> R", "by metis"], ["proof (state)\nthis:\n  \\<lbrakk>?P1.2 \\<or> ?P2.2 \\<or> ?P3.2 \\<or> ?P4.2;\n   ?P1.2 \\<Longrightarrow> ?R2; ?P2.2 \\<Longrightarrow> ?R2;\n   ?P3.2 \\<Longrightarrow> ?R2; ?P4.2 \\<Longrightarrow> ?R2\\<rbrakk>\n  \\<Longrightarrow> ?R2\n\ngoal (1 subgoal):\n 1. OclForall S P \\<tau> =\n    S ->iterate\\<^sub>S\\<^sub>e\\<^sub>t(x;acc=true | acc and P x) \\<tau>", "let ?P_eq = \"\\<lambda>x b \\<tau>. P (\\<lambda>_. x) \\<tau> = b \\<tau>\""], ["proof (state)\ngoal (1 subgoal):\n 1. OclForall S P \\<tau> =\n    S ->iterate\\<^sub>S\\<^sub>e\\<^sub>t(x;acc=true | acc and P x) \\<tau>", "let ?P = \"\\<lambda>set b \\<tau>. \\<exists>x\\<in>set. ?P_eq x b \\<tau>\""], ["proof (state)\ngoal (1 subgoal):\n 1. OclForall S P \\<tau> =\n    S ->iterate\\<^sub>S\\<^sub>e\\<^sub>t(x;acc=true | acc and P x) \\<tau>", "let ?if = \"\\<lambda>f b c. if f b \\<tau> then b \\<tau> else c\""], ["proof (state)\ngoal (1 subgoal):\n 1. OclForall S P \\<tau> =\n    S ->iterate\\<^sub>S\\<^sub>e\\<^sub>t(x;acc=true | acc and P x) \\<tau>", "let ?forall = \"\\<lambda>P. ?if P false (?if P invalid (?if P null (true \\<tau>)))\""], ["proof (state)\ngoal (1 subgoal):\n 1. OclForall S P \\<tau> =\n    S ->iterate\\<^sub>S\\<^sub>e\\<^sub>t(x;acc=true | acc and P x) \\<tau>", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. OclForall S P \\<tau> =\n    S ->iterate\\<^sub>S\\<^sub>e\\<^sub>t(x;acc=true | acc and P x) \\<tau>", "apply(simp only: OclForall_def OclIterate_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (if (\\<delta> S) \\<tau> = true \\<tau>\n     then if \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n       (S \\<tau>)\\<rceil>\\<rceil>.\n                P (\\<lambda>_. x) \\<tau> = false \\<tau>\n          then false \\<tau>\n          else if \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n            (S \\<tau>)\\<rceil>\\<rceil>.\n                     P (\\<lambda>_. x) \\<tau> = invalid \\<tau>\n               then invalid \\<tau>\n               else if \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                 (S \\<tau>)\\<rceil>\\<rceil>.\n                          P (\\<lambda>_. x) \\<tau> = null \\<tau>\n                    then null \\<tau> else true \\<tau>\n     else \\<bottom>) =\n    (if (\\<delta> S) \\<tau> = true \\<tau> \\<and>\n        (\\<upsilon> true) \\<tau> = true \\<tau> \\<and>\n        finite\n         \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                          (S \\<tau>)\\<rceil>\\<rceil>\n     then Finite_Set.fold (\\<lambda>x acc. acc and P x) true\n           ((\\<lambda>a \\<tau>. a) `\n            \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                             (S \\<tau>)\\<rceil>\\<rceil>)\n           \\<tau>\n     else \\<bottom>)", "apply(case_tac \"\\<tau> \\<Turnstile> \\<delta> S\", simp only: OclValid_def)"], ["proof (prove)\ngoal (2 subgoals):\n 1. (\\<delta> S) \\<tau> = true \\<tau> \\<Longrightarrow>\n    (if true \\<tau> = true \\<tau>\n     then if \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n       (S \\<tau>)\\<rceil>\\<rceil>.\n                P (\\<lambda>_. x) \\<tau> = false \\<tau>\n          then false \\<tau>\n          else if \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n            (S \\<tau>)\\<rceil>\\<rceil>.\n                     P (\\<lambda>_. x) \\<tau> = invalid \\<tau>\n               then invalid \\<tau>\n               else if \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                 (S \\<tau>)\\<rceil>\\<rceil>.\n                          P (\\<lambda>_. x) \\<tau> = null \\<tau>\n                    then null \\<tau> else true \\<tau>\n     else \\<bottom>) =\n    (if true \\<tau> = true \\<tau> \\<and>\n        (\\<upsilon> true) \\<tau> = true \\<tau> \\<and>\n        finite\n         \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                          (S \\<tau>)\\<rceil>\\<rceil>\n     then Finite_Set.fold (\\<lambda>x acc. acc and P x) true\n           ((\\<lambda>a \\<tau>. a) `\n            \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                             (S \\<tau>)\\<rceil>\\<rceil>)\n           \\<tau>\n     else \\<bottom>)\n 2. \\<tau> |\\<noteq> \\<delta> S \\<Longrightarrow>\n    (if (\\<delta> S) \\<tau> = true \\<tau>\n     then if \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n       (S \\<tau>)\\<rceil>\\<rceil>.\n                P (\\<lambda>_. x) \\<tau> = false \\<tau>\n          then false \\<tau>\n          else if \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n            (S \\<tau>)\\<rceil>\\<rceil>.\n                     P (\\<lambda>_. x) \\<tau> = invalid \\<tau>\n               then invalid \\<tau>\n               else if \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                 (S \\<tau>)\\<rceil>\\<rceil>.\n                          P (\\<lambda>_. x) \\<tau> = null \\<tau>\n                    then null \\<tau> else true \\<tau>\n     else \\<bottom>) =\n    (if (\\<delta> S) \\<tau> = true \\<tau> \\<and>\n        (\\<upsilon> true) \\<tau> = true \\<tau> \\<and>\n        finite\n         \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                          (S \\<tau>)\\<rceil>\\<rceil>\n     then Finite_Set.fold (\\<lambda>x acc. acc and P x) true\n           ((\\<lambda>a \\<tau>. a) `\n            \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                             (S \\<tau>)\\<rceil>\\<rceil>)\n           \\<tau>\n     else \\<bottom>)", "apply(subgoal_tac \"let set = \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e (S \\<tau>)\\<rceil>\\<rceil> in\n                      ?forall (?P set) =\n                      Finite_Set.fold (\\<lambda>x acc. acc and P x) true ((\\<lambda>a \\<tau>. a) ` set) \\<tau>\",\n         simp only: Let_def, simp add: S_finite, simp only: Let_def)"], ["proof (prove)\ngoal (2 subgoals):\n 1. (\\<delta> S) \\<tau> = true \\<tau> \\<Longrightarrow>\n    (if \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n  (S \\<tau>)\\<rceil>\\<rceil>.\n           P (\\<lambda>_. x) \\<tau> = false \\<tau>\n     then false \\<tau>\n     else if \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n       (S \\<tau>)\\<rceil>\\<rceil>.\n                P (\\<lambda>_. x) \\<tau> = invalid \\<tau>\n          then invalid \\<tau>\n          else if \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n            (S \\<tau>)\\<rceil>\\<rceil>.\n                     P (\\<lambda>_. x) \\<tau> = null \\<tau>\n               then null \\<tau> else true \\<tau>) =\n    Finite_Set.fold (\\<lambda>x acc. acc and P x) true\n     ((\\<lambda>a \\<tau>. a) `\n      \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                       (S \\<tau>)\\<rceil>\\<rceil>)\n     \\<tau>\n 2. \\<tau> |\\<noteq> \\<delta> S \\<Longrightarrow>\n    (if (\\<delta> S) \\<tau> = true \\<tau>\n     then if \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n       (S \\<tau>)\\<rceil>\\<rceil>.\n                P (\\<lambda>_. x) \\<tau> = false \\<tau>\n          then false \\<tau>\n          else if \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n            (S \\<tau>)\\<rceil>\\<rceil>.\n                     P (\\<lambda>_. x) \\<tau> = invalid \\<tau>\n               then invalid \\<tau>\n               else if \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                 (S \\<tau>)\\<rceil>\\<rceil>.\n                          P (\\<lambda>_. x) \\<tau> = null \\<tau>\n                    then null \\<tau> else true \\<tau>\n     else \\<bottom>) =\n    (if (\\<delta> S) \\<tau> = true \\<tau> \\<and>\n        (\\<upsilon> true) \\<tau> = true \\<tau> \\<and>\n        finite\n         \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                          (S \\<tau>)\\<rceil>\\<rceil>\n     then Finite_Set.fold (\\<lambda>x acc. acc and P x) true\n           ((\\<lambda>a \\<tau>. a) `\n            \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                             (S \\<tau>)\\<rceil>\\<rceil>)\n           \\<tau>\n     else \\<bottom>)", "apply(case_tac \"\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e (S \\<tau>)\\<rceil>\\<rceil> = {}\", simp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>(\\<delta> S) \\<tau> = true \\<tau>;\n     \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                      (S \\<tau>)\\<rceil>\\<rceil> \\<noteq>\n     {}\\<rbrakk>\n    \\<Longrightarrow> (if \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                    (S \\<tau>)\\<rceil>\\<rceil>.\n                             P (\\<lambda>_. x) \\<tau> = false \\<tau>\n                       then false \\<tau>\n                       else if \\<exists>x\n  \\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                        (S \\<tau>)\\<rceil>\\<rceil>.\n                                  P (\\<lambda>_. x) \\<tau> = invalid \\<tau>\n                            then invalid \\<tau>\n                            else if \\<exists>x\n       \\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                             (S \\<tau>)\\<rceil>\\<rceil>.\n P (\\<lambda>_. x) \\<tau> = null \\<tau>\n                                 then null \\<tau> else true \\<tau>) =\n                      Finite_Set.fold (\\<lambda>x acc. acc and P x) true\n                       ((\\<lambda>a \\<tau>. a) `\n                        \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n   (S \\<tau>)\\<rceil>\\<rceil>)\n                       \\<tau>\n 2. \\<tau> |\\<noteq> \\<delta> S \\<Longrightarrow>\n    (if (\\<delta> S) \\<tau> = true \\<tau>\n     then if \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n       (S \\<tau>)\\<rceil>\\<rceil>.\n                P (\\<lambda>_. x) \\<tau> = false \\<tau>\n          then false \\<tau>\n          else if \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n            (S \\<tau>)\\<rceil>\\<rceil>.\n                     P (\\<lambda>_. x) \\<tau> = invalid \\<tau>\n               then invalid \\<tau>\n               else if \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                 (S \\<tau>)\\<rceil>\\<rceil>.\n                          P (\\<lambda>_. x) \\<tau> = null \\<tau>\n                    then null \\<tau> else true \\<tau>\n     else \\<bottom>) =\n    (if (\\<delta> S) \\<tau> = true \\<tau> \\<and>\n        (\\<upsilon> true) \\<tau> = true \\<tau> \\<and>\n        finite\n         \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                          (S \\<tau>)\\<rceil>\\<rceil>\n     then Finite_Set.fold (\\<lambda>x acc. acc and P x) true\n           ((\\<lambda>a \\<tau>. a) `\n            \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                             (S \\<tau>)\\<rceil>\\<rceil>)\n           \\<tau>\n     else \\<bottom>)", "apply(rule finite_ne_induct[OF S_finite], simp)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>(\\<delta> S) \\<tau> = true \\<tau>;\n        \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                         (S \\<tau>)\\<rceil>\\<rceil> \\<noteq>\n        {}\\<rbrakk>\n       \\<Longrightarrow> (if \\<exists>x\\<in>{x}.\n                                P (\\<lambda>_. x) \\<tau> = false \\<tau>\n                          then false \\<tau>\n                          else if \\<exists>x\\<in>{x}.\n                                     P (\\<lambda>_. x) \\<tau> =\n                                     invalid \\<tau>\n                               then invalid \\<tau>\n                               else if \\<exists>x\\<in>{x}.\n    P (\\<lambda>_. x) \\<tau> = null \\<tau>\n                                    then null \\<tau> else true \\<tau>) =\n                         Finite_Set.fold (\\<lambda>x acc. acc and P x) true\n                          ((\\<lambda>a \\<tau>. a) ` {x}) \\<tau>\n 2. \\<And>x F.\n       \\<lbrakk>(\\<delta> S) \\<tau> = true \\<tau>;\n        \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                         (S \\<tau>)\\<rceil>\\<rceil> \\<noteq>\n        {};\n        finite F; F \\<noteq> {}; x \\<notin> F;\n        (if \\<exists>x\\<in>F. P (\\<lambda>_. x) \\<tau> = false \\<tau>\n         then false \\<tau>\n         else if \\<exists>x\\<in>F. P (\\<lambda>_. x) \\<tau> = invalid \\<tau>\n              then invalid \\<tau>\n              else if \\<exists>x\\<in>F.\n                         P (\\<lambda>_. x) \\<tau> = null \\<tau>\n                   then null \\<tau> else true \\<tau>) =\n        Finite_Set.fold (\\<lambda>x acc. acc and P x) true\n         ((\\<lambda>a \\<tau>. a) ` F) \\<tau>\\<rbrakk>\n       \\<Longrightarrow> (if \\<exists>x\\<in>insert x F.\n                                P (\\<lambda>_. x) \\<tau> = false \\<tau>\n                          then false \\<tau>\n                          else if \\<exists>x\\<in>insert x F.\n                                     P (\\<lambda>_. x) \\<tau> =\n                                     invalid \\<tau>\n                               then invalid \\<tau>\n                               else if \\<exists>x\\<in>insert x F.\n    P (\\<lambda>_. x) \\<tau> = null \\<tau>\n                                    then null \\<tau> else true \\<tau>) =\n                         Finite_Set.fold (\\<lambda>x acc. acc and P x) true\n                          ((\\<lambda>a \\<tau>. a) ` insert x F) \\<tau>\n 3. \\<tau> |\\<noteq> \\<delta> S \\<Longrightarrow>\n    (if (\\<delta> S) \\<tau> = true \\<tau>\n     then if \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n       (S \\<tau>)\\<rceil>\\<rceil>.\n                P (\\<lambda>_. x) \\<tau> = false \\<tau>\n          then false \\<tau>\n          else if \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n            (S \\<tau>)\\<rceil>\\<rceil>.\n                     P (\\<lambda>_. x) \\<tau> = invalid \\<tau>\n               then invalid \\<tau>\n               else if \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                 (S \\<tau>)\\<rceil>\\<rceil>.\n                          P (\\<lambda>_. x) \\<tau> = null \\<tau>\n                    then null \\<tau> else true \\<tau>\n     else \\<bottom>) =\n    (if (\\<delta> S) \\<tau> = true \\<tau> \\<and>\n        (\\<upsilon> true) \\<tau> = true \\<tau> \\<and>\n        finite\n         \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                          (S \\<tau>)\\<rceil>\\<rceil>\n     then Finite_Set.fold (\\<lambda>x acc. acc and P x) true\n           ((\\<lambda>a \\<tau>. a) `\n            \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                             (S \\<tau>)\\<rceil>\\<rceil>)\n           \\<tau>\n     else \\<bottom>)", "(* *)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>(\\<delta> S) \\<tau> = true \\<tau>;\n        \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                         (S \\<tau>)\\<rceil>\\<rceil> \\<noteq>\n        {}\\<rbrakk>\n       \\<Longrightarrow> (if \\<exists>x\\<in>{x}.\n                                P (\\<lambda>_. x) \\<tau> = false \\<tau>\n                          then false \\<tau>\n                          else if \\<exists>x\\<in>{x}.\n                                     P (\\<lambda>_. x) \\<tau> =\n                                     invalid \\<tau>\n                               then invalid \\<tau>\n                               else if \\<exists>x\\<in>{x}.\n    P (\\<lambda>_. x) \\<tau> = null \\<tau>\n                                    then null \\<tau> else true \\<tau>) =\n                         Finite_Set.fold (\\<lambda>x acc. acc and P x) true\n                          ((\\<lambda>a \\<tau>. a) ` {x}) \\<tau>\n 2. \\<And>x F.\n       \\<lbrakk>(\\<delta> S) \\<tau> = true \\<tau>;\n        \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                         (S \\<tau>)\\<rceil>\\<rceil> \\<noteq>\n        {};\n        finite F; F \\<noteq> {}; x \\<notin> F;\n        (if \\<exists>x\\<in>F. P (\\<lambda>_. x) \\<tau> = false \\<tau>\n         then false \\<tau>\n         else if \\<exists>x\\<in>F. P (\\<lambda>_. x) \\<tau> = invalid \\<tau>\n              then invalid \\<tau>\n              else if \\<exists>x\\<in>F.\n                         P (\\<lambda>_. x) \\<tau> = null \\<tau>\n                   then null \\<tau> else true \\<tau>) =\n        Finite_Set.fold (\\<lambda>x acc. acc and P x) true\n         ((\\<lambda>a \\<tau>. a) ` F) \\<tau>\\<rbrakk>\n       \\<Longrightarrow> (if \\<exists>x\\<in>insert x F.\n                                P (\\<lambda>_. x) \\<tau> = false \\<tau>\n                          then false \\<tau>\n                          else if \\<exists>x\\<in>insert x F.\n                                     P (\\<lambda>_. x) \\<tau> =\n                                     invalid \\<tau>\n                               then invalid \\<tau>\n                               else if \\<exists>x\\<in>insert x F.\n    P (\\<lambda>_. x) \\<tau> = null \\<tau>\n                                    then null \\<tau> else true \\<tau>) =\n                         Finite_Set.fold (\\<lambda>x acc. acc and P x) true\n                          ((\\<lambda>a \\<tau>. a) ` insert x F) \\<tau>\n 3. \\<tau> |\\<noteq> \\<delta> S \\<Longrightarrow>\n    (if (\\<delta> S) \\<tau> = true \\<tau>\n     then if \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n       (S \\<tau>)\\<rceil>\\<rceil>.\n                P (\\<lambda>_. x) \\<tau> = false \\<tau>\n          then false \\<tau>\n          else if \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n            (S \\<tau>)\\<rceil>\\<rceil>.\n                     P (\\<lambda>_. x) \\<tau> = invalid \\<tau>\n               then invalid \\<tau>\n               else if \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                 (S \\<tau>)\\<rceil>\\<rceil>.\n                          P (\\<lambda>_. x) \\<tau> = null \\<tau>\n                    then null \\<tau> else true \\<tau>\n     else \\<bottom>) =\n    (if (\\<delta> S) \\<tau> = true \\<tau> \\<and>\n        (\\<upsilon> true) \\<tau> = true \\<tau> \\<and>\n        finite\n         \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                          (S \\<tau>)\\<rceil>\\<rceil>\n     then Finite_Set.fold (\\<lambda>x acc. acc and P x) true\n           ((\\<lambda>a \\<tau>. a) `\n            \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                             (S \\<tau>)\\<rceil>\\<rceil>)\n           \\<tau>\n     else \\<bottom>)", "apply(simp only: image_insert)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>(\\<delta> S) \\<tau> = true \\<tau>;\n        \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                         (S \\<tau>)\\<rceil>\\<rceil> \\<noteq>\n        {}\\<rbrakk>\n       \\<Longrightarrow> (if \\<exists>x\\<in>{x}.\n                                P (\\<lambda>_. x) \\<tau> = false \\<tau>\n                          then false \\<tau>\n                          else if \\<exists>x\\<in>{x}.\n                                     P (\\<lambda>_. x) \\<tau> =\n                                     invalid \\<tau>\n                               then invalid \\<tau>\n                               else if \\<exists>x\\<in>{x}.\n    P (\\<lambda>_. x) \\<tau> = null \\<tau>\n                                    then null \\<tau> else true \\<tau>) =\n                         Finite_Set.fold (\\<lambda>x acc. acc and P x) true\n                          (insert (\\<lambda>\\<tau>. x)\n                            ((\\<lambda>a \\<tau>. a) ` {}))\n                          \\<tau>\n 2. \\<And>x F.\n       \\<lbrakk>(\\<delta> S) \\<tau> = true \\<tau>;\n        \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                         (S \\<tau>)\\<rceil>\\<rceil> \\<noteq>\n        {};\n        finite F; F \\<noteq> {}; x \\<notin> F;\n        (if \\<exists>x\\<in>F. P (\\<lambda>_. x) \\<tau> = false \\<tau>\n         then false \\<tau>\n         else if \\<exists>x\\<in>F. P (\\<lambda>_. x) \\<tau> = invalid \\<tau>\n              then invalid \\<tau>\n              else if \\<exists>x\\<in>F.\n                         P (\\<lambda>_. x) \\<tau> = null \\<tau>\n                   then null \\<tau> else true \\<tau>) =\n        Finite_Set.fold (\\<lambda>x acc. acc and P x) true\n         ((\\<lambda>a \\<tau>. a) ` F) \\<tau>\\<rbrakk>\n       \\<Longrightarrow> (if \\<exists>x\\<in>insert x F.\n                                P (\\<lambda>_. x) \\<tau> = false \\<tau>\n                          then false \\<tau>\n                          else if \\<exists>x\\<in>insert x F.\n                                     P (\\<lambda>_. x) \\<tau> =\n                                     invalid \\<tau>\n                               then invalid \\<tau>\n                               else if \\<exists>x\\<in>insert x F.\n    P (\\<lambda>_. x) \\<tau> = null \\<tau>\n                                    then null \\<tau> else true \\<tau>) =\n                         Finite_Set.fold (\\<lambda>x acc. acc and P x) true\n                          ((\\<lambda>a \\<tau>. a) ` insert x F) \\<tau>\n 3. \\<tau> |\\<noteq> \\<delta> S \\<Longrightarrow>\n    (if (\\<delta> S) \\<tau> = true \\<tau>\n     then if \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n       (S \\<tau>)\\<rceil>\\<rceil>.\n                P (\\<lambda>_. x) \\<tau> = false \\<tau>\n          then false \\<tau>\n          else if \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n            (S \\<tau>)\\<rceil>\\<rceil>.\n                     P (\\<lambda>_. x) \\<tau> = invalid \\<tau>\n               then invalid \\<tau>\n               else if \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                 (S \\<tau>)\\<rceil>\\<rceil>.\n                          P (\\<lambda>_. x) \\<tau> = null \\<tau>\n                    then null \\<tau> else true \\<tau>\n     else \\<bottom>) =\n    (if (\\<delta> S) \\<tau> = true \\<tau> \\<and>\n        (\\<upsilon> true) \\<tau> = true \\<tau> \\<and>\n        finite\n         \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                          (S \\<tau>)\\<rceil>\\<rceil>\n     then Finite_Set.fold (\\<lambda>x acc. acc and P x) true\n           ((\\<lambda>a \\<tau>. a) `\n            \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                             (S \\<tau>)\\<rceil>\\<rceil>)\n           \\<tau>\n     else \\<bottom>)", "apply(subst comp_fun_commute.fold_insert[OF and_comm], simp)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>(\\<delta> S) \\<tau> = true \\<tau>;\n        \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                         (S \\<tau>)\\<rceil>\\<rceil> \\<noteq>\n        {}\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>\\<tau>. x)\n                         \\<notin> (\\<lambda>a \\<tau>. a) ` {}\n 2. \\<And>x.\n       \\<lbrakk>(\\<delta> S) \\<tau> = true \\<tau>;\n        \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                         (S \\<tau>)\\<rceil>\\<rceil> \\<noteq>\n        {}\\<rbrakk>\n       \\<Longrightarrow> (if \\<exists>x\\<in>{x}.\n                                P (\\<lambda>_. x) \\<tau> = false \\<tau>\n                          then false \\<tau>\n                          else if \\<exists>x\\<in>{x}.\n                                     P (\\<lambda>_. x) \\<tau> =\n                                     invalid \\<tau>\n                               then invalid \\<tau>\n                               else if \\<exists>x\\<in>{x}.\n    P (\\<lambda>_. x) \\<tau> = null \\<tau>\n                                    then null \\<tau> else true \\<tau>) =\n                         (Finite_Set.fold (\\<lambda>x acc. acc and P x) true\n                           ((\\<lambda>a \\<tau>. a) ` {}) and\n                          P (\\<lambda>\\<tau>. x))\n                          \\<tau>\n 3. \\<And>x F.\n       \\<lbrakk>(\\<delta> S) \\<tau> = true \\<tau>;\n        \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                         (S \\<tau>)\\<rceil>\\<rceil> \\<noteq>\n        {};\n        finite F; F \\<noteq> {}; x \\<notin> F;\n        (if \\<exists>x\\<in>F. P (\\<lambda>_. x) \\<tau> = false \\<tau>\n         then false \\<tau>\n         else if \\<exists>x\\<in>F. P (\\<lambda>_. x) \\<tau> = invalid \\<tau>\n              then invalid \\<tau>\n              else if \\<exists>x\\<in>F.\n                         P (\\<lambda>_. x) \\<tau> = null \\<tau>\n                   then null \\<tau> else true \\<tau>) =\n        Finite_Set.fold (\\<lambda>x acc. acc and P x) true\n         ((\\<lambda>a \\<tau>. a) ` F) \\<tau>\\<rbrakk>\n       \\<Longrightarrow> (if \\<exists>x\\<in>insert x F.\n                                P (\\<lambda>_. x) \\<tau> = false \\<tau>\n                          then false \\<tau>\n                          else if \\<exists>x\\<in>insert x F.\n                                     P (\\<lambda>_. x) \\<tau> =\n                                     invalid \\<tau>\n                               then invalid \\<tau>\n                               else if \\<exists>x\\<in>insert x F.\n    P (\\<lambda>_. x) \\<tau> = null \\<tau>\n                                    then null \\<tau> else true \\<tau>) =\n                         Finite_Set.fold (\\<lambda>x acc. acc and P x) true\n                          ((\\<lambda>a \\<tau>. a) ` insert x F) \\<tau>\n 4. \\<tau> |\\<noteq> \\<delta> S \\<Longrightarrow>\n    (if (\\<delta> S) \\<tau> = true \\<tau>\n     then if \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n       (S \\<tau>)\\<rceil>\\<rceil>.\n                P (\\<lambda>_. x) \\<tau> = false \\<tau>\n          then false \\<tau>\n          else if \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n            (S \\<tau>)\\<rceil>\\<rceil>.\n                     P (\\<lambda>_. x) \\<tau> = invalid \\<tau>\n               then invalid \\<tau>\n               else if \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                 (S \\<tau>)\\<rceil>\\<rceil>.\n                          P (\\<lambda>_. x) \\<tau> = null \\<tau>\n                    then null \\<tau> else true \\<tau>\n     else \\<bottom>) =\n    (if (\\<delta> S) \\<tau> = true \\<tau> \\<and>\n        (\\<upsilon> true) \\<tau> = true \\<tau> \\<and>\n        finite\n         \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                          (S \\<tau>)\\<rceil>\\<rceil>\n     then Finite_Set.fold (\\<lambda>x acc. acc and P x) true\n           ((\\<lambda>a \\<tau>. a) `\n            \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                             (S \\<tau>)\\<rceil>\\<rceil>)\n           \\<tau>\n     else \\<bottom>)", "apply (metis empty_iff image_empty)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>(\\<delta> S) \\<tau> = true \\<tau>;\n        \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                         (S \\<tau>)\\<rceil>\\<rceil> \\<noteq>\n        {}\\<rbrakk>\n       \\<Longrightarrow> (if \\<exists>x\\<in>{x}.\n                                P (\\<lambda>_. x) \\<tau> = false \\<tau>\n                          then false \\<tau>\n                          else if \\<exists>x\\<in>{x}.\n                                     P (\\<lambda>_. x) \\<tau> =\n                                     invalid \\<tau>\n                               then invalid \\<tau>\n                               else if \\<exists>x\\<in>{x}.\n    P (\\<lambda>_. x) \\<tau> = null \\<tau>\n                                    then null \\<tau> else true \\<tau>) =\n                         (Finite_Set.fold (\\<lambda>x acc. acc and P x) true\n                           ((\\<lambda>a \\<tau>. a) ` {}) and\n                          P (\\<lambda>\\<tau>. x))\n                          \\<tau>\n 2. \\<And>x F.\n       \\<lbrakk>(\\<delta> S) \\<tau> = true \\<tau>;\n        \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                         (S \\<tau>)\\<rceil>\\<rceil> \\<noteq>\n        {};\n        finite F; F \\<noteq> {}; x \\<notin> F;\n        (if \\<exists>x\\<in>F. P (\\<lambda>_. x) \\<tau> = false \\<tau>\n         then false \\<tau>\n         else if \\<exists>x\\<in>F. P (\\<lambda>_. x) \\<tau> = invalid \\<tau>\n              then invalid \\<tau>\n              else if \\<exists>x\\<in>F.\n                         P (\\<lambda>_. x) \\<tau> = null \\<tau>\n                   then null \\<tau> else true \\<tau>) =\n        Finite_Set.fold (\\<lambda>x acc. acc and P x) true\n         ((\\<lambda>a \\<tau>. a) ` F) \\<tau>\\<rbrakk>\n       \\<Longrightarrow> (if \\<exists>x\\<in>insert x F.\n                                P (\\<lambda>_. x) \\<tau> = false \\<tau>\n                          then false \\<tau>\n                          else if \\<exists>x\\<in>insert x F.\n                                     P (\\<lambda>_. x) \\<tau> =\n                                     invalid \\<tau>\n                               then invalid \\<tau>\n                               else if \\<exists>x\\<in>insert x F.\n    P (\\<lambda>_. x) \\<tau> = null \\<tau>\n                                    then null \\<tau> else true \\<tau>) =\n                         Finite_Set.fold (\\<lambda>x acc. acc and P x) true\n                          ((\\<lambda>a \\<tau>. a) ` insert x F) \\<tau>\n 3. \\<tau> |\\<noteq> \\<delta> S \\<Longrightarrow>\n    (if (\\<delta> S) \\<tau> = true \\<tau>\n     then if \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n       (S \\<tau>)\\<rceil>\\<rceil>.\n                P (\\<lambda>_. x) \\<tau> = false \\<tau>\n          then false \\<tau>\n          else if \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n            (S \\<tau>)\\<rceil>\\<rceil>.\n                     P (\\<lambda>_. x) \\<tau> = invalid \\<tau>\n               then invalid \\<tau>\n               else if \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                 (S \\<tau>)\\<rceil>\\<rceil>.\n                          P (\\<lambda>_. x) \\<tau> = null \\<tau>\n                    then null \\<tau> else true \\<tau>\n     else \\<bottom>) =\n    (if (\\<delta> S) \\<tau> = true \\<tau> \\<and>\n        (\\<upsilon> true) \\<tau> = true \\<tau> \\<and>\n        finite\n         \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                          (S \\<tau>)\\<rceil>\\<rceil>\n     then Finite_Set.fold (\\<lambda>x acc. acc and P x) true\n           ((\\<lambda>a \\<tau>. a) `\n            \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                             (S \\<tau>)\\<rceil>\\<rceil>)\n           \\<tau>\n     else \\<bottom>)", "apply(simp add: invalid_def)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>(\\<delta> S) \\<tau> = true \\<tau>;\n        \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                         (S \\<tau>)\\<rceil>\\<rceil> \\<noteq>\n        {}\\<rbrakk>\n       \\<Longrightarrow> P (\\<lambda>_. x) \\<tau> \\<noteq>\n                         null \\<tau> \\<longrightarrow>\n                         P (\\<lambda>_. x) \\<tau> \\<noteq>\n                         \\<bottom> \\<longrightarrow>\n                         P (\\<lambda>_. x) \\<tau> \\<noteq>\n                         false \\<tau> \\<longrightarrow>\n                         true \\<tau> = P (\\<lambda>\\<tau>. x) \\<tau>\n 2. \\<And>x F.\n       \\<lbrakk>(\\<delta> S) \\<tau> = true \\<tau>;\n        \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                         (S \\<tau>)\\<rceil>\\<rceil> \\<noteq>\n        {};\n        finite F; F \\<noteq> {}; x \\<notin> F;\n        (if \\<exists>x\\<in>F. P (\\<lambda>_. x) \\<tau> = false \\<tau>\n         then false \\<tau>\n         else if \\<exists>x\\<in>F. P (\\<lambda>_. x) \\<tau> = invalid \\<tau>\n              then invalid \\<tau>\n              else if \\<exists>x\\<in>F.\n                         P (\\<lambda>_. x) \\<tau> = null \\<tau>\n                   then null \\<tau> else true \\<tau>) =\n        Finite_Set.fold (\\<lambda>x acc. acc and P x) true\n         ((\\<lambda>a \\<tau>. a) ` F) \\<tau>\\<rbrakk>\n       \\<Longrightarrow> (if \\<exists>x\\<in>insert x F.\n                                P (\\<lambda>_. x) \\<tau> = false \\<tau>\n                          then false \\<tau>\n                          else if \\<exists>x\\<in>insert x F.\n                                     P (\\<lambda>_. x) \\<tau> =\n                                     invalid \\<tau>\n                               then invalid \\<tau>\n                               else if \\<exists>x\\<in>insert x F.\n    P (\\<lambda>_. x) \\<tau> = null \\<tau>\n                                    then null \\<tau> else true \\<tau>) =\n                         Finite_Set.fold (\\<lambda>x acc. acc and P x) true\n                          ((\\<lambda>a \\<tau>. a) ` insert x F) \\<tau>\n 3. \\<tau> |\\<noteq> \\<delta> S \\<Longrightarrow>\n    (if (\\<delta> S) \\<tau> = true \\<tau>\n     then if \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n       (S \\<tau>)\\<rceil>\\<rceil>.\n                P (\\<lambda>_. x) \\<tau> = false \\<tau>\n          then false \\<tau>\n          else if \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n            (S \\<tau>)\\<rceil>\\<rceil>.\n                     P (\\<lambda>_. x) \\<tau> = invalid \\<tau>\n               then invalid \\<tau>\n               else if \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                 (S \\<tau>)\\<rceil>\\<rceil>.\n                          P (\\<lambda>_. x) \\<tau> = null \\<tau>\n                    then null \\<tau> else true \\<tau>\n     else \\<bottom>) =\n    (if (\\<delta> S) \\<tau> = true \\<tau> \\<and>\n        (\\<upsilon> true) \\<tau> = true \\<tau> \\<and>\n        finite\n         \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                          (S \\<tau>)\\<rceil>\\<rceil>\n     then Finite_Set.fold (\\<lambda>x acc. acc and P x) true\n           ((\\<lambda>a \\<tau>. a) `\n            \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                             (S \\<tau>)\\<rceil>\\<rceil>)\n           \\<tau>\n     else \\<bottom>)", "apply (metis bot_fun_def destruct_ocl null_fun_def)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x F.\n       \\<lbrakk>(\\<delta> S) \\<tau> = true \\<tau>;\n        \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                         (S \\<tau>)\\<rceil>\\<rceil> \\<noteq>\n        {};\n        finite F; F \\<noteq> {}; x \\<notin> F;\n        (if \\<exists>x\\<in>F. P (\\<lambda>_. x) \\<tau> = false \\<tau>\n         then false \\<tau>\n         else if \\<exists>x\\<in>F. P (\\<lambda>_. x) \\<tau> = invalid \\<tau>\n              then invalid \\<tau>\n              else if \\<exists>x\\<in>F.\n                         P (\\<lambda>_. x) \\<tau> = null \\<tau>\n                   then null \\<tau> else true \\<tau>) =\n        Finite_Set.fold (\\<lambda>x acc. acc and P x) true\n         ((\\<lambda>a \\<tau>. a) ` F) \\<tau>\\<rbrakk>\n       \\<Longrightarrow> (if \\<exists>x\\<in>insert x F.\n                                P (\\<lambda>_. x) \\<tau> = false \\<tau>\n                          then false \\<tau>\n                          else if \\<exists>x\\<in>insert x F.\n                                     P (\\<lambda>_. x) \\<tau> =\n                                     invalid \\<tau>\n                               then invalid \\<tau>\n                               else if \\<exists>x\\<in>insert x F.\n    P (\\<lambda>_. x) \\<tau> = null \\<tau>\n                                    then null \\<tau> else true \\<tau>) =\n                         Finite_Set.fold (\\<lambda>x acc. acc and P x) true\n                          ((\\<lambda>a \\<tau>. a) ` insert x F) \\<tau>\n 2. \\<tau> |\\<noteq> \\<delta> S \\<Longrightarrow>\n    (if (\\<delta> S) \\<tau> = true \\<tau>\n     then if \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n       (S \\<tau>)\\<rceil>\\<rceil>.\n                P (\\<lambda>_. x) \\<tau> = false \\<tau>\n          then false \\<tau>\n          else if \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n            (S \\<tau>)\\<rceil>\\<rceil>.\n                     P (\\<lambda>_. x) \\<tau> = invalid \\<tau>\n               then invalid \\<tau>\n               else if \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                 (S \\<tau>)\\<rceil>\\<rceil>.\n                          P (\\<lambda>_. x) \\<tau> = null \\<tau>\n                    then null \\<tau> else true \\<tau>\n     else \\<bottom>) =\n    (if (\\<delta> S) \\<tau> = true \\<tau> \\<and>\n        (\\<upsilon> true) \\<tau> = true \\<tau> \\<and>\n        finite\n         \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                          (S \\<tau>)\\<rceil>\\<rceil>\n     then Finite_Set.fold (\\<lambda>x acc. acc and P x) true\n           ((\\<lambda>a \\<tau>. a) `\n            \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                             (S \\<tau>)\\<rceil>\\<rceil>)\n           \\<tau>\n     else \\<bottom>)", "(* *)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x F.\n       \\<lbrakk>(\\<delta> S) \\<tau> = true \\<tau>;\n        \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                         (S \\<tau>)\\<rceil>\\<rceil> \\<noteq>\n        {};\n        finite F; F \\<noteq> {}; x \\<notin> F;\n        (if \\<exists>x\\<in>F. P (\\<lambda>_. x) \\<tau> = false \\<tau>\n         then false \\<tau>\n         else if \\<exists>x\\<in>F. P (\\<lambda>_. x) \\<tau> = invalid \\<tau>\n              then invalid \\<tau>\n              else if \\<exists>x\\<in>F.\n                         P (\\<lambda>_. x) \\<tau> = null \\<tau>\n                   then null \\<tau> else true \\<tau>) =\n        Finite_Set.fold (\\<lambda>x acc. acc and P x) true\n         ((\\<lambda>a \\<tau>. a) ` F) \\<tau>\\<rbrakk>\n       \\<Longrightarrow> (if \\<exists>x\\<in>insert x F.\n                                P (\\<lambda>_. x) \\<tau> = false \\<tau>\n                          then false \\<tau>\n                          else if \\<exists>x\\<in>insert x F.\n                                     P (\\<lambda>_. x) \\<tau> =\n                                     invalid \\<tau>\n                               then invalid \\<tau>\n                               else if \\<exists>x\\<in>insert x F.\n    P (\\<lambda>_. x) \\<tau> = null \\<tau>\n                                    then null \\<tau> else true \\<tau>) =\n                         Finite_Set.fold (\\<lambda>x acc. acc and P x) true\n                          ((\\<lambda>a \\<tau>. a) ` insert x F) \\<tau>\n 2. \\<tau> |\\<noteq> \\<delta> S \\<Longrightarrow>\n    (if (\\<delta> S) \\<tau> = true \\<tau>\n     then if \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n       (S \\<tau>)\\<rceil>\\<rceil>.\n                P (\\<lambda>_. x) \\<tau> = false \\<tau>\n          then false \\<tau>\n          else if \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n            (S \\<tau>)\\<rceil>\\<rceil>.\n                     P (\\<lambda>_. x) \\<tau> = invalid \\<tau>\n               then invalid \\<tau>\n               else if \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                 (S \\<tau>)\\<rceil>\\<rceil>.\n                          P (\\<lambda>_. x) \\<tau> = null \\<tau>\n                    then null \\<tau> else true \\<tau>\n     else \\<bottom>) =\n    (if (\\<delta> S) \\<tau> = true \\<tau> \\<and>\n        (\\<upsilon> true) \\<tau> = true \\<tau> \\<and>\n        finite\n         \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                          (S \\<tau>)\\<rceil>\\<rceil>\n     then Finite_Set.fold (\\<lambda>x acc. acc and P x) true\n           ((\\<lambda>a \\<tau>. a) `\n            \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                             (S \\<tau>)\\<rceil>\\<rceil>)\n           \\<tau>\n     else \\<bottom>)", "apply(simp only: image_insert)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x F.\n       \\<lbrakk>(\\<delta> S) \\<tau> = true \\<tau>;\n        \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                         (S \\<tau>)\\<rceil>\\<rceil> \\<noteq>\n        {};\n        finite F; F \\<noteq> {}; x \\<notin> F;\n        (if \\<exists>x\\<in>F. P (\\<lambda>_. x) \\<tau> = false \\<tau>\n         then false \\<tau>\n         else if \\<exists>x\\<in>F. P (\\<lambda>_. x) \\<tau> = invalid \\<tau>\n              then invalid \\<tau>\n              else if \\<exists>x\\<in>F.\n                         P (\\<lambda>_. x) \\<tau> = null \\<tau>\n                   then null \\<tau> else true \\<tau>) =\n        Finite_Set.fold (\\<lambda>x acc. acc and P x) true\n         ((\\<lambda>a \\<tau>. a) ` F) \\<tau>\\<rbrakk>\n       \\<Longrightarrow> (if \\<exists>x\\<in>insert x F.\n                                P (\\<lambda>_. x) \\<tau> = false \\<tau>\n                          then false \\<tau>\n                          else if \\<exists>x\\<in>insert x F.\n                                     P (\\<lambda>_. x) \\<tau> =\n                                     invalid \\<tau>\n                               then invalid \\<tau>\n                               else if \\<exists>x\\<in>insert x F.\n    P (\\<lambda>_. x) \\<tau> = null \\<tau>\n                                    then null \\<tau> else true \\<tau>) =\n                         Finite_Set.fold (\\<lambda>x acc. acc and P x) true\n                          (insert (\\<lambda>\\<tau>. x)\n                            ((\\<lambda>a \\<tau>. a) ` F))\n                          \\<tau>\n 2. \\<tau> |\\<noteq> \\<delta> S \\<Longrightarrow>\n    (if (\\<delta> S) \\<tau> = true \\<tau>\n     then if \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n       (S \\<tau>)\\<rceil>\\<rceil>.\n                P (\\<lambda>_. x) \\<tau> = false \\<tau>\n          then false \\<tau>\n          else if \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n            (S \\<tau>)\\<rceil>\\<rceil>.\n                     P (\\<lambda>_. x) \\<tau> = invalid \\<tau>\n               then invalid \\<tau>\n               else if \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                 (S \\<tau>)\\<rceil>\\<rceil>.\n                          P (\\<lambda>_. x) \\<tau> = null \\<tau>\n                    then null \\<tau> else true \\<tau>\n     else \\<bottom>) =\n    (if (\\<delta> S) \\<tau> = true \\<tau> \\<and>\n        (\\<upsilon> true) \\<tau> = true \\<tau> \\<and>\n        finite\n         \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                          (S \\<tau>)\\<rceil>\\<rceil>\n     then Finite_Set.fold (\\<lambda>x acc. acc and P x) true\n           ((\\<lambda>a \\<tau>. a) `\n            \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                             (S \\<tau>)\\<rceil>\\<rceil>)\n           \\<tau>\n     else \\<bottom>)", "apply(subst comp_fun_commute.fold_insert[OF and_comm], simp)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>x F.\n       \\<lbrakk>(\\<delta> S) \\<tau> = true \\<tau>;\n        \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                         (S \\<tau>)\\<rceil>\\<rceil> \\<noteq>\n        {};\n        finite F; F \\<noteq> {}; x \\<notin> F;\n        (if \\<exists>x\\<in>F. P (\\<lambda>_. x) \\<tau> = false \\<tau>\n         then false \\<tau>\n         else if \\<exists>x\\<in>F. P (\\<lambda>_. x) \\<tau> = invalid \\<tau>\n              then invalid \\<tau>\n              else if \\<exists>x\\<in>F.\n                         P (\\<lambda>_. x) \\<tau> = null \\<tau>\n                   then null \\<tau> else true \\<tau>) =\n        Finite_Set.fold (\\<lambda>x acc. acc and P x) true\n         ((\\<lambda>a \\<tau>. a) ` F) \\<tau>\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>\\<tau>. x)\n                         \\<notin> (\\<lambda>a \\<tau>. a) ` F\n 2. \\<And>x F.\n       \\<lbrakk>(\\<delta> S) \\<tau> = true \\<tau>;\n        \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                         (S \\<tau>)\\<rceil>\\<rceil> \\<noteq>\n        {};\n        finite F; F \\<noteq> {}; x \\<notin> F;\n        (if \\<exists>x\\<in>F. P (\\<lambda>_. x) \\<tau> = false \\<tau>\n         then false \\<tau>\n         else if \\<exists>x\\<in>F. P (\\<lambda>_. x) \\<tau> = invalid \\<tau>\n              then invalid \\<tau>\n              else if \\<exists>x\\<in>F.\n                         P (\\<lambda>_. x) \\<tau> = null \\<tau>\n                   then null \\<tau> else true \\<tau>) =\n        Finite_Set.fold (\\<lambda>x acc. acc and P x) true\n         ((\\<lambda>a \\<tau>. a) ` F) \\<tau>\\<rbrakk>\n       \\<Longrightarrow> (if \\<exists>x\\<in>insert x F.\n                                P (\\<lambda>_. x) \\<tau> = false \\<tau>\n                          then false \\<tau>\n                          else if \\<exists>x\\<in>insert x F.\n                                     P (\\<lambda>_. x) \\<tau> =\n                                     invalid \\<tau>\n                               then invalid \\<tau>\n                               else if \\<exists>x\\<in>insert x F.\n    P (\\<lambda>_. x) \\<tau> = null \\<tau>\n                                    then null \\<tau> else true \\<tau>) =\n                         (Finite_Set.fold (\\<lambda>x acc. acc and P x) true\n                           ((\\<lambda>a \\<tau>. a) ` F) and\n                          P (\\<lambda>\\<tau>. x))\n                          \\<tau>\n 3. \\<tau> |\\<noteq> \\<delta> S \\<Longrightarrow>\n    (if (\\<delta> S) \\<tau> = true \\<tau>\n     then if \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n       (S \\<tau>)\\<rceil>\\<rceil>.\n                P (\\<lambda>_. x) \\<tau> = false \\<tau>\n          then false \\<tau>\n          else if \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n            (S \\<tau>)\\<rceil>\\<rceil>.\n                     P (\\<lambda>_. x) \\<tau> = invalid \\<tau>\n               then invalid \\<tau>\n               else if \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                 (S \\<tau>)\\<rceil>\\<rceil>.\n                          P (\\<lambda>_. x) \\<tau> = null \\<tau>\n                    then null \\<tau> else true \\<tau>\n     else \\<bottom>) =\n    (if (\\<delta> S) \\<tau> = true \\<tau> \\<and>\n        (\\<upsilon> true) \\<tau> = true \\<tau> \\<and>\n        finite\n         \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                          (S \\<tau>)\\<rceil>\\<rceil>\n     then Finite_Set.fold (\\<lambda>x acc. acc and P x) true\n           ((\\<lambda>a \\<tau>. a) `\n            \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                             (S \\<tau>)\\<rceil>\\<rceil>)\n           \\<tau>\n     else \\<bottom>)", "apply (metis (mono_tags) imageE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x F.\n       \\<lbrakk>(\\<delta> S) \\<tau> = true \\<tau>;\n        \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                         (S \\<tau>)\\<rceil>\\<rceil> \\<noteq>\n        {};\n        finite F; F \\<noteq> {}; x \\<notin> F;\n        (if \\<exists>x\\<in>F. P (\\<lambda>_. x) \\<tau> = false \\<tau>\n         then false \\<tau>\n         else if \\<exists>x\\<in>F. P (\\<lambda>_. x) \\<tau> = invalid \\<tau>\n              then invalid \\<tau>\n              else if \\<exists>x\\<in>F.\n                         P (\\<lambda>_. x) \\<tau> = null \\<tau>\n                   then null \\<tau> else true \\<tau>) =\n        Finite_Set.fold (\\<lambda>x acc. acc and P x) true\n         ((\\<lambda>a \\<tau>. a) ` F) \\<tau>\\<rbrakk>\n       \\<Longrightarrow> (if \\<exists>x\\<in>insert x F.\n                                P (\\<lambda>_. x) \\<tau> = false \\<tau>\n                          then false \\<tau>\n                          else if \\<exists>x\\<in>insert x F.\n                                     P (\\<lambda>_. x) \\<tau> =\n                                     invalid \\<tau>\n                               then invalid \\<tau>\n                               else if \\<exists>x\\<in>insert x F.\n    P (\\<lambda>_. x) \\<tau> = null \\<tau>\n                                    then null \\<tau> else true \\<tau>) =\n                         (Finite_Set.fold (\\<lambda>x acc. acc and P x) true\n                           ((\\<lambda>a \\<tau>. a) ` F) and\n                          P (\\<lambda>\\<tau>. x))\n                          \\<tau>\n 2. \\<tau> |\\<noteq> \\<delta> S \\<Longrightarrow>\n    (if (\\<delta> S) \\<tau> = true \\<tau>\n     then if \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n       (S \\<tau>)\\<rceil>\\<rceil>.\n                P (\\<lambda>_. x) \\<tau> = false \\<tau>\n          then false \\<tau>\n          else if \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n            (S \\<tau>)\\<rceil>\\<rceil>.\n                     P (\\<lambda>_. x) \\<tau> = invalid \\<tau>\n               then invalid \\<tau>\n               else if \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                 (S \\<tau>)\\<rceil>\\<rceil>.\n                          P (\\<lambda>_. x) \\<tau> = null \\<tau>\n                    then null \\<tau> else true \\<tau>\n     else \\<bottom>) =\n    (if (\\<delta> S) \\<tau> = true \\<tau> \\<and>\n        (\\<upsilon> true) \\<tau> = true \\<tau> \\<and>\n        finite\n         \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                          (S \\<tau>)\\<rceil>\\<rceil>\n     then Finite_Set.fold (\\<lambda>x acc. acc and P x) true\n           ((\\<lambda>a \\<tau>. a) `\n            \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                             (S \\<tau>)\\<rceil>\\<rceil>)\n           \\<tau>\n     else \\<bottom>)", "(* *)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x F.\n       \\<lbrakk>(\\<delta> S) \\<tau> = true \\<tau>;\n        \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                         (S \\<tau>)\\<rceil>\\<rceil> \\<noteq>\n        {};\n        finite F; F \\<noteq> {}; x \\<notin> F;\n        (if \\<exists>x\\<in>F. P (\\<lambda>_. x) \\<tau> = false \\<tau>\n         then false \\<tau>\n         else if \\<exists>x\\<in>F. P (\\<lambda>_. x) \\<tau> = invalid \\<tau>\n              then invalid \\<tau>\n              else if \\<exists>x\\<in>F.\n                         P (\\<lambda>_. x) \\<tau> = null \\<tau>\n                   then null \\<tau> else true \\<tau>) =\n        Finite_Set.fold (\\<lambda>x acc. acc and P x) true\n         ((\\<lambda>a \\<tau>. a) ` F) \\<tau>\\<rbrakk>\n       \\<Longrightarrow> (if \\<exists>x\\<in>insert x F.\n                                P (\\<lambda>_. x) \\<tau> = false \\<tau>\n                          then false \\<tau>\n                          else if \\<exists>x\\<in>insert x F.\n                                     P (\\<lambda>_. x) \\<tau> =\n                                     invalid \\<tau>\n                               then invalid \\<tau>\n                               else if \\<exists>x\\<in>insert x F.\n    P (\\<lambda>_. x) \\<tau> = null \\<tau>\n                                    then null \\<tau> else true \\<tau>) =\n                         (Finite_Set.fold (\\<lambda>x acc. acc and P x) true\n                           ((\\<lambda>a \\<tau>. a) ` F) and\n                          P (\\<lambda>\\<tau>. x))\n                          \\<tau>\n 2. \\<tau> |\\<noteq> \\<delta> S \\<Longrightarrow>\n    (if (\\<delta> S) \\<tau> = true \\<tau>\n     then if \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n       (S \\<tau>)\\<rceil>\\<rceil>.\n                P (\\<lambda>_. x) \\<tau> = false \\<tau>\n          then false \\<tau>\n          else if \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n            (S \\<tau>)\\<rceil>\\<rceil>.\n                     P (\\<lambda>_. x) \\<tau> = invalid \\<tau>\n               then invalid \\<tau>\n               else if \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                 (S \\<tau>)\\<rceil>\\<rceil>.\n                          P (\\<lambda>_. x) \\<tau> = null \\<tau>\n                    then null \\<tau> else true \\<tau>\n     else \\<bottom>) =\n    (if (\\<delta> S) \\<tau> = true \\<tau> \\<and>\n        (\\<upsilon> true) \\<tau> = true \\<tau> \\<and>\n        finite\n         \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                          (S \\<tau>)\\<rceil>\\<rceil>\n     then Finite_Set.fold (\\<lambda>x acc. acc and P x) true\n           ((\\<lambda>a \\<tau>. a) `\n            \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                             (S \\<tau>)\\<rceil>\\<rceil>)\n           \\<tau>\n     else \\<bottom>)", "apply(subst cp_OclAnd)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x F.\n       \\<lbrakk>(\\<delta> S) \\<tau> = true \\<tau>;\n        \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                         (S \\<tau>)\\<rceil>\\<rceil> \\<noteq>\n        {};\n        finite F; F \\<noteq> {}; x \\<notin> F;\n        (if \\<exists>x\\<in>F. P (\\<lambda>_. x) \\<tau> = false \\<tau>\n         then false \\<tau>\n         else if \\<exists>x\\<in>F. P (\\<lambda>_. x) \\<tau> = invalid \\<tau>\n              then invalid \\<tau>\n              else if \\<exists>x\\<in>F.\n                         P (\\<lambda>_. x) \\<tau> = null \\<tau>\n                   then null \\<tau> else true \\<tau>) =\n        Finite_Set.fold (\\<lambda>x acc. acc and P x) true\n         ((\\<lambda>a \\<tau>. a) ` F) \\<tau>\\<rbrakk>\n       \\<Longrightarrow> (if \\<exists>x\\<in>insert x F.\n                                P (\\<lambda>_. x) \\<tau> = false \\<tau>\n                          then false \\<tau>\n                          else if \\<exists>x\\<in>insert x F.\n                                     P (\\<lambda>_. x) \\<tau> =\n                                     invalid \\<tau>\n                               then invalid \\<tau>\n                               else if \\<exists>x\\<in>insert x F.\n    P (\\<lambda>_. x) \\<tau> = null \\<tau>\n                                    then null \\<tau> else true \\<tau>) =\n                         ((\\<lambda>_.\n                              Finite_Set.fold (\\<lambda>x acc. acc and P x)\n                               true ((\\<lambda>a \\<tau>. a) ` F) \\<tau>) and\n                          (\\<lambda>_. P (\\<lambda>\\<tau>. x) \\<tau>))\n                          \\<tau>\n 2. \\<tau> |\\<noteq> \\<delta> S \\<Longrightarrow>\n    (if (\\<delta> S) \\<tau> = true \\<tau>\n     then if \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n       (S \\<tau>)\\<rceil>\\<rceil>.\n                P (\\<lambda>_. x) \\<tau> = false \\<tau>\n          then false \\<tau>\n          else if \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n            (S \\<tau>)\\<rceil>\\<rceil>.\n                     P (\\<lambda>_. x) \\<tau> = invalid \\<tau>\n               then invalid \\<tau>\n               else if \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                 (S \\<tau>)\\<rceil>\\<rceil>.\n                          P (\\<lambda>_. x) \\<tau> = null \\<tau>\n                    then null \\<tau> else true \\<tau>\n     else \\<bottom>) =\n    (if (\\<delta> S) \\<tau> = true \\<tau> \\<and>\n        (\\<upsilon> true) \\<tau> = true \\<tau> \\<and>\n        finite\n         \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                          (S \\<tau>)\\<rceil>\\<rceil>\n     then Finite_Set.fold (\\<lambda>x acc. acc and P x) true\n           ((\\<lambda>a \\<tau>. a) `\n            \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                             (S \\<tau>)\\<rceil>\\<rceil>)\n           \\<tau>\n     else \\<bottom>)", "apply(drule sym, drule sym, simp only:, drule sym, simp only:)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x F.\n       \\<lbrakk>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                 (S \\<tau>)\\<rceil>\\<rceil> \\<noteq>\n                {};\n        finite F; F \\<noteq> {}; x \\<notin> F;\n        Finite_Set.fold (\\<lambda>x acc. acc and P x) true\n         ((\\<lambda>a \\<tau>. a) ` F) \\<tau> =\n        (if \\<exists>x\\<in>F. P (\\<lambda>_. x) \\<tau> = false \\<tau>\n         then false \\<tau>\n         else if \\<exists>x\\<in>F. P (\\<lambda>_. x) \\<tau> = invalid \\<tau>\n              then invalid \\<tau>\n              else if \\<exists>x\\<in>F.\n                         P (\\<lambda>_. x) \\<tau> = null \\<tau>\n                   then null \\<tau> else true \\<tau>);\n        (\\<delta> S) \\<tau> = true \\<tau>\\<rbrakk>\n       \\<Longrightarrow> (if \\<exists>x\\<in>insert x F.\n                                P (\\<lambda>_. x) \\<tau> = false \\<tau>\n                          then false \\<tau>\n                          else if \\<exists>x\\<in>insert x F.\n                                     P (\\<lambda>_. x) \\<tau> =\n                                     invalid \\<tau>\n                               then invalid \\<tau>\n                               else if \\<exists>x\\<in>insert x F.\n    P (\\<lambda>_. x) \\<tau> = null \\<tau>\n                                    then null \\<tau> else true \\<tau>) =\n                         ((\\<lambda>_.\n                              if \\<exists>x\\<in>F.\n                                    P (\\<lambda>_. x) \\<tau> = false \\<tau>\n                              then false \\<tau>\n                              else if \\<exists>x\\<in>F.\n   P (\\<lambda>_. x) \\<tau> = invalid \\<tau>\n                                   then invalid \\<tau>\n                                   else if \\<exists>x\\<in>F.\n        P (\\<lambda>_. x) \\<tau> = null \\<tau>\n  then null \\<tau> else true \\<tau>) and\n                          (\\<lambda>_. P (\\<lambda>\\<tau>. x) \\<tau>))\n                          \\<tau>\n 2. \\<tau> |\\<noteq> \\<delta> S \\<Longrightarrow>\n    (if (\\<delta> S) \\<tau> = true \\<tau>\n     then if \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n       (S \\<tau>)\\<rceil>\\<rceil>.\n                P (\\<lambda>_. x) \\<tau> = false \\<tau>\n          then false \\<tau>\n          else if \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n            (S \\<tau>)\\<rceil>\\<rceil>.\n                     P (\\<lambda>_. x) \\<tau> = invalid \\<tau>\n               then invalid \\<tau>\n               else if \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                 (S \\<tau>)\\<rceil>\\<rceil>.\n                          P (\\<lambda>_. x) \\<tau> = null \\<tau>\n                    then null \\<tau> else true \\<tau>\n     else \\<bottom>) =\n    (if (\\<delta> S) \\<tau> = true \\<tau> \\<and>\n        (\\<upsilon> true) \\<tau> = true \\<tau> \\<and>\n        finite\n         \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                          (S \\<tau>)\\<rceil>\\<rceil>\n     then Finite_Set.fold (\\<lambda>x acc. acc and P x) true\n           ((\\<lambda>a \\<tau>. a) `\n            \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                             (S \\<tau>)\\<rceil>\\<rceil>)\n           \\<tau>\n     else \\<bottom>)", "apply(simp only: ex_insert)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x F.\n       \\<lbrakk>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                 (S \\<tau>)\\<rceil>\\<rceil> \\<noteq>\n                {};\n        finite F; F \\<noteq> {}; x \\<notin> F;\n        Finite_Set.fold (\\<lambda>x acc. acc and P x) true\n         ((\\<lambda>a \\<tau>. a) ` F) \\<tau> =\n        (if \\<exists>x\\<in>F. P (\\<lambda>_. x) \\<tau> = false \\<tau>\n         then false \\<tau>\n         else if \\<exists>x\\<in>F. P (\\<lambda>_. x) \\<tau> = invalid \\<tau>\n              then invalid \\<tau>\n              else if \\<exists>x\\<in>F.\n                         P (\\<lambda>_. x) \\<tau> = null \\<tau>\n                   then null \\<tau> else true \\<tau>);\n        (\\<delta> S) \\<tau> = true \\<tau>\\<rbrakk>\n       \\<Longrightarrow> (if P (\\<lambda>_. x) \\<tau> = false \\<tau> \\<or>\n                             (\\<exists>x\\<in>F.\n                                 P (\\<lambda>_. x) \\<tau> = false \\<tau>)\n                          then false \\<tau>\n                          else if P (\\<lambda>_. x) \\<tau> =\n                                  invalid \\<tau> \\<or>\n                                  (\\<exists>x\\<in>F.\nP (\\<lambda>_. x) \\<tau> = invalid \\<tau>)\n                               then invalid \\<tau>\n                               else if P (\\<lambda>_. x) \\<tau> =\n null \\<tau> \\<or>\n (\\<exists>x\\<in>F. P (\\<lambda>_. x) \\<tau> = null \\<tau>)\n                                    then null \\<tau> else true \\<tau>) =\n                         ((\\<lambda>_.\n                              if \\<exists>x\\<in>F.\n                                    P (\\<lambda>_. x) \\<tau> = false \\<tau>\n                              then false \\<tau>\n                              else if \\<exists>x\\<in>F.\n   P (\\<lambda>_. x) \\<tau> = invalid \\<tau>\n                                   then invalid \\<tau>\n                                   else if \\<exists>x\\<in>F.\n        P (\\<lambda>_. x) \\<tau> = null \\<tau>\n  then null \\<tau> else true \\<tau>) and\n                          (\\<lambda>_. P (\\<lambda>\\<tau>. x) \\<tau>))\n                          \\<tau>\n 2. \\<tau> |\\<noteq> \\<delta> S \\<Longrightarrow>\n    (if (\\<delta> S) \\<tau> = true \\<tau>\n     then if \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n       (S \\<tau>)\\<rceil>\\<rceil>.\n                P (\\<lambda>_. x) \\<tau> = false \\<tau>\n          then false \\<tau>\n          else if \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n            (S \\<tau>)\\<rceil>\\<rceil>.\n                     P (\\<lambda>_. x) \\<tau> = invalid \\<tau>\n               then invalid \\<tau>\n               else if \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                 (S \\<tau>)\\<rceil>\\<rceil>.\n                          P (\\<lambda>_. x) \\<tau> = null \\<tau>\n                    then null \\<tau> else true \\<tau>\n     else \\<bottom>) =\n    (if (\\<delta> S) \\<tau> = true \\<tau> \\<and>\n        (\\<upsilon> true) \\<tau> = true \\<tau> \\<and>\n        finite\n         \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                          (S \\<tau>)\\<rceil>\\<rceil>\n     then Finite_Set.fold (\\<lambda>x acc. acc and P x) true\n           ((\\<lambda>a \\<tau>. a) `\n            \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                             (S \\<tau>)\\<rceil>\\<rceil>)\n           \\<tau>\n     else \\<bottom>)", "apply(subgoal_tac \"\\<exists>x. x\\<in>F\")"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>x F.\n       \\<lbrakk>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                 (S \\<tau>)\\<rceil>\\<rceil> \\<noteq>\n                {};\n        finite F; F \\<noteq> {}; x \\<notin> F;\n        Finite_Set.fold (\\<lambda>x acc. acc and P x) true\n         ((\\<lambda>a \\<tau>. a) ` F) \\<tau> =\n        (if \\<exists>x\\<in>F. P (\\<lambda>_. x) \\<tau> = false \\<tau>\n         then false \\<tau>\n         else if \\<exists>x\\<in>F. P (\\<lambda>_. x) \\<tau> = invalid \\<tau>\n              then invalid \\<tau>\n              else if \\<exists>x\\<in>F.\n                         P (\\<lambda>_. x) \\<tau> = null \\<tau>\n                   then null \\<tau> else true \\<tau>);\n        (\\<delta> S) \\<tau> = true \\<tau>; \\<exists>x. x \\<in> F\\<rbrakk>\n       \\<Longrightarrow> (if P (\\<lambda>_. x) \\<tau> = false \\<tau> \\<or>\n                             (\\<exists>x\\<in>F.\n                                 P (\\<lambda>_. x) \\<tau> = false \\<tau>)\n                          then false \\<tau>\n                          else if P (\\<lambda>_. x) \\<tau> =\n                                  invalid \\<tau> \\<or>\n                                  (\\<exists>x\\<in>F.\nP (\\<lambda>_. x) \\<tau> = invalid \\<tau>)\n                               then invalid \\<tau>\n                               else if P (\\<lambda>_. x) \\<tau> =\n null \\<tau> \\<or>\n (\\<exists>x\\<in>F. P (\\<lambda>_. x) \\<tau> = null \\<tau>)\n                                    then null \\<tau> else true \\<tau>) =\n                         ((\\<lambda>_.\n                              if \\<exists>x\\<in>F.\n                                    P (\\<lambda>_. x) \\<tau> = false \\<tau>\n                              then false \\<tau>\n                              else if \\<exists>x\\<in>F.\n   P (\\<lambda>_. x) \\<tau> = invalid \\<tau>\n                                   then invalid \\<tau>\n                                   else if \\<exists>x\\<in>F.\n        P (\\<lambda>_. x) \\<tau> = null \\<tau>\n  then null \\<tau> else true \\<tau>) and\n                          (\\<lambda>_. P (\\<lambda>\\<tau>. x) \\<tau>))\n                          \\<tau>\n 2. \\<And>x F.\n       \\<lbrakk>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                 (S \\<tau>)\\<rceil>\\<rceil> \\<noteq>\n                {};\n        finite F; F \\<noteq> {}; x \\<notin> F;\n        Finite_Set.fold (\\<lambda>x acc. acc and P x) true\n         ((\\<lambda>a \\<tau>. a) ` F) \\<tau> =\n        (if \\<exists>x\\<in>F. P (\\<lambda>_. x) \\<tau> = false \\<tau>\n         then false \\<tau>\n         else if \\<exists>x\\<in>F. P (\\<lambda>_. x) \\<tau> = invalid \\<tau>\n              then invalid \\<tau>\n              else if \\<exists>x\\<in>F.\n                         P (\\<lambda>_. x) \\<tau> = null \\<tau>\n                   then null \\<tau> else true \\<tau>);\n        (\\<delta> S) \\<tau> = true \\<tau>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x. x \\<in> F\n 3. \\<tau> |\\<noteq> \\<delta> S \\<Longrightarrow>\n    (if (\\<delta> S) \\<tau> = true \\<tau>\n     then if \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n       (S \\<tau>)\\<rceil>\\<rceil>.\n                P (\\<lambda>_. x) \\<tau> = false \\<tau>\n          then false \\<tau>\n          else if \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n            (S \\<tau>)\\<rceil>\\<rceil>.\n                     P (\\<lambda>_. x) \\<tau> = invalid \\<tau>\n               then invalid \\<tau>\n               else if \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                 (S \\<tau>)\\<rceil>\\<rceil>.\n                          P (\\<lambda>_. x) \\<tau> = null \\<tau>\n                    then null \\<tau> else true \\<tau>\n     else \\<bottom>) =\n    (if (\\<delta> S) \\<tau> = true \\<tau> \\<and>\n        (\\<upsilon> true) \\<tau> = true \\<tau> \\<and>\n        finite\n         \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                          (S \\<tau>)\\<rceil>\\<rceil>\n     then Finite_Set.fold (\\<lambda>x acc. acc and P x) true\n           ((\\<lambda>a \\<tau>. a) `\n            \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                             (S \\<tau>)\\<rceil>\\<rceil>)\n           \\<tau>\n     else \\<bottom>)", "prefer 2"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>x F.\n       \\<lbrakk>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                 (S \\<tau>)\\<rceil>\\<rceil> \\<noteq>\n                {};\n        finite F; F \\<noteq> {}; x \\<notin> F;\n        Finite_Set.fold (\\<lambda>x acc. acc and P x) true\n         ((\\<lambda>a \\<tau>. a) ` F) \\<tau> =\n        (if \\<exists>x\\<in>F. P (\\<lambda>_. x) \\<tau> = false \\<tau>\n         then false \\<tau>\n         else if \\<exists>x\\<in>F. P (\\<lambda>_. x) \\<tau> = invalid \\<tau>\n              then invalid \\<tau>\n              else if \\<exists>x\\<in>F.\n                         P (\\<lambda>_. x) \\<tau> = null \\<tau>\n                   then null \\<tau> else true \\<tau>);\n        (\\<delta> S) \\<tau> = true \\<tau>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x. x \\<in> F\n 2. \\<And>x F.\n       \\<lbrakk>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                 (S \\<tau>)\\<rceil>\\<rceil> \\<noteq>\n                {};\n        finite F; F \\<noteq> {}; x \\<notin> F;\n        Finite_Set.fold (\\<lambda>x acc. acc and P x) true\n         ((\\<lambda>a \\<tau>. a) ` F) \\<tau> =\n        (if \\<exists>x\\<in>F. P (\\<lambda>_. x) \\<tau> = false \\<tau>\n         then false \\<tau>\n         else if \\<exists>x\\<in>F. P (\\<lambda>_. x) \\<tau> = invalid \\<tau>\n              then invalid \\<tau>\n              else if \\<exists>x\\<in>F.\n                         P (\\<lambda>_. x) \\<tau> = null \\<tau>\n                   then null \\<tau> else true \\<tau>);\n        (\\<delta> S) \\<tau> = true \\<tau>; \\<exists>x. x \\<in> F\\<rbrakk>\n       \\<Longrightarrow> (if P (\\<lambda>_. x) \\<tau> = false \\<tau> \\<or>\n                             (\\<exists>x\\<in>F.\n                                 P (\\<lambda>_. x) \\<tau> = false \\<tau>)\n                          then false \\<tau>\n                          else if P (\\<lambda>_. x) \\<tau> =\n                                  invalid \\<tau> \\<or>\n                                  (\\<exists>x\\<in>F.\nP (\\<lambda>_. x) \\<tau> = invalid \\<tau>)\n                               then invalid \\<tau>\n                               else if P (\\<lambda>_. x) \\<tau> =\n null \\<tau> \\<or>\n (\\<exists>x\\<in>F. P (\\<lambda>_. x) \\<tau> = null \\<tau>)\n                                    then null \\<tau> else true \\<tau>) =\n                         ((\\<lambda>_.\n                              if \\<exists>x\\<in>F.\n                                    P (\\<lambda>_. x) \\<tau> = false \\<tau>\n                              then false \\<tau>\n                              else if \\<exists>x\\<in>F.\n   P (\\<lambda>_. x) \\<tau> = invalid \\<tau>\n                                   then invalid \\<tau>\n                                   else if \\<exists>x\\<in>F.\n        P (\\<lambda>_. x) \\<tau> = null \\<tau>\n  then null \\<tau> else true \\<tau>) and\n                          (\\<lambda>_. P (\\<lambda>\\<tau>. x) \\<tau>))\n                          \\<tau>\n 3. \\<tau> |\\<noteq> \\<delta> S \\<Longrightarrow>\n    (if (\\<delta> S) \\<tau> = true \\<tau>\n     then if \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n       (S \\<tau>)\\<rceil>\\<rceil>.\n                P (\\<lambda>_. x) \\<tau> = false \\<tau>\n          then false \\<tau>\n          else if \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n            (S \\<tau>)\\<rceil>\\<rceil>.\n                     P (\\<lambda>_. x) \\<tau> = invalid \\<tau>\n               then invalid \\<tau>\n               else if \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                 (S \\<tau>)\\<rceil>\\<rceil>.\n                          P (\\<lambda>_. x) \\<tau> = null \\<tau>\n                    then null \\<tau> else true \\<tau>\n     else \\<bottom>) =\n    (if (\\<delta> S) \\<tau> = true \\<tau> \\<and>\n        (\\<upsilon> true) \\<tau> = true \\<tau> \\<and>\n        finite\n         \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                          (S \\<tau>)\\<rceil>\\<rceil>\n     then Finite_Set.fold (\\<lambda>x acc. acc and P x) true\n           ((\\<lambda>a \\<tau>. a) `\n            \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                             (S \\<tau>)\\<rceil>\\<rceil>)\n           \\<tau>\n     else \\<bottom>)", "apply(metis all_not_in_conv)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x F.\n       \\<lbrakk>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                 (S \\<tau>)\\<rceil>\\<rceil> \\<noteq>\n                {};\n        finite F; F \\<noteq> {}; x \\<notin> F;\n        Finite_Set.fold (\\<lambda>x acc. acc and P x) true\n         ((\\<lambda>a \\<tau>. a) ` F) \\<tau> =\n        (if \\<exists>x\\<in>F. P (\\<lambda>_. x) \\<tau> = false \\<tau>\n         then false \\<tau>\n         else if \\<exists>x\\<in>F. P (\\<lambda>_. x) \\<tau> = invalid \\<tau>\n              then invalid \\<tau>\n              else if \\<exists>x\\<in>F.\n                         P (\\<lambda>_. x) \\<tau> = null \\<tau>\n                   then null \\<tau> else true \\<tau>);\n        (\\<delta> S) \\<tau> = true \\<tau>; \\<exists>x. x \\<in> F\\<rbrakk>\n       \\<Longrightarrow> (if P (\\<lambda>_. x) \\<tau> = false \\<tau> \\<or>\n                             (\\<exists>x\\<in>F.\n                                 P (\\<lambda>_. x) \\<tau> = false \\<tau>)\n                          then false \\<tau>\n                          else if P (\\<lambda>_. x) \\<tau> =\n                                  invalid \\<tau> \\<or>\n                                  (\\<exists>x\\<in>F.\nP (\\<lambda>_. x) \\<tau> = invalid \\<tau>)\n                               then invalid \\<tau>\n                               else if P (\\<lambda>_. x) \\<tau> =\n null \\<tau> \\<or>\n (\\<exists>x\\<in>F. P (\\<lambda>_. x) \\<tau> = null \\<tau>)\n                                    then null \\<tau> else true \\<tau>) =\n                         ((\\<lambda>_.\n                              if \\<exists>x\\<in>F.\n                                    P (\\<lambda>_. x) \\<tau> = false \\<tau>\n                              then false \\<tau>\n                              else if \\<exists>x\\<in>F.\n   P (\\<lambda>_. x) \\<tau> = invalid \\<tau>\n                                   then invalid \\<tau>\n                                   else if \\<exists>x\\<in>F.\n        P (\\<lambda>_. x) \\<tau> = null \\<tau>\n  then null \\<tau> else true \\<tau>) and\n                          (\\<lambda>_. P (\\<lambda>\\<tau>. x) \\<tau>))\n                          \\<tau>\n 2. \\<tau> |\\<noteq> \\<delta> S \\<Longrightarrow>\n    (if (\\<delta> S) \\<tau> = true \\<tau>\n     then if \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n       (S \\<tau>)\\<rceil>\\<rceil>.\n                P (\\<lambda>_. x) \\<tau> = false \\<tau>\n          then false \\<tau>\n          else if \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n            (S \\<tau>)\\<rceil>\\<rceil>.\n                     P (\\<lambda>_. x) \\<tau> = invalid \\<tau>\n               then invalid \\<tau>\n               else if \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                 (S \\<tau>)\\<rceil>\\<rceil>.\n                          P (\\<lambda>_. x) \\<tau> = null \\<tau>\n                    then null \\<tau> else true \\<tau>\n     else \\<bottom>) =\n    (if (\\<delta> S) \\<tau> = true \\<tau> \\<and>\n        (\\<upsilon> true) \\<tau> = true \\<tau> \\<and>\n        finite\n         \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                          (S \\<tau>)\\<rceil>\\<rceil>\n     then Finite_Set.fold (\\<lambda>x acc. acc and P x) true\n           ((\\<lambda>a \\<tau>. a) `\n            \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                             (S \\<tau>)\\<rceil>\\<rceil>)\n           \\<tau>\n     else \\<bottom>)", "proof -"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x F.\n       \\<lbrakk>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                 (S \\<tau>)\\<rceil>\\<rceil> \\<noteq>\n                {};\n        finite F; F \\<noteq> {}; x \\<notin> F;\n        Finite_Set.fold (\\<lambda>x acc. acc and P x) true\n         ((\\<lambda>a \\<tau>. a) ` F) \\<tau> =\n        (if \\<exists>x\\<in>F. P (\\<lambda>_. x) \\<tau> = false \\<tau>\n         then false \\<tau>\n         else if \\<exists>x\\<in>F. P (\\<lambda>_. x) \\<tau> = invalid \\<tau>\n              then invalid \\<tau>\n              else if \\<exists>x\\<in>F.\n                         P (\\<lambda>_. x) \\<tau> = null \\<tau>\n                   then null \\<tau> else true \\<tau>);\n        (\\<delta> S) \\<tau> = true \\<tau>; \\<exists>x. x \\<in> F\\<rbrakk>\n       \\<Longrightarrow> (if P (\\<lambda>_. x) \\<tau> = false \\<tau> \\<or>\n                             (\\<exists>x\\<in>F.\n                                 P (\\<lambda>_. x) \\<tau> = false \\<tau>)\n                          then false \\<tau>\n                          else if P (\\<lambda>_. x) \\<tau> =\n                                  invalid \\<tau> \\<or>\n                                  (\\<exists>x\\<in>F.\nP (\\<lambda>_. x) \\<tau> = invalid \\<tau>)\n                               then invalid \\<tau>\n                               else if P (\\<lambda>_. x) \\<tau> =\n null \\<tau> \\<or>\n (\\<exists>x\\<in>F. P (\\<lambda>_. x) \\<tau> = null \\<tau>)\n                                    then null \\<tau> else true \\<tau>) =\n                         ((\\<lambda>_.\n                              if \\<exists>x\\<in>F.\n                                    P (\\<lambda>_. x) \\<tau> = false \\<tau>\n                              then false \\<tau>\n                              else if \\<exists>x\\<in>F.\n   P (\\<lambda>_. x) \\<tau> = invalid \\<tau>\n                                   then invalid \\<tau>\n                                   else if \\<exists>x\\<in>F.\n        P (\\<lambda>_. x) \\<tau> = null \\<tau>\n  then null \\<tau> else true \\<tau>) and\n                          (\\<lambda>_. P (\\<lambda>\\<tau>. x) \\<tau>))\n                          \\<tau>\n 2. \\<tau> |\\<noteq> \\<delta> S \\<Longrightarrow>\n    (if (\\<delta> S) \\<tau> = true \\<tau>\n     then if \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n       (S \\<tau>)\\<rceil>\\<rceil>.\n                P (\\<lambda>_. x) \\<tau> = false \\<tau>\n          then false \\<tau>\n          else if \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n            (S \\<tau>)\\<rceil>\\<rceil>.\n                     P (\\<lambda>_. x) \\<tau> = invalid \\<tau>\n               then invalid \\<tau>\n               else if \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                 (S \\<tau>)\\<rceil>\\<rceil>.\n                          P (\\<lambda>_. x) \\<tau> = null \\<tau>\n                    then null \\<tau> else true \\<tau>\n     else \\<bottom>) =\n    (if (\\<delta> S) \\<tau> = true \\<tau> \\<and>\n        (\\<upsilon> true) \\<tau> = true \\<tau> \\<and>\n        finite\n         \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                          (S \\<tau>)\\<rceil>\\<rceil>\n     then Finite_Set.fold (\\<lambda>x acc. acc and P x) true\n           ((\\<lambda>a \\<tau>. a) `\n            \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                             (S \\<tau>)\\<rceil>\\<rceil>)\n           \\<tau>\n     else \\<bottom>)", "fix x F"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x F.\n       \\<lbrakk>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                 (S \\<tau>)\\<rceil>\\<rceil> \\<noteq>\n                {};\n        finite F; F \\<noteq> {}; x \\<notin> F;\n        Finite_Set.fold (\\<lambda>x acc. acc and P x) true\n         ((\\<lambda>a \\<tau>. a) ` F) \\<tau> =\n        (if \\<exists>x\\<in>F. P (\\<lambda>_. x) \\<tau> = false \\<tau>\n         then false \\<tau>\n         else if \\<exists>x\\<in>F. P (\\<lambda>_. x) \\<tau> = invalid \\<tau>\n              then invalid \\<tau>\n              else if \\<exists>x\\<in>F.\n                         P (\\<lambda>_. x) \\<tau> = null \\<tau>\n                   then null \\<tau> else true \\<tau>);\n        (\\<delta> S) \\<tau> = true \\<tau>; \\<exists>x. x \\<in> F\\<rbrakk>\n       \\<Longrightarrow> (if P (\\<lambda>_. x) \\<tau> = false \\<tau> \\<or>\n                             (\\<exists>x\\<in>F.\n                                 P (\\<lambda>_. x) \\<tau> = false \\<tau>)\n                          then false \\<tau>\n                          else if P (\\<lambda>_. x) \\<tau> =\n                                  invalid \\<tau> \\<or>\n                                  (\\<exists>x\\<in>F.\nP (\\<lambda>_. x) \\<tau> = invalid \\<tau>)\n                               then invalid \\<tau>\n                               else if P (\\<lambda>_. x) \\<tau> =\n null \\<tau> \\<or>\n (\\<exists>x\\<in>F. P (\\<lambda>_. x) \\<tau> = null \\<tau>)\n                                    then null \\<tau> else true \\<tau>) =\n                         ((\\<lambda>_.\n                              if \\<exists>x\\<in>F.\n                                    P (\\<lambda>_. x) \\<tau> = false \\<tau>\n                              then false \\<tau>\n                              else if \\<exists>x\\<in>F.\n   P (\\<lambda>_. x) \\<tau> = invalid \\<tau>\n                                   then invalid \\<tau>\n                                   else if \\<exists>x\\<in>F.\n        P (\\<lambda>_. x) \\<tau> = null \\<tau>\n  then null \\<tau> else true \\<tau>) and\n                          (\\<lambda>_. P (\\<lambda>\\<tau>. x) \\<tau>))\n                          \\<tau>\n 2. \\<tau> |\\<noteq> \\<delta> S \\<Longrightarrow>\n    (if (\\<delta> S) \\<tau> = true \\<tau>\n     then if \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n       (S \\<tau>)\\<rceil>\\<rceil>.\n                P (\\<lambda>_. x) \\<tau> = false \\<tau>\n          then false \\<tau>\n          else if \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n            (S \\<tau>)\\<rceil>\\<rceil>.\n                     P (\\<lambda>_. x) \\<tau> = invalid \\<tau>\n               then invalid \\<tau>\n               else if \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                 (S \\<tau>)\\<rceil>\\<rceil>.\n                          P (\\<lambda>_. x) \\<tau> = null \\<tau>\n                    then null \\<tau> else true \\<tau>\n     else \\<bottom>) =\n    (if (\\<delta> S) \\<tau> = true \\<tau> \\<and>\n        (\\<upsilon> true) \\<tau> = true \\<tau> \\<and>\n        finite\n         \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                          (S \\<tau>)\\<rceil>\\<rceil>\n     then Finite_Set.fold (\\<lambda>x acc. acc and P x) true\n           ((\\<lambda>a \\<tau>. a) `\n            \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                             (S \\<tau>)\\<rceil>\\<rceil>)\n           \\<tau>\n     else \\<bottom>)", "show \"(\\<delta> S) \\<tau> = true \\<tau> \\<Longrightarrow> \\<exists>x. x \\<in> F \\<Longrightarrow>\n            ?forall (\\<lambda>b \\<tau>. ?P_eq x b \\<tau> \\<or> ?P F b \\<tau>) =\n            ((\\<lambda>_. ?forall (?P F)) and (\\<lambda>_. P (\\<lambda>\\<tau>. x) \\<tau>)) \\<tau>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>(\\<delta> S) \\<tau> = true \\<tau>;\n     \\<exists>x. x \\<in> F\\<rbrakk>\n    \\<Longrightarrow> (if P (\\<lambda>_. x) \\<tau> = false \\<tau> \\<or>\n                          (\\<exists>x\\<in>F.\n                              P (\\<lambda>_. x) \\<tau> = false \\<tau>)\n                       then false \\<tau>\n                       else if P (\\<lambda>_. x) \\<tau> =\n                               invalid \\<tau> \\<or>\n                               (\\<exists>x\\<in>F.\n                                   P (\\<lambda>_. x) \\<tau> =\n                                   invalid \\<tau>)\n                            then invalid \\<tau>\n                            else if P (\\<lambda>_. x) \\<tau> =\n                                    null \\<tau> \\<or>\n                                    (\\<exists>x\\<in>F.\n  P (\\<lambda>_. x) \\<tau> = null \\<tau>)\n                                 then null \\<tau> else true \\<tau>) =\n                      ((\\<lambda>_.\n                           if \\<exists>x\\<in>F.\n                                 P (\\<lambda>_. x) \\<tau> = false \\<tau>\n                           then false \\<tau>\n                           else if \\<exists>x\\<in>F.\nP (\\<lambda>_. x) \\<tau> = invalid \\<tau>\n                                then invalid \\<tau>\n                                else if \\<exists>x\\<in>F.\n     P (\\<lambda>_. x) \\<tau> = null \\<tau>\n                                     then null \\<tau> else true \\<tau>) and\n                       (\\<lambda>_. P (\\<lambda>\\<tau>. x) \\<tau>))\n                       \\<tau>", "apply(rule disjE4[OF destruct_ocl[where x1 = \"P (\\<lambda>\\<tau>. x) \\<tau>\"]])"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<lbrakk>(\\<delta> S) \\<tau> = true \\<tau>; \\<exists>x. x \\<in> F;\n     P (\\<lambda>\\<tau>. x) \\<tau> = true ?\\<tau>4\\<rbrakk>\n    \\<Longrightarrow> (if P (\\<lambda>_. x) \\<tau> = false \\<tau> \\<or>\n                          (\\<exists>x\\<in>F.\n                              P (\\<lambda>_. x) \\<tau> = false \\<tau>)\n                       then false \\<tau>\n                       else if P (\\<lambda>_. x) \\<tau> =\n                               invalid \\<tau> \\<or>\n                               (\\<exists>x\\<in>F.\n                                   P (\\<lambda>_. x) \\<tau> =\n                                   invalid \\<tau>)\n                            then invalid \\<tau>\n                            else if P (\\<lambda>_. x) \\<tau> =\n                                    null \\<tau> \\<or>\n                                    (\\<exists>x\\<in>F.\n  P (\\<lambda>_. x) \\<tau> = null \\<tau>)\n                                 then null \\<tau> else true \\<tau>) =\n                      ((\\<lambda>_.\n                           if \\<exists>x\\<in>F.\n                                 P (\\<lambda>_. x) \\<tau> = false \\<tau>\n                           then false \\<tau>\n                           else if \\<exists>x\\<in>F.\nP (\\<lambda>_. x) \\<tau> = invalid \\<tau>\n                                then invalid \\<tau>\n                                else if \\<exists>x\\<in>F.\n     P (\\<lambda>_. x) \\<tau> = null \\<tau>\n                                     then null \\<tau> else true \\<tau>) and\n                       (\\<lambda>_. P (\\<lambda>\\<tau>. x) \\<tau>))\n                       \\<tau>\n 2. \\<lbrakk>(\\<delta> S) \\<tau> = true \\<tau>; \\<exists>x. x \\<in> F;\n     P (\\<lambda>\\<tau>. x) \\<tau> = false ?\\<tau>4\\<rbrakk>\n    \\<Longrightarrow> (if P (\\<lambda>_. x) \\<tau> = false \\<tau> \\<or>\n                          (\\<exists>x\\<in>F.\n                              P (\\<lambda>_. x) \\<tau> = false \\<tau>)\n                       then false \\<tau>\n                       else if P (\\<lambda>_. x) \\<tau> =\n                               invalid \\<tau> \\<or>\n                               (\\<exists>x\\<in>F.\n                                   P (\\<lambda>_. x) \\<tau> =\n                                   invalid \\<tau>)\n                            then invalid \\<tau>\n                            else if P (\\<lambda>_. x) \\<tau> =\n                                    null \\<tau> \\<or>\n                                    (\\<exists>x\\<in>F.\n  P (\\<lambda>_. x) \\<tau> = null \\<tau>)\n                                 then null \\<tau> else true \\<tau>) =\n                      ((\\<lambda>_.\n                           if \\<exists>x\\<in>F.\n                                 P (\\<lambda>_. x) \\<tau> = false \\<tau>\n                           then false \\<tau>\n                           else if \\<exists>x\\<in>F.\nP (\\<lambda>_. x) \\<tau> = invalid \\<tau>\n                                then invalid \\<tau>\n                                else if \\<exists>x\\<in>F.\n     P (\\<lambda>_. x) \\<tau> = null \\<tau>\n                                     then null \\<tau> else true \\<tau>) and\n                       (\\<lambda>_. P (\\<lambda>\\<tau>. x) \\<tau>))\n                       \\<tau>\n 3. \\<lbrakk>(\\<delta> S) \\<tau> = true \\<tau>; \\<exists>x. x \\<in> F;\n     P (\\<lambda>\\<tau>. x) \\<tau> = null ?\\<tau>4\\<rbrakk>\n    \\<Longrightarrow> (if P (\\<lambda>_. x) \\<tau> = false \\<tau> \\<or>\n                          (\\<exists>x\\<in>F.\n                              P (\\<lambda>_. x) \\<tau> = false \\<tau>)\n                       then false \\<tau>\n                       else if P (\\<lambda>_. x) \\<tau> =\n                               invalid \\<tau> \\<or>\n                               (\\<exists>x\\<in>F.\n                                   P (\\<lambda>_. x) \\<tau> =\n                                   invalid \\<tau>)\n                            then invalid \\<tau>\n                            else if P (\\<lambda>_. x) \\<tau> =\n                                    null \\<tau> \\<or>\n                                    (\\<exists>x\\<in>F.\n  P (\\<lambda>_. x) \\<tau> = null \\<tau>)\n                                 then null \\<tau> else true \\<tau>) =\n                      ((\\<lambda>_.\n                           if \\<exists>x\\<in>F.\n                                 P (\\<lambda>_. x) \\<tau> = false \\<tau>\n                           then false \\<tau>\n                           else if \\<exists>x\\<in>F.\nP (\\<lambda>_. x) \\<tau> = invalid \\<tau>\n                                then invalid \\<tau>\n                                else if \\<exists>x\\<in>F.\n     P (\\<lambda>_. x) \\<tau> = null \\<tau>\n                                     then null \\<tau> else true \\<tau>) and\n                       (\\<lambda>_. P (\\<lambda>\\<tau>. x) \\<tau>))\n                       \\<tau>\n 4. \\<lbrakk>(\\<delta> S) \\<tau> = true \\<tau>; \\<exists>x. x \\<in> F;\n     P (\\<lambda>\\<tau>. x) \\<tau> = \\<bottom> ?\\<tau>4\\<rbrakk>\n    \\<Longrightarrow> (if P (\\<lambda>_. x) \\<tau> = false \\<tau> \\<or>\n                          (\\<exists>x\\<in>F.\n                              P (\\<lambda>_. x) \\<tau> = false \\<tau>)\n                       then false \\<tau>\n                       else if P (\\<lambda>_. x) \\<tau> =\n                               invalid \\<tau> \\<or>\n                               (\\<exists>x\\<in>F.\n                                   P (\\<lambda>_. x) \\<tau> =\n                                   invalid \\<tau>)\n                            then invalid \\<tau>\n                            else if P (\\<lambda>_. x) \\<tau> =\n                                    null \\<tau> \\<or>\n                                    (\\<exists>x\\<in>F.\n  P (\\<lambda>_. x) \\<tau> = null \\<tau>)\n                                 then null \\<tau> else true \\<tau>) =\n                      ((\\<lambda>_.\n                           if \\<exists>x\\<in>F.\n                                 P (\\<lambda>_. x) \\<tau> = false \\<tau>\n                           then false \\<tau>\n                           else if \\<exists>x\\<in>F.\nP (\\<lambda>_. x) \\<tau> = invalid \\<tau>\n                                then invalid \\<tau>\n                                else if \\<exists>x\\<in>F.\n     P (\\<lambda>_. x) \\<tau> = null \\<tau>\n                                     then null \\<tau> else true \\<tau>) and\n                       (\\<lambda>_. P (\\<lambda>\\<tau>. x) \\<tau>))\n                       \\<tau>", "apply(simp_all add: true_def false_def invalid_def OclAnd_def\n                           null_fun_def null_option_def bot_fun_def bot_option_def)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>(\\<delta> S) \\<tau> = \\<lfloor>\\<lfloor>True\\<rfloor>\\<rfloor>;\n     \\<exists>x. x \\<in> F;\n     P (\\<lambda>\\<tau>. x) \\<tau> =\n     \\<lfloor>\\<lfloor>True\\<rfloor>\\<rfloor>\\<rbrakk>\n    \\<Longrightarrow> (\\<exists>x\\<in>F.\n                          P (\\<lambda>_. x) \\<tau> = None) \\<longrightarrow>\n                      ((\\<exists>x\\<in>F.\n                           P (\\<lambda>_. x) \\<tau> =\n                           \\<lfloor>None\\<rfloor>) \\<longrightarrow>\n                       (\\<forall>x\\<in>F.\n                           \\<exists>y.\n                              P (\\<lambda>_. x) \\<tau> =\n                              \\<lfloor>y\\<rfloor>) \\<longrightarrow>\n                       (\\<exists>x\\<in>F.\n                           P (\\<lambda>_. x) \\<tau> =\n                           \\<lfloor>\\<lfloor>False\\<rfloor>\\<rfloor>)) \\<and>\n                      ((\\<forall>x\\<in>F.\n                           P (\\<lambda>_. x) \\<tau> \\<noteq>\n                           \\<lfloor>None\\<rfloor>) \\<longrightarrow>\n                       (\\<forall>x\\<in>F.\n                           \\<exists>y.\n                              P (\\<lambda>_. x) \\<tau> =\n                              \\<lfloor>y\\<rfloor>) \\<longrightarrow>\n                       (\\<exists>x\\<in>F.\n                           P (\\<lambda>_. x) \\<tau> =\n                           \\<lfloor>\\<lfloor>False\\<rfloor>\\<rfloor>))\n 2. \\<lbrakk>(\\<delta> S) \\<tau> = \\<lfloor>\\<lfloor>True\\<rfloor>\\<rfloor>;\n     \\<exists>x. x \\<in> F;\n     P (\\<lambda>\\<tau>. x) \\<tau> = \\<lfloor>None\\<rfloor>\\<rbrakk>\n    \\<Longrightarrow> ((\\<exists>x\\<in>F.\n                           P (\\<lambda>_. x) \\<tau> =\n                           \\<lfloor>None\\<rfloor>) \\<longrightarrow>\n                       (\\<exists>x\\<in>F.\n                           P (\\<lambda>_. x) \\<tau> =\n                           None) \\<longrightarrow>\n                       (\\<forall>x\\<in>F.\n                           \\<exists>y.\n                              P (\\<lambda>_. x) \\<tau> =\n                              \\<lfloor>y\\<rfloor>) \\<longrightarrow>\n                       (\\<exists>x\\<in>F.\n                           P (\\<lambda>_. x) \\<tau> =\n                           \\<lfloor>\\<lfloor>False\\<rfloor>\\<rfloor>)) \\<and>\n                      ((\\<forall>x\\<in>F.\n                           P (\\<lambda>_. x) \\<tau> \\<noteq>\n                           \\<lfloor>None\\<rfloor>) \\<longrightarrow>\n                       (\\<exists>x\\<in>F.\n                           P (\\<lambda>_. x) \\<tau> =\n                           None) \\<longrightarrow>\n                       (\\<forall>x\\<in>F.\n                           \\<exists>y.\n                              P (\\<lambda>_. x) \\<tau> =\n                              \\<lfloor>y\\<rfloor>) \\<longrightarrow>\n                       (\\<exists>x\\<in>F.\n                           P (\\<lambda>_. x) \\<tau> =\n                           \\<lfloor>\\<lfloor>False\\<rfloor>\\<rfloor>))", "by (metis (lifting) option.distinct(1))+"], ["proof (state)\nthis:\n  \\<lbrakk>(\\<delta> S) \\<tau> = true \\<tau>; \\<exists>x. x \\<in> F\\<rbrakk>\n  \\<Longrightarrow> (if P (\\<lambda>_. x) \\<tau> = false \\<tau> \\<or>\n                        (\\<exists>x\\<in>F.\n                            P (\\<lambda>_. x) \\<tau> = false \\<tau>)\n                     then false \\<tau>\n                     else if P (\\<lambda>_. x) \\<tau> = invalid \\<tau> \\<or>\n                             (\\<exists>x\\<in>F.\n                                 P (\\<lambda>_. x) \\<tau> = invalid \\<tau>)\n                          then invalid \\<tau>\n                          else if P (\\<lambda>_. x) \\<tau> =\n                                  null \\<tau> \\<or>\n                                  (\\<exists>x\\<in>F.\nP (\\<lambda>_. x) \\<tau> = null \\<tau>)\n                               then null \\<tau> else true \\<tau>) =\n                    ((\\<lambda>_.\n                         if \\<exists>x\\<in>F.\n                               P (\\<lambda>_. x) \\<tau> = false \\<tau>\n                         then false \\<tau>\n                         else if \\<exists>x\\<in>F.\n                                    P (\\<lambda>_. x) \\<tau> =\n                                    invalid \\<tau>\n                              then invalid \\<tau>\n                              else if \\<exists>x\\<in>F.\n   P (\\<lambda>_. x) \\<tau> = null \\<tau>\n                                   then null \\<tau> else true \\<tau>) and\n                     (\\<lambda>_. P (\\<lambda>\\<tau>. x) \\<tau>))\n                     \\<tau>\n\ngoal (1 subgoal):\n 1. \\<tau> |\\<noteq> \\<delta> S \\<Longrightarrow>\n    (if (\\<delta> S) \\<tau> = true \\<tau>\n     then if \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n       (S \\<tau>)\\<rceil>\\<rceil>.\n                P (\\<lambda>_. x) \\<tau> = false \\<tau>\n          then false \\<tau>\n          else if \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n            (S \\<tau>)\\<rceil>\\<rceil>.\n                     P (\\<lambda>_. x) \\<tau> = invalid \\<tau>\n               then invalid \\<tau>\n               else if \\<exists>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                 (S \\<tau>)\\<rceil>\\<rceil>.\n                          P (\\<lambda>_. x) \\<tau> = null \\<tau>\n                    then null \\<tau> else true \\<tau>\n     else \\<bottom>) =\n    (if (\\<delta> S) \\<tau> = true \\<tau> \\<and>\n        (\\<upsilon> true) \\<tau> = true \\<tau> \\<and>\n        finite\n         \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                          (S \\<tau>)\\<rceil>\\<rceil>\n     then Finite_Set.fold (\\<lambda>x acc. acc and P x) true\n           ((\\<lambda>a \\<tau>. a) `\n            \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                             (S \\<tau>)\\<rceil>\\<rceil>)\n           \\<tau>\n     else \\<bottom>)", "qed(simp add: OclValid_def)+"], ["proof (state)\nthis:\n  OclForall S P \\<tau> =\n  S ->iterate\\<^sub>S\\<^sub>e\\<^sub>t(x;acc=true | acc and P x) \\<tau>\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma OclForall_cong:\n assumes \"\\<And>x. x \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e (X \\<tau>)\\<rceil>\\<rceil> \\<Longrightarrow> \\<tau> \\<Turnstile> P (\\<lambda>\\<tau>. x) \\<Longrightarrow> \\<tau> \\<Turnstile> Q (\\<lambda>\\<tau>. x)\"\n assumes P: \"\\<tau> \\<Turnstile> OclForall X P\"\n shows \"\\<tau> \\<Turnstile> OclForall X Q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<tau> \\<Turnstile> OclForall X Q", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<tau> \\<Turnstile> OclForall X Q", "have def_X: \"\\<tau> \\<Turnstile> \\<delta> X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<tau> \\<Turnstile> \\<delta> X", "by(insert P, simp add: OclForall_def OclValid_def bot_option_def true_def split: if_split_asm)"], ["proof (state)\nthis:\n  \\<tau> \\<Turnstile> \\<delta> X\n\ngoal (1 subgoal):\n 1. \\<tau> \\<Turnstile> OclForall X Q", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<tau> \\<Turnstile> OclForall X Q", "apply(insert P)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<tau> \\<Turnstile> OclForall X P \\<Longrightarrow>\n    \\<tau> \\<Turnstile> OclForall X Q", "apply(subst (asm) OclForall_rep_set_true[OF def_X], subst OclForall_rep_set_true[OF def_X])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                    (X \\<tau>)\\<rceil>\\<rceil>.\n       \\<tau> \\<Turnstile> P (\\<lambda>\\<tau>. x) \\<Longrightarrow>\n    \\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                    (X \\<tau>)\\<rceil>\\<rceil>.\n       \\<tau> \\<Turnstile> Q (\\<lambda>\\<tau>. x)", "by (simp add: assms)"], ["proof (state)\nthis:\n  \\<tau> \\<Turnstile> OclForall X Q\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma OclForall_cong':\n assumes \"\\<And>x. x \\<in> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e (X \\<tau>)\\<rceil>\\<rceil> \\<Longrightarrow> \\<tau> \\<Turnstile> P (\\<lambda>\\<tau>. x) \\<Longrightarrow> \\<tau> \\<Turnstile> Q (\\<lambda>\\<tau>. x) \\<Longrightarrow> \\<tau> \\<Turnstile> R (\\<lambda>\\<tau>. x)\"\n assumes P: \"\\<tau> \\<Turnstile> OclForall X P\"\n assumes Q: \"\\<tau> \\<Turnstile> OclForall X Q\"\n shows \"\\<tau> \\<Turnstile> OclForall X R\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<tau> \\<Turnstile> OclForall X R", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<tau> \\<Turnstile> OclForall X R", "have def_X: \"\\<tau> \\<Turnstile> \\<delta> X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<tau> \\<Turnstile> \\<delta> X", "by(insert P, simp add: OclForall_def OclValid_def bot_option_def true_def split: if_split_asm)"], ["proof (state)\nthis:\n  \\<tau> \\<Turnstile> \\<delta> X\n\ngoal (1 subgoal):\n 1. \\<tau> \\<Turnstile> OclForall X R", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<tau> \\<Turnstile> OclForall X R", "apply(insert P Q)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<tau> \\<Turnstile> OclForall X P;\n     \\<tau> \\<Turnstile> OclForall X Q\\<rbrakk>\n    \\<Longrightarrow> \\<tau> \\<Turnstile> OclForall X R", "apply(subst (asm) (1 2) OclForall_rep_set_true[OF def_X], subst OclForall_rep_set_true[OF def_X])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n       (X \\<tau>)\\<rceil>\\<rceil>.\n                \\<tau> \\<Turnstile> P (\\<lambda>\\<tau>. x);\n     \\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                     (X \\<tau>)\\<rceil>\\<rceil>.\n        \\<tau> \\<Turnstile> Q (\\<lambda>\\<tau>. x)\\<rbrakk>\n    \\<Longrightarrow> \\<forall>x\\<in>\\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                (X \\<tau>)\\<rceil>\\<rceil>.\n                         \\<tau> \\<Turnstile> R (\\<lambda>\\<tau>. x)", "by (simp add: assms)"], ["proof (state)\nthis:\n  \\<tau> \\<Turnstile> OclForall X R\n\ngoal:\nNo subgoals!", "qed"], ["", "text\\<open>Strict Equality\\<close>"], ["", "lemma StrictRefEq\\<^sub>S\\<^sub>e\\<^sub>t_defined :\n assumes x_def: \"\\<tau> \\<Turnstile> \\<delta> x\"\n assumes y_def: \"\\<tau> \\<Turnstile> \\<delta> y\"\n shows \"((x::('\\<AA>,'\\<alpha>::null)Set) \\<doteq> y) \\<tau> =\n                (x->forAll\\<^sub>S\\<^sub>e\\<^sub>t(z| y->includes\\<^sub>S\\<^sub>e\\<^sub>t(z)) and (y->forAll\\<^sub>S\\<^sub>e\\<^sub>t(z| x->includes\\<^sub>S\\<^sub>e\\<^sub>t(z)))) \\<tau>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (x \\<doteq> y) \\<tau> =\n    (OclForall x (OclIncludes y) and OclForall y (OclIncludes x)) \\<tau>", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (x \\<doteq> y) \\<tau> =\n    (OclForall x (OclIncludes y) and OclForall y (OclIncludes x)) \\<tau>", "have rep_set_inj : \"\\<And>\\<tau>. (\\<delta> x) \\<tau> = true \\<tau> \\<Longrightarrow>\n                         (\\<delta> y) \\<tau> = true \\<tau> \\<Longrightarrow>\n                          x \\<tau> \\<noteq> y \\<tau> \\<Longrightarrow>\n                          \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e (y \\<tau>)\\<rceil>\\<rceil> \\<noteq> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e (x \\<tau>)\\<rceil>\\<rceil>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<tau>.\n       \\<lbrakk>(\\<delta> x) \\<tau> = true \\<tau>;\n        (\\<delta> y) \\<tau> = true \\<tau>;\n        x \\<tau> \\<noteq> y \\<tau>\\<rbrakk>\n       \\<Longrightarrow> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n    (y \\<tau>)\\<rceil>\\<rceil> \\<noteq>\n                         \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n    (x \\<tau>)\\<rceil>\\<rceil>", "apply(simp add: defined_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<tau>.\n       \\<lbrakk>(if x \\<tau> = \\<bottom> \\<tau> \\<or> x \\<tau> = null \\<tau>\n                 then false \\<tau> else true \\<tau>) =\n                true \\<tau>;\n        (if y \\<tau> = \\<bottom> \\<tau> \\<or> y \\<tau> = null \\<tau>\n         then false \\<tau> else true \\<tau>) =\n        true \\<tau>;\n        x \\<tau> \\<noteq> y \\<tau>\\<rbrakk>\n       \\<Longrightarrow> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n    (y \\<tau>)\\<rceil>\\<rceil> \\<noteq>\n                         \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n    (x \\<tau>)\\<rceil>\\<rceil>", "apply(split if_split_asm, simp add: false_def true_def)+"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<tau>.\n       \\<lbrakk>x \\<tau> \\<noteq> y \\<tau>;\n        \\<not> (x \\<tau> = \\<bottom> \\<tau> \\<or> x \\<tau> = null \\<tau>);\n        true \\<tau> = true \\<tau>;\n        \\<not> (y \\<tau> = \\<bottom> \\<tau> \\<or> y \\<tau> = null \\<tau>);\n        true \\<tau> = true \\<tau>\\<rbrakk>\n       \\<Longrightarrow> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n    (y \\<tau>)\\<rceil>\\<rceil> \\<noteq>\n                         \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n    (x \\<tau>)\\<rceil>\\<rceil>", "apply(simp add: null_fun_def null_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e_def bot_fun_def bot_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<tau>.\n       \\<lbrakk>x \\<tau> \\<noteq> y \\<tau>;\n        x \\<tau> \\<noteq>\n        Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e None \\<and>\n        x \\<tau> \\<noteq>\n        Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e \\<lfloor>None\\<rfloor>;\n        y \\<tau> \\<noteq>\n        Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e None \\<and>\n        y \\<tau> \\<noteq>\n        Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n         \\<lfloor>None\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n    (y \\<tau>)\\<rceil>\\<rceil> \\<noteq>\n                         \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n    (x \\<tau>)\\<rceil>\\<rceil>", "apply(case_tac \"x \\<tau>\", rename_tac x')"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<tau> x'.\n       \\<lbrakk>x \\<tau> \\<noteq> y \\<tau>;\n        x \\<tau> \\<noteq>\n        Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e None \\<and>\n        x \\<tau> \\<noteq>\n        Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e \\<lfloor>None\\<rfloor>;\n        y \\<tau> \\<noteq>\n        Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e None \\<and>\n        y \\<tau> \\<noteq>\n        Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e \\<lfloor>None\\<rfloor>;\n        x \\<tau> = Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e x';\n        x' \\<in> {X. X = \\<bottom> \\<or>\n                     X = null \\<or>\n                     (\\<forall>x\\<in>\\<lceil>\\<lceil>X\\<rceil>\\<rceil>.\n                         x \\<noteq> \\<bottom>)}\\<rbrakk>\n       \\<Longrightarrow> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n    (y \\<tau>)\\<rceil>\\<rceil> \\<noteq>\n                         \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n    (x \\<tau>)\\<rceil>\\<rceil>", "apply(case_tac x', simp_all, rename_tac x'')"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<tau> x' x''.\n       \\<lbrakk>Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                 \\<lfloor>x''\\<rfloor> \\<noteq>\n                y \\<tau>;\n        Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n         \\<lfloor>x''\\<rfloor> \\<noteq>\n        Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e None \\<and>\n        Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n         \\<lfloor>x''\\<rfloor> \\<noteq>\n        Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e \\<lfloor>None\\<rfloor>;\n        y \\<tau> \\<noteq>\n        Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e None \\<and>\n        y \\<tau> \\<noteq>\n        Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e \\<lfloor>None\\<rfloor>;\n        x \\<tau> =\n        Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e \\<lfloor>x''\\<rfloor>;\n        \\<lfloor>x''\\<rfloor> = \\<bottom> \\<or>\n        \\<lfloor>x''\\<rfloor> = null \\<or>\n        (\\<forall>x\\<in>\\<lceil>x''\\<rceil>. x \\<noteq> \\<bottom>);\n        x' = \\<lfloor>x''\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n    (y \\<tau>)\\<rceil>\\<rceil> \\<noteq>\n                         \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n    (Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n      \\<lfloor>x''\\<rfloor>)\\<rceil>\\<rceil>", "apply(case_tac x'', simp_all)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<tau> x' x'' a.\n       \\<lbrakk>Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                 \\<lfloor>\\<lfloor>a\\<rfloor>\\<rfloor> \\<noteq>\n                y \\<tau>;\n        Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n         \\<lfloor>\\<lfloor>a\\<rfloor>\\<rfloor> \\<noteq>\n        Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e None \\<and>\n        Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n         \\<lfloor>\\<lfloor>a\\<rfloor>\\<rfloor> \\<noteq>\n        Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e \\<lfloor>None\\<rfloor>;\n        y \\<tau> \\<noteq>\n        Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e None \\<and>\n        y \\<tau> \\<noteq>\n        Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e \\<lfloor>None\\<rfloor>;\n        x \\<tau> =\n        Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n         \\<lfloor>\\<lfloor>a\\<rfloor>\\<rfloor>;\n        \\<lfloor>\\<lfloor>a\\<rfloor>\\<rfloor> = \\<bottom> \\<or>\n        \\<lfloor>\\<lfloor>a\\<rfloor>\\<rfloor> = null \\<or>\n        (\\<forall>x\\<in>a. x \\<noteq> \\<bottom>);\n        x' = \\<lfloor>\\<lfloor>a\\<rfloor>\\<rfloor>;\n        x'' = \\<lfloor>a\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n    (y \\<tau>)\\<rceil>\\<rceil> \\<noteq>\n                         \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n    (Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n      \\<lfloor>\\<lfloor>a\\<rfloor>\\<rfloor>)\\<rceil>\\<rceil>", "apply(case_tac \"y \\<tau>\", rename_tac y')"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<tau> x' x'' a y'.\n       \\<lbrakk>Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                 \\<lfloor>\\<lfloor>a\\<rfloor>\\<rfloor> \\<noteq>\n                y \\<tau>;\n        Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n         \\<lfloor>\\<lfloor>a\\<rfloor>\\<rfloor> \\<noteq>\n        Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e None \\<and>\n        Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n         \\<lfloor>\\<lfloor>a\\<rfloor>\\<rfloor> \\<noteq>\n        Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e \\<lfloor>None\\<rfloor>;\n        y \\<tau> \\<noteq>\n        Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e None \\<and>\n        y \\<tau> \\<noteq>\n        Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e \\<lfloor>None\\<rfloor>;\n        x \\<tau> =\n        Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n         \\<lfloor>\\<lfloor>a\\<rfloor>\\<rfloor>;\n        \\<lfloor>\\<lfloor>a\\<rfloor>\\<rfloor> = \\<bottom> \\<or>\n        \\<lfloor>\\<lfloor>a\\<rfloor>\\<rfloor> = null \\<or>\n        (\\<forall>x\\<in>a. x \\<noteq> \\<bottom>);\n        x' = \\<lfloor>\\<lfloor>a\\<rfloor>\\<rfloor>;\n        x'' = \\<lfloor>a\\<rfloor>;\n        y \\<tau> = Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e y';\n        y' \\<in> {X. X = \\<bottom> \\<or>\n                     X = null \\<or>\n                     (\\<forall>x\\<in>\\<lceil>\\<lceil>X\\<rceil>\\<rceil>.\n                         x \\<noteq> \\<bottom>)}\\<rbrakk>\n       \\<Longrightarrow> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n    (y \\<tau>)\\<rceil>\\<rceil> \\<noteq>\n                         \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n    (Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n      \\<lfloor>\\<lfloor>a\\<rfloor>\\<rfloor>)\\<rceil>\\<rceil>", "apply(case_tac y', simp_all, rename_tac y'')"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<tau> x' x'' a y' y''.\n       \\<lbrakk>Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                 \\<lfloor>\\<lfloor>a\\<rfloor>\\<rfloor> \\<noteq>\n                Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                 \\<lfloor>y''\\<rfloor>;\n        Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n         \\<lfloor>\\<lfloor>a\\<rfloor>\\<rfloor> \\<noteq>\n        Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e None \\<and>\n        Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n         \\<lfloor>\\<lfloor>a\\<rfloor>\\<rfloor> \\<noteq>\n        Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e \\<lfloor>None\\<rfloor>;\n        Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n         \\<lfloor>y''\\<rfloor> \\<noteq>\n        Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e None \\<and>\n        Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n         \\<lfloor>y''\\<rfloor> \\<noteq>\n        Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e \\<lfloor>None\\<rfloor>;\n        x \\<tau> =\n        Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n         \\<lfloor>\\<lfloor>a\\<rfloor>\\<rfloor>;\n        \\<lfloor>\\<lfloor>a\\<rfloor>\\<rfloor> = \\<bottom> \\<or>\n        \\<lfloor>\\<lfloor>a\\<rfloor>\\<rfloor> = null \\<or>\n        (\\<forall>x\\<in>a. x \\<noteq> \\<bottom>);\n        x' = \\<lfloor>\\<lfloor>a\\<rfloor>\\<rfloor>;\n        x'' = \\<lfloor>a\\<rfloor>;\n        y \\<tau> =\n        Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e \\<lfloor>y''\\<rfloor>;\n        \\<lfloor>y''\\<rfloor> = \\<bottom> \\<or>\n        \\<lfloor>y''\\<rfloor> = null \\<or>\n        (\\<forall>x\\<in>\\<lceil>y''\\<rceil>. x \\<noteq> \\<bottom>);\n        y' = \\<lfloor>y''\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n    (Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n      \\<lfloor>y''\\<rfloor>)\\<rceil>\\<rceil> \\<noteq>\n                         \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n    (Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n      \\<lfloor>\\<lfloor>a\\<rfloor>\\<rfloor>)\\<rceil>\\<rceil>", "apply(case_tac y'', simp_all)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<tau> x' x'' a y' y'' aa.\n       \\<lbrakk>Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                 \\<lfloor>\\<lfloor>a\\<rfloor>\\<rfloor> \\<noteq>\n                Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                 \\<lfloor>\\<lfloor>aa\\<rfloor>\\<rfloor>;\n        Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n         \\<lfloor>\\<lfloor>a\\<rfloor>\\<rfloor> \\<noteq>\n        Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e None \\<and>\n        Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n         \\<lfloor>\\<lfloor>a\\<rfloor>\\<rfloor> \\<noteq>\n        Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e \\<lfloor>None\\<rfloor>;\n        Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n         \\<lfloor>\\<lfloor>aa\\<rfloor>\\<rfloor> \\<noteq>\n        Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e None \\<and>\n        Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n         \\<lfloor>\\<lfloor>aa\\<rfloor>\\<rfloor> \\<noteq>\n        Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e \\<lfloor>None\\<rfloor>;\n        x \\<tau> =\n        Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n         \\<lfloor>\\<lfloor>a\\<rfloor>\\<rfloor>;\n        \\<lfloor>\\<lfloor>a\\<rfloor>\\<rfloor> = \\<bottom> \\<or>\n        \\<lfloor>\\<lfloor>a\\<rfloor>\\<rfloor> = null \\<or>\n        (\\<forall>x\\<in>a. x \\<noteq> \\<bottom>);\n        x' = \\<lfloor>\\<lfloor>a\\<rfloor>\\<rfloor>;\n        x'' = \\<lfloor>a\\<rfloor>;\n        y \\<tau> =\n        Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n         \\<lfloor>\\<lfloor>aa\\<rfloor>\\<rfloor>;\n        \\<lfloor>\\<lfloor>aa\\<rfloor>\\<rfloor> = \\<bottom> \\<or>\n        \\<lfloor>\\<lfloor>aa\\<rfloor>\\<rfloor> = null \\<or>\n        (\\<forall>x\\<in>aa. x \\<noteq> \\<bottom>);\n        y' = \\<lfloor>\\<lfloor>aa\\<rfloor>\\<rfloor>;\n        y'' = \\<lfloor>aa\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n    (Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n      \\<lfloor>\\<lfloor>aa\\<rfloor>\\<rfloor>)\\<rceil>\\<rceil> \\<noteq>\n                         \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n    (Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n      \\<lfloor>\\<lfloor>a\\<rfloor>\\<rfloor>)\\<rceil>\\<rceil>", "apply(simp add: Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e_inverse)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<tau> x' x'' a y' y'' aa.\n       \\<lbrakk>Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                 \\<lfloor>\\<lfloor>a\\<rfloor>\\<rfloor> \\<noteq>\n                Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                 \\<lfloor>\\<lfloor>aa\\<rfloor>\\<rfloor>;\n        Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n         \\<lfloor>\\<lfloor>a\\<rfloor>\\<rfloor> \\<noteq>\n        Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e None \\<and>\n        Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n         \\<lfloor>\\<lfloor>a\\<rfloor>\\<rfloor> \\<noteq>\n        Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e \\<lfloor>None\\<rfloor>;\n        Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n         \\<lfloor>\\<lfloor>aa\\<rfloor>\\<rfloor> \\<noteq>\n        Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e None \\<and>\n        Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n         \\<lfloor>\\<lfloor>aa\\<rfloor>\\<rfloor> \\<noteq>\n        Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e \\<lfloor>None\\<rfloor>;\n        x \\<tau> =\n        Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n         \\<lfloor>\\<lfloor>a\\<rfloor>\\<rfloor>;\n        \\<lfloor>\\<lfloor>a\\<rfloor>\\<rfloor> = \\<bottom> \\<or>\n        \\<lfloor>\\<lfloor>a\\<rfloor>\\<rfloor> = null \\<or>\n        (\\<forall>x\\<in>a. x \\<noteq> \\<bottom>);\n        x' = \\<lfloor>\\<lfloor>a\\<rfloor>\\<rfloor>;\n        x'' = \\<lfloor>a\\<rfloor>;\n        y \\<tau> =\n        Abs_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n         \\<lfloor>\\<lfloor>aa\\<rfloor>\\<rfloor>;\n        \\<lfloor>\\<lfloor>aa\\<rfloor>\\<rfloor> = \\<bottom> \\<or>\n        \\<lfloor>\\<lfloor>aa\\<rfloor>\\<rfloor> = null \\<or>\n        (\\<forall>x\\<in>aa. x \\<noteq> \\<bottom>);\n        y' = \\<lfloor>\\<lfloor>aa\\<rfloor>\\<rfloor>;\n        y'' = \\<lfloor>aa\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> aa \\<noteq> a", "by(blast)"], ["proof (state)\nthis:\n  \\<lbrakk>(\\<delta> x) ?\\<tau> = true ?\\<tau>;\n   (\\<delta> y) ?\\<tau> = true ?\\<tau>;\n   x ?\\<tau> \\<noteq> y ?\\<tau>\\<rbrakk>\n  \\<Longrightarrow> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                     (y ?\\<tau>)\\<rceil>\\<rceil> \\<noteq>\n                    \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                     (x ?\\<tau>)\\<rceil>\\<rceil>\n\ngoal (1 subgoal):\n 1. (x \\<doteq> y) \\<tau> =\n    (OclForall x (OclIncludes y) and OclForall y (OclIncludes x)) \\<tau>", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. (x \\<doteq> y) \\<tau> =\n    (OclForall x (OclIncludes y) and OclForall y (OclIncludes x)) \\<tau>", "apply(simp add: StrictRefEq\\<^sub>S\\<^sub>e\\<^sub>t StrongEq_def\n    foundation20[OF x_def, simplified OclValid_def]\n    foundation20[OF y_def, simplified OclValid_def])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lfloor>\\<lfloor>x \\<tau> = y \\<tau>\\<rfloor>\\<rfloor> =\n    (OclForall x (OclIncludes y) and OclForall y (OclIncludes x)) \\<tau>", "apply(subgoal_tac \"\\<lfloor>\\<lfloor>x \\<tau> = y \\<tau>\\<rfloor>\\<rfloor> = true \\<tau> \\<or> \\<lfloor>\\<lfloor>x \\<tau> = y \\<tau>\\<rfloor>\\<rfloor> = false \\<tau>\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lfloor>\\<lfloor>x \\<tau> = y \\<tau>\\<rfloor>\\<rfloor> =\n    true \\<tau> \\<or>\n    \\<lfloor>\\<lfloor>x \\<tau> = y \\<tau>\\<rfloor>\\<rfloor> =\n    false \\<tau> \\<Longrightarrow>\n    \\<lfloor>\\<lfloor>x \\<tau> = y \\<tau>\\<rfloor>\\<rfloor> =\n    (OclForall x (OclIncludes y) and OclForall y (OclIncludes x)) \\<tau>\n 2. \\<lfloor>\\<lfloor>x \\<tau> = y \\<tau>\\<rfloor>\\<rfloor> =\n    true \\<tau> \\<or>\n    \\<lfloor>\\<lfloor>x \\<tau> = y \\<tau>\\<rfloor>\\<rfloor> = false \\<tau>", "prefer 2"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lfloor>\\<lfloor>x \\<tau> = y \\<tau>\\<rfloor>\\<rfloor> =\n    true \\<tau> \\<or>\n    \\<lfloor>\\<lfloor>x \\<tau> = y \\<tau>\\<rfloor>\\<rfloor> = false \\<tau>\n 2. \\<lfloor>\\<lfloor>x \\<tau> = y \\<tau>\\<rfloor>\\<rfloor> =\n    true \\<tau> \\<or>\n    \\<lfloor>\\<lfloor>x \\<tau> = y \\<tau>\\<rfloor>\\<rfloor> =\n    false \\<tau> \\<Longrightarrow>\n    \\<lfloor>\\<lfloor>x \\<tau> = y \\<tau>\\<rfloor>\\<rfloor> =\n    (OclForall x (OclIncludes y) and OclForall y (OclIncludes x)) \\<tau>", "apply(simp add: false_def true_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lfloor>\\<lfloor>x \\<tau> = y \\<tau>\\<rfloor>\\<rfloor> =\n    true \\<tau> \\<or>\n    \\<lfloor>\\<lfloor>x \\<tau> = y \\<tau>\\<rfloor>\\<rfloor> =\n    false \\<tau> \\<Longrightarrow>\n    \\<lfloor>\\<lfloor>x \\<tau> = y \\<tau>\\<rfloor>\\<rfloor> =\n    (OclForall x (OclIncludes y) and OclForall y (OclIncludes x)) \\<tau>", "(* *)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lfloor>\\<lfloor>x \\<tau> = y \\<tau>\\<rfloor>\\<rfloor> =\n    true \\<tau> \\<or>\n    \\<lfloor>\\<lfloor>x \\<tau> = y \\<tau>\\<rfloor>\\<rfloor> =\n    false \\<tau> \\<Longrightarrow>\n    \\<lfloor>\\<lfloor>x \\<tau> = y \\<tau>\\<rfloor>\\<rfloor> =\n    (OclForall x (OclIncludes y) and OclForall y (OclIncludes x)) \\<tau>", "apply(erule disjE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lfloor>\\<lfloor>x \\<tau> = y \\<tau>\\<rfloor>\\<rfloor> =\n    true \\<tau> \\<Longrightarrow>\n    \\<lfloor>\\<lfloor>x \\<tau> = y \\<tau>\\<rfloor>\\<rfloor> =\n    (OclForall x (OclIncludes y) and OclForall y (OclIncludes x)) \\<tau>\n 2. \\<lfloor>\\<lfloor>x \\<tau> = y \\<tau>\\<rfloor>\\<rfloor> =\n    false \\<tau> \\<Longrightarrow>\n    \\<lfloor>\\<lfloor>x \\<tau> = y \\<tau>\\<rfloor>\\<rfloor> =\n    (OclForall x (OclIncludes y) and OclForall y (OclIncludes x)) \\<tau>", "apply(simp add: true_def)"], ["proof (prove)\ngoal (2 subgoals):\n 1. x \\<tau> = y \\<tau> \\<Longrightarrow>\n    \\<lfloor>\\<lfloor>True\\<rfloor>\\<rfloor> =\n    (OclForall x (OclIncludes y) and OclForall y (OclIncludes x)) \\<tau>\n 2. \\<lfloor>\\<lfloor>x \\<tau> = y \\<tau>\\<rfloor>\\<rfloor> =\n    false \\<tau> \\<Longrightarrow>\n    \\<lfloor>\\<lfloor>x \\<tau> = y \\<tau>\\<rfloor>\\<rfloor> =\n    (OclForall x (OclIncludes y) and OclForall y (OclIncludes x)) \\<tau>", "apply(subgoal_tac \"(\\<tau> \\<Turnstile> OclForall x (OclIncludes y)) \\<and> (\\<tau> \\<Turnstile> OclForall y (OclIncludes x))\")"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>x \\<tau> = y \\<tau>;\n     \\<tau> \\<Turnstile> OclForall x (OclIncludes y) \\<and>\n     \\<tau> \\<Turnstile> OclForall y (OclIncludes x)\\<rbrakk>\n    \\<Longrightarrow> \\<lfloor>\\<lfloor>True\\<rfloor>\\<rfloor> =\n                      (OclForall x (OclIncludes y) and\n                       OclForall y (OclIncludes x))\n                       \\<tau>\n 2. x \\<tau> = y \\<tau> \\<Longrightarrow>\n    \\<tau> \\<Turnstile> OclForall x (OclIncludes y) \\<and>\n    \\<tau> \\<Turnstile> OclForall y (OclIncludes x)\n 3. \\<lfloor>\\<lfloor>x \\<tau> = y \\<tau>\\<rfloor>\\<rfloor> =\n    false \\<tau> \\<Longrightarrow>\n    \\<lfloor>\\<lfloor>x \\<tau> = y \\<tau>\\<rfloor>\\<rfloor> =\n    (OclForall x (OclIncludes y) and OclForall y (OclIncludes x)) \\<tau>", "apply(subst cp_OclAnd, simp add: true_def OclValid_def)"], ["proof (prove)\ngoal (2 subgoals):\n 1. x \\<tau> = y \\<tau> \\<Longrightarrow>\n    \\<tau> \\<Turnstile> OclForall x (OclIncludes y) \\<and>\n    \\<tau> \\<Turnstile> OclForall y (OclIncludes x)\n 2. \\<lfloor>\\<lfloor>x \\<tau> = y \\<tau>\\<rfloor>\\<rfloor> =\n    false \\<tau> \\<Longrightarrow>\n    \\<lfloor>\\<lfloor>x \\<tau> = y \\<tau>\\<rfloor>\\<rfloor> =\n    (OclForall x (OclIncludes y) and OclForall y (OclIncludes x)) \\<tau>", "apply(simp add: OclForall_includes[OF x_def y_def]\n                   OclForall_includes[OF y_def x_def])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lfloor>\\<lfloor>x \\<tau> = y \\<tau>\\<rfloor>\\<rfloor> =\n    false \\<tau> \\<Longrightarrow>\n    \\<lfloor>\\<lfloor>x \\<tau> = y \\<tau>\\<rfloor>\\<rfloor> =\n    (OclForall x (OclIncludes y) and OclForall y (OclIncludes x)) \\<tau>", "(* *)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lfloor>\\<lfloor>x \\<tau> = y \\<tau>\\<rfloor>\\<rfloor> =\n    false \\<tau> \\<Longrightarrow>\n    \\<lfloor>\\<lfloor>x \\<tau> = y \\<tau>\\<rfloor>\\<rfloor> =\n    (OclForall x (OclIncludes y) and OclForall y (OclIncludes x)) \\<tau>", "apply(simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lfloor>\\<lfloor>x \\<tau> = y \\<tau>\\<rfloor>\\<rfloor> =\n    false \\<tau> \\<Longrightarrow>\n    false \\<tau> =\n    (OclForall x (OclIncludes y) and OclForall y (OclIncludes x)) \\<tau>", "apply(subgoal_tac \"OclForall x (OclIncludes y) \\<tau> = false \\<tau> \\<or>\n                     OclForall y (OclIncludes x) \\<tau> = false \\<tau>\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<lfloor>\\<lfloor>x \\<tau> = y \\<tau>\\<rfloor>\\<rfloor> =\n             false \\<tau>;\n     OclForall x (OclIncludes y) \\<tau> = false \\<tau> \\<or>\n     OclForall y (OclIncludes x) \\<tau> = false \\<tau>\\<rbrakk>\n    \\<Longrightarrow> false \\<tau> =\n                      (OclForall x (OclIncludes y) and\n                       OclForall y (OclIncludes x))\n                       \\<tau>\n 2. \\<lfloor>\\<lfloor>x \\<tau> = y \\<tau>\\<rfloor>\\<rfloor> =\n    false \\<tau> \\<Longrightarrow>\n    OclForall x (OclIncludes y) \\<tau> = false \\<tau> \\<or>\n    OclForall y (OclIncludes x) \\<tau> = false \\<tau>", "apply(subst cp_OclAnd, metis OclAnd_false1 OclAnd_false2 cp_OclAnd)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lfloor>\\<lfloor>x \\<tau> = y \\<tau>\\<rfloor>\\<rfloor> =\n    false \\<tau> \\<Longrightarrow>\n    OclForall x (OclIncludes y) \\<tau> = false \\<tau> \\<or>\n    OclForall y (OclIncludes x) \\<tau> = false \\<tau>", "apply(simp only: OclForall_not_includes[OF x_def y_def, simplified OclValid_def]\n                   OclForall_not_includes[OF y_def x_def, simplified OclValid_def],\n        simp add: false_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<tau> \\<noteq> y \\<tau> \\<Longrightarrow>\n    \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                     (x \\<tau>)\\<rceil>\\<rceil>\n    \\<subseteq> \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                 (y \\<tau>)\\<rceil>\\<rceil> \\<longrightarrow>\n    \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                     (y \\<tau>)\\<rceil>\\<rceil> \\<noteq>\n    \\<lceil>\\<lceil>Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                     (x \\<tau>)\\<rceil>\\<rceil>", "by (metis OclValid_def rep_set_inj subset_antisym x_def y_def)"], ["proof (state)\nthis:\n  (x \\<doteq> y) \\<tau> =\n  (OclForall x (OclIncludes y) and OclForall y (OclIncludes x)) \\<tau>\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma StrictRefEq\\<^sub>S\\<^sub>e\\<^sub>t_exec[simp,code_unfold] :\n\"((x::('\\<AA>,'\\<alpha>::null)Set) \\<doteq> y) =\n  (if \\<delta> x then (if \\<delta> y\n                then ((x->forAll\\<^sub>S\\<^sub>e\\<^sub>t(z| y->includes\\<^sub>S\\<^sub>e\\<^sub>t(z)) and (y->forAll\\<^sub>S\\<^sub>e\\<^sub>t(z| x->includes\\<^sub>S\\<^sub>e\\<^sub>t(z)))))\n                else if \\<upsilon> y\n                      then false \\<comment> \\<open>\\<open>x'->includes = null\\<close>\\<close>\n                      else invalid\n                      endif\n                endif)\n         else if \\<upsilon> x \\<comment> \\<open>\\<open>null = ???\\<close>\\<close>\n              then if \\<upsilon> y then not(\\<delta> y) else invalid endif\n              else invalid\n              endif\n         endif)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (x \\<doteq> y) =\n    (if \\<delta> x then if \\<delta> y then OclForall x (OclIncludes y) and\n     OclForall y\n      (OclIncludes\n        x) else if \\<upsilon> y then false else invalid endif endif else if \\<upsilon> x then if \\<upsilon> y then not\n  (\\<delta> y) else invalid endif else invalid endif endif)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (x \\<doteq> y) =\n    (if \\<delta> x then if \\<delta> y then OclForall x (OclIncludes y) and\n     OclForall y\n      (OclIncludes\n        x) else if \\<upsilon> y then false else invalid endif endif else if \\<upsilon> x then if \\<upsilon> y then not\n  (\\<delta> y) else invalid endif else invalid endif endif)", "have defined_inject_true : \"\\<And>\\<tau> P. (\\<not> (\\<tau> \\<Turnstile> \\<delta> P)) = ((\\<delta> P) \\<tau> = false \\<tau>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<tau> P.\n       (\\<tau> |\\<noteq> \\<delta> P) = ((\\<delta> P) \\<tau> = false \\<tau>)", "by (metis bot_fun_def OclValid_def defined_def foundation16 null_fun_def)"], ["proof (state)\nthis:\n  (?\\<tau> |\\<noteq> \\<delta> ?P) = ((\\<delta> ?P) ?\\<tau> = false ?\\<tau>)\n\ngoal (1 subgoal):\n 1. (x \\<doteq> y) =\n    (if \\<delta> x then if \\<delta> y then OclForall x (OclIncludes y) and\n     OclForall y\n      (OclIncludes\n        x) else if \\<upsilon> y then false else invalid endif endif else if \\<upsilon> x then if \\<upsilon> y then not\n  (\\<delta> y) else invalid endif else invalid endif endif)", "have valid_inject_true : \"\\<And>\\<tau> P. (\\<not> (\\<tau> \\<Turnstile> \\<upsilon> P)) = ((\\<upsilon> P) \\<tau> = false \\<tau>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<tau> P.\n       (\\<tau> |\\<noteq> \\<upsilon> P) =\n       ((\\<upsilon> P) \\<tau> = false \\<tau>)", "by (metis bot_fun_def OclIf_true' OclIncludes_charn0 OclIncludes_charn0' OclValid_def valid_def\n           foundation6 foundation9)"], ["proof (state)\nthis:\n  (?\\<tau>1 |\\<noteq> \\<upsilon> ?P1) =\n  ((\\<upsilon> ?P1) ?\\<tau>1 = false ?\\<tau>1)\n\ngoal (1 subgoal):\n 1. (x \\<doteq> y) =\n    (if \\<delta> x then if \\<delta> y then OclForall x (OclIncludes y) and\n     OclForall y\n      (OclIncludes\n        x) else if \\<upsilon> y then false else invalid endif endif else if \\<upsilon> x then if \\<upsilon> y then not\n  (\\<delta> y) else invalid endif else invalid endif endif)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. (x \\<doteq> y) =\n    (if \\<delta> x then if \\<delta> y then OclForall x (OclIncludes y) and\n     OclForall y\n      (OclIncludes\n        x) else if \\<upsilon> y then false else invalid endif endif else if \\<upsilon> x then if \\<upsilon> y then not\n  (\\<delta> y) else invalid endif else invalid endif endif)", "apply(rule ext, rename_tac \\<tau>)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<tau>.\n       (x \\<doteq> y) \\<tau> =\n       (if \\<delta> x then if \\<delta> y then OclForall x\n         (OclIncludes y) and\n        OclForall y\n         (OclIncludes\n           x) else if \\<upsilon> y then false else invalid endif endif else if \\<upsilon> x then if \\<upsilon> y then not\n     (\\<delta> y) else invalid endif else invalid endif endif)\n        \\<tau>", "(* *)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<tau>.\n       (x \\<doteq> y) \\<tau> =\n       (if \\<delta> x then if \\<delta> y then OclForall x\n         (OclIncludes y) and\n        OclForall y\n         (OclIncludes\n           x) else if \\<upsilon> y then false else invalid endif endif else if \\<upsilon> x then if \\<upsilon> y then not\n     (\\<delta> y) else invalid endif else invalid endif endif)\n        \\<tau>", "apply(simp add: OclIf_def\n                  defined_inject_true[simplified OclValid_def]\n                  valid_inject_true[simplified OclValid_def],\n        subst false_def, subst true_def, simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<tau>.\n       false \\<tau> \\<noteq> true \\<tau> \\<longrightarrow>\n       ((\\<upsilon> y) \\<tau> = true \\<tau> \\<longrightarrow>\n        ((\\<delta> y) \\<tau> = true \\<tau> \\<longrightarrow>\n         ((\\<upsilon> x) \\<tau> = true \\<tau> \\<longrightarrow>\n          ((\\<delta> x) \\<tau> = true \\<tau> \\<longrightarrow>\n           (x \\<doteq> y) \\<tau> =\n           (OclForall x (OclIncludes y) and OclForall y (OclIncludes x))\n            \\<tau>) \\<and>\n          ((\\<delta> x) \\<tau> = false \\<tau> \\<longrightarrow>\n           (x \\<doteq> y) \\<tau> = not (\\<delta> y) \\<tau>)) \\<and>\n         ((\\<upsilon> x) \\<tau> = false \\<tau> \\<longrightarrow>\n          ((\\<delta> x) \\<tau> = true \\<tau> \\<longrightarrow>\n           (x \\<doteq> y) \\<tau> =\n           (OclForall x (OclIncludes y) and OclForall y (OclIncludes x))\n            \\<tau>) \\<and>\n          ((\\<delta> x) \\<tau> = false \\<tau> \\<longrightarrow>\n           (x \\<doteq> y) \\<tau> = invalid \\<tau>))) \\<and>\n        ((\\<delta> y) \\<tau> = false \\<tau> \\<longrightarrow>\n         ((\\<upsilon> x) \\<tau> = true \\<tau> \\<longrightarrow>\n          ((\\<delta> x) \\<tau> = true \\<tau> \\<longrightarrow>\n           (x \\<doteq> y) \\<tau> = false \\<tau>) \\<and>\n          ((\\<delta> x) \\<tau> = false \\<tau> \\<longrightarrow>\n           (x \\<doteq> y) \\<tau> = not (\\<delta> y) \\<tau>)) \\<and>\n         ((\\<upsilon> x) \\<tau> = false \\<tau> \\<longrightarrow>\n          ((\\<delta> x) \\<tau> = true \\<tau> \\<longrightarrow>\n           (x \\<doteq> y) \\<tau> = false \\<tau>) \\<and>\n          ((\\<delta> x) \\<tau> = false \\<tau> \\<longrightarrow>\n           (x \\<doteq> y) \\<tau> = invalid \\<tau>)))) \\<and>\n       ((\\<upsilon> y) \\<tau> = false \\<tau> \\<longrightarrow>\n        ((\\<delta> y) \\<tau> = true \\<tau> \\<longrightarrow>\n         ((\\<upsilon> x) \\<tau> = true \\<tau> \\<longrightarrow>\n          ((\\<delta> x) \\<tau> = true \\<tau> \\<longrightarrow>\n           (x \\<doteq> y) \\<tau> =\n           (OclForall x (OclIncludes y) and OclForall y (OclIncludes x))\n            \\<tau>) \\<and>\n          ((\\<delta> x) \\<tau> = false \\<tau> \\<longrightarrow>\n           (x \\<doteq> y) \\<tau> = invalid \\<tau>)) \\<and>\n         ((\\<upsilon> x) \\<tau> = false \\<tau> \\<longrightarrow>\n          ((\\<delta> x) \\<tau> = true \\<tau> \\<longrightarrow>\n           (x \\<doteq> y) \\<tau> =\n           (OclForall x (OclIncludes y) and OclForall y (OclIncludes x))\n            \\<tau>) \\<and>\n          ((\\<delta> x) \\<tau> = false \\<tau> \\<longrightarrow>\n           (x \\<doteq> y) \\<tau> = invalid \\<tau>))) \\<and>\n        ((\\<delta> y) \\<tau> = false \\<tau> \\<longrightarrow>\n         ((\\<upsilon> x) \\<tau> = true \\<tau> \\<longrightarrow>\n          ((\\<delta> x) \\<tau> = true \\<tau> \\<longrightarrow>\n           (x \\<doteq> y) \\<tau> = invalid \\<tau>) \\<and>\n          ((\\<delta> x) \\<tau> = false \\<tau> \\<longrightarrow>\n           (x \\<doteq> y) \\<tau> = invalid \\<tau>)) \\<and>\n         ((\\<upsilon> x) \\<tau> = false \\<tau> \\<longrightarrow>\n          ((\\<delta> x) \\<tau> = true \\<tau> \\<longrightarrow>\n           (x \\<doteq> y) \\<tau> = invalid \\<tau>) \\<and>\n          ((\\<delta> x) \\<tau> = false \\<tau> \\<longrightarrow>\n           (x \\<doteq> y) \\<tau> = invalid \\<tau>))))", "apply(subst (1 2) cp_OclNot, simp, simp add: cp_OclNot[symmetric])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<tau>.\n       false \\<tau> \\<noteq> true \\<tau> \\<longrightarrow>\n       ((\\<upsilon> y) \\<tau> = true \\<tau> \\<longrightarrow>\n        ((\\<delta> y) \\<tau> = true \\<tau> \\<longrightarrow>\n         ((\\<upsilon> x) \\<tau> = true \\<tau> \\<longrightarrow>\n          ((\\<delta> x) \\<tau> = true \\<tau> \\<longrightarrow>\n           (x \\<doteq> y) \\<tau> =\n           (OclForall x (OclIncludes y) and OclForall y (OclIncludes x))\n            \\<tau>) \\<and>\n          ((\\<delta> x) \\<tau> = false \\<tau> \\<longrightarrow>\n           (x \\<doteq> y) \\<tau> = false \\<tau>)) \\<and>\n         ((\\<upsilon> x) \\<tau> = false \\<tau> \\<longrightarrow>\n          ((\\<delta> x) \\<tau> = true \\<tau> \\<longrightarrow>\n           (x \\<doteq> y) \\<tau> =\n           (OclForall x (OclIncludes y) and OclForall y (OclIncludes x))\n            \\<tau>) \\<and>\n          ((\\<delta> x) \\<tau> = false \\<tau> \\<longrightarrow>\n           (x \\<doteq> y) \\<tau> = invalid \\<tau>))) \\<and>\n        ((\\<delta> y) \\<tau> = false \\<tau> \\<longrightarrow>\n         ((\\<upsilon> x) \\<tau> = true \\<tau> \\<longrightarrow>\n          ((\\<delta> x) \\<tau> = true \\<tau> \\<longrightarrow>\n           (x \\<doteq> y) \\<tau> = false \\<tau>) \\<and>\n          ((\\<delta> x) \\<tau> = false \\<tau> \\<longrightarrow>\n           (x \\<doteq> y) \\<tau> = true \\<tau>)) \\<and>\n         ((\\<upsilon> x) \\<tau> = false \\<tau> \\<longrightarrow>\n          ((\\<delta> x) \\<tau> = true \\<tau> \\<longrightarrow>\n           (x \\<doteq> y) \\<tau> = false \\<tau>) \\<and>\n          ((\\<delta> x) \\<tau> = false \\<tau> \\<longrightarrow>\n           (x \\<doteq> y) \\<tau> = invalid \\<tau>)))) \\<and>\n       ((\\<upsilon> y) \\<tau> = false \\<tau> \\<longrightarrow>\n        ((\\<delta> y) \\<tau> = true \\<tau> \\<longrightarrow>\n         ((\\<upsilon> x) \\<tau> = true \\<tau> \\<longrightarrow>\n          ((\\<delta> x) \\<tau> = true \\<tau> \\<longrightarrow>\n           (x \\<doteq> y) \\<tau> =\n           (OclForall x (OclIncludes y) and OclForall y (OclIncludes x))\n            \\<tau>) \\<and>\n          ((\\<delta> x) \\<tau> = false \\<tau> \\<longrightarrow>\n           (x \\<doteq> y) \\<tau> = invalid \\<tau>)) \\<and>\n         ((\\<upsilon> x) \\<tau> = false \\<tau> \\<longrightarrow>\n          ((\\<delta> x) \\<tau> = true \\<tau> \\<longrightarrow>\n           (x \\<doteq> y) \\<tau> =\n           (OclForall x (OclIncludes y) and OclForall y (OclIncludes x))\n            \\<tau>) \\<and>\n          ((\\<delta> x) \\<tau> = false \\<tau> \\<longrightarrow>\n           (x \\<doteq> y) \\<tau> = invalid \\<tau>))) \\<and>\n        ((\\<delta> y) \\<tau> = false \\<tau> \\<longrightarrow>\n         ((\\<upsilon> x) \\<tau> = true \\<tau> \\<longrightarrow>\n          ((\\<delta> x) \\<tau> = true \\<tau> \\<longrightarrow>\n           (x \\<doteq> y) \\<tau> = invalid \\<tau>) \\<and>\n          ((\\<delta> x) \\<tau> = false \\<tau> \\<longrightarrow>\n           (x \\<doteq> y) \\<tau> = invalid \\<tau>)) \\<and>\n         ((\\<upsilon> x) \\<tau> = false \\<tau> \\<longrightarrow>\n          ((\\<delta> x) \\<tau> = true \\<tau> \\<longrightarrow>\n           (x \\<doteq> y) \\<tau> = invalid \\<tau>) \\<and>\n          ((\\<delta> x) \\<tau> = false \\<tau> \\<longrightarrow>\n           (x \\<doteq> y) \\<tau> = invalid \\<tau>))))", "apply(simp add: StrictRefEq\\<^sub>S\\<^sub>e\\<^sub>t_defined[simplified OclValid_def])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<tau>.\n       false \\<tau> \\<noteq> true \\<tau> \\<longrightarrow>\n       ((\\<upsilon> y) \\<tau> = true \\<tau> \\<longrightarrow>\n        ((\\<delta> y) \\<tau> = true \\<tau> \\<longrightarrow>\n         ((\\<upsilon> x) \\<tau> = true \\<tau> \\<longrightarrow>\n          (\\<delta> x) \\<tau> = false \\<tau> \\<longrightarrow>\n          (x \\<doteq> y) \\<tau> = false \\<tau>) \\<and>\n         ((\\<upsilon> x) \\<tau> = false \\<tau> \\<longrightarrow>\n          (\\<delta> x) \\<tau> = false \\<tau> \\<longrightarrow>\n          (x \\<doteq> y) \\<tau> = invalid \\<tau>)) \\<and>\n        ((\\<delta> y) \\<tau> = false \\<tau> \\<longrightarrow>\n         ((\\<upsilon> x) \\<tau> = true \\<tau> \\<longrightarrow>\n          ((\\<delta> x) \\<tau> = true \\<tau> \\<longrightarrow>\n           (x \\<doteq> y) \\<tau> = false \\<tau>) \\<and>\n          ((\\<delta> x) \\<tau> = false \\<tau> \\<longrightarrow>\n           (x \\<doteq> y) \\<tau> = true \\<tau>)) \\<and>\n         ((\\<upsilon> x) \\<tau> = false \\<tau> \\<longrightarrow>\n          ((\\<delta> x) \\<tau> = true \\<tau> \\<longrightarrow>\n           (x \\<doteq> y) \\<tau> = false \\<tau>) \\<and>\n          ((\\<delta> x) \\<tau> = false \\<tau> \\<longrightarrow>\n           (x \\<doteq> y) \\<tau> = invalid \\<tau>)))) \\<and>\n       ((\\<upsilon> y) \\<tau> = false \\<tau> \\<longrightarrow>\n        ((\\<delta> y) \\<tau> = true \\<tau> \\<longrightarrow>\n         ((\\<upsilon> x) \\<tau> = true \\<tau> \\<longrightarrow>\n          (\\<delta> x) \\<tau> = false \\<tau> \\<longrightarrow>\n          (x \\<doteq> y) \\<tau> = invalid \\<tau>) \\<and>\n         ((\\<upsilon> x) \\<tau> = false \\<tau> \\<longrightarrow>\n          (\\<delta> x) \\<tau> = false \\<tau> \\<longrightarrow>\n          (x \\<doteq> y) \\<tau> = invalid \\<tau>)) \\<and>\n        ((\\<delta> y) \\<tau> = false \\<tau> \\<longrightarrow>\n         ((\\<upsilon> x) \\<tau> = true \\<tau> \\<longrightarrow>\n          ((\\<delta> x) \\<tau> = true \\<tau> \\<longrightarrow>\n           (x \\<doteq> y) \\<tau> = invalid \\<tau>) \\<and>\n          ((\\<delta> x) \\<tau> = false \\<tau> \\<longrightarrow>\n           (x \\<doteq> y) \\<tau> = invalid \\<tau>)) \\<and>\n         ((\\<upsilon> x) \\<tau> = false \\<tau> \\<longrightarrow>\n          ((\\<delta> x) \\<tau> = true \\<tau> \\<longrightarrow>\n           (x \\<doteq> y) \\<tau> = invalid \\<tau>) \\<and>\n          ((\\<delta> x) \\<tau> = false \\<tau> \\<longrightarrow>\n           (x \\<doteq> y) \\<tau> = invalid \\<tau>))))", "by(simp add: StrictRefEq\\<^sub>S\\<^sub>e\\<^sub>t StrongEq_def false_def true_def valid_def defined_def)"], ["proof (state)\nthis:\n  (x \\<doteq> y) =\n  (if \\<delta> x then if \\<delta> y then OclForall x (OclIncludes y) and\n   OclForall y\n    (OclIncludes\n      x) else if \\<upsilon> y then false else invalid endif endif else if \\<upsilon> x then if \\<upsilon> y then not\n(\\<delta> y) else invalid endif else invalid endif endif)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma StrictRefEq\\<^sub>S\\<^sub>e\\<^sub>t_L_subst1 : \"cp P \\<Longrightarrow> \\<tau> \\<Turnstile> \\<upsilon> x \\<Longrightarrow> \\<tau> \\<Turnstile> \\<upsilon> y \\<Longrightarrow> \\<tau> \\<Turnstile> \\<upsilon> P x \\<Longrightarrow> \\<tau> \\<Turnstile> \\<upsilon> P y \\<Longrightarrow>\n    \\<tau> \\<Turnstile> (x::('\\<AA>,'\\<alpha>::null)Set) \\<doteq> y \\<Longrightarrow> \\<tau> \\<Turnstile> (P x ::('\\<AA>,'\\<alpha>::null)Set) \\<doteq> P y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>cp P; \\<tau> \\<Turnstile> \\<upsilon> x;\n     \\<tau> \\<Turnstile> \\<upsilon> y; \\<tau> \\<Turnstile> \\<upsilon> P x;\n     \\<tau> \\<Turnstile> \\<upsilon> P y;\n     \\<tau> \\<Turnstile> x \\<doteq> y\\<rbrakk>\n    \\<Longrightarrow> \\<tau> \\<Turnstile> P x \\<doteq> P y", "apply(simp only: StrictRefEq\\<^sub>S\\<^sub>e\\<^sub>t OclValid_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>cp P; (\\<upsilon> x) \\<tau> = true \\<tau>;\n     (\\<upsilon> y) \\<tau> = true \\<tau>;\n     (\\<upsilon> P x) \\<tau> = true \\<tau>;\n     (\\<upsilon> P y) \\<tau> = true \\<tau>;\n     (if true \\<tau> = true \\<tau> \\<and> true \\<tau> = true \\<tau>\n      then (x \\<triangleq> y) \\<tau> else invalid \\<tau>) =\n     true \\<tau>\\<rbrakk>\n    \\<Longrightarrow> (if true \\<tau> = true \\<tau> \\<and>\n                          true \\<tau> = true \\<tau>\n                       then (P x \\<triangleq> P y) \\<tau>\n                       else invalid \\<tau>) =\n                      true \\<tau>", "apply(split if_split_asm)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>cp P; (\\<upsilon> x) \\<tau> = true \\<tau>;\n     (\\<upsilon> y) \\<tau> = true \\<tau>;\n     (\\<upsilon> P x) \\<tau> = true \\<tau>;\n     (\\<upsilon> P y) \\<tau> = true \\<tau>; true \\<tau> = true \\<tau>;\n     true \\<tau> = true \\<tau>;\n     (x \\<triangleq> y) \\<tau> = true \\<tau>\\<rbrakk>\n    \\<Longrightarrow> (if true \\<tau> = true \\<tau> \\<and>\n                          true \\<tau> = true \\<tau>\n                       then (P x \\<triangleq> P y) \\<tau>\n                       else invalid \\<tau>) =\n                      true \\<tau>\n 2. \\<lbrakk>cp P; (\\<upsilon> x) \\<tau> = true \\<tau>;\n     (\\<upsilon> y) \\<tau> = true \\<tau>;\n     (\\<upsilon> P x) \\<tau> = true \\<tau>;\n     (\\<upsilon> P y) \\<tau> = true \\<tau>;\n     \\<not> (true \\<tau> = true \\<tau> \\<and> true \\<tau> = true \\<tau>);\n     invalid \\<tau> = true \\<tau>\\<rbrakk>\n    \\<Longrightarrow> (if true \\<tau> = true \\<tau> \\<and>\n                          true \\<tau> = true \\<tau>\n                       then (P x \\<triangleq> P y) \\<tau>\n                       else invalid \\<tau>) =\n                      true \\<tau>", "apply(simp add: StrongEq_L_subst1[simplified OclValid_def])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>cp P; (\\<upsilon> x) \\<tau> = true \\<tau>;\n     (\\<upsilon> y) \\<tau> = true \\<tau>;\n     (\\<upsilon> P x) \\<tau> = true \\<tau>;\n     (\\<upsilon> P y) \\<tau> = true \\<tau>;\n     \\<not> (true \\<tau> = true \\<tau> \\<and> true \\<tau> = true \\<tau>);\n     invalid \\<tau> = true \\<tau>\\<rbrakk>\n    \\<Longrightarrow> (if true \\<tau> = true \\<tau> \\<and>\n                          true \\<tau> = true \\<tau>\n                       then (P x \\<triangleq> P y) \\<tau>\n                       else invalid \\<tau>) =\n                      true \\<tau>", "by (simp add: invalid_def bot_option_def true_def)"], ["", "lemma OclIncluding_cong' :\nshows \"\\<tau> \\<Turnstile> \\<delta> s \\<Longrightarrow> \\<tau> \\<Turnstile> \\<delta> t \\<Longrightarrow> \\<tau> \\<Turnstile> \\<upsilon> x \\<Longrightarrow>\n    \\<tau> \\<Turnstile> ((s::('\\<AA>,'a::null)Set) \\<doteq> t) \\<Longrightarrow> \\<tau> \\<Turnstile> (s->including\\<^sub>S\\<^sub>e\\<^sub>t(x) \\<doteq> (t->including\\<^sub>S\\<^sub>e\\<^sub>t(x)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<tau> \\<Turnstile> \\<delta> s; \\<tau> \\<Turnstile> \\<delta> t;\n     \\<tau> \\<Turnstile> \\<upsilon> x;\n     \\<tau> \\<Turnstile> s \\<doteq> t\\<rbrakk>\n    \\<Longrightarrow> \\<tau>\n                       \\<Turnstile> s->including\\<^sub>S\\<^sub>e\\<^sub>t(x) \\<doteq>\n                                    t->including\\<^sub>S\\<^sub>e\\<^sub>t(x)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<tau> \\<Turnstile> \\<delta> s; \\<tau> \\<Turnstile> \\<delta> t;\n     \\<tau> \\<Turnstile> \\<upsilon> x;\n     \\<tau> \\<Turnstile> s \\<doteq> t\\<rbrakk>\n    \\<Longrightarrow> \\<tau>\n                       \\<Turnstile> s->including\\<^sub>S\\<^sub>e\\<^sub>t(x) \\<doteq>\n                                    t->including\\<^sub>S\\<^sub>e\\<^sub>t(x)", "have cp: \"cp (\\<lambda>s. (s->including\\<^sub>S\\<^sub>e\\<^sub>t(x)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. cp (\\<lambda>s. s->including\\<^sub>S\\<^sub>e\\<^sub>t(x))", "apply(simp add: cp_def, subst OclIncluding.cp0)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>f.\n       \\<forall>X a b.\n          \\<lambda>_.\n             X (a, b)->including\\<^sub>S\\<^sub>e\\<^sub>t(\\<lambda>_.\n                      x (a, b))\n           (a, b) =\n          f (X (a, b)) (a, b)", "by (rule_tac x = \"(\\<lambda>xab ab. ((\\<lambda>_. xab)->including\\<^sub>S\\<^sub>e\\<^sub>t(\\<lambda>_. x ab)) ab)\" in exI, simp)"], ["proof (state)\nthis:\n  cp (\\<lambda>s. s->including\\<^sub>S\\<^sub>e\\<^sub>t(x))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<tau> \\<Turnstile> \\<delta> s; \\<tau> \\<Turnstile> \\<delta> t;\n     \\<tau> \\<Turnstile> \\<upsilon> x;\n     \\<tau> \\<Turnstile> s \\<doteq> t\\<rbrakk>\n    \\<Longrightarrow> \\<tau>\n                       \\<Turnstile> s->including\\<^sub>S\\<^sub>e\\<^sub>t(x) \\<doteq>\n                                    t->including\\<^sub>S\\<^sub>e\\<^sub>t(x)", "show \"\\<tau> \\<Turnstile> \\<delta> s \\<Longrightarrow> \\<tau> \\<Turnstile> \\<delta> t \\<Longrightarrow> \\<tau> \\<Turnstile> \\<upsilon> x \\<Longrightarrow> \\<tau> \\<Turnstile> (s \\<doteq> t) \\<Longrightarrow> ?thesis\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<tau> \\<Turnstile> \\<delta> s; \\<tau> \\<Turnstile> \\<delta> t;\n     \\<tau> \\<Turnstile> \\<upsilon> x;\n     \\<tau> \\<Turnstile> s \\<doteq> t\\<rbrakk>\n    \\<Longrightarrow> \\<tau>\n                       \\<Turnstile> s->including\\<^sub>S\\<^sub>e\\<^sub>t(x) \\<doteq>\n                                    t->including\\<^sub>S\\<^sub>e\\<^sub>t(x)", "apply(rule_tac P = \"\\<lambda>s. (s->including\\<^sub>S\\<^sub>e\\<^sub>t(x))\" in StrictRefEq\\<^sub>S\\<^sub>e\\<^sub>t_L_subst1)"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<lbrakk>\\<tau> \\<Turnstile> \\<delta> s; \\<tau> \\<Turnstile> \\<delta> t;\n     \\<tau> \\<Turnstile> \\<upsilon> x;\n     \\<tau> \\<Turnstile> s \\<doteq> t\\<rbrakk>\n    \\<Longrightarrow> cp (\\<lambda>s.\n                             s->including\\<^sub>S\\<^sub>e\\<^sub>t(x))\n 2. \\<lbrakk>\\<tau> \\<Turnstile> \\<delta> s; \\<tau> \\<Turnstile> \\<delta> t;\n     \\<tau> \\<Turnstile> \\<upsilon> x;\n     \\<tau> \\<Turnstile> s \\<doteq> t\\<rbrakk>\n    \\<Longrightarrow> \\<tau> \\<Turnstile> \\<upsilon> s\n 3. \\<lbrakk>\\<tau> \\<Turnstile> \\<delta> s; \\<tau> \\<Turnstile> \\<delta> t;\n     \\<tau> \\<Turnstile> \\<upsilon> x;\n     \\<tau> \\<Turnstile> s \\<doteq> t\\<rbrakk>\n    \\<Longrightarrow> \\<tau> \\<Turnstile> \\<upsilon> t\n 4. \\<lbrakk>\\<tau> \\<Turnstile> \\<delta> s; \\<tau> \\<Turnstile> \\<delta> t;\n     \\<tau> \\<Turnstile> \\<upsilon> x;\n     \\<tau> \\<Turnstile> s \\<doteq> t\\<rbrakk>\n    \\<Longrightarrow> \\<tau>\n                       \\<Turnstile> \\<upsilon> s->including\\<^sub>S\\<^sub>e\\<^sub>t(x)\n 5. \\<lbrakk>\\<tau> \\<Turnstile> \\<delta> s; \\<tau> \\<Turnstile> \\<delta> t;\n     \\<tau> \\<Turnstile> \\<upsilon> x;\n     \\<tau> \\<Turnstile> s \\<doteq> t\\<rbrakk>\n    \\<Longrightarrow> \\<tau>\n                       \\<Turnstile> \\<upsilon> t->including\\<^sub>S\\<^sub>e\\<^sub>t(x)\n 6. \\<lbrakk>\\<tau> \\<Turnstile> \\<delta> s; \\<tau> \\<Turnstile> \\<delta> t;\n     \\<tau> \\<Turnstile> \\<upsilon> x;\n     \\<tau> \\<Turnstile> s \\<doteq> t\\<rbrakk>\n    \\<Longrightarrow> \\<tau> \\<Turnstile> s \\<doteq> t", "apply(rule cp)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<lbrakk>\\<tau> \\<Turnstile> \\<delta> s; \\<tau> \\<Turnstile> \\<delta> t;\n     \\<tau> \\<Turnstile> \\<upsilon> x;\n     \\<tau> \\<Turnstile> s \\<doteq> t\\<rbrakk>\n    \\<Longrightarrow> \\<tau> \\<Turnstile> \\<upsilon> s\n 2. \\<lbrakk>\\<tau> \\<Turnstile> \\<delta> s; \\<tau> \\<Turnstile> \\<delta> t;\n     \\<tau> \\<Turnstile> \\<upsilon> x;\n     \\<tau> \\<Turnstile> s \\<doteq> t\\<rbrakk>\n    \\<Longrightarrow> \\<tau> \\<Turnstile> \\<upsilon> t\n 3. \\<lbrakk>\\<tau> \\<Turnstile> \\<delta> s; \\<tau> \\<Turnstile> \\<delta> t;\n     \\<tau> \\<Turnstile> \\<upsilon> x;\n     \\<tau> \\<Turnstile> s \\<doteq> t\\<rbrakk>\n    \\<Longrightarrow> \\<tau>\n                       \\<Turnstile> \\<upsilon> s->including\\<^sub>S\\<^sub>e\\<^sub>t(x)\n 4. \\<lbrakk>\\<tau> \\<Turnstile> \\<delta> s; \\<tau> \\<Turnstile> \\<delta> t;\n     \\<tau> \\<Turnstile> \\<upsilon> x;\n     \\<tau> \\<Turnstile> s \\<doteq> t\\<rbrakk>\n    \\<Longrightarrow> \\<tau>\n                       \\<Turnstile> \\<upsilon> t->including\\<^sub>S\\<^sub>e\\<^sub>t(x)\n 5. \\<lbrakk>\\<tau> \\<Turnstile> \\<delta> s; \\<tau> \\<Turnstile> \\<delta> t;\n     \\<tau> \\<Turnstile> \\<upsilon> x;\n     \\<tau> \\<Turnstile> s \\<doteq> t\\<rbrakk>\n    \\<Longrightarrow> \\<tau> \\<Turnstile> s \\<doteq> t", "apply(simp add: foundation20)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<lbrakk>\\<tau> \\<Turnstile> \\<delta> s; \\<tau> \\<Turnstile> \\<delta> t;\n     \\<tau> \\<Turnstile> \\<upsilon> x;\n     \\<tau> \\<Turnstile> s \\<doteq> t\\<rbrakk>\n    \\<Longrightarrow> \\<tau> \\<Turnstile> \\<upsilon> t\n 2. \\<lbrakk>\\<tau> \\<Turnstile> \\<delta> s; \\<tau> \\<Turnstile> \\<delta> t;\n     \\<tau> \\<Turnstile> \\<upsilon> x;\n     \\<tau> \\<Turnstile> s \\<doteq> t\\<rbrakk>\n    \\<Longrightarrow> \\<tau>\n                       \\<Turnstile> \\<upsilon> s->including\\<^sub>S\\<^sub>e\\<^sub>t(x)\n 3. \\<lbrakk>\\<tau> \\<Turnstile> \\<delta> s; \\<tau> \\<Turnstile> \\<delta> t;\n     \\<tau> \\<Turnstile> \\<upsilon> x;\n     \\<tau> \\<Turnstile> s \\<doteq> t\\<rbrakk>\n    \\<Longrightarrow> \\<tau>\n                       \\<Turnstile> \\<upsilon> t->including\\<^sub>S\\<^sub>e\\<^sub>t(x)\n 4. \\<lbrakk>\\<tau> \\<Turnstile> \\<delta> s; \\<tau> \\<Turnstile> \\<delta> t;\n     \\<tau> \\<Turnstile> \\<upsilon> x;\n     \\<tau> \\<Turnstile> s \\<doteq> t\\<rbrakk>\n    \\<Longrightarrow> \\<tau> \\<Turnstile> s \\<doteq> t", "apply(simp add: foundation20)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>\\<tau> \\<Turnstile> \\<delta> s; \\<tau> \\<Turnstile> \\<delta> t;\n     \\<tau> \\<Turnstile> \\<upsilon> x;\n     \\<tau> \\<Turnstile> s \\<doteq> t\\<rbrakk>\n    \\<Longrightarrow> \\<tau>\n                       \\<Turnstile> \\<upsilon> s->including\\<^sub>S\\<^sub>e\\<^sub>t(x)\n 2. \\<lbrakk>\\<tau> \\<Turnstile> \\<delta> s; \\<tau> \\<Turnstile> \\<delta> t;\n     \\<tau> \\<Turnstile> \\<upsilon> x;\n     \\<tau> \\<Turnstile> s \\<doteq> t\\<rbrakk>\n    \\<Longrightarrow> \\<tau>\n                       \\<Turnstile> \\<upsilon> t->including\\<^sub>S\\<^sub>e\\<^sub>t(x)\n 3. \\<lbrakk>\\<tau> \\<Turnstile> \\<delta> s; \\<tau> \\<Turnstile> \\<delta> t;\n     \\<tau> \\<Turnstile> \\<upsilon> x;\n     \\<tau> \\<Turnstile> s \\<doteq> t\\<rbrakk>\n    \\<Longrightarrow> \\<tau> \\<Turnstile> s \\<doteq> t", "apply (simp add: foundation10 foundation6)+"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  \\<lbrakk>\\<tau> \\<Turnstile> \\<delta> s; \\<tau> \\<Turnstile> \\<delta> t;\n   \\<tau> \\<Turnstile> \\<upsilon> x;\n   \\<tau> \\<Turnstile> s \\<doteq> t\\<rbrakk>\n  \\<Longrightarrow> \\<tau>\n                     \\<Turnstile> s->including\\<^sub>S\\<^sub>e\\<^sub>t(x) \\<doteq>\n                                  t->including\\<^sub>S\\<^sub>e\\<^sub>t(x)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma OclIncluding_cong : \"\\<And>(s::('\\<AA>,'a::null)Set) t x y \\<tau>. \\<tau> \\<Turnstile> \\<delta> t \\<Longrightarrow> \\<tau> \\<Turnstile> \\<upsilon> y \\<Longrightarrow>\n                             \\<tau> \\<Turnstile> s \\<doteq> t \\<Longrightarrow> x = y \\<Longrightarrow> \\<tau> \\<Turnstile> s->including\\<^sub>S\\<^sub>e\\<^sub>t(x) \\<doteq> (t->including\\<^sub>S\\<^sub>e\\<^sub>t(y))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>s t x y \\<tau>.\n       \\<lbrakk>\\<tau> \\<Turnstile> \\<delta> t;\n        \\<tau> \\<Turnstile> \\<upsilon> y; \\<tau> \\<Turnstile> s \\<doteq> t;\n        x = y\\<rbrakk>\n       \\<Longrightarrow> \\<tau>\n                          \\<Turnstile> s->including\\<^sub>S\\<^sub>e\\<^sub>t(x) \\<doteq>\n t->including\\<^sub>S\\<^sub>e\\<^sub>t(y)", "apply(simp only:)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>s t x y \\<tau>.\n       \\<lbrakk>\\<tau> \\<Turnstile> \\<delta> t;\n        \\<tau> \\<Turnstile> \\<upsilon> y; \\<tau> \\<Turnstile> s \\<doteq> t;\n        x = y\\<rbrakk>\n       \\<Longrightarrow> \\<tau>\n                          \\<Turnstile> s->including\\<^sub>S\\<^sub>e\\<^sub>t(y) \\<doteq>\n t->including\\<^sub>S\\<^sub>e\\<^sub>t(y)", "apply(rule OclIncluding_cong', simp_all only:)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>s t x y \\<tau>.\n       \\<lbrakk>\\<tau> \\<Turnstile> \\<delta> t;\n        \\<tau> \\<Turnstile> \\<upsilon> y; \\<tau> \\<Turnstile> s \\<doteq> t;\n        x = y\\<rbrakk>\n       \\<Longrightarrow> \\<tau> \\<Turnstile> \\<delta> s", "by(auto simp: OclValid_def OclIf_def invalid_def bot_option_def OclNot_def split : if_split_asm)"], ["", "(* < *)"], ["", "lemma const_StrictRefEq\\<^sub>S\\<^sub>e\\<^sub>t_empty : \"const X \\<Longrightarrow>  const (X \\<doteq> Set{})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. const X \\<Longrightarrow> const (X \\<doteq> Set{})", "apply(rule StrictRefEq\\<^sub>S\\<^sub>e\\<^sub>t.const, assumption)"], ["proof (prove)\ngoal (1 subgoal):\n 1. const X \\<Longrightarrow> const Set{}", "by(simp)"], ["", "lemma const_StrictRefEq\\<^sub>S\\<^sub>e\\<^sub>t_including : \n \"const a \\<Longrightarrow> const S \\<Longrightarrow> const X \\<Longrightarrow>  const (X \\<doteq> S->including\\<^sub>S\\<^sub>e\\<^sub>t(a))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>const a; const S; const X\\<rbrakk>\n    \\<Longrightarrow> const\n                       (X \\<doteq> S->including\\<^sub>S\\<^sub>e\\<^sub>t(a))", "apply(rule StrictRefEq\\<^sub>S\\<^sub>e\\<^sub>t.const, assumption)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>const a; const S; const X\\<rbrakk>\n    \\<Longrightarrow> const S->including\\<^sub>S\\<^sub>e\\<^sub>t(a)", "by(rule const_OclIncluding)"], ["", "subsection\\<open>Test Statements\\<close>"], ["", "Assert   \"(\\<tau> \\<Turnstile> (Set{\\<lambda>_. \\<lfloor>\\<lfloor>x\\<rfloor>\\<rfloor>} \\<doteq> Set{\\<lambda>_. \\<lfloor>\\<lfloor>x\\<rfloor>\\<rfloor>}))\""], ["", "Assert   \"(\\<tau> \\<Turnstile> (Set{\\<lambda>_. \\<lfloor>x\\<rfloor>} \\<doteq> Set{\\<lambda>_. \\<lfloor>x\\<rfloor>}))\""], ["", "instantiation Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e  :: (equal)equal\nbegin"], ["", "definition \"HOL.equal k l \\<longleftrightarrow>  (k::('a::equal)Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e) =  l\""], ["", "instance"], ["proof (prove)\ngoal (1 subgoal):\n 1. OFCLASS(Set('a), equal_class)", "by standard (rule equal_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e_def)"], ["", "end"], ["", "lemma equal_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e_code [code]:\n  \"HOL.equal k (l::('a::{equal,null})Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e) \\<longleftrightarrow> Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e k = Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e l\""], ["proof (prove)\ngoal (1 subgoal):\n 1. equal_class.equal k l =\n    (Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e k =\n     Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e l)", "by (auto simp add: equal Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e.Rep_Set\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e_inject)"], ["", "Assert   \"\\<tau> \\<Turnstile> (Set{} \\<doteq> Set{})\""], ["", "Assert   \"\\<tau> \\<Turnstile> (Set{\\<one>,\\<two>} \\<triangleq> Set{}->including\\<^sub>S\\<^sub>e\\<^sub>t(\\<two>)->including\\<^sub>S\\<^sub>e\\<^sub>t(\\<one>))\""], ["", "Assert   \"\\<tau> \\<Turnstile> (Set{\\<one>,invalid,\\<two>} \\<triangleq> invalid)\""], ["", "Assert   \"\\<tau> \\<Turnstile> (Set{\\<one>,\\<two>}->including\\<^sub>S\\<^sub>e\\<^sub>t(null) \\<triangleq> Set{null,\\<one>,\\<two>})\""], ["", "Assert   \"\\<tau> \\<Turnstile> (Set{\\<one>,\\<two>}->including\\<^sub>S\\<^sub>e\\<^sub>t(null) \\<triangleq> Set{\\<one>,\\<two>,null})\""], ["", "(*\nAssert   \"\\<not> (\\<tau> \\<Turnstile> (Set{\\<one>,\\<one>,\\<two>} \\<doteq> Set{\\<one>,\\<two>}))\"\nAssert   \"\\<not> (\\<tau> \\<Turnstile> (Set{\\<one>,\\<two>} \\<doteq> Set{\\<two>,\\<one>}))\"\n*)\n\n(* > *)"], ["", "end"]]}