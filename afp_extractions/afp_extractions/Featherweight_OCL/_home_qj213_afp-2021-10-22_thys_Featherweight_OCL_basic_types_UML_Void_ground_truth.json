{"file_name": "/home/qj213/afp-2021-10-22/thys/Featherweight_OCL/basic_types/UML_Void.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Featherweight_OCL", "problem_names": ["lemma  \"\\<delta>(null::('\\<AA>)Void) = false\"", "lemma  \"\\<upsilon>(null::('\\<AA>)Void) = true\"", "lemma [simp,code_unfold]: \"\\<delta> (\\<lambda>_. Abs_Void\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e None) = false\"", "lemma [simp,code_unfold]: \"\\<upsilon> (\\<lambda>_. Abs_Void\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e None) = false\"", "lemma [simp,code_unfold]: \"\\<delta> (\\<lambda>_. Abs_Void\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e \\<lfloor>None\\<rfloor>) = false\"", "lemma [simp,code_unfold]: \"\\<upsilon> (\\<lambda>_. Abs_Void\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e \\<lfloor>None\\<rfloor>) = true\""], "translations": [["", "lemma  \"\\<delta>(null::('\\<AA>)Void) = false\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<delta> null = false", "by simp"], ["", "lemma  \"\\<upsilon>(null::('\\<AA>)Void) = true\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<upsilon> null = true", "by simp"], ["", "lemma [simp,code_unfold]: \"\\<delta> (\\<lambda>_. Abs_Void\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e None) = false\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<delta> (\\<lambda>_.\n                 Abs_Void\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e \\<bottom>) =\n    false", "apply(simp add:defined_def true_def\n               bot_fun_def bot_option_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>\\<tau>.\n        if Abs_Void\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e \\<bottom> =\n           \\<bottom> \\<or>\n           Abs_Void\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e \\<bottom> = null \\<tau>\n        then false \\<tau> else true \\<tau>) =\n    false", "apply(rule ext, simp split:, intro conjI impI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<tau>.\n       Abs_Void\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e \\<bottom> \\<noteq>\n       \\<bottom> \\<and>\n       Abs_Void\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e \\<bottom> \\<noteq>\n       null \\<tau> \\<Longrightarrow>\n       true \\<tau> = false \\<tau>", "by(simp add: bot_Void_def)"], ["", "lemma [simp,code_unfold]: \"\\<upsilon> (\\<lambda>_. Abs_Void\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e None) = false\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<upsilon> (\\<lambda>_.\n                   Abs_Void\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e \\<bottom>) =\n    false", "apply(simp add:valid_def true_def\n               bot_fun_def bot_option_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>\\<tau>.\n        if Abs_Void\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e \\<bottom> = \\<bottom>\n        then false \\<tau> else true \\<tau>) =\n    false", "apply(rule ext, simp split:, intro conjI impI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<tau>.\n       Abs_Void\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e \\<bottom> \\<noteq>\n       \\<bottom> \\<Longrightarrow>\n       true \\<tau> = false \\<tau>", "by(simp add: bot_Void_def)"], ["", "lemma [simp,code_unfold]: \"\\<delta> (\\<lambda>_. Abs_Void\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e \\<lfloor>None\\<rfloor>) = false\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<delta> (\\<lambda>_.\n                 Abs_Void\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                  \\<lfloor>\\<bottom>\\<rfloor>) =\n    false", "apply(simp add:defined_def true_def\n               bot_fun_def bot_option_def null_fun_def null_option_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>\\<tau>.\n        if Abs_Void\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n            \\<lfloor>\\<bottom>\\<rfloor> =\n           \\<bottom> \\<or>\n           Abs_Void\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n            \\<lfloor>\\<bottom>\\<rfloor> =\n           null\n        then false \\<tau> else true \\<tau>) =\n    false", "apply(rule ext, simp split:, intro conjI impI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<tau>.\n       Abs_Void\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n        \\<lfloor>\\<bottom>\\<rfloor> \\<noteq>\n       \\<bottom> \\<and>\n       Abs_Void\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n        \\<lfloor>\\<bottom>\\<rfloor> \\<noteq>\n       null \\<Longrightarrow>\n       true \\<tau> = false \\<tau>", "by(simp add: null_Void_def)"], ["", "lemma [simp,code_unfold]: \"\\<upsilon> (\\<lambda>_. Abs_Void\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e \\<lfloor>None\\<rfloor>) = true\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<upsilon> (\\<lambda>_.\n                   Abs_Void\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                    \\<lfloor>\\<bottom>\\<rfloor>) =\n    true", "apply(simp add:valid_def true_def\n               bot_fun_def bot_option_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>\\<tau>.\n        if Abs_Void\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n            \\<lfloor>\\<bottom>\\<rfloor> =\n           \\<bottom>\n        then false \\<tau> else true \\<tau>) =\n    (\\<lambda>\\<tau>. \\<lfloor>\\<lfloor>True\\<rfloor>\\<rfloor>)", "apply(rule ext, simp split:, intro conjI impI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>\\<tau>.\n       Abs_Void\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n        \\<lfloor>\\<bottom>\\<rfloor> =\n       \\<bottom> \\<Longrightarrow>\n       false \\<tau> = \\<lfloor>\\<lfloor>True\\<rfloor>\\<rfloor>\n 2. \\<And>\\<tau>.\n       Abs_Void\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n        \\<lfloor>\\<bottom>\\<rfloor> \\<noteq>\n       \\<bottom> \\<Longrightarrow>\n       true \\<tau> = \\<lfloor>\\<lfloor>True\\<rfloor>\\<rfloor>", "by(metis null_Void_def null_is_valid, simp add: true_def)"], ["", "subsection\\<open>Test Statements\\<close>"], ["", "Assert \"\\<tau> \\<Turnstile> ((null::('\\<AA>)Void)  \\<doteq> null)\""], ["", "end"]]}