{"file_name": "/home/qj213/afp-2021-10-22/thys/Featherweight_OCL/collection_types/UML_Pair.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Featherweight_OCL", "problem_names": ["lemma A[simp]:\"Rep_Pair\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e x \\<noteq> None \\<Longrightarrow> Rep_Pair\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e x \\<noteq> null \\<Longrightarrow> (fst \\<lceil>\\<lceil>Rep_Pair\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e x\\<rceil>\\<rceil>) \\<noteq> bot\"", "lemma A'[simp]:\" x \\<noteq> bot \\<Longrightarrow>  x \\<noteq> null \\<Longrightarrow> (fst \\<lceil>\\<lceil>Rep_Pair\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e x\\<rceil>\\<rceil>) \\<noteq> bot\"", "lemma B[simp]:\"Rep_Pair\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e x \\<noteq> None \\<Longrightarrow> Rep_Pair\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e x \\<noteq> null \\<Longrightarrow> (snd \\<lceil>\\<lceil>Rep_Pair\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e x\\<rceil>\\<rceil>) \\<noteq> bot\"", "lemma B'[simp]:\"x \\<noteq> bot \\<Longrightarrow> x \\<noteq> null \\<Longrightarrow> (snd \\<lceil>\\<lceil>Rep_Pair\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e x\\<rceil>\\<rceil>) \\<noteq> bot\"", "lemma 1 : \"\\<tau> \\<Turnstile> \\<upsilon> Y \\<Longrightarrow> \\<tau> \\<Turnstile> Pair{X,Y} .First() \\<triangleq> X\"", "lemma 2 : \"\\<tau> \\<Turnstile> \\<upsilon> X \\<Longrightarrow> \\<tau> \\<Turnstile> Pair{X,Y} .Second() \\<triangleq> Y\"", "lemma proj1_exec [simp, code_unfold] : \"Pair{X,Y} .First() = (if (\\<upsilon> Y) then X else invalid endif)\"", "lemma proj2_exec [simp, code_unfold] : \"Pair{X,Y} .Second() = (if (\\<upsilon> X) then Y else invalid endif)\"", "lemma equal_Pair\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e_code [code]:\n  \"HOL.equal k (l::('a::{equal,null},'b::{equal,null})Pair\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e) \\<longleftrightarrow> Rep_Pair\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e k = Rep_Pair\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e l\""], "translations": [["", "lemma A[simp]:\"Rep_Pair\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e x \\<noteq> None \\<Longrightarrow> Rep_Pair\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e x \\<noteq> null \\<Longrightarrow> (fst \\<lceil>\\<lceil>Rep_Pair\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e x\\<rceil>\\<rceil>) \\<noteq> bot\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Rep_Pair\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e x \\<noteq> \\<bottom>;\n     Rep_Pair\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e x \\<noteq> null\\<rbrakk>\n    \\<Longrightarrow> fst \\<lceil>\\<lceil>Rep_Pair\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n     x\\<rceil>\\<rceil> \\<noteq>\n                      \\<bottom>", "by(insert Rep_Pair\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e[of x],auto simp:null_option_def bot_option_def)"], ["", "lemma A'[simp]:\" x \\<noteq> bot \\<Longrightarrow>  x \\<noteq> null \\<Longrightarrow> (fst \\<lceil>\\<lceil>Rep_Pair\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e x\\<rceil>\\<rceil>) \\<noteq> bot\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<noteq> \\<bottom>; x \\<noteq> null\\<rbrakk>\n    \\<Longrightarrow> fst \\<lceil>\\<lceil>Rep_Pair\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n     x\\<rceil>\\<rceil> \\<noteq>\n                      \\<bottom>", "apply(insert Rep_Pair\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e[of x], simp add: bot_Pair\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e_def null_Pair\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<noteq> Abs_Pair\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e \\<bottom>;\n     x \\<noteq>\n     Abs_Pair\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e \\<lfloor>\\<bottom>\\<rfloor>;\n     Rep_Pair\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e x = \\<bottom> \\<or>\n     Rep_Pair\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e x = null \\<or>\n     fst \\<lceil>\\<lceil>Rep_Pair\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                          x\\<rceil>\\<rceil> \\<noteq>\n     \\<bottom> \\<and>\n     snd \\<lceil>\\<lceil>Rep_Pair\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                          x\\<rceil>\\<rceil> \\<noteq>\n     \\<bottom>\\<rbrakk>\n    \\<Longrightarrow> fst \\<lceil>\\<lceil>Rep_Pair\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n     x\\<rceil>\\<rceil> \\<noteq>\n                      \\<bottom>", "apply(auto simp:null_option_def bot_option_def)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>x \\<noteq> Abs_Pair\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e \\<bottom>;\n     x \\<noteq>\n     Abs_Pair\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e \\<lfloor>\\<bottom>\\<rfloor>;\n     fst \\<lceil>\\<lceil>\\<bottom>\\<rceil>\\<rceil> = \\<bottom>;\n     Rep_Pair\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e x = \\<bottom>\\<rbrakk>\n    \\<Longrightarrow> False\n 2. \\<lbrakk>x \\<noteq> Abs_Pair\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e \\<bottom>;\n     x \\<noteq>\n     Abs_Pair\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e \\<lfloor>\\<bottom>\\<rfloor>;\n     fst \\<lceil>\\<bottom>\\<rceil> = \\<bottom>;\n     Rep_Pair\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e x =\n     \\<lfloor>\\<bottom>\\<rfloor>\\<rbrakk>\n    \\<Longrightarrow> False", "apply(erule contrapos_np[of \"x = Abs_Pair\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e None\"])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>x \\<noteq>\n             Abs_Pair\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n              \\<lfloor>\\<bottom>\\<rfloor>;\n     fst \\<lceil>\\<lceil>\\<bottom>\\<rceil>\\<rceil> = \\<bottom>;\n     Rep_Pair\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e x = \\<bottom>;\n     \\<not> False\\<rbrakk>\n    \\<Longrightarrow> x = Abs_Pair\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e \\<bottom>\n 2. \\<lbrakk>x \\<noteq> Abs_Pair\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e \\<bottom>;\n     x \\<noteq>\n     Abs_Pair\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e \\<lfloor>\\<bottom>\\<rfloor>;\n     fst \\<lceil>\\<bottom>\\<rceil> = \\<bottom>;\n     Rep_Pair\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e x =\n     \\<lfloor>\\<bottom>\\<rfloor>\\<rbrakk>\n    \\<Longrightarrow> False", "apply(subst Rep_Pair\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e_inject[symmetric], simp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>x \\<noteq>\n             Abs_Pair\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n              \\<lfloor>\\<bottom>\\<rfloor>;\n     fst \\<lceil>\\<lceil>\\<bottom>\\<rceil>\\<rceil> = \\<bottom>;\n     Rep_Pair\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e x = \\<bottom>\\<rbrakk>\n    \\<Longrightarrow> \\<bottom> =\n                      Rep_Pair\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                       (Abs_Pair\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e \\<bottom>)\n 2. \\<lbrakk>x \\<noteq> Abs_Pair\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e \\<bottom>;\n     x \\<noteq>\n     Abs_Pair\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e \\<lfloor>\\<bottom>\\<rfloor>;\n     fst \\<lceil>\\<bottom>\\<rceil> = \\<bottom>;\n     Rep_Pair\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e x =\n     \\<lfloor>\\<bottom>\\<rfloor>\\<rbrakk>\n    \\<Longrightarrow> False", "apply(subst Pair\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e.Abs_Pair\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e_inverse, simp_all,simp add: bot_option_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<noteq> Abs_Pair\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e \\<bottom>;\n     x \\<noteq>\n     Abs_Pair\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e \\<lfloor>\\<bottom>\\<rfloor>;\n     fst \\<lceil>\\<bottom>\\<rceil> = \\<bottom>;\n     Rep_Pair\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e x =\n     \\<lfloor>\\<bottom>\\<rfloor>\\<rbrakk>\n    \\<Longrightarrow> False", "apply(erule contrapos_np[of \"x = Abs_Pair\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e \\<lfloor>None\\<rfloor>\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<noteq> Abs_Pair\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e \\<bottom>;\n     fst \\<lceil>\\<bottom>\\<rceil> = \\<bottom>;\n     Rep_Pair\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e x =\n     \\<lfloor>\\<bottom>\\<rfloor>;\n     \\<not> False\\<rbrakk>\n    \\<Longrightarrow> x =\n                      Abs_Pair\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                       \\<lfloor>\\<bottom>\\<rfloor>", "apply(subst Rep_Pair\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e_inject[symmetric], simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<noteq> Abs_Pair\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e \\<bottom>;\n     fst \\<lceil>\\<bottom>\\<rceil> = \\<bottom>;\n     Rep_Pair\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e x =\n     \\<lfloor>\\<bottom>\\<rfloor>\\<rbrakk>\n    \\<Longrightarrow> \\<lfloor>\\<bottom>\\<rfloor> =\n                      Rep_Pair\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                       (Abs_Pair\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                         \\<lfloor>\\<bottom>\\<rfloor>)", "apply(subst Pair\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e.Abs_Pair\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e_inverse, simp_all,simp add: null_option_def bot_option_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma B[simp]:\"Rep_Pair\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e x \\<noteq> None \\<Longrightarrow> Rep_Pair\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e x \\<noteq> null \\<Longrightarrow> (snd \\<lceil>\\<lceil>Rep_Pair\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e x\\<rceil>\\<rceil>) \\<noteq> bot\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Rep_Pair\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e x \\<noteq> \\<bottom>;\n     Rep_Pair\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e x \\<noteq> null\\<rbrakk>\n    \\<Longrightarrow> snd \\<lceil>\\<lceil>Rep_Pair\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n     x\\<rceil>\\<rceil> \\<noteq>\n                      \\<bottom>", "by(insert Rep_Pair\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e[of x],auto simp:null_option_def bot_option_def)"], ["", "lemma B'[simp]:\"x \\<noteq> bot \\<Longrightarrow> x \\<noteq> null \\<Longrightarrow> (snd \\<lceil>\\<lceil>Rep_Pair\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e x\\<rceil>\\<rceil>) \\<noteq> bot\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<noteq> \\<bottom>; x \\<noteq> null\\<rbrakk>\n    \\<Longrightarrow> snd \\<lceil>\\<lceil>Rep_Pair\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n     x\\<rceil>\\<rceil> \\<noteq>\n                      \\<bottom>", "apply(insert Rep_Pair\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e[of x], simp add: bot_Pair\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e_def null_Pair\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<noteq> Abs_Pair\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e \\<bottom>;\n     x \\<noteq>\n     Abs_Pair\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e \\<lfloor>\\<bottom>\\<rfloor>;\n     Rep_Pair\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e x = \\<bottom> \\<or>\n     Rep_Pair\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e x = null \\<or>\n     snd \\<lceil>\\<lceil>Rep_Pair\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                          x\\<rceil>\\<rceil> \\<noteq>\n     \\<bottom>\\<rbrakk>\n    \\<Longrightarrow> snd \\<lceil>\\<lceil>Rep_Pair\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n     x\\<rceil>\\<rceil> \\<noteq>\n                      \\<bottom>", "apply(auto simp:null_option_def bot_option_def)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>x \\<noteq> Abs_Pair\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e \\<bottom>;\n     x \\<noteq>\n     Abs_Pair\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e \\<lfloor>\\<bottom>\\<rfloor>;\n     snd \\<lceil>\\<lceil>\\<bottom>\\<rceil>\\<rceil> = \\<bottom>;\n     Rep_Pair\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e x = \\<bottom>\\<rbrakk>\n    \\<Longrightarrow> False\n 2. \\<lbrakk>x \\<noteq> Abs_Pair\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e \\<bottom>;\n     x \\<noteq>\n     Abs_Pair\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e \\<lfloor>\\<bottom>\\<rfloor>;\n     snd \\<lceil>\\<bottom>\\<rceil> = \\<bottom>;\n     Rep_Pair\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e x =\n     \\<lfloor>\\<bottom>\\<rfloor>\\<rbrakk>\n    \\<Longrightarrow> False", "apply(erule contrapos_np[of \"x = Abs_Pair\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e None\"])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>x \\<noteq>\n             Abs_Pair\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n              \\<lfloor>\\<bottom>\\<rfloor>;\n     snd \\<lceil>\\<lceil>\\<bottom>\\<rceil>\\<rceil> = \\<bottom>;\n     Rep_Pair\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e x = \\<bottom>;\n     \\<not> False\\<rbrakk>\n    \\<Longrightarrow> x = Abs_Pair\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e \\<bottom>\n 2. \\<lbrakk>x \\<noteq> Abs_Pair\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e \\<bottom>;\n     x \\<noteq>\n     Abs_Pair\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e \\<lfloor>\\<bottom>\\<rfloor>;\n     snd \\<lceil>\\<bottom>\\<rceil> = \\<bottom>;\n     Rep_Pair\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e x =\n     \\<lfloor>\\<bottom>\\<rfloor>\\<rbrakk>\n    \\<Longrightarrow> False", "apply(subst Rep_Pair\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e_inject[symmetric], simp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>x \\<noteq>\n             Abs_Pair\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n              \\<lfloor>\\<bottom>\\<rfloor>;\n     snd \\<lceil>\\<lceil>\\<bottom>\\<rceil>\\<rceil> = \\<bottom>;\n     Rep_Pair\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e x = \\<bottom>\\<rbrakk>\n    \\<Longrightarrow> \\<bottom> =\n                      Rep_Pair\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                       (Abs_Pair\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e \\<bottom>)\n 2. \\<lbrakk>x \\<noteq> Abs_Pair\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e \\<bottom>;\n     x \\<noteq>\n     Abs_Pair\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e \\<lfloor>\\<bottom>\\<rfloor>;\n     snd \\<lceil>\\<bottom>\\<rceil> = \\<bottom>;\n     Rep_Pair\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e x =\n     \\<lfloor>\\<bottom>\\<rfloor>\\<rbrakk>\n    \\<Longrightarrow> False", "apply(subst Pair\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e.Abs_Pair\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e_inverse, simp_all,simp add: bot_option_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<noteq> Abs_Pair\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e \\<bottom>;\n     x \\<noteq>\n     Abs_Pair\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e \\<lfloor>\\<bottom>\\<rfloor>;\n     snd \\<lceil>\\<bottom>\\<rceil> = \\<bottom>;\n     Rep_Pair\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e x =\n     \\<lfloor>\\<bottom>\\<rfloor>\\<rbrakk>\n    \\<Longrightarrow> False", "apply(erule contrapos_np[of \"x = Abs_Pair\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e \\<lfloor>None\\<rfloor>\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<noteq> Abs_Pair\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e \\<bottom>;\n     snd \\<lceil>\\<bottom>\\<rceil> = \\<bottom>;\n     Rep_Pair\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e x =\n     \\<lfloor>\\<bottom>\\<rfloor>;\n     \\<not> False\\<rbrakk>\n    \\<Longrightarrow> x =\n                      Abs_Pair\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                       \\<lfloor>\\<bottom>\\<rfloor>", "apply(subst Rep_Pair\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e_inject[symmetric], simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<noteq> Abs_Pair\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e \\<bottom>;\n     snd \\<lceil>\\<bottom>\\<rceil> = \\<bottom>;\n     Rep_Pair\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e x =\n     \\<lfloor>\\<bottom>\\<rfloor>\\<rbrakk>\n    \\<Longrightarrow> \\<lfloor>\\<bottom>\\<rfloor> =\n                      Rep_Pair\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                       (Abs_Pair\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                         \\<lfloor>\\<bottom>\\<rfloor>)", "apply(subst Pair\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e.Abs_Pair\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e_inverse, simp_all,simp add: null_option_def bot_option_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "subsection\\<open>Fundamental Properties of Strict Equality \\label{sec:pair-strict-eq}\\<close>"], ["", "text\\<open>After the part of foundational operations on sets, we detail here equality on sets.\nStrong equality is inherited from the OCL core, but we have to consider\nthe case of the strict equality. We decide to overload strict equality in the\nsame way we do for other value's in OCL:\\<close>"], ["", "overloading\n  StrictRefEq \\<equiv> \"StrictRefEq :: [('\\<AA>,'\\<alpha>::null,'\\<beta>::null)Pair,('\\<AA>,'\\<alpha>::null,'\\<beta>::null)Pair] \\<Rightarrow> ('\\<AA>)Boolean\"\nbegin"], ["", "definition StrictRefEq\\<^sub>P\\<^sub>a\\<^sub>i\\<^sub>r :\n    \"((x::('\\<AA>,'\\<alpha>::null,'\\<beta>::null)Pair) \\<doteq> y) \\<equiv> (\\<lambda> \\<tau>. if (\\<upsilon> x) \\<tau> = true \\<tau> \\<and> (\\<upsilon> y) \\<tau> = true \\<tau>\n                                                     then (x \\<triangleq> y)\\<tau>\n                                                     else invalid \\<tau>)\""], ["", "end"], ["", "text\\<open>Property proof in terms of @{term \"profile_bin\\<^sub>S\\<^sub>t\\<^sub>r\\<^sub>o\\<^sub>n\\<^sub>g\\<^sub>E\\<^sub>q_\\<^sub>v_\\<^sub>v\"}\\<close>"], ["", "interpretation  StrictRefEq\\<^sub>P\\<^sub>a\\<^sub>i\\<^sub>r : profile_bin\\<^sub>S\\<^sub>t\\<^sub>r\\<^sub>o\\<^sub>n\\<^sub>g\\<^sub>E\\<^sub>q_\\<^sub>v_\\<^sub>v \"\\<lambda> x y. (x::('\\<AA>,'\\<alpha>::null,'\\<beta>::null)Pair) \\<doteq> y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. profile_bin\\<^sub>S\\<^sub>t\\<^sub>r\\<^sub>o\\<^sub>n\\<^sub>g\\<^sub>E\\<^sub>q_\\<^sub>v_\\<^sub>v\n     (\\<doteq>)", "by unfold_locales (auto simp:  StrictRefEq\\<^sub>P\\<^sub>a\\<^sub>i\\<^sub>r)"], ["", "subsection\\<open>Standard Operations Definitions\\<close>"], ["", "text\\<open>This part provides a collection of operators for the Pair type.\\<close>"], ["", "subsubsection\\<open>Definition: Pair Constructor\\<close>"], ["", "definition OclPair::\"('\\<AA>, '\\<alpha>) val \\<Rightarrow>\n                     ('\\<AA>, '\\<beta>) val \\<Rightarrow>\n                     ('\\<AA>,'\\<alpha>::null,'\\<beta>::null) Pair\"  (\"Pair{(_),(_)}\")\nwhere     \"Pair{X,Y} \\<equiv> (\\<lambda> \\<tau>. if (\\<upsilon> X) \\<tau> = true \\<tau> \\<and> (\\<upsilon> Y) \\<tau> = true \\<tau>\n                              then Abs_Pair\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e \\<lfloor>\\<lfloor>(X \\<tau>, Y \\<tau>)\\<rfloor>\\<rfloor>\n                              else invalid \\<tau>)\""], ["", "interpretation OclPair : profile_bin\\<^sub>v_\\<^sub>v  \n               OclPair \"\\<lambda> x y. Abs_Pair\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e \\<lfloor>\\<lfloor>(x, y)\\<rfloor>\\<rfloor>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. profile_bin\\<^sub>v_\\<^sub>v OclPair\n     (\\<lambda>x y.\n         Abs_Pair\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n          \\<lfloor>\\<lfloor>(x, y)\\<rfloor>\\<rfloor>)", "apply(unfold_locales, auto simp:  OclPair_def bot_Pair\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e_def null_Pair\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e_def)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<noteq> \\<bottom>; y \\<noteq> \\<bottom>;\n        Abs_Pair\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n         \\<lfloor>\\<lfloor>(x, y)\\<rfloor>\\<rfloor> =\n        Abs_Pair\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e \\<bottom>\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>x y.\n       \\<lbrakk>x \\<noteq> \\<bottom>; y \\<noteq> \\<bottom>;\n        Abs_Pair\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n         \\<lfloor>\\<lfloor>(x, y)\\<rfloor>\\<rfloor> =\n        Abs_Pair\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n         \\<lfloor>\\<bottom>\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> False", "by(auto simp: Abs_Pair\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e_inject null_option_def bot_option_def)"], ["", "subsubsection\\<open>Definition: First\\<close>"], ["", "definition OclFirst::\" ('\\<AA>,'\\<alpha>::null,'\\<beta>::null) Pair \\<Rightarrow> ('\\<AA>, '\\<alpha>) val\"  (\" _ .First'(')\")\nwhere     \"X .First() \\<equiv> (\\<lambda> \\<tau>. if (\\<delta> X) \\<tau> = true \\<tau>\n                              then fst \\<lceil>\\<lceil>Rep_Pair\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e (X \\<tau>)\\<rceil>\\<rceil>\n                              else invalid \\<tau>)\""], ["", "interpretation OclFirst : profile_mono\\<^sub>d OclFirst \"\\<lambda>x.  fst \\<lceil>\\<lceil>Rep_Pair\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e (x)\\<rceil>\\<rceil>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. profile_mono\\<^sub>d OclFirst\n     (\\<lambda>x.\n         fst \\<lceil>\\<lceil>Rep_Pair\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                              x\\<rceil>\\<rceil>)", "by unfold_locales (auto simp:  OclFirst_def)"], ["", "subsubsection\\<open>Definition: Second\\<close>"], ["", "definition OclSecond::\" ('\\<AA>,'\\<alpha>::null,'\\<beta>::null) Pair \\<Rightarrow> ('\\<AA>, '\\<beta>) val\"  (\"_ .Second'(')\")\nwhere     \"X .Second() \\<equiv> (\\<lambda> \\<tau>. if (\\<delta> X) \\<tau> = true \\<tau>\n                               then snd \\<lceil>\\<lceil>Rep_Pair\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e (X \\<tau>)\\<rceil>\\<rceil>\n                               else invalid \\<tau>)\""], ["", "interpretation OclSecond : profile_mono\\<^sub>d OclSecond \"\\<lambda>x.  snd \\<lceil>\\<lceil>Rep_Pair\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e (x)\\<rceil>\\<rceil>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. profile_mono\\<^sub>d OclSecond\n     (\\<lambda>x.\n         snd \\<lceil>\\<lceil>Rep_Pair\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                              x\\<rceil>\\<rceil>)", "by unfold_locales  (auto simp:  OclSecond_def)"], ["", "subsection\\<open>Logical Properties\\<close>"], ["", "lemma 1 : \"\\<tau> \\<Turnstile> \\<upsilon> Y \\<Longrightarrow> \\<tau> \\<Turnstile> Pair{X,Y} .First() \\<triangleq> X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<tau> \\<Turnstile> \\<upsilon> Y \\<Longrightarrow>\n    \\<tau> \\<Turnstile>  Pair{X,Y} .First() \\<triangleq> X", "apply(case_tac \"\\<not>(\\<tau> \\<Turnstile> \\<upsilon> X)\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<tau> \\<Turnstile> \\<upsilon> Y;\n     \\<tau> |\\<noteq> \\<upsilon> X\\<rbrakk>\n    \\<Longrightarrow> \\<tau> \\<Turnstile>  Pair{X,Y} .First() \\<triangleq> X\n 2. \\<lbrakk>\\<tau> \\<Turnstile> \\<upsilon> Y;\n     \\<not> \\<tau> |\\<noteq> \\<upsilon> X\\<rbrakk>\n    \\<Longrightarrow> \\<tau> \\<Turnstile>  Pair{X,Y} .First() \\<triangleq> X", "apply(erule foundation7'[THEN iffD2, THEN foundation15[THEN iffD2, \n                                       THEN StrongEq_L_subst2_rev]],simp_all add:foundation18')"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Y \\<tau> \\<noteq> \\<bottom>;\n     X \\<tau> \\<noteq> \\<bottom>\\<rbrakk>\n    \\<Longrightarrow> \\<tau> \\<Turnstile>  Pair{X,Y} .First() \\<triangleq> X", "apply(auto simp: OclValid_def valid_def defined_def StrongEq_def OclFirst_def OclPair_def\n                true_def false_def invalid_def bot_fun_def null_fun_def)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>Y \\<tau> \\<noteq> \\<bottom>; X \\<tau> \\<noteq> \\<bottom>;\n     Abs_Pair\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n      \\<lfloor>\\<lfloor>(X \\<tau>, Y \\<tau>)\\<rfloor>\\<rfloor> =\n     \\<bottom>\\<rbrakk>\n    \\<Longrightarrow> False\n 2. \\<lbrakk>Y \\<tau> \\<noteq> \\<bottom>; X \\<tau> \\<noteq> \\<bottom>;\n     Abs_Pair\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n      \\<lfloor>\\<lfloor>(X \\<tau>, Y \\<tau>)\\<rfloor>\\<rfloor> =\n     null\\<rbrakk>\n    \\<Longrightarrow> False\n 3. \\<lbrakk>Y \\<tau> \\<noteq> \\<bottom>; X \\<tau> \\<noteq> \\<bottom>;\n     Abs_Pair\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n      \\<lfloor>\\<lfloor>(X \\<tau>, Y \\<tau>)\\<rfloor>\\<rfloor> \\<noteq>\n     \\<bottom>;\n     Abs_Pair\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n      \\<lfloor>\\<lfloor>(X \\<tau>, Y \\<tau>)\\<rfloor>\\<rfloor> \\<noteq>\n     null\\<rbrakk>\n    \\<Longrightarrow> fst \\<lceil>\\<lceil>Rep_Pair\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n     (Abs_Pair\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n       \\<lfloor>\\<lfloor>(X \\<tau>,\n                          Y \\<tau>)\\<rfloor>\\<rfloor>)\\<rceil>\\<rceil> =\n                      X \\<tau>", "apply(auto simp: Abs_Pair\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e_inject null_option_def bot_option_def bot_Pair\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e_def null_Pair\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Y \\<tau> \\<noteq> \\<bottom>;\n     X \\<tau> \\<noteq> \\<bottom>\\<rbrakk>\n    \\<Longrightarrow> fst \\<lceil>\\<lceil>Rep_Pair\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n     (Abs_Pair\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n       \\<lfloor>\\<lfloor>(X \\<tau>,\n                          Y \\<tau>)\\<rfloor>\\<rfloor>)\\<rceil>\\<rceil> =\n                      X \\<tau>", "by(simp add: Abs_Pair\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e_inverse)"], ["", "lemma 2 : \"\\<tau> \\<Turnstile> \\<upsilon> X \\<Longrightarrow> \\<tau> \\<Turnstile> Pair{X,Y} .Second() \\<triangleq> Y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<tau> \\<Turnstile> \\<upsilon> X \\<Longrightarrow>\n    \\<tau> \\<Turnstile> Pair{X,Y} .Second() \\<triangleq> Y", "apply(case_tac \"\\<not>(\\<tau> \\<Turnstile> \\<upsilon> Y)\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<tau> \\<Turnstile> \\<upsilon> X;\n     \\<tau> |\\<noteq> \\<upsilon> Y\\<rbrakk>\n    \\<Longrightarrow> \\<tau> \\<Turnstile> Pair{X,Y} .Second() \\<triangleq> Y\n 2. \\<lbrakk>\\<tau> \\<Turnstile> \\<upsilon> X;\n     \\<not> \\<tau> |\\<noteq> \\<upsilon> Y\\<rbrakk>\n    \\<Longrightarrow> \\<tau> \\<Turnstile> Pair{X,Y} .Second() \\<triangleq> Y", "apply(erule foundation7'[THEN iffD2, THEN foundation15[THEN iffD2, \n                                       THEN StrongEq_L_subst2_rev]],simp_all add:foundation18')"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>X \\<tau> \\<noteq> \\<bottom>;\n     Y \\<tau> \\<noteq> \\<bottom>\\<rbrakk>\n    \\<Longrightarrow> \\<tau> \\<Turnstile> Pair{X,Y} .Second() \\<triangleq> Y", "apply(auto simp: OclValid_def valid_def defined_def StrongEq_def OclSecond_def OclPair_def\n                true_def false_def invalid_def bot_fun_def null_fun_def)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>X \\<tau> \\<noteq> \\<bottom>; Y \\<tau> \\<noteq> \\<bottom>;\n     Abs_Pair\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n      \\<lfloor>\\<lfloor>(X \\<tau>, Y \\<tau>)\\<rfloor>\\<rfloor> =\n     \\<bottom>\\<rbrakk>\n    \\<Longrightarrow> False\n 2. \\<lbrakk>X \\<tau> \\<noteq> \\<bottom>; Y \\<tau> \\<noteq> \\<bottom>;\n     Abs_Pair\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n      \\<lfloor>\\<lfloor>(X \\<tau>, Y \\<tau>)\\<rfloor>\\<rfloor> =\n     null\\<rbrakk>\n    \\<Longrightarrow> False\n 3. \\<lbrakk>X \\<tau> \\<noteq> \\<bottom>; Y \\<tau> \\<noteq> \\<bottom>;\n     Abs_Pair\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n      \\<lfloor>\\<lfloor>(X \\<tau>, Y \\<tau>)\\<rfloor>\\<rfloor> \\<noteq>\n     \\<bottom>;\n     Abs_Pair\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n      \\<lfloor>\\<lfloor>(X \\<tau>, Y \\<tau>)\\<rfloor>\\<rfloor> \\<noteq>\n     null\\<rbrakk>\n    \\<Longrightarrow> snd \\<lceil>\\<lceil>Rep_Pair\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n     (Abs_Pair\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n       \\<lfloor>\\<lfloor>(X \\<tau>,\n                          Y \\<tau>)\\<rfloor>\\<rfloor>)\\<rceil>\\<rceil> =\n                      Y \\<tau>", "apply(auto simp: Abs_Pair\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e_inject null_option_def bot_option_def bot_Pair\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e_def null_Pair\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>X \\<tau> \\<noteq> \\<bottom>;\n     Y \\<tau> \\<noteq> \\<bottom>\\<rbrakk>\n    \\<Longrightarrow> snd \\<lceil>\\<lceil>Rep_Pair\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n     (Abs_Pair\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n       \\<lfloor>\\<lfloor>(X \\<tau>,\n                          Y \\<tau>)\\<rfloor>\\<rfloor>)\\<rceil>\\<rceil> =\n                      Y \\<tau>", "by(simp add: Abs_Pair\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e_inverse)"], ["", "subsection\\<open>Algebraic Execution Properties\\<close>"], ["", "lemma proj1_exec [simp, code_unfold] : \"Pair{X,Y} .First() = (if (\\<upsilon> Y) then X else invalid endif)\""], ["proof (prove)\ngoal (1 subgoal):\n 1.  Pair{X,Y} .First() = (if \\<upsilon> Y then X else invalid endif)", "apply(rule ext, rename_tac \"\\<tau>\", simp add: foundation22[symmetric])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<tau>.\n       \\<tau>\n        \\<Turnstile>  Pair{X,Y} .First() \\<triangleq>\n                     if \\<upsilon> Y then X else invalid endif", "apply(case_tac \"\\<not>(\\<tau> \\<Turnstile> \\<upsilon> Y)\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>\\<tau>.\n       \\<tau> |\\<noteq> \\<upsilon> Y \\<Longrightarrow>\n       \\<tau>\n        \\<Turnstile>  Pair{X,Y} .First() \\<triangleq>\n                     if \\<upsilon> Y then X else invalid endif\n 2. \\<And>\\<tau>.\n       \\<not> \\<tau> |\\<noteq> \\<upsilon> Y \\<Longrightarrow>\n       \\<tau>\n        \\<Turnstile>  Pair{X,Y} .First() \\<triangleq>\n                     if \\<upsilon> Y then X else invalid endif", "apply(erule foundation7'[THEN iffD2, \n                         THEN foundation15[THEN iffD2, \n                                           THEN StrongEq_L_subst2_rev]],simp_all)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<tau>.\n       \\<tau> \\<Turnstile> \\<upsilon> Y \\<Longrightarrow>\n       \\<tau>\n        \\<Turnstile>  Pair{X,Y} .First() \\<triangleq>\n                     if \\<upsilon> Y then X else invalid endif", "apply(subgoal_tac \"\\<tau> \\<Turnstile> \\<upsilon> Y\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>\\<tau>.\n       \\<lbrakk>\\<tau> \\<Turnstile> \\<upsilon> Y;\n        \\<tau> \\<Turnstile> \\<upsilon> Y\\<rbrakk>\n       \\<Longrightarrow> \\<tau>\n                          \\<Turnstile>  Pair{X,Y} .First() \\<triangleq>\n if \\<upsilon> Y then X else invalid endif\n 2. \\<And>\\<tau>.\n       \\<tau> \\<Turnstile> \\<upsilon> Y \\<Longrightarrow>\n       \\<tau> \\<Turnstile> \\<upsilon> Y", "apply(erule foundation13[THEN iffD2, THEN StrongEq_L_subst2_rev], simp_all)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<tau>.\n       \\<tau> \\<Turnstile> \\<upsilon> Y \\<Longrightarrow>\n       \\<tau> \\<Turnstile>  Pair{X,Y} .First() \\<triangleq> X", "by(erule 1)"], ["", "lemma proj2_exec [simp, code_unfold] : \"Pair{X,Y} .Second() = (if (\\<upsilon> X) then Y else invalid endif)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Pair{X,Y} .Second() = (if \\<upsilon> X then Y else invalid endif)", "apply(rule ext, rename_tac \"\\<tau>\", simp add: foundation22[symmetric])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<tau>.\n       \\<tau>\n        \\<Turnstile> Pair{X,Y} .Second() \\<triangleq>\n                     if \\<upsilon> X then Y else invalid endif", "apply(case_tac \"\\<not>(\\<tau> \\<Turnstile> \\<upsilon> X)\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>\\<tau>.\n       \\<tau> |\\<noteq> \\<upsilon> X \\<Longrightarrow>\n       \\<tau>\n        \\<Turnstile> Pair{X,Y} .Second() \\<triangleq>\n                     if \\<upsilon> X then Y else invalid endif\n 2. \\<And>\\<tau>.\n       \\<not> \\<tau> |\\<noteq> \\<upsilon> X \\<Longrightarrow>\n       \\<tau>\n        \\<Turnstile> Pair{X,Y} .Second() \\<triangleq>\n                     if \\<upsilon> X then Y else invalid endif", "apply(erule foundation7'[THEN iffD2, THEN foundation15[THEN iffD2, \n                                  THEN StrongEq_L_subst2_rev]],simp_all)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<tau>.\n       \\<tau> \\<Turnstile> \\<upsilon> X \\<Longrightarrow>\n       \\<tau>\n        \\<Turnstile> Pair{X,Y} .Second() \\<triangleq>\n                     if \\<upsilon> X then Y else invalid endif", "apply(subgoal_tac \"\\<tau> \\<Turnstile> \\<upsilon> X\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>\\<tau>.\n       \\<lbrakk>\\<tau> \\<Turnstile> \\<upsilon> X;\n        \\<tau> \\<Turnstile> \\<upsilon> X\\<rbrakk>\n       \\<Longrightarrow> \\<tau>\n                          \\<Turnstile> Pair{X,Y} .Second() \\<triangleq>\n if \\<upsilon> X then Y else invalid endif\n 2. \\<And>\\<tau>.\n       \\<tau> \\<Turnstile> \\<upsilon> X \\<Longrightarrow>\n       \\<tau> \\<Turnstile> \\<upsilon> X", "apply(erule foundation13[THEN iffD2, THEN StrongEq_L_subst2_rev], simp_all)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<tau>.\n       \\<tau> \\<Turnstile> \\<upsilon> X \\<Longrightarrow>\n       \\<tau> \\<Turnstile> Pair{X,Y} .Second() \\<triangleq> Y", "by(erule 2)"], ["", "(* < *)"], ["", "subsection\\<open>Test Statements\\<close>"], ["", "(*\nAssert   \"(\\<tau> \\<Turnstile> (Pair{\\<lambda>_. \\<lfloor>\\<lfloor>x\\<rfloor>\\<rfloor>,\\<lambda>_. \\<lfloor>\\<lfloor>x\\<rfloor>\\<rfloor>} \\<doteq> Pair{\\<lambda>_. \\<lfloor>\\<lfloor>x\\<rfloor>\\<rfloor>,\\<lambda>_. \\<lfloor>\\<lfloor>x\\<rfloor>\\<rfloor>}))\"\nAssert   \"(\\<tau> \\<Turnstile> (Pair{\\<lambda>_. \\<lfloor>x\\<rfloor>,\\<lambda>_. \\<lfloor>x\\<rfloor>} \\<doteq> Pair{\\<lambda>_. \\<lfloor>x\\<rfloor>,\\<lambda>_. \\<lfloor>x\\<rfloor>}))\"\n*)"], ["", "instantiation Pair\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e  :: (equal,equal)equal\nbegin"], ["", "definition \"HOL.equal k l \\<longleftrightarrow>  (k::('a::equal,'b::equal)Pair\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e) =  l\""], ["", "instance"], ["proof (prove)\ngoal (1 subgoal):\n 1. OFCLASS(Pair('a,'b), equal_class)", "by standard (rule equal_Pair\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e_def)"], ["", "end"], ["", "lemma equal_Pair\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e_code [code]:\n  \"HOL.equal k (l::('a::{equal,null},'b::{equal,null})Pair\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e) \\<longleftrightarrow> Rep_Pair\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e k = Rep_Pair\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e l\""], ["proof (prove)\ngoal (1 subgoal):\n 1. equal_class.equal k l =\n    (Rep_Pair\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e k =\n     Rep_Pair\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e l)", "by (auto simp add: equal Pair\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e.Rep_Pair\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e_inject)"], ["", "Assert \"\\<tau> \\<Turnstile> invalid .First() \\<triangleq> invalid \""], ["", "Assert \"\\<tau> \\<Turnstile> null .First() \\<triangleq> invalid \""], ["", "Assert \"\\<tau> \\<Turnstile> null .Second() \\<triangleq> invalid .Second() \""], ["", "Assert \"\\<tau> \\<Turnstile> Pair{invalid, true} \\<triangleq> invalid \""], ["", "Assert \"\\<tau> \\<Turnstile> \\<upsilon>(Pair{null, true}.First())\""], ["", "Assert \"\\<tau> \\<Turnstile> (Pair{null, true}).First() \\<triangleq> null \""], ["", "Assert \"\\<tau> \\<Turnstile> (Pair{null, Pair{true,invalid}}).First() \\<triangleq> invalid \""], ["", "(*\nAssert   \"\\<not> (\\<tau> \\<Turnstile> (Pair{\\<one>,\\<two>} \\<doteq> Pair{\\<two>,\\<one>}))\"\n*)\n\n(* > *)"], ["", "end"]]}