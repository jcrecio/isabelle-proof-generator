{"file_name": "/home/qj213/afp-2021-10-22/thys/Featherweight_OCL/examples/Employee_Model/Analysis/Analysis_OCL.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Featherweight_OCL", "problem_names": ["lemma \"\\<tau> \\<Turnstile> \\<delta> (X .boss) \\<Longrightarrow> \\<tau> \\<Turnstile> Person .allInstances()->includes\\<^sub>S\\<^sub>e\\<^sub>t(X .boss) \\<and>\n                            \\<tau> \\<Turnstile> Person .allInstances()->includes\\<^sub>S\\<^sub>e\\<^sub>t(X) \"", "lemma REC_pre : \"\\<tau> \\<Turnstile> Person_label\\<^sub>g\\<^sub>l\\<^sub>o\\<^sub>b\\<^sub>a\\<^sub>l\\<^sub>i\\<^sub>n\\<^sub>v \n       \\<Longrightarrow> \\<tau> \\<Turnstile> Person .allInstances()->includes\\<^sub>S\\<^sub>e\\<^sub>t(X) \\<comment> \\<open>\\<open>X\\<close> represented object in state\\<close>\n       \\<Longrightarrow> \\<exists> REC.  \\<tau> \\<Turnstile> REC(X)  \\<triangleq> (Person_label\\<^sub>i\\<^sub>n\\<^sub>v (X) and (X .boss <> null implies REC(X .boss)))\"", "lemma inv_1 : \n\"(\\<tau> \\<Turnstile> Person .allInstances()->includes\\<^sub>S\\<^sub>e\\<^sub>t(self)) \\<Longrightarrow>\n    (\\<tau> \\<Turnstile> inv\\<^sub>P\\<^sub>e\\<^sub>r\\<^sub>s\\<^sub>o\\<^sub>n\\<^sub>_\\<^sub>l\\<^sub>a\\<^sub>b\\<^sub>e\\<^sub>l(self) = ((\\<tau> \\<Turnstile> (self .boss \\<doteq> null)) \\<or>\n                               ( \\<tau> \\<Turnstile> (self .boss <> null) \\<and> \n                                 \\<tau> \\<Turnstile> ((self .salary)  \\<le>\\<^sub>i\\<^sub>n\\<^sub>t  (self .boss .salary))  \\<and>\n                                 \\<tau> \\<Turnstile> (inv\\<^sub>P\\<^sub>e\\<^sub>r\\<^sub>s\\<^sub>o\\<^sub>n\\<^sub>_\\<^sub>l\\<^sub>a\\<^sub>b\\<^sub>e\\<^sub>l(self .boss))))) \"", "lemma inv_2 : \n\"(\\<tau> \\<Turnstile> Person .allInstances@pre()->includes\\<^sub>S\\<^sub>e\\<^sub>t(self)) \\<Longrightarrow>\n    (\\<tau> \\<Turnstile> inv\\<^sub>P\\<^sub>e\\<^sub>r\\<^sub>s\\<^sub>o\\<^sub>n\\<^sub>_\\<^sub>l\\<^sub>a\\<^sub>b\\<^sub>e\\<^sub>l\\<^sub>A\\<^sub>T\\<^sub>p\\<^sub>r\\<^sub>e(self)) =  ((\\<tau> \\<Turnstile> (self .boss@pre \\<doteq> null)) \\<or>\n                                     (\\<tau> \\<Turnstile> (self .boss@pre <> null) \\<and>\n                                     (\\<tau> \\<Turnstile> (self .boss@pre .salary@pre \\<le>\\<^sub>i\\<^sub>n\\<^sub>t self .salary@pre))  \\<and>\n                                     (\\<tau> \\<Turnstile> (inv\\<^sub>P\\<^sub>e\\<^sub>r\\<^sub>s\\<^sub>o\\<^sub>n\\<^sub>_\\<^sub>l\\<^sub>a\\<^sub>b\\<^sub>e\\<^sub>l\\<^sub>A\\<^sub>T\\<^sub>p\\<^sub>r\\<^sub>e(self .boss@pre)))))\"", "theorem unfold_contents :\n   assumes \"cp E\"\n   and     \"\\<tau> \\<Turnstile> \\<delta> self\"\n   shows   \"(\\<tau> \\<Turnstile> E (self .contents())) = \n            (\\<tau> \\<Turnstile> E (if self .boss \\<doteq> null \n                    then Set{self .salary} \n                    else self .boss .contents()->including\\<^sub>S\\<^sub>e\\<^sub>t(self .salary) endif))\"", "theorem unfold_contentsATpre :\n   assumes \"cp E\"\n   and     \"\\<tau> \\<Turnstile> \\<delta> self\"\n   shows   \"(\\<tau> \\<Turnstile> E (self .contents@pre())) = \n            (\\<tau> \\<Turnstile> E (if self .boss@pre \\<doteq> null \n                    then Set{self .salary@pre} \n                    else self .boss@pre .contents@pre()->including\\<^sub>S\\<^sub>e\\<^sub>t(self .salary@pre) endif))\""], "translations": [["", "lemma \"\\<tau> \\<Turnstile> \\<delta> (X .boss) \\<Longrightarrow> \\<tau> \\<Turnstile> Person .allInstances()->includes\\<^sub>S\\<^sub>e\\<^sub>t(X .boss) \\<and>\n                            \\<tau> \\<Turnstile> Person .allInstances()->includes\\<^sub>S\\<^sub>e\\<^sub>t(X) \""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<tau> \\<Turnstile> \\<delta> (X.boss) \\<Longrightarrow>\n    \\<tau>\n     \\<Turnstile> Person .allInstances()->includes\\<^sub>S\\<^sub>e\\<^sub>t(X.boss) \\<and>\n    \\<tau>\n     \\<Turnstile> Person .allInstances()->includes\\<^sub>S\\<^sub>e\\<^sub>t(X)", "oops"], ["", "(* To be generated generically ... hard, but crucial lemma that should hold. \n   It means that X and it successor are object representation that actually\n   occur in the state. *)"], ["", "lemma REC_pre : \"\\<tau> \\<Turnstile> Person_label\\<^sub>g\\<^sub>l\\<^sub>o\\<^sub>b\\<^sub>a\\<^sub>l\\<^sub>i\\<^sub>n\\<^sub>v \n       \\<Longrightarrow> \\<tau> \\<Turnstile> Person .allInstances()->includes\\<^sub>S\\<^sub>e\\<^sub>t(X) \\<comment> \\<open>\\<open>X\\<close> represented object in state\\<close>\n       \\<Longrightarrow> \\<exists> REC.  \\<tau> \\<Turnstile> REC(X)  \\<triangleq> (Person_label\\<^sub>i\\<^sub>n\\<^sub>v (X) and (X .boss <> null implies REC(X .boss)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<tau>\n              \\<Turnstile> Person_label\\<^sub>g\\<^sub>l\\<^sub>o\\<^sub>b\\<^sub>a\\<^sub>l\\<^sub>i\\<^sub>n\\<^sub>v;\n     \\<tau>\n      \\<Turnstile> Person .allInstances()->includes\\<^sub>S\\<^sub>e\\<^sub>t(X)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>REC.\n                         \\<tau>\n                          \\<Turnstile> REC X \\<triangleq>\n (Person_label\\<^sub>i\\<^sub>n\\<^sub>v X and\n  (X.boss <> null implies REC (X.boss)))", "oops"], ["", "(* Attempt to allegiate the burden of he following axiomatizations: could be\n        a witness for a constant specification ...*)"], ["", "text\\<open>This allows to state a predicate:\\<close>"], ["", "axiomatization inv\\<^sub>P\\<^sub>e\\<^sub>r\\<^sub>s\\<^sub>o\\<^sub>n\\<^sub>_\\<^sub>l\\<^sub>a\\<^sub>b\\<^sub>e\\<^sub>l :: \"Person \\<Rightarrow> Boolean\"\nwhere inv\\<^sub>P\\<^sub>e\\<^sub>r\\<^sub>s\\<^sub>o\\<^sub>n\\<^sub>_\\<^sub>l\\<^sub>a\\<^sub>b\\<^sub>e\\<^sub>l_def:\n\"(\\<tau> \\<Turnstile> Person .allInstances()->includes\\<^sub>S\\<^sub>e\\<^sub>t(self)) \\<Longrightarrow> \n (\\<tau> \\<Turnstile> (inv\\<^sub>P\\<^sub>e\\<^sub>r\\<^sub>s\\<^sub>o\\<^sub>n\\<^sub>_\\<^sub>l\\<^sub>a\\<^sub>b\\<^sub>e\\<^sub>l(self) \\<triangleq>  (self .boss <> null implies  \n                                  (self .salary  \\<le>\\<^sub>i\\<^sub>n\\<^sub>t  ((self .boss) .salary)) and\n                                   inv\\<^sub>P\\<^sub>e\\<^sub>r\\<^sub>s\\<^sub>o\\<^sub>n\\<^sub>_\\<^sub>l\\<^sub>a\\<^sub>b\\<^sub>e\\<^sub>l(self .boss))))\""], ["", "axiomatization inv\\<^sub>P\\<^sub>e\\<^sub>r\\<^sub>s\\<^sub>o\\<^sub>n\\<^sub>_\\<^sub>l\\<^sub>a\\<^sub>b\\<^sub>e\\<^sub>l\\<^sub>A\\<^sub>T\\<^sub>p\\<^sub>r\\<^sub>e :: \"Person \\<Rightarrow> Boolean\"\nwhere inv\\<^sub>P\\<^sub>e\\<^sub>r\\<^sub>s\\<^sub>o\\<^sub>n\\<^sub>_\\<^sub>l\\<^sub>a\\<^sub>b\\<^sub>e\\<^sub>l\\<^sub>A\\<^sub>T\\<^sub>p\\<^sub>r\\<^sub>e_def: \n\"(\\<tau> \\<Turnstile> Person .allInstances@pre()->includes\\<^sub>S\\<^sub>e\\<^sub>t(self)) \\<Longrightarrow>\n (\\<tau> \\<Turnstile> (inv\\<^sub>P\\<^sub>e\\<^sub>r\\<^sub>s\\<^sub>o\\<^sub>n\\<^sub>_\\<^sub>l\\<^sub>a\\<^sub>b\\<^sub>e\\<^sub>l\\<^sub>A\\<^sub>T\\<^sub>p\\<^sub>r\\<^sub>e(self) \\<triangleq> (self .boss@pre <> null implies \n                                   (self .salary@pre  \\<le>\\<^sub>i\\<^sub>n\\<^sub>t  ((self .boss@pre) .salary@pre)) and\n                                    inv\\<^sub>P\\<^sub>e\\<^sub>r\\<^sub>s\\<^sub>o\\<^sub>n\\<^sub>_\\<^sub>l\\<^sub>a\\<^sub>b\\<^sub>e\\<^sub>l\\<^sub>A\\<^sub>T\\<^sub>p\\<^sub>r\\<^sub>e(self .boss@pre))))\""], ["", "lemma inv_1 : \n\"(\\<tau> \\<Turnstile> Person .allInstances()->includes\\<^sub>S\\<^sub>e\\<^sub>t(self)) \\<Longrightarrow>\n    (\\<tau> \\<Turnstile> inv\\<^sub>P\\<^sub>e\\<^sub>r\\<^sub>s\\<^sub>o\\<^sub>n\\<^sub>_\\<^sub>l\\<^sub>a\\<^sub>b\\<^sub>e\\<^sub>l(self) = ((\\<tau> \\<Turnstile> (self .boss \\<doteq> null)) \\<or>\n                               ( \\<tau> \\<Turnstile> (self .boss <> null) \\<and> \n                                 \\<tau> \\<Turnstile> ((self .salary)  \\<le>\\<^sub>i\\<^sub>n\\<^sub>t  (self .boss .salary))  \\<and>\n                                 \\<tau> \\<Turnstile> (inv\\<^sub>P\\<^sub>e\\<^sub>r\\<^sub>s\\<^sub>o\\<^sub>n\\<^sub>_\\<^sub>l\\<^sub>a\\<^sub>b\\<^sub>e\\<^sub>l(self .boss))))) \""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<tau>\n     \\<Turnstile> Person .allInstances()->includes\\<^sub>S\\<^sub>e\\<^sub>t(self) \\<Longrightarrow>\n    (\\<tau>\n      \\<Turnstile> inv\\<^sub>P\\<^sub>e\\<^sub>r\\<^sub>s\\<^sub>o\\<^sub>n\\<^sub>_\\<^sub>l\\<^sub>a\\<^sub>b\\<^sub>e\\<^sub>l\n                    self) =\n    (\\<tau> \\<Turnstile> self.boss \\<doteq> null \\<or>\n     \\<tau> \\<Turnstile> self.boss <> null \\<and>\n     \\<tau>\n      \\<Turnstile> self.salary \\<le>\\<^sub>i\\<^sub>n\\<^sub>t\n                   self.boss.salary \\<and>\n     \\<tau>\n      \\<Turnstile> inv\\<^sub>P\\<^sub>e\\<^sub>r\\<^sub>s\\<^sub>o\\<^sub>n\\<^sub>_\\<^sub>l\\<^sub>a\\<^sub>b\\<^sub>e\\<^sub>l\n                    (self.boss))", "oops"], ["", "(* Let's hope that this holds ... *)"], ["", "lemma inv_2 : \n\"(\\<tau> \\<Turnstile> Person .allInstances@pre()->includes\\<^sub>S\\<^sub>e\\<^sub>t(self)) \\<Longrightarrow>\n    (\\<tau> \\<Turnstile> inv\\<^sub>P\\<^sub>e\\<^sub>r\\<^sub>s\\<^sub>o\\<^sub>n\\<^sub>_\\<^sub>l\\<^sub>a\\<^sub>b\\<^sub>e\\<^sub>l\\<^sub>A\\<^sub>T\\<^sub>p\\<^sub>r\\<^sub>e(self)) =  ((\\<tau> \\<Turnstile> (self .boss@pre \\<doteq> null)) \\<or>\n                                     (\\<tau> \\<Turnstile> (self .boss@pre <> null) \\<and>\n                                     (\\<tau> \\<Turnstile> (self .boss@pre .salary@pre \\<le>\\<^sub>i\\<^sub>n\\<^sub>t self .salary@pre))  \\<and>\n                                     (\\<tau> \\<Turnstile> (inv\\<^sub>P\\<^sub>e\\<^sub>r\\<^sub>s\\<^sub>o\\<^sub>n\\<^sub>_\\<^sub>l\\<^sub>a\\<^sub>b\\<^sub>e\\<^sub>l\\<^sub>A\\<^sub>T\\<^sub>p\\<^sub>r\\<^sub>e(self .boss@pre)))))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<tau>\n     \\<Turnstile> Person .allInstances@pre()->includes\\<^sub>S\\<^sub>e\\<^sub>t(self) \\<Longrightarrow>\n    (\\<tau>\n      \\<Turnstile> inv\\<^sub>P\\<^sub>e\\<^sub>r\\<^sub>s\\<^sub>o\\<^sub>n\\<^sub>_\\<^sub>l\\<^sub>a\\<^sub>b\\<^sub>e\\<^sub>l\\<^sub>A\\<^sub>T\\<^sub>p\\<^sub>r\\<^sub>e\n                    self) =\n    (\\<tau> \\<Turnstile> self.boss@pre \\<doteq> null \\<or>\n     \\<tau> \\<Turnstile> self.boss@pre <> null \\<and>\n     \\<tau>\n      \\<Turnstile> self.boss@pre.salary@pre \\<le>\\<^sub>i\\<^sub>n\\<^sub>t\n                   self.salary@pre \\<and>\n     \\<tau>\n      \\<Turnstile> inv\\<^sub>P\\<^sub>e\\<^sub>r\\<^sub>s\\<^sub>o\\<^sub>n\\<^sub>_\\<^sub>l\\<^sub>a\\<^sub>b\\<^sub>e\\<^sub>l\\<^sub>A\\<^sub>T\\<^sub>p\\<^sub>r\\<^sub>e\n                    (self.boss@pre))", "oops"], ["", "(* Let's hope that this holds ... *)"], ["", "text\\<open>A very first attempt to characterize the axiomatization by an inductive\ndefinition - this can not be the last word since too weak (should be equality!)\\<close>"], ["", "coinductive inv :: \"Person \\<Rightarrow> (\\<AA>)st \\<Rightarrow> bool\" where\n \"(\\<tau> \\<Turnstile> (\\<delta> self)) \\<Longrightarrow> ((\\<tau> \\<Turnstile> (self .boss \\<doteq> null)) \\<or>\n                      (\\<tau> \\<Turnstile> (self .boss <> null) \\<and> (\\<tau> \\<Turnstile> (self .boss .salary \\<le>\\<^sub>i\\<^sub>n\\<^sub>t self .salary))  \\<and>\n                     ( (inv(self .boss))\\<tau> )))\n                     \\<Longrightarrow> ( inv self \\<tau>)\""], ["", "section\\<open>OCL Part: The Contract of a Recursive Query\\<close>"], ["", "text\\<open>The original specification of a recursive query :\n\\begin{ocl}\ncontext Person::contents():Set(Integer)\npre:   true\npost:  result = if self.boss = null\n                then Set{i}\n                else self.boss.contents()->including(i)\n                endif\n\\end{ocl}\\<close>"], ["", "text\\<open>For the case of recursive queries, we use at present just axiomatizations:\\<close>"], ["", "axiomatization contents :: \"Person \\<Rightarrow> Set_Integer\"  (\"(1(_).contents'('))\" 50)\nwhere contents_def:\n\"(self .contents()) = (\\<lambda> \\<tau>. SOME res. let res = \\<lambda> _. res in\n                            if \\<tau> \\<Turnstile> (\\<delta> self)\n                            then ((\\<tau> \\<Turnstile> true) \\<and>\n                                  (\\<tau> \\<Turnstile> res \\<triangleq> if (self .boss \\<doteq> null)\n                                              then (Set{self .salary})\n                                              else (self .boss .contents()\n                                                       ->including\\<^sub>S\\<^sub>e\\<^sub>t(self .salary))\n                                              endif))\n                            else \\<tau> \\<Turnstile> res \\<triangleq> invalid)\"\nand cp0_contents:\"(X .contents()) \\<tau> = ((\\<lambda>_. X \\<tau>) .contents()) \\<tau>\""], ["", "interpretation contents : contract0 \"contents\" \"\\<lambda> self. true\"  \n                          \"\\<lambda> self res.  res \\<triangleq> if (self .boss \\<doteq> null)\n                                              then (Set{self .salary})\n                                              else (self .boss .contents()\n                                                       ->including\\<^sub>S\\<^sub>e\\<^sub>t(self .salary))\n                                              endif\""], ["proof (prove)\ngoal (1 subgoal):\n 1. contract0 contents (\\<lambda>self. true)\n     (\\<lambda>self res.\n         res \\<triangleq>\n         if self.boss \\<doteq>\n            null then Set{self.salary} else self.boss.contents()->including\\<^sub>S\\<^sub>e\\<^sub>t(self.salary) endif)", "proof (unfold_locales)"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>self.\n       self.contents() \\<equiv>\n       \\<lambda>\\<tau>.\n          SOME res.\n             let res = \\<lambda>_. res\n             in if \\<tau> \\<Turnstile> \\<delta> self\n                then \\<tau> \\<Turnstile> true \\<and>\n                     \\<tau>\n                      \\<Turnstile> res \\<triangleq>\n                                   if self.boss \\<doteq>\nnull then Set{self.salary} else self.boss.contents()->including\\<^sub>S\\<^sub>e\\<^sub>t(self.salary) endif\n                else \\<tau> \\<Turnstile> res \\<triangleq> invalid\n 2. \\<And>self.\n       \\<forall>\\<sigma> \\<sigma>' \\<sigma>''.\n          ((\\<sigma>, \\<sigma>') \\<Turnstile> true) =\n          ((\\<sigma>, \\<sigma>'') \\<Turnstile> true)\n 3. \\<And>self \\<tau>. true \\<tau> = true \\<tau>\n 4. \\<And>self res \\<tau>.\n       (res \\<triangleq>\n        if self.boss \\<doteq>\n           null then Set{self.salary} else self.boss.contents()->including\\<^sub>S\\<^sub>e\\<^sub>t(self.salary) endif)\n        \\<tau> =\n       ((\\<lambda>_. res \\<tau>) \\<triangleq>\n        if \\<lambda>_. self \\<tau>.boss \\<doteq>\n           null then Set{\\<lambda>_.\n                            self\n                             \\<tau>.salary} else \\<lambda>_.\n              self\n               \\<tau>.boss.contents()->including\\<^sub>S\\<^sub>e\\<^sub>t(\\<lambda>_.\nself \\<tau>.salary) endif)\n        \\<tau>", "show \"\\<And>self \\<tau>. true \\<tau> = true \\<tau>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>self \\<tau>. true \\<tau> = true \\<tau>", "by auto"], ["proof (state)\nthis:\n  true ?\\<tau> = true ?\\<tau>\n\ngoal (3 subgoals):\n 1. \\<And>self.\n       self.contents() \\<equiv>\n       \\<lambda>\\<tau>.\n          SOME res.\n             let res = \\<lambda>_. res\n             in if \\<tau> \\<Turnstile> \\<delta> self\n                then \\<tau> \\<Turnstile> true \\<and>\n                     \\<tau>\n                      \\<Turnstile> res \\<triangleq>\n                                   if self.boss \\<doteq>\nnull then Set{self.salary} else self.boss.contents()->including\\<^sub>S\\<^sub>e\\<^sub>t(self.salary) endif\n                else \\<tau> \\<Turnstile> res \\<triangleq> invalid\n 2. \\<And>self.\n       \\<forall>\\<sigma> \\<sigma>' \\<sigma>''.\n          ((\\<sigma>, \\<sigma>') \\<Turnstile> true) =\n          ((\\<sigma>, \\<sigma>'') \\<Turnstile> true)\n 3. \\<And>self res \\<tau>.\n       (res \\<triangleq>\n        if self.boss \\<doteq>\n           null then Set{self.salary} else self.boss.contents()->including\\<^sub>S\\<^sub>e\\<^sub>t(self.salary) endif)\n        \\<tau> =\n       ((\\<lambda>_. res \\<tau>) \\<triangleq>\n        if \\<lambda>_. self \\<tau>.boss \\<doteq>\n           null then Set{\\<lambda>_.\n                            self\n                             \\<tau>.salary} else \\<lambda>_.\n              self\n               \\<tau>.boss.contents()->including\\<^sub>S\\<^sub>e\\<^sub>t(\\<lambda>_.\nself \\<tau>.salary) endif)\n        \\<tau>", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>self.\n       self.contents() \\<equiv>\n       \\<lambda>\\<tau>.\n          SOME res.\n             let res = \\<lambda>_. res\n             in if \\<tau> \\<Turnstile> \\<delta> self\n                then \\<tau> \\<Turnstile> true \\<and>\n                     \\<tau>\n                      \\<Turnstile> res \\<triangleq>\n                                   if self.boss \\<doteq>\nnull then Set{self.salary} else self.boss.contents()->including\\<^sub>S\\<^sub>e\\<^sub>t(self.salary) endif\n                else \\<tau> \\<Turnstile> res \\<triangleq> invalid\n 2. \\<And>self.\n       \\<forall>\\<sigma> \\<sigma>' \\<sigma>''.\n          ((\\<sigma>, \\<sigma>') \\<Turnstile> true) =\n          ((\\<sigma>, \\<sigma>'') \\<Turnstile> true)\n 3. \\<And>self res \\<tau>.\n       (res \\<triangleq>\n        if self.boss \\<doteq>\n           null then Set{self.salary} else self.boss.contents()->including\\<^sub>S\\<^sub>e\\<^sub>t(self.salary) endif)\n        \\<tau> =\n       ((\\<lambda>_. res \\<tau>) \\<triangleq>\n        if \\<lambda>_. self \\<tau>.boss \\<doteq>\n           null then Set{\\<lambda>_.\n                            self\n                             \\<tau>.salary} else \\<lambda>_.\n              self\n               \\<tau>.boss.contents()->including\\<^sub>S\\<^sub>e\\<^sub>t(\\<lambda>_.\nself \\<tau>.salary) endif)\n        \\<tau>", "show \"\\<And>self. \\<forall>\\<sigma> \\<sigma>' \\<sigma>''. ((\\<sigma>, \\<sigma>') \\<Turnstile> true) = ((\\<sigma>, \\<sigma>'') \\<Turnstile> true)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>self.\n       \\<forall>\\<sigma> \\<sigma>' \\<sigma>''.\n          ((\\<sigma>, \\<sigma>') \\<Turnstile> true) =\n          ((\\<sigma>, \\<sigma>'') \\<Turnstile> true)", "by auto"], ["proof (state)\nthis:\n  \\<forall>\\<sigma> \\<sigma>' \\<sigma>''.\n     ((\\<sigma>, \\<sigma>') \\<Turnstile> true) =\n     ((\\<sigma>, \\<sigma>'') \\<Turnstile> true)\n\ngoal (2 subgoals):\n 1. \\<And>self.\n       self.contents() \\<equiv>\n       \\<lambda>\\<tau>.\n          SOME res.\n             let res = \\<lambda>_. res\n             in if \\<tau> \\<Turnstile> \\<delta> self\n                then \\<tau> \\<Turnstile> true \\<and>\n                     \\<tau>\n                      \\<Turnstile> res \\<triangleq>\n                                   if self.boss \\<doteq>\nnull then Set{self.salary} else self.boss.contents()->including\\<^sub>S\\<^sub>e\\<^sub>t(self.salary) endif\n                else \\<tau> \\<Turnstile> res \\<triangleq> invalid\n 2. \\<And>self res \\<tau>.\n       (res \\<triangleq>\n        if self.boss \\<doteq>\n           null then Set{self.salary} else self.boss.contents()->including\\<^sub>S\\<^sub>e\\<^sub>t(self.salary) endif)\n        \\<tau> =\n       ((\\<lambda>_. res \\<tau>) \\<triangleq>\n        if \\<lambda>_. self \\<tau>.boss \\<doteq>\n           null then Set{\\<lambda>_.\n                            self\n                             \\<tau>.salary} else \\<lambda>_.\n              self\n               \\<tau>.boss.contents()->including\\<^sub>S\\<^sub>e\\<^sub>t(\\<lambda>_.\nself \\<tau>.salary) endif)\n        \\<tau>", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>self.\n       self.contents() \\<equiv>\n       \\<lambda>\\<tau>.\n          SOME res.\n             let res = \\<lambda>_. res\n             in if \\<tau> \\<Turnstile> \\<delta> self\n                then \\<tau> \\<Turnstile> true \\<and>\n                     \\<tau>\n                      \\<Turnstile> res \\<triangleq>\n                                   if self.boss \\<doteq>\nnull then Set{self.salary} else self.boss.contents()->including\\<^sub>S\\<^sub>e\\<^sub>t(self.salary) endif\n                else \\<tau> \\<Turnstile> res \\<triangleq> invalid\n 2. \\<And>self res \\<tau>.\n       (res \\<triangleq>\n        if self.boss \\<doteq>\n           null then Set{self.salary} else self.boss.contents()->including\\<^sub>S\\<^sub>e\\<^sub>t(self.salary) endif)\n        \\<tau> =\n       ((\\<lambda>_. res \\<tau>) \\<triangleq>\n        if \\<lambda>_. self \\<tau>.boss \\<doteq>\n           null then Set{\\<lambda>_.\n                            self\n                             \\<tau>.salary} else \\<lambda>_.\n              self\n               \\<tau>.boss.contents()->including\\<^sub>S\\<^sub>e\\<^sub>t(\\<lambda>_.\nself \\<tau>.salary) endif)\n        \\<tau>", "show \"\\<And>self. self .contents() \\<equiv>\n                       \\<lambda> \\<tau>. SOME res. let res = \\<lambda> _. res in\n                            if \\<tau> \\<Turnstile> (\\<delta> self)\n                            then ((\\<tau> \\<Turnstile> true) \\<and>\n                                  (\\<tau> \\<Turnstile> res \\<triangleq> if (self .boss \\<doteq> null)\n                                              then (Set{self .salary})\n                                              else (self .boss .contents()\n                                                       ->including\\<^sub>S\\<^sub>e\\<^sub>t(self .salary))\n                                              endif))\n                            else \\<tau> \\<Turnstile> res \\<triangleq> invalid\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>self.\n       self.contents() \\<equiv>\n       \\<lambda>\\<tau>.\n          SOME res.\n             let res = \\<lambda>_. res\n             in if \\<tau> \\<Turnstile> \\<delta> self\n                then \\<tau> \\<Turnstile> true \\<and>\n                     \\<tau>\n                      \\<Turnstile> res \\<triangleq>\n                                   if self.boss \\<doteq>\nnull then Set{self.salary} else self.boss.contents()->including\\<^sub>S\\<^sub>e\\<^sub>t(self.salary) endif\n                else \\<tau> \\<Turnstile> res \\<triangleq> invalid", "by(auto simp: contents_def )"], ["proof (state)\nthis:\n  ?self.contents() \\<equiv>\n  \\<lambda>\\<tau>.\n     SOME res.\n        let res = \\<lambda>_. res\n        in if \\<tau> \\<Turnstile> \\<delta> ?self\n           then \\<tau> \\<Turnstile> true \\<and>\n                \\<tau>\n                 \\<Turnstile> res \\<triangleq>\n                              if ?self.boss \\<doteq>\n                                 null then Set{?self.salary} else ?self.boss.contents()->including\\<^sub>S\\<^sub>e\\<^sub>t(?self.salary) endif\n           else \\<tau> \\<Turnstile> res \\<triangleq> invalid\n\ngoal (1 subgoal):\n 1. \\<And>self res \\<tau>.\n       (res \\<triangleq>\n        if self.boss \\<doteq>\n           null then Set{self.salary} else self.boss.contents()->including\\<^sub>S\\<^sub>e\\<^sub>t(self.salary) endif)\n        \\<tau> =\n       ((\\<lambda>_. res \\<tau>) \\<triangleq>\n        if \\<lambda>_. self \\<tau>.boss \\<doteq>\n           null then Set{\\<lambda>_.\n                            self\n                             \\<tau>.salary} else \\<lambda>_.\n              self\n               \\<tau>.boss.contents()->including\\<^sub>S\\<^sub>e\\<^sub>t(\\<lambda>_.\nself \\<tau>.salary) endif)\n        \\<tau>", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>self res \\<tau>.\n       (res \\<triangleq>\n        if self.boss \\<doteq>\n           null then Set{self.salary} else self.boss.contents()->including\\<^sub>S\\<^sub>e\\<^sub>t(self.salary) endif)\n        \\<tau> =\n       ((\\<lambda>_. res \\<tau>) \\<triangleq>\n        if \\<lambda>_. self \\<tau>.boss \\<doteq>\n           null then Set{\\<lambda>_.\n                            self\n                             \\<tau>.salary} else \\<lambda>_.\n              self\n               \\<tau>.boss.contents()->including\\<^sub>S\\<^sub>e\\<^sub>t(\\<lambda>_.\nself \\<tau>.salary) endif)\n        \\<tau>", "have A:\"\\<And>self \\<tau>. ((\\<lambda>_. self \\<tau>) .boss \\<doteq> null) \\<tau> = (\\<lambda>_. (self .boss \\<doteq> null) \\<tau>) \\<tau>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>self \\<tau>.\n       (\\<lambda>_. self \\<tau>.boss \\<doteq> null) \\<tau> =\n       (self.boss \\<doteq> null) \\<tau>", "by (metis (no_types) StrictRefEq\\<^sub>O\\<^sub>b\\<^sub>j\\<^sub>e\\<^sub>c\\<^sub>t_\\<^sub>P\\<^sub>e\\<^sub>r\\<^sub>s\\<^sub>o\\<^sub>n cp_StrictRefEq\\<^sub>O\\<^sub>b\\<^sub>j\\<^sub>e\\<^sub>c\\<^sub>t cp_dot\\<^sub>P\\<^sub>e\\<^sub>r\\<^sub>s\\<^sub>o\\<^sub>n\\<B>\\<O>\\<S>\\<S>)"], ["proof (state)\nthis:\n  (\\<lambda>_. ?self ?\\<tau>.boss \\<doteq> null) ?\\<tau> =\n  (?self.boss \\<doteq> null) ?\\<tau>\n\ngoal (1 subgoal):\n 1. \\<And>self res \\<tau>.\n       (res \\<triangleq>\n        if self.boss \\<doteq>\n           null then Set{self.salary} else self.boss.contents()->including\\<^sub>S\\<^sub>e\\<^sub>t(self.salary) endif)\n        \\<tau> =\n       ((\\<lambda>_. res \\<tau>) \\<triangleq>\n        if \\<lambda>_. self \\<tau>.boss \\<doteq>\n           null then Set{\\<lambda>_.\n                            self\n                             \\<tau>.salary} else \\<lambda>_.\n              self\n               \\<tau>.boss.contents()->including\\<^sub>S\\<^sub>e\\<^sub>t(\\<lambda>_.\nself \\<tau>.salary) endif)\n        \\<tau>", "have B:\"\\<And>self \\<tau>. (\\<lambda>_. Set{(\\<lambda>_. self \\<tau>) .salary} \\<tau>) = (\\<lambda>_. Set{self .salary} \\<tau>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>self \\<tau>.\n       (\\<lambda>_. Set{\\<lambda>_. self \\<tau>.salary} \\<tau>) =\n       (\\<lambda>_. Set{self.salary} \\<tau>)", "apply(subst UML_Set.OclIncluding.cp0)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>self \\<tau>.\n       (\\<lambda>_.\n           \\<lambda>_.\n              Set{}\n               \\<tau>->including\\<^sub>S\\<^sub>e\\<^sub>t(\\<lambda>_.\n                      (\\<lambda>_. self \\<tau>.salary) \\<tau>)\n            \\<tau>) =\n       (\\<lambda>_. Set{self.salary} \\<tau>)", "apply(subst (2) UML_Set.OclIncluding.cp0)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>self \\<tau>.\n       (\\<lambda>_.\n           \\<lambda>_.\n              Set{}\n               \\<tau>->including\\<^sub>S\\<^sub>e\\<^sub>t(\\<lambda>_.\n                      (\\<lambda>_. self \\<tau>.salary) \\<tau>)\n            \\<tau>) =\n       (\\<lambda>_.\n           \\<lambda>_.\n              Set{}\n               \\<tau>->including\\<^sub>S\\<^sub>e\\<^sub>t(\\<lambda>_.\n                      (self.salary) \\<tau>)\n            \\<tau>)", "apply(subst (2) Analysis_UML.cp_dot\\<^sub>P\\<^sub>e\\<^sub>r\\<^sub>s\\<^sub>o\\<^sub>n\\<S>\\<A>\\<L>\\<A>\\<R>\\<Y>)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>self \\<tau>.\n       (\\<lambda>_.\n           \\<lambda>_.\n              Set{}\n               \\<tau>->including\\<^sub>S\\<^sub>e\\<^sub>t(\\<lambda>_.\n                      (\\<lambda>_. self \\<tau>.salary) \\<tau>)\n            \\<tau>) =\n       (\\<lambda>_.\n           \\<lambda>_.\n              Set{}\n               \\<tau>->including\\<^sub>S\\<^sub>e\\<^sub>t(\\<lambda>_.\n                      (\\<lambda>_. self \\<tau>.salary) \\<tau>)\n            \\<tau>)", "by simp"], ["proof (state)\nthis:\n  (\\<lambda>_. Set{\\<lambda>_. ?self ?\\<tau>.salary} ?\\<tau>) =\n  (\\<lambda>_. Set{?self.salary} ?\\<tau>)\n\ngoal (1 subgoal):\n 1. \\<And>self res \\<tau>.\n       (res \\<triangleq>\n        if self.boss \\<doteq>\n           null then Set{self.salary} else self.boss.contents()->including\\<^sub>S\\<^sub>e\\<^sub>t(self.salary) endif)\n        \\<tau> =\n       ((\\<lambda>_. res \\<tau>) \\<triangleq>\n        if \\<lambda>_. self \\<tau>.boss \\<doteq>\n           null then Set{\\<lambda>_.\n                            self\n                             \\<tau>.salary} else \\<lambda>_.\n              self\n               \\<tau>.boss.contents()->including\\<^sub>S\\<^sub>e\\<^sub>t(\\<lambda>_.\nself \\<tau>.salary) endif)\n        \\<tau>", "have C:\"\\<And>self \\<tau>. ((\\<lambda>_. self \\<tau>).boss .contents()->including\\<^sub>S\\<^sub>e\\<^sub>t((\\<lambda>_. self \\<tau>).salary) \\<tau>) = \n                              (self .boss .contents() ->including\\<^sub>S\\<^sub>e\\<^sub>t(self .salary) \\<tau>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>self \\<tau>.\n       \\<lambda>_.\n          self\n           \\<tau>.boss.contents()->including\\<^sub>S\\<^sub>e\\<^sub>t(\\<lambda>_.\n                                  self \\<tau>.salary)\n        \\<tau> =\n       self.boss.contents()->including\\<^sub>S\\<^sub>e\\<^sub>t(self.salary)\n        \\<tau>", "apply(subst UML_Set.OclIncluding.cp0)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>self \\<tau>.\n       \\<lambda>_.\n          (\\<lambda>_. self \\<tau>.boss.contents())\n           \\<tau>->including\\<^sub>S\\<^sub>e\\<^sub>t(\\<lambda>_.\n                  (\\<lambda>_. self \\<tau>.salary) \\<tau>)\n        \\<tau> =\n       self.boss.contents()->including\\<^sub>S\\<^sub>e\\<^sub>t(self.salary)\n        \\<tau>", "apply(subst (2) UML_Set.OclIncluding.cp0)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>self \\<tau>.\n       \\<lambda>_.\n          (\\<lambda>_. self \\<tau>.boss.contents())\n           \\<tau>->including\\<^sub>S\\<^sub>e\\<^sub>t(\\<lambda>_.\n                  (\\<lambda>_. self \\<tau>.salary) \\<tau>)\n        \\<tau> =\n       \\<lambda>_.\n          (self.boss.contents())\n           \\<tau>->including\\<^sub>S\\<^sub>e\\<^sub>t(\\<lambda>_.\n                  (self.salary) \\<tau>)\n        \\<tau>", "apply(subst (2) Analysis_UML.cp_dot\\<^sub>P\\<^sub>e\\<^sub>r\\<^sub>s\\<^sub>o\\<^sub>n\\<S>\\<A>\\<L>\\<A>\\<R>\\<Y>)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>self \\<tau>.\n       \\<lambda>_.\n          (\\<lambda>_. self \\<tau>.boss.contents())\n           \\<tau>->including\\<^sub>S\\<^sub>e\\<^sub>t(\\<lambda>_.\n                  (\\<lambda>_. self \\<tau>.salary) \\<tau>)\n        \\<tau> =\n       \\<lambda>_.\n          (self.boss.contents())\n           \\<tau>->including\\<^sub>S\\<^sub>e\\<^sub>t(\\<lambda>_.\n                  (\\<lambda>_. self \\<tau>.salary) \\<tau>)\n        \\<tau>", "apply(subst cp0_contents)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>self \\<tau>.\n       \\<lambda>_.\n          (\\<lambda>_. (\\<lambda>_. self \\<tau>.boss) \\<tau>.contents())\n           \\<tau>->including\\<^sub>S\\<^sub>e\\<^sub>t(\\<lambda>_.\n                  (\\<lambda>_. self \\<tau>.salary) \\<tau>)\n        \\<tau> =\n       \\<lambda>_.\n          (self.boss.contents())\n           \\<tau>->including\\<^sub>S\\<^sub>e\\<^sub>t(\\<lambda>_.\n                  (\\<lambda>_. self \\<tau>.salary) \\<tau>)\n        \\<tau>", "apply(subst (2) cp0_contents)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>self \\<tau>.\n       \\<lambda>_.\n          (\\<lambda>_. (\\<lambda>_. self \\<tau>.boss) \\<tau>.contents())\n           \\<tau>->including\\<^sub>S\\<^sub>e\\<^sub>t(\\<lambda>_.\n                  (\\<lambda>_. self \\<tau>.salary) \\<tau>)\n        \\<tau> =\n       \\<lambda>_.\n          (\\<lambda>_. (self.boss) \\<tau>.contents())\n           \\<tau>->including\\<^sub>S\\<^sub>e\\<^sub>t(\\<lambda>_.\n                  (\\<lambda>_. self \\<tau>.salary) \\<tau>)\n        \\<tau>", "apply(subst (2) cp_dot\\<^sub>P\\<^sub>e\\<^sub>r\\<^sub>s\\<^sub>o\\<^sub>n\\<B>\\<O>\\<S>\\<S>)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>self \\<tau>.\n       \\<lambda>_.\n          (\\<lambda>_. (\\<lambda>_. self \\<tau>.boss) \\<tau>.contents())\n           \\<tau>->including\\<^sub>S\\<^sub>e\\<^sub>t(\\<lambda>_.\n                  (\\<lambda>_. self \\<tau>.salary) \\<tau>)\n        \\<tau> =\n       \\<lambda>_.\n          (\\<lambda>_. (\\<lambda>_. self \\<tau>.boss) \\<tau>.contents())\n           \\<tau>->including\\<^sub>S\\<^sub>e\\<^sub>t(\\<lambda>_.\n                  (\\<lambda>_. self \\<tau>.salary) \\<tau>)\n        \\<tau>", "by simp"], ["proof (state)\nthis:\n  \\<lambda>_.\n     ?self1\n      ?\\<tau>1.boss.contents()->including\\<^sub>S\\<^sub>e\\<^sub>t(\\<lambda>_.\n                               ?self1 ?\\<tau>1.salary)\n   ?\\<tau>1 =\n  ?self1.boss.contents()->including\\<^sub>S\\<^sub>e\\<^sub>t(?self1.salary)\n   ?\\<tau>1\n\ngoal (1 subgoal):\n 1. \\<And>self res \\<tau>.\n       (res \\<triangleq>\n        if self.boss \\<doteq>\n           null then Set{self.salary} else self.boss.contents()->including\\<^sub>S\\<^sub>e\\<^sub>t(self.salary) endif)\n        \\<tau> =\n       ((\\<lambda>_. res \\<tau>) \\<triangleq>\n        if \\<lambda>_. self \\<tau>.boss \\<doteq>\n           null then Set{\\<lambda>_.\n                            self\n                             \\<tau>.salary} else \\<lambda>_.\n              self\n               \\<tau>.boss.contents()->including\\<^sub>S\\<^sub>e\\<^sub>t(\\<lambda>_.\nself \\<tau>.salary) endif)\n        \\<tau>", "show \"\\<And>self res \\<tau>.\n                   (res \\<triangleq> if (self .boss) \\<doteq> null then Set{self .salary} \n                           else self .boss .contents()->including\\<^sub>S\\<^sub>e\\<^sub>t(self .salary) endif) \\<tau> =\n                   ((\\<lambda>_. res \\<tau>) \\<triangleq> if (\\<lambda>_. self \\<tau>) .boss \\<doteq> null then Set{(\\<lambda>_. self \\<tau>) .salary} \n                                   else(\\<lambda>_. self \\<tau>) .boss .contents()->including\\<^sub>S\\<^sub>e\\<^sub>t((\\<lambda>_. self \\<tau>) .salary) endif) \\<tau>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>self res \\<tau>.\n       (res \\<triangleq>\n        if self.boss \\<doteq>\n           null then Set{self.salary} else self.boss.contents()->including\\<^sub>S\\<^sub>e\\<^sub>t(self.salary) endif)\n        \\<tau> =\n       ((\\<lambda>_. res \\<tau>) \\<triangleq>\n        if \\<lambda>_. self \\<tau>.boss \\<doteq>\n           null then Set{\\<lambda>_.\n                            self\n                             \\<tau>.salary} else \\<lambda>_.\n              self\n               \\<tau>.boss.contents()->including\\<^sub>S\\<^sub>e\\<^sub>t(\\<lambda>_.\nself \\<tau>.salary) endif)\n        \\<tau>", "apply(subst cp_StrongEq)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>self res \\<tau>.\n       ((\\<lambda>_. res \\<tau>) \\<triangleq>\n        (\\<lambda>_.\n            (if self.boss \\<doteq>\n                null then Set{self.salary} else self.boss.contents()->including\\<^sub>S\\<^sub>e\\<^sub>t(self.salary) endif)\n             \\<tau>))\n        \\<tau> =\n       ((\\<lambda>_. res \\<tau>) \\<triangleq>\n        if \\<lambda>_. self \\<tau>.boss \\<doteq>\n           null then Set{\\<lambda>_.\n                            self\n                             \\<tau>.salary} else \\<lambda>_.\n              self\n               \\<tau>.boss.contents()->including\\<^sub>S\\<^sub>e\\<^sub>t(\\<lambda>_.\nself \\<tau>.salary) endif)\n        \\<tau>", "apply(subst (2) cp_StrongEq)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>self res \\<tau>.\n       ((\\<lambda>_. res \\<tau>) \\<triangleq>\n        (\\<lambda>_.\n            (if self.boss \\<doteq>\n                null then Set{self.salary} else self.boss.contents()->including\\<^sub>S\\<^sub>e\\<^sub>t(self.salary) endif)\n             \\<tau>))\n        \\<tau> =\n       ((\\<lambda>_. res \\<tau>) \\<triangleq>\n        (\\<lambda>_.\n            (if \\<lambda>_. self \\<tau>.boss \\<doteq>\n                null then Set{\\<lambda>_.\n                                 self\n                                  \\<tau>.salary} else \\<lambda>_.\n                   self\n                    \\<tau>.boss.contents()->including\\<^sub>S\\<^sub>e\\<^sub>t(\\<lambda>_.\n     self \\<tau>.salary) endif)\n             \\<tau>))\n        \\<tau>", "apply(subst cp_OclIf)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>self res \\<tau>.\n       ((\\<lambda>_. res \\<tau>) \\<triangleq>\n        (\\<lambda>_.\n            (if (\\<lambda>_.\n                    (self.boss \\<doteq> null)\n                     \\<tau>) then (\\<lambda>_.\nSet{self.salary}\n \\<tau>) else (\\<lambda>_.\n                  self.boss.contents()->including\\<^sub>S\\<^sub>e\\<^sub>t(self.salary)\n                   \\<tau>) endif)\n             \\<tau>))\n        \\<tau> =\n       ((\\<lambda>_. res \\<tau>) \\<triangleq>\n        (\\<lambda>_.\n            (if \\<lambda>_. self \\<tau>.boss \\<doteq>\n                null then Set{\\<lambda>_.\n                                 self\n                                  \\<tau>.salary} else \\<lambda>_.\n                   self\n                    \\<tau>.boss.contents()->including\\<^sub>S\\<^sub>e\\<^sub>t(\\<lambda>_.\n     self \\<tau>.salary) endif)\n             \\<tau>))\n        \\<tau>", "apply(subst (2)cp_OclIf)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>self res \\<tau>.\n       ((\\<lambda>_. res \\<tau>) \\<triangleq>\n        (\\<lambda>_.\n            (if (\\<lambda>_.\n                    (self.boss \\<doteq> null)\n                     \\<tau>) then (\\<lambda>_.\nSet{self.salary}\n \\<tau>) else (\\<lambda>_.\n                  self.boss.contents()->including\\<^sub>S\\<^sub>e\\<^sub>t(self.salary)\n                   \\<tau>) endif)\n             \\<tau>))\n        \\<tau> =\n       ((\\<lambda>_. res \\<tau>) \\<triangleq>\n        (\\<lambda>_.\n            (if (\\<lambda>_.\n                    (\\<lambda>_. self \\<tau>.boss \\<doteq> null)\n                     \\<tau>) then (\\<lambda>_.\nSet{\\<lambda>_. self \\<tau>.salary}\n \\<tau>) else (\\<lambda>_.\n                  \\<lambda>_.\n                     self\n                      \\<tau>.boss.contents()->including\\<^sub>S\\<^sub>e\\<^sub>t(\\<lambda>_.\n       self \\<tau>.salary)\n                   \\<tau>) endif)\n             \\<tau>))\n        \\<tau>", "by(simp add: A B C)"], ["proof (state)\nthis:\n  (?res1 \\<triangleq>\n   if ?self1.boss \\<doteq>\n      null then Set{?self1.salary} else ?self1.boss.contents()->including\\<^sub>S\\<^sub>e\\<^sub>t(?self1.salary) endif)\n   ?\\<tau>1 =\n  ((\\<lambda>_. ?res1 ?\\<tau>1) \\<triangleq>\n   if \\<lambda>_. ?self1 ?\\<tau>1.boss \\<doteq>\n      null then Set{\\<lambda>_.\n                       ?self1\n                        ?\\<tau>1.salary} else \\<lambda>_.\n           ?self1\n            ?\\<tau>1.boss.contents()->including\\<^sub>S\\<^sub>e\\<^sub>t(\\<lambda>_.\n                                     ?self1 ?\\<tau>1.salary) endif)\n   ?\\<tau>1\n\ngoal:\nNo subgoals!", "qed"], ["", "text\\<open>Specializing @{thm contents.unfold2}, one gets the following more practical rewrite\nrule that is amenable to symbolic evaluation:\\<close>"], ["", "theorem unfold_contents :\n   assumes \"cp E\"\n   and     \"\\<tau> \\<Turnstile> \\<delta> self\"\n   shows   \"(\\<tau> \\<Turnstile> E (self .contents())) = \n            (\\<tau> \\<Turnstile> E (if self .boss \\<doteq> null \n                    then Set{self .salary} \n                    else self .boss .contents()->including\\<^sub>S\\<^sub>e\\<^sub>t(self .salary) endif))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<tau> \\<Turnstile> E (self.contents())) =\n    (\\<tau>\n      \\<Turnstile> E (if self.boss \\<doteq>\n                         null then Set{self.salary} else self.boss.contents()->including\\<^sub>S\\<^sub>e\\<^sub>t(self.salary) endif))", "by(rule contents.unfold2[of _ _ _ \"\\<lambda> X. true\"], simp_all add: assms)"], ["", "text\\<open>Since we have only one interpretation function, we need the corresponding\noperation on the pre-state:\\<close>"], ["", "consts contentsATpre :: \"Person \\<Rightarrow> Set_Integer\"  (\"(1(_).contents@pre'('))\" 50)"], ["", "axiomatization where contentsATpre_def:\n\" (self).contents@pre() = (\\<lambda> \\<tau>.\n      SOME res. let res = \\<lambda> _. res in\n      if \\<tau> \\<Turnstile> (\\<delta> self)\n      then ((\\<tau> \\<Turnstile> true) \\<and>                            \\<comment> \\<open>pre\\<close>\n            (\\<tau> \\<Turnstile> (res \\<triangleq> if (self).boss@pre \\<doteq> null  \\<comment> \\<open>post\\<close>\n                         then Set{(self).salary@pre}\n                         else (self).boss@pre .contents@pre()\n                                    ->including\\<^sub>S\\<^sub>e\\<^sub>t(self .salary@pre)\n                         endif)))\n      else \\<tau> \\<Turnstile> res \\<triangleq> invalid)\"\nand cp0_contents_at_pre:\"(X .contents@pre()) \\<tau> = ((\\<lambda>_. X \\<tau>) .contents@pre()) \\<tau>\""], ["", "interpretation contentsATpre : contract0 \"contentsATpre\" \"\\<lambda> self. true\"  \n                          \"\\<lambda> self res.  res \\<triangleq> if (self .boss@pre \\<doteq> null)\n                                                               then (Set{self .salary@pre})\n                                                               else (self .boss@pre .contents@pre()\n                                                                        ->including\\<^sub>S\\<^sub>e\\<^sub>t(self .salary@pre))\n                                                               endif\""], ["proof (prove)\ngoal (1 subgoal):\n 1. contract0 contentsATpre (\\<lambda>self. true)\n     (\\<lambda>self res.\n         res \\<triangleq>\n         if self.boss@pre \\<doteq>\n            null then Set{self.salary@pre} else self.boss@pre.contents@pre()->including\\<^sub>S\\<^sub>e\\<^sub>t(self.salary@pre) endif)", "proof (unfold_locales)"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>self.\n       self.contents@pre() \\<equiv>\n       \\<lambda>\\<tau>.\n          SOME res.\n             let res = \\<lambda>_. res\n             in if \\<tau> \\<Turnstile> \\<delta> self\n                then \\<tau> \\<Turnstile> true \\<and>\n                     \\<tau>\n                      \\<Turnstile> res \\<triangleq>\n                                   if self.boss@pre \\<doteq>\nnull then Set{self.salary@pre} else self.boss@pre.contents@pre()->including\\<^sub>S\\<^sub>e\\<^sub>t(self.salary@pre) endif\n                else \\<tau> \\<Turnstile> res \\<triangleq> invalid\n 2. \\<And>self.\n       \\<forall>\\<sigma> \\<sigma>' \\<sigma>''.\n          ((\\<sigma>, \\<sigma>') \\<Turnstile> true) =\n          ((\\<sigma>, \\<sigma>'') \\<Turnstile> true)\n 3. \\<And>self \\<tau>. true \\<tau> = true \\<tau>\n 4. \\<And>self res \\<tau>.\n       (res \\<triangleq>\n        if self.boss@pre \\<doteq>\n           null then Set{self.salary@pre} else self.boss@pre.contents@pre()->including\\<^sub>S\\<^sub>e\\<^sub>t(self.salary@pre) endif)\n        \\<tau> =\n       ((\\<lambda>_. res \\<tau>) \\<triangleq>\n        if \\<lambda>_. self \\<tau>.boss@pre \\<doteq>\n           null then Set{\\<lambda>_.\n                            self\n                             \\<tau>.salary@pre} else \\<lambda>_.\n                  self\n                   \\<tau>.boss@pre.contents@pre()->including\\<^sub>S\\<^sub>e\\<^sub>t(\\<lambda>_.\n            self \\<tau>.salary@pre) endif)\n        \\<tau>", "show \"\\<And>self \\<tau>. true \\<tau> = true \\<tau>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>self \\<tau>. true \\<tau> = true \\<tau>", "by auto"], ["proof (state)\nthis:\n  true ?\\<tau> = true ?\\<tau>\n\ngoal (3 subgoals):\n 1. \\<And>self.\n       self.contents@pre() \\<equiv>\n       \\<lambda>\\<tau>.\n          SOME res.\n             let res = \\<lambda>_. res\n             in if \\<tau> \\<Turnstile> \\<delta> self\n                then \\<tau> \\<Turnstile> true \\<and>\n                     \\<tau>\n                      \\<Turnstile> res \\<triangleq>\n                                   if self.boss@pre \\<doteq>\nnull then Set{self.salary@pre} else self.boss@pre.contents@pre()->including\\<^sub>S\\<^sub>e\\<^sub>t(self.salary@pre) endif\n                else \\<tau> \\<Turnstile> res \\<triangleq> invalid\n 2. \\<And>self.\n       \\<forall>\\<sigma> \\<sigma>' \\<sigma>''.\n          ((\\<sigma>, \\<sigma>') \\<Turnstile> true) =\n          ((\\<sigma>, \\<sigma>'') \\<Turnstile> true)\n 3. \\<And>self res \\<tau>.\n       (res \\<triangleq>\n        if self.boss@pre \\<doteq>\n           null then Set{self.salary@pre} else self.boss@pre.contents@pre()->including\\<^sub>S\\<^sub>e\\<^sub>t(self.salary@pre) endif)\n        \\<tau> =\n       ((\\<lambda>_. res \\<tau>) \\<triangleq>\n        if \\<lambda>_. self \\<tau>.boss@pre \\<doteq>\n           null then Set{\\<lambda>_.\n                            self\n                             \\<tau>.salary@pre} else \\<lambda>_.\n                  self\n                   \\<tau>.boss@pre.contents@pre()->including\\<^sub>S\\<^sub>e\\<^sub>t(\\<lambda>_.\n            self \\<tau>.salary@pre) endif)\n        \\<tau>", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>self.\n       self.contents@pre() \\<equiv>\n       \\<lambda>\\<tau>.\n          SOME res.\n             let res = \\<lambda>_. res\n             in if \\<tau> \\<Turnstile> \\<delta> self\n                then \\<tau> \\<Turnstile> true \\<and>\n                     \\<tau>\n                      \\<Turnstile> res \\<triangleq>\n                                   if self.boss@pre \\<doteq>\nnull then Set{self.salary@pre} else self.boss@pre.contents@pre()->including\\<^sub>S\\<^sub>e\\<^sub>t(self.salary@pre) endif\n                else \\<tau> \\<Turnstile> res \\<triangleq> invalid\n 2. \\<And>self.\n       \\<forall>\\<sigma> \\<sigma>' \\<sigma>''.\n          ((\\<sigma>, \\<sigma>') \\<Turnstile> true) =\n          ((\\<sigma>, \\<sigma>'') \\<Turnstile> true)\n 3. \\<And>self res \\<tau>.\n       (res \\<triangleq>\n        if self.boss@pre \\<doteq>\n           null then Set{self.salary@pre} else self.boss@pre.contents@pre()->including\\<^sub>S\\<^sub>e\\<^sub>t(self.salary@pre) endif)\n        \\<tau> =\n       ((\\<lambda>_. res \\<tau>) \\<triangleq>\n        if \\<lambda>_. self \\<tau>.boss@pre \\<doteq>\n           null then Set{\\<lambda>_.\n                            self\n                             \\<tau>.salary@pre} else \\<lambda>_.\n                  self\n                   \\<tau>.boss@pre.contents@pre()->including\\<^sub>S\\<^sub>e\\<^sub>t(\\<lambda>_.\n            self \\<tau>.salary@pre) endif)\n        \\<tau>", "show \"\\<And>self. \\<forall>\\<sigma> \\<sigma>' \\<sigma>''. ((\\<sigma>, \\<sigma>') \\<Turnstile> true) = ((\\<sigma>, \\<sigma>'') \\<Turnstile> true)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>self.\n       \\<forall>\\<sigma> \\<sigma>' \\<sigma>''.\n          ((\\<sigma>, \\<sigma>') \\<Turnstile> true) =\n          ((\\<sigma>, \\<sigma>'') \\<Turnstile> true)", "by auto"], ["proof (state)\nthis:\n  \\<forall>\\<sigma> \\<sigma>' \\<sigma>''.\n     ((\\<sigma>, \\<sigma>') \\<Turnstile> true) =\n     ((\\<sigma>, \\<sigma>'') \\<Turnstile> true)\n\ngoal (2 subgoals):\n 1. \\<And>self.\n       self.contents@pre() \\<equiv>\n       \\<lambda>\\<tau>.\n          SOME res.\n             let res = \\<lambda>_. res\n             in if \\<tau> \\<Turnstile> \\<delta> self\n                then \\<tau> \\<Turnstile> true \\<and>\n                     \\<tau>\n                      \\<Turnstile> res \\<triangleq>\n                                   if self.boss@pre \\<doteq>\nnull then Set{self.salary@pre} else self.boss@pre.contents@pre()->including\\<^sub>S\\<^sub>e\\<^sub>t(self.salary@pre) endif\n                else \\<tau> \\<Turnstile> res \\<triangleq> invalid\n 2. \\<And>self res \\<tau>.\n       (res \\<triangleq>\n        if self.boss@pre \\<doteq>\n           null then Set{self.salary@pre} else self.boss@pre.contents@pre()->including\\<^sub>S\\<^sub>e\\<^sub>t(self.salary@pre) endif)\n        \\<tau> =\n       ((\\<lambda>_. res \\<tau>) \\<triangleq>\n        if \\<lambda>_. self \\<tau>.boss@pre \\<doteq>\n           null then Set{\\<lambda>_.\n                            self\n                             \\<tau>.salary@pre} else \\<lambda>_.\n                  self\n                   \\<tau>.boss@pre.contents@pre()->including\\<^sub>S\\<^sub>e\\<^sub>t(\\<lambda>_.\n            self \\<tau>.salary@pre) endif)\n        \\<tau>", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>self.\n       self.contents@pre() \\<equiv>\n       \\<lambda>\\<tau>.\n          SOME res.\n             let res = \\<lambda>_. res\n             in if \\<tau> \\<Turnstile> \\<delta> self\n                then \\<tau> \\<Turnstile> true \\<and>\n                     \\<tau>\n                      \\<Turnstile> res \\<triangleq>\n                                   if self.boss@pre \\<doteq>\nnull then Set{self.salary@pre} else self.boss@pre.contents@pre()->including\\<^sub>S\\<^sub>e\\<^sub>t(self.salary@pre) endif\n                else \\<tau> \\<Turnstile> res \\<triangleq> invalid\n 2. \\<And>self res \\<tau>.\n       (res \\<triangleq>\n        if self.boss@pre \\<doteq>\n           null then Set{self.salary@pre} else self.boss@pre.contents@pre()->including\\<^sub>S\\<^sub>e\\<^sub>t(self.salary@pre) endif)\n        \\<tau> =\n       ((\\<lambda>_. res \\<tau>) \\<triangleq>\n        if \\<lambda>_. self \\<tau>.boss@pre \\<doteq>\n           null then Set{\\<lambda>_.\n                            self\n                             \\<tau>.salary@pre} else \\<lambda>_.\n                  self\n                   \\<tau>.boss@pre.contents@pre()->including\\<^sub>S\\<^sub>e\\<^sub>t(\\<lambda>_.\n            self \\<tau>.salary@pre) endif)\n        \\<tau>", "show \"\\<And>self. self .contents@pre() \\<equiv>\n                         \\<lambda>\\<tau>. SOME res. let res = \\<lambda> _. res in\n                             if \\<tau> \\<Turnstile> \\<delta> self\n                             then \\<tau> \\<Turnstile> true \\<and>\n                                  \\<tau> \\<Turnstile> res \\<triangleq> (if self .boss@pre \\<doteq> null then Set{self .salary@pre} \n                                              else self .boss@pre .contents@pre()->including\\<^sub>S\\<^sub>e\\<^sub>t(self .salary@pre) \n                                              endif)\n                             else \\<tau> \\<Turnstile> res \\<triangleq> invalid\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>self.\n       self.contents@pre() \\<equiv>\n       \\<lambda>\\<tau>.\n          SOME res.\n             let res = \\<lambda>_. res\n             in if \\<tau> \\<Turnstile> \\<delta> self\n                then \\<tau> \\<Turnstile> true \\<and>\n                     \\<tau>\n                      \\<Turnstile> res \\<triangleq>\n                                   if self.boss@pre \\<doteq>\nnull then Set{self.salary@pre} else self.boss@pre.contents@pre()->including\\<^sub>S\\<^sub>e\\<^sub>t(self.salary@pre) endif\n                else \\<tau> \\<Turnstile> res \\<triangleq> invalid", "by(auto simp: contentsATpre_def)"], ["proof (state)\nthis:\n  ?self.contents@pre() \\<equiv>\n  \\<lambda>\\<tau>.\n     SOME res.\n        let res = \\<lambda>_. res\n        in if \\<tau> \\<Turnstile> \\<delta> ?self\n           then \\<tau> \\<Turnstile> true \\<and>\n                \\<tau>\n                 \\<Turnstile> res \\<triangleq>\n                              if ?self.boss@pre \\<doteq>\n                                 null then Set{?self.salary@pre} else ?self.boss@pre.contents@pre()->including\\<^sub>S\\<^sub>e\\<^sub>t(?self.salary@pre) endif\n           else \\<tau> \\<Turnstile> res \\<triangleq> invalid\n\ngoal (1 subgoal):\n 1. \\<And>self res \\<tau>.\n       (res \\<triangleq>\n        if self.boss@pre \\<doteq>\n           null then Set{self.salary@pre} else self.boss@pre.contents@pre()->including\\<^sub>S\\<^sub>e\\<^sub>t(self.salary@pre) endif)\n        \\<tau> =\n       ((\\<lambda>_. res \\<tau>) \\<triangleq>\n        if \\<lambda>_. self \\<tau>.boss@pre \\<doteq>\n           null then Set{\\<lambda>_.\n                            self\n                             \\<tau>.salary@pre} else \\<lambda>_.\n                  self\n                   \\<tau>.boss@pre.contents@pre()->including\\<^sub>S\\<^sub>e\\<^sub>t(\\<lambda>_.\n            self \\<tau>.salary@pre) endif)\n        \\<tau>", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>self res \\<tau>.\n       (res \\<triangleq>\n        if self.boss@pre \\<doteq>\n           null then Set{self.salary@pre} else self.boss@pre.contents@pre()->including\\<^sub>S\\<^sub>e\\<^sub>t(self.salary@pre) endif)\n        \\<tau> =\n       ((\\<lambda>_. res \\<tau>) \\<triangleq>\n        if \\<lambda>_. self \\<tau>.boss@pre \\<doteq>\n           null then Set{\\<lambda>_.\n                            self\n                             \\<tau>.salary@pre} else \\<lambda>_.\n                  self\n                   \\<tau>.boss@pre.contents@pre()->including\\<^sub>S\\<^sub>e\\<^sub>t(\\<lambda>_.\n            self \\<tau>.salary@pre) endif)\n        \\<tau>", "have A:\"\\<And>self \\<tau>. ((\\<lambda>_. self \\<tau>) .boss@pre \\<doteq> null) \\<tau> = (\\<lambda>_. (self .boss@pre \\<doteq> null) \\<tau>) \\<tau>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>self \\<tau>.\n       (\\<lambda>_. self \\<tau>.boss@pre \\<doteq> null) \\<tau> =\n       (self.boss@pre \\<doteq> null) \\<tau>", "by (metis StrictRefEq\\<^sub>O\\<^sub>b\\<^sub>j\\<^sub>e\\<^sub>c\\<^sub>t_\\<^sub>P\\<^sub>e\\<^sub>r\\<^sub>s\\<^sub>o\\<^sub>n cp_StrictRefEq\\<^sub>O\\<^sub>b\\<^sub>j\\<^sub>e\\<^sub>c\\<^sub>t cp_dot\\<^sub>P\\<^sub>e\\<^sub>r\\<^sub>s\\<^sub>o\\<^sub>n\\<B>\\<O>\\<S>\\<S>_at_pre)"], ["proof (state)\nthis:\n  (\\<lambda>_. ?self ?\\<tau>.boss@pre \\<doteq> null) ?\\<tau> =\n  (?self.boss@pre \\<doteq> null) ?\\<tau>\n\ngoal (1 subgoal):\n 1. \\<And>self res \\<tau>.\n       (res \\<triangleq>\n        if self.boss@pre \\<doteq>\n           null then Set{self.salary@pre} else self.boss@pre.contents@pre()->including\\<^sub>S\\<^sub>e\\<^sub>t(self.salary@pre) endif)\n        \\<tau> =\n       ((\\<lambda>_. res \\<tau>) \\<triangleq>\n        if \\<lambda>_. self \\<tau>.boss@pre \\<doteq>\n           null then Set{\\<lambda>_.\n                            self\n                             \\<tau>.salary@pre} else \\<lambda>_.\n                  self\n                   \\<tau>.boss@pre.contents@pre()->including\\<^sub>S\\<^sub>e\\<^sub>t(\\<lambda>_.\n            self \\<tau>.salary@pre) endif)\n        \\<tau>", "have B:\"\\<And>self \\<tau>. (\\<lambda>_. Set{(\\<lambda>_. self \\<tau>) .salary@pre} \\<tau>) = (\\<lambda>_. Set{self .salary@pre} \\<tau>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>self \\<tau>.\n       (\\<lambda>_. Set{\\<lambda>_. self \\<tau>.salary@pre} \\<tau>) =\n       (\\<lambda>_. Set{self.salary@pre} \\<tau>)", "apply(subst UML_Set.OclIncluding.cp0)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>self \\<tau>.\n       (\\<lambda>_.\n           \\<lambda>_.\n              Set{}\n               \\<tau>->including\\<^sub>S\\<^sub>e\\<^sub>t(\\<lambda>_.\n                      (\\<lambda>_. self \\<tau>.salary@pre) \\<tau>)\n            \\<tau>) =\n       (\\<lambda>_. Set{self.salary@pre} \\<tau>)", "apply(subst (2) UML_Set.OclIncluding.cp0)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>self \\<tau>.\n       (\\<lambda>_.\n           \\<lambda>_.\n              Set{}\n               \\<tau>->including\\<^sub>S\\<^sub>e\\<^sub>t(\\<lambda>_.\n                      (\\<lambda>_. self \\<tau>.salary@pre) \\<tau>)\n            \\<tau>) =\n       (\\<lambda>_.\n           \\<lambda>_.\n              Set{}\n               \\<tau>->including\\<^sub>S\\<^sub>e\\<^sub>t(\\<lambda>_.\n                      (self.salary@pre) \\<tau>)\n            \\<tau>)", "apply(subst (2) Analysis_UML.cp_dot\\<^sub>P\\<^sub>e\\<^sub>r\\<^sub>s\\<^sub>o\\<^sub>n\\<S>\\<A>\\<L>\\<A>\\<R>\\<Y>_at_pre)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>self \\<tau>.\n       (\\<lambda>_.\n           \\<lambda>_.\n              Set{}\n               \\<tau>->including\\<^sub>S\\<^sub>e\\<^sub>t(\\<lambda>_.\n                      (\\<lambda>_. self \\<tau>.salary@pre) \\<tau>)\n            \\<tau>) =\n       (\\<lambda>_.\n           \\<lambda>_.\n              Set{}\n               \\<tau>->including\\<^sub>S\\<^sub>e\\<^sub>t(\\<lambda>_.\n                      (\\<lambda>_. self \\<tau>.salary@pre) \\<tau>)\n            \\<tau>)", "by simp"], ["proof (state)\nthis:\n  (\\<lambda>_. Set{\\<lambda>_. ?self ?\\<tau>.salary@pre} ?\\<tau>) =\n  (\\<lambda>_. Set{?self.salary@pre} ?\\<tau>)\n\ngoal (1 subgoal):\n 1. \\<And>self res \\<tau>.\n       (res \\<triangleq>\n        if self.boss@pre \\<doteq>\n           null then Set{self.salary@pre} else self.boss@pre.contents@pre()->including\\<^sub>S\\<^sub>e\\<^sub>t(self.salary@pre) endif)\n        \\<tau> =\n       ((\\<lambda>_. res \\<tau>) \\<triangleq>\n        if \\<lambda>_. self \\<tau>.boss@pre \\<doteq>\n           null then Set{\\<lambda>_.\n                            self\n                             \\<tau>.salary@pre} else \\<lambda>_.\n                  self\n                   \\<tau>.boss@pre.contents@pre()->including\\<^sub>S\\<^sub>e\\<^sub>t(\\<lambda>_.\n            self \\<tau>.salary@pre) endif)\n        \\<tau>", "have C:\"\\<And>self \\<tau>. ((\\<lambda>_. self \\<tau>).boss@pre .contents@pre()->including\\<^sub>S\\<^sub>e\\<^sub>t((\\<lambda>_. self \\<tau>).salary@pre) \\<tau>) = \n                              (self .boss@pre .contents@pre() ->including\\<^sub>S\\<^sub>e\\<^sub>t(self .salary@pre) \\<tau>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>self \\<tau>.\n       \\<lambda>_.\n          self\n           \\<tau>.boss@pre.contents@pre()->including\\<^sub>S\\<^sub>e\\<^sub>t(\\<lambda>_.\n    self \\<tau>.salary@pre)\n        \\<tau> =\n       self.boss@pre.contents@pre()->including\\<^sub>S\\<^sub>e\\<^sub>t(self.salary@pre)\n        \\<tau>", "apply(subst UML_Set.OclIncluding.cp0)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>self \\<tau>.\n       \\<lambda>_.\n          (\\<lambda>_. self \\<tau>.boss@pre.contents@pre())\n           \\<tau>->including\\<^sub>S\\<^sub>e\\<^sub>t(\\<lambda>_.\n                  (\\<lambda>_. self \\<tau>.salary@pre) \\<tau>)\n        \\<tau> =\n       self.boss@pre.contents@pre()->including\\<^sub>S\\<^sub>e\\<^sub>t(self.salary@pre)\n        \\<tau>", "apply(subst (2) UML_Set.OclIncluding.cp0)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>self \\<tau>.\n       \\<lambda>_.\n          (\\<lambda>_. self \\<tau>.boss@pre.contents@pre())\n           \\<tau>->including\\<^sub>S\\<^sub>e\\<^sub>t(\\<lambda>_.\n                  (\\<lambda>_. self \\<tau>.salary@pre) \\<tau>)\n        \\<tau> =\n       \\<lambda>_.\n          (self.boss@pre.contents@pre())\n           \\<tau>->including\\<^sub>S\\<^sub>e\\<^sub>t(\\<lambda>_.\n                  (self.salary@pre) \\<tau>)\n        \\<tau>", "apply(subst (2) Analysis_UML.cp_dot\\<^sub>P\\<^sub>e\\<^sub>r\\<^sub>s\\<^sub>o\\<^sub>n\\<S>\\<A>\\<L>\\<A>\\<R>\\<Y>_at_pre)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>self \\<tau>.\n       \\<lambda>_.\n          (\\<lambda>_. self \\<tau>.boss@pre.contents@pre())\n           \\<tau>->including\\<^sub>S\\<^sub>e\\<^sub>t(\\<lambda>_.\n                  (\\<lambda>_. self \\<tau>.salary@pre) \\<tau>)\n        \\<tau> =\n       \\<lambda>_.\n          (self.boss@pre.contents@pre())\n           \\<tau>->including\\<^sub>S\\<^sub>e\\<^sub>t(\\<lambda>_.\n                  (\\<lambda>_. self \\<tau>.salary@pre) \\<tau>)\n        \\<tau>", "apply(subst cp0_contents_at_pre)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>self \\<tau>.\n       \\<lambda>_.\n          (\\<lambda>_.\n              (\\<lambda>_. self \\<tau>.boss@pre) \\<tau>.contents@pre())\n           \\<tau>->including\\<^sub>S\\<^sub>e\\<^sub>t(\\<lambda>_.\n                  (\\<lambda>_. self \\<tau>.salary@pre) \\<tau>)\n        \\<tau> =\n       \\<lambda>_.\n          (self.boss@pre.contents@pre())\n           \\<tau>->including\\<^sub>S\\<^sub>e\\<^sub>t(\\<lambda>_.\n                  (\\<lambda>_. self \\<tau>.salary@pre) \\<tau>)\n        \\<tau>", "apply(subst (2) cp0_contents_at_pre)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>self \\<tau>.\n       \\<lambda>_.\n          (\\<lambda>_.\n              (\\<lambda>_. self \\<tau>.boss@pre) \\<tau>.contents@pre())\n           \\<tau>->including\\<^sub>S\\<^sub>e\\<^sub>t(\\<lambda>_.\n                  (\\<lambda>_. self \\<tau>.salary@pre) \\<tau>)\n        \\<tau> =\n       \\<lambda>_.\n          (\\<lambda>_. (self.boss@pre) \\<tau>.contents@pre())\n           \\<tau>->including\\<^sub>S\\<^sub>e\\<^sub>t(\\<lambda>_.\n                  (\\<lambda>_. self \\<tau>.salary@pre) \\<tau>)\n        \\<tau>", "apply(subst (2) cp_dot\\<^sub>P\\<^sub>e\\<^sub>r\\<^sub>s\\<^sub>o\\<^sub>n\\<B>\\<O>\\<S>\\<S>_at_pre)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>self \\<tau>.\n       \\<lambda>_.\n          (\\<lambda>_.\n              (\\<lambda>_. self \\<tau>.boss@pre) \\<tau>.contents@pre())\n           \\<tau>->including\\<^sub>S\\<^sub>e\\<^sub>t(\\<lambda>_.\n                  (\\<lambda>_. self \\<tau>.salary@pre) \\<tau>)\n        \\<tau> =\n       \\<lambda>_.\n          (\\<lambda>_.\n              (\\<lambda>_. self \\<tau>.boss@pre) \\<tau>.contents@pre())\n           \\<tau>->including\\<^sub>S\\<^sub>e\\<^sub>t(\\<lambda>_.\n                  (\\<lambda>_. self \\<tau>.salary@pre) \\<tau>)\n        \\<tau>", "by simp"], ["proof (state)\nthis:\n  \\<lambda>_.\n     ?self1\n      ?\\<tau>1.boss@pre.contents@pre()->including\\<^sub>S\\<^sub>e\\<^sub>t(\\<lambda>_.\n ?self1 ?\\<tau>1.salary@pre)\n   ?\\<tau>1 =\n  ?self1.boss@pre.contents@pre()->including\\<^sub>S\\<^sub>e\\<^sub>t(?self1.salary@pre)\n   ?\\<tau>1\n\ngoal (1 subgoal):\n 1. \\<And>self res \\<tau>.\n       (res \\<triangleq>\n        if self.boss@pre \\<doteq>\n           null then Set{self.salary@pre} else self.boss@pre.contents@pre()->including\\<^sub>S\\<^sub>e\\<^sub>t(self.salary@pre) endif)\n        \\<tau> =\n       ((\\<lambda>_. res \\<tau>) \\<triangleq>\n        if \\<lambda>_. self \\<tau>.boss@pre \\<doteq>\n           null then Set{\\<lambda>_.\n                            self\n                             \\<tau>.salary@pre} else \\<lambda>_.\n                  self\n                   \\<tau>.boss@pre.contents@pre()->including\\<^sub>S\\<^sub>e\\<^sub>t(\\<lambda>_.\n            self \\<tau>.salary@pre) endif)\n        \\<tau>", "show \"\\<And>self res \\<tau>.\n                   (res \\<triangleq> if (self .boss@pre) \\<doteq> null then Set{self .salary@pre} \n                           else self .boss@pre .contents@pre()->including\\<^sub>S\\<^sub>e\\<^sub>t(self .salary@pre) endif) \\<tau> =\n                   ((\\<lambda>_. res \\<tau>) \\<triangleq> if (\\<lambda>_. self \\<tau>) .boss@pre \\<doteq> null then Set{(\\<lambda>_. self \\<tau>) .salary@pre} \n                                   else(\\<lambda>_. self \\<tau>) .boss@pre .contents@pre()->including\\<^sub>S\\<^sub>e\\<^sub>t((\\<lambda>_. self \\<tau>) .salary@pre) endif) \\<tau>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>self res \\<tau>.\n       (res \\<triangleq>\n        if self.boss@pre \\<doteq>\n           null then Set{self.salary@pre} else self.boss@pre.contents@pre()->including\\<^sub>S\\<^sub>e\\<^sub>t(self.salary@pre) endif)\n        \\<tau> =\n       ((\\<lambda>_. res \\<tau>) \\<triangleq>\n        if \\<lambda>_. self \\<tau>.boss@pre \\<doteq>\n           null then Set{\\<lambda>_.\n                            self\n                             \\<tau>.salary@pre} else \\<lambda>_.\n                  self\n                   \\<tau>.boss@pre.contents@pre()->including\\<^sub>S\\<^sub>e\\<^sub>t(\\<lambda>_.\n            self \\<tau>.salary@pre) endif)\n        \\<tau>", "apply(subst cp_StrongEq)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>self res \\<tau>.\n       ((\\<lambda>_. res \\<tau>) \\<triangleq>\n        (\\<lambda>_.\n            (if self.boss@pre \\<doteq>\n                null then Set{self.salary@pre} else self.boss@pre.contents@pre()->including\\<^sub>S\\<^sub>e\\<^sub>t(self.salary@pre) endif)\n             \\<tau>))\n        \\<tau> =\n       ((\\<lambda>_. res \\<tau>) \\<triangleq>\n        if \\<lambda>_. self \\<tau>.boss@pre \\<doteq>\n           null then Set{\\<lambda>_.\n                            self\n                             \\<tau>.salary@pre} else \\<lambda>_.\n                  self\n                   \\<tau>.boss@pre.contents@pre()->including\\<^sub>S\\<^sub>e\\<^sub>t(\\<lambda>_.\n            self \\<tau>.salary@pre) endif)\n        \\<tau>", "apply(subst (2) cp_StrongEq)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>self res \\<tau>.\n       ((\\<lambda>_. res \\<tau>) \\<triangleq>\n        (\\<lambda>_.\n            (if self.boss@pre \\<doteq>\n                null then Set{self.salary@pre} else self.boss@pre.contents@pre()->including\\<^sub>S\\<^sub>e\\<^sub>t(self.salary@pre) endif)\n             \\<tau>))\n        \\<tau> =\n       ((\\<lambda>_. res \\<tau>) \\<triangleq>\n        (\\<lambda>_.\n            (if \\<lambda>_. self \\<tau>.boss@pre \\<doteq>\n                null then Set{\\<lambda>_.\n                                 self\n                                  \\<tau>.salary@pre} else \\<lambda>_.\n                       self\n                        \\<tau>.boss@pre.contents@pre()->including\\<^sub>S\\<^sub>e\\<^sub>t(\\<lambda>_.\n                 self \\<tau>.salary@pre) endif)\n             \\<tau>))\n        \\<tau>", "apply(subst cp_OclIf)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>self res \\<tau>.\n       ((\\<lambda>_. res \\<tau>) \\<triangleq>\n        (\\<lambda>_.\n            (if (\\<lambda>_.\n                    (self.boss@pre \\<doteq> null)\n                     \\<tau>) then (\\<lambda>_.\nSet{self.salary@pre}\n \\<tau>) else (\\<lambda>_.\n                  self.boss@pre.contents@pre()->including\\<^sub>S\\<^sub>e\\<^sub>t(self.salary@pre)\n                   \\<tau>) endif)\n             \\<tau>))\n        \\<tau> =\n       ((\\<lambda>_. res \\<tau>) \\<triangleq>\n        (\\<lambda>_.\n            (if \\<lambda>_. self \\<tau>.boss@pre \\<doteq>\n                null then Set{\\<lambda>_.\n                                 self\n                                  \\<tau>.salary@pre} else \\<lambda>_.\n                       self\n                        \\<tau>.boss@pre.contents@pre()->including\\<^sub>S\\<^sub>e\\<^sub>t(\\<lambda>_.\n                 self \\<tau>.salary@pre) endif)\n             \\<tau>))\n        \\<tau>", "apply(subst (2)cp_OclIf)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>self res \\<tau>.\n       ((\\<lambda>_. res \\<tau>) \\<triangleq>\n        (\\<lambda>_.\n            (if (\\<lambda>_.\n                    (self.boss@pre \\<doteq> null)\n                     \\<tau>) then (\\<lambda>_.\nSet{self.salary@pre}\n \\<tau>) else (\\<lambda>_.\n                  self.boss@pre.contents@pre()->including\\<^sub>S\\<^sub>e\\<^sub>t(self.salary@pre)\n                   \\<tau>) endif)\n             \\<tau>))\n        \\<tau> =\n       ((\\<lambda>_. res \\<tau>) \\<triangleq>\n        (\\<lambda>_.\n            (if (\\<lambda>_.\n                    (\\<lambda>_. self \\<tau>.boss@pre \\<doteq> null)\n                     \\<tau>) then (\\<lambda>_.\nSet{\\<lambda>_. self \\<tau>.salary@pre}\n \\<tau>) else (\\<lambda>_.\n                  \\<lambda>_.\n                     self\n                      \\<tau>.boss@pre.contents@pre()->including\\<^sub>S\\<^sub>e\\<^sub>t(\\<lambda>_.\n               self \\<tau>.salary@pre)\n                   \\<tau>) endif)\n             \\<tau>))\n        \\<tau>", "by(simp add: A B C)"], ["proof (state)\nthis:\n  (?res1 \\<triangleq>\n   if ?self1.boss@pre \\<doteq>\n      null then Set{?self1.salary@pre} else ?self1.boss@pre.contents@pre()->including\\<^sub>S\\<^sub>e\\<^sub>t(?self1.salary@pre) endif)\n   ?\\<tau>1 =\n  ((\\<lambda>_. ?res1 ?\\<tau>1) \\<triangleq>\n   if \\<lambda>_. ?self1 ?\\<tau>1.boss@pre \\<doteq>\n      null then Set{\\<lambda>_.\n                       ?self1\n                        ?\\<tau>1.salary@pre} else \\<lambda>_.\n               ?self1\n                ?\\<tau>1.boss@pre.contents@pre()->including\\<^sub>S\\<^sub>e\\<^sub>t(\\<lambda>_.\n           ?self1 ?\\<tau>1.salary@pre) endif)\n   ?\\<tau>1\n\ngoal:\nNo subgoals!", "qed"], ["", "text\\<open>Again, we derive via @{thm [source] contents.unfold2} a Knaster-Tarski like Fixpoint rule\nthat is amenable to symbolic evaluation:\\<close>"], ["", "theorem unfold_contentsATpre :\n   assumes \"cp E\"\n   and     \"\\<tau> \\<Turnstile> \\<delta> self\"\n   shows   \"(\\<tau> \\<Turnstile> E (self .contents@pre())) = \n            (\\<tau> \\<Turnstile> E (if self .boss@pre \\<doteq> null \n                    then Set{self .salary@pre} \n                    else self .boss@pre .contents@pre()->including\\<^sub>S\\<^sub>e\\<^sub>t(self .salary@pre) endif))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<tau> \\<Turnstile> E (self.contents@pre())) =\n    (\\<tau>\n      \\<Turnstile> E (if self.boss@pre \\<doteq>\n                         null then Set{self.salary@pre} else self.boss@pre.contents@pre()->including\\<^sub>S\\<^sub>e\\<^sub>t(self.salary@pre) endif))", "by(rule contentsATpre.unfold2[of _ _ _ \"\\<lambda> X. true\"], simp_all add: assms)"], ["", "text\\<open>Note that these \\inlineocl{@pre} variants on methods are only available on queries, \\ie,\noperations without side-effect.\\<close>"], ["", "section\\<open>OCL Part: The Contract of a User-defined Method\\<close>"], ["", "text\\<open>\nThe example specification in high-level OCL input syntax reads as follows:\n\\begin{ocl}\ncontext Person::insert(x:Integer)\npre: true\npost: contents():Set(Integer)\ncontents() = contents@pre()->including(x)\n\\end{ocl}\n\nThis boils down to:\n\\<close>"], ["", "definition insert :: \"Person \\<Rightarrow>Integer \\<Rightarrow> Void\"  (\"(1(_).insert'(_'))\" 50)\nwhere \"self .insert(x) \\<equiv> \n            (\\<lambda> \\<tau>. SOME res. let res = \\<lambda> _. res in\n                  if (\\<tau> \\<Turnstile> (\\<delta> self)) \\<and>  (\\<tau> \\<Turnstile> \\<upsilon> x)\n                  then (\\<tau> \\<Turnstile> true \\<and>  \n                       (\\<tau> \\<Turnstile> ((self).contents() \\<triangleq> (self).contents@pre()->including\\<^sub>S\\<^sub>e\\<^sub>t(x))))\n                  else \\<tau> \\<Turnstile> res \\<triangleq> invalid)\""], ["", "text\\<open>The semantic consequences of this definition were computed inside this locale interpretation:\\<close>"], ["", "interpretation insert : contract1 \"insert\" \"\\<lambda> self x. true\" \n                                  \"\\<lambda> self x res. ((self .contents()) \\<triangleq> \n                                                       (self .contents@pre()->including\\<^sub>S\\<^sub>e\\<^sub>t(x)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. contract1 Analysis_OCL.insert (\\<lambda>self x. true)\n     (\\<lambda>self x res.\n         self.contents() \\<triangleq>\n         self.contents@pre()->including\\<^sub>S\\<^sub>e\\<^sub>t(x))", "apply unfold_locales"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>self a1.\n       self.insert(a1) \\<equiv>\n       \\<lambda>\\<tau>.\n          SOME res.\n             let res = \\<lambda>_. res\n             in if \\<tau> \\<Turnstile> \\<delta> self \\<and>\n                   \\<tau> \\<Turnstile> \\<upsilon> a1\n                then \\<tau> \\<Turnstile> true \\<and>\n                     \\<tau>\n                      \\<Turnstile> self.contents() \\<triangleq>\n                                   self.contents@pre()->including\\<^sub>S\\<^sub>e\\<^sub>t(a1)\n                else \\<tau> \\<Turnstile> res \\<triangleq> invalid\n 2. \\<And>self a1.\n       \\<forall>\\<sigma> \\<sigma>' \\<sigma>''.\n          ((\\<sigma>, \\<sigma>') \\<Turnstile> true) =\n          ((\\<sigma>, \\<sigma>'') \\<Turnstile> true)\n 3. \\<And>self a1 \\<tau>. true \\<tau> = true \\<tau>\n 4. \\<And>self a1 res \\<tau>.\n       (self.contents() \\<triangleq>\n        self.contents@pre()->including\\<^sub>S\\<^sub>e\\<^sub>t(a1))\n        \\<tau> =\n       (\\<lambda>_. self \\<tau>.contents() \\<triangleq>\n        \\<lambda>_.\n           self\n            \\<tau>.contents@pre()->including\\<^sub>S\\<^sub>e\\<^sub>t(\\<lambda>_.\n                                  a1 \\<tau>))\n        \\<tau>", "apply(auto simp:insert_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>self a1 a b.\n       (self.contents() \\<triangleq>\n        self.contents@pre()->including\\<^sub>S\\<^sub>e\\<^sub>t(a1))\n        (a, b) =\n       (\\<lambda>_. self (a, b).contents() \\<triangleq>\n        \\<lambda>_.\n           self\n            (a, b).contents@pre()->including\\<^sub>S\\<^sub>e\\<^sub>t(\\<lambda>_.\n                                  a1 (a, b)))\n        (a, b)", "apply(subst cp_StrongEq)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>self a1 a b.\n       ((\\<lambda>_. (self.contents()) (a, b)) \\<triangleq>\n        (\\<lambda>_.\n            self.contents@pre()->including\\<^sub>S\\<^sub>e\\<^sub>t(a1)\n             (a, b)))\n        (a, b) =\n       (\\<lambda>_. self (a, b).contents() \\<triangleq>\n        \\<lambda>_.\n           self\n            (a, b).contents@pre()->including\\<^sub>S\\<^sub>e\\<^sub>t(\\<lambda>_.\n                                  a1 (a, b)))\n        (a, b)", "apply(subst (2) cp_StrongEq)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>self a1 a b.\n       ((\\<lambda>_. (self.contents()) (a, b)) \\<triangleq>\n        (\\<lambda>_.\n            self.contents@pre()->including\\<^sub>S\\<^sub>e\\<^sub>t(a1)\n             (a, b)))\n        (a, b) =\n       ((\\<lambda>_.\n            (\\<lambda>_. self (a, b).contents()) (a, b)) \\<triangleq>\n        (\\<lambda>_.\n            \\<lambda>_.\n               self\n                (a, b).contents@pre()->including\\<^sub>S\\<^sub>e\\<^sub>t(\\<lambda>_.\na1 (a, b))\n             (a, b)))\n        (a, b)", "apply(subst contents.cp0)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>self a1 a b.\n       ((\\<lambda>_.\n            (\\<lambda>_. self (a, b).contents()) (a, b)) \\<triangleq>\n        (\\<lambda>_.\n            self.contents@pre()->including\\<^sub>S\\<^sub>e\\<^sub>t(a1)\n             (a, b)))\n        (a, b) =\n       ((\\<lambda>_.\n            (\\<lambda>_. self (a, b).contents()) (a, b)) \\<triangleq>\n        (\\<lambda>_.\n            \\<lambda>_.\n               self\n                (a, b).contents@pre()->including\\<^sub>S\\<^sub>e\\<^sub>t(\\<lambda>_.\na1 (a, b))\n             (a, b)))\n        (a, b)", "apply(subst UML_Set.OclIncluding.cp0)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>self a1 a b.\n       ((\\<lambda>_.\n            (\\<lambda>_. self (a, b).contents()) (a, b)) \\<triangleq>\n        (\\<lambda>_.\n            \\<lambda>_.\n               (self.contents@pre())\n                (a, b)->including\\<^sub>S\\<^sub>e\\<^sub>t(\\<lambda>_.\n                       a1 (a, b))\n             (a, b)))\n        (a, b) =\n       ((\\<lambda>_.\n            (\\<lambda>_. self (a, b).contents()) (a, b)) \\<triangleq>\n        (\\<lambda>_.\n            \\<lambda>_.\n               self\n                (a, b).contents@pre()->including\\<^sub>S\\<^sub>e\\<^sub>t(\\<lambda>_.\na1 (a, b))\n             (a, b)))\n        (a, b)", "apply(subst (2) UML_Set.OclIncluding.cp0)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>self a1 a b.\n       ((\\<lambda>_.\n            (\\<lambda>_. self (a, b).contents()) (a, b)) \\<triangleq>\n        (\\<lambda>_.\n            \\<lambda>_.\n               (self.contents@pre())\n                (a, b)->including\\<^sub>S\\<^sub>e\\<^sub>t(\\<lambda>_.\n                       a1 (a, b))\n             (a, b)))\n        (a, b) =\n       ((\\<lambda>_.\n            (\\<lambda>_. self (a, b).contents()) (a, b)) \\<triangleq>\n        (\\<lambda>_.\n            \\<lambda>_.\n               (\\<lambda>_. self (a, b).contents@pre())\n                (a, b)->including\\<^sub>S\\<^sub>e\\<^sub>t(\\<lambda>_.\n                       a1 (a, b))\n             (a, b)))\n        (a, b)", "apply(subst contentsATpre.cp0)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>self a1 a b.\n       ((\\<lambda>_.\n            (\\<lambda>_. self (a, b).contents()) (a, b)) \\<triangleq>\n        (\\<lambda>_.\n            \\<lambda>_.\n               (\\<lambda>_. self (a, b).contents@pre())\n                (a, b)->including\\<^sub>S\\<^sub>e\\<^sub>t(\\<lambda>_.\n                       a1 (a, b))\n             (a, b)))\n        (a, b) =\n       ((\\<lambda>_.\n            (\\<lambda>_. self (a, b).contents()) (a, b)) \\<triangleq>\n        (\\<lambda>_.\n            \\<lambda>_.\n               (\\<lambda>_. self (a, b).contents@pre())\n                (a, b)->including\\<^sub>S\\<^sub>e\\<^sub>t(\\<lambda>_.\n                       a1 (a, b))\n             (a, b)))\n        (a, b)", "by(simp)"], ["", "(* an extremely hacky proof that cries for reformulation and automation - bu *)"], ["", "text\\<open>The result of this locale interpretation for our @{term insert}  contract is the following \nset of properties, which serves as basis for automated deduction on them: \n\n\\begin{table}[htbp]\n   \\centering\n   \\begin{tabu}{lX[,c,]}\n      \\toprule\n      Name & Theorem \\\\\n      \\midrule\n      @{thm [source] insert.strict0}  & @{thm  [display=false] insert.strict0} \\\\\n      @{thm [source] insert.nullstrict0}  & @{thm  [display=false] insert.nullstrict0} \\\\\n      @{thm [source] insert.strict1}  & @{thm  [display=false] insert.strict1} \\\\\n      @{thm [source] insert.cp\\<^sub>P\\<^sub>R\\<^sub>E}  & @{thm  [display=false] insert.cp\\<^sub>P\\<^sub>R\\<^sub>E} \\\\\n      @{thm [source] insert.cp\\<^sub>P\\<^sub>O\\<^sub>S\\<^sub>T}  & @{thm  [display=false] insert.cp\\<^sub>P\\<^sub>O\\<^sub>S\\<^sub>T} \\\\\n      @{thm [source] insert.cp_pre}  & @{thm  [display=false] insert.cp_pre} \\\\\n      @{thm [source] insert.cp_post}  & @{thm [display=false] insert.cp_post} \\\\\n      @{thm [source] insert.cp}   & @{thm  [display=false] insert.cp} \\\\\n      @{thm [source] insert.cp0}   & @{thm  [display=false] insert.cp0} \\\\   \n      @{thm [source] insert.def_scheme}   & @{thm  [display=false] insert.def_scheme} \\\\\n      @{thm [source] insert.unfold} & @{thm [display=false] insert.unfold} \\\\\n      @{thm [source] insert.unfold2} & @{thm [display=false] insert.unfold2} \\\\\n      \\bottomrule\n   \\end{tabu}\n   \\caption{Semantic properties resulting from a user-defined operation contract.}\n   \\label{tab:sem_operation_contract}\n\\end{table}\n\n\\<close>"], ["", "end"]]}