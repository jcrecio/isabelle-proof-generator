{"file_name": "/home/qj213/afp-2021-10-22/thys/Featherweight_OCL/collection_types/UML_Sequence.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Featherweight_OCL", "problem_names": ["lemma Sequence_inv_lemma: \"\\<tau> \\<Turnstile> (\\<delta> X) \\<Longrightarrow> \\<forall>x\\<in>set \\<lceil>\\<lceil>Rep_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e (X \\<tau>)\\<rceil>\\<rceil>. x \\<noteq> bot\"", "lemma mtSequence_defined[simp,code_unfold]:\"\\<delta>(Sequence{}) = true\"", "lemma mtSequence_valid[simp,code_unfold]:\"\\<upsilon>(Sequence{}) = true\"", "lemma mtSequence_rep_set: \"\\<lceil>\\<lceil>Rep_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e (Sequence{} \\<tau>)\\<rceil>\\<rceil> = []\"", "lemma [simp,code_unfold]: \"const Sequence{}\"", "lemma [simp,code_unfold] : \"(Sequence{}->including\\<^sub>S\\<^sub>e\\<^sub>q(a)) = (Sequence{}->prepend\\<^sub>S\\<^sub>e\\<^sub>q(a))\"", "lemma [simp,code_unfold] : \"((S->prepend\\<^sub>S\\<^sub>e\\<^sub>q(a))->including\\<^sub>S\\<^sub>e\\<^sub>q(b)) = ((S->including\\<^sub>S\\<^sub>e\\<^sub>q(b))->prepend\\<^sub>S\\<^sub>e\\<^sub>q(a))\"", "lemma OclIterate_invalid[simp,code_unfold]:\"invalid->iterate\\<^sub>S\\<^sub>e\\<^sub>q(a; x = A | P a x) = invalid\"", "lemma OclIterate_null[simp,code_unfold]:\"null->iterate\\<^sub>S\\<^sub>e\\<^sub>q(a; x = A | P a x) = invalid\"", "lemma OclIterate_invalid_args[simp,code_unfold]:\"S->iterate\\<^sub>S\\<^sub>e\\<^sub>q(a; x = invalid | P a x) = invalid\"", "lemma cp_OclIncluding:\n\"(X->including\\<^sub>S\\<^sub>e\\<^sub>q(x)) \\<tau> = ((\\<lambda> _. X \\<tau>)->including\\<^sub>S\\<^sub>e\\<^sub>q(\\<lambda> _. x \\<tau>)) \\<tau>\"", "lemma cp_OclIterate: \n     \"(X->iterate\\<^sub>S\\<^sub>e\\<^sub>q(a; x = A | P a x)) \\<tau> =\n                ((\\<lambda> _. X \\<tau>)->iterate\\<^sub>S\\<^sub>e\\<^sub>q(a; x = A | P a x)) \\<tau>\"", "lemmas cp_intro''\\<^sub>S\\<^sub>e\\<^sub>q[intro!,simp,code_unfold] = \n       cp_OclIncluding [THEN allI[THEN allI[THEN allI[THEN cpI2]], of \"OclIncluding\"]]", "lemma OclIterate_empty[simp,code_unfold]:\"Sequence{}->iterate\\<^sub>S\\<^sub>e\\<^sub>q(a; x = A | P a x) = A\"", "lemma OclIterate_including[simp,code_unfold]:\nassumes strict1 : \"\\<And>X. P invalid X = invalid\"\nand     P_valid_arg: \"\\<And> \\<tau>. (\\<upsilon> A) \\<tau> = (\\<upsilon> (P a A)) \\<tau>\"\nand     P_cp    : \"\\<And> x y \\<tau>. P x y \\<tau> = P (\\<lambda> _. x \\<tau>) y \\<tau>\"\nand     P_cp'   : \"\\<And> x y \\<tau>. P x y \\<tau> = P x (\\<lambda> _. y \\<tau>) \\<tau>\"\nshows  \"(S->including\\<^sub>S\\<^sub>e\\<^sub>q(a))->iterate\\<^sub>S\\<^sub>e\\<^sub>q(b; x = A | P b x) = S->iterate\\<^sub>S\\<^sub>e\\<^sub>q(b; x = P a A| P b x)\"", "lemma OclIterate_prepend[simp,code_unfold]:\nassumes strict1 : \"\\<And>X. P invalid X = invalid\"\nand     strict2 : \"\\<And>X. P X invalid = invalid\"\nand     P_cp    : \"\\<And> x y \\<tau>. P x y \\<tau> = P (\\<lambda> _. x \\<tau>) y \\<tau>\"\nand     P_cp'   : \"\\<And> x y \\<tau>. P x y \\<tau> = P x (\\<lambda> _. y \\<tau>) \\<tau>\"\nshows  \"(S->prepend\\<^sub>S\\<^sub>e\\<^sub>q(a))->iterate\\<^sub>S\\<^sub>e\\<^sub>q(b; x = A | P b x) = P a (S->iterate\\<^sub>S\\<^sub>e\\<^sub>q(b; x = A| P b x))\"", "lemma equal_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e_code [code]:\n  \"HOL.equal k (l::('a::{equal,null})Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e) \\<longleftrightarrow> Rep_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e k = Rep_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e l\""], "translations": [["", "lemma Sequence_inv_lemma: \"\\<tau> \\<Turnstile> (\\<delta> X) \\<Longrightarrow> \\<forall>x\\<in>set \\<lceil>\\<lceil>Rep_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e (X \\<tau>)\\<rceil>\\<rceil>. x \\<noteq> bot\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<tau> \\<Turnstile> \\<delta> X \\<Longrightarrow>\n    \\<forall>x\\<in>set \\<lceil>\\<lceil>Rep_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n  (X \\<tau>)\\<rceil>\\<rceil>.\n       x \\<noteq> \\<bottom>", "apply(insert Rep_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e [of \"X \\<tau>\"], simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<tau> \\<Turnstile> \\<delta> X;\n     Rep_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e (X \\<tau>) =\n     \\<bottom> \\<or>\n     Rep_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e (X \\<tau>) = null \\<or>\n     (\\<forall>x\\<in>set \\<lceil>\\<lceil>Rep_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n    (X \\<tau>)\\<rceil>\\<rceil>.\n         x \\<noteq> \\<bottom>)\\<rbrakk>\n    \\<Longrightarrow> \\<forall>x\\<in>set\n\\<lceil>\\<lceil>Rep_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                 (X \\<tau>)\\<rceil>\\<rceil>.\n                         x \\<noteq> \\<bottom>", "apply(auto simp: OclValid_def defined_def false_def true_def cp_def\n                 bot_fun_def bot_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e_def null_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e_def null_fun_def\n           split:if_split_asm)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<bottom> \\<in> set \\<lceil>\\<lceil>\\<bottom>\\<rceil>\\<rceil>;\n     X \\<tau> \\<noteq> Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e None;\n     X \\<tau> \\<noteq>\n     Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e \\<lfloor>None\\<rfloor>;\n     Rep_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e (X \\<tau>) =\n     \\<bottom>\\<rbrakk>\n    \\<Longrightarrow> False\n 2. \\<lbrakk>\\<bottom> \\<in> set \\<lceil>\\<lceil>null\\<rceil>\\<rceil>;\n     X \\<tau> \\<noteq> Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e None;\n     X \\<tau> \\<noteq>\n     Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e \\<lfloor>None\\<rfloor>;\n     Rep_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e (X \\<tau>) = null\\<rbrakk>\n    \\<Longrightarrow> False", "apply(erule contrapos_pp [of \"Rep_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e (X \\<tau>) = bot\"])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<bottom> \\<in> set \\<lceil>\\<lceil>\\<bottom>\\<rceil>\\<rceil>;\n     X \\<tau> \\<noteq> Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e None;\n     X \\<tau> \\<noteq>\n     Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e \\<lfloor>None\\<rfloor>;\n     \\<not> False\\<rbrakk>\n    \\<Longrightarrow> Rep_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                       (X \\<tau>) \\<noteq>\n                      \\<bottom>\n 2. \\<lbrakk>\\<bottom> \\<in> set \\<lceil>\\<lceil>null\\<rceil>\\<rceil>;\n     X \\<tau> \\<noteq> Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e None;\n     X \\<tau> \\<noteq>\n     Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e \\<lfloor>None\\<rfloor>;\n     Rep_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e (X \\<tau>) = null\\<rbrakk>\n    \\<Longrightarrow> False", "apply(subst Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e_inject[symmetric], rule Rep_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e, simp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<bottom> \\<in> set \\<lceil>\\<lceil>\\<bottom>\\<rceil>\\<rceil>;\n     X \\<tau> \\<noteq> Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e None;\n     X \\<tau> \\<noteq>\n     Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e \\<lfloor>None\\<rfloor>;\n     \\<not> False\\<rbrakk>\n    \\<Longrightarrow> Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                       (Rep_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                         (X \\<tau>)) \\<noteq>\n                      Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e \\<bottom>\n 2. \\<lbrakk>\\<bottom> \\<in> set \\<lceil>\\<lceil>null\\<rceil>\\<rceil>;\n     X \\<tau> \\<noteq> Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e None;\n     X \\<tau> \\<noteq>\n     Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e \\<lfloor>None\\<rfloor>;\n     Rep_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e (X \\<tau>) = null\\<rbrakk>\n    \\<Longrightarrow> False", "apply(simp add: Rep_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e_inverse bot_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e_def bot_option_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<bottom> \\<in> set \\<lceil>\\<lceil>null\\<rceil>\\<rceil>;\n     X \\<tau> \\<noteq> Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e None;\n     X \\<tau> \\<noteq>\n     Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e \\<lfloor>None\\<rfloor>;\n     Rep_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e (X \\<tau>) = null\\<rbrakk>\n    \\<Longrightarrow> False", "apply(erule contrapos_pp [of \"Rep_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e (X \\<tau>) = null\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<bottom> \\<in> set \\<lceil>\\<lceil>null\\<rceil>\\<rceil>;\n     X \\<tau> \\<noteq> Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e None;\n     X \\<tau> \\<noteq>\n     Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e \\<lfloor>None\\<rfloor>;\n     \\<not> False\\<rbrakk>\n    \\<Longrightarrow> Rep_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                       (X \\<tau>) \\<noteq>\n                      null", "apply(subst Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e_inject[symmetric], rule Rep_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e, simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<bottom> \\<in> set \\<lceil>\\<lceil>null\\<rceil>\\<rceil>;\n     X \\<tau> \\<noteq> Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e None;\n     X \\<tau> \\<noteq>\n     Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e \\<lfloor>None\\<rfloor>;\n     \\<not> False\\<rbrakk>\n    \\<Longrightarrow> Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                       (Rep_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                         (X \\<tau>)) \\<noteq>\n                      Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e null", "apply(simp add: Rep_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e_inverse  null_option_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<bottom> \\<in> set \\<lceil>\\<bottom>\\<rceil>;\n     X \\<tau> \\<noteq> Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e None;\n     X \\<tau> \\<noteq>\n     Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n      \\<lfloor>None\\<rfloor>\\<rbrakk>\n    \\<Longrightarrow> X \\<tau> \\<noteq>\n                      Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                       \\<lfloor>\\<bottom>\\<rfloor>", "by (simp add: bot_option_def)"], ["", "subsection\\<open>Definition: Strict Equality \\label{sec:seq-strict-equality}\\<close>"], ["", "text\\<open>After the part of foundational operations on sets, we detail here equality on sets.\nStrong equality is inherited from the OCL core, but we have to consider\nthe case of the strict equality. We decide to overload strict equality in the\nsame way we do for other value's in OCL:\\<close>"], ["", "overloading\n  StrictRefEq \\<equiv> \"StrictRefEq :: [('\\<AA>,'\\<alpha>::null)Sequence,('\\<AA>,'\\<alpha>::null)Sequence] \\<Rightarrow> ('\\<AA>)Boolean\"\nbegin"], ["", "definition StrictRefEq\\<^sub>S\\<^sub>e\\<^sub>q :\n    \"((x::('\\<AA>,'\\<alpha>::null)Sequence) \\<doteq> y) \\<equiv> (\\<lambda> \\<tau>. if (\\<upsilon> x) \\<tau> = true \\<tau> \\<and> (\\<upsilon> y) \\<tau> = true \\<tau>\n                                                then (x \\<triangleq> y)\\<tau>\n                                                else invalid \\<tau>)\""], ["", "end"], ["", "text_raw\\<open>\\isatagafp\\<close>"], ["", "text\\<open>One might object here that for the case of objects, this is an empty definition.\nThe answer is no, we will restrain later on states and objects such that any object\nhas its oid stored inside the object (so the ref, under which an object can be referenced\nin the store will represented in the object itself). For such well-formed stores that satisfy\nthis invariant (the WFF-invariant), the referential equality and the\nstrong equality---and therefore the strict equality on sequences in the sense above---coincides.\\<close>"], ["", "text_raw\\<open>\\endisatagafp\\<close>"], ["", "text\\<open>Property proof in terms of @{term \"profile_bin\\<^sub>S\\<^sub>t\\<^sub>r\\<^sub>o\\<^sub>n\\<^sub>g\\<^sub>E\\<^sub>q_\\<^sub>v_\\<^sub>v\"}\\<close>"], ["", "interpretation  StrictRefEq\\<^sub>S\\<^sub>e\\<^sub>q : profile_bin\\<^sub>S\\<^sub>t\\<^sub>r\\<^sub>o\\<^sub>n\\<^sub>g\\<^sub>E\\<^sub>q_\\<^sub>v_\\<^sub>v \"\\<lambda> x y. (x::('\\<AA>,'\\<alpha>::null)Sequence) \\<doteq> y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. profile_bin\\<^sub>S\\<^sub>t\\<^sub>r\\<^sub>o\\<^sub>n\\<^sub>g\\<^sub>E\\<^sub>q_\\<^sub>v_\\<^sub>v\n     (\\<doteq>)", "by unfold_locales (auto simp:  StrictRefEq\\<^sub>S\\<^sub>e\\<^sub>q)"], ["", "subsection\\<open>Constants: mtSequence\\<close>"], ["", "definition mtSequence ::\"('\\<AA>,'\\<alpha>::null) Sequence\"  (\"Sequence{}\")\nwhere     \"Sequence{} \\<equiv> (\\<lambda> \\<tau>.  Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e \\<lfloor>\\<lfloor>[]::'\\<alpha> list\\<rfloor>\\<rfloor> )\""], ["", "lemma mtSequence_defined[simp,code_unfold]:\"\\<delta>(Sequence{}) = true\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<delta> Sequence{} = true", "apply(rule ext, auto simp: mtSequence_def defined_def null_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e_def\n                           bot_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e_def bot_fun_def null_fun_def)"], ["proof (prove)\ngoal (2 subgoals):\n 1. Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n     \\<lfloor>\\<lfloor>[]\\<rfloor>\\<rfloor> =\n    Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e None \\<Longrightarrow>\n    False\n 2. Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n     \\<lfloor>\\<lfloor>[]\\<rfloor>\\<rfloor> =\n    Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n     \\<lfloor>None\\<rfloor> \\<Longrightarrow>\n    False", "by(simp_all add: Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e_inject bot_option_def null_option_def)"], ["", "lemma mtSequence_valid[simp,code_unfold]:\"\\<upsilon>(Sequence{}) = true\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<upsilon> Sequence{} = true", "apply(rule ext,auto simp: mtSequence_def valid_def null_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e_def\n                          bot_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e_def bot_fun_def null_fun_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n     \\<lfloor>\\<lfloor>[]\\<rfloor>\\<rfloor> =\n    Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e None \\<Longrightarrow>\n    False", "by(simp_all add: Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e_inject bot_option_def null_option_def)"], ["", "lemma mtSequence_rep_set: \"\\<lceil>\\<lceil>Rep_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e (Sequence{} \\<tau>)\\<rceil>\\<rceil> = []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lceil>\\<lceil>Rep_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                     (Sequence{} \\<tau>)\\<rceil>\\<rceil> =\n    []", "apply(simp add: mtSequence_def, subst Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e_inverse)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lfloor>\\<lfloor>[]\\<rfloor>\\<rfloor>\n    \\<in> {X. X = \\<bottom> \\<or>\n              X = null \\<or>\n              (\\<forall>x\\<in>set \\<lceil>\\<lceil>X\\<rceil>\\<rceil>.\n                  x \\<noteq> \\<bottom>)}\n 2. \\<lceil>\\<lceil>\\<lfloor>\\<lfloor>[]\\<rfloor>\\<rfloor>\\<rceil>\\<rceil> =\n    []", "by(simp add: bot_option_def)+"], ["", "text_raw\\<open>\\isatagafp\\<close>"], ["", "lemma [simp,code_unfold]: \"const Sequence{}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. const Sequence{}", "by(simp add: const_def mtSequence_def)"], ["", "text\\<open>Note that the collection types in OCL allow for null to be included;\n  however, there is the null-collection into which inclusion yields invalid.\\<close>"], ["", "text_raw\\<open>\\endisatagafp\\<close>"], ["", "subsection\\<open>Definition: Prepend\\<close>"], ["", "definition OclPrepend   :: \"[('\\<AA>,'\\<alpha>::null) Sequence,('\\<AA>,'\\<alpha>) val] \\<Rightarrow> ('\\<AA>,'\\<alpha>) Sequence\"\nwhere     \"OclPrepend x y = (\\<lambda> \\<tau>. if (\\<delta> x) \\<tau> = true \\<tau> \\<and> (\\<upsilon> y) \\<tau> = true \\<tau>\n                                    then Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e \\<lfloor>\\<lfloor> (y \\<tau>)#\\<lceil>\\<lceil>Rep_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e (x \\<tau>)\\<rceil>\\<rceil> \\<rfloor>\\<rfloor>\n                                    else invalid \\<tau> )\""], ["", "notation   OclPrepend   (\"_->prepend\\<^sub>S\\<^sub>e\\<^sub>q'(_')\")"], ["", "interpretation OclPrepend:profile_bin\\<^sub>d_\\<^sub>v OclPrepend \"\\<lambda>x y. Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\\<lfloor>\\<lfloor>y#\\<lceil>\\<lceil>Rep_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e x\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. profile_bin\\<^sub>d_\\<^sub>v OclPrepend\n     (\\<lambda>x y.\n         Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n          \\<lfloor>\\<lfloor>y #\n                            \\<lceil>\\<lceil>Rep_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n       x\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. profile_bin\\<^sub>d_\\<^sub>v OclPrepend\n     (\\<lambda>x y.\n         Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n          \\<lfloor>\\<lfloor>y #\n                            \\<lceil>\\<lceil>Rep_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n       x\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>)", "have A : \"\\<And>x y. x \\<noteq> bot \\<Longrightarrow> x \\<noteq> null \\<Longrightarrow>  y \\<noteq> bot  \\<Longrightarrow>\n           \\<lfloor>\\<lfloor>y#\\<lceil>\\<lceil>Rep_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e x\\<rceil>\\<rceil>\\<rfloor>\\<rfloor> \\<in> {X. X = bot \\<or> X = null \\<or> (\\<forall>x\\<in>set \\<lceil>\\<lceil>X\\<rceil>\\<rceil>. x \\<noteq> bot)}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<noteq> \\<bottom>; x \\<noteq> null;\n        y \\<noteq> \\<bottom>\\<rbrakk>\n       \\<Longrightarrow> \\<lfloor>\\<lfloor>y #\n     \\<lceil>\\<lceil>Rep_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                      x\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>\n                         \\<in> {X. X = \\<bottom> \\<or>\n                                   X = null \\<or>\n                                   (\\<forall>x\n       \\<in>set \\<lceil>\\<lceil>X\\<rceil>\\<rceil>.\n x \\<noteq> \\<bottom>)}", "by(auto intro!:Sequence_inv_lemma[simplified OclValid_def \n                         defined_def false_def true_def null_fun_def bot_fun_def])"], ["proof (state)\nthis:\n  \\<lbrakk>?x \\<noteq> \\<bottom>; ?x \\<noteq> null;\n   ?y \\<noteq> \\<bottom>\\<rbrakk>\n  \\<Longrightarrow> \\<lfloor>\\<lfloor>?y #\n\\<lceil>\\<lceil>Rep_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                 ?x\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>\n                    \\<in> {X. X = \\<bottom> \\<or>\n                              X = null \\<or>\n                              (\\<forall>x\n  \\<in>set \\<lceil>\\<lceil>X\\<rceil>\\<rceil>.\n                                  x \\<noteq> \\<bottom>)}\n\ngoal (1 subgoal):\n 1. profile_bin\\<^sub>d_\\<^sub>v OclPrepend\n     (\\<lambda>x y.\n         Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n          \\<lfloor>\\<lfloor>y #\n                            \\<lceil>\\<lceil>Rep_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n       x\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>)", "show \"profile_bin\\<^sub>d_\\<^sub>v OclPrepend (\\<lambda>x y. Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e \\<lfloor>\\<lfloor>y#\\<lceil>\\<lceil>Rep_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e x\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. profile_bin\\<^sub>d_\\<^sub>v OclPrepend\n     (\\<lambda>x y.\n         Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n          \\<lfloor>\\<lfloor>y #\n                            \\<lceil>\\<lceil>Rep_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n       x\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>)", "apply unfold_locales"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>X Y.\n       bin OclPrepend\n        (\\<lambda>x y.\n            Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n             \\<lfloor>\\<lfloor>y #\n                               \\<lceil>\\<lceil>Rep_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n          x\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>)\n        defined valid X Y\n 2. \\<And>x y.\n       \\<lbrakk>x \\<noteq> \\<bottom>; x \\<noteq> null;\n        y \\<noteq> \\<bottom>\\<rbrakk>\n       \\<Longrightarrow> Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                          \\<lfloor>\\<lfloor>y #\n      \\<lceil>\\<lceil>Rep_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                       x\\<rceil>\\<rceil>\\<rfloor>\\<rfloor> \\<noteq>\n                         \\<bottom> \\<and>\n                         Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                          \\<lfloor>\\<lfloor>y #\n      \\<lceil>\\<lceil>Rep_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                       x\\<rceil>\\<rceil>\\<rfloor>\\<rfloor> \\<noteq>\n                         null", "apply(auto simp:OclPrepend_def bot_option_def null_option_def null_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e_def \n               bot_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e_def)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<noteq>\n                Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e None;\n        x \\<noteq>\n        Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e \\<lfloor>None\\<rfloor>;\n        y \\<noteq> \\<bottom>;\n        Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n         \\<lfloor>\\<lfloor>y #\n                           \\<lceil>\\<lceil>Rep_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n      x\\<rceil>\\<rceil>\\<rfloor>\\<rfloor> =\n        Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e None\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>x y.\n       \\<lbrakk>x \\<noteq>\n                Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e None;\n        x \\<noteq>\n        Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e \\<lfloor>None\\<rfloor>;\n        y \\<noteq> \\<bottom>;\n        Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n         \\<lfloor>\\<lfloor>y #\n                           \\<lceil>\\<lceil>Rep_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n      x\\<rceil>\\<rceil>\\<rfloor>\\<rfloor> =\n        Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n         \\<lfloor>None\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> False", "apply(erule_tac Q=\"Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e \\<lfloor>\\<lfloor>y#\\<lceil>\\<lceil>Rep_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e x\\<rceil>\\<rceil>\\<rfloor>\\<rfloor> = Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e None\" \n                in contrapos_pp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<noteq>\n                Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e None;\n        x \\<noteq>\n        Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e \\<lfloor>None\\<rfloor>;\n        y \\<noteq> \\<bottom>; \\<not> False\\<rbrakk>\n       \\<Longrightarrow> Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                          \\<lfloor>\\<lfloor>y #\n      \\<lceil>\\<lceil>Rep_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                       x\\<rceil>\\<rceil>\\<rfloor>\\<rfloor> \\<noteq>\n                         Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e None\n 2. \\<And>x y.\n       \\<lbrakk>x \\<noteq>\n                Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e None;\n        x \\<noteq>\n        Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e \\<lfloor>None\\<rfloor>;\n        y \\<noteq> \\<bottom>;\n        Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n         \\<lfloor>\\<lfloor>y #\n                           \\<lceil>\\<lceil>Rep_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n      x\\<rceil>\\<rceil>\\<rfloor>\\<rfloor> =\n        Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n         \\<lfloor>None\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> False", "apply(subst Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e_inject [OF A])"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<noteq>\n                Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e None;\n        x \\<noteq>\n        Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e \\<lfloor>None\\<rfloor>;\n        y \\<noteq> \\<bottom>; \\<not> False\\<rbrakk>\n       \\<Longrightarrow> x \\<noteq> \\<bottom>\n 2. \\<And>x y.\n       \\<lbrakk>x \\<noteq>\n                Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e None;\n        x \\<noteq>\n        Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e \\<lfloor>None\\<rfloor>;\n        y \\<noteq> \\<bottom>; \\<not> False\\<rbrakk>\n       \\<Longrightarrow> x \\<noteq> null\n 3. \\<And>x y.\n       \\<lbrakk>x \\<noteq>\n                Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e None;\n        x \\<noteq>\n        Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e \\<lfloor>None\\<rfloor>;\n        y \\<noteq> \\<bottom>; \\<not> False\\<rbrakk>\n       \\<Longrightarrow> y \\<noteq> \\<bottom>\n 4. \\<And>x y.\n       \\<lbrakk>x \\<noteq>\n                Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e None;\n        x \\<noteq>\n        Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e \\<lfloor>None\\<rfloor>;\n        y \\<noteq> \\<bottom>; \\<not> False\\<rbrakk>\n       \\<Longrightarrow> None\n                         \\<in> {X. X = \\<bottom> \\<or>\n                                   X = null \\<or>\n                                   (\\<forall>x\n       \\<in>set \\<lceil>\\<lceil>X\\<rceil>\\<rceil>.\n x \\<noteq> \\<bottom>)}\n 5. \\<And>x y.\n       \\<lbrakk>x \\<noteq>\n                Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e None;\n        x \\<noteq>\n        Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e \\<lfloor>None\\<rfloor>;\n        y \\<noteq> \\<bottom>; \\<not> False\\<rbrakk>\n       \\<Longrightarrow> \\<lfloor>\\<lfloor>y #\n     \\<lceil>\\<lceil>Rep_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                      x\\<rceil>\\<rceil>\\<rfloor>\\<rfloor> \\<noteq>\n                         None\n 6. \\<And>x y.\n       \\<lbrakk>x \\<noteq>\n                Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e None;\n        x \\<noteq>\n        Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e \\<lfloor>None\\<rfloor>;\n        y \\<noteq> \\<bottom>;\n        Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n         \\<lfloor>\\<lfloor>y #\n                           \\<lceil>\\<lceil>Rep_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n      x\\<rceil>\\<rceil>\\<rfloor>\\<rfloor> =\n        Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n         \\<lfloor>None\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> False", "apply(simp_all add:  null_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e_def bot_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e_def bot_option_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<noteq>\n                Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e None;\n        x \\<noteq>\n        Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e \\<lfloor>None\\<rfloor>;\n        y \\<noteq> \\<bottom>;\n        Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n         \\<lfloor>\\<lfloor>y #\n                           \\<lceil>\\<lceil>Rep_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n      x\\<rceil>\\<rceil>\\<rfloor>\\<rfloor> =\n        Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n         \\<lfloor>None\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> False", "apply(erule_tac Q=\"Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\\<lfloor>\\<lfloor>y#\\<lceil>\\<lceil>Rep_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e x\\<rceil>\\<rceil>\\<rfloor>\\<rfloor> = Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e \\<lfloor>None\\<rfloor>\" \n               in contrapos_pp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<noteq>\n                Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e None;\n        x \\<noteq>\n        Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e \\<lfloor>None\\<rfloor>;\n        y \\<noteq> \\<bottom>; \\<not> False\\<rbrakk>\n       \\<Longrightarrow> Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                          \\<lfloor>\\<lfloor>y #\n      \\<lceil>\\<lceil>Rep_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                       x\\<rceil>\\<rceil>\\<rfloor>\\<rfloor> \\<noteq>\n                         Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                          \\<lfloor>None\\<rfloor>", "apply(subst Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e_inject[OF A])"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<noteq>\n                Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e None;\n        x \\<noteq>\n        Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e \\<lfloor>None\\<rfloor>;\n        y \\<noteq> \\<bottom>; \\<not> False\\<rbrakk>\n       \\<Longrightarrow> x \\<noteq> \\<bottom>\n 2. \\<And>x y.\n       \\<lbrakk>x \\<noteq>\n                Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e None;\n        x \\<noteq>\n        Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e \\<lfloor>None\\<rfloor>;\n        y \\<noteq> \\<bottom>; \\<not> False\\<rbrakk>\n       \\<Longrightarrow> x \\<noteq> null\n 3. \\<And>x y.\n       \\<lbrakk>x \\<noteq>\n                Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e None;\n        x \\<noteq>\n        Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e \\<lfloor>None\\<rfloor>;\n        y \\<noteq> \\<bottom>; \\<not> False\\<rbrakk>\n       \\<Longrightarrow> y \\<noteq> \\<bottom>\n 4. \\<And>x y.\n       \\<lbrakk>x \\<noteq>\n                Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e None;\n        x \\<noteq>\n        Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e \\<lfloor>None\\<rfloor>;\n        y \\<noteq> \\<bottom>; \\<not> False\\<rbrakk>\n       \\<Longrightarrow> \\<lfloor>None\\<rfloor>\n                         \\<in> {X. X = \\<bottom> \\<or>\n                                   X = null \\<or>\n                                   (\\<forall>x\n       \\<in>set \\<lceil>\\<lceil>X\\<rceil>\\<rceil>.\n x \\<noteq> \\<bottom>)}\n 5. \\<And>x y.\n       \\<lbrakk>x \\<noteq>\n                Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e None;\n        x \\<noteq>\n        Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e \\<lfloor>None\\<rfloor>;\n        y \\<noteq> \\<bottom>; \\<not> False\\<rbrakk>\n       \\<Longrightarrow> \\<lfloor>\\<lfloor>y #\n     \\<lceil>\\<lceil>Rep_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                      x\\<rceil>\\<rceil>\\<rfloor>\\<rfloor> \\<noteq>\n                         \\<lfloor>None\\<rfloor>", "apply(simp_all add:  null_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e_def bot_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e_def \n                                 bot_option_def null_option_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  profile_bin\\<^sub>d_\\<^sub>v OclPrepend\n   (\\<lambda>x y.\n       Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n        \\<lfloor>\\<lfloor>y #\n                          \\<lceil>\\<lceil>Rep_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n     x\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>)\n\ngoal:\nNo subgoals!", "qed"], ["", "syntax\n  \"_OclFinsequence\" :: \"args => ('\\<AA>,'a::null) Sequence\"    (\"Sequence{(_)}\")"], ["", "translations\n  \"Sequence{x, xs}\" == \"CONST OclPrepend (Sequence{xs}) x\"\n  \"Sequence{x}\"     == \"CONST OclPrepend (Sequence{}) x \""], ["", "subsection\\<open>Definition: Including\\<close>"], ["", "definition OclIncluding   :: \"[('\\<AA>,'\\<alpha>::null) Sequence,('\\<AA>,'\\<alpha>) val] \\<Rightarrow> ('\\<AA>,'\\<alpha>) Sequence\"\nwhere     \"OclIncluding x y = (\\<lambda> \\<tau>. if (\\<delta> x) \\<tau> = true \\<tau> \\<and> (\\<upsilon> y) \\<tau> = true \\<tau>\n                                    then Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e \\<lfloor>\\<lfloor> \\<lceil>\\<lceil>Rep_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e (x \\<tau>)\\<rceil>\\<rceil>  @ [y \\<tau>] \\<rfloor>\\<rfloor>\n                                    else invalid \\<tau> )\""], ["", "notation   OclIncluding   (\"_->including\\<^sub>S\\<^sub>e\\<^sub>q'(_')\")"], ["", "interpretation OclIncluding : \n               profile_bin\\<^sub>d_\\<^sub>v OclIncluding \"\\<lambda>x y. Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e x\\<rceil>\\<rceil> @ [y]\\<rfloor>\\<rfloor>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. profile_bin\\<^sub>d_\\<^sub>v OclIncluding\n     (\\<lambda>x y.\n         Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n          \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n       x\\<rceil>\\<rceil> @\n                            [y]\\<rfloor>\\<rfloor>)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. profile_bin\\<^sub>d_\\<^sub>v OclIncluding\n     (\\<lambda>x y.\n         Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n          \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n       x\\<rceil>\\<rceil> @\n                            [y]\\<rfloor>\\<rfloor>)", "have A : \"\\<And>x y. x \\<noteq> bot \\<Longrightarrow> x \\<noteq> null \\<Longrightarrow>  y \\<noteq> bot  \\<Longrightarrow>\n           \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e x\\<rceil>\\<rceil> @ [y]\\<rfloor>\\<rfloor> \\<in> {X. X = bot \\<or> X = null \\<or> (\\<forall>x\\<in>set \\<lceil>\\<lceil>X\\<rceil>\\<rceil>. x \\<noteq> bot)}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<noteq> \\<bottom>; x \\<noteq> null;\n        y \\<noteq> \\<bottom>\\<rbrakk>\n       \\<Longrightarrow> \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                      x\\<rceil>\\<rceil> @\n     [y]\\<rfloor>\\<rfloor>\n                         \\<in> {X. X = \\<bottom> \\<or>\n                                   X = null \\<or>\n                                   (\\<forall>x\n       \\<in>set \\<lceil>\\<lceil>X\\<rceil>\\<rceil>.\n x \\<noteq> \\<bottom>)}", "by(auto intro!:Sequence_inv_lemma[simplified OclValid_def \n                         defined_def false_def true_def null_fun_def bot_fun_def])"], ["proof (state)\nthis:\n  \\<lbrakk>?x \\<noteq> \\<bottom>; ?x \\<noteq> null;\n   ?y \\<noteq> \\<bottom>\\<rbrakk>\n  \\<Longrightarrow> \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                 ?x\\<rceil>\\<rceil> @\n[?y]\\<rfloor>\\<rfloor>\n                    \\<in> {X. X = \\<bottom> \\<or>\n                              X = null \\<or>\n                              (\\<forall>x\n  \\<in>set \\<lceil>\\<lceil>X\\<rceil>\\<rceil>.\n                                  x \\<noteq> \\<bottom>)}\n\ngoal (1 subgoal):\n 1. profile_bin\\<^sub>d_\\<^sub>v OclIncluding\n     (\\<lambda>x y.\n         Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n          \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n       x\\<rceil>\\<rceil> @\n                            [y]\\<rfloor>\\<rfloor>)", "show \"profile_bin\\<^sub>d_\\<^sub>v OclIncluding (\\<lambda>x y. Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e x\\<rceil>\\<rceil> @ [y]\\<rfloor>\\<rfloor>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. profile_bin\\<^sub>d_\\<^sub>v OclIncluding\n     (\\<lambda>x y.\n         Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n          \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n       x\\<rceil>\\<rceil> @\n                            [y]\\<rfloor>\\<rfloor>)", "apply unfold_locales"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>X Y.\n       bin OclIncluding\n        (\\<lambda>x y.\n            Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n             \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n          x\\<rceil>\\<rceil> @\n                               [y]\\<rfloor>\\<rfloor>)\n        defined valid X Y\n 2. \\<And>x y.\n       \\<lbrakk>x \\<noteq> \\<bottom>; x \\<noteq> null;\n        y \\<noteq> \\<bottom>\\<rbrakk>\n       \\<Longrightarrow> Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                          \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                       x\\<rceil>\\<rceil> @\n      [y]\\<rfloor>\\<rfloor> \\<noteq>\n                         \\<bottom> \\<and>\n                         Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                          \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                       x\\<rceil>\\<rceil> @\n      [y]\\<rfloor>\\<rfloor> \\<noteq>\n                         null", "apply(auto simp:OclIncluding_def bot_option_def null_option_def null_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e_def \n               bot_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e_def)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<noteq>\n                Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e None;\n        x \\<noteq>\n        Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e \\<lfloor>None\\<rfloor>;\n        y \\<noteq> \\<bottom>;\n        Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n         \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n      x\\<rceil>\\<rceil> @\n                           [y]\\<rfloor>\\<rfloor> =\n        Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e None\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>x y.\n       \\<lbrakk>x \\<noteq>\n                Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e None;\n        x \\<noteq>\n        Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e \\<lfloor>None\\<rfloor>;\n        y \\<noteq> \\<bottom>;\n        Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n         \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n      x\\<rceil>\\<rceil> @\n                           [y]\\<rfloor>\\<rfloor> =\n        Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n         \\<lfloor>None\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> False", "apply(erule_tac Q=\"Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e x\\<rceil>\\<rceil> @ [y]\\<rfloor>\\<rfloor> = Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e None\" \n                in contrapos_pp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<noteq>\n                Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e None;\n        x \\<noteq>\n        Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e \\<lfloor>None\\<rfloor>;\n        y \\<noteq> \\<bottom>; \\<not> False\\<rbrakk>\n       \\<Longrightarrow> Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                          \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                       x\\<rceil>\\<rceil> @\n      [y]\\<rfloor>\\<rfloor> \\<noteq>\n                         Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e None\n 2. \\<And>x y.\n       \\<lbrakk>x \\<noteq>\n                Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e None;\n        x \\<noteq>\n        Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e \\<lfloor>None\\<rfloor>;\n        y \\<noteq> \\<bottom>;\n        Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n         \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n      x\\<rceil>\\<rceil> @\n                           [y]\\<rfloor>\\<rfloor> =\n        Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n         \\<lfloor>None\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> False", "apply(subst Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e_inject [OF A])"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<noteq>\n                Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e None;\n        x \\<noteq>\n        Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e \\<lfloor>None\\<rfloor>;\n        y \\<noteq> \\<bottom>; \\<not> False\\<rbrakk>\n       \\<Longrightarrow> x \\<noteq> \\<bottom>\n 2. \\<And>x y.\n       \\<lbrakk>x \\<noteq>\n                Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e None;\n        x \\<noteq>\n        Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e \\<lfloor>None\\<rfloor>;\n        y \\<noteq> \\<bottom>; \\<not> False\\<rbrakk>\n       \\<Longrightarrow> x \\<noteq> null\n 3. \\<And>x y.\n       \\<lbrakk>x \\<noteq>\n                Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e None;\n        x \\<noteq>\n        Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e \\<lfloor>None\\<rfloor>;\n        y \\<noteq> \\<bottom>; \\<not> False\\<rbrakk>\n       \\<Longrightarrow> y \\<noteq> \\<bottom>\n 4. \\<And>x y.\n       \\<lbrakk>x \\<noteq>\n                Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e None;\n        x \\<noteq>\n        Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e \\<lfloor>None\\<rfloor>;\n        y \\<noteq> \\<bottom>; \\<not> False\\<rbrakk>\n       \\<Longrightarrow> None\n                         \\<in> {X. X = \\<bottom> \\<or>\n                                   X = null \\<or>\n                                   (\\<forall>x\n       \\<in>set \\<lceil>\\<lceil>X\\<rceil>\\<rceil>.\n x \\<noteq> \\<bottom>)}\n 5. \\<And>x y.\n       \\<lbrakk>x \\<noteq>\n                Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e None;\n        x \\<noteq>\n        Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e \\<lfloor>None\\<rfloor>;\n        y \\<noteq> \\<bottom>; \\<not> False\\<rbrakk>\n       \\<Longrightarrow> \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                      x\\<rceil>\\<rceil> @\n     [y]\\<rfloor>\\<rfloor> \\<noteq>\n                         None\n 6. \\<And>x y.\n       \\<lbrakk>x \\<noteq>\n                Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e None;\n        x \\<noteq>\n        Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e \\<lfloor>None\\<rfloor>;\n        y \\<noteq> \\<bottom>;\n        Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n         \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n      x\\<rceil>\\<rceil> @\n                           [y]\\<rfloor>\\<rfloor> =\n        Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n         \\<lfloor>None\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> False", "apply(simp_all add:  null_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e_def bot_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e_def bot_option_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<noteq>\n                Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e None;\n        x \\<noteq>\n        Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e \\<lfloor>None\\<rfloor>;\n        y \\<noteq> \\<bottom>;\n        Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n         \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n      x\\<rceil>\\<rceil> @\n                           [y]\\<rfloor>\\<rfloor> =\n        Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n         \\<lfloor>None\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> False", "apply(erule_tac Q=\"Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e x\\<rceil>\\<rceil> @ [y]\\<rfloor>\\<rfloor> = Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e \\<lfloor>None\\<rfloor>\" \n               in contrapos_pp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<noteq>\n                Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e None;\n        x \\<noteq>\n        Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e \\<lfloor>None\\<rfloor>;\n        y \\<noteq> \\<bottom>; \\<not> False\\<rbrakk>\n       \\<Longrightarrow> Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                          \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                       x\\<rceil>\\<rceil> @\n      [y]\\<rfloor>\\<rfloor> \\<noteq>\n                         Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                          \\<lfloor>None\\<rfloor>", "apply(subst Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e_inject[OF A])"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<noteq>\n                Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e None;\n        x \\<noteq>\n        Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e \\<lfloor>None\\<rfloor>;\n        y \\<noteq> \\<bottom>; \\<not> False\\<rbrakk>\n       \\<Longrightarrow> x \\<noteq> \\<bottom>\n 2. \\<And>x y.\n       \\<lbrakk>x \\<noteq>\n                Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e None;\n        x \\<noteq>\n        Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e \\<lfloor>None\\<rfloor>;\n        y \\<noteq> \\<bottom>; \\<not> False\\<rbrakk>\n       \\<Longrightarrow> x \\<noteq> null\n 3. \\<And>x y.\n       \\<lbrakk>x \\<noteq>\n                Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e None;\n        x \\<noteq>\n        Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e \\<lfloor>None\\<rfloor>;\n        y \\<noteq> \\<bottom>; \\<not> False\\<rbrakk>\n       \\<Longrightarrow> y \\<noteq> \\<bottom>\n 4. \\<And>x y.\n       \\<lbrakk>x \\<noteq>\n                Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e None;\n        x \\<noteq>\n        Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e \\<lfloor>None\\<rfloor>;\n        y \\<noteq> \\<bottom>; \\<not> False\\<rbrakk>\n       \\<Longrightarrow> \\<lfloor>None\\<rfloor>\n                         \\<in> {X. X = \\<bottom> \\<or>\n                                   X = null \\<or>\n                                   (\\<forall>x\n       \\<in>set \\<lceil>\\<lceil>X\\<rceil>\\<rceil>.\n x \\<noteq> \\<bottom>)}\n 5. \\<And>x y.\n       \\<lbrakk>x \\<noteq>\n                Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e None;\n        x \\<noteq>\n        Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e \\<lfloor>None\\<rfloor>;\n        y \\<noteq> \\<bottom>; \\<not> False\\<rbrakk>\n       \\<Longrightarrow> \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                      x\\<rceil>\\<rceil> @\n     [y]\\<rfloor>\\<rfloor> \\<noteq>\n                         \\<lfloor>None\\<rfloor>", "apply(simp_all add:  null_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e_def bot_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e_def bot_option_def null_option_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  profile_bin\\<^sub>d_\\<^sub>v OclIncluding\n   (\\<lambda>x y.\n       Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n        \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n     x\\<rceil>\\<rceil> @\n                          [y]\\<rfloor>\\<rfloor>)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma [simp,code_unfold] : \"(Sequence{}->including\\<^sub>S\\<^sub>e\\<^sub>q(a)) = (Sequence{}->prepend\\<^sub>S\\<^sub>e\\<^sub>q(a))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Sequence{}->including\\<^sub>S\\<^sub>e\\<^sub>q(a) = Sequence{a}", "apply(simp add: OclIncluding_def OclPrepend_def mtSequence_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>\\<tau>.\n        if (\\<delta> (\\<lambda>\\<tau>.\n                         Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                          \\<lfloor>\\<lfloor>[]\\<rfloor>\\<rfloor>))\n            \\<tau> =\n           true \\<tau> \\<and>\n           (\\<upsilon> a) \\<tau> = true \\<tau>\n        then Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n              \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n           (Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n             \\<lfloor>\\<lfloor>[]\\<rfloor>\\<rfloor>)\\<rceil>\\<rceil> @\n                                [a \\<tau>]\\<rfloor>\\<rfloor>\n        else invalid \\<tau>) =\n    (\\<lambda>\\<tau>.\n        if (\\<delta> (\\<lambda>\\<tau>.\n                         Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                          \\<lfloor>\\<lfloor>[]\\<rfloor>\\<rfloor>))\n            \\<tau> =\n           true \\<tau> \\<and>\n           (\\<upsilon> a) \\<tau> = true \\<tau>\n        then Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n              \\<lfloor>\\<lfloor>a \\<tau> #\n                                \\<lceil>\\<lceil>Rep_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n           (Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n             \\<lfloor>\\<lfloor>[]\\<rfloor>\\<rfloor>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>\n        else invalid \\<tau>)", "apply(subst (1 2) Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e_inverse, simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>\\<tau>.\n        if (\\<delta> (\\<lambda>\\<tau>.\n                         Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                          \\<lfloor>\\<lfloor>[]\\<rfloor>\\<rfloor>))\n            \\<tau> =\n           true \\<tau> \\<and>\n           (\\<upsilon> a) \\<tau> = true \\<tau>\n        then Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n              \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>\\<lfloor>\\<lfloor>[]\\<rfloor>\\<rfloor>\\<rceil>\\<rceil> @\n                                [a \\<tau>]\\<rfloor>\\<rfloor>\n        else invalid \\<tau>) =\n    (\\<lambda>\\<tau>.\n        if (\\<delta> (\\<lambda>\\<tau>.\n                         Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                          \\<lfloor>\\<lfloor>[]\\<rfloor>\\<rfloor>))\n            \\<tau> =\n           true \\<tau> \\<and>\n           (\\<upsilon> a) \\<tau> = true \\<tau>\n        then Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n              \\<lfloor>\\<lfloor>a \\<tau> #\n                                \\<lceil>\\<lceil>\\<lfloor>\\<lfloor>[]\\<rfloor>\\<rfloor>\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>\n        else invalid \\<tau>)", "by(metis drop.simps append_Nil)"], ["", "lemma [simp,code_unfold] : \"((S->prepend\\<^sub>S\\<^sub>e\\<^sub>q(a))->including\\<^sub>S\\<^sub>e\\<^sub>q(b)) = ((S->including\\<^sub>S\\<^sub>e\\<^sub>q(b))->prepend\\<^sub>S\\<^sub>e\\<^sub>q(a))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. S->prepend\\<^sub>S\\<^sub>e\\<^sub>q(a)->including\\<^sub>S\\<^sub>e\\<^sub>q(b) =\n    S->including\\<^sub>S\\<^sub>e\\<^sub>q(b)->prepend\\<^sub>S\\<^sub>e\\<^sub>q(a)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. S->prepend\\<^sub>S\\<^sub>e\\<^sub>q(a)->including\\<^sub>S\\<^sub>e\\<^sub>q(b) =\n    S->including\\<^sub>S\\<^sub>e\\<^sub>q(b)->prepend\\<^sub>S\\<^sub>e\\<^sub>q(a)", "have A: \"\\<And>S b \\<tau>. S \\<noteq> \\<bottom> \\<Longrightarrow> S \\<noteq> null \\<Longrightarrow> b \\<noteq> \\<bottom>  \\<Longrightarrow>\n                   \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e S\\<rceil>\\<rceil> @ [b]\\<rfloor>\\<rfloor> \\<in> {X. X = bot \\<or> X = null \\<or> (\\<forall>x\\<in>set \\<lceil>\\<lceil>X\\<rceil>\\<rceil>. x \\<noteq> \\<bottom>)}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>S b \\<tau>.\n       \\<lbrakk>S \\<noteq> \\<bottom>; S \\<noteq> null;\n        b \\<noteq> \\<bottom>\\<rbrakk>\n       \\<Longrightarrow> \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                      S\\<rceil>\\<rceil> @\n     [b]\\<rfloor>\\<rfloor>\n                         \\<in> {X. X = \\<bottom> \\<or>\n                                   X = null \\<or>\n                                   (\\<forall>x\n       \\<in>set \\<lceil>\\<lceil>X\\<rceil>\\<rceil>.\n x \\<noteq> \\<bottom>)}", "by(auto intro!:Sequence_inv_lemma[simplified OclValid_def \n                                        defined_def false_def true_def null_fun_def bot_fun_def])"], ["proof (state)\nthis:\n  \\<lbrakk>?S \\<noteq> \\<bottom>; ?S \\<noteq> null;\n   ?b \\<noteq> \\<bottom>\\<rbrakk>\n  \\<Longrightarrow> \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                 ?S\\<rceil>\\<rceil> @\n[?b]\\<rfloor>\\<rfloor>\n                    \\<in> {X. X = \\<bottom> \\<or>\n                              X = null \\<or>\n                              (\\<forall>x\n  \\<in>set \\<lceil>\\<lceil>X\\<rceil>\\<rceil>.\n                                  x \\<noteq> \\<bottom>)}\n\ngoal (1 subgoal):\n 1. S->prepend\\<^sub>S\\<^sub>e\\<^sub>q(a)->including\\<^sub>S\\<^sub>e\\<^sub>q(b) =\n    S->including\\<^sub>S\\<^sub>e\\<^sub>q(b)->prepend\\<^sub>S\\<^sub>e\\<^sub>q(a)", "have B: \"\\<And>S a \\<tau>. S \\<noteq> \\<bottom> \\<Longrightarrow> S \\<noteq> null \\<Longrightarrow> a \\<noteq> \\<bottom>  \\<Longrightarrow>\n                   \\<lfloor>\\<lfloor>a # \\<lceil>\\<lceil>Rep_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e S\\<rceil>\\<rceil>\\<rfloor>\\<rfloor> \\<in> {X. X = bot \\<or> X = null \\<or> (\\<forall>x\\<in>set \\<lceil>\\<lceil>X\\<rceil>\\<rceil>. x \\<noteq> \\<bottom>)}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>S a \\<tau>.\n       \\<lbrakk>S \\<noteq> \\<bottom>; S \\<noteq> null;\n        a \\<noteq> \\<bottom>\\<rbrakk>\n       \\<Longrightarrow> \\<lfloor>\\<lfloor>a #\n     \\<lceil>\\<lceil>Rep_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                      S\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>\n                         \\<in> {X. X = \\<bottom> \\<or>\n                                   X = null \\<or>\n                                   (\\<forall>x\n       \\<in>set \\<lceil>\\<lceil>X\\<rceil>\\<rceil>.\n x \\<noteq> \\<bottom>)}", "by(auto intro!:Sequence_inv_lemma[simplified OclValid_def \n                                        defined_def false_def true_def null_fun_def bot_fun_def])"], ["proof (state)\nthis:\n  \\<lbrakk>?S1 \\<noteq> \\<bottom>; ?S1 \\<noteq> null;\n   ?a1 \\<noteq> \\<bottom>\\<rbrakk>\n  \\<Longrightarrow> \\<lfloor>\\<lfloor>?a1 #\n\\<lceil>\\<lceil>Rep_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                 ?S1\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>\n                    \\<in> {X. X = \\<bottom> \\<or>\n                              X = null \\<or>\n                              (\\<forall>x\n  \\<in>set \\<lceil>\\<lceil>X\\<rceil>\\<rceil>.\n                                  x \\<noteq> \\<bottom>)}\n\ngoal (1 subgoal):\n 1. S->prepend\\<^sub>S\\<^sub>e\\<^sub>q(a)->including\\<^sub>S\\<^sub>e\\<^sub>q(b) =\n    S->including\\<^sub>S\\<^sub>e\\<^sub>q(b)->prepend\\<^sub>S\\<^sub>e\\<^sub>q(a)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. S->prepend\\<^sub>S\\<^sub>e\\<^sub>q(a)->including\\<^sub>S\\<^sub>e\\<^sub>q(b) =\n    S->including\\<^sub>S\\<^sub>e\\<^sub>q(b)->prepend\\<^sub>S\\<^sub>e\\<^sub>q(a)", "apply(simp add: OclIncluding_def OclPrepend_def mtSequence_def, rule ext)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<tau>.\n       (if (\\<delta> (\\<lambda>\\<tau>.\n                         if (\\<delta> S) \\<tau> = true \\<tau> \\<and>\n                            (\\<upsilon> a) \\<tau> = true \\<tau>\n                         then Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                               \\<lfloor>\\<lfloor>a \\<tau> #\n           \\<lceil>\\<lceil>Rep_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                            (S \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>\n                         else invalid \\<tau>))\n            \\<tau> =\n           true \\<tau> \\<and>\n           (\\<upsilon> b) \\<tau> = true \\<tau>\n        then Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n              \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n           (if (\\<delta> S) \\<tau> = true \\<tau> \\<and>\n               (\\<upsilon> a) \\<tau> = true \\<tau>\n            then Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                  \\<lfloor>\\<lfloor>a \\<tau> #\n                                    \\<lceil>\\<lceil>Rep_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n               (S \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>\n            else invalid \\<tau>)\\<rceil>\\<rceil> @\n                                [b \\<tau>]\\<rfloor>\\<rfloor>\n        else invalid \\<tau>) =\n       (if (\\<delta> (\\<lambda>\\<tau>.\n                         if (\\<delta> S) \\<tau> = true \\<tau> \\<and>\n                            (\\<upsilon> b) \\<tau> = true \\<tau>\n                         then Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                               \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                            (S \\<tau>)\\<rceil>\\<rceil> @\n           [b \\<tau>]\\<rfloor>\\<rfloor>\n                         else invalid \\<tau>))\n            \\<tau> =\n           true \\<tau> \\<and>\n           (\\<upsilon> a) \\<tau> = true \\<tau>\n        then Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n              \\<lfloor>\\<lfloor>a \\<tau> #\n                                \\<lceil>\\<lceil>Rep_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n           (if (\\<delta> S) \\<tau> = true \\<tau> \\<and>\n               (\\<upsilon> b) \\<tau> = true \\<tau>\n            then Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                  \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n               (S \\<tau>)\\<rceil>\\<rceil> @\n                                    [b \\<tau>]\\<rfloor>\\<rfloor>\n            else invalid \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>\n        else invalid \\<tau>)", "apply(subst (2 5) cp_defined, simp split:)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<tau>.\n       ((\\<upsilon> b) \\<tau> = true \\<tau> \\<longrightarrow>\n        ((\\<upsilon> a) \\<tau> = true \\<tau> \\<longrightarrow>\n         ((\\<delta> (\\<lambda>_.\n                        Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                         \\<lfloor>\\<lfloor>a \\<tau> #\n     \\<lceil>\\<lceil>Rep_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                      (S \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>))\n           \\<tau> =\n          true \\<tau> \\<longrightarrow>\n          ((\\<delta> S) \\<tau> = true \\<tau> \\<longrightarrow>\n           ((\\<delta> (\\<lambda>_.\n                          Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                           \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                        (S \\<tau>)\\<rceil>\\<rceil> @\n       [b \\<tau>]\\<rfloor>\\<rfloor>))\n             \\<tau> =\n            true \\<tau> \\<longrightarrow>\n            Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n             \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n          (Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n            \\<lfloor>\\<lfloor>a \\<tau> #\n                              \\<lceil>\\<lceil>Rep_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n         (S \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>)\\<rceil>\\<rceil> @\n                               [b \\<tau>]\\<rfloor>\\<rfloor> =\n            Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n             \\<lfloor>\\<lfloor>a \\<tau> #\n                               \\<lceil>\\<lceil>Rep_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n          (Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n            \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n         (S \\<tau>)\\<rceil>\\<rceil> @\n                              [b \\<tau>]\\<rfloor>\\<rfloor>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>) \\<and>\n           ((\\<delta> (\\<lambda>_.\n                          Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                           \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                        (S \\<tau>)\\<rceil>\\<rceil> @\n       [b \\<tau>]\\<rfloor>\\<rfloor>))\n             \\<tau> \\<noteq>\n            true \\<tau> \\<longrightarrow>\n            Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n             \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n          (Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n            \\<lfloor>\\<lfloor>a \\<tau> #\n                              \\<lceil>\\<lceil>Rep_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n         (S \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>)\\<rceil>\\<rceil> @\n                               [b \\<tau>]\\<rfloor>\\<rfloor> =\n            invalid \\<tau>)) \\<and>\n          ((\\<delta> S) \\<tau> \\<noteq> true \\<tau> \\<longrightarrow>\n           (\\<delta> (\\<lambda>_. invalid \\<tau>)) \\<tau> =\n           true \\<tau> \\<longrightarrow>\n           Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n            \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n         (invalid \\<tau>)\\<rceil>\\<rceil> @\n                              [b \\<tau>]\\<rfloor>\\<rfloor> =\n           Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n            \\<lfloor>\\<lfloor>a \\<tau> #\n                              \\<lceil>\\<lceil>Rep_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n         (invalid \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>)) \\<and>\n         ((\\<delta> (\\<lambda>_.\n                        Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                         \\<lfloor>\\<lfloor>a \\<tau> #\n     \\<lceil>\\<lceil>Rep_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                      (S \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>))\n           \\<tau> \\<noteq>\n          true \\<tau> \\<longrightarrow>\n          ((\\<delta> S) \\<tau> = true \\<tau> \\<longrightarrow>\n           (\\<delta> (\\<lambda>_.\n                         Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                          \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                       (S \\<tau>)\\<rceil>\\<rceil> @\n      [b \\<tau>]\\<rfloor>\\<rfloor>))\n            \\<tau> =\n           true \\<tau> \\<longrightarrow>\n           invalid \\<tau> =\n           Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n            \\<lfloor>\\<lfloor>a \\<tau> #\n                              \\<lceil>\\<lceil>Rep_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n         (Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n           \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n        (S \\<tau>)\\<rceil>\\<rceil> @\n                             [b \\<tau>]\\<rfloor>\\<rfloor>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>) \\<and>\n          ((\\<delta> S) \\<tau> \\<noteq> true \\<tau> \\<longrightarrow>\n           (\\<delta> (\\<lambda>_. invalid \\<tau>)) \\<tau> =\n           true \\<tau> \\<longrightarrow>\n           Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n            \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n         (invalid \\<tau>)\\<rceil>\\<rceil> @\n                              [b \\<tau>]\\<rfloor>\\<rfloor> =\n           Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n            \\<lfloor>\\<lfloor>a \\<tau> #\n                              \\<lceil>\\<lceil>Rep_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n         (invalid \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>))) \\<and>\n        ((\\<upsilon> a) \\<tau> \\<noteq> true \\<tau> \\<longrightarrow>\n         (\\<delta> (\\<lambda>_. invalid \\<tau>)) \\<tau> =\n         true \\<tau> \\<longrightarrow>\n         Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n          \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n       (invalid \\<tau>)\\<rceil>\\<rceil> @\n                            [b \\<tau>]\\<rfloor>\\<rfloor> =\n         invalid \\<tau>)) \\<and>\n       ((\\<upsilon> b) \\<tau> \\<noteq> true \\<tau> \\<longrightarrow>\n        (\\<upsilon> a) \\<tau> = true \\<tau> \\<longrightarrow>\n        (\\<delta> (\\<lambda>_. invalid \\<tau>)) \\<tau> =\n        true \\<tau> \\<longrightarrow>\n        invalid \\<tau> =\n        Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n         \\<lfloor>\\<lfloor>a \\<tau> #\n                           \\<lceil>\\<lceil>Rep_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n      (invalid \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>)", "apply(intro conjI impI)"], ["proof (prove)\ngoal (7 subgoals):\n 1. \\<And>\\<tau>.\n       \\<lbrakk>(\\<upsilon> b) \\<tau> = true \\<tau>;\n        (\\<upsilon> a) \\<tau> = true \\<tau>;\n        (\\<delta> (\\<lambda>_.\n                      Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                       \\<lfloor>\\<lfloor>a \\<tau> #\n   \\<lceil>\\<lceil>Rep_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                    (S \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>))\n         \\<tau> =\n        true \\<tau>;\n        (\\<delta> S) \\<tau> = true \\<tau>;\n        (\\<delta> (\\<lambda>_.\n                      Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                       \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                    (S \\<tau>)\\<rceil>\\<rceil> @\n   [b \\<tau>]\\<rfloor>\\<rfloor>))\n         \\<tau> =\n        true \\<tau>\\<rbrakk>\n       \\<Longrightarrow> Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                          \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                       (Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                         \\<lfloor>\\<lfloor>a \\<tau> #\n     \\<lceil>\\<lceil>Rep_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                      (S \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>)\\<rceil>\\<rceil> @\n      [b \\<tau>]\\<rfloor>\\<rfloor> =\n                         Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                          \\<lfloor>\\<lfloor>a \\<tau> #\n      \\<lceil>\\<lceil>Rep_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                       (Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                         \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                      (S \\<tau>)\\<rceil>\\<rceil> @\n     [b \\<tau>]\\<rfloor>\\<rfloor>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>\n 2. \\<And>\\<tau>.\n       \\<lbrakk>(\\<upsilon> b) \\<tau> = true \\<tau>;\n        (\\<upsilon> a) \\<tau> = true \\<tau>;\n        (\\<delta> (\\<lambda>_.\n                      Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                       \\<lfloor>\\<lfloor>a \\<tau> #\n   \\<lceil>\\<lceil>Rep_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                    (S \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>))\n         \\<tau> =\n        true \\<tau>;\n        (\\<delta> S) \\<tau> = true \\<tau>;\n        (\\<delta> (\\<lambda>_.\n                      Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                       \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                    (S \\<tau>)\\<rceil>\\<rceil> @\n   [b \\<tau>]\\<rfloor>\\<rfloor>))\n         \\<tau> \\<noteq>\n        true \\<tau>\\<rbrakk>\n       \\<Longrightarrow> Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                          \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                       (Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                         \\<lfloor>\\<lfloor>a \\<tau> #\n     \\<lceil>\\<lceil>Rep_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                      (S \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>)\\<rceil>\\<rceil> @\n      [b \\<tau>]\\<rfloor>\\<rfloor> =\n                         invalid \\<tau>\n 3. \\<And>\\<tau>.\n       \\<lbrakk>(\\<upsilon> b) \\<tau> = true \\<tau>;\n        (\\<upsilon> a) \\<tau> = true \\<tau>;\n        (\\<delta> (\\<lambda>_.\n                      Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                       \\<lfloor>\\<lfloor>a \\<tau> #\n   \\<lceil>\\<lceil>Rep_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                    (S \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>))\n         \\<tau> =\n        true \\<tau>;\n        (\\<delta> S) \\<tau> \\<noteq> true \\<tau>;\n        (\\<delta> (\\<lambda>_. invalid \\<tau>)) \\<tau> =\n        true \\<tau>\\<rbrakk>\n       \\<Longrightarrow> Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                          \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                       (invalid \\<tau>)\\<rceil>\\<rceil> @\n      [b \\<tau>]\\<rfloor>\\<rfloor> =\n                         Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                          \\<lfloor>\\<lfloor>a \\<tau> #\n      \\<lceil>\\<lceil>Rep_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                       (invalid \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>\n 4. \\<And>\\<tau>.\n       \\<lbrakk>(\\<upsilon> b) \\<tau> = true \\<tau>;\n        (\\<upsilon> a) \\<tau> = true \\<tau>;\n        (\\<delta> (\\<lambda>_.\n                      Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                       \\<lfloor>\\<lfloor>a \\<tau> #\n   \\<lceil>\\<lceil>Rep_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                    (S \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>))\n         \\<tau> \\<noteq>\n        true \\<tau>;\n        (\\<delta> S) \\<tau> = true \\<tau>;\n        (\\<delta> (\\<lambda>_.\n                      Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                       \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                    (S \\<tau>)\\<rceil>\\<rceil> @\n   [b \\<tau>]\\<rfloor>\\<rfloor>))\n         \\<tau> =\n        true \\<tau>\\<rbrakk>\n       \\<Longrightarrow> invalid \\<tau> =\n                         Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                          \\<lfloor>\\<lfloor>a \\<tau> #\n      \\<lceil>\\<lceil>Rep_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                       (Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                         \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                      (S \\<tau>)\\<rceil>\\<rceil> @\n     [b \\<tau>]\\<rfloor>\\<rfloor>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>\n 5. \\<And>\\<tau>.\n       \\<lbrakk>(\\<upsilon> b) \\<tau> = true \\<tau>;\n        (\\<upsilon> a) \\<tau> = true \\<tau>;\n        (\\<delta> (\\<lambda>_.\n                      Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                       \\<lfloor>\\<lfloor>a \\<tau> #\n   \\<lceil>\\<lceil>Rep_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                    (S \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>))\n         \\<tau> \\<noteq>\n        true \\<tau>;\n        (\\<delta> S) \\<tau> \\<noteq> true \\<tau>;\n        (\\<delta> (\\<lambda>_. invalid \\<tau>)) \\<tau> =\n        true \\<tau>\\<rbrakk>\n       \\<Longrightarrow> Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                          \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                       (invalid \\<tau>)\\<rceil>\\<rceil> @\n      [b \\<tau>]\\<rfloor>\\<rfloor> =\n                         Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                          \\<lfloor>\\<lfloor>a \\<tau> #\n      \\<lceil>\\<lceil>Rep_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                       (invalid \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>\n 6. \\<And>\\<tau>.\n       \\<lbrakk>(\\<upsilon> b) \\<tau> = true \\<tau>;\n        (\\<upsilon> a) \\<tau> \\<noteq> true \\<tau>;\n        (\\<delta> (\\<lambda>_. invalid \\<tau>)) \\<tau> =\n        true \\<tau>\\<rbrakk>\n       \\<Longrightarrow> Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                          \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                       (invalid \\<tau>)\\<rceil>\\<rceil> @\n      [b \\<tau>]\\<rfloor>\\<rfloor> =\n                         invalid \\<tau>\n 7. \\<And>\\<tau>.\n       \\<lbrakk>(\\<upsilon> b) \\<tau> \\<noteq> true \\<tau>;\n        (\\<upsilon> a) \\<tau> = true \\<tau>;\n        (\\<delta> (\\<lambda>_. invalid \\<tau>)) \\<tau> =\n        true \\<tau>\\<rbrakk>\n       \\<Longrightarrow> invalid \\<tau> =\n                         Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                          \\<lfloor>\\<lfloor>a \\<tau> #\n      \\<lceil>\\<lceil>Rep_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                       (invalid \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>", "apply(subst Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e_inverse[OF B],\n              (simp add: foundation16[simplified OclValid_def] foundation18'[simplified OclValid_def])+)"], ["proof (prove)\ngoal (7 subgoals):\n 1. \\<And>\\<tau>.\n       \\<lbrakk>b \\<tau> \\<noteq> \\<bottom>; a \\<tau> \\<noteq> \\<bottom>;\n        Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n         \\<lfloor>\\<lfloor>a \\<tau> #\n                           \\<lceil>\\<lceil>Rep_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n      (S \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor> \\<noteq>\n        \\<bottom> \\<and>\n        Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n         \\<lfloor>\\<lfloor>a \\<tau> #\n                           \\<lceil>\\<lceil>Rep_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n      (S \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor> \\<noteq>\n        null;\n        S \\<tau> \\<noteq> \\<bottom> \\<and> S \\<tau> \\<noteq> null;\n        Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n         \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n      (S \\<tau>)\\<rceil>\\<rceil> @\n                           [b \\<tau>]\\<rfloor>\\<rfloor> \\<noteq>\n        \\<bottom> \\<and>\n        Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n         \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n      (S \\<tau>)\\<rceil>\\<rceil> @\n                           [b \\<tau>]\\<rfloor>\\<rfloor> \\<noteq>\n        null\\<rbrakk>\n       \\<Longrightarrow> Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                          \\<lfloor>\\<lfloor>a \\<tau> #\n      \\<lceil>\\<lceil>Rep_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                       (S \\<tau>)\\<rceil>\\<rceil> @\n      [b \\<tau>]\\<rfloor>\\<rfloor> =\n                         Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                          \\<lfloor>\\<lfloor>a \\<tau> #\n      \\<lceil>\\<lceil>Rep_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                       (Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                         \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                      (S \\<tau>)\\<rceil>\\<rceil> @\n     [b \\<tau>]\\<rfloor>\\<rfloor>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>\n 2. \\<And>\\<tau>.\n       \\<lbrakk>(\\<upsilon> b) \\<tau> = true \\<tau>;\n        (\\<upsilon> a) \\<tau> = true \\<tau>;\n        (\\<delta> (\\<lambda>_.\n                      Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                       \\<lfloor>\\<lfloor>a \\<tau> #\n   \\<lceil>\\<lceil>Rep_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                    (S \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>))\n         \\<tau> =\n        true \\<tau>;\n        (\\<delta> S) \\<tau> = true \\<tau>;\n        (\\<delta> (\\<lambda>_.\n                      Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                       \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                    (S \\<tau>)\\<rceil>\\<rceil> @\n   [b \\<tau>]\\<rfloor>\\<rfloor>))\n         \\<tau> \\<noteq>\n        true \\<tau>\\<rbrakk>\n       \\<Longrightarrow> Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                          \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                       (Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                         \\<lfloor>\\<lfloor>a \\<tau> #\n     \\<lceil>\\<lceil>Rep_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                      (S \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>)\\<rceil>\\<rceil> @\n      [b \\<tau>]\\<rfloor>\\<rfloor> =\n                         invalid \\<tau>\n 3. \\<And>\\<tau>.\n       \\<lbrakk>(\\<upsilon> b) \\<tau> = true \\<tau>;\n        (\\<upsilon> a) \\<tau> = true \\<tau>;\n        (\\<delta> (\\<lambda>_.\n                      Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                       \\<lfloor>\\<lfloor>a \\<tau> #\n   \\<lceil>\\<lceil>Rep_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                    (S \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>))\n         \\<tau> =\n        true \\<tau>;\n        (\\<delta> S) \\<tau> \\<noteq> true \\<tau>;\n        (\\<delta> (\\<lambda>_. invalid \\<tau>)) \\<tau> =\n        true \\<tau>\\<rbrakk>\n       \\<Longrightarrow> Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                          \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                       (invalid \\<tau>)\\<rceil>\\<rceil> @\n      [b \\<tau>]\\<rfloor>\\<rfloor> =\n                         Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                          \\<lfloor>\\<lfloor>a \\<tau> #\n      \\<lceil>\\<lceil>Rep_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                       (invalid \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>\n 4. \\<And>\\<tau>.\n       \\<lbrakk>(\\<upsilon> b) \\<tau> = true \\<tau>;\n        (\\<upsilon> a) \\<tau> = true \\<tau>;\n        (\\<delta> (\\<lambda>_.\n                      Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                       \\<lfloor>\\<lfloor>a \\<tau> #\n   \\<lceil>\\<lceil>Rep_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                    (S \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>))\n         \\<tau> \\<noteq>\n        true \\<tau>;\n        (\\<delta> S) \\<tau> = true \\<tau>;\n        (\\<delta> (\\<lambda>_.\n                      Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                       \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                    (S \\<tau>)\\<rceil>\\<rceil> @\n   [b \\<tau>]\\<rfloor>\\<rfloor>))\n         \\<tau> =\n        true \\<tau>\\<rbrakk>\n       \\<Longrightarrow> invalid \\<tau> =\n                         Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                          \\<lfloor>\\<lfloor>a \\<tau> #\n      \\<lceil>\\<lceil>Rep_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                       (Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                         \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                      (S \\<tau>)\\<rceil>\\<rceil> @\n     [b \\<tau>]\\<rfloor>\\<rfloor>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>\n 5. \\<And>\\<tau>.\n       \\<lbrakk>(\\<upsilon> b) \\<tau> = true \\<tau>;\n        (\\<upsilon> a) \\<tau> = true \\<tau>;\n        (\\<delta> (\\<lambda>_.\n                      Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                       \\<lfloor>\\<lfloor>a \\<tau> #\n   \\<lceil>\\<lceil>Rep_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                    (S \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>))\n         \\<tau> \\<noteq>\n        true \\<tau>;\n        (\\<delta> S) \\<tau> \\<noteq> true \\<tau>;\n        (\\<delta> (\\<lambda>_. invalid \\<tau>)) \\<tau> =\n        true \\<tau>\\<rbrakk>\n       \\<Longrightarrow> Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                          \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                       (invalid \\<tau>)\\<rceil>\\<rceil> @\n      [b \\<tau>]\\<rfloor>\\<rfloor> =\n                         Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                          \\<lfloor>\\<lfloor>a \\<tau> #\n      \\<lceil>\\<lceil>Rep_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                       (invalid \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>\n 6. \\<And>\\<tau>.\n       \\<lbrakk>(\\<upsilon> b) \\<tau> = true \\<tau>;\n        (\\<upsilon> a) \\<tau> \\<noteq> true \\<tau>;\n        (\\<delta> (\\<lambda>_. invalid \\<tau>)) \\<tau> =\n        true \\<tau>\\<rbrakk>\n       \\<Longrightarrow> Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                          \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                       (invalid \\<tau>)\\<rceil>\\<rceil> @\n      [b \\<tau>]\\<rfloor>\\<rfloor> =\n                         invalid \\<tau>\n 7. \\<And>\\<tau>.\n       \\<lbrakk>(\\<upsilon> b) \\<tau> \\<noteq> true \\<tau>;\n        (\\<upsilon> a) \\<tau> = true \\<tau>;\n        (\\<delta> (\\<lambda>_. invalid \\<tau>)) \\<tau> =\n        true \\<tau>\\<rbrakk>\n       \\<Longrightarrow> invalid \\<tau> =\n                         Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                          \\<lfloor>\\<lfloor>a \\<tau> #\n      \\<lceil>\\<lceil>Rep_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                       (invalid \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>", "apply(subst Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e_inverse[OF A],\n              (simp add: foundation16[simplified OclValid_def] foundation18'[simplified OclValid_def])+)"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<And>\\<tau>.\n       \\<lbrakk>b \\<tau> \\<noteq> \\<bottom>; a \\<tau> \\<noteq> \\<bottom>;\n        Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n         \\<lfloor>\\<lfloor>a \\<tau> #\n                           \\<lceil>\\<lceil>Rep_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n      (S \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor> \\<noteq>\n        \\<bottom> \\<and>\n        Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n         \\<lfloor>\\<lfloor>a \\<tau> #\n                           \\<lceil>\\<lceil>Rep_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n      (S \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor> \\<noteq>\n        null;\n        S \\<tau> \\<noteq> \\<bottom> \\<and> S \\<tau> \\<noteq> null;\n        Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n         \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n      (S \\<tau>)\\<rceil>\\<rceil> @\n                           [b \\<tau>]\\<rfloor>\\<rfloor> =\n        \\<bottom> \\<or>\n        Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n         \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n      (S \\<tau>)\\<rceil>\\<rceil> @\n                           [b \\<tau>]\\<rfloor>\\<rfloor> =\n        null\\<rbrakk>\n       \\<Longrightarrow> Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                          \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                       (Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                         \\<lfloor>\\<lfloor>a \\<tau> #\n     \\<lceil>\\<lceil>Rep_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                      (S \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>)\\<rceil>\\<rceil> @\n      [b \\<tau>]\\<rfloor>\\<rfloor> =\n                         invalid \\<tau>\n 2. \\<And>\\<tau>.\n       \\<lbrakk>(\\<upsilon> b) \\<tau> = true \\<tau>;\n        (\\<upsilon> a) \\<tau> = true \\<tau>;\n        (\\<delta> (\\<lambda>_.\n                      Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                       \\<lfloor>\\<lfloor>a \\<tau> #\n   \\<lceil>\\<lceil>Rep_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                    (S \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>))\n         \\<tau> =\n        true \\<tau>;\n        (\\<delta> S) \\<tau> \\<noteq> true \\<tau>;\n        (\\<delta> (\\<lambda>_. invalid \\<tau>)) \\<tau> =\n        true \\<tau>\\<rbrakk>\n       \\<Longrightarrow> Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                          \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                       (invalid \\<tau>)\\<rceil>\\<rceil> @\n      [b \\<tau>]\\<rfloor>\\<rfloor> =\n                         Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                          \\<lfloor>\\<lfloor>a \\<tau> #\n      \\<lceil>\\<lceil>Rep_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                       (invalid \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>\n 3. \\<And>\\<tau>.\n       \\<lbrakk>(\\<upsilon> b) \\<tau> = true \\<tau>;\n        (\\<upsilon> a) \\<tau> = true \\<tau>;\n        (\\<delta> (\\<lambda>_.\n                      Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                       \\<lfloor>\\<lfloor>a \\<tau> #\n   \\<lceil>\\<lceil>Rep_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                    (S \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>))\n         \\<tau> \\<noteq>\n        true \\<tau>;\n        (\\<delta> S) \\<tau> = true \\<tau>;\n        (\\<delta> (\\<lambda>_.\n                      Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                       \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                    (S \\<tau>)\\<rceil>\\<rceil> @\n   [b \\<tau>]\\<rfloor>\\<rfloor>))\n         \\<tau> =\n        true \\<tau>\\<rbrakk>\n       \\<Longrightarrow> invalid \\<tau> =\n                         Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                          \\<lfloor>\\<lfloor>a \\<tau> #\n      \\<lceil>\\<lceil>Rep_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                       (Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                         \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                      (S \\<tau>)\\<rceil>\\<rceil> @\n     [b \\<tau>]\\<rfloor>\\<rfloor>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>\n 4. \\<And>\\<tau>.\n       \\<lbrakk>(\\<upsilon> b) \\<tau> = true \\<tau>;\n        (\\<upsilon> a) \\<tau> = true \\<tau>;\n        (\\<delta> (\\<lambda>_.\n                      Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                       \\<lfloor>\\<lfloor>a \\<tau> #\n   \\<lceil>\\<lceil>Rep_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                    (S \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>))\n         \\<tau> \\<noteq>\n        true \\<tau>;\n        (\\<delta> S) \\<tau> \\<noteq> true \\<tau>;\n        (\\<delta> (\\<lambda>_. invalid \\<tau>)) \\<tau> =\n        true \\<tau>\\<rbrakk>\n       \\<Longrightarrow> Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                          \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                       (invalid \\<tau>)\\<rceil>\\<rceil> @\n      [b \\<tau>]\\<rfloor>\\<rfloor> =\n                         Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                          \\<lfloor>\\<lfloor>a \\<tau> #\n      \\<lceil>\\<lceil>Rep_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                       (invalid \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>\n 5. \\<And>\\<tau>.\n       \\<lbrakk>(\\<upsilon> b) \\<tau> = true \\<tau>;\n        (\\<upsilon> a) \\<tau> \\<noteq> true \\<tau>;\n        (\\<delta> (\\<lambda>_. invalid \\<tau>)) \\<tau> =\n        true \\<tau>\\<rbrakk>\n       \\<Longrightarrow> Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                          \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                       (invalid \\<tau>)\\<rceil>\\<rceil> @\n      [b \\<tau>]\\<rfloor>\\<rfloor> =\n                         invalid \\<tau>\n 6. \\<And>\\<tau>.\n       \\<lbrakk>(\\<upsilon> b) \\<tau> \\<noteq> true \\<tau>;\n        (\\<upsilon> a) \\<tau> = true \\<tau>;\n        (\\<delta> (\\<lambda>_. invalid \\<tau>)) \\<tau> =\n        true \\<tau>\\<rbrakk>\n       \\<Longrightarrow> invalid \\<tau> =\n                         Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                          \\<lfloor>\\<lfloor>a \\<tau> #\n      \\<lceil>\\<lceil>Rep_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                       (invalid \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>", "apply(simp add: OclIncluding.def_body)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>\\<tau>.\n       \\<lbrakk>(\\<upsilon> b) \\<tau> = true \\<tau>;\n        (\\<upsilon> a) \\<tau> = true \\<tau>;\n        (\\<delta> (\\<lambda>_.\n                      Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                       \\<lfloor>\\<lfloor>a \\<tau> #\n   \\<lceil>\\<lceil>Rep_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                    (S \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>))\n         \\<tau> =\n        true \\<tau>;\n        (\\<delta> S) \\<tau> \\<noteq> true \\<tau>;\n        (\\<delta> (\\<lambda>_. invalid \\<tau>)) \\<tau> =\n        true \\<tau>\\<rbrakk>\n       \\<Longrightarrow> Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                          \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                       (invalid \\<tau>)\\<rceil>\\<rceil> @\n      [b \\<tau>]\\<rfloor>\\<rfloor> =\n                         Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                          \\<lfloor>\\<lfloor>a \\<tau> #\n      \\<lceil>\\<lceil>Rep_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                       (invalid \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>\n 2. \\<And>\\<tau>.\n       \\<lbrakk>(\\<upsilon> b) \\<tau> = true \\<tau>;\n        (\\<upsilon> a) \\<tau> = true \\<tau>;\n        (\\<delta> (\\<lambda>_.\n                      Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                       \\<lfloor>\\<lfloor>a \\<tau> #\n   \\<lceil>\\<lceil>Rep_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                    (S \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>))\n         \\<tau> \\<noteq>\n        true \\<tau>;\n        (\\<delta> S) \\<tau> = true \\<tau>;\n        (\\<delta> (\\<lambda>_.\n                      Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                       \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                    (S \\<tau>)\\<rceil>\\<rceil> @\n   [b \\<tau>]\\<rfloor>\\<rfloor>))\n         \\<tau> =\n        true \\<tau>\\<rbrakk>\n       \\<Longrightarrow> invalid \\<tau> =\n                         Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                          \\<lfloor>\\<lfloor>a \\<tau> #\n      \\<lceil>\\<lceil>Rep_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                       (Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                         \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                      (S \\<tau>)\\<rceil>\\<rceil> @\n     [b \\<tau>]\\<rfloor>\\<rfloor>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>\n 3. \\<And>\\<tau>.\n       \\<lbrakk>(\\<upsilon> b) \\<tau> = true \\<tau>;\n        (\\<upsilon> a) \\<tau> = true \\<tau>;\n        (\\<delta> (\\<lambda>_.\n                      Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                       \\<lfloor>\\<lfloor>a \\<tau> #\n   \\<lceil>\\<lceil>Rep_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                    (S \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>))\n         \\<tau> \\<noteq>\n        true \\<tau>;\n        (\\<delta> S) \\<tau> \\<noteq> true \\<tau>;\n        (\\<delta> (\\<lambda>_. invalid \\<tau>)) \\<tau> =\n        true \\<tau>\\<rbrakk>\n       \\<Longrightarrow> Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                          \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                       (invalid \\<tau>)\\<rceil>\\<rceil> @\n      [b \\<tau>]\\<rfloor>\\<rfloor> =\n                         Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                          \\<lfloor>\\<lfloor>a \\<tau> #\n      \\<lceil>\\<lceil>Rep_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                       (invalid \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>\n 4. \\<And>\\<tau>.\n       \\<lbrakk>(\\<upsilon> b) \\<tau> = true \\<tau>;\n        (\\<upsilon> a) \\<tau> \\<noteq> true \\<tau>;\n        (\\<delta> (\\<lambda>_. invalid \\<tau>)) \\<tau> =\n        true \\<tau>\\<rbrakk>\n       \\<Longrightarrow> Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                          \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                       (invalid \\<tau>)\\<rceil>\\<rceil> @\n      [b \\<tau>]\\<rfloor>\\<rfloor> =\n                         invalid \\<tau>\n 5. \\<And>\\<tau>.\n       \\<lbrakk>(\\<upsilon> b) \\<tau> \\<noteq> true \\<tau>;\n        (\\<upsilon> a) \\<tau> = true \\<tau>;\n        (\\<delta> (\\<lambda>_. invalid \\<tau>)) \\<tau> =\n        true \\<tau>\\<rbrakk>\n       \\<Longrightarrow> invalid \\<tau> =\n                         Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                          \\<lfloor>\\<lfloor>a \\<tau> #\n      \\<lceil>\\<lceil>Rep_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                       (invalid \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>", "apply (metis OclValid_def foundation16 invalid_def)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>\\<tau>.\n       \\<lbrakk>(\\<upsilon> b) \\<tau> = true \\<tau>;\n        (\\<upsilon> a) \\<tau> = true \\<tau>;\n        (\\<delta> (\\<lambda>_.\n                      Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                       \\<lfloor>\\<lfloor>a \\<tau> #\n   \\<lceil>\\<lceil>Rep_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                    (S \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>))\n         \\<tau> \\<noteq>\n        true \\<tau>;\n        (\\<delta> S) \\<tau> = true \\<tau>;\n        (\\<delta> (\\<lambda>_.\n                      Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                       \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                    (S \\<tau>)\\<rceil>\\<rceil> @\n   [b \\<tau>]\\<rfloor>\\<rfloor>))\n         \\<tau> =\n        true \\<tau>\\<rbrakk>\n       \\<Longrightarrow> invalid \\<tau> =\n                         Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                          \\<lfloor>\\<lfloor>a \\<tau> #\n      \\<lceil>\\<lceil>Rep_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                       (Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                         \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                      (S \\<tau>)\\<rceil>\\<rceil> @\n     [b \\<tau>]\\<rfloor>\\<rfloor>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>\n 2. \\<And>\\<tau>.\n       \\<lbrakk>(\\<upsilon> b) \\<tau> = true \\<tau>;\n        (\\<upsilon> a) \\<tau> = true \\<tau>;\n        (\\<delta> (\\<lambda>_.\n                      Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                       \\<lfloor>\\<lfloor>a \\<tau> #\n   \\<lceil>\\<lceil>Rep_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                    (S \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>))\n         \\<tau> \\<noteq>\n        true \\<tau>;\n        (\\<delta> S) \\<tau> \\<noteq> true \\<tau>;\n        (\\<delta> (\\<lambda>_. invalid \\<tau>)) \\<tau> =\n        true \\<tau>\\<rbrakk>\n       \\<Longrightarrow> Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                          \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                       (invalid \\<tau>)\\<rceil>\\<rceil> @\n      [b \\<tau>]\\<rfloor>\\<rfloor> =\n                         Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                          \\<lfloor>\\<lfloor>a \\<tau> #\n      \\<lceil>\\<lceil>Rep_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                       (invalid \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>\n 3. \\<And>\\<tau>.\n       \\<lbrakk>(\\<upsilon> b) \\<tau> = true \\<tau>;\n        (\\<upsilon> a) \\<tau> \\<noteq> true \\<tau>;\n        (\\<delta> (\\<lambda>_. invalid \\<tau>)) \\<tau> =\n        true \\<tau>\\<rbrakk>\n       \\<Longrightarrow> Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                          \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                       (invalid \\<tau>)\\<rceil>\\<rceil> @\n      [b \\<tau>]\\<rfloor>\\<rfloor> =\n                         invalid \\<tau>\n 4. \\<And>\\<tau>.\n       \\<lbrakk>(\\<upsilon> b) \\<tau> \\<noteq> true \\<tau>;\n        (\\<upsilon> a) \\<tau> = true \\<tau>;\n        (\\<delta> (\\<lambda>_. invalid \\<tau>)) \\<tau> =\n        true \\<tau>\\<rbrakk>\n       \\<Longrightarrow> invalid \\<tau> =\n                         Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                          \\<lfloor>\\<lfloor>a \\<tau> #\n      \\<lceil>\\<lceil>Rep_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                       (invalid \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>", "apply (metis (no_types) OclPrepend.def_body' OclValid_def foundation16)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>\\<tau>.\n       \\<lbrakk>(\\<upsilon> b) \\<tau> = true \\<tau>;\n        (\\<upsilon> a) \\<tau> = true \\<tau>;\n        (\\<delta> (\\<lambda>_.\n                      Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                       \\<lfloor>\\<lfloor>a \\<tau> #\n   \\<lceil>\\<lceil>Rep_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                    (S \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>))\n         \\<tau> \\<noteq>\n        true \\<tau>;\n        (\\<delta> S) \\<tau> \\<noteq> true \\<tau>;\n        (\\<delta> (\\<lambda>_. invalid \\<tau>)) \\<tau> =\n        true \\<tau>\\<rbrakk>\n       \\<Longrightarrow> Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                          \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                       (invalid \\<tau>)\\<rceil>\\<rceil> @\n      [b \\<tau>]\\<rfloor>\\<rfloor> =\n                         Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                          \\<lfloor>\\<lfloor>a \\<tau> #\n      \\<lceil>\\<lceil>Rep_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                       (invalid \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>\n 2. \\<And>\\<tau>.\n       \\<lbrakk>(\\<upsilon> b) \\<tau> = true \\<tau>;\n        (\\<upsilon> a) \\<tau> \\<noteq> true \\<tau>;\n        (\\<delta> (\\<lambda>_. invalid \\<tau>)) \\<tau> =\n        true \\<tau>\\<rbrakk>\n       \\<Longrightarrow> Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                          \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                       (invalid \\<tau>)\\<rceil>\\<rceil> @\n      [b \\<tau>]\\<rfloor>\\<rfloor> =\n                         invalid \\<tau>\n 3. \\<And>\\<tau>.\n       \\<lbrakk>(\\<upsilon> b) \\<tau> \\<noteq> true \\<tau>;\n        (\\<upsilon> a) \\<tau> = true \\<tau>;\n        (\\<delta> (\\<lambda>_. invalid \\<tau>)) \\<tau> =\n        true \\<tau>\\<rbrakk>\n       \\<Longrightarrow> invalid \\<tau> =\n                         Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                          \\<lfloor>\\<lfloor>a \\<tau> #\n      \\<lceil>\\<lceil>Rep_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                       (invalid \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>", "by (metis OclValid_def foundation16 invalid_def)+"], ["proof (state)\nthis:\n  S->prepend\\<^sub>S\\<^sub>e\\<^sub>q(a)->including\\<^sub>S\\<^sub>e\\<^sub>q(b) =\n  S->including\\<^sub>S\\<^sub>e\\<^sub>q(b)->prepend\\<^sub>S\\<^sub>e\\<^sub>q(a)\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection\\<open>Definition: Excluding\\<close>"], ["", "definition OclExcluding   :: \"[('\\<AA>,'\\<alpha>::null) Sequence,('\\<AA>,'\\<alpha>) val] \\<Rightarrow> ('\\<AA>,'\\<alpha>) Sequence\"\nwhere     \"OclExcluding x y = (\\<lambda> \\<tau>. if (\\<delta> x) \\<tau> = true \\<tau> \\<and> (\\<upsilon> y) \\<tau> = true \\<tau>\n                                    then Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e \\<lfloor>\\<lfloor> filter (\\<lambda>x. x = y \\<tau>)\n                                                                   \\<lceil>\\<lceil>Rep_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e (x \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>\n                                    else invalid \\<tau> )\""], ["", "notation   OclExcluding   (\"_->excluding\\<^sub>S\\<^sub>e\\<^sub>q'(_')\")"], ["", "interpretation OclExcluding:profile_bin\\<^sub>d_\\<^sub>v OclExcluding \n                          \"\\<lambda>x y. Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e \\<lfloor>\\<lfloor> filter (\\<lambda>x. x = y) \\<lceil>\\<lceil>Rep_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e (x)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. profile_bin\\<^sub>d_\\<^sub>v OclExcluding\n     (\\<lambda>x y.\n         Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n          \\<lfloor>\\<lfloor>filter (\\<lambda>x. x = y)\n                             \\<lceil>\\<lceil>Rep_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n        x\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. profile_bin\\<^sub>d_\\<^sub>v OclExcluding\n     (\\<lambda>x y.\n         Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n          \\<lfloor>\\<lfloor>filter (\\<lambda>x. x = y)\n                             \\<lceil>\\<lceil>Rep_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n        x\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>)", "show \"profile_bin\\<^sub>d_\\<^sub>v OclExcluding (\\<lambda>x y. Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e \\<lfloor>\\<lfloor>[x\\<leftarrow>\\<lceil>\\<lceil>Rep_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e x\\<rceil>\\<rceil> . x = y]\\<rfloor>\\<rfloor>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. profile_bin\\<^sub>d_\\<^sub>v OclExcluding\n     (\\<lambda>x y.\n         Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n          \\<lfloor>\\<lfloor>filter (\\<lambda>x. x = y)\n                             \\<lceil>\\<lceil>Rep_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n        x\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>)", "apply unfold_locales"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>X Y.\n       bin OclExcluding\n        (\\<lambda>x y.\n            Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n             \\<lfloor>\\<lfloor>filter (\\<lambda>x. x = y)\n                                \\<lceil>\\<lceil>Rep_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n           x\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>)\n        defined valid X Y\n 2. \\<And>x y.\n       \\<lbrakk>x \\<noteq> \\<bottom>; x \\<noteq> null;\n        y \\<noteq> \\<bottom>\\<rbrakk>\n       \\<Longrightarrow> Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                          \\<lfloor>\\<lfloor>filter (\\<lambda>x. x = y)\n       \\<lceil>\\<lceil>Rep_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                        x\\<rceil>\\<rceil>\\<rfloor>\\<rfloor> \\<noteq>\n                         \\<bottom> \\<and>\n                         Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                          \\<lfloor>\\<lfloor>filter (\\<lambda>x. x = y)\n       \\<lceil>\\<lceil>Rep_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                        x\\<rceil>\\<rceil>\\<rfloor>\\<rfloor> \\<noteq>\n                         null", "apply(auto simp:OclExcluding_def bot_option_def null_option_def  \n                         null_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e_def bot_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e_def)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<noteq>\n                Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e None;\n        x \\<noteq>\n        Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e \\<lfloor>None\\<rfloor>;\n        y \\<noteq> \\<bottom>;\n        Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n         \\<lfloor>\\<lfloor>filter (\\<lambda>x. x = y)\n                            \\<lceil>\\<lceil>Rep_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n       x\\<rceil>\\<rceil>\\<rfloor>\\<rfloor> =\n        Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e None\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>x y.\n       \\<lbrakk>x \\<noteq>\n                Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e None;\n        x \\<noteq>\n        Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e \\<lfloor>None\\<rfloor>;\n        y \\<noteq> \\<bottom>;\n        Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n         \\<lfloor>\\<lfloor>filter (\\<lambda>x. x = y)\n                            \\<lceil>\\<lceil>Rep_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n       x\\<rceil>\\<rceil>\\<rfloor>\\<rfloor> =\n        Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n         \\<lfloor>None\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> False", "apply(subst (asm) Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e_inject,\n               simp_all add: null_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e_def bot_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e_def bot_option_def null_option_def)+"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  profile_bin\\<^sub>d_\\<^sub>v OclExcluding\n   (\\<lambda>x y.\n       Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n        \\<lfloor>\\<lfloor>filter (\\<lambda>x. x = y)\n                           \\<lceil>\\<lceil>Rep_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n      x\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>)\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection\\<open>Definition: Append\\<close>"], ["", "text\\<open>Identical to OclIncluding.\\<close>"], ["", "definition OclAppend   :: \"[('\\<AA>,'\\<alpha>::null) Sequence,('\\<AA>,'\\<alpha>) val] \\<Rightarrow> ('\\<AA>,'\\<alpha>) Sequence\"\nwhere     \"OclAppend = OclIncluding\""], ["", "notation   OclAppend   (\"_->append\\<^sub>S\\<^sub>e\\<^sub>q'(_')\")"], ["", "interpretation OclAppend : \n               profile_bin\\<^sub>d_\\<^sub>v OclAppend \"\\<lambda>x y. Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e x\\<rceil>\\<rceil> @ [y]\\<rfloor>\\<rfloor>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. profile_bin\\<^sub>d_\\<^sub>v OclAppend\n     (\\<lambda>x y.\n         Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n          \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n       x\\<rceil>\\<rceil> @\n                            [y]\\<rfloor>\\<rfloor>)", "apply unfold_locales"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>X Y.\n       bin OclAppend\n        (\\<lambda>x y.\n            Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n             \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n          x\\<rceil>\\<rceil> @\n                               [y]\\<rfloor>\\<rfloor>)\n        defined valid X Y\n 2. \\<And>x y.\n       \\<lbrakk>x \\<noteq> \\<bottom>; x \\<noteq> null;\n        y \\<noteq> \\<bottom>\\<rbrakk>\n       \\<Longrightarrow> Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                          \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                       x\\<rceil>\\<rceil> @\n      [y]\\<rfloor>\\<rfloor> \\<noteq>\n                         \\<bottom> \\<and>\n                         Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                          \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                       x\\<rceil>\\<rceil> @\n      [y]\\<rfloor>\\<rfloor> \\<noteq>\n                         null", "by(auto simp: OclAppend_def bin_def bin'_def\n               OclIncluding.def_scheme OclIncluding.def_body)"], ["", "subsection\\<open>Definition: Union\\<close>"], ["", "definition OclUnion   :: \"[('\\<AA>,'\\<alpha>::null) Sequence,('\\<AA>,'\\<alpha>) Sequence] \\<Rightarrow> ('\\<AA>,'\\<alpha>) Sequence\"\nwhere     \"OclUnion x y = (\\<lambda> \\<tau>. if (\\<delta> x) \\<tau> = true \\<tau> \\<and> (\\<delta> y) \\<tau> = true \\<tau>\n                                then Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e \\<lfloor>\\<lfloor> \\<lceil>\\<lceil>Rep_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e (x \\<tau>)\\<rceil>\\<rceil> @\n                                                        \\<lceil>\\<lceil>Rep_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e (y \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>\n                                else invalid \\<tau> )\""], ["", "notation   OclUnion   (\"_->union\\<^sub>S\\<^sub>e\\<^sub>q'(_')\")"], ["", "interpretation OclUnion : \n               profile_bin\\<^sub>d_\\<^sub>d OclUnion \"\\<lambda>x y. Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e x\\<rceil>\\<rceil> @ \\<lceil>\\<lceil>Rep_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e y\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. profile_bin\\<^sub>d_\\<^sub>d OclUnion\n     (\\<lambda>x y.\n         Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n          \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n       x\\<rceil>\\<rceil> @\n                            \\<lceil>\\<lceil>Rep_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n       y\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. profile_bin\\<^sub>d_\\<^sub>d OclUnion\n     (\\<lambda>x y.\n         Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n          \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n       x\\<rceil>\\<rceil> @\n                            \\<lceil>\\<lceil>Rep_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n       y\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>)", "have A : \"\\<And>x y. x \\<noteq> \\<bottom> \\<Longrightarrow>  x \\<noteq> null \\<Longrightarrow> \\<forall>x\\<in>set \\<lceil>\\<lceil>Rep_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e x\\<rceil>\\<rceil>. x \\<noteq> \\<bottom> \""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<noteq> \\<bottom>; x \\<noteq> null\\<rbrakk>\n       \\<Longrightarrow> \\<forall>x\\<in>set\n   \\<lceil>\\<lceil>Rep_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                    x\\<rceil>\\<rceil>.\n                            x \\<noteq> \\<bottom>", "apply(rule Sequence_inv_lemma[of \\<tau>])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<noteq> \\<bottom>; x \\<noteq> null\\<rbrakk>\n       \\<Longrightarrow> \\<tau> \\<Turnstile> \\<delta> (\\<lambda>a. x)", "by(simp add: defined_def OclValid_def bot_fun_def null_fun_def false_def true_def)"], ["proof (state)\nthis:\n  \\<lbrakk>?x \\<noteq> \\<bottom>; ?x \\<noteq> null\\<rbrakk>\n  \\<Longrightarrow> \\<forall>x\\<in>set \\<lceil>\\<lceil>Rep_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                  ?x\\<rceil>\\<rceil>.\n                       x \\<noteq> \\<bottom>\n\ngoal (1 subgoal):\n 1. profile_bin\\<^sub>d_\\<^sub>d OclUnion\n     (\\<lambda>x y.\n         Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n          \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n       x\\<rceil>\\<rceil> @\n                            \\<lceil>\\<lceil>Rep_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n       y\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>)", "show \"profile_bin\\<^sub>d_\\<^sub>d OclUnion (\\<lambda>x y. Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e x\\<rceil>\\<rceil>@\\<lceil>\\<lceil>Rep_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e y\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. profile_bin\\<^sub>d_\\<^sub>d OclUnion\n     (\\<lambda>x y.\n         Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n          \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n       x\\<rceil>\\<rceil> @\n                            \\<lceil>\\<lceil>Rep_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n       y\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>)", "apply unfold_locales"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>X Y.\n       bin OclUnion\n        (\\<lambda>x y.\n            Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n             \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n          x\\<rceil>\\<rceil> @\n                               \\<lceil>\\<lceil>Rep_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n          y\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>)\n        defined defined X Y\n 2. \\<And>x y.\n       \\<lbrakk>x \\<noteq> \\<bottom>; x \\<noteq> null; y \\<noteq> \\<bottom>;\n        y \\<noteq> null\\<rbrakk>\n       \\<Longrightarrow> Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                          \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                       x\\<rceil>\\<rceil> @\n      \\<lceil>\\<lceil>Rep_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                       y\\<rceil>\\<rceil>\\<rfloor>\\<rfloor> \\<noteq>\n                         \\<bottom> \\<and>\n                         Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                          \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                       x\\<rceil>\\<rceil> @\n      \\<lceil>\\<lceil>Rep_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                       y\\<rceil>\\<rceil>\\<rfloor>\\<rfloor> \\<noteq>\n                         null", "apply(auto simp:OclUnion_def bot_option_def null_option_def \n                   null_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e_def bot_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e_def)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<noteq>\n                Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e None;\n        x \\<noteq>\n        Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e \\<lfloor>None\\<rfloor>;\n        y \\<noteq> Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e None;\n        y \\<noteq>\n        Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e \\<lfloor>None\\<rfloor>;\n        Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n         \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n      x\\<rceil>\\<rceil> @\n                           \\<lceil>\\<lceil>Rep_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n      y\\<rceil>\\<rceil>\\<rfloor>\\<rfloor> =\n        Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e None\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>x y.\n       \\<lbrakk>x \\<noteq>\n                Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e None;\n        x \\<noteq>\n        Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e \\<lfloor>None\\<rfloor>;\n        y \\<noteq> Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e None;\n        y \\<noteq>\n        Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e \\<lfloor>None\\<rfloor>;\n        Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n         \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n      x\\<rceil>\\<rceil> @\n                           \\<lceil>\\<lceil>Rep_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n      y\\<rceil>\\<rceil>\\<rfloor>\\<rfloor> =\n        Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n         \\<lfloor>None\\<rfloor>\\<rbrakk>\n       \\<Longrightarrow> False", "by(subst (asm) Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e_inject,\n      simp_all add: bot_option_def null_option_def  Set.ball_Un A null_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e_def bot_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e_def)+"], ["proof (state)\nthis:\n  profile_bin\\<^sub>d_\\<^sub>d OclUnion\n   (\\<lambda>x y.\n       Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n        \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n     x\\<rceil>\\<rceil> @\n                          \\<lceil>\\<lceil>Rep_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n     y\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>)\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection\\<open>Definition: At\\<close>"], ["", "definition OclAt   :: \"[('\\<AA>,'\\<alpha>::null) Sequence,('\\<AA>) Integer] \\<Rightarrow> ('\\<AA>,'\\<alpha>) val\"\nwhere     \"OclAt x y = (\\<lambda> \\<tau>. if (\\<delta> x) \\<tau> = true \\<tau> \\<and> (\\<delta> y) \\<tau> = true \\<tau>\n                             then if  1 \\<le> \\<lceil>\\<lceil>y \\<tau>\\<rceil>\\<rceil> \\<and>  \\<lceil>\\<lceil>y \\<tau>\\<rceil>\\<rceil> \\<le> length\\<lceil>\\<lceil>Rep_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e (x \\<tau>)\\<rceil>\\<rceil> \n                                  then \\<lceil>\\<lceil>Rep_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e (x \\<tau>)\\<rceil>\\<rceil> ! (nat \\<lceil>\\<lceil>y \\<tau>\\<rceil>\\<rceil> - 1) \n                                  else invalid \\<tau>\n                             else invalid \\<tau> )\""], ["", "notation   OclAt (\"_->at\\<^sub>S\\<^sub>e\\<^sub>q'(_')\")"], ["", "(*TODO Locale - Equivalent*)"], ["", "subsection\\<open>Definition: First\\<close>"], ["", "definition OclFirst   :: \"[('\\<AA>,'\\<alpha>::null) Sequence] \\<Rightarrow> ('\\<AA>,'\\<alpha>) val\"\nwhere     \"OclFirst x = (\\<lambda> \\<tau>. if (\\<delta> x) \\<tau> = true \\<tau> then\n                                case \\<lceil>\\<lceil>Rep_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e (x \\<tau>)\\<rceil>\\<rceil> of [] \\<Rightarrow> invalid \\<tau>\n                                                               | x # _ \\<Rightarrow> x\n                              else invalid \\<tau> )\""], ["", "notation   OclFirst   (\"_->first\\<^sub>S\\<^sub>e\\<^sub>q'(_')\")"], ["", "(*TODO Locale - Equivalent*)"], ["", "subsection\\<open>Definition: Last\\<close>"], ["", "definition OclLast   :: \"[('\\<AA>,'\\<alpha>::null) Sequence] \\<Rightarrow> ('\\<AA>,'\\<alpha>) val\"\nwhere     \"OclLast x = (\\<lambda> \\<tau>. if (\\<delta> x) \\<tau> = true \\<tau> then\n                               if \\<lceil>\\<lceil>Rep_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e (x \\<tau>)\\<rceil>\\<rceil> = [] then\n                                 invalid \\<tau>\n                               else\n                                 last \\<lceil>\\<lceil>Rep_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e (x \\<tau>)\\<rceil>\\<rceil>\n                             else invalid \\<tau> )\""], ["", "notation   OclLast   (\"_->last\\<^sub>S\\<^sub>e\\<^sub>q'(_')\")"], ["", "(*TODO Locale - Equivalent*)"], ["", "subsection\\<open>Definition: Iterate\\<close>"], ["", "definition OclIterate :: \"[('\\<AA>,'\\<alpha>::null) Sequence,('\\<AA>,'\\<beta>::null)val,\n                           ('\\<AA>,'\\<alpha>)val\\<Rightarrow>('\\<AA>,'\\<beta>)val\\<Rightarrow>('\\<AA>,'\\<beta>)val] \\<Rightarrow> ('\\<AA>,'\\<beta>)val\"\nwhere     \"OclIterate S A F = (\\<lambda> \\<tau>. if (\\<delta> S) \\<tau> = true \\<tau> \\<and> (\\<upsilon> A) \\<tau> = true \\<tau> \n                                    then (foldr (F) (map (\\<lambda>a \\<tau>. a) \\<lceil>\\<lceil>Rep_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e (S \\<tau>)\\<rceil>\\<rceil>))(A)\\<tau>\n                                    else \\<bottom>)\""], ["", "syntax  \n  \"_OclIterateSeq\"  :: \"[('\\<AA>,'\\<alpha>::null) Sequence, idt, idt, '\\<alpha>, '\\<beta>] => ('\\<AA>,'\\<gamma>)val\"\n                        (\"_ ->iterate\\<^sub>S\\<^sub>e\\<^sub>q'(_;_=_ | _')\" (*[71,100,70]50*))"], ["", "translations\n  \"X->iterate\\<^sub>S\\<^sub>e\\<^sub>q(a; x = A | P)\" == \"CONST OclIterate X A (%a. (% x. P))\""], ["", "(*TODO Locale - Equivalent*)"], ["", "subsection\\<open>Definition: Forall\\<close>"], ["", "definition OclForall     :: \"[('\\<AA>,'\\<alpha>::null) Sequence,('\\<AA>,'\\<alpha>)val\\<Rightarrow>('\\<AA>)Boolean] \\<Rightarrow> '\\<AA> Boolean\"\nwhere     \"OclForall S P = (S->iterate\\<^sub>S\\<^sub>e\\<^sub>q(b; x = true | x and (P b)))\""], ["", "syntax\n  \"_OclForallSeq\" :: \"[('\\<AA>,'\\<alpha>::null) Sequence,id,('\\<AA>)Boolean] \\<Rightarrow> '\\<AA> Boolean\"    (\"(_)->forAll\\<^sub>S\\<^sub>e\\<^sub>q'(_|_')\")"], ["", "translations\n  \"X->forAll\\<^sub>S\\<^sub>e\\<^sub>q(x | P)\" == \"CONST UML_Sequence.OclForall X (%x. P)\""], ["", "(*TODO Locale - Equivalent*)"], ["", "subsection\\<open>Definition: Exists\\<close>"], ["", "definition OclExists     :: \"[('\\<AA>,'\\<alpha>::null) Sequence,('\\<AA>,'\\<alpha>)val\\<Rightarrow>('\\<AA>)Boolean] \\<Rightarrow> '\\<AA> Boolean\"\nwhere     \"OclExists S P = (S->iterate\\<^sub>S\\<^sub>e\\<^sub>q(b; x = false | x or (P b)))\""], ["", "syntax\n  \"_OclExistSeq\" :: \"[('\\<AA>,'\\<alpha>::null) Sequence,id,('\\<AA>)Boolean] \\<Rightarrow> '\\<AA> Boolean\"    (\"(_)->exists\\<^sub>S\\<^sub>e\\<^sub>q'(_|_')\")"], ["", "translations\n  \"X->exists\\<^sub>S\\<^sub>e\\<^sub>q(x | P)\" == \"CONST OclExists X (%x. P)\""], ["", "(*TODO Locale - Equivalent*)"], ["", "subsection\\<open>Definition: Collect\\<close>"], ["", "definition OclCollect     :: \"[('\\<AA>,'\\<alpha>::null)Sequence,('\\<AA>,'\\<alpha>)val\\<Rightarrow>('\\<AA>,'\\<beta>)val]\\<Rightarrow>('\\<AA>,'\\<beta>::null)Sequence\"\nwhere     \"OclCollect S P = (S->iterate\\<^sub>S\\<^sub>e\\<^sub>q(b; x = Sequence{} | x->prepend\\<^sub>S\\<^sub>e\\<^sub>q(P b)))\""], ["", "syntax\n  \"_OclCollectSeq\" :: \"[('\\<AA>,'\\<alpha>::null) Sequence,id,('\\<AA>)Boolean] \\<Rightarrow> '\\<AA> Boolean\"    (\"(_)->collect\\<^sub>S\\<^sub>e\\<^sub>q'(_|_')\")"], ["", "translations\n  \"X->collect\\<^sub>S\\<^sub>e\\<^sub>q(x | P)\" == \"CONST OclCollect X (%x. P)\""], ["", "(*TODO Locale - Equivalent*)"], ["", "subsection\\<open>Definition: Select\\<close>"], ["", "definition OclSelect     :: \"[('\\<AA>,'\\<alpha>::null)Sequence,('\\<AA>,'\\<alpha>)val\\<Rightarrow>('\\<AA>)Boolean]\\<Rightarrow>('\\<AA>,'\\<alpha>::null)Sequence\"\nwhere     \"OclSelect S P = \n           (S->iterate\\<^sub>S\\<^sub>e\\<^sub>q(b; x = Sequence{} | if P b then x->prepend\\<^sub>S\\<^sub>e\\<^sub>q(b) else x endif))\""], ["", "syntax\n  \"_OclSelectSeq\" :: \"[('\\<AA>,'\\<alpha>::null) Sequence,id,('\\<AA>)Boolean] \\<Rightarrow> '\\<AA> Boolean\"  (\"(_)->select\\<^sub>S\\<^sub>e\\<^sub>q'(_|_')\")"], ["", "translations\n  \"X->select\\<^sub>S\\<^sub>e\\<^sub>q(x | P)\" == \"CONST UML_Sequence.OclSelect X (%x. P)\""], ["", "(*TODO Locale - Equivalent*)"], ["", "subsection\\<open>Definition: Size\\<close>"], ["", "definition OclSize     :: \"[('\\<AA>,'\\<alpha>::null)Sequence]\\<Rightarrow>('\\<AA>)Integer\" (\"(_)->size\\<^sub>S\\<^sub>e\\<^sub>q'(')\")\nwhere     \"OclSize S = (S->iterate\\<^sub>S\\<^sub>e\\<^sub>q(b; x = \\<zero> | x +\\<^sub>i\\<^sub>n\\<^sub>t \\<one> ))\""], ["", "(*TODO Locale - Equivalent*)"], ["", "subsection\\<open>Definition: IsEmpty\\<close>"], ["", "definition OclIsEmpty   :: \"('\\<AA>,'\\<alpha>::null) Sequence \\<Rightarrow> '\\<AA> Boolean\"\nwhere     \"OclIsEmpty x =  ((\\<upsilon> x and not (\\<delta> x)) or ((OclSize x) \\<doteq> \\<zero>))\""], ["", "notation   OclIsEmpty     (\"_->isEmpty\\<^sub>S\\<^sub>e\\<^sub>q'(')\" (*[66]*))"], ["", "(*TODO Locale - Equivalent*)"], ["", "subsection\\<open>Definition: NotEmpty\\<close>"], ["", "definition OclNotEmpty   :: \"('\\<AA>,'\\<alpha>::null) Sequence \\<Rightarrow> '\\<AA> Boolean\"\nwhere     \"OclNotEmpty x =  not(OclIsEmpty x)\""], ["", "notation   OclNotEmpty    (\"_->notEmpty\\<^sub>S\\<^sub>e\\<^sub>q'(')\" (*[66]*))"], ["", "(*TODO Locale - Equivalent*)"], ["", "subsection\\<open>Definition: Any\\<close>"], ["", "definition \"OclANY x = (\\<lambda> \\<tau>.\n  if x \\<tau> = invalid \\<tau> then\n    \\<bottom>\n  else\n    case drop (drop (Rep_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e (x \\<tau>))) of [] \\<Rightarrow> \\<bottom>\n                                              | l \\<Rightarrow> hd l)\""], ["", "notation   OclANY   (\"_->any\\<^sub>S\\<^sub>e\\<^sub>q'(')\")"], ["", "(*TODO Locale - Equivalent*)"], ["", "subsection\\<open>Definition (future operators)\\<close>"], ["", "consts (* abstract set collection operations *)\n    OclCount       :: \"[('\\<AA>,'\\<alpha>::null) Sequence,('\\<AA>,'\\<alpha>) Sequence] \\<Rightarrow> '\\<AA> Integer\"\n  (*OclFlatten*)\n  (*OclInsertAt*)\n  (*OclSubSequence*)\n  (*OclIndexOf*)\n  (*OclReverse*)\n    OclSum         :: \" ('\\<AA>,'\\<alpha>::null) Sequence \\<Rightarrow> '\\<AA> Integer\""], ["", "notation  OclCount       (\"_->count\\<^sub>S\\<^sub>e\\<^sub>q'(_')\" (*[66,65]65*))"], ["", "notation  OclSum         (\"_->sum\\<^sub>S\\<^sub>e\\<^sub>q'(')\" (*[66]*))"], ["", "subsection\\<open>Logical Properties\\<close>"], ["", "subsection\\<open>Execution Laws with Invalid or Null as Argument\\<close>"], ["", "text\\<open>OclIterate\\<close>"], ["", "lemma OclIterate_invalid[simp,code_unfold]:\"invalid->iterate\\<^sub>S\\<^sub>e\\<^sub>q(a; x = A | P a x) = invalid\""], ["proof (prove)\ngoal (1 subgoal):\n 1. OclIterate invalid A P = invalid", "by(simp add: OclIterate_def false_def true_def, simp add: invalid_def)"], ["", "lemma OclIterate_null[simp,code_unfold]:\"null->iterate\\<^sub>S\\<^sub>e\\<^sub>q(a; x = A | P a x) = invalid\""], ["proof (prove)\ngoal (1 subgoal):\n 1. OclIterate null A P = invalid", "by(simp add: OclIterate_def false_def true_def, simp add: invalid_def)"], ["", "lemma OclIterate_invalid_args[simp,code_unfold]:\"S->iterate\\<^sub>S\\<^sub>e\\<^sub>q(a; x = invalid | P a x) = invalid\""], ["proof (prove)\ngoal (1 subgoal):\n 1. OclIterate S invalid P = invalid", "by(simp add: bot_fun_def invalid_def OclIterate_def defined_def valid_def false_def true_def)"], ["", "text_raw\\<open>\\isatagafp\\<close>"], ["", "subsubsection\\<open>Context Passing\\<close>"], ["", "lemma cp_OclIncluding:\n\"(X->including\\<^sub>S\\<^sub>e\\<^sub>q(x)) \\<tau> = ((\\<lambda> _. X \\<tau>)->including\\<^sub>S\\<^sub>e\\<^sub>q(\\<lambda> _. x \\<tau>)) \\<tau>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. X->including\\<^sub>S\\<^sub>e\\<^sub>q(x) \\<tau> =\n    \\<lambda>_.\n       X \\<tau>->including\\<^sub>S\\<^sub>e\\<^sub>q(\\<lambda>_. x \\<tau>)\n     \\<tau>", "by(auto simp: OclIncluding_def StrongEq_def invalid_def\n                 cp_defined[symmetric] cp_valid[symmetric])"], ["", "lemma cp_OclIterate: \n     \"(X->iterate\\<^sub>S\\<^sub>e\\<^sub>q(a; x = A | P a x)) \\<tau> =\n                ((\\<lambda> _. X \\<tau>)->iterate\\<^sub>S\\<^sub>e\\<^sub>q(a; x = A | P a x)) \\<tau>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. OclIterate X A P \\<tau> = OclIterate (\\<lambda>_. X \\<tau>) A P \\<tau>", "by(simp add: OclIterate_def cp_defined[symmetric])"], ["", "lemmas cp_intro''\\<^sub>S\\<^sub>e\\<^sub>q[intro!,simp,code_unfold] = \n       cp_OclIncluding [THEN allI[THEN allI[THEN allI[THEN cpI2]], of \"OclIncluding\"]]"], ["", "subsubsection\\<open>Const\\<close>"], ["", "text_raw\\<open>\\endisatagafp\\<close>"], ["", "subsection\\<open>General Algebraic Execution Rules\\<close>"], ["", "subsubsection\\<open>Execution Rules on Iterate\\<close>"], ["", "lemma OclIterate_empty[simp,code_unfold]:\"Sequence{}->iterate\\<^sub>S\\<^sub>e\\<^sub>q(a; x = A | P a x) = A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. OclIterate Sequence{} A P = A", "apply(simp add: OclIterate_def foundation22[symmetric] foundation13, \n      rule ext, rename_tac \"\\<tau>\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<tau>.\n       (if \\<tau> \\<Turnstile> \\<upsilon> A\n        then foldr P\n              (map (\\<lambda>a \\<tau>. a)\n                \\<lceil>\\<lceil>Rep_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                 (Sequence{} \\<tau>)\\<rceil>\\<rceil>)\n              A \\<tau>\n        else \\<bottom>) =\n       A \\<tau>", "apply(case_tac \"\\<tau> \\<Turnstile> \\<upsilon> A\", simp_all add: foundation18')"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<tau>.\n       A \\<tau> \\<noteq> \\<bottom> \\<Longrightarrow>\n       foldr P\n        (map (\\<lambda>a \\<tau>. a)\n          \\<lceil>\\<lceil>Rep_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                           (Sequence{} \\<tau>)\\<rceil>\\<rceil>)\n        A \\<tau> =\n       A \\<tau>", "apply(simp add: mtSequence_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<tau>.\n       A \\<tau> \\<noteq> \\<bottom> \\<Longrightarrow>\n       foldr P\n        (map (\\<lambda>a \\<tau>. a)\n          \\<lceil>\\<lceil>Rep_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                           (Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                             \\<lfloor>\\<lfloor>[]\\<rfloor>\\<rfloor>)\\<rceil>\\<rceil>)\n        A \\<tau> =\n       A \\<tau>", "apply(subst Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e_inverse)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>\\<tau>.\n       A \\<tau> \\<noteq> \\<bottom> \\<Longrightarrow>\n       \\<lfloor>\\<lfloor>[]\\<rfloor>\\<rfloor>\n       \\<in> {X. X = \\<bottom> \\<or>\n                 X = null \\<or>\n                 (\\<forall>x\\<in>set \\<lceil>\\<lceil>X\\<rceil>\\<rceil>.\n                     x \\<noteq> \\<bottom>)}\n 2. \\<And>\\<tau>.\n       A \\<tau> \\<noteq> \\<bottom> \\<Longrightarrow>\n       foldr P\n        (map (\\<lambda>a \\<tau>. a)\n          \\<lceil>\\<lceil>\\<lfloor>\\<lfloor>[]\\<rfloor>\\<rfloor>\\<rceil>\\<rceil>)\n        A \\<tau> =\n       A \\<tau>", "by auto"], ["", "text\\<open>In particular, this does hold for A = null.\\<close>"], ["", "lemma OclIterate_including[simp,code_unfold]:\nassumes strict1 : \"\\<And>X. P invalid X = invalid\"\nand     P_valid_arg: \"\\<And> \\<tau>. (\\<upsilon> A) \\<tau> = (\\<upsilon> (P a A)) \\<tau>\"\nand     P_cp    : \"\\<And> x y \\<tau>. P x y \\<tau> = P (\\<lambda> _. x \\<tau>) y \\<tau>\"\nand     P_cp'   : \"\\<And> x y \\<tau>. P x y \\<tau> = P x (\\<lambda> _. y \\<tau>) \\<tau>\"\nshows  \"(S->including\\<^sub>S\\<^sub>e\\<^sub>q(a))->iterate\\<^sub>S\\<^sub>e\\<^sub>q(b; x = A | P b x) = S->iterate\\<^sub>S\\<^sub>e\\<^sub>q(b; x = P a A| P b x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. OclIterate S->including\\<^sub>S\\<^sub>e\\<^sub>q(a) A P =\n    OclIterate S (P a A) P", "apply(rule ext)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       OclIterate S->including\\<^sub>S\\<^sub>e\\<^sub>q(a) A P x =\n       OclIterate S (P a A) P x", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       OclIterate S->including\\<^sub>S\\<^sub>e\\<^sub>q(a) A P x =\n       OclIterate S (P a A) P x", "have A: \"\\<And>S b \\<tau>. S \\<noteq> \\<bottom> \\<Longrightarrow> S \\<noteq> null \\<Longrightarrow> b \\<noteq> \\<bottom>  \\<Longrightarrow>\n                  \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e S\\<rceil>\\<rceil> @ [b]\\<rfloor>\\<rfloor> \\<in> {X. X = bot \\<or> X = null \\<or> (\\<forall>x\\<in>set \\<lceil>\\<lceil>X\\<rceil>\\<rceil>. x \\<noteq> \\<bottom>)}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>S b \\<tau>.\n       \\<lbrakk>S \\<noteq> \\<bottom>; S \\<noteq> null;\n        b \\<noteq> \\<bottom>\\<rbrakk>\n       \\<Longrightarrow> \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                      S\\<rceil>\\<rceil> @\n     [b]\\<rfloor>\\<rfloor>\n                         \\<in> {X. X = \\<bottom> \\<or>\n                                   X = null \\<or>\n                                   (\\<forall>x\n       \\<in>set \\<lceil>\\<lceil>X\\<rceil>\\<rceil>.\n x \\<noteq> \\<bottom>)}", "by(auto intro!:Sequence_inv_lemma[simplified OclValid_def \n                                       defined_def false_def true_def null_fun_def bot_fun_def])"], ["proof (state)\nthis:\n  \\<lbrakk>?S \\<noteq> \\<bottom>; ?S \\<noteq> null;\n   ?b \\<noteq> \\<bottom>\\<rbrakk>\n  \\<Longrightarrow> \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                 ?S\\<rceil>\\<rceil> @\n[?b]\\<rfloor>\\<rfloor>\n                    \\<in> {X. X = \\<bottom> \\<or>\n                              X = null \\<or>\n                              (\\<forall>x\n  \\<in>set \\<lceil>\\<lceil>X\\<rceil>\\<rceil>.\n                                  x \\<noteq> \\<bottom>)}\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       OclIterate S->including\\<^sub>S\\<^sub>e\\<^sub>q(a) A P x =\n       OclIterate S (P a A) P x", "have P: \"\\<And>l A A' \\<tau>. A \\<tau> = A' \\<tau> \\<Longrightarrow> foldr P l A \\<tau> = foldr P l A' \\<tau>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>l A A' \\<tau>.\n       A \\<tau> = A' \\<tau> \\<Longrightarrow>\n       foldr P l A \\<tau> = foldr P l A' \\<tau>", "apply(rule list.induct, simp, simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>A A' \\<tau> x1 x2.\n       \\<lbrakk>A \\<tau> = A' \\<tau>;\n        foldr P x2 A \\<tau> = foldr P x2 A' \\<tau>\\<rbrakk>\n       \\<Longrightarrow> P x1 (foldr P x2 A) \\<tau> =\n                         P x1 (foldr P x2 A') \\<tau>", "by(subst (1 2) P_cp', simp)"], ["proof (state)\nthis:\n  ?A1 ?\\<tau>1 = ?A'1 ?\\<tau>1 \\<Longrightarrow>\n  foldr P ?l1 ?A1 ?\\<tau>1 = foldr P ?l1 ?A'1 ?\\<tau>1\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       OclIterate S->including\\<^sub>S\\<^sub>e\\<^sub>q(a) A P x =\n       OclIterate S (P a A) P x", "fix \\<tau>"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       OclIterate S->including\\<^sub>S\\<^sub>e\\<^sub>q(a) A P x =\n       OclIterate S (P a A) P x", "show \"OclIterate (S->including\\<^sub>S\\<^sub>e\\<^sub>q(a)) A P \\<tau> = OclIterate S (P a A) P \\<tau>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. OclIterate S->including\\<^sub>S\\<^sub>e\\<^sub>q(a) A P \\<tau> =\n    OclIterate S (P a A) P \\<tau>", "apply(subst cp_OclIterate, subst OclIncluding_def, simp split:)"], ["proof (prove)\ngoal (1 subgoal):\n 1. ((\\<delta> S) \\<tau> = true \\<tau> \\<and>\n     (\\<upsilon> a) \\<tau> = true \\<tau> \\<longrightarrow>\n     OclIterate\n      (\\<lambda>_.\n          Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n           \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n        (S \\<tau>)\\<rceil>\\<rceil> @\n                             [a \\<tau>]\\<rfloor>\\<rfloor>)\n      A P \\<tau> =\n     OclIterate S (P a A) P \\<tau>) \\<and>\n    (((\\<delta> S) \\<tau> = true \\<tau> \\<longrightarrow>\n      (\\<upsilon> a) \\<tau> \\<noteq> true \\<tau>) \\<longrightarrow>\n     OclIterate (\\<lambda>_. invalid \\<tau>) A P \\<tau> =\n     OclIterate S (P a A) P \\<tau>)", "apply(intro conjI impI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. (\\<delta> S) \\<tau> = true \\<tau> \\<and>\n    (\\<upsilon> a) \\<tau> = true \\<tau> \\<Longrightarrow>\n    OclIterate\n     (\\<lambda>_.\n         Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n          \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n       (S \\<tau>)\\<rceil>\\<rceil> @\n                            [a \\<tau>]\\<rfloor>\\<rfloor>)\n     A P \\<tau> =\n    OclIterate S (P a A) P \\<tau>\n 2. (\\<delta> S) \\<tau> = true \\<tau> \\<longrightarrow>\n    (\\<upsilon> a) \\<tau> \\<noteq> true \\<tau> \\<Longrightarrow>\n    OclIterate (\\<lambda>_. invalid \\<tau>) A P \\<tau> =\n    OclIterate S (P a A) P \\<tau>", "apply(simp add: OclIterate_def)"], ["proof (prove)\ngoal (2 subgoals):\n 1. (\\<delta> S) \\<tau> = true \\<tau> \\<and>\n    (\\<upsilon> a) \\<tau> = true \\<tau> \\<Longrightarrow>\n    ((\\<delta> (\\<lambda>_.\n                   Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                    \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                 (S \\<tau>)\\<rceil>\\<rceil> @\n[a \\<tau>]\\<rfloor>\\<rfloor>))\n      \\<tau> =\n     true \\<tau> \\<and>\n     (\\<upsilon> A) \\<tau> = true \\<tau> \\<longrightarrow>\n     ((\\<upsilon> P a A) \\<tau> = true \\<tau> \\<longrightarrow>\n      foldr P\n       (map (\\<lambda>a \\<tau>. a)\n         \\<lceil>\\<lceil>Rep_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                          (Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                            \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                         (S \\<tau>)\\<rceil>\\<rceil> @\n        [a \\<tau>]\\<rfloor>\\<rfloor>)\\<rceil>\\<rceil>)\n       A \\<tau> =\n      foldr P\n       (map (\\<lambda>a \\<tau>. a)\n         \\<lceil>\\<lceil>Rep_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                          (S \\<tau>)\\<rceil>\\<rceil>)\n       (P a A) \\<tau>) \\<and>\n     ((\\<upsilon> P a A) \\<tau> \\<noteq> true \\<tau> \\<longrightarrow>\n      foldr P\n       (map (\\<lambda>a \\<tau>. a)\n         \\<lceil>\\<lceil>Rep_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                          (Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                            \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                         (S \\<tau>)\\<rceil>\\<rceil> @\n        [a \\<tau>]\\<rfloor>\\<rfloor>)\\<rceil>\\<rceil>)\n       A \\<tau> =\n      \\<bottom>)) \\<and>\n    (((\\<delta> (\\<lambda>_.\n                    Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                     \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                  (S \\<tau>)\\<rceil>\\<rceil> @\n [a \\<tau>]\\<rfloor>\\<rfloor>))\n       \\<tau> =\n      true \\<tau> \\<longrightarrow>\n      (\\<upsilon> A) \\<tau> \\<noteq> true \\<tau>) \\<longrightarrow>\n     (\\<upsilon> P a A) \\<tau> = true \\<tau> \\<longrightarrow>\n     \\<bottom> =\n     foldr P\n      (map (\\<lambda>a \\<tau>. a)\n        \\<lceil>\\<lceil>Rep_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                         (S \\<tau>)\\<rceil>\\<rceil>)\n      (P a A) \\<tau>)\n 2. (\\<delta> S) \\<tau> = true \\<tau> \\<longrightarrow>\n    (\\<upsilon> a) \\<tau> \\<noteq> true \\<tau> \\<Longrightarrow>\n    OclIterate (\\<lambda>_. invalid \\<tau>) A P \\<tau> =\n    OclIterate S (P a A) P \\<tau>", "apply(intro conjI impI)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<lbrakk>(\\<delta> S) \\<tau> = true \\<tau> \\<and>\n             (\\<upsilon> a) \\<tau> = true \\<tau>;\n     (\\<delta> (\\<lambda>_.\n                   Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                    \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                 (S \\<tau>)\\<rceil>\\<rceil> @\n[a \\<tau>]\\<rfloor>\\<rfloor>))\n      \\<tau> =\n     true \\<tau> \\<and>\n     (\\<upsilon> A) \\<tau> = true \\<tau>;\n     (\\<upsilon> P a A) \\<tau> = true \\<tau>\\<rbrakk>\n    \\<Longrightarrow> foldr P\n                       (map (\\<lambda>a \\<tau>. a)\n                         \\<lceil>\\<lceil>Rep_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n    (Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n      \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n   (S \\<tau>)\\<rceil>\\<rceil> @\n                        [a \\<tau>]\\<rfloor>\\<rfloor>)\\<rceil>\\<rceil>)\n                       A \\<tau> =\n                      foldr P\n                       (map (\\<lambda>a \\<tau>. a)\n                         \\<lceil>\\<lceil>Rep_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n    (S \\<tau>)\\<rceil>\\<rceil>)\n                       (P a A) \\<tau>\n 2. \\<lbrakk>(\\<delta> S) \\<tau> = true \\<tau> \\<and>\n             (\\<upsilon> a) \\<tau> = true \\<tau>;\n     (\\<delta> (\\<lambda>_.\n                   Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                    \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                 (S \\<tau>)\\<rceil>\\<rceil> @\n[a \\<tau>]\\<rfloor>\\<rfloor>))\n      \\<tau> =\n     true \\<tau> \\<and>\n     (\\<upsilon> A) \\<tau> = true \\<tau>;\n     (\\<upsilon> P a A) \\<tau> \\<noteq> true \\<tau>\\<rbrakk>\n    \\<Longrightarrow> foldr P\n                       (map (\\<lambda>a \\<tau>. a)\n                         \\<lceil>\\<lceil>Rep_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n    (Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n      \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n   (S \\<tau>)\\<rceil>\\<rceil> @\n                        [a \\<tau>]\\<rfloor>\\<rfloor>)\\<rceil>\\<rceil>)\n                       A \\<tau> =\n                      \\<bottom>\n 3. \\<lbrakk>(\\<delta> S) \\<tau> = true \\<tau> \\<and>\n             (\\<upsilon> a) \\<tau> = true \\<tau>;\n     (\\<delta> (\\<lambda>_.\n                   Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                    \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                 (S \\<tau>)\\<rceil>\\<rceil> @\n[a \\<tau>]\\<rfloor>\\<rfloor>))\n      \\<tau> =\n     true \\<tau> \\<longrightarrow>\n     (\\<upsilon> A) \\<tau> \\<noteq> true \\<tau>;\n     (\\<upsilon> P a A) \\<tau> = true \\<tau>\\<rbrakk>\n    \\<Longrightarrow> \\<bottom> =\n                      foldr P\n                       (map (\\<lambda>a \\<tau>. a)\n                         \\<lceil>\\<lceil>Rep_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n    (S \\<tau>)\\<rceil>\\<rceil>)\n                       (P a A) \\<tau>\n 4. (\\<delta> S) \\<tau> = true \\<tau> \\<longrightarrow>\n    (\\<upsilon> a) \\<tau> \\<noteq> true \\<tau> \\<Longrightarrow>\n    OclIterate (\\<lambda>_. invalid \\<tau>) A P \\<tau> =\n    OclIterate S (P a A) P \\<tau>", "apply(subst Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e_inverse[OF A],\n           (simp add: foundation16[simplified OclValid_def] foundation18'[simplified OclValid_def])+)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<lbrakk>S \\<tau> \\<noteq> \\<bottom> \\<and>\n             S \\<tau> \\<noteq> null \\<and> a \\<tau> \\<noteq> \\<bottom>;\n     Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n      \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n   (S \\<tau>)\\<rceil>\\<rceil> @\n                        [a \\<tau>]\\<rfloor>\\<rfloor> \\<noteq>\n     \\<bottom> \\<and>\n     Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n      \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n   (S \\<tau>)\\<rceil>\\<rceil> @\n                        [a \\<tau>]\\<rfloor>\\<rfloor> \\<noteq>\n     null \\<and>\n     A \\<tau> \\<noteq> \\<bottom>;\n     P a A \\<tau> \\<noteq> \\<bottom>\\<rbrakk>\n    \\<Longrightarrow> foldr P\n                       (map (\\<lambda>a \\<tau>. a)\n                         \\<lceil>\\<lceil>Rep_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n    (S \\<tau>)\\<rceil>\\<rceil>)\n                       (P (\\<lambda>\\<tau>'. a \\<tau>) A) \\<tau> =\n                      foldr P\n                       (map (\\<lambda>a \\<tau>. a)\n                         \\<lceil>\\<lceil>Rep_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n    (S \\<tau>)\\<rceil>\\<rceil>)\n                       (P a A) \\<tau>\n 2. \\<lbrakk>(\\<delta> S) \\<tau> = true \\<tau> \\<and>\n             (\\<upsilon> a) \\<tau> = true \\<tau>;\n     (\\<delta> (\\<lambda>_.\n                   Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                    \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                 (S \\<tau>)\\<rceil>\\<rceil> @\n[a \\<tau>]\\<rfloor>\\<rfloor>))\n      \\<tau> =\n     true \\<tau> \\<and>\n     (\\<upsilon> A) \\<tau> = true \\<tau>;\n     (\\<upsilon> P a A) \\<tau> \\<noteq> true \\<tau>\\<rbrakk>\n    \\<Longrightarrow> foldr P\n                       (map (\\<lambda>a \\<tau>. a)\n                         \\<lceil>\\<lceil>Rep_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n    (Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n      \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n   (S \\<tau>)\\<rceil>\\<rceil> @\n                        [a \\<tau>]\\<rfloor>\\<rfloor>)\\<rceil>\\<rceil>)\n                       A \\<tau> =\n                      \\<bottom>\n 3. \\<lbrakk>(\\<delta> S) \\<tau> = true \\<tau> \\<and>\n             (\\<upsilon> a) \\<tau> = true \\<tau>;\n     (\\<delta> (\\<lambda>_.\n                   Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                    \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                 (S \\<tau>)\\<rceil>\\<rceil> @\n[a \\<tau>]\\<rfloor>\\<rfloor>))\n      \\<tau> =\n     true \\<tau> \\<longrightarrow>\n     (\\<upsilon> A) \\<tau> \\<noteq> true \\<tau>;\n     (\\<upsilon> P a A) \\<tau> = true \\<tau>\\<rbrakk>\n    \\<Longrightarrow> \\<bottom> =\n                      foldr P\n                       (map (\\<lambda>a \\<tau>. a)\n                         \\<lceil>\\<lceil>Rep_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n    (S \\<tau>)\\<rceil>\\<rceil>)\n                       (P a A) \\<tau>\n 4. (\\<delta> S) \\<tau> = true \\<tau> \\<longrightarrow>\n    (\\<upsilon> a) \\<tau> \\<noteq> true \\<tau> \\<Longrightarrow>\n    OclIterate (\\<lambda>_. invalid \\<tau>) A P \\<tau> =\n    OclIterate S (P a A) P \\<tau>", "apply(rule P, metis P_cp)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>(\\<delta> S) \\<tau> = true \\<tau> \\<and>\n             (\\<upsilon> a) \\<tau> = true \\<tau>;\n     (\\<delta> (\\<lambda>_.\n                   Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                    \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                 (S \\<tau>)\\<rceil>\\<rceil> @\n[a \\<tau>]\\<rfloor>\\<rfloor>))\n      \\<tau> =\n     true \\<tau> \\<and>\n     (\\<upsilon> A) \\<tau> = true \\<tau>;\n     (\\<upsilon> P a A) \\<tau> \\<noteq> true \\<tau>\\<rbrakk>\n    \\<Longrightarrow> foldr P\n                       (map (\\<lambda>a \\<tau>. a)\n                         \\<lceil>\\<lceil>Rep_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n    (Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n      \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n   (S \\<tau>)\\<rceil>\\<rceil> @\n                        [a \\<tau>]\\<rfloor>\\<rfloor>)\\<rceil>\\<rceil>)\n                       A \\<tau> =\n                      \\<bottom>\n 2. \\<lbrakk>(\\<delta> S) \\<tau> = true \\<tau> \\<and>\n             (\\<upsilon> a) \\<tau> = true \\<tau>;\n     (\\<delta> (\\<lambda>_.\n                   Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                    \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                 (S \\<tau>)\\<rceil>\\<rceil> @\n[a \\<tau>]\\<rfloor>\\<rfloor>))\n      \\<tau> =\n     true \\<tau> \\<longrightarrow>\n     (\\<upsilon> A) \\<tau> \\<noteq> true \\<tau>;\n     (\\<upsilon> P a A) \\<tau> = true \\<tau>\\<rbrakk>\n    \\<Longrightarrow> \\<bottom> =\n                      foldr P\n                       (map (\\<lambda>a \\<tau>. a)\n                         \\<lceil>\\<lceil>Rep_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n    (S \\<tau>)\\<rceil>\\<rceil>)\n                       (P a A) \\<tau>\n 3. (\\<delta> S) \\<tau> = true \\<tau> \\<longrightarrow>\n    (\\<upsilon> a) \\<tau> \\<noteq> true \\<tau> \\<Longrightarrow>\n    OclIterate (\\<lambda>_. invalid \\<tau>) A P \\<tau> =\n    OclIterate S (P a A) P \\<tau>", "apply (metis P_valid_arg)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>(\\<delta> S) \\<tau> = true \\<tau> \\<and>\n             (\\<upsilon> a) \\<tau> = true \\<tau>;\n     (\\<delta> (\\<lambda>_.\n                   Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                    \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                 (S \\<tau>)\\<rceil>\\<rceil> @\n[a \\<tau>]\\<rfloor>\\<rfloor>))\n      \\<tau> =\n     true \\<tau> \\<longrightarrow>\n     (\\<upsilon> A) \\<tau> \\<noteq> true \\<tau>;\n     (\\<upsilon> P a A) \\<tau> = true \\<tau>\\<rbrakk>\n    \\<Longrightarrow> \\<bottom> =\n                      foldr P\n                       (map (\\<lambda>a \\<tau>. a)\n                         \\<lceil>\\<lceil>Rep_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n    (S \\<tau>)\\<rceil>\\<rceil>)\n                       (P a A) \\<tau>\n 2. (\\<delta> S) \\<tau> = true \\<tau> \\<longrightarrow>\n    (\\<upsilon> a) \\<tau> \\<noteq> true \\<tau> \\<Longrightarrow>\n    OclIterate (\\<lambda>_. invalid \\<tau>) A P \\<tau> =\n    OclIterate S (P a A) P \\<tau>", "apply(simp add: P_valid_arg[symmetric])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>(\\<delta> S) \\<tau> = true \\<tau> \\<and>\n             (\\<upsilon> a) \\<tau> = true \\<tau>;\n     (\\<delta> (\\<lambda>_.\n                   Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                    \\<lfloor>\\<lfloor>\\<lceil>\\<lceil>Rep_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                 (S \\<tau>)\\<rceil>\\<rceil> @\n[a \\<tau>]\\<rfloor>\\<rfloor>))\n      \\<tau> \\<noteq>\n     true \\<tau>;\n     (\\<upsilon> A) \\<tau> = true \\<tau>\\<rbrakk>\n    \\<Longrightarrow> \\<bottom> =\n                      foldr P\n                       (map (\\<lambda>a \\<tau>. a)\n                         \\<lceil>\\<lceil>Rep_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n    (S \\<tau>)\\<rceil>\\<rceil>)\n                       (P a A) \\<tau>\n 2. (\\<delta> S) \\<tau> = true \\<tau> \\<longrightarrow>\n    (\\<upsilon> a) \\<tau> \\<noteq> true \\<tau> \\<Longrightarrow>\n    OclIterate (\\<lambda>_. invalid \\<tau>) A P \\<tau> =\n    OclIterate S (P a A) P \\<tau>", "apply (metis (lifting, no_types) OclIncluding.def_body' OclValid_def foundation16)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<delta> S) \\<tau> = true \\<tau> \\<longrightarrow>\n    (\\<upsilon> a) \\<tau> \\<noteq> true \\<tau> \\<Longrightarrow>\n    OclIterate (\\<lambda>_. invalid \\<tau>) A P \\<tau> =\n    OclIterate S (P a A) P \\<tau>", "apply(simp add: OclIterate_def defined_def invalid_def bot_option_def bot_fun_def false_def true_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (if S \\<tau> = \\<bottom> \\<or> S \\<tau> = null \\<tau> then false \\<tau>\n     else true \\<tau>) =\n    \\<lfloor>\\<lfloor>True\\<rfloor>\\<rfloor> \\<longrightarrow>\n    (\\<upsilon> a) \\<tau> \\<noteq>\n    \\<lfloor>\\<lfloor>True\\<rfloor>\\<rfloor> \\<Longrightarrow>\n    S \\<tau> \\<noteq> \\<bottom> \\<and>\n    S \\<tau> \\<noteq> null \\<tau> \\<longrightarrow>\n    (\\<upsilon> P a A) \\<tau> =\n    \\<lfloor>\\<lfloor>True\\<rfloor>\\<rfloor> \\<longrightarrow>\n    \\<bottom> =\n    foldr P\n     (map (\\<lambda>a \\<tau>. a)\n       \\<lceil>\\<lceil>Rep_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                        (S \\<tau>)\\<rceil>\\<rceil>)\n     (P a A) \\<tau>", "apply(intro impI, simp add: false_def true_def P_valid_arg)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>(\\<upsilon> a) \\<tau> \\<noteq>\n             \\<lfloor>\\<lfloor>True\\<rfloor>\\<rfloor>;\n     S \\<tau> \\<noteq> \\<bottom> \\<and> S \\<tau> \\<noteq> null \\<tau>;\n     (\\<upsilon> P a A) \\<tau> =\n     \\<lfloor>\\<lfloor>True\\<rfloor>\\<rfloor>\\<rbrakk>\n    \\<Longrightarrow> \\<bottom> =\n                      foldr P\n                       (map (\\<lambda>a \\<tau>. a)\n                         \\<lceil>\\<lceil>Rep_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n    (S \\<tau>)\\<rceil>\\<rceil>)\n                       (P a A) \\<tau>", "by (metis P_cp P_valid_arg UML_Types.bot_fun_def cp_valid invalid_def strict1 true_def valid1 valid_def)"], ["proof (state)\nthis:\n  OclIterate S->including\\<^sub>S\\<^sub>e\\<^sub>q(a) A P \\<tau> =\n  OclIterate S (P a A) P \\<tau>\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma OclIterate_prepend[simp,code_unfold]:\nassumes strict1 : \"\\<And>X. P invalid X = invalid\"\nand     strict2 : \"\\<And>X. P X invalid = invalid\"\nand     P_cp    : \"\\<And> x y \\<tau>. P x y \\<tau> = P (\\<lambda> _. x \\<tau>) y \\<tau>\"\nand     P_cp'   : \"\\<And> x y \\<tau>. P x y \\<tau> = P x (\\<lambda> _. y \\<tau>) \\<tau>\"\nshows  \"(S->prepend\\<^sub>S\\<^sub>e\\<^sub>q(a))->iterate\\<^sub>S\\<^sub>e\\<^sub>q(b; x = A | P b x) = P a (S->iterate\\<^sub>S\\<^sub>e\\<^sub>q(b; x = A| P b x))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. OclIterate S->prepend\\<^sub>S\\<^sub>e\\<^sub>q(a) A P =\n    P a (OclIterate S A P)", "apply(rule ext)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       OclIterate S->prepend\\<^sub>S\\<^sub>e\\<^sub>q(a) A P x =\n       P a (OclIterate S A P) x", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       OclIterate S->prepend\\<^sub>S\\<^sub>e\\<^sub>q(a) A P x =\n       P a (OclIterate S A P) x", "have B: \"\\<And>S a \\<tau>. S \\<noteq> \\<bottom> \\<Longrightarrow> S \\<noteq> null \\<Longrightarrow> a \\<noteq> \\<bottom>  \\<Longrightarrow>\n                  \\<lfloor>\\<lfloor>a # \\<lceil>\\<lceil>Rep_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e S\\<rceil>\\<rceil>\\<rfloor>\\<rfloor> \\<in> {X. X = bot \\<or> X = null \\<or> (\\<forall>x\\<in>set \\<lceil>\\<lceil>X\\<rceil>\\<rceil>. x \\<noteq> \\<bottom>)}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>S a \\<tau>.\n       \\<lbrakk>S \\<noteq> \\<bottom>; S \\<noteq> null;\n        a \\<noteq> \\<bottom>\\<rbrakk>\n       \\<Longrightarrow> \\<lfloor>\\<lfloor>a #\n     \\<lceil>\\<lceil>Rep_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                      S\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>\n                         \\<in> {X. X = \\<bottom> \\<or>\n                                   X = null \\<or>\n                                   (\\<forall>x\n       \\<in>set \\<lceil>\\<lceil>X\\<rceil>\\<rceil>.\n x \\<noteq> \\<bottom>)}", "by(auto intro!:Sequence_inv_lemma[simplified OclValid_def \n                                       defined_def false_def true_def null_fun_def bot_fun_def])"], ["proof (state)\nthis:\n  \\<lbrakk>?S \\<noteq> \\<bottom>; ?S \\<noteq> null;\n   ?a \\<noteq> \\<bottom>\\<rbrakk>\n  \\<Longrightarrow> \\<lfloor>\\<lfloor>?a #\n\\<lceil>\\<lceil>Rep_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                 ?S\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>\n                    \\<in> {X. X = \\<bottom> \\<or>\n                              X = null \\<or>\n                              (\\<forall>x\n  \\<in>set \\<lceil>\\<lceil>X\\<rceil>\\<rceil>.\n                                  x \\<noteq> \\<bottom>)}\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       OclIterate S->prepend\\<^sub>S\\<^sub>e\\<^sub>q(a) A P x =\n       P a (OclIterate S A P) x", "fix \\<tau>"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       OclIterate S->prepend\\<^sub>S\\<^sub>e\\<^sub>q(a) A P x =\n       P a (OclIterate S A P) x", "show \"OclIterate (S->prepend\\<^sub>S\\<^sub>e\\<^sub>q(a)) A P \\<tau> = P a (OclIterate S A P) \\<tau>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. OclIterate S->prepend\\<^sub>S\\<^sub>e\\<^sub>q(a) A P \\<tau> =\n    P a (OclIterate S A P) \\<tau>", "apply(subst cp_OclIterate, subst OclPrepend_def, simp split:)"], ["proof (prove)\ngoal (1 subgoal):\n 1. ((\\<delta> S) \\<tau> = true \\<tau> \\<and>\n     (\\<upsilon> a) \\<tau> = true \\<tau> \\<longrightarrow>\n     OclIterate\n      (\\<lambda>_.\n          Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n           \\<lfloor>\\<lfloor>a \\<tau> #\n                             \\<lceil>\\<lceil>Rep_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n        (S \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>)\n      A P \\<tau> =\n     P a (OclIterate S A P) \\<tau>) \\<and>\n    (((\\<delta> S) \\<tau> = true \\<tau> \\<longrightarrow>\n      (\\<upsilon> a) \\<tau> \\<noteq> true \\<tau>) \\<longrightarrow>\n     OclIterate (\\<lambda>_. invalid \\<tau>) A P \\<tau> =\n     P a (OclIterate S A P) \\<tau>)", "apply(intro conjI impI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. (\\<delta> S) \\<tau> = true \\<tau> \\<and>\n    (\\<upsilon> a) \\<tau> = true \\<tau> \\<Longrightarrow>\n    OclIterate\n     (\\<lambda>_.\n         Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n          \\<lfloor>\\<lfloor>a \\<tau> #\n                            \\<lceil>\\<lceil>Rep_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n       (S \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>)\n     A P \\<tau> =\n    P a (OclIterate S A P) \\<tau>\n 2. (\\<delta> S) \\<tau> = true \\<tau> \\<longrightarrow>\n    (\\<upsilon> a) \\<tau> \\<noteq> true \\<tau> \\<Longrightarrow>\n    OclIterate (\\<lambda>_. invalid \\<tau>) A P \\<tau> =\n    P a (OclIterate S A P) \\<tau>", "apply(subst P_cp')"], ["proof (prove)\ngoal (2 subgoals):\n 1. (\\<delta> S) \\<tau> = true \\<tau> \\<and>\n    (\\<upsilon> a) \\<tau> = true \\<tau> \\<Longrightarrow>\n    OclIterate\n     (\\<lambda>_.\n         Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n          \\<lfloor>\\<lfloor>a \\<tau> #\n                            \\<lceil>\\<lceil>Rep_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n       (S \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>)\n     A P \\<tau> =\n    P a (\\<lambda>_. OclIterate S A P \\<tau>) \\<tau>\n 2. (\\<delta> S) \\<tau> = true \\<tau> \\<longrightarrow>\n    (\\<upsilon> a) \\<tau> \\<noteq> true \\<tau> \\<Longrightarrow>\n    OclIterate (\\<lambda>_. invalid \\<tau>) A P \\<tau> =\n    P a (OclIterate S A P) \\<tau>", "apply(simp add: OclIterate_def)"], ["proof (prove)\ngoal (2 subgoals):\n 1. (\\<delta> S) \\<tau> = true \\<tau> \\<and>\n    (\\<upsilon> a) \\<tau> = true \\<tau> \\<Longrightarrow>\n    ((\\<upsilon> A) \\<tau> = true \\<tau> \\<longrightarrow>\n     ((\\<delta> (\\<lambda>_.\n                    Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                     \\<lfloor>\\<lfloor>a \\<tau> #\n \\<lceil>\\<lceil>Rep_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                  (S \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>))\n       \\<tau> =\n      true \\<tau> \\<longrightarrow>\n      foldr P\n       (map (\\<lambda>a \\<tau>. a)\n         \\<lceil>\\<lceil>Rep_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                          (Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                            \\<lfloor>\\<lfloor>a \\<tau> #\n        \\<lceil>\\<lceil>Rep_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                         (S \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>)\\<rceil>\\<rceil>)\n       A \\<tau> =\n      P a (\\<lambda>_.\n              foldr P\n               (map (\\<lambda>a \\<tau>. a)\n                 \\<lceil>\\<lceil>Rep_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                  (S \\<tau>)\\<rceil>\\<rceil>)\n               A \\<tau>)\n       \\<tau>) \\<and>\n     ((\\<delta> (\\<lambda>_.\n                    Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                     \\<lfloor>\\<lfloor>a \\<tau> #\n \\<lceil>\\<lceil>Rep_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                  (S \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>))\n       \\<tau> \\<noteq>\n      true \\<tau> \\<longrightarrow>\n      \\<bottom> =\n      P a (\\<lambda>_.\n              foldr P\n               (map (\\<lambda>a \\<tau>. a)\n                 \\<lceil>\\<lceil>Rep_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                                  (S \\<tau>)\\<rceil>\\<rceil>)\n               A \\<tau>)\n       \\<tau>)) \\<and>\n    ((\\<upsilon> A) \\<tau> \\<noteq> true \\<tau> \\<longrightarrow>\n     \\<bottom> = P a (\\<lambda>_. \\<bottom>) \\<tau>)\n 2. (\\<delta> S) \\<tau> = true \\<tau> \\<longrightarrow>\n    (\\<upsilon> a) \\<tau> \\<noteq> true \\<tau> \\<Longrightarrow>\n    OclIterate (\\<lambda>_. invalid \\<tau>) A P \\<tau> =\n    P a (OclIterate S A P) \\<tau>", "apply(intro conjI impI)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<lbrakk>(\\<delta> S) \\<tau> = true \\<tau> \\<and>\n             (\\<upsilon> a) \\<tau> = true \\<tau>;\n     (\\<upsilon> A) \\<tau> = true \\<tau>;\n     (\\<delta> (\\<lambda>_.\n                   Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                    \\<lfloor>\\<lfloor>a \\<tau> #\n\\<lceil>\\<lceil>Rep_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                 (S \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>))\n      \\<tau> =\n     true \\<tau>\\<rbrakk>\n    \\<Longrightarrow> foldr P\n                       (map (\\<lambda>a \\<tau>. a)\n                         \\<lceil>\\<lceil>Rep_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n    (Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n      \\<lfloor>\\<lfloor>a \\<tau> #\n                        \\<lceil>\\<lceil>Rep_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n   (S \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>)\\<rceil>\\<rceil>)\n                       A \\<tau> =\n                      P a (\\<lambda>_.\n                              foldr P\n                               (map (\\<lambda>a \\<tau>. a)\n                                 \\<lceil>\\<lceil>Rep_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n            (S \\<tau>)\\<rceil>\\<rceil>)\n                               A \\<tau>)\n                       \\<tau>\n 2. \\<lbrakk>(\\<delta> S) \\<tau> = true \\<tau> \\<and>\n             (\\<upsilon> a) \\<tau> = true \\<tau>;\n     (\\<upsilon> A) \\<tau> = true \\<tau>;\n     (\\<delta> (\\<lambda>_.\n                   Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                    \\<lfloor>\\<lfloor>a \\<tau> #\n\\<lceil>\\<lceil>Rep_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                 (S \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>))\n      \\<tau> \\<noteq>\n     true \\<tau>\\<rbrakk>\n    \\<Longrightarrow> \\<bottom> =\n                      P a (\\<lambda>_.\n                              foldr P\n                               (map (\\<lambda>a \\<tau>. a)\n                                 \\<lceil>\\<lceil>Rep_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n            (S \\<tau>)\\<rceil>\\<rceil>)\n                               A \\<tau>)\n                       \\<tau>\n 3. \\<lbrakk>(\\<delta> S) \\<tau> = true \\<tau> \\<and>\n             (\\<upsilon> a) \\<tau> = true \\<tau>;\n     (\\<upsilon> A) \\<tau> \\<noteq> true \\<tau>\\<rbrakk>\n    \\<Longrightarrow> \\<bottom> = P a (\\<lambda>_. \\<bottom>) \\<tau>\n 4. (\\<delta> S) \\<tau> = true \\<tau> \\<longrightarrow>\n    (\\<upsilon> a) \\<tau> \\<noteq> true \\<tau> \\<Longrightarrow>\n    OclIterate (\\<lambda>_. invalid \\<tau>) A P \\<tau> =\n    P a (OclIterate S A P) \\<tau>", "apply(subst Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e_inverse[OF B],\n           (simp add: foundation16[simplified OclValid_def] foundation18'[simplified OclValid_def])+)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<lbrakk>S \\<tau> \\<noteq> \\<bottom> \\<and>\n             S \\<tau> \\<noteq> null \\<and> a \\<tau> \\<noteq> \\<bottom>;\n     A \\<tau> \\<noteq> \\<bottom>;\n     Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n      \\<lfloor>\\<lfloor>a \\<tau> #\n                        \\<lceil>\\<lceil>Rep_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n   (S \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor> \\<noteq>\n     \\<bottom> \\<and>\n     Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n      \\<lfloor>\\<lfloor>a \\<tau> #\n                        \\<lceil>\\<lceil>Rep_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n   (S \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor> \\<noteq>\n     null\\<rbrakk>\n    \\<Longrightarrow> P (\\<lambda>\\<tau>'. a \\<tau>)\n                       (foldr P\n                         (map (\\<lambda>a \\<tau>. a)\n                           \\<lceil>\\<lceil>Rep_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n      (S \\<tau>)\\<rceil>\\<rceil>)\n                         A)\n                       \\<tau> =\n                      P a (\\<lambda>_.\n                              foldr P\n                               (map (\\<lambda>a \\<tau>. a)\n                                 \\<lceil>\\<lceil>Rep_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n            (S \\<tau>)\\<rceil>\\<rceil>)\n                               A \\<tau>)\n                       \\<tau>\n 2. \\<lbrakk>(\\<delta> S) \\<tau> = true \\<tau> \\<and>\n             (\\<upsilon> a) \\<tau> = true \\<tau>;\n     (\\<upsilon> A) \\<tau> = true \\<tau>;\n     (\\<delta> (\\<lambda>_.\n                   Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                    \\<lfloor>\\<lfloor>a \\<tau> #\n\\<lceil>\\<lceil>Rep_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                 (S \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>))\n      \\<tau> \\<noteq>\n     true \\<tau>\\<rbrakk>\n    \\<Longrightarrow> \\<bottom> =\n                      P a (\\<lambda>_.\n                              foldr P\n                               (map (\\<lambda>a \\<tau>. a)\n                                 \\<lceil>\\<lceil>Rep_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n            (S \\<tau>)\\<rceil>\\<rceil>)\n                               A \\<tau>)\n                       \\<tau>\n 3. \\<lbrakk>(\\<delta> S) \\<tau> = true \\<tau> \\<and>\n             (\\<upsilon> a) \\<tau> = true \\<tau>;\n     (\\<upsilon> A) \\<tau> \\<noteq> true \\<tau>\\<rbrakk>\n    \\<Longrightarrow> \\<bottom> = P a (\\<lambda>_. \\<bottom>) \\<tau>\n 4. (\\<delta> S) \\<tau> = true \\<tau> \\<longrightarrow>\n    (\\<upsilon> a) \\<tau> \\<noteq> true \\<tau> \\<Longrightarrow>\n    OclIterate (\\<lambda>_. invalid \\<tau>) A P \\<tau> =\n    P a (OclIterate S A P) \\<tau>", "apply(simp add: P_cp'[symmetric])"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<lbrakk>S \\<tau> \\<noteq> \\<bottom> \\<and>\n             S \\<tau> \\<noteq> null \\<and> a \\<tau> \\<noteq> \\<bottom>;\n     A \\<tau> \\<noteq> \\<bottom>;\n     Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n      \\<lfloor>\\<lfloor>a \\<tau> #\n                        \\<lceil>\\<lceil>Rep_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n   (S \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor> \\<noteq>\n     \\<bottom> \\<and>\n     Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n      \\<lfloor>\\<lfloor>a \\<tau> #\n                        \\<lceil>\\<lceil>Rep_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n   (S \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor> \\<noteq>\n     null\\<rbrakk>\n    \\<Longrightarrow> P (\\<lambda>\\<tau>'. a \\<tau>)\n                       (foldr P\n                         (map (\\<lambda>a \\<tau>. a)\n                           \\<lceil>\\<lceil>Rep_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n      (S \\<tau>)\\<rceil>\\<rceil>)\n                         A)\n                       \\<tau> =\n                      P a (foldr P\n                            (map (\\<lambda>a \\<tau>. a)\n                              \\<lceil>\\<lceil>Rep_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n         (S \\<tau>)\\<rceil>\\<rceil>)\n                            A)\n                       \\<tau>\n 2. \\<lbrakk>(\\<delta> S) \\<tau> = true \\<tau> \\<and>\n             (\\<upsilon> a) \\<tau> = true \\<tau>;\n     (\\<upsilon> A) \\<tau> = true \\<tau>;\n     (\\<delta> (\\<lambda>_.\n                   Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                    \\<lfloor>\\<lfloor>a \\<tau> #\n\\<lceil>\\<lceil>Rep_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                 (S \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>))\n      \\<tau> \\<noteq>\n     true \\<tau>\\<rbrakk>\n    \\<Longrightarrow> \\<bottom> =\n                      P a (\\<lambda>_.\n                              foldr P\n                               (map (\\<lambda>a \\<tau>. a)\n                                 \\<lceil>\\<lceil>Rep_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n            (S \\<tau>)\\<rceil>\\<rceil>)\n                               A \\<tau>)\n                       \\<tau>\n 3. \\<lbrakk>(\\<delta> S) \\<tau> = true \\<tau> \\<and>\n             (\\<upsilon> a) \\<tau> = true \\<tau>;\n     (\\<upsilon> A) \\<tau> \\<noteq> true \\<tau>\\<rbrakk>\n    \\<Longrightarrow> \\<bottom> = P a (\\<lambda>_. \\<bottom>) \\<tau>\n 4. (\\<delta> S) \\<tau> = true \\<tau> \\<longrightarrow>\n    (\\<upsilon> a) \\<tau> \\<noteq> true \\<tau> \\<Longrightarrow>\n    OclIterate (\\<lambda>_. invalid \\<tau>) A P \\<tau> =\n    P a (OclIterate S A P) \\<tau>", "apply(subst P_cp, simp add: P_cp[symmetric])"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>(\\<delta> S) \\<tau> = true \\<tau> \\<and>\n             (\\<upsilon> a) \\<tau> = true \\<tau>;\n     (\\<upsilon> A) \\<tau> = true \\<tau>;\n     (\\<delta> (\\<lambda>_.\n                   Abs_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                    \\<lfloor>\\<lfloor>a \\<tau> #\n\\<lceil>\\<lceil>Rep_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n                 (S \\<tau>)\\<rceil>\\<rceil>\\<rfloor>\\<rfloor>))\n      \\<tau> \\<noteq>\n     true \\<tau>\\<rbrakk>\n    \\<Longrightarrow> \\<bottom> =\n                      P a (\\<lambda>_.\n                              foldr P\n                               (map (\\<lambda>a \\<tau>. a)\n                                 \\<lceil>\\<lceil>Rep_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n            (S \\<tau>)\\<rceil>\\<rceil>)\n                               A \\<tau>)\n                       \\<tau>\n 2. \\<lbrakk>(\\<delta> S) \\<tau> = true \\<tau> \\<and>\n             (\\<upsilon> a) \\<tau> = true \\<tau>;\n     (\\<upsilon> A) \\<tau> \\<noteq> true \\<tau>\\<rbrakk>\n    \\<Longrightarrow> \\<bottom> = P a (\\<lambda>_. \\<bottom>) \\<tau>\n 3. (\\<delta> S) \\<tau> = true \\<tau> \\<longrightarrow>\n    (\\<upsilon> a) \\<tau> \\<noteq> true \\<tau> \\<Longrightarrow>\n    OclIterate (\\<lambda>_. invalid \\<tau>) A P \\<tau> =\n    P a (OclIterate S A P) \\<tau>", "apply (metis (no_types) OclPrepend.def_body' OclValid_def foundation16)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>(\\<delta> S) \\<tau> = true \\<tau> \\<and>\n             (\\<upsilon> a) \\<tau> = true \\<tau>;\n     (\\<upsilon> A) \\<tau> \\<noteq> true \\<tau>\\<rbrakk>\n    \\<Longrightarrow> \\<bottom> = P a (\\<lambda>_. \\<bottom>) \\<tau>\n 2. (\\<delta> S) \\<tau> = true \\<tau> \\<longrightarrow>\n    (\\<upsilon> a) \\<tau> \\<noteq> true \\<tau> \\<Longrightarrow>\n    OclIterate (\\<lambda>_. invalid \\<tau>) A P \\<tau> =\n    P a (OclIterate S A P) \\<tau>", "apply (metis P_cp' invalid_def strict2 valid_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<delta> S) \\<tau> = true \\<tau> \\<longrightarrow>\n    (\\<upsilon> a) \\<tau> \\<noteq> true \\<tau> \\<Longrightarrow>\n    OclIterate (\\<lambda>_. invalid \\<tau>) A P \\<tau> =\n    P a (OclIterate S A P) \\<tau>", "apply(subst P_cp',\n        simp add: OclIterate_def defined_def invalid_def bot_option_def bot_fun_def false_def true_def,\n        intro conjI impI)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<lbrakk>(if S \\<tau> = \\<bottom> \\<or> S \\<tau> = null \\<tau>\n              then false \\<tau> else true \\<tau>) =\n             \\<lfloor>\\<lfloor>True\\<rfloor>\\<rfloor> \\<longrightarrow>\n             (\\<upsilon> a) \\<tau> \\<noteq>\n             \\<lfloor>\\<lfloor>True\\<rfloor>\\<rfloor>;\n     S \\<tau> = \\<bottom>\\<rbrakk>\n    \\<Longrightarrow> \\<bottom> = P a (\\<lambda>_. \\<bottom>) \\<tau>\n 2. \\<lbrakk>(if S \\<tau> = \\<bottom> \\<or> S \\<tau> = null \\<tau>\n              then false \\<tau> else true \\<tau>) =\n             \\<lfloor>\\<lfloor>True\\<rfloor>\\<rfloor> \\<longrightarrow>\n             (\\<upsilon> a) \\<tau> \\<noteq>\n             \\<lfloor>\\<lfloor>True\\<rfloor>\\<rfloor>;\n     S \\<tau> = null \\<tau>\\<rbrakk>\n    \\<Longrightarrow> \\<bottom> = P a (\\<lambda>_. \\<bottom>) \\<tau>\n 3. \\<lbrakk>(if S \\<tau> = \\<bottom> \\<or> S \\<tau> = null \\<tau>\n              then false \\<tau> else true \\<tau>) =\n             \\<lfloor>\\<lfloor>True\\<rfloor>\\<rfloor> \\<longrightarrow>\n             (\\<upsilon> a) \\<tau> \\<noteq>\n             \\<lfloor>\\<lfloor>True\\<rfloor>\\<rfloor>;\n     S \\<tau> \\<noteq> \\<bottom> \\<and> S \\<tau> \\<noteq> null \\<tau>;\n     (\\<upsilon> A) \\<tau> =\n     \\<lfloor>\\<lfloor>True\\<rfloor>\\<rfloor>\\<rbrakk>\n    \\<Longrightarrow> \\<bottom> =\n                      P a (\\<lambda>_.\n                              foldr P\n                               (map (\\<lambda>a \\<tau>. a)\n                                 \\<lceil>\\<lceil>Rep_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n            (S \\<tau>)\\<rceil>\\<rceil>)\n                               A \\<tau>)\n                       \\<tau>\n 4. \\<lbrakk>(if S \\<tau> = \\<bottom> \\<or> S \\<tau> = null \\<tau>\n              then false \\<tau> else true \\<tau>) =\n             \\<lfloor>\\<lfloor>True\\<rfloor>\\<rfloor> \\<longrightarrow>\n             (\\<upsilon> a) \\<tau> \\<noteq>\n             \\<lfloor>\\<lfloor>True\\<rfloor>\\<rfloor>;\n     S \\<tau> \\<noteq> \\<bottom> \\<and> S \\<tau> \\<noteq> null \\<tau>;\n     (\\<upsilon> A) \\<tau> \\<noteq>\n     \\<lfloor>\\<lfloor>True\\<rfloor>\\<rfloor>\\<rbrakk>\n    \\<Longrightarrow> \\<bottom> = P a (\\<lambda>_. \\<bottom>) \\<tau>", "apply (metis P_cp' invalid_def strict2 valid_def)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>(if S \\<tau> = \\<bottom> \\<or> S \\<tau> = null \\<tau>\n              then false \\<tau> else true \\<tau>) =\n             \\<lfloor>\\<lfloor>True\\<rfloor>\\<rfloor> \\<longrightarrow>\n             (\\<upsilon> a) \\<tau> \\<noteq>\n             \\<lfloor>\\<lfloor>True\\<rfloor>\\<rfloor>;\n     S \\<tau> = null \\<tau>\\<rbrakk>\n    \\<Longrightarrow> \\<bottom> = P a (\\<lambda>_. \\<bottom>) \\<tau>\n 2. \\<lbrakk>(if S \\<tau> = \\<bottom> \\<or> S \\<tau> = null \\<tau>\n              then false \\<tau> else true \\<tau>) =\n             \\<lfloor>\\<lfloor>True\\<rfloor>\\<rfloor> \\<longrightarrow>\n             (\\<upsilon> a) \\<tau> \\<noteq>\n             \\<lfloor>\\<lfloor>True\\<rfloor>\\<rfloor>;\n     S \\<tau> \\<noteq> \\<bottom> \\<and> S \\<tau> \\<noteq> null \\<tau>;\n     (\\<upsilon> A) \\<tau> =\n     \\<lfloor>\\<lfloor>True\\<rfloor>\\<rfloor>\\<rbrakk>\n    \\<Longrightarrow> \\<bottom> =\n                      P a (\\<lambda>_.\n                              foldr P\n                               (map (\\<lambda>a \\<tau>. a)\n                                 \\<lceil>\\<lceil>Rep_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n            (S \\<tau>)\\<rceil>\\<rceil>)\n                               A \\<tau>)\n                       \\<tau>\n 3. \\<lbrakk>(if S \\<tau> = \\<bottom> \\<or> S \\<tau> = null \\<tau>\n              then false \\<tau> else true \\<tau>) =\n             \\<lfloor>\\<lfloor>True\\<rfloor>\\<rfloor> \\<longrightarrow>\n             (\\<upsilon> a) \\<tau> \\<noteq>\n             \\<lfloor>\\<lfloor>True\\<rfloor>\\<rfloor>;\n     S \\<tau> \\<noteq> \\<bottom> \\<and> S \\<tau> \\<noteq> null \\<tau>;\n     (\\<upsilon> A) \\<tau> \\<noteq>\n     \\<lfloor>\\<lfloor>True\\<rfloor>\\<rfloor>\\<rbrakk>\n    \\<Longrightarrow> \\<bottom> = P a (\\<lambda>_. \\<bottom>) \\<tau>", "apply (metis P_cp' invalid_def strict2 valid_def)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>(if S \\<tau> = \\<bottom> \\<or> S \\<tau> = null \\<tau>\n              then false \\<tau> else true \\<tau>) =\n             \\<lfloor>\\<lfloor>True\\<rfloor>\\<rfloor> \\<longrightarrow>\n             (\\<upsilon> a) \\<tau> \\<noteq>\n             \\<lfloor>\\<lfloor>True\\<rfloor>\\<rfloor>;\n     S \\<tau> \\<noteq> \\<bottom> \\<and> S \\<tau> \\<noteq> null \\<tau>;\n     (\\<upsilon> A) \\<tau> =\n     \\<lfloor>\\<lfloor>True\\<rfloor>\\<rfloor>\\<rbrakk>\n    \\<Longrightarrow> \\<bottom> =\n                      P a (\\<lambda>_.\n                              foldr P\n                               (map (\\<lambda>a \\<tau>. a)\n                                 \\<lceil>\\<lceil>Rep_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e\n            (S \\<tau>)\\<rceil>\\<rceil>)\n                               A \\<tau>)\n                       \\<tau>\n 2. \\<lbrakk>(if S \\<tau> = \\<bottom> \\<or> S \\<tau> = null \\<tau>\n              then false \\<tau> else true \\<tau>) =\n             \\<lfloor>\\<lfloor>True\\<rfloor>\\<rfloor> \\<longrightarrow>\n             (\\<upsilon> a) \\<tau> \\<noteq>\n             \\<lfloor>\\<lfloor>True\\<rfloor>\\<rfloor>;\n     S \\<tau> \\<noteq> \\<bottom> \\<and> S \\<tau> \\<noteq> null \\<tau>;\n     (\\<upsilon> A) \\<tau> \\<noteq>\n     \\<lfloor>\\<lfloor>True\\<rfloor>\\<rfloor>\\<rbrakk>\n    \\<Longrightarrow> \\<bottom> = P a (\\<lambda>_. \\<bottom>) \\<tau>", "apply (metis (no_types) P_cp invalid_def strict1 true_def valid1 valid_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>(if S \\<tau> = \\<bottom> \\<or> S \\<tau> = null \\<tau>\n              then false \\<tau> else true \\<tau>) =\n             \\<lfloor>\\<lfloor>True\\<rfloor>\\<rfloor> \\<longrightarrow>\n             (\\<upsilon> a) \\<tau> \\<noteq>\n             \\<lfloor>\\<lfloor>True\\<rfloor>\\<rfloor>;\n     S \\<tau> \\<noteq> \\<bottom> \\<and> S \\<tau> \\<noteq> null \\<tau>;\n     (\\<upsilon> A) \\<tau> \\<noteq>\n     \\<lfloor>\\<lfloor>True\\<rfloor>\\<rfloor>\\<rbrakk>\n    \\<Longrightarrow> \\<bottom> = P a (\\<lambda>_. \\<bottom>) \\<tau>", "apply (metis P_cp' invalid_def strict2 valid_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  OclIterate S->prepend\\<^sub>S\\<^sub>e\\<^sub>q(a) A P \\<tau> =\n  P a (OclIterate S A P) \\<tau>\n\ngoal:\nNo subgoals!", "qed"], ["", "(* < *)"], ["", "subsection\\<open>Test Statements\\<close>"], ["", "(*\nAssert   \"(\\<tau> \\<Turnstile> (Sequence{\\<lambda>_. \\<lfloor>\\<lfloor>x\\<rfloor>\\<rfloor>} \\<doteq> Sequence{\\<lambda>_. \\<lfloor>\\<lfloor>x\\<rfloor>\\<rfloor>}))\"\nAssert   \"(\\<tau> \\<Turnstile> (Sequence{\\<lambda>_. \\<lfloor>x\\<rfloor>} \\<doteq> Sequence{\\<lambda>_. \\<lfloor>x\\<rfloor>}))\"\n*)"], ["", "instantiation Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e  :: (equal)equal\nbegin"], ["", "definition \"HOL.equal k l \\<longleftrightarrow>  (k::('a::equal)Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e) =  l\""], ["", "instance"], ["proof (prove)\ngoal (1 subgoal):\n 1. OFCLASS(Sequence('a), equal_class)", "by standard (rule equal_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e_def)"], ["", "end"], ["", "lemma equal_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e_code [code]:\n  \"HOL.equal k (l::('a::{equal,null})Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e) \\<longleftrightarrow> Rep_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e k = Rep_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e l\""], ["proof (prove)\ngoal (1 subgoal):\n 1. equal_class.equal k l =\n    (Rep_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e k =\n     Rep_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e l)", "by (auto simp add: equal Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e.Rep_Sequence\\<^sub>b\\<^sub>a\\<^sub>s\\<^sub>e_inject)"], ["", "Assert   \"\\<tau> \\<Turnstile> (Sequence{} \\<doteq> Sequence{})\""], ["", "Assert   \"\\<tau> \\<Turnstile> (Sequence{\\<one>,\\<two>} \\<triangleq> Sequence{}->prepend\\<^sub>S\\<^sub>e\\<^sub>q(\\<two>)->prepend\\<^sub>S\\<^sub>e\\<^sub>q(\\<one>))\""], ["", "Assert   \"\\<tau> \\<Turnstile> (Sequence{\\<one>,invalid,\\<two>} \\<triangleq> invalid)\""], ["", "Assert   \"\\<tau> \\<Turnstile> (Sequence{\\<one>,\\<two>}->prepend\\<^sub>S\\<^sub>e\\<^sub>q(null) \\<triangleq> Sequence{null,\\<one>,\\<two>})\""], ["", "Assert   \"\\<tau> \\<Turnstile> (Sequence{\\<one>,\\<two>}->including\\<^sub>S\\<^sub>e\\<^sub>q(null) \\<triangleq> Sequence{\\<one>,\\<two>,null})\""], ["", "(* \nAssert   \"\\<not> (\\<tau> \\<Turnstile> (Sequence{\\<one>,\\<one>,\\<two>} \\<doteq> Sequence{\\<one>,\\<two>}))\"\nAssert   \"\\<not> (\\<tau> \\<Turnstile> (Sequence{\\<one>,\\<two>} \\<doteq> Sequence{\\<two>,\\<one>}))\"\n*)\n\n(* > *)"], ["", "end"]]}