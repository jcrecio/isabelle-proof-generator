{"file_name": "/home/qj213/afp-2021-10-22/thys/Transformer_Semantics/Kleisli_Quantaloid.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Transformer_Semantics", "problem_names": ["lemma ksup_assoc: \"((f::'a \\<Rightarrow> 'b set) \\<squnion> g) \\<squnion> h = f \\<squnion> (g \\<squnion> h)\"", "lemma ksup_comm: \"(f::'a => 'b set) \\<squnion> g = g \\<squnion> f\"", "lemma ksup_idem [simp]: \"(f::'a \\<Rightarrow> 'b set) \\<squnion> f = f\"", "lemma kcomp_distl: \"f \\<circ>\\<^sub>K (g \\<squnion> h) = (f \\<circ>\\<^sub>K g) \\<squnion> (f \\<circ>\\<^sub>K h)\"", "lemma kcomp_distr: \"(f \\<squnion> g) \\<circ>\\<^sub>K h = (f \\<circ>\\<^sub>K h) \\<squnion> (g \\<circ>\\<^sub>K h)\"", "lemma ksup_zerol [simp]: \"\\<zeta> \\<squnion> f = f\"", "lemma ksup_annil [simp]: \"\\<zeta> \\<circ>\\<^sub>K f = \\<zeta>\"", "lemma ksup_annir [simp]: \"f \\<circ>\\<^sub>K \\<zeta> = \\<zeta>\"", "lemma kSup_distl: \"f \\<circ>\\<^sub>K (\\<Squnion>G) = (\\<Squnion>g \\<in> G. f \\<circ>\\<^sub>K g)\"", "lemma kSup_distr: \"(\\<Squnion>F) \\<circ>\\<^sub>K g = (\\<Squnion>f \\<in> F. f \\<circ>\\<^sub>K g)\"", "lemma kcomp_isol: \"f \\<le> g \\<Longrightarrow> h \\<circ>\\<^sub>K f \\<le> h \\<circ>\\<^sub>K g\"", "lemma kcomp_isor: \"f \\<le> g \\<Longrightarrow> f \\<circ>\\<^sub>K h \\<le> g \\<circ>\\<^sub>K h\"", "lemma r2f_pow: \"\\<F> (R ^^ i) = kpower (\\<F> R) i\"", "lemma f2r_kpower: \"\\<R> (kpower f i) = (\\<R> f) ^^ i\"", "lemma r2f_rtrancl_hom: \"\\<F> (rtrancl R) = kstar (\\<F> R)\"", "lemma r2f_rtrancl_hom_var: \"\\<F> \\<circ> rtrancl = kstar \\<circ> \\<F>\"", "lemma f2r_kstar_hom: \"\\<R> (kstar f) = rtrancl (\\<R> f)\"", "lemma f2r_kstar_hom_var: \"\\<R> \\<circ> kstar = rtrancl \\<circ> \\<R>\"", "lemma kstar_unfoldl_eq: \"\\<eta> \\<squnion> f \\<circ>\\<^sub>K kstar f = kstar f\"", "lemma kstar_unfoldl: \"\\<eta> \\<squnion> f \\<circ>\\<^sub>K  kstar f \\<le> kstar f\"", "lemma kstar_unfoldr_eq: \"\\<eta> \\<squnion> (kstar f) \\<circ>\\<^sub>K f = kstar f\"", "lemma kstar_unfoldr: \"\\<eta> \\<squnion> (kstar f) \\<circ>\\<^sub>K f \\<le> kstar f\"", "lemma kpower_inductl: \"f \\<circ>\\<^sub>K g \\<le> g \\<Longrightarrow> kpower f i \\<circ>\\<^sub>K g \\<le> g\"", "lemma kpower_inductl_var: \"h \\<squnion> f \\<circ>\\<^sub>K g \\<le> g \\<Longrightarrow> kpower f i \\<circ>\\<^sub>K h \\<le> g\"", "lemma kstar_inductl: \"h \\<squnion> f \\<circ>\\<^sub>K g \\<le> g \\<Longrightarrow> kstar f \\<circ>\\<^sub>K h \\<le> g\"", "lemma kpower_inductr: \"g \\<circ>\\<^sub>K f \\<le> g \\<Longrightarrow> g \\<circ>\\<^sub>K kpower f i \\<le> g\"", "lemma kpower_inductr_var: \"h \\<squnion> g \\<circ>\\<^sub>K f \\<le> g \\<Longrightarrow> h \\<circ>\\<^sub>K kpower f i \\<le> g\"", "lemma kstar_inductr: \"h \\<squnion> g \\<circ>\\<^sub>K f \\<le> g \\<Longrightarrow> h \\<circ>\\<^sub>K kstar f \\<le> g\"", "lemma kpower_prop: \"f \\<le> \\<eta> \\<Longrightarrow> kpower f i \\<le> \\<eta>\"", "lemma kstar_prop: \"f \\<le> \\<eta> \\<Longrightarrow> kstar f \\<le> \\<eta>\"", "lemma f2r_ad_fun_hom: \"\\<R> (kad f) = ad_rel (\\<R> f)\"", "lemma f2r_ad_fun_hom_var:\"\\<R> \\<circ> kad = ad_rel \\<circ> \\<R>\"", "lemma r2f_ad_rel_hom: \"\\<F> (ad_rel R) = kad (\\<F> R)\"", "lemma r2f_ad_rel_hom_var:\"\\<F> \\<circ> ad_rel = kad \\<circ> \\<F>\"", "lemma ad_fun_as1 [simp]: \"(kad f) \\<circ>\\<^sub>K f = \\<zeta>\"", "lemma ad_fun_as2 [simp]: \"kad (f \\<circ>\\<^sub>K g) \\<squnion> kad (f \\<circ>\\<^sub>K kad (kad g)) = kad (f \\<circ>\\<^sub>K kad (kad g))\"", "lemma ad_fun_as3 [simp]: \"kad (kad f) \\<squnion> kad f = \\<eta>\"", "lemma ffb_ad_fun: \"fb\\<^sub>\\<F> f X = {x. (kad (f \\<circ>\\<^sub>K kad (set2fun X))) x \\<noteq> {}}\"", "lemma ffb_ad_fun2: \"set2fun (fb\\<^sub>\\<F> f X) = kad (f \\<circ>\\<^sub>K kad (set2fun X))\"", "lemma fb_ad_rel: \"fb\\<^sub>\\<R> R X = Domain (ad_rel (R ; ad_rel (Id_on X)))\"", "lemma fb_ad_rel2: \"Id_on (fb\\<^sub>\\<R> R X) = ad_rel (R ; ad_rel (Id_on X))\""], "translations": [["", "lemma ksup_assoc: \"((f::'a \\<Rightarrow> 'b set) \\<squnion> g) \\<squnion> h = f \\<squnion> (g \\<squnion> h)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f \\<squnion> g \\<squnion> h = f \\<squnion> (g \\<squnion> h)", "unfolding sup.assoc"], ["proof (prove)\ngoal (1 subgoal):\n 1. f \\<squnion> (g \\<squnion> h) = f \\<squnion> (g \\<squnion> h)", "by simp"], ["", "lemma ksup_comm: \"(f::'a => 'b set) \\<squnion> g = g \\<squnion> f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f \\<squnion> g = g \\<squnion> f", "by (simp add: sup.commute)"], ["", "lemma ksup_idem [simp]: \"(f::'a \\<Rightarrow> 'b set) \\<squnion> f = f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f \\<squnion> f = f", "by simp"], ["", "lemma kcomp_distl: \"f \\<circ>\\<^sub>K (g \\<squnion> h) = (f \\<circ>\\<^sub>K g) \\<squnion> (f \\<circ>\\<^sub>K h)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f \\<circ>\\<^sub>K (g \\<squnion> h) =\n    f \\<circ>\\<^sub>K g \\<squnion> f \\<circ>\\<^sub>K h", "unfolding kcomp_klift fun_eq_iff comp_def sup_fun_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x.\n       bd\\<^sub>\\<F> (\\<lambda>x. g x \\<union> h x) (f x) =\n       bd\\<^sub>\\<F> g (f x) \\<union> bd\\<^sub>\\<F> h (f x)", "by (simp add: UN_Un_distrib klift_prop)"], ["", "lemma kcomp_distr: \"(f \\<squnion> g) \\<circ>\\<^sub>K h = (f \\<circ>\\<^sub>K h) \\<squnion> (g \\<circ>\\<^sub>K h)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (f \\<squnion> g) \\<circ>\\<^sub>K h =\n    f \\<circ>\\<^sub>K h \\<squnion> g \\<circ>\\<^sub>K h", "by (simp add: kcomp_klift fun_eq_iff klift_def)"], ["", "lemma ksup_zerol [simp]: \"\\<zeta> \\<squnion> f = f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<zeta> \\<squnion> f = f", "by force"], ["", "lemma ksup_annil [simp]: \"\\<zeta> \\<circ>\\<^sub>K f = \\<zeta>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<zeta> \\<circ>\\<^sub>K f = \\<zeta>", "by (force simp: kcomp_klift klift_def)"], ["", "lemma ksup_annir [simp]: \"f \\<circ>\\<^sub>K \\<zeta> = \\<zeta>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f \\<circ>\\<^sub>K \\<zeta> = \\<zeta>", "by (force simp: kcomp_klift klift_def)"], ["", "text \\<open>Associativity of Kleisli composition has already been proved.\\<close>"], ["", "text \\<open>The next laws establish typed quantales --- or quantaloids.\\<close>"], ["", "lemma kSup_distl: \"f \\<circ>\\<^sub>K (\\<Squnion>G) = (\\<Squnion>g \\<in> G. f \\<circ>\\<^sub>K g)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f \\<circ>\\<^sub>K \\<Squnion> G = \\<Squnion> \\<P> ((\\<circ>\\<^sub>K) f) G", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. f \\<circ>\\<^sub>K \\<Squnion> G = \\<Squnion> \\<P> ((\\<circ>\\<^sub>K) f) G", "have \"f \\<circ>\\<^sub>K (\\<Squnion>G) = ((klift \\<circ> Sup) G) \\<circ> f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f \\<circ>\\<^sub>K \\<Squnion> G = (bd\\<^sub>\\<F> \\<circ> Sup) G \\<circ> f", "by (simp add: kcomp_klift)"], ["proof (state)\nthis:\n  f \\<circ>\\<^sub>K \\<Squnion> G = (bd\\<^sub>\\<F> \\<circ> Sup) G \\<circ> f\n\ngoal (1 subgoal):\n 1. f \\<circ>\\<^sub>K \\<Squnion> G = \\<Squnion> \\<P> ((\\<circ>\\<^sub>K) f) G", "also"], ["proof (state)\nthis:\n  f \\<circ>\\<^sub>K \\<Squnion> G = (bd\\<^sub>\\<F> \\<circ> Sup) G \\<circ> f\n\ngoal (1 subgoal):\n 1. f \\<circ>\\<^sub>K \\<Squnion> G = \\<Squnion> \\<P> ((\\<circ>\\<^sub>K) f) G", "have \"... = (\\<Squnion>g \\<in> G. (klift g)) \\<circ> f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (bd\\<^sub>\\<F> \\<circ> Sup) G \\<circ> f =\n    \\<Squnion> \\<P> bd\\<^sub>\\<F> G \\<circ> f", "by (simp add: fbd_Sup_pres fun_eq_iff)"], ["proof (state)\nthis:\n  (bd\\<^sub>\\<F> \\<circ> Sup) G \\<circ> f =\n  \\<Squnion> \\<P> bd\\<^sub>\\<F> G \\<circ> f\n\ngoal (1 subgoal):\n 1. f \\<circ>\\<^sub>K \\<Squnion> G = \\<Squnion> \\<P> ((\\<circ>\\<^sub>K) f) G", "also"], ["proof (state)\nthis:\n  (bd\\<^sub>\\<F> \\<circ> Sup) G \\<circ> f =\n  \\<Squnion> \\<P> bd\\<^sub>\\<F> G \\<circ> f\n\ngoal (1 subgoal):\n 1. f \\<circ>\\<^sub>K \\<Squnion> G = \\<Squnion> \\<P> ((\\<circ>\\<^sub>K) f) G", "have \"... = (\\<Squnion>g \\<in> G. (klift g) \\<circ> f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Squnion> \\<P> bd\\<^sub>\\<F> G \\<circ> f =\n    (\\<Squnion>g\\<in>G. bd\\<^sub>\\<F> g \\<circ> f)", "by auto"], ["proof (state)\nthis:\n  \\<Squnion> \\<P> bd\\<^sub>\\<F> G \\<circ> f =\n  (\\<Squnion>g\\<in>G. bd\\<^sub>\\<F> g \\<circ> f)\n\ngoal (1 subgoal):\n 1. f \\<circ>\\<^sub>K \\<Squnion> G = \\<Squnion> \\<P> ((\\<circ>\\<^sub>K) f) G", "finally"], ["proof (chain)\npicking this:\n  f \\<circ>\\<^sub>K \\<Squnion> G =\n  (\\<Squnion>g\\<in>G. bd\\<^sub>\\<F> g \\<circ> f)", "show ?thesis"], ["proof (prove)\nusing this:\n  f \\<circ>\\<^sub>K \\<Squnion> G =\n  (\\<Squnion>g\\<in>G. bd\\<^sub>\\<F> g \\<circ> f)\n\ngoal (1 subgoal):\n 1. f \\<circ>\\<^sub>K \\<Squnion> G = \\<Squnion> \\<P> ((\\<circ>\\<^sub>K) f) G", "by (simp add: kcomp_klift)"], ["proof (state)\nthis:\n  f \\<circ>\\<^sub>K \\<Squnion> G = \\<Squnion> \\<P> ((\\<circ>\\<^sub>K) f) G\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma kSup_distr: \"(\\<Squnion>F) \\<circ>\\<^sub>K g = (\\<Squnion>f \\<in> F. f \\<circ>\\<^sub>K g)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Squnion> F \\<circ>\\<^sub>K g =\n    (\\<Squnion>f\\<in>F. f \\<circ>\\<^sub>K g)", "unfolding kcomp_klift fun_eq_iff comp_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x.\n       bd\\<^sub>\\<F> g ((\\<Squnion> F) x) =\n       (\\<Squnion>f\\<in>F. (\\<lambda>x. bd\\<^sub>\\<F> g (f x))) x", "by (simp add: klift_prop)"], ["", "lemma kcomp_isol: \"f \\<le> g \\<Longrightarrow> h \\<circ>\\<^sub>K f \\<le> h \\<circ>\\<^sub>K g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f \\<le> g \\<Longrightarrow>\n    h \\<circ>\\<^sub>K f \\<le> h \\<circ>\\<^sub>K g", "by (force simp: kcomp_klift le_fun_def klift_def)"], ["", "lemma kcomp_isor: \"f \\<le> g \\<Longrightarrow> f \\<circ>\\<^sub>K h \\<le> g \\<circ>\\<^sub>K h\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f \\<le> g \\<Longrightarrow>\n    f \\<circ>\\<^sub>K h \\<le> g \\<circ>\\<^sub>K h", "by (force simp: kcomp_klift le_fun_def klift_def)"], ["", "subsection \\<open>Kleene Star\\<close>"], ["", "text \\<open>The Kleene star can be defined in any quantale or quantaloid by iteration. For Kleisli arrows,\nlaws for the star can be obtained via the isomorphism to binary relations, where the star is the reflexive-transitive\nclosure operation.\\<close>"], ["", "abbreviation \"kpower \\<equiv> kmon.power\""], ["", "lemma r2f_pow: \"\\<F> (R ^^ i) = kpower (\\<F> R) i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<F> (R ^^ i) = kpower (\\<F> R) i", "by (induct i, simp, metis power.power.power_Suc r2f_comp_pres relpow.simps(2) relpow_commute)"], ["", "lemma f2r_kpower: \"\\<R> (kpower f i) = (\\<R> f) ^^ i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<R> (kpower f i) = \\<R> f ^^ i", "by (induct i, simp, metis f2r2f_inv2 pointfree_idE r2f2r_inv1 r2f_pow)"], ["", "definition \"kstar f = (\\<Squnion>i. kpower f i)\""], ["", "lemma r2f_rtrancl_hom: \"\\<F> (rtrancl R) = kstar (\\<F> R)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<F> (R\\<^sup>*) = kstar (\\<F> R)", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<F> (R\\<^sup>*) = kstar (\\<F> R)", "have \"\\<F> (rtrancl R) = \\<F> (\\<Union>i. R ^^ i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<F> (R\\<^sup>*) = \\<F> (\\<mu> (range ((^^) R)))", "by (simp add: full_SetCompr_eq rtrancl_is_UN_relpow)"], ["proof (state)\nthis:\n  \\<F> (R\\<^sup>*) = \\<F> (\\<mu> (range ((^^) R)))\n\ngoal (1 subgoal):\n 1. \\<F> (R\\<^sup>*) = kstar (\\<F> R)", "also"], ["proof (state)\nthis:\n  \\<F> (R\\<^sup>*) = \\<F> (\\<mu> (range ((^^) R)))\n\ngoal (1 subgoal):\n 1. \\<F> (R\\<^sup>*) = kstar (\\<F> R)", "have \"... = (\\<Squnion>i. kpower (\\<F> R) i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<F> (\\<mu> (range ((^^) R))) = \\<Squnion> range (kpower (\\<F> R))", "by (auto simp: r2f_Sup_pres_var r2f_pow)"], ["proof (state)\nthis:\n  \\<F> (\\<mu> (range ((^^) R))) = \\<Squnion> range (kpower (\\<F> R))\n\ngoal (1 subgoal):\n 1. \\<F> (R\\<^sup>*) = kstar (\\<F> R)", "finally"], ["proof (chain)\npicking this:\n  \\<F> (R\\<^sup>*) = \\<Squnion> range (kpower (\\<F> R))", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<F> (R\\<^sup>*) = \\<Squnion> range (kpower (\\<F> R))\n\ngoal (1 subgoal):\n 1. \\<F> (R\\<^sup>*) = kstar (\\<F> R)", "by (simp add: kstar_def)"], ["proof (state)\nthis:\n  \\<F> (R\\<^sup>*) = kstar (\\<F> R)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma r2f_rtrancl_hom_var: \"\\<F> \\<circ> rtrancl = kstar \\<circ> \\<F>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<F> \\<circ> rtrancl = kstar \\<circ> \\<F>", "by standard (simp add: r2f_rtrancl_hom)"], ["", "lemma f2r_kstar_hom: \"\\<R> (kstar f) = rtrancl (\\<R> f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<R> (kstar f) = (\\<R> f)\\<^sup>*", "by (metis r2f_f2r_galois r2f_rtrancl_hom)"], ["", "lemma f2r_kstar_hom_var: \"\\<R> \\<circ> kstar = rtrancl \\<circ> \\<R>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<R> \\<circ> kstar = rtrancl \\<circ> \\<R>", "by standard (simp add: f2r_kstar_hom)"], ["", "lemma kstar_unfoldl_eq: \"\\<eta> \\<squnion> f \\<circ>\\<^sub>K kstar f = kstar f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<eta> \\<squnion> f \\<circ>\\<^sub>K kstar f = kstar f", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<eta> \\<squnion> f \\<circ>\\<^sub>K kstar f = kstar f", "have \"\\<R> (kstar f) = (\\<R> \\<eta>) \\<union> (\\<R> f)\\<^sup>* ; \\<R> f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<R> (kstar f) = \\<R> \\<eta> \\<union> (\\<R> f)\\<^sup>* ; \\<R> f", "using f2r_kstar_hom rtrancl_unfold"], ["proof (prove)\nusing this:\n  \\<R> (kstar ?f) = (\\<R> ?f)\\<^sup>*\n  ?r\\<^sup>* = Id \\<union> ?r\\<^sup>* ; ?r\n\ngoal (1 subgoal):\n 1. \\<R> (kstar f) = \\<R> \\<eta> \\<union> (\\<R> f)\\<^sup>* ; \\<R> f", "by (metis f2r_eta_pres)"], ["proof (state)\nthis:\n  \\<R> (kstar f) = \\<R> \\<eta> \\<union> (\\<R> f)\\<^sup>* ; \\<R> f\n\ngoal (1 subgoal):\n 1. \\<eta> \\<squnion> f \\<circ>\\<^sub>K kstar f = kstar f", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<R> (kstar f) = \\<R> \\<eta> \\<union> (\\<R> f)\\<^sup>* ; \\<R> f\n\ngoal (1 subgoal):\n 1. \\<eta> \\<squnion> f \\<circ>\\<^sub>K kstar f = kstar f", "by (metis f2r_kcomp_pres f2r_kstar_hom f2r_sup_pres r2f_inj_iff r_comp_rtrancl_eq)"], ["proof (state)\nthis:\n  \\<eta> \\<squnion> f \\<circ>\\<^sub>K kstar f = kstar f\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma kstar_unfoldl: \"\\<eta> \\<squnion> f \\<circ>\\<^sub>K  kstar f \\<le> kstar f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<eta> \\<squnion> f \\<circ>\\<^sub>K kstar f \\<le> kstar f", "by (simp add: kstar_unfoldl_eq)"], ["", "lemma kstar_unfoldr_eq: \"\\<eta> \\<squnion> (kstar f) \\<circ>\\<^sub>K f = kstar f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<eta> \\<squnion> kstar f \\<circ>\\<^sub>K f = kstar f", "by (metis (no_types) f2r2f_inv2 f2r_kcomp_pres f2r_kstar_hom kstar_unfoldl_eq pointfree_idE r_comp_rtrancl_eq)"], ["", "lemma kstar_unfoldr: \"\\<eta> \\<squnion> (kstar f) \\<circ>\\<^sub>K f \\<le> kstar f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<eta> \\<squnion> kstar f \\<circ>\\<^sub>K f \\<le> kstar f", "by (simp add: kstar_unfoldr_eq)"], ["", "text \\<open>Relational induction laws seem to be missing in Isabelle Main. So I derive functional laws directly.\\<close>"], ["", "lemma kpower_inductl: \"f \\<circ>\\<^sub>K g \\<le> g \\<Longrightarrow> kpower f i \\<circ>\\<^sub>K g \\<le> g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f \\<circ>\\<^sub>K g \\<le> g \\<Longrightarrow>\n    kpower f i \\<circ>\\<^sub>K g \\<le> g", "by (induct i, simp_all add: kcomp_assoc kcomp_isol order_subst2)"], ["", "lemma kpower_inductl_var: \"h \\<squnion> f \\<circ>\\<^sub>K g \\<le> g \\<Longrightarrow> kpower f i \\<circ>\\<^sub>K h \\<le> g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. h \\<squnion> f \\<circ>\\<^sub>K g \\<le> g \\<Longrightarrow>\n    kpower f i \\<circ>\\<^sub>K h \\<le> g", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. h \\<squnion> f \\<circ>\\<^sub>K g \\<le> g \\<Longrightarrow>\n    kpower f i \\<circ>\\<^sub>K h \\<le> g", "assume h1: \"h \\<squnion> f \\<circ>\\<^sub>K g \\<le> g\""], ["proof (state)\nthis:\n  h \\<squnion> f \\<circ>\\<^sub>K g \\<le> g\n\ngoal (1 subgoal):\n 1. h \\<squnion> f \\<circ>\\<^sub>K g \\<le> g \\<Longrightarrow>\n    kpower f i \\<circ>\\<^sub>K h \\<le> g", "then"], ["proof (chain)\npicking this:\n  h \\<squnion> f \\<circ>\\<^sub>K g \\<le> g", "have h2: \"f \\<circ>\\<^sub>K g \\<le> g\""], ["proof (prove)\nusing this:\n  h \\<squnion> f \\<circ>\\<^sub>K g \\<le> g\n\ngoal (1 subgoal):\n 1. f \\<circ>\\<^sub>K g \\<le> g", "using le_sup_iff"], ["proof (prove)\nusing this:\n  h \\<squnion> f \\<circ>\\<^sub>K g \\<le> g\n  (?x \\<squnion> ?y \\<le> ?z) = (?x \\<le> ?z \\<and> ?y \\<le> ?z)\n\ngoal (1 subgoal):\n 1. f \\<circ>\\<^sub>K g \\<le> g", "by blast"], ["proof (state)\nthis:\n  f \\<circ>\\<^sub>K g \\<le> g\n\ngoal (1 subgoal):\n 1. h \\<squnion> f \\<circ>\\<^sub>K g \\<le> g \\<Longrightarrow>\n    kpower f i \\<circ>\\<^sub>K h \\<le> g", "have \"h \\<le> g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. h \\<le> g", "using h1"], ["proof (prove)\nusing this:\n  h \\<squnion> f \\<circ>\\<^sub>K g \\<le> g\n\ngoal (1 subgoal):\n 1. h \\<le> g", "by simp"], ["proof (state)\nthis:\n  h \\<le> g\n\ngoal (1 subgoal):\n 1. h \\<squnion> f \\<circ>\\<^sub>K g \\<le> g \\<Longrightarrow>\n    kpower f i \\<circ>\\<^sub>K h \\<le> g", "then"], ["proof (chain)\npicking this:\n  h \\<le> g", "show ?thesis"], ["proof (prove)\nusing this:\n  h \\<le> g\n\ngoal (1 subgoal):\n 1. kpower f i \\<circ>\\<^sub>K h \\<le> g", "using h2 kcomp_isol kpower_inductl order_trans"], ["proof (prove)\nusing this:\n  h \\<le> g\n  f \\<circ>\\<^sub>K g \\<le> g\n  ?f \\<le> ?g \\<Longrightarrow>\n  ?h \\<circ>\\<^sub>K ?f \\<le> ?h \\<circ>\\<^sub>K ?g\n  ?f \\<circ>\\<^sub>K ?g \\<le> ?g \\<Longrightarrow>\n  kpower ?f ?i \\<circ>\\<^sub>K ?g \\<le> ?g\n  \\<lbrakk>?x \\<le> ?y; ?y \\<le> ?z\\<rbrakk> \\<Longrightarrow> ?x \\<le> ?z\n\ngoal (1 subgoal):\n 1. kpower f i \\<circ>\\<^sub>K h \\<le> g", "by blast"], ["proof (state)\nthis:\n  kpower f i \\<circ>\\<^sub>K h \\<le> g\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma kstar_inductl: \"h \\<squnion> f \\<circ>\\<^sub>K g \\<le> g \\<Longrightarrow> kstar f \\<circ>\\<^sub>K h \\<le> g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. h \\<squnion> f \\<circ>\\<^sub>K g \\<le> g \\<Longrightarrow>\n    kstar f \\<circ>\\<^sub>K h \\<le> g", "apply (simp add: kstar_def kSup_distr, rule Sup_least)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>h \\<le> g \\<and> f \\<circ>\\<^sub>K g \\<le> g;\n        s2p (\\<P> (\\<lambda>x. x \\<circ>\\<^sub>K h) (range (kpower f)))\n         x\\<rbrakk>\n       \\<Longrightarrow> x \\<le> g", "using kpower_inductl_var"], ["proof (prove)\nusing this:\n  ?h \\<squnion> ?f \\<circ>\\<^sub>K ?g \\<le> ?g \\<Longrightarrow>\n  kpower ?f ?i \\<circ>\\<^sub>K ?h \\<le> ?g\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>h \\<le> g \\<and> f \\<circ>\\<^sub>K g \\<le> g;\n        s2p (\\<P> (\\<lambda>x. x \\<circ>\\<^sub>K h) (range (kpower f)))\n         x\\<rbrakk>\n       \\<Longrightarrow> x \\<le> g", "by fastforce"], ["", "lemma kpower_inductr: \"g \\<circ>\\<^sub>K f \\<le> g \\<Longrightarrow> g \\<circ>\\<^sub>K kpower f i \\<le> g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. g \\<circ>\\<^sub>K f \\<le> g \\<Longrightarrow>\n    g \\<circ>\\<^sub>K kpower f i \\<le> g", "apply (induct i, simp_all)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i.\n       \\<lbrakk>g \\<circ>\\<^sub>K kpower f i \\<le> g;\n        g \\<circ>\\<^sub>K f \\<le> g\\<rbrakk>\n       \\<Longrightarrow> g \\<circ>\\<^sub>K (f \\<circ>\\<^sub>K kpower f i)\n                         \\<le> g", "by (metis (mono_tags, lifting) dual_order.trans kcomp_assoc kcomp_isor)"], ["", "lemma kpower_inductr_var: \"h \\<squnion> g \\<circ>\\<^sub>K f \\<le> g \\<Longrightarrow> h \\<circ>\\<^sub>K kpower f i \\<le> g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. h \\<squnion> g \\<circ>\\<^sub>K f \\<le> g \\<Longrightarrow>\n    h \\<circ>\\<^sub>K kpower f i \\<le> g", "by (metis (no_types) dual_order.trans kcomp_isor kpower_inductr le_sup_iff)"], ["", "lemma kstar_inductr: \"h \\<squnion> g \\<circ>\\<^sub>K f \\<le> g \\<Longrightarrow> h \\<circ>\\<^sub>K kstar f \\<le> g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. h \\<squnion> g \\<circ>\\<^sub>K f \\<le> g \\<Longrightarrow>\n    h \\<circ>\\<^sub>K kstar f \\<le> g", "apply (simp add: kstar_def kSup_distl, rule Sup_least)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>h \\<le> g \\<and> g \\<circ>\\<^sub>K f \\<le> g;\n        s2p (\\<P> ((\\<circ>\\<^sub>K) h) (range (kpower f))) x\\<rbrakk>\n       \\<Longrightarrow> x \\<le> g", "using kpower_inductr_var"], ["proof (prove)\nusing this:\n  ?h \\<squnion> ?g \\<circ>\\<^sub>K ?f \\<le> ?g \\<Longrightarrow>\n  ?h \\<circ>\\<^sub>K kpower ?f ?i \\<le> ?g\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>h \\<le> g \\<and> g \\<circ>\\<^sub>K f \\<le> g;\n        s2p (\\<P> ((\\<circ>\\<^sub>K) h) (range (kpower f))) x\\<rbrakk>\n       \\<Longrightarrow> x \\<le> g", "by fastforce"], ["", "lemma kpower_prop: \"f \\<le> \\<eta> \\<Longrightarrow> kpower f i \\<le> \\<eta>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f \\<le> \\<eta> \\<Longrightarrow> kpower f i \\<le> \\<eta>", "by (metis kcomp_idl kpower_inductr)"], ["", "lemma kstar_prop: \"f \\<le> \\<eta> \\<Longrightarrow> kstar f \\<le> \\<eta>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f \\<le> \\<eta> \\<Longrightarrow> kstar f \\<le> \\<eta>", "by (simp add: SUP_le_iff kpower_prop kstar_def)"], ["", "subsection \\<open>Antidomain\\<close>"], ["", "text \\<open>Next I define an antidomain operation and prove the axioms of antidomain semirings~\\cite{GomesGHSW16,DesharnaisS11}.\\<close>"], ["", "definition \"kad f = (\\<lambda>x. if (f x = {}) then {x} else {})\""], ["", "definition \"ad_rel R = {(x,x) |x. \\<not>(\\<exists>y. (x,y) \\<in> R)}\""], ["", "lemma f2r_ad_fun_hom: \"\\<R> (kad f) = ad_rel (\\<R> f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<R> (kad f) = ad_rel (\\<R> f)", "apply (simp add: kad_def ad_rel_def f2r_def, safe)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a b.\n       s2p (if f a = {} then \\<eta> a else {}) b \\<Longrightarrow>\n       \\<exists>x. (a, b) = (x, x) \\<and> f x = {}\n 2. \\<And>a b x.\n       f x = {} \\<Longrightarrow> s2p (if f x = {} then \\<eta> x else {}) x", "by simp_all (meson empty_iff singletonD)"], ["", "lemma f2r_ad_fun_hom_var:\"\\<R> \\<circ> kad = ad_rel \\<circ> \\<R>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<R> \\<circ> kad = ad_rel \\<circ> \\<R>", "by standard (simp add: f2r_ad_fun_hom)"], ["", "lemma r2f_ad_rel_hom: \"\\<F> (ad_rel R) = kad (\\<F> R)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<F> (ad_rel R) = kad (\\<F> R)", "by (force simp add: kad_def ad_rel_def r2f_def fun_eq_iff)"], ["", "lemma r2f_ad_rel_hom_var:\"\\<F> \\<circ> ad_rel = kad \\<circ> \\<F>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<F> \\<circ> ad_rel = kad \\<circ> \\<F>", "by standard (simp add: r2f_ad_rel_hom)"], ["", "lemma ad_fun_as1 [simp]: \"(kad f) \\<circ>\\<^sub>K f = \\<zeta>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. kad f \\<circ>\\<^sub>K f = \\<zeta>", "by (simp add: kad_def kcomp_def fun_eq_iff)"], ["", "lemma ad_fun_as2 [simp]: \"kad (f \\<circ>\\<^sub>K g) \\<squnion> kad (f \\<circ>\\<^sub>K kad (kad g)) = kad (f \\<circ>\\<^sub>K kad (kad g))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. kad (f \\<circ>\\<^sub>K g) \\<squnion>\n    kad (f \\<circ>\\<^sub>K kad (kad g)) =\n    kad (f \\<circ>\\<^sub>K kad (kad g))", "by (force simp: kad_def kcomp_def fun_eq_iff)"], ["", "lemma ad_fun_as3 [simp]: \"kad (kad f) \\<squnion> kad f = \\<eta>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. kad (kad f) \\<squnion> kad f = \\<eta>", "by (simp add: kad_def fun_eq_iff)"], ["", "definition \"set2fun X = (\\<lambda>x. if (x \\<in> X) then {x} else {})\""], ["", "definition \"p2fun = set2fun \\<circ> Collect\""], ["", "lemma ffb_ad_fun: \"fb\\<^sub>\\<F> f X = {x. (kad (f \\<circ>\\<^sub>K kad (set2fun X))) x \\<noteq> {}}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fb\\<^sub>\\<F> f X =\n    {x. kad (f \\<circ>\\<^sub>K kad (set2fun X)) x \\<noteq> {}}", "unfolding ffb_prop_var klift_def kop_def fun_eq_iff comp_def f2r_def r2f_def converse_def kad_def kcomp_def set2fun_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. - \\<mu>\n       (\\<P>\n         (\\<lambda>x.\n             {(x, y).\n              (\\<lambda>x xa.\n                  s2p {(x, y). s2p (f x) y} (x, xa))\\<inverse>\\<inverse>\n               x y} ``\n             \\<eta> x)\n         (- X)) =\n    {x. (if \\<mu>\n             (\\<P>\n               (\\<lambda>x.\n                   if bot_pres (If (s2p X x) (\\<eta> x)) then \\<eta> x\n                   else {})\n               (f x)) =\n            {}\n         then \\<eta> x else {}) \\<noteq>\n        {}}", "by auto"], ["", "lemma ffb_ad_fun2: \"set2fun (fb\\<^sub>\\<F> f X) = kad (f \\<circ>\\<^sub>K kad (set2fun X))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set2fun (fb\\<^sub>\\<F> f X) = kad (f \\<circ>\\<^sub>K kad (set2fun X))", "by standard (subst ffb_ad_fun, subst set2fun_def, simp add: kad_def)"], ["", "text \\<open>The final statements check that the relational forward diamond is consistent with the Kleene-algebraic definition.\\<close>"], ["", "lemma fb_ad_rel: \"fb\\<^sub>\\<R> R X = Domain (ad_rel (R ; ad_rel (Id_on X)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fb\\<^sub>\\<R> R X = Domain (ad_rel (R ; ad_rel (Id_on X)))", "unfolding rfb_def ffb_prop_var klift_def comp_def r2f_def kop_def f2r_def converse_def Domain_def Id_on_def ad_rel_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. - \\<mu>\n       (\\<P>\n         (\\<lambda>x.\n             {(x, y).\n              (\\<lambda>x xa.\n                  s2p {(x, y). s2p (R `` \\<eta> x) y}\n                   (x, xa))\\<inverse>\\<inverse>\n               x y} ``\n             \\<eta> x)\n         (- X)) =\n    Collect\n     (Domainp\n       (\\<lambda>x xa.\n           s2p {(x, x) |x.\n                \\<nexists>y.\n                   s2p (R ;\n                        {(x, x) |x.\n                         \\<nexists>y.\n                            s2p (\\<mu> (\\<P> (\\<lambda>x. \\<eta> (x, x)) X))\n                             (x, y)})\n                    (x, y)}\n            (x, xa)))", "by auto"], ["", "lemma fb_ad_rel2: \"Id_on (fb\\<^sub>\\<R> R X) = ad_rel (R ; ad_rel (Id_on X))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Id_on (fb\\<^sub>\\<R> R X) = ad_rel (R ; ad_rel (Id_on X))", "unfolding rfb_def ffb_prop_var klift_def comp_def r2f_def kop_def f2r_def converse_def Domain_def Id_on_def ad_rel_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<mu>\n     (\\<P> (\\<lambda>x. \\<eta> (x, x))\n       (- \\<mu>\n           (\\<P>\n             (\\<lambda>x.\n                 {(x, y).\n                  (\\<lambda>x xa.\n                      s2p {(x, y). s2p (R `` \\<eta> x) y}\n                       (x, xa))\\<inverse>\\<inverse>\n                   x y} ``\n                 \\<eta> x)\n             (- X)))) =\n    {(x, x) |x.\n     \\<nexists>y.\n        s2p (R ;\n             {(x, x) |x.\n              \\<nexists>y.\n                 s2p (\\<mu> (\\<P> (\\<lambda>x. \\<eta> (x, x)) X)) (x, y)})\n         (x, y)}", "by auto"], ["", "end"]]}