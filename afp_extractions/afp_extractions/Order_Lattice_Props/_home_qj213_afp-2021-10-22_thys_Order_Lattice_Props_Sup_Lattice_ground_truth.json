{"file_name": "/home/qj213/afp-2021-10-22/thys/Order_Lattice_Props/Sup_Lattice.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Order_Lattice_Props", "problem_names": ["lemma ord_pres_mono: \n  fixes f :: \"'a::order \\<Rightarrow> 'b::order\"\n  shows \"mono f = ord_pres f\"", "lemma Infs_prop: \"Infs = Sup \\<circ> lb_set\"", "lemma Supi_prop: \"Supi = Inf \\<circ> ub_set\""], "translations": [["", "lemma ord_pres_mono: \n  fixes f :: \"'a::order \\<Rightarrow> 'b::order\"\n  shows \"mono f = ord_pres f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mono f = ord_pres f", "by (simp add: mono_def ord_pres_def)"], ["", "class preorder_lean = ord +\n  assumes preorder_refl: \"x \\<le> x\"\n  and preorder_trans: \"x \\<le> y \\<Longrightarrow> y \\<le> z \\<Longrightarrow> x \\<le> z\"\n\nbegin"], ["", "definition le :: \"'a \\<Rightarrow> 'a \\<Rightarrow> bool\" where\n  \"le x y = (x \\<le> y \\<and> \\<not> (x \\<ge> y))\""], ["", "end"], ["", "sublocale preorder_lean \\<subseteq> prel: preorder \"(\\<le>)\" le"], ["proof (prove)\ngoal (1 subgoal):\n 1. class.preorder (\\<le>) le", "by (unfold_locales, auto simp add: le_def preorder_refl preorder_trans)"], ["", "class order_lean = preorder_lean +\n  assumes order_antisym: \"x \\<le> y \\<Longrightarrow> x \\<ge> y \\<Longrightarrow> x = y\""], ["", "sublocale order_lean \\<subseteq> posl: order \"(\\<le>)\" le"], ["proof (prove)\ngoal (1 subgoal):\n 1. class.order (\\<le>) le", "by (unfold_locales, simp add: order_antisym)"], ["", "class Sup_lattice = order_lean + Sup +\n  assumes Sups_upper: \"x \\<in> X \\<Longrightarrow> x \\<le> \\<Squnion>X\"\n  and Sups_least: \"(\\<And>x. x \\<in> X \\<Longrightarrow> x \\<le> z) \\<Longrightarrow> \\<Squnion>X \\<le> z\"\n\nbegin"], ["", "definition Infs :: \"'a set \\<Rightarrow> 'a\" where\n  \"Infs X =  \\<Squnion>{y. \\<forall>x \\<in> X. y \\<le> x}\""], ["", "definition sups :: \"'a \\<Rightarrow> 'a \\<Rightarrow> 'a\" where\n  \"sups x y = \\<Squnion>{x,y}\""], ["", "definition infs :: \"'a \\<Rightarrow> 'a \\<Rightarrow> 'a\" where\n  \"infs x y = Infs{x,y}\""], ["", "definition bots :: 'a where \n  \"bots = \\<Squnion>{}\""], ["", "definition tops :: 'a where\n  \"tops = Infs{}\""], ["", "lemma Infs_prop: \"Infs = Sup \\<circ> lb_set\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Infs = Sup \\<circ> lb_set", "unfolding fun_eq_iff"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x. Infs x = (Sup \\<circ> lb_set) x", "by (simp add: Infs_def prel.lb_set_def)"], ["", "end"], ["", "class Inf_lattice = order_lean + Inf +\n  assumes Infi_lower: \"x \\<in> X \\<Longrightarrow> \\<Sqinter>X \\<le> x\"\n  and Infi_greatest: \"(\\<And>x. x \\<in> X \\<Longrightarrow> z \\<le> x) \\<Longrightarrow> z \\<le> \\<Sqinter>X\"\n\nbegin"], ["", "definition Supi :: \"'a set \\<Rightarrow> 'a\" where\n  \"Supi X = \\<Sqinter>{y. \\<forall>x \\<in> X. x \\<le> y}\""], ["", "definition supi :: \"'a \\<Rightarrow> 'a \\<Rightarrow> 'a\" where\n  \"supi x y = Supi{x,y}\""], ["", "definition infi :: \"'a \\<Rightarrow> 'a \\<Rightarrow> 'a\" where\n  \"infi x y = \\<Sqinter>{x,y}\""], ["", "definition boti :: 'a where \n  \"boti = Supi{}\""], ["", "definition topi :: 'a where\n  \"topi = \\<Sqinter>{}\""], ["", "lemma Supi_prop: \"Supi = Inf \\<circ> ub_set\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Supi = Inf \\<circ> ub_set", "unfolding fun_eq_iff"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x. Supi x = (Inf \\<circ> ub_set) x", "by (simp add: Supi_def prel.ub_set_def)"], ["", "end"], ["", "sublocale Inf_lattice \\<subseteq> ldual: Sup_lattice Inf \"(\\<ge>)\"\n  rewrites \"ldual.Infs = Supi\"\n  and \"ldual.infs = supi\"\n  and \"ldual.sups = infi\"\n  and \"ldual.tops = boti\"\n  and \"ldual.bots = topi\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (class.Sup_lattice Inf (\\<lambda>x y. y \\<le> x) &&&\n     Sup_lattice.Infs Inf (\\<lambda>x y. y \\<le> x) = Supi &&&\n     Sup_lattice.infs Inf (\\<lambda>x y. y \\<le> x) = supi) &&&\n    Sup_lattice.sups Inf = infi &&&\n    Sup_lattice.tops Inf (\\<lambda>x y. y \\<le> x) = boti &&&\n    Sup_lattice.bots Inf = topi", "proof-"], ["proof (state)\ngoal (6 subgoals):\n 1. class.Sup_lattice Inf (\\<lambda>x y. y \\<le> x)\n 2. Sup_lattice.Infs Inf (\\<lambda>x y. y \\<le> x) = Supi\n 3. Sup_lattice.infs Inf (\\<lambda>x y. y \\<le> x) = supi\n 4. Sup_lattice.sups Inf = infi\n 5. Sup_lattice.tops Inf (\\<lambda>x y. y \\<le> x) = boti\n 6. Sup_lattice.bots Inf = topi", "show \"class.Sup_lattice Inf (\\<ge>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. class.Sup_lattice Inf (\\<lambda>x y. y \\<le> x)", "by (unfold_locales, simp_all add: Infi_lower Infi_greatest preorder_trans)"], ["proof (state)\nthis:\n  class.Sup_lattice Inf (\\<lambda>x y. y \\<le> x)\n\ngoal (5 subgoals):\n 1. Sup_lattice.Infs Inf (\\<lambda>x y. y \\<le> x) = Supi\n 2. Sup_lattice.infs Inf (\\<lambda>x y. y \\<le> x) = supi\n 3. Sup_lattice.sups Inf = infi\n 4. Sup_lattice.tops Inf (\\<lambda>x y. y \\<le> x) = boti\n 5. Sup_lattice.bots Inf = topi", "then"], ["proof (chain)\npicking this:\n  class.Sup_lattice Inf (\\<lambda>x y. y \\<le> x)", "interpret ldual: Sup_lattice Inf \"(\\<ge>)\""], ["proof (prove)\nusing this:\n  class.Sup_lattice Inf (\\<lambda>x y. y \\<le> x)\n\ngoal (1 subgoal):\n 1. class.Sup_lattice Inf (\\<lambda>x y. y \\<le> x)", "."], ["proof (state)\ngoal (5 subgoals):\n 1. Sup_lattice.Infs Inf (\\<lambda>x y. y \\<le> x) = Supi\n 2. Sup_lattice.infs Inf (\\<lambda>x y. y \\<le> x) = supi\n 3. Sup_lattice.sups Inf = infi\n 4. Sup_lattice.tops Inf (\\<lambda>x y. y \\<le> x) = boti\n 5. Sup_lattice.bots Inf = topi", "show a: \"ldual.Infs = Supi\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Sup_lattice.Infs Inf (\\<lambda>x y. y \\<le> x) = Supi", "unfolding fun_eq_iff"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x. Sup_lattice.Infs Inf (\\<lambda>x y. y \\<le> x) x = Supi x", "by (simp add: ldual.Infs_def Supi_def)"], ["proof (state)\nthis:\n  Sup_lattice.Infs Inf (\\<lambda>x y. y \\<le> x) = Supi\n\ngoal (4 subgoals):\n 1. Sup_lattice.infs Inf (\\<lambda>x y. y \\<le> x) = supi\n 2. Sup_lattice.sups Inf = infi\n 3. Sup_lattice.tops Inf (\\<lambda>x y. y \\<le> x) = boti\n 4. Sup_lattice.bots Inf = topi", "show \"ldual.infs = supi\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Sup_lattice.infs Inf (\\<lambda>x y. y \\<le> x) = supi", "unfolding fun_eq_iff"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x xa.\n       Sup_lattice.infs Inf (\\<lambda>x y. y \\<le> x) x xa = supi x xa", "by (simp add: a ldual.infs_def supi_def)"], ["proof (state)\nthis:\n  Sup_lattice.infs Inf (\\<lambda>x y. y \\<le> x) = supi\n\ngoal (3 subgoals):\n 1. Sup_lattice.sups Inf = infi\n 2. Sup_lattice.tops Inf (\\<lambda>x y. y \\<le> x) = boti\n 3. Sup_lattice.bots Inf = topi", "show \"ldual.sups = infi\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Sup_lattice.sups Inf = infi", "unfolding fun_eq_iff"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x xa. Sup_lattice.sups Inf x xa = infi x xa", "by (simp add: ldual.sups_def infi_def)"], ["proof (state)\nthis:\n  Sup_lattice.sups Inf = infi\n\ngoal (2 subgoals):\n 1. Sup_lattice.tops Inf (\\<lambda>x y. y \\<le> x) = boti\n 2. Sup_lattice.bots Inf = topi", "show \"ldual.tops = boti\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Sup_lattice.tops Inf (\\<lambda>x y. y \\<le> x) = boti", "by (simp add: a ldual.tops_def boti_def)"], ["proof (state)\nthis:\n  Sup_lattice.tops Inf (\\<lambda>x y. y \\<le> x) = boti\n\ngoal (1 subgoal):\n 1. Sup_lattice.bots Inf = topi", "show \"ldual.bots = topi\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Sup_lattice.bots Inf = topi", "by (simp add: ldual.bots_def topi_def)"], ["proof (state)\nthis:\n  Sup_lattice.bots Inf = topi\n\ngoal:\nNo subgoals!", "qed"], ["", "sublocale Sup_lattice \\<subseteq> supclat: complete_lattice Infs Sup_class.Sup infs \"(\\<le>)\" le sups bots tops"], ["proof (prove)\ngoal (1 subgoal):\n 1. class.complete_lattice Infs Sup infs (\\<le>) le sups bots tops", "apply unfold_locales"], ["proof (prove)\ngoal (12 subgoals):\n 1. \\<And>x y. infs x y \\<le> x\n 2. \\<And>x y. infs x y \\<le> y\n 3. \\<And>x y z.\n       \\<lbrakk>x \\<le> y; x \\<le> z\\<rbrakk>\n       \\<Longrightarrow> x \\<le> infs y z\n 4. \\<And>x y. x \\<le> sups x y\n 5. \\<And>y x. y \\<le> sups x y\n 6. \\<And>y x z.\n       \\<lbrakk>y \\<le> x; z \\<le> x\\<rbrakk>\n       \\<Longrightarrow> sups y z \\<le> x\n 7. \\<And>x A. x \\<in> A \\<Longrightarrow> Infs A \\<le> x\n 8. \\<And>A z.\n       (\\<And>x. x \\<in> A \\<Longrightarrow> z \\<le> x) \\<Longrightarrow>\n       z \\<le> Infs A\n 9. \\<And>x A. x \\<in> A \\<Longrightarrow> x \\<le> \\<Squnion> A\n 10. \\<And>A z.\n        (\\<And>x. x \\<in> A \\<Longrightarrow> x \\<le> z) \\<Longrightarrow>\n        \\<Squnion> A \\<le> z\nA total of 12 subgoals...", "unfolding Infs_def infs_def sups_def bots_def tops_def"], ["proof (prove)\ngoal (12 subgoals):\n 1. \\<And>x y. \\<Squnion> {ya. Ball {x, y} ((\\<le>) ya)} \\<le> x\n 2. \\<And>x y. \\<Squnion> {ya. Ball {x, y} ((\\<le>) ya)} \\<le> y\n 3. \\<And>x y z.\n       \\<lbrakk>x \\<le> y; x \\<le> z\\<rbrakk>\n       \\<Longrightarrow> x \\<le> \\<Squnion> {ya. Ball {y, z} ((\\<le>) ya)}\n 4. \\<And>x y. x \\<le> \\<Squnion> {x, y}\n 5. \\<And>y x. y \\<le> \\<Squnion> {x, y}\n 6. \\<And>y x z.\n       \\<lbrakk>y \\<le> x; z \\<le> x\\<rbrakk>\n       \\<Longrightarrow> \\<Squnion> {y, z} \\<le> x\n 7. \\<And>x A.\n       x \\<in> A \\<Longrightarrow>\n       \\<Squnion> {y. Ball A ((\\<le>) y)} \\<le> x\n 8. \\<And>A z.\n       (\\<And>x. x \\<in> A \\<Longrightarrow> z \\<le> x) \\<Longrightarrow>\n       z \\<le> \\<Squnion> {y. Ball A ((\\<le>) y)}\n 9. \\<And>x A. x \\<in> A \\<Longrightarrow> x \\<le> \\<Squnion> A\n 10. \\<And>A z.\n        (\\<And>x. x \\<in> A \\<Longrightarrow> x \\<le> z) \\<Longrightarrow>\n        \\<Squnion> A \\<le> z\nA total of 12 subgoals...", "by (simp_all, auto intro: Sups_least, simp_all add: Sups_upper)"], ["", "sublocale Inf_lattice \\<subseteq> infclat: complete_lattice Inf_class.Inf Supi infi \"(\\<le>)\" le supi boti topi"], ["proof (prove)\ngoal (1 subgoal):\n 1. class.complete_lattice Inf Supi infi (\\<le>) le supi boti topi", "by (unfold_locales, simp_all add: ldual.Sups_upper ldual.Sups_least ldual.supclat.Inf_lower ldual.supclat.Inf_greatest)"], ["", "end"]]}