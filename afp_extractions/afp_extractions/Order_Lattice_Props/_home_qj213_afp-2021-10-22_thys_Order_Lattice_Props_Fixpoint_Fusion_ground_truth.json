{"file_name": "/home/qj213/afp-2021-10-22/thys/Order_Lattice_Props/Fixpoint_Fusion.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Order_Lattice_Props", "problem_names": ["lemma lfp_Fix:\n  fixes f :: \"'a::complete_lattice_with_dual \\<Rightarrow> 'a\"\n  shows \"mono f \\<Longrightarrow> lfp f = \\<Sqinter>(Fix f)\"", "lemma gfp_Fix:\n  fixes f :: \"'a::complete_lattice_with_dual \\<Rightarrow> 'a\"\n  shows \"mono f \\<Longrightarrow> gfp f = \\<Squnion>(Fix f)\"", "lemma gfp_little_fusion:\n  fixes f :: \"'a::complete_lattice \\<Rightarrow> 'a\"\n  and g :: \"'b::complete_lattice \\<Rightarrow> 'b\"\n  assumes \"mono f\"\n  assumes \"h \\<circ> f \\<le> g \\<circ> h\"\n  shows \"h (gfp f) \\<le> gfp g\"", "lemma lfp_little_fusion:\n  fixes f :: \"'a::complete_lattice_with_dual \\<Rightarrow> 'a\"\n  and g :: \"'b::complete_lattice_with_dual \\<Rightarrow> 'b\"\n  assumes \"mono f\"\n  assumes \"g \\<circ> h \\<le> h \\<circ> f\"\n  shows \"lfp g \\<le> h (lfp f)\"", "lemma gfp_fusion:\n  fixes f :: \"'a::complete_lattice \\<Rightarrow> 'a\"\n  and g :: \"'b::complete_lattice \\<Rightarrow> 'b\"\n  assumes \"\\<exists>f. f \\<stileturn> h\"\n  and \"mono f\"\n  and \"mono g\"\n  and \"h \\<circ> f = g \\<circ> h\"\n  shows \"h (gfp f) = gfp g\"", "lemma lfp_fusion:\n  fixes f :: \"'a::complete_lattice_with_dual \\<Rightarrow> 'a\"\n  and g :: \"'b::complete_lattice_with_dual \\<Rightarrow> 'b\"\n  assumes \"\\<exists>f. h \\<stileturn> f\"\n  and \"mono f\"\n  and \"mono g\"\n  and \"h \\<circ> f = g \\<circ> h\"\n  shows \"h (lfp f) = lfp g\"", "lemma gfp_fusion_inf_pres:\n  fixes f :: \"'a::complete_lattice \\<Rightarrow> 'a\"\n  and g :: \"'b::complete_lattice \\<Rightarrow> 'b\"\n  assumes \"Inf_pres h\"\n  and \"mono f\"\n  and \"mono g\"\n  and \"h \\<circ> f = g \\<circ> h\"\n  shows \"h (gfp f) = gfp g\"", "lemma lfp_fusion_sup_pres:\n  fixes f :: \"'a::complete_lattice_with_dual \\<Rightarrow> 'a\"\n  and g :: \"'b::complete_lattice_with_dual \\<Rightarrow> 'b\"\n  assumes \"Sup_pres h\"\n  and \"mono f\"\n  and \"mono g\"\n  and \"h \\<circ> f = g \\<circ> h\"\nshows \"h (lfp f) = lfp g\"", "lemma k_adju: \n  fixes k :: \"'a::order \\<Rightarrow> 'b::complete_lattice\"\n  shows \"\\<exists>F.\\<forall>x. (F::'b \\<Rightarrow> 'a \\<Rightarrow> 'b) \\<stileturn> (\\<lambda>k. k y)\"", "lemma k_adju_var: \"\\<exists>F. \\<forall>x.\\<forall>f::'a::order \\<Rightarrow> 'b::complete_lattice. (F x \\<le> f) = (x \\<le> (\\<lambda>k. k y) f)\"", "lemma gfp_fusion_var:\n  fixes F :: \"('a::order \\<Rightarrow> 'b::complete_lattice) \\<Rightarrow> 'a \\<Rightarrow> 'b\"\n  and g :: \"'b \\<Rightarrow> 'b\"\n  assumes \"mono F\"\n  and \"mono g\"\n  and \"\\<forall>h. F h x = g (h x)\"\n  shows \"gfp F x = gfp g\""], "translations": [["", "lemma lfp_Fix:\n  fixes f :: \"'a::complete_lattice_with_dual \\<Rightarrow> 'a\"\n  shows \"mono f \\<Longrightarrow> lfp f = \\<Sqinter>(Fix f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mono f \\<Longrightarrow> lfp f = \\<Sqinter> Fix f", "unfolding lfp_def Fix_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. mono f \\<Longrightarrow>\n    \\<Sqinter> {u. f u \\<le> u} = \\<Sqinter> {x. f x = x}", "apply (rule antisym)"], ["proof (prove)\ngoal (2 subgoals):\n 1. mono f \\<Longrightarrow>\n    \\<Sqinter> {u. f u \\<le> u} \\<le> \\<Sqinter> {x. f x = x}\n 2. mono f \\<Longrightarrow>\n    \\<Sqinter> {x. f x = x} \\<le> \\<Sqinter> {u. f u \\<le> u}", "apply (simp add: Collect_mono Inf_superset_mono)"], ["proof (prove)\ngoal (1 subgoal):\n 1. mono f \\<Longrightarrow>\n    \\<Sqinter> {x. f x = x} \\<le> \\<Sqinter> {u. f u \\<le> u}", "by (metis (mono_tags) Inf_lower lfp_def lfp_unfold mem_Collect_eq)"], ["", "lemma gfp_Fix:\n  fixes f :: \"'a::complete_lattice_with_dual \\<Rightarrow> 'a\"\n  shows \"mono f \\<Longrightarrow> gfp f = \\<Squnion>(Fix f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mono f \\<Longrightarrow> gfp f = \\<Squnion> Fix f", "by (simp add: iso_map_dual gfp_to_lfp lfp_Fix Fix_map_dual_var Sup_to_Inf_var)"], ["", "lemma gfp_little_fusion:\n  fixes f :: \"'a::complete_lattice \\<Rightarrow> 'a\"\n  and g :: \"'b::complete_lattice \\<Rightarrow> 'b\"\n  assumes \"mono f\"\n  assumes \"h \\<circ> f \\<le> g \\<circ> h\"\n  shows \"h (gfp f) \\<le> gfp g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. h (gfp f) \\<le> gfp g", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. h (gfp f) \\<le> gfp g", "have \"h (f (gfp f)) \\<le> g (h (gfp f))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. h (f (gfp f)) \\<le> g (h (gfp f))", "using assms(2) le_funD"], ["proof (prove)\nusing this:\n  h \\<circ> f \\<le> g \\<circ> h\n  ?f \\<le> ?g \\<Longrightarrow> ?f ?x \\<le> ?g ?x\n\ngoal (1 subgoal):\n 1. h (f (gfp f)) \\<le> g (h (gfp f))", "by fastforce"], ["proof (state)\nthis:\n  h (f (gfp f)) \\<le> g (h (gfp f))\n\ngoal (1 subgoal):\n 1. h (gfp f) \\<le> gfp g", "hence \"h (gfp f) \\<le> g (h (gfp f))\""], ["proof (prove)\nusing this:\n  h (f (gfp f)) \\<le> g (h (gfp f))\n\ngoal (1 subgoal):\n 1. h (gfp f) \\<le> g (h (gfp f))", "by (simp add: assms(1) gfp_fixpoint)"], ["proof (state)\nthis:\n  h (gfp f) \\<le> g (h (gfp f))\n\ngoal (1 subgoal):\n 1. h (gfp f) \\<le> gfp g", "thus \"h (gfp f) \\<le> gfp g\""], ["proof (prove)\nusing this:\n  h (gfp f) \\<le> g (h (gfp f))\n\ngoal (1 subgoal):\n 1. h (gfp f) \\<le> gfp g", "by (simp add: gfp_upperbound)"], ["proof (state)\nthis:\n  h (gfp f) \\<le> gfp g\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma lfp_little_fusion:\n  fixes f :: \"'a::complete_lattice_with_dual \\<Rightarrow> 'a\"\n  and g :: \"'b::complete_lattice_with_dual \\<Rightarrow> 'b\"\n  assumes \"mono f\"\n  assumes \"g \\<circ> h \\<le> h \\<circ> f\"\n  shows \"lfp g \\<le> h (lfp f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lfp g \\<le> h (lfp f)", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. lfp g \\<le> h (lfp f)", "have a: \"mono (map_dual f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mono (\\<partial>\\<^sub>F f)", "by (simp add: assms iso_map_dual)"], ["proof (state)\nthis:\n  mono (\\<partial>\\<^sub>F f)\n\ngoal (1 subgoal):\n 1. lfp g \\<le> h (lfp f)", "have \"map_dual h \\<circ> map_dual f \\<le> map_dual g \\<circ> map_dual h\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<partial>\\<^sub>F h \\<circ> \\<partial>\\<^sub>F f\n    \\<le> \\<partial>\\<^sub>F g \\<circ> \\<partial>\\<^sub>F h", "by (metis assms map_dual_anti map_dual_func1)"], ["proof (state)\nthis:\n  \\<partial>\\<^sub>F h \\<circ> \\<partial>\\<^sub>F f\n  \\<le> \\<partial>\\<^sub>F g \\<circ> \\<partial>\\<^sub>F h\n\ngoal (1 subgoal):\n 1. lfp g \\<le> h (lfp f)", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<partial>\\<^sub>F h \\<circ> \\<partial>\\<^sub>F f\n  \\<le> \\<partial>\\<^sub>F g \\<circ> \\<partial>\\<^sub>F h\n\ngoal (1 subgoal):\n 1. lfp g \\<le> h (lfp f)", "by (metis a comp_eq_elim dual_dual_ord fun_dual1 gfp_little_fusion lfp_dual_var map_dual_def)"], ["proof (state)\nthis:\n  lfp g \\<le> h (lfp f)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma gfp_fusion:\n  fixes f :: \"'a::complete_lattice \\<Rightarrow> 'a\"\n  and g :: \"'b::complete_lattice \\<Rightarrow> 'b\"\n  assumes \"\\<exists>f. f \\<stileturn> h\"\n  and \"mono f\"\n  and \"mono g\"\n  and \"h \\<circ> f = g \\<circ> h\"\n  shows \"h (gfp f) = gfp g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. h (gfp f) = gfp g", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. h (gfp f) = gfp g", "have a: \"h (gfp f) \\<le> gfp g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. h (gfp f) \\<le> gfp g", "by (simp add: assms(2) assms(4) gfp_little_fusion)"], ["proof (state)\nthis:\n  h (gfp f) \\<le> gfp g\n\ngoal (1 subgoal):\n 1. h (gfp f) = gfp g", "obtain hl where conn: \"\\<forall>x y. (hl x \\<le> y) \\<longleftrightarrow> (x \\<le> h y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>hl.\n        \\<forall>x y. (hl x \\<le> y) = (x \\<le> h y) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using assms adj_def"], ["proof (prove)\nusing this:\n  \\<exists>f. f \\<stileturn> h\n  mono f\n  mono g\n  h \\<circ> f = g \\<circ> h\n  ?f \\<stileturn> ?g = (\\<forall>x y. (?f x \\<le> y) = (x \\<le> ?g y))\n\ngoal (1 subgoal):\n 1. (\\<And>hl.\n        \\<forall>x y. (hl x \\<le> y) = (x \\<le> h y) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  \\<forall>x y. (hl x \\<le> y) = (x \\<le> h y)\n\ngoal (1 subgoal):\n 1. h (gfp f) = gfp g", "have \"hl \\<circ> g \\<le> hl \\<circ> g \\<circ> h \\<circ> hl\""], ["proof (prove)\ngoal (1 subgoal):\n 1. hl \\<circ> g \\<le> hl \\<circ> g \\<circ> h \\<circ> hl", "by (simp add: le_fun_def, meson conn assms(3) monoE order_refl order_trans)"], ["proof (state)\nthis:\n  hl \\<circ> g \\<le> hl \\<circ> g \\<circ> h \\<circ> hl\n\ngoal (1 subgoal):\n 1. h (gfp f) = gfp g", "also"], ["proof (state)\nthis:\n  hl \\<circ> g \\<le> hl \\<circ> g \\<circ> h \\<circ> hl\n\ngoal (1 subgoal):\n 1. h (gfp f) = gfp g", "have \"... = hl \\<circ> h \\<circ> f \\<circ> hl\""], ["proof (prove)\ngoal (1 subgoal):\n 1. hl \\<circ> g \\<circ> h \\<circ> hl = hl \\<circ> h \\<circ> f \\<circ> hl", "by (simp add: assms(4) comp_assoc)"], ["proof (state)\nthis:\n  hl \\<circ> g \\<circ> h \\<circ> hl = hl \\<circ> h \\<circ> f \\<circ> hl\n\ngoal (1 subgoal):\n 1. h (gfp f) = gfp g", "finally"], ["proof (chain)\npicking this:\n  hl \\<circ> g \\<le> hl \\<circ> h \\<circ> f \\<circ> hl", "have \"hl \\<circ> g \\<le> f \\<circ> hl\""], ["proof (prove)\nusing this:\n  hl \\<circ> g \\<le> hl \\<circ> h \\<circ> f \\<circ> hl\n\ngoal (1 subgoal):\n 1. hl \\<circ> g \\<le> f \\<circ> hl", "by (simp add: le_fun_def, metis conn inf.coboundedI2 inf.orderE order_refl)"], ["proof (state)\nthis:\n  hl \\<circ> g \\<le> f \\<circ> hl\n\ngoal (1 subgoal):\n 1. h (gfp f) = gfp g", "hence \"hl (gfp g) \\<le> f (hl (gfp g))\""], ["proof (prove)\nusing this:\n  hl \\<circ> g \\<le> f \\<circ> hl\n\ngoal (1 subgoal):\n 1. hl (gfp g) \\<le> f (hl (gfp g))", "by (metis comp_eq_dest_lhs gfp_unfold assms(3) le_fun_def)"], ["proof (state)\nthis:\n  hl (gfp g) \\<le> f (hl (gfp g))\n\ngoal (1 subgoal):\n 1. h (gfp f) = gfp g", "hence \"hl (gfp g) \\<le> gfp f\""], ["proof (prove)\nusing this:\n  hl (gfp g) \\<le> f (hl (gfp g))\n\ngoal (1 subgoal):\n 1. hl (gfp g) \\<le> gfp f", "by (simp add: gfp_upperbound)"], ["proof (state)\nthis:\n  hl (gfp g) \\<le> gfp f\n\ngoal (1 subgoal):\n 1. h (gfp f) = gfp g", "hence \"gfp g \\<le> h (gfp f)\""], ["proof (prove)\nusing this:\n  hl (gfp g) \\<le> gfp f\n\ngoal (1 subgoal):\n 1. gfp g \\<le> h (gfp f)", "by (simp add: conn)"], ["proof (state)\nthis:\n  gfp g \\<le> h (gfp f)\n\ngoal (1 subgoal):\n 1. h (gfp f) = gfp g", "thus ?thesis"], ["proof (prove)\nusing this:\n  gfp g \\<le> h (gfp f)\n\ngoal (1 subgoal):\n 1. h (gfp f) = gfp g", "by (simp add: a eq_iff)"], ["proof (state)\nthis:\n  h (gfp f) = gfp g\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma lfp_fusion:\n  fixes f :: \"'a::complete_lattice_with_dual \\<Rightarrow> 'a\"\n  and g :: \"'b::complete_lattice_with_dual \\<Rightarrow> 'b\"\n  assumes \"\\<exists>f. h \\<stileturn> f\"\n  and \"mono f\"\n  and \"mono g\"\n  and \"h \\<circ> f = g \\<circ> h\"\n  shows \"h (lfp f) = lfp g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. h (lfp f) = lfp g", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. h (lfp f) = lfp g", "have a: \"\\<exists>f. map_dual f \\<stileturn> map_dual h\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>f. \\<partial>\\<^sub>F f \\<stileturn> \\<partial>\\<^sub>F h", "using adj_dual assms(1)"], ["proof (prove)\nusing this:\n  ?f \\<stileturn> ?g =\n  \\<partial>\\<^sub>F ?g \\<stileturn> \\<partial>\\<^sub>F ?f\n  \\<exists>f. h \\<stileturn> f\n\ngoal (1 subgoal):\n 1. \\<exists>f. \\<partial>\\<^sub>F f \\<stileturn> \\<partial>\\<^sub>F h", "by auto"], ["proof (state)\nthis:\n  \\<exists>f. \\<partial>\\<^sub>F f \\<stileturn> \\<partial>\\<^sub>F h\n\ngoal (1 subgoal):\n 1. h (lfp f) = lfp g", "have b: \"mono (map_dual f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mono (\\<partial>\\<^sub>F f)", "by (simp add: assms(2) iso_map_dual)"], ["proof (state)\nthis:\n  mono (\\<partial>\\<^sub>F f)\n\ngoal (1 subgoal):\n 1. h (lfp f) = lfp g", "have c: \"mono (map_dual g)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mono (\\<partial>\\<^sub>F g)", "by (simp add: assms(3) iso_map_dual)"], ["proof (state)\nthis:\n  mono (\\<partial>\\<^sub>F g)\n\ngoal (1 subgoal):\n 1. h (lfp f) = lfp g", "have \"map_dual h \\<circ> map_dual f = map_dual g \\<circ> map_dual h\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<partial>\\<^sub>F h \\<circ> \\<partial>\\<^sub>F f =\n    \\<partial>\\<^sub>F g \\<circ> \\<partial>\\<^sub>F h", "by (metis assms(4) map_dual_func1)"], ["proof (state)\nthis:\n  \\<partial>\\<^sub>F h \\<circ> \\<partial>\\<^sub>F f =\n  \\<partial>\\<^sub>F g \\<circ> \\<partial>\\<^sub>F h\n\ngoal (1 subgoal):\n 1. h (lfp f) = lfp g", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<partial>\\<^sub>F h \\<circ> \\<partial>\\<^sub>F f =\n  \\<partial>\\<^sub>F g \\<circ> \\<partial>\\<^sub>F h\n\ngoal (1 subgoal):\n 1. h (lfp f) = lfp g", "by (metis a adj_dual b c gfp_fusion ladj_adj ladj_radj_dual lfp_dual_var lfp_to_gfp_var radj_adj)"], ["proof (state)\nthis:\n  h (lfp f) = lfp g\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma gfp_fusion_inf_pres:\n  fixes f :: \"'a::complete_lattice \\<Rightarrow> 'a\"\n  and g :: \"'b::complete_lattice \\<Rightarrow> 'b\"\n  assumes \"Inf_pres h\"\n  and \"mono f\"\n  and \"mono g\"\n  and \"h \\<circ> f = g \\<circ> h\"\n  shows \"h (gfp f) = gfp g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. h (gfp f) = gfp g", "by (simp add: Inf_pres_radj assms gfp_fusion)"], ["", "lemma lfp_fusion_sup_pres:\n  fixes f :: \"'a::complete_lattice_with_dual \\<Rightarrow> 'a\"\n  and g :: \"'b::complete_lattice_with_dual \\<Rightarrow> 'b\"\n  assumes \"Sup_pres h\"\n  and \"mono f\"\n  and \"mono g\"\n  and \"h \\<circ> f = g \\<circ> h\"\nshows \"h (lfp f) = lfp g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. h (lfp f) = lfp g", "by (simp add: Sup_pres_ladj assms lfp_fusion)"], ["", "text \\<open>The following facts are usueful for the semantics of isotone predicate transformers. \nA dual statement for least fixpoints can be proved, but is not spelled out here.\\<close>"], ["", "lemma k_adju: \n  fixes k :: \"'a::order \\<Rightarrow> 'b::complete_lattice\"\n  shows \"\\<exists>F.\\<forall>x. (F::'b \\<Rightarrow> 'a \\<Rightarrow> 'b) \\<stileturn> (\\<lambda>k. k y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>F. \\<forall>x. F \\<stileturn> (\\<lambda>k. k y)", "by (force intro!: fun_eq_iff Inf_pres_radj)"], ["", "lemma k_adju_var: \"\\<exists>F. \\<forall>x.\\<forall>f::'a::order \\<Rightarrow> 'b::complete_lattice. (F x \\<le> f) = (x \\<le> (\\<lambda>k. k y) f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>F. \\<forall>x f. (F x \\<le> f) = (x \\<le> f y)", "using k_adju"], ["proof (prove)\nusing this:\n  \\<exists>F. \\<forall>x. F \\<stileturn> (\\<lambda>k. k ?y)\n\ngoal (1 subgoal):\n 1. \\<exists>F. \\<forall>x f. (F x \\<le> f) = (x \\<le> f y)", "unfolding adj_def"], ["proof (prove)\nusing this:\n  \\<exists>F. \\<forall>x xa y. (F xa \\<le> y) = (xa \\<le> y ?y)\n\ngoal (1 subgoal):\n 1. \\<exists>F. \\<forall>x f. (F x \\<le> f) = (x \\<le> f y)", "by simp"], ["", "lemma gfp_fusion_var:\n  fixes F :: \"('a::order \\<Rightarrow> 'b::complete_lattice) \\<Rightarrow> 'a \\<Rightarrow> 'b\"\n  and g :: \"'b \\<Rightarrow> 'b\"\n  assumes \"mono F\"\n  and \"mono g\"\n  and \"\\<forall>h. F h x = g (h x)\"\n  shows \"gfp F x = gfp g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. gfp F x = gfp g", "by (metis (no_types, hide_lams) assms eq_iff gfp_fixpoint gfp_upperbound k_adju_var monoE order_refl)"], ["", "text \\<open>This time, Isabelle is picking up dualities rather inconsistently.\\<close>"], ["", "end"]]}