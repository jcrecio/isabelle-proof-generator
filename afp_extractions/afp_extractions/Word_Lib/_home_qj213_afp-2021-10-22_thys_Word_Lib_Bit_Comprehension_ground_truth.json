{"file_name": "/home/qj213/afp-2021-10-22/thys/Word_Lib/Bit_Comprehension.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Word_Lib", "problem_names": ["lemma set_bits_False_eq [simp]:\n  \\<open>(BITS _. False) = 0\\<close>", "lemma int_set_bits_K_False [simp]: \"(BITS _. False) = (0 :: int)\"", "lemma int_set_bits_K_True [simp]: \"(BITS _. True) = (-1 :: int)\"", "lemma bit_set_bits_word_iff:\n  \\<open>bit (set_bits P :: 'a::len word) n \\<longleftrightarrow> n < LENGTH('a) \\<and> P n\\<close>", "lemma set_bits_K_False [simp]:\n  \\<open>set_bits (\\<lambda>_. False) = (0 :: 'a :: len word)\\<close>", "lemma set_bits_int_unfold':\n  \\<open>set_bits f =\n    (if \\<exists>n. \\<forall>n'\\<ge>n. \\<not> f n' then\n      let n = LEAST n. \\<forall>n'\\<ge>n. \\<not> f n'\n      in horner_sum of_bool 2 (map f [0..<n])\n     else if \\<exists>n. \\<forall>n'\\<ge>n. f n' then\n      let n = LEAST n. \\<forall>n'\\<ge>n. f n'\n      in signed_take_bit n (horner_sum of_bool 2 (map f [0..<n] @ [True]))\n     else 0 :: int)\\<close>", "lemma wf_set_bits_int_simps: \"wf_set_bits_int f \\<longleftrightarrow> (\\<exists>n. (\\<forall>n'\\<ge>n. \\<not> f n') \\<or> (\\<forall>n'\\<ge>n. f n'))\"", "lemma wf_set_bits_int_const [simp]: \"wf_set_bits_int (\\<lambda>_. b)\"", "lemma wf_set_bits_int_fun_upd [simp]:\n  \"wf_set_bits_int (f(n := b)) \\<longleftrightarrow> wf_set_bits_int f\" (is \"?lhs \\<longleftrightarrow> ?rhs\")", "lemma wf_set_bits_int_Suc [simp]:\n  \"wf_set_bits_int (\\<lambda>n. f (Suc n)) \\<longleftrightarrow> wf_set_bits_int f\" (is \"?lhs \\<longleftrightarrow> ?rhs\")", "lemma int_set_bits_unfold_BIT:\n  \"set_bits f = of_bool (f 0) + (2 :: int) * set_bits (f \\<circ> Suc)\"", "lemma bin_last_set_bits [simp]:\n  \"odd (set_bits f :: int) = f 0\"", "lemma bin_rest_set_bits [simp]:\n  \"set_bits f div (2 :: int) = set_bits (f \\<circ> Suc)\"", "lemma bin_nth_set_bits [simp]:\n  \"bit (set_bits f :: int) m \\<longleftrightarrow> f m\""], "translations": [["", "lemma set_bits_False_eq [simp]:\n  \\<open>(BITS _. False) = 0\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. (BITS _. False) = (0::'a)", "using set_bits_bit_eq [of 0]"], ["proof (prove)\nusing this:\n  set_bits (bit (0::'a)) = (0::'a)\n\ngoal (1 subgoal):\n 1. (BITS _. False) = (0::'a)", "by (simp add: bot_fun_def)"], ["", "end"], ["", "instantiation int :: bit_comprehension\nbegin"], ["", "definition\n  \\<open>set_bits f = (\n      if \\<exists>n. \\<forall>m\\<ge>n. f m = f n then\n      let n = LEAST n. \\<forall>m\\<ge>n. f m = f n\n      in signed_take_bit n (horner_sum of_bool 2 (map f [0..<Suc n]))\n     else 0 :: int)\\<close>"], ["", "instance"], ["proof (prove)\ngoal (1 subgoal):\n 1. OFCLASS(int, bit_comprehension_class)", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a. set_bits (bit a) = a", "fix k :: int"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a. set_bits (bit a) = a", "from int_bit_bound [of k]"], ["proof (chain)\npicking this:\n  (\\<And>n.\n      \\<lbrakk>\\<And>m. n \\<le> m \\<Longrightarrow> bit k m = bit k n;\n       0 < n \\<Longrightarrow> bit k (n - 1) \\<noteq> bit k n\\<rbrakk>\n      \\<Longrightarrow> ?thesis) \\<Longrightarrow>\n  ?thesis", "obtain n where *: \\<open>\\<And>m. n \\<le> m \\<Longrightarrow> bit k m \\<longleftrightarrow> bit k n\\<close>\n    and **: \\<open>n > 0 \\<Longrightarrow> bit k (n - 1) \\<noteq> bit k n\\<close>"], ["proof (prove)\nusing this:\n  (\\<And>n.\n      \\<lbrakk>\\<And>m. n \\<le> m \\<Longrightarrow> bit k m = bit k n;\n       0 < n \\<Longrightarrow> bit k (n - 1) \\<noteq> bit k n\\<rbrakk>\n      \\<Longrightarrow> ?thesis) \\<Longrightarrow>\n  ?thesis\n\ngoal (1 subgoal):\n 1. (\\<And>n.\n        \\<lbrakk>\\<And>m. n \\<le> m \\<Longrightarrow> bit k m = bit k n;\n         0 < n \\<Longrightarrow> bit k (n - 1) \\<noteq> bit k n\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  n \\<le> ?m \\<Longrightarrow> bit k ?m = bit k n\n  0 < n \\<Longrightarrow> bit k (n - 1) \\<noteq> bit k n\n\ngoal (1 subgoal):\n 1. \\<And>a. set_bits (bit a) = a", "then"], ["proof (chain)\npicking this:\n  n \\<le> ?m \\<Longrightarrow> bit k ?m = bit k n\n  0 < n \\<Longrightarrow> bit k (n - 1) \\<noteq> bit k n", "have ***: \\<open>\\<exists>n. \\<forall>n'\\<ge>n. bit k n' \\<longleftrightarrow> bit k n\\<close>"], ["proof (prove)\nusing this:\n  n \\<le> ?m \\<Longrightarrow> bit k ?m = bit k n\n  0 < n \\<Longrightarrow> bit k (n - 1) \\<noteq> bit k n\n\ngoal (1 subgoal):\n 1. \\<exists>n. \\<forall>n'\\<ge>n. bit k n' = bit k n", "by meson"], ["proof (state)\nthis:\n  \\<exists>n. \\<forall>n'\\<ge>n. bit k n' = bit k n\n\ngoal (1 subgoal):\n 1. \\<And>a. set_bits (bit a) = a", "have l: \\<open>(LEAST q. \\<forall>m\\<ge>q. bit k m \\<longleftrightarrow> bit k q) = n\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. (LEAST q. \\<forall>m\\<ge>q. bit k m = bit k q) = n", "apply (rule Least_equality)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<forall>m\\<ge>n. bit k m = bit k n\n 2. \\<And>y. \\<forall>m\\<ge>y. bit k m = bit k y \\<Longrightarrow> n \\<le> y", "using *"], ["proof (prove)\nusing this:\n  n \\<le> ?m \\<Longrightarrow> bit k ?m = bit k n\n\ngoal (2 subgoals):\n 1. \\<forall>m\\<ge>n. bit k m = bit k n\n 2. \\<And>y. \\<forall>m\\<ge>y. bit k m = bit k y \\<Longrightarrow> n \\<le> y", "apply blast"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>y. \\<forall>m\\<ge>y. bit k m = bit k y \\<Longrightarrow> n \\<le> y", "apply (metis \"**\" One_nat_def Suc_pred le_cases le0 neq0_conv not_less_eq_eq)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  (LEAST q. \\<forall>m\\<ge>q. bit k m = bit k q) = n\n\ngoal (1 subgoal):\n 1. \\<And>a. set_bits (bit a) = a", "show \\<open>set_bits (bit k) = k\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. set_bits (bit k) = k", "apply (simp only: *** set_bits_int_def horner_sum_bit_eq_take_bit l)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (if True then let n = n in signed_take_bit n (take_bit (Suc n) k)\n     else 0) =\n    k", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. signed_take_bit n (take_bit (Suc n) k) = k", "apply (rule bit_eqI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>na.\n       2 ^ na \\<noteq> 0 \\<Longrightarrow>\n       bit (signed_take_bit n (take_bit (Suc n) k)) na = bit k na", "apply (simp add: bit_signed_take_bit_iff min_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>na.\n       (n \\<le> na \\<longrightarrow>\n        bit (take_bit (Suc n) k) n = bit k na) \\<and>\n       (\\<not> n \\<le> na \\<longrightarrow>\n        bit (take_bit (Suc n) k) na = bit k na)", "apply (auto simp add: not_le bit_take_bit_iff dest: *)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  set_bits (bit k) = k\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "lemma int_set_bits_K_False [simp]: \"(BITS _. False) = (0 :: int)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (BITS _. False) = 0", "by (simp add: set_bits_int_def)"], ["", "lemma int_set_bits_K_True [simp]: \"(BITS _. True) = (-1 :: int)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (BITS _. True) = - 1", "by (simp add: set_bits_int_def)"], ["", "instantiation word :: (len) bit_comprehension\nbegin"], ["", "definition word_set_bits_def:\n  \\<open>(BITS n. P n) = (horner_sum of_bool 2 (map P [0..<LENGTH('a)]) :: 'a word)\\<close>"], ["", "instance"], ["proof (prove)\ngoal (1 subgoal):\n 1. OFCLASS('a word, bit_comprehension_class)", "by standard\n  (simp add: word_set_bits_def horner_sum_bit_eq_take_bit)"], ["", "end"], ["", "lemma bit_set_bits_word_iff:\n  \\<open>bit (set_bits P :: 'a::len word) n \\<longleftrightarrow> n < LENGTH('a) \\<and> P n\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. bit (set_bits P) n = (n < LENGTH('a) \\<and> P n)", "by (auto simp add: word_set_bits_def bit_horner_sum_bit_word_iff)"], ["", "lemma set_bits_K_False [simp]:\n  \\<open>set_bits (\\<lambda>_. False) = (0 :: 'a :: len word)\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. (BITS _. False) = 0", "by (rule bit_word_eqI) (simp add: bit_set_bits_word_iff)"], ["", "lemma set_bits_int_unfold':\n  \\<open>set_bits f =\n    (if \\<exists>n. \\<forall>n'\\<ge>n. \\<not> f n' then\n      let n = LEAST n. \\<forall>n'\\<ge>n. \\<not> f n'\n      in horner_sum of_bool 2 (map f [0..<n])\n     else if \\<exists>n. \\<forall>n'\\<ge>n. f n' then\n      let n = LEAST n. \\<forall>n'\\<ge>n. f n'\n      in signed_take_bit n (horner_sum of_bool 2 (map f [0..<n] @ [True]))\n     else 0 :: int)\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. set_bits f =\n    (if \\<exists>n. \\<forall>n'\\<ge>n. \\<not> f n'\n     then let n = LEAST n. \\<forall>n'\\<ge>n. \\<not> f n'\n          in horner_sum of_bool 2 (map f [0..<n])\n     else if \\<exists>n. \\<forall>n'\\<ge>n. f n'\n          then let n = LEAST n. \\<forall>n'\\<ge>n. f n'\n               in signed_take_bit n\n                   (horner_sum of_bool 2 (map f [0..<n] @ [True]))\n          else 0)", "proof (cases \\<open>\\<exists>n. \\<forall>m\\<ge>n. f m \\<longleftrightarrow> f n\\<close>)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<exists>n. \\<forall>m\\<ge>n. f m = f n \\<Longrightarrow>\n    set_bits f =\n    (if \\<exists>n. \\<forall>n'\\<ge>n. \\<not> f n'\n     then let n = LEAST n. \\<forall>n'\\<ge>n. \\<not> f n'\n          in horner_sum of_bool 2 (map f [0..<n])\n     else if \\<exists>n. \\<forall>n'\\<ge>n. f n'\n          then let n = LEAST n. \\<forall>n'\\<ge>n. f n'\n               in signed_take_bit n\n                   (horner_sum of_bool 2 (map f [0..<n] @ [True]))\n          else 0)\n 2. \\<nexists>n. \\<forall>m\\<ge>n. f m = f n \\<Longrightarrow>\n    set_bits f =\n    (if \\<exists>n. \\<forall>n'\\<ge>n. \\<not> f n'\n     then let n = LEAST n. \\<forall>n'\\<ge>n. \\<not> f n'\n          in horner_sum of_bool 2 (map f [0..<n])\n     else if \\<exists>n. \\<forall>n'\\<ge>n. f n'\n          then let n = LEAST n. \\<forall>n'\\<ge>n. f n'\n               in signed_take_bit n\n                   (horner_sum of_bool 2 (map f [0..<n] @ [True]))\n          else 0)", "case True"], ["proof (state)\nthis:\n  \\<exists>n. \\<forall>m\\<ge>n. f m = f n\n\ngoal (2 subgoals):\n 1. \\<exists>n. \\<forall>m\\<ge>n. f m = f n \\<Longrightarrow>\n    set_bits f =\n    (if \\<exists>n. \\<forall>n'\\<ge>n. \\<not> f n'\n     then let n = LEAST n. \\<forall>n'\\<ge>n. \\<not> f n'\n          in horner_sum of_bool 2 (map f [0..<n])\n     else if \\<exists>n. \\<forall>n'\\<ge>n. f n'\n          then let n = LEAST n. \\<forall>n'\\<ge>n. f n'\n               in signed_take_bit n\n                   (horner_sum of_bool 2 (map f [0..<n] @ [True]))\n          else 0)\n 2. \\<nexists>n. \\<forall>m\\<ge>n. f m = f n \\<Longrightarrow>\n    set_bits f =\n    (if \\<exists>n. \\<forall>n'\\<ge>n. \\<not> f n'\n     then let n = LEAST n. \\<forall>n'\\<ge>n. \\<not> f n'\n          in horner_sum of_bool 2 (map f [0..<n])\n     else if \\<exists>n. \\<forall>n'\\<ge>n. f n'\n          then let n = LEAST n. \\<forall>n'\\<ge>n. f n'\n               in signed_take_bit n\n                   (horner_sum of_bool 2 (map f [0..<n] @ [True]))\n          else 0)", "then"], ["proof (chain)\npicking this:\n  \\<exists>n. \\<forall>m\\<ge>n. f m = f n", "obtain q where q: \\<open>\\<forall>m\\<ge>q. f m \\<longleftrightarrow> f q\\<close>"], ["proof (prove)\nusing this:\n  \\<exists>n. \\<forall>m\\<ge>n. f m = f n\n\ngoal (1 subgoal):\n 1. (\\<And>q.\n        \\<forall>m\\<ge>q. f m = f q \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  \\<forall>m\\<ge>q. f m = f q\n\ngoal (2 subgoals):\n 1. \\<exists>n. \\<forall>m\\<ge>n. f m = f n \\<Longrightarrow>\n    set_bits f =\n    (if \\<exists>n. \\<forall>n'\\<ge>n. \\<not> f n'\n     then let n = LEAST n. \\<forall>n'\\<ge>n. \\<not> f n'\n          in horner_sum of_bool 2 (map f [0..<n])\n     else if \\<exists>n. \\<forall>n'\\<ge>n. f n'\n          then let n = LEAST n. \\<forall>n'\\<ge>n. f n'\n               in signed_take_bit n\n                   (horner_sum of_bool 2 (map f [0..<n] @ [True]))\n          else 0)\n 2. \\<nexists>n. \\<forall>m\\<ge>n. f m = f n \\<Longrightarrow>\n    set_bits f =\n    (if \\<exists>n. \\<forall>n'\\<ge>n. \\<not> f n'\n     then let n = LEAST n. \\<forall>n'\\<ge>n. \\<not> f n'\n          in horner_sum of_bool 2 (map f [0..<n])\n     else if \\<exists>n. \\<forall>n'\\<ge>n. f n'\n          then let n = LEAST n. \\<forall>n'\\<ge>n. f n'\n               in signed_take_bit n\n                   (horner_sum of_bool 2 (map f [0..<n] @ [True]))\n          else 0)", "define n where \\<open>n = (LEAST n. \\<forall>m\\<ge>n. f m \\<longleftrightarrow> f n)\\<close>"], ["proof (state)\nthis:\n  n = (LEAST n. \\<forall>m\\<ge>n. f m = f n)\n\ngoal (2 subgoals):\n 1. \\<exists>n. \\<forall>m\\<ge>n. f m = f n \\<Longrightarrow>\n    set_bits f =\n    (if \\<exists>n. \\<forall>n'\\<ge>n. \\<not> f n'\n     then let n = LEAST n. \\<forall>n'\\<ge>n. \\<not> f n'\n          in horner_sum of_bool 2 (map f [0..<n])\n     else if \\<exists>n. \\<forall>n'\\<ge>n. f n'\n          then let n = LEAST n. \\<forall>n'\\<ge>n. f n'\n               in signed_take_bit n\n                   (horner_sum of_bool 2 (map f [0..<n] @ [True]))\n          else 0)\n 2. \\<nexists>n. \\<forall>m\\<ge>n. f m = f n \\<Longrightarrow>\n    set_bits f =\n    (if \\<exists>n. \\<forall>n'\\<ge>n. \\<not> f n'\n     then let n = LEAST n. \\<forall>n'\\<ge>n. \\<not> f n'\n          in horner_sum of_bool 2 (map f [0..<n])\n     else if \\<exists>n. \\<forall>n'\\<ge>n. f n'\n          then let n = LEAST n. \\<forall>n'\\<ge>n. f n'\n               in signed_take_bit n\n                   (horner_sum of_bool 2 (map f [0..<n] @ [True]))\n          else 0)", "have \\<open>\\<forall>m\\<ge>n. f m \\<longleftrightarrow> f n\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>m\\<ge>n. f m = f n", "unfolding n_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>m\\<ge>LEAST n. \\<forall>m\\<ge>n. f m = f n.\n       f m = f (LEAST n. \\<forall>m\\<ge>n. f m = f n)", "using q"], ["proof (prove)\nusing this:\n  \\<forall>m\\<ge>q. f m = f q\n\ngoal (1 subgoal):\n 1. \\<forall>m\\<ge>LEAST n. \\<forall>m\\<ge>n. f m = f n.\n       f m = f (LEAST n. \\<forall>m\\<ge>n. f m = f n)", "by (rule LeastI [of _ q])"], ["proof (state)\nthis:\n  \\<forall>m\\<ge>n. f m = f n\n\ngoal (2 subgoals):\n 1. \\<exists>n. \\<forall>m\\<ge>n. f m = f n \\<Longrightarrow>\n    set_bits f =\n    (if \\<exists>n. \\<forall>n'\\<ge>n. \\<not> f n'\n     then let n = LEAST n. \\<forall>n'\\<ge>n. \\<not> f n'\n          in horner_sum of_bool 2 (map f [0..<n])\n     else if \\<exists>n. \\<forall>n'\\<ge>n. f n'\n          then let n = LEAST n. \\<forall>n'\\<ge>n. f n'\n               in signed_take_bit n\n                   (horner_sum of_bool 2 (map f [0..<n] @ [True]))\n          else 0)\n 2. \\<nexists>n. \\<forall>m\\<ge>n. f m = f n \\<Longrightarrow>\n    set_bits f =\n    (if \\<exists>n. \\<forall>n'\\<ge>n. \\<not> f n'\n     then let n = LEAST n. \\<forall>n'\\<ge>n. \\<not> f n'\n          in horner_sum of_bool 2 (map f [0..<n])\n     else if \\<exists>n. \\<forall>n'\\<ge>n. f n'\n          then let n = LEAST n. \\<forall>n'\\<ge>n. f n'\n               in signed_take_bit n\n                   (horner_sum of_bool 2 (map f [0..<n] @ [True]))\n          else 0)", "then"], ["proof (chain)\npicking this:\n  \\<forall>m\\<ge>n. f m = f n", "have n: \\<open>\\<And>m. n \\<le> m \\<Longrightarrow> f m \\<longleftrightarrow> f n\\<close>"], ["proof (prove)\nusing this:\n  \\<forall>m\\<ge>n. f m = f n\n\ngoal (1 subgoal):\n 1. \\<And>m. n \\<le> m \\<Longrightarrow> f m = f n", "by blast"], ["proof (state)\nthis:\n  n \\<le> ?m \\<Longrightarrow> f ?m = f n\n\ngoal (2 subgoals):\n 1. \\<exists>n. \\<forall>m\\<ge>n. f m = f n \\<Longrightarrow>\n    set_bits f =\n    (if \\<exists>n. \\<forall>n'\\<ge>n. \\<not> f n'\n     then let n = LEAST n. \\<forall>n'\\<ge>n. \\<not> f n'\n          in horner_sum of_bool 2 (map f [0..<n])\n     else if \\<exists>n. \\<forall>n'\\<ge>n. f n'\n          then let n = LEAST n. \\<forall>n'\\<ge>n. f n'\n               in signed_take_bit n\n                   (horner_sum of_bool 2 (map f [0..<n] @ [True]))\n          else 0)\n 2. \\<nexists>n. \\<forall>m\\<ge>n. f m = f n \\<Longrightarrow>\n    set_bits f =\n    (if \\<exists>n. \\<forall>n'\\<ge>n. \\<not> f n'\n     then let n = LEAST n. \\<forall>n'\\<ge>n. \\<not> f n'\n          in horner_sum of_bool 2 (map f [0..<n])\n     else if \\<exists>n. \\<forall>n'\\<ge>n. f n'\n          then let n = LEAST n. \\<forall>n'\\<ge>n. f n'\n               in signed_take_bit n\n                   (horner_sum of_bool 2 (map f [0..<n] @ [True]))\n          else 0)", "from n_def"], ["proof (chain)\npicking this:\n  n = (LEAST n. \\<forall>m\\<ge>n. f m = f n)", "have n_eq: \\<open>(LEAST q. \\<forall>m\\<ge>q. f m \\<longleftrightarrow> f n) = n\\<close>"], ["proof (prove)\nusing this:\n  n = (LEAST n. \\<forall>m\\<ge>n. f m = f n)\n\ngoal (1 subgoal):\n 1. (LEAST q. \\<forall>m\\<ge>q. f m = f n) = n", "by (smt Least_equality Least_le \\<open>\\<forall>m\\<ge>n. f m = f n\\<close> dual_order.refl le_refl n order_refl)"], ["proof (state)\nthis:\n  (LEAST q. \\<forall>m\\<ge>q. f m = f n) = n\n\ngoal (2 subgoals):\n 1. \\<exists>n. \\<forall>m\\<ge>n. f m = f n \\<Longrightarrow>\n    set_bits f =\n    (if \\<exists>n. \\<forall>n'\\<ge>n. \\<not> f n'\n     then let n = LEAST n. \\<forall>n'\\<ge>n. \\<not> f n'\n          in horner_sum of_bool 2 (map f [0..<n])\n     else if \\<exists>n. \\<forall>n'\\<ge>n. f n'\n          then let n = LEAST n. \\<forall>n'\\<ge>n. f n'\n               in signed_take_bit n\n                   (horner_sum of_bool 2 (map f [0..<n] @ [True]))\n          else 0)\n 2. \\<nexists>n. \\<forall>m\\<ge>n. f m = f n \\<Longrightarrow>\n    set_bits f =\n    (if \\<exists>n. \\<forall>n'\\<ge>n. \\<not> f n'\n     then let n = LEAST n. \\<forall>n'\\<ge>n. \\<not> f n'\n          in horner_sum of_bool 2 (map f [0..<n])\n     else if \\<exists>n. \\<forall>n'\\<ge>n. f n'\n          then let n = LEAST n. \\<forall>n'\\<ge>n. f n'\n               in signed_take_bit n\n                   (horner_sum of_bool 2 (map f [0..<n] @ [True]))\n          else 0)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. set_bits f =\n    (if \\<exists>n. \\<forall>n'\\<ge>n. \\<not> f n'\n     then let n = LEAST n. \\<forall>n'\\<ge>n. \\<not> f n'\n          in horner_sum of_bool 2 (map f [0..<n])\n     else if \\<exists>n. \\<forall>n'\\<ge>n. f n'\n          then let n = LEAST n. \\<forall>n'\\<ge>n. f n'\n               in signed_take_bit n\n                   (horner_sum of_bool 2 (map f [0..<n] @ [True]))\n          else 0)", "proof (cases \\<open>f n\\<close>)"], ["proof (state)\ngoal (2 subgoals):\n 1. f n \\<Longrightarrow>\n    set_bits f =\n    (if \\<exists>n. \\<forall>n'\\<ge>n. \\<not> f n'\n     then let n = LEAST n. \\<forall>n'\\<ge>n. \\<not> f n'\n          in horner_sum of_bool 2 (map f [0..<n])\n     else if \\<exists>n. \\<forall>n'\\<ge>n. f n'\n          then let n = LEAST n. \\<forall>n'\\<ge>n. f n'\n               in signed_take_bit n\n                   (horner_sum of_bool 2 (map f [0..<n] @ [True]))\n          else 0)\n 2. \\<not> f n \\<Longrightarrow>\n    set_bits f =\n    (if \\<exists>n. \\<forall>n'\\<ge>n. \\<not> f n'\n     then let n = LEAST n. \\<forall>n'\\<ge>n. \\<not> f n'\n          in horner_sum of_bool 2 (map f [0..<n])\n     else if \\<exists>n. \\<forall>n'\\<ge>n. f n'\n          then let n = LEAST n. \\<forall>n'\\<ge>n. f n'\n               in signed_take_bit n\n                   (horner_sum of_bool 2 (map f [0..<n] @ [True]))\n          else 0)", "case False"], ["proof (state)\nthis:\n  \\<not> f n\n\ngoal (2 subgoals):\n 1. f n \\<Longrightarrow>\n    set_bits f =\n    (if \\<exists>n. \\<forall>n'\\<ge>n. \\<not> f n'\n     then let n = LEAST n. \\<forall>n'\\<ge>n. \\<not> f n'\n          in horner_sum of_bool 2 (map f [0..<n])\n     else if \\<exists>n. \\<forall>n'\\<ge>n. f n'\n          then let n = LEAST n. \\<forall>n'\\<ge>n. f n'\n               in signed_take_bit n\n                   (horner_sum of_bool 2 (map f [0..<n] @ [True]))\n          else 0)\n 2. \\<not> f n \\<Longrightarrow>\n    set_bits f =\n    (if \\<exists>n. \\<forall>n'\\<ge>n. \\<not> f n'\n     then let n = LEAST n. \\<forall>n'\\<ge>n. \\<not> f n'\n          in horner_sum of_bool 2 (map f [0..<n])\n     else if \\<exists>n. \\<forall>n'\\<ge>n. f n'\n          then let n = LEAST n. \\<forall>n'\\<ge>n. f n'\n               in signed_take_bit n\n                   (horner_sum of_bool 2 (map f [0..<n] @ [True]))\n          else 0)", "with n"], ["proof (chain)\npicking this:\n  n \\<le> ?m \\<Longrightarrow> f ?m = f n\n  \\<not> f n", "have *: \\<open>\\<exists>n. \\<forall>n'\\<ge>n. \\<not> f n'\\<close>"], ["proof (prove)\nusing this:\n  n \\<le> ?m \\<Longrightarrow> f ?m = f n\n  \\<not> f n\n\ngoal (1 subgoal):\n 1. \\<exists>n. \\<forall>n'\\<ge>n. \\<not> f n'", "by blast"], ["proof (state)\nthis:\n  \\<exists>n. \\<forall>n'\\<ge>n. \\<not> f n'\n\ngoal (2 subgoals):\n 1. f n \\<Longrightarrow>\n    set_bits f =\n    (if \\<exists>n. \\<forall>n'\\<ge>n. \\<not> f n'\n     then let n = LEAST n. \\<forall>n'\\<ge>n. \\<not> f n'\n          in horner_sum of_bool 2 (map f [0..<n])\n     else if \\<exists>n. \\<forall>n'\\<ge>n. f n'\n          then let n = LEAST n. \\<forall>n'\\<ge>n. f n'\n               in signed_take_bit n\n                   (horner_sum of_bool 2 (map f [0..<n] @ [True]))\n          else 0)\n 2. \\<not> f n \\<Longrightarrow>\n    set_bits f =\n    (if \\<exists>n. \\<forall>n'\\<ge>n. \\<not> f n'\n     then let n = LEAST n. \\<forall>n'\\<ge>n. \\<not> f n'\n          in horner_sum of_bool 2 (map f [0..<n])\n     else if \\<exists>n. \\<forall>n'\\<ge>n. f n'\n          then let n = LEAST n. \\<forall>n'\\<ge>n. f n'\n               in signed_take_bit n\n                   (horner_sum of_bool 2 (map f [0..<n] @ [True]))\n          else 0)", "have **: \\<open>(LEAST n. \\<forall>n'\\<ge>n. \\<not> f n') = n\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. (LEAST n. \\<forall>n'\\<ge>n. \\<not> f n') = n", "using False n_eq"], ["proof (prove)\nusing this:\n  \\<not> f n\n  (LEAST q. \\<forall>m\\<ge>q. f m = f n) = n\n\ngoal (1 subgoal):\n 1. (LEAST n. \\<forall>n'\\<ge>n. \\<not> f n') = n", "by simp"], ["proof (state)\nthis:\n  (LEAST n. \\<forall>n'\\<ge>n. \\<not> f n') = n\n\ngoal (2 subgoals):\n 1. f n \\<Longrightarrow>\n    set_bits f =\n    (if \\<exists>n. \\<forall>n'\\<ge>n. \\<not> f n'\n     then let n = LEAST n. \\<forall>n'\\<ge>n. \\<not> f n'\n          in horner_sum of_bool 2 (map f [0..<n])\n     else if \\<exists>n. \\<forall>n'\\<ge>n. f n'\n          then let n = LEAST n. \\<forall>n'\\<ge>n. f n'\n               in signed_take_bit n\n                   (horner_sum of_bool 2 (map f [0..<n] @ [True]))\n          else 0)\n 2. \\<not> f n \\<Longrightarrow>\n    set_bits f =\n    (if \\<exists>n. \\<forall>n'\\<ge>n. \\<not> f n'\n     then let n = LEAST n. \\<forall>n'\\<ge>n. \\<not> f n'\n          in horner_sum of_bool 2 (map f [0..<n])\n     else if \\<exists>n. \\<forall>n'\\<ge>n. f n'\n          then let n = LEAST n. \\<forall>n'\\<ge>n. f n'\n               in signed_take_bit n\n                   (horner_sum of_bool 2 (map f [0..<n] @ [True]))\n          else 0)", "from * False"], ["proof (chain)\npicking this:\n  \\<exists>n. \\<forall>n'\\<ge>n. \\<not> f n'\n  \\<not> f n", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<exists>n. \\<forall>n'\\<ge>n. \\<not> f n'\n  \\<not> f n\n\ngoal (1 subgoal):\n 1. set_bits f =\n    (if \\<exists>n. \\<forall>n'\\<ge>n. \\<not> f n'\n     then let n = LEAST n. \\<forall>n'\\<ge>n. \\<not> f n'\n          in horner_sum of_bool 2 (map f [0..<n])\n     else if \\<exists>n. \\<forall>n'\\<ge>n. f n'\n          then let n = LEAST n. \\<forall>n'\\<ge>n. f n'\n               in signed_take_bit n\n                   (horner_sum of_bool 2 (map f [0..<n] @ [True]))\n          else 0)", "apply (simp add: set_bits_int_def n_def [symmetric] ** del: upt.upt_Suc)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<exists>n. \\<forall>n'\\<ge>n. \\<not> f n'; \\<not> f n\\<rbrakk>\n    \\<Longrightarrow> ((\\<exists>n.\n                           \\<forall>m\\<ge>n. f m = f n) \\<longrightarrow>\n                       signed_take_bit n\n                        (horner_sum of_bool 2 (map f [0..<Suc n])) =\n                       horner_sum of_bool 2 (map f [0..<n])) \\<and>\n                      ((\\<forall>n.\n                           \\<exists>m\\<ge>n.\n                              f m = (\\<not> f n)) \\<longrightarrow>\n                       horner_sum of_bool 2 (map f [0..<n]) = 0)", "apply (auto simp add: take_bit_horner_sum_bit_eq\n      bit_horner_sum_bit_iff take_map\n      signed_take_bit_def set_bits_int_def\n      horner_sum_bit_eq_take_bit simp del: upt.upt_Suc)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  set_bits f =\n  (if \\<exists>n. \\<forall>n'\\<ge>n. \\<not> f n'\n   then let n = LEAST n. \\<forall>n'\\<ge>n. \\<not> f n'\n        in horner_sum of_bool 2 (map f [0..<n])\n   else if \\<exists>n. \\<forall>n'\\<ge>n. f n'\n        then let n = LEAST n. \\<forall>n'\\<ge>n. f n'\n             in signed_take_bit n\n                 (horner_sum of_bool 2 (map f [0..<n] @ [True]))\n        else 0)\n\ngoal (1 subgoal):\n 1. f n \\<Longrightarrow>\n    set_bits f =\n    (if \\<exists>n. \\<forall>n'\\<ge>n. \\<not> f n'\n     then let n = LEAST n. \\<forall>n'\\<ge>n. \\<not> f n'\n          in horner_sum of_bool 2 (map f [0..<n])\n     else if \\<exists>n. \\<forall>n'\\<ge>n. f n'\n          then let n = LEAST n. \\<forall>n'\\<ge>n. f n'\n               in signed_take_bit n\n                   (horner_sum of_bool 2 (map f [0..<n] @ [True]))\n          else 0)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. f n \\<Longrightarrow>\n    set_bits f =\n    (if \\<exists>n. \\<forall>n'\\<ge>n. \\<not> f n'\n     then let n = LEAST n. \\<forall>n'\\<ge>n. \\<not> f n'\n          in horner_sum of_bool 2 (map f [0..<n])\n     else if \\<exists>n. \\<forall>n'\\<ge>n. f n'\n          then let n = LEAST n. \\<forall>n'\\<ge>n. f n'\n               in signed_take_bit n\n                   (horner_sum of_bool 2 (map f [0..<n] @ [True]))\n          else 0)", "case True"], ["proof (state)\nthis:\n  f n\n\ngoal (1 subgoal):\n 1. f n \\<Longrightarrow>\n    set_bits f =\n    (if \\<exists>n. \\<forall>n'\\<ge>n. \\<not> f n'\n     then let n = LEAST n. \\<forall>n'\\<ge>n. \\<not> f n'\n          in horner_sum of_bool 2 (map f [0..<n])\n     else if \\<exists>n. \\<forall>n'\\<ge>n. f n'\n          then let n = LEAST n. \\<forall>n'\\<ge>n. f n'\n               in signed_take_bit n\n                   (horner_sum of_bool 2 (map f [0..<n] @ [True]))\n          else 0)", "with n"], ["proof (chain)\npicking this:\n  n \\<le> ?m \\<Longrightarrow> f ?m = f n\n  f n", "have *: \\<open>\\<exists>n. \\<forall>n'\\<ge>n. f n'\\<close>"], ["proof (prove)\nusing this:\n  n \\<le> ?m \\<Longrightarrow> f ?m = f n\n  f n\n\ngoal (1 subgoal):\n 1. \\<exists>n. \\<forall>n'\\<ge>n. f n'", "by blast"], ["proof (state)\nthis:\n  \\<exists>n. \\<forall>n'\\<ge>n. f n'\n\ngoal (1 subgoal):\n 1. f n \\<Longrightarrow>\n    set_bits f =\n    (if \\<exists>n. \\<forall>n'\\<ge>n. \\<not> f n'\n     then let n = LEAST n. \\<forall>n'\\<ge>n. \\<not> f n'\n          in horner_sum of_bool 2 (map f [0..<n])\n     else if \\<exists>n. \\<forall>n'\\<ge>n. f n'\n          then let n = LEAST n. \\<forall>n'\\<ge>n. f n'\n               in signed_take_bit n\n                   (horner_sum of_bool 2 (map f [0..<n] @ [True]))\n          else 0)", "have ***: \\<open>\\<not> (\\<exists>n. \\<forall>n'\\<ge>n. \\<not> f n')\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<nexists>n. \\<forall>n'\\<ge>n. \\<not> f n'", "apply (rule ccontr)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> (\\<nexists>n. \\<forall>n'\\<ge>n. \\<not> f n') \\<Longrightarrow>\n    False", "using * nat_le_linear"], ["proof (prove)\nusing this:\n  \\<exists>n. \\<forall>n'\\<ge>n. f n'\n  ?m \\<le> ?n \\<or> ?n \\<le> ?m\n\ngoal (1 subgoal):\n 1. \\<not> (\\<nexists>n. \\<forall>n'\\<ge>n. \\<not> f n') \\<Longrightarrow>\n    False", "by auto"], ["proof (state)\nthis:\n  \\<nexists>n. \\<forall>n'\\<ge>n. \\<not> f n'\n\ngoal (1 subgoal):\n 1. f n \\<Longrightarrow>\n    set_bits f =\n    (if \\<exists>n. \\<forall>n'\\<ge>n. \\<not> f n'\n     then let n = LEAST n. \\<forall>n'\\<ge>n. \\<not> f n'\n          in horner_sum of_bool 2 (map f [0..<n])\n     else if \\<exists>n. \\<forall>n'\\<ge>n. f n'\n          then let n = LEAST n. \\<forall>n'\\<ge>n. f n'\n               in signed_take_bit n\n                   (horner_sum of_bool 2 (map f [0..<n] @ [True]))\n          else 0)", "have **: \\<open>(LEAST n. \\<forall>n'\\<ge>n. f n') = n\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. (LEAST n. \\<forall>n'\\<ge>n. f n') = n", "using True n_eq"], ["proof (prove)\nusing this:\n  f n\n  (LEAST q. \\<forall>m\\<ge>q. f m = f n) = n\n\ngoal (1 subgoal):\n 1. (LEAST n. \\<forall>n'\\<ge>n. f n') = n", "by simp"], ["proof (state)\nthis:\n  (LEAST n. \\<forall>n'\\<ge>n. f n') = n\n\ngoal (1 subgoal):\n 1. f n \\<Longrightarrow>\n    set_bits f =\n    (if \\<exists>n. \\<forall>n'\\<ge>n. \\<not> f n'\n     then let n = LEAST n. \\<forall>n'\\<ge>n. \\<not> f n'\n          in horner_sum of_bool 2 (map f [0..<n])\n     else if \\<exists>n. \\<forall>n'\\<ge>n. f n'\n          then let n = LEAST n. \\<forall>n'\\<ge>n. f n'\n               in signed_take_bit n\n                   (horner_sum of_bool 2 (map f [0..<n] @ [True]))\n          else 0)", "from * *** True"], ["proof (chain)\npicking this:\n  \\<exists>n. \\<forall>n'\\<ge>n. f n'\n  \\<nexists>n. \\<forall>n'\\<ge>n. \\<not> f n'\n  f n", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<exists>n. \\<forall>n'\\<ge>n. f n'\n  \\<nexists>n. \\<forall>n'\\<ge>n. \\<not> f n'\n  f n\n\ngoal (1 subgoal):\n 1. set_bits f =\n    (if \\<exists>n. \\<forall>n'\\<ge>n. \\<not> f n'\n     then let n = LEAST n. \\<forall>n'\\<ge>n. \\<not> f n'\n          in horner_sum of_bool 2 (map f [0..<n])\n     else if \\<exists>n. \\<forall>n'\\<ge>n. f n'\n          then let n = LEAST n. \\<forall>n'\\<ge>n. f n'\n               in signed_take_bit n\n                   (horner_sum of_bool 2 (map f [0..<n] @ [True]))\n          else 0)", "apply (simp add: set_bits_int_def n_def [symmetric] ** del: upt.upt_Suc)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<exists>n. \\<forall>n'\\<ge>n. f n';\n     \\<forall>n. \\<exists>n'\\<ge>n. f n'; f n\\<rbrakk>\n    \\<Longrightarrow> ((\\<exists>n.\n                           \\<forall>m\\<ge>n. f m = f n) \\<longrightarrow>\n                       ((\\<exists>n.\n                            \\<forall>n'\\<ge>n.\n                               \\<not> f n') \\<longrightarrow>\n                        signed_take_bit n\n                         (horner_sum of_bool 2 (map f [0..<Suc n])) =\n                        horner_sum of_bool 2\n                         (map f\n                           [0..<\n                            LEAST n.\n                               \\<forall>n'\\<ge>n. \\<not> f n'])) \\<and>\n                       signed_take_bit n\n                        (horner_sum of_bool 2 (map f [0..<Suc n])) =\n                       signed_take_bit n\n                        (horner_sum of_bool 2\n                          (map f [0..<n] @ [True]))) \\<and>\n                      ((\\<forall>n.\n                           \\<exists>m\\<ge>n.\n                              f m = (\\<not> f n)) \\<longrightarrow>\n                       ((\\<exists>n.\n                            \\<forall>n'\\<ge>n.\n                               \\<not> f n') \\<longrightarrow>\n                        horner_sum of_bool 2\n                         (map f\n                           [0..<LEAST n. \\<forall>n'\\<ge>n. \\<not> f n']) =\n                        0) \\<and>\n                       signed_take_bit n\n                        (horner_sum of_bool 2 (map f [0..<n] @ [True])) =\n                       0)", "apply (auto simp add: take_bit_horner_sum_bit_eq\n      bit_horner_sum_bit_iff take_map\n      signed_take_bit_def set_bits_int_def\n      horner_sum_bit_eq_take_bit nth_append simp del: upt.upt_Suc)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  set_bits f =\n  (if \\<exists>n. \\<forall>n'\\<ge>n. \\<not> f n'\n   then let n = LEAST n. \\<forall>n'\\<ge>n. \\<not> f n'\n        in horner_sum of_bool 2 (map f [0..<n])\n   else if \\<exists>n. \\<forall>n'\\<ge>n. f n'\n        then let n = LEAST n. \\<forall>n'\\<ge>n. f n'\n             in signed_take_bit n\n                 (horner_sum of_bool 2 (map f [0..<n] @ [True]))\n        else 0)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  set_bits f =\n  (if \\<exists>n. \\<forall>n'\\<ge>n. \\<not> f n'\n   then let n = LEAST n. \\<forall>n'\\<ge>n. \\<not> f n'\n        in horner_sum of_bool 2 (map f [0..<n])\n   else if \\<exists>n. \\<forall>n'\\<ge>n. f n'\n        then let n = LEAST n. \\<forall>n'\\<ge>n. f n'\n             in signed_take_bit n\n                 (horner_sum of_bool 2 (map f [0..<n] @ [True]))\n        else 0)\n\ngoal (1 subgoal):\n 1. \\<nexists>n. \\<forall>m\\<ge>n. f m = f n \\<Longrightarrow>\n    set_bits f =\n    (if \\<exists>n. \\<forall>n'\\<ge>n. \\<not> f n'\n     then let n = LEAST n. \\<forall>n'\\<ge>n. \\<not> f n'\n          in horner_sum of_bool 2 (map f [0..<n])\n     else if \\<exists>n. \\<forall>n'\\<ge>n. f n'\n          then let n = LEAST n. \\<forall>n'\\<ge>n. f n'\n               in signed_take_bit n\n                   (horner_sum of_bool 2 (map f [0..<n] @ [True]))\n          else 0)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<nexists>n. \\<forall>m\\<ge>n. f m = f n \\<Longrightarrow>\n    set_bits f =\n    (if \\<exists>n. \\<forall>n'\\<ge>n. \\<not> f n'\n     then let n = LEAST n. \\<forall>n'\\<ge>n. \\<not> f n'\n          in horner_sum of_bool 2 (map f [0..<n])\n     else if \\<exists>n. \\<forall>n'\\<ge>n. f n'\n          then let n = LEAST n. \\<forall>n'\\<ge>n. f n'\n               in signed_take_bit n\n                   (horner_sum of_bool 2 (map f [0..<n] @ [True]))\n          else 0)", "case False"], ["proof (state)\nthis:\n  \\<nexists>n. \\<forall>m\\<ge>n. f m = f n\n\ngoal (1 subgoal):\n 1. \\<nexists>n. \\<forall>m\\<ge>n. f m = f n \\<Longrightarrow>\n    set_bits f =\n    (if \\<exists>n. \\<forall>n'\\<ge>n. \\<not> f n'\n     then let n = LEAST n. \\<forall>n'\\<ge>n. \\<not> f n'\n          in horner_sum of_bool 2 (map f [0..<n])\n     else if \\<exists>n. \\<forall>n'\\<ge>n. f n'\n          then let n = LEAST n. \\<forall>n'\\<ge>n. f n'\n               in signed_take_bit n\n                   (horner_sum of_bool 2 (map f [0..<n] @ [True]))\n          else 0)", "then"], ["proof (chain)\npicking this:\n  \\<nexists>n. \\<forall>m\\<ge>n. f m = f n", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<nexists>n. \\<forall>m\\<ge>n. f m = f n\n\ngoal (1 subgoal):\n 1. set_bits f =\n    (if \\<exists>n. \\<forall>n'\\<ge>n. \\<not> f n'\n     then let n = LEAST n. \\<forall>n'\\<ge>n. \\<not> f n'\n          in horner_sum of_bool 2 (map f [0..<n])\n     else if \\<exists>n. \\<forall>n'\\<ge>n. f n'\n          then let n = LEAST n. \\<forall>n'\\<ge>n. f n'\n               in signed_take_bit n\n                   (horner_sum of_bool 2 (map f [0..<n] @ [True]))\n          else 0)", "by (auto simp add: set_bits_int_def)"], ["proof (state)\nthis:\n  set_bits f =\n  (if \\<exists>n. \\<forall>n'\\<ge>n. \\<not> f n'\n   then let n = LEAST n. \\<forall>n'\\<ge>n. \\<not> f n'\n        in horner_sum of_bool 2 (map f [0..<n])\n   else if \\<exists>n. \\<forall>n'\\<ge>n. f n'\n        then let n = LEAST n. \\<forall>n'\\<ge>n. f n'\n             in signed_take_bit n\n                 (horner_sum of_bool 2 (map f [0..<n] @ [True]))\n        else 0)\n\ngoal:\nNo subgoals!", "qed"], ["", "inductive wf_set_bits_int :: \"(nat \\<Rightarrow> bool) \\<Rightarrow> bool\"\n  for f :: \"nat \\<Rightarrow> bool\"\nwhere\n  zeros: \"\\<forall>n' \\<ge> n. \\<not> f n' \\<Longrightarrow> wf_set_bits_int f\"\n| ones: \"\\<forall>n' \\<ge> n. f n' \\<Longrightarrow> wf_set_bits_int f\""], ["", "lemma wf_set_bits_int_simps: \"wf_set_bits_int f \\<longleftrightarrow> (\\<exists>n. (\\<forall>n'\\<ge>n. \\<not> f n') \\<or> (\\<forall>n'\\<ge>n. f n'))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wf_set_bits_int f =\n    (\\<exists>n.\n        (\\<forall>n'\\<ge>n. \\<not> f n') \\<or> (\\<forall>n'\\<ge>n. f n'))", "by(auto simp add: wf_set_bits_int.simps)"], ["", "lemma wf_set_bits_int_const [simp]: \"wf_set_bits_int (\\<lambda>_. b)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wf_set_bits_int (\\<lambda>_. b)", "by(cases b)(auto intro: wf_set_bits_int.intros)"], ["", "lemma wf_set_bits_int_fun_upd [simp]:\n  \"wf_set_bits_int (f(n := b)) \\<longleftrightarrow> wf_set_bits_int f\" (is \"?lhs \\<longleftrightarrow> ?rhs\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. wf_set_bits_int (f(n := b)) = wf_set_bits_int f", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. wf_set_bits_int (f(n := b)) \\<Longrightarrow> wf_set_bits_int f\n 2. wf_set_bits_int f \\<Longrightarrow> wf_set_bits_int (f(n := b))", "assume ?lhs"], ["proof (state)\nthis:\n  wf_set_bits_int (f(n := b))\n\ngoal (2 subgoals):\n 1. wf_set_bits_int (f(n := b)) \\<Longrightarrow> wf_set_bits_int f\n 2. wf_set_bits_int f \\<Longrightarrow> wf_set_bits_int (f(n := b))", "then"], ["proof (chain)\npicking this:\n  wf_set_bits_int (f(n := b))", "obtain n'\n    where \"(\\<forall>n''\\<ge>n'. \\<not> (f(n := b)) n'') \\<or> (\\<forall>n''\\<ge>n'. (f(n := b)) n'')\""], ["proof (prove)\nusing this:\n  wf_set_bits_int (f(n := b))\n\ngoal (1 subgoal):\n 1. (\\<And>n'.\n        (\\<forall>n''\\<ge>n'. \\<not> (f(n := b)) n'') \\<or>\n        (\\<forall>n''\\<ge>n'. (f(n := b)) n'') \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by(auto simp add: wf_set_bits_int_simps)"], ["proof (state)\nthis:\n  (\\<forall>n''\\<ge>n'. \\<not> (f(n := b)) n'') \\<or>\n  (\\<forall>n''\\<ge>n'. (f(n := b)) n'')\n\ngoal (2 subgoals):\n 1. wf_set_bits_int (f(n := b)) \\<Longrightarrow> wf_set_bits_int f\n 2. wf_set_bits_int f \\<Longrightarrow> wf_set_bits_int (f(n := b))", "hence \"(\\<forall>n''\\<ge>max (Suc n) n'. \\<not> f n'') \\<or> (\\<forall>n''\\<ge>max (Suc n) n'. f n'')\""], ["proof (prove)\nusing this:\n  (\\<forall>n''\\<ge>n'. \\<not> (f(n := b)) n'') \\<or>\n  (\\<forall>n''\\<ge>n'. (f(n := b)) n'')\n\ngoal (1 subgoal):\n 1. (\\<forall>n''\\<ge>max (Suc n) n'. \\<not> f n'') \\<or>\n    (\\<forall>n''\\<ge>max (Suc n) n'. f n'')", "by auto"], ["proof (state)\nthis:\n  (\\<forall>n''\\<ge>max (Suc n) n'. \\<not> f n'') \\<or>\n  (\\<forall>n''\\<ge>max (Suc n) n'. f n'')\n\ngoal (2 subgoals):\n 1. wf_set_bits_int (f(n := b)) \\<Longrightarrow> wf_set_bits_int f\n 2. wf_set_bits_int f \\<Longrightarrow> wf_set_bits_int (f(n := b))", "thus ?rhs"], ["proof (prove)\nusing this:\n  (\\<forall>n''\\<ge>max (Suc n) n'. \\<not> f n'') \\<or>\n  (\\<forall>n''\\<ge>max (Suc n) n'. f n'')\n\ngoal (1 subgoal):\n 1. wf_set_bits_int f", "by(auto simp only: wf_set_bits_int_simps)"], ["proof (state)\nthis:\n  wf_set_bits_int f\n\ngoal (1 subgoal):\n 1. wf_set_bits_int f \\<Longrightarrow> wf_set_bits_int (f(n := b))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. wf_set_bits_int f \\<Longrightarrow> wf_set_bits_int (f(n := b))", "assume ?rhs"], ["proof (state)\nthis:\n  wf_set_bits_int f\n\ngoal (1 subgoal):\n 1. wf_set_bits_int f \\<Longrightarrow> wf_set_bits_int (f(n := b))", "then"], ["proof (chain)\npicking this:\n  wf_set_bits_int f", "obtain n' where \"(\\<forall>n''\\<ge>n'. \\<not> f n'') \\<or> (\\<forall>n''\\<ge>n'. f n'')\" (is \"?wf f n'\")"], ["proof (prove)\nusing this:\n  wf_set_bits_int f\n\ngoal (1 subgoal):\n 1. (\\<And>n'.\n        (\\<forall>n''\\<ge>n'. \\<not> f n'') \\<or>\n        (\\<forall>n''\\<ge>n'. f n'') \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by(auto simp add: wf_set_bits_int_simps)"], ["proof (state)\nthis:\n  (\\<forall>n''\\<ge>n'. \\<not> f n'') \\<or> (\\<forall>n''\\<ge>n'. f n'')\n\ngoal (1 subgoal):\n 1. wf_set_bits_int f \\<Longrightarrow> wf_set_bits_int (f(n := b))", "hence \"?wf (f(n := b)) (max (Suc n) n')\""], ["proof (prove)\nusing this:\n  (\\<forall>n''\\<ge>n'. \\<not> f n'') \\<or> (\\<forall>n''\\<ge>n'. f n'')\n\ngoal (1 subgoal):\n 1. (\\<forall>n''\\<ge>max (Suc n) n'. \\<not> (f(n := b)) n'') \\<or>\n    (\\<forall>n''\\<ge>max (Suc n) n'. (f(n := b)) n'')", "by auto"], ["proof (state)\nthis:\n  (\\<forall>n''\\<ge>max (Suc n) n'. \\<not> (f(n := b)) n'') \\<or>\n  (\\<forall>n''\\<ge>max (Suc n) n'. (f(n := b)) n'')\n\ngoal (1 subgoal):\n 1. wf_set_bits_int f \\<Longrightarrow> wf_set_bits_int (f(n := b))", "thus ?lhs"], ["proof (prove)\nusing this:\n  (\\<forall>n''\\<ge>max (Suc n) n'. \\<not> (f(n := b)) n'') \\<or>\n  (\\<forall>n''\\<ge>max (Suc n) n'. (f(n := b)) n'')\n\ngoal (1 subgoal):\n 1. wf_set_bits_int (f(n := b))", "by(auto simp only: wf_set_bits_int_simps)"], ["proof (state)\nthis:\n  wf_set_bits_int (f(n := b))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma wf_set_bits_int_Suc [simp]:\n  \"wf_set_bits_int (\\<lambda>n. f (Suc n)) \\<longleftrightarrow> wf_set_bits_int f\" (is \"?lhs \\<longleftrightarrow> ?rhs\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. wf_set_bits_int (\\<lambda>n. f (Suc n)) = wf_set_bits_int f", "by(auto simp add: wf_set_bits_int_simps intro: le_SucI dest: Suc_le_D)"], ["", "context\n  fixes f\n  assumes wff: \"wf_set_bits_int f\"\nbegin"], ["", "lemma int_set_bits_unfold_BIT:\n  \"set_bits f = of_bool (f 0) + (2 :: int) * set_bits (f \\<circ> Suc)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set_bits f = of_bool (f 0) + 2 * set_bits (f \\<circ> Suc)", "using wff"], ["proof (prove)\nusing this:\n  wf_set_bits_int f\n\ngoal (1 subgoal):\n 1. set_bits f = of_bool (f 0) + 2 * set_bits (f \\<circ> Suc)", "proof cases"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>n.\n       \\<forall>n'\\<ge>n. \\<not> f n' \\<Longrightarrow>\n       set_bits f = of_bool (f 0) + 2 * set_bits (f \\<circ> Suc)\n 2. \\<And>n.\n       \\<forall>n'\\<ge>n. f n' \\<Longrightarrow>\n       set_bits f = of_bool (f 0) + 2 * set_bits (f \\<circ> Suc)", "case (zeros n)"], ["proof (state)\nthis:\n  \\<forall>n'\\<ge>n. \\<not> f n'\n\ngoal (2 subgoals):\n 1. \\<And>n.\n       \\<forall>n'\\<ge>n. \\<not> f n' \\<Longrightarrow>\n       set_bits f = of_bool (f 0) + 2 * set_bits (f \\<circ> Suc)\n 2. \\<And>n.\n       \\<forall>n'\\<ge>n. f n' \\<Longrightarrow>\n       set_bits f = of_bool (f 0) + 2 * set_bits (f \\<circ> Suc)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. set_bits f = of_bool (f 0) + 2 * set_bits (f \\<circ> Suc)", "proof(cases \"\\<forall>n. \\<not> f n\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<forall>n. \\<not> f n \\<Longrightarrow>\n    set_bits f = of_bool (f 0) + 2 * set_bits (f \\<circ> Suc)\n 2. \\<not> (\\<forall>n. \\<not> f n) \\<Longrightarrow>\n    set_bits f = of_bool (f 0) + 2 * set_bits (f \\<circ> Suc)", "case True"], ["proof (state)\nthis:\n  \\<forall>n. \\<not> f n\n\ngoal (2 subgoals):\n 1. \\<forall>n. \\<not> f n \\<Longrightarrow>\n    set_bits f = of_bool (f 0) + 2 * set_bits (f \\<circ> Suc)\n 2. \\<not> (\\<forall>n. \\<not> f n) \\<Longrightarrow>\n    set_bits f = of_bool (f 0) + 2 * set_bits (f \\<circ> Suc)", "hence \"f = (\\<lambda>_. False)\""], ["proof (prove)\nusing this:\n  \\<forall>n. \\<not> f n\n\ngoal (1 subgoal):\n 1. f = (\\<lambda>_. False)", "by auto"], ["proof (state)\nthis:\n  f = (\\<lambda>_. False)\n\ngoal (2 subgoals):\n 1. \\<forall>n. \\<not> f n \\<Longrightarrow>\n    set_bits f = of_bool (f 0) + 2 * set_bits (f \\<circ> Suc)\n 2. \\<not> (\\<forall>n. \\<not> f n) \\<Longrightarrow>\n    set_bits f = of_bool (f 0) + 2 * set_bits (f \\<circ> Suc)", "thus ?thesis"], ["proof (prove)\nusing this:\n  f = (\\<lambda>_. False)\n\ngoal (1 subgoal):\n 1. set_bits f = of_bool (f 0) + 2 * set_bits (f \\<circ> Suc)", "using True"], ["proof (prove)\nusing this:\n  f = (\\<lambda>_. False)\n  \\<forall>n. \\<not> f n\n\ngoal (1 subgoal):\n 1. set_bits f = of_bool (f 0) + 2 * set_bits (f \\<circ> Suc)", "by(simp add: o_def)"], ["proof (state)\nthis:\n  set_bits f = of_bool (f 0) + 2 * set_bits (f \\<circ> Suc)\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>n. \\<not> f n) \\<Longrightarrow>\n    set_bits f = of_bool (f 0) + 2 * set_bits (f \\<circ> Suc)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>n. \\<not> f n) \\<Longrightarrow>\n    set_bits f = of_bool (f 0) + 2 * set_bits (f \\<circ> Suc)", "case False"], ["proof (state)\nthis:\n  \\<not> (\\<forall>n. \\<not> f n)\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>n. \\<not> f n) \\<Longrightarrow>\n    set_bits f = of_bool (f 0) + 2 * set_bits (f \\<circ> Suc)", "then"], ["proof (chain)\npicking this:\n  \\<not> (\\<forall>n. \\<not> f n)", "obtain n' where \"f n'\""], ["proof (prove)\nusing this:\n  \\<not> (\\<forall>n. \\<not> f n)\n\ngoal (1 subgoal):\n 1. (\\<And>n'. f n' \\<Longrightarrow> thesis) \\<Longrightarrow> thesis", "by blast"], ["proof (state)\nthis:\n  f n'\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>n. \\<not> f n) \\<Longrightarrow>\n    set_bits f = of_bool (f 0) + 2 * set_bits (f \\<circ> Suc)", "with zeros"], ["proof (chain)\npicking this:\n  \\<forall>n'\\<ge>n. \\<not> f n'\n  f n'", "have \"(LEAST n. \\<forall>n'\\<ge>n. \\<not> f n') = Suc (LEAST n. \\<forall>n'\\<ge>Suc n. \\<not> f n')\""], ["proof (prove)\nusing this:\n  \\<forall>n'\\<ge>n. \\<not> f n'\n  f n'\n\ngoal (1 subgoal):\n 1. (LEAST n. \\<forall>n'\\<ge>n. \\<not> f n') =\n    Suc (LEAST n. \\<forall>n'\\<ge>Suc n. \\<not> f n')", "by(auto intro: Least_Suc)"], ["proof (state)\nthis:\n  (LEAST n. \\<forall>n'\\<ge>n. \\<not> f n') =\n  Suc (LEAST n. \\<forall>n'\\<ge>Suc n. \\<not> f n')\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>n. \\<not> f n) \\<Longrightarrow>\n    set_bits f = of_bool (f 0) + 2 * set_bits (f \\<circ> Suc)", "also"], ["proof (state)\nthis:\n  (LEAST n. \\<forall>n'\\<ge>n. \\<not> f n') =\n  Suc (LEAST n. \\<forall>n'\\<ge>Suc n. \\<not> f n')\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>n. \\<not> f n) \\<Longrightarrow>\n    set_bits f = of_bool (f 0) + 2 * set_bits (f \\<circ> Suc)", "have \"(\\<lambda>n. \\<forall>n'\\<ge>Suc n. \\<not> f n') = (\\<lambda>n. \\<forall>n'\\<ge>n. \\<not> f (Suc n'))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>n. \\<forall>n'\\<ge>Suc n. \\<not> f n') =\n    (\\<lambda>n. \\<forall>n'\\<ge>n. \\<not> f (Suc n'))", "by(auto dest: Suc_le_D)"], ["proof (state)\nthis:\n  (\\<lambda>n. \\<forall>n'\\<ge>Suc n. \\<not> f n') =\n  (\\<lambda>n. \\<forall>n'\\<ge>n. \\<not> f (Suc n'))\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>n. \\<not> f n) \\<Longrightarrow>\n    set_bits f = of_bool (f 0) + 2 * set_bits (f \\<circ> Suc)", "also"], ["proof (state)\nthis:\n  (\\<lambda>n. \\<forall>n'\\<ge>Suc n. \\<not> f n') =\n  (\\<lambda>n. \\<forall>n'\\<ge>n. \\<not> f (Suc n'))\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>n. \\<not> f n) \\<Longrightarrow>\n    set_bits f = of_bool (f 0) + 2 * set_bits (f \\<circ> Suc)", "from zeros"], ["proof (chain)\npicking this:\n  \\<forall>n'\\<ge>n. \\<not> f n'", "have \"\\<forall>n'\\<ge>n. \\<not> f (Suc n')\""], ["proof (prove)\nusing this:\n  \\<forall>n'\\<ge>n. \\<not> f n'\n\ngoal (1 subgoal):\n 1. \\<forall>n'\\<ge>n. \\<not> f (Suc n')", "by auto"], ["proof (state)\nthis:\n  \\<forall>n'\\<ge>n. \\<not> f (Suc n')\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>n. \\<not> f n) \\<Longrightarrow>\n    set_bits f = of_bool (f 0) + 2 * set_bits (f \\<circ> Suc)", "ultimately"], ["proof (chain)\npicking this:\n  (LEAST n. \\<forall>n'\\<ge>n. \\<not> f n') =\n  Suc (LEAST n. \\<forall>n'\\<ge>n. \\<not> f (Suc n'))\n  \\<forall>n'\\<ge>n. \\<not> f (Suc n')", "show ?thesis"], ["proof (prove)\nusing this:\n  (LEAST n. \\<forall>n'\\<ge>n. \\<not> f n') =\n  Suc (LEAST n. \\<forall>n'\\<ge>n. \\<not> f (Suc n'))\n  \\<forall>n'\\<ge>n. \\<not> f (Suc n')\n\ngoal (1 subgoal):\n 1. set_bits f = of_bool (f 0) + 2 * set_bits (f \\<circ> Suc)", "using zeros"], ["proof (prove)\nusing this:\n  (LEAST n. \\<forall>n'\\<ge>n. \\<not> f n') =\n  Suc (LEAST n. \\<forall>n'\\<ge>n. \\<not> f (Suc n'))\n  \\<forall>n'\\<ge>n. \\<not> f (Suc n')\n  \\<forall>n'\\<ge>n. \\<not> f n'\n\ngoal (1 subgoal):\n 1. set_bits f = of_bool (f 0) + 2 * set_bits (f \\<circ> Suc)", "apply (simp (no_asm_simp) add: set_bits_int_unfold' exI\n        del: upt.upt_Suc flip: map_map split del: if_split)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>(LEAST n. \\<forall>n'\\<ge>n. \\<not> f n') =\n             Suc (LEAST n. \\<forall>n'\\<ge>n. \\<not> f (Suc n'));\n     \\<forall>n'\\<ge>n. \\<not> f (Suc n');\n     \\<forall>n'\\<ge>n. \\<not> f n'\\<rbrakk>\n    \\<Longrightarrow> (f 0 \\<longrightarrow>\n                       horner_sum of_bool 2\n                        (map f\n                          [0..<\n                           Suc (LEAST n.\n                                   \\<forall>n'\\<ge>n. \\<not> f (Suc n'))]) =\n                       1 +\n                       2 *\n                       horner_sum of_bool 2\n                        (map f\n                          (map Suc\n                            [0..<\n                             LEAST n.\n                                \\<forall>n'\\<ge>n.\n                                   \\<not> f (Suc n')]))) \\<and>\n                      (\\<not> f 0 \\<longrightarrow>\n                       horner_sum of_bool 2\n                        (map f\n                          [0..<\n                           Suc (LEAST n.\n                                   \\<forall>n'\\<ge>n. \\<not> f (Suc n'))]) =\n                       2 *\n                       horner_sum of_bool 2\n                        (map f\n                          (map Suc\n                            [0..<\n                             LEAST n.\n                                \\<forall>n'\\<ge>n. \\<not> f (Suc n')])))", "apply (simp only: map_Suc_upt upt_conv_Cons)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>(LEAST n. \\<forall>n'\\<ge>n. \\<not> f n') =\n             Suc (LEAST n. \\<forall>n'\\<ge>n. \\<not> f (Suc n'));\n     \\<forall>n'\\<ge>n. \\<not> f (Suc n');\n     \\<forall>n'\\<ge>n. \\<not> f n'\\<rbrakk>\n    \\<Longrightarrow> (f 0 \\<longrightarrow>\n                       horner_sum of_bool 2\n                        (map f\n                          (0 #\n                           [Suc 0..<\n                            Suc (LEAST n.\n                                    \\<forall>n'\\<ge>n.\n \\<not> f (Suc n'))])) =\n                       1 +\n                       2 *\n                       horner_sum of_bool 2\n                        (map f\n                          [Suc 0..<\n                           Suc (LEAST n.\n                                   \\<forall>n'\\<ge>n.\n\\<not> f (Suc n'))])) \\<and>\n                      (\\<not> f 0 \\<longrightarrow>\n                       horner_sum of_bool 2\n                        (map f\n                          (0 #\n                           [Suc 0..<\n                            Suc (LEAST n.\n                                    \\<forall>n'\\<ge>n.\n \\<not> f (Suc n'))])) =\n                       2 *\n                       horner_sum of_bool 2\n                        (map f\n                          [Suc 0..<\n                           Suc (LEAST n.\n                                   \\<forall>n'\\<ge>n. \\<not> f (Suc n'))]))", "apply simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  set_bits f = of_bool (f 0) + 2 * set_bits (f \\<circ> Suc)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  set_bits f = of_bool (f 0) + 2 * set_bits (f \\<circ> Suc)\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<forall>n'\\<ge>n. f n' \\<Longrightarrow>\n       set_bits f = of_bool (f 0) + 2 * set_bits (f \\<circ> Suc)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<forall>n'\\<ge>n. f n' \\<Longrightarrow>\n       set_bits f = of_bool (f 0) + 2 * set_bits (f \\<circ> Suc)", "case (ones n)"], ["proof (state)\nthis:\n  \\<forall>n'\\<ge>n. f n'\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<forall>n'\\<ge>n. f n' \\<Longrightarrow>\n       set_bits f = of_bool (f 0) + 2 * set_bits (f \\<circ> Suc)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. set_bits f = of_bool (f 0) + 2 * set_bits (f \\<circ> Suc)", "proof(cases \"\\<forall>n. f n\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<forall>n. f n \\<Longrightarrow>\n    set_bits f = of_bool (f 0) + 2 * set_bits (f \\<circ> Suc)\n 2. \\<not> (\\<forall>n. f n) \\<Longrightarrow>\n    set_bits f = of_bool (f 0) + 2 * set_bits (f \\<circ> Suc)", "case True"], ["proof (state)\nthis:\n  \\<forall>n. f n\n\ngoal (2 subgoals):\n 1. \\<forall>n. f n \\<Longrightarrow>\n    set_bits f = of_bool (f 0) + 2 * set_bits (f \\<circ> Suc)\n 2. \\<not> (\\<forall>n. f n) \\<Longrightarrow>\n    set_bits f = of_bool (f 0) + 2 * set_bits (f \\<circ> Suc)", "hence \"f = (\\<lambda>_. True)\""], ["proof (prove)\nusing this:\n  \\<forall>n. f n\n\ngoal (1 subgoal):\n 1. f = (\\<lambda>_. True)", "by auto"], ["proof (state)\nthis:\n  f = (\\<lambda>_. True)\n\ngoal (2 subgoals):\n 1. \\<forall>n. f n \\<Longrightarrow>\n    set_bits f = of_bool (f 0) + 2 * set_bits (f \\<circ> Suc)\n 2. \\<not> (\\<forall>n. f n) \\<Longrightarrow>\n    set_bits f = of_bool (f 0) + 2 * set_bits (f \\<circ> Suc)", "thus ?thesis"], ["proof (prove)\nusing this:\n  f = (\\<lambda>_. True)\n\ngoal (1 subgoal):\n 1. set_bits f = of_bool (f 0) + 2 * set_bits (f \\<circ> Suc)", "using True"], ["proof (prove)\nusing this:\n  f = (\\<lambda>_. True)\n  \\<forall>n. f n\n\ngoal (1 subgoal):\n 1. set_bits f = of_bool (f 0) + 2 * set_bits (f \\<circ> Suc)", "by(simp add: o_def)"], ["proof (state)\nthis:\n  set_bits f = of_bool (f 0) + 2 * set_bits (f \\<circ> Suc)\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>n. f n) \\<Longrightarrow>\n    set_bits f = of_bool (f 0) + 2 * set_bits (f \\<circ> Suc)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>n. f n) \\<Longrightarrow>\n    set_bits f = of_bool (f 0) + 2 * set_bits (f \\<circ> Suc)", "case False"], ["proof (state)\nthis:\n  \\<not> (\\<forall>n. f n)\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>n. f n) \\<Longrightarrow>\n    set_bits f = of_bool (f 0) + 2 * set_bits (f \\<circ> Suc)", "then"], ["proof (chain)\npicking this:\n  \\<not> (\\<forall>n. f n)", "obtain n' where \"\\<not> f n'\""], ["proof (prove)\nusing this:\n  \\<not> (\\<forall>n. f n)\n\ngoal (1 subgoal):\n 1. (\\<And>n'. \\<not> f n' \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  \\<not> f n'\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>n. f n) \\<Longrightarrow>\n    set_bits f = of_bool (f 0) + 2 * set_bits (f \\<circ> Suc)", "with ones"], ["proof (chain)\npicking this:\n  \\<forall>n'\\<ge>n. f n'\n  \\<not> f n'", "have \"(LEAST n. \\<forall>n'\\<ge>n. f n') = Suc (LEAST n. \\<forall>n'\\<ge>Suc n. f n')\""], ["proof (prove)\nusing this:\n  \\<forall>n'\\<ge>n. f n'\n  \\<not> f n'\n\ngoal (1 subgoal):\n 1. (LEAST n. \\<forall>n'\\<ge>n. f n') =\n    Suc (LEAST n. \\<forall>n'\\<ge>Suc n. f n')", "by(auto intro: Least_Suc)"], ["proof (state)\nthis:\n  (LEAST n. \\<forall>n'\\<ge>n. f n') =\n  Suc (LEAST n. \\<forall>n'\\<ge>Suc n. f n')\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>n. f n) \\<Longrightarrow>\n    set_bits f = of_bool (f 0) + 2 * set_bits (f \\<circ> Suc)", "also"], ["proof (state)\nthis:\n  (LEAST n. \\<forall>n'\\<ge>n. f n') =\n  Suc (LEAST n. \\<forall>n'\\<ge>Suc n. f n')\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>n. f n) \\<Longrightarrow>\n    set_bits f = of_bool (f 0) + 2 * set_bits (f \\<circ> Suc)", "have \"(\\<lambda>n. \\<forall>n'\\<ge>Suc n. f n') = (\\<lambda>n. \\<forall>n'\\<ge>n. f (Suc n'))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>n. \\<forall>n'\\<ge>Suc n. f n') =\n    (\\<lambda>n. \\<forall>n'\\<ge>n. f (Suc n'))", "by(auto dest: Suc_le_D)"], ["proof (state)\nthis:\n  (\\<lambda>n. \\<forall>n'\\<ge>Suc n. f n') =\n  (\\<lambda>n. \\<forall>n'\\<ge>n. f (Suc n'))\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>n. f n) \\<Longrightarrow>\n    set_bits f = of_bool (f 0) + 2 * set_bits (f \\<circ> Suc)", "also"], ["proof (state)\nthis:\n  (\\<lambda>n. \\<forall>n'\\<ge>Suc n. f n') =\n  (\\<lambda>n. \\<forall>n'\\<ge>n. f (Suc n'))\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>n. f n) \\<Longrightarrow>\n    set_bits f = of_bool (f 0) + 2 * set_bits (f \\<circ> Suc)", "from ones"], ["proof (chain)\npicking this:\n  \\<forall>n'\\<ge>n. f n'", "have \"\\<forall>n'\\<ge>n. f (Suc n')\""], ["proof (prove)\nusing this:\n  \\<forall>n'\\<ge>n. f n'\n\ngoal (1 subgoal):\n 1. \\<forall>n'\\<ge>n. f (Suc n')", "by auto"], ["proof (state)\nthis:\n  \\<forall>n'\\<ge>n. f (Suc n')\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>n. f n) \\<Longrightarrow>\n    set_bits f = of_bool (f 0) + 2 * set_bits (f \\<circ> Suc)", "moreover"], ["proof (state)\nthis:\n  \\<forall>n'\\<ge>n. f (Suc n')\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>n. f n) \\<Longrightarrow>\n    set_bits f = of_bool (f 0) + 2 * set_bits (f \\<circ> Suc)", "from ones"], ["proof (chain)\npicking this:\n  \\<forall>n'\\<ge>n. f n'", "have \"(\\<exists>n. \\<forall>n'\\<ge>n. \\<not> f n') = False\""], ["proof (prove)\nusing this:\n  \\<forall>n'\\<ge>n. f n'\n\ngoal (1 subgoal):\n 1. (\\<exists>n. \\<forall>n'\\<ge>n. \\<not> f n') = False", "by(auto intro!: exI[where x=\"max n m\" for n m] simp add: max_def split: if_split_asm)"], ["proof (state)\nthis:\n  (\\<exists>n. \\<forall>n'\\<ge>n. \\<not> f n') = False\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>n. f n) \\<Longrightarrow>\n    set_bits f = of_bool (f 0) + 2 * set_bits (f \\<circ> Suc)", "moreover"], ["proof (state)\nthis:\n  (\\<exists>n. \\<forall>n'\\<ge>n. \\<not> f n') = False\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>n. f n) \\<Longrightarrow>\n    set_bits f = of_bool (f 0) + 2 * set_bits (f \\<circ> Suc)", "hence \"(\\<exists>n. \\<forall>n'\\<ge>n. \\<not> f (Suc n')) = False\""], ["proof (prove)\nusing this:\n  (\\<exists>n. \\<forall>n'\\<ge>n. \\<not> f n') = False\n\ngoal (1 subgoal):\n 1. (\\<exists>n. \\<forall>n'\\<ge>n. \\<not> f (Suc n')) = False", "by(auto elim: allE[where x=\"Suc n\" for n] dest: Suc_le_D)"], ["proof (state)\nthis:\n  (\\<exists>n. \\<forall>n'\\<ge>n. \\<not> f (Suc n')) = False\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>n. f n) \\<Longrightarrow>\n    set_bits f = of_bool (f 0) + 2 * set_bits (f \\<circ> Suc)", "ultimately"], ["proof (chain)\npicking this:\n  (LEAST n. \\<forall>n'\\<ge>n. f n') =\n  Suc (LEAST n. \\<forall>n'\\<ge>n. f (Suc n'))\n  \\<forall>n'\\<ge>n. f (Suc n')\n  (\\<exists>n. \\<forall>n'\\<ge>n. \\<not> f n') = False\n  (\\<exists>n. \\<forall>n'\\<ge>n. \\<not> f (Suc n')) = False", "show ?thesis"], ["proof (prove)\nusing this:\n  (LEAST n. \\<forall>n'\\<ge>n. f n') =\n  Suc (LEAST n. \\<forall>n'\\<ge>n. f (Suc n'))\n  \\<forall>n'\\<ge>n. f (Suc n')\n  (\\<exists>n. \\<forall>n'\\<ge>n. \\<not> f n') = False\n  (\\<exists>n. \\<forall>n'\\<ge>n. \\<not> f (Suc n')) = False\n\ngoal (1 subgoal):\n 1. set_bits f = of_bool (f 0) + 2 * set_bits (f \\<circ> Suc)", "using ones"], ["proof (prove)\nusing this:\n  (LEAST n. \\<forall>n'\\<ge>n. f n') =\n  Suc (LEAST n. \\<forall>n'\\<ge>n. f (Suc n'))\n  \\<forall>n'\\<ge>n. f (Suc n')\n  (\\<exists>n. \\<forall>n'\\<ge>n. \\<not> f n') = False\n  (\\<exists>n. \\<forall>n'\\<ge>n. \\<not> f (Suc n')) = False\n  \\<forall>n'\\<ge>n. f n'\n\ngoal (1 subgoal):\n 1. set_bits f = of_bool (f 0) + 2 * set_bits (f \\<circ> Suc)", "apply (simp (no_asm_simp) add: set_bits_int_unfold' exI split del: if_split)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>(LEAST n. \\<forall>n'\\<ge>n. f n') =\n             Suc (LEAST n. \\<forall>n'\\<ge>n. f (Suc n'));\n     \\<forall>n'\\<ge>n. f (Suc n');\n     (\\<exists>n. \\<forall>n'\\<ge>n. \\<not> f n') = False;\n     (\\<exists>n. \\<forall>n'\\<ge>n. \\<not> f (Suc n')) = False;\n     \\<forall>n'\\<ge>n. f n'\\<rbrakk>\n    \\<Longrightarrow> (f 0 \\<longrightarrow>\n                       signed_take_bit\n                        (Suc (LEAST n. \\<forall>n'\\<ge>n. f (Suc n')))\n                        (horner_sum of_bool 2\n                          (map f\n                            [0..<LEAST n. \\<forall>n'\\<ge>n. f (Suc n')] @\n                           [f (LEAST n. \\<forall>n'\\<ge>n. f (Suc n')),\n                            True])) =\n                       1 +\n                       2 *\n                       (let n = LEAST n. \\<forall>n'\\<ge>n. f (Suc n')\n                        in signed_take_bit n\n                            (horner_sum of_bool 2\n                              (map (f \\<circ> Suc) [0..<n] @\n                               [True])))) \\<and>\n                      (\\<not> f 0 \\<longrightarrow>\n                       signed_take_bit\n                        (Suc (LEAST n. \\<forall>n'\\<ge>n. f (Suc n')))\n                        (horner_sum of_bool 2\n                          (map f\n                            [0..<LEAST n. \\<forall>n'\\<ge>n. f (Suc n')] @\n                           [f (LEAST n. \\<forall>n'\\<ge>n. f (Suc n')),\n                            True])) =\n                       2 *\n                       (let n = LEAST n. \\<forall>n'\\<ge>n. f (Suc n')\n                        in signed_take_bit n\n                            (horner_sum of_bool 2\n                              (map (f \\<circ> Suc) [0..<n] @ [True]))))", "apply (auto simp add: Let_def hd_map map_tl[symmetric] map_map[symmetric] map_Suc_upt upt_conv_Cons signed_take_bit_Suc\n        not_le simp del: map_map)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  set_bits f = of_bool (f 0) + 2 * set_bits (f \\<circ> Suc)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  set_bits f = of_bool (f 0) + 2 * set_bits (f \\<circ> Suc)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma bin_last_set_bits [simp]:\n  \"odd (set_bits f :: int) = f 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. odd (set_bits f) = f 0", "by (subst int_set_bits_unfold_BIT) simp_all"], ["", "lemma bin_rest_set_bits [simp]:\n  \"set_bits f div (2 :: int) = set_bits (f \\<circ> Suc)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set_bits f div 2 = set_bits (f \\<circ> Suc)", "by (subst int_set_bits_unfold_BIT) simp_all"], ["", "lemma bin_nth_set_bits [simp]:\n  \"bit (set_bits f :: int) m \\<longleftrightarrow> f m\""], ["proof (prove)\ngoal (1 subgoal):\n 1. bit (set_bits f) m = f m", "using wff"], ["proof (prove)\nusing this:\n  wf_set_bits_int f\n\ngoal (1 subgoal):\n 1. bit (set_bits f) m = f m", "proof (induction m arbitrary: f)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>f. wf_set_bits_int f \\<Longrightarrow> bit (set_bits f) 0 = f 0\n 2. \\<And>m f.\n       \\<lbrakk>\\<And>f.\n                   wf_set_bits_int f \\<Longrightarrow>\n                   bit (set_bits f) m = f m;\n        wf_set_bits_int f\\<rbrakk>\n       \\<Longrightarrow> bit (set_bits f) (Suc m) = f (Suc m)", "case 0"], ["proof (state)\nthis:\n  wf_set_bits_int f\n\ngoal (2 subgoals):\n 1. \\<And>f. wf_set_bits_int f \\<Longrightarrow> bit (set_bits f) 0 = f 0\n 2. \\<And>m f.\n       \\<lbrakk>\\<And>f.\n                   wf_set_bits_int f \\<Longrightarrow>\n                   bit (set_bits f) m = f m;\n        wf_set_bits_int f\\<rbrakk>\n       \\<Longrightarrow> bit (set_bits f) (Suc m) = f (Suc m)", "then"], ["proof (chain)\npicking this:\n  wf_set_bits_int f", "show ?case"], ["proof (prove)\nusing this:\n  wf_set_bits_int f\n\ngoal (1 subgoal):\n 1. bit (BITS a. f a) 0 = f 0", "by (simp add: Bit_Comprehension.bin_last_set_bits)"], ["proof (state)\nthis:\n  bit (BITS a. f a) 0 = f 0\n\ngoal (1 subgoal):\n 1. \\<And>m f.\n       \\<lbrakk>\\<And>f.\n                   wf_set_bits_int f \\<Longrightarrow>\n                   bit (set_bits f) m = f m;\n        wf_set_bits_int f\\<rbrakk>\n       \\<Longrightarrow> bit (set_bits f) (Suc m) = f (Suc m)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>m f.\n       \\<lbrakk>\\<And>f.\n                   wf_set_bits_int f \\<Longrightarrow>\n                   bit (set_bits f) m = f m;\n        wf_set_bits_int f\\<rbrakk>\n       \\<Longrightarrow> bit (set_bits f) (Suc m) = f (Suc m)", "case Suc"], ["proof (state)\nthis:\n  wf_set_bits_int ?f \\<Longrightarrow> bit (BITS a. ?f a) m_ = ?f m_\n  wf_set_bits_int f\n\ngoal (1 subgoal):\n 1. \\<And>m f.\n       \\<lbrakk>\\<And>f.\n                   wf_set_bits_int f \\<Longrightarrow>\n                   bit (set_bits f) m = f m;\n        wf_set_bits_int f\\<rbrakk>\n       \\<Longrightarrow> bit (set_bits f) (Suc m) = f (Suc m)", "from Suc.IH [of \"f \\<circ> Suc\"] Suc.prems"], ["proof (chain)\npicking this:\n  wf_set_bits_int (f \\<circ> Suc) \\<Longrightarrow>\n  bit (BITS a. (f \\<circ> Suc) a) m_ = (f \\<circ> Suc) m_\n  wf_set_bits_int f", "show ?case"], ["proof (prove)\nusing this:\n  wf_set_bits_int (f \\<circ> Suc) \\<Longrightarrow>\n  bit (BITS a. (f \\<circ> Suc) a) m_ = (f \\<circ> Suc) m_\n  wf_set_bits_int f\n\ngoal (1 subgoal):\n 1. bit (BITS a. f a) (Suc m_) = f (Suc m_)", "by (simp add: Bit_Comprehension.bin_rest_set_bits comp_def bit_Suc)"], ["proof (state)\nthis:\n  bit (BITS a. f a) (Suc m_) = f (Suc m_)\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "end"]]}