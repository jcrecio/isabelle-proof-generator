{"file_name": "/home/qj213/afp-2021-10-22/thys/Word_Lib/Strict_part_mono.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Word_Lib", "problem_names": ["lemma strict_part_mono_by_steps:\n  \"strict_part_mono {..n :: nat} f = (n \\<noteq> 0 \\<longrightarrow> f (n - 1) < f n \\<and> strict_part_mono {.. n - 1} f)\"", "lemma strict_part_mono_singleton[simp]:\n  \"strict_part_mono {x} f\"", "lemma strict_part_mono_lt:\n  \"\\<lbrakk> x < f 0; strict_part_mono {.. n :: nat} f \\<rbrakk> \\<Longrightarrow> \\<forall>m \\<le> n. x < f m\"", "lemma strict_part_mono_reverseE:\n  \"\\<lbrakk> f n \\<le> f m; strict_part_mono {.. N :: nat} f; n \\<le> N \\<rbrakk> \\<Longrightarrow> n \\<le> m\"", "lemma two_power_strict_part_mono:\n  \"strict_part_mono {..LENGTH('a) - 1} (\\<lambda>x. (2 :: 'a :: len word) ^ x)\""], "translations": [["", "lemma strict_part_mono_by_steps:\n  \"strict_part_mono {..n :: nat} f = (n \\<noteq> 0 \\<longrightarrow> f (n - 1) < f n \\<and> strict_part_mono {.. n - 1} f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. strict_part_mono {..n} f =\n    (n \\<noteq> 0 \\<longrightarrow>\n     f (n - 1) < f n \\<and> strict_part_mono {..n - 1} f)", "apply (cases n; simp add: strict_part_mono_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       (\\<forall>A\\<in>{..Suc nat}.\n           \\<forall>B\\<in>{..Suc nat}. A < B \\<longrightarrow> f A < f B) =\n       (f nat < f (Suc nat) \\<and>\n        (\\<forall>A\\<in>{..nat}.\n            \\<forall>B\\<in>{..nat}. A < B \\<longrightarrow> f A < f B))", "apply (safe; clarsimp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>nat A B.\n       \\<lbrakk>n = Suc nat; B \\<le> Suc nat; f nat < f (Suc nat);\n        \\<forall>A\\<in>{..nat}.\n           \\<forall>B\\<in>{..nat}. A < B \\<longrightarrow> f A < f B;\n        A < B\\<rbrakk>\n       \\<Longrightarrow> f A < f B", "apply (case_tac \"B = Suc nat\"; simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>nat A B.\n       \\<lbrakk>n = Suc nat; f nat < f (Suc nat);\n        \\<forall>A\\<in>{..nat}.\n           \\<forall>B\\<in>{..nat}. A < B \\<longrightarrow> f A < f B;\n        A < Suc nat; B = Suc nat\\<rbrakk>\n       \\<Longrightarrow> f A < f (Suc nat)", "apply (case_tac \"A = nat\"; clarsimp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>nat A.\n       \\<lbrakk>n = Suc nat; f nat < f (Suc nat);\n        \\<forall>A\\<in>{..nat}.\n           \\<forall>B\\<in>{..nat}. A < B \\<longrightarrow> f A < f B;\n        A < Suc nat; A \\<noteq> nat\\<rbrakk>\n       \\<Longrightarrow> f A < f (Suc nat)", "apply (erule order_less_trans [rotated])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>nat A.\n       \\<lbrakk>n = Suc nat;\n        \\<forall>A\\<in>{..nat}.\n           \\<forall>B\\<in>{..nat}. A < B \\<longrightarrow> f A < f B;\n        A < Suc nat; A \\<noteq> nat\\<rbrakk>\n       \\<Longrightarrow> f A < f nat", "apply simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma strict_part_mono_singleton[simp]:\n  \"strict_part_mono {x} f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. strict_part_mono {x} f", "by (simp add: strict_part_mono_def)"], ["", "lemma strict_part_mono_lt:\n  \"\\<lbrakk> x < f 0; strict_part_mono {.. n :: nat} f \\<rbrakk> \\<Longrightarrow> \\<forall>m \\<le> n. x < f m\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>x < f 0; strict_part_mono {..n} f\\<rbrakk>\n    \\<Longrightarrow> \\<forall>m\\<le>n. x < f m", "by (metis atMost_iff le_0_eq le_cases neq0_conv order.strict_trans strict_part_mono_def)"], ["", "lemma strict_part_mono_reverseE:\n  \"\\<lbrakk> f n \\<le> f m; strict_part_mono {.. N :: nat} f; n \\<le> N \\<rbrakk> \\<Longrightarrow> n \\<le> m\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>f n \\<le> f m; strict_part_mono {..N} f; n \\<le> N\\<rbrakk>\n    \\<Longrightarrow> n \\<le> m", "by (rule ccontr) (fastforce simp: linorder_not_le strict_part_mono_def)"], ["", "lemma two_power_strict_part_mono:\n  \"strict_part_mono {..LENGTH('a) - 1} (\\<lambda>x. (2 :: 'a :: len word) ^ x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. strict_part_mono {..LENGTH('a) - 1} ((^) 2)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. strict_part_mono {..LENGTH('a) - 1} ((^) 2)", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. strict_part_mono {..LENGTH('a) - 1} ((^) 2)", "fix n"], ["proof (state)\ngoal (1 subgoal):\n 1. strict_part_mono {..LENGTH('a) - 1} ((^) 2)", "have \"n < LENGTH('a) \\<Longrightarrow> strict_part_mono {..n} (\\<lambda>x. (2 :: 'a :: len word) ^ x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. n < LENGTH('a) \\<Longrightarrow> strict_part_mono {..n} ((^) 2)", "proof (induct n)"], ["proof (state)\ngoal (2 subgoals):\n 1. 0 < LENGTH('a) \\<Longrightarrow> strict_part_mono {..0} ((^) 2)\n 2. \\<And>n.\n       \\<lbrakk>n < LENGTH('a) \\<Longrightarrow>\n                strict_part_mono {..n} ((^) 2);\n        Suc n < LENGTH('a)\\<rbrakk>\n       \\<Longrightarrow> strict_part_mono {..Suc n} ((^) 2)", "case 0"], ["proof (state)\nthis:\n  0 < LENGTH('a)\n\ngoal (2 subgoals):\n 1. 0 < LENGTH('a) \\<Longrightarrow> strict_part_mono {..0} ((^) 2)\n 2. \\<And>n.\n       \\<lbrakk>n < LENGTH('a) \\<Longrightarrow>\n                strict_part_mono {..n} ((^) 2);\n        Suc n < LENGTH('a)\\<rbrakk>\n       \\<Longrightarrow> strict_part_mono {..Suc n} ((^) 2)", "then"], ["proof (chain)\npicking this:\n  0 < LENGTH('a)", "show ?case"], ["proof (prove)\nusing this:\n  0 < LENGTH('a)\n\ngoal (1 subgoal):\n 1. strict_part_mono {..0} ((^) 2)", "by simp"], ["proof (state)\nthis:\n  strict_part_mono {..0} ((^) 2)\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>n < LENGTH('a) \\<Longrightarrow>\n                strict_part_mono {..n} ((^) 2);\n        Suc n < LENGTH('a)\\<rbrakk>\n       \\<Longrightarrow> strict_part_mono {..Suc n} ((^) 2)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>n < LENGTH('a) \\<Longrightarrow>\n                strict_part_mono {..n} ((^) 2);\n        Suc n < LENGTH('a)\\<rbrakk>\n       \\<Longrightarrow> strict_part_mono {..Suc n} ((^) 2)", "case (Suc n)"], ["proof (state)\nthis:\n  n < LENGTH('a) \\<Longrightarrow> strict_part_mono {..n} ((^) 2)\n  Suc n < LENGTH('a)\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>n < LENGTH('a) \\<Longrightarrow>\n                strict_part_mono {..n} ((^) 2);\n        Suc n < LENGTH('a)\\<rbrakk>\n       \\<Longrightarrow> strict_part_mono {..Suc n} ((^) 2)", "from Suc.prems"], ["proof (chain)\npicking this:\n  Suc n < LENGTH('a)", "have \"2 ^ n < (2 :: 'a :: len word) ^ Suc n\""], ["proof (prove)\nusing this:\n  Suc n < LENGTH('a)\n\ngoal (1 subgoal):\n 1. 2 ^ n < 2 ^ Suc n", "using power_strict_increasing unat_power_lower word_less_nat_alt"], ["proof (prove)\nusing this:\n  Suc n < LENGTH('a)\n  \\<lbrakk>?n < ?N; (1::?'a) < ?a\\<rbrakk>\n  \\<Longrightarrow> ?a ^ ?n < ?a ^ ?N\n  ?n < LENGTH(?'a) \\<Longrightarrow> unat (2 ^ ?n) = 2 ^ ?n\n  (?a < ?b) = (unat ?a < unat ?b)\n\ngoal (1 subgoal):\n 1. 2 ^ n < 2 ^ Suc n", "by fastforce"], ["proof (state)\nthis:\n  2 ^ n < 2 ^ Suc n\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>n < LENGTH('a) \\<Longrightarrow>\n                strict_part_mono {..n} ((^) 2);\n        Suc n < LENGTH('a)\\<rbrakk>\n       \\<Longrightarrow> strict_part_mono {..Suc n} ((^) 2)", "with Suc"], ["proof (chain)\npicking this:\n  n < LENGTH('a) \\<Longrightarrow> strict_part_mono {..n} ((^) 2)\n  Suc n < LENGTH('a)\n  2 ^ n < 2 ^ Suc n", "show ?case"], ["proof (prove)\nusing this:\n  n < LENGTH('a) \\<Longrightarrow> strict_part_mono {..n} ((^) 2)\n  Suc n < LENGTH('a)\n  2 ^ n < 2 ^ Suc n\n\ngoal (1 subgoal):\n 1. strict_part_mono {..Suc n} ((^) 2)", "by (subst strict_part_mono_by_steps) simp"], ["proof (state)\nthis:\n  strict_part_mono {..Suc n} ((^) 2)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  n < LENGTH('a) \\<Longrightarrow> strict_part_mono {..n} ((^) 2)\n\ngoal (1 subgoal):\n 1. strict_part_mono {..LENGTH('a) - 1} ((^) 2)", "}"], ["proof (state)\nthis:\n  ?n2 < LENGTH('a) \\<Longrightarrow> strict_part_mono {..?n2} ((^) 2)\n\ngoal (1 subgoal):\n 1. strict_part_mono {..LENGTH('a) - 1} ((^) 2)", "then"], ["proof (chain)\npicking this:\n  ?n2 < LENGTH('a) \\<Longrightarrow> strict_part_mono {..?n2} ((^) 2)", "show ?thesis"], ["proof (prove)\nusing this:\n  ?n2 < LENGTH('a) \\<Longrightarrow> strict_part_mono {..?n2} ((^) 2)\n\ngoal (1 subgoal):\n 1. strict_part_mono {..LENGTH('a) - 1} ((^) 2)", "by simp"], ["proof (state)\nthis:\n  strict_part_mono {..LENGTH('a) - 1} ((^) 2)\n\ngoal:\nNo subgoals!", "qed"], ["", "end"]]}