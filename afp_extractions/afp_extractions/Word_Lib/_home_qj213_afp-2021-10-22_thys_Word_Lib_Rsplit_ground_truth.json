{"file_name": "/home/qj213/afp-2021-10-22/thys/Word_Lib/Rsplit.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Word_Lib", "problem_names": ["lemma word_rsplit_no:\n  \"(word_rsplit (numeral bin :: 'b::len word) :: 'a word list) =\n    map word_of_int (bin_rsplit (LENGTH('a::len))\n      (LENGTH('b), take_bit (LENGTH('b)) (numeral bin)))\"", "lemmas word_rsplit_no_cl [simp] = word_rsplit_no\n  [unfolded bin_rsplitl_def bin_rsplit_l [symmetric]]", "lemma word_rsplit_same: \"word_rsplit w = [w]\"", "lemma word_rsplit_empty_iff_size: \"word_rsplit w = [] \\<longleftrightarrow> size w = 0\"", "lemma test_bit_rsplit:\n  \"sw = word_rsplit w \\<Longrightarrow> m < size (hd sw) \\<Longrightarrow>\n    k < length sw \\<Longrightarrow> (rev sw ! k) !! m = w !! (k * size (hd sw) + m)\"\n  for sw :: \"'a::len word list\"", "lemma test_bit_rsplit_alt:\n  \\<open>(word_rsplit w  :: 'b::len word list) ! i !! m \\<longleftrightarrow>\n    w !! ((length (word_rsplit w :: 'b::len word list) - Suc i) * size (hd (word_rsplit w :: 'b::len word list)) + m)\\<close>\n  if \\<open>i < length (word_rsplit w :: 'b::len word list)\\<close> \\<open>m < size (hd (word_rsplit w :: 'b::len word list))\\<close> \\<open>0 < length (word_rsplit w :: 'b::len word list)\\<close>\n  for w :: \\<open>'a::len word\\<close>", "lemma word_rsplit_len_indep [OF refl refl refl refl]:\n  \"[u,v] = p \\<Longrightarrow> [su,sv] = q \\<Longrightarrow> word_rsplit u = su \\<Longrightarrow>\n    word_rsplit v = sv \\<Longrightarrow> length su = length sv\"", "lemma length_word_rsplit_size:\n  \"n = LENGTH('a::len) \\<Longrightarrow>\n    length (word_rsplit w :: 'a word list) \\<le> m \\<longleftrightarrow> size w \\<le> m * n\"", "lemmas length_word_rsplit_lt_size =\n  length_word_rsplit_size [unfolded Not_eq_iff linorder_not_less [symmetric]]", "lemma length_word_rsplit_exp_size:\n  \"n = LENGTH('a::len) \\<Longrightarrow>\n    length (word_rsplit w :: 'a word list) = (size w + n - 1) div n\"", "lemma length_word_rsplit_even_size:\n  \"n = LENGTH('a::len) \\<Longrightarrow> size w = m * n \\<Longrightarrow>\n    length (word_rsplit w :: 'a word list) = m\"", "lemmas length_word_rsplit_exp_size' = refl [THEN length_word_rsplit_exp_size]\n\n\\<comment> \\<open>alternative proof of \\<open>word_rcat_rsplit\\<close>\\<close>", "lemmas tdle = times_div_less_eq_dividend", "lemmas dtle = xtrans(4) [OF tdle mult.commute]", "lemma word_rcat_rsplit: \"word_rcat (word_rsplit w) = w\"", "lemma size_word_rsplit_rcat_size:\n  \"word_rcat ws = frcw \\<Longrightarrow> size frcw = length ws * LENGTH('a)\n    \\<Longrightarrow> length (word_rsplit frcw::'a word list) = length ws\"\n  for ws :: \"'a::len word list\" and frcw :: \"'b::len word\"", "lemma msrevs:\n  \"0 < n \\<Longrightarrow> (k * n + m) div n = m div n + k\"\n  \"(k * n + m) mod n = m mod n\"\n  for n :: nat", "lemma word_rsplit_rcat_size [OF refl]:\n  \"word_rcat ws = frcw \\<Longrightarrow>\n    size frcw = length ws * LENGTH('a) \\<Longrightarrow> word_rsplit frcw = ws\"\n  for ws :: \"'a::len word list\"", "lemma word_rsplit_upt:\n  \"\\<lbrakk> size x = LENGTH('a :: len) * n; n \\<noteq> 0 \\<rbrakk>\n    \\<Longrightarrow> word_rsplit x = map (\\<lambda>i. ucast (x >> i * len_of TYPE ('a)) :: 'a word) (rev [0 ..< n])\""], "translations": [["", "lemma word_rsplit_no:\n  \"(word_rsplit (numeral bin :: 'b::len word) :: 'a word list) =\n    map word_of_int (bin_rsplit (LENGTH('a::len))\n      (LENGTH('b), take_bit (LENGTH('b)) (numeral bin)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. word_rsplit (numeral bin) =\n    map word_of_int\n     (bin_rsplit LENGTH('a) (LENGTH('b), take_bit LENGTH('b) (numeral bin)))", "by (simp add: word_rsplit_def of_nat_take_bit)"], ["", "lemmas word_rsplit_no_cl [simp] = word_rsplit_no\n  [unfolded bin_rsplitl_def bin_rsplit_l [symmetric]]"], ["", "text \\<open>\n  This odd result arises from the fact that the statement of the\n  result implies that the decoded words are of the same type,\n  and therefore of the same length, as the original word.\\<close>"], ["", "lemma word_rsplit_same: \"word_rsplit w = [w]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. word_rsplit w = [w]", "apply (simp add: word_rsplit_def bin_rsplit_all)"], ["proof (prove)\ngoal (1 subgoal):\n 1. word_of_int (take_bit LENGTH('a) (uint w)) = w", "apply transfer"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>w.\n       take_bit LENGTH('a) (take_bit LENGTH('a) (take_bit LENGTH('a) w)) =\n       take_bit LENGTH('a) w", "apply simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma word_rsplit_empty_iff_size: \"word_rsplit w = [] \\<longleftrightarrow> size w = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (word_rsplit w = []) = (size w = 0)", "by (simp add: word_rsplit_def bin_rsplit_def word_size bin_rsplit_aux_simp_alt Let_def\n      split: prod.split)"], ["", "lemma test_bit_rsplit:\n  \"sw = word_rsplit w \\<Longrightarrow> m < size (hd sw) \\<Longrightarrow>\n    k < length sw \\<Longrightarrow> (rev sw ! k) !! m = w !! (k * size (hd sw) + m)\"\n  for sw :: \"'a::len word list\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>sw = word_rsplit w; m < size (hd sw); k < length sw\\<rbrakk>\n    \\<Longrightarrow> rev sw ! k !! m = w !! (k * size (hd sw) + m)", "apply (unfold word_rsplit_def word_test_bit_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>sw =\n             map word_of_int (bin_rsplit LENGTH('a) (LENGTH('b), uint w));\n     m < size (hd sw); k < length sw\\<rbrakk>\n    \\<Longrightarrow> bit (uint (rev sw ! k)) m =\n                      bit (uint w) (k * size (hd sw) + m)", "apply (rule trans)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>sw =\n             map word_of_int (bin_rsplit LENGTH('a) (LENGTH('b), uint w));\n     m < size (hd sw); k < length sw\\<rbrakk>\n    \\<Longrightarrow> bit (uint (rev sw ! k)) m = ?s\n 2. \\<lbrakk>sw =\n             map word_of_int (bin_rsplit LENGTH('a) (LENGTH('b), uint w));\n     m < size (hd sw); k < length sw\\<rbrakk>\n    \\<Longrightarrow> ?s = bit (uint w) (k * size (hd sw) + m)", "apply (rule_tac f = \"\\<lambda>x. bin_nth x m\" in arg_cong)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>sw =\n             map word_of_int (bin_rsplit LENGTH('a) (LENGTH('b), uint w));\n     m < size (hd sw); k < length sw\\<rbrakk>\n    \\<Longrightarrow> uint (rev sw ! k) = ?y3\n 2. \\<lbrakk>sw =\n             map word_of_int (bin_rsplit LENGTH('a) (LENGTH('b), uint w));\n     m < size (hd sw); k < length sw\\<rbrakk>\n    \\<Longrightarrow> bit ?y3 m = bit (uint w) (k * size (hd sw) + m)", "apply (rule nth_map [symmetric])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>sw =\n             map word_of_int (bin_rsplit LENGTH('a) (LENGTH('b), uint w));\n     m < size (hd sw); k < length sw\\<rbrakk>\n    \\<Longrightarrow> k < length (rev sw)\n 2. \\<lbrakk>sw =\n             map word_of_int (bin_rsplit LENGTH('a) (LENGTH('b), uint w));\n     m < size (hd sw); k < length sw\\<rbrakk>\n    \\<Longrightarrow> bit (map uint (rev sw) ! k) m =\n                      bit (uint w) (k * size (hd sw) + m)", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>sw =\n             map word_of_int (bin_rsplit LENGTH('a) (LENGTH('b), uint w));\n     m < size (hd sw); k < length sw\\<rbrakk>\n    \\<Longrightarrow> bit (map uint (rev sw) ! k) m =\n                      bit (uint w) (k * size (hd sw) + m)", "apply (rule bin_nth_rsplit)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<lbrakk>sw =\n             map word_of_int (bin_rsplit LENGTH('a) (LENGTH('b), uint w));\n     m < size (hd sw); k < length sw\\<rbrakk>\n    \\<Longrightarrow> 0 < size (hd sw)\n 2. \\<lbrakk>sw =\n             map word_of_int (bin_rsplit LENGTH('a) (LENGTH('b), uint w));\n     m < size (hd sw); k < length sw\\<rbrakk>\n    \\<Longrightarrow> m < size (hd sw)\n 3. \\<lbrakk>sw =\n             map word_of_int (bin_rsplit LENGTH('a) (LENGTH('b), uint w));\n     m < size (hd sw); k < length sw\\<rbrakk>\n    \\<Longrightarrow> rev (map uint (rev sw)) =\n                      bin_rsplit (size (hd sw)) (?nw6, uint w)\n 4. \\<lbrakk>sw =\n             map word_of_int (bin_rsplit LENGTH('a) (LENGTH('b), uint w));\n     m < size (hd sw); k < length sw\\<rbrakk>\n    \\<Longrightarrow> k < length (map uint (rev sw))", "apply simp_all"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>sw =\n             map word_of_int (bin_rsplit LENGTH('a) (LENGTH('b), uint w));\n     m < size\n          (hd (map word_of_int\n                (bin_rsplit LENGTH('a) (LENGTH('b), uint w))));\n     k < length (bin_rsplit LENGTH('a) (LENGTH('b), uint w))\\<rbrakk>\n    \\<Longrightarrow> rev (map uint\n                            (rev (map word_of_int\n                                   (bin_rsplit LENGTH('a)\n                                     (LENGTH('b), uint w))))) =\n                      bin_rsplit\n                       (size\n                         (hd (map word_of_int\n                               (bin_rsplit LENGTH('a)\n                                 (LENGTH('b), uint w)))))\n                       (?nw6, uint w)", "apply (simp add : word_size rev_map)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>sw =\n             map word_of_int (bin_rsplit LENGTH('a) (LENGTH('b), uint w));\n     m < LENGTH('a);\n     k < length (bin_rsplit LENGTH('a) (LENGTH('b), uint w))\\<rbrakk>\n    \\<Longrightarrow> map (uint \\<circ> word_of_int)\n                       (bin_rsplit LENGTH('a) (LENGTH('b), uint w)) =\n                      bin_rsplit LENGTH('a) (?nw6, uint w)", "apply (rule trans)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>sw =\n             map word_of_int (bin_rsplit LENGTH('a) (LENGTH('b), uint w));\n     m < LENGTH('a);\n     k < length (bin_rsplit LENGTH('a) (LENGTH('b), uint w))\\<rbrakk>\n    \\<Longrightarrow> map (uint \\<circ> word_of_int)\n                       (bin_rsplit LENGTH('a) (LENGTH('b), uint w)) =\n                      ?s11\n 2. \\<lbrakk>sw =\n             map word_of_int (bin_rsplit LENGTH('a) (LENGTH('b), uint w));\n     m < LENGTH('a);\n     k < length (bin_rsplit LENGTH('a) (LENGTH('b), uint w))\\<rbrakk>\n    \\<Longrightarrow> ?s11 = bin_rsplit LENGTH('a) (?nw6, uint w)", "defer"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>sw =\n             map word_of_int (bin_rsplit LENGTH('a) (LENGTH('b), uint w));\n     m < LENGTH('a);\n     k < length (bin_rsplit LENGTH('a) (LENGTH('b), uint w))\\<rbrakk>\n    \\<Longrightarrow> ?s11 = bin_rsplit LENGTH('a) (?nw6, uint w)\n 2. \\<lbrakk>sw =\n             map word_of_int (bin_rsplit LENGTH('a) (LENGTH('b), uint w));\n     m < LENGTH('a);\n     k < length (bin_rsplit LENGTH('a) (LENGTH('b), uint w))\\<rbrakk>\n    \\<Longrightarrow> map (uint \\<circ> word_of_int)\n                       (bin_rsplit LENGTH('a) (LENGTH('b), uint w)) =\n                      ?s11", "apply (rule map_ident [THEN fun_cong])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>sw =\n             map word_of_int (bin_rsplit LENGTH('a) (LENGTH('b), uint w));\n     m < LENGTH('a);\n     k < length (bin_rsplit LENGTH('a) (LENGTH('b), uint w))\\<rbrakk>\n    \\<Longrightarrow> map (uint \\<circ> word_of_int)\n                       (bin_rsplit LENGTH('a) (LENGTH('b), uint w)) =\n                      map (\\<lambda>x. x)\n                       (bin_rsplit LENGTH('a) (?nw6, uint w))", "apply (rule refl [THEN map_cong])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>sw =\n                map word_of_int\n                 (bin_rsplit LENGTH('a) (LENGTH('b), uint w));\n        m < LENGTH('a);\n        k < length (bin_rsplit LENGTH('a) (LENGTH('b), uint w));\n        x \\<in> set (bin_rsplit LENGTH('a) (LENGTH('b), uint w))\\<rbrakk>\n       \\<Longrightarrow> (uint \\<circ> word_of_int) x = x", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>sw =\n                map word_of_int\n                 (bin_rsplit LENGTH('a) (LENGTH('b), uint w));\n        m < LENGTH('a);\n        k < length (bin_rsplit LENGTH('a) (LENGTH('b), uint w));\n        x \\<in> set (bin_rsplit LENGTH('a) (LENGTH('b), uint w))\\<rbrakk>\n       \\<Longrightarrow> take_bit LENGTH('a) x = x", "using bin_rsplit_size_sign take_bit_int_eq_self_iff"], ["proof (prove)\nusing this:\n  \\<lbrakk>0 < ?n; ?xs = bin_rsplit ?n (?nw, ?w); ?v \\<in> set ?xs\\<rbrakk>\n  \\<Longrightarrow> take_bit ?n ?v = ?v\n  (take_bit ?n ?k = ?k) = (0 \\<le> ?k \\<and> ?k < 2 ^ ?n)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>sw =\n                map word_of_int\n                 (bin_rsplit LENGTH('a) (LENGTH('b), uint w));\n        m < LENGTH('a);\n        k < length (bin_rsplit LENGTH('a) (LENGTH('b), uint w));\n        x \\<in> set (bin_rsplit LENGTH('a) (LENGTH('b), uint w))\\<rbrakk>\n       \\<Longrightarrow> take_bit LENGTH('a) x = x", "by blast"], ["", "lemma test_bit_rsplit_alt:\n  \\<open>(word_rsplit w  :: 'b::len word list) ! i !! m \\<longleftrightarrow>\n    w !! ((length (word_rsplit w :: 'b::len word list) - Suc i) * size (hd (word_rsplit w :: 'b::len word list)) + m)\\<close>\n  if \\<open>i < length (word_rsplit w :: 'b::len word list)\\<close> \\<open>m < size (hd (word_rsplit w :: 'b::len word list))\\<close> \\<open>0 < length (word_rsplit w :: 'b::len word list)\\<close>\n  for w :: \\<open>'a::len word\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. word_rsplit w ! i !! m =\n    w !! ((length (word_rsplit w) - Suc i) * size (hd (word_rsplit w)) + m)", "apply (rule trans)"], ["proof (prove)\ngoal (2 subgoals):\n 1. word_rsplit w ! i !! m = ?s\n 2. ?s =\n    w !! ((length (word_rsplit w) - Suc i) * size (hd (word_rsplit w)) + m)", "apply (rule test_bit_cong)"], ["proof (prove)\ngoal (2 subgoals):\n 1. word_rsplit w ! i = ?y3\n 2. ?y3 !! m =\n    w !! ((length (word_rsplit w) - Suc i) * size (hd (word_rsplit w)) + m)", "apply (rule rev_nth [of _ \\<open>rev (word_rsplit w)\\<close>, simplified rev_rev_ident])"], ["proof (prove)\ngoal (2 subgoals):\n 1. i < length (rev (word_rsplit w))\n 2. rev (word_rsplit w) ! (length (rev (word_rsplit w)) - Suc i) !! m =\n    w !! ((length (word_rsplit w) - Suc i) * size (hd (word_rsplit w)) + m)", "apply simp"], ["proof (prove)\ngoal (2 subgoals):\n 1. i < length (word_rsplit w)\n 2. rev (word_rsplit w) ! (length (rev (word_rsplit w)) - Suc i) !! m =\n    w !! ((length (word_rsplit w) - Suc i) * size (hd (word_rsplit w)) + m)", "apply (rule that(1))"], ["proof (prove)\ngoal (1 subgoal):\n 1. rev (word_rsplit w) ! (length (rev (word_rsplit w)) - Suc i) !! m =\n    w !! ((length (word_rsplit w) - Suc i) * size (hd (word_rsplit w)) + m)", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. rev (word_rsplit w) ! (length (word_rsplit w) - Suc i) !! m =\n    w !! ((length (word_rsplit w) - Suc i) * size (hd (word_rsplit w)) + m)", "apply (rule test_bit_rsplit)"], ["proof (prove)\ngoal (3 subgoals):\n 1. word_rsplit w = word_rsplit w\n 2. m < size (hd (word_rsplit w))\n 3. length (word_rsplit w) - Suc i < length (word_rsplit w)", "apply (rule refl)"], ["proof (prove)\ngoal (2 subgoals):\n 1. m < size (hd (word_rsplit w))\n 2. length (word_rsplit w) - Suc i < length (word_rsplit w)", "apply (rule asm_rl)"], ["proof (prove)\ngoal (2 subgoals):\n 1. m < size (hd (word_rsplit w))\n 2. length (word_rsplit w) - Suc i < length (word_rsplit w)", "apply (rule that(2))"], ["proof (prove)\ngoal (1 subgoal):\n 1. length (word_rsplit w) - Suc i < length (word_rsplit w)", "apply (rule diff_Suc_less)"], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < length (word_rsplit w)", "apply (rule that(3))"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma word_rsplit_len_indep [OF refl refl refl refl]:\n  \"[u,v] = p \\<Longrightarrow> [su,sv] = q \\<Longrightarrow> word_rsplit u = su \\<Longrightarrow>\n    word_rsplit v = sv \\<Longrightarrow> length su = length sv\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>[u, v] = p; [su, sv] = q; word_rsplit u = su;\n     word_rsplit v = sv\\<rbrakk>\n    \\<Longrightarrow> length su = length sv", "by (auto simp: word_rsplit_def bin_rsplit_len_indep)"], ["", "lemma length_word_rsplit_size:\n  \"n = LENGTH('a::len) \\<Longrightarrow>\n    length (word_rsplit w :: 'a word list) \\<le> m \\<longleftrightarrow> size w \\<le> m * n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. n = LENGTH('a) \\<Longrightarrow>\n    (length (word_rsplit w) \\<le> m) = (size w \\<le> m * n)", "by (auto simp: word_rsplit_def word_size bin_rsplit_len_le)"], ["", "lemmas length_word_rsplit_lt_size =\n  length_word_rsplit_size [unfolded Not_eq_iff linorder_not_less [symmetric]]"], ["", "lemma length_word_rsplit_exp_size:\n  \"n = LENGTH('a::len) \\<Longrightarrow>\n    length (word_rsplit w :: 'a word list) = (size w + n - 1) div n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. n = LENGTH('a) \\<Longrightarrow>\n    length (word_rsplit w) = (size w + n - 1) div n", "by (auto simp: word_rsplit_def word_size bin_rsplit_len)"], ["", "lemma length_word_rsplit_even_size:\n  \"n = LENGTH('a::len) \\<Longrightarrow> size w = m * n \\<Longrightarrow>\n    length (word_rsplit w :: 'a word list) = m\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>n = LENGTH('a); size w = m * n\\<rbrakk>\n    \\<Longrightarrow> length (word_rsplit w) = m", "by (cases \\<open>LENGTH('a)\\<close>) (simp_all add: length_word_rsplit_exp_size div_nat_eqI)"], ["", "lemmas length_word_rsplit_exp_size' = refl [THEN length_word_rsplit_exp_size]\n\n\\<comment> \\<open>alternative proof of \\<open>word_rcat_rsplit\\<close>\\<close>"], ["", "lemmas tdle = times_div_less_eq_dividend"], ["", "lemmas dtle = xtrans(4) [OF tdle mult.commute]"], ["", "lemma word_rcat_rsplit: \"word_rcat (word_rsplit w) = w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. word_rcat (word_rsplit w) = w", "apply (rule word_eqI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n.\n       n < size (word_rcat (word_rsplit w)) \\<longrightarrow>\n       word_rcat (word_rsplit w) !! n = w !! n", "apply (clarsimp simp: test_bit_rcat word_size)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n.\n       n < LENGTH('a) \\<Longrightarrow>\n       (n div LENGTH('b) < length (word_rsplit w) \\<and>\n        rev (word_rsplit w) ! (n div LENGTH('b)) !! (n mod LENGTH('b))) =\n       w !! n", "apply (subst refl [THEN test_bit_rsplit])"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>n.\n       n < LENGTH('a) \\<Longrightarrow>\n       n mod LENGTH('b) < size (hd (word_rsplit w))\n 2. \\<And>n.\n       n < LENGTH('a) \\<Longrightarrow>\n       n div LENGTH('b) < length (word_rsplit w)\n 3. \\<And>n.\n       n < LENGTH('a) \\<Longrightarrow>\n       (n div LENGTH('b) < length (word_rsplit w) \\<and>\n        w !!\n        (n div LENGTH('b) * size (hd (word_rsplit w)) + n mod LENGTH('b))) =\n       w !! n", "apply (simp_all add: word_size\n      refl [THEN length_word_rsplit_size [simplified not_less [symmetric], simplified]])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>n.\n       n < LENGTH('a) \\<Longrightarrow>\n       n div LENGTH('b) * LENGTH('b) < LENGTH('a)\n 2. \\<And>n.\n       n < LENGTH('a) \\<Longrightarrow>\n       (n div LENGTH('b) * LENGTH('b) < LENGTH('a) \\<and> w !! n) = w !! n", "apply safe"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>n.\n       n < LENGTH('a) \\<Longrightarrow>\n       n div LENGTH('b) * LENGTH('b) < LENGTH('a)\n 2. \\<And>n.\n       \\<lbrakk>n < LENGTH('a); w !! n\\<rbrakk>\n       \\<Longrightarrow> n div LENGTH('b) * LENGTH('b) < LENGTH('a)", "apply (erule xtrans(7), rule dtle)+"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma size_word_rsplit_rcat_size:\n  \"word_rcat ws = frcw \\<Longrightarrow> size frcw = length ws * LENGTH('a)\n    \\<Longrightarrow> length (word_rsplit frcw::'a word list) = length ws\"\n  for ws :: \"'a::len word list\" and frcw :: \"'b::len word\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>word_rcat ws = frcw;\n     size frcw = length ws * LENGTH('a)\\<rbrakk>\n    \\<Longrightarrow> length (word_rsplit frcw) = length ws", "by (cases \\<open>LENGTH('a)\\<close>) (simp_all add: word_size length_word_rsplit_exp_size' div_nat_eqI)"], ["", "lemma msrevs:\n  \"0 < n \\<Longrightarrow> (k * n + m) div n = m div n + k\"\n  \"(k * n + m) mod n = m mod n\"\n  for n :: nat"], ["proof (prove)\ngoal (1 subgoal):\n 1. (0 < n \\<Longrightarrow> (k * n + m) div n = m div n + k) &&&\n    (k * n + m) mod n = m mod n", "by (auto simp: add.commute)"], ["", "lemma word_rsplit_rcat_size [OF refl]:\n  \"word_rcat ws = frcw \\<Longrightarrow>\n    size frcw = length ws * LENGTH('a) \\<Longrightarrow> word_rsplit frcw = ws\"\n  for ws :: \"'a::len word list\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>word_rcat ws = frcw;\n     size frcw = length ws * LENGTH('a)\\<rbrakk>\n    \\<Longrightarrow> word_rsplit frcw = ws", "apply (frule size_word_rsplit_rcat_size, assumption)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>word_rcat ws = frcw; size frcw = length ws * LENGTH('a);\n     length (word_rsplit frcw) = length ws\\<rbrakk>\n    \\<Longrightarrow> word_rsplit frcw = ws", "apply (clarsimp simp add : word_size)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>LENGTH('b) = length ws * LENGTH('a);\n     length (word_rsplit (word_rcat ws)) = length ws;\n     frcw = word_rcat ws\\<rbrakk>\n    \\<Longrightarrow> word_rsplit (word_rcat ws) = ws", "apply (rule nth_equalityI, assumption)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i.\n       \\<lbrakk>LENGTH('b) = length ws * LENGTH('a);\n        length (word_rsplit (word_rcat ws)) = length ws;\n        frcw = word_rcat ws;\n        i < length (word_rsplit (word_rcat ws))\\<rbrakk>\n       \\<Longrightarrow> word_rsplit (word_rcat ws) ! i = ws ! i", "apply clarsimp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i.\n       \\<lbrakk>LENGTH('b) = length ws * LENGTH('a);\n        length (word_rsplit (word_rcat ws)) = length ws;\n        frcw = word_rcat ws; i < length ws\\<rbrakk>\n       \\<Longrightarrow> word_rsplit (word_rcat ws) ! i = ws ! i", "apply (rule word_eqI [rule_format])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i n.\n       \\<lbrakk>LENGTH('b) = length ws * LENGTH('a);\n        length (word_rsplit (word_rcat ws)) = length ws;\n        frcw = word_rcat ws; i < length ws;\n        n < size (word_rsplit (word_rcat ws) ! i)\\<rbrakk>\n       \\<Longrightarrow> word_rsplit (word_rcat ws) ! i !! n = ws ! i !! n", "apply (rule trans)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>i n.\n       \\<lbrakk>LENGTH('b) = length ws * LENGTH('a);\n        length (word_rsplit (word_rcat ws)) = length ws;\n        frcw = word_rcat ws; i < length ws;\n        n < size (word_rsplit (word_rcat ws) ! i)\\<rbrakk>\n       \\<Longrightarrow> word_rsplit (word_rcat ws) ! i !! n = ?s11 i n\n 2. \\<And>i n.\n       \\<lbrakk>LENGTH('b) = length ws * LENGTH('a);\n        length (word_rsplit (word_rcat ws)) = length ws;\n        frcw = word_rcat ws; i < length ws;\n        n < size (word_rsplit (word_rcat ws) ! i)\\<rbrakk>\n       \\<Longrightarrow> ?s11 i n = ws ! i !! n", "apply (rule test_bit_rsplit_alt)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>i n.\n       \\<lbrakk>LENGTH('b) = length ws * LENGTH('a);\n        length (word_rsplit (word_rcat ws)) = length ws;\n        frcw = word_rcat ws; i < length ws;\n        n < size (word_rsplit (word_rcat ws) ! i)\\<rbrakk>\n       \\<Longrightarrow> i < length (word_rsplit (word_rcat ws))\n 2. \\<And>i n.\n       \\<lbrakk>LENGTH('b) = length ws * LENGTH('a);\n        length (word_rsplit (word_rcat ws)) = length ws;\n        frcw = word_rcat ws; i < length ws;\n        n < size (word_rsplit (word_rcat ws) ! i)\\<rbrakk>\n       \\<Longrightarrow> n < size (hd (word_rsplit (word_rcat ws)))\n 3. \\<And>i n.\n       \\<lbrakk>LENGTH('b) = length ws * LENGTH('a);\n        length (word_rsplit (word_rcat ws)) = length ws;\n        frcw = word_rcat ws; i < length ws;\n        n < size (word_rsplit (word_rcat ws) ! i)\\<rbrakk>\n       \\<Longrightarrow> 0 < length (word_rsplit (word_rcat ws))\n 4. \\<And>i n.\n       \\<lbrakk>LENGTH('b) = length ws * LENGTH('a);\n        length (word_rsplit (word_rcat ws)) = length ws;\n        frcw = word_rcat ws; i < length ws;\n        n < size (word_rsplit (word_rcat ws) ! i)\\<rbrakk>\n       \\<Longrightarrow> word_rcat ws !!\n                         ((length (word_rsplit (word_rcat ws)) - Suc i) *\n                          size (hd (word_rsplit (word_rcat ws))) +\n                          n) =\n                         ws ! i !! n", "apply (clarsimp simp: word_size)+"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i n.\n       \\<lbrakk>LENGTH('b) = length ws * LENGTH('a);\n        length (word_rsplit (word_rcat ws)) = length ws;\n        frcw = word_rcat ws; i < length ws; n < LENGTH('a)\\<rbrakk>\n       \\<Longrightarrow> word_rcat ws !!\n                         ((length ws - Suc i) * LENGTH('a) + n) =\n                         ws ! i !! n", "apply (rule trans)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>i n.\n       \\<lbrakk>LENGTH('b) = length ws * LENGTH('a);\n        length (word_rsplit (word_rcat ws)) = length ws;\n        frcw = word_rcat ws; i < length ws; n < LENGTH('a)\\<rbrakk>\n       \\<Longrightarrow> word_rcat ws !!\n                         ((length ws - Suc i) * LENGTH('a) + n) =\n                         ?s23 i n\n 2. \\<And>i n.\n       \\<lbrakk>LENGTH('b) = length ws * LENGTH('a);\n        length (word_rsplit (word_rcat ws)) = length ws;\n        frcw = word_rcat ws; i < length ws; n < LENGTH('a)\\<rbrakk>\n       \\<Longrightarrow> ?s23 i n = ws ! i !! n", "apply (rule test_bit_rcat [OF refl refl])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i n.\n       \\<lbrakk>LENGTH('b) = length ws * LENGTH('a);\n        length (word_rsplit (word_rcat ws)) = length ws;\n        frcw = word_rcat ws; i < length ws; n < LENGTH('a)\\<rbrakk>\n       \\<Longrightarrow> ((length ws - Suc i) * LENGTH('a) + n\n                          < size (word_rcat ws) \\<and>\n                          ((length ws - Suc i) * LENGTH('a) + n) div\n                          size (hd ws)\n                          < length ws \\<and>\n                          rev ws !\n                          (((length ws - Suc i) * LENGTH('a) + n) div\n                           size (hd ws)) !!\n                          (((length ws - Suc i) * LENGTH('a) + n) mod\n                           size (hd ws))) =\n                         ws ! i !! n", "apply (simp add: word_size)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i n.\n       \\<lbrakk>LENGTH('b) = length ws * LENGTH('a);\n        length (word_rsplit (word_rcat ws)) = length ws;\n        frcw = word_rcat ws; i < length ws; n < LENGTH('a)\\<rbrakk>\n       \\<Longrightarrow> ((length ws - Suc i) * LENGTH('a) + n\n                          < length ws * LENGTH('a) \\<and>\n                          length ws - Suc i < length ws \\<and>\n                          rev ws ! (length ws - Suc i) !! n) =\n                         ws ! i !! n", "apply (subst rev_nth)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>i n.\n       \\<lbrakk>LENGTH('b) = length ws * LENGTH('a);\n        length (word_rsplit (word_rcat ws)) = length ws;\n        frcw = word_rcat ws; i < length ws; n < LENGTH('a)\\<rbrakk>\n       \\<Longrightarrow> length ws - Suc i < length ws\n 2. \\<And>i n.\n       \\<lbrakk>LENGTH('b) = length ws * LENGTH('a);\n        length (word_rsplit (word_rcat ws)) = length ws;\n        frcw = word_rcat ws; i < length ws; n < LENGTH('a)\\<rbrakk>\n       \\<Longrightarrow> ((length ws - Suc i) * LENGTH('a) + n\n                          < length ws * LENGTH('a) \\<and>\n                          length ws - Suc i < length ws \\<and>\n                          ws ! (length ws - Suc (length ws - Suc i)) !! n) =\n                         ws ! i !! n", "apply arith"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i n.\n       \\<lbrakk>LENGTH('b) = length ws * LENGTH('a);\n        length (word_rsplit (word_rcat ws)) = length ws;\n        frcw = word_rcat ws; i < length ws; n < LENGTH('a)\\<rbrakk>\n       \\<Longrightarrow> ((length ws - Suc i) * LENGTH('a) + n\n                          < length ws * LENGTH('a) \\<and>\n                          length ws - Suc i < length ws \\<and>\n                          ws ! (length ws - Suc (length ws - Suc i)) !! n) =\n                         ws ! i !! n", "apply (simp add: le0 [THEN [2] xtrans(7), THEN diff_Suc_less])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i n.\n       \\<lbrakk>LENGTH('b) = length ws * LENGTH('a);\n        length (word_rsplit (word_rcat ws)) = length ws;\n        frcw = word_rcat ws; i < length ws; n < LENGTH('a)\\<rbrakk>\n       \\<Longrightarrow> ((length ws - Suc i) * LENGTH('a) + n\n                          < length ws * LENGTH('a) \\<and>\n                          ws ! i !! n) =\n                         ws ! i !! n", "apply safe"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i n.\n       \\<lbrakk>LENGTH('b) = length ws * LENGTH('a);\n        length (word_rsplit (word_rcat ws)) = length ws;\n        frcw = word_rcat ws; i < length ws; n < LENGTH('a);\n        ws ! i !! n\\<rbrakk>\n       \\<Longrightarrow> (length ws - Suc i) * LENGTH('a) + n\n                         < length ws * LENGTH('a)", "apply (simp add: diff_mult_distrib)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i n.\n       \\<lbrakk>LENGTH('b) = length ws * LENGTH('a);\n        length (word_rsplit (word_rcat ws)) = length ws;\n        frcw = word_rcat ws; i < length ws; n < LENGTH('a);\n        ws ! i !! n\\<rbrakk>\n       \\<Longrightarrow> length ws * LENGTH('a) -\n                         (LENGTH('a) + i * LENGTH('a)) +\n                         n\n                         < length ws * LENGTH('a)", "apply (cases \"size ws\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>i n.\n       \\<lbrakk>LENGTH('b) = length ws * LENGTH('a);\n        length (word_rsplit (word_rcat ws)) = length ws;\n        frcw = word_rcat ws; i < length ws; n < LENGTH('a); ws ! i !! n;\n        length ws = 0\\<rbrakk>\n       \\<Longrightarrow> length ws * LENGTH('a) -\n                         (LENGTH('a) + i * LENGTH('a)) +\n                         n\n                         < length ws * LENGTH('a)\n 2. \\<And>i n nat.\n       \\<lbrakk>LENGTH('b) = length ws * LENGTH('a);\n        length (word_rsplit (word_rcat ws)) = length ws;\n        frcw = word_rcat ws; i < length ws; n < LENGTH('a); ws ! i !! n;\n        length ws = Suc nat\\<rbrakk>\n       \\<Longrightarrow> length ws * LENGTH('a) -\n                         (LENGTH('a) + i * LENGTH('a)) +\n                         n\n                         < length ws * LENGTH('a)", "apply simp_all"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma word_rsplit_upt:\n  \"\\<lbrakk> size x = LENGTH('a :: len) * n; n \\<noteq> 0 \\<rbrakk>\n    \\<Longrightarrow> word_rsplit x = map (\\<lambda>i. ucast (x >> i * len_of TYPE ('a)) :: 'a word) (rev [0 ..< n])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>size x = LENGTH('a) * n; n \\<noteq> 0\\<rbrakk>\n    \\<Longrightarrow> word_rsplit x =\n                      map (\\<lambda>i. ucast (x >> i * LENGTH('a)))\n                       (rev [0..<n])", "apply (subgoal_tac \"length (word_rsplit x :: 'a word list) = n\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>size x = LENGTH('a) * n; n \\<noteq> 0;\n     length (word_rsplit x) = n\\<rbrakk>\n    \\<Longrightarrow> word_rsplit x =\n                      map (\\<lambda>i. ucast (x >> i * LENGTH('a)))\n                       (rev [0..<n])\n 2. \\<lbrakk>size x = LENGTH('a) * n; n \\<noteq> 0\\<rbrakk>\n    \\<Longrightarrow> length (word_rsplit x) = n", "apply (rule nth_equalityI, simp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>i.\n       \\<lbrakk>size x = LENGTH('a) * n; n \\<noteq> 0;\n        length (word_rsplit x) = n; i < length (word_rsplit x)\\<rbrakk>\n       \\<Longrightarrow> word_rsplit x ! i =\n                         map (\\<lambda>i. ucast (x >> i * LENGTH('a)))\n                          (rev [0..<n]) !\n                         i\n 2. \\<lbrakk>size x = LENGTH('a) * n; n \\<noteq> 0\\<rbrakk>\n    \\<Longrightarrow> length (word_rsplit x) = n", "apply (intro allI word_eqI impI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>i na.\n       \\<lbrakk>size x = LENGTH('a) * n; n \\<noteq> 0;\n        length (word_rsplit x) = n; i < length (word_rsplit x);\n        na < size (word_rsplit x ! i)\\<rbrakk>\n       \\<Longrightarrow> word_rsplit x ! i !! na =\n                         map (\\<lambda>i. ucast (x >> i * LENGTH('a)))\n                          (rev [0..<n]) !\n                         i !!\n                         na\n 2. \\<lbrakk>size x = LENGTH('a) * n; n \\<noteq> 0\\<rbrakk>\n    \\<Longrightarrow> length (word_rsplit x) = n", "apply (simp add: test_bit_rsplit_alt word_size)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>i na.\n       \\<lbrakk>LENGTH('b) = LENGTH('a) * n; length (word_rsplit x) = n;\n        i < n; na < LENGTH('a)\\<rbrakk>\n       \\<Longrightarrow> x !! ((n - Suc i) * LENGTH('a) + na) =\n                         ucast (x >> rev [0..<n] ! i * LENGTH('a)) !! na\n 2. \\<lbrakk>size x = LENGTH('a) * n; n \\<noteq> 0\\<rbrakk>\n    \\<Longrightarrow> length (word_rsplit x) = n", "apply (simp add: nth_ucast nth_shiftr rev_nth field_simps)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>size x = LENGTH('a) * n; n \\<noteq> 0\\<rbrakk>\n    \\<Longrightarrow> length (word_rsplit x) = n", "apply (simp add: length_word_rsplit_exp_size)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>size x = LENGTH('a) * n; 0 < n\\<rbrakk>\n    \\<Longrightarrow> (LENGTH('a) * n + LENGTH('a) - Suc 0) div LENGTH('a) =\n                      n", "apply transfer"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x n.\n       \\<lbrakk>LENGTH('b) = LENGTH('a) * n; 0 < n\\<rbrakk>\n       \\<Longrightarrow> (LENGTH('a) * n + LENGTH('a) - Suc 0) div\n                         LENGTH('a) =\n                         n", "apply (metis (no_types, lifting) Nat.add_diff_assoc Suc_leI add_0_left diff_Suc_less div_less len_gt_0 msrevs(1) mult.commute)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "end"]]}