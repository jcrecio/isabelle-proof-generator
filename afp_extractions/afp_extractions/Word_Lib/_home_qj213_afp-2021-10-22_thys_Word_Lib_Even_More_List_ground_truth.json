{"file_name": "/home/qj213/afp-2021-10-22/thys/Word_Lib/Even_More_List.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Word_Lib", "problem_names": ["lemma upt_add_eq_append':\n  assumes \"i \\<le> j\" and \"j \\<le> k\"\n  shows \"[i..<k] = [i..<j] @ [j..<k]\"", "lemma map_idem_upt_eq:\n  \\<open>map f [m..<n] = [m..<n]\\<close> if \\<open>\\<And>q. m \\<le> q \\<Longrightarrow> q < n \\<Longrightarrow> f q = q\\<close>", "lemma upt_zero_numeral_unfold:\n  \\<open>[0..<numeral n] = [0..<pred_numeral n] @ [pred_numeral n]\\<close>", "lemma length_takeWhile_less:\n  \"\\<exists>x\\<in>set xs. \\<not> P x \\<Longrightarrow> length (takeWhile P xs) < length xs\"", "lemma Min_eq_length_takeWhile:\n  \\<open>Min {m. P m} = length (takeWhile (Not \\<circ> P) ([0..<n]))\\<close>\n  if *: \\<open>\\<And>m. P m \\<Longrightarrow> m < n\\<close> and \\<open>\\<exists>m. P m\\<close>", "lemma Max_eq_length_takeWhile:\n  \\<open>Max {m. P m} = n - Suc (length (takeWhile (Not \\<circ> P) (rev [0..<n])))\\<close>\n  if *: \\<open>\\<And>m. P m \\<Longrightarrow> m < n\\<close> and \\<open>\\<exists>m. P m\\<close>"], "translations": [["", "lemma upt_add_eq_append':\n  assumes \"i \\<le> j\" and \"j \\<le> k\"\n  shows \"[i..<k] = [i..<j] @ [j..<k]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. [i..<k] = [i..<j] @ [j..<k]", "using assms le_Suc_ex upt_add_eq_append"], ["proof (prove)\nusing this:\n  i \\<le> j\n  j \\<le> k\n  ?k \\<le> ?l \\<Longrightarrow> \\<exists>n. ?l = ?k + n\n  ?i \\<le> ?j \\<Longrightarrow> [?i..<?j + ?k] = [?i..<?j] @ [?j..<?j + ?k]\n\ngoal (1 subgoal):\n 1. [i..<k] = [i..<j] @ [j..<k]", "by blast"], ["", "lemma map_idem_upt_eq:\n  \\<open>map f [m..<n] = [m..<n]\\<close> if \\<open>\\<And>q. m \\<le> q \\<Longrightarrow> q < n \\<Longrightarrow> f q = q\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. map f [m..<n] = [m..<n]", "proof (cases \\<open>n \\<ge> m\\<close>)"], ["proof (state)\ngoal (2 subgoals):\n 1. m \\<le> n \\<Longrightarrow> map f [m..<n] = [m..<n]\n 2. \\<not> m \\<le> n \\<Longrightarrow> map f [m..<n] = [m..<n]", "case False"], ["proof (state)\nthis:\n  \\<not> m \\<le> n\n\ngoal (2 subgoals):\n 1. m \\<le> n \\<Longrightarrow> map f [m..<n] = [m..<n]\n 2. \\<not> m \\<le> n \\<Longrightarrow> map f [m..<n] = [m..<n]", "then"], ["proof (chain)\npicking this:\n  \\<not> m \\<le> n", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<not> m \\<le> n\n\ngoal (1 subgoal):\n 1. map f [m..<n] = [m..<n]", "by simp"], ["proof (state)\nthis:\n  map f [m..<n] = [m..<n]\n\ngoal (1 subgoal):\n 1. m \\<le> n \\<Longrightarrow> map f [m..<n] = [m..<n]", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. m \\<le> n \\<Longrightarrow> map f [m..<n] = [m..<n]", "case True"], ["proof (state)\nthis:\n  m \\<le> n\n\ngoal (1 subgoal):\n 1. m \\<le> n \\<Longrightarrow> map f [m..<n] = [m..<n]", "moreover"], ["proof (state)\nthis:\n  m \\<le> n\n\ngoal (1 subgoal):\n 1. m \\<le> n \\<Longrightarrow> map f [m..<n] = [m..<n]", "define r where \\<open>r = n - m\\<close>"], ["proof (state)\nthis:\n  r = n - m\n\ngoal (1 subgoal):\n 1. m \\<le> n \\<Longrightarrow> map f [m..<n] = [m..<n]", "ultimately"], ["proof (chain)\npicking this:\n  m \\<le> n\n  r = n - m", "have \\<open>n = m + r\\<close>"], ["proof (prove)\nusing this:\n  m \\<le> n\n  r = n - m\n\ngoal (1 subgoal):\n 1. n = m + r", "by simp"], ["proof (state)\nthis:\n  n = m + r\n\ngoal (1 subgoal):\n 1. m \\<le> n \\<Longrightarrow> map f [m..<n] = [m..<n]", "with that"], ["proof (chain)\npicking this:\n  \\<lbrakk>m \\<le> ?q; ?q < n\\<rbrakk> \\<Longrightarrow> f ?q = ?q\n  n = m + r", "have \\<open>\\<And>q. m \\<le> q \\<Longrightarrow> q < m + r \\<Longrightarrow> f q = q\\<close>"], ["proof (prove)\nusing this:\n  \\<lbrakk>m \\<le> ?q; ?q < n\\<rbrakk> \\<Longrightarrow> f ?q = ?q\n  n = m + r\n\ngoal (1 subgoal):\n 1. \\<And>q.\n       \\<lbrakk>m \\<le> q; q < m + r\\<rbrakk> \\<Longrightarrow> f q = q", "by simp"], ["proof (state)\nthis:\n  \\<lbrakk>m \\<le> ?q; ?q < m + r\\<rbrakk> \\<Longrightarrow> f ?q = ?q\n\ngoal (1 subgoal):\n 1. m \\<le> n \\<Longrightarrow> map f [m..<n] = [m..<n]", "then"], ["proof (chain)\npicking this:\n  \\<lbrakk>m \\<le> ?q; ?q < m + r\\<rbrakk> \\<Longrightarrow> f ?q = ?q", "have \\<open>map f [m..<m + r] = [m..<m + r]\\<close>"], ["proof (prove)\nusing this:\n  \\<lbrakk>m \\<le> ?q; ?q < m + r\\<rbrakk> \\<Longrightarrow> f ?q = ?q\n\ngoal (1 subgoal):\n 1. map f [m..<m + r] = [m..<m + r]", "by (induction r) simp_all"], ["proof (state)\nthis:\n  map f [m..<m + r] = [m..<m + r]\n\ngoal (1 subgoal):\n 1. m \\<le> n \\<Longrightarrow> map f [m..<n] = [m..<n]", "with \\<open>n = m + r\\<close>"], ["proof (chain)\npicking this:\n  n = m + r\n  map f [m..<m + r] = [m..<m + r]", "show ?thesis"], ["proof (prove)\nusing this:\n  n = m + r\n  map f [m..<m + r] = [m..<m + r]\n\ngoal (1 subgoal):\n 1. map f [m..<n] = [m..<n]", "by simp"], ["proof (state)\nthis:\n  map f [m..<n] = [m..<n]\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma upt_zero_numeral_unfold:\n  \\<open>[0..<numeral n] = [0..<pred_numeral n] @ [pred_numeral n]\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. [0..<numeral n] = [0..<pred_numeral n] @ [pred_numeral n]", "by (simp add: numeral_eq_Suc)"], ["", "lemma length_takeWhile_less:\n  \"\\<exists>x\\<in>set xs. \\<not> P x \\<Longrightarrow> length (takeWhile P xs) < length xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>x\\<in>set xs. \\<not> P x \\<Longrightarrow>\n    length (takeWhile P xs) < length xs", "by (induct xs) (auto split: if_splits)"], ["", "lemma Min_eq_length_takeWhile:\n  \\<open>Min {m. P m} = length (takeWhile (Not \\<circ> P) ([0..<n]))\\<close>\n  if *: \\<open>\\<And>m. P m \\<Longrightarrow> m < n\\<close> and \\<open>\\<exists>m. P m\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. Min {m. P m} = length (takeWhile (Not \\<circ> P) [0..<n])", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. Min {m. P m} = length (takeWhile (Not \\<circ> P) [0..<n])", "from \\<open>\\<exists>m. P m\\<close>"], ["proof (chain)\npicking this:\n  \\<exists>m. P m", "obtain r where \\<open>P r\\<close>"], ["proof (prove)\nusing this:\n  \\<exists>m. P m\n\ngoal (1 subgoal):\n 1. (\\<And>r. P r \\<Longrightarrow> thesis) \\<Longrightarrow> thesis", ".."], ["proof (state)\nthis:\n  P r\n\ngoal (1 subgoal):\n 1. Min {m. P m} = length (takeWhile (Not \\<circ> P) [0..<n])", "have \\<open>Min {m. P m} = q + length (takeWhile (Not \\<circ> P) ([q..<n]))\\<close>\n    if \\<open>q \\<le> n\\<close> \\<open>\\<And>m. P m \\<Longrightarrow> q \\<le> m \\<and> m < n\\<close> for q"], ["proof (prove)\ngoal (1 subgoal):\n 1. Min {m. P m} = q + length (takeWhile (Not \\<circ> P) [q..<n])", "using that"], ["proof (prove)\nusing this:\n  q \\<le> n\n  P ?m \\<Longrightarrow> q \\<le> ?m \\<and> ?m < n\n\ngoal (1 subgoal):\n 1. Min {m. P m} = q + length (takeWhile (Not \\<circ> P) [q..<n])", "proof (induction rule: inc_induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. (\\<And>m.\n        P m \\<Longrightarrow> n \\<le> m \\<and> m < n) \\<Longrightarrow>\n    Min (Collect P) = n + length (takeWhile (Not \\<circ> P) [n..<n])\n 2. \\<And>na.\n       \\<lbrakk>q \\<le> na; na < n;\n        (\\<And>m.\n            P m \\<Longrightarrow>\n            Suc na \\<le> m \\<and> m < n) \\<Longrightarrow>\n        Min (Collect P) =\n        Suc na + length (takeWhile (Not \\<circ> P) [Suc na..<n]);\n        \\<And>m. P m \\<Longrightarrow> na \\<le> m \\<and> m < n\\<rbrakk>\n       \\<Longrightarrow> Min (Collect P) =\n                         na + length (takeWhile (Not \\<circ> P) [na..<n])", "case base"], ["proof (state)\nthis:\n  P ?m \\<Longrightarrow> n \\<le> ?m \\<and> ?m < n\n\ngoal (2 subgoals):\n 1. (\\<And>m.\n        P m \\<Longrightarrow> n \\<le> m \\<and> m < n) \\<Longrightarrow>\n    Min (Collect P) = n + length (takeWhile (Not \\<circ> P) [n..<n])\n 2. \\<And>na.\n       \\<lbrakk>q \\<le> na; na < n;\n        (\\<And>m.\n            P m \\<Longrightarrow>\n            Suc na \\<le> m \\<and> m < n) \\<Longrightarrow>\n        Min (Collect P) =\n        Suc na + length (takeWhile (Not \\<circ> P) [Suc na..<n]);\n        \\<And>m. P m \\<Longrightarrow> na \\<le> m \\<and> m < n\\<rbrakk>\n       \\<Longrightarrow> Min (Collect P) =\n                         na + length (takeWhile (Not \\<circ> P) [na..<n])", "from base [of r] \\<open>P r\\<close>"], ["proof (chain)\npicking this:\n  P r \\<Longrightarrow> n \\<le> r \\<and> r < n\n  P r", "show ?case"], ["proof (prove)\nusing this:\n  P r \\<Longrightarrow> n \\<le> r \\<and> r < n\n  P r\n\ngoal (1 subgoal):\n 1. Min {a. P a} = n + length (takeWhile (Not \\<circ> P) [n..<n])", "by simp"], ["proof (state)\nthis:\n  Min {a. P a} = n + length (takeWhile (Not \\<circ> P) [n..<n])\n\ngoal (1 subgoal):\n 1. \\<And>na.\n       \\<lbrakk>q \\<le> na; na < n;\n        (\\<And>m.\n            P m \\<Longrightarrow>\n            Suc na \\<le> m \\<and> m < n) \\<Longrightarrow>\n        Min (Collect P) =\n        Suc na + length (takeWhile (Not \\<circ> P) [Suc na..<n]);\n        \\<And>m. P m \\<Longrightarrow> na \\<le> m \\<and> m < n\\<rbrakk>\n       \\<Longrightarrow> Min (Collect P) =\n                         na + length (takeWhile (Not \\<circ> P) [na..<n])", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>na.\n       \\<lbrakk>q \\<le> na; na < n;\n        (\\<And>m.\n            P m \\<Longrightarrow>\n            Suc na \\<le> m \\<and> m < n) \\<Longrightarrow>\n        Min (Collect P) =\n        Suc na + length (takeWhile (Not \\<circ> P) [Suc na..<n]);\n        \\<And>m. P m \\<Longrightarrow> na \\<le> m \\<and> m < n\\<rbrakk>\n       \\<Longrightarrow> Min (Collect P) =\n                         na + length (takeWhile (Not \\<circ> P) [na..<n])", "case (step q)"], ["proof (state)\nthis:\n  q__ \\<le> q\n  q < n\n  (\\<And>m.\n      P m \\<Longrightarrow> Suc q \\<le> m \\<and> m < n) \\<Longrightarrow>\n  Min {a. P a} = Suc q + length (takeWhile (Not \\<circ> P) [Suc q..<n])\n  P ?m \\<Longrightarrow> q \\<le> ?m \\<and> ?m < n\n\ngoal (1 subgoal):\n 1. \\<And>na.\n       \\<lbrakk>q__ \\<le> na; na < n;\n        (\\<And>m.\n            P m \\<Longrightarrow>\n            Suc na \\<le> m \\<and> m < n) \\<Longrightarrow>\n        Min (Collect P) =\n        Suc na + length (takeWhile (Not \\<circ> P) [Suc na..<n]);\n        \\<And>m. P m \\<Longrightarrow> na \\<le> m \\<and> m < n\\<rbrakk>\n       \\<Longrightarrow> Min (Collect P) =\n                         na + length (takeWhile (Not \\<circ> P) [na..<n])", "from \\<open>q < n\\<close>"], ["proof (chain)\npicking this:\n  q < n", "have *: \\<open>[q..<n] = q # [Suc q..<n]\\<close>"], ["proof (prove)\nusing this:\n  q < n\n\ngoal (1 subgoal):\n 1. [q..<n] = q # [Suc q..<n]", "by (simp add: upt_rec)"], ["proof (state)\nthis:\n  [q..<n] = q # [Suc q..<n]\n\ngoal (1 subgoal):\n 1. \\<And>na.\n       \\<lbrakk>q__ \\<le> na; na < n;\n        (\\<And>m.\n            P m \\<Longrightarrow>\n            Suc na \\<le> m \\<and> m < n) \\<Longrightarrow>\n        Min (Collect P) =\n        Suc na + length (takeWhile (Not \\<circ> P) [Suc na..<n]);\n        \\<And>m. P m \\<Longrightarrow> na \\<le> m \\<and> m < n\\<rbrakk>\n       \\<Longrightarrow> Min (Collect P) =\n                         na + length (takeWhile (Not \\<circ> P) [na..<n])", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. Min {a. P a} = q + length (takeWhile (Not \\<circ> P) [q..<n])", "proof (cases \\<open>P q\\<close>)"], ["proof (state)\ngoal (2 subgoals):\n 1. P q \\<Longrightarrow>\n    Min {a. P a} = q + length (takeWhile (Not \\<circ> P) [q..<n])\n 2. \\<not> P q \\<Longrightarrow>\n    Min {a. P a} = q + length (takeWhile (Not \\<circ> P) [q..<n])", "case False"], ["proof (state)\nthis:\n  \\<not> P q\n\ngoal (2 subgoals):\n 1. P q \\<Longrightarrow>\n    Min {a. P a} = q + length (takeWhile (Not \\<circ> P) [q..<n])\n 2. \\<not> P q \\<Longrightarrow>\n    Min {a. P a} = q + length (takeWhile (Not \\<circ> P) [q..<n])", "then"], ["proof (chain)\npicking this:\n  \\<not> P q", "have \\<open>Suc q \\<le> m \\<and> m < n\\<close> if \\<open>P m\\<close> for m"], ["proof (prove)\nusing this:\n  \\<not> P q\n\ngoal (1 subgoal):\n 1. Suc q \\<le> m \\<and> m < n", "using that step.prems [of m]"], ["proof (prove)\nusing this:\n  \\<not> P q\n  P m\n  P m \\<Longrightarrow> q \\<le> m \\<and> m < n\n\ngoal (1 subgoal):\n 1. Suc q \\<le> m \\<and> m < n", "by (auto simp add: Suc_le_eq less_le)"], ["proof (state)\nthis:\n  P ?m \\<Longrightarrow> Suc q \\<le> ?m \\<and> ?m < n\n\ngoal (2 subgoals):\n 1. P q \\<Longrightarrow>\n    Min {a. P a} = q + length (takeWhile (Not \\<circ> P) [q..<n])\n 2. \\<not> P q \\<Longrightarrow>\n    Min {a. P a} = q + length (takeWhile (Not \\<circ> P) [q..<n])", "with \\<open>\\<not> P q\\<close>"], ["proof (chain)\npicking this:\n  \\<not> P q\n  P ?m \\<Longrightarrow> Suc q \\<le> ?m \\<and> ?m < n", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<not> P q\n  P ?m \\<Longrightarrow> Suc q \\<le> ?m \\<and> ?m < n\n\ngoal (1 subgoal):\n 1. Min {a. P a} = q + length (takeWhile (Not \\<circ> P) [q..<n])", "by (simp add: * step.IH)"], ["proof (state)\nthis:\n  Min {a. P a} = q + length (takeWhile (Not \\<circ> P) [q..<n])\n\ngoal (1 subgoal):\n 1. P q \\<Longrightarrow>\n    Min {a. P a} = q + length (takeWhile (Not \\<circ> P) [q..<n])", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. P q \\<Longrightarrow>\n    Min {a. P a} = q + length (takeWhile (Not \\<circ> P) [q..<n])", "case True"], ["proof (state)\nthis:\n  P q\n\ngoal (1 subgoal):\n 1. P q \\<Longrightarrow>\n    Min {a. P a} = q + length (takeWhile (Not \\<circ> P) [q..<n])", "have \\<open>{a. P a} \\<subseteq> {0..n}\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. {a. P a} \\<subseteq> {0..n}", "using step.prems"], ["proof (prove)\nusing this:\n  P ?m \\<Longrightarrow> q \\<le> ?m \\<and> ?m < n\n\ngoal (1 subgoal):\n 1. {a. P a} \\<subseteq> {0..n}", "by (auto simp add: less_imp_le_nat)"], ["proof (state)\nthis:\n  {a. P a} \\<subseteq> {0..n}\n\ngoal (1 subgoal):\n 1. P q \\<Longrightarrow>\n    Min {a. P a} = q + length (takeWhile (Not \\<circ> P) [q..<n])", "moreover"], ["proof (state)\nthis:\n  {a. P a} \\<subseteq> {0..n}\n\ngoal (1 subgoal):\n 1. P q \\<Longrightarrow>\n    Min {a. P a} = q + length (takeWhile (Not \\<circ> P) [q..<n])", "have \\<open>finite {0..n}\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. finite {0..n}", "by simp"], ["proof (state)\nthis:\n  finite {0..n}\n\ngoal (1 subgoal):\n 1. P q \\<Longrightarrow>\n    Min {a. P a} = q + length (takeWhile (Not \\<circ> P) [q..<n])", "ultimately"], ["proof (chain)\npicking this:\n  {a. P a} \\<subseteq> {0..n}\n  finite {0..n}", "have \\<open>finite {a. P a}\\<close>"], ["proof (prove)\nusing this:\n  {a. P a} \\<subseteq> {0..n}\n  finite {0..n}\n\ngoal (1 subgoal):\n 1. finite {a. P a}", "by (rule finite_subset)"], ["proof (state)\nthis:\n  finite {a. P a}\n\ngoal (1 subgoal):\n 1. P q \\<Longrightarrow>\n    Min {a. P a} = q + length (takeWhile (Not \\<circ> P) [q..<n])", "with \\<open>P q\\<close> step.prems"], ["proof (chain)\npicking this:\n  P q\n  P ?m \\<Longrightarrow> q \\<le> ?m \\<and> ?m < n\n  finite {a. P a}", "show ?thesis"], ["proof (prove)\nusing this:\n  P q\n  P ?m \\<Longrightarrow> q \\<le> ?m \\<and> ?m < n\n  finite {a. P a}\n\ngoal (1 subgoal):\n 1. Min {a. P a} = q + length (takeWhile (Not \\<circ> P) [q..<n])", "by (auto intro: Min_eqI simp add: *)"], ["proof (state)\nthis:\n  Min {a. P a} = q + length (takeWhile (Not \\<circ> P) [q..<n])\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  Min {a. P a} = q + length (takeWhile (Not \\<circ> P) [q..<n])\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<lbrakk>?q \\<le> n;\n   \\<And>m. P m \\<Longrightarrow> ?q \\<le> m \\<and> m < n\\<rbrakk>\n  \\<Longrightarrow> Min {m. P m} =\n                    ?q + length (takeWhile (Not \\<circ> P) [?q..<n])\n\ngoal (1 subgoal):\n 1. Min {m. P m} = length (takeWhile (Not \\<circ> P) [0..<n])", "from this [of 0] and that"], ["proof (chain)\npicking this:\n  \\<lbrakk>0 \\<le> n;\n   \\<And>m. P m \\<Longrightarrow> 0 \\<le> m \\<and> m < n\\<rbrakk>\n  \\<Longrightarrow> Min {m. P m} =\n                    0 + length (takeWhile (Not \\<circ> P) [0..<n])\n  P ?m \\<Longrightarrow> ?m < n\n  \\<exists>m. P m", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<lbrakk>0 \\<le> n;\n   \\<And>m. P m \\<Longrightarrow> 0 \\<le> m \\<and> m < n\\<rbrakk>\n  \\<Longrightarrow> Min {m. P m} =\n                    0 + length (takeWhile (Not \\<circ> P) [0..<n])\n  P ?m \\<Longrightarrow> ?m < n\n  \\<exists>m. P m\n\ngoal (1 subgoal):\n 1. Min {m. P m} = length (takeWhile (Not \\<circ> P) [0..<n])", "by simp"], ["proof (state)\nthis:\n  Min {m. P m} = length (takeWhile (Not \\<circ> P) [0..<n])\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma Max_eq_length_takeWhile:\n  \\<open>Max {m. P m} = n - Suc (length (takeWhile (Not \\<circ> P) (rev [0..<n])))\\<close>\n  if *: \\<open>\\<And>m. P m \\<Longrightarrow> m < n\\<close> and \\<open>\\<exists>m. P m\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. Max {m. P m} =\n    n - Suc (length (takeWhile (Not \\<circ> P) (rev [0..<n])))", "using *"], ["proof (prove)\nusing this:\n  P ?m \\<Longrightarrow> ?m < n\n\ngoal (1 subgoal):\n 1. Max {m. P m} =\n    n - Suc (length (takeWhile (Not \\<circ> P) (rev [0..<n])))", "proof (induction n)"], ["proof (state)\ngoal (2 subgoals):\n 1. (\\<And>m. P m \\<Longrightarrow> m < 0) \\<Longrightarrow>\n    Max (Collect P) =\n    0 - Suc (length (takeWhile (Not \\<circ> P) (rev [0..<0])))\n 2. \\<And>n.\n       \\<lbrakk>(\\<And>m. P m \\<Longrightarrow> m < n) \\<Longrightarrow>\n                Max (Collect P) =\n                n - Suc (length (takeWhile (Not \\<circ> P) (rev [0..<n])));\n        \\<And>m. P m \\<Longrightarrow> m < Suc n\\<rbrakk>\n       \\<Longrightarrow> Max (Collect P) =\n                         Suc n -\n                         Suc (length\n                               (takeWhile (Not \\<circ> P)\n                                 (rev [0..<Suc n])))", "case 0"], ["proof (state)\nthis:\n  P ?m \\<Longrightarrow> ?m < 0\n\ngoal (2 subgoals):\n 1. (\\<And>m. P m \\<Longrightarrow> m < 0) \\<Longrightarrow>\n    Max (Collect P) =\n    0 - Suc (length (takeWhile (Not \\<circ> P) (rev [0..<0])))\n 2. \\<And>n.\n       \\<lbrakk>(\\<And>m. P m \\<Longrightarrow> m < n) \\<Longrightarrow>\n                Max (Collect P) =\n                n - Suc (length (takeWhile (Not \\<circ> P) (rev [0..<n])));\n        \\<And>m. P m \\<Longrightarrow> m < Suc n\\<rbrakk>\n       \\<Longrightarrow> Max (Collect P) =\n                         Suc n -\n                         Suc (length\n                               (takeWhile (Not \\<circ> P)\n                                 (rev [0..<Suc n])))", "with \\<open>\\<exists>m. P m\\<close>"], ["proof (chain)\npicking this:\n  \\<exists>m. P m\n  P ?m \\<Longrightarrow> ?m < 0", "show ?case"], ["proof (prove)\nusing this:\n  \\<exists>m. P m\n  P ?m \\<Longrightarrow> ?m < 0\n\ngoal (1 subgoal):\n 1. Max {a. P a} =\n    0 - Suc (length (takeWhile (Not \\<circ> P) (rev [0..<0])))", "by auto"], ["proof (state)\nthis:\n  Max {a. P a} = 0 - Suc (length (takeWhile (Not \\<circ> P) (rev [0..<0])))\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>(\\<And>m. P m \\<Longrightarrow> m < n) \\<Longrightarrow>\n                Max (Collect P) =\n                n - Suc (length (takeWhile (Not \\<circ> P) (rev [0..<n])));\n        \\<And>m. P m \\<Longrightarrow> m < Suc n\\<rbrakk>\n       \\<Longrightarrow> Max (Collect P) =\n                         Suc n -\n                         Suc (length\n                               (takeWhile (Not \\<circ> P)\n                                 (rev [0..<Suc n])))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>(\\<And>m. P m \\<Longrightarrow> m < n) \\<Longrightarrow>\n                Max (Collect P) =\n                n - Suc (length (takeWhile (Not \\<circ> P) (rev [0..<n])));\n        \\<And>m. P m \\<Longrightarrow> m < Suc n\\<rbrakk>\n       \\<Longrightarrow> Max (Collect P) =\n                         Suc n -\n                         Suc (length\n                               (takeWhile (Not \\<circ> P)\n                                 (rev [0..<Suc n])))", "case (Suc n)"], ["proof (state)\nthis:\n  (\\<And>m. P m \\<Longrightarrow> m < n) \\<Longrightarrow>\n  Max {a. P a} = n - Suc (length (takeWhile (Not \\<circ> P) (rev [0..<n])))\n  P ?m \\<Longrightarrow> ?m < Suc n\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>(\\<And>m. P m \\<Longrightarrow> m < n) \\<Longrightarrow>\n                Max (Collect P) =\n                n - Suc (length (takeWhile (Not \\<circ> P) (rev [0..<n])));\n        \\<And>m. P m \\<Longrightarrow> m < Suc n\\<rbrakk>\n       \\<Longrightarrow> Max (Collect P) =\n                         Suc n -\n                         Suc (length\n                               (takeWhile (Not \\<circ> P)\n                                 (rev [0..<Suc n])))", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. Max {a. P a} =\n    Suc n - Suc (length (takeWhile (Not \\<circ> P) (rev [0..<Suc n])))", "proof (cases \\<open>P n\\<close>)"], ["proof (state)\ngoal (2 subgoals):\n 1. P n \\<Longrightarrow>\n    Max {a. P a} =\n    Suc n - Suc (length (takeWhile (Not \\<circ> P) (rev [0..<Suc n])))\n 2. \\<not> P n \\<Longrightarrow>\n    Max {a. P a} =\n    Suc n - Suc (length (takeWhile (Not \\<circ> P) (rev [0..<Suc n])))", "case False"], ["proof (state)\nthis:\n  \\<not> P n\n\ngoal (2 subgoals):\n 1. P n \\<Longrightarrow>\n    Max {a. P a} =\n    Suc n - Suc (length (takeWhile (Not \\<circ> P) (rev [0..<Suc n])))\n 2. \\<not> P n \\<Longrightarrow>\n    Max {a. P a} =\n    Suc n - Suc (length (takeWhile (Not \\<circ> P) (rev [0..<Suc n])))", "then"], ["proof (chain)\npicking this:\n  \\<not> P n", "have \\<open>m < n\\<close> if \\<open>P m\\<close> for m"], ["proof (prove)\nusing this:\n  \\<not> P n\n\ngoal (1 subgoal):\n 1. m < n", "using that Suc.prems [of m]"], ["proof (prove)\nusing this:\n  \\<not> P n\n  P m\n  P m \\<Longrightarrow> m < Suc n\n\ngoal (1 subgoal):\n 1. m < n", "by (auto simp add: less_le)"], ["proof (state)\nthis:\n  P ?m \\<Longrightarrow> ?m < n\n\ngoal (2 subgoals):\n 1. P n \\<Longrightarrow>\n    Max {a. P a} =\n    Suc n - Suc (length (takeWhile (Not \\<circ> P) (rev [0..<Suc n])))\n 2. \\<not> P n \\<Longrightarrow>\n    Max {a. P a} =\n    Suc n - Suc (length (takeWhile (Not \\<circ> P) (rev [0..<Suc n])))", "with Suc.IH"], ["proof (chain)\npicking this:\n  (\\<And>m. P m \\<Longrightarrow> m < n) \\<Longrightarrow>\n  Max {a. P a} = n - Suc (length (takeWhile (Not \\<circ> P) (rev [0..<n])))\n  P ?m \\<Longrightarrow> ?m < n", "show ?thesis"], ["proof (prove)\nusing this:\n  (\\<And>m. P m \\<Longrightarrow> m < n) \\<Longrightarrow>\n  Max {a. P a} = n - Suc (length (takeWhile (Not \\<circ> P) (rev [0..<n])))\n  P ?m \\<Longrightarrow> ?m < n\n\ngoal (1 subgoal):\n 1. Max {a. P a} =\n    Suc n - Suc (length (takeWhile (Not \\<circ> P) (rev [0..<Suc n])))", "by auto"], ["proof (state)\nthis:\n  Max {a. P a} =\n  Suc n - Suc (length (takeWhile (Not \\<circ> P) (rev [0..<Suc n])))\n\ngoal (1 subgoal):\n 1. P n \\<Longrightarrow>\n    Max {a. P a} =\n    Suc n - Suc (length (takeWhile (Not \\<circ> P) (rev [0..<Suc n])))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. P n \\<Longrightarrow>\n    Max {a. P a} =\n    Suc n - Suc (length (takeWhile (Not \\<circ> P) (rev [0..<Suc n])))", "case True"], ["proof (state)\nthis:\n  P n\n\ngoal (1 subgoal):\n 1. P n \\<Longrightarrow>\n    Max {a. P a} =\n    Suc n - Suc (length (takeWhile (Not \\<circ> P) (rev [0..<Suc n])))", "have \\<open>{a. P a} \\<subseteq> {0..n}\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. {a. P a} \\<subseteq> {0..n}", "using Suc.prems"], ["proof (prove)\nusing this:\n  P ?m \\<Longrightarrow> ?m < Suc n\n\ngoal (1 subgoal):\n 1. {a. P a} \\<subseteq> {0..n}", "by (auto simp add: less_Suc_eq_le)"], ["proof (state)\nthis:\n  {a. P a} \\<subseteq> {0..n}\n\ngoal (1 subgoal):\n 1. P n \\<Longrightarrow>\n    Max {a. P a} =\n    Suc n - Suc (length (takeWhile (Not \\<circ> P) (rev [0..<Suc n])))", "moreover"], ["proof (state)\nthis:\n  {a. P a} \\<subseteq> {0..n}\n\ngoal (1 subgoal):\n 1. P n \\<Longrightarrow>\n    Max {a. P a} =\n    Suc n - Suc (length (takeWhile (Not \\<circ> P) (rev [0..<Suc n])))", "have \\<open>finite {0..n}\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. finite {0..n}", "by simp"], ["proof (state)\nthis:\n  finite {0..n}\n\ngoal (1 subgoal):\n 1. P n \\<Longrightarrow>\n    Max {a. P a} =\n    Suc n - Suc (length (takeWhile (Not \\<circ> P) (rev [0..<Suc n])))", "ultimately"], ["proof (chain)\npicking this:\n  {a. P a} \\<subseteq> {0..n}\n  finite {0..n}", "have \\<open>finite {a. P a}\\<close>"], ["proof (prove)\nusing this:\n  {a. P a} \\<subseteq> {0..n}\n  finite {0..n}\n\ngoal (1 subgoal):\n 1. finite {a. P a}", "by (rule finite_subset)"], ["proof (state)\nthis:\n  finite {a. P a}\n\ngoal (1 subgoal):\n 1. P n \\<Longrightarrow>\n    Max {a. P a} =\n    Suc n - Suc (length (takeWhile (Not \\<circ> P) (rev [0..<Suc n])))", "with \\<open>P n\\<close> Suc.prems"], ["proof (chain)\npicking this:\n  P n\n  P ?m \\<Longrightarrow> ?m < Suc n\n  finite {a. P a}", "show ?thesis"], ["proof (prove)\nusing this:\n  P n\n  P ?m \\<Longrightarrow> ?m < Suc n\n  finite {a. P a}\n\ngoal (1 subgoal):\n 1. Max {a. P a} =\n    Suc n - Suc (length (takeWhile (Not \\<circ> P) (rev [0..<Suc n])))", "by (auto intro: Max_eqI simp add: less_Suc_eq_le)"], ["proof (state)\nthis:\n  Max {a. P a} =\n  Suc n - Suc (length (takeWhile (Not \\<circ> P) (rev [0..<Suc n])))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  Max {a. P a} =\n  Suc n - Suc (length (takeWhile (Not \\<circ> P) (rev [0..<Suc n])))\n\ngoal:\nNo subgoals!", "qed"], ["", "end"]]}