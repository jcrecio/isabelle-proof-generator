{"file_name": "/home/qj213/afp-2021-10-22/thys/Word_Lib/Signed_Words.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Word_Lib", "problem_names": ["lemma card_signed [simp]: \"CARD (('a::len0) signed) = CARD('a)\"", "lemma scast_scast_id [simp]:\n  \"scast (scast x :: ('a::len) signed word) = (x :: 'a word)\"\n  \"scast (scast y :: ('a::len) word) = (y :: 'a signed word)\"", "lemma ucast_scast_id [simp]:\n  \"ucast (scast (x :: 'a::len signed word) :: 'a word) = x\"", "lemma scast_of_nat [simp]:\n  \"scast (of_nat x :: 'a::len signed word) = (of_nat x :: 'a word)\"", "lemma scast_ucast_id [simp]:\n  \"scast (ucast (x :: 'a::len word) :: 'a signed word) = x\"", "lemma scast_eq_scast_id [simp]:\n  \"((scast (a :: 'a::len signed word) :: 'a word) = scast b) = (a = b)\"", "lemma ucast_eq_ucast_id [simp]:\n  \"((ucast (a :: 'a::len word) :: 'a signed word) = ucast b) = (a = b)\"", "lemma scast_ucast_norm [simp]:\n  \"(ucast (a :: 'a::len word) = (b :: 'a signed word)) = (a = scast b)\"\n  \"((b :: 'a signed word) = ucast (a :: 'a::len word)) = (a = scast b)\"", "lemma scast_2_power [simp]: \"scast ((2 :: 'a::len signed word) ^ x) = ((2 :: 'a word) ^ x)\"", "lemma ucast_nat_def':\n  \"of_nat (unat x) = (ucast :: 'a :: len word \\<Rightarrow> ('b :: len) signed word) x\"", "lemma zero_sle_ucast_up:\n  \"\\<not> is_down (ucast :: 'a word \\<Rightarrow> 'b signed word) \\<Longrightarrow>\n          (0 <=s ((ucast (b::('a::len) word)) :: ('b::len) signed word))\"", "lemma word_le_ucast_sless:\n  \"\\<lbrakk> x \\<le> y; y \\<noteq> -1; LENGTH('a) < LENGTH('b) \\<rbrakk> \\<Longrightarrow>\n    (ucast x :: ('b :: len) signed word) <s ucast (y + 1)\"\n  for x y :: \\<open>'a::len word\\<close>", "lemma zero_sle_ucast:\n  \"(0 <=s ((ucast (b::('a::len) word)) :: ('a::len) signed word))\n                = (uint b < 2 ^ (LENGTH('a) - 1))\""], "translations": [["", "lemma card_signed [simp]: \"CARD (('a::len0) signed) = CARD('a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. CARD('a signed) = CARD('a)", "unfolding type_definition.card [OF type_definition_signed]"], ["proof (prove)\ngoal (1 subgoal):\n 1. CARD('a) = CARD('a)", "by simp"], ["", "instantiation signed :: (len0) len0\nbegin"], ["", "definition\n  len_signed [simp]: \"len_of (x::'a::len0 signed itself) = LENGTH('a)\""], ["", "instance"], ["proof (prove)\ngoal (1 subgoal):\n 1. OFCLASS('a signed, len0_class)", ".."], ["", "end"], ["", "instance signed :: (len) len"], ["proof (prove)\ngoal (1 subgoal):\n 1. OFCLASS('a signed, len_class)", "by (intro_classes, simp)"], ["", "lemma scast_scast_id [simp]:\n  \"scast (scast x :: ('a::len) signed word) = (x :: 'a word)\"\n  \"scast (scast y :: ('a::len) word) = (y :: 'a signed word)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. scast (scast x) = x &&& scast (scast y) = y", "by (auto simp: is_up scast_up_scast_id)"], ["", "lemma ucast_scast_id [simp]:\n  \"ucast (scast (x :: 'a::len signed word) :: 'a word) = x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ucast (scast x) = x", "by transfer (simp add: take_bit_signed_take_bit)"], ["", "lemma scast_of_nat [simp]:\n  \"scast (of_nat x :: 'a::len signed word) = (of_nat x :: 'a word)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. scast (word_of_nat x) = word_of_nat x", "by transfer (simp add: take_bit_signed_take_bit)"], ["", "lemma scast_ucast_id [simp]:\n  \"scast (ucast (x :: 'a::len word) :: 'a signed word) = x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. scast (ucast x) = x", "by transfer (simp add: take_bit_signed_take_bit)"], ["", "lemma scast_eq_scast_id [simp]:\n  \"((scast (a :: 'a::len signed word) :: 'a word) = scast b) = (a = b)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (scast a = scast b) = (a = b)", "by (metis ucast_scast_id)"], ["", "lemma ucast_eq_ucast_id [simp]:\n  \"((ucast (a :: 'a::len word) :: 'a signed word) = ucast b) = (a = b)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (ucast a = ucast b) = (a = b)", "by (metis scast_ucast_id)"], ["", "lemma scast_ucast_norm [simp]:\n  \"(ucast (a :: 'a::len word) = (b :: 'a signed word)) = (a = scast b)\"\n  \"((b :: 'a signed word) = ucast (a :: 'a::len word)) = (a = scast b)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (ucast a = b) = (a = scast b) &&& (b = ucast a) = (a = scast b)", "by (metis scast_ucast_id ucast_scast_id)+"], ["", "lemma scast_2_power [simp]: \"scast ((2 :: 'a::len signed word) ^ x) = ((2 :: 'a word) ^ x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. scast (2 ^ x) = 2 ^ x", "by (rule bit_word_eqI) (auto simp add: bit_simps)"], ["", "lemma ucast_nat_def':\n  \"of_nat (unat x) = (ucast :: 'a :: len word \\<Rightarrow> ('b :: len) signed word) x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. word_of_nat (unat x) = ucast x", "by (fact of_nat_unat)"], ["", "lemma zero_sle_ucast_up:\n  \"\\<not> is_down (ucast :: 'a word \\<Rightarrow> 'b signed word) \\<Longrightarrow>\n          (0 <=s ((ucast (b::('a::len) word)) :: ('b::len) signed word))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> is_down ucast \\<Longrightarrow> 0 \\<le>s ucast b", "by transfer (simp add: bit_simps)"], ["", "lemma word_le_ucast_sless:\n  \"\\<lbrakk> x \\<le> y; y \\<noteq> -1; LENGTH('a) < LENGTH('b) \\<rbrakk> \\<Longrightarrow>\n    (ucast x :: ('b :: len) signed word) <s ucast (y + 1)\"\n  for x y :: \\<open>'a::len word\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<le> y; y \\<noteq> - 1; LENGTH('a) < LENGTH('b)\\<rbrakk>\n    \\<Longrightarrow> ucast x <s ucast (y + 1)", "apply (cases \\<open>LENGTH('b)\\<close>)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>x \\<le> y; y \\<noteq> - 1; LENGTH('a) < LENGTH('b);\n     LENGTH('b) = 0\\<rbrakk>\n    \\<Longrightarrow> ucast x <s ucast (y + 1)\n 2. \\<And>nat.\n       \\<lbrakk>x \\<le> y; y \\<noteq> - 1; LENGTH('a) < LENGTH('b);\n        LENGTH('b) = Suc nat\\<rbrakk>\n       \\<Longrightarrow> ucast x <s ucast (y + 1)", "apply simp_all"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>nat.\n       \\<lbrakk>x \\<le> y; y \\<noteq> - 1; LENGTH('a) < Suc nat;\n        LENGTH('b) = Suc nat\\<rbrakk>\n       \\<Longrightarrow> ucast x <s ucast (y + 1)", "apply transfer"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>nat x y.\n       \\<lbrakk>take_bit LENGTH('a) x \\<le> take_bit LENGTH('a) y;\n        take_bit LENGTH('a) y \\<noteq> take_bit LENGTH('a) (- 1);\n        LENGTH('a) < Suc nat; LENGTH('b) = Suc nat\\<rbrakk>\n       \\<Longrightarrow> signed_take_bit (LENGTH('b signed) - Suc 0)\n                          (take_bit LENGTH('a) x)\n                         < signed_take_bit (LENGTH('b signed) - Suc 0)\n                            (take_bit LENGTH('a) (y + 1))", "apply (simp add: signed_take_bit_take_bit)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>nat x y.\n       \\<lbrakk>take_bit LENGTH('a) x \\<le> take_bit LENGTH('a) y;\n        take_bit LENGTH('a) y \\<noteq> take_bit LENGTH('a) (- 1);\n        LENGTH('a) < Suc nat; LENGTH('b) = Suc nat\\<rbrakk>\n       \\<Longrightarrow> take_bit LENGTH('a) x < take_bit LENGTH('a) (y + 1)", "apply (metis add.commute mask_eq_exp_minus_1 mask_eq_take_bit_minus_one take_bit_incr_eq zle_add1_eq_le)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma zero_sle_ucast:\n  \"(0 <=s ((ucast (b::('a::len) word)) :: ('a::len) signed word))\n                = (uint b < 2 ^ (LENGTH('a) - 1))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (0 \\<le>s ucast b) = (uint b < 2 ^ (LENGTH('a) - 1))", "apply transfer"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>b.\n       (signed_take_bit (LENGTH('a signed) - Suc 0) 0\n        \\<le> signed_take_bit (LENGTH('a signed) - Suc 0)\n               (take_bit LENGTH('a) b)) =\n       (take_bit LENGTH('a) b < 2 ^ (LENGTH('a) - 1))", "apply (cases \\<open>LENGTH('a)\\<close>)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>b.\n       LENGTH('a) = 0 \\<Longrightarrow>\n       (signed_take_bit (LENGTH('a signed) - Suc 0) 0\n        \\<le> signed_take_bit (LENGTH('a signed) - Suc 0)\n               (take_bit LENGTH('a) b)) =\n       (take_bit LENGTH('a) b < 2 ^ (LENGTH('a) - 1))\n 2. \\<And>b nat.\n       LENGTH('a) = Suc nat \\<Longrightarrow>\n       (signed_take_bit (LENGTH('a signed) - Suc 0) 0\n        \\<le> signed_take_bit (LENGTH('a signed) - Suc 0)\n               (take_bit LENGTH('a) b)) =\n       (take_bit LENGTH('a) b < 2 ^ (LENGTH('a) - 1))", "apply (simp_all add: take_bit_Suc_from_most bit_simps)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>b nat.\n       LENGTH('a) = Suc nat \\<Longrightarrow>\n       bit b nat \\<longrightarrow> bit (2 ^ nat + take_bit nat b) nat", "apply (simp_all add: bit_simps disjunctive_add)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "type_synonym 'a sword = \"'a signed word\""], ["", "end"]]}