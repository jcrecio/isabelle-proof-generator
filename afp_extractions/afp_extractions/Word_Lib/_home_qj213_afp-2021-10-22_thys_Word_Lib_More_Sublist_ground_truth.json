{"file_name": "/home/qj213/afp-2021-10-22/thys/Word_Lib/More_Sublist.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Word_Lib", "problem_names": ["lemma same_length_is_parallel:\n  assumes len: \"\\<forall>y \\<in> set as. length y = x\"\n  shows  \"\\<forall>x \\<in> set as. \\<forall>y \\<in> set as - {x}. x \\<parallel> y\"", "lemma sublist_equal_part:\n  \"prefix xs ys \\<Longrightarrow> take (length xs) ys = xs\"", "lemma prefix_length_less:\n  \"strict_prefix xs ys \\<Longrightarrow> length xs < length ys\"", "lemmas take_less = take_strict_prefix", "lemma not_prefix_longer:\n  \"\\<lbrakk> length xs > length ys \\<rbrakk> \\<Longrightarrow> \\<not> prefix xs ys\"", "lemma map_prefixI:\n  \"prefix xs ys \\<Longrightarrow> prefix (map f xs) (map f ys)\"", "lemma list_all2_induct_suffixeq [consumes 1, case_names Nil Cons]:\n  assumes lall: \"list_all2 Q as bs\"\n  and     nilr: \"P [] []\"\n  and    consr: \"\\<And>x xs y ys.\n  \\<lbrakk>list_all2 Q xs ys; Q x y; P xs ys; suffix (x # xs) as; suffix (y # ys) bs\\<rbrakk>\n  \\<Longrightarrow> P (x # xs) (y # ys)\"\n  shows  \"P as bs\"", "lemma take_prefix:\n  \"(take (length xs) ys = xs) = prefix xs ys\""], "translations": [["", "lemma same_length_is_parallel:\n  assumes len: \"\\<forall>y \\<in> set as. length y = x\"\n  shows  \"\\<forall>x \\<in> set as. \\<forall>y \\<in> set as - {x}. x \\<parallel> y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>set as. \\<forall>y\\<in>set as - {x}. x \\<parallel> y", "proof (rule, rule)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<in> set as; y \\<in> set as - {x}\\<rbrakk>\n       \\<Longrightarrow> x \\<parallel> y", "fix x y"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<in> set as; y \\<in> set as - {x}\\<rbrakk>\n       \\<Longrightarrow> x \\<parallel> y", "assume xi: \"x \\<in> set as\" and yi: \"y \\<in> set as - {x}\""], ["proof (state)\nthis:\n  x \\<in> set as\n  y \\<in> set as - {x}\n\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<in> set as; y \\<in> set as - {x}\\<rbrakk>\n       \\<Longrightarrow> x \\<parallel> y", "from len"], ["proof (chain)\npicking this:\n  \\<forall>y\\<in>set as. length y = x", "obtain q where len': \"\\<forall>y \\<in> set as. length y = q\""], ["proof (prove)\nusing this:\n  \\<forall>y\\<in>set as. length y = x\n\ngoal (1 subgoal):\n 1. (\\<And>q.\n        \\<forall>y\\<in>set as. length y = q \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", ".."], ["proof (state)\nthis:\n  \\<forall>y\\<in>set as. length y = q\n\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<in> set as; y \\<in> set as - {x}\\<rbrakk>\n       \\<Longrightarrow> x \\<parallel> y", "show \"x \\<parallel> y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<parallel> y", "proof (rule not_equal_is_parallel)"], ["proof (state)\ngoal (2 subgoals):\n 1. x \\<noteq> y\n 2. length x = length y", "from xi yi"], ["proof (chain)\npicking this:\n  x \\<in> set as\n  y \\<in> set as - {x}", "show \"x \\<noteq> y\""], ["proof (prove)\nusing this:\n  x \\<in> set as\n  y \\<in> set as - {x}\n\ngoal (1 subgoal):\n 1. x \\<noteq> y", "by auto"], ["proof (state)\nthis:\n  x \\<noteq> y\n\ngoal (1 subgoal):\n 1. length x = length y", "from xi yi len'"], ["proof (chain)\npicking this:\n  x \\<in> set as\n  y \\<in> set as - {x}\n  \\<forall>y\\<in>set as. length y = q", "show \"length x = length y\""], ["proof (prove)\nusing this:\n  x \\<in> set as\n  y \\<in> set as - {x}\n  \\<forall>y\\<in>set as. length y = q\n\ngoal (1 subgoal):\n 1. length x = length y", "by (auto dest: bspec)"], ["proof (state)\nthis:\n  length x = length y\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  x \\<parallel> y\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma sublist_equal_part:\n  \"prefix xs ys \\<Longrightarrow> take (length xs) ys = xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prefix xs ys \\<Longrightarrow> take (length xs) ys = xs", "by (clarsimp simp: prefix_def)"], ["", "lemma prefix_length_less:\n  \"strict_prefix xs ys \\<Longrightarrow> length xs < length ys\""], ["proof (prove)\ngoal (1 subgoal):\n 1. strict_prefix xs ys \\<Longrightarrow> length xs < length ys", "apply (clarsimp simp: strict_prefix_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>prefix xs ys; xs \\<noteq> ys\\<rbrakk>\n    \\<Longrightarrow> length xs < length ys", "apply (frule prefix_length_le)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>prefix xs ys; xs \\<noteq> ys;\n     length xs \\<le> length ys\\<rbrakk>\n    \\<Longrightarrow> length xs < length ys", "apply (rule ccontr, simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>prefix xs ys; xs \\<noteq> ys; length xs = length ys\\<rbrakk>\n    \\<Longrightarrow> False", "apply (clarsimp simp: prefix_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemmas take_less = take_strict_prefix"], ["", "lemma not_prefix_longer:\n  \"\\<lbrakk> length xs > length ys \\<rbrakk> \\<Longrightarrow> \\<not> prefix xs ys\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length ys < length xs \\<Longrightarrow> \\<not> prefix xs ys", "by (clarsimp dest!: prefix_length_le)"], ["", "lemma map_prefixI:\n  \"prefix xs ys \\<Longrightarrow> prefix (map f xs) (map f ys)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prefix xs ys \\<Longrightarrow> prefix (map f xs) (map f ys)", "by (clarsimp simp: prefix_def)"], ["", "lemma list_all2_induct_suffixeq [consumes 1, case_names Nil Cons]:\n  assumes lall: \"list_all2 Q as bs\"\n  and     nilr: \"P [] []\"\n  and    consr: \"\\<And>x xs y ys.\n  \\<lbrakk>list_all2 Q xs ys; Q x y; P xs ys; suffix (x # xs) as; suffix (y # ys) bs\\<rbrakk>\n  \\<Longrightarrow> P (x # xs) (y # ys)\"\n  shows  \"P as bs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P as bs", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. P as bs", "define as' where \"as' == as\""], ["proof (state)\nthis:\n  as' \\<equiv> as\n\ngoal (1 subgoal):\n 1. P as bs", "define bs' where \"bs' == bs\""], ["proof (state)\nthis:\n  bs' \\<equiv> bs\n\ngoal (1 subgoal):\n 1. P as bs", "have \"suffix as as' \\<and> suffix bs bs'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. suffix as as' \\<and> suffix bs bs'", "unfolding as'_def bs'_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. suffix as as \\<and> suffix bs bs", "by simp"], ["proof (state)\nthis:\n  suffix as as' \\<and> suffix bs bs'\n\ngoal (1 subgoal):\n 1. P as bs", "then"], ["proof (chain)\npicking this:\n  suffix as as' \\<and> suffix bs bs'", "show ?thesis"], ["proof (prove)\nusing this:\n  suffix as as' \\<and> suffix bs bs'\n\ngoal (1 subgoal):\n 1. P as bs", "using lall"], ["proof (prove)\nusing this:\n  suffix as as' \\<and> suffix bs bs'\n  list_all2 Q as bs\n\ngoal (1 subgoal):\n 1. P as bs", "proof (induct rule: list_induct2 [OF list_all2_lengthD [OF lall]])"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>suffix [] as' \\<and> suffix [] bs'; list_all2 Q [] []\\<rbrakk>\n    \\<Longrightarrow> P [] []\n 2. \\<And>x xs y ys.\n       \\<lbrakk>length xs = length ys;\n        \\<lbrakk>suffix xs as' \\<and> suffix ys bs';\n         list_all2 Q xs ys\\<rbrakk>\n        \\<Longrightarrow> P xs ys;\n        suffix (x # xs) as' \\<and> suffix (y # ys) bs';\n        list_all2 Q (x # xs) (y # ys)\\<rbrakk>\n       \\<Longrightarrow> P (x # xs) (y # ys)", "case 1"], ["proof (state)\nthis:\n  suffix [] as' \\<and> suffix [] bs'\n  list_all2 Q [] []\n\ngoal (2 subgoals):\n 1. \\<lbrakk>suffix [] as' \\<and> suffix [] bs'; list_all2 Q [] []\\<rbrakk>\n    \\<Longrightarrow> P [] []\n 2. \\<And>x xs y ys.\n       \\<lbrakk>length xs = length ys;\n        \\<lbrakk>suffix xs as' \\<and> suffix ys bs';\n         list_all2 Q xs ys\\<rbrakk>\n        \\<Longrightarrow> P xs ys;\n        suffix (x # xs) as' \\<and> suffix (y # ys) bs';\n        list_all2 Q (x # xs) (y # ys)\\<rbrakk>\n       \\<Longrightarrow> P (x # xs) (y # ys)", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. P [] []", "by fact"], ["proof (state)\nthis:\n  P [] []\n\ngoal (1 subgoal):\n 1. \\<And>x xs y ys.\n       \\<lbrakk>length xs = length ys;\n        \\<lbrakk>suffix xs as' \\<and> suffix ys bs';\n         list_all2 Q xs ys\\<rbrakk>\n        \\<Longrightarrow> P xs ys;\n        suffix (x # xs) as' \\<and> suffix (y # ys) bs';\n        list_all2 Q (x # xs) (y # ys)\\<rbrakk>\n       \\<Longrightarrow> P (x # xs) (y # ys)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x xs y ys.\n       \\<lbrakk>length xs = length ys;\n        \\<lbrakk>suffix xs as' \\<and> suffix ys bs';\n         list_all2 Q xs ys\\<rbrakk>\n        \\<Longrightarrow> P xs ys;\n        suffix (x # xs) as' \\<and> suffix (y # ys) bs';\n        list_all2 Q (x # xs) (y # ys)\\<rbrakk>\n       \\<Longrightarrow> P (x # xs) (y # ys)", "case (2 x xs y ys)"], ["proof (state)\nthis:\n  length xs = length ys\n  \\<lbrakk>suffix xs as' \\<and> suffix ys bs'; list_all2 Q xs ys\\<rbrakk>\n  \\<Longrightarrow> P xs ys\n  suffix (x # xs) as' \\<and> suffix (y # ys) bs'\n  list_all2 Q (x # xs) (y # ys)\n\ngoal (1 subgoal):\n 1. \\<And>x xs y ys.\n       \\<lbrakk>length xs = length ys;\n        \\<lbrakk>suffix xs as' \\<and> suffix ys bs';\n         list_all2 Q xs ys\\<rbrakk>\n        \\<Longrightarrow> P xs ys;\n        suffix (x # xs) as' \\<and> suffix (y # ys) bs';\n        list_all2 Q (x # xs) (y # ys)\\<rbrakk>\n       \\<Longrightarrow> P (x # xs) (y # ys)", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. P (x # xs) (y # ys)", "proof (rule consr)"], ["proof (state)\ngoal (5 subgoals):\n 1. list_all2 Q xs ys\n 2. Q x y\n 3. P xs ys\n 4. suffix (x # xs) as\n 5. suffix (y # ys) bs", "from \"2.prems\""], ["proof (chain)\npicking this:\n  suffix (x # xs) as' \\<and> suffix (y # ys) bs'\n  list_all2 Q (x # xs) (y # ys)", "show \"list_all2 Q xs ys\" and \"Q x y\""], ["proof (prove)\nusing this:\n  suffix (x # xs) as' \\<and> suffix (y # ys) bs'\n  list_all2 Q (x # xs) (y # ys)\n\ngoal (1 subgoal):\n 1. list_all2 Q xs ys &&& Q x y", "by simp_all"], ["proof (state)\nthis:\n  list_all2 Q xs ys\n  Q x y\n\ngoal (3 subgoals):\n 1. P xs ys\n 2. suffix (x # xs) as\n 3. suffix (y # ys) bs", "then"], ["proof (chain)\npicking this:\n  list_all2 Q xs ys\n  Q x y", "show \"P xs ys\""], ["proof (prove)\nusing this:\n  list_all2 Q xs ys\n  Q x y\n\ngoal (1 subgoal):\n 1. P xs ys", "using \"2.hyps\" \"2.prems\""], ["proof (prove)\nusing this:\n  list_all2 Q xs ys\n  Q x y\n  length xs = length ys\n  \\<lbrakk>suffix xs as' \\<and> suffix ys bs'; list_all2 Q xs ys\\<rbrakk>\n  \\<Longrightarrow> P xs ys\n  suffix (x # xs) as' \\<and> suffix (y # ys) bs'\n  list_all2 Q (x # xs) (y # ys)\n\ngoal (1 subgoal):\n 1. P xs ys", "by (auto dest: suffix_ConsD)"], ["proof (state)\nthis:\n  P xs ys\n\ngoal (2 subgoals):\n 1. suffix (x # xs) as\n 2. suffix (y # ys) bs", "from \"2.prems\""], ["proof (chain)\npicking this:\n  suffix (x # xs) as' \\<and> suffix (y # ys) bs'\n  list_all2 Q (x # xs) (y # ys)", "show \"suffix (x # xs) as\" and \"suffix (y # ys) bs\""], ["proof (prove)\nusing this:\n  suffix (x # xs) as' \\<and> suffix (y # ys) bs'\n  list_all2 Q (x # xs) (y # ys)\n\ngoal (1 subgoal):\n 1. suffix (x # xs) as &&& suffix (y # ys) bs", "by (auto simp: as'_def bs'_def)"], ["proof (state)\nthis:\n  suffix (x # xs) as\n  suffix (y # ys) bs\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  P (x # xs) (y # ys)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  P as bs\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma take_prefix:\n  \"(take (length xs) ys = xs) = prefix xs ys\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (take (length xs) ys = xs) = prefix xs ys", "proof (induct xs arbitrary: ys)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>ys. (take (length []) ys = []) = prefix [] ys\n 2. \\<And>a xs ys.\n       (\\<And>ys.\n           (take (length xs) ys = xs) = prefix xs ys) \\<Longrightarrow>\n       (take (length (a # xs)) ys = a # xs) = prefix (a # xs) ys", "case Nil"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. \\<And>ys. (take (length []) ys = []) = prefix [] ys\n 2. \\<And>a xs ys.\n       (\\<And>ys.\n           (take (length xs) ys = xs) = prefix xs ys) \\<Longrightarrow>\n       (take (length (a # xs)) ys = a # xs) = prefix (a # xs) ys", "then"], ["proof (chain)\npicking this:", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. (take (length []) ys = []) = prefix [] ys", "by simp"], ["proof (state)\nthis:\n  (take (length []) ys = []) = prefix [] ys\n\ngoal (1 subgoal):\n 1. \\<And>a xs ys.\n       (\\<And>ys.\n           (take (length xs) ys = xs) = prefix xs ys) \\<Longrightarrow>\n       (take (length (a # xs)) ys = a # xs) = prefix (a # xs) ys", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a xs ys.\n       (\\<And>ys.\n           (take (length xs) ys = xs) = prefix xs ys) \\<Longrightarrow>\n       (take (length (a # xs)) ys = a # xs) = prefix (a # xs) ys", "case Cons"], ["proof (state)\nthis:\n  (take (length xs_) ?ys = xs_) = prefix xs_ ?ys\n\ngoal (1 subgoal):\n 1. \\<And>a xs ys.\n       (\\<And>ys.\n           (take (length xs) ys = xs) = prefix xs ys) \\<Longrightarrow>\n       (take (length (a # xs)) ys = a # xs) = prefix (a # xs) ys", "then"], ["proof (chain)\npicking this:\n  (take (length xs_) ?ys = xs_) = prefix xs_ ?ys", "show ?case"], ["proof (prove)\nusing this:\n  (take (length xs_) ?ys = xs_) = prefix xs_ ?ys\n\ngoal (1 subgoal):\n 1. (take (length (a_ # xs_)) ys = a_ # xs_) = prefix (a_ # xs_) ys", "by (cases ys) auto"], ["proof (state)\nthis:\n  (take (length (a_ # xs_)) ys = a_ # xs_) = prefix (a_ # xs_) ys\n\ngoal:\nNo subgoals!", "qed"], ["", "end"]]}