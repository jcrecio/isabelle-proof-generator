{"file_name": "/home/qj213/afp-2021-10-22/thys/Word_Lib/Word_EqI.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Word_Lib", "problem_names": ["lemmas [word_eqI_simps] =\n  word_ops_nth_size\n  word_size\n  word_or_zero\n  neg_mask_test_bit\n  nth_ucast\n  nth_w2p nth_shiftl\n  nth_shiftr\n  less_2p_is_upper_bits_unset\n  le_mask_high_bits\n  bang_eq\n  neg_test_bit\n  is_up\n  is_down", "lemmas word_eqI_rule = word_eqI [rule_format]", "lemma test_bit_lenD:\n  \"x !! n \\<Longrightarrow> n < LENGTH('a) \\<and> x !! n\" for x :: \"'a :: len word\""], "translations": [["", "lemmas [word_eqI_simps] =\n  word_ops_nth_size\n  word_size\n  word_or_zero\n  neg_mask_test_bit\n  nth_ucast\n  nth_w2p nth_shiftl\n  nth_shiftr\n  less_2p_is_upper_bits_unset\n  le_mask_high_bits\n  bang_eq\n  neg_test_bit\n  is_up\n  is_down"], ["", "lemmas word_eqI_rule = word_eqI [rule_format]"], ["", "lemma test_bit_lenD:\n  \"x !! n \\<Longrightarrow> n < LENGTH('a) \\<and> x !! n\" for x :: \"'a :: len word\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x !! n \\<Longrightarrow> n < LENGTH('a) \\<and> x !! n", "by (fastforce dest: test_bit_size simp: word_size)"], ["", "method word_eqI uses simp simp_del split split_del cong flip =\n  ((* reduce conclusion to test_bit: *)\n   rule word_eqI_rule,\n   (* make sure we're in clarsimp normal form: *)\n   (clarsimp simp: simp simp del: simp_del simp flip: flip split: split split del: split_del cong: cong)?,\n   (* turn x < 2^n assumptions into mask equations: *)\n   ((drule less_mask_eq)+)?,\n   (* expand and distribute test_bit everywhere: *)\n   (clarsimp simp: word_eqI_simps simp simp del: simp_del simp flip: flip\n             split: split split del: split_del cong: cong)?,\n   (* add any additional word size constraints to new indices: *)\n   ((drule test_bit_lenD)+)?,\n   (* try to make progress (can't use +, would loop): *)\n   (clarsimp simp: word_eqI_simps simp simp del: simp_del simp flip: flip\n             split: split split del: split_del cong: cong)?,\n   (* helps sometimes, rarely: *)\n   (simp add: simp test_bit_conj_lt del: simp_del flip: flip split: split split del: split_del cong: cong)?)"], ["", "method word_eqI_solve uses simp simp_del split split_del cong flip =\n  solves \\<open>word_eqI simp: simp simp_del: simp_del split: split split_del: split_del\n                   cong: cong simp flip: flip;\n          (fastforce dest: test_bit_size simp: word_eqI_simps simp flip: flip\n                     simp: simp simp del: simp_del split: split split del: split_del cong: cong)?\\<close>"], ["", "end"]]}