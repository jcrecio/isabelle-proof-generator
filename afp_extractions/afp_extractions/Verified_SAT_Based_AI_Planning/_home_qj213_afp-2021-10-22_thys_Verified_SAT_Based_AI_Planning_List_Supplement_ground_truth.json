{"file_name": "/home/qj213/afp-2021-10-22/thys/Verified_SAT_Based_AI_Planning/List_Supplement.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Verified_SAT_Based_AI_Planning", "problem_names": ["lemma list_foot: \n  assumes \"l \\<noteq> []\" \n  obtains y ys where \"l = ys @ [y]\"", "lemma list_ex_intersection: \"list_ex (\\<lambda>v. list_ex ((=) v) ys) xs \\<longleftrightarrow> set xs \\<inter> set ys \\<noteq> {}\"", "lemma length_map_upt: \"length (map f [a..<b]) = b - a\"", "lemma not_list_ex_equals_list_all_not: \"(\\<not>list_ex P xs) = list_all (\\<lambda>x. \\<not>P x) xs\"", "lemma element_of_subseqs_then_subset:\n  assumes \"l \\<in> set (subseqs l')\" \n  shows\"set l \\<subseteq> set l'\"", "lemma set_of_embed_is: \"set (embed xs) = { [x] | x. x \\<in> set xs }\"", "lemma concat_is_inverse_of_embed:\n  \"concat (embed xs) = xs\"", "lemma embed_append[simp]: \"embed (xs @ ys) = embed xs @ embed ys\""], "translations": [["", "lemma list_foot: \n  assumes \"l \\<noteq> []\" \n  obtains y ys where \"l = ys @ [y]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>ys y. l = ys @ [y] \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<And>ys y. l = ys @ [y] \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<And>ys y. l = ys @ [y] \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "assume a: \"l \\<noteq> []\""], ["proof (state)\nthis:\n  l \\<noteq> []\n\ngoal (1 subgoal):\n 1. (\\<And>ys y. l = ys @ [y] \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "have \"\\<exists>y ys. l = ys @ [y]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>y ys. l = ys @ [y]", "using a"], ["proof (prove)\nusing this:\n  l \\<noteq> []\n\ngoal (1 subgoal):\n 1. \\<exists>y ys. l = ys @ [y]", "proof (induction l)"], ["proof (state)\ngoal (2 subgoals):\n 1. [] \\<noteq> [] \\<Longrightarrow> \\<exists>y ys. [] = ys @ [y]\n 2. \\<And>a l.\n       \\<lbrakk>l \\<noteq> [] \\<Longrightarrow> \\<exists>y ys. l = ys @ [y];\n        a # l \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> \\<exists>y ys. a # l = ys @ [y]", "case (Cons a l)"], ["proof (state)\nthis:\n  l \\<noteq> [] \\<Longrightarrow> \\<exists>y ys. l = ys @ [y]\n  a # l \\<noteq> []\n\ngoal (2 subgoals):\n 1. [] \\<noteq> [] \\<Longrightarrow> \\<exists>y ys. [] = ys @ [y]\n 2. \\<And>a l.\n       \\<lbrakk>l \\<noteq> [] \\<Longrightarrow> \\<exists>y ys. l = ys @ [y];\n        a # l \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> \\<exists>y ys. a # l = ys @ [y]", "then"], ["proof (chain)\npicking this:\n  l \\<noteq> [] \\<Longrightarrow> \\<exists>y ys. l = ys @ [y]\n  a # l \\<noteq> []", "show ?case"], ["proof (prove)\nusing this:\n  l \\<noteq> [] \\<Longrightarrow> \\<exists>y ys. l = ys @ [y]\n  a # l \\<noteq> []\n\ngoal (1 subgoal):\n 1. \\<exists>y ys. a # l = ys @ [y]", "proof (cases \"l = []\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>l \\<noteq> [] \\<Longrightarrow> \\<exists>y ys. l = ys @ [y];\n     a # l \\<noteq> []; l = []\\<rbrakk>\n    \\<Longrightarrow> \\<exists>y ys. a # l = ys @ [y]\n 2. \\<lbrakk>l \\<noteq> [] \\<Longrightarrow> \\<exists>y ys. l = ys @ [y];\n     a # l \\<noteq> []; l \\<noteq> []\\<rbrakk>\n    \\<Longrightarrow> \\<exists>y ys. a # l = ys @ [y]", "case True"], ["proof (state)\nthis:\n  l = []\n\ngoal (2 subgoals):\n 1. \\<lbrakk>l \\<noteq> [] \\<Longrightarrow> \\<exists>y ys. l = ys @ [y];\n     a # l \\<noteq> []; l = []\\<rbrakk>\n    \\<Longrightarrow> \\<exists>y ys. a # l = ys @ [y]\n 2. \\<lbrakk>l \\<noteq> [] \\<Longrightarrow> \\<exists>y ys. l = ys @ [y];\n     a # l \\<noteq> []; l \\<noteq> []\\<rbrakk>\n    \\<Longrightarrow> \\<exists>y ys. a # l = ys @ [y]", "have \"[] @ [a] = a # l\""], ["proof (prove)\ngoal (1 subgoal):\n 1. [] @ [a] = a # l", "using True"], ["proof (prove)\nusing this:\n  l = []\n\ngoal (1 subgoal):\n 1. [] @ [a] = a # l", "by simp"], ["proof (state)\nthis:\n  [] @ [a] = a # l\n\ngoal (2 subgoals):\n 1. \\<lbrakk>l \\<noteq> [] \\<Longrightarrow> \\<exists>y ys. l = ys @ [y];\n     a # l \\<noteq> []; l = []\\<rbrakk>\n    \\<Longrightarrow> \\<exists>y ys. a # l = ys @ [y]\n 2. \\<lbrakk>l \\<noteq> [] \\<Longrightarrow> \\<exists>y ys. l = ys @ [y];\n     a # l \\<noteq> []; l \\<noteq> []\\<rbrakk>\n    \\<Longrightarrow> \\<exists>y ys. a # l = ys @ [y]", "thus ?thesis"], ["proof (prove)\nusing this:\n  [] @ [a] = a # l\n\ngoal (1 subgoal):\n 1. \\<exists>y ys. a # l = ys @ [y]", "using Cons.prems(1)"], ["proof (prove)\nusing this:\n  [] @ [a] = a # l\n  a # l \\<noteq> []\n\ngoal (1 subgoal):\n 1. \\<exists>y ys. a # l = ys @ [y]", "by simp"], ["proof (state)\nthis:\n  \\<exists>y ys. a # l = ys @ [y]\n\ngoal (1 subgoal):\n 1. \\<lbrakk>l \\<noteq> [] \\<Longrightarrow> \\<exists>y ys. l = ys @ [y];\n     a # l \\<noteq> []; l \\<noteq> []\\<rbrakk>\n    \\<Longrightarrow> \\<exists>y ys. a # l = ys @ [y]", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>l \\<noteq> [] \\<Longrightarrow> \\<exists>y ys. l = ys @ [y];\n     a # l \\<noteq> []; l \\<noteq> []\\<rbrakk>\n    \\<Longrightarrow> \\<exists>y ys. a # l = ys @ [y]", "case False"], ["proof (state)\nthis:\n  l \\<noteq> []\n\ngoal (1 subgoal):\n 1. \\<lbrakk>l \\<noteq> [] \\<Longrightarrow> \\<exists>y ys. l = ys @ [y];\n     a # l \\<noteq> []; l \\<noteq> []\\<rbrakk>\n    \\<Longrightarrow> \\<exists>y ys. a # l = ys @ [y]", "thm Cons"], ["proof (state)\nthis:\n  l \\<noteq> []\n\ngoal (1 subgoal):\n 1. \\<lbrakk>l \\<noteq> [] \\<Longrightarrow> \\<exists>y ys. l = ys @ [y];\n     a # l \\<noteq> []; l \\<noteq> []\\<rbrakk>\n    \\<Longrightarrow> \\<exists>y ys. a # l = ys @ [y]", "then"], ["proof (chain)\npicking this:\n  l \\<noteq> []", "obtain y ys where \"l = ys @ [y]\""], ["proof (prove)\nusing this:\n  l \\<noteq> []\n\ngoal (1 subgoal):\n 1. (\\<And>ys y. l = ys @ [y] \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using Cons.IH"], ["proof (prove)\nusing this:\n  l \\<noteq> []\n  l \\<noteq> [] \\<Longrightarrow> \\<exists>y ys. l = ys @ [y]\n\ngoal (1 subgoal):\n 1. (\\<And>ys y. l = ys @ [y] \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  l = ys @ [y]\n\ngoal (1 subgoal):\n 1. \\<lbrakk>l \\<noteq> [] \\<Longrightarrow> \\<exists>y ys. l = ys @ [y];\n     a # l \\<noteq> []; l \\<noteq> []\\<rbrakk>\n    \\<Longrightarrow> \\<exists>y ys. a # l = ys @ [y]", "then"], ["proof (chain)\npicking this:\n  l = ys @ [y]", "have \"a # l = a # ys @ [y]\""], ["proof (prove)\nusing this:\n  l = ys @ [y]\n\ngoal (1 subgoal):\n 1. a # l = a # ys @ [y]", "by blast"], ["proof (state)\nthis:\n  a # l = a # ys @ [y]\n\ngoal (1 subgoal):\n 1. \\<lbrakk>l \\<noteq> [] \\<Longrightarrow> \\<exists>y ys. l = ys @ [y];\n     a # l \\<noteq> []; l \\<noteq> []\\<rbrakk>\n    \\<Longrightarrow> \\<exists>y ys. a # l = ys @ [y]", "thus ?thesis"], ["proof (prove)\nusing this:\n  a # l = a # ys @ [y]\n\ngoal (1 subgoal):\n 1. \\<exists>y ys. a # l = ys @ [y]", "by fastforce"], ["proof (state)\nthis:\n  \\<exists>y ys. a # l = ys @ [y]\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>y ys. a # l = ys @ [y]\n\ngoal (1 subgoal):\n 1. [] \\<noteq> [] \\<Longrightarrow> \\<exists>y ys. [] = ys @ [y]", "qed simp"], ["proof (state)\nthis:\n  \\<exists>y ys. l = ys @ [y]\n\ngoal (1 subgoal):\n 1. (\\<And>ys y. l = ys @ [y] \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "}"], ["proof (state)\nthis:\n  l \\<noteq> [] \\<Longrightarrow> \\<exists>y ys. l = ys @ [y]\n\ngoal (1 subgoal):\n 1. (\\<And>ys y. l = ys @ [y] \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "thus ?thesis"], ["proof (prove)\nusing this:\n  l \\<noteq> [] \\<Longrightarrow> \\<exists>y ys. l = ys @ [y]\n\ngoal (1 subgoal):\n 1. thesis", "using assms that"], ["proof (prove)\nusing this:\n  l \\<noteq> [] \\<Longrightarrow> \\<exists>y ys. l = ys @ [y]\n  l \\<noteq> []\n  l = ?ys @ [?y] \\<Longrightarrow> thesis\n\ngoal (1 subgoal):\n 1. thesis", "by blast"], ["proof (state)\nthis:\n  thesis\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma list_ex_intersection: \"list_ex (\\<lambda>v. list_ex ((=) v) ys) xs \\<longleftrightarrow> set xs \\<inter> set ys \\<noteq> {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. list_ex (\\<lambda>v. list_ex ((=) v) ys) xs =\n    (set xs \\<inter> set ys \\<noteq> {})", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. list_ex (\\<lambda>v. list_ex ((=) v) ys) xs =\n    (set xs \\<inter> set ys \\<noteq> {})", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. list_ex (\\<lambda>v. list_ex ((=) v) ys) xs =\n    (set xs \\<inter> set ys \\<noteq> {})", "assume \"list_ex (\\<lambda>v. list_ex ((=) v) ys) xs\""], ["proof (state)\nthis:\n  list_ex (\\<lambda>v. list_ex ((=) v) ys) xs\n\ngoal (1 subgoal):\n 1. list_ex (\\<lambda>v. list_ex ((=) v) ys) xs =\n    (set xs \\<inter> set ys \\<noteq> {})", "then"], ["proof (chain)\npicking this:\n  list_ex (\\<lambda>v. list_ex ((=) v) ys) xs", "have \"\\<exists>v \\<in> set xs. list_ex ((=) v) ys\""], ["proof (prove)\nusing this:\n  list_ex (\\<lambda>v. list_ex ((=) v) ys) xs\n\ngoal (1 subgoal):\n 1. \\<exists>v\\<in>set xs. list_ex ((=) v) ys", "using list_ex_iff"], ["proof (prove)\nusing this:\n  list_ex (\\<lambda>v. list_ex ((=) v) ys) xs\n  list_ex ?P ?xs = Bex (set ?xs) ?P\n\ngoal (1 subgoal):\n 1. \\<exists>v\\<in>set xs. list_ex ((=) v) ys", "by fast"], ["proof (state)\nthis:\n  \\<exists>v\\<in>set xs. list_ex ((=) v) ys\n\ngoal (1 subgoal):\n 1. list_ex (\\<lambda>v. list_ex ((=) v) ys) xs =\n    (set xs \\<inter> set ys \\<noteq> {})", "moreover"], ["proof (state)\nthis:\n  \\<exists>v\\<in>set xs. list_ex ((=) v) ys\n\ngoal (1 subgoal):\n 1. list_ex (\\<lambda>v. list_ex ((=) v) ys) xs =\n    (set xs \\<inter> set ys \\<noteq> {})", "have \"\\<forall>v. list_ex ((=) v) ys = (\\<exists>v' \\<in> set ys. v = v')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>v. list_ex ((=) v) ys = (\\<exists>v'\\<in>set ys. v = v')", "using list_ex_iff"], ["proof (prove)\nusing this:\n  list_ex ?P ?xs = Bex (set ?xs) ?P\n\ngoal (1 subgoal):\n 1. \\<forall>v. list_ex ((=) v) ys = (\\<exists>v'\\<in>set ys. v = v')", "by blast"], ["proof (state)\nthis:\n  \\<forall>v. list_ex ((=) v) ys = (\\<exists>v'\\<in>set ys. v = v')\n\ngoal (1 subgoal):\n 1. list_ex (\\<lambda>v. list_ex ((=) v) ys) xs =\n    (set xs \\<inter> set ys \\<noteq> {})", "ultimately"], ["proof (chain)\npicking this:\n  \\<exists>v\\<in>set xs. list_ex ((=) v) ys\n  \\<forall>v. list_ex ((=) v) ys = (\\<exists>v'\\<in>set ys. v = v')", "have \"\\<exists>v \\<in> set xs. (\\<exists>v' \\<in> set ys. v = v')\""], ["proof (prove)\nusing this:\n  \\<exists>v\\<in>set xs. list_ex ((=) v) ys\n  \\<forall>v. list_ex ((=) v) ys = (\\<exists>v'\\<in>set ys. v = v')\n\ngoal (1 subgoal):\n 1. \\<exists>v\\<in>set xs. \\<exists>v'\\<in>set ys. v = v'", "by blast"], ["proof (state)\nthis:\n  \\<exists>v\\<in>set xs. \\<exists>v'\\<in>set ys. v = v'\n\ngoal (1 subgoal):\n 1. list_ex (\\<lambda>v. list_ex ((=) v) ys) xs =\n    (set xs \\<inter> set ys \\<noteq> {})", "then"], ["proof (chain)\npicking this:\n  \\<exists>v\\<in>set xs. \\<exists>v'\\<in>set ys. v = v'", "obtain v v' where \"v \\<in> set xs\" and \"v' \\<in> set ys\" and \"v = v'\""], ["proof (prove)\nusing this:\n  \\<exists>v\\<in>set xs. \\<exists>v'\\<in>set ys. v = v'\n\ngoal (1 subgoal):\n 1. (\\<And>v v'.\n        \\<lbrakk>v \\<in> set xs; v' \\<in> set ys; v = v'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  v \\<in> set xs\n  v' \\<in> set ys\n  v = v'\n\ngoal (1 subgoal):\n 1. list_ex (\\<lambda>v. list_ex ((=) v) ys) xs =\n    (set xs \\<inter> set ys \\<noteq> {})", "then"], ["proof (chain)\npicking this:\n  v \\<in> set xs\n  v' \\<in> set ys\n  v = v'", "have \"set xs \\<inter> set ys \\<noteq> {}\""], ["proof (prove)\nusing this:\n  v \\<in> set xs\n  v' \\<in> set ys\n  v = v'\n\ngoal (1 subgoal):\n 1. set xs \\<inter> set ys \\<noteq> {}", "by blast"], ["proof (state)\nthis:\n  set xs \\<inter> set ys \\<noteq> {}\n\ngoal (1 subgoal):\n 1. list_ex (\\<lambda>v. list_ex ((=) v) ys) xs =\n    (set xs \\<inter> set ys \\<noteq> {})", "}"], ["proof (state)\nthis:\n  list_ex (\\<lambda>v. list_ex ((=) v) ys) xs \\<Longrightarrow>\n  set xs \\<inter> set ys \\<noteq> {}\n\ngoal (1 subgoal):\n 1. list_ex (\\<lambda>v. list_ex ((=) v) ys) xs =\n    (set xs \\<inter> set ys \\<noteq> {})", "moreover"], ["proof (state)\nthis:\n  list_ex (\\<lambda>v. list_ex ((=) v) ys) xs \\<Longrightarrow>\n  set xs \\<inter> set ys \\<noteq> {}\n\ngoal (1 subgoal):\n 1. list_ex (\\<lambda>v. list_ex ((=) v) ys) xs =\n    (set xs \\<inter> set ys \\<noteq> {})", "{"], ["proof (state)\nthis:\n  list_ex (\\<lambda>v. list_ex ((=) v) ys) xs \\<Longrightarrow>\n  set xs \\<inter> set ys \\<noteq> {}\n\ngoal (1 subgoal):\n 1. list_ex (\\<lambda>v. list_ex ((=) v) ys) xs =\n    (set xs \\<inter> set ys \\<noteq> {})", "assume  \"set xs \\<inter> set ys \\<noteq> {}\""], ["proof (state)\nthis:\n  set xs \\<inter> set ys \\<noteq> {}\n\ngoal (1 subgoal):\n 1. list_ex (\\<lambda>v. list_ex ((=) v) ys) xs =\n    (set xs \\<inter> set ys \\<noteq> {})", "then"], ["proof (chain)\npicking this:\n  set xs \\<inter> set ys \\<noteq> {}", "obtain v v' where \"v \\<in> set xs\" and \"v' \\<in> set ys\" and \"v = v'\""], ["proof (prove)\nusing this:\n  set xs \\<inter> set ys \\<noteq> {}\n\ngoal (1 subgoal):\n 1. (\\<And>v v'.\n        \\<lbrakk>v \\<in> set xs; v' \\<in> set ys; v = v'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  v \\<in> set xs\n  v' \\<in> set ys\n  v = v'\n\ngoal (1 subgoal):\n 1. list_ex (\\<lambda>v. list_ex ((=) v) ys) xs =\n    (set xs \\<inter> set ys \\<noteq> {})", "then"], ["proof (chain)\npicking this:\n  v \\<in> set xs\n  v' \\<in> set ys\n  v = v'", "have \"list_ex (\\<lambda>v. \\<exists>v' \\<in> set ys. v = v') xs\""], ["proof (prove)\nusing this:\n  v \\<in> set xs\n  v' \\<in> set ys\n  v = v'\n\ngoal (1 subgoal):\n 1. list_ex (\\<lambda>v. \\<exists>v'\\<in>set ys. v = v') xs", "using list_ex_iff"], ["proof (prove)\nusing this:\n  v \\<in> set xs\n  v' \\<in> set ys\n  v = v'\n  list_ex ?P ?xs = Bex (set ?xs) ?P\n\ngoal (1 subgoal):\n 1. list_ex (\\<lambda>v. \\<exists>v'\\<in>set ys. v = v') xs", "by fast"], ["proof (state)\nthis:\n  list_ex (\\<lambda>v. \\<exists>v'\\<in>set ys. v = v') xs\n\ngoal (1 subgoal):\n 1. list_ex (\\<lambda>v. list_ex ((=) v) ys) xs =\n    (set xs \\<inter> set ys \\<noteq> {})", "moreover"], ["proof (state)\nthis:\n  list_ex (\\<lambda>v. \\<exists>v'\\<in>set ys. v = v') xs\n\ngoal (1 subgoal):\n 1. list_ex (\\<lambda>v. list_ex ((=) v) ys) xs =\n    (set xs \\<inter> set ys \\<noteq> {})", "have \"\\<forall>v. (\\<exists>v' \\<in> set ys. v = v') = list_ex ((=) v) ys\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>v. (\\<exists>v'\\<in>set ys. v = v') = list_ex ((=) v) ys", "using list_ex_iff"], ["proof (prove)\nusing this:\n  list_ex ?P ?xs = Bex (set ?xs) ?P\n\ngoal (1 subgoal):\n 1. \\<forall>v. (\\<exists>v'\\<in>set ys. v = v') = list_ex ((=) v) ys", "by blast"], ["proof (state)\nthis:\n  \\<forall>v. (\\<exists>v'\\<in>set ys. v = v') = list_ex ((=) v) ys\n\ngoal (1 subgoal):\n 1. list_ex (\\<lambda>v. list_ex ((=) v) ys) xs =\n    (set xs \\<inter> set ys \\<noteq> {})", "ultimately"], ["proof (chain)\npicking this:\n  list_ex (\\<lambda>v. \\<exists>v'\\<in>set ys. v = v') xs\n  \\<forall>v. (\\<exists>v'\\<in>set ys. v = v') = list_ex ((=) v) ys", "have \"list_ex (\\<lambda>v. list_ex ((=) v) ys) xs\""], ["proof (prove)\nusing this:\n  list_ex (\\<lambda>v. \\<exists>v'\\<in>set ys. v = v') xs\n  \\<forall>v. (\\<exists>v'\\<in>set ys. v = v') = list_ex ((=) v) ys\n\ngoal (1 subgoal):\n 1. list_ex (\\<lambda>v. list_ex ((=) v) ys) xs", "by force"], ["proof (state)\nthis:\n  list_ex (\\<lambda>v. list_ex ((=) v) ys) xs\n\ngoal (1 subgoal):\n 1. list_ex (\\<lambda>v. list_ex ((=) v) ys) xs =\n    (set xs \\<inter> set ys \\<noteq> {})", "}"], ["proof (state)\nthis:\n  set xs \\<inter> set ys \\<noteq> {} \\<Longrightarrow>\n  list_ex (\\<lambda>v. list_ex ((=) v) ys) xs\n\ngoal (1 subgoal):\n 1. list_ex (\\<lambda>v. list_ex ((=) v) ys) xs =\n    (set xs \\<inter> set ys \\<noteq> {})", "ultimately"], ["proof (chain)\npicking this:\n  list_ex (\\<lambda>v. list_ex ((=) v) ys) xs \\<Longrightarrow>\n  set xs \\<inter> set ys \\<noteq> {}\n  set xs \\<inter> set ys \\<noteq> {} \\<Longrightarrow>\n  list_ex (\\<lambda>v. list_ex ((=) v) ys) xs", "show ?thesis"], ["proof (prove)\nusing this:\n  list_ex (\\<lambda>v. list_ex ((=) v) ys) xs \\<Longrightarrow>\n  set xs \\<inter> set ys \\<noteq> {}\n  set xs \\<inter> set ys \\<noteq> {} \\<Longrightarrow>\n  list_ex (\\<lambda>v. list_ex ((=) v) ys) xs\n\ngoal (1 subgoal):\n 1. list_ex (\\<lambda>v. list_ex ((=) v) ys) xs =\n    (set xs \\<inter> set ys \\<noteq> {})", "by blast"], ["proof (state)\nthis:\n  list_ex (\\<lambda>v. list_ex ((=) v) ys) xs =\n  (set xs \\<inter> set ys \\<noteq> {})\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma length_map_upt: \"length (map f [a..<b]) = b - a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length (map f [a..<b]) = b - a", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. length (map f [a..<b]) = b - a", "have \"length [a..<b] = b - a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length [a..<b] = b - a", "using length_upt"], ["proof (prove)\nusing this:\n  length [?i..<?j] = ?j - ?i\n\ngoal (1 subgoal):\n 1. length [a..<b] = b - a", "by blast"], ["proof (state)\nthis:\n  length [a..<b] = b - a\n\ngoal (1 subgoal):\n 1. length (map f [a..<b]) = b - a", "moreover"], ["proof (state)\nthis:\n  length [a..<b] = b - a\n\ngoal (1 subgoal):\n 1. length (map f [a..<b]) = b - a", "have \"length (map f [a..<b]) = length [a..<b]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length (map f [a..<b]) = length [a..<b]", "by simp"], ["proof (state)\nthis:\n  length (map f [a..<b]) = length [a..<b]\n\ngoal (1 subgoal):\n 1. length (map f [a..<b]) = b - a", "ultimately"], ["proof (chain)\npicking this:\n  length [a..<b] = b - a\n  length (map f [a..<b]) = length [a..<b]", "show ?thesis"], ["proof (prove)\nusing this:\n  length [a..<b] = b - a\n  length (map f [a..<b]) = length [a..<b]\n\ngoal (1 subgoal):\n 1. length (map f [a..<b]) = b - a", "by argo"], ["proof (state)\nthis:\n  length (map f [a..<b]) = b - a\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma not_list_ex_equals_list_all_not: \"(\\<not>list_ex P xs) = list_all (\\<lambda>x. \\<not>P x) xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<not> list_ex P xs) = list_all (\\<lambda>x. \\<not> P x) xs", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<not> list_ex P xs) = list_all (\\<lambda>x. \\<not> P x) xs", "have \"(\\<not>list_ex P xs) = (\\<not>Bex (set xs) P)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<not> list_ex P xs) = (\\<not> Bex (set xs) P)", "using list_ex_iff"], ["proof (prove)\nusing this:\n  list_ex ?P ?xs = Bex (set ?xs) ?P\n\ngoal (1 subgoal):\n 1. (\\<not> list_ex P xs) = (\\<not> Bex (set xs) P)", "by blast"], ["proof (state)\nthis:\n  (\\<not> list_ex P xs) = (\\<not> Bex (set xs) P)\n\ngoal (1 subgoal):\n 1. (\\<not> list_ex P xs) = list_all (\\<lambda>x. \\<not> P x) xs", "also"], ["proof (state)\nthis:\n  (\\<not> list_ex P xs) = (\\<not> Bex (set xs) P)\n\ngoal (1 subgoal):\n 1. (\\<not> list_ex P xs) = list_all (\\<lambda>x. \\<not> P x) xs", "have \"\\<dots> = Ball (set xs) (\\<lambda>x. \\<not>P x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<not> Bex (set xs) P) = (\\<forall>x\\<in>set xs. \\<not> P x)", "by blast"], ["proof (state)\nthis:\n  (\\<not> Bex (set xs) P) = (\\<forall>x\\<in>set xs. \\<not> P x)\n\ngoal (1 subgoal):\n 1. (\\<not> list_ex P xs) = list_all (\\<lambda>x. \\<not> P x) xs", "finally"], ["proof (chain)\npicking this:\n  (\\<not> list_ex P xs) = (\\<forall>x\\<in>set xs. \\<not> P x)", "show ?thesis"], ["proof (prove)\nusing this:\n  (\\<not> list_ex P xs) = (\\<forall>x\\<in>set xs. \\<not> P x)\n\ngoal (1 subgoal):\n 1. (\\<not> list_ex P xs) = list_all (\\<lambda>x. \\<not> P x) xs", "by (simp add: Ball_set_list_all)"], ["proof (state)\nthis:\n  (\\<not> list_ex P xs) = list_all (\\<lambda>x. \\<not> P x) xs\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma element_of_subseqs_then_subset:\n  assumes \"l \\<in> set (subseqs l')\" \n  shows\"set l \\<subseteq> set l'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set l \\<subseteq> set l'", "using assms"], ["proof (prove)\nusing this:\n  l \\<in> set (subseqs l')\n\ngoal (1 subgoal):\n 1. set l \\<subseteq> set l'", "proof (induction l' arbitrary: l)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>l.\n       l \\<in> set (subseqs []) \\<Longrightarrow> set l \\<subseteq> set []\n 2. \\<And>a l' l.\n       \\<lbrakk>\\<And>l.\n                   l \\<in> set (subseqs l') \\<Longrightarrow>\n                   set l \\<subseteq> set l';\n        l \\<in> set (subseqs (a # l'))\\<rbrakk>\n       \\<Longrightarrow> set l \\<subseteq> set (a # l')", "case (Cons x l')"], ["proof (state)\nthis:\n  ?l \\<in> set (subseqs l') \\<Longrightarrow> set ?l \\<subseteq> set l'\n  l \\<in> set (subseqs (x # l'))\n\ngoal (2 subgoals):\n 1. \\<And>l.\n       l \\<in> set (subseqs []) \\<Longrightarrow> set l \\<subseteq> set []\n 2. \\<And>a l' l.\n       \\<lbrakk>\\<And>l.\n                   l \\<in> set (subseqs l') \\<Longrightarrow>\n                   set l \\<subseteq> set l';\n        l \\<in> set (subseqs (a # l'))\\<rbrakk>\n       \\<Longrightarrow> set l \\<subseteq> set (a # l')", "have \"set (subseqs (x # l')) = (Cons x) ` set (subseqs l') \\<union> set (subseqs l')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set (subseqs (x # l')) =\n    (#) x ` set (subseqs l') \\<union> set (subseqs l')", "unfolding subseqs.simps(2) Let_def set_map set_append"], ["proof (prove)\ngoal (1 subgoal):\n 1. (#) x ` set (subseqs l') \\<union> set (subseqs l') =\n    (#) x ` set (subseqs l') \\<union> set (subseqs l')", ".."], ["proof (state)\nthis:\n  set (subseqs (x # l')) =\n  (#) x ` set (subseqs l') \\<union> set (subseqs l')\n\ngoal (2 subgoals):\n 1. \\<And>l.\n       l \\<in> set (subseqs []) \\<Longrightarrow> set l \\<subseteq> set []\n 2. \\<And>a l' l.\n       \\<lbrakk>\\<And>l.\n                   l \\<in> set (subseqs l') \\<Longrightarrow>\n                   set l \\<subseteq> set l';\n        l \\<in> set (subseqs (a # l'))\\<rbrakk>\n       \\<Longrightarrow> set l \\<subseteq> set (a # l')", "then"], ["proof (chain)\npicking this:\n  set (subseqs (x # l')) =\n  (#) x ` set (subseqs l') \\<union> set (subseqs l')", "consider (A) \"l \\<in> (Cons x) ` set (subseqs l')\"\n    | (B) \"l \\<in> set (subseqs l')\""], ["proof (prove)\nusing this:\n  set (subseqs (x # l')) =\n  (#) x ` set (subseqs l') \\<union> set (subseqs l')\n\ngoal (1 subgoal):\n 1. \\<lbrakk>l \\<in> (#) x ` set (subseqs l') \\<Longrightarrow> thesis;\n     l \\<in> set (subseqs l') \\<Longrightarrow> thesis\\<rbrakk>\n    \\<Longrightarrow> thesis", "using Cons.prems"], ["proof (prove)\nusing this:\n  set (subseqs (x # l')) =\n  (#) x ` set (subseqs l') \\<union> set (subseqs l')\n  l \\<in> set (subseqs (x # l'))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>l \\<in> (#) x ` set (subseqs l') \\<Longrightarrow> thesis;\n     l \\<in> set (subseqs l') \\<Longrightarrow> thesis\\<rbrakk>\n    \\<Longrightarrow> thesis", "by blast"], ["proof (state)\nthis:\n  \\<lbrakk>l \\<in> (#) x ` set (subseqs l') \\<Longrightarrow> ?thesis;\n   l \\<in> set (subseqs l') \\<Longrightarrow> ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n\ngoal (2 subgoals):\n 1. \\<And>l.\n       l \\<in> set (subseqs []) \\<Longrightarrow> set l \\<subseteq> set []\n 2. \\<And>a l' l.\n       \\<lbrakk>\\<And>l.\n                   l \\<in> set (subseqs l') \\<Longrightarrow>\n                   set l \\<subseteq> set l';\n        l \\<in> set (subseqs (a # l'))\\<rbrakk>\n       \\<Longrightarrow> set l \\<subseteq> set (a # l')", "thus ?case"], ["proof (prove)\nusing this:\n  \\<lbrakk>l \\<in> (#) x ` set (subseqs l') \\<Longrightarrow> ?thesis;\n   l \\<in> set (subseqs l') \\<Longrightarrow> ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n\ngoal (1 subgoal):\n 1. set l \\<subseteq> set (x # l')", "proof (cases)"], ["proof (state)\ngoal (2 subgoals):\n 1. l \\<in> (#) x ` set (subseqs l') \\<Longrightarrow>\n    set l \\<subseteq> set (x # l')\n 2. l \\<in> set (subseqs l') \\<Longrightarrow>\n    set l \\<subseteq> set (x # l')", "case A"], ["proof (state)\nthis:\n  l \\<in> (#) x ` set (subseqs l')\n\ngoal (2 subgoals):\n 1. l \\<in> (#) x ` set (subseqs l') \\<Longrightarrow>\n    set l \\<subseteq> set (x # l')\n 2. l \\<in> set (subseqs l') \\<Longrightarrow>\n    set l \\<subseteq> set (x # l')", "then"], ["proof (chain)\npicking this:\n  l \\<in> (#) x ` set (subseqs l')", "obtain l'' where \"l'' \\<in> set (subseqs l')\" and \"l = x # l''\""], ["proof (prove)\nusing this:\n  l \\<in> (#) x ` set (subseqs l')\n\ngoal (1 subgoal):\n 1. (\\<And>l''.\n        \\<lbrakk>l'' \\<in> set (subseqs l'); l = x # l''\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  l'' \\<in> set (subseqs l')\n  l = x # l''\n\ngoal (2 subgoals):\n 1. l \\<in> (#) x ` set (subseqs l') \\<Longrightarrow>\n    set l \\<subseteq> set (x # l')\n 2. l \\<in> set (subseqs l') \\<Longrightarrow>\n    set l \\<subseteq> set (x # l')", "moreover"], ["proof (state)\nthis:\n  l'' \\<in> set (subseqs l')\n  l = x # l''\n\ngoal (2 subgoals):\n 1. l \\<in> (#) x ` set (subseqs l') \\<Longrightarrow>\n    set l \\<subseteq> set (x # l')\n 2. l \\<in> set (subseqs l') \\<Longrightarrow>\n    set l \\<subseteq> set (x # l')", "have \"set l'' \\<subseteq> set l'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set l'' \\<subseteq> set l'", "using Cons.IH[of l'', OF calculation(1)]"], ["proof (prove)\nusing this:\n  set l'' \\<subseteq> set l'\n\ngoal (1 subgoal):\n 1. set l'' \\<subseteq> set l'", "."], ["proof (state)\nthis:\n  set l'' \\<subseteq> set l'\n\ngoal (2 subgoals):\n 1. l \\<in> (#) x ` set (subseqs l') \\<Longrightarrow>\n    set l \\<subseteq> set (x # l')\n 2. l \\<in> set (subseqs l') \\<Longrightarrow>\n    set l \\<subseteq> set (x # l')", "ultimately"], ["proof (chain)\npicking this:\n  l'' \\<in> set (subseqs l')\n  l = x # l''\n  set l'' \\<subseteq> set l'", "show ?thesis"], ["proof (prove)\nusing this:\n  l'' \\<in> set (subseqs l')\n  l = x # l''\n  set l'' \\<subseteq> set l'\n\ngoal (1 subgoal):\n 1. set l \\<subseteq> set (x # l')", "by auto"], ["proof (state)\nthis:\n  set l \\<subseteq> set (x # l')\n\ngoal (1 subgoal):\n 1. l \\<in> set (subseqs l') \\<Longrightarrow>\n    set l \\<subseteq> set (x # l')", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. l \\<in> set (subseqs l') \\<Longrightarrow>\n    set l \\<subseteq> set (x # l')", "case B"], ["proof (state)\nthis:\n  l \\<in> set (subseqs l')\n\ngoal (1 subgoal):\n 1. l \\<in> set (subseqs l') \\<Longrightarrow>\n    set l \\<subseteq> set (x # l')", "then"], ["proof (chain)\npicking this:\n  l \\<in> set (subseqs l')", "show ?thesis"], ["proof (prove)\nusing this:\n  l \\<in> set (subseqs l')\n\ngoal (1 subgoal):\n 1. set l \\<subseteq> set (x # l')", "using Cons.IH"], ["proof (prove)\nusing this:\n  l \\<in> set (subseqs l')\n  ?l \\<in> set (subseqs l') \\<Longrightarrow> set ?l \\<subseteq> set l'\n\ngoal (1 subgoal):\n 1. set l \\<subseteq> set (x # l')", "by auto"], ["proof (state)\nthis:\n  set l \\<subseteq> set (x # l')\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  set l \\<subseteq> set (x # l')\n\ngoal (1 subgoal):\n 1. \\<And>l.\n       l \\<in> set (subseqs []) \\<Longrightarrow> set l \\<subseteq> set []", "qed simp"], ["", "(* TODO rewrite using list comprehension \\<open>embed xs = [[x]. x \\<leftarrow> xs]\\<close> *)"], ["", "text \\<open> Embed a list into a list of singleton lists. \\<close>"], ["", "primrec embed :: \"'a list \\<Rightarrow> 'a list list\" \n  where \"embed [] = []\" \n  | \"embed (x # xs) = [x] # embed xs\""], ["", "lemma set_of_embed_is: \"set (embed xs) = { [x] | x. x \\<in> set xs }\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set (List_Supplement.embed xs) = {[x] |x. x \\<in> set xs}", "by (induction xs; force+)"], ["", "lemma concat_is_inverse_of_embed:\n  \"concat (embed xs) = xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. concat (List_Supplement.embed xs) = xs", "by (induction xs; simp)"], ["", "lemma embed_append[simp]: \"embed (xs @ ys) = embed xs @ embed ys\""], ["proof (prove)\ngoal (1 subgoal):\n 1. List_Supplement.embed (xs @ ys) =\n    List_Supplement.embed xs @ List_Supplement.embed ys", "proof (induction xs)"], ["proof (state)\ngoal (2 subgoals):\n 1. List_Supplement.embed ([] @ ys) =\n    List_Supplement.embed [] @ List_Supplement.embed ys\n 2. \\<And>a xs.\n       List_Supplement.embed (xs @ ys) =\n       List_Supplement.embed xs @ List_Supplement.embed ys \\<Longrightarrow>\n       List_Supplement.embed ((a # xs) @ ys) =\n       List_Supplement.embed (a # xs) @ List_Supplement.embed ys", "case (Cons x xs)"], ["proof (state)\nthis:\n  List_Supplement.embed (xs @ ys) =\n  List_Supplement.embed xs @ List_Supplement.embed ys\n\ngoal (2 subgoals):\n 1. List_Supplement.embed ([] @ ys) =\n    List_Supplement.embed [] @ List_Supplement.embed ys\n 2. \\<And>a xs.\n       List_Supplement.embed (xs @ ys) =\n       List_Supplement.embed xs @ List_Supplement.embed ys \\<Longrightarrow>\n       List_Supplement.embed ((a # xs) @ ys) =\n       List_Supplement.embed (a # xs) @ List_Supplement.embed ys", "have \"embed (x # xs @ ys) = [x] # embed (xs @ ys)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. List_Supplement.embed (x # xs @ ys) =\n    [x] # List_Supplement.embed (xs @ ys)", "try0"], ["proof (prove)\ngoal (1 subgoal):\n 1. List_Supplement.embed (x # xs @ ys) =\n    [x] # List_Supplement.embed (xs @ ys)", "by simp"], ["proof (state)\nthis:\n  List_Supplement.embed (x # xs @ ys) =\n  [x] # List_Supplement.embed (xs @ ys)\n\ngoal (2 subgoals):\n 1. List_Supplement.embed ([] @ ys) =\n    List_Supplement.embed [] @ List_Supplement.embed ys\n 2. \\<And>a xs.\n       List_Supplement.embed (xs @ ys) =\n       List_Supplement.embed xs @ List_Supplement.embed ys \\<Longrightarrow>\n       List_Supplement.embed ((a # xs) @ ys) =\n       List_Supplement.embed (a # xs) @ List_Supplement.embed ys", "also"], ["proof (state)\nthis:\n  List_Supplement.embed (x # xs @ ys) =\n  [x] # List_Supplement.embed (xs @ ys)\n\ngoal (2 subgoals):\n 1. List_Supplement.embed ([] @ ys) =\n    List_Supplement.embed [] @ List_Supplement.embed ys\n 2. \\<And>a xs.\n       List_Supplement.embed (xs @ ys) =\n       List_Supplement.embed xs @ List_Supplement.embed ys \\<Longrightarrow>\n       List_Supplement.embed ((a # xs) @ ys) =\n       List_Supplement.embed (a # xs) @ List_Supplement.embed ys", "have \"\\<dots> = [x] # (embed xs @ embed ys)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. [x] # List_Supplement.embed (xs @ ys) =\n    [x] # List_Supplement.embed xs @ List_Supplement.embed ys", "using Cons.IH"], ["proof (prove)\nusing this:\n  List_Supplement.embed (xs @ ys) =\n  List_Supplement.embed xs @ List_Supplement.embed ys\n\ngoal (1 subgoal):\n 1. [x] # List_Supplement.embed (xs @ ys) =\n    [x] # List_Supplement.embed xs @ List_Supplement.embed ys", "by simp"], ["proof (state)\nthis:\n  [x] # List_Supplement.embed (xs @ ys) =\n  [x] # List_Supplement.embed xs @ List_Supplement.embed ys\n\ngoal (2 subgoals):\n 1. List_Supplement.embed ([] @ ys) =\n    List_Supplement.embed [] @ List_Supplement.embed ys\n 2. \\<And>a xs.\n       List_Supplement.embed (xs @ ys) =\n       List_Supplement.embed xs @ List_Supplement.embed ys \\<Longrightarrow>\n       List_Supplement.embed ((a # xs) @ ys) =\n       List_Supplement.embed (a # xs) @ List_Supplement.embed ys", "finally"], ["proof (chain)\npicking this:\n  List_Supplement.embed (x # xs @ ys) =\n  [x] # List_Supplement.embed xs @ List_Supplement.embed ys", "show ?case"], ["proof (prove)\nusing this:\n  List_Supplement.embed (x # xs @ ys) =\n  [x] # List_Supplement.embed xs @ List_Supplement.embed ys\n\ngoal (1 subgoal):\n 1. List_Supplement.embed ((x # xs) @ ys) =\n    List_Supplement.embed (x # xs) @ List_Supplement.embed ys", "by fastforce"], ["proof (state)\nthis:\n  List_Supplement.embed ((x # xs) @ ys) =\n  List_Supplement.embed (x # xs) @ List_Supplement.embed ys\n\ngoal (1 subgoal):\n 1. List_Supplement.embed ([] @ ys) =\n    List_Supplement.embed [] @ List_Supplement.embed ys", "qed simp"], ["", "end"]]}