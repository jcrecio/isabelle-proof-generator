{"file_name": "/home/qj213/afp-2021-10-22/thys/Verified_SAT_Based_AI_Planning/Set2_Join_RBT.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Verified_SAT_Based_AI_Planning", "problem_names": ["lemma invc2_joinL:\n \"\\<lbrakk> invc l; invc r; bheight l \\<le> bheight r \\<rbrakk> \\<Longrightarrow>\n  invc2 (joinL l x r)\n  \\<and> (bheight l \\<noteq> bheight r \\<and> color r = Black \\<longrightarrow> invc(joinL l x r))\"", "lemma invc2_joinR:\n  \"\\<lbrakk> invc l; invh l; invc r; invh r; bheight l \\<ge> bheight r \\<rbrakk> \\<Longrightarrow>\n  invc2 (joinR l x r)\n  \\<and> (bheight l \\<noteq> bheight r \\<and> color l = Black \\<longrightarrow> invc(joinR l x r))\"", "lemma bheight_joinL:\n  \"\\<lbrakk> invh l; invh r; bheight l \\<le> bheight r \\<rbrakk> \\<Longrightarrow> bheight (joinL l x r) = bheight r\"", "lemma invh_joinL:\n  \"\\<lbrakk> invh l;  invh r;  bheight l \\<le> bheight r \\<rbrakk> \\<Longrightarrow> invh (joinL l x r)\"", "lemma bheight_baliR:\n  \"bheight l = bheight r \\<Longrightarrow> bheight (baliR l a r) = Suc (bheight l)\"", "lemma bheight_joinR:\n  \"\\<lbrakk> invh l;  invh r;  bheight l \\<ge> bheight r \\<rbrakk> \\<Longrightarrow> bheight (joinR l x r) = bheight l\"", "lemma invh_joinR:\n  \"\\<lbrakk> invh l; invh r; bheight l \\<ge> bheight r \\<rbrakk> \\<Longrightarrow> invh (joinR l x r)\"", "lemma rbt_join: \"\\<lbrakk> invc l; invh l; invc r; invh r \\<rbrakk> \\<Longrightarrow> rbt(join l x r)\"", "lemma bheight_paint_Black: \"bheight(paint Black t) \\<le> bheight t + 1\"", "lemma \"\\<lbrakk> rbt l; rbt r \\<rbrakk> \\<Longrightarrow> bheight(join l x r) \\<le> max (bheight l) (bheight r) + 1\"", "lemma inorder_joinL: \"bheight l \\<le> bheight r \\<Longrightarrow> inorder(joinL l x r) = inorder l @ x # inorder r\"", "lemma inorder_joinR:\n  \"inorder(joinR l x r) = inorder l @ x # inorder r\"", "lemma \"inorder(join l x r) = inorder l @ x # inorder r\"", "lemma set_baliL:\n  \"set_tree(baliL l a r) = set_tree l \\<union> {a} \\<union> set_tree r\"", "lemma set_joinL:\n  \"bheight l \\<le> bheight r \\<Longrightarrow> set_tree (joinL l x r) = set_tree l \\<union> {x} \\<union> set_tree r\"", "lemma set_baliR:\n  \"set_tree(baliR l a r) = set_tree l \\<union> {a} \\<union> set_tree r\"", "lemma set_joinR:\n  \"set_tree (joinR l x r) = set_tree l \\<union> {x} \\<union> set_tree r\"", "lemma set_paint: \"set_tree (paint c t) = set_tree t\"", "lemma set_join: \"set_tree (join l x r) = set_tree l \\<union> {x} \\<union> set_tree r\"", "lemma bst_baliL:\n  \"\\<lbrakk>bst l; bst r; \\<forall>x\\<in>set_tree l. x < a; \\<forall>x\\<in>set_tree r. a < x\\<rbrakk>\n   \\<Longrightarrow> bst (baliL l a r)\"", "lemma bst_baliR:\n  \"\\<lbrakk>bst l; bst r; \\<forall>x\\<in>set_tree l. x < a; \\<forall>x\\<in>set_tree r. a < x\\<rbrakk>\n   \\<Longrightarrow> bst (baliR l a r)\"", "lemma bst_joinL:\n  \"\\<lbrakk>bst (Node l (a, n) r); bheight l \\<le> bheight r\\<rbrakk>\n  \\<Longrightarrow> bst (joinL l a r)\"", "lemma bst_joinR:\n  \"\\<lbrakk>bst l; bst r; \\<forall>x\\<in>set_tree l. x < a; \\<forall>y\\<in>set_tree r. a < y \\<rbrakk>\n  \\<Longrightarrow> bst (joinR l a r)\"", "lemma bst_paint: \"bst (paint c t) = bst t\"", "lemma bst_join:\n  \"bst (Node l (a, n) r) \\<Longrightarrow> bst (join l a r)\"", "lemma inv_join: \"\\<lbrakk> invc l; invh l; invc r; invh r \\<rbrakk> \\<Longrightarrow> invc(join l x r) \\<and> invh(join l x r)\""], "translations": [["", "lemma invc2_joinL:\n \"\\<lbrakk> invc l; invc r; bheight l \\<le> bheight r \\<rbrakk> \\<Longrightarrow>\n  invc2 (joinL l x r)\n  \\<and> (bheight l \\<noteq> bheight r \\<and> color r = Black \\<longrightarrow> invc(joinL l x r))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>invc l; invc r; bheight l \\<le> bheight r\\<rbrakk>\n    \\<Longrightarrow> invc2 (joinL l x r) \\<and>\n                      (bheight l \\<noteq> bheight r \\<and>\n                       color r = Black \\<longrightarrow>\n                       invc (joinL l x r))", "proof (induct l x r rule: joinL.induct)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>l x r.\n       \\<lbrakk>\\<And>x21 x22 x23 xa y.\n                   \\<lbrakk>\\<not> bheight r \\<le> bheight l;\n                    r = \\<langle>x21, x22, x23\\<rangle>; (xa, y) = x22;\n                    y = Red; invc l; invc x21;\n                    bheight l \\<le> bheight x21\\<rbrakk>\n                   \\<Longrightarrow> invc2 (joinL l x x21) \\<and>\n                                     (bheight l \\<noteq> bheight x21 \\<and>\ncolor x21 = Black \\<longrightarrow>\ninvc (joinL l x x21));\n        \\<And>x21 x22 x23 xa y.\n           \\<lbrakk>\\<not> bheight r \\<le> bheight l;\n            r = \\<langle>x21, x22, x23\\<rangle>; (xa, y) = x22; y = Black;\n            invc l; invc x21; bheight l \\<le> bheight x21\\<rbrakk>\n           \\<Longrightarrow> invc2 (joinL l x x21) \\<and>\n                             (bheight l \\<noteq> bheight x21 \\<and>\n                              color x21 = Black \\<longrightarrow>\n                              invc (joinL l x x21));\n        invc l; invc r; bheight l \\<le> bheight r\\<rbrakk>\n       \\<Longrightarrow> invc2 (joinL l x r) \\<and>\n                         (bheight l \\<noteq> bheight r \\<and>\n                          color r = Black \\<longrightarrow>\n                          invc (joinL l x r))", "case (1 l x r)"], ["proof (state)\nthis:\n  \\<lbrakk>\\<not> bheight r \\<le> bheight l;\n   r = \\<langle>?x21.0, ?x22.0, ?x23.0\\<rangle>; (?xa, ?y) = ?x22.0;\n   ?y = Red; invc l; invc ?x21.0; bheight l \\<le> bheight ?x21.0\\<rbrakk>\n  \\<Longrightarrow> invc2 (joinL l x ?x21.0) \\<and>\n                    (bheight l \\<noteq> bheight ?x21.0 \\<and>\n                     color ?x21.0 = Black \\<longrightarrow>\n                     invc (joinL l x ?x21.0))\n  \\<lbrakk>\\<not> bheight r \\<le> bheight l;\n   r = \\<langle>?x21.0, ?x22.0, ?x23.0\\<rangle>; (?xa, ?y) = ?x22.0;\n   ?y = Black; invc l; invc ?x21.0; bheight l \\<le> bheight ?x21.0\\<rbrakk>\n  \\<Longrightarrow> invc2 (joinL l x ?x21.0) \\<and>\n                    (bheight l \\<noteq> bheight ?x21.0 \\<and>\n                     color ?x21.0 = Black \\<longrightarrow>\n                     invc (joinL l x ?x21.0))\n  invc l\n  invc r\n  bheight l \\<le> bheight r\n\ngoal (1 subgoal):\n 1. \\<And>l x r.\n       \\<lbrakk>\\<And>x21 x22 x23 xa y.\n                   \\<lbrakk>\\<not> bheight r \\<le> bheight l;\n                    r = \\<langle>x21, x22, x23\\<rangle>; (xa, y) = x22;\n                    y = Red; invc l; invc x21;\n                    bheight l \\<le> bheight x21\\<rbrakk>\n                   \\<Longrightarrow> invc2 (joinL l x x21) \\<and>\n                                     (bheight l \\<noteq> bheight x21 \\<and>\ncolor x21 = Black \\<longrightarrow>\ninvc (joinL l x x21));\n        \\<And>x21 x22 x23 xa y.\n           \\<lbrakk>\\<not> bheight r \\<le> bheight l;\n            r = \\<langle>x21, x22, x23\\<rangle>; (xa, y) = x22; y = Black;\n            invc l; invc x21; bheight l \\<le> bheight x21\\<rbrakk>\n           \\<Longrightarrow> invc2 (joinL l x x21) \\<and>\n                             (bheight l \\<noteq> bheight x21 \\<and>\n                              color x21 = Black \\<longrightarrow>\n                              invc (joinL l x x21));\n        invc l; invc r; bheight l \\<le> bheight r\\<rbrakk>\n       \\<Longrightarrow> invc2 (joinL l x r) \\<and>\n                         (bheight l \\<noteq> bheight r \\<and>\n                          color r = Black \\<longrightarrow>\n                          invc (joinL l x r))", "thus ?case"], ["proof (prove)\nusing this:\n  \\<lbrakk>\\<not> bheight r \\<le> bheight l;\n   r = \\<langle>?x21.0, ?x22.0, ?x23.0\\<rangle>; (?xa, ?y) = ?x22.0;\n   ?y = Red; invc l; invc ?x21.0; bheight l \\<le> bheight ?x21.0\\<rbrakk>\n  \\<Longrightarrow> invc2 (joinL l x ?x21.0) \\<and>\n                    (bheight l \\<noteq> bheight ?x21.0 \\<and>\n                     color ?x21.0 = Black \\<longrightarrow>\n                     invc (joinL l x ?x21.0))\n  \\<lbrakk>\\<not> bheight r \\<le> bheight l;\n   r = \\<langle>?x21.0, ?x22.0, ?x23.0\\<rangle>; (?xa, ?y) = ?x22.0;\n   ?y = Black; invc l; invc ?x21.0; bheight l \\<le> bheight ?x21.0\\<rbrakk>\n  \\<Longrightarrow> invc2 (joinL l x ?x21.0) \\<and>\n                    (bheight l \\<noteq> bheight ?x21.0 \\<and>\n                     color ?x21.0 = Black \\<longrightarrow>\n                     invc (joinL l x ?x21.0))\n  invc l\n  invc r\n  bheight l \\<le> bheight r\n\ngoal (1 subgoal):\n 1. invc2 (joinL l x r) \\<and>\n    (bheight l \\<noteq> bheight r \\<and> color r = Black \\<longrightarrow>\n     invc (joinL l x r))", "by(auto simp: invc_baliL invc2I joinL.simps[of l x r] split!: tree.splits if_splits)"], ["proof (state)\nthis:\n  invc2 (joinL l x r) \\<and>\n  (bheight l \\<noteq> bheight r \\<and> color r = Black \\<longrightarrow>\n   invc (joinL l x r))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma invc2_joinR:\n  \"\\<lbrakk> invc l; invh l; invc r; invh r; bheight l \\<ge> bheight r \\<rbrakk> \\<Longrightarrow>\n  invc2 (joinR l x r)\n  \\<and> (bheight l \\<noteq> bheight r \\<and> color l = Black \\<longrightarrow> invc(joinR l x r))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>invc l; invh l; invc r; invh r;\n     bheight r \\<le> bheight l\\<rbrakk>\n    \\<Longrightarrow> invc2 (joinR l x r) \\<and>\n                      (bheight l \\<noteq> bheight r \\<and>\n                       color l = Black \\<longrightarrow>\n                       invc (joinR l x r))", "proof (induct l x r rule: joinR.induct)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>l x r.\n       \\<lbrakk>\\<And>x21 x22 x23 xa y.\n                   \\<lbrakk>\\<not> bheight l \\<le> bheight r;\n                    l = \\<langle>x21, x22, x23\\<rangle>; (xa, y) = x22;\n                    y = Red; invc x23; invh x23; invc r; invh r;\n                    bheight r \\<le> bheight x23\\<rbrakk>\n                   \\<Longrightarrow> invc2 (joinR x23 x r) \\<and>\n                                     (bheight x23 \\<noteq> bheight r \\<and>\ncolor x23 = Black \\<longrightarrow>\ninvc (joinR x23 x r));\n        \\<And>x21 x22 x23 xa y.\n           \\<lbrakk>\\<not> bheight l \\<le> bheight r;\n            l = \\<langle>x21, x22, x23\\<rangle>; (xa, y) = x22; y = Black;\n            invc x23; invh x23; invc r; invh r;\n            bheight r \\<le> bheight x23\\<rbrakk>\n           \\<Longrightarrow> invc2 (joinR x23 x r) \\<and>\n                             (bheight x23 \\<noteq> bheight r \\<and>\n                              color x23 = Black \\<longrightarrow>\n                              invc (joinR x23 x r));\n        invc l; invh l; invc r; invh r; bheight r \\<le> bheight l\\<rbrakk>\n       \\<Longrightarrow> invc2 (joinR l x r) \\<and>\n                         (bheight l \\<noteq> bheight r \\<and>\n                          color l = Black \\<longrightarrow>\n                          invc (joinR l x r))", "case (1 l x r)"], ["proof (state)\nthis:\n  \\<lbrakk>\\<not> bheight l \\<le> bheight r;\n   l = \\<langle>?x21.0, ?x22.0, ?x23.0\\<rangle>; (?xa, ?y) = ?x22.0;\n   ?y = Red; invc ?x23.0; invh ?x23.0; invc r; invh r;\n   bheight r \\<le> bheight ?x23.0\\<rbrakk>\n  \\<Longrightarrow> invc2 (joinR ?x23.0 x r) \\<and>\n                    (bheight ?x23.0 \\<noteq> bheight r \\<and>\n                     color ?x23.0 = Black \\<longrightarrow>\n                     invc (joinR ?x23.0 x r))\n  \\<lbrakk>\\<not> bheight l \\<le> bheight r;\n   l = \\<langle>?x21.0, ?x22.0, ?x23.0\\<rangle>; (?xa, ?y) = ?x22.0;\n   ?y = Black; invc ?x23.0; invh ?x23.0; invc r; invh r;\n   bheight r \\<le> bheight ?x23.0\\<rbrakk>\n  \\<Longrightarrow> invc2 (joinR ?x23.0 x r) \\<and>\n                    (bheight ?x23.0 \\<noteq> bheight r \\<and>\n                     color ?x23.0 = Black \\<longrightarrow>\n                     invc (joinR ?x23.0 x r))\n  invc l\n  invh l\n  invc r\n  invh r\n  bheight r \\<le> bheight l\n\ngoal (1 subgoal):\n 1. \\<And>l x r.\n       \\<lbrakk>\\<And>x21 x22 x23 xa y.\n                   \\<lbrakk>\\<not> bheight l \\<le> bheight r;\n                    l = \\<langle>x21, x22, x23\\<rangle>; (xa, y) = x22;\n                    y = Red; invc x23; invh x23; invc r; invh r;\n                    bheight r \\<le> bheight x23\\<rbrakk>\n                   \\<Longrightarrow> invc2 (joinR x23 x r) \\<and>\n                                     (bheight x23 \\<noteq> bheight r \\<and>\ncolor x23 = Black \\<longrightarrow>\ninvc (joinR x23 x r));\n        \\<And>x21 x22 x23 xa y.\n           \\<lbrakk>\\<not> bheight l \\<le> bheight r;\n            l = \\<langle>x21, x22, x23\\<rangle>; (xa, y) = x22; y = Black;\n            invc x23; invh x23; invc r; invh r;\n            bheight r \\<le> bheight x23\\<rbrakk>\n           \\<Longrightarrow> invc2 (joinR x23 x r) \\<and>\n                             (bheight x23 \\<noteq> bheight r \\<and>\n                              color x23 = Black \\<longrightarrow>\n                              invc (joinR x23 x r));\n        invc l; invh l; invc r; invh r; bheight r \\<le> bheight l\\<rbrakk>\n       \\<Longrightarrow> invc2 (joinR l x r) \\<and>\n                         (bheight l \\<noteq> bheight r \\<and>\n                          color l = Black \\<longrightarrow>\n                          invc (joinR l x r))", "thus ?case"], ["proof (prove)\nusing this:\n  \\<lbrakk>\\<not> bheight l \\<le> bheight r;\n   l = \\<langle>?x21.0, ?x22.0, ?x23.0\\<rangle>; (?xa, ?y) = ?x22.0;\n   ?y = Red; invc ?x23.0; invh ?x23.0; invc r; invh r;\n   bheight r \\<le> bheight ?x23.0\\<rbrakk>\n  \\<Longrightarrow> invc2 (joinR ?x23.0 x r) \\<and>\n                    (bheight ?x23.0 \\<noteq> bheight r \\<and>\n                     color ?x23.0 = Black \\<longrightarrow>\n                     invc (joinR ?x23.0 x r))\n  \\<lbrakk>\\<not> bheight l \\<le> bheight r;\n   l = \\<langle>?x21.0, ?x22.0, ?x23.0\\<rangle>; (?xa, ?y) = ?x22.0;\n   ?y = Black; invc ?x23.0; invh ?x23.0; invc r; invh r;\n   bheight r \\<le> bheight ?x23.0\\<rbrakk>\n  \\<Longrightarrow> invc2 (joinR ?x23.0 x r) \\<and>\n                    (bheight ?x23.0 \\<noteq> bheight r \\<and>\n                     color ?x23.0 = Black \\<longrightarrow>\n                     invc (joinR ?x23.0 x r))\n  invc l\n  invh l\n  invc r\n  invh r\n  bheight r \\<le> bheight l\n\ngoal (1 subgoal):\n 1. invc2 (joinR l x r) \\<and>\n    (bheight l \\<noteq> bheight r \\<and> color l = Black \\<longrightarrow>\n     invc (joinR l x r))", "by(fastforce simp: invc_baliR invc2I joinR.simps[of l x r] split!: tree.splits if_splits)"], ["proof (state)\nthis:\n  invc2 (joinR l x r) \\<and>\n  (bheight l \\<noteq> bheight r \\<and> color l = Black \\<longrightarrow>\n   invc (joinR l x r))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma bheight_joinL:\n  \"\\<lbrakk> invh l; invh r; bheight l \\<le> bheight r \\<rbrakk> \\<Longrightarrow> bheight (joinL l x r) = bheight r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>invh l; invh r; bheight l \\<le> bheight r\\<rbrakk>\n    \\<Longrightarrow> bheight (joinL l x r) = bheight r", "proof (induct l x r rule: joinL.induct)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>l x r.\n       \\<lbrakk>\\<And>x21 x22 x23 xa y.\n                   \\<lbrakk>\\<not> bheight r \\<le> bheight l;\n                    r = \\<langle>x21, x22, x23\\<rangle>; (xa, y) = x22;\n                    y = Red; invh l; invh x21;\n                    bheight l \\<le> bheight x21\\<rbrakk>\n                   \\<Longrightarrow> bheight (joinL l x x21) = bheight x21;\n        \\<And>x21 x22 x23 xa y.\n           \\<lbrakk>\\<not> bheight r \\<le> bheight l;\n            r = \\<langle>x21, x22, x23\\<rangle>; (xa, y) = x22; y = Black;\n            invh l; invh x21; bheight l \\<le> bheight x21\\<rbrakk>\n           \\<Longrightarrow> bheight (joinL l x x21) = bheight x21;\n        invh l; invh r; bheight l \\<le> bheight r\\<rbrakk>\n       \\<Longrightarrow> bheight (joinL l x r) = bheight r", "case (1 l x r)"], ["proof (state)\nthis:\n  \\<lbrakk>\\<not> bheight r \\<le> bheight l;\n   r = \\<langle>?x21.0, ?x22.0, ?x23.0\\<rangle>; (?xa, ?y) = ?x22.0;\n   ?y = Red; invh l; invh ?x21.0; bheight l \\<le> bheight ?x21.0\\<rbrakk>\n  \\<Longrightarrow> bheight (joinL l x ?x21.0) = bheight ?x21.0\n  \\<lbrakk>\\<not> bheight r \\<le> bheight l;\n   r = \\<langle>?x21.0, ?x22.0, ?x23.0\\<rangle>; (?xa, ?y) = ?x22.0;\n   ?y = Black; invh l; invh ?x21.0; bheight l \\<le> bheight ?x21.0\\<rbrakk>\n  \\<Longrightarrow> bheight (joinL l x ?x21.0) = bheight ?x21.0\n  invh l\n  invh r\n  bheight l \\<le> bheight r\n\ngoal (1 subgoal):\n 1. \\<And>l x r.\n       \\<lbrakk>\\<And>x21 x22 x23 xa y.\n                   \\<lbrakk>\\<not> bheight r \\<le> bheight l;\n                    r = \\<langle>x21, x22, x23\\<rangle>; (xa, y) = x22;\n                    y = Red; invh l; invh x21;\n                    bheight l \\<le> bheight x21\\<rbrakk>\n                   \\<Longrightarrow> bheight (joinL l x x21) = bheight x21;\n        \\<And>x21 x22 x23 xa y.\n           \\<lbrakk>\\<not> bheight r \\<le> bheight l;\n            r = \\<langle>x21, x22, x23\\<rangle>; (xa, y) = x22; y = Black;\n            invh l; invh x21; bheight l \\<le> bheight x21\\<rbrakk>\n           \\<Longrightarrow> bheight (joinL l x x21) = bheight x21;\n        invh l; invh r; bheight l \\<le> bheight r\\<rbrakk>\n       \\<Longrightarrow> bheight (joinL l x r) = bheight r", "thus ?case"], ["proof (prove)\nusing this:\n  \\<lbrakk>\\<not> bheight r \\<le> bheight l;\n   r = \\<langle>?x21.0, ?x22.0, ?x23.0\\<rangle>; (?xa, ?y) = ?x22.0;\n   ?y = Red; invh l; invh ?x21.0; bheight l \\<le> bheight ?x21.0\\<rbrakk>\n  \\<Longrightarrow> bheight (joinL l x ?x21.0) = bheight ?x21.0\n  \\<lbrakk>\\<not> bheight r \\<le> bheight l;\n   r = \\<langle>?x21.0, ?x22.0, ?x23.0\\<rangle>; (?xa, ?y) = ?x22.0;\n   ?y = Black; invh l; invh ?x21.0; bheight l \\<le> bheight ?x21.0\\<rbrakk>\n  \\<Longrightarrow> bheight (joinL l x ?x21.0) = bheight ?x21.0\n  invh l\n  invh r\n  bheight l \\<le> bheight r\n\ngoal (1 subgoal):\n 1. bheight (joinL l x r) = bheight r", "by(auto simp: bheight_baliL joinL.simps[of l x r] split!: tree.split)"], ["proof (state)\nthis:\n  bheight (joinL l x r) = bheight r\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma invh_joinL:\n  \"\\<lbrakk> invh l;  invh r;  bheight l \\<le> bheight r \\<rbrakk> \\<Longrightarrow> invh (joinL l x r)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>invh l; invh r; bheight l \\<le> bheight r\\<rbrakk>\n    \\<Longrightarrow> invh (joinL l x r)", "proof (induct l x r rule: joinL.induct)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>l x r.\n       \\<lbrakk>\\<And>x21 x22 x23 xa y.\n                   \\<lbrakk>\\<not> bheight r \\<le> bheight l;\n                    r = \\<langle>x21, x22, x23\\<rangle>; (xa, y) = x22;\n                    y = Red; invh l; invh x21;\n                    bheight l \\<le> bheight x21\\<rbrakk>\n                   \\<Longrightarrow> invh (joinL l x x21);\n        \\<And>x21 x22 x23 xa y.\n           \\<lbrakk>\\<not> bheight r \\<le> bheight l;\n            r = \\<langle>x21, x22, x23\\<rangle>; (xa, y) = x22; y = Black;\n            invh l; invh x21; bheight l \\<le> bheight x21\\<rbrakk>\n           \\<Longrightarrow> invh (joinL l x x21);\n        invh l; invh r; bheight l \\<le> bheight r\\<rbrakk>\n       \\<Longrightarrow> invh (joinL l x r)", "case (1 l x r)"], ["proof (state)\nthis:\n  \\<lbrakk>\\<not> bheight r \\<le> bheight l;\n   r = \\<langle>?x21.0, ?x22.0, ?x23.0\\<rangle>; (?xa, ?y) = ?x22.0;\n   ?y = Red; invh l; invh ?x21.0; bheight l \\<le> bheight ?x21.0\\<rbrakk>\n  \\<Longrightarrow> invh (joinL l x ?x21.0)\n  \\<lbrakk>\\<not> bheight r \\<le> bheight l;\n   r = \\<langle>?x21.0, ?x22.0, ?x23.0\\<rangle>; (?xa, ?y) = ?x22.0;\n   ?y = Black; invh l; invh ?x21.0; bheight l \\<le> bheight ?x21.0\\<rbrakk>\n  \\<Longrightarrow> invh (joinL l x ?x21.0)\n  invh l\n  invh r\n  bheight l \\<le> bheight r\n\ngoal (1 subgoal):\n 1. \\<And>l x r.\n       \\<lbrakk>\\<And>x21 x22 x23 xa y.\n                   \\<lbrakk>\\<not> bheight r \\<le> bheight l;\n                    r = \\<langle>x21, x22, x23\\<rangle>; (xa, y) = x22;\n                    y = Red; invh l; invh x21;\n                    bheight l \\<le> bheight x21\\<rbrakk>\n                   \\<Longrightarrow> invh (joinL l x x21);\n        \\<And>x21 x22 x23 xa y.\n           \\<lbrakk>\\<not> bheight r \\<le> bheight l;\n            r = \\<langle>x21, x22, x23\\<rangle>; (xa, y) = x22; y = Black;\n            invh l; invh x21; bheight l \\<le> bheight x21\\<rbrakk>\n           \\<Longrightarrow> invh (joinL l x x21);\n        invh l; invh r; bheight l \\<le> bheight r\\<rbrakk>\n       \\<Longrightarrow> invh (joinL l x r)", "thus ?case"], ["proof (prove)\nusing this:\n  \\<lbrakk>\\<not> bheight r \\<le> bheight l;\n   r = \\<langle>?x21.0, ?x22.0, ?x23.0\\<rangle>; (?xa, ?y) = ?x22.0;\n   ?y = Red; invh l; invh ?x21.0; bheight l \\<le> bheight ?x21.0\\<rbrakk>\n  \\<Longrightarrow> invh (joinL l x ?x21.0)\n  \\<lbrakk>\\<not> bheight r \\<le> bheight l;\n   r = \\<langle>?x21.0, ?x22.0, ?x23.0\\<rangle>; (?xa, ?y) = ?x22.0;\n   ?y = Black; invh l; invh ?x21.0; bheight l \\<le> bheight ?x21.0\\<rbrakk>\n  \\<Longrightarrow> invh (joinL l x ?x21.0)\n  invh l\n  invh r\n  bheight l \\<le> bheight r\n\ngoal (1 subgoal):\n 1. invh (joinL l x r)", "by(auto simp: invh_baliL bheight_joinL joinL.simps[of l x r] split!: tree.split color.split)"], ["proof (state)\nthis:\n  invh (joinL l x r)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma bheight_baliR:\n  \"bheight l = bheight r \\<Longrightarrow> bheight (baliR l a r) = Suc (bheight l)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. bheight l = bheight r \\<Longrightarrow>\n    bheight (baliR l a r) = Suc (bheight l)", "by (cases \"(l,a,r)\" rule: baliR.cases) auto"], ["", "lemma bheight_joinR:\n  \"\\<lbrakk> invh l;  invh r;  bheight l \\<ge> bheight r \\<rbrakk> \\<Longrightarrow> bheight (joinR l x r) = bheight l\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>invh l; invh r; bheight r \\<le> bheight l\\<rbrakk>\n    \\<Longrightarrow> bheight (joinR l x r) = bheight l", "proof (induct l x r rule: joinR.induct)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>l x r.\n       \\<lbrakk>\\<And>x21 x22 x23 xa y.\n                   \\<lbrakk>\\<not> bheight l \\<le> bheight r;\n                    l = \\<langle>x21, x22, x23\\<rangle>; (xa, y) = x22;\n                    y = Red; invh x23; invh r;\n                    bheight r \\<le> bheight x23\\<rbrakk>\n                   \\<Longrightarrow> bheight (joinR x23 x r) = bheight x23;\n        \\<And>x21 x22 x23 xa y.\n           \\<lbrakk>\\<not> bheight l \\<le> bheight r;\n            l = \\<langle>x21, x22, x23\\<rangle>; (xa, y) = x22; y = Black;\n            invh x23; invh r; bheight r \\<le> bheight x23\\<rbrakk>\n           \\<Longrightarrow> bheight (joinR x23 x r) = bheight x23;\n        invh l; invh r; bheight r \\<le> bheight l\\<rbrakk>\n       \\<Longrightarrow> bheight (joinR l x r) = bheight l", "case (1 l x r)"], ["proof (state)\nthis:\n  \\<lbrakk>\\<not> bheight l \\<le> bheight r;\n   l = \\<langle>?x21.0, ?x22.0, ?x23.0\\<rangle>; (?xa, ?y) = ?x22.0;\n   ?y = Red; invh ?x23.0; invh r; bheight r \\<le> bheight ?x23.0\\<rbrakk>\n  \\<Longrightarrow> bheight (joinR ?x23.0 x r) = bheight ?x23.0\n  \\<lbrakk>\\<not> bheight l \\<le> bheight r;\n   l = \\<langle>?x21.0, ?x22.0, ?x23.0\\<rangle>; (?xa, ?y) = ?x22.0;\n   ?y = Black; invh ?x23.0; invh r; bheight r \\<le> bheight ?x23.0\\<rbrakk>\n  \\<Longrightarrow> bheight (joinR ?x23.0 x r) = bheight ?x23.0\n  invh l\n  invh r\n  bheight r \\<le> bheight l\n\ngoal (1 subgoal):\n 1. \\<And>l x r.\n       \\<lbrakk>\\<And>x21 x22 x23 xa y.\n                   \\<lbrakk>\\<not> bheight l \\<le> bheight r;\n                    l = \\<langle>x21, x22, x23\\<rangle>; (xa, y) = x22;\n                    y = Red; invh x23; invh r;\n                    bheight r \\<le> bheight x23\\<rbrakk>\n                   \\<Longrightarrow> bheight (joinR x23 x r) = bheight x23;\n        \\<And>x21 x22 x23 xa y.\n           \\<lbrakk>\\<not> bheight l \\<le> bheight r;\n            l = \\<langle>x21, x22, x23\\<rangle>; (xa, y) = x22; y = Black;\n            invh x23; invh r; bheight r \\<le> bheight x23\\<rbrakk>\n           \\<Longrightarrow> bheight (joinR x23 x r) = bheight x23;\n        invh l; invh r; bheight r \\<le> bheight l\\<rbrakk>\n       \\<Longrightarrow> bheight (joinR l x r) = bheight l", "thus ?case"], ["proof (prove)\nusing this:\n  \\<lbrakk>\\<not> bheight l \\<le> bheight r;\n   l = \\<langle>?x21.0, ?x22.0, ?x23.0\\<rangle>; (?xa, ?y) = ?x22.0;\n   ?y = Red; invh ?x23.0; invh r; bheight r \\<le> bheight ?x23.0\\<rbrakk>\n  \\<Longrightarrow> bheight (joinR ?x23.0 x r) = bheight ?x23.0\n  \\<lbrakk>\\<not> bheight l \\<le> bheight r;\n   l = \\<langle>?x21.0, ?x22.0, ?x23.0\\<rangle>; (?xa, ?y) = ?x22.0;\n   ?y = Black; invh ?x23.0; invh r; bheight r \\<le> bheight ?x23.0\\<rbrakk>\n  \\<Longrightarrow> bheight (joinR ?x23.0 x r) = bheight ?x23.0\n  invh l\n  invh r\n  bheight r \\<le> bheight l\n\ngoal (1 subgoal):\n 1. bheight (joinR l x r) = bheight l", "by(fastforce simp: bheight_baliR joinR.simps[of l x r] split!: tree.split)"], ["proof (state)\nthis:\n  bheight (joinR l x r) = bheight l\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma invh_joinR:\n  \"\\<lbrakk> invh l; invh r; bheight l \\<ge> bheight r \\<rbrakk> \\<Longrightarrow> invh (joinR l x r)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>invh l; invh r; bheight r \\<le> bheight l\\<rbrakk>\n    \\<Longrightarrow> invh (joinR l x r)", "proof (induct l x r rule: joinR.induct)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>l x r.\n       \\<lbrakk>\\<And>x21 x22 x23 xa y.\n                   \\<lbrakk>\\<not> bheight l \\<le> bheight r;\n                    l = \\<langle>x21, x22, x23\\<rangle>; (xa, y) = x22;\n                    y = Red; invh x23; invh r;\n                    bheight r \\<le> bheight x23\\<rbrakk>\n                   \\<Longrightarrow> invh (joinR x23 x r);\n        \\<And>x21 x22 x23 xa y.\n           \\<lbrakk>\\<not> bheight l \\<le> bheight r;\n            l = \\<langle>x21, x22, x23\\<rangle>; (xa, y) = x22; y = Black;\n            invh x23; invh r; bheight r \\<le> bheight x23\\<rbrakk>\n           \\<Longrightarrow> invh (joinR x23 x r);\n        invh l; invh r; bheight r \\<le> bheight l\\<rbrakk>\n       \\<Longrightarrow> invh (joinR l x r)", "case (1 l x r)"], ["proof (state)\nthis:\n  \\<lbrakk>\\<not> bheight l \\<le> bheight r;\n   l = \\<langle>?x21.0, ?x22.0, ?x23.0\\<rangle>; (?xa, ?y) = ?x22.0;\n   ?y = Red; invh ?x23.0; invh r; bheight r \\<le> bheight ?x23.0\\<rbrakk>\n  \\<Longrightarrow> invh (joinR ?x23.0 x r)\n  \\<lbrakk>\\<not> bheight l \\<le> bheight r;\n   l = \\<langle>?x21.0, ?x22.0, ?x23.0\\<rangle>; (?xa, ?y) = ?x22.0;\n   ?y = Black; invh ?x23.0; invh r; bheight r \\<le> bheight ?x23.0\\<rbrakk>\n  \\<Longrightarrow> invh (joinR ?x23.0 x r)\n  invh l\n  invh r\n  bheight r \\<le> bheight l\n\ngoal (1 subgoal):\n 1. \\<And>l x r.\n       \\<lbrakk>\\<And>x21 x22 x23 xa y.\n                   \\<lbrakk>\\<not> bheight l \\<le> bheight r;\n                    l = \\<langle>x21, x22, x23\\<rangle>; (xa, y) = x22;\n                    y = Red; invh x23; invh r;\n                    bheight r \\<le> bheight x23\\<rbrakk>\n                   \\<Longrightarrow> invh (joinR x23 x r);\n        \\<And>x21 x22 x23 xa y.\n           \\<lbrakk>\\<not> bheight l \\<le> bheight r;\n            l = \\<langle>x21, x22, x23\\<rangle>; (xa, y) = x22; y = Black;\n            invh x23; invh r; bheight r \\<le> bheight x23\\<rbrakk>\n           \\<Longrightarrow> invh (joinR x23 x r);\n        invh l; invh r; bheight r \\<le> bheight l\\<rbrakk>\n       \\<Longrightarrow> invh (joinR l x r)", "thus ?case"], ["proof (prove)\nusing this:\n  \\<lbrakk>\\<not> bheight l \\<le> bheight r;\n   l = \\<langle>?x21.0, ?x22.0, ?x23.0\\<rangle>; (?xa, ?y) = ?x22.0;\n   ?y = Red; invh ?x23.0; invh r; bheight r \\<le> bheight ?x23.0\\<rbrakk>\n  \\<Longrightarrow> invh (joinR ?x23.0 x r)\n  \\<lbrakk>\\<not> bheight l \\<le> bheight r;\n   l = \\<langle>?x21.0, ?x22.0, ?x23.0\\<rangle>; (?xa, ?y) = ?x22.0;\n   ?y = Black; invh ?x23.0; invh r; bheight r \\<le> bheight ?x23.0\\<rbrakk>\n  \\<Longrightarrow> invh (joinR ?x23.0 x r)\n  invh l\n  invh r\n  bheight r \\<le> bheight l\n\ngoal (1 subgoal):\n 1. invh (joinR l x r)", "by(fastforce simp: invh_baliR bheight_joinR joinR.simps[of l x r]\n        split!: tree.split color.split)"], ["proof (state)\nthis:\n  invh (joinR l x r)\n\ngoal:\nNo subgoals!", "qed"], ["", "(* unused *)"], ["", "lemma rbt_join: \"\\<lbrakk> invc l; invh l; invc r; invh r \\<rbrakk> \\<Longrightarrow> rbt(join l x r)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>invc l; invh l; invc r; invh r\\<rbrakk>\n    \\<Longrightarrow> rbt (Set2_Join_RBT.join l x r)", "by(simp add: invc2_joinL invc2_joinR invh_joinL invh_joinR invh_paint rbt_def\n    color_paint_Black join_def)"], ["", "text \\<open>To make sure the the black height is not increased unnecessarily:\\<close>"], ["", "lemma bheight_paint_Black: \"bheight(paint Black t) \\<le> bheight t + 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. bheight (paint Black t) \\<le> bheight t + 1", "by(cases t) auto"], ["", "lemma \"\\<lbrakk> rbt l; rbt r \\<rbrakk> \\<Longrightarrow> bheight(join l x r) \\<le> max (bheight l) (bheight r) + 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>rbt l; rbt r\\<rbrakk>\n    \\<Longrightarrow> bheight (Set2_Join_RBT.join l x r)\n                      \\<le> max (bheight l) (bheight r) + 1", "using bheight_paint_Black[of \"joinL l x r\"] bheight_paint_Black[of \"joinR l x r\"]\n  bheight_joinL[of l r x] bheight_joinR[of l r x]"], ["proof (prove)\nusing this:\n  bheight (paint Black (joinL l x r)) \\<le> bheight (joinL l x r) + 1\n  bheight (paint Black (joinR l x r)) \\<le> bheight (joinR l x r) + 1\n  \\<lbrakk>invh l; invh r; bheight l \\<le> bheight r\\<rbrakk>\n  \\<Longrightarrow> bheight (joinL l x r) = bheight r\n  \\<lbrakk>invh l; invh r; bheight r \\<le> bheight l\\<rbrakk>\n  \\<Longrightarrow> bheight (joinR l x r) = bheight l\n\ngoal (1 subgoal):\n 1. \\<lbrakk>rbt l; rbt r\\<rbrakk>\n    \\<Longrightarrow> bheight (Set2_Join_RBT.join l x r)\n                      \\<le> max (bheight l) (bheight r) + 1", "by(auto simp: max_def rbt_def join_def)"], ["", "subsubsection \"Inorder properties\""], ["", "text \"Currently unused. Instead \\<^const>\\<open>set_tree\\<close> and \\<^const>\\<open>bst\\<close> properties are proved directly.\""], ["", "lemma inorder_joinL: \"bheight l \\<le> bheight r \\<Longrightarrow> inorder(joinL l x r) = inorder l @ x # inorder r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. bheight l \\<le> bheight r \\<Longrightarrow>\n    Tree2.inorder (joinL l x r) = Tree2.inorder l @ x # Tree2.inorder r", "proof(induction l x r rule: joinL.induct)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>l x r.\n       \\<lbrakk>\\<And>x21 x22 x23 xa y.\n                   \\<lbrakk>\\<not> bheight r \\<le> bheight l;\n                    r = \\<langle>x21, x22, x23\\<rangle>; (xa, y) = x22;\n                    y = Red; bheight l \\<le> bheight x21\\<rbrakk>\n                   \\<Longrightarrow> Tree2.inorder (joinL l x x21) =\n                                     Tree2.inorder l @\n                                     x # Tree2.inorder x21;\n        \\<And>x21 x22 x23 xa y.\n           \\<lbrakk>\\<not> bheight r \\<le> bheight l;\n            r = \\<langle>x21, x22, x23\\<rangle>; (xa, y) = x22; y = Black;\n            bheight l \\<le> bheight x21\\<rbrakk>\n           \\<Longrightarrow> Tree2.inorder (joinL l x x21) =\n                             Tree2.inorder l @ x # Tree2.inorder x21;\n        bheight l \\<le> bheight r\\<rbrakk>\n       \\<Longrightarrow> Tree2.inorder (joinL l x r) =\n                         Tree2.inorder l @ x # Tree2.inorder r", "case (1 l x r)"], ["proof (state)\nthis:\n  \\<lbrakk>\\<not> bheight r \\<le> bheight l;\n   r = \\<langle>?x21.0, ?x22.0, ?x23.0\\<rangle>; (?xa, ?y) = ?x22.0;\n   ?y = Red; bheight l \\<le> bheight ?x21.0\\<rbrakk>\n  \\<Longrightarrow> Tree2.inorder (joinL l x ?x21.0) =\n                    Tree2.inorder l @ x # Tree2.inorder ?x21.0\n  \\<lbrakk>\\<not> bheight r \\<le> bheight l;\n   r = \\<langle>?x21.0, ?x22.0, ?x23.0\\<rangle>; (?xa, ?y) = ?x22.0;\n   ?y = Black; bheight l \\<le> bheight ?x21.0\\<rbrakk>\n  \\<Longrightarrow> Tree2.inorder (joinL l x ?x21.0) =\n                    Tree2.inorder l @ x # Tree2.inorder ?x21.0\n  bheight l \\<le> bheight r\n\ngoal (1 subgoal):\n 1. \\<And>l x r.\n       \\<lbrakk>\\<And>x21 x22 x23 xa y.\n                   \\<lbrakk>\\<not> bheight r \\<le> bheight l;\n                    r = \\<langle>x21, x22, x23\\<rangle>; (xa, y) = x22;\n                    y = Red; bheight l \\<le> bheight x21\\<rbrakk>\n                   \\<Longrightarrow> Tree2.inorder (joinL l x x21) =\n                                     Tree2.inorder l @\n                                     x # Tree2.inorder x21;\n        \\<And>x21 x22 x23 xa y.\n           \\<lbrakk>\\<not> bheight r \\<le> bheight l;\n            r = \\<langle>x21, x22, x23\\<rangle>; (xa, y) = x22; y = Black;\n            bheight l \\<le> bheight x21\\<rbrakk>\n           \\<Longrightarrow> Tree2.inorder (joinL l x x21) =\n                             Tree2.inorder l @ x # Tree2.inorder x21;\n        bheight l \\<le> bheight r\\<rbrakk>\n       \\<Longrightarrow> Tree2.inorder (joinL l x r) =\n                         Tree2.inorder l @ x # Tree2.inorder r", "thus ?case"], ["proof (prove)\nusing this:\n  \\<lbrakk>\\<not> bheight r \\<le> bheight l;\n   r = \\<langle>?x21.0, ?x22.0, ?x23.0\\<rangle>; (?xa, ?y) = ?x22.0;\n   ?y = Red; bheight l \\<le> bheight ?x21.0\\<rbrakk>\n  \\<Longrightarrow> Tree2.inorder (joinL l x ?x21.0) =\n                    Tree2.inorder l @ x # Tree2.inorder ?x21.0\n  \\<lbrakk>\\<not> bheight r \\<le> bheight l;\n   r = \\<langle>?x21.0, ?x22.0, ?x23.0\\<rangle>; (?xa, ?y) = ?x22.0;\n   ?y = Black; bheight l \\<le> bheight ?x21.0\\<rbrakk>\n  \\<Longrightarrow> Tree2.inorder (joinL l x ?x21.0) =\n                    Tree2.inorder l @ x # Tree2.inorder ?x21.0\n  bheight l \\<le> bheight r\n\ngoal (1 subgoal):\n 1. Tree2.inorder (joinL l x r) = Tree2.inorder l @ x # Tree2.inorder r", "by(auto simp: inorder_baliL joinL.simps[of l x r] split!: tree.splits color.splits)"], ["proof (state)\nthis:\n  Tree2.inorder (joinL l x r) = Tree2.inorder l @ x # Tree2.inorder r\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma inorder_joinR:\n  \"inorder(joinR l x r) = inorder l @ x # inorder r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Tree2.inorder (joinR l x r) = Tree2.inorder l @ x # Tree2.inorder r", "proof(induction l x r rule: joinR.induct)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>l x r.\n       \\<lbrakk>\\<And>x21 x22 x23 xa y.\n                   \\<lbrakk>\\<not> bheight l \\<le> bheight r;\n                    l = \\<langle>x21, x22, x23\\<rangle>; (xa, y) = x22;\n                    y = Red\\<rbrakk>\n                   \\<Longrightarrow> Tree2.inorder (joinR x23 x r) =\n                                     Tree2.inorder x23 @\n                                     x # Tree2.inorder r;\n        \\<And>x21 x22 x23 xa y.\n           \\<lbrakk>\\<not> bheight l \\<le> bheight r;\n            l = \\<langle>x21, x22, x23\\<rangle>; (xa, y) = x22;\n            y = Black\\<rbrakk>\n           \\<Longrightarrow> Tree2.inorder (joinR x23 x r) =\n                             Tree2.inorder x23 @\n                             x # Tree2.inorder r\\<rbrakk>\n       \\<Longrightarrow> Tree2.inorder (joinR l x r) =\n                         Tree2.inorder l @ x # Tree2.inorder r", "case (1 l x r)"], ["proof (state)\nthis:\n  \\<lbrakk>\\<not> bheight l \\<le> bheight r;\n   l = \\<langle>?x21.0, ?x22.0, ?x23.0\\<rangle>; (?xa, ?y) = ?x22.0;\n   ?y = Red\\<rbrakk>\n  \\<Longrightarrow> Tree2.inorder (joinR ?x23.0 x r) =\n                    Tree2.inorder ?x23.0 @ x # Tree2.inorder r\n  \\<lbrakk>\\<not> bheight l \\<le> bheight r;\n   l = \\<langle>?x21.0, ?x22.0, ?x23.0\\<rangle>; (?xa, ?y) = ?x22.0;\n   ?y = Black\\<rbrakk>\n  \\<Longrightarrow> Tree2.inorder (joinR ?x23.0 x r) =\n                    Tree2.inorder ?x23.0 @ x # Tree2.inorder r\n\ngoal (1 subgoal):\n 1. \\<And>l x r.\n       \\<lbrakk>\\<And>x21 x22 x23 xa y.\n                   \\<lbrakk>\\<not> bheight l \\<le> bheight r;\n                    l = \\<langle>x21, x22, x23\\<rangle>; (xa, y) = x22;\n                    y = Red\\<rbrakk>\n                   \\<Longrightarrow> Tree2.inorder (joinR x23 x r) =\n                                     Tree2.inorder x23 @\n                                     x # Tree2.inorder r;\n        \\<And>x21 x22 x23 xa y.\n           \\<lbrakk>\\<not> bheight l \\<le> bheight r;\n            l = \\<langle>x21, x22, x23\\<rangle>; (xa, y) = x22;\n            y = Black\\<rbrakk>\n           \\<Longrightarrow> Tree2.inorder (joinR x23 x r) =\n                             Tree2.inorder x23 @\n                             x # Tree2.inorder r\\<rbrakk>\n       \\<Longrightarrow> Tree2.inorder (joinR l x r) =\n                         Tree2.inorder l @ x # Tree2.inorder r", "thus ?case"], ["proof (prove)\nusing this:\n  \\<lbrakk>\\<not> bheight l \\<le> bheight r;\n   l = \\<langle>?x21.0, ?x22.0, ?x23.0\\<rangle>; (?xa, ?y) = ?x22.0;\n   ?y = Red\\<rbrakk>\n  \\<Longrightarrow> Tree2.inorder (joinR ?x23.0 x r) =\n                    Tree2.inorder ?x23.0 @ x # Tree2.inorder r\n  \\<lbrakk>\\<not> bheight l \\<le> bheight r;\n   l = \\<langle>?x21.0, ?x22.0, ?x23.0\\<rangle>; (?xa, ?y) = ?x22.0;\n   ?y = Black\\<rbrakk>\n  \\<Longrightarrow> Tree2.inorder (joinR ?x23.0 x r) =\n                    Tree2.inorder ?x23.0 @ x # Tree2.inorder r\n\ngoal (1 subgoal):\n 1. Tree2.inorder (joinR l x r) = Tree2.inorder l @ x # Tree2.inorder r", "by (force simp: inorder_baliR joinR.simps[of l x r] split!: tree.splits color.splits)"], ["proof (state)\nthis:\n  Tree2.inorder (joinR l x r) = Tree2.inorder l @ x # Tree2.inorder r\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma \"inorder(join l x r) = inorder l @ x # inorder r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Tree2.inorder (Set2_Join_RBT.join l x r) =\n    Tree2.inorder l @ x # Tree2.inorder r", "by(auto simp: inorder_joinL inorder_joinR inorder_paint join_def\n      split!: tree.splits color.splits if_splits\n      dest!: arg_cong[where f = inorder])"], ["", "subsubsection \"Set and bst properties\""], ["", "lemma set_baliL:\n  \"set_tree(baliL l a r) = set_tree l \\<union> {a} \\<union> set_tree r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Tree2.set_tree (baliL l a r) =\n    Tree2.set_tree l \\<union> {a} \\<union> Tree2.set_tree r", "by(cases \"(l,a,r)\" rule: baliL.cases) (auto)"], ["", "lemma set_joinL:\n  \"bheight l \\<le> bheight r \\<Longrightarrow> set_tree (joinL l x r) = set_tree l \\<union> {x} \\<union> set_tree r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. bheight l \\<le> bheight r \\<Longrightarrow>\n    Tree2.set_tree (joinL l x r) =\n    Tree2.set_tree l \\<union> {x} \\<union> Tree2.set_tree r", "proof(induction l x r rule: joinL.induct)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>l x r.\n       \\<lbrakk>\\<And>x21 x22 x23 xa y.\n                   \\<lbrakk>\\<not> bheight r \\<le> bheight l;\n                    r = \\<langle>x21, x22, x23\\<rangle>; (xa, y) = x22;\n                    y = Red; bheight l \\<le> bheight x21\\<rbrakk>\n                   \\<Longrightarrow> Tree2.set_tree (joinL l x x21) =\n                                     Tree2.set_tree l \\<union> {x} \\<union>\n                                     Tree2.set_tree x21;\n        \\<And>x21 x22 x23 xa y.\n           \\<lbrakk>\\<not> bheight r \\<le> bheight l;\n            r = \\<langle>x21, x22, x23\\<rangle>; (xa, y) = x22; y = Black;\n            bheight l \\<le> bheight x21\\<rbrakk>\n           \\<Longrightarrow> Tree2.set_tree (joinL l x x21) =\n                             Tree2.set_tree l \\<union> {x} \\<union>\n                             Tree2.set_tree x21;\n        bheight l \\<le> bheight r\\<rbrakk>\n       \\<Longrightarrow> Tree2.set_tree (joinL l x r) =\n                         Tree2.set_tree l \\<union> {x} \\<union>\n                         Tree2.set_tree r", "case (1 l x r)"], ["proof (state)\nthis:\n  \\<lbrakk>\\<not> bheight r \\<le> bheight l;\n   r = \\<langle>?x21.0, ?x22.0, ?x23.0\\<rangle>; (?xa, ?y) = ?x22.0;\n   ?y = Red; bheight l \\<le> bheight ?x21.0\\<rbrakk>\n  \\<Longrightarrow> Tree2.set_tree (joinL l x ?x21.0) =\n                    Tree2.set_tree l \\<union> {x} \\<union>\n                    Tree2.set_tree ?x21.0\n  \\<lbrakk>\\<not> bheight r \\<le> bheight l;\n   r = \\<langle>?x21.0, ?x22.0, ?x23.0\\<rangle>; (?xa, ?y) = ?x22.0;\n   ?y = Black; bheight l \\<le> bheight ?x21.0\\<rbrakk>\n  \\<Longrightarrow> Tree2.set_tree (joinL l x ?x21.0) =\n                    Tree2.set_tree l \\<union> {x} \\<union>\n                    Tree2.set_tree ?x21.0\n  bheight l \\<le> bheight r\n\ngoal (1 subgoal):\n 1. \\<And>l x r.\n       \\<lbrakk>\\<And>x21 x22 x23 xa y.\n                   \\<lbrakk>\\<not> bheight r \\<le> bheight l;\n                    r = \\<langle>x21, x22, x23\\<rangle>; (xa, y) = x22;\n                    y = Red; bheight l \\<le> bheight x21\\<rbrakk>\n                   \\<Longrightarrow> Tree2.set_tree (joinL l x x21) =\n                                     Tree2.set_tree l \\<union> {x} \\<union>\n                                     Tree2.set_tree x21;\n        \\<And>x21 x22 x23 xa y.\n           \\<lbrakk>\\<not> bheight r \\<le> bheight l;\n            r = \\<langle>x21, x22, x23\\<rangle>; (xa, y) = x22; y = Black;\n            bheight l \\<le> bheight x21\\<rbrakk>\n           \\<Longrightarrow> Tree2.set_tree (joinL l x x21) =\n                             Tree2.set_tree l \\<union> {x} \\<union>\n                             Tree2.set_tree x21;\n        bheight l \\<le> bheight r\\<rbrakk>\n       \\<Longrightarrow> Tree2.set_tree (joinL l x r) =\n                         Tree2.set_tree l \\<union> {x} \\<union>\n                         Tree2.set_tree r", "thus ?case"], ["proof (prove)\nusing this:\n  \\<lbrakk>\\<not> bheight r \\<le> bheight l;\n   r = \\<langle>?x21.0, ?x22.0, ?x23.0\\<rangle>; (?xa, ?y) = ?x22.0;\n   ?y = Red; bheight l \\<le> bheight ?x21.0\\<rbrakk>\n  \\<Longrightarrow> Tree2.set_tree (joinL l x ?x21.0) =\n                    Tree2.set_tree l \\<union> {x} \\<union>\n                    Tree2.set_tree ?x21.0\n  \\<lbrakk>\\<not> bheight r \\<le> bheight l;\n   r = \\<langle>?x21.0, ?x22.0, ?x23.0\\<rangle>; (?xa, ?y) = ?x22.0;\n   ?y = Black; bheight l \\<le> bheight ?x21.0\\<rbrakk>\n  \\<Longrightarrow> Tree2.set_tree (joinL l x ?x21.0) =\n                    Tree2.set_tree l \\<union> {x} \\<union>\n                    Tree2.set_tree ?x21.0\n  bheight l \\<le> bheight r\n\ngoal (1 subgoal):\n 1. Tree2.set_tree (joinL l x r) =\n    Tree2.set_tree l \\<union> {x} \\<union> Tree2.set_tree r", "by(auto simp: set_baliL joinL.simps[of l x r] split!: tree.splits color.splits)"], ["proof (state)\nthis:\n  Tree2.set_tree (joinL l x r) =\n  Tree2.set_tree l \\<union> {x} \\<union> Tree2.set_tree r\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma set_baliR:\n  \"set_tree(baliR l a r) = set_tree l \\<union> {a} \\<union> set_tree r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Tree2.set_tree (baliR l a r) =\n    Tree2.set_tree l \\<union> {a} \\<union> Tree2.set_tree r", "by(cases \"(l,a,r)\" rule: baliR.cases) (auto)"], ["", "lemma set_joinR:\n  \"set_tree (joinR l x r) = set_tree l \\<union> {x} \\<union> set_tree r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Tree2.set_tree (joinR l x r) =\n    Tree2.set_tree l \\<union> {x} \\<union> Tree2.set_tree r", "proof(induction l x r rule: joinR.induct)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>l x r.\n       \\<lbrakk>\\<And>x21 x22 x23 xa y.\n                   \\<lbrakk>\\<not> bheight l \\<le> bheight r;\n                    l = \\<langle>x21, x22, x23\\<rangle>; (xa, y) = x22;\n                    y = Red\\<rbrakk>\n                   \\<Longrightarrow> Tree2.set_tree (joinR x23 x r) =\n                                     Tree2.set_tree x23 \\<union>\n                                     {x} \\<union>\n                                     Tree2.set_tree r;\n        \\<And>x21 x22 x23 xa y.\n           \\<lbrakk>\\<not> bheight l \\<le> bheight r;\n            l = \\<langle>x21, x22, x23\\<rangle>; (xa, y) = x22;\n            y = Black\\<rbrakk>\n           \\<Longrightarrow> Tree2.set_tree (joinR x23 x r) =\n                             Tree2.set_tree x23 \\<union> {x} \\<union>\n                             Tree2.set_tree r\\<rbrakk>\n       \\<Longrightarrow> Tree2.set_tree (joinR l x r) =\n                         Tree2.set_tree l \\<union> {x} \\<union>\n                         Tree2.set_tree r", "case (1 l x r)"], ["proof (state)\nthis:\n  \\<lbrakk>\\<not> bheight l \\<le> bheight r;\n   l = \\<langle>?x21.0, ?x22.0, ?x23.0\\<rangle>; (?xa, ?y) = ?x22.0;\n   ?y = Red\\<rbrakk>\n  \\<Longrightarrow> Tree2.set_tree (joinR ?x23.0 x r) =\n                    Tree2.set_tree ?x23.0 \\<union> {x} \\<union>\n                    Tree2.set_tree r\n  \\<lbrakk>\\<not> bheight l \\<le> bheight r;\n   l = \\<langle>?x21.0, ?x22.0, ?x23.0\\<rangle>; (?xa, ?y) = ?x22.0;\n   ?y = Black\\<rbrakk>\n  \\<Longrightarrow> Tree2.set_tree (joinR ?x23.0 x r) =\n                    Tree2.set_tree ?x23.0 \\<union> {x} \\<union>\n                    Tree2.set_tree r\n\ngoal (1 subgoal):\n 1. \\<And>l x r.\n       \\<lbrakk>\\<And>x21 x22 x23 xa y.\n                   \\<lbrakk>\\<not> bheight l \\<le> bheight r;\n                    l = \\<langle>x21, x22, x23\\<rangle>; (xa, y) = x22;\n                    y = Red\\<rbrakk>\n                   \\<Longrightarrow> Tree2.set_tree (joinR x23 x r) =\n                                     Tree2.set_tree x23 \\<union>\n                                     {x} \\<union>\n                                     Tree2.set_tree r;\n        \\<And>x21 x22 x23 xa y.\n           \\<lbrakk>\\<not> bheight l \\<le> bheight r;\n            l = \\<langle>x21, x22, x23\\<rangle>; (xa, y) = x22;\n            y = Black\\<rbrakk>\n           \\<Longrightarrow> Tree2.set_tree (joinR x23 x r) =\n                             Tree2.set_tree x23 \\<union> {x} \\<union>\n                             Tree2.set_tree r\\<rbrakk>\n       \\<Longrightarrow> Tree2.set_tree (joinR l x r) =\n                         Tree2.set_tree l \\<union> {x} \\<union>\n                         Tree2.set_tree r", "thus ?case"], ["proof (prove)\nusing this:\n  \\<lbrakk>\\<not> bheight l \\<le> bheight r;\n   l = \\<langle>?x21.0, ?x22.0, ?x23.0\\<rangle>; (?xa, ?y) = ?x22.0;\n   ?y = Red\\<rbrakk>\n  \\<Longrightarrow> Tree2.set_tree (joinR ?x23.0 x r) =\n                    Tree2.set_tree ?x23.0 \\<union> {x} \\<union>\n                    Tree2.set_tree r\n  \\<lbrakk>\\<not> bheight l \\<le> bheight r;\n   l = \\<langle>?x21.0, ?x22.0, ?x23.0\\<rangle>; (?xa, ?y) = ?x22.0;\n   ?y = Black\\<rbrakk>\n  \\<Longrightarrow> Tree2.set_tree (joinR ?x23.0 x r) =\n                    Tree2.set_tree ?x23.0 \\<union> {x} \\<union>\n                    Tree2.set_tree r\n\ngoal (1 subgoal):\n 1. Tree2.set_tree (joinR l x r) =\n    Tree2.set_tree l \\<union> {x} \\<union> Tree2.set_tree r", "by(force simp: set_baliR joinR.simps[of l x r] split!: tree.splits color.splits)"], ["proof (state)\nthis:\n  Tree2.set_tree (joinR l x r) =\n  Tree2.set_tree l \\<union> {x} \\<union> Tree2.set_tree r\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma set_paint: \"set_tree (paint c t) = set_tree t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Tree2.set_tree (paint c t) = Tree2.set_tree t", "by (cases t) auto"], ["", "lemma set_join: \"set_tree (join l x r) = set_tree l \\<union> {x} \\<union> set_tree r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Tree2.set_tree (Set2_Join_RBT.join l x r) =\n    Tree2.set_tree l \\<union> {x} \\<union> Tree2.set_tree r", "by(simp add: set_joinL set_joinR set_paint join_def)"], ["", "lemma bst_baliL:\n  \"\\<lbrakk>bst l; bst r; \\<forall>x\\<in>set_tree l. x < a; \\<forall>x\\<in>set_tree r. a < x\\<rbrakk>\n   \\<Longrightarrow> bst (baliL l a r)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Tree2.bst l; Tree2.bst r;\n     \\<forall>x\\<in>Tree2.set_tree l. x < a;\n     \\<forall>x\\<in>Tree2.set_tree r. a < x\\<rbrakk>\n    \\<Longrightarrow> Tree2.bst (baliL l a r)", "by(cases \"(l,a,r)\" rule: baliL.cases) (auto simp: ball_Un)"], ["", "lemma bst_baliR:\n  \"\\<lbrakk>bst l; bst r; \\<forall>x\\<in>set_tree l. x < a; \\<forall>x\\<in>set_tree r. a < x\\<rbrakk>\n   \\<Longrightarrow> bst (baliR l a r)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Tree2.bst l; Tree2.bst r;\n     \\<forall>x\\<in>Tree2.set_tree l. x < a;\n     \\<forall>x\\<in>Tree2.set_tree r. a < x\\<rbrakk>\n    \\<Longrightarrow> Tree2.bst (baliR l a r)", "by(cases \"(l,a,r)\" rule: baliR.cases) (auto simp: ball_Un)"], ["", "lemma bst_joinL:\n  \"\\<lbrakk>bst (Node l (a, n) r); bheight l \\<le> bheight r\\<rbrakk>\n  \\<Longrightarrow> bst (joinL l a r)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Tree2.bst \\<langle>l, (a, n), r\\<rangle>;\n     bheight l \\<le> bheight r\\<rbrakk>\n    \\<Longrightarrow> Tree2.bst (joinL l a r)", "proof(induction l a r rule: joinL.induct)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>l x r.\n       \\<lbrakk>\\<And>x21 x22 x23 xa y.\n                   \\<lbrakk>\\<not> bheight r \\<le> bheight l;\n                    r = \\<langle>x21, x22, x23\\<rangle>; (xa, y) = x22;\n                    y = Red; Tree2.bst \\<langle>l, (x, n), x21\\<rangle>;\n                    bheight l \\<le> bheight x21\\<rbrakk>\n                   \\<Longrightarrow> Tree2.bst (joinL l x x21);\n        \\<And>x21 x22 x23 xa y.\n           \\<lbrakk>\\<not> bheight r \\<le> bheight l;\n            r = \\<langle>x21, x22, x23\\<rangle>; (xa, y) = x22; y = Black;\n            Tree2.bst \\<langle>l, (x, n), x21\\<rangle>;\n            bheight l \\<le> bheight x21\\<rbrakk>\n           \\<Longrightarrow> Tree2.bst (joinL l x x21);\n        Tree2.bst \\<langle>l, (x, n), r\\<rangle>;\n        bheight l \\<le> bheight r\\<rbrakk>\n       \\<Longrightarrow> Tree2.bst (joinL l x r)", "case (1 l a r)"], ["proof (state)\nthis:\n  \\<lbrakk>\\<not> bheight r \\<le> bheight l;\n   r = \\<langle>?x21.0, ?x22.0, ?x23.0\\<rangle>; (?xa, ?y) = ?x22.0;\n   ?y = Red; Tree2.bst \\<langle>l, (a, n), ?x21.0\\<rangle>;\n   bheight l \\<le> bheight ?x21.0\\<rbrakk>\n  \\<Longrightarrow> Tree2.bst (joinL l a ?x21.0)\n  \\<lbrakk>\\<not> bheight r \\<le> bheight l;\n   r = \\<langle>?x21.0, ?x22.0, ?x23.0\\<rangle>; (?xa, ?y) = ?x22.0;\n   ?y = Black; Tree2.bst \\<langle>l, (a, n), ?x21.0\\<rangle>;\n   bheight l \\<le> bheight ?x21.0\\<rbrakk>\n  \\<Longrightarrow> Tree2.bst (joinL l a ?x21.0)\n  Tree2.bst \\<langle>l, (a, n), r\\<rangle>\n  bheight l \\<le> bheight r\n\ngoal (1 subgoal):\n 1. \\<And>l x r.\n       \\<lbrakk>\\<And>x21 x22 x23 xa y.\n                   \\<lbrakk>\\<not> bheight r \\<le> bheight l;\n                    r = \\<langle>x21, x22, x23\\<rangle>; (xa, y) = x22;\n                    y = Red; Tree2.bst \\<langle>l, (x, n), x21\\<rangle>;\n                    bheight l \\<le> bheight x21\\<rbrakk>\n                   \\<Longrightarrow> Tree2.bst (joinL l x x21);\n        \\<And>x21 x22 x23 xa y.\n           \\<lbrakk>\\<not> bheight r \\<le> bheight l;\n            r = \\<langle>x21, x22, x23\\<rangle>; (xa, y) = x22; y = Black;\n            Tree2.bst \\<langle>l, (x, n), x21\\<rangle>;\n            bheight l \\<le> bheight x21\\<rbrakk>\n           \\<Longrightarrow> Tree2.bst (joinL l x x21);\n        Tree2.bst \\<langle>l, (x, n), r\\<rangle>;\n        bheight l \\<le> bheight r\\<rbrakk>\n       \\<Longrightarrow> Tree2.bst (joinL l x r)", "thus ?case"], ["proof (prove)\nusing this:\n  \\<lbrakk>\\<not> bheight r \\<le> bheight l;\n   r = \\<langle>?x21.0, ?x22.0, ?x23.0\\<rangle>; (?xa, ?y) = ?x22.0;\n   ?y = Red; Tree2.bst \\<langle>l, (a, n), ?x21.0\\<rangle>;\n   bheight l \\<le> bheight ?x21.0\\<rbrakk>\n  \\<Longrightarrow> Tree2.bst (joinL l a ?x21.0)\n  \\<lbrakk>\\<not> bheight r \\<le> bheight l;\n   r = \\<langle>?x21.0, ?x22.0, ?x23.0\\<rangle>; (?xa, ?y) = ?x22.0;\n   ?y = Black; Tree2.bst \\<langle>l, (a, n), ?x21.0\\<rangle>;\n   bheight l \\<le> bheight ?x21.0\\<rbrakk>\n  \\<Longrightarrow> Tree2.bst (joinL l a ?x21.0)\n  Tree2.bst \\<langle>l, (a, n), r\\<rangle>\n  bheight l \\<le> bheight r\n\ngoal (1 subgoal):\n 1. Tree2.bst (joinL l a r)", "by(auto simp: set_baliL joinL.simps[of l a r] set_joinL ball_Un intro!: bst_baliL\n        split!: tree.splits color.splits)"], ["proof (state)\nthis:\n  Tree2.bst (joinL l a r)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma bst_joinR:\n  \"\\<lbrakk>bst l; bst r; \\<forall>x\\<in>set_tree l. x < a; \\<forall>y\\<in>set_tree r. a < y \\<rbrakk>\n  \\<Longrightarrow> bst (joinR l a r)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Tree2.bst l; Tree2.bst r;\n     \\<forall>x\\<in>Tree2.set_tree l. x < a;\n     \\<forall>y\\<in>Tree2.set_tree r. a < y\\<rbrakk>\n    \\<Longrightarrow> Tree2.bst (joinR l a r)", "proof(induction l a r rule: joinR.induct)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>l x r.\n       \\<lbrakk>\\<And>x21 x22 x23 xa y.\n                   \\<lbrakk>\\<not> bheight l \\<le> bheight r;\n                    l = \\<langle>x21, x22, x23\\<rangle>; (xa, y) = x22;\n                    y = Red; Tree2.bst x23; Tree2.bst r;\n                    \\<forall>xa\\<in>Tree2.set_tree x23. xa < x;\n                    Ball (Tree2.set_tree r) ((<) x)\\<rbrakk>\n                   \\<Longrightarrow> Tree2.bst (joinR x23 x r);\n        \\<And>x21 x22 x23 xa y.\n           \\<lbrakk>\\<not> bheight l \\<le> bheight r;\n            l = \\<langle>x21, x22, x23\\<rangle>; (xa, y) = x22; y = Black;\n            Tree2.bst x23; Tree2.bst r;\n            \\<forall>xa\\<in>Tree2.set_tree x23. xa < x;\n            Ball (Tree2.set_tree r) ((<) x)\\<rbrakk>\n           \\<Longrightarrow> Tree2.bst (joinR x23 x r);\n        Tree2.bst l; Tree2.bst r; \\<forall>xa\\<in>Tree2.set_tree l. xa < x;\n        Ball (Tree2.set_tree r) ((<) x)\\<rbrakk>\n       \\<Longrightarrow> Tree2.bst (joinR l x r)", "case (1 l a r)"], ["proof (state)\nthis:\n  \\<lbrakk>\\<not> bheight l \\<le> bheight r;\n   l = \\<langle>?x21.0, ?x22.0, ?x23.0\\<rangle>; (?xa, ?y) = ?x22.0;\n   ?y = Red; Tree2.bst ?x23.0; Tree2.bst r;\n   \\<forall>x\\<in>Tree2.set_tree ?x23.0. x < a;\n   \\<forall>a\\<in>Tree2.set_tree r. a < a\\<rbrakk>\n  \\<Longrightarrow> Tree2.bst (joinR ?x23.0 a r)\n  \\<lbrakk>\\<not> bheight l \\<le> bheight r;\n   l = \\<langle>?x21.0, ?x22.0, ?x23.0\\<rangle>; (?xa, ?y) = ?x22.0;\n   ?y = Black; Tree2.bst ?x23.0; Tree2.bst r;\n   \\<forall>x\\<in>Tree2.set_tree ?x23.0. x < a;\n   \\<forall>a\\<in>Tree2.set_tree r. a < a\\<rbrakk>\n  \\<Longrightarrow> Tree2.bst (joinR ?x23.0 a r)\n  Tree2.bst l\n  Tree2.bst r\n  \\<forall>x\\<in>Tree2.set_tree l. x < a\n  \\<forall>a\\<in>Tree2.set_tree r. a < a\n\ngoal (1 subgoal):\n 1. \\<And>l x r.\n       \\<lbrakk>\\<And>x21 x22 x23 xa y.\n                   \\<lbrakk>\\<not> bheight l \\<le> bheight r;\n                    l = \\<langle>x21, x22, x23\\<rangle>; (xa, y) = x22;\n                    y = Red; Tree2.bst x23; Tree2.bst r;\n                    \\<forall>xa\\<in>Tree2.set_tree x23. xa < x;\n                    Ball (Tree2.set_tree r) ((<) x)\\<rbrakk>\n                   \\<Longrightarrow> Tree2.bst (joinR x23 x r);\n        \\<And>x21 x22 x23 xa y.\n           \\<lbrakk>\\<not> bheight l \\<le> bheight r;\n            l = \\<langle>x21, x22, x23\\<rangle>; (xa, y) = x22; y = Black;\n            Tree2.bst x23; Tree2.bst r;\n            \\<forall>xa\\<in>Tree2.set_tree x23. xa < x;\n            Ball (Tree2.set_tree r) ((<) x)\\<rbrakk>\n           \\<Longrightarrow> Tree2.bst (joinR x23 x r);\n        Tree2.bst l; Tree2.bst r; \\<forall>xa\\<in>Tree2.set_tree l. xa < x;\n        Ball (Tree2.set_tree r) ((<) x)\\<rbrakk>\n       \\<Longrightarrow> Tree2.bst (joinR l x r)", "thus ?case"], ["proof (prove)\nusing this:\n  \\<lbrakk>\\<not> bheight l \\<le> bheight r;\n   l = \\<langle>?x21.0, ?x22.0, ?x23.0\\<rangle>; (?xa, ?y) = ?x22.0;\n   ?y = Red; Tree2.bst ?x23.0; Tree2.bst r;\n   \\<forall>x\\<in>Tree2.set_tree ?x23.0. x < a;\n   \\<forall>a\\<in>Tree2.set_tree r. a < a\\<rbrakk>\n  \\<Longrightarrow> Tree2.bst (joinR ?x23.0 a r)\n  \\<lbrakk>\\<not> bheight l \\<le> bheight r;\n   l = \\<langle>?x21.0, ?x22.0, ?x23.0\\<rangle>; (?xa, ?y) = ?x22.0;\n   ?y = Black; Tree2.bst ?x23.0; Tree2.bst r;\n   \\<forall>x\\<in>Tree2.set_tree ?x23.0. x < a;\n   \\<forall>a\\<in>Tree2.set_tree r. a < a\\<rbrakk>\n  \\<Longrightarrow> Tree2.bst (joinR ?x23.0 a r)\n  Tree2.bst l\n  Tree2.bst r\n  \\<forall>x\\<in>Tree2.set_tree l. x < a\n  \\<forall>a\\<in>Tree2.set_tree r. a < a\n\ngoal (1 subgoal):\n 1. Tree2.bst (joinR l a r)", "by(auto simp: set_baliR joinR.simps[of l a r] set_joinR ball_Un intro!: bst_baliR\n        split!: tree.splits color.splits)"], ["proof (state)\nthis:\n  Tree2.bst (joinR l a r)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma bst_paint: \"bst (paint c t) = bst t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Tree2.bst (paint c t) = Tree2.bst t", "by(cases t) auto"], ["", "lemma bst_join:\n  \"bst (Node l (a, n) r) \\<Longrightarrow> bst (join l a r)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Tree2.bst \\<langle>l, (a, n), r\\<rangle> \\<Longrightarrow>\n    Tree2.bst (Set2_Join_RBT.join l a r)", "by(auto simp: bst_paint bst_joinL bst_joinR join_def)"], ["", "lemma inv_join: \"\\<lbrakk> invc l; invh l; invc r; invh r \\<rbrakk> \\<Longrightarrow> invc(join l x r) \\<and> invh(join l x r)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>invc l; invh l; invc r; invh r\\<rbrakk>\n    \\<Longrightarrow> invc (Set2_Join_RBT.join l x r) \\<and>\n                      invh (Set2_Join_RBT.join l x r)", "by (simp add: invc2_joinL invc2_joinR invh_joinL invh_joinR invh_paint join_def)"], ["", "subsubsection \"Interpretation of \\<^locale>\\<open>Set2_Join\\<close> with Red-Black Tree\""], ["", "global_interpretation RBT: Set2_Join\nwhere join = join and inv = \"\\<lambda>t. invc t \\<and> invh t\"\ndefines insert_rbt = RBT.insert and delete_rbt = RBT.delete and split_rbt = RBT.split\nand join2_rbt = RBT.join2 and split_min_rbt = RBT.split_min and inter_rbt = RBT.inter"], ["proof (prove)\ngoal (1 subgoal):\n 1. Set2_Join Set2_Join_RBT.join (\\<lambda>t. invc t \\<and> invh t)", "proof (standard, goal_cases)"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>l a r.\n       Tree2.set_tree (Set2_Join_RBT.join l a r) =\n       Tree2.set_tree l \\<union> {a} \\<union> Tree2.set_tree r\n 2. \\<And>l a b r.\n       Tree2.bst \\<langle>l, (a, b), r\\<rangle> \\<Longrightarrow>\n       Tree2.bst (Set2_Join_RBT.join l a r)\n 3. invc \\<langle>\\<rangle> \\<and> invh \\<langle>\\<rangle>\n 4. \\<And>l r a.\n       \\<lbrakk>invc l \\<and> invh l; invc r \\<and> invh r\\<rbrakk>\n       \\<Longrightarrow> invc (Set2_Join_RBT.join l a r) \\<and>\n                         invh (Set2_Join_RBT.join l a r)\n 5. \\<And>l a b r.\n       invc \\<langle>l, (a, b), r\\<rangle> \\<and>\n       invh \\<langle>l, (a, b), r\\<rangle> \\<Longrightarrow>\n       (invc l \\<and> invh l) \\<and> invc r \\<and> invh r", "case 1"], ["proof (state)\nthis:\n  \n\ngoal (5 subgoals):\n 1. \\<And>l a r.\n       Tree2.set_tree (Set2_Join_RBT.join l a r) =\n       Tree2.set_tree l \\<union> {a} \\<union> Tree2.set_tree r\n 2. \\<And>l a b r.\n       Tree2.bst \\<langle>l, (a, b), r\\<rangle> \\<Longrightarrow>\n       Tree2.bst (Set2_Join_RBT.join l a r)\n 3. invc \\<langle>\\<rangle> \\<and> invh \\<langle>\\<rangle>\n 4. \\<And>l r a.\n       \\<lbrakk>invc l \\<and> invh l; invc r \\<and> invh r\\<rbrakk>\n       \\<Longrightarrow> invc (Set2_Join_RBT.join l a r) \\<and>\n                         invh (Set2_Join_RBT.join l a r)\n 5. \\<And>l a b r.\n       invc \\<langle>l, (a, b), r\\<rangle> \\<and>\n       invh \\<langle>l, (a, b), r\\<rangle> \\<Longrightarrow>\n       (invc l \\<and> invh l) \\<and> invc r \\<and> invh r", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. Tree2.set_tree (Set2_Join_RBT.join l_ a_ r_) =\n    Tree2.set_tree l_ \\<union> {a_} \\<union> Tree2.set_tree r_", "by (rule set_join)"], ["proof (state)\nthis:\n  Tree2.set_tree (Set2_Join_RBT.join l_ a_ r_) =\n  Tree2.set_tree l_ \\<union> {a_} \\<union> Tree2.set_tree r_\n\ngoal (4 subgoals):\n 1. \\<And>l a b r.\n       Tree2.bst \\<langle>l, (a, b), r\\<rangle> \\<Longrightarrow>\n       Tree2.bst (Set2_Join_RBT.join l a r)\n 2. invc \\<langle>\\<rangle> \\<and> invh \\<langle>\\<rangle>\n 3. \\<And>l r a.\n       \\<lbrakk>invc l \\<and> invh l; invc r \\<and> invh r\\<rbrakk>\n       \\<Longrightarrow> invc (Set2_Join_RBT.join l a r) \\<and>\n                         invh (Set2_Join_RBT.join l a r)\n 4. \\<And>l a b r.\n       invc \\<langle>l, (a, b), r\\<rangle> \\<and>\n       invh \\<langle>l, (a, b), r\\<rangle> \\<Longrightarrow>\n       (invc l \\<and> invh l) \\<and> invc r \\<and> invh r", "next"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>l a b r.\n       Tree2.bst \\<langle>l, (a, b), r\\<rangle> \\<Longrightarrow>\n       Tree2.bst (Set2_Join_RBT.join l a r)\n 2. invc \\<langle>\\<rangle> \\<and> invh \\<langle>\\<rangle>\n 3. \\<And>l r a.\n       \\<lbrakk>invc l \\<and> invh l; invc r \\<and> invh r\\<rbrakk>\n       \\<Longrightarrow> invc (Set2_Join_RBT.join l a r) \\<and>\n                         invh (Set2_Join_RBT.join l a r)\n 4. \\<And>l a b r.\n       invc \\<langle>l, (a, b), r\\<rangle> \\<and>\n       invh \\<langle>l, (a, b), r\\<rangle> \\<Longrightarrow>\n       (invc l \\<and> invh l) \\<and> invc r \\<and> invh r", "case 2"], ["proof (state)\nthis:\n  Tree2.bst \\<langle>l_, (a_, b_), r_\\<rangle>\n\ngoal (4 subgoals):\n 1. \\<And>l a b r.\n       Tree2.bst \\<langle>l, (a, b), r\\<rangle> \\<Longrightarrow>\n       Tree2.bst (Set2_Join_RBT.join l a r)\n 2. invc \\<langle>\\<rangle> \\<and> invh \\<langle>\\<rangle>\n 3. \\<And>l r a.\n       \\<lbrakk>invc l \\<and> invh l; invc r \\<and> invh r\\<rbrakk>\n       \\<Longrightarrow> invc (Set2_Join_RBT.join l a r) \\<and>\n                         invh (Set2_Join_RBT.join l a r)\n 4. \\<And>l a b r.\n       invc \\<langle>l, (a, b), r\\<rangle> \\<and>\n       invh \\<langle>l, (a, b), r\\<rangle> \\<Longrightarrow>\n       (invc l \\<and> invh l) \\<and> invc r \\<and> invh r", "thus ?case"], ["proof (prove)\nusing this:\n  Tree2.bst \\<langle>l_, (a_, b_), r_\\<rangle>\n\ngoal (1 subgoal):\n 1. Tree2.bst (Set2_Join_RBT.join l_ a_ r_)", "by (simp add: bst_join)"], ["proof (state)\nthis:\n  Tree2.bst (Set2_Join_RBT.join l_ a_ r_)\n\ngoal (3 subgoals):\n 1. invc \\<langle>\\<rangle> \\<and> invh \\<langle>\\<rangle>\n 2. \\<And>l r a.\n       \\<lbrakk>invc l \\<and> invh l; invc r \\<and> invh r\\<rbrakk>\n       \\<Longrightarrow> invc (Set2_Join_RBT.join l a r) \\<and>\n                         invh (Set2_Join_RBT.join l a r)\n 3. \\<And>l a b r.\n       invc \\<langle>l, (a, b), r\\<rangle> \\<and>\n       invh \\<langle>l, (a, b), r\\<rangle> \\<Longrightarrow>\n       (invc l \\<and> invh l) \\<and> invc r \\<and> invh r", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. invc \\<langle>\\<rangle> \\<and> invh \\<langle>\\<rangle>\n 2. \\<And>l r a.\n       \\<lbrakk>invc l \\<and> invh l; invc r \\<and> invh r\\<rbrakk>\n       \\<Longrightarrow> invc (Set2_Join_RBT.join l a r) \\<and>\n                         invh (Set2_Join_RBT.join l a r)\n 3. \\<And>l a b r.\n       invc \\<langle>l, (a, b), r\\<rangle> \\<and>\n       invh \\<langle>l, (a, b), r\\<rangle> \\<Longrightarrow>\n       (invc l \\<and> invh l) \\<and> invc r \\<and> invh r", "case 3"], ["proof (state)\nthis:\n  \n\ngoal (3 subgoals):\n 1. invc \\<langle>\\<rangle> \\<and> invh \\<langle>\\<rangle>\n 2. \\<And>l r a.\n       \\<lbrakk>invc l \\<and> invh l; invc r \\<and> invh r\\<rbrakk>\n       \\<Longrightarrow> invc (Set2_Join_RBT.join l a r) \\<and>\n                         invh (Set2_Join_RBT.join l a r)\n 3. \\<And>l a b r.\n       invc \\<langle>l, (a, b), r\\<rangle> \\<and>\n       invh \\<langle>l, (a, b), r\\<rangle> \\<Longrightarrow>\n       (invc l \\<and> invh l) \\<and> invc r \\<and> invh r", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. invc \\<langle>\\<rangle> \\<and> invh \\<langle>\\<rangle>", "by simp"], ["proof (state)\nthis:\n  invc \\<langle>\\<rangle> \\<and> invh \\<langle>\\<rangle>\n\ngoal (2 subgoals):\n 1. \\<And>l r a.\n       \\<lbrakk>invc l \\<and> invh l; invc r \\<and> invh r\\<rbrakk>\n       \\<Longrightarrow> invc (Set2_Join_RBT.join l a r) \\<and>\n                         invh (Set2_Join_RBT.join l a r)\n 2. \\<And>l a b r.\n       invc \\<langle>l, (a, b), r\\<rangle> \\<and>\n       invh \\<langle>l, (a, b), r\\<rangle> \\<Longrightarrow>\n       (invc l \\<and> invh l) \\<and> invc r \\<and> invh r", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>l r a.\n       \\<lbrakk>invc l \\<and> invh l; invc r \\<and> invh r\\<rbrakk>\n       \\<Longrightarrow> invc (Set2_Join_RBT.join l a r) \\<and>\n                         invh (Set2_Join_RBT.join l a r)\n 2. \\<And>l a b r.\n       invc \\<langle>l, (a, b), r\\<rangle> \\<and>\n       invh \\<langle>l, (a, b), r\\<rangle> \\<Longrightarrow>\n       (invc l \\<and> invh l) \\<and> invc r \\<and> invh r", "case 4"], ["proof (state)\nthis:\n  invc l_ \\<and> invh l_\n  invc r_ \\<and> invh r_\n\ngoal (2 subgoals):\n 1. \\<And>l r a.\n       \\<lbrakk>invc l \\<and> invh l; invc r \\<and> invh r\\<rbrakk>\n       \\<Longrightarrow> invc (Set2_Join_RBT.join l a r) \\<and>\n                         invh (Set2_Join_RBT.join l a r)\n 2. \\<And>l a b r.\n       invc \\<langle>l, (a, b), r\\<rangle> \\<and>\n       invh \\<langle>l, (a, b), r\\<rangle> \\<Longrightarrow>\n       (invc l \\<and> invh l) \\<and> invc r \\<and> invh r", "thus ?case"], ["proof (prove)\nusing this:\n  invc l_ \\<and> invh l_\n  invc r_ \\<and> invh r_\n\ngoal (1 subgoal):\n 1. invc (Set2_Join_RBT.join l_ a_ r_) \\<and>\n    invh (Set2_Join_RBT.join l_ a_ r_)", "by (simp add: inv_join)"], ["proof (state)\nthis:\n  invc (Set2_Join_RBT.join l_ a_ r_) \\<and>\n  invh (Set2_Join_RBT.join l_ a_ r_)\n\ngoal (1 subgoal):\n 1. \\<And>l a b r.\n       invc \\<langle>l, (a, b), r\\<rangle> \\<and>\n       invh \\<langle>l, (a, b), r\\<rangle> \\<Longrightarrow>\n       (invc l \\<and> invh l) \\<and> invc r \\<and> invh r", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>l a b r.\n       invc \\<langle>l, (a, b), r\\<rangle> \\<and>\n       invh \\<langle>l, (a, b), r\\<rangle> \\<Longrightarrow>\n       (invc l \\<and> invh l) \\<and> invc r \\<and> invh r", "case 5"], ["proof (state)\nthis:\n  invc \\<langle>l_, (a_, b_), r_\\<rangle> \\<and>\n  invh \\<langle>l_, (a_, b_), r_\\<rangle>\n\ngoal (1 subgoal):\n 1. \\<And>l a b r.\n       invc \\<langle>l, (a, b), r\\<rangle> \\<and>\n       invh \\<langle>l, (a, b), r\\<rangle> \\<Longrightarrow>\n       (invc l \\<and> invh l) \\<and> invc r \\<and> invh r", "thus ?case"], ["proof (prove)\nusing this:\n  invc \\<langle>l_, (a_, b_), r_\\<rangle> \\<and>\n  invh \\<langle>l_, (a_, b_), r_\\<rangle>\n\ngoal (1 subgoal):\n 1. (invc l_ \\<and> invh l_) \\<and> invc r_ \\<and> invh r_", "by simp"], ["proof (state)\nthis:\n  (invc l_ \\<and> invh l_) \\<and> invc r_ \\<and> invh r_\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>The invariant does not guarantee that the root node is black. This is not required\nto guarantee that the height is logarithmic in the size --- Exercise.\\<close>"], ["", "end"], ["", "(*>*)"]]}