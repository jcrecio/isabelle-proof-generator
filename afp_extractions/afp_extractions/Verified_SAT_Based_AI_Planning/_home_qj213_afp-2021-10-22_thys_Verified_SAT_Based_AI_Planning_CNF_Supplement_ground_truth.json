{"file_name": "/home/qj213/afp-2021-10-22/thys/Verified_SAT_Based_AI_Planning/CNF_Supplement.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Verified_SAT_Based_AI_Planning", "problem_names": ["lemma is_literal_formula_then_cnf_is_singleton_clause:\n  assumes \"is_literal_formula f\"\n  obtains C where \"cnf f = { C }\"", "lemma literal_formula_to_literal_is_inverse_of_form_of_lit: \n  \"literal_formula_to_literal (form_of_lit L) = L\"", "lemma is_nnf_cnf: \n  assumes \"is_cnf F\" \n    shows \"is_nnf F\"", "lemma cnf_of_literal_formula:\n  assumes \"is_literal_formula f\" \n  shows \"cnf f = {{ literal_formula_to_literal f }}\"", "lemma is_cnf_foldr_and_if: \n  assumes \"\\<forall>f \\<in> set fs. is_cnf f\"\n  shows \"is_cnf (foldr (\\<^bold>\\<and>) fs (\\<^bold>\\<not>\\<bottom>))\""], "translations": [["", "lemma is_literal_formula_then_cnf_is_singleton_clause:\n  assumes \"is_literal_formula f\"\n  obtains C where \"cnf f = { C }\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>C. cnf f = {C} \\<Longrightarrow> thesis) \\<Longrightarrow> thesis", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<And>C. cnf f = {C} \\<Longrightarrow> thesis) \\<Longrightarrow> thesis", "consider (f_is_positive_literal) \"\\<exists>a. f = Atom a\" \n    | (f_is_negative_literal) \"\\<exists>a. f = \\<^bold>\\<not>(Atom a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<exists>a. f = Atom a \\<Longrightarrow> thesis;\n     \\<exists>a. f = \\<^bold>\\<not> (Atom a) \\<Longrightarrow>\n     thesis\\<rbrakk>\n    \\<Longrightarrow> thesis", "using assms is_literal_formula.elims(2)[of f]"], ["proof (prove)\nusing this:\n  is_literal_formula f\n  \\<lbrakk>is_literal_formula f;\n   \\<And>uu_. f = Atom uu_ \\<Longrightarrow> ?P;\n   \\<And>uv_. f = \\<^bold>\\<not> (Atom uv_) \\<Longrightarrow> ?P\\<rbrakk>\n  \\<Longrightarrow> ?P\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<exists>a. f = Atom a \\<Longrightarrow> thesis;\n     \\<exists>a. f = \\<^bold>\\<not> (Atom a) \\<Longrightarrow>\n     thesis\\<rbrakk>\n    \\<Longrightarrow> thesis", "by meson"], ["proof (state)\nthis:\n  \\<lbrakk>\\<exists>a. f = Atom a \\<Longrightarrow> ?thesis;\n   \\<exists>a. f = \\<^bold>\\<not> (Atom a) \\<Longrightarrow>\n   ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n\ngoal (1 subgoal):\n 1. (\\<And>C. cnf f = {C} \\<Longrightarrow> thesis) \\<Longrightarrow> thesis", "then"], ["proof (chain)\npicking this:\n  \\<lbrakk>\\<exists>a. f = Atom a \\<Longrightarrow> ?thesis;\n   \\<exists>a. f = \\<^bold>\\<not> (Atom a) \\<Longrightarrow>\n   ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis", "have \"\\<exists>C. cnf f = { C }\""], ["proof (prove)\nusing this:\n  \\<lbrakk>\\<exists>a. f = Atom a \\<Longrightarrow> ?thesis;\n   \\<exists>a. f = \\<^bold>\\<not> (Atom a) \\<Longrightarrow>\n   ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n\ngoal (1 subgoal):\n 1. \\<exists>C. cnf f = {C}", "proof (cases)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<exists>a. f = Atom a \\<Longrightarrow> \\<exists>C. cnf f = {C}\n 2. \\<exists>a. f = \\<^bold>\\<not> (Atom a) \\<Longrightarrow>\n    \\<exists>C. cnf f = {C}", "case f_is_positive_literal"], ["proof (state)\nthis:\n  \\<exists>a. f = Atom a\n\ngoal (2 subgoals):\n 1. \\<exists>a. f = Atom a \\<Longrightarrow> \\<exists>C. cnf f = {C}\n 2. \\<exists>a. f = \\<^bold>\\<not> (Atom a) \\<Longrightarrow>\n    \\<exists>C. cnf f = {C}", "then"], ["proof (chain)\npicking this:\n  \\<exists>a. f = Atom a", "obtain a where \"f = Atom a\""], ["proof (prove)\nusing this:\n  \\<exists>a. f = Atom a\n\ngoal (1 subgoal):\n 1. (\\<And>a. f = Atom a \\<Longrightarrow> thesis) \\<Longrightarrow> thesis", "by force"], ["proof (state)\nthis:\n  f = Atom a\n\ngoal (2 subgoals):\n 1. \\<exists>a. f = Atom a \\<Longrightarrow> \\<exists>C. cnf f = {C}\n 2. \\<exists>a. f = \\<^bold>\\<not> (Atom a) \\<Longrightarrow>\n    \\<exists>C. cnf f = {C}", "then"], ["proof (chain)\npicking this:\n  f = Atom a", "have \"cnf f = {{ a\\<^sup>+ }}\""], ["proof (prove)\nusing this:\n  f = Atom a\n\ngoal (1 subgoal):\n 1. cnf f = {{a\\<^sup>+}}", "by force"], ["proof (state)\nthis:\n  cnf f = {{a\\<^sup>+}}\n\ngoal (2 subgoals):\n 1. \\<exists>a. f = Atom a \\<Longrightarrow> \\<exists>C. cnf f = {C}\n 2. \\<exists>a. f = \\<^bold>\\<not> (Atom a) \\<Longrightarrow>\n    \\<exists>C. cnf f = {C}", "thus ?thesis"], ["proof (prove)\nusing this:\n  cnf f = {{a\\<^sup>+}}\n\ngoal (1 subgoal):\n 1. \\<exists>C. cnf f = {C}", "by simp"], ["proof (state)\nthis:\n  \\<exists>C. cnf f = {C}\n\ngoal (1 subgoal):\n 1. \\<exists>a. f = \\<^bold>\\<not> (Atom a) \\<Longrightarrow>\n    \\<exists>C. cnf f = {C}", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>a. f = \\<^bold>\\<not> (Atom a) \\<Longrightarrow>\n    \\<exists>C. cnf f = {C}", "case f_is_negative_literal"], ["proof (state)\nthis:\n  \\<exists>a. f = \\<^bold>\\<not> (Atom a)\n\ngoal (1 subgoal):\n 1. \\<exists>a. f = \\<^bold>\\<not> (Atom a) \\<Longrightarrow>\n    \\<exists>C. cnf f = {C}", "then"], ["proof (chain)\npicking this:\n  \\<exists>a. f = \\<^bold>\\<not> (Atom a)", "obtain a where \"f = \\<^bold>\\<not>(Atom a)\""], ["proof (prove)\nusing this:\n  \\<exists>a. f = \\<^bold>\\<not> (Atom a)\n\ngoal (1 subgoal):\n 1. (\\<And>a.\n        f = \\<^bold>\\<not> (Atom a) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by force"], ["proof (state)\nthis:\n  f = \\<^bold>\\<not> (Atom a)\n\ngoal (1 subgoal):\n 1. \\<exists>a. f = \\<^bold>\\<not> (Atom a) \\<Longrightarrow>\n    \\<exists>C. cnf f = {C}", "then"], ["proof (chain)\npicking this:\n  f = \\<^bold>\\<not> (Atom a)", "have \"cnf f = {{ a\\<inverse> }}\""], ["proof (prove)\nusing this:\n  f = \\<^bold>\\<not> (Atom a)\n\ngoal (1 subgoal):\n 1. cnf f = {{a\\<inverse>}}", "by force"], ["proof (state)\nthis:\n  cnf f = {{a\\<inverse>}}\n\ngoal (1 subgoal):\n 1. \\<exists>a. f = \\<^bold>\\<not> (Atom a) \\<Longrightarrow>\n    \\<exists>C. cnf f = {C}", "thus ?thesis"], ["proof (prove)\nusing this:\n  cnf f = {{a\\<inverse>}}\n\ngoal (1 subgoal):\n 1. \\<exists>C. cnf f = {C}", "by simp"], ["proof (state)\nthis:\n  \\<exists>C. cnf f = {C}\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>C. cnf f = {C}\n\ngoal (1 subgoal):\n 1. (\\<And>C. cnf f = {C} \\<Longrightarrow> thesis) \\<Longrightarrow> thesis", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<exists>C. cnf f = {C}\n\ngoal (1 subgoal):\n 1. thesis", "using that"], ["proof (prove)\nusing this:\n  \\<exists>C. cnf f = {C}\n  cnf f = {?C} \\<Longrightarrow> thesis\n\ngoal (1 subgoal):\n 1. thesis", "by presburger"], ["proof (state)\nthis:\n  thesis\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma literal_formula_to_literal_is_inverse_of_form_of_lit: \n  \"literal_formula_to_literal (form_of_lit L) = L\""], ["proof (prove)\ngoal (1 subgoal):\n 1. literal_formula_to_literal (form_of_lit L) = L", "by (cases L, simp+)"], ["", "lemma is_nnf_cnf: \n  assumes \"is_cnf F\" \n    shows \"is_nnf F\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_nnf F", "using assms"], ["proof (prove)\nusing this:\n  is_cnf F\n\ngoal (1 subgoal):\n 1. is_nnf F", "proof (induction F)"], ["proof (state)\ngoal (6 subgoals):\n 1. \\<And>x. is_cnf (Atom x) \\<Longrightarrow> is_nnf (Atom x)\n 2. is_cnf \\<bottom> \\<Longrightarrow> is_nnf \\<bottom>\n 3. \\<And>F.\n       \\<lbrakk>is_cnf F \\<Longrightarrow> is_nnf F;\n        is_cnf (\\<^bold>\\<not> F)\\<rbrakk>\n       \\<Longrightarrow> is_nnf (\\<^bold>\\<not> F)\n 4. \\<And>F1 F2.\n       \\<lbrakk>is_cnf F1 \\<Longrightarrow> is_nnf F1;\n        is_cnf F2 \\<Longrightarrow> is_nnf F2;\n        is_cnf (F1 \\<^bold>\\<and> F2)\\<rbrakk>\n       \\<Longrightarrow> is_nnf (F1 \\<^bold>\\<and> F2)\n 5. \\<And>F1 F2.\n       \\<lbrakk>is_cnf F1 \\<Longrightarrow> is_nnf F1;\n        is_cnf F2 \\<Longrightarrow> is_nnf F2;\n        is_cnf (F1 \\<^bold>\\<or> F2)\\<rbrakk>\n       \\<Longrightarrow> is_nnf (F1 \\<^bold>\\<or> F2)\n 6. \\<And>F1 F2.\n       \\<lbrakk>is_cnf F1 \\<Longrightarrow> is_nnf F1;\n        is_cnf F2 \\<Longrightarrow> is_nnf F2;\n        is_cnf (F1 \\<^bold>\\<rightarrow> F2)\\<rbrakk>\n       \\<Longrightarrow> is_nnf (F1 \\<^bold>\\<rightarrow> F2)", "case (Or F1 F2)"], ["proof (state)\nthis:\n  is_cnf F1 \\<Longrightarrow> is_nnf F1\n  is_cnf F2 \\<Longrightarrow> is_nnf F2\n  is_cnf (F1 \\<^bold>\\<or> F2)\n\ngoal (6 subgoals):\n 1. \\<And>x. is_cnf (Atom x) \\<Longrightarrow> is_nnf (Atom x)\n 2. is_cnf \\<bottom> \\<Longrightarrow> is_nnf \\<bottom>\n 3. \\<And>F.\n       \\<lbrakk>is_cnf F \\<Longrightarrow> is_nnf F;\n        is_cnf (\\<^bold>\\<not> F)\\<rbrakk>\n       \\<Longrightarrow> is_nnf (\\<^bold>\\<not> F)\n 4. \\<And>F1 F2.\n       \\<lbrakk>is_cnf F1 \\<Longrightarrow> is_nnf F1;\n        is_cnf F2 \\<Longrightarrow> is_nnf F2;\n        is_cnf (F1 \\<^bold>\\<and> F2)\\<rbrakk>\n       \\<Longrightarrow> is_nnf (F1 \\<^bold>\\<and> F2)\n 5. \\<And>F1 F2.\n       \\<lbrakk>is_cnf F1 \\<Longrightarrow> is_nnf F1;\n        is_cnf F2 \\<Longrightarrow> is_nnf F2;\n        is_cnf (F1 \\<^bold>\\<or> F2)\\<rbrakk>\n       \\<Longrightarrow> is_nnf (F1 \\<^bold>\\<or> F2)\n 6. \\<And>F1 F2.\n       \\<lbrakk>is_cnf F1 \\<Longrightarrow> is_nnf F1;\n        is_cnf F2 \\<Longrightarrow> is_nnf F2;\n        is_cnf (F1 \\<^bold>\\<rightarrow> F2)\\<rbrakk>\n       \\<Longrightarrow> is_nnf (F1 \\<^bold>\\<rightarrow> F2)", "have \"is_disj (F1 \\<^bold>\\<or> F2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_disj (F1 \\<^bold>\\<or> F2)", "using Or.prems is_cnf.simps(5)"], ["proof (prove)\nusing this:\n  is_cnf (F1 \\<^bold>\\<or> F2)\n  is_cnf (?v \\<^bold>\\<or> ?va) = is_disj (?v \\<^bold>\\<or> ?va)\n\ngoal (1 subgoal):\n 1. is_disj (F1 \\<^bold>\\<or> F2)", "by simp"], ["proof (state)\nthis:\n  is_disj (F1 \\<^bold>\\<or> F2)\n\ngoal (6 subgoals):\n 1. \\<And>x. is_cnf (Atom x) \\<Longrightarrow> is_nnf (Atom x)\n 2. is_cnf \\<bottom> \\<Longrightarrow> is_nnf \\<bottom>\n 3. \\<And>F.\n       \\<lbrakk>is_cnf F \\<Longrightarrow> is_nnf F;\n        is_cnf (\\<^bold>\\<not> F)\\<rbrakk>\n       \\<Longrightarrow> is_nnf (\\<^bold>\\<not> F)\n 4. \\<And>F1 F2.\n       \\<lbrakk>is_cnf F1 \\<Longrightarrow> is_nnf F1;\n        is_cnf F2 \\<Longrightarrow> is_nnf F2;\n        is_cnf (F1 \\<^bold>\\<and> F2)\\<rbrakk>\n       \\<Longrightarrow> is_nnf (F1 \\<^bold>\\<and> F2)\n 5. \\<And>F1 F2.\n       \\<lbrakk>is_cnf F1 \\<Longrightarrow> is_nnf F1;\n        is_cnf F2 \\<Longrightarrow> is_nnf F2;\n        is_cnf (F1 \\<^bold>\\<or> F2)\\<rbrakk>\n       \\<Longrightarrow> is_nnf (F1 \\<^bold>\\<or> F2)\n 6. \\<And>F1 F2.\n       \\<lbrakk>is_cnf F1 \\<Longrightarrow> is_nnf F1;\n        is_cnf F2 \\<Longrightarrow> is_nnf F2;\n        is_cnf (F1 \\<^bold>\\<rightarrow> F2)\\<rbrakk>\n       \\<Longrightarrow> is_nnf (F1 \\<^bold>\\<rightarrow> F2)", "thus ?case"], ["proof (prove)\nusing this:\n  is_disj (F1 \\<^bold>\\<or> F2)\n\ngoal (1 subgoal):\n 1. is_nnf (F1 \\<^bold>\\<or> F2)", "using disj_is_nnf"], ["proof (prove)\nusing this:\n  is_disj (F1 \\<^bold>\\<or> F2)\n  is_disj ?F \\<Longrightarrow> is_nnf ?F\n\ngoal (1 subgoal):\n 1. is_nnf (F1 \\<^bold>\\<or> F2)", "by blast"], ["proof (state)\nthis:\n  is_nnf (F1 \\<^bold>\\<or> F2)\n\ngoal (5 subgoals):\n 1. \\<And>x. is_cnf (Atom x) \\<Longrightarrow> is_nnf (Atom x)\n 2. is_cnf \\<bottom> \\<Longrightarrow> is_nnf \\<bottom>\n 3. \\<And>F.\n       \\<lbrakk>is_cnf F \\<Longrightarrow> is_nnf F;\n        is_cnf (\\<^bold>\\<not> F)\\<rbrakk>\n       \\<Longrightarrow> is_nnf (\\<^bold>\\<not> F)\n 4. \\<And>F1 F2.\n       \\<lbrakk>is_cnf F1 \\<Longrightarrow> is_nnf F1;\n        is_cnf F2 \\<Longrightarrow> is_nnf F2;\n        is_cnf (F1 \\<^bold>\\<and> F2)\\<rbrakk>\n       \\<Longrightarrow> is_nnf (F1 \\<^bold>\\<and> F2)\n 5. \\<And>F1 F2.\n       \\<lbrakk>is_cnf F1 \\<Longrightarrow> is_nnf F1;\n        is_cnf F2 \\<Longrightarrow> is_nnf F2;\n        is_cnf (F1 \\<^bold>\\<rightarrow> F2)\\<rbrakk>\n       \\<Longrightarrow> is_nnf (F1 \\<^bold>\\<rightarrow> F2)", "qed simp+"], ["", "lemma cnf_of_literal_formula:\n  assumes \"is_literal_formula f\" \n  shows \"cnf f = {{ literal_formula_to_literal f }}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. cnf f = {{literal_formula_to_literal f}}", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. cnf f = {{literal_formula_to_literal f}}", "consider (f_is_positive_literal) \"\\<exists>a. f = Atom a\"\n    | (f_is_negative_literal) \"\\<exists>a. f = (\\<^bold>\\<not>(Atom a))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<exists>a. f = Atom a \\<Longrightarrow> thesis;\n     \\<exists>a. f = \\<^bold>\\<not> (Atom a) \\<Longrightarrow>\n     thesis\\<rbrakk>\n    \\<Longrightarrow> thesis", "using assms is_literal_formula.elims(2)[of f \"\\<exists>a. f = Atom a\"]\n       is_literal_formula.elims(2)[of f \"\\<exists>a. f = (\\<^bold>\\<not>(Atom a))\"]"], ["proof (prove)\nusing this:\n  is_literal_formula f\n  \\<lbrakk>is_literal_formula f;\n   \\<And>uu_. f = Atom uu_ \\<Longrightarrow> \\<exists>a. f = Atom a;\n   \\<And>uv_.\n      f = \\<^bold>\\<not> (Atom uv_) \\<Longrightarrow>\n      \\<exists>a. f = Atom a\\<rbrakk>\n  \\<Longrightarrow> \\<exists>a. f = Atom a\n  \\<lbrakk>is_literal_formula f;\n   \\<And>uu_.\n      f = Atom uu_ \\<Longrightarrow>\n      \\<exists>a. f = \\<^bold>\\<not> (Atom a);\n   \\<And>uv_.\n      f = \\<^bold>\\<not> (Atom uv_) \\<Longrightarrow>\n      \\<exists>a. f = \\<^bold>\\<not> (Atom a)\\<rbrakk>\n  \\<Longrightarrow> \\<exists>a. f = \\<^bold>\\<not> (Atom a)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<exists>a. f = Atom a \\<Longrightarrow> thesis;\n     \\<exists>a. f = \\<^bold>\\<not> (Atom a) \\<Longrightarrow>\n     thesis\\<rbrakk>\n    \\<Longrightarrow> thesis", "by blast"], ["proof (state)\nthis:\n  \\<lbrakk>\\<exists>a. f = Atom a \\<Longrightarrow> ?thesis;\n   \\<exists>a. f = \\<^bold>\\<not> (Atom a) \\<Longrightarrow>\n   ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n\ngoal (1 subgoal):\n 1. cnf f = {{literal_formula_to_literal f}}", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<lbrakk>\\<exists>a. f = Atom a \\<Longrightarrow> ?thesis;\n   \\<exists>a. f = \\<^bold>\\<not> (Atom a) \\<Longrightarrow>\n   ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n\ngoal (1 subgoal):\n 1. cnf f = {{literal_formula_to_literal f}}", "by(cases, force+)"], ["proof (state)\nthis:\n  cnf f = {{literal_formula_to_literal f}}\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma is_cnf_foldr_and_if: \n  assumes \"\\<forall>f \\<in> set fs. is_cnf f\"\n  shows \"is_cnf (foldr (\\<^bold>\\<and>) fs (\\<^bold>\\<not>\\<bottom>))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_cnf (foldr (\\<^bold>\\<and>) fs (\\<^bold>\\<not> \\<bottom>))", "using assms"], ["proof (prove)\nusing this:\n  \\<forall>f\\<in>set fs. is_cnf f\n\ngoal (1 subgoal):\n 1. is_cnf (foldr (\\<^bold>\\<and>) fs (\\<^bold>\\<not> \\<bottom>))", "proof (induction fs)"], ["proof (state)\ngoal (2 subgoals):\n 1. Ball (set []) is_cnf \\<Longrightarrow>\n    is_cnf (foldr (\\<^bold>\\<and>) [] (\\<^bold>\\<not> \\<bottom>))\n 2. \\<And>a fs.\n       \\<lbrakk>Ball (set fs) is_cnf \\<Longrightarrow>\n                is_cnf\n                 (foldr (\\<^bold>\\<and>) fs (\\<^bold>\\<not> \\<bottom>));\n        Ball (set (a # fs)) is_cnf\\<rbrakk>\n       \\<Longrightarrow> is_cnf\n                          (foldr (\\<^bold>\\<and>) (a # fs)\n                            (\\<^bold>\\<not> \\<bottom>))", "case (Cons f fs)"], ["proof (state)\nthis:\n  \\<forall>a\\<in>set fs. is_cnf a \\<Longrightarrow>\n  is_cnf (foldr (\\<^bold>\\<and>) fs (\\<^bold>\\<not> \\<bottom>))\n  \\<forall>a\\<in>set (f # fs). is_cnf a\n\ngoal (2 subgoals):\n 1. Ball (set []) is_cnf \\<Longrightarrow>\n    is_cnf (foldr (\\<^bold>\\<and>) [] (\\<^bold>\\<not> \\<bottom>))\n 2. \\<And>a fs.\n       \\<lbrakk>Ball (set fs) is_cnf \\<Longrightarrow>\n                is_cnf\n                 (foldr (\\<^bold>\\<and>) fs (\\<^bold>\\<not> \\<bottom>));\n        Ball (set (a # fs)) is_cnf\\<rbrakk>\n       \\<Longrightarrow> is_cnf\n                          (foldr (\\<^bold>\\<and>) (a # fs)\n                            (\\<^bold>\\<not> \\<bottom>))", "have \"foldr (\\<^bold>\\<and>) (f # fs) (\\<^bold>\\<not>\\<bottom>) = f \\<^bold>\\<and> (foldr (\\<^bold>\\<and>) fs (\\<^bold>\\<not>\\<bottom>))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. foldr (\\<^bold>\\<and>) (f # fs) (\\<^bold>\\<not> \\<bottom>) =\n    f \\<^bold>\\<and> foldr (\\<^bold>\\<and>) fs (\\<^bold>\\<not> \\<bottom>)", "by simp"], ["proof (state)\nthis:\n  foldr (\\<^bold>\\<and>) (f # fs) (\\<^bold>\\<not> \\<bottom>) =\n  f \\<^bold>\\<and> foldr (\\<^bold>\\<and>) fs (\\<^bold>\\<not> \\<bottom>)\n\ngoal (2 subgoals):\n 1. Ball (set []) is_cnf \\<Longrightarrow>\n    is_cnf (foldr (\\<^bold>\\<and>) [] (\\<^bold>\\<not> \\<bottom>))\n 2. \\<And>a fs.\n       \\<lbrakk>Ball (set fs) is_cnf \\<Longrightarrow>\n                is_cnf\n                 (foldr (\\<^bold>\\<and>) fs (\\<^bold>\\<not> \\<bottom>));\n        Ball (set (a # fs)) is_cnf\\<rbrakk>\n       \\<Longrightarrow> is_cnf\n                          (foldr (\\<^bold>\\<and>) (a # fs)\n                            (\\<^bold>\\<not> \\<bottom>))", "moreover"], ["proof (state)\nthis:\n  foldr (\\<^bold>\\<and>) (f # fs) (\\<^bold>\\<not> \\<bottom>) =\n  f \\<^bold>\\<and> foldr (\\<^bold>\\<and>) fs (\\<^bold>\\<not> \\<bottom>)\n\ngoal (2 subgoals):\n 1. Ball (set []) is_cnf \\<Longrightarrow>\n    is_cnf (foldr (\\<^bold>\\<and>) [] (\\<^bold>\\<not> \\<bottom>))\n 2. \\<And>a fs.\n       \\<lbrakk>Ball (set fs) is_cnf \\<Longrightarrow>\n                is_cnf\n                 (foldr (\\<^bold>\\<and>) fs (\\<^bold>\\<not> \\<bottom>));\n        Ball (set (a # fs)) is_cnf\\<rbrakk>\n       \\<Longrightarrow> is_cnf\n                          (foldr (\\<^bold>\\<and>) (a # fs)\n                            (\\<^bold>\\<not> \\<bottom>))", "{"], ["proof (state)\nthis:\n  foldr (\\<^bold>\\<and>) (f # fs) (\\<^bold>\\<not> \\<bottom>) =\n  f \\<^bold>\\<and> foldr (\\<^bold>\\<and>) fs (\\<^bold>\\<not> \\<bottom>)\n\ngoal (2 subgoals):\n 1. Ball (set []) is_cnf \\<Longrightarrow>\n    is_cnf (foldr (\\<^bold>\\<and>) [] (\\<^bold>\\<not> \\<bottom>))\n 2. \\<And>a fs.\n       \\<lbrakk>Ball (set fs) is_cnf \\<Longrightarrow>\n                is_cnf\n                 (foldr (\\<^bold>\\<and>) fs (\\<^bold>\\<not> \\<bottom>));\n        Ball (set (a # fs)) is_cnf\\<rbrakk>\n       \\<Longrightarrow> is_cnf\n                          (foldr (\\<^bold>\\<and>) (a # fs)\n                            (\\<^bold>\\<not> \\<bottom>))", "have \"\\<forall>f \\<in> set fs. is_cnf f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>f\\<in>set fs. is_cnf f", "using Cons.prems"], ["proof (prove)\nusing this:\n  \\<forall>a\\<in>set (f # fs). is_cnf a\n\ngoal (1 subgoal):\n 1. \\<forall>f\\<in>set fs. is_cnf f", "by force"], ["proof (state)\nthis:\n  \\<forall>f\\<in>set fs. is_cnf f\n\ngoal (2 subgoals):\n 1. Ball (set []) is_cnf \\<Longrightarrow>\n    is_cnf (foldr (\\<^bold>\\<and>) [] (\\<^bold>\\<not> \\<bottom>))\n 2. \\<And>a fs.\n       \\<lbrakk>Ball (set fs) is_cnf \\<Longrightarrow>\n                is_cnf\n                 (foldr (\\<^bold>\\<and>) fs (\\<^bold>\\<not> \\<bottom>));\n        Ball (set (a # fs)) is_cnf\\<rbrakk>\n       \\<Longrightarrow> is_cnf\n                          (foldr (\\<^bold>\\<and>) (a # fs)\n                            (\\<^bold>\\<not> \\<bottom>))", "hence \"is_cnf (foldr (\\<^bold>\\<and>) fs (\\<^bold>\\<not>\\<bottom>))\""], ["proof (prove)\nusing this:\n  \\<forall>f\\<in>set fs. is_cnf f\n\ngoal (1 subgoal):\n 1. is_cnf (foldr (\\<^bold>\\<and>) fs (\\<^bold>\\<not> \\<bottom>))", "using Cons.IH"], ["proof (prove)\nusing this:\n  \\<forall>f\\<in>set fs. is_cnf f\n  \\<forall>a\\<in>set fs. is_cnf a \\<Longrightarrow>\n  is_cnf (foldr (\\<^bold>\\<and>) fs (\\<^bold>\\<not> \\<bottom>))\n\ngoal (1 subgoal):\n 1. is_cnf (foldr (\\<^bold>\\<and>) fs (\\<^bold>\\<not> \\<bottom>))", "by blast"], ["proof (state)\nthis:\n  is_cnf (foldr (\\<^bold>\\<and>) fs (\\<^bold>\\<not> \\<bottom>))\n\ngoal (2 subgoals):\n 1. Ball (set []) is_cnf \\<Longrightarrow>\n    is_cnf (foldr (\\<^bold>\\<and>) [] (\\<^bold>\\<not> \\<bottom>))\n 2. \\<And>a fs.\n       \\<lbrakk>Ball (set fs) is_cnf \\<Longrightarrow>\n                is_cnf\n                 (foldr (\\<^bold>\\<and>) fs (\\<^bold>\\<not> \\<bottom>));\n        Ball (set (a # fs)) is_cnf\\<rbrakk>\n       \\<Longrightarrow> is_cnf\n                          (foldr (\\<^bold>\\<and>) (a # fs)\n                            (\\<^bold>\\<not> \\<bottom>))", "}"], ["proof (state)\nthis:\n  is_cnf (foldr (\\<^bold>\\<and>) fs (\\<^bold>\\<not> \\<bottom>))\n\ngoal (2 subgoals):\n 1. Ball (set []) is_cnf \\<Longrightarrow>\n    is_cnf (foldr (\\<^bold>\\<and>) [] (\\<^bold>\\<not> \\<bottom>))\n 2. \\<And>a fs.\n       \\<lbrakk>Ball (set fs) is_cnf \\<Longrightarrow>\n                is_cnf\n                 (foldr (\\<^bold>\\<and>) fs (\\<^bold>\\<not> \\<bottom>));\n        Ball (set (a # fs)) is_cnf\\<rbrakk>\n       \\<Longrightarrow> is_cnf\n                          (foldr (\\<^bold>\\<and>) (a # fs)\n                            (\\<^bold>\\<not> \\<bottom>))", "moreover"], ["proof (state)\nthis:\n  is_cnf (foldr (\\<^bold>\\<and>) fs (\\<^bold>\\<not> \\<bottom>))\n\ngoal (2 subgoals):\n 1. Ball (set []) is_cnf \\<Longrightarrow>\n    is_cnf (foldr (\\<^bold>\\<and>) [] (\\<^bold>\\<not> \\<bottom>))\n 2. \\<And>a fs.\n       \\<lbrakk>Ball (set fs) is_cnf \\<Longrightarrow>\n                is_cnf\n                 (foldr (\\<^bold>\\<and>) fs (\\<^bold>\\<not> \\<bottom>));\n        Ball (set (a # fs)) is_cnf\\<rbrakk>\n       \\<Longrightarrow> is_cnf\n                          (foldr (\\<^bold>\\<and>) (a # fs)\n                            (\\<^bold>\\<not> \\<bottom>))", "have \"is_cnf f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_cnf f", "using Cons.prems"], ["proof (prove)\nusing this:\n  \\<forall>a\\<in>set (f # fs). is_cnf a\n\ngoal (1 subgoal):\n 1. is_cnf f", "by simp"], ["proof (state)\nthis:\n  is_cnf f\n\ngoal (2 subgoals):\n 1. Ball (set []) is_cnf \\<Longrightarrow>\n    is_cnf (foldr (\\<^bold>\\<and>) [] (\\<^bold>\\<not> \\<bottom>))\n 2. \\<And>a fs.\n       \\<lbrakk>Ball (set fs) is_cnf \\<Longrightarrow>\n                is_cnf\n                 (foldr (\\<^bold>\\<and>) fs (\\<^bold>\\<not> \\<bottom>));\n        Ball (set (a # fs)) is_cnf\\<rbrakk>\n       \\<Longrightarrow> is_cnf\n                          (foldr (\\<^bold>\\<and>) (a # fs)\n                            (\\<^bold>\\<not> \\<bottom>))", "ultimately"], ["proof (chain)\npicking this:\n  foldr (\\<^bold>\\<and>) (f # fs) (\\<^bold>\\<not> \\<bottom>) =\n  f \\<^bold>\\<and> foldr (\\<^bold>\\<and>) fs (\\<^bold>\\<not> \\<bottom>)\n  is_cnf (foldr (\\<^bold>\\<and>) fs (\\<^bold>\\<not> \\<bottom>))\n  is_cnf f", "show ?case"], ["proof (prove)\nusing this:\n  foldr (\\<^bold>\\<and>) (f # fs) (\\<^bold>\\<not> \\<bottom>) =\n  f \\<^bold>\\<and> foldr (\\<^bold>\\<and>) fs (\\<^bold>\\<not> \\<bottom>)\n  is_cnf (foldr (\\<^bold>\\<and>) fs (\\<^bold>\\<not> \\<bottom>))\n  is_cnf f\n\ngoal (1 subgoal):\n 1. is_cnf (foldr (\\<^bold>\\<and>) (f # fs) (\\<^bold>\\<not> \\<bottom>))", "by simp"], ["proof (state)\nthis:\n  is_cnf (foldr (\\<^bold>\\<and>) (f # fs) (\\<^bold>\\<not> \\<bottom>))\n\ngoal (1 subgoal):\n 1. Ball (set []) is_cnf \\<Longrightarrow>\n    is_cnf (foldr (\\<^bold>\\<and>) [] (\\<^bold>\\<not> \\<bottom>))", "qed simp"], ["", "end"]]}