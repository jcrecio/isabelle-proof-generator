{"file_name": "/home/qj213/afp-2021-10-22/thys/Collections/ICF/impl/ListSetImpl_NotDist.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Collections", "problem_names": ["lemmas lsnd_defs = \n  lsnd_\\<alpha>_def\n  lsnd_empty_def\n  lsnd_memb_def\n  lsnd_ins_def\n  lsnd_ins_dj_def\n  lsnd_delete_def\n  lsnd_iteratei_def\n  lsnd_isEmpty_def\n  lsnd_union_def\n  lsnd_union_dj_def\n  lsnd_to_list_def\n  list_to_lsnd_def", "lemma lsnd_empty_impl: \"set_empty lsnd_\\<alpha> lsnd_invar lsnd_empty\"", "lemma lsnd_memb_impl: \"set_memb lsnd_\\<alpha> lsnd_invar lsnd_memb\"", "lemma lsnd_ins_impl: \"set_ins lsnd_\\<alpha> lsnd_invar lsnd_ins\"", "lemma lsnd_ins_dj_impl: \"set_ins_dj lsnd_\\<alpha> lsnd_invar lsnd_ins_dj\"", "lemma lsnd_delete_impl: \"set_delete lsnd_\\<alpha> lsnd_invar lsnd_delete\"", "lemma lsnd_\\<alpha>_finite[simp, intro!]: \"finite (lsnd_\\<alpha> l)\"", "lemma lsnd_is_finite_set: \"finite_set lsnd_\\<alpha> lsnd_invar\"", "lemma lsnd_iteratei_impl: \"poly_set_iteratei lsnd_\\<alpha> lsnd_invar lsnd_iteratei\"", "lemma lsnd_isEmpty_impl: \"set_isEmpty lsnd_\\<alpha> lsnd_invar lsnd_isEmpty\"", "lemma lsnd_union_impl: \"set_union lsnd_\\<alpha> lsnd_invar lsnd_\\<alpha> lsnd_invar lsnd_\\<alpha> lsnd_invar lsnd_union\"", "lemma lsnd_union_dj_impl: \"set_union_dj lsnd_\\<alpha> lsnd_invar lsnd_\\<alpha> lsnd_invar lsnd_\\<alpha> lsnd_invar lsnd_union_dj\"", "lemma lsnd_to_list_impl: \"set_to_list lsnd_\\<alpha> lsnd_invar lsnd_to_list\"", "lemma list_to_lsnd_impl: \"list_to_set lsnd_\\<alpha> lsnd_invar list_to_lsnd\"", "lemma pi_lsnd[proper_it]: \n  \"proper_it' lsnd_iteratei lsnd_iteratei\""], "translations": [["", "lemmas lsnd_defs = \n  lsnd_\\<alpha>_def\n  lsnd_empty_def\n  lsnd_memb_def\n  lsnd_ins_def\n  lsnd_ins_dj_def\n  lsnd_delete_def\n  lsnd_iteratei_def\n  lsnd_isEmpty_def\n  lsnd_union_def\n  lsnd_union_dj_def\n  lsnd_to_list_def\n  list_to_lsnd_def"], ["", "lemma lsnd_empty_impl: \"set_empty lsnd_\\<alpha> lsnd_invar lsnd_empty\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set_empty lsnd_\\<alpha> (\\<lambda>_. True) lsnd_empty", "by (unfold_locales) (auto simp add: lsnd_defs)"], ["", "lemma lsnd_memb_impl: \"set_memb lsnd_\\<alpha> lsnd_invar lsnd_memb\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set_memb lsnd_\\<alpha> (\\<lambda>_. True) lsnd_memb", "by (unfold_locales)(auto simp add: lsnd_defs in_set_member)"], ["", "lemma lsnd_ins_impl: \"set_ins lsnd_\\<alpha> lsnd_invar lsnd_ins\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set_ins lsnd_\\<alpha> (\\<lambda>_. True) lsnd_ins", "by (unfold_locales) (auto simp add: lsnd_defs in_set_member)"], ["", "lemma lsnd_ins_dj_impl: \"set_ins_dj lsnd_\\<alpha> lsnd_invar lsnd_ins_dj\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set_ins_dj lsnd_\\<alpha> (\\<lambda>_. True) lsnd_ins_dj", "by (unfold_locales) (auto simp add: lsnd_defs)"], ["", "lemma lsnd_delete_impl: \"set_delete lsnd_\\<alpha> lsnd_invar lsnd_delete\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set_delete lsnd_\\<alpha> (\\<lambda>_. True) lsnd_delete", "by (unfold_locales) (auto simp add: lsnd_delete_def lsnd_\\<alpha>_def remove_rev_alt_def)"], ["", "lemma lsnd_\\<alpha>_finite[simp, intro!]: \"finite (lsnd_\\<alpha> l)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (lsnd_\\<alpha> l)", "by (auto simp add: lsnd_defs)"], ["", "lemma lsnd_is_finite_set: \"finite_set lsnd_\\<alpha> lsnd_invar\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite_set lsnd_\\<alpha> (\\<lambda>_. True)", "by (unfold_locales) (auto simp add: lsnd_defs)"], ["", "lemma lsnd_iteratei_impl: \"poly_set_iteratei lsnd_\\<alpha> lsnd_invar lsnd_iteratei\""], ["proof (prove)\ngoal (1 subgoal):\n 1. poly_set_iteratei lsnd_\\<alpha> (\\<lambda>_. True) lsnd_iteratei", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>s. True \\<Longrightarrow> finite (lsnd_\\<alpha> s)\n 2. \\<And>s.\n       True \\<Longrightarrow>\n       set_iterator (lsnd_iteratei s) (lsnd_\\<alpha> s)", "fix l :: \"'a list\""], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>s. True \\<Longrightarrow> finite (lsnd_\\<alpha> s)\n 2. \\<And>s.\n       True \\<Longrightarrow>\n       set_iterator (lsnd_iteratei s) (lsnd_\\<alpha> s)", "show \"finite (lsnd_\\<alpha> l)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (lsnd_\\<alpha> l)", "unfolding lsnd_\\<alpha>_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (set l)", "by simp"], ["proof (state)\nthis:\n  finite (lsnd_\\<alpha> l)\n\ngoal (1 subgoal):\n 1. \\<And>s.\n       True \\<Longrightarrow>\n       set_iterator (lsnd_iteratei s) (lsnd_\\<alpha> s)", "show \"set_iterator (lsnd_iteratei l) (lsnd_\\<alpha> l)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set_iterator (lsnd_iteratei l) (lsnd_\\<alpha> l)", "apply (rule set_iterator_I [of \"remdups l\"])"], ["proof (prove)\ngoal (3 subgoals):\n 1. distinct (remdups l)\n 2. lsnd_\\<alpha> l = set (remdups l)\n 3. lsnd_iteratei l = foldli (remdups l)", "apply (simp_all add: lsnd_\\<alpha>_def lsnd_iteratei_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  set_iterator (lsnd_iteratei l) (lsnd_\\<alpha> l)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma lsnd_isEmpty_impl: \"set_isEmpty lsnd_\\<alpha> lsnd_invar lsnd_isEmpty\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set_isEmpty lsnd_\\<alpha> (\\<lambda>_. True) lsnd_isEmpty", "by(unfold_locales)(auto simp add: lsnd_defs)"], ["", "lemma lsnd_union_impl: \"set_union lsnd_\\<alpha> lsnd_invar lsnd_\\<alpha> lsnd_invar lsnd_\\<alpha> lsnd_invar lsnd_union\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set_union lsnd_\\<alpha> (\\<lambda>_. True) lsnd_\\<alpha>\n     (\\<lambda>_. True) lsnd_\\<alpha> (\\<lambda>_. True) lsnd_union", "by(unfold_locales)(auto simp add: lsnd_defs)"], ["", "lemma lsnd_union_dj_impl: \"set_union_dj lsnd_\\<alpha> lsnd_invar lsnd_\\<alpha> lsnd_invar lsnd_\\<alpha> lsnd_invar lsnd_union_dj\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set_union_dj lsnd_\\<alpha> (\\<lambda>_. True) lsnd_\\<alpha>\n     (\\<lambda>_. True) lsnd_\\<alpha> (\\<lambda>_. True) lsnd_union_dj", "by(unfold_locales)(auto simp add: lsnd_defs)"], ["", "lemma lsnd_to_list_impl: \"set_to_list lsnd_\\<alpha> lsnd_invar lsnd_to_list\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set_to_list lsnd_\\<alpha> (\\<lambda>_. True) lsnd_to_list", "by(unfold_locales)(auto simp add: lsnd_defs)"], ["", "lemma list_to_lsnd_impl: \"list_to_set lsnd_\\<alpha> lsnd_invar list_to_lsnd\""], ["proof (prove)\ngoal (1 subgoal):\n 1. list_to_set lsnd_\\<alpha> (\\<lambda>_. True) list_to_lsnd", "by(unfold_locales)(auto simp add: lsnd_defs)"], ["", "definition lsnd_basic_ops :: \"('x,'x lsnd) set_basic_ops\" \n  where [icf_rec_def]: \"lsnd_basic_ops \\<equiv> \\<lparr>\n    bset_op_\\<alpha> = lsnd_\\<alpha>,\n    bset_op_invar = lsnd_invar,\n    bset_op_empty = lsnd_empty,\n    bset_op_memb = lsnd_memb,\n    bset_op_ins = lsnd_ins,\n    bset_op_ins_dj = lsnd_ins_dj,\n    bset_op_delete = lsnd_delete,\n    bset_op_list_it = lsnd_iteratei\n  \\<rparr>\""], ["", "setup Locale_Code.open_block"], ["", "interpretation lsnd_basic: StdBasicSet lsnd_basic_ops"], ["proof (prove)\ngoal (1 subgoal):\n 1. StdBasicSet lsnd_basic_ops", "apply (rule StdBasicSet.intro)"], ["proof (prove)\ngoal (6 subgoals):\n 1. set_empty (bset_op_\\<alpha> lsnd_basic_ops)\n     (bset_op_invar lsnd_basic_ops) (bset_op_empty lsnd_basic_ops)\n 2. set_memb (bset_op_\\<alpha> lsnd_basic_ops)\n     (bset_op_invar lsnd_basic_ops) (bset_op_memb lsnd_basic_ops)\n 3. set_ins (bset_op_\\<alpha> lsnd_basic_ops) (bset_op_invar lsnd_basic_ops)\n     (bset_op_ins lsnd_basic_ops)\n 4. set_ins_dj (bset_op_\\<alpha> lsnd_basic_ops)\n     (bset_op_invar lsnd_basic_ops) (bset_op_ins_dj lsnd_basic_ops)\n 5. set_delete (bset_op_\\<alpha> lsnd_basic_ops)\n     (bset_op_invar lsnd_basic_ops) (bset_op_delete lsnd_basic_ops)\n 6. poly_set_iteratei (bset_op_\\<alpha> lsnd_basic_ops)\n     (bset_op_invar lsnd_basic_ops) (bset_op_list_it lsnd_basic_ops)", "apply (simp_all add: icf_rec_unf)"], ["proof (prove)\ngoal (6 subgoals):\n 1. set_empty lsnd_\\<alpha> (\\<lambda>_. True) lsnd_empty\n 2. set_memb lsnd_\\<alpha> (\\<lambda>_. True) lsnd_memb\n 3. set_ins lsnd_\\<alpha> (\\<lambda>_. True) lsnd_ins\n 4. set_ins_dj lsnd_\\<alpha> (\\<lambda>_. True) lsnd_ins_dj\n 5. set_delete lsnd_\\<alpha> (\\<lambda>_. True) lsnd_delete\n 6. poly_set_iteratei lsnd_\\<alpha> (\\<lambda>_. True) lsnd_iteratei", "apply (rule lsnd_empty_impl lsnd_memb_impl lsnd_ins_impl lsnd_ins_dj_impl\n    lsnd_delete_impl lsnd_iteratei_impl)+"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "setup Locale_Code.close_block"], ["", "definition [icf_rec_def]: \"lsnd_ops \\<equiv> lsnd_basic.dflt_ops \\<lparr>\n  set_op_isEmpty := lsnd_isEmpty,\n  set_op_union := lsnd_union,\n  set_op_union_dj := lsnd_union_dj,\n  set_op_to_list := lsnd_to_list,\n  set_op_from_list := list_to_lsnd\n  \\<rparr>\""], ["", "setup Locale_Code.open_block"], ["", "interpretation lsnd: StdSetDefs lsnd_ops"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "interpretation lsnd: StdSet lsnd_ops"], ["proof (prove)\ngoal (1 subgoal):\n 1. StdSet lsnd_ops", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. StdSet lsnd_ops", "interpret aux: StdSet lsnd_basic.dflt_ops"], ["proof (prove)\ngoal (1 subgoal):\n 1. StdSet lsnd_basic.dflt_ops", "by (rule lsnd_basic.dflt_ops_impl)"], ["proof (state)\ngoal (1 subgoal):\n 1. StdSet lsnd_ops", "show \"StdSet lsnd_ops\""], ["proof (prove)\ngoal (1 subgoal):\n 1. StdSet lsnd_ops", "unfolding lsnd_ops_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. StdSet\n     (lsnd_basic.dflt_ops\n      \\<lparr>set_op_isEmpty := lsnd_isEmpty, set_op_union := lsnd_union,\n         set_op_union_dj := lsnd_union_dj, set_op_to_list := lsnd_to_list,\n         set_op_from_list := list_to_lsnd\\<rparr>)", "apply (rule StdSet_intro)"], ["proof (prove)\ngoal (25 subgoals):\n 1. set_empty\n     (set_op_\\<alpha>\n       (lsnd_basic.dflt_ops\n        \\<lparr>set_op_isEmpty := lsnd_isEmpty, set_op_union := lsnd_union,\n           set_op_union_dj := lsnd_union_dj, set_op_to_list := lsnd_to_list,\n           set_op_from_list := list_to_lsnd\\<rparr>))\n     (set_op_invar\n       (lsnd_basic.dflt_ops\n        \\<lparr>set_op_isEmpty := lsnd_isEmpty, set_op_union := lsnd_union,\n           set_op_union_dj := lsnd_union_dj, set_op_to_list := lsnd_to_list,\n           set_op_from_list := list_to_lsnd\\<rparr>))\n     (set_op_empty\n       (lsnd_basic.dflt_ops\n        \\<lparr>set_op_isEmpty := lsnd_isEmpty, set_op_union := lsnd_union,\n           set_op_union_dj := lsnd_union_dj, set_op_to_list := lsnd_to_list,\n           set_op_from_list := list_to_lsnd\\<rparr>))\n 2. set_memb\n     (set_op_\\<alpha>\n       (lsnd_basic.dflt_ops\n        \\<lparr>set_op_isEmpty := lsnd_isEmpty, set_op_union := lsnd_union,\n           set_op_union_dj := lsnd_union_dj, set_op_to_list := lsnd_to_list,\n           set_op_from_list := list_to_lsnd\\<rparr>))\n     (set_op_invar\n       (lsnd_basic.dflt_ops\n        \\<lparr>set_op_isEmpty := lsnd_isEmpty, set_op_union := lsnd_union,\n           set_op_union_dj := lsnd_union_dj, set_op_to_list := lsnd_to_list,\n           set_op_from_list := list_to_lsnd\\<rparr>))\n     (set_op_memb\n       (lsnd_basic.dflt_ops\n        \\<lparr>set_op_isEmpty := lsnd_isEmpty, set_op_union := lsnd_union,\n           set_op_union_dj := lsnd_union_dj, set_op_to_list := lsnd_to_list,\n           set_op_from_list := list_to_lsnd\\<rparr>))\n 3. set_ins\n     (set_op_\\<alpha>\n       (lsnd_basic.dflt_ops\n        \\<lparr>set_op_isEmpty := lsnd_isEmpty, set_op_union := lsnd_union,\n           set_op_union_dj := lsnd_union_dj, set_op_to_list := lsnd_to_list,\n           set_op_from_list := list_to_lsnd\\<rparr>))\n     (set_op_invar\n       (lsnd_basic.dflt_ops\n        \\<lparr>set_op_isEmpty := lsnd_isEmpty, set_op_union := lsnd_union,\n           set_op_union_dj := lsnd_union_dj, set_op_to_list := lsnd_to_list,\n           set_op_from_list := list_to_lsnd\\<rparr>))\n     (set_op_ins\n       (lsnd_basic.dflt_ops\n        \\<lparr>set_op_isEmpty := lsnd_isEmpty, set_op_union := lsnd_union,\n           set_op_union_dj := lsnd_union_dj, set_op_to_list := lsnd_to_list,\n           set_op_from_list := list_to_lsnd\\<rparr>))\n 4. set_ins_dj\n     (set_op_\\<alpha>\n       (lsnd_basic.dflt_ops\n        \\<lparr>set_op_isEmpty := lsnd_isEmpty, set_op_union := lsnd_union,\n           set_op_union_dj := lsnd_union_dj, set_op_to_list := lsnd_to_list,\n           set_op_from_list := list_to_lsnd\\<rparr>))\n     (set_op_invar\n       (lsnd_basic.dflt_ops\n        \\<lparr>set_op_isEmpty := lsnd_isEmpty, set_op_union := lsnd_union,\n           set_op_union_dj := lsnd_union_dj, set_op_to_list := lsnd_to_list,\n           set_op_from_list := list_to_lsnd\\<rparr>))\n     (set_op_ins_dj\n       (lsnd_basic.dflt_ops\n        \\<lparr>set_op_isEmpty := lsnd_isEmpty, set_op_union := lsnd_union,\n           set_op_union_dj := lsnd_union_dj, set_op_to_list := lsnd_to_list,\n           set_op_from_list := list_to_lsnd\\<rparr>))\n 5. set_delete\n     (set_op_\\<alpha>\n       (lsnd_basic.dflt_ops\n        \\<lparr>set_op_isEmpty := lsnd_isEmpty, set_op_union := lsnd_union,\n           set_op_union_dj := lsnd_union_dj, set_op_to_list := lsnd_to_list,\n           set_op_from_list := list_to_lsnd\\<rparr>))\n     (set_op_invar\n       (lsnd_basic.dflt_ops\n        \\<lparr>set_op_isEmpty := lsnd_isEmpty, set_op_union := lsnd_union,\n           set_op_union_dj := lsnd_union_dj, set_op_to_list := lsnd_to_list,\n           set_op_from_list := list_to_lsnd\\<rparr>))\n     (set_op_delete\n       (lsnd_basic.dflt_ops\n        \\<lparr>set_op_isEmpty := lsnd_isEmpty, set_op_union := lsnd_union,\n           set_op_union_dj := lsnd_union_dj, set_op_to_list := lsnd_to_list,\n           set_op_from_list := list_to_lsnd\\<rparr>))\n 6. poly_set_iteratei\n     (set_op_\\<alpha>\n       (lsnd_basic.dflt_ops\n        \\<lparr>set_op_isEmpty := lsnd_isEmpty, set_op_union := lsnd_union,\n           set_op_union_dj := lsnd_union_dj, set_op_to_list := lsnd_to_list,\n           set_op_from_list := list_to_lsnd\\<rparr>))\n     (set_op_invar\n       (lsnd_basic.dflt_ops\n        \\<lparr>set_op_isEmpty := lsnd_isEmpty, set_op_union := lsnd_union,\n           set_op_union_dj := lsnd_union_dj, set_op_to_list := lsnd_to_list,\n           set_op_from_list := list_to_lsnd\\<rparr>))\n     (set_op_list_it\n       (lsnd_basic.dflt_ops\n        \\<lparr>set_op_isEmpty := lsnd_isEmpty, set_op_union := lsnd_union,\n           set_op_union_dj := lsnd_union_dj, set_op_to_list := lsnd_to_list,\n           set_op_from_list := list_to_lsnd\\<rparr>))\n 7. set_sng\n     (set_op_\\<alpha>\n       (lsnd_basic.dflt_ops\n        \\<lparr>set_op_isEmpty := lsnd_isEmpty, set_op_union := lsnd_union,\n           set_op_union_dj := lsnd_union_dj, set_op_to_list := lsnd_to_list,\n           set_op_from_list := list_to_lsnd\\<rparr>))\n     (set_op_invar\n       (lsnd_basic.dflt_ops\n        \\<lparr>set_op_isEmpty := lsnd_isEmpty, set_op_union := lsnd_union,\n           set_op_union_dj := lsnd_union_dj, set_op_to_list := lsnd_to_list,\n           set_op_from_list := list_to_lsnd\\<rparr>))\n     (set_op_sng\n       (lsnd_basic.dflt_ops\n        \\<lparr>set_op_isEmpty := lsnd_isEmpty, set_op_union := lsnd_union,\n           set_op_union_dj := lsnd_union_dj, set_op_to_list := lsnd_to_list,\n           set_op_from_list := list_to_lsnd\\<rparr>))\n 8. set_isEmpty\n     (set_op_\\<alpha>\n       (lsnd_basic.dflt_ops\n        \\<lparr>set_op_isEmpty := lsnd_isEmpty, set_op_union := lsnd_union,\n           set_op_union_dj := lsnd_union_dj, set_op_to_list := lsnd_to_list,\n           set_op_from_list := list_to_lsnd\\<rparr>))\n     (set_op_invar\n       (lsnd_basic.dflt_ops\n        \\<lparr>set_op_isEmpty := lsnd_isEmpty, set_op_union := lsnd_union,\n           set_op_union_dj := lsnd_union_dj, set_op_to_list := lsnd_to_list,\n           set_op_from_list := list_to_lsnd\\<rparr>))\n     (set_op_isEmpty\n       (lsnd_basic.dflt_ops\n        \\<lparr>set_op_isEmpty := lsnd_isEmpty, set_op_union := lsnd_union,\n           set_op_union_dj := lsnd_union_dj, set_op_to_list := lsnd_to_list,\n           set_op_from_list := list_to_lsnd\\<rparr>))\n 9. set_isSng\n     (set_op_\\<alpha>\n       (lsnd_basic.dflt_ops\n        \\<lparr>set_op_isEmpty := lsnd_isEmpty, set_op_union := lsnd_union,\n           set_op_union_dj := lsnd_union_dj, set_op_to_list := lsnd_to_list,\n           set_op_from_list := list_to_lsnd\\<rparr>))\n     (set_op_invar\n       (lsnd_basic.dflt_ops\n        \\<lparr>set_op_isEmpty := lsnd_isEmpty, set_op_union := lsnd_union,\n           set_op_union_dj := lsnd_union_dj, set_op_to_list := lsnd_to_list,\n           set_op_from_list := list_to_lsnd\\<rparr>))\n     (set_op_isSng\n       (lsnd_basic.dflt_ops\n        \\<lparr>set_op_isEmpty := lsnd_isEmpty, set_op_union := lsnd_union,\n           set_op_union_dj := lsnd_union_dj, set_op_to_list := lsnd_to_list,\n           set_op_from_list := list_to_lsnd\\<rparr>))\n 10. set_ball\n      (set_op_\\<alpha>\n        (lsnd_basic.dflt_ops\n         \\<lparr>set_op_isEmpty := lsnd_isEmpty, set_op_union := lsnd_union,\n            set_op_union_dj := lsnd_union_dj,\n            set_op_to_list := lsnd_to_list,\n            set_op_from_list := list_to_lsnd\\<rparr>))\n      (set_op_invar\n        (lsnd_basic.dflt_ops\n         \\<lparr>set_op_isEmpty := lsnd_isEmpty, set_op_union := lsnd_union,\n            set_op_union_dj := lsnd_union_dj,\n            set_op_to_list := lsnd_to_list,\n            set_op_from_list := list_to_lsnd\\<rparr>))\n      (set_op_ball\n        (lsnd_basic.dflt_ops\n         \\<lparr>set_op_isEmpty := lsnd_isEmpty, set_op_union := lsnd_union,\n            set_op_union_dj := lsnd_union_dj,\n            set_op_to_list := lsnd_to_list,\n            set_op_from_list := list_to_lsnd\\<rparr>))\nA total of 25 subgoals...", "apply icf_locales"], ["proof (prove)\ngoal (5 subgoals):\n 1. set_isEmpty\n     (set_op_\\<alpha>\n       (lsnd_basic.dflt_ops\n        \\<lparr>set_op_isEmpty := lsnd_isEmpty, set_op_union := lsnd_union,\n           set_op_union_dj := lsnd_union_dj, set_op_to_list := lsnd_to_list,\n           set_op_from_list := list_to_lsnd\\<rparr>))\n     (set_op_invar\n       (lsnd_basic.dflt_ops\n        \\<lparr>set_op_isEmpty := lsnd_isEmpty, set_op_union := lsnd_union,\n           set_op_union_dj := lsnd_union_dj, set_op_to_list := lsnd_to_list,\n           set_op_from_list := list_to_lsnd\\<rparr>))\n     (set_op_isEmpty\n       (lsnd_basic.dflt_ops\n        \\<lparr>set_op_isEmpty := lsnd_isEmpty, set_op_union := lsnd_union,\n           set_op_union_dj := lsnd_union_dj, set_op_to_list := lsnd_to_list,\n           set_op_from_list := list_to_lsnd\\<rparr>))\n 2. set_union\n     (set_op_\\<alpha>\n       (lsnd_basic.dflt_ops\n        \\<lparr>set_op_isEmpty := lsnd_isEmpty, set_op_union := lsnd_union,\n           set_op_union_dj := lsnd_union_dj, set_op_to_list := lsnd_to_list,\n           set_op_from_list := list_to_lsnd\\<rparr>))\n     (set_op_invar\n       (lsnd_basic.dflt_ops\n        \\<lparr>set_op_isEmpty := lsnd_isEmpty, set_op_union := lsnd_union,\n           set_op_union_dj := lsnd_union_dj, set_op_to_list := lsnd_to_list,\n           set_op_from_list := list_to_lsnd\\<rparr>))\n     (set_op_\\<alpha>\n       (lsnd_basic.dflt_ops\n        \\<lparr>set_op_isEmpty := lsnd_isEmpty, set_op_union := lsnd_union,\n           set_op_union_dj := lsnd_union_dj, set_op_to_list := lsnd_to_list,\n           set_op_from_list := list_to_lsnd\\<rparr>))\n     (set_op_invar\n       (lsnd_basic.dflt_ops\n        \\<lparr>set_op_isEmpty := lsnd_isEmpty, set_op_union := lsnd_union,\n           set_op_union_dj := lsnd_union_dj, set_op_to_list := lsnd_to_list,\n           set_op_from_list := list_to_lsnd\\<rparr>))\n     (set_op_\\<alpha>\n       (lsnd_basic.dflt_ops\n        \\<lparr>set_op_isEmpty := lsnd_isEmpty, set_op_union := lsnd_union,\n           set_op_union_dj := lsnd_union_dj, set_op_to_list := lsnd_to_list,\n           set_op_from_list := list_to_lsnd\\<rparr>))\n     (set_op_invar\n       (lsnd_basic.dflt_ops\n        \\<lparr>set_op_isEmpty := lsnd_isEmpty, set_op_union := lsnd_union,\n           set_op_union_dj := lsnd_union_dj, set_op_to_list := lsnd_to_list,\n           set_op_from_list := list_to_lsnd\\<rparr>))\n     (set_op_union\n       (lsnd_basic.dflt_ops\n        \\<lparr>set_op_isEmpty := lsnd_isEmpty, set_op_union := lsnd_union,\n           set_op_union_dj := lsnd_union_dj, set_op_to_list := lsnd_to_list,\n           set_op_from_list := list_to_lsnd\\<rparr>))\n 3. set_union_dj\n     (set_op_\\<alpha>\n       (lsnd_basic.dflt_ops\n        \\<lparr>set_op_isEmpty := lsnd_isEmpty, set_op_union := lsnd_union,\n           set_op_union_dj := lsnd_union_dj, set_op_to_list := lsnd_to_list,\n           set_op_from_list := list_to_lsnd\\<rparr>))\n     (set_op_invar\n       (lsnd_basic.dflt_ops\n        \\<lparr>set_op_isEmpty := lsnd_isEmpty, set_op_union := lsnd_union,\n           set_op_union_dj := lsnd_union_dj, set_op_to_list := lsnd_to_list,\n           set_op_from_list := list_to_lsnd\\<rparr>))\n     (set_op_\\<alpha>\n       (lsnd_basic.dflt_ops\n        \\<lparr>set_op_isEmpty := lsnd_isEmpty, set_op_union := lsnd_union,\n           set_op_union_dj := lsnd_union_dj, set_op_to_list := lsnd_to_list,\n           set_op_from_list := list_to_lsnd\\<rparr>))\n     (set_op_invar\n       (lsnd_basic.dflt_ops\n        \\<lparr>set_op_isEmpty := lsnd_isEmpty, set_op_union := lsnd_union,\n           set_op_union_dj := lsnd_union_dj, set_op_to_list := lsnd_to_list,\n           set_op_from_list := list_to_lsnd\\<rparr>))\n     (set_op_\\<alpha>\n       (lsnd_basic.dflt_ops\n        \\<lparr>set_op_isEmpty := lsnd_isEmpty, set_op_union := lsnd_union,\n           set_op_union_dj := lsnd_union_dj, set_op_to_list := lsnd_to_list,\n           set_op_from_list := list_to_lsnd\\<rparr>))\n     (set_op_invar\n       (lsnd_basic.dflt_ops\n        \\<lparr>set_op_isEmpty := lsnd_isEmpty, set_op_union := lsnd_union,\n           set_op_union_dj := lsnd_union_dj, set_op_to_list := lsnd_to_list,\n           set_op_from_list := list_to_lsnd\\<rparr>))\n     (set_op_union_dj\n       (lsnd_basic.dflt_ops\n        \\<lparr>set_op_isEmpty := lsnd_isEmpty, set_op_union := lsnd_union,\n           set_op_union_dj := lsnd_union_dj, set_op_to_list := lsnd_to_list,\n           set_op_from_list := list_to_lsnd\\<rparr>))\n 4. set_to_list\n     (set_op_\\<alpha>\n       (lsnd_basic.dflt_ops\n        \\<lparr>set_op_isEmpty := lsnd_isEmpty, set_op_union := lsnd_union,\n           set_op_union_dj := lsnd_union_dj, set_op_to_list := lsnd_to_list,\n           set_op_from_list := list_to_lsnd\\<rparr>))\n     (set_op_invar\n       (lsnd_basic.dflt_ops\n        \\<lparr>set_op_isEmpty := lsnd_isEmpty, set_op_union := lsnd_union,\n           set_op_union_dj := lsnd_union_dj, set_op_to_list := lsnd_to_list,\n           set_op_from_list := list_to_lsnd\\<rparr>))\n     (set_op_to_list\n       (lsnd_basic.dflt_ops\n        \\<lparr>set_op_isEmpty := lsnd_isEmpty, set_op_union := lsnd_union,\n           set_op_union_dj := lsnd_union_dj, set_op_to_list := lsnd_to_list,\n           set_op_from_list := list_to_lsnd\\<rparr>))\n 5. list_to_set\n     (set_op_\\<alpha>\n       (lsnd_basic.dflt_ops\n        \\<lparr>set_op_isEmpty := lsnd_isEmpty, set_op_union := lsnd_union,\n           set_op_union_dj := lsnd_union_dj, set_op_to_list := lsnd_to_list,\n           set_op_from_list := list_to_lsnd\\<rparr>))\n     (set_op_invar\n       (lsnd_basic.dflt_ops\n        \\<lparr>set_op_isEmpty := lsnd_isEmpty, set_op_union := lsnd_union,\n           set_op_union_dj := lsnd_union_dj, set_op_to_list := lsnd_to_list,\n           set_op_from_list := list_to_lsnd\\<rparr>))\n     (set_op_from_list\n       (lsnd_basic.dflt_ops\n        \\<lparr>set_op_isEmpty := lsnd_isEmpty, set_op_union := lsnd_union,\n           set_op_union_dj := lsnd_union_dj, set_op_to_list := lsnd_to_list,\n           set_op_from_list := list_to_lsnd\\<rparr>))", "apply (simp_all add: icf_rec_unf\n      lsnd_isEmpty_impl lsnd_union_impl lsnd_union_dj_impl lsnd_to_list_impl\n      list_to_lsnd_impl\n    )"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  StdSet lsnd_ops\n\ngoal:\nNo subgoals!", "qed"], ["", "interpretation lsnd: StdSet_no_invar lsnd_ops"], ["proof (prove)\ngoal (1 subgoal):\n 1. StdSet_no_invar lsnd_ops", "by unfold_locales (simp add: icf_rec_unf)"], ["", "setup Locale_Code.close_block"], ["", "setup \\<open>ICF_Tools.revert_abbrevs \"lsnd\"\\<close>"], ["", "lemma pi_lsnd[proper_it]: \n  \"proper_it' lsnd_iteratei lsnd_iteratei\""], ["proof (prove)\ngoal (1 subgoal):\n 1. proper_it' lsnd_iteratei lsnd_iteratei", "apply (rule proper_it'I)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>s. proper_it (lsnd_iteratei s) (lsnd_iteratei s)", "unfolding lsnd_iteratei_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>s. proper_it (foldli (remdups s)) (foldli (remdups s))", "by (intro icf_proper_iteratorI)"], ["", "interpretation pi_lsnd: proper_it_loc lsnd_iteratei lsnd_iteratei"], ["proof (prove)\ngoal (1 subgoal):\n 1. proper_it_loc lsnd_iteratei lsnd_iteratei", "apply unfold_locales"], ["proof (prove)\ngoal (1 subgoal):\n 1. proper_it' lsnd_iteratei lsnd_iteratei", "by (rule pi_lsnd)"], ["", "definition test_codegen where \"test_codegen \\<equiv> (\n  lsnd.empty,\n  lsnd.memb,\n  lsnd.ins,\n  lsnd.delete,\n  lsnd.list_it,\n  lsnd.sng,\n  lsnd.isEmpty,\n  lsnd.isSng,\n  lsnd.ball,\n  lsnd.bex,\n  lsnd.size,\n  lsnd.size_abort,\n  lsnd.union,\n  lsnd.union_dj,\n  lsnd.diff,\n  lsnd.filter,\n  lsnd.inter,\n  lsnd.subset,\n  lsnd.equal,\n  lsnd.disjoint,\n  lsnd.disjoint_witness,\n  lsnd.sel,\n  lsnd.to_list,\n  lsnd.from_list\n)\""], ["", "export_code test_codegen checking SML"], ["", "end"]]}