{"file_name": "/home/qj213/afp-2021-10-22/thys/Collections/ICF/impl/ListMapImpl_Invar.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Collections", "problem_names": ["lemma pi_lmi[proper_it]: \n  \"proper_it' foldli foldli\"", "lemma lmi_from_list_dj_correct: \n  assumes [simp]: \"distinct (map fst l)\"\n  shows \"lmi.\\<alpha> (lmi_from_list_dj l) = map_of l\"\n        \"lmi.invar (lmi_from_list_dj l)\""], "translations": [["", "lemma pi_lmi[proper_it]: \n  \"proper_it' foldli foldli\""], ["proof (prove)\ngoal (1 subgoal):\n 1. proper_it' foldli foldli", "by (intro proper_it'I icf_proper_iteratorI)"], ["", "interpretation pi_lmi: proper_it_loc foldli foldli"], ["proof (prove)\ngoal (1 subgoal):\n 1. proper_it_loc foldli foldli", "apply unfold_locales"], ["proof (prove)\ngoal (1 subgoal):\n 1. proper_it' foldli foldli", "apply (rule pi_lmi)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "definition lmi_from_list_dj :: \"('k\\<times>'v) list \\<Rightarrow> ('k,'v) lmi\" where\n  \"lmi_from_list_dj \\<equiv> id\""], ["", "lemma lmi_from_list_dj_correct: \n  assumes [simp]: \"distinct (map fst l)\"\n  shows \"lmi.\\<alpha> (lmi_from_list_dj l) = map_of l\"\n        \"lmi.invar (lmi_from_list_dj l)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lmi.\\<alpha> (lmi_from_list_dj l) = map_of l &&&\n    lmi.invar (lmi_from_list_dj l)", "by (auto simp add: lmi_from_list_dj_def icf_rec_unf lmi_\\<alpha>_def lmi_invar_def)"], ["", "text \\<open>Code generator test\\<close>"], ["", "definition \"test_codegen \\<equiv> (\n  lmi.add ,\n  lmi.add_dj ,\n  lmi.ball ,\n  lmi.bex ,\n  lmi.delete ,\n  lmi.empty ,\n  lmi.isEmpty ,\n  lmi.isSng ,\n  lmi.iterate ,\n  lmi.iteratei ,\n  lmi.list_it ,\n  lmi.lookup ,\n  lmi.restrict ,\n  lmi.sel ,\n  lmi.size ,\n  lmi.size_abort ,\n  lmi.sng ,\n  lmi.to_list ,\n  lmi.to_map ,\n  lmi.update ,\n  lmi.update_dj,\n  lmi_from_list_dj\n  )\""], ["", "export_code test_codegen checking SML"], ["", "end"]]}