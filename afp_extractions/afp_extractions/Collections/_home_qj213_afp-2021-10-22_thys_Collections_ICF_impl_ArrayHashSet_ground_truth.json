{"file_name": "/home/qj213/afp-2021-10-22/thys/Collections/ICF/impl/ArrayHashSet.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Collections", "problem_names": ["lemmas ahs_it_to_it_map_code_unfold[code_unfold] = \n  it_to_it_map_fold'[OF pi_ahm]", "lemma pi_ahs[proper_it]: \"proper_it' ahs.iteratei ahs.iteratei\""], "translations": [["", "lemmas ahs_it_to_it_map_code_unfold[code_unfold] = \n  it_to_it_map_fold'[OF pi_ahm]"], ["", "lemma pi_ahs[proper_it]: \"proper_it' ahs.iteratei ahs.iteratei\""], ["proof (prove)\ngoal (1 subgoal):\n 1. proper_it' ahs.iteratei ahs.iteratei", "unfolding ahs.iteratei_def[abs_def]"], ["proof (prove)\ngoal (1 subgoal):\n 1. proper_it' (\\<lambda>S. it_to_it (ahs.list_it S))\n     (\\<lambda>S. it_to_it (ahs.list_it S))", "by (rule proper_it'I icf_proper_iteratorI)+"], ["", "interpretation pi_ahs: proper_it_loc ahs.iteratei ahs.iteratei"], ["proof (prove)\ngoal (1 subgoal):\n 1. proper_it_loc ahs.iteratei ahs.iteratei", "by unfold_locales (rule pi_ahs)"], ["", "definition test_codegen where \"test_codegen \\<equiv> (\n  ahs.empty,\n  ahs.memb,\n  ahs.ins,\n  ahs.delete,\n  ahs.list_it,\n  ahs.sng,\n  ahs.isEmpty,\n  ahs.isSng,\n  ahs.ball,\n  ahs.bex,\n  ahs.size,\n  ahs.size_abort,\n  ahs.union,\n  ahs.union_dj,\n  ahs.diff,\n  ahs.filter,\n  ahs.inter,\n  ahs.subset,\n  ahs.equal,\n  ahs.disjoint,\n  ahs.disjoint_witness,\n  ahs.sel,\n  ahs.to_list,\n  ahs.from_list\n)\""], ["", "export_code test_codegen checking SML"], ["", "end"]]}