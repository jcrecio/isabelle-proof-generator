{"file_name": "/home/qj213/afp-2021-10-22/thys/Collections/Examples/Autoref/Succ_Graph.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Collections", "problem_names": ["lemma slg_rel_def: \"\\<langle>R\\<rangle>slg_rel \\<equiv> \n  {(succs,G). \\<forall>v. (succs v, G``{v}) \\<in> \\<langle>R\\<rangle>list_set_rel}\"", "lemma [relator_props]: \"single_valued R \\<Longrightarrow> single_valued (\\<langle>R\\<rangle>slg_rel)\"", "lemmas [autoref_rel_intf] =\n  REL_INTFI[of slg_rel i_slg]", "lemma [autoref_itype]: \"slg_succs ::\\<^sub>i \\<langle>I\\<rangle>\\<^sub>ii_slg \\<rightarrow>\\<^sub>i I \\<rightarrow>\\<^sub>i \\<langle>I\\<rangle>\\<^sub>ii_set\"", "lemma [autoref_op_pat]: \"E``{v} \\<equiv> slg_succs$E$v\"", "lemma refine_slg_succs[autoref_rules_raw]: \n  \"(slg_succs_impl,slg_succs)\\<in>\\<langle>Id\\<rangle>slg_rel\\<rightarrow>Id\\<rightarrow>\\<langle>Id\\<rangle>list_set_rel\""], "translations": [["", "lemma slg_rel_def: \"\\<langle>R\\<rangle>slg_rel \\<equiv> \n  {(succs,G). \\<forall>v. (succs v, G``{v}) \\<in> \\<langle>R\\<rangle>list_set_rel}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<langle>R\\<rangle>slg_rel \\<equiv>\n    {(succs, G).\n     \\<forall>v. (succs v, G `` {v}) \\<in> \\<langle>R\\<rangle>list_set_rel}", "by (auto simp: slg_rel_def_internal relAPP_def)"], ["", "lemma [relator_props]: \"single_valued R \\<Longrightarrow> single_valued (\\<langle>R\\<rangle>slg_rel)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. single_valued R \\<Longrightarrow>\n    single_valued (\\<langle>R\\<rangle>slg_rel)", "unfolding slg_rel_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. single_valued R \\<Longrightarrow>\n    single_valued\n     {(succs, G).\n      \\<forall>v. (succs v, G `` {v}) \\<in> \\<langle>R\\<rangle>list_set_rel}", "apply (rule single_valuedI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x y z.\n       \\<lbrakk>single_valued R;\n        (x, y)\n        \\<in> {(succs, G).\n               \\<forall>v.\n                  (succs v, G `` {v})\n                  \\<in> \\<langle>R\\<rangle>list_set_rel};\n        (x, z)\n        \\<in> {(succs, G).\n               \\<forall>v.\n                  (succs v, G `` {v})\n                  \\<in> \\<langle>R\\<rangle>list_set_rel}\\<rbrakk>\n       \\<Longrightarrow> y = z", "apply (auto dest: single_valuedD[OF list_set_rel_sv])"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "consts i_slg :: \"interface \\<Rightarrow> interface\""], ["", "lemmas [autoref_rel_intf] =\n  REL_INTFI[of slg_rel i_slg]"], ["", "definition [simp]: \"slg_succs E v \\<equiv> E``{v}\""], ["", "lemma [autoref_itype]: \"slg_succs ::\\<^sub>i \\<langle>I\\<rangle>\\<^sub>ii_slg \\<rightarrow>\\<^sub>i I \\<rightarrow>\\<^sub>i \\<langle>I\\<rangle>\\<^sub>ii_set\""], ["proof (prove)\ngoal (1 subgoal):\n 1. slg_succs ::\\<^sub>i\n    \\<langle>I\\<rangle>\\<^sub>ii_slg \\<rightarrow>\\<^sub>i\n    I \\<rightarrow>\\<^sub>i \\<langle>I\\<rangle>\\<^sub>ii_set", "by simp"], ["", "context begin"], ["", "interpretation autoref_syn"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "lemma [autoref_op_pat]: \"E``{v} \\<equiv> slg_succs$E$v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. E `` {v} \\<equiv> slg_succs $ E $ v", "by simp"], ["", "end"], ["", "definition [code_unfold, simp]: \"slg_succs_impl succs v \\<equiv> succs v\""], ["", "lemma refine_slg_succs[autoref_rules_raw]: \n  \"(slg_succs_impl,slg_succs)\\<in>\\<langle>Id\\<rangle>slg_rel\\<rightarrow>Id\\<rightarrow>\\<langle>Id\\<rangle>list_set_rel\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (slg_succs_impl, slg_succs)\n    \\<in> \\<langle>Id\\<rangle>slg_rel \\<rightarrow>\n          Id \\<rightarrow> \\<langle>Id\\<rangle>list_set_rel", "apply (intro fun_relI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a a' aa a'a.\n       \\<lbrakk>(a, a') \\<in> \\<langle>Id\\<rangle>slg_rel;\n        (aa, a'a) \\<in> Id\\<rbrakk>\n       \\<Longrightarrow> (slg_succs_impl a aa, slg_succs a' a'a)\n                         \\<in> \\<langle>Id\\<rangle>list_set_rel", "apply (simp add: slg_succs_def slg_rel_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "subsection \"Graph Representations\""], ["", "(* TODO: Correctness proofs *)"], ["", "definition succ_of_list :: \"(nat\\<times>nat) list \\<Rightarrow> nat \\<Rightarrow> nat set\"\n  where\n  \"succ_of_list l \\<equiv> let\n    m = fold (\\<lambda>(u,v) g. \n          case g u of \n            None \\<Rightarrow> g(u\\<mapsto>{v})\n          | Some s \\<Rightarrow> g(u\\<mapsto>insert v s)\n        ) l Map.empty\n  in\n    (\\<lambda>u. case m u of None \\<Rightarrow> {} | Some s \\<Rightarrow> s)\n    \n\""], ["", "schematic_goal succ_of_list_impl:\n  notes [autoref_tyrel] = \n    ty_REL[where 'a=\"nat\\<rightharpoonup>nat set\" and R=\"\\<langle>nat_rel,R\\<rangle>iam_map_rel\" for R]\n    ty_REL[where 'a=\"nat set\" and R=\"\\<langle>nat_rel\\<rangle>list_set_rel\"]\n\n  shows \"(?f::?'c,succ_of_list) \\<in> ?R\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (?f, succ_of_list) \\<in> ?R", "unfolding succ_of_list_def[abs_def]"], ["proof (prove)\ngoal (1 subgoal):\n 1. (?f,\n     \\<lambda>l.\n        let m = fold\n                 (\\<lambda>(u, v) g.\n                     case g u of None \\<Rightarrow> g(u \\<mapsto> {v})\n                     | Some s \\<Rightarrow> g(u \\<mapsto> insert v s))\n                 l Map.empty\n        in (\\<lambda>u.\n               case m u of None \\<Rightarrow> {} | Some s \\<Rightarrow> s))\n    \\<in> ?R", "apply (autoref (keep_goal))"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "concrete_definition succ_of_list_impl uses succ_of_list_impl"], ["", "export_code succ_of_list_impl checking SML"], ["", "definition acc_of_list :: \"nat list \\<Rightarrow> nat set\" \n  where \"acc_of_list l \\<equiv> fold insert l {}\""], ["", "schematic_goal acc_of_list_impl:\n  notes [autoref_tyrel] = \n    ty_REL[where 'a=\"nat set\" and R=\"\\<langle>nat_rel\\<rangle>iam_set_rel\" for R]\n\n  shows \"(?f::?'c,acc_of_list) \\<in> ?R\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (?f, acc_of_list) \\<in> ?R", "unfolding acc_of_list_def[abs_def]"], ["proof (prove)\ngoal (1 subgoal):\n 1. (?f, \\<lambda>l. fold insert l {}) \\<in> ?R", "apply (autoref (keep_goal))"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "concrete_definition acc_of_list_impl uses acc_of_list_impl"], ["", "export_code acc_of_list_impl checking SML"], ["", "end"]]}