{"file_name": "/home/qj213/afp-2021-10-22/thys/Collections/GenCF/Impl/Impl_List_Set.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Collections", "problem_names": ["lemma list_all2_refl_conv:\n    \"list_all2 P xs xs \\<longleftrightarrow> (\\<forall>x\\<in>set xs. P x x)\"", "lemma param_glist_member[param]: \n    \"(glist_member,glist_member)\\<in>(Ra\\<rightarrow>Ra\\<rightarrow>Id) \\<rightarrow> Ra \\<rightarrow> \\<langle>Ra\\<rangle>list_rel \\<rightarrow> Id\"", "lemma list_member_alt: \"List.member = (\\<lambda>l x. glist_member (=) x l)\"", "lemma param_glist_insert[param]:\n    \"(glist_insert, glist_insert) \\<in> (R\\<rightarrow>R\\<rightarrow>Id) \\<rightarrow> R \\<rightarrow> \\<langle>R\\<rangle>list_rel \\<rightarrow> \\<langle>R\\<rangle>list_rel\"", "lemma rev_append_eq: \"rev_append l ac = rev l @ ac\"", "lemma param_glist_delete[param]:\n    \"(glist_delete, glist_delete) \\<in> (R\\<rightarrow>R\\<rightarrow>Id) \\<rightarrow> R \\<rightarrow> \\<langle>R\\<rangle>list_rel \\<rightarrow> \\<langle>R\\<rangle>list_rel\"", "lemma list_rel_Range:\n    \"\\<forall>x'\\<in>set l'. x' \\<in> Range R \\<Longrightarrow> l' \\<in> Range (\\<langle>R\\<rangle>list_rel)\"", "lemma list_set_rel_range:\n    \"Range (\\<langle>R\\<rangle>list_set_rel) = { S. finite S \\<and> S\\<subseteq>Range R }\"\n      (is \"?A = ?B\")", "lemmas [autoref_rel_intf] = REL_INTFI[of list_set_rel i_set]", "lemma list_set_rel_finite[autoref_ga_rules]:\n    \"finite_set_rel (\\<langle>R\\<rangle>list_set_rel)\"", "lemma list_set_rel_sv[relator_props]:\n    \"single_valued R \\<Longrightarrow> single_valued (\\<langle>R\\<rangle>list_set_rel)\"", "lemma Id_comp_Id: \"Id O Id = Id\"", "lemma glist_member_id_impl: \n    \"(glist_member (=), (\\<in>)) \\<in> Id \\<rightarrow> br set distinct \\<rightarrow> Id\"", "lemma glist_insert_id_impl:\n    \"(glist_insert (=), Set.insert) \\<in> Id \\<rightarrow> br set distinct \\<rightarrow> br set distinct\"", "lemma glist_delete_id_impl:\n    \"(glist_delete (=), \\<lambda>x s. s-{x})\n    \\<in> Id\\<rightarrow>br set distinct \\<rightarrow> br set distinct\"", "lemma list_set_autoref_empty[autoref_rules]:\n    \"([],{})\\<in>\\<langle>R\\<rangle>list_set_rel\"", "lemma list_set_autoref_member[autoref_rules]:\n    assumes \"GEN_OP eq (=) (R\\<rightarrow>R\\<rightarrow>Id)\"\n    shows \"(glist_member eq,(\\<in>)) \\<in> R \\<rightarrow> \\<langle>R\\<rangle>list_set_rel \\<rightarrow> Id\"", "lemma list_set_autoref_insert[autoref_rules]:\n    assumes \"GEN_OP eq (=) (R\\<rightarrow>R\\<rightarrow>Id)\"\n    shows \"(glist_insert eq,Set.insert) \n      \\<in> R \\<rightarrow> \\<langle>R\\<rangle>list_set_rel \\<rightarrow> \\<langle>R\\<rangle>list_set_rel\"", "lemma list_set_autoref_delete[autoref_rules]:\n    assumes \"GEN_OP eq (=) (R\\<rightarrow>R\\<rightarrow>Id)\"\n    shows \"(glist_delete eq,op_set_delete) \n      \\<in> R \\<rightarrow> \\<langle>R\\<rangle>list_set_rel \\<rightarrow> \\<langle>R\\<rangle>list_set_rel\"", "lemma list_set_autoref_to_list[autoref_ga_rules]: \n    shows \"is_set_to_sorted_list (\\<lambda>_ _. True) R list_set_rel id\"", "lemma list_set_it_simp[refine_transfer_post_simp]:\n    \"foldli (id l) = foldli l\"", "lemma glist_insert_dj_id_impl:\n    \"\\<lbrakk> x\\<notin>s; (l,s)\\<in>br set distinct \\<rbrakk> \\<Longrightarrow> (x#l,insert x s)\\<in>br set distinct\"", "lemma list_set_autoref_insert_dj[autoref_rules]:\n    assumes \"PRIO_TAG_OPTIMIZATION\"\n    assumes \"SIDE_PRECOND_OPT (x'\\<notin>s')\"\n    assumes \"(x,x')\\<in>R\"\n    assumes \"(s,s')\\<in>\\<langle>R\\<rangle>list_set_rel\"\n    shows \"(x#s,\n      (OP Set.insert ::: R \\<rightarrow> \\<langle>R\\<rangle>list_set_rel \\<rightarrow> \\<langle>R\\<rangle>list_set_rel) $ x' $ s') \n      \\<in> \\<langle>R\\<rangle>list_set_rel\"", "lemma list_set_autoref_isEmpty[autoref_rules]:\n    \"(is_Nil,op_set_isEmpty) \\<in> \\<langle>R\\<rangle>list_set_rel \\<rightarrow> bool_rel\"", "lemma list_set_autoref_filter[autoref_rules]:\n    \"(filter,op_set_filter) \n      \\<in> (R \\<rightarrow> bool_rel) \\<rightarrow> \\<langle>R\\<rangle>list_set_rel \\<rightarrow> \\<langle>R\\<rangle>list_set_rel\"", "lemma list_set_autoref_inj_image[autoref_rules]:\n    assumes \"PRIO_TAG_OPTIMIZATION\"\n    assumes INJ: \"SIDE_PRECOND_OPT (inj_on f s)\"\n    assumes [param]: \"(fi,f)\\<in>Ra\\<rightarrow>Rb\"\n    assumes LP: \"(l,s)\\<in>\\<langle>Ra\\<rangle>list_set_rel\"\n    shows \"(map fi l, \n      (OP (`) ::: (Ra\\<rightarrow>Rb) \\<rightarrow> \\<langle>Ra\\<rangle>list_set_rel \\<rightarrow> \\<langle>Rb\\<rangle>list_set_rel)$f$s) \n      \\<in> \\<langle>Rb\\<rangle>list_set_rel\"", "lemma list_set_cart_autoref[autoref_rules]:\n    fixes Rx :: \"('xi \\<times> 'x) set\"\n    fixes Ry :: \"('yi \\<times> 'y) set\"\n    shows \"(\\<lambda>xl yl. [ (x,y). x\\<leftarrow>xl, y\\<leftarrow>yl], op_set_cart) \n    \\<in> \\<langle>Rx\\<rangle>list_set_rel \\<rightarrow> \\<langle>Ry\\<rangle>list_set_rel \\<rightarrow> \\<langle>Rx \\<times>\\<^sub>r Ry\\<rangle>list_set_rel\"", "lemma glist_delete_hd: \"eq x y \\<Longrightarrow> glist_delete eq x (y#s) = s\"", "lemma LIST_SET_REV_TAG_autoref[autoref_rules]: \n    \"(rev,LIST_SET_REV_TAG) \\<in> \\<langle>R\\<rangle>list_set_rel \\<rightarrow> \\<langle>R\\<rangle>list_set_rel\""], "translations": [["", "lemma list_all2_refl_conv:\n    \"list_all2 P xs xs \\<longleftrightarrow> (\\<forall>x\\<in>set xs. P x x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. list_all2 P xs xs = (\\<forall>x\\<in>set xs. P x x)", "by (induct xs) auto"], ["", "primrec glist_member :: \"('a\\<Rightarrow>'a\\<Rightarrow>bool) \\<Rightarrow> 'a \\<Rightarrow> 'a list \\<Rightarrow> bool\" where\n    \"glist_member eq x [] \\<longleftrightarrow> False\"\n  | \"glist_member eq x (y#ys) \\<longleftrightarrow> eq x y \\<or> glist_member eq x ys\""], ["", "lemma param_glist_member[param]: \n    \"(glist_member,glist_member)\\<in>(Ra\\<rightarrow>Ra\\<rightarrow>Id) \\<rightarrow> Ra \\<rightarrow> \\<langle>Ra\\<rangle>list_rel \\<rightarrow> Id\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (glist_member, glist_member)\n    \\<in> (Ra \\<rightarrow> Ra \\<rightarrow> bool_rel) \\<rightarrow>\n          Ra \\<rightarrow>\n          \\<langle>Ra\\<rangle>list_rel \\<rightarrow> bool_rel", "unfolding glist_member_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>uu uua uub.\n        rec_list (\\<lambda>eq x. False)\n         (\\<lambda>y ys ysa eq x. eq x y \\<or> ysa eq x) uub uu uua,\n     \\<lambda>uu uua uub.\n        rec_list (\\<lambda>eq x. False)\n         (\\<lambda>y ys ysa eq x. eq x y \\<or> ysa eq x) uub uu uua)\n    \\<in> (Ra \\<rightarrow> Ra \\<rightarrow> bool_rel) \\<rightarrow>\n          Ra \\<rightarrow>\n          \\<langle>Ra\\<rangle>list_rel \\<rightarrow> bool_rel", "by (parametricity)"], ["", "lemma list_member_alt: \"List.member = (\\<lambda>l x. glist_member (=) x l)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. List.member = (\\<lambda>l x. glist_member (=) x l)", "proof (intro ext)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>l x. List.member l x = glist_member (=) x l", "fix x l"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>l x. List.member l x = glist_member (=) x l", "show \"List.member l x = glist_member (=) x l\""], ["proof (prove)\ngoal (1 subgoal):\n 1. List.member l x = glist_member (=) x l", "by (induct l) (auto simp: List.member_rec)"], ["proof (state)\nthis:\n  List.member l x = glist_member (=) x l\n\ngoal:\nNo subgoals!", "qed"], ["", "thm List.insert_def"], ["", "definition \n    \"glist_insert eq x xs = (if glist_member eq x xs then xs else x#xs)\""], ["", "lemma param_glist_insert[param]:\n    \"(glist_insert, glist_insert) \\<in> (R\\<rightarrow>R\\<rightarrow>Id) \\<rightarrow> R \\<rightarrow> \\<langle>R\\<rangle>list_rel \\<rightarrow> \\<langle>R\\<rangle>list_rel\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (glist_insert, glist_insert)\n    \\<in> (R \\<rightarrow> R \\<rightarrow> bool_rel) \\<rightarrow>\n          R \\<rightarrow>\n          \\<langle>R\\<rangle>list_rel \\<rightarrow>\n          \\<langle>R\\<rangle>list_rel", "unfolding glist_insert_def[abs_def]"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>eq x xs. if glist_member eq x xs then xs else x # xs,\n     \\<lambda>eq x xs. if glist_member eq x xs then xs else x # xs)\n    \\<in> (R \\<rightarrow> R \\<rightarrow> bool_rel) \\<rightarrow>\n          R \\<rightarrow>\n          \\<langle>R\\<rangle>list_rel \\<rightarrow>\n          \\<langle>R\\<rangle>list_rel", "by (parametricity)"], ["", "primrec rev_append where\n    \"rev_append [] ac = ac\"\n  | \"rev_append (x#xs) ac = rev_append xs (x#ac)\""], ["", "lemma rev_append_eq: \"rev_append l ac = rev l @ ac\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rev_append l ac = rev l @ ac", "by (induct l arbitrary: ac) auto"], ["", "(*\n  primrec glist_delete_aux1 :: \"('a\\<Rightarrow>'a\\<Rightarrow>bool) \\<Rightarrow> 'a \\<Rightarrow> 'a list \\<Rightarrow> 'a list\" where\n    \"glist_delete_aux1 eq x [] = []\"\n  | \"glist_delete_aux1 eq x (y#ys) = (\n      if eq x y then \n        ys \n      else y#glist_delete_aux1 eq x ys)\"\n\n  primrec glist_delete_aux2 :: \"('a\\<Rightarrow>'a\\<Rightarrow>_) \\<Rightarrow> _\" where\n    \"glist_delete_aux2 eq ac x [] = ac\"\n  | \"glist_delete_aux2 eq ac x (y#ys) = (if eq x y then rev_append ys ac else\n      glist_delete_aux2 eq (y#ac) x ys\n    )\"\n\n  lemma glist_delete_aux2_eq1:\n    \"glist_delete_aux2 eq ac x l = rev (glist_delete_aux1 eq x l) @ ac\"\n    by (induct l arbitrary: ac) (auto simp: rev_append_eq)\n\n  definition \"glist_delete eq x l = glist_delete_aux2 eq [] x l\"\n  *)"], ["", "primrec glist_delete_aux :: \"('a \\<Rightarrow> 'a \\<Rightarrow> bool) \\<Rightarrow> _\" where\n    \"glist_delete_aux eq x [] as = as\"\n  | \"glist_delete_aux eq x (y#ys) as = (\n      if eq x y then rev_append as ys \n      else glist_delete_aux eq x ys (y#as)\n    )\""], ["", "definition glist_delete where \n    \"glist_delete eq x l \\<equiv> glist_delete_aux eq x l []\""], ["", "lemma param_glist_delete[param]:\n    \"(glist_delete, glist_delete) \\<in> (R\\<rightarrow>R\\<rightarrow>Id) \\<rightarrow> R \\<rightarrow> \\<langle>R\\<rangle>list_rel \\<rightarrow> \\<langle>R\\<rangle>list_rel\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (glist_delete, glist_delete)\n    \\<in> (R \\<rightarrow> R \\<rightarrow> bool_rel) \\<rightarrow>\n          R \\<rightarrow>\n          \\<langle>R\\<rangle>list_rel \\<rightarrow>\n          \\<langle>R\\<rangle>list_rel", "unfolding glist_delete_def[abs_def]\n      glist_delete_aux_def\n      rev_append_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>eq x l.\n        rec_list (\\<lambda>eq x as. as)\n         (\\<lambda>y ys ysa eq x as.\n             if eq x y\n             then rec_list (\\<lambda>ac. ac)\n                   (\\<lambda>x xs xsa ac. xsa (x # ac)) as ys\n             else ysa eq x (y # as))\n         l eq x [],\n     \\<lambda>eq x l.\n        rec_list (\\<lambda>eq x as. as)\n         (\\<lambda>y ys ysa eq x as.\n             if eq x y\n             then rec_list (\\<lambda>ac. ac)\n                   (\\<lambda>x xs xsa ac. xsa (x # ac)) as ys\n             else ysa eq x (y # as))\n         l eq x [])\n    \\<in> (R \\<rightarrow> R \\<rightarrow> bool_rel) \\<rightarrow>\n          R \\<rightarrow>\n          \\<langle>R\\<rangle>list_rel \\<rightarrow>\n          \\<langle>R\\<rangle>list_rel", "by (parametricity)"], ["", "lemma list_rel_Range:\n    \"\\<forall>x'\\<in>set l'. x' \\<in> Range R \\<Longrightarrow> l' \\<in> Range (\\<langle>R\\<rangle>list_rel)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x'\\<in>set l'. x' \\<in> Range R \\<Longrightarrow>\n    l' \\<in> Range (\\<langle>R\\<rangle>list_rel)", "proof (induction l')"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<forall>x'\\<in>set []. x' \\<in> Range R \\<Longrightarrow>\n    [] \\<in> Range (\\<langle>R\\<rangle>list_rel)\n 2. \\<And>a l'.\n       \\<lbrakk>\\<forall>x'\\<in>set l'. x' \\<in> Range R \\<Longrightarrow>\n                l' \\<in> Range (\\<langle>R\\<rangle>list_rel);\n        \\<forall>x'\\<in>set (a # l'). x' \\<in> Range R\\<rbrakk>\n       \\<Longrightarrow> a # l' \\<in> Range (\\<langle>R\\<rangle>list_rel)", "case Nil"], ["proof (state)\nthis:\n  \\<forall>x'\\<in>set []. x' \\<in> Range R\n\ngoal (2 subgoals):\n 1. \\<forall>x'\\<in>set []. x' \\<in> Range R \\<Longrightarrow>\n    [] \\<in> Range (\\<langle>R\\<rangle>list_rel)\n 2. \\<And>a l'.\n       \\<lbrakk>\\<forall>x'\\<in>set l'. x' \\<in> Range R \\<Longrightarrow>\n                l' \\<in> Range (\\<langle>R\\<rangle>list_rel);\n        \\<forall>x'\\<in>set (a # l'). x' \\<in> Range R\\<rbrakk>\n       \\<Longrightarrow> a # l' \\<in> Range (\\<langle>R\\<rangle>list_rel)", "thus ?case"], ["proof (prove)\nusing this:\n  \\<forall>x'\\<in>set []. x' \\<in> Range R\n\ngoal (1 subgoal):\n 1. [] \\<in> Range (\\<langle>R\\<rangle>list_rel)", "by force"], ["proof (state)\nthis:\n  [] \\<in> Range (\\<langle>R\\<rangle>list_rel)\n\ngoal (1 subgoal):\n 1. \\<And>a l'.\n       \\<lbrakk>\\<forall>x'\\<in>set l'. x' \\<in> Range R \\<Longrightarrow>\n                l' \\<in> Range (\\<langle>R\\<rangle>list_rel);\n        \\<forall>x'\\<in>set (a # l'). x' \\<in> Range R\\<rbrakk>\n       \\<Longrightarrow> a # l' \\<in> Range (\\<langle>R\\<rangle>list_rel)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a l'.\n       \\<lbrakk>\\<forall>x'\\<in>set l'. x' \\<in> Range R \\<Longrightarrow>\n                l' \\<in> Range (\\<langle>R\\<rangle>list_rel);\n        \\<forall>x'\\<in>set (a # l'). x' \\<in> Range R\\<rbrakk>\n       \\<Longrightarrow> a # l' \\<in> Range (\\<langle>R\\<rangle>list_rel)", "case (Cons x' xs')"], ["proof (state)\nthis:\n  \\<forall>x'\\<in>set xs'. x' \\<in> Range R \\<Longrightarrow>\n  xs' \\<in> Range (\\<langle>R\\<rangle>list_rel)\n  \\<forall>x'\\<in>set (x' # xs'). x' \\<in> Range R\n\ngoal (1 subgoal):\n 1. \\<And>a l'.\n       \\<lbrakk>\\<forall>x'\\<in>set l'. x' \\<in> Range R \\<Longrightarrow>\n                l' \\<in> Range (\\<langle>R\\<rangle>list_rel);\n        \\<forall>x'\\<in>set (a # l'). x' \\<in> Range R\\<rbrakk>\n       \\<Longrightarrow> a # l' \\<in> Range (\\<langle>R\\<rangle>list_rel)", "then"], ["proof (chain)\npicking this:\n  \\<forall>x'\\<in>set xs'. x' \\<in> Range R \\<Longrightarrow>\n  xs' \\<in> Range (\\<langle>R\\<rangle>list_rel)\n  \\<forall>x'\\<in>set (x' # xs'). x' \\<in> Range R", "obtain xs where \"(xs,xs') \\<in> \\<langle>R\\<rangle> list_rel\""], ["proof (prove)\nusing this:\n  \\<forall>x'\\<in>set xs'. x' \\<in> Range R \\<Longrightarrow>\n  xs' \\<in> Range (\\<langle>R\\<rangle>list_rel)\n  \\<forall>x'\\<in>set (x' # xs'). x' \\<in> Range R\n\ngoal (1 subgoal):\n 1. (\\<And>xs.\n        (xs, xs') \\<in> \\<langle>R\\<rangle>list_rel \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by force"], ["proof (state)\nthis:\n  (xs, xs') \\<in> \\<langle>R\\<rangle>list_rel\n\ngoal (1 subgoal):\n 1. \\<And>a l'.\n       \\<lbrakk>\\<forall>x'\\<in>set l'. x' \\<in> Range R \\<Longrightarrow>\n                l' \\<in> Range (\\<langle>R\\<rangle>list_rel);\n        \\<forall>x'\\<in>set (a # l'). x' \\<in> Range R\\<rbrakk>\n       \\<Longrightarrow> a # l' \\<in> Range (\\<langle>R\\<rangle>list_rel)", "moreover"], ["proof (state)\nthis:\n  (xs, xs') \\<in> \\<langle>R\\<rangle>list_rel\n\ngoal (1 subgoal):\n 1. \\<And>a l'.\n       \\<lbrakk>\\<forall>x'\\<in>set l'. x' \\<in> Range R \\<Longrightarrow>\n                l' \\<in> Range (\\<langle>R\\<rangle>list_rel);\n        \\<forall>x'\\<in>set (a # l'). x' \\<in> Range R\\<rbrakk>\n       \\<Longrightarrow> a # l' \\<in> Range (\\<langle>R\\<rangle>list_rel)", "from Cons.prems"], ["proof (chain)\npicking this:\n  \\<forall>x'\\<in>set (x' # xs'). x' \\<in> Range R", "obtain x where \"(x,x') \\<in> R\""], ["proof (prove)\nusing this:\n  \\<forall>x'\\<in>set (x' # xs'). x' \\<in> Range R\n\ngoal (1 subgoal):\n 1. (\\<And>x. (x, x') \\<in> R \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by force"], ["proof (state)\nthis:\n  (x, x') \\<in> R\n\ngoal (1 subgoal):\n 1. \\<And>a l'.\n       \\<lbrakk>\\<forall>x'\\<in>set l'. x' \\<in> Range R \\<Longrightarrow>\n                l' \\<in> Range (\\<langle>R\\<rangle>list_rel);\n        \\<forall>x'\\<in>set (a # l'). x' \\<in> Range R\\<rbrakk>\n       \\<Longrightarrow> a # l' \\<in> Range (\\<langle>R\\<rangle>list_rel)", "ultimately"], ["proof (chain)\npicking this:\n  (xs, xs') \\<in> \\<langle>R\\<rangle>list_rel\n  (x, x') \\<in> R", "have \"(x#xs, x'#xs') \\<in> \\<langle>R\\<rangle> list_rel\""], ["proof (prove)\nusing this:\n  (xs, xs') \\<in> \\<langle>R\\<rangle>list_rel\n  (x, x') \\<in> R\n\ngoal (1 subgoal):\n 1. (x # xs, x' # xs') \\<in> \\<langle>R\\<rangle>list_rel", "by simp"], ["proof (state)\nthis:\n  (x # xs, x' # xs') \\<in> \\<langle>R\\<rangle>list_rel\n\ngoal (1 subgoal):\n 1. \\<And>a l'.\n       \\<lbrakk>\\<forall>x'\\<in>set l'. x' \\<in> Range R \\<Longrightarrow>\n                l' \\<in> Range (\\<langle>R\\<rangle>list_rel);\n        \\<forall>x'\\<in>set (a # l'). x' \\<in> Range R\\<rbrakk>\n       \\<Longrightarrow> a # l' \\<in> Range (\\<langle>R\\<rangle>list_rel)", "thus ?case"], ["proof (prove)\nusing this:\n  (x # xs, x' # xs') \\<in> \\<langle>R\\<rangle>list_rel\n\ngoal (1 subgoal):\n 1. x' # xs' \\<in> Range (\\<langle>R\\<rangle>list_rel)", ".."], ["proof (state)\nthis:\n  x' # xs' \\<in> Range (\\<langle>R\\<rangle>list_rel)\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>All finite sets can be represented\\<close>"], ["", "lemma list_set_rel_range:\n    \"Range (\\<langle>R\\<rangle>list_set_rel) = { S. finite S \\<and> S\\<subseteq>Range R }\"\n      (is \"?A = ?B\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. Range (\\<langle>R\\<rangle>list_set_rel) =\n    {S. finite S \\<and> S \\<subseteq> Range R}", "proof (intro equalityI subsetI)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> Range (\\<langle>R\\<rangle>list_set_rel) \\<Longrightarrow>\n       x \\<in> {S. finite S \\<and> S \\<subseteq> Range R}\n 2. \\<And>x.\n       x \\<in> {S. finite S \\<and> S \\<subseteq> Range R} \\<Longrightarrow>\n       x \\<in> Range (\\<langle>R\\<rangle>list_set_rel)", "fix s'"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> Range (\\<langle>R\\<rangle>list_set_rel) \\<Longrightarrow>\n       x \\<in> {S. finite S \\<and> S \\<subseteq> Range R}\n 2. \\<And>x.\n       x \\<in> {S. finite S \\<and> S \\<subseteq> Range R} \\<Longrightarrow>\n       x \\<in> Range (\\<langle>R\\<rangle>list_set_rel)", "assume \"s' \\<in> ?A\""], ["proof (state)\nthis:\n  s' \\<in> Range (\\<langle>R\\<rangle>list_set_rel)\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> Range (\\<langle>R\\<rangle>list_set_rel) \\<Longrightarrow>\n       x \\<in> {S. finite S \\<and> S \\<subseteq> Range R}\n 2. \\<And>x.\n       x \\<in> {S. finite S \\<and> S \\<subseteq> Range R} \\<Longrightarrow>\n       x \\<in> Range (\\<langle>R\\<rangle>list_set_rel)", "then"], ["proof (chain)\npicking this:\n  s' \\<in> Range (\\<langle>R\\<rangle>list_set_rel)", "obtain l l' where A: \"(l,l') \\<in> \\<langle>R\\<rangle>list_rel\" and\n       B: \"s' = set l'\" and C: \"distinct l'\""], ["proof (prove)\nusing this:\n  s' \\<in> Range (\\<langle>R\\<rangle>list_set_rel)\n\ngoal (1 subgoal):\n 1. (\\<And>l l'.\n        \\<lbrakk>(l, l') \\<in> \\<langle>R\\<rangle>list_rel; s' = set l';\n         distinct l'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding list_set_rel_def br_def"], ["proof (prove)\nusing this:\n  s' \\<in> Range\n            (\\<langle>R\\<rangle>list_rel O\n             {(c, a). a = set c \\<and> distinct c})\n\ngoal (1 subgoal):\n 1. (\\<And>l l'.\n        \\<lbrakk>(l, l') \\<in> \\<langle>R\\<rangle>list_rel; s' = set l';\n         distinct l'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  (l, l') \\<in> \\<langle>R\\<rangle>list_rel\n  s' = set l'\n  distinct l'\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> Range (\\<langle>R\\<rangle>list_set_rel) \\<Longrightarrow>\n       x \\<in> {S. finite S \\<and> S \\<subseteq> Range R}\n 2. \\<And>x.\n       x \\<in> {S. finite S \\<and> S \\<subseteq> Range R} \\<Longrightarrow>\n       x \\<in> Range (\\<langle>R\\<rangle>list_set_rel)", "moreover"], ["proof (state)\nthis:\n  (l, l') \\<in> \\<langle>R\\<rangle>list_rel\n  s' = set l'\n  distinct l'\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> Range (\\<langle>R\\<rangle>list_set_rel) \\<Longrightarrow>\n       x \\<in> {S. finite S \\<and> S \\<subseteq> Range R}\n 2. \\<And>x.\n       x \\<in> {S. finite S \\<and> S \\<subseteq> Range R} \\<Longrightarrow>\n       x \\<in> Range (\\<langle>R\\<rangle>list_set_rel)", "have \"set l' \\<subseteq> Range R\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set l' \\<subseteq> Range R", "by (induction rule: list_rel_induct[OF A], auto)"], ["proof (state)\nthis:\n  set l' \\<subseteq> Range R\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> Range (\\<langle>R\\<rangle>list_set_rel) \\<Longrightarrow>\n       x \\<in> {S. finite S \\<and> S \\<subseteq> Range R}\n 2. \\<And>x.\n       x \\<in> {S. finite S \\<and> S \\<subseteq> Range R} \\<Longrightarrow>\n       x \\<in> Range (\\<langle>R\\<rangle>list_set_rel)", "ultimately"], ["proof (chain)\npicking this:\n  (l, l') \\<in> \\<langle>R\\<rangle>list_rel\n  s' = set l'\n  distinct l'\n  set l' \\<subseteq> Range R", "show \"s' \\<in> ?B\""], ["proof (prove)\nusing this:\n  (l, l') \\<in> \\<langle>R\\<rangle>list_rel\n  s' = set l'\n  distinct l'\n  set l' \\<subseteq> Range R\n\ngoal (1 subgoal):\n 1. s' \\<in> {S. finite S \\<and> S \\<subseteq> Range R}", "by simp"], ["proof (state)\nthis:\n  s' \\<in> {S. finite S \\<and> S \\<subseteq> Range R}\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {S. finite S \\<and> S \\<subseteq> Range R} \\<Longrightarrow>\n       x \\<in> Range (\\<langle>R\\<rangle>list_set_rel)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {S. finite S \\<and> S \\<subseteq> Range R} \\<Longrightarrow>\n       x \\<in> Range (\\<langle>R\\<rangle>list_set_rel)", "fix s'"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {S. finite S \\<and> S \\<subseteq> Range R} \\<Longrightarrow>\n       x \\<in> Range (\\<langle>R\\<rangle>list_set_rel)", "assume A: \"s' \\<in> ?B\""], ["proof (state)\nthis:\n  s' \\<in> {S. finite S \\<and> S \\<subseteq> Range R}\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {S. finite S \\<and> S \\<subseteq> Range R} \\<Longrightarrow>\n       x \\<in> Range (\\<langle>R\\<rangle>list_set_rel)", "then"], ["proof (chain)\npicking this:\n  s' \\<in> {S. finite S \\<and> S \\<subseteq> Range R}", "obtain l' where B: \"set l' = s'\" and C: \"distinct l'\""], ["proof (prove)\nusing this:\n  s' \\<in> {S. finite S \\<and> S \\<subseteq> Range R}\n\ngoal (1 subgoal):\n 1. (\\<And>l'.\n        \\<lbrakk>set l' = s'; distinct l'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using finite_distinct_list"], ["proof (prove)\nusing this:\n  s' \\<in> {S. finite S \\<and> S \\<subseteq> Range R}\n  finite ?A \\<Longrightarrow> \\<exists>xs. set xs = ?A \\<and> distinct xs\n\ngoal (1 subgoal):\n 1. (\\<And>l'.\n        \\<lbrakk>set l' = s'; distinct l'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  set l' = s'\n  distinct l'\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {S. finite S \\<and> S \\<subseteq> Range R} \\<Longrightarrow>\n       x \\<in> Range (\\<langle>R\\<rangle>list_set_rel)", "hence \"(l',s') \\<in> br set distinct\""], ["proof (prove)\nusing this:\n  set l' = s'\n  distinct l'\n\ngoal (1 subgoal):\n 1. (l', s') \\<in> br set distinct", "by (simp add: br_def)"], ["proof (state)\nthis:\n  (l', s') \\<in> br set distinct\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {S. finite S \\<and> S \\<subseteq> Range R} \\<Longrightarrow>\n       x \\<in> Range (\\<langle>R\\<rangle>list_set_rel)", "moreover"], ["proof (state)\nthis:\n  (l', s') \\<in> br set distinct\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {S. finite S \\<and> S \\<subseteq> Range R} \\<Longrightarrow>\n       x \\<in> Range (\\<langle>R\\<rangle>list_set_rel)", "from A and B"], ["proof (chain)\npicking this:\n  s' \\<in> {S. finite S \\<and> S \\<subseteq> Range R}\n  set l' = s'", "have \"\\<forall>x\\<in>set l'. x \\<in> Range R\""], ["proof (prove)\nusing this:\n  s' \\<in> {S. finite S \\<and> S \\<subseteq> Range R}\n  set l' = s'\n\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>set l'. x \\<in> Range R", "by blast"], ["proof (state)\nthis:\n  \\<forall>x\\<in>set l'. x \\<in> Range R\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {S. finite S \\<and> S \\<subseteq> Range R} \\<Longrightarrow>\n       x \\<in> Range (\\<langle>R\\<rangle>list_set_rel)", "from list_rel_Range[OF this]"], ["proof (chain)\npicking this:\n  l' \\<in> Range (\\<langle>R\\<rangle>list_rel)", "obtain l\n        where \"(l,l') \\<in> \\<langle>R\\<rangle>list_rel\""], ["proof (prove)\nusing this:\n  l' \\<in> Range (\\<langle>R\\<rangle>list_rel)\n\ngoal (1 subgoal):\n 1. (\\<And>l.\n        (l, l') \\<in> \\<langle>R\\<rangle>list_rel \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  (l, l') \\<in> \\<langle>R\\<rangle>list_rel\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {S. finite S \\<and> S \\<subseteq> Range R} \\<Longrightarrow>\n       x \\<in> Range (\\<langle>R\\<rangle>list_set_rel)", "ultimately"], ["proof (chain)\npicking this:\n  (l', s') \\<in> br set distinct\n  (l, l') \\<in> \\<langle>R\\<rangle>list_rel", "show \"s' \\<in> ?A\""], ["proof (prove)\nusing this:\n  (l', s') \\<in> br set distinct\n  (l, l') \\<in> \\<langle>R\\<rangle>list_rel\n\ngoal (1 subgoal):\n 1. s' \\<in> Range (\\<langle>R\\<rangle>list_set_rel)", "unfolding list_set_rel_def"], ["proof (prove)\nusing this:\n  (l', s') \\<in> br set distinct\n  (l, l') \\<in> \\<langle>R\\<rangle>list_rel\n\ngoal (1 subgoal):\n 1. s' \\<in> Range (\\<langle>R\\<rangle>list_rel O br set distinct)", "by fast"], ["proof (state)\nthis:\n  s' \\<in> Range (\\<langle>R\\<rangle>list_set_rel)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemmas [autoref_rel_intf] = REL_INTFI[of list_set_rel i_set]"], ["", "lemma list_set_rel_finite[autoref_ga_rules]:\n    \"finite_set_rel (\\<langle>R\\<rangle>list_set_rel)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite_set_rel (\\<langle>R\\<rangle>list_set_rel)", "unfolding finite_set_rel_def list_set_rel_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. Range (\\<langle>R\\<rangle>list_rel O br set distinct)\n    \\<subseteq> Collect finite", "by (auto simp: br_def)"], ["", "lemma list_set_rel_sv[relator_props]:\n    \"single_valued R \\<Longrightarrow> single_valued (\\<langle>R\\<rangle>list_set_rel)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. single_valued R \\<Longrightarrow>\n    single_valued (\\<langle>R\\<rangle>list_set_rel)", "unfolding list_set_rel_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. single_valued R \\<Longrightarrow>\n    single_valued (\\<langle>R\\<rangle>list_rel O br set distinct)", "by tagged_solver"], ["", "(* TODO: Move to Misc *)"], ["", "lemma Id_comp_Id: \"Id O Id = Id\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Id O Id = Id", "by simp"], ["", "lemma glist_member_id_impl: \n    \"(glist_member (=), (\\<in>)) \\<in> Id \\<rightarrow> br set distinct \\<rightarrow> Id\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (glist_member (=), (\\<in>))\n    \\<in> Id \\<rightarrow> br set distinct \\<rightarrow> bool_rel", "proof (intro fun_relI, goal_cases)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a a' aa a'a.\n       \\<lbrakk>(a, a') \\<in> Id; (aa, a'a) \\<in> br set distinct\\<rbrakk>\n       \\<Longrightarrow> (glist_member (=) a aa, a' \\<in> a'a)\n                         \\<in> bool_rel", "case (1 x x' l s')"], ["proof (state)\nthis:\n  (x, x') \\<in> Id\n  (l, s') \\<in> br set distinct\n\ngoal (1 subgoal):\n 1. \\<And>a a' aa a'a.\n       \\<lbrakk>(a, a') \\<in> Id; (aa, a'a) \\<in> br set distinct\\<rbrakk>\n       \\<Longrightarrow> (glist_member (=) a aa, a' \\<in> a'a)\n                         \\<in> bool_rel", "thus ?case"], ["proof (prove)\nusing this:\n  (x, x') \\<in> Id\n  (l, s') \\<in> br set distinct\n\ngoal (1 subgoal):\n 1. (glist_member (=) x l, x' \\<in> s') \\<in> bool_rel", "by (induct l arbitrary: s') (auto simp: br_def)"], ["proof (state)\nthis:\n  (glist_member (=) x l, x' \\<in> s') \\<in> bool_rel\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma glist_insert_id_impl:\n    \"(glist_insert (=), Set.insert) \\<in> Id \\<rightarrow> br set distinct \\<rightarrow> br set distinct\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (glist_insert (=), insert)\n    \\<in> Id \\<rightarrow> br set distinct \\<rightarrow> br set distinct", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (glist_insert (=), insert)\n    \\<in> Id \\<rightarrow> br set distinct \\<rightarrow> br set distinct", "have IC: \"\\<And>x s. insert x s = (if x\\<in>s then s else insert x s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x s. insert x s = (if x \\<in> s then s else insert x s)", "by auto"], ["proof (state)\nthis:\n  insert ?x ?s = (if ?x \\<in> ?s then ?s else insert ?x ?s)\n\ngoal (1 subgoal):\n 1. (glist_insert (=), insert)\n    \\<in> Id \\<rightarrow> br set distinct \\<rightarrow> br set distinct", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. (glist_insert (=), insert)\n    \\<in> Id \\<rightarrow> br set distinct \\<rightarrow> br set distinct", "apply (intro fun_relI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a a' aa a'a.\n       \\<lbrakk>(a, a') \\<in> Id; (aa, a'a) \\<in> br set distinct\\<rbrakk>\n       \\<Longrightarrow> (glist_insert (=) a aa, insert a' a'a)\n                         \\<in> br set distinct", "apply (subst IC)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a a' aa a'a.\n       \\<lbrakk>(a, a') \\<in> Id; (aa, a'a) \\<in> br set distinct\\<rbrakk>\n       \\<Longrightarrow> (glist_insert (=) a aa,\n                          if a' \\<in> a'a then a'a else insert a' a'a)\n                         \\<in> br set distinct", "unfolding glist_insert_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a a' aa a'a.\n       \\<lbrakk>(a, a') \\<in> Id; (aa, a'a) \\<in> br set distinct\\<rbrakk>\n       \\<Longrightarrow> (if glist_member (=) a aa then aa else a # aa,\n                          if a' \\<in> a'a then a'a else insert a' a'a)\n                         \\<in> br set distinct", "apply (parametricity add: glist_member_id_impl)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a a' aa a'a.\n       \\<lbrakk>(a, a') \\<in> Id; (aa, a'a) \\<in> br set distinct;\n        \\<not> glist_member (=) a aa; a' \\<notin> a'a\\<rbrakk>\n       \\<Longrightarrow> (a # aa, insert a' a'a) \\<in> br set distinct", "apply (auto simp: br_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  (glist_insert (=), insert)\n  \\<in> Id \\<rightarrow> br set distinct \\<rightarrow> br set distinct\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma glist_delete_id_impl:\n    \"(glist_delete (=), \\<lambda>x s. s-{x})\n    \\<in> Id\\<rightarrow>br set distinct \\<rightarrow> br set distinct\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (glist_delete (=), \\<lambda>x s. s - {x})\n    \\<in> Id \\<rightarrow> br set distinct \\<rightarrow> br set distinct", "proof (intro fun_relI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a a' aa a'a.\n       \\<lbrakk>(a, a') \\<in> Id; (aa, a'a) \\<in> br set distinct\\<rbrakk>\n       \\<Longrightarrow> (glist_delete (=) a aa, a'a - {a'})\n                         \\<in> br set distinct", "fix x x':: 'a and s and s' :: \"'a set\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a a' aa a'a.\n       \\<lbrakk>(a, a') \\<in> Id; (aa, a'a) \\<in> br set distinct\\<rbrakk>\n       \\<Longrightarrow> (glist_delete (=) a aa, a'a - {a'})\n                         \\<in> br set distinct", "assume XREL: \"(x, x') \\<in> Id\" and SREL: \"(s, s') \\<in> br set distinct\""], ["proof (state)\nthis:\n  (x, x') \\<in> Id\n  (s, s') \\<in> br set distinct\n\ngoal (1 subgoal):\n 1. \\<And>a a' aa a'a.\n       \\<lbrakk>(a, a') \\<in> Id; (aa, a'a) \\<in> br set distinct\\<rbrakk>\n       \\<Longrightarrow> (glist_delete (=) a aa, a'a - {a'})\n                         \\<in> br set distinct", "from XREL"], ["proof (chain)\npicking this:\n  (x, x') \\<in> Id", "have [simp]: \"x'=x\""], ["proof (prove)\nusing this:\n  (x, x') \\<in> Id\n\ngoal (1 subgoal):\n 1. x' = x", "by simp"], ["proof (state)\nthis:\n  x' = x\n\ngoal (1 subgoal):\n 1. \\<And>a a' aa a'a.\n       \\<lbrakk>(a, a') \\<in> Id; (aa, a'a) \\<in> br set distinct\\<rbrakk>\n       \\<Longrightarrow> (glist_delete (=) a aa, a'a - {a'})\n                         \\<in> br set distinct", "{"], ["proof (state)\nthis:\n  x' = x\n\ngoal (1 subgoal):\n 1. \\<And>a a' aa a'a.\n       \\<lbrakk>(a, a') \\<in> Id; (aa, a'a) \\<in> br set distinct\\<rbrakk>\n       \\<Longrightarrow> (glist_delete (=) a aa, a'a - {a'})\n                         \\<in> br set distinct", "fix a and a' :: \"'a set\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a a' aa a'a.\n       \\<lbrakk>(a, a') \\<in> Id; (aa, a'a) \\<in> br set distinct\\<rbrakk>\n       \\<Longrightarrow> (glist_delete (=) a aa, a'a - {a'})\n                         \\<in> br set distinct", "assume \"(a,a')\\<in>br set distinct\" and \"s' \\<inter> a' = {}\""], ["proof (state)\nthis:\n  (a, a') \\<in> br set distinct\n  s' \\<inter> a' = {}\n\ngoal (1 subgoal):\n 1. \\<And>a a' aa a'a.\n       \\<lbrakk>(a, a') \\<in> Id; (aa, a'a) \\<in> br set distinct\\<rbrakk>\n       \\<Longrightarrow> (glist_delete (=) a aa, a'a - {a'})\n                         \\<in> br set distinct", "hence \"(glist_delete_aux (=) x s a, s'-{x'} \\<union> a')\\<in>br set distinct\""], ["proof (prove)\nusing this:\n  (a, a') \\<in> br set distinct\n  s' \\<inter> a' = {}\n\ngoal (1 subgoal):\n 1. (glist_delete_aux (=) x s a, s' - {x'} \\<union> a')\n    \\<in> br set distinct", "using SREL"], ["proof (prove)\nusing this:\n  (a, a') \\<in> br set distinct\n  s' \\<inter> a' = {}\n  (s, s') \\<in> br set distinct\n\ngoal (1 subgoal):\n 1. (glist_delete_aux (=) x s a, s' - {x'} \\<union> a')\n    \\<in> br set distinct", "proof (induction s arbitrary: a s' a')"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>a s' a'.\n       \\<lbrakk>(a, a') \\<in> br set distinct; s' \\<inter> a' = {};\n        ([], s') \\<in> br set distinct\\<rbrakk>\n       \\<Longrightarrow> (glist_delete_aux (=) x [] a,\n                          s' - {x'} \\<union> a')\n                         \\<in> br set distinct\n 2. \\<And>a s aa s' a'.\n       \\<lbrakk>\\<And>a s' a'.\n                   \\<lbrakk>(a, a') \\<in> br set distinct;\n                    s' \\<inter> a' = {};\n                    (s, s') \\<in> br set distinct\\<rbrakk>\n                   \\<Longrightarrow> (glist_delete_aux (=) x s a,\ns' - {x'} \\<union> a')\n                                     \\<in> br set distinct;\n        (aa, a') \\<in> br set distinct; s' \\<inter> a' = {};\n        (a # s, s') \\<in> br set distinct\\<rbrakk>\n       \\<Longrightarrow> (glist_delete_aux (=) x (a # s) aa,\n                          s' - {x'} \\<union> a')\n                         \\<in> br set distinct", "case Nil"], ["proof (state)\nthis:\n  (a, a') \\<in> br set distinct\n  s' \\<inter> a' = {}\n  ([], s') \\<in> br set distinct\n\ngoal (2 subgoals):\n 1. \\<And>a s' a'.\n       \\<lbrakk>(a, a') \\<in> br set distinct; s' \\<inter> a' = {};\n        ([], s') \\<in> br set distinct\\<rbrakk>\n       \\<Longrightarrow> (glist_delete_aux (=) x [] a,\n                          s' - {x'} \\<union> a')\n                         \\<in> br set distinct\n 2. \\<And>a s aa s' a'.\n       \\<lbrakk>\\<And>a s' a'.\n                   \\<lbrakk>(a, a') \\<in> br set distinct;\n                    s' \\<inter> a' = {};\n                    (s, s') \\<in> br set distinct\\<rbrakk>\n                   \\<Longrightarrow> (glist_delete_aux (=) x s a,\ns' - {x'} \\<union> a')\n                                     \\<in> br set distinct;\n        (aa, a') \\<in> br set distinct; s' \\<inter> a' = {};\n        (a # s, s') \\<in> br set distinct\\<rbrakk>\n       \\<Longrightarrow> (glist_delete_aux (=) x (a # s) aa,\n                          s' - {x'} \\<union> a')\n                         \\<in> br set distinct", "thus ?case"], ["proof (prove)\nusing this:\n  (a, a') \\<in> br set distinct\n  s' \\<inter> a' = {}\n  ([], s') \\<in> br set distinct\n\ngoal (1 subgoal):\n 1. (glist_delete_aux (=) x [] a, s' - {x'} \\<union> a')\n    \\<in> br set distinct", "by (simp add: br_def)"], ["proof (state)\nthis:\n  (glist_delete_aux (=) x [] a, s' - {x'} \\<union> a') \\<in> br set distinct\n\ngoal (1 subgoal):\n 1. \\<And>a s aa s' a'.\n       \\<lbrakk>\\<And>a s' a'.\n                   \\<lbrakk>(a, a') \\<in> br set distinct;\n                    s' \\<inter> a' = {};\n                    (s, s') \\<in> br set distinct\\<rbrakk>\n                   \\<Longrightarrow> (glist_delete_aux (=) x s a,\ns' - {x'} \\<union> a')\n                                     \\<in> br set distinct;\n        (aa, a') \\<in> br set distinct; s' \\<inter> a' = {};\n        (a # s, s') \\<in> br set distinct\\<rbrakk>\n       \\<Longrightarrow> (glist_delete_aux (=) x (a # s) aa,\n                          s' - {x'} \\<union> a')\n                         \\<in> br set distinct", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a s aa s' a'.\n       \\<lbrakk>\\<And>a s' a'.\n                   \\<lbrakk>(a, a') \\<in> br set distinct;\n                    s' \\<inter> a' = {};\n                    (s, s') \\<in> br set distinct\\<rbrakk>\n                   \\<Longrightarrow> (glist_delete_aux (=) x s a,\ns' - {x'} \\<union> a')\n                                     \\<in> br set distinct;\n        (aa, a') \\<in> br set distinct; s' \\<inter> a' = {};\n        (a # s, s') \\<in> br set distinct\\<rbrakk>\n       \\<Longrightarrow> (glist_delete_aux (=) x (a # s) aa,\n                          s' - {x'} \\<union> a')\n                         \\<in> br set distinct", "case (Cons y s)"], ["proof (state)\nthis:\n  \\<lbrakk>(?a, ?a') \\<in> br set distinct; ?s' \\<inter> ?a' = {};\n   (s, ?s') \\<in> br set distinct\\<rbrakk>\n  \\<Longrightarrow> (glist_delete_aux (=) x s ?a, ?s' - {x'} \\<union> ?a')\n                    \\<in> br set distinct\n  (a, a') \\<in> br set distinct\n  s' \\<inter> a' = {}\n  (y # s, s') \\<in> br set distinct\n\ngoal (1 subgoal):\n 1. \\<And>a s aa s' a'.\n       \\<lbrakk>\\<And>a s' a'.\n                   \\<lbrakk>(a, a') \\<in> br set distinct;\n                    s' \\<inter> a' = {};\n                    (s, s') \\<in> br set distinct\\<rbrakk>\n                   \\<Longrightarrow> (glist_delete_aux (=) x s a,\ns' - {x'} \\<union> a')\n                                     \\<in> br set distinct;\n        (aa, a') \\<in> br set distinct; s' \\<inter> a' = {};\n        (a # s, s') \\<in> br set distinct\\<rbrakk>\n       \\<Longrightarrow> (glist_delete_aux (=) x (a # s) aa,\n                          s' - {x'} \\<union> a')\n                         \\<in> br set distinct", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. (glist_delete_aux (=) x (y # s) a, s' - {x'} \\<union> a')\n    \\<in> br set distinct", "proof (cases \"x=y\")"], ["proof (state)\ngoal (2 subgoals):\n 1. x = y \\<Longrightarrow>\n    (glist_delete_aux (=) x (y # s) a, s' - {x'} \\<union> a')\n    \\<in> br set distinct\n 2. x \\<noteq> y \\<Longrightarrow>\n    (glist_delete_aux (=) x (y # s) a, s' - {x'} \\<union> a')\n    \\<in> br set distinct", "case True"], ["proof (state)\nthis:\n  x = y\n\ngoal (2 subgoals):\n 1. x = y \\<Longrightarrow>\n    (glist_delete_aux (=) x (y # s) a, s' - {x'} \\<union> a')\n    \\<in> br set distinct\n 2. x \\<noteq> y \\<Longrightarrow>\n    (glist_delete_aux (=) x (y # s) a, s' - {x'} \\<union> a')\n    \\<in> br set distinct", "with Cons"], ["proof (chain)\npicking this:\n  \\<lbrakk>(?a, ?a') \\<in> br set distinct; ?s' \\<inter> ?a' = {};\n   (s, ?s') \\<in> br set distinct\\<rbrakk>\n  \\<Longrightarrow> (glist_delete_aux (=) x s ?a, ?s' - {x'} \\<union> ?a')\n                    \\<in> br set distinct\n  (a, a') \\<in> br set distinct\n  s' \\<inter> a' = {}\n  (y # s, s') \\<in> br set distinct\n  x = y", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<lbrakk>(?a, ?a') \\<in> br set distinct; ?s' \\<inter> ?a' = {};\n   (s, ?s') \\<in> br set distinct\\<rbrakk>\n  \\<Longrightarrow> (glist_delete_aux (=) x s ?a, ?s' - {x'} \\<union> ?a')\n                    \\<in> br set distinct\n  (a, a') \\<in> br set distinct\n  s' \\<inter> a' = {}\n  (y # s, s') \\<in> br set distinct\n  x = y\n\ngoal (1 subgoal):\n 1. (glist_delete_aux (=) x (y # s) a, s' - {x'} \\<union> a')\n    \\<in> br set distinct", "by (auto simp add: br_def rev_append_eq)"], ["proof (state)\nthis:\n  (glist_delete_aux (=) x (y # s) a, s' - {x'} \\<union> a')\n  \\<in> br set distinct\n\ngoal (1 subgoal):\n 1. x \\<noteq> y \\<Longrightarrow>\n    (glist_delete_aux (=) x (y # s) a, s' - {x'} \\<union> a')\n    \\<in> br set distinct", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. x \\<noteq> y \\<Longrightarrow>\n    (glist_delete_aux (=) x (y # s) a, s' - {x'} \\<union> a')\n    \\<in> br set distinct", "case False"], ["proof (state)\nthis:\n  x \\<noteq> y\n\ngoal (1 subgoal):\n 1. x \\<noteq> y \\<Longrightarrow>\n    (glist_delete_aux (=) x (y # s) a, s' - {x'} \\<union> a')\n    \\<in> br set distinct", "have \"glist_delete_aux (=) x (y # s) a \n            = glist_delete_aux (=) x s (y#a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. glist_delete_aux (=) x (y # s) a = glist_delete_aux (=) x s (y # a)", "by (simp add: False)"], ["proof (state)\nthis:\n  glist_delete_aux (=) x (y # s) a = glist_delete_aux (=) x s (y # a)\n\ngoal (1 subgoal):\n 1. x \\<noteq> y \\<Longrightarrow>\n    (glist_delete_aux (=) x (y # s) a, s' - {x'} \\<union> a')\n    \\<in> br set distinct", "also"], ["proof (state)\nthis:\n  glist_delete_aux (=) x (y # s) a = glist_delete_aux (=) x s (y # a)\n\ngoal (1 subgoal):\n 1. x \\<noteq> y \\<Longrightarrow>\n    (glist_delete_aux (=) x (y # s) a, s' - {x'} \\<union> a')\n    \\<in> br set distinct", "have \"(\\<dots>,set s - {x'} \\<union> insert y a')\\<in>br set distinct\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (glist_delete_aux (=) x s (y # a), set s - {x'} \\<union> insert y a')\n    \\<in> br set distinct", "apply (rule Cons.IH[of \"y#a\" \"insert y a'\" \"set s\"])"], ["proof (prove)\ngoal (3 subgoals):\n 1. (y # a, insert y a') \\<in> br set distinct\n 2. set s \\<inter> insert y a' = {}\n 3. (s, set s) \\<in> br set distinct", "using Cons.prems"], ["proof (prove)\nusing this:\n  (a, a') \\<in> br set distinct\n  s' \\<inter> a' = {}\n  (y # s, s') \\<in> br set distinct\n\ngoal (3 subgoals):\n 1. (y # a, insert y a') \\<in> br set distinct\n 2. set s \\<inter> insert y a' = {}\n 3. (s, set s) \\<in> br set distinct", "by (auto simp: br_def)"], ["proof (state)\nthis:\n  (glist_delete_aux (=) x s (y # a), set s - {x'} \\<union> insert y a')\n  \\<in> br set distinct\n\ngoal (1 subgoal):\n 1. x \\<noteq> y \\<Longrightarrow>\n    (glist_delete_aux (=) x (y # s) a, s' - {x'} \\<union> a')\n    \\<in> br set distinct", "also"], ["proof (state)\nthis:\n  (glist_delete_aux (=) x s (y # a), set s - {x'} \\<union> insert y a')\n  \\<in> br set distinct\n\ngoal (1 subgoal):\n 1. x \\<noteq> y \\<Longrightarrow>\n    (glist_delete_aux (=) x (y # s) a, s' - {x'} \\<union> a')\n    \\<in> br set distinct", "have \"set s - {x'} \\<union> insert y a' = (s' - {x'}) \\<union> a'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set s - {x'} \\<union> insert y a' = s' - {x'} \\<union> a'", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. set s - {x'} \\<union> insert y a' = s' - {x'} \\<union> a'", "from Cons.prems"], ["proof (chain)\npicking this:\n  (a, a') \\<in> br set distinct\n  s' \\<inter> a' = {}\n  (y # s, s') \\<in> br set distinct", "have [simp]: \"s' = insert y (set s)\""], ["proof (prove)\nusing this:\n  (a, a') \\<in> br set distinct\n  s' \\<inter> a' = {}\n  (y # s, s') \\<in> br set distinct\n\ngoal (1 subgoal):\n 1. s' = insert y (set s)", "by (auto simp: br_def)"], ["proof (state)\nthis:\n  s' = insert y (set s)\n\ngoal (1 subgoal):\n 1. set s - {x'} \\<union> insert y a' = s' - {x'} \\<union> a'", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. set s - {x'} \\<union> insert y a' = s' - {x'} \\<union> a'", "using False"], ["proof (prove)\nusing this:\n  x \\<noteq> y\n\ngoal (1 subgoal):\n 1. set s - {x'} \\<union> insert y a' = s' - {x'} \\<union> a'", "by auto"], ["proof (state)\nthis:\n  set s - {x'} \\<union> insert y a' = s' - {x'} \\<union> a'\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  set s - {x'} \\<union> insert y a' = s' - {x'} \\<union> a'\n\ngoal (1 subgoal):\n 1. x \\<noteq> y \\<Longrightarrow>\n    (glist_delete_aux (=) x (y # s) a, s' - {x'} \\<union> a')\n    \\<in> br set distinct", "finally"], ["proof (chain)\npicking this:\n  (glist_delete_aux (=) x (y # s) a, s' - {x'} \\<union> a')\n  \\<in> br set distinct", "show ?thesis"], ["proof (prove)\nusing this:\n  (glist_delete_aux (=) x (y # s) a, s' - {x'} \\<union> a')\n  \\<in> br set distinct\n\ngoal (1 subgoal):\n 1. (glist_delete_aux (=) x (y # s) a, s' - {x'} \\<union> a')\n    \\<in> br set distinct", "."], ["proof (state)\nthis:\n  (glist_delete_aux (=) x (y # s) a, s' - {x'} \\<union> a')\n  \\<in> br set distinct\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (glist_delete_aux (=) x (y # s) a, s' - {x'} \\<union> a')\n  \\<in> br set distinct\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (glist_delete_aux (=) x s a, s' - {x'} \\<union> a') \\<in> br set distinct\n\ngoal (1 subgoal):\n 1. \\<And>a a' aa a'a.\n       \\<lbrakk>(a, a') \\<in> Id; (aa, a'a) \\<in> br set distinct\\<rbrakk>\n       \\<Longrightarrow> (glist_delete (=) a aa, a'a - {a'})\n                         \\<in> br set distinct", "}"], ["proof (state)\nthis:\n  \\<lbrakk>(?a2, ?a'2) \\<in> br set distinct; s' \\<inter> ?a'2 = {}\\<rbrakk>\n  \\<Longrightarrow> (glist_delete_aux (=) x s ?a2, s' - {x'} \\<union> ?a'2)\n                    \\<in> br set distinct\n\ngoal (1 subgoal):\n 1. \\<And>a a' aa a'a.\n       \\<lbrakk>(a, a') \\<in> Id; (aa, a'a) \\<in> br set distinct\\<rbrakk>\n       \\<Longrightarrow> (glist_delete (=) a aa, a'a - {a'})\n                         \\<in> br set distinct", "from this[of \"[]\" \"{}\"]"], ["proof (chain)\npicking this:\n  \\<lbrakk>([], {}) \\<in> br set distinct; s' \\<inter> {} = {}\\<rbrakk>\n  \\<Longrightarrow> (glist_delete_aux (=) x s [], s' - {x'} \\<union> {})\n                    \\<in> br set distinct", "show \"(glist_delete (=) x s, s' - {x'}) \\<in> br set distinct\""], ["proof (prove)\nusing this:\n  \\<lbrakk>([], {}) \\<in> br set distinct; s' \\<inter> {} = {}\\<rbrakk>\n  \\<Longrightarrow> (glist_delete_aux (=) x s [], s' - {x'} \\<union> {})\n                    \\<in> br set distinct\n\ngoal (1 subgoal):\n 1. (glist_delete (=) x s, s' - {x'}) \\<in> br set distinct", "unfolding glist_delete_def"], ["proof (prove)\nusing this:\n  \\<lbrakk>([], {}) \\<in> br set distinct; s' \\<inter> {} = {}\\<rbrakk>\n  \\<Longrightarrow> (glist_delete_aux (=) x s [], s' - {x'} \\<union> {})\n                    \\<in> br set distinct\n\ngoal (1 subgoal):\n 1. (glist_delete_aux (=) x s [], s' - {x'}) \\<in> br set distinct", "by (simp add: br_def)"], ["proof (state)\nthis:\n  (glist_delete (=) x s, s' - {x'}) \\<in> br set distinct\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma list_set_autoref_empty[autoref_rules]:\n    \"([],{})\\<in>\\<langle>R\\<rangle>list_set_rel\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ([], {}) \\<in> \\<langle>R\\<rangle>list_set_rel", "by (auto simp: list_set_rel_def br_def)"], ["", "lemma list_set_autoref_member[autoref_rules]:\n    assumes \"GEN_OP eq (=) (R\\<rightarrow>R\\<rightarrow>Id)\"\n    shows \"(glist_member eq,(\\<in>)) \\<in> R \\<rightarrow> \\<langle>R\\<rangle>list_set_rel \\<rightarrow> Id\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (glist_member eq, (\\<in>))\n    \\<in> R \\<rightarrow>\n          \\<langle>R\\<rangle>list_set_rel \\<rightarrow> bool_rel", "using assms"], ["proof (prove)\nusing this:\n  GEN_OP eq (=) (R \\<rightarrow> R \\<rightarrow> bool_rel)\n\ngoal (1 subgoal):\n 1. (glist_member eq, (\\<in>))\n    \\<in> R \\<rightarrow>\n          \\<langle>R\\<rangle>list_set_rel \\<rightarrow> bool_rel", "apply (intro fun_relI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a a' aa a'a.\n       \\<lbrakk>GEN_OP eq (=) (R \\<rightarrow> R \\<rightarrow> bool_rel);\n        (a, a') \\<in> R;\n        (aa, a'a) \\<in> \\<langle>R\\<rangle>list_set_rel\\<rbrakk>\n       \\<Longrightarrow> (glist_member eq a aa, a' \\<in> a'a) \\<in> bool_rel", "unfolding list_set_rel_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a a' aa a'a.\n       \\<lbrakk>GEN_OP eq (=) (R \\<rightarrow> R \\<rightarrow> bool_rel);\n        (a, a') \\<in> R;\n        (aa, a'a)\n        \\<in> \\<langle>R\\<rangle>list_rel O br set distinct\\<rbrakk>\n       \\<Longrightarrow> (glist_member eq a aa, a' \\<in> a'a) \\<in> bool_rel", "apply (erule relcompE)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a a' aa a'a x y z.\n       \\<lbrakk>GEN_OP eq (=) (R \\<rightarrow> R \\<rightarrow> bool_rel);\n        (a, a') \\<in> R; (aa, a'a) = (x, z);\n        (x, y) \\<in> \\<langle>R\\<rangle>list_rel;\n        (y, z) \\<in> br set distinct\\<rbrakk>\n       \\<Longrightarrow> (glist_member eq a aa, a' \\<in> a'a) \\<in> bool_rel", "apply (simp del: pair_in_Id_conv)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a a' aa a'a x y.\n       \\<lbrakk>(eq, (=)) \\<in> R \\<rightarrow> R \\<rightarrow> bool_rel;\n        (a, a') \\<in> R; aa = x; (x, y) \\<in> \\<langle>R\\<rangle>list_rel;\n        (y, a'a) \\<in> br set distinct\\<rbrakk>\n       \\<Longrightarrow> (glist_member eq a x, a' \\<in> a'a) \\<in> bool_rel", "apply (subst Id_comp_Id[symmetric])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a a' aa a'a x y.\n       \\<lbrakk>(eq, (=)) \\<in> R \\<rightarrow> R \\<rightarrow> bool_rel;\n        (a, a') \\<in> R; aa = x; (x, y) \\<in> \\<langle>R\\<rangle>list_rel;\n        (y, a'a) \\<in> br set distinct\\<rbrakk>\n       \\<Longrightarrow> (glist_member eq a x, a' \\<in> a'a)\n                         \\<in> bool_rel O bool_rel", "apply (rule relcompI[rotated])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a a' aa a'a x y.\n       \\<lbrakk>(eq, (=)) \\<in> R \\<rightarrow> R \\<rightarrow> bool_rel;\n        (a, a') \\<in> R; aa = x; (x, y) \\<in> \\<langle>R\\<rangle>list_rel;\n        (y, a'a) \\<in> br set distinct\\<rbrakk>\n       \\<Longrightarrow> (?b6 a a' aa a'a x y, a' \\<in> a'a) \\<in> bool_rel\n 2. \\<And>a a' aa a'a x y.\n       \\<lbrakk>(eq, (=)) \\<in> R \\<rightarrow> R \\<rightarrow> bool_rel;\n        (a, a') \\<in> R; aa = x; (x, y) \\<in> \\<langle>R\\<rangle>list_rel;\n        (y, a'a) \\<in> br set distinct\\<rbrakk>\n       \\<Longrightarrow> (glist_member eq a x, ?b6 a a' aa a'a x y)\n                         \\<in> bool_rel", "apply (rule glist_member_id_impl[param_fo])"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>a a' aa a'a x y.\n       \\<lbrakk>(eq, (=)) \\<in> R \\<rightarrow> R \\<rightarrow> bool_rel;\n        (a, a') \\<in> R; aa = x; (x, y) \\<in> \\<langle>R\\<rangle>list_rel;\n        (y, a'a) \\<in> br set distinct\\<rbrakk>\n       \\<Longrightarrow> (?x10 a a' aa a'a x y, a') \\<in> Id\n 2. \\<And>a a' aa a'a x y.\n       \\<lbrakk>(eq, (=)) \\<in> R \\<rightarrow> R \\<rightarrow> bool_rel;\n        (a, a') \\<in> R; aa = x; (x, y) \\<in> \\<langle>R\\<rangle>list_rel;\n        (y, a'a) \\<in> br set distinct\\<rbrakk>\n       \\<Longrightarrow> (?x9 a a' aa a'a x y, a'a) \\<in> br set distinct\n 3. \\<And>a a' aa a'a x y.\n       \\<lbrakk>(eq, (=)) \\<in> R \\<rightarrow> R \\<rightarrow> bool_rel;\n        (a, a') \\<in> R; aa = x; (x, y) \\<in> \\<langle>R\\<rangle>list_rel;\n        (y, a'a) \\<in> br set distinct\\<rbrakk>\n       \\<Longrightarrow> (glist_member eq a x,\n                          glist_member (=) (?x10 a a' aa a'a x y)\n                           (?x9 a a' aa a'a x y))\n                         \\<in> bool_rel", "apply (rule IdI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a a' aa a'a x y.\n       \\<lbrakk>(eq, (=)) \\<in> R \\<rightarrow> R \\<rightarrow> bool_rel;\n        (a, a') \\<in> R; aa = x; (x, y) \\<in> \\<langle>R\\<rangle>list_rel;\n        (y, a'a) \\<in> br set distinct\\<rbrakk>\n       \\<Longrightarrow> (?x9 a a' aa a'a x y, a'a) \\<in> br set distinct\n 2. \\<And>a a' aa a'a x y.\n       \\<lbrakk>(eq, (=)) \\<in> R \\<rightarrow> R \\<rightarrow> bool_rel;\n        (a, a') \\<in> R; aa = x; (x, y) \\<in> \\<langle>R\\<rangle>list_rel;\n        (y, a'a) \\<in> br set distinct\\<rbrakk>\n       \\<Longrightarrow> (glist_member eq a x,\n                          glist_member (=) a' (?x9 a a' aa a'a x y))\n                         \\<in> bool_rel", "apply assumption"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a a' aa a'a x y.\n       \\<lbrakk>(eq, (=)) \\<in> R \\<rightarrow> R \\<rightarrow> bool_rel;\n        (a, a') \\<in> R; aa = x; (x, y) \\<in> \\<langle>R\\<rangle>list_rel;\n        (y, a'a) \\<in> br set distinct\\<rbrakk>\n       \\<Longrightarrow> (glist_member eq a x, glist_member (=) a' y)\n                         \\<in> bool_rel", "apply parametricity"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma list_set_autoref_insert[autoref_rules]:\n    assumes \"GEN_OP eq (=) (R\\<rightarrow>R\\<rightarrow>Id)\"\n    shows \"(glist_insert eq,Set.insert) \n      \\<in> R \\<rightarrow> \\<langle>R\\<rangle>list_set_rel \\<rightarrow> \\<langle>R\\<rangle>list_set_rel\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (glist_insert eq, insert)\n    \\<in> R \\<rightarrow>\n          \\<langle>R\\<rangle>list_set_rel \\<rightarrow>\n          \\<langle>R\\<rangle>list_set_rel", "using assms"], ["proof (prove)\nusing this:\n  GEN_OP eq (=) (R \\<rightarrow> R \\<rightarrow> bool_rel)\n\ngoal (1 subgoal):\n 1. (glist_insert eq, insert)\n    \\<in> R \\<rightarrow>\n          \\<langle>R\\<rangle>list_set_rel \\<rightarrow>\n          \\<langle>R\\<rangle>list_set_rel", "apply (intro fun_relI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a a' aa a'a.\n       \\<lbrakk>GEN_OP eq (=) (R \\<rightarrow> R \\<rightarrow> bool_rel);\n        (a, a') \\<in> R;\n        (aa, a'a) \\<in> \\<langle>R\\<rangle>list_set_rel\\<rbrakk>\n       \\<Longrightarrow> (glist_insert eq a aa, insert a' a'a)\n                         \\<in> \\<langle>R\\<rangle>list_set_rel", "unfolding list_set_rel_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a a' aa a'a.\n       \\<lbrakk>GEN_OP eq (=) (R \\<rightarrow> R \\<rightarrow> bool_rel);\n        (a, a') \\<in> R;\n        (aa, a'a)\n        \\<in> \\<langle>R\\<rangle>list_rel O br set distinct\\<rbrakk>\n       \\<Longrightarrow> (glist_insert eq a aa, insert a' a'a)\n                         \\<in> \\<langle>R\\<rangle>list_rel O br set distinct", "apply (erule relcompE)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a a' aa a'a x y z.\n       \\<lbrakk>GEN_OP eq (=) (R \\<rightarrow> R \\<rightarrow> bool_rel);\n        (a, a') \\<in> R; (aa, a'a) = (x, z);\n        (x, y) \\<in> \\<langle>R\\<rangle>list_rel;\n        (y, z) \\<in> br set distinct\\<rbrakk>\n       \\<Longrightarrow> (glist_insert eq a aa, insert a' a'a)\n                         \\<in> \\<langle>R\\<rangle>list_rel O br set distinct", "apply (simp del: pair_in_Id_conv)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a a' aa a'a x y.\n       \\<lbrakk>(eq, (=)) \\<in> R \\<rightarrow> R \\<rightarrow> bool_rel;\n        (a, a') \\<in> R; aa = x; (x, y) \\<in> \\<langle>R\\<rangle>list_rel;\n        (y, a'a) \\<in> br set distinct\\<rbrakk>\n       \\<Longrightarrow> (glist_insert eq a x, insert a' a'a)\n                         \\<in> \\<langle>R\\<rangle>list_rel O br set distinct", "apply (rule relcompI[rotated])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a a' aa a'a x y.\n       \\<lbrakk>(eq, (=)) \\<in> R \\<rightarrow> R \\<rightarrow> bool_rel;\n        (a, a') \\<in> R; aa = x; (x, y) \\<in> \\<langle>R\\<rangle>list_rel;\n        (y, a'a) \\<in> br set distinct\\<rbrakk>\n       \\<Longrightarrow> (?b5 a a' aa a'a x y, insert a' a'a)\n                         \\<in> br set distinct\n 2. \\<And>a a' aa a'a x y.\n       \\<lbrakk>(eq, (=)) \\<in> R \\<rightarrow> R \\<rightarrow> bool_rel;\n        (a, a') \\<in> R; aa = x; (x, y) \\<in> \\<langle>R\\<rangle>list_rel;\n        (y, a'a) \\<in> br set distinct\\<rbrakk>\n       \\<Longrightarrow> (glist_insert eq a x, ?b5 a a' aa a'a x y)\n                         \\<in> \\<langle>R\\<rangle>list_rel", "apply (rule glist_insert_id_impl[param_fo])"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>a a' aa a'a x y.\n       \\<lbrakk>(eq, (=)) \\<in> R \\<rightarrow> R \\<rightarrow> bool_rel;\n        (a, a') \\<in> R; aa = x; (x, y) \\<in> \\<langle>R\\<rangle>list_rel;\n        (y, a'a) \\<in> br set distinct\\<rbrakk>\n       \\<Longrightarrow> (?x9 a a' aa a'a x y, a') \\<in> Id\n 2. \\<And>a a' aa a'a x y.\n       \\<lbrakk>(eq, (=)) \\<in> R \\<rightarrow> R \\<rightarrow> bool_rel;\n        (a, a') \\<in> R; aa = x; (x, y) \\<in> \\<langle>R\\<rangle>list_rel;\n        (y, a'a) \\<in> br set distinct\\<rbrakk>\n       \\<Longrightarrow> (?x8 a a' aa a'a x y, a'a) \\<in> br set distinct\n 3. \\<And>a a' aa a'a x y.\n       \\<lbrakk>(eq, (=)) \\<in> R \\<rightarrow> R \\<rightarrow> bool_rel;\n        (a, a') \\<in> R; aa = x; (x, y) \\<in> \\<langle>R\\<rangle>list_rel;\n        (y, a'a) \\<in> br set distinct\\<rbrakk>\n       \\<Longrightarrow> (glist_insert eq a x,\n                          glist_insert (=) (?x9 a a' aa a'a x y)\n                           (?x8 a a' aa a'a x y))\n                         \\<in> \\<langle>R\\<rangle>list_rel", "apply (rule IdI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a a' aa a'a x y.\n       \\<lbrakk>(eq, (=)) \\<in> R \\<rightarrow> R \\<rightarrow> bool_rel;\n        (a, a') \\<in> R; aa = x; (x, y) \\<in> \\<langle>R\\<rangle>list_rel;\n        (y, a'a) \\<in> br set distinct\\<rbrakk>\n       \\<Longrightarrow> (?x8 a a' aa a'a x y, a'a) \\<in> br set distinct\n 2. \\<And>a a' aa a'a x y.\n       \\<lbrakk>(eq, (=)) \\<in> R \\<rightarrow> R \\<rightarrow> bool_rel;\n        (a, a') \\<in> R; aa = x; (x, y) \\<in> \\<langle>R\\<rangle>list_rel;\n        (y, a'a) \\<in> br set distinct\\<rbrakk>\n       \\<Longrightarrow> (glist_insert eq a x,\n                          glist_insert (=) a' (?x8 a a' aa a'a x y))\n                         \\<in> \\<langle>R\\<rangle>list_rel", "apply assumption"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a a' aa a'a x y.\n       \\<lbrakk>(eq, (=)) \\<in> R \\<rightarrow> R \\<rightarrow> bool_rel;\n        (a, a') \\<in> R; aa = x; (x, y) \\<in> \\<langle>R\\<rangle>list_rel;\n        (y, a'a) \\<in> br set distinct\\<rbrakk>\n       \\<Longrightarrow> (glist_insert eq a x, glist_insert (=) a' y)\n                         \\<in> \\<langle>R\\<rangle>list_rel", "apply parametricity"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma list_set_autoref_delete[autoref_rules]:\n    assumes \"GEN_OP eq (=) (R\\<rightarrow>R\\<rightarrow>Id)\"\n    shows \"(glist_delete eq,op_set_delete) \n      \\<in> R \\<rightarrow> \\<langle>R\\<rangle>list_set_rel \\<rightarrow> \\<langle>R\\<rangle>list_set_rel\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (glist_delete eq, op_set_delete)\n    \\<in> R \\<rightarrow>\n          \\<langle>R\\<rangle>list_set_rel \\<rightarrow>\n          \\<langle>R\\<rangle>list_set_rel", "using assms"], ["proof (prove)\nusing this:\n  GEN_OP eq (=) (R \\<rightarrow> R \\<rightarrow> bool_rel)\n\ngoal (1 subgoal):\n 1. (glist_delete eq, op_set_delete)\n    \\<in> R \\<rightarrow>\n          \\<langle>R\\<rangle>list_set_rel \\<rightarrow>\n          \\<langle>R\\<rangle>list_set_rel", "apply (intro fun_relI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a a' aa a'a.\n       \\<lbrakk>GEN_OP eq (=) (R \\<rightarrow> R \\<rightarrow> bool_rel);\n        (a, a') \\<in> R;\n        (aa, a'a) \\<in> \\<langle>R\\<rangle>list_set_rel\\<rbrakk>\n       \\<Longrightarrow> (glist_delete eq a aa, op_set_delete a' a'a)\n                         \\<in> \\<langle>R\\<rangle>list_set_rel", "unfolding list_set_rel_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a a' aa a'a.\n       \\<lbrakk>GEN_OP eq (=) (R \\<rightarrow> R \\<rightarrow> bool_rel);\n        (a, a') \\<in> R;\n        (aa, a'a)\n        \\<in> \\<langle>R\\<rangle>list_rel O br set distinct\\<rbrakk>\n       \\<Longrightarrow> (glist_delete eq a aa, op_set_delete a' a'a)\n                         \\<in> \\<langle>R\\<rangle>list_rel O br set distinct", "apply (erule relcompE)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a a' aa a'a x y z.\n       \\<lbrakk>GEN_OP eq (=) (R \\<rightarrow> R \\<rightarrow> bool_rel);\n        (a, a') \\<in> R; (aa, a'a) = (x, z);\n        (x, y) \\<in> \\<langle>R\\<rangle>list_rel;\n        (y, z) \\<in> br set distinct\\<rbrakk>\n       \\<Longrightarrow> (glist_delete eq a aa, op_set_delete a' a'a)\n                         \\<in> \\<langle>R\\<rangle>list_rel O br set distinct", "apply (simp del: pair_in_Id_conv)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a a' aa a'a x y.\n       \\<lbrakk>(eq, (=)) \\<in> R \\<rightarrow> R \\<rightarrow> bool_rel;\n        (a, a') \\<in> R; aa = x; (x, y) \\<in> \\<langle>R\\<rangle>list_rel;\n        (y, a'a) \\<in> br set distinct\\<rbrakk>\n       \\<Longrightarrow> (glist_delete eq a x, a'a - {a'})\n                         \\<in> \\<langle>R\\<rangle>list_rel O br set distinct", "apply (rule relcompI[rotated])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a a' aa a'a x y.\n       \\<lbrakk>(eq, (=)) \\<in> R \\<rightarrow> R \\<rightarrow> bool_rel;\n        (a, a') \\<in> R; aa = x; (x, y) \\<in> \\<langle>R\\<rangle>list_rel;\n        (y, a'a) \\<in> br set distinct\\<rbrakk>\n       \\<Longrightarrow> (?b5 a a' aa a'a x y, a'a - {a'})\n                         \\<in> br set distinct\n 2. \\<And>a a' aa a'a x y.\n       \\<lbrakk>(eq, (=)) \\<in> R \\<rightarrow> R \\<rightarrow> bool_rel;\n        (a, a') \\<in> R; aa = x; (x, y) \\<in> \\<langle>R\\<rangle>list_rel;\n        (y, a'a) \\<in> br set distinct\\<rbrakk>\n       \\<Longrightarrow> (glist_delete eq a x, ?b5 a a' aa a'a x y)\n                         \\<in> \\<langle>R\\<rangle>list_rel", "apply (rule glist_delete_id_impl[param_fo])"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>a a' aa a'a x y.\n       \\<lbrakk>(eq, (=)) \\<in> R \\<rightarrow> R \\<rightarrow> bool_rel;\n        (a, a') \\<in> R; aa = x; (x, y) \\<in> \\<langle>R\\<rangle>list_rel;\n        (y, a'a) \\<in> br set distinct\\<rbrakk>\n       \\<Longrightarrow> (?x9 a a' aa a'a x y, a') \\<in> Id\n 2. \\<And>a a' aa a'a x y.\n       \\<lbrakk>(eq, (=)) \\<in> R \\<rightarrow> R \\<rightarrow> bool_rel;\n        (a, a') \\<in> R; aa = x; (x, y) \\<in> \\<langle>R\\<rangle>list_rel;\n        (y, a'a) \\<in> br set distinct\\<rbrakk>\n       \\<Longrightarrow> (?x8 a a' aa a'a x y, a'a) \\<in> br set distinct\n 3. \\<And>a a' aa a'a x y.\n       \\<lbrakk>(eq, (=)) \\<in> R \\<rightarrow> R \\<rightarrow> bool_rel;\n        (a, a') \\<in> R; aa = x; (x, y) \\<in> \\<langle>R\\<rangle>list_rel;\n        (y, a'a) \\<in> br set distinct\\<rbrakk>\n       \\<Longrightarrow> (glist_delete eq a x,\n                          glist_delete (=) (?x9 a a' aa a'a x y)\n                           (?x8 a a' aa a'a x y))\n                         \\<in> \\<langle>R\\<rangle>list_rel", "apply (rule IdI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a a' aa a'a x y.\n       \\<lbrakk>(eq, (=)) \\<in> R \\<rightarrow> R \\<rightarrow> bool_rel;\n        (a, a') \\<in> R; aa = x; (x, y) \\<in> \\<langle>R\\<rangle>list_rel;\n        (y, a'a) \\<in> br set distinct\\<rbrakk>\n       \\<Longrightarrow> (?x8 a a' aa a'a x y, a'a) \\<in> br set distinct\n 2. \\<And>a a' aa a'a x y.\n       \\<lbrakk>(eq, (=)) \\<in> R \\<rightarrow> R \\<rightarrow> bool_rel;\n        (a, a') \\<in> R; aa = x; (x, y) \\<in> \\<langle>R\\<rangle>list_rel;\n        (y, a'a) \\<in> br set distinct\\<rbrakk>\n       \\<Longrightarrow> (glist_delete eq a x,\n                          glist_delete (=) a' (?x8 a a' aa a'a x y))\n                         \\<in> \\<langle>R\\<rangle>list_rel", "apply assumption"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a a' aa a'a x y.\n       \\<lbrakk>(eq, (=)) \\<in> R \\<rightarrow> R \\<rightarrow> bool_rel;\n        (a, a') \\<in> R; aa = x; (x, y) \\<in> \\<langle>R\\<rangle>list_rel;\n        (y, a'a) \\<in> br set distinct\\<rbrakk>\n       \\<Longrightarrow> (glist_delete eq a x, glist_delete (=) a' y)\n                         \\<in> \\<langle>R\\<rangle>list_rel", "apply parametricity"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma list_set_autoref_to_list[autoref_ga_rules]: \n    shows \"is_set_to_sorted_list (\\<lambda>_ _. True) R list_set_rel id\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_set_to_sorted_list (\\<lambda>_ _. True) R list_set_rel id", "unfolding is_set_to_list_def is_set_to_sorted_list_def\n      it_to_sorted_list_def list_set_rel_def br_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>s s'.\n       (s, s')\n       \\<in> \\<langle>R\\<rangle>list_rel O\n             {(c, a). a = set c \\<and> distinct c} \\<longrightarrow>\n       (\\<exists>l'.\n           (id s, l') \\<in> \\<langle>R\\<rangle>list_rel \\<and>\n           RETURN l'\n           \\<le> SPEC\n                  (\\<lambda>l.\n                      distinct l \\<and>\n                      s' = set l \\<and> sorted_wrt (\\<lambda>_ _. True) l))", "by auto"], ["", "lemma list_set_it_simp[refine_transfer_post_simp]:\n    \"foldli (id l) = foldli l\""], ["proof (prove)\ngoal (1 subgoal):\n 1. foldli (id l) = foldli l", "by simp"], ["", "lemma glist_insert_dj_id_impl:\n    \"\\<lbrakk> x\\<notin>s; (l,s)\\<in>br set distinct \\<rbrakk> \\<Longrightarrow> (x#l,insert x s)\\<in>br set distinct\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<notin> s; (l, s) \\<in> br set distinct\\<rbrakk>\n    \\<Longrightarrow> (x # l, insert x s) \\<in> br set distinct", "by (auto simp: br_def)"], ["", "context begin"], ["", "interpretation autoref_syn"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "lemma list_set_autoref_insert_dj[autoref_rules]:\n    assumes \"PRIO_TAG_OPTIMIZATION\"\n    assumes \"SIDE_PRECOND_OPT (x'\\<notin>s')\"\n    assumes \"(x,x')\\<in>R\"\n    assumes \"(s,s')\\<in>\\<langle>R\\<rangle>list_set_rel\"\n    shows \"(x#s,\n      (OP Set.insert ::: R \\<rightarrow> \\<langle>R\\<rangle>list_set_rel \\<rightarrow> \\<langle>R\\<rangle>list_set_rel) $ x' $ s') \n      \\<in> \\<langle>R\\<rangle>list_set_rel\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (x # s,\n     (OP insert :::\n      R \\<rightarrow>\n      \\<langle>R\\<rangle>list_set_rel \\<rightarrow>\n      \\<langle>R\\<rangle>list_set_rel) $\n     x' $\n     s')\n    \\<in> \\<langle>R\\<rangle>list_set_rel", "using assms"], ["proof (prove)\nusing this:\n  PRIO_TAG_OPTIMIZATION\n  SIDE_PRECOND_OPT (x' \\<notin> s')\n  (x, x') \\<in> R\n  (s, s') \\<in> \\<langle>R\\<rangle>list_set_rel\n\ngoal (1 subgoal):\n 1. (x # s,\n     (OP insert :::\n      R \\<rightarrow>\n      \\<langle>R\\<rangle>list_set_rel \\<rightarrow>\n      \\<langle>R\\<rangle>list_set_rel) $\n     x' $\n     s')\n    \\<in> \\<langle>R\\<rangle>list_set_rel", "unfolding autoref_tag_defs"], ["proof (prove)\nusing this:\n  PRIO_TAG_OPTIMIZATION\n  x' \\<notin> s'\n  (x, x') \\<in> R\n  (s, s') \\<in> \\<langle>R\\<rangle>list_set_rel\n\ngoal (1 subgoal):\n 1. (x # s, insert x' s') \\<in> \\<langle>R\\<rangle>list_set_rel", "unfolding list_set_rel_def"], ["proof (prove)\nusing this:\n  PRIO_TAG_OPTIMIZATION\n  x' \\<notin> s'\n  (x, x') \\<in> R\n  (s, s') \\<in> \\<langle>R\\<rangle>list_rel O br set distinct\n\ngoal (1 subgoal):\n 1. (x # s, insert x' s')\n    \\<in> \\<langle>R\\<rangle>list_rel O br set distinct", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>PRIO_TAG_OPTIMIZATION; x' \\<notin> s'; (x, x') \\<in> R;\n     (s, s') \\<in> \\<langle>R\\<rangle>list_rel O br set distinct\\<rbrakk>\n    \\<Longrightarrow> (x # s, insert x' s')\n                      \\<in> \\<langle>R\\<rangle>list_rel O br set distinct", "apply (erule relcompE)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xa y z.\n       \\<lbrakk>PRIO_TAG_OPTIMIZATION; x' \\<notin> s'; (x, x') \\<in> R;\n        (s, s') = (xa, z); (xa, y) \\<in> \\<langle>R\\<rangle>list_rel;\n        (y, z) \\<in> br set distinct\\<rbrakk>\n       \\<Longrightarrow> (x # s, insert x' s')\n                         \\<in> \\<langle>R\\<rangle>list_rel O br set distinct", "apply (simp del: pair_in_Id_conv)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xa y.\n       \\<lbrakk>x' \\<notin> s'; (x, x') \\<in> R; s = xa;\n        (xa, y) \\<in> \\<langle>R\\<rangle>list_rel;\n        (y, s') \\<in> br set distinct\\<rbrakk>\n       \\<Longrightarrow> (x # xa, insert x' s')\n                         \\<in> \\<langle>R\\<rangle>list_rel O br set distinct", "apply (rule relcompI[rotated])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>xa y.\n       \\<lbrakk>x' \\<notin> s'; (x, x') \\<in> R; s = xa;\n        (xa, y) \\<in> \\<langle>R\\<rangle>list_rel;\n        (y, s') \\<in> br set distinct\\<rbrakk>\n       \\<Longrightarrow> (?b6 xa y, insert x' s') \\<in> br set distinct\n 2. \\<And>xa y.\n       \\<lbrakk>x' \\<notin> s'; (x, x') \\<in> R; s = xa;\n        (xa, y) \\<in> \\<langle>R\\<rangle>list_rel;\n        (y, s') \\<in> br set distinct\\<rbrakk>\n       \\<Longrightarrow> (x # xa, ?b6 xa y)\n                         \\<in> \\<langle>R\\<rangle>list_rel", "apply (rule glist_insert_dj_id_impl)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>xa y.\n       \\<lbrakk>x' \\<notin> s'; (x, x') \\<in> R; s = xa;\n        (xa, y) \\<in> \\<langle>R\\<rangle>list_rel;\n        (y, s') \\<in> br set distinct\\<rbrakk>\n       \\<Longrightarrow> x' \\<notin> s'\n 2. \\<And>xa y.\n       \\<lbrakk>x' \\<notin> s'; (x, x') \\<in> R; s = xa;\n        (xa, y) \\<in> \\<langle>R\\<rangle>list_rel;\n        (y, s') \\<in> br set distinct\\<rbrakk>\n       \\<Longrightarrow> (?l9 xa y, s') \\<in> br set distinct\n 3. \\<And>xa y.\n       \\<lbrakk>x' \\<notin> s'; (x, x') \\<in> R; s = xa;\n        (xa, y) \\<in> \\<langle>R\\<rangle>list_rel;\n        (y, s') \\<in> br set distinct\\<rbrakk>\n       \\<Longrightarrow> (x # xa, x' # ?l9 xa y)\n                         \\<in> \\<langle>R\\<rangle>list_rel", "apply assumption"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>xa y.\n       \\<lbrakk>x' \\<notin> s'; (x, x') \\<in> R; s = xa;\n        (xa, y) \\<in> \\<langle>R\\<rangle>list_rel;\n        (y, s') \\<in> br set distinct\\<rbrakk>\n       \\<Longrightarrow> (?l9 xa y, s') \\<in> br set distinct\n 2. \\<And>xa y.\n       \\<lbrakk>x' \\<notin> s'; (x, x') \\<in> R; s = xa;\n        (xa, y) \\<in> \\<langle>R\\<rangle>list_rel;\n        (y, s') \\<in> br set distinct\\<rbrakk>\n       \\<Longrightarrow> (x # xa, x' # ?l9 xa y)\n                         \\<in> \\<langle>R\\<rangle>list_rel", "apply assumption"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xa y.\n       \\<lbrakk>x' \\<notin> s'; (x, x') \\<in> R; s = xa;\n        (xa, y) \\<in> \\<langle>R\\<rangle>list_rel;\n        (y, s') \\<in> br set distinct\\<rbrakk>\n       \\<Longrightarrow> (x # xa, x' # y) \\<in> \\<langle>R\\<rangle>list_rel", "apply parametricity"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "end"], ["", "subsection \\<open>More Operations\\<close>"], ["", "lemma list_set_autoref_isEmpty[autoref_rules]:\n    \"(is_Nil,op_set_isEmpty) \\<in> \\<langle>R\\<rangle>list_set_rel \\<rightarrow> bool_rel\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (is_Nil, op_set_isEmpty)\n    \\<in> \\<langle>R\\<rangle>list_set_rel \\<rightarrow> bool_rel", "by (auto simp: list_set_rel_def br_def split: list.split_asm)"], ["", "lemma list_set_autoref_filter[autoref_rules]:\n    \"(filter,op_set_filter) \n      \\<in> (R \\<rightarrow> bool_rel) \\<rightarrow> \\<langle>R\\<rangle>list_set_rel \\<rightarrow> \\<langle>R\\<rangle>list_set_rel\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (filter, op_set_filter)\n    \\<in> (R \\<rightarrow> bool_rel) \\<rightarrow>\n          \\<langle>R\\<rangle>list_set_rel \\<rightarrow>\n          \\<langle>R\\<rangle>list_set_rel", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (filter, op_set_filter)\n    \\<in> (R \\<rightarrow> bool_rel) \\<rightarrow>\n          \\<langle>R\\<rangle>list_set_rel \\<rightarrow>\n          \\<langle>R\\<rangle>list_set_rel", "have \"(filter, op_set_filter) \n      \\<in> (Id \\<rightarrow> bool_rel) \\<rightarrow> \\<langle>Id\\<rangle>list_set_rel \\<rightarrow> \\<langle>Id\\<rangle>list_set_rel\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (filter, op_set_filter)\n    \\<in> (Id \\<rightarrow> bool_rel) \\<rightarrow>\n          \\<langle>Id\\<rangle>list_set_rel \\<rightarrow>\n          \\<langle>Id\\<rangle>list_set_rel", "by (auto simp: list_set_rel_def br_def)"], ["proof (state)\nthis:\n  (filter, op_set_filter)\n  \\<in> (Id \\<rightarrow> bool_rel) \\<rightarrow>\n        \\<langle>Id\\<rangle>list_set_rel \\<rightarrow>\n        \\<langle>Id\\<rangle>list_set_rel\n\ngoal (1 subgoal):\n 1. (filter, op_set_filter)\n    \\<in> (R \\<rightarrow> bool_rel) \\<rightarrow>\n          \\<langle>R\\<rangle>list_set_rel \\<rightarrow>\n          \\<langle>R\\<rangle>list_set_rel", "note this[param_fo]"], ["proof (state)\nthis:\n  \\<lbrakk>(?x1, ?x'1) \\<in> Id \\<rightarrow> bool_rel;\n   (?x, ?x') \\<in> \\<langle>Id\\<rangle>list_set_rel\\<rbrakk>\n  \\<Longrightarrow> (filter ?x1 ?x, op_set_filter ?x'1 ?x')\n                    \\<in> \\<langle>Id\\<rangle>list_set_rel\n\ngoal (1 subgoal):\n 1. (filter, op_set_filter)\n    \\<in> (R \\<rightarrow> bool_rel) \\<rightarrow>\n          \\<langle>R\\<rangle>list_set_rel \\<rightarrow>\n          \\<langle>R\\<rangle>list_set_rel", "moreover"], ["proof (state)\nthis:\n  \\<lbrakk>(?x1, ?x'1) \\<in> Id \\<rightarrow> bool_rel;\n   (?x, ?x') \\<in> \\<langle>Id\\<rangle>list_set_rel\\<rbrakk>\n  \\<Longrightarrow> (filter ?x1 ?x, op_set_filter ?x'1 ?x')\n                    \\<in> \\<langle>Id\\<rangle>list_set_rel\n\ngoal (1 subgoal):\n 1. (filter, op_set_filter)\n    \\<in> (R \\<rightarrow> bool_rel) \\<rightarrow>\n          \\<langle>R\\<rangle>list_set_rel \\<rightarrow>\n          \\<langle>R\\<rangle>list_set_rel", "have \"(filter,filter)\\<in>(R \\<rightarrow> bool_rel) \\<rightarrow> \\<langle>R\\<rangle>list_rel \\<rightarrow> \\<langle>R\\<rangle>list_rel\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (filter, filter)\n    \\<in> (R \\<rightarrow> bool_rel) \\<rightarrow>\n          \\<langle>R\\<rangle>list_rel \\<rightarrow>\n          \\<langle>R\\<rangle>list_rel", "unfolding List.filter_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>uu uua.\n        rec_list (\\<lambda>P. [])\n         (\\<lambda>x xs xsa P. if P x then x # xsa P else xsa P) uua uu,\n     \\<lambda>uu uua.\n        rec_list (\\<lambda>P. [])\n         (\\<lambda>x xs xsa P. if P x then x # xsa P else xsa P) uua uu)\n    \\<in> (R \\<rightarrow> bool_rel) \\<rightarrow>\n          \\<langle>R\\<rangle>list_rel \\<rightarrow>\n          \\<langle>R\\<rangle>list_rel", "by parametricity"], ["proof (state)\nthis:\n  (filter, filter)\n  \\<in> (R \\<rightarrow> bool_rel) \\<rightarrow>\n        \\<langle>R\\<rangle>list_rel \\<rightarrow>\n        \\<langle>R\\<rangle>list_rel\n\ngoal (1 subgoal):\n 1. (filter, op_set_filter)\n    \\<in> (R \\<rightarrow> bool_rel) \\<rightarrow>\n          \\<langle>R\\<rangle>list_set_rel \\<rightarrow>\n          \\<langle>R\\<rangle>list_set_rel", "note this[param_fo]"], ["proof (state)\nthis:\n  \\<lbrakk>(?x1, ?x'1) \\<in> R \\<rightarrow> bool_rel;\n   (?x, ?x') \\<in> \\<langle>R\\<rangle>list_rel\\<rbrakk>\n  \\<Longrightarrow> (filter ?x1 ?x, filter ?x'1 ?x')\n                    \\<in> \\<langle>R\\<rangle>list_rel\n\ngoal (1 subgoal):\n 1. (filter, op_set_filter)\n    \\<in> (R \\<rightarrow> bool_rel) \\<rightarrow>\n          \\<langle>R\\<rangle>list_set_rel \\<rightarrow>\n          \\<langle>R\\<rangle>list_set_rel", "ultimately"], ["proof (chain)\npicking this:\n  \\<lbrakk>(?x1, ?x'1) \\<in> Id \\<rightarrow> bool_rel;\n   (?x, ?x') \\<in> \\<langle>Id\\<rangle>list_set_rel\\<rbrakk>\n  \\<Longrightarrow> (filter ?x1 ?x, op_set_filter ?x'1 ?x')\n                    \\<in> \\<langle>Id\\<rangle>list_set_rel\n  \\<lbrakk>(?x1, ?x'1) \\<in> R \\<rightarrow> bool_rel;\n   (?x, ?x') \\<in> \\<langle>R\\<rangle>list_rel\\<rbrakk>\n  \\<Longrightarrow> (filter ?x1 ?x, filter ?x'1 ?x')\n                    \\<in> \\<langle>R\\<rangle>list_rel", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<lbrakk>(?x1, ?x'1) \\<in> Id \\<rightarrow> bool_rel;\n   (?x, ?x') \\<in> \\<langle>Id\\<rangle>list_set_rel\\<rbrakk>\n  \\<Longrightarrow> (filter ?x1 ?x, op_set_filter ?x'1 ?x')\n                    \\<in> \\<langle>Id\\<rangle>list_set_rel\n  \\<lbrakk>(?x1, ?x'1) \\<in> R \\<rightarrow> bool_rel;\n   (?x, ?x') \\<in> \\<langle>R\\<rangle>list_rel\\<rbrakk>\n  \\<Longrightarrow> (filter ?x1 ?x, filter ?x'1 ?x')\n                    \\<in> \\<langle>R\\<rangle>list_rel\n\ngoal (1 subgoal):\n 1. (filter, op_set_filter)\n    \\<in> (R \\<rightarrow> bool_rel) \\<rightarrow>\n          \\<langle>R\\<rangle>list_set_rel \\<rightarrow>\n          \\<langle>R\\<rangle>list_set_rel", "unfolding list_set_rel_def"], ["proof (prove)\nusing this:\n  \\<lbrakk>(?x1, ?x'1) \\<in> Id \\<rightarrow> bool_rel;\n   (?x, ?x') \\<in> \\<langle>Id\\<rangle>list_rel O br set distinct\\<rbrakk>\n  \\<Longrightarrow> (filter ?x1 ?x, op_set_filter ?x'1 ?x')\n                    \\<in> \\<langle>Id\\<rangle>list_rel O br set distinct\n  \\<lbrakk>(?x1, ?x'1) \\<in> R \\<rightarrow> bool_rel;\n   (?x, ?x') \\<in> \\<langle>R\\<rangle>list_rel\\<rbrakk>\n  \\<Longrightarrow> (filter ?x1 ?x, filter ?x'1 ?x')\n                    \\<in> \\<langle>R\\<rangle>list_rel\n\ngoal (1 subgoal):\n 1. (filter, op_set_filter)\n    \\<in> (R \\<rightarrow> bool_rel) \\<rightarrow>\n          \\<langle>R\\<rangle>list_rel O br set distinct \\<rightarrow>\n          \\<langle>R\\<rangle>list_rel O br set distinct", "apply (intro fun_relI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a a' aa a'a.\n       \\<lbrakk>\\<And>x x' xa x'a.\n                   \\<lbrakk>(x, x') \\<in> Id \\<rightarrow> bool_rel;\n                    (xa, x'a)\n                    \\<in> \\<langle>Id\\<rangle>list_rel O\n                          br set distinct\\<rbrakk>\n                   \\<Longrightarrow> (filter x xa, op_set_filter x' x'a)\n                                     \\<in> \\<langle>Id\\<rangle>list_rel O\n     br set distinct;\n        \\<And>x x' xa x'a.\n           \\<lbrakk>(x, x') \\<in> R \\<rightarrow> bool_rel;\n            (xa, x'a) \\<in> \\<langle>R\\<rangle>list_rel\\<rbrakk>\n           \\<Longrightarrow> (filter x xa, filter x' x'a)\n                             \\<in> \\<langle>R\\<rangle>list_rel;\n        (a, a') \\<in> R \\<rightarrow> bool_rel;\n        (aa, a'a)\n        \\<in> \\<langle>R\\<rangle>list_rel O br set distinct\\<rbrakk>\n       \\<Longrightarrow> (filter a aa, op_set_filter a' a'a)\n                         \\<in> \\<langle>R\\<rangle>list_rel O br set distinct", "apply (erule relcompE, simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a a' aa a'a x y.\n       \\<lbrakk>\\<And>x x' xa x'a.\n                   \\<lbrakk>x = x'; (xa, x'a) \\<in> br set distinct\\<rbrakk>\n                   \\<Longrightarrow> (filter x xa, {x \\<in> x'a. x' x})\n                                     \\<in> br set distinct;\n        \\<And>x x' xa x'a.\n           \\<lbrakk>(x, x') \\<in> R \\<rightarrow> bool_rel;\n            (xa, x'a) \\<in> \\<langle>R\\<rangle>list_rel\\<rbrakk>\n           \\<Longrightarrow> (filter x xa, filter x' x'a)\n                             \\<in> \\<langle>R\\<rangle>list_rel;\n        (a, a') \\<in> R \\<rightarrow> bool_rel; aa = x;\n        (x, y) \\<in> \\<langle>R\\<rangle>list_rel;\n        (y, a'a) \\<in> br set distinct\\<rbrakk>\n       \\<Longrightarrow> (filter a x, {x \\<in> a'a. a' x})\n                         \\<in> \\<langle>R\\<rangle>list_rel O br set distinct", "apply (rule relcompI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a a' aa a'a x y.\n       \\<lbrakk>\\<And>x x' xa x'a.\n                   \\<lbrakk>x = x'; (xa, x'a) \\<in> br set distinct\\<rbrakk>\n                   \\<Longrightarrow> (filter x xa, {x \\<in> x'a. x' x})\n                                     \\<in> br set distinct;\n        \\<And>x x' xa x'a.\n           \\<lbrakk>(x, x') \\<in> R \\<rightarrow> bool_rel;\n            (xa, x'a) \\<in> \\<langle>R\\<rangle>list_rel\\<rbrakk>\n           \\<Longrightarrow> (filter x xa, filter x' x'a)\n                             \\<in> \\<langle>R\\<rangle>list_rel;\n        (a, a') \\<in> R \\<rightarrow> bool_rel; aa = x;\n        (x, y) \\<in> \\<langle>R\\<rangle>list_rel;\n        (y, a'a) \\<in> br set distinct\\<rbrakk>\n       \\<Longrightarrow> (filter a x, ?b12 a a' aa a'a x y)\n                         \\<in> \\<langle>R\\<rangle>list_rel\n 2. \\<And>a a' aa a'a x y.\n       \\<lbrakk>\\<And>x x' xa x'a.\n                   \\<lbrakk>x = x'; (xa, x'a) \\<in> br set distinct\\<rbrakk>\n                   \\<Longrightarrow> (filter x xa, {x \\<in> x'a. x' x})\n                                     \\<in> br set distinct;\n        \\<And>x x' xa x'a.\n           \\<lbrakk>(x, x') \\<in> R \\<rightarrow> bool_rel;\n            (xa, x'a) \\<in> \\<langle>R\\<rangle>list_rel\\<rbrakk>\n           \\<Longrightarrow> (filter x xa, filter x' x'a)\n                             \\<in> \\<langle>R\\<rangle>list_rel;\n        (a, a') \\<in> R \\<rightarrow> bool_rel; aa = x;\n        (x, y) \\<in> \\<langle>R\\<rangle>list_rel;\n        (y, a'a) \\<in> br set distinct\\<rbrakk>\n       \\<Longrightarrow> (?b12 a a' aa a'a x y, {x \\<in> a'a. a' x})\n                         \\<in> br set distinct", "apply (rprems, assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a a' aa a'a x y.\n       \\<lbrakk>\\<And>x x' xa x'a.\n                   \\<lbrakk>x = x'; (xa, x'a) \\<in> br set distinct\\<rbrakk>\n                   \\<Longrightarrow> (filter x xa, {x \\<in> x'a. x' x})\n                                     \\<in> br set distinct;\n        \\<And>x x' xa x'a.\n           \\<lbrakk>(x, x') \\<in> R \\<rightarrow> bool_rel;\n            (xa, x'a) \\<in> \\<langle>R\\<rangle>list_rel\\<rbrakk>\n           \\<Longrightarrow> (filter x xa, filter x' x'a)\n                             \\<in> \\<langle>R\\<rangle>list_rel;\n        (a, a') \\<in> R \\<rightarrow> bool_rel; aa = x;\n        (x, y) \\<in> \\<langle>R\\<rangle>list_rel;\n        (y, a'a) \\<in> br set distinct\\<rbrakk>\n       \\<Longrightarrow> (filter a' y, {x \\<in> a'a. a' x})\n                         \\<in> br set distinct", "apply (rprems, simp+)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  (filter, op_set_filter)\n  \\<in> (R \\<rightarrow> bool_rel) \\<rightarrow>\n        \\<langle>R\\<rangle>list_set_rel \\<rightarrow>\n        \\<langle>R\\<rangle>list_set_rel\n\ngoal:\nNo subgoals!", "qed"], ["", "context begin"], ["", "interpretation autoref_syn"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "lemma list_set_autoref_inj_image[autoref_rules]:\n    assumes \"PRIO_TAG_OPTIMIZATION\"\n    assumes INJ: \"SIDE_PRECOND_OPT (inj_on f s)\"\n    assumes [param]: \"(fi,f)\\<in>Ra\\<rightarrow>Rb\"\n    assumes LP: \"(l,s)\\<in>\\<langle>Ra\\<rangle>list_set_rel\"\n    shows \"(map fi l, \n      (OP (`) ::: (Ra\\<rightarrow>Rb) \\<rightarrow> \\<langle>Ra\\<rangle>list_set_rel \\<rightarrow> \\<langle>Rb\\<rangle>list_set_rel)$f$s) \n      \\<in> \\<langle>Rb\\<rangle>list_set_rel\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (map fi l,\n     (OP (`) :::\n      (Ra \\<rightarrow> Rb) \\<rightarrow>\n      \\<langle>Ra\\<rangle>list_set_rel \\<rightarrow>\n      \\<langle>Rb\\<rangle>list_set_rel) $\n     f $\n     s)\n    \\<in> \\<langle>Rb\\<rangle>list_set_rel", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (map fi l,\n     (OP (`) :::\n      (Ra \\<rightarrow> Rb) \\<rightarrow>\n      \\<langle>Ra\\<rangle>list_set_rel \\<rightarrow>\n      \\<langle>Rb\\<rangle>list_set_rel) $\n     f $\n     s)\n    \\<in> \\<langle>Rb\\<rangle>list_set_rel", "from LP"], ["proof (chain)\npicking this:\n  (l, s) \\<in> \\<langle>Ra\\<rangle>list_set_rel", "obtain l' where \n      [param]: \"(l,l')\\<in>\\<langle>Ra\\<rangle>list_rel\" and L'S: \"(l',s)\\<in>br set distinct\""], ["proof (prove)\nusing this:\n  (l, s) \\<in> \\<langle>Ra\\<rangle>list_set_rel\n\ngoal (1 subgoal):\n 1. (\\<And>l'.\n        \\<lbrakk>(l, l') \\<in> \\<langle>Ra\\<rangle>list_rel;\n         (l', s) \\<in> br set distinct\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding list_set_rel_def"], ["proof (prove)\nusing this:\n  (l, s) \\<in> \\<langle>Ra\\<rangle>list_rel O br set distinct\n\ngoal (1 subgoal):\n 1. (\\<And>l'.\n        \\<lbrakk>(l, l') \\<in> \\<langle>Ra\\<rangle>list_rel;\n         (l', s) \\<in> br set distinct\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  (l, l') \\<in> \\<langle>Ra\\<rangle>list_rel\n  (l', s) \\<in> br set distinct\n\ngoal (1 subgoal):\n 1. (map fi l,\n     (OP (`) :::\n      (Ra \\<rightarrow> Rb) \\<rightarrow>\n      \\<langle>Ra\\<rangle>list_set_rel \\<rightarrow>\n      \\<langle>Rb\\<rangle>list_set_rel) $\n     f $\n     s)\n    \\<in> \\<langle>Rb\\<rangle>list_set_rel", "have \"(map fi l, map f l')\\<in>\\<langle>Rb\\<rangle>list_rel\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (map fi l, map f l') \\<in> \\<langle>Rb\\<rangle>list_rel", "by parametricity"], ["proof (state)\nthis:\n  (map fi l, map f l') \\<in> \\<langle>Rb\\<rangle>list_rel\n\ngoal (1 subgoal):\n 1. (map fi l,\n     (OP (`) :::\n      (Ra \\<rightarrow> Rb) \\<rightarrow>\n      \\<langle>Ra\\<rangle>list_set_rel \\<rightarrow>\n      \\<langle>Rb\\<rangle>list_set_rel) $\n     f $\n     s)\n    \\<in> \\<langle>Rb\\<rangle>list_set_rel", "also"], ["proof (state)\nthis:\n  (map fi l, map f l') \\<in> \\<langle>Rb\\<rangle>list_rel\n\ngoal (1 subgoal):\n 1. (map fi l,\n     (OP (`) :::\n      (Ra \\<rightarrow> Rb) \\<rightarrow>\n      \\<langle>Ra\\<rangle>list_set_rel \\<rightarrow>\n      \\<langle>Rb\\<rangle>list_set_rel) $\n     f $\n     s)\n    \\<in> \\<langle>Rb\\<rangle>list_set_rel", "from INJ L'S"], ["proof (chain)\npicking this:\n  SIDE_PRECOND_OPT (inj_on f s)\n  (l', s) \\<in> br set distinct", "have \"(map f l',f`s)\\<in>br set distinct\""], ["proof (prove)\nusing this:\n  SIDE_PRECOND_OPT (inj_on f s)\n  (l', s) \\<in> br set distinct\n\ngoal (1 subgoal):\n 1. (map f l', f ` s) \\<in> br set distinct", "apply (induction l' arbitrary: s)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>s.\n       \\<lbrakk>SIDE_PRECOND_OPT (inj_on f s);\n        ([], s) \\<in> br set distinct\\<rbrakk>\n       \\<Longrightarrow> (map f [], f ` s) \\<in> br set distinct\n 2. \\<And>a l' s.\n       \\<lbrakk>\\<And>s.\n                   \\<lbrakk>SIDE_PRECOND_OPT (inj_on f s);\n                    (l', s) \\<in> br set distinct\\<rbrakk>\n                   \\<Longrightarrow> (map f l', f ` s)\n                                     \\<in> br set distinct;\n        SIDE_PRECOND_OPT (inj_on f s);\n        (a # l', s) \\<in> br set distinct\\<rbrakk>\n       \\<Longrightarrow> (map f (a # l'), f ` s) \\<in> br set distinct", "apply (auto simp: br_def dest: injD)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  (map f l', f ` s) \\<in> br set distinct\n\ngoal (1 subgoal):\n 1. (map fi l,\n     (OP (`) :::\n      (Ra \\<rightarrow> Rb) \\<rightarrow>\n      \\<langle>Ra\\<rangle>list_set_rel \\<rightarrow>\n      \\<langle>Rb\\<rangle>list_set_rel) $\n     f $\n     s)\n    \\<in> \\<langle>Rb\\<rangle>list_set_rel", "finally (relcompI)"], ["proof (chain)\npicking this:\n  (map fi l, f ` s) \\<in> \\<langle>Rb\\<rangle>list_rel O br set distinct", "show ?thesis"], ["proof (prove)\nusing this:\n  (map fi l, f ` s) \\<in> \\<langle>Rb\\<rangle>list_rel O br set distinct\n\ngoal (1 subgoal):\n 1. (map fi l,\n     (OP (`) :::\n      (Ra \\<rightarrow> Rb) \\<rightarrow>\n      \\<langle>Ra\\<rangle>list_set_rel \\<rightarrow>\n      \\<langle>Rb\\<rangle>list_set_rel) $\n     f $\n     s)\n    \\<in> \\<langle>Rb\\<rangle>list_set_rel", "unfolding autoref_tag_defs list_set_rel_def"], ["proof (prove)\nusing this:\n  (map fi l, f ` s) \\<in> \\<langle>Rb\\<rangle>list_rel O br set distinct\n\ngoal (1 subgoal):\n 1. (map fi l, f ` s) \\<in> \\<langle>Rb\\<rangle>list_rel O br set distinct", "."], ["proof (state)\nthis:\n  (map fi l,\n   (OP (`) :::\n    (Ra \\<rightarrow> Rb) \\<rightarrow>\n    \\<langle>Ra\\<rangle>list_set_rel \\<rightarrow>\n    \\<langle>Rb\\<rangle>list_set_rel) $\n   f $\n   s)\n  \\<in> \\<langle>Rb\\<rangle>list_set_rel\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "lemma list_set_cart_autoref[autoref_rules]:\n    fixes Rx :: \"('xi \\<times> 'x) set\"\n    fixes Ry :: \"('yi \\<times> 'y) set\"\n    shows \"(\\<lambda>xl yl. [ (x,y). x\\<leftarrow>xl, y\\<leftarrow>yl], op_set_cart) \n    \\<in> \\<langle>Rx\\<rangle>list_set_rel \\<rightarrow> \\<langle>Ry\\<rangle>list_set_rel \\<rightarrow> \\<langle>Rx \\<times>\\<^sub>r Ry\\<rangle>list_set_rel\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>xl yl. concat (map (\\<lambda>x. map (Pair x) yl) xl),\n     op_set_cart)\n    \\<in> \\<langle>Rx\\<rangle>list_set_rel \\<rightarrow>\n          \\<langle>Ry\\<rangle>list_set_rel \\<rightarrow>\n          \\<langle>Rx \\<times>\\<^sub>r Ry\\<rangle>list_set_rel", "proof (intro fun_relI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a a' aa a'a.\n       \\<lbrakk>(a, a') \\<in> \\<langle>Rx\\<rangle>list_set_rel;\n        (aa, a'a) \\<in> \\<langle>Ry\\<rangle>list_set_rel\\<rbrakk>\n       \\<Longrightarrow> (concat (map (\\<lambda>x. map (Pair x) aa) a),\n                          op_set_cart a' a'a)\n                         \\<in> \\<langle>Rx \\<times>\\<^sub>r\n  Ry\\<rangle>list_set_rel", "fix xl xs yl ys"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a a' aa a'a.\n       \\<lbrakk>(a, a') \\<in> \\<langle>Rx\\<rangle>list_set_rel;\n        (aa, a'a) \\<in> \\<langle>Ry\\<rangle>list_set_rel\\<rbrakk>\n       \\<Longrightarrow> (concat (map (\\<lambda>x. map (Pair x) aa) a),\n                          op_set_cart a' a'a)\n                         \\<in> \\<langle>Rx \\<times>\\<^sub>r\n  Ry\\<rangle>list_set_rel", "assume \"(xl, xs) \\<in> \\<langle>Rx\\<rangle>list_set_rel\" \"(yl, ys) \\<in> \\<langle>Ry\\<rangle>list_set_rel\""], ["proof (state)\nthis:\n  (xl, xs) \\<in> \\<langle>Rx\\<rangle>list_set_rel\n  (yl, ys) \\<in> \\<langle>Ry\\<rangle>list_set_rel\n\ngoal (1 subgoal):\n 1. \\<And>a a' aa a'a.\n       \\<lbrakk>(a, a') \\<in> \\<langle>Rx\\<rangle>list_set_rel;\n        (aa, a'a) \\<in> \\<langle>Ry\\<rangle>list_set_rel\\<rbrakk>\n       \\<Longrightarrow> (concat (map (\\<lambda>x. map (Pair x) aa) a),\n                          op_set_cart a' a'a)\n                         \\<in> \\<langle>Rx \\<times>\\<^sub>r\n  Ry\\<rangle>list_set_rel", "then"], ["proof (chain)\npicking this:\n  (xl, xs) \\<in> \\<langle>Rx\\<rangle>list_set_rel\n  (yl, ys) \\<in> \\<langle>Ry\\<rangle>list_set_rel", "obtain xl' :: \"'x list\" and yl' :: \"'y list\" where \n      [param]: \"(xl,xl')\\<in>\\<langle>Rx\\<rangle>list_rel\" \"(yl,yl')\\<in>\\<langle>Ry\\<rangle>list_rel\"\n      and XLS: \"(xl',xs)\\<in>br set distinct\" and YLS: \"(yl',ys)\\<in>br set distinct\""], ["proof (prove)\nusing this:\n  (xl, xs) \\<in> \\<langle>Rx\\<rangle>list_set_rel\n  (yl, ys) \\<in> \\<langle>Ry\\<rangle>list_set_rel\n\ngoal (1 subgoal):\n 1. (\\<And>xl' yl'.\n        \\<lbrakk>(xl, xl') \\<in> \\<langle>Rx\\<rangle>list_rel;\n         (yl, yl') \\<in> \\<langle>Ry\\<rangle>list_rel;\n         (xl', xs) \\<in> br set distinct;\n         (yl', ys) \\<in> br set distinct\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding list_set_rel_def"], ["proof (prove)\nusing this:\n  (xl, xs) \\<in> \\<langle>Rx\\<rangle>list_rel O br set distinct\n  (yl, ys) \\<in> \\<langle>Ry\\<rangle>list_rel O br set distinct\n\ngoal (1 subgoal):\n 1. (\\<And>xl' yl'.\n        \\<lbrakk>(xl, xl') \\<in> \\<langle>Rx\\<rangle>list_rel;\n         (yl, yl') \\<in> \\<langle>Ry\\<rangle>list_rel;\n         (xl', xs) \\<in> br set distinct;\n         (yl', ys) \\<in> br set distinct\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  (xl, xl') \\<in> \\<langle>Rx\\<rangle>list_rel\n  (yl, yl') \\<in> \\<langle>Ry\\<rangle>list_rel\n  (xl', xs) \\<in> br set distinct\n  (yl', ys) \\<in> br set distinct\n\ngoal (1 subgoal):\n 1. \\<And>a a' aa a'a.\n       \\<lbrakk>(a, a') \\<in> \\<langle>Rx\\<rangle>list_set_rel;\n        (aa, a'a) \\<in> \\<langle>Ry\\<rangle>list_set_rel\\<rbrakk>\n       \\<Longrightarrow> (concat (map (\\<lambda>x. map (Pair x) aa) a),\n                          op_set_cart a' a'a)\n                         \\<in> \\<langle>Rx \\<times>\\<^sub>r\n  Ry\\<rangle>list_set_rel", "have \"([ (x,y). x\\<leftarrow>xl, y\\<leftarrow>yl ], [ (x,y). x\\<leftarrow>xl', y\\<leftarrow>yl' ]) \n      \\<in> \\<langle>Rx \\<times>\\<^sub>r Ry\\<rangle>list_rel\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (concat (map (\\<lambda>x. map (Pair x) yl) xl),\n     concat (map (\\<lambda>x. map (Pair x) yl') xl'))\n    \\<in> \\<langle>Rx \\<times>\\<^sub>r Ry\\<rangle>list_rel", "by parametricity"], ["proof (state)\nthis:\n  (concat (map (\\<lambda>x. map (Pair x) yl) xl),\n   concat (map (\\<lambda>x. map (Pair x) yl') xl'))\n  \\<in> \\<langle>Rx \\<times>\\<^sub>r Ry\\<rangle>list_rel\n\ngoal (1 subgoal):\n 1. \\<And>a a' aa a'a.\n       \\<lbrakk>(a, a') \\<in> \\<langle>Rx\\<rangle>list_set_rel;\n        (aa, a'a) \\<in> \\<langle>Ry\\<rangle>list_set_rel\\<rbrakk>\n       \\<Longrightarrow> (concat (map (\\<lambda>x. map (Pair x) aa) a),\n                          op_set_cart a' a'a)\n                         \\<in> \\<langle>Rx \\<times>\\<^sub>r\n  Ry\\<rangle>list_set_rel", "also"], ["proof (state)\nthis:\n  (concat (map (\\<lambda>x. map (Pair x) yl) xl),\n   concat (map (\\<lambda>x. map (Pair x) yl') xl'))\n  \\<in> \\<langle>Rx \\<times>\\<^sub>r Ry\\<rangle>list_rel\n\ngoal (1 subgoal):\n 1. \\<And>a a' aa a'a.\n       \\<lbrakk>(a, a') \\<in> \\<langle>Rx\\<rangle>list_set_rel;\n        (aa, a'a) \\<in> \\<langle>Ry\\<rangle>list_set_rel\\<rbrakk>\n       \\<Longrightarrow> (concat (map (\\<lambda>x. map (Pair x) aa) a),\n                          op_set_cart a' a'a)\n                         \\<in> \\<langle>Rx \\<times>\\<^sub>r\n  Ry\\<rangle>list_set_rel", "have \"([ (x,y). x\\<leftarrow>xl', y\\<leftarrow>yl' ], xs \\<times> ys) \\<in> br set distinct\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (concat (map (\\<lambda>x. map (Pair x) yl') xl'), xs \\<times> ys)\n    \\<in> br set distinct", "using XLS YLS"], ["proof (prove)\nusing this:\n  (xl', xs) \\<in> br set distinct\n  (yl', ys) \\<in> br set distinct\n\ngoal (1 subgoal):\n 1. (concat (map (\\<lambda>x. map (Pair x) yl') xl'), xs \\<times> ys)\n    \\<in> br set distinct", "apply (auto simp: br_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>xs = set xl'; distinct xl'; ys = set yl'; distinct yl'\\<rbrakk>\n    \\<Longrightarrow> distinct\n                       (concat (map (\\<lambda>x. map (Pair x) yl') xl'))", "apply hypsubst_thin"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>distinct xl'; distinct yl'\\<rbrakk>\n    \\<Longrightarrow> distinct\n                       (concat (map (\\<lambda>x. map (Pair x) yl') xl'))", "apply (induction xl')"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>distinct []; distinct yl'\\<rbrakk>\n    \\<Longrightarrow> distinct\n                       (concat (map (\\<lambda>x. map (Pair x) yl') []))\n 2. \\<And>a xl'.\n       \\<lbrakk>\\<lbrakk>distinct xl'; distinct yl'\\<rbrakk>\n                \\<Longrightarrow> distinct\n                                   (concat\n                                     (map (\\<lambda>x. map (Pair x) yl')\n xl'));\n        distinct (a # xl'); distinct yl'\\<rbrakk>\n       \\<Longrightarrow> distinct\n                          (concat\n                            (map (\\<lambda>x. map (Pair x) yl') (a # xl')))", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a xl'.\n       \\<lbrakk>\\<lbrakk>distinct xl'; distinct yl'\\<rbrakk>\n                \\<Longrightarrow> distinct\n                                   (concat\n                                     (map (\\<lambda>x. map (Pair x) yl')\n xl'));\n        distinct (a # xl'); distinct yl'\\<rbrakk>\n       \\<Longrightarrow> distinct\n                          (concat\n                            (map (\\<lambda>x. map (Pair x) yl') (a # xl')))", "apply (induction yl')"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a xl'.\n       \\<lbrakk>\\<lbrakk>distinct xl'; distinct []\\<rbrakk>\n                \\<Longrightarrow> distinct\n                                   (concat\n                                     (map (\\<lambda>x. map (Pair x) [])\n xl'));\n        distinct (a # xl'); distinct []\\<rbrakk>\n       \\<Longrightarrow> distinct\n                          (concat\n                            (map (\\<lambda>x. map (Pair x) []) (a # xl')))\n 2. \\<And>a yl' aa xl'.\n       \\<lbrakk>\\<And>a xl'.\n                   \\<lbrakk>\\<lbrakk>distinct xl'; distinct yl'\\<rbrakk>\n                            \\<Longrightarrow> distinct\n         (concat (map (\\<lambda>x. map (Pair x) yl') xl'));\n                    distinct (a # xl'); distinct yl'\\<rbrakk>\n                   \\<Longrightarrow> distinct\n(concat (map (\\<lambda>x. map (Pair x) yl') (a # xl')));\n        \\<lbrakk>distinct xl'; distinct (a # yl')\\<rbrakk>\n        \\<Longrightarrow> distinct\n                           (concat\n                             (map (\\<lambda>x. map (Pair x) (a # yl'))\n                               xl'));\n        distinct (aa # xl'); distinct (a # yl')\\<rbrakk>\n       \\<Longrightarrow> distinct\n                          (concat\n                            (map (\\<lambda>x. map (Pair x) (a # yl'))\n                              (aa # xl')))", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a yl' aa xl'.\n       \\<lbrakk>\\<And>a xl'.\n                   \\<lbrakk>\\<lbrakk>distinct xl'; distinct yl'\\<rbrakk>\n                            \\<Longrightarrow> distinct\n         (concat (map (\\<lambda>x. map (Pair x) yl') xl'));\n                    distinct (a # xl'); distinct yl'\\<rbrakk>\n                   \\<Longrightarrow> distinct\n(concat (map (\\<lambda>x. map (Pair x) yl') (a # xl')));\n        \\<lbrakk>distinct xl'; distinct (a # yl')\\<rbrakk>\n        \\<Longrightarrow> distinct\n                           (concat\n                             (map (\\<lambda>x. map (Pair x) (a # yl'))\n                               xl'));\n        distinct (aa # xl'); distinct (a # yl')\\<rbrakk>\n       \\<Longrightarrow> distinct\n                          (concat\n                            (map (\\<lambda>x. map (Pair x) (a # yl'))\n                              (aa # xl')))", "apply auto []"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a yl' aa xl'.\n       \\<lbrakk>\\<And>a xl'.\n                   \\<lbrakk>distinct\n                             (concat\n                               (map (\\<lambda>x. map (Pair x) yl') xl'));\n                    a \\<notin> set xl' \\<and> distinct xl'\\<rbrakk>\n                   \\<Longrightarrow> distinct (map (Pair a) yl') \\<and>\n                                     Pair a ` set yl' \\<inter>\n                                     (\\<Union>x\\<in>set xl'.\n   Pair x ` set yl') =\n                                     {};\n        distinct (concat (map (\\<lambda>x. (x, a) # map (Pair x) yl') xl'));\n        aa \\<notin> set xl'; distinct xl'; a \\<notin> set yl';\n        distinct yl'\\<rbrakk>\n       \\<Longrightarrow> distinct (map (Pair aa) yl')", "apply (metis (lifting) concat_map_maps distinct.simps(2) \n        distinct_singleton maps_simps(2))"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  (concat (map (\\<lambda>x. map (Pair x) yl') xl'), xs \\<times> ys)\n  \\<in> br set distinct\n\ngoal (1 subgoal):\n 1. \\<And>a a' aa a'a.\n       \\<lbrakk>(a, a') \\<in> \\<langle>Rx\\<rangle>list_set_rel;\n        (aa, a'a) \\<in> \\<langle>Ry\\<rangle>list_set_rel\\<rbrakk>\n       \\<Longrightarrow> (concat (map (\\<lambda>x. map (Pair x) aa) a),\n                          op_set_cart a' a'a)\n                         \\<in> \\<langle>Rx \\<times>\\<^sub>r\n  Ry\\<rangle>list_set_rel", "finally (relcompI)"], ["proof (chain)\npicking this:\n  (concat (map (\\<lambda>x. map (Pair x) yl) xl), xs \\<times> ys)\n  \\<in> \\<langle>Rx \\<times>\\<^sub>r Ry\\<rangle>list_rel O br set distinct", "show \"([ (x,y). x\\<leftarrow>xl, y\\<leftarrow>yl ], op_set_cart xs ys) \\<in> \\<langle>Rx \\<times>\\<^sub>r Ry\\<rangle>list_set_rel\""], ["proof (prove)\nusing this:\n  (concat (map (\\<lambda>x. map (Pair x) yl) xl), xs \\<times> ys)\n  \\<in> \\<langle>Rx \\<times>\\<^sub>r Ry\\<rangle>list_rel O br set distinct\n\ngoal (1 subgoal):\n 1. (concat (map (\\<lambda>x. map (Pair x) yl) xl), op_set_cart xs ys)\n    \\<in> \\<langle>Rx \\<times>\\<^sub>r Ry\\<rangle>list_set_rel", "unfolding list_set_rel_def"], ["proof (prove)\nusing this:\n  (concat (map (\\<lambda>x. map (Pair x) yl) xl), xs \\<times> ys)\n  \\<in> \\<langle>Rx \\<times>\\<^sub>r Ry\\<rangle>list_rel O br set distinct\n\ngoal (1 subgoal):\n 1. (concat (map (\\<lambda>x. map (Pair x) yl) xl), op_set_cart xs ys)\n    \\<in> \\<langle>Rx \\<times>\\<^sub>r Ry\\<rangle>list_rel O br set distinct", "by simp"], ["proof (state)\nthis:\n  (concat (map (\\<lambda>x. map (Pair x) yl) xl), op_set_cart xs ys)\n  \\<in> \\<langle>Rx \\<times>\\<^sub>r Ry\\<rangle>list_set_rel\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection \\<open>Optimizations\\<close>"], ["", "lemma glist_delete_hd: \"eq x y \\<Longrightarrow> glist_delete eq x (y#s) = s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. eq x y \\<Longrightarrow> glist_delete eq x (y # s) = s", "by (simp add: glist_delete_def)"], ["", "text \\<open>Hack to ensure specific ordering. Note that ordering has no meaning\n    abstractly\\<close>"], ["", "definition [simp]: \"LIST_SET_REV_TAG \\<equiv> \\<lambda>x. x\""], ["", "lemma LIST_SET_REV_TAG_autoref[autoref_rules]: \n    \"(rev,LIST_SET_REV_TAG) \\<in> \\<langle>R\\<rangle>list_set_rel \\<rightarrow> \\<langle>R\\<rangle>list_set_rel\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (rev, LIST_SET_REV_TAG)\n    \\<in> \\<langle>R\\<rangle>list_set_rel \\<rightarrow>\n          \\<langle>R\\<rangle>list_set_rel", "unfolding list_set_rel_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (rev, LIST_SET_REV_TAG)\n    \\<in> \\<langle>R\\<rangle>list_rel O br set distinct \\<rightarrow>\n          \\<langle>R\\<rangle>list_rel O br set distinct", "apply (intro fun_relI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a a'.\n       (a, a')\n       \\<in> \\<langle>R\\<rangle>list_rel O br set distinct \\<Longrightarrow>\n       (rev a, LIST_SET_REV_TAG a')\n       \\<in> \\<langle>R\\<rangle>list_rel O br set distinct", "apply (elim relcompE)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a a' x y z.\n       \\<lbrakk>(a, a') = (x, z); (x, y) \\<in> \\<langle>R\\<rangle>list_rel;\n        (y, z) \\<in> br set distinct\\<rbrakk>\n       \\<Longrightarrow> (rev a, LIST_SET_REV_TAG a')\n                         \\<in> \\<langle>R\\<rangle>list_rel O br set distinct", "apply (clarsimp simp: br_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a y.\n       \\<lbrakk>(a, y) \\<in> \\<langle>R\\<rangle>list_rel;\n        distinct y\\<rbrakk>\n       \\<Longrightarrow> (rev a, set y)\n                         \\<in> \\<langle>R\\<rangle>list_rel O\n                               {(c, a). a = set c \\<and> distinct c}", "apply (rule relcompI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a y.\n       \\<lbrakk>(a, y) \\<in> \\<langle>R\\<rangle>list_rel;\n        distinct y\\<rbrakk>\n       \\<Longrightarrow> (rev a, ?b3 a y) \\<in> \\<langle>R\\<rangle>list_rel\n 2. \\<And>a y.\n       \\<lbrakk>(a, y) \\<in> \\<langle>R\\<rangle>list_rel;\n        distinct y\\<rbrakk>\n       \\<Longrightarrow> (?b3 a y, set y)\n                         \\<in> {(c, a). a = set c \\<and> distinct c}", "apply (rule param_rev[param_fo], assumption)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a y.\n       \\<lbrakk>(a, y) \\<in> \\<langle>R\\<rangle>list_rel;\n        distinct y\\<rbrakk>\n       \\<Longrightarrow> (rev y, set y)\n                         \\<in> {(c, a). a = set c \\<and> distinct c}", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "end"]]}