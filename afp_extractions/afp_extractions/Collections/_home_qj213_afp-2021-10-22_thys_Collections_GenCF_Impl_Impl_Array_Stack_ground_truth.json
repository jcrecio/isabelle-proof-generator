{"file_name": "/home/qj213/afp-2021-10-22/thys/Collections/GenCF/Impl/Impl_Array_Stack.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Collections", "problem_names": ["lemma as_rel_def: \"\\<langle>R\\<rangle>as_rel \\<equiv> br as_raw_\\<alpha> as_raw_invar O \\<langle>R\\<rangle>list_rel\"", "lemma [relator_props]: \"single_valued R \\<Longrightarrow> single_valued (\\<langle>R\\<rangle>as_rel)\"", "lemmas [autoref_rel_intf] = REL_INTFI[of as_rel i_list]", "lemma as_empty_refine[autoref_rules]: \"(as_empty (),[]) \\<in> \\<langle>R\\<rangle>as_rel\"", "lemma as_push_refine[autoref_rules]: \n  \"(as_push,op_list_append_elem) \\<in> \\<langle>R\\<rangle>as_rel \\<rightarrow> R \\<rightarrow> \\<langle>R\\<rangle>as_rel\"", "lemma as_shrink_id_refine: \"(as_shrink,id) \\<in> \\<langle>R\\<rangle>as_rel \\<rightarrow> \\<langle>R\\<rangle>as_rel\"", "lemma as_shrinkI:\n  assumes [param]: \"(s,a)\\<in>\\<langle>R\\<rangle>as_rel\"\n  shows \"(as_shrink s,a)\\<in>\\<langle>R\\<rangle>as_rel\"", "lemma as_pop_refine[autoref_rules]: \"(as_pop,butlast) \\<in> \\<langle>R\\<rangle>as_rel \\<rightarrow> \\<langle>R\\<rangle>as_rel\"", "lemma as_get_refine: \n  assumes 1: \"i'<length l\" \n  assumes 2: \"(a,l)\\<in>\\<langle>R\\<rangle>as_rel\" \n  assumes 3[param]: \"(i,i')\\<in>nat_rel\"\n  shows \"(as_get a i,l!i')\\<in>R\"", "lemma as_get_autoref[autoref_rules]: \n  assumes \"(l,l')\\<in>\\<langle>R\\<rangle>as_rel\"\n  assumes \"(i,i')\\<in>Id\"\n  assumes \"SIDE_PRECOND (i' < length l')\"\n  shows \"(as_get l i,(OP nth ::: \\<langle>R\\<rangle>as_rel \\<rightarrow> nat_rel \\<rightarrow> R)$l'$i')\\<in>R\"", "lemma as_set_refine[autoref_rules]: \n  \"(as_set,list_update)\\<in>\\<langle>R\\<rangle>as_rel \\<rightarrow> nat_rel \\<rightarrow> R \\<rightarrow> \\<langle>R\\<rangle>as_rel\"", "lemma as_length_refine[autoref_rules]: \n  \"(as_length,length) \\<in> \\<langle>R\\<rangle>as_rel \\<rightarrow> nat_rel\"", "lemma as_top_code[code]: \"as_top s = (let (a,n)=s in array_get a (n - 1))\"", "lemma as_top_refine: \"\\<lbrakk>l\\<noteq>[]; (s,l)\\<in>\\<langle>R\\<rangle>as_rel\\<rbrakk> \\<Longrightarrow> (as_top s,last l)\\<in>R\"", "lemma as_top_autoref[autoref_rules]:\n  assumes \"(l,l')\\<in>\\<langle>R\\<rangle>as_rel\"\n  assumes \"SIDE_PRECOND (l' \\<noteq> [])\"\n  shows \"(as_top l,(OP last ::: \\<langle>R\\<rangle>as_rel \\<rightarrow> R)$l')\\<in>R\"", "lemma as_is_empty_code[code]: \"as_is_empty s = (snd s = 0)\"", "lemma as_is_empty_refine[autoref_rules]: \n  \"(as_is_empty,is_Nil) \\<in> \\<langle>R\\<rangle>as_rel \\<rightarrow> bool_rel\"", "lemma as_take_refine[autoref_rules]: \n  \"(as_take,take)\\<in>nat_rel \\<rightarrow> \\<langle>R\\<rangle>as_rel \\<rightarrow> \\<langle>R\\<rangle>as_rel\"", "lemma as_singleton_refine[autoref_rules]: \n  \"(as_singleton,op_list_singleton)\\<in>R \\<rightarrow> \\<langle>R\\<rangle>as_rel\""], "translations": [["", "lemma as_rel_def: \"\\<langle>R\\<rangle>as_rel \\<equiv> br as_raw_\\<alpha> as_raw_invar O \\<langle>R\\<rangle>list_rel\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<langle>R\\<rangle>as_rel \\<equiv>\n    br as_raw_\\<alpha> as_raw_invar O \\<langle>R\\<rangle>list_rel", "unfolding as_rel_def_internal[abs_def]"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<langle>R\\<rangle>(\\<lambda>R.\n                           br as_raw_\\<alpha> as_raw_invar O\n                           \\<langle>R\\<rangle>list_rel) \\<equiv>\n    br as_raw_\\<alpha> as_raw_invar O \\<langle>R\\<rangle>list_rel", "by (simp add: relAPP_def)"], ["", "lemma [relator_props]: \"single_valued R \\<Longrightarrow> single_valued (\\<langle>R\\<rangle>as_rel)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. single_valued R \\<Longrightarrow>\n    single_valued (\\<langle>R\\<rangle>as_rel)", "unfolding as_rel_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. single_valued R \\<Longrightarrow>\n    single_valued\n     (br as_raw_\\<alpha> as_raw_invar O \\<langle>R\\<rangle>list_rel)", "by tagged_solver"], ["", "lemmas [autoref_rel_intf] = REL_INTFI[of as_rel i_list]"], ["", "definition \"as_empty (_::unit) \\<equiv> (array_of_list [],0)\""], ["", "lemma as_empty_refine[autoref_rules]: \"(as_empty (),[]) \\<in> \\<langle>R\\<rangle>as_rel\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (as_empty (), []) \\<in> \\<langle>R\\<rangle>as_rel", "unfolding as_rel_def as_empty_def br_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. ((array_of_list [], 0), [])\n    \\<in> {(c, a). a = as_raw_\\<alpha> c \\<and> as_raw_invar c} O\n          \\<langle>R\\<rangle>list_rel", "unfolding as_raw_\\<alpha>_def as_raw_invar_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. ((array_of_list [], 0), [])\n    \\<in> {(c, a).\n           a = take (snd c) (list_of_array (fst c)) \\<and>\n           snd c \\<le> array_length (fst c)} O\n          \\<langle>R\\<rangle>list_rel", "by auto"], ["", "definition \"as_push s x \\<equiv> let\n    (a,n)=s;\n    a = if n = array_length a then\n        array_grow a (max 4 (2*n)) x\n      else a;\n    a = array_set a n x\n  in\n    (a,n+1)\""], ["", "lemma as_push_refine[autoref_rules]: \n  \"(as_push,op_list_append_elem) \\<in> \\<langle>R\\<rangle>as_rel \\<rightarrow> R \\<rightarrow> \\<langle>R\\<rangle>as_rel\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (as_push, op_list_append_elem)\n    \\<in> \\<langle>R\\<rangle>as_rel \\<rightarrow>\n          R \\<rightarrow> \\<langle>R\\<rangle>as_rel", "apply (intro fun_relI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a a' aa a'a.\n       \\<lbrakk>(a, a') \\<in> \\<langle>R\\<rangle>as_rel;\n        (aa, a'a) \\<in> R\\<rbrakk>\n       \\<Longrightarrow> (as_push a aa, op_list_append_elem a' a'a)\n                         \\<in> \\<langle>R\\<rangle>as_rel", "apply (simp add: as_push_def op_list_append_elem_def as_rel_def br_def\n    as_raw_\\<alpha>_def as_raw_invar_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a a' aa a'a.\n       \\<lbrakk>(a, a')\n                \\<in> {(c, a).\n                       a = take (snd c) (list_of_array (fst c)) \\<and>\n                       snd c \\<le> array_length (fst c)} O\n                      \\<langle>R\\<rangle>list_rel;\n        (aa, a'a) \\<in> R\\<rbrakk>\n       \\<Longrightarrow> (case a of\n                          (a, n) \\<Rightarrow>\n                            (array_set\n                              (if n = array_length a\n                               then array_grow a (max 4 (2 * n)) aa else a)\n                              n aa,\n                             Suc n),\n                          a' @ [a'a])\n                         \\<in> {(c, a).\n                                a =\n                                take (snd c) (list_of_array (fst c)) \\<and>\n                                snd c \\<le> array_length (fst c)} O\n                               \\<langle>R\\<rangle>list_rel", "apply clarsimp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>aa a'a ab ba z.\n       \\<lbrakk>(aa, a'a) \\<in> R;\n        (take ba (list_of_array ab), z) \\<in> \\<langle>R\\<rangle>list_rel;\n        ba \\<le> array_length ab\\<rbrakk>\n       \\<Longrightarrow> (ba = array_length ab \\<longrightarrow>\n                          ((array_set\n                             (array_grow ab (max 4 (2 * array_length ab))\n                               aa)\n                             (array_length ab) aa,\n                            Suc (array_length ab)),\n                           z @ [a'a])\n                          \\<in> {(c, a).\n                                 a =\n                                 take (snd c) (list_of_array (fst c)) \\<and>\n                                 snd c \\<le> array_length (fst c)} O\n                                \\<langle>R\\<rangle>list_rel) \\<and>\n                         (ba \\<noteq> array_length ab \\<longrightarrow>\n                          ((array_set ab ba aa, Suc ba), z @ [a'a])\n                          \\<in> {(c, a).\n                                 a =\n                                 take (snd c) (list_of_array (fst c)) \\<and>\n                                 snd c \\<le> array_length (fst c)} O\n                                \\<langle>R\\<rangle>list_rel)", "apply safe"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>aa a'a ab ba z.\n       \\<lbrakk>(aa, a'a) \\<in> R;\n        (take (array_length ab) (list_of_array ab), z)\n        \\<in> \\<langle>R\\<rangle>list_rel;\n        array_length ab \\<le> array_length ab\\<rbrakk>\n       \\<Longrightarrow> ((array_set\n                            (array_grow ab (max 4 (2 * array_length ab)) aa)\n                            (array_length ab) aa,\n                           Suc (array_length ab)),\n                          z @ [a'a])\n                         \\<in> {(c, a).\n                                a =\n                                take (snd c) (list_of_array (fst c)) \\<and>\n                                snd c \\<le> array_length (fst c)} O\n                               \\<langle>R\\<rangle>list_rel\n 2. \\<And>aa a'a ab ba z.\n       \\<lbrakk>(aa, a'a) \\<in> R;\n        (take ba (list_of_array ab), z) \\<in> \\<langle>R\\<rangle>list_rel;\n        ba \\<le> array_length ab; ba \\<noteq> array_length ab\\<rbrakk>\n       \\<Longrightarrow> ((array_set ab ba aa, Suc ba), z @ [a'a])\n                         \\<in> {(c, a).\n                                a =\n                                take (snd c) (list_of_array (fst c)) \\<and>\n                                snd c \\<le> array_length (fst c)} O\n                               \\<langle>R\\<rangle>list_rel", "apply (rule)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>aa a'a ab ba z.\n       \\<lbrakk>(aa, a'a) \\<in> R;\n        (take (array_length ab) (list_of_array ab), z)\n        \\<in> \\<langle>R\\<rangle>list_rel;\n        array_length ab \\<le> array_length ab\\<rbrakk>\n       \\<Longrightarrow> ((array_set\n                            (array_grow ab (max 4 (2 * array_length ab)) aa)\n                            (array_length ab) aa,\n                           Suc (array_length ab)),\n                          ?b21 aa a'a ab ba z)\n                         \\<in> {(c, a).\n                                a =\n                                take (snd c) (list_of_array (fst c)) \\<and>\n                                snd c \\<le> array_length (fst c)}\n 2. \\<And>aa a'a ab ba z.\n       \\<lbrakk>(aa, a'a) \\<in> R;\n        (take (array_length ab) (list_of_array ab), z)\n        \\<in> \\<langle>R\\<rangle>list_rel;\n        array_length ab \\<le> array_length ab\\<rbrakk>\n       \\<Longrightarrow> (?b21 aa a'a ab ba z, z @ [a'a])\n                         \\<in> \\<langle>R\\<rangle>list_rel\n 3. \\<And>aa a'a ab ba z.\n       \\<lbrakk>(aa, a'a) \\<in> R;\n        (take ba (list_of_array ab), z) \\<in> \\<langle>R\\<rangle>list_rel;\n        ba \\<le> array_length ab; ba \\<noteq> array_length ab\\<rbrakk>\n       \\<Longrightarrow> ((array_set ab ba aa, Suc ba), z @ [a'a])\n                         \\<in> {(c, a).\n                                a =\n                                take (snd c) (list_of_array (fst c)) \\<and>\n                                snd c \\<le> array_length (fst c)} O\n                               \\<langle>R\\<rangle>list_rel", "apply auto []"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>aa a'a ab ba z.\n       \\<lbrakk>(aa, a'a) \\<in> R;\n        (take (array_length ab) (list_of_array ab), z)\n        \\<in> \\<langle>R\\<rangle>list_rel;\n        array_length ab \\<le> array_length ab\\<rbrakk>\n       \\<Longrightarrow> ((take (Suc (array_length ab)) (list_of_array ab) @\n                           replicate\n                            (Suc (array_length ab) -\n                             length (list_of_array ab))\n                            aa)\n                          [array_length ab := aa], z @ [a'a])\n                         \\<in> \\<langle>R\\<rangle>list_rel\n 2. \\<And>aa a'a ab ba z.\n       \\<lbrakk>(aa, a'a) \\<in> R;\n        (take ba (list_of_array ab), z) \\<in> \\<langle>R\\<rangle>list_rel;\n        ba \\<le> array_length ab; ba \\<noteq> array_length ab\\<rbrakk>\n       \\<Longrightarrow> ((array_set ab ba aa, Suc ba), z @ [a'a])\n                         \\<in> {(c, a).\n                                a =\n                                take (snd c) (list_of_array (fst c)) \\<and>\n                                snd c \\<le> array_length (fst c)} O\n                               \\<langle>R\\<rangle>list_rel", "apply (clarsimp simp: array_length_list) []"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>aa a'a ab z.\n       \\<lbrakk>(aa, a'a) \\<in> R;\n        (list_of_array ab, z) \\<in> \\<langle>R\\<rangle>list_rel\\<rbrakk>\n       \\<Longrightarrow> (list_of_array ab @ [aa], z @ [a'a])\n                         \\<in> \\<langle>R\\<rangle>list_rel\n 2. \\<And>aa a'a ab ba z.\n       \\<lbrakk>(aa, a'a) \\<in> R;\n        (take ba (list_of_array ab), z) \\<in> \\<langle>R\\<rangle>list_rel;\n        ba \\<le> array_length ab; ba \\<noteq> array_length ab\\<rbrakk>\n       \\<Longrightarrow> ((array_set ab ba aa, Suc ba), z @ [a'a])\n                         \\<in> {(c, a).\n                                a =\n                                take (snd c) (list_of_array (fst c)) \\<and>\n                                snd c \\<le> array_length (fst c)} O\n                               \\<langle>R\\<rangle>list_rel", "apply parametricity"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>aa a'a ab ba z.\n       \\<lbrakk>(aa, a'a) \\<in> R;\n        (take ba (list_of_array ab), z) \\<in> \\<langle>R\\<rangle>list_rel;\n        ba \\<le> array_length ab; ba \\<noteq> array_length ab\\<rbrakk>\n       \\<Longrightarrow> ((array_set ab ba aa, Suc ba), z @ [a'a])\n                         \\<in> {(c, a).\n                                a =\n                                take (snd c) (list_of_array (fst c)) \\<and>\n                                snd c \\<le> array_length (fst c)} O\n                               \\<langle>R\\<rangle>list_rel", "apply rule"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>aa a'a ab ba z.\n       \\<lbrakk>(aa, a'a) \\<in> R;\n        (take ba (list_of_array ab), z) \\<in> \\<langle>R\\<rangle>list_rel;\n        ba \\<le> array_length ab; ba \\<noteq> array_length ab\\<rbrakk>\n       \\<Longrightarrow> ((array_set ab ba aa, Suc ba),\n                          ?b114 aa a'a ab ba z)\n                         \\<in> {(c, a).\n                                a =\n                                take (snd c) (list_of_array (fst c)) \\<and>\n                                snd c \\<le> array_length (fst c)}\n 2. \\<And>aa a'a ab ba z.\n       \\<lbrakk>(aa, a'a) \\<in> R;\n        (take ba (list_of_array ab), z) \\<in> \\<langle>R\\<rangle>list_rel;\n        ba \\<le> array_length ab; ba \\<noteq> array_length ab\\<rbrakk>\n       \\<Longrightarrow> (?b114 aa a'a ab ba z, z @ [a'a])\n                         \\<in> \\<langle>R\\<rangle>list_rel", "apply auto []"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>aa a'a ab ba z.\n       \\<lbrakk>(aa, a'a) \\<in> R;\n        (take ba (list_of_array ab), z) \\<in> \\<langle>R\\<rangle>list_rel;\n        ba \\<le> array_length ab; ba \\<noteq> array_length ab\\<rbrakk>\n       \\<Longrightarrow> ((take (Suc ba) (list_of_array ab))[ba := aa],\n                          z @ [a'a])\n                         \\<in> \\<langle>R\\<rangle>list_rel", "apply (auto simp: take_Suc_conv_app_nth array_length_list list_update_append) []"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>aa a'a ab ba z.\n       \\<lbrakk>(aa, a'a) \\<in> R;\n        (take ba (list_of_array ab), z) \\<in> \\<langle>R\\<rangle>list_rel;\n        ba \\<le> length (list_of_array ab);\n        ba \\<noteq> length (list_of_array ab)\\<rbrakk>\n       \\<Longrightarrow> (take ba (list_of_array ab) @ [aa], z @ [a'a])\n                         \\<in> \\<langle>R\\<rangle>list_rel", "apply parametricity"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "term array_shrink"], ["", "definition \"as_shrink s \\<equiv> let \n    (a,n) = s;\n    a = if 128*n \\<le> array_length a \\<and> n>4 then\n        array_shrink a n\n      else a\n  in\n    (a,n)\""], ["", "lemma as_shrink_id_refine: \"(as_shrink,id) \\<in> \\<langle>R\\<rangle>as_rel \\<rightarrow> \\<langle>R\\<rangle>as_rel\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (as_shrink, id)\n    \\<in> \\<langle>R\\<rangle>as_rel \\<rightarrow> \\<langle>R\\<rangle>as_rel", "apply (intro fun_relI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a a'.\n       (a, a') \\<in> \\<langle>R\\<rangle>as_rel \\<Longrightarrow>\n       (as_shrink a, id a') \\<in> \\<langle>R\\<rangle>as_rel", "apply (simp add: as_shrink_def as_rel_def br_def\n    as_raw_\\<alpha>_def as_raw_invar_def Let_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a a'.\n       (a, a')\n       \\<in> {(c, a).\n              a = take (snd c) (list_of_array (fst c)) \\<and>\n              snd c \\<le> array_length (fst c)} O\n             \\<langle>R\\<rangle>list_rel \\<Longrightarrow>\n       (case a of\n        (a, n) \\<Rightarrow>\n          (if 128 * n \\<le> array_length a \\<and> 4 < n\n           then array_shrink a n else a,\n           n),\n        a')\n       \\<in> {(c, a).\n              a = take (snd c) (list_of_array (fst c)) \\<and>\n              snd c \\<le> array_length (fst c)} O\n             \\<langle>R\\<rangle>list_rel", "apply clarsimp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>aa ba z.\n       \\<lbrakk>(take ba (list_of_array aa), z)\n                \\<in> \\<langle>R\\<rangle>list_rel;\n        ba \\<le> array_length aa\\<rbrakk>\n       \\<Longrightarrow> (128 * ba \\<le> array_length aa \\<and>\n                          4 < ba \\<longrightarrow>\n                          ((array_shrink aa ba, ba), z)\n                          \\<in> {(c, a).\n                                 a =\n                                 take (snd c) (list_of_array (fst c)) \\<and>\n                                 snd c \\<le> array_length (fst c)} O\n                                \\<langle>R\\<rangle>list_rel) \\<and>\n                         ((128 * ba \\<le> array_length aa \\<longrightarrow>\n                           \\<not> 4 < ba) \\<longrightarrow>\n                          ((aa, ba), z)\n                          \\<in> {(c, a).\n                                 a =\n                                 take (snd c) (list_of_array (fst c)) \\<and>\n                                 snd c \\<le> array_length (fst c)} O\n                                \\<langle>R\\<rangle>list_rel)", "apply safe"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>aa ba z.\n       \\<lbrakk>(take ba (list_of_array aa), z)\n                \\<in> \\<langle>R\\<rangle>list_rel;\n        ba \\<le> array_length aa; 128 * ba \\<le> array_length aa;\n        4 < ba\\<rbrakk>\n       \\<Longrightarrow> ((array_shrink aa ba, ba), z)\n                         \\<in> {(c, a).\n                                a =\n                                take (snd c) (list_of_array (fst c)) \\<and>\n                                snd c \\<le> array_length (fst c)} O\n                               \\<langle>R\\<rangle>list_rel\n 2. \\<And>aa ba z.\n       \\<lbrakk>(take ba (list_of_array aa), z)\n                \\<in> \\<langle>R\\<rangle>list_rel;\n        ba \\<le> array_length aa;\n        \\<not> 128 * ba \\<le> array_length aa\\<rbrakk>\n       \\<Longrightarrow> ((aa, ba), z)\n                         \\<in> {(c, a).\n                                a =\n                                take (snd c) (list_of_array (fst c)) \\<and>\n                                snd c \\<le> array_length (fst c)} O\n                               \\<langle>R\\<rangle>list_rel\n 3. \\<And>aa ba z.\n       \\<lbrakk>(take ba (list_of_array aa), z)\n                \\<in> \\<langle>R\\<rangle>list_rel;\n        ba \\<le> array_length aa; \\<not> 4 < ba\\<rbrakk>\n       \\<Longrightarrow> ((aa, ba), z)\n                         \\<in> {(c, a).\n                                a =\n                                take (snd c) (list_of_array (fst c)) \\<and>\n                                snd c \\<le> array_length (fst c)} O\n                               \\<langle>R\\<rangle>list_rel", "apply (rule)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>aa ba z.\n       \\<lbrakk>(take ba (list_of_array aa), z)\n                \\<in> \\<langle>R\\<rangle>list_rel;\n        ba \\<le> array_length aa; 128 * ba \\<le> array_length aa;\n        4 < ba\\<rbrakk>\n       \\<Longrightarrow> ((array_shrink aa ba, ba), ?b21 aa ba z)\n                         \\<in> {(c, a).\n                                a =\n                                take (snd c) (list_of_array (fst c)) \\<and>\n                                snd c \\<le> array_length (fst c)}\n 2. \\<And>aa ba z.\n       \\<lbrakk>(take ba (list_of_array aa), z)\n                \\<in> \\<langle>R\\<rangle>list_rel;\n        ba \\<le> array_length aa; 128 * ba \\<le> array_length aa;\n        4 < ba\\<rbrakk>\n       \\<Longrightarrow> (?b21 aa ba z, z) \\<in> \\<langle>R\\<rangle>list_rel\n 3. \\<And>aa ba z.\n       \\<lbrakk>(take ba (list_of_array aa), z)\n                \\<in> \\<langle>R\\<rangle>list_rel;\n        ba \\<le> array_length aa;\n        \\<not> 128 * ba \\<le> array_length aa\\<rbrakk>\n       \\<Longrightarrow> ((aa, ba), z)\n                         \\<in> {(c, a).\n                                a =\n                                take (snd c) (list_of_array (fst c)) \\<and>\n                                snd c \\<le> array_length (fst c)} O\n                               \\<langle>R\\<rangle>list_rel\n 4. \\<And>aa ba z.\n       \\<lbrakk>(take ba (list_of_array aa), z)\n                \\<in> \\<langle>R\\<rangle>list_rel;\n        ba \\<le> array_length aa; \\<not> 4 < ba\\<rbrakk>\n       \\<Longrightarrow> ((aa, ba), z)\n                         \\<in> {(c, a).\n                                a =\n                                take (snd c) (list_of_array (fst c)) \\<and>\n                                snd c \\<le> array_length (fst c)} O\n                               \\<langle>R\\<rangle>list_rel", "apply (auto simp: array_length_list)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma as_shrinkI:\n  assumes [param]: \"(s,a)\\<in>\\<langle>R\\<rangle>as_rel\"\n  shows \"(as_shrink s,a)\\<in>\\<langle>R\\<rangle>as_rel\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (as_shrink s, a) \\<in> \\<langle>R\\<rangle>as_rel", "apply (subst id_apply[of a,symmetric])"], ["proof (prove)\ngoal (1 subgoal):\n 1. (as_shrink s, id a) \\<in> \\<langle>R\\<rangle>as_rel", "apply (parametricity add: as_shrink_id_refine)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "definition \"as_pop s \\<equiv> let (a,n)=s in as_shrink (a,n - 1)\""], ["", "lemma as_pop_refine[autoref_rules]: \"(as_pop,butlast) \\<in> \\<langle>R\\<rangle>as_rel \\<rightarrow> \\<langle>R\\<rangle>as_rel\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (as_pop, butlast)\n    \\<in> \\<langle>R\\<rangle>as_rel \\<rightarrow> \\<langle>R\\<rangle>as_rel", "apply (intro fun_relI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a a'.\n       (a, a') \\<in> \\<langle>R\\<rangle>as_rel \\<Longrightarrow>\n       (as_pop a, butlast a') \\<in> \\<langle>R\\<rangle>as_rel", "apply (clarsimp simp add: as_pop_def split: prod.split)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a' x1 x2.\n       ((x1, x2), a') \\<in> \\<langle>R\\<rangle>as_rel \\<Longrightarrow>\n       (as_shrink (x1, x2 - Suc 0), butlast a')\n       \\<in> \\<langle>R\\<rangle>as_rel", "apply (rule as_shrinkI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a' x1 x2.\n       ((x1, x2), a') \\<in> \\<langle>R\\<rangle>as_rel \\<Longrightarrow>\n       ((x1, x2 - Suc 0), butlast a') \\<in> \\<langle>R\\<rangle>as_rel", "apply (simp add: as_pop_def as_rel_def br_def\n    as_raw_\\<alpha>_def as_raw_invar_def Let_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a' x1 x2.\n       ((x1, x2), a')\n       \\<in> {(c, a).\n              a = take (snd c) (list_of_array (fst c)) \\<and>\n              snd c \\<le> array_length (fst c)} O\n             \\<langle>R\\<rangle>list_rel \\<Longrightarrow>\n       ((x1, x2 - Suc 0), butlast a')\n       \\<in> {(c, a).\n              a = take (snd c) (list_of_array (fst c)) \\<and>\n              snd c \\<le> array_length (fst c)} O\n             \\<langle>R\\<rangle>list_rel", "apply clarsimp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b z.\n       \\<lbrakk>(take b (list_of_array a), z)\n                \\<in> \\<langle>R\\<rangle>list_rel;\n        b \\<le> array_length a\\<rbrakk>\n       \\<Longrightarrow> ((a, b - Suc 0), butlast z)\n                         \\<in> {(c, a).\n                                a =\n                                take (snd c) (list_of_array (fst c)) \\<and>\n                                snd c \\<le> array_length (fst c)} O\n                               \\<langle>R\\<rangle>list_rel", "apply rule"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a b z.\n       \\<lbrakk>(take b (list_of_array a), z)\n                \\<in> \\<langle>R\\<rangle>list_rel;\n        b \\<le> array_length a\\<rbrakk>\n       \\<Longrightarrow> ((a, b - Suc 0), ?b25 a b z)\n                         \\<in> {(c, a).\n                                a =\n                                take (snd c) (list_of_array (fst c)) \\<and>\n                                snd c \\<le> array_length (fst c)}\n 2. \\<And>a b z.\n       \\<lbrakk>(take b (list_of_array a), z)\n                \\<in> \\<langle>R\\<rangle>list_rel;\n        b \\<le> array_length a\\<rbrakk>\n       \\<Longrightarrow> (?b25 a b z, butlast z)\n                         \\<in> \\<langle>R\\<rangle>list_rel", "apply (auto simp: array_length_list) []"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b z.\n       \\<lbrakk>(take b (list_of_array a), z)\n                \\<in> \\<langle>R\\<rangle>list_rel;\n        b \\<le> array_length a\\<rbrakk>\n       \\<Longrightarrow> (take (b - Suc 0) (list_of_array a), butlast z)\n                         \\<in> \\<langle>R\\<rangle>list_rel", "apply (clarsimp simp: array_length_list take_minus_one_conv_butlast) []"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b z.\n       \\<lbrakk>(take b (list_of_array a), z)\n                \\<in> \\<langle>R\\<rangle>list_rel;\n        b \\<le> length (list_of_array a)\\<rbrakk>\n       \\<Longrightarrow> (butlast (take b (list_of_array a)), butlast z)\n                         \\<in> \\<langle>R\\<rangle>list_rel", "apply parametricity"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "definition \"as_get s i \\<equiv> let (a,_::nat)=s in array_get a i\""], ["", "lemma as_get_refine: \n  assumes 1: \"i'<length l\" \n  assumes 2: \"(a,l)\\<in>\\<langle>R\\<rangle>as_rel\" \n  assumes 3[param]: \"(i,i')\\<in>nat_rel\"\n  shows \"(as_get a i,l!i')\\<in>R\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (as_get a i, l ! i') \\<in> R", "using 2"], ["proof (prove)\nusing this:\n  (a, l) \\<in> \\<langle>R\\<rangle>as_rel\n\ngoal (1 subgoal):\n 1. (as_get a i, l ! i') \\<in> R", "apply (clarsimp \n    simp add: as_get_def as_rel_def br_def as_raw_\\<alpha>_def as_raw_invar_def\n    split: prod.split)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x1 x2.\n       \\<lbrakk>(take x2 (list_of_array x1), l)\n                \\<in> \\<langle>R\\<rangle>list_rel;\n        a = (x1, x2); x2 \\<le> array_length x1\\<rbrakk>\n       \\<Longrightarrow> (array_get x1 i, l ! i') \\<in> R", "apply (rename_tac aa bb)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>aa bb.\n       \\<lbrakk>(take bb (list_of_array aa), l)\n                \\<in> \\<langle>R\\<rangle>list_rel;\n        a = (aa, bb); bb \\<le> array_length aa\\<rbrakk>\n       \\<Longrightarrow> (array_get aa i, l ! i') \\<in> R", "apply (case_tac aa, simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>aa bb x.\n       \\<lbrakk>(take bb x, l) \\<in> \\<langle>R\\<rangle>list_rel;\n        a = (Array x, bb); bb \\<le> length x; aa = Array x\\<rbrakk>\n       \\<Longrightarrow> (x ! i, l ! i') \\<in> R", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>aa bb x.\n       \\<lbrakk>(take bb x, l) \\<in> \\<langle>R\\<rangle>list_rel;\n        a = (Array x, bb); bb \\<le> length x; aa = Array x\\<rbrakk>\n       \\<Longrightarrow> (x ! i, l ! i') \\<in> R", "fix n cl"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>aa bb x.\n       \\<lbrakk>(take bb x, l) \\<in> \\<langle>R\\<rangle>list_rel;\n        a = (Array x, bb); bb \\<le> length x; aa = Array x\\<rbrakk>\n       \\<Longrightarrow> (x ! i, l ! i') \\<in> R", "assume TKR[param]: \"(take n cl, l) \\<in> \\<langle>R\\<rangle>list_rel\""], ["proof (state)\nthis:\n  (take n cl, l) \\<in> \\<langle>R\\<rangle>list_rel\n\ngoal (1 subgoal):\n 1. \\<And>aa bb x.\n       \\<lbrakk>(take bb x, l) \\<in> \\<langle>R\\<rangle>list_rel;\n        a = (Array x, bb); bb \\<le> length x; aa = Array x\\<rbrakk>\n       \\<Longrightarrow> (x ! i, l ! i') \\<in> R", "have \"(take n cl!i, l!i')\\<in>R\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (take n cl ! i, l ! i') \\<in> R", "by parametricity (rule 1)"], ["proof (state)\nthis:\n  (take n cl ! i, l ! i') \\<in> R\n\ngoal (1 subgoal):\n 1. \\<And>aa bb x.\n       \\<lbrakk>(take bb x, l) \\<in> \\<langle>R\\<rangle>list_rel;\n        a = (Array x, bb); bb \\<le> length x; aa = Array x\\<rbrakk>\n       \\<Longrightarrow> (x ! i, l ! i') \\<in> R", "also"], ["proof (state)\nthis:\n  (take n cl ! i, l ! i') \\<in> R\n\ngoal (1 subgoal):\n 1. \\<And>aa bb x.\n       \\<lbrakk>(take bb x, l) \\<in> \\<langle>R\\<rangle>list_rel;\n        a = (Array x, bb); bb \\<le> length x; aa = Array x\\<rbrakk>\n       \\<Longrightarrow> (x ! i, l ! i') \\<in> R", "have \"take n cl!i = cl!i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. take n cl ! i = cl ! i", "using 1 3 list_rel_imp_same_length[OF TKR]"], ["proof (prove)\nusing this:\n  i' < length l\n  (i, i') \\<in> nat_rel\n  length (take n cl) = length l\n\ngoal (1 subgoal):\n 1. take n cl ! i = cl ! i", "by simp"], ["proof (state)\nthis:\n  take n cl ! i = cl ! i\n\ngoal (1 subgoal):\n 1. \\<And>aa bb x.\n       \\<lbrakk>(take bb x, l) \\<in> \\<langle>R\\<rangle>list_rel;\n        a = (Array x, bb); bb \\<le> length x; aa = Array x\\<rbrakk>\n       \\<Longrightarrow> (x ! i, l ! i') \\<in> R", "finally"], ["proof (chain)\npicking this:\n  (cl ! i, l ! i') \\<in> R", "show \"(cl!i,l!i')\\<in>R\""], ["proof (prove)\nusing this:\n  (cl ! i, l ! i') \\<in> R\n\ngoal (1 subgoal):\n 1. (cl ! i, l ! i') \\<in> R", "."], ["proof (state)\nthis:\n  (cl ! i, l ! i') \\<in> R\n\ngoal:\nNo subgoals!", "qed"], ["", "context begin"], ["", "interpretation autoref_syn"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "lemma as_get_autoref[autoref_rules]: \n  assumes \"(l,l')\\<in>\\<langle>R\\<rangle>as_rel\"\n  assumes \"(i,i')\\<in>Id\"\n  assumes \"SIDE_PRECOND (i' < length l')\"\n  shows \"(as_get l i,(OP nth ::: \\<langle>R\\<rangle>as_rel \\<rightarrow> nat_rel \\<rightarrow> R)$l'$i')\\<in>R\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (as_get l i,\n     (OP (!) :::\n      \\<langle>R\\<rangle>as_rel \\<rightarrow> nat_rel \\<rightarrow> R) $\n     l' $\n     i')\n    \\<in> R", "using assms"], ["proof (prove)\nusing this:\n  (l, l') \\<in> \\<langle>R\\<rangle>as_rel\n  (i, i') \\<in> nat_rel\n  SIDE_PRECOND (i' < length l')\n\ngoal (1 subgoal):\n 1. (as_get l i,\n     (OP (!) :::\n      \\<langle>R\\<rangle>as_rel \\<rightarrow> nat_rel \\<rightarrow> R) $\n     l' $\n     i')\n    \\<in> R", "by (simp add: as_get_refine)"], ["", "definition \"as_set s i x \\<equiv> let (a,n::nat)=s in (array_set a i x,n)\""], ["", "lemma as_set_refine[autoref_rules]: \n  \"(as_set,list_update)\\<in>\\<langle>R\\<rangle>as_rel \\<rightarrow> nat_rel \\<rightarrow> R \\<rightarrow> \\<langle>R\\<rangle>as_rel\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (as_set, list_update)\n    \\<in> \\<langle>R\\<rangle>as_rel \\<rightarrow>\n          nat_rel \\<rightarrow> R \\<rightarrow> \\<langle>R\\<rangle>as_rel", "apply (intro fun_relI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a a' aa a'a ab a'b.\n       \\<lbrakk>(a, a') \\<in> \\<langle>R\\<rangle>as_rel;\n        (aa, a'a) \\<in> nat_rel; (ab, a'b) \\<in> R\\<rbrakk>\n       \\<Longrightarrow> (as_set a aa ab, a'[a'a := a'b])\n                         \\<in> \\<langle>R\\<rangle>as_rel", "apply (clarsimp \n    simp: as_set_def as_rel_def br_def as_raw_\\<alpha>_def as_raw_invar_def\n    split: prod.split)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a'a ab a'b z x1 x2.\n       \\<lbrakk>(ab, a'b) \\<in> R;\n        (take x2 (list_of_array x1), z) \\<in> \\<langle>R\\<rangle>list_rel;\n        x2 \\<le> array_length x1\\<rbrakk>\n       \\<Longrightarrow> ((array_set x1 a'a ab, x2), z[a'a := a'b])\n                         \\<in> {(c, a).\n                                a =\n                                take (snd c) (list_of_array (fst c)) \\<and>\n                                snd c \\<le> array_length (fst c)} O\n                               \\<langle>R\\<rangle>list_rel", "apply rule"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a'a ab a'b z x1 x2.\n       \\<lbrakk>(ab, a'b) \\<in> R;\n        (take x2 (list_of_array x1), z) \\<in> \\<langle>R\\<rangle>list_rel;\n        x2 \\<le> array_length x1\\<rbrakk>\n       \\<Longrightarrow> ((array_set x1 a'a ab, x2),\n                          ?b26 a'a ab a'b z x1 x2)\n                         \\<in> {(c, a).\n                                a =\n                                take (snd c) (list_of_array (fst c)) \\<and>\n                                snd c \\<le> array_length (fst c)}\n 2. \\<And>a'a ab a'b z x1 x2.\n       \\<lbrakk>(ab, a'b) \\<in> R;\n        (take x2 (list_of_array x1), z) \\<in> \\<langle>R\\<rangle>list_rel;\n        x2 \\<le> array_length x1\\<rbrakk>\n       \\<Longrightarrow> (?b26 a'a ab a'b z x1 x2, z[a'a := a'b])\n                         \\<in> \\<langle>R\\<rangle>list_rel", "apply auto []"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a'a ab a'b z x1 x2.\n       \\<lbrakk>(ab, a'b) \\<in> R;\n        (take x2 (list_of_array x1), z) \\<in> \\<langle>R\\<rangle>list_rel;\n        x2 \\<le> array_length x1\\<rbrakk>\n       \\<Longrightarrow> ((take x2 (list_of_array x1))[a'a := ab], z\n                          [a'a := a'b])\n                         \\<in> \\<langle>R\\<rangle>list_rel", "apply parametricity"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a'a ab a'b z x1 x2.\n       \\<lbrakk>(ab, a'b) \\<in> R;\n        (take x2 (list_of_array x1), z) \\<in> \\<langle>R\\<rangle>list_rel;\n        x2 \\<le> array_length x1\\<rbrakk>\n       \\<Longrightarrow> (a'a, a'a) \\<in> nat_rel", "by simp"], ["", "definition as_length :: \"'a array_stack \\<Rightarrow> nat\" where \n  \"as_length = snd\""], ["", "lemma as_length_refine[autoref_rules]: \n  \"(as_length,length) \\<in> \\<langle>R\\<rangle>as_rel \\<rightarrow> nat_rel\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (as_length, length)\n    \\<in> \\<langle>R\\<rangle>as_rel \\<rightarrow> nat_rel", "by (auto \n    simp: as_length_def as_rel_def br_def as_raw_\\<alpha>_def as_raw_invar_def\n      array_length_list\n    dest!: list_rel_imp_same_length\n  )"], ["", "definition \"as_top s \\<equiv> as_get s (as_length s - 1)\""], ["", "lemma as_top_code[code]: \"as_top s = (let (a,n)=s in array_get a (n - 1))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. as_top s = (let (a, n) = s in array_get a (n - 1))", "unfolding as_top_def as_get_def as_length_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (let (a, uu_) = s in array_get a (snd s - 1)) =\n    (let (a, n) = s in array_get a (n - 1))", "by (auto split: prod.split)"], ["", "lemma as_top_refine: \"\\<lbrakk>l\\<noteq>[]; (s,l)\\<in>\\<langle>R\\<rangle>as_rel\\<rbrakk> \\<Longrightarrow> (as_top s,last l)\\<in>R\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>l \\<noteq> []; (s, l) \\<in> \\<langle>R\\<rangle>as_rel\\<rbrakk>\n    \\<Longrightarrow> (as_top s, last l) \\<in> R", "unfolding as_top_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>l \\<noteq> []; (s, l) \\<in> \\<langle>R\\<rangle>as_rel\\<rbrakk>\n    \\<Longrightarrow> (as_get s (as_length s - 1), last l) \\<in> R", "apply (simp add: last_conv_nth)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>l \\<noteq> []; (s, l) \\<in> \\<langle>R\\<rangle>as_rel\\<rbrakk>\n    \\<Longrightarrow> (as_get s (as_length s - Suc 0),\n                       l ! (length l - Suc 0))\n                      \\<in> R", "apply (rule as_get_refine)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>l \\<noteq> []; (s, l) \\<in> \\<langle>R\\<rangle>as_rel\\<rbrakk>\n    \\<Longrightarrow> length l - Suc 0 < length l\n 2. \\<lbrakk>l \\<noteq> []; (s, l) \\<in> \\<langle>R\\<rangle>as_rel\\<rbrakk>\n    \\<Longrightarrow> (s, l) \\<in> \\<langle>R\\<rangle>as_rel\n 3. \\<lbrakk>l \\<noteq> []; (s, l) \\<in> \\<langle>R\\<rangle>as_rel\\<rbrakk>\n    \\<Longrightarrow> (as_length s - Suc 0, length l - Suc 0) \\<in> nat_rel", "apply (auto simp: as_length_def as_rel_def br_def as_raw_\\<alpha>_def \n    as_raw_invar_def array_length_list\n    dest!: list_rel_imp_same_length)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma as_top_autoref[autoref_rules]:\n  assumes \"(l,l')\\<in>\\<langle>R\\<rangle>as_rel\"\n  assumes \"SIDE_PRECOND (l' \\<noteq> [])\"\n  shows \"(as_top l,(OP last ::: \\<langle>R\\<rangle>as_rel \\<rightarrow> R)$l')\\<in>R\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (as_top l, (OP last ::: \\<langle>R\\<rangle>as_rel \\<rightarrow> R) $ l')\n    \\<in> R", "using assms"], ["proof (prove)\nusing this:\n  (l, l') \\<in> \\<langle>R\\<rangle>as_rel\n  SIDE_PRECOND (l' \\<noteq> [])\n\ngoal (1 subgoal):\n 1. (as_top l, (OP last ::: \\<langle>R\\<rangle>as_rel \\<rightarrow> R) $ l')\n    \\<in> R", "by (simp add: as_top_refine)"], ["", "definition \"as_is_empty s \\<equiv> as_length s = 0\""], ["", "lemma as_is_empty_code[code]: \"as_is_empty s = (snd s = 0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. as_is_empty s = (snd s = 0)", "unfolding as_is_empty_def as_length_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (snd s = 0) = (snd s = 0)", "by simp"], ["", "lemma as_is_empty_refine[autoref_rules]: \n  \"(as_is_empty,is_Nil) \\<in> \\<langle>R\\<rangle>as_rel \\<rightarrow> bool_rel\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (as_is_empty, is_Nil)\n    \\<in> \\<langle>R\\<rangle>as_rel \\<rightarrow> bool_rel", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a a'.\n       (a, a') \\<in> \\<langle>R\\<rangle>as_rel \\<Longrightarrow>\n       (as_is_empty a, is_Nil a') \\<in> bool_rel", "fix s l"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a a'.\n       (a, a') \\<in> \\<langle>R\\<rangle>as_rel \\<Longrightarrow>\n       (as_is_empty a, is_Nil a') \\<in> bool_rel", "assume [param]: \"(s,l)\\<in>\\<langle>R\\<rangle>as_rel\""], ["proof (state)\nthis:\n  (s, l) \\<in> \\<langle>R\\<rangle>as_rel\n\ngoal (1 subgoal):\n 1. \\<And>a a'.\n       (a, a') \\<in> \\<langle>R\\<rangle>as_rel \\<Longrightarrow>\n       (as_is_empty a, is_Nil a') \\<in> bool_rel", "have \"(as_is_empty s,length l = 0) \\<in> bool_rel\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (as_is_empty s, length l = 0) \\<in> bool_rel", "unfolding as_is_empty_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (as_length s = 0, length l = 0) \\<in> bool_rel", "by (parametricity add: as_length_refine)"], ["proof (state)\nthis:\n  (as_is_empty s, length l = 0) \\<in> bool_rel\n\ngoal (1 subgoal):\n 1. \\<And>a a'.\n       (a, a') \\<in> \\<langle>R\\<rangle>as_rel \\<Longrightarrow>\n       (as_is_empty a, is_Nil a') \\<in> bool_rel", "also"], ["proof (state)\nthis:\n  (as_is_empty s, length l = 0) \\<in> bool_rel\n\ngoal (1 subgoal):\n 1. \\<And>a a'.\n       (a, a') \\<in> \\<langle>R\\<rangle>as_rel \\<Longrightarrow>\n       (as_is_empty a, is_Nil a') \\<in> bool_rel", "have \"length l = 0 \\<longleftrightarrow> is_Nil l\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (length l = 0) = is_Nil l", "by (cases l) auto"], ["proof (state)\nthis:\n  (length l = 0) = is_Nil l\n\ngoal (1 subgoal):\n 1. \\<And>a a'.\n       (a, a') \\<in> \\<langle>R\\<rangle>as_rel \\<Longrightarrow>\n       (as_is_empty a, is_Nil a') \\<in> bool_rel", "finally"], ["proof (chain)\npicking this:\n  (as_is_empty s, is_Nil l) \\<in> bool_rel", "show \"(as_is_empty s, is_Nil l) \\<in> bool_rel\""], ["proof (prove)\nusing this:\n  (as_is_empty s, is_Nil l) \\<in> bool_rel\n\ngoal (1 subgoal):\n 1. (as_is_empty s, is_Nil l) \\<in> bool_rel", "."], ["proof (state)\nthis:\n  (as_is_empty s, is_Nil l) \\<in> bool_rel\n\ngoal:\nNo subgoals!", "qed"], ["", "definition \"as_take m s \\<equiv> let (a,n) = s in \n  if m<n then \n    as_shrink (a,m)\n  else (a,n)\""], ["", "lemma as_take_refine[autoref_rules]: \n  \"(as_take,take)\\<in>nat_rel \\<rightarrow> \\<langle>R\\<rangle>as_rel \\<rightarrow> \\<langle>R\\<rangle>as_rel\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (as_take, take)\n    \\<in> nat_rel \\<rightarrow>\n          \\<langle>R\\<rangle>as_rel \\<rightarrow> \\<langle>R\\<rangle>as_rel", "apply (intro fun_relI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a a' aa a'a.\n       \\<lbrakk>(a, a') \\<in> nat_rel;\n        (aa, a'a) \\<in> \\<langle>R\\<rangle>as_rel\\<rbrakk>\n       \\<Longrightarrow> (as_take a aa, take a' a'a)\n                         \\<in> \\<langle>R\\<rangle>as_rel", "apply (clarsimp simp add: as_take_def, safe)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a' aa b a'a.\n       \\<lbrakk>((aa, b), a'a) \\<in> \\<langle>R\\<rangle>as_rel;\n        a' < b\\<rbrakk>\n       \\<Longrightarrow> (as_shrink (aa, a'), take a' a'a)\n                         \\<in> \\<langle>R\\<rangle>as_rel\n 2. \\<And>a' aa b a'a.\n       \\<lbrakk>((aa, b), a'a) \\<in> \\<langle>R\\<rangle>as_rel;\n        \\<not> a' < b\\<rbrakk>\n       \\<Longrightarrow> ((aa, b), take a' a'a)\n                         \\<in> \\<langle>R\\<rangle>as_rel", "apply (rule as_shrinkI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a' aa b a'a.\n       \\<lbrakk>((aa, b), a'a) \\<in> \\<langle>R\\<rangle>as_rel;\n        a' < b\\<rbrakk>\n       \\<Longrightarrow> ((aa, a'), take a' a'a)\n                         \\<in> \\<langle>R\\<rangle>as_rel\n 2. \\<And>a' aa b a'a.\n       \\<lbrakk>((aa, b), a'a) \\<in> \\<langle>R\\<rangle>as_rel;\n        \\<not> a' < b\\<rbrakk>\n       \\<Longrightarrow> ((aa, b), take a' a'a)\n                         \\<in> \\<langle>R\\<rangle>as_rel", "apply (simp add: as_rel_def br_def as_raw_\\<alpha>_def as_raw_invar_def)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a' aa b a'a.\n       \\<lbrakk>((aa, b), a'a)\n                \\<in> {(c, a).\n                       a = take (snd c) (list_of_array (fst c)) \\<and>\n                       snd c \\<le> array_length (fst c)} O\n                      \\<langle>R\\<rangle>list_rel;\n        a' < b\\<rbrakk>\n       \\<Longrightarrow> ((aa, a'), take a' a'a)\n                         \\<in> {(c, a).\n                                a =\n                                take (snd c) (list_of_array (fst c)) \\<and>\n                                snd c \\<le> array_length (fst c)} O\n                               \\<langle>R\\<rangle>list_rel\n 2. \\<And>a' aa b a'a.\n       \\<lbrakk>((aa, b), a'a) \\<in> \\<langle>R\\<rangle>as_rel;\n        \\<not> a' < b\\<rbrakk>\n       \\<Longrightarrow> ((aa, b), take a' a'a)\n                         \\<in> \\<langle>R\\<rangle>as_rel", "apply rule"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>a' aa b a'a.\n       \\<lbrakk>((aa, b), a'a)\n                \\<in> {(c, a).\n                       a = take (snd c) (list_of_array (fst c)) \\<and>\n                       snd c \\<le> array_length (fst c)} O\n                      \\<langle>R\\<rangle>list_rel;\n        a' < b\\<rbrakk>\n       \\<Longrightarrow> ((aa, a'), ?b12 a' aa b a'a)\n                         \\<in> {(c, a).\n                                a =\n                                take (snd c) (list_of_array (fst c)) \\<and>\n                                snd c \\<le> array_length (fst c)}\n 2. \\<And>a' aa b a'a.\n       \\<lbrakk>((aa, b), a'a)\n                \\<in> {(c, a).\n                       a = take (snd c) (list_of_array (fst c)) \\<and>\n                       snd c \\<le> array_length (fst c)} O\n                      \\<langle>R\\<rangle>list_rel;\n        a' < b\\<rbrakk>\n       \\<Longrightarrow> (?b12 a' aa b a'a, take a' a'a)\n                         \\<in> \\<langle>R\\<rangle>list_rel\n 3. \\<And>a' aa b a'a.\n       \\<lbrakk>((aa, b), a'a) \\<in> \\<langle>R\\<rangle>as_rel;\n        \\<not> a' < b\\<rbrakk>\n       \\<Longrightarrow> ((aa, b), take a' a'a)\n                         \\<in> \\<langle>R\\<rangle>as_rel", "apply auto []"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a' aa b a'a.\n       \\<lbrakk>((aa, b), a'a)\n                \\<in> {(c, a).\n                       a = take (snd c) (list_of_array (fst c)) \\<and>\n                       snd c \\<le> array_length (fst c)} O\n                      \\<langle>R\\<rangle>list_rel;\n        a' < b\\<rbrakk>\n       \\<Longrightarrow> (take a' (list_of_array aa), take a' a'a)\n                         \\<in> \\<langle>R\\<rangle>list_rel\n 2. \\<And>a' aa b a'a.\n       \\<lbrakk>((aa, b), a'a) \\<in> \\<langle>R\\<rangle>as_rel;\n        \\<not> a' < b\\<rbrakk>\n       \\<Longrightarrow> ((aa, b), take a' a'a)\n                         \\<in> \\<langle>R\\<rangle>as_rel", "apply clarsimp"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a' a ba z.\n       \\<lbrakk>a' < ba;\n        (take ba (list_of_array a), z) \\<in> \\<langle>R\\<rangle>list_rel;\n        ba \\<le> array_length a\\<rbrakk>\n       \\<Longrightarrow> (take a' (list_of_array a), take a' z)\n                         \\<in> \\<langle>R\\<rangle>list_rel\n 2. \\<And>a' aa b a'a.\n       \\<lbrakk>((aa, b), a'a) \\<in> \\<langle>R\\<rangle>as_rel;\n        \\<not> a' < b\\<rbrakk>\n       \\<Longrightarrow> ((aa, b), take a' a'a)\n                         \\<in> \\<langle>R\\<rangle>as_rel", "apply (subgoal_tac \"take a' (list_of_array a) = take a' (take ba (list_of_array a))\")"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>a' a ba z.\n       \\<lbrakk>a' < ba;\n        (take ba (list_of_array a), z) \\<in> \\<langle>R\\<rangle>list_rel;\n        ba \\<le> array_length a;\n        take a' (list_of_array a) =\n        take a' (take ba (list_of_array a))\\<rbrakk>\n       \\<Longrightarrow> (take a' (list_of_array a), take a' z)\n                         \\<in> \\<langle>R\\<rangle>list_rel\n 2. \\<And>a' a ba z.\n       \\<lbrakk>a' < ba;\n        (take ba (list_of_array a), z) \\<in> \\<langle>R\\<rangle>list_rel;\n        ba \\<le> array_length a\\<rbrakk>\n       \\<Longrightarrow> take a' (list_of_array a) =\n                         take a' (take ba (list_of_array a))\n 3. \\<And>a' aa b a'a.\n       \\<lbrakk>((aa, b), a'a) \\<in> \\<langle>R\\<rangle>as_rel;\n        \\<not> a' < b\\<rbrakk>\n       \\<Longrightarrow> ((aa, b), take a' a'a)\n                         \\<in> \\<langle>R\\<rangle>as_rel", "apply (simp only: )"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>a' a ba z.\n       \\<lbrakk>a' < ba;\n        (take ba (list_of_array a), z) \\<in> \\<langle>R\\<rangle>list_rel;\n        ba \\<le> array_length a;\n        take a' (list_of_array a) =\n        take a' (take ba (list_of_array a))\\<rbrakk>\n       \\<Longrightarrow> (take a' (take ba (list_of_array a)), take a' z)\n                         \\<in> \\<langle>R\\<rangle>list_rel\n 2. \\<And>a' a ba z.\n       \\<lbrakk>a' < ba;\n        (take ba (list_of_array a), z) \\<in> \\<langle>R\\<rangle>list_rel;\n        ba \\<le> array_length a\\<rbrakk>\n       \\<Longrightarrow> take a' (list_of_array a) =\n                         take a' (take ba (list_of_array a))\n 3. \\<And>a' aa b a'a.\n       \\<lbrakk>((aa, b), a'a) \\<in> \\<langle>R\\<rangle>as_rel;\n        \\<not> a' < b\\<rbrakk>\n       \\<Longrightarrow> ((aa, b), take a' a'a)\n                         \\<in> \\<langle>R\\<rangle>as_rel", "apply (parametricity, rule IdI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a' a ba z.\n       \\<lbrakk>a' < ba;\n        (take ba (list_of_array a), z) \\<in> \\<langle>R\\<rangle>list_rel;\n        ba \\<le> array_length a\\<rbrakk>\n       \\<Longrightarrow> take a' (list_of_array a) =\n                         take a' (take ba (list_of_array a))\n 2. \\<And>a' aa b a'a.\n       \\<lbrakk>((aa, b), a'a) \\<in> \\<langle>R\\<rangle>as_rel;\n        \\<not> a' < b\\<rbrakk>\n       \\<Longrightarrow> ((aa, b), take a' a'a)\n                         \\<in> \\<langle>R\\<rangle>as_rel", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a' aa b a'a.\n       \\<lbrakk>((aa, b), a'a) \\<in> \\<langle>R\\<rangle>as_rel;\n        \\<not> a' < b\\<rbrakk>\n       \\<Longrightarrow> ((aa, b), take a' a'a)\n                         \\<in> \\<langle>R\\<rangle>as_rel", "apply (simp add: as_rel_def br_def as_raw_\\<alpha>_def as_raw_invar_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a' aa b a'a.\n       \\<lbrakk>((aa, b), a'a)\n                \\<in> {(c, a).\n                       a = take (snd c) (list_of_array (fst c)) \\<and>\n                       snd c \\<le> array_length (fst c)} O\n                      \\<langle>R\\<rangle>list_rel;\n        \\<not> a' < b\\<rbrakk>\n       \\<Longrightarrow> ((aa, b), take a' a'a)\n                         \\<in> {(c, a).\n                                a =\n                                take (snd c) (list_of_array (fst c)) \\<and>\n                                snd c \\<le> array_length (fst c)} O\n                               \\<langle>R\\<rangle>list_rel", "apply rule"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a' aa b a'a.\n       \\<lbrakk>((aa, b), a'a)\n                \\<in> {(c, a).\n                       a = take (snd c) (list_of_array (fst c)) \\<and>\n                       snd c \\<le> array_length (fst c)} O\n                      \\<langle>R\\<rangle>list_rel;\n        \\<not> a' < b\\<rbrakk>\n       \\<Longrightarrow> ((aa, b), ?b54 a' aa b a'a)\n                         \\<in> {(c, a).\n                                a =\n                                take (snd c) (list_of_array (fst c)) \\<and>\n                                snd c \\<le> array_length (fst c)}\n 2. \\<And>a' aa b a'a.\n       \\<lbrakk>((aa, b), a'a)\n                \\<in> {(c, a).\n                       a = take (snd c) (list_of_array (fst c)) \\<and>\n                       snd c \\<le> array_length (fst c)} O\n                      \\<langle>R\\<rangle>list_rel;\n        \\<not> a' < b\\<rbrakk>\n       \\<Longrightarrow> (?b54 a' aa b a'a, take a' a'a)\n                         \\<in> \\<langle>R\\<rangle>list_rel", "apply auto []"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a' aa b a'a.\n       \\<lbrakk>((aa, b), a'a)\n                \\<in> {(c, a).\n                       a = take (snd c) (list_of_array (fst c)) \\<and>\n                       snd c \\<le> array_length (fst c)} O\n                      \\<langle>R\\<rangle>list_rel;\n        \\<not> a' < b\\<rbrakk>\n       \\<Longrightarrow> (take b (list_of_array aa), take a' a'a)\n                         \\<in> \\<langle>R\\<rangle>list_rel", "apply clarsimp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a' a ba z.\n       \\<lbrakk>\\<not> a' < ba;\n        (take ba (list_of_array a), z) \\<in> \\<langle>R\\<rangle>list_rel;\n        ba \\<le> array_length a\\<rbrakk>\n       \\<Longrightarrow> (take ba (list_of_array a), take a' z)\n                         \\<in> \\<langle>R\\<rangle>list_rel", "apply (frule list_rel_imp_same_length)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a' a ba z.\n       \\<lbrakk>\\<not> a' < ba;\n        (take ba (list_of_array a), z) \\<in> \\<langle>R\\<rangle>list_rel;\n        ba \\<le> array_length a;\n        length (take ba (list_of_array a)) = length z\\<rbrakk>\n       \\<Longrightarrow> (take ba (list_of_array a), take a' z)\n                         \\<in> \\<langle>R\\<rangle>list_rel", "apply simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "definition \"as_singleton x \\<equiv> (array_of_list [x],1)\""], ["", "lemma as_singleton_refine[autoref_rules]: \n  \"(as_singleton,op_list_singleton)\\<in>R \\<rightarrow> \\<langle>R\\<rangle>as_rel\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (as_singleton, op_list_singleton)\n    \\<in> R \\<rightarrow> \\<langle>R\\<rangle>as_rel", "apply (intro fun_relI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a a'.\n       (a, a') \\<in> R \\<Longrightarrow>\n       (as_singleton a, op_list_singleton a')\n       \\<in> \\<langle>R\\<rangle>as_rel", "apply (simp add: as_singleton_def as_rel_def br_def as_raw_\\<alpha>_def \n    as_raw_invar_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a a'.\n       (a, a') \\<in> R \\<Longrightarrow>\n       ((array_of_list [a], Suc 0), [a'])\n       \\<in> {(c, a).\n              a = take (snd c) (list_of_array (fst c)) \\<and>\n              snd c \\<le> array_length (fst c)} O\n             \\<langle>R\\<rangle>list_rel", "apply rule"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a a'.\n       (a, a') \\<in> R \\<Longrightarrow>\n       ((array_of_list [a], Suc 0), ?b1 a a')\n       \\<in> {(c, a).\n              a = take (snd c) (list_of_array (fst c)) \\<and>\n              snd c \\<le> array_length (fst c)}\n 2. \\<And>a a'.\n       (a, a') \\<in> R \\<Longrightarrow>\n       (?b1 a a', [a']) \\<in> \\<langle>R\\<rangle>list_rel", "apply (auto simp: array_length_list) []"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a a'.\n       (a, a') \\<in> R \\<Longrightarrow>\n       ([a], [a']) \\<in> \\<langle>R\\<rangle>list_rel", "apply simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "end"], ["", "end"]]}