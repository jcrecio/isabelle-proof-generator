{"file_name": "/home/qj213/afp-2021-10-22/thys/Collections/Lib/RBT_add.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Collections", "problem_names": ["lemma tlt_trans: \"\\<lbrakk>l |\\<guillemotleft> u; u\\<le>v\\<rbrakk> \\<Longrightarrow> l |\\<guillemotleft> v\"", "lemma trt_trans: \"\\<lbrakk> u\\<le>v; v\\<guillemotleft>|r \\<rbrakk> \\<Longrightarrow> u\\<guillemotleft>|r\"", "lemmas tlt_trans' = tlt_trans[OF _ less_imp_le]", "lemmas trt_trans' = trt_trans[OF less_imp_le]", "lemma rm_iterateoi_abort :\n  \"\\<not>(c \\<sigma>) \\<Longrightarrow> rm_iterateoi t c f \\<sigma> = \\<sigma>\"", "lemma rm_iterateoi_alt_def :\n  \"rm_iterateoi RBT_Impl.Empty = set_iterator_emp\"\n  \"rm_iterateoi (RBT_Impl.Branch col l k v r) = \n   set_iterator_union (rm_iterateoi l)\n     (set_iterator_union (set_iterator_sng (k, v)) (rm_iterateoi r))\"", "lemma rm_reverse_iterateoi_abort :\n  \"\\<not>(c \\<sigma>) \\<Longrightarrow> rm_reverse_iterateoi t c f \\<sigma> = \\<sigma>\"", "lemma rm_reverse_iterateoi_alt_def :\n  \"rm_reverse_iterateoi RBT_Impl.Empty = set_iterator_emp\"\n  \"rm_reverse_iterateoi (RBT_Impl.Branch col l k v r) = \n   set_iterator_union (rm_reverse_iterateoi r)\n     (set_iterator_union (set_iterator_sng (k, v)) (rm_reverse_iterateoi l))\"", "lemma (in linorder) map_to_set_lookup_entries: \n   \"rbt_sorted t \\<Longrightarrow> map_to_set (rbt_lookup t) = set (RBT_Impl.entries t)\"", "lemma (in linorder) rm_iterateoi_correct:\n  fixes t::\"('a, 'v) RBT_Impl.rbt\"\n  assumes is_sort: \"rbt_sorted t\"\n  defines \"it \\<equiv> \n  RBT_add.rm_iterateoi::(('a, 'v) RBT_Impl.rbt \\<Rightarrow> ('a \\<times> 'v, '\\<sigma>) set_iterator)\"\n  shows \"map_iterator_linord (it t) (rbt_lookup t)\"", "lemma (in linorder) rm_reverse_iterateoi_correct:\n  fixes t::\"('a, 'v) RBT_Impl.rbt\"\n  assumes is_sort: \"rbt_sorted t\"\n  defines \"it \\<equiv> RBT_add.rm_reverse_iterateoi\n    ::(('a, 'v) RBT_Impl.rbt \\<Rightarrow> ('a \\<times> 'v, '\\<sigma>) set_iterator)\"\n  shows \"map_iterator_rev_linord (it t) (rbt_lookup t)\"", "lemma pi_rm[icf_proper_iteratorI]: \n  \"proper_it (RBT_add.rm_iterateoi t) (RBT_add.rm_iterateoi t)\"", "lemma pi_rm_rev[icf_proper_iteratorI]: \n  \"proper_it (RBT_add.rm_reverse_iterateoi t) (RBT_add.rm_reverse_iterateoi t)\"", "lemma bheight_aux_eq: \"bheight_aux t a = bheight t + a\"", "lemma \"rbt_bheight t = bheight t\""], "translations": [["", "lemma tlt_trans: \"\\<lbrakk>l |\\<guillemotleft> u; u\\<le>v\\<rbrakk> \\<Longrightarrow> l |\\<guillemotleft> v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>l |\\<guillemotleft> u; u \\<le> v\\<rbrakk>\n    \\<Longrightarrow> l |\\<guillemotleft> v", "by (induct l) auto"], ["", "lemma trt_trans: \"\\<lbrakk> u\\<le>v; v\\<guillemotleft>|r \\<rbrakk> \\<Longrightarrow> u\\<guillemotleft>|r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>u \\<le> v; v \\<guillemotleft>| r\\<rbrakk>\n    \\<Longrightarrow> u \\<guillemotleft>| r", "by (induct r) auto"], ["", "lemmas tlt_trans' = tlt_trans[OF _ less_imp_le]"], ["", "lemmas trt_trans' = trt_trans[OF less_imp_le]"], ["", "primrec rm_iterateoi \n  :: \"('k,'v) RBT_Impl.rbt \\<Rightarrow> ('k \\<times> 'v, '\\<sigma>) set_iterator\"\n  where\n  \"rm_iterateoi RBT_Impl.Empty c f \\<sigma> = \\<sigma>\" |\n  \"rm_iterateoi (RBT_Impl.Branch col l k v r) c f \\<sigma> = (\n    if (c \\<sigma>) then\n      let \\<sigma>' = rm_iterateoi l c f \\<sigma> in\n        if (c \\<sigma>') then\n          rm_iterateoi r c f (f (k, v) \\<sigma>')\n        else \\<sigma>'\n    else \n      \\<sigma>\n  )\""], ["", "lemma rm_iterateoi_abort :\n  \"\\<not>(c \\<sigma>) \\<Longrightarrow> rm_iterateoi t c f \\<sigma> = \\<sigma>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> c \\<sigma> \\<Longrightarrow>\n    rm_iterateoi t c f \\<sigma> = \\<sigma>", "by (cases t) auto"], ["", "lemma rm_iterateoi_alt_def :\n  \"rm_iterateoi RBT_Impl.Empty = set_iterator_emp\"\n  \"rm_iterateoi (RBT_Impl.Branch col l k v r) = \n   set_iterator_union (rm_iterateoi l)\n     (set_iterator_union (set_iterator_sng (k, v)) (rm_iterateoi r))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rm_iterateoi rbt.Empty = set_iterator_emp &&&\n    rm_iterateoi (Branch col l k v r) =\n    set_iterator_union (rm_iterateoi l)\n     (set_iterator_union (set_iterator_sng (k, v)) (rm_iterateoi r))", "by (simp_all add: fun_eq_iff set_iterator_emp_def rm_iterateoi_abort\n                  set_iterator_union_def set_iterator_sng_def Let_def)"], ["", "declare rm_iterateoi.simps[simp del]"], ["", "primrec rm_reverse_iterateoi \n  :: \"('k,'v) RBT_Impl.rbt \\<Rightarrow> ('k \\<times> 'v, '\\<sigma>) set_iterator\"\n  where\n  \"rm_reverse_iterateoi RBT_Impl.Empty c f \\<sigma> = \\<sigma>\" |\n  \"rm_reverse_iterateoi (Branch col l k v r) c f \\<sigma> = (\n    if (c \\<sigma>) then\n      let \\<sigma>' = rm_reverse_iterateoi r c f \\<sigma> in\n        if (c \\<sigma>') then\n          rm_reverse_iterateoi l c f (f (k, v) \\<sigma>')\n        else \\<sigma>'\n    else \n      \\<sigma>\n  )\""], ["", "lemma rm_reverse_iterateoi_abort :\n  \"\\<not>(c \\<sigma>) \\<Longrightarrow> rm_reverse_iterateoi t c f \\<sigma> = \\<sigma>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> c \\<sigma> \\<Longrightarrow>\n    rm_reverse_iterateoi t c f \\<sigma> = \\<sigma>", "by (cases t) auto"], ["", "lemma rm_reverse_iterateoi_alt_def :\n  \"rm_reverse_iterateoi RBT_Impl.Empty = set_iterator_emp\"\n  \"rm_reverse_iterateoi (RBT_Impl.Branch col l k v r) = \n   set_iterator_union (rm_reverse_iterateoi r)\n     (set_iterator_union (set_iterator_sng (k, v)) (rm_reverse_iterateoi l))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rm_reverse_iterateoi rbt.Empty = set_iterator_emp &&&\n    rm_reverse_iterateoi (Branch col l k v r) =\n    set_iterator_union (rm_reverse_iterateoi r)\n     (set_iterator_union (set_iterator_sng (k, v)) (rm_reverse_iterateoi l))", "by (simp_all add: fun_eq_iff set_iterator_emp_def rm_reverse_iterateoi_abort\n                  set_iterator_union_def set_iterator_sng_def Let_def)"], ["", "declare rm_reverse_iterateoi.simps[simp del]"], ["", "(*\nlemma finite_dom_lookup [simp, intro!]: \"finite (dom (RBT.lookup t))\"\nby(simp add: RBT.lookup_def)\n\n\ninstantiation rbt :: (\"{equal, linorder}\", equal) equal begin\n\ndefinition \"equal_class.equal (r :: ('a, 'b) rbt) r' == RBT.impl_of r = RBT.impl_of r'\"\n\ninstance\nproof\nqed (simp add: equal_rbt_def RBT.impl_of_inject)\n\nend\n*)"], ["", "lemma (in linorder) map_to_set_lookup_entries: \n   \"rbt_sorted t \\<Longrightarrow> map_to_set (rbt_lookup t) = set (RBT_Impl.entries t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rbt_sorted t \\<Longrightarrow>\n    map_to_set (rbt_lookup t) = set (RBT_Impl.entries t)", "using map_of_entries[symmetric,of t]"], ["proof (prove)\nusing this:\n  rbt_sorted t \\<Longrightarrow> rbt_lookup t = map_of (RBT_Impl.entries t)\n\ngoal (1 subgoal):\n 1. rbt_sorted t \\<Longrightarrow>\n    map_to_set (rbt_lookup t) = set (RBT_Impl.entries t)", "by (simp add: distinct_entries map_to_set_map_of)"], ["", "lemma (in linorder) rm_iterateoi_correct:\n  fixes t::\"('a, 'v) RBT_Impl.rbt\"\n  assumes is_sort: \"rbt_sorted t\"\n  defines \"it \\<equiv> \n  RBT_add.rm_iterateoi::(('a, 'v) RBT_Impl.rbt \\<Rightarrow> ('a \\<times> 'v, '\\<sigma>) set_iterator)\"\n  shows \"map_iterator_linord (it t) (rbt_lookup t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. map_iterator_linord (it t) (rbt_lookup t)", "using is_sort"], ["proof (prove)\nusing this:\n  rbt_sorted t\n\ngoal (1 subgoal):\n 1. map_iterator_linord (it t) (rbt_lookup t)", "proof (induct t)"], ["proof (state)\ngoal (2 subgoals):\n 1. rbt_sorted rbt.Empty \\<Longrightarrow>\n    map_iterator_linord (it rbt.Empty) (rbt_lookup rbt.Empty)\n 2. \\<And>x1 t1 x3 x4 t2.\n       \\<lbrakk>rbt_sorted t1 \\<Longrightarrow>\n                map_iterator_linord (it t1) (rbt_lookup t1);\n        rbt_sorted t2 \\<Longrightarrow>\n        map_iterator_linord (it t2) (rbt_lookup t2);\n        rbt_sorted (Branch x1 t1 x3 x4 t2)\\<rbrakk>\n       \\<Longrightarrow> map_iterator_linord (it (Branch x1 t1 x3 x4 t2))\n                          (rbt_lookup (Branch x1 t1 x3 x4 t2))", "case Empty"], ["proof (state)\nthis:\n  rbt_sorted rbt.Empty\n\ngoal (2 subgoals):\n 1. rbt_sorted rbt.Empty \\<Longrightarrow>\n    map_iterator_linord (it rbt.Empty) (rbt_lookup rbt.Empty)\n 2. \\<And>x1 t1 x3 x4 t2.\n       \\<lbrakk>rbt_sorted t1 \\<Longrightarrow>\n                map_iterator_linord (it t1) (rbt_lookup t1);\n        rbt_sorted t2 \\<Longrightarrow>\n        map_iterator_linord (it t2) (rbt_lookup t2);\n        rbt_sorted (Branch x1 t1 x3 x4 t2)\\<rbrakk>\n       \\<Longrightarrow> map_iterator_linord (it (Branch x1 t1 x3 x4 t2))\n                          (rbt_lookup (Branch x1 t1 x3 x4 t2))", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. map_iterator_linord (it rbt.Empty) (rbt_lookup rbt.Empty)", "unfolding it_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. map_iterator_linord (rm_iterateoi rbt.Empty) (rbt_lookup rbt.Empty)", "by (simp add: rm_iterateoi_alt_def \n      map_iterator_linord_emp_correct rbt_lookup_Empty)"], ["proof (state)\nthis:\n  map_iterator_linord (it rbt.Empty) (rbt_lookup rbt.Empty)\n\ngoal (1 subgoal):\n 1. \\<And>x1 t1 x3 x4 t2.\n       \\<lbrakk>rbt_sorted t1 \\<Longrightarrow>\n                map_iterator_linord (it t1) (rbt_lookup t1);\n        rbt_sorted t2 \\<Longrightarrow>\n        map_iterator_linord (it t2) (rbt_lookup t2);\n        rbt_sorted (Branch x1 t1 x3 x4 t2)\\<rbrakk>\n       \\<Longrightarrow> map_iterator_linord (it (Branch x1 t1 x3 x4 t2))\n                          (rbt_lookup (Branch x1 t1 x3 x4 t2))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x1 t1 x3 x4 t2.\n       \\<lbrakk>rbt_sorted t1 \\<Longrightarrow>\n                map_iterator_linord (it t1) (rbt_lookup t1);\n        rbt_sorted t2 \\<Longrightarrow>\n        map_iterator_linord (it t2) (rbt_lookup t2);\n        rbt_sorted (Branch x1 t1 x3 x4 t2)\\<rbrakk>\n       \\<Longrightarrow> map_iterator_linord (it (Branch x1 t1 x3 x4 t2))\n                          (rbt_lookup (Branch x1 t1 x3 x4 t2))", "case (Branch c l k v r)"], ["proof (state)\nthis:\n  rbt_sorted l \\<Longrightarrow> map_iterator_linord (it l) (rbt_lookup l)\n  rbt_sorted r \\<Longrightarrow> map_iterator_linord (it r) (rbt_lookup r)\n  rbt_sorted (Branch c l k v r)\n\ngoal (1 subgoal):\n 1. \\<And>x1 t1 x3 x4 t2.\n       \\<lbrakk>rbt_sorted t1 \\<Longrightarrow>\n                map_iterator_linord (it t1) (rbt_lookup t1);\n        rbt_sorted t2 \\<Longrightarrow>\n        map_iterator_linord (it t2) (rbt_lookup t2);\n        rbt_sorted (Branch x1 t1 x3 x4 t2)\\<rbrakk>\n       \\<Longrightarrow> map_iterator_linord (it (Branch x1 t1 x3 x4 t2))\n                          (rbt_lookup (Branch x1 t1 x3 x4 t2))", "note is_sort_t = Branch(3)"], ["proof (state)\nthis:\n  rbt_sorted (Branch c l k v r)\n\ngoal (1 subgoal):\n 1. \\<And>x1 t1 x3 x4 t2.\n       \\<lbrakk>rbt_sorted t1 \\<Longrightarrow>\n                map_iterator_linord (it t1) (rbt_lookup t1);\n        rbt_sorted t2 \\<Longrightarrow>\n        map_iterator_linord (it t2) (rbt_lookup t2);\n        rbt_sorted (Branch x1 t1 x3 x4 t2)\\<rbrakk>\n       \\<Longrightarrow> map_iterator_linord (it (Branch x1 t1 x3 x4 t2))\n                          (rbt_lookup (Branch x1 t1 x3 x4 t2))", "from Branch(1) is_sort_t"], ["proof (chain)\npicking this:\n  rbt_sorted l \\<Longrightarrow> map_iterator_linord (it l) (rbt_lookup l)\n  rbt_sorted (Branch c l k v r)", "have \n    l_it: \"map_iterator_linord (it l) (rbt_lookup l)\""], ["proof (prove)\nusing this:\n  rbt_sorted l \\<Longrightarrow> map_iterator_linord (it l) (rbt_lookup l)\n  rbt_sorted (Branch c l k v r)\n\ngoal (1 subgoal):\n 1. map_iterator_linord (it l) (rbt_lookup l)", "by simp"], ["proof (state)\nthis:\n  map_iterator_linord (it l) (rbt_lookup l)\n\ngoal (1 subgoal):\n 1. \\<And>x1 t1 x3 x4 t2.\n       \\<lbrakk>rbt_sorted t1 \\<Longrightarrow>\n                map_iterator_linord (it t1) (rbt_lookup t1);\n        rbt_sorted t2 \\<Longrightarrow>\n        map_iterator_linord (it t2) (rbt_lookup t2);\n        rbt_sorted (Branch x1 t1 x3 x4 t2)\\<rbrakk>\n       \\<Longrightarrow> map_iterator_linord (it (Branch x1 t1 x3 x4 t2))\n                          (rbt_lookup (Branch x1 t1 x3 x4 t2))", "from Branch(2) is_sort_t"], ["proof (chain)\npicking this:\n  rbt_sorted r \\<Longrightarrow> map_iterator_linord (it r) (rbt_lookup r)\n  rbt_sorted (Branch c l k v r)", "have \n    r_it: \"map_iterator_linord (it r) (rbt_lookup r)\""], ["proof (prove)\nusing this:\n  rbt_sorted r \\<Longrightarrow> map_iterator_linord (it r) (rbt_lookup r)\n  rbt_sorted (Branch c l k v r)\n\ngoal (1 subgoal):\n 1. map_iterator_linord (it r) (rbt_lookup r)", "by simp"], ["proof (state)\nthis:\n  map_iterator_linord (it r) (rbt_lookup r)\n\ngoal (1 subgoal):\n 1. \\<And>x1 t1 x3 x4 t2.\n       \\<lbrakk>rbt_sorted t1 \\<Longrightarrow>\n                map_iterator_linord (it t1) (rbt_lookup t1);\n        rbt_sorted t2 \\<Longrightarrow>\n        map_iterator_linord (it t2) (rbt_lookup t2);\n        rbt_sorted (Branch x1 t1 x3 x4 t2)\\<rbrakk>\n       \\<Longrightarrow> map_iterator_linord (it (Branch x1 t1 x3 x4 t2))\n                          (rbt_lookup (Branch x1 t1 x3 x4 t2))", "note kv_it = map_iterator_linord_sng_correct[of k v]"], ["proof (state)\nthis:\n  map_iterator_linord (set_iterator_sng (k, v)) [k \\<mapsto> v]\n\ngoal (1 subgoal):\n 1. \\<And>x1 t1 x3 x4 t2.\n       \\<lbrakk>rbt_sorted t1 \\<Longrightarrow>\n                map_iterator_linord (it t1) (rbt_lookup t1);\n        rbt_sorted t2 \\<Longrightarrow>\n        map_iterator_linord (it t2) (rbt_lookup t2);\n        rbt_sorted (Branch x1 t1 x3 x4 t2)\\<rbrakk>\n       \\<Longrightarrow> map_iterator_linord (it (Branch x1 t1 x3 x4 t2))\n                          (rbt_lookup (Branch x1 t1 x3 x4 t2))", "have kv_r_it : \"set_iterator_map_linord\n     (set_iterator_union (set_iterator_sng (k, v)) (it r))\n     (map_to_set [k \\<mapsto> v] \\<union> map_to_set (rbt_lookup r))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set_iterator_map_linord\n     (set_iterator_union (set_iterator_sng (k, v)) (it r))\n     (map_to_set [k \\<mapsto> v] \\<union> map_to_set (rbt_lookup r))", "proof (rule map_iterator_linord_union_correct [OF kv_it r_it])"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>kv kv'.\n       \\<lbrakk>kv \\<in> map_to_set [k \\<mapsto> v];\n        kv' \\<in> map_to_set (rbt_lookup r)\\<rbrakk>\n       \\<Longrightarrow> fst kv < fst kv'", "fix kv kv'"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>kv kv'.\n       \\<lbrakk>kv \\<in> map_to_set [k \\<mapsto> v];\n        kv' \\<in> map_to_set (rbt_lookup r)\\<rbrakk>\n       \\<Longrightarrow> fst kv < fst kv'", "assume pre: \"kv \\<in> map_to_set [k \\<mapsto> v]\" \"kv' \\<in> map_to_set (rbt_lookup r)\""], ["proof (state)\nthis:\n  kv \\<in> map_to_set [k \\<mapsto> v]\n  kv' \\<in> map_to_set (rbt_lookup r)\n\ngoal (1 subgoal):\n 1. \\<And>kv kv'.\n       \\<lbrakk>kv \\<in> map_to_set [k \\<mapsto> v];\n        kv' \\<in> map_to_set (rbt_lookup r)\\<rbrakk>\n       \\<Longrightarrow> fst kv < fst kv'", "obtain k' v' where kv'_eq[simp]: \"kv' = (k', v')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>k' v'. kv' = (k', v') \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (rule prod.exhaust)"], ["proof (state)\nthis:\n  kv' = (k', v')\n\ngoal (1 subgoal):\n 1. \\<And>kv kv'.\n       \\<lbrakk>kv \\<in> map_to_set [k \\<mapsto> v];\n        kv' \\<in> map_to_set (rbt_lookup r)\\<rbrakk>\n       \\<Longrightarrow> fst kv < fst kv'", "from pre is_sort_t"], ["proof (chain)\npicking this:\n  kv \\<in> map_to_set [k \\<mapsto> v]\n  kv' \\<in> map_to_set (rbt_lookup r)\n  rbt_sorted (Branch c l k v r)", "show \"fst kv < fst kv'\""], ["proof (prove)\nusing this:\n  kv \\<in> map_to_set [k \\<mapsto> v]\n  kv' \\<in> map_to_set (rbt_lookup r)\n  rbt_sorted (Branch c l k v r)\n\ngoal (1 subgoal):\n 1. fst kv < fst kv'", "apply (simp add: map_to_set_lookup_entries split: prod.splits)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>kv = (k, v); (k', v') \\<in> set (RBT_Impl.entries r);\n     l |\\<guillemotleft> k \\<and>\n     k \\<guillemotleft>| r \\<and> rbt_sorted l \\<and> rbt_sorted r\\<rbrakk>\n    \\<Longrightarrow> k < k'", "apply (metis entry_in_tree_keys rbt_greater_prop)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  fst kv < fst kv'\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  set_iterator_map_linord\n   (set_iterator_union (set_iterator_sng (k, v)) (it r))\n   (map_to_set [k \\<mapsto> v] \\<union> map_to_set (rbt_lookup r))\n\ngoal (1 subgoal):\n 1. \\<And>x1 t1 x3 x4 t2.\n       \\<lbrakk>rbt_sorted t1 \\<Longrightarrow>\n                map_iterator_linord (it t1) (rbt_lookup t1);\n        rbt_sorted t2 \\<Longrightarrow>\n        map_iterator_linord (it t2) (rbt_lookup t2);\n        rbt_sorted (Branch x1 t1 x3 x4 t2)\\<rbrakk>\n       \\<Longrightarrow> map_iterator_linord (it (Branch x1 t1 x3 x4 t2))\n                          (rbt_lookup (Branch x1 t1 x3 x4 t2))", "have l_kv_r_it : \"set_iterator_map_linord (it (Branch c l k v r))\n     (map_to_set (rbt_lookup l) \n      \\<union> (map_to_set [k \\<mapsto> v] \\<union> map_to_set (rbt_lookup r)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set_iterator_map_linord (it (Branch c l k v r))\n     (map_to_set (rbt_lookup l) \\<union>\n      (map_to_set [k \\<mapsto> v] \\<union> map_to_set (rbt_lookup r)))", "unfolding it_def rm_iterateoi_alt_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. set_iterator_map_linord\n     (set_iterator_union (rm_iterateoi l)\n       (set_iterator_union (set_iterator_sng (k, v)) (rm_iterateoi r)))\n     (map_to_set (rbt_lookup l) \\<union>\n      (map_to_set [k \\<mapsto> v] \\<union> map_to_set (rbt_lookup r)))", "unfolding it_def[symmetric]"], ["proof (prove)\ngoal (1 subgoal):\n 1. set_iterator_map_linord\n     (set_iterator_union (it l)\n       (set_iterator_union (set_iterator_sng (k, v)) (it r)))\n     (map_to_set (rbt_lookup l) \\<union>\n      (map_to_set [k \\<mapsto> v] \\<union> map_to_set (rbt_lookup r)))", "proof (rule map_iterator_linord_union_correct [OF l_it kv_r_it])"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>kv kv'.\n       \\<lbrakk>kv \\<in> map_to_set (rbt_lookup l);\n        kv'\n        \\<in> map_to_set [k \\<mapsto> v] \\<union>\n              map_to_set (rbt_lookup r)\\<rbrakk>\n       \\<Longrightarrow> fst kv < fst kv'", "fix kv1 kv2"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>kv kv'.\n       \\<lbrakk>kv \\<in> map_to_set (rbt_lookup l);\n        kv'\n        \\<in> map_to_set [k \\<mapsto> v] \\<union>\n              map_to_set (rbt_lookup r)\\<rbrakk>\n       \\<Longrightarrow> fst kv < fst kv'", "assume pre: \"kv1 \\<in> map_to_set (rbt_lookup l)\" \n                \"kv2 \\<in> map_to_set [k \\<mapsto> v] \\<union> map_to_set (rbt_lookup r)\""], ["proof (state)\nthis:\n  kv1 \\<in> map_to_set (rbt_lookup l)\n  kv2 \\<in> map_to_set [k \\<mapsto> v] \\<union> map_to_set (rbt_lookup r)\n\ngoal (1 subgoal):\n 1. \\<And>kv kv'.\n       \\<lbrakk>kv \\<in> map_to_set (rbt_lookup l);\n        kv'\n        \\<in> map_to_set [k \\<mapsto> v] \\<union>\n              map_to_set (rbt_lookup r)\\<rbrakk>\n       \\<Longrightarrow> fst kv < fst kv'", "obtain k1 v1 where kv1_eq[simp]: \"kv1 = (k1, v1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>k1 v1. kv1 = (k1, v1) \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (rule prod.exhaust)"], ["proof (state)\nthis:\n  kv1 = (k1, v1)\n\ngoal (1 subgoal):\n 1. \\<And>kv kv'.\n       \\<lbrakk>kv \\<in> map_to_set (rbt_lookup l);\n        kv'\n        \\<in> map_to_set [k \\<mapsto> v] \\<union>\n              map_to_set (rbt_lookup r)\\<rbrakk>\n       \\<Longrightarrow> fst kv < fst kv'", "obtain k2 v2 where kv2_eq[simp]: \"kv2 = (k2, v2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>k2 v2. kv2 = (k2, v2) \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (rule prod.exhaust)"], ["proof (state)\nthis:\n  kv2 = (k2, v2)\n\ngoal (1 subgoal):\n 1. \\<And>kv kv'.\n       \\<lbrakk>kv \\<in> map_to_set (rbt_lookup l);\n        kv'\n        \\<in> map_to_set [k \\<mapsto> v] \\<union>\n              map_to_set (rbt_lookup r)\\<rbrakk>\n       \\<Longrightarrow> fst kv < fst kv'", "from pre is_sort_t"], ["proof (chain)\npicking this:\n  kv1 \\<in> map_to_set (rbt_lookup l)\n  kv2 \\<in> map_to_set [k \\<mapsto> v] \\<union> map_to_set (rbt_lookup r)\n  rbt_sorted (Branch c l k v r)", "show \"fst kv1 < fst kv2\""], ["proof (prove)\nusing this:\n  kv1 \\<in> map_to_set (rbt_lookup l)\n  kv2 \\<in> map_to_set [k \\<mapsto> v] \\<union> map_to_set (rbt_lookup r)\n  rbt_sorted (Branch c l k v r)\n\ngoal (1 subgoal):\n 1. fst kv1 < fst kv2", "apply (simp add: map_to_set_lookup_entries split: prod.splits)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>(k1, v1) \\<in> set (RBT_Impl.entries l);\n     k2 = k \\<and> v2 = v \\<or> (k2, v2) \\<in> set (RBT_Impl.entries r);\n     l |\\<guillemotleft> k \\<and>\n     k \\<guillemotleft>| r \\<and> rbt_sorted l \\<and> rbt_sorted r\\<rbrakk>\n    \\<Longrightarrow> k1 < k2", "by (metis (lifting) map_of_entries neqE option.simps(3) \n        ord.rbt_lookup_rbt_greater ord.rbt_lookup_rbt_less rbt_greater_trans \n        rbt_less_trans weak_map_of_SomeI)"], ["proof (state)\nthis:\n  fst kv1 < fst kv2\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  set_iterator_map_linord (it (Branch c l k v r))\n   (map_to_set (rbt_lookup l) \\<union>\n    (map_to_set [k \\<mapsto> v] \\<union> map_to_set (rbt_lookup r)))\n\ngoal (1 subgoal):\n 1. \\<And>x1 t1 x3 x4 t2.\n       \\<lbrakk>rbt_sorted t1 \\<Longrightarrow>\n                map_iterator_linord (it t1) (rbt_lookup t1);\n        rbt_sorted t2 \\<Longrightarrow>\n        map_iterator_linord (it t2) (rbt_lookup t2);\n        rbt_sorted (Branch x1 t1 x3 x4 t2)\\<rbrakk>\n       \\<Longrightarrow> map_iterator_linord (it (Branch x1 t1 x3 x4 t2))\n                          (rbt_lookup (Branch x1 t1 x3 x4 t2))", "from is_sort_t"], ["proof (chain)\npicking this:\n  rbt_sorted (Branch c l k v r)", "have map_eq: \"map_to_set (rbt_lookup l) \n    \\<union> (map_to_set [k \\<mapsto> v] \\<union> map_to_set (rbt_lookup r)) =\n        map_to_set (rbt_lookup (Branch c l k v r))\""], ["proof (prove)\nusing this:\n  rbt_sorted (Branch c l k v r)\n\ngoal (1 subgoal):\n 1. map_to_set (rbt_lookup l) \\<union>\n    (map_to_set [k \\<mapsto> v] \\<union> map_to_set (rbt_lookup r)) =\n    map_to_set (rbt_lookup (Branch c l k v r))", "by (simp add: set_eq_iff map_to_set_lookup_entries)"], ["proof (state)\nthis:\n  map_to_set (rbt_lookup l) \\<union>\n  (map_to_set [k \\<mapsto> v] \\<union> map_to_set (rbt_lookup r)) =\n  map_to_set (rbt_lookup (Branch c l k v r))\n\ngoal (1 subgoal):\n 1. \\<And>x1 t1 x3 x4 t2.\n       \\<lbrakk>rbt_sorted t1 \\<Longrightarrow>\n                map_iterator_linord (it t1) (rbt_lookup t1);\n        rbt_sorted t2 \\<Longrightarrow>\n        map_iterator_linord (it t2) (rbt_lookup t2);\n        rbt_sorted (Branch x1 t1 x3 x4 t2)\\<rbrakk>\n       \\<Longrightarrow> map_iterator_linord (it (Branch x1 t1 x3 x4 t2))\n                          (rbt_lookup (Branch x1 t1 x3 x4 t2))", "from l_kv_r_it[unfolded map_eq]"], ["proof (chain)\npicking this:\n  map_iterator_linord (it (Branch c l k v r))\n   (rbt_lookup (Branch c l k v r))", "show ?case"], ["proof (prove)\nusing this:\n  map_iterator_linord (it (Branch c l k v r))\n   (rbt_lookup (Branch c l k v r))\n\ngoal (1 subgoal):\n 1. map_iterator_linord (it (Branch c l k v r))\n     (rbt_lookup (Branch c l k v r))", "."], ["proof (state)\nthis:\n  map_iterator_linord (it (Branch c l k v r))\n   (rbt_lookup (Branch c l k v r))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma (in linorder) rm_reverse_iterateoi_correct:\n  fixes t::\"('a, 'v) RBT_Impl.rbt\"\n  assumes is_sort: \"rbt_sorted t\"\n  defines \"it \\<equiv> RBT_add.rm_reverse_iterateoi\n    ::(('a, 'v) RBT_Impl.rbt \\<Rightarrow> ('a \\<times> 'v, '\\<sigma>) set_iterator)\"\n  shows \"map_iterator_rev_linord (it t) (rbt_lookup t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. map_iterator_rev_linord (it t) (rbt_lookup t)", "using is_sort"], ["proof (prove)\nusing this:\n  rbt_sorted t\n\ngoal (1 subgoal):\n 1. map_iterator_rev_linord (it t) (rbt_lookup t)", "proof (induct t)"], ["proof (state)\ngoal (2 subgoals):\n 1. rbt_sorted rbt.Empty \\<Longrightarrow>\n    map_iterator_rev_linord (it rbt.Empty) (rbt_lookup rbt.Empty)\n 2. \\<And>x1 t1 x3 x4 t2.\n       \\<lbrakk>rbt_sorted t1 \\<Longrightarrow>\n                map_iterator_rev_linord (it t1) (rbt_lookup t1);\n        rbt_sorted t2 \\<Longrightarrow>\n        map_iterator_rev_linord (it t2) (rbt_lookup t2);\n        rbt_sorted (Branch x1 t1 x3 x4 t2)\\<rbrakk>\n       \\<Longrightarrow> map_iterator_rev_linord\n                          (it (Branch x1 t1 x3 x4 t2))\n                          (rbt_lookup (Branch x1 t1 x3 x4 t2))", "case Empty"], ["proof (state)\nthis:\n  rbt_sorted rbt.Empty\n\ngoal (2 subgoals):\n 1. rbt_sorted rbt.Empty \\<Longrightarrow>\n    map_iterator_rev_linord (it rbt.Empty) (rbt_lookup rbt.Empty)\n 2. \\<And>x1 t1 x3 x4 t2.\n       \\<lbrakk>rbt_sorted t1 \\<Longrightarrow>\n                map_iterator_rev_linord (it t1) (rbt_lookup t1);\n        rbt_sorted t2 \\<Longrightarrow>\n        map_iterator_rev_linord (it t2) (rbt_lookup t2);\n        rbt_sorted (Branch x1 t1 x3 x4 t2)\\<rbrakk>\n       \\<Longrightarrow> map_iterator_rev_linord\n                          (it (Branch x1 t1 x3 x4 t2))\n                          (rbt_lookup (Branch x1 t1 x3 x4 t2))", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. map_iterator_rev_linord (it rbt.Empty) (rbt_lookup rbt.Empty)", "unfolding it_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. map_iterator_rev_linord (rm_reverse_iterateoi rbt.Empty)\n     (rbt_lookup rbt.Empty)", "by (simp add: rm_reverse_iterateoi_alt_def \n      map_iterator_rev_linord_emp_correct rbt_lookup_Empty)"], ["proof (state)\nthis:\n  map_iterator_rev_linord (it rbt.Empty) (rbt_lookup rbt.Empty)\n\ngoal (1 subgoal):\n 1. \\<And>x1 t1 x3 x4 t2.\n       \\<lbrakk>rbt_sorted t1 \\<Longrightarrow>\n                map_iterator_rev_linord (it t1) (rbt_lookup t1);\n        rbt_sorted t2 \\<Longrightarrow>\n        map_iterator_rev_linord (it t2) (rbt_lookup t2);\n        rbt_sorted (Branch x1 t1 x3 x4 t2)\\<rbrakk>\n       \\<Longrightarrow> map_iterator_rev_linord\n                          (it (Branch x1 t1 x3 x4 t2))\n                          (rbt_lookup (Branch x1 t1 x3 x4 t2))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x1 t1 x3 x4 t2.\n       \\<lbrakk>rbt_sorted t1 \\<Longrightarrow>\n                map_iterator_rev_linord (it t1) (rbt_lookup t1);\n        rbt_sorted t2 \\<Longrightarrow>\n        map_iterator_rev_linord (it t2) (rbt_lookup t2);\n        rbt_sorted (Branch x1 t1 x3 x4 t2)\\<rbrakk>\n       \\<Longrightarrow> map_iterator_rev_linord\n                          (it (Branch x1 t1 x3 x4 t2))\n                          (rbt_lookup (Branch x1 t1 x3 x4 t2))", "case (Branch c l k v r)"], ["proof (state)\nthis:\n  rbt_sorted l \\<Longrightarrow>\n  map_iterator_rev_linord (it l) (rbt_lookup l)\n  rbt_sorted r \\<Longrightarrow>\n  map_iterator_rev_linord (it r) (rbt_lookup r)\n  rbt_sorted (Branch c l k v r)\n\ngoal (1 subgoal):\n 1. \\<And>x1 t1 x3 x4 t2.\n       \\<lbrakk>rbt_sorted t1 \\<Longrightarrow>\n                map_iterator_rev_linord (it t1) (rbt_lookup t1);\n        rbt_sorted t2 \\<Longrightarrow>\n        map_iterator_rev_linord (it t2) (rbt_lookup t2);\n        rbt_sorted (Branch x1 t1 x3 x4 t2)\\<rbrakk>\n       \\<Longrightarrow> map_iterator_rev_linord\n                          (it (Branch x1 t1 x3 x4 t2))\n                          (rbt_lookup (Branch x1 t1 x3 x4 t2))", "note is_sort_t = Branch(3)"], ["proof (state)\nthis:\n  rbt_sorted (Branch c l k v r)\n\ngoal (1 subgoal):\n 1. \\<And>x1 t1 x3 x4 t2.\n       \\<lbrakk>rbt_sorted t1 \\<Longrightarrow>\n                map_iterator_rev_linord (it t1) (rbt_lookup t1);\n        rbt_sorted t2 \\<Longrightarrow>\n        map_iterator_rev_linord (it t2) (rbt_lookup t2);\n        rbt_sorted (Branch x1 t1 x3 x4 t2)\\<rbrakk>\n       \\<Longrightarrow> map_iterator_rev_linord\n                          (it (Branch x1 t1 x3 x4 t2))\n                          (rbt_lookup (Branch x1 t1 x3 x4 t2))", "from Branch(1) is_sort_t"], ["proof (chain)\npicking this:\n  rbt_sorted l \\<Longrightarrow>\n  map_iterator_rev_linord (it l) (rbt_lookup l)\n  rbt_sorted (Branch c l k v r)", "have \n    l_it: \"map_iterator_rev_linord (it l) (rbt_lookup l)\""], ["proof (prove)\nusing this:\n  rbt_sorted l \\<Longrightarrow>\n  map_iterator_rev_linord (it l) (rbt_lookup l)\n  rbt_sorted (Branch c l k v r)\n\ngoal (1 subgoal):\n 1. map_iterator_rev_linord (it l) (rbt_lookup l)", "by simp"], ["proof (state)\nthis:\n  map_iterator_rev_linord (it l) (rbt_lookup l)\n\ngoal (1 subgoal):\n 1. \\<And>x1 t1 x3 x4 t2.\n       \\<lbrakk>rbt_sorted t1 \\<Longrightarrow>\n                map_iterator_rev_linord (it t1) (rbt_lookup t1);\n        rbt_sorted t2 \\<Longrightarrow>\n        map_iterator_rev_linord (it t2) (rbt_lookup t2);\n        rbt_sorted (Branch x1 t1 x3 x4 t2)\\<rbrakk>\n       \\<Longrightarrow> map_iterator_rev_linord\n                          (it (Branch x1 t1 x3 x4 t2))\n                          (rbt_lookup (Branch x1 t1 x3 x4 t2))", "from Branch(2) is_sort_t"], ["proof (chain)\npicking this:\n  rbt_sorted r \\<Longrightarrow>\n  map_iterator_rev_linord (it r) (rbt_lookup r)\n  rbt_sorted (Branch c l k v r)", "have \n    r_it: \"map_iterator_rev_linord (it r) (rbt_lookup r)\""], ["proof (prove)\nusing this:\n  rbt_sorted r \\<Longrightarrow>\n  map_iterator_rev_linord (it r) (rbt_lookup r)\n  rbt_sorted (Branch c l k v r)\n\ngoal (1 subgoal):\n 1. map_iterator_rev_linord (it r) (rbt_lookup r)", "by simp"], ["proof (state)\nthis:\n  map_iterator_rev_linord (it r) (rbt_lookup r)\n\ngoal (1 subgoal):\n 1. \\<And>x1 t1 x3 x4 t2.\n       \\<lbrakk>rbt_sorted t1 \\<Longrightarrow>\n                map_iterator_rev_linord (it t1) (rbt_lookup t1);\n        rbt_sorted t2 \\<Longrightarrow>\n        map_iterator_rev_linord (it t2) (rbt_lookup t2);\n        rbt_sorted (Branch x1 t1 x3 x4 t2)\\<rbrakk>\n       \\<Longrightarrow> map_iterator_rev_linord\n                          (it (Branch x1 t1 x3 x4 t2))\n                          (rbt_lookup (Branch x1 t1 x3 x4 t2))", "note kv_it = map_iterator_rev_linord_sng_correct[of k v]"], ["proof (state)\nthis:\n  map_iterator_rev_linord (set_iterator_sng (k, v)) [k \\<mapsto> v]\n\ngoal (1 subgoal):\n 1. \\<And>x1 t1 x3 x4 t2.\n       \\<lbrakk>rbt_sorted t1 \\<Longrightarrow>\n                map_iterator_rev_linord (it t1) (rbt_lookup t1);\n        rbt_sorted t2 \\<Longrightarrow>\n        map_iterator_rev_linord (it t2) (rbt_lookup t2);\n        rbt_sorted (Branch x1 t1 x3 x4 t2)\\<rbrakk>\n       \\<Longrightarrow> map_iterator_rev_linord\n                          (it (Branch x1 t1 x3 x4 t2))\n                          (rbt_lookup (Branch x1 t1 x3 x4 t2))", "have kv_l_it : \"set_iterator_map_rev_linord\n     (set_iterator_union (set_iterator_sng (k, v)) (it l))\n     (map_to_set [k \\<mapsto> v] \\<union> map_to_set (rbt_lookup l))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set_iterator_map_rev_linord\n     (set_iterator_union (set_iterator_sng (k, v)) (it l))\n     (map_to_set [k \\<mapsto> v] \\<union> map_to_set (rbt_lookup l))", "proof (rule map_iterator_rev_linord_union_correct [OF kv_it l_it])"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>kv kv'.\n       \\<lbrakk>kv \\<in> map_to_set [k \\<mapsto> v];\n        kv' \\<in> map_to_set (rbt_lookup l)\\<rbrakk>\n       \\<Longrightarrow> fst kv' < fst kv", "fix kv kv'"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>kv kv'.\n       \\<lbrakk>kv \\<in> map_to_set [k \\<mapsto> v];\n        kv' \\<in> map_to_set (rbt_lookup l)\\<rbrakk>\n       \\<Longrightarrow> fst kv' < fst kv", "assume pre: \"kv \\<in> map_to_set [k \\<mapsto> v]\" \"kv' \\<in> map_to_set (rbt_lookup l)\""], ["proof (state)\nthis:\n  kv \\<in> map_to_set [k \\<mapsto> v]\n  kv' \\<in> map_to_set (rbt_lookup l)\n\ngoal (1 subgoal):\n 1. \\<And>kv kv'.\n       \\<lbrakk>kv \\<in> map_to_set [k \\<mapsto> v];\n        kv' \\<in> map_to_set (rbt_lookup l)\\<rbrakk>\n       \\<Longrightarrow> fst kv' < fst kv", "obtain k' v' where kv'_eq[simp]: \"kv' = (k', v')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>k' v'. kv' = (k', v') \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (rule prod.exhaust)"], ["proof (state)\nthis:\n  kv' = (k', v')\n\ngoal (1 subgoal):\n 1. \\<And>kv kv'.\n       \\<lbrakk>kv \\<in> map_to_set [k \\<mapsto> v];\n        kv' \\<in> map_to_set (rbt_lookup l)\\<rbrakk>\n       \\<Longrightarrow> fst kv' < fst kv", "from pre is_sort_t"], ["proof (chain)\npicking this:\n  kv \\<in> map_to_set [k \\<mapsto> v]\n  kv' \\<in> map_to_set (rbt_lookup l)\n  rbt_sorted (Branch c l k v r)", "show \"fst kv > fst kv'\""], ["proof (prove)\nusing this:\n  kv \\<in> map_to_set [k \\<mapsto> v]\n  kv' \\<in> map_to_set (rbt_lookup l)\n  rbt_sorted (Branch c l k v r)\n\ngoal (1 subgoal):\n 1. fst kv' < fst kv", "apply (simp add: map_to_set_lookup_entries split: prod.splits)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>kv = (k, v); (k', v') \\<in> set (RBT_Impl.entries l);\n     l |\\<guillemotleft> k \\<and>\n     k \\<guillemotleft>| r \\<and> rbt_sorted l \\<and> rbt_sorted r\\<rbrakk>\n    \\<Longrightarrow> k' < k", "apply (metis entry_in_tree_keys rbt_less_prop)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  fst kv' < fst kv\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  set_iterator_map_rev_linord\n   (set_iterator_union (set_iterator_sng (k, v)) (it l))\n   (map_to_set [k \\<mapsto> v] \\<union> map_to_set (rbt_lookup l))\n\ngoal (1 subgoal):\n 1. \\<And>x1 t1 x3 x4 t2.\n       \\<lbrakk>rbt_sorted t1 \\<Longrightarrow>\n                map_iterator_rev_linord (it t1) (rbt_lookup t1);\n        rbt_sorted t2 \\<Longrightarrow>\n        map_iterator_rev_linord (it t2) (rbt_lookup t2);\n        rbt_sorted (Branch x1 t1 x3 x4 t2)\\<rbrakk>\n       \\<Longrightarrow> map_iterator_rev_linord\n                          (it (Branch x1 t1 x3 x4 t2))\n                          (rbt_lookup (Branch x1 t1 x3 x4 t2))", "have r_kv_l_it : \"set_iterator_map_rev_linord (it (Branch c l k v r))\n     (map_to_set (rbt_lookup r) \n      \\<union> (map_to_set [k \\<mapsto> v] \\<union> map_to_set (rbt_lookup l)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set_iterator_map_rev_linord (it (Branch c l k v r))\n     (map_to_set (rbt_lookup r) \\<union>\n      (map_to_set [k \\<mapsto> v] \\<union> map_to_set (rbt_lookup l)))", "unfolding it_def rm_reverse_iterateoi_alt_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. set_iterator_map_rev_linord\n     (set_iterator_union (rm_reverse_iterateoi r)\n       (set_iterator_union (set_iterator_sng (k, v))\n         (rm_reverse_iterateoi l)))\n     (map_to_set (rbt_lookup r) \\<union>\n      (map_to_set [k \\<mapsto> v] \\<union> map_to_set (rbt_lookup l)))", "unfolding it_def[symmetric]"], ["proof (prove)\ngoal (1 subgoal):\n 1. set_iterator_map_rev_linord\n     (set_iterator_union (it r)\n       (set_iterator_union (set_iterator_sng (k, v)) (it l)))\n     (map_to_set (rbt_lookup r) \\<union>\n      (map_to_set [k \\<mapsto> v] \\<union> map_to_set (rbt_lookup l)))", "proof (rule map_iterator_rev_linord_union_correct [OF r_it kv_l_it])"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>kv kv'.\n       \\<lbrakk>kv \\<in> map_to_set (rbt_lookup r);\n        kv'\n        \\<in> map_to_set [k \\<mapsto> v] \\<union>\n              map_to_set (rbt_lookup l)\\<rbrakk>\n       \\<Longrightarrow> fst kv' < fst kv", "fix kv1 kv2"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>kv kv'.\n       \\<lbrakk>kv \\<in> map_to_set (rbt_lookup r);\n        kv'\n        \\<in> map_to_set [k \\<mapsto> v] \\<union>\n              map_to_set (rbt_lookup l)\\<rbrakk>\n       \\<Longrightarrow> fst kv' < fst kv", "assume pre: \"kv1 \\<in> map_to_set (rbt_lookup r)\" \n                \"kv2 \\<in> map_to_set [k \\<mapsto> v] \\<union> map_to_set (rbt_lookup l)\""], ["proof (state)\nthis:\n  kv1 \\<in> map_to_set (rbt_lookup r)\n  kv2 \\<in> map_to_set [k \\<mapsto> v] \\<union> map_to_set (rbt_lookup l)\n\ngoal (1 subgoal):\n 1. \\<And>kv kv'.\n       \\<lbrakk>kv \\<in> map_to_set (rbt_lookup r);\n        kv'\n        \\<in> map_to_set [k \\<mapsto> v] \\<union>\n              map_to_set (rbt_lookup l)\\<rbrakk>\n       \\<Longrightarrow> fst kv' < fst kv", "obtain k1 v1 where kv1_eq[simp]: \"kv1 = (k1, v1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>k1 v1. kv1 = (k1, v1) \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (rule prod.exhaust)"], ["proof (state)\nthis:\n  kv1 = (k1, v1)\n\ngoal (1 subgoal):\n 1. \\<And>kv kv'.\n       \\<lbrakk>kv \\<in> map_to_set (rbt_lookup r);\n        kv'\n        \\<in> map_to_set [k \\<mapsto> v] \\<union>\n              map_to_set (rbt_lookup l)\\<rbrakk>\n       \\<Longrightarrow> fst kv' < fst kv", "obtain k2 v2 where kv2_eq[simp]: \"kv2 = (k2, v2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>k2 v2. kv2 = (k2, v2) \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (rule prod.exhaust)"], ["proof (state)\nthis:\n  kv2 = (k2, v2)\n\ngoal (1 subgoal):\n 1. \\<And>kv kv'.\n       \\<lbrakk>kv \\<in> map_to_set (rbt_lookup r);\n        kv'\n        \\<in> map_to_set [k \\<mapsto> v] \\<union>\n              map_to_set (rbt_lookup l)\\<rbrakk>\n       \\<Longrightarrow> fst kv' < fst kv", "from pre is_sort_t"], ["proof (chain)\npicking this:\n  kv1 \\<in> map_to_set (rbt_lookup r)\n  kv2 \\<in> map_to_set [k \\<mapsto> v] \\<union> map_to_set (rbt_lookup l)\n  rbt_sorted (Branch c l k v r)", "show \"fst kv1 > fst kv2\""], ["proof (prove)\nusing this:\n  kv1 \\<in> map_to_set (rbt_lookup r)\n  kv2 \\<in> map_to_set [k \\<mapsto> v] \\<union> map_to_set (rbt_lookup l)\n  rbt_sorted (Branch c l k v r)\n\ngoal (1 subgoal):\n 1. fst kv2 < fst kv1", "apply (simp add: map_to_set_lookup_entries split: prod.splits)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>(k1, v1) \\<in> set (RBT_Impl.entries r);\n     k2 = k \\<and> v2 = v \\<or> (k2, v2) \\<in> set (RBT_Impl.entries l);\n     l |\\<guillemotleft> k \\<and>\n     k \\<guillemotleft>| r \\<and> rbt_sorted l \\<and> rbt_sorted r\\<rbrakk>\n    \\<Longrightarrow> k2 < k1", "by (metis (mono_tags) entry_in_tree_keys neq_iff option.simps(3) \n        ord.rbt_greater_prop ord.rbt_lookup_rbt_less rbt_less_trans \n        rbt_lookup_in_tree)"], ["proof (state)\nthis:\n  fst kv2 < fst kv1\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  set_iterator_map_rev_linord (it (Branch c l k v r))\n   (map_to_set (rbt_lookup r) \\<union>\n    (map_to_set [k \\<mapsto> v] \\<union> map_to_set (rbt_lookup l)))\n\ngoal (1 subgoal):\n 1. \\<And>x1 t1 x3 x4 t2.\n       \\<lbrakk>rbt_sorted t1 \\<Longrightarrow>\n                map_iterator_rev_linord (it t1) (rbt_lookup t1);\n        rbt_sorted t2 \\<Longrightarrow>\n        map_iterator_rev_linord (it t2) (rbt_lookup t2);\n        rbt_sorted (Branch x1 t1 x3 x4 t2)\\<rbrakk>\n       \\<Longrightarrow> map_iterator_rev_linord\n                          (it (Branch x1 t1 x3 x4 t2))\n                          (rbt_lookup (Branch x1 t1 x3 x4 t2))", "from is_sort_t"], ["proof (chain)\npicking this:\n  rbt_sorted (Branch c l k v r)", "have map_eq: \"map_to_set (rbt_lookup r) \n    \\<union> (map_to_set [k \\<mapsto> v] \\<union> map_to_set (rbt_lookup l)) =\n        map_to_set (rbt_lookup (Branch c l k v r))\""], ["proof (prove)\nusing this:\n  rbt_sorted (Branch c l k v r)\n\ngoal (1 subgoal):\n 1. map_to_set (rbt_lookup r) \\<union>\n    (map_to_set [k \\<mapsto> v] \\<union> map_to_set (rbt_lookup l)) =\n    map_to_set (rbt_lookup (Branch c l k v r))", "by (auto simp add: set_eq_iff map_to_set_lookup_entries)"], ["proof (state)\nthis:\n  map_to_set (rbt_lookup r) \\<union>\n  (map_to_set [k \\<mapsto> v] \\<union> map_to_set (rbt_lookup l)) =\n  map_to_set (rbt_lookup (Branch c l k v r))\n\ngoal (1 subgoal):\n 1. \\<And>x1 t1 x3 x4 t2.\n       \\<lbrakk>rbt_sorted t1 \\<Longrightarrow>\n                map_iterator_rev_linord (it t1) (rbt_lookup t1);\n        rbt_sorted t2 \\<Longrightarrow>\n        map_iterator_rev_linord (it t2) (rbt_lookup t2);\n        rbt_sorted (Branch x1 t1 x3 x4 t2)\\<rbrakk>\n       \\<Longrightarrow> map_iterator_rev_linord\n                          (it (Branch x1 t1 x3 x4 t2))\n                          (rbt_lookup (Branch x1 t1 x3 x4 t2))", "from r_kv_l_it[unfolded map_eq]"], ["proof (chain)\npicking this:\n  map_iterator_rev_linord (it (Branch c l k v r))\n   (rbt_lookup (Branch c l k v r))", "show ?case"], ["proof (prove)\nusing this:\n  map_iterator_rev_linord (it (Branch c l k v r))\n   (rbt_lookup (Branch c l k v r))\n\ngoal (1 subgoal):\n 1. map_iterator_rev_linord (it (Branch c l k v r))\n     (rbt_lookup (Branch c l k v r))", "."], ["proof (state)\nthis:\n  map_iterator_rev_linord (it (Branch c l k v r))\n   (rbt_lookup (Branch c l k v r))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma pi_rm[icf_proper_iteratorI]: \n  \"proper_it (RBT_add.rm_iterateoi t) (RBT_add.rm_iterateoi t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. proper_it (rm_iterateoi t) (rm_iterateoi t)", "by (induct t) (simp_all add: rm_iterateoi_alt_def icf_proper_iteratorI)"], ["", "lemma pi_rm_rev[icf_proper_iteratorI]: \n  \"proper_it (RBT_add.rm_reverse_iterateoi t) (RBT_add.rm_reverse_iterateoi t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. proper_it (rm_reverse_iterateoi t) (rm_reverse_iterateoi t)", "by (induct t) (simp_all add: rm_reverse_iterateoi_alt_def \n    icf_proper_iteratorI)"], ["", "primrec bheight_aux :: \"('a,'b) RBT_Impl.rbt \\<Rightarrow> nat \\<Rightarrow> nat\"\nwhere\n  \"\\<And>acc. bheight_aux RBT_Impl.Empty acc = acc\"\n| \"\\<And>acc. bheight_aux (RBT_Impl.Branch c lt k v rt) acc = \n     bheight_aux lt (case c of RBT_Impl.B \\<Rightarrow> Suc acc | RBT_Impl.R \\<Rightarrow> acc)\""], ["", "lemma bheight_aux_eq: \"bheight_aux t a = bheight t + a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. bheight_aux t a = bheight t + a", "by (induct t arbitrary: a) (auto split: RBT_Impl.color.split)"], ["", "definition [code_unfold]: \"rbt_bheight t \\<equiv> bheight_aux t 0\""], ["", "lemma \"rbt_bheight t = bheight t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rbt_bheight t = bheight t", "unfolding rbt_bheight_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. bheight_aux t 0 = bheight t", "by (simp add: bheight_aux_eq)"], ["", "(*definition \"black_height t \\<equiv> rbt_bheight (RBT.impl_of t)\"*)"], ["", "end"]]}