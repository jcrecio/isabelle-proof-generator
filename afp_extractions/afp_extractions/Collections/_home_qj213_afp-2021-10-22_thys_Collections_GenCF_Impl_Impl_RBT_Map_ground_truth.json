{"file_name": "/home/qj213/afp-2021-10-22/thys/Collections/GenCF/Impl/Impl_RBT_Map.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Collections", "problem_names": ["lemma param_color[param]:\n    \"(color.R,color.R)\\<in>color_rel\"\n    \"(color.B,color.B)\\<in>color_rel\"\n    \"(case_color,case_color)\\<in>R \\<rightarrow> R \\<rightarrow> color_rel \\<rightarrow> R\"", "lemma rbt_rel_aux_fold: \"rbt_rel_aux Ra Rb \\<equiv> \\<langle>Ra,Rb\\<rangle>rbt_rel\"", "lemmas rbt_rel_intros = rbt_rel_aux.intros[unfolded rbt_rel_aux_fold]", "lemmas rbt_rel_cases = rbt_rel_aux.cases[unfolded rbt_rel_aux_fold]", "lemmas rbt_rel_induct[induct set] \n    = rbt_rel_aux.induct[unfolded rbt_rel_aux_fold]", "lemmas rbt_rel_elims = rbt_rel_aux_elims[unfolded rbt_rel_aux_fold]", "lemma param_rbt1[param]: \n    \"(rbt.Empty,rbt.Empty) \\<in> \\<langle>Ra,Rb\\<rangle>rbt_rel\"\n    \"(rbt.Branch,rbt.Branch) \\<in> \n      color_rel \\<rightarrow> \\<langle>Ra,Rb\\<rangle>rbt_rel \\<rightarrow> Ra \\<rightarrow> Rb \\<rightarrow> \\<langle>Ra,Rb\\<rangle>rbt_rel \\<rightarrow> \\<langle>Ra,Rb\\<rangle>rbt_rel\"", "lemma param_case_rbt[param]:\n    \"(case_rbt,case_rbt) \\<in> \n      Ra \\<rightarrow> (color_rel \\<rightarrow> \\<langle>Rb,Rc\\<rangle>rbt_rel \\<rightarrow> Rb \\<rightarrow> Rc \\<rightarrow> \\<langle>Rb,Rc\\<rangle>rbt_rel \\<rightarrow> Ra) \n        \\<rightarrow> \\<langle>Rb,Rc\\<rangle>rbt_rel \\<rightarrow> Ra\"", "lemma param_rec_rbt[param]: \"(rec_rbt, rec_rbt) \\<in> \n    Ra \\<rightarrow> (color_rel \\<rightarrow> \\<langle>Rb,Rc\\<rangle>rbt_rel \\<rightarrow> Rb \\<rightarrow> Rc \\<rightarrow> \\<langle>Rb,Rc\\<rangle>rbt_rel\n     \\<rightarrow> Ra \\<rightarrow> Ra \\<rightarrow> Ra) \\<rightarrow> \\<langle>Rb,Rc\\<rangle>rbt_rel \\<rightarrow> Ra\"", "lemma param_paint[param]: \n    \"(paint,paint)\\<in>color_rel \\<rightarrow> \\<langle>Ra,Rb\\<rangle>rbt_rel \\<rightarrow> \\<langle>Ra,Rb\\<rangle>rbt_rel\"", "lemma param_balance[param]: \n    shows \"(balance,balance) \\<in> \n      \\<langle>Ra,Rb\\<rangle>rbt_rel \\<rightarrow> Ra \\<rightarrow> Rb \\<rightarrow> \\<langle>Ra,Rb\\<rangle>rbt_rel \\<rightarrow> \\<langle>Ra,Rb\\<rangle>rbt_rel\"", "lemma param_rbt_ins[param]:\n    fixes less\n    assumes param_less[param]: \"(less,less') \\<in> Ra \\<rightarrow> Ra \\<rightarrow> Id\"\n    shows \"(ord.rbt_ins less,ord.rbt_ins less') \\<in> \n             (Ra\\<rightarrow>Rb\\<rightarrow>Rb\\<rightarrow>Rb) \\<rightarrow> Ra \\<rightarrow> Rb \\<rightarrow> \\<langle>Ra,Rb\\<rangle>rbt_rel \\<rightarrow> \\<langle>Ra,Rb\\<rangle>rbt_rel\"", "lemma param_rbt_insert[param]:\n    fixes less\n    assumes param_less[param]: \"(less,less') \\<in> Ra \\<rightarrow> Ra \\<rightarrow> Id\"\n    shows \"(ord.rbt_insert less,ord.rbt_insert less') \\<in> \n      Ra \\<rightarrow> Rb \\<rightarrow> \\<langle>Ra,Rb\\<rangle>rbt_rel \\<rightarrow> \\<langle>Ra,Rb\\<rangle>rbt_rel\"", "lemma param_rbt_lookup[param]:\n    fixes less\n    assumes param_less[param]: \"(less,less') \\<in> Ra \\<rightarrow> Ra \\<rightarrow> Id\"\n    shows \"(ord.rbt_lookup less,ord.rbt_lookup less') \\<in> \n             \\<langle>Ra,Rb\\<rangle>rbt_rel \\<rightarrow> Ra \\<rightarrow> \\<langle>Rb\\<rangle>option_rel\"", "lemma param_balance_left[param]: \n    \"(balance_left, balance_left) \\<in> \n      \\<langle>Ra,Rb\\<rangle>rbt_rel \\<rightarrow> Ra \\<rightarrow> Rb \\<rightarrow> \\<langle>Ra,Rb\\<rangle>rbt_rel \\<rightarrow> \\<langle>Ra,Rb\\<rangle>rbt_rel\"", "lemma param_balance_right[param]: \n    \"(balance_right, balance_right) \\<in> \n      \\<langle>Ra,Rb\\<rangle>rbt_rel \\<rightarrow> Ra \\<rightarrow> Rb \\<rightarrow> \\<langle>Ra,Rb\\<rangle>rbt_rel \\<rightarrow> \\<langle>Ra,Rb\\<rangle>rbt_rel\"", "lemma param_combine[param]:\n    \"(combine,combine)\\<in>\\<langle>Ra,Rb\\<rangle>rbt_rel \\<rightarrow> \\<langle>Ra,Rb\\<rangle>rbt_rel \\<rightarrow> \\<langle>Ra,Rb\\<rangle>rbt_rel\"", "lemma ih_aux1: \"\\<lbrakk> (a',b)\\<in>R; a'=a \\<rbrakk> \\<Longrightarrow> (a,b)\\<in>R\"", "lemma is_eq: \"a=b \\<Longrightarrow> a=b\"", "lemma param_rbt_del_aux:\n    fixes br\n    fixes less\n    assumes param_less[param]: \"(less,less') \\<in> Ra \\<rightarrow> Ra \\<rightarrow> Id\"\n    shows\n    \"\\<lbrakk> (ak1,ak1')\\<in>Ra; (al,al')\\<in>\\<langle>Ra,Rb\\<rangle>rbt_rel; (ak,ak')\\<in>Ra;\n      (av,av')\\<in>Rb; (ar,ar')\\<in>\\<langle>Ra,Rb\\<rangle>rbt_rel \n    \\<rbrakk> \\<Longrightarrow> (ord.rbt_del_from_left less ak1 al ak av ar, \n      ord.rbt_del_from_left less' ak1' al' ak' av' ar') \n    \\<in> \\<langle>Ra,Rb\\<rangle>rbt_rel\"\n    \"\\<lbrakk> (bk1,bk1')\\<in>Ra; (bl,bl')\\<in>\\<langle>Ra,Rb\\<rangle>rbt_rel; (bk,bk')\\<in>Ra;\n      (bv,bv')\\<in>Rb; (br,br')\\<in>\\<langle>Ra,Rb\\<rangle>rbt_rel \n    \\<rbrakk> \\<Longrightarrow> (ord.rbt_del_from_right less bk1 bl bk bv br, \n      ord.rbt_del_from_right less' bk1' bl' bk' bv' br') \n    \\<in> \\<langle>Ra,Rb\\<rangle>rbt_rel\"\n    \"\\<lbrakk> (ck,ck')\\<in>Ra; (ct,ct')\\<in>\\<langle>Ra,Rb\\<rangle>rbt_rel \\<rbrakk> \n      \\<Longrightarrow> (ord.rbt_del less ck ct, ord.rbt_del less' ck' ct') \\<in> \\<langle>Ra,Rb\\<rangle>rbt_rel\"", "lemma param_rbt_del[param]:\n    fixes less\n    assumes param_less: \"(less,less') \\<in> Ra \\<rightarrow> Ra \\<rightarrow> Id\"\n    shows\n    \"(ord.rbt_del_from_left less, ord.rbt_del_from_left less') \\<in> \n      Ra \\<rightarrow> \\<langle>Ra,Rb\\<rangle>rbt_rel \\<rightarrow> Ra \\<rightarrow> Rb \\<rightarrow> \\<langle>Ra,Rb\\<rangle>rbt_rel \\<rightarrow> \\<langle>Ra,Rb\\<rangle>rbt_rel\"\n    \"(ord.rbt_del_from_right less, ord.rbt_del_from_right less') \\<in>\n      Ra \\<rightarrow> \\<langle>Ra,Rb\\<rangle>rbt_rel \\<rightarrow> Ra \\<rightarrow> Rb \\<rightarrow> \\<langle>Ra,Rb\\<rangle>rbt_rel \\<rightarrow> \\<langle>Ra,Rb\\<rangle>rbt_rel\"\n    \"(ord.rbt_del less,ord.rbt_del less') \\<in> \n      Ra \\<rightarrow> \\<langle>Ra,Rb\\<rangle>rbt_rel \\<rightarrow> \\<langle>Ra,Rb\\<rangle>rbt_rel\"", "lemma param_rbt_delete[param]:\n    fixes less\n    assumes param_less[param]: \"(less,less') \\<in> Ra \\<rightarrow> Ra \\<rightarrow> Id\"\n    shows \"(ord.rbt_delete less, ord.rbt_delete less') \n      \\<in> Ra \\<rightarrow> \\<langle>Ra,Rb\\<rangle>rbt_rel \\<rightarrow> \\<langle>Ra,Rb\\<rangle>rbt_rel\"", "lemma param_compare[param]:\n    \"(RBT_Impl.LT,RBT_Impl.LT)\\<in>compare_rel\"\n    \"(RBT_Impl.GT,RBT_Impl.GT)\\<in>compare_rel\"\n    \"(RBT_Impl.EQ,RBT_Impl.EQ)\\<in>compare_rel\"\n    \"(RBT_Impl.case_compare,RBT_Impl.case_compare)\\<in>R\\<rightarrow>R\\<rightarrow>R\\<rightarrow>compare_rel\\<rightarrow>R\"", "lemma param_rbtreeify_aux[param]:\n    \"\\<lbrakk>n\\<le>length kvs; (n,n')\\<in>nat_rel; (kvs,kvs')\\<in>\\<langle>\\<langle>Ra,Rb\\<rangle>prod_rel\\<rangle>list_rel\\<rbrakk> \n    \\<Longrightarrow> (rbtreeify_f n kvs,rbtreeify_f n' kvs')\n      \\<in> \\<langle>\\<langle>Ra,Rb\\<rangle>rbt_rel, \\<langle>\\<langle>Ra,Rb\\<rangle>prod_rel\\<rangle>list_rel\\<rangle>prod_rel\"\n    \"\\<lbrakk>n\\<le>Suc (length kvs); (n,n')\\<in>nat_rel; (kvs,kvs')\\<in>\\<langle>\\<langle>Ra,Rb\\<rangle>prod_rel\\<rangle>list_rel\\<rbrakk>\n    \\<Longrightarrow> (rbtreeify_g n kvs,rbtreeify_g n' kvs')\n      \\<in> \\<langle>\\<langle>Ra,Rb\\<rangle>rbt_rel, \\<langle>\\<langle>Ra,Rb\\<rangle>prod_rel\\<rangle>list_rel\\<rangle>prod_rel\"", "lemma param_rbtreeify[param]:\n    \"(rbtreeify, rbtreeify) \\<in> \\<langle>\\<langle>Ra,Rb\\<rangle>prod_rel\\<rangle>list_rel \\<rightarrow> \\<langle>Ra,Rb\\<rangle>rbt_rel\"", "lemma param_sunion_with[param]:\n    fixes less\n    shows \"\\<lbrakk> (less,less') \\<in> Ra \\<rightarrow> Ra \\<rightarrow> Id; \n      (f,f')\\<in>(Ra\\<rightarrow>Rb\\<rightarrow>Rb\\<rightarrow>Rb); (a,a')\\<in>\\<langle>\\<langle>Ra,Rb\\<rangle>prod_rel\\<rangle>list_rel;\n      (b,b')\\<in>\\<langle>\\<langle>Ra,Rb\\<rangle>prod_rel\\<rangle>list_rel \\<rbrakk> \n    \\<Longrightarrow> (ord.sunion_with less f a b, ord.sunion_with less' f' a' b') \\<in> \n      \\<langle>\\<langle>Ra,Rb\\<rangle>prod_rel\\<rangle>list_rel\"", "lemma skip_red_alt:\n    \"RBT_Impl.skip_red t = (case t of \n      (Branch color.R l k v r) \\<Rightarrow> l\n    | _ \\<Rightarrow> t)\"", "lemma skip_red_size: \"size (RBT_Impl.skip_red b) \\<le> size b\"", "lemma skip_black_size: \"size (RBT_Impl.skip_black b) \\<le> size b\"", "lemmas [simp del] = compare_height.simps", "lemma compare_height_alt: \n    \"RBT_Impl.compare_height sx s t tx = compare_height sx s t tx\"", "lemma param_skip_red[param]: \"(RBT_Impl.skip_red,RBT_Impl.skip_red) \n    \\<in> \\<langle>Rk,Rv\\<rangle>rbt_rel \\<rightarrow> \\<langle>Rk,Rv\\<rangle>rbt_rel\"", "lemma param_skip_black[param]: \"(RBT_Impl.skip_black,RBT_Impl.skip_black) \n    \\<in> \\<langle>Rk,Rv\\<rangle>rbt_rel \\<rightarrow> \\<langle>Rk,Rv\\<rangle>rbt_rel\"", "lemma param_case_rbt':\n    assumes \"(t,t')\\<in>\\<langle>Rk,Rv\\<rangle>rbt_rel\"\n    assumes \"\\<lbrakk>t=rbt.Empty; t'=rbt.Empty\\<rbrakk> \\<Longrightarrow> (fl,fl')\\<in>R\"\n    assumes \"\\<And>c l k v r c' l' k' v' r'. \\<lbrakk> \n      t = Branch c l k v r; t' = Branch c' l' k' v' r'; \n      (c,c')\\<in>color_rel;\n      (l,l')\\<in>\\<langle>Rk,Rv\\<rangle>rbt_rel; (k,k')\\<in>Rk; (v,v')\\<in>Rv; (r,r')\\<in>\\<langle>Rk,Rv\\<rangle>rbt_rel\n    \\<rbrakk> \\<Longrightarrow> (fb c l k v r, fb' c' l' k' v' r') \\<in> R\"\n    shows \"(case_rbt fl fb t, case_rbt fl' fb' t') \\<in> R\"", "lemma compare_height_param_aux[param]:\n    \"\\<lbrakk> (sx,sx')\\<in>\\<langle>Rk,Rv\\<rangle>rbt_rel; (s,s')\\<in>\\<langle>Rk,Rv\\<rangle>rbt_rel;\n       (t,t')\\<in>\\<langle>Rk,Rv\\<rangle>rbt_rel; (tx,tx')\\<in>\\<langle>Rk,Rv\\<rangle>rbt_rel \\<rbrakk>\n    \\<Longrightarrow> (compare_height sx s t tx, compare_height sx' s' t' tx') \\<in> compare_rel\"", "lemma compare_height_param[param]:\n    \"(RBT_Impl.compare_height,RBT_Impl.compare_height) \\<in> \n      \\<langle>Rk,Rv\\<rangle>rbt_rel \\<rightarrow> \\<langle>Rk,Rv\\<rangle>rbt_rel \\<rightarrow> \\<langle>Rk,Rv\\<rangle>rbt_rel \\<rightarrow> \\<langle>Rk,Rv\\<rangle>rbt_rel \n      \\<rightarrow> compare_rel\"", "lemma param_rbt_union[param]:\n    fixes less\n    assumes param_less[param]: \"(less,less') \\<in> Ra \\<rightarrow> Ra \\<rightarrow> Id\"\n    shows \"(ord.rbt_union less, ord.rbt_union less') \n      \\<in> \\<langle>Ra,Rb\\<rangle>rbt_rel \\<rightarrow> \\<langle>Ra,Rb\\<rangle>rbt_rel \\<rightarrow> \\<langle>Ra,Rb\\<rangle>rbt_rel\"", "lemma param_rm_iterateoi[param]: \"(rm_iterateoi,rm_iterateoi) \n  \\<in> \\<langle>Ra,Rb\\<rangle>rbt_rel \\<rightarrow> (Rc\\<rightarrow>Id) \\<rightarrow> (\\<langle>Ra,Rb\\<rangle>prod_rel \\<rightarrow> Rc \\<rightarrow> Rc) \\<rightarrow> Rc \\<rightarrow> Rc\"", "lemma param_rm_reverse_iterateoi[param]: \n  \"(rm_reverse_iterateoi,rm_reverse_iterateoi) \n    \\<in> \\<langle>Ra,Rb\\<rangle>rbt_rel \\<rightarrow> (Rc\\<rightarrow>Id) \\<rightarrow> (\\<langle>Ra,Rb\\<rangle>prod_rel \\<rightarrow> Rc \\<rightarrow> Rc) \\<rightarrow> Rc \\<rightarrow> Rc\"", "lemma param_color_eq[param]: \n  \"((=), (=))\\<in>color_rel\\<rightarrow>color_rel\\<rightarrow>Id\"", "lemma param_color_of[param]: \n  \"(color_of, color_of)\\<in>\\<langle>Rk,Rv\\<rangle>rbt_rel\\<rightarrow>color_rel\"", "lemma param_bheight[param]:\n  \"(bheight,bheight)\\<in>\\<langle>Rk,Rv\\<rangle>rbt_rel\\<rightarrow>Id\"", "lemma inv1_param[param]: \"(inv1,inv1)\\<in>\\<langle>Rk,Rv\\<rangle>rbt_rel\\<rightarrow>Id\"", "lemma inv2_param[param]: \"(inv2,inv2)\\<in>\\<langle>Rk,Rv\\<rangle>rbt_rel\\<rightarrow>Id\"", "lemma rbt_less_param[param]: \"(ord.rbt_less,ord.rbt_less) \\<in> \n  (Rk\\<rightarrow>Rk\\<rightarrow>Id) \\<rightarrow> Rk \\<rightarrow> \\<langle>Rk,Rv\\<rangle>rbt_rel \\<rightarrow> Id\"", "lemma rbt_greater_param[param]: \"(ord.rbt_greater,ord.rbt_greater) \\<in> \n  (Rk\\<rightarrow>Rk\\<rightarrow>Id) \\<rightarrow> Rk \\<rightarrow> \\<langle>Rk,Rv\\<rangle>rbt_rel \\<rightarrow> Id\"", "lemma rbt_sorted_param[param]:\n  \"(ord.rbt_sorted,ord.rbt_sorted)\\<in>(Rk\\<rightarrow>Rk\\<rightarrow>Id)\\<rightarrow>\\<langle>Rk,Rv\\<rangle>rbt_rel\\<rightarrow>Id\"", "lemma is_rbt_param[param]: \"(ord.is_rbt,ord.is_rbt) \\<in> \n  (Rk\\<rightarrow>Rk\\<rightarrow>Id) \\<rightarrow> \\<langle>Rk,Rv\\<rangle>rbt_rel \\<rightarrow> Id\"", "lemma (in linorder) rbt_map_impl:\n  \"(rbt.Empty,Map.empty) \\<in> rbt_map_rel' (<)\"\n  \"(rbt_insert,\\<lambda>k v m. m(k\\<mapsto>v)) \n    \\<in> Id \\<rightarrow> Id \\<rightarrow> rbt_map_rel' (<) \\<rightarrow> rbt_map_rel' (<)\"\n  \"(rbt_lookup,\\<lambda>m k. m k) \\<in> rbt_map_rel' (<) \\<rightarrow> Id \\<rightarrow> \\<langle>Id\\<rangle>option_rel\"\n  \"(rbt_delete,\\<lambda>k m. m|`(-{k})) \\<in> Id \\<rightarrow> rbt_map_rel' (<) \\<rightarrow> rbt_map_rel' (<)\"\n  \"(rbt_union,(++)) \n    \\<in> rbt_map_rel' (<) \\<rightarrow> rbt_map_rel' (<) \\<rightarrow> rbt_map_rel' (<)\"", "lemma sorted_wrt_keys_true[simp]: \"sorted_wrt (\\<lambda>(_,_) (_,_). True) l\"", "lemma rbt_map_rel_def: \n  \"\\<langle>Rk,Rv\\<rangle>rbt_map_rel lt \\<equiv> \\<langle>Rk,Rv\\<rangle>rbt_rel O rbt_map_rel' lt\"", "lemma (in linorder) autoref_gen_rbt_empty: \n  \"(rbt.Empty,Map.empty) \\<in> \\<langle>Rk,Rv\\<rangle>rbt_map_rel (<)\"", "lemma (in linorder) autoref_gen_rbt_insert:\n  fixes less_impl\n  assumes param_less: \"(less_impl,(<)) \\<in> Rk \\<rightarrow> Rk \\<rightarrow> Id\"\n  shows \"(ord.rbt_insert less_impl,\\<lambda>k v m. m(k\\<mapsto>v)) \\<in> \n    Rk \\<rightarrow> Rv \\<rightarrow> \\<langle>Rk,Rv\\<rangle>rbt_map_rel (<) \\<rightarrow> \\<langle>Rk,Rv\\<rangle>rbt_map_rel (<)\"", "lemma (in linorder) autoref_gen_rbt_lookup:\n  fixes less_impl\n  assumes param_less: \"(less_impl,(<)) \\<in> Rk \\<rightarrow> Rk \\<rightarrow> Id\"\n  shows \"(ord.rbt_lookup less_impl, \\<lambda>m k. m k) \\<in> \n    \\<langle>Rk,Rv\\<rangle>rbt_map_rel (<) \\<rightarrow> Rk \\<rightarrow> \\<langle>Rv\\<rangle>option_rel\"", "lemma (in linorder) autoref_gen_rbt_delete:\n  fixes less_impl\n  assumes param_less: \"(less_impl,(<)) \\<in> Rk \\<rightarrow> Rk \\<rightarrow> Id\"\n  shows \"(ord.rbt_delete less_impl, \\<lambda>k m. m |`(-{k})) \\<in> \n    Rk \\<rightarrow> \\<langle>Rk,Rv\\<rangle>rbt_map_rel (<) \\<rightarrow> \\<langle>Rk,Rv\\<rangle>rbt_map_rel (<)\"", "lemma (in linorder) autoref_gen_rbt_union:\n  fixes less_impl\n  assumes param_less: \"(less_impl,(<)) \\<in> Rk \\<rightarrow> Rk \\<rightarrow> Id\"\n  shows \"(ord.rbt_union less_impl, (++)) \\<in> \n    \\<langle>Rk,Rv\\<rangle>rbt_map_rel (<) \\<rightarrow> \\<langle>Rk,Rv\\<rangle>rbt_map_rel (<) \\<rightarrow> \\<langle>Rk,Rv\\<rangle>rbt_map_rel (<)\"", "lemma (in linorder) rbt_to_list_correct: \n  assumes SORTED: \"rbt_sorted t\"\n  shows \"rbt_to_list t = sorted_list_of_map (rbt_lookup t)\" (is \"?tl = _\")", "lemma (in linorder) param_rbt_sorted_list_of_map[param]:\n  shows \"(rbt_to_list, sorted_list_of_map) \\<in> \n  \\<langle>Rk, Rv\\<rangle>rbt_map_rel (<) \\<rightarrow> \\<langle>\\<langle>Rk,Rv\\<rangle>prod_rel\\<rangle>list_rel\"", "lemma param_rbt_sorted_list_of_map'[param]:\n  assumes ELO: \"eq_linorder cmp'\"\n  shows \"(rbt_to_list,linorder.sorted_list_of_map (comp2le cmp')) \\<in> \n    \\<langle>Rk,Rv\\<rangle>rbt_map_rel (comp2lt cmp') \\<rightarrow> \\<langle>\\<langle>Rk,Rv\\<rangle>prod_rel\\<rangle>list_rel\"", "lemma rbt_linorder_impl:\n  assumes ELO: \"eq_linorder cmp'\"\n  assumes [param]: \"(cmp,cmp')\\<in>Rk\\<rightarrow>Rk\\<rightarrow>Id\"\n  shows \n  \"(cmp_rbt cmp, cmp_map cmp') \\<in> \n    (Rv\\<rightarrow>Rv\\<rightarrow>Id) \n    \\<rightarrow> \\<langle>Rk,Rv\\<rangle>rbt_map_rel (comp2lt cmp') \n    \\<rightarrow> \\<langle>Rk,Rv\\<rangle>rbt_map_rel (comp2lt cmp') \\<rightarrow> Id\"", "lemma color_rel_sv[relator_props]: \"single_valued color_rel\"", "lemma rbt_rel_sv_aux:\n  assumes SK: \"single_valued Rk\" \n  assumes SV: \"single_valued Rv\"\n  assumes I1: \"(a,b)\\<in>(\\<langle>Rk, Rv\\<rangle>rbt_rel)\"\n  assumes I2: \"(a,c)\\<in>(\\<langle>Rk, Rv\\<rangle>rbt_rel)\"\n  shows \"b=c\"", "lemma rbt_rel_sv[relator_props]:\n  assumes SK: \"single_valued Rk\" \n  assumes SV: \"single_valued Rv\"\n  shows \"single_valued (\\<langle>Rk, Rv\\<rangle>rbt_rel)\"", "lemma rbt_map_rel_sv[relator_props]:\n  \"\\<lbrakk>single_valued Rk; single_valued Rv\\<rbrakk> \n  \\<Longrightarrow> single_valued (\\<langle>Rk,Rv\\<rangle>rbt_map_rel lt)\"", "lemmas [autoref_rel_intf] = REL_INTFI[of \"rbt_map_rel x\" i_map] for x", "lemma autoref_rbt_empty[autoref_rules]:\n  assumes ELO: \"SIDE_GEN_ALGO (eq_linorder cmp')\"\n  assumes [simplified,param]: \"GEN_OP cmp cmp' (Rk\\<rightarrow>Rk\\<rightarrow>Id)\"\n  shows \"(rbt.Empty,op_map_empty) \\<in> \n    \\<langle>Rk,Rv\\<rangle>rbt_map_rel (comp2lt cmp')\"", "lemma autoref_rbt_update[autoref_rules]:\n  assumes ELO: \"SIDE_GEN_ALGO (eq_linorder cmp')\"\n  assumes [simplified,param]: \"GEN_OP cmp cmp' (Rk\\<rightarrow>Rk\\<rightarrow>Id)\"\n  shows \"(ord.rbt_insert (comp2lt cmp),op_map_update) \\<in> \n    Rk\\<rightarrow>Rv\\<rightarrow>\\<langle>Rk,Rv\\<rangle>rbt_map_rel (comp2lt cmp') \n    \\<rightarrow> \\<langle>Rk,Rv\\<rangle>rbt_map_rel (comp2lt cmp')\"", "lemma autoref_rbt_lookup[autoref_rules]:\n  assumes ELO: \"SIDE_GEN_ALGO (eq_linorder cmp')\"\n  assumes [simplified,param]: \"GEN_OP cmp cmp' (Rk\\<rightarrow>Rk\\<rightarrow>Id)\"\n  shows \"(\\<lambda>k t. ord.rbt_lookup (comp2lt cmp) t k, op_map_lookup) \\<in> \n    Rk \\<rightarrow> \\<langle>Rk,Rv\\<rangle>rbt_map_rel (comp2lt cmp') \\<rightarrow> \\<langle>Rv\\<rangle>option_rel\"", "lemma autoref_rbt_delete[autoref_rules]:\n  assumes ELO: \"SIDE_GEN_ALGO (eq_linorder cmp')\"\n  assumes [simplified,param]: \"GEN_OP cmp cmp' (Rk\\<rightarrow>Rk\\<rightarrow>Id)\"\n  shows \"(ord.rbt_delete (comp2lt cmp),op_map_delete) \\<in>\n    Rk \\<rightarrow> \\<langle>Rk,Rv\\<rangle>rbt_map_rel (comp2lt cmp') \n       \\<rightarrow> \\<langle>Rk,Rv\\<rangle>rbt_map_rel (comp2lt cmp')\"", "lemma autoref_rbt_union[autoref_rules]:\n  assumes ELO: \"SIDE_GEN_ALGO (eq_linorder cmp')\"\n  assumes [simplified,param]: \"GEN_OP cmp cmp' (Rk\\<rightarrow>Rk\\<rightarrow>Id)\"\n  shows \"(ord.rbt_union (comp2lt cmp),(++)) \\<in>\n    \\<langle>Rk,Rv\\<rangle>rbt_map_rel (comp2lt cmp') \\<rightarrow> \\<langle>Rk,Rv\\<rangle>rbt_map_rel (comp2lt cmp')\n       \\<rightarrow> \\<langle>Rk,Rv\\<rangle>rbt_map_rel (comp2lt cmp')\"", "lemma autoref_rbt_is_iterator[autoref_ga_rules]: \n  assumes ELO: \"GEN_ALGO_tag (eq_linorder cmp')\"\n  shows \"is_map_to_sorted_list (comp2le cmp') Rk Rv (rbt_map_rel (comp2lt cmp'))\n    rbt_to_list\"", "lemmas [autoref_ga_rules] = class_to_eq_linorder", "lemma (in linorder) dflt_cmp_id:\n  \"(dflt_cmp (\\<le>) (<), dflt_cmp (\\<le>) (<))\\<in>Id\\<rightarrow>Id\\<rightarrow>Id\"", "lemmas [autoref_rules] = dflt_cmp_id", "lemma rbt_linorder_autoref[autoref_rules]:\n  assumes \"SIDE_GEN_ALGO (eq_linorder cmpk')\"\n  assumes \"SIDE_GEN_ALGO (eq_linorder cmpv')\"\n  assumes \"GEN_OP cmpk cmpk' (Rk\\<rightarrow>Rk\\<rightarrow>Id)\"\n  assumes \"GEN_OP cmpv cmpv' (Rv\\<rightarrow>Rv\\<rightarrow>Id)\"\n  shows \n  \"(cmp_rbt cmpk cmpv, cmp_map cmpk' cmpv') \\<in> \n       \\<langle>Rk,Rv\\<rangle>rbt_map_rel (comp2lt cmpk') \n    \\<rightarrow> \\<langle>Rk,Rv\\<rangle>rbt_map_rel (comp2lt cmpk') \\<rightarrow> Id\"", "lemma map_linorder_impl[autoref_ga_rules]:\n  assumes \"GEN_ALGO_tag (eq_linorder cmpk)\"\n  assumes \"GEN_ALGO_tag (eq_linorder cmpv)\"\n  shows \"eq_linorder (cmp_map cmpk cmpv)\"", "lemma set_linorder_impl[autoref_ga_rules]:\n  assumes \"GEN_ALGO_tag (eq_linorder cmpk)\"\n  shows \"eq_linorder (cmp_set cmpk)\"", "lemma (in linorder) rbt_map_rel_finite_aux:\n  \"finite_map_rel (\\<langle>Rk,Rv\\<rangle>rbt_map_rel (<))\"", "lemma rbt_map_rel_finite[relator_props]: \n  assumes ELO: \"GEN_ALGO_tag (eq_linorder cmpk)\"\n  shows \"finite_map_rel (\\<langle>Rk,Rv\\<rangle>rbt_map_rel (comp2lt cmpk))\"", "lemmas [autoref_post_simps] = dflt_cmp_inv2 dflt_cmp_2inv", "lemma [simp,autoref_post_simps]: \"ord.rbt_ins (<) = rbt_ins\"", "lemma [autoref_post_simps]: \"ord.rbt_lookup ((<)::_::linorder\\<Rightarrow>_) = rbt_lookup\"", "lemma [simp,autoref_post_simps]:\n  \"ord.rbt_insert_with_key (<) = rbt_insert_with_key\"\n  \"ord.rbt_insert (<) = rbt_insert\"", "lemma autoref_comp2eq[autoref_rules_raw]:\n  assumes PRIO_TAG_GEN_ALGO\n  assumes ELC: \"SIDE_GEN_ALGO (eq_linorder cmp')\"\n  assumes [simplified,param]: \"GEN_OP cmp cmp' (R\\<rightarrow>R\\<rightarrow>Id)\"\n  shows \"(comp2eq cmp, (=)) \\<in> R\\<rightarrow>R\\<rightarrow>Id\"", "lemma pi'_rm[icf_proper_iteratorI]: \n  \"proper_it' rm_iterateoi rm_iterateoi\"\n  \"proper_it' rm_reverse_iterateoi rm_reverse_iterateoi\"", "lemmas autoref_rbt_rules = \n  autoref_rbt_empty\n  autoref_rbt_lookup\n  autoref_rbt_update\n  autoref_rbt_delete\n  autoref_rbt_union", "lemmas autoref_rbt_rules_linorder[autoref_rules_raw] = \n  autoref_rbt_rules[where Rk=\"Rk\"] for Rk :: \"(_\\<times>_::linorder) set\""], "translations": [["", "lemma param_color[param]:\n    \"(color.R,color.R)\\<in>color_rel\"\n    \"(color.B,color.B)\\<in>color_rel\"\n    \"(case_color,case_color)\\<in>R \\<rightarrow> R \\<rightarrow> color_rel \\<rightarrow> R\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (color.R, color.R) \\<in> color_rel &&&\n    (color.B, color.B) \\<in> color_rel &&&\n    (case_color, case_color)\n    \\<in> R \\<rightarrow> R \\<rightarrow> color_rel \\<rightarrow> R", "by (auto \n      intro: color_rel.intros\n      elim: color_rel.cases\n      split: color.split)"], ["", "inductive_set rbt_rel_aux for Ra Rb where\n    \"(rbt.Empty,rbt.Empty)\\<in>rbt_rel_aux Ra Rb\"\n  | \"\\<lbrakk> (c,c')\\<in>color_rel; \n       (l,l')\\<in>rbt_rel_aux Ra Rb; (a,a')\\<in>Ra; (b,b')\\<in>Rb; \n       (r,r')\\<in>rbt_rel_aux Ra Rb \\<rbrakk>\n    \\<Longrightarrow> (rbt.Branch c l a b r, rbt.Branch c' l' a' b' r')\\<in>rbt_rel_aux Ra Rb\""], ["", "inductive_cases rbt_rel_aux_elims:  (* Argh! This seems to use \n    the default simpset to simplify the result. If relators are in this \n    simpset, we get an undesired result! *)\n    \"(x,rbt.Empty)\\<in>rbt_rel_aux Ra Rb\"\n    \"(rbt.Empty,x')\\<in>rbt_rel_aux Ra Rb\"\n    \"(rbt.Branch c l a b r,x')\\<in>rbt_rel_aux Ra Rb\"\n    \"(x,rbt.Branch c' l' a' b' r')\\<in>rbt_rel_aux Ra Rb\""], ["", "definition \"rbt_rel \\<equiv> rbt_rel_aux\""], ["", "lemma rbt_rel_aux_fold: \"rbt_rel_aux Ra Rb \\<equiv> \\<langle>Ra,Rb\\<rangle>rbt_rel\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rbt_rel_aux Ra Rb \\<equiv> \\<langle>Ra, Rb\\<rangle>rbt_rel", "by (simp add: rbt_rel_def relAPP_def)"], ["", "lemmas rbt_rel_intros = rbt_rel_aux.intros[unfolded rbt_rel_aux_fold]"], ["", "lemmas rbt_rel_cases = rbt_rel_aux.cases[unfolded rbt_rel_aux_fold]"], ["", "lemmas rbt_rel_induct[induct set] \n    = rbt_rel_aux.induct[unfolded rbt_rel_aux_fold]"], ["", "lemmas rbt_rel_elims = rbt_rel_aux_elims[unfolded rbt_rel_aux_fold]"], ["", "lemma param_rbt1[param]: \n    \"(rbt.Empty,rbt.Empty) \\<in> \\<langle>Ra,Rb\\<rangle>rbt_rel\"\n    \"(rbt.Branch,rbt.Branch) \\<in> \n      color_rel \\<rightarrow> \\<langle>Ra,Rb\\<rangle>rbt_rel \\<rightarrow> Ra \\<rightarrow> Rb \\<rightarrow> \\<langle>Ra,Rb\\<rangle>rbt_rel \\<rightarrow> \\<langle>Ra,Rb\\<rangle>rbt_rel\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (rbt.Empty, rbt.Empty) \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel &&&\n    (Branch, Branch)\n    \\<in> color_rel \\<rightarrow>\n          \\<langle>Ra, Rb\\<rangle>rbt_rel \\<rightarrow>\n          Ra \\<rightarrow>\n          Rb \\<rightarrow>\n          \\<langle>Ra, Rb\\<rangle>rbt_rel \\<rightarrow> \\<langle>Ra,\n          Rb\\<rangle>rbt_rel", "by (auto intro: rbt_rel_intros)"], ["", "lemma param_case_rbt[param]:\n    \"(case_rbt,case_rbt) \\<in> \n      Ra \\<rightarrow> (color_rel \\<rightarrow> \\<langle>Rb,Rc\\<rangle>rbt_rel \\<rightarrow> Rb \\<rightarrow> Rc \\<rightarrow> \\<langle>Rb,Rc\\<rangle>rbt_rel \\<rightarrow> Ra) \n        \\<rightarrow> \\<langle>Rb,Rc\\<rangle>rbt_rel \\<rightarrow> Ra\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (case_rbt, case_rbt)\n    \\<in> Ra \\<rightarrow>\n          (color_rel \\<rightarrow>\n           \\<langle>Rb, Rc\\<rangle>rbt_rel \\<rightarrow>\n           Rb \\<rightarrow>\n           Rc \\<rightarrow>\n           \\<langle>Rb, Rc\\<rangle>rbt_rel \\<rightarrow> Ra) \\<rightarrow>\n          \\<langle>Rb, Rc\\<rangle>rbt_rel \\<rightarrow> Ra", "apply clarsimp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a a' aa a'a ab a'b.\n       \\<lbrakk>(a, a') \\<in> Ra;\n        (aa, a'a)\n        \\<in> color_rel \\<rightarrow>\n              \\<langle>Rb, Rc\\<rangle>rbt_rel \\<rightarrow>\n              Rb \\<rightarrow>\n              Rc \\<rightarrow>\n              \\<langle>Rb, Rc\\<rangle>rbt_rel \\<rightarrow> Ra;\n        (ab, a'b) \\<in> \\<langle>Rb, Rc\\<rangle>rbt_rel\\<rbrakk>\n       \\<Longrightarrow> (case ab of rbt.Empty \\<Rightarrow> a\n                          | Branch x xa xb xc xd \\<Rightarrow>\n                              aa x xa xb xc xd,\n                          case a'b of rbt.Empty \\<Rightarrow> a'\n                          | Branch x xa xb xc xd \\<Rightarrow>\n                              a'a x xa xb xc xd)\n                         \\<in> Ra", "apply (erule rbt_rel_cases)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a a' aa a'a ab a'b.\n       \\<lbrakk>(a, a') \\<in> Ra;\n        (aa, a'a)\n        \\<in> color_rel \\<rightarrow>\n              \\<langle>Rb, Rc\\<rangle>rbt_rel \\<rightarrow>\n              Rb \\<rightarrow>\n              Rc \\<rightarrow>\n              \\<langle>Rb, Rc\\<rangle>rbt_rel \\<rightarrow> Ra;\n        ab = rbt.Empty; a'b = rbt.Empty\\<rbrakk>\n       \\<Longrightarrow> (case ab of rbt.Empty \\<Rightarrow> a\n                          | Branch x xa xb xc xd \\<Rightarrow>\n                              aa x xa xb xc xd,\n                          case a'b of rbt.Empty \\<Rightarrow> a'\n                          | Branch x xa xb xc xd \\<Rightarrow>\n                              a'a x xa xb xc xd)\n                         \\<in> Ra\n 2. \\<And>a a' aa a'a ab a'b c c' l l' ac a'c b b' r r'.\n       \\<lbrakk>(a, a') \\<in> Ra;\n        (aa, a'a)\n        \\<in> color_rel \\<rightarrow>\n              \\<langle>Rb, Rc\\<rangle>rbt_rel \\<rightarrow>\n              Rb \\<rightarrow>\n              Rc \\<rightarrow>\n              \\<langle>Rb, Rc\\<rangle>rbt_rel \\<rightarrow> Ra;\n        ab = Branch c l ac b r; a'b = Branch c' l' a'c b' r';\n        (c, c') \\<in> color_rel;\n        (l, l') \\<in> \\<langle>Rb, Rc\\<rangle>rbt_rel; (ac, a'c) \\<in> Rb;\n        (b, b') \\<in> Rc;\n        (r, r') \\<in> \\<langle>Rb, Rc\\<rangle>rbt_rel\\<rbrakk>\n       \\<Longrightarrow> (case ab of rbt.Empty \\<Rightarrow> a\n                          | Branch x xa xb xc xd \\<Rightarrow>\n                              aa x xa xb xc xd,\n                          case a'b of rbt.Empty \\<Rightarrow> a'\n                          | Branch x xa xb xc xd \\<Rightarrow>\n                              a'a x xa xb xc xd)\n                         \\<in> Ra", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a a' aa a'a ab a'b c c' l l' ac a'c b b' r r'.\n       \\<lbrakk>(a, a') \\<in> Ra;\n        (aa, a'a)\n        \\<in> color_rel \\<rightarrow>\n              \\<langle>Rb, Rc\\<rangle>rbt_rel \\<rightarrow>\n              Rb \\<rightarrow>\n              Rc \\<rightarrow>\n              \\<langle>Rb, Rc\\<rangle>rbt_rel \\<rightarrow> Ra;\n        ab = Branch c l ac b r; a'b = Branch c' l' a'c b' r';\n        (c, c') \\<in> color_rel;\n        (l, l') \\<in> \\<langle>Rb, Rc\\<rangle>rbt_rel; (ac, a'c) \\<in> Rb;\n        (b, b') \\<in> Rc;\n        (r, r') \\<in> \\<langle>Rb, Rc\\<rangle>rbt_rel\\<rbrakk>\n       \\<Longrightarrow> (case ab of rbt.Empty \\<Rightarrow> a\n                          | Branch x xa xb xc xd \\<Rightarrow>\n                              aa x xa xb xc xd,\n                          case a'b of rbt.Empty \\<Rightarrow> a'\n                          | Branch x xa xb xc xd \\<Rightarrow>\n                              a'a x xa xb xc xd)\n                         \\<in> Ra", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a a' aa a'a ab a'b c c' l l' ac a'c b b' r r'.\n       \\<lbrakk>(a, a') \\<in> Ra;\n        (aa, a'a)\n        \\<in> color_rel \\<rightarrow>\n              \\<langle>Rb, Rc\\<rangle>rbt_rel \\<rightarrow>\n              Rb \\<rightarrow>\n              Rc \\<rightarrow>\n              \\<langle>Rb, Rc\\<rangle>rbt_rel \\<rightarrow> Ra;\n        ab = Branch c l ac b r; a'b = Branch c' l' a'c b' r';\n        (c, c') \\<in> color_rel;\n        (l, l') \\<in> \\<langle>Rb, Rc\\<rangle>rbt_rel; (ac, a'c) \\<in> Rb;\n        (b, b') \\<in> Rc;\n        (r, r') \\<in> \\<langle>Rb, Rc\\<rangle>rbt_rel\\<rbrakk>\n       \\<Longrightarrow> (aa c l ac b r, a'a c' l' a'c b' r') \\<in> Ra", "apply parametricity"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma param_rec_rbt[param]: \"(rec_rbt, rec_rbt) \\<in> \n    Ra \\<rightarrow> (color_rel \\<rightarrow> \\<langle>Rb,Rc\\<rangle>rbt_rel \\<rightarrow> Rb \\<rightarrow> Rc \\<rightarrow> \\<langle>Rb,Rc\\<rangle>rbt_rel\n     \\<rightarrow> Ra \\<rightarrow> Ra \\<rightarrow> Ra) \\<rightarrow> \\<langle>Rb,Rc\\<rangle>rbt_rel \\<rightarrow> Ra\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (rec_rbt, rec_rbt)\n    \\<in> Ra \\<rightarrow>\n          (color_rel \\<rightarrow>\n           \\<langle>Rb, Rc\\<rangle>rbt_rel \\<rightarrow>\n           Rb \\<rightarrow>\n           Rc \\<rightarrow>\n           \\<langle>Rb, Rc\\<rangle>rbt_rel \\<rightarrow>\n           Ra \\<rightarrow> Ra \\<rightarrow> Ra) \\<rightarrow>\n          \\<langle>Rb, Rc\\<rangle>rbt_rel \\<rightarrow> Ra", "proof (intro fun_relI, goal_cases)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a a' aa a'a ab a'b.\n       \\<lbrakk>(a, a') \\<in> Ra;\n        (aa, a'a)\n        \\<in> color_rel \\<rightarrow>\n              \\<langle>Rb, Rc\\<rangle>rbt_rel \\<rightarrow>\n              Rb \\<rightarrow>\n              Rc \\<rightarrow>\n              \\<langle>Rb, Rc\\<rangle>rbt_rel \\<rightarrow>\n              Ra \\<rightarrow> Ra \\<rightarrow> Ra;\n        (ab, a'b) \\<in> \\<langle>Rb, Rc\\<rangle>rbt_rel\\<rbrakk>\n       \\<Longrightarrow> (rec_rbt a aa ab, rec_rbt a' a'a a'b) \\<in> Ra", "case (1 s s' f f' t t')"], ["proof (state)\nthis:\n  (s, s') \\<in> Ra\n  (f, f')\n  \\<in> color_rel \\<rightarrow>\n        \\<langle>Rb, Rc\\<rangle>rbt_rel \\<rightarrow>\n        Rb \\<rightarrow>\n        Rc \\<rightarrow>\n        \\<langle>Rb, Rc\\<rangle>rbt_rel \\<rightarrow>\n        Ra \\<rightarrow> Ra \\<rightarrow> Ra\n  (t, t') \\<in> \\<langle>Rb, Rc\\<rangle>rbt_rel\n\ngoal (1 subgoal):\n 1. \\<And>a a' aa a'a ab a'b.\n       \\<lbrakk>(a, a') \\<in> Ra;\n        (aa, a'a)\n        \\<in> color_rel \\<rightarrow>\n              \\<langle>Rb, Rc\\<rangle>rbt_rel \\<rightarrow>\n              Rb \\<rightarrow>\n              Rc \\<rightarrow>\n              \\<langle>Rb, Rc\\<rangle>rbt_rel \\<rightarrow>\n              Ra \\<rightarrow> Ra \\<rightarrow> Ra;\n        (ab, a'b) \\<in> \\<langle>Rb, Rc\\<rangle>rbt_rel\\<rbrakk>\n       \\<Longrightarrow> (rec_rbt a aa ab, rec_rbt a' a'a a'b) \\<in> Ra", "from this(3,1,2)"], ["proof (chain)\npicking this:\n  (t, t') \\<in> \\<langle>Rb, Rc\\<rangle>rbt_rel\n  (s, s') \\<in> Ra\n  (f, f')\n  \\<in> color_rel \\<rightarrow>\n        \\<langle>Rb, Rc\\<rangle>rbt_rel \\<rightarrow>\n        Rb \\<rightarrow>\n        Rc \\<rightarrow>\n        \\<langle>Rb, Rc\\<rangle>rbt_rel \\<rightarrow>\n        Ra \\<rightarrow> Ra \\<rightarrow> Ra", "show ?case"], ["proof (prove)\nusing this:\n  (t, t') \\<in> \\<langle>Rb, Rc\\<rangle>rbt_rel\n  (s, s') \\<in> Ra\n  (f, f')\n  \\<in> color_rel \\<rightarrow>\n        \\<langle>Rb, Rc\\<rangle>rbt_rel \\<rightarrow>\n        Rb \\<rightarrow>\n        Rc \\<rightarrow>\n        \\<langle>Rb, Rc\\<rangle>rbt_rel \\<rightarrow>\n        Ra \\<rightarrow> Ra \\<rightarrow> Ra\n\ngoal (1 subgoal):\n 1. (rec_rbt s f t, rec_rbt s' f' t') \\<in> Ra", "apply (induct arbitrary: s s')"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>s s'.\n       \\<lbrakk>(s, s') \\<in> Ra;\n        (f, f')\n        \\<in> color_rel \\<rightarrow>\n              \\<langle>Rb, Rc\\<rangle>rbt_rel \\<rightarrow>\n              Rb \\<rightarrow>\n              Rc \\<rightarrow>\n              \\<langle>Rb, Rc\\<rangle>rbt_rel \\<rightarrow>\n              Ra \\<rightarrow> Ra \\<rightarrow> Ra\\<rbrakk>\n       \\<Longrightarrow> (rec_rbt s f rbt.Empty, rec_rbt s' f' rbt.Empty)\n                         \\<in> Ra\n 2. \\<And>c c' l l' a a' b b' r r' s s'.\n       \\<lbrakk>(c, c') \\<in> color_rel;\n        (l, l') \\<in> \\<langle>Rb, Rc\\<rangle>rbt_rel;\n        \\<And>s s'.\n           \\<lbrakk>(s, s') \\<in> Ra;\n            (f, f')\n            \\<in> color_rel \\<rightarrow>\n                  \\<langle>Rb, Rc\\<rangle>rbt_rel \\<rightarrow>\n                  Rb \\<rightarrow>\n                  Rc \\<rightarrow>\n                  \\<langle>Rb, Rc\\<rangle>rbt_rel \\<rightarrow>\n                  Ra \\<rightarrow> Ra \\<rightarrow> Ra\\<rbrakk>\n           \\<Longrightarrow> (rec_rbt s f l, rec_rbt s' f' l') \\<in> Ra;\n        (a, a') \\<in> Rb; (b, b') \\<in> Rc;\n        (r, r') \\<in> \\<langle>Rb, Rc\\<rangle>rbt_rel;\n        \\<And>s s'.\n           \\<lbrakk>(s, s') \\<in> Ra;\n            (f, f')\n            \\<in> color_rel \\<rightarrow>\n                  \\<langle>Rb, Rc\\<rangle>rbt_rel \\<rightarrow>\n                  Rb \\<rightarrow>\n                  Rc \\<rightarrow>\n                  \\<langle>Rb, Rc\\<rangle>rbt_rel \\<rightarrow>\n                  Ra \\<rightarrow> Ra \\<rightarrow> Ra\\<rbrakk>\n           \\<Longrightarrow> (rec_rbt s f r, rec_rbt s' f' r') \\<in> Ra;\n        (s, s') \\<in> Ra;\n        (f, f')\n        \\<in> color_rel \\<rightarrow>\n              \\<langle>Rb, Rc\\<rangle>rbt_rel \\<rightarrow>\n              Rb \\<rightarrow>\n              Rc \\<rightarrow>\n              \\<langle>Rb, Rc\\<rangle>rbt_rel \\<rightarrow>\n              Ra \\<rightarrow> Ra \\<rightarrow> Ra\\<rbrakk>\n       \\<Longrightarrow> (rec_rbt s f (Branch c l a b r),\n                          rec_rbt s' f' (Branch c' l' a' b' r'))\n                         \\<in> Ra", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>c c' l l' a a' b b' r r' s s'.\n       \\<lbrakk>(c, c') \\<in> color_rel;\n        (l, l') \\<in> \\<langle>Rb, Rc\\<rangle>rbt_rel;\n        \\<And>s s'.\n           \\<lbrakk>(s, s') \\<in> Ra;\n            (f, f')\n            \\<in> color_rel \\<rightarrow>\n                  \\<langle>Rb, Rc\\<rangle>rbt_rel \\<rightarrow>\n                  Rb \\<rightarrow>\n                  Rc \\<rightarrow>\n                  \\<langle>Rb, Rc\\<rangle>rbt_rel \\<rightarrow>\n                  Ra \\<rightarrow> Ra \\<rightarrow> Ra\\<rbrakk>\n           \\<Longrightarrow> (rec_rbt s f l, rec_rbt s' f' l') \\<in> Ra;\n        (a, a') \\<in> Rb; (b, b') \\<in> Rc;\n        (r, r') \\<in> \\<langle>Rb, Rc\\<rangle>rbt_rel;\n        \\<And>s s'.\n           \\<lbrakk>(s, s') \\<in> Ra;\n            (f, f')\n            \\<in> color_rel \\<rightarrow>\n                  \\<langle>Rb, Rc\\<rangle>rbt_rel \\<rightarrow>\n                  Rb \\<rightarrow>\n                  Rc \\<rightarrow>\n                  \\<langle>Rb, Rc\\<rangle>rbt_rel \\<rightarrow>\n                  Ra \\<rightarrow> Ra \\<rightarrow> Ra\\<rbrakk>\n           \\<Longrightarrow> (rec_rbt s f r, rec_rbt s' f' r') \\<in> Ra;\n        (s, s') \\<in> Ra;\n        (f, f')\n        \\<in> color_rel \\<rightarrow>\n              \\<langle>Rb, Rc\\<rangle>rbt_rel \\<rightarrow>\n              Rb \\<rightarrow>\n              Rc \\<rightarrow>\n              \\<langle>Rb, Rc\\<rangle>rbt_rel \\<rightarrow>\n              Ra \\<rightarrow> Ra \\<rightarrow> Ra\\<rbrakk>\n       \\<Longrightarrow> (rec_rbt s f (Branch c l a b r),\n                          rec_rbt s' f' (Branch c' l' a' b' r'))\n                         \\<in> Ra", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>c c' l l' a a' b b' r r' s s'.\n       \\<lbrakk>(c, c') \\<in> color_rel;\n        (l, l') \\<in> \\<langle>Rb, Rc\\<rangle>rbt_rel;\n        \\<And>s s'.\n           (s, s') \\<in> Ra \\<Longrightarrow>\n           (rec_rbt s f l, rec_rbt s' f' l') \\<in> Ra;\n        (a, a') \\<in> Rb; (b, b') \\<in> Rc;\n        (r, r') \\<in> \\<langle>Rb, Rc\\<rangle>rbt_rel;\n        \\<And>s s'.\n           (s, s') \\<in> Ra \\<Longrightarrow>\n           (rec_rbt s f r, rec_rbt s' f' r') \\<in> Ra;\n        (s, s') \\<in> Ra;\n        (f, f')\n        \\<in> color_rel \\<rightarrow>\n              \\<langle>Rb, Rc\\<rangle>rbt_rel \\<rightarrow>\n              Rb \\<rightarrow>\n              Rc \\<rightarrow>\n              \\<langle>Rb, Rc\\<rangle>rbt_rel \\<rightarrow>\n              Ra \\<rightarrow> Ra \\<rightarrow> Ra\\<rbrakk>\n       \\<Longrightarrow> (f c l a b r (rec_rbt s f l) (rec_rbt s f r),\n                          f' c' l' a' b' r' (rec_rbt s' f' l')\n                           (rec_rbt s' f' r'))\n                         \\<in> Ra", "apply parametricity"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  (rec_rbt s f t, rec_rbt s' f' t') \\<in> Ra\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma param_paint[param]: \n    \"(paint,paint)\\<in>color_rel \\<rightarrow> \\<langle>Ra,Rb\\<rangle>rbt_rel \\<rightarrow> \\<langle>Ra,Rb\\<rangle>rbt_rel\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (paint, paint)\n    \\<in> color_rel \\<rightarrow>\n          \\<langle>Ra, Rb\\<rangle>rbt_rel \\<rightarrow> \\<langle>Ra,\n          Rb\\<rangle>rbt_rel", "unfolding paint_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>uu uua.\n        rec_rbt (\\<lambda>c. rbt.Empty)\n         (\\<lambda>_ l k v r la ra c. Branch c l k v r) uua uu,\n     \\<lambda>uu uua.\n        rec_rbt (\\<lambda>c. rbt.Empty)\n         (\\<lambda>_ l k v r la ra c. Branch c l k v r) uua uu)\n    \\<in> color_rel \\<rightarrow>\n          \\<langle>Ra, Rb\\<rangle>rbt_rel \\<rightarrow> \\<langle>Ra,\n          Rb\\<rangle>rbt_rel", "by parametricity"], ["", "lemma param_balance[param]: \n    shows \"(balance,balance) \\<in> \n      \\<langle>Ra,Rb\\<rangle>rbt_rel \\<rightarrow> Ra \\<rightarrow> Rb \\<rightarrow> \\<langle>Ra,Rb\\<rangle>rbt_rel \\<rightarrow> \\<langle>Ra,Rb\\<rangle>rbt_rel\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (balance, balance)\n    \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel \\<rightarrow>\n          Ra \\<rightarrow>\n          Rb \\<rightarrow>\n          \\<langle>Ra, Rb\\<rangle>rbt_rel \\<rightarrow> \\<langle>Ra,\n          Rb\\<rangle>rbt_rel", "proof (intro fun_relI, goal_cases)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a a' aa a'a ab a'b ac a'c.\n       \\<lbrakk>(a, a') \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel;\n        (aa, a'a) \\<in> Ra; (ab, a'b) \\<in> Rb;\n        (ac, a'c) \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel\\<rbrakk>\n       \\<Longrightarrow> (balance a aa ab ac, balance a' a'a a'b a'c)\n                         \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel", "case (1 t1 t1' a a' b b' t2 t2')"], ["proof (state)\nthis:\n  (t1, t1') \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel\n  (a, a') \\<in> Ra\n  (b, b') \\<in> Rb\n  (t2, t2') \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel\n\ngoal (1 subgoal):\n 1. \\<And>a a' aa a'a ab a'b ac a'c.\n       \\<lbrakk>(a, a') \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel;\n        (aa, a'a) \\<in> Ra; (ab, a'b) \\<in> Rb;\n        (ac, a'c) \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel\\<rbrakk>\n       \\<Longrightarrow> (balance a aa ab ac, balance a' a'a a'b a'c)\n                         \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel", "thus ?case"], ["proof (prove)\nusing this:\n  (t1, t1') \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel\n  (a, a') \\<in> Ra\n  (b, b') \\<in> Rb\n  (t2, t2') \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel\n\ngoal (1 subgoal):\n 1. (balance t1 a b t2, balance t1' a' b' t2') \\<in> \\<langle>Ra,\n    Rb\\<rangle>rbt_rel", "apply (induct t1' a' b' t2' arbitrary: t1 a b t2 rule: balance.induct)"], ["proof (prove)\ngoal (45 subgoals):\n 1. \\<And>a w x b s t c y z d t1 aa ba t2.\n       \\<lbrakk>(t1, Branch color.R a w x b) \\<in> \\<langle>Ra,\n                Rb\\<rangle>rbt_rel;\n        (aa, s) \\<in> Ra; (ba, t) \\<in> Rb;\n        (t2, Branch color.R c y z d) \\<in> \\<langle>Ra,\n        Rb\\<rangle>rbt_rel\\<rbrakk>\n       \\<Longrightarrow> (balance t1 aa ba t2,\n                          balance (Branch color.R a w x b) s t\n                           (Branch color.R c y z d))\n                         \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel\n 2. \\<And>a w x b s t c y z t1 aa ba t2.\n       \\<lbrakk>(t1, Branch color.R (Branch color.R a w x b) s t c)\n                \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel;\n        (aa, y) \\<in> Ra; (ba, z) \\<in> Rb;\n        (t2, rbt.Empty) \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel\\<rbrakk>\n       \\<Longrightarrow> (balance t1 aa ba t2,\n                          balance\n                           (Branch color.R (Branch color.R a w x b) s t c) y\n                           z rbt.Empty)\n                         \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel\n 3. \\<And>a w x b s t c y z va vb vc vd t1 aa ba t2.\n       \\<lbrakk>(t1, Branch color.R (Branch color.R a w x b) s t c)\n                \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel;\n        (aa, y) \\<in> Ra; (ba, z) \\<in> Rb;\n        (t2, Branch color.B va vb vc vd) \\<in> \\<langle>Ra,\n        Rb\\<rangle>rbt_rel\\<rbrakk>\n       \\<Longrightarrow> (balance t1 aa ba t2,\n                          balance\n                           (Branch color.R (Branch color.R a w x b) s t c) y\n                           z (Branch color.B va vb vc vd))\n                         \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel\n 4. \\<And>w x b s t c y z t1 a ba t2.\n       \\<lbrakk>(t1, Branch color.R rbt.Empty w x (Branch color.R b s t c))\n                \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel;\n        (a, y) \\<in> Ra; (ba, z) \\<in> Rb;\n        (t2, rbt.Empty) \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel\\<rbrakk>\n       \\<Longrightarrow> (balance t1 a ba t2,\n                          balance\n                           (Branch color.R rbt.Empty w x\n                             (Branch color.R b s t c))\n                           y z rbt.Empty)\n                         \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel\n 5. \\<And>va vb vc vd w x b s t c y z t1 a ba t2.\n       \\<lbrakk>(t1,\n                 Branch color.R (Branch color.B va vb vc vd) w x\n                  (Branch color.R b s t c))\n                \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel;\n        (a, y) \\<in> Ra; (ba, z) \\<in> Rb;\n        (t2, rbt.Empty) \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel\\<rbrakk>\n       \\<Longrightarrow> (balance t1 a ba t2,\n                          balance\n                           (Branch color.R (Branch color.B va vb vc vd) w x\n                             (Branch color.R b s t c))\n                           y z rbt.Empty)\n                         \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel\n 6. \\<And>w x b s t c y z va vb vc vd t1 a ba t2.\n       \\<lbrakk>(t1, Branch color.R rbt.Empty w x (Branch color.R b s t c))\n                \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel;\n        (a, y) \\<in> Ra; (ba, z) \\<in> Rb;\n        (t2, Branch color.B va vb vc vd) \\<in> \\<langle>Ra,\n        Rb\\<rangle>rbt_rel\\<rbrakk>\n       \\<Longrightarrow> (balance t1 a ba t2,\n                          balance\n                           (Branch color.R rbt.Empty w x\n                             (Branch color.R b s t c))\n                           y z (Branch color.B va vb vc vd))\n                         \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel\n 7. \\<And>ve vf vg vh w x b s t c y z va vb vc vd t1 a ba t2.\n       \\<lbrakk>(t1,\n                 Branch color.R (Branch color.B ve vf vg vh) w x\n                  (Branch color.R b s t c))\n                \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel;\n        (a, y) \\<in> Ra; (ba, z) \\<in> Rb;\n        (t2, Branch color.B va vb vc vd) \\<in> \\<langle>Ra,\n        Rb\\<rangle>rbt_rel\\<rbrakk>\n       \\<Longrightarrow> (balance t1 a ba t2,\n                          balance\n                           (Branch color.R (Branch color.B ve vf vg vh) w x\n                             (Branch color.R b s t c))\n                           y z (Branch color.B va vb vc vd))\n                         \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel\n 8. \\<And>w x b s t c y z d t1 a ba t2.\n       \\<lbrakk>(t1, rbt.Empty) \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel;\n        (a, w) \\<in> Ra; (ba, x) \\<in> Rb;\n        (t2, Branch color.R b s t (Branch color.R c y z d))\n        \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel\\<rbrakk>\n       \\<Longrightarrow> (balance t1 a ba t2,\n                          balance rbt.Empty w x\n                           (Branch color.R b s t (Branch color.R c y z d)))\n                         \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel\n 9. \\<And>va vb vc vd w x b s t c y z d t1 a ba t2.\n       \\<lbrakk>(t1, Branch color.B va vb vc vd) \\<in> \\<langle>Ra,\n                Rb\\<rangle>rbt_rel;\n        (a, w) \\<in> Ra; (ba, x) \\<in> Rb;\n        (t2, Branch color.R b s t (Branch color.R c y z d))\n        \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel\\<rbrakk>\n       \\<Longrightarrow> (balance t1 a ba t2,\n                          balance (Branch color.B va vb vc vd) w x\n                           (Branch color.R b s t (Branch color.R c y z d)))\n                         \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel\n 10. \\<And>w x b s t c y z t1 a ba t2.\n        \\<lbrakk>(t1, rbt.Empty) \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel;\n         (a, w) \\<in> Ra; (ba, x) \\<in> Rb;\n         (t2, Branch color.R (Branch color.R b s t c) y z rbt.Empty)\n         \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel\\<rbrakk>\n        \\<Longrightarrow> (balance t1 a ba t2,\n                           balance rbt.Empty w x\n                            (Branch color.R (Branch color.R b s t c) y z\n                              rbt.Empty))\n                          \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel\nA total of 45 subgoals...", "apply (elim_all rbt_rel_elims color_rel_elims)"], ["proof (prove)\ngoal (45 subgoals):\n 1. \\<And>a w x b s t c y z d t1 aa ba t2 ca l ab bb r cb la ac bc ra.\n       \\<lbrakk>(aa, s) \\<in> Ra; (ba, t) \\<in> Rb;\n        t1 = Branch ca l ab bb r;\n        (l, a) \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel; (ab, w) \\<in> Ra;\n        (bb, x) \\<in> Rb; (r, b) \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel;\n        t2 = Branch cb la ac bc ra;\n        (la, c) \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel; (ac, y) \\<in> Ra;\n        (bc, z) \\<in> Rb; (ra, d) \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel;\n        ca = color.R; cb = color.R\\<rbrakk>\n       \\<Longrightarrow> (balance t1 aa ba t2,\n                          balance (Branch color.R a w x b) s t\n                           (Branch color.R c y z d))\n                         \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel\n 2. \\<And>a w x b s t c y z t1 aa ba t2 ca l ab bb r cb la ac bc ra.\n       \\<lbrakk>(aa, y) \\<in> Ra; (ba, z) \\<in> Rb; t2 = rbt.Empty;\n        t1 = Branch ca l ab bb r; (ab, s) \\<in> Ra; (bb, t) \\<in> Rb;\n        (r, c) \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel;\n        l = Branch cb la ac bc ra;\n        (la, a) \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel; (ac, w) \\<in> Ra;\n        (bc, x) \\<in> Rb; (ra, b) \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel;\n        ca = color.R; cb = color.R\\<rbrakk>\n       \\<Longrightarrow> (balance t1 aa ba t2,\n                          balance\n                           (Branch color.R (Branch color.R a w x b) s t c) y\n                           z rbt.Empty)\n                         \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel\n 3. \\<And>a w x b s t c y z va vb vc vd t1 aa ba t2 ca l ab bb r cb la ac bc\n       ra cc lb ad bd rb.\n       \\<lbrakk>(aa, y) \\<in> Ra; (ba, z) \\<in> Rb;\n        t1 = Branch ca l ab bb r; (ab, s) \\<in> Ra; (bb, t) \\<in> Rb;\n        (r, c) \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel;\n        t2 = Branch cb la ac bc ra;\n        (la, va) \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel; (ac, vb) \\<in> Ra;\n        (bc, vc) \\<in> Rb; (ra, vd) \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel;\n        l = Branch cc lb ad bd rb;\n        (lb, a) \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel; (ad, w) \\<in> Ra;\n        (bd, x) \\<in> Rb; (rb, b) \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel;\n        ca = color.R; cc = color.R; cb = color.B\\<rbrakk>\n       \\<Longrightarrow> (balance t1 aa ba t2,\n                          balance\n                           (Branch color.R (Branch color.R a w x b) s t c) y\n                           z (Branch color.B va vb vc vd))\n                         \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel\n 4. \\<And>w x b s t c y z t1 a ba t2 ca l aa bb r cb la ab bc ra.\n       \\<lbrakk>(a, y) \\<in> Ra; (ba, z) \\<in> Rb; t2 = rbt.Empty;\n        t1 = Branch ca l aa bb r; (aa, w) \\<in> Ra; (bb, x) \\<in> Rb;\n        l = rbt.Empty; r = Branch cb la ab bc ra;\n        (la, b) \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel; (ab, s) \\<in> Ra;\n        (bc, t) \\<in> Rb; (ra, c) \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel;\n        ca = color.R; cb = color.R\\<rbrakk>\n       \\<Longrightarrow> (balance t1 a ba t2,\n                          balance\n                           (Branch color.R rbt.Empty w x\n                             (Branch color.R b s t c))\n                           y z rbt.Empty)\n                         \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel\n 5. \\<And>va vb vc vd w x b s t c y z t1 a ba t2 ca l aa bb r cb la ab bc ra\n       cc lb ac bd rb.\n       \\<lbrakk>(a, y) \\<in> Ra; (ba, z) \\<in> Rb; t2 = rbt.Empty;\n        t1 = Branch ca l aa bb r; (aa, w) \\<in> Ra; (bb, x) \\<in> Rb;\n        l = Branch cb la ab bc ra;\n        (la, va) \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel; (ab, vb) \\<in> Ra;\n        (bc, vc) \\<in> Rb; (ra, vd) \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel;\n        r = Branch cc lb ac bd rb;\n        (lb, b) \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel; (ac, s) \\<in> Ra;\n        (bd, t) \\<in> Rb; (rb, c) \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel;\n        ca = color.R; cc = color.R; cb = color.B\\<rbrakk>\n       \\<Longrightarrow> (balance t1 a ba t2,\n                          balance\n                           (Branch color.R (Branch color.B va vb vc vd) w x\n                             (Branch color.R b s t c))\n                           y z rbt.Empty)\n                         \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel\n 6. \\<And>w x b s t c y z va vb vc vd t1 a ba t2 ca l aa bb r cb la ab bc ra\n       cc lb ac bd rb.\n       \\<lbrakk>(a, y) \\<in> Ra; (ba, z) \\<in> Rb; t1 = Branch ca l aa bb r;\n        (aa, w) \\<in> Ra; (bb, x) \\<in> Rb; l = rbt.Empty;\n        t2 = Branch cb la ab bc ra;\n        (la, va) \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel; (ab, vb) \\<in> Ra;\n        (bc, vc) \\<in> Rb; (ra, vd) \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel;\n        r = Branch cc lb ac bd rb;\n        (lb, b) \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel; (ac, s) \\<in> Ra;\n        (bd, t) \\<in> Rb; (rb, c) \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel;\n        ca = color.R; cc = color.R; cb = color.B\\<rbrakk>\n       \\<Longrightarrow> (balance t1 a ba t2,\n                          balance\n                           (Branch color.R rbt.Empty w x\n                             (Branch color.R b s t c))\n                           y z (Branch color.B va vb vc vd))\n                         \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel\n 7. \\<And>ve vf vg vh w x b s t c y z va vb vc vd t1 a ba t2 ca l aa bb r cb\n       la ab bc ra cc lb ac bd rb cd lc ad be rc.\n       \\<lbrakk>(a, y) \\<in> Ra; (ba, z) \\<in> Rb; t1 = Branch ca l aa bb r;\n        (aa, w) \\<in> Ra; (bb, x) \\<in> Rb; t2 = Branch cb la ab bc ra;\n        (la, va) \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel; (ab, vb) \\<in> Ra;\n        (bc, vc) \\<in> Rb; (ra, vd) \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel;\n        l = Branch cc lb ac bd rb;\n        (lb, ve) \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel; (ac, vf) \\<in> Ra;\n        (bd, vg) \\<in> Rb; (rb, vh) \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel;\n        r = Branch cd lc ad be rc;\n        (lc, b) \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel; (ad, s) \\<in> Ra;\n        (be, t) \\<in> Rb; (rc, c) \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel;\n        ca = color.R; cd = color.R; cb = color.B; cc = color.B\\<rbrakk>\n       \\<Longrightarrow> (balance t1 a ba t2,\n                          balance\n                           (Branch color.R (Branch color.B ve vf vg vh) w x\n                             (Branch color.R b s t c))\n                           y z (Branch color.B va vb vc vd))\n                         \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel\n 8. \\<And>w x b s t c y z d t1 a ba t2 ca l aa bb r cb la ab bc ra.\n       \\<lbrakk>(a, w) \\<in> Ra; (ba, x) \\<in> Rb; t1 = rbt.Empty;\n        t2 = Branch ca l aa bb r;\n        (l, b) \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel; (aa, s) \\<in> Ra;\n        (bb, t) \\<in> Rb; r = Branch cb la ab bc ra;\n        (la, c) \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel; (ab, y) \\<in> Ra;\n        (bc, z) \\<in> Rb; (ra, d) \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel;\n        ca = color.R; cb = color.R\\<rbrakk>\n       \\<Longrightarrow> (balance t1 a ba t2,\n                          balance rbt.Empty w x\n                           (Branch color.R b s t (Branch color.R c y z d)))\n                         \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel\n 9. \\<And>va vb vc vd w x b s t c y z d t1 a ba t2 ca l aa bb r cb la ab bc\n       ra cc lb ac bd rb.\n       \\<lbrakk>(a, w) \\<in> Ra; (ba, x) \\<in> Rb; t1 = Branch ca l aa bb r;\n        (l, va) \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel; (aa, vb) \\<in> Ra;\n        (bb, vc) \\<in> Rb; (r, vd) \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel;\n        t2 = Branch cb la ab bc ra;\n        (la, b) \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel; (ab, s) \\<in> Ra;\n        (bc, t) \\<in> Rb; ra = Branch cc lb ac bd rb;\n        (lb, c) \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel; (ac, y) \\<in> Ra;\n        (bd, z) \\<in> Rb; (rb, d) \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel;\n        cb = color.R; cc = color.R; ca = color.B\\<rbrakk>\n       \\<Longrightarrow> (balance t1 a ba t2,\n                          balance (Branch color.B va vb vc vd) w x\n                           (Branch color.R b s t (Branch color.R c y z d)))\n                         \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel\n 10. \\<And>w x b s t c y z t1 a ba t2 ca l aa bb r cb la ab bc ra.\n        \\<lbrakk>(a, w) \\<in> Ra; (ba, x) \\<in> Rb; t1 = rbt.Empty;\n         t2 = Branch ca l aa bb r; (aa, y) \\<in> Ra; (bb, z) \\<in> Rb;\n         r = rbt.Empty; l = Branch cb la ab bc ra;\n         (la, b) \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel; (ab, s) \\<in> Ra;\n         (bc, t) \\<in> Rb; (ra, c) \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel;\n         ca = color.R; cb = color.R\\<rbrakk>\n        \\<Longrightarrow> (balance t1 a ba t2,\n                           balance rbt.Empty w x\n                            (Branch color.R (Branch color.R b s t c) y z\n                              rbt.Empty))\n                          \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel\nA total of 45 subgoals...", "apply (simp_all only: balance.simps)"], ["proof (prove)\ngoal (45 subgoals):\n 1. \\<And>a w x b s t c y z d t1 aa ba t2 ca l ab bb r cb la ac bc ra.\n       \\<lbrakk>(aa, s) \\<in> Ra; (ba, t) \\<in> Rb;\n        t1 = Branch color.R l ab bb r;\n        (l, a) \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel; (ab, w) \\<in> Ra;\n        (bb, x) \\<in> Rb; (r, b) \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel;\n        t2 = Branch color.R la ac bc ra;\n        (la, c) \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel; (ac, y) \\<in> Ra;\n        (bc, z) \\<in> Rb; (ra, d) \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel;\n        ca = color.R; cb = color.R\\<rbrakk>\n       \\<Longrightarrow> (Branch color.R (Branch color.B l ab bb r) aa ba\n                           (Branch color.B la ac bc ra),\n                          Branch color.R (Branch color.B a w x b) s t\n                           (Branch color.B c y z d))\n                         \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel\n 2. \\<And>a w x b s t c y z t1 aa ba t2 ca l ab bb r cb la ac bc ra.\n       \\<lbrakk>(aa, y) \\<in> Ra; (ba, z) \\<in> Rb; t2 = rbt.Empty;\n        t1 = Branch color.R (Branch color.R la ac bc ra) ab bb r;\n        (ab, s) \\<in> Ra; (bb, t) \\<in> Rb;\n        (r, c) \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel;\n        l = Branch color.R la ac bc ra;\n        (la, a) \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel; (ac, w) \\<in> Ra;\n        (bc, x) \\<in> Rb; (ra, b) \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel;\n        ca = color.R; cb = color.R\\<rbrakk>\n       \\<Longrightarrow> (Branch color.R (Branch color.B la ac bc ra) ab bb\n                           (Branch color.B r aa ba rbt.Empty),\n                          Branch color.R (Branch color.B a w x b) s t\n                           (Branch color.B c y z rbt.Empty))\n                         \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel\n 3. \\<And>a w x b s t c y z va vb vc vd t1 aa ba t2 ca l ab bb r cb la ac bc\n       ra cc lb ad bd rb.\n       \\<lbrakk>(aa, y) \\<in> Ra; (ba, z) \\<in> Rb;\n        t1 = Branch color.R (Branch color.R lb ad bd rb) ab bb r;\n        (ab, s) \\<in> Ra; (bb, t) \\<in> Rb;\n        (r, c) \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel;\n        t2 = Branch color.B la ac bc ra;\n        (la, va) \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel; (ac, vb) \\<in> Ra;\n        (bc, vc) \\<in> Rb; (ra, vd) \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel;\n        l = Branch color.R lb ad bd rb;\n        (lb, a) \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel; (ad, w) \\<in> Ra;\n        (bd, x) \\<in> Rb; (rb, b) \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel;\n        ca = color.R; cc = color.R; cb = color.B\\<rbrakk>\n       \\<Longrightarrow> (Branch color.R (Branch color.B lb ad bd rb) ab bb\n                           (Branch color.B r aa ba\n                             (Branch color.B la ac bc ra)),\n                          Branch color.R (Branch color.B a w x b) s t\n                           (Branch color.B c y z\n                             (Branch color.B va vb vc vd)))\n                         \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel\n 4. \\<And>w x b s t c y z t1 a ba t2 ca l aa bb r cb la ab bc ra.\n       \\<lbrakk>(a, y) \\<in> Ra; (ba, z) \\<in> Rb; t2 = rbt.Empty;\n        t1 = Branch color.R rbt.Empty aa bb (Branch color.R la ab bc ra);\n        (aa, w) \\<in> Ra; (bb, x) \\<in> Rb; l = rbt.Empty;\n        r = Branch color.R la ab bc ra;\n        (la, b) \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel; (ab, s) \\<in> Ra;\n        (bc, t) \\<in> Rb; (ra, c) \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel;\n        ca = color.R; cb = color.R\\<rbrakk>\n       \\<Longrightarrow> (Branch color.R (Branch color.B rbt.Empty aa bb la)\n                           ab bc (Branch color.B ra a ba rbt.Empty),\n                          Branch color.R (Branch color.B rbt.Empty w x b) s\n                           t (Branch color.B c y z rbt.Empty))\n                         \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel\n 5. \\<And>va vb vc vd w x b s t c y z t1 a ba t2 ca l aa bb r cb la ab bc ra\n       cc lb ac bd rb.\n       \\<lbrakk>(a, y) \\<in> Ra; (ba, z) \\<in> Rb; t2 = rbt.Empty;\n        t1 =\n        Branch color.R (Branch color.B la ab bc ra) aa bb\n         (Branch color.R lb ac bd rb);\n        (aa, w) \\<in> Ra; (bb, x) \\<in> Rb; l = Branch color.B la ab bc ra;\n        (la, va) \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel; (ab, vb) \\<in> Ra;\n        (bc, vc) \\<in> Rb; (ra, vd) \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel;\n        r = Branch color.R lb ac bd rb;\n        (lb, b) \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel; (ac, s) \\<in> Ra;\n        (bd, t) \\<in> Rb; (rb, c) \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel;\n        ca = color.R; cc = color.R; cb = color.B\\<rbrakk>\n       \\<Longrightarrow> (Branch color.R\n                           (Branch color.B (Branch color.B la ab bc ra) aa\n                             bb lb)\n                           ac bd (Branch color.B rb a ba rbt.Empty),\n                          Branch color.R\n                           (Branch color.B (Branch color.B va vb vc vd) w x\n                             b)\n                           s t (Branch color.B c y z rbt.Empty))\n                         \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel\n 6. \\<And>w x b s t c y z va vb vc vd t1 a ba t2 ca l aa bb r cb la ab bc ra\n       cc lb ac bd rb.\n       \\<lbrakk>(a, y) \\<in> Ra; (ba, z) \\<in> Rb;\n        t1 = Branch color.R rbt.Empty aa bb (Branch color.R lb ac bd rb);\n        (aa, w) \\<in> Ra; (bb, x) \\<in> Rb; l = rbt.Empty;\n        t2 = Branch color.B la ab bc ra;\n        (la, va) \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel; (ab, vb) \\<in> Ra;\n        (bc, vc) \\<in> Rb; (ra, vd) \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel;\n        r = Branch color.R lb ac bd rb;\n        (lb, b) \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel; (ac, s) \\<in> Ra;\n        (bd, t) \\<in> Rb; (rb, c) \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel;\n        ca = color.R; cc = color.R; cb = color.B\\<rbrakk>\n       \\<Longrightarrow> (Branch color.R (Branch color.B rbt.Empty aa bb lb)\n                           ac bd\n                           (Branch color.B rb a ba\n                             (Branch color.B la ab bc ra)),\n                          Branch color.R (Branch color.B rbt.Empty w x b) s\n                           t (Branch color.B c y z\n                               (Branch color.B va vb vc vd)))\n                         \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel\n 7. \\<And>ve vf vg vh w x b s t c y z va vb vc vd t1 a ba t2 ca l aa bb r cb\n       la ab bc ra cc lb ac bd rb cd lc ad be rc.\n       \\<lbrakk>(a, y) \\<in> Ra; (ba, z) \\<in> Rb;\n        t1 =\n        Branch color.R (Branch color.B lb ac bd rb) aa bb\n         (Branch color.R lc ad be rc);\n        (aa, w) \\<in> Ra; (bb, x) \\<in> Rb; t2 = Branch color.B la ab bc ra;\n        (la, va) \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel; (ab, vb) \\<in> Ra;\n        (bc, vc) \\<in> Rb; (ra, vd) \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel;\n        l = Branch color.B lb ac bd rb;\n        (lb, ve) \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel; (ac, vf) \\<in> Ra;\n        (bd, vg) \\<in> Rb; (rb, vh) \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel;\n        r = Branch color.R lc ad be rc;\n        (lc, b) \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel; (ad, s) \\<in> Ra;\n        (be, t) \\<in> Rb; (rc, c) \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel;\n        ca = color.R; cd = color.R; cb = color.B; cc = color.B\\<rbrakk>\n       \\<Longrightarrow> (Branch color.R\n                           (Branch color.B (Branch color.B lb ac bd rb) aa\n                             bb lc)\n                           ad be\n                           (Branch color.B rc a ba\n                             (Branch color.B la ab bc ra)),\n                          Branch color.R\n                           (Branch color.B (Branch color.B ve vf vg vh) w x\n                             b)\n                           s t\n                           (Branch color.B c y z\n                             (Branch color.B va vb vc vd)))\n                         \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel\n 8. \\<And>w x b s t c y z d t1 a ba t2 ca l aa bb r cb la ab bc ra.\n       \\<lbrakk>(a, w) \\<in> Ra; (ba, x) \\<in> Rb; t1 = rbt.Empty;\n        t2 = Branch color.R l aa bb (Branch color.R la ab bc ra);\n        (l, b) \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel; (aa, s) \\<in> Ra;\n        (bb, t) \\<in> Rb; r = Branch color.R la ab bc ra;\n        (la, c) \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel; (ab, y) \\<in> Ra;\n        (bc, z) \\<in> Rb; (ra, d) \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel;\n        ca = color.R; cb = color.R\\<rbrakk>\n       \\<Longrightarrow> (Branch color.R (Branch color.B rbt.Empty a ba l)\n                           aa bb (Branch color.B la ab bc ra),\n                          Branch color.R (Branch color.B rbt.Empty w x b) s\n                           t (Branch color.B c y z d))\n                         \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel\n 9. \\<And>va vb vc vd w x b s t c y z d t1 a ba t2 ca l aa bb r cb la ab bc\n       ra cc lb ac bd rb.\n       \\<lbrakk>(a, w) \\<in> Ra; (ba, x) \\<in> Rb;\n        t1 = Branch color.B l aa bb r;\n        (l, va) \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel; (aa, vb) \\<in> Ra;\n        (bb, vc) \\<in> Rb; (r, vd) \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel;\n        t2 = Branch color.R la ab bc (Branch color.R lb ac bd rb);\n        (la, b) \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel; (ab, s) \\<in> Ra;\n        (bc, t) \\<in> Rb; ra = Branch color.R lb ac bd rb;\n        (lb, c) \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel; (ac, y) \\<in> Ra;\n        (bd, z) \\<in> Rb; (rb, d) \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel;\n        cb = color.R; cc = color.R; ca = color.B\\<rbrakk>\n       \\<Longrightarrow> (Branch color.R\n                           (Branch color.B (Branch color.B l aa bb r) a ba\n                             la)\n                           ab bc (Branch color.B lb ac bd rb),\n                          Branch color.R\n                           (Branch color.B (Branch color.B va vb vc vd) w x\n                             b)\n                           s t (Branch color.B c y z d))\n                         \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel\n 10. \\<And>w x b s t c y z t1 a ba t2 ca l aa bb r cb la ab bc ra.\n        \\<lbrakk>(a, w) \\<in> Ra; (ba, x) \\<in> Rb; t1 = rbt.Empty;\n         t2 = Branch color.R (Branch color.R la ab bc ra) aa bb rbt.Empty;\n         (aa, y) \\<in> Ra; (bb, z) \\<in> Rb; r = rbt.Empty;\n         l = Branch color.R la ab bc ra;\n         (la, b) \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel; (ab, s) \\<in> Ra;\n         (bc, t) \\<in> Rb; (ra, c) \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel;\n         ca = color.R; cb = color.R\\<rbrakk>\n        \\<Longrightarrow> (Branch color.R (Branch color.B rbt.Empty a ba la)\n                            ab bc (Branch color.B ra aa bb rbt.Empty),\n                           Branch color.R (Branch color.B rbt.Empty w x b) s\n                            t (Branch color.B c y z rbt.Empty))\n                          \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel\nA total of 45 subgoals...", "apply (parametricity)+"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  (balance t1 a b t2, balance t1' a' b' t2') \\<in> \\<langle>Ra,\n  Rb\\<rangle>rbt_rel\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma param_rbt_ins[param]:\n    fixes less\n    assumes param_less[param]: \"(less,less') \\<in> Ra \\<rightarrow> Ra \\<rightarrow> Id\"\n    shows \"(ord.rbt_ins less,ord.rbt_ins less') \\<in> \n             (Ra\\<rightarrow>Rb\\<rightarrow>Rb\\<rightarrow>Rb) \\<rightarrow> Ra \\<rightarrow> Rb \\<rightarrow> \\<langle>Ra,Rb\\<rangle>rbt_rel \\<rightarrow> \\<langle>Ra,Rb\\<rangle>rbt_rel\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (ord.rbt_ins less, ord.rbt_ins less')\n    \\<in> (Ra \\<rightarrow>\n           Rb \\<rightarrow> Rb \\<rightarrow> Rb) \\<rightarrow>\n          Ra \\<rightarrow>\n          Rb \\<rightarrow>\n          \\<langle>Ra, Rb\\<rangle>rbt_rel \\<rightarrow> \\<langle>Ra,\n          Rb\\<rangle>rbt_rel", "proof (intro fun_relI, goal_cases)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a a' aa a'a ab a'b ac a'c.\n       \\<lbrakk>(a, a')\n                \\<in> Ra \\<rightarrow> Rb \\<rightarrow> Rb \\<rightarrow> Rb;\n        (aa, a'a) \\<in> Ra; (ab, a'b) \\<in> Rb;\n        (ac, a'c) \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel\\<rbrakk>\n       \\<Longrightarrow> (ord.rbt_ins less a aa ab ac,\n                          ord.rbt_ins less' a' a'a a'b a'c)\n                         \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel", "case (1 f f' a a' b b' t t')"], ["proof (state)\nthis:\n  (f, f') \\<in> Ra \\<rightarrow> Rb \\<rightarrow> Rb \\<rightarrow> Rb\n  (a, a') \\<in> Ra\n  (b, b') \\<in> Rb\n  (t, t') \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel\n\ngoal (1 subgoal):\n 1. \\<And>a a' aa a'a ab a'b ac a'c.\n       \\<lbrakk>(a, a')\n                \\<in> Ra \\<rightarrow> Rb \\<rightarrow> Rb \\<rightarrow> Rb;\n        (aa, a'a) \\<in> Ra; (ab, a'b) \\<in> Rb;\n        (ac, a'c) \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel\\<rbrakk>\n       \\<Longrightarrow> (ord.rbt_ins less a aa ab ac,\n                          ord.rbt_ins less' a' a'a a'b a'c)\n                         \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel", "thus ?case"], ["proof (prove)\nusing this:\n  (f, f') \\<in> Ra \\<rightarrow> Rb \\<rightarrow> Rb \\<rightarrow> Rb\n  (a, a') \\<in> Ra\n  (b, b') \\<in> Rb\n  (t, t') \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel\n\ngoal (1 subgoal):\n 1. (ord.rbt_ins less f a b t, ord.rbt_ins less' f' a' b' t')\n    \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel", "apply (induct f' a' b' t' arbitrary: f a b t rule: ord.rbt_ins.induct)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>f k v fa a b t.\n       \\<lbrakk>(fa, f)\n                \\<in> Ra \\<rightarrow> Rb \\<rightarrow> Rb \\<rightarrow> Rb;\n        (a, k) \\<in> Ra; (b, v) \\<in> Rb;\n        (t, rbt.Empty) \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel\\<rbrakk>\n       \\<Longrightarrow> (ord.rbt_ins less fa a b t,\n                          ord.rbt_ins less' f k v rbt.Empty)\n                         \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel\n 2. \\<And>f k v l x y r fa a b t.\n       \\<lbrakk>\\<And>fa a b t.\n                   \\<lbrakk>?less16 k x;\n                    (fa, f)\n                    \\<in> Ra \\<rightarrow>\n                          Rb \\<rightarrow> Rb \\<rightarrow> Rb;\n                    (a, k) \\<in> Ra; (b, v) \\<in> Rb;\n                    (t, l) \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel\\<rbrakk>\n                   \\<Longrightarrow> (ord.rbt_ins less fa a b t,\nord.rbt_ins less' f k v l)\n                                     \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel;\n        \\<And>fa a b t.\n           \\<lbrakk>\\<not> ?less16 k x; ?less16 x k;\n            (fa, f)\n            \\<in> Ra \\<rightarrow> Rb \\<rightarrow> Rb \\<rightarrow> Rb;\n            (a, k) \\<in> Ra; (b, v) \\<in> Rb;\n            (t, r) \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel\\<rbrakk>\n           \\<Longrightarrow> (ord.rbt_ins less fa a b t,\n                              ord.rbt_ins less' f k v r)\n                             \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel;\n        (fa, f) \\<in> Ra \\<rightarrow> Rb \\<rightarrow> Rb \\<rightarrow> Rb;\n        (a, k) \\<in> Ra; (b, v) \\<in> Rb;\n        (t, Branch color.B l x y r) \\<in> \\<langle>Ra,\n        Rb\\<rangle>rbt_rel\\<rbrakk>\n       \\<Longrightarrow> (ord.rbt_ins less fa a b t,\n                          ord.rbt_ins less' f k v (Branch color.B l x y r))\n                         \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel\n 3. \\<And>f k v l x y r fa a b t.\n       \\<lbrakk>\\<And>fa a b t.\n                   \\<lbrakk>?less16 k x;\n                    (fa, f)\n                    \\<in> Ra \\<rightarrow>\n                          Rb \\<rightarrow> Rb \\<rightarrow> Rb;\n                    (a, k) \\<in> Ra; (b, v) \\<in> Rb;\n                    (t, l) \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel\\<rbrakk>\n                   \\<Longrightarrow> (ord.rbt_ins less fa a b t,\nord.rbt_ins less' f k v l)\n                                     \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel;\n        \\<And>fa a b t.\n           \\<lbrakk>\\<not> ?less16 k x; ?less16 x k;\n            (fa, f)\n            \\<in> Ra \\<rightarrow> Rb \\<rightarrow> Rb \\<rightarrow> Rb;\n            (a, k) \\<in> Ra; (b, v) \\<in> Rb;\n            (t, r) \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel\\<rbrakk>\n           \\<Longrightarrow> (ord.rbt_ins less fa a b t,\n                              ord.rbt_ins less' f k v r)\n                             \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel;\n        (fa, f) \\<in> Ra \\<rightarrow> Rb \\<rightarrow> Rb \\<rightarrow> Rb;\n        (a, k) \\<in> Ra; (b, v) \\<in> Rb;\n        (t, Branch color.R l x y r) \\<in> \\<langle>Ra,\n        Rb\\<rangle>rbt_rel\\<rbrakk>\n       \\<Longrightarrow> (ord.rbt_ins less fa a b t,\n                          ord.rbt_ins less' f k v (Branch color.R l x y r))\n                         \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel", "apply (elim_all rbt_rel_elims color_rel_elims)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>f k v fa a b t.\n       \\<lbrakk>(fa, f)\n                \\<in> Ra \\<rightarrow> Rb \\<rightarrow> Rb \\<rightarrow> Rb;\n        (a, k) \\<in> Ra; (b, v) \\<in> Rb; t = rbt.Empty\\<rbrakk>\n       \\<Longrightarrow> (ord.rbt_ins less fa a b t,\n                          ord.rbt_ins less' f k v rbt.Empty)\n                         \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel\n 2. \\<And>f k v l x y r fa a b t c la aa ba ra.\n       \\<lbrakk>\\<And>fa a b t.\n                   \\<lbrakk>?less16 k x;\n                    (fa, f)\n                    \\<in> Ra \\<rightarrow>\n                          Rb \\<rightarrow> Rb \\<rightarrow> Rb;\n                    (a, k) \\<in> Ra; (b, v) \\<in> Rb;\n                    (t, l) \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel\\<rbrakk>\n                   \\<Longrightarrow> (ord.rbt_ins less fa a b t,\nord.rbt_ins less' f k v l)\n                                     \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel;\n        \\<And>fa a b t.\n           \\<lbrakk>\\<not> ?less16 k x; ?less16 x k;\n            (fa, f)\n            \\<in> Ra \\<rightarrow> Rb \\<rightarrow> Rb \\<rightarrow> Rb;\n            (a, k) \\<in> Ra; (b, v) \\<in> Rb;\n            (t, r) \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel\\<rbrakk>\n           \\<Longrightarrow> (ord.rbt_ins less fa a b t,\n                              ord.rbt_ins less' f k v r)\n                             \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel;\n        (fa, f) \\<in> Ra \\<rightarrow> Rb \\<rightarrow> Rb \\<rightarrow> Rb;\n        (a, k) \\<in> Ra; (b, v) \\<in> Rb; t = Branch c la aa ba ra;\n        (la, l) \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel; (aa, x) \\<in> Ra;\n        (ba, y) \\<in> Rb; (ra, r) \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel;\n        c = color.B\\<rbrakk>\n       \\<Longrightarrow> (ord.rbt_ins less fa a b t,\n                          ord.rbt_ins less' f k v (Branch color.B l x y r))\n                         \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel\n 3. \\<And>f k v l x y r fa a b t c la aa ba ra.\n       \\<lbrakk>\\<And>fa a b t.\n                   \\<lbrakk>?less16 k x;\n                    (fa, f)\n                    \\<in> Ra \\<rightarrow>\n                          Rb \\<rightarrow> Rb \\<rightarrow> Rb;\n                    (a, k) \\<in> Ra; (b, v) \\<in> Rb;\n                    (t, l) \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel\\<rbrakk>\n                   \\<Longrightarrow> (ord.rbt_ins less fa a b t,\nord.rbt_ins less' f k v l)\n                                     \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel;\n        \\<And>fa a b t.\n           \\<lbrakk>\\<not> ?less16 k x; ?less16 x k;\n            (fa, f)\n            \\<in> Ra \\<rightarrow> Rb \\<rightarrow> Rb \\<rightarrow> Rb;\n            (a, k) \\<in> Ra; (b, v) \\<in> Rb;\n            (t, r) \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel\\<rbrakk>\n           \\<Longrightarrow> (ord.rbt_ins less fa a b t,\n                              ord.rbt_ins less' f k v r)\n                             \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel;\n        (fa, f) \\<in> Ra \\<rightarrow> Rb \\<rightarrow> Rb \\<rightarrow> Rb;\n        (a, k) \\<in> Ra; (b, v) \\<in> Rb; t = Branch c la aa ba ra;\n        (la, l) \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel; (aa, x) \\<in> Ra;\n        (ba, y) \\<in> Rb; (ra, r) \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel;\n        c = color.R\\<rbrakk>\n       \\<Longrightarrow> (ord.rbt_ins less fa a b t,\n                          ord.rbt_ins less' f k v (Branch color.R l x y r))\n                         \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel", "apply (simp_all only: ord.rbt_ins.simps rbt_ins.simps)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>f k v fa a b t.\n       \\<lbrakk>(fa, f)\n                \\<in> Ra \\<rightarrow> Rb \\<rightarrow> Rb \\<rightarrow> Rb;\n        (a, k) \\<in> Ra; (b, v) \\<in> Rb; t = rbt.Empty\\<rbrakk>\n       \\<Longrightarrow> (Branch color.R rbt.Empty a b rbt.Empty,\n                          Branch color.R rbt.Empty k v rbt.Empty)\n                         \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel\n 2. \\<And>f k v l x y r fa a b t c la aa ba ra.\n       \\<lbrakk>\\<And>fa a b t.\n                   \\<lbrakk>?less16 k x;\n                    (fa, f)\n                    \\<in> Ra \\<rightarrow>\n                          Rb \\<rightarrow> Rb \\<rightarrow> Rb;\n                    (a, k) \\<in> Ra; (b, v) \\<in> Rb;\n                    (t, l) \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel\\<rbrakk>\n                   \\<Longrightarrow> (ord.rbt_ins less fa a b t,\nord.rbt_ins less' f k v l)\n                                     \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel;\n        \\<And>fa a b t.\n           \\<lbrakk>\\<not> ?less16 k x; ?less16 x k;\n            (fa, f)\n            \\<in> Ra \\<rightarrow> Rb \\<rightarrow> Rb \\<rightarrow> Rb;\n            (a, k) \\<in> Ra; (b, v) \\<in> Rb;\n            (t, r) \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel\\<rbrakk>\n           \\<Longrightarrow> (ord.rbt_ins less fa a b t,\n                              ord.rbt_ins less' f k v r)\n                             \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel;\n        (fa, f) \\<in> Ra \\<rightarrow> Rb \\<rightarrow> Rb \\<rightarrow> Rb;\n        (a, k) \\<in> Ra; (b, v) \\<in> Rb; t = Branch color.B la aa ba ra;\n        (la, l) \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel; (aa, x) \\<in> Ra;\n        (ba, y) \\<in> Rb; (ra, r) \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel;\n        c = color.B\\<rbrakk>\n       \\<Longrightarrow> (if less a aa\n                          then balance (ord.rbt_ins less fa a b la) aa ba ra\n                          else if less aa a\n                               then balance la aa ba\n                                     (ord.rbt_ins less fa a b ra)\n                               else Branch color.B la aa (fa a ba b) ra,\n                          if less' k x\n                          then balance (ord.rbt_ins less' f k v l) x y r\n                          else if less' x k\n                               then balance l x y\n                                     (ord.rbt_ins less' f k v r)\n                               else Branch color.B l x (f k y v) r)\n                         \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel\n 3. \\<And>f k v l x y r fa a b t c la aa ba ra.\n       \\<lbrakk>\\<And>fa a b t.\n                   \\<lbrakk>?less16 k x;\n                    (fa, f)\n                    \\<in> Ra \\<rightarrow>\n                          Rb \\<rightarrow> Rb \\<rightarrow> Rb;\n                    (a, k) \\<in> Ra; (b, v) \\<in> Rb;\n                    (t, l) \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel\\<rbrakk>\n                   \\<Longrightarrow> (ord.rbt_ins less fa a b t,\nord.rbt_ins less' f k v l)\n                                     \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel;\n        \\<And>fa a b t.\n           \\<lbrakk>\\<not> ?less16 k x; ?less16 x k;\n            (fa, f)\n            \\<in> Ra \\<rightarrow> Rb \\<rightarrow> Rb \\<rightarrow> Rb;\n            (a, k) \\<in> Ra; (b, v) \\<in> Rb;\n            (t, r) \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel\\<rbrakk>\n           \\<Longrightarrow> (ord.rbt_ins less fa a b t,\n                              ord.rbt_ins less' f k v r)\n                             \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel;\n        (fa, f) \\<in> Ra \\<rightarrow> Rb \\<rightarrow> Rb \\<rightarrow> Rb;\n        (a, k) \\<in> Ra; (b, v) \\<in> Rb; t = Branch color.R la aa ba ra;\n        (la, l) \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel; (aa, x) \\<in> Ra;\n        (ba, y) \\<in> Rb; (ra, r) \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel;\n        c = color.R\\<rbrakk>\n       \\<Longrightarrow> (if less a aa\n                          then Branch color.R (ord.rbt_ins less fa a b la)\n                                aa ba ra\n                          else if less aa a\n                               then Branch color.R la aa ba\n                                     (ord.rbt_ins less fa a b ra)\n                               else Branch color.R la aa (fa a ba b) ra,\n                          if less' k x\n                          then Branch color.R (ord.rbt_ins less' f k v l) x\n                                y r\n                          else if less' x k\n                               then Branch color.R l x y\n                                     (ord.rbt_ins less' f k v r)\n                               else Branch color.R l x (f k y v) r)\n                         \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel", "apply parametricity+"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  (ord.rbt_ins less f a b t, ord.rbt_ins less' f' a' b' t')\n  \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel\n\ngoal:\nNo subgoals!", "qed"], ["", "term rbt_insert"], ["", "lemma param_rbt_insert[param]:\n    fixes less\n    assumes param_less[param]: \"(less,less') \\<in> Ra \\<rightarrow> Ra \\<rightarrow> Id\"\n    shows \"(ord.rbt_insert less,ord.rbt_insert less') \\<in> \n      Ra \\<rightarrow> Rb \\<rightarrow> \\<langle>Ra,Rb\\<rangle>rbt_rel \\<rightarrow> \\<langle>Ra,Rb\\<rangle>rbt_rel\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (ord.rbt_insert less, ord.rbt_insert less')\n    \\<in> Ra \\<rightarrow>\n          Rb \\<rightarrow>\n          \\<langle>Ra, Rb\\<rangle>rbt_rel \\<rightarrow> \\<langle>Ra,\n          Rb\\<rangle>rbt_rel", "unfolding rbt_insert_def ord.rbt_insert_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (ord.rbt_insert_with_key less (\\<lambda>_ _ nv. nv),\n     ord.rbt_insert_with_key less' (\\<lambda>_ _ nv. nv))\n    \\<in> Ra \\<rightarrow>\n          Rb \\<rightarrow>\n          \\<langle>Ra, Rb\\<rangle>rbt_rel \\<rightarrow> \\<langle>Ra,\n          Rb\\<rangle>rbt_rel", "unfolding rbt_insert_with_key_def[abs_def] \n      ord.rbt_insert_with_key_def[abs_def]"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>k v t.\n        paint color.B (ord.rbt_ins less (\\<lambda>_ _ nv. nv) k v t),\n     \\<lambda>k v t.\n        paint color.B (ord.rbt_ins less' (\\<lambda>_ _ nv. nv) k v t))\n    \\<in> Ra \\<rightarrow>\n          Rb \\<rightarrow>\n          \\<langle>Ra, Rb\\<rangle>rbt_rel \\<rightarrow> \\<langle>Ra,\n          Rb\\<rangle>rbt_rel", "by parametricity"], ["", "lemma param_rbt_lookup[param]:\n    fixes less\n    assumes param_less[param]: \"(less,less') \\<in> Ra \\<rightarrow> Ra \\<rightarrow> Id\"\n    shows \"(ord.rbt_lookup less,ord.rbt_lookup less') \\<in> \n             \\<langle>Ra,Rb\\<rangle>rbt_rel \\<rightarrow> Ra \\<rightarrow> \\<langle>Rb\\<rangle>option_rel\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (ord.rbt_lookup less, ord.rbt_lookup less')\n    \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel \\<rightarrow>\n          Ra \\<rightarrow> \\<langle>Rb\\<rangle>option_rel", "unfolding rbt_lookup_def ord.rbt_lookup_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (rec_rbt Map.empty\n      (\\<lambda>_ l x y r la ra k.\n          if less k x then la k else if less x k then ra k else Some y),\n     rec_rbt Map.empty\n      (\\<lambda>_ l x y r la ra k.\n          if less' k x then la k else if less' x k then ra k else Some y))\n    \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel \\<rightarrow>\n          Ra \\<rightarrow> \\<langle>Rb\\<rangle>option_rel", "by parametricity"], ["", "term balance_left"], ["", "lemma param_balance_left[param]: \n    \"(balance_left, balance_left) \\<in> \n      \\<langle>Ra,Rb\\<rangle>rbt_rel \\<rightarrow> Ra \\<rightarrow> Rb \\<rightarrow> \\<langle>Ra,Rb\\<rangle>rbt_rel \\<rightarrow> \\<langle>Ra,Rb\\<rangle>rbt_rel\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (balance_left, balance_left)\n    \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel \\<rightarrow>\n          Ra \\<rightarrow>\n          Rb \\<rightarrow>\n          \\<langle>Ra, Rb\\<rangle>rbt_rel \\<rightarrow> \\<langle>Ra,\n          Rb\\<rangle>rbt_rel", "proof (intro fun_relI, goal_cases)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a a' aa a'a ab a'b ac a'c.\n       \\<lbrakk>(a, a') \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel;\n        (aa, a'a) \\<in> Ra; (ab, a'b) \\<in> Rb;\n        (ac, a'c) \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel\\<rbrakk>\n       \\<Longrightarrow> (balance_left a aa ab ac,\n                          balance_left a' a'a a'b a'c)\n                         \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel", "case (1 l l' a a' b b' r r')"], ["proof (state)\nthis:\n  (l, l') \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel\n  (a, a') \\<in> Ra\n  (b, b') \\<in> Rb\n  (r, r') \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel\n\ngoal (1 subgoal):\n 1. \\<And>a a' aa a'a ab a'b ac a'c.\n       \\<lbrakk>(a, a') \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel;\n        (aa, a'a) \\<in> Ra; (ab, a'b) \\<in> Rb;\n        (ac, a'c) \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel\\<rbrakk>\n       \\<Longrightarrow> (balance_left a aa ab ac,\n                          balance_left a' a'a a'b a'c)\n                         \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel", "thus ?case"], ["proof (prove)\nusing this:\n  (l, l') \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel\n  (a, a') \\<in> Ra\n  (b, b') \\<in> Rb\n  (r, r') \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel\n\ngoal (1 subgoal):\n 1. (balance_left l a b r, balance_left l' a' b' r') \\<in> \\<langle>Ra,\n    Rb\\<rangle>rbt_rel", "apply (induct l a b r arbitrary: l' a' b' r' rule: balance_left.induct)"], ["proof (prove)\ngoal (11 subgoals):\n 1. \\<And>a k x b s y c l' a' b' r'.\n       \\<lbrakk>(Branch color.R a k x b, l') \\<in> \\<langle>Ra,\n                Rb\\<rangle>rbt_rel;\n        (s, a') \\<in> Ra; (y, b') \\<in> Rb;\n        (c, r') \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel\\<rbrakk>\n       \\<Longrightarrow> (balance_left (Branch color.R a k x b) s y c,\n                          balance_left l' a' b' r')\n                         \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel\n 2. \\<And>k x a s y b l' a' b' r'.\n       \\<lbrakk>(rbt.Empty, l') \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel;\n        (k, a') \\<in> Ra; (x, b') \\<in> Rb;\n        (Branch color.B a s y b, r') \\<in> \\<langle>Ra,\n        Rb\\<rangle>rbt_rel\\<rbrakk>\n       \\<Longrightarrow> (balance_left rbt.Empty k x\n                           (Branch color.B a s y b),\n                          balance_left l' a' b' r')\n                         \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel\n 3. \\<And>va vb vc vd k x a s y b l' a' b' r'.\n       \\<lbrakk>(Branch color.B va vb vc vd, l') \\<in> \\<langle>Ra,\n                Rb\\<rangle>rbt_rel;\n        (k, a') \\<in> Ra; (x, b') \\<in> Rb;\n        (Branch color.B a s y b, r') \\<in> \\<langle>Ra,\n        Rb\\<rangle>rbt_rel\\<rbrakk>\n       \\<Longrightarrow> (balance_left (Branch color.B va vb vc vd) k x\n                           (Branch color.B a s y b),\n                          balance_left l' a' b' r')\n                         \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel\n 4. \\<And>k x a s y b t z c l' a' b' r'.\n       \\<lbrakk>(rbt.Empty, l') \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel;\n        (k, a') \\<in> Ra; (x, b') \\<in> Rb;\n        (Branch color.R (Branch color.B a s y b) t z c, r')\n        \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel\\<rbrakk>\n       \\<Longrightarrow> (balance_left rbt.Empty k x\n                           (Branch color.R (Branch color.B a s y b) t z c),\n                          balance_left l' a' b' r')\n                         \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel\n 5. \\<And>va vb vc vd k x a s y b t z c l' a' b' r'.\n       \\<lbrakk>(Branch color.B va vb vc vd, l') \\<in> \\<langle>Ra,\n                Rb\\<rangle>rbt_rel;\n        (k, a') \\<in> Ra; (x, b') \\<in> Rb;\n        (Branch color.R (Branch color.B a s y b) t z c, r')\n        \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel\\<rbrakk>\n       \\<Longrightarrow> (balance_left (Branch color.B va vb vc vd) k x\n                           (Branch color.R (Branch color.B a s y b) t z c),\n                          balance_left l' a' b' r')\n                         \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel\n 6. \\<And>k x l' a' b' r'.\n       \\<lbrakk>(rbt.Empty, l') \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel;\n        (k, a') \\<in> Ra; (x, b') \\<in> Rb;\n        (rbt.Empty, r') \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel\\<rbrakk>\n       \\<Longrightarrow> (balance_left rbt.Empty k x rbt.Empty,\n                          balance_left l' a' b' r')\n                         \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel\n 7. \\<And>k x vb vc vd l' a' b' r'.\n       \\<lbrakk>(rbt.Empty, l') \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel;\n        (k, a') \\<in> Ra; (x, b') \\<in> Rb;\n        (Branch color.R rbt.Empty vb vc vd, r') \\<in> \\<langle>Ra,\n        Rb\\<rangle>rbt_rel\\<rbrakk>\n       \\<Longrightarrow> (balance_left rbt.Empty k x\n                           (Branch color.R rbt.Empty vb vc vd),\n                          balance_left l' a' b' r')\n                         \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel\n 8. \\<And>k x ve vf vg vh vb vc vd l' a' b' r'.\n       \\<lbrakk>(rbt.Empty, l') \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel;\n        (k, a') \\<in> Ra; (x, b') \\<in> Rb;\n        (Branch color.R (Branch color.R ve vf vg vh) vb vc vd, r')\n        \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel\\<rbrakk>\n       \\<Longrightarrow> (balance_left rbt.Empty k x\n                           (Branch color.R (Branch color.R ve vf vg vh) vb\n                             vc vd),\n                          balance_left l' a' b' r')\n                         \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel\n 9. \\<And>va vb vc vd k x l' a' b' r'.\n       \\<lbrakk>(Branch color.B va vb vc vd, l') \\<in> \\<langle>Ra,\n                Rb\\<rangle>rbt_rel;\n        (k, a') \\<in> Ra; (x, b') \\<in> Rb;\n        (rbt.Empty, r') \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel\\<rbrakk>\n       \\<Longrightarrow> (balance_left (Branch color.B va vb vc vd) k x\n                           rbt.Empty,\n                          balance_left l' a' b' r')\n                         \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel\n 10. \\<And>va vb vc vd k x vf vg vh l' a' b' r'.\n        \\<lbrakk>(Branch color.B va vb vc vd, l') \\<in> \\<langle>Ra,\n                 Rb\\<rangle>rbt_rel;\n         (k, a') \\<in> Ra; (x, b') \\<in> Rb;\n         (Branch color.R rbt.Empty vf vg vh, r') \\<in> \\<langle>Ra,\n         Rb\\<rangle>rbt_rel\\<rbrakk>\n        \\<Longrightarrow> (balance_left (Branch color.B va vb vc vd) k x\n                            (Branch color.R rbt.Empty vf vg vh),\n                           balance_left l' a' b' r')\n                          \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel\nA total of 11 subgoals...", "apply (elim_all rbt_rel_elims color_rel_elims)"], ["proof (prove)\ngoal (11 subgoals):\n 1. \\<And>a k x b s y c l' a' b' r' c' l'a a'a b'a r'a.\n       \\<lbrakk>(s, a') \\<in> Ra; (y, b') \\<in> Rb;\n        (c, r') \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel;\n        l' = Branch c' l'a a'a b'a r'a;\n        (a, l'a) \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel; (k, a'a) \\<in> Ra;\n        (x, b'a) \\<in> Rb; (b, r'a) \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel;\n        c' = color.R\\<rbrakk>\n       \\<Longrightarrow> (balance_left (Branch color.R a k x b) s y c,\n                          balance_left l' a' b' r')\n                         \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel\n 2. \\<And>k x a s y b l' a' b' r' c' l'a a'a b'a r'a.\n       \\<lbrakk>(k, a') \\<in> Ra; (x, b') \\<in> Rb; l' = rbt.Empty;\n        r' = Branch c' l'a a'a b'a r'a;\n        (a, l'a) \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel; (s, a'a) \\<in> Ra;\n        (y, b'a) \\<in> Rb; (b, r'a) \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel;\n        c' = color.B\\<rbrakk>\n       \\<Longrightarrow> (balance_left rbt.Empty k x\n                           (Branch color.B a s y b),\n                          balance_left l' a' b' r')\n                         \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel\n 3. \\<And>va vb vc vd k x a s y b l' a' b' r' c' l'a a'a b'a r'a c'a l'b a'b\n       b'b r'b.\n       \\<lbrakk>(k, a') \\<in> Ra; (x, b') \\<in> Rb;\n        l' = Branch c' l'a a'a b'a r'a;\n        (va, l'a) \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel; (vb, a'a) \\<in> Ra;\n        (vc, b'a) \\<in> Rb; (vd, r'a) \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel;\n        r' = Branch c'a l'b a'b b'b r'b;\n        (a, l'b) \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel; (s, a'b) \\<in> Ra;\n        (y, b'b) \\<in> Rb; (b, r'b) \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel;\n        c' = color.B; c'a = color.B\\<rbrakk>\n       \\<Longrightarrow> (balance_left (Branch color.B va vb vc vd) k x\n                           (Branch color.B a s y b),\n                          balance_left l' a' b' r')\n                         \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel\n 4. \\<And>k x a s y b t z c l' a' b' r' c' l'a a'a b'a r'a c'a l'b a'b b'b\n       r'b.\n       \\<lbrakk>(k, a') \\<in> Ra; (x, b') \\<in> Rb; l' = rbt.Empty;\n        r' = Branch c' l'a a'a b'a r'a; (t, a'a) \\<in> Ra;\n        (z, b'a) \\<in> Rb; (c, r'a) \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel;\n        l'a = Branch c'a l'b a'b b'b r'b;\n        (a, l'b) \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel; (s, a'b) \\<in> Ra;\n        (y, b'b) \\<in> Rb; (b, r'b) \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel;\n        c' = color.R; c'a = color.B\\<rbrakk>\n       \\<Longrightarrow> (balance_left rbt.Empty k x\n                           (Branch color.R (Branch color.B a s y b) t z c),\n                          balance_left l' a' b' r')\n                         \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel\n 5. \\<And>va vb vc vd k x a s y b t z c l' a' b' r' c' l'a a'a b'a r'a c'a\n       l'b a'b b'b r'b c'b l'c a'c b'c r'c.\n       \\<lbrakk>(k, a') \\<in> Ra; (x, b') \\<in> Rb;\n        l' = Branch c' l'a a'a b'a r'a;\n        (va, l'a) \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel; (vb, a'a) \\<in> Ra;\n        (vc, b'a) \\<in> Rb; (vd, r'a) \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel;\n        r' = Branch c'a l'b a'b b'b r'b; (t, a'b) \\<in> Ra;\n        (z, b'b) \\<in> Rb; (c, r'b) \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel;\n        l'b = Branch c'b l'c a'c b'c r'c;\n        (a, l'c) \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel; (s, a'c) \\<in> Ra;\n        (y, b'c) \\<in> Rb; (b, r'c) \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel;\n        c'a = color.R; c' = color.B; c'b = color.B\\<rbrakk>\n       \\<Longrightarrow> (balance_left (Branch color.B va vb vc vd) k x\n                           (Branch color.R (Branch color.B a s y b) t z c),\n                          balance_left l' a' b' r')\n                         \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel\n 6. \\<And>k x l' a' b' r'.\n       \\<lbrakk>(k, a') \\<in> Ra; (x, b') \\<in> Rb; l' = rbt.Empty;\n        r' = rbt.Empty\\<rbrakk>\n       \\<Longrightarrow> (balance_left rbt.Empty k x rbt.Empty,\n                          balance_left l' a' b' r')\n                         \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel\n 7. \\<And>k x vb vc vd l' a' b' r' c' l'a a'a b'a r'a.\n       \\<lbrakk>(k, a') \\<in> Ra; (x, b') \\<in> Rb; l' = rbt.Empty;\n        r' = Branch c' l'a a'a b'a r'a; (vb, a'a) \\<in> Ra;\n        (vc, b'a) \\<in> Rb; (vd, r'a) \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel;\n        l'a = rbt.Empty; c' = color.R\\<rbrakk>\n       \\<Longrightarrow> (balance_left rbt.Empty k x\n                           (Branch color.R rbt.Empty vb vc vd),\n                          balance_left l' a' b' r')\n                         \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel\n 8. \\<And>k x ve vf vg vh vb vc vd l' a' b' r' c' l'a a'a b'a r'a c'a l'b\n       a'b b'b r'b.\n       \\<lbrakk>(k, a') \\<in> Ra; (x, b') \\<in> Rb; l' = rbt.Empty;\n        r' = Branch c' l'a a'a b'a r'a; (vb, a'a) \\<in> Ra;\n        (vc, b'a) \\<in> Rb; (vd, r'a) \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel;\n        l'a = Branch c'a l'b a'b b'b r'b;\n        (ve, l'b) \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel; (vf, a'b) \\<in> Ra;\n        (vg, b'b) \\<in> Rb; (vh, r'b) \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel;\n        c' = color.R; c'a = color.R\\<rbrakk>\n       \\<Longrightarrow> (balance_left rbt.Empty k x\n                           (Branch color.R (Branch color.R ve vf vg vh) vb\n                             vc vd),\n                          balance_left l' a' b' r')\n                         \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel\n 9. \\<And>va vb vc vd k x l' a' b' r' c' l'a a'a b'a r'a.\n       \\<lbrakk>(k, a') \\<in> Ra; (x, b') \\<in> Rb; r' = rbt.Empty;\n        l' = Branch c' l'a a'a b'a r'a;\n        (va, l'a) \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel; (vb, a'a) \\<in> Ra;\n        (vc, b'a) \\<in> Rb; (vd, r'a) \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel;\n        c' = color.B\\<rbrakk>\n       \\<Longrightarrow> (balance_left (Branch color.B va vb vc vd) k x\n                           rbt.Empty,\n                          balance_left l' a' b' r')\n                         \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel\n 10. \\<And>va vb vc vd k x vf vg vh l' a' b' r' c' l'a a'a b'a r'a c'a l'b\n        a'b b'b r'b.\n        \\<lbrakk>(k, a') \\<in> Ra; (x, b') \\<in> Rb;\n         l' = Branch c' l'a a'a b'a r'a;\n         (va, l'a) \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel;\n         (vb, a'a) \\<in> Ra; (vc, b'a) \\<in> Rb;\n         (vd, r'a) \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel;\n         r' = Branch c'a l'b a'b b'b r'b; (vf, a'b) \\<in> Ra;\n         (vg, b'b) \\<in> Rb;\n         (vh, r'b) \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel; l'b = rbt.Empty;\n         c'a = color.R; c' = color.B\\<rbrakk>\n        \\<Longrightarrow> (balance_left (Branch color.B va vb vc vd) k x\n                            (Branch color.R rbt.Empty vf vg vh),\n                           balance_left l' a' b' r')\n                          \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel\nA total of 11 subgoals...", "apply (simp_all only: balance_left.simps)"], ["proof (prove)\ngoal (11 subgoals):\n 1. \\<And>a k x b s y c l' a' b' r' c' l'a a'a b'a r'a.\n       \\<lbrakk>(s, a') \\<in> Ra; (y, b') \\<in> Rb;\n        (c, r') \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel;\n        l' = Branch color.R l'a a'a b'a r'a;\n        (a, l'a) \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel; (k, a'a) \\<in> Ra;\n        (x, b'a) \\<in> Rb; (b, r'a) \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel;\n        c' = color.R\\<rbrakk>\n       \\<Longrightarrow> (Branch color.R (Branch color.B a k x b) s y c,\n                          Branch color.R (Branch color.B l'a a'a b'a r'a) a'\n                           b' r')\n                         \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel\n 2. \\<And>k x a s y b l' a' b' r' c' l'a a'a b'a r'a.\n       \\<lbrakk>(k, a') \\<in> Ra; (x, b') \\<in> Rb; l' = rbt.Empty;\n        r' = Branch color.B l'a a'a b'a r'a;\n        (a, l'a) \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel; (s, a'a) \\<in> Ra;\n        (y, b'a) \\<in> Rb; (b, r'a) \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel;\n        c' = color.B\\<rbrakk>\n       \\<Longrightarrow> (balance rbt.Empty k x (Branch color.R a s y b),\n                          balance rbt.Empty a' b'\n                           (Branch color.R l'a a'a b'a r'a))\n                         \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel\n 3. \\<And>va vb vc vd k x a s y b l' a' b' r' c' l'a a'a b'a r'a c'a l'b a'b\n       b'b r'b.\n       \\<lbrakk>(k, a') \\<in> Ra; (x, b') \\<in> Rb;\n        l' = Branch color.B l'a a'a b'a r'a;\n        (va, l'a) \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel; (vb, a'a) \\<in> Ra;\n        (vc, b'a) \\<in> Rb; (vd, r'a) \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel;\n        r' = Branch color.B l'b a'b b'b r'b;\n        (a, l'b) \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel; (s, a'b) \\<in> Ra;\n        (y, b'b) \\<in> Rb; (b, r'b) \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel;\n        c' = color.B; c'a = color.B\\<rbrakk>\n       \\<Longrightarrow> (balance (Branch color.B va vb vc vd) k x\n                           (Branch color.R a s y b),\n                          balance (Branch color.B l'a a'a b'a r'a) a' b'\n                           (Branch color.R l'b a'b b'b r'b))\n                         \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel\n 4. \\<And>k x a s y b t z c l' a' b' r' c' l'a a'a b'a r'a c'a l'b a'b b'b\n       r'b.\n       \\<lbrakk>(k, a') \\<in> Ra; (x, b') \\<in> Rb; l' = rbt.Empty;\n        r' = Branch color.R (Branch color.B l'b a'b b'b r'b) a'a b'a r'a;\n        (t, a'a) \\<in> Ra; (z, b'a) \\<in> Rb;\n        (c, r'a) \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel;\n        l'a = Branch color.B l'b a'b b'b r'b;\n        (a, l'b) \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel; (s, a'b) \\<in> Ra;\n        (y, b'b) \\<in> Rb; (b, r'b) \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel;\n        c' = color.R; c'a = color.B\\<rbrakk>\n       \\<Longrightarrow> (Branch color.R (Branch color.B rbt.Empty k x a) s\n                           y (balance b t z (paint color.R c)),\n                          Branch color.R\n                           (Branch color.B rbt.Empty a' b' l'b) a'b b'b\n                           (balance r'b a'a b'a (paint color.R r'a)))\n                         \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel\n 5. \\<And>va vb vc vd k x a s y b t z c l' a' b' r' c' l'a a'a b'a r'a c'a\n       l'b a'b b'b r'b c'b l'c a'c b'c r'c.\n       \\<lbrakk>(k, a') \\<in> Ra; (x, b') \\<in> Rb;\n        l' = Branch color.B l'a a'a b'a r'a;\n        (va, l'a) \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel; (vb, a'a) \\<in> Ra;\n        (vc, b'a) \\<in> Rb; (vd, r'a) \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel;\n        r' = Branch color.R (Branch color.B l'c a'c b'c r'c) a'b b'b r'b;\n        (t, a'b) \\<in> Ra; (z, b'b) \\<in> Rb;\n        (c, r'b) \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel;\n        l'b = Branch color.B l'c a'c b'c r'c;\n        (a, l'c) \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel; (s, a'c) \\<in> Ra;\n        (y, b'c) \\<in> Rb; (b, r'c) \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel;\n        c'a = color.R; c' = color.B; c'b = color.B\\<rbrakk>\n       \\<Longrightarrow> (Branch color.R\n                           (Branch color.B (Branch color.B va vb vc vd) k x\n                             a)\n                           s y (balance b t z (paint color.R c)),\n                          Branch color.R\n                           (Branch color.B (Branch color.B l'a a'a b'a r'a)\n                             a' b' l'c)\n                           a'c b'c\n                           (balance r'c a'b b'b (paint color.R r'b)))\n                         \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel\n 6. \\<And>k x l' a' b' r'.\n       \\<lbrakk>(k, a') \\<in> Ra; (x, b') \\<in> Rb; l' = rbt.Empty;\n        r' = rbt.Empty\\<rbrakk>\n       \\<Longrightarrow> (rbt.Empty, rbt.Empty) \\<in> \\<langle>Ra,\n                         Rb\\<rangle>rbt_rel\n 7. \\<And>k x vb vc vd l' a' b' r' c' l'a a'a b'a r'a.\n       \\<lbrakk>(k, a') \\<in> Ra; (x, b') \\<in> Rb; l' = rbt.Empty;\n        r' = Branch color.R rbt.Empty a'a b'a r'a; (vb, a'a) \\<in> Ra;\n        (vc, b'a) \\<in> Rb; (vd, r'a) \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel;\n        l'a = rbt.Empty; c' = color.R\\<rbrakk>\n       \\<Longrightarrow> (rbt.Empty, rbt.Empty) \\<in> \\<langle>Ra,\n                         Rb\\<rangle>rbt_rel\n 8. \\<And>k x ve vf vg vh vb vc vd l' a' b' r' c' l'a a'a b'a r'a c'a l'b\n       a'b b'b r'b.\n       \\<lbrakk>(k, a') \\<in> Ra; (x, b') \\<in> Rb; l' = rbt.Empty;\n        r' = Branch color.R (Branch color.R l'b a'b b'b r'b) a'a b'a r'a;\n        (vb, a'a) \\<in> Ra; (vc, b'a) \\<in> Rb;\n        (vd, r'a) \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel;\n        l'a = Branch color.R l'b a'b b'b r'b;\n        (ve, l'b) \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel; (vf, a'b) \\<in> Ra;\n        (vg, b'b) \\<in> Rb; (vh, r'b) \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel;\n        c' = color.R; c'a = color.R\\<rbrakk>\n       \\<Longrightarrow> (rbt.Empty, rbt.Empty) \\<in> \\<langle>Ra,\n                         Rb\\<rangle>rbt_rel\n 9. \\<And>va vb vc vd k x l' a' b' r' c' l'a a'a b'a r'a.\n       \\<lbrakk>(k, a') \\<in> Ra; (x, b') \\<in> Rb; r' = rbt.Empty;\n        l' = Branch color.B l'a a'a b'a r'a;\n        (va, l'a) \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel; (vb, a'a) \\<in> Ra;\n        (vc, b'a) \\<in> Rb; (vd, r'a) \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel;\n        c' = color.B\\<rbrakk>\n       \\<Longrightarrow> (rbt.Empty, rbt.Empty) \\<in> \\<langle>Ra,\n                         Rb\\<rangle>rbt_rel\n 10. \\<And>va vb vc vd k x vf vg vh l' a' b' r' c' l'a a'a b'a r'a c'a l'b\n        a'b b'b r'b.\n        \\<lbrakk>(k, a') \\<in> Ra; (x, b') \\<in> Rb;\n         l' = Branch color.B l'a a'a b'a r'a;\n         (va, l'a) \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel;\n         (vb, a'a) \\<in> Ra; (vc, b'a) \\<in> Rb;\n         (vd, r'a) \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel;\n         r' = Branch color.R rbt.Empty a'b b'b r'b; (vf, a'b) \\<in> Ra;\n         (vg, b'b) \\<in> Rb;\n         (vh, r'b) \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel; l'b = rbt.Empty;\n         c'a = color.R; c' = color.B\\<rbrakk>\n        \\<Longrightarrow> (rbt.Empty, rbt.Empty) \\<in> \\<langle>Ra,\n                          Rb\\<rangle>rbt_rel\nA total of 11 subgoals...", "apply parametricity+"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  (balance_left l a b r, balance_left l' a' b' r') \\<in> \\<langle>Ra,\n  Rb\\<rangle>rbt_rel\n\ngoal:\nNo subgoals!", "qed"], ["", "term balance_right"], ["", "lemma param_balance_right[param]: \n    \"(balance_right, balance_right) \\<in> \n      \\<langle>Ra,Rb\\<rangle>rbt_rel \\<rightarrow> Ra \\<rightarrow> Rb \\<rightarrow> \\<langle>Ra,Rb\\<rangle>rbt_rel \\<rightarrow> \\<langle>Ra,Rb\\<rangle>rbt_rel\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (balance_right, balance_right)\n    \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel \\<rightarrow>\n          Ra \\<rightarrow>\n          Rb \\<rightarrow>\n          \\<langle>Ra, Rb\\<rangle>rbt_rel \\<rightarrow> \\<langle>Ra,\n          Rb\\<rangle>rbt_rel", "proof (intro fun_relI, goal_cases)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a a' aa a'a ab a'b ac a'c.\n       \\<lbrakk>(a, a') \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel;\n        (aa, a'a) \\<in> Ra; (ab, a'b) \\<in> Rb;\n        (ac, a'c) \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel\\<rbrakk>\n       \\<Longrightarrow> (balance_right a aa ab ac,\n                          balance_right a' a'a a'b a'c)\n                         \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel", "case (1 l l' a a' b b' r r')"], ["proof (state)\nthis:\n  (l, l') \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel\n  (a, a') \\<in> Ra\n  (b, b') \\<in> Rb\n  (r, r') \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel\n\ngoal (1 subgoal):\n 1. \\<And>a a' aa a'a ab a'b ac a'c.\n       \\<lbrakk>(a, a') \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel;\n        (aa, a'a) \\<in> Ra; (ab, a'b) \\<in> Rb;\n        (ac, a'c) \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel\\<rbrakk>\n       \\<Longrightarrow> (balance_right a aa ab ac,\n                          balance_right a' a'a a'b a'c)\n                         \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel", "thus ?case"], ["proof (prove)\nusing this:\n  (l, l') \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel\n  (a, a') \\<in> Ra\n  (b, b') \\<in> Rb\n  (r, r') \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel\n\ngoal (1 subgoal):\n 1. (balance_right l a b r, balance_right l' a' b' r') \\<in> \\<langle>Ra,\n    Rb\\<rangle>rbt_rel", "apply (induct l a b r arbitrary: l' a' b' r' rule: balance_right.induct)"], ["proof (prove)\ngoal (11 subgoals):\n 1. \\<And>a k x b s y c l' a' b' r'.\n       \\<lbrakk>(a, l') \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel;\n        (k, a') \\<in> Ra; (x, b') \\<in> Rb;\n        (Branch color.R b s y c, r') \\<in> \\<langle>Ra,\n        Rb\\<rangle>rbt_rel\\<rbrakk>\n       \\<Longrightarrow> (balance_right a k x (Branch color.R b s y c),\n                          balance_right l' a' b' r')\n                         \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel\n 2. \\<And>a k x b s y l' a' b' r'.\n       \\<lbrakk>(Branch color.B a k x b, l') \\<in> \\<langle>Ra,\n                Rb\\<rangle>rbt_rel;\n        (s, a') \\<in> Ra; (y, b') \\<in> Rb;\n        (rbt.Empty, r') \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel\\<rbrakk>\n       \\<Longrightarrow> (balance_right (Branch color.B a k x b) s y\n                           rbt.Empty,\n                          balance_right l' a' b' r')\n                         \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel\n 3. \\<And>a k x b s y va vb vc vd l' a' b' r'.\n       \\<lbrakk>(Branch color.B a k x b, l') \\<in> \\<langle>Ra,\n                Rb\\<rangle>rbt_rel;\n        (s, a') \\<in> Ra; (y, b') \\<in> Rb;\n        (Branch color.B va vb vc vd, r') \\<in> \\<langle>Ra,\n        Rb\\<rangle>rbt_rel\\<rbrakk>\n       \\<Longrightarrow> (balance_right (Branch color.B a k x b) s y\n                           (Branch color.B va vb vc vd),\n                          balance_right l' a' b' r')\n                         \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel\n 4. \\<And>a k x b s y c t z l' a' b' r'.\n       \\<lbrakk>(Branch color.R a k x (Branch color.B b s y c), l')\n                \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel;\n        (t, a') \\<in> Ra; (z, b') \\<in> Rb;\n        (rbt.Empty, r') \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel\\<rbrakk>\n       \\<Longrightarrow> (balance_right\n                           (Branch color.R a k x (Branch color.B b s y c)) t\n                           z rbt.Empty,\n                          balance_right l' a' b' r')\n                         \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel\n 5. \\<And>a k x b s y c t z va vb vc vd l' a' b' r'.\n       \\<lbrakk>(Branch color.R a k x (Branch color.B b s y c), l')\n                \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel;\n        (t, a') \\<in> Ra; (z, b') \\<in> Rb;\n        (Branch color.B va vb vc vd, r') \\<in> \\<langle>Ra,\n        Rb\\<rangle>rbt_rel\\<rbrakk>\n       \\<Longrightarrow> (balance_right\n                           (Branch color.R a k x (Branch color.B b s y c)) t\n                           z (Branch color.B va vb vc vd),\n                          balance_right l' a' b' r')\n                         \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel\n 6. \\<And>k x l' a' b' r'.\n       \\<lbrakk>(rbt.Empty, l') \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel;\n        (k, a') \\<in> Ra; (x, b') \\<in> Rb;\n        (rbt.Empty, r') \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel\\<rbrakk>\n       \\<Longrightarrow> (balance_right rbt.Empty k x rbt.Empty,\n                          balance_right l' a' b' r')\n                         \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel\n 7. \\<And>va vb vc k x l' a' b' r'.\n       \\<lbrakk>(Branch color.R va vb vc rbt.Empty, l') \\<in> \\<langle>Ra,\n                Rb\\<rangle>rbt_rel;\n        (k, a') \\<in> Ra; (x, b') \\<in> Rb;\n        (rbt.Empty, r') \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel\\<rbrakk>\n       \\<Longrightarrow> (balance_right (Branch color.R va vb vc rbt.Empty)\n                           k x rbt.Empty,\n                          balance_right l' a' b' r')\n                         \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel\n 8. \\<And>va vb vc ve vf vg vh k x l' a' b' r'.\n       \\<lbrakk>(Branch color.R va vb vc (Branch color.R ve vf vg vh), l')\n                \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel;\n        (k, a') \\<in> Ra; (x, b') \\<in> Rb;\n        (rbt.Empty, r') \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel\\<rbrakk>\n       \\<Longrightarrow> (balance_right\n                           (Branch color.R va vb vc\n                             (Branch color.R ve vf vg vh))\n                           k x rbt.Empty,\n                          balance_right l' a' b' r')\n                         \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel\n 9. \\<And>k x va vb vc vd l' a' b' r'.\n       \\<lbrakk>(rbt.Empty, l') \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel;\n        (k, a') \\<in> Ra; (x, b') \\<in> Rb;\n        (Branch color.B va vb vc vd, r') \\<in> \\<langle>Ra,\n        Rb\\<rangle>rbt_rel\\<rbrakk>\n       \\<Longrightarrow> (balance_right rbt.Empty k x\n                           (Branch color.B va vb vc vd),\n                          balance_right l' a' b' r')\n                         \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel\n 10. \\<And>ve vf vg k x va vb vc vd l' a' b' r'.\n        \\<lbrakk>(Branch color.R ve vf vg rbt.Empty, l') \\<in> \\<langle>Ra,\n                 Rb\\<rangle>rbt_rel;\n         (k, a') \\<in> Ra; (x, b') \\<in> Rb;\n         (Branch color.B va vb vc vd, r') \\<in> \\<langle>Ra,\n         Rb\\<rangle>rbt_rel\\<rbrakk>\n        \\<Longrightarrow> (balance_right (Branch color.R ve vf vg rbt.Empty)\n                            k x (Branch color.B va vb vc vd),\n                           balance_right l' a' b' r')\n                          \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel\nA total of 11 subgoals...", "apply (elim_all rbt_rel_elims color_rel_elims)"], ["proof (prove)\ngoal (11 subgoals):\n 1. \\<And>a k x b s y c l' a' b' r' c' l'a a'a b'a r'a.\n       \\<lbrakk>(a, l') \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel;\n        (k, a') \\<in> Ra; (x, b') \\<in> Rb; r' = Branch c' l'a a'a b'a r'a;\n        (b, l'a) \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel; (s, a'a) \\<in> Ra;\n        (y, b'a) \\<in> Rb; (c, r'a) \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel;\n        c' = color.R\\<rbrakk>\n       \\<Longrightarrow> (balance_right a k x (Branch color.R b s y c),\n                          balance_right l' a' b' r')\n                         \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel\n 2. \\<And>a k x b s y l' a' b' r' c' l'a a'a b'a r'a.\n       \\<lbrakk>(s, a') \\<in> Ra; (y, b') \\<in> Rb; r' = rbt.Empty;\n        l' = Branch c' l'a a'a b'a r'a;\n        (a, l'a) \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel; (k, a'a) \\<in> Ra;\n        (x, b'a) \\<in> Rb; (b, r'a) \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel;\n        c' = color.B\\<rbrakk>\n       \\<Longrightarrow> (balance_right (Branch color.B a k x b) s y\n                           rbt.Empty,\n                          balance_right l' a' b' r')\n                         \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel\n 3. \\<And>a k x b s y va vb vc vd l' a' b' r' c' l'a a'a b'a r'a c'a l'b a'b\n       b'b r'b.\n       \\<lbrakk>(s, a') \\<in> Ra; (y, b') \\<in> Rb;\n        l' = Branch c' l'a a'a b'a r'a;\n        (a, l'a) \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel; (k, a'a) \\<in> Ra;\n        (x, b'a) \\<in> Rb; (b, r'a) \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel;\n        r' = Branch c'a l'b a'b b'b r'b;\n        (va, l'b) \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel; (vb, a'b) \\<in> Ra;\n        (vc, b'b) \\<in> Rb; (vd, r'b) \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel;\n        c' = color.B; c'a = color.B\\<rbrakk>\n       \\<Longrightarrow> (balance_right (Branch color.B a k x b) s y\n                           (Branch color.B va vb vc vd),\n                          balance_right l' a' b' r')\n                         \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel\n 4. \\<And>a k x b s y c t z l' a' b' r' c' l'a a'a b'a r'a c'a l'b a'b b'b\n       r'b.\n       \\<lbrakk>(t, a') \\<in> Ra; (z, b') \\<in> Rb; r' = rbt.Empty;\n        l' = Branch c' l'a a'a b'a r'a;\n        (a, l'a) \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel; (k, a'a) \\<in> Ra;\n        (x, b'a) \\<in> Rb; r'a = Branch c'a l'b a'b b'b r'b;\n        (b, l'b) \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel; (s, a'b) \\<in> Ra;\n        (y, b'b) \\<in> Rb; (c, r'b) \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel;\n        c' = color.R; c'a = color.B\\<rbrakk>\n       \\<Longrightarrow> (balance_right\n                           (Branch color.R a k x (Branch color.B b s y c)) t\n                           z rbt.Empty,\n                          balance_right l' a' b' r')\n                         \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel\n 5. \\<And>a k x b s y c t z va vb vc vd l' a' b' r' c' l'a a'a b'a r'a c'a\n       l'b a'b b'b r'b c'b l'c a'c b'c r'c.\n       \\<lbrakk>(t, a') \\<in> Ra; (z, b') \\<in> Rb;\n        l' = Branch c' l'a a'a b'a r'a;\n        (a, l'a) \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel; (k, a'a) \\<in> Ra;\n        (x, b'a) \\<in> Rb; r' = Branch c'a l'b a'b b'b r'b;\n        (va, l'b) \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel; (vb, a'b) \\<in> Ra;\n        (vc, b'b) \\<in> Rb; (vd, r'b) \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel;\n        r'a = Branch c'b l'c a'c b'c r'c;\n        (b, l'c) \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel; (s, a'c) \\<in> Ra;\n        (y, b'c) \\<in> Rb; (c, r'c) \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel;\n        c' = color.R; c'a = color.B; c'b = color.B\\<rbrakk>\n       \\<Longrightarrow> (balance_right\n                           (Branch color.R a k x (Branch color.B b s y c)) t\n                           z (Branch color.B va vb vc vd),\n                          balance_right l' a' b' r')\n                         \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel\n 6. \\<And>k x l' a' b' r'.\n       \\<lbrakk>(k, a') \\<in> Ra; (x, b') \\<in> Rb; l' = rbt.Empty;\n        r' = rbt.Empty\\<rbrakk>\n       \\<Longrightarrow> (balance_right rbt.Empty k x rbt.Empty,\n                          balance_right l' a' b' r')\n                         \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel\n 7. \\<And>va vb vc k x l' a' b' r' c' l'a a'a b'a r'a.\n       \\<lbrakk>(k, a') \\<in> Ra; (x, b') \\<in> Rb; r' = rbt.Empty;\n        l' = Branch c' l'a a'a b'a r'a;\n        (va, l'a) \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel; (vb, a'a) \\<in> Ra;\n        (vc, b'a) \\<in> Rb; r'a = rbt.Empty; c' = color.R\\<rbrakk>\n       \\<Longrightarrow> (balance_right (Branch color.R va vb vc rbt.Empty)\n                           k x rbt.Empty,\n                          balance_right l' a' b' r')\n                         \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel\n 8. \\<And>va vb vc ve vf vg vh k x l' a' b' r' c' l'a a'a b'a r'a c'a l'b\n       a'b b'b r'b.\n       \\<lbrakk>(k, a') \\<in> Ra; (x, b') \\<in> Rb; r' = rbt.Empty;\n        l' = Branch c' l'a a'a b'a r'a;\n        (va, l'a) \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel; (vb, a'a) \\<in> Ra;\n        (vc, b'a) \\<in> Rb; r'a = Branch c'a l'b a'b b'b r'b;\n        (ve, l'b) \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel; (vf, a'b) \\<in> Ra;\n        (vg, b'b) \\<in> Rb; (vh, r'b) \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel;\n        c' = color.R; c'a = color.R\\<rbrakk>\n       \\<Longrightarrow> (balance_right\n                           (Branch color.R va vb vc\n                             (Branch color.R ve vf vg vh))\n                           k x rbt.Empty,\n                          balance_right l' a' b' r')\n                         \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel\n 9. \\<And>k x va vb vc vd l' a' b' r' c' l'a a'a b'a r'a.\n       \\<lbrakk>(k, a') \\<in> Ra; (x, b') \\<in> Rb; l' = rbt.Empty;\n        r' = Branch c' l'a a'a b'a r'a;\n        (va, l'a) \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel; (vb, a'a) \\<in> Ra;\n        (vc, b'a) \\<in> Rb; (vd, r'a) \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel;\n        c' = color.B\\<rbrakk>\n       \\<Longrightarrow> (balance_right rbt.Empty k x\n                           (Branch color.B va vb vc vd),\n                          balance_right l' a' b' r')\n                         \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel\n 10. \\<And>ve vf vg k x va vb vc vd l' a' b' r' c' l'a a'a b'a r'a c'a l'b\n        a'b b'b r'b.\n        \\<lbrakk>(k, a') \\<in> Ra; (x, b') \\<in> Rb;\n         l' = Branch c' l'a a'a b'a r'a;\n         (ve, l'a) \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel;\n         (vf, a'a) \\<in> Ra; (vg, b'a) \\<in> Rb; r'a = rbt.Empty;\n         r' = Branch c'a l'b a'b b'b r'b;\n         (va, l'b) \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel;\n         (vb, a'b) \\<in> Ra; (vc, b'b) \\<in> Rb;\n         (vd, r'b) \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel; c' = color.R;\n         c'a = color.B\\<rbrakk>\n        \\<Longrightarrow> (balance_right (Branch color.R ve vf vg rbt.Empty)\n                            k x (Branch color.B va vb vc vd),\n                           balance_right l' a' b' r')\n                          \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel\nA total of 11 subgoals...", "apply (simp_all only: balance_right.simps)"], ["proof (prove)\ngoal (11 subgoals):\n 1. \\<And>a k x b s y c l' a' b' r' c' l'a a'a b'a r'a.\n       \\<lbrakk>(a, l') \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel;\n        (k, a') \\<in> Ra; (x, b') \\<in> Rb;\n        r' = Branch color.R l'a a'a b'a r'a;\n        (b, l'a) \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel; (s, a'a) \\<in> Ra;\n        (y, b'a) \\<in> Rb; (c, r'a) \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel;\n        c' = color.R\\<rbrakk>\n       \\<Longrightarrow> (Branch color.R a k x (Branch color.B b s y c),\n                          Branch color.R l' a' b'\n                           (Branch color.B l'a a'a b'a r'a))\n                         \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel\n 2. \\<And>a k x b s y l' a' b' r' c' l'a a'a b'a r'a.\n       \\<lbrakk>(s, a') \\<in> Ra; (y, b') \\<in> Rb; r' = rbt.Empty;\n        l' = Branch color.B l'a a'a b'a r'a;\n        (a, l'a) \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel; (k, a'a) \\<in> Ra;\n        (x, b'a) \\<in> Rb; (b, r'a) \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel;\n        c' = color.B\\<rbrakk>\n       \\<Longrightarrow> (balance (Branch color.R a k x b) s y rbt.Empty,\n                          balance (Branch color.R l'a a'a b'a r'a) a' b'\n                           rbt.Empty)\n                         \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel\n 3. \\<And>a k x b s y va vb vc vd l' a' b' r' c' l'a a'a b'a r'a c'a l'b a'b\n       b'b r'b.\n       \\<lbrakk>(s, a') \\<in> Ra; (y, b') \\<in> Rb;\n        l' = Branch color.B l'a a'a b'a r'a;\n        (a, l'a) \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel; (k, a'a) \\<in> Ra;\n        (x, b'a) \\<in> Rb; (b, r'a) \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel;\n        r' = Branch color.B l'b a'b b'b r'b;\n        (va, l'b) \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel; (vb, a'b) \\<in> Ra;\n        (vc, b'b) \\<in> Rb; (vd, r'b) \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel;\n        c' = color.B; c'a = color.B\\<rbrakk>\n       \\<Longrightarrow> (balance (Branch color.R a k x b) s y\n                           (Branch color.B va vb vc vd),\n                          balance (Branch color.R l'a a'a b'a r'a) a' b'\n                           (Branch color.B l'b a'b b'b r'b))\n                         \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel\n 4. \\<And>a k x b s y c t z l' a' b' r' c' l'a a'a b'a r'a c'a l'b a'b b'b\n       r'b.\n       \\<lbrakk>(t, a') \\<in> Ra; (z, b') \\<in> Rb; r' = rbt.Empty;\n        l' = Branch color.R l'a a'a b'a (Branch color.B l'b a'b b'b r'b);\n        (a, l'a) \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel; (k, a'a) \\<in> Ra;\n        (x, b'a) \\<in> Rb; r'a = Branch color.B l'b a'b b'b r'b;\n        (b, l'b) \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel; (s, a'b) \\<in> Ra;\n        (y, b'b) \\<in> Rb; (c, r'b) \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel;\n        c' = color.R; c'a = color.B\\<rbrakk>\n       \\<Longrightarrow> (Branch color.R (balance (paint color.R a) k x b) s\n                           y (Branch color.B c t z rbt.Empty),\n                          Branch color.R\n                           (balance (paint color.R l'a) a'a b'a l'b) a'b b'b\n                           (Branch color.B r'b a' b' rbt.Empty))\n                         \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel\n 5. \\<And>a k x b s y c t z va vb vc vd l' a' b' r' c' l'a a'a b'a r'a c'a\n       l'b a'b b'b r'b c'b l'c a'c b'c r'c.\n       \\<lbrakk>(t, a') \\<in> Ra; (z, b') \\<in> Rb;\n        l' = Branch color.R l'a a'a b'a (Branch color.B l'c a'c b'c r'c);\n        (a, l'a) \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel; (k, a'a) \\<in> Ra;\n        (x, b'a) \\<in> Rb; r' = Branch color.B l'b a'b b'b r'b;\n        (va, l'b) \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel; (vb, a'b) \\<in> Ra;\n        (vc, b'b) \\<in> Rb; (vd, r'b) \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel;\n        r'a = Branch color.B l'c a'c b'c r'c;\n        (b, l'c) \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel; (s, a'c) \\<in> Ra;\n        (y, b'c) \\<in> Rb; (c, r'c) \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel;\n        c' = color.R; c'a = color.B; c'b = color.B\\<rbrakk>\n       \\<Longrightarrow> (Branch color.R (balance (paint color.R a) k x b) s\n                           y (Branch color.B c t z\n                               (Branch color.B va vb vc vd)),\n                          Branch color.R\n                           (balance (paint color.R l'a) a'a b'a l'c) a'c b'c\n                           (Branch color.B r'c a' b'\n                             (Branch color.B l'b a'b b'b r'b)))\n                         \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel\n 6. \\<And>k x l' a' b' r'.\n       \\<lbrakk>(k, a') \\<in> Ra; (x, b') \\<in> Rb; l' = rbt.Empty;\n        r' = rbt.Empty\\<rbrakk>\n       \\<Longrightarrow> (rbt.Empty, rbt.Empty) \\<in> \\<langle>Ra,\n                         Rb\\<rangle>rbt_rel\n 7. \\<And>va vb vc k x l' a' b' r' c' l'a a'a b'a r'a.\n       \\<lbrakk>(k, a') \\<in> Ra; (x, b') \\<in> Rb; r' = rbt.Empty;\n        l' = Branch color.R l'a a'a b'a rbt.Empty;\n        (va, l'a) \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel; (vb, a'a) \\<in> Ra;\n        (vc, b'a) \\<in> Rb; r'a = rbt.Empty; c' = color.R\\<rbrakk>\n       \\<Longrightarrow> (rbt.Empty, rbt.Empty) \\<in> \\<langle>Ra,\n                         Rb\\<rangle>rbt_rel\n 8. \\<And>va vb vc ve vf vg vh k x l' a' b' r' c' l'a a'a b'a r'a c'a l'b\n       a'b b'b r'b.\n       \\<lbrakk>(k, a') \\<in> Ra; (x, b') \\<in> Rb; r' = rbt.Empty;\n        l' = Branch color.R l'a a'a b'a (Branch color.R l'b a'b b'b r'b);\n        (va, l'a) \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel; (vb, a'a) \\<in> Ra;\n        (vc, b'a) \\<in> Rb; r'a = Branch color.R l'b a'b b'b r'b;\n        (ve, l'b) \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel; (vf, a'b) \\<in> Ra;\n        (vg, b'b) \\<in> Rb; (vh, r'b) \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel;\n        c' = color.R; c'a = color.R\\<rbrakk>\n       \\<Longrightarrow> (rbt.Empty, rbt.Empty) \\<in> \\<langle>Ra,\n                         Rb\\<rangle>rbt_rel\n 9. \\<And>k x va vb vc vd l' a' b' r' c' l'a a'a b'a r'a.\n       \\<lbrakk>(k, a') \\<in> Ra; (x, b') \\<in> Rb; l' = rbt.Empty;\n        r' = Branch color.B l'a a'a b'a r'a;\n        (va, l'a) \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel; (vb, a'a) \\<in> Ra;\n        (vc, b'a) \\<in> Rb; (vd, r'a) \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel;\n        c' = color.B\\<rbrakk>\n       \\<Longrightarrow> (rbt.Empty, rbt.Empty) \\<in> \\<langle>Ra,\n                         Rb\\<rangle>rbt_rel\n 10. \\<And>ve vf vg k x va vb vc vd l' a' b' r' c' l'a a'a b'a r'a c'a l'b\n        a'b b'b r'b.\n        \\<lbrakk>(k, a') \\<in> Ra; (x, b') \\<in> Rb;\n         l' = Branch color.R l'a a'a b'a rbt.Empty;\n         (ve, l'a) \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel;\n         (vf, a'a) \\<in> Ra; (vg, b'a) \\<in> Rb; r'a = rbt.Empty;\n         r' = Branch color.B l'b a'b b'b r'b;\n         (va, l'b) \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel;\n         (vb, a'b) \\<in> Ra; (vc, b'b) \\<in> Rb;\n         (vd, r'b) \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel; c' = color.R;\n         c'a = color.B\\<rbrakk>\n        \\<Longrightarrow> (rbt.Empty, rbt.Empty) \\<in> \\<langle>Ra,\n                          Rb\\<rangle>rbt_rel\nA total of 11 subgoals...", "apply parametricity+"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  (balance_right l a b r, balance_right l' a' b' r') \\<in> \\<langle>Ra,\n  Rb\\<rangle>rbt_rel\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma param_combine[param]:\n    \"(combine,combine)\\<in>\\<langle>Ra,Rb\\<rangle>rbt_rel \\<rightarrow> \\<langle>Ra,Rb\\<rangle>rbt_rel \\<rightarrow> \\<langle>Ra,Rb\\<rangle>rbt_rel\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (combine, combine)\n    \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel \\<rightarrow>\n          \\<langle>Ra, Rb\\<rangle>rbt_rel \\<rightarrow> \\<langle>Ra,\n          Rb\\<rangle>rbt_rel", "proof (intro fun_relI, goal_cases)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a a' aa a'a.\n       \\<lbrakk>(a, a') \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel;\n        (aa, a'a) \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel\\<rbrakk>\n       \\<Longrightarrow> (combine a aa, combine a' a'a) \\<in> \\<langle>Ra,\n                         Rb\\<rangle>rbt_rel", "case (1 t1 t1' t2 t2')"], ["proof (state)\nthis:\n  (t1, t1') \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel\n  (t2, t2') \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel\n\ngoal (1 subgoal):\n 1. \\<And>a a' aa a'a.\n       \\<lbrakk>(a, a') \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel;\n        (aa, a'a) \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel\\<rbrakk>\n       \\<Longrightarrow> (combine a aa, combine a' a'a) \\<in> \\<langle>Ra,\n                         Rb\\<rangle>rbt_rel", "thus ?case"], ["proof (prove)\nusing this:\n  (t1, t1') \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel\n  (t2, t2') \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel\n\ngoal (1 subgoal):\n 1. (combine t1 t2, combine t1' t2') \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel", "apply (induct t1 t2 arbitrary: t1' t2' rule: combine.induct)"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<And>x t1' t2'.\n       \\<lbrakk>(rbt.Empty, t1') \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel;\n        (x, t2') \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel\\<rbrakk>\n       \\<Longrightarrow> (combine rbt.Empty x, combine t1' t2')\n                         \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel\n 2. \\<And>v va vb vc vd t1' t2'.\n       \\<lbrakk>(Branch v va vb vc vd, t1') \\<in> \\<langle>Ra,\n                Rb\\<rangle>rbt_rel;\n        (rbt.Empty, t2') \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel\\<rbrakk>\n       \\<Longrightarrow> (combine (Branch v va vb vc vd) rbt.Empty,\n                          combine t1' t2')\n                         \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel\n 3. \\<And>a k x b c s y d t1' t2'.\n       \\<lbrakk>\\<And>t1' t2'.\n                   \\<lbrakk>(b, t1') \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel;\n                    (c, t2') \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel\\<rbrakk>\n                   \\<Longrightarrow> (combine b c, combine t1' t2')\n                                     \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel;\n        (Branch color.R a k x b, t1') \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel;\n        (Branch color.R c s y d, t2') \\<in> \\<langle>Ra,\n        Rb\\<rangle>rbt_rel\\<rbrakk>\n       \\<Longrightarrow> (combine (Branch color.R a k x b)\n                           (Branch color.R c s y d),\n                          combine t1' t2')\n                         \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel\n 4. \\<And>a k x b c s y d t1' t2'.\n       \\<lbrakk>\\<And>t1' t2'.\n                   \\<lbrakk>(b, t1') \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel;\n                    (c, t2') \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel\\<rbrakk>\n                   \\<Longrightarrow> (combine b c, combine t1' t2')\n                                     \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel;\n        (Branch color.B a k x b, t1') \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel;\n        (Branch color.B c s y d, t2') \\<in> \\<langle>Ra,\n        Rb\\<rangle>rbt_rel\\<rbrakk>\n       \\<Longrightarrow> (combine (Branch color.B a k x b)\n                           (Branch color.B c s y d),\n                          combine t1' t2')\n                         \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel\n 5. \\<And>va vb vc vd b k x c t1' t2'.\n       \\<lbrakk>\\<And>t1' t2'.\n                   \\<lbrakk>(Branch color.B va vb vc vd, t1')\n                            \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel;\n                    (b, t2') \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel\\<rbrakk>\n                   \\<Longrightarrow> (combine (Branch color.B va vb vc vd)\n b,\ncombine t1' t2')\n                                     \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel;\n        (Branch color.B va vb vc vd, t1') \\<in> \\<langle>Ra,\n        Rb\\<rangle>rbt_rel;\n        (Branch color.R b k x c, t2') \\<in> \\<langle>Ra,\n        Rb\\<rangle>rbt_rel\\<rbrakk>\n       \\<Longrightarrow> (combine (Branch color.B va vb vc vd)\n                           (Branch color.R b k x c),\n                          combine t1' t2')\n                         \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel\n 6. \\<And>a k x b va vb vc vd t1' t2'.\n       \\<lbrakk>\\<And>t1' t2'.\n                   \\<lbrakk>(b, t1') \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel;\n                    (Branch color.B va vb vc vd, t2') \\<in> \\<langle>Ra,\n                    Rb\\<rangle>rbt_rel\\<rbrakk>\n                   \\<Longrightarrow> (combine b\n (Branch color.B va vb vc vd),\ncombine t1' t2')\n                                     \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel;\n        (Branch color.R a k x b, t1') \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel;\n        (Branch color.B va vb vc vd, t2') \\<in> \\<langle>Ra,\n        Rb\\<rangle>rbt_rel\\<rbrakk>\n       \\<Longrightarrow> (combine (Branch color.R a k x b)\n                           (Branch color.B va vb vc vd),\n                          combine t1' t2')\n                         \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel", "apply (elim_all rbt_rel_elims color_rel_elims)"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<And>x t1' t2'.\n       \\<lbrakk>(x, t2') \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel;\n        t1' = rbt.Empty\\<rbrakk>\n       \\<Longrightarrow> (combine rbt.Empty x, combine t1' t2')\n                         \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel\n 2. \\<And>v va vb vc vd t1' t2' c' l' a' b' r'.\n       \\<lbrakk>t2' = rbt.Empty; t1' = Branch c' l' a' b' r';\n        (v, c') \\<in> color_rel;\n        (va, l') \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel; (vb, a') \\<in> Ra;\n        (vc, b') \\<in> Rb;\n        (vd, r') \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel\\<rbrakk>\n       \\<Longrightarrow> (combine (Branch v va vb vc vd) rbt.Empty,\n                          combine t1' t2')\n                         \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel\n 3. \\<And>a k x b c s y d t1' t2' c' l' a' b' r' c'a l'a a'a b'a r'a.\n       \\<lbrakk>\\<And>t1' t2'.\n                   \\<lbrakk>(b, t1') \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel;\n                    (c, t2') \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel\\<rbrakk>\n                   \\<Longrightarrow> (combine b c, combine t1' t2')\n                                     \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel;\n        t1' = Branch c' l' a' b' r';\n        (a, l') \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel; (k, a') \\<in> Ra;\n        (x, b') \\<in> Rb; (b, r') \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel;\n        t2' = Branch c'a l'a a'a b'a r'a;\n        (c, l'a) \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel; (s, a'a) \\<in> Ra;\n        (y, b'a) \\<in> Rb; (d, r'a) \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel;\n        c' = color.R; c'a = color.R\\<rbrakk>\n       \\<Longrightarrow> (combine (Branch color.R a k x b)\n                           (Branch color.R c s y d),\n                          combine t1' t2')\n                         \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel\n 4. \\<And>a k x b c s y d t1' t2' c' l' a' b' r' c'a l'a a'a b'a r'a.\n       \\<lbrakk>\\<And>t1' t2'.\n                   \\<lbrakk>(b, t1') \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel;\n                    (c, t2') \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel\\<rbrakk>\n                   \\<Longrightarrow> (combine b c, combine t1' t2')\n                                     \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel;\n        t1' = Branch c' l' a' b' r';\n        (a, l') \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel; (k, a') \\<in> Ra;\n        (x, b') \\<in> Rb; (b, r') \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel;\n        t2' = Branch c'a l'a a'a b'a r'a;\n        (c, l'a) \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel; (s, a'a) \\<in> Ra;\n        (y, b'a) \\<in> Rb; (d, r'a) \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel;\n        c' = color.B; c'a = color.B\\<rbrakk>\n       \\<Longrightarrow> (combine (Branch color.B a k x b)\n                           (Branch color.B c s y d),\n                          combine t1' t2')\n                         \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel\n 5. \\<And>va vb vc vd b k x c t1' t2' c' l' a' b' r' c'a l'a a'a b'a r'a.\n       \\<lbrakk>\\<And>t1' t2'.\n                   \\<lbrakk>(Branch color.B va vb vc vd, t1')\n                            \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel;\n                    (b, t2') \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel\\<rbrakk>\n                   \\<Longrightarrow> (combine (Branch color.B va vb vc vd)\n b,\ncombine t1' t2')\n                                     \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel;\n        t1' = Branch c' l' a' b' r';\n        (va, l') \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel; (vb, a') \\<in> Ra;\n        (vc, b') \\<in> Rb; (vd, r') \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel;\n        t2' = Branch c'a l'a a'a b'a r'a;\n        (b, l'a) \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel; (k, a'a) \\<in> Ra;\n        (x, b'a) \\<in> Rb; (c, r'a) \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel;\n        c'a = color.R; c' = color.B\\<rbrakk>\n       \\<Longrightarrow> (combine (Branch color.B va vb vc vd)\n                           (Branch color.R b k x c),\n                          combine t1' t2')\n                         \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel\n 6. \\<And>a k x b va vb vc vd t1' t2' c' l' a' b' r' c'a l'a a'a b'a r'a.\n       \\<lbrakk>\\<And>t1' t2'.\n                   \\<lbrakk>(b, t1') \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel;\n                    (Branch color.B va vb vc vd, t2') \\<in> \\<langle>Ra,\n                    Rb\\<rangle>rbt_rel\\<rbrakk>\n                   \\<Longrightarrow> (combine b\n (Branch color.B va vb vc vd),\ncombine t1' t2')\n                                     \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel;\n        t1' = Branch c' l' a' b' r';\n        (a, l') \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel; (k, a') \\<in> Ra;\n        (x, b') \\<in> Rb; (b, r') \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel;\n        t2' = Branch c'a l'a a'a b'a r'a;\n        (va, l'a) \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel; (vb, a'a) \\<in> Ra;\n        (vc, b'a) \\<in> Rb; (vd, r'a) \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel;\n        c' = color.R; c'a = color.B\\<rbrakk>\n       \\<Longrightarrow> (combine (Branch color.R a k x b)\n                           (Branch color.B va vb vc vd),\n                          combine t1' t2')\n                         \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel", "apply (simp_all only: combine.simps)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>v va vb vc vd t1' t2' c' l' a' b' r'.\n       \\<lbrakk>t2' = rbt.Empty; t1' = Branch c' l' a' b' r';\n        (v, c') \\<in> color_rel;\n        (va, l') \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel; (vb, a') \\<in> Ra;\n        (vc, b') \\<in> Rb;\n        (vd, r') \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel\\<rbrakk>\n       \\<Longrightarrow> (Branch v va vb vc vd, Branch c' l' a' b' r')\n                         \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel\n 2. \\<And>a k x b c s y d t1' t2' c' l' a' b' r' c'a l'a a'a b'a r'a.\n       \\<lbrakk>\\<And>t1' t2'.\n                   \\<lbrakk>(b, t1') \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel;\n                    (c, t2') \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel\\<rbrakk>\n                   \\<Longrightarrow> (combine b c, combine t1' t2')\n                                     \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel;\n        t1' = Branch color.R l' a' b' r';\n        (a, l') \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel; (k, a') \\<in> Ra;\n        (x, b') \\<in> Rb; (b, r') \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel;\n        t2' = Branch color.R l'a a'a b'a r'a;\n        (c, l'a) \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel; (s, a'a) \\<in> Ra;\n        (y, b'a) \\<in> Rb; (d, r'a) \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel;\n        c' = color.R; c'a = color.R\\<rbrakk>\n       \\<Longrightarrow> (case combine b c of\n                          rbt.Empty \\<Rightarrow>\n                            Branch color.R a k x\n                             (Branch color.R rbt.Empty s y d)\n                          | Branch color.R b2 t z c2 \\<Rightarrow>\n                              Branch color.R (Branch color.R a k x b2) t z\n                               (Branch color.R c2 s y d)\n                          | Branch color.B b2 t z c2 \\<Rightarrow>\n                              Branch color.R a k x\n                               (Branch color.R (Branch color.B b2 t z c2) s\n                                 y d),\n                          case combine r' l'a of\n                          rbt.Empty \\<Rightarrow>\n                            Branch color.R l' a' b'\n                             (Branch color.R rbt.Empty a'a b'a r'a)\n                          | Branch color.R b2 t z c2 \\<Rightarrow>\n                              Branch color.R (Branch color.R l' a' b' b2) t\n                               z (Branch color.R c2 a'a b'a r'a)\n                          | Branch color.B b2 t z c2 \\<Rightarrow>\n                              Branch color.R l' a' b'\n                               (Branch color.R (Branch color.B b2 t z c2)\n                                 a'a b'a r'a))\n                         \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel\n 3. \\<And>a k x b c s y d t1' t2' c' l' a' b' r' c'a l'a a'a b'a r'a.\n       \\<lbrakk>\\<And>t1' t2'.\n                   \\<lbrakk>(b, t1') \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel;\n                    (c, t2') \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel\\<rbrakk>\n                   \\<Longrightarrow> (combine b c, combine t1' t2')\n                                     \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel;\n        t1' = Branch color.B l' a' b' r';\n        (a, l') \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel; (k, a') \\<in> Ra;\n        (x, b') \\<in> Rb; (b, r') \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel;\n        t2' = Branch color.B l'a a'a b'a r'a;\n        (c, l'a) \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel; (s, a'a) \\<in> Ra;\n        (y, b'a) \\<in> Rb; (d, r'a) \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel;\n        c' = color.B; c'a = color.B\\<rbrakk>\n       \\<Longrightarrow> (case combine b c of\n                          rbt.Empty \\<Rightarrow>\n                            balance_left a k x\n                             (Branch color.B rbt.Empty s y d)\n                          | Branch color.R b2 t z c2 \\<Rightarrow>\n                              Branch color.R (Branch color.B a k x b2) t z\n                               (Branch color.B c2 s y d)\n                          | Branch color.B b2 t z c2 \\<Rightarrow>\n                              balance_left a k x\n                               (Branch color.B (Branch color.B b2 t z c2) s\n                                 y d),\n                          case combine r' l'a of\n                          rbt.Empty \\<Rightarrow>\n                            balance_left l' a' b'\n                             (Branch color.B rbt.Empty a'a b'a r'a)\n                          | Branch color.R b2 t z c2 \\<Rightarrow>\n                              Branch color.R (Branch color.B l' a' b' b2) t\n                               z (Branch color.B c2 a'a b'a r'a)\n                          | Branch color.B b2 t z c2 \\<Rightarrow>\n                              balance_left l' a' b'\n                               (Branch color.B (Branch color.B b2 t z c2)\n                                 a'a b'a r'a))\n                         \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel\n 4. \\<And>va vb vc vd b k x c t1' t2' c' l' a' b' r' c'a l'a a'a b'a r'a.\n       \\<lbrakk>\\<And>t1' t2'.\n                   \\<lbrakk>(Branch color.B va vb vc vd, t1')\n                            \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel;\n                    (b, t2') \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel\\<rbrakk>\n                   \\<Longrightarrow> (combine (Branch color.B va vb vc vd)\n b,\ncombine t1' t2')\n                                     \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel;\n        t1' = Branch color.B l' a' b' r';\n        (va, l') \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel; (vb, a') \\<in> Ra;\n        (vc, b') \\<in> Rb; (vd, r') \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel;\n        t2' = Branch color.R l'a a'a b'a r'a;\n        (b, l'a) \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel; (k, a'a) \\<in> Ra;\n        (x, b'a) \\<in> Rb; (c, r'a) \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel;\n        c'a = color.R; c' = color.B\\<rbrakk>\n       \\<Longrightarrow> (Branch color.R\n                           (combine (Branch color.B va vb vc vd) b) k x c,\n                          Branch color.R\n                           (combine (Branch color.B l' a' b' r') l'a) a'a\n                           b'a r'a)\n                         \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel\n 5. \\<And>a k x b va vb vc vd t1' t2' c' l' a' b' r' c'a l'a a'a b'a r'a.\n       \\<lbrakk>\\<And>t1' t2'.\n                   \\<lbrakk>(b, t1') \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel;\n                    (Branch color.B va vb vc vd, t2') \\<in> \\<langle>Ra,\n                    Rb\\<rangle>rbt_rel\\<rbrakk>\n                   \\<Longrightarrow> (combine b\n (Branch color.B va vb vc vd),\ncombine t1' t2')\n                                     \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel;\n        t1' = Branch color.R l' a' b' r';\n        (a, l') \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel; (k, a') \\<in> Ra;\n        (x, b') \\<in> Rb; (b, r') \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel;\n        t2' = Branch color.B l'a a'a b'a r'a;\n        (va, l'a) \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel; (vb, a'a) \\<in> Ra;\n        (vc, b'a) \\<in> Rb; (vd, r'a) \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel;\n        c' = color.R; c'a = color.B\\<rbrakk>\n       \\<Longrightarrow> (Branch color.R a k x\n                           (combine b (Branch color.B va vb vc vd)),\n                          Branch color.R l' a' b'\n                           (combine r' (Branch color.B l'a a'a b'a r'a)))\n                         \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel", "apply parametricity+"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  (combine t1 t2, combine t1' t2') \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma ih_aux1: \"\\<lbrakk> (a',b)\\<in>R; a'=a \\<rbrakk> \\<Longrightarrow> (a,b)\\<in>R\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>(a', b) \\<in> R; a' = a\\<rbrakk>\n    \\<Longrightarrow> (a, b) \\<in> R", "by auto"], ["", "lemma is_eq: \"a=b \\<Longrightarrow> a=b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a = b \\<Longrightarrow> a = b", "."], ["", "lemma param_rbt_del_aux:\n    fixes br\n    fixes less\n    assumes param_less[param]: \"(less,less') \\<in> Ra \\<rightarrow> Ra \\<rightarrow> Id\"\n    shows\n    \"\\<lbrakk> (ak1,ak1')\\<in>Ra; (al,al')\\<in>\\<langle>Ra,Rb\\<rangle>rbt_rel; (ak,ak')\\<in>Ra;\n      (av,av')\\<in>Rb; (ar,ar')\\<in>\\<langle>Ra,Rb\\<rangle>rbt_rel \n    \\<rbrakk> \\<Longrightarrow> (ord.rbt_del_from_left less ak1 al ak av ar, \n      ord.rbt_del_from_left less' ak1' al' ak' av' ar') \n    \\<in> \\<langle>Ra,Rb\\<rangle>rbt_rel\"\n    \"\\<lbrakk> (bk1,bk1')\\<in>Ra; (bl,bl')\\<in>\\<langle>Ra,Rb\\<rangle>rbt_rel; (bk,bk')\\<in>Ra;\n      (bv,bv')\\<in>Rb; (br,br')\\<in>\\<langle>Ra,Rb\\<rangle>rbt_rel \n    \\<rbrakk> \\<Longrightarrow> (ord.rbt_del_from_right less bk1 bl bk bv br, \n      ord.rbt_del_from_right less' bk1' bl' bk' bv' br') \n    \\<in> \\<langle>Ra,Rb\\<rangle>rbt_rel\"\n    \"\\<lbrakk> (ck,ck')\\<in>Ra; (ct,ct')\\<in>\\<langle>Ra,Rb\\<rangle>rbt_rel \\<rbrakk> \n      \\<Longrightarrow> (ord.rbt_del less ck ct, ord.rbt_del less' ck' ct') \\<in> \\<langle>Ra,Rb\\<rangle>rbt_rel\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lbrakk>(ak1, ak1') \\<in> Ra;\n      (al, al') \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel; (ak, ak') \\<in> Ra;\n      (av, av') \\<in> Rb;\n      (ar, ar') \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel\\<rbrakk>\n     \\<Longrightarrow> (ord.rbt_del_from_left less ak1 al ak av ar,\n                        ord.rbt_del_from_left less' ak1' al' ak' av' ar')\n                       \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel) &&&\n    (\\<lbrakk>(bk1, bk1') \\<in> Ra;\n      (bl, bl') \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel; (bk, bk') \\<in> Ra;\n      (bv, bv') \\<in> Rb;\n      (br, br') \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel\\<rbrakk>\n     \\<Longrightarrow> (ord.rbt_del_from_right less bk1 bl bk bv br,\n                        ord.rbt_del_from_right less' bk1' bl' bk' bv' br')\n                       \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel) &&&\n    (\\<lbrakk>(ck, ck') \\<in> Ra;\n      (ct, ct') \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel\\<rbrakk>\n     \\<Longrightarrow> (ord.rbt_del less ck ct, ord.rbt_del less' ck' ct')\n                       \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel)", "apply (induct \n      ak1' al' ak' av' ar' and bk1' bl' bk' bv' br' and ck' ct'\n      arbitrary: ak1 al ak av ar and bk1 bl bk bv br and ck ct\n      rule: ord.rbt_del_from_left_rbt_del_from_right_rbt_del.induct)"], ["proof (prove)\ngoal (8 subgoals):\n 1. \\<And>x ck ct.\n       \\<lbrakk>(ck, x) \\<in> Ra;\n        (ct, rbt.Empty) \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel\\<rbrakk>\n       \\<Longrightarrow> (ord.rbt_del less ck ct,\n                          ord.rbt_del less' x rbt.Empty)\n                         \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel\n 2. \\<And>x c a y s b ck ct.\n       \\<lbrakk>\\<And>ak1 al ak av ar.\n                   \\<lbrakk>?lessa2 x y; (ak1, x) \\<in> Ra;\n                    (al, a) \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel;\n                    (ak, y) \\<in> Ra; (av, s) \\<in> Rb;\n                    (ar, b) \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel\\<rbrakk>\n                   \\<Longrightarrow> (ord.rbt_del_from_left less ak1 al ak\n av ar,\nord.rbt_del_from_left less' x a y s b)\n                                     \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel;\n        \\<And>bk1 bl bk bv br.\n           \\<lbrakk>\\<not> ?lessa2 x y; ?lessa2 y x; (bk1, x) \\<in> Ra;\n            (bl, a) \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel; (bk, y) \\<in> Ra;\n            (bv, s) \\<in> Rb;\n            (br, b) \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel\\<rbrakk>\n           \\<Longrightarrow> (ord.rbt_del_from_right less bk1 bl bk bv br,\n                              ord.rbt_del_from_right less' x a y s b)\n                             \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel;\n        (ck, x) \\<in> Ra;\n        (ct, Branch c a y s b) \\<in> \\<langle>Ra,\n        Rb\\<rangle>rbt_rel\\<rbrakk>\n       \\<Longrightarrow> (ord.rbt_del less ck ct,\n                          ord.rbt_del less' x (Branch c a y s b))\n                         \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel\n 3. \\<And>x lt z v rt y s b ak1 al ak av ar.\n       \\<lbrakk>\\<And>ck ct.\n                   \\<lbrakk>(ck, x) \\<in> Ra;\n                    (ct, Branch color.B lt z v rt) \\<in> \\<langle>Ra,\n                    Rb\\<rangle>rbt_rel\\<rbrakk>\n                   \\<Longrightarrow> (ord.rbt_del less ck ct,\nord.rbt_del less' x (Branch color.B lt z v rt))\n                                     \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel;\n        (ak1, x) \\<in> Ra;\n        (al, Branch color.B lt z v rt) \\<in> \\<langle>Ra,\n        Rb\\<rangle>rbt_rel;\n        (ak, y) \\<in> Ra; (av, s) \\<in> Rb;\n        (ar, b) \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel\\<rbrakk>\n       \\<Longrightarrow> (ord.rbt_del_from_left less ak1 al ak av ar,\n                          ord.rbt_del_from_left less' x\n                           (Branch color.B lt z v rt) y s b)\n                         \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel\n 4. \\<And>x y s b ak1 al ak av ar.\n       \\<lbrakk>\\<And>ck ct.\n                   \\<lbrakk>(ck, x) \\<in> Ra;\n                    (ct, rbt.Empty) \\<in> \\<langle>Ra,\n                    Rb\\<rangle>rbt_rel\\<rbrakk>\n                   \\<Longrightarrow> (ord.rbt_del less ck ct,\nord.rbt_del less' x rbt.Empty)\n                                     \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel;\n        (ak1, x) \\<in> Ra;\n        (al, rbt.Empty) \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel;\n        (ak, y) \\<in> Ra; (av, s) \\<in> Rb;\n        (ar, b) \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel\\<rbrakk>\n       \\<Longrightarrow> (ord.rbt_del_from_left less ak1 al ak av ar,\n                          ord.rbt_del_from_left less' x rbt.Empty y s b)\n                         \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel\n 5. \\<And>x va vb vc vd y s b ak1 al ak av ar.\n       \\<lbrakk>\\<And>ck ct.\n                   \\<lbrakk>(ck, x) \\<in> Ra;\n                    (ct, Branch color.R va vb vc vd) \\<in> \\<langle>Ra,\n                    Rb\\<rangle>rbt_rel\\<rbrakk>\n                   \\<Longrightarrow> (ord.rbt_del less ck ct,\nord.rbt_del less' x (Branch color.R va vb vc vd))\n                                     \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel;\n        (ak1, x) \\<in> Ra;\n        (al, Branch color.R va vb vc vd) \\<in> \\<langle>Ra,\n        Rb\\<rangle>rbt_rel;\n        (ak, y) \\<in> Ra; (av, s) \\<in> Rb;\n        (ar, b) \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel\\<rbrakk>\n       \\<Longrightarrow> (ord.rbt_del_from_left less ak1 al ak av ar,\n                          ord.rbt_del_from_left less' x\n                           (Branch color.R va vb vc vd) y s b)\n                         \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel\n 6. \\<And>x a y s lt z v rt bk1 bl bk bv br.\n       \\<lbrakk>\\<And>ck ct.\n                   \\<lbrakk>(ck, x) \\<in> Ra;\n                    (ct, Branch color.B lt z v rt) \\<in> \\<langle>Ra,\n                    Rb\\<rangle>rbt_rel\\<rbrakk>\n                   \\<Longrightarrow> (ord.rbt_del less ck ct,\nord.rbt_del less' x (Branch color.B lt z v rt))\n                                     \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel;\n        (bk1, x) \\<in> Ra; (bl, a) \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel;\n        (bk, y) \\<in> Ra; (bv, s) \\<in> Rb;\n        (br, Branch color.B lt z v rt) \\<in> \\<langle>Ra,\n        Rb\\<rangle>rbt_rel\\<rbrakk>\n       \\<Longrightarrow> (ord.rbt_del_from_right less bk1 bl bk bv br,\n                          ord.rbt_del_from_right less' x a y s\n                           (Branch color.B lt z v rt))\n                         \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel\n 7. \\<And>x a y s bk1 bl bk bv br.\n       \\<lbrakk>\\<And>ck ct.\n                   \\<lbrakk>(ck, x) \\<in> Ra;\n                    (ct, rbt.Empty) \\<in> \\<langle>Ra,\n                    Rb\\<rangle>rbt_rel\\<rbrakk>\n                   \\<Longrightarrow> (ord.rbt_del less ck ct,\nord.rbt_del less' x rbt.Empty)\n                                     \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel;\n        (bk1, x) \\<in> Ra; (bl, a) \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel;\n        (bk, y) \\<in> Ra; (bv, s) \\<in> Rb;\n        (br, rbt.Empty) \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel\\<rbrakk>\n       \\<Longrightarrow> (ord.rbt_del_from_right less bk1 bl bk bv br,\n                          ord.rbt_del_from_right less' x a y s rbt.Empty)\n                         \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel\n 8. \\<And>x a y s va vb vc vd bk1 bl bk bv br.\n       \\<lbrakk>\\<And>ck ct.\n                   \\<lbrakk>(ck, x) \\<in> Ra;\n                    (ct, Branch color.R va vb vc vd) \\<in> \\<langle>Ra,\n                    Rb\\<rangle>rbt_rel\\<rbrakk>\n                   \\<Longrightarrow> (ord.rbt_del less ck ct,\nord.rbt_del less' x (Branch color.R va vb vc vd))\n                                     \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel;\n        (bk1, x) \\<in> Ra; (bl, a) \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel;\n        (bk, y) \\<in> Ra; (bv, s) \\<in> Rb;\n        (br, Branch color.R va vb vc vd) \\<in> \\<langle>Ra,\n        Rb\\<rangle>rbt_rel\\<rbrakk>\n       \\<Longrightarrow> (ord.rbt_del_from_right less bk1 bl bk bv br,\n                          ord.rbt_del_from_right less' x a y s\n                           (Branch color.R va vb vc vd))\n                         \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel", "(* TODO/FIXME: We do not have 'deep' elimination rules, thus\n      we have to do some ughly hack to apply the rbt_rel-elimination inside\n      the induction hypothesis. *)"], ["proof (prove)\ngoal (8 subgoals):\n 1. \\<And>x ck ct.\n       \\<lbrakk>(ck, x) \\<in> Ra;\n        (ct, rbt.Empty) \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel\\<rbrakk>\n       \\<Longrightarrow> (ord.rbt_del less ck ct,\n                          ord.rbt_del less' x rbt.Empty)\n                         \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel\n 2. \\<And>x c a y s b ck ct.\n       \\<lbrakk>\\<And>ak1 al ak av ar.\n                   \\<lbrakk>?lessa2 x y; (ak1, x) \\<in> Ra;\n                    (al, a) \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel;\n                    (ak, y) \\<in> Ra; (av, s) \\<in> Rb;\n                    (ar, b) \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel\\<rbrakk>\n                   \\<Longrightarrow> (ord.rbt_del_from_left less ak1 al ak\n av ar,\nord.rbt_del_from_left less' x a y s b)\n                                     \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel;\n        \\<And>bk1 bl bk bv br.\n           \\<lbrakk>\\<not> ?lessa2 x y; ?lessa2 y x; (bk1, x) \\<in> Ra;\n            (bl, a) \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel; (bk, y) \\<in> Ra;\n            (bv, s) \\<in> Rb;\n            (br, b) \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel\\<rbrakk>\n           \\<Longrightarrow> (ord.rbt_del_from_right less bk1 bl bk bv br,\n                              ord.rbt_del_from_right less' x a y s b)\n                             \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel;\n        (ck, x) \\<in> Ra;\n        (ct, Branch c a y s b) \\<in> \\<langle>Ra,\n        Rb\\<rangle>rbt_rel\\<rbrakk>\n       \\<Longrightarrow> (ord.rbt_del less ck ct,\n                          ord.rbt_del less' x (Branch c a y s b))\n                         \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel\n 3. \\<And>x lt z v rt y s b ak1 al ak av ar.\n       \\<lbrakk>\\<And>ck ct.\n                   \\<lbrakk>(ck, x) \\<in> Ra;\n                    (ct, Branch color.B lt z v rt) \\<in> \\<langle>Ra,\n                    Rb\\<rangle>rbt_rel\\<rbrakk>\n                   \\<Longrightarrow> (ord.rbt_del less ck ct,\nord.rbt_del less' x (Branch color.B lt z v rt))\n                                     \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel;\n        (ak1, x) \\<in> Ra;\n        (al, Branch color.B lt z v rt) \\<in> \\<langle>Ra,\n        Rb\\<rangle>rbt_rel;\n        (ak, y) \\<in> Ra; (av, s) \\<in> Rb;\n        (ar, b) \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel\\<rbrakk>\n       \\<Longrightarrow> (ord.rbt_del_from_left less ak1 al ak av ar,\n                          ord.rbt_del_from_left less' x\n                           (Branch color.B lt z v rt) y s b)\n                         \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel\n 4. \\<And>x y s b ak1 al ak av ar.\n       \\<lbrakk>\\<And>ck ct.\n                   \\<lbrakk>(ck, x) \\<in> Ra;\n                    (ct, rbt.Empty) \\<in> \\<langle>Ra,\n                    Rb\\<rangle>rbt_rel\\<rbrakk>\n                   \\<Longrightarrow> (ord.rbt_del less ck ct,\nord.rbt_del less' x rbt.Empty)\n                                     \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel;\n        (ak1, x) \\<in> Ra;\n        (al, rbt.Empty) \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel;\n        (ak, y) \\<in> Ra; (av, s) \\<in> Rb;\n        (ar, b) \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel\\<rbrakk>\n       \\<Longrightarrow> (ord.rbt_del_from_left less ak1 al ak av ar,\n                          ord.rbt_del_from_left less' x rbt.Empty y s b)\n                         \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel\n 5. \\<And>x va vb vc vd y s b ak1 al ak av ar.\n       \\<lbrakk>\\<And>ck ct.\n                   \\<lbrakk>(ck, x) \\<in> Ra;\n                    (ct, Branch color.R va vb vc vd) \\<in> \\<langle>Ra,\n                    Rb\\<rangle>rbt_rel\\<rbrakk>\n                   \\<Longrightarrow> (ord.rbt_del less ck ct,\nord.rbt_del less' x (Branch color.R va vb vc vd))\n                                     \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel;\n        (ak1, x) \\<in> Ra;\n        (al, Branch color.R va vb vc vd) \\<in> \\<langle>Ra,\n        Rb\\<rangle>rbt_rel;\n        (ak, y) \\<in> Ra; (av, s) \\<in> Rb;\n        (ar, b) \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel\\<rbrakk>\n       \\<Longrightarrow> (ord.rbt_del_from_left less ak1 al ak av ar,\n                          ord.rbt_del_from_left less' x\n                           (Branch color.R va vb vc vd) y s b)\n                         \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel\n 6. \\<And>x a y s lt z v rt bk1 bl bk bv br.\n       \\<lbrakk>\\<And>ck ct.\n                   \\<lbrakk>(ck, x) \\<in> Ra;\n                    (ct, Branch color.B lt z v rt) \\<in> \\<langle>Ra,\n                    Rb\\<rangle>rbt_rel\\<rbrakk>\n                   \\<Longrightarrow> (ord.rbt_del less ck ct,\nord.rbt_del less' x (Branch color.B lt z v rt))\n                                     \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel;\n        (bk1, x) \\<in> Ra; (bl, a) \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel;\n        (bk, y) \\<in> Ra; (bv, s) \\<in> Rb;\n        (br, Branch color.B lt z v rt) \\<in> \\<langle>Ra,\n        Rb\\<rangle>rbt_rel\\<rbrakk>\n       \\<Longrightarrow> (ord.rbt_del_from_right less bk1 bl bk bv br,\n                          ord.rbt_del_from_right less' x a y s\n                           (Branch color.B lt z v rt))\n                         \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel\n 7. \\<And>x a y s bk1 bl bk bv br.\n       \\<lbrakk>\\<And>ck ct.\n                   \\<lbrakk>(ck, x) \\<in> Ra;\n                    (ct, rbt.Empty) \\<in> \\<langle>Ra,\n                    Rb\\<rangle>rbt_rel\\<rbrakk>\n                   \\<Longrightarrow> (ord.rbt_del less ck ct,\nord.rbt_del less' x rbt.Empty)\n                                     \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel;\n        (bk1, x) \\<in> Ra; (bl, a) \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel;\n        (bk, y) \\<in> Ra; (bv, s) \\<in> Rb;\n        (br, rbt.Empty) \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel\\<rbrakk>\n       \\<Longrightarrow> (ord.rbt_del_from_right less bk1 bl bk bv br,\n                          ord.rbt_del_from_right less' x a y s rbt.Empty)\n                         \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel\n 8. \\<And>x a y s va vb vc vd bk1 bl bk bv br.\n       \\<lbrakk>\\<And>ck ct.\n                   \\<lbrakk>(ck, x) \\<in> Ra;\n                    (ct, Branch color.R va vb vc vd) \\<in> \\<langle>Ra,\n                    Rb\\<rangle>rbt_rel\\<rbrakk>\n                   \\<Longrightarrow> (ord.rbt_del less ck ct,\nord.rbt_del less' x (Branch color.R va vb vc vd))\n                                     \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel;\n        (bk1, x) \\<in> Ra; (bl, a) \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel;\n        (bk, y) \\<in> Ra; (bv, s) \\<in> Rb;\n        (br, Branch color.R va vb vc vd) \\<in> \\<langle>Ra,\n        Rb\\<rangle>rbt_rel\\<rbrakk>\n       \\<Longrightarrow> (ord.rbt_del_from_right less bk1 bl bk bv br,\n                          ord.rbt_del_from_right less' x a y s\n                           (Branch color.R va vb vc vd))\n                         \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel", "apply (assumption\n      | elim rbt_rel_elims color_rel_elims \n      | simp (no_asm_use) only: rbt_del.simps ord.rbt_del.simps\n          rbt_del_from_left.simps ord.rbt_del_from_left.simps\n          rbt_del_from_right.simps ord.rbt_del_from_right.simps\n      | parametricity\n      | rule rbt_rel_intros\n      | hypsubst\n      | (simp, rule ih_aux1, rprems)\n      | (rule is_eq, simp)\n    ) +"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma param_rbt_del[param]:\n    fixes less\n    assumes param_less: \"(less,less') \\<in> Ra \\<rightarrow> Ra \\<rightarrow> Id\"\n    shows\n    \"(ord.rbt_del_from_left less, ord.rbt_del_from_left less') \\<in> \n      Ra \\<rightarrow> \\<langle>Ra,Rb\\<rangle>rbt_rel \\<rightarrow> Ra \\<rightarrow> Rb \\<rightarrow> \\<langle>Ra,Rb\\<rangle>rbt_rel \\<rightarrow> \\<langle>Ra,Rb\\<rangle>rbt_rel\"\n    \"(ord.rbt_del_from_right less, ord.rbt_del_from_right less') \\<in>\n      Ra \\<rightarrow> \\<langle>Ra,Rb\\<rangle>rbt_rel \\<rightarrow> Ra \\<rightarrow> Rb \\<rightarrow> \\<langle>Ra,Rb\\<rangle>rbt_rel \\<rightarrow> \\<langle>Ra,Rb\\<rangle>rbt_rel\"\n    \"(ord.rbt_del less,ord.rbt_del less') \\<in> \n      Ra \\<rightarrow> \\<langle>Ra,Rb\\<rangle>rbt_rel \\<rightarrow> \\<langle>Ra,Rb\\<rangle>rbt_rel\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (ord.rbt_del_from_left less, ord.rbt_del_from_left less')\n    \\<in> Ra \\<rightarrow>\n          \\<langle>Ra, Rb\\<rangle>rbt_rel \\<rightarrow>\n          Ra \\<rightarrow>\n          Rb \\<rightarrow>\n          \\<langle>Ra, Rb\\<rangle>rbt_rel \\<rightarrow> \\<langle>Ra,\n          Rb\\<rangle>rbt_rel &&&\n    (ord.rbt_del_from_right less, ord.rbt_del_from_right less')\n    \\<in> Ra \\<rightarrow>\n          \\<langle>Ra, Rb\\<rangle>rbt_rel \\<rightarrow>\n          Ra \\<rightarrow>\n          Rb \\<rightarrow>\n          \\<langle>Ra, Rb\\<rangle>rbt_rel \\<rightarrow> \\<langle>Ra,\n          Rb\\<rangle>rbt_rel &&&\n    (ord.rbt_del less, ord.rbt_del less')\n    \\<in> Ra \\<rightarrow>\n          \\<langle>Ra, Rb\\<rangle>rbt_rel \\<rightarrow> \\<langle>Ra,\n          Rb\\<rangle>rbt_rel", "by (intro fun_relI, blast intro: param_rbt_del_aux[OF param_less])+"], ["", "lemma param_rbt_delete[param]:\n    fixes less\n    assumes param_less[param]: \"(less,less') \\<in> Ra \\<rightarrow> Ra \\<rightarrow> Id\"\n    shows \"(ord.rbt_delete less, ord.rbt_delete less') \n      \\<in> Ra \\<rightarrow> \\<langle>Ra,Rb\\<rangle>rbt_rel \\<rightarrow> \\<langle>Ra,Rb\\<rangle>rbt_rel\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (ord.rbt_delete less, ord.rbt_delete less')\n    \\<in> Ra \\<rightarrow>\n          \\<langle>Ra, Rb\\<rangle>rbt_rel \\<rightarrow> \\<langle>Ra,\n          Rb\\<rangle>rbt_rel", "unfolding rbt_delete_def[abs_def] ord.rbt_delete_def[abs_def]"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>k t. paint color.B (ord.rbt_del less k t),\n     \\<lambda>k t. paint color.B (ord.rbt_del less' k t))\n    \\<in> Ra \\<rightarrow>\n          \\<langle>Ra, Rb\\<rangle>rbt_rel \\<rightarrow> \\<langle>Ra,\n          Rb\\<rangle>rbt_rel", "by parametricity"], ["", "term ord.rbt_insert_with_key"], ["", "abbreviation compare_rel :: \"(RBT_Impl.compare \\<times> _) set\" \n    where \"compare_rel \\<equiv> Id\""], ["", "lemma param_compare[param]:\n    \"(RBT_Impl.LT,RBT_Impl.LT)\\<in>compare_rel\"\n    \"(RBT_Impl.GT,RBT_Impl.GT)\\<in>compare_rel\"\n    \"(RBT_Impl.EQ,RBT_Impl.EQ)\\<in>compare_rel\"\n    \"(RBT_Impl.case_compare,RBT_Impl.case_compare)\\<in>R\\<rightarrow>R\\<rightarrow>R\\<rightarrow>compare_rel\\<rightarrow>R\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((compare.LT, compare.LT) \\<in> compare_rel &&&\n     (compare.GT, compare.GT) \\<in> compare_rel) &&&\n    (compare.EQ, compare.EQ) \\<in> compare_rel &&&\n    (compare.case_compare, compare.case_compare)\n    \\<in> R \\<rightarrow>\n          R \\<rightarrow> R \\<rightarrow> compare_rel \\<rightarrow> R", "by (auto split: RBT_Impl.compare.split)"], ["", "lemma param_rbtreeify_aux[param]:\n    \"\\<lbrakk>n\\<le>length kvs; (n,n')\\<in>nat_rel; (kvs,kvs')\\<in>\\<langle>\\<langle>Ra,Rb\\<rangle>prod_rel\\<rangle>list_rel\\<rbrakk> \n    \\<Longrightarrow> (rbtreeify_f n kvs,rbtreeify_f n' kvs')\n      \\<in> \\<langle>\\<langle>Ra,Rb\\<rangle>rbt_rel, \\<langle>\\<langle>Ra,Rb\\<rangle>prod_rel\\<rangle>list_rel\\<rangle>prod_rel\"\n    \"\\<lbrakk>n\\<le>Suc (length kvs); (n,n')\\<in>nat_rel; (kvs,kvs')\\<in>\\<langle>\\<langle>Ra,Rb\\<rangle>prod_rel\\<rangle>list_rel\\<rbrakk>\n    \\<Longrightarrow> (rbtreeify_g n kvs,rbtreeify_g n' kvs')\n      \\<in> \\<langle>\\<langle>Ra,Rb\\<rangle>rbt_rel, \\<langle>\\<langle>Ra,Rb\\<rangle>prod_rel\\<rangle>list_rel\\<rangle>prod_rel\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lbrakk>n \\<le> length kvs; (n, n') \\<in> nat_rel;\n      (kvs, kvs')\n      \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n     \\<Longrightarrow> (rbtreeify_f n kvs, rbtreeify_f n' kvs')\n                       \\<in> \\<langle>Ra,\n                             Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                             \\<langle>Ra \\<times>\\<^sub>r\nRb\\<rangle>list_rel) &&&\n    (\\<lbrakk>n \\<le> Suc (length kvs); (n, n') \\<in> nat_rel;\n      (kvs, kvs')\n      \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n     \\<Longrightarrow> (rbtreeify_g n kvs, rbtreeify_g n' kvs')\n                       \\<in> \\<langle>Ra,\n                             Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                             \\<langle>Ra \\<times>\\<^sub>r\nRb\\<rangle>list_rel)", "apply (induct n kvs and n kvs \n      arbitrary: n' kvs' and n' kvs'\n      rule: rbtreeify_induct)"], ["proof (prove)\ngoal (8 subgoals):\n 1. \\<And>kvs n' kvs'.\n       \\<lbrakk>(0, n') \\<in> nat_rel;\n        (kvs, kvs')\n        \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n       \\<Longrightarrow> (rbtreeify_f 0 kvs, rbtreeify_f n' kvs')\n                         \\<in> \\<langle>Ra,\n                               Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                               \\<langle>Ra \\<times>\\<^sub>r\n  Rb\\<rangle>list_rel\n 2. \\<And>k v kvs n' kvs'.\n       \\<lbrakk>(Suc 0, n') \\<in> nat_rel;\n        ((k, v) # kvs, kvs')\n        \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n       \\<Longrightarrow> (rbtreeify_f (Suc 0) ((k, v) # kvs),\n                          rbtreeify_f n' kvs')\n                         \\<in> \\<langle>Ra,\n                               Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                               \\<langle>Ra \\<times>\\<^sub>r\n  Rb\\<rangle>list_rel\n 3. \\<And>n kvs t k v kvs' n' kvs'a.\n       \\<lbrakk>0 < n; n \\<le> length kvs;\n        \\<And>n' kvs'.\n           \\<lbrakk>(n, n') \\<in> nat_rel;\n            (kvs, kvs')\n            \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n           \\<Longrightarrow> (rbtreeify_f n kvs, rbtreeify_f n' kvs')\n                             \\<in> \\<langle>Ra,\n                                   Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                                   \\<langle>Ra \\<times>\\<^sub>r\n      Rb\\<rangle>list_rel;\n        rbtreeify_f n kvs = (t, (k, v) # kvs'); n \\<le> Suc (length kvs');\n        \\<And>n' kvs'a.\n           \\<lbrakk>(n, n') \\<in> nat_rel;\n            (kvs', kvs'a)\n            \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n           \\<Longrightarrow> (rbtreeify_g n kvs', rbtreeify_g n' kvs'a)\n                             \\<in> \\<langle>Ra,\n                                   Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                                   \\<langle>Ra \\<times>\\<^sub>r\n      Rb\\<rangle>list_rel;\n        (2 * n, n') \\<in> nat_rel;\n        (kvs, kvs'a)\n        \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n       \\<Longrightarrow> (rbtreeify_f (2 * n) kvs, rbtreeify_f n' kvs'a)\n                         \\<in> \\<langle>Ra,\n                               Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                               \\<langle>Ra \\<times>\\<^sub>r\n  Rb\\<rangle>list_rel\n 4. \\<And>n kvs t k v kvs' n' kvs'a.\n       \\<lbrakk>0 < n; n \\<le> length kvs;\n        \\<And>n' kvs'.\n           \\<lbrakk>(n, n') \\<in> nat_rel;\n            (kvs, kvs')\n            \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n           \\<Longrightarrow> (rbtreeify_f n kvs, rbtreeify_f n' kvs')\n                             \\<in> \\<langle>Ra,\n                                   Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                                   \\<langle>Ra \\<times>\\<^sub>r\n      Rb\\<rangle>list_rel;\n        rbtreeify_f n kvs = (t, (k, v) # kvs'); n \\<le> length kvs';\n        \\<And>n' kvs'a.\n           \\<lbrakk>(n, n') \\<in> nat_rel;\n            (kvs', kvs'a)\n            \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n           \\<Longrightarrow> (rbtreeify_f n kvs', rbtreeify_f n' kvs'a)\n                             \\<in> \\<langle>Ra,\n                                   Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                                   \\<langle>Ra \\<times>\\<^sub>r\n      Rb\\<rangle>list_rel;\n        (Suc (2 * n), n') \\<in> nat_rel;\n        (kvs, kvs'a)\n        \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n       \\<Longrightarrow> (rbtreeify_f (Suc (2 * n)) kvs,\n                          rbtreeify_f n' kvs'a)\n                         \\<in> \\<langle>Ra,\n                               Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                               \\<langle>Ra \\<times>\\<^sub>r\n  Rb\\<rangle>list_rel\n 5. \\<And>kvs n' kvs'.\n       \\<lbrakk>(0, n') \\<in> nat_rel;\n        (kvs, kvs')\n        \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n       \\<Longrightarrow> (rbtreeify_g 0 kvs, rbtreeify_g n' kvs')\n                         \\<in> \\<langle>Ra,\n                               Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                               \\<langle>Ra \\<times>\\<^sub>r\n  Rb\\<rangle>list_rel\n 6. \\<And>kvs n' kvs'.\n       \\<lbrakk>(Suc 0, n') \\<in> nat_rel;\n        (kvs, kvs')\n        \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n       \\<Longrightarrow> (rbtreeify_g (Suc 0) kvs, rbtreeify_g n' kvs')\n                         \\<in> \\<langle>Ra,\n                               Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                               \\<langle>Ra \\<times>\\<^sub>r\n  Rb\\<rangle>list_rel\n 7. \\<And>n kvs t k v kvs' n' kvs'a.\n       \\<lbrakk>0 < n; n \\<le> Suc (length kvs);\n        \\<And>n' kvs'.\n           \\<lbrakk>(n, n') \\<in> nat_rel;\n            (kvs, kvs')\n            \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n           \\<Longrightarrow> (rbtreeify_g n kvs, rbtreeify_g n' kvs')\n                             \\<in> \\<langle>Ra,\n                                   Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                                   \\<langle>Ra \\<times>\\<^sub>r\n      Rb\\<rangle>list_rel;\n        rbtreeify_g n kvs = (t, (k, v) # kvs'); n \\<le> Suc (length kvs');\n        \\<And>n' kvs'a.\n           \\<lbrakk>(n, n') \\<in> nat_rel;\n            (kvs', kvs'a)\n            \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n           \\<Longrightarrow> (rbtreeify_g n kvs', rbtreeify_g n' kvs'a)\n                             \\<in> \\<langle>Ra,\n                                   Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                                   \\<langle>Ra \\<times>\\<^sub>r\n      Rb\\<rangle>list_rel;\n        (2 * n, n') \\<in> nat_rel;\n        (kvs, kvs'a)\n        \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n       \\<Longrightarrow> (rbtreeify_g (2 * n) kvs, rbtreeify_g n' kvs'a)\n                         \\<in> \\<langle>Ra,\n                               Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                               \\<langle>Ra \\<times>\\<^sub>r\n  Rb\\<rangle>list_rel\n 8. \\<And>n kvs t k v kvs' n' kvs'a.\n       \\<lbrakk>0 < n; n \\<le> length kvs;\n        \\<And>n' kvs'.\n           \\<lbrakk>(n, n') \\<in> nat_rel;\n            (kvs, kvs')\n            \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n           \\<Longrightarrow> (rbtreeify_f n kvs, rbtreeify_f n' kvs')\n                             \\<in> \\<langle>Ra,\n                                   Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                                   \\<langle>Ra \\<times>\\<^sub>r\n      Rb\\<rangle>list_rel;\n        rbtreeify_f n kvs = (t, (k, v) # kvs'); n \\<le> Suc (length kvs');\n        \\<And>n' kvs'a.\n           \\<lbrakk>(n, n') \\<in> nat_rel;\n            (kvs', kvs'a)\n            \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n           \\<Longrightarrow> (rbtreeify_g n kvs', rbtreeify_g n' kvs'a)\n                             \\<in> \\<langle>Ra,\n                                   Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                                   \\<langle>Ra \\<times>\\<^sub>r\n      Rb\\<rangle>list_rel;\n        (Suc (2 * n), n') \\<in> nat_rel;\n        (kvs, kvs'a)\n        \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n       \\<Longrightarrow> (rbtreeify_g (Suc (2 * n)) kvs,\n                          rbtreeify_g n' kvs'a)\n                         \\<in> \\<langle>Ra,\n                               Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                               \\<langle>Ra \\<times>\\<^sub>r\n  Rb\\<rangle>list_rel", "(* TODO: Still requires some manual proof! *)"], ["proof (prove)\ngoal (8 subgoals):\n 1. \\<And>kvs n' kvs'.\n       \\<lbrakk>(0, n') \\<in> nat_rel;\n        (kvs, kvs')\n        \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n       \\<Longrightarrow> (rbtreeify_f 0 kvs, rbtreeify_f n' kvs')\n                         \\<in> \\<langle>Ra,\n                               Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                               \\<langle>Ra \\<times>\\<^sub>r\n  Rb\\<rangle>list_rel\n 2. \\<And>k v kvs n' kvs'.\n       \\<lbrakk>(Suc 0, n') \\<in> nat_rel;\n        ((k, v) # kvs, kvs')\n        \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n       \\<Longrightarrow> (rbtreeify_f (Suc 0) ((k, v) # kvs),\n                          rbtreeify_f n' kvs')\n                         \\<in> \\<langle>Ra,\n                               Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                               \\<langle>Ra \\<times>\\<^sub>r\n  Rb\\<rangle>list_rel\n 3. \\<And>n kvs t k v kvs' n' kvs'a.\n       \\<lbrakk>0 < n; n \\<le> length kvs;\n        \\<And>n' kvs'.\n           \\<lbrakk>(n, n') \\<in> nat_rel;\n            (kvs, kvs')\n            \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n           \\<Longrightarrow> (rbtreeify_f n kvs, rbtreeify_f n' kvs')\n                             \\<in> \\<langle>Ra,\n                                   Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                                   \\<langle>Ra \\<times>\\<^sub>r\n      Rb\\<rangle>list_rel;\n        rbtreeify_f n kvs = (t, (k, v) # kvs'); n \\<le> Suc (length kvs');\n        \\<And>n' kvs'a.\n           \\<lbrakk>(n, n') \\<in> nat_rel;\n            (kvs', kvs'a)\n            \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n           \\<Longrightarrow> (rbtreeify_g n kvs', rbtreeify_g n' kvs'a)\n                             \\<in> \\<langle>Ra,\n                                   Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                                   \\<langle>Ra \\<times>\\<^sub>r\n      Rb\\<rangle>list_rel;\n        (2 * n, n') \\<in> nat_rel;\n        (kvs, kvs'a)\n        \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n       \\<Longrightarrow> (rbtreeify_f (2 * n) kvs, rbtreeify_f n' kvs'a)\n                         \\<in> \\<langle>Ra,\n                               Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                               \\<langle>Ra \\<times>\\<^sub>r\n  Rb\\<rangle>list_rel\n 4. \\<And>n kvs t k v kvs' n' kvs'a.\n       \\<lbrakk>0 < n; n \\<le> length kvs;\n        \\<And>n' kvs'.\n           \\<lbrakk>(n, n') \\<in> nat_rel;\n            (kvs, kvs')\n            \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n           \\<Longrightarrow> (rbtreeify_f n kvs, rbtreeify_f n' kvs')\n                             \\<in> \\<langle>Ra,\n                                   Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                                   \\<langle>Ra \\<times>\\<^sub>r\n      Rb\\<rangle>list_rel;\n        rbtreeify_f n kvs = (t, (k, v) # kvs'); n \\<le> length kvs';\n        \\<And>n' kvs'a.\n           \\<lbrakk>(n, n') \\<in> nat_rel;\n            (kvs', kvs'a)\n            \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n           \\<Longrightarrow> (rbtreeify_f n kvs', rbtreeify_f n' kvs'a)\n                             \\<in> \\<langle>Ra,\n                                   Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                                   \\<langle>Ra \\<times>\\<^sub>r\n      Rb\\<rangle>list_rel;\n        (Suc (2 * n), n') \\<in> nat_rel;\n        (kvs, kvs'a)\n        \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n       \\<Longrightarrow> (rbtreeify_f (Suc (2 * n)) kvs,\n                          rbtreeify_f n' kvs'a)\n                         \\<in> \\<langle>Ra,\n                               Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                               \\<langle>Ra \\<times>\\<^sub>r\n  Rb\\<rangle>list_rel\n 5. \\<And>kvs n' kvs'.\n       \\<lbrakk>(0, n') \\<in> nat_rel;\n        (kvs, kvs')\n        \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n       \\<Longrightarrow> (rbtreeify_g 0 kvs, rbtreeify_g n' kvs')\n                         \\<in> \\<langle>Ra,\n                               Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                               \\<langle>Ra \\<times>\\<^sub>r\n  Rb\\<rangle>list_rel\n 6. \\<And>kvs n' kvs'.\n       \\<lbrakk>(Suc 0, n') \\<in> nat_rel;\n        (kvs, kvs')\n        \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n       \\<Longrightarrow> (rbtreeify_g (Suc 0) kvs, rbtreeify_g n' kvs')\n                         \\<in> \\<langle>Ra,\n                               Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                               \\<langle>Ra \\<times>\\<^sub>r\n  Rb\\<rangle>list_rel\n 7. \\<And>n kvs t k v kvs' n' kvs'a.\n       \\<lbrakk>0 < n; n \\<le> Suc (length kvs);\n        \\<And>n' kvs'.\n           \\<lbrakk>(n, n') \\<in> nat_rel;\n            (kvs, kvs')\n            \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n           \\<Longrightarrow> (rbtreeify_g n kvs, rbtreeify_g n' kvs')\n                             \\<in> \\<langle>Ra,\n                                   Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                                   \\<langle>Ra \\<times>\\<^sub>r\n      Rb\\<rangle>list_rel;\n        rbtreeify_g n kvs = (t, (k, v) # kvs'); n \\<le> Suc (length kvs');\n        \\<And>n' kvs'a.\n           \\<lbrakk>(n, n') \\<in> nat_rel;\n            (kvs', kvs'a)\n            \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n           \\<Longrightarrow> (rbtreeify_g n kvs', rbtreeify_g n' kvs'a)\n                             \\<in> \\<langle>Ra,\n                                   Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                                   \\<langle>Ra \\<times>\\<^sub>r\n      Rb\\<rangle>list_rel;\n        (2 * n, n') \\<in> nat_rel;\n        (kvs, kvs'a)\n        \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n       \\<Longrightarrow> (rbtreeify_g (2 * n) kvs, rbtreeify_g n' kvs'a)\n                         \\<in> \\<langle>Ra,\n                               Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                               \\<langle>Ra \\<times>\\<^sub>r\n  Rb\\<rangle>list_rel\n 8. \\<And>n kvs t k v kvs' n' kvs'a.\n       \\<lbrakk>0 < n; n \\<le> length kvs;\n        \\<And>n' kvs'.\n           \\<lbrakk>(n, n') \\<in> nat_rel;\n            (kvs, kvs')\n            \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n           \\<Longrightarrow> (rbtreeify_f n kvs, rbtreeify_f n' kvs')\n                             \\<in> \\<langle>Ra,\n                                   Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                                   \\<langle>Ra \\<times>\\<^sub>r\n      Rb\\<rangle>list_rel;\n        rbtreeify_f n kvs = (t, (k, v) # kvs'); n \\<le> Suc (length kvs');\n        \\<And>n' kvs'a.\n           \\<lbrakk>(n, n') \\<in> nat_rel;\n            (kvs', kvs'a)\n            \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n           \\<Longrightarrow> (rbtreeify_g n kvs', rbtreeify_g n' kvs'a)\n                             \\<in> \\<langle>Ra,\n                                   Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                                   \\<langle>Ra \\<times>\\<^sub>r\n      Rb\\<rangle>list_rel;\n        (Suc (2 * n), n') \\<in> nat_rel;\n        (kvs, kvs'a)\n        \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n       \\<Longrightarrow> (rbtreeify_g (Suc (2 * n)) kvs,\n                          rbtreeify_g n' kvs'a)\n                         \\<in> \\<langle>Ra,\n                               Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                               \\<langle>Ra \\<times>\\<^sub>r\n  Rb\\<rangle>list_rel", "apply (simp only: pair_in_Id_conv)"], ["proof (prove)\ngoal (8 subgoals):\n 1. \\<And>kvs n' kvs'.\n       \\<lbrakk>0 = n';\n        (kvs, kvs')\n        \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n       \\<Longrightarrow> (rbtreeify_f 0 kvs, rbtreeify_f 0 kvs')\n                         \\<in> \\<langle>Ra,\n                               Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                               \\<langle>Ra \\<times>\\<^sub>r\n  Rb\\<rangle>list_rel\n 2. \\<And>k v kvs n' kvs'.\n       \\<lbrakk>(Suc 0, n') \\<in> nat_rel;\n        ((k, v) # kvs, kvs')\n        \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n       \\<Longrightarrow> (rbtreeify_f (Suc 0) ((k, v) # kvs),\n                          rbtreeify_f n' kvs')\n                         \\<in> \\<langle>Ra,\n                               Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                               \\<langle>Ra \\<times>\\<^sub>r\n  Rb\\<rangle>list_rel\n 3. \\<And>n kvs t k v kvs' n' kvs'a.\n       \\<lbrakk>0 < n; n \\<le> length kvs;\n        \\<And>n' kvs'.\n           \\<lbrakk>(n, n') \\<in> nat_rel;\n            (kvs, kvs')\n            \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n           \\<Longrightarrow> (rbtreeify_f n kvs, rbtreeify_f n' kvs')\n                             \\<in> \\<langle>Ra,\n                                   Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                                   \\<langle>Ra \\<times>\\<^sub>r\n      Rb\\<rangle>list_rel;\n        rbtreeify_f n kvs = (t, (k, v) # kvs'); n \\<le> Suc (length kvs');\n        \\<And>n' kvs'a.\n           \\<lbrakk>(n, n') \\<in> nat_rel;\n            (kvs', kvs'a)\n            \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n           \\<Longrightarrow> (rbtreeify_g n kvs', rbtreeify_g n' kvs'a)\n                             \\<in> \\<langle>Ra,\n                                   Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                                   \\<langle>Ra \\<times>\\<^sub>r\n      Rb\\<rangle>list_rel;\n        (2 * n, n') \\<in> nat_rel;\n        (kvs, kvs'a)\n        \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n       \\<Longrightarrow> (rbtreeify_f (2 * n) kvs, rbtreeify_f n' kvs'a)\n                         \\<in> \\<langle>Ra,\n                               Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                               \\<langle>Ra \\<times>\\<^sub>r\n  Rb\\<rangle>list_rel\n 4. \\<And>n kvs t k v kvs' n' kvs'a.\n       \\<lbrakk>0 < n; n \\<le> length kvs;\n        \\<And>n' kvs'.\n           \\<lbrakk>(n, n') \\<in> nat_rel;\n            (kvs, kvs')\n            \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n           \\<Longrightarrow> (rbtreeify_f n kvs, rbtreeify_f n' kvs')\n                             \\<in> \\<langle>Ra,\n                                   Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                                   \\<langle>Ra \\<times>\\<^sub>r\n      Rb\\<rangle>list_rel;\n        rbtreeify_f n kvs = (t, (k, v) # kvs'); n \\<le> length kvs';\n        \\<And>n' kvs'a.\n           \\<lbrakk>(n, n') \\<in> nat_rel;\n            (kvs', kvs'a)\n            \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n           \\<Longrightarrow> (rbtreeify_f n kvs', rbtreeify_f n' kvs'a)\n                             \\<in> \\<langle>Ra,\n                                   Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                                   \\<langle>Ra \\<times>\\<^sub>r\n      Rb\\<rangle>list_rel;\n        (Suc (2 * n), n') \\<in> nat_rel;\n        (kvs, kvs'a)\n        \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n       \\<Longrightarrow> (rbtreeify_f (Suc (2 * n)) kvs,\n                          rbtreeify_f n' kvs'a)\n                         \\<in> \\<langle>Ra,\n                               Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                               \\<langle>Ra \\<times>\\<^sub>r\n  Rb\\<rangle>list_rel\n 5. \\<And>kvs n' kvs'.\n       \\<lbrakk>(0, n') \\<in> nat_rel;\n        (kvs, kvs')\n        \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n       \\<Longrightarrow> (rbtreeify_g 0 kvs, rbtreeify_g n' kvs')\n                         \\<in> \\<langle>Ra,\n                               Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                               \\<langle>Ra \\<times>\\<^sub>r\n  Rb\\<rangle>list_rel\n 6. \\<And>kvs n' kvs'.\n       \\<lbrakk>(Suc 0, n') \\<in> nat_rel;\n        (kvs, kvs')\n        \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n       \\<Longrightarrow> (rbtreeify_g (Suc 0) kvs, rbtreeify_g n' kvs')\n                         \\<in> \\<langle>Ra,\n                               Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                               \\<langle>Ra \\<times>\\<^sub>r\n  Rb\\<rangle>list_rel\n 7. \\<And>n kvs t k v kvs' n' kvs'a.\n       \\<lbrakk>0 < n; n \\<le> Suc (length kvs);\n        \\<And>n' kvs'.\n           \\<lbrakk>(n, n') \\<in> nat_rel;\n            (kvs, kvs')\n            \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n           \\<Longrightarrow> (rbtreeify_g n kvs, rbtreeify_g n' kvs')\n                             \\<in> \\<langle>Ra,\n                                   Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                                   \\<langle>Ra \\<times>\\<^sub>r\n      Rb\\<rangle>list_rel;\n        rbtreeify_g n kvs = (t, (k, v) # kvs'); n \\<le> Suc (length kvs');\n        \\<And>n' kvs'a.\n           \\<lbrakk>(n, n') \\<in> nat_rel;\n            (kvs', kvs'a)\n            \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n           \\<Longrightarrow> (rbtreeify_g n kvs', rbtreeify_g n' kvs'a)\n                             \\<in> \\<langle>Ra,\n                                   Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                                   \\<langle>Ra \\<times>\\<^sub>r\n      Rb\\<rangle>list_rel;\n        (2 * n, n') \\<in> nat_rel;\n        (kvs, kvs'a)\n        \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n       \\<Longrightarrow> (rbtreeify_g (2 * n) kvs, rbtreeify_g n' kvs'a)\n                         \\<in> \\<langle>Ra,\n                               Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                               \\<langle>Ra \\<times>\\<^sub>r\n  Rb\\<rangle>list_rel\n 8. \\<And>n kvs t k v kvs' n' kvs'a.\n       \\<lbrakk>0 < n; n \\<le> length kvs;\n        \\<And>n' kvs'.\n           \\<lbrakk>(n, n') \\<in> nat_rel;\n            (kvs, kvs')\n            \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n           \\<Longrightarrow> (rbtreeify_f n kvs, rbtreeify_f n' kvs')\n                             \\<in> \\<langle>Ra,\n                                   Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                                   \\<langle>Ra \\<times>\\<^sub>r\n      Rb\\<rangle>list_rel;\n        rbtreeify_f n kvs = (t, (k, v) # kvs'); n \\<le> Suc (length kvs');\n        \\<And>n' kvs'a.\n           \\<lbrakk>(n, n') \\<in> nat_rel;\n            (kvs', kvs'a)\n            \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n           \\<Longrightarrow> (rbtreeify_g n kvs', rbtreeify_g n' kvs'a)\n                             \\<in> \\<langle>Ra,\n                                   Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                                   \\<langle>Ra \\<times>\\<^sub>r\n      Rb\\<rangle>list_rel;\n        (Suc (2 * n), n') \\<in> nat_rel;\n        (kvs, kvs'a)\n        \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n       \\<Longrightarrow> (rbtreeify_g (Suc (2 * n)) kvs,\n                          rbtreeify_g n' kvs'a)\n                         \\<in> \\<langle>Ra,\n                               Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                               \\<langle>Ra \\<times>\\<^sub>r\n  Rb\\<rangle>list_rel", "apply (simp (no_asm_use) only: rbtreeify_f_simps rbtreeify_g_simps)"], ["proof (prove)\ngoal (8 subgoals):\n 1. \\<And>kvs n' kvs'.\n       \\<lbrakk>0 = n';\n        (kvs, kvs')\n        \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n       \\<Longrightarrow> ((rbt.Empty, kvs), rbt.Empty, kvs')\n                         \\<in> \\<langle>Ra,\n                               Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                               \\<langle>Ra \\<times>\\<^sub>r\n  Rb\\<rangle>list_rel\n 2. \\<And>k v kvs n' kvs'.\n       \\<lbrakk>(Suc 0, n') \\<in> nat_rel;\n        ((k, v) # kvs, kvs')\n        \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n       \\<Longrightarrow> (rbtreeify_f (Suc 0) ((k, v) # kvs),\n                          rbtreeify_f n' kvs')\n                         \\<in> \\<langle>Ra,\n                               Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                               \\<langle>Ra \\<times>\\<^sub>r\n  Rb\\<rangle>list_rel\n 3. \\<And>n kvs t k v kvs' n' kvs'a.\n       \\<lbrakk>0 < n; n \\<le> length kvs;\n        \\<And>n' kvs'.\n           \\<lbrakk>(n, n') \\<in> nat_rel;\n            (kvs, kvs')\n            \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n           \\<Longrightarrow> (rbtreeify_f n kvs, rbtreeify_f n' kvs')\n                             \\<in> \\<langle>Ra,\n                                   Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                                   \\<langle>Ra \\<times>\\<^sub>r\n      Rb\\<rangle>list_rel;\n        rbtreeify_f n kvs = (t, (k, v) # kvs'); n \\<le> Suc (length kvs');\n        \\<And>n' kvs'a.\n           \\<lbrakk>(n, n') \\<in> nat_rel;\n            (kvs', kvs'a)\n            \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n           \\<Longrightarrow> (rbtreeify_g n kvs', rbtreeify_g n' kvs'a)\n                             \\<in> \\<langle>Ra,\n                                   Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                                   \\<langle>Ra \\<times>\\<^sub>r\n      Rb\\<rangle>list_rel;\n        (2 * n, n') \\<in> nat_rel;\n        (kvs, kvs'a)\n        \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n       \\<Longrightarrow> (rbtreeify_f (2 * n) kvs, rbtreeify_f n' kvs'a)\n                         \\<in> \\<langle>Ra,\n                               Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                               \\<langle>Ra \\<times>\\<^sub>r\n  Rb\\<rangle>list_rel\n 4. \\<And>n kvs t k v kvs' n' kvs'a.\n       \\<lbrakk>0 < n; n \\<le> length kvs;\n        \\<And>n' kvs'.\n           \\<lbrakk>(n, n') \\<in> nat_rel;\n            (kvs, kvs')\n            \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n           \\<Longrightarrow> (rbtreeify_f n kvs, rbtreeify_f n' kvs')\n                             \\<in> \\<langle>Ra,\n                                   Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                                   \\<langle>Ra \\<times>\\<^sub>r\n      Rb\\<rangle>list_rel;\n        rbtreeify_f n kvs = (t, (k, v) # kvs'); n \\<le> length kvs';\n        \\<And>n' kvs'a.\n           \\<lbrakk>(n, n') \\<in> nat_rel;\n            (kvs', kvs'a)\n            \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n           \\<Longrightarrow> (rbtreeify_f n kvs', rbtreeify_f n' kvs'a)\n                             \\<in> \\<langle>Ra,\n                                   Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                                   \\<langle>Ra \\<times>\\<^sub>r\n      Rb\\<rangle>list_rel;\n        (Suc (2 * n), n') \\<in> nat_rel;\n        (kvs, kvs'a)\n        \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n       \\<Longrightarrow> (rbtreeify_f (Suc (2 * n)) kvs,\n                          rbtreeify_f n' kvs'a)\n                         \\<in> \\<langle>Ra,\n                               Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                               \\<langle>Ra \\<times>\\<^sub>r\n  Rb\\<rangle>list_rel\n 5. \\<And>kvs n' kvs'.\n       \\<lbrakk>(0, n') \\<in> nat_rel;\n        (kvs, kvs')\n        \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n       \\<Longrightarrow> (rbtreeify_g 0 kvs, rbtreeify_g n' kvs')\n                         \\<in> \\<langle>Ra,\n                               Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                               \\<langle>Ra \\<times>\\<^sub>r\n  Rb\\<rangle>list_rel\n 6. \\<And>kvs n' kvs'.\n       \\<lbrakk>(Suc 0, n') \\<in> nat_rel;\n        (kvs, kvs')\n        \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n       \\<Longrightarrow> (rbtreeify_g (Suc 0) kvs, rbtreeify_g n' kvs')\n                         \\<in> \\<langle>Ra,\n                               Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                               \\<langle>Ra \\<times>\\<^sub>r\n  Rb\\<rangle>list_rel\n 7. \\<And>n kvs t k v kvs' n' kvs'a.\n       \\<lbrakk>0 < n; n \\<le> Suc (length kvs);\n        \\<And>n' kvs'.\n           \\<lbrakk>(n, n') \\<in> nat_rel;\n            (kvs, kvs')\n            \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n           \\<Longrightarrow> (rbtreeify_g n kvs, rbtreeify_g n' kvs')\n                             \\<in> \\<langle>Ra,\n                                   Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                                   \\<langle>Ra \\<times>\\<^sub>r\n      Rb\\<rangle>list_rel;\n        rbtreeify_g n kvs = (t, (k, v) # kvs'); n \\<le> Suc (length kvs');\n        \\<And>n' kvs'a.\n           \\<lbrakk>(n, n') \\<in> nat_rel;\n            (kvs', kvs'a)\n            \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n           \\<Longrightarrow> (rbtreeify_g n kvs', rbtreeify_g n' kvs'a)\n                             \\<in> \\<langle>Ra,\n                                   Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                                   \\<langle>Ra \\<times>\\<^sub>r\n      Rb\\<rangle>list_rel;\n        (2 * n, n') \\<in> nat_rel;\n        (kvs, kvs'a)\n        \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n       \\<Longrightarrow> (rbtreeify_g (2 * n) kvs, rbtreeify_g n' kvs'a)\n                         \\<in> \\<langle>Ra,\n                               Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                               \\<langle>Ra \\<times>\\<^sub>r\n  Rb\\<rangle>list_rel\n 8. \\<And>n kvs t k v kvs' n' kvs'a.\n       \\<lbrakk>0 < n; n \\<le> length kvs;\n        \\<And>n' kvs'.\n           \\<lbrakk>(n, n') \\<in> nat_rel;\n            (kvs, kvs')\n            \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n           \\<Longrightarrow> (rbtreeify_f n kvs, rbtreeify_f n' kvs')\n                             \\<in> \\<langle>Ra,\n                                   Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                                   \\<langle>Ra \\<times>\\<^sub>r\n      Rb\\<rangle>list_rel;\n        rbtreeify_f n kvs = (t, (k, v) # kvs'); n \\<le> Suc (length kvs');\n        \\<And>n' kvs'a.\n           \\<lbrakk>(n, n') \\<in> nat_rel;\n            (kvs', kvs'a)\n            \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n           \\<Longrightarrow> (rbtreeify_g n kvs', rbtreeify_g n' kvs'a)\n                             \\<in> \\<langle>Ra,\n                                   Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                                   \\<langle>Ra \\<times>\\<^sub>r\n      Rb\\<rangle>list_rel;\n        (Suc (2 * n), n') \\<in> nat_rel;\n        (kvs, kvs'a)\n        \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n       \\<Longrightarrow> (rbtreeify_g (Suc (2 * n)) kvs,\n                          rbtreeify_g n' kvs'a)\n                         \\<in> \\<langle>Ra,\n                               Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                               \\<langle>Ra \\<times>\\<^sub>r\n  Rb\\<rangle>list_rel", "apply parametricity"], ["proof (prove)\ngoal (7 subgoals):\n 1. \\<And>k v kvs n' kvs'.\n       \\<lbrakk>(Suc 0, n') \\<in> nat_rel;\n        ((k, v) # kvs, kvs')\n        \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n       \\<Longrightarrow> (rbtreeify_f (Suc 0) ((k, v) # kvs),\n                          rbtreeify_f n' kvs')\n                         \\<in> \\<langle>Ra,\n                               Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                               \\<langle>Ra \\<times>\\<^sub>r\n  Rb\\<rangle>list_rel\n 2. \\<And>n kvs t k v kvs' n' kvs'a.\n       \\<lbrakk>0 < n; n \\<le> length kvs;\n        \\<And>n' kvs'.\n           \\<lbrakk>(n, n') \\<in> nat_rel;\n            (kvs, kvs')\n            \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n           \\<Longrightarrow> (rbtreeify_f n kvs, rbtreeify_f n' kvs')\n                             \\<in> \\<langle>Ra,\n                                   Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                                   \\<langle>Ra \\<times>\\<^sub>r\n      Rb\\<rangle>list_rel;\n        rbtreeify_f n kvs = (t, (k, v) # kvs'); n \\<le> Suc (length kvs');\n        \\<And>n' kvs'a.\n           \\<lbrakk>(n, n') \\<in> nat_rel;\n            (kvs', kvs'a)\n            \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n           \\<Longrightarrow> (rbtreeify_g n kvs', rbtreeify_g n' kvs'a)\n                             \\<in> \\<langle>Ra,\n                                   Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                                   \\<langle>Ra \\<times>\\<^sub>r\n      Rb\\<rangle>list_rel;\n        (2 * n, n') \\<in> nat_rel;\n        (kvs, kvs'a)\n        \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n       \\<Longrightarrow> (rbtreeify_f (2 * n) kvs, rbtreeify_f n' kvs'a)\n                         \\<in> \\<langle>Ra,\n                               Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                               \\<langle>Ra \\<times>\\<^sub>r\n  Rb\\<rangle>list_rel\n 3. \\<And>n kvs t k v kvs' n' kvs'a.\n       \\<lbrakk>0 < n; n \\<le> length kvs;\n        \\<And>n' kvs'.\n           \\<lbrakk>(n, n') \\<in> nat_rel;\n            (kvs, kvs')\n            \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n           \\<Longrightarrow> (rbtreeify_f n kvs, rbtreeify_f n' kvs')\n                             \\<in> \\<langle>Ra,\n                                   Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                                   \\<langle>Ra \\<times>\\<^sub>r\n      Rb\\<rangle>list_rel;\n        rbtreeify_f n kvs = (t, (k, v) # kvs'); n \\<le> length kvs';\n        \\<And>n' kvs'a.\n           \\<lbrakk>(n, n') \\<in> nat_rel;\n            (kvs', kvs'a)\n            \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n           \\<Longrightarrow> (rbtreeify_f n kvs', rbtreeify_f n' kvs'a)\n                             \\<in> \\<langle>Ra,\n                                   Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                                   \\<langle>Ra \\<times>\\<^sub>r\n      Rb\\<rangle>list_rel;\n        (Suc (2 * n), n') \\<in> nat_rel;\n        (kvs, kvs'a)\n        \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n       \\<Longrightarrow> (rbtreeify_f (Suc (2 * n)) kvs,\n                          rbtreeify_f n' kvs'a)\n                         \\<in> \\<langle>Ra,\n                               Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                               \\<langle>Ra \\<times>\\<^sub>r\n  Rb\\<rangle>list_rel\n 4. \\<And>kvs n' kvs'.\n       \\<lbrakk>(0, n') \\<in> nat_rel;\n        (kvs, kvs')\n        \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n       \\<Longrightarrow> (rbtreeify_g 0 kvs, rbtreeify_g n' kvs')\n                         \\<in> \\<langle>Ra,\n                               Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                               \\<langle>Ra \\<times>\\<^sub>r\n  Rb\\<rangle>list_rel\n 5. \\<And>kvs n' kvs'.\n       \\<lbrakk>(Suc 0, n') \\<in> nat_rel;\n        (kvs, kvs')\n        \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n       \\<Longrightarrow> (rbtreeify_g (Suc 0) kvs, rbtreeify_g n' kvs')\n                         \\<in> \\<langle>Ra,\n                               Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                               \\<langle>Ra \\<times>\\<^sub>r\n  Rb\\<rangle>list_rel\n 6. \\<And>n kvs t k v kvs' n' kvs'a.\n       \\<lbrakk>0 < n; n \\<le> Suc (length kvs);\n        \\<And>n' kvs'.\n           \\<lbrakk>(n, n') \\<in> nat_rel;\n            (kvs, kvs')\n            \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n           \\<Longrightarrow> (rbtreeify_g n kvs, rbtreeify_g n' kvs')\n                             \\<in> \\<langle>Ra,\n                                   Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                                   \\<langle>Ra \\<times>\\<^sub>r\n      Rb\\<rangle>list_rel;\n        rbtreeify_g n kvs = (t, (k, v) # kvs'); n \\<le> Suc (length kvs');\n        \\<And>n' kvs'a.\n           \\<lbrakk>(n, n') \\<in> nat_rel;\n            (kvs', kvs'a)\n            \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n           \\<Longrightarrow> (rbtreeify_g n kvs', rbtreeify_g n' kvs'a)\n                             \\<in> \\<langle>Ra,\n                                   Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                                   \\<langle>Ra \\<times>\\<^sub>r\n      Rb\\<rangle>list_rel;\n        (2 * n, n') \\<in> nat_rel;\n        (kvs, kvs'a)\n        \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n       \\<Longrightarrow> (rbtreeify_g (2 * n) kvs, rbtreeify_g n' kvs'a)\n                         \\<in> \\<langle>Ra,\n                               Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                               \\<langle>Ra \\<times>\\<^sub>r\n  Rb\\<rangle>list_rel\n 7. \\<And>n kvs t k v kvs' n' kvs'a.\n       \\<lbrakk>0 < n; n \\<le> length kvs;\n        \\<And>n' kvs'.\n           \\<lbrakk>(n, n') \\<in> nat_rel;\n            (kvs, kvs')\n            \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n           \\<Longrightarrow> (rbtreeify_f n kvs, rbtreeify_f n' kvs')\n                             \\<in> \\<langle>Ra,\n                                   Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                                   \\<langle>Ra \\<times>\\<^sub>r\n      Rb\\<rangle>list_rel;\n        rbtreeify_f n kvs = (t, (k, v) # kvs'); n \\<le> Suc (length kvs');\n        \\<And>n' kvs'a.\n           \\<lbrakk>(n, n') \\<in> nat_rel;\n            (kvs', kvs'a)\n            \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n           \\<Longrightarrow> (rbtreeify_g n kvs', rbtreeify_g n' kvs'a)\n                             \\<in> \\<langle>Ra,\n                                   Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                                   \\<langle>Ra \\<times>\\<^sub>r\n      Rb\\<rangle>list_rel;\n        (Suc (2 * n), n') \\<in> nat_rel;\n        (kvs, kvs'a)\n        \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n       \\<Longrightarrow> (rbtreeify_g (Suc (2 * n)) kvs,\n                          rbtreeify_g n' kvs'a)\n                         \\<in> \\<langle>Ra,\n                               Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                               \\<langle>Ra \\<times>\\<^sub>r\n  Rb\\<rangle>list_rel", "apply (elim list_relE prod_relE)"], ["proof (prove)\ngoal (7 subgoals):\n 1. \\<And>k v kvs n' kvs' x' xs' a b a' b'.\n       \\<lbrakk>(Suc 0, n') \\<in> nat_rel; kvs' = x' # xs';\n        (kvs, xs') \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel;\n        (k, v) = (a, b); x' = (a', b'); (a, a') \\<in> Ra;\n        (b, b') \\<in> Rb\\<rbrakk>\n       \\<Longrightarrow> (rbtreeify_f (Suc 0) ((k, v) # kvs),\n                          rbtreeify_f n' kvs')\n                         \\<in> \\<langle>Ra,\n                               Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                               \\<langle>Ra \\<times>\\<^sub>r\n  Rb\\<rangle>list_rel\n 2. \\<And>n kvs t k v kvs' n' kvs'a.\n       \\<lbrakk>0 < n; n \\<le> length kvs;\n        \\<And>n' kvs'.\n           \\<lbrakk>(n, n') \\<in> nat_rel;\n            (kvs, kvs')\n            \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n           \\<Longrightarrow> (rbtreeify_f n kvs, rbtreeify_f n' kvs')\n                             \\<in> \\<langle>Ra,\n                                   Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                                   \\<langle>Ra \\<times>\\<^sub>r\n      Rb\\<rangle>list_rel;\n        rbtreeify_f n kvs = (t, (k, v) # kvs'); n \\<le> Suc (length kvs');\n        \\<And>n' kvs'a.\n           \\<lbrakk>(n, n') \\<in> nat_rel;\n            (kvs', kvs'a)\n            \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n           \\<Longrightarrow> (rbtreeify_g n kvs', rbtreeify_g n' kvs'a)\n                             \\<in> \\<langle>Ra,\n                                   Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                                   \\<langle>Ra \\<times>\\<^sub>r\n      Rb\\<rangle>list_rel;\n        (2 * n, n') \\<in> nat_rel;\n        (kvs, kvs'a)\n        \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n       \\<Longrightarrow> (rbtreeify_f (2 * n) kvs, rbtreeify_f n' kvs'a)\n                         \\<in> \\<langle>Ra,\n                               Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                               \\<langle>Ra \\<times>\\<^sub>r\n  Rb\\<rangle>list_rel\n 3. \\<And>n kvs t k v kvs' n' kvs'a.\n       \\<lbrakk>0 < n; n \\<le> length kvs;\n        \\<And>n' kvs'.\n           \\<lbrakk>(n, n') \\<in> nat_rel;\n            (kvs, kvs')\n            \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n           \\<Longrightarrow> (rbtreeify_f n kvs, rbtreeify_f n' kvs')\n                             \\<in> \\<langle>Ra,\n                                   Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                                   \\<langle>Ra \\<times>\\<^sub>r\n      Rb\\<rangle>list_rel;\n        rbtreeify_f n kvs = (t, (k, v) # kvs'); n \\<le> length kvs';\n        \\<And>n' kvs'a.\n           \\<lbrakk>(n, n') \\<in> nat_rel;\n            (kvs', kvs'a)\n            \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n           \\<Longrightarrow> (rbtreeify_f n kvs', rbtreeify_f n' kvs'a)\n                             \\<in> \\<langle>Ra,\n                                   Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                                   \\<langle>Ra \\<times>\\<^sub>r\n      Rb\\<rangle>list_rel;\n        (Suc (2 * n), n') \\<in> nat_rel;\n        (kvs, kvs'a)\n        \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n       \\<Longrightarrow> (rbtreeify_f (Suc (2 * n)) kvs,\n                          rbtreeify_f n' kvs'a)\n                         \\<in> \\<langle>Ra,\n                               Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                               \\<langle>Ra \\<times>\\<^sub>r\n  Rb\\<rangle>list_rel\n 4. \\<And>kvs n' kvs'.\n       \\<lbrakk>(0, n') \\<in> nat_rel;\n        (kvs, kvs')\n        \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n       \\<Longrightarrow> (rbtreeify_g 0 kvs, rbtreeify_g n' kvs')\n                         \\<in> \\<langle>Ra,\n                               Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                               \\<langle>Ra \\<times>\\<^sub>r\n  Rb\\<rangle>list_rel\n 5. \\<And>kvs n' kvs'.\n       \\<lbrakk>(Suc 0, n') \\<in> nat_rel;\n        (kvs, kvs')\n        \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n       \\<Longrightarrow> (rbtreeify_g (Suc 0) kvs, rbtreeify_g n' kvs')\n                         \\<in> \\<langle>Ra,\n                               Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                               \\<langle>Ra \\<times>\\<^sub>r\n  Rb\\<rangle>list_rel\n 6. \\<And>n kvs t k v kvs' n' kvs'a.\n       \\<lbrakk>0 < n; n \\<le> Suc (length kvs);\n        \\<And>n' kvs'.\n           \\<lbrakk>(n, n') \\<in> nat_rel;\n            (kvs, kvs')\n            \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n           \\<Longrightarrow> (rbtreeify_g n kvs, rbtreeify_g n' kvs')\n                             \\<in> \\<langle>Ra,\n                                   Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                                   \\<langle>Ra \\<times>\\<^sub>r\n      Rb\\<rangle>list_rel;\n        rbtreeify_g n kvs = (t, (k, v) # kvs'); n \\<le> Suc (length kvs');\n        \\<And>n' kvs'a.\n           \\<lbrakk>(n, n') \\<in> nat_rel;\n            (kvs', kvs'a)\n            \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n           \\<Longrightarrow> (rbtreeify_g n kvs', rbtreeify_g n' kvs'a)\n                             \\<in> \\<langle>Ra,\n                                   Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                                   \\<langle>Ra \\<times>\\<^sub>r\n      Rb\\<rangle>list_rel;\n        (2 * n, n') \\<in> nat_rel;\n        (kvs, kvs'a)\n        \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n       \\<Longrightarrow> (rbtreeify_g (2 * n) kvs, rbtreeify_g n' kvs'a)\n                         \\<in> \\<langle>Ra,\n                               Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                               \\<langle>Ra \\<times>\\<^sub>r\n  Rb\\<rangle>list_rel\n 7. \\<And>n kvs t k v kvs' n' kvs'a.\n       \\<lbrakk>0 < n; n \\<le> length kvs;\n        \\<And>n' kvs'.\n           \\<lbrakk>(n, n') \\<in> nat_rel;\n            (kvs, kvs')\n            \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n           \\<Longrightarrow> (rbtreeify_f n kvs, rbtreeify_f n' kvs')\n                             \\<in> \\<langle>Ra,\n                                   Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                                   \\<langle>Ra \\<times>\\<^sub>r\n      Rb\\<rangle>list_rel;\n        rbtreeify_f n kvs = (t, (k, v) # kvs'); n \\<le> Suc (length kvs');\n        \\<And>n' kvs'a.\n           \\<lbrakk>(n, n') \\<in> nat_rel;\n            (kvs', kvs'a)\n            \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n           \\<Longrightarrow> (rbtreeify_g n kvs', rbtreeify_g n' kvs'a)\n                             \\<in> \\<langle>Ra,\n                                   Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                                   \\<langle>Ra \\<times>\\<^sub>r\n      Rb\\<rangle>list_rel;\n        (Suc (2 * n), n') \\<in> nat_rel;\n        (kvs, kvs'a)\n        \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n       \\<Longrightarrow> (rbtreeify_g (Suc (2 * n)) kvs,\n                          rbtreeify_g n' kvs'a)\n                         \\<in> \\<langle>Ra,\n                               Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                               \\<langle>Ra \\<times>\\<^sub>r\n  Rb\\<rangle>list_rel", "apply (simp only: pair_in_Id_conv)"], ["proof (prove)\ngoal (7 subgoals):\n 1. \\<And>k v kvs n' kvs' x' xs' a b a' b'.\n       \\<lbrakk>Suc 0 = n'; kvs' = (a', b') # xs';\n        (kvs, xs') \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel;\n        (k, v) = (a, b); x' = (a', b'); (a, a') \\<in> Ra;\n        (b, b') \\<in> Rb\\<rbrakk>\n       \\<Longrightarrow> (rbtreeify_f n' ((a, b) # kvs),\n                          rbtreeify_f n' ((a', b') # xs'))\n                         \\<in> \\<langle>Ra,\n                               Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                               \\<langle>Ra \\<times>\\<^sub>r\n  Rb\\<rangle>list_rel\n 2. \\<And>n kvs t k v kvs' n' kvs'a.\n       \\<lbrakk>0 < n; n \\<le> length kvs;\n        \\<And>n' kvs'.\n           \\<lbrakk>(n, n') \\<in> nat_rel;\n            (kvs, kvs')\n            \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n           \\<Longrightarrow> (rbtreeify_f n kvs, rbtreeify_f n' kvs')\n                             \\<in> \\<langle>Ra,\n                                   Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                                   \\<langle>Ra \\<times>\\<^sub>r\n      Rb\\<rangle>list_rel;\n        rbtreeify_f n kvs = (t, (k, v) # kvs'); n \\<le> Suc (length kvs');\n        \\<And>n' kvs'a.\n           \\<lbrakk>(n, n') \\<in> nat_rel;\n            (kvs', kvs'a)\n            \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n           \\<Longrightarrow> (rbtreeify_g n kvs', rbtreeify_g n' kvs'a)\n                             \\<in> \\<langle>Ra,\n                                   Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                                   \\<langle>Ra \\<times>\\<^sub>r\n      Rb\\<rangle>list_rel;\n        (2 * n, n') \\<in> nat_rel;\n        (kvs, kvs'a)\n        \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n       \\<Longrightarrow> (rbtreeify_f (2 * n) kvs, rbtreeify_f n' kvs'a)\n                         \\<in> \\<langle>Ra,\n                               Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                               \\<langle>Ra \\<times>\\<^sub>r\n  Rb\\<rangle>list_rel\n 3. \\<And>n kvs t k v kvs' n' kvs'a.\n       \\<lbrakk>0 < n; n \\<le> length kvs;\n        \\<And>n' kvs'.\n           \\<lbrakk>(n, n') \\<in> nat_rel;\n            (kvs, kvs')\n            \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n           \\<Longrightarrow> (rbtreeify_f n kvs, rbtreeify_f n' kvs')\n                             \\<in> \\<langle>Ra,\n                                   Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                                   \\<langle>Ra \\<times>\\<^sub>r\n      Rb\\<rangle>list_rel;\n        rbtreeify_f n kvs = (t, (k, v) # kvs'); n \\<le> length kvs';\n        \\<And>n' kvs'a.\n           \\<lbrakk>(n, n') \\<in> nat_rel;\n            (kvs', kvs'a)\n            \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n           \\<Longrightarrow> (rbtreeify_f n kvs', rbtreeify_f n' kvs'a)\n                             \\<in> \\<langle>Ra,\n                                   Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                                   \\<langle>Ra \\<times>\\<^sub>r\n      Rb\\<rangle>list_rel;\n        (Suc (2 * n), n') \\<in> nat_rel;\n        (kvs, kvs'a)\n        \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n       \\<Longrightarrow> (rbtreeify_f (Suc (2 * n)) kvs,\n                          rbtreeify_f n' kvs'a)\n                         \\<in> \\<langle>Ra,\n                               Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                               \\<langle>Ra \\<times>\\<^sub>r\n  Rb\\<rangle>list_rel\n 4. \\<And>kvs n' kvs'.\n       \\<lbrakk>(0, n') \\<in> nat_rel;\n        (kvs, kvs')\n        \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n       \\<Longrightarrow> (rbtreeify_g 0 kvs, rbtreeify_g n' kvs')\n                         \\<in> \\<langle>Ra,\n                               Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                               \\<langle>Ra \\<times>\\<^sub>r\n  Rb\\<rangle>list_rel\n 5. \\<And>kvs n' kvs'.\n       \\<lbrakk>(Suc 0, n') \\<in> nat_rel;\n        (kvs, kvs')\n        \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n       \\<Longrightarrow> (rbtreeify_g (Suc 0) kvs, rbtreeify_g n' kvs')\n                         \\<in> \\<langle>Ra,\n                               Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                               \\<langle>Ra \\<times>\\<^sub>r\n  Rb\\<rangle>list_rel\n 6. \\<And>n kvs t k v kvs' n' kvs'a.\n       \\<lbrakk>0 < n; n \\<le> Suc (length kvs);\n        \\<And>n' kvs'.\n           \\<lbrakk>(n, n') \\<in> nat_rel;\n            (kvs, kvs')\n            \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n           \\<Longrightarrow> (rbtreeify_g n kvs, rbtreeify_g n' kvs')\n                             \\<in> \\<langle>Ra,\n                                   Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                                   \\<langle>Ra \\<times>\\<^sub>r\n      Rb\\<rangle>list_rel;\n        rbtreeify_g n kvs = (t, (k, v) # kvs'); n \\<le> Suc (length kvs');\n        \\<And>n' kvs'a.\n           \\<lbrakk>(n, n') \\<in> nat_rel;\n            (kvs', kvs'a)\n            \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n           \\<Longrightarrow> (rbtreeify_g n kvs', rbtreeify_g n' kvs'a)\n                             \\<in> \\<langle>Ra,\n                                   Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                                   \\<langle>Ra \\<times>\\<^sub>r\n      Rb\\<rangle>list_rel;\n        (2 * n, n') \\<in> nat_rel;\n        (kvs, kvs'a)\n        \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n       \\<Longrightarrow> (rbtreeify_g (2 * n) kvs, rbtreeify_g n' kvs'a)\n                         \\<in> \\<langle>Ra,\n                               Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                               \\<langle>Ra \\<times>\\<^sub>r\n  Rb\\<rangle>list_rel\n 7. \\<And>n kvs t k v kvs' n' kvs'a.\n       \\<lbrakk>0 < n; n \\<le> length kvs;\n        \\<And>n' kvs'.\n           \\<lbrakk>(n, n') \\<in> nat_rel;\n            (kvs, kvs')\n            \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n           \\<Longrightarrow> (rbtreeify_f n kvs, rbtreeify_f n' kvs')\n                             \\<in> \\<langle>Ra,\n                                   Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                                   \\<langle>Ra \\<times>\\<^sub>r\n      Rb\\<rangle>list_rel;\n        rbtreeify_f n kvs = (t, (k, v) # kvs'); n \\<le> Suc (length kvs');\n        \\<And>n' kvs'a.\n           \\<lbrakk>(n, n') \\<in> nat_rel;\n            (kvs', kvs'a)\n            \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n           \\<Longrightarrow> (rbtreeify_g n kvs', rbtreeify_g n' kvs'a)\n                             \\<in> \\<langle>Ra,\n                                   Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                                   \\<langle>Ra \\<times>\\<^sub>r\n      Rb\\<rangle>list_rel;\n        (Suc (2 * n), n') \\<in> nat_rel;\n        (kvs, kvs'a)\n        \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n       \\<Longrightarrow> (rbtreeify_g (Suc (2 * n)) kvs,\n                          rbtreeify_g n' kvs'a)\n                         \\<in> \\<langle>Ra,\n                               Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                               \\<langle>Ra \\<times>\\<^sub>r\n  Rb\\<rangle>list_rel", "apply hypsubst"], ["proof (prove)\ngoal (7 subgoals):\n 1. \\<And>k v kvs n' kvs' x' xs' a b a' b'.\n       \\<lbrakk>(kvs, xs')\n                \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel;\n        (k, v) = (a, b); (a, a') \\<in> Ra; (b, b') \\<in> Rb\\<rbrakk>\n       \\<Longrightarrow> (rbtreeify_f (Suc 0) ((a, b) # kvs),\n                          rbtreeify_f (Suc 0) ((a', b') # xs'))\n                         \\<in> \\<langle>Ra,\n                               Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                               \\<langle>Ra \\<times>\\<^sub>r\n  Rb\\<rangle>list_rel\n 2. \\<And>n kvs t k v kvs' n' kvs'a.\n       \\<lbrakk>0 < n; n \\<le> length kvs;\n        \\<And>n' kvs'.\n           \\<lbrakk>(n, n') \\<in> nat_rel;\n            (kvs, kvs')\n            \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n           \\<Longrightarrow> (rbtreeify_f n kvs, rbtreeify_f n' kvs')\n                             \\<in> \\<langle>Ra,\n                                   Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                                   \\<langle>Ra \\<times>\\<^sub>r\n      Rb\\<rangle>list_rel;\n        rbtreeify_f n kvs = (t, (k, v) # kvs'); n \\<le> Suc (length kvs');\n        \\<And>n' kvs'a.\n           \\<lbrakk>(n, n') \\<in> nat_rel;\n            (kvs', kvs'a)\n            \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n           \\<Longrightarrow> (rbtreeify_g n kvs', rbtreeify_g n' kvs'a)\n                             \\<in> \\<langle>Ra,\n                                   Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                                   \\<langle>Ra \\<times>\\<^sub>r\n      Rb\\<rangle>list_rel;\n        (2 * n, n') \\<in> nat_rel;\n        (kvs, kvs'a)\n        \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n       \\<Longrightarrow> (rbtreeify_f (2 * n) kvs, rbtreeify_f n' kvs'a)\n                         \\<in> \\<langle>Ra,\n                               Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                               \\<langle>Ra \\<times>\\<^sub>r\n  Rb\\<rangle>list_rel\n 3. \\<And>n kvs t k v kvs' n' kvs'a.\n       \\<lbrakk>0 < n; n \\<le> length kvs;\n        \\<And>n' kvs'.\n           \\<lbrakk>(n, n') \\<in> nat_rel;\n            (kvs, kvs')\n            \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n           \\<Longrightarrow> (rbtreeify_f n kvs, rbtreeify_f n' kvs')\n                             \\<in> \\<langle>Ra,\n                                   Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                                   \\<langle>Ra \\<times>\\<^sub>r\n      Rb\\<rangle>list_rel;\n        rbtreeify_f n kvs = (t, (k, v) # kvs'); n \\<le> length kvs';\n        \\<And>n' kvs'a.\n           \\<lbrakk>(n, n') \\<in> nat_rel;\n            (kvs', kvs'a)\n            \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n           \\<Longrightarrow> (rbtreeify_f n kvs', rbtreeify_f n' kvs'a)\n                             \\<in> \\<langle>Ra,\n                                   Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                                   \\<langle>Ra \\<times>\\<^sub>r\n      Rb\\<rangle>list_rel;\n        (Suc (2 * n), n') \\<in> nat_rel;\n        (kvs, kvs'a)\n        \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n       \\<Longrightarrow> (rbtreeify_f (Suc (2 * n)) kvs,\n                          rbtreeify_f n' kvs'a)\n                         \\<in> \\<langle>Ra,\n                               Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                               \\<langle>Ra \\<times>\\<^sub>r\n  Rb\\<rangle>list_rel\n 4. \\<And>kvs n' kvs'.\n       \\<lbrakk>(0, n') \\<in> nat_rel;\n        (kvs, kvs')\n        \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n       \\<Longrightarrow> (rbtreeify_g 0 kvs, rbtreeify_g n' kvs')\n                         \\<in> \\<langle>Ra,\n                               Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                               \\<langle>Ra \\<times>\\<^sub>r\n  Rb\\<rangle>list_rel\n 5. \\<And>kvs n' kvs'.\n       \\<lbrakk>(Suc 0, n') \\<in> nat_rel;\n        (kvs, kvs')\n        \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n       \\<Longrightarrow> (rbtreeify_g (Suc 0) kvs, rbtreeify_g n' kvs')\n                         \\<in> \\<langle>Ra,\n                               Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                               \\<langle>Ra \\<times>\\<^sub>r\n  Rb\\<rangle>list_rel\n 6. \\<And>n kvs t k v kvs' n' kvs'a.\n       \\<lbrakk>0 < n; n \\<le> Suc (length kvs);\n        \\<And>n' kvs'.\n           \\<lbrakk>(n, n') \\<in> nat_rel;\n            (kvs, kvs')\n            \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n           \\<Longrightarrow> (rbtreeify_g n kvs, rbtreeify_g n' kvs')\n                             \\<in> \\<langle>Ra,\n                                   Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                                   \\<langle>Ra \\<times>\\<^sub>r\n      Rb\\<rangle>list_rel;\n        rbtreeify_g n kvs = (t, (k, v) # kvs'); n \\<le> Suc (length kvs');\n        \\<And>n' kvs'a.\n           \\<lbrakk>(n, n') \\<in> nat_rel;\n            (kvs', kvs'a)\n            \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n           \\<Longrightarrow> (rbtreeify_g n kvs', rbtreeify_g n' kvs'a)\n                             \\<in> \\<langle>Ra,\n                                   Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                                   \\<langle>Ra \\<times>\\<^sub>r\n      Rb\\<rangle>list_rel;\n        (2 * n, n') \\<in> nat_rel;\n        (kvs, kvs'a)\n        \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n       \\<Longrightarrow> (rbtreeify_g (2 * n) kvs, rbtreeify_g n' kvs'a)\n                         \\<in> \\<langle>Ra,\n                               Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                               \\<langle>Ra \\<times>\\<^sub>r\n  Rb\\<rangle>list_rel\n 7. \\<And>n kvs t k v kvs' n' kvs'a.\n       \\<lbrakk>0 < n; n \\<le> length kvs;\n        \\<And>n' kvs'.\n           \\<lbrakk>(n, n') \\<in> nat_rel;\n            (kvs, kvs')\n            \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n           \\<Longrightarrow> (rbtreeify_f n kvs, rbtreeify_f n' kvs')\n                             \\<in> \\<langle>Ra,\n                                   Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                                   \\<langle>Ra \\<times>\\<^sub>r\n      Rb\\<rangle>list_rel;\n        rbtreeify_f n kvs = (t, (k, v) # kvs'); n \\<le> Suc (length kvs');\n        \\<And>n' kvs'a.\n           \\<lbrakk>(n, n') \\<in> nat_rel;\n            (kvs', kvs'a)\n            \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n           \\<Longrightarrow> (rbtreeify_g n kvs', rbtreeify_g n' kvs'a)\n                             \\<in> \\<langle>Ra,\n                                   Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                                   \\<langle>Ra \\<times>\\<^sub>r\n      Rb\\<rangle>list_rel;\n        (Suc (2 * n), n') \\<in> nat_rel;\n        (kvs, kvs'a)\n        \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n       \\<Longrightarrow> (rbtreeify_g (Suc (2 * n)) kvs,\n                          rbtreeify_g n' kvs'a)\n                         \\<in> \\<langle>Ra,\n                               Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                               \\<langle>Ra \\<times>\\<^sub>r\n  Rb\\<rangle>list_rel", "apply (simp (no_asm_use) only: rbtreeify_f_simps rbtreeify_g_simps)"], ["proof (prove)\ngoal (7 subgoals):\n 1. \\<And>k v kvs n' kvs' x' xs' a b a' b'.\n       \\<lbrakk>(kvs, xs')\n                \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel;\n        (k, v) = (a, b); (a, a') \\<in> Ra; (b, b') \\<in> Rb\\<rbrakk>\n       \\<Longrightarrow> ((Branch color.R rbt.Empty a b rbt.Empty, kvs),\n                          Branch color.R rbt.Empty a' b' rbt.Empty, xs')\n                         \\<in> \\<langle>Ra,\n                               Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                               \\<langle>Ra \\<times>\\<^sub>r\n  Rb\\<rangle>list_rel\n 2. \\<And>n kvs t k v kvs' n' kvs'a.\n       \\<lbrakk>0 < n; n \\<le> length kvs;\n        \\<And>n' kvs'.\n           \\<lbrakk>(n, n') \\<in> nat_rel;\n            (kvs, kvs')\n            \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n           \\<Longrightarrow> (rbtreeify_f n kvs, rbtreeify_f n' kvs')\n                             \\<in> \\<langle>Ra,\n                                   Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                                   \\<langle>Ra \\<times>\\<^sub>r\n      Rb\\<rangle>list_rel;\n        rbtreeify_f n kvs = (t, (k, v) # kvs'); n \\<le> Suc (length kvs');\n        \\<And>n' kvs'a.\n           \\<lbrakk>(n, n') \\<in> nat_rel;\n            (kvs', kvs'a)\n            \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n           \\<Longrightarrow> (rbtreeify_g n kvs', rbtreeify_g n' kvs'a)\n                             \\<in> \\<langle>Ra,\n                                   Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                                   \\<langle>Ra \\<times>\\<^sub>r\n      Rb\\<rangle>list_rel;\n        (2 * n, n') \\<in> nat_rel;\n        (kvs, kvs'a)\n        \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n       \\<Longrightarrow> (rbtreeify_f (2 * n) kvs, rbtreeify_f n' kvs'a)\n                         \\<in> \\<langle>Ra,\n                               Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                               \\<langle>Ra \\<times>\\<^sub>r\n  Rb\\<rangle>list_rel\n 3. \\<And>n kvs t k v kvs' n' kvs'a.\n       \\<lbrakk>0 < n; n \\<le> length kvs;\n        \\<And>n' kvs'.\n           \\<lbrakk>(n, n') \\<in> nat_rel;\n            (kvs, kvs')\n            \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n           \\<Longrightarrow> (rbtreeify_f n kvs, rbtreeify_f n' kvs')\n                             \\<in> \\<langle>Ra,\n                                   Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                                   \\<langle>Ra \\<times>\\<^sub>r\n      Rb\\<rangle>list_rel;\n        rbtreeify_f n kvs = (t, (k, v) # kvs'); n \\<le> length kvs';\n        \\<And>n' kvs'a.\n           \\<lbrakk>(n, n') \\<in> nat_rel;\n            (kvs', kvs'a)\n            \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n           \\<Longrightarrow> (rbtreeify_f n kvs', rbtreeify_f n' kvs'a)\n                             \\<in> \\<langle>Ra,\n                                   Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                                   \\<langle>Ra \\<times>\\<^sub>r\n      Rb\\<rangle>list_rel;\n        (Suc (2 * n), n') \\<in> nat_rel;\n        (kvs, kvs'a)\n        \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n       \\<Longrightarrow> (rbtreeify_f (Suc (2 * n)) kvs,\n                          rbtreeify_f n' kvs'a)\n                         \\<in> \\<langle>Ra,\n                               Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                               \\<langle>Ra \\<times>\\<^sub>r\n  Rb\\<rangle>list_rel\n 4. \\<And>kvs n' kvs'.\n       \\<lbrakk>(0, n') \\<in> nat_rel;\n        (kvs, kvs')\n        \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n       \\<Longrightarrow> (rbtreeify_g 0 kvs, rbtreeify_g n' kvs')\n                         \\<in> \\<langle>Ra,\n                               Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                               \\<langle>Ra \\<times>\\<^sub>r\n  Rb\\<rangle>list_rel\n 5. \\<And>kvs n' kvs'.\n       \\<lbrakk>(Suc 0, n') \\<in> nat_rel;\n        (kvs, kvs')\n        \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n       \\<Longrightarrow> (rbtreeify_g (Suc 0) kvs, rbtreeify_g n' kvs')\n                         \\<in> \\<langle>Ra,\n                               Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                               \\<langle>Ra \\<times>\\<^sub>r\n  Rb\\<rangle>list_rel\n 6. \\<And>n kvs t k v kvs' n' kvs'a.\n       \\<lbrakk>0 < n; n \\<le> Suc (length kvs);\n        \\<And>n' kvs'.\n           \\<lbrakk>(n, n') \\<in> nat_rel;\n            (kvs, kvs')\n            \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n           \\<Longrightarrow> (rbtreeify_g n kvs, rbtreeify_g n' kvs')\n                             \\<in> \\<langle>Ra,\n                                   Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                                   \\<langle>Ra \\<times>\\<^sub>r\n      Rb\\<rangle>list_rel;\n        rbtreeify_g n kvs = (t, (k, v) # kvs'); n \\<le> Suc (length kvs');\n        \\<And>n' kvs'a.\n           \\<lbrakk>(n, n') \\<in> nat_rel;\n            (kvs', kvs'a)\n            \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n           \\<Longrightarrow> (rbtreeify_g n kvs', rbtreeify_g n' kvs'a)\n                             \\<in> \\<langle>Ra,\n                                   Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                                   \\<langle>Ra \\<times>\\<^sub>r\n      Rb\\<rangle>list_rel;\n        (2 * n, n') \\<in> nat_rel;\n        (kvs, kvs'a)\n        \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n       \\<Longrightarrow> (rbtreeify_g (2 * n) kvs, rbtreeify_g n' kvs'a)\n                         \\<in> \\<langle>Ra,\n                               Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                               \\<langle>Ra \\<times>\\<^sub>r\n  Rb\\<rangle>list_rel\n 7. \\<And>n kvs t k v kvs' n' kvs'a.\n       \\<lbrakk>0 < n; n \\<le> length kvs;\n        \\<And>n' kvs'.\n           \\<lbrakk>(n, n') \\<in> nat_rel;\n            (kvs, kvs')\n            \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n           \\<Longrightarrow> (rbtreeify_f n kvs, rbtreeify_f n' kvs')\n                             \\<in> \\<langle>Ra,\n                                   Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                                   \\<langle>Ra \\<times>\\<^sub>r\n      Rb\\<rangle>list_rel;\n        rbtreeify_f n kvs = (t, (k, v) # kvs'); n \\<le> Suc (length kvs');\n        \\<And>n' kvs'a.\n           \\<lbrakk>(n, n') \\<in> nat_rel;\n            (kvs', kvs'a)\n            \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n           \\<Longrightarrow> (rbtreeify_g n kvs', rbtreeify_g n' kvs'a)\n                             \\<in> \\<langle>Ra,\n                                   Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                                   \\<langle>Ra \\<times>\\<^sub>r\n      Rb\\<rangle>list_rel;\n        (Suc (2 * n), n') \\<in> nat_rel;\n        (kvs, kvs'a)\n        \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n       \\<Longrightarrow> (rbtreeify_g (Suc (2 * n)) kvs,\n                          rbtreeify_g n' kvs'a)\n                         \\<in> \\<langle>Ra,\n                               Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                               \\<langle>Ra \\<times>\\<^sub>r\n  Rb\\<rangle>list_rel", "apply parametricity"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<And>n kvs t k v kvs' n' kvs'a.\n       \\<lbrakk>0 < n; n \\<le> length kvs;\n        \\<And>n' kvs'.\n           \\<lbrakk>(n, n') \\<in> nat_rel;\n            (kvs, kvs')\n            \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n           \\<Longrightarrow> (rbtreeify_f n kvs, rbtreeify_f n' kvs')\n                             \\<in> \\<langle>Ra,\n                                   Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                                   \\<langle>Ra \\<times>\\<^sub>r\n      Rb\\<rangle>list_rel;\n        rbtreeify_f n kvs = (t, (k, v) # kvs'); n \\<le> Suc (length kvs');\n        \\<And>n' kvs'a.\n           \\<lbrakk>(n, n') \\<in> nat_rel;\n            (kvs', kvs'a)\n            \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n           \\<Longrightarrow> (rbtreeify_g n kvs', rbtreeify_g n' kvs'a)\n                             \\<in> \\<langle>Ra,\n                                   Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                                   \\<langle>Ra \\<times>\\<^sub>r\n      Rb\\<rangle>list_rel;\n        (2 * n, n') \\<in> nat_rel;\n        (kvs, kvs'a)\n        \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n       \\<Longrightarrow> (rbtreeify_f (2 * n) kvs, rbtreeify_f n' kvs'a)\n                         \\<in> \\<langle>Ra,\n                               Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                               \\<langle>Ra \\<times>\\<^sub>r\n  Rb\\<rangle>list_rel\n 2. \\<And>n kvs t k v kvs' n' kvs'a.\n       \\<lbrakk>0 < n; n \\<le> length kvs;\n        \\<And>n' kvs'.\n           \\<lbrakk>(n, n') \\<in> nat_rel;\n            (kvs, kvs')\n            \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n           \\<Longrightarrow> (rbtreeify_f n kvs, rbtreeify_f n' kvs')\n                             \\<in> \\<langle>Ra,\n                                   Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                                   \\<langle>Ra \\<times>\\<^sub>r\n      Rb\\<rangle>list_rel;\n        rbtreeify_f n kvs = (t, (k, v) # kvs'); n \\<le> length kvs';\n        \\<And>n' kvs'a.\n           \\<lbrakk>(n, n') \\<in> nat_rel;\n            (kvs', kvs'a)\n            \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n           \\<Longrightarrow> (rbtreeify_f n kvs', rbtreeify_f n' kvs'a)\n                             \\<in> \\<langle>Ra,\n                                   Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                                   \\<langle>Ra \\<times>\\<^sub>r\n      Rb\\<rangle>list_rel;\n        (Suc (2 * n), n') \\<in> nat_rel;\n        (kvs, kvs'a)\n        \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n       \\<Longrightarrow> (rbtreeify_f (Suc (2 * n)) kvs,\n                          rbtreeify_f n' kvs'a)\n                         \\<in> \\<langle>Ra,\n                               Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                               \\<langle>Ra \\<times>\\<^sub>r\n  Rb\\<rangle>list_rel\n 3. \\<And>kvs n' kvs'.\n       \\<lbrakk>(0, n') \\<in> nat_rel;\n        (kvs, kvs')\n        \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n       \\<Longrightarrow> (rbtreeify_g 0 kvs, rbtreeify_g n' kvs')\n                         \\<in> \\<langle>Ra,\n                               Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                               \\<langle>Ra \\<times>\\<^sub>r\n  Rb\\<rangle>list_rel\n 4. \\<And>kvs n' kvs'.\n       \\<lbrakk>(Suc 0, n') \\<in> nat_rel;\n        (kvs, kvs')\n        \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n       \\<Longrightarrow> (rbtreeify_g (Suc 0) kvs, rbtreeify_g n' kvs')\n                         \\<in> \\<langle>Ra,\n                               Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                               \\<langle>Ra \\<times>\\<^sub>r\n  Rb\\<rangle>list_rel\n 5. \\<And>n kvs t k v kvs' n' kvs'a.\n       \\<lbrakk>0 < n; n \\<le> Suc (length kvs);\n        \\<And>n' kvs'.\n           \\<lbrakk>(n, n') \\<in> nat_rel;\n            (kvs, kvs')\n            \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n           \\<Longrightarrow> (rbtreeify_g n kvs, rbtreeify_g n' kvs')\n                             \\<in> \\<langle>Ra,\n                                   Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                                   \\<langle>Ra \\<times>\\<^sub>r\n      Rb\\<rangle>list_rel;\n        rbtreeify_g n kvs = (t, (k, v) # kvs'); n \\<le> Suc (length kvs');\n        \\<And>n' kvs'a.\n           \\<lbrakk>(n, n') \\<in> nat_rel;\n            (kvs', kvs'a)\n            \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n           \\<Longrightarrow> (rbtreeify_g n kvs', rbtreeify_g n' kvs'a)\n                             \\<in> \\<langle>Ra,\n                                   Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                                   \\<langle>Ra \\<times>\\<^sub>r\n      Rb\\<rangle>list_rel;\n        (2 * n, n') \\<in> nat_rel;\n        (kvs, kvs'a)\n        \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n       \\<Longrightarrow> (rbtreeify_g (2 * n) kvs, rbtreeify_g n' kvs'a)\n                         \\<in> \\<langle>Ra,\n                               Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                               \\<langle>Ra \\<times>\\<^sub>r\n  Rb\\<rangle>list_rel\n 6. \\<And>n kvs t k v kvs' n' kvs'a.\n       \\<lbrakk>0 < n; n \\<le> length kvs;\n        \\<And>n' kvs'.\n           \\<lbrakk>(n, n') \\<in> nat_rel;\n            (kvs, kvs')\n            \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n           \\<Longrightarrow> (rbtreeify_f n kvs, rbtreeify_f n' kvs')\n                             \\<in> \\<langle>Ra,\n                                   Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                                   \\<langle>Ra \\<times>\\<^sub>r\n      Rb\\<rangle>list_rel;\n        rbtreeify_f n kvs = (t, (k, v) # kvs'); n \\<le> Suc (length kvs');\n        \\<And>n' kvs'a.\n           \\<lbrakk>(n, n') \\<in> nat_rel;\n            (kvs', kvs'a)\n            \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n           \\<Longrightarrow> (rbtreeify_g n kvs', rbtreeify_g n' kvs'a)\n                             \\<in> \\<langle>Ra,\n                                   Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                                   \\<langle>Ra \\<times>\\<^sub>r\n      Rb\\<rangle>list_rel;\n        (Suc (2 * n), n') \\<in> nat_rel;\n        (kvs, kvs'a)\n        \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n       \\<Longrightarrow> (rbtreeify_g (Suc (2 * n)) kvs,\n                          rbtreeify_g n' kvs'a)\n                         \\<in> \\<langle>Ra,\n                               Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                               \\<langle>Ra \\<times>\\<^sub>r\n  Rb\\<rangle>list_rel", "apply clarsimp"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<And>n kvs t k v kvs' kvs'a.\n       \\<lbrakk>0 < n; n \\<le> length kvs;\n        \\<And>n' kvs'.\n           \\<lbrakk>n = n';\n            (kvs, kvs')\n            \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n           \\<Longrightarrow> (rbtreeify_f n' kvs, rbtreeify_f n' kvs')\n                             \\<in> \\<langle>Ra,\n                                   Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                                   \\<langle>Ra \\<times>\\<^sub>r\n      Rb\\<rangle>list_rel;\n        rbtreeify_f n kvs = (t, (k, v) # kvs'); n \\<le> Suc (length kvs');\n        \\<And>n' kvs'a.\n           \\<lbrakk>n = n';\n            (kvs', kvs'a)\n            \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n           \\<Longrightarrow> (rbtreeify_g n' kvs', rbtreeify_g n' kvs'a)\n                             \\<in> \\<langle>Ra,\n                                   Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                                   \\<langle>Ra \\<times>\\<^sub>r\n      Rb\\<rangle>list_rel;\n        (kvs, kvs'a)\n        \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n       \\<Longrightarrow> (apfst (Branch color.B t k v) (rbtreeify_g n kvs'),\n                          case rbtreeify_f n kvs'a of\n                          (t1, (k, v) # kvs') \\<Rightarrow>\n                            apfst (Branch color.B t1 k v)\n                             (rbtreeify_g n kvs'))\n                         \\<in> \\<langle>Ra,\n                               Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                               \\<langle>Ra \\<times>\\<^sub>r\n  Rb\\<rangle>list_rel\n 2. \\<And>n kvs t k v kvs' n' kvs'a.\n       \\<lbrakk>0 < n; n \\<le> length kvs;\n        \\<And>n' kvs'.\n           \\<lbrakk>(n, n') \\<in> nat_rel;\n            (kvs, kvs')\n            \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n           \\<Longrightarrow> (rbtreeify_f n kvs, rbtreeify_f n' kvs')\n                             \\<in> \\<langle>Ra,\n                                   Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                                   \\<langle>Ra \\<times>\\<^sub>r\n      Rb\\<rangle>list_rel;\n        rbtreeify_f n kvs = (t, (k, v) # kvs'); n \\<le> length kvs';\n        \\<And>n' kvs'a.\n           \\<lbrakk>(n, n') \\<in> nat_rel;\n            (kvs', kvs'a)\n            \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n           \\<Longrightarrow> (rbtreeify_f n kvs', rbtreeify_f n' kvs'a)\n                             \\<in> \\<langle>Ra,\n                                   Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                                   \\<langle>Ra \\<times>\\<^sub>r\n      Rb\\<rangle>list_rel;\n        (Suc (2 * n), n') \\<in> nat_rel;\n        (kvs, kvs'a)\n        \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n       \\<Longrightarrow> (rbtreeify_f (Suc (2 * n)) kvs,\n                          rbtreeify_f n' kvs'a)\n                         \\<in> \\<langle>Ra,\n                               Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                               \\<langle>Ra \\<times>\\<^sub>r\n  Rb\\<rangle>list_rel\n 3. \\<And>kvs n' kvs'.\n       \\<lbrakk>(0, n') \\<in> nat_rel;\n        (kvs, kvs')\n        \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n       \\<Longrightarrow> (rbtreeify_g 0 kvs, rbtreeify_g n' kvs')\n                         \\<in> \\<langle>Ra,\n                               Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                               \\<langle>Ra \\<times>\\<^sub>r\n  Rb\\<rangle>list_rel\n 4. \\<And>kvs n' kvs'.\n       \\<lbrakk>(Suc 0, n') \\<in> nat_rel;\n        (kvs, kvs')\n        \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n       \\<Longrightarrow> (rbtreeify_g (Suc 0) kvs, rbtreeify_g n' kvs')\n                         \\<in> \\<langle>Ra,\n                               Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                               \\<langle>Ra \\<times>\\<^sub>r\n  Rb\\<rangle>list_rel\n 5. \\<And>n kvs t k v kvs' n' kvs'a.\n       \\<lbrakk>0 < n; n \\<le> Suc (length kvs);\n        \\<And>n' kvs'.\n           \\<lbrakk>(n, n') \\<in> nat_rel;\n            (kvs, kvs')\n            \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n           \\<Longrightarrow> (rbtreeify_g n kvs, rbtreeify_g n' kvs')\n                             \\<in> \\<langle>Ra,\n                                   Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                                   \\<langle>Ra \\<times>\\<^sub>r\n      Rb\\<rangle>list_rel;\n        rbtreeify_g n kvs = (t, (k, v) # kvs'); n \\<le> Suc (length kvs');\n        \\<And>n' kvs'a.\n           \\<lbrakk>(n, n') \\<in> nat_rel;\n            (kvs', kvs'a)\n            \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n           \\<Longrightarrow> (rbtreeify_g n kvs', rbtreeify_g n' kvs'a)\n                             \\<in> \\<langle>Ra,\n                                   Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                                   \\<langle>Ra \\<times>\\<^sub>r\n      Rb\\<rangle>list_rel;\n        (2 * n, n') \\<in> nat_rel;\n        (kvs, kvs'a)\n        \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n       \\<Longrightarrow> (rbtreeify_g (2 * n) kvs, rbtreeify_g n' kvs'a)\n                         \\<in> \\<langle>Ra,\n                               Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                               \\<langle>Ra \\<times>\\<^sub>r\n  Rb\\<rangle>list_rel\n 6. \\<And>n kvs t k v kvs' n' kvs'a.\n       \\<lbrakk>0 < n; n \\<le> length kvs;\n        \\<And>n' kvs'.\n           \\<lbrakk>(n, n') \\<in> nat_rel;\n            (kvs, kvs')\n            \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n           \\<Longrightarrow> (rbtreeify_f n kvs, rbtreeify_f n' kvs')\n                             \\<in> \\<langle>Ra,\n                                   Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                                   \\<langle>Ra \\<times>\\<^sub>r\n      Rb\\<rangle>list_rel;\n        rbtreeify_f n kvs = (t, (k, v) # kvs'); n \\<le> Suc (length kvs');\n        \\<And>n' kvs'a.\n           \\<lbrakk>(n, n') \\<in> nat_rel;\n            (kvs', kvs'a)\n            \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n           \\<Longrightarrow> (rbtreeify_g n kvs', rbtreeify_g n' kvs'a)\n                             \\<in> \\<langle>Ra,\n                                   Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                                   \\<langle>Ra \\<times>\\<^sub>r\n      Rb\\<rangle>list_rel;\n        (Suc (2 * n), n') \\<in> nat_rel;\n        (kvs, kvs'a)\n        \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n       \\<Longrightarrow> (rbtreeify_g (Suc (2 * n)) kvs,\n                          rbtreeify_g n' kvs'a)\n                         \\<in> \\<langle>Ra,\n                               Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                               \\<langle>Ra \\<times>\\<^sub>r\n  Rb\\<rangle>list_rel", "apply (subgoal_tac \"(rbtreeify_f n kvs, rbtreeify_f n kvs'a) \n      \\<in> \\<langle>\\<langle>Ra, Rb\\<rangle>rbt_rel, \\<langle>\\<langle>Ra, Rb\\<rangle>prod_rel\\<rangle>list_rel\\<rangle>prod_rel\")"], ["proof (prove)\ngoal (7 subgoals):\n 1. \\<And>n kvs t k v kvs' kvs'a.\n       \\<lbrakk>0 < n; n \\<le> length kvs;\n        \\<And>n' kvs'.\n           \\<lbrakk>n = n';\n            (kvs, kvs')\n            \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n           \\<Longrightarrow> (rbtreeify_f n' kvs, rbtreeify_f n' kvs')\n                             \\<in> \\<langle>Ra,\n                                   Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                                   \\<langle>Ra \\<times>\\<^sub>r\n      Rb\\<rangle>list_rel;\n        rbtreeify_f n kvs = (t, (k, v) # kvs'); n \\<le> Suc (length kvs');\n        \\<And>n' kvs'a.\n           \\<lbrakk>n = n';\n            (kvs', kvs'a)\n            \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n           \\<Longrightarrow> (rbtreeify_g n' kvs', rbtreeify_g n' kvs'a)\n                             \\<in> \\<langle>Ra,\n                                   Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                                   \\<langle>Ra \\<times>\\<^sub>r\n      Rb\\<rangle>list_rel;\n        (kvs, kvs'a) \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel;\n        (rbtreeify_f n kvs, rbtreeify_f n kvs'a)\n        \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n              \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n       \\<Longrightarrow> (apfst (Branch color.B t k v) (rbtreeify_g n kvs'),\n                          case rbtreeify_f n kvs'a of\n                          (t1, (k, v) # kvs') \\<Rightarrow>\n                            apfst (Branch color.B t1 k v)\n                             (rbtreeify_g n kvs'))\n                         \\<in> \\<langle>Ra,\n                               Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                               \\<langle>Ra \\<times>\\<^sub>r\n  Rb\\<rangle>list_rel\n 2. \\<And>n kvs t k v kvs' kvs'a.\n       \\<lbrakk>0 < n; n \\<le> length kvs;\n        \\<And>n' kvs'.\n           \\<lbrakk>n = n';\n            (kvs, kvs')\n            \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n           \\<Longrightarrow> (rbtreeify_f n' kvs, rbtreeify_f n' kvs')\n                             \\<in> \\<langle>Ra,\n                                   Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                                   \\<langle>Ra \\<times>\\<^sub>r\n      Rb\\<rangle>list_rel;\n        rbtreeify_f n kvs = (t, (k, v) # kvs'); n \\<le> Suc (length kvs');\n        \\<And>n' kvs'a.\n           \\<lbrakk>n = n';\n            (kvs', kvs'a)\n            \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n           \\<Longrightarrow> (rbtreeify_g n' kvs', rbtreeify_g n' kvs'a)\n                             \\<in> \\<langle>Ra,\n                                   Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                                   \\<langle>Ra \\<times>\\<^sub>r\n      Rb\\<rangle>list_rel;\n        (kvs, kvs'a)\n        \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n       \\<Longrightarrow> (rbtreeify_f n kvs, rbtreeify_f n kvs'a)\n                         \\<in> \\<langle>Ra,\n                               Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                               \\<langle>Ra \\<times>\\<^sub>r\n  Rb\\<rangle>list_rel\n 3. \\<And>n kvs t k v kvs' n' kvs'a.\n       \\<lbrakk>0 < n; n \\<le> length kvs;\n        \\<And>n' kvs'.\n           \\<lbrakk>(n, n') \\<in> nat_rel;\n            (kvs, kvs')\n            \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n           \\<Longrightarrow> (rbtreeify_f n kvs, rbtreeify_f n' kvs')\n                             \\<in> \\<langle>Ra,\n                                   Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                                   \\<langle>Ra \\<times>\\<^sub>r\n      Rb\\<rangle>list_rel;\n        rbtreeify_f n kvs = (t, (k, v) # kvs'); n \\<le> length kvs';\n        \\<And>n' kvs'a.\n           \\<lbrakk>(n, n') \\<in> nat_rel;\n            (kvs', kvs'a)\n            \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n           \\<Longrightarrow> (rbtreeify_f n kvs', rbtreeify_f n' kvs'a)\n                             \\<in> \\<langle>Ra,\n                                   Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                                   \\<langle>Ra \\<times>\\<^sub>r\n      Rb\\<rangle>list_rel;\n        (Suc (2 * n), n') \\<in> nat_rel;\n        (kvs, kvs'a)\n        \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n       \\<Longrightarrow> (rbtreeify_f (Suc (2 * n)) kvs,\n                          rbtreeify_f n' kvs'a)\n                         \\<in> \\<langle>Ra,\n                               Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                               \\<langle>Ra \\<times>\\<^sub>r\n  Rb\\<rangle>list_rel\n 4. \\<And>kvs n' kvs'.\n       \\<lbrakk>(0, n') \\<in> nat_rel;\n        (kvs, kvs')\n        \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n       \\<Longrightarrow> (rbtreeify_g 0 kvs, rbtreeify_g n' kvs')\n                         \\<in> \\<langle>Ra,\n                               Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                               \\<langle>Ra \\<times>\\<^sub>r\n  Rb\\<rangle>list_rel\n 5. \\<And>kvs n' kvs'.\n       \\<lbrakk>(Suc 0, n') \\<in> nat_rel;\n        (kvs, kvs')\n        \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n       \\<Longrightarrow> (rbtreeify_g (Suc 0) kvs, rbtreeify_g n' kvs')\n                         \\<in> \\<langle>Ra,\n                               Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                               \\<langle>Ra \\<times>\\<^sub>r\n  Rb\\<rangle>list_rel\n 6. \\<And>n kvs t k v kvs' n' kvs'a.\n       \\<lbrakk>0 < n; n \\<le> Suc (length kvs);\n        \\<And>n' kvs'.\n           \\<lbrakk>(n, n') \\<in> nat_rel;\n            (kvs, kvs')\n            \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n           \\<Longrightarrow> (rbtreeify_g n kvs, rbtreeify_g n' kvs')\n                             \\<in> \\<langle>Ra,\n                                   Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                                   \\<langle>Ra \\<times>\\<^sub>r\n      Rb\\<rangle>list_rel;\n        rbtreeify_g n kvs = (t, (k, v) # kvs'); n \\<le> Suc (length kvs');\n        \\<And>n' kvs'a.\n           \\<lbrakk>(n, n') \\<in> nat_rel;\n            (kvs', kvs'a)\n            \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n           \\<Longrightarrow> (rbtreeify_g n kvs', rbtreeify_g n' kvs'a)\n                             \\<in> \\<langle>Ra,\n                                   Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                                   \\<langle>Ra \\<times>\\<^sub>r\n      Rb\\<rangle>list_rel;\n        (2 * n, n') \\<in> nat_rel;\n        (kvs, kvs'a)\n        \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n       \\<Longrightarrow> (rbtreeify_g (2 * n) kvs, rbtreeify_g n' kvs'a)\n                         \\<in> \\<langle>Ra,\n                               Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                               \\<langle>Ra \\<times>\\<^sub>r\n  Rb\\<rangle>list_rel\n 7. \\<And>n kvs t k v kvs' n' kvs'a.\n       \\<lbrakk>0 < n; n \\<le> length kvs;\n        \\<And>n' kvs'.\n           \\<lbrakk>(n, n') \\<in> nat_rel;\n            (kvs, kvs')\n            \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n           \\<Longrightarrow> (rbtreeify_f n kvs, rbtreeify_f n' kvs')\n                             \\<in> \\<langle>Ra,\n                                   Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                                   \\<langle>Ra \\<times>\\<^sub>r\n      Rb\\<rangle>list_rel;\n        rbtreeify_f n kvs = (t, (k, v) # kvs'); n \\<le> Suc (length kvs');\n        \\<And>n' kvs'a.\n           \\<lbrakk>(n, n') \\<in> nat_rel;\n            (kvs', kvs'a)\n            \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n           \\<Longrightarrow> (rbtreeify_g n kvs', rbtreeify_g n' kvs'a)\n                             \\<in> \\<langle>Ra,\n                                   Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                                   \\<langle>Ra \\<times>\\<^sub>r\n      Rb\\<rangle>list_rel;\n        (Suc (2 * n), n') \\<in> nat_rel;\n        (kvs, kvs'a)\n        \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n       \\<Longrightarrow> (rbtreeify_g (Suc (2 * n)) kvs,\n                          rbtreeify_g n' kvs'a)\n                         \\<in> \\<langle>Ra,\n                               Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                               \\<langle>Ra \\<times>\\<^sub>r\n  Rb\\<rangle>list_rel", "apply (clarsimp elim!: list_relE prod_relE)"], ["proof (prove)\ngoal (7 subgoals):\n 1. \\<And>n kvs kvs' kvs'a a a' xs' ab bb a'a b'a.\n       \\<lbrakk>0 < n; n \\<le> length kvs;\n        \\<And>n' kvs'.\n           \\<lbrakk>n = n';\n            (kvs, kvs')\n            \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n           \\<Longrightarrow> (rbtreeify_f n' kvs, rbtreeify_f n' kvs')\n                             \\<in> \\<langle>Ra,\n                                   Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                                   \\<langle>Ra \\<times>\\<^sub>r\n      Rb\\<rangle>list_rel;\n        rbtreeify_f n kvs = (a, (ab, bb) # kvs'); n \\<le> Suc (length kvs');\n        \\<And>n' kvs'a.\n           \\<lbrakk>n = n';\n            (kvs', kvs'a)\n            \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n           \\<Longrightarrow> (rbtreeify_g n' kvs', rbtreeify_g n' kvs'a)\n                             \\<in> \\<langle>Ra,\n                                   Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                                   \\<langle>Ra \\<times>\\<^sub>r\n      Rb\\<rangle>list_rel;\n        (kvs, kvs'a) \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel;\n        rbtreeify_f n kvs'a = (a', (a'a, b'a) # xs');\n        (a, a') \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel;\n        (kvs', xs') \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel;\n        (ab, a'a) \\<in> Ra; (bb, b'a) \\<in> Rb\\<rbrakk>\n       \\<Longrightarrow> (apfst (Branch color.B a ab bb)\n                           (rbtreeify_g n kvs'),\n                          apfst (Branch color.B a' a'a b'a)\n                           (rbtreeify_g n xs'))\n                         \\<in> \\<langle>Ra,\n                               Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                               \\<langle>Ra \\<times>\\<^sub>r\n  Rb\\<rangle>list_rel\n 2. \\<And>n kvs t k v kvs' kvs'a.\n       \\<lbrakk>0 < n; n \\<le> length kvs;\n        \\<And>n' kvs'.\n           \\<lbrakk>n = n';\n            (kvs, kvs')\n            \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n           \\<Longrightarrow> (rbtreeify_f n' kvs, rbtreeify_f n' kvs')\n                             \\<in> \\<langle>Ra,\n                                   Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                                   \\<langle>Ra \\<times>\\<^sub>r\n      Rb\\<rangle>list_rel;\n        rbtreeify_f n kvs = (t, (k, v) # kvs'); n \\<le> Suc (length kvs');\n        \\<And>n' kvs'a.\n           \\<lbrakk>n = n';\n            (kvs', kvs'a)\n            \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n           \\<Longrightarrow> (rbtreeify_g n' kvs', rbtreeify_g n' kvs'a)\n                             \\<in> \\<langle>Ra,\n                                   Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                                   \\<langle>Ra \\<times>\\<^sub>r\n      Rb\\<rangle>list_rel;\n        (kvs, kvs'a)\n        \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n       \\<Longrightarrow> (rbtreeify_f n kvs, rbtreeify_f n kvs'a)\n                         \\<in> \\<langle>Ra,\n                               Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                               \\<langle>Ra \\<times>\\<^sub>r\n  Rb\\<rangle>list_rel\n 3. \\<And>n kvs t k v kvs' n' kvs'a.\n       \\<lbrakk>0 < n; n \\<le> length kvs;\n        \\<And>n' kvs'.\n           \\<lbrakk>(n, n') \\<in> nat_rel;\n            (kvs, kvs')\n            \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n           \\<Longrightarrow> (rbtreeify_f n kvs, rbtreeify_f n' kvs')\n                             \\<in> \\<langle>Ra,\n                                   Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                                   \\<langle>Ra \\<times>\\<^sub>r\n      Rb\\<rangle>list_rel;\n        rbtreeify_f n kvs = (t, (k, v) # kvs'); n \\<le> length kvs';\n        \\<And>n' kvs'a.\n           \\<lbrakk>(n, n') \\<in> nat_rel;\n            (kvs', kvs'a)\n            \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n           \\<Longrightarrow> (rbtreeify_f n kvs', rbtreeify_f n' kvs'a)\n                             \\<in> \\<langle>Ra,\n                                   Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                                   \\<langle>Ra \\<times>\\<^sub>r\n      Rb\\<rangle>list_rel;\n        (Suc (2 * n), n') \\<in> nat_rel;\n        (kvs, kvs'a)\n        \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n       \\<Longrightarrow> (rbtreeify_f (Suc (2 * n)) kvs,\n                          rbtreeify_f n' kvs'a)\n                         \\<in> \\<langle>Ra,\n                               Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                               \\<langle>Ra \\<times>\\<^sub>r\n  Rb\\<rangle>list_rel\n 4. \\<And>kvs n' kvs'.\n       \\<lbrakk>(0, n') \\<in> nat_rel;\n        (kvs, kvs')\n        \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n       \\<Longrightarrow> (rbtreeify_g 0 kvs, rbtreeify_g n' kvs')\n                         \\<in> \\<langle>Ra,\n                               Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                               \\<langle>Ra \\<times>\\<^sub>r\n  Rb\\<rangle>list_rel\n 5. \\<And>kvs n' kvs'.\n       \\<lbrakk>(Suc 0, n') \\<in> nat_rel;\n        (kvs, kvs')\n        \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n       \\<Longrightarrow> (rbtreeify_g (Suc 0) kvs, rbtreeify_g n' kvs')\n                         \\<in> \\<langle>Ra,\n                               Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                               \\<langle>Ra \\<times>\\<^sub>r\n  Rb\\<rangle>list_rel\n 6. \\<And>n kvs t k v kvs' n' kvs'a.\n       \\<lbrakk>0 < n; n \\<le> Suc (length kvs);\n        \\<And>n' kvs'.\n           \\<lbrakk>(n, n') \\<in> nat_rel;\n            (kvs, kvs')\n            \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n           \\<Longrightarrow> (rbtreeify_g n kvs, rbtreeify_g n' kvs')\n                             \\<in> \\<langle>Ra,\n                                   Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                                   \\<langle>Ra \\<times>\\<^sub>r\n      Rb\\<rangle>list_rel;\n        rbtreeify_g n kvs = (t, (k, v) # kvs'); n \\<le> Suc (length kvs');\n        \\<And>n' kvs'a.\n           \\<lbrakk>(n, n') \\<in> nat_rel;\n            (kvs', kvs'a)\n            \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n           \\<Longrightarrow> (rbtreeify_g n kvs', rbtreeify_g n' kvs'a)\n                             \\<in> \\<langle>Ra,\n                                   Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                                   \\<langle>Ra \\<times>\\<^sub>r\n      Rb\\<rangle>list_rel;\n        (2 * n, n') \\<in> nat_rel;\n        (kvs, kvs'a)\n        \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n       \\<Longrightarrow> (rbtreeify_g (2 * n) kvs, rbtreeify_g n' kvs'a)\n                         \\<in> \\<langle>Ra,\n                               Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                               \\<langle>Ra \\<times>\\<^sub>r\n  Rb\\<rangle>list_rel\n 7. \\<And>n kvs t k v kvs' n' kvs'a.\n       \\<lbrakk>0 < n; n \\<le> length kvs;\n        \\<And>n' kvs'.\n           \\<lbrakk>(n, n') \\<in> nat_rel;\n            (kvs, kvs')\n            \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n           \\<Longrightarrow> (rbtreeify_f n kvs, rbtreeify_f n' kvs')\n                             \\<in> \\<langle>Ra,\n                                   Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                                   \\<langle>Ra \\<times>\\<^sub>r\n      Rb\\<rangle>list_rel;\n        rbtreeify_f n kvs = (t, (k, v) # kvs'); n \\<le> Suc (length kvs');\n        \\<And>n' kvs'a.\n           \\<lbrakk>(n, n') \\<in> nat_rel;\n            (kvs', kvs'a)\n            \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n           \\<Longrightarrow> (rbtreeify_g n kvs', rbtreeify_g n' kvs'a)\n                             \\<in> \\<langle>Ra,\n                                   Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                                   \\<langle>Ra \\<times>\\<^sub>r\n      Rb\\<rangle>list_rel;\n        (Suc (2 * n), n') \\<in> nat_rel;\n        (kvs, kvs'a)\n        \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n       \\<Longrightarrow> (rbtreeify_g (Suc (2 * n)) kvs,\n                          rbtreeify_g n' kvs'a)\n                         \\<in> \\<langle>Ra,\n                               Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                               \\<langle>Ra \\<times>\\<^sub>r\n  Rb\\<rangle>list_rel", "apply parametricity"], ["proof (prove)\ngoal (7 subgoals):\n 1. \\<And>n kvs kvs' kvs'a a a' xs' ab bb a'a b'a.\n       \\<lbrakk>0 < n; n \\<le> length kvs;\n        \\<And>n' kvs'.\n           \\<lbrakk>n = n';\n            (kvs, kvs')\n            \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n           \\<Longrightarrow> (rbtreeify_f n' kvs, rbtreeify_f n' kvs')\n                             \\<in> \\<langle>Ra,\n                                   Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                                   \\<langle>Ra \\<times>\\<^sub>r\n      Rb\\<rangle>list_rel;\n        rbtreeify_f n kvs = (a, (ab, bb) # kvs'); n \\<le> Suc (length kvs');\n        (kvs, kvs'a) \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel;\n        rbtreeify_f n kvs'a = (a', (a'a, b'a) # xs');\n        (a, a') \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel;\n        (kvs', xs') \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel;\n        (ab, a'a) \\<in> Ra; (bb, b'a) \\<in> Rb\\<rbrakk>\n       \\<Longrightarrow> n = n\n 2. \\<And>n kvs t k v kvs' kvs'a.\n       \\<lbrakk>0 < n; n \\<le> length kvs;\n        \\<And>n' kvs'.\n           \\<lbrakk>n = n';\n            (kvs, kvs')\n            \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n           \\<Longrightarrow> (rbtreeify_f n' kvs, rbtreeify_f n' kvs')\n                             \\<in> \\<langle>Ra,\n                                   Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                                   \\<langle>Ra \\<times>\\<^sub>r\n      Rb\\<rangle>list_rel;\n        rbtreeify_f n kvs = (t, (k, v) # kvs'); n \\<le> Suc (length kvs');\n        \\<And>n' kvs'a.\n           \\<lbrakk>n = n';\n            (kvs', kvs'a)\n            \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n           \\<Longrightarrow> (rbtreeify_g n' kvs', rbtreeify_g n' kvs'a)\n                             \\<in> \\<langle>Ra,\n                                   Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                                   \\<langle>Ra \\<times>\\<^sub>r\n      Rb\\<rangle>list_rel;\n        (kvs, kvs'a)\n        \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n       \\<Longrightarrow> (rbtreeify_f n kvs, rbtreeify_f n kvs'a)\n                         \\<in> \\<langle>Ra,\n                               Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                               \\<langle>Ra \\<times>\\<^sub>r\n  Rb\\<rangle>list_rel\n 3. \\<And>n kvs t k v kvs' n' kvs'a.\n       \\<lbrakk>0 < n; n \\<le> length kvs;\n        \\<And>n' kvs'.\n           \\<lbrakk>(n, n') \\<in> nat_rel;\n            (kvs, kvs')\n            \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n           \\<Longrightarrow> (rbtreeify_f n kvs, rbtreeify_f n' kvs')\n                             \\<in> \\<langle>Ra,\n                                   Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                                   \\<langle>Ra \\<times>\\<^sub>r\n      Rb\\<rangle>list_rel;\n        rbtreeify_f n kvs = (t, (k, v) # kvs'); n \\<le> length kvs';\n        \\<And>n' kvs'a.\n           \\<lbrakk>(n, n') \\<in> nat_rel;\n            (kvs', kvs'a)\n            \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n           \\<Longrightarrow> (rbtreeify_f n kvs', rbtreeify_f n' kvs'a)\n                             \\<in> \\<langle>Ra,\n                                   Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                                   \\<langle>Ra \\<times>\\<^sub>r\n      Rb\\<rangle>list_rel;\n        (Suc (2 * n), n') \\<in> nat_rel;\n        (kvs, kvs'a)\n        \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n       \\<Longrightarrow> (rbtreeify_f (Suc (2 * n)) kvs,\n                          rbtreeify_f n' kvs'a)\n                         \\<in> \\<langle>Ra,\n                               Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                               \\<langle>Ra \\<times>\\<^sub>r\n  Rb\\<rangle>list_rel\n 4. \\<And>kvs n' kvs'.\n       \\<lbrakk>(0, n') \\<in> nat_rel;\n        (kvs, kvs')\n        \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n       \\<Longrightarrow> (rbtreeify_g 0 kvs, rbtreeify_g n' kvs')\n                         \\<in> \\<langle>Ra,\n                               Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                               \\<langle>Ra \\<times>\\<^sub>r\n  Rb\\<rangle>list_rel\n 5. \\<And>kvs n' kvs'.\n       \\<lbrakk>(Suc 0, n') \\<in> nat_rel;\n        (kvs, kvs')\n        \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n       \\<Longrightarrow> (rbtreeify_g (Suc 0) kvs, rbtreeify_g n' kvs')\n                         \\<in> \\<langle>Ra,\n                               Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                               \\<langle>Ra \\<times>\\<^sub>r\n  Rb\\<rangle>list_rel\n 6. \\<And>n kvs t k v kvs' n' kvs'a.\n       \\<lbrakk>0 < n; n \\<le> Suc (length kvs);\n        \\<And>n' kvs'.\n           \\<lbrakk>(n, n') \\<in> nat_rel;\n            (kvs, kvs')\n            \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n           \\<Longrightarrow> (rbtreeify_g n kvs, rbtreeify_g n' kvs')\n                             \\<in> \\<langle>Ra,\n                                   Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                                   \\<langle>Ra \\<times>\\<^sub>r\n      Rb\\<rangle>list_rel;\n        rbtreeify_g n kvs = (t, (k, v) # kvs'); n \\<le> Suc (length kvs');\n        \\<And>n' kvs'a.\n           \\<lbrakk>(n, n') \\<in> nat_rel;\n            (kvs', kvs'a)\n            \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n           \\<Longrightarrow> (rbtreeify_g n kvs', rbtreeify_g n' kvs'a)\n                             \\<in> \\<langle>Ra,\n                                   Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                                   \\<langle>Ra \\<times>\\<^sub>r\n      Rb\\<rangle>list_rel;\n        (2 * n, n') \\<in> nat_rel;\n        (kvs, kvs'a)\n        \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n       \\<Longrightarrow> (rbtreeify_g (2 * n) kvs, rbtreeify_g n' kvs'a)\n                         \\<in> \\<langle>Ra,\n                               Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                               \\<langle>Ra \\<times>\\<^sub>r\n  Rb\\<rangle>list_rel\n 7. \\<And>n kvs t k v kvs' n' kvs'a.\n       \\<lbrakk>0 < n; n \\<le> length kvs;\n        \\<And>n' kvs'.\n           \\<lbrakk>(n, n') \\<in> nat_rel;\n            (kvs, kvs')\n            \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n           \\<Longrightarrow> (rbtreeify_f n kvs, rbtreeify_f n' kvs')\n                             \\<in> \\<langle>Ra,\n                                   Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                                   \\<langle>Ra \\<times>\\<^sub>r\n      Rb\\<rangle>list_rel;\n        rbtreeify_f n kvs = (t, (k, v) # kvs'); n \\<le> Suc (length kvs');\n        \\<And>n' kvs'a.\n           \\<lbrakk>(n, n') \\<in> nat_rel;\n            (kvs', kvs'a)\n            \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n           \\<Longrightarrow> (rbtreeify_g n kvs', rbtreeify_g n' kvs'a)\n                             \\<in> \\<langle>Ra,\n                                   Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                                   \\<langle>Ra \\<times>\\<^sub>r\n      Rb\\<rangle>list_rel;\n        (Suc (2 * n), n') \\<in> nat_rel;\n        (kvs, kvs'a)\n        \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n       \\<Longrightarrow> (rbtreeify_g (Suc (2 * n)) kvs,\n                          rbtreeify_g n' kvs'a)\n                         \\<in> \\<langle>Ra,\n                               Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                               \\<langle>Ra \\<times>\\<^sub>r\n  Rb\\<rangle>list_rel", "apply (rule refl)"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<And>n kvs t k v kvs' kvs'a.\n       \\<lbrakk>0 < n; n \\<le> length kvs;\n        \\<And>n' kvs'.\n           \\<lbrakk>n = n';\n            (kvs, kvs')\n            \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n           \\<Longrightarrow> (rbtreeify_f n' kvs, rbtreeify_f n' kvs')\n                             \\<in> \\<langle>Ra,\n                                   Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                                   \\<langle>Ra \\<times>\\<^sub>r\n      Rb\\<rangle>list_rel;\n        rbtreeify_f n kvs = (t, (k, v) # kvs'); n \\<le> Suc (length kvs');\n        \\<And>n' kvs'a.\n           \\<lbrakk>n = n';\n            (kvs', kvs'a)\n            \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n           \\<Longrightarrow> (rbtreeify_g n' kvs', rbtreeify_g n' kvs'a)\n                             \\<in> \\<langle>Ra,\n                                   Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                                   \\<langle>Ra \\<times>\\<^sub>r\n      Rb\\<rangle>list_rel;\n        (kvs, kvs'a)\n        \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n       \\<Longrightarrow> (rbtreeify_f n kvs, rbtreeify_f n kvs'a)\n                         \\<in> \\<langle>Ra,\n                               Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                               \\<langle>Ra \\<times>\\<^sub>r\n  Rb\\<rangle>list_rel\n 2. \\<And>n kvs t k v kvs' n' kvs'a.\n       \\<lbrakk>0 < n; n \\<le> length kvs;\n        \\<And>n' kvs'.\n           \\<lbrakk>(n, n') \\<in> nat_rel;\n            (kvs, kvs')\n            \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n           \\<Longrightarrow> (rbtreeify_f n kvs, rbtreeify_f n' kvs')\n                             \\<in> \\<langle>Ra,\n                                   Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                                   \\<langle>Ra \\<times>\\<^sub>r\n      Rb\\<rangle>list_rel;\n        rbtreeify_f n kvs = (t, (k, v) # kvs'); n \\<le> length kvs';\n        \\<And>n' kvs'a.\n           \\<lbrakk>(n, n') \\<in> nat_rel;\n            (kvs', kvs'a)\n            \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n           \\<Longrightarrow> (rbtreeify_f n kvs', rbtreeify_f n' kvs'a)\n                             \\<in> \\<langle>Ra,\n                                   Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                                   \\<langle>Ra \\<times>\\<^sub>r\n      Rb\\<rangle>list_rel;\n        (Suc (2 * n), n') \\<in> nat_rel;\n        (kvs, kvs'a)\n        \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n       \\<Longrightarrow> (rbtreeify_f (Suc (2 * n)) kvs,\n                          rbtreeify_f n' kvs'a)\n                         \\<in> \\<langle>Ra,\n                               Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                               \\<langle>Ra \\<times>\\<^sub>r\n  Rb\\<rangle>list_rel\n 3. \\<And>kvs n' kvs'.\n       \\<lbrakk>(0, n') \\<in> nat_rel;\n        (kvs, kvs')\n        \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n       \\<Longrightarrow> (rbtreeify_g 0 kvs, rbtreeify_g n' kvs')\n                         \\<in> \\<langle>Ra,\n                               Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                               \\<langle>Ra \\<times>\\<^sub>r\n  Rb\\<rangle>list_rel\n 4. \\<And>kvs n' kvs'.\n       \\<lbrakk>(Suc 0, n') \\<in> nat_rel;\n        (kvs, kvs')\n        \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n       \\<Longrightarrow> (rbtreeify_g (Suc 0) kvs, rbtreeify_g n' kvs')\n                         \\<in> \\<langle>Ra,\n                               Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                               \\<langle>Ra \\<times>\\<^sub>r\n  Rb\\<rangle>list_rel\n 5. \\<And>n kvs t k v kvs' n' kvs'a.\n       \\<lbrakk>0 < n; n \\<le> Suc (length kvs);\n        \\<And>n' kvs'.\n           \\<lbrakk>(n, n') \\<in> nat_rel;\n            (kvs, kvs')\n            \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n           \\<Longrightarrow> (rbtreeify_g n kvs, rbtreeify_g n' kvs')\n                             \\<in> \\<langle>Ra,\n                                   Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                                   \\<langle>Ra \\<times>\\<^sub>r\n      Rb\\<rangle>list_rel;\n        rbtreeify_g n kvs = (t, (k, v) # kvs'); n \\<le> Suc (length kvs');\n        \\<And>n' kvs'a.\n           \\<lbrakk>(n, n') \\<in> nat_rel;\n            (kvs', kvs'a)\n            \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n           \\<Longrightarrow> (rbtreeify_g n kvs', rbtreeify_g n' kvs'a)\n                             \\<in> \\<langle>Ra,\n                                   Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                                   \\<langle>Ra \\<times>\\<^sub>r\n      Rb\\<rangle>list_rel;\n        (2 * n, n') \\<in> nat_rel;\n        (kvs, kvs'a)\n        \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n       \\<Longrightarrow> (rbtreeify_g (2 * n) kvs, rbtreeify_g n' kvs'a)\n                         \\<in> \\<langle>Ra,\n                               Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                               \\<langle>Ra \\<times>\\<^sub>r\n  Rb\\<rangle>list_rel\n 6. \\<And>n kvs t k v kvs' n' kvs'a.\n       \\<lbrakk>0 < n; n \\<le> length kvs;\n        \\<And>n' kvs'.\n           \\<lbrakk>(n, n') \\<in> nat_rel;\n            (kvs, kvs')\n            \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n           \\<Longrightarrow> (rbtreeify_f n kvs, rbtreeify_f n' kvs')\n                             \\<in> \\<langle>Ra,\n                                   Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                                   \\<langle>Ra \\<times>\\<^sub>r\n      Rb\\<rangle>list_rel;\n        rbtreeify_f n kvs = (t, (k, v) # kvs'); n \\<le> Suc (length kvs');\n        \\<And>n' kvs'a.\n           \\<lbrakk>(n, n') \\<in> nat_rel;\n            (kvs', kvs'a)\n            \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n           \\<Longrightarrow> (rbtreeify_g n kvs', rbtreeify_g n' kvs'a)\n                             \\<in> \\<langle>Ra,\n                                   Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                                   \\<langle>Ra \\<times>\\<^sub>r\n      Rb\\<rangle>list_rel;\n        (Suc (2 * n), n') \\<in> nat_rel;\n        (kvs, kvs'a)\n        \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n       \\<Longrightarrow> (rbtreeify_g (Suc (2 * n)) kvs,\n                          rbtreeify_g n' kvs'a)\n                         \\<in> \\<langle>Ra,\n                               Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                               \\<langle>Ra \\<times>\\<^sub>r\n  Rb\\<rangle>list_rel", "apply rprems"], ["proof (prove)\ngoal (7 subgoals):\n 1. \\<And>n kvs t k v kvs' kvs'a.\n       \\<lbrakk>0 < n; n \\<le> length kvs;\n        rbtreeify_f n kvs = (t, (k, v) # kvs'); n \\<le> Suc (length kvs');\n        \\<And>n' kvs'a.\n           \\<lbrakk>n = n';\n            (kvs', kvs'a)\n            \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n           \\<Longrightarrow> (rbtreeify_g n' kvs', rbtreeify_g n' kvs'a)\n                             \\<in> \\<langle>Ra,\n                                   Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                                   \\<langle>Ra \\<times>\\<^sub>r\n      Rb\\<rangle>list_rel;\n        (kvs, kvs'a)\n        \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n       \\<Longrightarrow> n = n\n 2. \\<And>n kvs t k v kvs' kvs'a.\n       \\<lbrakk>0 < n; n \\<le> length kvs;\n        rbtreeify_f n kvs = (t, (k, v) # kvs'); n \\<le> Suc (length kvs');\n        \\<And>n' kvs'a.\n           \\<lbrakk>n = n';\n            (kvs', kvs'a)\n            \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n           \\<Longrightarrow> (rbtreeify_g n' kvs', rbtreeify_g n' kvs'a)\n                             \\<in> \\<langle>Ra,\n                                   Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                                   \\<langle>Ra \\<times>\\<^sub>r\n      Rb\\<rangle>list_rel;\n        (kvs, kvs'a)\n        \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n       \\<Longrightarrow> (kvs, kvs'a)\n                         \\<in> \\<langle>Ra \\<times>\\<^sub>r\n  Rb\\<rangle>list_rel\n 3. \\<And>n kvs t k v kvs' n' kvs'a.\n       \\<lbrakk>0 < n; n \\<le> length kvs;\n        \\<And>n' kvs'.\n           \\<lbrakk>(n, n') \\<in> nat_rel;\n            (kvs, kvs')\n            \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n           \\<Longrightarrow> (rbtreeify_f n kvs, rbtreeify_f n' kvs')\n                             \\<in> \\<langle>Ra,\n                                   Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                                   \\<langle>Ra \\<times>\\<^sub>r\n      Rb\\<rangle>list_rel;\n        rbtreeify_f n kvs = (t, (k, v) # kvs'); n \\<le> length kvs';\n        \\<And>n' kvs'a.\n           \\<lbrakk>(n, n') \\<in> nat_rel;\n            (kvs', kvs'a)\n            \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n           \\<Longrightarrow> (rbtreeify_f n kvs', rbtreeify_f n' kvs'a)\n                             \\<in> \\<langle>Ra,\n                                   Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                                   \\<langle>Ra \\<times>\\<^sub>r\n      Rb\\<rangle>list_rel;\n        (Suc (2 * n), n') \\<in> nat_rel;\n        (kvs, kvs'a)\n        \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n       \\<Longrightarrow> (rbtreeify_f (Suc (2 * n)) kvs,\n                          rbtreeify_f n' kvs'a)\n                         \\<in> \\<langle>Ra,\n                               Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                               \\<langle>Ra \\<times>\\<^sub>r\n  Rb\\<rangle>list_rel\n 4. \\<And>kvs n' kvs'.\n       \\<lbrakk>(0, n') \\<in> nat_rel;\n        (kvs, kvs')\n        \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n       \\<Longrightarrow> (rbtreeify_g 0 kvs, rbtreeify_g n' kvs')\n                         \\<in> \\<langle>Ra,\n                               Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                               \\<langle>Ra \\<times>\\<^sub>r\n  Rb\\<rangle>list_rel\n 5. \\<And>kvs n' kvs'.\n       \\<lbrakk>(Suc 0, n') \\<in> nat_rel;\n        (kvs, kvs')\n        \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n       \\<Longrightarrow> (rbtreeify_g (Suc 0) kvs, rbtreeify_g n' kvs')\n                         \\<in> \\<langle>Ra,\n                               Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                               \\<langle>Ra \\<times>\\<^sub>r\n  Rb\\<rangle>list_rel\n 6. \\<And>n kvs t k v kvs' n' kvs'a.\n       \\<lbrakk>0 < n; n \\<le> Suc (length kvs);\n        \\<And>n' kvs'.\n           \\<lbrakk>(n, n') \\<in> nat_rel;\n            (kvs, kvs')\n            \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n           \\<Longrightarrow> (rbtreeify_g n kvs, rbtreeify_g n' kvs')\n                             \\<in> \\<langle>Ra,\n                                   Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                                   \\<langle>Ra \\<times>\\<^sub>r\n      Rb\\<rangle>list_rel;\n        rbtreeify_g n kvs = (t, (k, v) # kvs'); n \\<le> Suc (length kvs');\n        \\<And>n' kvs'a.\n           \\<lbrakk>(n, n') \\<in> nat_rel;\n            (kvs', kvs'a)\n            \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n           \\<Longrightarrow> (rbtreeify_g n kvs', rbtreeify_g n' kvs'a)\n                             \\<in> \\<langle>Ra,\n                                   Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                                   \\<langle>Ra \\<times>\\<^sub>r\n      Rb\\<rangle>list_rel;\n        (2 * n, n') \\<in> nat_rel;\n        (kvs, kvs'a)\n        \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n       \\<Longrightarrow> (rbtreeify_g (2 * n) kvs, rbtreeify_g n' kvs'a)\n                         \\<in> \\<langle>Ra,\n                               Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                               \\<langle>Ra \\<times>\\<^sub>r\n  Rb\\<rangle>list_rel\n 7. \\<And>n kvs t k v kvs' n' kvs'a.\n       \\<lbrakk>0 < n; n \\<le> length kvs;\n        \\<And>n' kvs'.\n           \\<lbrakk>(n, n') \\<in> nat_rel;\n            (kvs, kvs')\n            \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n           \\<Longrightarrow> (rbtreeify_f n kvs, rbtreeify_f n' kvs')\n                             \\<in> \\<langle>Ra,\n                                   Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                                   \\<langle>Ra \\<times>\\<^sub>r\n      Rb\\<rangle>list_rel;\n        rbtreeify_f n kvs = (t, (k, v) # kvs'); n \\<le> Suc (length kvs');\n        \\<And>n' kvs'a.\n           \\<lbrakk>(n, n') \\<in> nat_rel;\n            (kvs', kvs'a)\n            \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n           \\<Longrightarrow> (rbtreeify_g n kvs', rbtreeify_g n' kvs'a)\n                             \\<in> \\<langle>Ra,\n                                   Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                                   \\<langle>Ra \\<times>\\<^sub>r\n      Rb\\<rangle>list_rel;\n        (Suc (2 * n), n') \\<in> nat_rel;\n        (kvs, kvs'a)\n        \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n       \\<Longrightarrow> (rbtreeify_g (Suc (2 * n)) kvs,\n                          rbtreeify_g n' kvs'a)\n                         \\<in> \\<langle>Ra,\n                               Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                               \\<langle>Ra \\<times>\\<^sub>r\n  Rb\\<rangle>list_rel", "apply (rule refl)"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<And>n kvs t k v kvs' kvs'a.\n       \\<lbrakk>0 < n; n \\<le> length kvs;\n        rbtreeify_f n kvs = (t, (k, v) # kvs'); n \\<le> Suc (length kvs');\n        \\<And>n' kvs'a.\n           \\<lbrakk>n = n';\n            (kvs', kvs'a)\n            \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n           \\<Longrightarrow> (rbtreeify_g n' kvs', rbtreeify_g n' kvs'a)\n                             \\<in> \\<langle>Ra,\n                                   Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                                   \\<langle>Ra \\<times>\\<^sub>r\n      Rb\\<rangle>list_rel;\n        (kvs, kvs'a)\n        \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n       \\<Longrightarrow> (kvs, kvs'a)\n                         \\<in> \\<langle>Ra \\<times>\\<^sub>r\n  Rb\\<rangle>list_rel\n 2. \\<And>n kvs t k v kvs' n' kvs'a.\n       \\<lbrakk>0 < n; n \\<le> length kvs;\n        \\<And>n' kvs'.\n           \\<lbrakk>(n, n') \\<in> nat_rel;\n            (kvs, kvs')\n            \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n           \\<Longrightarrow> (rbtreeify_f n kvs, rbtreeify_f n' kvs')\n                             \\<in> \\<langle>Ra,\n                                   Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                                   \\<langle>Ra \\<times>\\<^sub>r\n      Rb\\<rangle>list_rel;\n        rbtreeify_f n kvs = (t, (k, v) # kvs'); n \\<le> length kvs';\n        \\<And>n' kvs'a.\n           \\<lbrakk>(n, n') \\<in> nat_rel;\n            (kvs', kvs'a)\n            \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n           \\<Longrightarrow> (rbtreeify_f n kvs', rbtreeify_f n' kvs'a)\n                             \\<in> \\<langle>Ra,\n                                   Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                                   \\<langle>Ra \\<times>\\<^sub>r\n      Rb\\<rangle>list_rel;\n        (Suc (2 * n), n') \\<in> nat_rel;\n        (kvs, kvs'a)\n        \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n       \\<Longrightarrow> (rbtreeify_f (Suc (2 * n)) kvs,\n                          rbtreeify_f n' kvs'a)\n                         \\<in> \\<langle>Ra,\n                               Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                               \\<langle>Ra \\<times>\\<^sub>r\n  Rb\\<rangle>list_rel\n 3. \\<And>kvs n' kvs'.\n       \\<lbrakk>(0, n') \\<in> nat_rel;\n        (kvs, kvs')\n        \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n       \\<Longrightarrow> (rbtreeify_g 0 kvs, rbtreeify_g n' kvs')\n                         \\<in> \\<langle>Ra,\n                               Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                               \\<langle>Ra \\<times>\\<^sub>r\n  Rb\\<rangle>list_rel\n 4. \\<And>kvs n' kvs'.\n       \\<lbrakk>(Suc 0, n') \\<in> nat_rel;\n        (kvs, kvs')\n        \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n       \\<Longrightarrow> (rbtreeify_g (Suc 0) kvs, rbtreeify_g n' kvs')\n                         \\<in> \\<langle>Ra,\n                               Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                               \\<langle>Ra \\<times>\\<^sub>r\n  Rb\\<rangle>list_rel\n 5. \\<And>n kvs t k v kvs' n' kvs'a.\n       \\<lbrakk>0 < n; n \\<le> Suc (length kvs);\n        \\<And>n' kvs'.\n           \\<lbrakk>(n, n') \\<in> nat_rel;\n            (kvs, kvs')\n            \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n           \\<Longrightarrow> (rbtreeify_g n kvs, rbtreeify_g n' kvs')\n                             \\<in> \\<langle>Ra,\n                                   Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                                   \\<langle>Ra \\<times>\\<^sub>r\n      Rb\\<rangle>list_rel;\n        rbtreeify_g n kvs = (t, (k, v) # kvs'); n \\<le> Suc (length kvs');\n        \\<And>n' kvs'a.\n           \\<lbrakk>(n, n') \\<in> nat_rel;\n            (kvs', kvs'a)\n            \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n           \\<Longrightarrow> (rbtreeify_g n kvs', rbtreeify_g n' kvs'a)\n                             \\<in> \\<langle>Ra,\n                                   Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                                   \\<langle>Ra \\<times>\\<^sub>r\n      Rb\\<rangle>list_rel;\n        (2 * n, n') \\<in> nat_rel;\n        (kvs, kvs'a)\n        \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n       \\<Longrightarrow> (rbtreeify_g (2 * n) kvs, rbtreeify_g n' kvs'a)\n                         \\<in> \\<langle>Ra,\n                               Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                               \\<langle>Ra \\<times>\\<^sub>r\n  Rb\\<rangle>list_rel\n 6. \\<And>n kvs t k v kvs' n' kvs'a.\n       \\<lbrakk>0 < n; n \\<le> length kvs;\n        \\<And>n' kvs'.\n           \\<lbrakk>(n, n') \\<in> nat_rel;\n            (kvs, kvs')\n            \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n           \\<Longrightarrow> (rbtreeify_f n kvs, rbtreeify_f n' kvs')\n                             \\<in> \\<langle>Ra,\n                                   Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                                   \\<langle>Ra \\<times>\\<^sub>r\n      Rb\\<rangle>list_rel;\n        rbtreeify_f n kvs = (t, (k, v) # kvs'); n \\<le> Suc (length kvs');\n        \\<And>n' kvs'a.\n           \\<lbrakk>(n, n') \\<in> nat_rel;\n            (kvs', kvs'a)\n            \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n           \\<Longrightarrow> (rbtreeify_g n kvs', rbtreeify_g n' kvs'a)\n                             \\<in> \\<langle>Ra,\n                                   Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                                   \\<langle>Ra \\<times>\\<^sub>r\n      Rb\\<rangle>list_rel;\n        (Suc (2 * n), n') \\<in> nat_rel;\n        (kvs, kvs'a)\n        \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n       \\<Longrightarrow> (rbtreeify_g (Suc (2 * n)) kvs,\n                          rbtreeify_g n' kvs'a)\n                         \\<in> \\<langle>Ra,\n                               Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                               \\<langle>Ra \\<times>\\<^sub>r\n  Rb\\<rangle>list_rel", "apply assumption"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>n kvs t k v kvs' n' kvs'a.\n       \\<lbrakk>0 < n; n \\<le> length kvs;\n        \\<And>n' kvs'.\n           \\<lbrakk>(n, n') \\<in> nat_rel;\n            (kvs, kvs')\n            \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n           \\<Longrightarrow> (rbtreeify_f n kvs, rbtreeify_f n' kvs')\n                             \\<in> \\<langle>Ra,\n                                   Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                                   \\<langle>Ra \\<times>\\<^sub>r\n      Rb\\<rangle>list_rel;\n        rbtreeify_f n kvs = (t, (k, v) # kvs'); n \\<le> length kvs';\n        \\<And>n' kvs'a.\n           \\<lbrakk>(n, n') \\<in> nat_rel;\n            (kvs', kvs'a)\n            \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n           \\<Longrightarrow> (rbtreeify_f n kvs', rbtreeify_f n' kvs'a)\n                             \\<in> \\<langle>Ra,\n                                   Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                                   \\<langle>Ra \\<times>\\<^sub>r\n      Rb\\<rangle>list_rel;\n        (Suc (2 * n), n') \\<in> nat_rel;\n        (kvs, kvs'a)\n        \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n       \\<Longrightarrow> (rbtreeify_f (Suc (2 * n)) kvs,\n                          rbtreeify_f n' kvs'a)\n                         \\<in> \\<langle>Ra,\n                               Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                               \\<langle>Ra \\<times>\\<^sub>r\n  Rb\\<rangle>list_rel\n 2. \\<And>kvs n' kvs'.\n       \\<lbrakk>(0, n') \\<in> nat_rel;\n        (kvs, kvs')\n        \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n       \\<Longrightarrow> (rbtreeify_g 0 kvs, rbtreeify_g n' kvs')\n                         \\<in> \\<langle>Ra,\n                               Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                               \\<langle>Ra \\<times>\\<^sub>r\n  Rb\\<rangle>list_rel\n 3. \\<And>kvs n' kvs'.\n       \\<lbrakk>(Suc 0, n') \\<in> nat_rel;\n        (kvs, kvs')\n        \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n       \\<Longrightarrow> (rbtreeify_g (Suc 0) kvs, rbtreeify_g n' kvs')\n                         \\<in> \\<langle>Ra,\n                               Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                               \\<langle>Ra \\<times>\\<^sub>r\n  Rb\\<rangle>list_rel\n 4. \\<And>n kvs t k v kvs' n' kvs'a.\n       \\<lbrakk>0 < n; n \\<le> Suc (length kvs);\n        \\<And>n' kvs'.\n           \\<lbrakk>(n, n') \\<in> nat_rel;\n            (kvs, kvs')\n            \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n           \\<Longrightarrow> (rbtreeify_g n kvs, rbtreeify_g n' kvs')\n                             \\<in> \\<langle>Ra,\n                                   Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                                   \\<langle>Ra \\<times>\\<^sub>r\n      Rb\\<rangle>list_rel;\n        rbtreeify_g n kvs = (t, (k, v) # kvs'); n \\<le> Suc (length kvs');\n        \\<And>n' kvs'a.\n           \\<lbrakk>(n, n') \\<in> nat_rel;\n            (kvs', kvs'a)\n            \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n           \\<Longrightarrow> (rbtreeify_g n kvs', rbtreeify_g n' kvs'a)\n                             \\<in> \\<langle>Ra,\n                                   Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                                   \\<langle>Ra \\<times>\\<^sub>r\n      Rb\\<rangle>list_rel;\n        (2 * n, n') \\<in> nat_rel;\n        (kvs, kvs'a)\n        \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n       \\<Longrightarrow> (rbtreeify_g (2 * n) kvs, rbtreeify_g n' kvs'a)\n                         \\<in> \\<langle>Ra,\n                               Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                               \\<langle>Ra \\<times>\\<^sub>r\n  Rb\\<rangle>list_rel\n 5. \\<And>n kvs t k v kvs' n' kvs'a.\n       \\<lbrakk>0 < n; n \\<le> length kvs;\n        \\<And>n' kvs'.\n           \\<lbrakk>(n, n') \\<in> nat_rel;\n            (kvs, kvs')\n            \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n           \\<Longrightarrow> (rbtreeify_f n kvs, rbtreeify_f n' kvs')\n                             \\<in> \\<langle>Ra,\n                                   Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                                   \\<langle>Ra \\<times>\\<^sub>r\n      Rb\\<rangle>list_rel;\n        rbtreeify_f n kvs = (t, (k, v) # kvs'); n \\<le> Suc (length kvs');\n        \\<And>n' kvs'a.\n           \\<lbrakk>(n, n') \\<in> nat_rel;\n            (kvs', kvs'a)\n            \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n           \\<Longrightarrow> (rbtreeify_g n kvs', rbtreeify_g n' kvs'a)\n                             \\<in> \\<langle>Ra,\n                                   Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                                   \\<langle>Ra \\<times>\\<^sub>r\n      Rb\\<rangle>list_rel;\n        (Suc (2 * n), n') \\<in> nat_rel;\n        (kvs, kvs'a)\n        \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n       \\<Longrightarrow> (rbtreeify_g (Suc (2 * n)) kvs,\n                          rbtreeify_g n' kvs'a)\n                         \\<in> \\<langle>Ra,\n                               Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                               \\<langle>Ra \\<times>\\<^sub>r\n  Rb\\<rangle>list_rel", "apply clarsimp"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>n kvs t k v kvs' kvs'a.\n       \\<lbrakk>0 < n; n \\<le> length kvs;\n        \\<And>n' kvs'.\n           \\<lbrakk>n = n';\n            (kvs, kvs')\n            \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n           \\<Longrightarrow> (rbtreeify_f n' kvs, rbtreeify_f n' kvs')\n                             \\<in> \\<langle>Ra,\n                                   Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                                   \\<langle>Ra \\<times>\\<^sub>r\n      Rb\\<rangle>list_rel;\n        rbtreeify_f n kvs = (t, (k, v) # kvs'); n \\<le> length kvs';\n        \\<And>n' kvs'a.\n           \\<lbrakk>n = n';\n            (kvs', kvs'a)\n            \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n           \\<Longrightarrow> (rbtreeify_f n' kvs', rbtreeify_f n' kvs'a)\n                             \\<in> \\<langle>Ra,\n                                   Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                                   \\<langle>Ra \\<times>\\<^sub>r\n      Rb\\<rangle>list_rel;\n        (kvs, kvs'a)\n        \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n       \\<Longrightarrow> (apfst (Branch color.B t k v) (rbtreeify_f n kvs'),\n                          case rbtreeify_f n kvs'a of\n                          (t1, (k, v) # kvs') \\<Rightarrow>\n                            apfst (Branch color.B t1 k v)\n                             (rbtreeify_f n kvs'))\n                         \\<in> \\<langle>Ra,\n                               Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                               \\<langle>Ra \\<times>\\<^sub>r\n  Rb\\<rangle>list_rel\n 2. \\<And>kvs n' kvs'.\n       \\<lbrakk>(0, n') \\<in> nat_rel;\n        (kvs, kvs')\n        \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n       \\<Longrightarrow> (rbtreeify_g 0 kvs, rbtreeify_g n' kvs')\n                         \\<in> \\<langle>Ra,\n                               Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                               \\<langle>Ra \\<times>\\<^sub>r\n  Rb\\<rangle>list_rel\n 3. \\<And>kvs n' kvs'.\n       \\<lbrakk>(Suc 0, n') \\<in> nat_rel;\n        (kvs, kvs')\n        \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n       \\<Longrightarrow> (rbtreeify_g (Suc 0) kvs, rbtreeify_g n' kvs')\n                         \\<in> \\<langle>Ra,\n                               Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                               \\<langle>Ra \\<times>\\<^sub>r\n  Rb\\<rangle>list_rel\n 4. \\<And>n kvs t k v kvs' n' kvs'a.\n       \\<lbrakk>0 < n; n \\<le> Suc (length kvs);\n        \\<And>n' kvs'.\n           \\<lbrakk>(n, n') \\<in> nat_rel;\n            (kvs, kvs')\n            \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n           \\<Longrightarrow> (rbtreeify_g n kvs, rbtreeify_g n' kvs')\n                             \\<in> \\<langle>Ra,\n                                   Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                                   \\<langle>Ra \\<times>\\<^sub>r\n      Rb\\<rangle>list_rel;\n        rbtreeify_g n kvs = (t, (k, v) # kvs'); n \\<le> Suc (length kvs');\n        \\<And>n' kvs'a.\n           \\<lbrakk>(n, n') \\<in> nat_rel;\n            (kvs', kvs'a)\n            \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n           \\<Longrightarrow> (rbtreeify_g n kvs', rbtreeify_g n' kvs'a)\n                             \\<in> \\<langle>Ra,\n                                   Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                                   \\<langle>Ra \\<times>\\<^sub>r\n      Rb\\<rangle>list_rel;\n        (2 * n, n') \\<in> nat_rel;\n        (kvs, kvs'a)\n        \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n       \\<Longrightarrow> (rbtreeify_g (2 * n) kvs, rbtreeify_g n' kvs'a)\n                         \\<in> \\<langle>Ra,\n                               Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                               \\<langle>Ra \\<times>\\<^sub>r\n  Rb\\<rangle>list_rel\n 5. \\<And>n kvs t k v kvs' n' kvs'a.\n       \\<lbrakk>0 < n; n \\<le> length kvs;\n        \\<And>n' kvs'.\n           \\<lbrakk>(n, n') \\<in> nat_rel;\n            (kvs, kvs')\n            \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n           \\<Longrightarrow> (rbtreeify_f n kvs, rbtreeify_f n' kvs')\n                             \\<in> \\<langle>Ra,\n                                   Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                                   \\<langle>Ra \\<times>\\<^sub>r\n      Rb\\<rangle>list_rel;\n        rbtreeify_f n kvs = (t, (k, v) # kvs'); n \\<le> Suc (length kvs');\n        \\<And>n' kvs'a.\n           \\<lbrakk>(n, n') \\<in> nat_rel;\n            (kvs', kvs'a)\n            \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n           \\<Longrightarrow> (rbtreeify_g n kvs', rbtreeify_g n' kvs'a)\n                             \\<in> \\<langle>Ra,\n                                   Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                                   \\<langle>Ra \\<times>\\<^sub>r\n      Rb\\<rangle>list_rel;\n        (Suc (2 * n), n') \\<in> nat_rel;\n        (kvs, kvs'a)\n        \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n       \\<Longrightarrow> (rbtreeify_g (Suc (2 * n)) kvs,\n                          rbtreeify_g n' kvs'a)\n                         \\<in> \\<langle>Ra,\n                               Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                               \\<langle>Ra \\<times>\\<^sub>r\n  Rb\\<rangle>list_rel", "apply (subgoal_tac \"(rbtreeify_f n kvs, rbtreeify_f n kvs'a) \n      \\<in> \\<langle>\\<langle>Ra, Rb\\<rangle>rbt_rel, \\<langle>\\<langle>Ra, Rb\\<rangle>prod_rel\\<rangle>list_rel\\<rangle>prod_rel\")"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<And>n kvs t k v kvs' kvs'a.\n       \\<lbrakk>0 < n; n \\<le> length kvs;\n        \\<And>n' kvs'.\n           \\<lbrakk>n = n';\n            (kvs, kvs')\n            \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n           \\<Longrightarrow> (rbtreeify_f n' kvs, rbtreeify_f n' kvs')\n                             \\<in> \\<langle>Ra,\n                                   Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                                   \\<langle>Ra \\<times>\\<^sub>r\n      Rb\\<rangle>list_rel;\n        rbtreeify_f n kvs = (t, (k, v) # kvs'); n \\<le> length kvs';\n        \\<And>n' kvs'a.\n           \\<lbrakk>n = n';\n            (kvs', kvs'a)\n            \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n           \\<Longrightarrow> (rbtreeify_f n' kvs', rbtreeify_f n' kvs'a)\n                             \\<in> \\<langle>Ra,\n                                   Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                                   \\<langle>Ra \\<times>\\<^sub>r\n      Rb\\<rangle>list_rel;\n        (kvs, kvs'a) \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel;\n        (rbtreeify_f n kvs, rbtreeify_f n kvs'a)\n        \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n              \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n       \\<Longrightarrow> (apfst (Branch color.B t k v) (rbtreeify_f n kvs'),\n                          case rbtreeify_f n kvs'a of\n                          (t1, (k, v) # kvs') \\<Rightarrow>\n                            apfst (Branch color.B t1 k v)\n                             (rbtreeify_f n kvs'))\n                         \\<in> \\<langle>Ra,\n                               Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                               \\<langle>Ra \\<times>\\<^sub>r\n  Rb\\<rangle>list_rel\n 2. \\<And>n kvs t k v kvs' kvs'a.\n       \\<lbrakk>0 < n; n \\<le> length kvs;\n        \\<And>n' kvs'.\n           \\<lbrakk>n = n';\n            (kvs, kvs')\n            \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n           \\<Longrightarrow> (rbtreeify_f n' kvs, rbtreeify_f n' kvs')\n                             \\<in> \\<langle>Ra,\n                                   Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                                   \\<langle>Ra \\<times>\\<^sub>r\n      Rb\\<rangle>list_rel;\n        rbtreeify_f n kvs = (t, (k, v) # kvs'); n \\<le> length kvs';\n        \\<And>n' kvs'a.\n           \\<lbrakk>n = n';\n            (kvs', kvs'a)\n            \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n           \\<Longrightarrow> (rbtreeify_f n' kvs', rbtreeify_f n' kvs'a)\n                             \\<in> \\<langle>Ra,\n                                   Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                                   \\<langle>Ra \\<times>\\<^sub>r\n      Rb\\<rangle>list_rel;\n        (kvs, kvs'a)\n        \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n       \\<Longrightarrow> (rbtreeify_f n kvs, rbtreeify_f n kvs'a)\n                         \\<in> \\<langle>Ra,\n                               Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                               \\<langle>Ra \\<times>\\<^sub>r\n  Rb\\<rangle>list_rel\n 3. \\<And>kvs n' kvs'.\n       \\<lbrakk>(0, n') \\<in> nat_rel;\n        (kvs, kvs')\n        \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n       \\<Longrightarrow> (rbtreeify_g 0 kvs, rbtreeify_g n' kvs')\n                         \\<in> \\<langle>Ra,\n                               Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                               \\<langle>Ra \\<times>\\<^sub>r\n  Rb\\<rangle>list_rel\n 4. \\<And>kvs n' kvs'.\n       \\<lbrakk>(Suc 0, n') \\<in> nat_rel;\n        (kvs, kvs')\n        \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n       \\<Longrightarrow> (rbtreeify_g (Suc 0) kvs, rbtreeify_g n' kvs')\n                         \\<in> \\<langle>Ra,\n                               Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                               \\<langle>Ra \\<times>\\<^sub>r\n  Rb\\<rangle>list_rel\n 5. \\<And>n kvs t k v kvs' n' kvs'a.\n       \\<lbrakk>0 < n; n \\<le> Suc (length kvs);\n        \\<And>n' kvs'.\n           \\<lbrakk>(n, n') \\<in> nat_rel;\n            (kvs, kvs')\n            \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n           \\<Longrightarrow> (rbtreeify_g n kvs, rbtreeify_g n' kvs')\n                             \\<in> \\<langle>Ra,\n                                   Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                                   \\<langle>Ra \\<times>\\<^sub>r\n      Rb\\<rangle>list_rel;\n        rbtreeify_g n kvs = (t, (k, v) # kvs'); n \\<le> Suc (length kvs');\n        \\<And>n' kvs'a.\n           \\<lbrakk>(n, n') \\<in> nat_rel;\n            (kvs', kvs'a)\n            \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n           \\<Longrightarrow> (rbtreeify_g n kvs', rbtreeify_g n' kvs'a)\n                             \\<in> \\<langle>Ra,\n                                   Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                                   \\<langle>Ra \\<times>\\<^sub>r\n      Rb\\<rangle>list_rel;\n        (2 * n, n') \\<in> nat_rel;\n        (kvs, kvs'a)\n        \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n       \\<Longrightarrow> (rbtreeify_g (2 * n) kvs, rbtreeify_g n' kvs'a)\n                         \\<in> \\<langle>Ra,\n                               Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                               \\<langle>Ra \\<times>\\<^sub>r\n  Rb\\<rangle>list_rel\n 6. \\<And>n kvs t k v kvs' n' kvs'a.\n       \\<lbrakk>0 < n; n \\<le> length kvs;\n        \\<And>n' kvs'.\n           \\<lbrakk>(n, n') \\<in> nat_rel;\n            (kvs, kvs')\n            \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n           \\<Longrightarrow> (rbtreeify_f n kvs, rbtreeify_f n' kvs')\n                             \\<in> \\<langle>Ra,\n                                   Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                                   \\<langle>Ra \\<times>\\<^sub>r\n      Rb\\<rangle>list_rel;\n        rbtreeify_f n kvs = (t, (k, v) # kvs'); n \\<le> Suc (length kvs');\n        \\<And>n' kvs'a.\n           \\<lbrakk>(n, n') \\<in> nat_rel;\n            (kvs', kvs'a)\n            \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n           \\<Longrightarrow> (rbtreeify_g n kvs', rbtreeify_g n' kvs'a)\n                             \\<in> \\<langle>Ra,\n                                   Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                                   \\<langle>Ra \\<times>\\<^sub>r\n      Rb\\<rangle>list_rel;\n        (Suc (2 * n), n') \\<in> nat_rel;\n        (kvs, kvs'a)\n        \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n       \\<Longrightarrow> (rbtreeify_g (Suc (2 * n)) kvs,\n                          rbtreeify_g n' kvs'a)\n                         \\<in> \\<langle>Ra,\n                               Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                               \\<langle>Ra \\<times>\\<^sub>r\n  Rb\\<rangle>list_rel", "apply (clarsimp elim!: list_relE prod_relE)"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<And>n kvs kvs' kvs'a a a' xs' ab bb a'a b'a.\n       \\<lbrakk>0 < n; n \\<le> length kvs;\n        \\<And>n' kvs'.\n           \\<lbrakk>n = n';\n            (kvs, kvs')\n            \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n           \\<Longrightarrow> (rbtreeify_f n' kvs, rbtreeify_f n' kvs')\n                             \\<in> \\<langle>Ra,\n                                   Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                                   \\<langle>Ra \\<times>\\<^sub>r\n      Rb\\<rangle>list_rel;\n        rbtreeify_f n kvs = (a, (ab, bb) # kvs'); n \\<le> length kvs';\n        \\<And>n' kvs'a.\n           \\<lbrakk>n = n';\n            (kvs', kvs'a)\n            \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n           \\<Longrightarrow> (rbtreeify_f n' kvs', rbtreeify_f n' kvs'a)\n                             \\<in> \\<langle>Ra,\n                                   Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                                   \\<langle>Ra \\<times>\\<^sub>r\n      Rb\\<rangle>list_rel;\n        (kvs, kvs'a) \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel;\n        rbtreeify_f n kvs'a = (a', (a'a, b'a) # xs');\n        (a, a') \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel;\n        (kvs', xs') \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel;\n        (ab, a'a) \\<in> Ra; (bb, b'a) \\<in> Rb\\<rbrakk>\n       \\<Longrightarrow> (apfst (Branch color.B a ab bb)\n                           (rbtreeify_f n kvs'),\n                          apfst (Branch color.B a' a'a b'a)\n                           (rbtreeify_f n xs'))\n                         \\<in> \\<langle>Ra,\n                               Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                               \\<langle>Ra \\<times>\\<^sub>r\n  Rb\\<rangle>list_rel\n 2. \\<And>n kvs t k v kvs' kvs'a.\n       \\<lbrakk>0 < n; n \\<le> length kvs;\n        \\<And>n' kvs'.\n           \\<lbrakk>n = n';\n            (kvs, kvs')\n            \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n           \\<Longrightarrow> (rbtreeify_f n' kvs, rbtreeify_f n' kvs')\n                             \\<in> \\<langle>Ra,\n                                   Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                                   \\<langle>Ra \\<times>\\<^sub>r\n      Rb\\<rangle>list_rel;\n        rbtreeify_f n kvs = (t, (k, v) # kvs'); n \\<le> length kvs';\n        \\<And>n' kvs'a.\n           \\<lbrakk>n = n';\n            (kvs', kvs'a)\n            \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n           \\<Longrightarrow> (rbtreeify_f n' kvs', rbtreeify_f n' kvs'a)\n                             \\<in> \\<langle>Ra,\n                                   Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                                   \\<langle>Ra \\<times>\\<^sub>r\n      Rb\\<rangle>list_rel;\n        (kvs, kvs'a)\n        \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n       \\<Longrightarrow> (rbtreeify_f n kvs, rbtreeify_f n kvs'a)\n                         \\<in> \\<langle>Ra,\n                               Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                               \\<langle>Ra \\<times>\\<^sub>r\n  Rb\\<rangle>list_rel\n 3. \\<And>kvs n' kvs'.\n       \\<lbrakk>(0, n') \\<in> nat_rel;\n        (kvs, kvs')\n        \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n       \\<Longrightarrow> (rbtreeify_g 0 kvs, rbtreeify_g n' kvs')\n                         \\<in> \\<langle>Ra,\n                               Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                               \\<langle>Ra \\<times>\\<^sub>r\n  Rb\\<rangle>list_rel\n 4. \\<And>kvs n' kvs'.\n       \\<lbrakk>(Suc 0, n') \\<in> nat_rel;\n        (kvs, kvs')\n        \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n       \\<Longrightarrow> (rbtreeify_g (Suc 0) kvs, rbtreeify_g n' kvs')\n                         \\<in> \\<langle>Ra,\n                               Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                               \\<langle>Ra \\<times>\\<^sub>r\n  Rb\\<rangle>list_rel\n 5. \\<And>n kvs t k v kvs' n' kvs'a.\n       \\<lbrakk>0 < n; n \\<le> Suc (length kvs);\n        \\<And>n' kvs'.\n           \\<lbrakk>(n, n') \\<in> nat_rel;\n            (kvs, kvs')\n            \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n           \\<Longrightarrow> (rbtreeify_g n kvs, rbtreeify_g n' kvs')\n                             \\<in> \\<langle>Ra,\n                                   Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                                   \\<langle>Ra \\<times>\\<^sub>r\n      Rb\\<rangle>list_rel;\n        rbtreeify_g n kvs = (t, (k, v) # kvs'); n \\<le> Suc (length kvs');\n        \\<And>n' kvs'a.\n           \\<lbrakk>(n, n') \\<in> nat_rel;\n            (kvs', kvs'a)\n            \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n           \\<Longrightarrow> (rbtreeify_g n kvs', rbtreeify_g n' kvs'a)\n                             \\<in> \\<langle>Ra,\n                                   Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                                   \\<langle>Ra \\<times>\\<^sub>r\n      Rb\\<rangle>list_rel;\n        (2 * n, n') \\<in> nat_rel;\n        (kvs, kvs'a)\n        \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n       \\<Longrightarrow> (rbtreeify_g (2 * n) kvs, rbtreeify_g n' kvs'a)\n                         \\<in> \\<langle>Ra,\n                               Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                               \\<langle>Ra \\<times>\\<^sub>r\n  Rb\\<rangle>list_rel\n 6. \\<And>n kvs t k v kvs' n' kvs'a.\n       \\<lbrakk>0 < n; n \\<le> length kvs;\n        \\<And>n' kvs'.\n           \\<lbrakk>(n, n') \\<in> nat_rel;\n            (kvs, kvs')\n            \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n           \\<Longrightarrow> (rbtreeify_f n kvs, rbtreeify_f n' kvs')\n                             \\<in> \\<langle>Ra,\n                                   Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                                   \\<langle>Ra \\<times>\\<^sub>r\n      Rb\\<rangle>list_rel;\n        rbtreeify_f n kvs = (t, (k, v) # kvs'); n \\<le> Suc (length kvs');\n        \\<And>n' kvs'a.\n           \\<lbrakk>(n, n') \\<in> nat_rel;\n            (kvs', kvs'a)\n            \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n           \\<Longrightarrow> (rbtreeify_g n kvs', rbtreeify_g n' kvs'a)\n                             \\<in> \\<langle>Ra,\n                                   Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                                   \\<langle>Ra \\<times>\\<^sub>r\n      Rb\\<rangle>list_rel;\n        (Suc (2 * n), n') \\<in> nat_rel;\n        (kvs, kvs'a)\n        \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n       \\<Longrightarrow> (rbtreeify_g (Suc (2 * n)) kvs,\n                          rbtreeify_g n' kvs'a)\n                         \\<in> \\<langle>Ra,\n                               Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                               \\<langle>Ra \\<times>\\<^sub>r\n  Rb\\<rangle>list_rel", "apply parametricity"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<And>n kvs kvs' kvs'a a a' xs' ab bb a'a b'a.\n       \\<lbrakk>0 < n; n \\<le> length kvs;\n        \\<And>n' kvs'.\n           \\<lbrakk>n = n';\n            (kvs, kvs')\n            \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n           \\<Longrightarrow> (rbtreeify_f n' kvs, rbtreeify_f n' kvs')\n                             \\<in> \\<langle>Ra,\n                                   Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                                   \\<langle>Ra \\<times>\\<^sub>r\n      Rb\\<rangle>list_rel;\n        rbtreeify_f n kvs = (a, (ab, bb) # kvs'); n \\<le> length kvs';\n        (kvs, kvs'a) \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel;\n        rbtreeify_f n kvs'a = (a', (a'a, b'a) # xs');\n        (a, a') \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel;\n        (kvs', xs') \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel;\n        (ab, a'a) \\<in> Ra; (bb, b'a) \\<in> Rb\\<rbrakk>\n       \\<Longrightarrow> n = n\n 2. \\<And>n kvs t k v kvs' kvs'a.\n       \\<lbrakk>0 < n; n \\<le> length kvs;\n        \\<And>n' kvs'.\n           \\<lbrakk>n = n';\n            (kvs, kvs')\n            \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n           \\<Longrightarrow> (rbtreeify_f n' kvs, rbtreeify_f n' kvs')\n                             \\<in> \\<langle>Ra,\n                                   Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                                   \\<langle>Ra \\<times>\\<^sub>r\n      Rb\\<rangle>list_rel;\n        rbtreeify_f n kvs = (t, (k, v) # kvs'); n \\<le> length kvs';\n        \\<And>n' kvs'a.\n           \\<lbrakk>n = n';\n            (kvs', kvs'a)\n            \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n           \\<Longrightarrow> (rbtreeify_f n' kvs', rbtreeify_f n' kvs'a)\n                             \\<in> \\<langle>Ra,\n                                   Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                                   \\<langle>Ra \\<times>\\<^sub>r\n      Rb\\<rangle>list_rel;\n        (kvs, kvs'a)\n        \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n       \\<Longrightarrow> (rbtreeify_f n kvs, rbtreeify_f n kvs'a)\n                         \\<in> \\<langle>Ra,\n                               Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                               \\<langle>Ra \\<times>\\<^sub>r\n  Rb\\<rangle>list_rel\n 3. \\<And>kvs n' kvs'.\n       \\<lbrakk>(0, n') \\<in> nat_rel;\n        (kvs, kvs')\n        \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n       \\<Longrightarrow> (rbtreeify_g 0 kvs, rbtreeify_g n' kvs')\n                         \\<in> \\<langle>Ra,\n                               Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                               \\<langle>Ra \\<times>\\<^sub>r\n  Rb\\<rangle>list_rel\n 4. \\<And>kvs n' kvs'.\n       \\<lbrakk>(Suc 0, n') \\<in> nat_rel;\n        (kvs, kvs')\n        \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n       \\<Longrightarrow> (rbtreeify_g (Suc 0) kvs, rbtreeify_g n' kvs')\n                         \\<in> \\<langle>Ra,\n                               Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                               \\<langle>Ra \\<times>\\<^sub>r\n  Rb\\<rangle>list_rel\n 5. \\<And>n kvs t k v kvs' n' kvs'a.\n       \\<lbrakk>0 < n; n \\<le> Suc (length kvs);\n        \\<And>n' kvs'.\n           \\<lbrakk>(n, n') \\<in> nat_rel;\n            (kvs, kvs')\n            \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n           \\<Longrightarrow> (rbtreeify_g n kvs, rbtreeify_g n' kvs')\n                             \\<in> \\<langle>Ra,\n                                   Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                                   \\<langle>Ra \\<times>\\<^sub>r\n      Rb\\<rangle>list_rel;\n        rbtreeify_g n kvs = (t, (k, v) # kvs'); n \\<le> Suc (length kvs');\n        \\<And>n' kvs'a.\n           \\<lbrakk>(n, n') \\<in> nat_rel;\n            (kvs', kvs'a)\n            \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n           \\<Longrightarrow> (rbtreeify_g n kvs', rbtreeify_g n' kvs'a)\n                             \\<in> \\<langle>Ra,\n                                   Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                                   \\<langle>Ra \\<times>\\<^sub>r\n      Rb\\<rangle>list_rel;\n        (2 * n, n') \\<in> nat_rel;\n        (kvs, kvs'a)\n        \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n       \\<Longrightarrow> (rbtreeify_g (2 * n) kvs, rbtreeify_g n' kvs'a)\n                         \\<in> \\<langle>Ra,\n                               Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                               \\<langle>Ra \\<times>\\<^sub>r\n  Rb\\<rangle>list_rel\n 6. \\<And>n kvs t k v kvs' n' kvs'a.\n       \\<lbrakk>0 < n; n \\<le> length kvs;\n        \\<And>n' kvs'.\n           \\<lbrakk>(n, n') \\<in> nat_rel;\n            (kvs, kvs')\n            \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n           \\<Longrightarrow> (rbtreeify_f n kvs, rbtreeify_f n' kvs')\n                             \\<in> \\<langle>Ra,\n                                   Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                                   \\<langle>Ra \\<times>\\<^sub>r\n      Rb\\<rangle>list_rel;\n        rbtreeify_f n kvs = (t, (k, v) # kvs'); n \\<le> Suc (length kvs');\n        \\<And>n' kvs'a.\n           \\<lbrakk>(n, n') \\<in> nat_rel;\n            (kvs', kvs'a)\n            \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n           \\<Longrightarrow> (rbtreeify_g n kvs', rbtreeify_g n' kvs'a)\n                             \\<in> \\<langle>Ra,\n                                   Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                                   \\<langle>Ra \\<times>\\<^sub>r\n      Rb\\<rangle>list_rel;\n        (Suc (2 * n), n') \\<in> nat_rel;\n        (kvs, kvs'a)\n        \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n       \\<Longrightarrow> (rbtreeify_g (Suc (2 * n)) kvs,\n                          rbtreeify_g n' kvs'a)\n                         \\<in> \\<langle>Ra,\n                               Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                               \\<langle>Ra \\<times>\\<^sub>r\n  Rb\\<rangle>list_rel", "apply (rule refl)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>n kvs t k v kvs' kvs'a.\n       \\<lbrakk>0 < n; n \\<le> length kvs;\n        \\<And>n' kvs'.\n           \\<lbrakk>n = n';\n            (kvs, kvs')\n            \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n           \\<Longrightarrow> (rbtreeify_f n' kvs, rbtreeify_f n' kvs')\n                             \\<in> \\<langle>Ra,\n                                   Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                                   \\<langle>Ra \\<times>\\<^sub>r\n      Rb\\<rangle>list_rel;\n        rbtreeify_f n kvs = (t, (k, v) # kvs'); n \\<le> length kvs';\n        \\<And>n' kvs'a.\n           \\<lbrakk>n = n';\n            (kvs', kvs'a)\n            \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n           \\<Longrightarrow> (rbtreeify_f n' kvs', rbtreeify_f n' kvs'a)\n                             \\<in> \\<langle>Ra,\n                                   Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                                   \\<langle>Ra \\<times>\\<^sub>r\n      Rb\\<rangle>list_rel;\n        (kvs, kvs'a)\n        \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n       \\<Longrightarrow> (rbtreeify_f n kvs, rbtreeify_f n kvs'a)\n                         \\<in> \\<langle>Ra,\n                               Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                               \\<langle>Ra \\<times>\\<^sub>r\n  Rb\\<rangle>list_rel\n 2. \\<And>kvs n' kvs'.\n       \\<lbrakk>(0, n') \\<in> nat_rel;\n        (kvs, kvs')\n        \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n       \\<Longrightarrow> (rbtreeify_g 0 kvs, rbtreeify_g n' kvs')\n                         \\<in> \\<langle>Ra,\n                               Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                               \\<langle>Ra \\<times>\\<^sub>r\n  Rb\\<rangle>list_rel\n 3. \\<And>kvs n' kvs'.\n       \\<lbrakk>(Suc 0, n') \\<in> nat_rel;\n        (kvs, kvs')\n        \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n       \\<Longrightarrow> (rbtreeify_g (Suc 0) kvs, rbtreeify_g n' kvs')\n                         \\<in> \\<langle>Ra,\n                               Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                               \\<langle>Ra \\<times>\\<^sub>r\n  Rb\\<rangle>list_rel\n 4. \\<And>n kvs t k v kvs' n' kvs'a.\n       \\<lbrakk>0 < n; n \\<le> Suc (length kvs);\n        \\<And>n' kvs'.\n           \\<lbrakk>(n, n') \\<in> nat_rel;\n            (kvs, kvs')\n            \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n           \\<Longrightarrow> (rbtreeify_g n kvs, rbtreeify_g n' kvs')\n                             \\<in> \\<langle>Ra,\n                                   Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                                   \\<langle>Ra \\<times>\\<^sub>r\n      Rb\\<rangle>list_rel;\n        rbtreeify_g n kvs = (t, (k, v) # kvs'); n \\<le> Suc (length kvs');\n        \\<And>n' kvs'a.\n           \\<lbrakk>(n, n') \\<in> nat_rel;\n            (kvs', kvs'a)\n            \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n           \\<Longrightarrow> (rbtreeify_g n kvs', rbtreeify_g n' kvs'a)\n                             \\<in> \\<langle>Ra,\n                                   Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                                   \\<langle>Ra \\<times>\\<^sub>r\n      Rb\\<rangle>list_rel;\n        (2 * n, n') \\<in> nat_rel;\n        (kvs, kvs'a)\n        \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n       \\<Longrightarrow> (rbtreeify_g (2 * n) kvs, rbtreeify_g n' kvs'a)\n                         \\<in> \\<langle>Ra,\n                               Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                               \\<langle>Ra \\<times>\\<^sub>r\n  Rb\\<rangle>list_rel\n 5. \\<And>n kvs t k v kvs' n' kvs'a.\n       \\<lbrakk>0 < n; n \\<le> length kvs;\n        \\<And>n' kvs'.\n           \\<lbrakk>(n, n') \\<in> nat_rel;\n            (kvs, kvs')\n            \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n           \\<Longrightarrow> (rbtreeify_f n kvs, rbtreeify_f n' kvs')\n                             \\<in> \\<langle>Ra,\n                                   Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                                   \\<langle>Ra \\<times>\\<^sub>r\n      Rb\\<rangle>list_rel;\n        rbtreeify_f n kvs = (t, (k, v) # kvs'); n \\<le> Suc (length kvs');\n        \\<And>n' kvs'a.\n           \\<lbrakk>(n, n') \\<in> nat_rel;\n            (kvs', kvs'a)\n            \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n           \\<Longrightarrow> (rbtreeify_g n kvs', rbtreeify_g n' kvs'a)\n                             \\<in> \\<langle>Ra,\n                                   Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                                   \\<langle>Ra \\<times>\\<^sub>r\n      Rb\\<rangle>list_rel;\n        (Suc (2 * n), n') \\<in> nat_rel;\n        (kvs, kvs'a)\n        \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n       \\<Longrightarrow> (rbtreeify_g (Suc (2 * n)) kvs,\n                          rbtreeify_g n' kvs'a)\n                         \\<in> \\<langle>Ra,\n                               Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                               \\<langle>Ra \\<times>\\<^sub>r\n  Rb\\<rangle>list_rel", "apply rprems"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<And>n kvs t k v kvs' kvs'a.\n       \\<lbrakk>0 < n; n \\<le> length kvs;\n        rbtreeify_f n kvs = (t, (k, v) # kvs'); n \\<le> length kvs';\n        \\<And>n' kvs'a.\n           \\<lbrakk>n = n';\n            (kvs', kvs'a)\n            \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n           \\<Longrightarrow> (rbtreeify_f n' kvs', rbtreeify_f n' kvs'a)\n                             \\<in> \\<langle>Ra,\n                                   Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                                   \\<langle>Ra \\<times>\\<^sub>r\n      Rb\\<rangle>list_rel;\n        (kvs, kvs'a)\n        \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n       \\<Longrightarrow> n = n\n 2. \\<And>n kvs t k v kvs' kvs'a.\n       \\<lbrakk>0 < n; n \\<le> length kvs;\n        rbtreeify_f n kvs = (t, (k, v) # kvs'); n \\<le> length kvs';\n        \\<And>n' kvs'a.\n           \\<lbrakk>n = n';\n            (kvs', kvs'a)\n            \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n           \\<Longrightarrow> (rbtreeify_f n' kvs', rbtreeify_f n' kvs'a)\n                             \\<in> \\<langle>Ra,\n                                   Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                                   \\<langle>Ra \\<times>\\<^sub>r\n      Rb\\<rangle>list_rel;\n        (kvs, kvs'a)\n        \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n       \\<Longrightarrow> (kvs, kvs'a)\n                         \\<in> \\<langle>Ra \\<times>\\<^sub>r\n  Rb\\<rangle>list_rel\n 3. \\<And>kvs n' kvs'.\n       \\<lbrakk>(0, n') \\<in> nat_rel;\n        (kvs, kvs')\n        \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n       \\<Longrightarrow> (rbtreeify_g 0 kvs, rbtreeify_g n' kvs')\n                         \\<in> \\<langle>Ra,\n                               Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                               \\<langle>Ra \\<times>\\<^sub>r\n  Rb\\<rangle>list_rel\n 4. \\<And>kvs n' kvs'.\n       \\<lbrakk>(Suc 0, n') \\<in> nat_rel;\n        (kvs, kvs')\n        \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n       \\<Longrightarrow> (rbtreeify_g (Suc 0) kvs, rbtreeify_g n' kvs')\n                         \\<in> \\<langle>Ra,\n                               Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                               \\<langle>Ra \\<times>\\<^sub>r\n  Rb\\<rangle>list_rel\n 5. \\<And>n kvs t k v kvs' n' kvs'a.\n       \\<lbrakk>0 < n; n \\<le> Suc (length kvs);\n        \\<And>n' kvs'.\n           \\<lbrakk>(n, n') \\<in> nat_rel;\n            (kvs, kvs')\n            \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n           \\<Longrightarrow> (rbtreeify_g n kvs, rbtreeify_g n' kvs')\n                             \\<in> \\<langle>Ra,\n                                   Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                                   \\<langle>Ra \\<times>\\<^sub>r\n      Rb\\<rangle>list_rel;\n        rbtreeify_g n kvs = (t, (k, v) # kvs'); n \\<le> Suc (length kvs');\n        \\<And>n' kvs'a.\n           \\<lbrakk>(n, n') \\<in> nat_rel;\n            (kvs', kvs'a)\n            \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n           \\<Longrightarrow> (rbtreeify_g n kvs', rbtreeify_g n' kvs'a)\n                             \\<in> \\<langle>Ra,\n                                   Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                                   \\<langle>Ra \\<times>\\<^sub>r\n      Rb\\<rangle>list_rel;\n        (2 * n, n') \\<in> nat_rel;\n        (kvs, kvs'a)\n        \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n       \\<Longrightarrow> (rbtreeify_g (2 * n) kvs, rbtreeify_g n' kvs'a)\n                         \\<in> \\<langle>Ra,\n                               Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                               \\<langle>Ra \\<times>\\<^sub>r\n  Rb\\<rangle>list_rel\n 6. \\<And>n kvs t k v kvs' n' kvs'a.\n       \\<lbrakk>0 < n; n \\<le> length kvs;\n        \\<And>n' kvs'.\n           \\<lbrakk>(n, n') \\<in> nat_rel;\n            (kvs, kvs')\n            \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n           \\<Longrightarrow> (rbtreeify_f n kvs, rbtreeify_f n' kvs')\n                             \\<in> \\<langle>Ra,\n                                   Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                                   \\<langle>Ra \\<times>\\<^sub>r\n      Rb\\<rangle>list_rel;\n        rbtreeify_f n kvs = (t, (k, v) # kvs'); n \\<le> Suc (length kvs');\n        \\<And>n' kvs'a.\n           \\<lbrakk>(n, n') \\<in> nat_rel;\n            (kvs', kvs'a)\n            \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n           \\<Longrightarrow> (rbtreeify_g n kvs', rbtreeify_g n' kvs'a)\n                             \\<in> \\<langle>Ra,\n                                   Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                                   \\<langle>Ra \\<times>\\<^sub>r\n      Rb\\<rangle>list_rel;\n        (Suc (2 * n), n') \\<in> nat_rel;\n        (kvs, kvs'a)\n        \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n       \\<Longrightarrow> (rbtreeify_g (Suc (2 * n)) kvs,\n                          rbtreeify_g n' kvs'a)\n                         \\<in> \\<langle>Ra,\n                               Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                               \\<langle>Ra \\<times>\\<^sub>r\n  Rb\\<rangle>list_rel", "apply (rule refl)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>n kvs t k v kvs' kvs'a.\n       \\<lbrakk>0 < n; n \\<le> length kvs;\n        rbtreeify_f n kvs = (t, (k, v) # kvs'); n \\<le> length kvs';\n        \\<And>n' kvs'a.\n           \\<lbrakk>n = n';\n            (kvs', kvs'a)\n            \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n           \\<Longrightarrow> (rbtreeify_f n' kvs', rbtreeify_f n' kvs'a)\n                             \\<in> \\<langle>Ra,\n                                   Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                                   \\<langle>Ra \\<times>\\<^sub>r\n      Rb\\<rangle>list_rel;\n        (kvs, kvs'a)\n        \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n       \\<Longrightarrow> (kvs, kvs'a)\n                         \\<in> \\<langle>Ra \\<times>\\<^sub>r\n  Rb\\<rangle>list_rel\n 2. \\<And>kvs n' kvs'.\n       \\<lbrakk>(0, n') \\<in> nat_rel;\n        (kvs, kvs')\n        \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n       \\<Longrightarrow> (rbtreeify_g 0 kvs, rbtreeify_g n' kvs')\n                         \\<in> \\<langle>Ra,\n                               Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                               \\<langle>Ra \\<times>\\<^sub>r\n  Rb\\<rangle>list_rel\n 3. \\<And>kvs n' kvs'.\n       \\<lbrakk>(Suc 0, n') \\<in> nat_rel;\n        (kvs, kvs')\n        \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n       \\<Longrightarrow> (rbtreeify_g (Suc 0) kvs, rbtreeify_g n' kvs')\n                         \\<in> \\<langle>Ra,\n                               Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                               \\<langle>Ra \\<times>\\<^sub>r\n  Rb\\<rangle>list_rel\n 4. \\<And>n kvs t k v kvs' n' kvs'a.\n       \\<lbrakk>0 < n; n \\<le> Suc (length kvs);\n        \\<And>n' kvs'.\n           \\<lbrakk>(n, n') \\<in> nat_rel;\n            (kvs, kvs')\n            \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n           \\<Longrightarrow> (rbtreeify_g n kvs, rbtreeify_g n' kvs')\n                             \\<in> \\<langle>Ra,\n                                   Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                                   \\<langle>Ra \\<times>\\<^sub>r\n      Rb\\<rangle>list_rel;\n        rbtreeify_g n kvs = (t, (k, v) # kvs'); n \\<le> Suc (length kvs');\n        \\<And>n' kvs'a.\n           \\<lbrakk>(n, n') \\<in> nat_rel;\n            (kvs', kvs'a)\n            \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n           \\<Longrightarrow> (rbtreeify_g n kvs', rbtreeify_g n' kvs'a)\n                             \\<in> \\<langle>Ra,\n                                   Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                                   \\<langle>Ra \\<times>\\<^sub>r\n      Rb\\<rangle>list_rel;\n        (2 * n, n') \\<in> nat_rel;\n        (kvs, kvs'a)\n        \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n       \\<Longrightarrow> (rbtreeify_g (2 * n) kvs, rbtreeify_g n' kvs'a)\n                         \\<in> \\<langle>Ra,\n                               Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                               \\<langle>Ra \\<times>\\<^sub>r\n  Rb\\<rangle>list_rel\n 5. \\<And>n kvs t k v kvs' n' kvs'a.\n       \\<lbrakk>0 < n; n \\<le> length kvs;\n        \\<And>n' kvs'.\n           \\<lbrakk>(n, n') \\<in> nat_rel;\n            (kvs, kvs')\n            \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n           \\<Longrightarrow> (rbtreeify_f n kvs, rbtreeify_f n' kvs')\n                             \\<in> \\<langle>Ra,\n                                   Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                                   \\<langle>Ra \\<times>\\<^sub>r\n      Rb\\<rangle>list_rel;\n        rbtreeify_f n kvs = (t, (k, v) # kvs'); n \\<le> Suc (length kvs');\n        \\<And>n' kvs'a.\n           \\<lbrakk>(n, n') \\<in> nat_rel;\n            (kvs', kvs'a)\n            \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n           \\<Longrightarrow> (rbtreeify_g n kvs', rbtreeify_g n' kvs'a)\n                             \\<in> \\<langle>Ra,\n                                   Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                                   \\<langle>Ra \\<times>\\<^sub>r\n      Rb\\<rangle>list_rel;\n        (Suc (2 * n), n') \\<in> nat_rel;\n        (kvs, kvs'a)\n        \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n       \\<Longrightarrow> (rbtreeify_g (Suc (2 * n)) kvs,\n                          rbtreeify_g n' kvs'a)\n                         \\<in> \\<langle>Ra,\n                               Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                               \\<langle>Ra \\<times>\\<^sub>r\n  Rb\\<rangle>list_rel", "apply assumption"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>kvs n' kvs'.\n       \\<lbrakk>(0, n') \\<in> nat_rel;\n        (kvs, kvs')\n        \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n       \\<Longrightarrow> (rbtreeify_g 0 kvs, rbtreeify_g n' kvs')\n                         \\<in> \\<langle>Ra,\n                               Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                               \\<langle>Ra \\<times>\\<^sub>r\n  Rb\\<rangle>list_rel\n 2. \\<And>kvs n' kvs'.\n       \\<lbrakk>(Suc 0, n') \\<in> nat_rel;\n        (kvs, kvs')\n        \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n       \\<Longrightarrow> (rbtreeify_g (Suc 0) kvs, rbtreeify_g n' kvs')\n                         \\<in> \\<langle>Ra,\n                               Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                               \\<langle>Ra \\<times>\\<^sub>r\n  Rb\\<rangle>list_rel\n 3. \\<And>n kvs t k v kvs' n' kvs'a.\n       \\<lbrakk>0 < n; n \\<le> Suc (length kvs);\n        \\<And>n' kvs'.\n           \\<lbrakk>(n, n') \\<in> nat_rel;\n            (kvs, kvs')\n            \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n           \\<Longrightarrow> (rbtreeify_g n kvs, rbtreeify_g n' kvs')\n                             \\<in> \\<langle>Ra,\n                                   Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                                   \\<langle>Ra \\<times>\\<^sub>r\n      Rb\\<rangle>list_rel;\n        rbtreeify_g n kvs = (t, (k, v) # kvs'); n \\<le> Suc (length kvs');\n        \\<And>n' kvs'a.\n           \\<lbrakk>(n, n') \\<in> nat_rel;\n            (kvs', kvs'a)\n            \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n           \\<Longrightarrow> (rbtreeify_g n kvs', rbtreeify_g n' kvs'a)\n                             \\<in> \\<langle>Ra,\n                                   Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                                   \\<langle>Ra \\<times>\\<^sub>r\n      Rb\\<rangle>list_rel;\n        (2 * n, n') \\<in> nat_rel;\n        (kvs, kvs'a)\n        \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n       \\<Longrightarrow> (rbtreeify_g (2 * n) kvs, rbtreeify_g n' kvs'a)\n                         \\<in> \\<langle>Ra,\n                               Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                               \\<langle>Ra \\<times>\\<^sub>r\n  Rb\\<rangle>list_rel\n 4. \\<And>n kvs t k v kvs' n' kvs'a.\n       \\<lbrakk>0 < n; n \\<le> length kvs;\n        \\<And>n' kvs'.\n           \\<lbrakk>(n, n') \\<in> nat_rel;\n            (kvs, kvs')\n            \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n           \\<Longrightarrow> (rbtreeify_f n kvs, rbtreeify_f n' kvs')\n                             \\<in> \\<langle>Ra,\n                                   Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                                   \\<langle>Ra \\<times>\\<^sub>r\n      Rb\\<rangle>list_rel;\n        rbtreeify_f n kvs = (t, (k, v) # kvs'); n \\<le> Suc (length kvs');\n        \\<And>n' kvs'a.\n           \\<lbrakk>(n, n') \\<in> nat_rel;\n            (kvs', kvs'a)\n            \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n           \\<Longrightarrow> (rbtreeify_g n kvs', rbtreeify_g n' kvs'a)\n                             \\<in> \\<langle>Ra,\n                                   Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                                   \\<langle>Ra \\<times>\\<^sub>r\n      Rb\\<rangle>list_rel;\n        (Suc (2 * n), n') \\<in> nat_rel;\n        (kvs, kvs'a)\n        \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n       \\<Longrightarrow> (rbtreeify_g (Suc (2 * n)) kvs,\n                          rbtreeify_g n' kvs'a)\n                         \\<in> \\<langle>Ra,\n                               Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                               \\<langle>Ra \\<times>\\<^sub>r\n  Rb\\<rangle>list_rel", "apply simp"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>kvs n' kvs'.\n       \\<lbrakk>n' = 0;\n        (kvs, kvs')\n        \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n       \\<Longrightarrow> (rbt.Empty, rbt.Empty) \\<in> \\<langle>Ra,\n                         Rb\\<rangle>rbt_rel\n 2. \\<And>kvs n' kvs'.\n       \\<lbrakk>(Suc 0, n') \\<in> nat_rel;\n        (kvs, kvs')\n        \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n       \\<Longrightarrow> (rbtreeify_g (Suc 0) kvs, rbtreeify_g n' kvs')\n                         \\<in> \\<langle>Ra,\n                               Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                               \\<langle>Ra \\<times>\\<^sub>r\n  Rb\\<rangle>list_rel\n 3. \\<And>n kvs t k v kvs' n' kvs'a.\n       \\<lbrakk>0 < n; n \\<le> Suc (length kvs);\n        \\<And>n' kvs'.\n           \\<lbrakk>(n, n') \\<in> nat_rel;\n            (kvs, kvs')\n            \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n           \\<Longrightarrow> (rbtreeify_g n kvs, rbtreeify_g n' kvs')\n                             \\<in> \\<langle>Ra,\n                                   Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                                   \\<langle>Ra \\<times>\\<^sub>r\n      Rb\\<rangle>list_rel;\n        rbtreeify_g n kvs = (t, (k, v) # kvs'); n \\<le> Suc (length kvs');\n        \\<And>n' kvs'a.\n           \\<lbrakk>(n, n') \\<in> nat_rel;\n            (kvs', kvs'a)\n            \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n           \\<Longrightarrow> (rbtreeify_g n kvs', rbtreeify_g n' kvs'a)\n                             \\<in> \\<langle>Ra,\n                                   Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                                   \\<langle>Ra \\<times>\\<^sub>r\n      Rb\\<rangle>list_rel;\n        (2 * n, n') \\<in> nat_rel;\n        (kvs, kvs'a)\n        \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n       \\<Longrightarrow> (rbtreeify_g (2 * n) kvs, rbtreeify_g n' kvs'a)\n                         \\<in> \\<langle>Ra,\n                               Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                               \\<langle>Ra \\<times>\\<^sub>r\n  Rb\\<rangle>list_rel\n 4. \\<And>n kvs t k v kvs' n' kvs'a.\n       \\<lbrakk>0 < n; n \\<le> length kvs;\n        \\<And>n' kvs'.\n           \\<lbrakk>(n, n') \\<in> nat_rel;\n            (kvs, kvs')\n            \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n           \\<Longrightarrow> (rbtreeify_f n kvs, rbtreeify_f n' kvs')\n                             \\<in> \\<langle>Ra,\n                                   Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                                   \\<langle>Ra \\<times>\\<^sub>r\n      Rb\\<rangle>list_rel;\n        rbtreeify_f n kvs = (t, (k, v) # kvs'); n \\<le> Suc (length kvs');\n        \\<And>n' kvs'a.\n           \\<lbrakk>(n, n') \\<in> nat_rel;\n            (kvs', kvs'a)\n            \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n           \\<Longrightarrow> (rbtreeify_g n kvs', rbtreeify_g n' kvs'a)\n                             \\<in> \\<langle>Ra,\n                                   Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                                   \\<langle>Ra \\<times>\\<^sub>r\n      Rb\\<rangle>list_rel;\n        (Suc (2 * n), n') \\<in> nat_rel;\n        (kvs, kvs'a)\n        \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n       \\<Longrightarrow> (rbtreeify_g (Suc (2 * n)) kvs,\n                          rbtreeify_g n' kvs'a)\n                         \\<in> \\<langle>Ra,\n                               Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                               \\<langle>Ra \\<times>\\<^sub>r\n  Rb\\<rangle>list_rel", "apply parametricity"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>kvs n' kvs'.\n       \\<lbrakk>(Suc 0, n') \\<in> nat_rel;\n        (kvs, kvs')\n        \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n       \\<Longrightarrow> (rbtreeify_g (Suc 0) kvs, rbtreeify_g n' kvs')\n                         \\<in> \\<langle>Ra,\n                               Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                               \\<langle>Ra \\<times>\\<^sub>r\n  Rb\\<rangle>list_rel\n 2. \\<And>n kvs t k v kvs' n' kvs'a.\n       \\<lbrakk>0 < n; n \\<le> Suc (length kvs);\n        \\<And>n' kvs'.\n           \\<lbrakk>(n, n') \\<in> nat_rel;\n            (kvs, kvs')\n            \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n           \\<Longrightarrow> (rbtreeify_g n kvs, rbtreeify_g n' kvs')\n                             \\<in> \\<langle>Ra,\n                                   Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                                   \\<langle>Ra \\<times>\\<^sub>r\n      Rb\\<rangle>list_rel;\n        rbtreeify_g n kvs = (t, (k, v) # kvs'); n \\<le> Suc (length kvs');\n        \\<And>n' kvs'a.\n           \\<lbrakk>(n, n') \\<in> nat_rel;\n            (kvs', kvs'a)\n            \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n           \\<Longrightarrow> (rbtreeify_g n kvs', rbtreeify_g n' kvs'a)\n                             \\<in> \\<langle>Ra,\n                                   Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                                   \\<langle>Ra \\<times>\\<^sub>r\n      Rb\\<rangle>list_rel;\n        (2 * n, n') \\<in> nat_rel;\n        (kvs, kvs'a)\n        \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n       \\<Longrightarrow> (rbtreeify_g (2 * n) kvs, rbtreeify_g n' kvs'a)\n                         \\<in> \\<langle>Ra,\n                               Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                               \\<langle>Ra \\<times>\\<^sub>r\n  Rb\\<rangle>list_rel\n 3. \\<And>n kvs t k v kvs' n' kvs'a.\n       \\<lbrakk>0 < n; n \\<le> length kvs;\n        \\<And>n' kvs'.\n           \\<lbrakk>(n, n') \\<in> nat_rel;\n            (kvs, kvs')\n            \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n           \\<Longrightarrow> (rbtreeify_f n kvs, rbtreeify_f n' kvs')\n                             \\<in> \\<langle>Ra,\n                                   Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                                   \\<langle>Ra \\<times>\\<^sub>r\n      Rb\\<rangle>list_rel;\n        rbtreeify_f n kvs = (t, (k, v) # kvs'); n \\<le> Suc (length kvs');\n        \\<And>n' kvs'a.\n           \\<lbrakk>(n, n') \\<in> nat_rel;\n            (kvs', kvs'a)\n            \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n           \\<Longrightarrow> (rbtreeify_g n kvs', rbtreeify_g n' kvs'a)\n                             \\<in> \\<langle>Ra,\n                                   Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                                   \\<langle>Ra \\<times>\\<^sub>r\n      Rb\\<rangle>list_rel;\n        (Suc (2 * n), n') \\<in> nat_rel;\n        (kvs, kvs'a)\n        \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n       \\<Longrightarrow> (rbtreeify_g (Suc (2 * n)) kvs,\n                          rbtreeify_g n' kvs'a)\n                         \\<in> \\<langle>Ra,\n                               Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                               \\<langle>Ra \\<times>\\<^sub>r\n  Rb\\<rangle>list_rel", "apply clarsimp"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>kvs kvs'.\n       (kvs, kvs')\n       \\<in> \\<langle>Ra \\<times>\\<^sub>r\n                      Rb\\<rangle>list_rel \\<Longrightarrow>\n       (rbt.Empty, rbt.Empty) \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel\n 2. \\<And>n kvs t k v kvs' n' kvs'a.\n       \\<lbrakk>0 < n; n \\<le> Suc (length kvs);\n        \\<And>n' kvs'.\n           \\<lbrakk>(n, n') \\<in> nat_rel;\n            (kvs, kvs')\n            \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n           \\<Longrightarrow> (rbtreeify_g n kvs, rbtreeify_g n' kvs')\n                             \\<in> \\<langle>Ra,\n                                   Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                                   \\<langle>Ra \\<times>\\<^sub>r\n      Rb\\<rangle>list_rel;\n        rbtreeify_g n kvs = (t, (k, v) # kvs'); n \\<le> Suc (length kvs');\n        \\<And>n' kvs'a.\n           \\<lbrakk>(n, n') \\<in> nat_rel;\n            (kvs', kvs'a)\n            \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n           \\<Longrightarrow> (rbtreeify_g n kvs', rbtreeify_g n' kvs'a)\n                             \\<in> \\<langle>Ra,\n                                   Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                                   \\<langle>Ra \\<times>\\<^sub>r\n      Rb\\<rangle>list_rel;\n        (2 * n, n') \\<in> nat_rel;\n        (kvs, kvs'a)\n        \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n       \\<Longrightarrow> (rbtreeify_g (2 * n) kvs, rbtreeify_g n' kvs'a)\n                         \\<in> \\<langle>Ra,\n                               Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                               \\<langle>Ra \\<times>\\<^sub>r\n  Rb\\<rangle>list_rel\n 3. \\<And>n kvs t k v kvs' n' kvs'a.\n       \\<lbrakk>0 < n; n \\<le> length kvs;\n        \\<And>n' kvs'.\n           \\<lbrakk>(n, n') \\<in> nat_rel;\n            (kvs, kvs')\n            \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n           \\<Longrightarrow> (rbtreeify_f n kvs, rbtreeify_f n' kvs')\n                             \\<in> \\<langle>Ra,\n                                   Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                                   \\<langle>Ra \\<times>\\<^sub>r\n      Rb\\<rangle>list_rel;\n        rbtreeify_f n kvs = (t, (k, v) # kvs'); n \\<le> Suc (length kvs');\n        \\<And>n' kvs'a.\n           \\<lbrakk>(n, n') \\<in> nat_rel;\n            (kvs', kvs'a)\n            \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n           \\<Longrightarrow> (rbtreeify_g n kvs', rbtreeify_g n' kvs'a)\n                             \\<in> \\<langle>Ra,\n                                   Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                                   \\<langle>Ra \\<times>\\<^sub>r\n      Rb\\<rangle>list_rel;\n        (Suc (2 * n), n') \\<in> nat_rel;\n        (kvs, kvs'a)\n        \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n       \\<Longrightarrow> (rbtreeify_g (Suc (2 * n)) kvs,\n                          rbtreeify_g n' kvs'a)\n                         \\<in> \\<langle>Ra,\n                               Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                               \\<langle>Ra \\<times>\\<^sub>r\n  Rb\\<rangle>list_rel", "apply parametricity"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>n kvs t k v kvs' n' kvs'a.\n       \\<lbrakk>0 < n; n \\<le> Suc (length kvs);\n        \\<And>n' kvs'.\n           \\<lbrakk>(n, n') \\<in> nat_rel;\n            (kvs, kvs')\n            \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n           \\<Longrightarrow> (rbtreeify_g n kvs, rbtreeify_g n' kvs')\n                             \\<in> \\<langle>Ra,\n                                   Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                                   \\<langle>Ra \\<times>\\<^sub>r\n      Rb\\<rangle>list_rel;\n        rbtreeify_g n kvs = (t, (k, v) # kvs'); n \\<le> Suc (length kvs');\n        \\<And>n' kvs'a.\n           \\<lbrakk>(n, n') \\<in> nat_rel;\n            (kvs', kvs'a)\n            \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n           \\<Longrightarrow> (rbtreeify_g n kvs', rbtreeify_g n' kvs'a)\n                             \\<in> \\<langle>Ra,\n                                   Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                                   \\<langle>Ra \\<times>\\<^sub>r\n      Rb\\<rangle>list_rel;\n        (2 * n, n') \\<in> nat_rel;\n        (kvs, kvs'a)\n        \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n       \\<Longrightarrow> (rbtreeify_g (2 * n) kvs, rbtreeify_g n' kvs'a)\n                         \\<in> \\<langle>Ra,\n                               Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                               \\<langle>Ra \\<times>\\<^sub>r\n  Rb\\<rangle>list_rel\n 2. \\<And>n kvs t k v kvs' n' kvs'a.\n       \\<lbrakk>0 < n; n \\<le> length kvs;\n        \\<And>n' kvs'.\n           \\<lbrakk>(n, n') \\<in> nat_rel;\n            (kvs, kvs')\n            \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n           \\<Longrightarrow> (rbtreeify_f n kvs, rbtreeify_f n' kvs')\n                             \\<in> \\<langle>Ra,\n                                   Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                                   \\<langle>Ra \\<times>\\<^sub>r\n      Rb\\<rangle>list_rel;\n        rbtreeify_f n kvs = (t, (k, v) # kvs'); n \\<le> Suc (length kvs');\n        \\<And>n' kvs'a.\n           \\<lbrakk>(n, n') \\<in> nat_rel;\n            (kvs', kvs'a)\n            \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n           \\<Longrightarrow> (rbtreeify_g n kvs', rbtreeify_g n' kvs'a)\n                             \\<in> \\<langle>Ra,\n                                   Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                                   \\<langle>Ra \\<times>\\<^sub>r\n      Rb\\<rangle>list_rel;\n        (Suc (2 * n), n') \\<in> nat_rel;\n        (kvs, kvs'a)\n        \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n       \\<Longrightarrow> (rbtreeify_g (Suc (2 * n)) kvs,\n                          rbtreeify_g n' kvs'a)\n                         \\<in> \\<langle>Ra,\n                               Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                               \\<langle>Ra \\<times>\\<^sub>r\n  Rb\\<rangle>list_rel", "apply clarsimp"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>n kvs t k v kvs' kvs'a.\n       \\<lbrakk>0 < n; n \\<le> Suc (length kvs);\n        \\<And>n' kvs'.\n           \\<lbrakk>n = n';\n            (kvs, kvs')\n            \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n           \\<Longrightarrow> (rbtreeify_g n' kvs, rbtreeify_g n' kvs')\n                             \\<in> \\<langle>Ra,\n                                   Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                                   \\<langle>Ra \\<times>\\<^sub>r\n      Rb\\<rangle>list_rel;\n        rbtreeify_g n kvs = (t, (k, v) # kvs'); n \\<le> Suc (length kvs');\n        \\<And>n' kvs'a.\n           \\<lbrakk>n = n';\n            (kvs', kvs'a)\n            \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n           \\<Longrightarrow> (rbtreeify_g n' kvs', rbtreeify_g n' kvs'a)\n                             \\<in> \\<langle>Ra,\n                                   Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                                   \\<langle>Ra \\<times>\\<^sub>r\n      Rb\\<rangle>list_rel;\n        (kvs, kvs'a)\n        \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n       \\<Longrightarrow> (apfst (Branch color.B t k v) (rbtreeify_g n kvs'),\n                          case rbtreeify_g n kvs'a of\n                          (t1, (k, v) # kvs') \\<Rightarrow>\n                            apfst (Branch color.B t1 k v)\n                             (rbtreeify_g n kvs'))\n                         \\<in> \\<langle>Ra,\n                               Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                               \\<langle>Ra \\<times>\\<^sub>r\n  Rb\\<rangle>list_rel\n 2. \\<And>n kvs t k v kvs' n' kvs'a.\n       \\<lbrakk>0 < n; n \\<le> length kvs;\n        \\<And>n' kvs'.\n           \\<lbrakk>(n, n') \\<in> nat_rel;\n            (kvs, kvs')\n            \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n           \\<Longrightarrow> (rbtreeify_f n kvs, rbtreeify_f n' kvs')\n                             \\<in> \\<langle>Ra,\n                                   Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                                   \\<langle>Ra \\<times>\\<^sub>r\n      Rb\\<rangle>list_rel;\n        rbtreeify_f n kvs = (t, (k, v) # kvs'); n \\<le> Suc (length kvs');\n        \\<And>n' kvs'a.\n           \\<lbrakk>(n, n') \\<in> nat_rel;\n            (kvs', kvs'a)\n            \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n           \\<Longrightarrow> (rbtreeify_g n kvs', rbtreeify_g n' kvs'a)\n                             \\<in> \\<langle>Ra,\n                                   Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                                   \\<langle>Ra \\<times>\\<^sub>r\n      Rb\\<rangle>list_rel;\n        (Suc (2 * n), n') \\<in> nat_rel;\n        (kvs, kvs'a)\n        \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n       \\<Longrightarrow> (rbtreeify_g (Suc (2 * n)) kvs,\n                          rbtreeify_g n' kvs'a)\n                         \\<in> \\<langle>Ra,\n                               Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                               \\<langle>Ra \\<times>\\<^sub>r\n  Rb\\<rangle>list_rel", "apply (subgoal_tac \"(rbtreeify_g n kvs, rbtreeify_g n kvs'a) \n      \\<in> \\<langle>\\<langle>Ra, Rb\\<rangle>rbt_rel, \\<langle>\\<langle>Ra, Rb\\<rangle>prod_rel\\<rangle>list_rel\\<rangle>prod_rel\")"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>n kvs t k v kvs' kvs'a.\n       \\<lbrakk>0 < n; n \\<le> Suc (length kvs);\n        \\<And>n' kvs'.\n           \\<lbrakk>n = n';\n            (kvs, kvs')\n            \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n           \\<Longrightarrow> (rbtreeify_g n' kvs, rbtreeify_g n' kvs')\n                             \\<in> \\<langle>Ra,\n                                   Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                                   \\<langle>Ra \\<times>\\<^sub>r\n      Rb\\<rangle>list_rel;\n        rbtreeify_g n kvs = (t, (k, v) # kvs'); n \\<le> Suc (length kvs');\n        \\<And>n' kvs'a.\n           \\<lbrakk>n = n';\n            (kvs', kvs'a)\n            \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n           \\<Longrightarrow> (rbtreeify_g n' kvs', rbtreeify_g n' kvs'a)\n                             \\<in> \\<langle>Ra,\n                                   Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                                   \\<langle>Ra \\<times>\\<^sub>r\n      Rb\\<rangle>list_rel;\n        (kvs, kvs'a) \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel;\n        (rbtreeify_g n kvs, rbtreeify_g n kvs'a)\n        \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n              \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n       \\<Longrightarrow> (apfst (Branch color.B t k v) (rbtreeify_g n kvs'),\n                          case rbtreeify_g n kvs'a of\n                          (t1, (k, v) # kvs') \\<Rightarrow>\n                            apfst (Branch color.B t1 k v)\n                             (rbtreeify_g n kvs'))\n                         \\<in> \\<langle>Ra,\n                               Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                               \\<langle>Ra \\<times>\\<^sub>r\n  Rb\\<rangle>list_rel\n 2. \\<And>n kvs t k v kvs' kvs'a.\n       \\<lbrakk>0 < n; n \\<le> Suc (length kvs);\n        \\<And>n' kvs'.\n           \\<lbrakk>n = n';\n            (kvs, kvs')\n            \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n           \\<Longrightarrow> (rbtreeify_g n' kvs, rbtreeify_g n' kvs')\n                             \\<in> \\<langle>Ra,\n                                   Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                                   \\<langle>Ra \\<times>\\<^sub>r\n      Rb\\<rangle>list_rel;\n        rbtreeify_g n kvs = (t, (k, v) # kvs'); n \\<le> Suc (length kvs');\n        \\<And>n' kvs'a.\n           \\<lbrakk>n = n';\n            (kvs', kvs'a)\n            \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n           \\<Longrightarrow> (rbtreeify_g n' kvs', rbtreeify_g n' kvs'a)\n                             \\<in> \\<langle>Ra,\n                                   Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                                   \\<langle>Ra \\<times>\\<^sub>r\n      Rb\\<rangle>list_rel;\n        (kvs, kvs'a)\n        \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n       \\<Longrightarrow> (rbtreeify_g n kvs, rbtreeify_g n kvs'a)\n                         \\<in> \\<langle>Ra,\n                               Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                               \\<langle>Ra \\<times>\\<^sub>r\n  Rb\\<rangle>list_rel\n 3. \\<And>n kvs t k v kvs' n' kvs'a.\n       \\<lbrakk>0 < n; n \\<le> length kvs;\n        \\<And>n' kvs'.\n           \\<lbrakk>(n, n') \\<in> nat_rel;\n            (kvs, kvs')\n            \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n           \\<Longrightarrow> (rbtreeify_f n kvs, rbtreeify_f n' kvs')\n                             \\<in> \\<langle>Ra,\n                                   Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                                   \\<langle>Ra \\<times>\\<^sub>r\n      Rb\\<rangle>list_rel;\n        rbtreeify_f n kvs = (t, (k, v) # kvs'); n \\<le> Suc (length kvs');\n        \\<And>n' kvs'a.\n           \\<lbrakk>(n, n') \\<in> nat_rel;\n            (kvs', kvs'a)\n            \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n           \\<Longrightarrow> (rbtreeify_g n kvs', rbtreeify_g n' kvs'a)\n                             \\<in> \\<langle>Ra,\n                                   Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                                   \\<langle>Ra \\<times>\\<^sub>r\n      Rb\\<rangle>list_rel;\n        (Suc (2 * n), n') \\<in> nat_rel;\n        (kvs, kvs'a)\n        \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n       \\<Longrightarrow> (rbtreeify_g (Suc (2 * n)) kvs,\n                          rbtreeify_g n' kvs'a)\n                         \\<in> \\<langle>Ra,\n                               Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                               \\<langle>Ra \\<times>\\<^sub>r\n  Rb\\<rangle>list_rel", "apply (clarsimp elim!: list_relE prod_relE)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>n kvs kvs' kvs'a a a' xs' ab bb a'a b'a.\n       \\<lbrakk>0 < n; n \\<le> Suc (length kvs);\n        \\<And>n' kvs'.\n           \\<lbrakk>n = n';\n            (kvs, kvs')\n            \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n           \\<Longrightarrow> (rbtreeify_g n' kvs, rbtreeify_g n' kvs')\n                             \\<in> \\<langle>Ra,\n                                   Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                                   \\<langle>Ra \\<times>\\<^sub>r\n      Rb\\<rangle>list_rel;\n        rbtreeify_g n kvs = (a, (ab, bb) # kvs'); n \\<le> Suc (length kvs');\n        \\<And>n' kvs'a.\n           \\<lbrakk>n = n';\n            (kvs', kvs'a)\n            \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n           \\<Longrightarrow> (rbtreeify_g n' kvs', rbtreeify_g n' kvs'a)\n                             \\<in> \\<langle>Ra,\n                                   Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                                   \\<langle>Ra \\<times>\\<^sub>r\n      Rb\\<rangle>list_rel;\n        (kvs, kvs'a) \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel;\n        rbtreeify_g n kvs'a = (a', (a'a, b'a) # xs');\n        (a, a') \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel;\n        (kvs', xs') \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel;\n        (ab, a'a) \\<in> Ra; (bb, b'a) \\<in> Rb\\<rbrakk>\n       \\<Longrightarrow> (apfst (Branch color.B a ab bb)\n                           (rbtreeify_g n kvs'),\n                          apfst (Branch color.B a' a'a b'a)\n                           (rbtreeify_g n xs'))\n                         \\<in> \\<langle>Ra,\n                               Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                               \\<langle>Ra \\<times>\\<^sub>r\n  Rb\\<rangle>list_rel\n 2. \\<And>n kvs t k v kvs' kvs'a.\n       \\<lbrakk>0 < n; n \\<le> Suc (length kvs);\n        \\<And>n' kvs'.\n           \\<lbrakk>n = n';\n            (kvs, kvs')\n            \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n           \\<Longrightarrow> (rbtreeify_g n' kvs, rbtreeify_g n' kvs')\n                             \\<in> \\<langle>Ra,\n                                   Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                                   \\<langle>Ra \\<times>\\<^sub>r\n      Rb\\<rangle>list_rel;\n        rbtreeify_g n kvs = (t, (k, v) # kvs'); n \\<le> Suc (length kvs');\n        \\<And>n' kvs'a.\n           \\<lbrakk>n = n';\n            (kvs', kvs'a)\n            \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n           \\<Longrightarrow> (rbtreeify_g n' kvs', rbtreeify_g n' kvs'a)\n                             \\<in> \\<langle>Ra,\n                                   Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                                   \\<langle>Ra \\<times>\\<^sub>r\n      Rb\\<rangle>list_rel;\n        (kvs, kvs'a)\n        \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n       \\<Longrightarrow> (rbtreeify_g n kvs, rbtreeify_g n kvs'a)\n                         \\<in> \\<langle>Ra,\n                               Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                               \\<langle>Ra \\<times>\\<^sub>r\n  Rb\\<rangle>list_rel\n 3. \\<And>n kvs t k v kvs' n' kvs'a.\n       \\<lbrakk>0 < n; n \\<le> length kvs;\n        \\<And>n' kvs'.\n           \\<lbrakk>(n, n') \\<in> nat_rel;\n            (kvs, kvs')\n            \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n           \\<Longrightarrow> (rbtreeify_f n kvs, rbtreeify_f n' kvs')\n                             \\<in> \\<langle>Ra,\n                                   Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                                   \\<langle>Ra \\<times>\\<^sub>r\n      Rb\\<rangle>list_rel;\n        rbtreeify_f n kvs = (t, (k, v) # kvs'); n \\<le> Suc (length kvs');\n        \\<And>n' kvs'a.\n           \\<lbrakk>(n, n') \\<in> nat_rel;\n            (kvs', kvs'a)\n            \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n           \\<Longrightarrow> (rbtreeify_g n kvs', rbtreeify_g n' kvs'a)\n                             \\<in> \\<langle>Ra,\n                                   Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                                   \\<langle>Ra \\<times>\\<^sub>r\n      Rb\\<rangle>list_rel;\n        (Suc (2 * n), n') \\<in> nat_rel;\n        (kvs, kvs'a)\n        \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n       \\<Longrightarrow> (rbtreeify_g (Suc (2 * n)) kvs,\n                          rbtreeify_g n' kvs'a)\n                         \\<in> \\<langle>Ra,\n                               Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                               \\<langle>Ra \\<times>\\<^sub>r\n  Rb\\<rangle>list_rel", "apply parametricity"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>n kvs kvs' kvs'a a a' xs' ab bb a'a b'a.\n       \\<lbrakk>0 < n; n \\<le> Suc (length kvs);\n        \\<And>n' kvs'.\n           \\<lbrakk>n = n';\n            (kvs, kvs')\n            \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n           \\<Longrightarrow> (rbtreeify_g n' kvs, rbtreeify_g n' kvs')\n                             \\<in> \\<langle>Ra,\n                                   Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                                   \\<langle>Ra \\<times>\\<^sub>r\n      Rb\\<rangle>list_rel;\n        rbtreeify_g n kvs = (a, (ab, bb) # kvs'); n \\<le> Suc (length kvs');\n        (kvs, kvs'a) \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel;\n        rbtreeify_g n kvs'a = (a', (a'a, b'a) # xs');\n        (a, a') \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel;\n        (kvs', xs') \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel;\n        (ab, a'a) \\<in> Ra; (bb, b'a) \\<in> Rb\\<rbrakk>\n       \\<Longrightarrow> n = n\n 2. \\<And>n kvs t k v kvs' kvs'a.\n       \\<lbrakk>0 < n; n \\<le> Suc (length kvs);\n        \\<And>n' kvs'.\n           \\<lbrakk>n = n';\n            (kvs, kvs')\n            \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n           \\<Longrightarrow> (rbtreeify_g n' kvs, rbtreeify_g n' kvs')\n                             \\<in> \\<langle>Ra,\n                                   Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                                   \\<langle>Ra \\<times>\\<^sub>r\n      Rb\\<rangle>list_rel;\n        rbtreeify_g n kvs = (t, (k, v) # kvs'); n \\<le> Suc (length kvs');\n        \\<And>n' kvs'a.\n           \\<lbrakk>n = n';\n            (kvs', kvs'a)\n            \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n           \\<Longrightarrow> (rbtreeify_g n' kvs', rbtreeify_g n' kvs'a)\n                             \\<in> \\<langle>Ra,\n                                   Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                                   \\<langle>Ra \\<times>\\<^sub>r\n      Rb\\<rangle>list_rel;\n        (kvs, kvs'a)\n        \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n       \\<Longrightarrow> (rbtreeify_g n kvs, rbtreeify_g n kvs'a)\n                         \\<in> \\<langle>Ra,\n                               Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                               \\<langle>Ra \\<times>\\<^sub>r\n  Rb\\<rangle>list_rel\n 3. \\<And>n kvs t k v kvs' n' kvs'a.\n       \\<lbrakk>0 < n; n \\<le> length kvs;\n        \\<And>n' kvs'.\n           \\<lbrakk>(n, n') \\<in> nat_rel;\n            (kvs, kvs')\n            \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n           \\<Longrightarrow> (rbtreeify_f n kvs, rbtreeify_f n' kvs')\n                             \\<in> \\<langle>Ra,\n                                   Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                                   \\<langle>Ra \\<times>\\<^sub>r\n      Rb\\<rangle>list_rel;\n        rbtreeify_f n kvs = (t, (k, v) # kvs'); n \\<le> Suc (length kvs');\n        \\<And>n' kvs'a.\n           \\<lbrakk>(n, n') \\<in> nat_rel;\n            (kvs', kvs'a)\n            \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n           \\<Longrightarrow> (rbtreeify_g n kvs', rbtreeify_g n' kvs'a)\n                             \\<in> \\<langle>Ra,\n                                   Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                                   \\<langle>Ra \\<times>\\<^sub>r\n      Rb\\<rangle>list_rel;\n        (Suc (2 * n), n') \\<in> nat_rel;\n        (kvs, kvs'a)\n        \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n       \\<Longrightarrow> (rbtreeify_g (Suc (2 * n)) kvs,\n                          rbtreeify_g n' kvs'a)\n                         \\<in> \\<langle>Ra,\n                               Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                               \\<langle>Ra \\<times>\\<^sub>r\n  Rb\\<rangle>list_rel", "apply (rule refl)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>n kvs t k v kvs' kvs'a.\n       \\<lbrakk>0 < n; n \\<le> Suc (length kvs);\n        \\<And>n' kvs'.\n           \\<lbrakk>n = n';\n            (kvs, kvs')\n            \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n           \\<Longrightarrow> (rbtreeify_g n' kvs, rbtreeify_g n' kvs')\n                             \\<in> \\<langle>Ra,\n                                   Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                                   \\<langle>Ra \\<times>\\<^sub>r\n      Rb\\<rangle>list_rel;\n        rbtreeify_g n kvs = (t, (k, v) # kvs'); n \\<le> Suc (length kvs');\n        \\<And>n' kvs'a.\n           \\<lbrakk>n = n';\n            (kvs', kvs'a)\n            \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n           \\<Longrightarrow> (rbtreeify_g n' kvs', rbtreeify_g n' kvs'a)\n                             \\<in> \\<langle>Ra,\n                                   Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                                   \\<langle>Ra \\<times>\\<^sub>r\n      Rb\\<rangle>list_rel;\n        (kvs, kvs'a)\n        \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n       \\<Longrightarrow> (rbtreeify_g n kvs, rbtreeify_g n kvs'a)\n                         \\<in> \\<langle>Ra,\n                               Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                               \\<langle>Ra \\<times>\\<^sub>r\n  Rb\\<rangle>list_rel\n 2. \\<And>n kvs t k v kvs' n' kvs'a.\n       \\<lbrakk>0 < n; n \\<le> length kvs;\n        \\<And>n' kvs'.\n           \\<lbrakk>(n, n') \\<in> nat_rel;\n            (kvs, kvs')\n            \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n           \\<Longrightarrow> (rbtreeify_f n kvs, rbtreeify_f n' kvs')\n                             \\<in> \\<langle>Ra,\n                                   Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                                   \\<langle>Ra \\<times>\\<^sub>r\n      Rb\\<rangle>list_rel;\n        rbtreeify_f n kvs = (t, (k, v) # kvs'); n \\<le> Suc (length kvs');\n        \\<And>n' kvs'a.\n           \\<lbrakk>(n, n') \\<in> nat_rel;\n            (kvs', kvs'a)\n            \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n           \\<Longrightarrow> (rbtreeify_g n kvs', rbtreeify_g n' kvs'a)\n                             \\<in> \\<langle>Ra,\n                                   Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                                   \\<langle>Ra \\<times>\\<^sub>r\n      Rb\\<rangle>list_rel;\n        (Suc (2 * n), n') \\<in> nat_rel;\n        (kvs, kvs'a)\n        \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n       \\<Longrightarrow> (rbtreeify_g (Suc (2 * n)) kvs,\n                          rbtreeify_g n' kvs'a)\n                         \\<in> \\<langle>Ra,\n                               Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                               \\<langle>Ra \\<times>\\<^sub>r\n  Rb\\<rangle>list_rel", "apply parametricity"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>n kvs t k v kvs' kvs'a.\n       \\<lbrakk>0 < n; n \\<le> Suc (length kvs);\n        rbtreeify_g n kvs = (t, (k, v) # kvs'); n \\<le> Suc (length kvs');\n        \\<And>n' kvs'a.\n           \\<lbrakk>n = n';\n            (kvs', kvs'a)\n            \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n           \\<Longrightarrow> (rbtreeify_g n' kvs', rbtreeify_g n' kvs'a)\n                             \\<in> \\<langle>Ra,\n                                   Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                                   \\<langle>Ra \\<times>\\<^sub>r\n      Rb\\<rangle>list_rel;\n        (kvs, kvs'a)\n        \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n       \\<Longrightarrow> n = n\n 2. \\<And>n kvs t k v kvs' n' kvs'a.\n       \\<lbrakk>0 < n; n \\<le> length kvs;\n        \\<And>n' kvs'.\n           \\<lbrakk>(n, n') \\<in> nat_rel;\n            (kvs, kvs')\n            \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n           \\<Longrightarrow> (rbtreeify_f n kvs, rbtreeify_f n' kvs')\n                             \\<in> \\<langle>Ra,\n                                   Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                                   \\<langle>Ra \\<times>\\<^sub>r\n      Rb\\<rangle>list_rel;\n        rbtreeify_f n kvs = (t, (k, v) # kvs'); n \\<le> Suc (length kvs');\n        \\<And>n' kvs'a.\n           \\<lbrakk>(n, n') \\<in> nat_rel;\n            (kvs', kvs'a)\n            \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n           \\<Longrightarrow> (rbtreeify_g n kvs', rbtreeify_g n' kvs'a)\n                             \\<in> \\<langle>Ra,\n                                   Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                                   \\<langle>Ra \\<times>\\<^sub>r\n      Rb\\<rangle>list_rel;\n        (Suc (2 * n), n') \\<in> nat_rel;\n        (kvs, kvs'a)\n        \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n       \\<Longrightarrow> (rbtreeify_g (Suc (2 * n)) kvs,\n                          rbtreeify_g n' kvs'a)\n                         \\<in> \\<langle>Ra,\n                               Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                               \\<langle>Ra \\<times>\\<^sub>r\n  Rb\\<rangle>list_rel", "apply (rule refl)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n kvs t k v kvs' n' kvs'a.\n       \\<lbrakk>0 < n; n \\<le> length kvs;\n        \\<And>n' kvs'.\n           \\<lbrakk>(n, n') \\<in> nat_rel;\n            (kvs, kvs')\n            \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n           \\<Longrightarrow> (rbtreeify_f n kvs, rbtreeify_f n' kvs')\n                             \\<in> \\<langle>Ra,\n                                   Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                                   \\<langle>Ra \\<times>\\<^sub>r\n      Rb\\<rangle>list_rel;\n        rbtreeify_f n kvs = (t, (k, v) # kvs'); n \\<le> Suc (length kvs');\n        \\<And>n' kvs'a.\n           \\<lbrakk>(n, n') \\<in> nat_rel;\n            (kvs', kvs'a)\n            \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n           \\<Longrightarrow> (rbtreeify_g n kvs', rbtreeify_g n' kvs'a)\n                             \\<in> \\<langle>Ra,\n                                   Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                                   \\<langle>Ra \\<times>\\<^sub>r\n      Rb\\<rangle>list_rel;\n        (Suc (2 * n), n') \\<in> nat_rel;\n        (kvs, kvs'a)\n        \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n       \\<Longrightarrow> (rbtreeify_g (Suc (2 * n)) kvs,\n                          rbtreeify_g n' kvs'a)\n                         \\<in> \\<langle>Ra,\n                               Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                               \\<langle>Ra \\<times>\\<^sub>r\n  Rb\\<rangle>list_rel", "apply clarsimp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n kvs t k v kvs' kvs'a.\n       \\<lbrakk>0 < n; n \\<le> length kvs;\n        \\<And>n' kvs'.\n           \\<lbrakk>n = n';\n            (kvs, kvs')\n            \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n           \\<Longrightarrow> (rbtreeify_f n' kvs, rbtreeify_f n' kvs')\n                             \\<in> \\<langle>Ra,\n                                   Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                                   \\<langle>Ra \\<times>\\<^sub>r\n      Rb\\<rangle>list_rel;\n        rbtreeify_f n kvs = (t, (k, v) # kvs'); n \\<le> Suc (length kvs');\n        \\<And>n' kvs'a.\n           \\<lbrakk>n = n';\n            (kvs', kvs'a)\n            \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n           \\<Longrightarrow> (rbtreeify_g n' kvs', rbtreeify_g n' kvs'a)\n                             \\<in> \\<langle>Ra,\n                                   Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                                   \\<langle>Ra \\<times>\\<^sub>r\n      Rb\\<rangle>list_rel;\n        (kvs, kvs'a)\n        \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n       \\<Longrightarrow> (apfst (Branch color.B t k v) (rbtreeify_g n kvs'),\n                          case rbtreeify_f n kvs'a of\n                          (t1, (k, v) # kvs') \\<Rightarrow>\n                            apfst (Branch color.B t1 k v)\n                             (rbtreeify_g n kvs'))\n                         \\<in> \\<langle>Ra,\n                               Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                               \\<langle>Ra \\<times>\\<^sub>r\n  Rb\\<rangle>list_rel", "apply (subgoal_tac \"(rbtreeify_f n kvs, rbtreeify_f n kvs'a) \n      \\<in> \\<langle>\\<langle>Ra, Rb\\<rangle>rbt_rel, \\<langle>\\<langle>Ra, Rb\\<rangle>prod_rel\\<rangle>list_rel\\<rangle>prod_rel\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>n kvs t k v kvs' kvs'a.\n       \\<lbrakk>0 < n; n \\<le> length kvs;\n        \\<And>n' kvs'.\n           \\<lbrakk>n = n';\n            (kvs, kvs')\n            \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n           \\<Longrightarrow> (rbtreeify_f n' kvs, rbtreeify_f n' kvs')\n                             \\<in> \\<langle>Ra,\n                                   Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                                   \\<langle>Ra \\<times>\\<^sub>r\n      Rb\\<rangle>list_rel;\n        rbtreeify_f n kvs = (t, (k, v) # kvs'); n \\<le> Suc (length kvs');\n        \\<And>n' kvs'a.\n           \\<lbrakk>n = n';\n            (kvs', kvs'a)\n            \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n           \\<Longrightarrow> (rbtreeify_g n' kvs', rbtreeify_g n' kvs'a)\n                             \\<in> \\<langle>Ra,\n                                   Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                                   \\<langle>Ra \\<times>\\<^sub>r\n      Rb\\<rangle>list_rel;\n        (kvs, kvs'a) \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel;\n        (rbtreeify_f n kvs, rbtreeify_f n kvs'a)\n        \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n              \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n       \\<Longrightarrow> (apfst (Branch color.B t k v) (rbtreeify_g n kvs'),\n                          case rbtreeify_f n kvs'a of\n                          (t1, (k, v) # kvs') \\<Rightarrow>\n                            apfst (Branch color.B t1 k v)\n                             (rbtreeify_g n kvs'))\n                         \\<in> \\<langle>Ra,\n                               Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                               \\<langle>Ra \\<times>\\<^sub>r\n  Rb\\<rangle>list_rel\n 2. \\<And>n kvs t k v kvs' kvs'a.\n       \\<lbrakk>0 < n; n \\<le> length kvs;\n        \\<And>n' kvs'.\n           \\<lbrakk>n = n';\n            (kvs, kvs')\n            \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n           \\<Longrightarrow> (rbtreeify_f n' kvs, rbtreeify_f n' kvs')\n                             \\<in> \\<langle>Ra,\n                                   Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                                   \\<langle>Ra \\<times>\\<^sub>r\n      Rb\\<rangle>list_rel;\n        rbtreeify_f n kvs = (t, (k, v) # kvs'); n \\<le> Suc (length kvs');\n        \\<And>n' kvs'a.\n           \\<lbrakk>n = n';\n            (kvs', kvs'a)\n            \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n           \\<Longrightarrow> (rbtreeify_g n' kvs', rbtreeify_g n' kvs'a)\n                             \\<in> \\<langle>Ra,\n                                   Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                                   \\<langle>Ra \\<times>\\<^sub>r\n      Rb\\<rangle>list_rel;\n        (kvs, kvs'a)\n        \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n       \\<Longrightarrow> (rbtreeify_f n kvs, rbtreeify_f n kvs'a)\n                         \\<in> \\<langle>Ra,\n                               Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                               \\<langle>Ra \\<times>\\<^sub>r\n  Rb\\<rangle>list_rel", "apply (clarsimp elim!: list_relE prod_relE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>n kvs kvs' kvs'a a a' xs' ab bb a'a b'a.\n       \\<lbrakk>0 < n; n \\<le> length kvs;\n        \\<And>n' kvs'.\n           \\<lbrakk>n = n';\n            (kvs, kvs')\n            \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n           \\<Longrightarrow> (rbtreeify_f n' kvs, rbtreeify_f n' kvs')\n                             \\<in> \\<langle>Ra,\n                                   Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                                   \\<langle>Ra \\<times>\\<^sub>r\n      Rb\\<rangle>list_rel;\n        rbtreeify_f n kvs = (a, (ab, bb) # kvs'); n \\<le> Suc (length kvs');\n        \\<And>n' kvs'a.\n           \\<lbrakk>n = n';\n            (kvs', kvs'a)\n            \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n           \\<Longrightarrow> (rbtreeify_g n' kvs', rbtreeify_g n' kvs'a)\n                             \\<in> \\<langle>Ra,\n                                   Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                                   \\<langle>Ra \\<times>\\<^sub>r\n      Rb\\<rangle>list_rel;\n        (kvs, kvs'a) \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel;\n        rbtreeify_f n kvs'a = (a', (a'a, b'a) # xs');\n        (a, a') \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel;\n        (kvs', xs') \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel;\n        (ab, a'a) \\<in> Ra; (bb, b'a) \\<in> Rb\\<rbrakk>\n       \\<Longrightarrow> (apfst (Branch color.B a ab bb)\n                           (rbtreeify_g n kvs'),\n                          apfst (Branch color.B a' a'a b'a)\n                           (rbtreeify_g n xs'))\n                         \\<in> \\<langle>Ra,\n                               Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                               \\<langle>Ra \\<times>\\<^sub>r\n  Rb\\<rangle>list_rel\n 2. \\<And>n kvs t k v kvs' kvs'a.\n       \\<lbrakk>0 < n; n \\<le> length kvs;\n        \\<And>n' kvs'.\n           \\<lbrakk>n = n';\n            (kvs, kvs')\n            \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n           \\<Longrightarrow> (rbtreeify_f n' kvs, rbtreeify_f n' kvs')\n                             \\<in> \\<langle>Ra,\n                                   Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                                   \\<langle>Ra \\<times>\\<^sub>r\n      Rb\\<rangle>list_rel;\n        rbtreeify_f n kvs = (t, (k, v) # kvs'); n \\<le> Suc (length kvs');\n        \\<And>n' kvs'a.\n           \\<lbrakk>n = n';\n            (kvs', kvs'a)\n            \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n           \\<Longrightarrow> (rbtreeify_g n' kvs', rbtreeify_g n' kvs'a)\n                             \\<in> \\<langle>Ra,\n                                   Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                                   \\<langle>Ra \\<times>\\<^sub>r\n      Rb\\<rangle>list_rel;\n        (kvs, kvs'a)\n        \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n       \\<Longrightarrow> (rbtreeify_f n kvs, rbtreeify_f n kvs'a)\n                         \\<in> \\<langle>Ra,\n                               Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                               \\<langle>Ra \\<times>\\<^sub>r\n  Rb\\<rangle>list_rel", "apply parametricity"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>n kvs kvs' kvs'a a a' xs' ab bb a'a b'a.\n       \\<lbrakk>0 < n; n \\<le> length kvs;\n        \\<And>n' kvs'.\n           \\<lbrakk>n = n';\n            (kvs, kvs')\n            \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n           \\<Longrightarrow> (rbtreeify_f n' kvs, rbtreeify_f n' kvs')\n                             \\<in> \\<langle>Ra,\n                                   Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                                   \\<langle>Ra \\<times>\\<^sub>r\n      Rb\\<rangle>list_rel;\n        rbtreeify_f n kvs = (a, (ab, bb) # kvs'); n \\<le> Suc (length kvs');\n        (kvs, kvs'a) \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel;\n        rbtreeify_f n kvs'a = (a', (a'a, b'a) # xs');\n        (a, a') \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel;\n        (kvs', xs') \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel;\n        (ab, a'a) \\<in> Ra; (bb, b'a) \\<in> Rb\\<rbrakk>\n       \\<Longrightarrow> n = n\n 2. \\<And>n kvs t k v kvs' kvs'a.\n       \\<lbrakk>0 < n; n \\<le> length kvs;\n        \\<And>n' kvs'.\n           \\<lbrakk>n = n';\n            (kvs, kvs')\n            \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n           \\<Longrightarrow> (rbtreeify_f n' kvs, rbtreeify_f n' kvs')\n                             \\<in> \\<langle>Ra,\n                                   Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                                   \\<langle>Ra \\<times>\\<^sub>r\n      Rb\\<rangle>list_rel;\n        rbtreeify_f n kvs = (t, (k, v) # kvs'); n \\<le> Suc (length kvs');\n        \\<And>n' kvs'a.\n           \\<lbrakk>n = n';\n            (kvs', kvs'a)\n            \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n           \\<Longrightarrow> (rbtreeify_g n' kvs', rbtreeify_g n' kvs'a)\n                             \\<in> \\<langle>Ra,\n                                   Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                                   \\<langle>Ra \\<times>\\<^sub>r\n      Rb\\<rangle>list_rel;\n        (kvs, kvs'a)\n        \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n       \\<Longrightarrow> (rbtreeify_f n kvs, rbtreeify_f n kvs'a)\n                         \\<in> \\<langle>Ra,\n                               Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                               \\<langle>Ra \\<times>\\<^sub>r\n  Rb\\<rangle>list_rel", "apply (rule refl)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n kvs t k v kvs' kvs'a.\n       \\<lbrakk>0 < n; n \\<le> length kvs;\n        \\<And>n' kvs'.\n           \\<lbrakk>n = n';\n            (kvs, kvs')\n            \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n           \\<Longrightarrow> (rbtreeify_f n' kvs, rbtreeify_f n' kvs')\n                             \\<in> \\<langle>Ra,\n                                   Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                                   \\<langle>Ra \\<times>\\<^sub>r\n      Rb\\<rangle>list_rel;\n        rbtreeify_f n kvs = (t, (k, v) # kvs'); n \\<le> Suc (length kvs');\n        \\<And>n' kvs'a.\n           \\<lbrakk>n = n';\n            (kvs', kvs'a)\n            \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n           \\<Longrightarrow> (rbtreeify_g n' kvs', rbtreeify_g n' kvs'a)\n                             \\<in> \\<langle>Ra,\n                                   Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                                   \\<langle>Ra \\<times>\\<^sub>r\n      Rb\\<rangle>list_rel;\n        (kvs, kvs'a)\n        \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n       \\<Longrightarrow> (rbtreeify_f n kvs, rbtreeify_f n kvs'a)\n                         \\<in> \\<langle>Ra,\n                               Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                               \\<langle>Ra \\<times>\\<^sub>r\n  Rb\\<rangle>list_rel", "apply parametricity"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n kvs t k v kvs' kvs'a.\n       \\<lbrakk>0 < n; n \\<le> length kvs;\n        rbtreeify_f n kvs = (t, (k, v) # kvs'); n \\<le> Suc (length kvs');\n        \\<And>n' kvs'a.\n           \\<lbrakk>n = n';\n            (kvs', kvs'a)\n            \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n           \\<Longrightarrow> (rbtreeify_g n' kvs', rbtreeify_g n' kvs'a)\n                             \\<in> \\<langle>Ra,\n                                   Rb\\<rangle>rbt_rel \\<times>\\<^sub>r\n                                   \\<langle>Ra \\<times>\\<^sub>r\n      Rb\\<rangle>list_rel;\n        (kvs, kvs'a)\n        \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n       \\<Longrightarrow> n = n", "apply (rule refl)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma param_rbtreeify[param]:\n    \"(rbtreeify, rbtreeify) \\<in> \\<langle>\\<langle>Ra,Rb\\<rangle>prod_rel\\<rangle>list_rel \\<rightarrow> \\<langle>Ra,Rb\\<rangle>rbt_rel\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (rbtreeify, rbtreeify)\n    \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel \\<rightarrow>\n          \\<langle>Ra, Rb\\<rangle>rbt_rel", "unfolding rbtreeify_def[abs_def]"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>kvs. fst (rbtreeify_g (Suc (length kvs)) kvs),\n     \\<lambda>kvs. fst (rbtreeify_g (Suc (length kvs)) kvs))\n    \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel \\<rightarrow>\n          \\<langle>Ra, Rb\\<rangle>rbt_rel", "apply parametricity"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a a'.\n       (a, a')\n       \\<in> \\<langle>Ra \\<times>\\<^sub>r\n                      Rb\\<rangle>list_rel \\<Longrightarrow>\n       Suc (length a) \\<le> Suc (length a)", "by simp"], ["", "lemma param_sunion_with[param]:\n    fixes less\n    shows \"\\<lbrakk> (less,less') \\<in> Ra \\<rightarrow> Ra \\<rightarrow> Id; \n      (f,f')\\<in>(Ra\\<rightarrow>Rb\\<rightarrow>Rb\\<rightarrow>Rb); (a,a')\\<in>\\<langle>\\<langle>Ra,Rb\\<rangle>prod_rel\\<rangle>list_rel;\n      (b,b')\\<in>\\<langle>\\<langle>Ra,Rb\\<rangle>prod_rel\\<rangle>list_rel \\<rbrakk> \n    \\<Longrightarrow> (ord.sunion_with less f a b, ord.sunion_with less' f' a' b') \\<in> \n      \\<langle>\\<langle>Ra,Rb\\<rangle>prod_rel\\<rangle>list_rel\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>(less, less') \\<in> Ra \\<rightarrow> Ra \\<rightarrow> bool_rel;\n     (f, f') \\<in> Ra \\<rightarrow> Rb \\<rightarrow> Rb \\<rightarrow> Rb;\n     (a, a') \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel;\n     (b, b') \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n    \\<Longrightarrow> (ord.sunion_with less f a b,\n                       ord.sunion_with less' f' a' b')\n                      \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel", "apply (induct f' a' b' arbitrary: f a b \n      rule: ord.sunion_with.induct[of less'])"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>f k v as k' v' bs fa a b.\n       \\<lbrakk>\\<And>fa a b.\n                   \\<lbrakk>less' k' k;\n                    (less, less')\n                    \\<in> Ra \\<rightarrow> Ra \\<rightarrow> bool_rel;\n                    (fa, f)\n                    \\<in> Ra \\<rightarrow>\n                          Rb \\<rightarrow> Rb \\<rightarrow> Rb;\n                    (a, (k, v) # as)\n                    \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel;\n                    (b, bs)\n                    \\<in> \\<langle>Ra \\<times>\\<^sub>r\n                                   Rb\\<rangle>list_rel\\<rbrakk>\n                   \\<Longrightarrow> (ord.sunion_with less fa a b,\nord.sunion_with less' f ((k, v) # as) bs)\n                                     \\<in> \\<langle>Ra \\<times>\\<^sub>r\n              Rb\\<rangle>list_rel;\n        \\<And>fa a b.\n           \\<lbrakk>\\<not> less' k' k; less' k k';\n            (less, less') \\<in> Ra \\<rightarrow> Ra \\<rightarrow> bool_rel;\n            (fa, f)\n            \\<in> Ra \\<rightarrow> Rb \\<rightarrow> Rb \\<rightarrow> Rb;\n            (a, as) \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel;\n            (b, (k', v') # bs)\n            \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n           \\<Longrightarrow> (ord.sunion_with less fa a b,\n                              ord.sunion_with less' f as ((k', v') # bs))\n                             \\<in> \\<langle>Ra \\<times>\\<^sub>r\n      Rb\\<rangle>list_rel;\n        \\<And>fa a b.\n           \\<lbrakk>\\<not> less' k' k; \\<not> less' k k';\n            (less, less') \\<in> Ra \\<rightarrow> Ra \\<rightarrow> bool_rel;\n            (fa, f)\n            \\<in> Ra \\<rightarrow> Rb \\<rightarrow> Rb \\<rightarrow> Rb;\n            (a, as) \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel;\n            (b, bs)\n            \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n           \\<Longrightarrow> (ord.sunion_with less fa a b,\n                              ord.sunion_with less' f as bs)\n                             \\<in> \\<langle>Ra \\<times>\\<^sub>r\n      Rb\\<rangle>list_rel;\n        (less, less') \\<in> Ra \\<rightarrow> Ra \\<rightarrow> bool_rel;\n        (fa, f) \\<in> Ra \\<rightarrow> Rb \\<rightarrow> Rb \\<rightarrow> Rb;\n        (a, (k, v) # as)\n        \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel;\n        (b, (k', v') # bs)\n        \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n       \\<Longrightarrow> (ord.sunion_with less fa a b,\n                          ord.sunion_with less' f ((k, v) # as)\n                           ((k', v') # bs))\n                         \\<in> \\<langle>Ra \\<times>\\<^sub>r\n  Rb\\<rangle>list_rel\n 2. \\<And>f bs fa a b.\n       \\<lbrakk>(less, less')\n                \\<in> Ra \\<rightarrow> Ra \\<rightarrow> bool_rel;\n        (fa, f) \\<in> Ra \\<rightarrow> Rb \\<rightarrow> Rb \\<rightarrow> Rb;\n        (a, []) \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel;\n        (b, bs)\n        \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n       \\<Longrightarrow> (ord.sunion_with less fa a b,\n                          ord.sunion_with less' f [] bs)\n                         \\<in> \\<langle>Ra \\<times>\\<^sub>r\n  Rb\\<rangle>list_rel\n 3. \\<And>f as fa a b.\n       \\<lbrakk>(less, less')\n                \\<in> Ra \\<rightarrow> Ra \\<rightarrow> bool_rel;\n        (fa, f) \\<in> Ra \\<rightarrow> Rb \\<rightarrow> Rb \\<rightarrow> Rb;\n        (a, as) \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel;\n        (b, [])\n        \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n       \\<Longrightarrow> (ord.sunion_with less fa a b,\n                          ord.sunion_with less' f as [])\n                         \\<in> \\<langle>Ra \\<times>\\<^sub>r\n  Rb\\<rangle>list_rel", "apply (elim_all list_relE prod_relE)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>f k v as k' v' bs fa a b x xs xa xsa aa ba a' b' ab bb a'a b'a.\n       \\<lbrakk>\\<And>fa a b.\n                   \\<lbrakk>less' k' k;\n                    (less, less')\n                    \\<in> Ra \\<rightarrow> Ra \\<rightarrow> bool_rel;\n                    (fa, f)\n                    \\<in> Ra \\<rightarrow>\n                          Rb \\<rightarrow> Rb \\<rightarrow> Rb;\n                    (a, (k, v) # as)\n                    \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel;\n                    (b, bs)\n                    \\<in> \\<langle>Ra \\<times>\\<^sub>r\n                                   Rb\\<rangle>list_rel\\<rbrakk>\n                   \\<Longrightarrow> (ord.sunion_with less fa a b,\nord.sunion_with less' f ((k, v) # as) bs)\n                                     \\<in> \\<langle>Ra \\<times>\\<^sub>r\n              Rb\\<rangle>list_rel;\n        \\<And>fa a b.\n           \\<lbrakk>\\<not> less' k' k; less' k k';\n            (less, less') \\<in> Ra \\<rightarrow> Ra \\<rightarrow> bool_rel;\n            (fa, f)\n            \\<in> Ra \\<rightarrow> Rb \\<rightarrow> Rb \\<rightarrow> Rb;\n            (a, as) \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel;\n            (b, (k', v') # bs)\n            \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n           \\<Longrightarrow> (ord.sunion_with less fa a b,\n                              ord.sunion_with less' f as ((k', v') # bs))\n                             \\<in> \\<langle>Ra \\<times>\\<^sub>r\n      Rb\\<rangle>list_rel;\n        \\<And>fa a b.\n           \\<lbrakk>\\<not> less' k' k; \\<not> less' k k';\n            (less, less') \\<in> Ra \\<rightarrow> Ra \\<rightarrow> bool_rel;\n            (fa, f)\n            \\<in> Ra \\<rightarrow> Rb \\<rightarrow> Rb \\<rightarrow> Rb;\n            (a, as) \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel;\n            (b, bs)\n            \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n           \\<Longrightarrow> (ord.sunion_with less fa a b,\n                              ord.sunion_with less' f as bs)\n                             \\<in> \\<langle>Ra \\<times>\\<^sub>r\n      Rb\\<rangle>list_rel;\n        (less, less') \\<in> Ra \\<rightarrow> Ra \\<rightarrow> bool_rel;\n        (fa, f) \\<in> Ra \\<rightarrow> Rb \\<rightarrow> Rb \\<rightarrow> Rb;\n        a = x # xs;\n        (xs, as) \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel;\n        b = xa # xsa;\n        (xsa, bs) \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel;\n        x = (aa, ba); (k, v) = (a', b'); (aa, a') \\<in> Ra;\n        (ba, b') \\<in> Rb; xa = (ab, bb); (k', v') = (a'a, b'a);\n        (ab, a'a) \\<in> Ra; (bb, b'a) \\<in> Rb\\<rbrakk>\n       \\<Longrightarrow> (ord.sunion_with less fa a b,\n                          ord.sunion_with less' f ((k, v) # as)\n                           ((k', v') # bs))\n                         \\<in> \\<langle>Ra \\<times>\\<^sub>r\n  Rb\\<rangle>list_rel\n 2. \\<And>f bs fa a b.\n       \\<lbrakk>(less, less')\n                \\<in> Ra \\<rightarrow> Ra \\<rightarrow> bool_rel;\n        (fa, f) \\<in> Ra \\<rightarrow> Rb \\<rightarrow> Rb \\<rightarrow> Rb;\n        (b, bs) \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel;\n        a = []\\<rbrakk>\n       \\<Longrightarrow> (ord.sunion_with less fa a b,\n                          ord.sunion_with less' f [] bs)\n                         \\<in> \\<langle>Ra \\<times>\\<^sub>r\n  Rb\\<rangle>list_rel\n 3. \\<And>f as fa a b.\n       \\<lbrakk>(less, less')\n                \\<in> Ra \\<rightarrow> Ra \\<rightarrow> bool_rel;\n        (fa, f) \\<in> Ra \\<rightarrow> Rb \\<rightarrow> Rb \\<rightarrow> Rb;\n        (a, as) \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel;\n        b = []\\<rbrakk>\n       \\<Longrightarrow> (ord.sunion_with less fa a b,\n                          ord.sunion_with less' f as [])\n                         \\<in> \\<langle>Ra \\<times>\\<^sub>r\n  Rb\\<rangle>list_rel", "apply (simp_all only: ord.sunion_with.simps)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>f k v as k' v' bs fa a b x xs xa xsa aa ba a' b' ab bb a'a b'a.\n       \\<lbrakk>\\<And>fa a b.\n                   \\<lbrakk>less' k' k; True;\n                    (fa, f)\n                    \\<in> Ra \\<rightarrow>\n                          Rb \\<rightarrow> Rb \\<rightarrow> Rb;\n                    (a, (a', b') # as)\n                    \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel;\n                    (b, bs)\n                    \\<in> \\<langle>Ra \\<times>\\<^sub>r\n                                   Rb\\<rangle>list_rel\\<rbrakk>\n                   \\<Longrightarrow> (ord.sunion_with less fa a b,\nord.sunion_with less' f ((a', b') # as) bs)\n                                     \\<in> \\<langle>Ra \\<times>\\<^sub>r\n              Rb\\<rangle>list_rel;\n        \\<And>fa a b.\n           \\<lbrakk>\\<not> less' k' k; less' k k'; True;\n            (fa, f)\n            \\<in> Ra \\<rightarrow> Rb \\<rightarrow> Rb \\<rightarrow> Rb;\n            (a, as) \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel;\n            (b, (a'a, b'a) # bs)\n            \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n           \\<Longrightarrow> (ord.sunion_with less fa a b,\n                              ord.sunion_with less' f as ((a'a, b'a) # bs))\n                             \\<in> \\<langle>Ra \\<times>\\<^sub>r\n      Rb\\<rangle>list_rel;\n        \\<And>fa a b.\n           \\<lbrakk>\\<not> less' k' k; \\<not> less' k k'; True;\n            (fa, f)\n            \\<in> Ra \\<rightarrow> Rb \\<rightarrow> Rb \\<rightarrow> Rb;\n            (a, as) \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel;\n            (b, bs)\n            \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n           \\<Longrightarrow> (ord.sunion_with less fa a b,\n                              ord.sunion_with less' f as bs)\n                             \\<in> \\<langle>Ra \\<times>\\<^sub>r\n      Rb\\<rangle>list_rel;\n        (less, less') \\<in> Ra \\<rightarrow> Ra \\<rightarrow> bool_rel;\n        (fa, f) \\<in> Ra \\<rightarrow> Rb \\<rightarrow> Rb \\<rightarrow> Rb;\n        a = (aa, ba) # xs;\n        (xs, as) \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel;\n        b = (ab, bb) # xsa;\n        (xsa, bs) \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel;\n        x = (aa, ba); (k, v) = (a', b'); (aa, a') \\<in> Ra;\n        (ba, b') \\<in> Rb; xa = (ab, bb); (k', v') = (a'a, b'a);\n        (ab, a'a) \\<in> Ra; (bb, b'a) \\<in> Rb\\<rbrakk>\n       \\<Longrightarrow> (if less ab aa\n                          then (ab, bb) #\n                               ord.sunion_with less fa ((aa, ba) # xs) xsa\n                          else if less aa ab\n                               then (aa, ba) #\n                                    ord.sunion_with less fa xs\n                                     ((ab, bb) # xsa)\n                               else (aa, fa aa ba bb) #\n                                    ord.sunion_with less fa xs xsa,\n                          if less' a'a a'\n                          then (a'a, b'a) #\n                               ord.sunion_with less' f ((a', b') # as) bs\n                          else if less' a' a'a\n                               then (a', b') #\n                                    ord.sunion_with less' f as\n                                     ((a'a, b'a) # bs)\n                               else (a', f a' b' b'a) #\n                                    ord.sunion_with less' f as bs)\n                         \\<in> \\<langle>Ra \\<times>\\<^sub>r\n  Rb\\<rangle>list_rel", "apply parametricity"], ["proof (prove)\ngoal (8 subgoals):\n 1. \\<And>f k v as k' v' bs fa a b x xs xa xsa aa ba a' b' ab bb a'a b'a.\n       \\<lbrakk>\\<And>fa a b.\n                   \\<lbrakk>\\<not> less' k' k; less' k k'; True;\n                    (fa, f)\n                    \\<in> Ra \\<rightarrow>\n                          Rb \\<rightarrow> Rb \\<rightarrow> Rb;\n                    (a, as)\n                    \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel;\n                    (b, (a'a, b'a) # bs)\n                    \\<in> \\<langle>Ra \\<times>\\<^sub>r\n                                   Rb\\<rangle>list_rel\\<rbrakk>\n                   \\<Longrightarrow> (ord.sunion_with less fa a b,\nord.sunion_with less' f as ((a'a, b'a) # bs))\n                                     \\<in> \\<langle>Ra \\<times>\\<^sub>r\n              Rb\\<rangle>list_rel;\n        \\<And>fa a b.\n           \\<lbrakk>\\<not> less' k' k; \\<not> less' k k'; True;\n            (fa, f)\n            \\<in> Ra \\<rightarrow> Rb \\<rightarrow> Rb \\<rightarrow> Rb;\n            (a, as) \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel;\n            (b, bs)\n            \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n           \\<Longrightarrow> (ord.sunion_with less fa a b,\n                              ord.sunion_with less' f as bs)\n                             \\<in> \\<langle>Ra \\<times>\\<^sub>r\n      Rb\\<rangle>list_rel;\n        (less, less') \\<in> Ra \\<rightarrow> Ra \\<rightarrow> bool_rel;\n        (fa, f) \\<in> Ra \\<rightarrow> Rb \\<rightarrow> Rb \\<rightarrow> Rb;\n        a = (aa, ba) # xs;\n        (xs, as) \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel;\n        b = (ab, bb) # xsa;\n        (xsa, bs) \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel;\n        x = (aa, ba); (k, v) = (a', b'); (aa, a') \\<in> Ra;\n        (ba, b') \\<in> Rb; xa = (ab, bb); (k', v') = (a'a, b'a);\n        (ab, a'a) \\<in> Ra; (bb, b'a) \\<in> Rb; less ab aa;\n        less' a'a a'\\<rbrakk>\n       \\<Longrightarrow> less' k' k\n 2. \\<And>f k v as k' v' bs fa a b x xs xa xsa aa ba a' b' ab bb a'a b'a.\n       \\<lbrakk>\\<And>fa a b.\n                   \\<lbrakk>\\<not> less' k' k; less' k k'; True;\n                    (fa, f)\n                    \\<in> Ra \\<rightarrow>\n                          Rb \\<rightarrow> Rb \\<rightarrow> Rb;\n                    (a, as)\n                    \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel;\n                    (b, (a'a, b'a) # bs)\n                    \\<in> \\<langle>Ra \\<times>\\<^sub>r\n                                   Rb\\<rangle>list_rel\\<rbrakk>\n                   \\<Longrightarrow> (ord.sunion_with less fa a b,\nord.sunion_with less' f as ((a'a, b'a) # bs))\n                                     \\<in> \\<langle>Ra \\<times>\\<^sub>r\n              Rb\\<rangle>list_rel;\n        \\<And>fa a b.\n           \\<lbrakk>\\<not> less' k' k; \\<not> less' k k'; True;\n            (fa, f)\n            \\<in> Ra \\<rightarrow> Rb \\<rightarrow> Rb \\<rightarrow> Rb;\n            (a, as) \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel;\n            (b, bs)\n            \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n           \\<Longrightarrow> (ord.sunion_with less fa a b,\n                              ord.sunion_with less' f as bs)\n                             \\<in> \\<langle>Ra \\<times>\\<^sub>r\n      Rb\\<rangle>list_rel;\n        (less, less') \\<in> Ra \\<rightarrow> Ra \\<rightarrow> bool_rel;\n        (fa, f) \\<in> Ra \\<rightarrow> Rb \\<rightarrow> Rb \\<rightarrow> Rb;\n        a = (aa, ba) # xs;\n        (xs, as) \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel;\n        b = (ab, bb) # xsa;\n        (xsa, bs) \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel;\n        x = (aa, ba); (k, v) = (a', b'); (aa, a') \\<in> Ra;\n        (ba, b') \\<in> Rb; xa = (ab, bb); (k', v') = (a'a, b'a);\n        (ab, a'a) \\<in> Ra; (bb, b'a) \\<in> Rb; less ab aa;\n        less' a'a a'\\<rbrakk>\n       \\<Longrightarrow> True\n 3. \\<And>f k v as k' v' bs fa a b x xs xa xsa aa ba a' b' ab bb a'a b'a.\n       \\<lbrakk>\\<And>fa a b.\n                   \\<lbrakk>less' k' k; True;\n                    (fa, f)\n                    \\<in> Ra \\<rightarrow>\n                          Rb \\<rightarrow> Rb \\<rightarrow> Rb;\n                    (a, (a', b') # as)\n                    \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel;\n                    (b, bs)\n                    \\<in> \\<langle>Ra \\<times>\\<^sub>r\n                                   Rb\\<rangle>list_rel\\<rbrakk>\n                   \\<Longrightarrow> (ord.sunion_with less fa a b,\nord.sunion_with less' f ((a', b') # as) bs)\n                                     \\<in> \\<langle>Ra \\<times>\\<^sub>r\n              Rb\\<rangle>list_rel;\n        \\<And>fa a b.\n           \\<lbrakk>\\<not> less' k' k; \\<not> less' k k'; True;\n            (fa, f)\n            \\<in> Ra \\<rightarrow> Rb \\<rightarrow> Rb \\<rightarrow> Rb;\n            (a, as) \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel;\n            (b, bs)\n            \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n           \\<Longrightarrow> (ord.sunion_with less fa a b,\n                              ord.sunion_with less' f as bs)\n                             \\<in> \\<langle>Ra \\<times>\\<^sub>r\n      Rb\\<rangle>list_rel;\n        (less, less') \\<in> Ra \\<rightarrow> Ra \\<rightarrow> bool_rel;\n        (fa, f) \\<in> Ra \\<rightarrow> Rb \\<rightarrow> Rb \\<rightarrow> Rb;\n        a = (aa, ba) # xs;\n        (xs, as) \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel;\n        b = (ab, bb) # xsa;\n        (xsa, bs) \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel;\n        x = (aa, ba); (k, v) = (a', b'); (aa, a') \\<in> Ra;\n        (ba, b') \\<in> Rb; xa = (ab, bb); (k', v') = (a'a, b'a);\n        (ab, a'a) \\<in> Ra; (bb, b'a) \\<in> Rb; \\<not> less ab aa;\n        \\<not> less' a'a a'; less aa ab; less' a' a'a\\<rbrakk>\n       \\<Longrightarrow> \\<not> less' k' k\n 4. \\<And>f k v as k' v' bs fa a b x xs xa xsa aa ba a' b' ab bb a'a b'a.\n       \\<lbrakk>\\<And>fa a b.\n                   \\<lbrakk>less' k' k; True;\n                    (fa, f)\n                    \\<in> Ra \\<rightarrow>\n                          Rb \\<rightarrow> Rb \\<rightarrow> Rb;\n                    (a, (a', b') # as)\n                    \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel;\n                    (b, bs)\n                    \\<in> \\<langle>Ra \\<times>\\<^sub>r\n                                   Rb\\<rangle>list_rel\\<rbrakk>\n                   \\<Longrightarrow> (ord.sunion_with less fa a b,\nord.sunion_with less' f ((a', b') # as) bs)\n                                     \\<in> \\<langle>Ra \\<times>\\<^sub>r\n              Rb\\<rangle>list_rel;\n        \\<And>fa a b.\n           \\<lbrakk>\\<not> less' k' k; \\<not> less' k k'; True;\n            (fa, f)\n            \\<in> Ra \\<rightarrow> Rb \\<rightarrow> Rb \\<rightarrow> Rb;\n            (a, as) \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel;\n            (b, bs)\n            \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n           \\<Longrightarrow> (ord.sunion_with less fa a b,\n                              ord.sunion_with less' f as bs)\n                             \\<in> \\<langle>Ra \\<times>\\<^sub>r\n      Rb\\<rangle>list_rel;\n        (less, less') \\<in> Ra \\<rightarrow> Ra \\<rightarrow> bool_rel;\n        (fa, f) \\<in> Ra \\<rightarrow> Rb \\<rightarrow> Rb \\<rightarrow> Rb;\n        a = (aa, ba) # xs;\n        (xs, as) \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel;\n        b = (ab, bb) # xsa;\n        (xsa, bs) \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel;\n        x = (aa, ba); (k, v) = (a', b'); (aa, a') \\<in> Ra;\n        (ba, b') \\<in> Rb; xa = (ab, bb); (k', v') = (a'a, b'a);\n        (ab, a'a) \\<in> Ra; (bb, b'a) \\<in> Rb; \\<not> less ab aa;\n        \\<not> less' a'a a'; less aa ab; less' a' a'a\\<rbrakk>\n       \\<Longrightarrow> less' k k'\n 5. \\<And>f k v as k' v' bs fa a b x xs xa xsa aa ba a' b' ab bb a'a b'a.\n       \\<lbrakk>\\<And>fa a b.\n                   \\<lbrakk>less' k' k; True;\n                    (fa, f)\n                    \\<in> Ra \\<rightarrow>\n                          Rb \\<rightarrow> Rb \\<rightarrow> Rb;\n                    (a, (a', b') # as)\n                    \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel;\n                    (b, bs)\n                    \\<in> \\<langle>Ra \\<times>\\<^sub>r\n                                   Rb\\<rangle>list_rel\\<rbrakk>\n                   \\<Longrightarrow> (ord.sunion_with less fa a b,\nord.sunion_with less' f ((a', b') # as) bs)\n                                     \\<in> \\<langle>Ra \\<times>\\<^sub>r\n              Rb\\<rangle>list_rel;\n        \\<And>fa a b.\n           \\<lbrakk>\\<not> less' k' k; \\<not> less' k k'; True;\n            (fa, f)\n            \\<in> Ra \\<rightarrow> Rb \\<rightarrow> Rb \\<rightarrow> Rb;\n            (a, as) \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel;\n            (b, bs)\n            \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n           \\<Longrightarrow> (ord.sunion_with less fa a b,\n                              ord.sunion_with less' f as bs)\n                             \\<in> \\<langle>Ra \\<times>\\<^sub>r\n      Rb\\<rangle>list_rel;\n        (less, less') \\<in> Ra \\<rightarrow> Ra \\<rightarrow> bool_rel;\n        (fa, f) \\<in> Ra \\<rightarrow> Rb \\<rightarrow> Rb \\<rightarrow> Rb;\n        a = (aa, ba) # xs;\n        (xs, as) \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel;\n        b = (ab, bb) # xsa;\n        (xsa, bs) \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel;\n        x = (aa, ba); (k, v) = (a', b'); (aa, a') \\<in> Ra;\n        (ba, b') \\<in> Rb; xa = (ab, bb); (k', v') = (a'a, b'a);\n        (ab, a'a) \\<in> Ra; (bb, b'a) \\<in> Rb; \\<not> less ab aa;\n        \\<not> less' a'a a'; less aa ab; less' a' a'a\\<rbrakk>\n       \\<Longrightarrow> True\n 6. \\<And>f k v as k' v' bs fa a b x xs xa xsa aa ba a' b' ab bb a'a b'a.\n       \\<lbrakk>\\<And>fa a b.\n                   \\<lbrakk>less' k' k; True;\n                    (fa, f)\n                    \\<in> Ra \\<rightarrow>\n                          Rb \\<rightarrow> Rb \\<rightarrow> Rb;\n                    (a, (a', b') # as)\n                    \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel;\n                    (b, bs)\n                    \\<in> \\<langle>Ra \\<times>\\<^sub>r\n                                   Rb\\<rangle>list_rel\\<rbrakk>\n                   \\<Longrightarrow> (ord.sunion_with less fa a b,\nord.sunion_with less' f ((a', b') # as) bs)\n                                     \\<in> \\<langle>Ra \\<times>\\<^sub>r\n              Rb\\<rangle>list_rel;\n        \\<And>fa a b.\n           \\<lbrakk>\\<not> less' k' k; less' k k'; True;\n            (fa, f)\n            \\<in> Ra \\<rightarrow> Rb \\<rightarrow> Rb \\<rightarrow> Rb;\n            (a, as) \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel;\n            (b, (a'a, b'a) # bs)\n            \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n           \\<Longrightarrow> (ord.sunion_with less fa a b,\n                              ord.sunion_with less' f as ((a'a, b'a) # bs))\n                             \\<in> \\<langle>Ra \\<times>\\<^sub>r\n      Rb\\<rangle>list_rel;\n        (less, less') \\<in> Ra \\<rightarrow> Ra \\<rightarrow> bool_rel;\n        (fa, f) \\<in> Ra \\<rightarrow> Rb \\<rightarrow> Rb \\<rightarrow> Rb;\n        a = (aa, ba) # xs;\n        (xs, as) \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel;\n        b = (ab, bb) # xsa;\n        (xsa, bs) \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel;\n        x = (aa, ba); (k, v) = (a', b'); (aa, a') \\<in> Ra;\n        (ba, b') \\<in> Rb; xa = (ab, bb); (k', v') = (a'a, b'a);\n        (ab, a'a) \\<in> Ra; (bb, b'a) \\<in> Rb; \\<not> less ab aa;\n        \\<not> less' a'a a'; \\<not> less aa ab; \\<not> less' a' a'a\\<rbrakk>\n       \\<Longrightarrow> \\<not> less' k' k\n 7. \\<And>f k v as k' v' bs fa a b x xs xa xsa aa ba a' b' ab bb a'a b'a.\n       \\<lbrakk>\\<And>fa a b.\n                   \\<lbrakk>less' k' k; True;\n                    (fa, f)\n                    \\<in> Ra \\<rightarrow>\n                          Rb \\<rightarrow> Rb \\<rightarrow> Rb;\n                    (a, (a', b') # as)\n                    \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel;\n                    (b, bs)\n                    \\<in> \\<langle>Ra \\<times>\\<^sub>r\n                                   Rb\\<rangle>list_rel\\<rbrakk>\n                   \\<Longrightarrow> (ord.sunion_with less fa a b,\nord.sunion_with less' f ((a', b') # as) bs)\n                                     \\<in> \\<langle>Ra \\<times>\\<^sub>r\n              Rb\\<rangle>list_rel;\n        \\<And>fa a b.\n           \\<lbrakk>\\<not> less' k' k; less' k k'; True;\n            (fa, f)\n            \\<in> Ra \\<rightarrow> Rb \\<rightarrow> Rb \\<rightarrow> Rb;\n            (a, as) \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel;\n            (b, (a'a, b'a) # bs)\n            \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n           \\<Longrightarrow> (ord.sunion_with less fa a b,\n                              ord.sunion_with less' f as ((a'a, b'a) # bs))\n                             \\<in> \\<langle>Ra \\<times>\\<^sub>r\n      Rb\\<rangle>list_rel;\n        (less, less') \\<in> Ra \\<rightarrow> Ra \\<rightarrow> bool_rel;\n        (fa, f) \\<in> Ra \\<rightarrow> Rb \\<rightarrow> Rb \\<rightarrow> Rb;\n        a = (aa, ba) # xs;\n        (xs, as) \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel;\n        b = (ab, bb) # xsa;\n        (xsa, bs) \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel;\n        x = (aa, ba); (k, v) = (a', b'); (aa, a') \\<in> Ra;\n        (ba, b') \\<in> Rb; xa = (ab, bb); (k', v') = (a'a, b'a);\n        (ab, a'a) \\<in> Ra; (bb, b'a) \\<in> Rb; \\<not> less ab aa;\n        \\<not> less' a'a a'; \\<not> less aa ab; \\<not> less' a' a'a\\<rbrakk>\n       \\<Longrightarrow> \\<not> less' k k'\n 8. \\<And>f k v as k' v' bs fa a b x xs xa xsa aa ba a' b' ab bb a'a b'a.\n       \\<lbrakk>\\<And>fa a b.\n                   \\<lbrakk>less' k' k; True;\n                    (fa, f)\n                    \\<in> Ra \\<rightarrow>\n                          Rb \\<rightarrow> Rb \\<rightarrow> Rb;\n                    (a, (a', b') # as)\n                    \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel;\n                    (b, bs)\n                    \\<in> \\<langle>Ra \\<times>\\<^sub>r\n                                   Rb\\<rangle>list_rel\\<rbrakk>\n                   \\<Longrightarrow> (ord.sunion_with less fa a b,\nord.sunion_with less' f ((a', b') # as) bs)\n                                     \\<in> \\<langle>Ra \\<times>\\<^sub>r\n              Rb\\<rangle>list_rel;\n        \\<And>fa a b.\n           \\<lbrakk>\\<not> less' k' k; less' k k'; True;\n            (fa, f)\n            \\<in> Ra \\<rightarrow> Rb \\<rightarrow> Rb \\<rightarrow> Rb;\n            (a, as) \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel;\n            (b, (a'a, b'a) # bs)\n            \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel\\<rbrakk>\n           \\<Longrightarrow> (ord.sunion_with less fa a b,\n                              ord.sunion_with less' f as ((a'a, b'a) # bs))\n                             \\<in> \\<langle>Ra \\<times>\\<^sub>r\n      Rb\\<rangle>list_rel;\n        (less, less') \\<in> Ra \\<rightarrow> Ra \\<rightarrow> bool_rel;\n        (fa, f) \\<in> Ra \\<rightarrow> Rb \\<rightarrow> Rb \\<rightarrow> Rb;\n        a = (aa, ba) # xs;\n        (xs, as) \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel;\n        b = (ab, bb) # xsa;\n        (xsa, bs) \\<in> \\<langle>Ra \\<times>\\<^sub>r Rb\\<rangle>list_rel;\n        x = (aa, ba); (k, v) = (a', b'); (aa, a') \\<in> Ra;\n        (ba, b') \\<in> Rb; xa = (ab, bb); (k', v') = (a'a, b'a);\n        (ab, a'a) \\<in> Ra; (bb, b'a) \\<in> Rb; \\<not> less ab aa;\n        \\<not> less' a'a a'; \\<not> less aa ab; \\<not> less' a' a'a\\<rbrakk>\n       \\<Longrightarrow> True", "apply simp_all"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma skip_red_alt:\n    \"RBT_Impl.skip_red t = (case t of \n      (Branch color.R l k v r) \\<Rightarrow> l\n    | _ \\<Rightarrow> t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. RBT_Impl.skip_red t =\n    (case t of rbt.Empty \\<Rightarrow> t\n     | Branch color.R l k v r \\<Rightarrow> l\n     | Branch color.B l k v r \\<Rightarrow> t)", "by (auto split: rbt.split color.split)"], ["", "function compare_height :: \n    \"('a, 'b) RBT_Impl.rbt \\<Rightarrow> ('a, 'b) RBT_Impl.rbt \\<Rightarrow> ('a, 'b) RBT_Impl.rbt \\<Rightarrow> ('a, 'b) RBT_Impl.rbt \\<Rightarrow> RBT_Impl.compare\"\n    where\n    \"compare_height sx s t tx =\n  (case (RBT_Impl.skip_red sx, RBT_Impl.skip_red s, RBT_Impl.skip_red t, RBT_Impl.skip_red tx) of\n     (Branch _ sx' _ _ _, Branch _ s' _ _ _, Branch _ t' _ _ _, Branch _ tx' _ _ _) \\<Rightarrow> \n       compare_height (RBT_Impl.skip_black sx') s' t' (RBT_Impl.skip_black tx')\n   | (_, rbt.Empty, _, Branch _ _ _ _ _) \\<Rightarrow> RBT_Impl.LT\n   | (Branch _ _ _ _ _, _, rbt.Empty, _) \\<Rightarrow> RBT_Impl.GT\n   | (Branch _ sx' _ _ _, Branch _ s' _ _ _, Branch _ t' _ _ _, rbt.Empty) \\<Rightarrow>\n       compare_height (RBT_Impl.skip_black sx') s' t' rbt.Empty\n   | (rbt.Empty, Branch _ s' _ _ _, Branch _ t' _ _ _, Branch _ tx' _ _ _) \\<Rightarrow>\n       compare_height rbt.Empty s' t' (RBT_Impl.skip_black tx')\n   | _ \\<Rightarrow> RBT_Impl.EQ)\""], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>P x.\n       (\\<And>sx s t tx.\n           x = (sx, s, t, tx) \\<Longrightarrow> P) \\<Longrightarrow>\n       P\n 2. \\<And>sx s t tx sxa sa ta txa.\n       (sx, s, t, tx) = (sxa, sa, ta, txa) \\<Longrightarrow>\n       (case (RBT_Impl.skip_red sx, RBT_Impl.skip_red s,\n              RBT_Impl.skip_red t, RBT_Impl.skip_red tx) of\n        (rbt.Empty, rbt.Empty, xa, rbt.Empty) \\<Rightarrow> compare.EQ\n        | (rbt.Empty, rbt.Empty, xa, Branch xb xc xd xe xf) \\<Rightarrow>\n            compare.LT\n        | (rbt.Empty, Branch x s' xa xb xc, rbt.Empty, b) \\<Rightarrow>\n            compare.EQ\n        | (rbt.Empty, Branch x s' xa xb xc, Branch xd t' xe xf xg,\n           rbt.Empty) \\<Rightarrow>\n            compare.EQ\n        | (rbt.Empty, Branch x s' xa xb xc, Branch xd t' xe xf xg,\n           Branch xh tx' xi xj xk) \\<Rightarrow>\n            compare_height_sumC (rbt.Empty, s', t', RBT_Impl.skip_black tx')\n        | (Branch xa sx' xaa xb xc, rbt.Empty, rbt.Empty,\n           rbt.Empty) \\<Rightarrow>\n            compare.GT\n        | (Branch xa sx' xaa xb xc, rbt.Empty, rbt.Empty,\n           Branch xba xca xd xe xfa) \\<Rightarrow>\n            compare.LT\n        | (Branch xa sx' xaa xb xc, rbt.Empty,\n           Branch colora rbt1a aa bb rbt2a, rbt.Empty) \\<Rightarrow>\n            compare.EQ\n        | (Branch xa sx' xaa xb xc, rbt.Empty,\n           Branch colora rbt1a aa bb rbt2a,\n           Branch xba xca xd xe xfa) \\<Rightarrow>\n            compare.LT\n        | (Branch xa sx' xaa xb xc, Branch xd s' xea xf xg, rbt.Empty,\n           xfa) \\<Rightarrow>\n            compare.GT\n        | (Branch xa sx' xaa xb xc, Branch xd s' xea xf xg,\n           Branch xh t' xi xj xk, rbt.Empty) \\<Rightarrow>\n            compare_height_sumC (RBT_Impl.skip_black sx', s', t', rbt.Empty)\n        | (Branch xa sx' xaa xb xc, Branch xd s' xea xf xg,\n           Branch xh t' xi xj xk, Branch xl tx' xm xn xo) \\<Rightarrow>\n            compare_height_sumC\n             (RBT_Impl.skip_black sx', s', t', RBT_Impl.skip_black tx')) =\n       (case (RBT_Impl.skip_red sxa, RBT_Impl.skip_red sa,\n              RBT_Impl.skip_red ta, RBT_Impl.skip_red txa) of\n        (rbt.Empty, rbt.Empty, xa, rbt.Empty) \\<Rightarrow> compare.EQ\n        | (rbt.Empty, rbt.Empty, xa, Branch xb xc xd xe xf) \\<Rightarrow>\n            compare.LT\n        | (rbt.Empty, Branch x s' xa xb xc, rbt.Empty, b) \\<Rightarrow>\n            compare.EQ\n        | (rbt.Empty, Branch x s' xa xb xc, Branch xd t' xe xf xg,\n           rbt.Empty) \\<Rightarrow>\n            compare.EQ\n        | (rbt.Empty, Branch x s' xa xb xc, Branch xd t' xe xf xg,\n           Branch xh tx' xi xj xk) \\<Rightarrow>\n            compare_height_sumC (rbt.Empty, s', t', RBT_Impl.skip_black tx')\n        | (Branch xa sx' xaa xb xc, rbt.Empty, rbt.Empty,\n           rbt.Empty) \\<Rightarrow>\n            compare.GT\n        | (Branch xa sx' xaa xb xc, rbt.Empty, rbt.Empty,\n           Branch xba xca xd xe xfa) \\<Rightarrow>\n            compare.LT\n        | (Branch xa sx' xaa xb xc, rbt.Empty,\n           Branch colora rbt1a aa bb rbt2a, rbt.Empty) \\<Rightarrow>\n            compare.EQ\n        | (Branch xa sx' xaa xb xc, rbt.Empty,\n           Branch colora rbt1a aa bb rbt2a,\n           Branch xba xca xd xe xfa) \\<Rightarrow>\n            compare.LT\n        | (Branch xa sx' xaa xb xc, Branch xd s' xea xf xg, rbt.Empty,\n           xfa) \\<Rightarrow>\n            compare.GT\n        | (Branch xa sx' xaa xb xc, Branch xd s' xea xf xg,\n           Branch xh t' xi xj xk, rbt.Empty) \\<Rightarrow>\n            compare_height_sumC (RBT_Impl.skip_black sx', s', t', rbt.Empty)\n        | (Branch xa sx' xaa xb xc, Branch xd s' xea xf xg,\n           Branch xh t' xi xj xk, Branch xl tx' xm xn xo) \\<Rightarrow>\n            compare_height_sumC\n             (RBT_Impl.skip_black sx', s', t', RBT_Impl.skip_black tx'))", "by pat_completeness auto"], ["", "lemma skip_red_size: \"size (RBT_Impl.skip_red b) \\<le> size b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. size (RBT_Impl.skip_red b) \\<le> size b", "by (auto simp add: skip_red_alt split: rbt.split color.split)"], ["", "lemma skip_black_size: \"size (RBT_Impl.skip_black b) \\<le> size b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. size (RBT_Impl.skip_black b) \\<le> size b", "unfolding RBT_Impl.skip_black_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. size\n     (let t' = RBT_Impl.skip_red b\n      in case t' of rbt.Empty \\<Rightarrow> t'\n         | Branch color.R l k v r \\<Rightarrow> t'\n         | Branch color.B l k v r \\<Rightarrow> l)\n    \\<le> size b", "apply (auto \n      simp add: Let_def \n      split: rbt.split color.split\n    )"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x22 x23 x24 x25.\n       RBT_Impl.skip_red b =\n       Branch color.R x22 x23 x24 x25 \\<Longrightarrow>\n       Suc (size x22 + size x25) \\<le> size b\n 2. \\<And>x22 x23 x24 x25.\n       RBT_Impl.skip_red b =\n       Branch color.B x22 x23 x24 x25 \\<Longrightarrow>\n       size x22 \\<le> size b", "using skip_red_size[of b]"], ["proof (prove)\nusing this:\n  size (RBT_Impl.skip_red b) \\<le> size b\n\ngoal (2 subgoals):\n 1. \\<And>x22 x23 x24 x25.\n       RBT_Impl.skip_red b =\n       Branch color.R x22 x23 x24 x25 \\<Longrightarrow>\n       Suc (size x22 + size x25) \\<le> size b\n 2. \\<And>x22 x23 x24 x25.\n       RBT_Impl.skip_red b =\n       Branch color.B x22 x23 x24 x25 \\<Longrightarrow>\n       size x22 \\<le> size b", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "termination"], ["proof (prove)\ngoal (1 subgoal):\n 1. All compare_height_dom", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. All compare_height_dom", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. All compare_height_dom", "fix s t x"], ["proof (state)\ngoal (1 subgoal):\n 1. All compare_height_dom", "assume A: \"s = RBT_Impl.skip_red t\"\n        and B: \"x < size s\""], ["proof (state)\nthis:\n  s = RBT_Impl.skip_red t\n  x < size s\n\ngoal (1 subgoal):\n 1. All compare_height_dom", "note B"], ["proof (state)\nthis:\n  x < size s\n\ngoal (1 subgoal):\n 1. All compare_height_dom", "also"], ["proof (state)\nthis:\n  x < size s\n\ngoal (1 subgoal):\n 1. All compare_height_dom", "note A"], ["proof (state)\nthis:\n  s = RBT_Impl.skip_red t\n\ngoal (1 subgoal):\n 1. All compare_height_dom", "also"], ["proof (state)\nthis:\n  s = RBT_Impl.skip_red t\n\ngoal (1 subgoal):\n 1. All compare_height_dom", "note skip_red_size"], ["proof (state)\nthis:\n  size (RBT_Impl.skip_red ?b) \\<le> size ?b\n\ngoal (1 subgoal):\n 1. All compare_height_dom", "finally"], ["proof (chain)\npicking this:\n  x < size t", "have \"x < size t\""], ["proof (prove)\nusing this:\n  x < size t\n\ngoal (1 subgoal):\n 1. x < size t", "."], ["proof (state)\nthis:\n  x < size t\n\ngoal (1 subgoal):\n 1. All compare_height_dom", "}"], ["proof (state)\nthis:\n  \\<lbrakk>?s2 = RBT_Impl.skip_red ?t2; ?x2 < size ?s2\\<rbrakk>\n  \\<Longrightarrow> ?x2 < size ?t2\n\ngoal (1 subgoal):\n 1. All compare_height_dom", "note AUX=this"], ["proof (state)\nthis:\n  \\<lbrakk>?s2 = RBT_Impl.skip_red ?t2; ?x2 < size ?s2\\<rbrakk>\n  \\<Longrightarrow> ?x2 < size ?t2\n\ngoal (1 subgoal):\n 1. All compare_height_dom", "show \"All compare_height_dom\""], ["proof (prove)\ngoal (1 subgoal):\n 1. All compare_height_dom", "apply (relation \n        \"measure (\\<lambda>(a, b, c, d). size a + size b + size c + size d)\")"], ["proof (prove)\ngoal (4 subgoals):\n 1. wf (measure (\\<lambda>(a, b, c, d). size a + size b + size c + size d))\n 2. \\<And>sx s t tx x y xa ya x21 x22 x23 x24 x25 xb yb x21a x22a x23a x24a\n       x25a x21b x22b x23b x24b x25b.\n       \\<lbrakk>(x, y) =\n                (RBT_Impl.skip_red sx, RBT_Impl.skip_red s,\n                 RBT_Impl.skip_red t, RBT_Impl.skip_red tx);\n        x = rbt.Empty; (xa, ya) = y; xa = Branch x21 x22 x23 x24 x25;\n        (xb, yb) = ya; xb = Branch x21a x22a x23a x24a x25a;\n        yb = Branch x21b x22b x23b x24b x25b\\<rbrakk>\n       \\<Longrightarrow> ((rbt.Empty, x22, x22a, RBT_Impl.skip_black x22b),\n                          sx, s, t, tx)\n                         \\<in> measure\n                                (\\<lambda>(a, b, c, d).\n                                    size a + size b + size c + size d)\n 3. \\<And>sx s t tx x y x21 x22 x23 x24 x25 xa ya x21a x22a x23a x24a x25a\n       xb yb x21b x22b x23b x24b x25b.\n       \\<lbrakk>(x, y) =\n                (RBT_Impl.skip_red sx, RBT_Impl.skip_red s,\n                 RBT_Impl.skip_red t, RBT_Impl.skip_red tx);\n        x = Branch x21 x22 x23 x24 x25; (xa, ya) = y;\n        xa = Branch x21a x22a x23a x24a x25a; (xb, yb) = ya;\n        xb = Branch x21b x22b x23b x24b x25b; yb = rbt.Empty\\<rbrakk>\n       \\<Longrightarrow> ((RBT_Impl.skip_black x22, x22a, x22b, rbt.Empty),\n                          sx, s, t, tx)\n                         \\<in> measure\n                                (\\<lambda>(a, b, c, d).\n                                    size a + size b + size c + size d)\n 4. \\<And>sx s t tx x y x21 x22 x23 x24 x25 xa ya x21a x22a x23a x24a x25a\n       xb yb x21b x22b x23b x24b x25b x21c x22c x23c x24c x25c.\n       \\<lbrakk>(x, y) =\n                (RBT_Impl.skip_red sx, RBT_Impl.skip_red s,\n                 RBT_Impl.skip_red t, RBT_Impl.skip_red tx);\n        x = Branch x21 x22 x23 x24 x25; (xa, ya) = y;\n        xa = Branch x21a x22a x23a x24a x25a; (xb, yb) = ya;\n        xb = Branch x21b x22b x23b x24b x25b;\n        yb = Branch x21c x22c x23c x24c x25c\\<rbrakk>\n       \\<Longrightarrow> ((RBT_Impl.skip_black x22, x22a, x22b,\n                           RBT_Impl.skip_black x22c),\n                          sx, s, t, tx)\n                         \\<in> measure\n                                (\\<lambda>(a, b, c, d).\n                                    size a + size b + size c + size d)", "apply rule"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>sx s t tx x y xa ya x21 x22 x23 x24 x25 xb yb x21a x22a x23a x24a\n       x25a x21b x22b x23b x24b x25b.\n       \\<lbrakk>(x, y) =\n                (RBT_Impl.skip_red sx, RBT_Impl.skip_red s,\n                 RBT_Impl.skip_red t, RBT_Impl.skip_red tx);\n        x = rbt.Empty; (xa, ya) = y; xa = Branch x21 x22 x23 x24 x25;\n        (xb, yb) = ya; xb = Branch x21a x22a x23a x24a x25a;\n        yb = Branch x21b x22b x23b x24b x25b\\<rbrakk>\n       \\<Longrightarrow> ((rbt.Empty, x22, x22a, RBT_Impl.skip_black x22b),\n                          sx, s, t, tx)\n                         \\<in> measure\n                                (\\<lambda>(a, b, c, d).\n                                    size a + size b + size c + size d)\n 2. \\<And>sx s t tx x y x21 x22 x23 x24 x25 xa ya x21a x22a x23a x24a x25a\n       xb yb x21b x22b x23b x24b x25b.\n       \\<lbrakk>(x, y) =\n                (RBT_Impl.skip_red sx, RBT_Impl.skip_red s,\n                 RBT_Impl.skip_red t, RBT_Impl.skip_red tx);\n        x = Branch x21 x22 x23 x24 x25; (xa, ya) = y;\n        xa = Branch x21a x22a x23a x24a x25a; (xb, yb) = ya;\n        xb = Branch x21b x22b x23b x24b x25b; yb = rbt.Empty\\<rbrakk>\n       \\<Longrightarrow> ((RBT_Impl.skip_black x22, x22a, x22b, rbt.Empty),\n                          sx, s, t, tx)\n                         \\<in> measure\n                                (\\<lambda>(a, b, c, d).\n                                    size a + size b + size c + size d)\n 3. \\<And>sx s t tx x y x21 x22 x23 x24 x25 xa ya x21a x22a x23a x24a x25a\n       xb yb x21b x22b x23b x24b x25b x21c x22c x23c x24c x25c.\n       \\<lbrakk>(x, y) =\n                (RBT_Impl.skip_red sx, RBT_Impl.skip_red s,\n                 RBT_Impl.skip_red t, RBT_Impl.skip_red tx);\n        x = Branch x21 x22 x23 x24 x25; (xa, ya) = y;\n        xa = Branch x21a x22a x23a x24a x25a; (xb, yb) = ya;\n        xb = Branch x21b x22b x23b x24b x25b;\n        yb = Branch x21c x22c x23c x24c x25c\\<rbrakk>\n       \\<Longrightarrow> ((RBT_Impl.skip_black x22, x22a, x22b,\n                           RBT_Impl.skip_black x22c),\n                          sx, s, t, tx)\n                         \\<in> measure\n                                (\\<lambda>(a, b, c, d).\n                                    size a + size b + size c + size d)", "(* FIXME: This is solved by\n        apply (smt rbt.size(4) skip_black_size skip_red_size)+\n        which is, however, not allowed for afp.\n        *)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>sx s t tx x y xa ya x21 x22 x23 x24 x25 xb yb x21a x22a x23a x24a\n       x25a x21b x22b x23b x24b x25b.\n       \\<lbrakk>(x, y) =\n                (RBT_Impl.skip_red sx, RBT_Impl.skip_red s,\n                 RBT_Impl.skip_red t, RBT_Impl.skip_red tx);\n        x = rbt.Empty; (xa, ya) = y; xa = Branch x21 x22 x23 x24 x25;\n        (xb, yb) = ya; xb = Branch x21a x22a x23a x24a x25a;\n        yb = Branch x21b x22b x23b x24b x25b\\<rbrakk>\n       \\<Longrightarrow> ((rbt.Empty, x22, x22a, RBT_Impl.skip_black x22b),\n                          sx, s, t, tx)\n                         \\<in> measure\n                                (\\<lambda>(a, b, c, d).\n                                    size a + size b + size c + size d)\n 2. \\<And>sx s t tx x y x21 x22 x23 x24 x25 xa ya x21a x22a x23a x24a x25a\n       xb yb x21b x22b x23b x24b x25b.\n       \\<lbrakk>(x, y) =\n                (RBT_Impl.skip_red sx, RBT_Impl.skip_red s,\n                 RBT_Impl.skip_red t, RBT_Impl.skip_red tx);\n        x = Branch x21 x22 x23 x24 x25; (xa, ya) = y;\n        xa = Branch x21a x22a x23a x24a x25a; (xb, yb) = ya;\n        xb = Branch x21b x22b x23b x24b x25b; yb = rbt.Empty\\<rbrakk>\n       \\<Longrightarrow> ((RBT_Impl.skip_black x22, x22a, x22b, rbt.Empty),\n                          sx, s, t, tx)\n                         \\<in> measure\n                                (\\<lambda>(a, b, c, d).\n                                    size a + size b + size c + size d)\n 3. \\<And>sx s t tx x y x21 x22 x23 x24 x25 xa ya x21a x22a x23a x24a x25a\n       xb yb x21b x22b x23b x24b x25b x21c x22c x23c x24c x25c.\n       \\<lbrakk>(x, y) =\n                (RBT_Impl.skip_red sx, RBT_Impl.skip_red s,\n                 RBT_Impl.skip_red t, RBT_Impl.skip_red tx);\n        x = Branch x21 x22 x23 x24 x25; (xa, ya) = y;\n        xa = Branch x21a x22a x23a x24a x25a; (xb, yb) = ya;\n        xb = Branch x21b x22b x23b x24b x25b;\n        yb = Branch x21c x22c x23c x24c x25c\\<rbrakk>\n       \\<Longrightarrow> ((RBT_Impl.skip_black x22, x22a, x22b,\n                           RBT_Impl.skip_black x22c),\n                          sx, s, t, tx)\n                         \\<in> measure\n                                (\\<lambda>(a, b, c, d).\n                                    size a + size b + size c + size d)", "apply (clarsimp simp: Let_def split: rbt.splits color.splits)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>sx s t tx x21 x22 x23 x24 x25 x21a x22a x23a x24a x25a x21b x22b\n       x23b x24b x25b.\n       \\<lbrakk>rbt.Empty = RBT_Impl.skip_red sx;\n        Branch x21 x22 x23 x24 x25 = RBT_Impl.skip_red s;\n        Branch x21a x22a x23a x24a x25a = RBT_Impl.skip_red t;\n        Branch x21b x22b x23b x24b x25b = RBT_Impl.skip_red tx\\<rbrakk>\n       \\<Longrightarrow> size x22 + size x22a +\n                         size (RBT_Impl.skip_black x22b)\n                         < size sx + size s + size t + size tx\n 2. \\<And>sx s t tx x y x21 x22 x23 x24 x25 xa ya x21a x22a x23a x24a x25a\n       xb yb x21b x22b x23b x24b x25b.\n       \\<lbrakk>(x, y) =\n                (RBT_Impl.skip_red sx, RBT_Impl.skip_red s,\n                 RBT_Impl.skip_red t, RBT_Impl.skip_red tx);\n        x = Branch x21 x22 x23 x24 x25; (xa, ya) = y;\n        xa = Branch x21a x22a x23a x24a x25a; (xb, yb) = ya;\n        xb = Branch x21b x22b x23b x24b x25b; yb = rbt.Empty\\<rbrakk>\n       \\<Longrightarrow> ((RBT_Impl.skip_black x22, x22a, x22b, rbt.Empty),\n                          sx, s, t, tx)\n                         \\<in> measure\n                                (\\<lambda>(a, b, c, d).\n                                    size a + size b + size c + size d)\n 3. \\<And>sx s t tx x y x21 x22 x23 x24 x25 xa ya x21a x22a x23a x24a x25a\n       xb yb x21b x22b x23b x24b x25b x21c x22c x23c x24c x25c.\n       \\<lbrakk>(x, y) =\n                (RBT_Impl.skip_red sx, RBT_Impl.skip_red s,\n                 RBT_Impl.skip_red t, RBT_Impl.skip_red tx);\n        x = Branch x21 x22 x23 x24 x25; (xa, ya) = y;\n        xa = Branch x21a x22a x23a x24a x25a; (xb, yb) = ya;\n        xb = Branch x21b x22b x23b x24b x25b;\n        yb = Branch x21c x22c x23c x24c x25c\\<rbrakk>\n       \\<Longrightarrow> ((RBT_Impl.skip_black x22, x22a, x22b,\n                           RBT_Impl.skip_black x22c),\n                          sx, s, t, tx)\n                         \\<in> measure\n                                (\\<lambda>(a, b, c, d).\n                                    size a + size b + size c + size d)", "apply (intro add_less_mono trans_less_add2 \n        order_le_less_trans[OF skip_black_size], (erule AUX, simp)+) []"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>sx s t tx x y x21 x22 x23 x24 x25 xa ya x21a x22a x23a x24a x25a\n       xb yb x21b x22b x23b x24b x25b.\n       \\<lbrakk>(x, y) =\n                (RBT_Impl.skip_red sx, RBT_Impl.skip_red s,\n                 RBT_Impl.skip_red t, RBT_Impl.skip_red tx);\n        x = Branch x21 x22 x23 x24 x25; (xa, ya) = y;\n        xa = Branch x21a x22a x23a x24a x25a; (xb, yb) = ya;\n        xb = Branch x21b x22b x23b x24b x25b; yb = rbt.Empty\\<rbrakk>\n       \\<Longrightarrow> ((RBT_Impl.skip_black x22, x22a, x22b, rbt.Empty),\n                          sx, s, t, tx)\n                         \\<in> measure\n                                (\\<lambda>(a, b, c, d).\n                                    size a + size b + size c + size d)\n 2. \\<And>sx s t tx x y x21 x22 x23 x24 x25 xa ya x21a x22a x23a x24a x25a\n       xb yb x21b x22b x23b x24b x25b x21c x22c x23c x24c x25c.\n       \\<lbrakk>(x, y) =\n                (RBT_Impl.skip_red sx, RBT_Impl.skip_red s,\n                 RBT_Impl.skip_red t, RBT_Impl.skip_red tx);\n        x = Branch x21 x22 x23 x24 x25; (xa, ya) = y;\n        xa = Branch x21a x22a x23a x24a x25a; (xb, yb) = ya;\n        xb = Branch x21b x22b x23b x24b x25b;\n        yb = Branch x21c x22c x23c x24c x25c\\<rbrakk>\n       \\<Longrightarrow> ((RBT_Impl.skip_black x22, x22a, x22b,\n                           RBT_Impl.skip_black x22c),\n                          sx, s, t, tx)\n                         \\<in> measure\n                                (\\<lambda>(a, b, c, d).\n                                    size a + size b + size c + size d)", "apply (clarsimp simp: Let_def split: rbt.splits color.splits)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>sx s t tx x21 x22 x23 x24 x25 x21a x22a x23a x24a x25a x21b x22b\n       x23b x24b x25b.\n       \\<lbrakk>Branch x21 x22 x23 x24 x25 = RBT_Impl.skip_red sx;\n        Branch x21a x22a x23a x24a x25a = RBT_Impl.skip_red s;\n        Branch x21b x22b x23b x24b x25b = RBT_Impl.skip_red t;\n        rbt.Empty = RBT_Impl.skip_red tx\\<rbrakk>\n       \\<Longrightarrow> size (RBT_Impl.skip_black x22) + size x22a +\n                         size x22b\n                         < size sx + size s + size t + size tx\n 2. \\<And>sx s t tx x y x21 x22 x23 x24 x25 xa ya x21a x22a x23a x24a x25a\n       xb yb x21b x22b x23b x24b x25b x21c x22c x23c x24c x25c.\n       \\<lbrakk>(x, y) =\n                (RBT_Impl.skip_red sx, RBT_Impl.skip_red s,\n                 RBT_Impl.skip_red t, RBT_Impl.skip_red tx);\n        x = Branch x21 x22 x23 x24 x25; (xa, ya) = y;\n        xa = Branch x21a x22a x23a x24a x25a; (xb, yb) = ya;\n        xb = Branch x21b x22b x23b x24b x25b;\n        yb = Branch x21c x22c x23c x24c x25c\\<rbrakk>\n       \\<Longrightarrow> ((RBT_Impl.skip_black x22, x22a, x22b,\n                           RBT_Impl.skip_black x22c),\n                          sx, s, t, tx)\n                         \\<in> measure\n                                (\\<lambda>(a, b, c, d).\n                                    size a + size b + size c + size d)", "apply (rule trans_less_add1)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>sx s t tx x21 x22 x23 x24 x25 x21a x22a x23a x24a x25a x21b x22b\n       x23b x24b x25b.\n       \\<lbrakk>Branch x21 x22 x23 x24 x25 = RBT_Impl.skip_red sx;\n        Branch x21a x22a x23a x24a x25a = RBT_Impl.skip_red s;\n        Branch x21b x22b x23b x24b x25b = RBT_Impl.skip_red t;\n        rbt.Empty = RBT_Impl.skip_red tx\\<rbrakk>\n       \\<Longrightarrow> size (RBT_Impl.skip_black x22) + size x22a +\n                         size x22b\n                         < size sx + size s + size t\n 2. \\<And>sx s t tx x y x21 x22 x23 x24 x25 xa ya x21a x22a x23a x24a x25a\n       xb yb x21b x22b x23b x24b x25b x21c x22c x23c x24c x25c.\n       \\<lbrakk>(x, y) =\n                (RBT_Impl.skip_red sx, RBT_Impl.skip_red s,\n                 RBT_Impl.skip_red t, RBT_Impl.skip_red tx);\n        x = Branch x21 x22 x23 x24 x25; (xa, ya) = y;\n        xa = Branch x21a x22a x23a x24a x25a; (xb, yb) = ya;\n        xb = Branch x21b x22b x23b x24b x25b;\n        yb = Branch x21c x22c x23c x24c x25c\\<rbrakk>\n       \\<Longrightarrow> ((RBT_Impl.skip_black x22, x22a, x22b,\n                           RBT_Impl.skip_black x22c),\n                          sx, s, t, tx)\n                         \\<in> measure\n                                (\\<lambda>(a, b, c, d).\n                                    size a + size b + size c + size d)", "apply (intro add_less_mono trans_less_add2 \n        order_le_less_trans[OF skip_black_size], (erule AUX, simp)+) []"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>sx s t tx x y x21 x22 x23 x24 x25 xa ya x21a x22a x23a x24a x25a\n       xb yb x21b x22b x23b x24b x25b x21c x22c x23c x24c x25c.\n       \\<lbrakk>(x, y) =\n                (RBT_Impl.skip_red sx, RBT_Impl.skip_red s,\n                 RBT_Impl.skip_red t, RBT_Impl.skip_red tx);\n        x = Branch x21 x22 x23 x24 x25; (xa, ya) = y;\n        xa = Branch x21a x22a x23a x24a x25a; (xb, yb) = ya;\n        xb = Branch x21b x22b x23b x24b x25b;\n        yb = Branch x21c x22c x23c x24c x25c\\<rbrakk>\n       \\<Longrightarrow> ((RBT_Impl.skip_black x22, x22a, x22b,\n                           RBT_Impl.skip_black x22c),\n                          sx, s, t, tx)\n                         \\<in> measure\n                                (\\<lambda>(a, b, c, d).\n                                    size a + size b + size c + size d)", "apply (clarsimp simp: Let_def split: rbt.splits color.splits)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>sx s t tx x21 x22 x23 x24 x25 x21a x22a x23a x24a x25a x21b x22b\n       x23b x24b x25b x21c x22c x23c x24c x25c.\n       \\<lbrakk>Branch x21 x22 x23 x24 x25 = RBT_Impl.skip_red sx;\n        Branch x21a x22a x23a x24a x25a = RBT_Impl.skip_red s;\n        Branch x21b x22b x23b x24b x25b = RBT_Impl.skip_red t;\n        Branch x21c x22c x23c x24c x25c = RBT_Impl.skip_red tx\\<rbrakk>\n       \\<Longrightarrow> size (RBT_Impl.skip_black x22) + size x22a +\n                         size x22b +\n                         size (RBT_Impl.skip_black x22c)\n                         < size sx + size s + size t + size tx", "apply (intro add_less_mono trans_less_add2 \n        order_le_less_trans[OF skip_black_size], (erule AUX, simp)+) []"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  All compare_height_dom\n\ngoal:\nNo subgoals!", "qed"], ["", "lemmas [simp del] = compare_height.simps"], ["", "lemma compare_height_alt: \n    \"RBT_Impl.compare_height sx s t tx = compare_height sx s t tx\""], ["proof (prove)\ngoal (1 subgoal):\n 1. RBT_Impl.compare_height sx s t tx = compare_height sx s t tx", "apply (induct sx s t tx rule: compare_height.induct)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>sx s t tx.\n       \\<lbrakk>\\<And>x y xa ya x21 x22 x23 x24 x25 xb yb x21a x22a x23a\n                   x24a x25a x21b x22b x23b x24b x25b.\n                   \\<lbrakk>(x, y) =\n                            (RBT_Impl.skip_red sx, RBT_Impl.skip_red s,\n                             RBT_Impl.skip_red t, RBT_Impl.skip_red tx);\n                    x = rbt.Empty; (xa, ya) = y;\n                    xa = Branch x21 x22 x23 x24 x25; (xb, yb) = ya;\n                    xb = Branch x21a x22a x23a x24a x25a;\n                    yb = Branch x21b x22b x23b x24b x25b\\<rbrakk>\n                   \\<Longrightarrow> RBT_Impl.compare_height rbt.Empty x22\nx22a (RBT_Impl.skip_black x22b) =\n                                     compare_height rbt.Empty x22 x22a\n(RBT_Impl.skip_black x22b);\n        \\<And>x y x21 x22 x23 x24 x25 xa ya x21a x22a x23a x24a x25a xb yb\n           x21b x22b x23b x24b x25b.\n           \\<lbrakk>(x, y) =\n                    (RBT_Impl.skip_red sx, RBT_Impl.skip_red s,\n                     RBT_Impl.skip_red t, RBT_Impl.skip_red tx);\n            x = Branch x21 x22 x23 x24 x25; (xa, ya) = y;\n            xa = Branch x21a x22a x23a x24a x25a; (xb, yb) = ya;\n            xb = Branch x21b x22b x23b x24b x25b; yb = rbt.Empty\\<rbrakk>\n           \\<Longrightarrow> RBT_Impl.compare_height\n                              (RBT_Impl.skip_black x22) x22a x22b\n                              rbt.Empty =\n                             compare_height (RBT_Impl.skip_black x22) x22a\n                              x22b rbt.Empty;\n        \\<And>x y x21 x22 x23 x24 x25 xa ya x21a x22a x23a x24a x25a xb yb\n           x21b x22b x23b x24b x25b x21c x22c x23c x24c x25c.\n           \\<lbrakk>(x, y) =\n                    (RBT_Impl.skip_red sx, RBT_Impl.skip_red s,\n                     RBT_Impl.skip_red t, RBT_Impl.skip_red tx);\n            x = Branch x21 x22 x23 x24 x25; (xa, ya) = y;\n            xa = Branch x21a x22a x23a x24a x25a; (xb, yb) = ya;\n            xb = Branch x21b x22b x23b x24b x25b;\n            yb = Branch x21c x22c x23c x24c x25c\\<rbrakk>\n           \\<Longrightarrow> RBT_Impl.compare_height\n                              (RBT_Impl.skip_black x22) x22a x22b\n                              (RBT_Impl.skip_black x22c) =\n                             compare_height (RBT_Impl.skip_black x22) x22a\n                              x22b (RBT_Impl.skip_black x22c)\\<rbrakk>\n       \\<Longrightarrow> RBT_Impl.compare_height sx s t tx =\n                         compare_height sx s t tx", "apply (subst RBT_Impl.compare_height.simps)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>sx s t tx.\n       \\<lbrakk>\\<And>x y xa ya x21 x22 x23 x24 x25 xb yb x21a x22a x23a\n                   x24a x25a x21b x22b x23b x24b x25b.\n                   \\<lbrakk>(x, y) =\n                            (RBT_Impl.skip_red sx, RBT_Impl.skip_red s,\n                             RBT_Impl.skip_red t, RBT_Impl.skip_red tx);\n                    x = rbt.Empty; (xa, ya) = y;\n                    xa = Branch x21 x22 x23 x24 x25; (xb, yb) = ya;\n                    xb = Branch x21a x22a x23a x24a x25a;\n                    yb = Branch x21b x22b x23b x24b x25b\\<rbrakk>\n                   \\<Longrightarrow> RBT_Impl.compare_height rbt.Empty x22\nx22a (RBT_Impl.skip_black x22b) =\n                                     compare_height rbt.Empty x22 x22a\n(RBT_Impl.skip_black x22b);\n        \\<And>x y x21 x22 x23 x24 x25 xa ya x21a x22a x23a x24a x25a xb yb\n           x21b x22b x23b x24b x25b.\n           \\<lbrakk>(x, y) =\n                    (RBT_Impl.skip_red sx, RBT_Impl.skip_red s,\n                     RBT_Impl.skip_red t, RBT_Impl.skip_red tx);\n            x = Branch x21 x22 x23 x24 x25; (xa, ya) = y;\n            xa = Branch x21a x22a x23a x24a x25a; (xb, yb) = ya;\n            xb = Branch x21b x22b x23b x24b x25b; yb = rbt.Empty\\<rbrakk>\n           \\<Longrightarrow> RBT_Impl.compare_height\n                              (RBT_Impl.skip_black x22) x22a x22b\n                              rbt.Empty =\n                             compare_height (RBT_Impl.skip_black x22) x22a\n                              x22b rbt.Empty;\n        \\<And>x y x21 x22 x23 x24 x25 xa ya x21a x22a x23a x24a x25a xb yb\n           x21b x22b x23b x24b x25b x21c x22c x23c x24c x25c.\n           \\<lbrakk>(x, y) =\n                    (RBT_Impl.skip_red sx, RBT_Impl.skip_red s,\n                     RBT_Impl.skip_red t, RBT_Impl.skip_red tx);\n            x = Branch x21 x22 x23 x24 x25; (xa, ya) = y;\n            xa = Branch x21a x22a x23a x24a x25a; (xb, yb) = ya;\n            xb = Branch x21b x22b x23b x24b x25b;\n            yb = Branch x21c x22c x23c x24c x25c\\<rbrakk>\n           \\<Longrightarrow> RBT_Impl.compare_height\n                              (RBT_Impl.skip_black x22) x22a x22b\n                              (RBT_Impl.skip_black x22c) =\n                             compare_height (RBT_Impl.skip_black x22) x22a\n                              x22b (RBT_Impl.skip_black x22c)\\<rbrakk>\n       \\<Longrightarrow> (case (RBT_Impl.skip_red sx, RBT_Impl.skip_red s,\n                                RBT_Impl.skip_red t,\n                                RBT_Impl.skip_red tx) of\n                          (rbt.Empty, rbt.Empty, xa,\n                           rbt.Empty) \\<Rightarrow>\n                            compare.EQ\n                          | (rbt.Empty, rbt.Empty, xa,\n                             Branch xb xc xd xe xf) \\<Rightarrow>\n                              compare.LT\n                          | (rbt.Empty, Branch x s' xa xb xc, rbt.Empty,\n                             b) \\<Rightarrow>\n                              compare.EQ\n                          | (rbt.Empty, Branch x s' xa xb xc,\n                             Branch xd t' xe xf xg, rbt.Empty) \\<Rightarrow>\n                              compare.EQ\n                          | (rbt.Empty, Branch x s' xa xb xc,\n                             Branch xd t' xe xf xg,\n                             Branch xh tx' xi xj xk) \\<Rightarrow>\n                              RBT_Impl.compare_height rbt.Empty s' t'\n                               (RBT_Impl.skip_black tx')\n                          | (Branch xa sx' xaa xb xc, rbt.Empty, rbt.Empty,\n                             rbt.Empty) \\<Rightarrow>\n                              compare.GT\n                          | (Branch xa sx' xaa xb xc, rbt.Empty, rbt.Empty,\n                             Branch xba xca xd xe xfa) \\<Rightarrow>\n                              compare.LT\n                          | (Branch xa sx' xaa xb xc, rbt.Empty,\n                             Branch colora rbt1a aa bb rbt2a,\n                             rbt.Empty) \\<Rightarrow>\n                              compare.EQ\n                          | (Branch xa sx' xaa xb xc, rbt.Empty,\n                             Branch colora rbt1a aa bb rbt2a,\n                             Branch xba xca xd xe xfa) \\<Rightarrow>\n                              compare.LT\n                          | (Branch xa sx' xaa xb xc,\n                             Branch xd s' xea xf xg, rbt.Empty,\n                             xfa) \\<Rightarrow>\n                              compare.GT\n                          | (Branch xa sx' xaa xb xc,\n                             Branch xd s' xea xf xg, Branch xh t' xi xj xk,\n                             rbt.Empty) \\<Rightarrow>\n                              RBT_Impl.compare_height\n                               (RBT_Impl.skip_black sx') s' t' rbt.Empty\n                          | (Branch xa sx' xaa xb xc,\n                             Branch xd s' xea xf xg, Branch xh t' xi xj xk,\n                             Branch xl tx' xm xn xo) \\<Rightarrow>\n                              RBT_Impl.compare_height\n                               (RBT_Impl.skip_black sx') s' t'\n                               (RBT_Impl.skip_black tx')) =\n                         compare_height sx s t tx", "apply (subst compare_height.simps)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>sx s t tx.\n       \\<lbrakk>\\<And>x y xa ya x21 x22 x23 x24 x25 xb yb x21a x22a x23a\n                   x24a x25a x21b x22b x23b x24b x25b.\n                   \\<lbrakk>(x, y) =\n                            (RBT_Impl.skip_red sx, RBT_Impl.skip_red s,\n                             RBT_Impl.skip_red t, RBT_Impl.skip_red tx);\n                    x = rbt.Empty; (xa, ya) = y;\n                    xa = Branch x21 x22 x23 x24 x25; (xb, yb) = ya;\n                    xb = Branch x21a x22a x23a x24a x25a;\n                    yb = Branch x21b x22b x23b x24b x25b\\<rbrakk>\n                   \\<Longrightarrow> RBT_Impl.compare_height rbt.Empty x22\nx22a (RBT_Impl.skip_black x22b) =\n                                     compare_height rbt.Empty x22 x22a\n(RBT_Impl.skip_black x22b);\n        \\<And>x y x21 x22 x23 x24 x25 xa ya x21a x22a x23a x24a x25a xb yb\n           x21b x22b x23b x24b x25b.\n           \\<lbrakk>(x, y) =\n                    (RBT_Impl.skip_red sx, RBT_Impl.skip_red s,\n                     RBT_Impl.skip_red t, RBT_Impl.skip_red tx);\n            x = Branch x21 x22 x23 x24 x25; (xa, ya) = y;\n            xa = Branch x21a x22a x23a x24a x25a; (xb, yb) = ya;\n            xb = Branch x21b x22b x23b x24b x25b; yb = rbt.Empty\\<rbrakk>\n           \\<Longrightarrow> RBT_Impl.compare_height\n                              (RBT_Impl.skip_black x22) x22a x22b\n                              rbt.Empty =\n                             compare_height (RBT_Impl.skip_black x22) x22a\n                              x22b rbt.Empty;\n        \\<And>x y x21 x22 x23 x24 x25 xa ya x21a x22a x23a x24a x25a xb yb\n           x21b x22b x23b x24b x25b x21c x22c x23c x24c x25c.\n           \\<lbrakk>(x, y) =\n                    (RBT_Impl.skip_red sx, RBT_Impl.skip_red s,\n                     RBT_Impl.skip_red t, RBT_Impl.skip_red tx);\n            x = Branch x21 x22 x23 x24 x25; (xa, ya) = y;\n            xa = Branch x21a x22a x23a x24a x25a; (xb, yb) = ya;\n            xb = Branch x21b x22b x23b x24b x25b;\n            yb = Branch x21c x22c x23c x24c x25c\\<rbrakk>\n           \\<Longrightarrow> RBT_Impl.compare_height\n                              (RBT_Impl.skip_black x22) x22a x22b\n                              (RBT_Impl.skip_black x22c) =\n                             compare_height (RBT_Impl.skip_black x22) x22a\n                              x22b (RBT_Impl.skip_black x22c)\\<rbrakk>\n       \\<Longrightarrow> (case (RBT_Impl.skip_red sx, RBT_Impl.skip_red s,\n                                RBT_Impl.skip_red t,\n                                RBT_Impl.skip_red tx) of\n                          (rbt.Empty, rbt.Empty, xa,\n                           rbt.Empty) \\<Rightarrow>\n                            compare.EQ\n                          | (rbt.Empty, rbt.Empty, xa,\n                             Branch xb xc xd xe xf) \\<Rightarrow>\n                              compare.LT\n                          | (rbt.Empty, Branch x s' xa xb xc, rbt.Empty,\n                             b) \\<Rightarrow>\n                              compare.EQ\n                          | (rbt.Empty, Branch x s' xa xb xc,\n                             Branch xd t' xe xf xg, rbt.Empty) \\<Rightarrow>\n                              compare.EQ\n                          | (rbt.Empty, Branch x s' xa xb xc,\n                             Branch xd t' xe xf xg,\n                             Branch xh tx' xi xj xk) \\<Rightarrow>\n                              RBT_Impl.compare_height rbt.Empty s' t'\n                               (RBT_Impl.skip_black tx')\n                          | (Branch xa sx' xaa xb xc, rbt.Empty, rbt.Empty,\n                             rbt.Empty) \\<Rightarrow>\n                              compare.GT\n                          | (Branch xa sx' xaa xb xc, rbt.Empty, rbt.Empty,\n                             Branch xba xca xd xe xfa) \\<Rightarrow>\n                              compare.LT\n                          | (Branch xa sx' xaa xb xc, rbt.Empty,\n                             Branch colora rbt1a aa bb rbt2a,\n                             rbt.Empty) \\<Rightarrow>\n                              compare.EQ\n                          | (Branch xa sx' xaa xb xc, rbt.Empty,\n                             Branch colora rbt1a aa bb rbt2a,\n                             Branch xba xca xd xe xfa) \\<Rightarrow>\n                              compare.LT\n                          | (Branch xa sx' xaa xb xc,\n                             Branch xd s' xea xf xg, rbt.Empty,\n                             xfa) \\<Rightarrow>\n                              compare.GT\n                          | (Branch xa sx' xaa xb xc,\n                             Branch xd s' xea xf xg, Branch xh t' xi xj xk,\n                             rbt.Empty) \\<Rightarrow>\n                              RBT_Impl.compare_height\n                               (RBT_Impl.skip_black sx') s' t' rbt.Empty\n                          | (Branch xa sx' xaa xb xc,\n                             Branch xd s' xea xf xg, Branch xh t' xi xj xk,\n                             Branch xl tx' xm xn xo) \\<Rightarrow>\n                              RBT_Impl.compare_height\n                               (RBT_Impl.skip_black sx') s' t'\n                               (RBT_Impl.skip_black tx')) =\n                         (case (RBT_Impl.skip_red sx, RBT_Impl.skip_red s,\n                                RBT_Impl.skip_red t,\n                                RBT_Impl.skip_red tx) of\n                          (rbt.Empty, rbt.Empty, xa,\n                           rbt.Empty) \\<Rightarrow>\n                            compare.EQ\n                          | (rbt.Empty, rbt.Empty, xa,\n                             Branch xb xc xd xe xf) \\<Rightarrow>\n                              compare.LT\n                          | (rbt.Empty, Branch x s' xa xb xc, rbt.Empty,\n                             b) \\<Rightarrow>\n                              compare.EQ\n                          | (rbt.Empty, Branch x s' xa xb xc,\n                             Branch xd t' xe xf xg, rbt.Empty) \\<Rightarrow>\n                              compare.EQ\n                          | (rbt.Empty, Branch x s' xa xb xc,\n                             Branch xd t' xe xf xg,\n                             Branch xh tx' xi xj xk) \\<Rightarrow>\n                              compare_height rbt.Empty s' t'\n                               (RBT_Impl.skip_black tx')\n                          | (Branch xa sx' xaa xb xc, rbt.Empty, rbt.Empty,\n                             rbt.Empty) \\<Rightarrow>\n                              compare.GT\n                          | (Branch xa sx' xaa xb xc, rbt.Empty, rbt.Empty,\n                             Branch xba xca xd xe xfa) \\<Rightarrow>\n                              compare.LT\n                          | (Branch xa sx' xaa xb xc, rbt.Empty,\n                             Branch colora rbt1a aa bb rbt2a,\n                             rbt.Empty) \\<Rightarrow>\n                              compare.EQ\n                          | (Branch xa sx' xaa xb xc, rbt.Empty,\n                             Branch colora rbt1a aa bb rbt2a,\n                             Branch xba xca xd xe xfa) \\<Rightarrow>\n                              compare.LT\n                          | (Branch xa sx' xaa xb xc,\n                             Branch xd s' xea xf xg, rbt.Empty,\n                             xfa) \\<Rightarrow>\n                              compare.GT\n                          | (Branch xa sx' xaa xb xc,\n                             Branch xd s' xea xf xg, Branch xh t' xi xj xk,\n                             rbt.Empty) \\<Rightarrow>\n                              compare_height (RBT_Impl.skip_black sx') s' t'\n                               rbt.Empty\n                          | (Branch xa sx' xaa xb xc,\n                             Branch xd s' xea xf xg, Branch xh t' xi xj xk,\n                             Branch xl tx' xm xn xo) \\<Rightarrow>\n                              compare_height (RBT_Impl.skip_black sx') s' t'\n                               (RBT_Impl.skip_black tx'))", "apply (auto split: rbt.split)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "term RBT_Impl.skip_red"], ["", "lemma param_skip_red[param]: \"(RBT_Impl.skip_red,RBT_Impl.skip_red) \n    \\<in> \\<langle>Rk,Rv\\<rangle>rbt_rel \\<rightarrow> \\<langle>Rk,Rv\\<rangle>rbt_rel\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (RBT_Impl.skip_red, RBT_Impl.skip_red)\n    \\<in> \\<langle>Rk, Rv\\<rangle>rbt_rel \\<rightarrow> \\<langle>Rk,\n          Rv\\<rangle>rbt_rel", "unfolding skip_red_alt[abs_def]"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>t.\n        case t of rbt.Empty \\<Rightarrow> t\n        | Branch color.R l k v r \\<Rightarrow> l\n        | Branch color.B l k v r \\<Rightarrow> t,\n     \\<lambda>t.\n        case t of rbt.Empty \\<Rightarrow> t\n        | Branch color.R l k v r \\<Rightarrow> l\n        | Branch color.B l k v r \\<Rightarrow> t)\n    \\<in> \\<langle>Rk, Rv\\<rangle>rbt_rel \\<rightarrow> \\<langle>Rk,\n          Rv\\<rangle>rbt_rel", "by parametricity"], ["", "lemma param_skip_black[param]: \"(RBT_Impl.skip_black,RBT_Impl.skip_black) \n    \\<in> \\<langle>Rk,Rv\\<rangle>rbt_rel \\<rightarrow> \\<langle>Rk,Rv\\<rangle>rbt_rel\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (RBT_Impl.skip_black, RBT_Impl.skip_black)\n    \\<in> \\<langle>Rk, Rv\\<rangle>rbt_rel \\<rightarrow> \\<langle>Rk,\n          Rv\\<rangle>rbt_rel", "unfolding RBT_Impl.skip_black_def[abs_def]"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>t.\n        let t' = RBT_Impl.skip_red t\n        in case t' of rbt.Empty \\<Rightarrow> t'\n           | Branch color.R l k v r \\<Rightarrow> t'\n           | Branch color.B l k v r \\<Rightarrow> l,\n     \\<lambda>t.\n        let t' = RBT_Impl.skip_red t\n        in case t' of rbt.Empty \\<Rightarrow> t'\n           | Branch color.R l k v r \\<Rightarrow> t'\n           | Branch color.B l k v r \\<Rightarrow> l)\n    \\<in> \\<langle>Rk, Rv\\<rangle>rbt_rel \\<rightarrow> \\<langle>Rk,\n          Rv\\<rangle>rbt_rel", "by parametricity"], ["", "term case_rbt"], ["", "lemma param_case_rbt':\n    assumes \"(t,t')\\<in>\\<langle>Rk,Rv\\<rangle>rbt_rel\"\n    assumes \"\\<lbrakk>t=rbt.Empty; t'=rbt.Empty\\<rbrakk> \\<Longrightarrow> (fl,fl')\\<in>R\"\n    assumes \"\\<And>c l k v r c' l' k' v' r'. \\<lbrakk> \n      t = Branch c l k v r; t' = Branch c' l' k' v' r'; \n      (c,c')\\<in>color_rel;\n      (l,l')\\<in>\\<langle>Rk,Rv\\<rangle>rbt_rel; (k,k')\\<in>Rk; (v,v')\\<in>Rv; (r,r')\\<in>\\<langle>Rk,Rv\\<rangle>rbt_rel\n    \\<rbrakk> \\<Longrightarrow> (fb c l k v r, fb' c' l' k' v' r') \\<in> R\"\n    shows \"(case_rbt fl fb t, case_rbt fl' fb' t') \\<in> R\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (case t of rbt.Empty \\<Rightarrow> fl\n     | Branch x xa xb xc xd \\<Rightarrow> fb x xa xb xc xd,\n     case t' of rbt.Empty \\<Rightarrow> fl'\n     | Branch x xa xb xc xd \\<Rightarrow> fb' x xa xb xc xd)\n    \\<in> R", "using assms"], ["proof (prove)\nusing this:\n  (t, t') \\<in> \\<langle>Rk, Rv\\<rangle>rbt_rel\n  \\<lbrakk>t = rbt.Empty; t' = rbt.Empty\\<rbrakk>\n  \\<Longrightarrow> (fl, fl') \\<in> R\n  \\<lbrakk>t = Branch ?c ?l ?k ?v ?r; t' = Branch ?c' ?l' ?k' ?v' ?r';\n   (?c, ?c') \\<in> color_rel;\n   (?l, ?l') \\<in> \\<langle>Rk, Rv\\<rangle>rbt_rel; (?k, ?k') \\<in> Rk;\n   (?v, ?v') \\<in> Rv;\n   (?r, ?r') \\<in> \\<langle>Rk, Rv\\<rangle>rbt_rel\\<rbrakk>\n  \\<Longrightarrow> (fb ?c ?l ?k ?v ?r, fb' ?c' ?l' ?k' ?v' ?r') \\<in> R\n\ngoal (1 subgoal):\n 1. (case t of rbt.Empty \\<Rightarrow> fl\n     | Branch x xa xb xc xd \\<Rightarrow> fb x xa xb xc xd,\n     case t' of rbt.Empty \\<Rightarrow> fl'\n     | Branch x xa xb xc xd \\<Rightarrow> fb' x xa xb xc xd)\n    \\<in> R", "by (auto split: rbt.split elim: rbt_rel_elims)"], ["", "lemma compare_height_param_aux[param]:\n    \"\\<lbrakk> (sx,sx')\\<in>\\<langle>Rk,Rv\\<rangle>rbt_rel; (s,s')\\<in>\\<langle>Rk,Rv\\<rangle>rbt_rel;\n       (t,t')\\<in>\\<langle>Rk,Rv\\<rangle>rbt_rel; (tx,tx')\\<in>\\<langle>Rk,Rv\\<rangle>rbt_rel \\<rbrakk>\n    \\<Longrightarrow> (compare_height sx s t tx, compare_height sx' s' t' tx') \\<in> compare_rel\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>(sx, sx') \\<in> \\<langle>Rk, Rv\\<rangle>rbt_rel;\n     (s, s') \\<in> \\<langle>Rk, Rv\\<rangle>rbt_rel;\n     (t, t') \\<in> \\<langle>Rk, Rv\\<rangle>rbt_rel;\n     (tx, tx') \\<in> \\<langle>Rk, Rv\\<rangle>rbt_rel\\<rbrakk>\n    \\<Longrightarrow> (compare_height sx s t tx,\n                       compare_height sx' s' t' tx')\n                      \\<in> compare_rel", "apply (induct sx' s' t' tx' arbitrary: sx s t tx \n      rule: compare_height.induct)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>sx s t tx sxa sa ta txa.\n       \\<lbrakk>\\<And>x y xa ya x21 x22 x23 x24 x25 xb yb x21a x22a x23a\n                   x24a x25a x21b x22b x23b x24b x25b sxa sa ta txa.\n                   \\<lbrakk>(x, y) =\n                            (RBT_Impl.skip_red sx, RBT_Impl.skip_red s,\n                             RBT_Impl.skip_red t, RBT_Impl.skip_red tx);\n                    x = rbt.Empty; (xa, ya) = y;\n                    xa = Branch x21 x22 x23 x24 x25; (xb, yb) = ya;\n                    xb = Branch x21a x22a x23a x24a x25a;\n                    yb = Branch x21b x22b x23b x24b x25b;\n                    (sxa, rbt.Empty) \\<in> \\<langle>Rk, Rv\\<rangle>rbt_rel;\n                    (sa, x22) \\<in> \\<langle>Rk, Rv\\<rangle>rbt_rel;\n                    (ta, x22a) \\<in> \\<langle>Rk, Rv\\<rangle>rbt_rel;\n                    (txa, RBT_Impl.skip_black x22b) \\<in> \\<langle>Rk,\n                    Rv\\<rangle>rbt_rel\\<rbrakk>\n                   \\<Longrightarrow> (compare_height sxa sa ta txa,\ncompare_height rbt.Empty x22 x22a (RBT_Impl.skip_black x22b))\n                                     \\<in> compare_rel;\n        \\<And>x y x21 x22 x23 x24 x25 xa ya x21a x22a x23a x24a x25a xb yb\n           x21b x22b x23b x24b x25b sxa sa ta txa.\n           \\<lbrakk>(x, y) =\n                    (RBT_Impl.skip_red sx, RBT_Impl.skip_red s,\n                     RBT_Impl.skip_red t, RBT_Impl.skip_red tx);\n            x = Branch x21 x22 x23 x24 x25; (xa, ya) = y;\n            xa = Branch x21a x22a x23a x24a x25a; (xb, yb) = ya;\n            xb = Branch x21b x22b x23b x24b x25b; yb = rbt.Empty;\n            (sxa, RBT_Impl.skip_black x22) \\<in> \\<langle>Rk,\n            Rv\\<rangle>rbt_rel;\n            (sa, x22a) \\<in> \\<langle>Rk, Rv\\<rangle>rbt_rel;\n            (ta, x22b) \\<in> \\<langle>Rk, Rv\\<rangle>rbt_rel;\n            (txa, rbt.Empty) \\<in> \\<langle>Rk, Rv\\<rangle>rbt_rel\\<rbrakk>\n           \\<Longrightarrow> (compare_height sxa sa ta txa,\n                              compare_height (RBT_Impl.skip_black x22) x22a\n                               x22b rbt.Empty)\n                             \\<in> compare_rel;\n        \\<And>x y x21 x22 x23 x24 x25 xa ya x21a x22a x23a x24a x25a xb yb\n           x21b x22b x23b x24b x25b x21c x22c x23c x24c x25c sxa sa ta txa.\n           \\<lbrakk>(x, y) =\n                    (RBT_Impl.skip_red sx, RBT_Impl.skip_red s,\n                     RBT_Impl.skip_red t, RBT_Impl.skip_red tx);\n            x = Branch x21 x22 x23 x24 x25; (xa, ya) = y;\n            xa = Branch x21a x22a x23a x24a x25a; (xb, yb) = ya;\n            xb = Branch x21b x22b x23b x24b x25b;\n            yb = Branch x21c x22c x23c x24c x25c;\n            (sxa, RBT_Impl.skip_black x22) \\<in> \\<langle>Rk,\n            Rv\\<rangle>rbt_rel;\n            (sa, x22a) \\<in> \\<langle>Rk, Rv\\<rangle>rbt_rel;\n            (ta, x22b) \\<in> \\<langle>Rk, Rv\\<rangle>rbt_rel;\n            (txa, RBT_Impl.skip_black x22c) \\<in> \\<langle>Rk,\n            Rv\\<rangle>rbt_rel\\<rbrakk>\n           \\<Longrightarrow> (compare_height sxa sa ta txa,\n                              compare_height (RBT_Impl.skip_black x22) x22a\n                               x22b (RBT_Impl.skip_black x22c))\n                             \\<in> compare_rel;\n        (sxa, sx) \\<in> \\<langle>Rk, Rv\\<rangle>rbt_rel;\n        (sa, s) \\<in> \\<langle>Rk, Rv\\<rangle>rbt_rel;\n        (ta, t) \\<in> \\<langle>Rk, Rv\\<rangle>rbt_rel;\n        (txa, tx) \\<in> \\<langle>Rk, Rv\\<rangle>rbt_rel\\<rbrakk>\n       \\<Longrightarrow> (compare_height sxa sa ta txa,\n                          compare_height sx s t tx)\n                         \\<in> compare_rel", "apply (subst (2) compare_height.simps)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>sx s t tx sxa sa ta txa.\n       \\<lbrakk>\\<And>x y xa ya x21 x22 x23 x24 x25 xb yb x21a x22a x23a\n                   x24a x25a x21b x22b x23b x24b x25b sxa sa ta txa.\n                   \\<lbrakk>(x, y) =\n                            (RBT_Impl.skip_red sx, RBT_Impl.skip_red s,\n                             RBT_Impl.skip_red t, RBT_Impl.skip_red tx);\n                    x = rbt.Empty; (xa, ya) = y;\n                    xa = Branch x21 x22 x23 x24 x25; (xb, yb) = ya;\n                    xb = Branch x21a x22a x23a x24a x25a;\n                    yb = Branch x21b x22b x23b x24b x25b;\n                    (sxa, rbt.Empty) \\<in> \\<langle>Rk, Rv\\<rangle>rbt_rel;\n                    (sa, x22) \\<in> \\<langle>Rk, Rv\\<rangle>rbt_rel;\n                    (ta, x22a) \\<in> \\<langle>Rk, Rv\\<rangle>rbt_rel;\n                    (txa, RBT_Impl.skip_black x22b) \\<in> \\<langle>Rk,\n                    Rv\\<rangle>rbt_rel\\<rbrakk>\n                   \\<Longrightarrow> (compare_height sxa sa ta txa,\ncompare_height rbt.Empty x22 x22a (RBT_Impl.skip_black x22b))\n                                     \\<in> compare_rel;\n        \\<And>x y x21 x22 x23 x24 x25 xa ya x21a x22a x23a x24a x25a xb yb\n           x21b x22b x23b x24b x25b sxa sa ta txa.\n           \\<lbrakk>(x, y) =\n                    (RBT_Impl.skip_red sx, RBT_Impl.skip_red s,\n                     RBT_Impl.skip_red t, RBT_Impl.skip_red tx);\n            x = Branch x21 x22 x23 x24 x25; (xa, ya) = y;\n            xa = Branch x21a x22a x23a x24a x25a; (xb, yb) = ya;\n            xb = Branch x21b x22b x23b x24b x25b; yb = rbt.Empty;\n            (sxa, RBT_Impl.skip_black x22) \\<in> \\<langle>Rk,\n            Rv\\<rangle>rbt_rel;\n            (sa, x22a) \\<in> \\<langle>Rk, Rv\\<rangle>rbt_rel;\n            (ta, x22b) \\<in> \\<langle>Rk, Rv\\<rangle>rbt_rel;\n            (txa, rbt.Empty) \\<in> \\<langle>Rk, Rv\\<rangle>rbt_rel\\<rbrakk>\n           \\<Longrightarrow> (compare_height sxa sa ta txa,\n                              compare_height (RBT_Impl.skip_black x22) x22a\n                               x22b rbt.Empty)\n                             \\<in> compare_rel;\n        \\<And>x y x21 x22 x23 x24 x25 xa ya x21a x22a x23a x24a x25a xb yb\n           x21b x22b x23b x24b x25b x21c x22c x23c x24c x25c sxa sa ta txa.\n           \\<lbrakk>(x, y) =\n                    (RBT_Impl.skip_red sx, RBT_Impl.skip_red s,\n                     RBT_Impl.skip_red t, RBT_Impl.skip_red tx);\n            x = Branch x21 x22 x23 x24 x25; (xa, ya) = y;\n            xa = Branch x21a x22a x23a x24a x25a; (xb, yb) = ya;\n            xb = Branch x21b x22b x23b x24b x25b;\n            yb = Branch x21c x22c x23c x24c x25c;\n            (sxa, RBT_Impl.skip_black x22) \\<in> \\<langle>Rk,\n            Rv\\<rangle>rbt_rel;\n            (sa, x22a) \\<in> \\<langle>Rk, Rv\\<rangle>rbt_rel;\n            (ta, x22b) \\<in> \\<langle>Rk, Rv\\<rangle>rbt_rel;\n            (txa, RBT_Impl.skip_black x22c) \\<in> \\<langle>Rk,\n            Rv\\<rangle>rbt_rel\\<rbrakk>\n           \\<Longrightarrow> (compare_height sxa sa ta txa,\n                              compare_height (RBT_Impl.skip_black x22) x22a\n                               x22b (RBT_Impl.skip_black x22c))\n                             \\<in> compare_rel;\n        (sxa, sx) \\<in> \\<langle>Rk, Rv\\<rangle>rbt_rel;\n        (sa, s) \\<in> \\<langle>Rk, Rv\\<rangle>rbt_rel;\n        (ta, t) \\<in> \\<langle>Rk, Rv\\<rangle>rbt_rel;\n        (txa, tx) \\<in> \\<langle>Rk, Rv\\<rangle>rbt_rel\\<rbrakk>\n       \\<Longrightarrow> (compare_height sxa sa ta txa,\n                          case (RBT_Impl.skip_red sx, RBT_Impl.skip_red s,\n                                RBT_Impl.skip_red t,\n                                RBT_Impl.skip_red tx) of\n                          (rbt.Empty, rbt.Empty, xa,\n                           rbt.Empty) \\<Rightarrow>\n                            compare.EQ\n                          | (rbt.Empty, rbt.Empty, xa,\n                             Branch xb xc xd xe xf) \\<Rightarrow>\n                              compare.LT\n                          | (rbt.Empty, Branch x s' xa xb xc, rbt.Empty,\n                             b) \\<Rightarrow>\n                              compare.EQ\n                          | (rbt.Empty, Branch x s' xa xb xc,\n                             Branch xd t' xe xf xg, rbt.Empty) \\<Rightarrow>\n                              compare.EQ\n                          | (rbt.Empty, Branch x s' xa xb xc,\n                             Branch xd t' xe xf xg,\n                             Branch xh tx' xi xj xk) \\<Rightarrow>\n                              compare_height rbt.Empty s' t'\n                               (RBT_Impl.skip_black tx')\n                          | (Branch xa sx' xaa xb xc, rbt.Empty, rbt.Empty,\n                             rbt.Empty) \\<Rightarrow>\n                              compare.GT\n                          | (Branch xa sx' xaa xb xc, rbt.Empty, rbt.Empty,\n                             Branch xba xca xd xe xfa) \\<Rightarrow>\n                              compare.LT\n                          | (Branch xa sx' xaa xb xc, rbt.Empty,\n                             Branch colora rbt1a aa bb rbt2a,\n                             rbt.Empty) \\<Rightarrow>\n                              compare.EQ\n                          | (Branch xa sx' xaa xb xc, rbt.Empty,\n                             Branch colora rbt1a aa bb rbt2a,\n                             Branch xba xca xd xe xfa) \\<Rightarrow>\n                              compare.LT\n                          | (Branch xa sx' xaa xb xc,\n                             Branch xd s' xea xf xg, rbt.Empty,\n                             xfa) \\<Rightarrow>\n                              compare.GT\n                          | (Branch xa sx' xaa xb xc,\n                             Branch xd s' xea xf xg, Branch xh t' xi xj xk,\n                             rbt.Empty) \\<Rightarrow>\n                              compare_height (RBT_Impl.skip_black sx') s' t'\n                               rbt.Empty\n                          | (Branch xa sx' xaa xb xc,\n                             Branch xd s' xea xf xg, Branch xh t' xi xj xk,\n                             Branch xl tx' xm xn xo) \\<Rightarrow>\n                              compare_height (RBT_Impl.skip_black sx') s' t'\n                               (RBT_Impl.skip_black tx'))\n                         \\<in> compare_rel", "apply (subst compare_height.simps)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>sx s t tx sxa sa ta txa.\n       \\<lbrakk>\\<And>x y xa ya x21 x22 x23 x24 x25 xb yb x21a x22a x23a\n                   x24a x25a x21b x22b x23b x24b x25b sxa sa ta txa.\n                   \\<lbrakk>(x, y) =\n                            (RBT_Impl.skip_red sx, RBT_Impl.skip_red s,\n                             RBT_Impl.skip_red t, RBT_Impl.skip_red tx);\n                    x = rbt.Empty; (xa, ya) = y;\n                    xa = Branch x21 x22 x23 x24 x25; (xb, yb) = ya;\n                    xb = Branch x21a x22a x23a x24a x25a;\n                    yb = Branch x21b x22b x23b x24b x25b;\n                    (sxa, rbt.Empty) \\<in> \\<langle>Rk, Rv\\<rangle>rbt_rel;\n                    (sa, x22) \\<in> \\<langle>Rk, Rv\\<rangle>rbt_rel;\n                    (ta, x22a) \\<in> \\<langle>Rk, Rv\\<rangle>rbt_rel;\n                    (txa, RBT_Impl.skip_black x22b) \\<in> \\<langle>Rk,\n                    Rv\\<rangle>rbt_rel\\<rbrakk>\n                   \\<Longrightarrow> (compare_height sxa sa ta txa,\ncompare_height rbt.Empty x22 x22a (RBT_Impl.skip_black x22b))\n                                     \\<in> compare_rel;\n        \\<And>x y x21 x22 x23 x24 x25 xa ya x21a x22a x23a x24a x25a xb yb\n           x21b x22b x23b x24b x25b sxa sa ta txa.\n           \\<lbrakk>(x, y) =\n                    (RBT_Impl.skip_red sx, RBT_Impl.skip_red s,\n                     RBT_Impl.skip_red t, RBT_Impl.skip_red tx);\n            x = Branch x21 x22 x23 x24 x25; (xa, ya) = y;\n            xa = Branch x21a x22a x23a x24a x25a; (xb, yb) = ya;\n            xb = Branch x21b x22b x23b x24b x25b; yb = rbt.Empty;\n            (sxa, RBT_Impl.skip_black x22) \\<in> \\<langle>Rk,\n            Rv\\<rangle>rbt_rel;\n            (sa, x22a) \\<in> \\<langle>Rk, Rv\\<rangle>rbt_rel;\n            (ta, x22b) \\<in> \\<langle>Rk, Rv\\<rangle>rbt_rel;\n            (txa, rbt.Empty) \\<in> \\<langle>Rk, Rv\\<rangle>rbt_rel\\<rbrakk>\n           \\<Longrightarrow> (compare_height sxa sa ta txa,\n                              compare_height (RBT_Impl.skip_black x22) x22a\n                               x22b rbt.Empty)\n                             \\<in> compare_rel;\n        \\<And>x y x21 x22 x23 x24 x25 xa ya x21a x22a x23a x24a x25a xb yb\n           x21b x22b x23b x24b x25b x21c x22c x23c x24c x25c sxa sa ta txa.\n           \\<lbrakk>(x, y) =\n                    (RBT_Impl.skip_red sx, RBT_Impl.skip_red s,\n                     RBT_Impl.skip_red t, RBT_Impl.skip_red tx);\n            x = Branch x21 x22 x23 x24 x25; (xa, ya) = y;\n            xa = Branch x21a x22a x23a x24a x25a; (xb, yb) = ya;\n            xb = Branch x21b x22b x23b x24b x25b;\n            yb = Branch x21c x22c x23c x24c x25c;\n            (sxa, RBT_Impl.skip_black x22) \\<in> \\<langle>Rk,\n            Rv\\<rangle>rbt_rel;\n            (sa, x22a) \\<in> \\<langle>Rk, Rv\\<rangle>rbt_rel;\n            (ta, x22b) \\<in> \\<langle>Rk, Rv\\<rangle>rbt_rel;\n            (txa, RBT_Impl.skip_black x22c) \\<in> \\<langle>Rk,\n            Rv\\<rangle>rbt_rel\\<rbrakk>\n           \\<Longrightarrow> (compare_height sxa sa ta txa,\n                              compare_height (RBT_Impl.skip_black x22) x22a\n                               x22b (RBT_Impl.skip_black x22c))\n                             \\<in> compare_rel;\n        (sxa, sx) \\<in> \\<langle>Rk, Rv\\<rangle>rbt_rel;\n        (sa, s) \\<in> \\<langle>Rk, Rv\\<rangle>rbt_rel;\n        (ta, t) \\<in> \\<langle>Rk, Rv\\<rangle>rbt_rel;\n        (txa, tx) \\<in> \\<langle>Rk, Rv\\<rangle>rbt_rel\\<rbrakk>\n       \\<Longrightarrow> (case (RBT_Impl.skip_red sxa, RBT_Impl.skip_red sa,\n                                RBT_Impl.skip_red ta,\n                                RBT_Impl.skip_red txa) of\n                          (rbt.Empty, rbt.Empty, xa,\n                           rbt.Empty) \\<Rightarrow>\n                            compare.EQ\n                          | (rbt.Empty, rbt.Empty, xa,\n                             Branch xb xc xd xe xf) \\<Rightarrow>\n                              compare.LT\n                          | (rbt.Empty, Branch x s' xa xb xc, rbt.Empty,\n                             b) \\<Rightarrow>\n                              compare.EQ\n                          | (rbt.Empty, Branch x s' xa xb xc,\n                             Branch xd t' xe xf xg, rbt.Empty) \\<Rightarrow>\n                              compare.EQ\n                          | (rbt.Empty, Branch x s' xa xb xc,\n                             Branch xd t' xe xf xg,\n                             Branch xh tx' xi xj xk) \\<Rightarrow>\n                              compare_height rbt.Empty s' t'\n                               (RBT_Impl.skip_black tx')\n                          | (Branch xa sx' xaa xb xc, rbt.Empty, rbt.Empty,\n                             rbt.Empty) \\<Rightarrow>\n                              compare.GT\n                          | (Branch xa sx' xaa xb xc, rbt.Empty, rbt.Empty,\n                             Branch xba xca xd xe xfa) \\<Rightarrow>\n                              compare.LT\n                          | (Branch xa sx' xaa xb xc, rbt.Empty,\n                             Branch colora rbt1a aa bb rbt2a,\n                             rbt.Empty) \\<Rightarrow>\n                              compare.EQ\n                          | (Branch xa sx' xaa xb xc, rbt.Empty,\n                             Branch colora rbt1a aa bb rbt2a,\n                             Branch xba xca xd xe xfa) \\<Rightarrow>\n                              compare.LT\n                          | (Branch xa sx' xaa xb xc,\n                             Branch xd s' xea xf xg, rbt.Empty,\n                             xfa) \\<Rightarrow>\n                              compare.GT\n                          | (Branch xa sx' xaa xb xc,\n                             Branch xd s' xea xf xg, Branch xh t' xi xj xk,\n                             rbt.Empty) \\<Rightarrow>\n                              compare_height (RBT_Impl.skip_black sx') s' t'\n                               rbt.Empty\n                          | (Branch xa sx' xaa xb xc,\n                             Branch xd s' xea xf xg, Branch xh t' xi xj xk,\n                             Branch xl tx' xm xn xo) \\<Rightarrow>\n                              compare_height (RBT_Impl.skip_black sx') s' t'\n                               (RBT_Impl.skip_black tx'),\n                          case (RBT_Impl.skip_red sx, RBT_Impl.skip_red s,\n                                RBT_Impl.skip_red t,\n                                RBT_Impl.skip_red tx) of\n                          (rbt.Empty, rbt.Empty, xa,\n                           rbt.Empty) \\<Rightarrow>\n                            compare.EQ\n                          | (rbt.Empty, rbt.Empty, xa,\n                             Branch xb xc xd xe xf) \\<Rightarrow>\n                              compare.LT\n                          | (rbt.Empty, Branch x s' xa xb xc, rbt.Empty,\n                             b) \\<Rightarrow>\n                              compare.EQ\n                          | (rbt.Empty, Branch x s' xa xb xc,\n                             Branch xd t' xe xf xg, rbt.Empty) \\<Rightarrow>\n                              compare.EQ\n                          | (rbt.Empty, Branch x s' xa xb xc,\n                             Branch xd t' xe xf xg,\n                             Branch xh tx' xi xj xk) \\<Rightarrow>\n                              compare_height rbt.Empty s' t'\n                               (RBT_Impl.skip_black tx')\n                          | (Branch xa sx' xaa xb xc, rbt.Empty, rbt.Empty,\n                             rbt.Empty) \\<Rightarrow>\n                              compare.GT\n                          | (Branch xa sx' xaa xb xc, rbt.Empty, rbt.Empty,\n                             Branch xba xca xd xe xfa) \\<Rightarrow>\n                              compare.LT\n                          | (Branch xa sx' xaa xb xc, rbt.Empty,\n                             Branch colora rbt1a aa bb rbt2a,\n                             rbt.Empty) \\<Rightarrow>\n                              compare.EQ\n                          | (Branch xa sx' xaa xb xc, rbt.Empty,\n                             Branch colora rbt1a aa bb rbt2a,\n                             Branch xba xca xd xe xfa) \\<Rightarrow>\n                              compare.LT\n                          | (Branch xa sx' xaa xb xc,\n                             Branch xd s' xea xf xg, rbt.Empty,\n                             xfa) \\<Rightarrow>\n                              compare.GT\n                          | (Branch xa sx' xaa xb xc,\n                             Branch xd s' xea xf xg, Branch xh t' xi xj xk,\n                             rbt.Empty) \\<Rightarrow>\n                              compare_height (RBT_Impl.skip_black sx') s' t'\n                               rbt.Empty\n                          | (Branch xa sx' xaa xb xc,\n                             Branch xd s' xea xf xg, Branch xh t' xi xj xk,\n                             Branch xl tx' xm xn xo) \\<Rightarrow>\n                              compare_height (RBT_Impl.skip_black sx') s' t'\n                               (RBT_Impl.skip_black tx'))\n                         \\<in> compare_rel", "apply (parametricity add: param_case_prod' param_case_rbt', (simp only: prod.inject)+) []"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma compare_height_param[param]:\n    \"(RBT_Impl.compare_height,RBT_Impl.compare_height) \\<in> \n      \\<langle>Rk,Rv\\<rangle>rbt_rel \\<rightarrow> \\<langle>Rk,Rv\\<rangle>rbt_rel \\<rightarrow> \\<langle>Rk,Rv\\<rangle>rbt_rel \\<rightarrow> \\<langle>Rk,Rv\\<rangle>rbt_rel \n      \\<rightarrow> compare_rel\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (RBT_Impl.compare_height, RBT_Impl.compare_height)\n    \\<in> \\<langle>Rk, Rv\\<rangle>rbt_rel \\<rightarrow>\n          \\<langle>Rk, Rv\\<rangle>rbt_rel \\<rightarrow>\n          \\<langle>Rk, Rv\\<rangle>rbt_rel \\<rightarrow>\n          \\<langle>Rk, Rv\\<rangle>rbt_rel \\<rightarrow> compare_rel", "unfolding compare_height_alt[abs_def]"], ["proof (prove)\ngoal (1 subgoal):\n 1. (compare_height, compare_height)\n    \\<in> \\<langle>Rk, Rv\\<rangle>rbt_rel \\<rightarrow>\n          \\<langle>Rk, Rv\\<rangle>rbt_rel \\<rightarrow>\n          \\<langle>Rk, Rv\\<rangle>rbt_rel \\<rightarrow>\n          \\<langle>Rk, Rv\\<rangle>rbt_rel \\<rightarrow> compare_rel", "by parametricity"], ["", "lemma param_rbt_union[param]:\n    fixes less\n    assumes param_less[param]: \"(less,less') \\<in> Ra \\<rightarrow> Ra \\<rightarrow> Id\"\n    shows \"(ord.rbt_union less, ord.rbt_union less') \n      \\<in> \\<langle>Ra,Rb\\<rangle>rbt_rel \\<rightarrow> \\<langle>Ra,Rb\\<rangle>rbt_rel \\<rightarrow> \\<langle>Ra,Rb\\<rangle>rbt_rel\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (ord.rbt_union less, ord.rbt_union less')\n    \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel \\<rightarrow>\n          \\<langle>Ra, Rb\\<rangle>rbt_rel \\<rightarrow> \\<langle>Ra,\n          Rb\\<rangle>rbt_rel", "unfolding ord.rbt_union_def[abs_def] ord.rbt_union_with_key_def[abs_def]\n      ord.rbt_insert_with_key_def[abs_def]"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>t1 t2.\n        case RBT_Impl.compare_height t1 t1 t2 t2 of\n        compare.LT \\<Rightarrow>\n          RBT_Impl.fold\n           (\\<lambda>k v t.\n               paint color.B (ord.rbt_ins less (\\<lambda>k v w. v) k v t))\n           t1 t2\n        | compare.GT \\<Rightarrow>\n            RBT_Impl.fold\n             (\\<lambda>k v t.\n                 paint color.B\n                  (ord.rbt_ins less (\\<lambda>_ _ rv. rv) k v t))\n             t2 t1\n        | compare.EQ \\<Rightarrow>\n            rbtreeify\n             (ord.sunion_with less (\\<lambda>_ _ rv. rv)\n               (RBT_Impl.entries t1) (RBT_Impl.entries t2)),\n     \\<lambda>t1 t2.\n        case RBT_Impl.compare_height t1 t1 t2 t2 of\n        compare.LT \\<Rightarrow>\n          RBT_Impl.fold\n           (\\<lambda>k v t.\n               paint color.B (ord.rbt_ins less' (\\<lambda>k v w. v) k v t))\n           t1 t2\n        | compare.GT \\<Rightarrow>\n            RBT_Impl.fold\n             (\\<lambda>k v t.\n                 paint color.B\n                  (ord.rbt_ins less' (\\<lambda>_ _ rv. rv) k v t))\n             t2 t1\n        | compare.EQ \\<Rightarrow>\n            rbtreeify\n             (ord.sunion_with less' (\\<lambda>_ _ rv. rv)\n               (RBT_Impl.entries t1) (RBT_Impl.entries t2)))\n    \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel \\<rightarrow>\n          \\<langle>Ra, Rb\\<rangle>rbt_rel \\<rightarrow> \\<langle>Ra,\n          Rb\\<rangle>rbt_rel", "unfolding RBT_Impl.fold_def RBT_Impl.entries_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>t1 t2.\n        case RBT_Impl.compare_height t1 t1 t2 t2 of\n        compare.LT \\<Rightarrow>\n          fold\n           (\\<lambda>(k, v) t.\n               paint color.B (ord.rbt_ins less (\\<lambda>k v w. v) k v t))\n           (rec_rbt [] (\\<lambda>_ l k v r la ra. la @ (k, v) # ra) t1) t2\n        | compare.GT \\<Rightarrow>\n            fold\n             (\\<lambda>(k, v) t.\n                 paint color.B\n                  (ord.rbt_ins less (\\<lambda>_ _ rv. rv) k v t))\n             (rec_rbt [] (\\<lambda>_ l k v r la ra. la @ (k, v) # ra) t2) t1\n        | compare.EQ \\<Rightarrow>\n            rbtreeify\n             (ord.sunion_with less (\\<lambda>_ _ rv. rv)\n               (rec_rbt [] (\\<lambda>_ l k v r la ra. la @ (k, v) # ra) t1)\n               (rec_rbt [] (\\<lambda>_ l k v r la ra. la @ (k, v) # ra)\n                 t2)),\n     \\<lambda>t1 t2.\n        case RBT_Impl.compare_height t1 t1 t2 t2 of\n        compare.LT \\<Rightarrow>\n          fold\n           (\\<lambda>(k, v) t.\n               paint color.B (ord.rbt_ins less' (\\<lambda>k v w. v) k v t))\n           (rec_rbt [] (\\<lambda>_ l k v r la ra. la @ (k, v) # ra) t1) t2\n        | compare.GT \\<Rightarrow>\n            fold\n             (\\<lambda>(k, v) t.\n                 paint color.B\n                  (ord.rbt_ins less' (\\<lambda>_ _ rv. rv) k v t))\n             (rec_rbt [] (\\<lambda>_ l k v r la ra. la @ (k, v) # ra) t2) t1\n        | compare.EQ \\<Rightarrow>\n            rbtreeify\n             (ord.sunion_with less' (\\<lambda>_ _ rv. rv)\n               (rec_rbt [] (\\<lambda>_ l k v r la ra. la @ (k, v) # ra) t1)\n               (rec_rbt [] (\\<lambda>_ l k v r la ra. la @ (k, v) # ra)\n                 t2)))\n    \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel \\<rightarrow>\n          \\<langle>Ra, Rb\\<rangle>rbt_rel \\<rightarrow> \\<langle>Ra,\n          Rb\\<rangle>rbt_rel", "by parametricity"], ["", "term rm_iterateoi"], ["", "lemma param_rm_iterateoi[param]: \"(rm_iterateoi,rm_iterateoi) \n  \\<in> \\<langle>Ra,Rb\\<rangle>rbt_rel \\<rightarrow> (Rc\\<rightarrow>Id) \\<rightarrow> (\\<langle>Ra,Rb\\<rangle>prod_rel \\<rightarrow> Rc \\<rightarrow> Rc) \\<rightarrow> Rc \\<rightarrow> Rc\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (rm_iterateoi, rm_iterateoi)\n    \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel \\<rightarrow>\n          (Rc \\<rightarrow> bool_rel) \\<rightarrow>\n          (Ra \\<times>\\<^sub>r Rb \\<rightarrow>\n           Rc \\<rightarrow> Rc) \\<rightarrow>\n          Rc \\<rightarrow> Rc", "unfolding rm_iterateoi_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (rec_rbt (\\<lambda>c f \\<sigma>. \\<sigma>)\n      (\\<lambda>col l k v r la ra c f \\<sigma>.\n          if c \\<sigma>\n          then let \\<sigma>' = la c f \\<sigma>\n               in if c \\<sigma>' then ra c f (f (k, v) \\<sigma>')\n                  else \\<sigma>'\n          else \\<sigma>),\n     rec_rbt (\\<lambda>c f \\<sigma>. \\<sigma>)\n      (\\<lambda>col l k v r la ra c f \\<sigma>.\n          if c \\<sigma>\n          then let \\<sigma>' = la c f \\<sigma>\n               in if c \\<sigma>' then ra c f (f (k, v) \\<sigma>')\n                  else \\<sigma>'\n          else \\<sigma>))\n    \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel \\<rightarrow>\n          (Rc \\<rightarrow> bool_rel) \\<rightarrow>\n          (Ra \\<times>\\<^sub>r Rb \\<rightarrow>\n           Rc \\<rightarrow> Rc) \\<rightarrow>\n          Rc \\<rightarrow> Rc", "by (parametricity)"], ["", "lemma param_rm_reverse_iterateoi[param]: \n  \"(rm_reverse_iterateoi,rm_reverse_iterateoi) \n    \\<in> \\<langle>Ra,Rb\\<rangle>rbt_rel \\<rightarrow> (Rc\\<rightarrow>Id) \\<rightarrow> (\\<langle>Ra,Rb\\<rangle>prod_rel \\<rightarrow> Rc \\<rightarrow> Rc) \\<rightarrow> Rc \\<rightarrow> Rc\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (rm_reverse_iterateoi, rm_reverse_iterateoi)\n    \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel \\<rightarrow>\n          (Rc \\<rightarrow> bool_rel) \\<rightarrow>\n          (Ra \\<times>\\<^sub>r Rb \\<rightarrow>\n           Rc \\<rightarrow> Rc) \\<rightarrow>\n          Rc \\<rightarrow> Rc", "unfolding rm_reverse_iterateoi_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (rec_rbt (\\<lambda>c f \\<sigma>. \\<sigma>)\n      (\\<lambda>col l k v r la ra c f \\<sigma>.\n          if c \\<sigma>\n          then let \\<sigma>' = ra c f \\<sigma>\n               in if c \\<sigma>' then la c f (f (k, v) \\<sigma>')\n                  else \\<sigma>'\n          else \\<sigma>),\n     rec_rbt (\\<lambda>c f \\<sigma>. \\<sigma>)\n      (\\<lambda>col l k v r la ra c f \\<sigma>.\n          if c \\<sigma>\n          then let \\<sigma>' = ra c f \\<sigma>\n               in if c \\<sigma>' then la c f (f (k, v) \\<sigma>')\n                  else \\<sigma>'\n          else \\<sigma>))\n    \\<in> \\<langle>Ra, Rb\\<rangle>rbt_rel \\<rightarrow>\n          (Rc \\<rightarrow> bool_rel) \\<rightarrow>\n          (Ra \\<times>\\<^sub>r Rb \\<rightarrow>\n           Rc \\<rightarrow> Rc) \\<rightarrow>\n          Rc \\<rightarrow> Rc", "by (parametricity)"], ["", "lemma param_color_eq[param]: \n  \"((=), (=))\\<in>color_rel\\<rightarrow>color_rel\\<rightarrow>Id\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((=), (=))\n    \\<in> color_rel \\<rightarrow> color_rel \\<rightarrow> bool_rel", "by (auto elim: color_rel.cases)"], ["", "lemma param_color_of[param]: \n  \"(color_of, color_of)\\<in>\\<langle>Rk,Rv\\<rangle>rbt_rel\\<rightarrow>color_rel\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (color_of, color_of)\n    \\<in> \\<langle>Rk, Rv\\<rangle>rbt_rel \\<rightarrow> color_rel", "unfolding color_of_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (rec_rbt color.B (\\<lambda>c _ _ _ _ _ _. c),\n     rec_rbt color.B (\\<lambda>c _ _ _ _ _ _. c))\n    \\<in> \\<langle>Rk, Rv\\<rangle>rbt_rel \\<rightarrow> color_rel", "by parametricity"], ["", "term bheight"], ["", "lemma param_bheight[param]:\n  \"(bheight,bheight)\\<in>\\<langle>Rk,Rv\\<rangle>rbt_rel\\<rightarrow>Id\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (bheight, bheight)\n    \\<in> \\<langle>Rk, Rv\\<rangle>rbt_rel \\<rightarrow> nat_rel", "unfolding bheight_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (rec_rbt 0\n      (\\<lambda>c lt k v rt lta rta. if c = color.B then Suc lta else lta),\n     rec_rbt 0\n      (\\<lambda>c lt k v rt lta rta. if c = color.B then Suc lta else lta))\n    \\<in> \\<langle>Rk, Rv\\<rangle>rbt_rel \\<rightarrow> nat_rel", "by (parametricity)"], ["", "lemma inv1_param[param]: \"(inv1,inv1)\\<in>\\<langle>Rk,Rv\\<rangle>rbt_rel\\<rightarrow>Id\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (inv1, inv1)\n    \\<in> \\<langle>Rk, Rv\\<rangle>rbt_rel \\<rightarrow> bool_rel", "unfolding inv1_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (rec_rbt True\n      (\\<lambda>c lt k v rt lta rta.\n          lta \\<and>\n          rta \\<and>\n          (c = color.B \\<or>\n           color_of lt = color.B \\<and> color_of rt = color.B)),\n     rec_rbt True\n      (\\<lambda>c lt k v rt lta rta.\n          lta \\<and>\n          rta \\<and>\n          (c = color.B \\<or>\n           color_of lt = color.B \\<and> color_of rt = color.B)))\n    \\<in> \\<langle>Rk, Rv\\<rangle>rbt_rel \\<rightarrow> bool_rel", "by (parametricity)"], ["", "lemma inv2_param[param]: \"(inv2,inv2)\\<in>\\<langle>Rk,Rv\\<rangle>rbt_rel\\<rightarrow>Id\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (inv2, inv2)\n    \\<in> \\<langle>Rk, Rv\\<rangle>rbt_rel \\<rightarrow> bool_rel", "unfolding inv2_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (rec_rbt True\n      (\\<lambda>c lt k v rt lta rta.\n          lta \\<and> rta \\<and> bheight lt = bheight rt),\n     rec_rbt True\n      (\\<lambda>c lt k v rt lta rta.\n          lta \\<and> rta \\<and> bheight lt = bheight rt))\n    \\<in> \\<langle>Rk, Rv\\<rangle>rbt_rel \\<rightarrow> bool_rel", "by (parametricity)"], ["", "term ord.rbt_less"], ["", "lemma rbt_less_param[param]: \"(ord.rbt_less,ord.rbt_less) \\<in> \n  (Rk\\<rightarrow>Rk\\<rightarrow>Id) \\<rightarrow> Rk \\<rightarrow> \\<langle>Rk,Rv\\<rangle>rbt_rel \\<rightarrow> Id\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (ord.rbt_less, ord.rbt_less)\n    \\<in> (Rk \\<rightarrow> Rk \\<rightarrow> bool_rel) \\<rightarrow>\n          Rk \\<rightarrow>\n          \\<langle>Rk, Rv\\<rangle>rbt_rel \\<rightarrow> bool_rel", "unfolding ord.rbt_less_prop[abs_def]"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>less k t. \\<forall>x\\<in>set (RBT_Impl.keys t). less x k,\n     \\<lambda>less k t. \\<forall>x\\<in>set (RBT_Impl.keys t). less x k)\n    \\<in> (Rk \\<rightarrow> Rk \\<rightarrow> bool_rel) \\<rightarrow>\n          Rk \\<rightarrow>\n          \\<langle>Rk, Rv\\<rangle>rbt_rel \\<rightarrow> bool_rel", "apply (parametricity add: param_list_ball)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a a' aa a'a ab a'b.\n       \\<lbrakk>(a, a') \\<in> Rk \\<rightarrow> Rk \\<rightarrow> bool_rel;\n        (aa, a'a) \\<in> Rk;\n        (ab, a'b) \\<in> \\<langle>Rk, Rv\\<rangle>rbt_rel\\<rbrakk>\n       \\<Longrightarrow> (RBT_Impl.keys ab, RBT_Impl.keys a'b)\n                         \\<in> \\<langle>Rk\\<rangle>list_rel", "unfolding RBT_Impl.keys_def RBT_Impl.entries_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a a' aa a'a ab a'b.\n       \\<lbrakk>(a, a') \\<in> Rk \\<rightarrow> Rk \\<rightarrow> bool_rel;\n        (aa, a'a) \\<in> Rk;\n        (ab, a'b) \\<in> \\<langle>Rk, Rv\\<rangle>rbt_rel\\<rbrakk>\n       \\<Longrightarrow> (map fst\n                           (rec_rbt []\n                             (\\<lambda>_ l k v r la ra. la @ (k, v) # ra)\n                             ab),\n                          map fst\n                           (rec_rbt []\n                             (\\<lambda>_ l k v r la ra. la @ (k, v) # ra)\n                             a'b))\n                         \\<in> \\<langle>Rk\\<rangle>list_rel", "apply (parametricity)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "term ord.rbt_greater"], ["", "lemma rbt_greater_param[param]: \"(ord.rbt_greater,ord.rbt_greater) \\<in> \n  (Rk\\<rightarrow>Rk\\<rightarrow>Id) \\<rightarrow> Rk \\<rightarrow> \\<langle>Rk,Rv\\<rangle>rbt_rel \\<rightarrow> Id\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (ord.rbt_greater, ord.rbt_greater)\n    \\<in> (Rk \\<rightarrow> Rk \\<rightarrow> bool_rel) \\<rightarrow>\n          Rk \\<rightarrow>\n          \\<langle>Rk, Rv\\<rangle>rbt_rel \\<rightarrow> bool_rel", "unfolding ord.rbt_greater_prop[abs_def]"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>less k t. Ball (set (RBT_Impl.keys t)) (less k),\n     \\<lambda>less k t. Ball (set (RBT_Impl.keys t)) (less k))\n    \\<in> (Rk \\<rightarrow> Rk \\<rightarrow> bool_rel) \\<rightarrow>\n          Rk \\<rightarrow>\n          \\<langle>Rk, Rv\\<rangle>rbt_rel \\<rightarrow> bool_rel", "apply (parametricity add: param_list_ball)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a a' aa a'a ab a'b.\n       \\<lbrakk>(a, a') \\<in> Rk \\<rightarrow> Rk \\<rightarrow> bool_rel;\n        (aa, a'a) \\<in> Rk;\n        (ab, a'b) \\<in> \\<langle>Rk, Rv\\<rangle>rbt_rel\\<rbrakk>\n       \\<Longrightarrow> (RBT_Impl.keys ab, RBT_Impl.keys a'b)\n                         \\<in> \\<langle>Rk\\<rangle>list_rel", "unfolding RBT_Impl.keys_def RBT_Impl.entries_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a a' aa a'a ab a'b.\n       \\<lbrakk>(a, a') \\<in> Rk \\<rightarrow> Rk \\<rightarrow> bool_rel;\n        (aa, a'a) \\<in> Rk;\n        (ab, a'b) \\<in> \\<langle>Rk, Rv\\<rangle>rbt_rel\\<rbrakk>\n       \\<Longrightarrow> (map fst\n                           (rec_rbt []\n                             (\\<lambda>_ l k v r la ra. la @ (k, v) # ra)\n                             ab),\n                          map fst\n                           (rec_rbt []\n                             (\\<lambda>_ l k v r la ra. la @ (k, v) # ra)\n                             a'b))\n                         \\<in> \\<langle>Rk\\<rangle>list_rel", "apply (parametricity)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma rbt_sorted_param[param]:\n  \"(ord.rbt_sorted,ord.rbt_sorted)\\<in>(Rk\\<rightarrow>Rk\\<rightarrow>Id)\\<rightarrow>\\<langle>Rk,Rv\\<rangle>rbt_rel\\<rightarrow>Id\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (ord.rbt_sorted, ord.rbt_sorted)\n    \\<in> (Rk \\<rightarrow> Rk \\<rightarrow> bool_rel) \\<rightarrow>\n          \\<langle>Rk, Rv\\<rangle>rbt_rel \\<rightarrow> bool_rel", "unfolding ord.rbt_sorted_def[abs_def]"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>less.\n        rec_rbt True\n         (\\<lambda>c l k v r la ra.\n             ord.rbt_less less k l \\<and>\n             ord.rbt_greater less k r \\<and> la \\<and> ra),\n     \\<lambda>less.\n        rec_rbt True\n         (\\<lambda>c l k v r la ra.\n             ord.rbt_less less k l \\<and>\n             ord.rbt_greater less k r \\<and> la \\<and> ra))\n    \\<in> (Rk \\<rightarrow> Rk \\<rightarrow> bool_rel) \\<rightarrow>\n          \\<langle>Rk, Rv\\<rangle>rbt_rel \\<rightarrow> bool_rel", "by (parametricity)"], ["", "lemma is_rbt_param[param]: \"(ord.is_rbt,ord.is_rbt) \\<in> \n  (Rk\\<rightarrow>Rk\\<rightarrow>Id) \\<rightarrow> \\<langle>Rk,Rv\\<rangle>rbt_rel \\<rightarrow> Id\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (ord.is_rbt, ord.is_rbt)\n    \\<in> (Rk \\<rightarrow> Rk \\<rightarrow> bool_rel) \\<rightarrow>\n          \\<langle>Rk, Rv\\<rangle>rbt_rel \\<rightarrow> bool_rel", "unfolding ord.is_rbt_def[abs_def]"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>less t.\n        inv1 t \\<and>\n        inv2 t \\<and> color_of t = color.B \\<and> ord.rbt_sorted less t,\n     \\<lambda>less t.\n        inv1 t \\<and>\n        inv2 t \\<and> color_of t = color.B \\<and> ord.rbt_sorted less t)\n    \\<in> (Rk \\<rightarrow> Rk \\<rightarrow> bool_rel) \\<rightarrow>\n          \\<langle>Rk, Rv\\<rangle>rbt_rel \\<rightarrow> bool_rel", "by (parametricity)"], ["", "definition \"rbt_map_rel' lt = br (ord.rbt_lookup lt) (ord.is_rbt lt)\""], ["", "lemma (in linorder) rbt_map_impl:\n  \"(rbt.Empty,Map.empty) \\<in> rbt_map_rel' (<)\"\n  \"(rbt_insert,\\<lambda>k v m. m(k\\<mapsto>v)) \n    \\<in> Id \\<rightarrow> Id \\<rightarrow> rbt_map_rel' (<) \\<rightarrow> rbt_map_rel' (<)\"\n  \"(rbt_lookup,\\<lambda>m k. m k) \\<in> rbt_map_rel' (<) \\<rightarrow> Id \\<rightarrow> \\<langle>Id\\<rangle>option_rel\"\n  \"(rbt_delete,\\<lambda>k m. m|`(-{k})) \\<in> Id \\<rightarrow> rbt_map_rel' (<) \\<rightarrow> rbt_map_rel' (<)\"\n  \"(rbt_union,(++)) \n    \\<in> rbt_map_rel' (<) \\<rightarrow> rbt_map_rel' (<) \\<rightarrow> rbt_map_rel' (<)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((rbt.Empty, Map.empty) \\<in> rbt_map_rel' (<) &&&\n     (rbt_insert, \\<lambda>k v m. m(k \\<mapsto> v))\n     \\<in> Id \\<rightarrow>\n           Id \\<rightarrow>\n           rbt_map_rel' (<) \\<rightarrow> rbt_map_rel' (<)) &&&\n    (rbt_lookup, \\<lambda>m. m)\n    \\<in> rbt_map_rel' (<) \\<rightarrow>\n          Id \\<rightarrow> \\<langle>Id\\<rangle>option_rel &&&\n    (rbt_delete, \\<lambda>k m. m |` (- {k}))\n    \\<in> Id \\<rightarrow>\n          rbt_map_rel' (<) \\<rightarrow> rbt_map_rel' (<) &&&\n    (rbt_union, (++))\n    \\<in> rbt_map_rel' (<) \\<rightarrow>\n          rbt_map_rel' (<) \\<rightarrow> rbt_map_rel' (<)", "by (auto simp add: \n    rbt_lookup_rbt_insert rbt_lookup_rbt_delete rbt_lookup_rbt_union\n    rbt_union_is_rbt\n    rbt_map_rel'_def br_def)"], ["", "lemma sorted_wrt_keys_true[simp]: \"sorted_wrt (\\<lambda>(_,_) (_,_). True) l\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sorted_wrt (\\<lambda>(uu_, uu_) (uu_, uu_). True) l", "apply (induct l)"], ["proof (prove)\ngoal (2 subgoals):\n 1. sorted_wrt\n     (\\<lambda>a.\n         case a of\n         (uu_, uua_) \\<Rightarrow>\n           \\<lambda>a. case a of (uu_, uua_) \\<Rightarrow> True)\n     []\n 2. \\<And>a l.\n       sorted_wrt\n        (\\<lambda>a.\n            case a of\n            (uu_, uua_) \\<Rightarrow>\n              \\<lambda>a. case a of (uu_, uua_) \\<Rightarrow> True)\n        l \\<Longrightarrow>\n       sorted_wrt\n        (\\<lambda>a.\n            case a of\n            (uu_, uua_) \\<Rightarrow>\n              \\<lambda>a. case a of (uu_, uua_) \\<Rightarrow> True)\n        (a # l)", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "(*\nlemma (in linorder) rbt_it_linord_impl: \n  \"is_map_iterator_linord (rbt_map_rel' (<)) Id Id Id \n    (rm_iterateoi::_ \\<Rightarrow> ('a,'v,'s) map_iterator)\"\n  unfolding is_map_iterator_genord_def is_map_iterator_linord_def \n    gen_map_iterator_genord_def[abs_def]\n  apply (intro fun_relI)\n  apply (clarsimp intro!: chooseR.intros[OF _ IdI])\nproof -\n  case (goal1 t s' c f s)\n  hence \"is_rbt t\" and [simp]: \"s'=(rbt_lookup t)\" \n    unfolding rbt_map_rel'_def br_def by simp_all\n  hence RSORTED: \"rbt_sorted t\" by (simp add: is_rbt_def)\n \n  thm rm_iterateoi_correct\n  from rm_iterateoi_correct[OF RSORTED,\n    unfolded set_iterator_map_linord_def\n      set_iterator_genord_def\n  ] obtain l where \n      \"distinct l\" \n      and \"map_to_set (rbt_lookup t) = set l\"\n      and \"sorted_wrt (\\<lambda>(k,_) (k',_). k \\<le> k') l\"\n      and \"(rm_iterateoi t::('a,'v,'s) map_iterator) = foldli l\"\n    by blast\n  thus ?case \n    apply (rule_tac exI[where x=l])\n    apply (simp add: sorted_wrt_keys_map_fst)\n    by (metis iterate_to_list_foldli map_iterator_foldli_conv rev_rev_ident \n      set_iterator_foldli_correct)\nqed\n\nlemma (in linorder) rbt_it_rev_linord_impl: \n  \"is_map_iterator_rev_linord (rbt_map_rel' (<)) Id Id Id \n    (rm_reverse_iterateoi::_ \\<Rightarrow> ('a,'v,'s) map_iterator)\"\n  unfolding is_map_iterator_genord_def is_map_iterator_rev_linord_def \n    gen_map_iterator_genord_def[abs_def]\n  apply (intro fun_relI)\n  apply (clarsimp intro!: chooseR.intros[OF _ IdI])\nproof -\n  case (goal1 t s' c f s)\n  hence \"is_rbt t\" and [simp]: \"s'=(rbt_lookup t)\" \n    unfolding rbt_map_rel'_def br_def by simp_all\n  hence RSORTED: \"rbt_sorted t\" by (simp add: is_rbt_def)\n  \n  from rm_reverse_iterateoi_correct[unfolded \n    set_iterator_map_rev_linord_def\n    set_iterator_genord_def,\n    OF RSORTED\n  ] obtain l where \n      \"distinct l\" \n      and \"map_to_set (rbt_lookup t) = set l\"\n      and \"sorted_wrt (\\<lambda>(k,_) (k',_). k \\<ge> k') l\"\n      and \"(rm_reverse_iterateoi t::('a,'v,'s) map_iterator) = foldli l\"\n    by blast\n  thus ?case \n    apply (rule_tac exI[where x=l])\n    apply (simp add: sorted_wrt_keys_map_fst)\n    by (metis iterate_to_list_foldli map_iterator_foldli_conv rev_rev_ident \n      set_iterator_foldli_correct)\nqed\n\nlemma (in linorder) rbt_it_impl: \n  \"is_map_iterator (rbt_map_rel' (<)) Id Id Id rm_iterateoi\"\n  unfolding is_map_iterator_def \n  apply (rule is_map_iterator_genord_weaken)\n  apply (rule rbt_it_linord_impl[unfolded is_map_iterator_linord_def])\n  ..\n\n*)"], ["", "definition rbt_map_rel_def_internal:\n  \"rbt_map_rel lt Rk Rv \\<equiv> \\<langle>Rk,Rv\\<rangle>rbt_rel O rbt_map_rel' lt\""], ["", "lemma rbt_map_rel_def: \n  \"\\<langle>Rk,Rv\\<rangle>rbt_map_rel lt \\<equiv> \\<langle>Rk,Rv\\<rangle>rbt_rel O rbt_map_rel' lt\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<langle>Rk, Rv\\<rangle>rbt_map_rel lt \\<equiv>\n    \\<langle>Rk, Rv\\<rangle>rbt_rel O rbt_map_rel' lt", "by (simp add: rbt_map_rel_def_internal relAPP_def)"], ["", "(*\nlemma (in linorder) autoref_gen_rbt_iterate_linord:\n  \"is_map_iterator_linord \n    (\\<langle>Rk,Rv\\<rangle>rbt_map_rel (<)) (Rk::(_\\<times>'a) set) Rv R\\<sigma> rm_iterateoi\"\nproof -\n  note param_rm_iterateoi[of Rk Rv R\\<sigma>]\n  also note rbt_it_linord_impl[\n    unfolded is_map_iterator_linord_def is_map_iterator_genord_def]\n  finally (relcompI) show ?thesis\n    unfolding is_map_iterator_linord_def is_map_iterator_genord_def\n    apply -\n    apply (erule rev_subsetD)\n    apply (simp add: rbt_map_rel_def rbt_map_rel'_def)\n    apply (\n      rule Orderings.order_trans[OF fun_rel_comp_dist] fun_rel_mono subset_refl\n      | simp\n    )+\n    done\nqed\n\nlemma (in linorder) autoref_gen_rbt_iterate_rev_linord:\n  \"is_map_iterator_rev_linord \n    (\\<langle>Rk,Rv\\<rangle>rbt_map_rel (<)) (Rk::(_\\<times>'a) set) Rv R\\<sigma> rm_reverse_iterateoi\"\nproof -\n  note param_rm_reverse_iterateoi[of Rk Rv R\\<sigma>]\n  also note rbt_it_rev_linord_impl[\n    unfolded is_map_iterator_rev_linord_def is_map_iterator_genord_def]\n  finally (relcompI) show ?thesis\n    unfolding is_map_iterator_rev_linord_def is_map_iterator_genord_def\n    apply -\n    apply (erule rev_subsetD)\n    apply (simp add: rbt_map_rel_def rbt_map_rel'_def)\n    apply (\n      rule Orderings.order_trans[OF fun_rel_comp_dist] fun_rel_mono subset_refl\n      | simp\n    )+\n    done\nqed\n\nlemma (in linorder) autoref_gen_rbt_iterate:\n  \"is_map_iterator \n    (\\<langle>Rk,Rv\\<rangle>rbt_map_rel (<)) (Rk::(_\\<times>'a) set) Rv R\\<sigma> rm_iterateoi\"\nproof -\n  note param_rm_iterateoi[of Rk Rv R\\<sigma>]\n  also note rbt_it_impl[\n    unfolded is_map_iterator_def is_map_iterator_genord_def]\n  finally (relcompI) show ?thesis\n    unfolding is_map_iterator_def is_map_iterator_genord_def\n    apply -\n    apply (erule rev_subsetD)\n    apply (simp add: rbt_map_rel_def rbt_map_rel'_def)\n    apply (\n      rule Orderings.order_trans[OF fun_rel_comp_dist] fun_rel_mono subset_refl\n      | simp\n    )+\n    done\nqed\n*)"], ["", "lemma (in linorder) autoref_gen_rbt_empty: \n  \"(rbt.Empty,Map.empty) \\<in> \\<langle>Rk,Rv\\<rangle>rbt_map_rel (<)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (rbt.Empty, Map.empty) \\<in> \\<langle>Rk, Rv\\<rangle>rbt_map_rel (<)", "by (auto simp: rbt_map_rel_def \n    intro!: rbt_map_impl rbt_rel_intros)"], ["", "lemma (in linorder) autoref_gen_rbt_insert:\n  fixes less_impl\n  assumes param_less: \"(less_impl,(<)) \\<in> Rk \\<rightarrow> Rk \\<rightarrow> Id\"\n  shows \"(ord.rbt_insert less_impl,\\<lambda>k v m. m(k\\<mapsto>v)) \\<in> \n    Rk \\<rightarrow> Rv \\<rightarrow> \\<langle>Rk,Rv\\<rangle>rbt_map_rel (<) \\<rightarrow> \\<langle>Rk,Rv\\<rangle>rbt_map_rel (<)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (ord.rbt_insert less_impl, \\<lambda>k v m. m(k \\<mapsto> v))\n    \\<in> Rk \\<rightarrow>\n          Rv \\<rightarrow>\n          \\<langle>Rk, Rv\\<rangle>rbt_map_rel (<) \\<rightarrow> \\<langle>Rk,\n          Rv\\<rangle>rbt_map_rel (<)", "apply (intro fun_relI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a a' aa a'a ab a'b.\n       \\<lbrakk>(a, a') \\<in> Rk; (aa, a'a) \\<in> Rv;\n        (ab, a'b) \\<in> \\<langle>Rk, Rv\\<rangle>rbt_map_rel (<)\\<rbrakk>\n       \\<Longrightarrow> (ord.rbt_insert less_impl a aa ab, a'b(a' \\<mapsto>\n                          a'a))\n                         \\<in> \\<langle>Rk, Rv\\<rangle>rbt_map_rel (<)", "unfolding rbt_map_rel_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a a' aa a'a ab a'b.\n       \\<lbrakk>(a, a') \\<in> Rk; (aa, a'a) \\<in> Rv;\n        (ab, a'b)\n        \\<in> \\<langle>Rk, Rv\\<rangle>rbt_rel O rbt_map_rel' (<)\\<rbrakk>\n       \\<Longrightarrow> (ord.rbt_insert less_impl a aa ab, a'b(a' \\<mapsto>\n                          a'a))\n                         \\<in> \\<langle>Rk, Rv\\<rangle>rbt_rel O\n                               rbt_map_rel' (<)", "apply (auto intro!: relcomp.intros)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a a' aa a'a ab a'b x y z.\n       \\<lbrakk>(a, a') \\<in> Rk; (aa, a'a) \\<in> Rv;\n        (x, y) \\<in> \\<langle>Rk, Rv\\<rangle>rbt_rel;\n        (y, z) \\<in> rbt_map_rel' (<)\\<rbrakk>\n       \\<Longrightarrow> (ord.rbt_insert less_impl a aa x,\n                          ?b8 a a' aa a'a ab a'b x y z)\n                         \\<in> \\<langle>Rk, Rv\\<rangle>rbt_rel\n 2. \\<And>a a' aa a'a ab a'b x y z.\n       \\<lbrakk>(a, a') \\<in> Rk; (aa, a'a) \\<in> Rv;\n        (x, y) \\<in> \\<langle>Rk, Rv\\<rangle>rbt_rel;\n        (y, z) \\<in> rbt_map_rel' (<)\\<rbrakk>\n       \\<Longrightarrow> (?b8 a a' aa a'a ab a'b x y z, z(a' \\<mapsto> a'a))\n                         \\<in> rbt_map_rel' (<)", "apply (rule param_rbt_insert[OF param_less, param_fo])"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>a a' aa a'a ab a'b x y z.\n       \\<lbrakk>(a, a') \\<in> Rk; (aa, a'a) \\<in> Rv;\n        (x, y) \\<in> \\<langle>Rk, Rv\\<rangle>rbt_rel;\n        (y, z) \\<in> rbt_map_rel' (<)\\<rbrakk>\n       \\<Longrightarrow> (a, ?x'11 a a' aa a'a ab a'b x y z) \\<in> Rk\n 2. \\<And>a a' aa a'a ab a'b x y z.\n       \\<lbrakk>(a, a') \\<in> Rk; (aa, a'a) \\<in> Rv;\n        (x, y) \\<in> \\<langle>Rk, Rv\\<rangle>rbt_rel;\n        (y, z) \\<in> rbt_map_rel' (<)\\<rbrakk>\n       \\<Longrightarrow> (aa, ?x'10 a a' aa a'a ab a'b x y z) \\<in> Rv\n 3. \\<And>a a' aa a'a ab a'b x y z.\n       \\<lbrakk>(a, a') \\<in> Rk; (aa, a'a) \\<in> Rv;\n        (x, y) \\<in> \\<langle>Rk, Rv\\<rangle>rbt_rel;\n        (y, z) \\<in> rbt_map_rel' (<)\\<rbrakk>\n       \\<Longrightarrow> (x, ?x'9 a a' aa a'a ab a'b x y z)\n                         \\<in> \\<langle>Rk, Rv\\<rangle>rbt_rel\n 4. \\<And>a a' aa a'a ab a'b x y z.\n       \\<lbrakk>(a, a') \\<in> Rk; (aa, a'a) \\<in> Rv;\n        (x, y) \\<in> \\<langle>Rk, Rv\\<rangle>rbt_rel;\n        (y, z) \\<in> rbt_map_rel' (<)\\<rbrakk>\n       \\<Longrightarrow> (rbt_insert (?x'11 a a' aa a'a ab a'b x y z)\n                           (?x'10 a a' aa a'a ab a'b x y z)\n                           (?x'9 a a' aa a'a ab a'b x y z),\n                          z(a' \\<mapsto> a'a))\n                         \\<in> rbt_map_rel' (<)", "apply assumption+"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a a' aa a'a ab a'b x y z.\n       \\<lbrakk>(a, a') \\<in> Rk; (aa, a'a) \\<in> Rv;\n        (x, y) \\<in> \\<langle>Rk, Rv\\<rangle>rbt_rel;\n        (y, z) \\<in> rbt_map_rel' (<)\\<rbrakk>\n       \\<Longrightarrow> (rbt_insert a' a'a y, z(a' \\<mapsto> a'a))\n                         \\<in> rbt_map_rel' (<)", "apply (rule rbt_map_impl[param_fo])"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>a a' aa a'a ab a'b x y z.\n       \\<lbrakk>(a, a') \\<in> Rk; (aa, a'a) \\<in> Rv;\n        (x, y) \\<in> \\<langle>Rk, Rv\\<rangle>rbt_rel;\n        (y, z) \\<in> rbt_map_rel' (<)\\<rbrakk>\n       \\<Longrightarrow> (a', a') \\<in> Id\n 2. \\<And>a a' aa a'a ab a'b x y z.\n       \\<lbrakk>(a, a') \\<in> Rk; (aa, a'a) \\<in> Rv;\n        (x, y) \\<in> \\<langle>Rk, Rv\\<rangle>rbt_rel;\n        (y, z) \\<in> rbt_map_rel' (<)\\<rbrakk>\n       \\<Longrightarrow> (a'a, a'a) \\<in> Id\n 3. \\<And>a a' aa a'a ab a'b x y z.\n       \\<lbrakk>(a, a') \\<in> Rk; (aa, a'a) \\<in> Rv;\n        (x, y) \\<in> \\<langle>Rk, Rv\\<rangle>rbt_rel;\n        (y, z) \\<in> rbt_map_rel' (<)\\<rbrakk>\n       \\<Longrightarrow> (y, z) \\<in> rbt_map_rel' (<)", "apply (rule IdI | assumption)+"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in linorder) autoref_gen_rbt_lookup:\n  fixes less_impl\n  assumes param_less: \"(less_impl,(<)) \\<in> Rk \\<rightarrow> Rk \\<rightarrow> Id\"\n  shows \"(ord.rbt_lookup less_impl, \\<lambda>m k. m k) \\<in> \n    \\<langle>Rk,Rv\\<rangle>rbt_map_rel (<) \\<rightarrow> Rk \\<rightarrow> \\<langle>Rv\\<rangle>option_rel\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (ord.rbt_lookup less_impl, \\<lambda>m. m)\n    \\<in> \\<langle>Rk, Rv\\<rangle>rbt_map_rel (<) \\<rightarrow>\n          Rk \\<rightarrow> \\<langle>Rv\\<rangle>option_rel", "unfolding rbt_map_rel_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (ord.rbt_lookup less_impl, \\<lambda>m. m)\n    \\<in> \\<langle>Rk, Rv\\<rangle>rbt_rel O rbt_map_rel' (<) \\<rightarrow>\n          Rk \\<rightarrow> \\<langle>Rv\\<rangle>option_rel", "apply (intro fun_relI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a a' aa a'a.\n       \\<lbrakk>(a, a')\n                \\<in> \\<langle>Rk, Rv\\<rangle>rbt_rel O rbt_map_rel' (<);\n        (aa, a'a) \\<in> Rk\\<rbrakk>\n       \\<Longrightarrow> (ord.rbt_lookup less_impl a aa, a' a'a)\n                         \\<in> \\<langle>Rv\\<rangle>option_rel", "apply (elim relcomp.cases)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a a' aa a'a ab b c.\n       \\<lbrakk>(aa, a'a) \\<in> Rk; a = ab; a' = c;\n        (ab, b) \\<in> \\<langle>Rk, Rv\\<rangle>rbt_rel;\n        (b, c) \\<in> rbt_map_rel' (<)\\<rbrakk>\n       \\<Longrightarrow> (ord.rbt_lookup less_impl a aa, a' a'a)\n                         \\<in> \\<langle>Rv\\<rangle>option_rel", "apply hypsubst"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a a' aa a'a ab b c.\n       \\<lbrakk>(aa, a'a) \\<in> Rk;\n        (ab, b) \\<in> \\<langle>Rk, Rv\\<rangle>rbt_rel;\n        (b, c) \\<in> rbt_map_rel' (<)\\<rbrakk>\n       \\<Longrightarrow> (ord.rbt_lookup less_impl ab aa, c a'a)\n                         \\<in> \\<langle>Rv\\<rangle>option_rel", "apply (subst R_O_Id[symmetric])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a a' aa a'a ab b c.\n       \\<lbrakk>(aa, a'a) \\<in> Rk;\n        (ab, b) \\<in> \\<langle>Rk, Rv\\<rangle>rbt_rel;\n        (b, c) \\<in> rbt_map_rel' (<)\\<rbrakk>\n       \\<Longrightarrow> (ord.rbt_lookup less_impl ab aa, c a'a)\n                         \\<in> \\<langle>Rv\\<rangle>option_rel O Id", "apply (rule relcompI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a a' aa a'a ab b c.\n       \\<lbrakk>(aa, a'a) \\<in> Rk;\n        (ab, b) \\<in> \\<langle>Rk, Rv\\<rangle>rbt_rel;\n        (b, c) \\<in> rbt_map_rel' (<)\\<rbrakk>\n       \\<Longrightarrow> (ord.rbt_lookup less_impl ab aa,\n                          ?b7 a a' aa a'a ab b c)\n                         \\<in> \\<langle>Rv\\<rangle>option_rel\n 2. \\<And>a a' aa a'a ab b c.\n       \\<lbrakk>(aa, a'a) \\<in> Rk;\n        (ab, b) \\<in> \\<langle>Rk, Rv\\<rangle>rbt_rel;\n        (b, c) \\<in> rbt_map_rel' (<)\\<rbrakk>\n       \\<Longrightarrow> (?b7 a a' aa a'a ab b c, c a'a) \\<in> Id", "apply (rule param_rbt_lookup[OF param_less, param_fo])"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>a a' aa a'a ab b c.\n       \\<lbrakk>(aa, a'a) \\<in> Rk;\n        (ab, b) \\<in> \\<langle>Rk, Rv\\<rangle>rbt_rel;\n        (b, c) \\<in> rbt_map_rel' (<)\\<rbrakk>\n       \\<Longrightarrow> (ab, ?x'11 a a' aa a'a ab b c) \\<in> \\<langle>Rk,\n                         Rv\\<rangle>rbt_rel\n 2. \\<And>a a' aa a'a ab b c.\n       \\<lbrakk>(aa, a'a) \\<in> Rk;\n        (ab, b) \\<in> \\<langle>Rk, Rv\\<rangle>rbt_rel;\n        (b, c) \\<in> rbt_map_rel' (<)\\<rbrakk>\n       \\<Longrightarrow> (aa, ?x'10 a a' aa a'a ab b c) \\<in> Rk\n 3. \\<And>a a' aa a'a ab b c.\n       \\<lbrakk>(aa, a'a) \\<in> Rk;\n        (ab, b) \\<in> \\<langle>Rk, Rv\\<rangle>rbt_rel;\n        (b, c) \\<in> rbt_map_rel' (<)\\<rbrakk>\n       \\<Longrightarrow> (rbt_lookup (?x'11 a a' aa a'a ab b c)\n                           (?x'10 a a' aa a'a ab b c),\n                          c a'a)\n                         \\<in> Id", "apply assumption+"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a a' aa a'a ab b c.\n       \\<lbrakk>(aa, a'a) \\<in> Rk;\n        (ab, b) \\<in> \\<langle>Rk, Rv\\<rangle>rbt_rel;\n        (b, c) \\<in> rbt_map_rel' (<)\\<rbrakk>\n       \\<Longrightarrow> (rbt_lookup b a'a, c a'a) \\<in> Id", "apply (subst option_rel_id_simp[symmetric])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a a' aa a'a ab b c.\n       \\<lbrakk>(aa, a'a) \\<in> Rk;\n        (ab, b) \\<in> \\<langle>Rk, Rv\\<rangle>rbt_rel;\n        (b, c) \\<in> rbt_map_rel' (<)\\<rbrakk>\n       \\<Longrightarrow> (rbt_lookup b a'a, c a'a)\n                         \\<in> \\<langle>Id\\<rangle>option_rel", "apply (rule rbt_map_impl[param_fo])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a a' aa a'a ab b c.\n       \\<lbrakk>(aa, a'a) \\<in> Rk;\n        (ab, b) \\<in> \\<langle>Rk, Rv\\<rangle>rbt_rel;\n        (b, c) \\<in> rbt_map_rel' (<)\\<rbrakk>\n       \\<Longrightarrow> (b, c) \\<in> rbt_map_rel' (<)\n 2. \\<And>a a' aa a'a ab b c.\n       \\<lbrakk>(aa, a'a) \\<in> Rk;\n        (ab, b) \\<in> \\<langle>Rk, Rv\\<rangle>rbt_rel;\n        (b, c) \\<in> rbt_map_rel' (<)\\<rbrakk>\n       \\<Longrightarrow> (a'a, a'a) \\<in> Id", "apply assumption"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a a' aa a'a ab b c.\n       \\<lbrakk>(aa, a'a) \\<in> Rk;\n        (ab, b) \\<in> \\<langle>Rk, Rv\\<rangle>rbt_rel;\n        (b, c) \\<in> rbt_map_rel' (<)\\<rbrakk>\n       \\<Longrightarrow> (a'a, a'a) \\<in> Id", "apply (rule IdI)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in linorder) autoref_gen_rbt_delete:\n  fixes less_impl\n  assumes param_less: \"(less_impl,(<)) \\<in> Rk \\<rightarrow> Rk \\<rightarrow> Id\"\n  shows \"(ord.rbt_delete less_impl, \\<lambda>k m. m |`(-{k})) \\<in> \n    Rk \\<rightarrow> \\<langle>Rk,Rv\\<rangle>rbt_map_rel (<) \\<rightarrow> \\<langle>Rk,Rv\\<rangle>rbt_map_rel (<)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (ord.rbt_delete less_impl, \\<lambda>k m. m |` (- {k}))\n    \\<in> Rk \\<rightarrow>\n          \\<langle>Rk, Rv\\<rangle>rbt_map_rel (<) \\<rightarrow> \\<langle>Rk,\n          Rv\\<rangle>rbt_map_rel (<)", "unfolding rbt_map_rel_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (ord.rbt_delete less_impl, \\<lambda>k m. m |` (- {k}))\n    \\<in> Rk \\<rightarrow>\n          \\<langle>Rk, Rv\\<rangle>rbt_rel O rbt_map_rel' (<) \\<rightarrow>\n          \\<langle>Rk, Rv\\<rangle>rbt_rel O rbt_map_rel' (<)", "apply (intro fun_relI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a a' aa a'a.\n       \\<lbrakk>(a, a') \\<in> Rk;\n        (aa, a'a)\n        \\<in> \\<langle>Rk, Rv\\<rangle>rbt_rel O rbt_map_rel' (<)\\<rbrakk>\n       \\<Longrightarrow> (ord.rbt_delete less_impl a aa, a'a |` (- {a'}))\n                         \\<in> \\<langle>Rk, Rv\\<rangle>rbt_rel O\n                               rbt_map_rel' (<)", "apply (elim relcomp.cases)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a a' aa a'a ab b c.\n       \\<lbrakk>(a, a') \\<in> Rk; aa = ab; a'a = c;\n        (ab, b) \\<in> \\<langle>Rk, Rv\\<rangle>rbt_rel;\n        (b, c) \\<in> rbt_map_rel' (<)\\<rbrakk>\n       \\<Longrightarrow> (ord.rbt_delete less_impl a aa, a'a |` (- {a'}))\n                         \\<in> \\<langle>Rk, Rv\\<rangle>rbt_rel O\n                               rbt_map_rel' (<)", "apply hypsubst"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a a' aa a'a ab b c.\n       \\<lbrakk>(a, a') \\<in> Rk;\n        (ab, b) \\<in> \\<langle>Rk, Rv\\<rangle>rbt_rel;\n        (b, c) \\<in> rbt_map_rel' (<)\\<rbrakk>\n       \\<Longrightarrow> (ord.rbt_delete less_impl a ab, c |` (- {a'}))\n                         \\<in> \\<langle>Rk, Rv\\<rangle>rbt_rel O\n                               rbt_map_rel' (<)", "apply (rule relcompI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a a' aa a'a ab b c.\n       \\<lbrakk>(a, a') \\<in> Rk;\n        (ab, b) \\<in> \\<langle>Rk, Rv\\<rangle>rbt_rel;\n        (b, c) \\<in> rbt_map_rel' (<)\\<rbrakk>\n       \\<Longrightarrow> (ord.rbt_delete less_impl a ab,\n                          ?b5 a a' aa a'a ab b c)\n                         \\<in> \\<langle>Rk, Rv\\<rangle>rbt_rel\n 2. \\<And>a a' aa a'a ab b c.\n       \\<lbrakk>(a, a') \\<in> Rk;\n        (ab, b) \\<in> \\<langle>Rk, Rv\\<rangle>rbt_rel;\n        (b, c) \\<in> rbt_map_rel' (<)\\<rbrakk>\n       \\<Longrightarrow> (?b5 a a' aa a'a ab b c, c |` (- {a'}))\n                         \\<in> rbt_map_rel' (<)", "apply (rule param_rbt_delete[OF param_less, param_fo])"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>a a' aa a'a ab b c.\n       \\<lbrakk>(a, a') \\<in> Rk;\n        (ab, b) \\<in> \\<langle>Rk, Rv\\<rangle>rbt_rel;\n        (b, c) \\<in> rbt_map_rel' (<)\\<rbrakk>\n       \\<Longrightarrow> (a, ?x'9 a a' aa a'a ab b c) \\<in> Rk\n 2. \\<And>a a' aa a'a ab b c.\n       \\<lbrakk>(a, a') \\<in> Rk;\n        (ab, b) \\<in> \\<langle>Rk, Rv\\<rangle>rbt_rel;\n        (b, c) \\<in> rbt_map_rel' (<)\\<rbrakk>\n       \\<Longrightarrow> (ab, ?x'8 a a' aa a'a ab b c) \\<in> \\<langle>Rk,\n                         Rv\\<rangle>rbt_rel\n 3. \\<And>a a' aa a'a ab b c.\n       \\<lbrakk>(a, a') \\<in> Rk;\n        (ab, b) \\<in> \\<langle>Rk, Rv\\<rangle>rbt_rel;\n        (b, c) \\<in> rbt_map_rel' (<)\\<rbrakk>\n       \\<Longrightarrow> (rbt_delete (?x'9 a a' aa a'a ab b c)\n                           (?x'8 a a' aa a'a ab b c),\n                          c |` (- {a'}))\n                         \\<in> rbt_map_rel' (<)", "apply assumption+"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a a' aa a'a ab b c.\n       \\<lbrakk>(a, a') \\<in> Rk;\n        (ab, b) \\<in> \\<langle>Rk, Rv\\<rangle>rbt_rel;\n        (b, c) \\<in> rbt_map_rel' (<)\\<rbrakk>\n       \\<Longrightarrow> (rbt_delete a' b, c |` (- {a'}))\n                         \\<in> rbt_map_rel' (<)", "apply (rule rbt_map_impl[param_fo])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a a' aa a'a ab b c.\n       \\<lbrakk>(a, a') \\<in> Rk;\n        (ab, b) \\<in> \\<langle>Rk, Rv\\<rangle>rbt_rel;\n        (b, c) \\<in> rbt_map_rel' (<)\\<rbrakk>\n       \\<Longrightarrow> (a', a') \\<in> Id\n 2. \\<And>a a' aa a'a ab b c.\n       \\<lbrakk>(a, a') \\<in> Rk;\n        (ab, b) \\<in> \\<langle>Rk, Rv\\<rangle>rbt_rel;\n        (b, c) \\<in> rbt_map_rel' (<)\\<rbrakk>\n       \\<Longrightarrow> (b, c) \\<in> rbt_map_rel' (<)", "apply (rule IdI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a a' aa a'a ab b c.\n       \\<lbrakk>(a, a') \\<in> Rk;\n        (ab, b) \\<in> \\<langle>Rk, Rv\\<rangle>rbt_rel;\n        (b, c) \\<in> rbt_map_rel' (<)\\<rbrakk>\n       \\<Longrightarrow> (b, c) \\<in> rbt_map_rel' (<)", "apply assumption"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in linorder) autoref_gen_rbt_union:\n  fixes less_impl\n  assumes param_less: \"(less_impl,(<)) \\<in> Rk \\<rightarrow> Rk \\<rightarrow> Id\"\n  shows \"(ord.rbt_union less_impl, (++)) \\<in> \n    \\<langle>Rk,Rv\\<rangle>rbt_map_rel (<) \\<rightarrow> \\<langle>Rk,Rv\\<rangle>rbt_map_rel (<) \\<rightarrow> \\<langle>Rk,Rv\\<rangle>rbt_map_rel (<)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (ord.rbt_union less_impl, (++))\n    \\<in> \\<langle>Rk, Rv\\<rangle>rbt_map_rel (<) \\<rightarrow>\n          \\<langle>Rk, Rv\\<rangle>rbt_map_rel (<) \\<rightarrow> \\<langle>Rk,\n          Rv\\<rangle>rbt_map_rel (<)", "unfolding rbt_map_rel_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (ord.rbt_union less_impl, (++))\n    \\<in> \\<langle>Rk, Rv\\<rangle>rbt_rel O rbt_map_rel' (<) \\<rightarrow>\n          \\<langle>Rk, Rv\\<rangle>rbt_rel O rbt_map_rel' (<) \\<rightarrow>\n          \\<langle>Rk, Rv\\<rangle>rbt_rel O rbt_map_rel' (<)", "apply (intro fun_relI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a a' aa a'a.\n       \\<lbrakk>(a, a')\n                \\<in> \\<langle>Rk, Rv\\<rangle>rbt_rel O rbt_map_rel' (<);\n        (aa, a'a)\n        \\<in> \\<langle>Rk, Rv\\<rangle>rbt_rel O rbt_map_rel' (<)\\<rbrakk>\n       \\<Longrightarrow> (ord.rbt_union less_impl a aa, a' ++ a'a)\n                         \\<in> \\<langle>Rk, Rv\\<rangle>rbt_rel O\n                               rbt_map_rel' (<)", "apply (elim relcomp.cases)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a a' aa a'a ab b c ac ba ca.\n       \\<lbrakk>a = ab; a' = c;\n        (ab, b) \\<in> \\<langle>Rk, Rv\\<rangle>rbt_rel;\n        (b, c) \\<in> rbt_map_rel' (<); aa = ac; a'a = ca;\n        (ac, ba) \\<in> \\<langle>Rk, Rv\\<rangle>rbt_rel;\n        (ba, ca) \\<in> rbt_map_rel' (<)\\<rbrakk>\n       \\<Longrightarrow> (ord.rbt_union less_impl a aa, a' ++ a'a)\n                         \\<in> \\<langle>Rk, Rv\\<rangle>rbt_rel O\n                               rbt_map_rel' (<)", "apply hypsubst"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a a' aa a'a ab b c ac ba ca.\n       \\<lbrakk>(ab, b) \\<in> \\<langle>Rk, Rv\\<rangle>rbt_rel;\n        (b, c) \\<in> rbt_map_rel' (<);\n        (ac, ba) \\<in> \\<langle>Rk, Rv\\<rangle>rbt_rel;\n        (ba, ca) \\<in> rbt_map_rel' (<)\\<rbrakk>\n       \\<Longrightarrow> (ord.rbt_union less_impl ab ac, c ++ ca)\n                         \\<in> \\<langle>Rk, Rv\\<rangle>rbt_rel O\n                               rbt_map_rel' (<)", "apply (rule relcompI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a a' aa a'a ab b c ac ba ca.\n       \\<lbrakk>(ab, b) \\<in> \\<langle>Rk, Rv\\<rangle>rbt_rel;\n        (b, c) \\<in> rbt_map_rel' (<);\n        (ac, ba) \\<in> \\<langle>Rk, Rv\\<rangle>rbt_rel;\n        (ba, ca) \\<in> rbt_map_rel' (<)\\<rbrakk>\n       \\<Longrightarrow> (ord.rbt_union less_impl ab ac,\n                          ?b8 a a' aa a'a ab b c ac ba ca)\n                         \\<in> \\<langle>Rk, Rv\\<rangle>rbt_rel\n 2. \\<And>a a' aa a'a ab b c ac ba ca.\n       \\<lbrakk>(ab, b) \\<in> \\<langle>Rk, Rv\\<rangle>rbt_rel;\n        (b, c) \\<in> rbt_map_rel' (<);\n        (ac, ba) \\<in> \\<langle>Rk, Rv\\<rangle>rbt_rel;\n        (ba, ca) \\<in> rbt_map_rel' (<)\\<rbrakk>\n       \\<Longrightarrow> (?b8 a a' aa a'a ab b c ac ba ca, c ++ ca)\n                         \\<in> rbt_map_rel' (<)", "apply (rule param_rbt_union[OF param_less, param_fo])"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>a a' aa a'a ab b c ac ba ca.\n       \\<lbrakk>(ab, b) \\<in> \\<langle>Rk, Rv\\<rangle>rbt_rel;\n        (b, c) \\<in> rbt_map_rel' (<);\n        (ac, ba) \\<in> \\<langle>Rk, Rv\\<rangle>rbt_rel;\n        (ba, ca) \\<in> rbt_map_rel' (<)\\<rbrakk>\n       \\<Longrightarrow> (ab, ?x'12 a a' aa a'a ab b c ac ba ca)\n                         \\<in> \\<langle>Rk, Rv\\<rangle>rbt_rel\n 2. \\<And>a a' aa a'a ab b c ac ba ca.\n       \\<lbrakk>(ab, b) \\<in> \\<langle>Rk, Rv\\<rangle>rbt_rel;\n        (b, c) \\<in> rbt_map_rel' (<);\n        (ac, ba) \\<in> \\<langle>Rk, Rv\\<rangle>rbt_rel;\n        (ba, ca) \\<in> rbt_map_rel' (<)\\<rbrakk>\n       \\<Longrightarrow> (ac, ?x'11 a a' aa a'a ab b c ac ba ca)\n                         \\<in> \\<langle>Rk, Rv\\<rangle>rbt_rel\n 3. \\<And>a a' aa a'a ab b c ac ba ca.\n       \\<lbrakk>(ab, b) \\<in> \\<langle>Rk, Rv\\<rangle>rbt_rel;\n        (b, c) \\<in> rbt_map_rel' (<);\n        (ac, ba) \\<in> \\<langle>Rk, Rv\\<rangle>rbt_rel;\n        (ba, ca) \\<in> rbt_map_rel' (<)\\<rbrakk>\n       \\<Longrightarrow> (rbt_union (?x'12 a a' aa a'a ab b c ac ba ca)\n                           (?x'11 a a' aa a'a ab b c ac ba ca),\n                          c ++ ca)\n                         \\<in> rbt_map_rel' (<)", "apply assumption+"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a a' aa a'a ab b c ac ba ca.\n       \\<lbrakk>(ab, b) \\<in> \\<langle>Rk, Rv\\<rangle>rbt_rel;\n        (b, c) \\<in> rbt_map_rel' (<);\n        (ac, ba) \\<in> \\<langle>Rk, Rv\\<rangle>rbt_rel;\n        (ba, ca) \\<in> rbt_map_rel' (<)\\<rbrakk>\n       \\<Longrightarrow> (rbt_union b ba, c ++ ca) \\<in> rbt_map_rel' (<)", "apply (rule rbt_map_impl[param_fo])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a a' aa a'a ab b c ac ba ca.\n       \\<lbrakk>(ab, b) \\<in> \\<langle>Rk, Rv\\<rangle>rbt_rel;\n        (b, c) \\<in> rbt_map_rel' (<);\n        (ac, ba) \\<in> \\<langle>Rk, Rv\\<rangle>rbt_rel;\n        (ba, ca) \\<in> rbt_map_rel' (<)\\<rbrakk>\n       \\<Longrightarrow> (b, c) \\<in> rbt_map_rel' (<)\n 2. \\<And>a a' aa a'a ab b c ac ba ca.\n       \\<lbrakk>(ab, b) \\<in> \\<langle>Rk, Rv\\<rangle>rbt_rel;\n        (b, c) \\<in> rbt_map_rel' (<);\n        (ac, ba) \\<in> \\<langle>Rk, Rv\\<rangle>rbt_rel;\n        (ba, ca) \\<in> rbt_map_rel' (<)\\<rbrakk>\n       \\<Longrightarrow> (ba, ca) \\<in> rbt_map_rel' (<)", "apply assumption+"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "subsection \\<open>A linear ordering on red-black trees\\<close>"], ["", "abbreviation \"rbt_to_list t \\<equiv> it_to_list rm_iterateoi t\""], ["", "lemma (in linorder) rbt_to_list_correct: \n  assumes SORTED: \"rbt_sorted t\"\n  shows \"rbt_to_list t = sorted_list_of_map (rbt_lookup t)\" (is \"?tl = _\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. rbt_to_list t = sorted_list_of_map (rbt_lookup t)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. rbt_to_list t = sorted_list_of_map (rbt_lookup t)", "from map_it_to_list_linord_correct[where it=rm_iterateoi, OF \n    rm_iterateoi_correct[OF SORTED]\n  ]"], ["proof (chain)\npicking this:\n  map_of (rbt_to_list t) = rbt_lookup t \\<and>\n  distinct (map fst (rbt_to_list t)) \\<and> sorted (map fst (rbt_to_list t))", "have \n      M: \"map_of ?tl = rbt_lookup t\"\n      and D: \"distinct (map fst ?tl)\"\n      and S: \"sorted (map fst ?tl)\""], ["proof (prove)\nusing this:\n  map_of (rbt_to_list t) = rbt_lookup t \\<and>\n  distinct (map fst (rbt_to_list t)) \\<and> sorted (map fst (rbt_to_list t))\n\ngoal (1 subgoal):\n 1. map_of (rbt_to_list t) = rbt_lookup t &&&\n    distinct (map fst (rbt_to_list t)) &&& sorted (map fst (rbt_to_list t))", "by (simp_all)"], ["proof (state)\nthis:\n  map_of (rbt_to_list t) = rbt_lookup t\n  distinct (map fst (rbt_to_list t))\n  sorted (map fst (rbt_to_list t))\n\ngoal (1 subgoal):\n 1. rbt_to_list t = sorted_list_of_map (rbt_lookup t)", "from the_sorted_list_of_map[OF D S] M"], ["proof (chain)\npicking this:\n  sorted_list_of_map (map_of (rbt_to_list t)) = rbt_to_list t\n  map_of (rbt_to_list t) = rbt_lookup t", "show ?thesis"], ["proof (prove)\nusing this:\n  sorted_list_of_map (map_of (rbt_to_list t)) = rbt_to_list t\n  map_of (rbt_to_list t) = rbt_lookup t\n\ngoal (1 subgoal):\n 1. rbt_to_list t = sorted_list_of_map (rbt_lookup t)", "by simp"], ["proof (state)\nthis:\n  rbt_to_list t = sorted_list_of_map (rbt_lookup t)\n\ngoal:\nNo subgoals!", "qed"], ["", "definition \n  \"cmp_rbt cmpk cmpv \\<equiv> cmp_img rbt_to_list (cmp_lex (cmp_prod cmpk cmpv))\""], ["", "lemma (in linorder) param_rbt_sorted_list_of_map[param]:\n  shows \"(rbt_to_list, sorted_list_of_map) \\<in> \n  \\<langle>Rk, Rv\\<rangle>rbt_map_rel (<) \\<rightarrow> \\<langle>\\<langle>Rk,Rv\\<rangle>prod_rel\\<rangle>list_rel\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (rbt_to_list, sorted_list_of_map)\n    \\<in> \\<langle>Rk, Rv\\<rangle>rbt_map_rel (<) \\<rightarrow>\n          \\<langle>Rk \\<times>\\<^sub>r Rv\\<rangle>list_rel", "apply (auto simp: rbt_map_rel_def rbt_map_rel'_def br_def\n    rbt_to_list_correct[symmetric]\n  )"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>(x, y) \\<in> \\<langle>Rk, Rv\\<rangle>rbt_rel;\n        is_rbt y\\<rbrakk>\n       \\<Longrightarrow> (rbt_to_list x, rbt_to_list y)\n                         \\<in> \\<langle>Rk \\<times>\\<^sub>r\n  Rv\\<rangle>list_rel", "by (parametricity)"], ["", "lemma param_rbt_sorted_list_of_map'[param]:\n  assumes ELO: \"eq_linorder cmp'\"\n  shows \"(rbt_to_list,linorder.sorted_list_of_map (comp2le cmp')) \\<in> \n    \\<langle>Rk,Rv\\<rangle>rbt_map_rel (comp2lt cmp') \\<rightarrow> \\<langle>\\<langle>Rk,Rv\\<rangle>prod_rel\\<rangle>list_rel\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (rbt_to_list, linorder.sorted_list_of_map (comp2le cmp'))\n    \\<in> \\<langle>Rk, Rv\\<rangle>rbt_map_rel (comp2lt cmp') \\<rightarrow>\n          \\<langle>Rk \\<times>\\<^sub>r Rv\\<rangle>list_rel", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (rbt_to_list, linorder.sorted_list_of_map (comp2le cmp'))\n    \\<in> \\<langle>Rk, Rv\\<rangle>rbt_map_rel (comp2lt cmp') \\<rightarrow>\n          \\<langle>Rk \\<times>\\<^sub>r Rv\\<rangle>list_rel", "interpret linorder \"comp2le cmp'\" \"comp2lt cmp'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. class.linorder (comp2le cmp') (comp2lt cmp')", "using ELO"], ["proof (prove)\nusing this:\n  eq_linorder cmp'\n\ngoal (1 subgoal):\n 1. class.linorder (comp2le cmp') (comp2lt cmp')", "by (simp add: eq_linorder_class_conv)"], ["proof (state)\ngoal (1 subgoal):\n 1. (rbt_to_list, local.sorted_list_of_map)\n    \\<in> \\<langle>Rk, Rv\\<rangle>rbt_map_rel (comp2lt cmp') \\<rightarrow>\n          \\<langle>Rk \\<times>\\<^sub>r Rv\\<rangle>list_rel", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. (rbt_to_list, local.sorted_list_of_map)\n    \\<in> \\<langle>Rk, Rv\\<rangle>rbt_map_rel (comp2lt cmp') \\<rightarrow>\n          \\<langle>Rk \\<times>\\<^sub>r Rv\\<rangle>list_rel", "by parametricity"], ["proof (state)\nthis:\n  (rbt_to_list, local.sorted_list_of_map)\n  \\<in> \\<langle>Rk, Rv\\<rangle>rbt_map_rel (comp2lt cmp') \\<rightarrow>\n        \\<langle>Rk \\<times>\\<^sub>r Rv\\<rangle>list_rel\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma rbt_linorder_impl:\n  assumes ELO: \"eq_linorder cmp'\"\n  assumes [param]: \"(cmp,cmp')\\<in>Rk\\<rightarrow>Rk\\<rightarrow>Id\"\n  shows \n  \"(cmp_rbt cmp, cmp_map cmp') \\<in> \n    (Rv\\<rightarrow>Rv\\<rightarrow>Id) \n    \\<rightarrow> \\<langle>Rk,Rv\\<rangle>rbt_map_rel (comp2lt cmp') \n    \\<rightarrow> \\<langle>Rk,Rv\\<rangle>rbt_map_rel (comp2lt cmp') \\<rightarrow> Id\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (cmp_rbt cmp, cmp_map cmp')\n    \\<in> (Rv \\<rightarrow> Rv \\<rightarrow> comp_res_rel) \\<rightarrow>\n          \\<langle>Rk, Rv\\<rangle>rbt_map_rel (comp2lt cmp') \\<rightarrow>\n          \\<langle>Rk, Rv\\<rangle>rbt_map_rel (comp2lt cmp') \\<rightarrow>\n          comp_res_rel", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (cmp_rbt cmp, cmp_map cmp')\n    \\<in> (Rv \\<rightarrow> Rv \\<rightarrow> comp_res_rel) \\<rightarrow>\n          \\<langle>Rk, Rv\\<rangle>rbt_map_rel (comp2lt cmp') \\<rightarrow>\n          \\<langle>Rk, Rv\\<rangle>rbt_map_rel (comp2lt cmp') \\<rightarrow>\n          comp_res_rel", "interpret linorder \"comp2le cmp'\" \"comp2lt cmp'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. class.linorder (comp2le cmp') (comp2lt cmp')", "using ELO"], ["proof (prove)\nusing this:\n  eq_linorder cmp'\n\ngoal (1 subgoal):\n 1. class.linorder (comp2le cmp') (comp2lt cmp')", "by (simp add: eq_linorder_class_conv)"], ["proof (state)\ngoal (1 subgoal):\n 1. (cmp_rbt cmp, cmp_map cmp')\n    \\<in> (Rv \\<rightarrow> Rv \\<rightarrow> comp_res_rel) \\<rightarrow>\n          \\<langle>Rk, Rv\\<rangle>rbt_map_rel (comp2lt cmp') \\<rightarrow>\n          \\<langle>Rk, Rv\\<rangle>rbt_map_rel (comp2lt cmp') \\<rightarrow>\n          comp_res_rel", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. (cmp_rbt cmp, cmp_map cmp')\n    \\<in> (Rv \\<rightarrow> Rv \\<rightarrow> comp_res_rel) \\<rightarrow>\n          \\<langle>Rk, Rv\\<rangle>rbt_map_rel (comp2lt cmp') \\<rightarrow>\n          \\<langle>Rk, Rv\\<rangle>rbt_map_rel (comp2lt cmp') \\<rightarrow>\n          comp_res_rel", "unfolding cmp_map_def[abs_def] cmp_rbt_def[abs_def]"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>cmpv. cmp_img rbt_to_list (cmp_lex (cmp_prod cmp cmpv)),\n     \\<lambda>cmpv.\n        cmp_extend (Collect (finite \\<circ> dom))\n         (cmp_img local.sorted_list_of_map (cmp_lex (cmp_prod cmp' cmpv))))\n    \\<in> (Rv \\<rightarrow> Rv \\<rightarrow> comp_res_rel) \\<rightarrow>\n          \\<langle>Rk, Rv\\<rangle>rbt_map_rel (comp2lt cmp') \\<rightarrow>\n          \\<langle>Rk, Rv\\<rangle>rbt_map_rel (comp2lt cmp') \\<rightarrow>\n          comp_res_rel", "apply (parametricity add: param_cmp_extend param_cmp_img)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a a'.\n       (a, a')\n       \\<in> Rv \\<rightarrow>\n             Rv \\<rightarrow> comp_res_rel \\<Longrightarrow>\n       Range (\\<langle>Rk, Rv\\<rangle>rbt_map_rel (comp2lt cmp'))\n       \\<subseteq> Collect (finite \\<circ> dom)", "unfolding rbt_map_rel_def[abs_def] rbt_map_rel'_def br_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a a'.\n       (a, a')\n       \\<in> Rv \\<rightarrow>\n             Rv \\<rightarrow> comp_res_rel \\<Longrightarrow>\n       Range\n        (\\<langle>Rk, Rv\\<rangle>rbt_rel O\n         {(c, a). a = local.rbt_lookup c \\<and> local.is_rbt c})\n       \\<subseteq> Collect (finite \\<circ> dom)", "by auto"], ["proof (state)\nthis:\n  (cmp_rbt cmp, cmp_map cmp')\n  \\<in> (Rv \\<rightarrow> Rv \\<rightarrow> comp_res_rel) \\<rightarrow>\n        \\<langle>Rk, Rv\\<rangle>rbt_map_rel (comp2lt cmp') \\<rightarrow>\n        \\<langle>Rk, Rv\\<rangle>rbt_map_rel (comp2lt cmp') \\<rightarrow>\n        comp_res_rel\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma color_rel_sv[relator_props]: \"single_valued color_rel\""], ["proof (prove)\ngoal (1 subgoal):\n 1. single_valued color_rel", "by (auto intro!: single_valuedI elim: color_rel.cases)"], ["", "lemma rbt_rel_sv_aux:\n  assumes SK: \"single_valued Rk\" \n  assumes SV: \"single_valued Rv\"\n  assumes I1: \"(a,b)\\<in>(\\<langle>Rk, Rv\\<rangle>rbt_rel)\"\n  assumes I2: \"(a,c)\\<in>(\\<langle>Rk, Rv\\<rangle>rbt_rel)\"\n  shows \"b=c\""], ["proof (prove)\ngoal (1 subgoal):\n 1. b = c", "using I1 I2"], ["proof (prove)\nusing this:\n  (a, b) \\<in> \\<langle>Rk, Rv\\<rangle>rbt_rel\n  (a, c) \\<in> \\<langle>Rk, Rv\\<rangle>rbt_rel\n\ngoal (1 subgoal):\n 1. b = c", "apply (induct arbitrary: c)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>c.\n       (rbt.Empty, c) \\<in> \\<langle>Rk,\n       Rv\\<rangle>rbt_rel \\<Longrightarrow>\n       rbt.Empty = c\n 2. \\<And>c c' l l' a a' b b' r r' ca.\n       \\<lbrakk>(c, c') \\<in> color_rel;\n        (l, l') \\<in> \\<langle>Rk, Rv\\<rangle>rbt_rel;\n        \\<And>c.\n           (l, c) \\<in> \\<langle>Rk, Rv\\<rangle>rbt_rel \\<Longrightarrow>\n           l' = c;\n        (a, a') \\<in> Rk; (b, b') \\<in> Rv;\n        (r, r') \\<in> \\<langle>Rk, Rv\\<rangle>rbt_rel;\n        \\<And>c.\n           (r, c) \\<in> \\<langle>Rk, Rv\\<rangle>rbt_rel \\<Longrightarrow>\n           r' = c;\n        (Branch c l a b r, ca) \\<in> \\<langle>Rk,\n        Rv\\<rangle>rbt_rel\\<rbrakk>\n       \\<Longrightarrow> Branch c' l' a' b' r' = ca", "apply (elim rbt_rel_elims)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>c. c = rbt.Empty \\<Longrightarrow> rbt.Empty = c\n 2. \\<And>c c' l l' a a' b b' r r' ca.\n       \\<lbrakk>(c, c') \\<in> color_rel;\n        (l, l') \\<in> \\<langle>Rk, Rv\\<rangle>rbt_rel;\n        \\<And>c.\n           (l, c) \\<in> \\<langle>Rk, Rv\\<rangle>rbt_rel \\<Longrightarrow>\n           l' = c;\n        (a, a') \\<in> Rk; (b, b') \\<in> Rv;\n        (r, r') \\<in> \\<langle>Rk, Rv\\<rangle>rbt_rel;\n        \\<And>c.\n           (r, c) \\<in> \\<langle>Rk, Rv\\<rangle>rbt_rel \\<Longrightarrow>\n           r' = c;\n        (Branch c l a b r, ca) \\<in> \\<langle>Rk,\n        Rv\\<rangle>rbt_rel\\<rbrakk>\n       \\<Longrightarrow> Branch c' l' a' b' r' = ca", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>c c' l l' a a' b b' r r' ca.\n       \\<lbrakk>(c, c') \\<in> color_rel;\n        (l, l') \\<in> \\<langle>Rk, Rv\\<rangle>rbt_rel;\n        \\<And>c.\n           (l, c) \\<in> \\<langle>Rk, Rv\\<rangle>rbt_rel \\<Longrightarrow>\n           l' = c;\n        (a, a') \\<in> Rk; (b, b') \\<in> Rv;\n        (r, r') \\<in> \\<langle>Rk, Rv\\<rangle>rbt_rel;\n        \\<And>c.\n           (r, c) \\<in> \\<langle>Rk, Rv\\<rangle>rbt_rel \\<Longrightarrow>\n           r' = c;\n        (Branch c l a b r, ca) \\<in> \\<langle>Rk,\n        Rv\\<rangle>rbt_rel\\<rbrakk>\n       \\<Longrightarrow> Branch c' l' a' b' r' = ca", "apply (elim rbt_rel_elims)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>c c' l l' a a' b b' r r' ca c'a l'a a'a b'a r'a.\n       \\<lbrakk>(c, c') \\<in> color_rel;\n        (l, l') \\<in> \\<langle>Rk, Rv\\<rangle>rbt_rel;\n        \\<And>c.\n           (l, c) \\<in> \\<langle>Rk, Rv\\<rangle>rbt_rel \\<Longrightarrow>\n           l' = c;\n        (a, a') \\<in> Rk; (b, b') \\<in> Rv;\n        (r, r') \\<in> \\<langle>Rk, Rv\\<rangle>rbt_rel;\n        \\<And>c.\n           (r, c) \\<in> \\<langle>Rk, Rv\\<rangle>rbt_rel \\<Longrightarrow>\n           r' = c;\n        ca = Branch c'a l'a a'a b'a r'a; (c, c'a) \\<in> color_rel;\n        (l, l'a) \\<in> \\<langle>Rk, Rv\\<rangle>rbt_rel; (a, a'a) \\<in> Rk;\n        (b, b'a) \\<in> Rv;\n        (r, r'a) \\<in> \\<langle>Rk, Rv\\<rangle>rbt_rel\\<rbrakk>\n       \\<Longrightarrow> Branch c' l' a' b' r' = ca", "apply (simp add: single_valuedD[OF color_rel_sv] \n    single_valuedD[OF SK] single_valuedD[OF SV])"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma rbt_rel_sv[relator_props]:\n  assumes SK: \"single_valued Rk\" \n  assumes SV: \"single_valued Rv\"\n  shows \"single_valued (\\<langle>Rk, Rv\\<rangle>rbt_rel)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. single_valued (\\<langle>Rk, Rv\\<rangle>rbt_rel)", "by (auto intro: single_valuedI rbt_rel_sv_aux[OF SK SV])"], ["", "lemma rbt_map_rel_sv[relator_props]:\n  \"\\<lbrakk>single_valued Rk; single_valued Rv\\<rbrakk> \n  \\<Longrightarrow> single_valued (\\<langle>Rk,Rv\\<rangle>rbt_map_rel lt)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>single_valued Rk; single_valued Rv\\<rbrakk>\n    \\<Longrightarrow> single_valued (\\<langle>Rk, Rv\\<rangle>rbt_map_rel lt)", "apply (auto simp: rbt_map_rel_def rbt_map_rel'_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>single_valued Rk; single_valued Rv\\<rbrakk>\n    \\<Longrightarrow> single_valued\n                       (\\<langle>Rk, Rv\\<rangle>rbt_rel O\n                        br (ord.rbt_lookup lt) (ord.is_rbt lt))", "apply (rule single_valued_relcomp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>single_valued Rk; single_valued Rv\\<rbrakk>\n    \\<Longrightarrow> single_valued (\\<langle>Rk, Rv\\<rangle>rbt_rel)\n 2. \\<lbrakk>single_valued Rk; single_valued Rv\\<rbrakk>\n    \\<Longrightarrow> single_valued (br (ord.rbt_lookup lt) (ord.is_rbt lt))", "apply (rule rbt_rel_sv, assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>single_valued Rk; single_valued Rv\\<rbrakk>\n    \\<Longrightarrow> single_valued (br (ord.rbt_lookup lt) (ord.is_rbt lt))", "apply (rule br_sv)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemmas [autoref_rel_intf] = REL_INTFI[of \"rbt_map_rel x\" i_map] for x"], ["", "subsection \\<open>Second Part: Binding\\<close>"], ["", "lemma autoref_rbt_empty[autoref_rules]:\n  assumes ELO: \"SIDE_GEN_ALGO (eq_linorder cmp')\"\n  assumes [simplified,param]: \"GEN_OP cmp cmp' (Rk\\<rightarrow>Rk\\<rightarrow>Id)\"\n  shows \"(rbt.Empty,op_map_empty) \\<in> \n    \\<langle>Rk,Rv\\<rangle>rbt_map_rel (comp2lt cmp')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (rbt.Empty, op_map_empty) \\<in> \\<langle>Rk,\n    Rv\\<rangle>rbt_map_rel (comp2lt cmp')", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (rbt.Empty, op_map_empty) \\<in> \\<langle>Rk,\n    Rv\\<rangle>rbt_map_rel (comp2lt cmp')", "interpret linorder \"comp2le cmp'\" \"comp2lt cmp'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. class.linorder (comp2le cmp') (comp2lt cmp')", "using ELO"], ["proof (prove)\nusing this:\n  SIDE_GEN_ALGO (eq_linorder cmp')\n\ngoal (1 subgoal):\n 1. class.linorder (comp2le cmp') (comp2lt cmp')", "by (simp add: eq_linorder_class_conv)"], ["proof (state)\ngoal (1 subgoal):\n 1. (rbt.Empty, op_map_empty) \\<in> \\<langle>Rk,\n    Rv\\<rangle>rbt_map_rel (comp2lt cmp')", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. (rbt.Empty, op_map_empty) \\<in> \\<langle>Rk,\n    Rv\\<rangle>rbt_map_rel (comp2lt cmp')", "by (simp) (rule autoref_gen_rbt_empty)"], ["proof (state)\nthis:\n  (rbt.Empty, op_map_empty) \\<in> \\<langle>Rk,\n  Rv\\<rangle>rbt_map_rel (comp2lt cmp')\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma autoref_rbt_update[autoref_rules]:\n  assumes ELO: \"SIDE_GEN_ALGO (eq_linorder cmp')\"\n  assumes [simplified,param]: \"GEN_OP cmp cmp' (Rk\\<rightarrow>Rk\\<rightarrow>Id)\"\n  shows \"(ord.rbt_insert (comp2lt cmp),op_map_update) \\<in> \n    Rk\\<rightarrow>Rv\\<rightarrow>\\<langle>Rk,Rv\\<rangle>rbt_map_rel (comp2lt cmp') \n    \\<rightarrow> \\<langle>Rk,Rv\\<rangle>rbt_map_rel (comp2lt cmp')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (ord.rbt_insert (comp2lt cmp), op_map_update)\n    \\<in> Rk \\<rightarrow>\n          Rv \\<rightarrow>\n          \\<langle>Rk, Rv\\<rangle>rbt_map_rel (comp2lt cmp') \\<rightarrow>\n          \\<langle>Rk, Rv\\<rangle>rbt_map_rel (comp2lt cmp')", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (ord.rbt_insert (comp2lt cmp), op_map_update)\n    \\<in> Rk \\<rightarrow>\n          Rv \\<rightarrow>\n          \\<langle>Rk, Rv\\<rangle>rbt_map_rel (comp2lt cmp') \\<rightarrow>\n          \\<langle>Rk, Rv\\<rangle>rbt_map_rel (comp2lt cmp')", "interpret linorder \"comp2le cmp'\" \"comp2lt cmp'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. class.linorder (comp2le cmp') (comp2lt cmp')", "using ELO"], ["proof (prove)\nusing this:\n  SIDE_GEN_ALGO (eq_linorder cmp')\n\ngoal (1 subgoal):\n 1. class.linorder (comp2le cmp') (comp2lt cmp')", "by (simp add: eq_linorder_class_conv)"], ["proof (state)\ngoal (1 subgoal):\n 1. (ord.rbt_insert (comp2lt cmp), op_map_update)\n    \\<in> Rk \\<rightarrow>\n          Rv \\<rightarrow>\n          \\<langle>Rk, Rv\\<rangle>rbt_map_rel (comp2lt cmp') \\<rightarrow>\n          \\<langle>Rk, Rv\\<rangle>rbt_map_rel (comp2lt cmp')", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. (ord.rbt_insert (comp2lt cmp), op_map_update)\n    \\<in> Rk \\<rightarrow>\n          Rv \\<rightarrow>\n          \\<langle>Rk, Rv\\<rangle>rbt_map_rel (comp2lt cmp') \\<rightarrow>\n          \\<langle>Rk, Rv\\<rangle>rbt_map_rel (comp2lt cmp')", "unfolding op_map_update_def[abs_def]"], ["proof (prove)\ngoal (1 subgoal):\n 1. (ord.rbt_insert (comp2lt cmp), \\<lambda>k v m. m(k \\<mapsto> v))\n    \\<in> Rk \\<rightarrow>\n          Rv \\<rightarrow>\n          \\<langle>Rk, Rv\\<rangle>rbt_map_rel (comp2lt cmp') \\<rightarrow>\n          \\<langle>Rk, Rv\\<rangle>rbt_map_rel (comp2lt cmp')", "apply (rule autoref_gen_rbt_insert)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (comp2lt cmp, comp2lt cmp')\n    \\<in> Rk \\<rightarrow> Rk \\<rightarrow> bool_rel", "unfolding comp2lt_def[abs_def]"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>a b.\n        case cmp a b of LESS \\<Rightarrow> True | _ \\<Rightarrow> False,\n     \\<lambda>a b.\n        case cmp' a b of LESS \\<Rightarrow> True | _ \\<Rightarrow> False)\n    \\<in> Rk \\<rightarrow> Rk \\<rightarrow> bool_rel", "by (parametricity)"], ["proof (state)\nthis:\n  (ord.rbt_insert (comp2lt cmp), op_map_update)\n  \\<in> Rk \\<rightarrow>\n        Rv \\<rightarrow>\n        \\<langle>Rk, Rv\\<rangle>rbt_map_rel (comp2lt cmp') \\<rightarrow>\n        \\<langle>Rk, Rv\\<rangle>rbt_map_rel (comp2lt cmp')\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma autoref_rbt_lookup[autoref_rules]:\n  assumes ELO: \"SIDE_GEN_ALGO (eq_linorder cmp')\"\n  assumes [simplified,param]: \"GEN_OP cmp cmp' (Rk\\<rightarrow>Rk\\<rightarrow>Id)\"\n  shows \"(\\<lambda>k t. ord.rbt_lookup (comp2lt cmp) t k, op_map_lookup) \\<in> \n    Rk \\<rightarrow> \\<langle>Rk,Rv\\<rangle>rbt_map_rel (comp2lt cmp') \\<rightarrow> \\<langle>Rv\\<rangle>option_rel\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>k t. ord.rbt_lookup (comp2lt cmp) t k, op_map_lookup)\n    \\<in> Rk \\<rightarrow>\n          \\<langle>Rk, Rv\\<rangle>rbt_map_rel (comp2lt cmp') \\<rightarrow>\n          \\<langle>Rv\\<rangle>option_rel", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<lambda>k t. ord.rbt_lookup (comp2lt cmp) t k, op_map_lookup)\n    \\<in> Rk \\<rightarrow>\n          \\<langle>Rk, Rv\\<rangle>rbt_map_rel (comp2lt cmp') \\<rightarrow>\n          \\<langle>Rv\\<rangle>option_rel", "interpret linorder \"comp2le cmp'\" \"comp2lt cmp'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. class.linorder (comp2le cmp') (comp2lt cmp')", "using ELO"], ["proof (prove)\nusing this:\n  SIDE_GEN_ALGO (eq_linorder cmp')\n\ngoal (1 subgoal):\n 1. class.linorder (comp2le cmp') (comp2lt cmp')", "by (simp add: eq_linorder_class_conv)"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<lambda>k t. ord.rbt_lookup (comp2lt cmp) t k, op_map_lookup)\n    \\<in> Rk \\<rightarrow>\n          \\<langle>Rk, Rv\\<rangle>rbt_map_rel (comp2lt cmp') \\<rightarrow>\n          \\<langle>Rv\\<rangle>option_rel", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>k t. ord.rbt_lookup (comp2lt cmp) t k, op_map_lookup)\n    \\<in> Rk \\<rightarrow>\n          \\<langle>Rk, Rv\\<rangle>rbt_map_rel (comp2lt cmp') \\<rightarrow>\n          \\<langle>Rv\\<rangle>option_rel", "unfolding op_map_lookup_def[abs_def]"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>k t. ord.rbt_lookup (comp2lt cmp) t k, \\<lambda>k m. m k)\n    \\<in> Rk \\<rightarrow>\n          \\<langle>Rk, Rv\\<rangle>rbt_map_rel (comp2lt cmp') \\<rightarrow>\n          \\<langle>Rv\\<rangle>option_rel", "apply (intro fun_relI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a a' aa a'a.\n       \\<lbrakk>(a, a') \\<in> Rk;\n        (aa, a'a) \\<in> \\<langle>Rk,\n        Rv\\<rangle>rbt_map_rel (comp2lt cmp')\\<rbrakk>\n       \\<Longrightarrow> (ord.rbt_lookup (comp2lt cmp) aa a, a'a a')\n                         \\<in> \\<langle>Rv\\<rangle>option_rel", "apply (rule autoref_gen_rbt_lookup[param_fo])"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>a a' aa a'a.\n       \\<lbrakk>(a, a') \\<in> Rk;\n        (aa, a'a) \\<in> \\<langle>Rk,\n        Rv\\<rangle>rbt_map_rel (comp2lt cmp')\\<rbrakk>\n       \\<Longrightarrow> (comp2lt cmp, comp2lt cmp')\n                         \\<in> ?A2 a a' aa a'a \\<rightarrow>\n                               ?A2 a a' aa a'a \\<rightarrow> bool_rel\n 2. \\<And>a a' aa a'a.\n       \\<lbrakk>(a, a') \\<in> Rk;\n        (aa, a'a) \\<in> \\<langle>Rk,\n        Rv\\<rangle>rbt_map_rel (comp2lt cmp')\\<rbrakk>\n       \\<Longrightarrow> (aa, a'a) \\<in> \\<langle>?A2 a a' aa a'a,\n                         Rv\\<rangle>rbt_map_rel (comp2lt cmp')\n 3. \\<And>a a' aa a'a.\n       \\<lbrakk>(a, a') \\<in> Rk;\n        (aa, a'a) \\<in> \\<langle>Rk,\n        Rv\\<rangle>rbt_map_rel (comp2lt cmp')\\<rbrakk>\n       \\<Longrightarrow> (a, a') \\<in> ?A2 a a' aa a'a", "apply (unfold comp2lt_def[abs_def]) []"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>a a' aa a'a.\n       \\<lbrakk>(a, a') \\<in> Rk;\n        (aa, a'a) \\<in> \\<langle>Rk,\n        Rv\\<rangle>rbt_map_rel\n                    (\\<lambda>a b.\n                        case cmp' a b of LESS \\<Rightarrow> True\n                        | _ \\<Rightarrow> False)\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>a aa.\n                             case cmp a aa of LESS \\<Rightarrow> True\n                             | _ \\<Rightarrow> False,\n                          \\<lambda>a b.\n                             case cmp' a b of LESS \\<Rightarrow> True\n                             | _ \\<Rightarrow> False)\n                         \\<in> ?A2 a a' aa a'a \\<rightarrow>\n                               ?A2 a a' aa a'a \\<rightarrow> bool_rel\n 2. \\<And>a a' aa a'a.\n       \\<lbrakk>(a, a') \\<in> Rk;\n        (aa, a'a) \\<in> \\<langle>Rk,\n        Rv\\<rangle>rbt_map_rel (comp2lt cmp')\\<rbrakk>\n       \\<Longrightarrow> (aa, a'a) \\<in> \\<langle>?A2 a a' aa a'a,\n                         Rv\\<rangle>rbt_map_rel (comp2lt cmp')\n 3. \\<And>a a' aa a'a.\n       \\<lbrakk>(a, a') \\<in> Rk;\n        (aa, a'a) \\<in> \\<langle>Rk,\n        Rv\\<rangle>rbt_map_rel (comp2lt cmp')\\<rbrakk>\n       \\<Longrightarrow> (a, a') \\<in> ?A2 a a' aa a'a", "apply (parametricity)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a a' aa a'a.\n       \\<lbrakk>(a, a') \\<in> Rk;\n        (aa, a'a) \\<in> \\<langle>Rk,\n        Rv\\<rangle>rbt_map_rel (comp2lt cmp')\\<rbrakk>\n       \\<Longrightarrow> (aa, a'a) \\<in> \\<langle>Rk,\n                         Rv\\<rangle>rbt_map_rel (comp2lt cmp')\n 2. \\<And>a a' aa a'a.\n       \\<lbrakk>(a, a') \\<in> Rk;\n        (aa, a'a) \\<in> \\<langle>Rk,\n        Rv\\<rangle>rbt_map_rel (comp2lt cmp')\\<rbrakk>\n       \\<Longrightarrow> (a, a') \\<in> Rk", "apply assumption+"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  (\\<lambda>k t. ord.rbt_lookup (comp2lt cmp) t k, op_map_lookup)\n  \\<in> Rk \\<rightarrow>\n        \\<langle>Rk, Rv\\<rangle>rbt_map_rel (comp2lt cmp') \\<rightarrow>\n        \\<langle>Rv\\<rangle>option_rel\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma autoref_rbt_delete[autoref_rules]:\n  assumes ELO: \"SIDE_GEN_ALGO (eq_linorder cmp')\"\n  assumes [simplified,param]: \"GEN_OP cmp cmp' (Rk\\<rightarrow>Rk\\<rightarrow>Id)\"\n  shows \"(ord.rbt_delete (comp2lt cmp),op_map_delete) \\<in>\n    Rk \\<rightarrow> \\<langle>Rk,Rv\\<rangle>rbt_map_rel (comp2lt cmp') \n       \\<rightarrow> \\<langle>Rk,Rv\\<rangle>rbt_map_rel (comp2lt cmp')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (ord.rbt_delete (comp2lt cmp), op_map_delete)\n    \\<in> Rk \\<rightarrow>\n          \\<langle>Rk, Rv\\<rangle>rbt_map_rel (comp2lt cmp') \\<rightarrow>\n          \\<langle>Rk, Rv\\<rangle>rbt_map_rel (comp2lt cmp')", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (ord.rbt_delete (comp2lt cmp), op_map_delete)\n    \\<in> Rk \\<rightarrow>\n          \\<langle>Rk, Rv\\<rangle>rbt_map_rel (comp2lt cmp') \\<rightarrow>\n          \\<langle>Rk, Rv\\<rangle>rbt_map_rel (comp2lt cmp')", "interpret linorder \"comp2le cmp'\" \"comp2lt cmp'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. class.linorder (comp2le cmp') (comp2lt cmp')", "using ELO"], ["proof (prove)\nusing this:\n  SIDE_GEN_ALGO (eq_linorder cmp')\n\ngoal (1 subgoal):\n 1. class.linorder (comp2le cmp') (comp2lt cmp')", "by (simp add: eq_linorder_class_conv)"], ["proof (state)\ngoal (1 subgoal):\n 1. (ord.rbt_delete (comp2lt cmp), op_map_delete)\n    \\<in> Rk \\<rightarrow>\n          \\<langle>Rk, Rv\\<rangle>rbt_map_rel (comp2lt cmp') \\<rightarrow>\n          \\<langle>Rk, Rv\\<rangle>rbt_map_rel (comp2lt cmp')", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. (ord.rbt_delete (comp2lt cmp), op_map_delete)\n    \\<in> Rk \\<rightarrow>\n          \\<langle>Rk, Rv\\<rangle>rbt_map_rel (comp2lt cmp') \\<rightarrow>\n          \\<langle>Rk, Rv\\<rangle>rbt_map_rel (comp2lt cmp')", "unfolding op_map_delete_def[abs_def]"], ["proof (prove)\ngoal (1 subgoal):\n 1. (ord.rbt_delete (comp2lt cmp), \\<lambda>k m. m |` (- {k}))\n    \\<in> Rk \\<rightarrow>\n          \\<langle>Rk, Rv\\<rangle>rbt_map_rel (comp2lt cmp') \\<rightarrow>\n          \\<langle>Rk, Rv\\<rangle>rbt_map_rel (comp2lt cmp')", "apply (intro fun_relI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a a' aa a'a.\n       \\<lbrakk>(a, a') \\<in> Rk;\n        (aa, a'a) \\<in> \\<langle>Rk,\n        Rv\\<rangle>rbt_map_rel (comp2lt cmp')\\<rbrakk>\n       \\<Longrightarrow> (ord.rbt_delete (comp2lt cmp) a aa,\n                          a'a |` (- {a'}))\n                         \\<in> \\<langle>Rk,\n                         Rv\\<rangle>rbt_map_rel (comp2lt cmp')", "apply (rule autoref_gen_rbt_delete[param_fo])"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>a a' aa a'a.\n       \\<lbrakk>(a, a') \\<in> Rk;\n        (aa, a'a) \\<in> \\<langle>Rk,\n        Rv\\<rangle>rbt_map_rel (comp2lt cmp')\\<rbrakk>\n       \\<Longrightarrow> (comp2lt cmp, comp2lt cmp')\n                         \\<in> Rk \\<rightarrow> Rk \\<rightarrow> bool_rel\n 2. \\<And>a a' aa a'a.\n       \\<lbrakk>(a, a') \\<in> Rk;\n        (aa, a'a) \\<in> \\<langle>Rk,\n        Rv\\<rangle>rbt_map_rel (comp2lt cmp')\\<rbrakk>\n       \\<Longrightarrow> (a, a') \\<in> Rk\n 3. \\<And>a a' aa a'a.\n       \\<lbrakk>(a, a') \\<in> Rk;\n        (aa, a'a) \\<in> \\<langle>Rk,\n        Rv\\<rangle>rbt_map_rel (comp2lt cmp')\\<rbrakk>\n       \\<Longrightarrow> (aa, a'a) \\<in> \\<langle>Rk,\n                         Rv\\<rangle>rbt_map_rel (comp2lt cmp')", "apply (unfold comp2lt_def[abs_def]) []"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>a a' aa a'a.\n       \\<lbrakk>(a, a') \\<in> Rk;\n        (aa, a'a) \\<in> \\<langle>Rk,\n        Rv\\<rangle>rbt_map_rel\n                    (\\<lambda>a b.\n                        case cmp' a b of LESS \\<Rightarrow> True\n                        | _ \\<Rightarrow> False)\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>a b.\n                             case cmp a b of LESS \\<Rightarrow> True\n                             | _ \\<Rightarrow> False,\n                          \\<lambda>a b.\n                             case cmp' a b of LESS \\<Rightarrow> True\n                             | _ \\<Rightarrow> False)\n                         \\<in> Rk \\<rightarrow> Rk \\<rightarrow> bool_rel\n 2. \\<And>a a' aa a'a.\n       \\<lbrakk>(a, a') \\<in> Rk;\n        (aa, a'a) \\<in> \\<langle>Rk,\n        Rv\\<rangle>rbt_map_rel (comp2lt cmp')\\<rbrakk>\n       \\<Longrightarrow> (a, a') \\<in> Rk\n 3. \\<And>a a' aa a'a.\n       \\<lbrakk>(a, a') \\<in> Rk;\n        (aa, a'a) \\<in> \\<langle>Rk,\n        Rv\\<rangle>rbt_map_rel (comp2lt cmp')\\<rbrakk>\n       \\<Longrightarrow> (aa, a'a) \\<in> \\<langle>Rk,\n                         Rv\\<rangle>rbt_map_rel (comp2lt cmp')", "apply (parametricity)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a a' aa a'a.\n       \\<lbrakk>(a, a') \\<in> Rk;\n        (aa, a'a) \\<in> \\<langle>Rk,\n        Rv\\<rangle>rbt_map_rel (comp2lt cmp')\\<rbrakk>\n       \\<Longrightarrow> (a, a') \\<in> Rk\n 2. \\<And>a a' aa a'a.\n       \\<lbrakk>(a, a') \\<in> Rk;\n        (aa, a'a) \\<in> \\<langle>Rk,\n        Rv\\<rangle>rbt_map_rel (comp2lt cmp')\\<rbrakk>\n       \\<Longrightarrow> (aa, a'a) \\<in> \\<langle>Rk,\n                         Rv\\<rangle>rbt_map_rel (comp2lt cmp')", "apply assumption+"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  (ord.rbt_delete (comp2lt cmp), op_map_delete)\n  \\<in> Rk \\<rightarrow>\n        \\<langle>Rk, Rv\\<rangle>rbt_map_rel (comp2lt cmp') \\<rightarrow>\n        \\<langle>Rk, Rv\\<rangle>rbt_map_rel (comp2lt cmp')\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma autoref_rbt_union[autoref_rules]:\n  assumes ELO: \"SIDE_GEN_ALGO (eq_linorder cmp')\"\n  assumes [simplified,param]: \"GEN_OP cmp cmp' (Rk\\<rightarrow>Rk\\<rightarrow>Id)\"\n  shows \"(ord.rbt_union (comp2lt cmp),(++)) \\<in>\n    \\<langle>Rk,Rv\\<rangle>rbt_map_rel (comp2lt cmp') \\<rightarrow> \\<langle>Rk,Rv\\<rangle>rbt_map_rel (comp2lt cmp')\n       \\<rightarrow> \\<langle>Rk,Rv\\<rangle>rbt_map_rel (comp2lt cmp')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (ord.rbt_union (comp2lt cmp), (++))\n    \\<in> \\<langle>Rk, Rv\\<rangle>rbt_map_rel (comp2lt cmp') \\<rightarrow>\n          \\<langle>Rk, Rv\\<rangle>rbt_map_rel (comp2lt cmp') \\<rightarrow>\n          \\<langle>Rk, Rv\\<rangle>rbt_map_rel (comp2lt cmp')", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (ord.rbt_union (comp2lt cmp), (++))\n    \\<in> \\<langle>Rk, Rv\\<rangle>rbt_map_rel (comp2lt cmp') \\<rightarrow>\n          \\<langle>Rk, Rv\\<rangle>rbt_map_rel (comp2lt cmp') \\<rightarrow>\n          \\<langle>Rk, Rv\\<rangle>rbt_map_rel (comp2lt cmp')", "interpret linorder \"comp2le cmp'\" \"comp2lt cmp'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. class.linorder (comp2le cmp') (comp2lt cmp')", "using ELO"], ["proof (prove)\nusing this:\n  SIDE_GEN_ALGO (eq_linorder cmp')\n\ngoal (1 subgoal):\n 1. class.linorder (comp2le cmp') (comp2lt cmp')", "by (simp add: eq_linorder_class_conv)"], ["proof (state)\ngoal (1 subgoal):\n 1. (ord.rbt_union (comp2lt cmp), (++))\n    \\<in> \\<langle>Rk, Rv\\<rangle>rbt_map_rel (comp2lt cmp') \\<rightarrow>\n          \\<langle>Rk, Rv\\<rangle>rbt_map_rel (comp2lt cmp') \\<rightarrow>\n          \\<langle>Rk, Rv\\<rangle>rbt_map_rel (comp2lt cmp')", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. (ord.rbt_union (comp2lt cmp), (++))\n    \\<in> \\<langle>Rk, Rv\\<rangle>rbt_map_rel (comp2lt cmp') \\<rightarrow>\n          \\<langle>Rk, Rv\\<rangle>rbt_map_rel (comp2lt cmp') \\<rightarrow>\n          \\<langle>Rk, Rv\\<rangle>rbt_map_rel (comp2lt cmp')", "apply (intro fun_relI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a a' aa a'a.\n       \\<lbrakk>(a, a') \\<in> \\<langle>Rk,\n                Rv\\<rangle>rbt_map_rel (comp2lt cmp');\n        (aa, a'a) \\<in> \\<langle>Rk,\n        Rv\\<rangle>rbt_map_rel (comp2lt cmp')\\<rbrakk>\n       \\<Longrightarrow> (ord.rbt_union (comp2lt cmp) a aa, a' ++ a'a)\n                         \\<in> \\<langle>Rk,\n                         Rv\\<rangle>rbt_map_rel (comp2lt cmp')", "apply (rule autoref_gen_rbt_union[param_fo])"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>a a' aa a'a.\n       \\<lbrakk>(a, a') \\<in> \\<langle>Rk,\n                Rv\\<rangle>rbt_map_rel (comp2lt cmp');\n        (aa, a'a) \\<in> \\<langle>Rk,\n        Rv\\<rangle>rbt_map_rel (comp2lt cmp')\\<rbrakk>\n       \\<Longrightarrow> (comp2lt cmp, comp2lt cmp')\n                         \\<in> Rk \\<rightarrow> Rk \\<rightarrow> bool_rel\n 2. \\<And>a a' aa a'a.\n       \\<lbrakk>(a, a') \\<in> \\<langle>Rk,\n                Rv\\<rangle>rbt_map_rel (comp2lt cmp');\n        (aa, a'a) \\<in> \\<langle>Rk,\n        Rv\\<rangle>rbt_map_rel (comp2lt cmp')\\<rbrakk>\n       \\<Longrightarrow> (a, a') \\<in> \\<langle>Rk,\n                         Rv\\<rangle>rbt_map_rel (comp2lt cmp')\n 3. \\<And>a a' aa a'a.\n       \\<lbrakk>(a, a') \\<in> \\<langle>Rk,\n                Rv\\<rangle>rbt_map_rel (comp2lt cmp');\n        (aa, a'a) \\<in> \\<langle>Rk,\n        Rv\\<rangle>rbt_map_rel (comp2lt cmp')\\<rbrakk>\n       \\<Longrightarrow> (aa, a'a) \\<in> \\<langle>Rk,\n                         Rv\\<rangle>rbt_map_rel (comp2lt cmp')", "apply (unfold comp2lt_def[abs_def]) []"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>a a' aa a'a.\n       \\<lbrakk>(a, a') \\<in> \\<langle>Rk,\n                Rv\\<rangle>rbt_map_rel\n                            (\\<lambda>a b.\n                                case cmp' a b of LESS \\<Rightarrow> True\n                                | _ \\<Rightarrow> False);\n        (aa, a'a) \\<in> \\<langle>Rk,\n        Rv\\<rangle>rbt_map_rel\n                    (\\<lambda>a b.\n                        case cmp' a b of LESS \\<Rightarrow> True\n                        | _ \\<Rightarrow> False)\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>a b.\n                             case cmp a b of LESS \\<Rightarrow> True\n                             | _ \\<Rightarrow> False,\n                          \\<lambda>a b.\n                             case cmp' a b of LESS \\<Rightarrow> True\n                             | _ \\<Rightarrow> False)\n                         \\<in> Rk \\<rightarrow> Rk \\<rightarrow> bool_rel\n 2. \\<And>a a' aa a'a.\n       \\<lbrakk>(a, a') \\<in> \\<langle>Rk,\n                Rv\\<rangle>rbt_map_rel (comp2lt cmp');\n        (aa, a'a) \\<in> \\<langle>Rk,\n        Rv\\<rangle>rbt_map_rel (comp2lt cmp')\\<rbrakk>\n       \\<Longrightarrow> (a, a') \\<in> \\<langle>Rk,\n                         Rv\\<rangle>rbt_map_rel (comp2lt cmp')\n 3. \\<And>a a' aa a'a.\n       \\<lbrakk>(a, a') \\<in> \\<langle>Rk,\n                Rv\\<rangle>rbt_map_rel (comp2lt cmp');\n        (aa, a'a) \\<in> \\<langle>Rk,\n        Rv\\<rangle>rbt_map_rel (comp2lt cmp')\\<rbrakk>\n       \\<Longrightarrow> (aa, a'a) \\<in> \\<langle>Rk,\n                         Rv\\<rangle>rbt_map_rel (comp2lt cmp')", "apply (parametricity)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a a' aa a'a.\n       \\<lbrakk>(a, a') \\<in> \\<langle>Rk,\n                Rv\\<rangle>rbt_map_rel (comp2lt cmp');\n        (aa, a'a) \\<in> \\<langle>Rk,\n        Rv\\<rangle>rbt_map_rel (comp2lt cmp')\\<rbrakk>\n       \\<Longrightarrow> (a, a') \\<in> \\<langle>Rk,\n                         Rv\\<rangle>rbt_map_rel (comp2lt cmp')\n 2. \\<And>a a' aa a'a.\n       \\<lbrakk>(a, a') \\<in> \\<langle>Rk,\n                Rv\\<rangle>rbt_map_rel (comp2lt cmp');\n        (aa, a'a) \\<in> \\<langle>Rk,\n        Rv\\<rangle>rbt_map_rel (comp2lt cmp')\\<rbrakk>\n       \\<Longrightarrow> (aa, a'a) \\<in> \\<langle>Rk,\n                         Rv\\<rangle>rbt_map_rel (comp2lt cmp')", "apply assumption+"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  (ord.rbt_union (comp2lt cmp), (++))\n  \\<in> \\<langle>Rk, Rv\\<rangle>rbt_map_rel (comp2lt cmp') \\<rightarrow>\n        \\<langle>Rk, Rv\\<rangle>rbt_map_rel (comp2lt cmp') \\<rightarrow>\n        \\<langle>Rk, Rv\\<rangle>rbt_map_rel (comp2lt cmp')\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma autoref_rbt_is_iterator[autoref_ga_rules]: \n  assumes ELO: \"GEN_ALGO_tag (eq_linorder cmp')\"\n  shows \"is_map_to_sorted_list (comp2le cmp') Rk Rv (rbt_map_rel (comp2lt cmp'))\n    rbt_to_list\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_map_to_sorted_list (comp2le cmp') Rk Rv (rbt_map_rel (comp2lt cmp'))\n     rbt_to_list", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. is_map_to_sorted_list (comp2le cmp') Rk Rv (rbt_map_rel (comp2lt cmp'))\n     rbt_to_list", "interpret linorder \"comp2le cmp'\" \"comp2lt cmp'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. class.linorder (comp2le cmp') (comp2lt cmp')", "using ELO"], ["proof (prove)\nusing this:\n  GEN_ALGO_tag (eq_linorder cmp')\n\ngoal (1 subgoal):\n 1. class.linorder (comp2le cmp') (comp2lt cmp')", "by (simp add: eq_linorder_class_conv)"], ["proof (state)\ngoal (1 subgoal):\n 1. is_map_to_sorted_list (comp2le cmp') Rk Rv (rbt_map_rel (comp2lt cmp'))\n     rbt_to_list", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. is_map_to_sorted_list (comp2le cmp') Rk Rv (rbt_map_rel (comp2lt cmp'))\n     rbt_to_list", "unfolding is_map_to_sorted_list_def\n      it_to_sorted_list_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>m m'.\n       (m, m') \\<in> \\<langle>Rk,\n       Rv\\<rangle>rbt_map_rel (comp2lt cmp') \\<longrightarrow>\n       (\\<exists>l'.\n           (rbt_to_list m, l')\n           \\<in> \\<langle>Rk \\<times>\\<^sub>r Rv\\<rangle>list_rel \\<and>\n           RETURN l'\n           \\<le> SPEC\n                  (\\<lambda>l.\n                      distinct l \\<and>\n                      map_to_set m' = set l \\<and>\n                      sorted_wrt (key_rel (comp2le cmp')) l))", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>m m'.\n       (m, m') \\<in> \\<langle>Rk,\n       Rv\\<rangle>rbt_map_rel (comp2lt cmp') \\<Longrightarrow>\n       \\<exists>l'.\n          (rbt_to_list m, l')\n          \\<in> \\<langle>Rk \\<times>\\<^sub>r Rv\\<rangle>list_rel \\<and>\n          distinct l' \\<and>\n          map_to_set m' = set l' \\<and>\n          sorted_wrt (key_rel (comp2le cmp')) l'", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>m m'.\n       (m, m') \\<in> \\<langle>Rk,\n       Rv\\<rangle>rbt_map_rel (comp2lt cmp') \\<Longrightarrow>\n       \\<exists>l'.\n          (rbt_to_list m, l')\n          \\<in> \\<langle>Rk \\<times>\\<^sub>r Rv\\<rangle>list_rel \\<and>\n          distinct l' \\<and>\n          map_to_set m' = set l' \\<and>\n          sorted_wrt (key_rel (comp2le cmp')) l'", "fix r m'"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>m m'.\n       (m, m') \\<in> \\<langle>Rk,\n       Rv\\<rangle>rbt_map_rel (comp2lt cmp') \\<Longrightarrow>\n       \\<exists>l'.\n          (rbt_to_list m, l')\n          \\<in> \\<langle>Rk \\<times>\\<^sub>r Rv\\<rangle>list_rel \\<and>\n          distinct l' \\<and>\n          map_to_set m' = set l' \\<and>\n          sorted_wrt (key_rel (comp2le cmp')) l'", "assume \"(r, m') \\<in> \\<langle>Rk, Rv\\<rangle>rbt_map_rel (comp2lt cmp')\""], ["proof (state)\nthis:\n  (r, m') \\<in> \\<langle>Rk, Rv\\<rangle>rbt_map_rel (comp2lt cmp')\n\ngoal (1 subgoal):\n 1. \\<And>m m'.\n       (m, m') \\<in> \\<langle>Rk,\n       Rv\\<rangle>rbt_map_rel (comp2lt cmp') \\<Longrightarrow>\n       \\<exists>l'.\n          (rbt_to_list m, l')\n          \\<in> \\<langle>Rk \\<times>\\<^sub>r Rv\\<rangle>list_rel \\<and>\n          distinct l' \\<and>\n          map_to_set m' = set l' \\<and>\n          sorted_wrt (key_rel (comp2le cmp')) l'", "then"], ["proof (chain)\npicking this:\n  (r, m') \\<in> \\<langle>Rk, Rv\\<rangle>rbt_map_rel (comp2lt cmp')", "obtain r' where R1: \"(r,r')\\<in>\\<langle>Rk,Rv\\<rangle>rbt_rel\" \n      and R2: \"(r',m') \\<in> rbt_map_rel' (comp2lt cmp')\""], ["proof (prove)\nusing this:\n  (r, m') \\<in> \\<langle>Rk, Rv\\<rangle>rbt_map_rel (comp2lt cmp')\n\ngoal (1 subgoal):\n 1. (\\<And>r'.\n        \\<lbrakk>(r, r') \\<in> \\<langle>Rk, Rv\\<rangle>rbt_rel;\n         (r', m') \\<in> rbt_map_rel' (comp2lt cmp')\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding rbt_map_rel_def"], ["proof (prove)\nusing this:\n  (r, m')\n  \\<in> \\<langle>Rk, Rv\\<rangle>rbt_rel O rbt_map_rel' (comp2lt cmp')\n\ngoal (1 subgoal):\n 1. (\\<And>r'.\n        \\<lbrakk>(r, r') \\<in> \\<langle>Rk, Rv\\<rangle>rbt_rel;\n         (r', m') \\<in> rbt_map_rel' (comp2lt cmp')\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  (r, r') \\<in> \\<langle>Rk, Rv\\<rangle>rbt_rel\n  (r', m') \\<in> rbt_map_rel' (comp2lt cmp')\n\ngoal (1 subgoal):\n 1. \\<And>m m'.\n       (m, m') \\<in> \\<langle>Rk,\n       Rv\\<rangle>rbt_map_rel (comp2lt cmp') \\<Longrightarrow>\n       \\<exists>l'.\n          (rbt_to_list m, l')\n          \\<in> \\<langle>Rk \\<times>\\<^sub>r Rv\\<rangle>list_rel \\<and>\n          distinct l' \\<and>\n          map_to_set m' = set l' \\<and>\n          sorted_wrt (key_rel (comp2le cmp')) l'", "from R2"], ["proof (chain)\npicking this:\n  (r', m') \\<in> rbt_map_rel' (comp2lt cmp')", "have \"is_rbt r'\" and M': \"m' = rbt_lookup r'\""], ["proof (prove)\nusing this:\n  (r', m') \\<in> rbt_map_rel' (comp2lt cmp')\n\ngoal (1 subgoal):\n 1. local.is_rbt r' &&& m' = local.rbt_lookup r'", "unfolding rbt_map_rel'_def"], ["proof (prove)\nusing this:\n  (r', m') \\<in> br local.rbt_lookup local.is_rbt\n\ngoal (1 subgoal):\n 1. local.is_rbt r' &&& m' = local.rbt_lookup r'", "by (simp_all add: br_def)"], ["proof (state)\nthis:\n  local.is_rbt r'\n  m' = local.rbt_lookup r'\n\ngoal (1 subgoal):\n 1. \\<And>m m'.\n       (m, m') \\<in> \\<langle>Rk,\n       Rv\\<rangle>rbt_map_rel (comp2lt cmp') \\<Longrightarrow>\n       \\<exists>l'.\n          (rbt_to_list m, l')\n          \\<in> \\<langle>Rk \\<times>\\<^sub>r Rv\\<rangle>list_rel \\<and>\n          distinct l' \\<and>\n          map_to_set m' = set l' \\<and>\n          sorted_wrt (key_rel (comp2le cmp')) l'", "hence SORTED: \"rbt_sorted r'\""], ["proof (prove)\nusing this:\n  local.is_rbt r'\n  m' = local.rbt_lookup r'\n\ngoal (1 subgoal):\n 1. local.rbt_sorted r'", "by (simp add: is_rbt_def)"], ["proof (state)\nthis:\n  local.rbt_sorted r'\n\ngoal (1 subgoal):\n 1. \\<And>m m'.\n       (m, m') \\<in> \\<langle>Rk,\n       Rv\\<rangle>rbt_map_rel (comp2lt cmp') \\<Longrightarrow>\n       \\<exists>l'.\n          (rbt_to_list m, l')\n          \\<in> \\<langle>Rk \\<times>\\<^sub>r Rv\\<rangle>list_rel \\<and>\n          distinct l' \\<and>\n          map_to_set m' = set l' \\<and>\n          sorted_wrt (key_rel (comp2le cmp')) l'", "from map_it_to_list_linord_correct[where it = rm_iterateoi, OF \n      rm_iterateoi_correct[OF SORTED]\n    ]"], ["proof (chain)\npicking this:\n  map_of (rbt_to_list r') = local.rbt_lookup r' \\<and>\n  distinct (map fst (rbt_to_list r')) \\<and>\n  local.sorted (map fst (rbt_to_list r'))", "have \n        M: \"map_of (rbt_to_list r') = rbt_lookup r'\"\n        and D: \"distinct (map fst (rbt_to_list r'))\"\n        and S: \"sorted (map fst (rbt_to_list r'))\""], ["proof (prove)\nusing this:\n  map_of (rbt_to_list r') = local.rbt_lookup r' \\<and>\n  distinct (map fst (rbt_to_list r')) \\<and>\n  local.sorted (map fst (rbt_to_list r'))\n\ngoal (1 subgoal):\n 1. map_of (rbt_to_list r') = local.rbt_lookup r' &&&\n    distinct (map fst (rbt_to_list r')) &&&\n    local.sorted (map fst (rbt_to_list r'))", "by (simp_all)"], ["proof (state)\nthis:\n  map_of (rbt_to_list r') = local.rbt_lookup r'\n  distinct (map fst (rbt_to_list r'))\n  local.sorted (map fst (rbt_to_list r'))\n\ngoal (1 subgoal):\n 1. \\<And>m m'.\n       (m, m') \\<in> \\<langle>Rk,\n       Rv\\<rangle>rbt_map_rel (comp2lt cmp') \\<Longrightarrow>\n       \\<exists>l'.\n          (rbt_to_list m, l')\n          \\<in> \\<langle>Rk \\<times>\\<^sub>r Rv\\<rangle>list_rel \\<and>\n          distinct l' \\<and>\n          map_to_set m' = set l' \\<and>\n          sorted_wrt (key_rel (comp2le cmp')) l'", "show \"\\<exists>l'. (rbt_to_list r, l') \\<in> \\<langle>\\<langle>Rk, Rv\\<rangle>prod_rel\\<rangle>list_rel \\<and>\n            distinct l' \\<and>\n            map_to_set m' = set l' \\<and>\n            sorted_wrt (key_rel (comp2le cmp')) l'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>l'.\n       (rbt_to_list r, l')\n       \\<in> \\<langle>Rk \\<times>\\<^sub>r Rv\\<rangle>list_rel \\<and>\n       distinct l' \\<and>\n       map_to_set m' = set l' \\<and> sorted_wrt (key_rel (comp2le cmp')) l'", "proof (intro exI conjI)"], ["proof (state)\ngoal (4 subgoals):\n 1. (rbt_to_list r, ?l')\n    \\<in> \\<langle>Rk \\<times>\\<^sub>r Rv\\<rangle>list_rel\n 2. distinct ?l'\n 3. map_to_set m' = set ?l'\n 4. sorted_wrt (key_rel (comp2le cmp')) ?l'", "from D"], ["proof (chain)\npicking this:\n  distinct (map fst (rbt_to_list r'))", "show \"distinct (rbt_to_list r')\""], ["proof (prove)\nusing this:\n  distinct (map fst (rbt_to_list r'))\n\ngoal (1 subgoal):\n 1. distinct (rbt_to_list r')", "by (rule distinct_mapI)"], ["proof (state)\nthis:\n  distinct (rbt_to_list r')\n\ngoal (3 subgoals):\n 1. (rbt_to_list r, rbt_to_list r')\n    \\<in> \\<langle>Rk \\<times>\\<^sub>r Rv\\<rangle>list_rel\n 2. map_to_set m' = set (rbt_to_list r')\n 3. sorted_wrt (key_rel (comp2le cmp')) (rbt_to_list r')", "from S"], ["proof (chain)\npicking this:\n  local.sorted (map fst (rbt_to_list r'))", "show \"sorted_wrt (key_rel (comp2le cmp')) (rbt_to_list r')\""], ["proof (prove)\nusing this:\n  local.sorted (map fst (rbt_to_list r'))\n\ngoal (1 subgoal):\n 1. sorted_wrt (key_rel (comp2le cmp')) (rbt_to_list r')", "unfolding key_rel_def[abs_def]"], ["proof (prove)\nusing this:\n  local.sorted (map fst (rbt_to_list r'))\n\ngoal (1 subgoal):\n 1. sorted_wrt (\\<lambda>a b. comp2le cmp' (fst a) (fst b)) (rbt_to_list r')", "by simp"], ["proof (state)\nthis:\n  sorted_wrt (key_rel (comp2le cmp')) (rbt_to_list r')\n\ngoal (2 subgoals):\n 1. (rbt_to_list r, rbt_to_list r')\n    \\<in> \\<langle>Rk \\<times>\\<^sub>r Rv\\<rangle>list_rel\n 2. map_to_set m' = set (rbt_to_list r')", "show \"(rbt_to_list r, rbt_to_list r') \\<in> \\<langle>\\<langle>Rk, Rv\\<rangle>prod_rel\\<rangle>list_rel\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (rbt_to_list r, rbt_to_list r')\n    \\<in> \\<langle>Rk \\<times>\\<^sub>r Rv\\<rangle>list_rel", "by (parametricity add: R1)"], ["proof (state)\nthis:\n  (rbt_to_list r, rbt_to_list r')\n  \\<in> \\<langle>Rk \\<times>\\<^sub>r Rv\\<rangle>list_rel\n\ngoal (1 subgoal):\n 1. map_to_set m' = set (rbt_to_list r')", "from M"], ["proof (chain)\npicking this:\n  map_of (rbt_to_list r') = local.rbt_lookup r'", "show \"map_to_set m' = set (rbt_to_list r')\""], ["proof (prove)\nusing this:\n  map_of (rbt_to_list r') = local.rbt_lookup r'\n\ngoal (1 subgoal):\n 1. map_to_set m' = set (rbt_to_list r')", "by (simp add: M' map_of_map_to_set[OF D])"], ["proof (state)\nthis:\n  map_to_set m' = set (rbt_to_list r')\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>l'.\n     (rbt_to_list r, l')\n     \\<in> \\<langle>Rk \\<times>\\<^sub>r Rv\\<rangle>list_rel \\<and>\n     distinct l' \\<and>\n     map_to_set m' = set l' \\<and> sorted_wrt (key_rel (comp2le cmp')) l'\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  is_map_to_sorted_list (comp2le cmp') Rk Rv (rbt_map_rel (comp2lt cmp'))\n   rbt_to_list\n\ngoal:\nNo subgoals!", "qed"], ["", "(* TODO: Reverse iterator *)"], ["", "lemmas [autoref_ga_rules] = class_to_eq_linorder"], ["", "lemma (in linorder) dflt_cmp_id:\n  \"(dflt_cmp (\\<le>) (<), dflt_cmp (\\<le>) (<))\\<in>Id\\<rightarrow>Id\\<rightarrow>Id\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (dflt_cmp (\\<le>) (<), dflt_cmp (\\<le>) (<))\n    \\<in> Id \\<rightarrow> Id \\<rightarrow> comp_res_rel", "by auto"], ["", "lemmas [autoref_rules] = dflt_cmp_id"], ["", "lemma rbt_linorder_autoref[autoref_rules]:\n  assumes \"SIDE_GEN_ALGO (eq_linorder cmpk')\"\n  assumes \"SIDE_GEN_ALGO (eq_linorder cmpv')\"\n  assumes \"GEN_OP cmpk cmpk' (Rk\\<rightarrow>Rk\\<rightarrow>Id)\"\n  assumes \"GEN_OP cmpv cmpv' (Rv\\<rightarrow>Rv\\<rightarrow>Id)\"\n  shows \n  \"(cmp_rbt cmpk cmpv, cmp_map cmpk' cmpv') \\<in> \n       \\<langle>Rk,Rv\\<rangle>rbt_map_rel (comp2lt cmpk') \n    \\<rightarrow> \\<langle>Rk,Rv\\<rangle>rbt_map_rel (comp2lt cmpk') \\<rightarrow> Id\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (cmp_rbt cmpk cmpv, cmp_map cmpk' cmpv')\n    \\<in> \\<langle>Rk, Rv\\<rangle>rbt_map_rel (comp2lt cmpk') \\<rightarrow>\n          \\<langle>Rk, Rv\\<rangle>rbt_map_rel (comp2lt cmpk') \\<rightarrow>\n          comp_res_rel", "apply (intro fun_relI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a a' aa a'a.\n       \\<lbrakk>(a, a') \\<in> \\<langle>Rk,\n                Rv\\<rangle>rbt_map_rel (comp2lt cmpk');\n        (aa, a'a) \\<in> \\<langle>Rk,\n        Rv\\<rangle>rbt_map_rel (comp2lt cmpk')\\<rbrakk>\n       \\<Longrightarrow> (cmp_rbt cmpk cmpv a aa,\n                          cmp_map cmpk' cmpv' a' a'a)\n                         \\<in> comp_res_rel", "apply (rule rbt_linorder_impl[param_fo])"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>a a' aa a'a.\n       \\<lbrakk>(a, a') \\<in> \\<langle>Rk,\n                Rv\\<rangle>rbt_map_rel (comp2lt cmpk');\n        (aa, a'a) \\<in> \\<langle>Rk,\n        Rv\\<rangle>rbt_map_rel (comp2lt cmpk')\\<rbrakk>\n       \\<Longrightarrow> eq_linorder cmpk'\n 2. \\<And>a a' aa a'a.\n       \\<lbrakk>(a, a') \\<in> \\<langle>Rk,\n                Rv\\<rangle>rbt_map_rel (comp2lt cmpk');\n        (aa, a'a) \\<in> \\<langle>Rk,\n        Rv\\<rangle>rbt_map_rel (comp2lt cmpk')\\<rbrakk>\n       \\<Longrightarrow> (cmpk, cmpk')\n                         \\<in> ?Rk5 a a' aa a'a \\<rightarrow>\n                               ?Rk5 a a' aa a'a \\<rightarrow> comp_res_rel\n 3. \\<And>a a' aa a'a.\n       \\<lbrakk>(a, a') \\<in> \\<langle>Rk,\n                Rv\\<rangle>rbt_map_rel (comp2lt cmpk');\n        (aa, a'a) \\<in> \\<langle>Rk,\n        Rv\\<rangle>rbt_map_rel (comp2lt cmpk')\\<rbrakk>\n       \\<Longrightarrow> (cmpv, cmpv')\n                         \\<in> ?Rv5 a a' aa a'a \\<rightarrow>\n                               ?Rv5 a a' aa a'a \\<rightarrow> comp_res_rel\n 4. \\<And>a a' aa a'a.\n       \\<lbrakk>(a, a') \\<in> \\<langle>Rk,\n                Rv\\<rangle>rbt_map_rel (comp2lt cmpk');\n        (aa, a'a) \\<in> \\<langle>Rk,\n        Rv\\<rangle>rbt_map_rel (comp2lt cmpk')\\<rbrakk>\n       \\<Longrightarrow> (a, a') \\<in> \\<langle>?Rk5 a a' aa a'a,\n                         ?Rv5 a a' aa\n                          a'a\\<rangle>rbt_map_rel (comp2lt cmpk')\n 5. \\<And>a a' aa a'a.\n       \\<lbrakk>(a, a') \\<in> \\<langle>Rk,\n                Rv\\<rangle>rbt_map_rel (comp2lt cmpk');\n        (aa, a'a) \\<in> \\<langle>Rk,\n        Rv\\<rangle>rbt_map_rel (comp2lt cmpk')\\<rbrakk>\n       \\<Longrightarrow> (aa, a'a) \\<in> \\<langle>?Rk5 a a' aa a'a,\n                         ?Rv5 a a' aa\n                          a'a\\<rangle>rbt_map_rel (comp2lt cmpk')", "using assms"], ["proof (prove)\nusing this:\n  SIDE_GEN_ALGO (eq_linorder cmpk')\n  SIDE_GEN_ALGO (eq_linorder cmpv')\n  GEN_OP cmpk cmpk' (Rk \\<rightarrow> Rk \\<rightarrow> comp_res_rel)\n  GEN_OP cmpv cmpv' (Rv \\<rightarrow> Rv \\<rightarrow> comp_res_rel)\n\ngoal (5 subgoals):\n 1. \\<And>a a' aa a'a.\n       \\<lbrakk>(a, a') \\<in> \\<langle>Rk,\n                Rv\\<rangle>rbt_map_rel (comp2lt cmpk');\n        (aa, a'a) \\<in> \\<langle>Rk,\n        Rv\\<rangle>rbt_map_rel (comp2lt cmpk')\\<rbrakk>\n       \\<Longrightarrow> eq_linorder cmpk'\n 2. \\<And>a a' aa a'a.\n       \\<lbrakk>(a, a') \\<in> \\<langle>Rk,\n                Rv\\<rangle>rbt_map_rel (comp2lt cmpk');\n        (aa, a'a) \\<in> \\<langle>Rk,\n        Rv\\<rangle>rbt_map_rel (comp2lt cmpk')\\<rbrakk>\n       \\<Longrightarrow> (cmpk, cmpk')\n                         \\<in> ?Rk5 a a' aa a'a \\<rightarrow>\n                               ?Rk5 a a' aa a'a \\<rightarrow> comp_res_rel\n 3. \\<And>a a' aa a'a.\n       \\<lbrakk>(a, a') \\<in> \\<langle>Rk,\n                Rv\\<rangle>rbt_map_rel (comp2lt cmpk');\n        (aa, a'a) \\<in> \\<langle>Rk,\n        Rv\\<rangle>rbt_map_rel (comp2lt cmpk')\\<rbrakk>\n       \\<Longrightarrow> (cmpv, cmpv')\n                         \\<in> ?Rv5 a a' aa a'a \\<rightarrow>\n                               ?Rv5 a a' aa a'a \\<rightarrow> comp_res_rel\n 4. \\<And>a a' aa a'a.\n       \\<lbrakk>(a, a') \\<in> \\<langle>Rk,\n                Rv\\<rangle>rbt_map_rel (comp2lt cmpk');\n        (aa, a'a) \\<in> \\<langle>Rk,\n        Rv\\<rangle>rbt_map_rel (comp2lt cmpk')\\<rbrakk>\n       \\<Longrightarrow> (a, a') \\<in> \\<langle>?Rk5 a a' aa a'a,\n                         ?Rv5 a a' aa\n                          a'a\\<rangle>rbt_map_rel (comp2lt cmpk')\n 5. \\<And>a a' aa a'a.\n       \\<lbrakk>(a, a') \\<in> \\<langle>Rk,\n                Rv\\<rangle>rbt_map_rel (comp2lt cmpk');\n        (aa, a'a) \\<in> \\<langle>Rk,\n        Rv\\<rangle>rbt_map_rel (comp2lt cmpk')\\<rbrakk>\n       \\<Longrightarrow> (aa, a'a) \\<in> \\<langle>?Rk5 a a' aa a'a,\n                         ?Rv5 a a' aa\n                          a'a\\<rangle>rbt_map_rel (comp2lt cmpk')", "apply simp_all"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "(* TODO: Move. This belongs to generic algorithms for orders *)"], ["", "lemma map_linorder_impl[autoref_ga_rules]:\n  assumes \"GEN_ALGO_tag (eq_linorder cmpk)\"\n  assumes \"GEN_ALGO_tag (eq_linorder cmpv)\"\n  shows \"eq_linorder (cmp_map cmpk cmpv)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. eq_linorder (cmp_map cmpk cmpv)", "using assms"], ["proof (prove)\nusing this:\n  GEN_ALGO_tag (eq_linorder cmpk)\n  GEN_ALGO_tag (eq_linorder cmpv)\n\ngoal (1 subgoal):\n 1. eq_linorder (cmp_map cmpk cmpv)", "apply simp_all"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>eq_linorder cmpk; eq_linorder cmpv\\<rbrakk>\n    \\<Longrightarrow> eq_linorder (cmp_map cmpk cmpv)", "using map_ord_eq_linorder"], ["proof (prove)\nusing this:\n  \\<lbrakk>eq_linorder ?cmpk; eq_linorder ?cmpv\\<rbrakk>\n  \\<Longrightarrow> eq_linorder (cmp_map ?cmpk ?cmpv)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>eq_linorder cmpk; eq_linorder cmpv\\<rbrakk>\n    \\<Longrightarrow> eq_linorder (cmp_map cmpk cmpv)", "."], ["", "lemma set_linorder_impl[autoref_ga_rules]:\n  assumes \"GEN_ALGO_tag (eq_linorder cmpk)\"\n  shows \"eq_linorder (cmp_set cmpk)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. eq_linorder (cmp_set cmpk)", "using assms"], ["proof (prove)\nusing this:\n  GEN_ALGO_tag (eq_linorder cmpk)\n\ngoal (1 subgoal):\n 1. eq_linorder (cmp_set cmpk)", "apply simp_all"], ["proof (prove)\ngoal (1 subgoal):\n 1. eq_linorder cmpk \\<Longrightarrow> eq_linorder (cmp_set cmpk)", "using set_ord_eq_linorder"], ["proof (prove)\nusing this:\n  eq_linorder ?cmp \\<Longrightarrow> eq_linorder (cmp_set ?cmp)\n\ngoal (1 subgoal):\n 1. eq_linorder cmpk \\<Longrightarrow> eq_linorder (cmp_set cmpk)", "."], ["", "lemma (in linorder) rbt_map_rel_finite_aux:\n  \"finite_map_rel (\\<langle>Rk,Rv\\<rangle>rbt_map_rel (<))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite_map_rel (\\<langle>Rk, Rv\\<rangle>rbt_map_rel (<))", "unfolding finite_map_rel_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. Range (\\<langle>Rk, Rv\\<rangle>rbt_map_rel (<))\n    \\<subseteq> Collect (finite \\<circ> dom)", "by (auto simp: rbt_map_rel_def rbt_map_rel'_def br_def)"], ["", "lemma rbt_map_rel_finite[relator_props]: \n  assumes ELO: \"GEN_ALGO_tag (eq_linorder cmpk)\"\n  shows \"finite_map_rel (\\<langle>Rk,Rv\\<rangle>rbt_map_rel (comp2lt cmpk))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite_map_rel (\\<langle>Rk, Rv\\<rangle>rbt_map_rel (comp2lt cmpk))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. finite_map_rel (\\<langle>Rk, Rv\\<rangle>rbt_map_rel (comp2lt cmpk))", "interpret linorder \"comp2le cmpk\" \"comp2lt cmpk\""], ["proof (prove)\ngoal (1 subgoal):\n 1. class.linorder (comp2le cmpk) (comp2lt cmpk)", "using ELO"], ["proof (prove)\nusing this:\n  GEN_ALGO_tag (eq_linorder cmpk)\n\ngoal (1 subgoal):\n 1. class.linorder (comp2le cmpk) (comp2lt cmpk)", "by (simp add: eq_linorder_class_conv)"], ["proof (state)\ngoal (1 subgoal):\n 1. finite_map_rel (\\<langle>Rk, Rv\\<rangle>rbt_map_rel (comp2lt cmpk))", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. finite_map_rel (\\<langle>Rk, Rv\\<rangle>rbt_map_rel (comp2lt cmpk))", "using rbt_map_rel_finite_aux"], ["proof (prove)\nusing this:\n  finite_map_rel (\\<langle>?Rk, ?Rv\\<rangle>rbt_map_rel (comp2lt cmpk))\n\ngoal (1 subgoal):\n 1. finite_map_rel (\\<langle>Rk, Rv\\<rangle>rbt_map_rel (comp2lt cmpk))", "."], ["proof (state)\nthis:\n  finite_map_rel (\\<langle>Rk, Rv\\<rangle>rbt_map_rel (comp2lt cmpk))\n\ngoal:\nNo subgoals!", "qed"], ["", "abbreviation \n  \"dflt_rm_rel \\<equiv> rbt_map_rel (comp2lt (dflt_cmp (\\<le>) (<)))\""], ["", "lemmas [autoref_post_simps] = dflt_cmp_inv2 dflt_cmp_2inv"], ["", "lemma [simp,autoref_post_simps]: \"ord.rbt_ins (<) = rbt_ins\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ord.rbt_ins (<) = rbt_ins", "proof (intro ext, goal_cases)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x xa xb xc. ord.rbt_ins (<) x xa xb xc = rbt_ins x xa xb xc", "case (1 x xa xb xc)"], ["proof (state)\nthis:\n  \n\ngoal (1 subgoal):\n 1. \\<And>x xa xb xc. ord.rbt_ins (<) x xa xb xc = rbt_ins x xa xb xc", "thus ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. ord.rbt_ins (<) x xa xb xc = rbt_ins x xa xb xc", "apply (induct x xa xb xc rule: rbt_ins.induct)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>f k v. ord.rbt_ins (<) f k v rbt.Empty = rbt_ins f k v rbt.Empty\n 2. \\<And>f k v l x y r.\n       \\<lbrakk>k < x \\<Longrightarrow>\n                ord.rbt_ins (<) f k v l = rbt_ins f k v l;\n        \\<lbrakk>\\<not> k < x; x < k\\<rbrakk>\n        \\<Longrightarrow> ord.rbt_ins (<) f k v r = rbt_ins f k v r\\<rbrakk>\n       \\<Longrightarrow> ord.rbt_ins (<) f k v (Branch color.B l x y r) =\n                         rbt_ins f k v (Branch color.B l x y r)\n 3. \\<And>f k v l x y r.\n       \\<lbrakk>k < x \\<Longrightarrow>\n                ord.rbt_ins (<) f k v l = rbt_ins f k v l;\n        \\<lbrakk>\\<not> k < x; x < k\\<rbrakk>\n        \\<Longrightarrow> ord.rbt_ins (<) f k v r = rbt_ins f k v r\\<rbrakk>\n       \\<Longrightarrow> ord.rbt_ins (<) f k v (Branch color.R l x y r) =\n                         rbt_ins f k v (Branch color.R l x y r)", "apply (simp_all add: ord.rbt_ins.simps)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  ord.rbt_ins (<) x xa xb xc = rbt_ins x xa xb xc\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma [autoref_post_simps]: \"ord.rbt_lookup ((<)::_::linorder\\<Rightarrow>_) = rbt_lookup\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ord.rbt_lookup (<) = rbt_lookup", "unfolding ord.rbt_lookup_def rbt_lookup_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. rec_rbt Map.empty\n     (\\<lambda>_ l x y r la ra k.\n         if k < x then la k else if x < k then ra k else Some y) =\n    rec_rbt Map.empty\n     (\\<lambda>_ l x y r la ra k.\n         if k < x then la k else if x < k then ra k else Some y)", ".."], ["", "lemma [simp,autoref_post_simps]:\n  \"ord.rbt_insert_with_key (<) = rbt_insert_with_key\"\n  \"ord.rbt_insert (<) = rbt_insert\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ord.rbt_insert_with_key (<) = rbt_insert_with_key &&&\n    ord.rbt_insert (<) = rbt_insert", "unfolding \n    ord.rbt_insert_with_key_def[abs_def] rbt_insert_with_key_def[abs_def]\n    ord.rbt_insert_def[abs_def] rbt_insert_def[abs_def]"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>f k v t. paint color.B (ord.rbt_ins (<) f k v t)) =\n    (\\<lambda>f k v t. paint color.B (rbt_ins f k v t)) &&&\n    (\\<lambda>k v t.\n        paint color.B (ord.rbt_ins (<) (\\<lambda>_ _ nv. nv) k v t)) =\n    (\\<lambda>k v t. paint color.B (rbt_ins (\\<lambda>_ _ nv. nv) k v t))", "by simp_all"], ["", "(* TODO: Move, probably to some orderings setup theory *)"], ["", "lemma autoref_comp2eq[autoref_rules_raw]:\n  assumes PRIO_TAG_GEN_ALGO\n  assumes ELC: \"SIDE_GEN_ALGO (eq_linorder cmp')\"\n  assumes [simplified,param]: \"GEN_OP cmp cmp' (R\\<rightarrow>R\\<rightarrow>Id)\"\n  shows \"(comp2eq cmp, (=)) \\<in> R\\<rightarrow>R\\<rightarrow>Id\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (comp2eq cmp, (=)) \\<in> R \\<rightarrow> R \\<rightarrow> bool_rel", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (comp2eq cmp, (=)) \\<in> R \\<rightarrow> R \\<rightarrow> bool_rel", "from ELC"], ["proof (chain)\npicking this:\n  SIDE_GEN_ALGO (eq_linorder cmp')", "have 1: \"eq_linorder cmp'\""], ["proof (prove)\nusing this:\n  SIDE_GEN_ALGO (eq_linorder cmp')\n\ngoal (1 subgoal):\n 1. eq_linorder cmp'", "by simp"], ["proof (state)\nthis:\n  eq_linorder cmp'\n\ngoal (1 subgoal):\n 1. (comp2eq cmp, (=)) \\<in> R \\<rightarrow> R \\<rightarrow> bool_rel", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. (comp2eq cmp, (=)) \\<in> R \\<rightarrow> R \\<rightarrow> bool_rel", "apply (subst eq_linorder_comp2eq_eq[OF 1,symmetric])"], ["proof (prove)\ngoal (1 subgoal):\n 1. (comp2eq cmp, comp2eq cmp')\n    \\<in> R \\<rightarrow> R \\<rightarrow> bool_rel", "by parametricity"], ["proof (state)\nthis:\n  (comp2eq cmp, (=)) \\<in> R \\<rightarrow> R \\<rightarrow> bool_rel\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma pi'_rm[icf_proper_iteratorI]: \n  \"proper_it' rm_iterateoi rm_iterateoi\"\n  \"proper_it' rm_reverse_iterateoi rm_reverse_iterateoi\""], ["proof (prove)\ngoal (1 subgoal):\n 1. proper_it' rm_iterateoi rm_iterateoi &&&\n    proper_it' rm_reverse_iterateoi rm_reverse_iterateoi", "apply (rule proper_it'I)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>s. proper_it (rm_iterateoi s) (rm_iterateoi s)\n 2. proper_it' rm_reverse_iterateoi rm_reverse_iterateoi", "apply (rule pi_rm)"], ["proof (prove)\ngoal (1 subgoal):\n 1. proper_it' rm_reverse_iterateoi rm_reverse_iterateoi", "apply (rule proper_it'I)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>s. proper_it (rm_reverse_iterateoi s) (rm_reverse_iterateoi s)", "apply (rule pi_rm_rev)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "declare pi'_rm[proper_it]"], ["", "lemmas autoref_rbt_rules = \n  autoref_rbt_empty\n  autoref_rbt_lookup\n  autoref_rbt_update\n  autoref_rbt_delete\n  autoref_rbt_union"], ["", "lemmas autoref_rbt_rules_linorder[autoref_rules_raw] = \n  autoref_rbt_rules[where Rk=\"Rk\"] for Rk :: \"(_\\<times>_::linorder) set\""], ["", "end"]]}