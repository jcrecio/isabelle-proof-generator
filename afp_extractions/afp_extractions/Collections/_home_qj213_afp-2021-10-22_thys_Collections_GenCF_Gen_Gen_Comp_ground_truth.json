{"file_name": "/home/qj213/afp-2021-10-22/thys/Collections/GenCF/Gen/Gen_Comp.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Collections", "problem_names": ["lemma autoref_prod_cmp_dflt_id[autoref_rules_raw]: \n  \"(dflt_cmp (\\<le>) (<), dflt_cmp (\\<le>) (<)) \\<in>\n    \\<langle>Id,Id\\<rangle>prod_rel \\<rightarrow> \\<langle>Id,Id\\<rangle>prod_rel \\<rightarrow> Id\"", "lemma gen_prod_cmp_dflt[autoref_rules_raw]:\n  assumes PRIO_TAG_GEN_ALGO\n  assumes \"GEN_OP cmp1 (dflt_cmp (\\<le>) (<)) (R1 \\<rightarrow> R1 \\<rightarrow> Id)\"\n  assumes \"GEN_OP cmp2 (dflt_cmp (\\<le>) (<)) (R2 \\<rightarrow> R2 \\<rightarrow> Id)\"\n  shows \"(cmp_prod cmp1 cmp2, dflt_cmp (\\<le>) (<)) \\<in>\n    \\<langle>R1,R2\\<rangle>prod_rel \\<rightarrow> \\<langle>R1,R2\\<rangle>prod_rel \\<rightarrow> Id\""], "translations": [["", "lemma autoref_prod_cmp_dflt_id[autoref_rules_raw]: \n  \"(dflt_cmp (\\<le>) (<), dflt_cmp (\\<le>) (<)) \\<in>\n    \\<langle>Id,Id\\<rangle>prod_rel \\<rightarrow> \\<langle>Id,Id\\<rangle>prod_rel \\<rightarrow> Id\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (dflt_cmp (\\<le>) (<), dflt_cmp (\\<le>) (<))\n    \\<in> Id \\<times>\\<^sub>r Id \\<rightarrow>\n          Id \\<times>\\<^sub>r Id \\<rightarrow> comp_res_rel", "by auto"], ["", "lemma gen_prod_cmp_dflt[autoref_rules_raw]:\n  assumes PRIO_TAG_GEN_ALGO\n  assumes \"GEN_OP cmp1 (dflt_cmp (\\<le>) (<)) (R1 \\<rightarrow> R1 \\<rightarrow> Id)\"\n  assumes \"GEN_OP cmp2 (dflt_cmp (\\<le>) (<)) (R2 \\<rightarrow> R2 \\<rightarrow> Id)\"\n  shows \"(cmp_prod cmp1 cmp2, dflt_cmp (\\<le>) (<)) \\<in>\n    \\<langle>R1,R2\\<rangle>prod_rel \\<rightarrow> \\<langle>R1,R2\\<rangle>prod_rel \\<rightarrow> Id\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (cmp_prod cmp1 cmp2, dflt_cmp (\\<le>) (<))\n    \\<in> R1 \\<times>\\<^sub>r R2 \\<rightarrow>\n          R1 \\<times>\\<^sub>r R2 \\<rightarrow> comp_res_rel", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (cmp_prod cmp1 cmp2, dflt_cmp (\\<le>) (<))\n    \\<in> R1 \\<times>\\<^sub>r R2 \\<rightarrow>\n          R1 \\<times>\\<^sub>r R2 \\<rightarrow> comp_res_rel", "have E: \"dflt_cmp (\\<le>) (<) \n    = cmp_prod (dflt_cmp (\\<le>) (<)) (dflt_cmp (\\<le>) (<))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dflt_cmp (\\<le>) (<) =\n    cmp_prod (dflt_cmp (\\<le>) (<)) (dflt_cmp (\\<le>) (<))", "by (auto simp: dflt_cmp_def prod_less_def prod_le_def intro!: ext)"], ["proof (state)\nthis:\n  dflt_cmp (\\<le>) (<) =\n  cmp_prod (dflt_cmp (\\<le>) (<)) (dflt_cmp (\\<le>) (<))\n\ngoal (1 subgoal):\n 1. (cmp_prod cmp1 cmp2, dflt_cmp (\\<le>) (<))\n    \\<in> R1 \\<times>\\<^sub>r R2 \\<rightarrow>\n          R1 \\<times>\\<^sub>r R2 \\<rightarrow> comp_res_rel", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. (cmp_prod cmp1 cmp2, dflt_cmp (\\<le>) (<))\n    \\<in> R1 \\<times>\\<^sub>r R2 \\<rightarrow>\n          R1 \\<times>\\<^sub>r R2 \\<rightarrow> comp_res_rel", "using assms"], ["proof (prove)\nusing this:\n  PRIO_TAG_GEN_ALGO\n  GEN_OP cmp1 (dflt_cmp (\\<le>) (<))\n   (R1 \\<rightarrow> R1 \\<rightarrow> comp_res_rel)\n  GEN_OP cmp2 (dflt_cmp (\\<le>) (<))\n   (R2 \\<rightarrow> R2 \\<rightarrow> comp_res_rel)\n\ngoal (1 subgoal):\n 1. (cmp_prod cmp1 cmp2, dflt_cmp (\\<le>) (<))\n    \\<in> R1 \\<times>\\<^sub>r R2 \\<rightarrow>\n          R1 \\<times>\\<^sub>r R2 \\<rightarrow> comp_res_rel", "unfolding autoref_tag_defs E"], ["proof (prove)\nusing this:\n  PRIO_TAG_GEN_ALGO\n  (cmp1, dflt_cmp (\\<le>) (<))\n  \\<in> R1 \\<rightarrow> R1 \\<rightarrow> comp_res_rel\n  (cmp2, dflt_cmp (\\<le>) (<))\n  \\<in> R2 \\<rightarrow> R2 \\<rightarrow> comp_res_rel\n\ngoal (1 subgoal):\n 1. (cmp_prod cmp1 cmp2,\n     cmp_prod (dflt_cmp (\\<le>) (<)) (dflt_cmp (\\<le>) (<)))\n    \\<in> R1 \\<times>\\<^sub>r R2 \\<rightarrow>\n          R1 \\<times>\\<^sub>r R2 \\<rightarrow> comp_res_rel", "by parametricity"], ["proof (state)\nthis:\n  (cmp_prod cmp1 cmp2, dflt_cmp (\\<le>) (<))\n  \\<in> R1 \\<times>\\<^sub>r R2 \\<rightarrow>\n        R1 \\<times>\\<^sub>r R2 \\<rightarrow> comp_res_rel\n\ngoal:\nNo subgoals!", "qed"], ["", "end"]]}