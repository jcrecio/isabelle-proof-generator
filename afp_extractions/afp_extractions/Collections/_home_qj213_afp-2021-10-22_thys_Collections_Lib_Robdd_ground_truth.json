{"file_name": "/home/qj213/afp-2021-10-22/thys/Collections/Lib/Robdd.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Collections", "problem_names": ["lemma robdd_\\<alpha>_simps_leafs [simp] : \n  \"robdd_\\<alpha> (robdd_leaf f1) = robdd_\\<alpha> (robdd_leaf f2) \\<longleftrightarrow> (f1 = f2)\"", "lemma robdd_is_leaf_alt_def :\n  \"robdd_is_leaf b \\<longleftrightarrow> (b = robdd_one \\<or> b = robdd_zero)\"", "lemma robdd_equiv_simps[simp] :\n   \"robdd_equiv b (robdd_leaf f) = (b = robdd_leaf f)\"\n   \"robdd_equiv b b\"", "lemma subrobdds_alt_def :\n  \"subrobdds b = insert b (subrobdds_proper b)\"", "lemma subobbds_proper_size: \n  \"b1 \\<in> subrobdds_proper b2 \\<Longrightarrow> size_robdd b1 < size_robdd b2\"", "lemma subrobdds_size: \n  \"b1 \\<in> subrobdds b2 \\<Longrightarrow> size_robdd b1 \\<le> size_robdd b2\"", "lemma subrobdds_refl[simp]:  \"b \\<in> subrobdds b\"", "lemma subrobdds_antisym:  \n  \"b1 \\<in> subrobdds b2 \\<Longrightarrow> b2 \\<in> subrobdds b1 \\<Longrightarrow> b1 = b2\"", "lemma subrobdds_trans :  \n  \"b1 \\<in> subrobdds b2 \\<Longrightarrow> b2 \\<in> subrobdds b3 \\<Longrightarrow> b1 \\<in> subrobdds b3\"", "lemma subrobdds_proper_simps [simp] :\n   \"subrobdds_proper (robdd_leaf f) = {}\"\n   \"subrobdds_proper (robdd_var i l v r) = \n    (insert l (insert r (subrobdds_proper l \\<union> subrobdds_proper r)))\"", "lemma subrobdds_subset_simp :\n  \"subrobdds b1 \\<subseteq> subrobdds b2 \\<longleftrightarrow> b1 \\<in> subrobdds b2\"", "lemma subrobdds_set_simps [simp] :\n  \"subrobdds_set {} = {}\"\n  \"subrobdds_set (insert b bs) = subrobdds b \\<union> subrobdds_set bs\"\n  \"subrobdds_set (bs1 \\<union> bs2) = subrobdds_set bs1 \\<union> subrobdds_set bs2\"", "lemma subrobdds_set_subset_simp :\n  \"subrobdds b \\<subseteq> subrobdds_set bs \\<longleftrightarrow> b \\<in> subrobdds_set bs\"", "lemma subrobdds_set_idempot [simp] :\n  \"subrobdds_set (subrobdds_set bs) = subrobdds_set bs\"", "lemma subrobdds_set_idempot2 [simp] :\n  \"subrobdds_set (subrobdds b) = subrobdds b\"", "lemma subrobdds_set_mono :\n  \"bs \\<subseteq> subrobdds_set bs\"", "lemma subrobdds_set_mono2 :\n  \"bs1 \\<subseteq> bs2 \\<Longrightarrow> (subrobdds_set bs1 \\<subseteq> subrobdds_set bs2)\"", "lemma robdd_invar_ids_full_alt_def :\n  \"robdd_invar_ids_full bs =\n   robdd_invar_ids (insert robdd_zero (insert robdd_one bs))\"", "lemma robdd_invar_ids_full_equal_alt_def :\n  \"robdd_invar_ids_full_equal bs =\n   robdd_invar_ids_equal (insert robdd_zero (insert robdd_one bs))\"", "lemma robdd_invar_idsI:\nassumes \"\\<And>b1 b2. \\<lbrakk>b1 \\<in> (subrobdds_set bs); b2 \\<in> (subrobdds_set bs)\\<rbrakk> \\<Longrightarrow>\n                         (robdd_\\<alpha> b1 = robdd_\\<alpha> b2) \\<longleftrightarrow> (robdd_get_id b1 = robdd_get_id b2)\" \nshows \"robdd_invar_ids bs\"", "lemma robdd_invar_idsD:\nassumes \"robdd_invar_ids bs\"\nassumes \"b1 \\<in> (subrobdds_set bs)\"\n        \"b2 \\<in> (subrobdds_set bs)\"\nshows \"robdd_\\<alpha> b1 = robdd_\\<alpha> b2 \\<longleftrightarrow> robdd_get_id b1 = robdd_get_id b2\"", "lemma robdd_invar_ids_subset_rule :\n  \"robdd_invar_ids bs1 \\<Longrightarrow> bs2 \\<subseteq> bs1 \\<Longrightarrow> robdd_invar_ids bs2\"", "lemma robdd_invar_ids_expand :\nshows \"robdd_invar_ids (subrobdds_set bs) = robdd_invar_ids bs\"", "lemma robdd_invar_ids_subset_subrobdds_rule :\nassumes pre: \"\\<And>b2. b2 \\<in> bs2 \\<Longrightarrow> \\<exists>b1 \\<in> bs1. b2 \\<in> (subrobdds b1)\"\n    and invar_bs1: \"robdd_invar_ids bs1\"\nshows \"robdd_invar_ids bs2\"", "lemma robdd_invar_ids_equiv_implies_eq:\nassumes \"robdd_invar_ids bs\"\n    and \"b1 \\<in> bs\" \"b2 \\<in> bs\"\n    and \"robdd_equiv b1 b2\"\n  shows \"b1 = b2\"", "lemma robdd_invar_vars_greater___weaken :\n   \"robdd_invar_vars_greater n b \\<Longrightarrow> n' \\<le> n \\<Longrightarrow> robdd_invar_vars_greater n' b\"", "lemma robdd_invar_vars_impl: \n  \"robdd_invar_vars_greater n robdd  \\<Longrightarrow> robdd_invar_vars robdd\"", "lemma robdd_invar_reduced_leaf [simp]: \n   \"robdd_invar_reduced (robdd_leaf v) = True\"", "lemma subrobdds_leaf_in_reduced: \n\"robdd_invar_reduced b \\<Longrightarrow> \\<not>(robdd_is_leaf b) \\<Longrightarrow> (robdd_one \\<in> subrobdds b \\<and> robdd_zero \\<in> subrobdds b)\"", "lemma subrobdds_set_leaf_in_reduced: \nassumes bs_OK: \"\\<And>b. b \\<in> bs \\<Longrightarrow> robdd_invar_reduced b\" \n    and bs_neq_leaf_set: \"bs \\<noteq> {robdd_one}\" \"bs \\<noteq> {robdd_zero}\" \n    and bs_neq_emp: \"bs \\<noteq> {}\"\nshows \"robdd_one \\<in> subrobdds_set bs \\<and> robdd_zero \\<in> subrobdds_set bs\"", "lemma robdd_invar_ids_leafs_intro :\nassumes bs_OK: \"\\<And>b. b \\<in> bs \\<Longrightarrow> robdd_invar_reduced b\"\n    and weak_invar: \"robdd_invar_ids bs\"\nshows \"robdd_invar_ids_leafs bs\"", "lemma robdd_invar_alt_def :\n  \"robdd_invar b = (robdd_invar_ids {b} \\<and> robdd_invar_vars b \\<and> robdd_invar_reduced b)\"", "lemma robdd_invar_simps_leafs [simp]: \"robdd_invar (robdd_leaf value)\"", "lemma robdd_invar_simps_var :\n   \"robdd_invar (robdd_var i l v r) \\<Longrightarrow> (\\<not>(robdd_equiv l r) \\<and> robdd_invar l \\<and> robdd_invar r)\"", "lemma robdd_invar_subrobdds_set :\nassumes bs_OK: \"\\<And>b. b \\<in> bs \\<Longrightarrow> robdd_invar b\"\n    and b_in: \"b \\<in> subrobdds_set bs\"\n  shows \"robdd_invar b\"", "lemma robdd_invar_ext_simps [simp] :\n   \"robdd_invar_ext bs n (robdd_leaf f) = (robdd_invar_ids bs \\<and> ((robdd_leaf f) \\<in> (subrobdds_set bs)))\" (is ?T1)\n   \"robdd_invar_ext bs n (robdd_var i l v r) =\n     ((robdd_var i l v r) \\<in> (subrobdds_set bs) \\<and> \\<not>(robdd_equiv l r) \\<and> n \\<le> v \\<and> robdd_invar_ext bs (Suc v) l \\<and> robdd_invar_ext bs (Suc v) r)\" (is ?T2)", "lemma rodd_invar_ext_idempot_subrobdds_set [simp]: \n   \"robdd_invar_ext (subrobdds_set bs) n b = robdd_invar_ext bs n b\"", "lemma robdd_invar_ext_weaken :\nassumes pre: \"robdd_invar_ext bs2 n b\"\n    and bs2_props: \"\\<And>b2.  b \\<in> subrobdds_set bs2 \\<Longrightarrow> b2 \\<in> bs1 \\<Longrightarrow> \\<exists>b1 \\<in> bs2. b2 \\<in> (subrobdds b1)\"\n    and b_in: \"b \\<in> subrobdds_set bs2 \\<Longrightarrow> b \\<in> subrobdds_set bs1\"\n    and m_le: \"m \\<le> n\"\nshows \"robdd_invar_ext bs1 m b\"", "lemma robdd_invar_ext_weaken_var :\nassumes pre: \"robdd_invar_ext bs n b\"\n    and m_le: \"m \\<le> n\"\nshows \"robdd_invar_ext bs m b\"", "lemma robdd_invar_impl :\nassumes invar_ext: \"robdd_invar_ext bs n b\"\nshows \"robdd_invar b\"", "lemma robdd_\\<alpha>_invar_greater :\nassumes invar_vars: \"robdd_invar_vars_greater n b\"\n    and a_equiv: \"\\<And>v. v \\<ge> n \\<Longrightarrow> a1 v = a2 v\"\nshows  \"robdd_\\<alpha> b a1 = robdd_\\<alpha> b a2\"", "lemma robdd_unique_leaf :\nassumes invars_b: \"robdd_invar_vars b\" \"robdd_invar_reduced b\"\n    and sem_eq: \"robdd_\\<alpha> b = robdd_\\<alpha> (robdd_leaf value)\"\nshows \"b = (robdd_leaf value)\"", "lemma robdd_unique_var :\nassumes invars_b1: \"robdd_invar_vars (robdd_var i1 l1 v1 r1)\" \"robdd_invar_reduced (robdd_var i1 l1 v1 r1)\"\n    and invars_b2: \"robdd_invar_vars (robdd_var i2 l2 v2 r2)\" \"robdd_invar_reduced (robdd_var i2 l2 v2 r2)\"\n    and sem_neq_b1: \"robdd_\\<alpha> l1 \\<noteq> robdd_\\<alpha> r1\"\n    and sem_neq_b2: \"robdd_\\<alpha> l2 \\<noteq> robdd_\\<alpha> r2\"\n    and sem_eq: \"robdd_\\<alpha> (robdd_var i1 l1 v1 r1) = robdd_\\<alpha> (robdd_var i2 l2 v2 r2)\"\nshows \"v1 = v2 \\<and> robdd_\\<alpha> l1 = robdd_\\<alpha> l2 \\<and> robdd_\\<alpha> r1 = robdd_\\<alpha> r2\"", "lemma robdd_equiv_implies_sem_equiv :\n  \"robdd_equiv b1 b2 \\<Longrightarrow> robdd_\\<alpha> b1 = robdd_\\<alpha> b2\"", "lemma sem_equiv_implies_robdd_equiv :\nassumes \"robdd_invar_vars b1\" \"robdd_invar_reduced b1\"\n    and \"robdd_invar_vars b2\" \"robdd_invar_reduced b2\"\n    and \"robdd_\\<alpha> b1 = robdd_\\<alpha> b2\"\nshows \"robdd_equiv b1 b2\"", "lemma robdd_equiv_alt_def_full :\nassumes \"robdd_invar_vars b1\" \"robdd_invar_reduced b1\"\n    and \"robdd_invar_vars b2\" \"robdd_invar_reduced b2\"\nshows \"robdd_equiv b1 b2 \\<longleftrightarrow> robdd_\\<alpha> b1 = robdd_\\<alpha> b2\"", "lemma robdd_equiv_alt_def :\nassumes \"robdd_invar b1\"\n    and \"robdd_invar b2\"\nshows \"robdd_equiv b1 b2 \\<longleftrightarrow> robdd_\\<alpha> b1 = robdd_\\<alpha> b2\"", "lemma robdd_unique :\nassumes \"robdd_invar b1\"\n    and \"robdd_invar b2\"\n    and \"robdd_invar_ids bs\"\n    and \"b1 \\<in> bs\" \"b2 \\<in> bs\"\nshows \"robdd_\\<alpha> b1 = robdd_\\<alpha> b2 \\<longleftrightarrow> b1 = b2\"", "lemma robdd_invar_ids_equal_intro :\nassumes bs_OK: \"\\<And>b. b \\<in> bs \\<Longrightarrow> robdd_invar b\"\n    and weak_invar: \"robdd_invar_ids bs\"\nshows \"robdd_invar_ids_equal bs\"", "lemma robdd_invar_ids_full_equal_intro :\nassumes bs_OK: \"\\<And>b. b \\<in> bs \\<Longrightarrow> robdd_invar b\"\n    and weak_invar: \"robdd_invar_ids_full bs\"\nshows \"robdd_invar_ids_full_equal bs\"", "lemma robdd_depends_on_varI :\n  \"robdd_\\<alpha> b (a(v := True)) \\<noteq> robdd_\\<alpha> b (a(v := False)) \\<Longrightarrow>\n   robdd_depends_on_var v b\"", "lemma robbd_depends_on_var_leaf [simp] :\n  \"\\<not>(robdd_depends_on_var v (robdd_leaf f))\"", "lemma robdd_depends_on_var_invar_greater:\nassumes invar: \"robdd_invar_vars_greater n b\"\n    and m_less: \"m < n\"\n   shows \"\\<not>(robdd_depends_on_var m b)\"", "lemma robbd_depends_on_var_var_impl1 :\nassumes depend: \"robdd_depends_on_var v (robdd_var i l v' r)\"\nshows \"(v = v') \\<or> robdd_depends_on_var v l \\<or> robdd_depends_on_var v r\"", "lemma robbd_depends_on_var_var :\nassumes invar: \"robdd_invar (robdd_var i l v' r)\"\nshows \"robdd_depends_on_var v (robdd_var i l v' r) \\<longleftrightarrow>\n       (v = v') \\<or> robdd_depends_on_var v l \\<or> robdd_depends_on_var v r\"", "lemma robdd_depends_on_var_eq_used :\n  \"robdd_invar b \\<Longrightarrow>\n   robdd_depends_on_var v b \\<longleftrightarrow> v \\<in> robdd_used_vars b\"", "lemma robdd_depends_on_var_implies_used :\n  \"robdd_depends_on_var v b \\<Longrightarrow> v \\<in> robdd_used_vars b\"", "lemma robdd_id_map_OK_D :\n  \"\\<lbrakk>robdd_id_map_OK bs m; b \\<in> subrobdds_set bs\\<rbrakk> \\<Longrightarrow> m (robdd_get_id b) = Some b\"", "lemma robdd_id_map_properties :\nshows \"robdd_invar_ids_equal bs \\<longleftrightarrow> (robdd_id_map_OK bs (robdd_id_map bs))\"", "lemma robdd_id_map_union :\nassumes invar_ids_bs12: \"robdd_invar_ids_equal (bs1 \\<union> bs2)\"\nshows \"robdd_id_map (bs1 \\<union> bs2) = (robdd_id_map bs1) ++ (robdd_id_map bs2)\"", "lemma bool_opt_exhaust:\n  \"(y = None \\<Longrightarrow> P) \\<Longrightarrow> (y = Some True \\<Longrightarrow> P) \\<Longrightarrow> (y = Some False \\<Longrightarrow> P) \\<Longrightarrow> P\"", "lemma bope_and_code [code] :\n   \"bope_and None None = None\"\n   \"bope_and bo (Some True) = bo\"\n   \"bope_and bo (Some False) = (Some False)\"\n   \"bope_and (Some True) bo = bo\"\n   \"bope_and (Some False) bo = (Some False)\"", "lemma bope_or_code [code] :\n   \"bope_or None None = None\"\n   \"bope_or bo (Some False) = bo\"\n   \"bope_or bo (Some True) = (Some True)\"\n   \"bope_or (Some False) bo = bo\"\n   \"bope_or (Some True) bo = (Some True)\"", "lemma bope_nand_code [code] :\n   \"bope_nand None None = None\"\n   \"bope_nand bo (Some False) = (Some True)\"\n   \"bope_nand (Some False) bo = (Some True)\"\n   \"bope_nand (Some True) (Some True) = (Some False)\"\n   \"bope_nand None (Some True) = None\"\n   \"bope_nand (Some True) None = None\"", "lemma bope_nor_code [code] :\n   \"bope_nor None None = None\"\n   \"bope_nor bo (Some True) = (Some False)\"\n   \"bope_nor (Some True) bo = (Some False)\"\n   \"bope_nor (Some False) (Some False) = (Some True)\"\n   \"bope_nor None (Some False) = None\"\n   \"bope_nor (Some False) None = None\"", "lemma bope_eq_code [code] :\n   \"bope_eq None bo = None\"\n   \"bope_eq bo None = None\"\n   \"bope_eq (Some True)  (Some True)  = Some True\"\n   \"bope_eq (Some True)  (Some False) = Some False\"\n   \"bope_eq (Some False) (Some True)  = Some False\"\n   \"bope_eq (Some False) (Some False) = Some True\"", "lemma bope_xor_code [code] :\n   \"bope_xor None bo = None\"\n   \"bope_xor bo None = None\"\n   \"bope_xor (Some True)  (Some True)  = Some False\"\n   \"bope_xor (Some True)  (Some False) = Some True\"\n   \"bope_xor (Some False) (Some True)  = Some True\"\n   \"bope_xor (Some False) (Some False) = Some False\"", "lemma bope_imp_code [code] :\n   \"bope_imp None None = None\"\n   \"bope_imp None (Some True) = Some True\"\n   \"bope_imp None (Some False) = None\"\n   \"bope_imp (Some True) bo = bo\"\n   \"bope_imp (Some False) bo = (Some True)\"", "lemma rev_map_invar_empty: \n     \"rev_map_invar {} (r_empty(), 2)\"", "lemma rev_map_invarI[intro!] :\n     \"\\<lbrakk>r_invar (fst rev_map); snd rev_map > 1;\n       \\<And>b. b \\<in> subrobdds_set bs \\<Longrightarrow> robdd_invar_ext bs 0 b \\<and> robdd_get_id b < (snd rev_map);\n       \\<And>li v ri b. r_\\<alpha> (fst rev_map) (li, v, ri) = Some b \\<Longrightarrow> \n               (robdd_invar_ext bs v b \\<and> b \\<in> bs \\<and>\n                (\\<exists>l r i. b = robdd_var i l v r \\<and>  \n                         robdd_get_id l = li \\<and> robdd_get_id r = ri));\n       \\<And>i l r v. robdd_var i l v r \\<in> subrobdds_set bs \\<Longrightarrow>\n                   r_\\<alpha> (fst rev_map) (robdd_get_id l, v, robdd_get_id r) = Some (robdd_var i l v r)\\<rbrakk> \\<Longrightarrow>\n       rev_map_invar bs rev_map\"", "lemma rev_map_invar_D1 :\n  assumes \"rev_map_invar bs rev_map\"\n      and \"robdd_var i l v r \\<in> subrobdds_set bs\"\n   shows \"r_\\<alpha> (fst rev_map) (robdd_get_id l, v, robdd_get_id r) = Some (robdd_var i l v r)\"", "lemma rev_map_invar_D2 :\n  assumes \"rev_map_invar bs rev_map\"\n      and \"r_\\<alpha> (fst rev_map) (li, v, ri) = Some b\"\n   shows \"robdd_invar_ext bs v b \\<and> b \\<in> bs \\<and>\n          (\\<exists>l r i. b = robdd_var i l v r \\<and>  \n                      robdd_get_id l = li \\<and> robdd_get_id r = ri)\"", "lemma rev_map_invar_D3 :\n  assumes \"rev_map_invar bs rev_map\"\n      and \"b \\<in> subrobdds_set bs\"\n   shows \"robdd_invar_ext bs 0 b\" \"robdd_get_id b < snd (rev_map)\"", "lemma rev_map_invar_implies_invar_ids :\n     assumes invar: \"rev_map_invar bs rev_map\"\n       shows \"robdd_invar_ids bs\"", "lemma rev_map_invar_implies_invar_bs :\n     assumes invar: \"rev_map_invar bs rev_map\"\n         and b_in: \"b \\<in> subrobdds_set bs\"\n       shows \"robdd_invar b\"", "lemma rev_map_invar_implies_invar_ids_equal :\n     assumes invar: \"rev_map_invar bs rev_map\"\n       shows \"robdd_invar_ids_equal bs\"", "lemma robdd_construct_correct :\n  fixes l v r bs rev_map\n  defines \"res \\<equiv> robdd_construct rev_map l v r\"\n  defines \"rev_map' \\<equiv> (snd res)\"\n  defines \"b \\<equiv> fst res\"\n  defines \"bs' \\<equiv> insert b bs\"\n  assumes invar_rev_map: \"rev_map_invar bs rev_map\"\n      and lr_in: \"l \\<in> bs\" \"r \\<in> bs\"\n      and invar_lr: \"robdd_invar_ext bs (Suc v) l\" \"robdd_invar_ext bs (Suc v) r\"\n  shows \"robdd_invar_ext bs' v b \\<and> rev_map_invar bs' rev_map' \\<and>\n         robdd_\\<alpha> b = robdd_\\<alpha> (robdd_var 0 l v r)\"", "lemma (in -) robdd_neg_simps[code, simp] :\n     \"robdd_neg_next (robdd_leaf f) = \n         (robdd_leaf f, robdd_leaf f, 0)\"\n     \"robdd_neg_next (robdd_var i l v r) = (l, r, v)\"", "lemma (in -) robdd_apply_next_correct :\n    assumes invar_b1: \"robdd_invar_ext bs1 n1 b1\" \n        and invar_b2: \"robdd_invar_ext bs2 n2 b2\" \n        and eval: \"robdd_apply_next b1 b2 = (b1_l, b1_r, v'', b2_l, b2_r)\"\n  shows \"robdd_\\<alpha> b1_l = (\\<lambda>a. robdd_\\<alpha> b1 (a (v'' := True)))\"  (is ?T1)\n        \"robdd_\\<alpha> b1_r = (\\<lambda>a. robdd_\\<alpha> b1 (a (v'' := False)))\"  (is ?T2)\n        \"robdd_\\<alpha> b2_l = (\\<lambda>a. robdd_\\<alpha> b2 (a (v'' := True)))\"  (is ?T3)\n        \"robdd_\\<alpha> b2_r = (\\<lambda>a. robdd_\\<alpha> b2 (a (v'' := False)))\"  (is ?T4)\n        \"robdd_invar_ext bs1 (Suc v'') b1_l\"  (is ?T5)\n        \"robdd_invar_ext bs1 (Suc v'') b1_r\"  (is ?T6)\n        \"robdd_invar_ext bs2 (Suc v'') b2_l\"  (is ?T7)\n        \"robdd_invar_ext bs2 (Suc v'') b2_r\"  (is ?T8)\n        \"b1_l \\<in> subrobdds b1\" (is ?T9)\n        \"b2_l \\<in> subrobdds b2\" (is ?T10)\n        \"b1_r \\<in> subrobdds b1\" (is ?T11)\n        \"b2_r \\<in> subrobdds b2\" (is ?T12)\n        \"robdd_get_min_var b1 b2 = v''\" (is ?T13)\n        \"~(robdd_is_leaf b1 \\<and> robdd_is_leaf b2) \\<longrightarrow>\n         size_robdd b1_l + size_robdd b2_l < size_robdd b1 + size_robdd b2\" (is ?T14)\n        \"~(robdd_is_leaf b1 \\<and> robdd_is_leaf b2) \\<longrightarrow> \n         size_robdd b1_r + size_robdd b2_r < size_robdd b1 + size_robdd b2\" (is ?T15)", "lemma apply_map_invar_empty : \n    \"apply_map_invar bop bs bs1 bs2 (c_empty ())\"", "lemma apply_map_invar_I :\n    \"\\<lbrakk>c_invar apply_map;\n      \\<And>i1 i2 b. c_lookup (i1, i2) apply_map = Some b \\<Longrightarrow>\n      \\<exists>b1 b2. robdd_id_map bs1 i1 = Some b1 \\<and> robdd_id_map bs2 i2 = Some b2 \\<and>            \n                  robdd_invar_ext bs (robdd_get_min_var b1 b2) b \\<and> (\\<forall>a. robdd_\\<alpha> b a \\<longleftrightarrow> bop (robdd_\\<alpha> b1 a) (robdd_\\<alpha> b2 a))\\<rbrakk> \\<Longrightarrow>\n      apply_map_invar bop bs bs1 bs2 apply_map\"", "lemma apply_map_invar_D1 :\n    \"apply_map_invar bop bs bs1 bs2 apply_map \\<Longrightarrow> c_invar apply_map\"", "lemma apply_map_invar_D2 :\n    \"\\<lbrakk>apply_map_invar bop bs bs1 bs2 apply_map;\n      c_lookup (i1, i2) apply_map = Some b\\<rbrakk> \\<Longrightarrow>\n      \\<exists>b1 b2. robdd_id_map bs1 i1 = Some b1 \\<and> robdd_id_map bs2 i2 = Some b2 \\<and>            \n                  robdd_invar_ext bs (robdd_get_min_var b1 b2) b \\<and> (\\<forall>a. robdd_\\<alpha> b a \\<longleftrightarrow> bop (robdd_\\<alpha> b1 a) (robdd_\\<alpha> b2 a))\"", "lemma apply_map_invar_extend :\n    assumes invar: \"apply_map_invar bop bs bs1 bs2 apply_map\"\n        and bs1'_OK: \"bs1 \\<subseteq> bs1'\" \"robdd_invar_ids bs1'\" \"\\<And>b. b \\<in> bs1' \\<Longrightarrow> robdd_invar b\"\n        and bs2'_OK: \"bs2 \\<subseteq> bs2'\" \"robdd_invar_ids bs2'\" \"\\<And>b. b \\<in> bs2' \\<Longrightarrow> robdd_invar b\"\n    shows \"apply_map_invar bop bs bs1' bs2' apply_map\"", "lemma robdd_apply_correct_full :\n  fixes b1 b2 bop rev_map apply_map bs\n  defines \"res \\<equiv> robdd_apply apply_map rev_map bop b1 b2\"\n  defines \"b \\<equiv> fst res\"\n  defines \"apply_map' \\<equiv> fst (snd res)\"\n  defines \"rev_map' \\<equiv> snd (snd res)\"\n  assumes invar_rev_map: \"rev_map_invar bs rev_map\"\n      and invar_apply_map: \"apply_map_invar bop bs bs1 bs2 apply_map\"\n      and b1_invar: \"robdd_invar_ext bs1 n b1\"      \n      and b2_invar: \"robdd_invar_ext bs2 n b2\"      \n      and bs1_OK: \"\\<And>b. b \\<in> bs1 \\<Longrightarrow> robdd_invar b\"\n      and bs2_OK: \"\\<And>b. b \\<in> bs2 \\<Longrightarrow> robdd_invar b\"\n  shows \"\\<exists>bs'. \n         subrobdds b \\<union> bs \\<subseteq> bs' \\<and> \n         robdd_invar_ext bs' n b \\<and>\n         apply_map_invar bop bs' bs1 bs2 apply_map' \\<and>\n         rev_map_invar bs' rev_map' \\<and>\n         (\\<forall>a. robdd_\\<alpha> b a \\<longleftrightarrow> bop (robdd_\\<alpha> b1 a) (robdd_\\<alpha> b2 a))\"", "lemma robdd_apply_correct :\n  fixes b1 b2 bop rev_map apply_map \n  defines \"res \\<equiv> robdd_apply (c_empty ()) (r_empty (), 2) bop b1 b2\"\n  defines \"b \\<equiv> fst res\"\n  assumes b1_invar: \"robdd_invar b1\"      \n      and b2_invar: \"robdd_invar b2\"      \n  shows \"robdd_invar b \\<and> (\\<forall>a. robdd_\\<alpha> b a \\<longleftrightarrow> bop (robdd_\\<alpha> b1 a) (robdd_\\<alpha> b2 a))\"", "lemma robdd_neg_correct_full :\n  fixes b rev_map apply_map bs\n  defines \"res \\<equiv> robdd_neg apply_map rev_map b\"\n  defines \"b' \\<equiv> fst res\"\n  defines \"apply_map' \\<equiv> fst (snd res)\"\n  defines \"rev_map' \\<equiv> snd (snd res)\"\n  assumes invar_rev_map: \"rev_map_invar bs rev_map\"\n      and invar_apply_map: \"apply_map_invar (\\<lambda>b1 b2. \\<not>(b1 \\<and> b2)) bs bs1 bs2 apply_map\"\n      and b_invar: \"robdd_invar_ext bs1 n b\"      \n      and bs1_OK: \"\\<And>b. b \\<in> bs1 \\<Longrightarrow> robdd_invar b\"\n      and bs2_OK: \"\\<And>b. b \\<in> bs2 \\<Longrightarrow> robdd_invar b\" \"robdd_invar_ids bs2\"\n  shows \"\\<exists>bs'. \n         subrobdds b' \\<union> bs \\<subseteq> bs' \\<and> \n         robdd_invar_ext bs' n b' \\<and>\n         apply_map_invar (\\<lambda>b1 b2. \\<not>(b1 \\<and> b2)) bs' bs1 \n              (insert robdd_zero (insert robdd_one bs2)) apply_map' \\<and>\n         rev_map_invar bs' rev_map' \\<and>\n         (\\<forall>a. robdd_\\<alpha> b' a \\<longleftrightarrow> \\<not> (robdd_\\<alpha> b a))\"", "lemma robdd_neg_correct :\n  fixes b rev_map apply_map bs\n  defines \"res \\<equiv> robdd_neg (c_empty ()) (r_empty (), 2) b\"\n  defines \"bn \\<equiv> fst res\"\n  assumes b_invar: \"robdd_invar b\"      \n  shows \"robdd_invar bn \\<and> (\\<forall>a. robdd_\\<alpha> bn a \\<longleftrightarrow> \\<not>(robdd_\\<alpha> b a))\"", "lemma robdd_neg_alt_def :\n    \"robdd_neg apply_map rev_map b = \n      (case (bope_neg (robdd_to_bool b)) of \n         Some f \\<Rightarrow> (robdd_leaf f, apply_map, rev_map)\n       | None \\<Rightarrow> (case c_lookup (robdd_get_id b, 1) apply_map of\n            Some b3 \\<Rightarrow> (b3, apply_map, rev_map)\n          | None \\<Rightarrow> (let (l1, r1, var) = robdd_neg_next b in \n                     let (l, apply_map, rev_map) = robdd_neg apply_map rev_map l1 in\n                     let (r, apply_map, rev_map) = robdd_neg apply_map rev_map r1 in\n                     let (b3, rev_map) = robdd_construct rev_map l var r in\n                     let apply_map = c_update (robdd_get_id b, 1) b3 apply_map in\n                     (b3, apply_map, rev_map))))\"", "lemma robdd_copy_correct_full :\n  fixes b rev_map apply_map bs\n  defines \"res \\<equiv> robdd_copy apply_map rev_map b\"\n  defines \"b' \\<equiv> fst res\"\n  defines \"apply_map' \\<equiv> fst (snd res)\"\n  defines \"rev_map' \\<equiv> snd (snd res)\"\n  assumes invar_rev_map: \"rev_map_invar bs rev_map\"\n      and invar_apply_map: \"apply_map_invar (\\<lambda>b1 b2. (b1 \\<and> b2)) bs bs1 bs2 apply_map\"\n      and b_invar: \"robdd_invar_ext bs1 n b\"      \n      and bs1_OK: \"\\<And>b. b \\<in> bs1 \\<Longrightarrow> robdd_invar b\"\n      and bs2_OK: \"\\<And>b. b \\<in> bs2 \\<Longrightarrow> robdd_invar b\" \"robdd_invar_ids bs2\"\n  shows \"\\<exists>bs'. \n         subrobdds b' \\<union> bs \\<subseteq> bs' \\<and> \n         robdd_invar_ext bs' n b' \\<and>\n         apply_map_invar (\\<lambda>b1 b2. (b1 \\<and> b2)) bs' bs1 \n              (insert robdd_zero (insert robdd_one bs2)) apply_map' \\<and>\n         rev_map_invar bs' rev_map' \\<and>\n         (\\<forall>a. robdd_\\<alpha> b' a \\<longleftrightarrow> (robdd_\\<alpha> b a))\"", "lemma robdd_copy_correct :\n  fixes b rev_map apply_map bs\n  defines \"res \\<equiv> robdd_copy (c_empty ()) rev_map b\"\n  defines \"b' \\<equiv> fst res\"\n  defines \"rev_map' \\<equiv> snd (snd res)\"\n  assumes invar_rev_map: \"rev_map_invar bs rev_map\"\n      and b_invar: \"robdd_invar_ext {b} n b\"      \n  shows \"\\<exists>bs'. \n         subrobdds b' \\<union> bs \\<subseteq> bs' \\<and> \n         robdd_invar_ext bs' n b' \\<and>\n         rev_map_invar bs' rev_map' \\<and>\n         (\\<forall>a. robdd_\\<alpha> b' a \\<longleftrightarrow> (robdd_\\<alpha> b a))\"", "lemma robdd_copy_alt_def :\n    \"robdd_copy apply_map rev_map b = \n      (case (robdd_to_bool b) of \n         Some f \\<Rightarrow> (robdd_leaf f, apply_map, rev_map)\n       | None \\<Rightarrow> (case c_lookup (robdd_get_id b, 1) apply_map of\n            Some b3 \\<Rightarrow> (b3, apply_map, rev_map)\n          | None \\<Rightarrow> (let (l1, r1, var) = robdd_neg_next b in \n                     let (l, apply_map, rev_map) = robdd_copy apply_map rev_map l1 in\n                     let (r, apply_map, rev_map) = robdd_copy apply_map rev_map r1 in\n                     let (b3, rev_map) = robdd_construct rev_map l var r in\n                     let apply_map = c_update (robdd_get_id b, 1) b3 apply_map in\n                     (b3, apply_map, rev_map))))\"", "lemma restrict_map_invar_empty : \n    \"restrict_map_invar f bs (c_empty ())\"", "lemma restrict_map_invar_I :\n    \"\\<lbrakk>c_invar res_map;\n      \\<And>i v b. c_lookup (v, i) res_map = Some b \\<Longrightarrow>\n      (\\<exists>b'. robdd_id_map bs i = Some b' \\<and> b \\<in> bs \\<and>\n                robdd_invar_ext bs (robdd_get_var b') b \\<and> \n                (\\<forall>a. robdd_\\<alpha> b a \\<longleftrightarrow> robdd_\\<alpha> b' (a(v := f))))\\<rbrakk> \\<Longrightarrow>\n      restrict_map_invar f bs res_map\"", "lemma restrict_map_invar_D1 :\n    \"restrict_map_invar f bs res_map \\<Longrightarrow> c_invar res_map\"", "lemma restrict_map_invar_D2 :\n    \"\\<lbrakk>restrict_map_invar f bs res_map;\n      c_lookup (v, i) res_map = Some b\\<rbrakk> \\<Longrightarrow>\n      (\\<exists>b'. robdd_id_map bs i = Some b' \\<and> b \\<in> bs \\<and>\n                robdd_invar_ext bs (robdd_get_var b') b \\<and> \n                (\\<forall>a. robdd_\\<alpha> b a \\<longleftrightarrow> robdd_\\<alpha> b' (a(v := f))))\"", "lemma robdd_restrict_correct_full :\n  fixes b f rv rev_map res_map bs\n  defines \"res \\<equiv> robdd_restrict res_map rev_map f rv b\"\n  defines \"b' \\<equiv> fst res\"\n  defines \"res_map' \\<equiv> fst (snd res)\"\n  defines \"rev_map' \\<equiv> snd (snd res)\"\n  assumes invar_rev_map: \"rev_map_invar bs rev_map\"\n      and invar_res_map: \"restrict_map_invar f bs res_map\"\n      and b_invar: \"robdd_invar_ext bs n b\"\n      and b_sub: \"subrobdds b \\<subseteq> bs\"      \n  shows \"\\<exists>bs'. insert b' bs \\<subseteq> bs' \\<and> \n         robdd_invar_ext bs' n b' \\<and>\n         restrict_map_invar f bs' res_map' \\<and>\n         rev_map_invar bs' rev_map' \\<and>\n         (\\<forall>a. robdd_\\<alpha> b' a \\<longleftrightarrow> (robdd_\\<alpha> b (a(rv := f))))\"", "lemma inj_shift_assignement :\n  \"inj_on (shift_assignment b) S\"", "lemma list_to_assignment_set_None_simp [simp] :\n  \"list_to_assignment_set (None # l) = \n   list_to_assignment_set (Some True # l) \\<union> list_to_assignment_set (Some False # l)\"", "lemma list_to_assignment_set_simps [simp]: \n  \"list_to_assignment_set [] = UNIV\" (is ?T1)\n  \"list_to_assignment_set (Some b # l) = (shift_assignment b) ` (list_to_assignment_set l)\" (is \"?T3 b\")", "lemma infinite_list_to_assignment_set :\n  \"\\<not>(finite (list_to_assignment_set l))\"", "lemma list_to_assignment_set_not_empty :\n  \"(list_to_assignment_set l) \\<noteq> {}\"", "lemma robdd_list_\\<alpha>_correct_aux :\nassumes invar: \"robdd_invar_vars_greater n b\" \"robdd_invar_reduced b\"\nshows \"robdd_list_\\<alpha> b n l \\<longleftrightarrow> (\\<forall>a \\<in> (list_to_assignment_set l). robdd_\\<alpha> b (\\<lambda>v. a (v - n)))\"", "lemma robdd_list_\\<alpha>_correct:\nassumes b_OK: \"robdd_invar_vars b\" \"robdd_invar_reduced b\"\nshows \"robdd_list_\\<alpha> b 0 l \\<longleftrightarrow> (\\<forall>a \\<in> (list_to_assignment_set l). robdd_\\<alpha> b a)\""], "translations": [["", "lemma robdd_\\<alpha>_simps_leafs [simp] : \n  \"robdd_\\<alpha> (robdd_leaf f1) = robdd_\\<alpha> (robdd_leaf f2) \\<longleftrightarrow> (f1 = f2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (robdd_\\<alpha> (robdd_leaf f1) = robdd_\\<alpha> (robdd_leaf f2)) =\n    (f1 = f2)", "by (simp add: fun_eq_iff)"], ["", "primrec robdd_get_id :: \"robdd \\<Rightarrow> node_id\" where\n   \"robdd_get_id (robdd_leaf f) = (if f then 1 else 0)\"\n | \"robdd_get_id (robdd_var i l v r) = i\""], ["", "primrec robdd_get_var :: \"robdd \\<Rightarrow> var\" where\n   \"robdd_get_var (robdd_leaf f) = 0\"\n | \"robdd_get_var (robdd_var i l v r) = v\""], ["", "primrec robdd_get_left :: \"robdd \\<Rightarrow> robdd\" where\n   \"robdd_get_left (robdd_leaf f) = robdd_leaf f\"\n | \"robdd_get_left (robdd_var i l v r) = l\""], ["", "primrec robdd_get_right :: \"robdd \\<Rightarrow> robdd\" where\n   \"robdd_get_right (robdd_leaf f) = robdd_leaf f\"\n | \"robdd_get_right (robdd_var i l v r) = r\""], ["", "primrec robdd_to_bool :: \"robdd \\<Rightarrow> bool option\" where\n   \"robdd_to_bool (robdd_leaf f) = Some f\"\n | \"robdd_to_bool (robdd_var i l v r) = None\""], ["", "primrec robdd_is_leaf where\n   \"robdd_is_leaf (robdd_leaf _) = True\"\n | \"robdd_is_leaf (robdd_var _ _ _ _) = False\""], ["", "lemma robdd_is_leaf_alt_def :\n  \"robdd_is_leaf b \\<longleftrightarrow> (b = robdd_one \\<or> b = robdd_zero)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. robdd_is_leaf b = (b = robdd_one \\<or> b = robdd_zero)", "by (cases b) auto"], ["", "text \\<open>IDs are just used a convinience for performance reasons. Therefore,\n        we define two robdds to be equivalent if they are equal up to ids.\\<close>"], ["", "primrec robdd_equiv where\n   \"robdd_equiv (robdd_leaf f) b = (b = robdd_leaf f)\"\n | \"robdd_equiv (robdd_var i l v r) b = \n    (\\<exists>i' l' r'. b = robdd_var i' l' v r' \\<and> robdd_equiv l l' \\<and> robdd_equiv r r')\""], ["", "lemma robdd_equiv_simps[simp] :\n   \"robdd_equiv b (robdd_leaf f) = (b = robdd_leaf f)\"\n   \"robdd_equiv b b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. robdd_equiv b (robdd_leaf f) = (b = robdd_leaf f) &&& robdd_equiv b b", "by (induct b, auto)"], ["", "subsection \\<open>subrobdds\\<close>"], ["", "text \\<open>It is for later definitions important to be able to talk about all the\nrobdds that form a robdd. This leads to the definition of subrobdds.\\<close>"], ["", "primrec subrobdds :: \"robdd \\<Rightarrow> robdd set\" where\n   \"subrobdds (robdd_leaf f) = {robdd_leaf f}\"\n | \"subrobdds (robdd_var i l v r) = \n    (insert (robdd_var i l v r) (subrobdds l \\<union> subrobdds r))\""], ["", "definition subrobdds_proper :: \"robdd \\<Rightarrow> robdd set\" where\n   \"subrobdds_proper b = (subrobdds b) - {b}\""], ["", "lemma subrobdds_alt_def :\n  \"subrobdds b = insert b (subrobdds_proper b)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. subrobdds b = insert b (subrobdds_proper b)", "by (cases b) (simp_all add: subrobdds_proper_def)"], ["", "lemma subobbds_proper_size: \n  \"b1 \\<in> subrobdds_proper b2 \\<Longrightarrow> size_robdd b1 < size_robdd b2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. b1 \\<in> subrobdds_proper b2 \\<Longrightarrow>\n    size_robdd b1 < size_robdd b2", "proof (induct b2 arbitrary: b1)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x b1.\n       b1 \\<in> subrobdds_proper (robdd_leaf x) \\<Longrightarrow>\n       size_robdd b1 < size_robdd (robdd_leaf x)\n 2. \\<And>x1a b21 x3 b22 b1.\n       \\<lbrakk>\\<And>b1.\n                   b1 \\<in> subrobdds_proper b21 \\<Longrightarrow>\n                   size_robdd b1 < size_robdd b21;\n        \\<And>b1.\n           b1 \\<in> subrobdds_proper b22 \\<Longrightarrow>\n           size_robdd b1 < size_robdd b22;\n        b1 \\<in> subrobdds_proper (robdd_var x1a b21 x3 b22)\\<rbrakk>\n       \\<Longrightarrow> size_robdd b1\n                         < size_robdd (robdd_var x1a b21 x3 b22)", "case (robdd_leaf f)"], ["proof (state)\nthis:\n  b1 \\<in> subrobdds_proper (robdd_leaf f)\n\ngoal (2 subgoals):\n 1. \\<And>x b1.\n       b1 \\<in> subrobdds_proper (robdd_leaf x) \\<Longrightarrow>\n       size_robdd b1 < size_robdd (robdd_leaf x)\n 2. \\<And>x1a b21 x3 b22 b1.\n       \\<lbrakk>\\<And>b1.\n                   b1 \\<in> subrobdds_proper b21 \\<Longrightarrow>\n                   size_robdd b1 < size_robdd b21;\n        \\<And>b1.\n           b1 \\<in> subrobdds_proper b22 \\<Longrightarrow>\n           size_robdd b1 < size_robdd b22;\n        b1 \\<in> subrobdds_proper (robdd_var x1a b21 x3 b22)\\<rbrakk>\n       \\<Longrightarrow> size_robdd b1\n                         < size_robdd (robdd_var x1a b21 x3 b22)", "thus ?case"], ["proof (prove)\nusing this:\n  b1 \\<in> subrobdds_proper (robdd_leaf f)\n\ngoal (1 subgoal):\n 1. size_robdd b1 < size_robdd (robdd_leaf f)", "by (simp add: subrobdds_proper_def)"], ["proof (state)\nthis:\n  size_robdd b1 < size_robdd (robdd_leaf f)\n\ngoal (1 subgoal):\n 1. \\<And>x1a b21 x3 b22 b1.\n       \\<lbrakk>\\<And>b1.\n                   b1 \\<in> subrobdds_proper b21 \\<Longrightarrow>\n                   size_robdd b1 < size_robdd b21;\n        \\<And>b1.\n           b1 \\<in> subrobdds_proper b22 \\<Longrightarrow>\n           size_robdd b1 < size_robdd b22;\n        b1 \\<in> subrobdds_proper (robdd_var x1a b21 x3 b22)\\<rbrakk>\n       \\<Longrightarrow> size_robdd b1\n                         < size_robdd (robdd_var x1a b21 x3 b22)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x1a b21 x3 b22 b1.\n       \\<lbrakk>\\<And>b1.\n                   b1 \\<in> subrobdds_proper b21 \\<Longrightarrow>\n                   size_robdd b1 < size_robdd b21;\n        \\<And>b1.\n           b1 \\<in> subrobdds_proper b22 \\<Longrightarrow>\n           size_robdd b1 < size_robdd b22;\n        b1 \\<in> subrobdds_proper (robdd_var x1a b21 x3 b22)\\<rbrakk>\n       \\<Longrightarrow> size_robdd b1\n                         < size_robdd (robdd_var x1a b21 x3 b22)", "case (robdd_var i l v r)"], ["proof (state)\nthis:\n  ?b1.0 \\<in> subrobdds_proper l \\<Longrightarrow>\n  size_robdd ?b1.0 < size_robdd l\n  ?b1.0 \\<in> subrobdds_proper r \\<Longrightarrow>\n  size_robdd ?b1.0 < size_robdd r\n  b1 \\<in> subrobdds_proper (robdd_var i l v r)\n\ngoal (1 subgoal):\n 1. \\<And>x1a b21 x3 b22 b1.\n       \\<lbrakk>\\<And>b1.\n                   b1 \\<in> subrobdds_proper b21 \\<Longrightarrow>\n                   size_robdd b1 < size_robdd b21;\n        \\<And>b1.\n           b1 \\<in> subrobdds_proper b22 \\<Longrightarrow>\n           size_robdd b1 < size_robdd b22;\n        b1 \\<in> subrobdds_proper (robdd_var x1a b21 x3 b22)\\<rbrakk>\n       \\<Longrightarrow> size_robdd b1\n                         < size_robdd (robdd_var x1a b21 x3 b22)", "note indhyp_l = robdd_var(1)"], ["proof (state)\nthis:\n  ?b1.0 \\<in> subrobdds_proper l \\<Longrightarrow>\n  size_robdd ?b1.0 < size_robdd l\n\ngoal (1 subgoal):\n 1. \\<And>x1a b21 x3 b22 b1.\n       \\<lbrakk>\\<And>b1.\n                   b1 \\<in> subrobdds_proper b21 \\<Longrightarrow>\n                   size_robdd b1 < size_robdd b21;\n        \\<And>b1.\n           b1 \\<in> subrobdds_proper b22 \\<Longrightarrow>\n           size_robdd b1 < size_robdd b22;\n        b1 \\<in> subrobdds_proper (robdd_var x1a b21 x3 b22)\\<rbrakk>\n       \\<Longrightarrow> size_robdd b1\n                         < size_robdd (robdd_var x1a b21 x3 b22)", "note indhyp_r = robdd_var(2)"], ["proof (state)\nthis:\n  ?b1.0 \\<in> subrobdds_proper r \\<Longrightarrow>\n  size_robdd ?b1.0 < size_robdd r\n\ngoal (1 subgoal):\n 1. \\<And>x1a b21 x3 b22 b1.\n       \\<lbrakk>\\<And>b1.\n                   b1 \\<in> subrobdds_proper b21 \\<Longrightarrow>\n                   size_robdd b1 < size_robdd b21;\n        \\<And>b1.\n           b1 \\<in> subrobdds_proper b22 \\<Longrightarrow>\n           size_robdd b1 < size_robdd b22;\n        b1 \\<in> subrobdds_proper (robdd_var x1a b21 x3 b22)\\<rbrakk>\n       \\<Longrightarrow> size_robdd b1\n                         < size_robdd (robdd_var x1a b21 x3 b22)", "from robdd_var(3)"], ["proof (chain)\npicking this:\n  b1 \\<in> subrobdds_proper (robdd_var i l v r)", "have b1_in_cases: \"b1 \\<in> subrobdds l \\<or> b1 \\<in> subrobdds r\""], ["proof (prove)\nusing this:\n  b1 \\<in> subrobdds_proper (robdd_var i l v r)\n\ngoal (1 subgoal):\n 1. b1 \\<in> subrobdds l \\<or> b1 \\<in> subrobdds r", "by (simp add: subrobdds_proper_def)"], ["proof (state)\nthis:\n  b1 \\<in> subrobdds l \\<or> b1 \\<in> subrobdds r\n\ngoal (1 subgoal):\n 1. \\<And>x1a b21 x3 b22 b1.\n       \\<lbrakk>\\<And>b1.\n                   b1 \\<in> subrobdds_proper b21 \\<Longrightarrow>\n                   size_robdd b1 < size_robdd b21;\n        \\<And>b1.\n           b1 \\<in> subrobdds_proper b22 \\<Longrightarrow>\n           size_robdd b1 < size_robdd b22;\n        b1 \\<in> subrobdds_proper (robdd_var x1a b21 x3 b22)\\<rbrakk>\n       \\<Longrightarrow> size_robdd b1\n                         < size_robdd (robdd_var x1a b21 x3 b22)", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. size_robdd b1 < size_robdd (robdd_var i l v r)", "proof (cases \"b1 \\<in> subrobdds l\")"], ["proof (state)\ngoal (2 subgoals):\n 1. b1 \\<in> subrobdds l \\<Longrightarrow>\n    size_robdd b1 < size_robdd (robdd_var i l v r)\n 2. b1 \\<notin> subrobdds l \\<Longrightarrow>\n    size_robdd b1 < size_robdd (robdd_var i l v r)", "case True"], ["proof (state)\nthis:\n  b1 \\<in> subrobdds l\n\ngoal (2 subgoals):\n 1. b1 \\<in> subrobdds l \\<Longrightarrow>\n    size_robdd b1 < size_robdd (robdd_var i l v r)\n 2. b1 \\<notin> subrobdds l \\<Longrightarrow>\n    size_robdd b1 < size_robdd (robdd_var i l v r)", "with indhyp_l[of b1]"], ["proof (chain)\npicking this:\n  b1 \\<in> subrobdds_proper l \\<Longrightarrow> size_robdd b1 < size_robdd l\n  b1 \\<in> subrobdds l", "show ?thesis"], ["proof (prove)\nusing this:\n  b1 \\<in> subrobdds_proper l \\<Longrightarrow> size_robdd b1 < size_robdd l\n  b1 \\<in> subrobdds l\n\ngoal (1 subgoal):\n 1. size_robdd b1 < size_robdd (robdd_var i l v r)", "apply (cases \"b1 = l\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>b1 \\<in> subrobdds_proper l \\<Longrightarrow>\n             size_robdd b1 < size_robdd l;\n     b1 \\<in> subrobdds l; b1 = l\\<rbrakk>\n    \\<Longrightarrow> size_robdd b1 < size_robdd (robdd_var i l v r)\n 2. \\<lbrakk>b1 \\<in> subrobdds_proper l \\<Longrightarrow>\n             size_robdd b1 < size_robdd l;\n     b1 \\<in> subrobdds l; b1 \\<noteq> l\\<rbrakk>\n    \\<Longrightarrow> size_robdd b1 < size_robdd (robdd_var i l v r)", "apply (simp_all add: subrobdds_proper_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  size_robdd b1 < size_robdd (robdd_var i l v r)\n\ngoal (1 subgoal):\n 1. b1 \\<notin> subrobdds l \\<Longrightarrow>\n    size_robdd b1 < size_robdd (robdd_var i l v r)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. b1 \\<notin> subrobdds l \\<Longrightarrow>\n    size_robdd b1 < size_robdd (robdd_var i l v r)", "case False"], ["proof (state)\nthis:\n  b1 \\<notin> subrobdds l\n\ngoal (1 subgoal):\n 1. b1 \\<notin> subrobdds l \\<Longrightarrow>\n    size_robdd b1 < size_robdd (robdd_var i l v r)", "with b1_in_cases"], ["proof (chain)\npicking this:\n  b1 \\<in> subrobdds l \\<or> b1 \\<in> subrobdds r\n  b1 \\<notin> subrobdds l", "have \"b1 \\<in> subrobdds r\""], ["proof (prove)\nusing this:\n  b1 \\<in> subrobdds l \\<or> b1 \\<in> subrobdds r\n  b1 \\<notin> subrobdds l\n\ngoal (1 subgoal):\n 1. b1 \\<in> subrobdds r", "by blast"], ["proof (state)\nthis:\n  b1 \\<in> subrobdds r\n\ngoal (1 subgoal):\n 1. b1 \\<notin> subrobdds l \\<Longrightarrow>\n    size_robdd b1 < size_robdd (robdd_var i l v r)", "with indhyp_r[of b1]"], ["proof (chain)\npicking this:\n  b1 \\<in> subrobdds_proper r \\<Longrightarrow> size_robdd b1 < size_robdd r\n  b1 \\<in> subrobdds r", "show ?thesis"], ["proof (prove)\nusing this:\n  b1 \\<in> subrobdds_proper r \\<Longrightarrow> size_robdd b1 < size_robdd r\n  b1 \\<in> subrobdds r\n\ngoal (1 subgoal):\n 1. size_robdd b1 < size_robdd (robdd_var i l v r)", "apply (cases \"b1 = r\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>b1 \\<in> subrobdds_proper r \\<Longrightarrow>\n             size_robdd b1 < size_robdd r;\n     b1 \\<in> subrobdds r; b1 = r\\<rbrakk>\n    \\<Longrightarrow> size_robdd b1 < size_robdd (robdd_var i l v r)\n 2. \\<lbrakk>b1 \\<in> subrobdds_proper r \\<Longrightarrow>\n             size_robdd b1 < size_robdd r;\n     b1 \\<in> subrobdds r; b1 \\<noteq> r\\<rbrakk>\n    \\<Longrightarrow> size_robdd b1 < size_robdd (robdd_var i l v r)", "apply (simp_all add: subrobdds_proper_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  size_robdd b1 < size_robdd (robdd_var i l v r)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  size_robdd b1 < size_robdd (robdd_var i l v r)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma subrobdds_size: \n  \"b1 \\<in> subrobdds b2 \\<Longrightarrow> size_robdd b1 \\<le> size_robdd b2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. b1 \\<in> subrobdds b2 \\<Longrightarrow>\n    size_robdd b1 \\<le> size_robdd b2", "unfolding subrobdds_alt_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. b1 \\<in> insert b2 (subrobdds_proper b2) \\<Longrightarrow>\n    size_robdd b1 \\<le> size_robdd b2", "by simp (metis le_eq_less_or_eq subobbds_proper_size)"], ["", "lemma subrobdds_refl[simp]:  \"b \\<in> subrobdds b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. b \\<in> subrobdds b", "by (simp add: subrobdds_alt_def)"], ["", "lemma subrobdds_antisym:  \n  \"b1 \\<in> subrobdds b2 \\<Longrightarrow> b2 \\<in> subrobdds b1 \\<Longrightarrow> b1 = b2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>b1 \\<in> subrobdds b2; b2 \\<in> subrobdds b1\\<rbrakk>\n    \\<Longrightarrow> b1 = b2", "apply (cases \"b1 = b2\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>b1 \\<in> subrobdds b2; b2 \\<in> subrobdds b1; b1 = b2\\<rbrakk>\n    \\<Longrightarrow> b1 = b2\n 2. \\<lbrakk>b1 \\<in> subrobdds b2; b2 \\<in> subrobdds b1;\n     b1 \\<noteq> b2\\<rbrakk>\n    \\<Longrightarrow> b1 = b2", "apply (simp_all add: subrobdds_alt_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>b1 \\<in> subrobdds_proper b2; b2 \\<in> subrobdds_proper b1;\n     b1 \\<noteq> b2\\<rbrakk>\n    \\<Longrightarrow> False", "apply (metis order_less_asym' subobbds_proper_size)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma subrobdds_trans :  \n  \"b1 \\<in> subrobdds b2 \\<Longrightarrow> b2 \\<in> subrobdds b3 \\<Longrightarrow> b1 \\<in> subrobdds b3\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>b1 \\<in> subrobdds b2; b2 \\<in> subrobdds b3\\<rbrakk>\n    \\<Longrightarrow> b1 \\<in> subrobdds b3", "apply (induct b3 arbitrary: b1 b2)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x b1 b2.\n       \\<lbrakk>b1 \\<in> subrobdds b2;\n        b2 \\<in> subrobdds (robdd_leaf x)\\<rbrakk>\n       \\<Longrightarrow> b1 \\<in> subrobdds (robdd_leaf x)\n 2. \\<And>x1a b31 x3 b32 b1 b2.\n       \\<lbrakk>\\<And>b1 b2.\n                   \\<lbrakk>b1 \\<in> subrobdds b2;\n                    b2 \\<in> subrobdds b31\\<rbrakk>\n                   \\<Longrightarrow> b1 \\<in> subrobdds b31;\n        \\<And>b1 b2.\n           \\<lbrakk>b1 \\<in> subrobdds b2; b2 \\<in> subrobdds b32\\<rbrakk>\n           \\<Longrightarrow> b1 \\<in> subrobdds b32;\n        b1 \\<in> subrobdds b2;\n        b2 \\<in> subrobdds (robdd_var x1a b31 x3 b32)\\<rbrakk>\n       \\<Longrightarrow> b1 \\<in> subrobdds (robdd_var x1a b31 x3 b32)", "apply (simp_all)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x1a b31 x3 b32 b1 b2.\n       \\<lbrakk>\\<And>b1 b2.\n                   \\<lbrakk>b1 \\<in> subrobdds b2;\n                    b2 \\<in> subrobdds b31\\<rbrakk>\n                   \\<Longrightarrow> b1 \\<in> subrobdds b31;\n        \\<And>b1 b2.\n           \\<lbrakk>b1 \\<in> subrobdds b2; b2 \\<in> subrobdds b32\\<rbrakk>\n           \\<Longrightarrow> b1 \\<in> subrobdds b32;\n        b1 \\<in> subrobdds b2;\n        b2 = robdd_var x1a b31 x3 b32 \\<or>\n        b2 \\<in> subrobdds b31 \\<or> b2 \\<in> subrobdds b32\\<rbrakk>\n       \\<Longrightarrow> b1 = robdd_var x1a b31 x3 b32 \\<or>\n                         b1 \\<in> subrobdds b31 \\<or> b1 \\<in> subrobdds b32", "apply (elim disjE)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>x1a b31 x3 b32 b1 b2.\n       \\<lbrakk>\\<And>b1 b2.\n                   \\<lbrakk>b1 \\<in> subrobdds b2;\n                    b2 \\<in> subrobdds b31\\<rbrakk>\n                   \\<Longrightarrow> b1 \\<in> subrobdds b31;\n        \\<And>b1 b2.\n           \\<lbrakk>b1 \\<in> subrobdds b2; b2 \\<in> subrobdds b32\\<rbrakk>\n           \\<Longrightarrow> b1 \\<in> subrobdds b32;\n        b1 \\<in> subrobdds b2; b2 = robdd_var x1a b31 x3 b32\\<rbrakk>\n       \\<Longrightarrow> b1 = robdd_var x1a b31 x3 b32 \\<or>\n                         b1 \\<in> subrobdds b31 \\<or> b1 \\<in> subrobdds b32\n 2. \\<And>x1a b31 x3 b32 b1 b2.\n       \\<lbrakk>\\<And>b1 b2.\n                   \\<lbrakk>b1 \\<in> subrobdds b2;\n                    b2 \\<in> subrobdds b31\\<rbrakk>\n                   \\<Longrightarrow> b1 \\<in> subrobdds b31;\n        \\<And>b1 b2.\n           \\<lbrakk>b1 \\<in> subrobdds b2; b2 \\<in> subrobdds b32\\<rbrakk>\n           \\<Longrightarrow> b1 \\<in> subrobdds b32;\n        b1 \\<in> subrobdds b2; b2 \\<in> subrobdds b31\\<rbrakk>\n       \\<Longrightarrow> b1 = robdd_var x1a b31 x3 b32 \\<or>\n                         b1 \\<in> subrobdds b31 \\<or> b1 \\<in> subrobdds b32\n 3. \\<And>x1a b31 x3 b32 b1 b2.\n       \\<lbrakk>\\<And>b1 b2.\n                   \\<lbrakk>b1 \\<in> subrobdds b2;\n                    b2 \\<in> subrobdds b31\\<rbrakk>\n                   \\<Longrightarrow> b1 \\<in> subrobdds b31;\n        \\<And>b1 b2.\n           \\<lbrakk>b1 \\<in> subrobdds b2; b2 \\<in> subrobdds b32\\<rbrakk>\n           \\<Longrightarrow> b1 \\<in> subrobdds b32;\n        b1 \\<in> subrobdds b2; b2 \\<in> subrobdds b32\\<rbrakk>\n       \\<Longrightarrow> b1 = robdd_var x1a b31 x3 b32 \\<or>\n                         b1 \\<in> subrobdds b31 \\<or> b1 \\<in> subrobdds b32", "apply (simp_all)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma subrobdds_proper_simps [simp] :\n   \"subrobdds_proper (robdd_leaf f) = {}\"\n   \"subrobdds_proper (robdd_var i l v r) = \n    (insert l (insert r (subrobdds_proper l \\<union> subrobdds_proper r)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. subrobdds_proper (robdd_leaf f) = {} &&&\n    subrobdds_proper (robdd_var i l v r) =\n    insert l (insert r (subrobdds_proper l \\<union> subrobdds_proper r))", "proof -"], ["proof (state)\ngoal (2 subgoals):\n 1. subrobdds_proper (robdd_leaf f) = {}\n 2. subrobdds_proper (robdd_var i l v r) =\n    insert l (insert r (subrobdds_proper l \\<union> subrobdds_proper r))", "show \"subrobdds_proper (robdd_leaf f) = {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. subrobdds_proper (robdd_leaf f) = {}", "by (simp_all add: subrobdds_proper_def)"], ["proof (state)\nthis:\n  subrobdds_proper (robdd_leaf f) = {}\n\ngoal (1 subgoal):\n 1. subrobdds_proper (robdd_var i l v r) =\n    insert l (insert r (subrobdds_proper l \\<union> subrobdds_proper r))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. subrobdds_proper (robdd_var i l v r) =\n    insert l (insert r (subrobdds_proper l \\<union> subrobdds_proper r))", "have \"subrobdds_proper (robdd_var i l v r) = subrobdds l \\<union> subrobdds r - {robdd_var i l v r}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. subrobdds_proper (robdd_var i l v r) =\n    subrobdds l \\<union> subrobdds r - {robdd_var i l v r}", "by (simp add: subrobdds_proper_def)"], ["proof (state)\nthis:\n  subrobdds_proper (robdd_var i l v r) =\n  subrobdds l \\<union> subrobdds r - {robdd_var i l v r}\n\ngoal (1 subgoal):\n 1. subrobdds_proper (robdd_var i l v r) =\n    insert l (insert r (subrobdds_proper l \\<union> subrobdds_proper r))", "also"], ["proof (state)\nthis:\n  subrobdds_proper (robdd_var i l v r) =\n  subrobdds l \\<union> subrobdds r - {robdd_var i l v r}\n\ngoal (1 subgoal):\n 1. subrobdds_proper (robdd_var i l v r) =\n    insert l (insert r (subrobdds_proper l \\<union> subrobdds_proper r))", "have \"... = subrobdds l \\<union> subrobdds r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. subrobdds l \\<union> subrobdds r - {robdd_var i l v r} =\n    subrobdds l \\<union> subrobdds r", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. subrobdds l \\<union> subrobdds r - {robdd_var i l v r} =\n    subrobdds l \\<union> subrobdds r", "from subrobdds_size [of \"robdd_var i l v r\" l] subrobdds_size [of \"robdd_var i l v r\" r]"], ["proof (chain)\npicking this:\n  robdd_var i l v r \\<in> subrobdds l \\<Longrightarrow>\n  size_robdd (robdd_var i l v r) \\<le> size_robdd l\n  robdd_var i l v r \\<in> subrobdds r \\<Longrightarrow>\n  size_robdd (robdd_var i l v r) \\<le> size_robdd r", "have \"robdd_var i l v r \\<notin> subrobdds l\" \"robdd_var i l v r \\<notin> subrobdds r\""], ["proof (prove)\nusing this:\n  robdd_var i l v r \\<in> subrobdds l \\<Longrightarrow>\n  size_robdd (robdd_var i l v r) \\<le> size_robdd l\n  robdd_var i l v r \\<in> subrobdds r \\<Longrightarrow>\n  size_robdd (robdd_var i l v r) \\<le> size_robdd r\n\ngoal (1 subgoal):\n 1. robdd_var i l v r \\<notin> subrobdds l &&&\n    robdd_var i l v r \\<notin> subrobdds r", "by auto"], ["proof (state)\nthis:\n  robdd_var i l v r \\<notin> subrobdds l\n  robdd_var i l v r \\<notin> subrobdds r\n\ngoal (1 subgoal):\n 1. subrobdds l \\<union> subrobdds r - {robdd_var i l v r} =\n    subrobdds l \\<union> subrobdds r", "thus ?thesis"], ["proof (prove)\nusing this:\n  robdd_var i l v r \\<notin> subrobdds l\n  robdd_var i l v r \\<notin> subrobdds r\n\ngoal (1 subgoal):\n 1. subrobdds l \\<union> subrobdds r - {robdd_var i l v r} =\n    subrobdds l \\<union> subrobdds r", "by auto"], ["proof (state)\nthis:\n  subrobdds l \\<union> subrobdds r - {robdd_var i l v r} =\n  subrobdds l \\<union> subrobdds r\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  subrobdds l \\<union> subrobdds r - {robdd_var i l v r} =\n  subrobdds l \\<union> subrobdds r\n\ngoal (1 subgoal):\n 1. subrobdds_proper (robdd_var i l v r) =\n    insert l (insert r (subrobdds_proper l \\<union> subrobdds_proper r))", "also"], ["proof (state)\nthis:\n  subrobdds l \\<union> subrobdds r - {robdd_var i l v r} =\n  subrobdds l \\<union> subrobdds r\n\ngoal (1 subgoal):\n 1. subrobdds_proper (robdd_var i l v r) =\n    insert l (insert r (subrobdds_proper l \\<union> subrobdds_proper r))", "have \"... = (insert l (insert r (subrobdds_proper l \\<union> subrobdds_proper r)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. subrobdds l \\<union> subrobdds r =\n    insert l (insert r (subrobdds_proper l \\<union> subrobdds_proper r))", "by (auto simp add: subrobdds_proper_def)"], ["proof (state)\nthis:\n  subrobdds l \\<union> subrobdds r =\n  insert l (insert r (subrobdds_proper l \\<union> subrobdds_proper r))\n\ngoal (1 subgoal):\n 1. subrobdds_proper (robdd_var i l v r) =\n    insert l (insert r (subrobdds_proper l \\<union> subrobdds_proper r))", "finally"], ["proof (chain)\npicking this:\n  subrobdds_proper (robdd_var i l v r) =\n  insert l (insert r (subrobdds_proper l \\<union> subrobdds_proper r))", "show \"subrobdds_proper (robdd_var i l v r) = \n        (insert l (insert r (subrobdds_proper l \\<union> subrobdds_proper r)))\""], ["proof (prove)\nusing this:\n  subrobdds_proper (robdd_var i l v r) =\n  insert l (insert r (subrobdds_proper l \\<union> subrobdds_proper r))\n\ngoal (1 subgoal):\n 1. subrobdds_proper (robdd_var i l v r) =\n    insert l (insert r (subrobdds_proper l \\<union> subrobdds_proper r))", "."], ["proof (state)\nthis:\n  subrobdds_proper (robdd_var i l v r) =\n  insert l (insert r (subrobdds_proper l \\<union> subrobdds_proper r))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma subrobdds_subset_simp :\n  \"subrobdds b1 \\<subseteq> subrobdds b2 \\<longleftrightarrow> b1 \\<in> subrobdds b2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (subrobdds b1 \\<subseteq> subrobdds b2) = (b1 \\<in> subrobdds b2)", "by (metis subrobdds_refl subrobdds_trans subset_iff)"], ["", "definition subrobdds_set where\n  \"subrobdds_set bs = \\<Union>(subrobdds ` bs)\""], ["", "lemma subrobdds_set_simps [simp] :\n  \"subrobdds_set {} = {}\"\n  \"subrobdds_set (insert b bs) = subrobdds b \\<union> subrobdds_set bs\"\n  \"subrobdds_set (bs1 \\<union> bs2) = subrobdds_set bs1 \\<union> subrobdds_set bs2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. subrobdds_set {} = {} &&&\n    subrobdds_set (insert b bs) = subrobdds b \\<union> subrobdds_set bs &&&\n    subrobdds_set (bs1 \\<union> bs2) =\n    subrobdds_set bs1 \\<union> subrobdds_set bs2", "unfolding subrobdds_set_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Union> (subrobdds ` {}) = {} &&&\n    \\<Union> (subrobdds ` insert b bs) =\n    subrobdds b \\<union> \\<Union> (subrobdds ` bs) &&&\n    \\<Union> (subrobdds ` (bs1 \\<union> bs2)) =\n    \\<Union> (subrobdds ` bs1) \\<union> \\<Union> (subrobdds ` bs2)", "by simp_all"], ["", "lemma subrobdds_set_subset_simp :\n  \"subrobdds b \\<subseteq> subrobdds_set bs \\<longleftrightarrow> b \\<in> subrobdds_set bs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (subrobdds b \\<subseteq> subrobdds_set bs) = (b \\<in> subrobdds_set bs)", "unfolding subrobdds_set_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (subrobdds b \\<subseteq> \\<Union> (subrobdds ` bs)) =\n    (b \\<in> \\<Union> (subrobdds ` bs))", "by (auto simp add: subset_iff dest: subrobdds_trans)"], ["", "lemma subrobdds_set_idempot [simp] :\n  \"subrobdds_set (subrobdds_set bs) = subrobdds_set bs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. subrobdds_set (subrobdds_set bs) = subrobdds_set bs", "unfolding subrobdds_set_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Union> (subrobdds ` \\<Union> (subrobdds ` bs)) =\n    \\<Union> (subrobdds ` bs)", "by (auto dest: subrobdds_trans intro: subrobdds_refl)"], ["", "lemma subrobdds_set_idempot2 [simp] :\n  \"subrobdds_set (subrobdds b) = subrobdds b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. subrobdds_set (subrobdds b) = subrobdds b", "using subrobdds_set_idempot[of \"{b}\"]"], ["proof (prove)\nusing this:\n  subrobdds_set (subrobdds_set {b}) = subrobdds_set {b}\n\ngoal (1 subgoal):\n 1. subrobdds_set (subrobdds b) = subrobdds b", "by simp"], ["", "lemma subrobdds_set_mono :\n  \"bs \\<subseteq> subrobdds_set bs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. bs \\<subseteq> subrobdds_set bs", "unfolding subrobdds_set_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. bs \\<subseteq> \\<Union> (subrobdds ` bs)", "by auto"], ["", "lemma subrobdds_set_mono2 :\n  \"bs1 \\<subseteq> bs2 \\<Longrightarrow> (subrobdds_set bs1 \\<subseteq> subrobdds_set bs2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. bs1 \\<subseteq> bs2 \\<Longrightarrow>\n    subrobdds_set bs1 \\<subseteq> subrobdds_set bs2", "unfolding subrobdds_set_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. bs1 \\<subseteq> bs2 \\<Longrightarrow>\n    \\<Union> (subrobdds ` bs1) \\<subseteq> \\<Union> (subrobdds ` bs2)", "by auto"], ["", "subsection \\<open>Invariants\\<close>"], ["", "subsubsection \\<open>IDs\\<close>"], ["", "text \\<open>Ids are just added for convienience and performance. Two ROBDDs should have\nthe same id if and only if they have the same semantics. This way, the equivalence check\nof ROBDDs can be reduced to an equality check of ids.\\<close>"], ["", "definition robdd_invar_ids where\n  \"robdd_invar_ids bs =\n   (\\<forall>b1 b2. (b1 \\<in> subrobdds_set bs \\<and> b2 \\<in> subrobdds_set bs) \\<longrightarrow>\n              ((robdd_\\<alpha> b1 = robdd_\\<alpha> b2) \\<longleftrightarrow> robdd_get_id b1 = robdd_get_id b2))\""], ["", "text \\<open>leafs can often be implicitly added\\<close>"], ["", "definition robdd_invar_ids_leafs where\n  \"robdd_invar_ids_leafs bs =\n   (\\<forall>b f. (b \\<in> subrobdds_set bs) \\<longrightarrow>\n          ((robdd_\\<alpha> b = robdd_\\<alpha> (robdd_leaf f)) \\<longleftrightarrow> robdd_get_id b = robdd_get_id (robdd_leaf f)))\""], ["", "definition robdd_invar_ids_full where\n  \"robdd_invar_ids_full bs \\<equiv>\n   robdd_invar_ids bs \\<and> robdd_invar_ids_leafs bs\""], ["", "lemma robdd_invar_ids_full_alt_def :\n  \"robdd_invar_ids_full bs =\n   robdd_invar_ids (insert robdd_zero (insert robdd_one bs))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. robdd_invar_ids_full bs =\n    robdd_invar_ids (insert robdd_zero (insert robdd_one bs))", "unfolding robdd_invar_ids_full_def robdd_invar_ids_def robdd_invar_ids_leafs_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. ((\\<forall>b1 b2.\n         b1 \\<in> subrobdds_set bs \\<and>\n         b2 \\<in> subrobdds_set bs \\<longrightarrow>\n         (robdd_\\<alpha> b1 = robdd_\\<alpha> b2) =\n         (robdd_get_id b1 = robdd_get_id b2)) \\<and>\n     (\\<forall>b f.\n         b \\<in> subrobdds_set bs \\<longrightarrow>\n         (robdd_\\<alpha> b = robdd_\\<alpha> (robdd_leaf f)) =\n         (robdd_get_id b = robdd_get_id (robdd_leaf f)))) =\n    (\\<forall>b1 b2.\n        b1 \\<in> subrobdds_set\n                  (insert robdd_zero (insert robdd_one bs)) \\<and>\n        b2 \\<in> subrobdds_set\n                  (insert robdd_zero\n                    (insert robdd_one bs)) \\<longrightarrow>\n        (robdd_\\<alpha> b1 = robdd_\\<alpha> b2) =\n        (robdd_get_id b1 = robdd_get_id b2))", "apply (simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. ((\\<forall>b1 b2.\n         b1 \\<in> subrobdds_set bs \\<and>\n         b2 \\<in> subrobdds_set bs \\<longrightarrow>\n         (robdd_\\<alpha> b1 = robdd_\\<alpha> b2) =\n         (robdd_get_id b1 = robdd_get_id b2)) \\<and>\n     (\\<forall>b.\n         b \\<in> subrobdds_set bs \\<longrightarrow>\n         (\\<forall>f.\n             (f \\<longrightarrow>\n              (robdd_\\<alpha> b = robdd_\\<alpha> robdd_one) =\n              (robdd_get_id b = Suc 0)) \\<and>\n             (\\<not> f \\<longrightarrow>\n              (robdd_\\<alpha> b = robdd_\\<alpha> robdd_zero) =\n              (robdd_get_id b = 0))))) =\n    (\\<forall>b1 b2.\n        (b1 = robdd_one \\<or>\n         b1 = robdd_zero \\<or> b1 \\<in> subrobdds_set bs) \\<and>\n        (b2 = robdd_one \\<or>\n         b2 = robdd_zero \\<or> b2 \\<in> subrobdds_set bs) \\<longrightarrow>\n        (robdd_\\<alpha> b1 = robdd_\\<alpha> b2) =\n        (robdd_get_id b1 = robdd_get_id b2))", "apply (intro iffI allI impI, elim conjE impE disjE)"], ["proof (prove)\ngoal (11 subgoals):\n 1. \\<And>b1 b2.\n       \\<lbrakk>robdd_\\<alpha> b1 = robdd_\\<alpha> b2;\n        \\<forall>b1 b2.\n           b1 \\<in> subrobdds_set bs \\<and>\n           b2 \\<in> subrobdds_set bs \\<longrightarrow>\n           (robdd_\\<alpha> b1 = robdd_\\<alpha> b2) =\n           (robdd_get_id b1 = robdd_get_id b2);\n        \\<forall>b.\n           b \\<in> subrobdds_set bs \\<longrightarrow>\n           (\\<forall>f.\n               (f \\<longrightarrow>\n                (robdd_\\<alpha> b = robdd_\\<alpha> robdd_one) =\n                (robdd_get_id b = Suc 0)) \\<and>\n               (\\<not> f \\<longrightarrow>\n                (robdd_\\<alpha> b = robdd_\\<alpha> robdd_zero) =\n                (robdd_get_id b = 0)));\n        b1 = robdd_one; b2 = robdd_one\\<rbrakk>\n       \\<Longrightarrow> robdd_get_id b1 = robdd_get_id b2\n 2. \\<And>b1 b2.\n       \\<lbrakk>robdd_\\<alpha> b1 = robdd_\\<alpha> b2;\n        \\<forall>b1 b2.\n           b1 \\<in> subrobdds_set bs \\<and>\n           b2 \\<in> subrobdds_set bs \\<longrightarrow>\n           (robdd_\\<alpha> b1 = robdd_\\<alpha> b2) =\n           (robdd_get_id b1 = robdd_get_id b2);\n        \\<forall>b.\n           b \\<in> subrobdds_set bs \\<longrightarrow>\n           (\\<forall>f.\n               (f \\<longrightarrow>\n                (robdd_\\<alpha> b = robdd_\\<alpha> robdd_one) =\n                (robdd_get_id b = Suc 0)) \\<and>\n               (\\<not> f \\<longrightarrow>\n                (robdd_\\<alpha> b = robdd_\\<alpha> robdd_zero) =\n                (robdd_get_id b = 0)));\n        b1 = robdd_one; b2 = robdd_zero\\<rbrakk>\n       \\<Longrightarrow> robdd_get_id b1 = robdd_get_id b2\n 3. \\<And>b1 b2.\n       \\<lbrakk>robdd_\\<alpha> b1 = robdd_\\<alpha> b2;\n        \\<forall>b1 b2.\n           b1 \\<in> subrobdds_set bs \\<and>\n           b2 \\<in> subrobdds_set bs \\<longrightarrow>\n           (robdd_\\<alpha> b1 = robdd_\\<alpha> b2) =\n           (robdd_get_id b1 = robdd_get_id b2);\n        \\<forall>b.\n           b \\<in> subrobdds_set bs \\<longrightarrow>\n           (\\<forall>f.\n               (f \\<longrightarrow>\n                (robdd_\\<alpha> b = robdd_\\<alpha> robdd_one) =\n                (robdd_get_id b = Suc 0)) \\<and>\n               (\\<not> f \\<longrightarrow>\n                (robdd_\\<alpha> b = robdd_\\<alpha> robdd_zero) =\n                (robdd_get_id b = 0)));\n        b1 = robdd_one; b2 \\<in> subrobdds_set bs\\<rbrakk>\n       \\<Longrightarrow> robdd_get_id b1 = robdd_get_id b2\n 4. \\<And>b1 b2.\n       \\<lbrakk>robdd_\\<alpha> b1 = robdd_\\<alpha> b2;\n        \\<forall>b1 b2.\n           b1 \\<in> subrobdds_set bs \\<and>\n           b2 \\<in> subrobdds_set bs \\<longrightarrow>\n           (robdd_\\<alpha> b1 = robdd_\\<alpha> b2) =\n           (robdd_get_id b1 = robdd_get_id b2);\n        \\<forall>b.\n           b \\<in> subrobdds_set bs \\<longrightarrow>\n           (\\<forall>f.\n               (f \\<longrightarrow>\n                (robdd_\\<alpha> b = robdd_\\<alpha> robdd_one) =\n                (robdd_get_id b = Suc 0)) \\<and>\n               (\\<not> f \\<longrightarrow>\n                (robdd_\\<alpha> b = robdd_\\<alpha> robdd_zero) =\n                (robdd_get_id b = 0)));\n        b2 = robdd_one; b1 = robdd_zero\\<rbrakk>\n       \\<Longrightarrow> robdd_get_id b1 = robdd_get_id b2\n 5. \\<And>b1 b2.\n       \\<lbrakk>robdd_\\<alpha> b1 = robdd_\\<alpha> b2;\n        \\<forall>b1 b2.\n           b1 \\<in> subrobdds_set bs \\<and>\n           b2 \\<in> subrobdds_set bs \\<longrightarrow>\n           (robdd_\\<alpha> b1 = robdd_\\<alpha> b2) =\n           (robdd_get_id b1 = robdd_get_id b2);\n        \\<forall>b.\n           b \\<in> subrobdds_set bs \\<longrightarrow>\n           (\\<forall>f.\n               (f \\<longrightarrow>\n                (robdd_\\<alpha> b = robdd_\\<alpha> robdd_one) =\n                (robdd_get_id b = Suc 0)) \\<and>\n               (\\<not> f \\<longrightarrow>\n                (robdd_\\<alpha> b = robdd_\\<alpha> robdd_zero) =\n                (robdd_get_id b = 0)));\n        b2 = robdd_one; b1 \\<in> subrobdds_set bs\\<rbrakk>\n       \\<Longrightarrow> robdd_get_id b1 = robdd_get_id b2\n 6. \\<And>b1 b2.\n       \\<lbrakk>robdd_\\<alpha> b1 = robdd_\\<alpha> b2;\n        \\<forall>b1 b2.\n           b1 \\<in> subrobdds_set bs \\<and>\n           b2 \\<in> subrobdds_set bs \\<longrightarrow>\n           (robdd_\\<alpha> b1 = robdd_\\<alpha> b2) =\n           (robdd_get_id b1 = robdd_get_id b2);\n        \\<forall>b.\n           b \\<in> subrobdds_set bs \\<longrightarrow>\n           (\\<forall>f.\n               (f \\<longrightarrow>\n                (robdd_\\<alpha> b = robdd_\\<alpha> robdd_one) =\n                (robdd_get_id b = Suc 0)) \\<and>\n               (\\<not> f \\<longrightarrow>\n                (robdd_\\<alpha> b = robdd_\\<alpha> robdd_zero) =\n                (robdd_get_id b = 0)));\n        b1 = robdd_zero; b2 = robdd_zero\\<rbrakk>\n       \\<Longrightarrow> robdd_get_id b1 = robdd_get_id b2\n 7. \\<And>b1 b2.\n       \\<lbrakk>robdd_\\<alpha> b1 = robdd_\\<alpha> b2;\n        \\<forall>b1 b2.\n           b1 \\<in> subrobdds_set bs \\<and>\n           b2 \\<in> subrobdds_set bs \\<longrightarrow>\n           (robdd_\\<alpha> b1 = robdd_\\<alpha> b2) =\n           (robdd_get_id b1 = robdd_get_id b2);\n        \\<forall>b.\n           b \\<in> subrobdds_set bs \\<longrightarrow>\n           (\\<forall>f.\n               (f \\<longrightarrow>\n                (robdd_\\<alpha> b = robdd_\\<alpha> robdd_one) =\n                (robdd_get_id b = Suc 0)) \\<and>\n               (\\<not> f \\<longrightarrow>\n                (robdd_\\<alpha> b = robdd_\\<alpha> robdd_zero) =\n                (robdd_get_id b = 0)));\n        b1 = robdd_zero; b2 \\<in> subrobdds_set bs\\<rbrakk>\n       \\<Longrightarrow> robdd_get_id b1 = robdd_get_id b2\n 8. \\<And>b1 b2.\n       \\<lbrakk>robdd_\\<alpha> b1 = robdd_\\<alpha> b2;\n        \\<forall>b1 b2.\n           b1 \\<in> subrobdds_set bs \\<and>\n           b2 \\<in> subrobdds_set bs \\<longrightarrow>\n           (robdd_\\<alpha> b1 = robdd_\\<alpha> b2) =\n           (robdd_get_id b1 = robdd_get_id b2);\n        \\<forall>b.\n           b \\<in> subrobdds_set bs \\<longrightarrow>\n           (\\<forall>f.\n               (f \\<longrightarrow>\n                (robdd_\\<alpha> b = robdd_\\<alpha> robdd_one) =\n                (robdd_get_id b = Suc 0)) \\<and>\n               (\\<not> f \\<longrightarrow>\n                (robdd_\\<alpha> b = robdd_\\<alpha> robdd_zero) =\n                (robdd_get_id b = 0)));\n        b1 \\<in> subrobdds_set bs; b2 = robdd_zero\\<rbrakk>\n       \\<Longrightarrow> robdd_get_id b1 = robdd_get_id b2\n 9. \\<And>b1 b2.\n       \\<lbrakk>robdd_\\<alpha> b1 = robdd_\\<alpha> b2;\n        \\<forall>b1 b2.\n           b1 \\<in> subrobdds_set bs \\<and>\n           b2 \\<in> subrobdds_set bs \\<longrightarrow>\n           (robdd_\\<alpha> b1 = robdd_\\<alpha> b2) =\n           (robdd_get_id b1 = robdd_get_id b2);\n        \\<forall>b.\n           b \\<in> subrobdds_set bs \\<longrightarrow>\n           (\\<forall>f.\n               (f \\<longrightarrow>\n                (robdd_\\<alpha> b = robdd_\\<alpha> robdd_one) =\n                (robdd_get_id b = Suc 0)) \\<and>\n               (\\<not> f \\<longrightarrow>\n                (robdd_\\<alpha> b = robdd_\\<alpha> robdd_zero) =\n                (robdd_get_id b = 0)));\n        b1 \\<in> subrobdds_set bs; b2 \\<in> subrobdds_set bs\\<rbrakk>\n       \\<Longrightarrow> robdd_get_id b1 = robdd_get_id b2\n 10. \\<And>b1 b2.\n        \\<lbrakk>(\\<forall>b1 b2.\n                     b1 \\<in> subrobdds_set bs \\<and>\n                     b2 \\<in> subrobdds_set bs \\<longrightarrow>\n                     (robdd_\\<alpha> b1 = robdd_\\<alpha> b2) =\n                     (robdd_get_id b1 = robdd_get_id b2)) \\<and>\n                 (\\<forall>b.\n                     b \\<in> subrobdds_set bs \\<longrightarrow>\n                     (\\<forall>f.\n                         (f \\<longrightarrow>\n                          (robdd_\\<alpha> b = robdd_\\<alpha> robdd_one) =\n                          (robdd_get_id b = Suc 0)) \\<and>\n                         (\\<not> f \\<longrightarrow>\n                          (robdd_\\<alpha> b = robdd_\\<alpha> robdd_zero) =\n                          (robdd_get_id b = 0))));\n         (b1 = robdd_one \\<or>\n          b1 = robdd_zero \\<or> b1 \\<in> subrobdds_set bs) \\<and>\n         (b2 = robdd_one \\<or>\n          b2 = robdd_zero \\<or> b2 \\<in> subrobdds_set bs);\n         robdd_get_id b1 = robdd_get_id b2\\<rbrakk>\n        \\<Longrightarrow> robdd_\\<alpha> b1 = robdd_\\<alpha> b2\nA total of 11 subgoals...", "apply (simp_all)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>b1 b2.\n       \\<lbrakk>robdd_\\<alpha> robdd_one = robdd_\\<alpha> b2;\n        \\<forall>b1 b2.\n           b1 \\<in> subrobdds_set bs \\<and>\n           b2 \\<in> subrobdds_set bs \\<longrightarrow>\n           (robdd_\\<alpha> b1 = robdd_\\<alpha> b2) =\n           (robdd_get_id b1 = robdd_get_id b2);\n        \\<forall>b.\n           b \\<in> subrobdds_set bs \\<longrightarrow>\n           (\\<forall>f.\n               (f \\<longrightarrow>\n                (robdd_get_id b = robdd_get_id b2) =\n                (robdd_get_id b = Suc 0)) \\<and>\n               (\\<not> f \\<longrightarrow>\n                (robdd_\\<alpha> b = robdd_\\<alpha> robdd_zero) =\n                (robdd_get_id b = 0)));\n        b1 = robdd_one; b2 \\<in> subrobdds_set bs\\<rbrakk>\n       \\<Longrightarrow> Suc 0 = robdd_get_id b2\n 2. \\<And>b1 b2.\n       \\<lbrakk>robdd_\\<alpha> robdd_zero = robdd_\\<alpha> b2;\n        \\<forall>b1 b2.\n           b1 \\<in> subrobdds_set bs \\<and>\n           b2 \\<in> subrobdds_set bs \\<longrightarrow>\n           (robdd_\\<alpha> b1 = robdd_\\<alpha> b2) =\n           (robdd_get_id b1 = robdd_get_id b2);\n        \\<forall>b.\n           b \\<in> subrobdds_set bs \\<longrightarrow>\n           (\\<forall>f.\n               (f \\<longrightarrow>\n                (robdd_\\<alpha> b = robdd_\\<alpha> robdd_one) =\n                (robdd_get_id b = Suc 0)) \\<and>\n               (\\<not> f \\<longrightarrow>\n                (robdd_get_id b = robdd_get_id b2) = (robdd_get_id b = 0)));\n        b1 = robdd_zero; b2 \\<in> subrobdds_set bs\\<rbrakk>\n       \\<Longrightarrow> robdd_get_id b2 = 0\n 3. \\<And>b1 b2.\n       \\<lbrakk>robdd_\\<alpha> b1 = robdd_\\<alpha> robdd_zero;\n        \\<forall>b1 b2.\n           b1 \\<in> subrobdds_set bs \\<and>\n           b2 \\<in> subrobdds_set bs \\<longrightarrow>\n           (robdd_\\<alpha> b1 = robdd_\\<alpha> b2) =\n           (robdd_get_id b1 = robdd_get_id b2);\n        \\<forall>b.\n           b \\<in> subrobdds_set bs \\<longrightarrow>\n           (\\<forall>f.\n               (f \\<longrightarrow>\n                (robdd_\\<alpha> b = robdd_\\<alpha> robdd_one) =\n                (robdd_get_id b = Suc 0)) \\<and>\n               (\\<not> f \\<longrightarrow>\n                (robdd_\\<alpha> b = robdd_\\<alpha> robdd_zero) =\n                (robdd_get_id b = 0)));\n        b1 \\<in> subrobdds_set bs; b2 = robdd_zero\\<rbrakk>\n       \\<Longrightarrow> robdd_get_id b1 = 0\n 4. \\<And>b1 b2.\n       \\<lbrakk>(\\<forall>b1 b2.\n                    b1 \\<in> subrobdds_set bs \\<and>\n                    b2 \\<in> subrobdds_set bs \\<longrightarrow>\n                    (robdd_\\<alpha> b1 = robdd_\\<alpha> b2) =\n                    (robdd_get_id b1 = robdd_get_id b2)) \\<and>\n                (\\<forall>b.\n                    b \\<in> subrobdds_set bs \\<longrightarrow>\n                    (\\<forall>f.\n                        (f \\<longrightarrow>\n                         (robdd_\\<alpha> b = robdd_\\<alpha> robdd_one) =\n                         (robdd_get_id b = Suc 0)) \\<and>\n                        (\\<not> f \\<longrightarrow>\n                         (robdd_\\<alpha> b = robdd_\\<alpha> robdd_zero) =\n                         (robdd_get_id b = 0))));\n        (b1 = robdd_one \\<or>\n         b1 = robdd_zero \\<or> b1 \\<in> subrobdds_set bs) \\<and>\n        (b2 = robdd_one \\<or>\n         b2 = robdd_zero \\<or> b2 \\<in> subrobdds_set bs);\n        robdd_get_id b1 = robdd_get_id b2\\<rbrakk>\n       \\<Longrightarrow> robdd_\\<alpha> b1 = robdd_\\<alpha> b2", "apply (metis+) [3]"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>b1 b2.\n       \\<lbrakk>(\\<forall>b1 b2.\n                    b1 \\<in> subrobdds_set bs \\<and>\n                    b2 \\<in> subrobdds_set bs \\<longrightarrow>\n                    (robdd_\\<alpha> b1 = robdd_\\<alpha> b2) =\n                    (robdd_get_id b1 = robdd_get_id b2)) \\<and>\n                (\\<forall>b.\n                    b \\<in> subrobdds_set bs \\<longrightarrow>\n                    (\\<forall>f.\n                        (f \\<longrightarrow>\n                         (robdd_\\<alpha> b = robdd_\\<alpha> robdd_one) =\n                         (robdd_get_id b = Suc 0)) \\<and>\n                        (\\<not> f \\<longrightarrow>\n                         (robdd_\\<alpha> b = robdd_\\<alpha> robdd_zero) =\n                         (robdd_get_id b = 0))));\n        (b1 = robdd_one \\<or>\n         b1 = robdd_zero \\<or> b1 \\<in> subrobdds_set bs) \\<and>\n        (b2 = robdd_one \\<or>\n         b2 = robdd_zero \\<or> b2 \\<in> subrobdds_set bs);\n        robdd_get_id b1 = robdd_get_id b2\\<rbrakk>\n       \\<Longrightarrow> robdd_\\<alpha> b1 = robdd_\\<alpha> b2", "apply (elim conjE impE disjE)"], ["proof (prove)\ngoal (9 subgoals):\n 1. \\<And>b1 b2.\n       \\<lbrakk>robdd_get_id b1 = robdd_get_id b2;\n        \\<forall>b1 b2.\n           b1 \\<in> subrobdds_set bs \\<and>\n           b2 \\<in> subrobdds_set bs \\<longrightarrow>\n           (robdd_\\<alpha> b1 = robdd_\\<alpha> b2) =\n           (robdd_get_id b1 = robdd_get_id b2);\n        \\<forall>b.\n           b \\<in> subrobdds_set bs \\<longrightarrow>\n           (\\<forall>f.\n               (f \\<longrightarrow>\n                (robdd_\\<alpha> b = robdd_\\<alpha> robdd_one) =\n                (robdd_get_id b = Suc 0)) \\<and>\n               (\\<not> f \\<longrightarrow>\n                (robdd_\\<alpha> b = robdd_\\<alpha> robdd_zero) =\n                (robdd_get_id b = 0)));\n        b1 = robdd_one; b2 = robdd_one\\<rbrakk>\n       \\<Longrightarrow> robdd_\\<alpha> b1 = robdd_\\<alpha> b2\n 2. \\<And>b1 b2.\n       \\<lbrakk>robdd_get_id b1 = robdd_get_id b2;\n        \\<forall>b1 b2.\n           b1 \\<in> subrobdds_set bs \\<and>\n           b2 \\<in> subrobdds_set bs \\<longrightarrow>\n           (robdd_\\<alpha> b1 = robdd_\\<alpha> b2) =\n           (robdd_get_id b1 = robdd_get_id b2);\n        \\<forall>b.\n           b \\<in> subrobdds_set bs \\<longrightarrow>\n           (\\<forall>f.\n               (f \\<longrightarrow>\n                (robdd_\\<alpha> b = robdd_\\<alpha> robdd_one) =\n                (robdd_get_id b = Suc 0)) \\<and>\n               (\\<not> f \\<longrightarrow>\n                (robdd_\\<alpha> b = robdd_\\<alpha> robdd_zero) =\n                (robdd_get_id b = 0)));\n        b1 = robdd_one; b2 = robdd_zero\\<rbrakk>\n       \\<Longrightarrow> robdd_\\<alpha> b1 = robdd_\\<alpha> b2\n 3. \\<And>b1 b2.\n       \\<lbrakk>robdd_get_id b1 = robdd_get_id b2;\n        \\<forall>b1 b2.\n           b1 \\<in> subrobdds_set bs \\<and>\n           b2 \\<in> subrobdds_set bs \\<longrightarrow>\n           (robdd_\\<alpha> b1 = robdd_\\<alpha> b2) =\n           (robdd_get_id b1 = robdd_get_id b2);\n        \\<forall>b.\n           b \\<in> subrobdds_set bs \\<longrightarrow>\n           (\\<forall>f.\n               (f \\<longrightarrow>\n                (robdd_\\<alpha> b = robdd_\\<alpha> robdd_one) =\n                (robdd_get_id b = Suc 0)) \\<and>\n               (\\<not> f \\<longrightarrow>\n                (robdd_\\<alpha> b = robdd_\\<alpha> robdd_zero) =\n                (robdd_get_id b = 0)));\n        b1 = robdd_one; b2 \\<in> subrobdds_set bs\\<rbrakk>\n       \\<Longrightarrow> robdd_\\<alpha> b1 = robdd_\\<alpha> b2\n 4. \\<And>b1 b2.\n       \\<lbrakk>robdd_get_id b1 = robdd_get_id b2;\n        \\<forall>b1 b2.\n           b1 \\<in> subrobdds_set bs \\<and>\n           b2 \\<in> subrobdds_set bs \\<longrightarrow>\n           (robdd_\\<alpha> b1 = robdd_\\<alpha> b2) =\n           (robdd_get_id b1 = robdd_get_id b2);\n        \\<forall>b.\n           b \\<in> subrobdds_set bs \\<longrightarrow>\n           (\\<forall>f.\n               (f \\<longrightarrow>\n                (robdd_\\<alpha> b = robdd_\\<alpha> robdd_one) =\n                (robdd_get_id b = Suc 0)) \\<and>\n               (\\<not> f \\<longrightarrow>\n                (robdd_\\<alpha> b = robdd_\\<alpha> robdd_zero) =\n                (robdd_get_id b = 0)));\n        b2 = robdd_one; b1 = robdd_zero\\<rbrakk>\n       \\<Longrightarrow> robdd_\\<alpha> b1 = robdd_\\<alpha> b2\n 5. \\<And>b1 b2.\n       \\<lbrakk>robdd_get_id b1 = robdd_get_id b2;\n        \\<forall>b1 b2.\n           b1 \\<in> subrobdds_set bs \\<and>\n           b2 \\<in> subrobdds_set bs \\<longrightarrow>\n           (robdd_\\<alpha> b1 = robdd_\\<alpha> b2) =\n           (robdd_get_id b1 = robdd_get_id b2);\n        \\<forall>b.\n           b \\<in> subrobdds_set bs \\<longrightarrow>\n           (\\<forall>f.\n               (f \\<longrightarrow>\n                (robdd_\\<alpha> b = robdd_\\<alpha> robdd_one) =\n                (robdd_get_id b = Suc 0)) \\<and>\n               (\\<not> f \\<longrightarrow>\n                (robdd_\\<alpha> b = robdd_\\<alpha> robdd_zero) =\n                (robdd_get_id b = 0)));\n        b2 = robdd_one; b1 \\<in> subrobdds_set bs\\<rbrakk>\n       \\<Longrightarrow> robdd_\\<alpha> b1 = robdd_\\<alpha> b2\n 6. \\<And>b1 b2.\n       \\<lbrakk>robdd_get_id b1 = robdd_get_id b2;\n        \\<forall>b1 b2.\n           b1 \\<in> subrobdds_set bs \\<and>\n           b2 \\<in> subrobdds_set bs \\<longrightarrow>\n           (robdd_\\<alpha> b1 = robdd_\\<alpha> b2) =\n           (robdd_get_id b1 = robdd_get_id b2);\n        \\<forall>b.\n           b \\<in> subrobdds_set bs \\<longrightarrow>\n           (\\<forall>f.\n               (f \\<longrightarrow>\n                (robdd_\\<alpha> b = robdd_\\<alpha> robdd_one) =\n                (robdd_get_id b = Suc 0)) \\<and>\n               (\\<not> f \\<longrightarrow>\n                (robdd_\\<alpha> b = robdd_\\<alpha> robdd_zero) =\n                (robdd_get_id b = 0)));\n        b1 = robdd_zero; b2 = robdd_zero\\<rbrakk>\n       \\<Longrightarrow> robdd_\\<alpha> b1 = robdd_\\<alpha> b2\n 7. \\<And>b1 b2.\n       \\<lbrakk>robdd_get_id b1 = robdd_get_id b2;\n        \\<forall>b1 b2.\n           b1 \\<in> subrobdds_set bs \\<and>\n           b2 \\<in> subrobdds_set bs \\<longrightarrow>\n           (robdd_\\<alpha> b1 = robdd_\\<alpha> b2) =\n           (robdd_get_id b1 = robdd_get_id b2);\n        \\<forall>b.\n           b \\<in> subrobdds_set bs \\<longrightarrow>\n           (\\<forall>f.\n               (f \\<longrightarrow>\n                (robdd_\\<alpha> b = robdd_\\<alpha> robdd_one) =\n                (robdd_get_id b = Suc 0)) \\<and>\n               (\\<not> f \\<longrightarrow>\n                (robdd_\\<alpha> b = robdd_\\<alpha> robdd_zero) =\n                (robdd_get_id b = 0)));\n        b1 = robdd_zero; b2 \\<in> subrobdds_set bs\\<rbrakk>\n       \\<Longrightarrow> robdd_\\<alpha> b1 = robdd_\\<alpha> b2\n 8. \\<And>b1 b2.\n       \\<lbrakk>robdd_get_id b1 = robdd_get_id b2;\n        \\<forall>b1 b2.\n           b1 \\<in> subrobdds_set bs \\<and>\n           b2 \\<in> subrobdds_set bs \\<longrightarrow>\n           (robdd_\\<alpha> b1 = robdd_\\<alpha> b2) =\n           (robdd_get_id b1 = robdd_get_id b2);\n        \\<forall>b.\n           b \\<in> subrobdds_set bs \\<longrightarrow>\n           (\\<forall>f.\n               (f \\<longrightarrow>\n                (robdd_\\<alpha> b = robdd_\\<alpha> robdd_one) =\n                (robdd_get_id b = Suc 0)) \\<and>\n               (\\<not> f \\<longrightarrow>\n                (robdd_\\<alpha> b = robdd_\\<alpha> robdd_zero) =\n                (robdd_get_id b = 0)));\n        b1 \\<in> subrobdds_set bs; b2 = robdd_zero\\<rbrakk>\n       \\<Longrightarrow> robdd_\\<alpha> b1 = robdd_\\<alpha> b2\n 9. \\<And>b1 b2.\n       \\<lbrakk>robdd_get_id b1 = robdd_get_id b2;\n        \\<forall>b1 b2.\n           b1 \\<in> subrobdds_set bs \\<and>\n           b2 \\<in> subrobdds_set bs \\<longrightarrow>\n           (robdd_\\<alpha> b1 = robdd_\\<alpha> b2) =\n           (robdd_get_id b1 = robdd_get_id b2);\n        \\<forall>b.\n           b \\<in> subrobdds_set bs \\<longrightarrow>\n           (\\<forall>f.\n               (f \\<longrightarrow>\n                (robdd_\\<alpha> b = robdd_\\<alpha> robdd_one) =\n                (robdd_get_id b = Suc 0)) \\<and>\n               (\\<not> f \\<longrightarrow>\n                (robdd_\\<alpha> b = robdd_\\<alpha> robdd_zero) =\n                (robdd_get_id b = 0)));\n        b1 \\<in> subrobdds_set bs; b2 \\<in> subrobdds_set bs\\<rbrakk>\n       \\<Longrightarrow> robdd_\\<alpha> b1 = robdd_\\<alpha> b2", "apply (simp_all)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>b1 b2.\n       \\<lbrakk>Suc 0 = robdd_get_id b2;\n        \\<forall>b1 b2.\n           b1 \\<in> subrobdds_set bs \\<and>\n           b2 \\<in> subrobdds_set bs \\<longrightarrow>\n           (robdd_\\<alpha> b1 = robdd_\\<alpha> b2) =\n           (robdd_get_id b1 = robdd_get_id b2);\n        \\<forall>b.\n           b \\<in> subrobdds_set bs \\<longrightarrow>\n           (\\<forall>f.\n               (f \\<longrightarrow>\n                (robdd_\\<alpha> b = robdd_\\<alpha> robdd_one) =\n                (robdd_get_id b = robdd_get_id b2)) \\<and>\n               (\\<not> f \\<longrightarrow>\n                (robdd_\\<alpha> b = robdd_\\<alpha> robdd_zero) =\n                (robdd_get_id b = 0)));\n        b1 = robdd_one; b2 \\<in> subrobdds_set bs\\<rbrakk>\n       \\<Longrightarrow> robdd_\\<alpha> robdd_one = robdd_\\<alpha> b2\n 2. \\<And>b1 b2.\n       \\<lbrakk>robdd_get_id b2 = 0;\n        \\<forall>b1 b2.\n           b1 \\<in> subrobdds_set bs \\<and>\n           b2 \\<in> subrobdds_set bs \\<longrightarrow>\n           (robdd_\\<alpha> b1 = robdd_\\<alpha> b2) =\n           (robdd_get_id b1 = robdd_get_id b2);\n        \\<forall>b.\n           b \\<in> subrobdds_set bs \\<longrightarrow>\n           (\\<forall>f.\n               (f \\<longrightarrow>\n                (robdd_\\<alpha> b = robdd_\\<alpha> robdd_one) =\n                (robdd_get_id b = Suc 0)) \\<and>\n               (\\<not> f \\<longrightarrow>\n                (robdd_\\<alpha> b = robdd_\\<alpha> robdd_zero) =\n                (robdd_get_id b = 0)));\n        b1 = robdd_zero; b2 \\<in> subrobdds_set bs\\<rbrakk>\n       \\<Longrightarrow> robdd_\\<alpha> robdd_zero = robdd_\\<alpha> b2\n 3. \\<And>b1 b2.\n       \\<lbrakk>robdd_get_id b1 = 0;\n        \\<forall>b1 b2.\n           b1 \\<in> subrobdds_set bs \\<and>\n           b2 \\<in> subrobdds_set bs \\<longrightarrow>\n           (robdd_\\<alpha> b1 = robdd_\\<alpha> b2) =\n           (robdd_get_id b1 = robdd_get_id b2);\n        \\<forall>b.\n           b \\<in> subrobdds_set bs \\<longrightarrow>\n           (\\<forall>f.\n               (f \\<longrightarrow>\n                (robdd_\\<alpha> b = robdd_\\<alpha> robdd_one) =\n                (robdd_get_id b = Suc 0)) \\<and>\n               (\\<not> f \\<longrightarrow>\n                (robdd_\\<alpha> b = robdd_\\<alpha> robdd_zero) =\n                (robdd_get_id b = 0)));\n        b1 \\<in> subrobdds_set bs; b2 = robdd_zero\\<rbrakk>\n       \\<Longrightarrow> robdd_\\<alpha> b1 = robdd_\\<alpha> robdd_zero", "apply (metis+)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "text \\<open>Together with other invariants it can the later be derived that\n        two robdds have the same id if and only if they are equal.\\<close>"], ["", "definition robdd_invar_ids_equal where\n  \"robdd_invar_ids_equal bs =\n   (\\<forall>b1 b2. (b1 \\<in> subrobdds_set bs \\<and> b2 \\<in> subrobdds_set bs) \\<longrightarrow>\n              ((robdd_get_id b1 = robdd_get_id b2) \\<longleftrightarrow> b1 = b2))\""], ["", "definition robdd_invar_ids_leafs_equal where\n  \"robdd_invar_ids_leafs_equal bs =\n   (\\<forall>b f. (b \\<in> subrobdds_set bs) \\<longrightarrow>\n              ((robdd_get_id b = robdd_get_id (robdd_leaf f)) \\<longleftrightarrow> b = (robdd_leaf f)))\""], ["", "definition robdd_invar_ids_full_equal where\n  \"robdd_invar_ids_full_equal bs \\<equiv>\n   robdd_invar_ids_equal bs \\<and> robdd_invar_ids_leafs_equal bs\""], ["", "lemma robdd_invar_ids_full_equal_alt_def :\n  \"robdd_invar_ids_full_equal bs =\n   robdd_invar_ids_equal (insert robdd_zero (insert robdd_one bs))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. robdd_invar_ids_full_equal bs =\n    robdd_invar_ids_equal (insert robdd_zero (insert robdd_one bs))", "unfolding robdd_invar_ids_full_equal_def robdd_invar_ids_equal_def robdd_invar_ids_leafs_equal_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. ((\\<forall>b1 b2.\n         b1 \\<in> subrobdds_set bs \\<and>\n         b2 \\<in> subrobdds_set bs \\<longrightarrow>\n         (robdd_get_id b1 = robdd_get_id b2) = (b1 = b2)) \\<and>\n     (\\<forall>b f.\n         b \\<in> subrobdds_set bs \\<longrightarrow>\n         (robdd_get_id b = robdd_get_id (robdd_leaf f)) =\n         (b = robdd_leaf f))) =\n    (\\<forall>b1 b2.\n        b1 \\<in> subrobdds_set\n                  (insert robdd_zero (insert robdd_one bs)) \\<and>\n        b2 \\<in> subrobdds_set\n                  (insert robdd_zero\n                    (insert robdd_one bs)) \\<longrightarrow>\n        (robdd_get_id b1 = robdd_get_id b2) = (b1 = b2))", "apply (simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. ((\\<forall>b1 b2.\n         b1 \\<in> subrobdds_set bs \\<and>\n         b2 \\<in> subrobdds_set bs \\<longrightarrow>\n         (robdd_get_id b1 = robdd_get_id b2) = (b1 = b2)) \\<and>\n     (\\<forall>b.\n         b \\<in> subrobdds_set bs \\<longrightarrow>\n         (\\<forall>f.\n             (f \\<longrightarrow>\n              (robdd_get_id b = Suc 0) = (b = robdd_one)) \\<and>\n             (\\<not> f \\<longrightarrow>\n              (robdd_get_id b = 0) = (b = robdd_zero))))) =\n    (\\<forall>b1 b2.\n        (b1 = robdd_one \\<or>\n         b1 = robdd_zero \\<or> b1 \\<in> subrobdds_set bs) \\<and>\n        (b2 = robdd_one \\<or>\n         b2 = robdd_zero \\<or> b2 \\<in> subrobdds_set bs) \\<longrightarrow>\n        (robdd_get_id b1 = robdd_get_id b2) = (b1 = b2))", "apply (intro iffI allI impI)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>b1 b2.\n       \\<lbrakk>(\\<forall>b1 b2.\n                    b1 \\<in> subrobdds_set bs \\<and>\n                    b2 \\<in> subrobdds_set bs \\<longrightarrow>\n                    (robdd_get_id b1 = robdd_get_id b2) = (b1 = b2)) \\<and>\n                (\\<forall>b.\n                    b \\<in> subrobdds_set bs \\<longrightarrow>\n                    (\\<forall>f.\n                        (f \\<longrightarrow>\n                         (robdd_get_id b = Suc 0) = (b = robdd_one)) \\<and>\n                        (\\<not> f \\<longrightarrow>\n                         (robdd_get_id b = 0) = (b = robdd_zero))));\n        (b1 = robdd_one \\<or>\n         b1 = robdd_zero \\<or> b1 \\<in> subrobdds_set bs) \\<and>\n        (b2 = robdd_one \\<or>\n         b2 = robdd_zero \\<or> b2 \\<in> subrobdds_set bs);\n        robdd_get_id b1 = robdd_get_id b2\\<rbrakk>\n       \\<Longrightarrow> b1 = b2\n 2. \\<And>b1 b2.\n       \\<lbrakk>(\\<forall>b1 b2.\n                    b1 \\<in> subrobdds_set bs \\<and>\n                    b2 \\<in> subrobdds_set bs \\<longrightarrow>\n                    (robdd_get_id b1 = robdd_get_id b2) = (b1 = b2)) \\<and>\n                (\\<forall>b.\n                    b \\<in> subrobdds_set bs \\<longrightarrow>\n                    (\\<forall>f.\n                        (f \\<longrightarrow>\n                         (robdd_get_id b = Suc 0) = (b = robdd_one)) \\<and>\n                        (\\<not> f \\<longrightarrow>\n                         (robdd_get_id b = 0) = (b = robdd_zero))));\n        (b1 = robdd_one \\<or>\n         b1 = robdd_zero \\<or> b1 \\<in> subrobdds_set bs) \\<and>\n        (b2 = robdd_one \\<or>\n         b2 = robdd_zero \\<or> b2 \\<in> subrobdds_set bs);\n        b1 = b2\\<rbrakk>\n       \\<Longrightarrow> robdd_get_id b1 = robdd_get_id b2\n 3. \\<forall>b1 b2.\n       (b1 = robdd_one \\<or>\n        b1 = robdd_zero \\<or> b1 \\<in> subrobdds_set bs) \\<and>\n       (b2 = robdd_one \\<or>\n        b2 = robdd_zero \\<or> b2 \\<in> subrobdds_set bs) \\<longrightarrow>\n       (robdd_get_id b1 = robdd_get_id b2) = (b1 = b2) \\<Longrightarrow>\n    (\\<forall>b1 b2.\n        b1 \\<in> subrobdds_set bs \\<and>\n        b2 \\<in> subrobdds_set bs \\<longrightarrow>\n        (robdd_get_id b1 = robdd_get_id b2) = (b1 = b2)) \\<and>\n    (\\<forall>b.\n        b \\<in> subrobdds_set bs \\<longrightarrow>\n        (\\<forall>f.\n            (f \\<longrightarrow>\n             (robdd_get_id b = Suc 0) = (b = robdd_one)) \\<and>\n            (\\<not> f \\<longrightarrow>\n             (robdd_get_id b = 0) = (b = robdd_zero))))", "apply (elim conjE impE disjE)"], ["proof (prove)\ngoal (11 subgoals):\n 1. \\<And>b1 b2.\n       \\<lbrakk>robdd_get_id b1 = robdd_get_id b2;\n        \\<forall>b1 b2.\n           b1 \\<in> subrobdds_set bs \\<and>\n           b2 \\<in> subrobdds_set bs \\<longrightarrow>\n           (robdd_get_id b1 = robdd_get_id b2) = (b1 = b2);\n        \\<forall>b.\n           b \\<in> subrobdds_set bs \\<longrightarrow>\n           (\\<forall>f.\n               (f \\<longrightarrow>\n                (robdd_get_id b = Suc 0) = (b = robdd_one)) \\<and>\n               (\\<not> f \\<longrightarrow>\n                (robdd_get_id b = 0) = (b = robdd_zero)));\n        b1 = robdd_one; b2 = robdd_one\\<rbrakk>\n       \\<Longrightarrow> b1 = b2\n 2. \\<And>b1 b2.\n       \\<lbrakk>robdd_get_id b1 = robdd_get_id b2;\n        \\<forall>b1 b2.\n           b1 \\<in> subrobdds_set bs \\<and>\n           b2 \\<in> subrobdds_set bs \\<longrightarrow>\n           (robdd_get_id b1 = robdd_get_id b2) = (b1 = b2);\n        \\<forall>b.\n           b \\<in> subrobdds_set bs \\<longrightarrow>\n           (\\<forall>f.\n               (f \\<longrightarrow>\n                (robdd_get_id b = Suc 0) = (b = robdd_one)) \\<and>\n               (\\<not> f \\<longrightarrow>\n                (robdd_get_id b = 0) = (b = robdd_zero)));\n        b1 = robdd_one; b2 = robdd_zero\\<rbrakk>\n       \\<Longrightarrow> b1 = b2\n 3. \\<And>b1 b2.\n       \\<lbrakk>robdd_get_id b1 = robdd_get_id b2;\n        \\<forall>b1 b2.\n           b1 \\<in> subrobdds_set bs \\<and>\n           b2 \\<in> subrobdds_set bs \\<longrightarrow>\n           (robdd_get_id b1 = robdd_get_id b2) = (b1 = b2);\n        \\<forall>b.\n           b \\<in> subrobdds_set bs \\<longrightarrow>\n           (\\<forall>f.\n               (f \\<longrightarrow>\n                (robdd_get_id b = Suc 0) = (b = robdd_one)) \\<and>\n               (\\<not> f \\<longrightarrow>\n                (robdd_get_id b = 0) = (b = robdd_zero)));\n        b1 = robdd_one; b2 \\<in> subrobdds_set bs\\<rbrakk>\n       \\<Longrightarrow> b1 = b2\n 4. \\<And>b1 b2.\n       \\<lbrakk>robdd_get_id b1 = robdd_get_id b2;\n        \\<forall>b1 b2.\n           b1 \\<in> subrobdds_set bs \\<and>\n           b2 \\<in> subrobdds_set bs \\<longrightarrow>\n           (robdd_get_id b1 = robdd_get_id b2) = (b1 = b2);\n        \\<forall>b.\n           b \\<in> subrobdds_set bs \\<longrightarrow>\n           (\\<forall>f.\n               (f \\<longrightarrow>\n                (robdd_get_id b = Suc 0) = (b = robdd_one)) \\<and>\n               (\\<not> f \\<longrightarrow>\n                (robdd_get_id b = 0) = (b = robdd_zero)));\n        b2 = robdd_one; b1 = robdd_zero\\<rbrakk>\n       \\<Longrightarrow> b1 = b2\n 5. \\<And>b1 b2.\n       \\<lbrakk>robdd_get_id b1 = robdd_get_id b2;\n        \\<forall>b1 b2.\n           b1 \\<in> subrobdds_set bs \\<and>\n           b2 \\<in> subrobdds_set bs \\<longrightarrow>\n           (robdd_get_id b1 = robdd_get_id b2) = (b1 = b2);\n        \\<forall>b.\n           b \\<in> subrobdds_set bs \\<longrightarrow>\n           (\\<forall>f.\n               (f \\<longrightarrow>\n                (robdd_get_id b = Suc 0) = (b = robdd_one)) \\<and>\n               (\\<not> f \\<longrightarrow>\n                (robdd_get_id b = 0) = (b = robdd_zero)));\n        b2 = robdd_one; b1 \\<in> subrobdds_set bs\\<rbrakk>\n       \\<Longrightarrow> b1 = b2\n 6. \\<And>b1 b2.\n       \\<lbrakk>robdd_get_id b1 = robdd_get_id b2;\n        \\<forall>b1 b2.\n           b1 \\<in> subrobdds_set bs \\<and>\n           b2 \\<in> subrobdds_set bs \\<longrightarrow>\n           (robdd_get_id b1 = robdd_get_id b2) = (b1 = b2);\n        \\<forall>b.\n           b \\<in> subrobdds_set bs \\<longrightarrow>\n           (\\<forall>f.\n               (f \\<longrightarrow>\n                (robdd_get_id b = Suc 0) = (b = robdd_one)) \\<and>\n               (\\<not> f \\<longrightarrow>\n                (robdd_get_id b = 0) = (b = robdd_zero)));\n        b1 = robdd_zero; b2 = robdd_zero\\<rbrakk>\n       \\<Longrightarrow> b1 = b2\n 7. \\<And>b1 b2.\n       \\<lbrakk>robdd_get_id b1 = robdd_get_id b2;\n        \\<forall>b1 b2.\n           b1 \\<in> subrobdds_set bs \\<and>\n           b2 \\<in> subrobdds_set bs \\<longrightarrow>\n           (robdd_get_id b1 = robdd_get_id b2) = (b1 = b2);\n        \\<forall>b.\n           b \\<in> subrobdds_set bs \\<longrightarrow>\n           (\\<forall>f.\n               (f \\<longrightarrow>\n                (robdd_get_id b = Suc 0) = (b = robdd_one)) \\<and>\n               (\\<not> f \\<longrightarrow>\n                (robdd_get_id b = 0) = (b = robdd_zero)));\n        b1 = robdd_zero; b2 \\<in> subrobdds_set bs\\<rbrakk>\n       \\<Longrightarrow> b1 = b2\n 8. \\<And>b1 b2.\n       \\<lbrakk>robdd_get_id b1 = robdd_get_id b2;\n        \\<forall>b1 b2.\n           b1 \\<in> subrobdds_set bs \\<and>\n           b2 \\<in> subrobdds_set bs \\<longrightarrow>\n           (robdd_get_id b1 = robdd_get_id b2) = (b1 = b2);\n        \\<forall>b.\n           b \\<in> subrobdds_set bs \\<longrightarrow>\n           (\\<forall>f.\n               (f \\<longrightarrow>\n                (robdd_get_id b = Suc 0) = (b = robdd_one)) \\<and>\n               (\\<not> f \\<longrightarrow>\n                (robdd_get_id b = 0) = (b = robdd_zero)));\n        b1 \\<in> subrobdds_set bs; b2 = robdd_zero\\<rbrakk>\n       \\<Longrightarrow> b1 = b2\n 9. \\<And>b1 b2.\n       \\<lbrakk>robdd_get_id b1 = robdd_get_id b2;\n        \\<forall>b1 b2.\n           b1 \\<in> subrobdds_set bs \\<and>\n           b2 \\<in> subrobdds_set bs \\<longrightarrow>\n           (robdd_get_id b1 = robdd_get_id b2) = (b1 = b2);\n        \\<forall>b.\n           b \\<in> subrobdds_set bs \\<longrightarrow>\n           (\\<forall>f.\n               (f \\<longrightarrow>\n                (robdd_get_id b = Suc 0) = (b = robdd_one)) \\<and>\n               (\\<not> f \\<longrightarrow>\n                (robdd_get_id b = 0) = (b = robdd_zero)));\n        b1 \\<in> subrobdds_set bs; b2 \\<in> subrobdds_set bs\\<rbrakk>\n       \\<Longrightarrow> b1 = b2\n 10. \\<And>b1 b2.\n        \\<lbrakk>(\\<forall>b1 b2.\n                     b1 \\<in> subrobdds_set bs \\<and>\n                     b2 \\<in> subrobdds_set bs \\<longrightarrow>\n                     (robdd_get_id b1 = robdd_get_id b2) = (b1 = b2)) \\<and>\n                 (\\<forall>b.\n                     b \\<in> subrobdds_set bs \\<longrightarrow>\n                     (\\<forall>f.\n                         (f \\<longrightarrow>\n                          (robdd_get_id b = Suc 0) = (b = robdd_one)) \\<and>\n                         (\\<not> f \\<longrightarrow>\n                          (robdd_get_id b = 0) = (b = robdd_zero))));\n         (b1 = robdd_one \\<or>\n          b1 = robdd_zero \\<or> b1 \\<in> subrobdds_set bs) \\<and>\n         (b2 = robdd_one \\<or>\n          b2 = robdd_zero \\<or> b2 \\<in> subrobdds_set bs);\n         b1 = b2\\<rbrakk>\n        \\<Longrightarrow> robdd_get_id b1 = robdd_get_id b2\nA total of 11 subgoals...", "apply (simp_all)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>b1 b2.\n       \\<lbrakk>Suc 0 = robdd_get_id b2;\n        \\<forall>b1 b2.\n           b1 \\<in> subrobdds_set bs \\<and>\n           b2 \\<in> subrobdds_set bs \\<longrightarrow>\n           (robdd_get_id b1 = robdd_get_id b2) = (b1 = b2);\n        \\<forall>b.\n           b \\<in> subrobdds_set bs \\<longrightarrow>\n           (\\<forall>f.\n               (f \\<longrightarrow> (b = b2) = (b = robdd_one)) \\<and>\n               (\\<not> f \\<longrightarrow>\n                (robdd_get_id b = 0) = (b = robdd_zero)));\n        b1 = robdd_one; b2 \\<in> subrobdds_set bs\\<rbrakk>\n       \\<Longrightarrow> robdd_one = b2\n 2. \\<And>b1 b2.\n       \\<lbrakk>robdd_get_id b2 = 0;\n        \\<forall>b1 b2.\n           b1 \\<in> subrobdds_set bs \\<and>\n           b2 \\<in> subrobdds_set bs \\<longrightarrow>\n           (robdd_get_id b1 = robdd_get_id b2) = (b1 = b2);\n        \\<forall>b.\n           b \\<in> subrobdds_set bs \\<longrightarrow>\n           (\\<forall>f.\n               (f \\<longrightarrow>\n                (robdd_get_id b = Suc 0) = (b = robdd_one)) \\<and>\n               (\\<not> f \\<longrightarrow>\n                (robdd_get_id b = 0) = (b = robdd_zero)));\n        b1 = robdd_zero; b2 \\<in> subrobdds_set bs\\<rbrakk>\n       \\<Longrightarrow> robdd_zero = b2\n 3. \\<And>b1 b2.\n       \\<lbrakk>robdd_get_id b1 = 0;\n        \\<forall>b1 b2.\n           b1 \\<in> subrobdds_set bs \\<and>\n           b2 \\<in> subrobdds_set bs \\<longrightarrow>\n           (robdd_get_id b1 = robdd_get_id b2) = (b1 = b2);\n        \\<forall>b.\n           b \\<in> subrobdds_set bs \\<longrightarrow>\n           (\\<forall>f.\n               (f \\<longrightarrow>\n                (robdd_get_id b = Suc 0) = (b = robdd_one)) \\<and>\n               (\\<not> f \\<longrightarrow>\n                (robdd_get_id b = 0) = (b = robdd_zero)));\n        b1 \\<in> subrobdds_set bs; b2 = robdd_zero\\<rbrakk>\n       \\<Longrightarrow> b1 = robdd_zero\n 4. \\<forall>b1 b2.\n       (b1 = robdd_one \\<or>\n        b1 = robdd_zero \\<or> b1 \\<in> subrobdds_set bs) \\<and>\n       (b2 = robdd_one \\<or>\n        b2 = robdd_zero \\<or> b2 \\<in> subrobdds_set bs) \\<longrightarrow>\n       (robdd_get_id b1 = robdd_get_id b2) = (b1 = b2) \\<Longrightarrow>\n    \\<forall>b.\n       b \\<in> subrobdds_set bs \\<longrightarrow>\n       (\\<forall>f.\n           (f \\<longrightarrow>\n            (robdd_get_id b = Suc 0) = (b = robdd_one)) \\<and>\n           (\\<not> f \\<longrightarrow>\n            (robdd_get_id b = 0) = (b = robdd_zero)))", "apply (metis+) [3]"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>b1 b2.\n       (b1 = robdd_one \\<or>\n        b1 = robdd_zero \\<or> b1 \\<in> subrobdds_set bs) \\<and>\n       (b2 = robdd_one \\<or>\n        b2 = robdd_zero \\<or> b2 \\<in> subrobdds_set bs) \\<longrightarrow>\n       (robdd_get_id b1 = robdd_get_id b2) = (b1 = b2) \\<Longrightarrow>\n    \\<forall>b.\n       b \\<in> subrobdds_set bs \\<longrightarrow>\n       (\\<forall>f.\n           (f \\<longrightarrow>\n            (robdd_get_id b = Suc 0) = (b = robdd_one)) \\<and>\n           (\\<not> f \\<longrightarrow>\n            (robdd_get_id b = 0) = (b = robdd_zero)))", "apply (metis One_nat_def robdd_get_id.simps(1))"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma robdd_invar_idsI:\nassumes \"\\<And>b1 b2. \\<lbrakk>b1 \\<in> (subrobdds_set bs); b2 \\<in> (subrobdds_set bs)\\<rbrakk> \\<Longrightarrow>\n                         (robdd_\\<alpha> b1 = robdd_\\<alpha> b2) \\<longleftrightarrow> (robdd_get_id b1 = robdd_get_id b2)\" \nshows \"robdd_invar_ids bs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. robdd_invar_ids bs", "using assms"], ["proof (prove)\nusing this:\n  \\<lbrakk>?b1.0 \\<in> subrobdds_set bs;\n   ?b2.0 \\<in> subrobdds_set bs\\<rbrakk>\n  \\<Longrightarrow> (robdd_\\<alpha> ?b1.0 = robdd_\\<alpha> ?b2.0) =\n                    (robdd_get_id ?b1.0 = robdd_get_id ?b2.0)\n\ngoal (1 subgoal):\n 1. robdd_invar_ids bs", "unfolding robdd_invar_ids_def"], ["proof (prove)\nusing this:\n  \\<lbrakk>?b1.0 \\<in> subrobdds_set bs;\n   ?b2.0 \\<in> subrobdds_set bs\\<rbrakk>\n  \\<Longrightarrow> (robdd_\\<alpha> ?b1.0 = robdd_\\<alpha> ?b2.0) =\n                    (robdd_get_id ?b1.0 = robdd_get_id ?b2.0)\n\ngoal (1 subgoal):\n 1. \\<forall>b1 b2.\n       b1 \\<in> subrobdds_set bs \\<and>\n       b2 \\<in> subrobdds_set bs \\<longrightarrow>\n       (robdd_\\<alpha> b1 = robdd_\\<alpha> b2) =\n       (robdd_get_id b1 = robdd_get_id b2)", "by blast"], ["", "lemma robdd_invar_idsD:\nassumes \"robdd_invar_ids bs\"\nassumes \"b1 \\<in> (subrobdds_set bs)\"\n        \"b2 \\<in> (subrobdds_set bs)\"\nshows \"robdd_\\<alpha> b1 = robdd_\\<alpha> b2 \\<longleftrightarrow> robdd_get_id b1 = robdd_get_id b2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (robdd_\\<alpha> b1 = robdd_\\<alpha> b2) =\n    (robdd_get_id b1 = robdd_get_id b2)", "using assms"], ["proof (prove)\nusing this:\n  robdd_invar_ids bs\n  b1 \\<in> subrobdds_set bs\n  b2 \\<in> subrobdds_set bs\n\ngoal (1 subgoal):\n 1. (robdd_\\<alpha> b1 = robdd_\\<alpha> b2) =\n    (robdd_get_id b1 = robdd_get_id b2)", "unfolding robdd_invar_ids_def"], ["proof (prove)\nusing this:\n  \\<forall>b1 b2.\n     b1 \\<in> subrobdds_set bs \\<and>\n     b2 \\<in> subrobdds_set bs \\<longrightarrow>\n     (robdd_\\<alpha> b1 = robdd_\\<alpha> b2) =\n     (robdd_get_id b1 = robdd_get_id b2)\n  b1 \\<in> subrobdds_set bs\n  b2 \\<in> subrobdds_set bs\n\ngoal (1 subgoal):\n 1. (robdd_\\<alpha> b1 = robdd_\\<alpha> b2) =\n    (robdd_get_id b1 = robdd_get_id b2)", "by blast"], ["", "lemma robdd_invar_ids_subset_rule :\n  \"robdd_invar_ids bs1 \\<Longrightarrow> bs2 \\<subseteq> bs1 \\<Longrightarrow> robdd_invar_ids bs2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>robdd_invar_ids bs1; bs2 \\<subseteq> bs1\\<rbrakk>\n    \\<Longrightarrow> robdd_invar_ids bs2", "by (simp add: robdd_invar_ids_def subset_iff subrobdds_set_def) metis"], ["", "lemma robdd_invar_ids_expand :\nshows \"robdd_invar_ids (subrobdds_set bs) = robdd_invar_ids bs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. robdd_invar_ids (subrobdds_set bs) = robdd_invar_ids bs", "by (simp add: robdd_invar_ids_def subrobdds_set_idempot)"], ["", "lemma robdd_invar_ids_subset_subrobdds_rule :\nassumes pre: \"\\<And>b2. b2 \\<in> bs2 \\<Longrightarrow> \\<exists>b1 \\<in> bs1. b2 \\<in> (subrobdds b1)\"\n    and invar_bs1: \"robdd_invar_ids bs1\"\nshows \"robdd_invar_ids bs2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. robdd_invar_ids bs2", "apply (rule robdd_invar_ids_subset_rule [of \"subrobdds_set bs1\"])"], ["proof (prove)\ngoal (2 subgoals):\n 1. robdd_invar_ids (subrobdds_set bs1)\n 2. bs2 \\<subseteq> subrobdds_set bs1", "apply (simp add: robdd_invar_ids_expand invar_bs1)"], ["proof (prove)\ngoal (1 subgoal):\n 1. bs2 \\<subseteq> subrobdds_set bs1", "apply (simp add: subset_iff pre subrobdds_set_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "text \\<open>If two ROBDDs are equal up to ids and then they are in fact equal.\\<close>"], ["", "lemma robdd_invar_ids_equiv_implies_eq:\nassumes \"robdd_invar_ids bs\"\n    and \"b1 \\<in> bs\" \"b2 \\<in> bs\"\n    and \"robdd_equiv b1 b2\"\n  shows \"b1 = b2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. b1 = b2", "using assms"], ["proof (prove)\nusing this:\n  robdd_invar_ids bs\n  b1 \\<in> bs\n  b2 \\<in> bs\n  robdd_equiv b1 b2\n\ngoal (1 subgoal):\n 1. b1 = b2", "proof (induct b1 arbitrary: b2 bs)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x b2 bs.\n       \\<lbrakk>robdd_invar_ids bs; robdd_leaf x \\<in> bs; b2 \\<in> bs;\n        robdd_equiv (robdd_leaf x) b2\\<rbrakk>\n       \\<Longrightarrow> robdd_leaf x = b2\n 2. \\<And>x1a b11 x3 b12 b2 bs.\n       \\<lbrakk>\\<And>b2 bs.\n                   \\<lbrakk>robdd_invar_ids bs; b11 \\<in> bs; b2 \\<in> bs;\n                    robdd_equiv b11 b2\\<rbrakk>\n                   \\<Longrightarrow> b11 = b2;\n        \\<And>b2 bs.\n           \\<lbrakk>robdd_invar_ids bs; b12 \\<in> bs; b2 \\<in> bs;\n            robdd_equiv b12 b2\\<rbrakk>\n           \\<Longrightarrow> b12 = b2;\n        robdd_invar_ids bs; robdd_var x1a b11 x3 b12 \\<in> bs; b2 \\<in> bs;\n        robdd_equiv (robdd_var x1a b11 x3 b12) b2\\<rbrakk>\n       \\<Longrightarrow> robdd_var x1a b11 x3 b12 = b2", "case (robdd_var i l v r)"], ["proof (state)\nthis:\n  \\<lbrakk>robdd_invar_ids ?bs; l \\<in> ?bs; ?b2.0 \\<in> ?bs;\n   robdd_equiv l ?b2.0\\<rbrakk>\n  \\<Longrightarrow> l = ?b2.0\n  \\<lbrakk>robdd_invar_ids ?bs; r \\<in> ?bs; ?b2.0 \\<in> ?bs;\n   robdd_equiv r ?b2.0\\<rbrakk>\n  \\<Longrightarrow> r = ?b2.0\n  robdd_invar_ids bs\n  robdd_var i l v r \\<in> bs\n  b2 \\<in> bs\n  robdd_equiv (robdd_var i l v r) b2\n\ngoal (2 subgoals):\n 1. \\<And>x b2 bs.\n       \\<lbrakk>robdd_invar_ids bs; robdd_leaf x \\<in> bs; b2 \\<in> bs;\n        robdd_equiv (robdd_leaf x) b2\\<rbrakk>\n       \\<Longrightarrow> robdd_leaf x = b2\n 2. \\<And>x1a b11 x3 b12 b2 bs.\n       \\<lbrakk>\\<And>b2 bs.\n                   \\<lbrakk>robdd_invar_ids bs; b11 \\<in> bs; b2 \\<in> bs;\n                    robdd_equiv b11 b2\\<rbrakk>\n                   \\<Longrightarrow> b11 = b2;\n        \\<And>b2 bs.\n           \\<lbrakk>robdd_invar_ids bs; b12 \\<in> bs; b2 \\<in> bs;\n            robdd_equiv b12 b2\\<rbrakk>\n           \\<Longrightarrow> b12 = b2;\n        robdd_invar_ids bs; robdd_var x1a b11 x3 b12 \\<in> bs; b2 \\<in> bs;\n        robdd_equiv (robdd_var x1a b11 x3 b12) b2\\<rbrakk>\n       \\<Longrightarrow> robdd_var x1a b11 x3 b12 = b2", "note indhyp_l = robdd_var(1)"], ["proof (state)\nthis:\n  \\<lbrakk>robdd_invar_ids ?bs; l \\<in> ?bs; ?b2.0 \\<in> ?bs;\n   robdd_equiv l ?b2.0\\<rbrakk>\n  \\<Longrightarrow> l = ?b2.0\n\ngoal (2 subgoals):\n 1. \\<And>x b2 bs.\n       \\<lbrakk>robdd_invar_ids bs; robdd_leaf x \\<in> bs; b2 \\<in> bs;\n        robdd_equiv (robdd_leaf x) b2\\<rbrakk>\n       \\<Longrightarrow> robdd_leaf x = b2\n 2. \\<And>x1a b11 x3 b12 b2 bs.\n       \\<lbrakk>\\<And>b2 bs.\n                   \\<lbrakk>robdd_invar_ids bs; b11 \\<in> bs; b2 \\<in> bs;\n                    robdd_equiv b11 b2\\<rbrakk>\n                   \\<Longrightarrow> b11 = b2;\n        \\<And>b2 bs.\n           \\<lbrakk>robdd_invar_ids bs; b12 \\<in> bs; b2 \\<in> bs;\n            robdd_equiv b12 b2\\<rbrakk>\n           \\<Longrightarrow> b12 = b2;\n        robdd_invar_ids bs; robdd_var x1a b11 x3 b12 \\<in> bs; b2 \\<in> bs;\n        robdd_equiv (robdd_var x1a b11 x3 b12) b2\\<rbrakk>\n       \\<Longrightarrow> robdd_var x1a b11 x3 b12 = b2", "note indhyp_r = robdd_var(2)"], ["proof (state)\nthis:\n  \\<lbrakk>robdd_invar_ids ?bs; r \\<in> ?bs; ?b2.0 \\<in> ?bs;\n   robdd_equiv r ?b2.0\\<rbrakk>\n  \\<Longrightarrow> r = ?b2.0\n\ngoal (2 subgoals):\n 1. \\<And>x b2 bs.\n       \\<lbrakk>robdd_invar_ids bs; robdd_leaf x \\<in> bs; b2 \\<in> bs;\n        robdd_equiv (robdd_leaf x) b2\\<rbrakk>\n       \\<Longrightarrow> robdd_leaf x = b2\n 2. \\<And>x1a b11 x3 b12 b2 bs.\n       \\<lbrakk>\\<And>b2 bs.\n                   \\<lbrakk>robdd_invar_ids bs; b11 \\<in> bs; b2 \\<in> bs;\n                    robdd_equiv b11 b2\\<rbrakk>\n                   \\<Longrightarrow> b11 = b2;\n        \\<And>b2 bs.\n           \\<lbrakk>robdd_invar_ids bs; b12 \\<in> bs; b2 \\<in> bs;\n            robdd_equiv b12 b2\\<rbrakk>\n           \\<Longrightarrow> b12 = b2;\n        robdd_invar_ids bs; robdd_var x1a b11 x3 b12 \\<in> bs; b2 \\<in> bs;\n        robdd_equiv (robdd_var x1a b11 x3 b12) b2\\<rbrakk>\n       \\<Longrightarrow> robdd_var x1a b11 x3 b12 = b2", "note invar_ids = robdd_var(3)"], ["proof (state)\nthis:\n  robdd_invar_ids bs\n\ngoal (2 subgoals):\n 1. \\<And>x b2 bs.\n       \\<lbrakk>robdd_invar_ids bs; robdd_leaf x \\<in> bs; b2 \\<in> bs;\n        robdd_equiv (robdd_leaf x) b2\\<rbrakk>\n       \\<Longrightarrow> robdd_leaf x = b2\n 2. \\<And>x1a b11 x3 b12 b2 bs.\n       \\<lbrakk>\\<And>b2 bs.\n                   \\<lbrakk>robdd_invar_ids bs; b11 \\<in> bs; b2 \\<in> bs;\n                    robdd_equiv b11 b2\\<rbrakk>\n                   \\<Longrightarrow> b11 = b2;\n        \\<And>b2 bs.\n           \\<lbrakk>robdd_invar_ids bs; b12 \\<in> bs; b2 \\<in> bs;\n            robdd_equiv b12 b2\\<rbrakk>\n           \\<Longrightarrow> b12 = b2;\n        robdd_invar_ids bs; robdd_var x1a b11 x3 b12 \\<in> bs; b2 \\<in> bs;\n        robdd_equiv (robdd_var x1a b11 x3 b12) b2\\<rbrakk>\n       \\<Longrightarrow> robdd_var x1a b11 x3 b12 = b2", "note in_bs = robdd_var(4,5)"], ["proof (state)\nthis:\n  robdd_var i l v r \\<in> bs\n  b2 \\<in> bs\n\ngoal (2 subgoals):\n 1. \\<And>x b2 bs.\n       \\<lbrakk>robdd_invar_ids bs; robdd_leaf x \\<in> bs; b2 \\<in> bs;\n        robdd_equiv (robdd_leaf x) b2\\<rbrakk>\n       \\<Longrightarrow> robdd_leaf x = b2\n 2. \\<And>x1a b11 x3 b12 b2 bs.\n       \\<lbrakk>\\<And>b2 bs.\n                   \\<lbrakk>robdd_invar_ids bs; b11 \\<in> bs; b2 \\<in> bs;\n                    robdd_equiv b11 b2\\<rbrakk>\n                   \\<Longrightarrow> b11 = b2;\n        \\<And>b2 bs.\n           \\<lbrakk>robdd_invar_ids bs; b12 \\<in> bs; b2 \\<in> bs;\n            robdd_equiv b12 b2\\<rbrakk>\n           \\<Longrightarrow> b12 = b2;\n        robdd_invar_ids bs; robdd_var x1a b11 x3 b12 \\<in> bs; b2 \\<in> bs;\n        robdd_equiv (robdd_var x1a b11 x3 b12) b2\\<rbrakk>\n       \\<Longrightarrow> robdd_var x1a b11 x3 b12 = b2", "note equiv_b2 = robdd_var(6)"], ["proof (state)\nthis:\n  robdd_equiv (robdd_var i l v r) b2\n\ngoal (2 subgoals):\n 1. \\<And>x b2 bs.\n       \\<lbrakk>robdd_invar_ids bs; robdd_leaf x \\<in> bs; b2 \\<in> bs;\n        robdd_equiv (robdd_leaf x) b2\\<rbrakk>\n       \\<Longrightarrow> robdd_leaf x = b2\n 2. \\<And>x1a b11 x3 b12 b2 bs.\n       \\<lbrakk>\\<And>b2 bs.\n                   \\<lbrakk>robdd_invar_ids bs; b11 \\<in> bs; b2 \\<in> bs;\n                    robdd_equiv b11 b2\\<rbrakk>\n                   \\<Longrightarrow> b11 = b2;\n        \\<And>b2 bs.\n           \\<lbrakk>robdd_invar_ids bs; b12 \\<in> bs; b2 \\<in> bs;\n            robdd_equiv b12 b2\\<rbrakk>\n           \\<Longrightarrow> b12 = b2;\n        robdd_invar_ids bs; robdd_var x1a b11 x3 b12 \\<in> bs; b2 \\<in> bs;\n        robdd_equiv (robdd_var x1a b11 x3 b12) b2\\<rbrakk>\n       \\<Longrightarrow> robdd_var x1a b11 x3 b12 = b2", "from equiv_b2"], ["proof (chain)\npicking this:\n  robdd_equiv (robdd_var i l v r) b2", "obtain i' l' r' where\n    b2_eq: \"b2 = robdd_var i' l' v r'\" and\n    equiv_l: \"robdd_equiv l l'\" and\n    equiv_r: \"robdd_equiv r r'\""], ["proof (prove)\nusing this:\n  robdd_equiv (robdd_var i l v r) b2\n\ngoal (1 subgoal):\n 1. (\\<And>i' l' r'.\n        \\<lbrakk>b2 = robdd_var i' l' v r'; robdd_equiv l l';\n         robdd_equiv r r'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding robdd_equiv.simps"], ["proof (prove)\nusing this:\n  \\<exists>i' l' r'.\n     b2 = robdd_var i' l' v r' \\<and>\n     robdd_equiv l l' \\<and> robdd_equiv r r'\n\ngoal (1 subgoal):\n 1. (\\<And>i' l' r'.\n        \\<lbrakk>b2 = robdd_var i' l' v r'; robdd_equiv l l';\n         robdd_equiv r r'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  b2 = robdd_var i' l' v r'\n  robdd_equiv l l'\n  robdd_equiv r r'\n\ngoal (2 subgoals):\n 1. \\<And>x b2 bs.\n       \\<lbrakk>robdd_invar_ids bs; robdd_leaf x \\<in> bs; b2 \\<in> bs;\n        robdd_equiv (robdd_leaf x) b2\\<rbrakk>\n       \\<Longrightarrow> robdd_leaf x = b2\n 2. \\<And>x1a b11 x3 b12 b2 bs.\n       \\<lbrakk>\\<And>b2 bs.\n                   \\<lbrakk>robdd_invar_ids bs; b11 \\<in> bs; b2 \\<in> bs;\n                    robdd_equiv b11 b2\\<rbrakk>\n                   \\<Longrightarrow> b11 = b2;\n        \\<And>b2 bs.\n           \\<lbrakk>robdd_invar_ids bs; b12 \\<in> bs; b2 \\<in> bs;\n            robdd_equiv b12 b2\\<rbrakk>\n           \\<Longrightarrow> b12 = b2;\n        robdd_invar_ids bs; robdd_var x1a b11 x3 b12 \\<in> bs; b2 \\<in> bs;\n        robdd_equiv (robdd_var x1a b11 x3 b12) b2\\<rbrakk>\n       \\<Longrightarrow> robdd_var x1a b11 x3 b12 = b2", "have invar_ids': \"robdd_invar_ids {robdd_var i l v r, b2}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. robdd_invar_ids {robdd_var i l v r, b2}", "apply (rule robdd_invar_ids_subset_subrobdds_rule[OF _ invar_ids])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>b2.\n       b2 \\<in> {robdd_var i l v r, b2} \\<Longrightarrow>\n       \\<exists>b1\\<in>bs. b2 \\<in> subrobdds b1", "apply (auto simp add: subrobdds_alt_def in_bs)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  robdd_invar_ids {robdd_var i l v r, b2}\n\ngoal (2 subgoals):\n 1. \\<And>x b2 bs.\n       \\<lbrakk>robdd_invar_ids bs; robdd_leaf x \\<in> bs; b2 \\<in> bs;\n        robdd_equiv (robdd_leaf x) b2\\<rbrakk>\n       \\<Longrightarrow> robdd_leaf x = b2\n 2. \\<And>x1a b11 x3 b12 b2 bs.\n       \\<lbrakk>\\<And>b2 bs.\n                   \\<lbrakk>robdd_invar_ids bs; b11 \\<in> bs; b2 \\<in> bs;\n                    robdd_equiv b11 b2\\<rbrakk>\n                   \\<Longrightarrow> b11 = b2;\n        \\<And>b2 bs.\n           \\<lbrakk>robdd_invar_ids bs; b12 \\<in> bs; b2 \\<in> bs;\n            robdd_equiv b12 b2\\<rbrakk>\n           \\<Longrightarrow> b12 = b2;\n        robdd_invar_ids bs; robdd_var x1a b11 x3 b12 \\<in> bs; b2 \\<in> bs;\n        robdd_equiv (robdd_var x1a b11 x3 b12) b2\\<rbrakk>\n       \\<Longrightarrow> robdd_var x1a b11 x3 b12 = b2", "have invar_ids_sub: \"robdd_invar_ids {l, r, l', r'}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. robdd_invar_ids {l, r, l', r'}", "apply (rule robdd_invar_ids_subset_subrobdds_rule[OF _ invar_ids'])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>b2.\n       b2 \\<in> {l, r, l', r'} \\<Longrightarrow>\n       \\<exists>b1\\<in>{robdd_var i l v r, b2}. b2 \\<in> subrobdds b1", "apply (auto simp add: b2_eq subrobdds_alt_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  robdd_invar_ids {l, r, l', r'}\n\ngoal (2 subgoals):\n 1. \\<And>x b2 bs.\n       \\<lbrakk>robdd_invar_ids bs; robdd_leaf x \\<in> bs; b2 \\<in> bs;\n        robdd_equiv (robdd_leaf x) b2\\<rbrakk>\n       \\<Longrightarrow> robdd_leaf x = b2\n 2. \\<And>x1a b11 x3 b12 b2 bs.\n       \\<lbrakk>\\<And>b2 bs.\n                   \\<lbrakk>robdd_invar_ids bs; b11 \\<in> bs; b2 \\<in> bs;\n                    robdd_equiv b11 b2\\<rbrakk>\n                   \\<Longrightarrow> b11 = b2;\n        \\<And>b2 bs.\n           \\<lbrakk>robdd_invar_ids bs; b12 \\<in> bs; b2 \\<in> bs;\n            robdd_equiv b12 b2\\<rbrakk>\n           \\<Longrightarrow> b12 = b2;\n        robdd_invar_ids bs; robdd_var x1a b11 x3 b12 \\<in> bs; b2 \\<in> bs;\n        robdd_equiv (robdd_var x1a b11 x3 b12) b2\\<rbrakk>\n       \\<Longrightarrow> robdd_var x1a b11 x3 b12 = b2", "from indhyp_l [OF invar_ids_sub _ _ equiv_l] \n       indhyp_r [OF invar_ids_sub _ _ equiv_r]"], ["proof (chain)\npicking this:\n  \\<lbrakk>l \\<in> {l, r, l', r'}; l' \\<in> {l, r, l', r'}\\<rbrakk>\n  \\<Longrightarrow> l = l'\n  \\<lbrakk>r \\<in> {l, r, l', r'}; r' \\<in> {l, r, l', r'}\\<rbrakk>\n  \\<Longrightarrow> r = r'", "have l'_eq[simp]: \"l' = l\" and  r'_eq[simp]: \"r' = r\""], ["proof (prove)\nusing this:\n  \\<lbrakk>l \\<in> {l, r, l', r'}; l' \\<in> {l, r, l', r'}\\<rbrakk>\n  \\<Longrightarrow> l = l'\n  \\<lbrakk>r \\<in> {l, r, l', r'}; r' \\<in> {l, r, l', r'}\\<rbrakk>\n  \\<Longrightarrow> r = r'\n\ngoal (1 subgoal):\n 1. l' = l &&& r' = r", "by simp_all"], ["proof (state)\nthis:\n  l' = l\n  r' = r\n\ngoal (2 subgoals):\n 1. \\<And>x b2 bs.\n       \\<lbrakk>robdd_invar_ids bs; robdd_leaf x \\<in> bs; b2 \\<in> bs;\n        robdd_equiv (robdd_leaf x) b2\\<rbrakk>\n       \\<Longrightarrow> robdd_leaf x = b2\n 2. \\<And>x1a b11 x3 b12 b2 bs.\n       \\<lbrakk>\\<And>b2 bs.\n                   \\<lbrakk>robdd_invar_ids bs; b11 \\<in> bs; b2 \\<in> bs;\n                    robdd_equiv b11 b2\\<rbrakk>\n                   \\<Longrightarrow> b11 = b2;\n        \\<And>b2 bs.\n           \\<lbrakk>robdd_invar_ids bs; b12 \\<in> bs; b2 \\<in> bs;\n            robdd_equiv b12 b2\\<rbrakk>\n           \\<Longrightarrow> b12 = b2;\n        robdd_invar_ids bs; robdd_var x1a b11 x3 b12 \\<in> bs; b2 \\<in> bs;\n        robdd_equiv (robdd_var x1a b11 x3 b12) b2\\<rbrakk>\n       \\<Longrightarrow> robdd_var x1a b11 x3 b12 = b2", "from robdd_invar_idsD[OF invar_ids', of \"robdd_var i l v r\" b2]"], ["proof (chain)\npicking this:\n  \\<lbrakk>robdd_var i l v r \\<in> subrobdds_set {robdd_var i l v r, b2};\n   b2 \\<in> subrobdds_set {robdd_var i l v r, b2}\\<rbrakk>\n  \\<Longrightarrow> (robdd_\\<alpha> (robdd_var i l v r) =\n                     robdd_\\<alpha> b2) =\n                    (robdd_get_id (robdd_var i l v r) = robdd_get_id b2)", "have i'_eq[simp]: \"i' = i\""], ["proof (prove)\nusing this:\n  \\<lbrakk>robdd_var i l v r \\<in> subrobdds_set {robdd_var i l v r, b2};\n   b2 \\<in> subrobdds_set {robdd_var i l v r, b2}\\<rbrakk>\n  \\<Longrightarrow> (robdd_\\<alpha> (robdd_var i l v r) =\n                     robdd_\\<alpha> b2) =\n                    (robdd_get_id (robdd_var i l v r) = robdd_get_id b2)\n\ngoal (1 subgoal):\n 1. i' = i", "by (simp add: b2_eq robdd_\\<alpha>_def subrobdds_set_def)"], ["proof (state)\nthis:\n  i' = i\n\ngoal (2 subgoals):\n 1. \\<And>x b2 bs.\n       \\<lbrakk>robdd_invar_ids bs; robdd_leaf x \\<in> bs; b2 \\<in> bs;\n        robdd_equiv (robdd_leaf x) b2\\<rbrakk>\n       \\<Longrightarrow> robdd_leaf x = b2\n 2. \\<And>x1a b11 x3 b12 b2 bs.\n       \\<lbrakk>\\<And>b2 bs.\n                   \\<lbrakk>robdd_invar_ids bs; b11 \\<in> bs; b2 \\<in> bs;\n                    robdd_equiv b11 b2\\<rbrakk>\n                   \\<Longrightarrow> b11 = b2;\n        \\<And>b2 bs.\n           \\<lbrakk>robdd_invar_ids bs; b12 \\<in> bs; b2 \\<in> bs;\n            robdd_equiv b12 b2\\<rbrakk>\n           \\<Longrightarrow> b12 = b2;\n        robdd_invar_ids bs; robdd_var x1a b11 x3 b12 \\<in> bs; b2 \\<in> bs;\n        robdd_equiv (robdd_var x1a b11 x3 b12) b2\\<rbrakk>\n       \\<Longrightarrow> robdd_var x1a b11 x3 b12 = b2", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. robdd_var i l v r = b2", "by (simp add: b2_eq)"], ["proof (state)\nthis:\n  robdd_var i l v r = b2\n\ngoal (1 subgoal):\n 1. \\<And>x b2 bs.\n       \\<lbrakk>robdd_invar_ids bs; robdd_leaf x \\<in> bs; b2 \\<in> bs;\n        robdd_equiv (robdd_leaf x) b2\\<rbrakk>\n       \\<Longrightarrow> robdd_leaf x = b2", "qed simp_all"], ["", "subsubsection \\<open>Variable order\\<close>"], ["", "text \\<open>We are formalising reduced \\emph{ordered} binary decision diagrams. Therefore, the\nvariables need to appear in order.\\<close>"], ["", "primrec robdd_invar_vars_greater where\n   \"robdd_invar_vars_greater n (robdd_leaf f) = True\"\n | \"robdd_invar_vars_greater n (robdd_var i l v r) = \n    (n \\<le> v \\<and> (robdd_invar_vars_greater (Suc v) l) \\<and> (robdd_invar_vars_greater (Suc v) r))\""], ["", "definition robdd_invar_vars where\n   \"robdd_invar_vars b = robdd_invar_vars_greater 0 b\""], ["", "lemma robdd_invar_vars_greater___weaken :\n   \"robdd_invar_vars_greater n b \\<Longrightarrow> n' \\<le> n \\<Longrightarrow> robdd_invar_vars_greater n' b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>robdd_invar_vars_greater n b; n' \\<le> n\\<rbrakk>\n    \\<Longrightarrow> robdd_invar_vars_greater n' b", "by (cases b) (simp_all)"], ["", "lemma robdd_invar_vars_impl: \n  \"robdd_invar_vars_greater n robdd  \\<Longrightarrow> robdd_invar_vars robdd\""], ["proof (prove)\ngoal (1 subgoal):\n 1. robdd_invar_vars_greater n robdd \\<Longrightarrow>\n    robdd_invar_vars robdd", "unfolding robdd_invar_vars_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. robdd_invar_vars_greater n robdd \\<Longrightarrow>\n    robdd_invar_vars_greater 0 robdd", "by (rule robdd_invar_vars_greater___weaken[of n]) (simp_all)"], ["", "subsubsection \\<open>Reduced\\<close>"], ["", "text \\<open>We are formalising \\emph{reduced} ordered binary decision diagrams. Therefore, it should\nbe reduced.\\<close>"], ["", "primrec robdd_invar_reduced where\n   \"robdd_invar_reduced (robdd_leaf f) = True\"\n | \"robdd_invar_reduced (robdd_var i l v r) =       \n     (\\<not>(robdd_equiv l r) \\<and> (robdd_invar_reduced l) \\<and> (robdd_invar_reduced r))\""], ["", "lemma robdd_invar_reduced_leaf [simp]: \n   \"robdd_invar_reduced (robdd_leaf v) = True\""], ["proof (prove)\ngoal (1 subgoal):\n 1. robdd_invar_reduced (robdd_leaf v) = True", "by (cases v) (simp_all)"], ["", "lemma subrobdds_leaf_in_reduced: \n\"robdd_invar_reduced b \\<Longrightarrow> \\<not>(robdd_is_leaf b) \\<Longrightarrow> (robdd_one \\<in> subrobdds b \\<and> robdd_zero \\<in> subrobdds b)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>robdd_invar_reduced b; \\<not> robdd_is_leaf b\\<rbrakk>\n    \\<Longrightarrow> robdd_one \\<in> subrobdds b \\<and>\n                      robdd_zero \\<in> subrobdds b", "proof (induct b)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>robdd_invar_reduced (robdd_leaf x);\n        \\<not> robdd_is_leaf (robdd_leaf x)\\<rbrakk>\n       \\<Longrightarrow> robdd_one \\<in> subrobdds (robdd_leaf x) \\<and>\n                         robdd_zero \\<in> subrobdds (robdd_leaf x)\n 2. \\<And>x1a b1 x3 b2.\n       \\<lbrakk>\\<lbrakk>robdd_invar_reduced b1;\n                 \\<not> robdd_is_leaf b1\\<rbrakk>\n                \\<Longrightarrow> robdd_one \\<in> subrobdds b1 \\<and>\n                                  robdd_zero \\<in> subrobdds b1;\n        \\<lbrakk>robdd_invar_reduced b2; \\<not> robdd_is_leaf b2\\<rbrakk>\n        \\<Longrightarrow> robdd_one \\<in> subrobdds b2 \\<and>\n                          robdd_zero \\<in> subrobdds b2;\n        robdd_invar_reduced (robdd_var x1a b1 x3 b2);\n        \\<not> robdd_is_leaf (robdd_var x1a b1 x3 b2)\\<rbrakk>\n       \\<Longrightarrow> robdd_one\n                         \\<in> subrobdds (robdd_var x1a b1 x3 b2) \\<and>\n                         robdd_zero \\<in> subrobdds (robdd_var x1a b1 x3 b2)", "case (robdd_leaf f)"], ["proof (state)\nthis:\n  robdd_invar_reduced (robdd_leaf f)\n  \\<not> robdd_is_leaf (robdd_leaf f)\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>robdd_invar_reduced (robdd_leaf x);\n        \\<not> robdd_is_leaf (robdd_leaf x)\\<rbrakk>\n       \\<Longrightarrow> robdd_one \\<in> subrobdds (robdd_leaf x) \\<and>\n                         robdd_zero \\<in> subrobdds (robdd_leaf x)\n 2. \\<And>x1a b1 x3 b2.\n       \\<lbrakk>\\<lbrakk>robdd_invar_reduced b1;\n                 \\<not> robdd_is_leaf b1\\<rbrakk>\n                \\<Longrightarrow> robdd_one \\<in> subrobdds b1 \\<and>\n                                  robdd_zero \\<in> subrobdds b1;\n        \\<lbrakk>robdd_invar_reduced b2; \\<not> robdd_is_leaf b2\\<rbrakk>\n        \\<Longrightarrow> robdd_one \\<in> subrobdds b2 \\<and>\n                          robdd_zero \\<in> subrobdds b2;\n        robdd_invar_reduced (robdd_var x1a b1 x3 b2);\n        \\<not> robdd_is_leaf (robdd_var x1a b1 x3 b2)\\<rbrakk>\n       \\<Longrightarrow> robdd_one\n                         \\<in> subrobdds (robdd_var x1a b1 x3 b2) \\<and>\n                         robdd_zero \\<in> subrobdds (robdd_var x1a b1 x3 b2)", "thus ?case"], ["proof (prove)\nusing this:\n  robdd_invar_reduced (robdd_leaf f)\n  \\<not> robdd_is_leaf (robdd_leaf f)\n\ngoal (1 subgoal):\n 1. robdd_one \\<in> subrobdds (robdd_leaf f) \\<and>\n    robdd_zero \\<in> subrobdds (robdd_leaf f)", "by simp"], ["proof (state)\nthis:\n  robdd_one \\<in> subrobdds (robdd_leaf f) \\<and>\n  robdd_zero \\<in> subrobdds (robdd_leaf f)\n\ngoal (1 subgoal):\n 1. \\<And>x1a b1 x3 b2.\n       \\<lbrakk>\\<lbrakk>robdd_invar_reduced b1;\n                 \\<not> robdd_is_leaf b1\\<rbrakk>\n                \\<Longrightarrow> robdd_one \\<in> subrobdds b1 \\<and>\n                                  robdd_zero \\<in> subrobdds b1;\n        \\<lbrakk>robdd_invar_reduced b2; \\<not> robdd_is_leaf b2\\<rbrakk>\n        \\<Longrightarrow> robdd_one \\<in> subrobdds b2 \\<and>\n                          robdd_zero \\<in> subrobdds b2;\n        robdd_invar_reduced (robdd_var x1a b1 x3 b2);\n        \\<not> robdd_is_leaf (robdd_var x1a b1 x3 b2)\\<rbrakk>\n       \\<Longrightarrow> robdd_one\n                         \\<in> subrobdds (robdd_var x1a b1 x3 b2) \\<and>\n                         robdd_zero \\<in> subrobdds (robdd_var x1a b1 x3 b2)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x1a b1 x3 b2.\n       \\<lbrakk>\\<lbrakk>robdd_invar_reduced b1;\n                 \\<not> robdd_is_leaf b1\\<rbrakk>\n                \\<Longrightarrow> robdd_one \\<in> subrobdds b1 \\<and>\n                                  robdd_zero \\<in> subrobdds b1;\n        \\<lbrakk>robdd_invar_reduced b2; \\<not> robdd_is_leaf b2\\<rbrakk>\n        \\<Longrightarrow> robdd_one \\<in> subrobdds b2 \\<and>\n                          robdd_zero \\<in> subrobdds b2;\n        robdd_invar_reduced (robdd_var x1a b1 x3 b2);\n        \\<not> robdd_is_leaf (robdd_var x1a b1 x3 b2)\\<rbrakk>\n       \\<Longrightarrow> robdd_one\n                         \\<in> subrobdds (robdd_var x1a b1 x3 b2) \\<and>\n                         robdd_zero \\<in> subrobdds (robdd_var x1a b1 x3 b2)", "case (robdd_var i l v r)"], ["proof (state)\nthis:\n  \\<lbrakk>robdd_invar_reduced l; \\<not> robdd_is_leaf l\\<rbrakk>\n  \\<Longrightarrow> robdd_one \\<in> subrobdds l \\<and>\n                    robdd_zero \\<in> subrobdds l\n  \\<lbrakk>robdd_invar_reduced r; \\<not> robdd_is_leaf r\\<rbrakk>\n  \\<Longrightarrow> robdd_one \\<in> subrobdds r \\<and>\n                    robdd_zero \\<in> subrobdds r\n  robdd_invar_reduced (robdd_var i l v r)\n  \\<not> robdd_is_leaf (robdd_var i l v r)\n\ngoal (1 subgoal):\n 1. \\<And>x1a b1 x3 b2.\n       \\<lbrakk>\\<lbrakk>robdd_invar_reduced b1;\n                 \\<not> robdd_is_leaf b1\\<rbrakk>\n                \\<Longrightarrow> robdd_one \\<in> subrobdds b1 \\<and>\n                                  robdd_zero \\<in> subrobdds b1;\n        \\<lbrakk>robdd_invar_reduced b2; \\<not> robdd_is_leaf b2\\<rbrakk>\n        \\<Longrightarrow> robdd_one \\<in> subrobdds b2 \\<and>\n                          robdd_zero \\<in> subrobdds b2;\n        robdd_invar_reduced (robdd_var x1a b1 x3 b2);\n        \\<not> robdd_is_leaf (robdd_var x1a b1 x3 b2)\\<rbrakk>\n       \\<Longrightarrow> robdd_one\n                         \\<in> subrobdds (robdd_var x1a b1 x3 b2) \\<and>\n                         robdd_zero \\<in> subrobdds (robdd_var x1a b1 x3 b2)", "note reduced_b = robdd_var(3)"], ["proof (state)\nthis:\n  robdd_invar_reduced (robdd_var i l v r)\n\ngoal (1 subgoal):\n 1. \\<And>x1a b1 x3 b2.\n       \\<lbrakk>\\<lbrakk>robdd_invar_reduced b1;\n                 \\<not> robdd_is_leaf b1\\<rbrakk>\n                \\<Longrightarrow> robdd_one \\<in> subrobdds b1 \\<and>\n                                  robdd_zero \\<in> subrobdds b1;\n        \\<lbrakk>robdd_invar_reduced b2; \\<not> robdd_is_leaf b2\\<rbrakk>\n        \\<Longrightarrow> robdd_one \\<in> subrobdds b2 \\<and>\n                          robdd_zero \\<in> subrobdds b2;\n        robdd_invar_reduced (robdd_var x1a b1 x3 b2);\n        \\<not> robdd_is_leaf (robdd_var x1a b1 x3 b2)\\<rbrakk>\n       \\<Longrightarrow> robdd_one\n                         \\<in> subrobdds (robdd_var x1a b1 x3 b2) \\<and>\n                         robdd_zero \\<in> subrobdds (robdd_var x1a b1 x3 b2)", "from reduced_b"], ["proof (chain)\npicking this:\n  robdd_invar_reduced (robdd_var i l v r)", "have not_equiv_lr: \"\\<not> robdd_equiv l r\" and\n    reduced_l: \"robdd_invar_reduced l\" and reduced_r: \"robdd_invar_reduced r\""], ["proof (prove)\nusing this:\n  robdd_invar_reduced (robdd_var i l v r)\n\ngoal (1 subgoal):\n 1. \\<not> robdd_equiv l r &&&\n    robdd_invar_reduced l &&& robdd_invar_reduced r", "by simp_all"], ["proof (state)\nthis:\n  \\<not> robdd_equiv l r\n  robdd_invar_reduced l\n  robdd_invar_reduced r\n\ngoal (1 subgoal):\n 1. \\<And>x1a b1 x3 b2.\n       \\<lbrakk>\\<lbrakk>robdd_invar_reduced b1;\n                 \\<not> robdd_is_leaf b1\\<rbrakk>\n                \\<Longrightarrow> robdd_one \\<in> subrobdds b1 \\<and>\n                                  robdd_zero \\<in> subrobdds b1;\n        \\<lbrakk>robdd_invar_reduced b2; \\<not> robdd_is_leaf b2\\<rbrakk>\n        \\<Longrightarrow> robdd_one \\<in> subrobdds b2 \\<and>\n                          robdd_zero \\<in> subrobdds b2;\n        robdd_invar_reduced (robdd_var x1a b1 x3 b2);\n        \\<not> robdd_is_leaf (robdd_var x1a b1 x3 b2)\\<rbrakk>\n       \\<Longrightarrow> robdd_one\n                         \\<in> subrobdds (robdd_var x1a b1 x3 b2) \\<and>\n                         robdd_zero \\<in> subrobdds (robdd_var x1a b1 x3 b2)", "note indhyp_l = robdd_var(1)[OF reduced_l]"], ["proof (state)\nthis:\n  \\<not> robdd_is_leaf l \\<Longrightarrow>\n  robdd_one \\<in> subrobdds l \\<and> robdd_zero \\<in> subrobdds l\n\ngoal (1 subgoal):\n 1. \\<And>x1a b1 x3 b2.\n       \\<lbrakk>\\<lbrakk>robdd_invar_reduced b1;\n                 \\<not> robdd_is_leaf b1\\<rbrakk>\n                \\<Longrightarrow> robdd_one \\<in> subrobdds b1 \\<and>\n                                  robdd_zero \\<in> subrobdds b1;\n        \\<lbrakk>robdd_invar_reduced b2; \\<not> robdd_is_leaf b2\\<rbrakk>\n        \\<Longrightarrow> robdd_one \\<in> subrobdds b2 \\<and>\n                          robdd_zero \\<in> subrobdds b2;\n        robdd_invar_reduced (robdd_var x1a b1 x3 b2);\n        \\<not> robdd_is_leaf (robdd_var x1a b1 x3 b2)\\<rbrakk>\n       \\<Longrightarrow> robdd_one\n                         \\<in> subrobdds (robdd_var x1a b1 x3 b2) \\<and>\n                         robdd_zero \\<in> subrobdds (robdd_var x1a b1 x3 b2)", "note indhyp_r = robdd_var(2)[OF reduced_r]"], ["proof (state)\nthis:\n  \\<not> robdd_is_leaf r \\<Longrightarrow>\n  robdd_one \\<in> subrobdds r \\<and> robdd_zero \\<in> subrobdds r\n\ngoal (1 subgoal):\n 1. \\<And>x1a b1 x3 b2.\n       \\<lbrakk>\\<lbrakk>robdd_invar_reduced b1;\n                 \\<not> robdd_is_leaf b1\\<rbrakk>\n                \\<Longrightarrow> robdd_one \\<in> subrobdds b1 \\<and>\n                                  robdd_zero \\<in> subrobdds b1;\n        \\<lbrakk>robdd_invar_reduced b2; \\<not> robdd_is_leaf b2\\<rbrakk>\n        \\<Longrightarrow> robdd_one \\<in> subrobdds b2 \\<and>\n                          robdd_zero \\<in> subrobdds b2;\n        robdd_invar_reduced (robdd_var x1a b1 x3 b2);\n        \\<not> robdd_is_leaf (robdd_var x1a b1 x3 b2)\\<rbrakk>\n       \\<Longrightarrow> robdd_one\n                         \\<in> subrobdds (robdd_var x1a b1 x3 b2) \\<and>\n                         robdd_zero \\<in> subrobdds (robdd_var x1a b1 x3 b2)", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. robdd_one \\<in> subrobdds (robdd_var i l v r) \\<and>\n    robdd_zero \\<in> subrobdds (robdd_var i l v r)", "proof (cases \"robdd_is_leaf l\")"], ["proof (state)\ngoal (2 subgoals):\n 1. robdd_is_leaf l \\<Longrightarrow>\n    robdd_one \\<in> subrobdds (robdd_var i l v r) \\<and>\n    robdd_zero \\<in> subrobdds (robdd_var i l v r)\n 2. \\<not> robdd_is_leaf l \\<Longrightarrow>\n    robdd_one \\<in> subrobdds (robdd_var i l v r) \\<and>\n    robdd_zero \\<in> subrobdds (robdd_var i l v r)", "case False"], ["proof (state)\nthis:\n  \\<not> robdd_is_leaf l\n\ngoal (2 subgoals):\n 1. robdd_is_leaf l \\<Longrightarrow>\n    robdd_one \\<in> subrobdds (robdd_var i l v r) \\<and>\n    robdd_zero \\<in> subrobdds (robdd_var i l v r)\n 2. \\<not> robdd_is_leaf l \\<Longrightarrow>\n    robdd_one \\<in> subrobdds (robdd_var i l v r) \\<and>\n    robdd_zero \\<in> subrobdds (robdd_var i l v r)", "with indhyp_l"], ["proof (chain)\npicking this:\n  \\<not> robdd_is_leaf l \\<Longrightarrow>\n  robdd_one \\<in> subrobdds l \\<and> robdd_zero \\<in> subrobdds l\n  \\<not> robdd_is_leaf l", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<not> robdd_is_leaf l \\<Longrightarrow>\n  robdd_one \\<in> subrobdds l \\<and> robdd_zero \\<in> subrobdds l\n  \\<not> robdd_is_leaf l\n\ngoal (1 subgoal):\n 1. robdd_one \\<in> subrobdds (robdd_var i l v r) \\<and>\n    robdd_zero \\<in> subrobdds (robdd_var i l v r)", "by simp"], ["proof (state)\nthis:\n  robdd_one \\<in> subrobdds (robdd_var i l v r) \\<and>\n  robdd_zero \\<in> subrobdds (robdd_var i l v r)\n\ngoal (1 subgoal):\n 1. robdd_is_leaf l \\<Longrightarrow>\n    robdd_one \\<in> subrobdds (robdd_var i l v r) \\<and>\n    robdd_zero \\<in> subrobdds (robdd_var i l v r)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. robdd_is_leaf l \\<Longrightarrow>\n    robdd_one \\<in> subrobdds (robdd_var i l v r) \\<and>\n    robdd_zero \\<in> subrobdds (robdd_var i l v r)", "case True"], ["proof (state)\nthis:\n  robdd_is_leaf l\n\ngoal (1 subgoal):\n 1. robdd_is_leaf l \\<Longrightarrow>\n    robdd_one \\<in> subrobdds (robdd_var i l v r) \\<and>\n    robdd_zero \\<in> subrobdds (robdd_var i l v r)", "note l_is_leaf = this"], ["proof (state)\nthis:\n  robdd_is_leaf l\n\ngoal (1 subgoal):\n 1. robdd_is_leaf l \\<Longrightarrow>\n    robdd_one \\<in> subrobdds (robdd_var i l v r) \\<and>\n    robdd_zero \\<in> subrobdds (robdd_var i l v r)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. robdd_one \\<in> subrobdds (robdd_var i l v r) \\<and>\n    robdd_zero \\<in> subrobdds (robdd_var i l v r)", "proof (cases \"robdd_is_leaf r\")"], ["proof (state)\ngoal (2 subgoals):\n 1. robdd_is_leaf r \\<Longrightarrow>\n    robdd_one \\<in> subrobdds (robdd_var i l v r) \\<and>\n    robdd_zero \\<in> subrobdds (robdd_var i l v r)\n 2. \\<not> robdd_is_leaf r \\<Longrightarrow>\n    robdd_one \\<in> subrobdds (robdd_var i l v r) \\<and>\n    robdd_zero \\<in> subrobdds (robdd_var i l v r)", "case False"], ["proof (state)\nthis:\n  \\<not> robdd_is_leaf r\n\ngoal (2 subgoals):\n 1. robdd_is_leaf r \\<Longrightarrow>\n    robdd_one \\<in> subrobdds (robdd_var i l v r) \\<and>\n    robdd_zero \\<in> subrobdds (robdd_var i l v r)\n 2. \\<not> robdd_is_leaf r \\<Longrightarrow>\n    robdd_one \\<in> subrobdds (robdd_var i l v r) \\<and>\n    robdd_zero \\<in> subrobdds (robdd_var i l v r)", "with indhyp_r"], ["proof (chain)\npicking this:\n  \\<not> robdd_is_leaf r \\<Longrightarrow>\n  robdd_one \\<in> subrobdds r \\<and> robdd_zero \\<in> subrobdds r\n  \\<not> robdd_is_leaf r", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<not> robdd_is_leaf r \\<Longrightarrow>\n  robdd_one \\<in> subrobdds r \\<and> robdd_zero \\<in> subrobdds r\n  \\<not> robdd_is_leaf r\n\ngoal (1 subgoal):\n 1. robdd_one \\<in> subrobdds (robdd_var i l v r) \\<and>\n    robdd_zero \\<in> subrobdds (robdd_var i l v r)", "by simp"], ["proof (state)\nthis:\n  robdd_one \\<in> subrobdds (robdd_var i l v r) \\<and>\n  robdd_zero \\<in> subrobdds (robdd_var i l v r)\n\ngoal (1 subgoal):\n 1. robdd_is_leaf r \\<Longrightarrow>\n    robdd_one \\<in> subrobdds (robdd_var i l v r) \\<and>\n    robdd_zero \\<in> subrobdds (robdd_var i l v r)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. robdd_is_leaf r \\<Longrightarrow>\n    robdd_one \\<in> subrobdds (robdd_var i l v r) \\<and>\n    robdd_zero \\<in> subrobdds (robdd_var i l v r)", "case True"], ["proof (state)\nthis:\n  robdd_is_leaf r\n\ngoal (1 subgoal):\n 1. robdd_is_leaf r \\<Longrightarrow>\n    robdd_one \\<in> subrobdds (robdd_var i l v r) \\<and>\n    robdd_zero \\<in> subrobdds (robdd_var i l v r)", "note r_is_leaf = this"], ["proof (state)\nthis:\n  robdd_is_leaf r\n\ngoal (1 subgoal):\n 1. robdd_is_leaf r \\<Longrightarrow>\n    robdd_one \\<in> subrobdds (robdd_var i l v r) \\<and>\n    robdd_zero \\<in> subrobdds (robdd_var i l v r)", "from l_is_leaf r_is_leaf not_equiv_lr"], ["proof (chain)\npicking this:\n  robdd_is_leaf l\n  robdd_is_leaf r\n  \\<not> robdd_equiv l r", "show ?thesis"], ["proof (prove)\nusing this:\n  robdd_is_leaf l\n  robdd_is_leaf r\n  \\<not> robdd_equiv l r\n\ngoal (1 subgoal):\n 1. robdd_one \\<in> subrobdds (robdd_var i l v r) \\<and>\n    robdd_zero \\<in> subrobdds (robdd_var i l v r)", "unfolding robdd_is_leaf_alt_def"], ["proof (prove)\nusing this:\n  l = robdd_one \\<or> l = robdd_zero\n  r = robdd_one \\<or> r = robdd_zero\n  \\<not> robdd_equiv l r\n\ngoal (1 subgoal):\n 1. robdd_one \\<in> subrobdds (robdd_var i l v r) \\<and>\n    robdd_zero \\<in> subrobdds (robdd_var i l v r)", "by auto"], ["proof (state)\nthis:\n  robdd_one \\<in> subrobdds (robdd_var i l v r) \\<and>\n  robdd_zero \\<in> subrobdds (robdd_var i l v r)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  robdd_one \\<in> subrobdds (robdd_var i l v r) \\<and>\n  robdd_zero \\<in> subrobdds (robdd_var i l v r)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  robdd_one \\<in> subrobdds (robdd_var i l v r) \\<and>\n  robdd_zero \\<in> subrobdds (robdd_var i l v r)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma subrobdds_set_leaf_in_reduced: \nassumes bs_OK: \"\\<And>b. b \\<in> bs \\<Longrightarrow> robdd_invar_reduced b\" \n    and bs_neq_leaf_set: \"bs \\<noteq> {robdd_one}\" \"bs \\<noteq> {robdd_zero}\" \n    and bs_neq_emp: \"bs \\<noteq> {}\"\nshows \"robdd_one \\<in> subrobdds_set bs \\<and> robdd_zero \\<in> subrobdds_set bs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. robdd_one \\<in> subrobdds_set bs \\<and>\n    robdd_zero \\<in> subrobdds_set bs", "proof (cases \"\\<exists>b\\<in>bs. \\<not>(robdd_is_leaf b)\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<exists>b\\<in>bs. \\<not> robdd_is_leaf b \\<Longrightarrow>\n    robdd_one \\<in> subrobdds_set bs \\<and>\n    robdd_zero \\<in> subrobdds_set bs\n 2. \\<not> (\\<exists>b\\<in>bs. \\<not> robdd_is_leaf b) \\<Longrightarrow>\n    robdd_one \\<in> subrobdds_set bs \\<and>\n    robdd_zero \\<in> subrobdds_set bs", "case True"], ["proof (state)\nthis:\n  \\<exists>b\\<in>bs. \\<not> robdd_is_leaf b\n\ngoal (2 subgoals):\n 1. \\<exists>b\\<in>bs. \\<not> robdd_is_leaf b \\<Longrightarrow>\n    robdd_one \\<in> subrobdds_set bs \\<and>\n    robdd_zero \\<in> subrobdds_set bs\n 2. \\<not> (\\<exists>b\\<in>bs. \\<not> robdd_is_leaf b) \\<Longrightarrow>\n    robdd_one \\<in> subrobdds_set bs \\<and>\n    robdd_zero \\<in> subrobdds_set bs", "then"], ["proof (chain)\npicking this:\n  \\<exists>b\\<in>bs. \\<not> robdd_is_leaf b", "obtain b where b_in: \"b \\<in> bs\" and not_leaf_b: \"\\<not>(robdd_is_leaf b)\""], ["proof (prove)\nusing this:\n  \\<exists>b\\<in>bs. \\<not> robdd_is_leaf b\n\ngoal (1 subgoal):\n 1. (\\<And>b.\n        \\<lbrakk>b \\<in> bs; \\<not> robdd_is_leaf b\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  b \\<in> bs\n  \\<not> robdd_is_leaf b\n\ngoal (2 subgoals):\n 1. \\<exists>b\\<in>bs. \\<not> robdd_is_leaf b \\<Longrightarrow>\n    robdd_one \\<in> subrobdds_set bs \\<and>\n    robdd_zero \\<in> subrobdds_set bs\n 2. \\<not> (\\<exists>b\\<in>bs. \\<not> robdd_is_leaf b) \\<Longrightarrow>\n    robdd_one \\<in> subrobdds_set bs \\<and>\n    robdd_zero \\<in> subrobdds_set bs", "from bs_OK b_in"], ["proof (chain)\npicking this:\n  ?b \\<in> bs \\<Longrightarrow> robdd_invar_reduced ?b\n  b \\<in> bs", "have invar_reduced: \"robdd_invar_reduced b\""], ["proof (prove)\nusing this:\n  ?b \\<in> bs \\<Longrightarrow> robdd_invar_reduced ?b\n  b \\<in> bs\n\ngoal (1 subgoal):\n 1. robdd_invar_reduced b", "by simp"], ["proof (state)\nthis:\n  robdd_invar_reduced b\n\ngoal (2 subgoals):\n 1. \\<exists>b\\<in>bs. \\<not> robdd_is_leaf b \\<Longrightarrow>\n    robdd_one \\<in> subrobdds_set bs \\<and>\n    robdd_zero \\<in> subrobdds_set bs\n 2. \\<not> (\\<exists>b\\<in>bs. \\<not> robdd_is_leaf b) \\<Longrightarrow>\n    robdd_one \\<in> subrobdds_set bs \\<and>\n    robdd_zero \\<in> subrobdds_set bs", "from subrobdds_leaf_in_reduced[OF invar_reduced not_leaf_b]"], ["proof (chain)\npicking this:\n  robdd_one \\<in> subrobdds b \\<and> robdd_zero \\<in> subrobdds b", "have in_b: \"robdd_one \\<in> subrobdds b \\<and> robdd_zero \\<in> subrobdds b\""], ["proof (prove)\nusing this:\n  robdd_one \\<in> subrobdds b \\<and> robdd_zero \\<in> subrobdds b\n\ngoal (1 subgoal):\n 1. robdd_one \\<in> subrobdds b \\<and> robdd_zero \\<in> subrobdds b", "."], ["proof (state)\nthis:\n  robdd_one \\<in> subrobdds b \\<and> robdd_zero \\<in> subrobdds b\n\ngoal (2 subgoals):\n 1. \\<exists>b\\<in>bs. \\<not> robdd_is_leaf b \\<Longrightarrow>\n    robdd_one \\<in> subrobdds_set bs \\<and>\n    robdd_zero \\<in> subrobdds_set bs\n 2. \\<not> (\\<exists>b\\<in>bs. \\<not> robdd_is_leaf b) \\<Longrightarrow>\n    robdd_one \\<in> subrobdds_set bs \\<and>\n    robdd_zero \\<in> subrobdds_set bs", "from in_b b_in"], ["proof (chain)\npicking this:\n  robdd_one \\<in> subrobdds b \\<and> robdd_zero \\<in> subrobdds b\n  b \\<in> bs", "show ?thesis"], ["proof (prove)\nusing this:\n  robdd_one \\<in> subrobdds b \\<and> robdd_zero \\<in> subrobdds b\n  b \\<in> bs\n\ngoal (1 subgoal):\n 1. robdd_one \\<in> subrobdds_set bs \\<and>\n    robdd_zero \\<in> subrobdds_set bs", "unfolding subrobdds_set_def"], ["proof (prove)\nusing this:\n  robdd_one \\<in> subrobdds b \\<and> robdd_zero \\<in> subrobdds b\n  b \\<in> bs\n\ngoal (1 subgoal):\n 1. robdd_one \\<in> \\<Union> (subrobdds ` bs) \\<and>\n    robdd_zero \\<in> \\<Union> (subrobdds ` bs)", "by auto"], ["proof (state)\nthis:\n  robdd_one \\<in> subrobdds_set bs \\<and> robdd_zero \\<in> subrobdds_set bs\n\ngoal (1 subgoal):\n 1. \\<not> (\\<exists>b\\<in>bs. \\<not> robdd_is_leaf b) \\<Longrightarrow>\n    robdd_one \\<in> subrobdds_set bs \\<and>\n    robdd_zero \\<in> subrobdds_set bs", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> (\\<exists>b\\<in>bs. \\<not> robdd_is_leaf b) \\<Longrightarrow>\n    robdd_one \\<in> subrobdds_set bs \\<and>\n    robdd_zero \\<in> subrobdds_set bs", "case False"], ["proof (state)\nthis:\n  \\<not> (\\<exists>b\\<in>bs. \\<not> robdd_is_leaf b)\n\ngoal (1 subgoal):\n 1. \\<not> (\\<exists>b\\<in>bs. \\<not> robdd_is_leaf b) \\<Longrightarrow>\n    robdd_one \\<in> subrobdds_set bs \\<and>\n    robdd_zero \\<in> subrobdds_set bs", "hence only_leafs: \"\\<And>b. b \\<in> bs \\<Longrightarrow> robdd_is_leaf b\""], ["proof (prove)\nusing this:\n  \\<not> (\\<exists>b\\<in>bs. \\<not> robdd_is_leaf b)\n\ngoal (1 subgoal):\n 1. \\<And>b. b \\<in> bs \\<Longrightarrow> robdd_is_leaf b", "by simp"], ["proof (state)\nthis:\n  ?b \\<in> bs \\<Longrightarrow> robdd_is_leaf ?b\n\ngoal (1 subgoal):\n 1. \\<not> (\\<exists>b\\<in>bs. \\<not> robdd_is_leaf b) \\<Longrightarrow>\n    robdd_one \\<in> subrobdds_set bs \\<and>\n    robdd_zero \\<in> subrobdds_set bs", "from bs_neq_emp"], ["proof (chain)\npicking this:\n  bs \\<noteq> {}", "obtain b1 where b1_in: \"b1 \\<in> bs\""], ["proof (prove)\nusing this:\n  bs \\<noteq> {}\n\ngoal (1 subgoal):\n 1. (\\<And>b1. b1 \\<in> bs \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  b1 \\<in> bs\n\ngoal (1 subgoal):\n 1. \\<not> (\\<exists>b\\<in>bs. \\<not> robdd_is_leaf b) \\<Longrightarrow>\n    robdd_one \\<in> subrobdds_set bs \\<and>\n    robdd_zero \\<in> subrobdds_set bs", "with only_leafs"], ["proof (chain)\npicking this:\n  ?b \\<in> bs \\<Longrightarrow> robdd_is_leaf ?b\n  b1 \\<in> bs", "have leaf_b1: \"robdd_is_leaf b1\""], ["proof (prove)\nusing this:\n  ?b \\<in> bs \\<Longrightarrow> robdd_is_leaf ?b\n  b1 \\<in> bs\n\ngoal (1 subgoal):\n 1. robdd_is_leaf b1", "by simp"], ["proof (state)\nthis:\n  robdd_is_leaf b1\n\ngoal (1 subgoal):\n 1. \\<not> (\\<exists>b\\<in>bs. \\<not> robdd_is_leaf b) \\<Longrightarrow>\n    robdd_one \\<in> subrobdds_set bs \\<and>\n    robdd_zero \\<in> subrobdds_set bs", "from leaf_b1 bs_neq_leaf_set"], ["proof (chain)\npicking this:\n  robdd_is_leaf b1\n  bs \\<noteq> {robdd_one}\n  bs \\<noteq> {robdd_zero}", "have \"bs \\<noteq> {b1}\""], ["proof (prove)\nusing this:\n  robdd_is_leaf b1\n  bs \\<noteq> {robdd_one}\n  bs \\<noteq> {robdd_zero}\n\ngoal (1 subgoal):\n 1. bs \\<noteq> {b1}", "by (auto simp add: robdd_is_leaf_alt_def)"], ["proof (state)\nthis:\n  bs \\<noteq> {b1}\n\ngoal (1 subgoal):\n 1. \\<not> (\\<exists>b\\<in>bs. \\<not> robdd_is_leaf b) \\<Longrightarrow>\n    robdd_one \\<in> subrobdds_set bs \\<and>\n    robdd_zero \\<in> subrobdds_set bs", "with b1_in"], ["proof (chain)\npicking this:\n  b1 \\<in> bs\n  bs \\<noteq> {b1}", "obtain b2 where b2_in: \"b2 \\<in> bs\" and b2_neq: \"b1 \\<noteq> b2\""], ["proof (prove)\nusing this:\n  b1 \\<in> bs\n  bs \\<noteq> {b1}\n\ngoal (1 subgoal):\n 1. (\\<And>b2.\n        \\<lbrakk>b2 \\<in> bs; b1 \\<noteq> b2\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  b2 \\<in> bs\n  b1 \\<noteq> b2\n\ngoal (1 subgoal):\n 1. \\<not> (\\<exists>b\\<in>bs. \\<not> robdd_is_leaf b) \\<Longrightarrow>\n    robdd_one \\<in> subrobdds_set bs \\<and>\n    robdd_zero \\<in> subrobdds_set bs", "from b2_in only_leafs"], ["proof (chain)\npicking this:\n  b2 \\<in> bs\n  ?b \\<in> bs \\<Longrightarrow> robdd_is_leaf ?b", "have leaf_b2: \"robdd_is_leaf b2\""], ["proof (prove)\nusing this:\n  b2 \\<in> bs\n  ?b \\<in> bs \\<Longrightarrow> robdd_is_leaf ?b\n\ngoal (1 subgoal):\n 1. robdd_is_leaf b2", "by simp"], ["proof (state)\nthis:\n  robdd_is_leaf b2\n\ngoal (1 subgoal):\n 1. \\<not> (\\<exists>b\\<in>bs. \\<not> robdd_is_leaf b) \\<Longrightarrow>\n    robdd_one \\<in> subrobdds_set bs \\<and>\n    robdd_zero \\<in> subrobdds_set bs", "from b1_in b2_in b2_neq leaf_b1 leaf_b2"], ["proof (chain)\npicking this:\n  b1 \\<in> bs\n  b2 \\<in> bs\n  b1 \\<noteq> b2\n  robdd_is_leaf b1\n  robdd_is_leaf b2", "have \"robdd_one \\<in> bs \\<and> robdd_zero \\<in> bs\""], ["proof (prove)\nusing this:\n  b1 \\<in> bs\n  b2 \\<in> bs\n  b1 \\<noteq> b2\n  robdd_is_leaf b1\n  robdd_is_leaf b2\n\ngoal (1 subgoal):\n 1. robdd_one \\<in> bs \\<and> robdd_zero \\<in> bs", "unfolding robdd_is_leaf_alt_def"], ["proof (prove)\nusing this:\n  b1 \\<in> bs\n  b2 \\<in> bs\n  b1 \\<noteq> b2\n  b1 = robdd_one \\<or> b1 = robdd_zero\n  b2 = robdd_one \\<or> b2 = robdd_zero\n\ngoal (1 subgoal):\n 1. robdd_one \\<in> bs \\<and> robdd_zero \\<in> bs", "by auto"], ["proof (state)\nthis:\n  robdd_one \\<in> bs \\<and> robdd_zero \\<in> bs\n\ngoal (1 subgoal):\n 1. \\<not> (\\<exists>b\\<in>bs. \\<not> robdd_is_leaf b) \\<Longrightarrow>\n    robdd_one \\<in> subrobdds_set bs \\<and>\n    robdd_zero \\<in> subrobdds_set bs", "thus ?thesis"], ["proof (prove)\nusing this:\n  robdd_one \\<in> bs \\<and> robdd_zero \\<in> bs\n\ngoal (1 subgoal):\n 1. robdd_one \\<in> subrobdds_set bs \\<and>\n    robdd_zero \\<in> subrobdds_set bs", "unfolding subrobdds_set_def"], ["proof (prove)\nusing this:\n  robdd_one \\<in> bs \\<and> robdd_zero \\<in> bs\n\ngoal (1 subgoal):\n 1. robdd_one \\<in> \\<Union> (subrobdds ` bs) \\<and>\n    robdd_zero \\<in> \\<Union> (subrobdds ` bs)", "by simp (metis subrobdds_refl)"], ["proof (state)\nthis:\n  robdd_one \\<in> subrobdds_set bs \\<and> robdd_zero \\<in> subrobdds_set bs\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma robdd_invar_ids_leafs_intro :\nassumes bs_OK: \"\\<And>b. b \\<in> bs \\<Longrightarrow> robdd_invar_reduced b\"\n    and weak_invar: \"robdd_invar_ids bs\"\nshows \"robdd_invar_ids_leafs bs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. robdd_invar_ids_leafs bs", "proof (cases \"bs = {} \\<or> bs = {robdd_one} \\<or> bs = {robdd_zero}\")"], ["proof (state)\ngoal (2 subgoals):\n 1. bs = {} \\<or> bs = {robdd_one} \\<or> bs = {robdd_zero} \\<Longrightarrow>\n    robdd_invar_ids_leafs bs\n 2. \\<not> (bs = {} \\<or>\n            bs = {robdd_one} \\<or> bs = {robdd_zero}) \\<Longrightarrow>\n    robdd_invar_ids_leafs bs", "case True"], ["proof (state)\nthis:\n  bs = {} \\<or> bs = {robdd_one} \\<or> bs = {robdd_zero}\n\ngoal (2 subgoals):\n 1. bs = {} \\<or> bs = {robdd_one} \\<or> bs = {robdd_zero} \\<Longrightarrow>\n    robdd_invar_ids_leafs bs\n 2. \\<not> (bs = {} \\<or>\n            bs = {robdd_one} \\<or> bs = {robdd_zero}) \\<Longrightarrow>\n    robdd_invar_ids_leafs bs", "thus ?thesis"], ["proof (prove)\nusing this:\n  bs = {} \\<or> bs = {robdd_one} \\<or> bs = {robdd_zero}\n\ngoal (1 subgoal):\n 1. robdd_invar_ids_leafs bs", "proof (elim disjE)"], ["proof (state)\ngoal (3 subgoals):\n 1. bs = {} \\<Longrightarrow> robdd_invar_ids_leafs bs\n 2. bs = {robdd_one} \\<Longrightarrow> robdd_invar_ids_leafs bs\n 3. bs = {robdd_zero} \\<Longrightarrow> robdd_invar_ids_leafs bs", "assume \"bs = {}\""], ["proof (state)\nthis:\n  bs = {}\n\ngoal (3 subgoals):\n 1. bs = {} \\<Longrightarrow> robdd_invar_ids_leafs bs\n 2. bs = {robdd_one} \\<Longrightarrow> robdd_invar_ids_leafs bs\n 3. bs = {robdd_zero} \\<Longrightarrow> robdd_invar_ids_leafs bs", "thus \"robdd_invar_ids_leafs bs\""], ["proof (prove)\nusing this:\n  bs = {}\n\ngoal (1 subgoal):\n 1. robdd_invar_ids_leafs bs", "unfolding robdd_invar_ids_leafs_def"], ["proof (prove)\nusing this:\n  bs = {}\n\ngoal (1 subgoal):\n 1. \\<forall>b f.\n       b \\<in> subrobdds_set bs \\<longrightarrow>\n       (robdd_\\<alpha> b = robdd_\\<alpha> (robdd_leaf f)) =\n       (robdd_get_id b = robdd_get_id (robdd_leaf f))", "by simp"], ["proof (state)\nthis:\n  robdd_invar_ids_leafs bs\n\ngoal (2 subgoals):\n 1. bs = {robdd_one} \\<Longrightarrow> robdd_invar_ids_leafs bs\n 2. bs = {robdd_zero} \\<Longrightarrow> robdd_invar_ids_leafs bs", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. bs = {robdd_one} \\<Longrightarrow> robdd_invar_ids_leafs bs\n 2. bs = {robdd_zero} \\<Longrightarrow> robdd_invar_ids_leafs bs", "assume \"bs = {robdd_one}\""], ["proof (state)\nthis:\n  bs = {robdd_one}\n\ngoal (2 subgoals):\n 1. bs = {robdd_one} \\<Longrightarrow> robdd_invar_ids_leafs bs\n 2. bs = {robdd_zero} \\<Longrightarrow> robdd_invar_ids_leafs bs", "thus \"robdd_invar_ids_leafs bs\""], ["proof (prove)\nusing this:\n  bs = {robdd_one}\n\ngoal (1 subgoal):\n 1. robdd_invar_ids_leafs bs", "unfolding robdd_invar_ids_leafs_def"], ["proof (prove)\nusing this:\n  bs = {robdd_one}\n\ngoal (1 subgoal):\n 1. \\<forall>b f.\n       b \\<in> subrobdds_set bs \\<longrightarrow>\n       (robdd_\\<alpha> b = robdd_\\<alpha> (robdd_leaf f)) =\n       (robdd_get_id b = robdd_get_id (robdd_leaf f))", "by simp"], ["proof (state)\nthis:\n  robdd_invar_ids_leafs bs\n\ngoal (1 subgoal):\n 1. bs = {robdd_zero} \\<Longrightarrow> robdd_invar_ids_leafs bs", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. bs = {robdd_zero} \\<Longrightarrow> robdd_invar_ids_leafs bs", "assume \"bs = {robdd_zero}\""], ["proof (state)\nthis:\n  bs = {robdd_zero}\n\ngoal (1 subgoal):\n 1. bs = {robdd_zero} \\<Longrightarrow> robdd_invar_ids_leafs bs", "thus \"robdd_invar_ids_leafs bs\""], ["proof (prove)\nusing this:\n  bs = {robdd_zero}\n\ngoal (1 subgoal):\n 1. robdd_invar_ids_leafs bs", "unfolding robdd_invar_ids_leafs_def"], ["proof (prove)\nusing this:\n  bs = {robdd_zero}\n\ngoal (1 subgoal):\n 1. \\<forall>b f.\n       b \\<in> subrobdds_set bs \\<longrightarrow>\n       (robdd_\\<alpha> b = robdd_\\<alpha> (robdd_leaf f)) =\n       (robdd_get_id b = robdd_get_id (robdd_leaf f))", "by simp"], ["proof (state)\nthis:\n  robdd_invar_ids_leafs bs\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  robdd_invar_ids_leafs bs\n\ngoal (1 subgoal):\n 1. \\<not> (bs = {} \\<or>\n            bs = {robdd_one} \\<or> bs = {robdd_zero}) \\<Longrightarrow>\n    robdd_invar_ids_leafs bs", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> (bs = {} \\<or>\n            bs = {robdd_one} \\<or> bs = {robdd_zero}) \\<Longrightarrow>\n    robdd_invar_ids_leafs bs", "case False"], ["proof (state)\nthis:\n  \\<not> (bs = {} \\<or> bs = {robdd_one} \\<or> bs = {robdd_zero})\n\ngoal (1 subgoal):\n 1. \\<not> (bs = {} \\<or>\n            bs = {robdd_one} \\<or> bs = {robdd_zero}) \\<Longrightarrow>\n    robdd_invar_ids_leafs bs", "with subrobdds_set_leaf_in_reduced[of bs, OF bs_OK]"], ["proof (chain)\npicking this:\n  \\<lbrakk>\\<And>b. b \\<in> bs \\<Longrightarrow> b \\<in> bs;\n   bs \\<noteq> {robdd_one}; bs \\<noteq> {robdd_zero};\n   bs \\<noteq> {}\\<rbrakk>\n  \\<Longrightarrow> robdd_one \\<in> subrobdds_set bs \\<and>\n                    robdd_zero \\<in> subrobdds_set bs\n  \\<not> (bs = {} \\<or> bs = {robdd_one} \\<or> bs = {robdd_zero})", "have one_in: \"robdd_one \\<in> subrobdds_set bs\" and\n       zero_in: \"robdd_zero \\<in> subrobdds_set bs\""], ["proof (prove)\nusing this:\n  \\<lbrakk>\\<And>b. b \\<in> bs \\<Longrightarrow> b \\<in> bs;\n   bs \\<noteq> {robdd_one}; bs \\<noteq> {robdd_zero};\n   bs \\<noteq> {}\\<rbrakk>\n  \\<Longrightarrow> robdd_one \\<in> subrobdds_set bs \\<and>\n                    robdd_zero \\<in> subrobdds_set bs\n  \\<not> (bs = {} \\<or> bs = {robdd_one} \\<or> bs = {robdd_zero})\n\ngoal (1 subgoal):\n 1. robdd_one \\<in> subrobdds_set bs &&& robdd_zero \\<in> subrobdds_set bs", "by auto"], ["proof (state)\nthis:\n  robdd_one \\<in> subrobdds_set bs\n  robdd_zero \\<in> subrobdds_set bs\n\ngoal (1 subgoal):\n 1. \\<not> (bs = {} \\<or>\n            bs = {robdd_one} \\<or> bs = {robdd_zero}) \\<Longrightarrow>\n    robdd_invar_ids_leafs bs", "with weak_invar"], ["proof (chain)\npicking this:\n  robdd_invar_ids bs\n  robdd_one \\<in> subrobdds_set bs\n  robdd_zero \\<in> subrobdds_set bs", "show ?thesis"], ["proof (prove)\nusing this:\n  robdd_invar_ids bs\n  robdd_one \\<in> subrobdds_set bs\n  robdd_zero \\<in> subrobdds_set bs\n\ngoal (1 subgoal):\n 1. robdd_invar_ids_leafs bs", "unfolding robdd_invar_ids_leafs_def robdd_invar_ids_def"], ["proof (prove)\nusing this:\n  \\<forall>b1 b2.\n     b1 \\<in> subrobdds_set bs \\<and>\n     b2 \\<in> subrobdds_set bs \\<longrightarrow>\n     (robdd_\\<alpha> b1 = robdd_\\<alpha> b2) =\n     (robdd_get_id b1 = robdd_get_id b2)\n  robdd_one \\<in> subrobdds_set bs\n  robdd_zero \\<in> subrobdds_set bs\n\ngoal (1 subgoal):\n 1. \\<forall>b f.\n       b \\<in> subrobdds_set bs \\<longrightarrow>\n       (robdd_\\<alpha> b = robdd_\\<alpha> (robdd_leaf f)) =\n       (robdd_get_id b = robdd_get_id (robdd_leaf f))", "by auto"], ["proof (state)\nthis:\n  robdd_invar_ids_leafs bs\n\ngoal:\nNo subgoals!", "qed"], ["", "subsubsection \\<open>Overall Invariant\\<close>"], ["", "definition robdd_invar_ext where\n  \"robdd_invar_ext bs n b = (b \\<in> subrobdds_set bs \\<and> robdd_invar_ids bs \\<and> robdd_invar_vars_greater n b \\<and> robdd_invar_reduced b)\""], ["", "definition robdd_invar where\n  \"robdd_invar b = robdd_invar_ext {b} 0 b\""], ["", "lemma robdd_invar_alt_def :\n  \"robdd_invar b = (robdd_invar_ids {b} \\<and> robdd_invar_vars b \\<and> robdd_invar_reduced b)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. robdd_invar b =\n    (robdd_invar_ids {b} \\<and>\n     robdd_invar_vars b \\<and> robdd_invar_reduced b)", "unfolding robdd_invar_def robdd_invar_ext_def robdd_invar_vars_def subrobdds_set_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (b \\<in> \\<Union> (subrobdds ` {b}) \\<and>\n     robdd_invar_ids {b} \\<and>\n     robdd_invar_vars_greater 0 b \\<and> robdd_invar_reduced b) =\n    (robdd_invar_ids {b} \\<and>\n     robdd_invar_vars_greater 0 b \\<and> robdd_invar_reduced b)", "by simp"], ["", "lemma robdd_invar_simps_leafs [simp]: \"robdd_invar (robdd_leaf value)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. robdd_invar (robdd_leaf value)", "by (simp add: robdd_invar_alt_def robdd_invar_vars_def robdd_invar_ids_def subrobdds_set_def)"], ["", "lemma robdd_invar_simps_var :\n   \"robdd_invar (robdd_var i l v r) \\<Longrightarrow> (\\<not>(robdd_equiv l r) \\<and> robdd_invar l \\<and> robdd_invar r)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. robdd_invar (robdd_var i l v r) \\<Longrightarrow>\n    \\<not> robdd_equiv l r \\<and> robdd_invar l \\<and> robdd_invar r", "apply (simp add: robdd_invar_alt_def robdd_invar_ids_def robdd_invar_vars_def subrobdds_set_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>b1 b2.\n        (b1 = robdd_var i l v r \\<or>\n         b1 \\<in> subrobdds l \\<or> b1 \\<in> subrobdds r) \\<and>\n        (b2 = robdd_var i l v r \\<or>\n         b2 \\<in> subrobdds l \\<or> b2 \\<in> subrobdds r) \\<longrightarrow>\n        (robdd_\\<alpha> b1 = robdd_\\<alpha> b2) =\n        (robdd_get_id b1 = robdd_get_id b2)) \\<and>\n    robdd_invar_vars_greater (Suc v) l \\<and>\n    robdd_invar_vars_greater (Suc v) r \\<and>\n    \\<not> robdd_equiv l r \\<and>\n    robdd_invar_reduced l \\<and> robdd_invar_reduced r \\<Longrightarrow>\n    robdd_invar_vars_greater 0 l \\<and> robdd_invar_vars_greater 0 r", "apply (metis robdd_invar_vars_def robdd_invar_vars_impl)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma robdd_invar_subrobdds_set :\nassumes bs_OK: \"\\<And>b. b \\<in> bs \\<Longrightarrow> robdd_invar b\"\n    and b_in: \"b \\<in> subrobdds_set bs\"\n  shows \"robdd_invar b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. robdd_invar b", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. robdd_invar b", "from b_in"], ["proof (chain)\npicking this:\n  b \\<in> subrobdds_set bs", "obtain b' where b'_in: \"b' \\<in> bs\" and b_in': \"b \\<in> subrobdds b'\""], ["proof (prove)\nusing this:\n  b \\<in> subrobdds_set bs\n\ngoal (1 subgoal):\n 1. (\\<And>b'.\n        \\<lbrakk>b' \\<in> bs; b \\<in> subrobdds b'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding subrobdds_set_def"], ["proof (prove)\nusing this:\n  b \\<in> \\<Union> (subrobdds ` bs)\n\ngoal (1 subgoal):\n 1. (\\<And>b'.\n        \\<lbrakk>b' \\<in> bs; b \\<in> subrobdds b'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  b' \\<in> bs\n  b \\<in> subrobdds b'\n\ngoal (1 subgoal):\n 1. robdd_invar b", "from bs_OK[OF b'_in]"], ["proof (chain)\npicking this:\n  robdd_invar b'", "have \"robdd_invar b'\""], ["proof (prove)\nusing this:\n  robdd_invar b'\n\ngoal (1 subgoal):\n 1. robdd_invar b'", "."], ["proof (state)\nthis:\n  robdd_invar b'\n\ngoal (1 subgoal):\n 1. robdd_invar b", "with b_in'"], ["proof (chain)\npicking this:\n  b \\<in> subrobdds b'\n  robdd_invar b'", "show \"robdd_invar b\""], ["proof (prove)\nusing this:\n  b \\<in> subrobdds b'\n  robdd_invar b'\n\ngoal (1 subgoal):\n 1. robdd_invar b", "apply (induct b')"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>b \\<in> subrobdds (robdd_leaf x);\n        robdd_invar (robdd_leaf x)\\<rbrakk>\n       \\<Longrightarrow> robdd_invar b\n 2. \\<And>x1a b'1 x3 b'2.\n       \\<lbrakk>\\<lbrakk>b \\<in> subrobdds b'1; robdd_invar b'1\\<rbrakk>\n                \\<Longrightarrow> robdd_invar b;\n        \\<lbrakk>b \\<in> subrobdds b'2; robdd_invar b'2\\<rbrakk>\n        \\<Longrightarrow> robdd_invar b;\n        b \\<in> subrobdds (robdd_var x1a b'1 x3 b'2);\n        robdd_invar (robdd_var x1a b'1 x3 b'2)\\<rbrakk>\n       \\<Longrightarrow> robdd_invar b", "apply simp_all"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x1a b'1 x3 b'2.\n       \\<lbrakk>\\<lbrakk>b \\<in> subrobdds b'1; robdd_invar b'1\\<rbrakk>\n                \\<Longrightarrow> robdd_invar b;\n        \\<lbrakk>b \\<in> subrobdds b'2; robdd_invar b'2\\<rbrakk>\n        \\<Longrightarrow> robdd_invar b;\n        b = robdd_var x1a b'1 x3 b'2 \\<or>\n        b \\<in> subrobdds b'1 \\<or> b \\<in> subrobdds b'2;\n        robdd_invar (robdd_var x1a b'1 x3 b'2)\\<rbrakk>\n       \\<Longrightarrow> robdd_invar b", "apply (metis robdd_invar_simps_var)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  robdd_invar b\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma robdd_invar_ext_simps [simp] :\n   \"robdd_invar_ext bs n (robdd_leaf f) = (robdd_invar_ids bs \\<and> ((robdd_leaf f) \\<in> (subrobdds_set bs)))\" (is ?T1)\n   \"robdd_invar_ext bs n (robdd_var i l v r) =\n     ((robdd_var i l v r) \\<in> (subrobdds_set bs) \\<and> \\<not>(robdd_equiv l r) \\<and> n \\<le> v \\<and> robdd_invar_ext bs (Suc v) l \\<and> robdd_invar_ext bs (Suc v) r)\" (is ?T2)"], ["proof (prove)\ngoal (1 subgoal):\n 1. robdd_invar_ext bs n (robdd_leaf f) =\n    (robdd_invar_ids bs \\<and> robdd_leaf f \\<in> subrobdds_set bs) &&&\n    robdd_invar_ext bs n (robdd_var i l v r) =\n    (robdd_var i l v r \\<in> subrobdds_set bs \\<and>\n     \\<not> robdd_equiv l r \\<and>\n     n \\<le> v \\<and>\n     robdd_invar_ext bs (Suc v) l \\<and> robdd_invar_ext bs (Suc v) r)", "proof -"], ["proof (state)\ngoal (2 subgoals):\n 1. robdd_invar_ext bs n (robdd_leaf f) =\n    (robdd_invar_ids bs \\<and> robdd_leaf f \\<in> subrobdds_set bs)\n 2. robdd_invar_ext bs n (robdd_var i l v r) =\n    (robdd_var i l v r \\<in> subrobdds_set bs \\<and>\n     \\<not> robdd_equiv l r \\<and>\n     n \\<le> v \\<and>\n     robdd_invar_ext bs (Suc v) l \\<and> robdd_invar_ext bs (Suc v) r)", "show ?T1"], ["proof (prove)\ngoal (1 subgoal):\n 1. robdd_invar_ext bs n (robdd_leaf f) =\n    (robdd_invar_ids bs \\<and> robdd_leaf f \\<in> subrobdds_set bs)", "by (auto simp add: robdd_invar_ext_def)"], ["proof (state)\nthis:\n  robdd_invar_ext bs n (robdd_leaf f) =\n  (robdd_invar_ids bs \\<and> robdd_leaf f \\<in> subrobdds_set bs)\n\ngoal (1 subgoal):\n 1. robdd_invar_ext bs n (robdd_var i l v r) =\n    (robdd_var i l v r \\<in> subrobdds_set bs \\<and>\n     \\<not> robdd_equiv l r \\<and>\n     n \\<le> v \\<and>\n     robdd_invar_ext bs (Suc v) l \\<and> robdd_invar_ext bs (Suc v) r)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. robdd_invar_ext bs n (robdd_var i l v r) =\n    (robdd_var i l v r \\<in> subrobdds_set bs \\<and>\n     \\<not> robdd_equiv l r \\<and>\n     n \\<le> v \\<and>\n     robdd_invar_ext bs (Suc v) l \\<and> robdd_invar_ext bs (Suc v) r)", "show ?T2 (is \"?ls = ?rs\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. robdd_invar_ext bs n (robdd_var i l v r) =\n    (robdd_var i l v r \\<in> subrobdds_set bs \\<and>\n     \\<not> robdd_equiv l r \\<and>\n     n \\<le> v \\<and>\n     robdd_invar_ext bs (Suc v) l \\<and> robdd_invar_ext bs (Suc v) r)", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. robdd_invar_ext bs n (robdd_var i l v r) \\<Longrightarrow>\n    robdd_var i l v r \\<in> subrobdds_set bs \\<and>\n    \\<not> robdd_equiv l r \\<and>\n    n \\<le> v \\<and>\n    robdd_invar_ext bs (Suc v) l \\<and> robdd_invar_ext bs (Suc v) r\n 2. robdd_var i l v r \\<in> subrobdds_set bs \\<and>\n    \\<not> robdd_equiv l r \\<and>\n    n \\<le> v \\<and>\n    robdd_invar_ext bs (Suc v) l \\<and>\n    robdd_invar_ext bs (Suc v) r \\<Longrightarrow>\n    robdd_invar_ext bs n (robdd_var i l v r)", "assume ?rs"], ["proof (state)\nthis:\n  robdd_var i l v r \\<in> subrobdds_set bs \\<and>\n  \\<not> robdd_equiv l r \\<and>\n  n \\<le> v \\<and>\n  robdd_invar_ext bs (Suc v) l \\<and> robdd_invar_ext bs (Suc v) r\n\ngoal (2 subgoals):\n 1. robdd_invar_ext bs n (robdd_var i l v r) \\<Longrightarrow>\n    robdd_var i l v r \\<in> subrobdds_set bs \\<and>\n    \\<not> robdd_equiv l r \\<and>\n    n \\<le> v \\<and>\n    robdd_invar_ext bs (Suc v) l \\<and> robdd_invar_ext bs (Suc v) r\n 2. robdd_var i l v r \\<in> subrobdds_set bs \\<and>\n    \\<not> robdd_equiv l r \\<and>\n    n \\<le> v \\<and>\n    robdd_invar_ext bs (Suc v) l \\<and>\n    robdd_invar_ext bs (Suc v) r \\<Longrightarrow>\n    robdd_invar_ext bs n (robdd_var i l v r)", "thus ?ls"], ["proof (prove)\nusing this:\n  robdd_var i l v r \\<in> subrobdds_set bs \\<and>\n  \\<not> robdd_equiv l r \\<and>\n  n \\<le> v \\<and>\n  robdd_invar_ext bs (Suc v) l \\<and> robdd_invar_ext bs (Suc v) r\n\ngoal (1 subgoal):\n 1. robdd_invar_ext bs n (robdd_var i l v r)", "by (simp add: robdd_invar_ext_def subrobdds_set_def)"], ["proof (state)\nthis:\n  robdd_invar_ext bs n (robdd_var i l v r)\n\ngoal (1 subgoal):\n 1. robdd_invar_ext bs n (robdd_var i l v r) \\<Longrightarrow>\n    robdd_var i l v r \\<in> subrobdds_set bs \\<and>\n    \\<not> robdd_equiv l r \\<and>\n    n \\<le> v \\<and>\n    robdd_invar_ext bs (Suc v) l \\<and> robdd_invar_ext bs (Suc v) r", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. robdd_invar_ext bs n (robdd_var i l v r) \\<Longrightarrow>\n    robdd_var i l v r \\<in> subrobdds_set bs \\<and>\n    \\<not> robdd_equiv l r \\<and>\n    n \\<le> v \\<and>\n    robdd_invar_ext bs (Suc v) l \\<and> robdd_invar_ext bs (Suc v) r", "assume ?ls"], ["proof (state)\nthis:\n  robdd_invar_ext bs n (robdd_var i l v r)\n\ngoal (1 subgoal):\n 1. robdd_invar_ext bs n (robdd_var i l v r) \\<Longrightarrow>\n    robdd_var i l v r \\<in> subrobdds_set bs \\<and>\n    \\<not> robdd_equiv l r \\<and>\n    n \\<le> v \\<and>\n    robdd_invar_ext bs (Suc v) l \\<and> robdd_invar_ext bs (Suc v) r", "then"], ["proof (chain)\npicking this:\n  robdd_invar_ext bs n (robdd_var i l v r)", "obtain b where b_props: \"b \\<in> bs\"  \"robdd_var i l v r \\<in> subrobdds b\""], ["proof (prove)\nusing this:\n  robdd_invar_ext bs n (robdd_var i l v r)\n\ngoal (1 subgoal):\n 1. (\\<And>b.\n        \\<lbrakk>b \\<in> bs; robdd_var i l v r \\<in> subrobdds b\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (auto simp add: robdd_invar_ext_def subrobdds_set_def)"], ["proof (state)\nthis:\n  b \\<in> bs\n  robdd_var i l v r \\<in> subrobdds b\n\ngoal (1 subgoal):\n 1. robdd_invar_ext bs n (robdd_var i l v r) \\<Longrightarrow>\n    robdd_var i l v r \\<in> subrobdds_set bs \\<and>\n    \\<not> robdd_equiv l r \\<and>\n    n \\<le> v \\<and>\n    robdd_invar_ext bs (Suc v) l \\<and> robdd_invar_ext bs (Suc v) r", "from subrobdds_trans [of l \"robdd_var i l v r\" b]\n         subrobdds_trans [of r \"robdd_var i l v r\" b]"], ["proof (chain)\npicking this:\n  \\<lbrakk>l \\<in> subrobdds (robdd_var i l v r);\n   robdd_var i l v r \\<in> subrobdds b\\<rbrakk>\n  \\<Longrightarrow> l \\<in> subrobdds b\n  \\<lbrakk>r \\<in> subrobdds (robdd_var i l v r);\n   robdd_var i l v r \\<in> subrobdds b\\<rbrakk>\n  \\<Longrightarrow> r \\<in> subrobdds b", "have \"r \\<in> subrobdds b\" \"l \\<in> subrobdds b\""], ["proof (prove)\nusing this:\n  \\<lbrakk>l \\<in> subrobdds (robdd_var i l v r);\n   robdd_var i l v r \\<in> subrobdds b\\<rbrakk>\n  \\<Longrightarrow> l \\<in> subrobdds b\n  \\<lbrakk>r \\<in> subrobdds (robdd_var i l v r);\n   robdd_var i l v r \\<in> subrobdds b\\<rbrakk>\n  \\<Longrightarrow> r \\<in> subrobdds b\n\ngoal (1 subgoal):\n 1. r \\<in> subrobdds b &&& l \\<in> subrobdds b", "by (simp_all add: b_props)"], ["proof (state)\nthis:\n  r \\<in> subrobdds b\n  l \\<in> subrobdds b\n\ngoal (1 subgoal):\n 1. robdd_invar_ext bs n (robdd_var i l v r) \\<Longrightarrow>\n    robdd_var i l v r \\<in> subrobdds_set bs \\<and>\n    \\<not> robdd_equiv l r \\<and>\n    n \\<le> v \\<and>\n    robdd_invar_ext bs (Suc v) l \\<and> robdd_invar_ext bs (Suc v) r", "with \\<open>?ls\\<close> \\<open>b \\<in> bs\\<close>"], ["proof (chain)\npicking this:\n  robdd_invar_ext bs n (robdd_var i l v r)\n  b \\<in> bs\n  r \\<in> subrobdds b\n  l \\<in> subrobdds b", "show ?rs"], ["proof (prove)\nusing this:\n  robdd_invar_ext bs n (robdd_var i l v r)\n  b \\<in> bs\n  r \\<in> subrobdds b\n  l \\<in> subrobdds b\n\ngoal (1 subgoal):\n 1. robdd_var i l v r \\<in> subrobdds_set bs \\<and>\n    \\<not> robdd_equiv l r \\<and>\n    n \\<le> v \\<and>\n    robdd_invar_ext bs (Suc v) l \\<and> robdd_invar_ext bs (Suc v) r", "by (auto simp add: robdd_invar_ext_def subrobdds_set_def)"], ["proof (state)\nthis:\n  robdd_var i l v r \\<in> subrobdds_set bs \\<and>\n  \\<not> robdd_equiv l r \\<and>\n  n \\<le> v \\<and>\n  robdd_invar_ext bs (Suc v) l \\<and> robdd_invar_ext bs (Suc v) r\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  robdd_invar_ext bs n (robdd_var i l v r) =\n  (robdd_var i l v r \\<in> subrobdds_set bs \\<and>\n   \\<not> robdd_equiv l r \\<and>\n   n \\<le> v \\<and>\n   robdd_invar_ext bs (Suc v) l \\<and> robdd_invar_ext bs (Suc v) r)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma rodd_invar_ext_idempot_subrobdds_set [simp]: \n   \"robdd_invar_ext (subrobdds_set bs) n b = robdd_invar_ext bs n b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. robdd_invar_ext (subrobdds_set bs) n b = robdd_invar_ext bs n b", "unfolding robdd_invar_ext_def robdd_invar_ids_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (b \\<in> subrobdds_set (subrobdds_set bs) \\<and>\n     (\\<forall>b1 b2.\n         b1 \\<in> subrobdds_set (subrobdds_set bs) \\<and>\n         b2 \\<in> subrobdds_set (subrobdds_set bs) \\<longrightarrow>\n         (robdd_\\<alpha> b1 = robdd_\\<alpha> b2) =\n         (robdd_get_id b1 = robdd_get_id b2)) \\<and>\n     robdd_invar_vars_greater n b \\<and> robdd_invar_reduced b) =\n    (b \\<in> subrobdds_set bs \\<and>\n     (\\<forall>b1 b2.\n         b1 \\<in> subrobdds_set bs \\<and>\n         b2 \\<in> subrobdds_set bs \\<longrightarrow>\n         (robdd_\\<alpha> b1 = robdd_\\<alpha> b2) =\n         (robdd_get_id b1 = robdd_get_id b2)) \\<and>\n     robdd_invar_vars_greater n b \\<and> robdd_invar_reduced b)", "by simp"], ["", "lemma robdd_invar_ext_weaken :\nassumes pre: \"robdd_invar_ext bs2 n b\"\n    and bs2_props: \"\\<And>b2.  b \\<in> subrobdds_set bs2 \\<Longrightarrow> b2 \\<in> bs1 \\<Longrightarrow> \\<exists>b1 \\<in> bs2. b2 \\<in> (subrobdds b1)\"\n    and b_in: \"b \\<in> subrobdds_set bs2 \\<Longrightarrow> b \\<in> subrobdds_set bs1\"\n    and m_le: \"m \\<le> n\"\nshows \"robdd_invar_ext bs1 m b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. robdd_invar_ext bs1 m b", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. robdd_invar_ext bs1 m b", "from pre"], ["proof (chain)\npicking this:\n  robdd_invar_ext bs2 n b", "have \n    \"b \\<in> subrobdds_set bs2\"\n    \"robdd_invar_ids bs2\"\n    \"robdd_invar_vars_greater n b\" \n    \"robdd_invar_reduced b\""], ["proof (prove)\nusing this:\n  robdd_invar_ext bs2 n b\n\ngoal (1 subgoal):\n 1. (b \\<in> subrobdds_set bs2 &&& robdd_invar_ids bs2) &&&\n    robdd_invar_vars_greater n b &&& robdd_invar_reduced b", "unfolding robdd_invar_ext_def"], ["proof (prove)\nusing this:\n  b \\<in> subrobdds_set bs2 \\<and>\n  robdd_invar_ids bs2 \\<and>\n  robdd_invar_vars_greater n b \\<and> robdd_invar_reduced b\n\ngoal (1 subgoal):\n 1. (b \\<in> subrobdds_set bs2 &&& robdd_invar_ids bs2) &&&\n    robdd_invar_vars_greater n b &&& robdd_invar_reduced b", "by simp_all"], ["proof (state)\nthis:\n  b \\<in> subrobdds_set bs2\n  robdd_invar_ids bs2\n  robdd_invar_vars_greater n b\n  robdd_invar_reduced b\n\ngoal (1 subgoal):\n 1. robdd_invar_ext bs1 m b", "from \\<open>b \\<in> subrobdds_set bs2\\<close> b_in"], ["proof (chain)\npicking this:\n  b \\<in> subrobdds_set bs2\n  b \\<in> subrobdds_set bs2 \\<Longrightarrow> b \\<in> subrobdds_set bs1", "have b_in: \"b \\<in> subrobdds_set bs1\""], ["proof (prove)\nusing this:\n  b \\<in> subrobdds_set bs2\n  b \\<in> subrobdds_set bs2 \\<Longrightarrow> b \\<in> subrobdds_set bs1\n\ngoal (1 subgoal):\n 1. b \\<in> subrobdds_set bs1", "by simp"], ["proof (state)\nthis:\n  b \\<in> subrobdds_set bs1\n\ngoal (1 subgoal):\n 1. robdd_invar_ext bs1 m b", "have invar_ids: \"robdd_invar_ids bs1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. robdd_invar_ids bs1", "apply (rule robdd_invar_ids_subset_subrobdds_rule [OF bs2_props])"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>b2. b2 \\<in> bs1 \\<Longrightarrow> b \\<in> subrobdds_set bs2\n 2. \\<And>b2. b2 \\<in> bs1 \\<Longrightarrow> b2 \\<in> bs1\n 3. robdd_invar_ids bs2", "apply (simp add: \\<open>b \\<in> subrobdds_set bs2\\<close>)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>b2. b2 \\<in> bs1 \\<Longrightarrow> b2 \\<in> bs1\n 2. robdd_invar_ids bs2", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. robdd_invar_ids bs2", "apply fact"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  robdd_invar_ids bs1\n\ngoal (1 subgoal):\n 1. robdd_invar_ext bs1 m b", "have invar_greater: \"robdd_invar_vars_greater m b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. robdd_invar_vars_greater m b", "by (rule robdd_invar_vars_greater___weaken[OF \\<open>robdd_invar_vars_greater n b\\<close> m_le])"], ["proof (state)\nthis:\n  robdd_invar_vars_greater m b\n\ngoal (1 subgoal):\n 1. robdd_invar_ext bs1 m b", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. robdd_invar_ext bs1 m b", "unfolding robdd_invar_ext_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. b \\<in> subrobdds_set bs1 \\<and>\n    robdd_invar_ids bs1 \\<and>\n    robdd_invar_vars_greater m b \\<and> robdd_invar_reduced b", "by (simp add: b_in invar_ids \\<open>robdd_invar_reduced b\\<close> invar_greater)"], ["proof (state)\nthis:\n  robdd_invar_ext bs1 m b\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma robdd_invar_ext_weaken_var :\nassumes pre: \"robdd_invar_ext bs n b\"\n    and m_le: \"m \\<le> n\"\nshows \"robdd_invar_ext bs m b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. robdd_invar_ext bs m b", "apply (rule robdd_invar_ext_weaken[OF pre _ _ m_le])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>b2.\n       \\<lbrakk>b \\<in> subrobdds_set bs; b2 \\<in> bs\\<rbrakk>\n       \\<Longrightarrow> \\<exists>b1\\<in>bs. b2 \\<in> subrobdds b1\n 2. b \\<in> subrobdds_set bs \\<Longrightarrow> b \\<in> subrobdds_set bs", "apply (simp_all add: Bex_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>b2.\n       \\<lbrakk>b \\<in> subrobdds_set bs; b2 \\<in> bs\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x. x \\<in> bs \\<and> b2 \\<in> subrobdds x", "apply (metis subrobdds_refl)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma robdd_invar_impl :\nassumes invar_ext: \"robdd_invar_ext bs n b\"\nshows \"robdd_invar b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. robdd_invar b", "unfolding robdd_invar_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. robdd_invar_ext {b} 0 b", "apply (rule robdd_invar_ext_weaken[OF invar_ext])"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>b2.\n       \\<lbrakk>b \\<in> subrobdds_set bs; b2 \\<in> {b}\\<rbrakk>\n       \\<Longrightarrow> \\<exists>b1\\<in>bs. b2 \\<in> subrobdds b1\n 2. b \\<in> subrobdds_set bs \\<Longrightarrow> b \\<in> subrobdds_set {b}\n 3. 0 \\<le> n", "apply (simp_all add: subrobdds_set_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma robdd_\\<alpha>_invar_greater :\nassumes invar_vars: \"robdd_invar_vars_greater n b\"\n    and a_equiv: \"\\<And>v. v \\<ge> n \\<Longrightarrow> a1 v = a2 v\"\nshows  \"robdd_\\<alpha> b a1 = robdd_\\<alpha> b a2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. robdd_\\<alpha> b a1 = robdd_\\<alpha> b a2", "using assms"], ["proof (prove)\nusing this:\n  robdd_invar_vars_greater n b\n  n \\<le> ?v \\<Longrightarrow> a1 ?v = a2 ?v\n\ngoal (1 subgoal):\n 1. robdd_\\<alpha> b a1 = robdd_\\<alpha> b a2", "apply (induct b)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>robdd_invar_vars_greater n (robdd_leaf x);\n        \\<And>v. n \\<le> v \\<Longrightarrow> a1 v = a2 v\\<rbrakk>\n       \\<Longrightarrow> robdd_\\<alpha> (robdd_leaf x) a1 =\n                         robdd_\\<alpha> (robdd_leaf x) a2\n 2. \\<And>x1a b1 x3 b2.\n       \\<lbrakk>\\<lbrakk>robdd_invar_vars_greater n b1;\n                 \\<And>v. n \\<le> v \\<Longrightarrow> a1 v = a2 v\\<rbrakk>\n                \\<Longrightarrow> robdd_\\<alpha> b1 a1 =\n                                  robdd_\\<alpha> b1 a2;\n        \\<lbrakk>robdd_invar_vars_greater n b2;\n         \\<And>v. n \\<le> v \\<Longrightarrow> a1 v = a2 v\\<rbrakk>\n        \\<Longrightarrow> robdd_\\<alpha> b2 a1 = robdd_\\<alpha> b2 a2;\n        robdd_invar_vars_greater n (robdd_var x1a b1 x3 b2);\n        \\<And>v. n \\<le> v \\<Longrightarrow> a1 v = a2 v\\<rbrakk>\n       \\<Longrightarrow> robdd_\\<alpha> (robdd_var x1a b1 x3 b2) a1 =\n                         robdd_\\<alpha> (robdd_var x1a b1 x3 b2) a2", "apply (simp_all)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>b1 x3 b2.\n       \\<lbrakk>robdd_invar_vars_greater n b1 \\<Longrightarrow>\n                robdd_\\<alpha> b1 a1 = robdd_\\<alpha> b1 a2;\n        robdd_invar_vars_greater n b2 \\<Longrightarrow>\n        robdd_\\<alpha> b2 a1 = robdd_\\<alpha> b2 a2;\n        n \\<le> x3 \\<and>\n        robdd_invar_vars_greater (Suc x3) b1 \\<and>\n        robdd_invar_vars_greater (Suc x3) b2;\n        \\<And>v. n \\<le> v \\<Longrightarrow> a1 v = a2 v\\<rbrakk>\n       \\<Longrightarrow> (a2 x3 \\<longrightarrow>\n                          robdd_\\<alpha> b1 a1 =\n                          robdd_\\<alpha> b1 a2) \\<and>\n                         (\\<not> a2 x3 \\<longrightarrow>\n                          robdd_\\<alpha> b2 a1 = robdd_\\<alpha> b2 a2)", "apply (metis le_Suc_eq robdd_invar_vars_greater___weaken)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "subsection \\<open>ROBDDs are unique\\<close>"], ["", "text \\<open>An important property of ROBDDs is that two ROBDDs have the same semantics if and only\nif they are equal (up to ids in our case). Before we can prove this property some \nlemmata are needed.\\<close>"], ["", "lemma robdd_unique_leaf :\nassumes invars_b: \"robdd_invar_vars b\" \"robdd_invar_reduced b\"\n    and sem_eq: \"robdd_\\<alpha> b = robdd_\\<alpha> (robdd_leaf value)\"\nshows \"b = (robdd_leaf value)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. b = robdd_leaf value", "using assms"], ["proof (prove)\nusing this:\n  robdd_invar_vars b\n  robdd_invar_reduced b\n  robdd_\\<alpha> b = robdd_\\<alpha> (robdd_leaf value)\n\ngoal (1 subgoal):\n 1. b = robdd_leaf value", "proof (induct b)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>robdd_invar_vars (robdd_leaf x);\n        robdd_invar_reduced (robdd_leaf x);\n        robdd_\\<alpha> (robdd_leaf x) =\n        robdd_\\<alpha> (robdd_leaf value)\\<rbrakk>\n       \\<Longrightarrow> robdd_leaf x = robdd_leaf value\n 2. \\<And>x1a b1 x3 b2.\n       \\<lbrakk>\\<lbrakk>robdd_invar_vars b1; robdd_invar_reduced b1;\n                 robdd_\\<alpha> b1 =\n                 robdd_\\<alpha> (robdd_leaf value)\\<rbrakk>\n                \\<Longrightarrow> b1 = robdd_leaf value;\n        \\<lbrakk>robdd_invar_vars b2; robdd_invar_reduced b2;\n         robdd_\\<alpha> b2 = robdd_\\<alpha> (robdd_leaf value)\\<rbrakk>\n        \\<Longrightarrow> b2 = robdd_leaf value;\n        robdd_invar_vars (robdd_var x1a b1 x3 b2);\n        robdd_invar_reduced (robdd_var x1a b1 x3 b2);\n        robdd_\\<alpha> (robdd_var x1a b1 x3 b2) =\n        robdd_\\<alpha> (robdd_leaf value)\\<rbrakk>\n       \\<Longrightarrow> robdd_var x1a b1 x3 b2 = robdd_leaf value", "case (robdd_leaf f)"], ["proof (state)\nthis:\n  robdd_invar_vars (robdd_leaf f)\n  robdd_invar_reduced (robdd_leaf f)\n  robdd_\\<alpha> (robdd_leaf f) = robdd_\\<alpha> (robdd_leaf value)\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>robdd_invar_vars (robdd_leaf x);\n        robdd_invar_reduced (robdd_leaf x);\n        robdd_\\<alpha> (robdd_leaf x) =\n        robdd_\\<alpha> (robdd_leaf value)\\<rbrakk>\n       \\<Longrightarrow> robdd_leaf x = robdd_leaf value\n 2. \\<And>x1a b1 x3 b2.\n       \\<lbrakk>\\<lbrakk>robdd_invar_vars b1; robdd_invar_reduced b1;\n                 robdd_\\<alpha> b1 =\n                 robdd_\\<alpha> (robdd_leaf value)\\<rbrakk>\n                \\<Longrightarrow> b1 = robdd_leaf value;\n        \\<lbrakk>robdd_invar_vars b2; robdd_invar_reduced b2;\n         robdd_\\<alpha> b2 = robdd_\\<alpha> (robdd_leaf value)\\<rbrakk>\n        \\<Longrightarrow> b2 = robdd_leaf value;\n        robdd_invar_vars (robdd_var x1a b1 x3 b2);\n        robdd_invar_reduced (robdd_var x1a b1 x3 b2);\n        robdd_\\<alpha> (robdd_var x1a b1 x3 b2) =\n        robdd_\\<alpha> (robdd_leaf value)\\<rbrakk>\n       \\<Longrightarrow> robdd_var x1a b1 x3 b2 = robdd_leaf value", "thus ?case"], ["proof (prove)\nusing this:\n  robdd_invar_vars (robdd_leaf f)\n  robdd_invar_reduced (robdd_leaf f)\n  robdd_\\<alpha> (robdd_leaf f) = robdd_\\<alpha> (robdd_leaf value)\n\ngoal (1 subgoal):\n 1. robdd_leaf f = robdd_leaf value", "by (simp add: fun_eq_iff)"], ["proof (state)\nthis:\n  robdd_leaf f = robdd_leaf value\n\ngoal (1 subgoal):\n 1. \\<And>x1a b1 x3 b2.\n       \\<lbrakk>\\<lbrakk>robdd_invar_vars b1; robdd_invar_reduced b1;\n                 robdd_\\<alpha> b1 =\n                 robdd_\\<alpha> (robdd_leaf value)\\<rbrakk>\n                \\<Longrightarrow> b1 = robdd_leaf value;\n        \\<lbrakk>robdd_invar_vars b2; robdd_invar_reduced b2;\n         robdd_\\<alpha> b2 = robdd_\\<alpha> (robdd_leaf value)\\<rbrakk>\n        \\<Longrightarrow> b2 = robdd_leaf value;\n        robdd_invar_vars (robdd_var x1a b1 x3 b2);\n        robdd_invar_reduced (robdd_var x1a b1 x3 b2);\n        robdd_\\<alpha> (robdd_var x1a b1 x3 b2) =\n        robdd_\\<alpha> (robdd_leaf value)\\<rbrakk>\n       \\<Longrightarrow> robdd_var x1a b1 x3 b2 = robdd_leaf value", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x1a b1 x3 b2.\n       \\<lbrakk>\\<lbrakk>robdd_invar_vars b1; robdd_invar_reduced b1;\n                 robdd_\\<alpha> b1 =\n                 robdd_\\<alpha> (robdd_leaf value)\\<rbrakk>\n                \\<Longrightarrow> b1 = robdd_leaf value;\n        \\<lbrakk>robdd_invar_vars b2; robdd_invar_reduced b2;\n         robdd_\\<alpha> b2 = robdd_\\<alpha> (robdd_leaf value)\\<rbrakk>\n        \\<Longrightarrow> b2 = robdd_leaf value;\n        robdd_invar_vars (robdd_var x1a b1 x3 b2);\n        robdd_invar_reduced (robdd_var x1a b1 x3 b2);\n        robdd_\\<alpha> (robdd_var x1a b1 x3 b2) =\n        robdd_\\<alpha> (robdd_leaf value)\\<rbrakk>\n       \\<Longrightarrow> robdd_var x1a b1 x3 b2 = robdd_leaf value", "case (robdd_var i l v r)"], ["proof (state)\nthis:\n  \\<lbrakk>robdd_invar_vars l; robdd_invar_reduced l;\n   robdd_\\<alpha> l = robdd_\\<alpha> (robdd_leaf value)\\<rbrakk>\n  \\<Longrightarrow> l = robdd_leaf value\n  \\<lbrakk>robdd_invar_vars r; robdd_invar_reduced r;\n   robdd_\\<alpha> r = robdd_\\<alpha> (robdd_leaf value)\\<rbrakk>\n  \\<Longrightarrow> r = robdd_leaf value\n  robdd_invar_vars (robdd_var i l v r)\n  robdd_invar_reduced (robdd_var i l v r)\n  robdd_\\<alpha> (robdd_var i l v r) = robdd_\\<alpha> (robdd_leaf value)\n\ngoal (1 subgoal):\n 1. \\<And>x1a b1 x3 b2.\n       \\<lbrakk>\\<lbrakk>robdd_invar_vars b1; robdd_invar_reduced b1;\n                 robdd_\\<alpha> b1 =\n                 robdd_\\<alpha> (robdd_leaf value)\\<rbrakk>\n                \\<Longrightarrow> b1 = robdd_leaf value;\n        \\<lbrakk>robdd_invar_vars b2; robdd_invar_reduced b2;\n         robdd_\\<alpha> b2 = robdd_\\<alpha> (robdd_leaf value)\\<rbrakk>\n        \\<Longrightarrow> b2 = robdd_leaf value;\n        robdd_invar_vars (robdd_var x1a b1 x3 b2);\n        robdd_invar_reduced (robdd_var x1a b1 x3 b2);\n        robdd_\\<alpha> (robdd_var x1a b1 x3 b2) =\n        robdd_\\<alpha> (robdd_leaf value)\\<rbrakk>\n       \\<Longrightarrow> robdd_var x1a b1 x3 b2 = robdd_leaf value", "note invar_l = robdd_var(1)"], ["proof (state)\nthis:\n  \\<lbrakk>robdd_invar_vars l; robdd_invar_reduced l;\n   robdd_\\<alpha> l = robdd_\\<alpha> (robdd_leaf value)\\<rbrakk>\n  \\<Longrightarrow> l = robdd_leaf value\n\ngoal (1 subgoal):\n 1. \\<And>x1a b1 x3 b2.\n       \\<lbrakk>\\<lbrakk>robdd_invar_vars b1; robdd_invar_reduced b1;\n                 robdd_\\<alpha> b1 =\n                 robdd_\\<alpha> (robdd_leaf value)\\<rbrakk>\n                \\<Longrightarrow> b1 = robdd_leaf value;\n        \\<lbrakk>robdd_invar_vars b2; robdd_invar_reduced b2;\n         robdd_\\<alpha> b2 = robdd_\\<alpha> (robdd_leaf value)\\<rbrakk>\n        \\<Longrightarrow> b2 = robdd_leaf value;\n        robdd_invar_vars (robdd_var x1a b1 x3 b2);\n        robdd_invar_reduced (robdd_var x1a b1 x3 b2);\n        robdd_\\<alpha> (robdd_var x1a b1 x3 b2) =\n        robdd_\\<alpha> (robdd_leaf value)\\<rbrakk>\n       \\<Longrightarrow> robdd_var x1a b1 x3 b2 = robdd_leaf value", "note invar_r = robdd_var(2)"], ["proof (state)\nthis:\n  \\<lbrakk>robdd_invar_vars r; robdd_invar_reduced r;\n   robdd_\\<alpha> r = robdd_\\<alpha> (robdd_leaf value)\\<rbrakk>\n  \\<Longrightarrow> r = robdd_leaf value\n\ngoal (1 subgoal):\n 1. \\<And>x1a b1 x3 b2.\n       \\<lbrakk>\\<lbrakk>robdd_invar_vars b1; robdd_invar_reduced b1;\n                 robdd_\\<alpha> b1 =\n                 robdd_\\<alpha> (robdd_leaf value)\\<rbrakk>\n                \\<Longrightarrow> b1 = robdd_leaf value;\n        \\<lbrakk>robdd_invar_vars b2; robdd_invar_reduced b2;\n         robdd_\\<alpha> b2 = robdd_\\<alpha> (robdd_leaf value)\\<rbrakk>\n        \\<Longrightarrow> b2 = robdd_leaf value;\n        robdd_invar_vars (robdd_var x1a b1 x3 b2);\n        robdd_invar_reduced (robdd_var x1a b1 x3 b2);\n        robdd_\\<alpha> (robdd_var x1a b1 x3 b2) =\n        robdd_\\<alpha> (robdd_leaf value)\\<rbrakk>\n       \\<Longrightarrow> robdd_var x1a b1 x3 b2 = robdd_leaf value", "note invars = robdd_var(3,4)"], ["proof (state)\nthis:\n  robdd_invar_vars (robdd_var i l v r)\n  robdd_invar_reduced (robdd_var i l v r)\n\ngoal (1 subgoal):\n 1. \\<And>x1a b1 x3 b2.\n       \\<lbrakk>\\<lbrakk>robdd_invar_vars b1; robdd_invar_reduced b1;\n                 robdd_\\<alpha> b1 =\n                 robdd_\\<alpha> (robdd_leaf value)\\<rbrakk>\n                \\<Longrightarrow> b1 = robdd_leaf value;\n        \\<lbrakk>robdd_invar_vars b2; robdd_invar_reduced b2;\n         robdd_\\<alpha> b2 = robdd_\\<alpha> (robdd_leaf value)\\<rbrakk>\n        \\<Longrightarrow> b2 = robdd_leaf value;\n        robdd_invar_vars (robdd_var x1a b1 x3 b2);\n        robdd_invar_reduced (robdd_var x1a b1 x3 b2);\n        robdd_\\<alpha> (robdd_var x1a b1 x3 b2) =\n        robdd_\\<alpha> (robdd_leaf value)\\<rbrakk>\n       \\<Longrightarrow> robdd_var x1a b1 x3 b2 = robdd_leaf value", "note \\<alpha>_eq = robdd_var(5)"], ["proof (state)\nthis:\n  robdd_\\<alpha> (robdd_var i l v r) = robdd_\\<alpha> (robdd_leaf value)\n\ngoal (1 subgoal):\n 1. \\<And>x1a b1 x3 b2.\n       \\<lbrakk>\\<lbrakk>robdd_invar_vars b1; robdd_invar_reduced b1;\n                 robdd_\\<alpha> b1 =\n                 robdd_\\<alpha> (robdd_leaf value)\\<rbrakk>\n                \\<Longrightarrow> b1 = robdd_leaf value;\n        \\<lbrakk>robdd_invar_vars b2; robdd_invar_reduced b2;\n         robdd_\\<alpha> b2 = robdd_\\<alpha> (robdd_leaf value)\\<rbrakk>\n        \\<Longrightarrow> b2 = robdd_leaf value;\n        robdd_invar_vars (robdd_var x1a b1 x3 b2);\n        robdd_invar_reduced (robdd_var x1a b1 x3 b2);\n        robdd_\\<alpha> (robdd_var x1a b1 x3 b2) =\n        robdd_\\<alpha> (robdd_leaf value)\\<rbrakk>\n       \\<Longrightarrow> robdd_var x1a b1 x3 b2 = robdd_leaf value", "{"], ["proof (state)\nthis:\n  robdd_\\<alpha> (robdd_var i l v r) = robdd_\\<alpha> (robdd_leaf value)\n\ngoal (1 subgoal):\n 1. \\<And>x1a b1 x3 b2.\n       \\<lbrakk>\\<lbrakk>robdd_invar_vars b1; robdd_invar_reduced b1;\n                 robdd_\\<alpha> b1 =\n                 robdd_\\<alpha> (robdd_leaf value)\\<rbrakk>\n                \\<Longrightarrow> b1 = robdd_leaf value;\n        \\<lbrakk>robdd_invar_vars b2; robdd_invar_reduced b2;\n         robdd_\\<alpha> b2 = robdd_\\<alpha> (robdd_leaf value)\\<rbrakk>\n        \\<Longrightarrow> b2 = robdd_leaf value;\n        robdd_invar_vars (robdd_var x1a b1 x3 b2);\n        robdd_invar_reduced (robdd_var x1a b1 x3 b2);\n        robdd_\\<alpha> (robdd_var x1a b1 x3 b2) =\n        robdd_\\<alpha> (robdd_leaf value)\\<rbrakk>\n       \\<Longrightarrow> robdd_var x1a b1 x3 b2 = robdd_leaf value", "fix a"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x1a b1 x3 b2.\n       \\<lbrakk>\\<lbrakk>robdd_invar_vars b1; robdd_invar_reduced b1;\n                 robdd_\\<alpha> b1 =\n                 robdd_\\<alpha> (robdd_leaf value)\\<rbrakk>\n                \\<Longrightarrow> b1 = robdd_leaf value;\n        \\<lbrakk>robdd_invar_vars b2; robdd_invar_reduced b2;\n         robdd_\\<alpha> b2 = robdd_\\<alpha> (robdd_leaf value)\\<rbrakk>\n        \\<Longrightarrow> b2 = robdd_leaf value;\n        robdd_invar_vars (robdd_var x1a b1 x3 b2);\n        robdd_invar_reduced (robdd_var x1a b1 x3 b2);\n        robdd_\\<alpha> (robdd_var x1a b1 x3 b2) =\n        robdd_\\<alpha> (robdd_leaf value)\\<rbrakk>\n       \\<Longrightarrow> robdd_var x1a b1 x3 b2 = robdd_leaf value", "from invars(1)"], ["proof (chain)\npicking this:\n  robdd_invar_vars (robdd_var i l v r)", "have invars_b11_b12: \"robdd_invar_vars_greater (Suc v) l\"\n                                    \"robdd_invar_vars_greater (Suc v) r\""], ["proof (prove)\nusing this:\n  robdd_invar_vars (robdd_var i l v r)\n\ngoal (1 subgoal):\n 1. robdd_invar_vars_greater (Suc v) l &&&\n    robdd_invar_vars_greater (Suc v) r", "by (simp_all add: robdd_invar_vars_def)"], ["proof (state)\nthis:\n  robdd_invar_vars_greater (Suc v) l\n  robdd_invar_vars_greater (Suc v) r\n\ngoal (1 subgoal):\n 1. \\<And>x1a b1 x3 b2.\n       \\<lbrakk>\\<lbrakk>robdd_invar_vars b1; robdd_invar_reduced b1;\n                 robdd_\\<alpha> b1 =\n                 robdd_\\<alpha> (robdd_leaf value)\\<rbrakk>\n                \\<Longrightarrow> b1 = robdd_leaf value;\n        \\<lbrakk>robdd_invar_vars b2; robdd_invar_reduced b2;\n         robdd_\\<alpha> b2 = robdd_\\<alpha> (robdd_leaf value)\\<rbrakk>\n        \\<Longrightarrow> b2 = robdd_leaf value;\n        robdd_invar_vars (robdd_var x1a b1 x3 b2);\n        robdd_invar_reduced (robdd_var x1a b1 x3 b2);\n        robdd_\\<alpha> (robdd_var x1a b1 x3 b2) =\n        robdd_\\<alpha> (robdd_leaf value)\\<rbrakk>\n       \\<Longrightarrow> robdd_var x1a b1 x3 b2 = robdd_leaf value", "let ?a1 = \"\\<lambda>v'. if v = v' then True else a v'\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x1a b1 x3 b2.\n       \\<lbrakk>\\<lbrakk>robdd_invar_vars b1; robdd_invar_reduced b1;\n                 robdd_\\<alpha> b1 =\n                 robdd_\\<alpha> (robdd_leaf value)\\<rbrakk>\n                \\<Longrightarrow> b1 = robdd_leaf value;\n        \\<lbrakk>robdd_invar_vars b2; robdd_invar_reduced b2;\n         robdd_\\<alpha> b2 = robdd_\\<alpha> (robdd_leaf value)\\<rbrakk>\n        \\<Longrightarrow> b2 = robdd_leaf value;\n        robdd_invar_vars (robdd_var x1a b1 x3 b2);\n        robdd_invar_reduced (robdd_var x1a b1 x3 b2);\n        robdd_\\<alpha> (robdd_var x1a b1 x3 b2) =\n        robdd_\\<alpha> (robdd_leaf value)\\<rbrakk>\n       \\<Longrightarrow> robdd_var x1a b1 x3 b2 = robdd_leaf value", "let ?a2 = \"\\<lambda>v'. if v = v' then False else a v'\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x1a b1 x3 b2.\n       \\<lbrakk>\\<lbrakk>robdd_invar_vars b1; robdd_invar_reduced b1;\n                 robdd_\\<alpha> b1 =\n                 robdd_\\<alpha> (robdd_leaf value)\\<rbrakk>\n                \\<Longrightarrow> b1 = robdd_leaf value;\n        \\<lbrakk>robdd_invar_vars b2; robdd_invar_reduced b2;\n         robdd_\\<alpha> b2 = robdd_\\<alpha> (robdd_leaf value)\\<rbrakk>\n        \\<Longrightarrow> b2 = robdd_leaf value;\n        robdd_invar_vars (robdd_var x1a b1 x3 b2);\n        robdd_invar_reduced (robdd_var x1a b1 x3 b2);\n        robdd_\\<alpha> (robdd_var x1a b1 x3 b2) =\n        robdd_\\<alpha> (robdd_leaf value)\\<rbrakk>\n       \\<Longrightarrow> robdd_var x1a b1 x3 b2 = robdd_leaf value", "from \\<alpha>_eq"], ["proof (chain)\npicking this:\n  robdd_\\<alpha> (robdd_var i l v r) = robdd_\\<alpha> (robdd_leaf value)", "have a_neg: \"\\<And>a. (if a v then robdd_\\<alpha> l a else robdd_\\<alpha> r a) \\<longleftrightarrow> value\""], ["proof (prove)\nusing this:\n  robdd_\\<alpha> (robdd_var i l v r) = robdd_\\<alpha> (robdd_leaf value)\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       (if a v then robdd_\\<alpha> l a else robdd_\\<alpha> r a) = value", "by (simp add: fun_eq_iff)"], ["proof (state)\nthis:\n  (if ?a v then robdd_\\<alpha> l ?a else robdd_\\<alpha> r ?a) = value\n\ngoal (1 subgoal):\n 1. \\<And>x1a b1 x3 b2.\n       \\<lbrakk>\\<lbrakk>robdd_invar_vars b1; robdd_invar_reduced b1;\n                 robdd_\\<alpha> b1 =\n                 robdd_\\<alpha> (robdd_leaf value)\\<rbrakk>\n                \\<Longrightarrow> b1 = robdd_leaf value;\n        \\<lbrakk>robdd_invar_vars b2; robdd_invar_reduced b2;\n         robdd_\\<alpha> b2 = robdd_\\<alpha> (robdd_leaf value)\\<rbrakk>\n        \\<Longrightarrow> b2 = robdd_leaf value;\n        robdd_invar_vars (robdd_var x1a b1 x3 b2);\n        robdd_invar_reduced (robdd_var x1a b1 x3 b2);\n        robdd_\\<alpha> (robdd_var x1a b1 x3 b2) =\n        robdd_\\<alpha> (robdd_leaf value)\\<rbrakk>\n       \\<Longrightarrow> robdd_var x1a b1 x3 b2 = robdd_leaf value", "from robdd_\\<alpha>_invar_greater [OF invars_b11_b12(1), of a ?a1, symmetric]\n         robdd_\\<alpha>_invar_greater [OF invars_b11_b12(2), of a ?a2, symmetric]\n         a_neg[of ?a1] a_neg[of ?a2]"], ["proof (chain)\npicking this:\n  (\\<And>va.\n      Suc v \\<le> va \\<Longrightarrow>\n      a va = (if v = va then True else a va)) \\<Longrightarrow>\n  robdd_\\<alpha> l (\\<lambda>v'. if v = v' then True else a v') =\n  robdd_\\<alpha> l a\n  (\\<And>va.\n      Suc v \\<le> va \\<Longrightarrow>\n      a va = (if v = va then False else a va)) \\<Longrightarrow>\n  robdd_\\<alpha> r (\\<lambda>v'. if v = v' then False else a v') =\n  robdd_\\<alpha> r a\n  (if if v = v then True else a v\n   then robdd_\\<alpha> l (\\<lambda>v'. if v = v' then True else a v')\n   else robdd_\\<alpha> r (\\<lambda>v'. if v = v' then True else a v')) =\n  value\n  (if if v = v then False else a v\n   then robdd_\\<alpha> l (\\<lambda>v'. if v = v' then False else a v')\n   else robdd_\\<alpha> r (\\<lambda>v'. if v = v' then False else a v')) =\n  value", "have \"robdd_\\<alpha> l a = value \\<and> robdd_\\<alpha> r a = value\""], ["proof (prove)\nusing this:\n  (\\<And>va.\n      Suc v \\<le> va \\<Longrightarrow>\n      a va = (if v = va then True else a va)) \\<Longrightarrow>\n  robdd_\\<alpha> l (\\<lambda>v'. if v = v' then True else a v') =\n  robdd_\\<alpha> l a\n  (\\<And>va.\n      Suc v \\<le> va \\<Longrightarrow>\n      a va = (if v = va then False else a va)) \\<Longrightarrow>\n  robdd_\\<alpha> r (\\<lambda>v'. if v = v' then False else a v') =\n  robdd_\\<alpha> r a\n  (if if v = v then True else a v\n   then robdd_\\<alpha> l (\\<lambda>v'. if v = v' then True else a v')\n   else robdd_\\<alpha> r (\\<lambda>v'. if v = v' then True else a v')) =\n  value\n  (if if v = v then False else a v\n   then robdd_\\<alpha> l (\\<lambda>v'. if v = v' then False else a v')\n   else robdd_\\<alpha> r (\\<lambda>v'. if v = v' then False else a v')) =\n  value\n\ngoal (1 subgoal):\n 1. robdd_\\<alpha> l a = value \\<and> robdd_\\<alpha> r a = value", "by simp"], ["proof (state)\nthis:\n  robdd_\\<alpha> l a = value \\<and> robdd_\\<alpha> r a = value\n\ngoal (1 subgoal):\n 1. \\<And>x1a b1 x3 b2.\n       \\<lbrakk>\\<lbrakk>robdd_invar_vars b1; robdd_invar_reduced b1;\n                 robdd_\\<alpha> b1 =\n                 robdd_\\<alpha> (robdd_leaf value)\\<rbrakk>\n                \\<Longrightarrow> b1 = robdd_leaf value;\n        \\<lbrakk>robdd_invar_vars b2; robdd_invar_reduced b2;\n         robdd_\\<alpha> b2 = robdd_\\<alpha> (robdd_leaf value)\\<rbrakk>\n        \\<Longrightarrow> b2 = robdd_leaf value;\n        robdd_invar_vars (robdd_var x1a b1 x3 b2);\n        robdd_invar_reduced (robdd_var x1a b1 x3 b2);\n        robdd_\\<alpha> (robdd_var x1a b1 x3 b2) =\n        robdd_\\<alpha> (robdd_leaf value)\\<rbrakk>\n       \\<Longrightarrow> robdd_var x1a b1 x3 b2 = robdd_leaf value", "}"], ["proof (state)\nthis:\n  robdd_\\<alpha> l ?a2 = value \\<and> robdd_\\<alpha> r ?a2 = value\n\ngoal (1 subgoal):\n 1. \\<And>x1a b1 x3 b2.\n       \\<lbrakk>\\<lbrakk>robdd_invar_vars b1; robdd_invar_reduced b1;\n                 robdd_\\<alpha> b1 =\n                 robdd_\\<alpha> (robdd_leaf value)\\<rbrakk>\n                \\<Longrightarrow> b1 = robdd_leaf value;\n        \\<lbrakk>robdd_invar_vars b2; robdd_invar_reduced b2;\n         robdd_\\<alpha> b2 = robdd_\\<alpha> (robdd_leaf value)\\<rbrakk>\n        \\<Longrightarrow> b2 = robdd_leaf value;\n        robdd_invar_vars (robdd_var x1a b1 x3 b2);\n        robdd_invar_reduced (robdd_var x1a b1 x3 b2);\n        robdd_\\<alpha> (robdd_var x1a b1 x3 b2) =\n        robdd_\\<alpha> (robdd_leaf value)\\<rbrakk>\n       \\<Longrightarrow> robdd_var x1a b1 x3 b2 = robdd_leaf value", "hence \\<alpha>_l: \"robdd_\\<alpha> l = robdd_\\<alpha> (robdd_leaf value)\" and \n        \\<alpha>_r: \"robdd_\\<alpha> r = robdd_\\<alpha> (robdd_leaf value)\""], ["proof (prove)\nusing this:\n  robdd_\\<alpha> l ?a2 = value \\<and> robdd_\\<alpha> r ?a2 = value\n\ngoal (1 subgoal):\n 1. robdd_\\<alpha> l = robdd_\\<alpha> (robdd_leaf value) &&&\n    robdd_\\<alpha> r = robdd_\\<alpha> (robdd_leaf value)", "by (simp_all add: fun_eq_iff)"], ["proof (state)\nthis:\n  robdd_\\<alpha> l = robdd_\\<alpha> (robdd_leaf value)\n  robdd_\\<alpha> r = robdd_\\<alpha> (robdd_leaf value)\n\ngoal (1 subgoal):\n 1. \\<And>x1a b1 x3 b2.\n       \\<lbrakk>\\<lbrakk>robdd_invar_vars b1; robdd_invar_reduced b1;\n                 robdd_\\<alpha> b1 =\n                 robdd_\\<alpha> (robdd_leaf value)\\<rbrakk>\n                \\<Longrightarrow> b1 = robdd_leaf value;\n        \\<lbrakk>robdd_invar_vars b2; robdd_invar_reduced b2;\n         robdd_\\<alpha> b2 = robdd_\\<alpha> (robdd_leaf value)\\<rbrakk>\n        \\<Longrightarrow> b2 = robdd_leaf value;\n        robdd_invar_vars (robdd_var x1a b1 x3 b2);\n        robdd_invar_reduced (robdd_var x1a b1 x3 b2);\n        robdd_\\<alpha> (robdd_var x1a b1 x3 b2) =\n        robdd_\\<alpha> (robdd_leaf value)\\<rbrakk>\n       \\<Longrightarrow> robdd_var x1a b1 x3 b2 = robdd_leaf value", "from invars"], ["proof (chain)\npicking this:\n  robdd_invar_vars (robdd_var i l v r)\n  robdd_invar_reduced (robdd_var i l v r)", "have \"robdd_invar_vars l\" \"robdd_invar_vars r\"\n                   \"robdd_invar_reduced l\" \"robdd_invar_reduced r\""], ["proof (prove)\nusing this:\n  robdd_invar_vars (robdd_var i l v r)\n  robdd_invar_reduced (robdd_var i l v r)\n\ngoal (1 subgoal):\n 1. (robdd_invar_vars l &&& robdd_invar_vars r) &&&\n    robdd_invar_reduced l &&& robdd_invar_reduced r", "apply (simp_all add: robdd_invar_vars_def)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>robdd_invar_vars_greater (Suc v) l \\<and>\n             robdd_invar_vars_greater (Suc v) r;\n     \\<not> robdd_equiv l r \\<and>\n     robdd_invar_reduced l \\<and> robdd_invar_reduced r\\<rbrakk>\n    \\<Longrightarrow> robdd_invar_vars_greater 0 l\n 2. \\<lbrakk>robdd_invar_vars_greater (Suc v) l \\<and>\n             robdd_invar_vars_greater (Suc v) r;\n     \\<not> robdd_equiv l r \\<and>\n     robdd_invar_reduced l \\<and> robdd_invar_reduced r\\<rbrakk>\n    \\<Longrightarrow> robdd_invar_vars_greater 0 r", "apply (metis robdd_invar_vars_def robdd_invar_vars_impl)+"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  robdd_invar_vars l\n  robdd_invar_vars r\n  robdd_invar_reduced l\n  robdd_invar_reduced r\n\ngoal (1 subgoal):\n 1. \\<And>x1a b1 x3 b2.\n       \\<lbrakk>\\<lbrakk>robdd_invar_vars b1; robdd_invar_reduced b1;\n                 robdd_\\<alpha> b1 =\n                 robdd_\\<alpha> (robdd_leaf value)\\<rbrakk>\n                \\<Longrightarrow> b1 = robdd_leaf value;\n        \\<lbrakk>robdd_invar_vars b2; robdd_invar_reduced b2;\n         robdd_\\<alpha> b2 = robdd_\\<alpha> (robdd_leaf value)\\<rbrakk>\n        \\<Longrightarrow> b2 = robdd_leaf value;\n        robdd_invar_vars (robdd_var x1a b1 x3 b2);\n        robdd_invar_reduced (robdd_var x1a b1 x3 b2);\n        robdd_\\<alpha> (robdd_var x1a b1 x3 b2) =\n        robdd_\\<alpha> (robdd_leaf value)\\<rbrakk>\n       \\<Longrightarrow> robdd_var x1a b1 x3 b2 = robdd_leaf value", "with invar_l[OF _ _ \\<alpha>_l] invar_r[OF _ _ \\<alpha>_r]"], ["proof (chain)\npicking this:\n  \\<lbrakk>robdd_invar_vars l; robdd_invar_reduced l\\<rbrakk>\n  \\<Longrightarrow> l = robdd_leaf value\n  \\<lbrakk>robdd_invar_vars r; robdd_invar_reduced r\\<rbrakk>\n  \\<Longrightarrow> r = robdd_leaf value\n  robdd_invar_vars l\n  robdd_invar_vars r\n  robdd_invar_reduced l\n  robdd_invar_reduced r", "have \"l = r\""], ["proof (prove)\nusing this:\n  \\<lbrakk>robdd_invar_vars l; robdd_invar_reduced l\\<rbrakk>\n  \\<Longrightarrow> l = robdd_leaf value\n  \\<lbrakk>robdd_invar_vars r; robdd_invar_reduced r\\<rbrakk>\n  \\<Longrightarrow> r = robdd_leaf value\n  robdd_invar_vars l\n  robdd_invar_vars r\n  robdd_invar_reduced l\n  robdd_invar_reduced r\n\ngoal (1 subgoal):\n 1. l = r", "by simp"], ["proof (state)\nthis:\n  l = r\n\ngoal (1 subgoal):\n 1. \\<And>x1a b1 x3 b2.\n       \\<lbrakk>\\<lbrakk>robdd_invar_vars b1; robdd_invar_reduced b1;\n                 robdd_\\<alpha> b1 =\n                 robdd_\\<alpha> (robdd_leaf value)\\<rbrakk>\n                \\<Longrightarrow> b1 = robdd_leaf value;\n        \\<lbrakk>robdd_invar_vars b2; robdd_invar_reduced b2;\n         robdd_\\<alpha> b2 = robdd_\\<alpha> (robdd_leaf value)\\<rbrakk>\n        \\<Longrightarrow> b2 = robdd_leaf value;\n        robdd_invar_vars (robdd_var x1a b1 x3 b2);\n        robdd_invar_reduced (robdd_var x1a b1 x3 b2);\n        robdd_\\<alpha> (robdd_var x1a b1 x3 b2) =\n        robdd_\\<alpha> (robdd_leaf value)\\<rbrakk>\n       \\<Longrightarrow> robdd_var x1a b1 x3 b2 = robdd_leaf value", "with invars(2)"], ["proof (chain)\npicking this:\n  robdd_invar_reduced (robdd_var i l v r)\n  l = r", "have \"False\""], ["proof (prove)\nusing this:\n  robdd_invar_reduced (robdd_var i l v r)\n  l = r\n\ngoal (1 subgoal):\n 1. False", "by simp"], ["proof (state)\nthis:\n  False\n\ngoal (1 subgoal):\n 1. \\<And>x1a b1 x3 b2.\n       \\<lbrakk>\\<lbrakk>robdd_invar_vars b1; robdd_invar_reduced b1;\n                 robdd_\\<alpha> b1 =\n                 robdd_\\<alpha> (robdd_leaf value)\\<rbrakk>\n                \\<Longrightarrow> b1 = robdd_leaf value;\n        \\<lbrakk>robdd_invar_vars b2; robdd_invar_reduced b2;\n         robdd_\\<alpha> b2 = robdd_\\<alpha> (robdd_leaf value)\\<rbrakk>\n        \\<Longrightarrow> b2 = robdd_leaf value;\n        robdd_invar_vars (robdd_var x1a b1 x3 b2);\n        robdd_invar_reduced (robdd_var x1a b1 x3 b2);\n        robdd_\\<alpha> (robdd_var x1a b1 x3 b2) =\n        robdd_\\<alpha> (robdd_leaf value)\\<rbrakk>\n       \\<Longrightarrow> robdd_var x1a b1 x3 b2 = robdd_leaf value", "thus ?case"], ["proof (prove)\nusing this:\n  False\n\ngoal (1 subgoal):\n 1. robdd_var i l v r = robdd_leaf value", "by simp"], ["proof (state)\nthis:\n  robdd_var i l v r = robdd_leaf value\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma robdd_unique_var :\nassumes invars_b1: \"robdd_invar_vars (robdd_var i1 l1 v1 r1)\" \"robdd_invar_reduced (robdd_var i1 l1 v1 r1)\"\n    and invars_b2: \"robdd_invar_vars (robdd_var i2 l2 v2 r2)\" \"robdd_invar_reduced (robdd_var i2 l2 v2 r2)\"\n    and sem_neq_b1: \"robdd_\\<alpha> l1 \\<noteq> robdd_\\<alpha> r1\"\n    and sem_neq_b2: \"robdd_\\<alpha> l2 \\<noteq> robdd_\\<alpha> r2\"\n    and sem_eq: \"robdd_\\<alpha> (robdd_var i1 l1 v1 r1) = robdd_\\<alpha> (robdd_var i2 l2 v2 r2)\"\nshows \"v1 = v2 \\<and> robdd_\\<alpha> l1 = robdd_\\<alpha> l2 \\<and> robdd_\\<alpha> r1 = robdd_\\<alpha> r2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. v1 = v2 \\<and>\n    robdd_\\<alpha> l1 = robdd_\\<alpha> l2 \\<and>\n    robdd_\\<alpha> r1 = robdd_\\<alpha> r2", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. v1 = v2 \\<and>\n    robdd_\\<alpha> l1 = robdd_\\<alpha> l2 \\<and>\n    robdd_\\<alpha> r1 = robdd_\\<alpha> r2", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. v1 = v2 \\<and>\n    robdd_\\<alpha> l1 = robdd_\\<alpha> l2 \\<and>\n    robdd_\\<alpha> r1 = robdd_\\<alpha> r2", "fix i1 l1 v1 r1 i2 l2 v2 r2 n1 n2"], ["proof (state)\ngoal (1 subgoal):\n 1. v1 = v2 \\<and>\n    robdd_\\<alpha> l1 = robdd_\\<alpha> l2 \\<and>\n    robdd_\\<alpha> r1 = robdd_\\<alpha> r2", "assume invars_b1: \"robdd_invar_vars_greater n1 (robdd_var i1 l1 v1 r1)\" \"robdd_invar_reduced (robdd_var i1 l1 v1 r1)\"\n       and invars_b2: \"robdd_invar_vars_greater n2 (robdd_var i2 l2 v2 r2)\" \"robdd_invar_reduced (robdd_var i2 l2 v2 r2)\"\n       and sem_neq: \"robdd_\\<alpha> l1 \\<noteq> robdd_\\<alpha> r1\"\n       and sem_eq: \"robdd_\\<alpha> (robdd_var i1 l1 v1 r1) = robdd_\\<alpha> (robdd_var i2 l2 v2 r2)\"\n       and ord: \"v1 \\<le> v2\""], ["proof (state)\nthis:\n  robdd_invar_vars_greater n1 (robdd_var i1 l1 v1 r1)\n  robdd_invar_reduced (robdd_var i1 l1 v1 r1)\n  robdd_invar_vars_greater n2 (robdd_var i2 l2 v2 r2)\n  robdd_invar_reduced (robdd_var i2 l2 v2 r2)\n  robdd_\\<alpha> l1 \\<noteq> robdd_\\<alpha> r1\n  robdd_\\<alpha> (robdd_var i1 l1 v1 r1) =\n  robdd_\\<alpha> (robdd_var i2 l2 v2 r2)\n  v1 \\<le> v2\n\ngoal (1 subgoal):\n 1. v1 = v2 \\<and>\n    robdd_\\<alpha> l1 = robdd_\\<alpha> l2 \\<and>\n    robdd_\\<alpha> r1 = robdd_\\<alpha> r2", "from invars_b1(1)"], ["proof (chain)\npicking this:\n  robdd_invar_vars_greater n1 (robdd_var i1 l1 v1 r1)", "have invars_lr1: \"robdd_invar_vars_greater (Suc v1) l1\"\n                                       \"robdd_invar_vars_greater (Suc v1) r1\""], ["proof (prove)\nusing this:\n  robdd_invar_vars_greater n1 (robdd_var i1 l1 v1 r1)\n\ngoal (1 subgoal):\n 1. robdd_invar_vars_greater (Suc v1) l1 &&&\n    robdd_invar_vars_greater (Suc v1) r1", "by simp_all"], ["proof (state)\nthis:\n  robdd_invar_vars_greater (Suc v1) l1\n  robdd_invar_vars_greater (Suc v1) r1\n\ngoal (1 subgoal):\n 1. v1 = v2 \\<and>\n    robdd_\\<alpha> l1 = robdd_\\<alpha> l2 \\<and>\n    robdd_\\<alpha> r1 = robdd_\\<alpha> r2", "from invars_b2(1)"], ["proof (chain)\npicking this:\n  robdd_invar_vars_greater n2 (robdd_var i2 l2 v2 r2)", "have invars_lr2: \"robdd_invar_vars_greater (Suc v1) l2\"\n                                       \"robdd_invar_vars_greater (Suc v1) r2\"\n                                       \"v1 \\<noteq> v2 \\<Longrightarrow> robdd_invar_vars_greater v1 (robdd_var i1 l1 v1 r1)\""], ["proof (prove)\nusing this:\n  robdd_invar_vars_greater n2 (robdd_var i2 l2 v2 r2)\n\ngoal (1 subgoal):\n 1. robdd_invar_vars_greater (Suc v1) l2 &&&\n    robdd_invar_vars_greater (Suc v1) r2 &&&\n    (v1 \\<noteq> v2 \\<Longrightarrow>\n     robdd_invar_vars_greater v1 (robdd_var i1 l1 v1 r1))", "apply (simp_all add: robdd_invar_ext_def robdd_invar_vars_def)"], ["proof (prove)\ngoal (3 subgoals):\n 1. n2 \\<le> v2 \\<and>\n    robdd_invar_vars_greater (Suc v2) l2 \\<and>\n    robdd_invar_vars_greater (Suc v2) r2 \\<Longrightarrow>\n    robdd_invar_vars_greater (Suc v1) l2\n 2. n2 \\<le> v2 \\<and>\n    robdd_invar_vars_greater (Suc v2) l2 \\<and>\n    robdd_invar_vars_greater (Suc v2) r2 \\<Longrightarrow>\n    robdd_invar_vars_greater (Suc v1) r2\n 3. \\<lbrakk>v1 \\<noteq> v2;\n     n2 \\<le> v2 \\<and>\n     robdd_invar_vars_greater (Suc v2) l2 \\<and>\n     robdd_invar_vars_greater (Suc v2) r2\\<rbrakk>\n    \\<Longrightarrow> robdd_invar_vars_greater (Suc v1) l1 \\<and>\n                      robdd_invar_vars_greater (Suc v1) r1", "apply (metis not_less_eq_eq robdd_invar_vars_greater___weaken ord)"], ["proof (prove)\ngoal (2 subgoals):\n 1. n2 \\<le> v2 \\<and>\n    robdd_invar_vars_greater (Suc v2) l2 \\<and>\n    robdd_invar_vars_greater (Suc v2) r2 \\<Longrightarrow>\n    robdd_invar_vars_greater (Suc v1) r2\n 2. \\<lbrakk>v1 \\<noteq> v2;\n     n2 \\<le> v2 \\<and>\n     robdd_invar_vars_greater (Suc v2) l2 \\<and>\n     robdd_invar_vars_greater (Suc v2) r2\\<rbrakk>\n    \\<Longrightarrow> robdd_invar_vars_greater (Suc v1) l1 \\<and>\n                      robdd_invar_vars_greater (Suc v1) r1", "apply (metis not_less_eq_eq robdd_invar_vars_greater___weaken ord)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>v1 \\<noteq> v2;\n     n2 \\<le> v2 \\<and>\n     robdd_invar_vars_greater (Suc v2) l2 \\<and>\n     robdd_invar_vars_greater (Suc v2) r2\\<rbrakk>\n    \\<Longrightarrow> robdd_invar_vars_greater (Suc v1) l1 \\<and>\n                      robdd_invar_vars_greater (Suc v1) r1", "apply (simp add: invars_lr1)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  robdd_invar_vars_greater (Suc v1) l2\n  robdd_invar_vars_greater (Suc v1) r2\n  v1 \\<noteq> v2 \\<Longrightarrow>\n  robdd_invar_vars_greater v1 (robdd_var i1 l1 v1 r1)\n\ngoal (1 subgoal):\n 1. v1 = v2 \\<and>\n    robdd_\\<alpha> l1 = robdd_\\<alpha> l2 \\<and>\n    robdd_\\<alpha> r1 = robdd_\\<alpha> r2", "from sem_eq"], ["proof (chain)\npicking this:\n  robdd_\\<alpha> (robdd_var i1 l1 v1 r1) =\n  robdd_\\<alpha> (robdd_var i2 l2 v2 r2)", "have sem_eq_a: \"\\<And>a. robdd_\\<alpha> (robdd_var i1 l1 v1 r1) a = robdd_\\<alpha> (robdd_var i2 l2 v2 r2) a\""], ["proof (prove)\nusing this:\n  robdd_\\<alpha> (robdd_var i1 l1 v1 r1) =\n  robdd_\\<alpha> (robdd_var i2 l2 v2 r2)\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       robdd_\\<alpha> (robdd_var i1 l1 v1 r1) a =\n       robdd_\\<alpha> (robdd_var i2 l2 v2 r2) a", "by (simp add: fun_eq_iff)"], ["proof (state)\nthis:\n  robdd_\\<alpha> (robdd_var i1 l1 v1 r1) ?a =\n  robdd_\\<alpha> (robdd_var i2 l2 v2 r2) ?a\n\ngoal (1 subgoal):\n 1. v1 = v2 \\<and>\n    robdd_\\<alpha> l1 = robdd_\\<alpha> l2 \\<and>\n    robdd_\\<alpha> r1 = robdd_\\<alpha> r2", "define a1 where \"a1 a v' = (if v1 = v' then True else a v')\" for a v'"], ["proof (state)\nthis:\n  a1 ?a ?v' = (if v1 = ?v' then True else ?a ?v')\n\ngoal (1 subgoal):\n 1. v1 = v2 \\<and>\n    robdd_\\<alpha> l1 = robdd_\\<alpha> l2 \\<and>\n    robdd_\\<alpha> r1 = robdd_\\<alpha> r2", "define a2 where \"a2 a v' = (if v1 = v' then False else a v')\" for a v'"], ["proof (state)\nthis:\n  a2 ?a ?v' = (if v1 = ?v' then False else ?a ?v')\n\ngoal (1 subgoal):\n 1. v1 = v2 \\<and>\n    robdd_\\<alpha> l1 = robdd_\\<alpha> l2 \\<and>\n    robdd_\\<alpha> r1 = robdd_\\<alpha> r2", "have a12_eval: \"\\<And>a. a1 a v1\" \"\\<And>a. ~(a2 a v1)\" \"\\<And>a v. v \\<noteq> v1 \\<Longrightarrow> a1 a v = a v \\<and> a2 a v = a v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>a. a1 a v1) &&&\n    (\\<And>a. \\<not> a2 a v1) &&&\n    (\\<And>a v.\n        v \\<noteq> v1 \\<Longrightarrow> a1 a v = a v \\<and> a2 a v = a v)", "unfolding a1_def a2_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>a. if v1 = v1 then True else a v1) &&&\n    (\\<And>a. \\<not> (if v1 = v1 then False else a v1)) &&&\n    (\\<And>a v.\n        v \\<noteq> v1 \\<Longrightarrow>\n        (if v1 = v then True else a v) = a v \\<and>\n        (if v1 = v then False else a v) = a v)", "by simp_all"], ["proof (state)\nthis:\n  a1 ?a v1\n  \\<not> a2 ?a v1\n  ?v \\<noteq> v1 \\<Longrightarrow> a1 ?a ?v = ?a ?v \\<and> a2 ?a ?v = ?a ?v\n\ngoal (1 subgoal):\n 1. v1 = v2 \\<and>\n    robdd_\\<alpha> l1 = robdd_\\<alpha> l2 \\<and>\n    robdd_\\<alpha> r1 = robdd_\\<alpha> r2", "{"], ["proof (state)\nthis:\n  a1 ?a v1\n  \\<not> a2 ?a v1\n  ?v \\<noteq> v1 \\<Longrightarrow> a1 ?a ?v = ?a ?v \\<and> a2 ?a ?v = ?a ?v\n\ngoal (1 subgoal):\n 1. v1 = v2 \\<and>\n    robdd_\\<alpha> l1 = robdd_\\<alpha> l2 \\<and>\n    robdd_\\<alpha> r1 = robdd_\\<alpha> r2", "fix a"], ["proof (state)\ngoal (1 subgoal):\n 1. v1 = v2 \\<and>\n    robdd_\\<alpha> l1 = robdd_\\<alpha> l2 \\<and>\n    robdd_\\<alpha> r1 = robdd_\\<alpha> r2", "from robdd_\\<alpha>_invar_greater [OF invars_lr1(1), of a \"a1 a\", symmetric]\n           robdd_\\<alpha>_invar_greater [OF invars_lr1(2), of a \"a2 a\", symmetric]\n           robdd_\\<alpha>_invar_greater [OF invars_lr2(1), of a \"a1 a\", symmetric]\n           robdd_\\<alpha>_invar_greater [OF invars_lr2(2), of a \"a2 a\", symmetric]\n           robdd_\\<alpha>_invar_greater [OF invars_lr1(1), of a \"a2 a\", symmetric]\n           robdd_\\<alpha>_invar_greater [OF invars_lr1(2), of a \"a1 a\", symmetric]\n           robdd_\\<alpha>_invar_greater [OF invars_lr2(1), of a \"a2 a\", symmetric]\n           robdd_\\<alpha>_invar_greater [OF invars_lr2(2), of a \"a1 a\", symmetric]\n           sem_eq_a[of \"a1 a\"] sem_eq_a[of \"a2 a\"]"], ["proof (chain)\npicking this:\n  (\\<And>v. Suc v1 \\<le> v \\<Longrightarrow> a v = a1 a v) \\<Longrightarrow>\n  robdd_\\<alpha> l1 (a1 a) = robdd_\\<alpha> l1 a\n  (\\<And>v. Suc v1 \\<le> v \\<Longrightarrow> a v = a2 a v) \\<Longrightarrow>\n  robdd_\\<alpha> r1 (a2 a) = robdd_\\<alpha> r1 a\n  (\\<And>v. Suc v1 \\<le> v \\<Longrightarrow> a v = a1 a v) \\<Longrightarrow>\n  robdd_\\<alpha> l2 (a1 a) = robdd_\\<alpha> l2 a\n  (\\<And>v. Suc v1 \\<le> v \\<Longrightarrow> a v = a2 a v) \\<Longrightarrow>\n  robdd_\\<alpha> r2 (a2 a) = robdd_\\<alpha> r2 a\n  (\\<And>v. Suc v1 \\<le> v \\<Longrightarrow> a v = a2 a v) \\<Longrightarrow>\n  robdd_\\<alpha> l1 (a2 a) = robdd_\\<alpha> l1 a\n  (\\<And>v. Suc v1 \\<le> v \\<Longrightarrow> a v = a1 a v) \\<Longrightarrow>\n  robdd_\\<alpha> r1 (a1 a) = robdd_\\<alpha> r1 a\n  (\\<And>v. Suc v1 \\<le> v \\<Longrightarrow> a v = a2 a v) \\<Longrightarrow>\n  robdd_\\<alpha> l2 (a2 a) = robdd_\\<alpha> l2 a\n  (\\<And>v. Suc v1 \\<le> v \\<Longrightarrow> a v = a1 a v) \\<Longrightarrow>\n  robdd_\\<alpha> r2 (a1 a) = robdd_\\<alpha> r2 a\n  robdd_\\<alpha> (robdd_var i1 l1 v1 r1) (a1 a) =\n  robdd_\\<alpha> (robdd_var i2 l2 v2 r2) (a1 a)\n  robdd_\\<alpha> (robdd_var i1 l1 v1 r1) (a2 a) =\n  robdd_\\<alpha> (robdd_var i2 l2 v2 r2) (a2 a)", "have a12_sem : \"robdd_\\<alpha> l1 (a1 a) = robdd_\\<alpha> l1 a\" \"robdd_\\<alpha> l2 (a1 a) = robdd_\\<alpha> l2 a\"\n                     \"robdd_\\<alpha> r1 (a2 a) = robdd_\\<alpha> r1 a\" \"robdd_\\<alpha> r2 (a2 a) = robdd_\\<alpha> r2 a\"\n                     \"robdd_\\<alpha> l1 (a2 a) = robdd_\\<alpha> l1 a\" \"robdd_\\<alpha> l2 (a2 a) = robdd_\\<alpha> l2 a\"\n                     \"robdd_\\<alpha> r1 (a1 a) = robdd_\\<alpha> r1 a\" \"robdd_\\<alpha> r2 (a2 a) = robdd_\\<alpha> r2 a\"\n                     \"v1 \\<noteq> v2 \\<Longrightarrow> robdd_\\<alpha> r1 a = robdd_\\<alpha> (robdd_var i2 l2 v2 r2) a\"\n                     \"v1 \\<noteq> v2 \\<Longrightarrow> robdd_\\<alpha> l1 a = robdd_\\<alpha> (robdd_var i2 l2 v2 r2) a\""], ["proof (prove)\nusing this:\n  (\\<And>v. Suc v1 \\<le> v \\<Longrightarrow> a v = a1 a v) \\<Longrightarrow>\n  robdd_\\<alpha> l1 (a1 a) = robdd_\\<alpha> l1 a\n  (\\<And>v. Suc v1 \\<le> v \\<Longrightarrow> a v = a2 a v) \\<Longrightarrow>\n  robdd_\\<alpha> r1 (a2 a) = robdd_\\<alpha> r1 a\n  (\\<And>v. Suc v1 \\<le> v \\<Longrightarrow> a v = a1 a v) \\<Longrightarrow>\n  robdd_\\<alpha> l2 (a1 a) = robdd_\\<alpha> l2 a\n  (\\<And>v. Suc v1 \\<le> v \\<Longrightarrow> a v = a2 a v) \\<Longrightarrow>\n  robdd_\\<alpha> r2 (a2 a) = robdd_\\<alpha> r2 a\n  (\\<And>v. Suc v1 \\<le> v \\<Longrightarrow> a v = a2 a v) \\<Longrightarrow>\n  robdd_\\<alpha> l1 (a2 a) = robdd_\\<alpha> l1 a\n  (\\<And>v. Suc v1 \\<le> v \\<Longrightarrow> a v = a1 a v) \\<Longrightarrow>\n  robdd_\\<alpha> r1 (a1 a) = robdd_\\<alpha> r1 a\n  (\\<And>v. Suc v1 \\<le> v \\<Longrightarrow> a v = a2 a v) \\<Longrightarrow>\n  robdd_\\<alpha> l2 (a2 a) = robdd_\\<alpha> l2 a\n  (\\<And>v. Suc v1 \\<le> v \\<Longrightarrow> a v = a1 a v) \\<Longrightarrow>\n  robdd_\\<alpha> r2 (a1 a) = robdd_\\<alpha> r2 a\n  robdd_\\<alpha> (robdd_var i1 l1 v1 r1) (a1 a) =\n  robdd_\\<alpha> (robdd_var i2 l2 v2 r2) (a1 a)\n  robdd_\\<alpha> (robdd_var i1 l1 v1 r1) (a2 a) =\n  robdd_\\<alpha> (robdd_var i2 l2 v2 r2) (a2 a)\n\ngoal (1 subgoal):\n 1. ((robdd_\\<alpha> l1 (a1 a) = robdd_\\<alpha> l1 a &&&\n      robdd_\\<alpha> l2 (a1 a) = robdd_\\<alpha> l2 a) &&&\n     robdd_\\<alpha> r1 (a2 a) = robdd_\\<alpha> r1 a &&&\n     robdd_\\<alpha> r2 (a2 a) = robdd_\\<alpha> r2 a &&&\n     robdd_\\<alpha> l1 (a2 a) = robdd_\\<alpha> l1 a) &&&\n    (robdd_\\<alpha> l2 (a2 a) = robdd_\\<alpha> l2 a &&&\n     robdd_\\<alpha> r1 (a1 a) = robdd_\\<alpha> r1 a) &&&\n    robdd_\\<alpha> r2 (a2 a) = robdd_\\<alpha> r2 a &&&\n    (v1 \\<noteq> v2 \\<Longrightarrow>\n     robdd_\\<alpha> r1 a = robdd_\\<alpha> (robdd_var i2 l2 v2 r2) a) &&&\n    (v1 \\<noteq> v2 \\<Longrightarrow>\n     robdd_\\<alpha> l1 a = robdd_\\<alpha> (robdd_var i2 l2 v2 r2) a)", "unfolding a1_def a2_def"], ["proof (prove)\nusing this:\n  (\\<And>v.\n      Suc v1 \\<le> v \\<Longrightarrow>\n      a v = (if v1 = v then True else a v)) \\<Longrightarrow>\n  robdd_\\<alpha> l1 (\\<lambda>v'. if v1 = v' then True else a v') =\n  robdd_\\<alpha> l1 a\n  (\\<And>v.\n      Suc v1 \\<le> v \\<Longrightarrow>\n      a v = (if v1 = v then False else a v)) \\<Longrightarrow>\n  robdd_\\<alpha> r1 (\\<lambda>v'. if v1 = v' then False else a v') =\n  robdd_\\<alpha> r1 a\n  (\\<And>v.\n      Suc v1 \\<le> v \\<Longrightarrow>\n      a v = (if v1 = v then True else a v)) \\<Longrightarrow>\n  robdd_\\<alpha> l2 (\\<lambda>v'. if v1 = v' then True else a v') =\n  robdd_\\<alpha> l2 a\n  (\\<And>v.\n      Suc v1 \\<le> v \\<Longrightarrow>\n      a v = (if v1 = v then False else a v)) \\<Longrightarrow>\n  robdd_\\<alpha> r2 (\\<lambda>v'. if v1 = v' then False else a v') =\n  robdd_\\<alpha> r2 a\n  (\\<And>v.\n      Suc v1 \\<le> v \\<Longrightarrow>\n      a v = (if v1 = v then False else a v)) \\<Longrightarrow>\n  robdd_\\<alpha> l1 (\\<lambda>v'. if v1 = v' then False else a v') =\n  robdd_\\<alpha> l1 a\n  (\\<And>v.\n      Suc v1 \\<le> v \\<Longrightarrow>\n      a v = (if v1 = v then True else a v)) \\<Longrightarrow>\n  robdd_\\<alpha> r1 (\\<lambda>v'. if v1 = v' then True else a v') =\n  robdd_\\<alpha> r1 a\n  (\\<And>v.\n      Suc v1 \\<le> v \\<Longrightarrow>\n      a v = (if v1 = v then False else a v)) \\<Longrightarrow>\n  robdd_\\<alpha> l2 (\\<lambda>v'. if v1 = v' then False else a v') =\n  robdd_\\<alpha> l2 a\n  (\\<And>v.\n      Suc v1 \\<le> v \\<Longrightarrow>\n      a v = (if v1 = v then True else a v)) \\<Longrightarrow>\n  robdd_\\<alpha> r2 (\\<lambda>v'. if v1 = v' then True else a v') =\n  robdd_\\<alpha> r2 a\n  robdd_\\<alpha> (robdd_var i1 l1 v1 r1)\n   (\\<lambda>v'. if v1 = v' then True else a v') =\n  robdd_\\<alpha> (robdd_var i2 l2 v2 r2)\n   (\\<lambda>v'. if v1 = v' then True else a v')\n  robdd_\\<alpha> (robdd_var i1 l1 v1 r1)\n   (\\<lambda>v'. if v1 = v' then False else a v') =\n  robdd_\\<alpha> (robdd_var i2 l2 v2 r2)\n   (\\<lambda>v'. if v1 = v' then False else a v')\n\ngoal (1 subgoal):\n 1. ((robdd_\\<alpha> l1 (\\<lambda>v'. if v1 = v' then True else a v') =\n      robdd_\\<alpha> l1 a &&&\n      robdd_\\<alpha> l2 (\\<lambda>v'. if v1 = v' then True else a v') =\n      robdd_\\<alpha> l2 a) &&&\n     robdd_\\<alpha> r1 (\\<lambda>v'. if v1 = v' then False else a v') =\n     robdd_\\<alpha> r1 a &&&\n     robdd_\\<alpha> r2 (\\<lambda>v'. if v1 = v' then False else a v') =\n     robdd_\\<alpha> r2 a &&&\n     robdd_\\<alpha> l1 (\\<lambda>v'. if v1 = v' then False else a v') =\n     robdd_\\<alpha> l1 a) &&&\n    (robdd_\\<alpha> l2 (\\<lambda>v'. if v1 = v' then False else a v') =\n     robdd_\\<alpha> l2 a &&&\n     robdd_\\<alpha> r1 (\\<lambda>v'. if v1 = v' then True else a v') =\n     robdd_\\<alpha> r1 a) &&&\n    robdd_\\<alpha> r2 (\\<lambda>v'. if v1 = v' then False else a v') =\n    robdd_\\<alpha> r2 a &&&\n    (v1 \\<noteq> v2 \\<Longrightarrow>\n     robdd_\\<alpha> r1 a = robdd_\\<alpha> (robdd_var i2 l2 v2 r2) a) &&&\n    (v1 \\<noteq> v2 \\<Longrightarrow>\n     robdd_\\<alpha> l1 a = robdd_\\<alpha> (robdd_var i2 l2 v2 r2) a)", "by simp_all"], ["proof (state)\nthis:\n  robdd_\\<alpha> l1 (a1 a) = robdd_\\<alpha> l1 a\n  robdd_\\<alpha> l2 (a1 a) = robdd_\\<alpha> l2 a\n  robdd_\\<alpha> r1 (a2 a) = robdd_\\<alpha> r1 a\n  robdd_\\<alpha> r2 (a2 a) = robdd_\\<alpha> r2 a\n  robdd_\\<alpha> l1 (a2 a) = robdd_\\<alpha> l1 a\n  robdd_\\<alpha> l2 (a2 a) = robdd_\\<alpha> l2 a\n  robdd_\\<alpha> r1 (a1 a) = robdd_\\<alpha> r1 a\n  robdd_\\<alpha> r2 (a2 a) = robdd_\\<alpha> r2 a\n  v1 \\<noteq> v2 \\<Longrightarrow>\n  robdd_\\<alpha> r1 a = robdd_\\<alpha> (robdd_var i2 l2 v2 r2) a\n  v1 \\<noteq> v2 \\<Longrightarrow>\n  robdd_\\<alpha> l1 a = robdd_\\<alpha> (robdd_var i2 l2 v2 r2) a\n\ngoal (1 subgoal):\n 1. v1 = v2 \\<and>\n    robdd_\\<alpha> l1 = robdd_\\<alpha> l2 \\<and>\n    robdd_\\<alpha> r1 = robdd_\\<alpha> r2", "}"], ["proof (state)\nthis:\n  robdd_\\<alpha> l1 (a1 ?a2) = robdd_\\<alpha> l1 ?a2\n  robdd_\\<alpha> l2 (a1 ?a2) = robdd_\\<alpha> l2 ?a2\n  robdd_\\<alpha> r1 (a2 ?a2) = robdd_\\<alpha> r1 ?a2\n  robdd_\\<alpha> r2 (a2 ?a2) = robdd_\\<alpha> r2 ?a2\n  robdd_\\<alpha> l1 (a2 ?a2) = robdd_\\<alpha> l1 ?a2\n  robdd_\\<alpha> l2 (a2 ?a2) = robdd_\\<alpha> l2 ?a2\n  robdd_\\<alpha> r1 (a1 ?a2) = robdd_\\<alpha> r1 ?a2\n  robdd_\\<alpha> r2 (a2 ?a2) = robdd_\\<alpha> r2 ?a2\n  v1 \\<noteq> v2 \\<Longrightarrow>\n  robdd_\\<alpha> r1 ?a2 = robdd_\\<alpha> (robdd_var i2 l2 v2 r2) ?a2\n  v1 \\<noteq> v2 \\<Longrightarrow>\n  robdd_\\<alpha> l1 ?a2 = robdd_\\<alpha> (robdd_var i2 l2 v2 r2) ?a2\n\ngoal (1 subgoal):\n 1. v1 = v2 \\<and>\n    robdd_\\<alpha> l1 = robdd_\\<alpha> l2 \\<and>\n    robdd_\\<alpha> r1 = robdd_\\<alpha> r2", "note a12_sem = this"], ["proof (state)\nthis:\n  robdd_\\<alpha> l1 (a1 ?a2) = robdd_\\<alpha> l1 ?a2\n  robdd_\\<alpha> l2 (a1 ?a2) = robdd_\\<alpha> l2 ?a2\n  robdd_\\<alpha> r1 (a2 ?a2) = robdd_\\<alpha> r1 ?a2\n  robdd_\\<alpha> r2 (a2 ?a2) = robdd_\\<alpha> r2 ?a2\n  robdd_\\<alpha> l1 (a2 ?a2) = robdd_\\<alpha> l1 ?a2\n  robdd_\\<alpha> l2 (a2 ?a2) = robdd_\\<alpha> l2 ?a2\n  robdd_\\<alpha> r1 (a1 ?a2) = robdd_\\<alpha> r1 ?a2\n  robdd_\\<alpha> r2 (a2 ?a2) = robdd_\\<alpha> r2 ?a2\n  v1 \\<noteq> v2 \\<Longrightarrow>\n  robdd_\\<alpha> r1 ?a2 = robdd_\\<alpha> (robdd_var i2 l2 v2 r2) ?a2\n  v1 \\<noteq> v2 \\<Longrightarrow>\n  robdd_\\<alpha> l1 ?a2 = robdd_\\<alpha> (robdd_var i2 l2 v2 r2) ?a2\n\ngoal (1 subgoal):\n 1. v1 = v2 \\<and>\n    robdd_\\<alpha> l1 = robdd_\\<alpha> l2 \\<and>\n    robdd_\\<alpha> r1 = robdd_\\<alpha> r2", "from a12_sem(9,10)"], ["proof (chain)\npicking this:\n  v1 \\<noteq> v2 \\<Longrightarrow>\n  robdd_\\<alpha> r1 ?a2 = robdd_\\<alpha> (robdd_var i2 l2 v2 r2) ?a2\n  v1 \\<noteq> v2 \\<Longrightarrow>\n  robdd_\\<alpha> l1 ?a2 = robdd_\\<alpha> (robdd_var i2 l2 v2 r2) ?a2", "have \"v1 \\<noteq> v2 \\<Longrightarrow> robdd_\\<alpha> l1 = robdd_\\<alpha> r1\""], ["proof (prove)\nusing this:\n  v1 \\<noteq> v2 \\<Longrightarrow>\n  robdd_\\<alpha> r1 ?a2 = robdd_\\<alpha> (robdd_var i2 l2 v2 r2) ?a2\n  v1 \\<noteq> v2 \\<Longrightarrow>\n  robdd_\\<alpha> l1 ?a2 = robdd_\\<alpha> (robdd_var i2 l2 v2 r2) ?a2\n\ngoal (1 subgoal):\n 1. v1 \\<noteq> v2 \\<Longrightarrow> robdd_\\<alpha> l1 = robdd_\\<alpha> r1", "by (simp add: fun_eq_iff)"], ["proof (state)\nthis:\n  v1 \\<noteq> v2 \\<Longrightarrow> robdd_\\<alpha> l1 = robdd_\\<alpha> r1\n\ngoal (1 subgoal):\n 1. v1 = v2 \\<and>\n    robdd_\\<alpha> l1 = robdd_\\<alpha> l2 \\<and>\n    robdd_\\<alpha> r1 = robdd_\\<alpha> r2", "with sem_neq"], ["proof (chain)\npicking this:\n  robdd_\\<alpha> l1 \\<noteq> robdd_\\<alpha> r1\n  v1 \\<noteq> v2 \\<Longrightarrow> robdd_\\<alpha> l1 = robdd_\\<alpha> r1", "have v2_eq: \"v2 = v1\""], ["proof (prove)\nusing this:\n  robdd_\\<alpha> l1 \\<noteq> robdd_\\<alpha> r1\n  v1 \\<noteq> v2 \\<Longrightarrow> robdd_\\<alpha> l1 = robdd_\\<alpha> r1\n\ngoal (1 subgoal):\n 1. v2 = v1", "by metis"], ["proof (state)\nthis:\n  v2 = v1\n\ngoal (1 subgoal):\n 1. v1 = v2 \\<and>\n    robdd_\\<alpha> l1 = robdd_\\<alpha> l2 \\<and>\n    robdd_\\<alpha> r1 = robdd_\\<alpha> r2", "{"], ["proof (state)\nthis:\n  v2 = v1\n\ngoal (1 subgoal):\n 1. v1 = v2 \\<and>\n    robdd_\\<alpha> l1 = robdd_\\<alpha> l2 \\<and>\n    robdd_\\<alpha> r1 = robdd_\\<alpha> r2", "fix a"], ["proof (state)\ngoal (1 subgoal):\n 1. v1 = v2 \\<and>\n    robdd_\\<alpha> l1 = robdd_\\<alpha> l2 \\<and>\n    robdd_\\<alpha> r1 = robdd_\\<alpha> r2", "from sem_eq_a[of \"a1 a\"] sem_eq_a[of \"a2 a\"] a12_sem[of a]"], ["proof (chain)\npicking this:\n  robdd_\\<alpha> (robdd_var i1 l1 v1 r1) (a1 a) =\n  robdd_\\<alpha> (robdd_var i2 l2 v2 r2) (a1 a)\n  robdd_\\<alpha> (robdd_var i1 l1 v1 r1) (a2 a) =\n  robdd_\\<alpha> (robdd_var i2 l2 v2 r2) (a2 a)\n  robdd_\\<alpha> l1 (a1 a) = robdd_\\<alpha> l1 a\n  robdd_\\<alpha> l2 (a1 a) = robdd_\\<alpha> l2 a\n  robdd_\\<alpha> r1 (a2 a) = robdd_\\<alpha> r1 a\n  robdd_\\<alpha> r2 (a2 a) = robdd_\\<alpha> r2 a\n  robdd_\\<alpha> l1 (a2 a) = robdd_\\<alpha> l1 a\n  robdd_\\<alpha> l2 (a2 a) = robdd_\\<alpha> l2 a\n  robdd_\\<alpha> r1 (a1 a) = robdd_\\<alpha> r1 a\n  robdd_\\<alpha> r2 (a2 a) = robdd_\\<alpha> r2 a\n  v1 \\<noteq> v2 \\<Longrightarrow>\n  robdd_\\<alpha> r1 a = robdd_\\<alpha> (robdd_var i2 l2 v2 r2) a\n  v1 \\<noteq> v2 \\<Longrightarrow>\n  robdd_\\<alpha> l1 a = robdd_\\<alpha> (robdd_var i2 l2 v2 r2) a", "have \"robdd_\\<alpha> l1 a = robdd_\\<alpha> l2 a \\<and> robdd_\\<alpha> r1 a = robdd_\\<alpha> r2 a\""], ["proof (prove)\nusing this:\n  robdd_\\<alpha> (robdd_var i1 l1 v1 r1) (a1 a) =\n  robdd_\\<alpha> (robdd_var i2 l2 v2 r2) (a1 a)\n  robdd_\\<alpha> (robdd_var i1 l1 v1 r1) (a2 a) =\n  robdd_\\<alpha> (robdd_var i2 l2 v2 r2) (a2 a)\n  robdd_\\<alpha> l1 (a1 a) = robdd_\\<alpha> l1 a\n  robdd_\\<alpha> l2 (a1 a) = robdd_\\<alpha> l2 a\n  robdd_\\<alpha> r1 (a2 a) = robdd_\\<alpha> r1 a\n  robdd_\\<alpha> r2 (a2 a) = robdd_\\<alpha> r2 a\n  robdd_\\<alpha> l1 (a2 a) = robdd_\\<alpha> l1 a\n  robdd_\\<alpha> l2 (a2 a) = robdd_\\<alpha> l2 a\n  robdd_\\<alpha> r1 (a1 a) = robdd_\\<alpha> r1 a\n  robdd_\\<alpha> r2 (a2 a) = robdd_\\<alpha> r2 a\n  v1 \\<noteq> v2 \\<Longrightarrow>\n  robdd_\\<alpha> r1 a = robdd_\\<alpha> (robdd_var i2 l2 v2 r2) a\n  v1 \\<noteq> v2 \\<Longrightarrow>\n  robdd_\\<alpha> l1 a = robdd_\\<alpha> (robdd_var i2 l2 v2 r2) a\n\ngoal (1 subgoal):\n 1. robdd_\\<alpha> l1 a = robdd_\\<alpha> l2 a \\<and>\n    robdd_\\<alpha> r1 a = robdd_\\<alpha> r2 a", "by (simp add: v2_eq a12_eval)"], ["proof (state)\nthis:\n  robdd_\\<alpha> l1 a = robdd_\\<alpha> l2 a \\<and>\n  robdd_\\<alpha> r1 a = robdd_\\<alpha> r2 a\n\ngoal (1 subgoal):\n 1. v1 = v2 \\<and>\n    robdd_\\<alpha> l1 = robdd_\\<alpha> l2 \\<and>\n    robdd_\\<alpha> r1 = robdd_\\<alpha> r2", "}"], ["proof (state)\nthis:\n  robdd_\\<alpha> l1 ?a2 = robdd_\\<alpha> l2 ?a2 \\<and>\n  robdd_\\<alpha> r1 ?a2 = robdd_\\<alpha> r2 ?a2\n\ngoal (1 subgoal):\n 1. v1 = v2 \\<and>\n    robdd_\\<alpha> l1 = robdd_\\<alpha> l2 \\<and>\n    robdd_\\<alpha> r1 = robdd_\\<alpha> r2", "hence \"v1 = v2 \\<and> robdd_\\<alpha> l1 = robdd_\\<alpha> l2 \\<and> robdd_\\<alpha> r1 = robdd_\\<alpha> r2\""], ["proof (prove)\nusing this:\n  robdd_\\<alpha> l1 ?a2 = robdd_\\<alpha> l2 ?a2 \\<and>\n  robdd_\\<alpha> r1 ?a2 = robdd_\\<alpha> r2 ?a2\n\ngoal (1 subgoal):\n 1. v1 = v2 \\<and>\n    robdd_\\<alpha> l1 = robdd_\\<alpha> l2 \\<and>\n    robdd_\\<alpha> r1 = robdd_\\<alpha> r2", "by (simp add: fun_eq_iff v2_eq)"], ["proof (state)\nthis:\n  v1 = v2 \\<and>\n  robdd_\\<alpha> l1 = robdd_\\<alpha> l2 \\<and>\n  robdd_\\<alpha> r1 = robdd_\\<alpha> r2\n\ngoal (1 subgoal):\n 1. v1 = v2 \\<and>\n    robdd_\\<alpha> l1 = robdd_\\<alpha> l2 \\<and>\n    robdd_\\<alpha> r1 = robdd_\\<alpha> r2", "}"], ["proof (state)\nthis:\n  \\<lbrakk>robdd_invar_vars_greater ?n1.2\n            (robdd_var ?i1a2 ?l1a2 ?v1a2 ?r1a2);\n   robdd_invar_reduced (robdd_var ?i1a2 ?l1a2 ?v1a2 ?r1a2);\n   robdd_invar_vars_greater ?n2.2 (robdd_var ?i2a2 ?l2a2 ?v2a2 ?r2a2);\n   robdd_invar_reduced (robdd_var ?i2a2 ?l2a2 ?v2a2 ?r2a2);\n   robdd_\\<alpha> ?l1a2 \\<noteq> robdd_\\<alpha> ?r1a2;\n   robdd_\\<alpha> (robdd_var ?i1a2 ?l1a2 ?v1a2 ?r1a2) =\n   robdd_\\<alpha> (robdd_var ?i2a2 ?l2a2 ?v2a2 ?r2a2);\n   ?v1a2 \\<le> ?v2a2\\<rbrakk>\n  \\<Longrightarrow> ?v1a2 = ?v2a2 \\<and>\n                    robdd_\\<alpha> ?l1a2 = robdd_\\<alpha> ?l2a2 \\<and>\n                    robdd_\\<alpha> ?r1a2 = robdd_\\<alpha> ?r2a2\n\ngoal (1 subgoal):\n 1. v1 = v2 \\<and>\n    robdd_\\<alpha> l1 = robdd_\\<alpha> l2 \\<and>\n    robdd_\\<alpha> r1 = robdd_\\<alpha> r2", "note aux = this"], ["proof (state)\nthis:\n  \\<lbrakk>robdd_invar_vars_greater ?n1.2\n            (robdd_var ?i1a2 ?l1a2 ?v1a2 ?r1a2);\n   robdd_invar_reduced (robdd_var ?i1a2 ?l1a2 ?v1a2 ?r1a2);\n   robdd_invar_vars_greater ?n2.2 (robdd_var ?i2a2 ?l2a2 ?v2a2 ?r2a2);\n   robdd_invar_reduced (robdd_var ?i2a2 ?l2a2 ?v2a2 ?r2a2);\n   robdd_\\<alpha> ?l1a2 \\<noteq> robdd_\\<alpha> ?r1a2;\n   robdd_\\<alpha> (robdd_var ?i1a2 ?l1a2 ?v1a2 ?r1a2) =\n   robdd_\\<alpha> (robdd_var ?i2a2 ?l2a2 ?v2a2 ?r2a2);\n   ?v1a2 \\<le> ?v2a2\\<rbrakk>\n  \\<Longrightarrow> ?v1a2 = ?v2a2 \\<and>\n                    robdd_\\<alpha> ?l1a2 = robdd_\\<alpha> ?l2a2 \\<and>\n                    robdd_\\<alpha> ?r1a2 = robdd_\\<alpha> ?r2a2\n\ngoal (1 subgoal):\n 1. v1 = v2 \\<and>\n    robdd_\\<alpha> l1 = robdd_\\<alpha> l2 \\<and>\n    robdd_\\<alpha> r1 = robdd_\\<alpha> r2", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. v1 = v2 \\<and>\n    robdd_\\<alpha> l1 = robdd_\\<alpha> l2 \\<and>\n    robdd_\\<alpha> r1 = robdd_\\<alpha> r2", "proof (cases \"v1 \\<le> v2\")"], ["proof (state)\ngoal (2 subgoals):\n 1. v1 \\<le> v2 \\<Longrightarrow>\n    v1 = v2 \\<and>\n    robdd_\\<alpha> l1 = robdd_\\<alpha> l2 \\<and>\n    robdd_\\<alpha> r1 = robdd_\\<alpha> r2\n 2. \\<not> v1 \\<le> v2 \\<Longrightarrow>\n    v1 = v2 \\<and>\n    robdd_\\<alpha> l1 = robdd_\\<alpha> l2 \\<and>\n    robdd_\\<alpha> r1 = robdd_\\<alpha> r2", "case True"], ["proof (state)\nthis:\n  v1 \\<le> v2\n\ngoal (2 subgoals):\n 1. v1 \\<le> v2 \\<Longrightarrow>\n    v1 = v2 \\<and>\n    robdd_\\<alpha> l1 = robdd_\\<alpha> l2 \\<and>\n    robdd_\\<alpha> r1 = robdd_\\<alpha> r2\n 2. \\<not> v1 \\<le> v2 \\<Longrightarrow>\n    v1 = v2 \\<and>\n    robdd_\\<alpha> l1 = robdd_\\<alpha> l2 \\<and>\n    robdd_\\<alpha> r1 = robdd_\\<alpha> r2", "note v1_le = this"], ["proof (state)\nthis:\n  v1 \\<le> v2\n\ngoal (2 subgoals):\n 1. v1 \\<le> v2 \\<Longrightarrow>\n    v1 = v2 \\<and>\n    robdd_\\<alpha> l1 = robdd_\\<alpha> l2 \\<and>\n    robdd_\\<alpha> r1 = robdd_\\<alpha> r2\n 2. \\<not> v1 \\<le> v2 \\<Longrightarrow>\n    v1 = v2 \\<and>\n    robdd_\\<alpha> l1 = robdd_\\<alpha> l2 \\<and>\n    robdd_\\<alpha> r1 = robdd_\\<alpha> r2", "from aux[OF invars_b1[unfolded robdd_invar_vars_def] invars_b2[unfolded robdd_invar_vars_def] sem_neq_b1 sem_eq v1_le]"], ["proof (chain)\npicking this:\n  v1 = v2 \\<and>\n  robdd_\\<alpha> l1 = robdd_\\<alpha> l2 \\<and>\n  robdd_\\<alpha> r1 = robdd_\\<alpha> r2", "show ?thesis"], ["proof (prove)\nusing this:\n  v1 = v2 \\<and>\n  robdd_\\<alpha> l1 = robdd_\\<alpha> l2 \\<and>\n  robdd_\\<alpha> r1 = robdd_\\<alpha> r2\n\ngoal (1 subgoal):\n 1. v1 = v2 \\<and>\n    robdd_\\<alpha> l1 = robdd_\\<alpha> l2 \\<and>\n    robdd_\\<alpha> r1 = robdd_\\<alpha> r2", "by simp"], ["proof (state)\nthis:\n  v1 = v2 \\<and>\n  robdd_\\<alpha> l1 = robdd_\\<alpha> l2 \\<and>\n  robdd_\\<alpha> r1 = robdd_\\<alpha> r2\n\ngoal (1 subgoal):\n 1. \\<not> v1 \\<le> v2 \\<Longrightarrow>\n    v1 = v2 \\<and>\n    robdd_\\<alpha> l1 = robdd_\\<alpha> l2 \\<and>\n    robdd_\\<alpha> r1 = robdd_\\<alpha> r2", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> v1 \\<le> v2 \\<Longrightarrow>\n    v1 = v2 \\<and>\n    robdd_\\<alpha> l1 = robdd_\\<alpha> l2 \\<and>\n    robdd_\\<alpha> r1 = robdd_\\<alpha> r2", "case False"], ["proof (state)\nthis:\n  \\<not> v1 \\<le> v2\n\ngoal (1 subgoal):\n 1. \\<not> v1 \\<le> v2 \\<Longrightarrow>\n    v1 = v2 \\<and>\n    robdd_\\<alpha> l1 = robdd_\\<alpha> l2 \\<and>\n    robdd_\\<alpha> r1 = robdd_\\<alpha> r2", "hence v2_le: \"v2 \\<le> v1\""], ["proof (prove)\nusing this:\n  \\<not> v1 \\<le> v2\n\ngoal (1 subgoal):\n 1. v2 \\<le> v1", "by simp"], ["proof (state)\nthis:\n  v2 \\<le> v1\n\ngoal (1 subgoal):\n 1. \\<not> v1 \\<le> v2 \\<Longrightarrow>\n    v1 = v2 \\<and>\n    robdd_\\<alpha> l1 = robdd_\\<alpha> l2 \\<and>\n    robdd_\\<alpha> r1 = robdd_\\<alpha> r2", "from aux[OF invars_b2[unfolded robdd_invar_vars_def] invars_b1[unfolded robdd_invar_vars_def] sem_neq_b2 sem_eq[symmetric] v2_le]"], ["proof (chain)\npicking this:\n  v2 = v1 \\<and>\n  robdd_\\<alpha> l2 = robdd_\\<alpha> l1 \\<and>\n  robdd_\\<alpha> r2 = robdd_\\<alpha> r1", "show ?thesis"], ["proof (prove)\nusing this:\n  v2 = v1 \\<and>\n  robdd_\\<alpha> l2 = robdd_\\<alpha> l1 \\<and>\n  robdd_\\<alpha> r2 = robdd_\\<alpha> r1\n\ngoal (1 subgoal):\n 1. v1 = v2 \\<and>\n    robdd_\\<alpha> l1 = robdd_\\<alpha> l2 \\<and>\n    robdd_\\<alpha> r1 = robdd_\\<alpha> r2", "by simp"], ["proof (state)\nthis:\n  v1 = v2 \\<and>\n  robdd_\\<alpha> l1 = robdd_\\<alpha> l2 \\<and>\n  robdd_\\<alpha> r1 = robdd_\\<alpha> r2\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  v1 = v2 \\<and>\n  robdd_\\<alpha> l1 = robdd_\\<alpha> l2 \\<and>\n  robdd_\\<alpha> r1 = robdd_\\<alpha> r2\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma robdd_equiv_implies_sem_equiv :\n  \"robdd_equiv b1 b2 \\<Longrightarrow> robdd_\\<alpha> b1 = robdd_\\<alpha> b2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. robdd_equiv b1 b2 \\<Longrightarrow>\n    robdd_\\<alpha> b1 = robdd_\\<alpha> b2", "proof (induct b1 arbitrary: b2)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x b2.\n       robdd_equiv (robdd_leaf x) b2 \\<Longrightarrow>\n       robdd_\\<alpha> (robdd_leaf x) = robdd_\\<alpha> b2\n 2. \\<And>x1a b11 x3 b12 b2.\n       \\<lbrakk>\\<And>b2.\n                   robdd_equiv b11 b2 \\<Longrightarrow>\n                   robdd_\\<alpha> b11 = robdd_\\<alpha> b2;\n        \\<And>b2.\n           robdd_equiv b12 b2 \\<Longrightarrow>\n           robdd_\\<alpha> b12 = robdd_\\<alpha> b2;\n        robdd_equiv (robdd_var x1a b11 x3 b12) b2\\<rbrakk>\n       \\<Longrightarrow> robdd_\\<alpha> (robdd_var x1a b11 x3 b12) =\n                         robdd_\\<alpha> b2", "case (robdd_var i l v r)"], ["proof (state)\nthis:\n  robdd_equiv l ?b2.0 \\<Longrightarrow>\n  robdd_\\<alpha> l = robdd_\\<alpha> ?b2.0\n  robdd_equiv r ?b2.0 \\<Longrightarrow>\n  robdd_\\<alpha> r = robdd_\\<alpha> ?b2.0\n  robdd_equiv (robdd_var i l v r) b2\n\ngoal (2 subgoals):\n 1. \\<And>x b2.\n       robdd_equiv (robdd_leaf x) b2 \\<Longrightarrow>\n       robdd_\\<alpha> (robdd_leaf x) = robdd_\\<alpha> b2\n 2. \\<And>x1a b11 x3 b12 b2.\n       \\<lbrakk>\\<And>b2.\n                   robdd_equiv b11 b2 \\<Longrightarrow>\n                   robdd_\\<alpha> b11 = robdd_\\<alpha> b2;\n        \\<And>b2.\n           robdd_equiv b12 b2 \\<Longrightarrow>\n           robdd_\\<alpha> b12 = robdd_\\<alpha> b2;\n        robdd_equiv (robdd_var x1a b11 x3 b12) b2\\<rbrakk>\n       \\<Longrightarrow> robdd_\\<alpha> (robdd_var x1a b11 x3 b12) =\n                         robdd_\\<alpha> b2", "note ind_hyp_l = robdd_var(1)"], ["proof (state)\nthis:\n  robdd_equiv l ?b2.0 \\<Longrightarrow>\n  robdd_\\<alpha> l = robdd_\\<alpha> ?b2.0\n\ngoal (2 subgoals):\n 1. \\<And>x b2.\n       robdd_equiv (robdd_leaf x) b2 \\<Longrightarrow>\n       robdd_\\<alpha> (robdd_leaf x) = robdd_\\<alpha> b2\n 2. \\<And>x1a b11 x3 b12 b2.\n       \\<lbrakk>\\<And>b2.\n                   robdd_equiv b11 b2 \\<Longrightarrow>\n                   robdd_\\<alpha> b11 = robdd_\\<alpha> b2;\n        \\<And>b2.\n           robdd_equiv b12 b2 \\<Longrightarrow>\n           robdd_\\<alpha> b12 = robdd_\\<alpha> b2;\n        robdd_equiv (robdd_var x1a b11 x3 b12) b2\\<rbrakk>\n       \\<Longrightarrow> robdd_\\<alpha> (robdd_var x1a b11 x3 b12) =\n                         robdd_\\<alpha> b2", "note ind_hyp_r = robdd_var(2)"], ["proof (state)\nthis:\n  robdd_equiv r ?b2.0 \\<Longrightarrow>\n  robdd_\\<alpha> r = robdd_\\<alpha> ?b2.0\n\ngoal (2 subgoals):\n 1. \\<And>x b2.\n       robdd_equiv (robdd_leaf x) b2 \\<Longrightarrow>\n       robdd_\\<alpha> (robdd_leaf x) = robdd_\\<alpha> b2\n 2. \\<And>x1a b11 x3 b12 b2.\n       \\<lbrakk>\\<And>b2.\n                   robdd_equiv b11 b2 \\<Longrightarrow>\n                   robdd_\\<alpha> b11 = robdd_\\<alpha> b2;\n        \\<And>b2.\n           robdd_equiv b12 b2 \\<Longrightarrow>\n           robdd_\\<alpha> b12 = robdd_\\<alpha> b2;\n        robdd_equiv (robdd_var x1a b11 x3 b12) b2\\<rbrakk>\n       \\<Longrightarrow> robdd_\\<alpha> (robdd_var x1a b11 x3 b12) =\n                         robdd_\\<alpha> b2", "note equiv_b2 = robdd_var(3)"], ["proof (state)\nthis:\n  robdd_equiv (robdd_var i l v r) b2\n\ngoal (2 subgoals):\n 1. \\<And>x b2.\n       robdd_equiv (robdd_leaf x) b2 \\<Longrightarrow>\n       robdd_\\<alpha> (robdd_leaf x) = robdd_\\<alpha> b2\n 2. \\<And>x1a b11 x3 b12 b2.\n       \\<lbrakk>\\<And>b2.\n                   robdd_equiv b11 b2 \\<Longrightarrow>\n                   robdd_\\<alpha> b11 = robdd_\\<alpha> b2;\n        \\<And>b2.\n           robdd_equiv b12 b2 \\<Longrightarrow>\n           robdd_\\<alpha> b12 = robdd_\\<alpha> b2;\n        robdd_equiv (robdd_var x1a b11 x3 b12) b2\\<rbrakk>\n       \\<Longrightarrow> robdd_\\<alpha> (robdd_var x1a b11 x3 b12) =\n                         robdd_\\<alpha> b2", "from equiv_b2"], ["proof (chain)\npicking this:\n  robdd_equiv (robdd_var i l v r) b2", "obtain i' l' r' where\n    b2_eq: \"b2 = robdd_var i' l' v r'\" and\n    equiv_l: \"robdd_equiv l l'\" and\n    equiv_r: \"robdd_equiv r r'\""], ["proof (prove)\nusing this:\n  robdd_equiv (robdd_var i l v r) b2\n\ngoal (1 subgoal):\n 1. (\\<And>i' l' r'.\n        \\<lbrakk>b2 = robdd_var i' l' v r'; robdd_equiv l l';\n         robdd_equiv r r'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding robdd_equiv.simps"], ["proof (prove)\nusing this:\n  \\<exists>i' l' r'.\n     b2 = robdd_var i' l' v r' \\<and>\n     robdd_equiv l l' \\<and> robdd_equiv r r'\n\ngoal (1 subgoal):\n 1. (\\<And>i' l' r'.\n        \\<lbrakk>b2 = robdd_var i' l' v r'; robdd_equiv l l';\n         robdd_equiv r r'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  b2 = robdd_var i' l' v r'\n  robdd_equiv l l'\n  robdd_equiv r r'\n\ngoal (2 subgoals):\n 1. \\<And>x b2.\n       robdd_equiv (robdd_leaf x) b2 \\<Longrightarrow>\n       robdd_\\<alpha> (robdd_leaf x) = robdd_\\<alpha> b2\n 2. \\<And>x1a b11 x3 b12 b2.\n       \\<lbrakk>\\<And>b2.\n                   robdd_equiv b11 b2 \\<Longrightarrow>\n                   robdd_\\<alpha> b11 = robdd_\\<alpha> b2;\n        \\<And>b2.\n           robdd_equiv b12 b2 \\<Longrightarrow>\n           robdd_\\<alpha> b12 = robdd_\\<alpha> b2;\n        robdd_equiv (robdd_var x1a b11 x3 b12) b2\\<rbrakk>\n       \\<Longrightarrow> robdd_\\<alpha> (robdd_var x1a b11 x3 b12) =\n                         robdd_\\<alpha> b2", "from ind_hyp_l[OF equiv_l] ind_hyp_r[OF equiv_r] b2_eq"], ["proof (chain)\npicking this:\n  robdd_\\<alpha> l = robdd_\\<alpha> l'\n  robdd_\\<alpha> r = robdd_\\<alpha> r'\n  b2 = robdd_var i' l' v r'", "show ?case"], ["proof (prove)\nusing this:\n  robdd_\\<alpha> l = robdd_\\<alpha> l'\n  robdd_\\<alpha> r = robdd_\\<alpha> r'\n  b2 = robdd_var i' l' v r'\n\ngoal (1 subgoal):\n 1. robdd_\\<alpha> (robdd_var i l v r) = robdd_\\<alpha> b2", "by simp"], ["proof (state)\nthis:\n  robdd_\\<alpha> (robdd_var i l v r) = robdd_\\<alpha> b2\n\ngoal (1 subgoal):\n 1. \\<And>x b2.\n       robdd_equiv (robdd_leaf x) b2 \\<Longrightarrow>\n       robdd_\\<alpha> (robdd_leaf x) = robdd_\\<alpha> b2", "qed simp_all"], ["", "lemma sem_equiv_implies_robdd_equiv :\nassumes \"robdd_invar_vars b1\" \"robdd_invar_reduced b1\"\n    and \"robdd_invar_vars b2\" \"robdd_invar_reduced b2\"\n    and \"robdd_\\<alpha> b1 = robdd_\\<alpha> b2\"\nshows \"robdd_equiv b1 b2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. robdd_equiv b1 b2", "using assms"], ["proof (prove)\nusing this:\n  robdd_invar_vars b1\n  robdd_invar_reduced b1\n  robdd_invar_vars b2\n  robdd_invar_reduced b2\n  robdd_\\<alpha> b1 = robdd_\\<alpha> b2\n\ngoal (1 subgoal):\n 1. robdd_equiv b1 b2", "proof (induct \"(b1, b2)\" arbitrary: b1 b2 rule: measure_induct_rule [of \"\\<lambda>(b1,b2). size_robdd b1 + size_robdd b2\"])"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>b1 b2.\n       \\<lbrakk>\\<And>b1a b2a.\n                   \\<lbrakk>(case (b1a, b2a) of\n                             (b1, b2) \\<Rightarrow>\n                               size_robdd b1 + size_robdd b2)\n                            < (case (b1, b2) of\n                               (b1, b2) \\<Rightarrow>\n                                 size_robdd b1 + size_robdd b2);\n                    robdd_invar_vars b1a; robdd_invar_reduced b1a;\n                    robdd_invar_vars b2a; robdd_invar_reduced b2a;\n                    robdd_\\<alpha> b1a = robdd_\\<alpha> b2a\\<rbrakk>\n                   \\<Longrightarrow> robdd_equiv b1a b2a;\n        robdd_invar_vars b1; robdd_invar_reduced b1; robdd_invar_vars b2;\n        robdd_invar_reduced b2;\n        robdd_\\<alpha> b1 = robdd_\\<alpha> b2\\<rbrakk>\n       \\<Longrightarrow> robdd_equiv b1 b2", "case less"], ["proof (state)\nthis:\n  \\<lbrakk>(case (?b1.0, ?b2.0) of\n            (b1, b2) \\<Rightarrow> size_robdd b1 + size_robdd b2)\n           < (case (b1, b2) of\n              (b1, b2) \\<Rightarrow> size_robdd b1 + size_robdd b2);\n   robdd_invar_vars ?b1.0; robdd_invar_reduced ?b1.0;\n   robdd_invar_vars ?b2.0; robdd_invar_reduced ?b2.0;\n   robdd_\\<alpha> ?b1.0 = robdd_\\<alpha> ?b2.0\\<rbrakk>\n  \\<Longrightarrow> robdd_equiv ?b1.0 ?b2.0\n  robdd_invar_vars b1\n  robdd_invar_reduced b1\n  robdd_invar_vars b2\n  robdd_invar_reduced b2\n  robdd_\\<alpha> b1 = robdd_\\<alpha> b2\n\ngoal (1 subgoal):\n 1. \\<And>b1 b2.\n       \\<lbrakk>\\<And>b1a b2a.\n                   \\<lbrakk>(case (b1a, b2a) of\n                             (b1, b2) \\<Rightarrow>\n                               size_robdd b1 + size_robdd b2)\n                            < (case (b1, b2) of\n                               (b1, b2) \\<Rightarrow>\n                                 size_robdd b1 + size_robdd b2);\n                    robdd_invar_vars b1a; robdd_invar_reduced b1a;\n                    robdd_invar_vars b2a; robdd_invar_reduced b2a;\n                    robdd_\\<alpha> b1a = robdd_\\<alpha> b2a\\<rbrakk>\n                   \\<Longrightarrow> robdd_equiv b1a b2a;\n        robdd_invar_vars b1; robdd_invar_reduced b1; robdd_invar_vars b2;\n        robdd_invar_reduced b2;\n        robdd_\\<alpha> b1 = robdd_\\<alpha> b2\\<rbrakk>\n       \\<Longrightarrow> robdd_equiv b1 b2", "note ind_hyp = less(1)"], ["proof (state)\nthis:\n  \\<lbrakk>(case (?b1.0, ?b2.0) of\n            (b1, b2) \\<Rightarrow> size_robdd b1 + size_robdd b2)\n           < (case (b1, b2) of\n              (b1, b2) \\<Rightarrow> size_robdd b1 + size_robdd b2);\n   robdd_invar_vars ?b1.0; robdd_invar_reduced ?b1.0;\n   robdd_invar_vars ?b2.0; robdd_invar_reduced ?b2.0;\n   robdd_\\<alpha> ?b1.0 = robdd_\\<alpha> ?b2.0\\<rbrakk>\n  \\<Longrightarrow> robdd_equiv ?b1.0 ?b2.0\n\ngoal (1 subgoal):\n 1. \\<And>b1 b2.\n       \\<lbrakk>\\<And>b1a b2a.\n                   \\<lbrakk>(case (b1a, b2a) of\n                             (b1, b2) \\<Rightarrow>\n                               size_robdd b1 + size_robdd b2)\n                            < (case (b1, b2) of\n                               (b1, b2) \\<Rightarrow>\n                                 size_robdd b1 + size_robdd b2);\n                    robdd_invar_vars b1a; robdd_invar_reduced b1a;\n                    robdd_invar_vars b2a; robdd_invar_reduced b2a;\n                    robdd_\\<alpha> b1a = robdd_\\<alpha> b2a\\<rbrakk>\n                   \\<Longrightarrow> robdd_equiv b1a b2a;\n        robdd_invar_vars b1; robdd_invar_reduced b1; robdd_invar_vars b2;\n        robdd_invar_reduced b2;\n        robdd_\\<alpha> b1 = robdd_\\<alpha> b2\\<rbrakk>\n       \\<Longrightarrow> robdd_equiv b1 b2", "note invars_b1 = less(2,3)"], ["proof (state)\nthis:\n  robdd_invar_vars b1\n  robdd_invar_reduced b1\n\ngoal (1 subgoal):\n 1. \\<And>b1 b2.\n       \\<lbrakk>\\<And>b1a b2a.\n                   \\<lbrakk>(case (b1a, b2a) of\n                             (b1, b2) \\<Rightarrow>\n                               size_robdd b1 + size_robdd b2)\n                            < (case (b1, b2) of\n                               (b1, b2) \\<Rightarrow>\n                                 size_robdd b1 + size_robdd b2);\n                    robdd_invar_vars b1a; robdd_invar_reduced b1a;\n                    robdd_invar_vars b2a; robdd_invar_reduced b2a;\n                    robdd_\\<alpha> b1a = robdd_\\<alpha> b2a\\<rbrakk>\n                   \\<Longrightarrow> robdd_equiv b1a b2a;\n        robdd_invar_vars b1; robdd_invar_reduced b1; robdd_invar_vars b2;\n        robdd_invar_reduced b2;\n        robdd_\\<alpha> b1 = robdd_\\<alpha> b2\\<rbrakk>\n       \\<Longrightarrow> robdd_equiv b1 b2", "note invars_b2 = less(4,5)"], ["proof (state)\nthis:\n  robdd_invar_vars b2\n  robdd_invar_reduced b2\n\ngoal (1 subgoal):\n 1. \\<And>b1 b2.\n       \\<lbrakk>\\<And>b1a b2a.\n                   \\<lbrakk>(case (b1a, b2a) of\n                             (b1, b2) \\<Rightarrow>\n                               size_robdd b1 + size_robdd b2)\n                            < (case (b1, b2) of\n                               (b1, b2) \\<Rightarrow>\n                                 size_robdd b1 + size_robdd b2);\n                    robdd_invar_vars b1a; robdd_invar_reduced b1a;\n                    robdd_invar_vars b2a; robdd_invar_reduced b2a;\n                    robdd_\\<alpha> b1a = robdd_\\<alpha> b2a\\<rbrakk>\n                   \\<Longrightarrow> robdd_equiv b1a b2a;\n        robdd_invar_vars b1; robdd_invar_reduced b1; robdd_invar_vars b2;\n        robdd_invar_reduced b2;\n        robdd_\\<alpha> b1 = robdd_\\<alpha> b2\\<rbrakk>\n       \\<Longrightarrow> robdd_equiv b1 b2", "note sem_eq = less(6)"], ["proof (state)\nthis:\n  robdd_\\<alpha> b1 = robdd_\\<alpha> b2\n\ngoal (1 subgoal):\n 1. \\<And>b1 b2.\n       \\<lbrakk>\\<And>b1a b2a.\n                   \\<lbrakk>(case (b1a, b2a) of\n                             (b1, b2) \\<Rightarrow>\n                               size_robdd b1 + size_robdd b2)\n                            < (case (b1, b2) of\n                               (b1, b2) \\<Rightarrow>\n                                 size_robdd b1 + size_robdd b2);\n                    robdd_invar_vars b1a; robdd_invar_reduced b1a;\n                    robdd_invar_vars b2a; robdd_invar_reduced b2a;\n                    robdd_\\<alpha> b1a = robdd_\\<alpha> b2a\\<rbrakk>\n                   \\<Longrightarrow> robdd_equiv b1a b2a;\n        robdd_invar_vars b1; robdd_invar_reduced b1; robdd_invar_vars b2;\n        robdd_invar_reduced b2;\n        robdd_\\<alpha> b1 = robdd_\\<alpha> b2\\<rbrakk>\n       \\<Longrightarrow> robdd_equiv b1 b2", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. robdd_equiv b1 b2", "proof (cases b1)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x1. b1 = robdd_leaf x1 \\<Longrightarrow> robdd_equiv b1 b2\n 2. \\<And>x21 x22 x23 x24.\n       b1 = robdd_var x21 x22 x23 x24 \\<Longrightarrow> robdd_equiv b1 b2", "case (robdd_leaf f)"], ["proof (state)\nthis:\n  b1 = robdd_leaf f\n\ngoal (2 subgoals):\n 1. \\<And>x1. b1 = robdd_leaf x1 \\<Longrightarrow> robdd_equiv b1 b2\n 2. \\<And>x21 x22 x23 x24.\n       b1 = robdd_var x21 x22 x23 x24 \\<Longrightarrow> robdd_equiv b1 b2", "thus ?thesis"], ["proof (prove)\nusing this:\n  b1 = robdd_leaf f\n\ngoal (1 subgoal):\n 1. robdd_equiv b1 b2", "using robdd_unique_leaf[OF invars_b2] sem_eq"], ["proof (prove)\nusing this:\n  b1 = robdd_leaf f\n  robdd_\\<alpha> b2 = robdd_\\<alpha> (robdd_leaf ?value) \\<Longrightarrow>\n  b2 = robdd_leaf ?value\n  robdd_\\<alpha> b1 = robdd_\\<alpha> b2\n\ngoal (1 subgoal):\n 1. robdd_equiv b1 b2", "by simp"], ["proof (state)\nthis:\n  robdd_equiv b1 b2\n\ngoal (1 subgoal):\n 1. \\<And>x21 x22 x23 x24.\n       b1 = robdd_var x21 x22 x23 x24 \\<Longrightarrow> robdd_equiv b1 b2", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x21 x22 x23 x24.\n       b1 = robdd_var x21 x22 x23 x24 \\<Longrightarrow> robdd_equiv b1 b2", "case (robdd_var i1 l1 v1 r1)"], ["proof (state)\nthis:\n  b1 = robdd_var i1 l1 v1 r1\n\ngoal (1 subgoal):\n 1. \\<And>x21 x22 x23 x24.\n       b1 = robdd_var x21 x22 x23 x24 \\<Longrightarrow> robdd_equiv b1 b2", "note b1_eq = this"], ["proof (state)\nthis:\n  b1 = robdd_var i1 l1 v1 r1\n\ngoal (1 subgoal):\n 1. \\<And>x21 x22 x23 x24.\n       b1 = robdd_var x21 x22 x23 x24 \\<Longrightarrow> robdd_equiv b1 b2", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. robdd_equiv b1 b2", "proof (cases b2)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x1. b2 = robdd_leaf x1 \\<Longrightarrow> robdd_equiv b1 b2\n 2. \\<And>x21 x22 x23 x24.\n       b2 = robdd_var x21 x22 x23 x24 \\<Longrightarrow> robdd_equiv b1 b2", "case (robdd_leaf f)"], ["proof (state)\nthis:\n  b2 = robdd_leaf f\n\ngoal (2 subgoals):\n 1. \\<And>x1. b2 = robdd_leaf x1 \\<Longrightarrow> robdd_equiv b1 b2\n 2. \\<And>x21 x22 x23 x24.\n       b2 = robdd_var x21 x22 x23 x24 \\<Longrightarrow> robdd_equiv b1 b2", "thus ?thesis"], ["proof (prove)\nusing this:\n  b2 = robdd_leaf f\n\ngoal (1 subgoal):\n 1. robdd_equiv b1 b2", "using robdd_unique_leaf[OF invars_b1] sem_eq"], ["proof (prove)\nusing this:\n  b2 = robdd_leaf f\n  robdd_\\<alpha> b1 = robdd_\\<alpha> (robdd_leaf ?value) \\<Longrightarrow>\n  b1 = robdd_leaf ?value\n  robdd_\\<alpha> b1 = robdd_\\<alpha> b2\n\ngoal (1 subgoal):\n 1. robdd_equiv b1 b2", "by (simp add: fun_eq_iff)"], ["proof (state)\nthis:\n  robdd_equiv b1 b2\n\ngoal (1 subgoal):\n 1. \\<And>x21 x22 x23 x24.\n       b2 = robdd_var x21 x22 x23 x24 \\<Longrightarrow> robdd_equiv b1 b2", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x21 x22 x23 x24.\n       b2 = robdd_var x21 x22 x23 x24 \\<Longrightarrow> robdd_equiv b1 b2", "case (robdd_var i2 l2 v2 r2)"], ["proof (state)\nthis:\n  b2 = robdd_var i2 l2 v2 r2\n\ngoal (1 subgoal):\n 1. \\<And>x21 x22 x23 x24.\n       b2 = robdd_var x21 x22 x23 x24 \\<Longrightarrow> robdd_equiv b1 b2", "note b2_eq = this"], ["proof (state)\nthis:\n  b2 = robdd_var i2 l2 v2 r2\n\ngoal (1 subgoal):\n 1. \\<And>x21 x22 x23 x24.\n       b2 = robdd_var x21 x22 x23 x24 \\<Longrightarrow> robdd_equiv b1 b2", "from invars_b1 invars_b2"], ["proof (chain)\npicking this:\n  robdd_invar_vars b1\n  robdd_invar_reduced b1\n  robdd_invar_vars b2\n  robdd_invar_reduced b2", "have invars_sub: \"robdd_invar_vars l1\" \"robdd_invar_vars r1\" \n                       \"robdd_invar_vars l2\" \"robdd_invar_vars r2\" \n                       \"robdd_invar_reduced l1\" \"robdd_invar_reduced r1\" \n                       \"robdd_invar_reduced l2\" \"robdd_invar_reduced r2\" \n           \"\\<not>(robdd_equiv l1 r1)\" \"\\<not>(robdd_equiv l2 r2)\""], ["proof (prove)\nusing this:\n  robdd_invar_vars b1\n  robdd_invar_reduced b1\n  robdd_invar_vars b2\n  robdd_invar_reduced b2\n\ngoal (1 subgoal):\n 1. ((robdd_invar_vars l1 &&& robdd_invar_vars r1) &&&\n     robdd_invar_vars l2 &&&\n     robdd_invar_vars r2 &&& robdd_invar_reduced l1) &&&\n    (robdd_invar_reduced r1 &&& robdd_invar_reduced l2) &&&\n    robdd_invar_reduced r2 &&&\n    \\<not> robdd_equiv l1 r1 &&& \\<not> robdd_equiv l2 r2", "unfolding b1_eq b2_eq"], ["proof (prove)\nusing this:\n  robdd_invar_vars (robdd_var i1 l1 v1 r1)\n  robdd_invar_reduced (robdd_var i1 l1 v1 r1)\n  robdd_invar_vars (robdd_var i2 l2 v2 r2)\n  robdd_invar_reduced (robdd_var i2 l2 v2 r2)\n\ngoal (1 subgoal):\n 1. ((robdd_invar_vars l1 &&& robdd_invar_vars r1) &&&\n     robdd_invar_vars l2 &&&\n     robdd_invar_vars r2 &&& robdd_invar_reduced l1) &&&\n    (robdd_invar_reduced r1 &&& robdd_invar_reduced l2) &&&\n    robdd_invar_reduced r2 &&&\n    \\<not> robdd_equiv l1 r1 &&& \\<not> robdd_equiv l2 r2", "by (simp_all add: robdd_invar_vars_def) (metis robdd_invar_vars_def robdd_invar_vars_impl)+"], ["proof (state)\nthis:\n  robdd_invar_vars l1\n  robdd_invar_vars r1\n  robdd_invar_vars l2\n  robdd_invar_vars r2\n  robdd_invar_reduced l1\n  robdd_invar_reduced r1\n  robdd_invar_reduced l2\n  robdd_invar_reduced r2\n  \\<not> robdd_equiv l1 r1\n  \\<not> robdd_equiv l2 r2\n\ngoal (1 subgoal):\n 1. \\<And>x21 x22 x23 x24.\n       b2 = robdd_var x21 x22 x23 x24 \\<Longrightarrow> robdd_equiv b1 b2", "have aux: \"v1 = v2 \\<and> robdd_\\<alpha> l1 = robdd_\\<alpha> l2 \\<and> robdd_\\<alpha> r1 = robdd_\\<alpha> r2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. v1 = v2 \\<and>\n    robdd_\\<alpha> l1 = robdd_\\<alpha> l2 \\<and>\n    robdd_\\<alpha> r1 = robdd_\\<alpha> r2", "proof (rule robdd_unique_var[OF invars_b1[unfolded b1_eq] invars_b2[unfolded b2_eq]])"], ["proof (state)\ngoal (3 subgoals):\n 1. robdd_\\<alpha> l1 \\<noteq> robdd_\\<alpha> r1\n 2. robdd_\\<alpha> l2 \\<noteq> robdd_\\<alpha> r2\n 3. robdd_\\<alpha> (robdd_var i1 l1 v1 r1) =\n    robdd_\\<alpha> (robdd_var i2 l2 v2 r2)", "show \"robdd_\\<alpha> (robdd_var i1 l1 v1 r1) = robdd_\\<alpha> (robdd_var i2 l2 v2 r2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. robdd_\\<alpha> (robdd_var i1 l1 v1 r1) =\n    robdd_\\<alpha> (robdd_var i2 l2 v2 r2)", "using invars_b1 invars_b2 sem_eq"], ["proof (prove)\nusing this:\n  robdd_invar_vars b1\n  robdd_invar_reduced b1\n  robdd_invar_vars b2\n  robdd_invar_reduced b2\n  robdd_\\<alpha> b1 = robdd_\\<alpha> b2\n\ngoal (1 subgoal):\n 1. robdd_\\<alpha> (robdd_var i1 l1 v1 r1) =\n    robdd_\\<alpha> (robdd_var i2 l2 v2 r2)", "unfolding b1_eq b2_eq"], ["proof (prove)\nusing this:\n  robdd_invar_vars (robdd_var i1 l1 v1 r1)\n  robdd_invar_reduced (robdd_var i1 l1 v1 r1)\n  robdd_invar_vars (robdd_var i2 l2 v2 r2)\n  robdd_invar_reduced (robdd_var i2 l2 v2 r2)\n  robdd_\\<alpha> (robdd_var i1 l1 v1 r1) =\n  robdd_\\<alpha> (robdd_var i2 l2 v2 r2)\n\ngoal (1 subgoal):\n 1. robdd_\\<alpha> (robdd_var i1 l1 v1 r1) =\n    robdd_\\<alpha> (robdd_var i2 l2 v2 r2)", "by simp_all"], ["proof (state)\nthis:\n  robdd_\\<alpha> (robdd_var i1 l1 v1 r1) =\n  robdd_\\<alpha> (robdd_var i2 l2 v2 r2)\n\ngoal (2 subgoals):\n 1. robdd_\\<alpha> l1 \\<noteq> robdd_\\<alpha> r1\n 2. robdd_\\<alpha> l2 \\<noteq> robdd_\\<alpha> r2", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. robdd_\\<alpha> l1 \\<noteq> robdd_\\<alpha> r1\n 2. robdd_\\<alpha> l2 \\<noteq> robdd_\\<alpha> r2", "show \"robdd_\\<alpha> l1 \\<noteq> robdd_\\<alpha> r1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. robdd_\\<alpha> l1 \\<noteq> robdd_\\<alpha> r1", "proof (rule notI)"], ["proof (state)\ngoal (1 subgoal):\n 1. robdd_\\<alpha> l1 = robdd_\\<alpha> r1 \\<Longrightarrow> False", "assume l1_\\<alpha>_eq: \"robdd_\\<alpha> l1 = robdd_\\<alpha> r1\""], ["proof (state)\nthis:\n  robdd_\\<alpha> l1 = robdd_\\<alpha> r1\n\ngoal (1 subgoal):\n 1. robdd_\\<alpha> l1 = robdd_\\<alpha> r1 \\<Longrightarrow> False", "with ind_hyp [of l1 r1] invars_sub"], ["proof (chain)\npicking this:\n  \\<lbrakk>(case (l1, r1) of\n            (b1, b2) \\<Rightarrow> size_robdd b1 + size_robdd b2)\n           < (case (b1, b2) of\n              (b1, b2) \\<Rightarrow> size_robdd b1 + size_robdd b2);\n   robdd_invar_vars l1; robdd_invar_reduced l1; robdd_invar_vars r1;\n   robdd_invar_reduced r1; robdd_\\<alpha> l1 = robdd_\\<alpha> r1\\<rbrakk>\n  \\<Longrightarrow> robdd_equiv l1 r1\n  robdd_invar_vars l1\n  robdd_invar_vars r1\n  robdd_invar_vars l2\n  robdd_invar_vars r2\n  robdd_invar_reduced l1\n  robdd_invar_reduced r1\n  robdd_invar_reduced l2\n  robdd_invar_reduced r2\n  \\<not> robdd_equiv l1 r1\n  \\<not> robdd_equiv l2 r2\n  robdd_\\<alpha> l1 = robdd_\\<alpha> r1", "show False"], ["proof (prove)\nusing this:\n  \\<lbrakk>(case (l1, r1) of\n            (b1, b2) \\<Rightarrow> size_robdd b1 + size_robdd b2)\n           < (case (b1, b2) of\n              (b1, b2) \\<Rightarrow> size_robdd b1 + size_robdd b2);\n   robdd_invar_vars l1; robdd_invar_reduced l1; robdd_invar_vars r1;\n   robdd_invar_reduced r1; robdd_\\<alpha> l1 = robdd_\\<alpha> r1\\<rbrakk>\n  \\<Longrightarrow> robdd_equiv l1 r1\n  robdd_invar_vars l1\n  robdd_invar_vars r1\n  robdd_invar_vars l2\n  robdd_invar_vars r2\n  robdd_invar_reduced l1\n  robdd_invar_reduced r1\n  robdd_invar_reduced l2\n  robdd_invar_reduced r2\n  \\<not> robdd_equiv l1 r1\n  \\<not> robdd_equiv l2 r2\n  robdd_\\<alpha> l1 = robdd_\\<alpha> r1\n\ngoal (1 subgoal):\n 1. False", "by (simp add: b1_eq b2_eq l1_\\<alpha>_eq)"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  robdd_\\<alpha> l1 \\<noteq> robdd_\\<alpha> r1\n\ngoal (1 subgoal):\n 1. robdd_\\<alpha> l2 \\<noteq> robdd_\\<alpha> r2", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. robdd_\\<alpha> l2 \\<noteq> robdd_\\<alpha> r2", "show \"robdd_\\<alpha> l2 \\<noteq> robdd_\\<alpha> r2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. robdd_\\<alpha> l2 \\<noteq> robdd_\\<alpha> r2", "proof (rule notI)"], ["proof (state)\ngoal (1 subgoal):\n 1. robdd_\\<alpha> l2 = robdd_\\<alpha> r2 \\<Longrightarrow> False", "assume l2_\\<alpha>_eq: \"robdd_\\<alpha> l2 = robdd_\\<alpha> r2\""], ["proof (state)\nthis:\n  robdd_\\<alpha> l2 = robdd_\\<alpha> r2\n\ngoal (1 subgoal):\n 1. robdd_\\<alpha> l2 = robdd_\\<alpha> r2 \\<Longrightarrow> False", "with ind_hyp [of l2 r2] invars_sub"], ["proof (chain)\npicking this:\n  \\<lbrakk>(case (l2, r2) of\n            (b1, b2) \\<Rightarrow> size_robdd b1 + size_robdd b2)\n           < (case (b1, b2) of\n              (b1, b2) \\<Rightarrow> size_robdd b1 + size_robdd b2);\n   robdd_invar_vars l2; robdd_invar_reduced l2; robdd_invar_vars r2;\n   robdd_invar_reduced r2; robdd_\\<alpha> l2 = robdd_\\<alpha> r2\\<rbrakk>\n  \\<Longrightarrow> robdd_equiv l2 r2\n  robdd_invar_vars l1\n  robdd_invar_vars r1\n  robdd_invar_vars l2\n  robdd_invar_vars r2\n  robdd_invar_reduced l1\n  robdd_invar_reduced r1\n  robdd_invar_reduced l2\n  robdd_invar_reduced r2\n  \\<not> robdd_equiv l1 r1\n  \\<not> robdd_equiv l2 r2\n  robdd_\\<alpha> l2 = robdd_\\<alpha> r2", "show False"], ["proof (prove)\nusing this:\n  \\<lbrakk>(case (l2, r2) of\n            (b1, b2) \\<Rightarrow> size_robdd b1 + size_robdd b2)\n           < (case (b1, b2) of\n              (b1, b2) \\<Rightarrow> size_robdd b1 + size_robdd b2);\n   robdd_invar_vars l2; robdd_invar_reduced l2; robdd_invar_vars r2;\n   robdd_invar_reduced r2; robdd_\\<alpha> l2 = robdd_\\<alpha> r2\\<rbrakk>\n  \\<Longrightarrow> robdd_equiv l2 r2\n  robdd_invar_vars l1\n  robdd_invar_vars r1\n  robdd_invar_vars l2\n  robdd_invar_vars r2\n  robdd_invar_reduced l1\n  robdd_invar_reduced r1\n  robdd_invar_reduced l2\n  robdd_invar_reduced r2\n  \\<not> robdd_equiv l1 r1\n  \\<not> robdd_equiv l2 r2\n  robdd_\\<alpha> l2 = robdd_\\<alpha> r2\n\ngoal (1 subgoal):\n 1. False", "by (simp add: b1_eq b2_eq l2_\\<alpha>_eq)"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  robdd_\\<alpha> l2 \\<noteq> robdd_\\<alpha> r2\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  v1 = v2 \\<and>\n  robdd_\\<alpha> l1 = robdd_\\<alpha> l2 \\<and>\n  robdd_\\<alpha> r1 = robdd_\\<alpha> r2\n\ngoal (1 subgoal):\n 1. \\<And>x21 x22 x23 x24.\n       b2 = robdd_var x21 x22 x23 x24 \\<Longrightarrow> robdd_equiv b1 b2", "with aux ind_hyp [of l1 l2] \n               ind_hyp [of r1 r2] invars_sub"], ["proof (chain)\npicking this:\n  v1 = v2 \\<and>\n  robdd_\\<alpha> l1 = robdd_\\<alpha> l2 \\<and>\n  robdd_\\<alpha> r1 = robdd_\\<alpha> r2\n  \\<lbrakk>(case (l1, l2) of\n            (b1, b2) \\<Rightarrow> size_robdd b1 + size_robdd b2)\n           < (case (b1, b2) of\n              (b1, b2) \\<Rightarrow> size_robdd b1 + size_robdd b2);\n   robdd_invar_vars l1; robdd_invar_reduced l1; robdd_invar_vars l2;\n   robdd_invar_reduced l2; robdd_\\<alpha> l1 = robdd_\\<alpha> l2\\<rbrakk>\n  \\<Longrightarrow> robdd_equiv l1 l2\n  \\<lbrakk>(case (r1, r2) of\n            (b1, b2) \\<Rightarrow> size_robdd b1 + size_robdd b2)\n           < (case (b1, b2) of\n              (b1, b2) \\<Rightarrow> size_robdd b1 + size_robdd b2);\n   robdd_invar_vars r1; robdd_invar_reduced r1; robdd_invar_vars r2;\n   robdd_invar_reduced r2; robdd_\\<alpha> r1 = robdd_\\<alpha> r2\\<rbrakk>\n  \\<Longrightarrow> robdd_equiv r1 r2\n  robdd_invar_vars l1\n  robdd_invar_vars r1\n  robdd_invar_vars l2\n  robdd_invar_vars r2\n  robdd_invar_reduced l1\n  robdd_invar_reduced r1\n  robdd_invar_reduced l2\n  robdd_invar_reduced r2\n  \\<not> robdd_equiv l1 r1\n  \\<not> robdd_equiv l2 r2\n  v1 = v2 \\<and>\n  robdd_\\<alpha> l1 = robdd_\\<alpha> l2 \\<and>\n  robdd_\\<alpha> r1 = robdd_\\<alpha> r2", "show ?thesis"], ["proof (prove)\nusing this:\n  v1 = v2 \\<and>\n  robdd_\\<alpha> l1 = robdd_\\<alpha> l2 \\<and>\n  robdd_\\<alpha> r1 = robdd_\\<alpha> r2\n  \\<lbrakk>(case (l1, l2) of\n            (b1, b2) \\<Rightarrow> size_robdd b1 + size_robdd b2)\n           < (case (b1, b2) of\n              (b1, b2) \\<Rightarrow> size_robdd b1 + size_robdd b2);\n   robdd_invar_vars l1; robdd_invar_reduced l1; robdd_invar_vars l2;\n   robdd_invar_reduced l2; robdd_\\<alpha> l1 = robdd_\\<alpha> l2\\<rbrakk>\n  \\<Longrightarrow> robdd_equiv l1 l2\n  \\<lbrakk>(case (r1, r2) of\n            (b1, b2) \\<Rightarrow> size_robdd b1 + size_robdd b2)\n           < (case (b1, b2) of\n              (b1, b2) \\<Rightarrow> size_robdd b1 + size_robdd b2);\n   robdd_invar_vars r1; robdd_invar_reduced r1; robdd_invar_vars r2;\n   robdd_invar_reduced r2; robdd_\\<alpha> r1 = robdd_\\<alpha> r2\\<rbrakk>\n  \\<Longrightarrow> robdd_equiv r1 r2\n  robdd_invar_vars l1\n  robdd_invar_vars r1\n  robdd_invar_vars l2\n  robdd_invar_vars r2\n  robdd_invar_reduced l1\n  robdd_invar_reduced r1\n  robdd_invar_reduced l2\n  robdd_invar_reduced r2\n  \\<not> robdd_equiv l1 r1\n  \\<not> robdd_equiv l2 r2\n  v1 = v2 \\<and>\n  robdd_\\<alpha> l1 = robdd_\\<alpha> l2 \\<and>\n  robdd_\\<alpha> r1 = robdd_\\<alpha> r2\n\ngoal (1 subgoal):\n 1. robdd_equiv b1 b2", "by (simp_all add: b1_eq b2_eq)"], ["proof (state)\nthis:\n  robdd_equiv b1 b2\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  robdd_equiv b1 b2\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  robdd_equiv b1 b2\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma robdd_equiv_alt_def_full :\nassumes \"robdd_invar_vars b1\" \"robdd_invar_reduced b1\"\n    and \"robdd_invar_vars b2\" \"robdd_invar_reduced b2\"\nshows \"robdd_equiv b1 b2 \\<longleftrightarrow> robdd_\\<alpha> b1 = robdd_\\<alpha> b2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. robdd_equiv b1 b2 = (robdd_\\<alpha> b1 = robdd_\\<alpha> b2)", "by (metis robdd_equiv_implies_sem_equiv sem_equiv_implies_robdd_equiv[OF assms])"], ["", "lemma robdd_equiv_alt_def :\nassumes \"robdd_invar b1\"\n    and \"robdd_invar b2\"\nshows \"robdd_equiv b1 b2 \\<longleftrightarrow> robdd_\\<alpha> b1 = robdd_\\<alpha> b2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. robdd_equiv b1 b2 = (robdd_\\<alpha> b1 = robdd_\\<alpha> b2)", "using assms"], ["proof (prove)\nusing this:\n  robdd_invar b1\n  robdd_invar b2\n\ngoal (1 subgoal):\n 1. robdd_equiv b1 b2 = (robdd_\\<alpha> b1 = robdd_\\<alpha> b2)", "apply (rule_tac robdd_equiv_alt_def_full)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<lbrakk>robdd_invar b1; robdd_invar b2\\<rbrakk>\n    \\<Longrightarrow> robdd_invar_vars b1\n 2. \\<lbrakk>robdd_invar b1; robdd_invar b2\\<rbrakk>\n    \\<Longrightarrow> robdd_invar_reduced b1\n 3. \\<lbrakk>robdd_invar b1; robdd_invar b2\\<rbrakk>\n    \\<Longrightarrow> robdd_invar_vars b2\n 4. \\<lbrakk>robdd_invar b1; robdd_invar b2\\<rbrakk>\n    \\<Longrightarrow> robdd_invar_reduced b2", "apply (simp_all add: robdd_invar_def robdd_invar_ext_def robdd_invar_vars_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma robdd_unique :\nassumes \"robdd_invar b1\"\n    and \"robdd_invar b2\"\n    and \"robdd_invar_ids bs\"\n    and \"b1 \\<in> bs\" \"b2 \\<in> bs\"\nshows \"robdd_\\<alpha> b1 = robdd_\\<alpha> b2 \\<longleftrightarrow> b1 = b2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (robdd_\\<alpha> b1 = robdd_\\<alpha> b2) = (b1 = b2)", "using robdd_equiv_alt_def [OF assms(1,2)]\n      robdd_invar_ids_equiv_implies_eq[of bs, OF assms(3,4,5)]"], ["proof (prove)\nusing this:\n  robdd_equiv b1 b2 = (robdd_\\<alpha> b1 = robdd_\\<alpha> b2)\n  robdd_equiv b1 b2 \\<Longrightarrow> b1 = b2\n\ngoal (1 subgoal):\n 1. (robdd_\\<alpha> b1 = robdd_\\<alpha> b2) = (b1 = b2)", "by blast"], ["", "lemma robdd_invar_ids_equal_intro :\nassumes bs_OK: \"\\<And>b. b \\<in> bs \\<Longrightarrow> robdd_invar b\"\n    and weak_invar: \"robdd_invar_ids bs\"\nshows \"robdd_invar_ids_equal bs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. robdd_invar_ids_equal bs", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. robdd_invar_ids_equal bs", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. robdd_invar_ids_equal bs", "fix b1 b2"], ["proof (state)\ngoal (1 subgoal):\n 1. robdd_invar_ids_equal bs", "assume b1_in: \"b1 \\<in> subrobdds_set bs\" and b2_in: \"b2 \\<in> subrobdds_set bs\""], ["proof (state)\nthis:\n  b1 \\<in> subrobdds_set bs\n  b2 \\<in> subrobdds_set bs\n\ngoal (1 subgoal):\n 1. robdd_invar_ids_equal bs", "hence \"robdd_invar b1 \\<and> robdd_invar b2\""], ["proof (prove)\nusing this:\n  b1 \\<in> subrobdds_set bs\n  b2 \\<in> subrobdds_set bs\n\ngoal (1 subgoal):\n 1. robdd_invar b1 \\<and> robdd_invar b2", "by (metis robdd_invar_subrobdds_set bs_OK)"], ["proof (state)\nthis:\n  robdd_invar b1 \\<and> robdd_invar b2\n\ngoal (1 subgoal):\n 1. robdd_invar_ids_equal bs", "with robdd_unique[of b1 b2 \"subrobdds_set bs\"] b1_in b2_in weak_invar"], ["proof (chain)\npicking this:\n  \\<lbrakk>robdd_invar b1; robdd_invar b2;\n   robdd_invar_ids (subrobdds_set bs); b1 \\<in> subrobdds_set bs;\n   b2 \\<in> subrobdds_set bs\\<rbrakk>\n  \\<Longrightarrow> (robdd_\\<alpha> b1 = robdd_\\<alpha> b2) = (b1 = b2)\n  b1 \\<in> subrobdds_set bs\n  b2 \\<in> subrobdds_set bs\n  robdd_invar_ids bs\n  robdd_invar b1 \\<and> robdd_invar b2", "have \"(robdd_\\<alpha> b1 = robdd_\\<alpha> b2) = (b1 = b2)\""], ["proof (prove)\nusing this:\n  \\<lbrakk>robdd_invar b1; robdd_invar b2;\n   robdd_invar_ids (subrobdds_set bs); b1 \\<in> subrobdds_set bs;\n   b2 \\<in> subrobdds_set bs\\<rbrakk>\n  \\<Longrightarrow> (robdd_\\<alpha> b1 = robdd_\\<alpha> b2) = (b1 = b2)\n  b1 \\<in> subrobdds_set bs\n  b2 \\<in> subrobdds_set bs\n  robdd_invar_ids bs\n  robdd_invar b1 \\<and> robdd_invar b2\n\ngoal (1 subgoal):\n 1. (robdd_\\<alpha> b1 = robdd_\\<alpha> b2) = (b1 = b2)", "by (simp add: robdd_invar_ids_expand)"], ["proof (state)\nthis:\n  (robdd_\\<alpha> b1 = robdd_\\<alpha> b2) = (b1 = b2)\n\ngoal (1 subgoal):\n 1. robdd_invar_ids_equal bs", "}"], ["proof (state)\nthis:\n  \\<lbrakk>?b1.2 \\<in> subrobdds_set bs;\n   ?b2.2 \\<in> subrobdds_set bs\\<rbrakk>\n  \\<Longrightarrow> (robdd_\\<alpha> ?b1.2 = robdd_\\<alpha> ?b2.2) =\n                    (?b1.2 = ?b2.2)\n\ngoal (1 subgoal):\n 1. robdd_invar_ids_equal bs", "with weak_invar"], ["proof (chain)\npicking this:\n  robdd_invar_ids bs\n  \\<lbrakk>?b1.2 \\<in> subrobdds_set bs;\n   ?b2.2 \\<in> subrobdds_set bs\\<rbrakk>\n  \\<Longrightarrow> (robdd_\\<alpha> ?b1.2 = robdd_\\<alpha> ?b2.2) =\n                    (?b1.2 = ?b2.2)", "show ?thesis"], ["proof (prove)\nusing this:\n  robdd_invar_ids bs\n  \\<lbrakk>?b1.2 \\<in> subrobdds_set bs;\n   ?b2.2 \\<in> subrobdds_set bs\\<rbrakk>\n  \\<Longrightarrow> (robdd_\\<alpha> ?b1.2 = robdd_\\<alpha> ?b2.2) =\n                    (?b1.2 = ?b2.2)\n\ngoal (1 subgoal):\n 1. robdd_invar_ids_equal bs", "unfolding robdd_invar_ids_equal_def robdd_invar_ids_def"], ["proof (prove)\nusing this:\n  \\<forall>b1 b2.\n     b1 \\<in> subrobdds_set bs \\<and>\n     b2 \\<in> subrobdds_set bs \\<longrightarrow>\n     (robdd_\\<alpha> b1 = robdd_\\<alpha> b2) =\n     (robdd_get_id b1 = robdd_get_id b2)\n  \\<lbrakk>?b1.2 \\<in> subrobdds_set bs;\n   ?b2.2 \\<in> subrobdds_set bs\\<rbrakk>\n  \\<Longrightarrow> (robdd_\\<alpha> ?b1.2 = robdd_\\<alpha> ?b2.2) =\n                    (?b1.2 = ?b2.2)\n\ngoal (1 subgoal):\n 1. \\<forall>b1 b2.\n       b1 \\<in> subrobdds_set bs \\<and>\n       b2 \\<in> subrobdds_set bs \\<longrightarrow>\n       (robdd_get_id b1 = robdd_get_id b2) = (b1 = b2)", "by (simp)"], ["proof (state)\nthis:\n  robdd_invar_ids_equal bs\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma robdd_invar_ids_full_equal_intro :\nassumes bs_OK: \"\\<And>b. b \\<in> bs \\<Longrightarrow> robdd_invar b\"\n    and weak_invar: \"robdd_invar_ids_full bs\"\nshows \"robdd_invar_ids_full_equal bs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. robdd_invar_ids_full_equal bs", "unfolding robdd_invar_ids_full_equal_alt_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. robdd_invar_ids_equal (insert robdd_zero (insert robdd_one bs))", "apply (rule robdd_invar_ids_equal_intro)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>b.\n       b \\<in> insert robdd_zero (insert robdd_one bs) \\<Longrightarrow>\n       robdd_invar b\n 2. robdd_invar_ids (insert robdd_zero (insert robdd_one bs))", "apply (simp, elim disjE)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>b. b = robdd_zero \\<Longrightarrow> robdd_invar b\n 2. \\<And>b. b = robdd_one \\<Longrightarrow> robdd_invar b\n 3. \\<And>b. b \\<in> bs \\<Longrightarrow> robdd_invar b\n 4. robdd_invar_ids (insert robdd_zero (insert robdd_one bs))", "apply (simp)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>b. b = robdd_one \\<Longrightarrow> robdd_invar b\n 2. \\<And>b. b \\<in> bs \\<Longrightarrow> robdd_invar b\n 3. robdd_invar_ids (insert robdd_zero (insert robdd_one bs))", "apply (simp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>b. b \\<in> bs \\<Longrightarrow> robdd_invar b\n 2. robdd_invar_ids (insert robdd_zero (insert robdd_one bs))", "apply (simp add: bs_OK)"], ["proof (prove)\ngoal (1 subgoal):\n 1. robdd_invar_ids (insert robdd_zero (insert robdd_one bs))", "apply (simp add: robdd_invar_ids_full_alt_def[symmetric] weak_invar)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "subsection \\<open>Variable dependency\\<close>"], ["", "text \\<open>ROBDDs talk about assignments that consider infinitely many variables. However,\nthe result depends only on a finite set of variables. Let's have a closer look at these\nvariables.\\<close>"], ["", "definition robdd_depends_on_var where\n  \"robdd_depends_on_var v b \\<longleftrightarrow> (\\<exists>a. robdd_\\<alpha> b (a(v := True)) \\<noteq> robdd_\\<alpha> b (a(v := False)))\""], ["", "lemma robdd_depends_on_varI :\n  \"robdd_\\<alpha> b (a(v := True)) \\<noteq> robdd_\\<alpha> b (a(v := False)) \\<Longrightarrow>\n   robdd_depends_on_var v b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. robdd_\\<alpha> b (a(v := True)) \\<noteq>\n    robdd_\\<alpha> b (a(v := False)) \\<Longrightarrow>\n    robdd_depends_on_var v b", "unfolding robdd_depends_on_var_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. robdd_\\<alpha> b (a(v := True)) \\<noteq>\n    robdd_\\<alpha> b (a(v := False)) \\<Longrightarrow>\n    \\<exists>a.\n       robdd_\\<alpha> b (a(v := True)) \\<noteq>\n       robdd_\\<alpha> b (a(v := False))", "by auto"], ["", "lemma robbd_depends_on_var_leaf [simp] :\n  \"\\<not>(robdd_depends_on_var v (robdd_leaf f))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> robdd_depends_on_var v (robdd_leaf f)", "by (simp_all add: robdd_depends_on_var_def fun_eq_iff)"], ["", "lemma robdd_depends_on_var_invar_greater:\nassumes invar: \"robdd_invar_vars_greater n b\"\n    and m_less: \"m < n\"\n   shows \"\\<not>(robdd_depends_on_var m b)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> robdd_depends_on_var m b", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> robdd_depends_on_var m b", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> robdd_depends_on_var m b", "fix a f"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> robdd_depends_on_var m b", "have \"robdd_\\<alpha> b (a(m := f)) = robdd_\\<alpha> b a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. robdd_\\<alpha> b (a(m := f)) = robdd_\\<alpha> b a", "apply (rule robdd_\\<alpha>_invar_greater[OF invar, of \"a(m := f)\" a])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>v. n \\<le> v \\<Longrightarrow> (a(m := f)) v = a v", "apply (insert m_less)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>v.\n       \\<lbrakk>n \\<le> v; m < n\\<rbrakk>\n       \\<Longrightarrow> (a(m := f)) v = a v", "apply (simp)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  robdd_\\<alpha> b (a(m := f)) = robdd_\\<alpha> b a\n\ngoal (1 subgoal):\n 1. \\<not> robdd_depends_on_var m b", "}"], ["proof (state)\nthis:\n  robdd_\\<alpha> b (?a2(m := ?f2)) = robdd_\\<alpha> b ?a2\n\ngoal (1 subgoal):\n 1. \\<not> robdd_depends_on_var m b", "thus ?thesis"], ["proof (prove)\nusing this:\n  robdd_\\<alpha> b (?a2(m := ?f2)) = robdd_\\<alpha> b ?a2\n\ngoal (1 subgoal):\n 1. \\<not> robdd_depends_on_var m b", "by (simp add: robdd_depends_on_var_def)"], ["proof (state)\nthis:\n  \\<not> robdd_depends_on_var m b\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma robbd_depends_on_var_var_impl1 :\nassumes depend: \"robdd_depends_on_var v (robdd_var i l v' r)\"\nshows \"(v = v') \\<or> robdd_depends_on_var v l \\<or> robdd_depends_on_var v r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. v = v' \\<or> robdd_depends_on_var v l \\<or> robdd_depends_on_var v r", "proof (cases \"v = v'\")"], ["proof (state)\ngoal (2 subgoals):\n 1. v = v' \\<Longrightarrow>\n    v = v' \\<or> robdd_depends_on_var v l \\<or> robdd_depends_on_var v r\n 2. v \\<noteq> v' \\<Longrightarrow>\n    v = v' \\<or> robdd_depends_on_var v l \\<or> robdd_depends_on_var v r", "case True"], ["proof (state)\nthis:\n  v = v'\n\ngoal (2 subgoals):\n 1. v = v' \\<Longrightarrow>\n    v = v' \\<or> robdd_depends_on_var v l \\<or> robdd_depends_on_var v r\n 2. v \\<noteq> v' \\<Longrightarrow>\n    v = v' \\<or> robdd_depends_on_var v l \\<or> robdd_depends_on_var v r", "thus ?thesis"], ["proof (prove)\nusing this:\n  v = v'\n\ngoal (1 subgoal):\n 1. v = v' \\<or> robdd_depends_on_var v l \\<or> robdd_depends_on_var v r", "by simp"], ["proof (state)\nthis:\n  v = v' \\<or> robdd_depends_on_var v l \\<or> robdd_depends_on_var v r\n\ngoal (1 subgoal):\n 1. v \\<noteq> v' \\<Longrightarrow>\n    v = v' \\<or> robdd_depends_on_var v l \\<or> robdd_depends_on_var v r", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. v \\<noteq> v' \\<Longrightarrow>\n    v = v' \\<or> robdd_depends_on_var v l \\<or> robdd_depends_on_var v r", "case False"], ["proof (state)\nthis:\n  v \\<noteq> v'\n\ngoal (1 subgoal):\n 1. v \\<noteq> v' \\<Longrightarrow>\n    v = v' \\<or> robdd_depends_on_var v l \\<or> robdd_depends_on_var v r", "note v_neq = this"], ["proof (state)\nthis:\n  v \\<noteq> v'\n\ngoal (1 subgoal):\n 1. v \\<noteq> v' \\<Longrightarrow>\n    v = v' \\<or> robdd_depends_on_var v l \\<or> robdd_depends_on_var v r", "from depend"], ["proof (chain)\npicking this:\n  robdd_depends_on_var v (robdd_var i l v' r)", "obtain a where a_props: \n    \"(if a v' then robdd_\\<alpha> l (a(v := True)) else robdd_\\<alpha> r (a(v := True))) \\<noteq>\n     (if a v' then robdd_\\<alpha> l (a(v := False)) else robdd_\\<alpha> r (a(v := False)))\""], ["proof (prove)\nusing this:\n  robdd_depends_on_var v (robdd_var i l v' r)\n\ngoal (1 subgoal):\n 1. (\\<And>a.\n        (if a v' then robdd_\\<alpha> l (a(v := True))\n         else robdd_\\<alpha> r (a(v := True))) \\<noteq>\n        (if a v' then robdd_\\<alpha> l (a(v := False))\n         else robdd_\\<alpha> r (a(v := False))) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "unfolding robdd_depends_on_var_def"], ["proof (prove)\nusing this:\n  \\<exists>a.\n     robdd_\\<alpha> (robdd_var i l v' r) (a(v := True)) \\<noteq>\n     robdd_\\<alpha> (robdd_var i l v' r) (a(v := False))\n\ngoal (1 subgoal):\n 1. (\\<And>a.\n        (if a v' then robdd_\\<alpha> l (a(v := True))\n         else robdd_\\<alpha> r (a(v := True))) \\<noteq>\n        (if a v' then robdd_\\<alpha> l (a(v := False))\n         else robdd_\\<alpha> r (a(v := False))) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (auto simp add: v_neq v_neq[symmetric])"], ["proof (state)\nthis:\n  (if a v' then robdd_\\<alpha> l (a(v := True))\n   else robdd_\\<alpha> r (a(v := True))) \\<noteq>\n  (if a v' then robdd_\\<alpha> l (a(v := False))\n   else robdd_\\<alpha> r (a(v := False)))\n\ngoal (1 subgoal):\n 1. v \\<noteq> v' \\<Longrightarrow>\n    v = v' \\<or> robdd_depends_on_var v l \\<or> robdd_depends_on_var v r", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. v = v' \\<or> robdd_depends_on_var v l \\<or> robdd_depends_on_var v r", "proof (cases \"a v'\")"], ["proof (state)\ngoal (2 subgoals):\n 1. a v' \\<Longrightarrow>\n    v = v' \\<or> robdd_depends_on_var v l \\<or> robdd_depends_on_var v r\n 2. \\<not> a v' \\<Longrightarrow>\n    v = v' \\<or> robdd_depends_on_var v l \\<or> robdd_depends_on_var v r", "case True"], ["proof (state)\nthis:\n  a v'\n\ngoal (2 subgoals):\n 1. a v' \\<Longrightarrow>\n    v = v' \\<or> robdd_depends_on_var v l \\<or> robdd_depends_on_var v r\n 2. \\<not> a v' \\<Longrightarrow>\n    v = v' \\<or> robdd_depends_on_var v l \\<or> robdd_depends_on_var v r", "note a_v'_eq = this"], ["proof (state)\nthis:\n  a v'\n\ngoal (2 subgoals):\n 1. a v' \\<Longrightarrow>\n    v = v' \\<or> robdd_depends_on_var v l \\<or> robdd_depends_on_var v r\n 2. \\<not> a v' \\<Longrightarrow>\n    v = v' \\<or> robdd_depends_on_var v l \\<or> robdd_depends_on_var v r", "have \"robdd_depends_on_var v l\""], ["proof (prove)\ngoal (1 subgoal):\n 1. robdd_depends_on_var v l", "apply (rule robdd_depends_on_varI[of _ a])"], ["proof (prove)\ngoal (1 subgoal):\n 1. robdd_\\<alpha> l (a(v := True)) \\<noteq>\n    robdd_\\<alpha> l (a(v := False))", "apply (insert a_props a_v'_eq)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>(if a v' then robdd_\\<alpha> l (a(v := True))\n              else robdd_\\<alpha> r (a(v := True))) \\<noteq>\n             (if a v' then robdd_\\<alpha> l (a(v := False))\n              else robdd_\\<alpha> r (a(v := False)));\n     a v'\\<rbrakk>\n    \\<Longrightarrow> robdd_\\<alpha> l (a(v := True)) \\<noteq>\n                      robdd_\\<alpha> l (a(v := False))", "apply (simp)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  robdd_depends_on_var v l\n\ngoal (2 subgoals):\n 1. a v' \\<Longrightarrow>\n    v = v' \\<or> robdd_depends_on_var v l \\<or> robdd_depends_on_var v r\n 2. \\<not> a v' \\<Longrightarrow>\n    v = v' \\<or> robdd_depends_on_var v l \\<or> robdd_depends_on_var v r", "thus ?thesis"], ["proof (prove)\nusing this:\n  robdd_depends_on_var v l\n\ngoal (1 subgoal):\n 1. v = v' \\<or> robdd_depends_on_var v l \\<or> robdd_depends_on_var v r", "by simp"], ["proof (state)\nthis:\n  v = v' \\<or> robdd_depends_on_var v l \\<or> robdd_depends_on_var v r\n\ngoal (1 subgoal):\n 1. \\<not> a v' \\<Longrightarrow>\n    v = v' \\<or> robdd_depends_on_var v l \\<or> robdd_depends_on_var v r", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> a v' \\<Longrightarrow>\n    v = v' \\<or> robdd_depends_on_var v l \\<or> robdd_depends_on_var v r", "case False"], ["proof (state)\nthis:\n  \\<not> a v'\n\ngoal (1 subgoal):\n 1. \\<not> a v' \\<Longrightarrow>\n    v = v' \\<or> robdd_depends_on_var v l \\<or> robdd_depends_on_var v r", "note a_v'_eq = this"], ["proof (state)\nthis:\n  \\<not> a v'\n\ngoal (1 subgoal):\n 1. \\<not> a v' \\<Longrightarrow>\n    v = v' \\<or> robdd_depends_on_var v l \\<or> robdd_depends_on_var v r", "have \"robdd_depends_on_var v r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. robdd_depends_on_var v r", "apply (rule robdd_depends_on_varI[of _ a])"], ["proof (prove)\ngoal (1 subgoal):\n 1. robdd_\\<alpha> r (a(v := True)) \\<noteq>\n    robdd_\\<alpha> r (a(v := False))", "apply (insert a_props a_v'_eq)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>(if a v' then robdd_\\<alpha> l (a(v := True))\n              else robdd_\\<alpha> r (a(v := True))) \\<noteq>\n             (if a v' then robdd_\\<alpha> l (a(v := False))\n              else robdd_\\<alpha> r (a(v := False)));\n     \\<not> a v'\\<rbrakk>\n    \\<Longrightarrow> robdd_\\<alpha> r (a(v := True)) \\<noteq>\n                      robdd_\\<alpha> r (a(v := False))", "apply (simp)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  robdd_depends_on_var v r\n\ngoal (1 subgoal):\n 1. \\<not> a v' \\<Longrightarrow>\n    v = v' \\<or> robdd_depends_on_var v l \\<or> robdd_depends_on_var v r", "thus ?thesis"], ["proof (prove)\nusing this:\n  robdd_depends_on_var v r\n\ngoal (1 subgoal):\n 1. v = v' \\<or> robdd_depends_on_var v l \\<or> robdd_depends_on_var v r", "by simp"], ["proof (state)\nthis:\n  v = v' \\<or> robdd_depends_on_var v l \\<or> robdd_depends_on_var v r\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  v = v' \\<or> robdd_depends_on_var v l \\<or> robdd_depends_on_var v r\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma robbd_depends_on_var_var :\nassumes invar: \"robdd_invar (robdd_var i l v' r)\"\nshows \"robdd_depends_on_var v (robdd_var i l v' r) \\<longleftrightarrow>\n       (v = v') \\<or> robdd_depends_on_var v l \\<or> robdd_depends_on_var v r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. robdd_depends_on_var v (robdd_var i l v' r) =\n    (v = v' \\<or> robdd_depends_on_var v l \\<or> robdd_depends_on_var v r)", "proof (cases \"v = v'\")"], ["proof (state)\ngoal (2 subgoals):\n 1. v = v' \\<Longrightarrow>\n    robdd_depends_on_var v (robdd_var i l v' r) =\n    (v = v' \\<or> robdd_depends_on_var v l \\<or> robdd_depends_on_var v r)\n 2. v \\<noteq> v' \\<Longrightarrow>\n    robdd_depends_on_var v (robdd_var i l v' r) =\n    (v = v' \\<or> robdd_depends_on_var v l \\<or> robdd_depends_on_var v r)", "case True"], ["proof (state)\nthis:\n  v = v'\n\ngoal (2 subgoals):\n 1. v = v' \\<Longrightarrow>\n    robdd_depends_on_var v (robdd_var i l v' r) =\n    (v = v' \\<or> robdd_depends_on_var v l \\<or> robdd_depends_on_var v r)\n 2. v \\<noteq> v' \\<Longrightarrow>\n    robdd_depends_on_var v (robdd_var i l v' r) =\n    (v = v' \\<or> robdd_depends_on_var v l \\<or> robdd_depends_on_var v r)", "note v_eq = this"], ["proof (state)\nthis:\n  v = v'\n\ngoal (2 subgoals):\n 1. v = v' \\<Longrightarrow>\n    robdd_depends_on_var v (robdd_var i l v' r) =\n    (v = v' \\<or> robdd_depends_on_var v l \\<or> robdd_depends_on_var v r)\n 2. v \\<noteq> v' \\<Longrightarrow>\n    robdd_depends_on_var v (robdd_var i l v' r) =\n    (v = v' \\<or> robdd_depends_on_var v l \\<or> robdd_depends_on_var v r)", "from invar"], ["proof (chain)\npicking this:\n  robdd_invar (robdd_var i l v' r)", "have invar_greater: \"robdd_invar_vars_greater (Suc v) l\" \"robdd_invar_vars_greater (Suc v) r\""], ["proof (prove)\nusing this:\n  robdd_invar (robdd_var i l v' r)\n\ngoal (1 subgoal):\n 1. robdd_invar_vars_greater (Suc v) l &&&\n    robdd_invar_vars_greater (Suc v) r", "unfolding robdd_invar_def robdd_invar_ext_def v_eq"], ["proof (prove)\nusing this:\n  robdd_var i l v' r \\<in> subrobdds_set {robdd_var i l v' r} \\<and>\n  robdd_invar_ids {robdd_var i l v' r} \\<and>\n  robdd_invar_vars_greater 0 (robdd_var i l v' r) \\<and>\n  robdd_invar_reduced (robdd_var i l v' r)\n\ngoal (1 subgoal):\n 1. robdd_invar_vars_greater (Suc v') l &&&\n    robdd_invar_vars_greater (Suc v') r", "by simp_all"], ["proof (state)\nthis:\n  robdd_invar_vars_greater (Suc v) l\n  robdd_invar_vars_greater (Suc v) r\n\ngoal (2 subgoals):\n 1. v = v' \\<Longrightarrow>\n    robdd_depends_on_var v (robdd_var i l v' r) =\n    (v = v' \\<or> robdd_depends_on_var v l \\<or> robdd_depends_on_var v r)\n 2. v \\<noteq> v' \\<Longrightarrow>\n    robdd_depends_on_var v (robdd_var i l v' r) =\n    (v = v' \\<or> robdd_depends_on_var v l \\<or> robdd_depends_on_var v r)", "from invar robdd_equiv_alt_def[of l r]"], ["proof (chain)\npicking this:\n  robdd_invar (robdd_var i l v' r)\n  \\<lbrakk>robdd_invar l; robdd_invar r\\<rbrakk>\n  \\<Longrightarrow> robdd_equiv l r = (robdd_\\<alpha> l = robdd_\\<alpha> r)", "have \"robdd_\\<alpha> l \\<noteq> robdd_\\<alpha> r\""], ["proof (prove)\nusing this:\n  robdd_invar (robdd_var i l v' r)\n  \\<lbrakk>robdd_invar l; robdd_invar r\\<rbrakk>\n  \\<Longrightarrow> robdd_equiv l r = (robdd_\\<alpha> l = robdd_\\<alpha> r)\n\ngoal (1 subgoal):\n 1. robdd_\\<alpha> l \\<noteq> robdd_\\<alpha> r", "by (metis robdd_invar_simps_var)"], ["proof (state)\nthis:\n  robdd_\\<alpha> l \\<noteq> robdd_\\<alpha> r\n\ngoal (2 subgoals):\n 1. v = v' \\<Longrightarrow>\n    robdd_depends_on_var v (robdd_var i l v' r) =\n    (v = v' \\<or> robdd_depends_on_var v l \\<or> robdd_depends_on_var v r)\n 2. v \\<noteq> v' \\<Longrightarrow>\n    robdd_depends_on_var v (robdd_var i l v' r) =\n    (v = v' \\<or> robdd_depends_on_var v l \\<or> robdd_depends_on_var v r)", "then"], ["proof (chain)\npicking this:\n  robdd_\\<alpha> l \\<noteq> robdd_\\<alpha> r", "obtain a where not_equiv: \"robdd_\\<alpha> l a \\<noteq> robdd_\\<alpha> r a\""], ["proof (prove)\nusing this:\n  robdd_\\<alpha> l \\<noteq> robdd_\\<alpha> r\n\ngoal (1 subgoal):\n 1. (\\<And>a.\n        robdd_\\<alpha> l a \\<noteq> robdd_\\<alpha> r a \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (simp add: fun_eq_iff) metis"], ["proof (state)\nthis:\n  robdd_\\<alpha> l a \\<noteq> robdd_\\<alpha> r a\n\ngoal (2 subgoals):\n 1. v = v' \\<Longrightarrow>\n    robdd_depends_on_var v (robdd_var i l v' r) =\n    (v = v' \\<or> robdd_depends_on_var v l \\<or> robdd_depends_on_var v r)\n 2. v \\<noteq> v' \\<Longrightarrow>\n    robdd_depends_on_var v (robdd_var i l v' r) =\n    (v = v' \\<or> robdd_depends_on_var v l \\<or> robdd_depends_on_var v r)", "from robdd_\\<alpha>_invar_greater[OF invar_greater(1), of \"a (v := True)\" a]"], ["proof (chain)\npicking this:\n  (\\<And>va.\n      Suc v \\<le> va \\<Longrightarrow>\n      (a(v := True)) va = a va) \\<Longrightarrow>\n  robdd_\\<alpha> l (a(v := True)) = robdd_\\<alpha> l a", "have l_eval: \"robdd_\\<alpha> l (a(v := True)) = robdd_\\<alpha> l a\""], ["proof (prove)\nusing this:\n  (\\<And>va.\n      Suc v \\<le> va \\<Longrightarrow>\n      (a(v := True)) va = a va) \\<Longrightarrow>\n  robdd_\\<alpha> l (a(v := True)) = robdd_\\<alpha> l a\n\ngoal (1 subgoal):\n 1. robdd_\\<alpha> l (a(v := True)) = robdd_\\<alpha> l a", "by simp"], ["proof (state)\nthis:\n  robdd_\\<alpha> l (a(v := True)) = robdd_\\<alpha> l a\n\ngoal (2 subgoals):\n 1. v = v' \\<Longrightarrow>\n    robdd_depends_on_var v (robdd_var i l v' r) =\n    (v = v' \\<or> robdd_depends_on_var v l \\<or> robdd_depends_on_var v r)\n 2. v \\<noteq> v' \\<Longrightarrow>\n    robdd_depends_on_var v (robdd_var i l v' r) =\n    (v = v' \\<or> robdd_depends_on_var v l \\<or> robdd_depends_on_var v r)", "from robdd_\\<alpha>_invar_greater[OF invar_greater(2), of \"a (v := False)\" a]"], ["proof (chain)\npicking this:\n  (\\<And>va.\n      Suc v \\<le> va \\<Longrightarrow>\n      (a(v := False)) va = a va) \\<Longrightarrow>\n  robdd_\\<alpha> r (a(v := False)) = robdd_\\<alpha> r a", "have r_eval: \"robdd_\\<alpha> r (a(v := False)) = robdd_\\<alpha> r a\""], ["proof (prove)\nusing this:\n  (\\<And>va.\n      Suc v \\<le> va \\<Longrightarrow>\n      (a(v := False)) va = a va) \\<Longrightarrow>\n  robdd_\\<alpha> r (a(v := False)) = robdd_\\<alpha> r a\n\ngoal (1 subgoal):\n 1. robdd_\\<alpha> r (a(v := False)) = robdd_\\<alpha> r a", "by simp"], ["proof (state)\nthis:\n  robdd_\\<alpha> r (a(v := False)) = robdd_\\<alpha> r a\n\ngoal (2 subgoals):\n 1. v = v' \\<Longrightarrow>\n    robdd_depends_on_var v (robdd_var i l v' r) =\n    (v = v' \\<or> robdd_depends_on_var v l \\<or> robdd_depends_on_var v r)\n 2. v \\<noteq> v' \\<Longrightarrow>\n    robdd_depends_on_var v (robdd_var i l v' r) =\n    (v = v' \\<or> robdd_depends_on_var v l \\<or> robdd_depends_on_var v r)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. robdd_depends_on_var v (robdd_var i l v' r) =\n    (v = v' \\<or> robdd_depends_on_var v l \\<or> robdd_depends_on_var v r)", "apply (simp add: v_eq[symmetric] robdd_depends_on_var_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>a.\n       robdd_\\<alpha> l (a(v := True)) =\n       (\\<not> robdd_\\<alpha> r (a(v := False)))", "apply (rule exI [where x = a])"], ["proof (prove)\ngoal (1 subgoal):\n 1. robdd_\\<alpha> l (a(v := True)) =\n    (\\<not> robdd_\\<alpha> r (a(v := False)))", "apply (insert not_equiv)"], ["proof (prove)\ngoal (1 subgoal):\n 1. robdd_\\<alpha> l a \\<noteq> robdd_\\<alpha> r a \\<Longrightarrow>\n    robdd_\\<alpha> l (a(v := True)) =\n    (\\<not> robdd_\\<alpha> r (a(v := False)))", "apply (simp add: r_eval l_eval)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  robdd_depends_on_var v (robdd_var i l v' r) =\n  (v = v' \\<or> robdd_depends_on_var v l \\<or> robdd_depends_on_var v r)\n\ngoal (1 subgoal):\n 1. v \\<noteq> v' \\<Longrightarrow>\n    robdd_depends_on_var v (robdd_var i l v' r) =\n    (v = v' \\<or> robdd_depends_on_var v l \\<or> robdd_depends_on_var v r)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. v \\<noteq> v' \\<Longrightarrow>\n    robdd_depends_on_var v (robdd_var i l v' r) =\n    (v = v' \\<or> robdd_depends_on_var v l \\<or> robdd_depends_on_var v r)", "case False"], ["proof (state)\nthis:\n  v \\<noteq> v'\n\ngoal (1 subgoal):\n 1. v \\<noteq> v' \\<Longrightarrow>\n    robdd_depends_on_var v (robdd_var i l v' r) =\n    (v = v' \\<or> robdd_depends_on_var v l \\<or> robdd_depends_on_var v r)", "note v_neq = this"], ["proof (state)\nthis:\n  v \\<noteq> v'\n\ngoal (1 subgoal):\n 1. v \\<noteq> v' \\<Longrightarrow>\n    robdd_depends_on_var v (robdd_var i l v' r) =\n    (v = v' \\<or> robdd_depends_on_var v l \\<or> robdd_depends_on_var v r)", "from invar"], ["proof (chain)\npicking this:\n  robdd_invar (robdd_var i l v' r)", "have invar_greater: \"robdd_invar_vars_greater (Suc v') l\" \"robdd_invar_vars_greater (Suc v') r\""], ["proof (prove)\nusing this:\n  robdd_invar (robdd_var i l v' r)\n\ngoal (1 subgoal):\n 1. robdd_invar_vars_greater (Suc v') l &&&\n    robdd_invar_vars_greater (Suc v') r", "unfolding robdd_invar_def robdd_invar_ext_def"], ["proof (prove)\nusing this:\n  robdd_var i l v' r \\<in> subrobdds_set {robdd_var i l v' r} \\<and>\n  robdd_invar_ids {robdd_var i l v' r} \\<and>\n  robdd_invar_vars_greater 0 (robdd_var i l v' r) \\<and>\n  robdd_invar_reduced (robdd_var i l v' r)\n\ngoal (1 subgoal):\n 1. robdd_invar_vars_greater (Suc v') l &&&\n    robdd_invar_vars_greater (Suc v') r", "by simp_all"], ["proof (state)\nthis:\n  robdd_invar_vars_greater (Suc v') l\n  robdd_invar_vars_greater (Suc v') r\n\ngoal (1 subgoal):\n 1. v \\<noteq> v' \\<Longrightarrow>\n    robdd_depends_on_var v (robdd_var i l v' r) =\n    (v = v' \\<or> robdd_depends_on_var v l \\<or> robdd_depends_on_var v r)", "{"], ["proof (state)\nthis:\n  robdd_invar_vars_greater (Suc v') l\n  robdd_invar_vars_greater (Suc v') r\n\ngoal (1 subgoal):\n 1. v \\<noteq> v' \\<Longrightarrow>\n    robdd_depends_on_var v (robdd_var i l v' r) =\n    (v = v' \\<or> robdd_depends_on_var v l \\<or> robdd_depends_on_var v r)", "fix a f1 f2"], ["proof (state)\ngoal (1 subgoal):\n 1. v \\<noteq> v' \\<Longrightarrow>\n    robdd_depends_on_var v (robdd_var i l v' r) =\n    (v = v' \\<or> robdd_depends_on_var v l \\<or> robdd_depends_on_var v r)", "from robdd_\\<alpha>_invar_greater[OF invar_greater(1), of \"a (v' := f1, v := f2)\" \"a (v := f2)\"] \n         robdd_\\<alpha>_invar_greater[OF invar_greater(2), of \"a (v' := f1, v := f2)\" \"a (v := f2)\"]"], ["proof (chain)\npicking this:\n  (\\<And>va.\n      Suc v' \\<le> va \\<Longrightarrow>\n      (a(v' := f1, v := f2)) va = (a(v := f2)) va) \\<Longrightarrow>\n  robdd_\\<alpha> l (a(v' := f1, v := f2)) = robdd_\\<alpha> l (a(v := f2))\n  (\\<And>va.\n      Suc v' \\<le> va \\<Longrightarrow>\n      (a(v' := f1, v := f2)) va = (a(v := f2)) va) \\<Longrightarrow>\n  robdd_\\<alpha> r (a(v' := f1, v := f2)) = robdd_\\<alpha> r (a(v := f2))", "have \"robdd_\\<alpha> l (a(v' := f1, v := f2)) = robdd_\\<alpha> l (a (v:=f2))\" \n         \"robdd_\\<alpha> r (a(v' := f1, v := f2)) = robdd_\\<alpha> r (a (v:=f2))\""], ["proof (prove)\nusing this:\n  (\\<And>va.\n      Suc v' \\<le> va \\<Longrightarrow>\n      (a(v' := f1, v := f2)) va = (a(v := f2)) va) \\<Longrightarrow>\n  robdd_\\<alpha> l (a(v' := f1, v := f2)) = robdd_\\<alpha> l (a(v := f2))\n  (\\<And>va.\n      Suc v' \\<le> va \\<Longrightarrow>\n      (a(v' := f1, v := f2)) va = (a(v := f2)) va) \\<Longrightarrow>\n  robdd_\\<alpha> r (a(v' := f1, v := f2)) = robdd_\\<alpha> r (a(v := f2))\n\ngoal (1 subgoal):\n 1. robdd_\\<alpha> l (a(v' := f1, v := f2)) =\n    robdd_\\<alpha> l (a(v := f2)) &&&\n    robdd_\\<alpha> r (a(v' := f1, v := f2)) = robdd_\\<alpha> r (a(v := f2))", "by simp_all"], ["proof (state)\nthis:\n  robdd_\\<alpha> l (a(v' := f1, v := f2)) = robdd_\\<alpha> l (a(v := f2))\n  robdd_\\<alpha> r (a(v' := f1, v := f2)) = robdd_\\<alpha> r (a(v := f2))\n\ngoal (1 subgoal):\n 1. v \\<noteq> v' \\<Longrightarrow>\n    robdd_depends_on_var v (robdd_var i l v' r) =\n    (v = v' \\<or> robdd_depends_on_var v l \\<or> robdd_depends_on_var v r)", "}"], ["proof (state)\nthis:\n  robdd_\\<alpha> l (?a2(v' := ?f1.2, v := ?f2.2)) =\n  robdd_\\<alpha> l (?a2(v := ?f2.2))\n  robdd_\\<alpha> r (?a2(v' := ?f1.2, v := ?f2.2)) =\n  robdd_\\<alpha> r (?a2(v := ?f2.2))\n\ngoal (1 subgoal):\n 1. v \\<noteq> v' \\<Longrightarrow>\n    robdd_depends_on_var v (robdd_var i l v' r) =\n    (v = v' \\<or> robdd_depends_on_var v l \\<or> robdd_depends_on_var v r)", "note robdd_\\<alpha>_lr_modified = this"], ["proof (state)\nthis:\n  robdd_\\<alpha> l (?a2(v' := ?f1.2, v := ?f2.2)) =\n  robdd_\\<alpha> l (?a2(v := ?f2.2))\n  robdd_\\<alpha> r (?a2(v' := ?f1.2, v := ?f2.2)) =\n  robdd_\\<alpha> r (?a2(v := ?f2.2))\n\ngoal (1 subgoal):\n 1. v \\<noteq> v' \\<Longrightarrow>\n    robdd_depends_on_var v (robdd_var i l v' r) =\n    (v = v' \\<or> robdd_depends_on_var v l \\<or> robdd_depends_on_var v r)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. robdd_depends_on_var v (robdd_var i l v' r) =\n    (v = v' \\<or> robdd_depends_on_var v l \\<or> robdd_depends_on_var v r)", "proof (cases \"robdd_depends_on_var v l\")"], ["proof (state)\ngoal (2 subgoals):\n 1. robdd_depends_on_var v l \\<Longrightarrow>\n    robdd_depends_on_var v (robdd_var i l v' r) =\n    (v = v' \\<or> robdd_depends_on_var v l \\<or> robdd_depends_on_var v r)\n 2. \\<not> robdd_depends_on_var v l \\<Longrightarrow>\n    robdd_depends_on_var v (robdd_var i l v' r) =\n    (v = v' \\<or> robdd_depends_on_var v l \\<or> robdd_depends_on_var v r)", "case True"], ["proof (state)\nthis:\n  robdd_depends_on_var v l\n\ngoal (2 subgoals):\n 1. robdd_depends_on_var v l \\<Longrightarrow>\n    robdd_depends_on_var v (robdd_var i l v' r) =\n    (v = v' \\<or> robdd_depends_on_var v l \\<or> robdd_depends_on_var v r)\n 2. \\<not> robdd_depends_on_var v l \\<Longrightarrow>\n    robdd_depends_on_var v (robdd_var i l v' r) =\n    (v = v' \\<or> robdd_depends_on_var v l \\<or> robdd_depends_on_var v r)", "note depends_on_l = this"], ["proof (state)\nthis:\n  robdd_depends_on_var v l\n\ngoal (2 subgoals):\n 1. robdd_depends_on_var v l \\<Longrightarrow>\n    robdd_depends_on_var v (robdd_var i l v' r) =\n    (v = v' \\<or> robdd_depends_on_var v l \\<or> robdd_depends_on_var v r)\n 2. \\<not> robdd_depends_on_var v l \\<Longrightarrow>\n    robdd_depends_on_var v (robdd_var i l v' r) =\n    (v = v' \\<or> robdd_depends_on_var v l \\<or> robdd_depends_on_var v r)", "from depends_on_l"], ["proof (chain)\npicking this:\n  robdd_depends_on_var v l", "obtain a where not_equiv: \"robdd_\\<alpha> l (a(v := True)) \\<noteq> robdd_\\<alpha> l (a(v := False))\""], ["proof (prove)\nusing this:\n  robdd_depends_on_var v l\n\ngoal (1 subgoal):\n 1. (\\<And>a.\n        robdd_\\<alpha> l (a(v := True)) \\<noteq>\n        robdd_\\<alpha> l (a(v := False)) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "unfolding robdd_depends_on_var_def"], ["proof (prove)\nusing this:\n  \\<exists>a.\n     robdd_\\<alpha> l (a(v := True)) \\<noteq>\n     robdd_\\<alpha> l (a(v := False))\n\ngoal (1 subgoal):\n 1. (\\<And>a.\n        robdd_\\<alpha> l (a(v := True)) \\<noteq>\n        robdd_\\<alpha> l (a(v := False)) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by metis"], ["proof (state)\nthis:\n  robdd_\\<alpha> l (a(v := True)) \\<noteq> robdd_\\<alpha> l (a(v := False))\n\ngoal (2 subgoals):\n 1. robdd_depends_on_var v l \\<Longrightarrow>\n    robdd_depends_on_var v (robdd_var i l v' r) =\n    (v = v' \\<or> robdd_depends_on_var v l \\<or> robdd_depends_on_var v r)\n 2. \\<not> robdd_depends_on_var v l \\<Longrightarrow>\n    robdd_depends_on_var v (robdd_var i l v' r) =\n    (v = v' \\<or> robdd_depends_on_var v l \\<or> robdd_depends_on_var v r)", "have \"robdd_depends_on_var v (robdd_var i l v' r)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. robdd_depends_on_var v (robdd_var i l v' r)", "unfolding robdd_depends_on_var_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>a.\n       robdd_\\<alpha> (robdd_var i l v' r) (a(v := True)) \\<noteq>\n       robdd_\\<alpha> (robdd_var i l v' r) (a(v := False))", "apply (simp add: v_neq[symmetric])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>a.\n       (a v' \\<longrightarrow>\n        robdd_\\<alpha> l (a(v := True)) =\n        (\\<not> robdd_\\<alpha> l (a(v := False)))) \\<and>\n       (\\<not> a v' \\<longrightarrow>\n        robdd_\\<alpha> r (a(v := True)) =\n        (\\<not> robdd_\\<alpha> r (a(v := False))))", "apply (rule exI [where x = \"a (v':=True)\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. ((a(v' := True)) v' \\<longrightarrow>\n     robdd_\\<alpha> l (a(v' := True, v := True)) =\n     (\\<not> robdd_\\<alpha> l (a(v' := True, v := False)))) \\<and>\n    (\\<not> (a(v' := True)) v' \\<longrightarrow>\n     robdd_\\<alpha> r (a(v' := True, v := True)) =\n     (\\<not> robdd_\\<alpha> r (a(v' := True, v := False))))", "apply (insert not_equiv)"], ["proof (prove)\ngoal (1 subgoal):\n 1. robdd_\\<alpha> l (a(v := True)) \\<noteq>\n    robdd_\\<alpha> l (a(v := False)) \\<Longrightarrow>\n    ((a(v' := True)) v' \\<longrightarrow>\n     robdd_\\<alpha> l (a(v' := True, v := True)) =\n     (\\<not> robdd_\\<alpha> l (a(v' := True, v := False)))) \\<and>\n    (\\<not> (a(v' := True)) v' \\<longrightarrow>\n     robdd_\\<alpha> r (a(v' := True, v := True)) =\n     (\\<not> robdd_\\<alpha> r (a(v' := True, v := False))))", "apply (simp add: robdd_\\<alpha>_lr_modified)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  robdd_depends_on_var v (robdd_var i l v' r)\n\ngoal (2 subgoals):\n 1. robdd_depends_on_var v l \\<Longrightarrow>\n    robdd_depends_on_var v (robdd_var i l v' r) =\n    (v = v' \\<or> robdd_depends_on_var v l \\<or> robdd_depends_on_var v r)\n 2. \\<not> robdd_depends_on_var v l \\<Longrightarrow>\n    robdd_depends_on_var v (robdd_var i l v' r) =\n    (v = v' \\<or> robdd_depends_on_var v l \\<or> robdd_depends_on_var v r)", "thus ?thesis"], ["proof (prove)\nusing this:\n  robdd_depends_on_var v (robdd_var i l v' r)\n\ngoal (1 subgoal):\n 1. robdd_depends_on_var v (robdd_var i l v' r) =\n    (v = v' \\<or> robdd_depends_on_var v l \\<or> robdd_depends_on_var v r)", "by (simp add: depends_on_l)"], ["proof (state)\nthis:\n  robdd_depends_on_var v (robdd_var i l v' r) =\n  (v = v' \\<or> robdd_depends_on_var v l \\<or> robdd_depends_on_var v r)\n\ngoal (1 subgoal):\n 1. \\<not> robdd_depends_on_var v l \\<Longrightarrow>\n    robdd_depends_on_var v (robdd_var i l v' r) =\n    (v = v' \\<or> robdd_depends_on_var v l \\<or> robdd_depends_on_var v r)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> robdd_depends_on_var v l \\<Longrightarrow>\n    robdd_depends_on_var v (robdd_var i l v' r) =\n    (v = v' \\<or> robdd_depends_on_var v l \\<or> robdd_depends_on_var v r)", "case False"], ["proof (state)\nthis:\n  \\<not> robdd_depends_on_var v l\n\ngoal (1 subgoal):\n 1. \\<not> robdd_depends_on_var v l \\<Longrightarrow>\n    robdd_depends_on_var v (robdd_var i l v' r) =\n    (v = v' \\<or> robdd_depends_on_var v l \\<or> robdd_depends_on_var v r)", "note not_depends_on_l = this"], ["proof (state)\nthis:\n  \\<not> robdd_depends_on_var v l\n\ngoal (1 subgoal):\n 1. \\<not> robdd_depends_on_var v l \\<Longrightarrow>\n    robdd_depends_on_var v (robdd_var i l v' r) =\n    (v = v' \\<or> robdd_depends_on_var v l \\<or> robdd_depends_on_var v r)", "hence l_simp: \"\\<And>a. robdd_\\<alpha> l (a(v := True)) = robdd_\\<alpha> l (a(v := False))\""], ["proof (prove)\nusing this:\n  \\<not> robdd_depends_on_var v l\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       robdd_\\<alpha> l (a(v := True)) = robdd_\\<alpha> l (a(v := False))", "unfolding robdd_depends_on_var_def"], ["proof (prove)\nusing this:\n  \\<nexists>a.\n     robdd_\\<alpha> l (a(v := True)) \\<noteq>\n     robdd_\\<alpha> l (a(v := False))\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       robdd_\\<alpha> l (a(v := True)) = robdd_\\<alpha> l (a(v := False))", "by simp"], ["proof (state)\nthis:\n  robdd_\\<alpha> l (?a(v := True)) = robdd_\\<alpha> l (?a(v := False))\n\ngoal (1 subgoal):\n 1. \\<not> robdd_depends_on_var v l \\<Longrightarrow>\n    robdd_depends_on_var v (robdd_var i l v' r) =\n    (v = v' \\<or> robdd_depends_on_var v l \\<or> robdd_depends_on_var v r)", "{"], ["proof (state)\nthis:\n  robdd_\\<alpha> l (?a(v := True)) = robdd_\\<alpha> l (?a(v := False))\n\ngoal (1 subgoal):\n 1. \\<not> robdd_depends_on_var v l \\<Longrightarrow>\n    robdd_depends_on_var v (robdd_var i l v' r) =\n    (v = v' \\<or> robdd_depends_on_var v l \\<or> robdd_depends_on_var v r)", "fix a"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> robdd_depends_on_var v l \\<Longrightarrow>\n    robdd_depends_on_var v (robdd_var i l v' r) =\n    (v = v' \\<or> robdd_depends_on_var v l \\<or> robdd_depends_on_var v r)", "assume \"robdd_\\<alpha> r (a(v := True)) \\<noteq> robdd_\\<alpha> r (a(v := False))\""], ["proof (state)\nthis:\n  robdd_\\<alpha> r (a(v := True)) \\<noteq> robdd_\\<alpha> r (a(v := False))\n\ngoal (1 subgoal):\n 1. \\<not> robdd_depends_on_var v l \\<Longrightarrow>\n    robdd_depends_on_var v (robdd_var i l v' r) =\n    (v = v' \\<or> robdd_depends_on_var v l \\<or> robdd_depends_on_var v r)", "hence \"robdd_\\<alpha> r (a(v' := False, v := True)) \\<noteq> robdd_\\<alpha> r (a(v' := False, v := False))\""], ["proof (prove)\nusing this:\n  robdd_\\<alpha> r (a(v := True)) \\<noteq> robdd_\\<alpha> r (a(v := False))\n\ngoal (1 subgoal):\n 1. robdd_\\<alpha> r (a(v' := False, v := True)) \\<noteq>\n    robdd_\\<alpha> r (a(v' := False, v := False))", "by (simp add: robdd_\\<alpha>_lr_modified)"], ["proof (state)\nthis:\n  robdd_\\<alpha> r (a(v' := False, v := True)) \\<noteq>\n  robdd_\\<alpha> r (a(v' := False, v := False))\n\ngoal (1 subgoal):\n 1. \\<not> robdd_depends_on_var v l \\<Longrightarrow>\n    robdd_depends_on_var v (robdd_var i l v' r) =\n    (v = v' \\<or> robdd_depends_on_var v l \\<or> robdd_depends_on_var v r)", "}"], ["proof (state)\nthis:\n  robdd_\\<alpha> r (?a2(v := True)) \\<noteq>\n  robdd_\\<alpha> r (?a2(v := False)) \\<Longrightarrow>\n  robdd_\\<alpha> r (?a2(v' := False, v := True)) \\<noteq>\n  robdd_\\<alpha> r (?a2(v' := False, v := False))\n\ngoal (1 subgoal):\n 1. \\<not> robdd_depends_on_var v l \\<Longrightarrow>\n    robdd_depends_on_var v (robdd_var i l v' r) =\n    (v = v' \\<or> robdd_depends_on_var v l \\<or> robdd_depends_on_var v r)", "thus ?thesis"], ["proof (prove)\nusing this:\n  robdd_\\<alpha> r (?a2(v := True)) \\<noteq>\n  robdd_\\<alpha> r (?a2(v := False)) \\<Longrightarrow>\n  robdd_\\<alpha> r (?a2(v' := False, v := True)) \\<noteq>\n  robdd_\\<alpha> r (?a2(v' := False, v := False))\n\ngoal (1 subgoal):\n 1. robdd_depends_on_var v (robdd_var i l v' r) =\n    (v = v' \\<or> robdd_depends_on_var v l \\<or> robdd_depends_on_var v r)", "unfolding robdd_depends_on_var_def"], ["proof (prove)\nusing this:\n  robdd_\\<alpha> r (?a2(v := True)) \\<noteq>\n  robdd_\\<alpha> r (?a2(v := False)) \\<Longrightarrow>\n  robdd_\\<alpha> r (?a2(v' := False, v := True)) \\<noteq>\n  robdd_\\<alpha> r (?a2(v' := False, v := False))\n\ngoal (1 subgoal):\n 1. (\\<exists>a.\n        robdd_\\<alpha> (robdd_var i l v' r) (a(v := True)) \\<noteq>\n        robdd_\\<alpha> (robdd_var i l v' r) (a(v := False))) =\n    (v = v' \\<or>\n     (\\<exists>a.\n         robdd_\\<alpha> l (a(v := True)) \\<noteq>\n         robdd_\\<alpha> l (a(v := False))) \\<or>\n     (\\<exists>a.\n         robdd_\\<alpha> r (a(v := True)) \\<noteq>\n         robdd_\\<alpha> r (a(v := False))))", "apply (simp add: v_neq[symmetric] v_neq l_simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>a.\n        robdd_\\<alpha> r (a(v := True)) =\n        (\\<not> robdd_\\<alpha> r (a(v := False))) \\<Longrightarrow>\n        robdd_\\<alpha> r (a(v' := False, v := True)) =\n        (\\<not> robdd_\\<alpha> r\n                 (a(v' := False, v := False)))) \\<Longrightarrow>\n    (\\<exists>a.\n        \\<not> a v' \\<and>\n        robdd_\\<alpha> r (a(v := True)) =\n        (\\<not> robdd_\\<alpha> r (a(v := False)))) =\n    (\\<exists>a.\n        robdd_\\<alpha> r (a(v := True)) =\n        (\\<not> robdd_\\<alpha> r (a(v := False))))", "by (metis fun_upd_same)"], ["proof (state)\nthis:\n  robdd_depends_on_var v (robdd_var i l v' r) =\n  (v = v' \\<or> robdd_depends_on_var v l \\<or> robdd_depends_on_var v r)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  robdd_depends_on_var v (robdd_var i l v' r) =\n  (v = v' \\<or> robdd_depends_on_var v l \\<or> robdd_depends_on_var v r)\n\ngoal:\nNo subgoals!", "qed"], ["", "primrec robdd_used_vars where\n   \"robdd_used_vars (robdd_leaf f) = {}\"\n | \"robdd_used_vars (robdd_var i l v r) = robdd_used_vars l \\<union> {v} \\<union> robdd_used_vars r\""], ["", "lemma robdd_depends_on_var_eq_used :\n  \"robdd_invar b \\<Longrightarrow>\n   robdd_depends_on_var v b \\<longleftrightarrow> v \\<in> robdd_used_vars b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. robdd_invar b \\<Longrightarrow>\n    robdd_depends_on_var v b = (v \\<in> robdd_used_vars b)", "proof (induct b)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x.\n       robdd_invar (robdd_leaf x) \\<Longrightarrow>\n       robdd_depends_on_var v (robdd_leaf x) =\n       (v \\<in> robdd_used_vars (robdd_leaf x))\n 2. \\<And>x1a b1 x3 b2.\n       \\<lbrakk>robdd_invar b1 \\<Longrightarrow>\n                robdd_depends_on_var v b1 = (v \\<in> robdd_used_vars b1);\n        robdd_invar b2 \\<Longrightarrow>\n        robdd_depends_on_var v b2 = (v \\<in> robdd_used_vars b2);\n        robdd_invar (robdd_var x1a b1 x3 b2)\\<rbrakk>\n       \\<Longrightarrow> robdd_depends_on_var v (robdd_var x1a b1 x3 b2) =\n                         (v \\<in> robdd_used_vars (robdd_var x1a b1 x3 b2))", "case (robdd_leaf f)"], ["proof (state)\nthis:\n  robdd_invar (robdd_leaf f)\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       robdd_invar (robdd_leaf x) \\<Longrightarrow>\n       robdd_depends_on_var v (robdd_leaf x) =\n       (v \\<in> robdd_used_vars (robdd_leaf x))\n 2. \\<And>x1a b1 x3 b2.\n       \\<lbrakk>robdd_invar b1 \\<Longrightarrow>\n                robdd_depends_on_var v b1 = (v \\<in> robdd_used_vars b1);\n        robdd_invar b2 \\<Longrightarrow>\n        robdd_depends_on_var v b2 = (v \\<in> robdd_used_vars b2);\n        robdd_invar (robdd_var x1a b1 x3 b2)\\<rbrakk>\n       \\<Longrightarrow> robdd_depends_on_var v (robdd_var x1a b1 x3 b2) =\n                         (v \\<in> robdd_used_vars (robdd_var x1a b1 x3 b2))", "thus ?case"], ["proof (prove)\nusing this:\n  robdd_invar (robdd_leaf f)\n\ngoal (1 subgoal):\n 1. robdd_depends_on_var v (robdd_leaf f) =\n    (v \\<in> robdd_used_vars (robdd_leaf f))", "by (simp add: robdd_depends_on_var_def)"], ["proof (state)\nthis:\n  robdd_depends_on_var v (robdd_leaf f) =\n  (v \\<in> robdd_used_vars (robdd_leaf f))\n\ngoal (1 subgoal):\n 1. \\<And>x1a b1 x3 b2.\n       \\<lbrakk>robdd_invar b1 \\<Longrightarrow>\n                robdd_depends_on_var v b1 = (v \\<in> robdd_used_vars b1);\n        robdd_invar b2 \\<Longrightarrow>\n        robdd_depends_on_var v b2 = (v \\<in> robdd_used_vars b2);\n        robdd_invar (robdd_var x1a b1 x3 b2)\\<rbrakk>\n       \\<Longrightarrow> robdd_depends_on_var v (robdd_var x1a b1 x3 b2) =\n                         (v \\<in> robdd_used_vars (robdd_var x1a b1 x3 b2))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x1a b1 x3 b2.\n       \\<lbrakk>robdd_invar b1 \\<Longrightarrow>\n                robdd_depends_on_var v b1 = (v \\<in> robdd_used_vars b1);\n        robdd_invar b2 \\<Longrightarrow>\n        robdd_depends_on_var v b2 = (v \\<in> robdd_used_vars b2);\n        robdd_invar (robdd_var x1a b1 x3 b2)\\<rbrakk>\n       \\<Longrightarrow> robdd_depends_on_var v (robdd_var x1a b1 x3 b2) =\n                         (v \\<in> robdd_used_vars (robdd_var x1a b1 x3 b2))", "case (robdd_var i l v' r)"], ["proof (state)\nthis:\n  robdd_invar l \\<Longrightarrow>\n  robdd_depends_on_var v l = (v \\<in> robdd_used_vars l)\n  robdd_invar r \\<Longrightarrow>\n  robdd_depends_on_var v r = (v \\<in> robdd_used_vars r)\n  robdd_invar (robdd_var i l v' r)\n\ngoal (1 subgoal):\n 1. \\<And>x1a b1 x3 b2.\n       \\<lbrakk>robdd_invar b1 \\<Longrightarrow>\n                robdd_depends_on_var v b1 = (v \\<in> robdd_used_vars b1);\n        robdd_invar b2 \\<Longrightarrow>\n        robdd_depends_on_var v b2 = (v \\<in> robdd_used_vars b2);\n        robdd_invar (robdd_var x1a b1 x3 b2)\\<rbrakk>\n       \\<Longrightarrow> robdd_depends_on_var v (robdd_var x1a b1 x3 b2) =\n                         (v \\<in> robdd_used_vars (robdd_var x1a b1 x3 b2))", "note indhyp_l = robdd_var(1)"], ["proof (state)\nthis:\n  robdd_invar l \\<Longrightarrow>\n  robdd_depends_on_var v l = (v \\<in> robdd_used_vars l)\n\ngoal (1 subgoal):\n 1. \\<And>x1a b1 x3 b2.\n       \\<lbrakk>robdd_invar b1 \\<Longrightarrow>\n                robdd_depends_on_var v b1 = (v \\<in> robdd_used_vars b1);\n        robdd_invar b2 \\<Longrightarrow>\n        robdd_depends_on_var v b2 = (v \\<in> robdd_used_vars b2);\n        robdd_invar (robdd_var x1a b1 x3 b2)\\<rbrakk>\n       \\<Longrightarrow> robdd_depends_on_var v (robdd_var x1a b1 x3 b2) =\n                         (v \\<in> robdd_used_vars (robdd_var x1a b1 x3 b2))", "note indhyp_r = robdd_var(2)"], ["proof (state)\nthis:\n  robdd_invar r \\<Longrightarrow>\n  robdd_depends_on_var v r = (v \\<in> robdd_used_vars r)\n\ngoal (1 subgoal):\n 1. \\<And>x1a b1 x3 b2.\n       \\<lbrakk>robdd_invar b1 \\<Longrightarrow>\n                robdd_depends_on_var v b1 = (v \\<in> robdd_used_vars b1);\n        robdd_invar b2 \\<Longrightarrow>\n        robdd_depends_on_var v b2 = (v \\<in> robdd_used_vars b2);\n        robdd_invar (robdd_var x1a b1 x3 b2)\\<rbrakk>\n       \\<Longrightarrow> robdd_depends_on_var v (robdd_var x1a b1 x3 b2) =\n                         (v \\<in> robdd_used_vars (robdd_var x1a b1 x3 b2))", "note invar_b = robdd_var(3)"], ["proof (state)\nthis:\n  robdd_invar (robdd_var i l v' r)\n\ngoal (1 subgoal):\n 1. \\<And>x1a b1 x3 b2.\n       \\<lbrakk>robdd_invar b1 \\<Longrightarrow>\n                robdd_depends_on_var v b1 = (v \\<in> robdd_used_vars b1);\n        robdd_invar b2 \\<Longrightarrow>\n        robdd_depends_on_var v b2 = (v \\<in> robdd_used_vars b2);\n        robdd_invar (robdd_var x1a b1 x3 b2)\\<rbrakk>\n       \\<Longrightarrow> robdd_depends_on_var v (robdd_var x1a b1 x3 b2) =\n                         (v \\<in> robdd_used_vars (robdd_var x1a b1 x3 b2))", "from invar_b"], ["proof (chain)\npicking this:\n  robdd_invar (robdd_var i l v' r)", "have invar_l: \"robdd_invar l\" and invar_r: \"robdd_invar r\""], ["proof (prove)\nusing this:\n  robdd_invar (robdd_var i l v' r)\n\ngoal (1 subgoal):\n 1. robdd_invar l &&& robdd_invar r", "by (metis robdd_invar_simps_var)+"], ["proof (state)\nthis:\n  robdd_invar l\n  robdd_invar r\n\ngoal (1 subgoal):\n 1. \\<And>x1a b1 x3 b2.\n       \\<lbrakk>robdd_invar b1 \\<Longrightarrow>\n                robdd_depends_on_var v b1 = (v \\<in> robdd_used_vars b1);\n        robdd_invar b2 \\<Longrightarrow>\n        robdd_depends_on_var v b2 = (v \\<in> robdd_used_vars b2);\n        robdd_invar (robdd_var x1a b1 x3 b2)\\<rbrakk>\n       \\<Longrightarrow> robdd_depends_on_var v (robdd_var x1a b1 x3 b2) =\n                         (v \\<in> robdd_used_vars (robdd_var x1a b1 x3 b2))", "from robbd_depends_on_var_var[OF invar_b, of v] indhyp_l[OF invar_l] indhyp_r[OF invar_r]"], ["proof (chain)\npicking this:\n  robdd_depends_on_var v (robdd_var i l v' r) =\n  (v = v' \\<or> robdd_depends_on_var v l \\<or> robdd_depends_on_var v r)\n  robdd_depends_on_var v l = (v \\<in> robdd_used_vars l)\n  robdd_depends_on_var v r = (v \\<in> robdd_used_vars r)", "show ?case"], ["proof (prove)\nusing this:\n  robdd_depends_on_var v (robdd_var i l v' r) =\n  (v = v' \\<or> robdd_depends_on_var v l \\<or> robdd_depends_on_var v r)\n  robdd_depends_on_var v l = (v \\<in> robdd_used_vars l)\n  robdd_depends_on_var v r = (v \\<in> robdd_used_vars r)\n\ngoal (1 subgoal):\n 1. robdd_depends_on_var v (robdd_var i l v' r) =\n    (v \\<in> robdd_used_vars (robdd_var i l v' r))", "by simp"], ["proof (state)\nthis:\n  robdd_depends_on_var v (robdd_var i l v' r) =\n  (v \\<in> robdd_used_vars (robdd_var i l v' r))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma robdd_depends_on_var_implies_used :\n  \"robdd_depends_on_var v b \\<Longrightarrow> v \\<in> robdd_used_vars b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. robdd_depends_on_var v b \\<Longrightarrow> v \\<in> robdd_used_vars b", "apply (induct b)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       robdd_depends_on_var v (robdd_leaf x) \\<Longrightarrow>\n       v \\<in> robdd_used_vars (robdd_leaf x)\n 2. \\<And>x1a b1 x3 b2.\n       \\<lbrakk>robdd_depends_on_var v b1 \\<Longrightarrow>\n                v \\<in> robdd_used_vars b1;\n        robdd_depends_on_var v b2 \\<Longrightarrow>\n        v \\<in> robdd_used_vars b2;\n        robdd_depends_on_var v (robdd_var x1a b1 x3 b2)\\<rbrakk>\n       \\<Longrightarrow> v \\<in> robdd_used_vars (robdd_var x1a b1 x3 b2)", "apply (simp_all)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x1a b1 x3 b2.\n       \\<lbrakk>robdd_depends_on_var v b1 \\<Longrightarrow>\n                v \\<in> robdd_used_vars b1;\n        robdd_depends_on_var v b2 \\<Longrightarrow>\n        v \\<in> robdd_used_vars b2;\n        robdd_depends_on_var v (robdd_var x1a b1 x3 b2)\\<rbrakk>\n       \\<Longrightarrow> v = x3 \\<or>\n                         v \\<in> robdd_used_vars b1 \\<or>\n                         v \\<in> robdd_used_vars b2", "apply (metis robbd_depends_on_var_var_impl1)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "subsection \\<open>Inverse Map\\<close>"], ["", "text \\<open>If the invariant for ids is satisfied, one can find a find a unique mapping between ids\nand ROBDDs.\\<close>"], ["", "definition robdd_id_map_OK where\n   \"robdd_id_map_OK bs m \\<longleftrightarrow> (\\<forall>b \\<in> subrobdds_set bs. m (robdd_get_id b) = Some b)\""], ["", "lemma robdd_id_map_OK_D :\n  \"\\<lbrakk>robdd_id_map_OK bs m; b \\<in> subrobdds_set bs\\<rbrakk> \\<Longrightarrow> m (robdd_get_id b) = Some b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>robdd_id_map_OK bs m; b \\<in> subrobdds_set bs\\<rbrakk>\n    \\<Longrightarrow> m (robdd_get_id b) = Some b", "unfolding robdd_id_map_OK_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>b\\<in>subrobdds_set bs. m (robdd_get_id b) = Some b;\n     b \\<in> subrobdds_set bs\\<rbrakk>\n    \\<Longrightarrow> m (robdd_get_id b) = Some b", "by blast"], ["", "definition robdd_id_map where\n  \"robdd_id_map bs i = Eps_Opt (\\<lambda>b. b \\<in> subrobdds_set bs \\<and> robdd_get_id b = i)\""], ["", "lemma robdd_id_map_properties :\nshows \"robdd_invar_ids_equal bs \\<longleftrightarrow> (robdd_id_map_OK bs (robdd_id_map bs))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. robdd_invar_ids_equal bs = robdd_id_map_OK bs (robdd_id_map bs)", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. robdd_invar_ids_equal bs \\<Longrightarrow>\n    robdd_id_map_OK bs (robdd_id_map bs)\n 2. robdd_id_map_OK bs (robdd_id_map bs) \\<Longrightarrow>\n    robdd_invar_ids_equal bs", "assume ids_strong: \"robdd_invar_ids_equal bs\""], ["proof (state)\nthis:\n  robdd_invar_ids_equal bs\n\ngoal (2 subgoals):\n 1. robdd_invar_ids_equal bs \\<Longrightarrow>\n    robdd_id_map_OK bs (robdd_id_map bs)\n 2. robdd_id_map_OK bs (robdd_id_map bs) \\<Longrightarrow>\n    robdd_invar_ids_equal bs", "{"], ["proof (state)\nthis:\n  robdd_invar_ids_equal bs\n\ngoal (2 subgoals):\n 1. robdd_invar_ids_equal bs \\<Longrightarrow>\n    robdd_id_map_OK bs (robdd_id_map bs)\n 2. robdd_id_map_OK bs (robdd_id_map bs) \\<Longrightarrow>\n    robdd_invar_ids_equal bs", "fix b1 b2"], ["proof (state)\ngoal (2 subgoals):\n 1. robdd_invar_ids_equal bs \\<Longrightarrow>\n    robdd_id_map_OK bs (robdd_id_map bs)\n 2. robdd_id_map_OK bs (robdd_id_map bs) \\<Longrightarrow>\n    robdd_invar_ids_equal bs", "assume \"b1 \\<in> subrobdds_set bs\""], ["proof (state)\nthis:\n  b1 \\<in> subrobdds_set bs\n\ngoal (2 subgoals):\n 1. robdd_invar_ids_equal bs \\<Longrightarrow>\n    robdd_id_map_OK bs (robdd_id_map bs)\n 2. robdd_id_map_OK bs (robdd_id_map bs) \\<Longrightarrow>\n    robdd_invar_ids_equal bs", "with ids_strong"], ["proof (chain)\npicking this:\n  robdd_invar_ids_equal bs\n  b1 \\<in> subrobdds_set bs", "have \"b2 \\<in> subrobdds_set bs \\<and> robdd_get_id b2 = robdd_get_id b1 \\<longleftrightarrow> b2 = b1\""], ["proof (prove)\nusing this:\n  robdd_invar_ids_equal bs\n  b1 \\<in> subrobdds_set bs\n\ngoal (1 subgoal):\n 1. (b2 \\<in> subrobdds_set bs \\<and> robdd_get_id b2 = robdd_get_id b1) =\n    (b2 = b1)", "unfolding robdd_invar_ids_equal_def"], ["proof (prove)\nusing this:\n  \\<forall>b1 b2.\n     b1 \\<in> subrobdds_set bs \\<and>\n     b2 \\<in> subrobdds_set bs \\<longrightarrow>\n     (robdd_get_id b1 = robdd_get_id b2) = (b1 = b2)\n  b1 \\<in> subrobdds_set bs\n\ngoal (1 subgoal):\n 1. (b2 \\<in> subrobdds_set bs \\<and> robdd_get_id b2 = robdd_get_id b1) =\n    (b2 = b1)", "by metis"], ["proof (state)\nthis:\n  (b2 \\<in> subrobdds_set bs \\<and> robdd_get_id b2 = robdd_get_id b1) =\n  (b2 = b1)\n\ngoal (2 subgoals):\n 1. robdd_invar_ids_equal bs \\<Longrightarrow>\n    robdd_id_map_OK bs (robdd_id_map bs)\n 2. robdd_id_map_OK bs (robdd_id_map bs) \\<Longrightarrow>\n    robdd_invar_ids_equal bs", "}"], ["proof (state)\nthis:\n  ?b1.2 \\<in> subrobdds_set bs \\<Longrightarrow>\n  (?b2.2 \\<in> subrobdds_set bs \\<and>\n   robdd_get_id ?b2.2 = robdd_get_id ?b1.2) =\n  (?b2.2 = ?b1.2)\n\ngoal (2 subgoals):\n 1. robdd_invar_ids_equal bs \\<Longrightarrow>\n    robdd_id_map_OK bs (robdd_id_map bs)\n 2. robdd_id_map_OK bs (robdd_id_map bs) \\<Longrightarrow>\n    robdd_invar_ids_equal bs", "thus \"robdd_id_map_OK bs (robdd_id_map bs)\""], ["proof (prove)\nusing this:\n  ?b1.2 \\<in> subrobdds_set bs \\<Longrightarrow>\n  (?b2.2 \\<in> subrobdds_set bs \\<and>\n   robdd_get_id ?b2.2 = robdd_get_id ?b1.2) =\n  (?b2.2 = ?b1.2)\n\ngoal (1 subgoal):\n 1. robdd_id_map_OK bs (robdd_id_map bs)", "unfolding robdd_id_map_OK_def robdd_id_map_def"], ["proof (prove)\nusing this:\n  ?b1.2 \\<in> subrobdds_set bs \\<Longrightarrow>\n  (?b2.2 \\<in> subrobdds_set bs \\<and>\n   robdd_get_id ?b2.2 = robdd_get_id ?b1.2) =\n  (?b2.2 = ?b1.2)\n\ngoal (1 subgoal):\n 1. \\<forall>b\\<in>subrobdds_set bs.\n       Eps_Opt\n        (\\<lambda>ba.\n            ba \\<in> subrobdds_set bs \\<and>\n            robdd_get_id ba = robdd_get_id b) =\n       Some b", "by simp"], ["proof (state)\nthis:\n  robdd_id_map_OK bs (robdd_id_map bs)\n\ngoal (1 subgoal):\n 1. robdd_id_map_OK bs (robdd_id_map bs) \\<Longrightarrow>\n    robdd_invar_ids_equal bs", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. robdd_id_map_OK bs (robdd_id_map bs) \\<Longrightarrow>\n    robdd_invar_ids_equal bs", "assume map_OK: \"robdd_id_map_OK bs (robdd_id_map bs)\""], ["proof (state)\nthis:\n  robdd_id_map_OK bs (robdd_id_map bs)\n\ngoal (1 subgoal):\n 1. robdd_id_map_OK bs (robdd_id_map bs) \\<Longrightarrow>\n    robdd_invar_ids_equal bs", "show \"robdd_invar_ids_equal bs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. robdd_invar_ids_equal bs", "unfolding robdd_invar_ids_equal_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>b1 b2.\n       b1 \\<in> subrobdds_set bs \\<and>\n       b2 \\<in> subrobdds_set bs \\<longrightarrow>\n       (robdd_get_id b1 = robdd_get_id b2) = (b1 = b2)", "proof (intro allI impI iffI, elim conjE)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>b1 b2.\n       \\<lbrakk>robdd_get_id b1 = robdd_get_id b2;\n        b1 \\<in> subrobdds_set bs; b2 \\<in> subrobdds_set bs\\<rbrakk>\n       \\<Longrightarrow> b1 = b2\n 2. \\<And>b1 b2.\n       \\<lbrakk>b1 \\<in> subrobdds_set bs \\<and> b2 \\<in> subrobdds_set bs;\n        b1 = b2\\<rbrakk>\n       \\<Longrightarrow> robdd_get_id b1 = robdd_get_id b2", "fix b1 b2"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>b1 b2.\n       \\<lbrakk>robdd_get_id b1 = robdd_get_id b2;\n        b1 \\<in> subrobdds_set bs; b2 \\<in> subrobdds_set bs\\<rbrakk>\n       \\<Longrightarrow> b1 = b2\n 2. \\<And>b1 b2.\n       \\<lbrakk>b1 \\<in> subrobdds_set bs \\<and> b2 \\<in> subrobdds_set bs;\n        b1 = b2\\<rbrakk>\n       \\<Longrightarrow> robdd_get_id b1 = robdd_get_id b2", "assume b1_in: \"b1 \\<in> subrobdds_set bs\""], ["proof (state)\nthis:\n  b1 \\<in> subrobdds_set bs\n\ngoal (2 subgoals):\n 1. \\<And>b1 b2.\n       \\<lbrakk>robdd_get_id b1 = robdd_get_id b2;\n        b1 \\<in> subrobdds_set bs; b2 \\<in> subrobdds_set bs\\<rbrakk>\n       \\<Longrightarrow> b1 = b2\n 2. \\<And>b1 b2.\n       \\<lbrakk>b1 \\<in> subrobdds_set bs \\<and> b2 \\<in> subrobdds_set bs;\n        b1 = b2\\<rbrakk>\n       \\<Longrightarrow> robdd_get_id b1 = robdd_get_id b2", "assume b2_in: \"b2 \\<in> subrobdds_set bs\""], ["proof (state)\nthis:\n  b2 \\<in> subrobdds_set bs\n\ngoal (2 subgoals):\n 1. \\<And>b1 b2.\n       \\<lbrakk>robdd_get_id b1 = robdd_get_id b2;\n        b1 \\<in> subrobdds_set bs; b2 \\<in> subrobdds_set bs\\<rbrakk>\n       \\<Longrightarrow> b1 = b2\n 2. \\<And>b1 b2.\n       \\<lbrakk>b1 \\<in> subrobdds_set bs \\<and> b2 \\<in> subrobdds_set bs;\n        b1 = b2\\<rbrakk>\n       \\<Longrightarrow> robdd_get_id b1 = robdd_get_id b2", "assume id_eq: \"robdd_get_id b1 = robdd_get_id b2\""], ["proof (state)\nthis:\n  robdd_get_id b1 = robdd_get_id b2\n\ngoal (2 subgoals):\n 1. \\<And>b1 b2.\n       \\<lbrakk>robdd_get_id b1 = robdd_get_id b2;\n        b1 \\<in> subrobdds_set bs; b2 \\<in> subrobdds_set bs\\<rbrakk>\n       \\<Longrightarrow> b1 = b2\n 2. \\<And>b1 b2.\n       \\<lbrakk>b1 \\<in> subrobdds_set bs \\<and> b2 \\<in> subrobdds_set bs;\n        b1 = b2\\<rbrakk>\n       \\<Longrightarrow> robdd_get_id b1 = robdd_get_id b2", "let ?P = \"\\<lambda>b b'. b' \\<in> subrobdds_set bs \\<and> robdd_get_id b' = robdd_get_id b\""], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>b1 b2.\n       \\<lbrakk>robdd_get_id b1 = robdd_get_id b2;\n        b1 \\<in> subrobdds_set bs; b2 \\<in> subrobdds_set bs\\<rbrakk>\n       \\<Longrightarrow> b1 = b2\n 2. \\<And>b1 b2.\n       \\<lbrakk>b1 \\<in> subrobdds_set bs \\<and> b2 \\<in> subrobdds_set bs;\n        b1 = b2\\<rbrakk>\n       \\<Longrightarrow> robdd_get_id b1 = robdd_get_id b2", "from map_OK b1_in b2_in"], ["proof (chain)\npicking this:\n  robdd_id_map_OK bs (robdd_id_map bs)\n  b1 \\<in> subrobdds_set bs\n  b2 \\<in> subrobdds_set bs", "have Eps_Opt_Eval: \"Eps_Opt (?P b1) = Some b1\"  \"Eps_Opt (?P b2) = Some b2\""], ["proof (prove)\nusing this:\n  robdd_id_map_OK bs (robdd_id_map bs)\n  b1 \\<in> subrobdds_set bs\n  b2 \\<in> subrobdds_set bs\n\ngoal (1 subgoal):\n 1. Eps_Opt\n     (\\<lambda>b'.\n         b' \\<in> subrobdds_set bs \\<and>\n         robdd_get_id b' = robdd_get_id b1) =\n    Some b1 &&&\n    Eps_Opt\n     (\\<lambda>b'.\n         b' \\<in> subrobdds_set bs \\<and>\n         robdd_get_id b' = robdd_get_id b2) =\n    Some b2", "unfolding robdd_id_map_OK_def robdd_id_map_def"], ["proof (prove)\nusing this:\n  \\<forall>b\\<in>subrobdds_set bs.\n     Eps_Opt\n      (\\<lambda>ba.\n          ba \\<in> subrobdds_set bs \\<and>\n          robdd_get_id ba = robdd_get_id b) =\n     Some b\n  b1 \\<in> subrobdds_set bs\n  b2 \\<in> subrobdds_set bs\n\ngoal (1 subgoal):\n 1. Eps_Opt\n     (\\<lambda>b'.\n         b' \\<in> subrobdds_set bs \\<and>\n         robdd_get_id b' = robdd_get_id b1) =\n    Some b1 &&&\n    Eps_Opt\n     (\\<lambda>b'.\n         b' \\<in> subrobdds_set bs \\<and>\n         robdd_get_id b' = robdd_get_id b2) =\n    Some b2", "by simp_all"], ["proof (state)\nthis:\n  Eps_Opt\n   (\\<lambda>b'.\n       b' \\<in> subrobdds_set bs \\<and> robdd_get_id b' = robdd_get_id b1) =\n  Some b1\n  Eps_Opt\n   (\\<lambda>b'.\n       b' \\<in> subrobdds_set bs \\<and> robdd_get_id b' = robdd_get_id b2) =\n  Some b2\n\ngoal (2 subgoals):\n 1. \\<And>b1 b2.\n       \\<lbrakk>robdd_get_id b1 = robdd_get_id b2;\n        b1 \\<in> subrobdds_set bs; b2 \\<in> subrobdds_set bs\\<rbrakk>\n       \\<Longrightarrow> b1 = b2\n 2. \\<And>b1 b2.\n       \\<lbrakk>b1 \\<in> subrobdds_set bs \\<and> b2 \\<in> subrobdds_set bs;\n        b1 = b2\\<rbrakk>\n       \\<Longrightarrow> robdd_get_id b1 = robdd_get_id b2", "from id_eq"], ["proof (chain)\npicking this:\n  robdd_get_id b1 = robdd_get_id b2", "have \"?P b1 = ?P b2\""], ["proof (prove)\nusing this:\n  robdd_get_id b1 = robdd_get_id b2\n\ngoal (1 subgoal):\n 1. (\\<lambda>b'.\n        b' \\<in> subrobdds_set bs \\<and>\n        robdd_get_id b' = robdd_get_id b1) =\n    (\\<lambda>b'.\n        b' \\<in> subrobdds_set bs \\<and> robdd_get_id b' = robdd_get_id b2)", "by simp"], ["proof (state)\nthis:\n  (\\<lambda>b'.\n      b' \\<in> subrobdds_set bs \\<and> robdd_get_id b' = robdd_get_id b1) =\n  (\\<lambda>b'.\n      b' \\<in> subrobdds_set bs \\<and> robdd_get_id b' = robdd_get_id b2)\n\ngoal (2 subgoals):\n 1. \\<And>b1 b2.\n       \\<lbrakk>robdd_get_id b1 = robdd_get_id b2;\n        b1 \\<in> subrobdds_set bs; b2 \\<in> subrobdds_set bs\\<rbrakk>\n       \\<Longrightarrow> b1 = b2\n 2. \\<And>b1 b2.\n       \\<lbrakk>b1 \\<in> subrobdds_set bs \\<and> b2 \\<in> subrobdds_set bs;\n        b1 = b2\\<rbrakk>\n       \\<Longrightarrow> robdd_get_id b1 = robdd_get_id b2", "with Eps_Opt_Eval"], ["proof (chain)\npicking this:\n  Eps_Opt\n   (\\<lambda>b'.\n       b' \\<in> subrobdds_set bs \\<and> robdd_get_id b' = robdd_get_id b1) =\n  Some b1\n  Eps_Opt\n   (\\<lambda>b'.\n       b' \\<in> subrobdds_set bs \\<and> robdd_get_id b' = robdd_get_id b2) =\n  Some b2\n  (\\<lambda>b'.\n      b' \\<in> subrobdds_set bs \\<and> robdd_get_id b' = robdd_get_id b1) =\n  (\\<lambda>b'.\n      b' \\<in> subrobdds_set bs \\<and> robdd_get_id b' = robdd_get_id b2)", "show \"b1 = b2\""], ["proof (prove)\nusing this:\n  Eps_Opt\n   (\\<lambda>b'.\n       b' \\<in> subrobdds_set bs \\<and> robdd_get_id b' = robdd_get_id b1) =\n  Some b1\n  Eps_Opt\n   (\\<lambda>b'.\n       b' \\<in> subrobdds_set bs \\<and> robdd_get_id b' = robdd_get_id b2) =\n  Some b2\n  (\\<lambda>b'.\n      b' \\<in> subrobdds_set bs \\<and> robdd_get_id b' = robdd_get_id b1) =\n  (\\<lambda>b'.\n      b' \\<in> subrobdds_set bs \\<and> robdd_get_id b' = robdd_get_id b2)\n\ngoal (1 subgoal):\n 1. b1 = b2", "by (metis option.inject)"], ["proof (state)\nthis:\n  b1 = b2\n\ngoal (1 subgoal):\n 1. \\<And>b1 b2.\n       \\<lbrakk>b1 \\<in> subrobdds_set bs \\<and> b2 \\<in> subrobdds_set bs;\n        b1 = b2\\<rbrakk>\n       \\<Longrightarrow> robdd_get_id b1 = robdd_get_id b2", "qed simp"], ["proof (state)\nthis:\n  robdd_invar_ids_equal bs\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma robdd_id_map_union :\nassumes invar_ids_bs12: \"robdd_invar_ids_equal (bs1 \\<union> bs2)\"\nshows \"robdd_id_map (bs1 \\<union> bs2) = (robdd_id_map bs1) ++ (robdd_id_map bs2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. robdd_id_map (bs1 \\<union> bs2) = robdd_id_map bs1 ++ robdd_id_map bs2", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       robdd_id_map (bs1 \\<union> bs2) x =\n       (robdd_id_map bs1 ++ robdd_id_map bs2) x", "fix i"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       robdd_id_map (bs1 \\<union> bs2) x =\n       (robdd_id_map bs1 ++ robdd_id_map bs2) x", "from invar_ids_bs12"], ["proof (chain)\npicking this:\n  robdd_invar_ids_equal (bs1 \\<union> bs2)", "have invar_ids_bs1: \"robdd_invar_ids_equal bs1\" \n   and invar_ids_bs2: \"robdd_invar_ids_equal bs2\""], ["proof (prove)\nusing this:\n  robdd_invar_ids_equal (bs1 \\<union> bs2)\n\ngoal (1 subgoal):\n 1. robdd_invar_ids_equal bs1 &&& robdd_invar_ids_equal bs2", "unfolding robdd_invar_ids_equal_def"], ["proof (prove)\nusing this:\n  \\<forall>b1 b2.\n     b1 \\<in> subrobdds_set (bs1 \\<union> bs2) \\<and>\n     b2 \\<in> subrobdds_set (bs1 \\<union> bs2) \\<longrightarrow>\n     (robdd_get_id b1 = robdd_get_id b2) = (b1 = b2)\n\ngoal (1 subgoal):\n 1. \\<forall>b1 b2.\n       b1 \\<in> subrobdds_set bs1 \\<and>\n       b2 \\<in> subrobdds_set bs1 \\<longrightarrow>\n       (robdd_get_id b1 = robdd_get_id b2) = (b1 = b2) &&&\n    \\<forall>b1 b2.\n       b1 \\<in> subrobdds_set bs2 \\<and>\n       b2 \\<in> subrobdds_set bs2 \\<longrightarrow>\n       (robdd_get_id b1 = robdd_get_id b2) = (b1 = b2)", "by auto"], ["proof (state)\nthis:\n  robdd_invar_ids_equal bs1\n  robdd_invar_ids_equal bs2\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       robdd_id_map (bs1 \\<union> bs2) x =\n       (robdd_id_map bs1 ++ robdd_id_map bs2) x", "from invar_ids_bs1 invar_ids_bs2 invar_ids_bs12 robdd_id_map_properties"], ["proof (chain)\npicking this:\n  robdd_invar_ids_equal bs1\n  robdd_invar_ids_equal bs2\n  robdd_invar_ids_equal (bs1 \\<union> bs2)\n  robdd_invar_ids_equal ?bs = robdd_id_map_OK ?bs (robdd_id_map ?bs)", "have map_OK_bs1: \"robdd_id_map_OK bs1 (robdd_id_map bs1)\"\n   and map_OK_bs2: \"robdd_id_map_OK bs2 (robdd_id_map bs2)\" \n   and map_OK_bs12: \"robdd_id_map_OK (bs1 \\<union> bs2) (robdd_id_map (bs1 \\<union> bs2))\""], ["proof (prove)\nusing this:\n  robdd_invar_ids_equal bs1\n  robdd_invar_ids_equal bs2\n  robdd_invar_ids_equal (bs1 \\<union> bs2)\n  robdd_invar_ids_equal ?bs = robdd_id_map_OK ?bs (robdd_id_map ?bs)\n\ngoal (1 subgoal):\n 1. robdd_id_map_OK bs1 (robdd_id_map bs1) &&&\n    robdd_id_map_OK bs2 (robdd_id_map bs2) &&&\n    robdd_id_map_OK (bs1 \\<union> bs2) (robdd_id_map (bs1 \\<union> bs2))", "by simp_all"], ["proof (state)\nthis:\n  robdd_id_map_OK bs1 (robdd_id_map bs1)\n  robdd_id_map_OK bs2 (robdd_id_map bs2)\n  robdd_id_map_OK (bs1 \\<union> bs2) (robdd_id_map (bs1 \\<union> bs2))\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       robdd_id_map (bs1 \\<union> bs2) x =\n       (robdd_id_map bs1 ++ robdd_id_map bs2) x", "show \"robdd_id_map (bs1 \\<union> bs2) i = (robdd_id_map bs1 ++ robdd_id_map bs2) i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. robdd_id_map (bs1 \\<union> bs2) i =\n    (robdd_id_map bs1 ++ robdd_id_map bs2) i", "proof (cases \"\\<exists>b. b \\<in> subrobdds_set (bs1 \\<union> bs2) \\<and> robdd_get_id b = i\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<exists>b.\n       b \\<in> subrobdds_set (bs1 \\<union> bs2) \\<and>\n       robdd_get_id b = i \\<Longrightarrow>\n    robdd_id_map (bs1 \\<union> bs2) i =\n    (robdd_id_map bs1 ++ robdd_id_map bs2) i\n 2. \\<nexists>b.\n       b \\<in> subrobdds_set (bs1 \\<union> bs2) \\<and>\n       robdd_get_id b = i \\<Longrightarrow>\n    robdd_id_map (bs1 \\<union> bs2) i =\n    (robdd_id_map bs1 ++ robdd_id_map bs2) i", "case False"], ["proof (state)\nthis:\n  \\<nexists>b.\n     b \\<in> subrobdds_set (bs1 \\<union> bs2) \\<and> robdd_get_id b = i\n\ngoal (2 subgoals):\n 1. \\<exists>b.\n       b \\<in> subrobdds_set (bs1 \\<union> bs2) \\<and>\n       robdd_get_id b = i \\<Longrightarrow>\n    robdd_id_map (bs1 \\<union> bs2) i =\n    (robdd_id_map bs1 ++ robdd_id_map bs2) i\n 2. \\<nexists>b.\n       b \\<in> subrobdds_set (bs1 \\<union> bs2) \\<and>\n       robdd_get_id b = i \\<Longrightarrow>\n    robdd_id_map (bs1 \\<union> bs2) i =\n    (robdd_id_map bs1 ++ robdd_id_map bs2) i", "hence \"robdd_id_map (bs1 \\<union> bs2) i = None\" and\n          \"robdd_id_map bs1 i = None\" and\n          \"robdd_id_map bs2 i = None\""], ["proof (prove)\nusing this:\n  \\<nexists>b.\n     b \\<in> subrobdds_set (bs1 \\<union> bs2) \\<and> robdd_get_id b = i\n\ngoal (1 subgoal):\n 1. robdd_id_map (bs1 \\<union> bs2) i = None &&&\n    robdd_id_map bs1 i = None &&& robdd_id_map bs2 i = None", "unfolding robdd_id_map_def Eps_Opt_eq_None"], ["proof (prove)\nusing this:\n  \\<nexists>b.\n     b \\<in> subrobdds_set (bs1 \\<union> bs2) \\<and> robdd_get_id b = i\n\ngoal (1 subgoal):\n 1. \\<nexists>b.\n       b \\<in> subrobdds_set (bs1 \\<union> bs2) \\<and>\n       robdd_get_id b = i &&&\n    \\<nexists>b. b \\<in> subrobdds_set bs1 \\<and> robdd_get_id b = i &&&\n    \\<nexists>b. b \\<in> subrobdds_set bs2 \\<and> robdd_get_id b = i", "by auto"], ["proof (state)\nthis:\n  robdd_id_map (bs1 \\<union> bs2) i = None\n  robdd_id_map bs1 i = None\n  robdd_id_map bs2 i = None\n\ngoal (2 subgoals):\n 1. \\<exists>b.\n       b \\<in> subrobdds_set (bs1 \\<union> bs2) \\<and>\n       robdd_get_id b = i \\<Longrightarrow>\n    robdd_id_map (bs1 \\<union> bs2) i =\n    (robdd_id_map bs1 ++ robdd_id_map bs2) i\n 2. \\<nexists>b.\n       b \\<in> subrobdds_set (bs1 \\<union> bs2) \\<and>\n       robdd_get_id b = i \\<Longrightarrow>\n    robdd_id_map (bs1 \\<union> bs2) i =\n    (robdd_id_map bs1 ++ robdd_id_map bs2) i", "thus ?thesis"], ["proof (prove)\nusing this:\n  robdd_id_map (bs1 \\<union> bs2) i = None\n  robdd_id_map bs1 i = None\n  robdd_id_map bs2 i = None\n\ngoal (1 subgoal):\n 1. robdd_id_map (bs1 \\<union> bs2) i =\n    (robdd_id_map bs1 ++ robdd_id_map bs2) i", "by (simp add: map_add_find_left)"], ["proof (state)\nthis:\n  robdd_id_map (bs1 \\<union> bs2) i =\n  (robdd_id_map bs1 ++ robdd_id_map bs2) i\n\ngoal (1 subgoal):\n 1. \\<exists>b.\n       b \\<in> subrobdds_set (bs1 \\<union> bs2) \\<and>\n       robdd_get_id b = i \\<Longrightarrow>\n    robdd_id_map (bs1 \\<union> bs2) i =\n    (robdd_id_map bs1 ++ robdd_id_map bs2) i", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>b.\n       b \\<in> subrobdds_set (bs1 \\<union> bs2) \\<and>\n       robdd_get_id b = i \\<Longrightarrow>\n    robdd_id_map (bs1 \\<union> bs2) i =\n    (robdd_id_map bs1 ++ robdd_id_map bs2) i", "case True"], ["proof (state)\nthis:\n  \\<exists>b.\n     b \\<in> subrobdds_set (bs1 \\<union> bs2) \\<and> robdd_get_id b = i\n\ngoal (1 subgoal):\n 1. \\<exists>b.\n       b \\<in> subrobdds_set (bs1 \\<union> bs2) \\<and>\n       robdd_get_id b = i \\<Longrightarrow>\n    robdd_id_map (bs1 \\<union> bs2) i =\n    (robdd_id_map bs1 ++ robdd_id_map bs2) i", "then"], ["proof (chain)\npicking this:\n  \\<exists>b.\n     b \\<in> subrobdds_set (bs1 \\<union> bs2) \\<and> robdd_get_id b = i", "obtain b where \n        b_in: \"b \\<in> subrobdds_set (bs1 \\<union> bs2)\" \n    and b_id: \"robdd_get_id b = i\""], ["proof (prove)\nusing this:\n  \\<exists>b.\n     b \\<in> subrobdds_set (bs1 \\<union> bs2) \\<and> robdd_get_id b = i\n\ngoal (1 subgoal):\n 1. (\\<And>b.\n        \\<lbrakk>b \\<in> subrobdds_set (bs1 \\<union> bs2);\n         robdd_get_id b = i\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  b \\<in> subrobdds_set (bs1 \\<union> bs2)\n  robdd_get_id b = i\n\ngoal (1 subgoal):\n 1. \\<exists>b.\n       b \\<in> subrobdds_set (bs1 \\<union> bs2) \\<and>\n       robdd_get_id b = i \\<Longrightarrow>\n    robdd_id_map (bs1 \\<union> bs2) i =\n    (robdd_id_map bs1 ++ robdd_id_map bs2) i", "from map_OK_bs12 b_in b_id"], ["proof (chain)\npicking this:\n  robdd_id_map_OK (bs1 \\<union> bs2) (robdd_id_map (bs1 \\<union> bs2))\n  b \\<in> subrobdds_set (bs1 \\<union> bs2)\n  robdd_get_id b = i", "have ls_eq: \"robdd_id_map (bs1 \\<union> bs2) i = Some b\""], ["proof (prove)\nusing this:\n  robdd_id_map_OK (bs1 \\<union> bs2) (robdd_id_map (bs1 \\<union> bs2))\n  b \\<in> subrobdds_set (bs1 \\<union> bs2)\n  robdd_get_id b = i\n\ngoal (1 subgoal):\n 1. robdd_id_map (bs1 \\<union> bs2) i = Some b", "unfolding robdd_id_map_OK_def"], ["proof (prove)\nusing this:\n  \\<forall>b\\<in>subrobdds_set (bs1 \\<union> bs2).\n     robdd_id_map (bs1 \\<union> bs2) (robdd_get_id b) = Some b\n  b \\<in> subrobdds_set (bs1 \\<union> bs2)\n  robdd_get_id b = i\n\ngoal (1 subgoal):\n 1. robdd_id_map (bs1 \\<union> bs2) i = Some b", "by metis"], ["proof (state)\nthis:\n  robdd_id_map (bs1 \\<union> bs2) i = Some b\n\ngoal (1 subgoal):\n 1. \\<exists>b.\n       b \\<in> subrobdds_set (bs1 \\<union> bs2) \\<and>\n       robdd_get_id b = i \\<Longrightarrow>\n    robdd_id_map (bs1 \\<union> bs2) i =\n    (robdd_id_map bs1 ++ robdd_id_map bs2) i", "have rs_eq: \"(robdd_id_map bs1 ++ robdd_id_map bs2) i = Some b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (robdd_id_map bs1 ++ robdd_id_map bs2) i = Some b", "proof (cases \"b \\<in> subrobdds_set bs2\")"], ["proof (state)\ngoal (2 subgoals):\n 1. b \\<in> subrobdds_set bs2 \\<Longrightarrow>\n    (robdd_id_map bs1 ++ robdd_id_map bs2) i = Some b\n 2. b \\<notin> subrobdds_set bs2 \\<Longrightarrow>\n    (robdd_id_map bs1 ++ robdd_id_map bs2) i = Some b", "case True"], ["proof (state)\nthis:\n  b \\<in> subrobdds_set bs2\n\ngoal (2 subgoals):\n 1. b \\<in> subrobdds_set bs2 \\<Longrightarrow>\n    (robdd_id_map bs1 ++ robdd_id_map bs2) i = Some b\n 2. b \\<notin> subrobdds_set bs2 \\<Longrightarrow>\n    (robdd_id_map bs1 ++ robdd_id_map bs2) i = Some b", "with map_OK_bs2 b_id"], ["proof (chain)\npicking this:\n  robdd_id_map_OK bs2 (robdd_id_map bs2)\n  robdd_get_id b = i\n  b \\<in> subrobdds_set bs2", "have rs_eq2: \"robdd_id_map bs2 i = Some b\""], ["proof (prove)\nusing this:\n  robdd_id_map_OK bs2 (robdd_id_map bs2)\n  robdd_get_id b = i\n  b \\<in> subrobdds_set bs2\n\ngoal (1 subgoal):\n 1. robdd_id_map bs2 i = Some b", "unfolding robdd_id_map_OK_def"], ["proof (prove)\nusing this:\n  \\<forall>b\\<in>subrobdds_set bs2.\n     robdd_id_map bs2 (robdd_get_id b) = Some b\n  robdd_get_id b = i\n  b \\<in> subrobdds_set bs2\n\ngoal (1 subgoal):\n 1. robdd_id_map bs2 i = Some b", "by metis"], ["proof (state)\nthis:\n  robdd_id_map bs2 i = Some b\n\ngoal (2 subgoals):\n 1. b \\<in> subrobdds_set bs2 \\<Longrightarrow>\n    (robdd_id_map bs1 ++ robdd_id_map bs2) i = Some b\n 2. b \\<notin> subrobdds_set bs2 \\<Longrightarrow>\n    (robdd_id_map bs1 ++ robdd_id_map bs2) i = Some b", "from ls_eq rs_eq2"], ["proof (chain)\npicking this:\n  robdd_id_map (bs1 \\<union> bs2) i = Some b\n  robdd_id_map bs2 i = Some b", "show ?thesis"], ["proof (prove)\nusing this:\n  robdd_id_map (bs1 \\<union> bs2) i = Some b\n  robdd_id_map bs2 i = Some b\n\ngoal (1 subgoal):\n 1. (robdd_id_map bs1 ++ robdd_id_map bs2) i = Some b", "by simp"], ["proof (state)\nthis:\n  (robdd_id_map bs1 ++ robdd_id_map bs2) i = Some b\n\ngoal (1 subgoal):\n 1. b \\<notin> subrobdds_set bs2 \\<Longrightarrow>\n    (robdd_id_map bs1 ++ robdd_id_map bs2) i = Some b", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. b \\<notin> subrobdds_set bs2 \\<Longrightarrow>\n    (robdd_id_map bs1 ++ robdd_id_map bs2) i = Some b", "case False"], ["proof (state)\nthis:\n  b \\<notin> subrobdds_set bs2\n\ngoal (1 subgoal):\n 1. b \\<notin> subrobdds_set bs2 \\<Longrightarrow>\n    (robdd_id_map bs1 ++ robdd_id_map bs2) i = Some b", "note b_nin_bs2 = this"], ["proof (state)\nthis:\n  b \\<notin> subrobdds_set bs2\n\ngoal (1 subgoal):\n 1. b \\<notin> subrobdds_set bs2 \\<Longrightarrow>\n    (robdd_id_map bs1 ++ robdd_id_map bs2) i = Some b", "from b_in b_nin_bs2"], ["proof (chain)\npicking this:\n  b \\<in> subrobdds_set (bs1 \\<union> bs2)\n  b \\<notin> subrobdds_set bs2", "have \"b \\<in> subrobdds_set bs1\""], ["proof (prove)\nusing this:\n  b \\<in> subrobdds_set (bs1 \\<union> bs2)\n  b \\<notin> subrobdds_set bs2\n\ngoal (1 subgoal):\n 1. b \\<in> subrobdds_set bs1", "by simp"], ["proof (state)\nthis:\n  b \\<in> subrobdds_set bs1\n\ngoal (1 subgoal):\n 1. b \\<notin> subrobdds_set bs2 \\<Longrightarrow>\n    (robdd_id_map bs1 ++ robdd_id_map bs2) i = Some b", "with map_OK_bs1 b_id"], ["proof (chain)\npicking this:\n  robdd_id_map_OK bs1 (robdd_id_map bs1)\n  robdd_get_id b = i\n  b \\<in> subrobdds_set bs1", "have rs_eq1: \"robdd_id_map bs1 i = Some b\""], ["proof (prove)\nusing this:\n  robdd_id_map_OK bs1 (robdd_id_map bs1)\n  robdd_get_id b = i\n  b \\<in> subrobdds_set bs1\n\ngoal (1 subgoal):\n 1. robdd_id_map bs1 i = Some b", "unfolding robdd_id_map_OK_def"], ["proof (prove)\nusing this:\n  \\<forall>b\\<in>subrobdds_set bs1.\n     robdd_id_map bs1 (robdd_get_id b) = Some b\n  robdd_get_id b = i\n  b \\<in> subrobdds_set bs1\n\ngoal (1 subgoal):\n 1. robdd_id_map bs1 i = Some b", "by metis"], ["proof (state)\nthis:\n  robdd_id_map bs1 i = Some b\n\ngoal (1 subgoal):\n 1. b \\<notin> subrobdds_set bs2 \\<Longrightarrow>\n    (robdd_id_map bs1 ++ robdd_id_map bs2) i = Some b", "from invar_ids_bs12 b_in b_nin_bs2 b_id"], ["proof (chain)\npicking this:\n  robdd_invar_ids_equal (bs1 \\<union> bs2)\n  b \\<in> subrobdds_set (bs1 \\<union> bs2)\n  b \\<notin> subrobdds_set bs2\n  robdd_get_id b = i", "have \"\\<And>b'. b' \\<in> subrobdds_set bs2 \\<Longrightarrow> robdd_get_id b' \\<noteq> i\""], ["proof (prove)\nusing this:\n  robdd_invar_ids_equal (bs1 \\<union> bs2)\n  b \\<in> subrobdds_set (bs1 \\<union> bs2)\n  b \\<notin> subrobdds_set bs2\n  robdd_get_id b = i\n\ngoal (1 subgoal):\n 1. \\<And>b'.\n       b' \\<in> subrobdds_set bs2 \\<Longrightarrow>\n       robdd_get_id b' \\<noteq> i", "unfolding robdd_invar_ids_equal_def"], ["proof (prove)\nusing this:\n  \\<forall>b1 b2.\n     b1 \\<in> subrobdds_set (bs1 \\<union> bs2) \\<and>\n     b2 \\<in> subrobdds_set (bs1 \\<union> bs2) \\<longrightarrow>\n     (robdd_get_id b1 = robdd_get_id b2) = (b1 = b2)\n  b \\<in> subrobdds_set (bs1 \\<union> bs2)\n  b \\<notin> subrobdds_set bs2\n  robdd_get_id b = i\n\ngoal (1 subgoal):\n 1. \\<And>b'.\n       b' \\<in> subrobdds_set bs2 \\<Longrightarrow>\n       robdd_get_id b' \\<noteq> i", "by simp metis"], ["proof (state)\nthis:\n  ?b' \\<in> subrobdds_set bs2 \\<Longrightarrow> robdd_get_id ?b' \\<noteq> i\n\ngoal (1 subgoal):\n 1. b \\<notin> subrobdds_set bs2 \\<Longrightarrow>\n    (robdd_id_map bs1 ++ robdd_id_map bs2) i = Some b", "hence rs_eq2: \"robdd_id_map bs2 i = None\""], ["proof (prove)\nusing this:\n  ?b' \\<in> subrobdds_set bs2 \\<Longrightarrow> robdd_get_id ?b' \\<noteq> i\n\ngoal (1 subgoal):\n 1. robdd_id_map bs2 i = None", "unfolding robdd_id_map_def Eps_Opt_eq_None"], ["proof (prove)\nusing this:\n  ?b' \\<in> subrobdds_set bs2 \\<Longrightarrow> robdd_get_id ?b' \\<noteq> i\n\ngoal (1 subgoal):\n 1. \\<nexists>b. b \\<in> subrobdds_set bs2 \\<and> robdd_get_id b = i", "by auto"], ["proof (state)\nthis:\n  robdd_id_map bs2 i = None\n\ngoal (1 subgoal):\n 1. b \\<notin> subrobdds_set bs2 \\<Longrightarrow>\n    (robdd_id_map bs1 ++ robdd_id_map bs2) i = Some b", "from ls_eq rs_eq1 rs_eq2"], ["proof (chain)\npicking this:\n  robdd_id_map (bs1 \\<union> bs2) i = Some b\n  robdd_id_map bs1 i = Some b\n  robdd_id_map bs2 i = None", "show ?thesis"], ["proof (prove)\nusing this:\n  robdd_id_map (bs1 \\<union> bs2) i = Some b\n  robdd_id_map bs1 i = Some b\n  robdd_id_map bs2 i = None\n\ngoal (1 subgoal):\n 1. (robdd_id_map bs1 ++ robdd_id_map bs2) i = Some b", "by (simp add: map_add_find_left)"], ["proof (state)\nthis:\n  (robdd_id_map bs1 ++ robdd_id_map bs2) i = Some b\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (robdd_id_map bs1 ++ robdd_id_map bs2) i = Some b\n\ngoal (1 subgoal):\n 1. \\<exists>b.\n       b \\<in> subrobdds_set (bs1 \\<union> bs2) \\<and>\n       robdd_get_id b = i \\<Longrightarrow>\n    robdd_id_map (bs1 \\<union> bs2) i =\n    (robdd_id_map bs1 ++ robdd_id_map bs2) i", "from ls_eq rs_eq"], ["proof (chain)\npicking this:\n  robdd_id_map (bs1 \\<union> bs2) i = Some b\n  (robdd_id_map bs1 ++ robdd_id_map bs2) i = Some b", "show ?thesis"], ["proof (prove)\nusing this:\n  robdd_id_map (bs1 \\<union> bs2) i = Some b\n  (robdd_id_map bs1 ++ robdd_id_map bs2) i = Some b\n\ngoal (1 subgoal):\n 1. robdd_id_map (bs1 \\<union> bs2) i =\n    (robdd_id_map bs1 ++ robdd_id_map bs2) i", "by simp"], ["proof (state)\nthis:\n  robdd_id_map (bs1 \\<union> bs2) i =\n  (robdd_id_map bs1 ++ robdd_id_map bs2) i\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  robdd_id_map (bs1 \\<union> bs2) i =\n  (robdd_id_map bs1 ++ robdd_id_map bs2) i\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection \\<open>Extended Boolean Operations\\<close>"], ["", "text \\<open>For Boolean Operations on ROBDDs it is important to extend boolean operations\nto option types. This allows to get the information that the result of the operation does\nnot depend on the value of some arguments.\\<close>"], ["", "fun bool_op_extend :: \"(bool \\<Rightarrow> bool \\<Rightarrow> bool) \\<Rightarrow> \n                                (bool option \\<Rightarrow> bool option \\<Rightarrow> bool option)\" where\n    \"bool_op_extend bop None None =\n       (if ((bop True False = bop True True) \\<and> \n            (bop False True = bop True True) \\<and> \n            (bop False False = bop True True)) then Some (bop True True) else None)\" \n  | \"bool_op_extend bop None (Some b') = \n       (if (bop True b' \\<longleftrightarrow> bop False b') then Some (bop False b') else None)\"\n  | \"bool_op_extend bop (Some b) None =\n       (if (bop b True \\<longleftrightarrow> bop b False) then Some (bop b True) else None)\"\n  | \"bool_op_extend bop (Some b) (Some b') = Some (bop b b')\""], ["", "text \\<open>Common Operations\\<close>"], ["", "fun bope_neg where\n   \"bope_neg None = None\"\n | \"bope_neg (Some True) = Some False\"\n | \"bope_neg (Some False) = (Some True)\""], ["", "definition \"bope_and = bool_op_extend (\\<lambda>x y. x \\<and> y)\""], ["", "definition \"bope_or = bool_op_extend (\\<lambda>x y. x \\<or> y)\""], ["", "definition \"bope_nand = bool_op_extend (\\<lambda>x y. \\<not>(x \\<and> y))\""], ["", "definition \"bope_nor = bool_op_extend (\\<lambda>x y. \\<not>(x \\<or> y))\""], ["", "definition \"bope_xor = bool_op_extend (\\<lambda>x y. x \\<noteq> y)\""], ["", "definition \"bope_eq = bool_op_extend (\\<lambda>x y. x = y)\""], ["", "definition \"bope_imp = bool_op_extend (\\<lambda>x y. x \\<longrightarrow> y)\""], ["", "lemma bool_opt_exhaust:\n  \"(y = None \\<Longrightarrow> P) \\<Longrightarrow> (y = Some True \\<Longrightarrow> P) \\<Longrightarrow> (y = Some False \\<Longrightarrow> P) \\<Longrightarrow> P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>y = None \\<Longrightarrow> P;\n     y = Some True \\<Longrightarrow> P;\n     y = Some False \\<Longrightarrow> P\\<rbrakk>\n    \\<Longrightarrow> P", "by auto"], ["", "lemma bope_and_code [code] :\n   \"bope_and None None = None\"\n   \"bope_and bo (Some True) = bo\"\n   \"bope_and bo (Some False) = (Some False)\"\n   \"bope_and (Some True) bo = bo\"\n   \"bope_and (Some False) bo = (Some False)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (bope_and None None = None &&& bope_and bo (Some True) = bo) &&&\n    bope_and bo (Some False) = Some False &&&\n    bope_and (Some True) bo = bo &&& bope_and (Some False) bo = Some False", "unfolding bope_and_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (bool_op_extend (\\<and>) None None = None &&&\n     bool_op_extend (\\<and>) bo (Some True) = bo) &&&\n    bool_op_extend (\\<and>) bo (Some False) = Some False &&&\n    bool_op_extend (\\<and>) (Some True) bo = bo &&&\n    bool_op_extend (\\<and>) (Some False) bo = Some False", "apply (case_tac [!] bo  rule: bool_opt_exhaust)"], ["proof (prove)\ngoal (15 subgoals):\n 1. bo = None \\<Longrightarrow> bool_op_extend (\\<and>) None None = None\n 2. bo = Some True \\<Longrightarrow>\n    bool_op_extend (\\<and>) None None = None\n 3. bo = Some False \\<Longrightarrow>\n    bool_op_extend (\\<and>) None None = None\n 4. bo = None \\<Longrightarrow> bool_op_extend (\\<and>) bo (Some True) = bo\n 5. bo = Some True \\<Longrightarrow>\n    bool_op_extend (\\<and>) bo (Some True) = bo\n 6. bo = Some False \\<Longrightarrow>\n    bool_op_extend (\\<and>) bo (Some True) = bo\n 7. bo = None \\<Longrightarrow>\n    bool_op_extend (\\<and>) bo (Some False) = Some False\n 8. bo = Some True \\<Longrightarrow>\n    bool_op_extend (\\<and>) bo (Some False) = Some False\n 9. bo = Some False \\<Longrightarrow>\n    bool_op_extend (\\<and>) bo (Some False) = Some False\n 10. bo = None \\<Longrightarrow> bool_op_extend (\\<and>) (Some True) bo = bo\nA total of 15 subgoals...", "apply (simp_all)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma bope_or_code [code] :\n   \"bope_or None None = None\"\n   \"bope_or bo (Some False) = bo\"\n   \"bope_or bo (Some True) = (Some True)\"\n   \"bope_or (Some False) bo = bo\"\n   \"bope_or (Some True) bo = (Some True)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (bope_or None None = None &&& bope_or bo (Some False) = bo) &&&\n    bope_or bo (Some True) = Some True &&&\n    bope_or (Some False) bo = bo &&& bope_or (Some True) bo = Some True", "unfolding bope_or_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (bool_op_extend (\\<or>) None None = None &&&\n     bool_op_extend (\\<or>) bo (Some False) = bo) &&&\n    bool_op_extend (\\<or>) bo (Some True) = Some True &&&\n    bool_op_extend (\\<or>) (Some False) bo = bo &&&\n    bool_op_extend (\\<or>) (Some True) bo = Some True", "apply (case_tac [!] bo  rule: bool_opt_exhaust)"], ["proof (prove)\ngoal (15 subgoals):\n 1. bo = None \\<Longrightarrow> bool_op_extend (\\<or>) None None = None\n 2. bo = Some True \\<Longrightarrow> bool_op_extend (\\<or>) None None = None\n 3. bo = Some False \\<Longrightarrow>\n    bool_op_extend (\\<or>) None None = None\n 4. bo = None \\<Longrightarrow> bool_op_extend (\\<or>) bo (Some False) = bo\n 5. bo = Some True \\<Longrightarrow>\n    bool_op_extend (\\<or>) bo (Some False) = bo\n 6. bo = Some False \\<Longrightarrow>\n    bool_op_extend (\\<or>) bo (Some False) = bo\n 7. bo = None \\<Longrightarrow>\n    bool_op_extend (\\<or>) bo (Some True) = Some True\n 8. bo = Some True \\<Longrightarrow>\n    bool_op_extend (\\<or>) bo (Some True) = Some True\n 9. bo = Some False \\<Longrightarrow>\n    bool_op_extend (\\<or>) bo (Some True) = Some True\n 10. bo = None \\<Longrightarrow> bool_op_extend (\\<or>) (Some False) bo = bo\nA total of 15 subgoals...", "apply (simp_all)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma bope_nand_code [code] :\n   \"bope_nand None None = None\"\n   \"bope_nand bo (Some False) = (Some True)\"\n   \"bope_nand (Some False) bo = (Some True)\"\n   \"bope_nand (Some True) (Some True) = (Some False)\"\n   \"bope_nand None (Some True) = None\"\n   \"bope_nand (Some True) None = None\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (bope_nand None None = None &&&\n     bope_nand bo (Some False) = Some True &&&\n     bope_nand (Some False) bo = Some True) &&&\n    bope_nand (Some True) (Some True) = Some False &&&\n    bope_nand None (Some True) = None &&& bope_nand (Some True) None = None", "unfolding bope_nand_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (bool_op_extend (\\<lambda>x y. \\<not> (x \\<and> y)) None None = None &&&\n     bool_op_extend (\\<lambda>x y. \\<not> (x \\<and> y)) bo (Some False) =\n     Some True &&&\n     bool_op_extend (\\<lambda>x y. \\<not> (x \\<and> y)) (Some False) bo =\n     Some True) &&&\n    bool_op_extend (\\<lambda>x y. \\<not> (x \\<and> y)) (Some True)\n     (Some True) =\n    Some False &&&\n    bool_op_extend (\\<lambda>x y. \\<not> (x \\<and> y)) None (Some True) =\n    None &&&\n    bool_op_extend (\\<lambda>x y. \\<not> (x \\<and> y)) (Some True) None =\n    None", "apply (case_tac [!] bo  rule: bool_opt_exhaust)"], ["proof (prove)\ngoal (18 subgoals):\n 1. bo = None \\<Longrightarrow>\n    bool_op_extend (\\<lambda>x y. \\<not> (x \\<and> y)) None None = None\n 2. bo = Some True \\<Longrightarrow>\n    bool_op_extend (\\<lambda>x y. \\<not> (x \\<and> y)) None None = None\n 3. bo = Some False \\<Longrightarrow>\n    bool_op_extend (\\<lambda>x y. \\<not> (x \\<and> y)) None None = None\n 4. bo = None \\<Longrightarrow>\n    bool_op_extend (\\<lambda>x y. \\<not> (x \\<and> y)) bo (Some False) =\n    Some True\n 5. bo = Some True \\<Longrightarrow>\n    bool_op_extend (\\<lambda>x y. \\<not> (x \\<and> y)) bo (Some False) =\n    Some True\n 6. bo = Some False \\<Longrightarrow>\n    bool_op_extend (\\<lambda>x y. \\<not> (x \\<and> y)) bo (Some False) =\n    Some True\n 7. bo = None \\<Longrightarrow>\n    bool_op_extend (\\<lambda>x y. \\<not> (x \\<and> y)) (Some False) bo =\n    Some True\n 8. bo = Some True \\<Longrightarrow>\n    bool_op_extend (\\<lambda>x y. \\<not> (x \\<and> y)) (Some False) bo =\n    Some True\n 9. bo = Some False \\<Longrightarrow>\n    bool_op_extend (\\<lambda>x y. \\<not> (x \\<and> y)) (Some False) bo =\n    Some True\n 10. bo = None \\<Longrightarrow>\n     bool_op_extend (\\<lambda>x y. \\<not> (x \\<and> y)) (Some True)\n      (Some True) =\n     Some False\nA total of 18 subgoals...", "apply (simp_all)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma bope_nor_code [code] :\n   \"bope_nor None None = None\"\n   \"bope_nor bo (Some True) = (Some False)\"\n   \"bope_nor (Some True) bo = (Some False)\"\n   \"bope_nor (Some False) (Some False) = (Some True)\"\n   \"bope_nor None (Some False) = None\"\n   \"bope_nor (Some False) None = None\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (bope_nor None None = None &&&\n     bope_nor bo (Some True) = Some False &&&\n     bope_nor (Some True) bo = Some False) &&&\n    bope_nor (Some False) (Some False) = Some True &&&\n    bope_nor None (Some False) = None &&& bope_nor (Some False) None = None", "unfolding bope_nor_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (bool_op_extend (\\<lambda>x y. \\<not> (x \\<or> y)) None None = None &&&\n     bool_op_extend (\\<lambda>x y. \\<not> (x \\<or> y)) bo (Some True) =\n     Some False &&&\n     bool_op_extend (\\<lambda>x y. \\<not> (x \\<or> y)) (Some True) bo =\n     Some False) &&&\n    bool_op_extend (\\<lambda>x y. \\<not> (x \\<or> y)) (Some False)\n     (Some False) =\n    Some True &&&\n    bool_op_extend (\\<lambda>x y. \\<not> (x \\<or> y)) None (Some False) =\n    None &&&\n    bool_op_extend (\\<lambda>x y. \\<not> (x \\<or> y)) (Some False) None =\n    None", "apply (case_tac [!] bo  rule: bool_opt_exhaust)"], ["proof (prove)\ngoal (18 subgoals):\n 1. bo = None \\<Longrightarrow>\n    bool_op_extend (\\<lambda>x y. \\<not> (x \\<or> y)) None None = None\n 2. bo = Some True \\<Longrightarrow>\n    bool_op_extend (\\<lambda>x y. \\<not> (x \\<or> y)) None None = None\n 3. bo = Some False \\<Longrightarrow>\n    bool_op_extend (\\<lambda>x y. \\<not> (x \\<or> y)) None None = None\n 4. bo = None \\<Longrightarrow>\n    bool_op_extend (\\<lambda>x y. \\<not> (x \\<or> y)) bo (Some True) =\n    Some False\n 5. bo = Some True \\<Longrightarrow>\n    bool_op_extend (\\<lambda>x y. \\<not> (x \\<or> y)) bo (Some True) =\n    Some False\n 6. bo = Some False \\<Longrightarrow>\n    bool_op_extend (\\<lambda>x y. \\<not> (x \\<or> y)) bo (Some True) =\n    Some False\n 7. bo = None \\<Longrightarrow>\n    bool_op_extend (\\<lambda>x y. \\<not> (x \\<or> y)) (Some True) bo =\n    Some False\n 8. bo = Some True \\<Longrightarrow>\n    bool_op_extend (\\<lambda>x y. \\<not> (x \\<or> y)) (Some True) bo =\n    Some False\n 9. bo = Some False \\<Longrightarrow>\n    bool_op_extend (\\<lambda>x y. \\<not> (x \\<or> y)) (Some True) bo =\n    Some False\n 10. bo = None \\<Longrightarrow>\n     bool_op_extend (\\<lambda>x y. \\<not> (x \\<or> y)) (Some False)\n      (Some False) =\n     Some True\nA total of 18 subgoals...", "apply (simp_all)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma bope_eq_code [code] :\n   \"bope_eq None bo = None\"\n   \"bope_eq bo None = None\"\n   \"bope_eq (Some True)  (Some True)  = Some True\"\n   \"bope_eq (Some True)  (Some False) = Some False\"\n   \"bope_eq (Some False) (Some True)  = Some False\"\n   \"bope_eq (Some False) (Some False) = Some True\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (bope_eq None bo = None &&&\n     bope_eq bo None = None &&&\n     bope_eq (Some True) (Some True) = Some True) &&&\n    bope_eq (Some True) (Some False) = Some False &&&\n    bope_eq (Some False) (Some True) = Some False &&&\n    bope_eq (Some False) (Some False) = Some True", "unfolding bope_eq_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (bool_op_extend (=) None bo = None &&&\n     bool_op_extend (=) bo None = None &&&\n     bool_op_extend (=) (Some True) (Some True) = Some True) &&&\n    bool_op_extend (=) (Some True) (Some False) = Some False &&&\n    bool_op_extend (=) (Some False) (Some True) = Some False &&&\n    bool_op_extend (=) (Some False) (Some False) = Some True", "apply (case_tac [!] bo  rule: bool_opt_exhaust)"], ["proof (prove)\ngoal (18 subgoals):\n 1. bo = None \\<Longrightarrow> bool_op_extend (=) None bo = None\n 2. bo = Some True \\<Longrightarrow> bool_op_extend (=) None bo = None\n 3. bo = Some False \\<Longrightarrow> bool_op_extend (=) None bo = None\n 4. bo = None \\<Longrightarrow> bool_op_extend (=) bo None = None\n 5. bo = Some True \\<Longrightarrow> bool_op_extend (=) bo None = None\n 6. bo = Some False \\<Longrightarrow> bool_op_extend (=) bo None = None\n 7. bo = None \\<Longrightarrow>\n    bool_op_extend (=) (Some True) (Some True) = Some True\n 8. bo = Some True \\<Longrightarrow>\n    bool_op_extend (=) (Some True) (Some True) = Some True\n 9. bo = Some False \\<Longrightarrow>\n    bool_op_extend (=) (Some True) (Some True) = Some True\n 10. bo = None \\<Longrightarrow>\n     bool_op_extend (=) (Some True) (Some False) = Some False\nA total of 18 subgoals...", "apply (simp_all)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma bope_xor_code [code] :\n   \"bope_xor None bo = None\"\n   \"bope_xor bo None = None\"\n   \"bope_xor (Some True)  (Some True)  = Some False\"\n   \"bope_xor (Some True)  (Some False) = Some True\"\n   \"bope_xor (Some False) (Some True)  = Some True\"\n   \"bope_xor (Some False) (Some False) = Some False\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (bope_xor None bo = None &&&\n     bope_xor bo None = None &&&\n     bope_xor (Some True) (Some True) = Some False) &&&\n    bope_xor (Some True) (Some False) = Some True &&&\n    bope_xor (Some False) (Some True) = Some True &&&\n    bope_xor (Some False) (Some False) = Some False", "unfolding bope_xor_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (bool_op_extend (\\<noteq>) None bo = None &&&\n     bool_op_extend (\\<noteq>) bo None = None &&&\n     bool_op_extend (\\<noteq>) (Some True) (Some True) = Some False) &&&\n    bool_op_extend (\\<noteq>) (Some True) (Some False) = Some True &&&\n    bool_op_extend (\\<noteq>) (Some False) (Some True) = Some True &&&\n    bool_op_extend (\\<noteq>) (Some False) (Some False) = Some False", "apply (case_tac [!] bo  rule: bool_opt_exhaust)"], ["proof (prove)\ngoal (18 subgoals):\n 1. bo = None \\<Longrightarrow> bool_op_extend (\\<noteq>) None bo = None\n 2. bo = Some True \\<Longrightarrow>\n    bool_op_extend (\\<noteq>) None bo = None\n 3. bo = Some False \\<Longrightarrow>\n    bool_op_extend (\\<noteq>) None bo = None\n 4. bo = None \\<Longrightarrow> bool_op_extend (\\<noteq>) bo None = None\n 5. bo = Some True \\<Longrightarrow>\n    bool_op_extend (\\<noteq>) bo None = None\n 6. bo = Some False \\<Longrightarrow>\n    bool_op_extend (\\<noteq>) bo None = None\n 7. bo = None \\<Longrightarrow>\n    bool_op_extend (\\<noteq>) (Some True) (Some True) = Some False\n 8. bo = Some True \\<Longrightarrow>\n    bool_op_extend (\\<noteq>) (Some True) (Some True) = Some False\n 9. bo = Some False \\<Longrightarrow>\n    bool_op_extend (\\<noteq>) (Some True) (Some True) = Some False\n 10. bo = None \\<Longrightarrow>\n     bool_op_extend (\\<noteq>) (Some True) (Some False) = Some True\nA total of 18 subgoals...", "apply (simp_all)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma bope_imp_code [code] :\n   \"bope_imp None None = None\"\n   \"bope_imp None (Some True) = Some True\"\n   \"bope_imp None (Some False) = None\"\n   \"bope_imp (Some True) bo = bo\"\n   \"bope_imp (Some False) bo = (Some True)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (bope_imp None None = None &&&\n     bope_imp None (Some True) = Some True) &&&\n    bope_imp None (Some False) = None &&&\n    bope_imp (Some True) bo = bo &&& bope_imp (Some False) bo = Some True", "unfolding bope_imp_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (bool_op_extend (\\<longrightarrow>) None None = None &&&\n     bool_op_extend (\\<longrightarrow>) None (Some True) = Some True) &&&\n    bool_op_extend (\\<longrightarrow>) None (Some False) = None &&&\n    bool_op_extend (\\<longrightarrow>) (Some True) bo = bo &&&\n    bool_op_extend (\\<longrightarrow>) (Some False) bo = Some True", "apply (case_tac [!] bo  rule: bool_opt_exhaust)"], ["proof (prove)\ngoal (15 subgoals):\n 1. bo = None \\<Longrightarrow>\n    bool_op_extend (\\<longrightarrow>) None None = None\n 2. bo = Some True \\<Longrightarrow>\n    bool_op_extend (\\<longrightarrow>) None None = None\n 3. bo = Some False \\<Longrightarrow>\n    bool_op_extend (\\<longrightarrow>) None None = None\n 4. bo = None \\<Longrightarrow>\n    bool_op_extend (\\<longrightarrow>) None (Some True) = Some True\n 5. bo = Some True \\<Longrightarrow>\n    bool_op_extend (\\<longrightarrow>) None (Some True) = Some True\n 6. bo = Some False \\<Longrightarrow>\n    bool_op_extend (\\<longrightarrow>) None (Some True) = Some True\n 7. bo = None \\<Longrightarrow>\n    bool_op_extend (\\<longrightarrow>) None (Some False) = None\n 8. bo = Some True \\<Longrightarrow>\n    bool_op_extend (\\<longrightarrow>) None (Some False) = None\n 9. bo = Some False \\<Longrightarrow>\n    bool_op_extend (\\<longrightarrow>) None (Some False) = None\n 10. bo = None \\<Longrightarrow>\n     bool_op_extend (\\<longrightarrow>) (Some True) bo = bo\nA total of 15 subgoals...", "apply (simp_all)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "subsection \\<open>Implementing boolean Combination\\<close>"], ["", "text \\<open>For building boolean combinations of BDDs it is essential to use\na map storing already used IDs and a cache. \nThese datastructures cache can be implemented in different ways. Therefore, here the\nneeded properties are abstracted by using a locale.\\<close>"], ["", "locale robdd_locale = \n  c: map_empty c_\\<alpha> c_invar c_empty +\n  c: map_lookup c_\\<alpha> c_invar c_lookup +\n  c: map_update c_\\<alpha> c_invar c_update +\n  r: map_empty r_\\<alpha> r_invar r_empty +\n  r: map_lookup r_\\<alpha> r_invar r_lookup +\n  r: map_update_dj r_\\<alpha> r_invar r_update \n  for c_\\<alpha> :: \"'c_map \\<Rightarrow> (nat \\<times> nat \\<Rightarrow> robdd option)\" and\n      c_invar c_empty c_lookup c_update and\n      r_\\<alpha> :: \"'r_map \\<Rightarrow> (nat \\<times> nat \\<times> nat \\<Rightarrow> robdd option)\" and\n      r_invar r_empty r_lookup r_update\n  begin"], ["", "definition rev_map_invar where\n     \"rev_map_invar bs rev_map = (r_invar (fst rev_map) \\<and> snd rev_map > 1 \\<and>\n        (\\<forall>b \\<in> subrobdds_set bs. robdd_invar_ext bs 0 b \\<and> robdd_get_id b < (snd rev_map)) \\<and>\n        (\\<forall>li v ri b. r_\\<alpha> (fst rev_map) (li, v, ri) = Some b \\<longrightarrow> \n               (robdd_invar_ext bs v b \\<and> b \\<in> bs \\<and>\n                (\\<exists>l r i. b = robdd_var i l v r \\<and>  \n                         robdd_get_id l = li \\<and> robdd_get_id r = ri))) \\<and>\n        (\\<forall>i l r v. robdd_var i l v r \\<in> subrobdds_set bs \\<longrightarrow>\n                   r_\\<alpha> (fst rev_map) (robdd_get_id l, v, robdd_get_id r) = Some (robdd_var i l v r)))\""], ["", "lemma rev_map_invar_empty: \n     \"rev_map_invar {} (r_empty(), 2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rev_map_invar {} (r_empty (), 2)", "unfolding rev_map_invar_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. r_invar (fst (r_empty (), 2)) \\<and>\n    1 < snd (r_empty (), 2) \\<and>\n    (\\<forall>b\\<in>subrobdds_set {}.\n        robdd_invar_ext {} 0 b \\<and>\n        robdd_get_id b < snd (r_empty (), 2)) \\<and>\n    (\\<forall>li v ri b.\n        r_\\<alpha> (fst (r_empty (), 2)) (li, v, ri) =\n        Some b \\<longrightarrow>\n        robdd_invar_ext {} v b \\<and>\n        b \\<in> {} \\<and>\n        (\\<exists>l r i.\n            b = robdd_var i l v r \\<and>\n            robdd_get_id l = li \\<and> robdd_get_id r = ri)) \\<and>\n    (\\<forall>i l r v.\n        robdd_var i l v r \\<in> subrobdds_set {} \\<longrightarrow>\n        r_\\<alpha> (fst (r_empty (), 2))\n         (robdd_get_id l, v, robdd_get_id r) =\n        Some (robdd_var i l v r))", "by (simp add: r.empty_correct)"], ["", "lemma rev_map_invarI[intro!] :\n     \"\\<lbrakk>r_invar (fst rev_map); snd rev_map > 1;\n       \\<And>b. b \\<in> subrobdds_set bs \\<Longrightarrow> robdd_invar_ext bs 0 b \\<and> robdd_get_id b < (snd rev_map);\n       \\<And>li v ri b. r_\\<alpha> (fst rev_map) (li, v, ri) = Some b \\<Longrightarrow> \n               (robdd_invar_ext bs v b \\<and> b \\<in> bs \\<and>\n                (\\<exists>l r i. b = robdd_var i l v r \\<and>  \n                         robdd_get_id l = li \\<and> robdd_get_id r = ri));\n       \\<And>i l r v. robdd_var i l v r \\<in> subrobdds_set bs \\<Longrightarrow>\n                   r_\\<alpha> (fst rev_map) (robdd_get_id l, v, robdd_get_id r) = Some (robdd_var i l v r)\\<rbrakk> \\<Longrightarrow>\n       rev_map_invar bs rev_map\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>r_invar (fst rev_map); 1 < snd rev_map;\n     \\<And>b.\n        b \\<in> subrobdds_set bs \\<Longrightarrow>\n        robdd_invar_ext bs 0 b \\<and> robdd_get_id b < snd rev_map;\n     \\<And>li v ri b.\n        r_\\<alpha> (fst rev_map) (li, v, ri) = Some b \\<Longrightarrow>\n        robdd_invar_ext bs v b \\<and>\n        b \\<in> bs \\<and>\n        (\\<exists>l r i.\n            b = robdd_var i l v r \\<and>\n            robdd_get_id l = li \\<and> robdd_get_id r = ri);\n     \\<And>i l r v.\n        robdd_var i l v r \\<in> subrobdds_set bs \\<Longrightarrow>\n        r_\\<alpha> (fst rev_map) (robdd_get_id l, v, robdd_get_id r) =\n        Some (robdd_var i l v r)\\<rbrakk>\n    \\<Longrightarrow> rev_map_invar bs rev_map", "unfolding rev_map_invar_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>r_invar (fst rev_map); 1 < snd rev_map;\n     \\<And>b.\n        b \\<in> subrobdds_set bs \\<Longrightarrow>\n        robdd_invar_ext bs 0 b \\<and> robdd_get_id b < snd rev_map;\n     \\<And>li v ri b.\n        r_\\<alpha> (fst rev_map) (li, v, ri) = Some b \\<Longrightarrow>\n        robdd_invar_ext bs v b \\<and>\n        b \\<in> bs \\<and>\n        (\\<exists>l r i.\n            b = robdd_var i l v r \\<and>\n            robdd_get_id l = li \\<and> robdd_get_id r = ri);\n     \\<And>i l r v.\n        robdd_var i l v r \\<in> subrobdds_set bs \\<Longrightarrow>\n        r_\\<alpha> (fst rev_map) (robdd_get_id l, v, robdd_get_id r) =\n        Some (robdd_var i l v r)\\<rbrakk>\n    \\<Longrightarrow> r_invar (fst rev_map) \\<and>\n                      1 < snd rev_map \\<and>\n                      (\\<forall>b\\<in>subrobdds_set bs.\n                          robdd_invar_ext bs 0 b \\<and>\n                          robdd_get_id b < snd rev_map) \\<and>\n                      (\\<forall>li v ri b.\n                          r_\\<alpha> (fst rev_map) (li, v, ri) =\n                          Some b \\<longrightarrow>\n                          robdd_invar_ext bs v b \\<and>\n                          b \\<in> bs \\<and>\n                          (\\<exists>l r i.\n                              b = robdd_var i l v r \\<and>\n                              robdd_get_id l = li \\<and>\n                              robdd_get_id r = ri)) \\<and>\n                      (\\<forall>i l r v.\n                          robdd_var i l v r\n                          \\<in> subrobdds_set bs \\<longrightarrow>\n                          r_\\<alpha> (fst rev_map)\n                           (robdd_get_id l, v, robdd_get_id r) =\n                          Some (robdd_var i l v r))", "by blast"], ["", "lemma rev_map_invar_D1 :\n  assumes \"rev_map_invar bs rev_map\"\n      and \"robdd_var i l v r \\<in> subrobdds_set bs\"\n   shows \"r_\\<alpha> (fst rev_map) (robdd_get_id l, v, robdd_get_id r) = Some (robdd_var i l v r)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. r_\\<alpha> (fst rev_map) (robdd_get_id l, v, robdd_get_id r) =\n    Some (robdd_var i l v r)", "using assms"], ["proof (prove)\nusing this:\n  rev_map_invar bs rev_map\n  robdd_var i l v r \\<in> subrobdds_set bs\n\ngoal (1 subgoal):\n 1. r_\\<alpha> (fst rev_map) (robdd_get_id l, v, robdd_get_id r) =\n    Some (robdd_var i l v r)", "unfolding rev_map_invar_def"], ["proof (prove)\nusing this:\n  r_invar (fst rev_map) \\<and>\n  1 < snd rev_map \\<and>\n  (\\<forall>b\\<in>subrobdds_set bs.\n      robdd_invar_ext bs 0 b \\<and> robdd_get_id b < snd rev_map) \\<and>\n  (\\<forall>li v ri b.\n      r_\\<alpha> (fst rev_map) (li, v, ri) = Some b \\<longrightarrow>\n      robdd_invar_ext bs v b \\<and>\n      b \\<in> bs \\<and>\n      (\\<exists>l r i.\n          b = robdd_var i l v r \\<and>\n          robdd_get_id l = li \\<and> robdd_get_id r = ri)) \\<and>\n  (\\<forall>i l r v.\n      robdd_var i l v r \\<in> subrobdds_set bs \\<longrightarrow>\n      r_\\<alpha> (fst rev_map) (robdd_get_id l, v, robdd_get_id r) =\n      Some (robdd_var i l v r))\n  robdd_var i l v r \\<in> subrobdds_set bs\n\ngoal (1 subgoal):\n 1. r_\\<alpha> (fst rev_map) (robdd_get_id l, v, robdd_get_id r) =\n    Some (robdd_var i l v r)", "by blast"], ["", "lemma rev_map_invar_D2 :\n  assumes \"rev_map_invar bs rev_map\"\n      and \"r_\\<alpha> (fst rev_map) (li, v, ri) = Some b\"\n   shows \"robdd_invar_ext bs v b \\<and> b \\<in> bs \\<and>\n          (\\<exists>l r i. b = robdd_var i l v r \\<and>  \n                      robdd_get_id l = li \\<and> robdd_get_id r = ri)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. robdd_invar_ext bs v b \\<and>\n    b \\<in> bs \\<and>\n    (\\<exists>l r i.\n        b = robdd_var i l v r \\<and>\n        robdd_get_id l = li \\<and> robdd_get_id r = ri)", "using assms"], ["proof (prove)\nusing this:\n  rev_map_invar bs rev_map\n  r_\\<alpha> (fst rev_map) (li, v, ri) = Some b\n\ngoal (1 subgoal):\n 1. robdd_invar_ext bs v b \\<and>\n    b \\<in> bs \\<and>\n    (\\<exists>l r i.\n        b = robdd_var i l v r \\<and>\n        robdd_get_id l = li \\<and> robdd_get_id r = ri)", "unfolding rev_map_invar_def"], ["proof (prove)\nusing this:\n  r_invar (fst rev_map) \\<and>\n  1 < snd rev_map \\<and>\n  (\\<forall>b\\<in>subrobdds_set bs.\n      robdd_invar_ext bs 0 b \\<and> robdd_get_id b < snd rev_map) \\<and>\n  (\\<forall>li v ri b.\n      r_\\<alpha> (fst rev_map) (li, v, ri) = Some b \\<longrightarrow>\n      robdd_invar_ext bs v b \\<and>\n      b \\<in> bs \\<and>\n      (\\<exists>l r i.\n          b = robdd_var i l v r \\<and>\n          robdd_get_id l = li \\<and> robdd_get_id r = ri)) \\<and>\n  (\\<forall>i l r v.\n      robdd_var i l v r \\<in> subrobdds_set bs \\<longrightarrow>\n      r_\\<alpha> (fst rev_map) (robdd_get_id l, v, robdd_get_id r) =\n      Some (robdd_var i l v r))\n  r_\\<alpha> (fst rev_map) (li, v, ri) = Some b\n\ngoal (1 subgoal):\n 1. robdd_invar_ext bs v b \\<and>\n    b \\<in> bs \\<and>\n    (\\<exists>l r i.\n        b = robdd_var i l v r \\<and>\n        robdd_get_id l = li \\<and> robdd_get_id r = ri)", "by blast"], ["", "lemma rev_map_invar_D3 :\n  assumes \"rev_map_invar bs rev_map\"\n      and \"b \\<in> subrobdds_set bs\"\n   shows \"robdd_invar_ext bs 0 b\" \"robdd_get_id b < snd (rev_map)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. robdd_invar_ext bs 0 b &&& robdd_get_id b < snd rev_map", "using assms"], ["proof (prove)\nusing this:\n  rev_map_invar bs rev_map\n  b \\<in> subrobdds_set bs\n\ngoal (1 subgoal):\n 1. robdd_invar_ext bs 0 b &&& robdd_get_id b < snd rev_map", "unfolding rev_map_invar_def"], ["proof (prove)\nusing this:\n  r_invar (fst rev_map) \\<and>\n  1 < snd rev_map \\<and>\n  (\\<forall>b\\<in>subrobdds_set bs.\n      robdd_invar_ext bs 0 b \\<and> robdd_get_id b < snd rev_map) \\<and>\n  (\\<forall>li v ri b.\n      r_\\<alpha> (fst rev_map) (li, v, ri) = Some b \\<longrightarrow>\n      robdd_invar_ext bs v b \\<and>\n      b \\<in> bs \\<and>\n      (\\<exists>l r i.\n          b = robdd_var i l v r \\<and>\n          robdd_get_id l = li \\<and> robdd_get_id r = ri)) \\<and>\n  (\\<forall>i l r v.\n      robdd_var i l v r \\<in> subrobdds_set bs \\<longrightarrow>\n      r_\\<alpha> (fst rev_map) (robdd_get_id l, v, robdd_get_id r) =\n      Some (robdd_var i l v r))\n  b \\<in> subrobdds_set bs\n\ngoal (1 subgoal):\n 1. robdd_invar_ext bs 0 b &&& robdd_get_id b < snd rev_map", "by blast+"], ["", "lemma rev_map_invar_implies_invar_ids :\n     assumes invar: \"rev_map_invar bs rev_map\"\n       shows \"robdd_invar_ids bs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. robdd_invar_ids bs", "proof (cases \"bs = {}\")"], ["proof (state)\ngoal (2 subgoals):\n 1. bs = {} \\<Longrightarrow> robdd_invar_ids bs\n 2. bs \\<noteq> {} \\<Longrightarrow> robdd_invar_ids bs", "case True"], ["proof (state)\nthis:\n  bs = {}\n\ngoal (2 subgoals):\n 1. bs = {} \\<Longrightarrow> robdd_invar_ids bs\n 2. bs \\<noteq> {} \\<Longrightarrow> robdd_invar_ids bs", "thus ?thesis"], ["proof (prove)\nusing this:\n  bs = {}\n\ngoal (1 subgoal):\n 1. robdd_invar_ids bs", "by (simp add: robdd_invar_ids_def subrobdds_set_def)"], ["proof (state)\nthis:\n  robdd_invar_ids bs\n\ngoal (1 subgoal):\n 1. bs \\<noteq> {} \\<Longrightarrow> robdd_invar_ids bs", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. bs \\<noteq> {} \\<Longrightarrow> robdd_invar_ids bs", "case False"], ["proof (state)\nthis:\n  bs \\<noteq> {}\n\ngoal (1 subgoal):\n 1. bs \\<noteq> {} \\<Longrightarrow> robdd_invar_ids bs", "then"], ["proof (chain)\npicking this:\n  bs \\<noteq> {}", "obtain b where \"b \\<in> bs\""], ["proof (prove)\nusing this:\n  bs \\<noteq> {}\n\ngoal (1 subgoal):\n 1. (\\<And>b. b \\<in> bs \\<Longrightarrow> thesis) \\<Longrightarrow> thesis", "by auto"], ["proof (state)\nthis:\n  b \\<in> bs\n\ngoal (1 subgoal):\n 1. bs \\<noteq> {} \\<Longrightarrow> robdd_invar_ids bs", "then"], ["proof (chain)\npicking this:\n  b \\<in> bs", "have b_in: \"b \\<in> subrobdds_set bs\""], ["proof (prove)\nusing this:\n  b \\<in> bs\n\ngoal (1 subgoal):\n 1. b \\<in> subrobdds_set bs", "unfolding subrobdds_set_def"], ["proof (prove)\nusing this:\n  b \\<in> bs\n\ngoal (1 subgoal):\n 1. b \\<in> \\<Union> (subrobdds ` bs)", "by rule simp"], ["proof (state)\nthis:\n  b \\<in> subrobdds_set bs\n\ngoal (1 subgoal):\n 1. bs \\<noteq> {} \\<Longrightarrow> robdd_invar_ids bs", "from rev_map_invar_D3(1)[OF invar b_in]"], ["proof (chain)\npicking this:\n  robdd_invar_ext bs 0 b", "show ?thesis"], ["proof (prove)\nusing this:\n  robdd_invar_ext bs 0 b\n\ngoal (1 subgoal):\n 1. robdd_invar_ids bs", "by (simp add: robdd_invar_ext_def)"], ["proof (state)\nthis:\n  robdd_invar_ids bs\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma rev_map_invar_implies_invar_bs :\n     assumes invar: \"rev_map_invar bs rev_map\"\n         and b_in: \"b \\<in> subrobdds_set bs\"\n       shows \"robdd_invar b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. robdd_invar b", "using rev_map_invar_D3(1)[OF invar b_in]"], ["proof (prove)\nusing this:\n  robdd_invar_ext bs 0 b\n\ngoal (1 subgoal):\n 1. robdd_invar b", "by (rule robdd_invar_impl)"], ["", "lemma rev_map_invar_implies_invar_ids_equal :\n     assumes invar: \"rev_map_invar bs rev_map\"\n       shows \"robdd_invar_ids_equal bs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. robdd_invar_ids_equal bs", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. robdd_invar_ids_equal bs", "note invar_ids = rev_map_invar_implies_invar_ids[OF invar]"], ["proof (state)\nthis:\n  robdd_invar_ids bs\n\ngoal (1 subgoal):\n 1. robdd_invar_ids_equal bs", "note bs_OK_full = rev_map_invar_implies_invar_bs[OF invar]"], ["proof (state)\nthis:\n  ?b \\<in> subrobdds_set bs \\<Longrightarrow> robdd_invar ?b\n\ngoal (1 subgoal):\n 1. robdd_invar_ids_equal bs", "have bs_OK: \"\\<And>b. b \\<in> bs \\<Longrightarrow> robdd_invar b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>b. b \\<in> bs \\<Longrightarrow> robdd_invar b", "by (metis bs_OK_full subrobdds_set_mono subsetD)"], ["proof (state)\nthis:\n  ?b \\<in> bs \\<Longrightarrow> robdd_invar ?b\n\ngoal (1 subgoal):\n 1. robdd_invar_ids_equal bs", "show \"robdd_invar_ids_equal bs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. robdd_invar_ids_equal bs", "by (rule robdd_invar_ids_equal_intro [OF bs_OK invar_ids])"], ["proof (state)\nthis:\n  robdd_invar_ids_equal bs\n\ngoal:\nNo subgoals!", "qed"], ["", "definition robdd_construct :: \"'r_map \\<times> node_id \\<Rightarrow> robdd \\<Rightarrow> var \\<Rightarrow> robdd \\<Rightarrow> robdd \\<times> ('r_map \\<times> node_id)\" where\n    \"robdd_construct rev_map l v r =\n     (let l_id = robdd_get_id l in\n      let r_id = robdd_get_id r in\n      (if l_id = r_id then (l, rev_map) else\n       (case r_lookup (l_id, v, r_id) (fst rev_map) of\n           Some b \\<Rightarrow> (b, rev_map) \n         | None \\<Rightarrow> (let b = robdd_var (snd rev_map) l v r in\n                    (b, (r_update (l_id, v, r_id) b (fst rev_map), Suc (snd rev_map)))))))\""], ["", "lemma robdd_construct_correct :\n  fixes l v r bs rev_map\n  defines \"res \\<equiv> robdd_construct rev_map l v r\"\n  defines \"rev_map' \\<equiv> (snd res)\"\n  defines \"b \\<equiv> fst res\"\n  defines \"bs' \\<equiv> insert b bs\"\n  assumes invar_rev_map: \"rev_map_invar bs rev_map\"\n      and lr_in: \"l \\<in> bs\" \"r \\<in> bs\"\n      and invar_lr: \"robdd_invar_ext bs (Suc v) l\" \"robdd_invar_ext bs (Suc v) r\"\n  shows \"robdd_invar_ext bs' v b \\<and> rev_map_invar bs' rev_map' \\<and>\n         robdd_\\<alpha> b = robdd_\\<alpha> (robdd_var 0 l v r)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. robdd_invar_ext bs' v b \\<and>\n    rev_map_invar bs' rev_map' \\<and>\n    robdd_\\<alpha> b = robdd_\\<alpha> (robdd_var 0 l v r)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. robdd_invar_ext bs' v b \\<and>\n    rev_map_invar bs' rev_map' \\<and>\n    robdd_\\<alpha> b = robdd_\\<alpha> (robdd_var 0 l v r)", "define l_id where \"l_id = robdd_get_id l\""], ["proof (state)\nthis:\n  l_id = robdd_get_id l\n\ngoal (1 subgoal):\n 1. robdd_invar_ext bs' v b \\<and>\n    rev_map_invar bs' rev_map' \\<and>\n    robdd_\\<alpha> b = robdd_\\<alpha> (robdd_var 0 l v r)", "define r_id where \"r_id = robdd_get_id r\""], ["proof (state)\nthis:\n  r_id = robdd_get_id r\n\ngoal (1 subgoal):\n 1. robdd_invar_ext bs' v b \\<and>\n    rev_map_invar bs' rev_map' \\<and>\n    robdd_\\<alpha> b = robdd_\\<alpha> (robdd_var 0 l v r)", "note bs_OK = rev_map_invar_implies_invar_bs[OF invar_rev_map]"], ["proof (state)\nthis:\n  ?b \\<in> subrobdds_set bs \\<Longrightarrow> robdd_invar ?b\n\ngoal (1 subgoal):\n 1. robdd_invar_ext bs' v b \\<and>\n    rev_map_invar bs' rev_map' \\<and>\n    robdd_\\<alpha> b = robdd_\\<alpha> (robdd_var 0 l v r)", "from invar_lr"], ["proof (chain)\npicking this:\n  robdd_invar_ext bs (Suc v) l\n  robdd_invar_ext bs (Suc v) r", "have invar_ids: \"robdd_invar_ids bs\"\n     and lr_in': \"l \\<in> subrobdds_set bs\" \"r \\<in> subrobdds_set bs\""], ["proof (prove)\nusing this:\n  robdd_invar_ext bs (Suc v) l\n  robdd_invar_ext bs (Suc v) r\n\ngoal (1 subgoal):\n 1. robdd_invar_ids bs &&&\n    l \\<in> subrobdds_set bs &&& r \\<in> subrobdds_set bs", "unfolding robdd_invar_ext_def"], ["proof (prove)\nusing this:\n  l \\<in> subrobdds_set bs \\<and>\n  robdd_invar_ids bs \\<and>\n  robdd_invar_vars_greater (Suc v) l \\<and> robdd_invar_reduced l\n  r \\<in> subrobdds_set bs \\<and>\n  robdd_invar_ids bs \\<and>\n  robdd_invar_vars_greater (Suc v) r \\<and> robdd_invar_reduced r\n\ngoal (1 subgoal):\n 1. robdd_invar_ids bs &&&\n    l \\<in> subrobdds_set bs &&& r \\<in> subrobdds_set bs", "by simp_all"], ["proof (state)\nthis:\n  robdd_invar_ids bs\n  l \\<in> subrobdds_set bs\n  r \\<in> subrobdds_set bs\n\ngoal (1 subgoal):\n 1. robdd_invar_ext bs' v b \\<and>\n    rev_map_invar bs' rev_map' \\<and>\n    robdd_\\<alpha> b = robdd_\\<alpha> (robdd_var 0 l v r)", "from robdd_invar_ids_equal_intro[of bs, OF bs_OK invar_ids]\n         subrobdds_set_mono[of bs]"], ["proof (chain)\npicking this:\n  (\\<And>b.\n      b \\<in> bs \\<Longrightarrow>\n      b \\<in> subrobdds_set bs) \\<Longrightarrow>\n  robdd_invar_ids_equal bs\n  bs \\<subseteq> subrobdds_set bs", "have invar_ids_equal: \"robdd_invar_ids_equal bs\""], ["proof (prove)\nusing this:\n  (\\<And>b.\n      b \\<in> bs \\<Longrightarrow>\n      b \\<in> subrobdds_set bs) \\<Longrightarrow>\n  robdd_invar_ids_equal bs\n  bs \\<subseteq> subrobdds_set bs\n\ngoal (1 subgoal):\n 1. robdd_invar_ids_equal bs", "by (simp add: subset_iff)"], ["proof (state)\nthis:\n  robdd_invar_ids_equal bs\n\ngoal (1 subgoal):\n 1. robdd_invar_ext bs' v b \\<and>\n    rev_map_invar bs' rev_map' \\<and>\n    robdd_\\<alpha> b = robdd_\\<alpha> (robdd_var 0 l v r)", "from invar_rev_map"], ["proof (chain)\npicking this:\n  rev_map_invar bs rev_map", "have r_invar: \"r_invar (fst rev_map)\""], ["proof (prove)\nusing this:\n  rev_map_invar bs rev_map\n\ngoal (1 subgoal):\n 1. r_invar (fst rev_map)", "unfolding rev_map_invar_def"], ["proof (prove)\nusing this:\n  r_invar (fst rev_map) \\<and>\n  1 < snd rev_map \\<and>\n  (\\<forall>b\\<in>subrobdds_set bs.\n      robdd_invar_ext bs 0 b \\<and> robdd_get_id b < snd rev_map) \\<and>\n  (\\<forall>li v ri b.\n      r_\\<alpha> (fst rev_map) (li, v, ri) = Some b \\<longrightarrow>\n      robdd_invar_ext bs v b \\<and>\n      b \\<in> bs \\<and>\n      (\\<exists>l r i.\n          b = robdd_var i l v r \\<and>\n          robdd_get_id l = li \\<and> robdd_get_id r = ri)) \\<and>\n  (\\<forall>i l r v.\n      robdd_var i l v r \\<in> subrobdds_set bs \\<longrightarrow>\n      r_\\<alpha> (fst rev_map) (robdd_get_id l, v, robdd_get_id r) =\n      Some (robdd_var i l v r))\n\ngoal (1 subgoal):\n 1. r_invar (fst rev_map)", "by simp"], ["proof (state)\nthis:\n  r_invar (fst rev_map)\n\ngoal (1 subgoal):\n 1. robdd_invar_ext bs' v b \\<and>\n    rev_map_invar bs' rev_map' \\<and>\n    robdd_\\<alpha> b = robdd_\\<alpha> (robdd_var 0 l v r)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. robdd_invar_ext bs' v b \\<and>\n    rev_map_invar bs' rev_map' \\<and>\n    robdd_\\<alpha> b = robdd_\\<alpha> (robdd_var 0 l v r)", "proof (cases \"l_id = r_id\")"], ["proof (state)\ngoal (2 subgoals):\n 1. l_id = r_id \\<Longrightarrow>\n    robdd_invar_ext bs' v b \\<and>\n    rev_map_invar bs' rev_map' \\<and>\n    robdd_\\<alpha> b = robdd_\\<alpha> (robdd_var 0 l v r)\n 2. l_id \\<noteq> r_id \\<Longrightarrow>\n    robdd_invar_ext bs' v b \\<and>\n    rev_map_invar bs' rev_map' \\<and>\n    robdd_\\<alpha> b = robdd_\\<alpha> (robdd_var 0 l v r)", "case True"], ["proof (state)\nthis:\n  l_id = r_id\n\ngoal (2 subgoals):\n 1. l_id = r_id \\<Longrightarrow>\n    robdd_invar_ext bs' v b \\<and>\n    rev_map_invar bs' rev_map' \\<and>\n    robdd_\\<alpha> b = robdd_\\<alpha> (robdd_var 0 l v r)\n 2. l_id \\<noteq> r_id \\<Longrightarrow>\n    robdd_invar_ext bs' v b \\<and>\n    rev_map_invar bs' rev_map' \\<and>\n    robdd_\\<alpha> b = robdd_\\<alpha> (robdd_var 0 l v r)", "note l_id_eq = this"], ["proof (state)\nthis:\n  l_id = r_id\n\ngoal (2 subgoals):\n 1. l_id = r_id \\<Longrightarrow>\n    robdd_invar_ext bs' v b \\<and>\n    rev_map_invar bs' rev_map' \\<and>\n    robdd_\\<alpha> b = robdd_\\<alpha> (robdd_var 0 l v r)\n 2. l_id \\<noteq> r_id \\<Longrightarrow>\n    robdd_invar_ext bs' v b \\<and>\n    rev_map_invar bs' rev_map' \\<and>\n    robdd_\\<alpha> b = robdd_\\<alpha> (robdd_var 0 l v r)", "from lr_in' invar_ids l_id_eq"], ["proof (chain)\npicking this:\n  l \\<in> subrobdds_set bs\n  r \\<in> subrobdds_set bs\n  robdd_invar_ids bs\n  l_id = r_id", "have l_\\<alpha>: \"robdd_\\<alpha> l = robdd_\\<alpha> r\""], ["proof (prove)\nusing this:\n  l \\<in> subrobdds_set bs\n  r \\<in> subrobdds_set bs\n  robdd_invar_ids bs\n  l_id = r_id\n\ngoal (1 subgoal):\n 1. robdd_\\<alpha> l = robdd_\\<alpha> r", "unfolding robdd_invar_ids_def l_id_def r_id_def"], ["proof (prove)\nusing this:\n  l \\<in> subrobdds_set bs\n  r \\<in> subrobdds_set bs\n  \\<forall>b1 b2.\n     b1 \\<in> subrobdds_set bs \\<and>\n     b2 \\<in> subrobdds_set bs \\<longrightarrow>\n     (robdd_\\<alpha> b1 = robdd_\\<alpha> b2) =\n     (robdd_get_id b1 = robdd_get_id b2)\n  robdd_get_id l = robdd_get_id r\n\ngoal (1 subgoal):\n 1. robdd_\\<alpha> l = robdd_\\<alpha> r", "by simp"], ["proof (state)\nthis:\n  robdd_\\<alpha> l = robdd_\\<alpha> r\n\ngoal (2 subgoals):\n 1. l_id = r_id \\<Longrightarrow>\n    robdd_invar_ext bs' v b \\<and>\n    rev_map_invar bs' rev_map' \\<and>\n    robdd_\\<alpha> b = robdd_\\<alpha> (robdd_var 0 l v r)\n 2. l_id \\<noteq> r_id \\<Longrightarrow>\n    robdd_invar_ext bs' v b \\<and>\n    rev_map_invar bs' rev_map' \\<and>\n    robdd_\\<alpha> b = robdd_\\<alpha> (robdd_var 0 l v r)", "from invar_lr(1)"], ["proof (chain)\npicking this:\n  robdd_invar_ext bs (Suc v) l", "have invar_l': \"robdd_invar_ext bs v l\""], ["proof (prove)\nusing this:\n  robdd_invar_ext bs (Suc v) l\n\ngoal (1 subgoal):\n 1. robdd_invar_ext bs v l", "apply (rule robdd_invar_ext_weaken_var)"], ["proof (prove)\ngoal (1 subgoal):\n 1. v \\<le> Suc v", "apply (simp)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  robdd_invar_ext bs v l\n\ngoal (2 subgoals):\n 1. l_id = r_id \\<Longrightarrow>\n    robdd_invar_ext bs' v b \\<and>\n    rev_map_invar bs' rev_map' \\<and>\n    robdd_\\<alpha> b = robdd_\\<alpha> (robdd_var 0 l v r)\n 2. l_id \\<noteq> r_id \\<Longrightarrow>\n    robdd_invar_ext bs' v b \\<and>\n    rev_map_invar bs' rev_map' \\<and>\n    robdd_\\<alpha> b = robdd_\\<alpha> (robdd_var 0 l v r)", "from lr_in(1)"], ["proof (chain)\npicking this:\n  l \\<in> bs", "have bs'_eq: \"insert l bs = bs\""], ["proof (prove)\nusing this:\n  l \\<in> bs\n\ngoal (1 subgoal):\n 1. insert l bs = bs", "by auto"], ["proof (state)\nthis:\n  insert l bs = bs\n\ngoal (2 subgoals):\n 1. l_id = r_id \\<Longrightarrow>\n    robdd_invar_ext bs' v b \\<and>\n    rev_map_invar bs' rev_map' \\<and>\n    robdd_\\<alpha> b = robdd_\\<alpha> (robdd_var 0 l v r)\n 2. l_id \\<noteq> r_id \\<Longrightarrow>\n    robdd_invar_ext bs' v b \\<and>\n    rev_map_invar bs' rev_map' \\<and>\n    robdd_\\<alpha> b = robdd_\\<alpha> (robdd_var 0 l v r)", "from res_def l_id_eq"], ["proof (chain)\npicking this:\n  res \\<equiv> robdd_construct rev_map l v r\n  l_id = r_id", "show ?thesis"], ["proof (prove)\nusing this:\n  res \\<equiv> robdd_construct rev_map l v r\n  l_id = r_id\n\ngoal (1 subgoal):\n 1. robdd_invar_ext bs' v b \\<and>\n    rev_map_invar bs' rev_map' \\<and>\n    robdd_\\<alpha> b = robdd_\\<alpha> (robdd_var 0 l v r)", "unfolding robdd_construct_def l_id_def[symmetric] r_id_def[symmetric]\n                  b_def bs'_def rev_map'_def"], ["proof (prove)\nusing this:\n  res \\<equiv>\n  let l_id = l_id; r_id = r_id\n  in if l_id = r_id then (l, rev_map)\n     else case r_lookup (l_id, v, r_id) (fst rev_map) of\n          None \\<Rightarrow>\n            let b = robdd_var (snd rev_map) l v r\n            in (b, r_update (l_id, v, r_id) b (fst rev_map),\n                Suc (snd rev_map))\n          | Some b \\<Rightarrow> (b, rev_map)\n  l_id = r_id\n\ngoal (1 subgoal):\n 1. robdd_invar_ext (insert (fst res) bs) v (fst res) \\<and>\n    rev_map_invar (insert (fst res) bs) (snd res) \\<and>\n    robdd_\\<alpha> (fst res) = robdd_\\<alpha> (robdd_var 0 l v r)", "by (simp add: fun_eq_iff l_\\<alpha> bs'_eq invar_lr(1) invar_rev_map invar_l')"], ["proof (state)\nthis:\n  robdd_invar_ext bs' v b \\<and>\n  rev_map_invar bs' rev_map' \\<and>\n  robdd_\\<alpha> b = robdd_\\<alpha> (robdd_var 0 l v r)\n\ngoal (1 subgoal):\n 1. l_id \\<noteq> r_id \\<Longrightarrow>\n    robdd_invar_ext bs' v b \\<and>\n    rev_map_invar bs' rev_map' \\<and>\n    robdd_\\<alpha> b = robdd_\\<alpha> (robdd_var 0 l v r)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. l_id \\<noteq> r_id \\<Longrightarrow>\n    robdd_invar_ext bs' v b \\<and>\n    rev_map_invar bs' rev_map' \\<and>\n    robdd_\\<alpha> b = robdd_\\<alpha> (robdd_var 0 l v r)", "case False"], ["proof (state)\nthis:\n  l_id \\<noteq> r_id\n\ngoal (1 subgoal):\n 1. l_id \\<noteq> r_id \\<Longrightarrow>\n    robdd_invar_ext bs' v b \\<and>\n    rev_map_invar bs' rev_map' \\<and>\n    robdd_\\<alpha> b = robdd_\\<alpha> (robdd_var 0 l v r)", "note l_id_neq = this"], ["proof (state)\nthis:\n  l_id \\<noteq> r_id\n\ngoal (1 subgoal):\n 1. l_id \\<noteq> r_id \\<Longrightarrow>\n    robdd_invar_ext bs' v b \\<and>\n    rev_map_invar bs' rev_map' \\<and>\n    robdd_\\<alpha> b = robdd_\\<alpha> (robdd_var 0 l v r)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. robdd_invar_ext bs' v b \\<and>\n    rev_map_invar bs' rev_map' \\<and>\n    robdd_\\<alpha> b = robdd_\\<alpha> (robdd_var 0 l v r)", "proof (cases \"r_lookup (l_id, v, r_id) (fst rev_map)\")"], ["proof (state)\ngoal (2 subgoals):\n 1. r_lookup (l_id, v, r_id) (fst rev_map) = None \\<Longrightarrow>\n    robdd_invar_ext bs' v b \\<and>\n    rev_map_invar bs' rev_map' \\<and>\n    robdd_\\<alpha> b = robdd_\\<alpha> (robdd_var 0 l v r)\n 2. \\<And>a.\n       r_lookup (l_id, v, r_id) (fst rev_map) = Some a \\<Longrightarrow>\n       robdd_invar_ext bs' v b \\<and>\n       rev_map_invar bs' rev_map' \\<and>\n       robdd_\\<alpha> b = robdd_\\<alpha> (robdd_var 0 l v r)", "case (Some b)"], ["proof (state)\nthis:\n  r_lookup (l_id, v, r_id) (fst rev_map) = Some b\n\ngoal (2 subgoals):\n 1. r_lookup (l_id, v, r_id) (fst rev_map) = None \\<Longrightarrow>\n    robdd_invar_ext bs' v b \\<and>\n    rev_map_invar bs' rev_map' \\<and>\n    robdd_\\<alpha> b = robdd_\\<alpha> (robdd_var 0 l v r)\n 2. \\<And>a.\n       r_lookup (l_id, v, r_id) (fst rev_map) = Some a \\<Longrightarrow>\n       robdd_invar_ext bs' v b \\<and>\n       rev_map_invar bs' rev_map' \\<and>\n       robdd_\\<alpha> b = robdd_\\<alpha> (robdd_var 0 l v r)", "note map_eq = this"], ["proof (state)\nthis:\n  r_lookup (l_id, v, r_id) (fst rev_map) = Some b\n\ngoal (2 subgoals):\n 1. r_lookup (l_id, v, r_id) (fst rev_map) = None \\<Longrightarrow>\n    robdd_invar_ext bs' v b \\<and>\n    rev_map_invar bs' rev_map' \\<and>\n    robdd_\\<alpha> b = robdd_\\<alpha> (robdd_var 0 l v r)\n 2. \\<And>a.\n       r_lookup (l_id, v, r_id) (fst rev_map) = Some a \\<Longrightarrow>\n       robdd_invar_ext bs' v b \\<and>\n       rev_map_invar bs' rev_map' \\<and>\n       robdd_\\<alpha> b = robdd_\\<alpha> (robdd_var 0 l v r)", "from r_invar rev_map_invar_D2[OF invar_rev_map, of l_id v r_id b] map_eq"], ["proof (chain)\npicking this:\n  r_invar (fst rev_map)\n  r_\\<alpha> (fst rev_map) (l_id, v, r_id) = Some b \\<Longrightarrow>\n  robdd_invar_ext bs v b \\<and>\n  b \\<in> bs \\<and>\n  (\\<exists>l r i.\n      b = robdd_var i l v r \\<and>\n      robdd_get_id l = l_id \\<and> robdd_get_id r = r_id)\n  r_lookup (l_id, v, r_id) (fst rev_map) = Some b", "obtain l' r' i where\n           invar_b: \"robdd_invar_ext bs v b\" and\n           b_in: \"b \\<in> bs\" and\n           b_eq: \"b = robdd_var i l' v r'\" and\n           l_id_eq: \"robdd_get_id l' = l_id\" and \n           r_id_eq: \"robdd_get_id r' = r_id\""], ["proof (prove)\nusing this:\n  r_invar (fst rev_map)\n  r_\\<alpha> (fst rev_map) (l_id, v, r_id) = Some b \\<Longrightarrow>\n  robdd_invar_ext bs v b \\<and>\n  b \\<in> bs \\<and>\n  (\\<exists>l r i.\n      b = robdd_var i l v r \\<and>\n      robdd_get_id l = l_id \\<and> robdd_get_id r = r_id)\n  r_lookup (l_id, v, r_id) (fst rev_map) = Some b\n\ngoal (1 subgoal):\n 1. (\\<And>i l' r'.\n        \\<lbrakk>robdd_invar_ext bs v b; b \\<in> bs;\n         b = robdd_var i l' v r'; robdd_get_id l' = l_id;\n         robdd_get_id r' = r_id\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding rev_map_invar_def"], ["proof (prove)\nusing this:\n  r_invar (fst rev_map)\n  r_\\<alpha> (fst rev_map) (l_id, v, r_id) = Some b \\<Longrightarrow>\n  robdd_invar_ext bs v b \\<and>\n  b \\<in> bs \\<and>\n  (\\<exists>l r i.\n      b = robdd_var i l v r \\<and>\n      robdd_get_id l = l_id \\<and> robdd_get_id r = r_id)\n  r_lookup (l_id, v, r_id) (fst rev_map) = Some b\n\ngoal (1 subgoal):\n 1. (\\<And>i l' r'.\n        \\<lbrakk>robdd_invar_ext bs v b; b \\<in> bs;\n         b = robdd_var i l' v r'; robdd_get_id l' = l_id;\n         robdd_get_id r' = r_id\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (auto simp add: r.lookup_correct)"], ["proof (state)\nthis:\n  robdd_invar_ext bs v b\n  b \\<in> bs\n  b = robdd_var i l' v r'\n  robdd_get_id l' = l_id\n  robdd_get_id r' = r_id\n\ngoal (2 subgoals):\n 1. r_lookup (l_id, v, r_id) (fst rev_map) = None \\<Longrightarrow>\n    robdd_invar_ext bs' v b \\<and>\n    rev_map_invar bs' rev_map' \\<and>\n    robdd_\\<alpha> b = robdd_\\<alpha> (robdd_var 0 l v r)\n 2. \\<And>a.\n       r_lookup (l_id, v, r_id) (fst rev_map) = Some a \\<Longrightarrow>\n       robdd_invar_ext bs' v b \\<and>\n       rev_map_invar bs' rev_map' \\<and>\n       robdd_\\<alpha> b = robdd_\\<alpha> (robdd_var 0 l v r)", "from b_in"], ["proof (chain)\npicking this:\n  b \\<in> bs", "have bs'_eq: \"insert b bs = bs\""], ["proof (prove)\nusing this:\n  b \\<in> bs\n\ngoal (1 subgoal):\n 1. insert b bs = bs", "by auto"], ["proof (state)\nthis:\n  insert b bs = bs\n\ngoal (2 subgoals):\n 1. r_lookup (l_id, v, r_id) (fst rev_map) = None \\<Longrightarrow>\n    robdd_invar_ext bs' v b \\<and>\n    rev_map_invar bs' rev_map' \\<and>\n    robdd_\\<alpha> b = robdd_\\<alpha> (robdd_var 0 l v r)\n 2. \\<And>a.\n       r_lookup (l_id, v, r_id) (fst rev_map) = Some a \\<Longrightarrow>\n       robdd_invar_ext bs' v b \\<and>\n       rev_map_invar bs' rev_map' \\<and>\n       robdd_\\<alpha> b = robdd_\\<alpha> (robdd_var 0 l v r)", "have b_\\<alpha>: \"robdd_\\<alpha> b = robdd_\\<alpha> (robdd_var 0 l' v r')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. robdd_\\<alpha> b = robdd_\\<alpha> (robdd_var 0 l' v r')", "unfolding b_eq"], ["proof (prove)\ngoal (1 subgoal):\n 1. robdd_\\<alpha> (robdd_var i l' v r') =\n    robdd_\\<alpha> (robdd_var 0 l' v r')", "by (simp add: fun_eq_iff)"], ["proof (state)\nthis:\n  robdd_\\<alpha> b = robdd_\\<alpha> (robdd_var 0 l' v r')\n\ngoal (2 subgoals):\n 1. r_lookup (l_id, v, r_id) (fst rev_map) = None \\<Longrightarrow>\n    robdd_invar_ext bs' v b \\<and>\n    rev_map_invar bs' rev_map' \\<and>\n    robdd_\\<alpha> b = robdd_\\<alpha> (robdd_var 0 l v r)\n 2. \\<And>a.\n       r_lookup (l_id, v, r_id) (fst rev_map) = Some a \\<Longrightarrow>\n       robdd_invar_ext bs' v b \\<and>\n       rev_map_invar bs' rev_map' \\<and>\n       robdd_\\<alpha> b = robdd_\\<alpha> (robdd_var 0 l v r)", "have lr'_eq: \"l' = l\" \"r' = r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. l' = l &&& r' = r", "proof -"], ["proof (state)\ngoal (2 subgoals):\n 1. l' = l\n 2. r' = r", "from b_in b_eq"], ["proof (chain)\npicking this:\n  b \\<in> bs\n  b = robdd_var i l' v r'", "have lr'_in': \"l' \\<in> subrobdds_set bs\" \"r' \\<in> subrobdds_set bs\""], ["proof (prove)\nusing this:\n  b \\<in> bs\n  b = robdd_var i l' v r'\n\ngoal (1 subgoal):\n 1. l' \\<in> subrobdds_set bs &&& r' \\<in> subrobdds_set bs", "apply (simp_all add: subrobdds_set_def)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>robdd_var i l' v r' \\<in> bs; b = robdd_var i l' v r'\\<rbrakk>\n    \\<Longrightarrow> \\<exists>x\\<in>bs. l' \\<in> subrobdds x\n 2. \\<lbrakk>robdd_var i l' v r' \\<in> bs; b = robdd_var i l' v r'\\<rbrakk>\n    \\<Longrightarrow> \\<exists>x\\<in>bs. r' \\<in> subrobdds x", "apply (auto intro: bexI [of _ b])"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  l' \\<in> subrobdds_set bs\n  r' \\<in> subrobdds_set bs\n\ngoal (2 subgoals):\n 1. l' = l\n 2. r' = r", "from invar_ids_equal lr_in' lr'_in' l_id_eq r_id_eq"], ["proof (chain)\npicking this:\n  robdd_invar_ids_equal bs\n  l \\<in> subrobdds_set bs\n  r \\<in> subrobdds_set bs\n  l' \\<in> subrobdds_set bs\n  r' \\<in> subrobdds_set bs\n  robdd_get_id l' = l_id\n  robdd_get_id r' = r_id", "show \"l' = l\" \"r' = r\""], ["proof (prove)\nusing this:\n  robdd_invar_ids_equal bs\n  l \\<in> subrobdds_set bs\n  r \\<in> subrobdds_set bs\n  l' \\<in> subrobdds_set bs\n  r' \\<in> subrobdds_set bs\n  robdd_get_id l' = l_id\n  robdd_get_id r' = r_id\n\ngoal (1 subgoal):\n 1. l' = l &&& r' = r", "unfolding robdd_invar_ids_equal_def l_id_def r_id_def"], ["proof (prove)\nusing this:\n  \\<forall>b1 b2.\n     b1 \\<in> subrobdds_set bs \\<and>\n     b2 \\<in> subrobdds_set bs \\<longrightarrow>\n     (robdd_get_id b1 = robdd_get_id b2) = (b1 = b2)\n  l \\<in> subrobdds_set bs\n  r \\<in> subrobdds_set bs\n  l' \\<in> subrobdds_set bs\n  r' \\<in> subrobdds_set bs\n  robdd_get_id l' = robdd_get_id l\n  robdd_get_id r' = robdd_get_id r\n\ngoal (1 subgoal):\n 1. l' = l &&& r' = r", "by auto"], ["proof (state)\nthis:\n  l' = l\n  r' = r\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  l' = l\n  r' = r\n\ngoal (2 subgoals):\n 1. r_lookup (l_id, v, r_id) (fst rev_map) = None \\<Longrightarrow>\n    robdd_invar_ext bs' v b \\<and>\n    rev_map_invar bs' rev_map' \\<and>\n    robdd_\\<alpha> b = robdd_\\<alpha> (robdd_var 0 l v r)\n 2. \\<And>a.\n       r_lookup (l_id, v, r_id) (fst rev_map) = Some a \\<Longrightarrow>\n       robdd_invar_ext bs' v b \\<and>\n       rev_map_invar bs' rev_map' \\<and>\n       robdd_\\<alpha> b = robdd_\\<alpha> (robdd_var 0 l v r)", "from res_def l_id_neq"], ["proof (chain)\npicking this:\n  res \\<equiv> robdd_construct rev_map l v r\n  l_id \\<noteq> r_id", "show ?thesis"], ["proof (prove)\nusing this:\n  res \\<equiv> robdd_construct rev_map l v r\n  l_id \\<noteq> r_id\n\ngoal (1 subgoal):\n 1. robdd_invar_ext bs' v b \\<and>\n    rev_map_invar bs' rev_map' \\<and>\n    robdd_\\<alpha> b = robdd_\\<alpha> (robdd_var 0 l v r)", "unfolding robdd_construct_def l_id_def[symmetric] r_id_def[symmetric]\n                  bs'_def rev_map'_def b_def"], ["proof (prove)\nusing this:\n  res \\<equiv>\n  let l_id = l_id; r_id = r_id\n  in if l_id = r_id then (l, rev_map)\n     else case r_lookup (l_id, v, r_id) (fst rev_map) of\n          None \\<Rightarrow>\n            let b = robdd_var (snd rev_map) l v r\n            in (b, r_update (l_id, v, r_id) b (fst rev_map),\n                Suc (snd rev_map))\n          | Some b \\<Rightarrow> (b, rev_map)\n  l_id \\<noteq> r_id\n\ngoal (1 subgoal):\n 1. robdd_invar_ext (insert (fst res) bs) v (fst res) \\<and>\n    rev_map_invar (insert (fst res) bs) (snd res) \\<and>\n    robdd_\\<alpha> (fst res) = robdd_\\<alpha> (robdd_var 0 l v r)", "by (simp add: map_eq bs'_eq invar_b b_\\<alpha> lr'_eq invar_rev_map)"], ["proof (state)\nthis:\n  robdd_invar_ext bs' v b \\<and>\n  rev_map_invar bs' rev_map' \\<and>\n  robdd_\\<alpha> b = robdd_\\<alpha> (robdd_var 0 l v r)\n\ngoal (1 subgoal):\n 1. r_lookup (l_id, v, r_id) (fst rev_map) = None \\<Longrightarrow>\n    robdd_invar_ext bs' v b \\<and>\n    rev_map_invar bs' rev_map' \\<and>\n    robdd_\\<alpha> b = robdd_\\<alpha> (robdd_var 0 l v r)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. r_lookup (l_id, v, r_id) (fst rev_map) = None \\<Longrightarrow>\n    robdd_invar_ext bs' v b \\<and>\n    rev_map_invar bs' rev_map' \\<and>\n    robdd_\\<alpha> b = robdd_\\<alpha> (robdd_var 0 l v r)", "case None"], ["proof (state)\nthis:\n  r_lookup (l_id, v, r_id) (fst rev_map) = None\n\ngoal (1 subgoal):\n 1. r_lookup (l_id, v, r_id) (fst rev_map) = None \\<Longrightarrow>\n    robdd_invar_ext bs' v b \\<and>\n    rev_map_invar bs' rev_map' \\<and>\n    robdd_\\<alpha> b = robdd_\\<alpha> (robdd_var 0 l v r)", "note map_eq = this"], ["proof (state)\nthis:\n  r_lookup (l_id, v, r_id) (fst rev_map) = None\n\ngoal (1 subgoal):\n 1. r_lookup (l_id, v, r_id) (fst rev_map) = None \\<Longrightarrow>\n    robdd_invar_ext bs' v b \\<and>\n    rev_map_invar bs' rev_map' \\<and>\n    robdd_\\<alpha> b = robdd_\\<alpha> (robdd_var 0 l v r)", "define b' where \"b' = robdd_var (snd rev_map) l v r\""], ["proof (state)\nthis:\n  b' = robdd_var (snd rev_map) l v r\n\ngoal (1 subgoal):\n 1. r_lookup (l_id, v, r_id) (fst rev_map) = None \\<Longrightarrow>\n    robdd_invar_ext bs' v b \\<and>\n    rev_map_invar bs' rev_map' \\<and>\n    robdd_\\<alpha> b = robdd_\\<alpha> (robdd_var 0 l v r)", "have \\<alpha>_b': \"robdd_\\<alpha> b' = robdd_\\<alpha> (robdd_var 0 l v r)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. robdd_\\<alpha> b' = robdd_\\<alpha> (robdd_var 0 l v r)", "unfolding b'_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. robdd_\\<alpha> (robdd_var (snd rev_map) l v r) =\n    robdd_\\<alpha> (robdd_var 0 l v r)", "by (simp add: fun_eq_iff)"], ["proof (state)\nthis:\n  robdd_\\<alpha> b' = robdd_\\<alpha> (robdd_var 0 l v r)\n\ngoal (1 subgoal):\n 1. r_lookup (l_id, v, r_id) (fst rev_map) = None \\<Longrightarrow>\n    robdd_invar_ext bs' v b \\<and>\n    rev_map_invar bs' rev_map' \\<and>\n    robdd_\\<alpha> b = robdd_\\<alpha> (robdd_var 0 l v r)", "from lr_in' invar_ids l_id_neq"], ["proof (chain)\npicking this:\n  l \\<in> subrobdds_set bs\n  r \\<in> subrobdds_set bs\n  robdd_invar_ids bs\n  l_id \\<noteq> r_id", "have \"robdd_\\<alpha> l \\<noteq> robdd_\\<alpha> r\""], ["proof (prove)\nusing this:\n  l \\<in> subrobdds_set bs\n  r \\<in> subrobdds_set bs\n  robdd_invar_ids bs\n  l_id \\<noteq> r_id\n\ngoal (1 subgoal):\n 1. robdd_\\<alpha> l \\<noteq> robdd_\\<alpha> r", "unfolding robdd_invar_ids_def l_id_def r_id_def"], ["proof (prove)\nusing this:\n  l \\<in> subrobdds_set bs\n  r \\<in> subrobdds_set bs\n  \\<forall>b1 b2.\n     b1 \\<in> subrobdds_set bs \\<and>\n     b2 \\<in> subrobdds_set bs \\<longrightarrow>\n     (robdd_\\<alpha> b1 = robdd_\\<alpha> b2) =\n     (robdd_get_id b1 = robdd_get_id b2)\n  robdd_get_id l \\<noteq> robdd_get_id r\n\ngoal (1 subgoal):\n 1. robdd_\\<alpha> l \\<noteq> robdd_\\<alpha> r", "by simp"], ["proof (state)\nthis:\n  robdd_\\<alpha> l \\<noteq> robdd_\\<alpha> r\n\ngoal (1 subgoal):\n 1. r_lookup (l_id, v, r_id) (fst rev_map) = None \\<Longrightarrow>\n    robdd_invar_ext bs' v b \\<and>\n    rev_map_invar bs' rev_map' \\<and>\n    robdd_\\<alpha> b = robdd_\\<alpha> (robdd_var 0 l v r)", "with robdd_equiv_implies_sem_equiv[of l r]"], ["proof (chain)\npicking this:\n  robdd_equiv l r \\<Longrightarrow> robdd_\\<alpha> l = robdd_\\<alpha> r\n  robdd_\\<alpha> l \\<noteq> robdd_\\<alpha> r", "have l_not_equiv: \"~(robdd_equiv l r)\""], ["proof (prove)\nusing this:\n  robdd_equiv l r \\<Longrightarrow> robdd_\\<alpha> l = robdd_\\<alpha> r\n  robdd_\\<alpha> l \\<noteq> robdd_\\<alpha> r\n\ngoal (1 subgoal):\n 1. \\<not> robdd_equiv l r", "by blast"], ["proof (state)\nthis:\n  \\<not> robdd_equiv l r\n\ngoal (1 subgoal):\n 1. r_lookup (l_id, v, r_id) (fst rev_map) = None \\<Longrightarrow>\n    robdd_invar_ext bs' v b \\<and>\n    rev_map_invar bs' rev_map' \\<and>\n    robdd_\\<alpha> b = robdd_\\<alpha> (robdd_var 0 l v r)", "from invar_lr"], ["proof (chain)\npicking this:\n  robdd_invar_ext bs (Suc v) l\n  robdd_invar_ext bs (Suc v) r", "have b'_invar_vars: \"robdd_invar_vars b'\" and b'_invar_reduced: \"robdd_invar_reduced b'\""], ["proof (prove)\nusing this:\n  robdd_invar_ext bs (Suc v) l\n  robdd_invar_ext bs (Suc v) r\n\ngoal (1 subgoal):\n 1. robdd_invar_vars b' &&& robdd_invar_reduced b'", "unfolding b'_def robdd_invar_vars_def"], ["proof (prove)\nusing this:\n  robdd_invar_ext bs (Suc v) l\n  robdd_invar_ext bs (Suc v) r\n\ngoal (1 subgoal):\n 1. robdd_invar_vars_greater 0 (robdd_var (snd rev_map) l v r) &&&\n    robdd_invar_reduced (robdd_var (snd rev_map) l v r)", "by (simp_all add: robdd_invar_ext_def l_not_equiv)"], ["proof (state)\nthis:\n  robdd_invar_vars b'\n  robdd_invar_reduced b'\n\ngoal (1 subgoal):\n 1. r_lookup (l_id, v, r_id) (fst rev_map) = None \\<Longrightarrow>\n    robdd_invar_ext bs' v b \\<and>\n    rev_map_invar bs' rev_map' \\<and>\n    robdd_\\<alpha> b = robdd_\\<alpha> (robdd_var 0 l v r)", "{"], ["proof (state)\nthis:\n  robdd_invar_vars b'\n  robdd_invar_reduced b'\n\ngoal (1 subgoal):\n 1. r_lookup (l_id, v, r_id) (fst rev_map) = None \\<Longrightarrow>\n    robdd_invar_ext bs' v b \\<and>\n    rev_map_invar bs' rev_map' \\<and>\n    robdd_\\<alpha> b = robdd_\\<alpha> (robdd_var 0 l v r)", "fix b2"], ["proof (state)\ngoal (1 subgoal):\n 1. r_lookup (l_id, v, r_id) (fst rev_map) = None \\<Longrightarrow>\n    robdd_invar_ext bs' v b \\<and>\n    rev_map_invar bs' rev_map' \\<and>\n    robdd_\\<alpha> b = robdd_\\<alpha> (robdd_var 0 l v r)", "assume b2_in: \"b2 \\<in> subrobdds_set bs\""], ["proof (state)\nthis:\n  b2 \\<in> subrobdds_set bs\n\ngoal (1 subgoal):\n 1. r_lookup (l_id, v, r_id) (fst rev_map) = None \\<Longrightarrow>\n    robdd_invar_ext bs' v b \\<and>\n    rev_map_invar bs' rev_map' \\<and>\n    robdd_\\<alpha> b = robdd_\\<alpha> (robdd_var 0 l v r)", "from rev_map_invar_D3[OF invar_rev_map b2_in]"], ["proof (chain)\npicking this:\n  robdd_invar_ext bs 0 b2\n  robdd_get_id b2 < snd rev_map", "have id_neq: \"robdd_get_id b2 \\<noteq> robdd_get_id b'\""], ["proof (prove)\nusing this:\n  robdd_invar_ext bs 0 b2\n  robdd_get_id b2 < snd rev_map\n\ngoal (1 subgoal):\n 1. robdd_get_id b2 \\<noteq> robdd_get_id b'", "unfolding b'_def"], ["proof (prove)\nusing this:\n  robdd_invar_ext bs 0 b2\n  robdd_get_id b2 < snd rev_map\n\ngoal (1 subgoal):\n 1. robdd_get_id b2 \\<noteq> robdd_get_id (robdd_var (snd rev_map) l v r)", "by simp"], ["proof (state)\nthis:\n  robdd_get_id b2 \\<noteq> robdd_get_id b'\n\ngoal (1 subgoal):\n 1. r_lookup (l_id, v, r_id) (fst rev_map) = None \\<Longrightarrow>\n    robdd_invar_ext bs' v b \\<and>\n    rev_map_invar bs' rev_map' \\<and>\n    robdd_\\<alpha> b = robdd_\\<alpha> (robdd_var 0 l v r)", "have invar_b2: \"robdd_invar b2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. robdd_invar b2", "by (metis b2_in bs_OK)"], ["proof (state)\nthis:\n  robdd_invar b2\n\ngoal (1 subgoal):\n 1. r_lookup (l_id, v, r_id) (fst rev_map) = None \\<Longrightarrow>\n    robdd_invar_ext bs' v b \\<and>\n    rev_map_invar bs' rev_map' \\<and>\n    robdd_\\<alpha> b = robdd_\\<alpha> (robdd_var 0 l v r)", "have \\<alpha>_b2: \"robdd_\\<alpha> b2 \\<noteq> robdd_\\<alpha> b'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. robdd_\\<alpha> b2 \\<noteq> robdd_\\<alpha> b'", "proof (rule notI)"], ["proof (state)\ngoal (1 subgoal):\n 1. robdd_\\<alpha> b2 = robdd_\\<alpha> b' \\<Longrightarrow> False", "assume sem_eq: \"robdd_\\<alpha> b2 = robdd_\\<alpha> b'\""], ["proof (state)\nthis:\n  robdd_\\<alpha> b2 = robdd_\\<alpha> b'\n\ngoal (1 subgoal):\n 1. robdd_\\<alpha> b2 = robdd_\\<alpha> b' \\<Longrightarrow> False", "with invar_b2 robdd_equiv_alt_def_full[OF b'_invar_vars b'_invar_reduced, of b2]"], ["proof (chain)\npicking this:\n  robdd_invar b2\n  \\<lbrakk>robdd_invar_vars b2; robdd_invar_reduced b2\\<rbrakk>\n  \\<Longrightarrow> robdd_equiv b' b2 =\n                    (robdd_\\<alpha> b' = robdd_\\<alpha> b2)\n  robdd_\\<alpha> b2 = robdd_\\<alpha> b'", "have \"robdd_equiv b' b2\""], ["proof (prove)\nusing this:\n  robdd_invar b2\n  \\<lbrakk>robdd_invar_vars b2; robdd_invar_reduced b2\\<rbrakk>\n  \\<Longrightarrow> robdd_equiv b' b2 =\n                    (robdd_\\<alpha> b' = robdd_\\<alpha> b2)\n  robdd_\\<alpha> b2 = robdd_\\<alpha> b'\n\ngoal (1 subgoal):\n 1. robdd_equiv b' b2", "by (metis robdd_invar_alt_def)"], ["proof (state)\nthis:\n  robdd_equiv b' b2\n\ngoal (1 subgoal):\n 1. robdd_\\<alpha> b2 = robdd_\\<alpha> b' \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  robdd_equiv b' b2", "obtain i' l' r' where \n               b2_eq: \"b2 = robdd_var i' l' v r'\" and\n               l'_equiv: \"robdd_equiv l l'\" and\n               r'_equiv: \"robdd_equiv r r'\""], ["proof (prove)\nusing this:\n  robdd_equiv b' b2\n\ngoal (1 subgoal):\n 1. (\\<And>i' l' r'.\n        \\<lbrakk>b2 = robdd_var i' l' v r'; robdd_equiv l l';\n         robdd_equiv r r'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding b'_def"], ["proof (prove)\nusing this:\n  robdd_equiv (robdd_var (snd rev_map) l v r) b2\n\ngoal (1 subgoal):\n 1. (\\<And>i' l' r'.\n        \\<lbrakk>b2 = robdd_var i' l' v r'; robdd_equiv l l';\n         robdd_equiv r r'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  b2 = robdd_var i' l' v r'\n  robdd_equiv l l'\n  robdd_equiv r r'\n\ngoal (1 subgoal):\n 1. robdd_\\<alpha> b2 = robdd_\\<alpha> b' \\<Longrightarrow> False", "have r'_eq[simp]: \"r' = r\" and l'_eq[simp]: \"l' = l\""], ["proof (prove)\ngoal (1 subgoal):\n 1. r' = r &&& l' = l", "proof -"], ["proof (state)\ngoal (2 subgoals):\n 1. r' = r\n 2. l' = l", "have \"l' \\<in> subrobdds b2\" \"r' \\<in> subrobdds b2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. l' \\<in> subrobdds b2 &&& r' \\<in> subrobdds b2", "unfolding b2_eq"], ["proof (prove)\ngoal (1 subgoal):\n 1. l' \\<in> subrobdds (robdd_var i' l' v r') &&&\n    r' \\<in> subrobdds (robdd_var i' l' v r')", "by simp_all"], ["proof (state)\nthis:\n  l' \\<in> subrobdds b2\n  r' \\<in> subrobdds b2\n\ngoal (2 subgoals):\n 1. r' = r\n 2. l' = l", "with b2_in"], ["proof (chain)\npicking this:\n  b2 \\<in> subrobdds_set bs\n  l' \\<in> subrobdds b2\n  r' \\<in> subrobdds b2", "have \"l' \\<in> subrobdds_set bs\" \"r' \\<in> subrobdds_set bs\""], ["proof (prove)\nusing this:\n  b2 \\<in> subrobdds_set bs\n  l' \\<in> subrobdds b2\n  r' \\<in> subrobdds b2\n\ngoal (1 subgoal):\n 1. l' \\<in> subrobdds_set bs &&& r' \\<in> subrobdds_set bs", "by (metis subrobdds_set_subset_simp subsetD)+"], ["proof (state)\nthis:\n  l' \\<in> subrobdds_set bs\n  r' \\<in> subrobdds_set bs\n\ngoal (2 subgoals):\n 1. r' = r\n 2. l' = l", "with robdd_invar_ids_equiv_implies_eq[of \"subrobdds_set bs\" l l']\n                   robdd_invar_ids_equiv_implies_eq[of \"subrobdds_set bs\" r r']"], ["proof (chain)\npicking this:\n  \\<lbrakk>robdd_invar_ids (subrobdds_set bs); l \\<in> subrobdds_set bs;\n   l' \\<in> subrobdds_set bs; robdd_equiv l l'\\<rbrakk>\n  \\<Longrightarrow> l = l'\n  \\<lbrakk>robdd_invar_ids (subrobdds_set bs); r \\<in> subrobdds_set bs;\n   r' \\<in> subrobdds_set bs; robdd_equiv r r'\\<rbrakk>\n  \\<Longrightarrow> r = r'\n  l' \\<in> subrobdds_set bs\n  r' \\<in> subrobdds_set bs", "show \"r' = r\" \"l' = l\""], ["proof (prove)\nusing this:\n  \\<lbrakk>robdd_invar_ids (subrobdds_set bs); l \\<in> subrobdds_set bs;\n   l' \\<in> subrobdds_set bs; robdd_equiv l l'\\<rbrakk>\n  \\<Longrightarrow> l = l'\n  \\<lbrakk>robdd_invar_ids (subrobdds_set bs); r \\<in> subrobdds_set bs;\n   r' \\<in> subrobdds_set bs; robdd_equiv r r'\\<rbrakk>\n  \\<Longrightarrow> r = r'\n  l' \\<in> subrobdds_set bs\n  r' \\<in> subrobdds_set bs\n\ngoal (1 subgoal):\n 1. r' = r &&& l' = l", "by (simp_all add: l'_equiv r'_equiv robdd_invar_ids_expand invar_ids lr_in')"], ["proof (state)\nthis:\n  r' = r\n  l' = l\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  r' = r\n  l' = l\n\ngoal (1 subgoal):\n 1. robdd_\\<alpha> b2 = robdd_\\<alpha> b' \\<Longrightarrow> False", "from rev_map_invar_D1[OF invar_rev_map b2_in[unfolded b2_eq]] map_eq"], ["proof (chain)\npicking this:\n  r_\\<alpha> (fst rev_map) (robdd_get_id l', v, robdd_get_id r') =\n  Some (robdd_var i' l' v r')\n  r_lookup (l_id, v, r_id) (fst rev_map) = None", "show \"False\""], ["proof (prove)\nusing this:\n  r_\\<alpha> (fst rev_map) (robdd_get_id l', v, robdd_get_id r') =\n  Some (robdd_var i' l' v r')\n  r_lookup (l_id, v, r_id) (fst rev_map) = None\n\ngoal (1 subgoal):\n 1. False", "by (simp add: l_id_def r_id_def r.lookup_correct r_invar)"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  robdd_\\<alpha> b2 \\<noteq> robdd_\\<alpha> b'\n\ngoal (1 subgoal):\n 1. r_lookup (l_id, v, r_id) (fst rev_map) = None \\<Longrightarrow>\n    robdd_invar_ext bs' v b \\<and>\n    rev_map_invar bs' rev_map' \\<and>\n    robdd_\\<alpha> b = robdd_\\<alpha> (robdd_var 0 l v r)", "note invar_b2 \\<alpha>_b2 id_neq"], ["proof (state)\nthis:\n  robdd_invar b2\n  robdd_\\<alpha> b2 \\<noteq> robdd_\\<alpha> b'\n  robdd_get_id b2 \\<noteq> robdd_get_id b'\n\ngoal (1 subgoal):\n 1. r_lookup (l_id, v, r_id) (fst rev_map) = None \\<Longrightarrow>\n    robdd_invar_ext bs' v b \\<and>\n    rev_map_invar bs' rev_map' \\<and>\n    robdd_\\<alpha> b = robdd_\\<alpha> (robdd_var 0 l v r)", "}"], ["proof (state)\nthis:\n  ?b2.2 \\<in> subrobdds_set bs \\<Longrightarrow> robdd_invar ?b2.2\n  ?b2.2 \\<in> subrobdds_set bs \\<Longrightarrow>\n  robdd_\\<alpha> ?b2.2 \\<noteq> robdd_\\<alpha> b'\n  ?b2.2 \\<in> subrobdds_set bs \\<Longrightarrow>\n  robdd_get_id ?b2.2 \\<noteq> robdd_get_id b'\n\ngoal (1 subgoal):\n 1. r_lookup (l_id, v, r_id) (fst rev_map) = None \\<Longrightarrow>\n    robdd_invar_ext bs' v b \\<and>\n    rev_map_invar bs' rev_map' \\<and>\n    robdd_\\<alpha> b = robdd_\\<alpha> (robdd_var 0 l v r)", "note in_bs_b'_props = this"], ["proof (state)\nthis:\n  ?b2.2 \\<in> subrobdds_set bs \\<Longrightarrow> robdd_invar ?b2.2\n  ?b2.2 \\<in> subrobdds_set bs \\<Longrightarrow>\n  robdd_\\<alpha> ?b2.2 \\<noteq> robdd_\\<alpha> b'\n  ?b2.2 \\<in> subrobdds_set bs \\<Longrightarrow>\n  robdd_get_id ?b2.2 \\<noteq> robdd_get_id b'\n\ngoal (1 subgoal):\n 1. r_lookup (l_id, v, r_id) (fst rev_map) = None \\<Longrightarrow>\n    robdd_invar_ext bs' v b \\<and>\n    rev_map_invar bs' rev_map' \\<and>\n    robdd_\\<alpha> b = robdd_\\<alpha> (robdd_var 0 l v r)", "have subrobdds_set_bs_simp: \"subrobdds_set (insert b' bs) = insert b' (subrobdds_set bs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. subrobdds_set (insert b' bs) = insert b' (subrobdds_set bs)", "unfolding subrobdds_set_def b'_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Union> (subrobdds ` insert (robdd_var (snd rev_map) l v r) bs) =\n    insert (robdd_var (snd rev_map) l v r) (\\<Union> (subrobdds ` bs))", "using lr_in"], ["proof (prove)\nusing this:\n  l \\<in> bs\n  r \\<in> bs\n\ngoal (1 subgoal):\n 1. \\<Union> (subrobdds ` insert (robdd_var (snd rev_map) l v r) bs) =\n    insert (robdd_var (snd rev_map) l v r) (\\<Union> (subrobdds ` bs))", "by (auto simp add: set_eq_iff Bex_def)"], ["proof (state)\nthis:\n  subrobdds_set (insert b' bs) = insert b' (subrobdds_set bs)\n\ngoal (1 subgoal):\n 1. r_lookup (l_id, v, r_id) (fst rev_map) = None \\<Longrightarrow>\n    robdd_invar_ext bs' v b \\<and>\n    rev_map_invar bs' rev_map' \\<and>\n    robdd_\\<alpha> b = robdd_\\<alpha> (robdd_var 0 l v r)", "have invar_ids': \"robdd_invar_ids (insert b' bs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. robdd_invar_ids (insert b' bs)", "proof (rule robdd_invar_idsI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>b1 b2.\n       \\<lbrakk>b1 \\<in> subrobdds_set (insert b' bs);\n        b2 \\<in> subrobdds_set (insert b' bs)\\<rbrakk>\n       \\<Longrightarrow> (robdd_\\<alpha> b1 = robdd_\\<alpha> b2) =\n                         (robdd_get_id b1 = robdd_get_id b2)", "fix b1 b2"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>b1 b2.\n       \\<lbrakk>b1 \\<in> subrobdds_set (insert b' bs);\n        b2 \\<in> subrobdds_set (insert b' bs)\\<rbrakk>\n       \\<Longrightarrow> (robdd_\\<alpha> b1 = robdd_\\<alpha> b2) =\n                         (robdd_get_id b1 = robdd_get_id b2)", "assume b1_in: \"b1 \\<in> subrobdds_set (insert b' bs)\" and\n                 b2_in: \"b2 \\<in> subrobdds_set (insert b' bs)\""], ["proof (state)\nthis:\n  b1 \\<in> subrobdds_set (insert b' bs)\n  b2 \\<in> subrobdds_set (insert b' bs)\n\ngoal (1 subgoal):\n 1. \\<And>b1 b2.\n       \\<lbrakk>b1 \\<in> subrobdds_set (insert b' bs);\n        b2 \\<in> subrobdds_set (insert b' bs)\\<rbrakk>\n       \\<Longrightarrow> (robdd_\\<alpha> b1 = robdd_\\<alpha> b2) =\n                         (robdd_get_id b1 = robdd_get_id b2)", "from b1_in b2_in"], ["proof (chain)\npicking this:\n  b1 \\<in> subrobdds_set (insert b' bs)\n  b2 \\<in> subrobdds_set (insert b' bs)", "show \"(robdd_\\<alpha> b1 = robdd_\\<alpha> b2) = (robdd_get_id b1 = robdd_get_id b2)\""], ["proof (prove)\nusing this:\n  b1 \\<in> subrobdds_set (insert b' bs)\n  b2 \\<in> subrobdds_set (insert b' bs)\n\ngoal (1 subgoal):\n 1. (robdd_\\<alpha> b1 = robdd_\\<alpha> b2) =\n    (robdd_get_id b1 = robdd_get_id b2)", "unfolding subrobdds_set_bs_simp"], ["proof (prove)\nusing this:\n  b1 \\<in> insert b' (subrobdds_set bs)\n  b2 \\<in> insert b' (subrobdds_set bs)\n\ngoal (1 subgoal):\n 1. (robdd_\\<alpha> b1 = robdd_\\<alpha> b2) =\n    (robdd_get_id b1 = robdd_get_id b2)", "using robdd_invar_idsD[OF invar_ids, of b1 b2] in_bs_b'_props"], ["proof (prove)\nusing this:\n  b1 \\<in> insert b' (subrobdds_set bs)\n  b2 \\<in> insert b' (subrobdds_set bs)\n  \\<lbrakk>b1 \\<in> subrobdds_set bs; b2 \\<in> subrobdds_set bs\\<rbrakk>\n  \\<Longrightarrow> (robdd_\\<alpha> b1 = robdd_\\<alpha> b2) =\n                    (robdd_get_id b1 = robdd_get_id b2)\n  ?b2.2 \\<in> subrobdds_set bs \\<Longrightarrow> robdd_invar ?b2.2\n  ?b2.2 \\<in> subrobdds_set bs \\<Longrightarrow>\n  robdd_\\<alpha> ?b2.2 \\<noteq> robdd_\\<alpha> b'\n  ?b2.2 \\<in> subrobdds_set bs \\<Longrightarrow>\n  robdd_get_id ?b2.2 \\<noteq> robdd_get_id b'\n\ngoal (1 subgoal):\n 1. (robdd_\\<alpha> b1 = robdd_\\<alpha> b2) =\n    (robdd_get_id b1 = robdd_get_id b2)", "by simp metis"], ["proof (state)\nthis:\n  (robdd_\\<alpha> b1 = robdd_\\<alpha> b2) =\n  (robdd_get_id b1 = robdd_get_id b2)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  robdd_invar_ids (insert b' bs)\n\ngoal (1 subgoal):\n 1. r_lookup (l_id, v, r_id) (fst rev_map) = None \\<Longrightarrow>\n    robdd_invar_ext bs' v b \\<and>\n    rev_map_invar bs' rev_map' \\<and>\n    robdd_\\<alpha> b = robdd_\\<alpha> (robdd_var 0 l v r)", "from invar_ids' b'_invar_reduced b'_invar_vars"], ["proof (chain)\npicking this:\n  robdd_invar_ids (insert b' bs)\n  robdd_invar_reduced b'\n  robdd_invar_vars b'", "have invar_b': \"robdd_invar_ext (insert b' bs) v b'\""], ["proof (prove)\nusing this:\n  robdd_invar_ids (insert b' bs)\n  robdd_invar_reduced b'\n  robdd_invar_vars b'\n\ngoal (1 subgoal):\n 1. robdd_invar_ext (insert b' bs) v b'", "by (simp add: robdd_invar_ext_def robdd_invar_vars_def b'_def)"], ["proof (state)\nthis:\n  robdd_invar_ext (insert b' bs) v b'\n\ngoal (1 subgoal):\n 1. r_lookup (l_id, v, r_id) (fst rev_map) = None \\<Longrightarrow>\n    robdd_invar_ext bs' v b \\<and>\n    rev_map_invar bs' rev_map' \\<and>\n    robdd_\\<alpha> b = robdd_\\<alpha> (robdd_var 0 l v r)", "have invar_rev_map': \"rev_map_invar bs' rev_map'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rev_map_invar bs' rev_map'", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. rev_map_invar bs' rev_map'", "let ?rm = \"(r_update (l_id, v, r_id) b' (fst rev_map), Suc (snd rev_map))\""], ["proof (state)\ngoal (1 subgoal):\n 1. rev_map_invar bs' rev_map'", "have \"rev_map_invar (insert b' bs) ?rm\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rev_map_invar (insert b' bs)\n     (r_update (l_id, v, r_id) b' (fst rev_map), Suc (snd rev_map))", "proof"], ["proof (state)\ngoal (5 subgoals):\n 1. r_invar\n     (fst (r_update (l_id, v, r_id) b' (fst rev_map), Suc (snd rev_map)))\n 2. 1 < snd (r_update (l_id, v, r_id) b' (fst rev_map), Suc (snd rev_map))\n 3. \\<And>b.\n       b \\<in> subrobdds_set (insert b' bs) \\<Longrightarrow>\n       robdd_invar_ext (insert b' bs) 0 b \\<and>\n       robdd_get_id b\n       < snd (r_update (l_id, v, r_id) b' (fst rev_map), Suc (snd rev_map))\n 4. \\<And>li va ri b.\n       r_\\<alpha>\n        (fst (r_update (l_id, v, r_id) b' (fst rev_map), Suc (snd rev_map)))\n        (li, va, ri) =\n       Some b \\<Longrightarrow>\n       robdd_invar_ext (insert b' bs) va b \\<and>\n       b \\<in> insert b' bs \\<and>\n       (\\<exists>l r i.\n           b = robdd_var i l va r \\<and>\n           robdd_get_id l = li \\<and> robdd_get_id r = ri)\n 5. \\<And>i l r va.\n       robdd_var i l va r\n       \\<in> subrobdds_set (insert b' bs) \\<Longrightarrow>\n       r_\\<alpha>\n        (fst (r_update (l_id, v, r_id) b' (fst rev_map), Suc (snd rev_map)))\n        (robdd_get_id l, va, robdd_get_id r) =\n       Some (robdd_var i l va r)", "from map_eq"], ["proof (chain)\npicking this:\n  r_lookup (l_id, v, r_id) (fst rev_map) = None", "show \"r_invar (fst ?rm)\""], ["proof (prove)\nusing this:\n  r_lookup (l_id, v, r_id) (fst rev_map) = None\n\ngoal (1 subgoal):\n 1. r_invar\n     (fst (r_update (l_id, v, r_id) b' (fst rev_map), Suc (snd rev_map)))", "apply (simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. r_lookup (l_id, v, r_id) (fst rev_map) = None \\<Longrightarrow>\n    r_invar (r_update (l_id, v, r_id) b' (fst rev_map))", "apply (rule r.update_dj_correct)"], ["proof (prove)\ngoal (2 subgoals):\n 1. r_lookup (l_id, v, r_id) (fst rev_map) = None \\<Longrightarrow>\n    r_invar (fst rev_map)\n 2. r_lookup (l_id, v, r_id) (fst rev_map) = None \\<Longrightarrow>\n    (l_id, v, r_id) \\<notin> dom (r_\\<alpha> (fst rev_map))", "apply (simp_all add: r_invar r.lookup_correct dom_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  r_invar\n   (fst (r_update (l_id, v, r_id) b' (fst rev_map), Suc (snd rev_map)))\n\ngoal (4 subgoals):\n 1. 1 < snd (r_update (l_id, v, r_id) b' (fst rev_map), Suc (snd rev_map))\n 2. \\<And>b.\n       b \\<in> subrobdds_set (insert b' bs) \\<Longrightarrow>\n       robdd_invar_ext (insert b' bs) 0 b \\<and>\n       robdd_get_id b\n       < snd (r_update (l_id, v, r_id) b' (fst rev_map), Suc (snd rev_map))\n 3. \\<And>li va ri b.\n       r_\\<alpha>\n        (fst (r_update (l_id, v, r_id) b' (fst rev_map), Suc (snd rev_map)))\n        (li, va, ri) =\n       Some b \\<Longrightarrow>\n       robdd_invar_ext (insert b' bs) va b \\<and>\n       b \\<in> insert b' bs \\<and>\n       (\\<exists>l r i.\n           b = robdd_var i l va r \\<and>\n           robdd_get_id l = li \\<and> robdd_get_id r = ri)\n 4. \\<And>i l r va.\n       robdd_var i l va r\n       \\<in> subrobdds_set (insert b' bs) \\<Longrightarrow>\n       r_\\<alpha>\n        (fst (r_update (l_id, v, r_id) b' (fst rev_map), Suc (snd rev_map)))\n        (robdd_get_id l, va, robdd_get_id r) =\n       Some (robdd_var i l va r)", "next"], ["proof (state)\ngoal (4 subgoals):\n 1. 1 < snd (r_update (l_id, v, r_id) b' (fst rev_map), Suc (snd rev_map))\n 2. \\<And>b.\n       b \\<in> subrobdds_set (insert b' bs) \\<Longrightarrow>\n       robdd_invar_ext (insert b' bs) 0 b \\<and>\n       robdd_get_id b\n       < snd (r_update (l_id, v, r_id) b' (fst rev_map), Suc (snd rev_map))\n 3. \\<And>li va ri b.\n       r_\\<alpha>\n        (fst (r_update (l_id, v, r_id) b' (fst rev_map), Suc (snd rev_map)))\n        (li, va, ri) =\n       Some b \\<Longrightarrow>\n       robdd_invar_ext (insert b' bs) va b \\<and>\n       b \\<in> insert b' bs \\<and>\n       (\\<exists>l r i.\n           b = robdd_var i l va r \\<and>\n           robdd_get_id l = li \\<and> robdd_get_id r = ri)\n 4. \\<And>i l r va.\n       robdd_var i l va r\n       \\<in> subrobdds_set (insert b' bs) \\<Longrightarrow>\n       r_\\<alpha>\n        (fst (r_update (l_id, v, r_id) b' (fst rev_map), Suc (snd rev_map)))\n        (robdd_get_id l, va, robdd_get_id r) =\n       Some (robdd_var i l va r)", "from invar_rev_map"], ["proof (chain)\npicking this:\n  rev_map_invar bs rev_map", "show \"1 < snd ?rm\""], ["proof (prove)\nusing this:\n  rev_map_invar bs rev_map\n\ngoal (1 subgoal):\n 1. 1 < snd (r_update (l_id, v, r_id) b' (fst rev_map), Suc (snd rev_map))", "unfolding rev_map_invar_def"], ["proof (prove)\nusing this:\n  r_invar (fst rev_map) \\<and>\n  1 < snd rev_map \\<and>\n  (\\<forall>b\\<in>subrobdds_set bs.\n      robdd_invar_ext bs 0 b \\<and> robdd_get_id b < snd rev_map) \\<and>\n  (\\<forall>li v ri b.\n      r_\\<alpha> (fst rev_map) (li, v, ri) = Some b \\<longrightarrow>\n      robdd_invar_ext bs v b \\<and>\n      b \\<in> bs \\<and>\n      (\\<exists>l r i.\n          b = robdd_var i l v r \\<and>\n          robdd_get_id l = li \\<and> robdd_get_id r = ri)) \\<and>\n  (\\<forall>i l r v.\n      robdd_var i l v r \\<in> subrobdds_set bs \\<longrightarrow>\n      r_\\<alpha> (fst rev_map) (robdd_get_id l, v, robdd_get_id r) =\n      Some (robdd_var i l v r))\n\ngoal (1 subgoal):\n 1. 1 < snd (r_update (l_id, v, r_id) b' (fst rev_map), Suc (snd rev_map))", "by simp"], ["proof (state)\nthis:\n  1 < snd (r_update (l_id, v, r_id) b' (fst rev_map), Suc (snd rev_map))\n\ngoal (3 subgoals):\n 1. \\<And>b.\n       b \\<in> subrobdds_set (insert b' bs) \\<Longrightarrow>\n       robdd_invar_ext (insert b' bs) 0 b \\<and>\n       robdd_get_id b\n       < snd (r_update (l_id, v, r_id) b' (fst rev_map), Suc (snd rev_map))\n 2. \\<And>li va ri b.\n       r_\\<alpha>\n        (fst (r_update (l_id, v, r_id) b' (fst rev_map), Suc (snd rev_map)))\n        (li, va, ri) =\n       Some b \\<Longrightarrow>\n       robdd_invar_ext (insert b' bs) va b \\<and>\n       b \\<in> insert b' bs \\<and>\n       (\\<exists>l r i.\n           b = robdd_var i l va r \\<and>\n           robdd_get_id l = li \\<and> robdd_get_id r = ri)\n 3. \\<And>i l r va.\n       robdd_var i l va r\n       \\<in> subrobdds_set (insert b' bs) \\<Longrightarrow>\n       r_\\<alpha>\n        (fst (r_update (l_id, v, r_id) b' (fst rev_map), Suc (snd rev_map)))\n        (robdd_get_id l, va, robdd_get_id r) =\n       Some (robdd_var i l va r)", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>b.\n       b \\<in> subrobdds_set (insert b' bs) \\<Longrightarrow>\n       robdd_invar_ext (insert b' bs) 0 b \\<and>\n       robdd_get_id b\n       < snd (r_update (l_id, v, r_id) b' (fst rev_map), Suc (snd rev_map))\n 2. \\<And>li va ri b.\n       r_\\<alpha>\n        (fst (r_update (l_id, v, r_id) b' (fst rev_map), Suc (snd rev_map)))\n        (li, va, ri) =\n       Some b \\<Longrightarrow>\n       robdd_invar_ext (insert b' bs) va b \\<and>\n       b \\<in> insert b' bs \\<and>\n       (\\<exists>l r i.\n           b = robdd_var i l va r \\<and>\n           robdd_get_id l = li \\<and> robdd_get_id r = ri)\n 3. \\<And>i l r va.\n       robdd_var i l va r\n       \\<in> subrobdds_set (insert b' bs) \\<Longrightarrow>\n       r_\\<alpha>\n        (fst (r_update (l_id, v, r_id) b' (fst rev_map), Suc (snd rev_map)))\n        (robdd_get_id l, va, robdd_get_id r) =\n       Some (robdd_var i l va r)", "fix b"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>b.\n       b \\<in> subrobdds_set (insert b' bs) \\<Longrightarrow>\n       robdd_invar_ext (insert b' bs) 0 b \\<and>\n       robdd_get_id b\n       < snd (r_update (l_id, v, r_id) b' (fst rev_map), Suc (snd rev_map))\n 2. \\<And>li va ri b.\n       r_\\<alpha>\n        (fst (r_update (l_id, v, r_id) b' (fst rev_map), Suc (snd rev_map)))\n        (li, va, ri) =\n       Some b \\<Longrightarrow>\n       robdd_invar_ext (insert b' bs) va b \\<and>\n       b \\<in> insert b' bs \\<and>\n       (\\<exists>l r i.\n           b = robdd_var i l va r \\<and>\n           robdd_get_id l = li \\<and> robdd_get_id r = ri)\n 3. \\<And>i l r va.\n       robdd_var i l va r\n       \\<in> subrobdds_set (insert b' bs) \\<Longrightarrow>\n       r_\\<alpha>\n        (fst (r_update (l_id, v, r_id) b' (fst rev_map), Suc (snd rev_map)))\n        (robdd_get_id l, va, robdd_get_id r) =\n       Some (robdd_var i l va r)", "assume b_in: \"b \\<in> subrobdds_set (insert b' bs)\""], ["proof (state)\nthis:\n  b \\<in> subrobdds_set (insert b' bs)\n\ngoal (3 subgoals):\n 1. \\<And>b.\n       b \\<in> subrobdds_set (insert b' bs) \\<Longrightarrow>\n       robdd_invar_ext (insert b' bs) 0 b \\<and>\n       robdd_get_id b\n       < snd (r_update (l_id, v, r_id) b' (fst rev_map), Suc (snd rev_map))\n 2. \\<And>li va ri b.\n       r_\\<alpha>\n        (fst (r_update (l_id, v, r_id) b' (fst rev_map), Suc (snd rev_map)))\n        (li, va, ri) =\n       Some b \\<Longrightarrow>\n       robdd_invar_ext (insert b' bs) va b \\<and>\n       b \\<in> insert b' bs \\<and>\n       (\\<exists>l r i.\n           b = robdd_var i l va r \\<and>\n           robdd_get_id l = li \\<and> robdd_get_id r = ri)\n 3. \\<And>i l r va.\n       robdd_var i l va r\n       \\<in> subrobdds_set (insert b' bs) \\<Longrightarrow>\n       r_\\<alpha>\n        (fst (r_update (l_id, v, r_id) b' (fst rev_map), Suc (snd rev_map)))\n        (robdd_get_id l, va, robdd_get_id r) =\n       Some (robdd_var i l va r)", "show \"robdd_invar_ext (insert b' bs) 0 b \\<and> robdd_get_id b < snd ?rm\""], ["proof (prove)\ngoal (1 subgoal):\n 1. robdd_invar_ext (insert b' bs) 0 b \\<and>\n    robdd_get_id b\n    < snd (r_update (l_id, v, r_id) b' (fst rev_map), Suc (snd rev_map))", "proof (cases \"b = b'\")"], ["proof (state)\ngoal (2 subgoals):\n 1. b = b' \\<Longrightarrow>\n    robdd_invar_ext (insert b' bs) 0 b \\<and>\n    robdd_get_id b\n    < snd (r_update (l_id, v, r_id) b' (fst rev_map), Suc (snd rev_map))\n 2. b \\<noteq> b' \\<Longrightarrow>\n    robdd_invar_ext (insert b' bs) 0 b \\<and>\n    robdd_get_id b\n    < snd (r_update (l_id, v, r_id) b' (fst rev_map), Suc (snd rev_map))", "case True"], ["proof (state)\nthis:\n  b = b'\n\ngoal (2 subgoals):\n 1. b = b' \\<Longrightarrow>\n    robdd_invar_ext (insert b' bs) 0 b \\<and>\n    robdd_get_id b\n    < snd (r_update (l_id, v, r_id) b' (fst rev_map), Suc (snd rev_map))\n 2. b \\<noteq> b' \\<Longrightarrow>\n    robdd_invar_ext (insert b' bs) 0 b \\<and>\n    robdd_get_id b\n    < snd (r_update (l_id, v, r_id) b' (fst rev_map), Suc (snd rev_map))", "with invar_b'"], ["proof (chain)\npicking this:\n  robdd_invar_ext (insert b' bs) v b'\n  b = b'", "show ?thesis"], ["proof (prove)\nusing this:\n  robdd_invar_ext (insert b' bs) v b'\n  b = b'\n\ngoal (1 subgoal):\n 1. robdd_invar_ext (insert b' bs) 0 b \\<and>\n    robdd_get_id b\n    < snd (r_update (l_id, v, r_id) b' (fst rev_map), Suc (snd rev_map))", "unfolding b'_def"], ["proof (prove)\nusing this:\n  robdd_invar_ext (insert (robdd_var (snd rev_map) l v r) bs) v\n   (robdd_var (snd rev_map) l v r)\n  b = robdd_var (snd rev_map) l v r\n\ngoal (1 subgoal):\n 1. robdd_invar_ext (insert (robdd_var (snd rev_map) l v r) bs) 0 b \\<and>\n    robdd_get_id b\n    < snd (r_update (l_id, v, r_id) (robdd_var (snd rev_map) l v r)\n            (fst rev_map),\n           Suc (snd rev_map))", "by simp"], ["proof (state)\nthis:\n  robdd_invar_ext (insert b' bs) 0 b \\<and>\n  robdd_get_id b\n  < snd (r_update (l_id, v, r_id) b' (fst rev_map), Suc (snd rev_map))\n\ngoal (1 subgoal):\n 1. b \\<noteq> b' \\<Longrightarrow>\n    robdd_invar_ext (insert b' bs) 0 b \\<and>\n    robdd_get_id b\n    < snd (r_update (l_id, v, r_id) b' (fst rev_map), Suc (snd rev_map))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. b \\<noteq> b' \\<Longrightarrow>\n    robdd_invar_ext (insert b' bs) 0 b \\<and>\n    robdd_get_id b\n    < snd (r_update (l_id, v, r_id) b' (fst rev_map), Suc (snd rev_map))", "case False"], ["proof (state)\nthis:\n  b \\<noteq> b'\n\ngoal (1 subgoal):\n 1. b \\<noteq> b' \\<Longrightarrow>\n    robdd_invar_ext (insert b' bs) 0 b \\<and>\n    robdd_get_id b\n    < snd (r_update (l_id, v, r_id) b' (fst rev_map), Suc (snd rev_map))", "with subrobdds_set_bs_simp b_in"], ["proof (chain)\npicking this:\n  subrobdds_set (insert b' bs) = insert b' (subrobdds_set bs)\n  b \\<in> subrobdds_set (insert b' bs)\n  b \\<noteq> b'", "have b_in': \"b \\<in> subrobdds_set bs\""], ["proof (prove)\nusing this:\n  subrobdds_set (insert b' bs) = insert b' (subrobdds_set bs)\n  b \\<in> subrobdds_set (insert b' bs)\n  b \\<noteq> b'\n\ngoal (1 subgoal):\n 1. b \\<in> subrobdds_set bs", "by simp"], ["proof (state)\nthis:\n  b \\<in> subrobdds_set bs\n\ngoal (1 subgoal):\n 1. b \\<noteq> b' \\<Longrightarrow>\n    robdd_invar_ext (insert b' bs) 0 b \\<and>\n    robdd_get_id b\n    < snd (r_update (l_id, v, r_id) b' (fst rev_map), Suc (snd rev_map))", "from rev_map_invar_D3[OF invar_rev_map b_in']"], ["proof (chain)\npicking this:\n  robdd_invar_ext bs 0 b\n  robdd_get_id b < snd rev_map", "show ?thesis"], ["proof (prove)\nusing this:\n  robdd_invar_ext bs 0 b\n  robdd_get_id b < snd rev_map\n\ngoal (1 subgoal):\n 1. robdd_invar_ext (insert b' bs) 0 b \\<and>\n    robdd_get_id b\n    < snd (r_update (l_id, v, r_id) b' (fst rev_map), Suc (snd rev_map))", "by (simp add: robdd_invar_ext_def invar_ids')"], ["proof (state)\nthis:\n  robdd_invar_ext (insert b' bs) 0 b \\<and>\n  robdd_get_id b\n  < snd (r_update (l_id, v, r_id) b' (fst rev_map), Suc (snd rev_map))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  robdd_invar_ext (insert b' bs) 0 b \\<and>\n  robdd_get_id b\n  < snd (r_update (l_id, v, r_id) b' (fst rev_map), Suc (snd rev_map))\n\ngoal (2 subgoals):\n 1. \\<And>li va ri b.\n       r_\\<alpha>\n        (fst (r_update (l_id, v, r_id) b' (fst rev_map), Suc (snd rev_map)))\n        (li, va, ri) =\n       Some b \\<Longrightarrow>\n       robdd_invar_ext (insert b' bs) va b \\<and>\n       b \\<in> insert b' bs \\<and>\n       (\\<exists>l r i.\n           b = robdd_var i l va r \\<and>\n           robdd_get_id l = li \\<and> robdd_get_id r = ri)\n 2. \\<And>i l r va.\n       robdd_var i l va r\n       \\<in> subrobdds_set (insert b' bs) \\<Longrightarrow>\n       r_\\<alpha>\n        (fst (r_update (l_id, v, r_id) b' (fst rev_map), Suc (snd rev_map)))\n        (robdd_get_id l, va, robdd_get_id r) =\n       Some (robdd_var i l va r)", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>li va ri b.\n       r_\\<alpha>\n        (fst (r_update (l_id, v, r_id) b' (fst rev_map), Suc (snd rev_map)))\n        (li, va, ri) =\n       Some b \\<Longrightarrow>\n       robdd_invar_ext (insert b' bs) va b \\<and>\n       b \\<in> insert b' bs \\<and>\n       (\\<exists>l r i.\n           b = robdd_var i l va r \\<and>\n           robdd_get_id l = li \\<and> robdd_get_id r = ri)\n 2. \\<And>i l r va.\n       robdd_var i l va r\n       \\<in> subrobdds_set (insert b' bs) \\<Longrightarrow>\n       r_\\<alpha>\n        (fst (r_update (l_id, v, r_id) b' (fst rev_map), Suc (snd rev_map)))\n        (robdd_get_id l, va, robdd_get_id r) =\n       Some (robdd_var i l va r)", "fix i l r v'"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>li va ri b.\n       r_\\<alpha>\n        (fst (r_update (l_id, v, r_id) b' (fst rev_map), Suc (snd rev_map)))\n        (li, va, ri) =\n       Some b \\<Longrightarrow>\n       robdd_invar_ext (insert b' bs) va b \\<and>\n       b \\<in> insert b' bs \\<and>\n       (\\<exists>l r i.\n           b = robdd_var i l va r \\<and>\n           robdd_get_id l = li \\<and> robdd_get_id r = ri)\n 2. \\<And>i l r va.\n       robdd_var i l va r\n       \\<in> subrobdds_set (insert b' bs) \\<Longrightarrow>\n       r_\\<alpha>\n        (fst (r_update (l_id, v, r_id) b' (fst rev_map), Suc (snd rev_map)))\n        (robdd_get_id l, va, robdd_get_id r) =\n       Some (robdd_var i l va r)", "assume b_in: \"robdd_var i l v' r \\<in> subrobdds_set (insert b' bs)\""], ["proof (state)\nthis:\n  robdd_var i l v' r \\<in> subrobdds_set (insert b' bs)\n\ngoal (2 subgoals):\n 1. \\<And>li va ri b.\n       r_\\<alpha>\n        (fst (r_update (l_id, v, r_id) b' (fst rev_map), Suc (snd rev_map)))\n        (li, va, ri) =\n       Some b \\<Longrightarrow>\n       robdd_invar_ext (insert b' bs) va b \\<and>\n       b \\<in> insert b' bs \\<and>\n       (\\<exists>l r i.\n           b = robdd_var i l va r \\<and>\n           robdd_get_id l = li \\<and> robdd_get_id r = ri)\n 2. \\<And>i l r va.\n       robdd_var i l va r\n       \\<in> subrobdds_set (insert b' bs) \\<Longrightarrow>\n       r_\\<alpha>\n        (fst (r_update (l_id, v, r_id) b' (fst rev_map), Suc (snd rev_map)))\n        (robdd_get_id l, va, robdd_get_id r) =\n       Some (robdd_var i l va r)", "show \"r_\\<alpha> (fst ?rm) (robdd_get_id l, v', robdd_get_id r) =\n                  Some (robdd_var i l v' r)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. r_\\<alpha>\n     (fst (r_update (l_id, v, r_id) b' (fst rev_map), Suc (snd rev_map)))\n     (robdd_get_id l, v', robdd_get_id r) =\n    Some (robdd_var i l v' r)", "proof (cases \"robdd_var i l v' r = b'\")"], ["proof (state)\ngoal (2 subgoals):\n 1. robdd_var i l v' r = b' \\<Longrightarrow>\n    r_\\<alpha>\n     (fst (r_update (l_id, v, r_id) b' (fst rev_map), Suc (snd rev_map)))\n     (robdd_get_id l, v', robdd_get_id r) =\n    Some (robdd_var i l v' r)\n 2. robdd_var i l v' r \\<noteq> b' \\<Longrightarrow>\n    r_\\<alpha>\n     (fst (r_update (l_id, v, r_id) b' (fst rev_map), Suc (snd rev_map)))\n     (robdd_get_id l, v', robdd_get_id r) =\n    Some (robdd_var i l v' r)", "case True"], ["proof (state)\nthis:\n  robdd_var i l v' r = b'\n\ngoal (2 subgoals):\n 1. robdd_var i l v' r = b' \\<Longrightarrow>\n    r_\\<alpha>\n     (fst (r_update (l_id, v, r_id) b' (fst rev_map), Suc (snd rev_map)))\n     (robdd_get_id l, v', robdd_get_id r) =\n    Some (robdd_var i l v' r)\n 2. robdd_var i l v' r \\<noteq> b' \\<Longrightarrow>\n    r_\\<alpha>\n     (fst (r_update (l_id, v, r_id) b' (fst rev_map), Suc (snd rev_map)))\n     (robdd_get_id l, v', robdd_get_id r) =\n    Some (robdd_var i l v' r)", "with map_eq"], ["proof (chain)\npicking this:\n  r_lookup (l_id, v, r_id) (fst rev_map) = None\n  robdd_var i l v' r = b'", "show ?thesis"], ["proof (prove)\nusing this:\n  r_lookup (l_id, v, r_id) (fst rev_map) = None\n  robdd_var i l v' r = b'\n\ngoal (1 subgoal):\n 1. r_\\<alpha>\n     (fst (r_update (l_id, v, r_id) b' (fst rev_map), Suc (snd rev_map)))\n     (robdd_get_id l, v', robdd_get_id r) =\n    Some (robdd_var i l v' r)", "by (simp add: b'_def l_id_def[symmetric] r_id_def[symmetric] \n                              r.lookup_correct r_invar dom_def r.update_dj_correct)"], ["proof (state)\nthis:\n  r_\\<alpha>\n   (fst (r_update (l_id, v, r_id) b' (fst rev_map), Suc (snd rev_map)))\n   (robdd_get_id l, v', robdd_get_id r) =\n  Some (robdd_var i l v' r)\n\ngoal (1 subgoal):\n 1. robdd_var i l v' r \\<noteq> b' \\<Longrightarrow>\n    r_\\<alpha>\n     (fst (r_update (l_id, v, r_id) b' (fst rev_map), Suc (snd rev_map)))\n     (robdd_get_id l, v', robdd_get_id r) =\n    Some (robdd_var i l v' r)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. robdd_var i l v' r \\<noteq> b' \\<Longrightarrow>\n    r_\\<alpha>\n     (fst (r_update (l_id, v, r_id) b' (fst rev_map), Suc (snd rev_map)))\n     (robdd_get_id l, v', robdd_get_id r) =\n    Some (robdd_var i l v' r)", "case False"], ["proof (state)\nthis:\n  robdd_var i l v' r \\<noteq> b'\n\ngoal (1 subgoal):\n 1. robdd_var i l v' r \\<noteq> b' \\<Longrightarrow>\n    r_\\<alpha>\n     (fst (r_update (l_id, v, r_id) b' (fst rev_map), Suc (snd rev_map)))\n     (robdd_get_id l, v', robdd_get_id r) =\n    Some (robdd_var i l v' r)", "with subrobdds_set_bs_simp b_in"], ["proof (chain)\npicking this:\n  subrobdds_set (insert b' bs) = insert b' (subrobdds_set bs)\n  robdd_var i l v' r \\<in> subrobdds_set (insert b' bs)\n  robdd_var i l v' r \\<noteq> b'", "have b_in': \"robdd_var i l v' r \\<in> subrobdds_set bs\""], ["proof (prove)\nusing this:\n  subrobdds_set (insert b' bs) = insert b' (subrobdds_set bs)\n  robdd_var i l v' r \\<in> subrobdds_set (insert b' bs)\n  robdd_var i l v' r \\<noteq> b'\n\ngoal (1 subgoal):\n 1. robdd_var i l v' r \\<in> subrobdds_set bs", "by simp"], ["proof (state)\nthis:\n  robdd_var i l v' r \\<in> subrobdds_set bs\n\ngoal (1 subgoal):\n 1. robdd_var i l v' r \\<noteq> b' \\<Longrightarrow>\n    r_\\<alpha>\n     (fst (r_update (l_id, v, r_id) b' (fst rev_map), Suc (snd rev_map)))\n     (robdd_get_id l, v', robdd_get_id r) =\n    Some (robdd_var i l v' r)", "from rev_map_invar_D1[OF invar_rev_map b_in'] map_eq"], ["proof (chain)\npicking this:\n  r_\\<alpha> (fst rev_map) (robdd_get_id l, v', robdd_get_id r) =\n  Some (robdd_var i l v' r)\n  r_lookup (l_id, v, r_id) (fst rev_map) = None", "show ?thesis"], ["proof (prove)\nusing this:\n  r_\\<alpha> (fst rev_map) (robdd_get_id l, v', robdd_get_id r) =\n  Some (robdd_var i l v' r)\n  r_lookup (l_id, v, r_id) (fst rev_map) = None\n\ngoal (1 subgoal):\n 1. r_\\<alpha>\n     (fst (r_update (l_id, v, r_id) b' (fst rev_map), Suc (snd rev_map)))\n     (robdd_get_id l, v', robdd_get_id r) =\n    Some (robdd_var i l v' r)", "by (auto simp add: r.lookup_correct r.update_dj_correct dom_def r_invar)"], ["proof (state)\nthis:\n  r_\\<alpha>\n   (fst (r_update (l_id, v, r_id) b' (fst rev_map), Suc (snd rev_map)))\n   (robdd_get_id l, v', robdd_get_id r) =\n  Some (robdd_var i l v' r)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  r_\\<alpha>\n   (fst (r_update (l_id, v, r_id) b' (fst rev_map), Suc (snd rev_map)))\n   (robdd_get_id l, v', robdd_get_id r) =\n  Some (robdd_var i l v' r)\n\ngoal (1 subgoal):\n 1. \\<And>li va ri b.\n       r_\\<alpha>\n        (fst (r_update (l_id, v, r_id) b' (fst rev_map), Suc (snd rev_map)))\n        (li, va, ri) =\n       Some b \\<Longrightarrow>\n       robdd_invar_ext (insert b' bs) va b \\<and>\n       b \\<in> insert b' bs \\<and>\n       (\\<exists>l r i.\n           b = robdd_var i l va r \\<and>\n           robdd_get_id l = li \\<and> robdd_get_id r = ri)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>li va ri b.\n       r_\\<alpha>\n        (fst (r_update (l_id, v, r_id) b' (fst rev_map), Suc (snd rev_map)))\n        (li, va, ri) =\n       Some b \\<Longrightarrow>\n       robdd_invar_ext (insert b' bs) va b \\<and>\n       b \\<in> insert b' bs \\<and>\n       (\\<exists>l r i.\n           b = robdd_var i l va r \\<and>\n           robdd_get_id l = li \\<and> robdd_get_id r = ri)", "fix li v' ri b"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>li va ri b.\n       r_\\<alpha>\n        (fst (r_update (l_id, v, r_id) b' (fst rev_map), Suc (snd rev_map)))\n        (li, va, ri) =\n       Some b \\<Longrightarrow>\n       robdd_invar_ext (insert b' bs) va b \\<and>\n       b \\<in> insert b' bs \\<and>\n       (\\<exists>l r i.\n           b = robdd_var i l va r \\<and>\n           robdd_get_id l = li \\<and> robdd_get_id r = ri)", "assume b_intro: \"r_\\<alpha> (fst ?rm) (li, v', ri) = Some b\""], ["proof (state)\nthis:\n  r_\\<alpha>\n   (fst (r_update (l_id, v, r_id) b' (fst rev_map), Suc (snd rev_map)))\n   (li, v', ri) =\n  Some b\n\ngoal (1 subgoal):\n 1. \\<And>li va ri b.\n       r_\\<alpha>\n        (fst (r_update (l_id, v, r_id) b' (fst rev_map), Suc (snd rev_map)))\n        (li, va, ri) =\n       Some b \\<Longrightarrow>\n       robdd_invar_ext (insert b' bs) va b \\<and>\n       b \\<in> insert b' bs \\<and>\n       (\\<exists>l r i.\n           b = robdd_var i l va r \\<and>\n           robdd_get_id l = li \\<and> robdd_get_id r = ri)", "show \"robdd_invar_ext (insert b' bs) v' b \\<and> b \\<in> insert b' bs \\<and>\n                  (\\<exists>l r i. b = robdd_var i l v' r \\<and> robdd_get_id l = li \\<and> robdd_get_id r = ri)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. robdd_invar_ext (insert b' bs) v' b \\<and>\n    b \\<in> insert b' bs \\<and>\n    (\\<exists>l r i.\n        b = robdd_var i l v' r \\<and>\n        robdd_get_id l = li \\<and> robdd_get_id r = ri)", "proof (cases \"(li, v', ri) = (robdd_get_id l, v, robdd_get_id r)\")"], ["proof (state)\ngoal (2 subgoals):\n 1. (li, v', ri) = (robdd_get_id l, v, robdd_get_id r) \\<Longrightarrow>\n    robdd_invar_ext (insert b' bs) v' b \\<and>\n    b \\<in> insert b' bs \\<and>\n    (\\<exists>l r i.\n        b = robdd_var i l v' r \\<and>\n        robdd_get_id l = li \\<and> robdd_get_id r = ri)\n 2. (li, v', ri) \\<noteq>\n    (robdd_get_id l, v, robdd_get_id r) \\<Longrightarrow>\n    robdd_invar_ext (insert b' bs) v' b \\<and>\n    b \\<in> insert b' bs \\<and>\n    (\\<exists>l r i.\n        b = robdd_var i l v' r \\<and>\n        robdd_get_id l = li \\<and> robdd_get_id r = ri)", "case True"], ["proof (state)\nthis:\n  (li, v', ri) = (robdd_get_id l, v, robdd_get_id r)\n\ngoal (2 subgoals):\n 1. (li, v', ri) = (robdd_get_id l, v, robdd_get_id r) \\<Longrightarrow>\n    robdd_invar_ext (insert b' bs) v' b \\<and>\n    b \\<in> insert b' bs \\<and>\n    (\\<exists>l r i.\n        b = robdd_var i l v' r \\<and>\n        robdd_get_id l = li \\<and> robdd_get_id r = ri)\n 2. (li, v', ri) \\<noteq>\n    (robdd_get_id l, v, robdd_get_id r) \\<Longrightarrow>\n    robdd_invar_ext (insert b' bs) v' b \\<and>\n    b \\<in> insert b' bs \\<and>\n    (\\<exists>l r i.\n        b = robdd_var i l v' r \\<and>\n        robdd_get_id l = li \\<and> robdd_get_id r = ri)", "note lriv'_eq = this"], ["proof (state)\nthis:\n  (li, v', ri) = (robdd_get_id l, v, robdd_get_id r)\n\ngoal (2 subgoals):\n 1. (li, v', ri) = (robdd_get_id l, v, robdd_get_id r) \\<Longrightarrow>\n    robdd_invar_ext (insert b' bs) v' b \\<and>\n    b \\<in> insert b' bs \\<and>\n    (\\<exists>l r i.\n        b = robdd_var i l v' r \\<and>\n        robdd_get_id l = li \\<and> robdd_get_id r = ri)\n 2. (li, v', ri) \\<noteq>\n    (robdd_get_id l, v, robdd_get_id r) \\<Longrightarrow>\n    robdd_invar_ext (insert b' bs) v' b \\<and>\n    b \\<in> insert b' bs \\<and>\n    (\\<exists>l r i.\n        b = robdd_var i l v' r \\<and>\n        robdd_get_id l = li \\<and> robdd_get_id r = ri)", "with b_intro map_eq"], ["proof (chain)\npicking this:\n  r_\\<alpha>\n   (fst (r_update (l_id, v, r_id) b' (fst rev_map), Suc (snd rev_map)))\n   (li, v', ri) =\n  Some b\n  r_lookup (l_id, v, r_id) (fst rev_map) = None\n  (li, v', ri) = (robdd_get_id l, v, robdd_get_id r)", "have b_eq: \"b = b'\""], ["proof (prove)\nusing this:\n  r_\\<alpha>\n   (fst (r_update (l_id, v, r_id) b' (fst rev_map), Suc (snd rev_map)))\n   (li, v', ri) =\n  Some b\n  r_lookup (l_id, v, r_id) (fst rev_map) = None\n  (li, v', ri) = (robdd_get_id l, v, robdd_get_id r)\n\ngoal (1 subgoal):\n 1. b = b'", "by (simp_all add: r.update_dj_correct dom_def r.lookup_correct r_invar l_id_def r_id_def)"], ["proof (state)\nthis:\n  b = b'\n\ngoal (2 subgoals):\n 1. (li, v', ri) = (robdd_get_id l, v, robdd_get_id r) \\<Longrightarrow>\n    robdd_invar_ext (insert b' bs) v' b \\<and>\n    b \\<in> insert b' bs \\<and>\n    (\\<exists>l r i.\n        b = robdd_var i l v' r \\<and>\n        robdd_get_id l = li \\<and> robdd_get_id r = ri)\n 2. (li, v', ri) \\<noteq>\n    (robdd_get_id l, v, robdd_get_id r) \\<Longrightarrow>\n    robdd_invar_ext (insert b' bs) v' b \\<and>\n    b \\<in> insert b' bs \\<and>\n    (\\<exists>l r i.\n        b = robdd_var i l v' r \\<and>\n        robdd_get_id l = li \\<and> robdd_get_id r = ri)", "with lriv'_eq"], ["proof (chain)\npicking this:\n  (li, v', ri) = (robdd_get_id l, v, robdd_get_id r)\n  b = b'", "show ?thesis"], ["proof (prove)\nusing this:\n  (li, v', ri) = (robdd_get_id l, v, robdd_get_id r)\n  b = b'\n\ngoal (1 subgoal):\n 1. robdd_invar_ext (insert b' bs) v' b \\<and>\n    b \\<in> insert b' bs \\<and>\n    (\\<exists>l r i.\n        b = robdd_var i l v' r \\<and>\n        robdd_get_id l = li \\<and> robdd_get_id r = ri)", "apply (simp add: invar_b')"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>li = robdd_get_id l \\<and> v' = v \\<and> ri = robdd_get_id r;\n     b = b'\\<rbrakk>\n    \\<Longrightarrow> \\<exists>la ra.\n                         (\\<exists>i. b' = robdd_var i la v ra) \\<and>\n                         robdd_get_id la = robdd_get_id l \\<and>\n                         robdd_get_id ra = robdd_get_id r", "apply (simp add: b'_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  robdd_invar_ext (insert b' bs) v' b \\<and>\n  b \\<in> insert b' bs \\<and>\n  (\\<exists>l r i.\n      b = robdd_var i l v' r \\<and>\n      robdd_get_id l = li \\<and> robdd_get_id r = ri)\n\ngoal (1 subgoal):\n 1. (li, v', ri) \\<noteq>\n    (robdd_get_id l, v, robdd_get_id r) \\<Longrightarrow>\n    robdd_invar_ext (insert b' bs) v' b \\<and>\n    b \\<in> insert b' bs \\<and>\n    (\\<exists>l r i.\n        b = robdd_var i l v' r \\<and>\n        robdd_get_id l = li \\<and> robdd_get_id r = ri)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. (li, v', ri) \\<noteq>\n    (robdd_get_id l, v, robdd_get_id r) \\<Longrightarrow>\n    robdd_invar_ext (insert b' bs) v' b \\<and>\n    b \\<in> insert b' bs \\<and>\n    (\\<exists>l r i.\n        b = robdd_var i l v' r \\<and>\n        robdd_get_id l = li \\<and> robdd_get_id r = ri)", "case False"], ["proof (state)\nthis:\n  (li, v', ri) \\<noteq> (robdd_get_id l, v, robdd_get_id r)\n\ngoal (1 subgoal):\n 1. (li, v', ri) \\<noteq>\n    (robdd_get_id l, v, robdd_get_id r) \\<Longrightarrow>\n    robdd_invar_ext (insert b' bs) v' b \\<and>\n    b \\<in> insert b' bs \\<and>\n    (\\<exists>l r i.\n        b = robdd_var i l v' r \\<and>\n        robdd_get_id l = li \\<and> robdd_get_id r = ri)", "with b_intro map_eq"], ["proof (chain)\npicking this:\n  r_\\<alpha>\n   (fst (r_update (l_id, v, r_id) b' (fst rev_map), Suc (snd rev_map)))\n   (li, v', ri) =\n  Some b\n  r_lookup (l_id, v, r_id) (fst rev_map) = None\n  (li, v', ri) \\<noteq> (robdd_get_id l, v, robdd_get_id r)", "have b_intro': \"r_\\<alpha> (fst rev_map) (li, v', ri) = Some b\""], ["proof (prove)\nusing this:\n  r_\\<alpha>\n   (fst (r_update (l_id, v, r_id) b' (fst rev_map), Suc (snd rev_map)))\n   (li, v', ri) =\n  Some b\n  r_lookup (l_id, v, r_id) (fst rev_map) = None\n  (li, v', ri) \\<noteq> (robdd_get_id l, v, robdd_get_id r)\n\ngoal (1 subgoal):\n 1. r_\\<alpha> (fst rev_map) (li, v', ri) = Some b", "by (auto simp add: r.lookup_correct r.update_dj_correct dom_def r_invar l_id_def r_id_def)"], ["proof (state)\nthis:\n  r_\\<alpha> (fst rev_map) (li, v', ri) = Some b\n\ngoal (1 subgoal):\n 1. (li, v', ri) \\<noteq>\n    (robdd_get_id l, v, robdd_get_id r) \\<Longrightarrow>\n    robdd_invar_ext (insert b' bs) v' b \\<and>\n    b \\<in> insert b' bs \\<and>\n    (\\<exists>l r i.\n        b = robdd_var i l v' r \\<and>\n        robdd_get_id l = li \\<and> robdd_get_id r = ri)", "from rev_map_invar_D2[OF invar_rev_map b_intro']"], ["proof (chain)\npicking this:\n  robdd_invar_ext bs v' b \\<and>\n  b \\<in> bs \\<and>\n  (\\<exists>l r i.\n      b = robdd_var i l v' r \\<and>\n      robdd_get_id l = li \\<and> robdd_get_id r = ri)", "show ?thesis"], ["proof (prove)\nusing this:\n  robdd_invar_ext bs v' b \\<and>\n  b \\<in> bs \\<and>\n  (\\<exists>l r i.\n      b = robdd_var i l v' r \\<and>\n      robdd_get_id l = li \\<and> robdd_get_id r = ri)\n\ngoal (1 subgoal):\n 1. robdd_invar_ext (insert b' bs) v' b \\<and>\n    b \\<in> insert b' bs \\<and>\n    (\\<exists>l r i.\n        b = robdd_var i l v' r \\<and>\n        robdd_get_id l = li \\<and> robdd_get_id r = ri)", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. robdd_invar_ext bs v' b \\<and>\n    b \\<in> bs \\<and>\n    (\\<exists>l r.\n        (\\<exists>i. b = robdd_var i l v' r) \\<and>\n        robdd_get_id l = li \\<and> robdd_get_id r = ri) \\<Longrightarrow>\n    robdd_invar_ext (insert b' bs) v' b", "apply (simp add: robdd_invar_ext_def invar_ids')"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  robdd_invar_ext (insert b' bs) v' b \\<and>\n  b \\<in> insert b' bs \\<and>\n  (\\<exists>l r i.\n      b = robdd_var i l v' r \\<and>\n      robdd_get_id l = li \\<and> robdd_get_id r = ri)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  robdd_invar_ext (insert b' bs) v' b \\<and>\n  b \\<in> insert b' bs \\<and>\n  (\\<exists>l r i.\n      b = robdd_var i l v' r \\<and>\n      robdd_get_id l = li \\<and> robdd_get_id r = ri)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  rev_map_invar (insert b' bs)\n   (r_update (l_id, v, r_id) b' (fst rev_map), Suc (snd rev_map))\n\ngoal (1 subgoal):\n 1. rev_map_invar bs' rev_map'", "thus ?thesis"], ["proof (prove)\nusing this:\n  rev_map_invar (insert b' bs)\n   (r_update (l_id, v, r_id) b' (fst rev_map), Suc (snd rev_map))\n\ngoal (1 subgoal):\n 1. rev_map_invar bs' rev_map'", "unfolding bs'_def rev_map'_def res_def robdd_construct_def l_id_def[symmetric]\n                    r_id_def[symmetric] b_def"], ["proof (prove)\nusing this:\n  rev_map_invar (insert b' bs)\n   (r_update (l_id, v, r_id) b' (fst rev_map), Suc (snd rev_map))\n\ngoal (1 subgoal):\n 1. rev_map_invar\n     (insert\n       (fst (let l_id = l_id; r_id = r_id\n             in if l_id = r_id then (l, rev_map)\n                else case r_lookup (l_id, v, r_id) (fst rev_map) of\n                     None \\<Rightarrow>\n                       let b = robdd_var (snd rev_map) l v r\n                       in (b, r_update (l_id, v, r_id) b (fst rev_map),\n                           Suc (snd rev_map))\n                     | Some b \\<Rightarrow> (b, rev_map)))\n       bs)\n     (snd (let l_id = l_id; r_id = r_id\n           in if l_id = r_id then (l, rev_map)\n              else case r_lookup (l_id, v, r_id) (fst rev_map) of\n                   None \\<Rightarrow>\n                     let b = robdd_var (snd rev_map) l v r\n                     in (b, r_update (l_id, v, r_id) b (fst rev_map),\n                         Suc (snd rev_map))\n                   | Some b \\<Rightarrow> (b, rev_map)))", "by (simp add: map_eq b'_def[symmetric] \\<alpha>_b' invar_b' l_id_neq)"], ["proof (state)\nthis:\n  rev_map_invar bs' rev_map'\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  rev_map_invar bs' rev_map'\n\ngoal (1 subgoal):\n 1. r_lookup (l_id, v, r_id) (fst rev_map) = None \\<Longrightarrow>\n    robdd_invar_ext bs' v b \\<and>\n    rev_map_invar bs' rev_map' \\<and>\n    robdd_\\<alpha> b = robdd_\\<alpha> (robdd_var 0 l v r)", "from res_def l_id_neq invar_rev_map'"], ["proof (chain)\npicking this:\n  res \\<equiv> robdd_construct rev_map l v r\n  l_id \\<noteq> r_id\n  rev_map_invar bs' rev_map'", "show ?thesis"], ["proof (prove)\nusing this:\n  res \\<equiv> robdd_construct rev_map l v r\n  l_id \\<noteq> r_id\n  rev_map_invar bs' rev_map'\n\ngoal (1 subgoal):\n 1. robdd_invar_ext bs' v b \\<and>\n    rev_map_invar bs' rev_map' \\<and>\n    robdd_\\<alpha> b = robdd_\\<alpha> (robdd_var 0 l v r)", "unfolding robdd_construct_def l_id_def[symmetric] r_id_def[symmetric]\n                    bs'_def rev_map'_def b_def"], ["proof (prove)\nusing this:\n  res \\<equiv>\n  let l_id = l_id; r_id = r_id\n  in if l_id = r_id then (l, rev_map)\n     else case r_lookup (l_id, v, r_id) (fst rev_map) of\n          None \\<Rightarrow>\n            let b = robdd_var (snd rev_map) l v r\n            in (b, r_update (l_id, v, r_id) b (fst rev_map),\n                Suc (snd rev_map))\n          | Some b \\<Rightarrow> (b, rev_map)\n  l_id \\<noteq> r_id\n  rev_map_invar (insert (fst res) bs) (snd res)\n\ngoal (1 subgoal):\n 1. robdd_invar_ext (insert (fst res) bs) v (fst res) \\<and>\n    rev_map_invar (insert (fst res) bs) (snd res) \\<and>\n    robdd_\\<alpha> (fst res) = robdd_\\<alpha> (robdd_var 0 l v r)", "by (simp add: map_eq b'_def[symmetric] \\<alpha>_b' invar_b' )"], ["proof (state)\nthis:\n  robdd_invar_ext bs' v b \\<and>\n  rev_map_invar bs' rev_map' \\<and>\n  robdd_\\<alpha> b = robdd_\\<alpha> (robdd_var 0 l v r)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  robdd_invar_ext bs' v b \\<and>\n  rev_map_invar bs' rev_map' \\<and>\n  robdd_\\<alpha> b = robdd_\\<alpha> (robdd_var 0 l v r)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  robdd_invar_ext bs' v b \\<and>\n  rev_map_invar bs' rev_map' \\<and>\n  robdd_\\<alpha> b = robdd_\\<alpha> (robdd_var 0 l v r)\n\ngoal:\nNo subgoals!", "qed"], ["", "fun (in -) robdd_apply_next where\n     \"robdd_apply_next (robdd_leaf f) (robdd_leaf f') = \n         (robdd_leaf f, robdd_leaf f, 0, robdd_leaf f', robdd_leaf f')\"\n   | \"robdd_apply_next (robdd_leaf f) (robdd_var i l v r) = (robdd_leaf f, robdd_leaf f, v, l, r)\"\n   | \"robdd_apply_next (robdd_var i l v r) (robdd_leaf f) = (l, r, v, robdd_leaf f, robdd_leaf f)\"\n   | \"robdd_apply_next (robdd_var i l v r) (robdd_var i' l' v' r') = \n     (if v < v' then\n       (l, r, v, (robdd_var i' l' v' r'), (robdd_var i' l' v' r'))\n     else (if v = v' then\n       (l, r, v, l', r')\n     else\n       ((robdd_var i l v r), (robdd_var i l v r), v', l', r')))\""], ["", "definition (in -) robdd_neg_next where\n     \"robdd_neg_next b = (let (l, r, v, _, _) = robdd_apply_next b robdd_one in (l, r, v))\""], ["", "lemma (in -) robdd_neg_simps[code, simp] :\n     \"robdd_neg_next (robdd_leaf f) = \n         (robdd_leaf f, robdd_leaf f, 0)\"\n     \"robdd_neg_next (robdd_var i l v r) = (l, r, v)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. robdd_neg_next (robdd_leaf f) = (robdd_leaf f, robdd_leaf f, 0) &&&\n    robdd_neg_next (robdd_var i l v r) = (l, r, v)", "unfolding robdd_neg_next_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (let (l, r, v, uu_, uu_) = robdd_apply_next (robdd_leaf f) robdd_one\n     in (l, r, v)) =\n    (robdd_leaf f, robdd_leaf f, 0) &&&\n    (let (l, r, v, uu_, uu_) =\n           robdd_apply_next (robdd_var i l v r) robdd_one\n     in (l, r, v)) =\n    (l, r, v)", "by simp_all"], ["", "fun (in -) robdd_get_min_var where\n     \"robdd_get_min_var (robdd_leaf _) (robdd_leaf _) = 0\"\n   | \"robdd_get_min_var (robdd_leaf _) (robdd_var _ _ v _) = v\"\n   | \"robdd_get_min_var (robdd_var _ _ v _) (robdd_leaf _) = v\"\n   | \"robdd_get_min_var (robdd_var _ _ v1 _) (robdd_var _ _ v2 _) = (if v1 \\<le> v2 then v1 else v2)\""], ["", "lemma (in -) robdd_apply_next_correct :\n    assumes invar_b1: \"robdd_invar_ext bs1 n1 b1\" \n        and invar_b2: \"robdd_invar_ext bs2 n2 b2\" \n        and eval: \"robdd_apply_next b1 b2 = (b1_l, b1_r, v'', b2_l, b2_r)\"\n  shows \"robdd_\\<alpha> b1_l = (\\<lambda>a. robdd_\\<alpha> b1 (a (v'' := True)))\"  (is ?T1)\n        \"robdd_\\<alpha> b1_r = (\\<lambda>a. robdd_\\<alpha> b1 (a (v'' := False)))\"  (is ?T2)\n        \"robdd_\\<alpha> b2_l = (\\<lambda>a. robdd_\\<alpha> b2 (a (v'' := True)))\"  (is ?T3)\n        \"robdd_\\<alpha> b2_r = (\\<lambda>a. robdd_\\<alpha> b2 (a (v'' := False)))\"  (is ?T4)\n        \"robdd_invar_ext bs1 (Suc v'') b1_l\"  (is ?T5)\n        \"robdd_invar_ext bs1 (Suc v'') b1_r\"  (is ?T6)\n        \"robdd_invar_ext bs2 (Suc v'') b2_l\"  (is ?T7)\n        \"robdd_invar_ext bs2 (Suc v'') b2_r\"  (is ?T8)\n        \"b1_l \\<in> subrobdds b1\" (is ?T9)\n        \"b2_l \\<in> subrobdds b2\" (is ?T10)\n        \"b1_r \\<in> subrobdds b1\" (is ?T11)\n        \"b2_r \\<in> subrobdds b2\" (is ?T12)\n        \"robdd_get_min_var b1 b2 = v''\" (is ?T13)\n        \"~(robdd_is_leaf b1 \\<and> robdd_is_leaf b2) \\<longrightarrow>\n         size_robdd b1_l + size_robdd b2_l < size_robdd b1 + size_robdd b2\" (is ?T14)\n        \"~(robdd_is_leaf b1 \\<and> robdd_is_leaf b2) \\<longrightarrow> \n         size_robdd b1_r + size_robdd b2_r < size_robdd b1 + size_robdd b2\" (is ?T15)"], ["proof (prove)\ngoal (1 subgoal):\n 1. ((robdd_\\<alpha> b1_l =\n      (\\<lambda>a. robdd_\\<alpha> b1 (a(v'' := True))) &&&\n      robdd_\\<alpha> b1_r =\n      (\\<lambda>a. robdd_\\<alpha> b1 (a(v'' := False))) &&&\n      robdd_\\<alpha> b2_l =\n      (\\<lambda>a. robdd_\\<alpha> b2 (a(v'' := True)))) &&&\n     (robdd_\\<alpha> b2_r =\n      (\\<lambda>a. robdd_\\<alpha> b2 (a(v'' := False))) &&&\n      robdd_invar_ext bs1 (Suc v'') b1_l) &&&\n     robdd_invar_ext bs1 (Suc v'') b1_r &&&\n     robdd_invar_ext bs2 (Suc v'') b2_l) &&&\n    ((robdd_invar_ext bs2 (Suc v'') b2_r &&& b1_l \\<in> subrobdds b1) &&&\n     b2_l \\<in> subrobdds b2 &&& b1_r \\<in> subrobdds b1) &&&\n    (b2_r \\<in> subrobdds b2 &&& robdd_get_min_var b1 b2 = v'') &&&\n    \\<not> (robdd_is_leaf b1 \\<and> robdd_is_leaf b2) \\<longrightarrow>\n    size_robdd b1_l + size_robdd b2_l < size_robdd b1 + size_robdd b2 &&&\n    \\<not> (robdd_is_leaf b1 \\<and> robdd_is_leaf b2) \\<longrightarrow>\n    size_robdd b1_r + size_robdd b2_r < size_robdd b1 + size_robdd b2", "proof -"], ["proof (state)\ngoal (15 subgoals):\n 1. robdd_\\<alpha> b1_l = (\\<lambda>a. robdd_\\<alpha> b1 (a(v'' := True)))\n 2. robdd_\\<alpha> b1_r = (\\<lambda>a. robdd_\\<alpha> b1 (a(v'' := False)))\n 3. robdd_\\<alpha> b2_l = (\\<lambda>a. robdd_\\<alpha> b2 (a(v'' := True)))\n 4. robdd_\\<alpha> b2_r = (\\<lambda>a. robdd_\\<alpha> b2 (a(v'' := False)))\n 5. robdd_invar_ext bs1 (Suc v'') b1_l\n 6. robdd_invar_ext bs1 (Suc v'') b1_r\n 7. robdd_invar_ext bs2 (Suc v'') b2_l\n 8. robdd_invar_ext bs2 (Suc v'') b2_r\n 9. b1_l \\<in> subrobdds b1\n 10. b2_l \\<in> subrobdds b2\nA total of 15 subgoals...", "have \"?T1 \\<and> ?T2 \\<and> ?T3 \\<and> ?T4 \\<and> ?T5 \\<and> ?T6 \\<and> ?T7 \\<and> ?T8 \\<and> ?T9 \\<and> ?T10 \\<and> ?T11 \\<and> ?T12 \\<and> ?T13 \\<and> ?T14 \\<and> ?T15\""], ["proof (prove)\ngoal (1 subgoal):\n 1. robdd_\\<alpha> b1_l =\n    (\\<lambda>a. robdd_\\<alpha> b1 (a(v'' := True))) \\<and>\n    robdd_\\<alpha> b1_r =\n    (\\<lambda>a. robdd_\\<alpha> b1 (a(v'' := False))) \\<and>\n    robdd_\\<alpha> b2_l =\n    (\\<lambda>a. robdd_\\<alpha> b2 (a(v'' := True))) \\<and>\n    robdd_\\<alpha> b2_r =\n    (\\<lambda>a. robdd_\\<alpha> b2 (a(v'' := False))) \\<and>\n    robdd_invar_ext bs1 (Suc v'') b1_l \\<and>\n    robdd_invar_ext bs1 (Suc v'') b1_r \\<and>\n    robdd_invar_ext bs2 (Suc v'') b2_l \\<and>\n    robdd_invar_ext bs2 (Suc v'') b2_r \\<and>\n    b1_l \\<in> subrobdds b1 \\<and>\n    b2_l \\<in> subrobdds b2 \\<and>\n    b1_r \\<in> subrobdds b1 \\<and>\n    b2_r \\<in> subrobdds b2 \\<and>\n    robdd_get_min_var b1 b2 = v'' \\<and>\n    (\\<not> (robdd_is_leaf b1 \\<and> robdd_is_leaf b2) \\<longrightarrow>\n     size_robdd b1_l + size_robdd b2_l\n     < size_robdd b1 + size_robdd b2) \\<and>\n    (\\<not> (robdd_is_leaf b1 \\<and> robdd_is_leaf b2) \\<longrightarrow>\n     size_robdd b1_r + size_robdd b2_r < size_robdd b1 + size_robdd b2)", "proof (cases b1)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x1.\n       b1 = robdd_leaf x1 \\<Longrightarrow>\n       robdd_\\<alpha> b1_l =\n       (\\<lambda>a. robdd_\\<alpha> b1 (a(v'' := True))) \\<and>\n       robdd_\\<alpha> b1_r =\n       (\\<lambda>a. robdd_\\<alpha> b1 (a(v'' := False))) \\<and>\n       robdd_\\<alpha> b2_l =\n       (\\<lambda>a. robdd_\\<alpha> b2 (a(v'' := True))) \\<and>\n       robdd_\\<alpha> b2_r =\n       (\\<lambda>a. robdd_\\<alpha> b2 (a(v'' := False))) \\<and>\n       robdd_invar_ext bs1 (Suc v'') b1_l \\<and>\n       robdd_invar_ext bs1 (Suc v'') b1_r \\<and>\n       robdd_invar_ext bs2 (Suc v'') b2_l \\<and>\n       robdd_invar_ext bs2 (Suc v'') b2_r \\<and>\n       b1_l \\<in> subrobdds b1 \\<and>\n       b2_l \\<in> subrobdds b2 \\<and>\n       b1_r \\<in> subrobdds b1 \\<and>\n       b2_r \\<in> subrobdds b2 \\<and>\n       robdd_get_min_var b1 b2 = v'' \\<and>\n       (\\<not> (robdd_is_leaf b1 \\<and> robdd_is_leaf b2) \\<longrightarrow>\n        size_robdd b1_l + size_robdd b2_l\n        < size_robdd b1 + size_robdd b2) \\<and>\n       (\\<not> (robdd_is_leaf b1 \\<and> robdd_is_leaf b2) \\<longrightarrow>\n        size_robdd b1_r + size_robdd b2_r < size_robdd b1 + size_robdd b2)\n 2. \\<And>x21 x22 x23 x24.\n       b1 = robdd_var x21 x22 x23 x24 \\<Longrightarrow>\n       robdd_\\<alpha> b1_l =\n       (\\<lambda>a. robdd_\\<alpha> b1 (a(v'' := True))) \\<and>\n       robdd_\\<alpha> b1_r =\n       (\\<lambda>a. robdd_\\<alpha> b1 (a(v'' := False))) \\<and>\n       robdd_\\<alpha> b2_l =\n       (\\<lambda>a. robdd_\\<alpha> b2 (a(v'' := True))) \\<and>\n       robdd_\\<alpha> b2_r =\n       (\\<lambda>a. robdd_\\<alpha> b2 (a(v'' := False))) \\<and>\n       robdd_invar_ext bs1 (Suc v'') b1_l \\<and>\n       robdd_invar_ext bs1 (Suc v'') b1_r \\<and>\n       robdd_invar_ext bs2 (Suc v'') b2_l \\<and>\n       robdd_invar_ext bs2 (Suc v'') b2_r \\<and>\n       b1_l \\<in> subrobdds b1 \\<and>\n       b2_l \\<in> subrobdds b2 \\<and>\n       b1_r \\<in> subrobdds b1 \\<and>\n       b2_r \\<in> subrobdds b2 \\<and>\n       robdd_get_min_var b1 b2 = v'' \\<and>\n       (\\<not> (robdd_is_leaf b1 \\<and> robdd_is_leaf b2) \\<longrightarrow>\n        size_robdd b1_l + size_robdd b2_l\n        < size_robdd b1 + size_robdd b2) \\<and>\n       (\\<not> (robdd_is_leaf b1 \\<and> robdd_is_leaf b2) \\<longrightarrow>\n        size_robdd b1_r + size_robdd b2_r < size_robdd b1 + size_robdd b2)", "case (robdd_leaf f)"], ["proof (state)\nthis:\n  b1 = robdd_leaf f\n\ngoal (2 subgoals):\n 1. \\<And>x1.\n       b1 = robdd_leaf x1 \\<Longrightarrow>\n       robdd_\\<alpha> b1_l =\n       (\\<lambda>a. robdd_\\<alpha> b1 (a(v'' := True))) \\<and>\n       robdd_\\<alpha> b1_r =\n       (\\<lambda>a. robdd_\\<alpha> b1 (a(v'' := False))) \\<and>\n       robdd_\\<alpha> b2_l =\n       (\\<lambda>a. robdd_\\<alpha> b2 (a(v'' := True))) \\<and>\n       robdd_\\<alpha> b2_r =\n       (\\<lambda>a. robdd_\\<alpha> b2 (a(v'' := False))) \\<and>\n       robdd_invar_ext bs1 (Suc v'') b1_l \\<and>\n       robdd_invar_ext bs1 (Suc v'') b1_r \\<and>\n       robdd_invar_ext bs2 (Suc v'') b2_l \\<and>\n       robdd_invar_ext bs2 (Suc v'') b2_r \\<and>\n       b1_l \\<in> subrobdds b1 \\<and>\n       b2_l \\<in> subrobdds b2 \\<and>\n       b1_r \\<in> subrobdds b1 \\<and>\n       b2_r \\<in> subrobdds b2 \\<and>\n       robdd_get_min_var b1 b2 = v'' \\<and>\n       (\\<not> (robdd_is_leaf b1 \\<and> robdd_is_leaf b2) \\<longrightarrow>\n        size_robdd b1_l + size_robdd b2_l\n        < size_robdd b1 + size_robdd b2) \\<and>\n       (\\<not> (robdd_is_leaf b1 \\<and> robdd_is_leaf b2) \\<longrightarrow>\n        size_robdd b1_r + size_robdd b2_r < size_robdd b1 + size_robdd b2)\n 2. \\<And>x21 x22 x23 x24.\n       b1 = robdd_var x21 x22 x23 x24 \\<Longrightarrow>\n       robdd_\\<alpha> b1_l =\n       (\\<lambda>a. robdd_\\<alpha> b1 (a(v'' := True))) \\<and>\n       robdd_\\<alpha> b1_r =\n       (\\<lambda>a. robdd_\\<alpha> b1 (a(v'' := False))) \\<and>\n       robdd_\\<alpha> b2_l =\n       (\\<lambda>a. robdd_\\<alpha> b2 (a(v'' := True))) \\<and>\n       robdd_\\<alpha> b2_r =\n       (\\<lambda>a. robdd_\\<alpha> b2 (a(v'' := False))) \\<and>\n       robdd_invar_ext bs1 (Suc v'') b1_l \\<and>\n       robdd_invar_ext bs1 (Suc v'') b1_r \\<and>\n       robdd_invar_ext bs2 (Suc v'') b2_l \\<and>\n       robdd_invar_ext bs2 (Suc v'') b2_r \\<and>\n       b1_l \\<in> subrobdds b1 \\<and>\n       b2_l \\<in> subrobdds b2 \\<and>\n       b1_r \\<in> subrobdds b1 \\<and>\n       b2_r \\<in> subrobdds b2 \\<and>\n       robdd_get_min_var b1 b2 = v'' \\<and>\n       (\\<not> (robdd_is_leaf b1 \\<and> robdd_is_leaf b2) \\<longrightarrow>\n        size_robdd b1_l + size_robdd b2_l\n        < size_robdd b1 + size_robdd b2) \\<and>\n       (\\<not> (robdd_is_leaf b1 \\<and> robdd_is_leaf b2) \\<longrightarrow>\n        size_robdd b1_r + size_robdd b2_r < size_robdd b1 + size_robdd b2)", "note b1_eq = this"], ["proof (state)\nthis:\n  b1 = robdd_leaf f\n\ngoal (2 subgoals):\n 1. \\<And>x1.\n       b1 = robdd_leaf x1 \\<Longrightarrow>\n       robdd_\\<alpha> b1_l =\n       (\\<lambda>a. robdd_\\<alpha> b1 (a(v'' := True))) \\<and>\n       robdd_\\<alpha> b1_r =\n       (\\<lambda>a. robdd_\\<alpha> b1 (a(v'' := False))) \\<and>\n       robdd_\\<alpha> b2_l =\n       (\\<lambda>a. robdd_\\<alpha> b2 (a(v'' := True))) \\<and>\n       robdd_\\<alpha> b2_r =\n       (\\<lambda>a. robdd_\\<alpha> b2 (a(v'' := False))) \\<and>\n       robdd_invar_ext bs1 (Suc v'') b1_l \\<and>\n       robdd_invar_ext bs1 (Suc v'') b1_r \\<and>\n       robdd_invar_ext bs2 (Suc v'') b2_l \\<and>\n       robdd_invar_ext bs2 (Suc v'') b2_r \\<and>\n       b1_l \\<in> subrobdds b1 \\<and>\n       b2_l \\<in> subrobdds b2 \\<and>\n       b1_r \\<in> subrobdds b1 \\<and>\n       b2_r \\<in> subrobdds b2 \\<and>\n       robdd_get_min_var b1 b2 = v'' \\<and>\n       (\\<not> (robdd_is_leaf b1 \\<and> robdd_is_leaf b2) \\<longrightarrow>\n        size_robdd b1_l + size_robdd b2_l\n        < size_robdd b1 + size_robdd b2) \\<and>\n       (\\<not> (robdd_is_leaf b1 \\<and> robdd_is_leaf b2) \\<longrightarrow>\n        size_robdd b1_r + size_robdd b2_r < size_robdd b1 + size_robdd b2)\n 2. \\<And>x21 x22 x23 x24.\n       b1 = robdd_var x21 x22 x23 x24 \\<Longrightarrow>\n       robdd_\\<alpha> b1_l =\n       (\\<lambda>a. robdd_\\<alpha> b1 (a(v'' := True))) \\<and>\n       robdd_\\<alpha> b1_r =\n       (\\<lambda>a. robdd_\\<alpha> b1 (a(v'' := False))) \\<and>\n       robdd_\\<alpha> b2_l =\n       (\\<lambda>a. robdd_\\<alpha> b2 (a(v'' := True))) \\<and>\n       robdd_\\<alpha> b2_r =\n       (\\<lambda>a. robdd_\\<alpha> b2 (a(v'' := False))) \\<and>\n       robdd_invar_ext bs1 (Suc v'') b1_l \\<and>\n       robdd_invar_ext bs1 (Suc v'') b1_r \\<and>\n       robdd_invar_ext bs2 (Suc v'') b2_l \\<and>\n       robdd_invar_ext bs2 (Suc v'') b2_r \\<and>\n       b1_l \\<in> subrobdds b1 \\<and>\n       b2_l \\<in> subrobdds b2 \\<and>\n       b1_r \\<in> subrobdds b1 \\<and>\n       b2_r \\<in> subrobdds b2 \\<and>\n       robdd_get_min_var b1 b2 = v'' \\<and>\n       (\\<not> (robdd_is_leaf b1 \\<and> robdd_is_leaf b2) \\<longrightarrow>\n        size_robdd b1_l + size_robdd b2_l\n        < size_robdd b1 + size_robdd b2) \\<and>\n       (\\<not> (robdd_is_leaf b1 \\<and> robdd_is_leaf b2) \\<longrightarrow>\n        size_robdd b1_r + size_robdd b2_r < size_robdd b1 + size_robdd b2)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. robdd_\\<alpha> b1_l =\n    (\\<lambda>a. robdd_\\<alpha> b1 (a(v'' := True))) \\<and>\n    robdd_\\<alpha> b1_r =\n    (\\<lambda>a. robdd_\\<alpha> b1 (a(v'' := False))) \\<and>\n    robdd_\\<alpha> b2_l =\n    (\\<lambda>a. robdd_\\<alpha> b2 (a(v'' := True))) \\<and>\n    robdd_\\<alpha> b2_r =\n    (\\<lambda>a. robdd_\\<alpha> b2 (a(v'' := False))) \\<and>\n    robdd_invar_ext bs1 (Suc v'') b1_l \\<and>\n    robdd_invar_ext bs1 (Suc v'') b1_r \\<and>\n    robdd_invar_ext bs2 (Suc v'') b2_l \\<and>\n    robdd_invar_ext bs2 (Suc v'') b2_r \\<and>\n    b1_l \\<in> subrobdds b1 \\<and>\n    b2_l \\<in> subrobdds b2 \\<and>\n    b1_r \\<in> subrobdds b1 \\<and>\n    b2_r \\<in> subrobdds b2 \\<and>\n    robdd_get_min_var b1 b2 = v'' \\<and>\n    (\\<not> (robdd_is_leaf b1 \\<and> robdd_is_leaf b2) \\<longrightarrow>\n     size_robdd b1_l + size_robdd b2_l\n     < size_robdd b1 + size_robdd b2) \\<and>\n    (\\<not> (robdd_is_leaf b1 \\<and> robdd_is_leaf b2) \\<longrightarrow>\n     size_robdd b1_r + size_robdd b2_r < size_robdd b1 + size_robdd b2)", "proof (cases b2)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x1.\n       b2 = robdd_leaf x1 \\<Longrightarrow>\n       robdd_\\<alpha> b1_l =\n       (\\<lambda>a. robdd_\\<alpha> b1 (a(v'' := True))) \\<and>\n       robdd_\\<alpha> b1_r =\n       (\\<lambda>a. robdd_\\<alpha> b1 (a(v'' := False))) \\<and>\n       robdd_\\<alpha> b2_l =\n       (\\<lambda>a. robdd_\\<alpha> b2 (a(v'' := True))) \\<and>\n       robdd_\\<alpha> b2_r =\n       (\\<lambda>a. robdd_\\<alpha> b2 (a(v'' := False))) \\<and>\n       robdd_invar_ext bs1 (Suc v'') b1_l \\<and>\n       robdd_invar_ext bs1 (Suc v'') b1_r \\<and>\n       robdd_invar_ext bs2 (Suc v'') b2_l \\<and>\n       robdd_invar_ext bs2 (Suc v'') b2_r \\<and>\n       b1_l \\<in> subrobdds b1 \\<and>\n       b2_l \\<in> subrobdds b2 \\<and>\n       b1_r \\<in> subrobdds b1 \\<and>\n       b2_r \\<in> subrobdds b2 \\<and>\n       robdd_get_min_var b1 b2 = v'' \\<and>\n       (\\<not> (robdd_is_leaf b1 \\<and> robdd_is_leaf b2) \\<longrightarrow>\n        size_robdd b1_l + size_robdd b2_l\n        < size_robdd b1 + size_robdd b2) \\<and>\n       (\\<not> (robdd_is_leaf b1 \\<and> robdd_is_leaf b2) \\<longrightarrow>\n        size_robdd b1_r + size_robdd b2_r < size_robdd b1 + size_robdd b2)\n 2. \\<And>x21 x22 x23 x24.\n       b2 = robdd_var x21 x22 x23 x24 \\<Longrightarrow>\n       robdd_\\<alpha> b1_l =\n       (\\<lambda>a. robdd_\\<alpha> b1 (a(v'' := True))) \\<and>\n       robdd_\\<alpha> b1_r =\n       (\\<lambda>a. robdd_\\<alpha> b1 (a(v'' := False))) \\<and>\n       robdd_\\<alpha> b2_l =\n       (\\<lambda>a. robdd_\\<alpha> b2 (a(v'' := True))) \\<and>\n       robdd_\\<alpha> b2_r =\n       (\\<lambda>a. robdd_\\<alpha> b2 (a(v'' := False))) \\<and>\n       robdd_invar_ext bs1 (Suc v'') b1_l \\<and>\n       robdd_invar_ext bs1 (Suc v'') b1_r \\<and>\n       robdd_invar_ext bs2 (Suc v'') b2_l \\<and>\n       robdd_invar_ext bs2 (Suc v'') b2_r \\<and>\n       b1_l \\<in> subrobdds b1 \\<and>\n       b2_l \\<in> subrobdds b2 \\<and>\n       b1_r \\<in> subrobdds b1 \\<and>\n       b2_r \\<in> subrobdds b2 \\<and>\n       robdd_get_min_var b1 b2 = v'' \\<and>\n       (\\<not> (robdd_is_leaf b1 \\<and> robdd_is_leaf b2) \\<longrightarrow>\n        size_robdd b1_l + size_robdd b2_l\n        < size_robdd b1 + size_robdd b2) \\<and>\n       (\\<not> (robdd_is_leaf b1 \\<and> robdd_is_leaf b2) \\<longrightarrow>\n        size_robdd b1_r + size_robdd b2_r < size_robdd b1 + size_robdd b2)", "case (robdd_leaf f')"], ["proof (state)\nthis:\n  b2 = robdd_leaf f'\n\ngoal (2 subgoals):\n 1. \\<And>x1.\n       b2 = robdd_leaf x1 \\<Longrightarrow>\n       robdd_\\<alpha> b1_l =\n       (\\<lambda>a. robdd_\\<alpha> b1 (a(v'' := True))) \\<and>\n       robdd_\\<alpha> b1_r =\n       (\\<lambda>a. robdd_\\<alpha> b1 (a(v'' := False))) \\<and>\n       robdd_\\<alpha> b2_l =\n       (\\<lambda>a. robdd_\\<alpha> b2 (a(v'' := True))) \\<and>\n       robdd_\\<alpha> b2_r =\n       (\\<lambda>a. robdd_\\<alpha> b2 (a(v'' := False))) \\<and>\n       robdd_invar_ext bs1 (Suc v'') b1_l \\<and>\n       robdd_invar_ext bs1 (Suc v'') b1_r \\<and>\n       robdd_invar_ext bs2 (Suc v'') b2_l \\<and>\n       robdd_invar_ext bs2 (Suc v'') b2_r \\<and>\n       b1_l \\<in> subrobdds b1 \\<and>\n       b2_l \\<in> subrobdds b2 \\<and>\n       b1_r \\<in> subrobdds b1 \\<and>\n       b2_r \\<in> subrobdds b2 \\<and>\n       robdd_get_min_var b1 b2 = v'' \\<and>\n       (\\<not> (robdd_is_leaf b1 \\<and> robdd_is_leaf b2) \\<longrightarrow>\n        size_robdd b1_l + size_robdd b2_l\n        < size_robdd b1 + size_robdd b2) \\<and>\n       (\\<not> (robdd_is_leaf b1 \\<and> robdd_is_leaf b2) \\<longrightarrow>\n        size_robdd b1_r + size_robdd b2_r < size_robdd b1 + size_robdd b2)\n 2. \\<And>x21 x22 x23 x24.\n       b2 = robdd_var x21 x22 x23 x24 \\<Longrightarrow>\n       robdd_\\<alpha> b1_l =\n       (\\<lambda>a. robdd_\\<alpha> b1 (a(v'' := True))) \\<and>\n       robdd_\\<alpha> b1_r =\n       (\\<lambda>a. robdd_\\<alpha> b1 (a(v'' := False))) \\<and>\n       robdd_\\<alpha> b2_l =\n       (\\<lambda>a. robdd_\\<alpha> b2 (a(v'' := True))) \\<and>\n       robdd_\\<alpha> b2_r =\n       (\\<lambda>a. robdd_\\<alpha> b2 (a(v'' := False))) \\<and>\n       robdd_invar_ext bs1 (Suc v'') b1_l \\<and>\n       robdd_invar_ext bs1 (Suc v'') b1_r \\<and>\n       robdd_invar_ext bs2 (Suc v'') b2_l \\<and>\n       robdd_invar_ext bs2 (Suc v'') b2_r \\<and>\n       b1_l \\<in> subrobdds b1 \\<and>\n       b2_l \\<in> subrobdds b2 \\<and>\n       b1_r \\<in> subrobdds b1 \\<and>\n       b2_r \\<in> subrobdds b2 \\<and>\n       robdd_get_min_var b1 b2 = v'' \\<and>\n       (\\<not> (robdd_is_leaf b1 \\<and> robdd_is_leaf b2) \\<longrightarrow>\n        size_robdd b1_l + size_robdd b2_l\n        < size_robdd b1 + size_robdd b2) \\<and>\n       (\\<not> (robdd_is_leaf b1 \\<and> robdd_is_leaf b2) \\<longrightarrow>\n        size_robdd b1_r + size_robdd b2_r < size_robdd b1 + size_robdd b2)", "note b2_eq = this"], ["proof (state)\nthis:\n  b2 = robdd_leaf f'\n\ngoal (2 subgoals):\n 1. \\<And>x1.\n       b2 = robdd_leaf x1 \\<Longrightarrow>\n       robdd_\\<alpha> b1_l =\n       (\\<lambda>a. robdd_\\<alpha> b1 (a(v'' := True))) \\<and>\n       robdd_\\<alpha> b1_r =\n       (\\<lambda>a. robdd_\\<alpha> b1 (a(v'' := False))) \\<and>\n       robdd_\\<alpha> b2_l =\n       (\\<lambda>a. robdd_\\<alpha> b2 (a(v'' := True))) \\<and>\n       robdd_\\<alpha> b2_r =\n       (\\<lambda>a. robdd_\\<alpha> b2 (a(v'' := False))) \\<and>\n       robdd_invar_ext bs1 (Suc v'') b1_l \\<and>\n       robdd_invar_ext bs1 (Suc v'') b1_r \\<and>\n       robdd_invar_ext bs2 (Suc v'') b2_l \\<and>\n       robdd_invar_ext bs2 (Suc v'') b2_r \\<and>\n       b1_l \\<in> subrobdds b1 \\<and>\n       b2_l \\<in> subrobdds b2 \\<and>\n       b1_r \\<in> subrobdds b1 \\<and>\n       b2_r \\<in> subrobdds b2 \\<and>\n       robdd_get_min_var b1 b2 = v'' \\<and>\n       (\\<not> (robdd_is_leaf b1 \\<and> robdd_is_leaf b2) \\<longrightarrow>\n        size_robdd b1_l + size_robdd b2_l\n        < size_robdd b1 + size_robdd b2) \\<and>\n       (\\<not> (robdd_is_leaf b1 \\<and> robdd_is_leaf b2) \\<longrightarrow>\n        size_robdd b1_r + size_robdd b2_r < size_robdd b1 + size_robdd b2)\n 2. \\<And>x21 x22 x23 x24.\n       b2 = robdd_var x21 x22 x23 x24 \\<Longrightarrow>\n       robdd_\\<alpha> b1_l =\n       (\\<lambda>a. robdd_\\<alpha> b1 (a(v'' := True))) \\<and>\n       robdd_\\<alpha> b1_r =\n       (\\<lambda>a. robdd_\\<alpha> b1 (a(v'' := False))) \\<and>\n       robdd_\\<alpha> b2_l =\n       (\\<lambda>a. robdd_\\<alpha> b2 (a(v'' := True))) \\<and>\n       robdd_\\<alpha> b2_r =\n       (\\<lambda>a. robdd_\\<alpha> b2 (a(v'' := False))) \\<and>\n       robdd_invar_ext bs1 (Suc v'') b1_l \\<and>\n       robdd_invar_ext bs1 (Suc v'') b1_r \\<and>\n       robdd_invar_ext bs2 (Suc v'') b2_l \\<and>\n       robdd_invar_ext bs2 (Suc v'') b2_r \\<and>\n       b1_l \\<in> subrobdds b1 \\<and>\n       b2_l \\<in> subrobdds b2 \\<and>\n       b1_r \\<in> subrobdds b1 \\<and>\n       b2_r \\<in> subrobdds b2 \\<and>\n       robdd_get_min_var b1 b2 = v'' \\<and>\n       (\\<not> (robdd_is_leaf b1 \\<and> robdd_is_leaf b2) \\<longrightarrow>\n        size_robdd b1_l + size_robdd b2_l\n        < size_robdd b1 + size_robdd b2) \\<and>\n       (\\<not> (robdd_is_leaf b1 \\<and> robdd_is_leaf b2) \\<longrightarrow>\n        size_robdd b1_r + size_robdd b2_r < size_robdd b1 + size_robdd b2)", "with b1_eq eval[symmetric] invar_b1 invar_b2"], ["proof (chain)\npicking this:\n  b1 = robdd_leaf f\n  (b1_l, b1_r, v'', b2_l, b2_r) = robdd_apply_next b1 b2\n  robdd_invar_ext bs1 n1 b1\n  robdd_invar_ext bs2 n2 b2\n  b2 = robdd_leaf f'", "show ?thesis"], ["proof (prove)\nusing this:\n  b1 = robdd_leaf f\n  (b1_l, b1_r, v'', b2_l, b2_r) = robdd_apply_next b1 b2\n  robdd_invar_ext bs1 n1 b1\n  robdd_invar_ext bs2 n2 b2\n  b2 = robdd_leaf f'\n\ngoal (1 subgoal):\n 1. robdd_\\<alpha> b1_l =\n    (\\<lambda>a. robdd_\\<alpha> b1 (a(v'' := True))) \\<and>\n    robdd_\\<alpha> b1_r =\n    (\\<lambda>a. robdd_\\<alpha> b1 (a(v'' := False))) \\<and>\n    robdd_\\<alpha> b2_l =\n    (\\<lambda>a. robdd_\\<alpha> b2 (a(v'' := True))) \\<and>\n    robdd_\\<alpha> b2_r =\n    (\\<lambda>a. robdd_\\<alpha> b2 (a(v'' := False))) \\<and>\n    robdd_invar_ext bs1 (Suc v'') b1_l \\<and>\n    robdd_invar_ext bs1 (Suc v'') b1_r \\<and>\n    robdd_invar_ext bs2 (Suc v'') b2_l \\<and>\n    robdd_invar_ext bs2 (Suc v'') b2_r \\<and>\n    b1_l \\<in> subrobdds b1 \\<and>\n    b2_l \\<in> subrobdds b2 \\<and>\n    b1_r \\<in> subrobdds b1 \\<and>\n    b2_r \\<in> subrobdds b2 \\<and>\n    robdd_get_min_var b1 b2 = v'' \\<and>\n    (\\<not> (robdd_is_leaf b1 \\<and> robdd_is_leaf b2) \\<longrightarrow>\n     size_robdd b1_l + size_robdd b2_l\n     < size_robdd b1 + size_robdd b2) \\<and>\n    (\\<not> (robdd_is_leaf b1 \\<and> robdd_is_leaf b2) \\<longrightarrow>\n     size_robdd b1_r + size_robdd b2_r < size_robdd b1 + size_robdd b2)", "by (simp add: fun_eq_iff)"], ["proof (state)\nthis:\n  robdd_\\<alpha> b1_l =\n  (\\<lambda>a. robdd_\\<alpha> b1 (a(v'' := True))) \\<and>\n  robdd_\\<alpha> b1_r =\n  (\\<lambda>a. robdd_\\<alpha> b1 (a(v'' := False))) \\<and>\n  robdd_\\<alpha> b2_l =\n  (\\<lambda>a. robdd_\\<alpha> b2 (a(v'' := True))) \\<and>\n  robdd_\\<alpha> b2_r =\n  (\\<lambda>a. robdd_\\<alpha> b2 (a(v'' := False))) \\<and>\n  robdd_invar_ext bs1 (Suc v'') b1_l \\<and>\n  robdd_invar_ext bs1 (Suc v'') b1_r \\<and>\n  robdd_invar_ext bs2 (Suc v'') b2_l \\<and>\n  robdd_invar_ext bs2 (Suc v'') b2_r \\<and>\n  b1_l \\<in> subrobdds b1 \\<and>\n  b2_l \\<in> subrobdds b2 \\<and>\n  b1_r \\<in> subrobdds b1 \\<and>\n  b2_r \\<in> subrobdds b2 \\<and>\n  robdd_get_min_var b1 b2 = v'' \\<and>\n  (\\<not> (robdd_is_leaf b1 \\<and> robdd_is_leaf b2) \\<longrightarrow>\n   size_robdd b1_l + size_robdd b2_l < size_robdd b1 + size_robdd b2) \\<and>\n  (\\<not> (robdd_is_leaf b1 \\<and> robdd_is_leaf b2) \\<longrightarrow>\n   size_robdd b1_r + size_robdd b2_r < size_robdd b1 + size_robdd b2)\n\ngoal (1 subgoal):\n 1. \\<And>x21 x22 x23 x24.\n       b2 = robdd_var x21 x22 x23 x24 \\<Longrightarrow>\n       robdd_\\<alpha> b1_l =\n       (\\<lambda>a. robdd_\\<alpha> b1 (a(v'' := True))) \\<and>\n       robdd_\\<alpha> b1_r =\n       (\\<lambda>a. robdd_\\<alpha> b1 (a(v'' := False))) \\<and>\n       robdd_\\<alpha> b2_l =\n       (\\<lambda>a. robdd_\\<alpha> b2 (a(v'' := True))) \\<and>\n       robdd_\\<alpha> b2_r =\n       (\\<lambda>a. robdd_\\<alpha> b2 (a(v'' := False))) \\<and>\n       robdd_invar_ext bs1 (Suc v'') b1_l \\<and>\n       robdd_invar_ext bs1 (Suc v'') b1_r \\<and>\n       robdd_invar_ext bs2 (Suc v'') b2_l \\<and>\n       robdd_invar_ext bs2 (Suc v'') b2_r \\<and>\n       b1_l \\<in> subrobdds b1 \\<and>\n       b2_l \\<in> subrobdds b2 \\<and>\n       b1_r \\<in> subrobdds b1 \\<and>\n       b2_r \\<in> subrobdds b2 \\<and>\n       robdd_get_min_var b1 b2 = v'' \\<and>\n       (\\<not> (robdd_is_leaf b1 \\<and> robdd_is_leaf b2) \\<longrightarrow>\n        size_robdd b1_l + size_robdd b2_l\n        < size_robdd b1 + size_robdd b2) \\<and>\n       (\\<not> (robdd_is_leaf b1 \\<and> robdd_is_leaf b2) \\<longrightarrow>\n        size_robdd b1_r + size_robdd b2_r < size_robdd b1 + size_robdd b2)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x21 x22 x23 x24.\n       b2 = robdd_var x21 x22 x23 x24 \\<Longrightarrow>\n       robdd_\\<alpha> b1_l =\n       (\\<lambda>a. robdd_\\<alpha> b1 (a(v'' := True))) \\<and>\n       robdd_\\<alpha> b1_r =\n       (\\<lambda>a. robdd_\\<alpha> b1 (a(v'' := False))) \\<and>\n       robdd_\\<alpha> b2_l =\n       (\\<lambda>a. robdd_\\<alpha> b2 (a(v'' := True))) \\<and>\n       robdd_\\<alpha> b2_r =\n       (\\<lambda>a. robdd_\\<alpha> b2 (a(v'' := False))) \\<and>\n       robdd_invar_ext bs1 (Suc v'') b1_l \\<and>\n       robdd_invar_ext bs1 (Suc v'') b1_r \\<and>\n       robdd_invar_ext bs2 (Suc v'') b2_l \\<and>\n       robdd_invar_ext bs2 (Suc v'') b2_r \\<and>\n       b1_l \\<in> subrobdds b1 \\<and>\n       b2_l \\<in> subrobdds b2 \\<and>\n       b1_r \\<in> subrobdds b1 \\<and>\n       b2_r \\<in> subrobdds b2 \\<and>\n       robdd_get_min_var b1 b2 = v'' \\<and>\n       (\\<not> (robdd_is_leaf b1 \\<and> robdd_is_leaf b2) \\<longrightarrow>\n        size_robdd b1_l + size_robdd b2_l\n        < size_robdd b1 + size_robdd b2) \\<and>\n       (\\<not> (robdd_is_leaf b1 \\<and> robdd_is_leaf b2) \\<longrightarrow>\n        size_robdd b1_r + size_robdd b2_r < size_robdd b1 + size_robdd b2)", "case (robdd_var i' l' v' r')"], ["proof (state)\nthis:\n  b2 = robdd_var i' l' v' r'\n\ngoal (1 subgoal):\n 1. \\<And>x21 x22 x23 x24.\n       b2 = robdd_var x21 x22 x23 x24 \\<Longrightarrow>\n       robdd_\\<alpha> b1_l =\n       (\\<lambda>a. robdd_\\<alpha> b1 (a(v'' := True))) \\<and>\n       robdd_\\<alpha> b1_r =\n       (\\<lambda>a. robdd_\\<alpha> b1 (a(v'' := False))) \\<and>\n       robdd_\\<alpha> b2_l =\n       (\\<lambda>a. robdd_\\<alpha> b2 (a(v'' := True))) \\<and>\n       robdd_\\<alpha> b2_r =\n       (\\<lambda>a. robdd_\\<alpha> b2 (a(v'' := False))) \\<and>\n       robdd_invar_ext bs1 (Suc v'') b1_l \\<and>\n       robdd_invar_ext bs1 (Suc v'') b1_r \\<and>\n       robdd_invar_ext bs2 (Suc v'') b2_l \\<and>\n       robdd_invar_ext bs2 (Suc v'') b2_r \\<and>\n       b1_l \\<in> subrobdds b1 \\<and>\n       b2_l \\<in> subrobdds b2 \\<and>\n       b1_r \\<in> subrobdds b1 \\<and>\n       b2_r \\<in> subrobdds b2 \\<and>\n       robdd_get_min_var b1 b2 = v'' \\<and>\n       (\\<not> (robdd_is_leaf b1 \\<and> robdd_is_leaf b2) \\<longrightarrow>\n        size_robdd b1_l + size_robdd b2_l\n        < size_robdd b1 + size_robdd b2) \\<and>\n       (\\<not> (robdd_is_leaf b1 \\<and> robdd_is_leaf b2) \\<longrightarrow>\n        size_robdd b1_r + size_robdd b2_r < size_robdd b1 + size_robdd b2)", "note b2_eq = this"], ["proof (state)\nthis:\n  b2 = robdd_var i' l' v' r'\n\ngoal (1 subgoal):\n 1. \\<And>x21 x22 x23 x24.\n       b2 = robdd_var x21 x22 x23 x24 \\<Longrightarrow>\n       robdd_\\<alpha> b1_l =\n       (\\<lambda>a. robdd_\\<alpha> b1 (a(v'' := True))) \\<and>\n       robdd_\\<alpha> b1_r =\n       (\\<lambda>a. robdd_\\<alpha> b1 (a(v'' := False))) \\<and>\n       robdd_\\<alpha> b2_l =\n       (\\<lambda>a. robdd_\\<alpha> b2 (a(v'' := True))) \\<and>\n       robdd_\\<alpha> b2_r =\n       (\\<lambda>a. robdd_\\<alpha> b2 (a(v'' := False))) \\<and>\n       robdd_invar_ext bs1 (Suc v'') b1_l \\<and>\n       robdd_invar_ext bs1 (Suc v'') b1_r \\<and>\n       robdd_invar_ext bs2 (Suc v'') b2_l \\<and>\n       robdd_invar_ext bs2 (Suc v'') b2_r \\<and>\n       b1_l \\<in> subrobdds b1 \\<and>\n       b2_l \\<in> subrobdds b2 \\<and>\n       b1_r \\<in> subrobdds b1 \\<and>\n       b2_r \\<in> subrobdds b2 \\<and>\n       robdd_get_min_var b1 b2 = v'' \\<and>\n       (\\<not> (robdd_is_leaf b1 \\<and> robdd_is_leaf b2) \\<longrightarrow>\n        size_robdd b1_l + size_robdd b2_l\n        < size_robdd b1 + size_robdd b2) \\<and>\n       (\\<not> (robdd_is_leaf b1 \\<and> robdd_is_leaf b2) \\<longrightarrow>\n        size_robdd b1_r + size_robdd b2_r < size_robdd b1 + size_robdd b2)", "with b1_eq eval[symmetric] invar_b1 invar_b2"], ["proof (chain)\npicking this:\n  b1 = robdd_leaf f\n  (b1_l, b1_r, v'', b2_l, b2_r) = robdd_apply_next b1 b2\n  robdd_invar_ext bs1 n1 b1\n  robdd_invar_ext bs2 n2 b2\n  b2 = robdd_var i' l' v' r'", "show ?thesis"], ["proof (prove)\nusing this:\n  b1 = robdd_leaf f\n  (b1_l, b1_r, v'', b2_l, b2_r) = robdd_apply_next b1 b2\n  robdd_invar_ext bs1 n1 b1\n  robdd_invar_ext bs2 n2 b2\n  b2 = robdd_var i' l' v' r'\n\ngoal (1 subgoal):\n 1. robdd_\\<alpha> b1_l =\n    (\\<lambda>a. robdd_\\<alpha> b1 (a(v'' := True))) \\<and>\n    robdd_\\<alpha> b1_r =\n    (\\<lambda>a. robdd_\\<alpha> b1 (a(v'' := False))) \\<and>\n    robdd_\\<alpha> b2_l =\n    (\\<lambda>a. robdd_\\<alpha> b2 (a(v'' := True))) \\<and>\n    robdd_\\<alpha> b2_r =\n    (\\<lambda>a. robdd_\\<alpha> b2 (a(v'' := False))) \\<and>\n    robdd_invar_ext bs1 (Suc v'') b1_l \\<and>\n    robdd_invar_ext bs1 (Suc v'') b1_r \\<and>\n    robdd_invar_ext bs2 (Suc v'') b2_l \\<and>\n    robdd_invar_ext bs2 (Suc v'') b2_r \\<and>\n    b1_l \\<in> subrobdds b1 \\<and>\n    b2_l \\<in> subrobdds b2 \\<and>\n    b1_r \\<in> subrobdds b1 \\<and>\n    b2_r \\<in> subrobdds b2 \\<and>\n    robdd_get_min_var b1 b2 = v'' \\<and>\n    (\\<not> (robdd_is_leaf b1 \\<and> robdd_is_leaf b2) \\<longrightarrow>\n     size_robdd b1_l + size_robdd b2_l\n     < size_robdd b1 + size_robdd b2) \\<and>\n    (\\<not> (robdd_is_leaf b1 \\<and> robdd_is_leaf b2) \\<longrightarrow>\n     size_robdd b1_r + size_robdd b2_r < size_robdd b1 + size_robdd b2)", "apply (simp add: fun_eq_iff)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>b1 = robdd_leaf f;\n     b1_l = robdd_leaf f \\<and>\n     b1_r = robdd_leaf f \\<and> v'' = v' \\<and> b2_l = l' \\<and> b2_r = r';\n     robdd_invar_ids bs1 \\<and> robdd_leaf f \\<in> subrobdds_set bs1;\n     robdd_var i' l' v' r' \\<in> subrobdds_set bs2 \\<and>\n     \\<not> robdd_equiv l' r' \\<and>\n     n2 \\<le> v' \\<and>\n     robdd_invar_ext bs2 (Suc v') l' \\<and> robdd_invar_ext bs2 (Suc v') r';\n     b2 = robdd_var i' l' v' r'\\<rbrakk>\n    \\<Longrightarrow> (\\<forall>x.\n                          robdd_\\<alpha> l' x =\n                          robdd_\\<alpha> l' (x(v' := True))) \\<and>\n                      (\\<forall>x.\n                          robdd_\\<alpha> r' x =\n                          robdd_\\<alpha> r' (x(v' := False)))", "apply (intro allI conjI robdd_\\<alpha>_invar_greater [of \"Suc v'\"])"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>b1 = robdd_leaf f;\n        b1_l = robdd_leaf f \\<and>\n        b1_r = robdd_leaf f \\<and>\n        v'' = v' \\<and> b2_l = l' \\<and> b2_r = r';\n        robdd_invar_ids bs1 \\<and> robdd_leaf f \\<in> subrobdds_set bs1;\n        robdd_var i' l' v' r' \\<in> subrobdds_set bs2 \\<and>\n        \\<not> robdd_equiv l' r' \\<and>\n        n2 \\<le> v' \\<and>\n        robdd_invar_ext bs2 (Suc v') l' \\<and>\n        robdd_invar_ext bs2 (Suc v') r';\n        b2 = robdd_var i' l' v' r'\\<rbrakk>\n       \\<Longrightarrow> robdd_invar_vars_greater (Suc v') l'\n 2. \\<And>x v.\n       \\<lbrakk>b1 = robdd_leaf f;\n        b1_l = robdd_leaf f \\<and>\n        b1_r = robdd_leaf f \\<and>\n        v'' = v' \\<and> b2_l = l' \\<and> b2_r = r';\n        robdd_invar_ids bs1 \\<and> robdd_leaf f \\<in> subrobdds_set bs1;\n        robdd_var i' l' v' r' \\<in> subrobdds_set bs2 \\<and>\n        \\<not> robdd_equiv l' r' \\<and>\n        n2 \\<le> v' \\<and>\n        robdd_invar_ext bs2 (Suc v') l' \\<and>\n        robdd_invar_ext bs2 (Suc v') r';\n        b2 = robdd_var i' l' v' r'; Suc v' \\<le> v\\<rbrakk>\n       \\<Longrightarrow> x v = (x(v' := True)) v\n 3. \\<And>x.\n       \\<lbrakk>b1 = robdd_leaf f;\n        b1_l = robdd_leaf f \\<and>\n        b1_r = robdd_leaf f \\<and>\n        v'' = v' \\<and> b2_l = l' \\<and> b2_r = r';\n        robdd_invar_ids bs1 \\<and> robdd_leaf f \\<in> subrobdds_set bs1;\n        robdd_var i' l' v' r' \\<in> subrobdds_set bs2 \\<and>\n        \\<not> robdd_equiv l' r' \\<and>\n        n2 \\<le> v' \\<and>\n        robdd_invar_ext bs2 (Suc v') l' \\<and>\n        robdd_invar_ext bs2 (Suc v') r';\n        b2 = robdd_var i' l' v' r'\\<rbrakk>\n       \\<Longrightarrow> robdd_invar_vars_greater (Suc v') r'\n 4. \\<And>x v.\n       \\<lbrakk>b1 = robdd_leaf f;\n        b1_l = robdd_leaf f \\<and>\n        b1_r = robdd_leaf f \\<and>\n        v'' = v' \\<and> b2_l = l' \\<and> b2_r = r';\n        robdd_invar_ids bs1 \\<and> robdd_leaf f \\<in> subrobdds_set bs1;\n        robdd_var i' l' v' r' \\<in> subrobdds_set bs2 \\<and>\n        \\<not> robdd_equiv l' r' \\<and>\n        n2 \\<le> v' \\<and>\n        robdd_invar_ext bs2 (Suc v') l' \\<and>\n        robdd_invar_ext bs2 (Suc v') r';\n        b2 = robdd_var i' l' v' r'; Suc v' \\<le> v\\<rbrakk>\n       \\<Longrightarrow> x v = (x(v' := False)) v", "apply (simp_all add: robdd_invar_ext_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  robdd_\\<alpha> b1_l =\n  (\\<lambda>a. robdd_\\<alpha> b1 (a(v'' := True))) \\<and>\n  robdd_\\<alpha> b1_r =\n  (\\<lambda>a. robdd_\\<alpha> b1 (a(v'' := False))) \\<and>\n  robdd_\\<alpha> b2_l =\n  (\\<lambda>a. robdd_\\<alpha> b2 (a(v'' := True))) \\<and>\n  robdd_\\<alpha> b2_r =\n  (\\<lambda>a. robdd_\\<alpha> b2 (a(v'' := False))) \\<and>\n  robdd_invar_ext bs1 (Suc v'') b1_l \\<and>\n  robdd_invar_ext bs1 (Suc v'') b1_r \\<and>\n  robdd_invar_ext bs2 (Suc v'') b2_l \\<and>\n  robdd_invar_ext bs2 (Suc v'') b2_r \\<and>\n  b1_l \\<in> subrobdds b1 \\<and>\n  b2_l \\<in> subrobdds b2 \\<and>\n  b1_r \\<in> subrobdds b1 \\<and>\n  b2_r \\<in> subrobdds b2 \\<and>\n  robdd_get_min_var b1 b2 = v'' \\<and>\n  (\\<not> (robdd_is_leaf b1 \\<and> robdd_is_leaf b2) \\<longrightarrow>\n   size_robdd b1_l + size_robdd b2_l < size_robdd b1 + size_robdd b2) \\<and>\n  (\\<not> (robdd_is_leaf b1 \\<and> robdd_is_leaf b2) \\<longrightarrow>\n   size_robdd b1_r + size_robdd b2_r < size_robdd b1 + size_robdd b2)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  robdd_\\<alpha> b1_l =\n  (\\<lambda>a. robdd_\\<alpha> b1 (a(v'' := True))) \\<and>\n  robdd_\\<alpha> b1_r =\n  (\\<lambda>a. robdd_\\<alpha> b1 (a(v'' := False))) \\<and>\n  robdd_\\<alpha> b2_l =\n  (\\<lambda>a. robdd_\\<alpha> b2 (a(v'' := True))) \\<and>\n  robdd_\\<alpha> b2_r =\n  (\\<lambda>a. robdd_\\<alpha> b2 (a(v'' := False))) \\<and>\n  robdd_invar_ext bs1 (Suc v'') b1_l \\<and>\n  robdd_invar_ext bs1 (Suc v'') b1_r \\<and>\n  robdd_invar_ext bs2 (Suc v'') b2_l \\<and>\n  robdd_invar_ext bs2 (Suc v'') b2_r \\<and>\n  b1_l \\<in> subrobdds b1 \\<and>\n  b2_l \\<in> subrobdds b2 \\<and>\n  b1_r \\<in> subrobdds b1 \\<and>\n  b2_r \\<in> subrobdds b2 \\<and>\n  robdd_get_min_var b1 b2 = v'' \\<and>\n  (\\<not> (robdd_is_leaf b1 \\<and> robdd_is_leaf b2) \\<longrightarrow>\n   size_robdd b1_l + size_robdd b2_l < size_robdd b1 + size_robdd b2) \\<and>\n  (\\<not> (robdd_is_leaf b1 \\<and> robdd_is_leaf b2) \\<longrightarrow>\n   size_robdd b1_r + size_robdd b2_r < size_robdd b1 + size_robdd b2)\n\ngoal (1 subgoal):\n 1. \\<And>x21 x22 x23 x24.\n       b1 = robdd_var x21 x22 x23 x24 \\<Longrightarrow>\n       robdd_\\<alpha> b1_l =\n       (\\<lambda>a. robdd_\\<alpha> b1 (a(v'' := True))) \\<and>\n       robdd_\\<alpha> b1_r =\n       (\\<lambda>a. robdd_\\<alpha> b1 (a(v'' := False))) \\<and>\n       robdd_\\<alpha> b2_l =\n       (\\<lambda>a. robdd_\\<alpha> b2 (a(v'' := True))) \\<and>\n       robdd_\\<alpha> b2_r =\n       (\\<lambda>a. robdd_\\<alpha> b2 (a(v'' := False))) \\<and>\n       robdd_invar_ext bs1 (Suc v'') b1_l \\<and>\n       robdd_invar_ext bs1 (Suc v'') b1_r \\<and>\n       robdd_invar_ext bs2 (Suc v'') b2_l \\<and>\n       robdd_invar_ext bs2 (Suc v'') b2_r \\<and>\n       b1_l \\<in> subrobdds b1 \\<and>\n       b2_l \\<in> subrobdds b2 \\<and>\n       b1_r \\<in> subrobdds b1 \\<and>\n       b2_r \\<in> subrobdds b2 \\<and>\n       robdd_get_min_var b1 b2 = v'' \\<and>\n       (\\<not> (robdd_is_leaf b1 \\<and> robdd_is_leaf b2) \\<longrightarrow>\n        size_robdd b1_l + size_robdd b2_l\n        < size_robdd b1 + size_robdd b2) \\<and>\n       (\\<not> (robdd_is_leaf b1 \\<and> robdd_is_leaf b2) \\<longrightarrow>\n        size_robdd b1_r + size_robdd b2_r < size_robdd b1 + size_robdd b2)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x21 x22 x23 x24.\n       b1 = robdd_var x21 x22 x23 x24 \\<Longrightarrow>\n       robdd_\\<alpha> b1_l =\n       (\\<lambda>a. robdd_\\<alpha> b1 (a(v'' := True))) \\<and>\n       robdd_\\<alpha> b1_r =\n       (\\<lambda>a. robdd_\\<alpha> b1 (a(v'' := False))) \\<and>\n       robdd_\\<alpha> b2_l =\n       (\\<lambda>a. robdd_\\<alpha> b2 (a(v'' := True))) \\<and>\n       robdd_\\<alpha> b2_r =\n       (\\<lambda>a. robdd_\\<alpha> b2 (a(v'' := False))) \\<and>\n       robdd_invar_ext bs1 (Suc v'') b1_l \\<and>\n       robdd_invar_ext bs1 (Suc v'') b1_r \\<and>\n       robdd_invar_ext bs2 (Suc v'') b2_l \\<and>\n       robdd_invar_ext bs2 (Suc v'') b2_r \\<and>\n       b1_l \\<in> subrobdds b1 \\<and>\n       b2_l \\<in> subrobdds b2 \\<and>\n       b1_r \\<in> subrobdds b1 \\<and>\n       b2_r \\<in> subrobdds b2 \\<and>\n       robdd_get_min_var b1 b2 = v'' \\<and>\n       (\\<not> (robdd_is_leaf b1 \\<and> robdd_is_leaf b2) \\<longrightarrow>\n        size_robdd b1_l + size_robdd b2_l\n        < size_robdd b1 + size_robdd b2) \\<and>\n       (\\<not> (robdd_is_leaf b1 \\<and> robdd_is_leaf b2) \\<longrightarrow>\n        size_robdd b1_r + size_robdd b2_r < size_robdd b1 + size_robdd b2)", "case (robdd_var i l v r)"], ["proof (state)\nthis:\n  b1 = robdd_var i l v r\n\ngoal (1 subgoal):\n 1. \\<And>x21 x22 x23 x24.\n       b1 = robdd_var x21 x22 x23 x24 \\<Longrightarrow>\n       robdd_\\<alpha> b1_l =\n       (\\<lambda>a. robdd_\\<alpha> b1 (a(v'' := True))) \\<and>\n       robdd_\\<alpha> b1_r =\n       (\\<lambda>a. robdd_\\<alpha> b1 (a(v'' := False))) \\<and>\n       robdd_\\<alpha> b2_l =\n       (\\<lambda>a. robdd_\\<alpha> b2 (a(v'' := True))) \\<and>\n       robdd_\\<alpha> b2_r =\n       (\\<lambda>a. robdd_\\<alpha> b2 (a(v'' := False))) \\<and>\n       robdd_invar_ext bs1 (Suc v'') b1_l \\<and>\n       robdd_invar_ext bs1 (Suc v'') b1_r \\<and>\n       robdd_invar_ext bs2 (Suc v'') b2_l \\<and>\n       robdd_invar_ext bs2 (Suc v'') b2_r \\<and>\n       b1_l \\<in> subrobdds b1 \\<and>\n       b2_l \\<in> subrobdds b2 \\<and>\n       b1_r \\<in> subrobdds b1 \\<and>\n       b2_r \\<in> subrobdds b2 \\<and>\n       robdd_get_min_var b1 b2 = v'' \\<and>\n       (\\<not> (robdd_is_leaf b1 \\<and> robdd_is_leaf b2) \\<longrightarrow>\n        size_robdd b1_l + size_robdd b2_l\n        < size_robdd b1 + size_robdd b2) \\<and>\n       (\\<not> (robdd_is_leaf b1 \\<and> robdd_is_leaf b2) \\<longrightarrow>\n        size_robdd b1_r + size_robdd b2_r < size_robdd b1 + size_robdd b2)", "note b1_eq = this"], ["proof (state)\nthis:\n  b1 = robdd_var i l v r\n\ngoal (1 subgoal):\n 1. \\<And>x21 x22 x23 x24.\n       b1 = robdd_var x21 x22 x23 x24 \\<Longrightarrow>\n       robdd_\\<alpha> b1_l =\n       (\\<lambda>a. robdd_\\<alpha> b1 (a(v'' := True))) \\<and>\n       robdd_\\<alpha> b1_r =\n       (\\<lambda>a. robdd_\\<alpha> b1 (a(v'' := False))) \\<and>\n       robdd_\\<alpha> b2_l =\n       (\\<lambda>a. robdd_\\<alpha> b2 (a(v'' := True))) \\<and>\n       robdd_\\<alpha> b2_r =\n       (\\<lambda>a. robdd_\\<alpha> b2 (a(v'' := False))) \\<and>\n       robdd_invar_ext bs1 (Suc v'') b1_l \\<and>\n       robdd_invar_ext bs1 (Suc v'') b1_r \\<and>\n       robdd_invar_ext bs2 (Suc v'') b2_l \\<and>\n       robdd_invar_ext bs2 (Suc v'') b2_r \\<and>\n       b1_l \\<in> subrobdds b1 \\<and>\n       b2_l \\<in> subrobdds b2 \\<and>\n       b1_r \\<in> subrobdds b1 \\<and>\n       b2_r \\<in> subrobdds b2 \\<and>\n       robdd_get_min_var b1 b2 = v'' \\<and>\n       (\\<not> (robdd_is_leaf b1 \\<and> robdd_is_leaf b2) \\<longrightarrow>\n        size_robdd b1_l + size_robdd b2_l\n        < size_robdd b1 + size_robdd b2) \\<and>\n       (\\<not> (robdd_is_leaf b1 \\<and> robdd_is_leaf b2) \\<longrightarrow>\n        size_robdd b1_r + size_robdd b2_r < size_robdd b1 + size_robdd b2)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. robdd_\\<alpha> b1_l =\n    (\\<lambda>a. robdd_\\<alpha> b1 (a(v'' := True))) \\<and>\n    robdd_\\<alpha> b1_r =\n    (\\<lambda>a. robdd_\\<alpha> b1 (a(v'' := False))) \\<and>\n    robdd_\\<alpha> b2_l =\n    (\\<lambda>a. robdd_\\<alpha> b2 (a(v'' := True))) \\<and>\n    robdd_\\<alpha> b2_r =\n    (\\<lambda>a. robdd_\\<alpha> b2 (a(v'' := False))) \\<and>\n    robdd_invar_ext bs1 (Suc v'') b1_l \\<and>\n    robdd_invar_ext bs1 (Suc v'') b1_r \\<and>\n    robdd_invar_ext bs2 (Suc v'') b2_l \\<and>\n    robdd_invar_ext bs2 (Suc v'') b2_r \\<and>\n    b1_l \\<in> subrobdds b1 \\<and>\n    b2_l \\<in> subrobdds b2 \\<and>\n    b1_r \\<in> subrobdds b1 \\<and>\n    b2_r \\<in> subrobdds b2 \\<and>\n    robdd_get_min_var b1 b2 = v'' \\<and>\n    (\\<not> (robdd_is_leaf b1 \\<and> robdd_is_leaf b2) \\<longrightarrow>\n     size_robdd b1_l + size_robdd b2_l\n     < size_robdd b1 + size_robdd b2) \\<and>\n    (\\<not> (robdd_is_leaf b1 \\<and> robdd_is_leaf b2) \\<longrightarrow>\n     size_robdd b1_r + size_robdd b2_r < size_robdd b1 + size_robdd b2)", "proof (cases b2)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x1.\n       b2 = robdd_leaf x1 \\<Longrightarrow>\n       robdd_\\<alpha> b1_l =\n       (\\<lambda>a. robdd_\\<alpha> b1 (a(v'' := True))) \\<and>\n       robdd_\\<alpha> b1_r =\n       (\\<lambda>a. robdd_\\<alpha> b1 (a(v'' := False))) \\<and>\n       robdd_\\<alpha> b2_l =\n       (\\<lambda>a. robdd_\\<alpha> b2 (a(v'' := True))) \\<and>\n       robdd_\\<alpha> b2_r =\n       (\\<lambda>a. robdd_\\<alpha> b2 (a(v'' := False))) \\<and>\n       robdd_invar_ext bs1 (Suc v'') b1_l \\<and>\n       robdd_invar_ext bs1 (Suc v'') b1_r \\<and>\n       robdd_invar_ext bs2 (Suc v'') b2_l \\<and>\n       robdd_invar_ext bs2 (Suc v'') b2_r \\<and>\n       b1_l \\<in> subrobdds b1 \\<and>\n       b2_l \\<in> subrobdds b2 \\<and>\n       b1_r \\<in> subrobdds b1 \\<and>\n       b2_r \\<in> subrobdds b2 \\<and>\n       robdd_get_min_var b1 b2 = v'' \\<and>\n       (\\<not> (robdd_is_leaf b1 \\<and> robdd_is_leaf b2) \\<longrightarrow>\n        size_robdd b1_l + size_robdd b2_l\n        < size_robdd b1 + size_robdd b2) \\<and>\n       (\\<not> (robdd_is_leaf b1 \\<and> robdd_is_leaf b2) \\<longrightarrow>\n        size_robdd b1_r + size_robdd b2_r < size_robdd b1 + size_robdd b2)\n 2. \\<And>x21 x22 x23 x24.\n       b2 = robdd_var x21 x22 x23 x24 \\<Longrightarrow>\n       robdd_\\<alpha> b1_l =\n       (\\<lambda>a. robdd_\\<alpha> b1 (a(v'' := True))) \\<and>\n       robdd_\\<alpha> b1_r =\n       (\\<lambda>a. robdd_\\<alpha> b1 (a(v'' := False))) \\<and>\n       robdd_\\<alpha> b2_l =\n       (\\<lambda>a. robdd_\\<alpha> b2 (a(v'' := True))) \\<and>\n       robdd_\\<alpha> b2_r =\n       (\\<lambda>a. robdd_\\<alpha> b2 (a(v'' := False))) \\<and>\n       robdd_invar_ext bs1 (Suc v'') b1_l \\<and>\n       robdd_invar_ext bs1 (Suc v'') b1_r \\<and>\n       robdd_invar_ext bs2 (Suc v'') b2_l \\<and>\n       robdd_invar_ext bs2 (Suc v'') b2_r \\<and>\n       b1_l \\<in> subrobdds b1 \\<and>\n       b2_l \\<in> subrobdds b2 \\<and>\n       b1_r \\<in> subrobdds b1 \\<and>\n       b2_r \\<in> subrobdds b2 \\<and>\n       robdd_get_min_var b1 b2 = v'' \\<and>\n       (\\<not> (robdd_is_leaf b1 \\<and> robdd_is_leaf b2) \\<longrightarrow>\n        size_robdd b1_l + size_robdd b2_l\n        < size_robdd b1 + size_robdd b2) \\<and>\n       (\\<not> (robdd_is_leaf b1 \\<and> robdd_is_leaf b2) \\<longrightarrow>\n        size_robdd b1_r + size_robdd b2_r < size_robdd b1 + size_robdd b2)", "case (robdd_leaf f')"], ["proof (state)\nthis:\n  b2 = robdd_leaf f'\n\ngoal (2 subgoals):\n 1. \\<And>x1.\n       b2 = robdd_leaf x1 \\<Longrightarrow>\n       robdd_\\<alpha> b1_l =\n       (\\<lambda>a. robdd_\\<alpha> b1 (a(v'' := True))) \\<and>\n       robdd_\\<alpha> b1_r =\n       (\\<lambda>a. robdd_\\<alpha> b1 (a(v'' := False))) \\<and>\n       robdd_\\<alpha> b2_l =\n       (\\<lambda>a. robdd_\\<alpha> b2 (a(v'' := True))) \\<and>\n       robdd_\\<alpha> b2_r =\n       (\\<lambda>a. robdd_\\<alpha> b2 (a(v'' := False))) \\<and>\n       robdd_invar_ext bs1 (Suc v'') b1_l \\<and>\n       robdd_invar_ext bs1 (Suc v'') b1_r \\<and>\n       robdd_invar_ext bs2 (Suc v'') b2_l \\<and>\n       robdd_invar_ext bs2 (Suc v'') b2_r \\<and>\n       b1_l \\<in> subrobdds b1 \\<and>\n       b2_l \\<in> subrobdds b2 \\<and>\n       b1_r \\<in> subrobdds b1 \\<and>\n       b2_r \\<in> subrobdds b2 \\<and>\n       robdd_get_min_var b1 b2 = v'' \\<and>\n       (\\<not> (robdd_is_leaf b1 \\<and> robdd_is_leaf b2) \\<longrightarrow>\n        size_robdd b1_l + size_robdd b2_l\n        < size_robdd b1 + size_robdd b2) \\<and>\n       (\\<not> (robdd_is_leaf b1 \\<and> robdd_is_leaf b2) \\<longrightarrow>\n        size_robdd b1_r + size_robdd b2_r < size_robdd b1 + size_robdd b2)\n 2. \\<And>x21 x22 x23 x24.\n       b2 = robdd_var x21 x22 x23 x24 \\<Longrightarrow>\n       robdd_\\<alpha> b1_l =\n       (\\<lambda>a. robdd_\\<alpha> b1 (a(v'' := True))) \\<and>\n       robdd_\\<alpha> b1_r =\n       (\\<lambda>a. robdd_\\<alpha> b1 (a(v'' := False))) \\<and>\n       robdd_\\<alpha> b2_l =\n       (\\<lambda>a. robdd_\\<alpha> b2 (a(v'' := True))) \\<and>\n       robdd_\\<alpha> b2_r =\n       (\\<lambda>a. robdd_\\<alpha> b2 (a(v'' := False))) \\<and>\n       robdd_invar_ext bs1 (Suc v'') b1_l \\<and>\n       robdd_invar_ext bs1 (Suc v'') b1_r \\<and>\n       robdd_invar_ext bs2 (Suc v'') b2_l \\<and>\n       robdd_invar_ext bs2 (Suc v'') b2_r \\<and>\n       b1_l \\<in> subrobdds b1 \\<and>\n       b2_l \\<in> subrobdds b2 \\<and>\n       b1_r \\<in> subrobdds b1 \\<and>\n       b2_r \\<in> subrobdds b2 \\<and>\n       robdd_get_min_var b1 b2 = v'' \\<and>\n       (\\<not> (robdd_is_leaf b1 \\<and> robdd_is_leaf b2) \\<longrightarrow>\n        size_robdd b1_l + size_robdd b2_l\n        < size_robdd b1 + size_robdd b2) \\<and>\n       (\\<not> (robdd_is_leaf b1 \\<and> robdd_is_leaf b2) \\<longrightarrow>\n        size_robdd b1_r + size_robdd b2_r < size_robdd b1 + size_robdd b2)", "note b2_eq = this"], ["proof (state)\nthis:\n  b2 = robdd_leaf f'\n\ngoal (2 subgoals):\n 1. \\<And>x1.\n       b2 = robdd_leaf x1 \\<Longrightarrow>\n       robdd_\\<alpha> b1_l =\n       (\\<lambda>a. robdd_\\<alpha> b1 (a(v'' := True))) \\<and>\n       robdd_\\<alpha> b1_r =\n       (\\<lambda>a. robdd_\\<alpha> b1 (a(v'' := False))) \\<and>\n       robdd_\\<alpha> b2_l =\n       (\\<lambda>a. robdd_\\<alpha> b2 (a(v'' := True))) \\<and>\n       robdd_\\<alpha> b2_r =\n       (\\<lambda>a. robdd_\\<alpha> b2 (a(v'' := False))) \\<and>\n       robdd_invar_ext bs1 (Suc v'') b1_l \\<and>\n       robdd_invar_ext bs1 (Suc v'') b1_r \\<and>\n       robdd_invar_ext bs2 (Suc v'') b2_l \\<and>\n       robdd_invar_ext bs2 (Suc v'') b2_r \\<and>\n       b1_l \\<in> subrobdds b1 \\<and>\n       b2_l \\<in> subrobdds b2 \\<and>\n       b1_r \\<in> subrobdds b1 \\<and>\n       b2_r \\<in> subrobdds b2 \\<and>\n       robdd_get_min_var b1 b2 = v'' \\<and>\n       (\\<not> (robdd_is_leaf b1 \\<and> robdd_is_leaf b2) \\<longrightarrow>\n        size_robdd b1_l + size_robdd b2_l\n        < size_robdd b1 + size_robdd b2) \\<and>\n       (\\<not> (robdd_is_leaf b1 \\<and> robdd_is_leaf b2) \\<longrightarrow>\n        size_robdd b1_r + size_robdd b2_r < size_robdd b1 + size_robdd b2)\n 2. \\<And>x21 x22 x23 x24.\n       b2 = robdd_var x21 x22 x23 x24 \\<Longrightarrow>\n       robdd_\\<alpha> b1_l =\n       (\\<lambda>a. robdd_\\<alpha> b1 (a(v'' := True))) \\<and>\n       robdd_\\<alpha> b1_r =\n       (\\<lambda>a. robdd_\\<alpha> b1 (a(v'' := False))) \\<and>\n       robdd_\\<alpha> b2_l =\n       (\\<lambda>a. robdd_\\<alpha> b2 (a(v'' := True))) \\<and>\n       robdd_\\<alpha> b2_r =\n       (\\<lambda>a. robdd_\\<alpha> b2 (a(v'' := False))) \\<and>\n       robdd_invar_ext bs1 (Suc v'') b1_l \\<and>\n       robdd_invar_ext bs1 (Suc v'') b1_r \\<and>\n       robdd_invar_ext bs2 (Suc v'') b2_l \\<and>\n       robdd_invar_ext bs2 (Suc v'') b2_r \\<and>\n       b1_l \\<in> subrobdds b1 \\<and>\n       b2_l \\<in> subrobdds b2 \\<and>\n       b1_r \\<in> subrobdds b1 \\<and>\n       b2_r \\<in> subrobdds b2 \\<and>\n       robdd_get_min_var b1 b2 = v'' \\<and>\n       (\\<not> (robdd_is_leaf b1 \\<and> robdd_is_leaf b2) \\<longrightarrow>\n        size_robdd b1_l + size_robdd b2_l\n        < size_robdd b1 + size_robdd b2) \\<and>\n       (\\<not> (robdd_is_leaf b1 \\<and> robdd_is_leaf b2) \\<longrightarrow>\n        size_robdd b1_r + size_robdd b2_r < size_robdd b1 + size_robdd b2)", "with b1_eq eval[symmetric] invar_b1 invar_b2"], ["proof (chain)\npicking this:\n  b1 = robdd_var i l v r\n  (b1_l, b1_r, v'', b2_l, b2_r) = robdd_apply_next b1 b2\n  robdd_invar_ext bs1 n1 b1\n  robdd_invar_ext bs2 n2 b2\n  b2 = robdd_leaf f'", "show ?thesis"], ["proof (prove)\nusing this:\n  b1 = robdd_var i l v r\n  (b1_l, b1_r, v'', b2_l, b2_r) = robdd_apply_next b1 b2\n  robdd_invar_ext bs1 n1 b1\n  robdd_invar_ext bs2 n2 b2\n  b2 = robdd_leaf f'\n\ngoal (1 subgoal):\n 1. robdd_\\<alpha> b1_l =\n    (\\<lambda>a. robdd_\\<alpha> b1 (a(v'' := True))) \\<and>\n    robdd_\\<alpha> b1_r =\n    (\\<lambda>a. robdd_\\<alpha> b1 (a(v'' := False))) \\<and>\n    robdd_\\<alpha> b2_l =\n    (\\<lambda>a. robdd_\\<alpha> b2 (a(v'' := True))) \\<and>\n    robdd_\\<alpha> b2_r =\n    (\\<lambda>a. robdd_\\<alpha> b2 (a(v'' := False))) \\<and>\n    robdd_invar_ext bs1 (Suc v'') b1_l \\<and>\n    robdd_invar_ext bs1 (Suc v'') b1_r \\<and>\n    robdd_invar_ext bs2 (Suc v'') b2_l \\<and>\n    robdd_invar_ext bs2 (Suc v'') b2_r \\<and>\n    b1_l \\<in> subrobdds b1 \\<and>\n    b2_l \\<in> subrobdds b2 \\<and>\n    b1_r \\<in> subrobdds b1 \\<and>\n    b2_r \\<in> subrobdds b2 \\<and>\n    robdd_get_min_var b1 b2 = v'' \\<and>\n    (\\<not> (robdd_is_leaf b1 \\<and> robdd_is_leaf b2) \\<longrightarrow>\n     size_robdd b1_l + size_robdd b2_l\n     < size_robdd b1 + size_robdd b2) \\<and>\n    (\\<not> (robdd_is_leaf b1 \\<and> robdd_is_leaf b2) \\<longrightarrow>\n     size_robdd b1_r + size_robdd b2_r < size_robdd b1 + size_robdd b2)", "apply (simp add: fun_eq_iff)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>b1 = robdd_var i l v r;\n     b1_l = l \\<and>\n     b1_r = r \\<and>\n     v'' = v \\<and> b2_l = robdd_leaf f' \\<and> b2_r = robdd_leaf f';\n     robdd_var i l v r \\<in> subrobdds_set bs1 \\<and>\n     \\<not> robdd_equiv l r \\<and>\n     n1 \\<le> v \\<and>\n     robdd_invar_ext bs1 (Suc v) l \\<and> robdd_invar_ext bs1 (Suc v) r;\n     robdd_invar_ids bs2 \\<and> robdd_leaf f' \\<in> subrobdds_set bs2;\n     b2 = robdd_leaf f'\\<rbrakk>\n    \\<Longrightarrow> (\\<forall>x.\n                          robdd_\\<alpha> l x =\n                          robdd_\\<alpha> l (x(v := True))) \\<and>\n                      (\\<forall>x.\n                          robdd_\\<alpha> r x =\n                          robdd_\\<alpha> r (x(v := False)))", "apply (intro allI conjI robdd_\\<alpha>_invar_greater [of \"Suc v\"])"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>b1 = robdd_var i l v r;\n        b1_l = l \\<and>\n        b1_r = r \\<and>\n        v'' = v \\<and> b2_l = robdd_leaf f' \\<and> b2_r = robdd_leaf f';\n        robdd_var i l v r \\<in> subrobdds_set bs1 \\<and>\n        \\<not> robdd_equiv l r \\<and>\n        n1 \\<le> v \\<and>\n        robdd_invar_ext bs1 (Suc v) l \\<and> robdd_invar_ext bs1 (Suc v) r;\n        robdd_invar_ids bs2 \\<and> robdd_leaf f' \\<in> subrobdds_set bs2;\n        b2 = robdd_leaf f'\\<rbrakk>\n       \\<Longrightarrow> robdd_invar_vars_greater (Suc v) l\n 2. \\<And>x va.\n       \\<lbrakk>b1 = robdd_var i l v r;\n        b1_l = l \\<and>\n        b1_r = r \\<and>\n        v'' = v \\<and> b2_l = robdd_leaf f' \\<and> b2_r = robdd_leaf f';\n        robdd_var i l v r \\<in> subrobdds_set bs1 \\<and>\n        \\<not> robdd_equiv l r \\<and>\n        n1 \\<le> v \\<and>\n        robdd_invar_ext bs1 (Suc v) l \\<and> robdd_invar_ext bs1 (Suc v) r;\n        robdd_invar_ids bs2 \\<and> robdd_leaf f' \\<in> subrobdds_set bs2;\n        b2 = robdd_leaf f'; Suc v \\<le> va\\<rbrakk>\n       \\<Longrightarrow> x va = (x(v := True)) va\n 3. \\<And>x.\n       \\<lbrakk>b1 = robdd_var i l v r;\n        b1_l = l \\<and>\n        b1_r = r \\<and>\n        v'' = v \\<and> b2_l = robdd_leaf f' \\<and> b2_r = robdd_leaf f';\n        robdd_var i l v r \\<in> subrobdds_set bs1 \\<and>\n        \\<not> robdd_equiv l r \\<and>\n        n1 \\<le> v \\<and>\n        robdd_invar_ext bs1 (Suc v) l \\<and> robdd_invar_ext bs1 (Suc v) r;\n        robdd_invar_ids bs2 \\<and> robdd_leaf f' \\<in> subrobdds_set bs2;\n        b2 = robdd_leaf f'\\<rbrakk>\n       \\<Longrightarrow> robdd_invar_vars_greater (Suc v) r\n 4. \\<And>x va.\n       \\<lbrakk>b1 = robdd_var i l v r;\n        b1_l = l \\<and>\n        b1_r = r \\<and>\n        v'' = v \\<and> b2_l = robdd_leaf f' \\<and> b2_r = robdd_leaf f';\n        robdd_var i l v r \\<in> subrobdds_set bs1 \\<and>\n        \\<not> robdd_equiv l r \\<and>\n        n1 \\<le> v \\<and>\n        robdd_invar_ext bs1 (Suc v) l \\<and> robdd_invar_ext bs1 (Suc v) r;\n        robdd_invar_ids bs2 \\<and> robdd_leaf f' \\<in> subrobdds_set bs2;\n        b2 = robdd_leaf f'; Suc v \\<le> va\\<rbrakk>\n       \\<Longrightarrow> x va = (x(v := False)) va", "apply (simp_all add: robdd_invar_ext_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  robdd_\\<alpha> b1_l =\n  (\\<lambda>a. robdd_\\<alpha> b1 (a(v'' := True))) \\<and>\n  robdd_\\<alpha> b1_r =\n  (\\<lambda>a. robdd_\\<alpha> b1 (a(v'' := False))) \\<and>\n  robdd_\\<alpha> b2_l =\n  (\\<lambda>a. robdd_\\<alpha> b2 (a(v'' := True))) \\<and>\n  robdd_\\<alpha> b2_r =\n  (\\<lambda>a. robdd_\\<alpha> b2 (a(v'' := False))) \\<and>\n  robdd_invar_ext bs1 (Suc v'') b1_l \\<and>\n  robdd_invar_ext bs1 (Suc v'') b1_r \\<and>\n  robdd_invar_ext bs2 (Suc v'') b2_l \\<and>\n  robdd_invar_ext bs2 (Suc v'') b2_r \\<and>\n  b1_l \\<in> subrobdds b1 \\<and>\n  b2_l \\<in> subrobdds b2 \\<and>\n  b1_r \\<in> subrobdds b1 \\<and>\n  b2_r \\<in> subrobdds b2 \\<and>\n  robdd_get_min_var b1 b2 = v'' \\<and>\n  (\\<not> (robdd_is_leaf b1 \\<and> robdd_is_leaf b2) \\<longrightarrow>\n   size_robdd b1_l + size_robdd b2_l < size_robdd b1 + size_robdd b2) \\<and>\n  (\\<not> (robdd_is_leaf b1 \\<and> robdd_is_leaf b2) \\<longrightarrow>\n   size_robdd b1_r + size_robdd b2_r < size_robdd b1 + size_robdd b2)\n\ngoal (1 subgoal):\n 1. \\<And>x21 x22 x23 x24.\n       b2 = robdd_var x21 x22 x23 x24 \\<Longrightarrow>\n       robdd_\\<alpha> b1_l =\n       (\\<lambda>a. robdd_\\<alpha> b1 (a(v'' := True))) \\<and>\n       robdd_\\<alpha> b1_r =\n       (\\<lambda>a. robdd_\\<alpha> b1 (a(v'' := False))) \\<and>\n       robdd_\\<alpha> b2_l =\n       (\\<lambda>a. robdd_\\<alpha> b2 (a(v'' := True))) \\<and>\n       robdd_\\<alpha> b2_r =\n       (\\<lambda>a. robdd_\\<alpha> b2 (a(v'' := False))) \\<and>\n       robdd_invar_ext bs1 (Suc v'') b1_l \\<and>\n       robdd_invar_ext bs1 (Suc v'') b1_r \\<and>\n       robdd_invar_ext bs2 (Suc v'') b2_l \\<and>\n       robdd_invar_ext bs2 (Suc v'') b2_r \\<and>\n       b1_l \\<in> subrobdds b1 \\<and>\n       b2_l \\<in> subrobdds b2 \\<and>\n       b1_r \\<in> subrobdds b1 \\<and>\n       b2_r \\<in> subrobdds b2 \\<and>\n       robdd_get_min_var b1 b2 = v'' \\<and>\n       (\\<not> (robdd_is_leaf b1 \\<and> robdd_is_leaf b2) \\<longrightarrow>\n        size_robdd b1_l + size_robdd b2_l\n        < size_robdd b1 + size_robdd b2) \\<and>\n       (\\<not> (robdd_is_leaf b1 \\<and> robdd_is_leaf b2) \\<longrightarrow>\n        size_robdd b1_r + size_robdd b2_r < size_robdd b1 + size_robdd b2)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x21 x22 x23 x24.\n       b2 = robdd_var x21 x22 x23 x24 \\<Longrightarrow>\n       robdd_\\<alpha> b1_l =\n       (\\<lambda>a. robdd_\\<alpha> b1 (a(v'' := True))) \\<and>\n       robdd_\\<alpha> b1_r =\n       (\\<lambda>a. robdd_\\<alpha> b1 (a(v'' := False))) \\<and>\n       robdd_\\<alpha> b2_l =\n       (\\<lambda>a. robdd_\\<alpha> b2 (a(v'' := True))) \\<and>\n       robdd_\\<alpha> b2_r =\n       (\\<lambda>a. robdd_\\<alpha> b2 (a(v'' := False))) \\<and>\n       robdd_invar_ext bs1 (Suc v'') b1_l \\<and>\n       robdd_invar_ext bs1 (Suc v'') b1_r \\<and>\n       robdd_invar_ext bs2 (Suc v'') b2_l \\<and>\n       robdd_invar_ext bs2 (Suc v'') b2_r \\<and>\n       b1_l \\<in> subrobdds b1 \\<and>\n       b2_l \\<in> subrobdds b2 \\<and>\n       b1_r \\<in> subrobdds b1 \\<and>\n       b2_r \\<in> subrobdds b2 \\<and>\n       robdd_get_min_var b1 b2 = v'' \\<and>\n       (\\<not> (robdd_is_leaf b1 \\<and> robdd_is_leaf b2) \\<longrightarrow>\n        size_robdd b1_l + size_robdd b2_l\n        < size_robdd b1 + size_robdd b2) \\<and>\n       (\\<not> (robdd_is_leaf b1 \\<and> robdd_is_leaf b2) \\<longrightarrow>\n        size_robdd b1_r + size_robdd b2_r < size_robdd b1 + size_robdd b2)", "case (robdd_var i' l' v' r')"], ["proof (state)\nthis:\n  b2 = robdd_var i' l' v' r'\n\ngoal (1 subgoal):\n 1. \\<And>x21 x22 x23 x24.\n       b2 = robdd_var x21 x22 x23 x24 \\<Longrightarrow>\n       robdd_\\<alpha> b1_l =\n       (\\<lambda>a. robdd_\\<alpha> b1 (a(v'' := True))) \\<and>\n       robdd_\\<alpha> b1_r =\n       (\\<lambda>a. robdd_\\<alpha> b1 (a(v'' := False))) \\<and>\n       robdd_\\<alpha> b2_l =\n       (\\<lambda>a. robdd_\\<alpha> b2 (a(v'' := True))) \\<and>\n       robdd_\\<alpha> b2_r =\n       (\\<lambda>a. robdd_\\<alpha> b2 (a(v'' := False))) \\<and>\n       robdd_invar_ext bs1 (Suc v'') b1_l \\<and>\n       robdd_invar_ext bs1 (Suc v'') b1_r \\<and>\n       robdd_invar_ext bs2 (Suc v'') b2_l \\<and>\n       robdd_invar_ext bs2 (Suc v'') b2_r \\<and>\n       b1_l \\<in> subrobdds b1 \\<and>\n       b2_l \\<in> subrobdds b2 \\<and>\n       b1_r \\<in> subrobdds b1 \\<and>\n       b2_r \\<in> subrobdds b2 \\<and>\n       robdd_get_min_var b1 b2 = v'' \\<and>\n       (\\<not> (robdd_is_leaf b1 \\<and> robdd_is_leaf b2) \\<longrightarrow>\n        size_robdd b1_l + size_robdd b2_l\n        < size_robdd b1 + size_robdd b2) \\<and>\n       (\\<not> (robdd_is_leaf b1 \\<and> robdd_is_leaf b2) \\<longrightarrow>\n        size_robdd b1_r + size_robdd b2_r < size_robdd b1 + size_robdd b2)", "note b2_eq = this"], ["proof (state)\nthis:\n  b2 = robdd_var i' l' v' r'\n\ngoal (1 subgoal):\n 1. \\<And>x21 x22 x23 x24.\n       b2 = robdd_var x21 x22 x23 x24 \\<Longrightarrow>\n       robdd_\\<alpha> b1_l =\n       (\\<lambda>a. robdd_\\<alpha> b1 (a(v'' := True))) \\<and>\n       robdd_\\<alpha> b1_r =\n       (\\<lambda>a. robdd_\\<alpha> b1 (a(v'' := False))) \\<and>\n       robdd_\\<alpha> b2_l =\n       (\\<lambda>a. robdd_\\<alpha> b2 (a(v'' := True))) \\<and>\n       robdd_\\<alpha> b2_r =\n       (\\<lambda>a. robdd_\\<alpha> b2 (a(v'' := False))) \\<and>\n       robdd_invar_ext bs1 (Suc v'') b1_l \\<and>\n       robdd_invar_ext bs1 (Suc v'') b1_r \\<and>\n       robdd_invar_ext bs2 (Suc v'') b2_l \\<and>\n       robdd_invar_ext bs2 (Suc v'') b2_r \\<and>\n       b1_l \\<in> subrobdds b1 \\<and>\n       b2_l \\<in> subrobdds b2 \\<and>\n       b1_r \\<in> subrobdds b1 \\<and>\n       b2_r \\<in> subrobdds b2 \\<and>\n       robdd_get_min_var b1 b2 = v'' \\<and>\n       (\\<not> (robdd_is_leaf b1 \\<and> robdd_is_leaf b2) \\<longrightarrow>\n        size_robdd b1_l + size_robdd b2_l\n        < size_robdd b1 + size_robdd b2) \\<and>\n       (\\<not> (robdd_is_leaf b1 \\<and> robdd_is_leaf b2) \\<longrightarrow>\n        size_robdd b1_r + size_robdd b2_r < size_robdd b1 + size_robdd b2)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. robdd_\\<alpha> b1_l =\n    (\\<lambda>a. robdd_\\<alpha> b1 (a(v'' := True))) \\<and>\n    robdd_\\<alpha> b1_r =\n    (\\<lambda>a. robdd_\\<alpha> b1 (a(v'' := False))) \\<and>\n    robdd_\\<alpha> b2_l =\n    (\\<lambda>a. robdd_\\<alpha> b2 (a(v'' := True))) \\<and>\n    robdd_\\<alpha> b2_r =\n    (\\<lambda>a. robdd_\\<alpha> b2 (a(v'' := False))) \\<and>\n    robdd_invar_ext bs1 (Suc v'') b1_l \\<and>\n    robdd_invar_ext bs1 (Suc v'') b1_r \\<and>\n    robdd_invar_ext bs2 (Suc v'') b2_l \\<and>\n    robdd_invar_ext bs2 (Suc v'') b2_r \\<and>\n    b1_l \\<in> subrobdds b1 \\<and>\n    b2_l \\<in> subrobdds b2 \\<and>\n    b1_r \\<in> subrobdds b1 \\<and>\n    b2_r \\<in> subrobdds b2 \\<and>\n    robdd_get_min_var b1 b2 = v'' \\<and>\n    (\\<not> (robdd_is_leaf b1 \\<and> robdd_is_leaf b2) \\<longrightarrow>\n     size_robdd b1_l + size_robdd b2_l\n     < size_robdd b1 + size_robdd b2) \\<and>\n    (\\<not> (robdd_is_leaf b1 \\<and> robdd_is_leaf b2) \\<longrightarrow>\n     size_robdd b1_r + size_robdd b2_r < size_robdd b1 + size_robdd b2)", "proof (cases \"v < v'\")"], ["proof (state)\ngoal (2 subgoals):\n 1. v < v' \\<Longrightarrow>\n    robdd_\\<alpha> b1_l =\n    (\\<lambda>a. robdd_\\<alpha> b1 (a(v'' := True))) \\<and>\n    robdd_\\<alpha> b1_r =\n    (\\<lambda>a. robdd_\\<alpha> b1 (a(v'' := False))) \\<and>\n    robdd_\\<alpha> b2_l =\n    (\\<lambda>a. robdd_\\<alpha> b2 (a(v'' := True))) \\<and>\n    robdd_\\<alpha> b2_r =\n    (\\<lambda>a. robdd_\\<alpha> b2 (a(v'' := False))) \\<and>\n    robdd_invar_ext bs1 (Suc v'') b1_l \\<and>\n    robdd_invar_ext bs1 (Suc v'') b1_r \\<and>\n    robdd_invar_ext bs2 (Suc v'') b2_l \\<and>\n    robdd_invar_ext bs2 (Suc v'') b2_r \\<and>\n    b1_l \\<in> subrobdds b1 \\<and>\n    b2_l \\<in> subrobdds b2 \\<and>\n    b1_r \\<in> subrobdds b1 \\<and>\n    b2_r \\<in> subrobdds b2 \\<and>\n    robdd_get_min_var b1 b2 = v'' \\<and>\n    (\\<not> (robdd_is_leaf b1 \\<and> robdd_is_leaf b2) \\<longrightarrow>\n     size_robdd b1_l + size_robdd b2_l\n     < size_robdd b1 + size_robdd b2) \\<and>\n    (\\<not> (robdd_is_leaf b1 \\<and> robdd_is_leaf b2) \\<longrightarrow>\n     size_robdd b1_r + size_robdd b2_r < size_robdd b1 + size_robdd b2)\n 2. \\<not> v < v' \\<Longrightarrow>\n    robdd_\\<alpha> b1_l =\n    (\\<lambda>a. robdd_\\<alpha> b1 (a(v'' := True))) \\<and>\n    robdd_\\<alpha> b1_r =\n    (\\<lambda>a. robdd_\\<alpha> b1 (a(v'' := False))) \\<and>\n    robdd_\\<alpha> b2_l =\n    (\\<lambda>a. robdd_\\<alpha> b2 (a(v'' := True))) \\<and>\n    robdd_\\<alpha> b2_r =\n    (\\<lambda>a. robdd_\\<alpha> b2 (a(v'' := False))) \\<and>\n    robdd_invar_ext bs1 (Suc v'') b1_l \\<and>\n    robdd_invar_ext bs1 (Suc v'') b1_r \\<and>\n    robdd_invar_ext bs2 (Suc v'') b2_l \\<and>\n    robdd_invar_ext bs2 (Suc v'') b2_r \\<and>\n    b1_l \\<in> subrobdds b1 \\<and>\n    b2_l \\<in> subrobdds b2 \\<and>\n    b1_r \\<in> subrobdds b1 \\<and>\n    b2_r \\<in> subrobdds b2 \\<and>\n    robdd_get_min_var b1 b2 = v'' \\<and>\n    (\\<not> (robdd_is_leaf b1 \\<and> robdd_is_leaf b2) \\<longrightarrow>\n     size_robdd b1_l + size_robdd b2_l\n     < size_robdd b1 + size_robdd b2) \\<and>\n    (\\<not> (robdd_is_leaf b1 \\<and> robdd_is_leaf b2) \\<longrightarrow>\n     size_robdd b1_r + size_robdd b2_r < size_robdd b1 + size_robdd b2)", "case True"], ["proof (state)\nthis:\n  v < v'\n\ngoal (2 subgoals):\n 1. v < v' \\<Longrightarrow>\n    robdd_\\<alpha> b1_l =\n    (\\<lambda>a. robdd_\\<alpha> b1 (a(v'' := True))) \\<and>\n    robdd_\\<alpha> b1_r =\n    (\\<lambda>a. robdd_\\<alpha> b1 (a(v'' := False))) \\<and>\n    robdd_\\<alpha> b2_l =\n    (\\<lambda>a. robdd_\\<alpha> b2 (a(v'' := True))) \\<and>\n    robdd_\\<alpha> b2_r =\n    (\\<lambda>a. robdd_\\<alpha> b2 (a(v'' := False))) \\<and>\n    robdd_invar_ext bs1 (Suc v'') b1_l \\<and>\n    robdd_invar_ext bs1 (Suc v'') b1_r \\<and>\n    robdd_invar_ext bs2 (Suc v'') b2_l \\<and>\n    robdd_invar_ext bs2 (Suc v'') b2_r \\<and>\n    b1_l \\<in> subrobdds b1 \\<and>\n    b2_l \\<in> subrobdds b2 \\<and>\n    b1_r \\<in> subrobdds b1 \\<and>\n    b2_r \\<in> subrobdds b2 \\<and>\n    robdd_get_min_var b1 b2 = v'' \\<and>\n    (\\<not> (robdd_is_leaf b1 \\<and> robdd_is_leaf b2) \\<longrightarrow>\n     size_robdd b1_l + size_robdd b2_l\n     < size_robdd b1 + size_robdd b2) \\<and>\n    (\\<not> (robdd_is_leaf b1 \\<and> robdd_is_leaf b2) \\<longrightarrow>\n     size_robdd b1_r + size_robdd b2_r < size_robdd b1 + size_robdd b2)\n 2. \\<not> v < v' \\<Longrightarrow>\n    robdd_\\<alpha> b1_l =\n    (\\<lambda>a. robdd_\\<alpha> b1 (a(v'' := True))) \\<and>\n    robdd_\\<alpha> b1_r =\n    (\\<lambda>a. robdd_\\<alpha> b1 (a(v'' := False))) \\<and>\n    robdd_\\<alpha> b2_l =\n    (\\<lambda>a. robdd_\\<alpha> b2 (a(v'' := True))) \\<and>\n    robdd_\\<alpha> b2_r =\n    (\\<lambda>a. robdd_\\<alpha> b2 (a(v'' := False))) \\<and>\n    robdd_invar_ext bs1 (Suc v'') b1_l \\<and>\n    robdd_invar_ext bs1 (Suc v'') b1_r \\<and>\n    robdd_invar_ext bs2 (Suc v'') b2_l \\<and>\n    robdd_invar_ext bs2 (Suc v'') b2_r \\<and>\n    b1_l \\<in> subrobdds b1 \\<and>\n    b2_l \\<in> subrobdds b2 \\<and>\n    b1_r \\<in> subrobdds b1 \\<and>\n    b2_r \\<in> subrobdds b2 \\<and>\n    robdd_get_min_var b1 b2 = v'' \\<and>\n    (\\<not> (robdd_is_leaf b1 \\<and> robdd_is_leaf b2) \\<longrightarrow>\n     size_robdd b1_l + size_robdd b2_l\n     < size_robdd b1 + size_robdd b2) \\<and>\n    (\\<not> (robdd_is_leaf b1 \\<and> robdd_is_leaf b2) \\<longrightarrow>\n     size_robdd b1_r + size_robdd b2_r < size_robdd b1 + size_robdd b2)", "with robdd_invar_vars_greater___weaken[of \"Suc v'\" _ \"Suc v\"] b1_eq b2_eq eval[symmetric] invar_b1 invar_b2"], ["proof (chain)\npicking this:\n  \\<lbrakk>robdd_invar_vars_greater (Suc v') ?b; Suc v \\<le> Suc v'\\<rbrakk>\n  \\<Longrightarrow> robdd_invar_vars_greater (Suc v) ?b\n  b1 = robdd_var i l v r\n  b2 = robdd_var i' l' v' r'\n  (b1_l, b1_r, v'', b2_l, b2_r) = robdd_apply_next b1 b2\n  robdd_invar_ext bs1 n1 b1\n  robdd_invar_ext bs2 n2 b2\n  v < v'", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<lbrakk>robdd_invar_vars_greater (Suc v') ?b; Suc v \\<le> Suc v'\\<rbrakk>\n  \\<Longrightarrow> robdd_invar_vars_greater (Suc v) ?b\n  b1 = robdd_var i l v r\n  b2 = robdd_var i' l' v' r'\n  (b1_l, b1_r, v'', b2_l, b2_r) = robdd_apply_next b1 b2\n  robdd_invar_ext bs1 n1 b1\n  robdd_invar_ext bs2 n2 b2\n  v < v'\n\ngoal (1 subgoal):\n 1. robdd_\\<alpha> b1_l =\n    (\\<lambda>a. robdd_\\<alpha> b1 (a(v'' := True))) \\<and>\n    robdd_\\<alpha> b1_r =\n    (\\<lambda>a. robdd_\\<alpha> b1 (a(v'' := False))) \\<and>\n    robdd_\\<alpha> b2_l =\n    (\\<lambda>a. robdd_\\<alpha> b2 (a(v'' := True))) \\<and>\n    robdd_\\<alpha> b2_r =\n    (\\<lambda>a. robdd_\\<alpha> b2 (a(v'' := False))) \\<and>\n    robdd_invar_ext bs1 (Suc v'') b1_l \\<and>\n    robdd_invar_ext bs1 (Suc v'') b1_r \\<and>\n    robdd_invar_ext bs2 (Suc v'') b2_l \\<and>\n    robdd_invar_ext bs2 (Suc v'') b2_r \\<and>\n    b1_l \\<in> subrobdds b1 \\<and>\n    b2_l \\<in> subrobdds b2 \\<and>\n    b1_r \\<in> subrobdds b1 \\<and>\n    b2_r \\<in> subrobdds b2 \\<and>\n    robdd_get_min_var b1 b2 = v'' \\<and>\n    (\\<not> (robdd_is_leaf b1 \\<and> robdd_is_leaf b2) \\<longrightarrow>\n     size_robdd b1_l + size_robdd b2_l\n     < size_robdd b1 + size_robdd b2) \\<and>\n    (\\<not> (robdd_is_leaf b1 \\<and> robdd_is_leaf b2) \\<longrightarrow>\n     size_robdd b1_r + size_robdd b2_r < size_robdd b1 + size_robdd b2)", "apply (simp add: fun_eq_iff)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>b.\n                robdd_invar_vars_greater (Suc v') b \\<Longrightarrow>\n                robdd_invar_vars_greater (Suc v) b;\n     b1 = robdd_var i l v r; b2 = robdd_var i' l' v' r';\n     b1_l = l \\<and>\n     b1_r = r \\<and>\n     v'' = v \\<and>\n     b2_l = robdd_var i' l' v' r' \\<and> b2_r = robdd_var i' l' v' r';\n     robdd_var i l v r \\<in> subrobdds_set bs1 \\<and>\n     \\<not> robdd_equiv l r \\<and>\n     n1 \\<le> v \\<and>\n     robdd_invar_ext bs1 (Suc v) l \\<and> robdd_invar_ext bs1 (Suc v) r;\n     robdd_var i' l' v' r' \\<in> subrobdds_set bs2 \\<and>\n     \\<not> robdd_equiv l' r' \\<and>\n     n2 \\<le> v' \\<and>\n     robdd_invar_ext bs2 (Suc v') l' \\<and> robdd_invar_ext bs2 (Suc v') r';\n     v < v'\\<rbrakk>\n    \\<Longrightarrow> (\\<forall>x.\n                          robdd_\\<alpha> l x =\n                          robdd_\\<alpha> l (x(v := True))) \\<and>\n                      (\\<forall>x.\n                          robdd_\\<alpha> r x =\n                          robdd_\\<alpha> r (x(v := False))) \\<and>\n                      (\\<forall>x.\n                          (x v' \\<longrightarrow>\n                           robdd_\\<alpha> l' x =\n                           robdd_\\<alpha> l' (x(v := True))) \\<and>\n                          (\\<not> x v' \\<longrightarrow>\n                           robdd_\\<alpha> r' x =\n                           robdd_\\<alpha> r' (x(v := True)))) \\<and>\n                      (\\<forall>x.\n                          (x v' \\<longrightarrow>\n                           robdd_\\<alpha> l' x =\n                           robdd_\\<alpha> l' (x(v := False))) \\<and>\n                          (\\<not> x v' \\<longrightarrow>\n                           robdd_\\<alpha> r' x =\n                           robdd_\\<alpha> r' (x(v := False))))", "apply (intro allI conjI impI robdd_\\<alpha>_invar_greater [of \"Suc v''\"])"], ["proof (prove)\ngoal (12 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>\\<And>b.\n                   robdd_invar_vars_greater (Suc v') b \\<Longrightarrow>\n                   robdd_invar_vars_greater (Suc v) b;\n        b1 = robdd_var i l v r; b2 = robdd_var i' l' v' r';\n        b1_l = l \\<and>\n        b1_r = r \\<and>\n        v'' = v \\<and>\n        b2_l = robdd_var i' l' v' r' \\<and> b2_r = robdd_var i' l' v' r';\n        robdd_var i l v r \\<in> subrobdds_set bs1 \\<and>\n        \\<not> robdd_equiv l r \\<and>\n        n1 \\<le> v \\<and>\n        robdd_invar_ext bs1 (Suc v) l \\<and> robdd_invar_ext bs1 (Suc v) r;\n        robdd_var i' l' v' r' \\<in> subrobdds_set bs2 \\<and>\n        \\<not> robdd_equiv l' r' \\<and>\n        n2 \\<le> v' \\<and>\n        robdd_invar_ext bs2 (Suc v') l' \\<and>\n        robdd_invar_ext bs2 (Suc v') r';\n        v < v'\\<rbrakk>\n       \\<Longrightarrow> robdd_invar_vars_greater (Suc v'') l\n 2. \\<And>x va.\n       \\<lbrakk>\\<And>b.\n                   robdd_invar_vars_greater (Suc v') b \\<Longrightarrow>\n                   robdd_invar_vars_greater (Suc v) b;\n        b1 = robdd_var i l v r; b2 = robdd_var i' l' v' r';\n        b1_l = l \\<and>\n        b1_r = r \\<and>\n        v'' = v \\<and>\n        b2_l = robdd_var i' l' v' r' \\<and> b2_r = robdd_var i' l' v' r';\n        robdd_var i l v r \\<in> subrobdds_set bs1 \\<and>\n        \\<not> robdd_equiv l r \\<and>\n        n1 \\<le> v \\<and>\n        robdd_invar_ext bs1 (Suc v) l \\<and> robdd_invar_ext bs1 (Suc v) r;\n        robdd_var i' l' v' r' \\<in> subrobdds_set bs2 \\<and>\n        \\<not> robdd_equiv l' r' \\<and>\n        n2 \\<le> v' \\<and>\n        robdd_invar_ext bs2 (Suc v') l' \\<and>\n        robdd_invar_ext bs2 (Suc v') r';\n        v < v'; Suc v'' \\<le> va\\<rbrakk>\n       \\<Longrightarrow> x va = (x(v := True)) va\n 3. \\<And>x.\n       \\<lbrakk>\\<And>b.\n                   robdd_invar_vars_greater (Suc v') b \\<Longrightarrow>\n                   robdd_invar_vars_greater (Suc v) b;\n        b1 = robdd_var i l v r; b2 = robdd_var i' l' v' r';\n        b1_l = l \\<and>\n        b1_r = r \\<and>\n        v'' = v \\<and>\n        b2_l = robdd_var i' l' v' r' \\<and> b2_r = robdd_var i' l' v' r';\n        robdd_var i l v r \\<in> subrobdds_set bs1 \\<and>\n        \\<not> robdd_equiv l r \\<and>\n        n1 \\<le> v \\<and>\n        robdd_invar_ext bs1 (Suc v) l \\<and> robdd_invar_ext bs1 (Suc v) r;\n        robdd_var i' l' v' r' \\<in> subrobdds_set bs2 \\<and>\n        \\<not> robdd_equiv l' r' \\<and>\n        n2 \\<le> v' \\<and>\n        robdd_invar_ext bs2 (Suc v') l' \\<and>\n        robdd_invar_ext bs2 (Suc v') r';\n        v < v'\\<rbrakk>\n       \\<Longrightarrow> robdd_invar_vars_greater (Suc v'') r\n 4. \\<And>x va.\n       \\<lbrakk>\\<And>b.\n                   robdd_invar_vars_greater (Suc v') b \\<Longrightarrow>\n                   robdd_invar_vars_greater (Suc v) b;\n        b1 = robdd_var i l v r; b2 = robdd_var i' l' v' r';\n        b1_l = l \\<and>\n        b1_r = r \\<and>\n        v'' = v \\<and>\n        b2_l = robdd_var i' l' v' r' \\<and> b2_r = robdd_var i' l' v' r';\n        robdd_var i l v r \\<in> subrobdds_set bs1 \\<and>\n        \\<not> robdd_equiv l r \\<and>\n        n1 \\<le> v \\<and>\n        robdd_invar_ext bs1 (Suc v) l \\<and> robdd_invar_ext bs1 (Suc v) r;\n        robdd_var i' l' v' r' \\<in> subrobdds_set bs2 \\<and>\n        \\<not> robdd_equiv l' r' \\<and>\n        n2 \\<le> v' \\<and>\n        robdd_invar_ext bs2 (Suc v') l' \\<and>\n        robdd_invar_ext bs2 (Suc v') r';\n        v < v'; Suc v'' \\<le> va\\<rbrakk>\n       \\<Longrightarrow> x va = (x(v := False)) va\n 5. \\<And>x.\n       \\<lbrakk>\\<And>b.\n                   robdd_invar_vars_greater (Suc v') b \\<Longrightarrow>\n                   robdd_invar_vars_greater (Suc v) b;\n        b1 = robdd_var i l v r; b2 = robdd_var i' l' v' r';\n        b1_l = l \\<and>\n        b1_r = r \\<and>\n        v'' = v \\<and>\n        b2_l = robdd_var i' l' v' r' \\<and> b2_r = robdd_var i' l' v' r';\n        robdd_var i l v r \\<in> subrobdds_set bs1 \\<and>\n        \\<not> robdd_equiv l r \\<and>\n        n1 \\<le> v \\<and>\n        robdd_invar_ext bs1 (Suc v) l \\<and> robdd_invar_ext bs1 (Suc v) r;\n        robdd_var i' l' v' r' \\<in> subrobdds_set bs2 \\<and>\n        \\<not> robdd_equiv l' r' \\<and>\n        n2 \\<le> v' \\<and>\n        robdd_invar_ext bs2 (Suc v') l' \\<and>\n        robdd_invar_ext bs2 (Suc v') r';\n        v < v'; x v'\\<rbrakk>\n       \\<Longrightarrow> robdd_invar_vars_greater (Suc v'') l'\n 6. \\<And>x va.\n       \\<lbrakk>\\<And>b.\n                   robdd_invar_vars_greater (Suc v') b \\<Longrightarrow>\n                   robdd_invar_vars_greater (Suc v) b;\n        b1 = robdd_var i l v r; b2 = robdd_var i' l' v' r';\n        b1_l = l \\<and>\n        b1_r = r \\<and>\n        v'' = v \\<and>\n        b2_l = robdd_var i' l' v' r' \\<and> b2_r = robdd_var i' l' v' r';\n        robdd_var i l v r \\<in> subrobdds_set bs1 \\<and>\n        \\<not> robdd_equiv l r \\<and>\n        n1 \\<le> v \\<and>\n        robdd_invar_ext bs1 (Suc v) l \\<and> robdd_invar_ext bs1 (Suc v) r;\n        robdd_var i' l' v' r' \\<in> subrobdds_set bs2 \\<and>\n        \\<not> robdd_equiv l' r' \\<and>\n        n2 \\<le> v' \\<and>\n        robdd_invar_ext bs2 (Suc v') l' \\<and>\n        robdd_invar_ext bs2 (Suc v') r';\n        v < v'; x v'; Suc v'' \\<le> va\\<rbrakk>\n       \\<Longrightarrow> x va = (x(v := True)) va\n 7. \\<And>x.\n       \\<lbrakk>\\<And>b.\n                   robdd_invar_vars_greater (Suc v') b \\<Longrightarrow>\n                   robdd_invar_vars_greater (Suc v) b;\n        b1 = robdd_var i l v r; b2 = robdd_var i' l' v' r';\n        b1_l = l \\<and>\n        b1_r = r \\<and>\n        v'' = v \\<and>\n        b2_l = robdd_var i' l' v' r' \\<and> b2_r = robdd_var i' l' v' r';\n        robdd_var i l v r \\<in> subrobdds_set bs1 \\<and>\n        \\<not> robdd_equiv l r \\<and>\n        n1 \\<le> v \\<and>\n        robdd_invar_ext bs1 (Suc v) l \\<and> robdd_invar_ext bs1 (Suc v) r;\n        robdd_var i' l' v' r' \\<in> subrobdds_set bs2 \\<and>\n        \\<not> robdd_equiv l' r' \\<and>\n        n2 \\<le> v' \\<and>\n        robdd_invar_ext bs2 (Suc v') l' \\<and>\n        robdd_invar_ext bs2 (Suc v') r';\n        v < v'; \\<not> x v'\\<rbrakk>\n       \\<Longrightarrow> robdd_invar_vars_greater (Suc v'') r'\n 8. \\<And>x va.\n       \\<lbrakk>\\<And>b.\n                   robdd_invar_vars_greater (Suc v') b \\<Longrightarrow>\n                   robdd_invar_vars_greater (Suc v) b;\n        b1 = robdd_var i l v r; b2 = robdd_var i' l' v' r';\n        b1_l = l \\<and>\n        b1_r = r \\<and>\n        v'' = v \\<and>\n        b2_l = robdd_var i' l' v' r' \\<and> b2_r = robdd_var i' l' v' r';\n        robdd_var i l v r \\<in> subrobdds_set bs1 \\<and>\n        \\<not> robdd_equiv l r \\<and>\n        n1 \\<le> v \\<and>\n        robdd_invar_ext bs1 (Suc v) l \\<and> robdd_invar_ext bs1 (Suc v) r;\n        robdd_var i' l' v' r' \\<in> subrobdds_set bs2 \\<and>\n        \\<not> robdd_equiv l' r' \\<and>\n        n2 \\<le> v' \\<and>\n        robdd_invar_ext bs2 (Suc v') l' \\<and>\n        robdd_invar_ext bs2 (Suc v') r';\n        v < v'; \\<not> x v'; Suc v'' \\<le> va\\<rbrakk>\n       \\<Longrightarrow> x va = (x(v := True)) va\n 9. \\<And>x.\n       \\<lbrakk>\\<And>b.\n                   robdd_invar_vars_greater (Suc v') b \\<Longrightarrow>\n                   robdd_invar_vars_greater (Suc v) b;\n        b1 = robdd_var i l v r; b2 = robdd_var i' l' v' r';\n        b1_l = l \\<and>\n        b1_r = r \\<and>\n        v'' = v \\<and>\n        b2_l = robdd_var i' l' v' r' \\<and> b2_r = robdd_var i' l' v' r';\n        robdd_var i l v r \\<in> subrobdds_set bs1 \\<and>\n        \\<not> robdd_equiv l r \\<and>\n        n1 \\<le> v \\<and>\n        robdd_invar_ext bs1 (Suc v) l \\<and> robdd_invar_ext bs1 (Suc v) r;\n        robdd_var i' l' v' r' \\<in> subrobdds_set bs2 \\<and>\n        \\<not> robdd_equiv l' r' \\<and>\n        n2 \\<le> v' \\<and>\n        robdd_invar_ext bs2 (Suc v') l' \\<and>\n        robdd_invar_ext bs2 (Suc v') r';\n        v < v'; x v'\\<rbrakk>\n       \\<Longrightarrow> robdd_invar_vars_greater (Suc v'') l'\n 10. \\<And>x va.\n        \\<lbrakk>\\<And>b.\n                    robdd_invar_vars_greater (Suc v') b \\<Longrightarrow>\n                    robdd_invar_vars_greater (Suc v) b;\n         b1 = robdd_var i l v r; b2 = robdd_var i' l' v' r';\n         b1_l = l \\<and>\n         b1_r = r \\<and>\n         v'' = v \\<and>\n         b2_l = robdd_var i' l' v' r' \\<and> b2_r = robdd_var i' l' v' r';\n         robdd_var i l v r \\<in> subrobdds_set bs1 \\<and>\n         \\<not> robdd_equiv l r \\<and>\n         n1 \\<le> v \\<and>\n         robdd_invar_ext bs1 (Suc v) l \\<and> robdd_invar_ext bs1 (Suc v) r;\n         robdd_var i' l' v' r' \\<in> subrobdds_set bs2 \\<and>\n         \\<not> robdd_equiv l' r' \\<and>\n         n2 \\<le> v' \\<and>\n         robdd_invar_ext bs2 (Suc v') l' \\<and>\n         robdd_invar_ext bs2 (Suc v') r';\n         v < v'; x v'; Suc v'' \\<le> va\\<rbrakk>\n        \\<Longrightarrow> x va = (x(v := False)) va\nA total of 12 subgoals...", "apply (simp_all add: robdd_invar_ext_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  robdd_\\<alpha> b1_l =\n  (\\<lambda>a. robdd_\\<alpha> b1 (a(v'' := True))) \\<and>\n  robdd_\\<alpha> b1_r =\n  (\\<lambda>a. robdd_\\<alpha> b1 (a(v'' := False))) \\<and>\n  robdd_\\<alpha> b2_l =\n  (\\<lambda>a. robdd_\\<alpha> b2 (a(v'' := True))) \\<and>\n  robdd_\\<alpha> b2_r =\n  (\\<lambda>a. robdd_\\<alpha> b2 (a(v'' := False))) \\<and>\n  robdd_invar_ext bs1 (Suc v'') b1_l \\<and>\n  robdd_invar_ext bs1 (Suc v'') b1_r \\<and>\n  robdd_invar_ext bs2 (Suc v'') b2_l \\<and>\n  robdd_invar_ext bs2 (Suc v'') b2_r \\<and>\n  b1_l \\<in> subrobdds b1 \\<and>\n  b2_l \\<in> subrobdds b2 \\<and>\n  b1_r \\<in> subrobdds b1 \\<and>\n  b2_r \\<in> subrobdds b2 \\<and>\n  robdd_get_min_var b1 b2 = v'' \\<and>\n  (\\<not> (robdd_is_leaf b1 \\<and> robdd_is_leaf b2) \\<longrightarrow>\n   size_robdd b1_l + size_robdd b2_l < size_robdd b1 + size_robdd b2) \\<and>\n  (\\<not> (robdd_is_leaf b1 \\<and> robdd_is_leaf b2) \\<longrightarrow>\n   size_robdd b1_r + size_robdd b2_r < size_robdd b1 + size_robdd b2)\n\ngoal (1 subgoal):\n 1. \\<not> v < v' \\<Longrightarrow>\n    robdd_\\<alpha> b1_l =\n    (\\<lambda>a. robdd_\\<alpha> b1 (a(v'' := True))) \\<and>\n    robdd_\\<alpha> b1_r =\n    (\\<lambda>a. robdd_\\<alpha> b1 (a(v'' := False))) \\<and>\n    robdd_\\<alpha> b2_l =\n    (\\<lambda>a. robdd_\\<alpha> b2 (a(v'' := True))) \\<and>\n    robdd_\\<alpha> b2_r =\n    (\\<lambda>a. robdd_\\<alpha> b2 (a(v'' := False))) \\<and>\n    robdd_invar_ext bs1 (Suc v'') b1_l \\<and>\n    robdd_invar_ext bs1 (Suc v'') b1_r \\<and>\n    robdd_invar_ext bs2 (Suc v'') b2_l \\<and>\n    robdd_invar_ext bs2 (Suc v'') b2_r \\<and>\n    b1_l \\<in> subrobdds b1 \\<and>\n    b2_l \\<in> subrobdds b2 \\<and>\n    b1_r \\<in> subrobdds b1 \\<and>\n    b2_r \\<in> subrobdds b2 \\<and>\n    robdd_get_min_var b1 b2 = v'' \\<and>\n    (\\<not> (robdd_is_leaf b1 \\<and> robdd_is_leaf b2) \\<longrightarrow>\n     size_robdd b1_l + size_robdd b2_l\n     < size_robdd b1 + size_robdd b2) \\<and>\n    (\\<not> (robdd_is_leaf b1 \\<and> robdd_is_leaf b2) \\<longrightarrow>\n     size_robdd b1_r + size_robdd b2_r < size_robdd b1 + size_robdd b2)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> v < v' \\<Longrightarrow>\n    robdd_\\<alpha> b1_l =\n    (\\<lambda>a. robdd_\\<alpha> b1 (a(v'' := True))) \\<and>\n    robdd_\\<alpha> b1_r =\n    (\\<lambda>a. robdd_\\<alpha> b1 (a(v'' := False))) \\<and>\n    robdd_\\<alpha> b2_l =\n    (\\<lambda>a. robdd_\\<alpha> b2 (a(v'' := True))) \\<and>\n    robdd_\\<alpha> b2_r =\n    (\\<lambda>a. robdd_\\<alpha> b2 (a(v'' := False))) \\<and>\n    robdd_invar_ext bs1 (Suc v'') b1_l \\<and>\n    robdd_invar_ext bs1 (Suc v'') b1_r \\<and>\n    robdd_invar_ext bs2 (Suc v'') b2_l \\<and>\n    robdd_invar_ext bs2 (Suc v'') b2_r \\<and>\n    b1_l \\<in> subrobdds b1 \\<and>\n    b2_l \\<in> subrobdds b2 \\<and>\n    b1_r \\<in> subrobdds b1 \\<and>\n    b2_r \\<in> subrobdds b2 \\<and>\n    robdd_get_min_var b1 b2 = v'' \\<and>\n    (\\<not> (robdd_is_leaf b1 \\<and> robdd_is_leaf b2) \\<longrightarrow>\n     size_robdd b1_l + size_robdd b2_l\n     < size_robdd b1 + size_robdd b2) \\<and>\n    (\\<not> (robdd_is_leaf b1 \\<and> robdd_is_leaf b2) \\<longrightarrow>\n     size_robdd b1_r + size_robdd b2_r < size_robdd b1 + size_robdd b2)", "case False"], ["proof (state)\nthis:\n  \\<not> v < v'\n\ngoal (1 subgoal):\n 1. \\<not> v < v' \\<Longrightarrow>\n    robdd_\\<alpha> b1_l =\n    (\\<lambda>a. robdd_\\<alpha> b1 (a(v'' := True))) \\<and>\n    robdd_\\<alpha> b1_r =\n    (\\<lambda>a. robdd_\\<alpha> b1 (a(v'' := False))) \\<and>\n    robdd_\\<alpha> b2_l =\n    (\\<lambda>a. robdd_\\<alpha> b2 (a(v'' := True))) \\<and>\n    robdd_\\<alpha> b2_r =\n    (\\<lambda>a. robdd_\\<alpha> b2 (a(v'' := False))) \\<and>\n    robdd_invar_ext bs1 (Suc v'') b1_l \\<and>\n    robdd_invar_ext bs1 (Suc v'') b1_r \\<and>\n    robdd_invar_ext bs2 (Suc v'') b2_l \\<and>\n    robdd_invar_ext bs2 (Suc v'') b2_r \\<and>\n    b1_l \\<in> subrobdds b1 \\<and>\n    b2_l \\<in> subrobdds b2 \\<and>\n    b1_r \\<in> subrobdds b1 \\<and>\n    b2_r \\<in> subrobdds b2 \\<and>\n    robdd_get_min_var b1 b2 = v'' \\<and>\n    (\\<not> (robdd_is_leaf b1 \\<and> robdd_is_leaf b2) \\<longrightarrow>\n     size_robdd b1_l + size_robdd b2_l\n     < size_robdd b1 + size_robdd b2) \\<and>\n    (\\<not> (robdd_is_leaf b1 \\<and> robdd_is_leaf b2) \\<longrightarrow>\n     size_robdd b1_r + size_robdd b2_r < size_robdd b1 + size_robdd b2)", "hence v'_le: \"v' \\<le> v\""], ["proof (prove)\nusing this:\n  \\<not> v < v'\n\ngoal (1 subgoal):\n 1. v' \\<le> v", "by simp"], ["proof (state)\nthis:\n  v' \\<le> v\n\ngoal (1 subgoal):\n 1. \\<not> v < v' \\<Longrightarrow>\n    robdd_\\<alpha> b1_l =\n    (\\<lambda>a. robdd_\\<alpha> b1 (a(v'' := True))) \\<and>\n    robdd_\\<alpha> b1_r =\n    (\\<lambda>a. robdd_\\<alpha> b1 (a(v'' := False))) \\<and>\n    robdd_\\<alpha> b2_l =\n    (\\<lambda>a. robdd_\\<alpha> b2 (a(v'' := True))) \\<and>\n    robdd_\\<alpha> b2_r =\n    (\\<lambda>a. robdd_\\<alpha> b2 (a(v'' := False))) \\<and>\n    robdd_invar_ext bs1 (Suc v'') b1_l \\<and>\n    robdd_invar_ext bs1 (Suc v'') b1_r \\<and>\n    robdd_invar_ext bs2 (Suc v'') b2_l \\<and>\n    robdd_invar_ext bs2 (Suc v'') b2_r \\<and>\n    b1_l \\<in> subrobdds b1 \\<and>\n    b2_l \\<in> subrobdds b2 \\<and>\n    b1_r \\<in> subrobdds b1 \\<and>\n    b2_r \\<in> subrobdds b2 \\<and>\n    robdd_get_min_var b1 b2 = v'' \\<and>\n    (\\<not> (robdd_is_leaf b1 \\<and> robdd_is_leaf b2) \\<longrightarrow>\n     size_robdd b1_l + size_robdd b2_l\n     < size_robdd b1 + size_robdd b2) \\<and>\n    (\\<not> (robdd_is_leaf b1 \\<and> robdd_is_leaf b2) \\<longrightarrow>\n     size_robdd b1_r + size_robdd b2_r < size_robdd b1 + size_robdd b2)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. robdd_\\<alpha> b1_l =\n    (\\<lambda>a. robdd_\\<alpha> b1 (a(v'' := True))) \\<and>\n    robdd_\\<alpha> b1_r =\n    (\\<lambda>a. robdd_\\<alpha> b1 (a(v'' := False))) \\<and>\n    robdd_\\<alpha> b2_l =\n    (\\<lambda>a. robdd_\\<alpha> b2 (a(v'' := True))) \\<and>\n    robdd_\\<alpha> b2_r =\n    (\\<lambda>a. robdd_\\<alpha> b2 (a(v'' := False))) \\<and>\n    robdd_invar_ext bs1 (Suc v'') b1_l \\<and>\n    robdd_invar_ext bs1 (Suc v'') b1_r \\<and>\n    robdd_invar_ext bs2 (Suc v'') b2_l \\<and>\n    robdd_invar_ext bs2 (Suc v'') b2_r \\<and>\n    b1_l \\<in> subrobdds b1 \\<and>\n    b2_l \\<in> subrobdds b2 \\<and>\n    b1_r \\<in> subrobdds b1 \\<and>\n    b2_r \\<in> subrobdds b2 \\<and>\n    robdd_get_min_var b1 b2 = v'' \\<and>\n    (\\<not> (robdd_is_leaf b1 \\<and> robdd_is_leaf b2) \\<longrightarrow>\n     size_robdd b1_l + size_robdd b2_l\n     < size_robdd b1 + size_robdd b2) \\<and>\n    (\\<not> (robdd_is_leaf b1 \\<and> robdd_is_leaf b2) \\<longrightarrow>\n     size_robdd b1_r + size_robdd b2_r < size_robdd b1 + size_robdd b2)", "proof (cases \"v = v'\")"], ["proof (state)\ngoal (2 subgoals):\n 1. v = v' \\<Longrightarrow>\n    robdd_\\<alpha> b1_l =\n    (\\<lambda>a. robdd_\\<alpha> b1 (a(v'' := True))) \\<and>\n    robdd_\\<alpha> b1_r =\n    (\\<lambda>a. robdd_\\<alpha> b1 (a(v'' := False))) \\<and>\n    robdd_\\<alpha> b2_l =\n    (\\<lambda>a. robdd_\\<alpha> b2 (a(v'' := True))) \\<and>\n    robdd_\\<alpha> b2_r =\n    (\\<lambda>a. robdd_\\<alpha> b2 (a(v'' := False))) \\<and>\n    robdd_invar_ext bs1 (Suc v'') b1_l \\<and>\n    robdd_invar_ext bs1 (Suc v'') b1_r \\<and>\n    robdd_invar_ext bs2 (Suc v'') b2_l \\<and>\n    robdd_invar_ext bs2 (Suc v'') b2_r \\<and>\n    b1_l \\<in> subrobdds b1 \\<and>\n    b2_l \\<in> subrobdds b2 \\<and>\n    b1_r \\<in> subrobdds b1 \\<and>\n    b2_r \\<in> subrobdds b2 \\<and>\n    robdd_get_min_var b1 b2 = v'' \\<and>\n    (\\<not> (robdd_is_leaf b1 \\<and> robdd_is_leaf b2) \\<longrightarrow>\n     size_robdd b1_l + size_robdd b2_l\n     < size_robdd b1 + size_robdd b2) \\<and>\n    (\\<not> (robdd_is_leaf b1 \\<and> robdd_is_leaf b2) \\<longrightarrow>\n     size_robdd b1_r + size_robdd b2_r < size_robdd b1 + size_robdd b2)\n 2. v \\<noteq> v' \\<Longrightarrow>\n    robdd_\\<alpha> b1_l =\n    (\\<lambda>a. robdd_\\<alpha> b1 (a(v'' := True))) \\<and>\n    robdd_\\<alpha> b1_r =\n    (\\<lambda>a. robdd_\\<alpha> b1 (a(v'' := False))) \\<and>\n    robdd_\\<alpha> b2_l =\n    (\\<lambda>a. robdd_\\<alpha> b2 (a(v'' := True))) \\<and>\n    robdd_\\<alpha> b2_r =\n    (\\<lambda>a. robdd_\\<alpha> b2 (a(v'' := False))) \\<and>\n    robdd_invar_ext bs1 (Suc v'') b1_l \\<and>\n    robdd_invar_ext bs1 (Suc v'') b1_r \\<and>\n    robdd_invar_ext bs2 (Suc v'') b2_l \\<and>\n    robdd_invar_ext bs2 (Suc v'') b2_r \\<and>\n    b1_l \\<in> subrobdds b1 \\<and>\n    b2_l \\<in> subrobdds b2 \\<and>\n    b1_r \\<in> subrobdds b1 \\<and>\n    b2_r \\<in> subrobdds b2 \\<and>\n    robdd_get_min_var b1 b2 = v'' \\<and>\n    (\\<not> (robdd_is_leaf b1 \\<and> robdd_is_leaf b2) \\<longrightarrow>\n     size_robdd b1_l + size_robdd b2_l\n     < size_robdd b1 + size_robdd b2) \\<and>\n    (\\<not> (robdd_is_leaf b1 \\<and> robdd_is_leaf b2) \\<longrightarrow>\n     size_robdd b1_r + size_robdd b2_r < size_robdd b1 + size_robdd b2)", "case True"], ["proof (state)\nthis:\n  v = v'\n\ngoal (2 subgoals):\n 1. v = v' \\<Longrightarrow>\n    robdd_\\<alpha> b1_l =\n    (\\<lambda>a. robdd_\\<alpha> b1 (a(v'' := True))) \\<and>\n    robdd_\\<alpha> b1_r =\n    (\\<lambda>a. robdd_\\<alpha> b1 (a(v'' := False))) \\<and>\n    robdd_\\<alpha> b2_l =\n    (\\<lambda>a. robdd_\\<alpha> b2 (a(v'' := True))) \\<and>\n    robdd_\\<alpha> b2_r =\n    (\\<lambda>a. robdd_\\<alpha> b2 (a(v'' := False))) \\<and>\n    robdd_invar_ext bs1 (Suc v'') b1_l \\<and>\n    robdd_invar_ext bs1 (Suc v'') b1_r \\<and>\n    robdd_invar_ext bs2 (Suc v'') b2_l \\<and>\n    robdd_invar_ext bs2 (Suc v'') b2_r \\<and>\n    b1_l \\<in> subrobdds b1 \\<and>\n    b2_l \\<in> subrobdds b2 \\<and>\n    b1_r \\<in> subrobdds b1 \\<and>\n    b2_r \\<in> subrobdds b2 \\<and>\n    robdd_get_min_var b1 b2 = v'' \\<and>\n    (\\<not> (robdd_is_leaf b1 \\<and> robdd_is_leaf b2) \\<longrightarrow>\n     size_robdd b1_l + size_robdd b2_l\n     < size_robdd b1 + size_robdd b2) \\<and>\n    (\\<not> (robdd_is_leaf b1 \\<and> robdd_is_leaf b2) \\<longrightarrow>\n     size_robdd b1_r + size_robdd b2_r < size_robdd b1 + size_robdd b2)\n 2. v \\<noteq> v' \\<Longrightarrow>\n    robdd_\\<alpha> b1_l =\n    (\\<lambda>a. robdd_\\<alpha> b1 (a(v'' := True))) \\<and>\n    robdd_\\<alpha> b1_r =\n    (\\<lambda>a. robdd_\\<alpha> b1 (a(v'' := False))) \\<and>\n    robdd_\\<alpha> b2_l =\n    (\\<lambda>a. robdd_\\<alpha> b2 (a(v'' := True))) \\<and>\n    robdd_\\<alpha> b2_r =\n    (\\<lambda>a. robdd_\\<alpha> b2 (a(v'' := False))) \\<and>\n    robdd_invar_ext bs1 (Suc v'') b1_l \\<and>\n    robdd_invar_ext bs1 (Suc v'') b1_r \\<and>\n    robdd_invar_ext bs2 (Suc v'') b2_l \\<and>\n    robdd_invar_ext bs2 (Suc v'') b2_r \\<and>\n    b1_l \\<in> subrobdds b1 \\<and>\n    b2_l \\<in> subrobdds b2 \\<and>\n    b1_r \\<in> subrobdds b1 \\<and>\n    b2_r \\<in> subrobdds b2 \\<and>\n    robdd_get_min_var b1 b2 = v'' \\<and>\n    (\\<not> (robdd_is_leaf b1 \\<and> robdd_is_leaf b2) \\<longrightarrow>\n     size_robdd b1_l + size_robdd b2_l\n     < size_robdd b1 + size_robdd b2) \\<and>\n    (\\<not> (robdd_is_leaf b1 \\<and> robdd_is_leaf b2) \\<longrightarrow>\n     size_robdd b1_r + size_robdd b2_r < size_robdd b1 + size_robdd b2)", "with robdd_invar_vars_greater___weaken[of \"Suc v'\" _ \"Suc v\"] b1_eq b2_eq eval[symmetric] invar_b1 invar_b2"], ["proof (chain)\npicking this:\n  \\<lbrakk>robdd_invar_vars_greater (Suc v') ?b; Suc v \\<le> Suc v'\\<rbrakk>\n  \\<Longrightarrow> robdd_invar_vars_greater (Suc v) ?b\n  b1 = robdd_var i l v r\n  b2 = robdd_var i' l' v' r'\n  (b1_l, b1_r, v'', b2_l, b2_r) = robdd_apply_next b1 b2\n  robdd_invar_ext bs1 n1 b1\n  robdd_invar_ext bs2 n2 b2\n  v = v'", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<lbrakk>robdd_invar_vars_greater (Suc v') ?b; Suc v \\<le> Suc v'\\<rbrakk>\n  \\<Longrightarrow> robdd_invar_vars_greater (Suc v) ?b\n  b1 = robdd_var i l v r\n  b2 = robdd_var i' l' v' r'\n  (b1_l, b1_r, v'', b2_l, b2_r) = robdd_apply_next b1 b2\n  robdd_invar_ext bs1 n1 b1\n  robdd_invar_ext bs2 n2 b2\n  v = v'\n\ngoal (1 subgoal):\n 1. robdd_\\<alpha> b1_l =\n    (\\<lambda>a. robdd_\\<alpha> b1 (a(v'' := True))) \\<and>\n    robdd_\\<alpha> b1_r =\n    (\\<lambda>a. robdd_\\<alpha> b1 (a(v'' := False))) \\<and>\n    robdd_\\<alpha> b2_l =\n    (\\<lambda>a. robdd_\\<alpha> b2 (a(v'' := True))) \\<and>\n    robdd_\\<alpha> b2_r =\n    (\\<lambda>a. robdd_\\<alpha> b2 (a(v'' := False))) \\<and>\n    robdd_invar_ext bs1 (Suc v'') b1_l \\<and>\n    robdd_invar_ext bs1 (Suc v'') b1_r \\<and>\n    robdd_invar_ext bs2 (Suc v'') b2_l \\<and>\n    robdd_invar_ext bs2 (Suc v'') b2_r \\<and>\n    b1_l \\<in> subrobdds b1 \\<and>\n    b2_l \\<in> subrobdds b2 \\<and>\n    b1_r \\<in> subrobdds b1 \\<and>\n    b2_r \\<in> subrobdds b2 \\<and>\n    robdd_get_min_var b1 b2 = v'' \\<and>\n    (\\<not> (robdd_is_leaf b1 \\<and> robdd_is_leaf b2) \\<longrightarrow>\n     size_robdd b1_l + size_robdd b2_l\n     < size_robdd b1 + size_robdd b2) \\<and>\n    (\\<not> (robdd_is_leaf b1 \\<and> robdd_is_leaf b2) \\<longrightarrow>\n     size_robdd b1_r + size_robdd b2_r < size_robdd b1 + size_robdd b2)", "apply (simp add: fun_eq_iff)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>b1 = robdd_var i l v' r; b2 = robdd_var i' l' v' r';\n     b1_l = l \\<and>\n     b1_r = r \\<and> v'' = v' \\<and> b2_l = l' \\<and> b2_r = r';\n     robdd_var i l v' r \\<in> subrobdds_set bs1 \\<and>\n     \\<not> robdd_equiv l r \\<and>\n     n1 \\<le> v' \\<and>\n     robdd_invar_ext bs1 (Suc v') l \\<and> robdd_invar_ext bs1 (Suc v') r;\n     robdd_var i' l' v' r' \\<in> subrobdds_set bs2 \\<and>\n     \\<not> robdd_equiv l' r' \\<and>\n     n2 \\<le> v' \\<and>\n     robdd_invar_ext bs2 (Suc v') l' \\<and> robdd_invar_ext bs2 (Suc v') r';\n     v = v'\\<rbrakk>\n    \\<Longrightarrow> (\\<forall>x.\n                          robdd_\\<alpha> l x =\n                          robdd_\\<alpha> l (x(v' := True))) \\<and>\n                      (\\<forall>x.\n                          robdd_\\<alpha> r x =\n                          robdd_\\<alpha> r (x(v' := False))) \\<and>\n                      (\\<forall>x.\n                          robdd_\\<alpha> l' x =\n                          robdd_\\<alpha> l' (x(v' := True))) \\<and>\n                      (\\<forall>x.\n                          robdd_\\<alpha> r' x =\n                          robdd_\\<alpha> r' (x(v' := False)))", "apply (intro allI conjI impI robdd_\\<alpha>_invar_greater [of \"Suc v''\"])"], ["proof (prove)\ngoal (8 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>b1 = robdd_var i l v' r; b2 = robdd_var i' l' v' r';\n        b1_l = l \\<and>\n        b1_r = r \\<and> v'' = v' \\<and> b2_l = l' \\<and> b2_r = r';\n        robdd_var i l v' r \\<in> subrobdds_set bs1 \\<and>\n        \\<not> robdd_equiv l r \\<and>\n        n1 \\<le> v' \\<and>\n        robdd_invar_ext bs1 (Suc v') l \\<and>\n        robdd_invar_ext bs1 (Suc v') r;\n        robdd_var i' l' v' r' \\<in> subrobdds_set bs2 \\<and>\n        \\<not> robdd_equiv l' r' \\<and>\n        n2 \\<le> v' \\<and>\n        robdd_invar_ext bs2 (Suc v') l' \\<and>\n        robdd_invar_ext bs2 (Suc v') r';\n        v = v'\\<rbrakk>\n       \\<Longrightarrow> robdd_invar_vars_greater (Suc v'') l\n 2. \\<And>x va.\n       \\<lbrakk>b1 = robdd_var i l v' r; b2 = robdd_var i' l' v' r';\n        b1_l = l \\<and>\n        b1_r = r \\<and> v'' = v' \\<and> b2_l = l' \\<and> b2_r = r';\n        robdd_var i l v' r \\<in> subrobdds_set bs1 \\<and>\n        \\<not> robdd_equiv l r \\<and>\n        n1 \\<le> v' \\<and>\n        robdd_invar_ext bs1 (Suc v') l \\<and>\n        robdd_invar_ext bs1 (Suc v') r;\n        robdd_var i' l' v' r' \\<in> subrobdds_set bs2 \\<and>\n        \\<not> robdd_equiv l' r' \\<and>\n        n2 \\<le> v' \\<and>\n        robdd_invar_ext bs2 (Suc v') l' \\<and>\n        robdd_invar_ext bs2 (Suc v') r';\n        v = v'; Suc v'' \\<le> va\\<rbrakk>\n       \\<Longrightarrow> x va = (x(v' := True)) va\n 3. \\<And>x.\n       \\<lbrakk>b1 = robdd_var i l v' r; b2 = robdd_var i' l' v' r';\n        b1_l = l \\<and>\n        b1_r = r \\<and> v'' = v' \\<and> b2_l = l' \\<and> b2_r = r';\n        robdd_var i l v' r \\<in> subrobdds_set bs1 \\<and>\n        \\<not> robdd_equiv l r \\<and>\n        n1 \\<le> v' \\<and>\n        robdd_invar_ext bs1 (Suc v') l \\<and>\n        robdd_invar_ext bs1 (Suc v') r;\n        robdd_var i' l' v' r' \\<in> subrobdds_set bs2 \\<and>\n        \\<not> robdd_equiv l' r' \\<and>\n        n2 \\<le> v' \\<and>\n        robdd_invar_ext bs2 (Suc v') l' \\<and>\n        robdd_invar_ext bs2 (Suc v') r';\n        v = v'\\<rbrakk>\n       \\<Longrightarrow> robdd_invar_vars_greater (Suc v'') r\n 4. \\<And>x va.\n       \\<lbrakk>b1 = robdd_var i l v' r; b2 = robdd_var i' l' v' r';\n        b1_l = l \\<and>\n        b1_r = r \\<and> v'' = v' \\<and> b2_l = l' \\<and> b2_r = r';\n        robdd_var i l v' r \\<in> subrobdds_set bs1 \\<and>\n        \\<not> robdd_equiv l r \\<and>\n        n1 \\<le> v' \\<and>\n        robdd_invar_ext bs1 (Suc v') l \\<and>\n        robdd_invar_ext bs1 (Suc v') r;\n        robdd_var i' l' v' r' \\<in> subrobdds_set bs2 \\<and>\n        \\<not> robdd_equiv l' r' \\<and>\n        n2 \\<le> v' \\<and>\n        robdd_invar_ext bs2 (Suc v') l' \\<and>\n        robdd_invar_ext bs2 (Suc v') r';\n        v = v'; Suc v'' \\<le> va\\<rbrakk>\n       \\<Longrightarrow> x va = (x(v' := False)) va\n 5. \\<And>x.\n       \\<lbrakk>b1 = robdd_var i l v' r; b2 = robdd_var i' l' v' r';\n        b1_l = l \\<and>\n        b1_r = r \\<and> v'' = v' \\<and> b2_l = l' \\<and> b2_r = r';\n        robdd_var i l v' r \\<in> subrobdds_set bs1 \\<and>\n        \\<not> robdd_equiv l r \\<and>\n        n1 \\<le> v' \\<and>\n        robdd_invar_ext bs1 (Suc v') l \\<and>\n        robdd_invar_ext bs1 (Suc v') r;\n        robdd_var i' l' v' r' \\<in> subrobdds_set bs2 \\<and>\n        \\<not> robdd_equiv l' r' \\<and>\n        n2 \\<le> v' \\<and>\n        robdd_invar_ext bs2 (Suc v') l' \\<and>\n        robdd_invar_ext bs2 (Suc v') r';\n        v = v'\\<rbrakk>\n       \\<Longrightarrow> robdd_invar_vars_greater (Suc v'') l'\n 6. \\<And>x va.\n       \\<lbrakk>b1 = robdd_var i l v' r; b2 = robdd_var i' l' v' r';\n        b1_l = l \\<and>\n        b1_r = r \\<and> v'' = v' \\<and> b2_l = l' \\<and> b2_r = r';\n        robdd_var i l v' r \\<in> subrobdds_set bs1 \\<and>\n        \\<not> robdd_equiv l r \\<and>\n        n1 \\<le> v' \\<and>\n        robdd_invar_ext bs1 (Suc v') l \\<and>\n        robdd_invar_ext bs1 (Suc v') r;\n        robdd_var i' l' v' r' \\<in> subrobdds_set bs2 \\<and>\n        \\<not> robdd_equiv l' r' \\<and>\n        n2 \\<le> v' \\<and>\n        robdd_invar_ext bs2 (Suc v') l' \\<and>\n        robdd_invar_ext bs2 (Suc v') r';\n        v = v'; Suc v'' \\<le> va\\<rbrakk>\n       \\<Longrightarrow> x va = (x(v' := True)) va\n 7. \\<And>x.\n       \\<lbrakk>b1 = robdd_var i l v' r; b2 = robdd_var i' l' v' r';\n        b1_l = l \\<and>\n        b1_r = r \\<and> v'' = v' \\<and> b2_l = l' \\<and> b2_r = r';\n        robdd_var i l v' r \\<in> subrobdds_set bs1 \\<and>\n        \\<not> robdd_equiv l r \\<and>\n        n1 \\<le> v' \\<and>\n        robdd_invar_ext bs1 (Suc v') l \\<and>\n        robdd_invar_ext bs1 (Suc v') r;\n        robdd_var i' l' v' r' \\<in> subrobdds_set bs2 \\<and>\n        \\<not> robdd_equiv l' r' \\<and>\n        n2 \\<le> v' \\<and>\n        robdd_invar_ext bs2 (Suc v') l' \\<and>\n        robdd_invar_ext bs2 (Suc v') r';\n        v = v'\\<rbrakk>\n       \\<Longrightarrow> robdd_invar_vars_greater (Suc v'') r'\n 8. \\<And>x va.\n       \\<lbrakk>b1 = robdd_var i l v' r; b2 = robdd_var i' l' v' r';\n        b1_l = l \\<and>\n        b1_r = r \\<and> v'' = v' \\<and> b2_l = l' \\<and> b2_r = r';\n        robdd_var i l v' r \\<in> subrobdds_set bs1 \\<and>\n        \\<not> robdd_equiv l r \\<and>\n        n1 \\<le> v' \\<and>\n        robdd_invar_ext bs1 (Suc v') l \\<and>\n        robdd_invar_ext bs1 (Suc v') r;\n        robdd_var i' l' v' r' \\<in> subrobdds_set bs2 \\<and>\n        \\<not> robdd_equiv l' r' \\<and>\n        n2 \\<le> v' \\<and>\n        robdd_invar_ext bs2 (Suc v') l' \\<and>\n        robdd_invar_ext bs2 (Suc v') r';\n        v = v'; Suc v'' \\<le> va\\<rbrakk>\n       \\<Longrightarrow> x va = (x(v' := False)) va", "apply (simp_all add: robdd_invar_ext_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  robdd_\\<alpha> b1_l =\n  (\\<lambda>a. robdd_\\<alpha> b1 (a(v'' := True))) \\<and>\n  robdd_\\<alpha> b1_r =\n  (\\<lambda>a. robdd_\\<alpha> b1 (a(v'' := False))) \\<and>\n  robdd_\\<alpha> b2_l =\n  (\\<lambda>a. robdd_\\<alpha> b2 (a(v'' := True))) \\<and>\n  robdd_\\<alpha> b2_r =\n  (\\<lambda>a. robdd_\\<alpha> b2 (a(v'' := False))) \\<and>\n  robdd_invar_ext bs1 (Suc v'') b1_l \\<and>\n  robdd_invar_ext bs1 (Suc v'') b1_r \\<and>\n  robdd_invar_ext bs2 (Suc v'') b2_l \\<and>\n  robdd_invar_ext bs2 (Suc v'') b2_r \\<and>\n  b1_l \\<in> subrobdds b1 \\<and>\n  b2_l \\<in> subrobdds b2 \\<and>\n  b1_r \\<in> subrobdds b1 \\<and>\n  b2_r \\<in> subrobdds b2 \\<and>\n  robdd_get_min_var b1 b2 = v'' \\<and>\n  (\\<not> (robdd_is_leaf b1 \\<and> robdd_is_leaf b2) \\<longrightarrow>\n   size_robdd b1_l + size_robdd b2_l < size_robdd b1 + size_robdd b2) \\<and>\n  (\\<not> (robdd_is_leaf b1 \\<and> robdd_is_leaf b2) \\<longrightarrow>\n   size_robdd b1_r + size_robdd b2_r < size_robdd b1 + size_robdd b2)\n\ngoal (1 subgoal):\n 1. v \\<noteq> v' \\<Longrightarrow>\n    robdd_\\<alpha> b1_l =\n    (\\<lambda>a. robdd_\\<alpha> b1 (a(v'' := True))) \\<and>\n    robdd_\\<alpha> b1_r =\n    (\\<lambda>a. robdd_\\<alpha> b1 (a(v'' := False))) \\<and>\n    robdd_\\<alpha> b2_l =\n    (\\<lambda>a. robdd_\\<alpha> b2 (a(v'' := True))) \\<and>\n    robdd_\\<alpha> b2_r =\n    (\\<lambda>a. robdd_\\<alpha> b2 (a(v'' := False))) \\<and>\n    robdd_invar_ext bs1 (Suc v'') b1_l \\<and>\n    robdd_invar_ext bs1 (Suc v'') b1_r \\<and>\n    robdd_invar_ext bs2 (Suc v'') b2_l \\<and>\n    robdd_invar_ext bs2 (Suc v'') b2_r \\<and>\n    b1_l \\<in> subrobdds b1 \\<and>\n    b2_l \\<in> subrobdds b2 \\<and>\n    b1_r \\<in> subrobdds b1 \\<and>\n    b2_r \\<in> subrobdds b2 \\<and>\n    robdd_get_min_var b1 b2 = v'' \\<and>\n    (\\<not> (robdd_is_leaf b1 \\<and> robdd_is_leaf b2) \\<longrightarrow>\n     size_robdd b1_l + size_robdd b2_l\n     < size_robdd b1 + size_robdd b2) \\<and>\n    (\\<not> (robdd_is_leaf b1 \\<and> robdd_is_leaf b2) \\<longrightarrow>\n     size_robdd b1_r + size_robdd b2_r < size_robdd b1 + size_robdd b2)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. v \\<noteq> v' \\<Longrightarrow>\n    robdd_\\<alpha> b1_l =\n    (\\<lambda>a. robdd_\\<alpha> b1 (a(v'' := True))) \\<and>\n    robdd_\\<alpha> b1_r =\n    (\\<lambda>a. robdd_\\<alpha> b1 (a(v'' := False))) \\<and>\n    robdd_\\<alpha> b2_l =\n    (\\<lambda>a. robdd_\\<alpha> b2 (a(v'' := True))) \\<and>\n    robdd_\\<alpha> b2_r =\n    (\\<lambda>a. robdd_\\<alpha> b2 (a(v'' := False))) \\<and>\n    robdd_invar_ext bs1 (Suc v'') b1_l \\<and>\n    robdd_invar_ext bs1 (Suc v'') b1_r \\<and>\n    robdd_invar_ext bs2 (Suc v'') b2_l \\<and>\n    robdd_invar_ext bs2 (Suc v'') b2_r \\<and>\n    b1_l \\<in> subrobdds b1 \\<and>\n    b2_l \\<in> subrobdds b2 \\<and>\n    b1_r \\<in> subrobdds b1 \\<and>\n    b2_r \\<in> subrobdds b2 \\<and>\n    robdd_get_min_var b1 b2 = v'' \\<and>\n    (\\<not> (robdd_is_leaf b1 \\<and> robdd_is_leaf b2) \\<longrightarrow>\n     size_robdd b1_l + size_robdd b2_l\n     < size_robdd b1 + size_robdd b2) \\<and>\n    (\\<not> (robdd_is_leaf b1 \\<and> robdd_is_leaf b2) \\<longrightarrow>\n     size_robdd b1_r + size_robdd b2_r < size_robdd b1 + size_robdd b2)", "case False"], ["proof (state)\nthis:\n  v \\<noteq> v'\n\ngoal (1 subgoal):\n 1. v \\<noteq> v' \\<Longrightarrow>\n    robdd_\\<alpha> b1_l =\n    (\\<lambda>a. robdd_\\<alpha> b1 (a(v'' := True))) \\<and>\n    robdd_\\<alpha> b1_r =\n    (\\<lambda>a. robdd_\\<alpha> b1 (a(v'' := False))) \\<and>\n    robdd_\\<alpha> b2_l =\n    (\\<lambda>a. robdd_\\<alpha> b2 (a(v'' := True))) \\<and>\n    robdd_\\<alpha> b2_r =\n    (\\<lambda>a. robdd_\\<alpha> b2 (a(v'' := False))) \\<and>\n    robdd_invar_ext bs1 (Suc v'') b1_l \\<and>\n    robdd_invar_ext bs1 (Suc v'') b1_r \\<and>\n    robdd_invar_ext bs2 (Suc v'') b2_l \\<and>\n    robdd_invar_ext bs2 (Suc v'') b2_r \\<and>\n    b1_l \\<in> subrobdds b1 \\<and>\n    b2_l \\<in> subrobdds b2 \\<and>\n    b1_r \\<in> subrobdds b1 \\<and>\n    b2_r \\<in> subrobdds b2 \\<and>\n    robdd_get_min_var b1 b2 = v'' \\<and>\n    (\\<not> (robdd_is_leaf b1 \\<and> robdd_is_leaf b2) \\<longrightarrow>\n     size_robdd b1_l + size_robdd b2_l\n     < size_robdd b1 + size_robdd b2) \\<and>\n    (\\<not> (robdd_is_leaf b1 \\<and> robdd_is_leaf b2) \\<longrightarrow>\n     size_robdd b1_r + size_robdd b2_r < size_robdd b1 + size_robdd b2)", "with v'_le"], ["proof (chain)\npicking this:\n  v' \\<le> v\n  v \\<noteq> v'", "have \"v' < v\""], ["proof (prove)\nusing this:\n  v' \\<le> v\n  v \\<noteq> v'\n\ngoal (1 subgoal):\n 1. v' < v", "by simp"], ["proof (state)\nthis:\n  v' < v\n\ngoal (1 subgoal):\n 1. v \\<noteq> v' \\<Longrightarrow>\n    robdd_\\<alpha> b1_l =\n    (\\<lambda>a. robdd_\\<alpha> b1 (a(v'' := True))) \\<and>\n    robdd_\\<alpha> b1_r =\n    (\\<lambda>a. robdd_\\<alpha> b1 (a(v'' := False))) \\<and>\n    robdd_\\<alpha> b2_l =\n    (\\<lambda>a. robdd_\\<alpha> b2 (a(v'' := True))) \\<and>\n    robdd_\\<alpha> b2_r =\n    (\\<lambda>a. robdd_\\<alpha> b2 (a(v'' := False))) \\<and>\n    robdd_invar_ext bs1 (Suc v'') b1_l \\<and>\n    robdd_invar_ext bs1 (Suc v'') b1_r \\<and>\n    robdd_invar_ext bs2 (Suc v'') b2_l \\<and>\n    robdd_invar_ext bs2 (Suc v'') b2_r \\<and>\n    b1_l \\<in> subrobdds b1 \\<and>\n    b2_l \\<in> subrobdds b2 \\<and>\n    b1_r \\<in> subrobdds b1 \\<and>\n    b2_r \\<in> subrobdds b2 \\<and>\n    robdd_get_min_var b1 b2 = v'' \\<and>\n    (\\<not> (robdd_is_leaf b1 \\<and> robdd_is_leaf b2) \\<longrightarrow>\n     size_robdd b1_l + size_robdd b2_l\n     < size_robdd b1 + size_robdd b2) \\<and>\n    (\\<not> (robdd_is_leaf b1 \\<and> robdd_is_leaf b2) \\<longrightarrow>\n     size_robdd b1_r + size_robdd b2_r < size_robdd b1 + size_robdd b2)", "with robdd_invar_vars_greater___weaken[of \"Suc v\" _ \"Suc v'\"] b1_eq b2_eq eval[symmetric] invar_b1 invar_b2"], ["proof (chain)\npicking this:\n  \\<lbrakk>robdd_invar_vars_greater (Suc v) ?b; Suc v' \\<le> Suc v\\<rbrakk>\n  \\<Longrightarrow> robdd_invar_vars_greater (Suc v') ?b\n  b1 = robdd_var i l v r\n  b2 = robdd_var i' l' v' r'\n  (b1_l, b1_r, v'', b2_l, b2_r) = robdd_apply_next b1 b2\n  robdd_invar_ext bs1 n1 b1\n  robdd_invar_ext bs2 n2 b2\n  v' < v", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<lbrakk>robdd_invar_vars_greater (Suc v) ?b; Suc v' \\<le> Suc v\\<rbrakk>\n  \\<Longrightarrow> robdd_invar_vars_greater (Suc v') ?b\n  b1 = robdd_var i l v r\n  b2 = robdd_var i' l' v' r'\n  (b1_l, b1_r, v'', b2_l, b2_r) = robdd_apply_next b1 b2\n  robdd_invar_ext bs1 n1 b1\n  robdd_invar_ext bs2 n2 b2\n  v' < v\n\ngoal (1 subgoal):\n 1. robdd_\\<alpha> b1_l =\n    (\\<lambda>a. robdd_\\<alpha> b1 (a(v'' := True))) \\<and>\n    robdd_\\<alpha> b1_r =\n    (\\<lambda>a. robdd_\\<alpha> b1 (a(v'' := False))) \\<and>\n    robdd_\\<alpha> b2_l =\n    (\\<lambda>a. robdd_\\<alpha> b2 (a(v'' := True))) \\<and>\n    robdd_\\<alpha> b2_r =\n    (\\<lambda>a. robdd_\\<alpha> b2 (a(v'' := False))) \\<and>\n    robdd_invar_ext bs1 (Suc v'') b1_l \\<and>\n    robdd_invar_ext bs1 (Suc v'') b1_r \\<and>\n    robdd_invar_ext bs2 (Suc v'') b2_l \\<and>\n    robdd_invar_ext bs2 (Suc v'') b2_r \\<and>\n    b1_l \\<in> subrobdds b1 \\<and>\n    b2_l \\<in> subrobdds b2 \\<and>\n    b1_r \\<in> subrobdds b1 \\<and>\n    b2_r \\<in> subrobdds b2 \\<and>\n    robdd_get_min_var b1 b2 = v'' \\<and>\n    (\\<not> (robdd_is_leaf b1 \\<and> robdd_is_leaf b2) \\<longrightarrow>\n     size_robdd b1_l + size_robdd b2_l\n     < size_robdd b1 + size_robdd b2) \\<and>\n    (\\<not> (robdd_is_leaf b1 \\<and> robdd_is_leaf b2) \\<longrightarrow>\n     size_robdd b1_r + size_robdd b2_r < size_robdd b1 + size_robdd b2)", "apply (simp add: fun_eq_iff)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>b.\n                robdd_invar_vars_greater (Suc v) b \\<Longrightarrow>\n                robdd_invar_vars_greater (Suc v') b;\n     b1 = robdd_var i l v r; b2 = robdd_var i' l' v' r';\n     b1_l = robdd_var i l v r \\<and>\n     b1_r = robdd_var i l v r \\<and>\n     v'' = v' \\<and> b2_l = l' \\<and> b2_r = r';\n     robdd_var i l v r \\<in> subrobdds_set bs1 \\<and>\n     \\<not> robdd_equiv l r \\<and>\n     n1 \\<le> v \\<and>\n     robdd_invar_ext bs1 (Suc v) l \\<and> robdd_invar_ext bs1 (Suc v) r;\n     robdd_var i' l' v' r' \\<in> subrobdds_set bs2 \\<and>\n     \\<not> robdd_equiv l' r' \\<and>\n     n2 \\<le> v' \\<and>\n     robdd_invar_ext bs2 (Suc v') l' \\<and> robdd_invar_ext bs2 (Suc v') r';\n     v' < v\\<rbrakk>\n    \\<Longrightarrow> (\\<forall>x.\n                          (x v \\<longrightarrow>\n                           robdd_\\<alpha> l x =\n                           robdd_\\<alpha> l (x(v' := True))) \\<and>\n                          (\\<not> x v \\<longrightarrow>\n                           robdd_\\<alpha> r x =\n                           robdd_\\<alpha> r (x(v' := True)))) \\<and>\n                      (\\<forall>x.\n                          (x v \\<longrightarrow>\n                           robdd_\\<alpha> l x =\n                           robdd_\\<alpha> l (x(v' := False))) \\<and>\n                          (\\<not> x v \\<longrightarrow>\n                           robdd_\\<alpha> r x =\n                           robdd_\\<alpha> r (x(v' := False)))) \\<and>\n                      (\\<forall>x.\n                          robdd_\\<alpha> l' x =\n                          robdd_\\<alpha> l' (x(v' := True))) \\<and>\n                      (\\<forall>x.\n                          robdd_\\<alpha> r' x =\n                          robdd_\\<alpha> r' (x(v' := False)))", "apply (intro allI conjI impI robdd_\\<alpha>_invar_greater [of \"Suc v''\"])"], ["proof (prove)\ngoal (12 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>\\<And>b.\n                   robdd_invar_vars_greater (Suc v) b \\<Longrightarrow>\n                   robdd_invar_vars_greater (Suc v') b;\n        b1 = robdd_var i l v r; b2 = robdd_var i' l' v' r';\n        b1_l = robdd_var i l v r \\<and>\n        b1_r = robdd_var i l v r \\<and>\n        v'' = v' \\<and> b2_l = l' \\<and> b2_r = r';\n        robdd_var i l v r \\<in> subrobdds_set bs1 \\<and>\n        \\<not> robdd_equiv l r \\<and>\n        n1 \\<le> v \\<and>\n        robdd_invar_ext bs1 (Suc v) l \\<and> robdd_invar_ext bs1 (Suc v) r;\n        robdd_var i' l' v' r' \\<in> subrobdds_set bs2 \\<and>\n        \\<not> robdd_equiv l' r' \\<and>\n        n2 \\<le> v' \\<and>\n        robdd_invar_ext bs2 (Suc v') l' \\<and>\n        robdd_invar_ext bs2 (Suc v') r';\n        v' < v; x v\\<rbrakk>\n       \\<Longrightarrow> robdd_invar_vars_greater (Suc v'') l\n 2. \\<And>x va.\n       \\<lbrakk>\\<And>b.\n                   robdd_invar_vars_greater (Suc v) b \\<Longrightarrow>\n                   robdd_invar_vars_greater (Suc v') b;\n        b1 = robdd_var i l v r; b2 = robdd_var i' l' v' r';\n        b1_l = robdd_var i l v r \\<and>\n        b1_r = robdd_var i l v r \\<and>\n        v'' = v' \\<and> b2_l = l' \\<and> b2_r = r';\n        robdd_var i l v r \\<in> subrobdds_set bs1 \\<and>\n        \\<not> robdd_equiv l r \\<and>\n        n1 \\<le> v \\<and>\n        robdd_invar_ext bs1 (Suc v) l \\<and> robdd_invar_ext bs1 (Suc v) r;\n        robdd_var i' l' v' r' \\<in> subrobdds_set bs2 \\<and>\n        \\<not> robdd_equiv l' r' \\<and>\n        n2 \\<le> v' \\<and>\n        robdd_invar_ext bs2 (Suc v') l' \\<and>\n        robdd_invar_ext bs2 (Suc v') r';\n        v' < v; x v; Suc v'' \\<le> va\\<rbrakk>\n       \\<Longrightarrow> x va = (x(v' := True)) va\n 3. \\<And>x.\n       \\<lbrakk>\\<And>b.\n                   robdd_invar_vars_greater (Suc v) b \\<Longrightarrow>\n                   robdd_invar_vars_greater (Suc v') b;\n        b1 = robdd_var i l v r; b2 = robdd_var i' l' v' r';\n        b1_l = robdd_var i l v r \\<and>\n        b1_r = robdd_var i l v r \\<and>\n        v'' = v' \\<and> b2_l = l' \\<and> b2_r = r';\n        robdd_var i l v r \\<in> subrobdds_set bs1 \\<and>\n        \\<not> robdd_equiv l r \\<and>\n        n1 \\<le> v \\<and>\n        robdd_invar_ext bs1 (Suc v) l \\<and> robdd_invar_ext bs1 (Suc v) r;\n        robdd_var i' l' v' r' \\<in> subrobdds_set bs2 \\<and>\n        \\<not> robdd_equiv l' r' \\<and>\n        n2 \\<le> v' \\<and>\n        robdd_invar_ext bs2 (Suc v') l' \\<and>\n        robdd_invar_ext bs2 (Suc v') r';\n        v' < v; \\<not> x v\\<rbrakk>\n       \\<Longrightarrow> robdd_invar_vars_greater (Suc v'') r\n 4. \\<And>x va.\n       \\<lbrakk>\\<And>b.\n                   robdd_invar_vars_greater (Suc v) b \\<Longrightarrow>\n                   robdd_invar_vars_greater (Suc v') b;\n        b1 = robdd_var i l v r; b2 = robdd_var i' l' v' r';\n        b1_l = robdd_var i l v r \\<and>\n        b1_r = robdd_var i l v r \\<and>\n        v'' = v' \\<and> b2_l = l' \\<and> b2_r = r';\n        robdd_var i l v r \\<in> subrobdds_set bs1 \\<and>\n        \\<not> robdd_equiv l r \\<and>\n        n1 \\<le> v \\<and>\n        robdd_invar_ext bs1 (Suc v) l \\<and> robdd_invar_ext bs1 (Suc v) r;\n        robdd_var i' l' v' r' \\<in> subrobdds_set bs2 \\<and>\n        \\<not> robdd_equiv l' r' \\<and>\n        n2 \\<le> v' \\<and>\n        robdd_invar_ext bs2 (Suc v') l' \\<and>\n        robdd_invar_ext bs2 (Suc v') r';\n        v' < v; \\<not> x v; Suc v'' \\<le> va\\<rbrakk>\n       \\<Longrightarrow> x va = (x(v' := True)) va\n 5. \\<And>x.\n       \\<lbrakk>\\<And>b.\n                   robdd_invar_vars_greater (Suc v) b \\<Longrightarrow>\n                   robdd_invar_vars_greater (Suc v') b;\n        b1 = robdd_var i l v r; b2 = robdd_var i' l' v' r';\n        b1_l = robdd_var i l v r \\<and>\n        b1_r = robdd_var i l v r \\<and>\n        v'' = v' \\<and> b2_l = l' \\<and> b2_r = r';\n        robdd_var i l v r \\<in> subrobdds_set bs1 \\<and>\n        \\<not> robdd_equiv l r \\<and>\n        n1 \\<le> v \\<and>\n        robdd_invar_ext bs1 (Suc v) l \\<and> robdd_invar_ext bs1 (Suc v) r;\n        robdd_var i' l' v' r' \\<in> subrobdds_set bs2 \\<and>\n        \\<not> robdd_equiv l' r' \\<and>\n        n2 \\<le> v' \\<and>\n        robdd_invar_ext bs2 (Suc v') l' \\<and>\n        robdd_invar_ext bs2 (Suc v') r';\n        v' < v; x v\\<rbrakk>\n       \\<Longrightarrow> robdd_invar_vars_greater (Suc v'') l\n 6. \\<And>x va.\n       \\<lbrakk>\\<And>b.\n                   robdd_invar_vars_greater (Suc v) b \\<Longrightarrow>\n                   robdd_invar_vars_greater (Suc v') b;\n        b1 = robdd_var i l v r; b2 = robdd_var i' l' v' r';\n        b1_l = robdd_var i l v r \\<and>\n        b1_r = robdd_var i l v r \\<and>\n        v'' = v' \\<and> b2_l = l' \\<and> b2_r = r';\n        robdd_var i l v r \\<in> subrobdds_set bs1 \\<and>\n        \\<not> robdd_equiv l r \\<and>\n        n1 \\<le> v \\<and>\n        robdd_invar_ext bs1 (Suc v) l \\<and> robdd_invar_ext bs1 (Suc v) r;\n        robdd_var i' l' v' r' \\<in> subrobdds_set bs2 \\<and>\n        \\<not> robdd_equiv l' r' \\<and>\n        n2 \\<le> v' \\<and>\n        robdd_invar_ext bs2 (Suc v') l' \\<and>\n        robdd_invar_ext bs2 (Suc v') r';\n        v' < v; x v; Suc v'' \\<le> va\\<rbrakk>\n       \\<Longrightarrow> x va = (x(v' := False)) va\n 7. \\<And>x.\n       \\<lbrakk>\\<And>b.\n                   robdd_invar_vars_greater (Suc v) b \\<Longrightarrow>\n                   robdd_invar_vars_greater (Suc v') b;\n        b1 = robdd_var i l v r; b2 = robdd_var i' l' v' r';\n        b1_l = robdd_var i l v r \\<and>\n        b1_r = robdd_var i l v r \\<and>\n        v'' = v' \\<and> b2_l = l' \\<and> b2_r = r';\n        robdd_var i l v r \\<in> subrobdds_set bs1 \\<and>\n        \\<not> robdd_equiv l r \\<and>\n        n1 \\<le> v \\<and>\n        robdd_invar_ext bs1 (Suc v) l \\<and> robdd_invar_ext bs1 (Suc v) r;\n        robdd_var i' l' v' r' \\<in> subrobdds_set bs2 \\<and>\n        \\<not> robdd_equiv l' r' \\<and>\n        n2 \\<le> v' \\<and>\n        robdd_invar_ext bs2 (Suc v') l' \\<and>\n        robdd_invar_ext bs2 (Suc v') r';\n        v' < v; \\<not> x v\\<rbrakk>\n       \\<Longrightarrow> robdd_invar_vars_greater (Suc v'') r\n 8. \\<And>x va.\n       \\<lbrakk>\\<And>b.\n                   robdd_invar_vars_greater (Suc v) b \\<Longrightarrow>\n                   robdd_invar_vars_greater (Suc v') b;\n        b1 = robdd_var i l v r; b2 = robdd_var i' l' v' r';\n        b1_l = robdd_var i l v r \\<and>\n        b1_r = robdd_var i l v r \\<and>\n        v'' = v' \\<and> b2_l = l' \\<and> b2_r = r';\n        robdd_var i l v r \\<in> subrobdds_set bs1 \\<and>\n        \\<not> robdd_equiv l r \\<and>\n        n1 \\<le> v \\<and>\n        robdd_invar_ext bs1 (Suc v) l \\<and> robdd_invar_ext bs1 (Suc v) r;\n        robdd_var i' l' v' r' \\<in> subrobdds_set bs2 \\<and>\n        \\<not> robdd_equiv l' r' \\<and>\n        n2 \\<le> v' \\<and>\n        robdd_invar_ext bs2 (Suc v') l' \\<and>\n        robdd_invar_ext bs2 (Suc v') r';\n        v' < v; \\<not> x v; Suc v'' \\<le> va\\<rbrakk>\n       \\<Longrightarrow> x va = (x(v' := False)) va\n 9. \\<And>x.\n       \\<lbrakk>\\<And>b.\n                   robdd_invar_vars_greater (Suc v) b \\<Longrightarrow>\n                   robdd_invar_vars_greater (Suc v') b;\n        b1 = robdd_var i l v r; b2 = robdd_var i' l' v' r';\n        b1_l = robdd_var i l v r \\<and>\n        b1_r = robdd_var i l v r \\<and>\n        v'' = v' \\<and> b2_l = l' \\<and> b2_r = r';\n        robdd_var i l v r \\<in> subrobdds_set bs1 \\<and>\n        \\<not> robdd_equiv l r \\<and>\n        n1 \\<le> v \\<and>\n        robdd_invar_ext bs1 (Suc v) l \\<and> robdd_invar_ext bs1 (Suc v) r;\n        robdd_var i' l' v' r' \\<in> subrobdds_set bs2 \\<and>\n        \\<not> robdd_equiv l' r' \\<and>\n        n2 \\<le> v' \\<and>\n        robdd_invar_ext bs2 (Suc v') l' \\<and>\n        robdd_invar_ext bs2 (Suc v') r';\n        v' < v\\<rbrakk>\n       \\<Longrightarrow> robdd_invar_vars_greater (Suc v'') l'\n 10. \\<And>x va.\n        \\<lbrakk>\\<And>b.\n                    robdd_invar_vars_greater (Suc v) b \\<Longrightarrow>\n                    robdd_invar_vars_greater (Suc v') b;\n         b1 = robdd_var i l v r; b2 = robdd_var i' l' v' r';\n         b1_l = robdd_var i l v r \\<and>\n         b1_r = robdd_var i l v r \\<and>\n         v'' = v' \\<and> b2_l = l' \\<and> b2_r = r';\n         robdd_var i l v r \\<in> subrobdds_set bs1 \\<and>\n         \\<not> robdd_equiv l r \\<and>\n         n1 \\<le> v \\<and>\n         robdd_invar_ext bs1 (Suc v) l \\<and> robdd_invar_ext bs1 (Suc v) r;\n         robdd_var i' l' v' r' \\<in> subrobdds_set bs2 \\<and>\n         \\<not> robdd_equiv l' r' \\<and>\n         n2 \\<le> v' \\<and>\n         robdd_invar_ext bs2 (Suc v') l' \\<and>\n         robdd_invar_ext bs2 (Suc v') r';\n         v' < v; Suc v'' \\<le> va\\<rbrakk>\n        \\<Longrightarrow> x va = (x(v' := True)) va\nA total of 12 subgoals...", "apply (simp_all add: robdd_invar_ext_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  robdd_\\<alpha> b1_l =\n  (\\<lambda>a. robdd_\\<alpha> b1 (a(v'' := True))) \\<and>\n  robdd_\\<alpha> b1_r =\n  (\\<lambda>a. robdd_\\<alpha> b1 (a(v'' := False))) \\<and>\n  robdd_\\<alpha> b2_l =\n  (\\<lambda>a. robdd_\\<alpha> b2 (a(v'' := True))) \\<and>\n  robdd_\\<alpha> b2_r =\n  (\\<lambda>a. robdd_\\<alpha> b2 (a(v'' := False))) \\<and>\n  robdd_invar_ext bs1 (Suc v'') b1_l \\<and>\n  robdd_invar_ext bs1 (Suc v'') b1_r \\<and>\n  robdd_invar_ext bs2 (Suc v'') b2_l \\<and>\n  robdd_invar_ext bs2 (Suc v'') b2_r \\<and>\n  b1_l \\<in> subrobdds b1 \\<and>\n  b2_l \\<in> subrobdds b2 \\<and>\n  b1_r \\<in> subrobdds b1 \\<and>\n  b2_r \\<in> subrobdds b2 \\<and>\n  robdd_get_min_var b1 b2 = v'' \\<and>\n  (\\<not> (robdd_is_leaf b1 \\<and> robdd_is_leaf b2) \\<longrightarrow>\n   size_robdd b1_l + size_robdd b2_l < size_robdd b1 + size_robdd b2) \\<and>\n  (\\<not> (robdd_is_leaf b1 \\<and> robdd_is_leaf b2) \\<longrightarrow>\n   size_robdd b1_r + size_robdd b2_r < size_robdd b1 + size_robdd b2)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  robdd_\\<alpha> b1_l =\n  (\\<lambda>a. robdd_\\<alpha> b1 (a(v'' := True))) \\<and>\n  robdd_\\<alpha> b1_r =\n  (\\<lambda>a. robdd_\\<alpha> b1 (a(v'' := False))) \\<and>\n  robdd_\\<alpha> b2_l =\n  (\\<lambda>a. robdd_\\<alpha> b2 (a(v'' := True))) \\<and>\n  robdd_\\<alpha> b2_r =\n  (\\<lambda>a. robdd_\\<alpha> b2 (a(v'' := False))) \\<and>\n  robdd_invar_ext bs1 (Suc v'') b1_l \\<and>\n  robdd_invar_ext bs1 (Suc v'') b1_r \\<and>\n  robdd_invar_ext bs2 (Suc v'') b2_l \\<and>\n  robdd_invar_ext bs2 (Suc v'') b2_r \\<and>\n  b1_l \\<in> subrobdds b1 \\<and>\n  b2_l \\<in> subrobdds b2 \\<and>\n  b1_r \\<in> subrobdds b1 \\<and>\n  b2_r \\<in> subrobdds b2 \\<and>\n  robdd_get_min_var b1 b2 = v'' \\<and>\n  (\\<not> (robdd_is_leaf b1 \\<and> robdd_is_leaf b2) \\<longrightarrow>\n   size_robdd b1_l + size_robdd b2_l < size_robdd b1 + size_robdd b2) \\<and>\n  (\\<not> (robdd_is_leaf b1 \\<and> robdd_is_leaf b2) \\<longrightarrow>\n   size_robdd b1_r + size_robdd b2_r < size_robdd b1 + size_robdd b2)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  robdd_\\<alpha> b1_l =\n  (\\<lambda>a. robdd_\\<alpha> b1 (a(v'' := True))) \\<and>\n  robdd_\\<alpha> b1_r =\n  (\\<lambda>a. robdd_\\<alpha> b1 (a(v'' := False))) \\<and>\n  robdd_\\<alpha> b2_l =\n  (\\<lambda>a. robdd_\\<alpha> b2 (a(v'' := True))) \\<and>\n  robdd_\\<alpha> b2_r =\n  (\\<lambda>a. robdd_\\<alpha> b2 (a(v'' := False))) \\<and>\n  robdd_invar_ext bs1 (Suc v'') b1_l \\<and>\n  robdd_invar_ext bs1 (Suc v'') b1_r \\<and>\n  robdd_invar_ext bs2 (Suc v'') b2_l \\<and>\n  robdd_invar_ext bs2 (Suc v'') b2_r \\<and>\n  b1_l \\<in> subrobdds b1 \\<and>\n  b2_l \\<in> subrobdds b2 \\<and>\n  b1_r \\<in> subrobdds b1 \\<and>\n  b2_r \\<in> subrobdds b2 \\<and>\n  robdd_get_min_var b1 b2 = v'' \\<and>\n  (\\<not> (robdd_is_leaf b1 \\<and> robdd_is_leaf b2) \\<longrightarrow>\n   size_robdd b1_l + size_robdd b2_l < size_robdd b1 + size_robdd b2) \\<and>\n  (\\<not> (robdd_is_leaf b1 \\<and> robdd_is_leaf b2) \\<longrightarrow>\n   size_robdd b1_r + size_robdd b2_r < size_robdd b1 + size_robdd b2)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  robdd_\\<alpha> b1_l =\n  (\\<lambda>a. robdd_\\<alpha> b1 (a(v'' := True))) \\<and>\n  robdd_\\<alpha> b1_r =\n  (\\<lambda>a. robdd_\\<alpha> b1 (a(v'' := False))) \\<and>\n  robdd_\\<alpha> b2_l =\n  (\\<lambda>a. robdd_\\<alpha> b2 (a(v'' := True))) \\<and>\n  robdd_\\<alpha> b2_r =\n  (\\<lambda>a. robdd_\\<alpha> b2 (a(v'' := False))) \\<and>\n  robdd_invar_ext bs1 (Suc v'') b1_l \\<and>\n  robdd_invar_ext bs1 (Suc v'') b1_r \\<and>\n  robdd_invar_ext bs2 (Suc v'') b2_l \\<and>\n  robdd_invar_ext bs2 (Suc v'') b2_r \\<and>\n  b1_l \\<in> subrobdds b1 \\<and>\n  b2_l \\<in> subrobdds b2 \\<and>\n  b1_r \\<in> subrobdds b1 \\<and>\n  b2_r \\<in> subrobdds b2 \\<and>\n  robdd_get_min_var b1 b2 = v'' \\<and>\n  (\\<not> (robdd_is_leaf b1 \\<and> robdd_is_leaf b2) \\<longrightarrow>\n   size_robdd b1_l + size_robdd b2_l < size_robdd b1 + size_robdd b2) \\<and>\n  (\\<not> (robdd_is_leaf b1 \\<and> robdd_is_leaf b2) \\<longrightarrow>\n   size_robdd b1_r + size_robdd b2_r < size_robdd b1 + size_robdd b2)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  robdd_\\<alpha> b1_l =\n  (\\<lambda>a. robdd_\\<alpha> b1 (a(v'' := True))) \\<and>\n  robdd_\\<alpha> b1_r =\n  (\\<lambda>a. robdd_\\<alpha> b1 (a(v'' := False))) \\<and>\n  robdd_\\<alpha> b2_l =\n  (\\<lambda>a. robdd_\\<alpha> b2 (a(v'' := True))) \\<and>\n  robdd_\\<alpha> b2_r =\n  (\\<lambda>a. robdd_\\<alpha> b2 (a(v'' := False))) \\<and>\n  robdd_invar_ext bs1 (Suc v'') b1_l \\<and>\n  robdd_invar_ext bs1 (Suc v'') b1_r \\<and>\n  robdd_invar_ext bs2 (Suc v'') b2_l \\<and>\n  robdd_invar_ext bs2 (Suc v'') b2_r \\<and>\n  b1_l \\<in> subrobdds b1 \\<and>\n  b2_l \\<in> subrobdds b2 \\<and>\n  b1_r \\<in> subrobdds b1 \\<and>\n  b2_r \\<in> subrobdds b2 \\<and>\n  robdd_get_min_var b1 b2 = v'' \\<and>\n  (\\<not> (robdd_is_leaf b1 \\<and> robdd_is_leaf b2) \\<longrightarrow>\n   size_robdd b1_l + size_robdd b2_l < size_robdd b1 + size_robdd b2) \\<and>\n  (\\<not> (robdd_is_leaf b1 \\<and> robdd_is_leaf b2) \\<longrightarrow>\n   size_robdd b1_r + size_robdd b2_r < size_robdd b1 + size_robdd b2)\n\ngoal (15 subgoals):\n 1. robdd_\\<alpha> b1_l = (\\<lambda>a. robdd_\\<alpha> b1 (a(v'' := True)))\n 2. robdd_\\<alpha> b1_r = (\\<lambda>a. robdd_\\<alpha> b1 (a(v'' := False)))\n 3. robdd_\\<alpha> b2_l = (\\<lambda>a. robdd_\\<alpha> b2 (a(v'' := True)))\n 4. robdd_\\<alpha> b2_r = (\\<lambda>a. robdd_\\<alpha> b2 (a(v'' := False)))\n 5. robdd_invar_ext bs1 (Suc v'') b1_l\n 6. robdd_invar_ext bs1 (Suc v'') b1_r\n 7. robdd_invar_ext bs2 (Suc v'') b2_l\n 8. robdd_invar_ext bs2 (Suc v'') b2_r\n 9. b1_l \\<in> subrobdds b1\n 10. b2_l \\<in> subrobdds b2\nA total of 15 subgoals...", "thus ?T1 ?T2 ?T3 ?T4 ?T5 ?T6 ?T7 ?T8 ?T9 ?T10 ?T11 ?T12 ?T13 ?T14 ?T15"], ["proof (prove)\nusing this:\n  robdd_\\<alpha> b1_l =\n  (\\<lambda>a. robdd_\\<alpha> b1 (a(v'' := True))) \\<and>\n  robdd_\\<alpha> b1_r =\n  (\\<lambda>a. robdd_\\<alpha> b1 (a(v'' := False))) \\<and>\n  robdd_\\<alpha> b2_l =\n  (\\<lambda>a. robdd_\\<alpha> b2 (a(v'' := True))) \\<and>\n  robdd_\\<alpha> b2_r =\n  (\\<lambda>a. robdd_\\<alpha> b2 (a(v'' := False))) \\<and>\n  robdd_invar_ext bs1 (Suc v'') b1_l \\<and>\n  robdd_invar_ext bs1 (Suc v'') b1_r \\<and>\n  robdd_invar_ext bs2 (Suc v'') b2_l \\<and>\n  robdd_invar_ext bs2 (Suc v'') b2_r \\<and>\n  b1_l \\<in> subrobdds b1 \\<and>\n  b2_l \\<in> subrobdds b2 \\<and>\n  b1_r \\<in> subrobdds b1 \\<and>\n  b2_r \\<in> subrobdds b2 \\<and>\n  robdd_get_min_var b1 b2 = v'' \\<and>\n  (\\<not> (robdd_is_leaf b1 \\<and> robdd_is_leaf b2) \\<longrightarrow>\n   size_robdd b1_l + size_robdd b2_l < size_robdd b1 + size_robdd b2) \\<and>\n  (\\<not> (robdd_is_leaf b1 \\<and> robdd_is_leaf b2) \\<longrightarrow>\n   size_robdd b1_r + size_robdd b2_r < size_robdd b1 + size_robdd b2)\n\ngoal (1 subgoal):\n 1. ((robdd_\\<alpha> b1_l =\n      (\\<lambda>a. robdd_\\<alpha> b1 (a(v'' := True))) &&&\n      robdd_\\<alpha> b1_r =\n      (\\<lambda>a. robdd_\\<alpha> b1 (a(v'' := False))) &&&\n      robdd_\\<alpha> b2_l =\n      (\\<lambda>a. robdd_\\<alpha> b2 (a(v'' := True)))) &&&\n     (robdd_\\<alpha> b2_r =\n      (\\<lambda>a. robdd_\\<alpha> b2 (a(v'' := False))) &&&\n      robdd_invar_ext bs1 (Suc v'') b1_l) &&&\n     robdd_invar_ext bs1 (Suc v'') b1_r &&&\n     robdd_invar_ext bs2 (Suc v'') b2_l) &&&\n    ((robdd_invar_ext bs2 (Suc v'') b2_r &&& b1_l \\<in> subrobdds b1) &&&\n     b2_l \\<in> subrobdds b2 &&& b1_r \\<in> subrobdds b1) &&&\n    (b2_r \\<in> subrobdds b2 &&& robdd_get_min_var b1 b2 = v'') &&&\n    \\<not> (robdd_is_leaf b1 \\<and> robdd_is_leaf b2) \\<longrightarrow>\n    size_robdd b1_l + size_robdd b2_l < size_robdd b1 + size_robdd b2 &&&\n    \\<not> (robdd_is_leaf b1 \\<and> robdd_is_leaf b2) \\<longrightarrow>\n    size_robdd b1_r + size_robdd b2_r < size_robdd b1 + size_robdd b2", "by auto"], ["proof (state)\nthis:\n  robdd_\\<alpha> b1_l = (\\<lambda>a. robdd_\\<alpha> b1 (a(v'' := True)))\n  robdd_\\<alpha> b1_r = (\\<lambda>a. robdd_\\<alpha> b1 (a(v'' := False)))\n  robdd_\\<alpha> b2_l = (\\<lambda>a. robdd_\\<alpha> b2 (a(v'' := True)))\n  robdd_\\<alpha> b2_r = (\\<lambda>a. robdd_\\<alpha> b2 (a(v'' := False)))\n  robdd_invar_ext bs1 (Suc v'') b1_l\n  robdd_invar_ext bs1 (Suc v'') b1_r\n  robdd_invar_ext bs2 (Suc v'') b2_l\n  robdd_invar_ext bs2 (Suc v'') b2_r\n  b1_l \\<in> subrobdds b1\n  b2_l \\<in> subrobdds b2\n  b1_r \\<in> subrobdds b1\n  b2_r \\<in> subrobdds b2\n  robdd_get_min_var b1 b2 = v''\n  \\<not> (robdd_is_leaf b1 \\<and> robdd_is_leaf b2) \\<longrightarrow>\n  size_robdd b1_l + size_robdd b2_l < size_robdd b1 + size_robdd b2\n  \\<not> (robdd_is_leaf b1 \\<and> robdd_is_leaf b2) \\<longrightarrow>\n  size_robdd b1_r + size_robdd b2_r < size_robdd b1 + size_robdd b2\n\ngoal:\nNo subgoals!", "qed"], ["", "function robdd_apply where\n    \"robdd_apply apply_map rev_map bop b1 b2 = \n      (case (bool_op_extend bop (robdd_to_bool b1) (robdd_to_bool b2)) of \n         Some f \\<Rightarrow> (robdd_leaf f, apply_map, rev_map)\n       | None \\<Rightarrow> (case c_lookup (robdd_get_id b1, robdd_get_id b2) apply_map of\n            Some b3 \\<Rightarrow> (b3, apply_map, rev_map)\n          | None \\<Rightarrow> (let (l1, r1, var, l2, r2) = robdd_apply_next b1 b2 in \n                     let (l, apply_map, rev_map) = robdd_apply apply_map rev_map bop l1 l2 in\n                     let (r, apply_map, rev_map) = robdd_apply apply_map rev_map bop r1 r2 in\n                     let (b, rev_map) = robdd_construct rev_map l var r in\n                     let apply_map = c_update (robdd_get_id b1, robdd_get_id b2) b apply_map in\n                     (b, apply_map, rev_map))))\""], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>P x.\n       (\\<And>apply_map rev_map bop b1 b2.\n           x = (apply_map, rev_map, bop, b1, b2) \\<Longrightarrow>\n           P) \\<Longrightarrow>\n       P\n 2. \\<And>apply_map rev_map bop b1 b2 apply_mapa rev_mapa bopa b1a b2a.\n       (apply_map, rev_map, bop, b1, b2) =\n       (apply_mapa, rev_mapa, bopa, b1a, b2a) \\<Longrightarrow>\n       (case bool_op_extend bop (robdd_to_bool b1) (robdd_to_bool b2) of\n        None \\<Rightarrow>\n          case c_lookup (robdd_get_id b1, robdd_get_id b2) apply_map of\n          None \\<Rightarrow>\n            let (l1, r1, var, l2, r2) = robdd_apply_next b1 b2;\n                (l, apply_map, rev_map) =\n                  robdd_apply_sumC (apply_map, rev_map, bop, l1, l2);\n                (r, apply_map, rev_map) =\n                  robdd_apply_sumC (apply_map, rev_map, bop, r1, r2);\n                (b, rev_map) = robdd_construct rev_map l var r;\n                apply_map =\n                  c_update (robdd_get_id b1, robdd_get_id b2) b apply_map\n            in (b, apply_map, rev_map)\n          | Some b3 \\<Rightarrow> (b3, apply_map, rev_map)\n        | Some f \\<Rightarrow> (robdd_leaf f, apply_map, rev_map)) =\n       (case bool_op_extend bopa (robdd_to_bool b1a) (robdd_to_bool b2a) of\n        None \\<Rightarrow>\n          case c_lookup (robdd_get_id b1a, robdd_get_id b2a) apply_mapa of\n          None \\<Rightarrow>\n            let (l1, r1, var, l2, r2) = robdd_apply_next b1a b2a;\n                (l, apply_map, rev_map) =\n                  robdd_apply_sumC (apply_mapa, rev_mapa, bopa, l1, l2);\n                (r, apply_map, rev_map) =\n                  robdd_apply_sumC (apply_map, rev_map, bopa, r1, r2);\n                (b, rev_map) = robdd_construct rev_map l var r;\n                apply_map =\n                  c_update (robdd_get_id b1a, robdd_get_id b2a) b apply_map\n            in (b, apply_map, rev_map)\n          | Some b3 \\<Rightarrow> (b3, apply_mapa, rev_mapa)\n        | Some f \\<Rightarrow> (robdd_leaf f, apply_mapa, rev_mapa))", "by pat_completeness auto"], ["", "termination"], ["proof (prove)\ngoal (1 subgoal):\n 1. All robdd_apply_dom", "apply (relation \"measure (\\<lambda>(_, _, _, b1, b2). size_robdd b1 + size_robdd b2)\")"], ["proof (prove)\ngoal (3 subgoals):\n 1. wf (measure\n         (\\<lambda>(uu_, uu_, uu_, b1, b2). size_robdd b1 + size_robdd b2))\n 2. \\<And>apply_map rev_map bop b1 b2 x xa y xb ya xc yb xd yc.\n       \\<lbrakk>bool_op_extend bop (robdd_to_bool b1) (robdd_to_bool b2) =\n                None;\n        c_lookup (robdd_get_id b1, robdd_get_id b2) apply_map = None;\n        x = robdd_apply_next b1 b2; (xa, y) = x; (xb, ya) = y;\n        (xc, yb) = ya; (xd, yc) = yb\\<rbrakk>\n       \\<Longrightarrow> ((apply_map, rev_map, bop, xa, xd), apply_map,\n                          rev_map, bop, b1, b2)\n                         \\<in> measure\n                                (\\<lambda>(uu_, uu_, uu_, b1, b2).\n                                    size_robdd b1 + size_robdd b2)\n 3. \\<And>apply_map rev_map bop b1 b2 x xa y xb ya xc yb xd yc xe xf yd xg\n       ye.\n       \\<lbrakk>bool_op_extend bop (robdd_to_bool b1) (robdd_to_bool b2) =\n                None;\n        c_lookup (robdd_get_id b1, robdd_get_id b2) apply_map = None;\n        x = robdd_apply_next b1 b2; (xa, y) = x; (xb, ya) = y;\n        (xc, yb) = ya; (xd, yc) = yb;\n        xe = robdd_apply apply_map rev_map bop xa xd; (xf, yd) = xe;\n        (xg, ye) = yd;\n        robdd_apply_dom (apply_map, rev_map, bop, xa, xd)\\<rbrakk>\n       \\<Longrightarrow> ((xg, ye, bop, xb, yc), apply_map, rev_map, bop,\n                          b1, b2)\n                         \\<in> measure\n                                (\\<lambda>(uu_, uu_, uu_, b1, b2).\n                                    size_robdd b1 + size_robdd b2)", "apply simp"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>apply_map rev_map bop b1 b2 x xa y xb ya xc yb xd yc.\n       \\<lbrakk>bool_op_extend bop (robdd_to_bool b1) (robdd_to_bool b2) =\n                None;\n        c_lookup (robdd_get_id b1, robdd_get_id b2) apply_map = None;\n        x = robdd_apply_next b1 b2; (xa, y) = x; (xb, ya) = y;\n        (xc, yb) = ya; (xd, yc) = yb\\<rbrakk>\n       \\<Longrightarrow> ((apply_map, rev_map, bop, xa, xd), apply_map,\n                          rev_map, bop, b1, b2)\n                         \\<in> measure\n                                (\\<lambda>(uu_, uu_, uu_, b1, b2).\n                                    size_robdd b1 + size_robdd b2)\n 2. \\<And>apply_map rev_map bop b1 b2 x xa y xb ya xc yb xd yc xe xf yd xg\n       ye.\n       \\<lbrakk>bool_op_extend bop (robdd_to_bool b1) (robdd_to_bool b2) =\n                None;\n        c_lookup (robdd_get_id b1, robdd_get_id b2) apply_map = None;\n        x = robdd_apply_next b1 b2; (xa, y) = x; (xb, ya) = y;\n        (xc, yb) = ya; (xd, yc) = yb;\n        xe = robdd_apply apply_map rev_map bop xa xd; (xf, yd) = xe;\n        (xg, ye) = yd;\n        robdd_apply_dom (apply_map, rev_map, bop, xa, xd)\\<rbrakk>\n       \\<Longrightarrow> ((xg, ye, bop, xb, yc), apply_map, rev_map, bop,\n                          b1, b2)\n                         \\<in> measure\n                                (\\<lambda>(uu_, uu_, uu_, b1, b2).\n                                    size_robdd b1 + size_robdd b2)", "apply (clarify, simp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>apply_map bop b1 b2 aa ab ac ad ba.\n       \\<lbrakk>bool_op_extend bop (robdd_to_bool b1) (robdd_to_bool b2) =\n                None;\n        c_lookup (robdd_get_id b1, robdd_get_id b2) apply_map = None;\n        (aa, ab, ac, ad, ba) = robdd_apply_next b1 b2\\<rbrakk>\n       \\<Longrightarrow> size_robdd aa + size_robdd ad\n                         < size_robdd b1 + size_robdd b2\n 2. \\<And>apply_map rev_map bop b1 b2 x xa y xb ya xc yb xd yc xe xf yd xg\n       ye.\n       \\<lbrakk>bool_op_extend bop (robdd_to_bool b1) (robdd_to_bool b2) =\n                None;\n        c_lookup (robdd_get_id b1, robdd_get_id b2) apply_map = None;\n        x = robdd_apply_next b1 b2; (xa, y) = x; (xb, ya) = y;\n        (xc, yb) = ya; (xd, yc) = yb;\n        xe = robdd_apply apply_map rev_map bop xa xd; (xf, yd) = xe;\n        (xg, ye) = yd;\n        robdd_apply_dom (apply_map, rev_map, bop, xa, xd)\\<rbrakk>\n       \\<Longrightarrow> ((xg, ye, bop, xb, yc), apply_map, rev_map, bop,\n                          b1, b2)\n                         \\<in> measure\n                                (\\<lambda>(uu_, uu_, uu_, b1, b2).\n                                    size_robdd b1 + size_robdd b2)", "defer"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>apply_map rev_map bop b1 b2 x xa y xb ya xc yb xd yc xe xf yd xg\n       ye.\n       \\<lbrakk>bool_op_extend bop (robdd_to_bool b1) (robdd_to_bool b2) =\n                None;\n        c_lookup (robdd_get_id b1, robdd_get_id b2) apply_map = None;\n        x = robdd_apply_next b1 b2; (xa, y) = x; (xb, ya) = y;\n        (xc, yb) = ya; (xd, yc) = yb;\n        xe = robdd_apply apply_map rev_map bop xa xd; (xf, yd) = xe;\n        (xg, ye) = yd;\n        robdd_apply_dom (apply_map, rev_map, bop, xa, xd)\\<rbrakk>\n       \\<Longrightarrow> ((xg, ye, bop, xb, yc), apply_map, rev_map, bop,\n                          b1, b2)\n                         \\<in> measure\n                                (\\<lambda>(uu_, uu_, uu_, b1, b2).\n                                    size_robdd b1 + size_robdd b2)\n 2. \\<And>apply_map bop b1 b2 aa ab ac ad ba.\n       \\<lbrakk>bool_op_extend bop (robdd_to_bool b1) (robdd_to_bool b2) =\n                None;\n        c_lookup (robdd_get_id b1, robdd_get_id b2) apply_map = None;\n        (aa, ab, ac, ad, ba) = robdd_apply_next b1 b2\\<rbrakk>\n       \\<Longrightarrow> size_robdd aa + size_robdd ad\n                         < size_robdd b1 + size_robdd b2", "apply (clarify, simp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>apply_map a b bop b1 b2 aa ab ac ad ba ak al am be.\n       \\<lbrakk>bool_op_extend bop (robdd_to_bool b1) (robdd_to_bool b2) =\n                None;\n        c_lookup (robdd_get_id b1, robdd_get_id b2) apply_map = None;\n        (aa, ab, ac, ad, ba) = robdd_apply_next b1 b2;\n        (ak, al, am, be) = robdd_apply apply_map (a, b) bop aa ad;\n        robdd_apply_dom (apply_map, (a, b), bop, aa, ad)\\<rbrakk>\n       \\<Longrightarrow> size_robdd ab + size_robdd ba\n                         < size_robdd b1 + size_robdd b2\n 2. \\<And>apply_map bop b1 b2 aa ab ac ad ba.\n       \\<lbrakk>bool_op_extend bop (robdd_to_bool b1) (robdd_to_bool b2) =\n                None;\n        c_lookup (robdd_get_id b1, robdd_get_id b2) apply_map = None;\n        (aa, ab, ac, ad, ba) = robdd_apply_next b1 b2\\<rbrakk>\n       \\<Longrightarrow> size_robdd aa + size_robdd ad\n                         < size_robdd b1 + size_robdd b2", "proof -"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>apply_map a b bop b1 b2 aa ab ac ad ba ak al am be.\n       \\<lbrakk>bool_op_extend bop (robdd_to_bool b1) (robdd_to_bool b2) =\n                None;\n        c_lookup (robdd_get_id b1, robdd_get_id b2) apply_map = None;\n        (aa, ab, ac, ad, ba) = robdd_apply_next b1 b2;\n        (ak, al, am, be) = robdd_apply apply_map (a, b) bop aa ad;\n        robdd_apply_dom (apply_map, (a, b), bop, aa, ad)\\<rbrakk>\n       \\<Longrightarrow> size_robdd ab + size_robdd ba\n                         < size_robdd b1 + size_robdd b2\n 2. \\<And>apply_map bop b1 b2 aa ab ac ad ba.\n       \\<lbrakk>bool_op_extend bop (robdd_to_bool b1) (robdd_to_bool b2) =\n                None;\n        c_lookup (robdd_get_id b1, robdd_get_id b2) apply_map = None;\n        (aa, ab, ac, ad, ba) = robdd_apply_next b1 b2\\<rbrakk>\n       \\<Longrightarrow> size_robdd aa + size_robdd ad\n                         < size_robdd b1 + size_robdd b2", "fix b1 b2 l1 l2 r1 r2 v bop"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>apply_map a b bop b1 b2 aa ab ac ad ba ak al am be.\n       \\<lbrakk>bool_op_extend bop (robdd_to_bool b1) (robdd_to_bool b2) =\n                None;\n        c_lookup (robdd_get_id b1, robdd_get_id b2) apply_map = None;\n        (aa, ab, ac, ad, ba) = robdd_apply_next b1 b2;\n        (ak, al, am, be) = robdd_apply apply_map (a, b) bop aa ad;\n        robdd_apply_dom (apply_map, (a, b), bop, aa, ad)\\<rbrakk>\n       \\<Longrightarrow> size_robdd ab + size_robdd ba\n                         < size_robdd b1 + size_robdd b2\n 2. \\<And>apply_map bop b1 b2 aa ab ac ad ba.\n       \\<lbrakk>bool_op_extend bop (robdd_to_bool b1) (robdd_to_bool b2) =\n                None;\n        c_lookup (robdd_get_id b1, robdd_get_id b2) apply_map = None;\n        (aa, ab, ac, ad, ba) = robdd_apply_next b1 b2\\<rbrakk>\n       \\<Longrightarrow> size_robdd aa + size_robdd ad\n                         < size_robdd b1 + size_robdd b2", "assume bop_eq: \"bool_op_extend bop (robdd_to_bool b1) (robdd_to_bool b2) = None\"\n        and next_eq: \"(l1, r1, v, l2, r2) = robdd_apply_next b1 b2\""], ["proof (state)\nthis:\n  bool_op_extend bop (robdd_to_bool b1) (robdd_to_bool b2) = None\n  (l1, r1, v, l2, r2) = robdd_apply_next b1 b2\n\ngoal (2 subgoals):\n 1. \\<And>apply_map a b bop b1 b2 aa ab ac ad ba ak al am be.\n       \\<lbrakk>bool_op_extend bop (robdd_to_bool b1) (robdd_to_bool b2) =\n                None;\n        c_lookup (robdd_get_id b1, robdd_get_id b2) apply_map = None;\n        (aa, ab, ac, ad, ba) = robdd_apply_next b1 b2;\n        (ak, al, am, be) = robdd_apply apply_map (a, b) bop aa ad;\n        robdd_apply_dom (apply_map, (a, b), bop, aa, ad)\\<rbrakk>\n       \\<Longrightarrow> size_robdd ab + size_robdd ba\n                         < size_robdd b1 + size_robdd b2\n 2. \\<And>apply_map bop b1 b2 aa ab ac ad ba.\n       \\<lbrakk>bool_op_extend bop (robdd_to_bool b1) (robdd_to_bool b2) =\n                None;\n        c_lookup (robdd_get_id b1, robdd_get_id b2) apply_map = None;\n        (aa, ab, ac, ad, ba) = robdd_apply_next b1 b2\\<rbrakk>\n       \\<Longrightarrow> size_robdd aa + size_robdd ad\n                         < size_robdd b1 + size_robdd b2", "hence \"size_robdd l1 + size_robdd l2 < size_robdd b1 + size_robdd b2 \\<and> \n           size_robdd r1 + size_robdd r2 < size_robdd b1 + size_robdd b2\""], ["proof (prove)\nusing this:\n  bool_op_extend bop (robdd_to_bool b1) (robdd_to_bool b2) = None\n  (l1, r1, v, l2, r2) = robdd_apply_next b1 b2\n\ngoal (1 subgoal):\n 1. size_robdd l1 + size_robdd l2 < size_robdd b1 + size_robdd b2 \\<and>\n    size_robdd r1 + size_robdd r2 < size_robdd b1 + size_robdd b2", "apply (case_tac [!] b1)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>bool_op_extend bop (robdd_to_bool b1) (robdd_to_bool b2) =\n                None;\n        (l1, r1, v, l2, r2) = robdd_apply_next b1 b2;\n        b1 = robdd_leaf x1\\<rbrakk>\n       \\<Longrightarrow> size_robdd l1 + size_robdd l2\n                         < size_robdd b1 + size_robdd b2 \\<and>\n                         size_robdd r1 + size_robdd r2\n                         < size_robdd b1 + size_robdd b2\n 2. \\<And>x21 x22 x23 x24.\n       \\<lbrakk>bool_op_extend bop (robdd_to_bool b1) (robdd_to_bool b2) =\n                None;\n        (l1, r1, v, l2, r2) = robdd_apply_next b1 b2;\n        b1 = robdd_var x21 x22 x23 x24\\<rbrakk>\n       \\<Longrightarrow> size_robdd l1 + size_robdd l2\n                         < size_robdd b1 + size_robdd b2 \\<and>\n                         size_robdd r1 + size_robdd r2\n                         < size_robdd b1 + size_robdd b2", "apply (case_tac [!] b2)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>x1 x1a.\n       \\<lbrakk>bool_op_extend bop (robdd_to_bool b1) (robdd_to_bool b2) =\n                None;\n        (l1, r1, v, l2, r2) = robdd_apply_next b1 b2; b1 = robdd_leaf x1;\n        b2 = robdd_leaf x1a\\<rbrakk>\n       \\<Longrightarrow> size_robdd l1 + size_robdd l2\n                         < size_robdd b1 + size_robdd b2 \\<and>\n                         size_robdd r1 + size_robdd r2\n                         < size_robdd b1 + size_robdd b2\n 2. \\<And>x1 x21 x22 x23 x24.\n       \\<lbrakk>bool_op_extend bop (robdd_to_bool b1) (robdd_to_bool b2) =\n                None;\n        (l1, r1, v, l2, r2) = robdd_apply_next b1 b2; b1 = robdd_leaf x1;\n        b2 = robdd_var x21 x22 x23 x24\\<rbrakk>\n       \\<Longrightarrow> size_robdd l1 + size_robdd l2\n                         < size_robdd b1 + size_robdd b2 \\<and>\n                         size_robdd r1 + size_robdd r2\n                         < size_robdd b1 + size_robdd b2\n 3. \\<And>x21 x22 x23 x24 x1.\n       \\<lbrakk>bool_op_extend bop (robdd_to_bool b1) (robdd_to_bool b2) =\n                None;\n        (l1, r1, v, l2, r2) = robdd_apply_next b1 b2;\n        b1 = robdd_var x21 x22 x23 x24; b2 = robdd_leaf x1\\<rbrakk>\n       \\<Longrightarrow> size_robdd l1 + size_robdd l2\n                         < size_robdd b1 + size_robdd b2 \\<and>\n                         size_robdd r1 + size_robdd r2\n                         < size_robdd b1 + size_robdd b2\n 4. \\<And>x21 x22 x23 x24 x21a x22a x23a x24a.\n       \\<lbrakk>bool_op_extend bop (robdd_to_bool b1) (robdd_to_bool b2) =\n                None;\n        (l1, r1, v, l2, r2) = robdd_apply_next b1 b2;\n        b1 = robdd_var x21 x22 x23 x24;\n        b2 = robdd_var x21a x22a x23a x24a\\<rbrakk>\n       \\<Longrightarrow> size_robdd l1 + size_robdd l2\n                         < size_robdd b1 + size_robdd b2 \\<and>\n                         size_robdd r1 + size_robdd r2\n                         < size_robdd b1 + size_robdd b2", "apply (simp_all split: if_splits)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  size_robdd l1 + size_robdd l2 < size_robdd b1 + size_robdd b2 \\<and>\n  size_robdd r1 + size_robdd r2 < size_robdd b1 + size_robdd b2\n\ngoal (2 subgoals):\n 1. \\<And>apply_map a b bop b1 b2 aa ab ac ad ba ak al am be.\n       \\<lbrakk>bool_op_extend bop (robdd_to_bool b1) (robdd_to_bool b2) =\n                None;\n        c_lookup (robdd_get_id b1, robdd_get_id b2) apply_map = None;\n        (aa, ab, ac, ad, ba) = robdd_apply_next b1 b2;\n        (ak, al, am, be) = robdd_apply apply_map (a, b) bop aa ad;\n        robdd_apply_dom (apply_map, (a, b), bop, aa, ad)\\<rbrakk>\n       \\<Longrightarrow> size_robdd ab + size_robdd ba\n                         < size_robdd b1 + size_robdd b2\n 2. \\<And>apply_map bop b1 b2 aa ab ac ad ba.\n       \\<lbrakk>bool_op_extend bop (robdd_to_bool b1) (robdd_to_bool b2) =\n                None;\n        c_lookup (robdd_get_id b1, robdd_get_id b2) apply_map = None;\n        (aa, ab, ac, ad, ba) = robdd_apply_next b1 b2\\<rbrakk>\n       \\<Longrightarrow> size_robdd aa + size_robdd ad\n                         < size_robdd b1 + size_robdd b2", "thus \"size_robdd l1 + size_robdd l2 < size_robdd b1 + size_robdd b2\" \n          \"size_robdd r1 + size_robdd r2 < size_robdd b1 + size_robdd b2\""], ["proof (prove)\nusing this:\n  size_robdd l1 + size_robdd l2 < size_robdd b1 + size_robdd b2 \\<and>\n  size_robdd r1 + size_robdd r2 < size_robdd b1 + size_robdd b2\n\ngoal (1 subgoal):\n 1. size_robdd l1 + size_robdd l2 < size_robdd b1 + size_robdd b2 &&&\n    size_robdd r1 + size_robdd r2 < size_robdd b1 + size_robdd b2", "by simp_all"], ["proof (state)\nthis:\n  size_robdd l1 + size_robdd l2 < size_robdd b1 + size_robdd b2\n  size_robdd r1 + size_robdd r2 < size_robdd b1 + size_robdd b2\n\ngoal:\nNo subgoals!", "qed"], ["", "declare robdd_apply.simps[simp del]"], ["", "definition apply_map_invar where\n     \"apply_map_invar bop bs bs1 bs2 apply_map \\<longleftrightarrow>\n       c_invar apply_map \\<and>\n       (\\<forall>i1 i2 b. c_lookup (i1, i2) apply_map = Some b \\<longrightarrow>\n          (\\<exists>b1 b2. robdd_id_map bs1 i1 = Some b1 \\<and> robdd_id_map bs2 i2 = Some b2 \\<and>            \n                  robdd_invar_ext bs (robdd_get_min_var b1 b2) b \\<and> (\\<forall>a. robdd_\\<alpha> b a \\<longleftrightarrow> bop (robdd_\\<alpha> b1 a) (robdd_\\<alpha> b2 a))))\""], ["", "lemma apply_map_invar_empty : \n    \"apply_map_invar bop bs bs1 bs2 (c_empty ())\""], ["proof (prove)\ngoal (1 subgoal):\n 1. apply_map_invar bop bs bs1 bs2 (c_empty ())", "unfolding apply_map_invar_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. c_invar (c_empty ()) \\<and>\n    (\\<forall>i1 i2 b.\n        c_lookup (i1, i2) (c_empty ()) = Some b \\<longrightarrow>\n        (\\<exists>b1 b2.\n            robdd_id_map bs1 i1 = Some b1 \\<and>\n            robdd_id_map bs2 i2 = Some b2 \\<and>\n            robdd_invar_ext bs (robdd_get_min_var b1 b2) b \\<and>\n            (\\<forall>a.\n                robdd_\\<alpha> b a =\n                bop (robdd_\\<alpha> b1 a) (robdd_\\<alpha> b2 a))))", "by (simp add: c.empty_correct c.lookup_correct)"], ["", "lemma apply_map_invar_I :\n    \"\\<lbrakk>c_invar apply_map;\n      \\<And>i1 i2 b. c_lookup (i1, i2) apply_map = Some b \\<Longrightarrow>\n      \\<exists>b1 b2. robdd_id_map bs1 i1 = Some b1 \\<and> robdd_id_map bs2 i2 = Some b2 \\<and>            \n                  robdd_invar_ext bs (robdd_get_min_var b1 b2) b \\<and> (\\<forall>a. robdd_\\<alpha> b a \\<longleftrightarrow> bop (robdd_\\<alpha> b1 a) (robdd_\\<alpha> b2 a))\\<rbrakk> \\<Longrightarrow>\n      apply_map_invar bop bs bs1 bs2 apply_map\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>c_invar apply_map;\n     \\<And>i1 i2 b.\n        c_lookup (i1, i2) apply_map = Some b \\<Longrightarrow>\n        \\<exists>b1 b2.\n           robdd_id_map bs1 i1 = Some b1 \\<and>\n           robdd_id_map bs2 i2 = Some b2 \\<and>\n           robdd_invar_ext bs (robdd_get_min_var b1 b2) b \\<and>\n           (\\<forall>a.\n               robdd_\\<alpha> b a =\n               bop (robdd_\\<alpha> b1 a) (robdd_\\<alpha> b2 a))\\<rbrakk>\n    \\<Longrightarrow> apply_map_invar bop bs bs1 bs2 apply_map", "unfolding apply_map_invar_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>c_invar apply_map;\n     \\<And>i1 i2 b.\n        c_lookup (i1, i2) apply_map = Some b \\<Longrightarrow>\n        \\<exists>b1 b2.\n           robdd_id_map bs1 i1 = Some b1 \\<and>\n           robdd_id_map bs2 i2 = Some b2 \\<and>\n           robdd_invar_ext bs (robdd_get_min_var b1 b2) b \\<and>\n           (\\<forall>a.\n               robdd_\\<alpha> b a =\n               bop (robdd_\\<alpha> b1 a) (robdd_\\<alpha> b2 a))\\<rbrakk>\n    \\<Longrightarrow> c_invar apply_map \\<and>\n                      (\\<forall>i1 i2 b.\n                          c_lookup (i1, i2) apply_map =\n                          Some b \\<longrightarrow>\n                          (\\<exists>b1 b2.\n                              robdd_id_map bs1 i1 = Some b1 \\<and>\n                              robdd_id_map bs2 i2 = Some b2 \\<and>\n                              robdd_invar_ext bs (robdd_get_min_var b1 b2)\n                               b \\<and>\n                              (\\<forall>a.\n                                  robdd_\\<alpha> b a =\n                                  bop (robdd_\\<alpha> b1 a)\n                                   (robdd_\\<alpha> b2 a))))", "by blast"], ["", "lemma apply_map_invar_D1 :\n    \"apply_map_invar bop bs bs1 bs2 apply_map \\<Longrightarrow> c_invar apply_map\""], ["proof (prove)\ngoal (1 subgoal):\n 1. apply_map_invar bop bs bs1 bs2 apply_map \\<Longrightarrow>\n    c_invar apply_map", "unfolding apply_map_invar_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. c_invar apply_map \\<and>\n    (\\<forall>i1 i2 b.\n        c_lookup (i1, i2) apply_map = Some b \\<longrightarrow>\n        (\\<exists>b1 b2.\n            robdd_id_map bs1 i1 = Some b1 \\<and>\n            robdd_id_map bs2 i2 = Some b2 \\<and>\n            robdd_invar_ext bs (robdd_get_min_var b1 b2) b \\<and>\n            (\\<forall>a.\n                robdd_\\<alpha> b a =\n                bop (robdd_\\<alpha> b1 a)\n                 (robdd_\\<alpha> b2 a)))) \\<Longrightarrow>\n    c_invar apply_map", "by blast"], ["", "lemma apply_map_invar_D2 :\n    \"\\<lbrakk>apply_map_invar bop bs bs1 bs2 apply_map;\n      c_lookup (i1, i2) apply_map = Some b\\<rbrakk> \\<Longrightarrow>\n      \\<exists>b1 b2. robdd_id_map bs1 i1 = Some b1 \\<and> robdd_id_map bs2 i2 = Some b2 \\<and>            \n                  robdd_invar_ext bs (robdd_get_min_var b1 b2) b \\<and> (\\<forall>a. robdd_\\<alpha> b a \\<longleftrightarrow> bop (robdd_\\<alpha> b1 a) (robdd_\\<alpha> b2 a))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>apply_map_invar bop bs bs1 bs2 apply_map;\n     c_lookup (i1, i2) apply_map = Some b\\<rbrakk>\n    \\<Longrightarrow> \\<exists>b1 b2.\n                         robdd_id_map bs1 i1 = Some b1 \\<and>\n                         robdd_id_map bs2 i2 = Some b2 \\<and>\n                         robdd_invar_ext bs (robdd_get_min_var b1 b2)\n                          b \\<and>\n                         (\\<forall>a.\n                             robdd_\\<alpha> b a =\n                             bop (robdd_\\<alpha> b1 a)\n                              (robdd_\\<alpha> b2 a))", "unfolding apply_map_invar_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>c_invar apply_map \\<and>\n             (\\<forall>i1 i2 b.\n                 c_lookup (i1, i2) apply_map = Some b \\<longrightarrow>\n                 (\\<exists>b1 b2.\n                     robdd_id_map bs1 i1 = Some b1 \\<and>\n                     robdd_id_map bs2 i2 = Some b2 \\<and>\n                     robdd_invar_ext bs (robdd_get_min_var b1 b2) b \\<and>\n                     (\\<forall>a.\n                         robdd_\\<alpha> b a =\n                         bop (robdd_\\<alpha> b1 a) (robdd_\\<alpha> b2 a))));\n     c_lookup (i1, i2) apply_map = Some b\\<rbrakk>\n    \\<Longrightarrow> \\<exists>b1 b2.\n                         robdd_id_map bs1 i1 = Some b1 \\<and>\n                         robdd_id_map bs2 i2 = Some b2 \\<and>\n                         robdd_invar_ext bs (robdd_get_min_var b1 b2)\n                          b \\<and>\n                         (\\<forall>a.\n                             robdd_\\<alpha> b a =\n                             bop (robdd_\\<alpha> b1 a)\n                              (robdd_\\<alpha> b2 a))", "by blast"], ["", "lemma apply_map_invar_extend :\n    assumes invar: \"apply_map_invar bop bs bs1 bs2 apply_map\"\n        and bs1'_OK: \"bs1 \\<subseteq> bs1'\" \"robdd_invar_ids bs1'\" \"\\<And>b. b \\<in> bs1' \\<Longrightarrow> robdd_invar b\"\n        and bs2'_OK: \"bs2 \\<subseteq> bs2'\" \"robdd_invar_ids bs2'\" \"\\<And>b. b \\<in> bs2' \\<Longrightarrow> robdd_invar b\"\n    shows \"apply_map_invar bop bs bs1' bs2' apply_map\""], ["proof (prove)\ngoal (1 subgoal):\n 1. apply_map_invar bop bs bs1' bs2' apply_map", "proof (rule apply_map_invar_I, goal_cases)"], ["proof (state)\ngoal (2 subgoals):\n 1. c_invar apply_map\n 2. \\<And>i1 i2 b.\n       c_lookup (i1, i2) apply_map = Some b \\<Longrightarrow>\n       \\<exists>b1 b2.\n          robdd_id_map bs1' i1 = Some b1 \\<and>\n          robdd_id_map bs2' i2 = Some b2 \\<and>\n          robdd_invar_ext bs (robdd_get_min_var b1 b2) b \\<and>\n          (\\<forall>a.\n              robdd_\\<alpha> b a =\n              bop (robdd_\\<alpha> b1 a) (robdd_\\<alpha> b2 a))", "case 1"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. c_invar apply_map\n 2. \\<And>i1 i2 b.\n       c_lookup (i1, i2) apply_map = Some b \\<Longrightarrow>\n       \\<exists>b1 b2.\n          robdd_id_map bs1' i1 = Some b1 \\<and>\n          robdd_id_map bs2' i2 = Some b2 \\<and>\n          robdd_invar_ext bs (robdd_get_min_var b1 b2) b \\<and>\n          (\\<forall>a.\n              robdd_\\<alpha> b a =\n              bop (robdd_\\<alpha> b1 a) (robdd_\\<alpha> b2 a))", "thus ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. c_invar apply_map", "using apply_map_invar_D1[OF invar]"], ["proof (prove)\nusing this:\n  c_invar apply_map\n\ngoal (1 subgoal):\n 1. c_invar apply_map", "."], ["proof (state)\nthis:\n  c_invar apply_map\n\ngoal (1 subgoal):\n 1. \\<And>i1 i2 b.\n       c_lookup (i1, i2) apply_map = Some b \\<Longrightarrow>\n       \\<exists>b1 b2.\n          robdd_id_map bs1' i1 = Some b1 \\<and>\n          robdd_id_map bs2' i2 = Some b2 \\<and>\n          robdd_invar_ext bs (robdd_get_min_var b1 b2) b \\<and>\n          (\\<forall>a.\n              robdd_\\<alpha> b a =\n              bop (robdd_\\<alpha> b1 a) (robdd_\\<alpha> b2 a))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i1 i2 b.\n       c_lookup (i1, i2) apply_map = Some b \\<Longrightarrow>\n       \\<exists>b1 b2.\n          robdd_id_map bs1' i1 = Some b1 \\<and>\n          robdd_id_map bs2' i2 = Some b2 \\<and>\n          robdd_invar_ext bs (robdd_get_min_var b1 b2) b \\<and>\n          (\\<forall>a.\n              robdd_\\<alpha> b a =\n              bop (robdd_\\<alpha> b1 a) (robdd_\\<alpha> b2 a))", "case lookup_eq: (2 i1 i2 b)"], ["proof (state)\nthis:\n  c_lookup (i1, i2) apply_map = Some b\n\ngoal (1 subgoal):\n 1. \\<And>i1 i2 b.\n       c_lookup (i1, i2) apply_map = Some b \\<Longrightarrow>\n       \\<exists>b1 b2.\n          robdd_id_map bs1' i1 = Some b1 \\<and>\n          robdd_id_map bs2' i2 = Some b2 \\<and>\n          robdd_invar_ext bs (robdd_get_min_var b1 b2) b \\<and>\n          (\\<forall>a.\n              robdd_\\<alpha> b a =\n              bop (robdd_\\<alpha> b1 a) (robdd_\\<alpha> b2 a))", "from apply_map_invar_D2[OF invar lookup_eq]"], ["proof (chain)\npicking this:\n  \\<exists>b1 b2.\n     robdd_id_map bs1 i1 = Some b1 \\<and>\n     robdd_id_map bs2 i2 = Some b2 \\<and>\n     robdd_invar_ext bs (robdd_get_min_var b1 b2) b \\<and>\n     (\\<forall>a.\n         robdd_\\<alpha> b a =\n         bop (robdd_\\<alpha> b1 a) (robdd_\\<alpha> b2 a))", "obtain b1 b2 where\n       id_map_bs1: \"robdd_id_map bs1 i1 = Some b1\" and\n       id_map_bs2: \"robdd_id_map bs2 i2 = Some b2\" and\n       invar_b:    \"robdd_invar_ext bs (robdd_get_min_var b1 b2) b\" and\n       sem_b:      \"\\<forall>a. robdd_\\<alpha> b a = bop (robdd_\\<alpha> b1 a) (robdd_\\<alpha> b2 a)\""], ["proof (prove)\nusing this:\n  \\<exists>b1 b2.\n     robdd_id_map bs1 i1 = Some b1 \\<and>\n     robdd_id_map bs2 i2 = Some b2 \\<and>\n     robdd_invar_ext bs (robdd_get_min_var b1 b2) b \\<and>\n     (\\<forall>a.\n         robdd_\\<alpha> b a =\n         bop (robdd_\\<alpha> b1 a) (robdd_\\<alpha> b2 a))\n\ngoal (1 subgoal):\n 1. (\\<And>b1 b2.\n        \\<lbrakk>robdd_id_map bs1 i1 = Some b1;\n         robdd_id_map bs2 i2 = Some b2;\n         robdd_invar_ext bs (robdd_get_min_var b1 b2) b;\n         \\<forall>a.\n            robdd_\\<alpha> b a =\n            bop (robdd_\\<alpha> b1 a) (robdd_\\<alpha> b2 a)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  robdd_id_map bs1 i1 = Some b1\n  robdd_id_map bs2 i2 = Some b2\n  robdd_invar_ext bs (robdd_get_min_var b1 b2) b\n  \\<forall>a.\n     robdd_\\<alpha> b a = bop (robdd_\\<alpha> b1 a) (robdd_\\<alpha> b2 a)\n\ngoal (1 subgoal):\n 1. \\<And>i1 i2 b.\n       c_lookup (i1, i2) apply_map = Some b \\<Longrightarrow>\n       \\<exists>b1 b2.\n          robdd_id_map bs1' i1 = Some b1 \\<and>\n          robdd_id_map bs2' i2 = Some b2 \\<and>\n          robdd_invar_ext bs (robdd_get_min_var b1 b2) b \\<and>\n          (\\<forall>a.\n              robdd_\\<alpha> b a =\n              bop (robdd_\\<alpha> b1 a) (robdd_\\<alpha> b2 a))", "from bs1'_OK(1)"], ["proof (chain)\npicking this:\n  bs1 \\<subseteq> bs1'", "obtain bs1'' where bs1'_eq: \"bs1' = bs1'' \\<union> bs1\""], ["proof (prove)\nusing this:\n  bs1 \\<subseteq> bs1'\n\ngoal (1 subgoal):\n 1. (\\<And>bs1''.\n        bs1' = bs1'' \\<union> bs1 \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  bs1' = bs1'' \\<union> bs1\n\ngoal (1 subgoal):\n 1. \\<And>i1 i2 b.\n       c_lookup (i1, i2) apply_map = Some b \\<Longrightarrow>\n       \\<exists>b1 b2.\n          robdd_id_map bs1' i1 = Some b1 \\<and>\n          robdd_id_map bs2' i2 = Some b2 \\<and>\n          robdd_invar_ext bs (robdd_get_min_var b1 b2) b \\<and>\n          (\\<forall>a.\n              robdd_\\<alpha> b a =\n              bop (robdd_\\<alpha> b1 a) (robdd_\\<alpha> b2 a))", "from bs2'_OK(1)"], ["proof (chain)\npicking this:\n  bs2 \\<subseteq> bs2'", "obtain bs2'' where bs2'_eq: \"bs2' = bs2'' \\<union> bs2\""], ["proof (prove)\nusing this:\n  bs2 \\<subseteq> bs2'\n\ngoal (1 subgoal):\n 1. (\\<And>bs2''.\n        bs2' = bs2'' \\<union> bs2 \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  bs2' = bs2'' \\<union> bs2\n\ngoal (1 subgoal):\n 1. \\<And>i1 i2 b.\n       c_lookup (i1, i2) apply_map = Some b \\<Longrightarrow>\n       \\<exists>b1 b2.\n          robdd_id_map bs1' i1 = Some b1 \\<and>\n          robdd_id_map bs2' i2 = Some b2 \\<and>\n          robdd_invar_ext bs (robdd_get_min_var b1 b2) b \\<and>\n          (\\<forall>a.\n              robdd_\\<alpha> b a =\n              bop (robdd_\\<alpha> b1 a) (robdd_\\<alpha> b2 a))", "from robdd_invar_ids_equal_intro  [OF bs1'_OK(3) bs1'_OK(2)] bs1'_eq"], ["proof (chain)\npicking this:\n  (\\<And>b. b \\<in> bs1' \\<Longrightarrow> b \\<in> bs1') \\<Longrightarrow>\n  robdd_invar_ids_equal bs1'\n  bs1' = bs1'' \\<union> bs1", "have ids_equal_bs1': \"robdd_invar_ids_equal (bs1'' \\<union> bs1)\""], ["proof (prove)\nusing this:\n  (\\<And>b. b \\<in> bs1' \\<Longrightarrow> b \\<in> bs1') \\<Longrightarrow>\n  robdd_invar_ids_equal bs1'\n  bs1' = bs1'' \\<union> bs1\n\ngoal (1 subgoal):\n 1. robdd_invar_ids_equal (bs1'' \\<union> bs1)", "by simp"], ["proof (state)\nthis:\n  robdd_invar_ids_equal (bs1'' \\<union> bs1)\n\ngoal (1 subgoal):\n 1. \\<And>i1 i2 b.\n       c_lookup (i1, i2) apply_map = Some b \\<Longrightarrow>\n       \\<exists>b1 b2.\n          robdd_id_map bs1' i1 = Some b1 \\<and>\n          robdd_id_map bs2' i2 = Some b2 \\<and>\n          robdd_invar_ext bs (robdd_get_min_var b1 b2) b \\<and>\n          (\\<forall>a.\n              robdd_\\<alpha> b a =\n              bop (robdd_\\<alpha> b1 a) (robdd_\\<alpha> b2 a))", "from robdd_invar_ids_equal_intro  [OF bs2'_OK(3) bs2'_OK(2)] bs2'_eq"], ["proof (chain)\npicking this:\n  (\\<And>b. b \\<in> bs2' \\<Longrightarrow> b \\<in> bs2') \\<Longrightarrow>\n  robdd_invar_ids_equal bs2'\n  bs2' = bs2'' \\<union> bs2", "have ids_equal_bs2': \"robdd_invar_ids_equal (bs2'' \\<union> bs2)\""], ["proof (prove)\nusing this:\n  (\\<And>b. b \\<in> bs2' \\<Longrightarrow> b \\<in> bs2') \\<Longrightarrow>\n  robdd_invar_ids_equal bs2'\n  bs2' = bs2'' \\<union> bs2\n\ngoal (1 subgoal):\n 1. robdd_invar_ids_equal (bs2'' \\<union> bs2)", "by simp"], ["proof (state)\nthis:\n  robdd_invar_ids_equal (bs2'' \\<union> bs2)\n\ngoal (1 subgoal):\n 1. \\<And>i1 i2 b.\n       c_lookup (i1, i2) apply_map = Some b \\<Longrightarrow>\n       \\<exists>b1 b2.\n          robdd_id_map bs1' i1 = Some b1 \\<and>\n          robdd_id_map bs2' i2 = Some b2 \\<and>\n          robdd_invar_ext bs (robdd_get_min_var b1 b2) b \\<and>\n          (\\<forall>a.\n              robdd_\\<alpha> b a =\n              bop (robdd_\\<alpha> b1 a) (robdd_\\<alpha> b2 a))", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>b1 b2.\n       robdd_id_map bs1' i1 = Some b1 \\<and>\n       robdd_id_map bs2' i2 = Some b2 \\<and>\n       robdd_invar_ext bs (robdd_get_min_var b1 b2) b \\<and>\n       (\\<forall>a.\n           robdd_\\<alpha> b a =\n           bop (robdd_\\<alpha> b1 a) (robdd_\\<alpha> b2 a))", "apply (rule_tac exI[where x = b1])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>b2.\n       robdd_id_map bs1' i1 = Some b1 \\<and>\n       robdd_id_map bs2' i2 = Some b2 \\<and>\n       robdd_invar_ext bs (robdd_get_min_var b1 b2) b \\<and>\n       (\\<forall>a.\n           robdd_\\<alpha> b a =\n           bop (robdd_\\<alpha> b1 a) (robdd_\\<alpha> b2 a))", "apply (rule_tac exI[where x = b2])"], ["proof (prove)\ngoal (1 subgoal):\n 1. robdd_id_map bs1' i1 = Some b1 \\<and>\n    robdd_id_map bs2' i2 = Some b2 \\<and>\n    robdd_invar_ext bs (robdd_get_min_var b1 b2) b \\<and>\n    (\\<forall>a.\n        robdd_\\<alpha> b a =\n        bop (robdd_\\<alpha> b1 a) (robdd_\\<alpha> b2 a))", "apply (simp add: invar_b sem_b bs1'_eq bs2'_eq\n                       robdd_id_map_union [OF ids_equal_bs1']\n                       robdd_id_map_union [OF ids_equal_bs2']\n                       map_add_Some_iff id_map_bs1 id_map_bs2)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  \\<exists>b1 b2.\n     robdd_id_map bs1' i1 = Some b1 \\<and>\n     robdd_id_map bs2' i2 = Some b2 \\<and>\n     robdd_invar_ext bs (robdd_get_min_var b1 b2) b \\<and>\n     (\\<forall>a.\n         robdd_\\<alpha> b a =\n         bop (robdd_\\<alpha> b1 a) (robdd_\\<alpha> b2 a))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma robdd_apply_correct_full :\n  fixes b1 b2 bop rev_map apply_map bs\n  defines \"res \\<equiv> robdd_apply apply_map rev_map bop b1 b2\"\n  defines \"b \\<equiv> fst res\"\n  defines \"apply_map' \\<equiv> fst (snd res)\"\n  defines \"rev_map' \\<equiv> snd (snd res)\"\n  assumes invar_rev_map: \"rev_map_invar bs rev_map\"\n      and invar_apply_map: \"apply_map_invar bop bs bs1 bs2 apply_map\"\n      and b1_invar: \"robdd_invar_ext bs1 n b1\"      \n      and b2_invar: \"robdd_invar_ext bs2 n b2\"      \n      and bs1_OK: \"\\<And>b. b \\<in> bs1 \\<Longrightarrow> robdd_invar b\"\n      and bs2_OK: \"\\<And>b. b \\<in> bs2 \\<Longrightarrow> robdd_invar b\"\n  shows \"\\<exists>bs'. \n         subrobdds b \\<union> bs \\<subseteq> bs' \\<and> \n         robdd_invar_ext bs' n b \\<and>\n         apply_map_invar bop bs' bs1 bs2 apply_map' \\<and>\n         rev_map_invar bs' rev_map' \\<and>\n         (\\<forall>a. robdd_\\<alpha> b a \\<longleftrightarrow> bop (robdd_\\<alpha> b1 a) (robdd_\\<alpha> b2 a))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>bs'.\n       subrobdds b \\<union> bs \\<subseteq> bs' \\<and>\n       robdd_invar_ext bs' n b \\<and>\n       apply_map_invar bop bs' bs1 bs2 apply_map' \\<and>\n       rev_map_invar bs' rev_map' \\<and>\n       (\\<forall>a.\n           robdd_\\<alpha> b a =\n           bop (robdd_\\<alpha> b1 a) (robdd_\\<alpha> b2 a))", "using invar_rev_map invar_apply_map b1_invar b2_invar"], ["proof (prove)\nusing this:\n  rev_map_invar bs rev_map\n  apply_map_invar bop bs bs1 bs2 apply_map\n  robdd_invar_ext bs1 n b1\n  robdd_invar_ext bs2 n b2\n\ngoal (1 subgoal):\n 1. \\<exists>bs'.\n       subrobdds b \\<union> bs \\<subseteq> bs' \\<and>\n       robdd_invar_ext bs' n b \\<and>\n       apply_map_invar bop bs' bs1 bs2 apply_map' \\<and>\n       rev_map_invar bs' rev_map' \\<and>\n       (\\<forall>a.\n           robdd_\\<alpha> b a =\n           bop (robdd_\\<alpha> b1 a) (robdd_\\<alpha> b2 a))", "unfolding b_def apply_map'_def rev_map'_def res_def"], ["proof (prove)\nusing this:\n  rev_map_invar bs rev_map\n  apply_map_invar bop bs bs1 bs2 apply_map\n  robdd_invar_ext bs1 n b1\n  robdd_invar_ext bs2 n b2\n\ngoal (1 subgoal):\n 1. \\<exists>bs'.\n       subrobdds (fst (robdd_apply apply_map rev_map bop b1 b2)) \\<union> bs\n       \\<subseteq> bs' \\<and>\n       robdd_invar_ext bs' n\n        (fst (robdd_apply apply_map rev_map bop b1 b2)) \\<and>\n       apply_map_invar bop bs' bs1 bs2\n        (fst (snd (robdd_apply apply_map rev_map bop b1 b2))) \\<and>\n       rev_map_invar bs'\n        (snd (snd (robdd_apply apply_map rev_map bop b1 b2))) \\<and>\n       (\\<forall>a.\n           robdd_\\<alpha> (fst (robdd_apply apply_map rev_map bop b1 b2))\n            a =\n           bop (robdd_\\<alpha> b1 a) (robdd_\\<alpha> b2 a))", "proof (induct \"(b1, b2)\" arbitrary: b1 b2 bs n apply_map rev_map  rule: measure_induct_rule [of \"\\<lambda>(b1, b2). size_robdd b1 + size_robdd b2\"])"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>b1 b2 bs n apply_map rev_map.\n       \\<lbrakk>\\<And>b1a b2a bs n apply_map rev_map.\n                   \\<lbrakk>(case (b1a, b2a) of\n                             (b1, b2) \\<Rightarrow>\n                               size_robdd b1 + size_robdd b2)\n                            < (case (b1, b2) of\n                               (b1, b2) \\<Rightarrow>\n                                 size_robdd b1 + size_robdd b2);\n                    rev_map_invar bs rev_map;\n                    apply_map_invar bop bs bs1 bs2 apply_map;\n                    robdd_invar_ext bs1 n b1a;\n                    robdd_invar_ext bs2 n b2a\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>bs'.\n  subrobdds (fst (robdd_apply apply_map rev_map bop b1a b2a)) \\<union> bs\n  \\<subseteq> bs' \\<and>\n  robdd_invar_ext bs' n\n   (fst (robdd_apply apply_map rev_map bop b1a b2a)) \\<and>\n  apply_map_invar bop bs' bs1 bs2\n   (fst (snd (robdd_apply apply_map rev_map bop b1a b2a))) \\<and>\n  rev_map_invar bs'\n   (snd (snd (robdd_apply apply_map rev_map bop b1a b2a))) \\<and>\n  (\\<forall>a.\n      robdd_\\<alpha> (fst (robdd_apply apply_map rev_map bop b1a b2a)) a =\n      bop (robdd_\\<alpha> b1a a) (robdd_\\<alpha> b2a a));\n        rev_map_invar bs rev_map; apply_map_invar bop bs bs1 bs2 apply_map;\n        robdd_invar_ext bs1 n b1; robdd_invar_ext bs2 n b2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>bs'.\n                            subrobdds\n                             (fst (robdd_apply apply_map rev_map bop b1\n                                    b2)) \\<union>\n                            bs\n                            \\<subseteq> bs' \\<and>\n                            robdd_invar_ext bs' n\n                             (fst (robdd_apply apply_map rev_map bop b1\n                                    b2)) \\<and>\n                            apply_map_invar bop bs' bs1 bs2\n                             (fst (snd (robdd_apply apply_map rev_map bop b1\n   b2))) \\<and>\n                            rev_map_invar bs'\n                             (snd (snd (robdd_apply apply_map rev_map bop b1\n   b2))) \\<and>\n                            (\\<forall>a.\n                                robdd_\\<alpha>\n                                 (fst (robdd_apply apply_map rev_map bop b1\n  b2))\n                                 a =\n                                bop (robdd_\\<alpha> b1 a)\n                                 (robdd_\\<alpha> b2 a))", "case less"], ["proof (state)\nthis:\n  \\<lbrakk>(case (?b1.0, ?b2.0) of\n            (b1, b2) \\<Rightarrow> size_robdd b1 + size_robdd b2)\n           < (case (b1, b2) of\n              (b1, b2) \\<Rightarrow> size_robdd b1 + size_robdd b2);\n   rev_map_invar ?bs ?rev_map; apply_map_invar bop ?bs bs1 bs2 ?apply_map;\n   robdd_invar_ext bs1 ?n ?b1.0; robdd_invar_ext bs2 ?n ?b2.0\\<rbrakk>\n  \\<Longrightarrow> \\<exists>bs'.\n                       subrobdds\n                        (fst (robdd_apply ?apply_map ?rev_map bop ?b1.0\n                               ?b2.0)) \\<union>\n                       ?bs\n                       \\<subseteq> bs' \\<and>\n                       robdd_invar_ext bs' ?n\n                        (fst (robdd_apply ?apply_map ?rev_map bop ?b1.0\n                               ?b2.0)) \\<and>\n                       apply_map_invar bop bs' bs1 bs2\n                        (fst (snd (robdd_apply ?apply_map ?rev_map bop ?b1.0\n                                    ?b2.0))) \\<and>\n                       rev_map_invar bs'\n                        (snd (snd (robdd_apply ?apply_map ?rev_map bop ?b1.0\n                                    ?b2.0))) \\<and>\n                       (\\<forall>a.\n                           robdd_\\<alpha>\n                            (fst (robdd_apply ?apply_map ?rev_map bop ?b1.0\n                                   ?b2.0))\n                            a =\n                           bop (robdd_\\<alpha> ?b1.0 a)\n                            (robdd_\\<alpha> ?b2.0 a))\n  rev_map_invar bs rev_map\n  apply_map_invar bop bs bs1 bs2 apply_map\n  robdd_invar_ext bs1 n b1\n  robdd_invar_ext bs2 n b2\n\ngoal (1 subgoal):\n 1. \\<And>b1 b2 bs n apply_map rev_map.\n       \\<lbrakk>\\<And>b1a b2a bs n apply_map rev_map.\n                   \\<lbrakk>(case (b1a, b2a) of\n                             (b1, b2) \\<Rightarrow>\n                               size_robdd b1 + size_robdd b2)\n                            < (case (b1, b2) of\n                               (b1, b2) \\<Rightarrow>\n                                 size_robdd b1 + size_robdd b2);\n                    rev_map_invar bs rev_map;\n                    apply_map_invar bop bs bs1 bs2 apply_map;\n                    robdd_invar_ext bs1 n b1a;\n                    robdd_invar_ext bs2 n b2a\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>bs'.\n  subrobdds (fst (robdd_apply apply_map rev_map bop b1a b2a)) \\<union> bs\n  \\<subseteq> bs' \\<and>\n  robdd_invar_ext bs' n\n   (fst (robdd_apply apply_map rev_map bop b1a b2a)) \\<and>\n  apply_map_invar bop bs' bs1 bs2\n   (fst (snd (robdd_apply apply_map rev_map bop b1a b2a))) \\<and>\n  rev_map_invar bs'\n   (snd (snd (robdd_apply apply_map rev_map bop b1a b2a))) \\<and>\n  (\\<forall>a.\n      robdd_\\<alpha> (fst (robdd_apply apply_map rev_map bop b1a b2a)) a =\n      bop (robdd_\\<alpha> b1a a) (robdd_\\<alpha> b2a a));\n        rev_map_invar bs rev_map; apply_map_invar bop bs bs1 bs2 apply_map;\n        robdd_invar_ext bs1 n b1; robdd_invar_ext bs2 n b2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>bs'.\n                            subrobdds\n                             (fst (robdd_apply apply_map rev_map bop b1\n                                    b2)) \\<union>\n                            bs\n                            \\<subseteq> bs' \\<and>\n                            robdd_invar_ext bs' n\n                             (fst (robdd_apply apply_map rev_map bop b1\n                                    b2)) \\<and>\n                            apply_map_invar bop bs' bs1 bs2\n                             (fst (snd (robdd_apply apply_map rev_map bop b1\n   b2))) \\<and>\n                            rev_map_invar bs'\n                             (snd (snd (robdd_apply apply_map rev_map bop b1\n   b2))) \\<and>\n                            (\\<forall>a.\n                                robdd_\\<alpha>\n                                 (fst (robdd_apply apply_map rev_map bop b1\n  b2))\n                                 a =\n                                bop (robdd_\\<alpha> b1 a)\n                                 (robdd_\\<alpha> b2 a))", "note indhyp = less(1)"], ["proof (state)\nthis:\n  \\<lbrakk>(case (?b1.0, ?b2.0) of\n            (b1, b2) \\<Rightarrow> size_robdd b1 + size_robdd b2)\n           < (case (b1, b2) of\n              (b1, b2) \\<Rightarrow> size_robdd b1 + size_robdd b2);\n   rev_map_invar ?bs ?rev_map; apply_map_invar bop ?bs bs1 bs2 ?apply_map;\n   robdd_invar_ext bs1 ?n ?b1.0; robdd_invar_ext bs2 ?n ?b2.0\\<rbrakk>\n  \\<Longrightarrow> \\<exists>bs'.\n                       subrobdds\n                        (fst (robdd_apply ?apply_map ?rev_map bop ?b1.0\n                               ?b2.0)) \\<union>\n                       ?bs\n                       \\<subseteq> bs' \\<and>\n                       robdd_invar_ext bs' ?n\n                        (fst (robdd_apply ?apply_map ?rev_map bop ?b1.0\n                               ?b2.0)) \\<and>\n                       apply_map_invar bop bs' bs1 bs2\n                        (fst (snd (robdd_apply ?apply_map ?rev_map bop ?b1.0\n                                    ?b2.0))) \\<and>\n                       rev_map_invar bs'\n                        (snd (snd (robdd_apply ?apply_map ?rev_map bop ?b1.0\n                                    ?b2.0))) \\<and>\n                       (\\<forall>a.\n                           robdd_\\<alpha>\n                            (fst (robdd_apply ?apply_map ?rev_map bop ?b1.0\n                                   ?b2.0))\n                            a =\n                           bop (robdd_\\<alpha> ?b1.0 a)\n                            (robdd_\\<alpha> ?b2.0 a))\n\ngoal (1 subgoal):\n 1. \\<And>b1 b2 bs n apply_map rev_map.\n       \\<lbrakk>\\<And>b1a b2a bs n apply_map rev_map.\n                   \\<lbrakk>(case (b1a, b2a) of\n                             (b1, b2) \\<Rightarrow>\n                               size_robdd b1 + size_robdd b2)\n                            < (case (b1, b2) of\n                               (b1, b2) \\<Rightarrow>\n                                 size_robdd b1 + size_robdd b2);\n                    rev_map_invar bs rev_map;\n                    apply_map_invar bop bs bs1 bs2 apply_map;\n                    robdd_invar_ext bs1 n b1a;\n                    robdd_invar_ext bs2 n b2a\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>bs'.\n  subrobdds (fst (robdd_apply apply_map rev_map bop b1a b2a)) \\<union> bs\n  \\<subseteq> bs' \\<and>\n  robdd_invar_ext bs' n\n   (fst (robdd_apply apply_map rev_map bop b1a b2a)) \\<and>\n  apply_map_invar bop bs' bs1 bs2\n   (fst (snd (robdd_apply apply_map rev_map bop b1a b2a))) \\<and>\n  rev_map_invar bs'\n   (snd (snd (robdd_apply apply_map rev_map bop b1a b2a))) \\<and>\n  (\\<forall>a.\n      robdd_\\<alpha> (fst (robdd_apply apply_map rev_map bop b1a b2a)) a =\n      bop (robdd_\\<alpha> b1a a) (robdd_\\<alpha> b2a a));\n        rev_map_invar bs rev_map; apply_map_invar bop bs bs1 bs2 apply_map;\n        robdd_invar_ext bs1 n b1; robdd_invar_ext bs2 n b2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>bs'.\n                            subrobdds\n                             (fst (robdd_apply apply_map rev_map bop b1\n                                    b2)) \\<union>\n                            bs\n                            \\<subseteq> bs' \\<and>\n                            robdd_invar_ext bs' n\n                             (fst (robdd_apply apply_map rev_map bop b1\n                                    b2)) \\<and>\n                            apply_map_invar bop bs' bs1 bs2\n                             (fst (snd (robdd_apply apply_map rev_map bop b1\n   b2))) \\<and>\n                            rev_map_invar bs'\n                             (snd (snd (robdd_apply apply_map rev_map bop b1\n   b2))) \\<and>\n                            (\\<forall>a.\n                                robdd_\\<alpha>\n                                 (fst (robdd_apply apply_map rev_map bop b1\n  b2))\n                                 a =\n                                bop (robdd_\\<alpha> b1 a)\n                                 (robdd_\\<alpha> b2 a))", "note invar_rev_map = less(2)"], ["proof (state)\nthis:\n  rev_map_invar bs rev_map\n\ngoal (1 subgoal):\n 1. \\<And>b1 b2 bs n apply_map rev_map.\n       \\<lbrakk>\\<And>b1a b2a bs n apply_map rev_map.\n                   \\<lbrakk>(case (b1a, b2a) of\n                             (b1, b2) \\<Rightarrow>\n                               size_robdd b1 + size_robdd b2)\n                            < (case (b1, b2) of\n                               (b1, b2) \\<Rightarrow>\n                                 size_robdd b1 + size_robdd b2);\n                    rev_map_invar bs rev_map;\n                    apply_map_invar bop bs bs1 bs2 apply_map;\n                    robdd_invar_ext bs1 n b1a;\n                    robdd_invar_ext bs2 n b2a\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>bs'.\n  subrobdds (fst (robdd_apply apply_map rev_map bop b1a b2a)) \\<union> bs\n  \\<subseteq> bs' \\<and>\n  robdd_invar_ext bs' n\n   (fst (robdd_apply apply_map rev_map bop b1a b2a)) \\<and>\n  apply_map_invar bop bs' bs1 bs2\n   (fst (snd (robdd_apply apply_map rev_map bop b1a b2a))) \\<and>\n  rev_map_invar bs'\n   (snd (snd (robdd_apply apply_map rev_map bop b1a b2a))) \\<and>\n  (\\<forall>a.\n      robdd_\\<alpha> (fst (robdd_apply apply_map rev_map bop b1a b2a)) a =\n      bop (robdd_\\<alpha> b1a a) (robdd_\\<alpha> b2a a));\n        rev_map_invar bs rev_map; apply_map_invar bop bs bs1 bs2 apply_map;\n        robdd_invar_ext bs1 n b1; robdd_invar_ext bs2 n b2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>bs'.\n                            subrobdds\n                             (fst (robdd_apply apply_map rev_map bop b1\n                                    b2)) \\<union>\n                            bs\n                            \\<subseteq> bs' \\<and>\n                            robdd_invar_ext bs' n\n                             (fst (robdd_apply apply_map rev_map bop b1\n                                    b2)) \\<and>\n                            apply_map_invar bop bs' bs1 bs2\n                             (fst (snd (robdd_apply apply_map rev_map bop b1\n   b2))) \\<and>\n                            rev_map_invar bs'\n                             (snd (snd (robdd_apply apply_map rev_map bop b1\n   b2))) \\<and>\n                            (\\<forall>a.\n                                robdd_\\<alpha>\n                                 (fst (robdd_apply apply_map rev_map bop b1\n  b2))\n                                 a =\n                                bop (robdd_\\<alpha> b1 a)\n                                 (robdd_\\<alpha> b2 a))", "note invar_apply_map = less(3)"], ["proof (state)\nthis:\n  apply_map_invar bop bs bs1 bs2 apply_map\n\ngoal (1 subgoal):\n 1. \\<And>b1 b2 bs n apply_map rev_map.\n       \\<lbrakk>\\<And>b1a b2a bs n apply_map rev_map.\n                   \\<lbrakk>(case (b1a, b2a) of\n                             (b1, b2) \\<Rightarrow>\n                               size_robdd b1 + size_robdd b2)\n                            < (case (b1, b2) of\n                               (b1, b2) \\<Rightarrow>\n                                 size_robdd b1 + size_robdd b2);\n                    rev_map_invar bs rev_map;\n                    apply_map_invar bop bs bs1 bs2 apply_map;\n                    robdd_invar_ext bs1 n b1a;\n                    robdd_invar_ext bs2 n b2a\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>bs'.\n  subrobdds (fst (robdd_apply apply_map rev_map bop b1a b2a)) \\<union> bs\n  \\<subseteq> bs' \\<and>\n  robdd_invar_ext bs' n\n   (fst (robdd_apply apply_map rev_map bop b1a b2a)) \\<and>\n  apply_map_invar bop bs' bs1 bs2\n   (fst (snd (robdd_apply apply_map rev_map bop b1a b2a))) \\<and>\n  rev_map_invar bs'\n   (snd (snd (robdd_apply apply_map rev_map bop b1a b2a))) \\<and>\n  (\\<forall>a.\n      robdd_\\<alpha> (fst (robdd_apply apply_map rev_map bop b1a b2a)) a =\n      bop (robdd_\\<alpha> b1a a) (robdd_\\<alpha> b2a a));\n        rev_map_invar bs rev_map; apply_map_invar bop bs bs1 bs2 apply_map;\n        robdd_invar_ext bs1 n b1; robdd_invar_ext bs2 n b2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>bs'.\n                            subrobdds\n                             (fst (robdd_apply apply_map rev_map bop b1\n                                    b2)) \\<union>\n                            bs\n                            \\<subseteq> bs' \\<and>\n                            robdd_invar_ext bs' n\n                             (fst (robdd_apply apply_map rev_map bop b1\n                                    b2)) \\<and>\n                            apply_map_invar bop bs' bs1 bs2\n                             (fst (snd (robdd_apply apply_map rev_map bop b1\n   b2))) \\<and>\n                            rev_map_invar bs'\n                             (snd (snd (robdd_apply apply_map rev_map bop b1\n   b2))) \\<and>\n                            (\\<forall>a.\n                                robdd_\\<alpha>\n                                 (fst (robdd_apply apply_map rev_map bop b1\n  b2))\n                                 a =\n                                bop (robdd_\\<alpha> b1 a)\n                                 (robdd_\\<alpha> b2 a))", "note b1_invar = less(4)"], ["proof (state)\nthis:\n  robdd_invar_ext bs1 n b1\n\ngoal (1 subgoal):\n 1. \\<And>b1 b2 bs n apply_map rev_map.\n       \\<lbrakk>\\<And>b1a b2a bs n apply_map rev_map.\n                   \\<lbrakk>(case (b1a, b2a) of\n                             (b1, b2) \\<Rightarrow>\n                               size_robdd b1 + size_robdd b2)\n                            < (case (b1, b2) of\n                               (b1, b2) \\<Rightarrow>\n                                 size_robdd b1 + size_robdd b2);\n                    rev_map_invar bs rev_map;\n                    apply_map_invar bop bs bs1 bs2 apply_map;\n                    robdd_invar_ext bs1 n b1a;\n                    robdd_invar_ext bs2 n b2a\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>bs'.\n  subrobdds (fst (robdd_apply apply_map rev_map bop b1a b2a)) \\<union> bs\n  \\<subseteq> bs' \\<and>\n  robdd_invar_ext bs' n\n   (fst (robdd_apply apply_map rev_map bop b1a b2a)) \\<and>\n  apply_map_invar bop bs' bs1 bs2\n   (fst (snd (robdd_apply apply_map rev_map bop b1a b2a))) \\<and>\n  rev_map_invar bs'\n   (snd (snd (robdd_apply apply_map rev_map bop b1a b2a))) \\<and>\n  (\\<forall>a.\n      robdd_\\<alpha> (fst (robdd_apply apply_map rev_map bop b1a b2a)) a =\n      bop (robdd_\\<alpha> b1a a) (robdd_\\<alpha> b2a a));\n        rev_map_invar bs rev_map; apply_map_invar bop bs bs1 bs2 apply_map;\n        robdd_invar_ext bs1 n b1; robdd_invar_ext bs2 n b2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>bs'.\n                            subrobdds\n                             (fst (robdd_apply apply_map rev_map bop b1\n                                    b2)) \\<union>\n                            bs\n                            \\<subseteq> bs' \\<and>\n                            robdd_invar_ext bs' n\n                             (fst (robdd_apply apply_map rev_map bop b1\n                                    b2)) \\<and>\n                            apply_map_invar bop bs' bs1 bs2\n                             (fst (snd (robdd_apply apply_map rev_map bop b1\n   b2))) \\<and>\n                            rev_map_invar bs'\n                             (snd (snd (robdd_apply apply_map rev_map bop b1\n   b2))) \\<and>\n                            (\\<forall>a.\n                                robdd_\\<alpha>\n                                 (fst (robdd_apply apply_map rev_map bop b1\n  b2))\n                                 a =\n                                bop (robdd_\\<alpha> b1 a)\n                                 (robdd_\\<alpha> b2 a))", "note b2_invar = less(5)"], ["proof (state)\nthis:\n  robdd_invar_ext bs2 n b2\n\ngoal (1 subgoal):\n 1. \\<And>b1 b2 bs n apply_map rev_map.\n       \\<lbrakk>\\<And>b1a b2a bs n apply_map rev_map.\n                   \\<lbrakk>(case (b1a, b2a) of\n                             (b1, b2) \\<Rightarrow>\n                               size_robdd b1 + size_robdd b2)\n                            < (case (b1, b2) of\n                               (b1, b2) \\<Rightarrow>\n                                 size_robdd b1 + size_robdd b2);\n                    rev_map_invar bs rev_map;\n                    apply_map_invar bop bs bs1 bs2 apply_map;\n                    robdd_invar_ext bs1 n b1a;\n                    robdd_invar_ext bs2 n b2a\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>bs'.\n  subrobdds (fst (robdd_apply apply_map rev_map bop b1a b2a)) \\<union> bs\n  \\<subseteq> bs' \\<and>\n  robdd_invar_ext bs' n\n   (fst (robdd_apply apply_map rev_map bop b1a b2a)) \\<and>\n  apply_map_invar bop bs' bs1 bs2\n   (fst (snd (robdd_apply apply_map rev_map bop b1a b2a))) \\<and>\n  rev_map_invar bs'\n   (snd (snd (robdd_apply apply_map rev_map bop b1a b2a))) \\<and>\n  (\\<forall>a.\n      robdd_\\<alpha> (fst (robdd_apply apply_map rev_map bop b1a b2a)) a =\n      bop (robdd_\\<alpha> b1a a) (robdd_\\<alpha> b2a a));\n        rev_map_invar bs rev_map; apply_map_invar bop bs bs1 bs2 apply_map;\n        robdd_invar_ext bs1 n b1; robdd_invar_ext bs2 n b2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>bs'.\n                            subrobdds\n                             (fst (robdd_apply apply_map rev_map bop b1\n                                    b2)) \\<union>\n                            bs\n                            \\<subseteq> bs' \\<and>\n                            robdd_invar_ext bs' n\n                             (fst (robdd_apply apply_map rev_map bop b1\n                                    b2)) \\<and>\n                            apply_map_invar bop bs' bs1 bs2\n                             (fst (snd (robdd_apply apply_map rev_map bop b1\n   b2))) \\<and>\n                            rev_map_invar bs'\n                             (snd (snd (robdd_apply apply_map rev_map bop b1\n   b2))) \\<and>\n                            (\\<forall>a.\n                                robdd_\\<alpha>\n                                 (fst (robdd_apply apply_map rev_map bop b1\n  b2))\n                                 a =\n                                bop (robdd_\\<alpha> b1 a)\n                                 (robdd_\\<alpha> b2 a))", "let ?res = \"robdd_apply apply_map rev_map bop b1 b2\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>b1 b2 bs n apply_map rev_map.\n       \\<lbrakk>\\<And>b1a b2a bs n apply_map rev_map.\n                   \\<lbrakk>(case (b1a, b2a) of\n                             (b1, b2) \\<Rightarrow>\n                               size_robdd b1 + size_robdd b2)\n                            < (case (b1, b2) of\n                               (b1, b2) \\<Rightarrow>\n                                 size_robdd b1 + size_robdd b2);\n                    rev_map_invar bs rev_map;\n                    apply_map_invar bop bs bs1 bs2 apply_map;\n                    robdd_invar_ext bs1 n b1a;\n                    robdd_invar_ext bs2 n b2a\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>bs'.\n  subrobdds (fst (robdd_apply apply_map rev_map bop b1a b2a)) \\<union> bs\n  \\<subseteq> bs' \\<and>\n  robdd_invar_ext bs' n\n   (fst (robdd_apply apply_map rev_map bop b1a b2a)) \\<and>\n  apply_map_invar bop bs' bs1 bs2\n   (fst (snd (robdd_apply apply_map rev_map bop b1a b2a))) \\<and>\n  rev_map_invar bs'\n   (snd (snd (robdd_apply apply_map rev_map bop b1a b2a))) \\<and>\n  (\\<forall>a.\n      robdd_\\<alpha> (fst (robdd_apply apply_map rev_map bop b1a b2a)) a =\n      bop (robdd_\\<alpha> b1a a) (robdd_\\<alpha> b2a a));\n        rev_map_invar bs rev_map; apply_map_invar bop bs bs1 bs2 apply_map;\n        robdd_invar_ext bs1 n b1; robdd_invar_ext bs2 n b2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>bs'.\n                            subrobdds\n                             (fst (robdd_apply apply_map rev_map bop b1\n                                    b2)) \\<union>\n                            bs\n                            \\<subseteq> bs' \\<and>\n                            robdd_invar_ext bs' n\n                             (fst (robdd_apply apply_map rev_map bop b1\n                                    b2)) \\<and>\n                            apply_map_invar bop bs' bs1 bs2\n                             (fst (snd (robdd_apply apply_map rev_map bop b1\n   b2))) \\<and>\n                            rev_map_invar bs'\n                             (snd (snd (robdd_apply apply_map rev_map bop b1\n   b2))) \\<and>\n                            (\\<forall>a.\n                                robdd_\\<alpha>\n                                 (fst (robdd_apply apply_map rev_map bop b1\n  b2))\n                                 a =\n                                bop (robdd_\\<alpha> b1 a)\n                                 (robdd_\\<alpha> b2 a))", "note res_def = robdd_apply.simps [of apply_map rev_map bop b1 b2]"], ["proof (state)\nthis:\n  robdd_apply apply_map rev_map bop b1 b2 =\n  (case bool_op_extend bop (robdd_to_bool b1) (robdd_to_bool b2) of\n   None \\<Rightarrow>\n     case c_lookup (robdd_get_id b1, robdd_get_id b2) apply_map of\n     None \\<Rightarrow>\n       let (l1, r1, var, l2, r2) = robdd_apply_next b1 b2;\n           (l, apply_map, rev_map) =\n             robdd_apply apply_map rev_map bop l1 l2;\n           (r, apply_map, rev_map) =\n             robdd_apply apply_map rev_map bop r1 r2;\n           (b, rev_map) = robdd_construct rev_map l var r;\n           apply_map =\n             c_update (robdd_get_id b1, robdd_get_id b2) b apply_map\n       in (b, apply_map, rev_map)\n     | Some b3 \\<Rightarrow> (b3, apply_map, rev_map)\n   | Some f \\<Rightarrow> (robdd_leaf f, apply_map, rev_map))\n\ngoal (1 subgoal):\n 1. \\<And>b1 b2 bs n apply_map rev_map.\n       \\<lbrakk>\\<And>b1a b2a bs n apply_map rev_map.\n                   \\<lbrakk>(case (b1a, b2a) of\n                             (b1, b2) \\<Rightarrow>\n                               size_robdd b1 + size_robdd b2)\n                            < (case (b1, b2) of\n                               (b1, b2) \\<Rightarrow>\n                                 size_robdd b1 + size_robdd b2);\n                    rev_map_invar bs rev_map;\n                    apply_map_invar bop bs bs1 bs2 apply_map;\n                    robdd_invar_ext bs1 n b1a;\n                    robdd_invar_ext bs2 n b2a\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>bs'.\n  subrobdds (fst (robdd_apply apply_map rev_map bop b1a b2a)) \\<union> bs\n  \\<subseteq> bs' \\<and>\n  robdd_invar_ext bs' n\n   (fst (robdd_apply apply_map rev_map bop b1a b2a)) \\<and>\n  apply_map_invar bop bs' bs1 bs2\n   (fst (snd (robdd_apply apply_map rev_map bop b1a b2a))) \\<and>\n  rev_map_invar bs'\n   (snd (snd (robdd_apply apply_map rev_map bop b1a b2a))) \\<and>\n  (\\<forall>a.\n      robdd_\\<alpha> (fst (robdd_apply apply_map rev_map bop b1a b2a)) a =\n      bop (robdd_\\<alpha> b1a a) (robdd_\\<alpha> b2a a));\n        rev_map_invar bs rev_map; apply_map_invar bop bs bs1 bs2 apply_map;\n        robdd_invar_ext bs1 n b1; robdd_invar_ext bs2 n b2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>bs'.\n                            subrobdds\n                             (fst (robdd_apply apply_map rev_map bop b1\n                                    b2)) \\<union>\n                            bs\n                            \\<subseteq> bs' \\<and>\n                            robdd_invar_ext bs' n\n                             (fst (robdd_apply apply_map rev_map bop b1\n                                    b2)) \\<and>\n                            apply_map_invar bop bs' bs1 bs2\n                             (fst (snd (robdd_apply apply_map rev_map bop b1\n   b2))) \\<and>\n                            rev_map_invar bs'\n                             (snd (snd (robdd_apply apply_map rev_map bop b1\n   b2))) \\<and>\n                            (\\<forall>a.\n                                robdd_\\<alpha>\n                                 (fst (robdd_apply apply_map rev_map bop b1\n  b2))\n                                 a =\n                                bop (robdd_\\<alpha> b1 a)\n                                 (robdd_\\<alpha> b2 a))", "from rev_map_invar_implies_invar_ids[OF invar_rev_map]"], ["proof (chain)\npicking this:\n  robdd_invar_ids bs", "have invar_ids_bs: \"robdd_invar_ids bs\""], ["proof (prove)\nusing this:\n  robdd_invar_ids bs\n\ngoal (1 subgoal):\n 1. robdd_invar_ids bs", "by simp"], ["proof (state)\nthis:\n  robdd_invar_ids bs\n\ngoal (1 subgoal):\n 1. \\<And>b1 b2 bs n apply_map rev_map.\n       \\<lbrakk>\\<And>b1a b2a bs n apply_map rev_map.\n                   \\<lbrakk>(case (b1a, b2a) of\n                             (b1, b2) \\<Rightarrow>\n                               size_robdd b1 + size_robdd b2)\n                            < (case (b1, b2) of\n                               (b1, b2) \\<Rightarrow>\n                                 size_robdd b1 + size_robdd b2);\n                    rev_map_invar bs rev_map;\n                    apply_map_invar bop bs bs1 bs2 apply_map;\n                    robdd_invar_ext bs1 n b1a;\n                    robdd_invar_ext bs2 n b2a\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>bs'.\n  subrobdds (fst (robdd_apply apply_map rev_map bop b1a b2a)) \\<union> bs\n  \\<subseteq> bs' \\<and>\n  robdd_invar_ext bs' n\n   (fst (robdd_apply apply_map rev_map bop b1a b2a)) \\<and>\n  apply_map_invar bop bs' bs1 bs2\n   (fst (snd (robdd_apply apply_map rev_map bop b1a b2a))) \\<and>\n  rev_map_invar bs'\n   (snd (snd (robdd_apply apply_map rev_map bop b1a b2a))) \\<and>\n  (\\<forall>a.\n      robdd_\\<alpha> (fst (robdd_apply apply_map rev_map bop b1a b2a)) a =\n      bop (robdd_\\<alpha> b1a a) (robdd_\\<alpha> b2a a));\n        rev_map_invar bs rev_map; apply_map_invar bop bs bs1 bs2 apply_map;\n        robdd_invar_ext bs1 n b1; robdd_invar_ext bs2 n b2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>bs'.\n                            subrobdds\n                             (fst (robdd_apply apply_map rev_map bop b1\n                                    b2)) \\<union>\n                            bs\n                            \\<subseteq> bs' \\<and>\n                            robdd_invar_ext bs' n\n                             (fst (robdd_apply apply_map rev_map bop b1\n                                    b2)) \\<and>\n                            apply_map_invar bop bs' bs1 bs2\n                             (fst (snd (robdd_apply apply_map rev_map bop b1\n   b2))) \\<and>\n                            rev_map_invar bs'\n                             (snd (snd (robdd_apply apply_map rev_map bop b1\n   b2))) \\<and>\n                            (\\<forall>a.\n                                robdd_\\<alpha>\n                                 (fst (robdd_apply apply_map rev_map bop b1\n  b2))\n                                 a =\n                                bop (robdd_\\<alpha> b1 a)\n                                 (robdd_\\<alpha> b2 a))", "note bs_OK_full = rev_map_invar_implies_invar_bs[OF invar_rev_map]"], ["proof (state)\nthis:\n  ?b \\<in> subrobdds_set bs \\<Longrightarrow> robdd_invar ?b\n\ngoal (1 subgoal):\n 1. \\<And>b1 b2 bs n apply_map rev_map.\n       \\<lbrakk>\\<And>b1a b2a bs n apply_map rev_map.\n                   \\<lbrakk>(case (b1a, b2a) of\n                             (b1, b2) \\<Rightarrow>\n                               size_robdd b1 + size_robdd b2)\n                            < (case (b1, b2) of\n                               (b1, b2) \\<Rightarrow>\n                                 size_robdd b1 + size_robdd b2);\n                    rev_map_invar bs rev_map;\n                    apply_map_invar bop bs bs1 bs2 apply_map;\n                    robdd_invar_ext bs1 n b1a;\n                    robdd_invar_ext bs2 n b2a\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>bs'.\n  subrobdds (fst (robdd_apply apply_map rev_map bop b1a b2a)) \\<union> bs\n  \\<subseteq> bs' \\<and>\n  robdd_invar_ext bs' n\n   (fst (robdd_apply apply_map rev_map bop b1a b2a)) \\<and>\n  apply_map_invar bop bs' bs1 bs2\n   (fst (snd (robdd_apply apply_map rev_map bop b1a b2a))) \\<and>\n  rev_map_invar bs'\n   (snd (snd (robdd_apply apply_map rev_map bop b1a b2a))) \\<and>\n  (\\<forall>a.\n      robdd_\\<alpha> (fst (robdd_apply apply_map rev_map bop b1a b2a)) a =\n      bop (robdd_\\<alpha> b1a a) (robdd_\\<alpha> b2a a));\n        rev_map_invar bs rev_map; apply_map_invar bop bs bs1 bs2 apply_map;\n        robdd_invar_ext bs1 n b1; robdd_invar_ext bs2 n b2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>bs'.\n                            subrobdds\n                             (fst (robdd_apply apply_map rev_map bop b1\n                                    b2)) \\<union>\n                            bs\n                            \\<subseteq> bs' \\<and>\n                            robdd_invar_ext bs' n\n                             (fst (robdd_apply apply_map rev_map bop b1\n                                    b2)) \\<and>\n                            apply_map_invar bop bs' bs1 bs2\n                             (fst (snd (robdd_apply apply_map rev_map bop b1\n   b2))) \\<and>\n                            rev_map_invar bs'\n                             (snd (snd (robdd_apply apply_map rev_map bop b1\n   b2))) \\<and>\n                            (\\<forall>a.\n                                robdd_\\<alpha>\n                                 (fst (robdd_apply apply_map rev_map bop b1\n  b2))\n                                 a =\n                                bop (robdd_\\<alpha> b1 a)\n                                 (robdd_\\<alpha> b2 a))", "have bs_OK: \"\\<And>b. b \\<in> bs \\<Longrightarrow> robdd_invar b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>b. b \\<in> bs \\<Longrightarrow> robdd_invar b", "by (metis bs_OK_full subrobdds_set_mono subsetD)"], ["proof (state)\nthis:\n  ?b \\<in> bs \\<Longrightarrow> robdd_invar ?b\n\ngoal (1 subgoal):\n 1. \\<And>b1 b2 bs n apply_map rev_map.\n       \\<lbrakk>\\<And>b1a b2a bs n apply_map rev_map.\n                   \\<lbrakk>(case (b1a, b2a) of\n                             (b1, b2) \\<Rightarrow>\n                               size_robdd b1 + size_robdd b2)\n                            < (case (b1, b2) of\n                               (b1, b2) \\<Rightarrow>\n                                 size_robdd b1 + size_robdd b2);\n                    rev_map_invar bs rev_map;\n                    apply_map_invar bop bs bs1 bs2 apply_map;\n                    robdd_invar_ext bs1 n b1a;\n                    robdd_invar_ext bs2 n b2a\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>bs'.\n  subrobdds (fst (robdd_apply apply_map rev_map bop b1a b2a)) \\<union> bs\n  \\<subseteq> bs' \\<and>\n  robdd_invar_ext bs' n\n   (fst (robdd_apply apply_map rev_map bop b1a b2a)) \\<and>\n  apply_map_invar bop bs' bs1 bs2\n   (fst (snd (robdd_apply apply_map rev_map bop b1a b2a))) \\<and>\n  rev_map_invar bs'\n   (snd (snd (robdd_apply apply_map rev_map bop b1a b2a))) \\<and>\n  (\\<forall>a.\n      robdd_\\<alpha> (fst (robdd_apply apply_map rev_map bop b1a b2a)) a =\n      bop (robdd_\\<alpha> b1a a) (robdd_\\<alpha> b2a a));\n        rev_map_invar bs rev_map; apply_map_invar bop bs bs1 bs2 apply_map;\n        robdd_invar_ext bs1 n b1; robdd_invar_ext bs2 n b2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>bs'.\n                            subrobdds\n                             (fst (robdd_apply apply_map rev_map bop b1\n                                    b2)) \\<union>\n                            bs\n                            \\<subseteq> bs' \\<and>\n                            robdd_invar_ext bs' n\n                             (fst (robdd_apply apply_map rev_map bop b1\n                                    b2)) \\<and>\n                            apply_map_invar bop bs' bs1 bs2\n                             (fst (snd (robdd_apply apply_map rev_map bop b1\n   b2))) \\<and>\n                            rev_map_invar bs'\n                             (snd (snd (robdd_apply apply_map rev_map bop b1\n   b2))) \\<and>\n                            (\\<forall>a.\n                                robdd_\\<alpha>\n                                 (fst (robdd_apply apply_map rev_map bop b1\n  b2))\n                                 a =\n                                bop (robdd_\\<alpha> b1 a)\n                                 (robdd_\\<alpha> b2 a))", "from b1_invar"], ["proof (chain)\npicking this:\n  robdd_invar_ext bs1 n b1", "have b1_in: \"b1 \\<in> subrobdds_set bs1\""], ["proof (prove)\nusing this:\n  robdd_invar_ext bs1 n b1\n\ngoal (1 subgoal):\n 1. b1 \\<in> subrobdds_set bs1", "unfolding robdd_invar_ext_def"], ["proof (prove)\nusing this:\n  b1 \\<in> subrobdds_set bs1 \\<and>\n  robdd_invar_ids bs1 \\<and>\n  robdd_invar_vars_greater n b1 \\<and> robdd_invar_reduced b1\n\ngoal (1 subgoal):\n 1. b1 \\<in> subrobdds_set bs1", "by simp"], ["proof (state)\nthis:\n  b1 \\<in> subrobdds_set bs1\n\ngoal (1 subgoal):\n 1. \\<And>b1 b2 bs n apply_map rev_map.\n       \\<lbrakk>\\<And>b1a b2a bs n apply_map rev_map.\n                   \\<lbrakk>(case (b1a, b2a) of\n                             (b1, b2) \\<Rightarrow>\n                               size_robdd b1 + size_robdd b2)\n                            < (case (b1, b2) of\n                               (b1, b2) \\<Rightarrow>\n                                 size_robdd b1 + size_robdd b2);\n                    rev_map_invar bs rev_map;\n                    apply_map_invar bop bs bs1 bs2 apply_map;\n                    robdd_invar_ext bs1 n b1a;\n                    robdd_invar_ext bs2 n b2a\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>bs'.\n  subrobdds (fst (robdd_apply apply_map rev_map bop b1a b2a)) \\<union> bs\n  \\<subseteq> bs' \\<and>\n  robdd_invar_ext bs' n\n   (fst (robdd_apply apply_map rev_map bop b1a b2a)) \\<and>\n  apply_map_invar bop bs' bs1 bs2\n   (fst (snd (robdd_apply apply_map rev_map bop b1a b2a))) \\<and>\n  rev_map_invar bs'\n   (snd (snd (robdd_apply apply_map rev_map bop b1a b2a))) \\<and>\n  (\\<forall>a.\n      robdd_\\<alpha> (fst (robdd_apply apply_map rev_map bop b1a b2a)) a =\n      bop (robdd_\\<alpha> b1a a) (robdd_\\<alpha> b2a a));\n        rev_map_invar bs rev_map; apply_map_invar bop bs bs1 bs2 apply_map;\n        robdd_invar_ext bs1 n b1; robdd_invar_ext bs2 n b2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>bs'.\n                            subrobdds\n                             (fst (robdd_apply apply_map rev_map bop b1\n                                    b2)) \\<union>\n                            bs\n                            \\<subseteq> bs' \\<and>\n                            robdd_invar_ext bs' n\n                             (fst (robdd_apply apply_map rev_map bop b1\n                                    b2)) \\<and>\n                            apply_map_invar bop bs' bs1 bs2\n                             (fst (snd (robdd_apply apply_map rev_map bop b1\n   b2))) \\<and>\n                            rev_map_invar bs'\n                             (snd (snd (robdd_apply apply_map rev_map bop b1\n   b2))) \\<and>\n                            (\\<forall>a.\n                                robdd_\\<alpha>\n                                 (fst (robdd_apply apply_map rev_map bop b1\n  b2))\n                                 a =\n                                bop (robdd_\\<alpha> b1 a)\n                                 (robdd_\\<alpha> b2 a))", "from b2_invar"], ["proof (chain)\npicking this:\n  robdd_invar_ext bs2 n b2", "have b2_in: \"b2 \\<in> subrobdds_set bs2\""], ["proof (prove)\nusing this:\n  robdd_invar_ext bs2 n b2\n\ngoal (1 subgoal):\n 1. b2 \\<in> subrobdds_set bs2", "unfolding robdd_invar_ext_def"], ["proof (prove)\nusing this:\n  b2 \\<in> subrobdds_set bs2 \\<and>\n  robdd_invar_ids bs2 \\<and>\n  robdd_invar_vars_greater n b2 \\<and> robdd_invar_reduced b2\n\ngoal (1 subgoal):\n 1. b2 \\<in> subrobdds_set bs2", "by simp"], ["proof (state)\nthis:\n  b2 \\<in> subrobdds_set bs2\n\ngoal (1 subgoal):\n 1. \\<And>b1 b2 bs n apply_map rev_map.\n       \\<lbrakk>\\<And>b1a b2a bs n apply_map rev_map.\n                   \\<lbrakk>(case (b1a, b2a) of\n                             (b1, b2) \\<Rightarrow>\n                               size_robdd b1 + size_robdd b2)\n                            < (case (b1, b2) of\n                               (b1, b2) \\<Rightarrow>\n                                 size_robdd b1 + size_robdd b2);\n                    rev_map_invar bs rev_map;\n                    apply_map_invar bop bs bs1 bs2 apply_map;\n                    robdd_invar_ext bs1 n b1a;\n                    robdd_invar_ext bs2 n b2a\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>bs'.\n  subrobdds (fst (robdd_apply apply_map rev_map bop b1a b2a)) \\<union> bs\n  \\<subseteq> bs' \\<and>\n  robdd_invar_ext bs' n\n   (fst (robdd_apply apply_map rev_map bop b1a b2a)) \\<and>\n  apply_map_invar bop bs' bs1 bs2\n   (fst (snd (robdd_apply apply_map rev_map bop b1a b2a))) \\<and>\n  rev_map_invar bs'\n   (snd (snd (robdd_apply apply_map rev_map bop b1a b2a))) \\<and>\n  (\\<forall>a.\n      robdd_\\<alpha> (fst (robdd_apply apply_map rev_map bop b1a b2a)) a =\n      bop (robdd_\\<alpha> b1a a) (robdd_\\<alpha> b2a a));\n        rev_map_invar bs rev_map; apply_map_invar bop bs bs1 bs2 apply_map;\n        robdd_invar_ext bs1 n b1; robdd_invar_ext bs2 n b2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>bs'.\n                            subrobdds\n                             (fst (robdd_apply apply_map rev_map bop b1\n                                    b2)) \\<union>\n                            bs\n                            \\<subseteq> bs' \\<and>\n                            robdd_invar_ext bs' n\n                             (fst (robdd_apply apply_map rev_map bop b1\n                                    b2)) \\<and>\n                            apply_map_invar bop bs' bs1 bs2\n                             (fst (snd (robdd_apply apply_map rev_map bop b1\n   b2))) \\<and>\n                            rev_map_invar bs'\n                             (snd (snd (robdd_apply apply_map rev_map bop b1\n   b2))) \\<and>\n                            (\\<forall>a.\n                                robdd_\\<alpha>\n                                 (fst (robdd_apply apply_map rev_map bop b1\n  b2))\n                                 a =\n                                bop (robdd_\\<alpha> b1 a)\n                                 (robdd_\\<alpha> b2 a))", "from b1_invar"], ["proof (chain)\npicking this:\n  robdd_invar_ext bs1 n b1", "have invar_ids_bs1: \"robdd_invar_ids bs1\""], ["proof (prove)\nusing this:\n  robdd_invar_ext bs1 n b1\n\ngoal (1 subgoal):\n 1. robdd_invar_ids bs1", "unfolding robdd_invar_ext_def"], ["proof (prove)\nusing this:\n  b1 \\<in> subrobdds_set bs1 \\<and>\n  robdd_invar_ids bs1 \\<and>\n  robdd_invar_vars_greater n b1 \\<and> robdd_invar_reduced b1\n\ngoal (1 subgoal):\n 1. robdd_invar_ids bs1", "by simp"], ["proof (state)\nthis:\n  robdd_invar_ids bs1\n\ngoal (1 subgoal):\n 1. \\<And>b1 b2 bs n apply_map rev_map.\n       \\<lbrakk>\\<And>b1a b2a bs n apply_map rev_map.\n                   \\<lbrakk>(case (b1a, b2a) of\n                             (b1, b2) \\<Rightarrow>\n                               size_robdd b1 + size_robdd b2)\n                            < (case (b1, b2) of\n                               (b1, b2) \\<Rightarrow>\n                                 size_robdd b1 + size_robdd b2);\n                    rev_map_invar bs rev_map;\n                    apply_map_invar bop bs bs1 bs2 apply_map;\n                    robdd_invar_ext bs1 n b1a;\n                    robdd_invar_ext bs2 n b2a\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>bs'.\n  subrobdds (fst (robdd_apply apply_map rev_map bop b1a b2a)) \\<union> bs\n  \\<subseteq> bs' \\<and>\n  robdd_invar_ext bs' n\n   (fst (robdd_apply apply_map rev_map bop b1a b2a)) \\<and>\n  apply_map_invar bop bs' bs1 bs2\n   (fst (snd (robdd_apply apply_map rev_map bop b1a b2a))) \\<and>\n  rev_map_invar bs'\n   (snd (snd (robdd_apply apply_map rev_map bop b1a b2a))) \\<and>\n  (\\<forall>a.\n      robdd_\\<alpha> (fst (robdd_apply apply_map rev_map bop b1a b2a)) a =\n      bop (robdd_\\<alpha> b1a a) (robdd_\\<alpha> b2a a));\n        rev_map_invar bs rev_map; apply_map_invar bop bs bs1 bs2 apply_map;\n        robdd_invar_ext bs1 n b1; robdd_invar_ext bs2 n b2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>bs'.\n                            subrobdds\n                             (fst (robdd_apply apply_map rev_map bop b1\n                                    b2)) \\<union>\n                            bs\n                            \\<subseteq> bs' \\<and>\n                            robdd_invar_ext bs' n\n                             (fst (robdd_apply apply_map rev_map bop b1\n                                    b2)) \\<and>\n                            apply_map_invar bop bs' bs1 bs2\n                             (fst (snd (robdd_apply apply_map rev_map bop b1\n   b2))) \\<and>\n                            rev_map_invar bs'\n                             (snd (snd (robdd_apply apply_map rev_map bop b1\n   b2))) \\<and>\n                            (\\<forall>a.\n                                robdd_\\<alpha>\n                                 (fst (robdd_apply apply_map rev_map bop b1\n  b2))\n                                 a =\n                                bop (robdd_\\<alpha> b1 a)\n                                 (robdd_\\<alpha> b2 a))", "from b2_invar"], ["proof (chain)\npicking this:\n  robdd_invar_ext bs2 n b2", "have invar_ids_bs2: \"robdd_invar_ids bs2\""], ["proof (prove)\nusing this:\n  robdd_invar_ext bs2 n b2\n\ngoal (1 subgoal):\n 1. robdd_invar_ids bs2", "unfolding robdd_invar_ext_def"], ["proof (prove)\nusing this:\n  b2 \\<in> subrobdds_set bs2 \\<and>\n  robdd_invar_ids bs2 \\<and>\n  robdd_invar_vars_greater n b2 \\<and> robdd_invar_reduced b2\n\ngoal (1 subgoal):\n 1. robdd_invar_ids bs2", "by simp"], ["proof (state)\nthis:\n  robdd_invar_ids bs2\n\ngoal (1 subgoal):\n 1. \\<And>b1 b2 bs n apply_map rev_map.\n       \\<lbrakk>\\<And>b1a b2a bs n apply_map rev_map.\n                   \\<lbrakk>(case (b1a, b2a) of\n                             (b1, b2) \\<Rightarrow>\n                               size_robdd b1 + size_robdd b2)\n                            < (case (b1, b2) of\n                               (b1, b2) \\<Rightarrow>\n                                 size_robdd b1 + size_robdd b2);\n                    rev_map_invar bs rev_map;\n                    apply_map_invar bop bs bs1 bs2 apply_map;\n                    robdd_invar_ext bs1 n b1a;\n                    robdd_invar_ext bs2 n b2a\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>bs'.\n  subrobdds (fst (robdd_apply apply_map rev_map bop b1a b2a)) \\<union> bs\n  \\<subseteq> bs' \\<and>\n  robdd_invar_ext bs' n\n   (fst (robdd_apply apply_map rev_map bop b1a b2a)) \\<and>\n  apply_map_invar bop bs' bs1 bs2\n   (fst (snd (robdd_apply apply_map rev_map bop b1a b2a))) \\<and>\n  rev_map_invar bs'\n   (snd (snd (robdd_apply apply_map rev_map bop b1a b2a))) \\<and>\n  (\\<forall>a.\n      robdd_\\<alpha> (fst (robdd_apply apply_map rev_map bop b1a b2a)) a =\n      bop (robdd_\\<alpha> b1a a) (robdd_\\<alpha> b2a a));\n        rev_map_invar bs rev_map; apply_map_invar bop bs bs1 bs2 apply_map;\n        robdd_invar_ext bs1 n b1; robdd_invar_ext bs2 n b2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>bs'.\n                            subrobdds\n                             (fst (robdd_apply apply_map rev_map bop b1\n                                    b2)) \\<union>\n                            bs\n                            \\<subseteq> bs' \\<and>\n                            robdd_invar_ext bs' n\n                             (fst (robdd_apply apply_map rev_map bop b1\n                                    b2)) \\<and>\n                            apply_map_invar bop bs' bs1 bs2\n                             (fst (snd (robdd_apply apply_map rev_map bop b1\n   b2))) \\<and>\n                            rev_map_invar bs'\n                             (snd (snd (robdd_apply apply_map rev_map bop b1\n   b2))) \\<and>\n                            (\\<forall>a.\n                                robdd_\\<alpha>\n                                 (fst (robdd_apply apply_map rev_map bop b1\n  b2))\n                                 a =\n                                bop (robdd_\\<alpha> b1 a)\n                                 (robdd_\\<alpha> b2 a))", "have invar_ids_equal_bs1: \"robdd_invar_ids_equal bs1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. robdd_invar_ids_equal bs1", "by (rule robdd_invar_ids_equal_intro [OF bs1_OK invar_ids_bs1])"], ["proof (state)\nthis:\n  robdd_invar_ids_equal bs1\n\ngoal (1 subgoal):\n 1. \\<And>b1 b2 bs n apply_map rev_map.\n       \\<lbrakk>\\<And>b1a b2a bs n apply_map rev_map.\n                   \\<lbrakk>(case (b1a, b2a) of\n                             (b1, b2) \\<Rightarrow>\n                               size_robdd b1 + size_robdd b2)\n                            < (case (b1, b2) of\n                               (b1, b2) \\<Rightarrow>\n                                 size_robdd b1 + size_robdd b2);\n                    rev_map_invar bs rev_map;\n                    apply_map_invar bop bs bs1 bs2 apply_map;\n                    robdd_invar_ext bs1 n b1a;\n                    robdd_invar_ext bs2 n b2a\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>bs'.\n  subrobdds (fst (robdd_apply apply_map rev_map bop b1a b2a)) \\<union> bs\n  \\<subseteq> bs' \\<and>\n  robdd_invar_ext bs' n\n   (fst (robdd_apply apply_map rev_map bop b1a b2a)) \\<and>\n  apply_map_invar bop bs' bs1 bs2\n   (fst (snd (robdd_apply apply_map rev_map bop b1a b2a))) \\<and>\n  rev_map_invar bs'\n   (snd (snd (robdd_apply apply_map rev_map bop b1a b2a))) \\<and>\n  (\\<forall>a.\n      robdd_\\<alpha> (fst (robdd_apply apply_map rev_map bop b1a b2a)) a =\n      bop (robdd_\\<alpha> b1a a) (robdd_\\<alpha> b2a a));\n        rev_map_invar bs rev_map; apply_map_invar bop bs bs1 bs2 apply_map;\n        robdd_invar_ext bs1 n b1; robdd_invar_ext bs2 n b2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>bs'.\n                            subrobdds\n                             (fst (robdd_apply apply_map rev_map bop b1\n                                    b2)) \\<union>\n                            bs\n                            \\<subseteq> bs' \\<and>\n                            robdd_invar_ext bs' n\n                             (fst (robdd_apply apply_map rev_map bop b1\n                                    b2)) \\<and>\n                            apply_map_invar bop bs' bs1 bs2\n                             (fst (snd (robdd_apply apply_map rev_map bop b1\n   b2))) \\<and>\n                            rev_map_invar bs'\n                             (snd (snd (robdd_apply apply_map rev_map bop b1\n   b2))) \\<and>\n                            (\\<forall>a.\n                                robdd_\\<alpha>\n                                 (fst (robdd_apply apply_map rev_map bop b1\n  b2))\n                                 a =\n                                bop (robdd_\\<alpha> b1 a)\n                                 (robdd_\\<alpha> b2 a))", "have invar_ids_equal_bs2: \"robdd_invar_ids_equal bs2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. robdd_invar_ids_equal bs2", "by (rule robdd_invar_ids_equal_intro [OF bs2_OK invar_ids_bs2])"], ["proof (state)\nthis:\n  robdd_invar_ids_equal bs2\n\ngoal (1 subgoal):\n 1. \\<And>b1 b2 bs n apply_map rev_map.\n       \\<lbrakk>\\<And>b1a b2a bs n apply_map rev_map.\n                   \\<lbrakk>(case (b1a, b2a) of\n                             (b1, b2) \\<Rightarrow>\n                               size_robdd b1 + size_robdd b2)\n                            < (case (b1, b2) of\n                               (b1, b2) \\<Rightarrow>\n                                 size_robdd b1 + size_robdd b2);\n                    rev_map_invar bs rev_map;\n                    apply_map_invar bop bs bs1 bs2 apply_map;\n                    robdd_invar_ext bs1 n b1a;\n                    robdd_invar_ext bs2 n b2a\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>bs'.\n  subrobdds (fst (robdd_apply apply_map rev_map bop b1a b2a)) \\<union> bs\n  \\<subseteq> bs' \\<and>\n  robdd_invar_ext bs' n\n   (fst (robdd_apply apply_map rev_map bop b1a b2a)) \\<and>\n  apply_map_invar bop bs' bs1 bs2\n   (fst (snd (robdd_apply apply_map rev_map bop b1a b2a))) \\<and>\n  rev_map_invar bs'\n   (snd (snd (robdd_apply apply_map rev_map bop b1a b2a))) \\<and>\n  (\\<forall>a.\n      robdd_\\<alpha> (fst (robdd_apply apply_map rev_map bop b1a b2a)) a =\n      bop (robdd_\\<alpha> b1a a) (robdd_\\<alpha> b2a a));\n        rev_map_invar bs rev_map; apply_map_invar bop bs bs1 bs2 apply_map;\n        robdd_invar_ext bs1 n b1; robdd_invar_ext bs2 n b2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>bs'.\n                            subrobdds\n                             (fst (robdd_apply apply_map rev_map bop b1\n                                    b2)) \\<union>\n                            bs\n                            \\<subseteq> bs' \\<and>\n                            robdd_invar_ext bs' n\n                             (fst (robdd_apply apply_map rev_map bop b1\n                                    b2)) \\<and>\n                            apply_map_invar bop bs' bs1 bs2\n                             (fst (snd (robdd_apply apply_map rev_map bop b1\n   b2))) \\<and>\n                            rev_map_invar bs'\n                             (snd (snd (robdd_apply apply_map rev_map bop b1\n   b2))) \\<and>\n                            (\\<forall>a.\n                                robdd_\\<alpha>\n                                 (fst (robdd_apply apply_map rev_map bop b1\n  b2))\n                                 a =\n                                bop (robdd_\\<alpha> b1 a)\n                                 (robdd_\\<alpha> b2 a))", "have invar_ids_leafs_bs : \"robdd_invar_ids_leafs bs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. robdd_invar_ids_leafs bs", "proof (rule robdd_invar_ids_leafs_intro[of bs, OF _ invar_ids_bs])"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>b. b \\<in> bs \\<Longrightarrow> robdd_invar_reduced b", "fix b"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>b. b \\<in> bs \\<Longrightarrow> robdd_invar_reduced b", "assume \"b \\<in> bs\""], ["proof (state)\nthis:\n  b \\<in> bs\n\ngoal (1 subgoal):\n 1. \\<And>b. b \\<in> bs \\<Longrightarrow> robdd_invar_reduced b", "with bs_OK[of b]"], ["proof (chain)\npicking this:\n  b \\<in> bs \\<Longrightarrow> robdd_invar b\n  b \\<in> bs", "have \"robdd_invar b\""], ["proof (prove)\nusing this:\n  b \\<in> bs \\<Longrightarrow> robdd_invar b\n  b \\<in> bs\n\ngoal (1 subgoal):\n 1. robdd_invar b", "by simp"], ["proof (state)\nthis:\n  robdd_invar b\n\ngoal (1 subgoal):\n 1. \\<And>b. b \\<in> bs \\<Longrightarrow> robdd_invar_reduced b", "thus \"robdd_invar_reduced b\""], ["proof (prove)\nusing this:\n  robdd_invar b\n\ngoal (1 subgoal):\n 1. robdd_invar_reduced b", "unfolding robdd_invar_def robdd_invar_ext_def"], ["proof (prove)\nusing this:\n  b \\<in> subrobdds_set {b} \\<and>\n  robdd_invar_ids {b} \\<and>\n  robdd_invar_vars_greater 0 b \\<and> robdd_invar_reduced b\n\ngoal (1 subgoal):\n 1. robdd_invar_reduced b", "by simp"], ["proof (state)\nthis:\n  robdd_invar_reduced b\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  robdd_invar_ids_leafs bs\n\ngoal (1 subgoal):\n 1. \\<And>b1 b2 bs n apply_map rev_map.\n       \\<lbrakk>\\<And>b1a b2a bs n apply_map rev_map.\n                   \\<lbrakk>(case (b1a, b2a) of\n                             (b1, b2) \\<Rightarrow>\n                               size_robdd b1 + size_robdd b2)\n                            < (case (b1, b2) of\n                               (b1, b2) \\<Rightarrow>\n                                 size_robdd b1 + size_robdd b2);\n                    rev_map_invar bs rev_map;\n                    apply_map_invar bop bs bs1 bs2 apply_map;\n                    robdd_invar_ext bs1 n b1a;\n                    robdd_invar_ext bs2 n b2a\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>bs'.\n  subrobdds (fst (robdd_apply apply_map rev_map bop b1a b2a)) \\<union> bs\n  \\<subseteq> bs' \\<and>\n  robdd_invar_ext bs' n\n   (fst (robdd_apply apply_map rev_map bop b1a b2a)) \\<and>\n  apply_map_invar bop bs' bs1 bs2\n   (fst (snd (robdd_apply apply_map rev_map bop b1a b2a))) \\<and>\n  rev_map_invar bs'\n   (snd (snd (robdd_apply apply_map rev_map bop b1a b2a))) \\<and>\n  (\\<forall>a.\n      robdd_\\<alpha> (fst (robdd_apply apply_map rev_map bop b1a b2a)) a =\n      bop (robdd_\\<alpha> b1a a) (robdd_\\<alpha> b2a a));\n        rev_map_invar bs rev_map; apply_map_invar bop bs bs1 bs2 apply_map;\n        robdd_invar_ext bs1 n b1; robdd_invar_ext bs2 n b2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>bs'.\n                            subrobdds\n                             (fst (robdd_apply apply_map rev_map bop b1\n                                    b2)) \\<union>\n                            bs\n                            \\<subseteq> bs' \\<and>\n                            robdd_invar_ext bs' n\n                             (fst (robdd_apply apply_map rev_map bop b1\n                                    b2)) \\<and>\n                            apply_map_invar bop bs' bs1 bs2\n                             (fst (snd (robdd_apply apply_map rev_map bop b1\n   b2))) \\<and>\n                            rev_map_invar bs'\n                             (snd (snd (robdd_apply apply_map rev_map bop b1\n   b2))) \\<and>\n                            (\\<forall>a.\n                                robdd_\\<alpha>\n                                 (fst (robdd_apply apply_map rev_map bop b1\n  b2))\n                                 a =\n                                bop (robdd_\\<alpha> b1 a)\n                                 (robdd_\\<alpha> b2 a))", "show \"\\<exists>bs'. subrobdds (fst ?res) \\<union> bs \\<subseteq> bs' \\<and> \n          robdd_invar_ext bs' n (fst ?res) \\<and>\n          apply_map_invar bop bs' bs1 bs2 (fst (snd ?res)) \\<and>\n          rev_map_invar bs' (snd (snd ?res)) \\<and>\n          (\\<forall>a. robdd_\\<alpha> (fst ?res) a = bop (robdd_\\<alpha> b1 a) (robdd_\\<alpha> b2 a))\" \n          (is \"\\<exists>bs'. ?P bs'\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>bs'.\n       subrobdds (fst (robdd_apply apply_map rev_map bop b1 b2)) \\<union> bs\n       \\<subseteq> bs' \\<and>\n       robdd_invar_ext bs' n\n        (fst (robdd_apply apply_map rev_map bop b1 b2)) \\<and>\n       apply_map_invar bop bs' bs1 bs2\n        (fst (snd (robdd_apply apply_map rev_map bop b1 b2))) \\<and>\n       rev_map_invar bs'\n        (snd (snd (robdd_apply apply_map rev_map bop b1 b2))) \\<and>\n       (\\<forall>a.\n           robdd_\\<alpha> (fst (robdd_apply apply_map rev_map bop b1 b2))\n            a =\n           bop (robdd_\\<alpha> b1 a) (robdd_\\<alpha> b2 a))", "proof (cases \"bool_op_extend bop (robdd_to_bool b1) (robdd_to_bool b2)\")"], ["proof (state)\ngoal (2 subgoals):\n 1. bool_op_extend bop (robdd_to_bool b1) (robdd_to_bool b2) =\n    None \\<Longrightarrow>\n    \\<exists>bs'.\n       subrobdds (fst (robdd_apply apply_map rev_map bop b1 b2)) \\<union> bs\n       \\<subseteq> bs' \\<and>\n       robdd_invar_ext bs' n\n        (fst (robdd_apply apply_map rev_map bop b1 b2)) \\<and>\n       apply_map_invar bop bs' bs1 bs2\n        (fst (snd (robdd_apply apply_map rev_map bop b1 b2))) \\<and>\n       rev_map_invar bs'\n        (snd (snd (robdd_apply apply_map rev_map bop b1 b2))) \\<and>\n       (\\<forall>a.\n           robdd_\\<alpha> (fst (robdd_apply apply_map rev_map bop b1 b2))\n            a =\n           bop (robdd_\\<alpha> b1 a) (robdd_\\<alpha> b2 a))\n 2. \\<And>a.\n       bool_op_extend bop (robdd_to_bool b1) (robdd_to_bool b2) =\n       Some a \\<Longrightarrow>\n       \\<exists>bs'.\n          subrobdds (fst (robdd_apply apply_map rev_map bop b1 b2)) \\<union>\n          bs\n          \\<subseteq> bs' \\<and>\n          robdd_invar_ext bs' n\n           (fst (robdd_apply apply_map rev_map bop b1 b2)) \\<and>\n          apply_map_invar bop bs' bs1 bs2\n           (fst (snd (robdd_apply apply_map rev_map bop b1 b2))) \\<and>\n          rev_map_invar bs'\n           (snd (snd (robdd_apply apply_map rev_map bop b1 b2))) \\<and>\n          (\\<forall>a.\n              robdd_\\<alpha> (fst (robdd_apply apply_map rev_map bop b1 b2))\n               a =\n              bop (robdd_\\<alpha> b1 a) (robdd_\\<alpha> b2 a))", "case (Some f)"], ["proof (state)\nthis:\n  bool_op_extend bop (robdd_to_bool b1) (robdd_to_bool b2) = Some f\n\ngoal (2 subgoals):\n 1. bool_op_extend bop (robdd_to_bool b1) (robdd_to_bool b2) =\n    None \\<Longrightarrow>\n    \\<exists>bs'.\n       subrobdds (fst (robdd_apply apply_map rev_map bop b1 b2)) \\<union> bs\n       \\<subseteq> bs' \\<and>\n       robdd_invar_ext bs' n\n        (fst (robdd_apply apply_map rev_map bop b1 b2)) \\<and>\n       apply_map_invar bop bs' bs1 bs2\n        (fst (snd (robdd_apply apply_map rev_map bop b1 b2))) \\<and>\n       rev_map_invar bs'\n        (snd (snd (robdd_apply apply_map rev_map bop b1 b2))) \\<and>\n       (\\<forall>a.\n           robdd_\\<alpha> (fst (robdd_apply apply_map rev_map bop b1 b2))\n            a =\n           bop (robdd_\\<alpha> b1 a) (robdd_\\<alpha> b2 a))\n 2. \\<And>a.\n       bool_op_extend bop (robdd_to_bool b1) (robdd_to_bool b2) =\n       Some a \\<Longrightarrow>\n       \\<exists>bs'.\n          subrobdds (fst (robdd_apply apply_map rev_map bop b1 b2)) \\<union>\n          bs\n          \\<subseteq> bs' \\<and>\n          robdd_invar_ext bs' n\n           (fst (robdd_apply apply_map rev_map bop b1 b2)) \\<and>\n          apply_map_invar bop bs' bs1 bs2\n           (fst (snd (robdd_apply apply_map rev_map bop b1 b2))) \\<and>\n          rev_map_invar bs'\n           (snd (snd (robdd_apply apply_map rev_map bop b1 b2))) \\<and>\n          (\\<forall>a.\n              robdd_\\<alpha> (fst (robdd_apply apply_map rev_map bop b1 b2))\n               a =\n              bop (robdd_\\<alpha> b1 a) (robdd_\\<alpha> b2 a))", "note extend_eq_Some = this"], ["proof (state)\nthis:\n  bool_op_extend bop (robdd_to_bool b1) (robdd_to_bool b2) = Some f\n\ngoal (2 subgoals):\n 1. bool_op_extend bop (robdd_to_bool b1) (robdd_to_bool b2) =\n    None \\<Longrightarrow>\n    \\<exists>bs'.\n       subrobdds (fst (robdd_apply apply_map rev_map bop b1 b2)) \\<union> bs\n       \\<subseteq> bs' \\<and>\n       robdd_invar_ext bs' n\n        (fst (robdd_apply apply_map rev_map bop b1 b2)) \\<and>\n       apply_map_invar bop bs' bs1 bs2\n        (fst (snd (robdd_apply apply_map rev_map bop b1 b2))) \\<and>\n       rev_map_invar bs'\n        (snd (snd (robdd_apply apply_map rev_map bop b1 b2))) \\<and>\n       (\\<forall>a.\n           robdd_\\<alpha> (fst (robdd_apply apply_map rev_map bop b1 b2))\n            a =\n           bop (robdd_\\<alpha> b1 a) (robdd_\\<alpha> b2 a))\n 2. \\<And>a.\n       bool_op_extend bop (robdd_to_bool b1) (robdd_to_bool b2) =\n       Some a \\<Longrightarrow>\n       \\<exists>bs'.\n          subrobdds (fst (robdd_apply apply_map rev_map bop b1 b2)) \\<union>\n          bs\n          \\<subseteq> bs' \\<and>\n          robdd_invar_ext bs' n\n           (fst (robdd_apply apply_map rev_map bop b1 b2)) \\<and>\n          apply_map_invar bop bs' bs1 bs2\n           (fst (snd (robdd_apply apply_map rev_map bop b1 b2))) \\<and>\n          rev_map_invar bs'\n           (snd (snd (robdd_apply apply_map rev_map bop b1 b2))) \\<and>\n          (\\<forall>a.\n              robdd_\\<alpha> (fst (robdd_apply apply_map rev_map bop b1 b2))\n               a =\n              bop (robdd_\\<alpha> b1 a) (robdd_\\<alpha> b2 a))", "have res_eq[simp]: \"?res = (robdd_leaf f, apply_map, rev_map)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. robdd_apply apply_map rev_map bop b1 b2 =\n    (robdd_leaf f, apply_map, rev_map)", "using res_def"], ["proof (prove)\nusing this:\n  robdd_apply apply_map rev_map bop b1 b2 =\n  (case bool_op_extend bop (robdd_to_bool b1) (robdd_to_bool b2) of\n   None \\<Rightarrow>\n     case c_lookup (robdd_get_id b1, robdd_get_id b2) apply_map of\n     None \\<Rightarrow>\n       let (l1, r1, var, l2, r2) = robdd_apply_next b1 b2;\n           (l, apply_map, rev_map) =\n             robdd_apply apply_map rev_map bop l1 l2;\n           (r, apply_map, rev_map) =\n             robdd_apply apply_map rev_map bop r1 r2;\n           (b, rev_map) = robdd_construct rev_map l var r;\n           apply_map =\n             c_update (robdd_get_id b1, robdd_get_id b2) b apply_map\n       in (b, apply_map, rev_map)\n     | Some b3 \\<Rightarrow> (b3, apply_map, rev_map)\n   | Some f \\<Rightarrow> (robdd_leaf f, apply_map, rev_map))\n\ngoal (1 subgoal):\n 1. robdd_apply apply_map rev_map bop b1 b2 =\n    (robdd_leaf f, apply_map, rev_map)", "by (simp add: extend_eq_Some)"], ["proof (state)\nthis:\n  robdd_apply apply_map rev_map bop b1 b2 =\n  (robdd_leaf f, apply_map, rev_map)\n\ngoal (2 subgoals):\n 1. bool_op_extend bop (robdd_to_bool b1) (robdd_to_bool b2) =\n    None \\<Longrightarrow>\n    \\<exists>bs'.\n       subrobdds (fst (robdd_apply apply_map rev_map bop b1 b2)) \\<union> bs\n       \\<subseteq> bs' \\<and>\n       robdd_invar_ext bs' n\n        (fst (robdd_apply apply_map rev_map bop b1 b2)) \\<and>\n       apply_map_invar bop bs' bs1 bs2\n        (fst (snd (robdd_apply apply_map rev_map bop b1 b2))) \\<and>\n       rev_map_invar bs'\n        (snd (snd (robdd_apply apply_map rev_map bop b1 b2))) \\<and>\n       (\\<forall>a.\n           robdd_\\<alpha> (fst (robdd_apply apply_map rev_map bop b1 b2))\n            a =\n           bop (robdd_\\<alpha> b1 a) (robdd_\\<alpha> b2 a))\n 2. \\<And>a.\n       bool_op_extend bop (robdd_to_bool b1) (robdd_to_bool b2) =\n       Some a \\<Longrightarrow>\n       \\<exists>bs'.\n          subrobdds (fst (robdd_apply apply_map rev_map bop b1 b2)) \\<union>\n          bs\n          \\<subseteq> bs' \\<and>\n          robdd_invar_ext bs' n\n           (fst (robdd_apply apply_map rev_map bop b1 b2)) \\<and>\n          apply_map_invar bop bs' bs1 bs2\n           (fst (snd (robdd_apply apply_map rev_map bop b1 b2))) \\<and>\n          rev_map_invar bs'\n           (snd (snd (robdd_apply apply_map rev_map bop b1 b2))) \\<and>\n          (\\<forall>a.\n              robdd_\\<alpha> (fst (robdd_apply apply_map rev_map bop b1 b2))\n               a =\n              bop (robdd_\\<alpha> b1 a) (robdd_\\<alpha> b2 a))", "from extend_eq_Some"], ["proof (chain)\npicking this:\n  bool_op_extend bop (robdd_to_bool b1) (robdd_to_bool b2) = Some f", "have f_eq: \"\\<forall>a. f = bop (robdd_\\<alpha> b1 a) (robdd_\\<alpha> b2 a)\""], ["proof (prove)\nusing this:\n  bool_op_extend bop (robdd_to_bool b1) (robdd_to_bool b2) = Some f\n\ngoal (1 subgoal):\n 1. \\<forall>a. f = bop (robdd_\\<alpha> b1 a) (robdd_\\<alpha> b2 a)", "apply (case_tac b1, case_tac [!] b2)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>x1 x1a.\n       \\<lbrakk>bool_op_extend bop (robdd_to_bool b1) (robdd_to_bool b2) =\n                Some f;\n        b1 = robdd_leaf x1;\n        bool_op_extend bop (robdd_to_bool b1) (robdd_to_bool b2) = Some f;\n        b2 = robdd_leaf x1a\\<rbrakk>\n       \\<Longrightarrow> \\<forall>a.\n                            f =\n                            bop (robdd_\\<alpha> b1 a) (robdd_\\<alpha> b2 a)\n 2. \\<And>x1 x21 x22 x23 x24.\n       \\<lbrakk>bool_op_extend bop (robdd_to_bool b1) (robdd_to_bool b2) =\n                Some f;\n        b1 = robdd_leaf x1;\n        bool_op_extend bop (robdd_to_bool b1) (robdd_to_bool b2) = Some f;\n        b2 = robdd_var x21 x22 x23 x24\\<rbrakk>\n       \\<Longrightarrow> \\<forall>a.\n                            f =\n                            bop (robdd_\\<alpha> b1 a) (robdd_\\<alpha> b2 a)\n 3. \\<And>x21 x22 x23 x24 x1.\n       \\<lbrakk>bool_op_extend bop (robdd_to_bool b1) (robdd_to_bool b2) =\n                Some f;\n        b1 = robdd_var x21 x22 x23 x24;\n        bool_op_extend bop (robdd_to_bool b1) (robdd_to_bool b2) = Some f;\n        b2 = robdd_leaf x1\\<rbrakk>\n       \\<Longrightarrow> \\<forall>a.\n                            f =\n                            bop (robdd_\\<alpha> b1 a) (robdd_\\<alpha> b2 a)\n 4. \\<And>x21 x22 x23 x24 x21a x22a x23a x24a.\n       \\<lbrakk>bool_op_extend bop (robdd_to_bool b1) (robdd_to_bool b2) =\n                Some f;\n        b1 = robdd_var x21 x22 x23 x24;\n        bool_op_extend bop (robdd_to_bool b1) (robdd_to_bool b2) = Some f;\n        b2 = robdd_var x21a x22a x23a x24a\\<rbrakk>\n       \\<Longrightarrow> \\<forall>a.\n                            f =\n                            bop (robdd_\\<alpha> b1 a) (robdd_\\<alpha> b2 a)", "apply (simp_all split: if_splits)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>x1 x21 x22 x23 x24.\n       \\<lbrakk>b1 = robdd_leaf x1; b2 = robdd_var x21 x22 x23 x24;\n        bop x1 True = f; bop x1 False = f\\<rbrakk>\n       \\<Longrightarrow> \\<forall>a.\n                            (a x23 \\<longrightarrow>\n                             f = bop x1 (robdd_\\<alpha> x22 a)) \\<and>\n                            (\\<not> a x23 \\<longrightarrow>\n                             f = bop x1 (robdd_\\<alpha> x24 a))\n 2. \\<And>x21 x22 x23 x24 x1.\n       \\<lbrakk>b1 = robdd_var x21 x22 x23 x24; b2 = robdd_leaf x1;\n        bop True x1 = f; bop False x1 = f\\<rbrakk>\n       \\<Longrightarrow> \\<forall>a.\n                            (a x23 \\<longrightarrow>\n                             f = bop (robdd_\\<alpha> x22 a) x1) \\<and>\n                            (\\<not> a x23 \\<longrightarrow>\n                             f = bop (robdd_\\<alpha> x24 a) x1)\n 3. \\<And>x21 x22 x23 x24 x21a x22a x23a x24a.\n       \\<lbrakk>b1 = robdd_var x21 x22 x23 x24;\n        b2 = robdd_var x21a x22a x23a x24a; bop True False = f;\n        bop False True = f; bop False False = f; bop True True = f\\<rbrakk>\n       \\<Longrightarrow> \\<forall>a.\n                            (a x23 \\<longrightarrow>\n                             (a x23a \\<longrightarrow>\n                              f =\n                              bop (robdd_\\<alpha> x22 a)\n                               (robdd_\\<alpha> x22a a)) \\<and>\n                             (\\<not> a x23a \\<longrightarrow>\n                              f =\n                              bop (robdd_\\<alpha> x22 a)\n                               (robdd_\\<alpha> x24a a))) \\<and>\n                            (\\<not> a x23 \\<longrightarrow>\n                             (a x23a \\<longrightarrow>\n                              f =\n                              bop (robdd_\\<alpha> x24 a)\n                               (robdd_\\<alpha> x22a a)) \\<and>\n                             (\\<not> a x23a \\<longrightarrow>\n                              f =\n                              bop (robdd_\\<alpha> x24 a)\n                               (robdd_\\<alpha> x24a a)))", "apply (auto, (metis(full_types))+)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  \\<forall>a. f = bop (robdd_\\<alpha> b1 a) (robdd_\\<alpha> b2 a)\n\ngoal (2 subgoals):\n 1. bool_op_extend bop (robdd_to_bool b1) (robdd_to_bool b2) =\n    None \\<Longrightarrow>\n    \\<exists>bs'.\n       subrobdds (fst (robdd_apply apply_map rev_map bop b1 b2)) \\<union> bs\n       \\<subseteq> bs' \\<and>\n       robdd_invar_ext bs' n\n        (fst (robdd_apply apply_map rev_map bop b1 b2)) \\<and>\n       apply_map_invar bop bs' bs1 bs2\n        (fst (snd (robdd_apply apply_map rev_map bop b1 b2))) \\<and>\n       rev_map_invar bs'\n        (snd (snd (robdd_apply apply_map rev_map bop b1 b2))) \\<and>\n       (\\<forall>a.\n           robdd_\\<alpha> (fst (robdd_apply apply_map rev_map bop b1 b2))\n            a =\n           bop (robdd_\\<alpha> b1 a) (robdd_\\<alpha> b2 a))\n 2. \\<And>a.\n       bool_op_extend bop (robdd_to_bool b1) (robdd_to_bool b2) =\n       Some a \\<Longrightarrow>\n       \\<exists>bs'.\n          subrobdds (fst (robdd_apply apply_map rev_map bop b1 b2)) \\<union>\n          bs\n          \\<subseteq> bs' \\<and>\n          robdd_invar_ext bs' n\n           (fst (robdd_apply apply_map rev_map bop b1 b2)) \\<and>\n          apply_map_invar bop bs' bs1 bs2\n           (fst (snd (robdd_apply apply_map rev_map bop b1 b2))) \\<and>\n          rev_map_invar bs'\n           (snd (snd (robdd_apply apply_map rev_map bop b1 b2))) \\<and>\n          (\\<forall>a.\n              robdd_\\<alpha> (fst (robdd_apply apply_map rev_map bop b1 b2))\n               a =\n              bop (robdd_\\<alpha> b1 a) (robdd_\\<alpha> b2 a))", "from invar_ids_leafs_bs invar_ids_bs"], ["proof (chain)\npicking this:\n  robdd_invar_ids_leafs bs\n  robdd_invar_ids bs", "have invar_ids_bs': \"robdd_invar_ids (insert (robdd_leaf f) bs)\""], ["proof (prove)\nusing this:\n  robdd_invar_ids_leafs bs\n  robdd_invar_ids bs\n\ngoal (1 subgoal):\n 1. robdd_invar_ids (insert (robdd_leaf f) bs)", "apply (simp add: robdd_invar_ids_leafs_def robdd_invar_ids_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>b.\n                b \\<in> subrobdds_set bs \\<longrightarrow>\n                (\\<forall>f.\n                    (robdd_\\<alpha> b = robdd_\\<alpha> (robdd_leaf f)) =\n                    (robdd_get_id b = (if f then 1 else 0)));\n     \\<forall>b1 b2.\n        b1 \\<in> subrobdds_set bs \\<and>\n        b2 \\<in> subrobdds_set bs \\<longrightarrow>\n        (robdd_\\<alpha> b1 = robdd_\\<alpha> b2) =\n        (robdd_get_id b1 = robdd_get_id b2)\\<rbrakk>\n    \\<Longrightarrow> \\<forall>b1 b2.\n                         (b1 = robdd_leaf f \\<or>\n                          b1 \\<in> subrobdds_set bs) \\<and>\n                         (b2 = robdd_leaf f \\<or>\n                          b2 \\<in> subrobdds_set bs) \\<longrightarrow>\n                         (robdd_\\<alpha> b1 = robdd_\\<alpha> b2) =\n                         (robdd_get_id b1 = robdd_get_id b2)", "apply (intro allI impI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>b1 b2.\n       \\<lbrakk>\\<forall>b.\n                   b \\<in> subrobdds_set bs \\<longrightarrow>\n                   (\\<forall>f.\n                       (robdd_\\<alpha> b = robdd_\\<alpha> (robdd_leaf f)) =\n                       (robdd_get_id b = (if f then 1 else 0)));\n        \\<forall>b1 b2.\n           b1 \\<in> subrobdds_set bs \\<and>\n           b2 \\<in> subrobdds_set bs \\<longrightarrow>\n           (robdd_\\<alpha> b1 = robdd_\\<alpha> b2) =\n           (robdd_get_id b1 = robdd_get_id b2);\n        (b1 = robdd_leaf f \\<or> b1 \\<in> subrobdds_set bs) \\<and>\n        (b2 = robdd_leaf f \\<or> b2 \\<in> subrobdds_set bs)\\<rbrakk>\n       \\<Longrightarrow> (robdd_\\<alpha> b1 = robdd_\\<alpha> b2) =\n                         (robdd_get_id b1 = robdd_get_id b2)", "apply (elim conjE disjE)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>b1 b2.\n       \\<lbrakk>\\<forall>b.\n                   b \\<in> subrobdds_set bs \\<longrightarrow>\n                   (\\<forall>f.\n                       (robdd_\\<alpha> b = robdd_\\<alpha> (robdd_leaf f)) =\n                       (robdd_get_id b = (if f then 1 else 0)));\n        \\<forall>b1 b2.\n           b1 \\<in> subrobdds_set bs \\<and>\n           b2 \\<in> subrobdds_set bs \\<longrightarrow>\n           (robdd_\\<alpha> b1 = robdd_\\<alpha> b2) =\n           (robdd_get_id b1 = robdd_get_id b2);\n        b1 = robdd_leaf f; b2 = robdd_leaf f\\<rbrakk>\n       \\<Longrightarrow> (robdd_\\<alpha> b1 = robdd_\\<alpha> b2) =\n                         (robdd_get_id b1 = robdd_get_id b2)\n 2. \\<And>b1 b2.\n       \\<lbrakk>\\<forall>b.\n                   b \\<in> subrobdds_set bs \\<longrightarrow>\n                   (\\<forall>f.\n                       (robdd_\\<alpha> b = robdd_\\<alpha> (robdd_leaf f)) =\n                       (robdd_get_id b = (if f then 1 else 0)));\n        \\<forall>b1 b2.\n           b1 \\<in> subrobdds_set bs \\<and>\n           b2 \\<in> subrobdds_set bs \\<longrightarrow>\n           (robdd_\\<alpha> b1 = robdd_\\<alpha> b2) =\n           (robdd_get_id b1 = robdd_get_id b2);\n        b1 = robdd_leaf f; b2 \\<in> subrobdds_set bs\\<rbrakk>\n       \\<Longrightarrow> (robdd_\\<alpha> b1 = robdd_\\<alpha> b2) =\n                         (robdd_get_id b1 = robdd_get_id b2)\n 3. \\<And>b1 b2.\n       \\<lbrakk>\\<forall>b.\n                   b \\<in> subrobdds_set bs \\<longrightarrow>\n                   (\\<forall>f.\n                       (robdd_\\<alpha> b = robdd_\\<alpha> (robdd_leaf f)) =\n                       (robdd_get_id b = (if f then 1 else 0)));\n        \\<forall>b1 b2.\n           b1 \\<in> subrobdds_set bs \\<and>\n           b2 \\<in> subrobdds_set bs \\<longrightarrow>\n           (robdd_\\<alpha> b1 = robdd_\\<alpha> b2) =\n           (robdd_get_id b1 = robdd_get_id b2);\n        b1 \\<in> subrobdds_set bs; b2 = robdd_leaf f\\<rbrakk>\n       \\<Longrightarrow> (robdd_\\<alpha> b1 = robdd_\\<alpha> b2) =\n                         (robdd_get_id b1 = robdd_get_id b2)\n 4. \\<And>b1 b2.\n       \\<lbrakk>\\<forall>b.\n                   b \\<in> subrobdds_set bs \\<longrightarrow>\n                   (\\<forall>f.\n                       (robdd_\\<alpha> b = robdd_\\<alpha> (robdd_leaf f)) =\n                       (robdd_get_id b = (if f then 1 else 0)));\n        \\<forall>b1 b2.\n           b1 \\<in> subrobdds_set bs \\<and>\n           b2 \\<in> subrobdds_set bs \\<longrightarrow>\n           (robdd_\\<alpha> b1 = robdd_\\<alpha> b2) =\n           (robdd_get_id b1 = robdd_get_id b2);\n        b1 \\<in> subrobdds_set bs; b2 \\<in> subrobdds_set bs\\<rbrakk>\n       \\<Longrightarrow> (robdd_\\<alpha> b1 = robdd_\\<alpha> b2) =\n                         (robdd_get_id b1 = robdd_get_id b2)", "apply (simp_all)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>b1 b2.\n       \\<lbrakk>\\<forall>b.\n                   b \\<in> subrobdds_set bs \\<longrightarrow>\n                   (\\<forall>f.\n                       (robdd_\\<alpha> b = robdd_\\<alpha> (robdd_leaf f)) =\n                       (robdd_get_id b = (if f then 1 else 0)));\n        \\<forall>b1 b2.\n           b1 \\<in> subrobdds_set bs \\<and>\n           b2 \\<in> subrobdds_set bs \\<longrightarrow>\n           (robdd_\\<alpha> b1 = robdd_\\<alpha> b2) =\n           (robdd_get_id b1 = robdd_get_id b2);\n        b1 = robdd_leaf f; b2 \\<in> subrobdds_set bs\\<rbrakk>\n       \\<Longrightarrow> (f \\<longrightarrow>\n                          (robdd_\\<alpha> robdd_one = robdd_\\<alpha> b2) =\n                          (Suc 0 = robdd_get_id b2)) \\<and>\n                         (\\<not> f \\<longrightarrow>\n                          (robdd_\\<alpha> robdd_zero = robdd_\\<alpha> b2) =\n                          (robdd_get_id b2 = 0))", "apply (metis One_nat_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  robdd_invar_ids (insert (robdd_leaf f) bs)\n\ngoal (2 subgoals):\n 1. bool_op_extend bop (robdd_to_bool b1) (robdd_to_bool b2) =\n    None \\<Longrightarrow>\n    \\<exists>bs'.\n       subrobdds (fst (robdd_apply apply_map rev_map bop b1 b2)) \\<union> bs\n       \\<subseteq> bs' \\<and>\n       robdd_invar_ext bs' n\n        (fst (robdd_apply apply_map rev_map bop b1 b2)) \\<and>\n       apply_map_invar bop bs' bs1 bs2\n        (fst (snd (robdd_apply apply_map rev_map bop b1 b2))) \\<and>\n       rev_map_invar bs'\n        (snd (snd (robdd_apply apply_map rev_map bop b1 b2))) \\<and>\n       (\\<forall>a.\n           robdd_\\<alpha> (fst (robdd_apply apply_map rev_map bop b1 b2))\n            a =\n           bop (robdd_\\<alpha> b1 a) (robdd_\\<alpha> b2 a))\n 2. \\<And>a.\n       bool_op_extend bop (robdd_to_bool b1) (robdd_to_bool b2) =\n       Some a \\<Longrightarrow>\n       \\<exists>bs'.\n          subrobdds (fst (robdd_apply apply_map rev_map bop b1 b2)) \\<union>\n          bs\n          \\<subseteq> bs' \\<and>\n          robdd_invar_ext bs' n\n           (fst (robdd_apply apply_map rev_map bop b1 b2)) \\<and>\n          apply_map_invar bop bs' bs1 bs2\n           (fst (snd (robdd_apply apply_map rev_map bop b1 b2))) \\<and>\n          rev_map_invar bs'\n           (snd (snd (robdd_apply apply_map rev_map bop b1 b2))) \\<and>\n          (\\<forall>a.\n              robdd_\\<alpha> (fst (robdd_apply apply_map rev_map bop b1 b2))\n               a =\n              bop (robdd_\\<alpha> b1 a) (robdd_\\<alpha> b2 a))", "have invar_ids_equal_bs': \"robdd_invar_ids_equal (insert (robdd_leaf f) bs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. robdd_invar_ids_equal (insert (robdd_leaf f) bs)", "apply (rule robdd_invar_ids_equal_intro [OF _ invar_ids_bs'])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>b.\n       b \\<in> insert (robdd_leaf f) bs \\<Longrightarrow> robdd_invar b", "apply (auto simp add: bs_OK)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  robdd_invar_ids_equal (insert (robdd_leaf f) bs)\n\ngoal (2 subgoals):\n 1. bool_op_extend bop (robdd_to_bool b1) (robdd_to_bool b2) =\n    None \\<Longrightarrow>\n    \\<exists>bs'.\n       subrobdds (fst (robdd_apply apply_map rev_map bop b1 b2)) \\<union> bs\n       \\<subseteq> bs' \\<and>\n       robdd_invar_ext bs' n\n        (fst (robdd_apply apply_map rev_map bop b1 b2)) \\<and>\n       apply_map_invar bop bs' bs1 bs2\n        (fst (snd (robdd_apply apply_map rev_map bop b1 b2))) \\<and>\n       rev_map_invar bs'\n        (snd (snd (robdd_apply apply_map rev_map bop b1 b2))) \\<and>\n       (\\<forall>a.\n           robdd_\\<alpha> (fst (robdd_apply apply_map rev_map bop b1 b2))\n            a =\n           bop (robdd_\\<alpha> b1 a) (robdd_\\<alpha> b2 a))\n 2. \\<And>a.\n       bool_op_extend bop (robdd_to_bool b1) (robdd_to_bool b2) =\n       Some a \\<Longrightarrow>\n       \\<exists>bs'.\n          subrobdds (fst (robdd_apply apply_map rev_map bop b1 b2)) \\<union>\n          bs\n          \\<subseteq> bs' \\<and>\n          robdd_invar_ext bs' n\n           (fst (robdd_apply apply_map rev_map bop b1 b2)) \\<and>\n          apply_map_invar bop bs' bs1 bs2\n           (fst (snd (robdd_apply apply_map rev_map bop b1 b2))) \\<and>\n          rev_map_invar bs'\n           (snd (snd (robdd_apply apply_map rev_map bop b1 b2))) \\<and>\n          (\\<forall>a.\n              robdd_\\<alpha> (fst (robdd_apply apply_map rev_map bop b1 b2))\n               a =\n              bop (robdd_\\<alpha> b1 a) (robdd_\\<alpha> b2 a))", "from invar_rev_map invar_ids_bs'"], ["proof (chain)\npicking this:\n  rev_map_invar bs rev_map\n  robdd_invar_ids (insert (robdd_leaf f) bs)", "have invar_rev_map': \"rev_map_invar (insert (robdd_leaf f) bs) rev_map\""], ["proof (prove)\nusing this:\n  rev_map_invar bs rev_map\n  robdd_invar_ids (insert (robdd_leaf f) bs)\n\ngoal (1 subgoal):\n 1. rev_map_invar (insert (robdd_leaf f) bs) rev_map", "unfolding rev_map_invar_def"], ["proof (prove)\nusing this:\n  r_invar (fst rev_map) \\<and>\n  1 < snd rev_map \\<and>\n  (\\<forall>b\\<in>subrobdds_set bs.\n      robdd_invar_ext bs 0 b \\<and> robdd_get_id b < snd rev_map) \\<and>\n  (\\<forall>li v ri b.\n      r_\\<alpha> (fst rev_map) (li, v, ri) = Some b \\<longrightarrow>\n      robdd_invar_ext bs v b \\<and>\n      b \\<in> bs \\<and>\n      (\\<exists>l r i.\n          b = robdd_var i l v r \\<and>\n          robdd_get_id l = li \\<and> robdd_get_id r = ri)) \\<and>\n  (\\<forall>i l r v.\n      robdd_var i l v r \\<in> subrobdds_set bs \\<longrightarrow>\n      r_\\<alpha> (fst rev_map) (robdd_get_id l, v, robdd_get_id r) =\n      Some (robdd_var i l v r))\n  robdd_invar_ids (insert (robdd_leaf f) bs)\n\ngoal (1 subgoal):\n 1. r_invar (fst rev_map) \\<and>\n    1 < snd rev_map \\<and>\n    (\\<forall>b\\<in>subrobdds_set (insert (robdd_leaf f) bs).\n        robdd_invar_ext (insert (robdd_leaf f) bs) 0 b \\<and>\n        robdd_get_id b < snd rev_map) \\<and>\n    (\\<forall>li v ri b.\n        r_\\<alpha> (fst rev_map) (li, v, ri) = Some b \\<longrightarrow>\n        robdd_invar_ext (insert (robdd_leaf f) bs) v b \\<and>\n        b \\<in> insert (robdd_leaf f) bs \\<and>\n        (\\<exists>l r i.\n            b = robdd_var i l v r \\<and>\n            robdd_get_id l = li \\<and> robdd_get_id r = ri)) \\<and>\n    (\\<forall>i l r v.\n        robdd_var i l v r\n        \\<in> subrobdds_set (insert (robdd_leaf f) bs) \\<longrightarrow>\n        r_\\<alpha> (fst rev_map) (robdd_get_id l, v, robdd_get_id r) =\n        Some (robdd_var i l v r))", "by (simp add: robdd_invar_ext_def)"], ["proof (state)\nthis:\n  rev_map_invar (insert (robdd_leaf f) bs) rev_map\n\ngoal (2 subgoals):\n 1. bool_op_extend bop (robdd_to_bool b1) (robdd_to_bool b2) =\n    None \\<Longrightarrow>\n    \\<exists>bs'.\n       subrobdds (fst (robdd_apply apply_map rev_map bop b1 b2)) \\<union> bs\n       \\<subseteq> bs' \\<and>\n       robdd_invar_ext bs' n\n        (fst (robdd_apply apply_map rev_map bop b1 b2)) \\<and>\n       apply_map_invar bop bs' bs1 bs2\n        (fst (snd (robdd_apply apply_map rev_map bop b1 b2))) \\<and>\n       rev_map_invar bs'\n        (snd (snd (robdd_apply apply_map rev_map bop b1 b2))) \\<and>\n       (\\<forall>a.\n           robdd_\\<alpha> (fst (robdd_apply apply_map rev_map bop b1 b2))\n            a =\n           bop (robdd_\\<alpha> b1 a) (robdd_\\<alpha> b2 a))\n 2. \\<And>a.\n       bool_op_extend bop (robdd_to_bool b1) (robdd_to_bool b2) =\n       Some a \\<Longrightarrow>\n       \\<exists>bs'.\n          subrobdds (fst (robdd_apply apply_map rev_map bop b1 b2)) \\<union>\n          bs\n          \\<subseteq> bs' \\<and>\n          robdd_invar_ext bs' n\n           (fst (robdd_apply apply_map rev_map bop b1 b2)) \\<and>\n          apply_map_invar bop bs' bs1 bs2\n           (fst (snd (robdd_apply apply_map rev_map bop b1 b2))) \\<and>\n          rev_map_invar bs'\n           (snd (snd (robdd_apply apply_map rev_map bop b1 b2))) \\<and>\n          (\\<forall>a.\n              robdd_\\<alpha> (fst (robdd_apply apply_map rev_map bop b1 b2))\n               a =\n              bop (robdd_\\<alpha> b1 a) (robdd_\\<alpha> b2 a))", "from robdd_id_map_union [of \"{robdd_leaf f}\" bs] invar_ids_equal_bs'"], ["proof (chain)\npicking this:\n  robdd_invar_ids_equal ({robdd_leaf f} \\<union> bs) \\<Longrightarrow>\n  robdd_id_map ({robdd_leaf f} \\<union> bs) =\n  robdd_id_map {robdd_leaf f} ++ robdd_id_map bs\n  robdd_invar_ids_equal (insert (robdd_leaf f) bs)", "have id_map'_eq: \"robdd_id_map (insert (robdd_leaf f) bs) = robdd_id_map {robdd_leaf f} ++ robdd_id_map bs\""], ["proof (prove)\nusing this:\n  robdd_invar_ids_equal ({robdd_leaf f} \\<union> bs) \\<Longrightarrow>\n  robdd_id_map ({robdd_leaf f} \\<union> bs) =\n  robdd_id_map {robdd_leaf f} ++ robdd_id_map bs\n  robdd_invar_ids_equal (insert (robdd_leaf f) bs)\n\ngoal (1 subgoal):\n 1. robdd_id_map (insert (robdd_leaf f) bs) =\n    robdd_id_map {robdd_leaf f} ++ robdd_id_map bs", "by simp"], ["proof (state)\nthis:\n  robdd_id_map (insert (robdd_leaf f) bs) =\n  robdd_id_map {robdd_leaf f} ++ robdd_id_map bs\n\ngoal (2 subgoals):\n 1. bool_op_extend bop (robdd_to_bool b1) (robdd_to_bool b2) =\n    None \\<Longrightarrow>\n    \\<exists>bs'.\n       subrobdds (fst (robdd_apply apply_map rev_map bop b1 b2)) \\<union> bs\n       \\<subseteq> bs' \\<and>\n       robdd_invar_ext bs' n\n        (fst (robdd_apply apply_map rev_map bop b1 b2)) \\<and>\n       apply_map_invar bop bs' bs1 bs2\n        (fst (snd (robdd_apply apply_map rev_map bop b1 b2))) \\<and>\n       rev_map_invar bs'\n        (snd (snd (robdd_apply apply_map rev_map bop b1 b2))) \\<and>\n       (\\<forall>a.\n           robdd_\\<alpha> (fst (robdd_apply apply_map rev_map bop b1 b2))\n            a =\n           bop (robdd_\\<alpha> b1 a) (robdd_\\<alpha> b2 a))\n 2. \\<And>a.\n       bool_op_extend bop (robdd_to_bool b1) (robdd_to_bool b2) =\n       Some a \\<Longrightarrow>\n       \\<exists>bs'.\n          subrobdds (fst (robdd_apply apply_map rev_map bop b1 b2)) \\<union>\n          bs\n          \\<subseteq> bs' \\<and>\n          robdd_invar_ext bs' n\n           (fst (robdd_apply apply_map rev_map bop b1 b2)) \\<and>\n          apply_map_invar bop bs' bs1 bs2\n           (fst (snd (robdd_apply apply_map rev_map bop b1 b2))) \\<and>\n          rev_map_invar bs'\n           (snd (snd (robdd_apply apply_map rev_map bop b1 b2))) \\<and>\n          (\\<forall>a.\n              robdd_\\<alpha> (fst (robdd_apply apply_map rev_map bop b1 b2))\n               a =\n              bop (robdd_\\<alpha> b1 a) (robdd_\\<alpha> b2 a))", "from invar_apply_map"], ["proof (chain)\npicking this:\n  apply_map_invar bop bs bs1 bs2 apply_map", "have invar_apply_map': \"apply_map_invar bop (insert (robdd_leaf f) bs) bs1 bs2 apply_map\""], ["proof (prove)\nusing this:\n  apply_map_invar bop bs bs1 bs2 apply_map\n\ngoal (1 subgoal):\n 1. apply_map_invar bop (insert (robdd_leaf f) bs) bs1 bs2 apply_map", "unfolding apply_map_invar_def robdd_invar_ext_def invar_ids_equal_bs'"], ["proof (prove)\nusing this:\n  c_invar apply_map \\<and>\n  (\\<forall>i1 i2 b.\n      c_lookup (i1, i2) apply_map = Some b \\<longrightarrow>\n      (\\<exists>b1 b2.\n          robdd_id_map bs1 i1 = Some b1 \\<and>\n          robdd_id_map bs2 i2 = Some b2 \\<and>\n          (b \\<in> subrobdds_set bs \\<and>\n           robdd_invar_ids bs \\<and>\n           robdd_invar_vars_greater (robdd_get_min_var b1 b2) b \\<and>\n           robdd_invar_reduced b) \\<and>\n          (\\<forall>a.\n              robdd_\\<alpha> b a =\n              bop (robdd_\\<alpha> b1 a) (robdd_\\<alpha> b2 a))))\n\ngoal (1 subgoal):\n 1. c_invar apply_map \\<and>\n    (\\<forall>i1 i2 b.\n        c_lookup (i1, i2) apply_map = Some b \\<longrightarrow>\n        (\\<exists>b1 b2.\n            robdd_id_map bs1 i1 = Some b1 \\<and>\n            robdd_id_map bs2 i2 = Some b2 \\<and>\n            (b \\<in> subrobdds_set (insert (robdd_leaf f) bs) \\<and>\n             robdd_invar_ids (insert (robdd_leaf f) bs) \\<and>\n             robdd_invar_vars_greater (robdd_get_min_var b1 b2) b \\<and>\n             robdd_invar_reduced b) \\<and>\n            (\\<forall>a.\n                robdd_\\<alpha> b a =\n                bop (robdd_\\<alpha> b1 a) (robdd_\\<alpha> b2 a))))", "by (simp add: invar_ids_bs') metis"], ["proof (state)\nthis:\n  apply_map_invar bop (insert (robdd_leaf f) bs) bs1 bs2 apply_map\n\ngoal (2 subgoals):\n 1. bool_op_extend bop (robdd_to_bool b1) (robdd_to_bool b2) =\n    None \\<Longrightarrow>\n    \\<exists>bs'.\n       subrobdds (fst (robdd_apply apply_map rev_map bop b1 b2)) \\<union> bs\n       \\<subseteq> bs' \\<and>\n       robdd_invar_ext bs' n\n        (fst (robdd_apply apply_map rev_map bop b1 b2)) \\<and>\n       apply_map_invar bop bs' bs1 bs2\n        (fst (snd (robdd_apply apply_map rev_map bop b1 b2))) \\<and>\n       rev_map_invar bs'\n        (snd (snd (robdd_apply apply_map rev_map bop b1 b2))) \\<and>\n       (\\<forall>a.\n           robdd_\\<alpha> (fst (robdd_apply apply_map rev_map bop b1 b2))\n            a =\n           bop (robdd_\\<alpha> b1 a) (robdd_\\<alpha> b2 a))\n 2. \\<And>a.\n       bool_op_extend bop (robdd_to_bool b1) (robdd_to_bool b2) =\n       Some a \\<Longrightarrow>\n       \\<exists>bs'.\n          subrobdds (fst (robdd_apply apply_map rev_map bop b1 b2)) \\<union>\n          bs\n          \\<subseteq> bs' \\<and>\n          robdd_invar_ext bs' n\n           (fst (robdd_apply apply_map rev_map bop b1 b2)) \\<and>\n          apply_map_invar bop bs' bs1 bs2\n           (fst (snd (robdd_apply apply_map rev_map bop b1 b2))) \\<and>\n          rev_map_invar bs'\n           (snd (snd (robdd_apply apply_map rev_map bop b1 b2))) \\<and>\n          (\\<forall>a.\n              robdd_\\<alpha> (fst (robdd_apply apply_map rev_map bop b1 b2))\n               a =\n              bop (robdd_\\<alpha> b1 a) (robdd_\\<alpha> b2 a))", "have \"?P (insert (robdd_leaf f) bs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. subrobdds (fst (robdd_apply apply_map rev_map bop b1 b2)) \\<union> bs\n    \\<subseteq> insert (robdd_leaf f) bs \\<and>\n    robdd_invar_ext (insert (robdd_leaf f) bs) n\n     (fst (robdd_apply apply_map rev_map bop b1 b2)) \\<and>\n    apply_map_invar bop (insert (robdd_leaf f) bs) bs1 bs2\n     (fst (snd (robdd_apply apply_map rev_map bop b1 b2))) \\<and>\n    rev_map_invar (insert (robdd_leaf f) bs)\n     (snd (snd (robdd_apply apply_map rev_map bop b1 b2))) \\<and>\n    (\\<forall>a.\n        robdd_\\<alpha> (fst (robdd_apply apply_map rev_map bop b1 b2)) a =\n        bop (robdd_\\<alpha> b1 a) (robdd_\\<alpha> b2 a))", "by (simp add: invar_ids_bs' f_eq invar_rev_map' invar_apply_map')"], ["proof (state)\nthis:\n  subrobdds (fst (robdd_apply apply_map rev_map bop b1 b2)) \\<union> bs\n  \\<subseteq> insert (robdd_leaf f) bs \\<and>\n  robdd_invar_ext (insert (robdd_leaf f) bs) n\n   (fst (robdd_apply apply_map rev_map bop b1 b2)) \\<and>\n  apply_map_invar bop (insert (robdd_leaf f) bs) bs1 bs2\n   (fst (snd (robdd_apply apply_map rev_map bop b1 b2))) \\<and>\n  rev_map_invar (insert (robdd_leaf f) bs)\n   (snd (snd (robdd_apply apply_map rev_map bop b1 b2))) \\<and>\n  (\\<forall>a.\n      robdd_\\<alpha> (fst (robdd_apply apply_map rev_map bop b1 b2)) a =\n      bop (robdd_\\<alpha> b1 a) (robdd_\\<alpha> b2 a))\n\ngoal (2 subgoals):\n 1. bool_op_extend bop (robdd_to_bool b1) (robdd_to_bool b2) =\n    None \\<Longrightarrow>\n    \\<exists>bs'.\n       subrobdds (fst (robdd_apply apply_map rev_map bop b1 b2)) \\<union> bs\n       \\<subseteq> bs' \\<and>\n       robdd_invar_ext bs' n\n        (fst (robdd_apply apply_map rev_map bop b1 b2)) \\<and>\n       apply_map_invar bop bs' bs1 bs2\n        (fst (snd (robdd_apply apply_map rev_map bop b1 b2))) \\<and>\n       rev_map_invar bs'\n        (snd (snd (robdd_apply apply_map rev_map bop b1 b2))) \\<and>\n       (\\<forall>a.\n           robdd_\\<alpha> (fst (robdd_apply apply_map rev_map bop b1 b2))\n            a =\n           bop (robdd_\\<alpha> b1 a) (robdd_\\<alpha> b2 a))\n 2. \\<And>a.\n       bool_op_extend bop (robdd_to_bool b1) (robdd_to_bool b2) =\n       Some a \\<Longrightarrow>\n       \\<exists>bs'.\n          subrobdds (fst (robdd_apply apply_map rev_map bop b1 b2)) \\<union>\n          bs\n          \\<subseteq> bs' \\<and>\n          robdd_invar_ext bs' n\n           (fst (robdd_apply apply_map rev_map bop b1 b2)) \\<and>\n          apply_map_invar bop bs' bs1 bs2\n           (fst (snd (robdd_apply apply_map rev_map bop b1 b2))) \\<and>\n          rev_map_invar bs'\n           (snd (snd (robdd_apply apply_map rev_map bop b1 b2))) \\<and>\n          (\\<forall>a.\n              robdd_\\<alpha> (fst (robdd_apply apply_map rev_map bop b1 b2))\n               a =\n              bop (robdd_\\<alpha> b1 a) (robdd_\\<alpha> b2 a))", "thus ?thesis"], ["proof (prove)\nusing this:\n  subrobdds (fst (robdd_apply apply_map rev_map bop b1 b2)) \\<union> bs\n  \\<subseteq> insert (robdd_leaf f) bs \\<and>\n  robdd_invar_ext (insert (robdd_leaf f) bs) n\n   (fst (robdd_apply apply_map rev_map bop b1 b2)) \\<and>\n  apply_map_invar bop (insert (robdd_leaf f) bs) bs1 bs2\n   (fst (snd (robdd_apply apply_map rev_map bop b1 b2))) \\<and>\n  rev_map_invar (insert (robdd_leaf f) bs)\n   (snd (snd (robdd_apply apply_map rev_map bop b1 b2))) \\<and>\n  (\\<forall>a.\n      robdd_\\<alpha> (fst (robdd_apply apply_map rev_map bop b1 b2)) a =\n      bop (robdd_\\<alpha> b1 a) (robdd_\\<alpha> b2 a))\n\ngoal (1 subgoal):\n 1. \\<exists>bs'.\n       subrobdds (fst (robdd_apply apply_map rev_map bop b1 b2)) \\<union> bs\n       \\<subseteq> bs' \\<and>\n       robdd_invar_ext bs' n\n        (fst (robdd_apply apply_map rev_map bop b1 b2)) \\<and>\n       apply_map_invar bop bs' bs1 bs2\n        (fst (snd (robdd_apply apply_map rev_map bop b1 b2))) \\<and>\n       rev_map_invar bs'\n        (snd (snd (robdd_apply apply_map rev_map bop b1 b2))) \\<and>\n       (\\<forall>a.\n           robdd_\\<alpha> (fst (robdd_apply apply_map rev_map bop b1 b2))\n            a =\n           bop (robdd_\\<alpha> b1 a) (robdd_\\<alpha> b2 a))", "by blast"], ["proof (state)\nthis:\n  \\<exists>bs'.\n     subrobdds (fst (robdd_apply apply_map rev_map bop b1 b2)) \\<union> bs\n     \\<subseteq> bs' \\<and>\n     robdd_invar_ext bs' n\n      (fst (robdd_apply apply_map rev_map bop b1 b2)) \\<and>\n     apply_map_invar bop bs' bs1 bs2\n      (fst (snd (robdd_apply apply_map rev_map bop b1 b2))) \\<and>\n     rev_map_invar bs'\n      (snd (snd (robdd_apply apply_map rev_map bop b1 b2))) \\<and>\n     (\\<forall>a.\n         robdd_\\<alpha> (fst (robdd_apply apply_map rev_map bop b1 b2)) a =\n         bop (robdd_\\<alpha> b1 a) (robdd_\\<alpha> b2 a))\n\ngoal (1 subgoal):\n 1. bool_op_extend bop (robdd_to_bool b1) (robdd_to_bool b2) =\n    None \\<Longrightarrow>\n    \\<exists>bs'.\n       subrobdds (fst (robdd_apply apply_map rev_map bop b1 b2)) \\<union> bs\n       \\<subseteq> bs' \\<and>\n       robdd_invar_ext bs' n\n        (fst (robdd_apply apply_map rev_map bop b1 b2)) \\<and>\n       apply_map_invar bop bs' bs1 bs2\n        (fst (snd (robdd_apply apply_map rev_map bop b1 b2))) \\<and>\n       rev_map_invar bs'\n        (snd (snd (robdd_apply apply_map rev_map bop b1 b2))) \\<and>\n       (\\<forall>a.\n           robdd_\\<alpha> (fst (robdd_apply apply_map rev_map bop b1 b2))\n            a =\n           bop (robdd_\\<alpha> b1 a) (robdd_\\<alpha> b2 a))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. bool_op_extend bop (robdd_to_bool b1) (robdd_to_bool b2) =\n    None \\<Longrightarrow>\n    \\<exists>bs'.\n       subrobdds (fst (robdd_apply apply_map rev_map bop b1 b2)) \\<union> bs\n       \\<subseteq> bs' \\<and>\n       robdd_invar_ext bs' n\n        (fst (robdd_apply apply_map rev_map bop b1 b2)) \\<and>\n       apply_map_invar bop bs' bs1 bs2\n        (fst (snd (robdd_apply apply_map rev_map bop b1 b2))) \\<and>\n       rev_map_invar bs'\n        (snd (snd (robdd_apply apply_map rev_map bop b1 b2))) \\<and>\n       (\\<forall>a.\n           robdd_\\<alpha> (fst (robdd_apply apply_map rev_map bop b1 b2))\n            a =\n           bop (robdd_\\<alpha> b1 a) (robdd_\\<alpha> b2 a))", "case None"], ["proof (state)\nthis:\n  bool_op_extend bop (robdd_to_bool b1) (robdd_to_bool b2) = None\n\ngoal (1 subgoal):\n 1. bool_op_extend bop (robdd_to_bool b1) (robdd_to_bool b2) =\n    None \\<Longrightarrow>\n    \\<exists>bs'.\n       subrobdds (fst (robdd_apply apply_map rev_map bop b1 b2)) \\<union> bs\n       \\<subseteq> bs' \\<and>\n       robdd_invar_ext bs' n\n        (fst (robdd_apply apply_map rev_map bop b1 b2)) \\<and>\n       apply_map_invar bop bs' bs1 bs2\n        (fst (snd (robdd_apply apply_map rev_map bop b1 b2))) \\<and>\n       rev_map_invar bs'\n        (snd (snd (robdd_apply apply_map rev_map bop b1 b2))) \\<and>\n       (\\<forall>a.\n           robdd_\\<alpha> (fst (robdd_apply apply_map rev_map bop b1 b2))\n            a =\n           bop (robdd_\\<alpha> b1 a) (robdd_\\<alpha> b2 a))", "note extend_eq_None = this"], ["proof (state)\nthis:\n  bool_op_extend bop (robdd_to_bool b1) (robdd_to_bool b2) = None\n\ngoal (1 subgoal):\n 1. bool_op_extend bop (robdd_to_bool b1) (robdd_to_bool b2) =\n    None \\<Longrightarrow>\n    \\<exists>bs'.\n       subrobdds (fst (robdd_apply apply_map rev_map bop b1 b2)) \\<union> bs\n       \\<subseteq> bs' \\<and>\n       robdd_invar_ext bs' n\n        (fst (robdd_apply apply_map rev_map bop b1 b2)) \\<and>\n       apply_map_invar bop bs' bs1 bs2\n        (fst (snd (robdd_apply apply_map rev_map bop b1 b2))) \\<and>\n       rev_map_invar bs'\n        (snd (snd (robdd_apply apply_map rev_map bop b1 b2))) \\<and>\n       (\\<forall>a.\n           robdd_\\<alpha> (fst (robdd_apply apply_map rev_map bop b1 b2))\n            a =\n           bop (robdd_\\<alpha> b1 a) (robdd_\\<alpha> b2 a))", "have min_var_b12_ge_n: \"(robdd_get_min_var b1 b2) \\<ge> n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. n \\<le> robdd_get_min_var b1 b2", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. n \\<le> robdd_get_min_var b1 b2", "from b1_invar b2_invar"], ["proof (chain)\npicking this:\n  robdd_invar_ext bs1 n b1\n  robdd_invar_ext bs2 n b2", "have \"robdd_invar_vars_greater n b1 \\<and> robdd_invar_vars_greater n b2\""], ["proof (prove)\nusing this:\n  robdd_invar_ext bs1 n b1\n  robdd_invar_ext bs2 n b2\n\ngoal (1 subgoal):\n 1. robdd_invar_vars_greater n b1 \\<and> robdd_invar_vars_greater n b2", "unfolding robdd_invar_ext_def"], ["proof (prove)\nusing this:\n  b1 \\<in> subrobdds_set bs1 \\<and>\n  robdd_invar_ids bs1 \\<and>\n  robdd_invar_vars_greater n b1 \\<and> robdd_invar_reduced b1\n  b2 \\<in> subrobdds_set bs2 \\<and>\n  robdd_invar_ids bs2 \\<and>\n  robdd_invar_vars_greater n b2 \\<and> robdd_invar_reduced b2\n\ngoal (1 subgoal):\n 1. robdd_invar_vars_greater n b1 \\<and> robdd_invar_vars_greater n b2", "by simp_all"], ["proof (state)\nthis:\n  robdd_invar_vars_greater n b1 \\<and> robdd_invar_vars_greater n b2\n\ngoal (1 subgoal):\n 1. n \\<le> robdd_get_min_var b1 b2", "with extend_eq_None"], ["proof (chain)\npicking this:\n  bool_op_extend bop (robdd_to_bool b1) (robdd_to_bool b2) = None\n  robdd_invar_vars_greater n b1 \\<and> robdd_invar_vars_greater n b2", "show \"(robdd_get_min_var b1 b2) \\<ge> n\""], ["proof (prove)\nusing this:\n  bool_op_extend bop (robdd_to_bool b1) (robdd_to_bool b2) = None\n  robdd_invar_vars_greater n b1 \\<and> robdd_invar_vars_greater n b2\n\ngoal (1 subgoal):\n 1. n \\<le> robdd_get_min_var b1 b2", "by (cases b1, case_tac [!] b2, simp_all)"], ["proof (state)\nthis:\n  n \\<le> robdd_get_min_var b1 b2\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  n \\<le> robdd_get_min_var b1 b2\n\ngoal (1 subgoal):\n 1. bool_op_extend bop (robdd_to_bool b1) (robdd_to_bool b2) =\n    None \\<Longrightarrow>\n    \\<exists>bs'.\n       subrobdds (fst (robdd_apply apply_map rev_map bop b1 b2)) \\<union> bs\n       \\<subseteq> bs' \\<and>\n       robdd_invar_ext bs' n\n        (fst (robdd_apply apply_map rev_map bop b1 b2)) \\<and>\n       apply_map_invar bop bs' bs1 bs2\n        (fst (snd (robdd_apply apply_map rev_map bop b1 b2))) \\<and>\n       rev_map_invar bs'\n        (snd (snd (robdd_apply apply_map rev_map bop b1 b2))) \\<and>\n       (\\<forall>a.\n           robdd_\\<alpha> (fst (robdd_apply apply_map rev_map bop b1 b2))\n            a =\n           bop (robdd_\\<alpha> b1 a) (robdd_\\<alpha> b2 a))", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>bs'.\n       subrobdds (fst (robdd_apply apply_map rev_map bop b1 b2)) \\<union> bs\n       \\<subseteq> bs' \\<and>\n       robdd_invar_ext bs' n\n        (fst (robdd_apply apply_map rev_map bop b1 b2)) \\<and>\n       apply_map_invar bop bs' bs1 bs2\n        (fst (snd (robdd_apply apply_map rev_map bop b1 b2))) \\<and>\n       rev_map_invar bs'\n        (snd (snd (robdd_apply apply_map rev_map bop b1 b2))) \\<and>\n       (\\<forall>a.\n           robdd_\\<alpha> (fst (robdd_apply apply_map rev_map bop b1 b2))\n            a =\n           bop (robdd_\\<alpha> b1 a) (robdd_\\<alpha> b2 a))", "proof (cases \"c_lookup (robdd_get_id b1, robdd_get_id b2) apply_map\")"], ["proof (state)\ngoal (2 subgoals):\n 1. c_lookup (robdd_get_id b1, robdd_get_id b2) apply_map =\n    None \\<Longrightarrow>\n    \\<exists>bs'.\n       subrobdds (fst (robdd_apply apply_map rev_map bop b1 b2)) \\<union> bs\n       \\<subseteq> bs' \\<and>\n       robdd_invar_ext bs' n\n        (fst (robdd_apply apply_map rev_map bop b1 b2)) \\<and>\n       apply_map_invar bop bs' bs1 bs2\n        (fst (snd (robdd_apply apply_map rev_map bop b1 b2))) \\<and>\n       rev_map_invar bs'\n        (snd (snd (robdd_apply apply_map rev_map bop b1 b2))) \\<and>\n       (\\<forall>a.\n           robdd_\\<alpha> (fst (robdd_apply apply_map rev_map bop b1 b2))\n            a =\n           bop (robdd_\\<alpha> b1 a) (robdd_\\<alpha> b2 a))\n 2. \\<And>a.\n       c_lookup (robdd_get_id b1, robdd_get_id b2) apply_map =\n       Some a \\<Longrightarrow>\n       \\<exists>bs'.\n          subrobdds (fst (robdd_apply apply_map rev_map bop b1 b2)) \\<union>\n          bs\n          \\<subseteq> bs' \\<and>\n          robdd_invar_ext bs' n\n           (fst (robdd_apply apply_map rev_map bop b1 b2)) \\<and>\n          apply_map_invar bop bs' bs1 bs2\n           (fst (snd (robdd_apply apply_map rev_map bop b1 b2))) \\<and>\n          rev_map_invar bs'\n           (snd (snd (robdd_apply apply_map rev_map bop b1 b2))) \\<and>\n          (\\<forall>a.\n              robdd_\\<alpha> (fst (robdd_apply apply_map rev_map bop b1 b2))\n               a =\n              bop (robdd_\\<alpha> b1 a) (robdd_\\<alpha> b2 a))", "case (Some b3)"], ["proof (state)\nthis:\n  c_lookup (robdd_get_id b1, robdd_get_id b2) apply_map = Some b3\n\ngoal (2 subgoals):\n 1. c_lookup (robdd_get_id b1, robdd_get_id b2) apply_map =\n    None \\<Longrightarrow>\n    \\<exists>bs'.\n       subrobdds (fst (robdd_apply apply_map rev_map bop b1 b2)) \\<union> bs\n       \\<subseteq> bs' \\<and>\n       robdd_invar_ext bs' n\n        (fst (robdd_apply apply_map rev_map bop b1 b2)) \\<and>\n       apply_map_invar bop bs' bs1 bs2\n        (fst (snd (robdd_apply apply_map rev_map bop b1 b2))) \\<and>\n       rev_map_invar bs'\n        (snd (snd (robdd_apply apply_map rev_map bop b1 b2))) \\<and>\n       (\\<forall>a.\n           robdd_\\<alpha> (fst (robdd_apply apply_map rev_map bop b1 b2))\n            a =\n           bop (robdd_\\<alpha> b1 a) (robdd_\\<alpha> b2 a))\n 2. \\<And>a.\n       c_lookup (robdd_get_id b1, robdd_get_id b2) apply_map =\n       Some a \\<Longrightarrow>\n       \\<exists>bs'.\n          subrobdds (fst (robdd_apply apply_map rev_map bop b1 b2)) \\<union>\n          bs\n          \\<subseteq> bs' \\<and>\n          robdd_invar_ext bs' n\n           (fst (robdd_apply apply_map rev_map bop b1 b2)) \\<and>\n          apply_map_invar bop bs' bs1 bs2\n           (fst (snd (robdd_apply apply_map rev_map bop b1 b2))) \\<and>\n          rev_map_invar bs'\n           (snd (snd (robdd_apply apply_map rev_map bop b1 b2))) \\<and>\n          (\\<forall>a.\n              robdd_\\<alpha> (fst (robdd_apply apply_map rev_map bop b1 b2))\n               a =\n              bop (robdd_\\<alpha> b1 a) (robdd_\\<alpha> b2 a))", "note lookup_eq_Some = this"], ["proof (state)\nthis:\n  c_lookup (robdd_get_id b1, robdd_get_id b2) apply_map = Some b3\n\ngoal (2 subgoals):\n 1. c_lookup (robdd_get_id b1, robdd_get_id b2) apply_map =\n    None \\<Longrightarrow>\n    \\<exists>bs'.\n       subrobdds (fst (robdd_apply apply_map rev_map bop b1 b2)) \\<union> bs\n       \\<subseteq> bs' \\<and>\n       robdd_invar_ext bs' n\n        (fst (robdd_apply apply_map rev_map bop b1 b2)) \\<and>\n       apply_map_invar bop bs' bs1 bs2\n        (fst (snd (robdd_apply apply_map rev_map bop b1 b2))) \\<and>\n       rev_map_invar bs'\n        (snd (snd (robdd_apply apply_map rev_map bop b1 b2))) \\<and>\n       (\\<forall>a.\n           robdd_\\<alpha> (fst (robdd_apply apply_map rev_map bop b1 b2))\n            a =\n           bop (robdd_\\<alpha> b1 a) (robdd_\\<alpha> b2 a))\n 2. \\<And>a.\n       c_lookup (robdd_get_id b1, robdd_get_id b2) apply_map =\n       Some a \\<Longrightarrow>\n       \\<exists>bs'.\n          subrobdds (fst (robdd_apply apply_map rev_map bop b1 b2)) \\<union>\n          bs\n          \\<subseteq> bs' \\<and>\n          robdd_invar_ext bs' n\n           (fst (robdd_apply apply_map rev_map bop b1 b2)) \\<and>\n          apply_map_invar bop bs' bs1 bs2\n           (fst (snd (robdd_apply apply_map rev_map bop b1 b2))) \\<and>\n          rev_map_invar bs'\n           (snd (snd (robdd_apply apply_map rev_map bop b1 b2))) \\<and>\n          (\\<forall>a.\n              robdd_\\<alpha> (fst (robdd_apply apply_map rev_map bop b1 b2))\n               a =\n              bop (robdd_\\<alpha> b1 a) (robdd_\\<alpha> b2 a))", "from extend_eq_None lookup_eq_Some res_def"], ["proof (chain)\npicking this:\n  bool_op_extend bop (robdd_to_bool b1) (robdd_to_bool b2) = None\n  c_lookup (robdd_get_id b1, robdd_get_id b2) apply_map = Some b3\n  robdd_apply apply_map rev_map bop b1 b2 =\n  (case bool_op_extend bop (robdd_to_bool b1) (robdd_to_bool b2) of\n   None \\<Rightarrow>\n     case c_lookup (robdd_get_id b1, robdd_get_id b2) apply_map of\n     None \\<Rightarrow>\n       let (l1, r1, var, l2, r2) = robdd_apply_next b1 b2;\n           (l, apply_map, rev_map) =\n             robdd_apply apply_map rev_map bop l1 l2;\n           (r, apply_map, rev_map) =\n             robdd_apply apply_map rev_map bop r1 r2;\n           (b, rev_map) = robdd_construct rev_map l var r;\n           apply_map =\n             c_update (robdd_get_id b1, robdd_get_id b2) b apply_map\n       in (b, apply_map, rev_map)\n     | Some b3 \\<Rightarrow> (b3, apply_map, rev_map)\n   | Some f \\<Rightarrow> (robdd_leaf f, apply_map, rev_map))", "have res_eq[simp]: \"?res = (b3, apply_map, rev_map)\""], ["proof (prove)\nusing this:\n  bool_op_extend bop (robdd_to_bool b1) (robdd_to_bool b2) = None\n  c_lookup (robdd_get_id b1, robdd_get_id b2) apply_map = Some b3\n  robdd_apply apply_map rev_map bop b1 b2 =\n  (case bool_op_extend bop (robdd_to_bool b1) (robdd_to_bool b2) of\n   None \\<Rightarrow>\n     case c_lookup (robdd_get_id b1, robdd_get_id b2) apply_map of\n     None \\<Rightarrow>\n       let (l1, r1, var, l2, r2) = robdd_apply_next b1 b2;\n           (l, apply_map, rev_map) =\n             robdd_apply apply_map rev_map bop l1 l2;\n           (r, apply_map, rev_map) =\n             robdd_apply apply_map rev_map bop r1 r2;\n           (b, rev_map) = robdd_construct rev_map l var r;\n           apply_map =\n             c_update (robdd_get_id b1, robdd_get_id b2) b apply_map\n       in (b, apply_map, rev_map)\n     | Some b3 \\<Rightarrow> (b3, apply_map, rev_map)\n   | Some f \\<Rightarrow> (robdd_leaf f, apply_map, rev_map))\n\ngoal (1 subgoal):\n 1. robdd_apply apply_map rev_map bop b1 b2 = (b3, apply_map, rev_map)", "by simp"], ["proof (state)\nthis:\n  robdd_apply apply_map rev_map bop b1 b2 = (b3, apply_map, rev_map)\n\ngoal (2 subgoals):\n 1. c_lookup (robdd_get_id b1, robdd_get_id b2) apply_map =\n    None \\<Longrightarrow>\n    \\<exists>bs'.\n       subrobdds (fst (robdd_apply apply_map rev_map bop b1 b2)) \\<union> bs\n       \\<subseteq> bs' \\<and>\n       robdd_invar_ext bs' n\n        (fst (robdd_apply apply_map rev_map bop b1 b2)) \\<and>\n       apply_map_invar bop bs' bs1 bs2\n        (fst (snd (robdd_apply apply_map rev_map bop b1 b2))) \\<and>\n       rev_map_invar bs'\n        (snd (snd (robdd_apply apply_map rev_map bop b1 b2))) \\<and>\n       (\\<forall>a.\n           robdd_\\<alpha> (fst (robdd_apply apply_map rev_map bop b1 b2))\n            a =\n           bop (robdd_\\<alpha> b1 a) (robdd_\\<alpha> b2 a))\n 2. \\<And>a.\n       c_lookup (robdd_get_id b1, robdd_get_id b2) apply_map =\n       Some a \\<Longrightarrow>\n       \\<exists>bs'.\n          subrobdds (fst (robdd_apply apply_map rev_map bop b1 b2)) \\<union>\n          bs\n          \\<subseteq> bs' \\<and>\n          robdd_invar_ext bs' n\n           (fst (robdd_apply apply_map rev_map bop b1 b2)) \\<and>\n          apply_map_invar bop bs' bs1 bs2\n           (fst (snd (robdd_apply apply_map rev_map bop b1 b2))) \\<and>\n          rev_map_invar bs'\n           (snd (snd (robdd_apply apply_map rev_map bop b1 b2))) \\<and>\n          (\\<forall>a.\n              robdd_\\<alpha> (fst (robdd_apply apply_map rev_map bop b1 b2))\n               a =\n              bop (robdd_\\<alpha> b1 a) (robdd_\\<alpha> b2 a))", "from apply_map_invar_D2[OF invar_apply_map, OF lookup_eq_Some]\n             robdd_id_map_properties[of bs1] invar_ids_equal_bs1\n             robdd_id_map_properties[of bs2] invar_ids_equal_bs2 \n             b1_in b2_in"], ["proof (chain)\npicking this:\n  \\<exists>b1 b2.\n     robdd_id_map bs1 (robdd_get_id b1) = Some b1 \\<and>\n     robdd_id_map bs2 (robdd_get_id b2) = Some b2 \\<and>\n     robdd_invar_ext bs (robdd_get_min_var b1 b2) b3 \\<and>\n     (\\<forall>a.\n         robdd_\\<alpha> b3 a =\n         bop (robdd_\\<alpha> b1 a) (robdd_\\<alpha> b2 a))\n  robdd_invar_ids_equal bs1 = robdd_id_map_OK bs1 (robdd_id_map bs1)\n  robdd_invar_ids_equal bs1\n  robdd_invar_ids_equal bs2 = robdd_id_map_OK bs2 (robdd_id_map bs2)\n  robdd_invar_ids_equal bs2\n  b1 \\<in> subrobdds_set bs1\n  b2 \\<in> subrobdds_set bs2", "have invar_b3: \"robdd_invar_ext bs (robdd_get_min_var b1 b2) b3\" and\n             sem_b3: \"\\<And>a. robdd_\\<alpha> b3 a = bop (robdd_\\<alpha> b1 a) (robdd_\\<alpha> b2 a)\""], ["proof (prove)\nusing this:\n  \\<exists>b1 b2.\n     robdd_id_map bs1 (robdd_get_id b1) = Some b1 \\<and>\n     robdd_id_map bs2 (robdd_get_id b2) = Some b2 \\<and>\n     robdd_invar_ext bs (robdd_get_min_var b1 b2) b3 \\<and>\n     (\\<forall>a.\n         robdd_\\<alpha> b3 a =\n         bop (robdd_\\<alpha> b1 a) (robdd_\\<alpha> b2 a))\n  robdd_invar_ids_equal bs1 = robdd_id_map_OK bs1 (robdd_id_map bs1)\n  robdd_invar_ids_equal bs1\n  robdd_invar_ids_equal bs2 = robdd_id_map_OK bs2 (robdd_id_map bs2)\n  robdd_invar_ids_equal bs2\n  b1 \\<in> subrobdds_set bs1\n  b2 \\<in> subrobdds_set bs2\n\ngoal (1 subgoal):\n 1. robdd_invar_ext bs (robdd_get_min_var b1 b2) b3 &&&\n    (\\<And>a.\n        robdd_\\<alpha> b3 a =\n        bop (robdd_\\<alpha> b1 a) (robdd_\\<alpha> b2 a))", "by (simp_all add: robdd_id_map_OK_def)"], ["proof (state)\nthis:\n  robdd_invar_ext bs (robdd_get_min_var b1 b2) b3\n  robdd_\\<alpha> b3 ?a = bop (robdd_\\<alpha> b1 ?a) (robdd_\\<alpha> b2 ?a)\n\ngoal (2 subgoals):\n 1. c_lookup (robdd_get_id b1, robdd_get_id b2) apply_map =\n    None \\<Longrightarrow>\n    \\<exists>bs'.\n       subrobdds (fst (robdd_apply apply_map rev_map bop b1 b2)) \\<union> bs\n       \\<subseteq> bs' \\<and>\n       robdd_invar_ext bs' n\n        (fst (robdd_apply apply_map rev_map bop b1 b2)) \\<and>\n       apply_map_invar bop bs' bs1 bs2\n        (fst (snd (robdd_apply apply_map rev_map bop b1 b2))) \\<and>\n       rev_map_invar bs'\n        (snd (snd (robdd_apply apply_map rev_map bop b1 b2))) \\<and>\n       (\\<forall>a.\n           robdd_\\<alpha> (fst (robdd_apply apply_map rev_map bop b1 b2))\n            a =\n           bop (robdd_\\<alpha> b1 a) (robdd_\\<alpha> b2 a))\n 2. \\<And>a.\n       c_lookup (robdd_get_id b1, robdd_get_id b2) apply_map =\n       Some a \\<Longrightarrow>\n       \\<exists>bs'.\n          subrobdds (fst (robdd_apply apply_map rev_map bop b1 b2)) \\<union>\n          bs\n          \\<subseteq> bs' \\<and>\n          robdd_invar_ext bs' n\n           (fst (robdd_apply apply_map rev_map bop b1 b2)) \\<and>\n          apply_map_invar bop bs' bs1 bs2\n           (fst (snd (robdd_apply apply_map rev_map bop b1 b2))) \\<and>\n          rev_map_invar bs'\n           (snd (snd (robdd_apply apply_map rev_map bop b1 b2))) \\<and>\n          (\\<forall>a.\n              robdd_\\<alpha> (fst (robdd_apply apply_map rev_map bop b1 b2))\n               a =\n              bop (robdd_\\<alpha> b1 a) (robdd_\\<alpha> b2 a))", "from invar_b3"], ["proof (chain)\npicking this:\n  robdd_invar_ext bs (robdd_get_min_var b1 b2) b3", "have b3_in: \"b3 \\<in> subrobdds_set bs\""], ["proof (prove)\nusing this:\n  robdd_invar_ext bs (robdd_get_min_var b1 b2) b3\n\ngoal (1 subgoal):\n 1. b3 \\<in> subrobdds_set bs", "unfolding robdd_invar_ext_def"], ["proof (prove)\nusing this:\n  b3 \\<in> subrobdds_set bs \\<and>\n  robdd_invar_ids bs \\<and>\n  robdd_invar_vars_greater (robdd_get_min_var b1 b2) b3 \\<and>\n  robdd_invar_reduced b3\n\ngoal (1 subgoal):\n 1. b3 \\<in> subrobdds_set bs", "by simp"], ["proof (state)\nthis:\n  b3 \\<in> subrobdds_set bs\n\ngoal (2 subgoals):\n 1. c_lookup (robdd_get_id b1, robdd_get_id b2) apply_map =\n    None \\<Longrightarrow>\n    \\<exists>bs'.\n       subrobdds (fst (robdd_apply apply_map rev_map bop b1 b2)) \\<union> bs\n       \\<subseteq> bs' \\<and>\n       robdd_invar_ext bs' n\n        (fst (robdd_apply apply_map rev_map bop b1 b2)) \\<and>\n       apply_map_invar bop bs' bs1 bs2\n        (fst (snd (robdd_apply apply_map rev_map bop b1 b2))) \\<and>\n       rev_map_invar bs'\n        (snd (snd (robdd_apply apply_map rev_map bop b1 b2))) \\<and>\n       (\\<forall>a.\n           robdd_\\<alpha> (fst (robdd_apply apply_map rev_map bop b1 b2))\n            a =\n           bop (robdd_\\<alpha> b1 a) (robdd_\\<alpha> b2 a))\n 2. \\<And>a.\n       c_lookup (robdd_get_id b1, robdd_get_id b2) apply_map =\n       Some a \\<Longrightarrow>\n       \\<exists>bs'.\n          subrobdds (fst (robdd_apply apply_map rev_map bop b1 b2)) \\<union>\n          bs\n          \\<subseteq> bs' \\<and>\n          robdd_invar_ext bs' n\n           (fst (robdd_apply apply_map rev_map bop b1 b2)) \\<and>\n          apply_map_invar bop bs' bs1 bs2\n           (fst (snd (robdd_apply apply_map rev_map bop b1 b2))) \\<and>\n          rev_map_invar bs'\n           (snd (snd (robdd_apply apply_map rev_map bop b1 b2))) \\<and>\n          (\\<forall>a.\n              robdd_\\<alpha> (fst (robdd_apply apply_map rev_map bop b1 b2))\n               a =\n              bop (robdd_\\<alpha> b1 a) (robdd_\\<alpha> b2 a))", "hence subrobdds_b3_bs_eq: \"subrobdds_set (subrobdds b3 \\<union> bs) = subrobdds_set bs\""], ["proof (prove)\nusing this:\n  b3 \\<in> subrobdds_set bs\n\ngoal (1 subgoal):\n 1. subrobdds_set (subrobdds b3 \\<union> bs) = subrobdds_set bs", "using subrobdds_set_subset_simp[of b3 bs]"], ["proof (prove)\nusing this:\n  b3 \\<in> subrobdds_set bs\n  (subrobdds b3 \\<subseteq> subrobdds_set bs) = (b3 \\<in> subrobdds_set bs)\n\ngoal (1 subgoal):\n 1. subrobdds_set (subrobdds b3 \\<union> bs) = subrobdds_set bs", "by auto"], ["proof (state)\nthis:\n  subrobdds_set (subrobdds b3 \\<union> bs) = subrobdds_set bs\n\ngoal (2 subgoals):\n 1. c_lookup (robdd_get_id b1, robdd_get_id b2) apply_map =\n    None \\<Longrightarrow>\n    \\<exists>bs'.\n       subrobdds (fst (robdd_apply apply_map rev_map bop b1 b2)) \\<union> bs\n       \\<subseteq> bs' \\<and>\n       robdd_invar_ext bs' n\n        (fst (robdd_apply apply_map rev_map bop b1 b2)) \\<and>\n       apply_map_invar bop bs' bs1 bs2\n        (fst (snd (robdd_apply apply_map rev_map bop b1 b2))) \\<and>\n       rev_map_invar bs'\n        (snd (snd (robdd_apply apply_map rev_map bop b1 b2))) \\<and>\n       (\\<forall>a.\n           robdd_\\<alpha> (fst (robdd_apply apply_map rev_map bop b1 b2))\n            a =\n           bop (robdd_\\<alpha> b1 a) (robdd_\\<alpha> b2 a))\n 2. \\<And>a.\n       c_lookup (robdd_get_id b1, robdd_get_id b2) apply_map =\n       Some a \\<Longrightarrow>\n       \\<exists>bs'.\n          subrobdds (fst (robdd_apply apply_map rev_map bop b1 b2)) \\<union>\n          bs\n          \\<subseteq> bs' \\<and>\n          robdd_invar_ext bs' n\n           (fst (robdd_apply apply_map rev_map bop b1 b2)) \\<and>\n          apply_map_invar bop bs' bs1 bs2\n           (fst (snd (robdd_apply apply_map rev_map bop b1 b2))) \\<and>\n          rev_map_invar bs'\n           (snd (snd (robdd_apply apply_map rev_map bop b1 b2))) \\<and>\n          (\\<forall>a.\n              robdd_\\<alpha> (fst (robdd_apply apply_map rev_map bop b1 b2))\n               a =\n              bop (robdd_\\<alpha> b1 a) (robdd_\\<alpha> b2 a))", "from subrobdds_b3_bs_eq invar_b3"], ["proof (chain)\npicking this:\n  subrobdds_set (subrobdds b3 \\<union> bs) = subrobdds_set bs\n  robdd_invar_ext bs (robdd_get_min_var b1 b2) b3", "have invar_b3': \"robdd_invar_ext (subrobdds b3 \\<union> bs) n b3\""], ["proof (prove)\nusing this:\n  subrobdds_set (subrobdds b3 \\<union> bs) = subrobdds_set bs\n  robdd_invar_ext bs (robdd_get_min_var b1 b2) b3\n\ngoal (1 subgoal):\n 1. robdd_invar_ext (subrobdds b3 \\<union> bs) n b3", "unfolding robdd_invar_ext_def"], ["proof (prove)\nusing this:\n  subrobdds_set (subrobdds b3 \\<union> bs) = subrobdds_set bs\n  b3 \\<in> subrobdds_set bs \\<and>\n  robdd_invar_ids bs \\<and>\n  robdd_invar_vars_greater (robdd_get_min_var b1 b2) b3 \\<and>\n  robdd_invar_reduced b3\n\ngoal (1 subgoal):\n 1. b3 \\<in> subrobdds_set (subrobdds b3 \\<union> bs) \\<and>\n    robdd_invar_ids (subrobdds b3 \\<union> bs) \\<and>\n    robdd_invar_vars_greater n b3 \\<and> robdd_invar_reduced b3", "using robdd_invar_ids_expand[of \"subrobdds b3 \\<union> bs\", symmetric]\n                 robdd_invar_ids_expand[of bs]\n                 robdd_invar_vars_greater___weaken[OF _ min_var_b12_ge_n, of b3]"], ["proof (prove)\nusing this:\n  subrobdds_set (subrobdds b3 \\<union> bs) = subrobdds_set bs\n  b3 \\<in> subrobdds_set bs \\<and>\n  robdd_invar_ids bs \\<and>\n  robdd_invar_vars_greater (robdd_get_min_var b1 b2) b3 \\<and>\n  robdd_invar_reduced b3\n  robdd_invar_ids (subrobdds b3 \\<union> bs) =\n  robdd_invar_ids (subrobdds_set (subrobdds b3 \\<union> bs))\n  robdd_invar_ids (subrobdds_set bs) = robdd_invar_ids bs\n  robdd_invar_vars_greater (robdd_get_min_var b1 b2) b3 \\<Longrightarrow>\n  robdd_invar_vars_greater n b3\n\ngoal (1 subgoal):\n 1. b3 \\<in> subrobdds_set (subrobdds b3 \\<union> bs) \\<and>\n    robdd_invar_ids (subrobdds b3 \\<union> bs) \\<and>\n    robdd_invar_vars_greater n b3 \\<and> robdd_invar_reduced b3", "by simp"], ["proof (state)\nthis:\n  robdd_invar_ext (subrobdds b3 \\<union> bs) n b3\n\ngoal (2 subgoals):\n 1. c_lookup (robdd_get_id b1, robdd_get_id b2) apply_map =\n    None \\<Longrightarrow>\n    \\<exists>bs'.\n       subrobdds (fst (robdd_apply apply_map rev_map bop b1 b2)) \\<union> bs\n       \\<subseteq> bs' \\<and>\n       robdd_invar_ext bs' n\n        (fst (robdd_apply apply_map rev_map bop b1 b2)) \\<and>\n       apply_map_invar bop bs' bs1 bs2\n        (fst (snd (robdd_apply apply_map rev_map bop b1 b2))) \\<and>\n       rev_map_invar bs'\n        (snd (snd (robdd_apply apply_map rev_map bop b1 b2))) \\<and>\n       (\\<forall>a.\n           robdd_\\<alpha> (fst (robdd_apply apply_map rev_map bop b1 b2))\n            a =\n           bop (robdd_\\<alpha> b1 a) (robdd_\\<alpha> b2 a))\n 2. \\<And>a.\n       c_lookup (robdd_get_id b1, robdd_get_id b2) apply_map =\n       Some a \\<Longrightarrow>\n       \\<exists>bs'.\n          subrobdds (fst (robdd_apply apply_map rev_map bop b1 b2)) \\<union>\n          bs\n          \\<subseteq> bs' \\<and>\n          robdd_invar_ext bs' n\n           (fst (robdd_apply apply_map rev_map bop b1 b2)) \\<and>\n          apply_map_invar bop bs' bs1 bs2\n           (fst (snd (robdd_apply apply_map rev_map bop b1 b2))) \\<and>\n          rev_map_invar bs'\n           (snd (snd (robdd_apply apply_map rev_map bop b1 b2))) \\<and>\n          (\\<forall>a.\n              robdd_\\<alpha> (fst (robdd_apply apply_map rev_map bop b1 b2))\n               a =\n              bop (robdd_\\<alpha> b1 a) (robdd_\\<alpha> b2 a))", "from invar_b3'"], ["proof (chain)\npicking this:\n  robdd_invar_ext (subrobdds b3 \\<union> bs) n b3", "have invar_ids': \"robdd_invar_ids (subrobdds b3 \\<union> bs)\""], ["proof (prove)\nusing this:\n  robdd_invar_ext (subrobdds b3 \\<union> bs) n b3\n\ngoal (1 subgoal):\n 1. robdd_invar_ids (subrobdds b3 \\<union> bs)", "unfolding robdd_invar_ext_def"], ["proof (prove)\nusing this:\n  b3 \\<in> subrobdds_set (subrobdds b3 \\<union> bs) \\<and>\n  robdd_invar_ids (subrobdds b3 \\<union> bs) \\<and>\n  robdd_invar_vars_greater n b3 \\<and> robdd_invar_reduced b3\n\ngoal (1 subgoal):\n 1. robdd_invar_ids (subrobdds b3 \\<union> bs)", "by simp"], ["proof (state)\nthis:\n  robdd_invar_ids (subrobdds b3 \\<union> bs)\n\ngoal (2 subgoals):\n 1. c_lookup (robdd_get_id b1, robdd_get_id b2) apply_map =\n    None \\<Longrightarrow>\n    \\<exists>bs'.\n       subrobdds (fst (robdd_apply apply_map rev_map bop b1 b2)) \\<union> bs\n       \\<subseteq> bs' \\<and>\n       robdd_invar_ext bs' n\n        (fst (robdd_apply apply_map rev_map bop b1 b2)) \\<and>\n       apply_map_invar bop bs' bs1 bs2\n        (fst (snd (robdd_apply apply_map rev_map bop b1 b2))) \\<and>\n       rev_map_invar bs'\n        (snd (snd (robdd_apply apply_map rev_map bop b1 b2))) \\<and>\n       (\\<forall>a.\n           robdd_\\<alpha> (fst (robdd_apply apply_map rev_map bop b1 b2))\n            a =\n           bop (robdd_\\<alpha> b1 a) (robdd_\\<alpha> b2 a))\n 2. \\<And>a.\n       c_lookup (robdd_get_id b1, robdd_get_id b2) apply_map =\n       Some a \\<Longrightarrow>\n       \\<exists>bs'.\n          subrobdds (fst (robdd_apply apply_map rev_map bop b1 b2)) \\<union>\n          bs\n          \\<subseteq> bs' \\<and>\n          robdd_invar_ext bs' n\n           (fst (robdd_apply apply_map rev_map bop b1 b2)) \\<and>\n          apply_map_invar bop bs' bs1 bs2\n           (fst (snd (robdd_apply apply_map rev_map bop b1 b2))) \\<and>\n          rev_map_invar bs'\n           (snd (snd (robdd_apply apply_map rev_map bop b1 b2))) \\<and>\n          (\\<forall>a.\n              robdd_\\<alpha> (fst (robdd_apply apply_map rev_map bop b1 b2))\n               a =\n              bop (robdd_\\<alpha> b1 a) (robdd_\\<alpha> b2 a))", "from invar_rev_map invar_ids'"], ["proof (chain)\npicking this:\n  rev_map_invar bs rev_map\n  robdd_invar_ids (subrobdds b3 \\<union> bs)", "have invar_rev_map': \"rev_map_invar (subrobdds b3 \\<union> bs) rev_map\""], ["proof (prove)\nusing this:\n  rev_map_invar bs rev_map\n  robdd_invar_ids (subrobdds b3 \\<union> bs)\n\ngoal (1 subgoal):\n 1. rev_map_invar (subrobdds b3 \\<union> bs) rev_map", "unfolding rev_map_invar_def subrobdds_b3_bs_eq robdd_invar_ext_def"], ["proof (prove)\nusing this:\n  r_invar (fst rev_map) \\<and>\n  1 < snd rev_map \\<and>\n  (\\<forall>b\\<in>subrobdds_set bs.\n      (b \\<in> subrobdds_set bs \\<and>\n       robdd_invar_ids bs \\<and>\n       robdd_invar_vars_greater 0 b \\<and> robdd_invar_reduced b) \\<and>\n      robdd_get_id b < snd rev_map) \\<and>\n  (\\<forall>li v ri b.\n      r_\\<alpha> (fst rev_map) (li, v, ri) = Some b \\<longrightarrow>\n      (b \\<in> subrobdds_set bs \\<and>\n       robdd_invar_ids bs \\<and>\n       robdd_invar_vars_greater v b \\<and> robdd_invar_reduced b) \\<and>\n      b \\<in> bs \\<and>\n      (\\<exists>l r i.\n          b = robdd_var i l v r \\<and>\n          robdd_get_id l = li \\<and> robdd_get_id r = ri)) \\<and>\n  (\\<forall>i l r v.\n      robdd_var i l v r \\<in> subrobdds_set bs \\<longrightarrow>\n      r_\\<alpha> (fst rev_map) (robdd_get_id l, v, robdd_get_id r) =\n      Some (robdd_var i l v r))\n  robdd_invar_ids (subrobdds b3 \\<union> bs)\n\ngoal (1 subgoal):\n 1. r_invar (fst rev_map) \\<and>\n    1 < snd rev_map \\<and>\n    (\\<forall>b\\<in>subrobdds_set bs.\n        (b \\<in> subrobdds_set bs \\<and>\n         robdd_invar_ids (subrobdds b3 \\<union> bs) \\<and>\n         robdd_invar_vars_greater 0 b \\<and> robdd_invar_reduced b) \\<and>\n        robdd_get_id b < snd rev_map) \\<and>\n    (\\<forall>li v ri b.\n        r_\\<alpha> (fst rev_map) (li, v, ri) = Some b \\<longrightarrow>\n        (b \\<in> subrobdds_set bs \\<and>\n         robdd_invar_ids (subrobdds b3 \\<union> bs) \\<and>\n         robdd_invar_vars_greater v b \\<and> robdd_invar_reduced b) \\<and>\n        b \\<in> subrobdds b3 \\<union> bs \\<and>\n        (\\<exists>l r i.\n            b = robdd_var i l v r \\<and>\n            robdd_get_id l = li \\<and> robdd_get_id r = ri)) \\<and>\n    (\\<forall>i l r v.\n        robdd_var i l v r \\<in> subrobdds_set bs \\<longrightarrow>\n        r_\\<alpha> (fst rev_map) (robdd_get_id l, v, robdd_get_id r) =\n        Some (robdd_var i l v r))", "by simp"], ["proof (state)\nthis:\n  rev_map_invar (subrobdds b3 \\<union> bs) rev_map\n\ngoal (2 subgoals):\n 1. c_lookup (robdd_get_id b1, robdd_get_id b2) apply_map =\n    None \\<Longrightarrow>\n    \\<exists>bs'.\n       subrobdds (fst (robdd_apply apply_map rev_map bop b1 b2)) \\<union> bs\n       \\<subseteq> bs' \\<and>\n       robdd_invar_ext bs' n\n        (fst (robdd_apply apply_map rev_map bop b1 b2)) \\<and>\n       apply_map_invar bop bs' bs1 bs2\n        (fst (snd (robdd_apply apply_map rev_map bop b1 b2))) \\<and>\n       rev_map_invar bs'\n        (snd (snd (robdd_apply apply_map rev_map bop b1 b2))) \\<and>\n       (\\<forall>a.\n           robdd_\\<alpha> (fst (robdd_apply apply_map rev_map bop b1 b2))\n            a =\n           bop (robdd_\\<alpha> b1 a) (robdd_\\<alpha> b2 a))\n 2. \\<And>a.\n       c_lookup (robdd_get_id b1, robdd_get_id b2) apply_map =\n       Some a \\<Longrightarrow>\n       \\<exists>bs'.\n          subrobdds (fst (robdd_apply apply_map rev_map bop b1 b2)) \\<union>\n          bs\n          \\<subseteq> bs' \\<and>\n          robdd_invar_ext bs' n\n           (fst (robdd_apply apply_map rev_map bop b1 b2)) \\<and>\n          apply_map_invar bop bs' bs1 bs2\n           (fst (snd (robdd_apply apply_map rev_map bop b1 b2))) \\<and>\n          rev_map_invar bs'\n           (snd (snd (robdd_apply apply_map rev_map bop b1 b2))) \\<and>\n          (\\<forall>a.\n              robdd_\\<alpha> (fst (robdd_apply apply_map rev_map bop b1 b2))\n               a =\n              bop (robdd_\\<alpha> b1 a) (robdd_\\<alpha> b2 a))", "from invar_apply_map invar_ids'"], ["proof (chain)\npicking this:\n  apply_map_invar bop bs bs1 bs2 apply_map\n  robdd_invar_ids (subrobdds b3 \\<union> bs)", "have invar_apply_map': \"apply_map_invar bop (subrobdds b3 \\<union> bs) bs1 bs2 apply_map\""], ["proof (prove)\nusing this:\n  apply_map_invar bop bs bs1 bs2 apply_map\n  robdd_invar_ids (subrobdds b3 \\<union> bs)\n\ngoal (1 subgoal):\n 1. apply_map_invar bop (subrobdds b3 \\<union> bs) bs1 bs2 apply_map", "unfolding apply_map_invar_def robdd_invar_ext_def"], ["proof (prove)\nusing this:\n  c_invar apply_map \\<and>\n  (\\<forall>i1 i2 b.\n      c_lookup (i1, i2) apply_map = Some b \\<longrightarrow>\n      (\\<exists>b1 b2.\n          robdd_id_map bs1 i1 = Some b1 \\<and>\n          robdd_id_map bs2 i2 = Some b2 \\<and>\n          (b \\<in> subrobdds_set bs \\<and>\n           robdd_invar_ids bs \\<and>\n           robdd_invar_vars_greater (robdd_get_min_var b1 b2) b \\<and>\n           robdd_invar_reduced b) \\<and>\n          (\\<forall>a.\n              robdd_\\<alpha> b a =\n              bop (robdd_\\<alpha> b1 a) (robdd_\\<alpha> b2 a))))\n  robdd_invar_ids (subrobdds b3 \\<union> bs)\n\ngoal (1 subgoal):\n 1. c_invar apply_map \\<and>\n    (\\<forall>i1 i2 b.\n        c_lookup (i1, i2) apply_map = Some b \\<longrightarrow>\n        (\\<exists>b1 b2.\n            robdd_id_map bs1 i1 = Some b1 \\<and>\n            robdd_id_map bs2 i2 = Some b2 \\<and>\n            (b \\<in> subrobdds_set (subrobdds b3 \\<union> bs) \\<and>\n             robdd_invar_ids (subrobdds b3 \\<union> bs) \\<and>\n             robdd_invar_vars_greater (robdd_get_min_var b1 b2) b \\<and>\n             robdd_invar_reduced b) \\<and>\n            (\\<forall>a.\n                robdd_\\<alpha> b a =\n                bop (robdd_\\<alpha> b1 a) (robdd_\\<alpha> b2 a))))", "by simp blast"], ["proof (state)\nthis:\n  apply_map_invar bop (subrobdds b3 \\<union> bs) bs1 bs2 apply_map\n\ngoal (2 subgoals):\n 1. c_lookup (robdd_get_id b1, robdd_get_id b2) apply_map =\n    None \\<Longrightarrow>\n    \\<exists>bs'.\n       subrobdds (fst (robdd_apply apply_map rev_map bop b1 b2)) \\<union> bs\n       \\<subseteq> bs' \\<and>\n       robdd_invar_ext bs' n\n        (fst (robdd_apply apply_map rev_map bop b1 b2)) \\<and>\n       apply_map_invar bop bs' bs1 bs2\n        (fst (snd (robdd_apply apply_map rev_map bop b1 b2))) \\<and>\n       rev_map_invar bs'\n        (snd (snd (robdd_apply apply_map rev_map bop b1 b2))) \\<and>\n       (\\<forall>a.\n           robdd_\\<alpha> (fst (robdd_apply apply_map rev_map bop b1 b2))\n            a =\n           bop (robdd_\\<alpha> b1 a) (robdd_\\<alpha> b2 a))\n 2. \\<And>a.\n       c_lookup (robdd_get_id b1, robdd_get_id b2) apply_map =\n       Some a \\<Longrightarrow>\n       \\<exists>bs'.\n          subrobdds (fst (robdd_apply apply_map rev_map bop b1 b2)) \\<union>\n          bs\n          \\<subseteq> bs' \\<and>\n          robdd_invar_ext bs' n\n           (fst (robdd_apply apply_map rev_map bop b1 b2)) \\<and>\n          apply_map_invar bop bs' bs1 bs2\n           (fst (snd (robdd_apply apply_map rev_map bop b1 b2))) \\<and>\n          rev_map_invar bs'\n           (snd (snd (robdd_apply apply_map rev_map bop b1 b2))) \\<and>\n          (\\<forall>a.\n              robdd_\\<alpha> (fst (robdd_apply apply_map rev_map bop b1 b2))\n               a =\n              bop (robdd_\\<alpha> b1 a) (robdd_\\<alpha> b2 a))", "have \"?P (subrobdds b3 \\<union> bs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. subrobdds (fst (robdd_apply apply_map rev_map bop b1 b2)) \\<union> bs\n    \\<subseteq> subrobdds b3 \\<union> bs \\<and>\n    robdd_invar_ext (subrobdds b3 \\<union> bs) n\n     (fst (robdd_apply apply_map rev_map bop b1 b2)) \\<and>\n    apply_map_invar bop (subrobdds b3 \\<union> bs) bs1 bs2\n     (fst (snd (robdd_apply apply_map rev_map bop b1 b2))) \\<and>\n    rev_map_invar (subrobdds b3 \\<union> bs)\n     (snd (snd (robdd_apply apply_map rev_map bop b1 b2))) \\<and>\n    (\\<forall>a.\n        robdd_\\<alpha> (fst (robdd_apply apply_map rev_map bop b1 b2)) a =\n        bop (robdd_\\<alpha> b1 a) (robdd_\\<alpha> b2 a))", "by (simp add: invar_b3' sem_b3 invar_rev_map' invar_apply_map')"], ["proof (state)\nthis:\n  subrobdds (fst (robdd_apply apply_map rev_map bop b1 b2)) \\<union> bs\n  \\<subseteq> subrobdds b3 \\<union> bs \\<and>\n  robdd_invar_ext (subrobdds b3 \\<union> bs) n\n   (fst (robdd_apply apply_map rev_map bop b1 b2)) \\<and>\n  apply_map_invar bop (subrobdds b3 \\<union> bs) bs1 bs2\n   (fst (snd (robdd_apply apply_map rev_map bop b1 b2))) \\<and>\n  rev_map_invar (subrobdds b3 \\<union> bs)\n   (snd (snd (robdd_apply apply_map rev_map bop b1 b2))) \\<and>\n  (\\<forall>a.\n      robdd_\\<alpha> (fst (robdd_apply apply_map rev_map bop b1 b2)) a =\n      bop (robdd_\\<alpha> b1 a) (robdd_\\<alpha> b2 a))\n\ngoal (2 subgoals):\n 1. c_lookup (robdd_get_id b1, robdd_get_id b2) apply_map =\n    None \\<Longrightarrow>\n    \\<exists>bs'.\n       subrobdds (fst (robdd_apply apply_map rev_map bop b1 b2)) \\<union> bs\n       \\<subseteq> bs' \\<and>\n       robdd_invar_ext bs' n\n        (fst (robdd_apply apply_map rev_map bop b1 b2)) \\<and>\n       apply_map_invar bop bs' bs1 bs2\n        (fst (snd (robdd_apply apply_map rev_map bop b1 b2))) \\<and>\n       rev_map_invar bs'\n        (snd (snd (robdd_apply apply_map rev_map bop b1 b2))) \\<and>\n       (\\<forall>a.\n           robdd_\\<alpha> (fst (robdd_apply apply_map rev_map bop b1 b2))\n            a =\n           bop (robdd_\\<alpha> b1 a) (robdd_\\<alpha> b2 a))\n 2. \\<And>a.\n       c_lookup (robdd_get_id b1, robdd_get_id b2) apply_map =\n       Some a \\<Longrightarrow>\n       \\<exists>bs'.\n          subrobdds (fst (robdd_apply apply_map rev_map bop b1 b2)) \\<union>\n          bs\n          \\<subseteq> bs' \\<and>\n          robdd_invar_ext bs' n\n           (fst (robdd_apply apply_map rev_map bop b1 b2)) \\<and>\n          apply_map_invar bop bs' bs1 bs2\n           (fst (snd (robdd_apply apply_map rev_map bop b1 b2))) \\<and>\n          rev_map_invar bs'\n           (snd (snd (robdd_apply apply_map rev_map bop b1 b2))) \\<and>\n          (\\<forall>a.\n              robdd_\\<alpha> (fst (robdd_apply apply_map rev_map bop b1 b2))\n               a =\n              bop (robdd_\\<alpha> b1 a) (robdd_\\<alpha> b2 a))", "thus ?thesis"], ["proof (prove)\nusing this:\n  subrobdds (fst (robdd_apply apply_map rev_map bop b1 b2)) \\<union> bs\n  \\<subseteq> subrobdds b3 \\<union> bs \\<and>\n  robdd_invar_ext (subrobdds b3 \\<union> bs) n\n   (fst (robdd_apply apply_map rev_map bop b1 b2)) \\<and>\n  apply_map_invar bop (subrobdds b3 \\<union> bs) bs1 bs2\n   (fst (snd (robdd_apply apply_map rev_map bop b1 b2))) \\<and>\n  rev_map_invar (subrobdds b3 \\<union> bs)\n   (snd (snd (robdd_apply apply_map rev_map bop b1 b2))) \\<and>\n  (\\<forall>a.\n      robdd_\\<alpha> (fst (robdd_apply apply_map rev_map bop b1 b2)) a =\n      bop (robdd_\\<alpha> b1 a) (robdd_\\<alpha> b2 a))\n\ngoal (1 subgoal):\n 1. \\<exists>bs'.\n       subrobdds (fst (robdd_apply apply_map rev_map bop b1 b2)) \\<union> bs\n       \\<subseteq> bs' \\<and>\n       robdd_invar_ext bs' n\n        (fst (robdd_apply apply_map rev_map bop b1 b2)) \\<and>\n       apply_map_invar bop bs' bs1 bs2\n        (fst (snd (robdd_apply apply_map rev_map bop b1 b2))) \\<and>\n       rev_map_invar bs'\n        (snd (snd (robdd_apply apply_map rev_map bop b1 b2))) \\<and>\n       (\\<forall>a.\n           robdd_\\<alpha> (fst (robdd_apply apply_map rev_map bop b1 b2))\n            a =\n           bop (robdd_\\<alpha> b1 a) (robdd_\\<alpha> b2 a))", "by blast"], ["proof (state)\nthis:\n  \\<exists>bs'.\n     subrobdds (fst (robdd_apply apply_map rev_map bop b1 b2)) \\<union> bs\n     \\<subseteq> bs' \\<and>\n     robdd_invar_ext bs' n\n      (fst (robdd_apply apply_map rev_map bop b1 b2)) \\<and>\n     apply_map_invar bop bs' bs1 bs2\n      (fst (snd (robdd_apply apply_map rev_map bop b1 b2))) \\<and>\n     rev_map_invar bs'\n      (snd (snd (robdd_apply apply_map rev_map bop b1 b2))) \\<and>\n     (\\<forall>a.\n         robdd_\\<alpha> (fst (robdd_apply apply_map rev_map bop b1 b2)) a =\n         bop (robdd_\\<alpha> b1 a) (robdd_\\<alpha> b2 a))\n\ngoal (1 subgoal):\n 1. c_lookup (robdd_get_id b1, robdd_get_id b2) apply_map =\n    None \\<Longrightarrow>\n    \\<exists>bs'.\n       subrobdds (fst (robdd_apply apply_map rev_map bop b1 b2)) \\<union> bs\n       \\<subseteq> bs' \\<and>\n       robdd_invar_ext bs' n\n        (fst (robdd_apply apply_map rev_map bop b1 b2)) \\<and>\n       apply_map_invar bop bs' bs1 bs2\n        (fst (snd (robdd_apply apply_map rev_map bop b1 b2))) \\<and>\n       rev_map_invar bs'\n        (snd (snd (robdd_apply apply_map rev_map bop b1 b2))) \\<and>\n       (\\<forall>a.\n           robdd_\\<alpha> (fst (robdd_apply apply_map rev_map bop b1 b2))\n            a =\n           bop (robdd_\\<alpha> b1 a) (robdd_\\<alpha> b2 a))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. c_lookup (robdd_get_id b1, robdd_get_id b2) apply_map =\n    None \\<Longrightarrow>\n    \\<exists>bs'.\n       subrobdds (fst (robdd_apply apply_map rev_map bop b1 b2)) \\<union> bs\n       \\<subseteq> bs' \\<and>\n       robdd_invar_ext bs' n\n        (fst (robdd_apply apply_map rev_map bop b1 b2)) \\<and>\n       apply_map_invar bop bs' bs1 bs2\n        (fst (snd (robdd_apply apply_map rev_map bop b1 b2))) \\<and>\n       rev_map_invar bs'\n        (snd (snd (robdd_apply apply_map rev_map bop b1 b2))) \\<and>\n       (\\<forall>a.\n           robdd_\\<alpha> (fst (robdd_apply apply_map rev_map bop b1 b2))\n            a =\n           bop (robdd_\\<alpha> b1 a) (robdd_\\<alpha> b2 a))", "case None"], ["proof (state)\nthis:\n  c_lookup (robdd_get_id b1, robdd_get_id b2) apply_map = None\n\ngoal (1 subgoal):\n 1. c_lookup (robdd_get_id b1, robdd_get_id b2) apply_map =\n    None \\<Longrightarrow>\n    \\<exists>bs'.\n       subrobdds (fst (robdd_apply apply_map rev_map bop b1 b2)) \\<union> bs\n       \\<subseteq> bs' \\<and>\n       robdd_invar_ext bs' n\n        (fst (robdd_apply apply_map rev_map bop b1 b2)) \\<and>\n       apply_map_invar bop bs' bs1 bs2\n        (fst (snd (robdd_apply apply_map rev_map bop b1 b2))) \\<and>\n       rev_map_invar bs'\n        (snd (snd (robdd_apply apply_map rev_map bop b1 b2))) \\<and>\n       (\\<forall>a.\n           robdd_\\<alpha> (fst (robdd_apply apply_map rev_map bop b1 b2))\n            a =\n           bop (robdd_\\<alpha> b1 a) (robdd_\\<alpha> b2 a))", "note lookup_eq_None = this"], ["proof (state)\nthis:\n  c_lookup (robdd_get_id b1, robdd_get_id b2) apply_map = None\n\ngoal (1 subgoal):\n 1. c_lookup (robdd_get_id b1, robdd_get_id b2) apply_map =\n    None \\<Longrightarrow>\n    \\<exists>bs'.\n       subrobdds (fst (robdd_apply apply_map rev_map bop b1 b2)) \\<union> bs\n       \\<subseteq> bs' \\<and>\n       robdd_invar_ext bs' n\n        (fst (robdd_apply apply_map rev_map bop b1 b2)) \\<and>\n       apply_map_invar bop bs' bs1 bs2\n        (fst (snd (robdd_apply apply_map rev_map bop b1 b2))) \\<and>\n       rev_map_invar bs'\n        (snd (snd (robdd_apply apply_map rev_map bop b1 b2))) \\<and>\n       (\\<forall>a.\n           robdd_\\<alpha> (fst (robdd_apply apply_map rev_map bop b1 b2))\n            a =\n           bop (robdd_\\<alpha> b1 a) (robdd_\\<alpha> b2 a))", "from extend_eq_None"], ["proof (chain)\npicking this:\n  bool_op_extend bop (robdd_to_bool b1) (robdd_to_bool b2) = None", "have not_leaf_b12: \"~(robdd_is_leaf b1 \\<and> robdd_is_leaf b2)\""], ["proof (prove)\nusing this:\n  bool_op_extend bop (robdd_to_bool b1) (robdd_to_bool b2) = None\n\ngoal (1 subgoal):\n 1. \\<not> (robdd_is_leaf b1 \\<and> robdd_is_leaf b2)", "by (cases b1, case_tac [!] b2) simp_all"], ["proof (state)\nthis:\n  \\<not> (robdd_is_leaf b1 \\<and> robdd_is_leaf b2)\n\ngoal (1 subgoal):\n 1. c_lookup (robdd_get_id b1, robdd_get_id b2) apply_map =\n    None \\<Longrightarrow>\n    \\<exists>bs'.\n       subrobdds (fst (robdd_apply apply_map rev_map bop b1 b2)) \\<union> bs\n       \\<subseteq> bs' \\<and>\n       robdd_invar_ext bs' n\n        (fst (robdd_apply apply_map rev_map bop b1 b2)) \\<and>\n       apply_map_invar bop bs' bs1 bs2\n        (fst (snd (robdd_apply apply_map rev_map bop b1 b2))) \\<and>\n       rev_map_invar bs'\n        (snd (snd (robdd_apply apply_map rev_map bop b1 b2))) \\<and>\n       (\\<forall>a.\n           robdd_\\<alpha> (fst (robdd_apply apply_map rev_map bop b1 b2))\n            a =\n           bop (robdd_\\<alpha> b1 a) (robdd_\\<alpha> b2 a))", "obtain b1_l b1_r v'' b2_l b2_r where \n          next_eq: \"robdd_apply_next b1 b2 = (b1_l, b1_r, v'', b2_l, b2_r)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>b1_l b1_r v'' b2_l b2_r.\n        robdd_apply_next b1 b2 =\n        (b1_l, b1_r, v'', b2_l, b2_r) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (metis prod.exhaust)"], ["proof (state)\nthis:\n  robdd_apply_next b1 b2 = (b1_l, b1_r, v'', b2_l, b2_r)\n\ngoal (1 subgoal):\n 1. c_lookup (robdd_get_id b1, robdd_get_id b2) apply_map =\n    None \\<Longrightarrow>\n    \\<exists>bs'.\n       subrobdds (fst (robdd_apply apply_map rev_map bop b1 b2)) \\<union> bs\n       \\<subseteq> bs' \\<and>\n       robdd_invar_ext bs' n\n        (fst (robdd_apply apply_map rev_map bop b1 b2)) \\<and>\n       apply_map_invar bop bs' bs1 bs2\n        (fst (snd (robdd_apply apply_map rev_map bop b1 b2))) \\<and>\n       rev_map_invar bs'\n        (snd (snd (robdd_apply apply_map rev_map bop b1 b2))) \\<and>\n       (\\<forall>a.\n           robdd_\\<alpha> (fst (robdd_apply apply_map rev_map bop b1 b2))\n            a =\n           bop (robdd_\\<alpha> b1 a) (robdd_\\<alpha> b2 a))", "obtain l apply_map' rev_map' where \n          apply_l_eq: \"robdd_apply apply_map rev_map bop b1_l b2_l = (l, apply_map', rev_map')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>l apply_map' rev_map'.\n        robdd_apply apply_map rev_map bop b1_l b2_l =\n        (l, apply_map', rev_map') \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (metis prod.exhaust)"], ["proof (state)\nthis:\n  robdd_apply apply_map rev_map bop b1_l b2_l = (l, apply_map', rev_map')\n\ngoal (1 subgoal):\n 1. c_lookup (robdd_get_id b1, robdd_get_id b2) apply_map =\n    None \\<Longrightarrow>\n    \\<exists>bs'.\n       subrobdds (fst (robdd_apply apply_map rev_map bop b1 b2)) \\<union> bs\n       \\<subseteq> bs' \\<and>\n       robdd_invar_ext bs' n\n        (fst (robdd_apply apply_map rev_map bop b1 b2)) \\<and>\n       apply_map_invar bop bs' bs1 bs2\n        (fst (snd (robdd_apply apply_map rev_map bop b1 b2))) \\<and>\n       rev_map_invar bs'\n        (snd (snd (robdd_apply apply_map rev_map bop b1 b2))) \\<and>\n       (\\<forall>a.\n           robdd_\\<alpha> (fst (robdd_apply apply_map rev_map bop b1 b2))\n            a =\n           bop (robdd_\\<alpha> b1 a) (robdd_\\<alpha> b2 a))", "obtain r apply_map'' rev_map'' where \n          apply_r_eq: \"robdd_apply apply_map' rev_map' bop b1_r b2_r = (r, apply_map'', rev_map'')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>r apply_map'' rev_map''.\n        robdd_apply apply_map' rev_map' bop b1_r b2_r =\n        (r, apply_map'', rev_map'') \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (metis prod.exhaust)"], ["proof (state)\nthis:\n  robdd_apply apply_map' rev_map' bop b1_r b2_r =\n  (r, apply_map'', rev_map'')\n\ngoal (1 subgoal):\n 1. c_lookup (robdd_get_id b1, robdd_get_id b2) apply_map =\n    None \\<Longrightarrow>\n    \\<exists>bs'.\n       subrobdds (fst (robdd_apply apply_map rev_map bop b1 b2)) \\<union> bs\n       \\<subseteq> bs' \\<and>\n       robdd_invar_ext bs' n\n        (fst (robdd_apply apply_map rev_map bop b1 b2)) \\<and>\n       apply_map_invar bop bs' bs1 bs2\n        (fst (snd (robdd_apply apply_map rev_map bop b1 b2))) \\<and>\n       rev_map_invar bs'\n        (snd (snd (robdd_apply apply_map rev_map bop b1 b2))) \\<and>\n       (\\<forall>a.\n           robdd_\\<alpha> (fst (robdd_apply apply_map rev_map bop b1 b2))\n            a =\n           bop (robdd_\\<alpha> b1 a) (robdd_\\<alpha> b2 a))", "obtain b' rev_map''' where const_eq: \"robdd_construct rev_map'' l v'' r = (b', rev_map''')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>b' rev_map'''.\n        robdd_construct rev_map'' l v'' r =\n        (b', rev_map''') \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (metis prod.exhaust)"], ["proof (state)\nthis:\n  robdd_construct rev_map'' l v'' r = (b', rev_map''')\n\ngoal (1 subgoal):\n 1. c_lookup (robdd_get_id b1, robdd_get_id b2) apply_map =\n    None \\<Longrightarrow>\n    \\<exists>bs'.\n       subrobdds (fst (robdd_apply apply_map rev_map bop b1 b2)) \\<union> bs\n       \\<subseteq> bs' \\<and>\n       robdd_invar_ext bs' n\n        (fst (robdd_apply apply_map rev_map bop b1 b2)) \\<and>\n       apply_map_invar bop bs' bs1 bs2\n        (fst (snd (robdd_apply apply_map rev_map bop b1 b2))) \\<and>\n       rev_map_invar bs'\n        (snd (snd (robdd_apply apply_map rev_map bop b1 b2))) \\<and>\n       (\\<forall>a.\n           robdd_\\<alpha> (fst (robdd_apply apply_map rev_map bop b1 b2))\n            a =\n           bop (robdd_\\<alpha> b1 a) (robdd_\\<alpha> b2 a))", "define apply_map'''\n          where \"apply_map''' = c_update (robdd_get_id b1, robdd_get_id b2) b' apply_map''\""], ["proof (state)\nthis:\n  apply_map''' = c_update (robdd_get_id b1, robdd_get_id b2) b' apply_map''\n\ngoal (1 subgoal):\n 1. c_lookup (robdd_get_id b1, robdd_get_id b2) apply_map =\n    None \\<Longrightarrow>\n    \\<exists>bs'.\n       subrobdds (fst (robdd_apply apply_map rev_map bop b1 b2)) \\<union> bs\n       \\<subseteq> bs' \\<and>\n       robdd_invar_ext bs' n\n        (fst (robdd_apply apply_map rev_map bop b1 b2)) \\<and>\n       apply_map_invar bop bs' bs1 bs2\n        (fst (snd (robdd_apply apply_map rev_map bop b1 b2))) \\<and>\n       rev_map_invar bs'\n        (snd (snd (robdd_apply apply_map rev_map bop b1 b2))) \\<and>\n       (\\<forall>a.\n           robdd_\\<alpha> (fst (robdd_apply apply_map rev_map bop b1 b2))\n            a =\n           bop (robdd_\\<alpha> b1 a) (robdd_\\<alpha> b2 a))", "note next_props = robdd_apply_next_correct [OF b1_invar b2_invar next_eq] not_leaf_b12"], ["proof (state)\nthis:\n  robdd_\\<alpha> b1_l = (\\<lambda>a. robdd_\\<alpha> b1 (a(v'' := True)))\n  robdd_\\<alpha> b1_r = (\\<lambda>a. robdd_\\<alpha> b1 (a(v'' := False)))\n  robdd_\\<alpha> b2_l = (\\<lambda>a. robdd_\\<alpha> b2 (a(v'' := True)))\n  robdd_\\<alpha> b2_r = (\\<lambda>a. robdd_\\<alpha> b2 (a(v'' := False)))\n  robdd_invar_ext bs1 (Suc v'') b1_l\n  robdd_invar_ext bs1 (Suc v'') b1_r\n  robdd_invar_ext bs2 (Suc v'') b2_l\n  robdd_invar_ext bs2 (Suc v'') b2_r\n  b1_l \\<in> subrobdds b1\n  b2_l \\<in> subrobdds b2\n  b1_r \\<in> subrobdds b1\n  b2_r \\<in> subrobdds b2\n  robdd_get_min_var b1 b2 = v''\n  \\<not> (robdd_is_leaf b1 \\<and> robdd_is_leaf b2) \\<longrightarrow>\n  size_robdd b1_l + size_robdd b2_l < size_robdd b1 + size_robdd b2\n  \\<not> (robdd_is_leaf b1 \\<and> robdd_is_leaf b2) \\<longrightarrow>\n  size_robdd b1_r + size_robdd b2_r < size_robdd b1 + size_robdd b2\n  \\<not> (robdd_is_leaf b1 \\<and> robdd_is_leaf b2)\n\ngoal (1 subgoal):\n 1. c_lookup (robdd_get_id b1, robdd_get_id b2) apply_map =\n    None \\<Longrightarrow>\n    \\<exists>bs'.\n       subrobdds (fst (robdd_apply apply_map rev_map bop b1 b2)) \\<union> bs\n       \\<subseteq> bs' \\<and>\n       robdd_invar_ext bs' n\n        (fst (robdd_apply apply_map rev_map bop b1 b2)) \\<and>\n       apply_map_invar bop bs' bs1 bs2\n        (fst (snd (robdd_apply apply_map rev_map bop b1 b2))) \\<and>\n       rev_map_invar bs'\n        (snd (snd (robdd_apply apply_map rev_map bop b1 b2))) \\<and>\n       (\\<forall>a.\n           robdd_\\<alpha> (fst (robdd_apply apply_map rev_map bop b1 b2))\n            a =\n           bop (robdd_\\<alpha> b1 a) (robdd_\\<alpha> b2 a))", "note v''_eq = next_props(13)"], ["proof (state)\nthis:\n  robdd_get_min_var b1 b2 = v''\n\ngoal (1 subgoal):\n 1. c_lookup (robdd_get_id b1, robdd_get_id b2) apply_map =\n    None \\<Longrightarrow>\n    \\<exists>bs'.\n       subrobdds (fst (robdd_apply apply_map rev_map bop b1 b2)) \\<union> bs\n       \\<subseteq> bs' \\<and>\n       robdd_invar_ext bs' n\n        (fst (robdd_apply apply_map rev_map bop b1 b2)) \\<and>\n       apply_map_invar bop bs' bs1 bs2\n        (fst (snd (robdd_apply apply_map rev_map bop b1 b2))) \\<and>\n       rev_map_invar bs'\n        (snd (snd (robdd_apply apply_map rev_map bop b1 b2))) \\<and>\n       (\\<forall>a.\n           robdd_\\<alpha> (fst (robdd_apply apply_map rev_map bop b1 b2))\n            a =\n           bop (robdd_\\<alpha> b1 a) (robdd_\\<alpha> b2 a))", "have res_eq[simp]: \"?res =(b', apply_map''', rev_map''')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. robdd_apply apply_map rev_map bop b1 b2 = (b', apply_map''', rev_map''')", "by (simp_all add: b_def next_eq res_def extend_eq_None lookup_eq_None apply_r_eq apply_l_eq\n                               const_eq apply_map'_def apply_map'''_def rev_map'_def)"], ["proof (state)\nthis:\n  robdd_apply apply_map rev_map bop b1 b2 = (b', apply_map''', rev_map''')\n\ngoal (1 subgoal):\n 1. c_lookup (robdd_get_id b1, robdd_get_id b2) apply_map =\n    None \\<Longrightarrow>\n    \\<exists>bs'.\n       subrobdds (fst (robdd_apply apply_map rev_map bop b1 b2)) \\<union> bs\n       \\<subseteq> bs' \\<and>\n       robdd_invar_ext bs' n\n        (fst (robdd_apply apply_map rev_map bop b1 b2)) \\<and>\n       apply_map_invar bop bs' bs1 bs2\n        (fst (snd (robdd_apply apply_map rev_map bop b1 b2))) \\<and>\n       rev_map_invar bs'\n        (snd (snd (robdd_apply apply_map rev_map bop b1 b2))) \\<and>\n       (\\<forall>a.\n           robdd_\\<alpha> (fst (robdd_apply apply_map rev_map bop b1 b2))\n            a =\n           bop (robdd_\\<alpha> b1 a) (robdd_\\<alpha> b2 a))", "from indhyp [of b1_l b2_l bs rev_map apply_map \"Suc v''\"]"], ["proof (chain)\npicking this:\n  \\<lbrakk>(case (b1_l, b2_l) of\n            (b1, b2) \\<Rightarrow> size_robdd b1 + size_robdd b2)\n           < (case (b1, b2) of\n              (b1, b2) \\<Rightarrow> size_robdd b1 + size_robdd b2);\n   rev_map_invar bs rev_map; apply_map_invar bop bs bs1 bs2 apply_map;\n   robdd_invar_ext bs1 (Suc v'') b1_l;\n   robdd_invar_ext bs2 (Suc v'') b2_l\\<rbrakk>\n  \\<Longrightarrow> \\<exists>bs'.\n                       subrobdds\n                        (fst (robdd_apply apply_map rev_map bop b1_l\n                               b2_l)) \\<union>\n                       bs\n                       \\<subseteq> bs' \\<and>\n                       robdd_invar_ext bs' (Suc v'')\n                        (fst (robdd_apply apply_map rev_map bop b1_l\n                               b2_l)) \\<and>\n                       apply_map_invar bop bs' bs1 bs2\n                        (fst (snd (robdd_apply apply_map rev_map bop b1_l\n                                    b2_l))) \\<and>\n                       rev_map_invar bs'\n                        (snd (snd (robdd_apply apply_map rev_map bop b1_l\n                                    b2_l))) \\<and>\n                       (\\<forall>a.\n                           robdd_\\<alpha>\n                            (fst (robdd_apply apply_map rev_map bop b1_l\n                                   b2_l))\n                            a =\n                           bop (robdd_\\<alpha> b1_l a)\n                            (robdd_\\<alpha> b2_l a))", "obtain bs' where\n             subset_bs': \"subrobdds l \\<union> bs \\<subseteq> bs'\" and\n             l_invar0: \"robdd_invar_ext bs' (Suc v'') l\" and\n             invar_apply_map': \"apply_map_invar bop bs' bs1 bs2 apply_map'\" and\n             invar_rev_map': \"rev_map_invar bs' rev_map'\" and\n             sem_l: \"\\<forall>a. robdd_\\<alpha> l a = bop (robdd_\\<alpha> b1 (a(v'' := True))) \n                                           (robdd_\\<alpha> b2 (a(v'' := True)))\""], ["proof (prove)\nusing this:\n  \\<lbrakk>(case (b1_l, b2_l) of\n            (b1, b2) \\<Rightarrow> size_robdd b1 + size_robdd b2)\n           < (case (b1, b2) of\n              (b1, b2) \\<Rightarrow> size_robdd b1 + size_robdd b2);\n   rev_map_invar bs rev_map; apply_map_invar bop bs bs1 bs2 apply_map;\n   robdd_invar_ext bs1 (Suc v'') b1_l;\n   robdd_invar_ext bs2 (Suc v'') b2_l\\<rbrakk>\n  \\<Longrightarrow> \\<exists>bs'.\n                       subrobdds\n                        (fst (robdd_apply apply_map rev_map bop b1_l\n                               b2_l)) \\<union>\n                       bs\n                       \\<subseteq> bs' \\<and>\n                       robdd_invar_ext bs' (Suc v'')\n                        (fst (robdd_apply apply_map rev_map bop b1_l\n                               b2_l)) \\<and>\n                       apply_map_invar bop bs' bs1 bs2\n                        (fst (snd (robdd_apply apply_map rev_map bop b1_l\n                                    b2_l))) \\<and>\n                       rev_map_invar bs'\n                        (snd (snd (robdd_apply apply_map rev_map bop b1_l\n                                    b2_l))) \\<and>\n                       (\\<forall>a.\n                           robdd_\\<alpha>\n                            (fst (robdd_apply apply_map rev_map bop b1_l\n                                   b2_l))\n                            a =\n                           bop (robdd_\\<alpha> b1_l a)\n                            (robdd_\\<alpha> b2_l a))\n\ngoal (1 subgoal):\n 1. (\\<And>bs'.\n        \\<lbrakk>subrobdds l \\<union> bs \\<subseteq> bs';\n         robdd_invar_ext bs' (Suc v'') l;\n         apply_map_invar bop bs' bs1 bs2 apply_map';\n         rev_map_invar bs' rev_map';\n         \\<forall>a.\n            robdd_\\<alpha> l a =\n            bop (robdd_\\<alpha> b1 (a(v'' := True)))\n             (robdd_\\<alpha> b2 (a(v'' := True)))\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (simp add: apply_l_eq next_props  invar_rev_map invar_apply_map) metis"], ["proof (state)\nthis:\n  subrobdds l \\<union> bs \\<subseteq> bs'\n  robdd_invar_ext bs' (Suc v'') l\n  apply_map_invar bop bs' bs1 bs2 apply_map'\n  rev_map_invar bs' rev_map'\n  \\<forall>a.\n     robdd_\\<alpha> l a =\n     bop (robdd_\\<alpha> b1 (a(v'' := True)))\n      (robdd_\\<alpha> b2 (a(v'' := True)))\n\ngoal (1 subgoal):\n 1. c_lookup (robdd_get_id b1, robdd_get_id b2) apply_map =\n    None \\<Longrightarrow>\n    \\<exists>bs'.\n       subrobdds (fst (robdd_apply apply_map rev_map bop b1 b2)) \\<union> bs\n       \\<subseteq> bs' \\<and>\n       robdd_invar_ext bs' n\n        (fst (robdd_apply apply_map rev_map bop b1 b2)) \\<and>\n       apply_map_invar bop bs' bs1 bs2\n        (fst (snd (robdd_apply apply_map rev_map bop b1 b2))) \\<and>\n       rev_map_invar bs'\n        (snd (snd (robdd_apply apply_map rev_map bop b1 b2))) \\<and>\n       (\\<forall>a.\n           robdd_\\<alpha> (fst (robdd_apply apply_map rev_map bop b1 b2))\n            a =\n           bop (robdd_\\<alpha> b1 a) (robdd_\\<alpha> b2 a))", "from indhyp [of b1_r b2_r bs' rev_map' apply_map' \"Suc v''\"]"], ["proof (chain)\npicking this:\n  \\<lbrakk>(case (b1_r, b2_r) of\n            (b1, b2) \\<Rightarrow> size_robdd b1 + size_robdd b2)\n           < (case (b1, b2) of\n              (b1, b2) \\<Rightarrow> size_robdd b1 + size_robdd b2);\n   rev_map_invar bs' rev_map'; apply_map_invar bop bs' bs1 bs2 apply_map';\n   robdd_invar_ext bs1 (Suc v'') b1_r;\n   robdd_invar_ext bs2 (Suc v'') b2_r\\<rbrakk>\n  \\<Longrightarrow> \\<exists>bs'a.\n                       subrobdds\n                        (fst (robdd_apply apply_map' rev_map' bop b1_r\n                               b2_r)) \\<union>\n                       bs'\n                       \\<subseteq> bs'a \\<and>\n                       robdd_invar_ext bs'a (Suc v'')\n                        (fst (robdd_apply apply_map' rev_map' bop b1_r\n                               b2_r)) \\<and>\n                       apply_map_invar bop bs'a bs1 bs2\n                        (fst (snd (robdd_apply apply_map' rev_map' bop b1_r\n                                    b2_r))) \\<and>\n                       rev_map_invar bs'a\n                        (snd (snd (robdd_apply apply_map' rev_map' bop b1_r\n                                    b2_r))) \\<and>\n                       (\\<forall>a.\n                           robdd_\\<alpha>\n                            (fst (robdd_apply apply_map' rev_map' bop b1_r\n                                   b2_r))\n                            a =\n                           bop (robdd_\\<alpha> b1_r a)\n                            (robdd_\\<alpha> b2_r a))", "obtain bs'' where\n             subset_bs'': \"subrobdds r \\<union> bs' \\<subseteq> bs''\" and\n             r_invar1: \"robdd_invar_ext bs'' (Suc v'') r\" and\n             invar_apply_map'': \"apply_map_invar bop bs'' bs1 bs2 apply_map''\" and\n             invar_rev_map'': \"rev_map_invar bs'' rev_map''\" and\n             sem_r: \"\\<forall>a. robdd_\\<alpha> r a = bop (robdd_\\<alpha> b1 (a(v'' := False))) \n                                           (robdd_\\<alpha> b2 (a(v'' := False)))\""], ["proof (prove)\nusing this:\n  \\<lbrakk>(case (b1_r, b2_r) of\n            (b1, b2) \\<Rightarrow> size_robdd b1 + size_robdd b2)\n           < (case (b1, b2) of\n              (b1, b2) \\<Rightarrow> size_robdd b1 + size_robdd b2);\n   rev_map_invar bs' rev_map'; apply_map_invar bop bs' bs1 bs2 apply_map';\n   robdd_invar_ext bs1 (Suc v'') b1_r;\n   robdd_invar_ext bs2 (Suc v'') b2_r\\<rbrakk>\n  \\<Longrightarrow> \\<exists>bs'a.\n                       subrobdds\n                        (fst (robdd_apply apply_map' rev_map' bop b1_r\n                               b2_r)) \\<union>\n                       bs'\n                       \\<subseteq> bs'a \\<and>\n                       robdd_invar_ext bs'a (Suc v'')\n                        (fst (robdd_apply apply_map' rev_map' bop b1_r\n                               b2_r)) \\<and>\n                       apply_map_invar bop bs'a bs1 bs2\n                        (fst (snd (robdd_apply apply_map' rev_map' bop b1_r\n                                    b2_r))) \\<and>\n                       rev_map_invar bs'a\n                        (snd (snd (robdd_apply apply_map' rev_map' bop b1_r\n                                    b2_r))) \\<and>\n                       (\\<forall>a.\n                           robdd_\\<alpha>\n                            (fst (robdd_apply apply_map' rev_map' bop b1_r\n                                   b2_r))\n                            a =\n                           bop (robdd_\\<alpha> b1_r a)\n                            (robdd_\\<alpha> b2_r a))\n\ngoal (1 subgoal):\n 1. (\\<And>bs''.\n        \\<lbrakk>subrobdds r \\<union> bs' \\<subseteq> bs'';\n         robdd_invar_ext bs'' (Suc v'') r;\n         apply_map_invar bop bs'' bs1 bs2 apply_map'';\n         rev_map_invar bs'' rev_map'';\n         \\<forall>a.\n            robdd_\\<alpha> r a =\n            bop (robdd_\\<alpha> b1 (a(v'' := False)))\n             (robdd_\\<alpha> b2 (a(v'' := False)))\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (simp add: apply_r_eq next_props invar_rev_map' invar_apply_map') metis"], ["proof (state)\nthis:\n  subrobdds r \\<union> bs' \\<subseteq> bs''\n  robdd_invar_ext bs'' (Suc v'') r\n  apply_map_invar bop bs'' bs1 bs2 apply_map''\n  rev_map_invar bs'' rev_map''\n  \\<forall>a.\n     robdd_\\<alpha> r a =\n     bop (robdd_\\<alpha> b1 (a(v'' := False)))\n      (robdd_\\<alpha> b2 (a(v'' := False)))\n\ngoal (1 subgoal):\n 1. c_lookup (robdd_get_id b1, robdd_get_id b2) apply_map =\n    None \\<Longrightarrow>\n    \\<exists>bs'.\n       subrobdds (fst (robdd_apply apply_map rev_map bop b1 b2)) \\<union> bs\n       \\<subseteq> bs' \\<and>\n       robdd_invar_ext bs' n\n        (fst (robdd_apply apply_map rev_map bop b1 b2)) \\<and>\n       apply_map_invar bop bs' bs1 bs2\n        (fst (snd (robdd_apply apply_map rev_map bop b1 b2))) \\<and>\n       rev_map_invar bs'\n        (snd (snd (robdd_apply apply_map rev_map bop b1 b2))) \\<and>\n       (\\<forall>a.\n           robdd_\\<alpha> (fst (robdd_apply apply_map rev_map bop b1 b2))\n            a =\n           bop (robdd_\\<alpha> b1 a) (robdd_\\<alpha> b2 a))", "from subset_bs'"], ["proof (chain)\npicking this:\n  subrobdds l \\<union> bs \\<subseteq> bs'", "have \"l \\<in> bs'\""], ["proof (prove)\nusing this:\n  subrobdds l \\<union> bs \\<subseteq> bs'\n\ngoal (1 subgoal):\n 1. l \\<in> bs'", "by auto"], ["proof (state)\nthis:\n  l \\<in> bs'\n\ngoal (1 subgoal):\n 1. c_lookup (robdd_get_id b1, robdd_get_id b2) apply_map =\n    None \\<Longrightarrow>\n    \\<exists>bs'.\n       subrobdds (fst (robdd_apply apply_map rev_map bop b1 b2)) \\<union> bs\n       \\<subseteq> bs' \\<and>\n       robdd_invar_ext bs' n\n        (fst (robdd_apply apply_map rev_map bop b1 b2)) \\<and>\n       apply_map_invar bop bs' bs1 bs2\n        (fst (snd (robdd_apply apply_map rev_map bop b1 b2))) \\<and>\n       rev_map_invar bs'\n        (snd (snd (robdd_apply apply_map rev_map bop b1 b2))) \\<and>\n       (\\<forall>a.\n           robdd_\\<alpha> (fst (robdd_apply apply_map rev_map bop b1 b2))\n            a =\n           bop (robdd_\\<alpha> b1 a) (robdd_\\<alpha> b2 a))", "with subset_bs''"], ["proof (chain)\npicking this:\n  subrobdds r \\<union> bs' \\<subseteq> bs''\n  l \\<in> bs'", "have l_in_bs'': \"l \\<in> bs''\""], ["proof (prove)\nusing this:\n  subrobdds r \\<union> bs' \\<subseteq> bs''\n  l \\<in> bs'\n\ngoal (1 subgoal):\n 1. l \\<in> bs''", "by auto"], ["proof (state)\nthis:\n  l \\<in> bs''\n\ngoal (1 subgoal):\n 1. c_lookup (robdd_get_id b1, robdd_get_id b2) apply_map =\n    None \\<Longrightarrow>\n    \\<exists>bs'.\n       subrobdds (fst (robdd_apply apply_map rev_map bop b1 b2)) \\<union> bs\n       \\<subseteq> bs' \\<and>\n       robdd_invar_ext bs' n\n        (fst (robdd_apply apply_map rev_map bop b1 b2)) \\<and>\n       apply_map_invar bop bs' bs1 bs2\n        (fst (snd (robdd_apply apply_map rev_map bop b1 b2))) \\<and>\n       rev_map_invar bs'\n        (snd (snd (robdd_apply apply_map rev_map bop b1 b2))) \\<and>\n       (\\<forall>a.\n           robdd_\\<alpha> (fst (robdd_apply apply_map rev_map bop b1 b2))\n            a =\n           bop (robdd_\\<alpha> b1 a) (robdd_\\<alpha> b2 a))", "from subset_bs''"], ["proof (chain)\npicking this:\n  subrobdds r \\<union> bs' \\<subseteq> bs''", "have r_in_bs'': \"r \\<in> bs''\""], ["proof (prove)\nusing this:\n  subrobdds r \\<union> bs' \\<subseteq> bs''\n\ngoal (1 subgoal):\n 1. r \\<in> bs''", "by auto"], ["proof (state)\nthis:\n  r \\<in> bs''\n\ngoal (1 subgoal):\n 1. c_lookup (robdd_get_id b1, robdd_get_id b2) apply_map =\n    None \\<Longrightarrow>\n    \\<exists>bs'.\n       subrobdds (fst (robdd_apply apply_map rev_map bop b1 b2)) \\<union> bs\n       \\<subseteq> bs' \\<and>\n       robdd_invar_ext bs' n\n        (fst (robdd_apply apply_map rev_map bop b1 b2)) \\<and>\n       apply_map_invar bop bs' bs1 bs2\n        (fst (snd (robdd_apply apply_map rev_map bop b1 b2))) \\<and>\n       rev_map_invar bs'\n        (snd (snd (robdd_apply apply_map rev_map bop b1 b2))) \\<and>\n       (\\<forall>a.\n           robdd_\\<alpha> (fst (robdd_apply apply_map rev_map bop b1 b2))\n            a =\n           bop (robdd_\\<alpha> b1 a) (robdd_\\<alpha> b2 a))", "from l_invar0 r_invar1 l_in_bs''"], ["proof (chain)\npicking this:\n  robdd_invar_ext bs' (Suc v'') l\n  robdd_invar_ext bs'' (Suc v'') r\n  l \\<in> bs''", "have l_invar1: \"robdd_invar_ext bs'' (Suc v'') l\""], ["proof (prove)\nusing this:\n  robdd_invar_ext bs' (Suc v'') l\n  robdd_invar_ext bs'' (Suc v'') r\n  l \\<in> bs''\n\ngoal (1 subgoal):\n 1. robdd_invar_ext bs'' (Suc v'') l", "unfolding robdd_invar_ext_def"], ["proof (prove)\nusing this:\n  l \\<in> subrobdds_set bs' \\<and>\n  robdd_invar_ids bs' \\<and>\n  robdd_invar_vars_greater (Suc v'') l \\<and> robdd_invar_reduced l\n  r \\<in> subrobdds_set bs'' \\<and>\n  robdd_invar_ids bs'' \\<and>\n  robdd_invar_vars_greater (Suc v'') r \\<and> robdd_invar_reduced r\n  l \\<in> bs''\n\ngoal (1 subgoal):\n 1. l \\<in> subrobdds_set bs'' \\<and>\n    robdd_invar_ids bs'' \\<and>\n    robdd_invar_vars_greater (Suc v'') l \\<and> robdd_invar_reduced l", "by simp (metis subrobdds_set_mono subsetD)"], ["proof (state)\nthis:\n  robdd_invar_ext bs'' (Suc v'') l\n\ngoal (1 subgoal):\n 1. c_lookup (robdd_get_id b1, robdd_get_id b2) apply_map =\n    None \\<Longrightarrow>\n    \\<exists>bs'.\n       subrobdds (fst (robdd_apply apply_map rev_map bop b1 b2)) \\<union> bs\n       \\<subseteq> bs' \\<and>\n       robdd_invar_ext bs' n\n        (fst (robdd_apply apply_map rev_map bop b1 b2)) \\<and>\n       apply_map_invar bop bs' bs1 bs2\n        (fst (snd (robdd_apply apply_map rev_map bop b1 b2))) \\<and>\n       rev_map_invar bs'\n        (snd (snd (robdd_apply apply_map rev_map bop b1 b2))) \\<and>\n       (\\<forall>a.\n           robdd_\\<alpha> (fst (robdd_apply apply_map rev_map bop b1 b2))\n            a =\n           bop (robdd_\\<alpha> b1 a) (robdd_\\<alpha> b2 a))", "define bs''' where \"bs''' = insert b' bs''\""], ["proof (state)\nthis:\n  bs''' = insert b' bs''\n\ngoal (1 subgoal):\n 1. c_lookup (robdd_get_id b1, robdd_get_id b2) apply_map =\n    None \\<Longrightarrow>\n    \\<exists>bs'.\n       subrobdds (fst (robdd_apply apply_map rev_map bop b1 b2)) \\<union> bs\n       \\<subseteq> bs' \\<and>\n       robdd_invar_ext bs' n\n        (fst (robdd_apply apply_map rev_map bop b1 b2)) \\<and>\n       apply_map_invar bop bs' bs1 bs2\n        (fst (snd (robdd_apply apply_map rev_map bop b1 b2))) \\<and>\n       rev_map_invar bs'\n        (snd (snd (robdd_apply apply_map rev_map bop b1 b2))) \\<and>\n       (\\<forall>a.\n           robdd_\\<alpha> (fst (robdd_apply apply_map rev_map bop b1 b2))\n            a =\n           bop (robdd_\\<alpha> b1 a) (robdd_\\<alpha> b2 a))", "from robdd_construct_correct[OF invar_rev_map'' _ _ l_invar1 r_invar1]"], ["proof (chain)\npicking this:\n  \\<lbrakk>l \\<in> bs''; r \\<in> bs''\\<rbrakk>\n  \\<Longrightarrow> robdd_invar_ext\n                     (insert (fst (robdd_construct rev_map'' l v'' r)) bs'')\n                     v'' (fst (robdd_construct rev_map'' l v'' r)) \\<and>\n                    rev_map_invar\n                     (insert (fst (robdd_construct rev_map'' l v'' r)) bs'')\n                     (snd (robdd_construct rev_map'' l v'' r)) \\<and>\n                    robdd_\\<alpha>\n                     (fst (robdd_construct rev_map'' l v'' r)) =\n                    robdd_\\<alpha> (robdd_var 0 l v'' r)", "have b'_invar: \"robdd_invar_ext bs''' v'' b'\"\n         and invar_rev_map''': \"rev_map_invar bs''' rev_map'''\"\n         and sem_b': \"robdd_\\<alpha> b' = robdd_\\<alpha> (robdd_var 0 l v'' r)\""], ["proof (prove)\nusing this:\n  \\<lbrakk>l \\<in> bs''; r \\<in> bs''\\<rbrakk>\n  \\<Longrightarrow> robdd_invar_ext\n                     (insert (fst (robdd_construct rev_map'' l v'' r)) bs'')\n                     v'' (fst (robdd_construct rev_map'' l v'' r)) \\<and>\n                    rev_map_invar\n                     (insert (fst (robdd_construct rev_map'' l v'' r)) bs'')\n                     (snd (robdd_construct rev_map'' l v'' r)) \\<and>\n                    robdd_\\<alpha>\n                     (fst (robdd_construct rev_map'' l v'' r)) =\n                    robdd_\\<alpha> (robdd_var 0 l v'' r)\n\ngoal (1 subgoal):\n 1. robdd_invar_ext bs''' v'' b' &&&\n    rev_map_invar bs''' rev_map''' &&&\n    robdd_\\<alpha> b' = robdd_\\<alpha> (robdd_var 0 l v'' r)", "by (simp_all add: const_eq bs'''_def l_in_bs'' r_in_bs'')"], ["proof (state)\nthis:\n  robdd_invar_ext bs''' v'' b'\n  rev_map_invar bs''' rev_map'''\n  robdd_\\<alpha> b' = robdd_\\<alpha> (robdd_var 0 l v'' r)\n\ngoal (1 subgoal):\n 1. c_lookup (robdd_get_id b1, robdd_get_id b2) apply_map =\n    None \\<Longrightarrow>\n    \\<exists>bs'.\n       subrobdds (fst (robdd_apply apply_map rev_map bop b1 b2)) \\<union> bs\n       \\<subseteq> bs' \\<and>\n       robdd_invar_ext bs' n\n        (fst (robdd_apply apply_map rev_map bop b1 b2)) \\<and>\n       apply_map_invar bop bs' bs1 bs2\n        (fst (snd (robdd_apply apply_map rev_map bop b1 b2))) \\<and>\n       rev_map_invar bs'\n        (snd (snd (robdd_apply apply_map rev_map bop b1 b2))) \\<and>\n       (\\<forall>a.\n           robdd_\\<alpha> (fst (robdd_apply apply_map rev_map bop b1 b2))\n            a =\n           bop (robdd_\\<alpha> b1 a) (robdd_\\<alpha> b2 a))", "have sem_OK: \"\\<forall>a. robdd_\\<alpha> b' a = bop (robdd_\\<alpha> b1 a) (robdd_\\<alpha> b2 a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>a.\n       robdd_\\<alpha> b' a = bop (robdd_\\<alpha> b1 a) (robdd_\\<alpha> b2 a)", "by (simp add: sem_b' sem_l sem_r fun_upd_idem)"], ["proof (state)\nthis:\n  \\<forall>a.\n     robdd_\\<alpha> b' a = bop (robdd_\\<alpha> b1 a) (robdd_\\<alpha> b2 a)\n\ngoal (1 subgoal):\n 1. c_lookup (robdd_get_id b1, robdd_get_id b2) apply_map =\n    None \\<Longrightarrow>\n    \\<exists>bs'.\n       subrobdds (fst (robdd_apply apply_map rev_map bop b1 b2)) \\<union> bs\n       \\<subseteq> bs' \\<and>\n       robdd_invar_ext bs' n\n        (fst (robdd_apply apply_map rev_map bop b1 b2)) \\<and>\n       apply_map_invar bop bs' bs1 bs2\n        (fst (snd (robdd_apply apply_map rev_map bop b1 b2))) \\<and>\n       rev_map_invar bs'\n        (snd (snd (robdd_apply apply_map rev_map bop b1 b2))) \\<and>\n       (\\<forall>a.\n           robdd_\\<alpha> (fst (robdd_apply apply_map rev_map bop b1 b2))\n            a =\n           bop (robdd_\\<alpha> b1 a) (robdd_\\<alpha> b2 a))", "have \"?P (subrobdds_set bs''')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. subrobdds (fst (robdd_apply apply_map rev_map bop b1 b2)) \\<union> bs\n    \\<subseteq> subrobdds_set bs''' \\<and>\n    robdd_invar_ext (subrobdds_set bs''') n\n     (fst (robdd_apply apply_map rev_map bop b1 b2)) \\<and>\n    apply_map_invar bop (subrobdds_set bs''') bs1 bs2\n     (fst (snd (robdd_apply apply_map rev_map bop b1 b2))) \\<and>\n    rev_map_invar (subrobdds_set bs''')\n     (snd (snd (robdd_apply apply_map rev_map bop b1 b2))) \\<and>\n    (\\<forall>a.\n        robdd_\\<alpha> (fst (robdd_apply apply_map rev_map bop b1 b2)) a =\n        bop (robdd_\\<alpha> b1 a) (robdd_\\<alpha> b2 a))", "unfolding res_eq fst_conv snd_conv"], ["proof (prove)\ngoal (1 subgoal):\n 1. subrobdds b' \\<union> bs \\<subseteq> subrobdds_set bs''' \\<and>\n    robdd_invar_ext (subrobdds_set bs''') n b' \\<and>\n    apply_map_invar bop (subrobdds_set bs''') bs1 bs2 apply_map''' \\<and>\n    rev_map_invar (subrobdds_set bs''') rev_map''' \\<and>\n    (\\<forall>a.\n        robdd_\\<alpha> b' a =\n        bop (robdd_\\<alpha> b1 a) (robdd_\\<alpha> b2 a))", "proof (intro conjI)"], ["proof (state)\ngoal (5 subgoals):\n 1. subrobdds b' \\<union> bs \\<subseteq> subrobdds_set bs'''\n 2. robdd_invar_ext (subrobdds_set bs''') n b'\n 3. apply_map_invar bop (subrobdds_set bs''') bs1 bs2 apply_map'''\n 4. rev_map_invar (subrobdds_set bs''') rev_map'''\n 5. \\<forall>a.\n       robdd_\\<alpha> b' a = bop (robdd_\\<alpha> b1 a) (robdd_\\<alpha> b2 a)", "from subset_bs'' subset_bs'"], ["proof (chain)\npicking this:\n  subrobdds r \\<union> bs' \\<subseteq> bs''\n  subrobdds l \\<union> bs \\<subseteq> bs'", "have \"bs \\<subseteq> bs''\""], ["proof (prove)\nusing this:\n  subrobdds r \\<union> bs' \\<subseteq> bs''\n  subrobdds l \\<union> bs \\<subseteq> bs'\n\ngoal (1 subgoal):\n 1. bs \\<subseteq> bs''", "by auto"], ["proof (state)\nthis:\n  bs \\<subseteq> bs''\n\ngoal (5 subgoals):\n 1. subrobdds b' \\<union> bs \\<subseteq> subrobdds_set bs'''\n 2. robdd_invar_ext (subrobdds_set bs''') n b'\n 3. apply_map_invar bop (subrobdds_set bs''') bs1 bs2 apply_map'''\n 4. rev_map_invar (subrobdds_set bs''') rev_map'''\n 5. \\<forall>a.\n       robdd_\\<alpha> b' a = bop (robdd_\\<alpha> b1 a) (robdd_\\<alpha> b2 a)", "with subrobdds_set_mono2 [of bs bs'']"], ["proof (chain)\npicking this:\n  bs \\<subseteq> bs'' \\<Longrightarrow>\n  subrobdds_set bs \\<subseteq> subrobdds_set bs''\n  bs \\<subseteq> bs''", "have \"subrobdds_set bs \\<subseteq> subrobdds_set bs''\""], ["proof (prove)\nusing this:\n  bs \\<subseteq> bs'' \\<Longrightarrow>\n  subrobdds_set bs \\<subseteq> subrobdds_set bs''\n  bs \\<subseteq> bs''\n\ngoal (1 subgoal):\n 1. subrobdds_set bs \\<subseteq> subrobdds_set bs''", "by simp"], ["proof (state)\nthis:\n  subrobdds_set bs \\<subseteq> subrobdds_set bs''\n\ngoal (5 subgoals):\n 1. subrobdds b' \\<union> bs \\<subseteq> subrobdds_set bs'''\n 2. robdd_invar_ext (subrobdds_set bs''') n b'\n 3. apply_map_invar bop (subrobdds_set bs''') bs1 bs2 apply_map'''\n 4. rev_map_invar (subrobdds_set bs''') rev_map'''\n 5. \\<forall>a.\n       robdd_\\<alpha> b' a = bop (robdd_\\<alpha> b1 a) (robdd_\\<alpha> b2 a)", "with subrobdds_set_mono[of bs]"], ["proof (chain)\npicking this:\n  bs \\<subseteq> subrobdds_set bs\n  subrobdds_set bs \\<subseteq> subrobdds_set bs''", "have \"bs \\<subseteq> subrobdds_set bs''\""], ["proof (prove)\nusing this:\n  bs \\<subseteq> subrobdds_set bs\n  subrobdds_set bs \\<subseteq> subrobdds_set bs''\n\ngoal (1 subgoal):\n 1. bs \\<subseteq> subrobdds_set bs''", "by simp"], ["proof (state)\nthis:\n  bs \\<subseteq> subrobdds_set bs''\n\ngoal (5 subgoals):\n 1. subrobdds b' \\<union> bs \\<subseteq> subrobdds_set bs'''\n 2. robdd_invar_ext (subrobdds_set bs''') n b'\n 3. apply_map_invar bop (subrobdds_set bs''') bs1 bs2 apply_map'''\n 4. rev_map_invar (subrobdds_set bs''') rev_map'''\n 5. \\<forall>a.\n       robdd_\\<alpha> b' a = bop (robdd_\\<alpha> b1 a) (robdd_\\<alpha> b2 a)", "thus \"subrobdds b' \\<union> bs \\<subseteq> subrobdds_set bs'''\""], ["proof (prove)\nusing this:\n  bs \\<subseteq> subrobdds_set bs''\n\ngoal (1 subgoal):\n 1. subrobdds b' \\<union> bs \\<subseteq> subrobdds_set bs'''", "unfolding bs'''_def"], ["proof (prove)\nusing this:\n  bs \\<subseteq> subrobdds_set bs''\n\ngoal (1 subgoal):\n 1. subrobdds b' \\<union> bs \\<subseteq> subrobdds_set (insert b' bs'')", "by (simp add: subset_iff)"], ["proof (state)\nthis:\n  subrobdds b' \\<union> bs \\<subseteq> subrobdds_set bs'''\n\ngoal (4 subgoals):\n 1. robdd_invar_ext (subrobdds_set bs''') n b'\n 2. apply_map_invar bop (subrobdds_set bs''') bs1 bs2 apply_map'''\n 3. rev_map_invar (subrobdds_set bs''') rev_map'''\n 4. \\<forall>a.\n       robdd_\\<alpha> b' a = bop (robdd_\\<alpha> b1 a) (robdd_\\<alpha> b2 a)", "next"], ["proof (state)\ngoal (4 subgoals):\n 1. robdd_invar_ext (subrobdds_set bs''') n b'\n 2. apply_map_invar bop (subrobdds_set bs''') bs1 bs2 apply_map'''\n 3. rev_map_invar (subrobdds_set bs''') rev_map'''\n 4. \\<forall>a.\n       robdd_\\<alpha> b' a = bop (robdd_\\<alpha> b1 a) (robdd_\\<alpha> b2 a)", "from b'_invar"], ["proof (chain)\npicking this:\n  robdd_invar_ext bs''' v'' b'", "show \"robdd_invar_ext (subrobdds_set bs''') n b'\""], ["proof (prove)\nusing this:\n  robdd_invar_ext bs''' v'' b'\n\ngoal (1 subgoal):\n 1. robdd_invar_ext (subrobdds_set bs''') n b'", "unfolding robdd_invar_ext_def robdd_invar_ids_def"], ["proof (prove)\nusing this:\n  b' \\<in> subrobdds_set bs''' \\<and>\n  (\\<forall>b1 b2.\n      b1 \\<in> subrobdds_set bs''' \\<and>\n      b2 \\<in> subrobdds_set bs''' \\<longrightarrow>\n      (robdd_\\<alpha> b1 = robdd_\\<alpha> b2) =\n      (robdd_get_id b1 = robdd_get_id b2)) \\<and>\n  robdd_invar_vars_greater v'' b' \\<and> robdd_invar_reduced b'\n\ngoal (1 subgoal):\n 1. b' \\<in> subrobdds_set (subrobdds_set bs''') \\<and>\n    (\\<forall>b1 b2.\n        b1 \\<in> subrobdds_set (subrobdds_set bs''') \\<and>\n        b2 \\<in> subrobdds_set (subrobdds_set bs''') \\<longrightarrow>\n        (robdd_\\<alpha> b1 = robdd_\\<alpha> b2) =\n        (robdd_get_id b1 = robdd_get_id b2)) \\<and>\n    robdd_invar_vars_greater n b' \\<and> robdd_invar_reduced b'", "using robdd_invar_vars_greater___weaken[of v'' b' n]\n                  v''_eq min_var_b12_ge_n"], ["proof (prove)\nusing this:\n  b' \\<in> subrobdds_set bs''' \\<and>\n  (\\<forall>b1 b2.\n      b1 \\<in> subrobdds_set bs''' \\<and>\n      b2 \\<in> subrobdds_set bs''' \\<longrightarrow>\n      (robdd_\\<alpha> b1 = robdd_\\<alpha> b2) =\n      (robdd_get_id b1 = robdd_get_id b2)) \\<and>\n  robdd_invar_vars_greater v'' b' \\<and> robdd_invar_reduced b'\n  \\<lbrakk>robdd_invar_vars_greater v'' b'; n \\<le> v''\\<rbrakk>\n  \\<Longrightarrow> robdd_invar_vars_greater n b'\n  robdd_get_min_var b1 b2 = v''\n  n \\<le> robdd_get_min_var b1 b2\n\ngoal (1 subgoal):\n 1. b' \\<in> subrobdds_set (subrobdds_set bs''') \\<and>\n    (\\<forall>b1 b2.\n        b1 \\<in> subrobdds_set (subrobdds_set bs''') \\<and>\n        b2 \\<in> subrobdds_set (subrobdds_set bs''') \\<longrightarrow>\n        (robdd_\\<alpha> b1 = robdd_\\<alpha> b2) =\n        (robdd_get_id b1 = robdd_get_id b2)) \\<and>\n    robdd_invar_vars_greater n b' \\<and> robdd_invar_reduced b'", "by simp"], ["proof (state)\nthis:\n  robdd_invar_ext (subrobdds_set bs''') n b'\n\ngoal (3 subgoals):\n 1. apply_map_invar bop (subrobdds_set bs''') bs1 bs2 apply_map'''\n 2. rev_map_invar (subrobdds_set bs''') rev_map'''\n 3. \\<forall>a.\n       robdd_\\<alpha> b' a = bop (robdd_\\<alpha> b1 a) (robdd_\\<alpha> b2 a)", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. apply_map_invar bop (subrobdds_set bs''') bs1 bs2 apply_map'''\n 2. rev_map_invar (subrobdds_set bs''') rev_map'''\n 3. \\<forall>a.\n       robdd_\\<alpha> b' a = bop (robdd_\\<alpha> b1 a) (robdd_\\<alpha> b2 a)", "show \"\\<forall>a. robdd_\\<alpha> b' a = bop (robdd_\\<alpha> b1 a) (robdd_\\<alpha> b2 a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>a.\n       robdd_\\<alpha> b' a = bop (robdd_\\<alpha> b1 a) (robdd_\\<alpha> b2 a)", "by fact"], ["proof (state)\nthis:\n  \\<forall>a.\n     robdd_\\<alpha> b' a = bop (robdd_\\<alpha> b1 a) (robdd_\\<alpha> b2 a)\n\ngoal (2 subgoals):\n 1. apply_map_invar bop (subrobdds_set bs''') bs1 bs2 apply_map'''\n 2. rev_map_invar (subrobdds_set bs''') rev_map'''", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. apply_map_invar bop (subrobdds_set bs''') bs1 bs2 apply_map'''\n 2. rev_map_invar (subrobdds_set bs''') rev_map'''", "from invar_rev_map''' subrobdds_set_mono[of bs''']"], ["proof (chain)\npicking this:\n  rev_map_invar bs''' rev_map'''\n  bs''' \\<subseteq> subrobdds_set bs'''", "show \"rev_map_invar (subrobdds_set bs''') rev_map'''\""], ["proof (prove)\nusing this:\n  rev_map_invar bs''' rev_map'''\n  bs''' \\<subseteq> subrobdds_set bs'''\n\ngoal (1 subgoal):\n 1. rev_map_invar (subrobdds_set bs''') rev_map'''", "unfolding rev_map_invar_def"], ["proof (prove)\nusing this:\n  r_invar (fst rev_map''') \\<and>\n  1 < snd rev_map''' \\<and>\n  (\\<forall>b\\<in>subrobdds_set bs'''.\n      robdd_invar_ext bs''' 0 b \\<and>\n      robdd_get_id b < snd rev_map''') \\<and>\n  (\\<forall>li v ri b.\n      r_\\<alpha> (fst rev_map''') (li, v, ri) = Some b \\<longrightarrow>\n      robdd_invar_ext bs''' v b \\<and>\n      b \\<in> bs''' \\<and>\n      (\\<exists>l r i.\n          b = robdd_var i l v r \\<and>\n          robdd_get_id l = li \\<and> robdd_get_id r = ri)) \\<and>\n  (\\<forall>i l r v.\n      robdd_var i l v r \\<in> subrobdds_set bs''' \\<longrightarrow>\n      r_\\<alpha> (fst rev_map''') (robdd_get_id l, v, robdd_get_id r) =\n      Some (robdd_var i l v r))\n  bs''' \\<subseteq> subrobdds_set bs'''\n\ngoal (1 subgoal):\n 1. r_invar (fst rev_map''') \\<and>\n    1 < snd rev_map''' \\<and>\n    (\\<forall>b\\<in>subrobdds_set (subrobdds_set bs''').\n        robdd_invar_ext (subrobdds_set bs''') 0 b \\<and>\n        robdd_get_id b < snd rev_map''') \\<and>\n    (\\<forall>li v ri b.\n        r_\\<alpha> (fst rev_map''') (li, v, ri) = Some b \\<longrightarrow>\n        robdd_invar_ext (subrobdds_set bs''') v b \\<and>\n        b \\<in> subrobdds_set bs''' \\<and>\n        (\\<exists>l r i.\n            b = robdd_var i l v r \\<and>\n            robdd_get_id l = li \\<and> robdd_get_id r = ri)) \\<and>\n    (\\<forall>i l r v.\n        robdd_var i l v r\n        \\<in> subrobdds_set (subrobdds_set bs''') \\<longrightarrow>\n        r_\\<alpha> (fst rev_map''') (robdd_get_id l, v, robdd_get_id r) =\n        Some (robdd_var i l v r))", "by (simp add: subset_iff)"], ["proof (state)\nthis:\n  rev_map_invar (subrobdds_set bs''') rev_map'''\n\ngoal (1 subgoal):\n 1. apply_map_invar bop (subrobdds_set bs''') bs1 bs2 apply_map'''", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. apply_map_invar bop (subrobdds_set bs''') bs1 bs2 apply_map'''", "from robdd_id_map_properties[of bs1] invar_ids_equal_bs1 b1_in"], ["proof (chain)\npicking this:\n  robdd_invar_ids_equal bs1 = robdd_id_map_OK bs1 (robdd_id_map bs1)\n  robdd_invar_ids_equal bs1\n  b1 \\<in> subrobdds_set bs1", "have id_map_b1: \"robdd_id_map bs1 (robdd_get_id b1) = Some b1\""], ["proof (prove)\nusing this:\n  robdd_invar_ids_equal bs1 = robdd_id_map_OK bs1 (robdd_id_map bs1)\n  robdd_invar_ids_equal bs1\n  b1 \\<in> subrobdds_set bs1\n\ngoal (1 subgoal):\n 1. robdd_id_map bs1 (robdd_get_id b1) = Some b1", "by (simp add: robdd_id_map_OK_def)"], ["proof (state)\nthis:\n  robdd_id_map bs1 (robdd_get_id b1) = Some b1\n\ngoal (1 subgoal):\n 1. apply_map_invar bop (subrobdds_set bs''') bs1 bs2 apply_map'''", "from robdd_id_map_properties[of bs2] invar_ids_equal_bs2 b2_in"], ["proof (chain)\npicking this:\n  robdd_invar_ids_equal bs2 = robdd_id_map_OK bs2 (robdd_id_map bs2)\n  robdd_invar_ids_equal bs2\n  b2 \\<in> subrobdds_set bs2", "have id_map_b2: \"robdd_id_map bs2 (robdd_get_id b2) = Some b2\""], ["proof (prove)\nusing this:\n  robdd_invar_ids_equal bs2 = robdd_id_map_OK bs2 (robdd_id_map bs2)\n  robdd_invar_ids_equal bs2\n  b2 \\<in> subrobdds_set bs2\n\ngoal (1 subgoal):\n 1. robdd_id_map bs2 (robdd_get_id b2) = Some b2", "by (simp add: robdd_id_map_OK_def)"], ["proof (state)\nthis:\n  robdd_id_map bs2 (robdd_get_id b2) = Some b2\n\ngoal (1 subgoal):\n 1. apply_map_invar bop (subrobdds_set bs''') bs1 bs2 apply_map'''", "{"], ["proof (state)\nthis:\n  robdd_id_map bs2 (robdd_get_id b2) = Some b2\n\ngoal (1 subgoal):\n 1. apply_map_invar bop (subrobdds_set bs''') bs1 bs2 apply_map'''", "fix n b"], ["proof (state)\ngoal (1 subgoal):\n 1. apply_map_invar bop (subrobdds_set bs''') bs1 bs2 apply_map'''", "assume b_invar: \"robdd_invar_ext bs'' n b\""], ["proof (state)\nthis:\n  robdd_invar_ext bs'' n b\n\ngoal (1 subgoal):\n 1. apply_map_invar bop (subrobdds_set bs''') bs1 bs2 apply_map'''", "from b'_invar"], ["proof (chain)\npicking this:\n  robdd_invar_ext bs''' v'' b'", "have ids_bs''': \"robdd_invar_ids bs'''\""], ["proof (prove)\nusing this:\n  robdd_invar_ext bs''' v'' b'\n\ngoal (1 subgoal):\n 1. robdd_invar_ids bs'''", "unfolding robdd_invar_ext_def"], ["proof (prove)\nusing this:\n  b' \\<in> subrobdds_set bs''' \\<and>\n  robdd_invar_ids bs''' \\<and>\n  robdd_invar_vars_greater v'' b' \\<and> robdd_invar_reduced b'\n\ngoal (1 subgoal):\n 1. robdd_invar_ids bs'''", "by simp"], ["proof (state)\nthis:\n  robdd_invar_ids bs'''\n\ngoal (1 subgoal):\n 1. apply_map_invar bop (subrobdds_set bs''') bs1 bs2 apply_map'''", "from b_invar subrobdds_set_mono2 [of bs'' bs'''] ids_bs'''"], ["proof (chain)\npicking this:\n  robdd_invar_ext bs'' n b\n  bs'' \\<subseteq> bs''' \\<Longrightarrow>\n  subrobdds_set bs'' \\<subseteq> subrobdds_set bs'''\n  robdd_invar_ids bs'''", "have \"robdd_invar_ext bs''' n b\""], ["proof (prove)\nusing this:\n  robdd_invar_ext bs'' n b\n  bs'' \\<subseteq> bs''' \\<Longrightarrow>\n  subrobdds_set bs'' \\<subseteq> subrobdds_set bs'''\n  robdd_invar_ids bs'''\n\ngoal (1 subgoal):\n 1. robdd_invar_ext bs''' n b", "unfolding robdd_invar_ext_def bs'''_def"], ["proof (prove)\nusing this:\n  b \\<in> subrobdds_set bs'' \\<and>\n  robdd_invar_ids bs'' \\<and>\n  robdd_invar_vars_greater n b \\<and> robdd_invar_reduced b\n  bs'' \\<subseteq> insert b' bs'' \\<Longrightarrow>\n  subrobdds_set bs'' \\<subseteq> subrobdds_set (insert b' bs'')\n  robdd_invar_ids (insert b' bs'')\n\ngoal (1 subgoal):\n 1. b \\<in> subrobdds_set (insert b' bs'') \\<and>\n    robdd_invar_ids (insert b' bs'') \\<and>\n    robdd_invar_vars_greater n b \\<and> robdd_invar_reduced b", "by simp"], ["proof (state)\nthis:\n  robdd_invar_ext bs''' n b\n\ngoal (1 subgoal):\n 1. apply_map_invar bop (subrobdds_set bs''') bs1 bs2 apply_map'''", "}"], ["proof (state)\nthis:\n  robdd_invar_ext bs'' ?nb2 ?ba2 \\<Longrightarrow>\n  robdd_invar_ext bs''' ?nb2 ?ba2\n\ngoal (1 subgoal):\n 1. apply_map_invar bop (subrobdds_set bs''') bs1 bs2 apply_map'''", "note invar_bs'''_ext = this"], ["proof (state)\nthis:\n  robdd_invar_ext bs'' ?nb2 ?ba2 \\<Longrightarrow>\n  robdd_invar_ext bs''' ?nb2 ?ba2\n\ngoal (1 subgoal):\n 1. apply_map_invar bop (subrobdds_set bs''') bs1 bs2 apply_map'''", "from invar_apply_map'' b'_invar"], ["proof (chain)\npicking this:\n  apply_map_invar bop bs'' bs1 bs2 apply_map''\n  robdd_invar_ext bs''' v'' b'", "show \"apply_map_invar bop (subrobdds_set bs''') bs1 bs2 apply_map'''\""], ["proof (prove)\nusing this:\n  apply_map_invar bop bs'' bs1 bs2 apply_map''\n  robdd_invar_ext bs''' v'' b'\n\ngoal (1 subgoal):\n 1. apply_map_invar bop (subrobdds_set bs''') bs1 bs2 apply_map'''", "unfolding apply_map'''_def apply_map_invar_def"], ["proof (prove)\nusing this:\n  c_invar apply_map'' \\<and>\n  (\\<forall>i1 i2 b.\n      c_lookup (i1, i2) apply_map'' = Some b \\<longrightarrow>\n      (\\<exists>b1 b2.\n          robdd_id_map bs1 i1 = Some b1 \\<and>\n          robdd_id_map bs2 i2 = Some b2 \\<and>\n          robdd_invar_ext bs'' (robdd_get_min_var b1 b2) b \\<and>\n          (\\<forall>a.\n              robdd_\\<alpha> b a =\n              bop (robdd_\\<alpha> b1 a) (robdd_\\<alpha> b2 a))))\n  robdd_invar_ext bs''' v'' b'\n\ngoal (1 subgoal):\n 1. c_invar\n     (c_update (robdd_get_id b1, robdd_get_id b2) b' apply_map'') \\<and>\n    (\\<forall>i1 i2 b.\n        c_lookup (i1, i2)\n         (c_update (robdd_get_id b1, robdd_get_id b2) b' apply_map'') =\n        Some b \\<longrightarrow>\n        (\\<exists>b1 b2.\n            robdd_id_map bs1 i1 = Some b1 \\<and>\n            robdd_id_map bs2 i2 = Some b2 \\<and>\n            robdd_invar_ext (subrobdds_set bs''') (robdd_get_min_var b1 b2)\n             b \\<and>\n            (\\<forall>a.\n                robdd_\\<alpha> b a =\n                bop (robdd_\\<alpha> b1 a) (robdd_\\<alpha> b2 a))))", "apply (elim conjE)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>robdd_invar_ext bs''' v'' b'; c_invar apply_map'';\n     \\<forall>i1 i2 b.\n        c_lookup (i1, i2) apply_map'' = Some b \\<longrightarrow>\n        (\\<exists>b1 b2.\n            robdd_id_map bs1 i1 = Some b1 \\<and>\n            robdd_id_map bs2 i2 = Some b2 \\<and>\n            robdd_invar_ext bs'' (robdd_get_min_var b1 b2) b \\<and>\n            (\\<forall>a.\n                robdd_\\<alpha> b a =\n                bop (robdd_\\<alpha> b1 a) (robdd_\\<alpha> b2 a)))\\<rbrakk>\n    \\<Longrightarrow> c_invar\n                       (c_update (robdd_get_id b1, robdd_get_id b2) b'\n                         apply_map'') \\<and>\n                      (\\<forall>i1 i2 b.\n                          c_lookup (i1, i2)\n                           (c_update (robdd_get_id b1, robdd_get_id b2) b'\n                             apply_map'') =\n                          Some b \\<longrightarrow>\n                          (\\<exists>b1 b2.\n                              robdd_id_map bs1 i1 = Some b1 \\<and>\n                              robdd_id_map bs2 i2 = Some b2 \\<and>\n                              robdd_invar_ext (subrobdds_set bs''')\n                               (robdd_get_min_var b1 b2) b \\<and>\n                              (\\<forall>a.\n                                  robdd_\\<alpha> b a =\n                                  bop (robdd_\\<alpha> b1 a)\n                                   (robdd_\\<alpha> b2 a))))", "apply (simp add: c.lookup_correct c.update_correct id_map_b1 id_map_b2 v''_eq sem_OK)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>robdd_invar_ext bs''' v'' b'; c_invar apply_map'';\n     \\<forall>i1 i2 b.\n        c_\\<alpha> apply_map'' (i1, i2) = Some b \\<longrightarrow>\n        (\\<exists>b1.\n            robdd_id_map bs1 i1 = Some b1 \\<and>\n            (\\<exists>b2.\n                robdd_id_map bs2 i2 = Some b2 \\<and>\n                robdd_invar_ext bs'' (robdd_get_min_var b1 b2) b \\<and>\n                (\\<forall>a.\n                    robdd_\\<alpha> b a =\n                    bop (robdd_\\<alpha> b1 a)\n                     (robdd_\\<alpha> b2 a))))\\<rbrakk>\n    \\<Longrightarrow> \\<forall>i1 i2.\n                         (i1 = robdd_get_id b1 \\<longrightarrow>\n                          i2 \\<noteq> robdd_get_id b2) \\<longrightarrow>\n                         (\\<forall>b.\n                             c_\\<alpha> apply_map'' (i1, i2) =\n                             Some b \\<longrightarrow>\n                             (\\<exists>b1.\n                                 robdd_id_map bs1 i1 = Some b1 \\<and>\n                                 (\\<exists>b2.\n                                     robdd_id_map bs2 i2 = Some b2 \\<and>\n                                     robdd_invar_ext bs'''\n(robdd_get_min_var b1 b2) b \\<and>\n                                     (\\<forall>a.\n   robdd_\\<alpha> b a = bop (robdd_\\<alpha> b1 a) (robdd_\\<alpha> b2 a)))))", "apply (metis invar_bs'''_ext)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  apply_map_invar bop (subrobdds_set bs''') bs1 bs2 apply_map'''\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  subrobdds (fst (robdd_apply apply_map rev_map bop b1 b2)) \\<union> bs\n  \\<subseteq> subrobdds_set bs''' \\<and>\n  robdd_invar_ext (subrobdds_set bs''') n\n   (fst (robdd_apply apply_map rev_map bop b1 b2)) \\<and>\n  apply_map_invar bop (subrobdds_set bs''') bs1 bs2\n   (fst (snd (robdd_apply apply_map rev_map bop b1 b2))) \\<and>\n  rev_map_invar (subrobdds_set bs''')\n   (snd (snd (robdd_apply apply_map rev_map bop b1 b2))) \\<and>\n  (\\<forall>a.\n      robdd_\\<alpha> (fst (robdd_apply apply_map rev_map bop b1 b2)) a =\n      bop (robdd_\\<alpha> b1 a) (robdd_\\<alpha> b2 a))\n\ngoal (1 subgoal):\n 1. c_lookup (robdd_get_id b1, robdd_get_id b2) apply_map =\n    None \\<Longrightarrow>\n    \\<exists>bs'.\n       subrobdds (fst (robdd_apply apply_map rev_map bop b1 b2)) \\<union> bs\n       \\<subseteq> bs' \\<and>\n       robdd_invar_ext bs' n\n        (fst (robdd_apply apply_map rev_map bop b1 b2)) \\<and>\n       apply_map_invar bop bs' bs1 bs2\n        (fst (snd (robdd_apply apply_map rev_map bop b1 b2))) \\<and>\n       rev_map_invar bs'\n        (snd (snd (robdd_apply apply_map rev_map bop b1 b2))) \\<and>\n       (\\<forall>a.\n           robdd_\\<alpha> (fst (robdd_apply apply_map rev_map bop b1 b2))\n            a =\n           bop (robdd_\\<alpha> b1 a) (robdd_\\<alpha> b2 a))", "thus ?thesis"], ["proof (prove)\nusing this:\n  subrobdds (fst (robdd_apply apply_map rev_map bop b1 b2)) \\<union> bs\n  \\<subseteq> subrobdds_set bs''' \\<and>\n  robdd_invar_ext (subrobdds_set bs''') n\n   (fst (robdd_apply apply_map rev_map bop b1 b2)) \\<and>\n  apply_map_invar bop (subrobdds_set bs''') bs1 bs2\n   (fst (snd (robdd_apply apply_map rev_map bop b1 b2))) \\<and>\n  rev_map_invar (subrobdds_set bs''')\n   (snd (snd (robdd_apply apply_map rev_map bop b1 b2))) \\<and>\n  (\\<forall>a.\n      robdd_\\<alpha> (fst (robdd_apply apply_map rev_map bop b1 b2)) a =\n      bop (robdd_\\<alpha> b1 a) (robdd_\\<alpha> b2 a))\n\ngoal (1 subgoal):\n 1. \\<exists>bs'.\n       subrobdds (fst (robdd_apply apply_map rev_map bop b1 b2)) \\<union> bs\n       \\<subseteq> bs' \\<and>\n       robdd_invar_ext bs' n\n        (fst (robdd_apply apply_map rev_map bop b1 b2)) \\<and>\n       apply_map_invar bop bs' bs1 bs2\n        (fst (snd (robdd_apply apply_map rev_map bop b1 b2))) \\<and>\n       rev_map_invar bs'\n        (snd (snd (robdd_apply apply_map rev_map bop b1 b2))) \\<and>\n       (\\<forall>a.\n           robdd_\\<alpha> (fst (robdd_apply apply_map rev_map bop b1 b2))\n            a =\n           bop (robdd_\\<alpha> b1 a) (robdd_\\<alpha> b2 a))", "by blast"], ["proof (state)\nthis:\n  \\<exists>bs'.\n     subrobdds (fst (robdd_apply apply_map rev_map bop b1 b2)) \\<union> bs\n     \\<subseteq> bs' \\<and>\n     robdd_invar_ext bs' n\n      (fst (robdd_apply apply_map rev_map bop b1 b2)) \\<and>\n     apply_map_invar bop bs' bs1 bs2\n      (fst (snd (robdd_apply apply_map rev_map bop b1 b2))) \\<and>\n     rev_map_invar bs'\n      (snd (snd (robdd_apply apply_map rev_map bop b1 b2))) \\<and>\n     (\\<forall>a.\n         robdd_\\<alpha> (fst (robdd_apply apply_map rev_map bop b1 b2)) a =\n         bop (robdd_\\<alpha> b1 a) (robdd_\\<alpha> b2 a))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>bs'.\n     subrobdds (fst (robdd_apply apply_map rev_map bop b1 b2)) \\<union> bs\n     \\<subseteq> bs' \\<and>\n     robdd_invar_ext bs' n\n      (fst (robdd_apply apply_map rev_map bop b1 b2)) \\<and>\n     apply_map_invar bop bs' bs1 bs2\n      (fst (snd (robdd_apply apply_map rev_map bop b1 b2))) \\<and>\n     rev_map_invar bs'\n      (snd (snd (robdd_apply apply_map rev_map bop b1 b2))) \\<and>\n     (\\<forall>a.\n         robdd_\\<alpha> (fst (robdd_apply apply_map rev_map bop b1 b2)) a =\n         bop (robdd_\\<alpha> b1 a) (robdd_\\<alpha> b2 a))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>bs'.\n     subrobdds (fst (robdd_apply apply_map rev_map bop b1 b2)) \\<union> bs\n     \\<subseteq> bs' \\<and>\n     robdd_invar_ext bs' n\n      (fst (robdd_apply apply_map rev_map bop b1 b2)) \\<and>\n     apply_map_invar bop bs' bs1 bs2\n      (fst (snd (robdd_apply apply_map rev_map bop b1 b2))) \\<and>\n     rev_map_invar bs'\n      (snd (snd (robdd_apply apply_map rev_map bop b1 b2))) \\<and>\n     (\\<forall>a.\n         robdd_\\<alpha> (fst (robdd_apply apply_map rev_map bop b1 b2)) a =\n         bop (robdd_\\<alpha> b1 a) (robdd_\\<alpha> b2 a))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma robdd_apply_correct :\n  fixes b1 b2 bop rev_map apply_map \n  defines \"res \\<equiv> robdd_apply (c_empty ()) (r_empty (), 2) bop b1 b2\"\n  defines \"b \\<equiv> fst res\"\n  assumes b1_invar: \"robdd_invar b1\"      \n      and b2_invar: \"robdd_invar b2\"      \n  shows \"robdd_invar b \\<and> (\\<forall>a. robdd_\\<alpha> b a \\<longleftrightarrow> bop (robdd_\\<alpha> b1 a) (robdd_\\<alpha> b2 a))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. robdd_invar b \\<and>\n    (\\<forall>a.\n        robdd_\\<alpha> b a =\n        bop (robdd_\\<alpha> b1 a) (robdd_\\<alpha> b2 a))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. robdd_invar b \\<and>\n    (\\<forall>a.\n        robdd_\\<alpha> b a =\n        bop (robdd_\\<alpha> b1 a) (robdd_\\<alpha> b2 a))", "from robdd_apply_correct_full [OF rev_map_invar_empty apply_map_invar_empty\n          b1_invar[unfolded robdd_invar_def] b2_invar[unfolded robdd_invar_def], of bop,\n          folded res_def b_def] b1_invar b2_invar"], ["proof (chain)\npicking this:\n  \\<lbrakk>\\<And>b. b \\<in> {b1} \\<Longrightarrow> robdd_invar b;\n   \\<And>b. b \\<in> {b2} \\<Longrightarrow> robdd_invar b\\<rbrakk>\n  \\<Longrightarrow> \\<exists>bs'.\n                       subrobdds b \\<union> {} \\<subseteq> bs' \\<and>\n                       robdd_invar_ext bs' 0 b \\<and>\n                       apply_map_invar bop bs' {b1} {b2}\n                        (fst (snd res)) \\<and>\n                       rev_map_invar bs' (snd (snd res)) \\<and>\n                       (\\<forall>a.\n                           robdd_\\<alpha> b a =\n                           bop (robdd_\\<alpha> b1 a) (robdd_\\<alpha> b2 a))\n  robdd_invar b1\n  robdd_invar b2", "obtain bs where invar_ext: \"robdd_invar_ext bs 0 b\"\n                and sem_OK: \"\\<forall>a. robdd_\\<alpha> b a = bop (robdd_\\<alpha> b1 a) (robdd_\\<alpha> b2 a)\""], ["proof (prove)\nusing this:\n  \\<lbrakk>\\<And>b. b \\<in> {b1} \\<Longrightarrow> robdd_invar b;\n   \\<And>b. b \\<in> {b2} \\<Longrightarrow> robdd_invar b\\<rbrakk>\n  \\<Longrightarrow> \\<exists>bs'.\n                       subrobdds b \\<union> {} \\<subseteq> bs' \\<and>\n                       robdd_invar_ext bs' 0 b \\<and>\n                       apply_map_invar bop bs' {b1} {b2}\n                        (fst (snd res)) \\<and>\n                       rev_map_invar bs' (snd (snd res)) \\<and>\n                       (\\<forall>a.\n                           robdd_\\<alpha> b a =\n                           bop (robdd_\\<alpha> b1 a) (robdd_\\<alpha> b2 a))\n  robdd_invar b1\n  robdd_invar b2\n\ngoal (1 subgoal):\n 1. (\\<And>bs.\n        \\<lbrakk>robdd_invar_ext bs 0 b;\n         \\<forall>a.\n            robdd_\\<alpha> b a =\n            bop (robdd_\\<alpha> b1 a) (robdd_\\<alpha> b2 a)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  robdd_invar_ext bs 0 b\n  \\<forall>a.\n     robdd_\\<alpha> b a = bop (robdd_\\<alpha> b1 a) (robdd_\\<alpha> b2 a)\n\ngoal (1 subgoal):\n 1. robdd_invar b \\<and>\n    (\\<forall>a.\n        robdd_\\<alpha> b a =\n        bop (robdd_\\<alpha> b1 a) (robdd_\\<alpha> b2 a))", "from invar_ext"], ["proof (chain)\npicking this:\n  robdd_invar_ext bs 0 b", "have invar: \"robdd_invar b\""], ["proof (prove)\nusing this:\n  robdd_invar_ext bs 0 b\n\ngoal (1 subgoal):\n 1. robdd_invar b", "by (rule robdd_invar_impl)"], ["proof (state)\nthis:\n  robdd_invar b\n\ngoal (1 subgoal):\n 1. robdd_invar b \\<and>\n    (\\<forall>a.\n        robdd_\\<alpha> b a =\n        bop (robdd_\\<alpha> b1 a) (robdd_\\<alpha> b2 a))", "from invar sem_OK"], ["proof (chain)\npicking this:\n  robdd_invar b\n  \\<forall>a.\n     robdd_\\<alpha> b a = bop (robdd_\\<alpha> b1 a) (robdd_\\<alpha> b2 a)", "show ?thesis"], ["proof (prove)\nusing this:\n  robdd_invar b\n  \\<forall>a.\n     robdd_\\<alpha> b a = bop (robdd_\\<alpha> b1 a) (robdd_\\<alpha> b2 a)\n\ngoal (1 subgoal):\n 1. robdd_invar b \\<and>\n    (\\<forall>a.\n        robdd_\\<alpha> b a =\n        bop (robdd_\\<alpha> b1 a) (robdd_\\<alpha> b2 a))", "by simp"], ["proof (state)\nthis:\n  robdd_invar b \\<and>\n  (\\<forall>a.\n      robdd_\\<alpha> b a = bop (robdd_\\<alpha> b1 a) (robdd_\\<alpha> b2 a))\n\ngoal:\nNo subgoals!", "qed"], ["", "definition robdd_neg where\n    \"robdd_neg apply_map rev_map b = robdd_apply apply_map rev_map (\\<lambda>b1 b2. \\<not>(b1 \\<and> b2)) b robdd_one\""], ["", "lemma robdd_neg_correct_full :\n  fixes b rev_map apply_map bs\n  defines \"res \\<equiv> robdd_neg apply_map rev_map b\"\n  defines \"b' \\<equiv> fst res\"\n  defines \"apply_map' \\<equiv> fst (snd res)\"\n  defines \"rev_map' \\<equiv> snd (snd res)\"\n  assumes invar_rev_map: \"rev_map_invar bs rev_map\"\n      and invar_apply_map: \"apply_map_invar (\\<lambda>b1 b2. \\<not>(b1 \\<and> b2)) bs bs1 bs2 apply_map\"\n      and b_invar: \"robdd_invar_ext bs1 n b\"      \n      and bs1_OK: \"\\<And>b. b \\<in> bs1 \\<Longrightarrow> robdd_invar b\"\n      and bs2_OK: \"\\<And>b. b \\<in> bs2 \\<Longrightarrow> robdd_invar b\" \"robdd_invar_ids bs2\"\n  shows \"\\<exists>bs'. \n         subrobdds b' \\<union> bs \\<subseteq> bs' \\<and> \n         robdd_invar_ext bs' n b' \\<and>\n         apply_map_invar (\\<lambda>b1 b2. \\<not>(b1 \\<and> b2)) bs' bs1 \n              (insert robdd_zero (insert robdd_one bs2)) apply_map' \\<and>\n         rev_map_invar bs' rev_map' \\<and>\n         (\\<forall>a. robdd_\\<alpha> b' a \\<longleftrightarrow> \\<not> (robdd_\\<alpha> b a))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>bs'.\n       subrobdds b' \\<union> bs \\<subseteq> bs' \\<and>\n       robdd_invar_ext bs' n b' \\<and>\n       apply_map_invar (\\<lambda>b1 b2. \\<not> (b1 \\<and> b2)) bs' bs1\n        (insert robdd_zero (insert robdd_one bs2)) apply_map' \\<and>\n       rev_map_invar bs' rev_map' \\<and>\n       (\\<forall>a. robdd_\\<alpha> b' a = (\\<not> robdd_\\<alpha> b a))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>bs'.\n       subrobdds b' \\<union> bs \\<subseteq> bs' \\<and>\n       robdd_invar_ext bs' n b' \\<and>\n       apply_map_invar (\\<lambda>b1 b2. \\<not> (b1 \\<and> b2)) bs' bs1\n        (insert robdd_zero (insert robdd_one bs2)) apply_map' \\<and>\n       rev_map_invar bs' rev_map' \\<and>\n       (\\<forall>a. robdd_\\<alpha> b' a = (\\<not> robdd_\\<alpha> b a))", "from bs2_OK"], ["proof (chain)\npicking this:\n  ?b \\<in> bs2 \\<Longrightarrow> robdd_invar ?b\n  robdd_invar_ids bs2", "have \"robdd_invar_ids_leafs bs2\""], ["proof (prove)\nusing this:\n  ?b \\<in> bs2 \\<Longrightarrow> robdd_invar ?b\n  robdd_invar_ids bs2\n\ngoal (1 subgoal):\n 1. robdd_invar_ids_leafs bs2", "apply (rule_tac robdd_invar_ids_leafs_intro)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>b.\n       \\<lbrakk>\\<And>b. b \\<in> bs2 \\<Longrightarrow> robdd_invar b;\n        robdd_invar_ids bs2; b \\<in> bs2\\<rbrakk>\n       \\<Longrightarrow> robdd_invar_reduced b\n 2. \\<lbrakk>\\<And>b. b \\<in> bs2 \\<Longrightarrow> robdd_invar b;\n     robdd_invar_ids bs2\\<rbrakk>\n    \\<Longrightarrow> robdd_invar_ids bs2", "apply (simp_all add: robdd_invar_def robdd_invar_ext_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  robdd_invar_ids_leafs bs2\n\ngoal (1 subgoal):\n 1. \\<exists>bs'.\n       subrobdds b' \\<union> bs \\<subseteq> bs' \\<and>\n       robdd_invar_ext bs' n b' \\<and>\n       apply_map_invar (\\<lambda>b1 b2. \\<not> (b1 \\<and> b2)) bs' bs1\n        (insert robdd_zero (insert robdd_one bs2)) apply_map' \\<and>\n       rev_map_invar bs' rev_map' \\<and>\n       (\\<forall>a. robdd_\\<alpha> b' a = (\\<not> robdd_\\<alpha> b a))", "with bs2_OK(2)"], ["proof (chain)\npicking this:\n  robdd_invar_ids bs2\n  robdd_invar_ids_leafs bs2", "have \"robdd_invar_ids_full bs2\""], ["proof (prove)\nusing this:\n  robdd_invar_ids bs2\n  robdd_invar_ids_leafs bs2\n\ngoal (1 subgoal):\n 1. robdd_invar_ids_full bs2", "by (simp add: robdd_invar_ids_full_def)"], ["proof (state)\nthis:\n  robdd_invar_ids_full bs2\n\ngoal (1 subgoal):\n 1. \\<exists>bs'.\n       subrobdds b' \\<union> bs \\<subseteq> bs' \\<and>\n       robdd_invar_ext bs' n b' \\<and>\n       apply_map_invar (\\<lambda>b1 b2. \\<not> (b1 \\<and> b2)) bs' bs1\n        (insert robdd_zero (insert robdd_one bs2)) apply_map' \\<and>\n       rev_map_invar bs' rev_map' \\<and>\n       (\\<forall>a. robdd_\\<alpha> b' a = (\\<not> robdd_\\<alpha> b a))", "hence bs2'_invar: \"robdd_invar_ids (insert robdd_zero (insert robdd_one bs2))\""], ["proof (prove)\nusing this:\n  robdd_invar_ids_full bs2\n\ngoal (1 subgoal):\n 1. robdd_invar_ids (insert robdd_zero (insert robdd_one bs2))", "unfolding robdd_invar_ids_full_alt_def"], ["proof (prove)\nusing this:\n  robdd_invar_ids (insert robdd_zero (insert robdd_one bs2))\n\ngoal (1 subgoal):\n 1. robdd_invar_ids (insert robdd_zero (insert robdd_one bs2))", "by simp"], ["proof (state)\nthis:\n  robdd_invar_ids (insert robdd_zero (insert robdd_one bs2))\n\ngoal (1 subgoal):\n 1. \\<exists>bs'.\n       subrobdds b' \\<union> bs \\<subseteq> bs' \\<and>\n       robdd_invar_ext bs' n b' \\<and>\n       apply_map_invar (\\<lambda>b1 b2. \\<not> (b1 \\<and> b2)) bs' bs1\n        (insert robdd_zero (insert robdd_one bs2)) apply_map' \\<and>\n       rev_map_invar bs' rev_map' \\<and>\n       (\\<forall>a. robdd_\\<alpha> b' a = (\\<not> robdd_\\<alpha> b a))", "from b_invar"], ["proof (chain)\npicking this:\n  robdd_invar_ext bs1 n b", "have bs1_invar: \"robdd_invar_ids bs1\""], ["proof (prove)\nusing this:\n  robdd_invar_ext bs1 n b\n\ngoal (1 subgoal):\n 1. robdd_invar_ids bs1", "unfolding robdd_invar_ext_def"], ["proof (prove)\nusing this:\n  b \\<in> subrobdds_set bs1 \\<and>\n  robdd_invar_ids bs1 \\<and>\n  robdd_invar_vars_greater n b \\<and> robdd_invar_reduced b\n\ngoal (1 subgoal):\n 1. robdd_invar_ids bs1", "by simp"], ["proof (state)\nthis:\n  robdd_invar_ids bs1\n\ngoal (1 subgoal):\n 1. \\<exists>bs'.\n       subrobdds b' \\<union> bs \\<subseteq> bs' \\<and>\n       robdd_invar_ext bs' n b' \\<and>\n       apply_map_invar (\\<lambda>b1 b2. \\<not> (b1 \\<and> b2)) bs' bs1\n        (insert robdd_zero (insert robdd_one bs2)) apply_map' \\<and>\n       rev_map_invar bs' rev_map' \\<and>\n       (\\<forall>a. robdd_\\<alpha> b' a = (\\<not> robdd_\\<alpha> b a))", "from invar_apply_map"], ["proof (chain)\npicking this:\n  apply_map_invar (\\<lambda>b1 b2. \\<not> (b1 \\<and> b2)) bs bs1 bs2\n   apply_map", "have\n      invar_apply_map': \"apply_map_invar (\\<lambda>b1 b2. \\<not>(b1 \\<and> b2)) bs bs1 \n           (insert robdd_zero (insert robdd_one bs2)) apply_map\""], ["proof (prove)\nusing this:\n  apply_map_invar (\\<lambda>b1 b2. \\<not> (b1 \\<and> b2)) bs bs1 bs2\n   apply_map\n\ngoal (1 subgoal):\n 1. apply_map_invar (\\<lambda>b1 b2. \\<not> (b1 \\<and> b2)) bs bs1\n     (insert robdd_zero (insert robdd_one bs2)) apply_map", "apply (rule apply_map_invar_extend)"], ["proof (prove)\ngoal (6 subgoals):\n 1. bs1 \\<subseteq> bs1\n 2. robdd_invar_ids bs1\n 3. \\<And>b. b \\<in> bs1 \\<Longrightarrow> robdd_invar b\n 4. bs2 \\<subseteq> insert robdd_zero (insert robdd_one bs2)\n 5. robdd_invar_ids (insert robdd_zero (insert robdd_one bs2))\n 6. \\<And>b.\n       b \\<in> insert robdd_zero (insert robdd_one bs2) \\<Longrightarrow>\n       robdd_invar b", "apply (auto simp add: subset_iff bs1_OK bs2_OK bs2'_invar bs1_invar)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  apply_map_invar (\\<lambda>b1 b2. \\<not> (b1 \\<and> b2)) bs bs1\n   (insert robdd_zero (insert robdd_one bs2)) apply_map\n\ngoal (1 subgoal):\n 1. \\<exists>bs'.\n       subrobdds b' \\<union> bs \\<subseteq> bs' \\<and>\n       robdd_invar_ext bs' n b' \\<and>\n       apply_map_invar (\\<lambda>b1 b2. \\<not> (b1 \\<and> b2)) bs' bs1\n        (insert robdd_zero (insert robdd_one bs2)) apply_map' \\<and>\n       rev_map_invar bs' rev_map' \\<and>\n       (\\<forall>a. robdd_\\<alpha> b' a = (\\<not> robdd_\\<alpha> b a))", "from robdd_apply_correct_full[OF invar_rev_map invar_apply_map' b_invar _ bs1_OK, of robdd_one]\n         res_def[symmetric]"], ["proof (chain)\npicking this:\n  \\<lbrakk>robdd_invar_ext (insert robdd_zero (insert robdd_one bs2)) n\n            robdd_one;\n   \\<And>b. b \\<in> bs1 \\<Longrightarrow> b \\<in> bs1;\n   \\<And>b.\n      b \\<in> insert robdd_zero (insert robdd_one bs2) \\<Longrightarrow>\n      robdd_invar b\\<rbrakk>\n  \\<Longrightarrow> \\<exists>bs'.\n                       subrobdds\n                        (fst (robdd_apply apply_map rev_map\n                               (\\<lambda>b1 b2. \\<not> (b1 \\<and> b2)) b\n                               robdd_one)) \\<union>\n                       bs\n                       \\<subseteq> bs' \\<and>\n                       robdd_invar_ext bs' n\n                        (fst (robdd_apply apply_map rev_map\n                               (\\<lambda>b1 b2. \\<not> (b1 \\<and> b2)) b\n                               robdd_one)) \\<and>\n                       apply_map_invar\n                        (\\<lambda>b1 b2. \\<not> (b1 \\<and> b2)) bs' bs1\n                        (insert robdd_zero (insert robdd_one bs2))\n                        (fst (snd (robdd_apply apply_map rev_map\n                                    (\\<lambda>b1 b2. \\<not> (b1 \\<and> b2))\n                                    b robdd_one))) \\<and>\n                       rev_map_invar bs'\n                        (snd (snd (robdd_apply apply_map rev_map\n                                    (\\<lambda>b1 b2. \\<not> (b1 \\<and> b2))\n                                    b robdd_one))) \\<and>\n                       (\\<forall>a.\n                           robdd_\\<alpha>\n                            (fst (robdd_apply apply_map rev_map\n                                   (\\<lambda>b1 b2. \\<not> (b1 \\<and> b2)) b\n                                   robdd_one))\n                            a =\n                           (\\<not> (robdd_\\<alpha> b a \\<and>\n                                    robdd_\\<alpha> robdd_one a)))\n  robdd_neg apply_map rev_map b \\<equiv> res", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<lbrakk>robdd_invar_ext (insert robdd_zero (insert robdd_one bs2)) n\n            robdd_one;\n   \\<And>b. b \\<in> bs1 \\<Longrightarrow> b \\<in> bs1;\n   \\<And>b.\n      b \\<in> insert robdd_zero (insert robdd_one bs2) \\<Longrightarrow>\n      robdd_invar b\\<rbrakk>\n  \\<Longrightarrow> \\<exists>bs'.\n                       subrobdds\n                        (fst (robdd_apply apply_map rev_map\n                               (\\<lambda>b1 b2. \\<not> (b1 \\<and> b2)) b\n                               robdd_one)) \\<union>\n                       bs\n                       \\<subseteq> bs' \\<and>\n                       robdd_invar_ext bs' n\n                        (fst (robdd_apply apply_map rev_map\n                               (\\<lambda>b1 b2. \\<not> (b1 \\<and> b2)) b\n                               robdd_one)) \\<and>\n                       apply_map_invar\n                        (\\<lambda>b1 b2. \\<not> (b1 \\<and> b2)) bs' bs1\n                        (insert robdd_zero (insert robdd_one bs2))\n                        (fst (snd (robdd_apply apply_map rev_map\n                                    (\\<lambda>b1 b2. \\<not> (b1 \\<and> b2))\n                                    b robdd_one))) \\<and>\n                       rev_map_invar bs'\n                        (snd (snd (robdd_apply apply_map rev_map\n                                    (\\<lambda>b1 b2. \\<not> (b1 \\<and> b2))\n                                    b robdd_one))) \\<and>\n                       (\\<forall>a.\n                           robdd_\\<alpha>\n                            (fst (robdd_apply apply_map rev_map\n                                   (\\<lambda>b1 b2. \\<not> (b1 \\<and> b2)) b\n                                   robdd_one))\n                            a =\n                           (\\<not> (robdd_\\<alpha> b a \\<and>\n                                    robdd_\\<alpha> robdd_one a)))\n  robdd_neg apply_map rev_map b \\<equiv> res\n\ngoal (1 subgoal):\n 1. \\<exists>bs'.\n       subrobdds b' \\<union> bs \\<subseteq> bs' \\<and>\n       robdd_invar_ext bs' n b' \\<and>\n       apply_map_invar (\\<lambda>b1 b2. \\<not> (b1 \\<and> b2)) bs' bs1\n        (insert robdd_zero (insert robdd_one bs2)) apply_map' \\<and>\n       rev_map_invar bs' rev_map' \\<and>\n       (\\<forall>a. robdd_\\<alpha> b' a = (\\<not> robdd_\\<alpha> b a))", "apply (simp add: robdd_neg_def b'_def[symmetric] apply_map'_def[symmetric]\n       rev_map'_def[symmetric])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<lbrakk>robdd_invar_ids\n                       (insert robdd_zero (insert robdd_one bs2));\n              \\<And>b.\n                 b = robdd_zero \\<or>\n                 b = robdd_one \\<or> b \\<in> bs2 \\<Longrightarrow>\n                 robdd_invar b\\<rbrakk>\n             \\<Longrightarrow> \\<exists>bs'.\n                                  subrobdds b' \\<subseteq> bs' \\<and>\n                                  bs \\<subseteq> bs' \\<and>\n                                  robdd_invar_ext bs' n b' \\<and>\n                                  apply_map_invar\n                                   (\\<lambda>b1 b2.\n b1 \\<longrightarrow> \\<not> b2)\n                                   bs' bs1\n                                   (insert robdd_zero\n                                     (insert robdd_one bs2))\n                                   apply_map' \\<and>\n                                  rev_map_invar bs' rev_map' \\<and>\n                                  (\\<forall>a.\nrobdd_\\<alpha> b' a = (\\<not> robdd_\\<alpha> b a));\n     robdd_apply apply_map rev_map\n      (\\<lambda>b1 b2. b1 \\<longrightarrow> \\<not> b2) b robdd_one \\<equiv>\n     res\\<rbrakk>\n    \\<Longrightarrow> \\<exists>bs'.\n                         subrobdds b' \\<subseteq> bs' \\<and>\n                         bs \\<subseteq> bs' \\<and>\n                         robdd_invar_ext bs' n b' \\<and>\n                         apply_map_invar\n                          (\\<lambda>b1 b2. b1 \\<longrightarrow> \\<not> b2)\n                          bs' bs1 (insert robdd_zero (insert robdd_one bs2))\n                          apply_map' \\<and>\n                         rev_map_invar bs' rev_map' \\<and>\n                         (\\<forall>a.\n                             robdd_\\<alpha> b' a =\n                             (\\<not> robdd_\\<alpha> b a))", "by (metis bs2_OK(1) bs2'_invar robdd_invar_simps_leafs)"], ["proof (state)\nthis:\n  \\<exists>bs'.\n     subrobdds b' \\<union> bs \\<subseteq> bs' \\<and>\n     robdd_invar_ext bs' n b' \\<and>\n     apply_map_invar (\\<lambda>b1 b2. \\<not> (b1 \\<and> b2)) bs' bs1\n      (insert robdd_zero (insert robdd_one bs2)) apply_map' \\<and>\n     rev_map_invar bs' rev_map' \\<and>\n     (\\<forall>a. robdd_\\<alpha> b' a = (\\<not> robdd_\\<alpha> b a))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma robdd_neg_correct :\n  fixes b rev_map apply_map bs\n  defines \"res \\<equiv> robdd_neg (c_empty ()) (r_empty (), 2) b\"\n  defines \"bn \\<equiv> fst res\"\n  assumes b_invar: \"robdd_invar b\"      \n  shows \"robdd_invar bn \\<and> (\\<forall>a. robdd_\\<alpha> bn a \\<longleftrightarrow> \\<not>(robdd_\\<alpha> b a))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. robdd_invar bn \\<and>\n    (\\<forall>a. robdd_\\<alpha> bn a = (\\<not> robdd_\\<alpha> b a))", "unfolding res_def bn_def robdd_neg_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. robdd_invar\n     (fst (robdd_apply (c_empty ()) (r_empty (), 2)\n            (\\<lambda>b1 b2. \\<not> (b1 \\<and> b2)) b robdd_one)) \\<and>\n    (\\<forall>a.\n        robdd_\\<alpha>\n         (fst (robdd_apply (c_empty ()) (r_empty (), 2)\n                (\\<lambda>b1 b2. \\<not> (b1 \\<and> b2)) b robdd_one))\n         a =\n        (\\<not> robdd_\\<alpha> b a))", "using robdd_apply_correct [OF b_invar, of robdd_one \"(\\<lambda>b1 b2. \\<not>(b1 \\<and> b2))\"]"], ["proof (prove)\nusing this:\n  robdd_invar robdd_one \\<Longrightarrow>\n  robdd_invar\n   (fst (robdd_apply (c_empty ()) (r_empty (), 2)\n          (\\<lambda>b1 b2. \\<not> (b1 \\<and> b2)) b robdd_one)) \\<and>\n  (\\<forall>a.\n      robdd_\\<alpha>\n       (fst (robdd_apply (c_empty ()) (r_empty (), 2)\n              (\\<lambda>b1 b2. \\<not> (b1 \\<and> b2)) b robdd_one))\n       a =\n      (\\<not> (robdd_\\<alpha> b a \\<and> robdd_\\<alpha> robdd_one a)))\n\ngoal (1 subgoal):\n 1. robdd_invar\n     (fst (robdd_apply (c_empty ()) (r_empty (), 2)\n            (\\<lambda>b1 b2. \\<not> (b1 \\<and> b2)) b robdd_one)) \\<and>\n    (\\<forall>a.\n        robdd_\\<alpha>\n         (fst (robdd_apply (c_empty ()) (r_empty (), 2)\n                (\\<lambda>b1 b2. \\<not> (b1 \\<and> b2)) b robdd_one))\n         a =\n        (\\<not> robdd_\\<alpha> b a))", "by simp"], ["", "lemma robdd_neg_alt_def :\n    \"robdd_neg apply_map rev_map b = \n      (case (bope_neg (robdd_to_bool b)) of \n         Some f \\<Rightarrow> (robdd_leaf f, apply_map, rev_map)\n       | None \\<Rightarrow> (case c_lookup (robdd_get_id b, 1) apply_map of\n            Some b3 \\<Rightarrow> (b3, apply_map, rev_map)\n          | None \\<Rightarrow> (let (l1, r1, var) = robdd_neg_next b in \n                     let (l, apply_map, rev_map) = robdd_neg apply_map rev_map l1 in\n                     let (r, apply_map, rev_map) = robdd_neg apply_map rev_map r1 in\n                     let (b3, rev_map) = robdd_construct rev_map l var r in\n                     let apply_map = c_update (robdd_get_id b, 1) b3 apply_map in\n                     (b3, apply_map, rev_map))))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. robdd_neg apply_map rev_map b =\n    (case bope_neg (robdd_to_bool b) of\n     None \\<Rightarrow>\n       case c_lookup (robdd_get_id b, 1) apply_map of\n       None \\<Rightarrow>\n         let (l1, r1, var) = robdd_neg_next b;\n             (l, apply_map, rev_map) = robdd_neg apply_map rev_map l1;\n             (r, apply_map, rev_map) = robdd_neg apply_map rev_map r1;\n             (b3, rev_map) = robdd_construct rev_map l var r;\n             apply_map = c_update (robdd_get_id b, 1) b3 apply_map\n         in (b3, apply_map, rev_map)\n       | Some b3 \\<Rightarrow> (b3, apply_map, rev_map)\n     | Some f \\<Rightarrow> (robdd_leaf f, apply_map, rev_map))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. robdd_neg apply_map rev_map b =\n    (case bope_neg (robdd_to_bool b) of\n     None \\<Rightarrow>\n       case c_lookup (robdd_get_id b, 1) apply_map of\n       None \\<Rightarrow>\n         let (l1, r1, var) = robdd_neg_next b;\n             (l, apply_map, rev_map) = robdd_neg apply_map rev_map l1;\n             (r, apply_map, rev_map) = robdd_neg apply_map rev_map r1;\n             (b3, rev_map) = robdd_construct rev_map l var r;\n             apply_map = c_update (robdd_get_id b, 1) b3 apply_map\n         in (b3, apply_map, rev_map)\n       | Some b3 \\<Rightarrow> (b3, apply_map, rev_map)\n     | Some f \\<Rightarrow> (robdd_leaf f, apply_map, rev_map))", "have bope_neg_intro: \n        \"(bool_op_extend (\\<lambda>b1 b2. b1 \\<longrightarrow> \\<not> b2) (robdd_to_bool b) (Some True)) =\n         (bope_neg (robdd_to_bool b))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. bool_op_extend (\\<lambda>b1 b2. b1 \\<longrightarrow> \\<not> b2)\n     (robdd_to_bool b) (Some True) =\n    bope_neg (robdd_to_bool b)", "apply (cases \"robdd_to_bool b\" rule: bool_opt_exhaust)"], ["proof (prove)\ngoal (3 subgoals):\n 1. robdd_to_bool b = None \\<Longrightarrow>\n    bool_op_extend (\\<lambda>b1 b2. b1 \\<longrightarrow> \\<not> b2)\n     (robdd_to_bool b) (Some True) =\n    bope_neg (robdd_to_bool b)\n 2. robdd_to_bool b = Some True \\<Longrightarrow>\n    bool_op_extend (\\<lambda>b1 b2. b1 \\<longrightarrow> \\<not> b2)\n     (robdd_to_bool b) (Some True) =\n    bope_neg (robdd_to_bool b)\n 3. robdd_to_bool b = Some False \\<Longrightarrow>\n    bool_op_extend (\\<lambda>b1 b2. b1 \\<longrightarrow> \\<not> b2)\n     (robdd_to_bool b) (Some True) =\n    bope_neg (robdd_to_bool b)", "apply (simp_all)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  bool_op_extend (\\<lambda>b1 b2. b1 \\<longrightarrow> \\<not> b2)\n   (robdd_to_bool b) (Some True) =\n  bope_neg (robdd_to_bool b)\n\ngoal (1 subgoal):\n 1. robdd_neg apply_map rev_map b =\n    (case bope_neg (robdd_to_bool b) of\n     None \\<Rightarrow>\n       case c_lookup (robdd_get_id b, 1) apply_map of\n       None \\<Rightarrow>\n         let (l1, r1, var) = robdd_neg_next b;\n             (l, apply_map, rev_map) = robdd_neg apply_map rev_map l1;\n             (r, apply_map, rev_map) = robdd_neg apply_map rev_map r1;\n             (b3, rev_map) = robdd_construct rev_map l var r;\n             apply_map = c_update (robdd_get_id b, 1) b3 apply_map\n         in (b3, apply_map, rev_map)\n       | Some b3 \\<Rightarrow> (b3, apply_map, rev_map)\n     | Some f \\<Rightarrow> (robdd_leaf f, apply_map, rev_map))", "obtain b1_l b1_r v'' b2_l b2_r where \n       next_eq: \"robdd_apply_next b robdd_one = (b1_l, b1_r, v'', b2_l, b2_r)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>b1_l b1_r v'' b2_l b2_r.\n        robdd_apply_next b robdd_one =\n        (b1_l, b1_r, v'', b2_l, b2_r) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (metis prod.exhaust)"], ["proof (state)\nthis:\n  robdd_apply_next b robdd_one = (b1_l, b1_r, v'', b2_l, b2_r)\n\ngoal (1 subgoal):\n 1. robdd_neg apply_map rev_map b =\n    (case bope_neg (robdd_to_bool b) of\n     None \\<Rightarrow>\n       case c_lookup (robdd_get_id b, 1) apply_map of\n       None \\<Rightarrow>\n         let (l1, r1, var) = robdd_neg_next b;\n             (l, apply_map, rev_map) = robdd_neg apply_map rev_map l1;\n             (r, apply_map, rev_map) = robdd_neg apply_map rev_map r1;\n             (b3, rev_map) = robdd_construct rev_map l var r;\n             apply_map = c_update (robdd_get_id b, 1) b3 apply_map\n         in (b3, apply_map, rev_map)\n       | Some b3 \\<Rightarrow> (b3, apply_map, rev_map)\n     | Some f \\<Rightarrow> (robdd_leaf f, apply_map, rev_map))", "from next_eq"], ["proof (chain)\npicking this:\n  robdd_apply_next b robdd_one = (b1_l, b1_r, v'', b2_l, b2_r)", "have b2_eq[simp]: \"b2_l = robdd_one\" \"b2_r = robdd_one\""], ["proof (prove)\nusing this:\n  robdd_apply_next b robdd_one = (b1_l, b1_r, v'', b2_l, b2_r)\n\ngoal (1 subgoal):\n 1. b2_l = robdd_one &&& b2_r = robdd_one", "by (case_tac[!] b) auto"], ["proof (state)\nthis:\n  b2_l = robdd_one\n  b2_r = robdd_one\n\ngoal (1 subgoal):\n 1. robdd_neg apply_map rev_map b =\n    (case bope_neg (robdd_to_bool b) of\n     None \\<Rightarrow>\n       case c_lookup (robdd_get_id b, 1) apply_map of\n       None \\<Rightarrow>\n         let (l1, r1, var) = robdd_neg_next b;\n             (l, apply_map, rev_map) = robdd_neg apply_map rev_map l1;\n             (r, apply_map, rev_map) = robdd_neg apply_map rev_map r1;\n             (b3, rev_map) = robdd_construct rev_map l var r;\n             apply_map = c_update (robdd_get_id b, 1) b3 apply_map\n         in (b3, apply_map, rev_map)\n       | Some b3 \\<Rightarrow> (b3, apply_map, rev_map)\n     | Some f \\<Rightarrow> (robdd_leaf f, apply_map, rev_map))", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. robdd_neg apply_map rev_map b =\n    (case bope_neg (robdd_to_bool b) of\n     None \\<Rightarrow>\n       case c_lookup (robdd_get_id b, 1) apply_map of\n       None \\<Rightarrow>\n         let (l1, r1, var) = robdd_neg_next b;\n             (l, apply_map, rev_map) = robdd_neg apply_map rev_map l1;\n             (r, apply_map, rev_map) = robdd_neg apply_map rev_map r1;\n             (b3, rev_map) = robdd_construct rev_map l var r;\n             apply_map = c_update (robdd_get_id b, 1) b3 apply_map\n         in (b3, apply_map, rev_map)\n       | Some b3 \\<Rightarrow> (b3, apply_map, rev_map)\n     | Some f \\<Rightarrow> (robdd_leaf f, apply_map, rev_map))", "unfolding robdd_neg_def robdd_apply.simps[of _ _ _ b]"], ["proof (prove)\ngoal (1 subgoal):\n 1. (case bool_op_extend (\\<lambda>b1 b2. \\<not> (b1 \\<and> b2))\n           (robdd_to_bool b) (robdd_to_bool robdd_one) of\n     None \\<Rightarrow>\n       case c_lookup (robdd_get_id b, robdd_get_id robdd_one) apply_map of\n       None \\<Rightarrow>\n         let (l1, r1, var, l2, r2) = robdd_apply_next b robdd_one;\n             (l, apply_map, rev_map) =\n               robdd_apply apply_map rev_map\n                (\\<lambda>b1 b2. \\<not> (b1 \\<and> b2)) l1 l2;\n             (r, apply_map, rev_map) =\n               robdd_apply apply_map rev_map\n                (\\<lambda>b1 b2. \\<not> (b1 \\<and> b2)) r1 r2;\n             (ba, rev_map) = robdd_construct rev_map l var r;\n             apply_map =\n               c_update (robdd_get_id b, robdd_get_id robdd_one) ba\n                apply_map\n         in (ba, apply_map, rev_map)\n       | Some b3 \\<Rightarrow> (b3, apply_map, rev_map)\n     | Some f \\<Rightarrow> (robdd_leaf f, apply_map, rev_map)) =\n    (case bope_neg (robdd_to_bool b) of\n     None \\<Rightarrow>\n       case c_lookup (robdd_get_id b, 1) apply_map of\n       None \\<Rightarrow>\n         let (l1, r1, var) = robdd_neg_next b;\n             (l, apply_map, rev_map) =\n               robdd_apply apply_map rev_map\n                (\\<lambda>b1 b2. \\<not> (b1 \\<and> b2)) l1 robdd_one;\n             (r, apply_map, rev_map) =\n               robdd_apply apply_map rev_map\n                (\\<lambda>b1 b2. \\<not> (b1 \\<and> b2)) r1 robdd_one;\n             (b3, rev_map) = robdd_construct rev_map l var r;\n             apply_map = c_update (robdd_get_id b, 1) b3 apply_map\n         in (b3, apply_map, rev_map)\n       | Some b3 \\<Rightarrow> (b3, apply_map, rev_map)\n     | Some f \\<Rightarrow> (robdd_leaf f, apply_map, rev_map))", "by (simp split: option.splits add: bope_neg_intro next_eq split_def robdd_neg_next_def)"], ["proof (state)\nthis:\n  robdd_neg apply_map rev_map b =\n  (case bope_neg (robdd_to_bool b) of\n   None \\<Rightarrow>\n     case c_lookup (robdd_get_id b, 1) apply_map of\n     None \\<Rightarrow>\n       let (l1, r1, var) = robdd_neg_next b;\n           (l, apply_map, rev_map) = robdd_neg apply_map rev_map l1;\n           (r, apply_map, rev_map) = robdd_neg apply_map rev_map r1;\n           (b3, rev_map) = robdd_construct rev_map l var r;\n           apply_map = c_update (robdd_get_id b, 1) b3 apply_map\n       in (b3, apply_map, rev_map)\n     | Some b3 \\<Rightarrow> (b3, apply_map, rev_map)\n   | Some f \\<Rightarrow> (robdd_leaf f, apply_map, rev_map))\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>An auxiliary construct to get the ids of a ROBDD consistent with some cache or\n          other ROBDDs.\\<close>"], ["", "definition robdd_copy where\n    \"robdd_copy apply_map rev_map b = robdd_apply apply_map rev_map (\\<lambda>b1 b2. (b1 \\<and> b2)) b robdd_one\""], ["", "lemma robdd_copy_correct_full :\n  fixes b rev_map apply_map bs\n  defines \"res \\<equiv> robdd_copy apply_map rev_map b\"\n  defines \"b' \\<equiv> fst res\"\n  defines \"apply_map' \\<equiv> fst (snd res)\"\n  defines \"rev_map' \\<equiv> snd (snd res)\"\n  assumes invar_rev_map: \"rev_map_invar bs rev_map\"\n      and invar_apply_map: \"apply_map_invar (\\<lambda>b1 b2. (b1 \\<and> b2)) bs bs1 bs2 apply_map\"\n      and b_invar: \"robdd_invar_ext bs1 n b\"      \n      and bs1_OK: \"\\<And>b. b \\<in> bs1 \\<Longrightarrow> robdd_invar b\"\n      and bs2_OK: \"\\<And>b. b \\<in> bs2 \\<Longrightarrow> robdd_invar b\" \"robdd_invar_ids bs2\"\n  shows \"\\<exists>bs'. \n         subrobdds b' \\<union> bs \\<subseteq> bs' \\<and> \n         robdd_invar_ext bs' n b' \\<and>\n         apply_map_invar (\\<lambda>b1 b2. (b1 \\<and> b2)) bs' bs1 \n              (insert robdd_zero (insert robdd_one bs2)) apply_map' \\<and>\n         rev_map_invar bs' rev_map' \\<and>\n         (\\<forall>a. robdd_\\<alpha> b' a \\<longleftrightarrow> (robdd_\\<alpha> b a))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>bs'.\n       subrobdds b' \\<union> bs \\<subseteq> bs' \\<and>\n       robdd_invar_ext bs' n b' \\<and>\n       apply_map_invar (\\<and>) bs' bs1\n        (insert robdd_zero (insert robdd_one bs2)) apply_map' \\<and>\n       rev_map_invar bs' rev_map' \\<and>\n       (\\<forall>a. robdd_\\<alpha> b' a = robdd_\\<alpha> b a)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>bs'.\n       subrobdds b' \\<union> bs \\<subseteq> bs' \\<and>\n       robdd_invar_ext bs' n b' \\<and>\n       apply_map_invar (\\<and>) bs' bs1\n        (insert robdd_zero (insert robdd_one bs2)) apply_map' \\<and>\n       rev_map_invar bs' rev_map' \\<and>\n       (\\<forall>a. robdd_\\<alpha> b' a = robdd_\\<alpha> b a)", "from bs2_OK"], ["proof (chain)\npicking this:\n  ?b \\<in> bs2 \\<Longrightarrow> robdd_invar ?b\n  robdd_invar_ids bs2", "have \"robdd_invar_ids_leafs bs2\""], ["proof (prove)\nusing this:\n  ?b \\<in> bs2 \\<Longrightarrow> robdd_invar ?b\n  robdd_invar_ids bs2\n\ngoal (1 subgoal):\n 1. robdd_invar_ids_leafs bs2", "apply (rule_tac robdd_invar_ids_leafs_intro)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>b.\n       \\<lbrakk>\\<And>b. b \\<in> bs2 \\<Longrightarrow> robdd_invar b;\n        robdd_invar_ids bs2; b \\<in> bs2\\<rbrakk>\n       \\<Longrightarrow> robdd_invar_reduced b\n 2. \\<lbrakk>\\<And>b. b \\<in> bs2 \\<Longrightarrow> robdd_invar b;\n     robdd_invar_ids bs2\\<rbrakk>\n    \\<Longrightarrow> robdd_invar_ids bs2", "apply (simp_all add: robdd_invar_def robdd_invar_ext_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  robdd_invar_ids_leafs bs2\n\ngoal (1 subgoal):\n 1. \\<exists>bs'.\n       subrobdds b' \\<union> bs \\<subseteq> bs' \\<and>\n       robdd_invar_ext bs' n b' \\<and>\n       apply_map_invar (\\<and>) bs' bs1\n        (insert robdd_zero (insert robdd_one bs2)) apply_map' \\<and>\n       rev_map_invar bs' rev_map' \\<and>\n       (\\<forall>a. robdd_\\<alpha> b' a = robdd_\\<alpha> b a)", "with bs2_OK(2)"], ["proof (chain)\npicking this:\n  robdd_invar_ids bs2\n  robdd_invar_ids_leafs bs2", "have \"robdd_invar_ids_full bs2\""], ["proof (prove)\nusing this:\n  robdd_invar_ids bs2\n  robdd_invar_ids_leafs bs2\n\ngoal (1 subgoal):\n 1. robdd_invar_ids_full bs2", "by (simp add: robdd_invar_ids_full_def)"], ["proof (state)\nthis:\n  robdd_invar_ids_full bs2\n\ngoal (1 subgoal):\n 1. \\<exists>bs'.\n       subrobdds b' \\<union> bs \\<subseteq> bs' \\<and>\n       robdd_invar_ext bs' n b' \\<and>\n       apply_map_invar (\\<and>) bs' bs1\n        (insert robdd_zero (insert robdd_one bs2)) apply_map' \\<and>\n       rev_map_invar bs' rev_map' \\<and>\n       (\\<forall>a. robdd_\\<alpha> b' a = robdd_\\<alpha> b a)", "hence bs2'_invar: \"robdd_invar_ids (insert robdd_zero (insert robdd_one bs2))\""], ["proof (prove)\nusing this:\n  robdd_invar_ids_full bs2\n\ngoal (1 subgoal):\n 1. robdd_invar_ids (insert robdd_zero (insert robdd_one bs2))", "unfolding robdd_invar_ids_full_alt_def"], ["proof (prove)\nusing this:\n  robdd_invar_ids (insert robdd_zero (insert robdd_one bs2))\n\ngoal (1 subgoal):\n 1. robdd_invar_ids (insert robdd_zero (insert robdd_one bs2))", "by simp"], ["proof (state)\nthis:\n  robdd_invar_ids (insert robdd_zero (insert robdd_one bs2))\n\ngoal (1 subgoal):\n 1. \\<exists>bs'.\n       subrobdds b' \\<union> bs \\<subseteq> bs' \\<and>\n       robdd_invar_ext bs' n b' \\<and>\n       apply_map_invar (\\<and>) bs' bs1\n        (insert robdd_zero (insert robdd_one bs2)) apply_map' \\<and>\n       rev_map_invar bs' rev_map' \\<and>\n       (\\<forall>a. robdd_\\<alpha> b' a = robdd_\\<alpha> b a)", "from b_invar"], ["proof (chain)\npicking this:\n  robdd_invar_ext bs1 n b", "have bs1_invar: \"robdd_invar_ids bs1\""], ["proof (prove)\nusing this:\n  robdd_invar_ext bs1 n b\n\ngoal (1 subgoal):\n 1. robdd_invar_ids bs1", "unfolding robdd_invar_ext_def"], ["proof (prove)\nusing this:\n  b \\<in> subrobdds_set bs1 \\<and>\n  robdd_invar_ids bs1 \\<and>\n  robdd_invar_vars_greater n b \\<and> robdd_invar_reduced b\n\ngoal (1 subgoal):\n 1. robdd_invar_ids bs1", "by simp"], ["proof (state)\nthis:\n  robdd_invar_ids bs1\n\ngoal (1 subgoal):\n 1. \\<exists>bs'.\n       subrobdds b' \\<union> bs \\<subseteq> bs' \\<and>\n       robdd_invar_ext bs' n b' \\<and>\n       apply_map_invar (\\<and>) bs' bs1\n        (insert robdd_zero (insert robdd_one bs2)) apply_map' \\<and>\n       rev_map_invar bs' rev_map' \\<and>\n       (\\<forall>a. robdd_\\<alpha> b' a = robdd_\\<alpha> b a)", "from invar_apply_map"], ["proof (chain)\npicking this:\n  apply_map_invar (\\<and>) bs bs1 bs2 apply_map", "have\n      invar_apply_map': \"apply_map_invar (\\<lambda>b1 b2. (b1 \\<and> b2)) bs bs1 \n           (insert robdd_zero (insert robdd_one bs2)) apply_map\""], ["proof (prove)\nusing this:\n  apply_map_invar (\\<and>) bs bs1 bs2 apply_map\n\ngoal (1 subgoal):\n 1. apply_map_invar (\\<and>) bs bs1\n     (insert robdd_zero (insert robdd_one bs2)) apply_map", "apply (rule apply_map_invar_extend)"], ["proof (prove)\ngoal (6 subgoals):\n 1. bs1 \\<subseteq> bs1\n 2. robdd_invar_ids bs1\n 3. \\<And>b. b \\<in> bs1 \\<Longrightarrow> robdd_invar b\n 4. bs2 \\<subseteq> insert robdd_zero (insert robdd_one bs2)\n 5. robdd_invar_ids (insert robdd_zero (insert robdd_one bs2))\n 6. \\<And>b.\n       b \\<in> insert robdd_zero (insert robdd_one bs2) \\<Longrightarrow>\n       robdd_invar b", "apply (auto simp add: subset_iff bs1_OK bs2_OK bs2'_invar bs1_invar)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  apply_map_invar (\\<and>) bs bs1 (insert robdd_zero (insert robdd_one bs2))\n   apply_map\n\ngoal (1 subgoal):\n 1. \\<exists>bs'.\n       subrobdds b' \\<union> bs \\<subseteq> bs' \\<and>\n       robdd_invar_ext bs' n b' \\<and>\n       apply_map_invar (\\<and>) bs' bs1\n        (insert robdd_zero (insert robdd_one bs2)) apply_map' \\<and>\n       rev_map_invar bs' rev_map' \\<and>\n       (\\<forall>a. robdd_\\<alpha> b' a = robdd_\\<alpha> b a)", "from robdd_apply_correct_full[OF invar_rev_map invar_apply_map' b_invar _ bs1_OK, of robdd_one]\n         res_def[symmetric]"], ["proof (chain)\npicking this:\n  \\<lbrakk>robdd_invar_ext (insert robdd_zero (insert robdd_one bs2)) n\n            robdd_one;\n   \\<And>b. b \\<in> bs1 \\<Longrightarrow> b \\<in> bs1;\n   \\<And>b.\n      b \\<in> insert robdd_zero (insert robdd_one bs2) \\<Longrightarrow>\n      robdd_invar b\\<rbrakk>\n  \\<Longrightarrow> \\<exists>bs'.\n                       subrobdds\n                        (fst (robdd_apply apply_map rev_map (\\<and>) b\n                               robdd_one)) \\<union>\n                       bs\n                       \\<subseteq> bs' \\<and>\n                       robdd_invar_ext bs' n\n                        (fst (robdd_apply apply_map rev_map (\\<and>) b\n                               robdd_one)) \\<and>\n                       apply_map_invar (\\<and>) bs' bs1\n                        (insert robdd_zero (insert robdd_one bs2))\n                        (fst (snd (robdd_apply apply_map rev_map (\\<and>) b\n                                    robdd_one))) \\<and>\n                       rev_map_invar bs'\n                        (snd (snd (robdd_apply apply_map rev_map (\\<and>) b\n                                    robdd_one))) \\<and>\n                       (\\<forall>a.\n                           robdd_\\<alpha>\n                            (fst (robdd_apply apply_map rev_map (\\<and>) b\n                                   robdd_one))\n                            a =\n                           (robdd_\\<alpha> b a \\<and>\n                            robdd_\\<alpha> robdd_one a))\n  robdd_copy apply_map rev_map b \\<equiv> res", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<lbrakk>robdd_invar_ext (insert robdd_zero (insert robdd_one bs2)) n\n            robdd_one;\n   \\<And>b. b \\<in> bs1 \\<Longrightarrow> b \\<in> bs1;\n   \\<And>b.\n      b \\<in> insert robdd_zero (insert robdd_one bs2) \\<Longrightarrow>\n      robdd_invar b\\<rbrakk>\n  \\<Longrightarrow> \\<exists>bs'.\n                       subrobdds\n                        (fst (robdd_apply apply_map rev_map (\\<and>) b\n                               robdd_one)) \\<union>\n                       bs\n                       \\<subseteq> bs' \\<and>\n                       robdd_invar_ext bs' n\n                        (fst (robdd_apply apply_map rev_map (\\<and>) b\n                               robdd_one)) \\<and>\n                       apply_map_invar (\\<and>) bs' bs1\n                        (insert robdd_zero (insert robdd_one bs2))\n                        (fst (snd (robdd_apply apply_map rev_map (\\<and>) b\n                                    robdd_one))) \\<and>\n                       rev_map_invar bs'\n                        (snd (snd (robdd_apply apply_map rev_map (\\<and>) b\n                                    robdd_one))) \\<and>\n                       (\\<forall>a.\n                           robdd_\\<alpha>\n                            (fst (robdd_apply apply_map rev_map (\\<and>) b\n                                   robdd_one))\n                            a =\n                           (robdd_\\<alpha> b a \\<and>\n                            robdd_\\<alpha> robdd_one a))\n  robdd_copy apply_map rev_map b \\<equiv> res\n\ngoal (1 subgoal):\n 1. \\<exists>bs'.\n       subrobdds b' \\<union> bs \\<subseteq> bs' \\<and>\n       robdd_invar_ext bs' n b' \\<and>\n       apply_map_invar (\\<and>) bs' bs1\n        (insert robdd_zero (insert robdd_one bs2)) apply_map' \\<and>\n       rev_map_invar bs' rev_map' \\<and>\n       (\\<forall>a. robdd_\\<alpha> b' a = robdd_\\<alpha> b a)", "apply (simp add: robdd_copy_def b'_def[symmetric] apply_map'_def[symmetric]\n       rev_map'_def[symmetric])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<lbrakk>robdd_invar_ids\n                       (insert robdd_zero (insert robdd_one bs2));\n              \\<And>b.\n                 b = robdd_zero \\<or>\n                 b = robdd_one \\<or> b \\<in> bs2 \\<Longrightarrow>\n                 robdd_invar b\\<rbrakk>\n             \\<Longrightarrow> \\<exists>bs'.\n                                  subrobdds b' \\<subseteq> bs' \\<and>\n                                  bs \\<subseteq> bs' \\<and>\n                                  robdd_invar_ext bs' n b' \\<and>\n                                  apply_map_invar (\\<and>) bs' bs1\n                                   (insert robdd_zero\n                                     (insert robdd_one bs2))\n                                   apply_map' \\<and>\n                                  rev_map_invar bs' rev_map' \\<and>\n                                  (\\<forall>a.\nrobdd_\\<alpha> b' a = robdd_\\<alpha> b a);\n     robdd_apply apply_map rev_map (\\<and>) b robdd_one \\<equiv>\n     res\\<rbrakk>\n    \\<Longrightarrow> \\<exists>bs'.\n                         subrobdds b' \\<subseteq> bs' \\<and>\n                         bs \\<subseteq> bs' \\<and>\n                         robdd_invar_ext bs' n b' \\<and>\n                         apply_map_invar (\\<and>) bs' bs1\n                          (insert robdd_zero (insert robdd_one bs2))\n                          apply_map' \\<and>\n                         rev_map_invar bs' rev_map' \\<and>\n                         (\\<forall>a.\n                             robdd_\\<alpha> b' a = robdd_\\<alpha> b a)", "by (metis bs2_OK(1) bs2'_invar robdd_invar_simps_leafs)"], ["proof (state)\nthis:\n  \\<exists>bs'.\n     subrobdds b' \\<union> bs \\<subseteq> bs' \\<and>\n     robdd_invar_ext bs' n b' \\<and>\n     apply_map_invar (\\<and>) bs' bs1\n      (insert robdd_zero (insert robdd_one bs2)) apply_map' \\<and>\n     rev_map_invar bs' rev_map' \\<and>\n     (\\<forall>a. robdd_\\<alpha> b' a = robdd_\\<alpha> b a)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma robdd_copy_correct :\n  fixes b rev_map apply_map bs\n  defines \"res \\<equiv> robdd_copy (c_empty ()) rev_map b\"\n  defines \"b' \\<equiv> fst res\"\n  defines \"rev_map' \\<equiv> snd (snd res)\"\n  assumes invar_rev_map: \"rev_map_invar bs rev_map\"\n      and b_invar: \"robdd_invar_ext {b} n b\"      \n  shows \"\\<exists>bs'. \n         subrobdds b' \\<union> bs \\<subseteq> bs' \\<and> \n         robdd_invar_ext bs' n b' \\<and>\n         rev_map_invar bs' rev_map' \\<and>\n         (\\<forall>a. robdd_\\<alpha> b' a \\<longleftrightarrow> (robdd_\\<alpha> b a))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>bs'.\n       subrobdds b' \\<union> bs \\<subseteq> bs' \\<and>\n       robdd_invar_ext bs' n b' \\<and>\n       rev_map_invar bs' rev_map' \\<and>\n       (\\<forall>a. robdd_\\<alpha> b' a = robdd_\\<alpha> b a)", "using res_def[symmetric]"], ["proof (prove)\nusing this:\n  robdd_copy (c_empty ()) rev_map b \\<equiv> res\n\ngoal (1 subgoal):\n 1. \\<exists>bs'.\n       subrobdds b' \\<union> bs \\<subseteq> bs' \\<and>\n       robdd_invar_ext bs' n b' \\<and>\n       rev_map_invar bs' rev_map' \\<and>\n       (\\<forall>a. robdd_\\<alpha> b' a = robdd_\\<alpha> b a)", "using robdd_copy_correct_full [OF invar_rev_map _ b_invar, of \"{}\" \"c_empty ()\"]"], ["proof (prove)\nusing this:\n  robdd_copy (c_empty ()) rev_map b \\<equiv> res\n  \\<lbrakk>apply_map_invar (\\<and>) bs {b} {} (c_empty ());\n   \\<And>ba. ba \\<in> {b} \\<Longrightarrow> robdd_invar ba;\n   \\<And>b. b \\<in> {} \\<Longrightarrow> robdd_invar b;\n   robdd_invar_ids {}\\<rbrakk>\n  \\<Longrightarrow> \\<exists>bs'.\n                       subrobdds\n                        (fst (robdd_copy (c_empty ()) rev_map b)) \\<union>\n                       bs\n                       \\<subseteq> bs' \\<and>\n                       robdd_invar_ext bs' n\n                        (fst (robdd_copy (c_empty ()) rev_map b)) \\<and>\n                       apply_map_invar (\\<and>) bs' {b}\n                        {robdd_zero, robdd_one}\n                        (fst (snd (robdd_copy (c_empty ()) rev_map\n                                    b))) \\<and>\n                       rev_map_invar bs'\n                        (snd (snd (robdd_copy (c_empty ()) rev_map\n                                    b))) \\<and>\n                       (\\<forall>a.\n                           robdd_\\<alpha>\n                            (fst (robdd_copy (c_empty ()) rev_map b)) a =\n                           robdd_\\<alpha> b a)\n\ngoal (1 subgoal):\n 1. \\<exists>bs'.\n       subrobdds b' \\<union> bs \\<subseteq> bs' \\<and>\n       robdd_invar_ext bs' n b' \\<and>\n       rev_map_invar bs' rev_map' \\<and>\n       (\\<forall>a. robdd_\\<alpha> b' a = robdd_\\<alpha> b a)", "apply (simp add: apply_map_invar_def c.empty_correct c.lookup_correct robdd_invar_ids_def\n                       b'_def[symmetric] rev_map'_def[symmetric])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>robdd_copy (c_empty ()) rev_map b \\<equiv> res;\n     robdd_invar b \\<Longrightarrow>\n     \\<exists>bs'.\n        subrobdds b' \\<subseteq> bs' \\<and>\n        bs \\<subseteq> bs' \\<and>\n        robdd_invar_ext bs' n b' \\<and>\n        c_invar (fst (snd res)) \\<and>\n        (\\<forall>i1 i2 ba.\n            c_lookup (i1, i2) (fst (snd res)) = Some ba \\<longrightarrow>\n            (\\<exists>b1.\n                robdd_id_map {b} i1 = Some b1 \\<and>\n                (\\<exists>b2.\n                    robdd_id_map {robdd_zero, robdd_one} i2 = Some b2 \\<and>\n                    robdd_invar_ext bs' (robdd_get_min_var b1 b2) ba \\<and>\n                    (\\<forall>a.\n                        robdd_\\<alpha> ba a =\n                        (robdd_\\<alpha> b1 a \\<and>\n                         robdd_\\<alpha> b2 a))))) \\<and>\n        rev_map_invar bs' rev_map' \\<and>\n        (\\<forall>a. robdd_\\<alpha> b' a = robdd_\\<alpha> b a)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>bs'.\n                         subrobdds b' \\<subseteq> bs' \\<and>\n                         bs \\<subseteq> bs' \\<and>\n                         robdd_invar_ext bs' n b' \\<and>\n                         rev_map_invar bs' rev_map' \\<and>\n                         (\\<forall>a.\n                             robdd_\\<alpha> b' a = robdd_\\<alpha> b a)", "apply (metis b_invar robdd_invar_impl)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma robdd_copy_alt_def :\n    \"robdd_copy apply_map rev_map b = \n      (case (robdd_to_bool b) of \n         Some f \\<Rightarrow> (robdd_leaf f, apply_map, rev_map)\n       | None \\<Rightarrow> (case c_lookup (robdd_get_id b, 1) apply_map of\n            Some b3 \\<Rightarrow> (b3, apply_map, rev_map)\n          | None \\<Rightarrow> (let (l1, r1, var) = robdd_neg_next b in \n                     let (l, apply_map, rev_map) = robdd_copy apply_map rev_map l1 in\n                     let (r, apply_map, rev_map) = robdd_copy apply_map rev_map r1 in\n                     let (b3, rev_map) = robdd_construct rev_map l var r in\n                     let apply_map = c_update (robdd_get_id b, 1) b3 apply_map in\n                     (b3, apply_map, rev_map))))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. robdd_copy apply_map rev_map b =\n    (case robdd_to_bool b of\n     None \\<Rightarrow>\n       case c_lookup (robdd_get_id b, 1) apply_map of\n       None \\<Rightarrow>\n         let (l1, r1, var) = robdd_neg_next b;\n             (l, apply_map, rev_map) = robdd_copy apply_map rev_map l1;\n             (r, apply_map, rev_map) = robdd_copy apply_map rev_map r1;\n             (b3, rev_map) = robdd_construct rev_map l var r;\n             apply_map = c_update (robdd_get_id b, 1) b3 apply_map\n         in (b3, apply_map, rev_map)\n       | Some b3 \\<Rightarrow> (b3, apply_map, rev_map)\n     | Some f \\<Rightarrow> (robdd_leaf f, apply_map, rev_map))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. robdd_copy apply_map rev_map b =\n    (case robdd_to_bool b of\n     None \\<Rightarrow>\n       case c_lookup (robdd_get_id b, 1) apply_map of\n       None \\<Rightarrow>\n         let (l1, r1, var) = robdd_neg_next b;\n             (l, apply_map, rev_map) = robdd_copy apply_map rev_map l1;\n             (r, apply_map, rev_map) = robdd_copy apply_map rev_map r1;\n             (b3, rev_map) = robdd_construct rev_map l var r;\n             apply_map = c_update (robdd_get_id b, 1) b3 apply_map\n         in (b3, apply_map, rev_map)\n       | Some b3 \\<Rightarrow> (b3, apply_map, rev_map)\n     | Some f \\<Rightarrow> (robdd_leaf f, apply_map, rev_map))", "have bope_neg_intro: \n        \"(bool_op_extend (\\<lambda>b1 b2. b1 \\<and> b2) (robdd_to_bool b) (Some True)) =\n         (robdd_to_bool b)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. bool_op_extend (\\<and>) (robdd_to_bool b) (Some True) = robdd_to_bool b", "apply (cases \"robdd_to_bool b\" rule: bool_opt_exhaust)"], ["proof (prove)\ngoal (3 subgoals):\n 1. robdd_to_bool b = None \\<Longrightarrow>\n    bool_op_extend (\\<and>) (robdd_to_bool b) (Some True) = robdd_to_bool b\n 2. robdd_to_bool b = Some True \\<Longrightarrow>\n    bool_op_extend (\\<and>) (robdd_to_bool b) (Some True) = robdd_to_bool b\n 3. robdd_to_bool b = Some False \\<Longrightarrow>\n    bool_op_extend (\\<and>) (robdd_to_bool b) (Some True) = robdd_to_bool b", "apply (simp_all)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  bool_op_extend (\\<and>) (robdd_to_bool b) (Some True) = robdd_to_bool b\n\ngoal (1 subgoal):\n 1. robdd_copy apply_map rev_map b =\n    (case robdd_to_bool b of\n     None \\<Rightarrow>\n       case c_lookup (robdd_get_id b, 1) apply_map of\n       None \\<Rightarrow>\n         let (l1, r1, var) = robdd_neg_next b;\n             (l, apply_map, rev_map) = robdd_copy apply_map rev_map l1;\n             (r, apply_map, rev_map) = robdd_copy apply_map rev_map r1;\n             (b3, rev_map) = robdd_construct rev_map l var r;\n             apply_map = c_update (robdd_get_id b, 1) b3 apply_map\n         in (b3, apply_map, rev_map)\n       | Some b3 \\<Rightarrow> (b3, apply_map, rev_map)\n     | Some f \\<Rightarrow> (robdd_leaf f, apply_map, rev_map))", "obtain b1_l b1_r v'' b2_l b2_r where \n       next_eq: \"robdd_apply_next b robdd_one = (b1_l, b1_r, v'', b2_l, b2_r)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>b1_l b1_r v'' b2_l b2_r.\n        robdd_apply_next b robdd_one =\n        (b1_l, b1_r, v'', b2_l, b2_r) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (metis prod.exhaust)"], ["proof (state)\nthis:\n  robdd_apply_next b robdd_one = (b1_l, b1_r, v'', b2_l, b2_r)\n\ngoal (1 subgoal):\n 1. robdd_copy apply_map rev_map b =\n    (case robdd_to_bool b of\n     None \\<Rightarrow>\n       case c_lookup (robdd_get_id b, 1) apply_map of\n       None \\<Rightarrow>\n         let (l1, r1, var) = robdd_neg_next b;\n             (l, apply_map, rev_map) = robdd_copy apply_map rev_map l1;\n             (r, apply_map, rev_map) = robdd_copy apply_map rev_map r1;\n             (b3, rev_map) = robdd_construct rev_map l var r;\n             apply_map = c_update (robdd_get_id b, 1) b3 apply_map\n         in (b3, apply_map, rev_map)\n       | Some b3 \\<Rightarrow> (b3, apply_map, rev_map)\n     | Some f \\<Rightarrow> (robdd_leaf f, apply_map, rev_map))", "from next_eq"], ["proof (chain)\npicking this:\n  robdd_apply_next b robdd_one = (b1_l, b1_r, v'', b2_l, b2_r)", "have b2_eq[simp]: \"b2_l = robdd_one\" \"b2_r = robdd_one\""], ["proof (prove)\nusing this:\n  robdd_apply_next b robdd_one = (b1_l, b1_r, v'', b2_l, b2_r)\n\ngoal (1 subgoal):\n 1. b2_l = robdd_one &&& b2_r = robdd_one", "by (case_tac[!] b) auto"], ["proof (state)\nthis:\n  b2_l = robdd_one\n  b2_r = robdd_one\n\ngoal (1 subgoal):\n 1. robdd_copy apply_map rev_map b =\n    (case robdd_to_bool b of\n     None \\<Rightarrow>\n       case c_lookup (robdd_get_id b, 1) apply_map of\n       None \\<Rightarrow>\n         let (l1, r1, var) = robdd_neg_next b;\n             (l, apply_map, rev_map) = robdd_copy apply_map rev_map l1;\n             (r, apply_map, rev_map) = robdd_copy apply_map rev_map r1;\n             (b3, rev_map) = robdd_construct rev_map l var r;\n             apply_map = c_update (robdd_get_id b, 1) b3 apply_map\n         in (b3, apply_map, rev_map)\n       | Some b3 \\<Rightarrow> (b3, apply_map, rev_map)\n     | Some f \\<Rightarrow> (robdd_leaf f, apply_map, rev_map))", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. robdd_copy apply_map rev_map b =\n    (case robdd_to_bool b of\n     None \\<Rightarrow>\n       case c_lookup (robdd_get_id b, 1) apply_map of\n       None \\<Rightarrow>\n         let (l1, r1, var) = robdd_neg_next b;\n             (l, apply_map, rev_map) = robdd_copy apply_map rev_map l1;\n             (r, apply_map, rev_map) = robdd_copy apply_map rev_map r1;\n             (b3, rev_map) = robdd_construct rev_map l var r;\n             apply_map = c_update (robdd_get_id b, 1) b3 apply_map\n         in (b3, apply_map, rev_map)\n       | Some b3 \\<Rightarrow> (b3, apply_map, rev_map)\n     | Some f \\<Rightarrow> (robdd_leaf f, apply_map, rev_map))", "unfolding robdd_copy_def robdd_apply.simps[of _ _ _ b]"], ["proof (prove)\ngoal (1 subgoal):\n 1. (case bool_op_extend (\\<and>) (robdd_to_bool b)\n           (robdd_to_bool robdd_one) of\n     None \\<Rightarrow>\n       case c_lookup (robdd_get_id b, robdd_get_id robdd_one) apply_map of\n       None \\<Rightarrow>\n         let (l1, r1, var, l2, r2) = robdd_apply_next b robdd_one;\n             (l, apply_map, rev_map) =\n               robdd_apply apply_map rev_map (\\<and>) l1 l2;\n             (r, apply_map, rev_map) =\n               robdd_apply apply_map rev_map (\\<and>) r1 r2;\n             (ba, rev_map) = robdd_construct rev_map l var r;\n             apply_map =\n               c_update (robdd_get_id b, robdd_get_id robdd_one) ba\n                apply_map\n         in (ba, apply_map, rev_map)\n       | Some b3 \\<Rightarrow> (b3, apply_map, rev_map)\n     | Some f \\<Rightarrow> (robdd_leaf f, apply_map, rev_map)) =\n    (case robdd_to_bool b of\n     None \\<Rightarrow>\n       case c_lookup (robdd_get_id b, 1) apply_map of\n       None \\<Rightarrow>\n         let (l1, r1, var) = robdd_neg_next b;\n             (l, apply_map, rev_map) =\n               robdd_apply apply_map rev_map (\\<and>) l1 robdd_one;\n             (r, apply_map, rev_map) =\n               robdd_apply apply_map rev_map (\\<and>) r1 robdd_one;\n             (b3, rev_map) = robdd_construct rev_map l var r;\n             apply_map = c_update (robdd_get_id b, 1) b3 apply_map\n         in (b3, apply_map, rev_map)\n       | Some b3 \\<Rightarrow> (b3, apply_map, rev_map)\n     | Some f \\<Rightarrow> (robdd_leaf f, apply_map, rev_map))", "by (simp split: option.splits add: bope_neg_intro next_eq split_def robdd_neg_next_def)"], ["proof (state)\nthis:\n  robdd_copy apply_map rev_map b =\n  (case robdd_to_bool b of\n   None \\<Rightarrow>\n     case c_lookup (robdd_get_id b, 1) apply_map of\n     None \\<Rightarrow>\n       let (l1, r1, var) = robdd_neg_next b;\n           (l, apply_map, rev_map) = robdd_copy apply_map rev_map l1;\n           (r, apply_map, rev_map) = robdd_copy apply_map rev_map r1;\n           (b3, rev_map) = robdd_construct rev_map l var r;\n           apply_map = c_update (robdd_get_id b, 1) b3 apply_map\n       in (b3, apply_map, rev_map)\n     | Some b3 \\<Rightarrow> (b3, apply_map, rev_map)\n   | Some f \\<Rightarrow> (robdd_leaf f, apply_map, rev_map))\n\ngoal:\nNo subgoals!", "qed"], ["", "definition restrict_map_invar where\n     \"restrict_map_invar f bs res_map \\<longleftrightarrow>\n       c_invar res_map \\<and>\n       (\\<forall>i v b. c_lookup (v, i) res_map = Some b \\<longrightarrow>\n          (\\<exists>b'. robdd_id_map bs i = Some b' \\<and> b \\<in> bs \\<and>            \n                robdd_invar_ext bs (robdd_get_var b') b \\<and> \n                (\\<forall>a. robdd_\\<alpha> b a \\<longleftrightarrow> robdd_\\<alpha> b' (a(v := f)))))\""], ["", "lemma restrict_map_invar_empty : \n    \"restrict_map_invar f bs (c_empty ())\""], ["proof (prove)\ngoal (1 subgoal):\n 1. restrict_map_invar f bs (c_empty ())", "unfolding restrict_map_invar_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. c_invar (c_empty ()) \\<and>\n    (\\<forall>i v b.\n        c_lookup (v, i) (c_empty ()) = Some b \\<longrightarrow>\n        (\\<exists>b'.\n            robdd_id_map bs i = Some b' \\<and>\n            b \\<in> bs \\<and>\n            robdd_invar_ext bs (robdd_get_var b') b \\<and>\n            (\\<forall>a.\n                robdd_\\<alpha> b a = robdd_\\<alpha> b' (a(v := f)))))", "by (simp add: c.empty_correct c.lookup_correct)"], ["", "lemma restrict_map_invar_I :\n    \"\\<lbrakk>c_invar res_map;\n      \\<And>i v b. c_lookup (v, i) res_map = Some b \\<Longrightarrow>\n      (\\<exists>b'. robdd_id_map bs i = Some b' \\<and> b \\<in> bs \\<and>\n                robdd_invar_ext bs (robdd_get_var b') b \\<and> \n                (\\<forall>a. robdd_\\<alpha> b a \\<longleftrightarrow> robdd_\\<alpha> b' (a(v := f))))\\<rbrakk> \\<Longrightarrow>\n      restrict_map_invar f bs res_map\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>c_invar res_map;\n     \\<And>i v b.\n        c_lookup (v, i) res_map = Some b \\<Longrightarrow>\n        \\<exists>b'.\n           robdd_id_map bs i = Some b' \\<and>\n           b \\<in> bs \\<and>\n           robdd_invar_ext bs (robdd_get_var b') b \\<and>\n           (\\<forall>a.\n               robdd_\\<alpha> b a = robdd_\\<alpha> b' (a(v := f)))\\<rbrakk>\n    \\<Longrightarrow> restrict_map_invar f bs res_map", "unfolding restrict_map_invar_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>c_invar res_map;\n     \\<And>i v b.\n        c_lookup (v, i) res_map = Some b \\<Longrightarrow>\n        \\<exists>b'.\n           robdd_id_map bs i = Some b' \\<and>\n           b \\<in> bs \\<and>\n           robdd_invar_ext bs (robdd_get_var b') b \\<and>\n           (\\<forall>a.\n               robdd_\\<alpha> b a = robdd_\\<alpha> b' (a(v := f)))\\<rbrakk>\n    \\<Longrightarrow> c_invar res_map \\<and>\n                      (\\<forall>i v b.\n                          c_lookup (v, i) res_map = Some b \\<longrightarrow>\n                          (\\<exists>b'.\n                              robdd_id_map bs i = Some b' \\<and>\n                              b \\<in> bs \\<and>\n                              robdd_invar_ext bs (robdd_get_var b') b \\<and>\n                              (\\<forall>a.\n                                  robdd_\\<alpha> b a =\n                                  robdd_\\<alpha> b' (a(v := f)))))", "by blast"], ["", "lemma restrict_map_invar_D1 :\n    \"restrict_map_invar f bs res_map \\<Longrightarrow> c_invar res_map\""], ["proof (prove)\ngoal (1 subgoal):\n 1. restrict_map_invar f bs res_map \\<Longrightarrow> c_invar res_map", "unfolding restrict_map_invar_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. c_invar res_map \\<and>\n    (\\<forall>i v b.\n        c_lookup (v, i) res_map = Some b \\<longrightarrow>\n        (\\<exists>b'.\n            robdd_id_map bs i = Some b' \\<and>\n            b \\<in> bs \\<and>\n            robdd_invar_ext bs (robdd_get_var b') b \\<and>\n            (\\<forall>a.\n                robdd_\\<alpha> b a =\n                robdd_\\<alpha> b' (a(v := f))))) \\<Longrightarrow>\n    c_invar res_map", "by blast"], ["", "lemma restrict_map_invar_D2 :\n    \"\\<lbrakk>restrict_map_invar f bs res_map;\n      c_lookup (v, i) res_map = Some b\\<rbrakk> \\<Longrightarrow>\n      (\\<exists>b'. robdd_id_map bs i = Some b' \\<and> b \\<in> bs \\<and>\n                robdd_invar_ext bs (robdd_get_var b') b \\<and> \n                (\\<forall>a. robdd_\\<alpha> b a \\<longleftrightarrow> robdd_\\<alpha> b' (a(v := f))))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>restrict_map_invar f bs res_map;\n     c_lookup (v, i) res_map = Some b\\<rbrakk>\n    \\<Longrightarrow> \\<exists>b'.\n                         robdd_id_map bs i = Some b' \\<and>\n                         b \\<in> bs \\<and>\n                         robdd_invar_ext bs (robdd_get_var b') b \\<and>\n                         (\\<forall>a.\n                             robdd_\\<alpha> b a =\n                             robdd_\\<alpha> b' (a(v := f)))", "unfolding restrict_map_invar_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>c_invar res_map \\<and>\n             (\\<forall>i v b.\n                 c_lookup (v, i) res_map = Some b \\<longrightarrow>\n                 (\\<exists>b'.\n                     robdd_id_map bs i = Some b' \\<and>\n                     b \\<in> bs \\<and>\n                     robdd_invar_ext bs (robdd_get_var b') b \\<and>\n                     (\\<forall>a.\n                         robdd_\\<alpha> b a =\n                         robdd_\\<alpha> b' (a(v := f)))));\n     c_lookup (v, i) res_map = Some b\\<rbrakk>\n    \\<Longrightarrow> \\<exists>b'.\n                         robdd_id_map bs i = Some b' \\<and>\n                         b \\<in> bs \\<and>\n                         robdd_invar_ext bs (robdd_get_var b') b \\<and>\n                         (\\<forall>a.\n                             robdd_\\<alpha> b a =\n                             robdd_\\<alpha> b' (a(v := f)))", "by blast"], ["", "fun robdd_restrict where\n    \"robdd_restrict res_map rev_map f rv b =\n     (case b of (robdd_leaf f') \\<Rightarrow> (robdd_leaf f', res_map, rev_map)\n             | (robdd_var i l v r) \\<Rightarrow> \n        (if (rv < v) then (b, res_map, rev_map) else (\n         if (rv = v) then (if f then l else r, res_map, rev_map) else (\n         (case c_lookup (rv, i) res_map of\n             Some b3 \\<Rightarrow> (b3, res_map, rev_map)\n           | None \\<Rightarrow> (let (l', res_map, rev_map) = robdd_restrict res_map rev_map f rv l in\n                      let (r', res_map, rev_map) = robdd_restrict res_map rev_map f rv r in\n                      let (b3, rev_map) = robdd_construct rev_map l' v r' in\n                      let res_map = c_update (rv, i) b3 res_map in\n                      (b3, res_map, rev_map))                    \n        )))))\""], ["", "declare robdd_restrict.simps [simp del]"], ["", "lemma robdd_restrict_correct_full :\n  fixes b f rv rev_map res_map bs\n  defines \"res \\<equiv> robdd_restrict res_map rev_map f rv b\"\n  defines \"b' \\<equiv> fst res\"\n  defines \"res_map' \\<equiv> fst (snd res)\"\n  defines \"rev_map' \\<equiv> snd (snd res)\"\n  assumes invar_rev_map: \"rev_map_invar bs rev_map\"\n      and invar_res_map: \"restrict_map_invar f bs res_map\"\n      and b_invar: \"robdd_invar_ext bs n b\"\n      and b_sub: \"subrobdds b \\<subseteq> bs\"      \n  shows \"\\<exists>bs'. insert b' bs \\<subseteq> bs' \\<and> \n         robdd_invar_ext bs' n b' \\<and>\n         restrict_map_invar f bs' res_map' \\<and>\n         rev_map_invar bs' rev_map' \\<and>\n         (\\<forall>a. robdd_\\<alpha> b' a \\<longleftrightarrow> (robdd_\\<alpha> b (a(rv := f))))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>bs'.\n       insert b' bs \\<subseteq> bs' \\<and>\n       robdd_invar_ext bs' n b' \\<and>\n       restrict_map_invar f bs' res_map' \\<and>\n       rev_map_invar bs' rev_map' \\<and>\n       (\\<forall>a. robdd_\\<alpha> b' a = robdd_\\<alpha> b (a(rv := f)))", "using invar_rev_map invar_res_map b_invar b_sub"], ["proof (prove)\nusing this:\n  rev_map_invar bs rev_map\n  restrict_map_invar f bs res_map\n  robdd_invar_ext bs n b\n  subrobdds b \\<subseteq> bs\n\ngoal (1 subgoal):\n 1. \\<exists>bs'.\n       insert b' bs \\<subseteq> bs' \\<and>\n       robdd_invar_ext bs' n b' \\<and>\n       restrict_map_invar f bs' res_map' \\<and>\n       rev_map_invar bs' rev_map' \\<and>\n       (\\<forall>a. robdd_\\<alpha> b' a = robdd_\\<alpha> b (a(rv := f)))", "unfolding b'_def res_map'_def rev_map'_def res_def"], ["proof (prove)\nusing this:\n  rev_map_invar bs rev_map\n  restrict_map_invar f bs res_map\n  robdd_invar_ext bs n b\n  subrobdds b \\<subseteq> bs\n\ngoal (1 subgoal):\n 1. \\<exists>bs'.\n       insert (fst (robdd_restrict res_map rev_map f rv b)) bs\n       \\<subseteq> bs' \\<and>\n       robdd_invar_ext bs' n\n        (fst (robdd_restrict res_map rev_map f rv b)) \\<and>\n       restrict_map_invar f bs'\n        (fst (snd (robdd_restrict res_map rev_map f rv b))) \\<and>\n       rev_map_invar bs'\n        (snd (snd (robdd_restrict res_map rev_map f rv b))) \\<and>\n       (\\<forall>a.\n           robdd_\\<alpha> (fst (robdd_restrict res_map rev_map f rv b)) a =\n           robdd_\\<alpha> b (a(rv := f)))", "proof (induct b arbitrary: bs n res_map rev_map)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x bs n res_map rev_map.\n       \\<lbrakk>rev_map_invar bs rev_map; restrict_map_invar f bs res_map;\n        robdd_invar_ext bs n (robdd_leaf x);\n        subrobdds (robdd_leaf x) \\<subseteq> bs\\<rbrakk>\n       \\<Longrightarrow> \\<exists>bs'.\n                            insert\n                             (fst (robdd_restrict res_map rev_map f rv\n                                    (robdd_leaf x)))\n                             bs\n                            \\<subseteq> bs' \\<and>\n                            robdd_invar_ext bs' n\n                             (fst (robdd_restrict res_map rev_map f rv\n                                    (robdd_leaf x))) \\<and>\n                            restrict_map_invar f bs'\n                             (fst (snd (robdd_restrict res_map rev_map f rv\n   (robdd_leaf x)))) \\<and>\n                            rev_map_invar bs'\n                             (snd (snd (robdd_restrict res_map rev_map f rv\n   (robdd_leaf x)))) \\<and>\n                            (\\<forall>a.\n                                robdd_\\<alpha>\n                                 (fst (robdd_restrict res_map rev_map f rv\n  (robdd_leaf x)))\n                                 a =\n                                robdd_\\<alpha> (robdd_leaf x) (a(rv := f)))\n 2. \\<And>x1a b1 x3 b2 bs n res_map rev_map.\n       \\<lbrakk>\\<And>bs n res_map rev_map.\n                   \\<lbrakk>rev_map_invar bs rev_map;\n                    restrict_map_invar f bs res_map;\n                    robdd_invar_ext bs n b1;\n                    subrobdds b1 \\<subseteq> bs\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>bs'.\n  insert (fst (robdd_restrict res_map rev_map f rv b1)) bs\n  \\<subseteq> bs' \\<and>\n  robdd_invar_ext bs' n\n   (fst (robdd_restrict res_map rev_map f rv b1)) \\<and>\n  restrict_map_invar f bs'\n   (fst (snd (robdd_restrict res_map rev_map f rv b1))) \\<and>\n  rev_map_invar bs'\n   (snd (snd (robdd_restrict res_map rev_map f rv b1))) \\<and>\n  (\\<forall>a.\n      robdd_\\<alpha> (fst (robdd_restrict res_map rev_map f rv b1)) a =\n      robdd_\\<alpha> b1 (a(rv := f)));\n        \\<And>bs n res_map rev_map.\n           \\<lbrakk>rev_map_invar bs rev_map;\n            restrict_map_invar f bs res_map; robdd_invar_ext bs n b2;\n            subrobdds b2 \\<subseteq> bs\\<rbrakk>\n           \\<Longrightarrow> \\<exists>bs'.\n                                insert\n                                 (fst (robdd_restrict res_map rev_map f rv\n  b2))\n                                 bs\n                                \\<subseteq> bs' \\<and>\n                                robdd_invar_ext bs' n\n                                 (fst (robdd_restrict res_map rev_map f rv\n  b2)) \\<and>\n                                restrict_map_invar f bs'\n                                 (fst (snd\n  (robdd_restrict res_map rev_map f rv b2))) \\<and>\n                                rev_map_invar bs'\n                                 (snd (snd\n  (robdd_restrict res_map rev_map f rv b2))) \\<and>\n                                (\\<forall>a.\n                                    robdd_\\<alpha>\n                                     (fst\n (robdd_restrict res_map rev_map f rv b2))\n                                     a =\n                                    robdd_\\<alpha> b2 (a(rv := f)));\n        rev_map_invar bs rev_map; restrict_map_invar f bs res_map;\n        robdd_invar_ext bs n (robdd_var x1a b1 x3 b2);\n        subrobdds (robdd_var x1a b1 x3 b2) \\<subseteq> bs\\<rbrakk>\n       \\<Longrightarrow> \\<exists>bs'.\n                            insert\n                             (fst (robdd_restrict res_map rev_map f rv\n                                    (robdd_var x1a b1 x3 b2)))\n                             bs\n                            \\<subseteq> bs' \\<and>\n                            robdd_invar_ext bs' n\n                             (fst (robdd_restrict res_map rev_map f rv\n                                    (robdd_var x1a b1 x3 b2))) \\<and>\n                            restrict_map_invar f bs'\n                             (fst (snd (robdd_restrict res_map rev_map f rv\n   (robdd_var x1a b1 x3 b2)))) \\<and>\n                            rev_map_invar bs'\n                             (snd (snd (robdd_restrict res_map rev_map f rv\n   (robdd_var x1a b1 x3 b2)))) \\<and>\n                            (\\<forall>a.\n                                robdd_\\<alpha>\n                                 (fst (robdd_restrict res_map rev_map f rv\n  (robdd_var x1a b1 x3 b2)))\n                                 a =\n                                robdd_\\<alpha> (robdd_var x1a b1 x3 b2)\n                                 (a(rv := f)))", "case (robdd_leaf f')"], ["proof (state)\nthis:\n  rev_map_invar bs rev_map\n  restrict_map_invar f bs res_map\n  robdd_invar_ext bs n (robdd_leaf f')\n  subrobdds (robdd_leaf f') \\<subseteq> bs\n\ngoal (2 subgoals):\n 1. \\<And>x bs n res_map rev_map.\n       \\<lbrakk>rev_map_invar bs rev_map; restrict_map_invar f bs res_map;\n        robdd_invar_ext bs n (robdd_leaf x);\n        subrobdds (robdd_leaf x) \\<subseteq> bs\\<rbrakk>\n       \\<Longrightarrow> \\<exists>bs'.\n                            insert\n                             (fst (robdd_restrict res_map rev_map f rv\n                                    (robdd_leaf x)))\n                             bs\n                            \\<subseteq> bs' \\<and>\n                            robdd_invar_ext bs' n\n                             (fst (robdd_restrict res_map rev_map f rv\n                                    (robdd_leaf x))) \\<and>\n                            restrict_map_invar f bs'\n                             (fst (snd (robdd_restrict res_map rev_map f rv\n   (robdd_leaf x)))) \\<and>\n                            rev_map_invar bs'\n                             (snd (snd (robdd_restrict res_map rev_map f rv\n   (robdd_leaf x)))) \\<and>\n                            (\\<forall>a.\n                                robdd_\\<alpha>\n                                 (fst (robdd_restrict res_map rev_map f rv\n  (robdd_leaf x)))\n                                 a =\n                                robdd_\\<alpha> (robdd_leaf x) (a(rv := f)))\n 2. \\<And>x1a b1 x3 b2 bs n res_map rev_map.\n       \\<lbrakk>\\<And>bs n res_map rev_map.\n                   \\<lbrakk>rev_map_invar bs rev_map;\n                    restrict_map_invar f bs res_map;\n                    robdd_invar_ext bs n b1;\n                    subrobdds b1 \\<subseteq> bs\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>bs'.\n  insert (fst (robdd_restrict res_map rev_map f rv b1)) bs\n  \\<subseteq> bs' \\<and>\n  robdd_invar_ext bs' n\n   (fst (robdd_restrict res_map rev_map f rv b1)) \\<and>\n  restrict_map_invar f bs'\n   (fst (snd (robdd_restrict res_map rev_map f rv b1))) \\<and>\n  rev_map_invar bs'\n   (snd (snd (robdd_restrict res_map rev_map f rv b1))) \\<and>\n  (\\<forall>a.\n      robdd_\\<alpha> (fst (robdd_restrict res_map rev_map f rv b1)) a =\n      robdd_\\<alpha> b1 (a(rv := f)));\n        \\<And>bs n res_map rev_map.\n           \\<lbrakk>rev_map_invar bs rev_map;\n            restrict_map_invar f bs res_map; robdd_invar_ext bs n b2;\n            subrobdds b2 \\<subseteq> bs\\<rbrakk>\n           \\<Longrightarrow> \\<exists>bs'.\n                                insert\n                                 (fst (robdd_restrict res_map rev_map f rv\n  b2))\n                                 bs\n                                \\<subseteq> bs' \\<and>\n                                robdd_invar_ext bs' n\n                                 (fst (robdd_restrict res_map rev_map f rv\n  b2)) \\<and>\n                                restrict_map_invar f bs'\n                                 (fst (snd\n  (robdd_restrict res_map rev_map f rv b2))) \\<and>\n                                rev_map_invar bs'\n                                 (snd (snd\n  (robdd_restrict res_map rev_map f rv b2))) \\<and>\n                                (\\<forall>a.\n                                    robdd_\\<alpha>\n                                     (fst\n (robdd_restrict res_map rev_map f rv b2))\n                                     a =\n                                    robdd_\\<alpha> b2 (a(rv := f)));\n        rev_map_invar bs rev_map; restrict_map_invar f bs res_map;\n        robdd_invar_ext bs n (robdd_var x1a b1 x3 b2);\n        subrobdds (robdd_var x1a b1 x3 b2) \\<subseteq> bs\\<rbrakk>\n       \\<Longrightarrow> \\<exists>bs'.\n                            insert\n                             (fst (robdd_restrict res_map rev_map f rv\n                                    (robdd_var x1a b1 x3 b2)))\n                             bs\n                            \\<subseteq> bs' \\<and>\n                            robdd_invar_ext bs' n\n                             (fst (robdd_restrict res_map rev_map f rv\n                                    (robdd_var x1a b1 x3 b2))) \\<and>\n                            restrict_map_invar f bs'\n                             (fst (snd (robdd_restrict res_map rev_map f rv\n   (robdd_var x1a b1 x3 b2)))) \\<and>\n                            rev_map_invar bs'\n                             (snd (snd (robdd_restrict res_map rev_map f rv\n   (robdd_var x1a b1 x3 b2)))) \\<and>\n                            (\\<forall>a.\n                                robdd_\\<alpha>\n                                 (fst (robdd_restrict res_map rev_map f rv\n  (robdd_var x1a b1 x3 b2)))\n                                 a =\n                                robdd_\\<alpha> (robdd_var x1a b1 x3 b2)\n                                 (a(rv := f)))", "thus ?case"], ["proof (prove)\nusing this:\n  rev_map_invar bs rev_map\n  restrict_map_invar f bs res_map\n  robdd_invar_ext bs n (robdd_leaf f')\n  subrobdds (robdd_leaf f') \\<subseteq> bs\n\ngoal (1 subgoal):\n 1. \\<exists>bs'.\n       insert (fst (robdd_restrict res_map rev_map f rv (robdd_leaf f'))) bs\n       \\<subseteq> bs' \\<and>\n       robdd_invar_ext bs' n\n        (fst (robdd_restrict res_map rev_map f rv (robdd_leaf f'))) \\<and>\n       restrict_map_invar f bs'\n        (fst (snd (robdd_restrict res_map rev_map f rv\n                    (robdd_leaf f')))) \\<and>\n       rev_map_invar bs'\n        (snd (snd (robdd_restrict res_map rev_map f rv\n                    (robdd_leaf f')))) \\<and>\n       (\\<forall>a.\n           robdd_\\<alpha>\n            (fst (robdd_restrict res_map rev_map f rv (robdd_leaf f'))) a =\n           robdd_\\<alpha> (robdd_leaf f') (a(rv := f)))", "by (rule_tac exI [where x = bs]) (simp add: robdd_restrict.simps)"], ["proof (state)\nthis:\n  \\<exists>bs'.\n     insert (fst (robdd_restrict res_map rev_map f rv (robdd_leaf f'))) bs\n     \\<subseteq> bs' \\<and>\n     robdd_invar_ext bs' n\n      (fst (robdd_restrict res_map rev_map f rv (robdd_leaf f'))) \\<and>\n     restrict_map_invar f bs'\n      (fst (snd (robdd_restrict res_map rev_map f rv\n                  (robdd_leaf f')))) \\<and>\n     rev_map_invar bs'\n      (snd (snd (robdd_restrict res_map rev_map f rv\n                  (robdd_leaf f')))) \\<and>\n     (\\<forall>a.\n         robdd_\\<alpha>\n          (fst (robdd_restrict res_map rev_map f rv (robdd_leaf f'))) a =\n         robdd_\\<alpha> (robdd_leaf f') (a(rv := f)))\n\ngoal (1 subgoal):\n 1. \\<And>x1a b1 x3 b2 bs n res_map rev_map.\n       \\<lbrakk>\\<And>bs n res_map rev_map.\n                   \\<lbrakk>rev_map_invar bs rev_map;\n                    restrict_map_invar f bs res_map;\n                    robdd_invar_ext bs n b1;\n                    subrobdds b1 \\<subseteq> bs\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>bs'.\n  insert (fst (robdd_restrict res_map rev_map f rv b1)) bs\n  \\<subseteq> bs' \\<and>\n  robdd_invar_ext bs' n\n   (fst (robdd_restrict res_map rev_map f rv b1)) \\<and>\n  restrict_map_invar f bs'\n   (fst (snd (robdd_restrict res_map rev_map f rv b1))) \\<and>\n  rev_map_invar bs'\n   (snd (snd (robdd_restrict res_map rev_map f rv b1))) \\<and>\n  (\\<forall>a.\n      robdd_\\<alpha> (fst (robdd_restrict res_map rev_map f rv b1)) a =\n      robdd_\\<alpha> b1 (a(rv := f)));\n        \\<And>bs n res_map rev_map.\n           \\<lbrakk>rev_map_invar bs rev_map;\n            restrict_map_invar f bs res_map; robdd_invar_ext bs n b2;\n            subrobdds b2 \\<subseteq> bs\\<rbrakk>\n           \\<Longrightarrow> \\<exists>bs'.\n                                insert\n                                 (fst (robdd_restrict res_map rev_map f rv\n  b2))\n                                 bs\n                                \\<subseteq> bs' \\<and>\n                                robdd_invar_ext bs' n\n                                 (fst (robdd_restrict res_map rev_map f rv\n  b2)) \\<and>\n                                restrict_map_invar f bs'\n                                 (fst (snd\n  (robdd_restrict res_map rev_map f rv b2))) \\<and>\n                                rev_map_invar bs'\n                                 (snd (snd\n  (robdd_restrict res_map rev_map f rv b2))) \\<and>\n                                (\\<forall>a.\n                                    robdd_\\<alpha>\n                                     (fst\n (robdd_restrict res_map rev_map f rv b2))\n                                     a =\n                                    robdd_\\<alpha> b2 (a(rv := f)));\n        rev_map_invar bs rev_map; restrict_map_invar f bs res_map;\n        robdd_invar_ext bs n (robdd_var x1a b1 x3 b2);\n        subrobdds (robdd_var x1a b1 x3 b2) \\<subseteq> bs\\<rbrakk>\n       \\<Longrightarrow> \\<exists>bs'.\n                            insert\n                             (fst (robdd_restrict res_map rev_map f rv\n                                    (robdd_var x1a b1 x3 b2)))\n                             bs\n                            \\<subseteq> bs' \\<and>\n                            robdd_invar_ext bs' n\n                             (fst (robdd_restrict res_map rev_map f rv\n                                    (robdd_var x1a b1 x3 b2))) \\<and>\n                            restrict_map_invar f bs'\n                             (fst (snd (robdd_restrict res_map rev_map f rv\n   (robdd_var x1a b1 x3 b2)))) \\<and>\n                            rev_map_invar bs'\n                             (snd (snd (robdd_restrict res_map rev_map f rv\n   (robdd_var x1a b1 x3 b2)))) \\<and>\n                            (\\<forall>a.\n                                robdd_\\<alpha>\n                                 (fst (robdd_restrict res_map rev_map f rv\n  (robdd_var x1a b1 x3 b2)))\n                                 a =\n                                robdd_\\<alpha> (robdd_var x1a b1 x3 b2)\n                                 (a(rv := f)))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x1a b1 x3 b2 bs n res_map rev_map.\n       \\<lbrakk>\\<And>bs n res_map rev_map.\n                   \\<lbrakk>rev_map_invar bs rev_map;\n                    restrict_map_invar f bs res_map;\n                    robdd_invar_ext bs n b1;\n                    subrobdds b1 \\<subseteq> bs\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>bs'.\n  insert (fst (robdd_restrict res_map rev_map f rv b1)) bs\n  \\<subseteq> bs' \\<and>\n  robdd_invar_ext bs' n\n   (fst (robdd_restrict res_map rev_map f rv b1)) \\<and>\n  restrict_map_invar f bs'\n   (fst (snd (robdd_restrict res_map rev_map f rv b1))) \\<and>\n  rev_map_invar bs'\n   (snd (snd (robdd_restrict res_map rev_map f rv b1))) \\<and>\n  (\\<forall>a.\n      robdd_\\<alpha> (fst (robdd_restrict res_map rev_map f rv b1)) a =\n      robdd_\\<alpha> b1 (a(rv := f)));\n        \\<And>bs n res_map rev_map.\n           \\<lbrakk>rev_map_invar bs rev_map;\n            restrict_map_invar f bs res_map; robdd_invar_ext bs n b2;\n            subrobdds b2 \\<subseteq> bs\\<rbrakk>\n           \\<Longrightarrow> \\<exists>bs'.\n                                insert\n                                 (fst (robdd_restrict res_map rev_map f rv\n  b2))\n                                 bs\n                                \\<subseteq> bs' \\<and>\n                                robdd_invar_ext bs' n\n                                 (fst (robdd_restrict res_map rev_map f rv\n  b2)) \\<and>\n                                restrict_map_invar f bs'\n                                 (fst (snd\n  (robdd_restrict res_map rev_map f rv b2))) \\<and>\n                                rev_map_invar bs'\n                                 (snd (snd\n  (robdd_restrict res_map rev_map f rv b2))) \\<and>\n                                (\\<forall>a.\n                                    robdd_\\<alpha>\n                                     (fst\n (robdd_restrict res_map rev_map f rv b2))\n                                     a =\n                                    robdd_\\<alpha> b2 (a(rv := f)));\n        rev_map_invar bs rev_map; restrict_map_invar f bs res_map;\n        robdd_invar_ext bs n (robdd_var x1a b1 x3 b2);\n        subrobdds (robdd_var x1a b1 x3 b2) \\<subseteq> bs\\<rbrakk>\n       \\<Longrightarrow> \\<exists>bs'.\n                            insert\n                             (fst (robdd_restrict res_map rev_map f rv\n                                    (robdd_var x1a b1 x3 b2)))\n                             bs\n                            \\<subseteq> bs' \\<and>\n                            robdd_invar_ext bs' n\n                             (fst (robdd_restrict res_map rev_map f rv\n                                    (robdd_var x1a b1 x3 b2))) \\<and>\n                            restrict_map_invar f bs'\n                             (fst (snd (robdd_restrict res_map rev_map f rv\n   (robdd_var x1a b1 x3 b2)))) \\<and>\n                            rev_map_invar bs'\n                             (snd (snd (robdd_restrict res_map rev_map f rv\n   (robdd_var x1a b1 x3 b2)))) \\<and>\n                            (\\<forall>a.\n                                robdd_\\<alpha>\n                                 (fst (robdd_restrict res_map rev_map f rv\n  (robdd_var x1a b1 x3 b2)))\n                                 a =\n                                robdd_\\<alpha> (robdd_var x1a b1 x3 b2)\n                                 (a(rv := f)))", "case (robdd_var i l v r)"], ["proof (state)\nthis:\n  \\<lbrakk>rev_map_invar ?bs ?rev_map; restrict_map_invar f ?bs ?res_map;\n   robdd_invar_ext ?bs ?n l; subrobdds l \\<subseteq> ?bs\\<rbrakk>\n  \\<Longrightarrow> \\<exists>bs'.\n                       insert\n                        (fst (robdd_restrict ?res_map ?rev_map f rv l)) ?bs\n                       \\<subseteq> bs' \\<and>\n                       robdd_invar_ext bs' ?n\n                        (fst (robdd_restrict ?res_map ?rev_map f rv\n                               l)) \\<and>\n                       restrict_map_invar f bs'\n                        (fst (snd (robdd_restrict ?res_map ?rev_map f rv\n                                    l))) \\<and>\n                       rev_map_invar bs'\n                        (snd (snd (robdd_restrict ?res_map ?rev_map f rv\n                                    l))) \\<and>\n                       (\\<forall>a.\n                           robdd_\\<alpha>\n                            (fst (robdd_restrict ?res_map ?rev_map f rv l))\n                            a =\n                           robdd_\\<alpha> l (a(rv := f)))\n  \\<lbrakk>rev_map_invar ?bs ?rev_map; restrict_map_invar f ?bs ?res_map;\n   robdd_invar_ext ?bs ?n r; subrobdds r \\<subseteq> ?bs\\<rbrakk>\n  \\<Longrightarrow> \\<exists>bs'.\n                       insert\n                        (fst (robdd_restrict ?res_map ?rev_map f rv r)) ?bs\n                       \\<subseteq> bs' \\<and>\n                       robdd_invar_ext bs' ?n\n                        (fst (robdd_restrict ?res_map ?rev_map f rv\n                               r)) \\<and>\n                       restrict_map_invar f bs'\n                        (fst (snd (robdd_restrict ?res_map ?rev_map f rv\n                                    r))) \\<and>\n                       rev_map_invar bs'\n                        (snd (snd (robdd_restrict ?res_map ?rev_map f rv\n                                    r))) \\<and>\n                       (\\<forall>a.\n                           robdd_\\<alpha>\n                            (fst (robdd_restrict ?res_map ?rev_map f rv r))\n                            a =\n                           robdd_\\<alpha> r (a(rv := f)))\n  rev_map_invar bs rev_map\n  restrict_map_invar f bs res_map\n  robdd_invar_ext bs n (robdd_var i l v r)\n  subrobdds (robdd_var i l v r) \\<subseteq> bs\n\ngoal (1 subgoal):\n 1. \\<And>x1a b1 x3 b2 bs n res_map rev_map.\n       \\<lbrakk>\\<And>bs n res_map rev_map.\n                   \\<lbrakk>rev_map_invar bs rev_map;\n                    restrict_map_invar f bs res_map;\n                    robdd_invar_ext bs n b1;\n                    subrobdds b1 \\<subseteq> bs\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>bs'.\n  insert (fst (robdd_restrict res_map rev_map f rv b1)) bs\n  \\<subseteq> bs' \\<and>\n  robdd_invar_ext bs' n\n   (fst (robdd_restrict res_map rev_map f rv b1)) \\<and>\n  restrict_map_invar f bs'\n   (fst (snd (robdd_restrict res_map rev_map f rv b1))) \\<and>\n  rev_map_invar bs'\n   (snd (snd (robdd_restrict res_map rev_map f rv b1))) \\<and>\n  (\\<forall>a.\n      robdd_\\<alpha> (fst (robdd_restrict res_map rev_map f rv b1)) a =\n      robdd_\\<alpha> b1 (a(rv := f)));\n        \\<And>bs n res_map rev_map.\n           \\<lbrakk>rev_map_invar bs rev_map;\n            restrict_map_invar f bs res_map; robdd_invar_ext bs n b2;\n            subrobdds b2 \\<subseteq> bs\\<rbrakk>\n           \\<Longrightarrow> \\<exists>bs'.\n                                insert\n                                 (fst (robdd_restrict res_map rev_map f rv\n  b2))\n                                 bs\n                                \\<subseteq> bs' \\<and>\n                                robdd_invar_ext bs' n\n                                 (fst (robdd_restrict res_map rev_map f rv\n  b2)) \\<and>\n                                restrict_map_invar f bs'\n                                 (fst (snd\n  (robdd_restrict res_map rev_map f rv b2))) \\<and>\n                                rev_map_invar bs'\n                                 (snd (snd\n  (robdd_restrict res_map rev_map f rv b2))) \\<and>\n                                (\\<forall>a.\n                                    robdd_\\<alpha>\n                                     (fst\n (robdd_restrict res_map rev_map f rv b2))\n                                     a =\n                                    robdd_\\<alpha> b2 (a(rv := f)));\n        rev_map_invar bs rev_map; restrict_map_invar f bs res_map;\n        robdd_invar_ext bs n (robdd_var x1a b1 x3 b2);\n        subrobdds (robdd_var x1a b1 x3 b2) \\<subseteq> bs\\<rbrakk>\n       \\<Longrightarrow> \\<exists>bs'.\n                            insert\n                             (fst (robdd_restrict res_map rev_map f rv\n                                    (robdd_var x1a b1 x3 b2)))\n                             bs\n                            \\<subseteq> bs' \\<and>\n                            robdd_invar_ext bs' n\n                             (fst (robdd_restrict res_map rev_map f rv\n                                    (robdd_var x1a b1 x3 b2))) \\<and>\n                            restrict_map_invar f bs'\n                             (fst (snd (robdd_restrict res_map rev_map f rv\n   (robdd_var x1a b1 x3 b2)))) \\<and>\n                            rev_map_invar bs'\n                             (snd (snd (robdd_restrict res_map rev_map f rv\n   (robdd_var x1a b1 x3 b2)))) \\<and>\n                            (\\<forall>a.\n                                robdd_\\<alpha>\n                                 (fst (robdd_restrict res_map rev_map f rv\n  (robdd_var x1a b1 x3 b2)))\n                                 a =\n                                robdd_\\<alpha> (robdd_var x1a b1 x3 b2)\n                                 (a(rv := f)))", "note indhyp_l = robdd_var(1)"], ["proof (state)\nthis:\n  \\<lbrakk>rev_map_invar ?bs ?rev_map; restrict_map_invar f ?bs ?res_map;\n   robdd_invar_ext ?bs ?n l; subrobdds l \\<subseteq> ?bs\\<rbrakk>\n  \\<Longrightarrow> \\<exists>bs'.\n                       insert\n                        (fst (robdd_restrict ?res_map ?rev_map f rv l)) ?bs\n                       \\<subseteq> bs' \\<and>\n                       robdd_invar_ext bs' ?n\n                        (fst (robdd_restrict ?res_map ?rev_map f rv\n                               l)) \\<and>\n                       restrict_map_invar f bs'\n                        (fst (snd (robdd_restrict ?res_map ?rev_map f rv\n                                    l))) \\<and>\n                       rev_map_invar bs'\n                        (snd (snd (robdd_restrict ?res_map ?rev_map f rv\n                                    l))) \\<and>\n                       (\\<forall>a.\n                           robdd_\\<alpha>\n                            (fst (robdd_restrict ?res_map ?rev_map f rv l))\n                            a =\n                           robdd_\\<alpha> l (a(rv := f)))\n\ngoal (1 subgoal):\n 1. \\<And>x1a b1 x3 b2 bs n res_map rev_map.\n       \\<lbrakk>\\<And>bs n res_map rev_map.\n                   \\<lbrakk>rev_map_invar bs rev_map;\n                    restrict_map_invar f bs res_map;\n                    robdd_invar_ext bs n b1;\n                    subrobdds b1 \\<subseteq> bs\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>bs'.\n  insert (fst (robdd_restrict res_map rev_map f rv b1)) bs\n  \\<subseteq> bs' \\<and>\n  robdd_invar_ext bs' n\n   (fst (robdd_restrict res_map rev_map f rv b1)) \\<and>\n  restrict_map_invar f bs'\n   (fst (snd (robdd_restrict res_map rev_map f rv b1))) \\<and>\n  rev_map_invar bs'\n   (snd (snd (robdd_restrict res_map rev_map f rv b1))) \\<and>\n  (\\<forall>a.\n      robdd_\\<alpha> (fst (robdd_restrict res_map rev_map f rv b1)) a =\n      robdd_\\<alpha> b1 (a(rv := f)));\n        \\<And>bs n res_map rev_map.\n           \\<lbrakk>rev_map_invar bs rev_map;\n            restrict_map_invar f bs res_map; robdd_invar_ext bs n b2;\n            subrobdds b2 \\<subseteq> bs\\<rbrakk>\n           \\<Longrightarrow> \\<exists>bs'.\n                                insert\n                                 (fst (robdd_restrict res_map rev_map f rv\n  b2))\n                                 bs\n                                \\<subseteq> bs' \\<and>\n                                robdd_invar_ext bs' n\n                                 (fst (robdd_restrict res_map rev_map f rv\n  b2)) \\<and>\n                                restrict_map_invar f bs'\n                                 (fst (snd\n  (robdd_restrict res_map rev_map f rv b2))) \\<and>\n                                rev_map_invar bs'\n                                 (snd (snd\n  (robdd_restrict res_map rev_map f rv b2))) \\<and>\n                                (\\<forall>a.\n                                    robdd_\\<alpha>\n                                     (fst\n (robdd_restrict res_map rev_map f rv b2))\n                                     a =\n                                    robdd_\\<alpha> b2 (a(rv := f)));\n        rev_map_invar bs rev_map; restrict_map_invar f bs res_map;\n        robdd_invar_ext bs n (robdd_var x1a b1 x3 b2);\n        subrobdds (robdd_var x1a b1 x3 b2) \\<subseteq> bs\\<rbrakk>\n       \\<Longrightarrow> \\<exists>bs'.\n                            insert\n                             (fst (robdd_restrict res_map rev_map f rv\n                                    (robdd_var x1a b1 x3 b2)))\n                             bs\n                            \\<subseteq> bs' \\<and>\n                            robdd_invar_ext bs' n\n                             (fst (robdd_restrict res_map rev_map f rv\n                                    (robdd_var x1a b1 x3 b2))) \\<and>\n                            restrict_map_invar f bs'\n                             (fst (snd (robdd_restrict res_map rev_map f rv\n   (robdd_var x1a b1 x3 b2)))) \\<and>\n                            rev_map_invar bs'\n                             (snd (snd (robdd_restrict res_map rev_map f rv\n   (robdd_var x1a b1 x3 b2)))) \\<and>\n                            (\\<forall>a.\n                                robdd_\\<alpha>\n                                 (fst (robdd_restrict res_map rev_map f rv\n  (robdd_var x1a b1 x3 b2)))\n                                 a =\n                                robdd_\\<alpha> (robdd_var x1a b1 x3 b2)\n                                 (a(rv := f)))", "note indhyp_r = robdd_var(2)"], ["proof (state)\nthis:\n  \\<lbrakk>rev_map_invar ?bs ?rev_map; restrict_map_invar f ?bs ?res_map;\n   robdd_invar_ext ?bs ?n r; subrobdds r \\<subseteq> ?bs\\<rbrakk>\n  \\<Longrightarrow> \\<exists>bs'.\n                       insert\n                        (fst (robdd_restrict ?res_map ?rev_map f rv r)) ?bs\n                       \\<subseteq> bs' \\<and>\n                       robdd_invar_ext bs' ?n\n                        (fst (robdd_restrict ?res_map ?rev_map f rv\n                               r)) \\<and>\n                       restrict_map_invar f bs'\n                        (fst (snd (robdd_restrict ?res_map ?rev_map f rv\n                                    r))) \\<and>\n                       rev_map_invar bs'\n                        (snd (snd (robdd_restrict ?res_map ?rev_map f rv\n                                    r))) \\<and>\n                       (\\<forall>a.\n                           robdd_\\<alpha>\n                            (fst (robdd_restrict ?res_map ?rev_map f rv r))\n                            a =\n                           robdd_\\<alpha> r (a(rv := f)))\n\ngoal (1 subgoal):\n 1. \\<And>x1a b1 x3 b2 bs n res_map rev_map.\n       \\<lbrakk>\\<And>bs n res_map rev_map.\n                   \\<lbrakk>rev_map_invar bs rev_map;\n                    restrict_map_invar f bs res_map;\n                    robdd_invar_ext bs n b1;\n                    subrobdds b1 \\<subseteq> bs\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>bs'.\n  insert (fst (robdd_restrict res_map rev_map f rv b1)) bs\n  \\<subseteq> bs' \\<and>\n  robdd_invar_ext bs' n\n   (fst (robdd_restrict res_map rev_map f rv b1)) \\<and>\n  restrict_map_invar f bs'\n   (fst (snd (robdd_restrict res_map rev_map f rv b1))) \\<and>\n  rev_map_invar bs'\n   (snd (snd (robdd_restrict res_map rev_map f rv b1))) \\<and>\n  (\\<forall>a.\n      robdd_\\<alpha> (fst (robdd_restrict res_map rev_map f rv b1)) a =\n      robdd_\\<alpha> b1 (a(rv := f)));\n        \\<And>bs n res_map rev_map.\n           \\<lbrakk>rev_map_invar bs rev_map;\n            restrict_map_invar f bs res_map; robdd_invar_ext bs n b2;\n            subrobdds b2 \\<subseteq> bs\\<rbrakk>\n           \\<Longrightarrow> \\<exists>bs'.\n                                insert\n                                 (fst (robdd_restrict res_map rev_map f rv\n  b2))\n                                 bs\n                                \\<subseteq> bs' \\<and>\n                                robdd_invar_ext bs' n\n                                 (fst (robdd_restrict res_map rev_map f rv\n  b2)) \\<and>\n                                restrict_map_invar f bs'\n                                 (fst (snd\n  (robdd_restrict res_map rev_map f rv b2))) \\<and>\n                                rev_map_invar bs'\n                                 (snd (snd\n  (robdd_restrict res_map rev_map f rv b2))) \\<and>\n                                (\\<forall>a.\n                                    robdd_\\<alpha>\n                                     (fst\n (robdd_restrict res_map rev_map f rv b2))\n                                     a =\n                                    robdd_\\<alpha> b2 (a(rv := f)));\n        rev_map_invar bs rev_map; restrict_map_invar f bs res_map;\n        robdd_invar_ext bs n (robdd_var x1a b1 x3 b2);\n        subrobdds (robdd_var x1a b1 x3 b2) \\<subseteq> bs\\<rbrakk>\n       \\<Longrightarrow> \\<exists>bs'.\n                            insert\n                             (fst (robdd_restrict res_map rev_map f rv\n                                    (robdd_var x1a b1 x3 b2)))\n                             bs\n                            \\<subseteq> bs' \\<and>\n                            robdd_invar_ext bs' n\n                             (fst (robdd_restrict res_map rev_map f rv\n                                    (robdd_var x1a b1 x3 b2))) \\<and>\n                            restrict_map_invar f bs'\n                             (fst (snd (robdd_restrict res_map rev_map f rv\n   (robdd_var x1a b1 x3 b2)))) \\<and>\n                            rev_map_invar bs'\n                             (snd (snd (robdd_restrict res_map rev_map f rv\n   (robdd_var x1a b1 x3 b2)))) \\<and>\n                            (\\<forall>a.\n                                robdd_\\<alpha>\n                                 (fst (robdd_restrict res_map rev_map f rv\n  (robdd_var x1a b1 x3 b2)))\n                                 a =\n                                robdd_\\<alpha> (robdd_var x1a b1 x3 b2)\n                                 (a(rv := f)))", "note invar_rev_map = robdd_var(3)"], ["proof (state)\nthis:\n  rev_map_invar bs rev_map\n\ngoal (1 subgoal):\n 1. \\<And>x1a b1 x3 b2 bs n res_map rev_map.\n       \\<lbrakk>\\<And>bs n res_map rev_map.\n                   \\<lbrakk>rev_map_invar bs rev_map;\n                    restrict_map_invar f bs res_map;\n                    robdd_invar_ext bs n b1;\n                    subrobdds b1 \\<subseteq> bs\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>bs'.\n  insert (fst (robdd_restrict res_map rev_map f rv b1)) bs\n  \\<subseteq> bs' \\<and>\n  robdd_invar_ext bs' n\n   (fst (robdd_restrict res_map rev_map f rv b1)) \\<and>\n  restrict_map_invar f bs'\n   (fst (snd (robdd_restrict res_map rev_map f rv b1))) \\<and>\n  rev_map_invar bs'\n   (snd (snd (robdd_restrict res_map rev_map f rv b1))) \\<and>\n  (\\<forall>a.\n      robdd_\\<alpha> (fst (robdd_restrict res_map rev_map f rv b1)) a =\n      robdd_\\<alpha> b1 (a(rv := f)));\n        \\<And>bs n res_map rev_map.\n           \\<lbrakk>rev_map_invar bs rev_map;\n            restrict_map_invar f bs res_map; robdd_invar_ext bs n b2;\n            subrobdds b2 \\<subseteq> bs\\<rbrakk>\n           \\<Longrightarrow> \\<exists>bs'.\n                                insert\n                                 (fst (robdd_restrict res_map rev_map f rv\n  b2))\n                                 bs\n                                \\<subseteq> bs' \\<and>\n                                robdd_invar_ext bs' n\n                                 (fst (robdd_restrict res_map rev_map f rv\n  b2)) \\<and>\n                                restrict_map_invar f bs'\n                                 (fst (snd\n  (robdd_restrict res_map rev_map f rv b2))) \\<and>\n                                rev_map_invar bs'\n                                 (snd (snd\n  (robdd_restrict res_map rev_map f rv b2))) \\<and>\n                                (\\<forall>a.\n                                    robdd_\\<alpha>\n                                     (fst\n (robdd_restrict res_map rev_map f rv b2))\n                                     a =\n                                    robdd_\\<alpha> b2 (a(rv := f)));\n        rev_map_invar bs rev_map; restrict_map_invar f bs res_map;\n        robdd_invar_ext bs n (robdd_var x1a b1 x3 b2);\n        subrobdds (robdd_var x1a b1 x3 b2) \\<subseteq> bs\\<rbrakk>\n       \\<Longrightarrow> \\<exists>bs'.\n                            insert\n                             (fst (robdd_restrict res_map rev_map f rv\n                                    (robdd_var x1a b1 x3 b2)))\n                             bs\n                            \\<subseteq> bs' \\<and>\n                            robdd_invar_ext bs' n\n                             (fst (robdd_restrict res_map rev_map f rv\n                                    (robdd_var x1a b1 x3 b2))) \\<and>\n                            restrict_map_invar f bs'\n                             (fst (snd (robdd_restrict res_map rev_map f rv\n   (robdd_var x1a b1 x3 b2)))) \\<and>\n                            rev_map_invar bs'\n                             (snd (snd (robdd_restrict res_map rev_map f rv\n   (robdd_var x1a b1 x3 b2)))) \\<and>\n                            (\\<forall>a.\n                                robdd_\\<alpha>\n                                 (fst (robdd_restrict res_map rev_map f rv\n  (robdd_var x1a b1 x3 b2)))\n                                 a =\n                                robdd_\\<alpha> (robdd_var x1a b1 x3 b2)\n                                 (a(rv := f)))", "note invar_res_map = robdd_var(4)"], ["proof (state)\nthis:\n  restrict_map_invar f bs res_map\n\ngoal (1 subgoal):\n 1. \\<And>x1a b1 x3 b2 bs n res_map rev_map.\n       \\<lbrakk>\\<And>bs n res_map rev_map.\n                   \\<lbrakk>rev_map_invar bs rev_map;\n                    restrict_map_invar f bs res_map;\n                    robdd_invar_ext bs n b1;\n                    subrobdds b1 \\<subseteq> bs\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>bs'.\n  insert (fst (robdd_restrict res_map rev_map f rv b1)) bs\n  \\<subseteq> bs' \\<and>\n  robdd_invar_ext bs' n\n   (fst (robdd_restrict res_map rev_map f rv b1)) \\<and>\n  restrict_map_invar f bs'\n   (fst (snd (robdd_restrict res_map rev_map f rv b1))) \\<and>\n  rev_map_invar bs'\n   (snd (snd (robdd_restrict res_map rev_map f rv b1))) \\<and>\n  (\\<forall>a.\n      robdd_\\<alpha> (fst (robdd_restrict res_map rev_map f rv b1)) a =\n      robdd_\\<alpha> b1 (a(rv := f)));\n        \\<And>bs n res_map rev_map.\n           \\<lbrakk>rev_map_invar bs rev_map;\n            restrict_map_invar f bs res_map; robdd_invar_ext bs n b2;\n            subrobdds b2 \\<subseteq> bs\\<rbrakk>\n           \\<Longrightarrow> \\<exists>bs'.\n                                insert\n                                 (fst (robdd_restrict res_map rev_map f rv\n  b2))\n                                 bs\n                                \\<subseteq> bs' \\<and>\n                                robdd_invar_ext bs' n\n                                 (fst (robdd_restrict res_map rev_map f rv\n  b2)) \\<and>\n                                restrict_map_invar f bs'\n                                 (fst (snd\n  (robdd_restrict res_map rev_map f rv b2))) \\<and>\n                                rev_map_invar bs'\n                                 (snd (snd\n  (robdd_restrict res_map rev_map f rv b2))) \\<and>\n                                (\\<forall>a.\n                                    robdd_\\<alpha>\n                                     (fst\n (robdd_restrict res_map rev_map f rv b2))\n                                     a =\n                                    robdd_\\<alpha> b2 (a(rv := f)));\n        rev_map_invar bs rev_map; restrict_map_invar f bs res_map;\n        robdd_invar_ext bs n (robdd_var x1a b1 x3 b2);\n        subrobdds (robdd_var x1a b1 x3 b2) \\<subseteq> bs\\<rbrakk>\n       \\<Longrightarrow> \\<exists>bs'.\n                            insert\n                             (fst (robdd_restrict res_map rev_map f rv\n                                    (robdd_var x1a b1 x3 b2)))\n                             bs\n                            \\<subseteq> bs' \\<and>\n                            robdd_invar_ext bs' n\n                             (fst (robdd_restrict res_map rev_map f rv\n                                    (robdd_var x1a b1 x3 b2))) \\<and>\n                            restrict_map_invar f bs'\n                             (fst (snd (robdd_restrict res_map rev_map f rv\n   (robdd_var x1a b1 x3 b2)))) \\<and>\n                            rev_map_invar bs'\n                             (snd (snd (robdd_restrict res_map rev_map f rv\n   (robdd_var x1a b1 x3 b2)))) \\<and>\n                            (\\<forall>a.\n                                robdd_\\<alpha>\n                                 (fst (robdd_restrict res_map rev_map f rv\n  (robdd_var x1a b1 x3 b2)))\n                                 a =\n                                robdd_\\<alpha> (robdd_var x1a b1 x3 b2)\n                                 (a(rv := f)))", "note b_invar = robdd_var(5)"], ["proof (state)\nthis:\n  robdd_invar_ext bs n (robdd_var i l v r)\n\ngoal (1 subgoal):\n 1. \\<And>x1a b1 x3 b2 bs n res_map rev_map.\n       \\<lbrakk>\\<And>bs n res_map rev_map.\n                   \\<lbrakk>rev_map_invar bs rev_map;\n                    restrict_map_invar f bs res_map;\n                    robdd_invar_ext bs n b1;\n                    subrobdds b1 \\<subseteq> bs\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>bs'.\n  insert (fst (robdd_restrict res_map rev_map f rv b1)) bs\n  \\<subseteq> bs' \\<and>\n  robdd_invar_ext bs' n\n   (fst (robdd_restrict res_map rev_map f rv b1)) \\<and>\n  restrict_map_invar f bs'\n   (fst (snd (robdd_restrict res_map rev_map f rv b1))) \\<and>\n  rev_map_invar bs'\n   (snd (snd (robdd_restrict res_map rev_map f rv b1))) \\<and>\n  (\\<forall>a.\n      robdd_\\<alpha> (fst (robdd_restrict res_map rev_map f rv b1)) a =\n      robdd_\\<alpha> b1 (a(rv := f)));\n        \\<And>bs n res_map rev_map.\n           \\<lbrakk>rev_map_invar bs rev_map;\n            restrict_map_invar f bs res_map; robdd_invar_ext bs n b2;\n            subrobdds b2 \\<subseteq> bs\\<rbrakk>\n           \\<Longrightarrow> \\<exists>bs'.\n                                insert\n                                 (fst (robdd_restrict res_map rev_map f rv\n  b2))\n                                 bs\n                                \\<subseteq> bs' \\<and>\n                                robdd_invar_ext bs' n\n                                 (fst (robdd_restrict res_map rev_map f rv\n  b2)) \\<and>\n                                restrict_map_invar f bs'\n                                 (fst (snd\n  (robdd_restrict res_map rev_map f rv b2))) \\<and>\n                                rev_map_invar bs'\n                                 (snd (snd\n  (robdd_restrict res_map rev_map f rv b2))) \\<and>\n                                (\\<forall>a.\n                                    robdd_\\<alpha>\n                                     (fst\n (robdd_restrict res_map rev_map f rv b2))\n                                     a =\n                                    robdd_\\<alpha> b2 (a(rv := f)));\n        rev_map_invar bs rev_map; restrict_map_invar f bs res_map;\n        robdd_invar_ext bs n (robdd_var x1a b1 x3 b2);\n        subrobdds (robdd_var x1a b1 x3 b2) \\<subseteq> bs\\<rbrakk>\n       \\<Longrightarrow> \\<exists>bs'.\n                            insert\n                             (fst (robdd_restrict res_map rev_map f rv\n                                    (robdd_var x1a b1 x3 b2)))\n                             bs\n                            \\<subseteq> bs' \\<and>\n                            robdd_invar_ext bs' n\n                             (fst (robdd_restrict res_map rev_map f rv\n                                    (robdd_var x1a b1 x3 b2))) \\<and>\n                            restrict_map_invar f bs'\n                             (fst (snd (robdd_restrict res_map rev_map f rv\n   (robdd_var x1a b1 x3 b2)))) \\<and>\n                            rev_map_invar bs'\n                             (snd (snd (robdd_restrict res_map rev_map f rv\n   (robdd_var x1a b1 x3 b2)))) \\<and>\n                            (\\<forall>a.\n                                robdd_\\<alpha>\n                                 (fst (robdd_restrict res_map rev_map f rv\n  (robdd_var x1a b1 x3 b2)))\n                                 a =\n                                robdd_\\<alpha> (robdd_var x1a b1 x3 b2)\n                                 (a(rv := f)))", "note b_sub = robdd_var(6)"], ["proof (state)\nthis:\n  subrobdds (robdd_var i l v r) \\<subseteq> bs\n\ngoal (1 subgoal):\n 1. \\<And>x1a b1 x3 b2 bs n res_map rev_map.\n       \\<lbrakk>\\<And>bs n res_map rev_map.\n                   \\<lbrakk>rev_map_invar bs rev_map;\n                    restrict_map_invar f bs res_map;\n                    robdd_invar_ext bs n b1;\n                    subrobdds b1 \\<subseteq> bs\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>bs'.\n  insert (fst (robdd_restrict res_map rev_map f rv b1)) bs\n  \\<subseteq> bs' \\<and>\n  robdd_invar_ext bs' n\n   (fst (robdd_restrict res_map rev_map f rv b1)) \\<and>\n  restrict_map_invar f bs'\n   (fst (snd (robdd_restrict res_map rev_map f rv b1))) \\<and>\n  rev_map_invar bs'\n   (snd (snd (robdd_restrict res_map rev_map f rv b1))) \\<and>\n  (\\<forall>a.\n      robdd_\\<alpha> (fst (robdd_restrict res_map rev_map f rv b1)) a =\n      robdd_\\<alpha> b1 (a(rv := f)));\n        \\<And>bs n res_map rev_map.\n           \\<lbrakk>rev_map_invar bs rev_map;\n            restrict_map_invar f bs res_map; robdd_invar_ext bs n b2;\n            subrobdds b2 \\<subseteq> bs\\<rbrakk>\n           \\<Longrightarrow> \\<exists>bs'.\n                                insert\n                                 (fst (robdd_restrict res_map rev_map f rv\n  b2))\n                                 bs\n                                \\<subseteq> bs' \\<and>\n                                robdd_invar_ext bs' n\n                                 (fst (robdd_restrict res_map rev_map f rv\n  b2)) \\<and>\n                                restrict_map_invar f bs'\n                                 (fst (snd\n  (robdd_restrict res_map rev_map f rv b2))) \\<and>\n                                rev_map_invar bs'\n                                 (snd (snd\n  (robdd_restrict res_map rev_map f rv b2))) \\<and>\n                                (\\<forall>a.\n                                    robdd_\\<alpha>\n                                     (fst\n (robdd_restrict res_map rev_map f rv b2))\n                                     a =\n                                    robdd_\\<alpha> b2 (a(rv := f)));\n        rev_map_invar bs rev_map; restrict_map_invar f bs res_map;\n        robdd_invar_ext bs n (robdd_var x1a b1 x3 b2);\n        subrobdds (robdd_var x1a b1 x3 b2) \\<subseteq> bs\\<rbrakk>\n       \\<Longrightarrow> \\<exists>bs'.\n                            insert\n                             (fst (robdd_restrict res_map rev_map f rv\n                                    (robdd_var x1a b1 x3 b2)))\n                             bs\n                            \\<subseteq> bs' \\<and>\n                            robdd_invar_ext bs' n\n                             (fst (robdd_restrict res_map rev_map f rv\n                                    (robdd_var x1a b1 x3 b2))) \\<and>\n                            restrict_map_invar f bs'\n                             (fst (snd (robdd_restrict res_map rev_map f rv\n   (robdd_var x1a b1 x3 b2)))) \\<and>\n                            rev_map_invar bs'\n                             (snd (snd (robdd_restrict res_map rev_map f rv\n   (robdd_var x1a b1 x3 b2)))) \\<and>\n                            (\\<forall>a.\n                                robdd_\\<alpha>\n                                 (fst (robdd_restrict res_map rev_map f rv\n  (robdd_var x1a b1 x3 b2)))\n                                 a =\n                                robdd_\\<alpha> (robdd_var x1a b1 x3 b2)\n                                 (a(rv := f)))", "let ?b = \"robdd_var i l v r\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x1a b1 x3 b2 bs n res_map rev_map.\n       \\<lbrakk>\\<And>bs n res_map rev_map.\n                   \\<lbrakk>rev_map_invar bs rev_map;\n                    restrict_map_invar f bs res_map;\n                    robdd_invar_ext bs n b1;\n                    subrobdds b1 \\<subseteq> bs\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>bs'.\n  insert (fst (robdd_restrict res_map rev_map f rv b1)) bs\n  \\<subseteq> bs' \\<and>\n  robdd_invar_ext bs' n\n   (fst (robdd_restrict res_map rev_map f rv b1)) \\<and>\n  restrict_map_invar f bs'\n   (fst (snd (robdd_restrict res_map rev_map f rv b1))) \\<and>\n  rev_map_invar bs'\n   (snd (snd (robdd_restrict res_map rev_map f rv b1))) \\<and>\n  (\\<forall>a.\n      robdd_\\<alpha> (fst (robdd_restrict res_map rev_map f rv b1)) a =\n      robdd_\\<alpha> b1 (a(rv := f)));\n        \\<And>bs n res_map rev_map.\n           \\<lbrakk>rev_map_invar bs rev_map;\n            restrict_map_invar f bs res_map; robdd_invar_ext bs n b2;\n            subrobdds b2 \\<subseteq> bs\\<rbrakk>\n           \\<Longrightarrow> \\<exists>bs'.\n                                insert\n                                 (fst (robdd_restrict res_map rev_map f rv\n  b2))\n                                 bs\n                                \\<subseteq> bs' \\<and>\n                                robdd_invar_ext bs' n\n                                 (fst (robdd_restrict res_map rev_map f rv\n  b2)) \\<and>\n                                restrict_map_invar f bs'\n                                 (fst (snd\n  (robdd_restrict res_map rev_map f rv b2))) \\<and>\n                                rev_map_invar bs'\n                                 (snd (snd\n  (robdd_restrict res_map rev_map f rv b2))) \\<and>\n                                (\\<forall>a.\n                                    robdd_\\<alpha>\n                                     (fst\n (robdd_restrict res_map rev_map f rv b2))\n                                     a =\n                                    robdd_\\<alpha> b2 (a(rv := f)));\n        rev_map_invar bs rev_map; restrict_map_invar f bs res_map;\n        robdd_invar_ext bs n (robdd_var x1a b1 x3 b2);\n        subrobdds (robdd_var x1a b1 x3 b2) \\<subseteq> bs\\<rbrakk>\n       \\<Longrightarrow> \\<exists>bs'.\n                            insert\n                             (fst (robdd_restrict res_map rev_map f rv\n                                    (robdd_var x1a b1 x3 b2)))\n                             bs\n                            \\<subseteq> bs' \\<and>\n                            robdd_invar_ext bs' n\n                             (fst (robdd_restrict res_map rev_map f rv\n                                    (robdd_var x1a b1 x3 b2))) \\<and>\n                            restrict_map_invar f bs'\n                             (fst (snd (robdd_restrict res_map rev_map f rv\n   (robdd_var x1a b1 x3 b2)))) \\<and>\n                            rev_map_invar bs'\n                             (snd (snd (robdd_restrict res_map rev_map f rv\n   (robdd_var x1a b1 x3 b2)))) \\<and>\n                            (\\<forall>a.\n                                robdd_\\<alpha>\n                                 (fst (robdd_restrict res_map rev_map f rv\n  (robdd_var x1a b1 x3 b2)))\n                                 a =\n                                robdd_\\<alpha> (robdd_var x1a b1 x3 b2)\n                                 (a(rv := f)))", "let ?res = \"robdd_restrict res_map rev_map f rv ?b\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x1a b1 x3 b2 bs n res_map rev_map.\n       \\<lbrakk>\\<And>bs n res_map rev_map.\n                   \\<lbrakk>rev_map_invar bs rev_map;\n                    restrict_map_invar f bs res_map;\n                    robdd_invar_ext bs n b1;\n                    subrobdds b1 \\<subseteq> bs\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>bs'.\n  insert (fst (robdd_restrict res_map rev_map f rv b1)) bs\n  \\<subseteq> bs' \\<and>\n  robdd_invar_ext bs' n\n   (fst (robdd_restrict res_map rev_map f rv b1)) \\<and>\n  restrict_map_invar f bs'\n   (fst (snd (robdd_restrict res_map rev_map f rv b1))) \\<and>\n  rev_map_invar bs'\n   (snd (snd (robdd_restrict res_map rev_map f rv b1))) \\<and>\n  (\\<forall>a.\n      robdd_\\<alpha> (fst (robdd_restrict res_map rev_map f rv b1)) a =\n      robdd_\\<alpha> b1 (a(rv := f)));\n        \\<And>bs n res_map rev_map.\n           \\<lbrakk>rev_map_invar bs rev_map;\n            restrict_map_invar f bs res_map; robdd_invar_ext bs n b2;\n            subrobdds b2 \\<subseteq> bs\\<rbrakk>\n           \\<Longrightarrow> \\<exists>bs'.\n                                insert\n                                 (fst (robdd_restrict res_map rev_map f rv\n  b2))\n                                 bs\n                                \\<subseteq> bs' \\<and>\n                                robdd_invar_ext bs' n\n                                 (fst (robdd_restrict res_map rev_map f rv\n  b2)) \\<and>\n                                restrict_map_invar f bs'\n                                 (fst (snd\n  (robdd_restrict res_map rev_map f rv b2))) \\<and>\n                                rev_map_invar bs'\n                                 (snd (snd\n  (robdd_restrict res_map rev_map f rv b2))) \\<and>\n                                (\\<forall>a.\n                                    robdd_\\<alpha>\n                                     (fst\n (robdd_restrict res_map rev_map f rv b2))\n                                     a =\n                                    robdd_\\<alpha> b2 (a(rv := f)));\n        rev_map_invar bs rev_map; restrict_map_invar f bs res_map;\n        robdd_invar_ext bs n (robdd_var x1a b1 x3 b2);\n        subrobdds (robdd_var x1a b1 x3 b2) \\<subseteq> bs\\<rbrakk>\n       \\<Longrightarrow> \\<exists>bs'.\n                            insert\n                             (fst (robdd_restrict res_map rev_map f rv\n                                    (robdd_var x1a b1 x3 b2)))\n                             bs\n                            \\<subseteq> bs' \\<and>\n                            robdd_invar_ext bs' n\n                             (fst (robdd_restrict res_map rev_map f rv\n                                    (robdd_var x1a b1 x3 b2))) \\<and>\n                            restrict_map_invar f bs'\n                             (fst (snd (robdd_restrict res_map rev_map f rv\n   (robdd_var x1a b1 x3 b2)))) \\<and>\n                            rev_map_invar bs'\n                             (snd (snd (robdd_restrict res_map rev_map f rv\n   (robdd_var x1a b1 x3 b2)))) \\<and>\n                            (\\<forall>a.\n                                robdd_\\<alpha>\n                                 (fst (robdd_restrict res_map rev_map f rv\n  (robdd_var x1a b1 x3 b2)))\n                                 a =\n                                robdd_\\<alpha> (robdd_var x1a b1 x3 b2)\n                                 (a(rv := f)))", "from b_invar"], ["proof (chain)\npicking this:\n  robdd_invar_ext bs n (robdd_var i l v r)", "have b_in_bs: \"?b \\<in> subrobdds_set bs\""], ["proof (prove)\nusing this:\n  robdd_invar_ext bs n (robdd_var i l v r)\n\ngoal (1 subgoal):\n 1. robdd_var i l v r \\<in> subrobdds_set bs", "unfolding robdd_invar_ext_def"], ["proof (prove)\nusing this:\n  robdd_var i l v r \\<in> subrobdds_set bs \\<and>\n  robdd_invar_ids bs \\<and>\n  robdd_invar_vars_greater n (robdd_var i l v r) \\<and>\n  robdd_invar_reduced (robdd_var i l v r)\n\ngoal (1 subgoal):\n 1. robdd_var i l v r \\<in> subrobdds_set bs", "by simp"], ["proof (state)\nthis:\n  robdd_var i l v r \\<in> subrobdds_set bs\n\ngoal (1 subgoal):\n 1. \\<And>x1a b1 x3 b2 bs n res_map rev_map.\n       \\<lbrakk>\\<And>bs n res_map rev_map.\n                   \\<lbrakk>rev_map_invar bs rev_map;\n                    restrict_map_invar f bs res_map;\n                    robdd_invar_ext bs n b1;\n                    subrobdds b1 \\<subseteq> bs\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>bs'.\n  insert (fst (robdd_restrict res_map rev_map f rv b1)) bs\n  \\<subseteq> bs' \\<and>\n  robdd_invar_ext bs' n\n   (fst (robdd_restrict res_map rev_map f rv b1)) \\<and>\n  restrict_map_invar f bs'\n   (fst (snd (robdd_restrict res_map rev_map f rv b1))) \\<and>\n  rev_map_invar bs'\n   (snd (snd (robdd_restrict res_map rev_map f rv b1))) \\<and>\n  (\\<forall>a.\n      robdd_\\<alpha> (fst (robdd_restrict res_map rev_map f rv b1)) a =\n      robdd_\\<alpha> b1 (a(rv := f)));\n        \\<And>bs n res_map rev_map.\n           \\<lbrakk>rev_map_invar bs rev_map;\n            restrict_map_invar f bs res_map; robdd_invar_ext bs n b2;\n            subrobdds b2 \\<subseteq> bs\\<rbrakk>\n           \\<Longrightarrow> \\<exists>bs'.\n                                insert\n                                 (fst (robdd_restrict res_map rev_map f rv\n  b2))\n                                 bs\n                                \\<subseteq> bs' \\<and>\n                                robdd_invar_ext bs' n\n                                 (fst (robdd_restrict res_map rev_map f rv\n  b2)) \\<and>\n                                restrict_map_invar f bs'\n                                 (fst (snd\n  (robdd_restrict res_map rev_map f rv b2))) \\<and>\n                                rev_map_invar bs'\n                                 (snd (snd\n  (robdd_restrict res_map rev_map f rv b2))) \\<and>\n                                (\\<forall>a.\n                                    robdd_\\<alpha>\n                                     (fst\n (robdd_restrict res_map rev_map f rv b2))\n                                     a =\n                                    robdd_\\<alpha> b2 (a(rv := f)));\n        rev_map_invar bs rev_map; restrict_map_invar f bs res_map;\n        robdd_invar_ext bs n (robdd_var x1a b1 x3 b2);\n        subrobdds (robdd_var x1a b1 x3 b2) \\<subseteq> bs\\<rbrakk>\n       \\<Longrightarrow> \\<exists>bs'.\n                            insert\n                             (fst (robdd_restrict res_map rev_map f rv\n                                    (robdd_var x1a b1 x3 b2)))\n                             bs\n                            \\<subseteq> bs' \\<and>\n                            robdd_invar_ext bs' n\n                             (fst (robdd_restrict res_map rev_map f rv\n                                    (robdd_var x1a b1 x3 b2))) \\<and>\n                            restrict_map_invar f bs'\n                             (fst (snd (robdd_restrict res_map rev_map f rv\n   (robdd_var x1a b1 x3 b2)))) \\<and>\n                            rev_map_invar bs'\n                             (snd (snd (robdd_restrict res_map rev_map f rv\n   (robdd_var x1a b1 x3 b2)))) \\<and>\n                            (\\<forall>a.\n                                robdd_\\<alpha>\n                                 (fst (robdd_restrict res_map rev_map f rv\n  (robdd_var x1a b1 x3 b2)))\n                                 a =\n                                robdd_\\<alpha> (robdd_var x1a b1 x3 b2)\n                                 (a(rv := f)))", "from rev_map_invar_implies_invar_ids[OF invar_rev_map]"], ["proof (chain)\npicking this:\n  robdd_invar_ids bs", "have invar_ids_bs: \"robdd_invar_ids bs\""], ["proof (prove)\nusing this:\n  robdd_invar_ids bs\n\ngoal (1 subgoal):\n 1. robdd_invar_ids bs", "by simp"], ["proof (state)\nthis:\n  robdd_invar_ids bs\n\ngoal (1 subgoal):\n 1. \\<And>x1a b1 x3 b2 bs n res_map rev_map.\n       \\<lbrakk>\\<And>bs n res_map rev_map.\n                   \\<lbrakk>rev_map_invar bs rev_map;\n                    restrict_map_invar f bs res_map;\n                    robdd_invar_ext bs n b1;\n                    subrobdds b1 \\<subseteq> bs\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>bs'.\n  insert (fst (robdd_restrict res_map rev_map f rv b1)) bs\n  \\<subseteq> bs' \\<and>\n  robdd_invar_ext bs' n\n   (fst (robdd_restrict res_map rev_map f rv b1)) \\<and>\n  restrict_map_invar f bs'\n   (fst (snd (robdd_restrict res_map rev_map f rv b1))) \\<and>\n  rev_map_invar bs'\n   (snd (snd (robdd_restrict res_map rev_map f rv b1))) \\<and>\n  (\\<forall>a.\n      robdd_\\<alpha> (fst (robdd_restrict res_map rev_map f rv b1)) a =\n      robdd_\\<alpha> b1 (a(rv := f)));\n        \\<And>bs n res_map rev_map.\n           \\<lbrakk>rev_map_invar bs rev_map;\n            restrict_map_invar f bs res_map; robdd_invar_ext bs n b2;\n            subrobdds b2 \\<subseteq> bs\\<rbrakk>\n           \\<Longrightarrow> \\<exists>bs'.\n                                insert\n                                 (fst (robdd_restrict res_map rev_map f rv\n  b2))\n                                 bs\n                                \\<subseteq> bs' \\<and>\n                                robdd_invar_ext bs' n\n                                 (fst (robdd_restrict res_map rev_map f rv\n  b2)) \\<and>\n                                restrict_map_invar f bs'\n                                 (fst (snd\n  (robdd_restrict res_map rev_map f rv b2))) \\<and>\n                                rev_map_invar bs'\n                                 (snd (snd\n  (robdd_restrict res_map rev_map f rv b2))) \\<and>\n                                (\\<forall>a.\n                                    robdd_\\<alpha>\n                                     (fst\n (robdd_restrict res_map rev_map f rv b2))\n                                     a =\n                                    robdd_\\<alpha> b2 (a(rv := f)));\n        rev_map_invar bs rev_map; restrict_map_invar f bs res_map;\n        robdd_invar_ext bs n (robdd_var x1a b1 x3 b2);\n        subrobdds (robdd_var x1a b1 x3 b2) \\<subseteq> bs\\<rbrakk>\n       \\<Longrightarrow> \\<exists>bs'.\n                            insert\n                             (fst (robdd_restrict res_map rev_map f rv\n                                    (robdd_var x1a b1 x3 b2)))\n                             bs\n                            \\<subseteq> bs' \\<and>\n                            robdd_invar_ext bs' n\n                             (fst (robdd_restrict res_map rev_map f rv\n                                    (robdd_var x1a b1 x3 b2))) \\<and>\n                            restrict_map_invar f bs'\n                             (fst (snd (robdd_restrict res_map rev_map f rv\n   (robdd_var x1a b1 x3 b2)))) \\<and>\n                            rev_map_invar bs'\n                             (snd (snd (robdd_restrict res_map rev_map f rv\n   (robdd_var x1a b1 x3 b2)))) \\<and>\n                            (\\<forall>a.\n                                robdd_\\<alpha>\n                                 (fst (robdd_restrict res_map rev_map f rv\n  (robdd_var x1a b1 x3 b2)))\n                                 a =\n                                robdd_\\<alpha> (robdd_var x1a b1 x3 b2)\n                                 (a(rv := f)))", "note bs_OK_full = rev_map_invar_implies_invar_bs[OF invar_rev_map]"], ["proof (state)\nthis:\n  ?b \\<in> subrobdds_set bs \\<Longrightarrow> robdd_invar ?b\n\ngoal (1 subgoal):\n 1. \\<And>x1a b1 x3 b2 bs n res_map rev_map.\n       \\<lbrakk>\\<And>bs n res_map rev_map.\n                   \\<lbrakk>rev_map_invar bs rev_map;\n                    restrict_map_invar f bs res_map;\n                    robdd_invar_ext bs n b1;\n                    subrobdds b1 \\<subseteq> bs\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>bs'.\n  insert (fst (robdd_restrict res_map rev_map f rv b1)) bs\n  \\<subseteq> bs' \\<and>\n  robdd_invar_ext bs' n\n   (fst (robdd_restrict res_map rev_map f rv b1)) \\<and>\n  restrict_map_invar f bs'\n   (fst (snd (robdd_restrict res_map rev_map f rv b1))) \\<and>\n  rev_map_invar bs'\n   (snd (snd (robdd_restrict res_map rev_map f rv b1))) \\<and>\n  (\\<forall>a.\n      robdd_\\<alpha> (fst (robdd_restrict res_map rev_map f rv b1)) a =\n      robdd_\\<alpha> b1 (a(rv := f)));\n        \\<And>bs n res_map rev_map.\n           \\<lbrakk>rev_map_invar bs rev_map;\n            restrict_map_invar f bs res_map; robdd_invar_ext bs n b2;\n            subrobdds b2 \\<subseteq> bs\\<rbrakk>\n           \\<Longrightarrow> \\<exists>bs'.\n                                insert\n                                 (fst (robdd_restrict res_map rev_map f rv\n  b2))\n                                 bs\n                                \\<subseteq> bs' \\<and>\n                                robdd_invar_ext bs' n\n                                 (fst (robdd_restrict res_map rev_map f rv\n  b2)) \\<and>\n                                restrict_map_invar f bs'\n                                 (fst (snd\n  (robdd_restrict res_map rev_map f rv b2))) \\<and>\n                                rev_map_invar bs'\n                                 (snd (snd\n  (robdd_restrict res_map rev_map f rv b2))) \\<and>\n                                (\\<forall>a.\n                                    robdd_\\<alpha>\n                                     (fst\n (robdd_restrict res_map rev_map f rv b2))\n                                     a =\n                                    robdd_\\<alpha> b2 (a(rv := f)));\n        rev_map_invar bs rev_map; restrict_map_invar f bs res_map;\n        robdd_invar_ext bs n (robdd_var x1a b1 x3 b2);\n        subrobdds (robdd_var x1a b1 x3 b2) \\<subseteq> bs\\<rbrakk>\n       \\<Longrightarrow> \\<exists>bs'.\n                            insert\n                             (fst (robdd_restrict res_map rev_map f rv\n                                    (robdd_var x1a b1 x3 b2)))\n                             bs\n                            \\<subseteq> bs' \\<and>\n                            robdd_invar_ext bs' n\n                             (fst (robdd_restrict res_map rev_map f rv\n                                    (robdd_var x1a b1 x3 b2))) \\<and>\n                            restrict_map_invar f bs'\n                             (fst (snd (robdd_restrict res_map rev_map f rv\n   (robdd_var x1a b1 x3 b2)))) \\<and>\n                            rev_map_invar bs'\n                             (snd (snd (robdd_restrict res_map rev_map f rv\n   (robdd_var x1a b1 x3 b2)))) \\<and>\n                            (\\<forall>a.\n                                robdd_\\<alpha>\n                                 (fst (robdd_restrict res_map rev_map f rv\n  (robdd_var x1a b1 x3 b2)))\n                                 a =\n                                robdd_\\<alpha> (robdd_var x1a b1 x3 b2)\n                                 (a(rv := f)))", "have bs_OK: \"\\<And>b. b \\<in> bs \\<Longrightarrow> robdd_invar b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>b. b \\<in> bs \\<Longrightarrow> robdd_invar b", "by (metis bs_OK_full subrobdds_set_mono subsetD)"], ["proof (state)\nthis:\n  ?b \\<in> bs \\<Longrightarrow> robdd_invar ?b\n\ngoal (1 subgoal):\n 1. \\<And>x1a b1 x3 b2 bs n res_map rev_map.\n       \\<lbrakk>\\<And>bs n res_map rev_map.\n                   \\<lbrakk>rev_map_invar bs rev_map;\n                    restrict_map_invar f bs res_map;\n                    robdd_invar_ext bs n b1;\n                    subrobdds b1 \\<subseteq> bs\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>bs'.\n  insert (fst (robdd_restrict res_map rev_map f rv b1)) bs\n  \\<subseteq> bs' \\<and>\n  robdd_invar_ext bs' n\n   (fst (robdd_restrict res_map rev_map f rv b1)) \\<and>\n  restrict_map_invar f bs'\n   (fst (snd (robdd_restrict res_map rev_map f rv b1))) \\<and>\n  rev_map_invar bs'\n   (snd (snd (robdd_restrict res_map rev_map f rv b1))) \\<and>\n  (\\<forall>a.\n      robdd_\\<alpha> (fst (robdd_restrict res_map rev_map f rv b1)) a =\n      robdd_\\<alpha> b1 (a(rv := f)));\n        \\<And>bs n res_map rev_map.\n           \\<lbrakk>rev_map_invar bs rev_map;\n            restrict_map_invar f bs res_map; robdd_invar_ext bs n b2;\n            subrobdds b2 \\<subseteq> bs\\<rbrakk>\n           \\<Longrightarrow> \\<exists>bs'.\n                                insert\n                                 (fst (robdd_restrict res_map rev_map f rv\n  b2))\n                                 bs\n                                \\<subseteq> bs' \\<and>\n                                robdd_invar_ext bs' n\n                                 (fst (robdd_restrict res_map rev_map f rv\n  b2)) \\<and>\n                                restrict_map_invar f bs'\n                                 (fst (snd\n  (robdd_restrict res_map rev_map f rv b2))) \\<and>\n                                rev_map_invar bs'\n                                 (snd (snd\n  (robdd_restrict res_map rev_map f rv b2))) \\<and>\n                                (\\<forall>a.\n                                    robdd_\\<alpha>\n                                     (fst\n (robdd_restrict res_map rev_map f rv b2))\n                                     a =\n                                    robdd_\\<alpha> b2 (a(rv := f)));\n        rev_map_invar bs rev_map; restrict_map_invar f bs res_map;\n        robdd_invar_ext bs n (robdd_var x1a b1 x3 b2);\n        subrobdds (robdd_var x1a b1 x3 b2) \\<subseteq> bs\\<rbrakk>\n       \\<Longrightarrow> \\<exists>bs'.\n                            insert\n                             (fst (robdd_restrict res_map rev_map f rv\n                                    (robdd_var x1a b1 x3 b2)))\n                             bs\n                            \\<subseteq> bs' \\<and>\n                            robdd_invar_ext bs' n\n                             (fst (robdd_restrict res_map rev_map f rv\n                                    (robdd_var x1a b1 x3 b2))) \\<and>\n                            restrict_map_invar f bs'\n                             (fst (snd (robdd_restrict res_map rev_map f rv\n   (robdd_var x1a b1 x3 b2)))) \\<and>\n                            rev_map_invar bs'\n                             (snd (snd (robdd_restrict res_map rev_map f rv\n   (robdd_var x1a b1 x3 b2)))) \\<and>\n                            (\\<forall>a.\n                                robdd_\\<alpha>\n                                 (fst (robdd_restrict res_map rev_map f rv\n  (robdd_var x1a b1 x3 b2)))\n                                 a =\n                                robdd_\\<alpha> (robdd_var x1a b1 x3 b2)\n                                 (a(rv := f)))", "have invar_ids_equal_bs: \"robdd_invar_ids_equal bs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. robdd_invar_ids_equal bs", "by (rule robdd_invar_ids_equal_intro [OF bs_OK invar_ids_bs])"], ["proof (state)\nthis:\n  robdd_invar_ids_equal bs\n\ngoal (1 subgoal):\n 1. \\<And>x1a b1 x3 b2 bs n res_map rev_map.\n       \\<lbrakk>\\<And>bs n res_map rev_map.\n                   \\<lbrakk>rev_map_invar bs rev_map;\n                    restrict_map_invar f bs res_map;\n                    robdd_invar_ext bs n b1;\n                    subrobdds b1 \\<subseteq> bs\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>bs'.\n  insert (fst (robdd_restrict res_map rev_map f rv b1)) bs\n  \\<subseteq> bs' \\<and>\n  robdd_invar_ext bs' n\n   (fst (robdd_restrict res_map rev_map f rv b1)) \\<and>\n  restrict_map_invar f bs'\n   (fst (snd (robdd_restrict res_map rev_map f rv b1))) \\<and>\n  rev_map_invar bs'\n   (snd (snd (robdd_restrict res_map rev_map f rv b1))) \\<and>\n  (\\<forall>a.\n      robdd_\\<alpha> (fst (robdd_restrict res_map rev_map f rv b1)) a =\n      robdd_\\<alpha> b1 (a(rv := f)));\n        \\<And>bs n res_map rev_map.\n           \\<lbrakk>rev_map_invar bs rev_map;\n            restrict_map_invar f bs res_map; robdd_invar_ext bs n b2;\n            subrobdds b2 \\<subseteq> bs\\<rbrakk>\n           \\<Longrightarrow> \\<exists>bs'.\n                                insert\n                                 (fst (robdd_restrict res_map rev_map f rv\n  b2))\n                                 bs\n                                \\<subseteq> bs' \\<and>\n                                robdd_invar_ext bs' n\n                                 (fst (robdd_restrict res_map rev_map f rv\n  b2)) \\<and>\n                                restrict_map_invar f bs'\n                                 (fst (snd\n  (robdd_restrict res_map rev_map f rv b2))) \\<and>\n                                rev_map_invar bs'\n                                 (snd (snd\n  (robdd_restrict res_map rev_map f rv b2))) \\<and>\n                                (\\<forall>a.\n                                    robdd_\\<alpha>\n                                     (fst\n (robdd_restrict res_map rev_map f rv b2))\n                                     a =\n                                    robdd_\\<alpha> b2 (a(rv := f)));\n        rev_map_invar bs rev_map; restrict_map_invar f bs res_map;\n        robdd_invar_ext bs n (robdd_var x1a b1 x3 b2);\n        subrobdds (robdd_var x1a b1 x3 b2) \\<subseteq> bs\\<rbrakk>\n       \\<Longrightarrow> \\<exists>bs'.\n                            insert\n                             (fst (robdd_restrict res_map rev_map f rv\n                                    (robdd_var x1a b1 x3 b2)))\n                             bs\n                            \\<subseteq> bs' \\<and>\n                            robdd_invar_ext bs' n\n                             (fst (robdd_restrict res_map rev_map f rv\n                                    (robdd_var x1a b1 x3 b2))) \\<and>\n                            restrict_map_invar f bs'\n                             (fst (snd (robdd_restrict res_map rev_map f rv\n   (robdd_var x1a b1 x3 b2)))) \\<and>\n                            rev_map_invar bs'\n                             (snd (snd (robdd_restrict res_map rev_map f rv\n   (robdd_var x1a b1 x3 b2)))) \\<and>\n                            (\\<forall>a.\n                                robdd_\\<alpha>\n                                 (fst (robdd_restrict res_map rev_map f rv\n  (robdd_var x1a b1 x3 b2)))\n                                 a =\n                                robdd_\\<alpha> (robdd_var x1a b1 x3 b2)\n                                 (a(rv := f)))", "have invar_ids_leafs_bs : \"robdd_invar_ids_leafs bs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. robdd_invar_ids_leafs bs", "proof (rule robdd_invar_ids_leafs_intro[of bs, OF _ invar_ids_bs])"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>b. b \\<in> bs \\<Longrightarrow> robdd_invar_reduced b", "fix b"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>b. b \\<in> bs \\<Longrightarrow> robdd_invar_reduced b", "assume \"b \\<in> bs\""], ["proof (state)\nthis:\n  b \\<in> bs\n\ngoal (1 subgoal):\n 1. \\<And>b. b \\<in> bs \\<Longrightarrow> robdd_invar_reduced b", "with bs_OK[of b]"], ["proof (chain)\npicking this:\n  b \\<in> bs \\<Longrightarrow> robdd_invar b\n  b \\<in> bs", "have \"robdd_invar b\""], ["proof (prove)\nusing this:\n  b \\<in> bs \\<Longrightarrow> robdd_invar b\n  b \\<in> bs\n\ngoal (1 subgoal):\n 1. robdd_invar b", "by simp"], ["proof (state)\nthis:\n  robdd_invar b\n\ngoal (1 subgoal):\n 1. \\<And>b. b \\<in> bs \\<Longrightarrow> robdd_invar_reduced b", "thus \"robdd_invar_reduced b\""], ["proof (prove)\nusing this:\n  robdd_invar b\n\ngoal (1 subgoal):\n 1. robdd_invar_reduced b", "unfolding robdd_invar_def robdd_invar_ext_def"], ["proof (prove)\nusing this:\n  b \\<in> subrobdds_set {b} \\<and>\n  robdd_invar_ids {b} \\<and>\n  robdd_invar_vars_greater 0 b \\<and> robdd_invar_reduced b\n\ngoal (1 subgoal):\n 1. robdd_invar_reduced b", "by simp"], ["proof (state)\nthis:\n  robdd_invar_reduced b\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  robdd_invar_ids_leafs bs\n\ngoal (1 subgoal):\n 1. \\<And>x1a b1 x3 b2 bs n res_map rev_map.\n       \\<lbrakk>\\<And>bs n res_map rev_map.\n                   \\<lbrakk>rev_map_invar bs rev_map;\n                    restrict_map_invar f bs res_map;\n                    robdd_invar_ext bs n b1;\n                    subrobdds b1 \\<subseteq> bs\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>bs'.\n  insert (fst (robdd_restrict res_map rev_map f rv b1)) bs\n  \\<subseteq> bs' \\<and>\n  robdd_invar_ext bs' n\n   (fst (robdd_restrict res_map rev_map f rv b1)) \\<and>\n  restrict_map_invar f bs'\n   (fst (snd (robdd_restrict res_map rev_map f rv b1))) \\<and>\n  rev_map_invar bs'\n   (snd (snd (robdd_restrict res_map rev_map f rv b1))) \\<and>\n  (\\<forall>a.\n      robdd_\\<alpha> (fst (robdd_restrict res_map rev_map f rv b1)) a =\n      robdd_\\<alpha> b1 (a(rv := f)));\n        \\<And>bs n res_map rev_map.\n           \\<lbrakk>rev_map_invar bs rev_map;\n            restrict_map_invar f bs res_map; robdd_invar_ext bs n b2;\n            subrobdds b2 \\<subseteq> bs\\<rbrakk>\n           \\<Longrightarrow> \\<exists>bs'.\n                                insert\n                                 (fst (robdd_restrict res_map rev_map f rv\n  b2))\n                                 bs\n                                \\<subseteq> bs' \\<and>\n                                robdd_invar_ext bs' n\n                                 (fst (robdd_restrict res_map rev_map f rv\n  b2)) \\<and>\n                                restrict_map_invar f bs'\n                                 (fst (snd\n  (robdd_restrict res_map rev_map f rv b2))) \\<and>\n                                rev_map_invar bs'\n                                 (snd (snd\n  (robdd_restrict res_map rev_map f rv b2))) \\<and>\n                                (\\<forall>a.\n                                    robdd_\\<alpha>\n                                     (fst\n (robdd_restrict res_map rev_map f rv b2))\n                                     a =\n                                    robdd_\\<alpha> b2 (a(rv := f)));\n        rev_map_invar bs rev_map; restrict_map_invar f bs res_map;\n        robdd_invar_ext bs n (robdd_var x1a b1 x3 b2);\n        subrobdds (robdd_var x1a b1 x3 b2) \\<subseteq> bs\\<rbrakk>\n       \\<Longrightarrow> \\<exists>bs'.\n                            insert\n                             (fst (robdd_restrict res_map rev_map f rv\n                                    (robdd_var x1a b1 x3 b2)))\n                             bs\n                            \\<subseteq> bs' \\<and>\n                            robdd_invar_ext bs' n\n                             (fst (robdd_restrict res_map rev_map f rv\n                                    (robdd_var x1a b1 x3 b2))) \\<and>\n                            restrict_map_invar f bs'\n                             (fst (snd (robdd_restrict res_map rev_map f rv\n   (robdd_var x1a b1 x3 b2)))) \\<and>\n                            rev_map_invar bs'\n                             (snd (snd (robdd_restrict res_map rev_map f rv\n   (robdd_var x1a b1 x3 b2)))) \\<and>\n                            (\\<forall>a.\n                                robdd_\\<alpha>\n                                 (fst (robdd_restrict res_map rev_map f rv\n  (robdd_var x1a b1 x3 b2)))\n                                 a =\n                                robdd_\\<alpha> (robdd_var x1a b1 x3 b2)\n                                 (a(rv := f)))", "from b_invar"], ["proof (chain)\npicking this:\n  robdd_invar_ext bs n (robdd_var i l v r)", "have invars_greater: \"robdd_invar_vars_greater (Suc v) l\"  \"robdd_invar_vars_greater (Suc v) r\""], ["proof (prove)\nusing this:\n  robdd_invar_ext bs n (robdd_var i l v r)\n\ngoal (1 subgoal):\n 1. robdd_invar_vars_greater (Suc v) l &&&\n    robdd_invar_vars_greater (Suc v) r", "by (simp_all add: robdd_invar_ext_def)"], ["proof (state)\nthis:\n  robdd_invar_vars_greater (Suc v) l\n  robdd_invar_vars_greater (Suc v) r\n\ngoal (1 subgoal):\n 1. \\<And>x1a b1 x3 b2 bs n res_map rev_map.\n       \\<lbrakk>\\<And>bs n res_map rev_map.\n                   \\<lbrakk>rev_map_invar bs rev_map;\n                    restrict_map_invar f bs res_map;\n                    robdd_invar_ext bs n b1;\n                    subrobdds b1 \\<subseteq> bs\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>bs'.\n  insert (fst (robdd_restrict res_map rev_map f rv b1)) bs\n  \\<subseteq> bs' \\<and>\n  robdd_invar_ext bs' n\n   (fst (robdd_restrict res_map rev_map f rv b1)) \\<and>\n  restrict_map_invar f bs'\n   (fst (snd (robdd_restrict res_map rev_map f rv b1))) \\<and>\n  rev_map_invar bs'\n   (snd (snd (robdd_restrict res_map rev_map f rv b1))) \\<and>\n  (\\<forall>a.\n      robdd_\\<alpha> (fst (robdd_restrict res_map rev_map f rv b1)) a =\n      robdd_\\<alpha> b1 (a(rv := f)));\n        \\<And>bs n res_map rev_map.\n           \\<lbrakk>rev_map_invar bs rev_map;\n            restrict_map_invar f bs res_map; robdd_invar_ext bs n b2;\n            subrobdds b2 \\<subseteq> bs\\<rbrakk>\n           \\<Longrightarrow> \\<exists>bs'.\n                                insert\n                                 (fst (robdd_restrict res_map rev_map f rv\n  b2))\n                                 bs\n                                \\<subseteq> bs' \\<and>\n                                robdd_invar_ext bs' n\n                                 (fst (robdd_restrict res_map rev_map f rv\n  b2)) \\<and>\n                                restrict_map_invar f bs'\n                                 (fst (snd\n  (robdd_restrict res_map rev_map f rv b2))) \\<and>\n                                rev_map_invar bs'\n                                 (snd (snd\n  (robdd_restrict res_map rev_map f rv b2))) \\<and>\n                                (\\<forall>a.\n                                    robdd_\\<alpha>\n                                     (fst\n (robdd_restrict res_map rev_map f rv b2))\n                                     a =\n                                    robdd_\\<alpha> b2 (a(rv := f)));\n        rev_map_invar bs rev_map; restrict_map_invar f bs res_map;\n        robdd_invar_ext bs n (robdd_var x1a b1 x3 b2);\n        subrobdds (robdd_var x1a b1 x3 b2) \\<subseteq> bs\\<rbrakk>\n       \\<Longrightarrow> \\<exists>bs'.\n                            insert\n                             (fst (robdd_restrict res_map rev_map f rv\n                                    (robdd_var x1a b1 x3 b2)))\n                             bs\n                            \\<subseteq> bs' \\<and>\n                            robdd_invar_ext bs' n\n                             (fst (robdd_restrict res_map rev_map f rv\n                                    (robdd_var x1a b1 x3 b2))) \\<and>\n                            restrict_map_invar f bs'\n                             (fst (snd (robdd_restrict res_map rev_map f rv\n   (robdd_var x1a b1 x3 b2)))) \\<and>\n                            rev_map_invar bs'\n                             (snd (snd (robdd_restrict res_map rev_map f rv\n   (robdd_var x1a b1 x3 b2)))) \\<and>\n                            (\\<forall>a.\n                                robdd_\\<alpha>\n                                 (fst (robdd_restrict res_map rev_map f rv\n  (robdd_var x1a b1 x3 b2)))\n                                 a =\n                                robdd_\\<alpha> (robdd_var x1a b1 x3 b2)\n                                 (a(rv := f)))", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>bs'.\n       insert\n        (fst (robdd_restrict res_map rev_map f rv (robdd_var i l v r))) bs\n       \\<subseteq> bs' \\<and>\n       robdd_invar_ext bs' n\n        (fst (robdd_restrict res_map rev_map f rv\n               (robdd_var i l v r))) \\<and>\n       restrict_map_invar f bs'\n        (fst (snd (robdd_restrict res_map rev_map f rv\n                    (robdd_var i l v r)))) \\<and>\n       rev_map_invar bs'\n        (snd (snd (robdd_restrict res_map rev_map f rv\n                    (robdd_var i l v r)))) \\<and>\n       (\\<forall>a.\n           robdd_\\<alpha>\n            (fst (robdd_restrict res_map rev_map f rv (robdd_var i l v r)))\n            a =\n           robdd_\\<alpha> (robdd_var i l v r) (a(rv := f)))", "proof (cases \"rv < v\")"], ["proof (state)\ngoal (2 subgoals):\n 1. rv < v \\<Longrightarrow>\n    \\<exists>bs'.\n       insert\n        (fst (robdd_restrict res_map rev_map f rv (robdd_var i l v r))) bs\n       \\<subseteq> bs' \\<and>\n       robdd_invar_ext bs' n\n        (fst (robdd_restrict res_map rev_map f rv\n               (robdd_var i l v r))) \\<and>\n       restrict_map_invar f bs'\n        (fst (snd (robdd_restrict res_map rev_map f rv\n                    (robdd_var i l v r)))) \\<and>\n       rev_map_invar bs'\n        (snd (snd (robdd_restrict res_map rev_map f rv\n                    (robdd_var i l v r)))) \\<and>\n       (\\<forall>a.\n           robdd_\\<alpha>\n            (fst (robdd_restrict res_map rev_map f rv (robdd_var i l v r)))\n            a =\n           robdd_\\<alpha> (robdd_var i l v r) (a(rv := f)))\n 2. \\<not> rv < v \\<Longrightarrow>\n    \\<exists>bs'.\n       insert\n        (fst (robdd_restrict res_map rev_map f rv (robdd_var i l v r))) bs\n       \\<subseteq> bs' \\<and>\n       robdd_invar_ext bs' n\n        (fst (robdd_restrict res_map rev_map f rv\n               (robdd_var i l v r))) \\<and>\n       restrict_map_invar f bs'\n        (fst (snd (robdd_restrict res_map rev_map f rv\n                    (robdd_var i l v r)))) \\<and>\n       rev_map_invar bs'\n        (snd (snd (robdd_restrict res_map rev_map f rv\n                    (robdd_var i l v r)))) \\<and>\n       (\\<forall>a.\n           robdd_\\<alpha>\n            (fst (robdd_restrict res_map rev_map f rv (robdd_var i l v r)))\n            a =\n           robdd_\\<alpha> (robdd_var i l v r) (a(rv := f)))", "case True"], ["proof (state)\nthis:\n  rv < v\n\ngoal (2 subgoals):\n 1. rv < v \\<Longrightarrow>\n    \\<exists>bs'.\n       insert\n        (fst (robdd_restrict res_map rev_map f rv (robdd_var i l v r))) bs\n       \\<subseteq> bs' \\<and>\n       robdd_invar_ext bs' n\n        (fst (robdd_restrict res_map rev_map f rv\n               (robdd_var i l v r))) \\<and>\n       restrict_map_invar f bs'\n        (fst (snd (robdd_restrict res_map rev_map f rv\n                    (robdd_var i l v r)))) \\<and>\n       rev_map_invar bs'\n        (snd (snd (robdd_restrict res_map rev_map f rv\n                    (robdd_var i l v r)))) \\<and>\n       (\\<forall>a.\n           robdd_\\<alpha>\n            (fst (robdd_restrict res_map rev_map f rv (robdd_var i l v r)))\n            a =\n           robdd_\\<alpha> (robdd_var i l v r) (a(rv := f)))\n 2. \\<not> rv < v \\<Longrightarrow>\n    \\<exists>bs'.\n       insert\n        (fst (robdd_restrict res_map rev_map f rv (robdd_var i l v r))) bs\n       \\<subseteq> bs' \\<and>\n       robdd_invar_ext bs' n\n        (fst (robdd_restrict res_map rev_map f rv\n               (robdd_var i l v r))) \\<and>\n       restrict_map_invar f bs'\n        (fst (snd (robdd_restrict res_map rev_map f rv\n                    (robdd_var i l v r)))) \\<and>\n       rev_map_invar bs'\n        (snd (snd (robdd_restrict res_map rev_map f rv\n                    (robdd_var i l v r)))) \\<and>\n       (\\<forall>a.\n           robdd_\\<alpha>\n            (fst (robdd_restrict res_map rev_map f rv (robdd_var i l v r)))\n            a =\n           robdd_\\<alpha> (robdd_var i l v r) (a(rv := f)))", "note rv_less = this"], ["proof (state)\nthis:\n  rv < v\n\ngoal (2 subgoals):\n 1. rv < v \\<Longrightarrow>\n    \\<exists>bs'.\n       insert\n        (fst (robdd_restrict res_map rev_map f rv (robdd_var i l v r))) bs\n       \\<subseteq> bs' \\<and>\n       robdd_invar_ext bs' n\n        (fst (robdd_restrict res_map rev_map f rv\n               (robdd_var i l v r))) \\<and>\n       restrict_map_invar f bs'\n        (fst (snd (robdd_restrict res_map rev_map f rv\n                    (robdd_var i l v r)))) \\<and>\n       rev_map_invar bs'\n        (snd (snd (robdd_restrict res_map rev_map f rv\n                    (robdd_var i l v r)))) \\<and>\n       (\\<forall>a.\n           robdd_\\<alpha>\n            (fst (robdd_restrict res_map rev_map f rv (robdd_var i l v r)))\n            a =\n           robdd_\\<alpha> (robdd_var i l v r) (a(rv := f)))\n 2. \\<not> rv < v \\<Longrightarrow>\n    \\<exists>bs'.\n       insert\n        (fst (robdd_restrict res_map rev_map f rv (robdd_var i l v r))) bs\n       \\<subseteq> bs' \\<and>\n       robdd_invar_ext bs' n\n        (fst (robdd_restrict res_map rev_map f rv\n               (robdd_var i l v r))) \\<and>\n       restrict_map_invar f bs'\n        (fst (snd (robdd_restrict res_map rev_map f rv\n                    (robdd_var i l v r)))) \\<and>\n       rev_map_invar bs'\n        (snd (snd (robdd_restrict res_map rev_map f rv\n                    (robdd_var i l v r)))) \\<and>\n       (\\<forall>a.\n           robdd_\\<alpha>\n            (fst (robdd_restrict res_map rev_map f rv (robdd_var i l v r)))\n            a =\n           robdd_\\<alpha> (robdd_var i l v r) (a(rv := f)))", "have sem_simp :\n         \"\\<And>a bb. robdd_invar_vars_greater (Suc v) bb \\<Longrightarrow> \n                 robdd_\\<alpha> bb (\\<lambda>x. (x = rv \\<longrightarrow> f) \\<and> (x \\<noteq> rv \\<longrightarrow> a x)) = robdd_\\<alpha> bb a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a bb.\n       robdd_invar_vars_greater (Suc v) bb \\<Longrightarrow>\n       robdd_\\<alpha> bb\n        (\\<lambda>x.\n            (x = rv \\<longrightarrow> f) \\<and>\n            (x \\<noteq> rv \\<longrightarrow> a x)) =\n       robdd_\\<alpha> bb a", "apply (rule_tac robdd_\\<alpha>_invar_greater[of \"Suc v\"])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a bb.\n       robdd_invar_vars_greater (Suc v) bb \\<Longrightarrow>\n       robdd_invar_vars_greater (Suc v) bb\n 2. \\<And>a bb va.\n       \\<lbrakk>robdd_invar_vars_greater (Suc v) bb; Suc v \\<le> va\\<rbrakk>\n       \\<Longrightarrow> ((va = rv \\<longrightarrow> f) \\<and>\n                          (va \\<noteq> rv \\<longrightarrow> a va)) =\n                         a va", "apply (insert rv_less)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a bb.\n       \\<lbrakk>robdd_invar_vars_greater (Suc v) bb; rv < v\\<rbrakk>\n       \\<Longrightarrow> robdd_invar_vars_greater (Suc v) bb\n 2. \\<And>a bb va.\n       \\<lbrakk>robdd_invar_vars_greater (Suc v) bb; Suc v \\<le> va;\n        rv < v\\<rbrakk>\n       \\<Longrightarrow> ((va = rv \\<longrightarrow> f) \\<and>\n                          (va \\<noteq> rv \\<longrightarrow> a va)) =\n                         a va", "apply (simp_all)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  robdd_invar_vars_greater (Suc v) ?bb \\<Longrightarrow>\n  robdd_\\<alpha> ?bb\n   (\\<lambda>x.\n       (x = rv \\<longrightarrow> f) \\<and>\n       (x \\<noteq> rv \\<longrightarrow> ?a x)) =\n  robdd_\\<alpha> ?bb ?a\n\ngoal (2 subgoals):\n 1. rv < v \\<Longrightarrow>\n    \\<exists>bs'.\n       insert\n        (fst (robdd_restrict res_map rev_map f rv (robdd_var i l v r))) bs\n       \\<subseteq> bs' \\<and>\n       robdd_invar_ext bs' n\n        (fst (robdd_restrict res_map rev_map f rv\n               (robdd_var i l v r))) \\<and>\n       restrict_map_invar f bs'\n        (fst (snd (robdd_restrict res_map rev_map f rv\n                    (robdd_var i l v r)))) \\<and>\n       rev_map_invar bs'\n        (snd (snd (robdd_restrict res_map rev_map f rv\n                    (robdd_var i l v r)))) \\<and>\n       (\\<forall>a.\n           robdd_\\<alpha>\n            (fst (robdd_restrict res_map rev_map f rv (robdd_var i l v r)))\n            a =\n           robdd_\\<alpha> (robdd_var i l v r) (a(rv := f)))\n 2. \\<not> rv < v \\<Longrightarrow>\n    \\<exists>bs'.\n       insert\n        (fst (robdd_restrict res_map rev_map f rv (robdd_var i l v r))) bs\n       \\<subseteq> bs' \\<and>\n       robdd_invar_ext bs' n\n        (fst (robdd_restrict res_map rev_map f rv\n               (robdd_var i l v r))) \\<and>\n       restrict_map_invar f bs'\n        (fst (snd (robdd_restrict res_map rev_map f rv\n                    (robdd_var i l v r)))) \\<and>\n       rev_map_invar bs'\n        (snd (snd (robdd_restrict res_map rev_map f rv\n                    (robdd_var i l v r)))) \\<and>\n       (\\<forall>a.\n           robdd_\\<alpha>\n            (fst (robdd_restrict res_map rev_map f rv (robdd_var i l v r)))\n            a =\n           robdd_\\<alpha> (robdd_var i l v r) (a(rv := f)))", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>bs'.\n       insert\n        (fst (robdd_restrict res_map rev_map f rv (robdd_var i l v r))) bs\n       \\<subseteq> bs' \\<and>\n       robdd_invar_ext bs' n\n        (fst (robdd_restrict res_map rev_map f rv\n               (robdd_var i l v r))) \\<and>\n       restrict_map_invar f bs'\n        (fst (snd (robdd_restrict res_map rev_map f rv\n                    (robdd_var i l v r)))) \\<and>\n       rev_map_invar bs'\n        (snd (snd (robdd_restrict res_map rev_map f rv\n                    (robdd_var i l v r)))) \\<and>\n       (\\<forall>a.\n           robdd_\\<alpha>\n            (fst (robdd_restrict res_map rev_map f rv (robdd_var i l v r)))\n            a =\n           robdd_\\<alpha> (robdd_var i l v r) (a(rv := f)))", "using rv_less b_invar b_sub"], ["proof (prove)\nusing this:\n  rv < v\n  robdd_invar_ext bs n (robdd_var i l v r)\n  subrobdds (robdd_var i l v r) \\<subseteq> bs\n\ngoal (1 subgoal):\n 1. \\<exists>bs'.\n       insert\n        (fst (robdd_restrict res_map rev_map f rv (robdd_var i l v r))) bs\n       \\<subseteq> bs' \\<and>\n       robdd_invar_ext bs' n\n        (fst (robdd_restrict res_map rev_map f rv\n               (robdd_var i l v r))) \\<and>\n       restrict_map_invar f bs'\n        (fst (snd (robdd_restrict res_map rev_map f rv\n                    (robdd_var i l v r)))) \\<and>\n       rev_map_invar bs'\n        (snd (snd (robdd_restrict res_map rev_map f rv\n                    (robdd_var i l v r)))) \\<and>\n       (\\<forall>a.\n           robdd_\\<alpha>\n            (fst (robdd_restrict res_map rev_map f rv (robdd_var i l v r)))\n            a =\n           robdd_\\<alpha> (robdd_var i l v r) (a(rv := f)))", "apply (rule_tac exI[where x = bs])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>rv < v; robdd_invar_ext bs n (robdd_var i l v r);\n     subrobdds (robdd_var i l v r) \\<subseteq> bs\\<rbrakk>\n    \\<Longrightarrow> insert\n                       (fst (robdd_restrict res_map rev_map f rv\n                              (robdd_var i l v r)))\n                       bs\n                      \\<subseteq> bs \\<and>\n                      robdd_invar_ext bs n\n                       (fst (robdd_restrict res_map rev_map f rv\n                              (robdd_var i l v r))) \\<and>\n                      restrict_map_invar f bs\n                       (fst (snd (robdd_restrict res_map rev_map f rv\n                                   (robdd_var i l v r)))) \\<and>\n                      rev_map_invar bs\n                       (snd (snd (robdd_restrict res_map rev_map f rv\n                                   (robdd_var i l v r)))) \\<and>\n                      (\\<forall>a.\n                          robdd_\\<alpha>\n                           (fst (robdd_restrict res_map rev_map f rv\n                                  (robdd_var i l v r)))\n                           a =\n                          robdd_\\<alpha> (robdd_var i l v r) (a(rv := f)))", "apply (simp add: invar_rev_map invar_res_map robdd_restrict.simps)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>rv < v;\n     robdd_var i l v r \\<in> subrobdds_set bs \\<and>\n     \\<not> robdd_equiv l r \\<and>\n     n \\<le> v \\<and>\n     robdd_invar_ext bs (Suc v) l \\<and> robdd_invar_ext bs (Suc v) r;\n     robdd_var i l v r \\<in> bs \\<and>\n     subrobdds l \\<subseteq> bs \\<and> subrobdds r \\<subseteq> bs\\<rbrakk>\n    \\<Longrightarrow> \\<forall>a.\n                         (a v \\<longrightarrow>\n                          robdd_\\<alpha> l a =\n                          robdd_\\<alpha> l\n                           (\\<lambda>x.\n                               (x = rv \\<longrightarrow> f) \\<and>\n                               (x \\<noteq> rv \\<longrightarrow>\n                                a x))) \\<and>\n                         (\\<not> a v \\<longrightarrow>\n                          robdd_\\<alpha> r a =\n                          robdd_\\<alpha> r\n                           (\\<lambda>x.\n                               (x = rv \\<longrightarrow> f) \\<and>\n                               (x \\<noteq> rv \\<longrightarrow> a x)))", "apply (simp add: invars_greater sem_simp)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  \\<exists>bs'.\n     insert (fst (robdd_restrict res_map rev_map f rv (robdd_var i l v r)))\n      bs\n     \\<subseteq> bs' \\<and>\n     robdd_invar_ext bs' n\n      (fst (robdd_restrict res_map rev_map f rv (robdd_var i l v r))) \\<and>\n     restrict_map_invar f bs'\n      (fst (snd (robdd_restrict res_map rev_map f rv\n                  (robdd_var i l v r)))) \\<and>\n     rev_map_invar bs'\n      (snd (snd (robdd_restrict res_map rev_map f rv\n                  (robdd_var i l v r)))) \\<and>\n     (\\<forall>a.\n         robdd_\\<alpha>\n          (fst (robdd_restrict res_map rev_map f rv (robdd_var i l v r)))\n          a =\n         robdd_\\<alpha> (robdd_var i l v r) (a(rv := f)))\n\ngoal (1 subgoal):\n 1. \\<not> rv < v \\<Longrightarrow>\n    \\<exists>bs'.\n       insert\n        (fst (robdd_restrict res_map rev_map f rv (robdd_var i l v r))) bs\n       \\<subseteq> bs' \\<and>\n       robdd_invar_ext bs' n\n        (fst (robdd_restrict res_map rev_map f rv\n               (robdd_var i l v r))) \\<and>\n       restrict_map_invar f bs'\n        (fst (snd (robdd_restrict res_map rev_map f rv\n                    (robdd_var i l v r)))) \\<and>\n       rev_map_invar bs'\n        (snd (snd (robdd_restrict res_map rev_map f rv\n                    (robdd_var i l v r)))) \\<and>\n       (\\<forall>a.\n           robdd_\\<alpha>\n            (fst (robdd_restrict res_map rev_map f rv (robdd_var i l v r)))\n            a =\n           robdd_\\<alpha> (robdd_var i l v r) (a(rv := f)))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> rv < v \\<Longrightarrow>\n    \\<exists>bs'.\n       insert\n        (fst (robdd_restrict res_map rev_map f rv (robdd_var i l v r))) bs\n       \\<subseteq> bs' \\<and>\n       robdd_invar_ext bs' n\n        (fst (robdd_restrict res_map rev_map f rv\n               (robdd_var i l v r))) \\<and>\n       restrict_map_invar f bs'\n        (fst (snd (robdd_restrict res_map rev_map f rv\n                    (robdd_var i l v r)))) \\<and>\n       rev_map_invar bs'\n        (snd (snd (robdd_restrict res_map rev_map f rv\n                    (robdd_var i l v r)))) \\<and>\n       (\\<forall>a.\n           robdd_\\<alpha>\n            (fst (robdd_restrict res_map rev_map f rv (robdd_var i l v r)))\n            a =\n           robdd_\\<alpha> (robdd_var i l v r) (a(rv := f)))", "case False"], ["proof (state)\nthis:\n  \\<not> rv < v\n\ngoal (1 subgoal):\n 1. \\<not> rv < v \\<Longrightarrow>\n    \\<exists>bs'.\n       insert\n        (fst (robdd_restrict res_map rev_map f rv (robdd_var i l v r))) bs\n       \\<subseteq> bs' \\<and>\n       robdd_invar_ext bs' n\n        (fst (robdd_restrict res_map rev_map f rv\n               (robdd_var i l v r))) \\<and>\n       restrict_map_invar f bs'\n        (fst (snd (robdd_restrict res_map rev_map f rv\n                    (robdd_var i l v r)))) \\<and>\n       rev_map_invar bs'\n        (snd (snd (robdd_restrict res_map rev_map f rv\n                    (robdd_var i l v r)))) \\<and>\n       (\\<forall>a.\n           robdd_\\<alpha>\n            (fst (robdd_restrict res_map rev_map f rv (robdd_var i l v r)))\n            a =\n           robdd_\\<alpha> (robdd_var i l v r) (a(rv := f)))", "hence v_le: \"v \\<le> rv\""], ["proof (prove)\nusing this:\n  \\<not> rv < v\n\ngoal (1 subgoal):\n 1. v \\<le> rv", "by simp"], ["proof (state)\nthis:\n  v \\<le> rv\n\ngoal (1 subgoal):\n 1. \\<not> rv < v \\<Longrightarrow>\n    \\<exists>bs'.\n       insert\n        (fst (robdd_restrict res_map rev_map f rv (robdd_var i l v r))) bs\n       \\<subseteq> bs' \\<and>\n       robdd_invar_ext bs' n\n        (fst (robdd_restrict res_map rev_map f rv\n               (robdd_var i l v r))) \\<and>\n       restrict_map_invar f bs'\n        (fst (snd (robdd_restrict res_map rev_map f rv\n                    (robdd_var i l v r)))) \\<and>\n       rev_map_invar bs'\n        (snd (snd (robdd_restrict res_map rev_map f rv\n                    (robdd_var i l v r)))) \\<and>\n       (\\<forall>a.\n           robdd_\\<alpha>\n            (fst (robdd_restrict res_map rev_map f rv (robdd_var i l v r)))\n            a =\n           robdd_\\<alpha> (robdd_var i l v r) (a(rv := f)))", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>bs'.\n       insert\n        (fst (robdd_restrict res_map rev_map f rv (robdd_var i l v r))) bs\n       \\<subseteq> bs' \\<and>\n       robdd_invar_ext bs' n\n        (fst (robdd_restrict res_map rev_map f rv\n               (robdd_var i l v r))) \\<and>\n       restrict_map_invar f bs'\n        (fst (snd (robdd_restrict res_map rev_map f rv\n                    (robdd_var i l v r)))) \\<and>\n       rev_map_invar bs'\n        (snd (snd (robdd_restrict res_map rev_map f rv\n                    (robdd_var i l v r)))) \\<and>\n       (\\<forall>a.\n           robdd_\\<alpha>\n            (fst (robdd_restrict res_map rev_map f rv (robdd_var i l v r)))\n            a =\n           robdd_\\<alpha> (robdd_var i l v r) (a(rv := f)))", "proof (cases \"rv = v\")"], ["proof (state)\ngoal (2 subgoals):\n 1. rv = v \\<Longrightarrow>\n    \\<exists>bs'.\n       insert\n        (fst (robdd_restrict res_map rev_map f rv (robdd_var i l v r))) bs\n       \\<subseteq> bs' \\<and>\n       robdd_invar_ext bs' n\n        (fst (robdd_restrict res_map rev_map f rv\n               (robdd_var i l v r))) \\<and>\n       restrict_map_invar f bs'\n        (fst (snd (robdd_restrict res_map rev_map f rv\n                    (robdd_var i l v r)))) \\<and>\n       rev_map_invar bs'\n        (snd (snd (robdd_restrict res_map rev_map f rv\n                    (robdd_var i l v r)))) \\<and>\n       (\\<forall>a.\n           robdd_\\<alpha>\n            (fst (robdd_restrict res_map rev_map f rv (robdd_var i l v r)))\n            a =\n           robdd_\\<alpha> (robdd_var i l v r) (a(rv := f)))\n 2. rv \\<noteq> v \\<Longrightarrow>\n    \\<exists>bs'.\n       insert\n        (fst (robdd_restrict res_map rev_map f rv (robdd_var i l v r))) bs\n       \\<subseteq> bs' \\<and>\n       robdd_invar_ext bs' n\n        (fst (robdd_restrict res_map rev_map f rv\n               (robdd_var i l v r))) \\<and>\n       restrict_map_invar f bs'\n        (fst (snd (robdd_restrict res_map rev_map f rv\n                    (robdd_var i l v r)))) \\<and>\n       rev_map_invar bs'\n        (snd (snd (robdd_restrict res_map rev_map f rv\n                    (robdd_var i l v r)))) \\<and>\n       (\\<forall>a.\n           robdd_\\<alpha>\n            (fst (robdd_restrict res_map rev_map f rv (robdd_var i l v r)))\n            a =\n           robdd_\\<alpha> (robdd_var i l v r) (a(rv := f)))", "case True"], ["proof (state)\nthis:\n  rv = v\n\ngoal (2 subgoals):\n 1. rv = v \\<Longrightarrow>\n    \\<exists>bs'.\n       insert\n        (fst (robdd_restrict res_map rev_map f rv (robdd_var i l v r))) bs\n       \\<subseteq> bs' \\<and>\n       robdd_invar_ext bs' n\n        (fst (robdd_restrict res_map rev_map f rv\n               (robdd_var i l v r))) \\<and>\n       restrict_map_invar f bs'\n        (fst (snd (robdd_restrict res_map rev_map f rv\n                    (robdd_var i l v r)))) \\<and>\n       rev_map_invar bs'\n        (snd (snd (robdd_restrict res_map rev_map f rv\n                    (robdd_var i l v r)))) \\<and>\n       (\\<forall>a.\n           robdd_\\<alpha>\n            (fst (robdd_restrict res_map rev_map f rv (robdd_var i l v r)))\n            a =\n           robdd_\\<alpha> (robdd_var i l v r) (a(rv := f)))\n 2. rv \\<noteq> v \\<Longrightarrow>\n    \\<exists>bs'.\n       insert\n        (fst (robdd_restrict res_map rev_map f rv (robdd_var i l v r))) bs\n       \\<subseteq> bs' \\<and>\n       robdd_invar_ext bs' n\n        (fst (robdd_restrict res_map rev_map f rv\n               (robdd_var i l v r))) \\<and>\n       restrict_map_invar f bs'\n        (fst (snd (robdd_restrict res_map rev_map f rv\n                    (robdd_var i l v r)))) \\<and>\n       rev_map_invar bs'\n        (snd (snd (robdd_restrict res_map rev_map f rv\n                    (robdd_var i l v r)))) \\<and>\n       (\\<forall>a.\n           robdd_\\<alpha>\n            (fst (robdd_restrict res_map rev_map f rv (robdd_var i l v r)))\n            a =\n           robdd_\\<alpha> (robdd_var i l v r) (a(rv := f)))", "note rv_eq [simp] = this"], ["proof (state)\nthis:\n  rv = v\n\ngoal (2 subgoals):\n 1. rv = v \\<Longrightarrow>\n    \\<exists>bs'.\n       insert\n        (fst (robdd_restrict res_map rev_map f rv (robdd_var i l v r))) bs\n       \\<subseteq> bs' \\<and>\n       robdd_invar_ext bs' n\n        (fst (robdd_restrict res_map rev_map f rv\n               (robdd_var i l v r))) \\<and>\n       restrict_map_invar f bs'\n        (fst (snd (robdd_restrict res_map rev_map f rv\n                    (robdd_var i l v r)))) \\<and>\n       rev_map_invar bs'\n        (snd (snd (robdd_restrict res_map rev_map f rv\n                    (robdd_var i l v r)))) \\<and>\n       (\\<forall>a.\n           robdd_\\<alpha>\n            (fst (robdd_restrict res_map rev_map f rv (robdd_var i l v r)))\n            a =\n           robdd_\\<alpha> (robdd_var i l v r) (a(rv := f)))\n 2. rv \\<noteq> v \\<Longrightarrow>\n    \\<exists>bs'.\n       insert\n        (fst (robdd_restrict res_map rev_map f rv (robdd_var i l v r))) bs\n       \\<subseteq> bs' \\<and>\n       robdd_invar_ext bs' n\n        (fst (robdd_restrict res_map rev_map f rv\n               (robdd_var i l v r))) \\<and>\n       restrict_map_invar f bs'\n        (fst (snd (robdd_restrict res_map rev_map f rv\n                    (robdd_var i l v r)))) \\<and>\n       rev_map_invar bs'\n        (snd (snd (robdd_restrict res_map rev_map f rv\n                    (robdd_var i l v r)))) \\<and>\n       (\\<forall>a.\n           robdd_\\<alpha>\n            (fst (robdd_restrict res_map rev_map f rv (robdd_var i l v r)))\n            a =\n           robdd_\\<alpha> (robdd_var i l v r) (a(rv := f)))", "from invars_greater(2)"], ["proof (chain)\npicking this:\n  robdd_invar_vars_greater (Suc v) r", "have r_simp :\n           \"\\<And>a. robdd_\\<alpha> r (\\<lambda>x. x \\<noteq> v \\<and> a x) = robdd_\\<alpha> r a\""], ["proof (prove)\nusing this:\n  robdd_invar_vars_greater (Suc v) r\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       robdd_\\<alpha> r (\\<lambda>x. x \\<noteq> v \\<and> a x) =\n       robdd_\\<alpha> r a", "apply (rule_tac robdd_\\<alpha>_invar_greater[of \"Suc v\"])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a.\n       robdd_invar_vars_greater (Suc v) r \\<Longrightarrow>\n       robdd_invar_vars_greater (Suc v) r\n 2. \\<And>a va.\n       \\<lbrakk>robdd_invar_vars_greater (Suc v) r; Suc v \\<le> va\\<rbrakk>\n       \\<Longrightarrow> (va \\<noteq> v \\<and> a va) = a va", "apply (simp_all)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  robdd_\\<alpha> r (\\<lambda>x. x \\<noteq> v \\<and> ?a x) =\n  robdd_\\<alpha> r ?a\n\ngoal (2 subgoals):\n 1. rv = v \\<Longrightarrow>\n    \\<exists>bs'.\n       insert\n        (fst (robdd_restrict res_map rev_map f rv (robdd_var i l v r))) bs\n       \\<subseteq> bs' \\<and>\n       robdd_invar_ext bs' n\n        (fst (robdd_restrict res_map rev_map f rv\n               (robdd_var i l v r))) \\<and>\n       restrict_map_invar f bs'\n        (fst (snd (robdd_restrict res_map rev_map f rv\n                    (robdd_var i l v r)))) \\<and>\n       rev_map_invar bs'\n        (snd (snd (robdd_restrict res_map rev_map f rv\n                    (robdd_var i l v r)))) \\<and>\n       (\\<forall>a.\n           robdd_\\<alpha>\n            (fst (robdd_restrict res_map rev_map f rv (robdd_var i l v r)))\n            a =\n           robdd_\\<alpha> (robdd_var i l v r) (a(rv := f)))\n 2. rv \\<noteq> v \\<Longrightarrow>\n    \\<exists>bs'.\n       insert\n        (fst (robdd_restrict res_map rev_map f rv (robdd_var i l v r))) bs\n       \\<subseteq> bs' \\<and>\n       robdd_invar_ext bs' n\n        (fst (robdd_restrict res_map rev_map f rv\n               (robdd_var i l v r))) \\<and>\n       restrict_map_invar f bs'\n        (fst (snd (robdd_restrict res_map rev_map f rv\n                    (robdd_var i l v r)))) \\<and>\n       rev_map_invar bs'\n        (snd (snd (robdd_restrict res_map rev_map f rv\n                    (robdd_var i l v r)))) \\<and>\n       (\\<forall>a.\n           robdd_\\<alpha>\n            (fst (robdd_restrict res_map rev_map f rv (robdd_var i l v r)))\n            a =\n           robdd_\\<alpha> (robdd_var i l v r) (a(rv := f)))", "from invars_greater(1)"], ["proof (chain)\npicking this:\n  robdd_invar_vars_greater (Suc v) l", "have l_simp :\n           \"\\<And>a. robdd_\\<alpha> l (\\<lambda>x. (x \\<noteq> v \\<longrightarrow> a x)) = robdd_\\<alpha> l a\""], ["proof (prove)\nusing this:\n  robdd_invar_vars_greater (Suc v) l\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       robdd_\\<alpha> l (\\<lambda>x. x \\<noteq> v \\<longrightarrow> a x) =\n       robdd_\\<alpha> l a", "apply (rule_tac robdd_\\<alpha>_invar_greater[of \"Suc v\"])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a.\n       robdd_invar_vars_greater (Suc v) l \\<Longrightarrow>\n       robdd_invar_vars_greater (Suc v) l\n 2. \\<And>a va.\n       \\<lbrakk>robdd_invar_vars_greater (Suc v) l; Suc v \\<le> va\\<rbrakk>\n       \\<Longrightarrow> (va \\<noteq> v \\<longrightarrow> a va) = a va", "apply (simp_all)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  robdd_\\<alpha> l (\\<lambda>x. x \\<noteq> v \\<longrightarrow> ?a x) =\n  robdd_\\<alpha> l ?a\n\ngoal (2 subgoals):\n 1. rv = v \\<Longrightarrow>\n    \\<exists>bs'.\n       insert\n        (fst (robdd_restrict res_map rev_map f rv (robdd_var i l v r))) bs\n       \\<subseteq> bs' \\<and>\n       robdd_invar_ext bs' n\n        (fst (robdd_restrict res_map rev_map f rv\n               (robdd_var i l v r))) \\<and>\n       restrict_map_invar f bs'\n        (fst (snd (robdd_restrict res_map rev_map f rv\n                    (robdd_var i l v r)))) \\<and>\n       rev_map_invar bs'\n        (snd (snd (robdd_restrict res_map rev_map f rv\n                    (robdd_var i l v r)))) \\<and>\n       (\\<forall>a.\n           robdd_\\<alpha>\n            (fst (robdd_restrict res_map rev_map f rv (robdd_var i l v r)))\n            a =\n           robdd_\\<alpha> (robdd_var i l v r) (a(rv := f)))\n 2. rv \\<noteq> v \\<Longrightarrow>\n    \\<exists>bs'.\n       insert\n        (fst (robdd_restrict res_map rev_map f rv (robdd_var i l v r))) bs\n       \\<subseteq> bs' \\<and>\n       robdd_invar_ext bs' n\n        (fst (robdd_restrict res_map rev_map f rv\n               (robdd_var i l v r))) \\<and>\n       restrict_map_invar f bs'\n        (fst (snd (robdd_restrict res_map rev_map f rv\n                    (robdd_var i l v r)))) \\<and>\n       rev_map_invar bs'\n        (snd (snd (robdd_restrict res_map rev_map f rv\n                    (robdd_var i l v r)))) \\<and>\n       (\\<forall>a.\n           robdd_\\<alpha>\n            (fst (robdd_restrict res_map rev_map f rv (robdd_var i l v r)))\n            a =\n           robdd_\\<alpha> (robdd_var i l v r) (a(rv := f)))", "from b_invar robdd_invar_ext_weaken_var[of bs \"Suc v\" _ n]"], ["proof (chain)\npicking this:\n  robdd_invar_ext bs n (robdd_var i l v r)\n  \\<lbrakk>robdd_invar_ext bs (Suc v) ?b; n \\<le> Suc v\\<rbrakk>\n  \\<Longrightarrow> robdd_invar_ext bs n ?b", "have \"robdd_invar_ext bs n l\" \"robdd_invar_ext bs n r\""], ["proof (prove)\nusing this:\n  robdd_invar_ext bs n (robdd_var i l v r)\n  \\<lbrakk>robdd_invar_ext bs (Suc v) ?b; n \\<le> Suc v\\<rbrakk>\n  \\<Longrightarrow> robdd_invar_ext bs n ?b\n\ngoal (1 subgoal):\n 1. robdd_invar_ext bs n l &&& robdd_invar_ext bs n r", "by simp_all"], ["proof (state)\nthis:\n  robdd_invar_ext bs n l\n  robdd_invar_ext bs n r\n\ngoal (2 subgoals):\n 1. rv = v \\<Longrightarrow>\n    \\<exists>bs'.\n       insert\n        (fst (robdd_restrict res_map rev_map f rv (robdd_var i l v r))) bs\n       \\<subseteq> bs' \\<and>\n       robdd_invar_ext bs' n\n        (fst (robdd_restrict res_map rev_map f rv\n               (robdd_var i l v r))) \\<and>\n       restrict_map_invar f bs'\n        (fst (snd (robdd_restrict res_map rev_map f rv\n                    (robdd_var i l v r)))) \\<and>\n       rev_map_invar bs'\n        (snd (snd (robdd_restrict res_map rev_map f rv\n                    (robdd_var i l v r)))) \\<and>\n       (\\<forall>a.\n           robdd_\\<alpha>\n            (fst (robdd_restrict res_map rev_map f rv (robdd_var i l v r)))\n            a =\n           robdd_\\<alpha> (robdd_var i l v r) (a(rv := f)))\n 2. rv \\<noteq> v \\<Longrightarrow>\n    \\<exists>bs'.\n       insert\n        (fst (robdd_restrict res_map rev_map f rv (robdd_var i l v r))) bs\n       \\<subseteq> bs' \\<and>\n       robdd_invar_ext bs' n\n        (fst (robdd_restrict res_map rev_map f rv\n               (robdd_var i l v r))) \\<and>\n       restrict_map_invar f bs'\n        (fst (snd (robdd_restrict res_map rev_map f rv\n                    (robdd_var i l v r)))) \\<and>\n       rev_map_invar bs'\n        (snd (snd (robdd_restrict res_map rev_map f rv\n                    (robdd_var i l v r)))) \\<and>\n       (\\<forall>a.\n           robdd_\\<alpha>\n            (fst (robdd_restrict res_map rev_map f rv (robdd_var i l v r)))\n            a =\n           robdd_\\<alpha> (robdd_var i l v r) (a(rv := f)))", "thus ?thesis"], ["proof (prove)\nusing this:\n  robdd_invar_ext bs n l\n  robdd_invar_ext bs n r\n\ngoal (1 subgoal):\n 1. \\<exists>bs'.\n       insert\n        (fst (robdd_restrict res_map rev_map f rv (robdd_var i l v r))) bs\n       \\<subseteq> bs' \\<and>\n       robdd_invar_ext bs' n\n        (fst (robdd_restrict res_map rev_map f rv\n               (robdd_var i l v r))) \\<and>\n       restrict_map_invar f bs'\n        (fst (snd (robdd_restrict res_map rev_map f rv\n                    (robdd_var i l v r)))) \\<and>\n       rev_map_invar bs'\n        (snd (snd (robdd_restrict res_map rev_map f rv\n                    (robdd_var i l v r)))) \\<and>\n       (\\<forall>a.\n           robdd_\\<alpha>\n            (fst (robdd_restrict res_map rev_map f rv (robdd_var i l v r)))\n            a =\n           robdd_\\<alpha> (robdd_var i l v r) (a(rv := f)))", "using b_invar b_sub"], ["proof (prove)\nusing this:\n  robdd_invar_ext bs n l\n  robdd_invar_ext bs n r\n  robdd_invar_ext bs n (robdd_var i l v r)\n  subrobdds (robdd_var i l v r) \\<subseteq> bs\n\ngoal (1 subgoal):\n 1. \\<exists>bs'.\n       insert\n        (fst (robdd_restrict res_map rev_map f rv (robdd_var i l v r))) bs\n       \\<subseteq> bs' \\<and>\n       robdd_invar_ext bs' n\n        (fst (robdd_restrict res_map rev_map f rv\n               (robdd_var i l v r))) \\<and>\n       restrict_map_invar f bs'\n        (fst (snd (robdd_restrict res_map rev_map f rv\n                    (robdd_var i l v r)))) \\<and>\n       rev_map_invar bs'\n        (snd (snd (robdd_restrict res_map rev_map f rv\n                    (robdd_var i l v r)))) \\<and>\n       (\\<forall>a.\n           robdd_\\<alpha>\n            (fst (robdd_restrict res_map rev_map f rv (robdd_var i l v r)))\n            a =\n           robdd_\\<alpha> (robdd_var i l v r) (a(rv := f)))", "supply map_upd_eq_restrict[simp]"], ["proof (prove)\nusing this:\n  robdd_invar_ext bs n l\n  robdd_invar_ext bs n r\n  robdd_invar_ext bs n (robdd_var i l v r)\n  subrobdds (robdd_var i l v r) \\<subseteq> bs\n\ngoal (1 subgoal):\n 1. \\<exists>bs'.\n       insert\n        (fst (robdd_restrict res_map rev_map f rv (robdd_var i l v r))) bs\n       \\<subseteq> bs' \\<and>\n       robdd_invar_ext bs' n\n        (fst (robdd_restrict res_map rev_map f rv\n               (robdd_var i l v r))) \\<and>\n       restrict_map_invar f bs'\n        (fst (snd (robdd_restrict res_map rev_map f rv\n                    (robdd_var i l v r)))) \\<and>\n       rev_map_invar bs'\n        (snd (snd (robdd_restrict res_map rev_map f rv\n                    (robdd_var i l v r)))) \\<and>\n       (\\<forall>a.\n           robdd_\\<alpha>\n            (fst (robdd_restrict res_map rev_map f rv (robdd_var i l v r)))\n            a =\n           robdd_\\<alpha> (robdd_var i l v r) (a(rv := f)))", "apply (rule_tac exI[where x = bs])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>robdd_invar_ext bs n l; robdd_invar_ext bs n r;\n     robdd_invar_ext bs n (robdd_var i l v r);\n     subrobdds (robdd_var i l v r) \\<subseteq> bs\\<rbrakk>\n    \\<Longrightarrow> insert\n                       (fst (robdd_restrict res_map rev_map f rv\n                              (robdd_var i l v r)))\n                       bs\n                      \\<subseteq> bs \\<and>\n                      robdd_invar_ext bs n\n                       (fst (robdd_restrict res_map rev_map f rv\n                              (robdd_var i l v r))) \\<and>\n                      restrict_map_invar f bs\n                       (fst (snd (robdd_restrict res_map rev_map f rv\n                                   (robdd_var i l v r)))) \\<and>\n                      rev_map_invar bs\n                       (snd (snd (robdd_restrict res_map rev_map f rv\n                                   (robdd_var i l v r)))) \\<and>\n                      (\\<forall>a.\n                          robdd_\\<alpha>\n                           (fst (robdd_restrict res_map rev_map f rv\n                                  (robdd_var i l v r)))\n                           a =\n                          robdd_\\<alpha> (robdd_var i l v r) (a(rv := f)))", "apply (simp add: invar_rev_map invar_res_map robdd_restrict.simps)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>robdd_invar_ext bs n l; robdd_invar_ext bs n r;\n     robdd_var i l v r \\<in> subrobdds_set bs \\<and>\n     \\<not> robdd_equiv l r \\<and>\n     n \\<le> v \\<and>\n     robdd_invar_ext bs (Suc v) l \\<and> robdd_invar_ext bs (Suc v) r;\n     robdd_var i l v r \\<in> bs \\<and>\n     subrobdds l \\<subseteq> bs \\<and> subrobdds r \\<subseteq> bs\\<rbrakk>\n    \\<Longrightarrow> (f \\<longrightarrow>\n                       l \\<in> bs \\<and>\n                       (\\<forall>a.\n                           robdd_\\<alpha> l a =\n                           robdd_\\<alpha> l\n                            (\\<lambda>x.\n                                x \\<noteq> v \\<longrightarrow> a x))) \\<and>\n                      (\\<not> f \\<longrightarrow>\n                       r \\<in> bs \\<and>\n                       (\\<forall>a.\n                           robdd_\\<alpha> r a =\n                           robdd_\\<alpha> r\n                            (\\<lambda>x. x \\<noteq> v \\<and> a x)))", "apply (simp add: l_simp r_simp subset_iff)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  \\<exists>bs'.\n     insert (fst (robdd_restrict res_map rev_map f rv (robdd_var i l v r)))\n      bs\n     \\<subseteq> bs' \\<and>\n     robdd_invar_ext bs' n\n      (fst (robdd_restrict res_map rev_map f rv (robdd_var i l v r))) \\<and>\n     restrict_map_invar f bs'\n      (fst (snd (robdd_restrict res_map rev_map f rv\n                  (robdd_var i l v r)))) \\<and>\n     rev_map_invar bs'\n      (snd (snd (robdd_restrict res_map rev_map f rv\n                  (robdd_var i l v r)))) \\<and>\n     (\\<forall>a.\n         robdd_\\<alpha>\n          (fst (robdd_restrict res_map rev_map f rv (robdd_var i l v r)))\n          a =\n         robdd_\\<alpha> (robdd_var i l v r) (a(rv := f)))\n\ngoal (1 subgoal):\n 1. rv \\<noteq> v \\<Longrightarrow>\n    \\<exists>bs'.\n       insert\n        (fst (robdd_restrict res_map rev_map f rv (robdd_var i l v r))) bs\n       \\<subseteq> bs' \\<and>\n       robdd_invar_ext bs' n\n        (fst (robdd_restrict res_map rev_map f rv\n               (robdd_var i l v r))) \\<and>\n       restrict_map_invar f bs'\n        (fst (snd (robdd_restrict res_map rev_map f rv\n                    (robdd_var i l v r)))) \\<and>\n       rev_map_invar bs'\n        (snd (snd (robdd_restrict res_map rev_map f rv\n                    (robdd_var i l v r)))) \\<and>\n       (\\<forall>a.\n           robdd_\\<alpha>\n            (fst (robdd_restrict res_map rev_map f rv (robdd_var i l v r)))\n            a =\n           robdd_\\<alpha> (robdd_var i l v r) (a(rv := f)))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. rv \\<noteq> v \\<Longrightarrow>\n    \\<exists>bs'.\n       insert\n        (fst (robdd_restrict res_map rev_map f rv (robdd_var i l v r))) bs\n       \\<subseteq> bs' \\<and>\n       robdd_invar_ext bs' n\n        (fst (robdd_restrict res_map rev_map f rv\n               (robdd_var i l v r))) \\<and>\n       restrict_map_invar f bs'\n        (fst (snd (robdd_restrict res_map rev_map f rv\n                    (robdd_var i l v r)))) \\<and>\n       rev_map_invar bs'\n        (snd (snd (robdd_restrict res_map rev_map f rv\n                    (robdd_var i l v r)))) \\<and>\n       (\\<forall>a.\n           robdd_\\<alpha>\n            (fst (robdd_restrict res_map rev_map f rv (robdd_var i l v r)))\n            a =\n           robdd_\\<alpha> (robdd_var i l v r) (a(rv := f)))", "case False"], ["proof (state)\nthis:\n  rv \\<noteq> v\n\ngoal (1 subgoal):\n 1. rv \\<noteq> v \\<Longrightarrow>\n    \\<exists>bs'.\n       insert\n        (fst (robdd_restrict res_map rev_map f rv (robdd_var i l v r))) bs\n       \\<subseteq> bs' \\<and>\n       robdd_invar_ext bs' n\n        (fst (robdd_restrict res_map rev_map f rv\n               (robdd_var i l v r))) \\<and>\n       restrict_map_invar f bs'\n        (fst (snd (robdd_restrict res_map rev_map f rv\n                    (robdd_var i l v r)))) \\<and>\n       rev_map_invar bs'\n        (snd (snd (robdd_restrict res_map rev_map f rv\n                    (robdd_var i l v r)))) \\<and>\n       (\\<forall>a.\n           robdd_\\<alpha>\n            (fst (robdd_restrict res_map rev_map f rv (robdd_var i l v r)))\n            a =\n           robdd_\\<alpha> (robdd_var i l v r) (a(rv := f)))", "with v_le"], ["proof (chain)\npicking this:\n  v \\<le> rv\n  rv \\<noteq> v", "have v_less: \"v < rv\""], ["proof (prove)\nusing this:\n  v \\<le> rv\n  rv \\<noteq> v\n\ngoal (1 subgoal):\n 1. v < rv", "by simp"], ["proof (state)\nthis:\n  v < rv\n\ngoal (1 subgoal):\n 1. rv \\<noteq> v \\<Longrightarrow>\n    \\<exists>bs'.\n       insert\n        (fst (robdd_restrict res_map rev_map f rv (robdd_var i l v r))) bs\n       \\<subseteq> bs' \\<and>\n       robdd_invar_ext bs' n\n        (fst (robdd_restrict res_map rev_map f rv\n               (robdd_var i l v r))) \\<and>\n       restrict_map_invar f bs'\n        (fst (snd (robdd_restrict res_map rev_map f rv\n                    (robdd_var i l v r)))) \\<and>\n       rev_map_invar bs'\n        (snd (snd (robdd_restrict res_map rev_map f rv\n                    (robdd_var i l v r)))) \\<and>\n       (\\<forall>a.\n           robdd_\\<alpha>\n            (fst (robdd_restrict res_map rev_map f rv (robdd_var i l v r)))\n            a =\n           robdd_\\<alpha> (robdd_var i l v r) (a(rv := f)))", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>bs'.\n       insert\n        (fst (robdd_restrict res_map rev_map f rv (robdd_var i l v r))) bs\n       \\<subseteq> bs' \\<and>\n       robdd_invar_ext bs' n\n        (fst (robdd_restrict res_map rev_map f rv\n               (robdd_var i l v r))) \\<and>\n       restrict_map_invar f bs'\n        (fst (snd (robdd_restrict res_map rev_map f rv\n                    (robdd_var i l v r)))) \\<and>\n       rev_map_invar bs'\n        (snd (snd (robdd_restrict res_map rev_map f rv\n                    (robdd_var i l v r)))) \\<and>\n       (\\<forall>a.\n           robdd_\\<alpha>\n            (fst (robdd_restrict res_map rev_map f rv (robdd_var i l v r)))\n            a =\n           robdd_\\<alpha> (robdd_var i l v r) (a(rv := f)))", "proof (cases \"c_lookup (rv, i) res_map\")"], ["proof (state)\ngoal (2 subgoals):\n 1. c_lookup (rv, i) res_map = None \\<Longrightarrow>\n    \\<exists>bs'.\n       insert\n        (fst (robdd_restrict res_map rev_map f rv (robdd_var i l v r))) bs\n       \\<subseteq> bs' \\<and>\n       robdd_invar_ext bs' n\n        (fst (robdd_restrict res_map rev_map f rv\n               (robdd_var i l v r))) \\<and>\n       restrict_map_invar f bs'\n        (fst (snd (robdd_restrict res_map rev_map f rv\n                    (robdd_var i l v r)))) \\<and>\n       rev_map_invar bs'\n        (snd (snd (robdd_restrict res_map rev_map f rv\n                    (robdd_var i l v r)))) \\<and>\n       (\\<forall>a.\n           robdd_\\<alpha>\n            (fst (robdd_restrict res_map rev_map f rv (robdd_var i l v r)))\n            a =\n           robdd_\\<alpha> (robdd_var i l v r) (a(rv := f)))\n 2. \\<And>a.\n       c_lookup (rv, i) res_map = Some a \\<Longrightarrow>\n       \\<exists>bs'.\n          insert\n           (fst (robdd_restrict res_map rev_map f rv (robdd_var i l v r)))\n           bs\n          \\<subseteq> bs' \\<and>\n          robdd_invar_ext bs' n\n           (fst (robdd_restrict res_map rev_map f rv\n                  (robdd_var i l v r))) \\<and>\n          restrict_map_invar f bs'\n           (fst (snd (robdd_restrict res_map rev_map f rv\n                       (robdd_var i l v r)))) \\<and>\n          rev_map_invar bs'\n           (snd (snd (robdd_restrict res_map rev_map f rv\n                       (robdd_var i l v r)))) \\<and>\n          (\\<forall>a.\n              robdd_\\<alpha>\n               (fst (robdd_restrict res_map rev_map f rv\n                      (robdd_var i l v r)))\n               a =\n              robdd_\\<alpha> (robdd_var i l v r) (a(rv := f)))", "case (Some b3)"], ["proof (state)\nthis:\n  c_lookup (rv, i) res_map = Some b3\n\ngoal (2 subgoals):\n 1. c_lookup (rv, i) res_map = None \\<Longrightarrow>\n    \\<exists>bs'.\n       insert\n        (fst (robdd_restrict res_map rev_map f rv (robdd_var i l v r))) bs\n       \\<subseteq> bs' \\<and>\n       robdd_invar_ext bs' n\n        (fst (robdd_restrict res_map rev_map f rv\n               (robdd_var i l v r))) \\<and>\n       restrict_map_invar f bs'\n        (fst (snd (robdd_restrict res_map rev_map f rv\n                    (robdd_var i l v r)))) \\<and>\n       rev_map_invar bs'\n        (snd (snd (robdd_restrict res_map rev_map f rv\n                    (robdd_var i l v r)))) \\<and>\n       (\\<forall>a.\n           robdd_\\<alpha>\n            (fst (robdd_restrict res_map rev_map f rv (robdd_var i l v r)))\n            a =\n           robdd_\\<alpha> (robdd_var i l v r) (a(rv := f)))\n 2. \\<And>a.\n       c_lookup (rv, i) res_map = Some a \\<Longrightarrow>\n       \\<exists>bs'.\n          insert\n           (fst (robdd_restrict res_map rev_map f rv (robdd_var i l v r)))\n           bs\n          \\<subseteq> bs' \\<and>\n          robdd_invar_ext bs' n\n           (fst (robdd_restrict res_map rev_map f rv\n                  (robdd_var i l v r))) \\<and>\n          restrict_map_invar f bs'\n           (fst (snd (robdd_restrict res_map rev_map f rv\n                       (robdd_var i l v r)))) \\<and>\n          rev_map_invar bs'\n           (snd (snd (robdd_restrict res_map rev_map f rv\n                       (robdd_var i l v r)))) \\<and>\n          (\\<forall>a.\n              robdd_\\<alpha>\n               (fst (robdd_restrict res_map rev_map f rv\n                      (robdd_var i l v r)))\n               a =\n              robdd_\\<alpha> (robdd_var i l v r) (a(rv := f)))", "note lookup_eq = this"], ["proof (state)\nthis:\n  c_lookup (rv, i) res_map = Some b3\n\ngoal (2 subgoals):\n 1. c_lookup (rv, i) res_map = None \\<Longrightarrow>\n    \\<exists>bs'.\n       insert\n        (fst (robdd_restrict res_map rev_map f rv (robdd_var i l v r))) bs\n       \\<subseteq> bs' \\<and>\n       robdd_invar_ext bs' n\n        (fst (robdd_restrict res_map rev_map f rv\n               (robdd_var i l v r))) \\<and>\n       restrict_map_invar f bs'\n        (fst (snd (robdd_restrict res_map rev_map f rv\n                    (robdd_var i l v r)))) \\<and>\n       rev_map_invar bs'\n        (snd (snd (robdd_restrict res_map rev_map f rv\n                    (robdd_var i l v r)))) \\<and>\n       (\\<forall>a.\n           robdd_\\<alpha>\n            (fst (robdd_restrict res_map rev_map f rv (robdd_var i l v r)))\n            a =\n           robdd_\\<alpha> (robdd_var i l v r) (a(rv := f)))\n 2. \\<And>a.\n       c_lookup (rv, i) res_map = Some a \\<Longrightarrow>\n       \\<exists>bs'.\n          insert\n           (fst (robdd_restrict res_map rev_map f rv (robdd_var i l v r)))\n           bs\n          \\<subseteq> bs' \\<and>\n          robdd_invar_ext bs' n\n           (fst (robdd_restrict res_map rev_map f rv\n                  (robdd_var i l v r))) \\<and>\n          restrict_map_invar f bs'\n           (fst (snd (robdd_restrict res_map rev_map f rv\n                       (robdd_var i l v r)))) \\<and>\n          rev_map_invar bs'\n           (snd (snd (robdd_restrict res_map rev_map f rv\n                       (robdd_var i l v r)))) \\<and>\n          (\\<forall>a.\n              robdd_\\<alpha>\n               (fst (robdd_restrict res_map rev_map f rv\n                      (robdd_var i l v r)))\n               a =\n              robdd_\\<alpha> (robdd_var i l v r) (a(rv := f)))", "from robdd_id_map_properties[of bs] invar_ids_equal_bs"], ["proof (chain)\npicking this:\n  robdd_invar_ids_equal bs = robdd_id_map_OK bs (robdd_id_map bs)\n  robdd_invar_ids_equal bs", "have \"robdd_id_map_OK bs (robdd_id_map bs)\""], ["proof (prove)\nusing this:\n  robdd_invar_ids_equal bs = robdd_id_map_OK bs (robdd_id_map bs)\n  robdd_invar_ids_equal bs\n\ngoal (1 subgoal):\n 1. robdd_id_map_OK bs (robdd_id_map bs)", "by simp"], ["proof (state)\nthis:\n  robdd_id_map_OK bs (robdd_id_map bs)\n\ngoal (2 subgoals):\n 1. c_lookup (rv, i) res_map = None \\<Longrightarrow>\n    \\<exists>bs'.\n       insert\n        (fst (robdd_restrict res_map rev_map f rv (robdd_var i l v r))) bs\n       \\<subseteq> bs' \\<and>\n       robdd_invar_ext bs' n\n        (fst (robdd_restrict res_map rev_map f rv\n               (robdd_var i l v r))) \\<and>\n       restrict_map_invar f bs'\n        (fst (snd (robdd_restrict res_map rev_map f rv\n                    (robdd_var i l v r)))) \\<and>\n       rev_map_invar bs'\n        (snd (snd (robdd_restrict res_map rev_map f rv\n                    (robdd_var i l v r)))) \\<and>\n       (\\<forall>a.\n           robdd_\\<alpha>\n            (fst (robdd_restrict res_map rev_map f rv (robdd_var i l v r)))\n            a =\n           robdd_\\<alpha> (robdd_var i l v r) (a(rv := f)))\n 2. \\<And>a.\n       c_lookup (rv, i) res_map = Some a \\<Longrightarrow>\n       \\<exists>bs'.\n          insert\n           (fst (robdd_restrict res_map rev_map f rv (robdd_var i l v r)))\n           bs\n          \\<subseteq> bs' \\<and>\n          robdd_invar_ext bs' n\n           (fst (robdd_restrict res_map rev_map f rv\n                  (robdd_var i l v r))) \\<and>\n          restrict_map_invar f bs'\n           (fst (snd (robdd_restrict res_map rev_map f rv\n                       (robdd_var i l v r)))) \\<and>\n          rev_map_invar bs'\n           (snd (snd (robdd_restrict res_map rev_map f rv\n                       (robdd_var i l v r)))) \\<and>\n          (\\<forall>a.\n              robdd_\\<alpha>\n               (fst (robdd_restrict res_map rev_map f rv\n                      (robdd_var i l v r)))\n               a =\n              robdd_\\<alpha> (robdd_var i l v r) (a(rv := f)))", "with robdd_id_map_OK_D[of bs \"robdd_id_map bs\", OF _ b_in_bs]"], ["proof (chain)\npicking this:\n  robdd_id_map_OK bs (robdd_id_map bs) \\<Longrightarrow>\n  robdd_id_map bs (robdd_get_id (robdd_var i l v r)) =\n  Some (robdd_var i l v r)\n  robdd_id_map_OK bs (robdd_id_map bs)", "have \"robdd_id_map bs i = Some ?b\""], ["proof (prove)\nusing this:\n  robdd_id_map_OK bs (robdd_id_map bs) \\<Longrightarrow>\n  robdd_id_map bs (robdd_get_id (robdd_var i l v r)) =\n  Some (robdd_var i l v r)\n  robdd_id_map_OK bs (robdd_id_map bs)\n\ngoal (1 subgoal):\n 1. robdd_id_map bs i = Some (robdd_var i l v r)", "by simp"], ["proof (state)\nthis:\n  robdd_id_map bs i = Some (robdd_var i l v r)\n\ngoal (2 subgoals):\n 1. c_lookup (rv, i) res_map = None \\<Longrightarrow>\n    \\<exists>bs'.\n       insert\n        (fst (robdd_restrict res_map rev_map f rv (robdd_var i l v r))) bs\n       \\<subseteq> bs' \\<and>\n       robdd_invar_ext bs' n\n        (fst (robdd_restrict res_map rev_map f rv\n               (robdd_var i l v r))) \\<and>\n       restrict_map_invar f bs'\n        (fst (snd (robdd_restrict res_map rev_map f rv\n                    (robdd_var i l v r)))) \\<and>\n       rev_map_invar bs'\n        (snd (snd (robdd_restrict res_map rev_map f rv\n                    (robdd_var i l v r)))) \\<and>\n       (\\<forall>a.\n           robdd_\\<alpha>\n            (fst (robdd_restrict res_map rev_map f rv (robdd_var i l v r)))\n            a =\n           robdd_\\<alpha> (robdd_var i l v r) (a(rv := f)))\n 2. \\<And>a.\n       c_lookup (rv, i) res_map = Some a \\<Longrightarrow>\n       \\<exists>bs'.\n          insert\n           (fst (robdd_restrict res_map rev_map f rv (robdd_var i l v r)))\n           bs\n          \\<subseteq> bs' \\<and>\n          robdd_invar_ext bs' n\n           (fst (robdd_restrict res_map rev_map f rv\n                  (robdd_var i l v r))) \\<and>\n          restrict_map_invar f bs'\n           (fst (snd (robdd_restrict res_map rev_map f rv\n                       (robdd_var i l v r)))) \\<and>\n          rev_map_invar bs'\n           (snd (snd (robdd_restrict res_map rev_map f rv\n                       (robdd_var i l v r)))) \\<and>\n          (\\<forall>a.\n              robdd_\\<alpha>\n               (fst (robdd_restrict res_map rev_map f rv\n                      (robdd_var i l v r)))\n               a =\n              robdd_\\<alpha> (robdd_var i l v r) (a(rv := f)))", "with restrict_map_invar_D2[OF invar_res_map lookup_eq] v_less"], ["proof (chain)\npicking this:\n  \\<exists>b'.\n     robdd_id_map bs i = Some b' \\<and>\n     b3 \\<in> bs \\<and>\n     robdd_invar_ext bs (robdd_get_var b') b3 \\<and>\n     (\\<forall>a. robdd_\\<alpha> b3 a = robdd_\\<alpha> b' (a(rv := f)))\n  v < rv\n  robdd_id_map bs i = Some (robdd_var i l v r)", "have invar_b3: \"robdd_invar_ext bs v b3\" and\n               b3_in_bs: \"b3 \\<in> bs\" and\n               sem_b3: \"\\<forall>a. robdd_\\<alpha> b3 a = (if a v then robdd_\\<alpha> l (a(rv := f)) else \n                   robdd_\\<alpha> r (a(rv := f)))\""], ["proof (prove)\nusing this:\n  \\<exists>b'.\n     robdd_id_map bs i = Some b' \\<and>\n     b3 \\<in> bs \\<and>\n     robdd_invar_ext bs (robdd_get_var b') b3 \\<and>\n     (\\<forall>a. robdd_\\<alpha> b3 a = robdd_\\<alpha> b' (a(rv := f)))\n  v < rv\n  robdd_id_map bs i = Some (robdd_var i l v r)\n\ngoal (1 subgoal):\n 1. robdd_invar_ext bs v b3 &&&\n    b3 \\<in> bs &&&\n    \\<forall>a.\n       robdd_\\<alpha> b3 a =\n       (if a v then robdd_\\<alpha> l (a(rv := f))\n        else robdd_\\<alpha> r (a(rv := f)))", "by simp_all"], ["proof (state)\nthis:\n  robdd_invar_ext bs v b3\n  b3 \\<in> bs\n  \\<forall>a.\n     robdd_\\<alpha> b3 a =\n     (if a v then robdd_\\<alpha> l (a(rv := f))\n      else robdd_\\<alpha> r (a(rv := f)))\n\ngoal (2 subgoals):\n 1. c_lookup (rv, i) res_map = None \\<Longrightarrow>\n    \\<exists>bs'.\n       insert\n        (fst (robdd_restrict res_map rev_map f rv (robdd_var i l v r))) bs\n       \\<subseteq> bs' \\<and>\n       robdd_invar_ext bs' n\n        (fst (robdd_restrict res_map rev_map f rv\n               (robdd_var i l v r))) \\<and>\n       restrict_map_invar f bs'\n        (fst (snd (robdd_restrict res_map rev_map f rv\n                    (robdd_var i l v r)))) \\<and>\n       rev_map_invar bs'\n        (snd (snd (robdd_restrict res_map rev_map f rv\n                    (robdd_var i l v r)))) \\<and>\n       (\\<forall>a.\n           robdd_\\<alpha>\n            (fst (robdd_restrict res_map rev_map f rv (robdd_var i l v r)))\n            a =\n           robdd_\\<alpha> (robdd_var i l v r) (a(rv := f)))\n 2. \\<And>a.\n       c_lookup (rv, i) res_map = Some a \\<Longrightarrow>\n       \\<exists>bs'.\n          insert\n           (fst (robdd_restrict res_map rev_map f rv (robdd_var i l v r)))\n           bs\n          \\<subseteq> bs' \\<and>\n          robdd_invar_ext bs' n\n           (fst (robdd_restrict res_map rev_map f rv\n                  (robdd_var i l v r))) \\<and>\n          restrict_map_invar f bs'\n           (fst (snd (robdd_restrict res_map rev_map f rv\n                       (robdd_var i l v r)))) \\<and>\n          rev_map_invar bs'\n           (snd (snd (robdd_restrict res_map rev_map f rv\n                       (robdd_var i l v r)))) \\<and>\n          (\\<forall>a.\n              robdd_\\<alpha>\n               (fst (robdd_restrict res_map rev_map f rv\n                      (robdd_var i l v r)))\n               a =\n              robdd_\\<alpha> (robdd_var i l v r) (a(rv := f)))", "from invar_b3 b_invar"], ["proof (chain)\npicking this:\n  robdd_invar_ext bs v b3\n  robdd_invar_ext bs n (robdd_var i l v r)", "have invar_b3': \"robdd_invar_ext bs n b3\""], ["proof (prove)\nusing this:\n  robdd_invar_ext bs v b3\n  robdd_invar_ext bs n (robdd_var i l v r)\n\ngoal (1 subgoal):\n 1. robdd_invar_ext bs n b3", "apply (rule_tac robdd_invar_ext_weaken_var[of _ v])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>robdd_invar_ext bs v b3;\n     robdd_invar_ext bs n (robdd_var i l v r)\\<rbrakk>\n    \\<Longrightarrow> robdd_invar_ext bs v b3\n 2. \\<lbrakk>robdd_invar_ext bs v b3;\n     robdd_invar_ext bs n (robdd_var i l v r)\\<rbrakk>\n    \\<Longrightarrow> n \\<le> v", "apply simp_all"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  robdd_invar_ext bs n b3\n\ngoal (2 subgoals):\n 1. c_lookup (rv, i) res_map = None \\<Longrightarrow>\n    \\<exists>bs'.\n       insert\n        (fst (robdd_restrict res_map rev_map f rv (robdd_var i l v r))) bs\n       \\<subseteq> bs' \\<and>\n       robdd_invar_ext bs' n\n        (fst (robdd_restrict res_map rev_map f rv\n               (robdd_var i l v r))) \\<and>\n       restrict_map_invar f bs'\n        (fst (snd (robdd_restrict res_map rev_map f rv\n                    (robdd_var i l v r)))) \\<and>\n       rev_map_invar bs'\n        (snd (snd (robdd_restrict res_map rev_map f rv\n                    (robdd_var i l v r)))) \\<and>\n       (\\<forall>a.\n           robdd_\\<alpha>\n            (fst (robdd_restrict res_map rev_map f rv (robdd_var i l v r)))\n            a =\n           robdd_\\<alpha> (robdd_var i l v r) (a(rv := f)))\n 2. \\<And>a.\n       c_lookup (rv, i) res_map = Some a \\<Longrightarrow>\n       \\<exists>bs'.\n          insert\n           (fst (robdd_restrict res_map rev_map f rv (robdd_var i l v r)))\n           bs\n          \\<subseteq> bs' \\<and>\n          robdd_invar_ext bs' n\n           (fst (robdd_restrict res_map rev_map f rv\n                  (robdd_var i l v r))) \\<and>\n          restrict_map_invar f bs'\n           (fst (snd (robdd_restrict res_map rev_map f rv\n                       (robdd_var i l v r)))) \\<and>\n          rev_map_invar bs'\n           (snd (snd (robdd_restrict res_map rev_map f rv\n                       (robdd_var i l v r)))) \\<and>\n          (\\<forall>a.\n              robdd_\\<alpha>\n               (fst (robdd_restrict res_map rev_map f rv\n                      (robdd_var i l v r)))\n               a =\n              robdd_\\<alpha> (robdd_var i l v r) (a(rv := f)))", "have \"\\<And>a. (\\<lambda>x. (x = rv \\<longrightarrow> f) \\<and> (x \\<noteq> rv \\<longrightarrow> a x)) = a (rv := f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a.\n       (\\<lambda>x.\n           (x = rv \\<longrightarrow> f) \\<and>\n           (x \\<noteq> rv \\<longrightarrow> a x)) =\n       a(rv := f)", "by (simp add: fun_eq_iff)"], ["proof (state)\nthis:\n  (\\<lambda>x.\n      (x = rv \\<longrightarrow> f) \\<and>\n      (x \\<noteq> rv \\<longrightarrow> ?a x)) =\n  ?a(rv := f)\n\ngoal (2 subgoals):\n 1. c_lookup (rv, i) res_map = None \\<Longrightarrow>\n    \\<exists>bs'.\n       insert\n        (fst (robdd_restrict res_map rev_map f rv (robdd_var i l v r))) bs\n       \\<subseteq> bs' \\<and>\n       robdd_invar_ext bs' n\n        (fst (robdd_restrict res_map rev_map f rv\n               (robdd_var i l v r))) \\<and>\n       restrict_map_invar f bs'\n        (fst (snd (robdd_restrict res_map rev_map f rv\n                    (robdd_var i l v r)))) \\<and>\n       rev_map_invar bs'\n        (snd (snd (robdd_restrict res_map rev_map f rv\n                    (robdd_var i l v r)))) \\<and>\n       (\\<forall>a.\n           robdd_\\<alpha>\n            (fst (robdd_restrict res_map rev_map f rv (robdd_var i l v r)))\n            a =\n           robdd_\\<alpha> (robdd_var i l v r) (a(rv := f)))\n 2. \\<And>a.\n       c_lookup (rv, i) res_map = Some a \\<Longrightarrow>\n       \\<exists>bs'.\n          insert\n           (fst (robdd_restrict res_map rev_map f rv (robdd_var i l v r)))\n           bs\n          \\<subseteq> bs' \\<and>\n          robdd_invar_ext bs' n\n           (fst (robdd_restrict res_map rev_map f rv\n                  (robdd_var i l v r))) \\<and>\n          restrict_map_invar f bs'\n           (fst (snd (robdd_restrict res_map rev_map f rv\n                       (robdd_var i l v r)))) \\<and>\n          rev_map_invar bs'\n           (snd (snd (robdd_restrict res_map rev_map f rv\n                       (robdd_var i l v r)))) \\<and>\n          (\\<forall>a.\n              robdd_\\<alpha>\n               (fst (robdd_restrict res_map rev_map f rv\n                      (robdd_var i l v r)))\n               a =\n              robdd_\\<alpha> (robdd_var i l v r) (a(rv := f)))", "with lookup_eq"], ["proof (chain)\npicking this:\n  c_lookup (rv, i) res_map = Some b3\n  (\\<lambda>x.\n      (x = rv \\<longrightarrow> f) \\<and>\n      (x \\<noteq> rv \\<longrightarrow> ?a x)) =\n  ?a(rv := f)", "show ?thesis"], ["proof (prove)\nusing this:\n  c_lookup (rv, i) res_map = Some b3\n  (\\<lambda>x.\n      (x = rv \\<longrightarrow> f) \\<and>\n      (x \\<noteq> rv \\<longrightarrow> ?a x)) =\n  ?a(rv := f)\n\ngoal (1 subgoal):\n 1. \\<exists>bs'.\n       insert\n        (fst (robdd_restrict res_map rev_map f rv (robdd_var i l v r))) bs\n       \\<subseteq> bs' \\<and>\n       robdd_invar_ext bs' n\n        (fst (robdd_restrict res_map rev_map f rv\n               (robdd_var i l v r))) \\<and>\n       restrict_map_invar f bs'\n        (fst (snd (robdd_restrict res_map rev_map f rv\n                    (robdd_var i l v r)))) \\<and>\n       rev_map_invar bs'\n        (snd (snd (robdd_restrict res_map rev_map f rv\n                    (robdd_var i l v r)))) \\<and>\n       (\\<forall>a.\n           robdd_\\<alpha>\n            (fst (robdd_restrict res_map rev_map f rv (robdd_var i l v r)))\n            a =\n           robdd_\\<alpha> (robdd_var i l v r) (a(rv := f)))", "using v_less b3_in_bs"], ["proof (prove)\nusing this:\n  c_lookup (rv, i) res_map = Some b3\n  (\\<lambda>x.\n      (x = rv \\<longrightarrow> f) \\<and>\n      (x \\<noteq> rv \\<longrightarrow> ?a x)) =\n  ?a(rv := f)\n  v < rv\n  b3 \\<in> bs\n\ngoal (1 subgoal):\n 1. \\<exists>bs'.\n       insert\n        (fst (robdd_restrict res_map rev_map f rv (robdd_var i l v r))) bs\n       \\<subseteq> bs' \\<and>\n       robdd_invar_ext bs' n\n        (fst (robdd_restrict res_map rev_map f rv\n               (robdd_var i l v r))) \\<and>\n       restrict_map_invar f bs'\n        (fst (snd (robdd_restrict res_map rev_map f rv\n                    (robdd_var i l v r)))) \\<and>\n       rev_map_invar bs'\n        (snd (snd (robdd_restrict res_map rev_map f rv\n                    (robdd_var i l v r)))) \\<and>\n       (\\<forall>a.\n           robdd_\\<alpha>\n            (fst (robdd_restrict res_map rev_map f rv (robdd_var i l v r)))\n            a =\n           robdd_\\<alpha> (robdd_var i l v r) (a(rv := f)))", "apply (rule_tac exI[where x = bs])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>c_lookup (rv, i) res_map = Some b3;\n     \\<And>a.\n        (\\<lambda>x.\n            (x = rv \\<longrightarrow> f) \\<and>\n            (x \\<noteq> rv \\<longrightarrow> a x)) =\n        a(rv := f);\n     v < rv; b3 \\<in> bs\\<rbrakk>\n    \\<Longrightarrow> insert\n                       (fst (robdd_restrict res_map rev_map f rv\n                              (robdd_var i l v r)))\n                       bs\n                      \\<subseteq> bs \\<and>\n                      robdd_invar_ext bs n\n                       (fst (robdd_restrict res_map rev_map f rv\n                              (robdd_var i l v r))) \\<and>\n                      restrict_map_invar f bs\n                       (fst (snd (robdd_restrict res_map rev_map f rv\n                                   (robdd_var i l v r)))) \\<and>\n                      rev_map_invar bs\n                       (snd (snd (robdd_restrict res_map rev_map f rv\n                                   (robdd_var i l v r)))) \\<and>\n                      (\\<forall>a.\n                          robdd_\\<alpha>\n                           (fst (robdd_restrict res_map rev_map f rv\n                                  (robdd_var i l v r)))\n                           a =\n                          robdd_\\<alpha> (robdd_var i l v r) (a(rv := f)))", "apply (simp add: sem_b3 invar_b3' invar_rev_map invar_res_map robdd_restrict.simps)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  \\<exists>bs'.\n     insert (fst (robdd_restrict res_map rev_map f rv (robdd_var i l v r)))\n      bs\n     \\<subseteq> bs' \\<and>\n     robdd_invar_ext bs' n\n      (fst (robdd_restrict res_map rev_map f rv (robdd_var i l v r))) \\<and>\n     restrict_map_invar f bs'\n      (fst (snd (robdd_restrict res_map rev_map f rv\n                  (robdd_var i l v r)))) \\<and>\n     rev_map_invar bs'\n      (snd (snd (robdd_restrict res_map rev_map f rv\n                  (robdd_var i l v r)))) \\<and>\n     (\\<forall>a.\n         robdd_\\<alpha>\n          (fst (robdd_restrict res_map rev_map f rv (robdd_var i l v r)))\n          a =\n         robdd_\\<alpha> (robdd_var i l v r) (a(rv := f)))\n\ngoal (1 subgoal):\n 1. c_lookup (rv, i) res_map = None \\<Longrightarrow>\n    \\<exists>bs'.\n       insert\n        (fst (robdd_restrict res_map rev_map f rv (robdd_var i l v r))) bs\n       \\<subseteq> bs' \\<and>\n       robdd_invar_ext bs' n\n        (fst (robdd_restrict res_map rev_map f rv\n               (robdd_var i l v r))) \\<and>\n       restrict_map_invar f bs'\n        (fst (snd (robdd_restrict res_map rev_map f rv\n                    (robdd_var i l v r)))) \\<and>\n       rev_map_invar bs'\n        (snd (snd (robdd_restrict res_map rev_map f rv\n                    (robdd_var i l v r)))) \\<and>\n       (\\<forall>a.\n           robdd_\\<alpha>\n            (fst (robdd_restrict res_map rev_map f rv (robdd_var i l v r)))\n            a =\n           robdd_\\<alpha> (robdd_var i l v r) (a(rv := f)))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. c_lookup (rv, i) res_map = None \\<Longrightarrow>\n    \\<exists>bs'.\n       insert\n        (fst (robdd_restrict res_map rev_map f rv (robdd_var i l v r))) bs\n       \\<subseteq> bs' \\<and>\n       robdd_invar_ext bs' n\n        (fst (robdd_restrict res_map rev_map f rv\n               (robdd_var i l v r))) \\<and>\n       restrict_map_invar f bs'\n        (fst (snd (robdd_restrict res_map rev_map f rv\n                    (robdd_var i l v r)))) \\<and>\n       rev_map_invar bs'\n        (snd (snd (robdd_restrict res_map rev_map f rv\n                    (robdd_var i l v r)))) \\<and>\n       (\\<forall>a.\n           robdd_\\<alpha>\n            (fst (robdd_restrict res_map rev_map f rv (robdd_var i l v r)))\n            a =\n           robdd_\\<alpha> (robdd_var i l v r) (a(rv := f)))", "case None"], ["proof (state)\nthis:\n  c_lookup (rv, i) res_map = None\n\ngoal (1 subgoal):\n 1. c_lookup (rv, i) res_map = None \\<Longrightarrow>\n    \\<exists>bs'.\n       insert\n        (fst (robdd_restrict res_map rev_map f rv (robdd_var i l v r))) bs\n       \\<subseteq> bs' \\<and>\n       robdd_invar_ext bs' n\n        (fst (robdd_restrict res_map rev_map f rv\n               (robdd_var i l v r))) \\<and>\n       restrict_map_invar f bs'\n        (fst (snd (robdd_restrict res_map rev_map f rv\n                    (robdd_var i l v r)))) \\<and>\n       rev_map_invar bs'\n        (snd (snd (robdd_restrict res_map rev_map f rv\n                    (robdd_var i l v r)))) \\<and>\n       (\\<forall>a.\n           robdd_\\<alpha>\n            (fst (robdd_restrict res_map rev_map f rv (robdd_var i l v r)))\n            a =\n           robdd_\\<alpha> (robdd_var i l v r) (a(rv := f)))", "note lookup_eq = this"], ["proof (state)\nthis:\n  c_lookup (rv, i) res_map = None\n\ngoal (1 subgoal):\n 1. c_lookup (rv, i) res_map = None \\<Longrightarrow>\n    \\<exists>bs'.\n       insert\n        (fst (robdd_restrict res_map rev_map f rv (robdd_var i l v r))) bs\n       \\<subseteq> bs' \\<and>\n       robdd_invar_ext bs' n\n        (fst (robdd_restrict res_map rev_map f rv\n               (robdd_var i l v r))) \\<and>\n       restrict_map_invar f bs'\n        (fst (snd (robdd_restrict res_map rev_map f rv\n                    (robdd_var i l v r)))) \\<and>\n       rev_map_invar bs'\n        (snd (snd (robdd_restrict res_map rev_map f rv\n                    (robdd_var i l v r)))) \\<and>\n       (\\<forall>a.\n           robdd_\\<alpha>\n            (fst (robdd_restrict res_map rev_map f rv (robdd_var i l v r)))\n            a =\n           robdd_\\<alpha> (robdd_var i l v r) (a(rv := f)))", "obtain l' res_map' rev_map' where \n            res_l_eq: \"robdd_restrict res_map rev_map f rv l = (l', res_map', rev_map')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>l' res_map' rev_map'.\n        robdd_restrict res_map rev_map f rv l =\n        (l', res_map', rev_map') \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (metis prod.exhaust)"], ["proof (state)\nthis:\n  robdd_restrict res_map rev_map f rv l = (l', res_map', rev_map')\n\ngoal (1 subgoal):\n 1. c_lookup (rv, i) res_map = None \\<Longrightarrow>\n    \\<exists>bs'.\n       insert\n        (fst (robdd_restrict res_map rev_map f rv (robdd_var i l v r))) bs\n       \\<subseteq> bs' \\<and>\n       robdd_invar_ext bs' n\n        (fst (robdd_restrict res_map rev_map f rv\n               (robdd_var i l v r))) \\<and>\n       restrict_map_invar f bs'\n        (fst (snd (robdd_restrict res_map rev_map f rv\n                    (robdd_var i l v r)))) \\<and>\n       rev_map_invar bs'\n        (snd (snd (robdd_restrict res_map rev_map f rv\n                    (robdd_var i l v r)))) \\<and>\n       (\\<forall>a.\n           robdd_\\<alpha>\n            (fst (robdd_restrict res_map rev_map f rv (robdd_var i l v r)))\n            a =\n           robdd_\\<alpha> (robdd_var i l v r) (a(rv := f)))", "obtain r' res_map'' rev_map'' where \n            res_r_eq: \"robdd_restrict res_map' rev_map' f rv r = (r', res_map'', rev_map'')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>r' res_map'' rev_map''.\n        robdd_restrict res_map' rev_map' f rv r =\n        (r', res_map'', rev_map'') \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (metis prod.exhaust)"], ["proof (state)\nthis:\n  robdd_restrict res_map' rev_map' f rv r = (r', res_map'', rev_map'')\n\ngoal (1 subgoal):\n 1. c_lookup (rv, i) res_map = None \\<Longrightarrow>\n    \\<exists>bs'.\n       insert\n        (fst (robdd_restrict res_map rev_map f rv (robdd_var i l v r))) bs\n       \\<subseteq> bs' \\<and>\n       robdd_invar_ext bs' n\n        (fst (robdd_restrict res_map rev_map f rv\n               (robdd_var i l v r))) \\<and>\n       restrict_map_invar f bs'\n        (fst (snd (robdd_restrict res_map rev_map f rv\n                    (robdd_var i l v r)))) \\<and>\n       rev_map_invar bs'\n        (snd (snd (robdd_restrict res_map rev_map f rv\n                    (robdd_var i l v r)))) \\<and>\n       (\\<forall>a.\n           robdd_\\<alpha>\n            (fst (robdd_restrict res_map rev_map f rv (robdd_var i l v r)))\n            a =\n           robdd_\\<alpha> (robdd_var i l v r) (a(rv := f)))", "obtain b3 rev_map''' where \n            const_eq: \"robdd_construct rev_map'' l' v r' = (b3, rev_map''')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>b3 rev_map'''.\n        robdd_construct rev_map'' l' v r' =\n        (b3, rev_map''') \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (metis prod.exhaust)"], ["proof (state)\nthis:\n  robdd_construct rev_map'' l' v r' = (b3, rev_map''')\n\ngoal (1 subgoal):\n 1. c_lookup (rv, i) res_map = None \\<Longrightarrow>\n    \\<exists>bs'.\n       insert\n        (fst (robdd_restrict res_map rev_map f rv (robdd_var i l v r))) bs\n       \\<subseteq> bs' \\<and>\n       robdd_invar_ext bs' n\n        (fst (robdd_restrict res_map rev_map f rv\n               (robdd_var i l v r))) \\<and>\n       restrict_map_invar f bs'\n        (fst (snd (robdd_restrict res_map rev_map f rv\n                    (robdd_var i l v r)))) \\<and>\n       rev_map_invar bs'\n        (snd (snd (robdd_restrict res_map rev_map f rv\n                    (robdd_var i l v r)))) \\<and>\n       (\\<forall>a.\n           robdd_\\<alpha>\n            (fst (robdd_restrict res_map rev_map f rv (robdd_var i l v r)))\n            a =\n           robdd_\\<alpha> (robdd_var i l v r) (a(rv := f)))", "from b_invar b_sub indhyp_l [OF invar_rev_map invar_res_map, of \"Suc v\"]"], ["proof (chain)\npicking this:\n  robdd_invar_ext bs n (robdd_var i l v r)\n  subrobdds (robdd_var i l v r) \\<subseteq> bs\n  \\<lbrakk>robdd_invar_ext bs (Suc v) l; subrobdds l \\<subseteq> bs\\<rbrakk>\n  \\<Longrightarrow> \\<exists>bs'.\n                       insert (fst (robdd_restrict res_map rev_map f rv l))\n                        bs\n                       \\<subseteq> bs' \\<and>\n                       robdd_invar_ext bs' (Suc v)\n                        (fst (robdd_restrict res_map rev_map f rv l)) \\<and>\n                       restrict_map_invar f bs'\n                        (fst (snd (robdd_restrict res_map rev_map f rv\n                                    l))) \\<and>\n                       rev_map_invar bs'\n                        (snd (snd (robdd_restrict res_map rev_map f rv\n                                    l))) \\<and>\n                       (\\<forall>a.\n                           robdd_\\<alpha>\n                            (fst (robdd_restrict res_map rev_map f rv l))\n                            a =\n                           robdd_\\<alpha> l (a(rv := f)))", "obtain bs' where\n             subset_bs': \"insert l' bs \\<subseteq> bs'\" and\n             l'_invar: \"robdd_invar_ext bs' (Suc v) l'\" and\n             invar_res_map': \"restrict_map_invar f bs' res_map'\" and\n             invar_rev_map': \"rev_map_invar bs' rev_map'\" and\n             sem_l': \"\\<forall>a. robdd_\\<alpha> l' a = (robdd_\\<alpha> l (\\<lambda>b. if b = rv then f else a b))\""], ["proof (prove)\nusing this:\n  robdd_invar_ext bs n (robdd_var i l v r)\n  subrobdds (robdd_var i l v r) \\<subseteq> bs\n  \\<lbrakk>robdd_invar_ext bs (Suc v) l; subrobdds l \\<subseteq> bs\\<rbrakk>\n  \\<Longrightarrow> \\<exists>bs'.\n                       insert (fst (robdd_restrict res_map rev_map f rv l))\n                        bs\n                       \\<subseteq> bs' \\<and>\n                       robdd_invar_ext bs' (Suc v)\n                        (fst (robdd_restrict res_map rev_map f rv l)) \\<and>\n                       restrict_map_invar f bs'\n                        (fst (snd (robdd_restrict res_map rev_map f rv\n                                    l))) \\<and>\n                       rev_map_invar bs'\n                        (snd (snd (robdd_restrict res_map rev_map f rv\n                                    l))) \\<and>\n                       (\\<forall>a.\n                           robdd_\\<alpha>\n                            (fst (robdd_restrict res_map rev_map f rv l))\n                            a =\n                           robdd_\\<alpha> l (a(rv := f)))\n\ngoal (1 subgoal):\n 1. (\\<And>bs'.\n        \\<lbrakk>insert l' bs \\<subseteq> bs';\n         robdd_invar_ext bs' (Suc v) l'; restrict_map_invar f bs' res_map';\n         rev_map_invar bs' rev_map';\n         \\<forall>a.\n            robdd_\\<alpha> l' a =\n            robdd_\\<alpha> l\n             (\\<lambda>b. if b = rv then f else a b)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (simp add: invar_rev_map invar_res_map res_l_eq) blast"], ["proof (state)\nthis:\n  insert l' bs \\<subseteq> bs'\n  robdd_invar_ext bs' (Suc v) l'\n  restrict_map_invar f bs' res_map'\n  rev_map_invar bs' rev_map'\n  \\<forall>a.\n     robdd_\\<alpha> l' a =\n     robdd_\\<alpha> l (\\<lambda>b. if b = rv then f else a b)\n\ngoal (1 subgoal):\n 1. c_lookup (rv, i) res_map = None \\<Longrightarrow>\n    \\<exists>bs'.\n       insert\n        (fst (robdd_restrict res_map rev_map f rv (robdd_var i l v r))) bs\n       \\<subseteq> bs' \\<and>\n       robdd_invar_ext bs' n\n        (fst (robdd_restrict res_map rev_map f rv\n               (robdd_var i l v r))) \\<and>\n       restrict_map_invar f bs'\n        (fst (snd (robdd_restrict res_map rev_map f rv\n                    (robdd_var i l v r)))) \\<and>\n       rev_map_invar bs'\n        (snd (snd (robdd_restrict res_map rev_map f rv\n                    (robdd_var i l v r)))) \\<and>\n       (\\<forall>a.\n           robdd_\\<alpha>\n            (fst (robdd_restrict res_map rev_map f rv (robdd_var i l v r)))\n            a =\n           robdd_\\<alpha> (robdd_var i l v r) (a(rv := f)))", "from b_invar"], ["proof (chain)\npicking this:\n  robdd_invar_ext bs n (robdd_var i l v r)", "have \"robdd_invar_ext bs (Suc v) r\""], ["proof (prove)\nusing this:\n  robdd_invar_ext bs n (robdd_var i l v r)\n\ngoal (1 subgoal):\n 1. robdd_invar_ext bs (Suc v) r", "by simp"], ["proof (state)\nthis:\n  robdd_invar_ext bs (Suc v) r\n\ngoal (1 subgoal):\n 1. c_lookup (rv, i) res_map = None \\<Longrightarrow>\n    \\<exists>bs'.\n       insert\n        (fst (robdd_restrict res_map rev_map f rv (robdd_var i l v r))) bs\n       \\<subseteq> bs' \\<and>\n       robdd_invar_ext bs' n\n        (fst (robdd_restrict res_map rev_map f rv\n               (robdd_var i l v r))) \\<and>\n       restrict_map_invar f bs'\n        (fst (snd (robdd_restrict res_map rev_map f rv\n                    (robdd_var i l v r)))) \\<and>\n       rev_map_invar bs'\n        (snd (snd (robdd_restrict res_map rev_map f rv\n                    (robdd_var i l v r)))) \\<and>\n       (\\<forall>a.\n           robdd_\\<alpha>\n            (fst (robdd_restrict res_map rev_map f rv (robdd_var i l v r)))\n            a =\n           robdd_\\<alpha> (robdd_var i l v r) (a(rv := f)))", "with l'_invar subset_bs'"], ["proof (chain)\npicking this:\n  robdd_invar_ext bs' (Suc v) l'\n  insert l' bs \\<subseteq> bs'\n  robdd_invar_ext bs (Suc v) r", "have \"robdd_invar_ext bs' (Suc v) r\""], ["proof (prove)\nusing this:\n  robdd_invar_ext bs' (Suc v) l'\n  insert l' bs \\<subseteq> bs'\n  robdd_invar_ext bs (Suc v) r\n\ngoal (1 subgoal):\n 1. robdd_invar_ext bs' (Suc v) r", "unfolding robdd_invar_ext_def"], ["proof (prove)\nusing this:\n  l' \\<in> subrobdds_set bs' \\<and>\n  robdd_invar_ids bs' \\<and>\n  robdd_invar_vars_greater (Suc v) l' \\<and> robdd_invar_reduced l'\n  insert l' bs \\<subseteq> bs'\n  r \\<in> subrobdds_set bs \\<and>\n  robdd_invar_ids bs \\<and>\n  robdd_invar_vars_greater (Suc v) r \\<and> robdd_invar_reduced r\n\ngoal (1 subgoal):\n 1. r \\<in> subrobdds_set bs' \\<and>\n    robdd_invar_ids bs' \\<and>\n    robdd_invar_vars_greater (Suc v) r \\<and> robdd_invar_reduced r", "by simp (metis subrobdds_set_mono2 subsetD)"], ["proof (state)\nthis:\n  robdd_invar_ext bs' (Suc v) r\n\ngoal (1 subgoal):\n 1. c_lookup (rv, i) res_map = None \\<Longrightarrow>\n    \\<exists>bs'.\n       insert\n        (fst (robdd_restrict res_map rev_map f rv (robdd_var i l v r))) bs\n       \\<subseteq> bs' \\<and>\n       robdd_invar_ext bs' n\n        (fst (robdd_restrict res_map rev_map f rv\n               (robdd_var i l v r))) \\<and>\n       restrict_map_invar f bs'\n        (fst (snd (robdd_restrict res_map rev_map f rv\n                    (robdd_var i l v r)))) \\<and>\n       rev_map_invar bs'\n        (snd (snd (robdd_restrict res_map rev_map f rv\n                    (robdd_var i l v r)))) \\<and>\n       (\\<forall>a.\n           robdd_\\<alpha>\n            (fst (robdd_restrict res_map rev_map f rv (robdd_var i l v r)))\n            a =\n           robdd_\\<alpha> (robdd_var i l v r) (a(rv := f)))", "with b_sub subset_bs' indhyp_r [OF invar_rev_map' invar_res_map', of \"Suc v\"]"], ["proof (chain)\npicking this:\n  subrobdds (robdd_var i l v r) \\<subseteq> bs\n  insert l' bs \\<subseteq> bs'\n  \\<lbrakk>robdd_invar_ext bs' (Suc v) r;\n   subrobdds r \\<subseteq> bs'\\<rbrakk>\n  \\<Longrightarrow> \\<exists>bs'a.\n                       insert\n                        (fst (robdd_restrict res_map' rev_map' f rv r)) bs'\n                       \\<subseteq> bs'a \\<and>\n                       robdd_invar_ext bs'a (Suc v)\n                        (fst (robdd_restrict res_map' rev_map' f rv\n                               r)) \\<and>\n                       restrict_map_invar f bs'a\n                        (fst (snd (robdd_restrict res_map' rev_map' f rv\n                                    r))) \\<and>\n                       rev_map_invar bs'a\n                        (snd (snd (robdd_restrict res_map' rev_map' f rv\n                                    r))) \\<and>\n                       (\\<forall>a.\n                           robdd_\\<alpha>\n                            (fst (robdd_restrict res_map' rev_map' f rv r))\n                            a =\n                           robdd_\\<alpha> r (a(rv := f)))\n  robdd_invar_ext bs' (Suc v) r", "obtain bs'' where\n             subset_bs'': \"insert r' bs' \\<subseteq> bs''\" and\n             r'_invar: \"robdd_invar_ext bs'' (Suc v) r'\" and\n             invar_res_map'': \"restrict_map_invar f bs'' res_map''\" and\n             invar_rev_map'': \"rev_map_invar bs'' rev_map''\" and\n             sem_r': \"\\<forall>a. robdd_\\<alpha> r' a = (robdd_\\<alpha> r (\\<lambda>b. if b = rv then f else a b))\""], ["proof (prove)\nusing this:\n  subrobdds (robdd_var i l v r) \\<subseteq> bs\n  insert l' bs \\<subseteq> bs'\n  \\<lbrakk>robdd_invar_ext bs' (Suc v) r;\n   subrobdds r \\<subseteq> bs'\\<rbrakk>\n  \\<Longrightarrow> \\<exists>bs'a.\n                       insert\n                        (fst (robdd_restrict res_map' rev_map' f rv r)) bs'\n                       \\<subseteq> bs'a \\<and>\n                       robdd_invar_ext bs'a (Suc v)\n                        (fst (robdd_restrict res_map' rev_map' f rv\n                               r)) \\<and>\n                       restrict_map_invar f bs'a\n                        (fst (snd (robdd_restrict res_map' rev_map' f rv\n                                    r))) \\<and>\n                       rev_map_invar bs'a\n                        (snd (snd (robdd_restrict res_map' rev_map' f rv\n                                    r))) \\<and>\n                       (\\<forall>a.\n                           robdd_\\<alpha>\n                            (fst (robdd_restrict res_map' rev_map' f rv r))\n                            a =\n                           robdd_\\<alpha> r (a(rv := f)))\n  robdd_invar_ext bs' (Suc v) r\n\ngoal (1 subgoal):\n 1. (\\<And>bs''.\n        \\<lbrakk>insert r' bs' \\<subseteq> bs'';\n         robdd_invar_ext bs'' (Suc v) r';\n         restrict_map_invar f bs'' res_map''; rev_map_invar bs'' rev_map'';\n         \\<forall>a.\n            robdd_\\<alpha> r' a =\n            robdd_\\<alpha> r\n             (\\<lambda>b. if b = rv then f else a b)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (simp add: subset_iff invar_rev_map invar_res_map res_r_eq) blast"], ["proof (state)\nthis:\n  insert r' bs' \\<subseteq> bs''\n  robdd_invar_ext bs'' (Suc v) r'\n  restrict_map_invar f bs'' res_map''\n  rev_map_invar bs'' rev_map''\n  \\<forall>a.\n     robdd_\\<alpha> r' a =\n     robdd_\\<alpha> r (\\<lambda>b. if b = rv then f else a b)\n\ngoal (1 subgoal):\n 1. c_lookup (rv, i) res_map = None \\<Longrightarrow>\n    \\<exists>bs'.\n       insert\n        (fst (robdd_restrict res_map rev_map f rv (robdd_var i l v r))) bs\n       \\<subseteq> bs' \\<and>\n       robdd_invar_ext bs' n\n        (fst (robdd_restrict res_map rev_map f rv\n               (robdd_var i l v r))) \\<and>\n       restrict_map_invar f bs'\n        (fst (snd (robdd_restrict res_map rev_map f rv\n                    (robdd_var i l v r)))) \\<and>\n       rev_map_invar bs'\n        (snd (snd (robdd_restrict res_map rev_map f rv\n                    (robdd_var i l v r)))) \\<and>\n       (\\<forall>a.\n           robdd_\\<alpha>\n            (fst (robdd_restrict res_map rev_map f rv (robdd_var i l v r)))\n            a =\n           robdd_\\<alpha> (robdd_var i l v r) (a(rv := f)))", "from l'_invar r'_invar subset_bs' subset_bs''"], ["proof (chain)\npicking this:\n  robdd_invar_ext bs' (Suc v) l'\n  robdd_invar_ext bs'' (Suc v) r'\n  insert l' bs \\<subseteq> bs'\n  insert r' bs' \\<subseteq> bs''", "have l'_invar': \"robdd_invar_ext bs'' (Suc v) l'\""], ["proof (prove)\nusing this:\n  robdd_invar_ext bs' (Suc v) l'\n  robdd_invar_ext bs'' (Suc v) r'\n  insert l' bs \\<subseteq> bs'\n  insert r' bs' \\<subseteq> bs''\n\ngoal (1 subgoal):\n 1. robdd_invar_ext bs'' (Suc v) l'", "unfolding robdd_invar_ext_def"], ["proof (prove)\nusing this:\n  l' \\<in> subrobdds_set bs' \\<and>\n  robdd_invar_ids bs' \\<and>\n  robdd_invar_vars_greater (Suc v) l' \\<and> robdd_invar_reduced l'\n  r' \\<in> subrobdds_set bs'' \\<and>\n  robdd_invar_ids bs'' \\<and>\n  robdd_invar_vars_greater (Suc v) r' \\<and> robdd_invar_reduced r'\n  insert l' bs \\<subseteq> bs'\n  insert r' bs' \\<subseteq> bs''\n\ngoal (1 subgoal):\n 1. l' \\<in> subrobdds_set bs'' \\<and>\n    robdd_invar_ids bs'' \\<and>\n    robdd_invar_vars_greater (Suc v) l' \\<and> robdd_invar_reduced l'", "by simp (metis subrobdds_set_mono2 subsetD)"], ["proof (state)\nthis:\n  robdd_invar_ext bs'' (Suc v) l'\n\ngoal (1 subgoal):\n 1. c_lookup (rv, i) res_map = None \\<Longrightarrow>\n    \\<exists>bs'.\n       insert\n        (fst (robdd_restrict res_map rev_map f rv (robdd_var i l v r))) bs\n       \\<subseteq> bs' \\<and>\n       robdd_invar_ext bs' n\n        (fst (robdd_restrict res_map rev_map f rv\n               (robdd_var i l v r))) \\<and>\n       restrict_map_invar f bs'\n        (fst (snd (robdd_restrict res_map rev_map f rv\n                    (robdd_var i l v r)))) \\<and>\n       rev_map_invar bs'\n        (snd (snd (robdd_restrict res_map rev_map f rv\n                    (robdd_var i l v r)))) \\<and>\n       (\\<forall>a.\n           robdd_\\<alpha>\n            (fst (robdd_restrict res_map rev_map f rv (robdd_var i l v r)))\n            a =\n           robdd_\\<alpha> (robdd_var i l v r) (a(rv := f)))", "from subset_bs' subset_bs''"], ["proof (chain)\npicking this:\n  insert l' bs \\<subseteq> bs'\n  insert r' bs' \\<subseteq> bs''", "have \"l' \\<in> bs''\" \"r' \\<in> bs''\""], ["proof (prove)\nusing this:\n  insert l' bs \\<subseteq> bs'\n  insert r' bs' \\<subseteq> bs''\n\ngoal (1 subgoal):\n 1. l' \\<in> bs'' &&& r' \\<in> bs''", "by (simp_all add: subset_iff)"], ["proof (state)\nthis:\n  l' \\<in> bs''\n  r' \\<in> bs''\n\ngoal (1 subgoal):\n 1. c_lookup (rv, i) res_map = None \\<Longrightarrow>\n    \\<exists>bs'.\n       insert\n        (fst (robdd_restrict res_map rev_map f rv (robdd_var i l v r))) bs\n       \\<subseteq> bs' \\<and>\n       robdd_invar_ext bs' n\n        (fst (robdd_restrict res_map rev_map f rv\n               (robdd_var i l v r))) \\<and>\n       restrict_map_invar f bs'\n        (fst (snd (robdd_restrict res_map rev_map f rv\n                    (robdd_var i l v r)))) \\<and>\n       rev_map_invar bs'\n        (snd (snd (robdd_restrict res_map rev_map f rv\n                    (robdd_var i l v r)))) \\<and>\n       (\\<forall>a.\n           robdd_\\<alpha>\n            (fst (robdd_restrict res_map rev_map f rv (robdd_var i l v r)))\n            a =\n           robdd_\\<alpha> (robdd_var i l v r) (a(rv := f)))", "from robdd_construct_correct [OF invar_rev_map'' \\<open>l' \\<in> bs''\\<close> \\<open>r' \\<in> bs''\\<close>\n              l'_invar' r'_invar]"], ["proof (chain)\npicking this:\n  robdd_invar_ext (insert (fst (robdd_construct rev_map'' l' v r')) bs'') v\n   (fst (robdd_construct rev_map'' l' v r')) \\<and>\n  rev_map_invar (insert (fst (robdd_construct rev_map'' l' v r')) bs'')\n   (snd (robdd_construct rev_map'' l' v r')) \\<and>\n  robdd_\\<alpha> (fst (robdd_construct rev_map'' l' v r')) =\n  robdd_\\<alpha> (robdd_var 0 l' v r')", "have b3_invar: \"robdd_invar_ext (insert b3 bs'') v b3\" and\n               invar_rev_map''': \"rev_map_invar (insert b3 bs'') rev_map'''\" and\n               sem_b3: \"robdd_\\<alpha> b3 = robdd_\\<alpha> (robdd_var 0 l' v r')\""], ["proof (prove)\nusing this:\n  robdd_invar_ext (insert (fst (robdd_construct rev_map'' l' v r')) bs'') v\n   (fst (robdd_construct rev_map'' l' v r')) \\<and>\n  rev_map_invar (insert (fst (robdd_construct rev_map'' l' v r')) bs'')\n   (snd (robdd_construct rev_map'' l' v r')) \\<and>\n  robdd_\\<alpha> (fst (robdd_construct rev_map'' l' v r')) =\n  robdd_\\<alpha> (robdd_var 0 l' v r')\n\ngoal (1 subgoal):\n 1. robdd_invar_ext (insert b3 bs'') v b3 &&&\n    rev_map_invar (insert b3 bs'') rev_map''' &&&\n    robdd_\\<alpha> b3 = robdd_\\<alpha> (robdd_var 0 l' v r')", "by (simp_all add: const_eq)"], ["proof (state)\nthis:\n  robdd_invar_ext (insert b3 bs'') v b3\n  rev_map_invar (insert b3 bs'') rev_map'''\n  robdd_\\<alpha> b3 = robdd_\\<alpha> (robdd_var 0 l' v r')\n\ngoal (1 subgoal):\n 1. c_lookup (rv, i) res_map = None \\<Longrightarrow>\n    \\<exists>bs'.\n       insert\n        (fst (robdd_restrict res_map rev_map f rv (robdd_var i l v r))) bs\n       \\<subseteq> bs' \\<and>\n       robdd_invar_ext bs' n\n        (fst (robdd_restrict res_map rev_map f rv\n               (robdd_var i l v r))) \\<and>\n       restrict_map_invar f bs'\n        (fst (snd (robdd_restrict res_map rev_map f rv\n                    (robdd_var i l v r)))) \\<and>\n       rev_map_invar bs'\n        (snd (snd (robdd_restrict res_map rev_map f rv\n                    (robdd_var i l v r)))) \\<and>\n       (\\<forall>a.\n           robdd_\\<alpha>\n            (fst (robdd_restrict res_map rev_map f rv (robdd_var i l v r)))\n            a =\n           robdd_\\<alpha> (robdd_var i l v r) (a(rv := f)))", "from b3_invar b_invar"], ["proof (chain)\npicking this:\n  robdd_invar_ext (insert b3 bs'') v b3\n  robdd_invar_ext bs n (robdd_var i l v r)", "have b3_invar': \"robdd_invar_ext (insert b3 bs'') n b3\""], ["proof (prove)\nusing this:\n  robdd_invar_ext (insert b3 bs'') v b3\n  robdd_invar_ext bs n (robdd_var i l v r)\n\ngoal (1 subgoal):\n 1. robdd_invar_ext (insert b3 bs'') n b3", "apply (rule_tac robdd_invar_ext_weaken_var[of _ v])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>robdd_invar_ext (insert b3 bs'') v b3;\n     robdd_invar_ext bs n (robdd_var i l v r)\\<rbrakk>\n    \\<Longrightarrow> robdd_invar_ext (insert b3 bs'') v b3\n 2. \\<lbrakk>robdd_invar_ext (insert b3 bs'') v b3;\n     robdd_invar_ext bs n (robdd_var i l v r)\\<rbrakk>\n    \\<Longrightarrow> n \\<le> v", "apply simp_all"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  robdd_invar_ext (insert b3 bs'') n b3\n\ngoal (1 subgoal):\n 1. c_lookup (rv, i) res_map = None \\<Longrightarrow>\n    \\<exists>bs'.\n       insert\n        (fst (robdd_restrict res_map rev_map f rv (robdd_var i l v r))) bs\n       \\<subseteq> bs' \\<and>\n       robdd_invar_ext bs' n\n        (fst (robdd_restrict res_map rev_map f rv\n               (robdd_var i l v r))) \\<and>\n       restrict_map_invar f bs'\n        (fst (snd (robdd_restrict res_map rev_map f rv\n                    (robdd_var i l v r)))) \\<and>\n       rev_map_invar bs'\n        (snd (snd (robdd_restrict res_map rev_map f rv\n                    (robdd_var i l v r)))) \\<and>\n       (\\<forall>a.\n           robdd_\\<alpha>\n            (fst (robdd_restrict res_map rev_map f rv (robdd_var i l v r)))\n            a =\n           robdd_\\<alpha> (robdd_var i l v r) (a(rv := f)))", "from subset_bs' subset_bs''"], ["proof (chain)\npicking this:\n  insert l' bs \\<subseteq> bs'\n  insert r' bs' \\<subseteq> bs''", "have bs_sub: \"bs \\<subseteq> insert b3 bs''\""], ["proof (prove)\nusing this:\n  insert l' bs \\<subseteq> bs'\n  insert r' bs' \\<subseteq> bs''\n\ngoal (1 subgoal):\n 1. bs \\<subseteq> insert b3 bs''", "by (simp add: subset_iff)"], ["proof (state)\nthis:\n  bs \\<subseteq> insert b3 bs''\n\ngoal (1 subgoal):\n 1. c_lookup (rv, i) res_map = None \\<Longrightarrow>\n    \\<exists>bs'.\n       insert\n        (fst (robdd_restrict res_map rev_map f rv (robdd_var i l v r))) bs\n       \\<subseteq> bs' \\<and>\n       robdd_invar_ext bs' n\n        (fst (robdd_restrict res_map rev_map f rv\n               (robdd_var i l v r))) \\<and>\n       restrict_map_invar f bs'\n        (fst (snd (robdd_restrict res_map rev_map f rv\n                    (robdd_var i l v r)))) \\<and>\n       rev_map_invar bs'\n        (snd (snd (robdd_restrict res_map rev_map f rv\n                    (robdd_var i l v r)))) \\<and>\n       (\\<forall>a.\n           robdd_\\<alpha>\n            (fst (robdd_restrict res_map rev_map f rv (robdd_var i l v r)))\n            a =\n           robdd_\\<alpha> (robdd_var i l v r) (a(rv := f)))", "have invar_res_map''':\n            \"restrict_map_invar f (insert b3 bs'') (c_update (rv, i) b3 res_map'')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. restrict_map_invar f (insert b3 bs'') (c_update (rv, i) b3 res_map'')", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. restrict_map_invar f (insert b3 bs'') (c_update (rv, i) b3 res_map'')", "from b_in_bs subset_bs' subset_bs''"], ["proof (chain)\npicking this:\n  robdd_var i l v r \\<in> subrobdds_set bs\n  insert l' bs \\<subseteq> bs'\n  insert r' bs' \\<subseteq> bs''", "have b_in': \"robdd_var i l v r \\<in> subrobdds_set bs''\""], ["proof (prove)\nusing this:\n  robdd_var i l v r \\<in> subrobdds_set bs\n  insert l' bs \\<subseteq> bs'\n  insert r' bs' \\<subseteq> bs''\n\ngoal (1 subgoal):\n 1. robdd_var i l v r \\<in> subrobdds_set bs''", "unfolding subrobdds_set_def"], ["proof (prove)\nusing this:\n  robdd_var i l v r \\<in> \\<Union> (subrobdds ` bs)\n  insert l' bs \\<subseteq> bs'\n  insert r' bs' \\<subseteq> bs''\n\ngoal (1 subgoal):\n 1. robdd_var i l v r \\<in> \\<Union> (subrobdds ` bs'')", "by (simp add: subset_iff Bex_def) blast"], ["proof (state)\nthis:\n  robdd_var i l v r \\<in> subrobdds_set bs''\n\ngoal (1 subgoal):\n 1. restrict_map_invar f (insert b3 bs'') (c_update (rv, i) b3 res_map'')", "from robdd_id_map_union [of \"{b3}\" bs'']\n                 rev_map_invar_implies_invar_ids_equal[OF invar_rev_map''']"], ["proof (chain)\npicking this:\n  robdd_invar_ids_equal ({b3} \\<union> bs'') \\<Longrightarrow>\n  robdd_id_map ({b3} \\<union> bs'') = robdd_id_map {b3} ++ robdd_id_map bs''\n  robdd_invar_ids_equal (insert b3 bs'')", "have id_map_eq: \"robdd_id_map (insert b3 bs'') = robdd_id_map {b3} ++ robdd_id_map bs''\""], ["proof (prove)\nusing this:\n  robdd_invar_ids_equal ({b3} \\<union> bs'') \\<Longrightarrow>\n  robdd_id_map ({b3} \\<union> bs'') = robdd_id_map {b3} ++ robdd_id_map bs''\n  robdd_invar_ids_equal (insert b3 bs'')\n\ngoal (1 subgoal):\n 1. robdd_id_map (insert b3 bs'') = robdd_id_map {b3} ++ robdd_id_map bs''", "by simp"], ["proof (state)\nthis:\n  robdd_id_map (insert b3 bs'') = robdd_id_map {b3} ++ robdd_id_map bs''\n\ngoal (1 subgoal):\n 1. restrict_map_invar f (insert b3 bs'') (c_update (rv, i) b3 res_map'')", "from robdd_id_map_properties[of \"insert b3 bs''\"] b_in'\n                 rev_map_invar_implies_invar_ids_equal[OF invar_rev_map''']\n                 robdd_id_map_OK_D [of \"insert b3 bs''\" \"robdd_id_map (insert b3 bs'')\" ?b]"], ["proof (chain)\npicking this:\n  robdd_invar_ids_equal (insert b3 bs'') =\n  robdd_id_map_OK (insert b3 bs'') (robdd_id_map (insert b3 bs''))\n  robdd_var i l v r \\<in> subrobdds_set bs''\n  robdd_invar_ids_equal (insert b3 bs'')\n  \\<lbrakk>robdd_id_map_OK (insert b3 bs'') (robdd_id_map (insert b3 bs''));\n   robdd_var i l v r \\<in> subrobdds_set (insert b3 bs'')\\<rbrakk>\n  \\<Longrightarrow> robdd_id_map (insert b3 bs'')\n                     (robdd_get_id (robdd_var i l v r)) =\n                    Some (robdd_var i l v r)", "have map_id_i: \"robdd_id_map (insert b3 bs'') i = Some ?b\""], ["proof (prove)\nusing this:\n  robdd_invar_ids_equal (insert b3 bs'') =\n  robdd_id_map_OK (insert b3 bs'') (robdd_id_map (insert b3 bs''))\n  robdd_var i l v r \\<in> subrobdds_set bs''\n  robdd_invar_ids_equal (insert b3 bs'')\n  \\<lbrakk>robdd_id_map_OK (insert b3 bs'') (robdd_id_map (insert b3 bs''));\n   robdd_var i l v r \\<in> subrobdds_set (insert b3 bs'')\\<rbrakk>\n  \\<Longrightarrow> robdd_id_map (insert b3 bs'')\n                     (robdd_get_id (robdd_var i l v r)) =\n                    Some (robdd_var i l v r)\n\ngoal (1 subgoal):\n 1. robdd_id_map (insert b3 bs'') i = Some (robdd_var i l v r)", "by simp"], ["proof (state)\nthis:\n  robdd_id_map (insert b3 bs'') i = Some (robdd_var i l v r)\n\ngoal (1 subgoal):\n 1. restrict_map_invar f (insert b3 bs'') (c_update (rv, i) b3 res_map'')", "note c_invar = restrict_map_invar_D1[OF invar_res_map'']"], ["proof (state)\nthis:\n  c_invar res_map''\n\ngoal (1 subgoal):\n 1. restrict_map_invar f (insert b3 bs'') (c_update (rv, i) b3 res_map'')", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. restrict_map_invar f (insert b3 bs'') (c_update (rv, i) b3 res_map'')", "proof (rule restrict_map_invar_I, goal_cases)"], ["proof (state)\ngoal (2 subgoals):\n 1. c_invar (c_update (rv, i) b3 res_map'')\n 2. \\<And>ia v b.\n       c_lookup (v, ia) (c_update (rv, i) b3 res_map'') =\n       Some b \\<Longrightarrow>\n       \\<exists>b'.\n          robdd_id_map (insert b3 bs'') ia = Some b' \\<and>\n          b \\<in> insert b3 bs'' \\<and>\n          robdd_invar_ext (insert b3 bs'') (robdd_get_var b') b \\<and>\n          (\\<forall>a. robdd_\\<alpha> b a = robdd_\\<alpha> b' (a(v := f)))", "from restrict_map_invar_D1[OF invar_res_map'']"], ["proof (chain)\npicking this:\n  c_invar res_map''", "show \"c_invar (c_update (rv, i) b3 res_map'')\""], ["proof (prove)\nusing this:\n  c_invar res_map''\n\ngoal (1 subgoal):\n 1. c_invar (c_update (rv, i) b3 res_map'')", "by (simp add: c.update_correct)"], ["proof (state)\nthis:\n  c_invar (c_update (rv, i) b3 res_map'')\n\ngoal (1 subgoal):\n 1. \\<And>ia v b.\n       c_lookup (v, ia) (c_update (rv, i) b3 res_map'') =\n       Some b \\<Longrightarrow>\n       \\<exists>b'.\n          robdd_id_map (insert b3 bs'') ia = Some b' \\<and>\n          b \\<in> insert b3 bs'' \\<and>\n          robdd_invar_ext (insert b3 bs'') (robdd_get_var b') b \\<and>\n          (\\<forall>a. robdd_\\<alpha> b a = robdd_\\<alpha> b' (a(v := f)))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>ia v b.\n       c_lookup (v, ia) (c_update (rv, i) b3 res_map'') =\n       Some b \\<Longrightarrow>\n       \\<exists>b'.\n          robdd_id_map (insert b3 bs'') ia = Some b' \\<and>\n          b \\<in> insert b3 bs'' \\<and>\n          robdd_invar_ext (insert b3 bs'') (robdd_get_var b') b \\<and>\n          (\\<forall>a. robdd_\\<alpha> b a = robdd_\\<alpha> b' (a(v := f)))", "case prems: (2 i' v' b')"], ["proof (state)\nthis:\n  c_lookup (v', i') (c_update (rv, i) b3 res_map'') = Some b'\n\ngoal (1 subgoal):\n 1. \\<And>ia v b.\n       c_lookup (v, ia) (c_update (rv, i) b3 res_map'') =\n       Some b \\<Longrightarrow>\n       \\<exists>b'.\n          robdd_id_map (insert b3 bs'') ia = Some b' \\<and>\n          b \\<in> insert b3 bs'' \\<and>\n          robdd_invar_ext (insert b3 bs'') (robdd_get_var b') b \\<and>\n          (\\<forall>a. robdd_\\<alpha> b a = robdd_\\<alpha> b' (a(v := f)))", "note lookup_eq = prems(1)"], ["proof (state)\nthis:\n  c_lookup (v', i') (c_update (rv, i) b3 res_map'') = Some b'\n\ngoal (1 subgoal):\n 1. \\<And>ia v b.\n       c_lookup (v, ia) (c_update (rv, i) b3 res_map'') =\n       Some b \\<Longrightarrow>\n       \\<exists>b'.\n          robdd_id_map (insert b3 bs'') ia = Some b' \\<and>\n          b \\<in> insert b3 bs'' \\<and>\n          robdd_invar_ext (insert b3 bs'') (robdd_get_var b') b \\<and>\n          (\\<forall>a. robdd_\\<alpha> b a = robdd_\\<alpha> b' (a(v := f)))", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>b'.\n       robdd_id_map (insert b3 bs'') i' = Some b' \\<and>\n       b' \\<in> insert b3 bs'' \\<and>\n       robdd_invar_ext (insert b3 bs'') (robdd_get_var b') b' \\<and>\n       (\\<forall>a. robdd_\\<alpha> b' a = robdd_\\<alpha> b' (a(v' := f)))", "proof (cases \"i' = i \\<and> v' = rv\")"], ["proof (state)\ngoal (2 subgoals):\n 1. i' = i \\<and> v' = rv \\<Longrightarrow>\n    \\<exists>b'.\n       robdd_id_map (insert b3 bs'') i' = Some b' \\<and>\n       b' \\<in> insert b3 bs'' \\<and>\n       robdd_invar_ext (insert b3 bs'') (robdd_get_var b') b' \\<and>\n       (\\<forall>a. robdd_\\<alpha> b' a = robdd_\\<alpha> b' (a(v' := f)))\n 2. \\<not> (i' = i \\<and> v' = rv) \\<Longrightarrow>\n    \\<exists>b'.\n       robdd_id_map (insert b3 bs'') i' = Some b' \\<and>\n       b' \\<in> insert b3 bs'' \\<and>\n       robdd_invar_ext (insert b3 bs'') (robdd_get_var b') b' \\<and>\n       (\\<forall>a. robdd_\\<alpha> b' a = robdd_\\<alpha> b' (a(v' := f)))", "case True"], ["proof (state)\nthis:\n  i' = i \\<and> v' = rv\n\ngoal (2 subgoals):\n 1. i' = i \\<and> v' = rv \\<Longrightarrow>\n    \\<exists>b'.\n       robdd_id_map (insert b3 bs'') i' = Some b' \\<and>\n       b' \\<in> insert b3 bs'' \\<and>\n       robdd_invar_ext (insert b3 bs'') (robdd_get_var b') b' \\<and>\n       (\\<forall>a. robdd_\\<alpha> b' a = robdd_\\<alpha> b' (a(v' := f)))\n 2. \\<not> (i' = i \\<and> v' = rv) \\<Longrightarrow>\n    \\<exists>b'.\n       robdd_id_map (insert b3 bs'') i' = Some b' \\<and>\n       b' \\<in> insert b3 bs'' \\<and>\n       robdd_invar_ext (insert b3 bs'') (robdd_get_var b') b' \\<and>\n       (\\<forall>a. robdd_\\<alpha> b' a = robdd_\\<alpha> b' (a(v' := f)))", "note iv'_eq = this"], ["proof (state)\nthis:\n  i' = i \\<and> v' = rv\n\ngoal (2 subgoals):\n 1. i' = i \\<and> v' = rv \\<Longrightarrow>\n    \\<exists>b'.\n       robdd_id_map (insert b3 bs'') i' = Some b' \\<and>\n       b' \\<in> insert b3 bs'' \\<and>\n       robdd_invar_ext (insert b3 bs'') (robdd_get_var b') b' \\<and>\n       (\\<forall>a. robdd_\\<alpha> b' a = robdd_\\<alpha> b' (a(v' := f)))\n 2. \\<not> (i' = i \\<and> v' = rv) \\<Longrightarrow>\n    \\<exists>b'.\n       robdd_id_map (insert b3 bs'') i' = Some b' \\<and>\n       b' \\<in> insert b3 bs'' \\<and>\n       robdd_invar_ext (insert b3 bs'') (robdd_get_var b') b' \\<and>\n       (\\<forall>a. robdd_\\<alpha> b' a = robdd_\\<alpha> b' (a(v' := f)))", "with lookup_eq map_id_i sem_b3 b3_invar v_less"], ["proof (chain)\npicking this:\n  c_lookup (v', i') (c_update (rv, i) b3 res_map'') = Some b'\n  robdd_id_map (insert b3 bs'') i = Some (robdd_var i l v r)\n  robdd_\\<alpha> b3 = robdd_\\<alpha> (robdd_var 0 l' v r')\n  robdd_invar_ext (insert b3 bs'') v b3\n  v < rv\n  i' = i \\<and> v' = rv", "show ?thesis"], ["proof (prove)\nusing this:\n  c_lookup (v', i') (c_update (rv, i) b3 res_map'') = Some b'\n  robdd_id_map (insert b3 bs'') i = Some (robdd_var i l v r)\n  robdd_\\<alpha> b3 = robdd_\\<alpha> (robdd_var 0 l' v r')\n  robdd_invar_ext (insert b3 bs'') v b3\n  v < rv\n  i' = i \\<and> v' = rv\n\ngoal (1 subgoal):\n 1. \\<exists>b'.\n       robdd_id_map (insert b3 bs'') i' = Some b' \\<and>\n       b' \\<in> insert b3 bs'' \\<and>\n       robdd_invar_ext (insert b3 bs'') (robdd_get_var b') b' \\<and>\n       (\\<forall>a. robdd_\\<alpha> b' a = robdd_\\<alpha> b' (a(v' := f)))", "by (simp add: c_invar c.update_correct c.lookup_correct\n                                sem_l' sem_r' fun_upd_def)"], ["proof (state)\nthis:\n  \\<exists>b'.\n     robdd_id_map (insert b3 bs'') i' = Some b' \\<and>\n     b' \\<in> insert b3 bs'' \\<and>\n     robdd_invar_ext (insert b3 bs'') (robdd_get_var b') b' \\<and>\n     (\\<forall>a. robdd_\\<alpha> b' a = robdd_\\<alpha> b' (a(v' := f)))\n\ngoal (1 subgoal):\n 1. \\<not> (i' = i \\<and> v' = rv) \\<Longrightarrow>\n    \\<exists>b'.\n       robdd_id_map (insert b3 bs'') i' = Some b' \\<and>\n       b' \\<in> insert b3 bs'' \\<and>\n       robdd_invar_ext (insert b3 bs'') (robdd_get_var b') b' \\<and>\n       (\\<forall>a. robdd_\\<alpha> b' a = robdd_\\<alpha> b' (a(v' := f)))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> (i' = i \\<and> v' = rv) \\<Longrightarrow>\n    \\<exists>b'.\n       robdd_id_map (insert b3 bs'') i' = Some b' \\<and>\n       b' \\<in> insert b3 bs'' \\<and>\n       robdd_invar_ext (insert b3 bs'') (robdd_get_var b') b' \\<and>\n       (\\<forall>a. robdd_\\<alpha> b' a = robdd_\\<alpha> b' (a(v' := f)))", "case False"], ["proof (state)\nthis:\n  \\<not> (i' = i \\<and> v' = rv)\n\ngoal (1 subgoal):\n 1. \\<not> (i' = i \\<and> v' = rv) \\<Longrightarrow>\n    \\<exists>b'.\n       robdd_id_map (insert b3 bs'') i' = Some b' \\<and>\n       b' \\<in> insert b3 bs'' \\<and>\n       robdd_invar_ext (insert b3 bs'') (robdd_get_var b') b' \\<and>\n       (\\<forall>a. robdd_\\<alpha> b' a = robdd_\\<alpha> b' (a(v' := f)))", "with lookup_eq"], ["proof (chain)\npicking this:\n  c_lookup (v', i') (c_update (rv, i) b3 res_map'') = Some b'\n  \\<not> (i' = i \\<and> v' = rv)", "have lookup_eq': \"c_lookup (v', i') res_map'' = Some b'\""], ["proof (prove)\nusing this:\n  c_lookup (v', i') (c_update (rv, i) b3 res_map'') = Some b'\n  \\<not> (i' = i \\<and> v' = rv)\n\ngoal (1 subgoal):\n 1. c_lookup (v', i') res_map'' = Some b'", "by (auto simp add: c_invar c.lookup_correct c.update_correct)"], ["proof (state)\nthis:\n  c_lookup (v', i') res_map'' = Some b'\n\ngoal (1 subgoal):\n 1. \\<not> (i' = i \\<and> v' = rv) \\<Longrightarrow>\n    \\<exists>b'.\n       robdd_id_map (insert b3 bs'') i' = Some b' \\<and>\n       b' \\<in> insert b3 bs'' \\<and>\n       robdd_invar_ext (insert b3 bs'') (robdd_get_var b') b' \\<and>\n       (\\<forall>a. robdd_\\<alpha> b' a = robdd_\\<alpha> b' (a(v' := f)))", "from restrict_map_invar_D2[OF invar_res_map'' lookup_eq']"], ["proof (chain)\npicking this:\n  \\<exists>b'.\n     robdd_id_map bs'' i' = Some b' \\<and>\n     b' \\<in> bs'' \\<and>\n     robdd_invar_ext bs'' (robdd_get_var b') b' \\<and>\n     (\\<forall>a. robdd_\\<alpha> b' a = robdd_\\<alpha> b' (a(v' := f)))", "obtain b'' where b''_props:\n                  \"robdd_id_map bs'' i' = Some b''\" \"b' \\<in> bs''\"\n                  \"robdd_invar_ext bs'' (robdd_get_var b'') b'\"\n                  \"\\<forall>a. robdd_\\<alpha> b' a = robdd_\\<alpha> b'' (a(v' := f))\""], ["proof (prove)\nusing this:\n  \\<exists>b'.\n     robdd_id_map bs'' i' = Some b' \\<and>\n     b' \\<in> bs'' \\<and>\n     robdd_invar_ext bs'' (robdd_get_var b') b' \\<and>\n     (\\<forall>a. robdd_\\<alpha> b' a = robdd_\\<alpha> b' (a(v' := f)))\n\ngoal (1 subgoal):\n 1. (\\<And>b''.\n        \\<lbrakk>robdd_id_map bs'' i' = Some b''; b' \\<in> bs'';\n         robdd_invar_ext bs'' (robdd_get_var b'') b';\n         \\<forall>a.\n            robdd_\\<alpha> b' a = robdd_\\<alpha> b'' (a(v' := f))\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  robdd_id_map bs'' i' = Some b''\n  b' \\<in> bs''\n  robdd_invar_ext bs'' (robdd_get_var b'') b'\n  \\<forall>a. robdd_\\<alpha> b' a = robdd_\\<alpha> b'' (a(v' := f))\n\ngoal (1 subgoal):\n 1. \\<not> (i' = i \\<and> v' = rv) \\<Longrightarrow>\n    \\<exists>b'.\n       robdd_id_map (insert b3 bs'') i' = Some b' \\<and>\n       b' \\<in> insert b3 bs'' \\<and>\n       robdd_invar_ext (insert b3 bs'') (robdd_get_var b') b' \\<and>\n       (\\<forall>a. robdd_\\<alpha> b' a = robdd_\\<alpha> b' (a(v' := f)))", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>b'.\n       robdd_id_map (insert b3 bs'') i' = Some b' \\<and>\n       b' \\<in> insert b3 bs'' \\<and>\n       robdd_invar_ext (insert b3 bs'') (robdd_get_var b') b' \\<and>\n       (\\<forall>a. robdd_\\<alpha> b' a = robdd_\\<alpha> b' (a(v' := f)))", "apply (rule_tac exI[where x = b''])"], ["proof (prove)\ngoal (1 subgoal):\n 1. robdd_id_map (insert b3 bs'') i' = Some b'' \\<and>\n    b' \\<in> insert b3 bs'' \\<and>\n    robdd_invar_ext (insert b3 bs'') (robdd_get_var b'') b' \\<and>\n    (\\<forall>a. robdd_\\<alpha> b' a = robdd_\\<alpha> b'' (a(v' := f)))", "apply (simp add: id_map_eq map_add_Some_iff b''_props)"], ["proof (prove)\ngoal (1 subgoal):\n 1. robdd_invar_ext (insert b3 bs'') (robdd_get_var b'') b'", "apply (insert b3_invar b''_props(3))"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>robdd_invar_ext (insert b3 bs'') v b3;\n     robdd_invar_ext bs'' (robdd_get_var b'') b'\\<rbrakk>\n    \\<Longrightarrow> robdd_invar_ext (insert b3 bs'') (robdd_get_var b'')\n                       b'", "apply (simp add: robdd_invar_ext_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  \\<exists>b'.\n     robdd_id_map (insert b3 bs'') i' = Some b' \\<and>\n     b' \\<in> insert b3 bs'' \\<and>\n     robdd_invar_ext (insert b3 bs'') (robdd_get_var b') b' \\<and>\n     (\\<forall>a. robdd_\\<alpha> b' a = robdd_\\<alpha> b' (a(v' := f)))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>b'.\n     robdd_id_map (insert b3 bs'') i' = Some b' \\<and>\n     b' \\<in> insert b3 bs'' \\<and>\n     robdd_invar_ext (insert b3 bs'') (robdd_get_var b') b' \\<and>\n     (\\<forall>a. robdd_\\<alpha> b' a = robdd_\\<alpha> b' (a(v' := f)))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  restrict_map_invar f (insert b3 bs'') (c_update (rv, i) b3 res_map'')\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  restrict_map_invar f (insert b3 bs'') (c_update (rv, i) b3 res_map'')\n\ngoal (1 subgoal):\n 1. c_lookup (rv, i) res_map = None \\<Longrightarrow>\n    \\<exists>bs'.\n       insert\n        (fst (robdd_restrict res_map rev_map f rv (robdd_var i l v r))) bs\n       \\<subseteq> bs' \\<and>\n       robdd_invar_ext bs' n\n        (fst (robdd_restrict res_map rev_map f rv\n               (robdd_var i l v r))) \\<and>\n       restrict_map_invar f bs'\n        (fst (snd (robdd_restrict res_map rev_map f rv\n                    (robdd_var i l v r)))) \\<and>\n       rev_map_invar bs'\n        (snd (snd (robdd_restrict res_map rev_map f rv\n                    (robdd_var i l v r)))) \\<and>\n       (\\<forall>a.\n           robdd_\\<alpha>\n            (fst (robdd_restrict res_map rev_map f rv (robdd_var i l v r)))\n            a =\n           robdd_\\<alpha> (robdd_var i l v r) (a(rv := f)))", "from robdd_restrict.simps[of res_map rev_map f rv ?b]"], ["proof (chain)\npicking this:\n  robdd_restrict res_map rev_map f rv (robdd_var i l v r) =\n  (case robdd_var i l v r of\n   robdd_leaf f' \\<Rightarrow> (robdd_leaf f', res_map, rev_map)\n   | robdd_var ia la va ra \\<Rightarrow>\n       if rv < va then (robdd_var i l v r, res_map, rev_map)\n       else if rv = va then (if f then la else ra, res_map, rev_map)\n            else case c_lookup (rv, ia) res_map of\n                 None \\<Rightarrow>\n                   let (l', res_map, rev_map) =\n                         robdd_restrict res_map rev_map f rv la;\n                       (r', res_map, rev_map) =\n                         robdd_restrict res_map rev_map f rv ra;\n                       (b3, rev_map) = robdd_construct rev_map l' va r';\n                       res_map = c_update (rv, ia) b3 res_map\n                   in (b3, res_map, rev_map)\n                 | Some b3 \\<Rightarrow> (b3, res_map, rev_map))", "show ?thesis"], ["proof (prove)\nusing this:\n  robdd_restrict res_map rev_map f rv (robdd_var i l v r) =\n  (case robdd_var i l v r of\n   robdd_leaf f' \\<Rightarrow> (robdd_leaf f', res_map, rev_map)\n   | robdd_var ia la va ra \\<Rightarrow>\n       if rv < va then (robdd_var i l v r, res_map, rev_map)\n       else if rv = va then (if f then la else ra, res_map, rev_map)\n            else case c_lookup (rv, ia) res_map of\n                 None \\<Rightarrow>\n                   let (l', res_map, rev_map) =\n                         robdd_restrict res_map rev_map f rv la;\n                       (r', res_map, rev_map) =\n                         robdd_restrict res_map rev_map f rv ra;\n                       (b3, rev_map) = robdd_construct rev_map l' va r';\n                       res_map = c_update (rv, ia) b3 res_map\n                   in (b3, res_map, rev_map)\n                 | Some b3 \\<Rightarrow> (b3, res_map, rev_map))\n\ngoal (1 subgoal):\n 1. \\<exists>bs'.\n       insert\n        (fst (robdd_restrict res_map rev_map f rv (robdd_var i l v r))) bs\n       \\<subseteq> bs' \\<and>\n       robdd_invar_ext bs' n\n        (fst (robdd_restrict res_map rev_map f rv\n               (robdd_var i l v r))) \\<and>\n       restrict_map_invar f bs'\n        (fst (snd (robdd_restrict res_map rev_map f rv\n                    (robdd_var i l v r)))) \\<and>\n       rev_map_invar bs'\n        (snd (snd (robdd_restrict res_map rev_map f rv\n                    (robdd_var i l v r)))) \\<and>\n       (\\<forall>a.\n           robdd_\\<alpha>\n            (fst (robdd_restrict res_map rev_map f rv (robdd_var i l v r)))\n            a =\n           robdd_\\<alpha> (robdd_var i l v r) (a(rv := f)))", "using v_less"], ["proof (prove)\nusing this:\n  robdd_restrict res_map rev_map f rv (robdd_var i l v r) =\n  (case robdd_var i l v r of\n   robdd_leaf f' \\<Rightarrow> (robdd_leaf f', res_map, rev_map)\n   | robdd_var ia la va ra \\<Rightarrow>\n       if rv < va then (robdd_var i l v r, res_map, rev_map)\n       else if rv = va then (if f then la else ra, res_map, rev_map)\n            else case c_lookup (rv, ia) res_map of\n                 None \\<Rightarrow>\n                   let (l', res_map, rev_map) =\n                         robdd_restrict res_map rev_map f rv la;\n                       (r', res_map, rev_map) =\n                         robdd_restrict res_map rev_map f rv ra;\n                       (b3, rev_map) = robdd_construct rev_map l' va r';\n                       res_map = c_update (rv, ia) b3 res_map\n                   in (b3, res_map, rev_map)\n                 | Some b3 \\<Rightarrow> (b3, res_map, rev_map))\n  v < rv\n\ngoal (1 subgoal):\n 1. \\<exists>bs'.\n       insert\n        (fst (robdd_restrict res_map rev_map f rv (robdd_var i l v r))) bs\n       \\<subseteq> bs' \\<and>\n       robdd_invar_ext bs' n\n        (fst (robdd_restrict res_map rev_map f rv\n               (robdd_var i l v r))) \\<and>\n       restrict_map_invar f bs'\n        (fst (snd (robdd_restrict res_map rev_map f rv\n                    (robdd_var i l v r)))) \\<and>\n       rev_map_invar bs'\n        (snd (snd (robdd_restrict res_map rev_map f rv\n                    (robdd_var i l v r)))) \\<and>\n       (\\<forall>a.\n           robdd_\\<alpha>\n            (fst (robdd_restrict res_map rev_map f rv (robdd_var i l v r)))\n            a =\n           robdd_\\<alpha> (robdd_var i l v r) (a(rv := f)))", "apply (rule_tac exI[where x = \"insert b3 bs''\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>robdd_restrict res_map rev_map f rv (robdd_var i l v r) =\n             (case robdd_var i l v r of\n              robdd_leaf f' \\<Rightarrow> (robdd_leaf f', res_map, rev_map)\n              | robdd_var ia la va ra \\<Rightarrow>\n                  if rv < va then (robdd_var i l v r, res_map, rev_map)\n                  else if rv = va\n                       then (if f then la else ra, res_map, rev_map)\n                       else case c_lookup (rv, ia) res_map of\n                            None \\<Rightarrow>\n                              let (l', res_map, rev_map) =\n                                    robdd_restrict res_map rev_map f rv la;\n                                  (r', res_map, rev_map) =\n                                    robdd_restrict res_map rev_map f rv ra;\n                                  (b3, rev_map) =\n                                    robdd_construct rev_map l' va r';\n                                  res_map = c_update (rv, ia) b3 res_map\n                              in (b3, res_map, rev_map)\n                            | Some b3 \\<Rightarrow> (b3, res_map, rev_map));\n     v < rv\\<rbrakk>\n    \\<Longrightarrow> insert\n                       (fst (robdd_restrict res_map rev_map f rv\n                              (robdd_var i l v r)))\n                       bs\n                      \\<subseteq> insert b3 bs'' \\<and>\n                      robdd_invar_ext (insert b3 bs'') n\n                       (fst (robdd_restrict res_map rev_map f rv\n                              (robdd_var i l v r))) \\<and>\n                      restrict_map_invar f (insert b3 bs'')\n                       (fst (snd (robdd_restrict res_map rev_map f rv\n                                   (robdd_var i l v r)))) \\<and>\n                      rev_map_invar (insert b3 bs'')\n                       (snd (snd (robdd_restrict res_map rev_map f rv\n                                   (robdd_var i l v r)))) \\<and>\n                      (\\<forall>a.\n                          robdd_\\<alpha>\n                           (fst (robdd_restrict res_map rev_map f rv\n                                  (robdd_var i l v r)))\n                           a =\n                          robdd_\\<alpha> (robdd_var i l v r) (a(rv := f)))", "apply (simp add: lookup_eq res_l_eq res_r_eq const_eq invar_rev_map'''\n                             sem_b3 sem_l' sem_r' b3_invar' bs_sub invar_res_map''')"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  \\<exists>bs'.\n     insert (fst (robdd_restrict res_map rev_map f rv (robdd_var i l v r)))\n      bs\n     \\<subseteq> bs' \\<and>\n     robdd_invar_ext bs' n\n      (fst (robdd_restrict res_map rev_map f rv (robdd_var i l v r))) \\<and>\n     restrict_map_invar f bs'\n      (fst (snd (robdd_restrict res_map rev_map f rv\n                  (robdd_var i l v r)))) \\<and>\n     rev_map_invar bs'\n      (snd (snd (robdd_restrict res_map rev_map f rv\n                  (robdd_var i l v r)))) \\<and>\n     (\\<forall>a.\n         robdd_\\<alpha>\n          (fst (robdd_restrict res_map rev_map f rv (robdd_var i l v r)))\n          a =\n         robdd_\\<alpha> (robdd_var i l v r) (a(rv := f)))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>bs'.\n     insert (fst (robdd_restrict res_map rev_map f rv (robdd_var i l v r)))\n      bs\n     \\<subseteq> bs' \\<and>\n     robdd_invar_ext bs' n\n      (fst (robdd_restrict res_map rev_map f rv (robdd_var i l v r))) \\<and>\n     restrict_map_invar f bs'\n      (fst (snd (robdd_restrict res_map rev_map f rv\n                  (robdd_var i l v r)))) \\<and>\n     rev_map_invar bs'\n      (snd (snd (robdd_restrict res_map rev_map f rv\n                  (robdd_var i l v r)))) \\<and>\n     (\\<forall>a.\n         robdd_\\<alpha>\n          (fst (robdd_restrict res_map rev_map f rv (robdd_var i l v r)))\n          a =\n         robdd_\\<alpha> (robdd_var i l v r) (a(rv := f)))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>bs'.\n     insert (fst (robdd_restrict res_map rev_map f rv (robdd_var i l v r)))\n      bs\n     \\<subseteq> bs' \\<and>\n     robdd_invar_ext bs' n\n      (fst (robdd_restrict res_map rev_map f rv (robdd_var i l v r))) \\<and>\n     restrict_map_invar f bs'\n      (fst (snd (robdd_restrict res_map rev_map f rv\n                  (robdd_var i l v r)))) \\<and>\n     rev_map_invar bs'\n      (snd (snd (robdd_restrict res_map rev_map f rv\n                  (robdd_var i l v r)))) \\<and>\n     (\\<forall>a.\n         robdd_\\<alpha>\n          (fst (robdd_restrict res_map rev_map f rv (robdd_var i l v r)))\n          a =\n         robdd_\\<alpha> (robdd_var i l v r) (a(rv := f)))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>bs'.\n     insert (fst (robdd_restrict res_map rev_map f rv (robdd_var i l v r)))\n      bs\n     \\<subseteq> bs' \\<and>\n     robdd_invar_ext bs' n\n      (fst (robdd_restrict res_map rev_map f rv (robdd_var i l v r))) \\<and>\n     restrict_map_invar f bs'\n      (fst (snd (robdd_restrict res_map rev_map f rv\n                  (robdd_var i l v r)))) \\<and>\n     rev_map_invar bs'\n      (snd (snd (robdd_restrict res_map rev_map f rv\n                  (robdd_var i l v r)))) \\<and>\n     (\\<forall>a.\n         robdd_\\<alpha>\n          (fst (robdd_restrict res_map rev_map f rv (robdd_var i l v r)))\n          a =\n         robdd_\\<alpha> (robdd_var i l v r) (a(rv := f)))\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "subsection \\<open>Semantics on lists\\<close>"], ["", "text \\<open>BDDs represent boolean expression. I.e. they are functions from assignments to \n  \\texttt{True} or \\texttt{False}. Here, assignments are represented by functions from\n  variable indices to the values of these Boolean variables. While this reprentation of \n  is convenient for proofs, a representation based on lists is more convinient for execution.\\<close>"], ["", "definition list_to_assignment_set :: \"bool option list \\<Rightarrow> (nat \\<Rightarrow> bool) set\" where\n\"list_to_assignment_set l = {a . (\\<forall>v < length l. (\\<forall>f. l ! v = Some f \\<longrightarrow> a v = f))}\""], ["", "definition shift_assignment where\n  \"shift_assignment (b::bool) a = (\\<lambda>v. case v of 0 \\<Rightarrow> b | Suc v' \\<Rightarrow> a v')\""], ["", "lemma inj_shift_assignement :\n  \"inj_on (shift_assignment b) S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. inj_on (shift_assignment b) S", "unfolding inj_on_def shift_assignment_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>S.\n       \\<forall>y\\<in>S. case_nat b x = case_nat b y \\<longrightarrow> x = y", "by (simp add: fun_eq_iff split: nat.splits)"], ["", "lemma list_to_assignment_set_None_simp [simp] :\n  \"list_to_assignment_set (None # l) = \n   list_to_assignment_set (Some True # l) \\<union> list_to_assignment_set (Some False # l)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. list_to_assignment_set (None # l) =\n    list_to_assignment_set (Some True # l) \\<union>\n    list_to_assignment_set (Some False # l)", "unfolding list_to_assignment_set_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. {a. \\<forall>v<length (None # l).\n           \\<forall>f. (None # l) ! v = Some f \\<longrightarrow> a v = f} =\n    {a. \\<forall>v<length (Some True # l).\n           \\<forall>f.\n              (Some True # l) ! v = Some f \\<longrightarrow>\n              a v = f} \\<union>\n    {a. \\<forall>v<length (Some False # l).\n           \\<forall>f.\n              (Some False # l) ! v = Some f \\<longrightarrow> a v = f}", "apply (simp add: set_eq_iff less_Suc_eq_0_disj \n            del: all_simps add: all_simps[symmetric])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x.\n       (\\<forall>f j.\n           j < length l \\<longrightarrow>\n           l ! j = Some f \\<longrightarrow> x (Suc j) = f) =\n       (\\<forall>v f j va fa ja.\n           (va = 0 \\<longrightarrow> fa \\<longrightarrow> x 0) \\<and>\n           (va = Suc ja \\<and> ja < length l \\<longrightarrow>\n            l ! ja = Some fa \\<longrightarrow> x (Suc ja) = fa) \\<or>\n           (v = 0 \\<longrightarrow>\n            \\<not> f \\<longrightarrow> \\<not> x 0) \\<and>\n           (v = Suc j \\<and> j < length l \\<longrightarrow>\n            l ! j = Some f \\<longrightarrow> x (Suc j) = f))", "apply (simp add: all_conj_distrib)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x.\n       (\\<forall>f j.\n           j < length l \\<longrightarrow>\n           l ! j = Some f \\<longrightarrow> x (Suc j) = f) =\n       (((\\<exists>f. f) \\<longrightarrow> x 0) \\<and>\n        (\\<forall>f j.\n            j < length l \\<longrightarrow>\n            l ! j = Some f \\<longrightarrow> x (Suc j) = f) \\<or>\n        (Ex Not \\<longrightarrow> \\<not> x 0) \\<and>\n        (\\<forall>f j.\n            j < length l \\<longrightarrow>\n            l ! j = Some f \\<longrightarrow> x (Suc j) = f))", "apply (intro allI iffI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<forall>f j.\n          j < length l \\<longrightarrow>\n          l ! j = Some f \\<longrightarrow> x (Suc j) = f \\<Longrightarrow>\n       ((\\<exists>f. f) \\<longrightarrow> x 0) \\<and>\n       (\\<forall>f j.\n           j < length l \\<longrightarrow>\n           l ! j = Some f \\<longrightarrow> x (Suc j) = f) \\<or>\n       (Ex Not \\<longrightarrow> \\<not> x 0) \\<and>\n       (\\<forall>f j.\n           j < length l \\<longrightarrow>\n           l ! j = Some f \\<longrightarrow> x (Suc j) = f)\n 2. \\<And>x f j.\n       ((\\<exists>f. f) \\<longrightarrow> x 0) \\<and>\n       (\\<forall>f j.\n           j < length l \\<longrightarrow>\n           l ! j = Some f \\<longrightarrow> x (Suc j) = f) \\<or>\n       (Ex Not \\<longrightarrow> \\<not> x 0) \\<and>\n       (\\<forall>f j.\n           j < length l \\<longrightarrow>\n           l ! j = Some f \\<longrightarrow> x (Suc j) = f) \\<Longrightarrow>\n       j < length l \\<longrightarrow>\n       l ! j = Some f \\<longrightarrow> x (Suc j) = f", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x f j.\n       ((\\<exists>f. f) \\<longrightarrow> x 0) \\<and>\n       (\\<forall>f j.\n           j < length l \\<longrightarrow>\n           l ! j = Some f \\<longrightarrow> x (Suc j) = f) \\<or>\n       (Ex Not \\<longrightarrow> \\<not> x 0) \\<and>\n       (\\<forall>f j.\n           j < length l \\<longrightarrow>\n           l ! j = Some f \\<longrightarrow> x (Suc j) = f) \\<Longrightarrow>\n       j < length l \\<longrightarrow>\n       l ! j = Some f \\<longrightarrow> x (Suc j) = f", "apply (elim disjE conjE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x f j.\n       \\<lbrakk>(\\<exists>f. f) \\<longrightarrow> x 0;\n        \\<forall>f j.\n           j < length l \\<longrightarrow>\n           l ! j = Some f \\<longrightarrow> x (Suc j) = f\\<rbrakk>\n       \\<Longrightarrow> j < length l \\<longrightarrow>\n                         l ! j = Some f \\<longrightarrow> x (Suc j) = f\n 2. \\<And>x f j.\n       \\<lbrakk>Ex Not \\<longrightarrow> \\<not> x 0;\n        \\<forall>f j.\n           j < length l \\<longrightarrow>\n           l ! j = Some f \\<longrightarrow> x (Suc j) = f\\<rbrakk>\n       \\<Longrightarrow> j < length l \\<longrightarrow>\n                         l ! j = Some f \\<longrightarrow> x (Suc j) = f", "apply simp_all"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma list_to_assignment_set_simps [simp]: \n  \"list_to_assignment_set [] = UNIV\" (is ?T1)\n  \"list_to_assignment_set (Some b # l) = (shift_assignment b) ` (list_to_assignment_set l)\" (is \"?T3 b\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. list_to_assignment_set [] = UNIV &&&\n    list_to_assignment_set (Some b # l) =\n    shift_assignment b ` list_to_assignment_set l", "proof -"], ["proof (state)\ngoal (2 subgoals):\n 1. list_to_assignment_set [] = UNIV\n 2. list_to_assignment_set (Some b # l) =\n    shift_assignment b ` list_to_assignment_set l", "show ?T1"], ["proof (prove)\ngoal (1 subgoal):\n 1. list_to_assignment_set [] = UNIV", "unfolding list_to_assignment_set_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. {a. \\<forall>v<length [].\n           \\<forall>f. [] ! v = Some f \\<longrightarrow> a v = f} =\n    UNIV", "by simp"], ["proof (state)\nthis:\n  list_to_assignment_set [] = UNIV\n\ngoal (1 subgoal):\n 1. list_to_assignment_set (Some b # l) =\n    shift_assignment b ` list_to_assignment_set l", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. list_to_assignment_set (Some b # l) =\n    shift_assignment b ` list_to_assignment_set l", "show \"?T3 b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. list_to_assignment_set (Some b # l) =\n    shift_assignment b ` list_to_assignment_set l", "unfolding list_to_assignment_set_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. {a. \\<forall>v<length (Some b # l).\n           \\<forall>f.\n              (Some b # l) ! v = Some f \\<longrightarrow> a v = f} =\n    shift_assignment b `\n    {a. \\<forall>v<length l.\n           \\<forall>f. l ! v = Some f \\<longrightarrow> a v = f}", "apply (simp add: set_eq_iff less_Suc_eq_0_disj shift_assignment_def \n                  del: all_simps add: all_simps[symmetric])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x.\n       (\\<forall>v f j.\n           (v = 0 \\<longrightarrow> b = f \\<longrightarrow> x 0 = f) \\<and>\n           (v = Suc j \\<and> j < length l \\<longrightarrow>\n            l ! j = Some f \\<longrightarrow> x (Suc j) = f)) =\n       (x \\<in> case_nat b `\n                {a. \\<forall>v f.\n                       v < length l \\<longrightarrow>\n                       l ! v = Some f \\<longrightarrow> a v = f})", "apply (simp add: all_conj_distrib image_iff)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x.\n       (x 0 = b \\<and>\n        (\\<forall>f j.\n            j < length l \\<longrightarrow>\n            l ! j = Some f \\<longrightarrow> x (Suc j) = f)) =\n       (\\<exists>xa.\n           (\\<forall>v<length l.\n               \\<forall>f. l ! v = Some f \\<longrightarrow> xa v = f) \\<and>\n           x = case_nat b xa)", "apply (intro allI iffI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       x 0 = b \\<and>\n       (\\<forall>f j.\n           j < length l \\<longrightarrow>\n           l ! j = Some f \\<longrightarrow> x (Suc j) = f) \\<Longrightarrow>\n       \\<exists>xa.\n          (\\<forall>v<length l.\n              \\<forall>f. l ! v = Some f \\<longrightarrow> xa v = f) \\<and>\n          x = case_nat b xa\n 2. \\<And>x.\n       \\<exists>xa.\n          (\\<forall>v<length l.\n              \\<forall>f. l ! v = Some f \\<longrightarrow> xa v = f) \\<and>\n          x = case_nat b xa \\<Longrightarrow>\n       x 0 = b \\<and>\n       (\\<forall>f j.\n           j < length l \\<longrightarrow>\n           l ! j = Some f \\<longrightarrow> x (Suc j) = f)", "apply (rule_tac x = \"\\<lambda>v. x (Suc v)\" in exI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       x 0 = b \\<and>\n       (\\<forall>f j.\n           j < length l \\<longrightarrow>\n           l ! j = Some f \\<longrightarrow> x (Suc j) = f) \\<Longrightarrow>\n       (\\<forall>v<length l.\n           \\<forall>f.\n              l ! v = Some f \\<longrightarrow> x (Suc v) = f) \\<and>\n       x = case_nat b (\\<lambda>v. x (Suc v))\n 2. \\<And>x.\n       \\<exists>xa.\n          (\\<forall>v<length l.\n              \\<forall>f. l ! v = Some f \\<longrightarrow> xa v = f) \\<and>\n          x = case_nat b xa \\<Longrightarrow>\n       x 0 = b \\<and>\n       (\\<forall>f j.\n           j < length l \\<longrightarrow>\n           l ! j = Some f \\<longrightarrow> x (Suc j) = f)", "apply (simp add: fun_eq_iff split: nat.split)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<exists>xa.\n          (\\<forall>v<length l.\n              \\<forall>f. l ! v = Some f \\<longrightarrow> xa v = f) \\<and>\n          x = case_nat b xa \\<Longrightarrow>\n       x 0 = b \\<and>\n       (\\<forall>f j.\n           j < length l \\<longrightarrow>\n           l ! j = Some f \\<longrightarrow> x (Suc j) = f)", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  list_to_assignment_set (Some b # l) =\n  shift_assignment b ` list_to_assignment_set l\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma infinite_list_to_assignment_set :\n  \"\\<not>(finite (list_to_assignment_set l))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. infinite (list_to_assignment_set l)", "proof (induct l)"], ["proof (state)\ngoal (2 subgoals):\n 1. infinite (list_to_assignment_set [])\n 2. \\<And>a l.\n       infinite (list_to_assignment_set l) \\<Longrightarrow>\n       infinite (list_to_assignment_set (a # l))", "case Nil"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. infinite (list_to_assignment_set [])\n 2. \\<And>a l.\n       infinite (list_to_assignment_set l) \\<Longrightarrow>\n       infinite (list_to_assignment_set (a # l))", "note l_eq = this"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. infinite (list_to_assignment_set [])\n 2. \\<And>a l.\n       infinite (list_to_assignment_set l) \\<Longrightarrow>\n       infinite (list_to_assignment_set (a # l))", "have inf_UNIV: \"\\<not>(finite (UNIV :: (nat \\<Rightarrow> bool) set))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. infinite UNIV", "proof (rule notI)"], ["proof (state)\ngoal (1 subgoal):\n 1. finite UNIV \\<Longrightarrow> False", "assume fin_UNIV: \"finite (UNIV :: (nat \\<Rightarrow> bool) set)\""], ["proof (state)\nthis:\n  finite UNIV\n\ngoal (1 subgoal):\n 1. finite UNIV \\<Longrightarrow> False", "from finite_fun_UNIVD1[OF fin_UNIV]"], ["proof (chain)\npicking this:\n  card UNIV \\<noteq> Suc 0 \\<Longrightarrow> finite UNIV", "show False"], ["proof (prove)\nusing this:\n  card UNIV \\<noteq> Suc 0 \\<Longrightarrow> finite UNIV\n\ngoal (1 subgoal):\n 1. False", "by simp"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  infinite UNIV\n\ngoal (2 subgoals):\n 1. infinite (list_to_assignment_set [])\n 2. \\<And>a l.\n       infinite (list_to_assignment_set l) \\<Longrightarrow>\n       infinite (list_to_assignment_set (a # l))", "thus ?case"], ["proof (prove)\nusing this:\n  infinite UNIV\n\ngoal (1 subgoal):\n 1. infinite (list_to_assignment_set [])", "by simp"], ["proof (state)\nthis:\n  infinite (list_to_assignment_set [])\n\ngoal (1 subgoal):\n 1. \\<And>a l.\n       infinite (list_to_assignment_set l) \\<Longrightarrow>\n       infinite (list_to_assignment_set (a # l))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a l.\n       infinite (list_to_assignment_set l) \\<Longrightarrow>\n       infinite (list_to_assignment_set (a # l))", "case (Cons bo l')"], ["proof (state)\nthis:\n  infinite (list_to_assignment_set l')\n\ngoal (1 subgoal):\n 1. \\<And>a l.\n       infinite (list_to_assignment_set l) \\<Longrightarrow>\n       infinite (list_to_assignment_set (a # l))", "note ind_hyp = Cons"], ["proof (state)\nthis:\n  infinite (list_to_assignment_set l')\n\ngoal (1 subgoal):\n 1. \\<And>a l.\n       infinite (list_to_assignment_set l) \\<Longrightarrow>\n       infinite (list_to_assignment_set (a # l))", "obtain b where sub_b: \"list_to_assignment_set (Some b # l') \\<subseteq> list_to_assignment_set (bo # l')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>b.\n        list_to_assignment_set (Some b # l')\n        \\<subseteq> list_to_assignment_set (bo # l') \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (cases bo) auto"], ["proof (state)\nthis:\n  list_to_assignment_set (Some b # l')\n  \\<subseteq> list_to_assignment_set (bo # l')\n\ngoal (1 subgoal):\n 1. \\<And>a l.\n       infinite (list_to_assignment_set l) \\<Longrightarrow>\n       infinite (list_to_assignment_set (a # l))", "have not_fin_b: \"\\<not>(finite (list_to_assignment_set (Some b # l')))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. infinite (list_to_assignment_set (Some b # l'))", "proof (rule notI)"], ["proof (state)\ngoal (1 subgoal):\n 1. finite (list_to_assignment_set (Some b # l')) \\<Longrightarrow> False", "assume \"finite (list_to_assignment_set (Some b # l'))\""], ["proof (state)\nthis:\n  finite (list_to_assignment_set (Some b # l'))\n\ngoal (1 subgoal):\n 1. finite (list_to_assignment_set (Some b # l')) \\<Longrightarrow> False", "hence \"finite (list_to_assignment_set l')\""], ["proof (prove)\nusing this:\n  finite (list_to_assignment_set (Some b # l'))\n\ngoal (1 subgoal):\n 1. finite (list_to_assignment_set l')", "apply (simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. finite\n     (shift_assignment b ` list_to_assignment_set l') \\<Longrightarrow>\n    finite (list_to_assignment_set l')", "apply (rule finite_imageD [of \"shift_assignment b\"])"], ["proof (prove)\ngoal (2 subgoals):\n 1. finite\n     (shift_assignment b ` list_to_assignment_set l') \\<Longrightarrow>\n    finite (shift_assignment b ` list_to_assignment_set l')\n 2. finite\n     (shift_assignment b ` list_to_assignment_set l') \\<Longrightarrow>\n    inj_on (shift_assignment b) (list_to_assignment_set l')", "apply (simp_all add: inj_shift_assignement)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  finite (list_to_assignment_set l')\n\ngoal (1 subgoal):\n 1. finite (list_to_assignment_set (Some b # l')) \\<Longrightarrow> False", "with ind_hyp"], ["proof (chain)\npicking this:\n  infinite (list_to_assignment_set l')\n  finite (list_to_assignment_set l')", "show False"], ["proof (prove)\nusing this:\n  infinite (list_to_assignment_set l')\n  finite (list_to_assignment_set l')\n\ngoal (1 subgoal):\n 1. False", "by simp"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  infinite (list_to_assignment_set (Some b # l'))\n\ngoal (1 subgoal):\n 1. \\<And>a l.\n       infinite (list_to_assignment_set l) \\<Longrightarrow>\n       infinite (list_to_assignment_set (a # l))", "from finite_subset[OF sub_b] not_fin_b"], ["proof (chain)\npicking this:\n  finite (list_to_assignment_set (bo # l')) \\<Longrightarrow>\n  finite (list_to_assignment_set (Some b # l'))\n  infinite (list_to_assignment_set (Some b # l'))", "show ?case"], ["proof (prove)\nusing this:\n  finite (list_to_assignment_set (bo # l')) \\<Longrightarrow>\n  finite (list_to_assignment_set (Some b # l'))\n  infinite (list_to_assignment_set (Some b # l'))\n\ngoal (1 subgoal):\n 1. infinite (list_to_assignment_set (bo # l'))", "by blast"], ["proof (state)\nthis:\n  infinite (list_to_assignment_set (bo # l'))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma list_to_assignment_set_not_empty :\n  \"(list_to_assignment_set l) \\<noteq> {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. list_to_assignment_set l \\<noteq> {}", "by (metis finite.emptyI infinite_list_to_assignment_set)"], ["", "fun robdd_list_\\<alpha> where\n   \"robdd_list_\\<alpha> (robdd_leaf f) n l = f\"\n | \"robdd_list_\\<alpha> (robdd_var i l v r) n [] = False\"\n | \"robdd_list_\\<alpha> (robdd_var i l v r) n (bo # bs) =\n     (if n = v then \n        (case bo of None \\<Rightarrow> robdd_list_\\<alpha> l (Suc n) bs \\<and> robdd_list_\\<alpha> r (Suc n) bs\n                  | Some True \\<Rightarrow> robdd_list_\\<alpha> l (Suc n) bs\n                  | Some False \\<Rightarrow> robdd_list_\\<alpha> r (Suc n) bs) \n      else (robdd_list_\\<alpha> (robdd_var i l v r) (Suc n) bs))\""], ["", "lemma robdd_list_\\<alpha>_correct_aux :\nassumes invar: \"robdd_invar_vars_greater n b\" \"robdd_invar_reduced b\"\nshows \"robdd_list_\\<alpha> b n l \\<longleftrightarrow> (\\<forall>a \\<in> (list_to_assignment_set l). robdd_\\<alpha> b (\\<lambda>v. a (v - n)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. robdd_list_\\<alpha> b n l =\n    (\\<forall>a\\<in>list_to_assignment_set l.\n        robdd_\\<alpha> b (\\<lambda>v. a (v - n)))", "using invar"], ["proof (prove)\nusing this:\n  robdd_invar_vars_greater n b\n  robdd_invar_reduced b\n\ngoal (1 subgoal):\n 1. robdd_list_\\<alpha> b n l =\n    (\\<forall>a\\<in>list_to_assignment_set l.\n        robdd_\\<alpha> b (\\<lambda>v. a (v - n)))", "proof (induct b n l rule: robdd_list_\\<alpha>.induct)"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>f n l.\n       \\<lbrakk>robdd_invar_vars_greater n (robdd_leaf f);\n        robdd_invar_reduced (robdd_leaf f)\\<rbrakk>\n       \\<Longrightarrow> robdd_list_\\<alpha> (robdd_leaf f) n l =\n                         (\\<forall>a\\<in>list_to_assignment_set l.\n                             robdd_\\<alpha> (robdd_leaf f)\n                              (\\<lambda>v. a (v - n)))\n 2. \\<And>i l v r n.\n       \\<lbrakk>robdd_invar_vars_greater n (robdd_var i l v r);\n        robdd_invar_reduced (robdd_var i l v r)\\<rbrakk>\n       \\<Longrightarrow> robdd_list_\\<alpha> (robdd_var i l v r) n [] =\n                         (\\<forall>a\\<in>list_to_assignment_set [].\n                             robdd_\\<alpha> (robdd_var i l v r)\n                              (\\<lambda>v. a (v - n)))\n 3. \\<And>i l v r n bo bs.\n       \\<lbrakk>\\<lbrakk>n = v; bo = None;\n                 robdd_invar_vars_greater (Suc n) l;\n                 robdd_invar_reduced l\\<rbrakk>\n                \\<Longrightarrow> robdd_list_\\<alpha> l (Suc n) bs =\n                                  (\\<forall>a\\<in>list_to_assignment_set bs.\nrobdd_\\<alpha> l (\\<lambda>v. a (v - Suc n)));\n        \\<lbrakk>n = v; bo = None; robdd_invar_vars_greater (Suc n) r;\n         robdd_invar_reduced r\\<rbrakk>\n        \\<Longrightarrow> robdd_list_\\<alpha> r (Suc n) bs =\n                          (\\<forall>a\\<in>list_to_assignment_set bs.\n                              robdd_\\<alpha> r (\\<lambda>v. a (v - Suc n)));\n        \\<And>x2.\n           \\<lbrakk>n = v; bo = Some x2; x2 = True;\n            robdd_invar_vars_greater (Suc n) l;\n            robdd_invar_reduced l\\<rbrakk>\n           \\<Longrightarrow> robdd_list_\\<alpha> l (Suc n) bs =\n                             (\\<forall>a\\<in>list_to_assignment_set bs.\n                                 robdd_\\<alpha> l\n                                  (\\<lambda>v. a (v - Suc n)));\n        \\<And>x2.\n           \\<lbrakk>n = v; bo = Some x2; x2 = False;\n            robdd_invar_vars_greater (Suc n) r;\n            robdd_invar_reduced r\\<rbrakk>\n           \\<Longrightarrow> robdd_list_\\<alpha> r (Suc n) bs =\n                             (\\<forall>a\\<in>list_to_assignment_set bs.\n                                 robdd_\\<alpha> r\n                                  (\\<lambda>v. a (v - Suc n)));\n        \\<lbrakk>n \\<noteq> v;\n         robdd_invar_vars_greater (Suc n) (robdd_var i l v r);\n         robdd_invar_reduced (robdd_var i l v r)\\<rbrakk>\n        \\<Longrightarrow> robdd_list_\\<alpha> (robdd_var i l v r) (Suc n)\n                           bs =\n                          (\\<forall>a\\<in>list_to_assignment_set bs.\n                              robdd_\\<alpha> (robdd_var i l v r)\n                               (\\<lambda>v. a (v - Suc n)));\n        robdd_invar_vars_greater n (robdd_var i l v r);\n        robdd_invar_reduced (robdd_var i l v r)\\<rbrakk>\n       \\<Longrightarrow> robdd_list_\\<alpha> (robdd_var i l v r) n\n                          (bo # bs) =\n                         (\\<forall>a\\<in>list_to_assignment_set (bo # bs).\n                             robdd_\\<alpha> (robdd_var i l v r)\n                              (\\<lambda>v. a (v - n)))", "case (1 f n l)"], ["proof (state)\nthis:\n  robdd_invar_vars_greater n (robdd_leaf f)\n  robdd_invar_reduced (robdd_leaf f)\n\ngoal (3 subgoals):\n 1. \\<And>f n l.\n       \\<lbrakk>robdd_invar_vars_greater n (robdd_leaf f);\n        robdd_invar_reduced (robdd_leaf f)\\<rbrakk>\n       \\<Longrightarrow> robdd_list_\\<alpha> (robdd_leaf f) n l =\n                         (\\<forall>a\\<in>list_to_assignment_set l.\n                             robdd_\\<alpha> (robdd_leaf f)\n                              (\\<lambda>v. a (v - n)))\n 2. \\<And>i l v r n.\n       \\<lbrakk>robdd_invar_vars_greater n (robdd_var i l v r);\n        robdd_invar_reduced (robdd_var i l v r)\\<rbrakk>\n       \\<Longrightarrow> robdd_list_\\<alpha> (robdd_var i l v r) n [] =\n                         (\\<forall>a\\<in>list_to_assignment_set [].\n                             robdd_\\<alpha> (robdd_var i l v r)\n                              (\\<lambda>v. a (v - n)))\n 3. \\<And>i l v r n bo bs.\n       \\<lbrakk>\\<lbrakk>n = v; bo = None;\n                 robdd_invar_vars_greater (Suc n) l;\n                 robdd_invar_reduced l\\<rbrakk>\n                \\<Longrightarrow> robdd_list_\\<alpha> l (Suc n) bs =\n                                  (\\<forall>a\\<in>list_to_assignment_set bs.\nrobdd_\\<alpha> l (\\<lambda>v. a (v - Suc n)));\n        \\<lbrakk>n = v; bo = None; robdd_invar_vars_greater (Suc n) r;\n         robdd_invar_reduced r\\<rbrakk>\n        \\<Longrightarrow> robdd_list_\\<alpha> r (Suc n) bs =\n                          (\\<forall>a\\<in>list_to_assignment_set bs.\n                              robdd_\\<alpha> r (\\<lambda>v. a (v - Suc n)));\n        \\<And>x2.\n           \\<lbrakk>n = v; bo = Some x2; x2 = True;\n            robdd_invar_vars_greater (Suc n) l;\n            robdd_invar_reduced l\\<rbrakk>\n           \\<Longrightarrow> robdd_list_\\<alpha> l (Suc n) bs =\n                             (\\<forall>a\\<in>list_to_assignment_set bs.\n                                 robdd_\\<alpha> l\n                                  (\\<lambda>v. a (v - Suc n)));\n        \\<And>x2.\n           \\<lbrakk>n = v; bo = Some x2; x2 = False;\n            robdd_invar_vars_greater (Suc n) r;\n            robdd_invar_reduced r\\<rbrakk>\n           \\<Longrightarrow> robdd_list_\\<alpha> r (Suc n) bs =\n                             (\\<forall>a\\<in>list_to_assignment_set bs.\n                                 robdd_\\<alpha> r\n                                  (\\<lambda>v. a (v - Suc n)));\n        \\<lbrakk>n \\<noteq> v;\n         robdd_invar_vars_greater (Suc n) (robdd_var i l v r);\n         robdd_invar_reduced (robdd_var i l v r)\\<rbrakk>\n        \\<Longrightarrow> robdd_list_\\<alpha> (robdd_var i l v r) (Suc n)\n                           bs =\n                          (\\<forall>a\\<in>list_to_assignment_set bs.\n                              robdd_\\<alpha> (robdd_var i l v r)\n                               (\\<lambda>v. a (v - Suc n)));\n        robdd_invar_vars_greater n (robdd_var i l v r);\n        robdd_invar_reduced (robdd_var i l v r)\\<rbrakk>\n       \\<Longrightarrow> robdd_list_\\<alpha> (robdd_var i l v r) n\n                          (bo # bs) =\n                         (\\<forall>a\\<in>list_to_assignment_set (bo # bs).\n                             robdd_\\<alpha> (robdd_var i l v r)\n                              (\\<lambda>v. a (v - n)))", "with list_to_assignment_set_not_empty[of l]"], ["proof (chain)\npicking this:\n  list_to_assignment_set l \\<noteq> {}\n  robdd_invar_vars_greater n (robdd_leaf f)\n  robdd_invar_reduced (robdd_leaf f)", "show ?case"], ["proof (prove)\nusing this:\n  list_to_assignment_set l \\<noteq> {}\n  robdd_invar_vars_greater n (robdd_leaf f)\n  robdd_invar_reduced (robdd_leaf f)\n\ngoal (1 subgoal):\n 1. robdd_list_\\<alpha> (robdd_leaf f) n l =\n    (\\<forall>a\\<in>list_to_assignment_set l.\n        robdd_\\<alpha> (robdd_leaf f) (\\<lambda>v. a (v - n)))", "by auto"], ["proof (state)\nthis:\n  robdd_list_\\<alpha> (robdd_leaf f) n l =\n  (\\<forall>a\\<in>list_to_assignment_set l.\n      robdd_\\<alpha> (robdd_leaf f) (\\<lambda>v. a (v - n)))\n\ngoal (2 subgoals):\n 1. \\<And>i l v r n.\n       \\<lbrakk>robdd_invar_vars_greater n (robdd_var i l v r);\n        robdd_invar_reduced (robdd_var i l v r)\\<rbrakk>\n       \\<Longrightarrow> robdd_list_\\<alpha> (robdd_var i l v r) n [] =\n                         (\\<forall>a\\<in>list_to_assignment_set [].\n                             robdd_\\<alpha> (robdd_var i l v r)\n                              (\\<lambda>v. a (v - n)))\n 2. \\<And>i l v r n bo bs.\n       \\<lbrakk>\\<lbrakk>n = v; bo = None;\n                 robdd_invar_vars_greater (Suc n) l;\n                 robdd_invar_reduced l\\<rbrakk>\n                \\<Longrightarrow> robdd_list_\\<alpha> l (Suc n) bs =\n                                  (\\<forall>a\\<in>list_to_assignment_set bs.\nrobdd_\\<alpha> l (\\<lambda>v. a (v - Suc n)));\n        \\<lbrakk>n = v; bo = None; robdd_invar_vars_greater (Suc n) r;\n         robdd_invar_reduced r\\<rbrakk>\n        \\<Longrightarrow> robdd_list_\\<alpha> r (Suc n) bs =\n                          (\\<forall>a\\<in>list_to_assignment_set bs.\n                              robdd_\\<alpha> r (\\<lambda>v. a (v - Suc n)));\n        \\<And>x2.\n           \\<lbrakk>n = v; bo = Some x2; x2 = True;\n            robdd_invar_vars_greater (Suc n) l;\n            robdd_invar_reduced l\\<rbrakk>\n           \\<Longrightarrow> robdd_list_\\<alpha> l (Suc n) bs =\n                             (\\<forall>a\\<in>list_to_assignment_set bs.\n                                 robdd_\\<alpha> l\n                                  (\\<lambda>v. a (v - Suc n)));\n        \\<And>x2.\n           \\<lbrakk>n = v; bo = Some x2; x2 = False;\n            robdd_invar_vars_greater (Suc n) r;\n            robdd_invar_reduced r\\<rbrakk>\n           \\<Longrightarrow> robdd_list_\\<alpha> r (Suc n) bs =\n                             (\\<forall>a\\<in>list_to_assignment_set bs.\n                                 robdd_\\<alpha> r\n                                  (\\<lambda>v. a (v - Suc n)));\n        \\<lbrakk>n \\<noteq> v;\n         robdd_invar_vars_greater (Suc n) (robdd_var i l v r);\n         robdd_invar_reduced (robdd_var i l v r)\\<rbrakk>\n        \\<Longrightarrow> robdd_list_\\<alpha> (robdd_var i l v r) (Suc n)\n                           bs =\n                          (\\<forall>a\\<in>list_to_assignment_set bs.\n                              robdd_\\<alpha> (robdd_var i l v r)\n                               (\\<lambda>v. a (v - Suc n)));\n        robdd_invar_vars_greater n (robdd_var i l v r);\n        robdd_invar_reduced (robdd_var i l v r)\\<rbrakk>\n       \\<Longrightarrow> robdd_list_\\<alpha> (robdd_var i l v r) n\n                          (bo # bs) =\n                         (\\<forall>a\\<in>list_to_assignment_set (bo # bs).\n                             robdd_\\<alpha> (robdd_var i l v r)\n                              (\\<lambda>v. a (v - n)))", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>i l v r n.\n       \\<lbrakk>robdd_invar_vars_greater n (robdd_var i l v r);\n        robdd_invar_reduced (robdd_var i l v r)\\<rbrakk>\n       \\<Longrightarrow> robdd_list_\\<alpha> (robdd_var i l v r) n [] =\n                         (\\<forall>a\\<in>list_to_assignment_set [].\n                             robdd_\\<alpha> (robdd_var i l v r)\n                              (\\<lambda>v. a (v - n)))\n 2. \\<And>i l v r n bo bs.\n       \\<lbrakk>\\<lbrakk>n = v; bo = None;\n                 robdd_invar_vars_greater (Suc n) l;\n                 robdd_invar_reduced l\\<rbrakk>\n                \\<Longrightarrow> robdd_list_\\<alpha> l (Suc n) bs =\n                                  (\\<forall>a\\<in>list_to_assignment_set bs.\nrobdd_\\<alpha> l (\\<lambda>v. a (v - Suc n)));\n        \\<lbrakk>n = v; bo = None; robdd_invar_vars_greater (Suc n) r;\n         robdd_invar_reduced r\\<rbrakk>\n        \\<Longrightarrow> robdd_list_\\<alpha> r (Suc n) bs =\n                          (\\<forall>a\\<in>list_to_assignment_set bs.\n                              robdd_\\<alpha> r (\\<lambda>v. a (v - Suc n)));\n        \\<And>x2.\n           \\<lbrakk>n = v; bo = Some x2; x2 = True;\n            robdd_invar_vars_greater (Suc n) l;\n            robdd_invar_reduced l\\<rbrakk>\n           \\<Longrightarrow> robdd_list_\\<alpha> l (Suc n) bs =\n                             (\\<forall>a\\<in>list_to_assignment_set bs.\n                                 robdd_\\<alpha> l\n                                  (\\<lambda>v. a (v - Suc n)));\n        \\<And>x2.\n           \\<lbrakk>n = v; bo = Some x2; x2 = False;\n            robdd_invar_vars_greater (Suc n) r;\n            robdd_invar_reduced r\\<rbrakk>\n           \\<Longrightarrow> robdd_list_\\<alpha> r (Suc n) bs =\n                             (\\<forall>a\\<in>list_to_assignment_set bs.\n                                 robdd_\\<alpha> r\n                                  (\\<lambda>v. a (v - Suc n)));\n        \\<lbrakk>n \\<noteq> v;\n         robdd_invar_vars_greater (Suc n) (robdd_var i l v r);\n         robdd_invar_reduced (robdd_var i l v r)\\<rbrakk>\n        \\<Longrightarrow> robdd_list_\\<alpha> (robdd_var i l v r) (Suc n)\n                           bs =\n                          (\\<forall>a\\<in>list_to_assignment_set bs.\n                              robdd_\\<alpha> (robdd_var i l v r)\n                               (\\<lambda>v. a (v - Suc n)));\n        robdd_invar_vars_greater n (robdd_var i l v r);\n        robdd_invar_reduced (robdd_var i l v r)\\<rbrakk>\n       \\<Longrightarrow> robdd_list_\\<alpha> (robdd_var i l v r) n\n                          (bo # bs) =\n                         (\\<forall>a\\<in>list_to_assignment_set (bo # bs).\n                             robdd_\\<alpha> (robdd_var i l v r)\n                              (\\<lambda>v. a (v - n)))", "case prems: (2 i ll v rr n)"], ["proof (state)\nthis:\n  robdd_invar_vars_greater n (robdd_var i ll v rr)\n  robdd_invar_reduced (robdd_var i ll v rr)\n\ngoal (2 subgoals):\n 1. \\<And>i l v r n.\n       \\<lbrakk>robdd_invar_vars_greater n (robdd_var i l v r);\n        robdd_invar_reduced (robdd_var i l v r)\\<rbrakk>\n       \\<Longrightarrow> robdd_list_\\<alpha> (robdd_var i l v r) n [] =\n                         (\\<forall>a\\<in>list_to_assignment_set [].\n                             robdd_\\<alpha> (robdd_var i l v r)\n                              (\\<lambda>v. a (v - n)))\n 2. \\<And>i l v r n bo bs.\n       \\<lbrakk>\\<lbrakk>n = v; bo = None;\n                 robdd_invar_vars_greater (Suc n) l;\n                 robdd_invar_reduced l\\<rbrakk>\n                \\<Longrightarrow> robdd_list_\\<alpha> l (Suc n) bs =\n                                  (\\<forall>a\\<in>list_to_assignment_set bs.\nrobdd_\\<alpha> l (\\<lambda>v. a (v - Suc n)));\n        \\<lbrakk>n = v; bo = None; robdd_invar_vars_greater (Suc n) r;\n         robdd_invar_reduced r\\<rbrakk>\n        \\<Longrightarrow> robdd_list_\\<alpha> r (Suc n) bs =\n                          (\\<forall>a\\<in>list_to_assignment_set bs.\n                              robdd_\\<alpha> r (\\<lambda>v. a (v - Suc n)));\n        \\<And>x2.\n           \\<lbrakk>n = v; bo = Some x2; x2 = True;\n            robdd_invar_vars_greater (Suc n) l;\n            robdd_invar_reduced l\\<rbrakk>\n           \\<Longrightarrow> robdd_list_\\<alpha> l (Suc n) bs =\n                             (\\<forall>a\\<in>list_to_assignment_set bs.\n                                 robdd_\\<alpha> l\n                                  (\\<lambda>v. a (v - Suc n)));\n        \\<And>x2.\n           \\<lbrakk>n = v; bo = Some x2; x2 = False;\n            robdd_invar_vars_greater (Suc n) r;\n            robdd_invar_reduced r\\<rbrakk>\n           \\<Longrightarrow> robdd_list_\\<alpha> r (Suc n) bs =\n                             (\\<forall>a\\<in>list_to_assignment_set bs.\n                                 robdd_\\<alpha> r\n                                  (\\<lambda>v. a (v - Suc n)));\n        \\<lbrakk>n \\<noteq> v;\n         robdd_invar_vars_greater (Suc n) (robdd_var i l v r);\n         robdd_invar_reduced (robdd_var i l v r)\\<rbrakk>\n        \\<Longrightarrow> robdd_list_\\<alpha> (robdd_var i l v r) (Suc n)\n                           bs =\n                          (\\<forall>a\\<in>list_to_assignment_set bs.\n                              robdd_\\<alpha> (robdd_var i l v r)\n                               (\\<lambda>v. a (v - Suc n)));\n        robdd_invar_vars_greater n (robdd_var i l v r);\n        robdd_invar_reduced (robdd_var i l v r)\\<rbrakk>\n       \\<Longrightarrow> robdd_list_\\<alpha> (robdd_var i l v r) n\n                          (bo # bs) =\n                         (\\<forall>a\\<in>list_to_assignment_set (bo # bs).\n                             robdd_\\<alpha> (robdd_var i l v r)\n                              (\\<lambda>v. a (v - n)))", "note invar = prems(1,2)"], ["proof (state)\nthis:\n  robdd_invar_vars_greater n (robdd_var i ll v rr)\n  robdd_invar_reduced (robdd_var i ll v rr)\n\ngoal (2 subgoals):\n 1. \\<And>i l v r n.\n       \\<lbrakk>robdd_invar_vars_greater n (robdd_var i l v r);\n        robdd_invar_reduced (robdd_var i l v r)\\<rbrakk>\n       \\<Longrightarrow> robdd_list_\\<alpha> (robdd_var i l v r) n [] =\n                         (\\<forall>a\\<in>list_to_assignment_set [].\n                             robdd_\\<alpha> (robdd_var i l v r)\n                              (\\<lambda>v. a (v - n)))\n 2. \\<And>i l v r n bo bs.\n       \\<lbrakk>\\<lbrakk>n = v; bo = None;\n                 robdd_invar_vars_greater (Suc n) l;\n                 robdd_invar_reduced l\\<rbrakk>\n                \\<Longrightarrow> robdd_list_\\<alpha> l (Suc n) bs =\n                                  (\\<forall>a\\<in>list_to_assignment_set bs.\nrobdd_\\<alpha> l (\\<lambda>v. a (v - Suc n)));\n        \\<lbrakk>n = v; bo = None; robdd_invar_vars_greater (Suc n) r;\n         robdd_invar_reduced r\\<rbrakk>\n        \\<Longrightarrow> robdd_list_\\<alpha> r (Suc n) bs =\n                          (\\<forall>a\\<in>list_to_assignment_set bs.\n                              robdd_\\<alpha> r (\\<lambda>v. a (v - Suc n)));\n        \\<And>x2.\n           \\<lbrakk>n = v; bo = Some x2; x2 = True;\n            robdd_invar_vars_greater (Suc n) l;\n            robdd_invar_reduced l\\<rbrakk>\n           \\<Longrightarrow> robdd_list_\\<alpha> l (Suc n) bs =\n                             (\\<forall>a\\<in>list_to_assignment_set bs.\n                                 robdd_\\<alpha> l\n                                  (\\<lambda>v. a (v - Suc n)));\n        \\<And>x2.\n           \\<lbrakk>n = v; bo = Some x2; x2 = False;\n            robdd_invar_vars_greater (Suc n) r;\n            robdd_invar_reduced r\\<rbrakk>\n           \\<Longrightarrow> robdd_list_\\<alpha> r (Suc n) bs =\n                             (\\<forall>a\\<in>list_to_assignment_set bs.\n                                 robdd_\\<alpha> r\n                                  (\\<lambda>v. a (v - Suc n)));\n        \\<lbrakk>n \\<noteq> v;\n         robdd_invar_vars_greater (Suc n) (robdd_var i l v r);\n         robdd_invar_reduced (robdd_var i l v r)\\<rbrakk>\n        \\<Longrightarrow> robdd_list_\\<alpha> (robdd_var i l v r) (Suc n)\n                           bs =\n                          (\\<forall>a\\<in>list_to_assignment_set bs.\n                              robdd_\\<alpha> (robdd_var i l v r)\n                               (\\<lambda>v. a (v - Suc n)));\n        robdd_invar_vars_greater n (robdd_var i l v r);\n        robdd_invar_reduced (robdd_var i l v r)\\<rbrakk>\n       \\<Longrightarrow> robdd_list_\\<alpha> (robdd_var i l v r) n\n                          (bo # bs) =\n                         (\\<forall>a\\<in>list_to_assignment_set (bo # bs).\n                             robdd_\\<alpha> (robdd_var i l v r)\n                              (\\<lambda>v. a (v - n)))", "from invar"], ["proof (chain)\npicking this:\n  robdd_invar_vars_greater n (robdd_var i ll v rr)\n  robdd_invar_reduced (robdd_var i ll v rr)", "have \"robdd_\\<alpha> ll \\<noteq> robdd_\\<alpha> rr\""], ["proof (prove)\nusing this:\n  robdd_invar_vars_greater n (robdd_var i ll v rr)\n  robdd_invar_reduced (robdd_var i ll v rr)\n\ngoal (1 subgoal):\n 1. robdd_\\<alpha> ll \\<noteq> robdd_\\<alpha> rr", "by (metis robdd_equiv_alt_def_full robdd_invar_reduced.simps(2) \n              robdd_invar_vars_greater.simps(2) robdd_invar_vars_impl)"], ["proof (state)\nthis:\n  robdd_\\<alpha> ll \\<noteq> robdd_\\<alpha> rr\n\ngoal (2 subgoals):\n 1. \\<And>i l v r n.\n       \\<lbrakk>robdd_invar_vars_greater n (robdd_var i l v r);\n        robdd_invar_reduced (robdd_var i l v r)\\<rbrakk>\n       \\<Longrightarrow> robdd_list_\\<alpha> (robdd_var i l v r) n [] =\n                         (\\<forall>a\\<in>list_to_assignment_set [].\n                             robdd_\\<alpha> (robdd_var i l v r)\n                              (\\<lambda>v. a (v - n)))\n 2. \\<And>i l v r n bo bs.\n       \\<lbrakk>\\<lbrakk>n = v; bo = None;\n                 robdd_invar_vars_greater (Suc n) l;\n                 robdd_invar_reduced l\\<rbrakk>\n                \\<Longrightarrow> robdd_list_\\<alpha> l (Suc n) bs =\n                                  (\\<forall>a\\<in>list_to_assignment_set bs.\nrobdd_\\<alpha> l (\\<lambda>v. a (v - Suc n)));\n        \\<lbrakk>n = v; bo = None; robdd_invar_vars_greater (Suc n) r;\n         robdd_invar_reduced r\\<rbrakk>\n        \\<Longrightarrow> robdd_list_\\<alpha> r (Suc n) bs =\n                          (\\<forall>a\\<in>list_to_assignment_set bs.\n                              robdd_\\<alpha> r (\\<lambda>v. a (v - Suc n)));\n        \\<And>x2.\n           \\<lbrakk>n = v; bo = Some x2; x2 = True;\n            robdd_invar_vars_greater (Suc n) l;\n            robdd_invar_reduced l\\<rbrakk>\n           \\<Longrightarrow> robdd_list_\\<alpha> l (Suc n) bs =\n                             (\\<forall>a\\<in>list_to_assignment_set bs.\n                                 robdd_\\<alpha> l\n                                  (\\<lambda>v. a (v - Suc n)));\n        \\<And>x2.\n           \\<lbrakk>n = v; bo = Some x2; x2 = False;\n            robdd_invar_vars_greater (Suc n) r;\n            robdd_invar_reduced r\\<rbrakk>\n           \\<Longrightarrow> robdd_list_\\<alpha> r (Suc n) bs =\n                             (\\<forall>a\\<in>list_to_assignment_set bs.\n                                 robdd_\\<alpha> r\n                                  (\\<lambda>v. a (v - Suc n)));\n        \\<lbrakk>n \\<noteq> v;\n         robdd_invar_vars_greater (Suc n) (robdd_var i l v r);\n         robdd_invar_reduced (robdd_var i l v r)\\<rbrakk>\n        \\<Longrightarrow> robdd_list_\\<alpha> (robdd_var i l v r) (Suc n)\n                           bs =\n                          (\\<forall>a\\<in>list_to_assignment_set bs.\n                              robdd_\\<alpha> (robdd_var i l v r)\n                               (\\<lambda>v. a (v - Suc n)));\n        robdd_invar_vars_greater n (robdd_var i l v r);\n        robdd_invar_reduced (robdd_var i l v r)\\<rbrakk>\n       \\<Longrightarrow> robdd_list_\\<alpha> (robdd_var i l v r) n\n                          (bo # bs) =\n                         (\\<forall>a\\<in>list_to_assignment_set (bo # bs).\n                             robdd_\\<alpha> (robdd_var i l v r)\n                              (\\<lambda>v. a (v - n)))", "then"], ["proof (chain)\npicking this:\n  robdd_\\<alpha> ll \\<noteq> robdd_\\<alpha> rr", "obtain a where a_sem_neq: \"robdd_\\<alpha> ll a \\<noteq> robdd_\\<alpha> rr a\""], ["proof (prove)\nusing this:\n  robdd_\\<alpha> ll \\<noteq> robdd_\\<alpha> rr\n\ngoal (1 subgoal):\n 1. (\\<And>a.\n        robdd_\\<alpha> ll a \\<noteq> robdd_\\<alpha> rr a \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (auto simp add: fun_eq_iff)"], ["proof (state)\nthis:\n  robdd_\\<alpha> ll a \\<noteq> robdd_\\<alpha> rr a\n\ngoal (2 subgoals):\n 1. \\<And>i l v r n.\n       \\<lbrakk>robdd_invar_vars_greater n (robdd_var i l v r);\n        robdd_invar_reduced (robdd_var i l v r)\\<rbrakk>\n       \\<Longrightarrow> robdd_list_\\<alpha> (robdd_var i l v r) n [] =\n                         (\\<forall>a\\<in>list_to_assignment_set [].\n                             robdd_\\<alpha> (robdd_var i l v r)\n                              (\\<lambda>v. a (v - n)))\n 2. \\<And>i l v r n bo bs.\n       \\<lbrakk>\\<lbrakk>n = v; bo = None;\n                 robdd_invar_vars_greater (Suc n) l;\n                 robdd_invar_reduced l\\<rbrakk>\n                \\<Longrightarrow> robdd_list_\\<alpha> l (Suc n) bs =\n                                  (\\<forall>a\\<in>list_to_assignment_set bs.\nrobdd_\\<alpha> l (\\<lambda>v. a (v - Suc n)));\n        \\<lbrakk>n = v; bo = None; robdd_invar_vars_greater (Suc n) r;\n         robdd_invar_reduced r\\<rbrakk>\n        \\<Longrightarrow> robdd_list_\\<alpha> r (Suc n) bs =\n                          (\\<forall>a\\<in>list_to_assignment_set bs.\n                              robdd_\\<alpha> r (\\<lambda>v. a (v - Suc n)));\n        \\<And>x2.\n           \\<lbrakk>n = v; bo = Some x2; x2 = True;\n            robdd_invar_vars_greater (Suc n) l;\n            robdd_invar_reduced l\\<rbrakk>\n           \\<Longrightarrow> robdd_list_\\<alpha> l (Suc n) bs =\n                             (\\<forall>a\\<in>list_to_assignment_set bs.\n                                 robdd_\\<alpha> l\n                                  (\\<lambda>v. a (v - Suc n)));\n        \\<And>x2.\n           \\<lbrakk>n = v; bo = Some x2; x2 = False;\n            robdd_invar_vars_greater (Suc n) r;\n            robdd_invar_reduced r\\<rbrakk>\n           \\<Longrightarrow> robdd_list_\\<alpha> r (Suc n) bs =\n                             (\\<forall>a\\<in>list_to_assignment_set bs.\n                                 robdd_\\<alpha> r\n                                  (\\<lambda>v. a (v - Suc n)));\n        \\<lbrakk>n \\<noteq> v;\n         robdd_invar_vars_greater (Suc n) (robdd_var i l v r);\n         robdd_invar_reduced (robdd_var i l v r)\\<rbrakk>\n        \\<Longrightarrow> robdd_list_\\<alpha> (robdd_var i l v r) (Suc n)\n                           bs =\n                          (\\<forall>a\\<in>list_to_assignment_set bs.\n                              robdd_\\<alpha> (robdd_var i l v r)\n                               (\\<lambda>v. a (v - Suc n)));\n        robdd_invar_vars_greater n (robdd_var i l v r);\n        robdd_invar_reduced (robdd_var i l v r)\\<rbrakk>\n       \\<Longrightarrow> robdd_list_\\<alpha> (robdd_var i l v r) n\n                          (bo # bs) =\n                         (\\<forall>a\\<in>list_to_assignment_set (bo # bs).\n                             robdd_\\<alpha> (robdd_var i l v r)\n                              (\\<lambda>v. a (v - n)))", "define aa where \"aa v = a (v + n)\" for v"], ["proof (state)\nthis:\n  aa ?v = a (?v + n)\n\ngoal (2 subgoals):\n 1. \\<And>i l v r n.\n       \\<lbrakk>robdd_invar_vars_greater n (robdd_var i l v r);\n        robdd_invar_reduced (robdd_var i l v r)\\<rbrakk>\n       \\<Longrightarrow> robdd_list_\\<alpha> (robdd_var i l v r) n [] =\n                         (\\<forall>a\\<in>list_to_assignment_set [].\n                             robdd_\\<alpha> (robdd_var i l v r)\n                              (\\<lambda>v. a (v - n)))\n 2. \\<And>i l v r n bo bs.\n       \\<lbrakk>\\<lbrakk>n = v; bo = None;\n                 robdd_invar_vars_greater (Suc n) l;\n                 robdd_invar_reduced l\\<rbrakk>\n                \\<Longrightarrow> robdd_list_\\<alpha> l (Suc n) bs =\n                                  (\\<forall>a\\<in>list_to_assignment_set bs.\nrobdd_\\<alpha> l (\\<lambda>v. a (v - Suc n)));\n        \\<lbrakk>n = v; bo = None; robdd_invar_vars_greater (Suc n) r;\n         robdd_invar_reduced r\\<rbrakk>\n        \\<Longrightarrow> robdd_list_\\<alpha> r (Suc n) bs =\n                          (\\<forall>a\\<in>list_to_assignment_set bs.\n                              robdd_\\<alpha> r (\\<lambda>v. a (v - Suc n)));\n        \\<And>x2.\n           \\<lbrakk>n = v; bo = Some x2; x2 = True;\n            robdd_invar_vars_greater (Suc n) l;\n            robdd_invar_reduced l\\<rbrakk>\n           \\<Longrightarrow> robdd_list_\\<alpha> l (Suc n) bs =\n                             (\\<forall>a\\<in>list_to_assignment_set bs.\n                                 robdd_\\<alpha> l\n                                  (\\<lambda>v. a (v - Suc n)));\n        \\<And>x2.\n           \\<lbrakk>n = v; bo = Some x2; x2 = False;\n            robdd_invar_vars_greater (Suc n) r;\n            robdd_invar_reduced r\\<rbrakk>\n           \\<Longrightarrow> robdd_list_\\<alpha> r (Suc n) bs =\n                             (\\<forall>a\\<in>list_to_assignment_set bs.\n                                 robdd_\\<alpha> r\n                                  (\\<lambda>v. a (v - Suc n)));\n        \\<lbrakk>n \\<noteq> v;\n         robdd_invar_vars_greater (Suc n) (robdd_var i l v r);\n         robdd_invar_reduced (robdd_var i l v r)\\<rbrakk>\n        \\<Longrightarrow> robdd_list_\\<alpha> (robdd_var i l v r) (Suc n)\n                           bs =\n                          (\\<forall>a\\<in>list_to_assignment_set bs.\n                              robdd_\\<alpha> (robdd_var i l v r)\n                               (\\<lambda>v. a (v - Suc n)));\n        robdd_invar_vars_greater n (robdd_var i l v r);\n        robdd_invar_reduced (robdd_var i l v r)\\<rbrakk>\n       \\<Longrightarrow> robdd_list_\\<alpha> (robdd_var i l v r) n\n                          (bo # bs) =\n                         (\\<forall>a\\<in>list_to_assignment_set (bo # bs).\n                             robdd_\\<alpha> (robdd_var i l v r)\n                              (\\<lambda>v. a (v - n)))", "from invar(1)"], ["proof (chain)\npicking this:\n  robdd_invar_vars_greater n (robdd_var i ll v rr)", "have ll_sem: \"\\<And>b. robdd_\\<alpha> ll (\\<lambda>v'. (aa(v - n := b)) (v' - n)) = robdd_\\<alpha> ll a\""], ["proof (prove)\nusing this:\n  robdd_invar_vars_greater n (robdd_var i ll v rr)\n\ngoal (1 subgoal):\n 1. \\<And>b.\n       robdd_\\<alpha> ll (\\<lambda>v'. (aa(v - n := b)) (v' - n)) =\n       robdd_\\<alpha> ll a", "apply (rule_tac robdd_\\<alpha>_invar_greater [of \"Suc v\"])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>b.\n       robdd_invar_vars_greater n (robdd_var i ll v rr) \\<Longrightarrow>\n       robdd_invar_vars_greater (Suc v) ll\n 2. \\<And>b va.\n       \\<lbrakk>robdd_invar_vars_greater n (robdd_var i ll v rr);\n        Suc v \\<le> va\\<rbrakk>\n       \\<Longrightarrow> (aa(v - n := b)) (va - n) = a va", "apply (simp_all add: aa_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>b va.\n       \\<lbrakk>n \\<le> v \\<and>\n                robdd_invar_vars_greater (Suc v) ll \\<and>\n                robdd_invar_vars_greater (Suc v) rr;\n        Suc v \\<le> va\\<rbrakk>\n       \\<Longrightarrow> va - n = v - n \\<longrightarrow> b = a va", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  robdd_\\<alpha> ll (\\<lambda>v'. (aa(v - n := ?b)) (v' - n)) =\n  robdd_\\<alpha> ll a\n\ngoal (2 subgoals):\n 1. \\<And>i l v r n.\n       \\<lbrakk>robdd_invar_vars_greater n (robdd_var i l v r);\n        robdd_invar_reduced (robdd_var i l v r)\\<rbrakk>\n       \\<Longrightarrow> robdd_list_\\<alpha> (robdd_var i l v r) n [] =\n                         (\\<forall>a\\<in>list_to_assignment_set [].\n                             robdd_\\<alpha> (robdd_var i l v r)\n                              (\\<lambda>v. a (v - n)))\n 2. \\<And>i l v r n bo bs.\n       \\<lbrakk>\\<lbrakk>n = v; bo = None;\n                 robdd_invar_vars_greater (Suc n) l;\n                 robdd_invar_reduced l\\<rbrakk>\n                \\<Longrightarrow> robdd_list_\\<alpha> l (Suc n) bs =\n                                  (\\<forall>a\\<in>list_to_assignment_set bs.\nrobdd_\\<alpha> l (\\<lambda>v. a (v - Suc n)));\n        \\<lbrakk>n = v; bo = None; robdd_invar_vars_greater (Suc n) r;\n         robdd_invar_reduced r\\<rbrakk>\n        \\<Longrightarrow> robdd_list_\\<alpha> r (Suc n) bs =\n                          (\\<forall>a\\<in>list_to_assignment_set bs.\n                              robdd_\\<alpha> r (\\<lambda>v. a (v - Suc n)));\n        \\<And>x2.\n           \\<lbrakk>n = v; bo = Some x2; x2 = True;\n            robdd_invar_vars_greater (Suc n) l;\n            robdd_invar_reduced l\\<rbrakk>\n           \\<Longrightarrow> robdd_list_\\<alpha> l (Suc n) bs =\n                             (\\<forall>a\\<in>list_to_assignment_set bs.\n                                 robdd_\\<alpha> l\n                                  (\\<lambda>v. a (v - Suc n)));\n        \\<And>x2.\n           \\<lbrakk>n = v; bo = Some x2; x2 = False;\n            robdd_invar_vars_greater (Suc n) r;\n            robdd_invar_reduced r\\<rbrakk>\n           \\<Longrightarrow> robdd_list_\\<alpha> r (Suc n) bs =\n                             (\\<forall>a\\<in>list_to_assignment_set bs.\n                                 robdd_\\<alpha> r\n                                  (\\<lambda>v. a (v - Suc n)));\n        \\<lbrakk>n \\<noteq> v;\n         robdd_invar_vars_greater (Suc n) (robdd_var i l v r);\n         robdd_invar_reduced (robdd_var i l v r)\\<rbrakk>\n        \\<Longrightarrow> robdd_list_\\<alpha> (robdd_var i l v r) (Suc n)\n                           bs =\n                          (\\<forall>a\\<in>list_to_assignment_set bs.\n                              robdd_\\<alpha> (robdd_var i l v r)\n                               (\\<lambda>v. a (v - Suc n)));\n        robdd_invar_vars_greater n (robdd_var i l v r);\n        robdd_invar_reduced (robdd_var i l v r)\\<rbrakk>\n       \\<Longrightarrow> robdd_list_\\<alpha> (robdd_var i l v r) n\n                          (bo # bs) =\n                         (\\<forall>a\\<in>list_to_assignment_set (bo # bs).\n                             robdd_\\<alpha> (robdd_var i l v r)\n                              (\\<lambda>v. a (v - n)))", "from invar(1)"], ["proof (chain)\npicking this:\n  robdd_invar_vars_greater n (robdd_var i ll v rr)", "have rr_sem: \"\\<And>b. robdd_\\<alpha> rr (\\<lambda>v'. (aa(v - n := b)) (v' - n)) = robdd_\\<alpha> rr a\""], ["proof (prove)\nusing this:\n  robdd_invar_vars_greater n (robdd_var i ll v rr)\n\ngoal (1 subgoal):\n 1. \\<And>b.\n       robdd_\\<alpha> rr (\\<lambda>v'. (aa(v - n := b)) (v' - n)) =\n       robdd_\\<alpha> rr a", "apply (rule_tac robdd_\\<alpha>_invar_greater [of \"Suc v\"])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>b.\n       robdd_invar_vars_greater n (robdd_var i ll v rr) \\<Longrightarrow>\n       robdd_invar_vars_greater (Suc v) rr\n 2. \\<And>b va.\n       \\<lbrakk>robdd_invar_vars_greater n (robdd_var i ll v rr);\n        Suc v \\<le> va\\<rbrakk>\n       \\<Longrightarrow> (aa(v - n := b)) (va - n) = a va", "apply (simp_all add: aa_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>b va.\n       \\<lbrakk>n \\<le> v \\<and>\n                robdd_invar_vars_greater (Suc v) ll \\<and>\n                robdd_invar_vars_greater (Suc v) rr;\n        Suc v \\<le> va\\<rbrakk>\n       \\<Longrightarrow> va - n = v - n \\<longrightarrow> b = a va", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  robdd_\\<alpha> rr (\\<lambda>v'. (aa(v - n := ?b)) (v' - n)) =\n  robdd_\\<alpha> rr a\n\ngoal (2 subgoals):\n 1. \\<And>i l v r n.\n       \\<lbrakk>robdd_invar_vars_greater n (robdd_var i l v r);\n        robdd_invar_reduced (robdd_var i l v r)\\<rbrakk>\n       \\<Longrightarrow> robdd_list_\\<alpha> (robdd_var i l v r) n [] =\n                         (\\<forall>a\\<in>list_to_assignment_set [].\n                             robdd_\\<alpha> (robdd_var i l v r)\n                              (\\<lambda>v. a (v - n)))\n 2. \\<And>i l v r n bo bs.\n       \\<lbrakk>\\<lbrakk>n = v; bo = None;\n                 robdd_invar_vars_greater (Suc n) l;\n                 robdd_invar_reduced l\\<rbrakk>\n                \\<Longrightarrow> robdd_list_\\<alpha> l (Suc n) bs =\n                                  (\\<forall>a\\<in>list_to_assignment_set bs.\nrobdd_\\<alpha> l (\\<lambda>v. a (v - Suc n)));\n        \\<lbrakk>n = v; bo = None; robdd_invar_vars_greater (Suc n) r;\n         robdd_invar_reduced r\\<rbrakk>\n        \\<Longrightarrow> robdd_list_\\<alpha> r (Suc n) bs =\n                          (\\<forall>a\\<in>list_to_assignment_set bs.\n                              robdd_\\<alpha> r (\\<lambda>v. a (v - Suc n)));\n        \\<And>x2.\n           \\<lbrakk>n = v; bo = Some x2; x2 = True;\n            robdd_invar_vars_greater (Suc n) l;\n            robdd_invar_reduced l\\<rbrakk>\n           \\<Longrightarrow> robdd_list_\\<alpha> l (Suc n) bs =\n                             (\\<forall>a\\<in>list_to_assignment_set bs.\n                                 robdd_\\<alpha> l\n                                  (\\<lambda>v. a (v - Suc n)));\n        \\<And>x2.\n           \\<lbrakk>n = v; bo = Some x2; x2 = False;\n            robdd_invar_vars_greater (Suc n) r;\n            robdd_invar_reduced r\\<rbrakk>\n           \\<Longrightarrow> robdd_list_\\<alpha> r (Suc n) bs =\n                             (\\<forall>a\\<in>list_to_assignment_set bs.\n                                 robdd_\\<alpha> r\n                                  (\\<lambda>v. a (v - Suc n)));\n        \\<lbrakk>n \\<noteq> v;\n         robdd_invar_vars_greater (Suc n) (robdd_var i l v r);\n         robdd_invar_reduced (robdd_var i l v r)\\<rbrakk>\n        \\<Longrightarrow> robdd_list_\\<alpha> (robdd_var i l v r) (Suc n)\n                           bs =\n                          (\\<forall>a\\<in>list_to_assignment_set bs.\n                              robdd_\\<alpha> (robdd_var i l v r)\n                               (\\<lambda>v. a (v - Suc n)));\n        robdd_invar_vars_greater n (robdd_var i l v r);\n        robdd_invar_reduced (robdd_var i l v r)\\<rbrakk>\n       \\<Longrightarrow> robdd_list_\\<alpha> (robdd_var i l v r) n\n                          (bo # bs) =\n                         (\\<forall>a\\<in>list_to_assignment_set (bo # bs).\n                             robdd_\\<alpha> (robdd_var i l v r)\n                              (\\<lambda>v. a (v - n)))", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. robdd_list_\\<alpha> (robdd_var i ll v rr) n [] =\n    (\\<forall>a\\<in>list_to_assignment_set [].\n        robdd_\\<alpha> (robdd_var i ll v rr) (\\<lambda>v. a (v - n)))", "proof (cases \"robdd_\\<alpha> ll a\")"], ["proof (state)\ngoal (2 subgoals):\n 1. robdd_\\<alpha> ll a \\<Longrightarrow>\n    robdd_list_\\<alpha> (robdd_var i ll v rr) n [] =\n    (\\<forall>a\\<in>list_to_assignment_set [].\n        robdd_\\<alpha> (robdd_var i ll v rr) (\\<lambda>v. a (v - n)))\n 2. \\<not> robdd_\\<alpha> ll a \\<Longrightarrow>\n    robdd_list_\\<alpha> (robdd_var i ll v rr) n [] =\n    (\\<forall>a\\<in>list_to_assignment_set [].\n        robdd_\\<alpha> (robdd_var i ll v rr) (\\<lambda>v. a (v - n)))", "case True"], ["proof (state)\nthis:\n  robdd_\\<alpha> ll a\n\ngoal (2 subgoals):\n 1. robdd_\\<alpha> ll a \\<Longrightarrow>\n    robdd_list_\\<alpha> (robdd_var i ll v rr) n [] =\n    (\\<forall>a\\<in>list_to_assignment_set [].\n        robdd_\\<alpha> (robdd_var i ll v rr) (\\<lambda>v. a (v - n)))\n 2. \\<not> robdd_\\<alpha> ll a \\<Longrightarrow>\n    robdd_list_\\<alpha> (robdd_var i ll v rr) n [] =\n    (\\<forall>a\\<in>list_to_assignment_set [].\n        robdd_\\<alpha> (robdd_var i ll v rr) (\\<lambda>v. a (v - n)))", "with a_sem_neq rr_sem"], ["proof (chain)\npicking this:\n  robdd_\\<alpha> ll a \\<noteq> robdd_\\<alpha> rr a\n  robdd_\\<alpha> rr (\\<lambda>v'. (aa(v - n := ?b)) (v' - n)) =\n  robdd_\\<alpha> rr a\n  robdd_\\<alpha> ll a", "show ?thesis"], ["proof (prove)\nusing this:\n  robdd_\\<alpha> ll a \\<noteq> robdd_\\<alpha> rr a\n  robdd_\\<alpha> rr (\\<lambda>v'. (aa(v - n := ?b)) (v' - n)) =\n  robdd_\\<alpha> rr a\n  robdd_\\<alpha> ll a\n\ngoal (1 subgoal):\n 1. robdd_list_\\<alpha> (robdd_var i ll v rr) n [] =\n    (\\<forall>a\\<in>list_to_assignment_set [].\n        robdd_\\<alpha> (robdd_var i ll v rr) (\\<lambda>v. a (v - n)))", "apply (simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<not> robdd_\\<alpha> rr a;\n     \\<And>b.\n        \\<not> robdd_\\<alpha> rr\n                (\\<lambda>v'. if v' - n = v - n then b else aa (v' - n));\n     robdd_\\<alpha> ll a\\<rbrakk>\n    \\<Longrightarrow> \\<exists>a.\n                         (a (v - n) \\<longrightarrow>\n                          \\<not> robdd_\\<alpha> ll\n                                  (\\<lambda>v. a (v - n))) \\<and>\n                         (\\<not> a (v - n) \\<longrightarrow>\n                          \\<not> robdd_\\<alpha> rr (\\<lambda>v. a (v - n)))", "apply (rule_tac exI[where x = \"aa(v-n := False)\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<not> robdd_\\<alpha> rr a;\n     \\<And>b.\n        \\<not> robdd_\\<alpha> rr\n                (\\<lambda>v'. if v' - n = v - n then b else aa (v' - n));\n     robdd_\\<alpha> ll a\\<rbrakk>\n    \\<Longrightarrow> ((aa(v - n := False)) (v - n) \\<longrightarrow>\n                       \\<not> robdd_\\<alpha> ll\n                               (\\<lambda>va.\n                                   (aa(v - n := False)) (va - n))) \\<and>\n                      (\\<not> (aa(v - n := False)) (v - n) \\<longrightarrow>\n                       \\<not> robdd_\\<alpha> rr\n                               (\\<lambda>va. (aa(v - n := False)) (va - n)))", "apply simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  robdd_list_\\<alpha> (robdd_var i ll v rr) n [] =\n  (\\<forall>a\\<in>list_to_assignment_set [].\n      robdd_\\<alpha> (robdd_var i ll v rr) (\\<lambda>v. a (v - n)))\n\ngoal (1 subgoal):\n 1. \\<not> robdd_\\<alpha> ll a \\<Longrightarrow>\n    robdd_list_\\<alpha> (robdd_var i ll v rr) n [] =\n    (\\<forall>a\\<in>list_to_assignment_set [].\n        robdd_\\<alpha> (robdd_var i ll v rr) (\\<lambda>v. a (v - n)))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> robdd_\\<alpha> ll a \\<Longrightarrow>\n    robdd_list_\\<alpha> (robdd_var i ll v rr) n [] =\n    (\\<forall>a\\<in>list_to_assignment_set [].\n        robdd_\\<alpha> (robdd_var i ll v rr) (\\<lambda>v. a (v - n)))", "case False"], ["proof (state)\nthis:\n  \\<not> robdd_\\<alpha> ll a\n\ngoal (1 subgoal):\n 1. \\<not> robdd_\\<alpha> ll a \\<Longrightarrow>\n    robdd_list_\\<alpha> (robdd_var i ll v rr) n [] =\n    (\\<forall>a\\<in>list_to_assignment_set [].\n        robdd_\\<alpha> (robdd_var i ll v rr) (\\<lambda>v. a (v - n)))", "with a_sem_neq ll_sem"], ["proof (chain)\npicking this:\n  robdd_\\<alpha> ll a \\<noteq> robdd_\\<alpha> rr a\n  robdd_\\<alpha> ll (\\<lambda>v'. (aa(v - n := ?b)) (v' - n)) =\n  robdd_\\<alpha> ll a\n  \\<not> robdd_\\<alpha> ll a", "show ?thesis"], ["proof (prove)\nusing this:\n  robdd_\\<alpha> ll a \\<noteq> robdd_\\<alpha> rr a\n  robdd_\\<alpha> ll (\\<lambda>v'. (aa(v - n := ?b)) (v' - n)) =\n  robdd_\\<alpha> ll a\n  \\<not> robdd_\\<alpha> ll a\n\ngoal (1 subgoal):\n 1. robdd_list_\\<alpha> (robdd_var i ll v rr) n [] =\n    (\\<forall>a\\<in>list_to_assignment_set [].\n        robdd_\\<alpha> (robdd_var i ll v rr) (\\<lambda>v. a (v - n)))", "apply (simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>robdd_\\<alpha> rr a;\n     \\<And>b.\n        \\<not> robdd_\\<alpha> ll\n                (\\<lambda>v'. if v' - n = v - n then b else aa (v' - n));\n     \\<not> robdd_\\<alpha> ll a\\<rbrakk>\n    \\<Longrightarrow> \\<exists>a.\n                         (a (v - n) \\<longrightarrow>\n                          \\<not> robdd_\\<alpha> ll\n                                  (\\<lambda>v. a (v - n))) \\<and>\n                         (\\<not> a (v - n) \\<longrightarrow>\n                          \\<not> robdd_\\<alpha> rr (\\<lambda>v. a (v - n)))", "apply (rule_tac exI[where x = \"aa(v-n := True)\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>robdd_\\<alpha> rr a;\n     \\<And>b.\n        \\<not> robdd_\\<alpha> ll\n                (\\<lambda>v'. if v' - n = v - n then b else aa (v' - n));\n     \\<not> robdd_\\<alpha> ll a\\<rbrakk>\n    \\<Longrightarrow> ((aa(v - n := True)) (v - n) \\<longrightarrow>\n                       \\<not> robdd_\\<alpha> ll\n                               (\\<lambda>va.\n                                   (aa(v - n := True)) (va - n))) \\<and>\n                      (\\<not> (aa(v - n := True)) (v - n) \\<longrightarrow>\n                       \\<not> robdd_\\<alpha> rr\n                               (\\<lambda>va. (aa(v - n := True)) (va - n)))", "apply simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  robdd_list_\\<alpha> (robdd_var i ll v rr) n [] =\n  (\\<forall>a\\<in>list_to_assignment_set [].\n      robdd_\\<alpha> (robdd_var i ll v rr) (\\<lambda>v. a (v - n)))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  robdd_list_\\<alpha> (robdd_var i ll v rr) n [] =\n  (\\<forall>a\\<in>list_to_assignment_set [].\n      robdd_\\<alpha> (robdd_var i ll v rr) (\\<lambda>v. a (v - n)))\n\ngoal (1 subgoal):\n 1. \\<And>i l v r n bo bs.\n       \\<lbrakk>\\<lbrakk>n = v; bo = None;\n                 robdd_invar_vars_greater (Suc n) l;\n                 robdd_invar_reduced l\\<rbrakk>\n                \\<Longrightarrow> robdd_list_\\<alpha> l (Suc n) bs =\n                                  (\\<forall>a\\<in>list_to_assignment_set bs.\nrobdd_\\<alpha> l (\\<lambda>v. a (v - Suc n)));\n        \\<lbrakk>n = v; bo = None; robdd_invar_vars_greater (Suc n) r;\n         robdd_invar_reduced r\\<rbrakk>\n        \\<Longrightarrow> robdd_list_\\<alpha> r (Suc n) bs =\n                          (\\<forall>a\\<in>list_to_assignment_set bs.\n                              robdd_\\<alpha> r (\\<lambda>v. a (v - Suc n)));\n        \\<And>x2.\n           \\<lbrakk>n = v; bo = Some x2; x2 = True;\n            robdd_invar_vars_greater (Suc n) l;\n            robdd_invar_reduced l\\<rbrakk>\n           \\<Longrightarrow> robdd_list_\\<alpha> l (Suc n) bs =\n                             (\\<forall>a\\<in>list_to_assignment_set bs.\n                                 robdd_\\<alpha> l\n                                  (\\<lambda>v. a (v - Suc n)));\n        \\<And>x2.\n           \\<lbrakk>n = v; bo = Some x2; x2 = False;\n            robdd_invar_vars_greater (Suc n) r;\n            robdd_invar_reduced r\\<rbrakk>\n           \\<Longrightarrow> robdd_list_\\<alpha> r (Suc n) bs =\n                             (\\<forall>a\\<in>list_to_assignment_set bs.\n                                 robdd_\\<alpha> r\n                                  (\\<lambda>v. a (v - Suc n)));\n        \\<lbrakk>n \\<noteq> v;\n         robdd_invar_vars_greater (Suc n) (robdd_var i l v r);\n         robdd_invar_reduced (robdd_var i l v r)\\<rbrakk>\n        \\<Longrightarrow> robdd_list_\\<alpha> (robdd_var i l v r) (Suc n)\n                           bs =\n                          (\\<forall>a\\<in>list_to_assignment_set bs.\n                              robdd_\\<alpha> (robdd_var i l v r)\n                               (\\<lambda>v. a (v - Suc n)));\n        robdd_invar_vars_greater n (robdd_var i l v r);\n        robdd_invar_reduced (robdd_var i l v r)\\<rbrakk>\n       \\<Longrightarrow> robdd_list_\\<alpha> (robdd_var i l v r) n\n                          (bo # bs) =\n                         (\\<forall>a\\<in>list_to_assignment_set (bo # bs).\n                             robdd_\\<alpha> (robdd_var i l v r)\n                              (\\<lambda>v. a (v - n)))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i l v r n bo bs.\n       \\<lbrakk>\\<lbrakk>n = v; bo = None;\n                 robdd_invar_vars_greater (Suc n) l;\n                 robdd_invar_reduced l\\<rbrakk>\n                \\<Longrightarrow> robdd_list_\\<alpha> l (Suc n) bs =\n                                  (\\<forall>a\\<in>list_to_assignment_set bs.\nrobdd_\\<alpha> l (\\<lambda>v. a (v - Suc n)));\n        \\<lbrakk>n = v; bo = None; robdd_invar_vars_greater (Suc n) r;\n         robdd_invar_reduced r\\<rbrakk>\n        \\<Longrightarrow> robdd_list_\\<alpha> r (Suc n) bs =\n                          (\\<forall>a\\<in>list_to_assignment_set bs.\n                              robdd_\\<alpha> r (\\<lambda>v. a (v - Suc n)));\n        \\<And>x2.\n           \\<lbrakk>n = v; bo = Some x2; x2 = True;\n            robdd_invar_vars_greater (Suc n) l;\n            robdd_invar_reduced l\\<rbrakk>\n           \\<Longrightarrow> robdd_list_\\<alpha> l (Suc n) bs =\n                             (\\<forall>a\\<in>list_to_assignment_set bs.\n                                 robdd_\\<alpha> l\n                                  (\\<lambda>v. a (v - Suc n)));\n        \\<And>x2.\n           \\<lbrakk>n = v; bo = Some x2; x2 = False;\n            robdd_invar_vars_greater (Suc n) r;\n            robdd_invar_reduced r\\<rbrakk>\n           \\<Longrightarrow> robdd_list_\\<alpha> r (Suc n) bs =\n                             (\\<forall>a\\<in>list_to_assignment_set bs.\n                                 robdd_\\<alpha> r\n                                  (\\<lambda>v. a (v - Suc n)));\n        \\<lbrakk>n \\<noteq> v;\n         robdd_invar_vars_greater (Suc n) (robdd_var i l v r);\n         robdd_invar_reduced (robdd_var i l v r)\\<rbrakk>\n        \\<Longrightarrow> robdd_list_\\<alpha> (robdd_var i l v r) (Suc n)\n                           bs =\n                          (\\<forall>a\\<in>list_to_assignment_set bs.\n                              robdd_\\<alpha> (robdd_var i l v r)\n                               (\\<lambda>v. a (v - Suc n)));\n        robdd_invar_vars_greater n (robdd_var i l v r);\n        robdd_invar_reduced (robdd_var i l v r)\\<rbrakk>\n       \\<Longrightarrow> robdd_list_\\<alpha> (robdd_var i l v r) n\n                          (bo # bs) =\n                         (\\<forall>a\\<in>list_to_assignment_set (bo # bs).\n                             robdd_\\<alpha> (robdd_var i l v r)\n                              (\\<lambda>v. a (v - n)))", "case prems: (3 i ll v rr n b bs)"], ["proof (state)\nthis:\n  \\<lbrakk>n = v; b = None; robdd_invar_vars_greater (Suc n) ll;\n   robdd_invar_reduced ll\\<rbrakk>\n  \\<Longrightarrow> robdd_list_\\<alpha> ll (Suc n) bs =\n                    (\\<forall>a\\<in>list_to_assignment_set bs.\n                        robdd_\\<alpha> ll (\\<lambda>v. a (v - Suc n)))\n  \\<lbrakk>n = v; b = None; robdd_invar_vars_greater (Suc n) rr;\n   robdd_invar_reduced rr\\<rbrakk>\n  \\<Longrightarrow> robdd_list_\\<alpha> rr (Suc n) bs =\n                    (\\<forall>a\\<in>list_to_assignment_set bs.\n                        robdd_\\<alpha> rr (\\<lambda>v. a (v - Suc n)))\n  \\<lbrakk>n = v; b = Some ?x2.0; ?x2.0 = True;\n   robdd_invar_vars_greater (Suc n) ll; robdd_invar_reduced ll\\<rbrakk>\n  \\<Longrightarrow> robdd_list_\\<alpha> ll (Suc n) bs =\n                    (\\<forall>a\\<in>list_to_assignment_set bs.\n                        robdd_\\<alpha> ll (\\<lambda>v. a (v - Suc n)))\n  \\<lbrakk>n = v; b = Some ?x2.0; ?x2.0 = False;\n   robdd_invar_vars_greater (Suc n) rr; robdd_invar_reduced rr\\<rbrakk>\n  \\<Longrightarrow> robdd_list_\\<alpha> rr (Suc n) bs =\n                    (\\<forall>a\\<in>list_to_assignment_set bs.\n                        robdd_\\<alpha> rr (\\<lambda>v. a (v - Suc n)))\n  \\<lbrakk>n \\<noteq> v;\n   robdd_invar_vars_greater (Suc n) (robdd_var i ll v rr);\n   robdd_invar_reduced (robdd_var i ll v rr)\\<rbrakk>\n  \\<Longrightarrow> robdd_list_\\<alpha> (robdd_var i ll v rr) (Suc n) bs =\n                    (\\<forall>a\\<in>list_to_assignment_set bs.\n                        robdd_\\<alpha> (robdd_var i ll v rr)\n                         (\\<lambda>v. a (v - Suc n)))\n  robdd_invar_vars_greater n (robdd_var i ll v rr)\n  robdd_invar_reduced (robdd_var i ll v rr)\n\ngoal (1 subgoal):\n 1. \\<And>i l v r n bo bs.\n       \\<lbrakk>\\<lbrakk>n = v; bo = None;\n                 robdd_invar_vars_greater (Suc n) l;\n                 robdd_invar_reduced l\\<rbrakk>\n                \\<Longrightarrow> robdd_list_\\<alpha> l (Suc n) bs =\n                                  (\\<forall>a\\<in>list_to_assignment_set bs.\nrobdd_\\<alpha> l (\\<lambda>v. a (v - Suc n)));\n        \\<lbrakk>n = v; bo = None; robdd_invar_vars_greater (Suc n) r;\n         robdd_invar_reduced r\\<rbrakk>\n        \\<Longrightarrow> robdd_list_\\<alpha> r (Suc n) bs =\n                          (\\<forall>a\\<in>list_to_assignment_set bs.\n                              robdd_\\<alpha> r (\\<lambda>v. a (v - Suc n)));\n        \\<And>x2.\n           \\<lbrakk>n = v; bo = Some x2; x2 = True;\n            robdd_invar_vars_greater (Suc n) l;\n            robdd_invar_reduced l\\<rbrakk>\n           \\<Longrightarrow> robdd_list_\\<alpha> l (Suc n) bs =\n                             (\\<forall>a\\<in>list_to_assignment_set bs.\n                                 robdd_\\<alpha> l\n                                  (\\<lambda>v. a (v - Suc n)));\n        \\<And>x2.\n           \\<lbrakk>n = v; bo = Some x2; x2 = False;\n            robdd_invar_vars_greater (Suc n) r;\n            robdd_invar_reduced r\\<rbrakk>\n           \\<Longrightarrow> robdd_list_\\<alpha> r (Suc n) bs =\n                             (\\<forall>a\\<in>list_to_assignment_set bs.\n                                 robdd_\\<alpha> r\n                                  (\\<lambda>v. a (v - Suc n)));\n        \\<lbrakk>n \\<noteq> v;\n         robdd_invar_vars_greater (Suc n) (robdd_var i l v r);\n         robdd_invar_reduced (robdd_var i l v r)\\<rbrakk>\n        \\<Longrightarrow> robdd_list_\\<alpha> (robdd_var i l v r) (Suc n)\n                           bs =\n                          (\\<forall>a\\<in>list_to_assignment_set bs.\n                              robdd_\\<alpha> (robdd_var i l v r)\n                               (\\<lambda>v. a (v - Suc n)));\n        robdd_invar_vars_greater n (robdd_var i l v r);\n        robdd_invar_reduced (robdd_var i l v r)\\<rbrakk>\n       \\<Longrightarrow> robdd_list_\\<alpha> (robdd_var i l v r) n\n                          (bo # bs) =\n                         (\\<forall>a\\<in>list_to_assignment_set (bo # bs).\n                             robdd_\\<alpha> (robdd_var i l v r)\n                              (\\<lambda>v. a (v - n)))", "note invar = prems(6,7)"], ["proof (state)\nthis:\n  robdd_invar_vars_greater n (robdd_var i ll v rr)\n  robdd_invar_reduced (robdd_var i ll v rr)\n\ngoal (1 subgoal):\n 1. \\<And>i l v r n bo bs.\n       \\<lbrakk>\\<lbrakk>n = v; bo = None;\n                 robdd_invar_vars_greater (Suc n) l;\n                 robdd_invar_reduced l\\<rbrakk>\n                \\<Longrightarrow> robdd_list_\\<alpha> l (Suc n) bs =\n                                  (\\<forall>a\\<in>list_to_assignment_set bs.\nrobdd_\\<alpha> l (\\<lambda>v. a (v - Suc n)));\n        \\<lbrakk>n = v; bo = None; robdd_invar_vars_greater (Suc n) r;\n         robdd_invar_reduced r\\<rbrakk>\n        \\<Longrightarrow> robdd_list_\\<alpha> r (Suc n) bs =\n                          (\\<forall>a\\<in>list_to_assignment_set bs.\n                              robdd_\\<alpha> r (\\<lambda>v. a (v - Suc n)));\n        \\<And>x2.\n           \\<lbrakk>n = v; bo = Some x2; x2 = True;\n            robdd_invar_vars_greater (Suc n) l;\n            robdd_invar_reduced l\\<rbrakk>\n           \\<Longrightarrow> robdd_list_\\<alpha> l (Suc n) bs =\n                             (\\<forall>a\\<in>list_to_assignment_set bs.\n                                 robdd_\\<alpha> l\n                                  (\\<lambda>v. a (v - Suc n)));\n        \\<And>x2.\n           \\<lbrakk>n = v; bo = Some x2; x2 = False;\n            robdd_invar_vars_greater (Suc n) r;\n            robdd_invar_reduced r\\<rbrakk>\n           \\<Longrightarrow> robdd_list_\\<alpha> r (Suc n) bs =\n                             (\\<forall>a\\<in>list_to_assignment_set bs.\n                                 robdd_\\<alpha> r\n                                  (\\<lambda>v. a (v - Suc n)));\n        \\<lbrakk>n \\<noteq> v;\n         robdd_invar_vars_greater (Suc n) (robdd_var i l v r);\n         robdd_invar_reduced (robdd_var i l v r)\\<rbrakk>\n        \\<Longrightarrow> robdd_list_\\<alpha> (robdd_var i l v r) (Suc n)\n                           bs =\n                          (\\<forall>a\\<in>list_to_assignment_set bs.\n                              robdd_\\<alpha> (robdd_var i l v r)\n                               (\\<lambda>v. a (v - Suc n)));\n        robdd_invar_vars_greater n (robdd_var i l v r);\n        robdd_invar_reduced (robdd_var i l v r)\\<rbrakk>\n       \\<Longrightarrow> robdd_list_\\<alpha> (robdd_var i l v r) n\n                          (bo # bs) =\n                         (\\<forall>a\\<in>list_to_assignment_set (bo # bs).\n                             robdd_\\<alpha> (robdd_var i l v r)\n                              (\\<lambda>v. a (v - n)))", "hence invar_rr: \"robdd_invar_vars_greater (Suc n) rr\" and red_ll: \"robdd_invar_reduced ll\"\n    and invar_ll: \"robdd_invar_vars_greater (Suc n) ll\" and red_rr: \"robdd_invar_reduced rr\"\n    and invar_n: \"n \\<noteq> v \\<Longrightarrow> robdd_invar_vars_greater (Suc n) (robdd_var i ll v rr)\"\n    and n_le: \"n \\<le> v\""], ["proof (prove)\nusing this:\n  robdd_invar_vars_greater n (robdd_var i ll v rr)\n  robdd_invar_reduced (robdd_var i ll v rr)\n\ngoal (1 subgoal):\n 1. (robdd_invar_vars_greater (Suc n) rr &&&\n     robdd_invar_reduced ll &&& robdd_invar_vars_greater (Suc n) ll) &&&\n    robdd_invar_reduced rr &&&\n    (n \\<noteq> v \\<Longrightarrow>\n     robdd_invar_vars_greater (Suc n) (robdd_var i ll v rr)) &&&\n    n \\<le> v", "using robdd_invar_vars_greater___weaken [of \"Suc v\" _ \"Suc n\"]"], ["proof (prove)\nusing this:\n  robdd_invar_vars_greater n (robdd_var i ll v rr)\n  robdd_invar_reduced (robdd_var i ll v rr)\n  \\<lbrakk>robdd_invar_vars_greater (Suc v) ?b; Suc n \\<le> Suc v\\<rbrakk>\n  \\<Longrightarrow> robdd_invar_vars_greater (Suc n) ?b\n\ngoal (1 subgoal):\n 1. (robdd_invar_vars_greater (Suc n) rr &&&\n     robdd_invar_reduced ll &&& robdd_invar_vars_greater (Suc n) ll) &&&\n    robdd_invar_reduced rr &&&\n    (n \\<noteq> v \\<Longrightarrow>\n     robdd_invar_vars_greater (Suc n) (robdd_var i ll v rr)) &&&\n    n \\<le> v", "by simp_all"], ["proof (state)\nthis:\n  robdd_invar_vars_greater (Suc n) rr\n  robdd_invar_reduced ll\n  robdd_invar_vars_greater (Suc n) ll\n  robdd_invar_reduced rr\n  n \\<noteq> v \\<Longrightarrow>\n  robdd_invar_vars_greater (Suc n) (robdd_var i ll v rr)\n  n \\<le> v\n\ngoal (1 subgoal):\n 1. \\<And>i l v r n bo bs.\n       \\<lbrakk>\\<lbrakk>n = v; bo = None;\n                 robdd_invar_vars_greater (Suc n) l;\n                 robdd_invar_reduced l\\<rbrakk>\n                \\<Longrightarrow> robdd_list_\\<alpha> l (Suc n) bs =\n                                  (\\<forall>a\\<in>list_to_assignment_set bs.\nrobdd_\\<alpha> l (\\<lambda>v. a (v - Suc n)));\n        \\<lbrakk>n = v; bo = None; robdd_invar_vars_greater (Suc n) r;\n         robdd_invar_reduced r\\<rbrakk>\n        \\<Longrightarrow> robdd_list_\\<alpha> r (Suc n) bs =\n                          (\\<forall>a\\<in>list_to_assignment_set bs.\n                              robdd_\\<alpha> r (\\<lambda>v. a (v - Suc n)));\n        \\<And>x2.\n           \\<lbrakk>n = v; bo = Some x2; x2 = True;\n            robdd_invar_vars_greater (Suc n) l;\n            robdd_invar_reduced l\\<rbrakk>\n           \\<Longrightarrow> robdd_list_\\<alpha> l (Suc n) bs =\n                             (\\<forall>a\\<in>list_to_assignment_set bs.\n                                 robdd_\\<alpha> l\n                                  (\\<lambda>v. a (v - Suc n)));\n        \\<And>x2.\n           \\<lbrakk>n = v; bo = Some x2; x2 = False;\n            robdd_invar_vars_greater (Suc n) r;\n            robdd_invar_reduced r\\<rbrakk>\n           \\<Longrightarrow> robdd_list_\\<alpha> r (Suc n) bs =\n                             (\\<forall>a\\<in>list_to_assignment_set bs.\n                                 robdd_\\<alpha> r\n                                  (\\<lambda>v. a (v - Suc n)));\n        \\<lbrakk>n \\<noteq> v;\n         robdd_invar_vars_greater (Suc n) (robdd_var i l v r);\n         robdd_invar_reduced (robdd_var i l v r)\\<rbrakk>\n        \\<Longrightarrow> robdd_list_\\<alpha> (robdd_var i l v r) (Suc n)\n                           bs =\n                          (\\<forall>a\\<in>list_to_assignment_set bs.\n                              robdd_\\<alpha> (robdd_var i l v r)\n                               (\\<lambda>v. a (v - Suc n)));\n        robdd_invar_vars_greater n (robdd_var i l v r);\n        robdd_invar_reduced (robdd_var i l v r)\\<rbrakk>\n       \\<Longrightarrow> robdd_list_\\<alpha> (robdd_var i l v r) n\n                          (bo # bs) =\n                         (\\<forall>a\\<in>list_to_assignment_set (bo # bs).\n                             robdd_\\<alpha> (robdd_var i l v r)\n                              (\\<lambda>v. a (v - n)))", "note indhyp_1 = prems(1)[OF _ _ invar_ll red_ll]"], ["proof (state)\nthis:\n  \\<lbrakk>n = v; b = None\\<rbrakk>\n  \\<Longrightarrow> robdd_list_\\<alpha> ll (Suc n) bs =\n                    (\\<forall>a\\<in>list_to_assignment_set bs.\n                        robdd_\\<alpha> ll (\\<lambda>v. a (v - Suc n)))\n\ngoal (1 subgoal):\n 1. \\<And>i l v r n bo bs.\n       \\<lbrakk>\\<lbrakk>n = v; bo = None;\n                 robdd_invar_vars_greater (Suc n) l;\n                 robdd_invar_reduced l\\<rbrakk>\n                \\<Longrightarrow> robdd_list_\\<alpha> l (Suc n) bs =\n                                  (\\<forall>a\\<in>list_to_assignment_set bs.\nrobdd_\\<alpha> l (\\<lambda>v. a (v - Suc n)));\n        \\<lbrakk>n = v; bo = None; robdd_invar_vars_greater (Suc n) r;\n         robdd_invar_reduced r\\<rbrakk>\n        \\<Longrightarrow> robdd_list_\\<alpha> r (Suc n) bs =\n                          (\\<forall>a\\<in>list_to_assignment_set bs.\n                              robdd_\\<alpha> r (\\<lambda>v. a (v - Suc n)));\n        \\<And>x2.\n           \\<lbrakk>n = v; bo = Some x2; x2 = True;\n            robdd_invar_vars_greater (Suc n) l;\n            robdd_invar_reduced l\\<rbrakk>\n           \\<Longrightarrow> robdd_list_\\<alpha> l (Suc n) bs =\n                             (\\<forall>a\\<in>list_to_assignment_set bs.\n                                 robdd_\\<alpha> l\n                                  (\\<lambda>v. a (v - Suc n)));\n        \\<And>x2.\n           \\<lbrakk>n = v; bo = Some x2; x2 = False;\n            robdd_invar_vars_greater (Suc n) r;\n            robdd_invar_reduced r\\<rbrakk>\n           \\<Longrightarrow> robdd_list_\\<alpha> r (Suc n) bs =\n                             (\\<forall>a\\<in>list_to_assignment_set bs.\n                                 robdd_\\<alpha> r\n                                  (\\<lambda>v. a (v - Suc n)));\n        \\<lbrakk>n \\<noteq> v;\n         robdd_invar_vars_greater (Suc n) (robdd_var i l v r);\n         robdd_invar_reduced (robdd_var i l v r)\\<rbrakk>\n        \\<Longrightarrow> robdd_list_\\<alpha> (robdd_var i l v r) (Suc n)\n                           bs =\n                          (\\<forall>a\\<in>list_to_assignment_set bs.\n                              robdd_\\<alpha> (robdd_var i l v r)\n                               (\\<lambda>v. a (v - Suc n)));\n        robdd_invar_vars_greater n (robdd_var i l v r);\n        robdd_invar_reduced (robdd_var i l v r)\\<rbrakk>\n       \\<Longrightarrow> robdd_list_\\<alpha> (robdd_var i l v r) n\n                          (bo # bs) =\n                         (\\<forall>a\\<in>list_to_assignment_set (bo # bs).\n                             robdd_\\<alpha> (robdd_var i l v r)\n                              (\\<lambda>v. a (v - n)))", "note indhyp_2 = prems(2)[OF _ _ invar_rr red_rr]"], ["proof (state)\nthis:\n  \\<lbrakk>n = v; b = None\\<rbrakk>\n  \\<Longrightarrow> robdd_list_\\<alpha> rr (Suc n) bs =\n                    (\\<forall>a\\<in>list_to_assignment_set bs.\n                        robdd_\\<alpha> rr (\\<lambda>v. a (v - Suc n)))\n\ngoal (1 subgoal):\n 1. \\<And>i l v r n bo bs.\n       \\<lbrakk>\\<lbrakk>n = v; bo = None;\n                 robdd_invar_vars_greater (Suc n) l;\n                 robdd_invar_reduced l\\<rbrakk>\n                \\<Longrightarrow> robdd_list_\\<alpha> l (Suc n) bs =\n                                  (\\<forall>a\\<in>list_to_assignment_set bs.\nrobdd_\\<alpha> l (\\<lambda>v. a (v - Suc n)));\n        \\<lbrakk>n = v; bo = None; robdd_invar_vars_greater (Suc n) r;\n         robdd_invar_reduced r\\<rbrakk>\n        \\<Longrightarrow> robdd_list_\\<alpha> r (Suc n) bs =\n                          (\\<forall>a\\<in>list_to_assignment_set bs.\n                              robdd_\\<alpha> r (\\<lambda>v. a (v - Suc n)));\n        \\<And>x2.\n           \\<lbrakk>n = v; bo = Some x2; x2 = True;\n            robdd_invar_vars_greater (Suc n) l;\n            robdd_invar_reduced l\\<rbrakk>\n           \\<Longrightarrow> robdd_list_\\<alpha> l (Suc n) bs =\n                             (\\<forall>a\\<in>list_to_assignment_set bs.\n                                 robdd_\\<alpha> l\n                                  (\\<lambda>v. a (v - Suc n)));\n        \\<And>x2.\n           \\<lbrakk>n = v; bo = Some x2; x2 = False;\n            robdd_invar_vars_greater (Suc n) r;\n            robdd_invar_reduced r\\<rbrakk>\n           \\<Longrightarrow> robdd_list_\\<alpha> r (Suc n) bs =\n                             (\\<forall>a\\<in>list_to_assignment_set bs.\n                                 robdd_\\<alpha> r\n                                  (\\<lambda>v. a (v - Suc n)));\n        \\<lbrakk>n \\<noteq> v;\n         robdd_invar_vars_greater (Suc n) (robdd_var i l v r);\n         robdd_invar_reduced (robdd_var i l v r)\\<rbrakk>\n        \\<Longrightarrow> robdd_list_\\<alpha> (robdd_var i l v r) (Suc n)\n                           bs =\n                          (\\<forall>a\\<in>list_to_assignment_set bs.\n                              robdd_\\<alpha> (robdd_var i l v r)\n                               (\\<lambda>v. a (v - Suc n)));\n        robdd_invar_vars_greater n (robdd_var i l v r);\n        robdd_invar_reduced (robdd_var i l v r)\\<rbrakk>\n       \\<Longrightarrow> robdd_list_\\<alpha> (robdd_var i l v r) n\n                          (bo # bs) =\n                         (\\<forall>a\\<in>list_to_assignment_set (bo # bs).\n                             robdd_\\<alpha> (robdd_var i l v r)\n                              (\\<lambda>v. a (v - n)))", "note indhyp_3 = prems(3)[of True, OF _ _ _ invar_ll red_ll, simplified]"], ["proof (state)\nthis:\n  \\<lbrakk>n = v; b = Some True\\<rbrakk>\n  \\<Longrightarrow> robdd_list_\\<alpha> ll (Suc v) bs =\n                    (\\<forall>a\\<in>list_to_assignment_set bs.\n                        robdd_\\<alpha> ll (\\<lambda>va. a (va - Suc v)))\n\ngoal (1 subgoal):\n 1. \\<And>i l v r n bo bs.\n       \\<lbrakk>\\<lbrakk>n = v; bo = None;\n                 robdd_invar_vars_greater (Suc n) l;\n                 robdd_invar_reduced l\\<rbrakk>\n                \\<Longrightarrow> robdd_list_\\<alpha> l (Suc n) bs =\n                                  (\\<forall>a\\<in>list_to_assignment_set bs.\nrobdd_\\<alpha> l (\\<lambda>v. a (v - Suc n)));\n        \\<lbrakk>n = v; bo = None; robdd_invar_vars_greater (Suc n) r;\n         robdd_invar_reduced r\\<rbrakk>\n        \\<Longrightarrow> robdd_list_\\<alpha> r (Suc n) bs =\n                          (\\<forall>a\\<in>list_to_assignment_set bs.\n                              robdd_\\<alpha> r (\\<lambda>v. a (v - Suc n)));\n        \\<And>x2.\n           \\<lbrakk>n = v; bo = Some x2; x2 = True;\n            robdd_invar_vars_greater (Suc n) l;\n            robdd_invar_reduced l\\<rbrakk>\n           \\<Longrightarrow> robdd_list_\\<alpha> l (Suc n) bs =\n                             (\\<forall>a\\<in>list_to_assignment_set bs.\n                                 robdd_\\<alpha> l\n                                  (\\<lambda>v. a (v - Suc n)));\n        \\<And>x2.\n           \\<lbrakk>n = v; bo = Some x2; x2 = False;\n            robdd_invar_vars_greater (Suc n) r;\n            robdd_invar_reduced r\\<rbrakk>\n           \\<Longrightarrow> robdd_list_\\<alpha> r (Suc n) bs =\n                             (\\<forall>a\\<in>list_to_assignment_set bs.\n                                 robdd_\\<alpha> r\n                                  (\\<lambda>v. a (v - Suc n)));\n        \\<lbrakk>n \\<noteq> v;\n         robdd_invar_vars_greater (Suc n) (robdd_var i l v r);\n         robdd_invar_reduced (robdd_var i l v r)\\<rbrakk>\n        \\<Longrightarrow> robdd_list_\\<alpha> (robdd_var i l v r) (Suc n)\n                           bs =\n                          (\\<forall>a\\<in>list_to_assignment_set bs.\n                              robdd_\\<alpha> (robdd_var i l v r)\n                               (\\<lambda>v. a (v - Suc n)));\n        robdd_invar_vars_greater n (robdd_var i l v r);\n        robdd_invar_reduced (robdd_var i l v r)\\<rbrakk>\n       \\<Longrightarrow> robdd_list_\\<alpha> (robdd_var i l v r) n\n                          (bo # bs) =\n                         (\\<forall>a\\<in>list_to_assignment_set (bo # bs).\n                             robdd_\\<alpha> (robdd_var i l v r)\n                              (\\<lambda>v. a (v - n)))", "note indhyp_4 = prems(4)[of False, OF _ _ _ invar_rr red_rr, simplified]"], ["proof (state)\nthis:\n  \\<lbrakk>n = v; b = Some False\\<rbrakk>\n  \\<Longrightarrow> robdd_list_\\<alpha> rr (Suc v) bs =\n                    (\\<forall>a\\<in>list_to_assignment_set bs.\n                        robdd_\\<alpha> rr (\\<lambda>va. a (va - Suc v)))\n\ngoal (1 subgoal):\n 1. \\<And>i l v r n bo bs.\n       \\<lbrakk>\\<lbrakk>n = v; bo = None;\n                 robdd_invar_vars_greater (Suc n) l;\n                 robdd_invar_reduced l\\<rbrakk>\n                \\<Longrightarrow> robdd_list_\\<alpha> l (Suc n) bs =\n                                  (\\<forall>a\\<in>list_to_assignment_set bs.\nrobdd_\\<alpha> l (\\<lambda>v. a (v - Suc n)));\n        \\<lbrakk>n = v; bo = None; robdd_invar_vars_greater (Suc n) r;\n         robdd_invar_reduced r\\<rbrakk>\n        \\<Longrightarrow> robdd_list_\\<alpha> r (Suc n) bs =\n                          (\\<forall>a\\<in>list_to_assignment_set bs.\n                              robdd_\\<alpha> r (\\<lambda>v. a (v - Suc n)));\n        \\<And>x2.\n           \\<lbrakk>n = v; bo = Some x2; x2 = True;\n            robdd_invar_vars_greater (Suc n) l;\n            robdd_invar_reduced l\\<rbrakk>\n           \\<Longrightarrow> robdd_list_\\<alpha> l (Suc n) bs =\n                             (\\<forall>a\\<in>list_to_assignment_set bs.\n                                 robdd_\\<alpha> l\n                                  (\\<lambda>v. a (v - Suc n)));\n        \\<And>x2.\n           \\<lbrakk>n = v; bo = Some x2; x2 = False;\n            robdd_invar_vars_greater (Suc n) r;\n            robdd_invar_reduced r\\<rbrakk>\n           \\<Longrightarrow> robdd_list_\\<alpha> r (Suc n) bs =\n                             (\\<forall>a\\<in>list_to_assignment_set bs.\n                                 robdd_\\<alpha> r\n                                  (\\<lambda>v. a (v - Suc n)));\n        \\<lbrakk>n \\<noteq> v;\n         robdd_invar_vars_greater (Suc n) (robdd_var i l v r);\n         robdd_invar_reduced (robdd_var i l v r)\\<rbrakk>\n        \\<Longrightarrow> robdd_list_\\<alpha> (robdd_var i l v r) (Suc n)\n                           bs =\n                          (\\<forall>a\\<in>list_to_assignment_set bs.\n                              robdd_\\<alpha> (robdd_var i l v r)\n                               (\\<lambda>v. a (v - Suc n)));\n        robdd_invar_vars_greater n (robdd_var i l v r);\n        robdd_invar_reduced (robdd_var i l v r)\\<rbrakk>\n       \\<Longrightarrow> robdd_list_\\<alpha> (robdd_var i l v r) n\n                          (bo # bs) =\n                         (\\<forall>a\\<in>list_to_assignment_set (bo # bs).\n                             robdd_\\<alpha> (robdd_var i l v r)\n                              (\\<lambda>v. a (v - n)))", "note indhyp_5 = prems(5)[OF _ invar_n invar(2), simplified]"], ["proof (state)\nthis:\n  n \\<noteq> v \\<Longrightarrow>\n  robdd_list_\\<alpha> (robdd_var i ll v rr) (Suc n) bs =\n  (\\<forall>a\\<in>list_to_assignment_set bs.\n      if a (v - Suc n) then robdd_\\<alpha> ll (\\<lambda>v. a (v - Suc n))\n      else robdd_\\<alpha> rr (\\<lambda>v. a (v - Suc n)))\n\ngoal (1 subgoal):\n 1. \\<And>i l v r n bo bs.\n       \\<lbrakk>\\<lbrakk>n = v; bo = None;\n                 robdd_invar_vars_greater (Suc n) l;\n                 robdd_invar_reduced l\\<rbrakk>\n                \\<Longrightarrow> robdd_list_\\<alpha> l (Suc n) bs =\n                                  (\\<forall>a\\<in>list_to_assignment_set bs.\nrobdd_\\<alpha> l (\\<lambda>v. a (v - Suc n)));\n        \\<lbrakk>n = v; bo = None; robdd_invar_vars_greater (Suc n) r;\n         robdd_invar_reduced r\\<rbrakk>\n        \\<Longrightarrow> robdd_list_\\<alpha> r (Suc n) bs =\n                          (\\<forall>a\\<in>list_to_assignment_set bs.\n                              robdd_\\<alpha> r (\\<lambda>v. a (v - Suc n)));\n        \\<And>x2.\n           \\<lbrakk>n = v; bo = Some x2; x2 = True;\n            robdd_invar_vars_greater (Suc n) l;\n            robdd_invar_reduced l\\<rbrakk>\n           \\<Longrightarrow> robdd_list_\\<alpha> l (Suc n) bs =\n                             (\\<forall>a\\<in>list_to_assignment_set bs.\n                                 robdd_\\<alpha> l\n                                  (\\<lambda>v. a (v - Suc n)));\n        \\<And>x2.\n           \\<lbrakk>n = v; bo = Some x2; x2 = False;\n            robdd_invar_vars_greater (Suc n) r;\n            robdd_invar_reduced r\\<rbrakk>\n           \\<Longrightarrow> robdd_list_\\<alpha> r (Suc n) bs =\n                             (\\<forall>a\\<in>list_to_assignment_set bs.\n                                 robdd_\\<alpha> r\n                                  (\\<lambda>v. a (v - Suc n)));\n        \\<lbrakk>n \\<noteq> v;\n         robdd_invar_vars_greater (Suc n) (robdd_var i l v r);\n         robdd_invar_reduced (robdd_var i l v r)\\<rbrakk>\n        \\<Longrightarrow> robdd_list_\\<alpha> (robdd_var i l v r) (Suc n)\n                           bs =\n                          (\\<forall>a\\<in>list_to_assignment_set bs.\n                              robdd_\\<alpha> (robdd_var i l v r)\n                               (\\<lambda>v. a (v - Suc n)));\n        robdd_invar_vars_greater n (robdd_var i l v r);\n        robdd_invar_reduced (robdd_var i l v r)\\<rbrakk>\n       \\<Longrightarrow> robdd_list_\\<alpha> (robdd_var i l v r) n\n                          (bo # bs) =\n                         (\\<forall>a\\<in>list_to_assignment_set (bo # bs).\n                             robdd_\\<alpha> (robdd_var i l v r)\n                              (\\<lambda>v. a (v - n)))", "from invar_ll"], ["proof (chain)\npicking this:\n  robdd_invar_vars_greater (Suc n) ll", "have ll_sem: \"\\<And>a b. robdd_\\<alpha> ll (\\<lambda>v. case_nat b a (v - n)) = robdd_\\<alpha> ll \n                                     (\\<lambda>v. a (v - Suc n))\""], ["proof (prove)\nusing this:\n  robdd_invar_vars_greater (Suc n) ll\n\ngoal (1 subgoal):\n 1. \\<And>a b.\n       robdd_\\<alpha> ll\n        (\\<lambda>v.\n            case v - n of 0 \\<Rightarrow> b | Suc x \\<Rightarrow> a x) =\n       robdd_\\<alpha> ll (\\<lambda>v. a (v - Suc n))", "apply (rule_tac robdd_\\<alpha>_invar_greater [of \"Suc n\"])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a b.\n       robdd_invar_vars_greater (Suc n) ll \\<Longrightarrow>\n       robdd_invar_vars_greater (Suc n) ll\n 2. \\<And>a b v.\n       \\<lbrakk>robdd_invar_vars_greater (Suc n) ll; Suc n \\<le> v\\<rbrakk>\n       \\<Longrightarrow> (case v - n of 0 \\<Rightarrow> b\n                          | Suc x \\<Rightarrow> a x) =\n                         a (v - Suc n)", "apply (simp_all split: nat.splits)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a v.\n       \\<lbrakk>robdd_invar_vars_greater (Suc n) ll; Suc n \\<le> v\\<rbrakk>\n       \\<Longrightarrow> \\<forall>x2.\n                            v - n = Suc x2 \\<longrightarrow>\n                            a x2 = a (v - Suc n)", "apply (metis diff_Suc nat.case(2))"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  robdd_\\<alpha> ll\n   (\\<lambda>v.\n       case v - n of 0 \\<Rightarrow> ?b | Suc x \\<Rightarrow> ?a x) =\n  robdd_\\<alpha> ll (\\<lambda>v. ?a (v - Suc n))\n\ngoal (1 subgoal):\n 1. \\<And>i l v r n bo bs.\n       \\<lbrakk>\\<lbrakk>n = v; bo = None;\n                 robdd_invar_vars_greater (Suc n) l;\n                 robdd_invar_reduced l\\<rbrakk>\n                \\<Longrightarrow> robdd_list_\\<alpha> l (Suc n) bs =\n                                  (\\<forall>a\\<in>list_to_assignment_set bs.\nrobdd_\\<alpha> l (\\<lambda>v. a (v - Suc n)));\n        \\<lbrakk>n = v; bo = None; robdd_invar_vars_greater (Suc n) r;\n         robdd_invar_reduced r\\<rbrakk>\n        \\<Longrightarrow> robdd_list_\\<alpha> r (Suc n) bs =\n                          (\\<forall>a\\<in>list_to_assignment_set bs.\n                              robdd_\\<alpha> r (\\<lambda>v. a (v - Suc n)));\n        \\<And>x2.\n           \\<lbrakk>n = v; bo = Some x2; x2 = True;\n            robdd_invar_vars_greater (Suc n) l;\n            robdd_invar_reduced l\\<rbrakk>\n           \\<Longrightarrow> robdd_list_\\<alpha> l (Suc n) bs =\n                             (\\<forall>a\\<in>list_to_assignment_set bs.\n                                 robdd_\\<alpha> l\n                                  (\\<lambda>v. a (v - Suc n)));\n        \\<And>x2.\n           \\<lbrakk>n = v; bo = Some x2; x2 = False;\n            robdd_invar_vars_greater (Suc n) r;\n            robdd_invar_reduced r\\<rbrakk>\n           \\<Longrightarrow> robdd_list_\\<alpha> r (Suc n) bs =\n                             (\\<forall>a\\<in>list_to_assignment_set bs.\n                                 robdd_\\<alpha> r\n                                  (\\<lambda>v. a (v - Suc n)));\n        \\<lbrakk>n \\<noteq> v;\n         robdd_invar_vars_greater (Suc n) (robdd_var i l v r);\n         robdd_invar_reduced (robdd_var i l v r)\\<rbrakk>\n        \\<Longrightarrow> robdd_list_\\<alpha> (robdd_var i l v r) (Suc n)\n                           bs =\n                          (\\<forall>a\\<in>list_to_assignment_set bs.\n                              robdd_\\<alpha> (robdd_var i l v r)\n                               (\\<lambda>v. a (v - Suc n)));\n        robdd_invar_vars_greater n (robdd_var i l v r);\n        robdd_invar_reduced (robdd_var i l v r)\\<rbrakk>\n       \\<Longrightarrow> robdd_list_\\<alpha> (robdd_var i l v r) n\n                          (bo # bs) =\n                         (\\<forall>a\\<in>list_to_assignment_set (bo # bs).\n                             robdd_\\<alpha> (robdd_var i l v r)\n                              (\\<lambda>v. a (v - n)))", "from invar_rr"], ["proof (chain)\npicking this:\n  robdd_invar_vars_greater (Suc n) rr", "have rr_sem: \"\\<And>a b. robdd_\\<alpha> rr (\\<lambda>v. case_nat b a (v - n)) = robdd_\\<alpha> rr \n                                     (\\<lambda>v. a (v - Suc n))\""], ["proof (prove)\nusing this:\n  robdd_invar_vars_greater (Suc n) rr\n\ngoal (1 subgoal):\n 1. \\<And>a b.\n       robdd_\\<alpha> rr\n        (\\<lambda>v.\n            case v - n of 0 \\<Rightarrow> b | Suc x \\<Rightarrow> a x) =\n       robdd_\\<alpha> rr (\\<lambda>v. a (v - Suc n))", "apply (rule_tac robdd_\\<alpha>_invar_greater [of \"Suc n\"])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a b.\n       robdd_invar_vars_greater (Suc n) rr \\<Longrightarrow>\n       robdd_invar_vars_greater (Suc n) rr\n 2. \\<And>a b v.\n       \\<lbrakk>robdd_invar_vars_greater (Suc n) rr; Suc n \\<le> v\\<rbrakk>\n       \\<Longrightarrow> (case v - n of 0 \\<Rightarrow> b\n                          | Suc x \\<Rightarrow> a x) =\n                         a (v - Suc n)", "apply (simp_all split: nat.splits)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a v.\n       \\<lbrakk>robdd_invar_vars_greater (Suc n) rr; Suc n \\<le> v\\<rbrakk>\n       \\<Longrightarrow> \\<forall>x2.\n                            v - n = Suc x2 \\<longrightarrow>\n                            a x2 = a (v - Suc n)", "apply (metis diff_Suc nat.case(2))"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  robdd_\\<alpha> rr\n   (\\<lambda>v.\n       case v - n of 0 \\<Rightarrow> ?b | Suc x \\<Rightarrow> ?a x) =\n  robdd_\\<alpha> rr (\\<lambda>v. ?a (v - Suc n))\n\ngoal (1 subgoal):\n 1. \\<And>i l v r n bo bs.\n       \\<lbrakk>\\<lbrakk>n = v; bo = None;\n                 robdd_invar_vars_greater (Suc n) l;\n                 robdd_invar_reduced l\\<rbrakk>\n                \\<Longrightarrow> robdd_list_\\<alpha> l (Suc n) bs =\n                                  (\\<forall>a\\<in>list_to_assignment_set bs.\nrobdd_\\<alpha> l (\\<lambda>v. a (v - Suc n)));\n        \\<lbrakk>n = v; bo = None; robdd_invar_vars_greater (Suc n) r;\n         robdd_invar_reduced r\\<rbrakk>\n        \\<Longrightarrow> robdd_list_\\<alpha> r (Suc n) bs =\n                          (\\<forall>a\\<in>list_to_assignment_set bs.\n                              robdd_\\<alpha> r (\\<lambda>v. a (v - Suc n)));\n        \\<And>x2.\n           \\<lbrakk>n = v; bo = Some x2; x2 = True;\n            robdd_invar_vars_greater (Suc n) l;\n            robdd_invar_reduced l\\<rbrakk>\n           \\<Longrightarrow> robdd_list_\\<alpha> l (Suc n) bs =\n                             (\\<forall>a\\<in>list_to_assignment_set bs.\n                                 robdd_\\<alpha> l\n                                  (\\<lambda>v. a (v - Suc n)));\n        \\<And>x2.\n           \\<lbrakk>n = v; bo = Some x2; x2 = False;\n            robdd_invar_vars_greater (Suc n) r;\n            robdd_invar_reduced r\\<rbrakk>\n           \\<Longrightarrow> robdd_list_\\<alpha> r (Suc n) bs =\n                             (\\<forall>a\\<in>list_to_assignment_set bs.\n                                 robdd_\\<alpha> r\n                                  (\\<lambda>v. a (v - Suc n)));\n        \\<lbrakk>n \\<noteq> v;\n         robdd_invar_vars_greater (Suc n) (robdd_var i l v r);\n         robdd_invar_reduced (robdd_var i l v r)\\<rbrakk>\n        \\<Longrightarrow> robdd_list_\\<alpha> (robdd_var i l v r) (Suc n)\n                           bs =\n                          (\\<forall>a\\<in>list_to_assignment_set bs.\n                              robdd_\\<alpha> (robdd_var i l v r)\n                               (\\<lambda>v. a (v - Suc n)));\n        robdd_invar_vars_greater n (robdd_var i l v r);\n        robdd_invar_reduced (robdd_var i l v r)\\<rbrakk>\n       \\<Longrightarrow> robdd_list_\\<alpha> (robdd_var i l v r) n\n                          (bo # bs) =\n                         (\\<forall>a\\<in>list_to_assignment_set (bo # bs).\n                             robdd_\\<alpha> (robdd_var i l v r)\n                              (\\<lambda>v. a (v - n)))", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. robdd_list_\\<alpha> (robdd_var i ll v rr) n (b # bs) =\n    (\\<forall>a\\<in>list_to_assignment_set (b # bs).\n        robdd_\\<alpha> (robdd_var i ll v rr) (\\<lambda>v. a (v - n)))", "proof (cases \"n = v\")"], ["proof (state)\ngoal (2 subgoals):\n 1. n = v \\<Longrightarrow>\n    robdd_list_\\<alpha> (robdd_var i ll v rr) n (b # bs) =\n    (\\<forall>a\\<in>list_to_assignment_set (b # bs).\n        robdd_\\<alpha> (robdd_var i ll v rr) (\\<lambda>v. a (v - n)))\n 2. n \\<noteq> v \\<Longrightarrow>\n    robdd_list_\\<alpha> (robdd_var i ll v rr) n (b # bs) =\n    (\\<forall>a\\<in>list_to_assignment_set (b # bs).\n        robdd_\\<alpha> (robdd_var i ll v rr) (\\<lambda>v. a (v - n)))", "case False"], ["proof (state)\nthis:\n  n \\<noteq> v\n\ngoal (2 subgoals):\n 1. n = v \\<Longrightarrow>\n    robdd_list_\\<alpha> (robdd_var i ll v rr) n (b # bs) =\n    (\\<forall>a\\<in>list_to_assignment_set (b # bs).\n        robdd_\\<alpha> (robdd_var i ll v rr) (\\<lambda>v. a (v - n)))\n 2. n \\<noteq> v \\<Longrightarrow>\n    robdd_list_\\<alpha> (robdd_var i ll v rr) n (b # bs) =\n    (\\<forall>a\\<in>list_to_assignment_set (b # bs).\n        robdd_\\<alpha> (robdd_var i ll v rr) (\\<lambda>v. a (v - n)))", "with n_le"], ["proof (chain)\npicking this:\n  n \\<le> v\n  n \\<noteq> v", "have n_less: \"n < v\""], ["proof (prove)\nusing this:\n  n \\<le> v\n  n \\<noteq> v\n\ngoal (1 subgoal):\n 1. n < v", "by simp"], ["proof (state)\nthis:\n  n < v\n\ngoal (2 subgoals):\n 1. n = v \\<Longrightarrow>\n    robdd_list_\\<alpha> (robdd_var i ll v rr) n (b # bs) =\n    (\\<forall>a\\<in>list_to_assignment_set (b # bs).\n        robdd_\\<alpha> (robdd_var i ll v rr) (\\<lambda>v. a (v - n)))\n 2. n \\<noteq> v \\<Longrightarrow>\n    robdd_list_\\<alpha> (robdd_var i ll v rr) n (b # bs) =\n    (\\<forall>a\\<in>list_to_assignment_set (b # bs).\n        robdd_\\<alpha> (robdd_var i ll v rr) (\\<lambda>v. a (v - n)))", "hence \"v - n = Suc (v - (Suc n))\""], ["proof (prove)\nusing this:\n  n < v\n\ngoal (1 subgoal):\n 1. v - n = Suc (v - Suc n)", "by simp"], ["proof (state)\nthis:\n  v - n = Suc (v - Suc n)\n\ngoal (2 subgoals):\n 1. n = v \\<Longrightarrow>\n    robdd_list_\\<alpha> (robdd_var i ll v rr) n (b # bs) =\n    (\\<forall>a\\<in>list_to_assignment_set (b # bs).\n        robdd_\\<alpha> (robdd_var i ll v rr) (\\<lambda>v. a (v - n)))\n 2. n \\<noteq> v \\<Longrightarrow>\n    robdd_list_\\<alpha> (robdd_var i ll v rr) n (b # bs) =\n    (\\<forall>a\\<in>list_to_assignment_set (b # bs).\n        robdd_\\<alpha> (robdd_var i ll v rr) (\\<lambda>v. a (v - n)))", "with indhyp_5 n_less"], ["proof (chain)\npicking this:\n  n \\<noteq> v \\<Longrightarrow>\n  robdd_list_\\<alpha> (robdd_var i ll v rr) (Suc n) bs =\n  (\\<forall>a\\<in>list_to_assignment_set bs.\n      if a (v - Suc n) then robdd_\\<alpha> ll (\\<lambda>v. a (v - Suc n))\n      else robdd_\\<alpha> rr (\\<lambda>v. a (v - Suc n)))\n  n < v\n  v - n = Suc (v - Suc n)", "show ?thesis"], ["proof (prove)\nusing this:\n  n \\<noteq> v \\<Longrightarrow>\n  robdd_list_\\<alpha> (robdd_var i ll v rr) (Suc n) bs =\n  (\\<forall>a\\<in>list_to_assignment_set bs.\n      if a (v - Suc n) then robdd_\\<alpha> ll (\\<lambda>v. a (v - Suc n))\n      else robdd_\\<alpha> rr (\\<lambda>v. a (v - Suc n)))\n  n < v\n  v - n = Suc (v - Suc n)\n\ngoal (1 subgoal):\n 1. robdd_list_\\<alpha> (robdd_var i ll v rr) n (b # bs) =\n    (\\<forall>a\\<in>list_to_assignment_set (b # bs).\n        robdd_\\<alpha> (robdd_var i ll v rr) (\\<lambda>v. a (v - n)))", "apply (simp add: Ball_def all_conj_distrib del: Suc_diff)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>robdd_list_\\<alpha> (robdd_var i ll v rr) (Suc n) bs =\n             (\\<forall>x.\n                 x \\<in> list_to_assignment_set bs \\<longrightarrow>\n                 (if x (v - Suc n)\n                  then robdd_\\<alpha> ll (\\<lambda>v. x (v - Suc n))\n                  else robdd_\\<alpha> rr (\\<lambda>v. x (v - Suc n))));\n     n < v; v - n = Suc (v - Suc n)\\<rbrakk>\n    \\<Longrightarrow> ((\\<forall>x.\n                           x (v - Suc n) \\<longrightarrow>\n                           x \\<in> list_to_assignment_set\n                                    bs \\<longrightarrow>\n                           robdd_\\<alpha> ll\n                            (\\<lambda>v. x (v - Suc n))) \\<and>\n                       (\\<forall>x.\n                           \\<not> x (v - Suc n) \\<longrightarrow>\n                           x \\<in> list_to_assignment_set\n                                    bs \\<longrightarrow>\n                           robdd_\\<alpha> rr (\\<lambda>v. x (v - Suc n)))) =\n                      ((\\<forall>x.\n                           x (Suc (v - Suc n)) \\<longrightarrow>\n                           x \\<in> list_to_assignment_set\n                                    (b # bs) \\<longrightarrow>\n                           robdd_\\<alpha> ll (\\<lambda>v. x (v - n))) \\<and>\n                       (\\<forall>x.\n                           \\<not> x (Suc (v - Suc n)) \\<longrightarrow>\n                           x \\<in> list_to_assignment_set\n                                    (b # bs) \\<longrightarrow>\n                           robdd_\\<alpha> rr (\\<lambda>v. x (v - n))))", "apply (cases b)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>robdd_list_\\<alpha> (robdd_var i ll v rr) (Suc n) bs =\n             (\\<forall>x.\n                 x \\<in> list_to_assignment_set bs \\<longrightarrow>\n                 (if x (v - Suc n)\n                  then robdd_\\<alpha> ll (\\<lambda>v. x (v - Suc n))\n                  else robdd_\\<alpha> rr (\\<lambda>v. x (v - Suc n))));\n     n < v; v - n = Suc (v - Suc n); b = None\\<rbrakk>\n    \\<Longrightarrow> ((\\<forall>x.\n                           x (v - Suc n) \\<longrightarrow>\n                           x \\<in> list_to_assignment_set\n                                    bs \\<longrightarrow>\n                           robdd_\\<alpha> ll\n                            (\\<lambda>v. x (v - Suc n))) \\<and>\n                       (\\<forall>x.\n                           \\<not> x (v - Suc n) \\<longrightarrow>\n                           x \\<in> list_to_assignment_set\n                                    bs \\<longrightarrow>\n                           robdd_\\<alpha> rr (\\<lambda>v. x (v - Suc n)))) =\n                      ((\\<forall>x.\n                           x (Suc (v - Suc n)) \\<longrightarrow>\n                           x \\<in> list_to_assignment_set\n                                    (b # bs) \\<longrightarrow>\n                           robdd_\\<alpha> ll (\\<lambda>v. x (v - n))) \\<and>\n                       (\\<forall>x.\n                           \\<not> x (Suc (v - Suc n)) \\<longrightarrow>\n                           x \\<in> list_to_assignment_set\n                                    (b # bs) \\<longrightarrow>\n                           robdd_\\<alpha> rr (\\<lambda>v. x (v - n))))\n 2. \\<And>a.\n       \\<lbrakk>robdd_list_\\<alpha> (robdd_var i ll v rr) (Suc n) bs =\n                (\\<forall>x.\n                    x \\<in> list_to_assignment_set bs \\<longrightarrow>\n                    (if x (v - Suc n)\n                     then robdd_\\<alpha> ll (\\<lambda>v. x (v - Suc n))\n                     else robdd_\\<alpha> rr (\\<lambda>v. x (v - Suc n))));\n        n < v; v - n = Suc (v - Suc n); b = Some a\\<rbrakk>\n       \\<Longrightarrow> ((\\<forall>x.\n                              x (v - Suc n) \\<longrightarrow>\n                              x \\<in> list_to_assignment_set\n bs \\<longrightarrow>\n                              robdd_\\<alpha> ll\n                               (\\<lambda>v. x (v - Suc n))) \\<and>\n                          (\\<forall>x.\n                              \\<not> x (v - Suc n) \\<longrightarrow>\n                              x \\<in> list_to_assignment_set\n bs \\<longrightarrow>\n                              robdd_\\<alpha> rr\n                               (\\<lambda>v. x (v - Suc n)))) =\n                         ((\\<forall>x.\n                              x (Suc (v - Suc n)) \\<longrightarrow>\n                              x \\<in> list_to_assignment_set\n (b # bs) \\<longrightarrow>\n                              robdd_\\<alpha> ll\n                               (\\<lambda>v. x (v - n))) \\<and>\n                          (\\<forall>x.\n                              \\<not> x (Suc (v - Suc n)) \\<longrightarrow>\n                              x \\<in> list_to_assignment_set\n (b # bs) \\<longrightarrow>\n                              robdd_\\<alpha> rr (\\<lambda>v. x (v - n))))", "apply (simp_all add: image_iff Bex_def ex_disj_distrib all_conj_distrib imp_conjR\n                       shift_assignment_def imp_ex all_simps(6)[symmetric]\n                       ll_sem rr_sem split: nat.split\n                  del: ex_simps all_simps Suc_diff)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  robdd_list_\\<alpha> (robdd_var i ll v rr) n (b # bs) =\n  (\\<forall>a\\<in>list_to_assignment_set (b # bs).\n      robdd_\\<alpha> (robdd_var i ll v rr) (\\<lambda>v. a (v - n)))\n\ngoal (1 subgoal):\n 1. n = v \\<Longrightarrow>\n    robdd_list_\\<alpha> (robdd_var i ll v rr) n (b # bs) =\n    (\\<forall>a\\<in>list_to_assignment_set (b # bs).\n        robdd_\\<alpha> (robdd_var i ll v rr) (\\<lambda>v. a (v - n)))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. n = v \\<Longrightarrow>\n    robdd_list_\\<alpha> (robdd_var i ll v rr) n (b # bs) =\n    (\\<forall>a\\<in>list_to_assignment_set (b # bs).\n        robdd_\\<alpha> (robdd_var i ll v rr) (\\<lambda>v. a (v - n)))", "case True"], ["proof (state)\nthis:\n  n = v\n\ngoal (1 subgoal):\n 1. n = v \\<Longrightarrow>\n    robdd_list_\\<alpha> (robdd_var i ll v rr) n (b # bs) =\n    (\\<forall>a\\<in>list_to_assignment_set (b # bs).\n        robdd_\\<alpha> (robdd_var i ll v rr) (\\<lambda>v. a (v - n)))", "note n_eq[simp] = this"], ["proof (state)\nthis:\n  n = v\n\ngoal (1 subgoal):\n 1. n = v \\<Longrightarrow>\n    robdd_list_\\<alpha> (robdd_var i ll v rr) n (b # bs) =\n    (\\<forall>a\\<in>list_to_assignment_set (b # bs).\n        robdd_\\<alpha> (robdd_var i ll v rr) (\\<lambda>v. a (v - n)))", "from indhyp_1 indhyp_2 indhyp_3 indhyp_4"], ["proof (chain)\npicking this:\n  \\<lbrakk>n = v; b = None\\<rbrakk>\n  \\<Longrightarrow> robdd_list_\\<alpha> ll (Suc n) bs =\n                    (\\<forall>a\\<in>list_to_assignment_set bs.\n                        robdd_\\<alpha> ll (\\<lambda>v. a (v - Suc n)))\n  \\<lbrakk>n = v; b = None\\<rbrakk>\n  \\<Longrightarrow> robdd_list_\\<alpha> rr (Suc n) bs =\n                    (\\<forall>a\\<in>list_to_assignment_set bs.\n                        robdd_\\<alpha> rr (\\<lambda>v. a (v - Suc n)))\n  \\<lbrakk>n = v; b = Some True\\<rbrakk>\n  \\<Longrightarrow> robdd_list_\\<alpha> ll (Suc v) bs =\n                    (\\<forall>a\\<in>list_to_assignment_set bs.\n                        robdd_\\<alpha> ll (\\<lambda>va. a (va - Suc v)))\n  \\<lbrakk>n = v; b = Some False\\<rbrakk>\n  \\<Longrightarrow> robdd_list_\\<alpha> rr (Suc v) bs =\n                    (\\<forall>a\\<in>list_to_assignment_set bs.\n                        robdd_\\<alpha> rr (\\<lambda>va. a (va - Suc v)))", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<lbrakk>n = v; b = None\\<rbrakk>\n  \\<Longrightarrow> robdd_list_\\<alpha> ll (Suc n) bs =\n                    (\\<forall>a\\<in>list_to_assignment_set bs.\n                        robdd_\\<alpha> ll (\\<lambda>v. a (v - Suc n)))\n  \\<lbrakk>n = v; b = None\\<rbrakk>\n  \\<Longrightarrow> robdd_list_\\<alpha> rr (Suc n) bs =\n                    (\\<forall>a\\<in>list_to_assignment_set bs.\n                        robdd_\\<alpha> rr (\\<lambda>v. a (v - Suc n)))\n  \\<lbrakk>n = v; b = Some True\\<rbrakk>\n  \\<Longrightarrow> robdd_list_\\<alpha> ll (Suc v) bs =\n                    (\\<forall>a\\<in>list_to_assignment_set bs.\n                        robdd_\\<alpha> ll (\\<lambda>va. a (va - Suc v)))\n  \\<lbrakk>n = v; b = Some False\\<rbrakk>\n  \\<Longrightarrow> robdd_list_\\<alpha> rr (Suc v) bs =\n                    (\\<forall>a\\<in>list_to_assignment_set bs.\n                        robdd_\\<alpha> rr (\\<lambda>va. a (va - Suc v)))\n\ngoal (1 subgoal):\n 1. robdd_list_\\<alpha> (robdd_var i ll v rr) n (b # bs) =\n    (\\<forall>a\\<in>list_to_assignment_set (b # bs).\n        robdd_\\<alpha> (robdd_var i ll v rr) (\\<lambda>v. a (v - n)))", "apply (simp add: Ball_def split: option.splits bool.splits)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>b = None \\<Longrightarrow>\n             robdd_list_\\<alpha> ll (Suc v) bs =\n             (\\<forall>x.\n                 x \\<in> list_to_assignment_set bs \\<longrightarrow>\n                 robdd_\\<alpha> ll (\\<lambda>va. x (va - Suc v)));\n     b = None \\<Longrightarrow>\n     robdd_list_\\<alpha> rr (Suc v) bs =\n     (\\<forall>x.\n         x \\<in> list_to_assignment_set bs \\<longrightarrow>\n         robdd_\\<alpha> rr (\\<lambda>va. x (va - Suc v)));\n     b = Some True \\<Longrightarrow>\n     robdd_list_\\<alpha> ll (Suc v) bs =\n     (\\<forall>x.\n         x \\<in> list_to_assignment_set bs \\<longrightarrow>\n         robdd_\\<alpha> ll (\\<lambda>va. x (va - Suc v)));\n     b = Some False \\<Longrightarrow>\n     robdd_list_\\<alpha> rr (Suc v) bs =\n     (\\<forall>x.\n         x \\<in> list_to_assignment_set bs \\<longrightarrow>\n         robdd_\\<alpha> rr (\\<lambda>va. x (va - Suc v)))\\<rbrakk>\n    \\<Longrightarrow> (b = None \\<longrightarrow>\n                       ((\\<forall>x.\n                            x \\<in> list_to_assignment_set\n                                     bs \\<longrightarrow>\n                            robdd_\\<alpha> ll\n                             (\\<lambda>va. x (va - Suc v))) \\<and>\n                        (\\<forall>x.\n                            x \\<in> list_to_assignment_set\n                                     bs \\<longrightarrow>\n                            robdd_\\<alpha> rr\n                             (\\<lambda>va. x (va - Suc v)))) =\n                       (\\<forall>x.\n                           (x 0 \\<longrightarrow>\n                            (x \\<in> shift_assignment True `\n                                     list_to_assignment_set\nbs \\<longrightarrow>\n                             robdd_\\<alpha> ll\n                              (\\<lambda>va. x (va - v))) \\<and>\n                            (x \\<in> shift_assignment False `\n                                     list_to_assignment_set\nbs \\<longrightarrow>\n                             robdd_\\<alpha> ll\n                              (\\<lambda>va. x (va - v)))) \\<and>\n                           (\\<not> x 0 \\<longrightarrow>\n                            (x \\<in> shift_assignment True `\n                                     list_to_assignment_set\nbs \\<longrightarrow>\n                             robdd_\\<alpha> rr\n                              (\\<lambda>va. x (va - v))) \\<and>\n                            (x \\<in> shift_assignment False `\n                                     list_to_assignment_set\nbs \\<longrightarrow>\n                             robdd_\\<alpha> rr\n                              (\\<lambda>va. x (va - v)))))) \\<and>\n                      (\\<forall>x2.\n                          (x2 \\<longrightarrow>\n                           b = Some True \\<longrightarrow>\n                           (\\<forall>x.\n                               x \\<in> list_to_assignment_set\n  bs \\<longrightarrow>\n                               robdd_\\<alpha> ll\n                                (\\<lambda>va. x (va - Suc v))) =\n                           (\\<forall>x.\n                               (x 0 \\<longrightarrow>\n                                x \\<in> shift_assignment True `\n  list_to_assignment_set bs \\<longrightarrow>\n                                robdd_\\<alpha> ll\n                                 (\\<lambda>va. x (va - v))) \\<and>\n                               (\\<not> x 0 \\<longrightarrow>\n                                x \\<in> shift_assignment True `\n  list_to_assignment_set bs \\<longrightarrow>\n                                robdd_\\<alpha> rr\n                                 (\\<lambda>va. x (va - v))))) \\<and>\n                          (\\<not> x2 \\<longrightarrow>\n                           b = Some False \\<longrightarrow>\n                           (\\<forall>x.\n                               x \\<in> list_to_assignment_set\n  bs \\<longrightarrow>\n                               robdd_\\<alpha> rr\n                                (\\<lambda>va. x (va - Suc v))) =\n                           (\\<forall>x.\n                               (x 0 \\<longrightarrow>\n                                x \\<in> shift_assignment False `\n  list_to_assignment_set bs \\<longrightarrow>\n                                robdd_\\<alpha> ll\n                                 (\\<lambda>va. x (va - v))) \\<and>\n                               (\\<not> x 0 \\<longrightarrow>\n                                x \\<in> shift_assignment False `\n  list_to_assignment_set bs \\<longrightarrow>\n                                robdd_\\<alpha> rr\n                                 (\\<lambda>va. x (va - v))))))", "apply (simp_all add: image_iff Bex_def ex_disj_distrib all_conj_distrib imp_conjR\n                       shift_assignment_def imp_ex all_simps(6)[symmetric]\n                       ll_sem[unfolded n_eq] rr_sem[unfolded n_eq] \n                  del: ex_simps all_simps)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  robdd_list_\\<alpha> (robdd_var i ll v rr) n (b # bs) =\n  (\\<forall>a\\<in>list_to_assignment_set (b # bs).\n      robdd_\\<alpha> (robdd_var i ll v rr) (\\<lambda>v. a (v - n)))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  robdd_list_\\<alpha> (robdd_var i ll v rr) n (b # bs) =\n  (\\<forall>a\\<in>list_to_assignment_set (b # bs).\n      robdd_\\<alpha> (robdd_var i ll v rr) (\\<lambda>v. a (v - n)))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma robdd_list_\\<alpha>_correct:\nassumes b_OK: \"robdd_invar_vars b\" \"robdd_invar_reduced b\"\nshows \"robdd_list_\\<alpha> b 0 l \\<longleftrightarrow> (\\<forall>a \\<in> (list_to_assignment_set l). robdd_\\<alpha> b a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. robdd_list_\\<alpha> b 0 l =\n    (\\<forall>a\\<in>list_to_assignment_set l. robdd_\\<alpha> b a)", "using robdd_list_\\<alpha>_correct_aux [of 0 b] b_OK"], ["proof (prove)\nusing this:\n  \\<lbrakk>robdd_invar_vars_greater 0 b; robdd_invar_reduced b\\<rbrakk>\n  \\<Longrightarrow> robdd_list_\\<alpha> b 0 ?l =\n                    (\\<forall>a\\<in>list_to_assignment_set ?l.\n                        robdd_\\<alpha> b (\\<lambda>v. a (v - 0)))\n  robdd_invar_vars b\n  robdd_invar_reduced b\n\ngoal (1 subgoal):\n 1. robdd_list_\\<alpha> b 0 l =\n    (\\<forall>a\\<in>list_to_assignment_set l. robdd_\\<alpha> b a)", "unfolding robdd_invar_vars_def"], ["proof (prove)\nusing this:\n  \\<lbrakk>robdd_invar_vars_greater 0 b; robdd_invar_reduced b\\<rbrakk>\n  \\<Longrightarrow> robdd_list_\\<alpha> b 0 ?l =\n                    (\\<forall>a\\<in>list_to_assignment_set ?l.\n                        robdd_\\<alpha> b (\\<lambda>v. a (v - 0)))\n  robdd_invar_vars_greater 0 b\n  robdd_invar_reduced b\n\ngoal (1 subgoal):\n 1. robdd_list_\\<alpha> b 0 l =\n    (\\<forall>a\\<in>list_to_assignment_set l. robdd_\\<alpha> b a)", "by simp"], ["", "fun robdd_iteratei where\n  \"robdd_iteratei n ac (robdd_leaf f) = (if f then set_iterator_sng ac else set_iterator_emp)\" |\n  \"robdd_iteratei n ac (robdd_var i l v r) = \n   (set_iterator_union (robdd_iteratei (Suc v) ((Some True) # ((replicate (v-n) None) @ ac)) l)\n                       (robdd_iteratei (Suc v) ((Some False) # ((replicate (v-n) None) @ ac)) r))\""], ["", "(* TODO: Prove correctness of this iterator *)"], ["", "end"]]}