{"file_name": "/home/qj213/afp-2021-10-22/thys/Collections/Iterator/Idx_Iterator.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Collections", "problem_names": ["lemma idx_iteratei_aux_simps[simp]:\n  \"i=0 \\<Longrightarrow> idx_iteratei_aux get sz i l c f \\<sigma> = \\<sigma>\"\n  \"\\<not>c \\<sigma> \\<Longrightarrow> idx_iteratei_aux get sz i l c f \\<sigma> = \\<sigma>\"\n  \"\\<lbrakk>i\\<noteq>0; c \\<sigma>\\<rbrakk> \\<Longrightarrow> idx_iteratei_aux get sz i l c f \\<sigma> = idx_iteratei_aux get sz (i - 1) l c f (f (get l (sz-i)) \\<sigma>)\"", "lemma idx_iteratei_eq_foldli:\n  assumes sz: \"(sz, length) \\<in> arel \\<rightarrow> nat_rel\"\n  assumes get: \"(get, (!)) \\<in> arel \\<rightarrow> nat_rel \\<rightarrow> Id\"\n  assumes \"(s,s') \\<in> arel\"\n  shows \"(idx_iteratei get sz s, foldli s') \\<in> Id\"", "lemma idx_iteratei_aux_nth_conv_foldli_drop:\n  fixes xs :: \"'b list\"\n  assumes \"i \\<le> length xs\"\n  shows \"idx_iteratei_aux (!) (length xs) i xs c f \\<sigma> = foldli (drop (length xs - i) xs) c f \\<sigma>\"", "lemma idx_iteratei_nth_length_conv_foldli: \"idx_iteratei nth length = foldli\""], "translations": [["", "lemma idx_iteratei_aux_simps[simp]:\n  \"i=0 \\<Longrightarrow> idx_iteratei_aux get sz i l c f \\<sigma> = \\<sigma>\"\n  \"\\<not>c \\<sigma> \\<Longrightarrow> idx_iteratei_aux get sz i l c f \\<sigma> = \\<sigma>\"\n  \"\\<lbrakk>i\\<noteq>0; c \\<sigma>\\<rbrakk> \\<Longrightarrow> idx_iteratei_aux get sz i l c f \\<sigma> = idx_iteratei_aux get sz (i - 1) l c f (f (get l (sz-i)) \\<sigma>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (i = 0 \\<Longrightarrow>\n     idx_iteratei_aux get sz i l c f \\<sigma> = \\<sigma>) &&&\n    (\\<not> c \\<sigma> \\<Longrightarrow>\n     idx_iteratei_aux get sz i l c f \\<sigma> = \\<sigma>) &&&\n    (\\<lbrakk>i \\<noteq> 0; c \\<sigma>\\<rbrakk>\n     \\<Longrightarrow> idx_iteratei_aux get sz i l c f \\<sigma> =\n                       idx_iteratei_aux get sz (i - 1) l c f\n                        (f (get l (sz - i)) \\<sigma>))", "apply -"], ["proof (prove)\ngoal (3 subgoals):\n 1. i = 0 \\<Longrightarrow>\n    idx_iteratei_aux get sz i l c f \\<sigma> = \\<sigma>\n 2. \\<not> c \\<sigma> \\<Longrightarrow>\n    idx_iteratei_aux get sz i l c f \\<sigma> = \\<sigma>\n 3. \\<lbrakk>i \\<noteq> 0; c \\<sigma>\\<rbrakk>\n    \\<Longrightarrow> idx_iteratei_aux get sz i l c f \\<sigma> =\n                      idx_iteratei_aux get sz (i - 1) l c f\n                       (f (get l (sz - i)) \\<sigma>)", "apply (subst idx_iteratei_aux.simps, simp)+"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "definition \"idx_iteratei get sz l c f \\<sigma> == idx_iteratei_aux get (sz l) (sz l) l c f \\<sigma>\""], ["", "lemma idx_iteratei_eq_foldli:\n  assumes sz: \"(sz, length) \\<in> arel \\<rightarrow> nat_rel\"\n  assumes get: \"(get, (!)) \\<in> arel \\<rightarrow> nat_rel \\<rightarrow> Id\"\n  assumes \"(s,s') \\<in> arel\"\n  shows \"(idx_iteratei get sz s, foldli s') \\<in> Id\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (idx_iteratei get sz s, foldli s') \\<in> Id", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. (idx_iteratei get sz s, foldli s') \\<in> Id", "have size_correct: \"\\<And>s s'. (s,s') \\<in> arel \\<Longrightarrow> sz s = length s'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>s s'. (s, s') \\<in> arel \\<Longrightarrow> sz s = length s'", "using sz[param_fo]"], ["proof (prove)\nusing this:\n  (?x, ?x') \\<in> arel \\<Longrightarrow> (sz ?x, length ?x') \\<in> nat_rel\n\ngoal (1 subgoal):\n 1. \\<And>s s'. (s, s') \\<in> arel \\<Longrightarrow> sz s = length s'", "by simp"], ["proof (state)\nthis:\n  (?s, ?s') \\<in> arel \\<Longrightarrow> sz ?s = length ?s'\n\ngoal (1 subgoal):\n 1. (idx_iteratei get sz s, foldli s') \\<in> Id", "have get_correct: \"\\<And>s s' n. (s,s') \\<in> arel \\<Longrightarrow> get s n = s' ! n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>s s' n. (s, s') \\<in> arel \\<Longrightarrow> get s n = s' ! n", "using get[param_fo]"], ["proof (prove)\nusing this:\n  \\<lbrakk>(?x1, ?x'1) \\<in> arel; (?x, ?x') \\<in> nat_rel\\<rbrakk>\n  \\<Longrightarrow> (get ?x1 ?x, ?x'1 ! ?x') \\<in> Id\n\ngoal (1 subgoal):\n 1. \\<And>s s' n. (s, s') \\<in> arel \\<Longrightarrow> get s n = s' ! n", "by simp"], ["proof (state)\nthis:\n  (?s, ?s') \\<in> arel \\<Longrightarrow> get ?s ?n = ?s' ! ?n\n\ngoal (1 subgoal):\n 1. (idx_iteratei get sz s, foldli s') \\<in> Id", "{"], ["proof (state)\nthis:\n  (?s, ?s') \\<in> arel \\<Longrightarrow> get ?s ?n = ?s' ! ?n\n\ngoal (1 subgoal):\n 1. (idx_iteratei get sz s, foldli s') \\<in> Id", "fix n l"], ["proof (state)\ngoal (1 subgoal):\n 1. (idx_iteratei get sz s, foldli s') \\<in> Id", "assume A: \"Suc n \\<le> length l\""], ["proof (state)\nthis:\n  Suc n \\<le> length l\n\ngoal (1 subgoal):\n 1. (idx_iteratei get sz s, foldli s') \\<in> Id", "hence B: \"length l - Suc n < length l\""], ["proof (prove)\nusing this:\n  Suc n \\<le> length l\n\ngoal (1 subgoal):\n 1. length l - Suc n < length l", "by simp"], ["proof (state)\nthis:\n  length l - Suc n < length l\n\ngoal (1 subgoal):\n 1. (idx_iteratei get sz s, foldli s') \\<in> Id", "from A"], ["proof (chain)\npicking this:\n  Suc n \\<le> length l", "have [simp]: \"Suc (length l - Suc n) = length l - n\""], ["proof (prove)\nusing this:\n  Suc n \\<le> length l\n\ngoal (1 subgoal):\n 1. Suc (length l - Suc n) = length l - n", "by simp"], ["proof (state)\nthis:\n  Suc (length l - Suc n) = length l - n\n\ngoal (1 subgoal):\n 1. (idx_iteratei get sz s, foldli s') \\<in> Id", "from Cons_nth_drop_Suc[OF B, simplified]"], ["proof (chain)\npicking this:\n  l ! (length l - Suc n) # drop (length l - n) l = drop (length l - Suc n) l", "have \n      \"drop (length l - Suc n) l = l!(length l - Suc n)#drop (length l - n) l\""], ["proof (prove)\nusing this:\n  l ! (length l - Suc n) # drop (length l - n) l = drop (length l - Suc n) l\n\ngoal (1 subgoal):\n 1. drop (length l - Suc n) l =\n    l ! (length l - Suc n) # drop (length l - n) l", "by simp"], ["proof (state)\nthis:\n  drop (length l - Suc n) l = l ! (length l - Suc n) # drop (length l - n) l\n\ngoal (1 subgoal):\n 1. (idx_iteratei get sz s, foldli s') \\<in> Id", "}"], ["proof (state)\nthis:\n  Suc ?n2 \\<le> length ?l2 \\<Longrightarrow>\n  drop (length ?l2 - Suc ?n2) ?l2 =\n  ?l2 ! (length ?l2 - Suc ?n2) # drop (length ?l2 - ?n2) ?l2\n\ngoal (1 subgoal):\n 1. (idx_iteratei get sz s, foldli s') \\<in> Id", "note drop_aux=this"], ["proof (state)\nthis:\n  Suc ?n2 \\<le> length ?l2 \\<Longrightarrow>\n  drop (length ?l2 - Suc ?n2) ?l2 =\n  ?l2 ! (length ?l2 - Suc ?n2) # drop (length ?l2 - ?n2) ?l2\n\ngoal (1 subgoal):\n 1. (idx_iteratei get sz s, foldli s') \\<in> Id", "{"], ["proof (state)\nthis:\n  Suc ?n2 \\<le> length ?l2 \\<Longrightarrow>\n  drop (length ?l2 - Suc ?n2) ?l2 =\n  ?l2 ! (length ?l2 - Suc ?n2) # drop (length ?l2 - ?n2) ?l2\n\ngoal (1 subgoal):\n 1. (idx_iteratei get sz s, foldli s') \\<in> Id", "fix s s' c f \\<sigma> i"], ["proof (state)\ngoal (1 subgoal):\n 1. (idx_iteratei get sz s, foldli s') \\<in> Id", "assume \"(s,s') \\<in> arel\" \"i\\<le>sz s\""], ["proof (state)\nthis:\n  (s, s') \\<in> arel\n  i \\<le> sz s\n\ngoal (1 subgoal):\n 1. (idx_iteratei get sz s, foldli s') \\<in> Id", "hence \"idx_iteratei_aux get (sz s) i s c f \\<sigma> = foldli (drop (sz s - i) s') c f \\<sigma>\""], ["proof (prove)\nusing this:\n  (s, s') \\<in> arel\n  i \\<le> sz s\n\ngoal (1 subgoal):\n 1. idx_iteratei_aux get (sz s) i s c f \\<sigma> =\n    foldli (drop (sz s - i) s') c f \\<sigma>", "proof (induct i arbitrary: \\<sigma>)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>\\<sigma>.\n       \\<lbrakk>(s, s') \\<in> arel; 0 \\<le> sz s\\<rbrakk>\n       \\<Longrightarrow> idx_iteratei_aux get (sz s) 0 s c f \\<sigma> =\n                         foldli (drop (sz s - 0) s') c f \\<sigma>\n 2. \\<And>i \\<sigma>.\n       \\<lbrakk>\\<And>\\<sigma>.\n                   \\<lbrakk>(s, s') \\<in> arel; i \\<le> sz s\\<rbrakk>\n                   \\<Longrightarrow> idx_iteratei_aux get (sz s) i s c f\n\\<sigma> =\n                                     foldli (drop (sz s - i) s') c f\n\\<sigma>;\n        (s, s') \\<in> arel; Suc i \\<le> sz s\\<rbrakk>\n       \\<Longrightarrow> idx_iteratei_aux get (sz s) (Suc i) s c f\n                          \\<sigma> =\n                         foldli (drop (sz s - Suc i) s') c f \\<sigma>", "case 0"], ["proof (state)\nthis:\n  (s, s') \\<in> arel\n  0 \\<le> sz s\n\ngoal (2 subgoals):\n 1. \\<And>\\<sigma>.\n       \\<lbrakk>(s, s') \\<in> arel; 0 \\<le> sz s\\<rbrakk>\n       \\<Longrightarrow> idx_iteratei_aux get (sz s) 0 s c f \\<sigma> =\n                         foldli (drop (sz s - 0) s') c f \\<sigma>\n 2. \\<And>i \\<sigma>.\n       \\<lbrakk>\\<And>\\<sigma>.\n                   \\<lbrakk>(s, s') \\<in> arel; i \\<le> sz s\\<rbrakk>\n                   \\<Longrightarrow> idx_iteratei_aux get (sz s) i s c f\n\\<sigma> =\n                                     foldli (drop (sz s - i) s') c f\n\\<sigma>;\n        (s, s') \\<in> arel; Suc i \\<le> sz s\\<rbrakk>\n       \\<Longrightarrow> idx_iteratei_aux get (sz s) (Suc i) s c f\n                          \\<sigma> =\n                         foldli (drop (sz s - Suc i) s') c f \\<sigma>", "with size_correct[of s]"], ["proof (chain)\npicking this:\n  (s, ?s') \\<in> arel \\<Longrightarrow> sz s = length ?s'\n  (s, s') \\<in> arel\n  0 \\<le> sz s", "show ?case"], ["proof (prove)\nusing this:\n  (s, ?s') \\<in> arel \\<Longrightarrow> sz s = length ?s'\n  (s, s') \\<in> arel\n  0 \\<le> sz s\n\ngoal (1 subgoal):\n 1. idx_iteratei_aux get (sz s) 0 s c f \\<sigma> =\n    foldli (drop (sz s - 0) s') c f \\<sigma>", "by simp"], ["proof (state)\nthis:\n  idx_iteratei_aux get (sz s) 0 s c f \\<sigma> =\n  foldli (drop (sz s - 0) s') c f \\<sigma>\n\ngoal (1 subgoal):\n 1. \\<And>i \\<sigma>.\n       \\<lbrakk>\\<And>\\<sigma>.\n                   \\<lbrakk>(s, s') \\<in> arel; i \\<le> sz s\\<rbrakk>\n                   \\<Longrightarrow> idx_iteratei_aux get (sz s) i s c f\n\\<sigma> =\n                                     foldli (drop (sz s - i) s') c f\n\\<sigma>;\n        (s, s') \\<in> arel; Suc i \\<le> sz s\\<rbrakk>\n       \\<Longrightarrow> idx_iteratei_aux get (sz s) (Suc i) s c f\n                          \\<sigma> =\n                         foldli (drop (sz s - Suc i) s') c f \\<sigma>", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i \\<sigma>.\n       \\<lbrakk>\\<And>\\<sigma>.\n                   \\<lbrakk>(s, s') \\<in> arel; i \\<le> sz s\\<rbrakk>\n                   \\<Longrightarrow> idx_iteratei_aux get (sz s) i s c f\n\\<sigma> =\n                                     foldli (drop (sz s - i) s') c f\n\\<sigma>;\n        (s, s') \\<in> arel; Suc i \\<le> sz s\\<rbrakk>\n       \\<Longrightarrow> idx_iteratei_aux get (sz s) (Suc i) s c f\n                          \\<sigma> =\n                         foldli (drop (sz s - Suc i) s') c f \\<sigma>", "case (Suc n)"], ["proof (state)\nthis:\n  \\<lbrakk>(s, s') \\<in> arel; n \\<le> sz s\\<rbrakk>\n  \\<Longrightarrow> idx_iteratei_aux get (sz s) n s c f ?\\<sigma> =\n                    foldli (drop (sz s - n) s') c f ?\\<sigma>\n  (s, s') \\<in> arel\n  Suc n \\<le> sz s\n\ngoal (1 subgoal):\n 1. \\<And>i \\<sigma>.\n       \\<lbrakk>\\<And>\\<sigma>.\n                   \\<lbrakk>(s, s') \\<in> arel; i \\<le> sz s\\<rbrakk>\n                   \\<Longrightarrow> idx_iteratei_aux get (sz s) i s c f\n\\<sigma> =\n                                     foldli (drop (sz s - i) s') c f\n\\<sigma>;\n        (s, s') \\<in> arel; Suc i \\<le> sz s\\<rbrakk>\n       \\<Longrightarrow> idx_iteratei_aux get (sz s) (Suc i) s c f\n                          \\<sigma> =\n                         foldli (drop (sz s - Suc i) s') c f \\<sigma>", "note S = Suc.prems(1)"], ["proof (state)\nthis:\n  (s, s') \\<in> arel\n\ngoal (1 subgoal):\n 1. \\<And>i \\<sigma>.\n       \\<lbrakk>\\<And>\\<sigma>.\n                   \\<lbrakk>(s, s') \\<in> arel; i \\<le> sz s\\<rbrakk>\n                   \\<Longrightarrow> idx_iteratei_aux get (sz s) i s c f\n\\<sigma> =\n                                     foldli (drop (sz s - i) s') c f\n\\<sigma>;\n        (s, s') \\<in> arel; Suc i \\<le> sz s\\<rbrakk>\n       \\<Longrightarrow> idx_iteratei_aux get (sz s) (Suc i) s c f\n                          \\<sigma> =\n                         foldli (drop (sz s - Suc i) s') c f \\<sigma>", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. idx_iteratei_aux get (sz s) (Suc n) s c f \\<sigma> =\n    foldli (drop (sz s - Suc n) s') c f \\<sigma>", "proof (cases \"c \\<sigma>\")"], ["proof (state)\ngoal (2 subgoals):\n 1. c \\<sigma> \\<Longrightarrow>\n    idx_iteratei_aux get (sz s) (Suc n) s c f \\<sigma> =\n    foldli (drop (sz s - Suc n) s') c f \\<sigma>\n 2. \\<not> c \\<sigma> \\<Longrightarrow>\n    idx_iteratei_aux get (sz s) (Suc n) s c f \\<sigma> =\n    foldli (drop (sz s - Suc n) s') c f \\<sigma>", "case False"], ["proof (state)\nthis:\n  \\<not> c \\<sigma>\n\ngoal (2 subgoals):\n 1. c \\<sigma> \\<Longrightarrow>\n    idx_iteratei_aux get (sz s) (Suc n) s c f \\<sigma> =\n    foldli (drop (sz s - Suc n) s') c f \\<sigma>\n 2. \\<not> c \\<sigma> \\<Longrightarrow>\n    idx_iteratei_aux get (sz s) (Suc n) s c f \\<sigma> =\n    foldli (drop (sz s - Suc n) s') c f \\<sigma>", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<not> c \\<sigma>\n\ngoal (1 subgoal):\n 1. idx_iteratei_aux get (sz s) (Suc n) s c f \\<sigma> =\n    foldli (drop (sz s - Suc n) s') c f \\<sigma>", "by simp"], ["proof (state)\nthis:\n  idx_iteratei_aux get (sz s) (Suc n) s c f \\<sigma> =\n  foldli (drop (sz s - Suc n) s') c f \\<sigma>\n\ngoal (1 subgoal):\n 1. c \\<sigma> \\<Longrightarrow>\n    idx_iteratei_aux get (sz s) (Suc n) s c f \\<sigma> =\n    foldli (drop (sz s - Suc n) s') c f \\<sigma>", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. c \\<sigma> \\<Longrightarrow>\n    idx_iteratei_aux get (sz s) (Suc n) s c f \\<sigma> =\n    foldli (drop (sz s - Suc n) s') c f \\<sigma>", "case [simp, intro!]: True"], ["proof (state)\nthis:\n  c \\<sigma>\n\ngoal (1 subgoal):\n 1. c \\<sigma> \\<Longrightarrow>\n    idx_iteratei_aux get (sz s) (Suc n) s c f \\<sigma> =\n    foldli (drop (sz s - Suc n) s') c f \\<sigma>", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. idx_iteratei_aux get (sz s) (Suc n) s c f \\<sigma> =\n    foldli (drop (sz s - Suc n) s') c f \\<sigma>", "using Suc"], ["proof (prove)\nusing this:\n  \\<lbrakk>(s, s') \\<in> arel; n \\<le> sz s\\<rbrakk>\n  \\<Longrightarrow> idx_iteratei_aux get (sz s) n s c f ?\\<sigma> =\n                    foldli (drop (sz s - n) s') c f ?\\<sigma>\n  (s, s') \\<in> arel\n  Suc n \\<le> sz s\n\ngoal (1 subgoal):\n 1. idx_iteratei_aux get (sz s) (Suc n) s c f \\<sigma> =\n    foldli (drop (sz s - Suc n) s') c f \\<sigma>", "by (simp add: size_correct[OF S] get_correct[OF S] drop_aux)"], ["proof (state)\nthis:\n  idx_iteratei_aux get (sz s) (Suc n) s c f \\<sigma> =\n  foldli (drop (sz s - Suc n) s') c f \\<sigma>\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  idx_iteratei_aux get (sz s) (Suc n) s c f \\<sigma> =\n  foldli (drop (sz s - Suc n) s') c f \\<sigma>\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  idx_iteratei_aux get (sz s) i s c f \\<sigma> =\n  foldli (drop (sz s - i) s') c f \\<sigma>\n\ngoal (1 subgoal):\n 1. (idx_iteratei get sz s, foldli s') \\<in> Id", "}"], ["proof (state)\nthis:\n  \\<lbrakk>(?sa2, ?s'a2) \\<in> arel; ?i2 \\<le> sz ?sa2\\<rbrakk>\n  \\<Longrightarrow> idx_iteratei_aux get (sz ?sa2) ?i2 ?sa2 ?c2 ?f2\n                     ?\\<sigma>2 =\n                    foldli (drop (sz ?sa2 - ?i2) ?s'a2) ?c2 ?f2 ?\\<sigma>2\n\ngoal (1 subgoal):\n 1. (idx_iteratei get sz s, foldli s') \\<in> Id", "note aux=this"], ["proof (state)\nthis:\n  \\<lbrakk>(?sa2, ?s'a2) \\<in> arel; ?i2 \\<le> sz ?sa2\\<rbrakk>\n  \\<Longrightarrow> idx_iteratei_aux get (sz ?sa2) ?i2 ?sa2 ?c2 ?f2\n                     ?\\<sigma>2 =\n                    foldli (drop (sz ?sa2 - ?i2) ?s'a2) ?c2 ?f2 ?\\<sigma>2\n\ngoal (1 subgoal):\n 1. (idx_iteratei get sz s, foldli s') \\<in> Id", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. (idx_iteratei get sz s, foldli s') \\<in> Id", "unfolding idx_iteratei_def[abs_def]"], ["proof (prove)\ngoal (1 subgoal):\n 1. (idx_iteratei_aux get (sz s) (sz s) s, foldli s') \\<in> Id", "by (simp, intro ext, simp add: aux[OF \\<open>(s,s') \\<in> arel\\<close>])"], ["proof (state)\nthis:\n  (idx_iteratei get sz s, foldli s') \\<in> Id\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>Misc.\\<close>"], ["", "lemma idx_iteratei_aux_nth_conv_foldli_drop:\n  fixes xs :: \"'b list\"\n  assumes \"i \\<le> length xs\"\n  shows \"idx_iteratei_aux (!) (length xs) i xs c f \\<sigma> = foldli (drop (length xs - i) xs) c f \\<sigma>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. idx_iteratei_aux (!) (length xs) i xs c f \\<sigma> =\n    foldli (drop (length xs - i) xs) c f \\<sigma>", "using assms"], ["proof (prove)\nusing this:\n  i \\<le> length xs\n\ngoal (1 subgoal):\n 1. idx_iteratei_aux (!) (length xs) i xs c f \\<sigma> =\n    foldli (drop (length xs - i) xs) c f \\<sigma>", "proof(induct get\\<equiv>\"(!) :: 'b list \\<Rightarrow> nat \\<Rightarrow> 'b\" sz\\<equiv>\"length xs\" i xs c f \\<sigma> rule: idx_iteratei_aux.induct)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i l c f \\<sigma>.\n       \\<lbrakk>\\<lbrakk>\\<not> (i = 0 \\<or> \\<not> c \\<sigma>);\n                 i - 1 \\<le> length l\\<rbrakk>\n                \\<Longrightarrow> idx_iteratei_aux (!) (length l) (i - 1) l\n                                   c f (f (l ! (length l - i)) \\<sigma>) =\n                                  foldli (drop (length l - (i - 1)) l) c f\n                                   (f (l ! (length l - i)) \\<sigma>);\n        i \\<le> length l\\<rbrakk>\n       \\<Longrightarrow> idx_iteratei_aux (!) (length l) i l c f \\<sigma> =\n                         foldli (drop (length l - i) l) c f \\<sigma>", "case (1 i l c f \\<sigma>)"], ["proof (state)\nthis:\n  \\<lbrakk>\\<not> (i = 0 \\<or> \\<not> c \\<sigma>);\n   i - 1 \\<le> length l\\<rbrakk>\n  \\<Longrightarrow> idx_iteratei_aux (!) (length l) (i - 1) l c f\n                     (f (l ! (length l - i)) \\<sigma>) =\n                    foldli (drop (length l - (i - 1)) l) c f\n                     (f (l ! (length l - i)) \\<sigma>)\n  i \\<le> length l\n\ngoal (1 subgoal):\n 1. \\<And>i l c f \\<sigma>.\n       \\<lbrakk>\\<lbrakk>\\<not> (i = 0 \\<or> \\<not> c \\<sigma>);\n                 i - 1 \\<le> length l\\<rbrakk>\n                \\<Longrightarrow> idx_iteratei_aux (!) (length l) (i - 1) l\n                                   c f (f (l ! (length l - i)) \\<sigma>) =\n                                  foldli (drop (length l - (i - 1)) l) c f\n                                   (f (l ! (length l - i)) \\<sigma>);\n        i \\<le> length l\\<rbrakk>\n       \\<Longrightarrow> idx_iteratei_aux (!) (length l) i l c f \\<sigma> =\n                         foldli (drop (length l - i) l) c f \\<sigma>", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. idx_iteratei_aux (!) (length l) i l c f \\<sigma> =\n    foldli (drop (length l - i) l) c f \\<sigma>", "proof(cases \"i = 0 \\<or> \\<not> c \\<sigma>\")"], ["proof (state)\ngoal (2 subgoals):\n 1. i = 0 \\<or> \\<not> c \\<sigma> \\<Longrightarrow>\n    idx_iteratei_aux (!) (length l) i l c f \\<sigma> =\n    foldli (drop (length l - i) l) c f \\<sigma>\n 2. \\<not> (i = 0 \\<or> \\<not> c \\<sigma>) \\<Longrightarrow>\n    idx_iteratei_aux (!) (length l) i l c f \\<sigma> =\n    foldli (drop (length l - i) l) c f \\<sigma>", "case True"], ["proof (state)\nthis:\n  i = 0 \\<or> \\<not> c \\<sigma>\n\ngoal (2 subgoals):\n 1. i = 0 \\<or> \\<not> c \\<sigma> \\<Longrightarrow>\n    idx_iteratei_aux (!) (length l) i l c f \\<sigma> =\n    foldli (drop (length l - i) l) c f \\<sigma>\n 2. \\<not> (i = 0 \\<or> \\<not> c \\<sigma>) \\<Longrightarrow>\n    idx_iteratei_aux (!) (length l) i l c f \\<sigma> =\n    foldli (drop (length l - i) l) c f \\<sigma>", "thus ?thesis"], ["proof (prove)\nusing this:\n  i = 0 \\<or> \\<not> c \\<sigma>\n\ngoal (1 subgoal):\n 1. idx_iteratei_aux (!) (length l) i l c f \\<sigma> =\n    foldli (drop (length l - i) l) c f \\<sigma>", "by(subst idx_iteratei_aux.simps)(auto)"], ["proof (state)\nthis:\n  idx_iteratei_aux (!) (length l) i l c f \\<sigma> =\n  foldli (drop (length l - i) l) c f \\<sigma>\n\ngoal (1 subgoal):\n 1. \\<not> (i = 0 \\<or> \\<not> c \\<sigma>) \\<Longrightarrow>\n    idx_iteratei_aux (!) (length l) i l c f \\<sigma> =\n    foldli (drop (length l - i) l) c f \\<sigma>", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> (i = 0 \\<or> \\<not> c \\<sigma>) \\<Longrightarrow>\n    idx_iteratei_aux (!) (length l) i l c f \\<sigma> =\n    foldli (drop (length l - i) l) c f \\<sigma>", "case False"], ["proof (state)\nthis:\n  \\<not> (i = 0 \\<or> \\<not> c \\<sigma>)\n\ngoal (1 subgoal):\n 1. \\<not> (i = 0 \\<or> \\<not> c \\<sigma>) \\<Longrightarrow>\n    idx_iteratei_aux (!) (length l) i l c f \\<sigma> =\n    foldli (drop (length l - i) l) c f \\<sigma>", "hence i: \"i > 0\" and c: \"c \\<sigma>\""], ["proof (prove)\nusing this:\n  \\<not> (i = 0 \\<or> \\<not> c \\<sigma>)\n\ngoal (1 subgoal):\n 1. 0 < i &&& c \\<sigma>", "by auto"], ["proof (state)\nthis:\n  0 < i\n  c \\<sigma>\n\ngoal (1 subgoal):\n 1. \\<not> (i = 0 \\<or> \\<not> c \\<sigma>) \\<Longrightarrow>\n    idx_iteratei_aux (!) (length l) i l c f \\<sigma> =\n    foldli (drop (length l - i) l) c f \\<sigma>", "hence \"idx_iteratei_aux (!) (length l) i l c f \\<sigma> = idx_iteratei_aux (!) (length l) (i - 1) l c f (f (l ! (length l - i)) \\<sigma>)\""], ["proof (prove)\nusing this:\n  0 < i\n  c \\<sigma>\n\ngoal (1 subgoal):\n 1. idx_iteratei_aux (!) (length l) i l c f \\<sigma> =\n    idx_iteratei_aux (!) (length l) (i - 1) l c f\n     (f (l ! (length l - i)) \\<sigma>)", "by(subst idx_iteratei_aux.simps) simp"], ["proof (state)\nthis:\n  idx_iteratei_aux (!) (length l) i l c f \\<sigma> =\n  idx_iteratei_aux (!) (length l) (i - 1) l c f\n   (f (l ! (length l - i)) \\<sigma>)\n\ngoal (1 subgoal):\n 1. \\<not> (i = 0 \\<or> \\<not> c \\<sigma>) \\<Longrightarrow>\n    idx_iteratei_aux (!) (length l) i l c f \\<sigma> =\n    foldli (drop (length l - i) l) c f \\<sigma>", "also"], ["proof (state)\nthis:\n  idx_iteratei_aux (!) (length l) i l c f \\<sigma> =\n  idx_iteratei_aux (!) (length l) (i - 1) l c f\n   (f (l ! (length l - i)) \\<sigma>)\n\ngoal (1 subgoal):\n 1. \\<not> (i = 0 \\<or> \\<not> c \\<sigma>) \\<Longrightarrow>\n    idx_iteratei_aux (!) (length l) i l c f \\<sigma> =\n    foldli (drop (length l - i) l) c f \\<sigma>", "have \"\\<dots> = foldli (drop (length l - (i - 1)) l) c f (f (l ! (length l - i)) \\<sigma>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. idx_iteratei_aux (!) (length l) (i - 1) l c f\n     (f (l ! (length l - i)) \\<sigma>) =\n    foldli (drop (length l - (i - 1)) l) c f\n     (f (l ! (length l - i)) \\<sigma>)", "using \\<open>i \\<le> length l\\<close> i c"], ["proof (prove)\nusing this:\n  i \\<le> length l\n  0 < i\n  c \\<sigma>\n\ngoal (1 subgoal):\n 1. idx_iteratei_aux (!) (length l) (i - 1) l c f\n     (f (l ! (length l - i)) \\<sigma>) =\n    foldli (drop (length l - (i - 1)) l) c f\n     (f (l ! (length l - i)) \\<sigma>)", "by -(rule 1, auto)"], ["proof (state)\nthis:\n  idx_iteratei_aux (!) (length l) (i - 1) l c f\n   (f (l ! (length l - i)) \\<sigma>) =\n  foldli (drop (length l - (i - 1)) l) c f (f (l ! (length l - i)) \\<sigma>)\n\ngoal (1 subgoal):\n 1. \\<not> (i = 0 \\<or> \\<not> c \\<sigma>) \\<Longrightarrow>\n    idx_iteratei_aux (!) (length l) i l c f \\<sigma> =\n    foldli (drop (length l - i) l) c f \\<sigma>", "also"], ["proof (state)\nthis:\n  idx_iteratei_aux (!) (length l) (i - 1) l c f\n   (f (l ! (length l - i)) \\<sigma>) =\n  foldli (drop (length l - (i - 1)) l) c f (f (l ! (length l - i)) \\<sigma>)\n\ngoal (1 subgoal):\n 1. \\<not> (i = 0 \\<or> \\<not> c \\<sigma>) \\<Longrightarrow>\n    idx_iteratei_aux (!) (length l) i l c f \\<sigma> =\n    foldli (drop (length l - i) l) c f \\<sigma>", "from \\<open>i \\<le> length l\\<close> i"], ["proof (chain)\npicking this:\n  i \\<le> length l\n  0 < i", "have \"drop (length l - i) l = (l ! (length l - i)) # drop (length l - (i - 1)) l\""], ["proof (prove)\nusing this:\n  i \\<le> length l\n  0 < i\n\ngoal (1 subgoal):\n 1. drop (length l - i) l = l ! (length l - i) # drop (length l - (i - 1)) l", "apply (subst Cons_nth_drop_Suc[symmetric])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>i \\<le> length l; 0 < i\\<rbrakk>\n    \\<Longrightarrow> length l - i < length l\n 2. \\<lbrakk>i \\<le> length l; 0 < i\\<rbrakk>\n    \\<Longrightarrow> l ! (length l - i) # drop (Suc (length l - i)) l =\n                      l ! (length l - i) # drop (length l - (i - 1)) l", "apply simp_all"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  drop (length l - i) l = l ! (length l - i) # drop (length l - (i - 1)) l\n\ngoal (1 subgoal):\n 1. \\<not> (i = 0 \\<or> \\<not> c \\<sigma>) \\<Longrightarrow>\n    idx_iteratei_aux (!) (length l) i l c f \\<sigma> =\n    foldli (drop (length l - i) l) c f \\<sigma>", "hence \"foldli (drop (length l - (i - 1)) l) c f (f (l ! (length l - i)) \\<sigma>) = foldli (drop (length l - i) l) c f \\<sigma>\""], ["proof (prove)\nusing this:\n  drop (length l - i) l = l ! (length l - i) # drop (length l - (i - 1)) l\n\ngoal (1 subgoal):\n 1. foldli (drop (length l - (i - 1)) l) c f\n     (f (l ! (length l - i)) \\<sigma>) =\n    foldli (drop (length l - i) l) c f \\<sigma>", "using c"], ["proof (prove)\nusing this:\n  drop (length l - i) l = l ! (length l - i) # drop (length l - (i - 1)) l\n  c \\<sigma>\n\ngoal (1 subgoal):\n 1. foldli (drop (length l - (i - 1)) l) c f\n     (f (l ! (length l - i)) \\<sigma>) =\n    foldli (drop (length l - i) l) c f \\<sigma>", "by simp"], ["proof (state)\nthis:\n  foldli (drop (length l - (i - 1)) l) c f\n   (f (l ! (length l - i)) \\<sigma>) =\n  foldli (drop (length l - i) l) c f \\<sigma>\n\ngoal (1 subgoal):\n 1. \\<not> (i = 0 \\<or> \\<not> c \\<sigma>) \\<Longrightarrow>\n    idx_iteratei_aux (!) (length l) i l c f \\<sigma> =\n    foldli (drop (length l - i) l) c f \\<sigma>", "finally"], ["proof (chain)\npicking this:\n  idx_iteratei_aux (!) (length l) i l c f \\<sigma> =\n  foldli (drop (length l - i) l) c f \\<sigma>", "show ?thesis"], ["proof (prove)\nusing this:\n  idx_iteratei_aux (!) (length l) i l c f \\<sigma> =\n  foldli (drop (length l - i) l) c f \\<sigma>\n\ngoal (1 subgoal):\n 1. idx_iteratei_aux (!) (length l) i l c f \\<sigma> =\n    foldli (drop (length l - i) l) c f \\<sigma>", "."], ["proof (state)\nthis:\n  idx_iteratei_aux (!) (length l) i l c f \\<sigma> =\n  foldli (drop (length l - i) l) c f \\<sigma>\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  idx_iteratei_aux (!) (length l) i l c f \\<sigma> =\n  foldli (drop (length l - i) l) c f \\<sigma>\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma idx_iteratei_nth_length_conv_foldli: \"idx_iteratei nth length = foldli\""], ["proof (prove)\ngoal (1 subgoal):\n 1. idx_iteratei (!) length = foldli", "by(rule ext)+(simp add: idx_iteratei_def idx_iteratei_aux_nth_conv_foldli_drop)"], ["", "end"]]}