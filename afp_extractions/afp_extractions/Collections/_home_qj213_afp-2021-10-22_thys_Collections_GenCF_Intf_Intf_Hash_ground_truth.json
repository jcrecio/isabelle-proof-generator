{"file_name": "/home/qj213/afp-2021-10-22/thys/Collections/GenCF/Intf/Intf_Hash.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Collections", "problem_names": ["lemma is_bounded_hashcodeI[intro]:\n  \"((eq,(=)) \\<in> R \\<rightarrow> R \\<rightarrow> bool_rel) \\<Longrightarrow>\n   (\\<And>x y n. x \\<in> Domain R \\<Longrightarrow> y \\<in> Domain R \\<Longrightarrow> eq x y \\<Longrightarrow> bhc n x = bhc n y) \\<Longrightarrow>\n   (\\<And>x n. 1 < n \\<Longrightarrow> bhc n x < n) \\<Longrightarrow> is_bounded_hashcode R eq bhc\"", "lemma is_bounded_hashcodeD[dest]:\n  assumes \"is_bounded_hashcode R eq bhc\"\n  shows \"(eq,(=)) \\<in> R \\<rightarrow> R \\<rightarrow> bool_rel\" and\n        \"\\<And>n x y. x \\<in> Domain R \\<Longrightarrow> y \\<in> Domain R \\<Longrightarrow> eq x y \\<Longrightarrow> bhc n x = bhc n y\" and\n        \"\\<And>n x. 1 < n \\<Longrightarrow> bhc n x < n\"", "lemma bounded_hashcode_welldefined:\n  assumes BHC: \"is_bounded_hashcode Rk eq bhc\" and\n          R1: \"(x1,x') \\<in> Rk\" and R2: \"(x2,x') \\<in> Rk\"\n  shows \"bhc n x1 = bhc n x2\"", "lemma abstract_bhc_correct[intro]:\n  assumes \"is_bounded_hashcode Rk eq bhc\"\n  shows \"(bhc, abstract_bounded_hashcode Rk bhc) \\<in> \n      nat_rel \\<rightarrow> Rk \\<rightarrow> nat_rel\" (is \"(bhc, ?bhc') \\<in> _\")", "lemma abstract_bhc_is_bhc[intro]:\n  fixes Rk :: \"('c\\<times>'a) set\"\n  assumes bhc: \"is_bounded_hashcode Rk eq bhc\"\n  shows \"is_bounded_hashcode Id (=) (abstract_bounded_hashcode Rk bhc)\"\n      (is \"is_bounded_hashcode _ (=) ?bhc'\")", "lemma hashable_bhc_is_bhc[autoref_ga_rules]:\n  \"\\<lbrakk>STRUCT_EQ_tag eq (=); REL_FORCE_ID R\\<rbrakk> \\<Longrightarrow> is_bounded_hashcode R eq bounded_hashcode_nat\"", "lemma hashable_def_size_is_def_size[autoref_ga_rules]:\n  shows \"is_valid_def_hm_size TYPE('k::hashable) (def_hashmap_size TYPE('k))\""], "translations": [["", "lemma is_bounded_hashcodeI[intro]:\n  \"((eq,(=)) \\<in> R \\<rightarrow> R \\<rightarrow> bool_rel) \\<Longrightarrow>\n   (\\<And>x y n. x \\<in> Domain R \\<Longrightarrow> y \\<in> Domain R \\<Longrightarrow> eq x y \\<Longrightarrow> bhc n x = bhc n y) \\<Longrightarrow>\n   (\\<And>x n. 1 < n \\<Longrightarrow> bhc n x < n) \\<Longrightarrow> is_bounded_hashcode R eq bhc\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>(eq, (=)) \\<in> R \\<rightarrow> R \\<rightarrow> bool_rel;\n     \\<And>x y n.\n        \\<lbrakk>x \\<in> Domain R; y \\<in> Domain R; eq x y\\<rbrakk>\n        \\<Longrightarrow> bhc n x = bhc n y;\n     \\<And>x n. 1 < n \\<Longrightarrow> bhc n x < n\\<rbrakk>\n    \\<Longrightarrow> is_bounded_hashcode R eq bhc", "unfolding is_bounded_hashcode_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>(eq, (=)) \\<in> R \\<rightarrow> R \\<rightarrow> bool_rel;\n     \\<And>x y n.\n        \\<lbrakk>x \\<in> Domain R; y \\<in> Domain R; eq x y\\<rbrakk>\n        \\<Longrightarrow> bhc n x = bhc n y;\n     \\<And>x n. 1 < n \\<Longrightarrow> bhc n x < n\\<rbrakk>\n    \\<Longrightarrow> (eq, (=))\n                      \\<in> R \\<rightarrow> R \\<rightarrow> bool_rel \\<and>\n                      (\\<forall>n.\n                          \\<forall>x\\<in>Domain R.\n                             \\<forall>y\\<in>Domain R.\n                                eq x y \\<longrightarrow>\n                                bhc n x = bhc n y) \\<and>\n                      (\\<forall>n x. 1 < n \\<longrightarrow> bhc n x < n)", "by force"], ["", "lemma is_bounded_hashcodeD[dest]:\n  assumes \"is_bounded_hashcode R eq bhc\"\n  shows \"(eq,(=)) \\<in> R \\<rightarrow> R \\<rightarrow> bool_rel\" and\n        \"\\<And>n x y. x \\<in> Domain R \\<Longrightarrow> y \\<in> Domain R \\<Longrightarrow> eq x y \\<Longrightarrow> bhc n x = bhc n y\" and\n        \"\\<And>n x. 1 < n \\<Longrightarrow> bhc n x < n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (eq, (=)) \\<in> R \\<rightarrow> R \\<rightarrow> bool_rel &&&\n    (\\<And>n x y.\n        \\<lbrakk>x \\<in> Domain R; y \\<in> Domain R; eq x y\\<rbrakk>\n        \\<Longrightarrow> bhc n x = bhc n y) &&&\n    (\\<And>n x. 1 < n \\<Longrightarrow> bhc n x < n)", "using assms"], ["proof (prove)\nusing this:\n  is_bounded_hashcode R eq bhc\n\ngoal (1 subgoal):\n 1. (eq, (=)) \\<in> R \\<rightarrow> R \\<rightarrow> bool_rel &&&\n    (\\<And>n x y.\n        \\<lbrakk>x \\<in> Domain R; y \\<in> Domain R; eq x y\\<rbrakk>\n        \\<Longrightarrow> bhc n x = bhc n y) &&&\n    (\\<And>n x. 1 < n \\<Longrightarrow> bhc n x < n)", "unfolding is_bounded_hashcode_def"], ["proof (prove)\nusing this:\n  (eq, (=)) \\<in> R \\<rightarrow> R \\<rightarrow> bool_rel \\<and>\n  (\\<forall>n.\n      \\<forall>x\\<in>Domain R.\n         \\<forall>y\\<in>Domain R.\n            eq x y \\<longrightarrow> bhc n x = bhc n y) \\<and>\n  (\\<forall>n x. 1 < n \\<longrightarrow> bhc n x < n)\n\ngoal (1 subgoal):\n 1. (eq, (=)) \\<in> R \\<rightarrow> R \\<rightarrow> bool_rel &&&\n    (\\<And>n x y.\n        \\<lbrakk>x \\<in> Domain R; y \\<in> Domain R; eq x y\\<rbrakk>\n        \\<Longrightarrow> bhc n x = bhc n y) &&&\n    (\\<And>n x. 1 < n \\<Longrightarrow> bhc n x < n)", "by simp_all"], ["", "lemma bounded_hashcode_welldefined:\n  assumes BHC: \"is_bounded_hashcode Rk eq bhc\" and\n          R1: \"(x1,x') \\<in> Rk\" and R2: \"(x2,x') \\<in> Rk\"\n  shows \"bhc n x1 = bhc n x2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. bhc n x1 = bhc n x2", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. bhc n x1 = bhc n x2", "from is_bounded_hashcodeD[OF BHC]"], ["proof (chain)\npicking this:\n  (eq, (=)) \\<in> Rk \\<rightarrow> Rk \\<rightarrow> bool_rel\n  \\<lbrakk>?x \\<in> Domain Rk; ?y \\<in> Domain Rk; eq ?x ?y\\<rbrakk>\n  \\<Longrightarrow> bhc ?n ?x = bhc ?n ?y\n  1 < ?n \\<Longrightarrow> bhc ?n ?x < ?n", "have \"(eq,(=)) \\<in> Rk \\<rightarrow> Rk \\<rightarrow> bool_rel\""], ["proof (prove)\nusing this:\n  (eq, (=)) \\<in> Rk \\<rightarrow> Rk \\<rightarrow> bool_rel\n  \\<lbrakk>?x \\<in> Domain Rk; ?y \\<in> Domain Rk; eq ?x ?y\\<rbrakk>\n  \\<Longrightarrow> bhc ?n ?x = bhc ?n ?y\n  1 < ?n \\<Longrightarrow> bhc ?n ?x < ?n\n\ngoal (1 subgoal):\n 1. (eq, (=)) \\<in> Rk \\<rightarrow> Rk \\<rightarrow> bool_rel", "by simp"], ["proof (state)\nthis:\n  (eq, (=)) \\<in> Rk \\<rightarrow> Rk \\<rightarrow> bool_rel\n\ngoal (1 subgoal):\n 1. bhc n x1 = bhc n x2", "with R1 R2"], ["proof (chain)\npicking this:\n  (x1, x') \\<in> Rk\n  (x2, x') \\<in> Rk\n  (eq, (=)) \\<in> Rk \\<rightarrow> Rk \\<rightarrow> bool_rel", "have \"eq x1 x2\""], ["proof (prove)\nusing this:\n  (x1, x') \\<in> Rk\n  (x2, x') \\<in> Rk\n  (eq, (=)) \\<in> Rk \\<rightarrow> Rk \\<rightarrow> bool_rel\n\ngoal (1 subgoal):\n 1. eq x1 x2", "by (force dest: fun_relD)"], ["proof (state)\nthis:\n  eq x1 x2\n\ngoal (1 subgoal):\n 1. bhc n x1 = bhc n x2", "thus ?thesis"], ["proof (prove)\nusing this:\n  eq x1 x2\n\ngoal (1 subgoal):\n 1. bhc n x1 = bhc n x2", "using R1 R2 BHC"], ["proof (prove)\nusing this:\n  eq x1 x2\n  (x1, x') \\<in> Rk\n  (x2, x') \\<in> Rk\n  is_bounded_hashcode Rk eq bhc\n\ngoal (1 subgoal):\n 1. bhc n x1 = bhc n x2", "by blast"], ["proof (state)\nthis:\n  bhc n x1 = bhc n x2\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma abstract_bhc_correct[intro]:\n  assumes \"is_bounded_hashcode Rk eq bhc\"\n  shows \"(bhc, abstract_bounded_hashcode Rk bhc) \\<in> \n      nat_rel \\<rightarrow> Rk \\<rightarrow> nat_rel\" (is \"(bhc, ?bhc') \\<in> _\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. (bhc, abstract_bounded_hashcode Rk bhc)\n    \\<in> nat_rel \\<rightarrow> Rk \\<rightarrow> nat_rel", "proof (intro fun_relI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a a' aa a'a.\n       \\<lbrakk>(a, a') \\<in> nat_rel; (aa, a'a) \\<in> Rk\\<rbrakk>\n       \\<Longrightarrow> (bhc a aa, abstract_bounded_hashcode Rk bhc a' a'a)\n                         \\<in> nat_rel", "fix n n' x x'"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a a' aa a'a.\n       \\<lbrakk>(a, a') \\<in> nat_rel; (aa, a'a) \\<in> Rk\\<rbrakk>\n       \\<Longrightarrow> (bhc a aa, abstract_bounded_hashcode Rk bhc a' a'a)\n                         \\<in> nat_rel", "assume A: \"(n,n') \\<in> nat_rel\" and B: \"(x,x') \\<in> Rk\""], ["proof (state)\nthis:\n  (n, n') \\<in> nat_rel\n  (x, x') \\<in> Rk\n\ngoal (1 subgoal):\n 1. \\<And>a a' aa a'a.\n       \\<lbrakk>(a, a') \\<in> nat_rel; (aa, a'a) \\<in> Rk\\<rbrakk>\n       \\<Longrightarrow> (bhc a aa, abstract_bounded_hashcode Rk bhc a' a'a)\n                         \\<in> nat_rel", "hence C: \"n = n'\" and D: \"x' \\<in> Range Rk\""], ["proof (prove)\nusing this:\n  (n, n') \\<in> nat_rel\n  (x, x') \\<in> Rk\n\ngoal (1 subgoal):\n 1. n = n' &&& x' \\<in> Range Rk", "by auto"], ["proof (state)\nthis:\n  n = n'\n  x' \\<in> Range Rk\n\ngoal (1 subgoal):\n 1. \\<And>a a' aa a'a.\n       \\<lbrakk>(a, a') \\<in> nat_rel; (aa, a'a) \\<in> Rk\\<rbrakk>\n       \\<Longrightarrow> (bhc a aa, abstract_bounded_hashcode Rk bhc a' a'a)\n                         \\<in> nat_rel", "have \"?bhc' n' x' = bhc n x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. abstract_bounded_hashcode Rk bhc n' x' = bhc n x", "unfolding abstract_bounded_hashcode_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (if x' \\<in> Range Rk\n     then THE c. \\<exists>x. (x, x') \\<in> Rk \\<and> bhc n' x = c else 0) =\n    bhc n x", "apply (simp add: C D, rule)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<exists>xa. (xa, x') \\<in> Rk \\<and> bhc n' xa = bhc n' x\n 2. \\<And>c.\n       \\<exists>x. (x, x') \\<in> Rk \\<and> bhc n' x = c \\<Longrightarrow>\n       c = bhc n' x", "apply (intro exI conjI, fact B, rule refl)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>c.\n       \\<exists>x. (x, x') \\<in> Rk \\<and> bhc n' x = c \\<Longrightarrow>\n       c = bhc n' x", "apply (elim exE conjE, hypsubst,\n          erule bounded_hashcode_welldefined[OF assms _ B])"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  abstract_bounded_hashcode Rk bhc n' x' = bhc n x\n\ngoal (1 subgoal):\n 1. \\<And>a a' aa a'a.\n       \\<lbrakk>(a, a') \\<in> nat_rel; (aa, a'a) \\<in> Rk\\<rbrakk>\n       \\<Longrightarrow> (bhc a aa, abstract_bounded_hashcode Rk bhc a' a'a)\n                         \\<in> nat_rel", "thus \"(bhc n x, ?bhc' n' x') \\<in> nat_rel\""], ["proof (prove)\nusing this:\n  abstract_bounded_hashcode Rk bhc n' x' = bhc n x\n\ngoal (1 subgoal):\n 1. (bhc n x, abstract_bounded_hashcode Rk bhc n' x') \\<in> nat_rel", "by simp"], ["proof (state)\nthis:\n  (bhc n x, abstract_bounded_hashcode Rk bhc n' x') \\<in> nat_rel\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma abstract_bhc_is_bhc[intro]:\n  fixes Rk :: \"('c\\<times>'a) set\"\n  assumes bhc: \"is_bounded_hashcode Rk eq bhc\"\n  shows \"is_bounded_hashcode Id (=) (abstract_bounded_hashcode Rk bhc)\"\n      (is \"is_bounded_hashcode _ (=) ?bhc'\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. is_bounded_hashcode Id (=) (abstract_bounded_hashcode Rk bhc)", "proof"], ["proof (state)\ngoal (3 subgoals):\n 1. ((=), (=)) \\<in> Id \\<rightarrow> Id \\<rightarrow> bool_rel\n 2. \\<And>x y n.\n       \\<lbrakk>x \\<in> Domain Id; y \\<in> Domain Id; x = y\\<rbrakk>\n       \\<Longrightarrow> abstract_bounded_hashcode Rk bhc n x =\n                         abstract_bounded_hashcode Rk bhc n y\n 3. \\<And>x n.\n       1 < n \\<Longrightarrow> abstract_bounded_hashcode Rk bhc n x < n", "fix x'::'a and y'::'a and n'::nat"], ["proof (state)\ngoal (3 subgoals):\n 1. ((=), (=)) \\<in> Id \\<rightarrow> Id \\<rightarrow> bool_rel\n 2. \\<And>x y n.\n       \\<lbrakk>x \\<in> Domain Id; y \\<in> Domain Id; x = y\\<rbrakk>\n       \\<Longrightarrow> abstract_bounded_hashcode Rk bhc n x =\n                         abstract_bounded_hashcode Rk bhc n y\n 3. \\<And>x n.\n       1 < n \\<Longrightarrow> abstract_bounded_hashcode Rk bhc n x < n", "assume \"x' = y'\""], ["proof (state)\nthis:\n  x' = y'\n\ngoal (3 subgoals):\n 1. ((=), (=)) \\<in> Id \\<rightarrow> Id \\<rightarrow> bool_rel\n 2. \\<And>x y n.\n       \\<lbrakk>x \\<in> Domain Id; y \\<in> Domain Id; x = y\\<rbrakk>\n       \\<Longrightarrow> abstract_bounded_hashcode Rk bhc n x =\n                         abstract_bounded_hashcode Rk bhc n y\n 3. \\<And>x n.\n       1 < n \\<Longrightarrow> abstract_bounded_hashcode Rk bhc n x < n", "thus \"?bhc' n' x' = ?bhc' n' y'\""], ["proof (prove)\nusing this:\n  x' = y'\n\ngoal (1 subgoal):\n 1. abstract_bounded_hashcode Rk bhc n' x' =\n    abstract_bounded_hashcode Rk bhc n' y'", "by simp"], ["proof (state)\nthis:\n  abstract_bounded_hashcode Rk bhc n' x' =\n  abstract_bounded_hashcode Rk bhc n' y'\n\ngoal (2 subgoals):\n 1. ((=), (=)) \\<in> Id \\<rightarrow> Id \\<rightarrow> bool_rel\n 2. \\<And>x n.\n       1 < n \\<Longrightarrow> abstract_bounded_hashcode Rk bhc n x < n", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. ((=), (=)) \\<in> Id \\<rightarrow> Id \\<rightarrow> bool_rel\n 2. \\<And>x n.\n       1 < n \\<Longrightarrow> abstract_bounded_hashcode Rk bhc n x < n", "fix x'::'a and n'::nat"], ["proof (state)\ngoal (2 subgoals):\n 1. ((=), (=)) \\<in> Id \\<rightarrow> Id \\<rightarrow> bool_rel\n 2. \\<And>x n.\n       1 < n \\<Longrightarrow> abstract_bounded_hashcode Rk bhc n x < n", "assume \"1 < n'\""], ["proof (state)\nthis:\n  1 < n'\n\ngoal (2 subgoals):\n 1. ((=), (=)) \\<in> Id \\<rightarrow> Id \\<rightarrow> bool_rel\n 2. \\<And>x n.\n       1 < n \\<Longrightarrow> abstract_bounded_hashcode Rk bhc n x < n", "from abstract_bhc_correct[OF bhc]"], ["proof (chain)\npicking this:\n  (bhc, abstract_bounded_hashcode Rk bhc)\n  \\<in> nat_rel \\<rightarrow> Rk \\<rightarrow> nat_rel", "show \"?bhc' n' x' < n'\""], ["proof (prove)\nusing this:\n  (bhc, abstract_bounded_hashcode Rk bhc)\n  \\<in> nat_rel \\<rightarrow> Rk \\<rightarrow> nat_rel\n\ngoal (1 subgoal):\n 1. abstract_bounded_hashcode Rk bhc n' x' < n'", "proof (cases \"x' \\<in> Range Rk\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>(bhc, abstract_bounded_hashcode Rk bhc)\n             \\<in> nat_rel \\<rightarrow> Rk \\<rightarrow> nat_rel;\n     x' \\<in> Range Rk\\<rbrakk>\n    \\<Longrightarrow> abstract_bounded_hashcode Rk bhc n' x' < n'\n 2. \\<lbrakk>(bhc, abstract_bounded_hashcode Rk bhc)\n             \\<in> nat_rel \\<rightarrow> Rk \\<rightarrow> nat_rel;\n     x' \\<notin> Range Rk\\<rbrakk>\n    \\<Longrightarrow> abstract_bounded_hashcode Rk bhc n' x' < n'", "case False"], ["proof (state)\nthis:\n  x' \\<notin> Range Rk\n\ngoal (2 subgoals):\n 1. \\<lbrakk>(bhc, abstract_bounded_hashcode Rk bhc)\n             \\<in> nat_rel \\<rightarrow> Rk \\<rightarrow> nat_rel;\n     x' \\<in> Range Rk\\<rbrakk>\n    \\<Longrightarrow> abstract_bounded_hashcode Rk bhc n' x' < n'\n 2. \\<lbrakk>(bhc, abstract_bounded_hashcode Rk bhc)\n             \\<in> nat_rel \\<rightarrow> Rk \\<rightarrow> nat_rel;\n     x' \\<notin> Range Rk\\<rbrakk>\n    \\<Longrightarrow> abstract_bounded_hashcode Rk bhc n' x' < n'", "with \\<open>1 < n'\\<close>"], ["proof (chain)\npicking this:\n  1 < n'\n  x' \\<notin> Range Rk", "show ?thesis"], ["proof (prove)\nusing this:\n  1 < n'\n  x' \\<notin> Range Rk\n\ngoal (1 subgoal):\n 1. abstract_bounded_hashcode Rk bhc n' x' < n'", "unfolding abstract_bounded_hashcode_def"], ["proof (prove)\nusing this:\n  1 < n'\n  x' \\<notin> Range Rk\n\ngoal (1 subgoal):\n 1. (if x' \\<in> Range Rk\n     then THE c. \\<exists>x. (x, x') \\<in> Rk \\<and> bhc n' x = c else 0)\n    < n'", "by simp"], ["proof (state)\nthis:\n  abstract_bounded_hashcode Rk bhc n' x' < n'\n\ngoal (1 subgoal):\n 1. \\<lbrakk>(bhc, abstract_bounded_hashcode Rk bhc)\n             \\<in> nat_rel \\<rightarrow> Rk \\<rightarrow> nat_rel;\n     x' \\<in> Range Rk\\<rbrakk>\n    \\<Longrightarrow> abstract_bounded_hashcode Rk bhc n' x' < n'", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>(bhc, abstract_bounded_hashcode Rk bhc)\n             \\<in> nat_rel \\<rightarrow> Rk \\<rightarrow> nat_rel;\n     x' \\<in> Range Rk\\<rbrakk>\n    \\<Longrightarrow> abstract_bounded_hashcode Rk bhc n' x' < n'", "case True"], ["proof (state)\nthis:\n  x' \\<in> Range Rk\n\ngoal (1 subgoal):\n 1. \\<lbrakk>(bhc, abstract_bounded_hashcode Rk bhc)\n             \\<in> nat_rel \\<rightarrow> Rk \\<rightarrow> nat_rel;\n     x' \\<in> Range Rk\\<rbrakk>\n    \\<Longrightarrow> abstract_bounded_hashcode Rk bhc n' x' < n'", "then"], ["proof (chain)\npicking this:\n  x' \\<in> Range Rk", "obtain x where \"(x,x') \\<in> Rk\""], ["proof (prove)\nusing this:\n  x' \\<in> Range Rk\n\ngoal (1 subgoal):\n 1. (\\<And>x. (x, x') \\<in> Rk \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", ".."], ["proof (state)\nthis:\n  (x, x') \\<in> Rk\n\ngoal (1 subgoal):\n 1. \\<lbrakk>(bhc, abstract_bounded_hashcode Rk bhc)\n             \\<in> nat_rel \\<rightarrow> Rk \\<rightarrow> nat_rel;\n     x' \\<in> Range Rk\\<rbrakk>\n    \\<Longrightarrow> abstract_bounded_hashcode Rk bhc n' x' < n'", "have \"(n',n') \\<in> nat_rel\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (n', n') \\<in> nat_rel", ".."], ["proof (state)\nthis:\n  (n', n') \\<in> nat_rel\n\ngoal (1 subgoal):\n 1. \\<lbrakk>(bhc, abstract_bounded_hashcode Rk bhc)\n             \\<in> nat_rel \\<rightarrow> Rk \\<rightarrow> nat_rel;\n     x' \\<in> Range Rk\\<rbrakk>\n    \\<Longrightarrow> abstract_bounded_hashcode Rk bhc n' x' < n'", "from abstract_bhc_correct[OF assms]"], ["proof (chain)\npicking this:\n  (bhc, abstract_bounded_hashcode Rk bhc)\n  \\<in> nat_rel \\<rightarrow> Rk \\<rightarrow> nat_rel", "have \"?bhc' n' x' = bhc n' x\""], ["proof (prove)\nusing this:\n  (bhc, abstract_bounded_hashcode Rk bhc)\n  \\<in> nat_rel \\<rightarrow> Rk \\<rightarrow> nat_rel\n\ngoal (1 subgoal):\n 1. abstract_bounded_hashcode Rk bhc n' x' = bhc n' x", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. (bhc, abstract_bounded_hashcode Rk bhc)\n    \\<in> nat_rel \\<rightarrow> Rk \\<rightarrow> nat_rel \\<Longrightarrow>\n    abstract_bounded_hashcode Rk bhc n' x' = bhc n' x", "apply (drule fun_relD[OF _ \\<open>(n',n') \\<in> nat_rel\\<close>],\n               drule fun_relD[OF _ \\<open>(x,x') \\<in> Rk\\<close>], simp)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  abstract_bounded_hashcode Rk bhc n' x' = bhc n' x\n\ngoal (1 subgoal):\n 1. \\<lbrakk>(bhc, abstract_bounded_hashcode Rk bhc)\n             \\<in> nat_rel \\<rightarrow> Rk \\<rightarrow> nat_rel;\n     x' \\<in> Range Rk\\<rbrakk>\n    \\<Longrightarrow> abstract_bounded_hashcode Rk bhc n' x' < n'", "also"], ["proof (state)\nthis:\n  abstract_bounded_hashcode Rk bhc n' x' = bhc n' x\n\ngoal (1 subgoal):\n 1. \\<lbrakk>(bhc, abstract_bounded_hashcode Rk bhc)\n             \\<in> nat_rel \\<rightarrow> Rk \\<rightarrow> nat_rel;\n     x' \\<in> Range Rk\\<rbrakk>\n    \\<Longrightarrow> abstract_bounded_hashcode Rk bhc n' x' < n'", "from \\<open>1 < n'\\<close> and bhc"], ["proof (chain)\npicking this:\n  1 < n'\n  is_bounded_hashcode Rk eq bhc", "have \"... < n'\""], ["proof (prove)\nusing this:\n  1 < n'\n  is_bounded_hashcode Rk eq bhc\n\ngoal (1 subgoal):\n 1. bhc n' x < n'", "by blast"], ["proof (state)\nthis:\n  bhc n' x < n'\n\ngoal (1 subgoal):\n 1. \\<lbrakk>(bhc, abstract_bounded_hashcode Rk bhc)\n             \\<in> nat_rel \\<rightarrow> Rk \\<rightarrow> nat_rel;\n     x' \\<in> Range Rk\\<rbrakk>\n    \\<Longrightarrow> abstract_bounded_hashcode Rk bhc n' x' < n'", "finally"], ["proof (chain)\npicking this:\n  abstract_bounded_hashcode Rk bhc n' x' < n'", "show \"?bhc' n' x' < n'\""], ["proof (prove)\nusing this:\n  abstract_bounded_hashcode Rk bhc n' x' < n'\n\ngoal (1 subgoal):\n 1. abstract_bounded_hashcode Rk bhc n' x' < n'", "."], ["proof (state)\nthis:\n  abstract_bounded_hashcode Rk bhc n' x' < n'\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  abstract_bounded_hashcode Rk bhc n' x' < n'\n\ngoal (1 subgoal):\n 1. ((=), (=)) \\<in> Id \\<rightarrow> Id \\<rightarrow> bool_rel", "qed simp"], ["", "(*lemma hashable_bhc_is_bhc[autoref_ga_rules]:\n  \"\\<lbrakk>STRUCT_EQ_tag eq (=;) REL_IS_ID R\\<rbrakk> \\<Longrightarrow> is_bounded_hashcode R eq bounded_hashcode\"\n  unfolding is_bounded_hashcode_def\n  by (simp add: bounded_hashcode_bounds)*)\n\n(* TODO: This is a hack that causes the relation to be instantiated to Id, if it is not\n    yet fixed! *)"], ["", "lemma hashable_bhc_is_bhc[autoref_ga_rules]:\n  \"\\<lbrakk>STRUCT_EQ_tag eq (=); REL_FORCE_ID R\\<rbrakk> \\<Longrightarrow> is_bounded_hashcode R eq bounded_hashcode_nat\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>STRUCT_EQ_tag eq (=); REL_FORCE_ID R\\<rbrakk>\n    \\<Longrightarrow> is_bounded_hashcode R eq bounded_hashcode_nat", "unfolding is_bounded_hashcode_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>STRUCT_EQ_tag eq (=); REL_FORCE_ID R\\<rbrakk>\n    \\<Longrightarrow> (eq, (=))\n                      \\<in> R \\<rightarrow> R \\<rightarrow> bool_rel \\<and>\n                      (\\<forall>n.\n                          \\<forall>x\\<in>Domain R.\n                             \\<forall>y\\<in>Domain R.\n                                eq x y \\<longrightarrow>\n                                bounded_hashcode_nat n x =\n                                bounded_hashcode_nat n y) \\<and>\n                      (\\<forall>n x.\n                          1 < n \\<longrightarrow>\n                          bounded_hashcode_nat n x < n)", "by (simp add: bounded_hashcode_nat_bounds)"], ["", "subsection \\<open>Default hash map size\\<close>"], ["", "definition is_valid_def_hm_size :: \"'k itself \\<Rightarrow> nat \\<Rightarrow> bool\"\n    where \"is_valid_def_hm_size type n \\<equiv> n > 1\""], ["", "lemma hashable_def_size_is_def_size[autoref_ga_rules]:\n  shows \"is_valid_def_hm_size TYPE('k::hashable) (def_hashmap_size TYPE('k))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_valid_def_hm_size TYPE('k) (def_hashmap_size TYPE('k))", "unfolding is_valid_def_hm_size_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. 1 < def_hashmap_size TYPE('k)", "by (fact def_hashmap_size)"], ["", "end"]]}