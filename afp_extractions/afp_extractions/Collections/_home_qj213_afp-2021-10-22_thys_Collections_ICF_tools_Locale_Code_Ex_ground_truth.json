{"file_name": "/home/qj213/afp-2021-10-22/thys/Collections/ICF/tools/Locale_Code_Ex.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Collections", "problem_names": ["lemmas \"defs\" = k_def j_def i_def h_def g.simps f.simps", "lemma j_alt: \"j x y \\<equiv> f x + y + x\"", "lemma g_alt:\n    \"g 0 = a\"\n    \"g (Suc n) = f n + n + a\"", "lemma i0_f_pat: \n    \"i0.f 0 = 0\"\n    \"i0.f (Suc n) = i0.f n + i0.g n\"", "lemma i0_h_pat: \"i0.h x y = x+i0.k y+i0.i x y+i0.j x y\"", "lemma \"foo 3 4 = 34578\"", "lemma \"bar 3 4 = 354189\""], "translations": [["", "lemmas \"defs\" = k_def j_def i_def h_def g.simps f.simps"], ["", "lemma j_alt: \"j x y \\<equiv> f x + y + x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. j x y \\<equiv> f x + y + x", "unfolding j_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. NOCODE x + y + f x \\<equiv> f x + y + x", "by (simp add: ac_simps)"], ["", "lemma g_alt:\n    \"g 0 = a\"\n    \"g (Suc n) = f n + n + a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. g 0 = a &&& g (Suc n) = f n + n + a", "by (auto simp: ac_simps)"], ["", "definition \"c \\<equiv> a + b\""], ["", "local_setup \\<open>Locale_Code.lc_decl_eq @{thms j_alt}\\<close>"], ["", "local_setup \\<open>Locale_Code.lc_decl_eq @{thms g_alt}\\<close>"], ["", "end"], ["", "text \\<open>Conflicting constant name\\<close>"], ["", "definition \"h_zero_zero \\<equiv> True\""], ["", "setup Locale_Code.open_block"], ["", "text \\<open>Various interpretations, with and without constructor patterns \n    and free variables\\<close>"], ["", "interpretation i0: test 0 0"], ["proof (prove)\ngoal (1 subgoal):\n 1. test 0 0", "apply unfold_locales"], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 = 0", "by auto"], ["", "interpretation i1: test \"Suc n\" \"Suc n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. test (Suc n) (Suc n)", "apply unfold_locales"], ["proof (prove)\ngoal (1 subgoal):\n 1. Suc n = Suc n", "by auto"], ["", "interpretation i2: test 1 1"], ["proof (prove)\ngoal (1 subgoal):\n 1. test 1 1", "apply unfold_locales"], ["proof (prove)\ngoal (1 subgoal):\n 1. 1 = 1", "by auto"], ["", "interpretation i3: test 5 5"], ["proof (prove)\ngoal (1 subgoal):\n 1. test 5 5", "apply unfold_locales"], ["proof (prove)\ngoal (1 subgoal):\n 1. 5 = 5", "by auto"], ["", "interpretation i4: test \"snd (x,3)\" \"1+2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. test (snd (x, 3)) (1 + 2)", "apply unfold_locales"], ["proof (prove)\ngoal (1 subgoal):\n 1. snd (x, 3) = 1 + 2", "by auto"], ["", "interpretation i5: test \"i3.c\" \"i3.c\""], ["proof (prove)\ngoal (1 subgoal):\n 1. test i3.c i3.c", "by unfold_locales simp"], ["", "text \\<open>Setup some alternative equations\\<close>"], ["", "lemma i0_f_pat: \n    \"i0.f 0 = 0\"\n    \"i0.f (Suc n) = i0.f n + i0.g n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. i0.f 0 = 0 &&& i0.f (Suc n) = i0.f n + i0.g n", "by simp_all"], ["", "lemma i0_h_pat: \"i0.h x y = x+i0.k y+i0.i x y+i0.j x y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. i0.h x y = x + i0.k y + i5.i x y + i0.j x y", "unfolding i0.h_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 + x + i0.k y + i5.i x y + i0.j x y = x + i0.k y + i5.i x y + i0.j x y", "by auto"], ["", "declare [[ lc_add \"i0.f\" i0_f_pat and \"i0.h\" i0_h_pat]]"], ["", "setup Locale_Code.close_block"], ["", "definition \"foo x y \\<equiv> i0.h x y + i1.h x x y + i2.h x y + i3.h x y \n  + i4.h TYPE(bool) h_zero_zero x y + i5.h x y\""], ["", "definition \"bar x y \\<equiv> i0.f x + i1.f x y + i2.f x + i3.f y \n  + i4.f TYPE(bool) False x + i5.f y\""], ["", "code_thms foo"], ["", "code_thms bar"], ["", "text \\<open>value\\<close>"], ["", "value \"foo 3 4\""], ["", "value \"bar 3 4\""], ["", "text \\<open>eval-tactic\\<close>"], ["", "lemma \"foo 3 4 = 34578\""], ["proof (prove)\ngoal (1 subgoal):\n 1. foo 3 4 = 34578", "by eval"], ["", "lemma \"bar 3 4 = 354189\""], ["proof (prove)\ngoal (1 subgoal):\n 1. bar 3 4 = 354189", "by eval"], ["", "text \\<open>Exported code\\<close>"], ["", "export_code foo bar checking SML"], ["", "export_code foo bar checking OCaml?"], ["", "export_code foo bar checking Haskell?"], ["", "export_code foo bar checking Scala"], ["", "text \\<open>Inlined code\\<close>"], ["", "ML_val \\<open>\n  @{code foo} (@{code nat_of_integer} 3) (@{code nat_of_integer} 4);\n  @{code bar} (@{code nat_of_integer} 3) (@{code nat_of_integer} 4);\n\\<close>"], ["", "end"]]}