{"file_name": "/home/qj213/afp-2021-10-22/thys/Collections/ICF/impl/SkewPrioImpl.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Collections", "problem_names": ["lemmas skew_defs =\n  skew_\\<alpha>_def\n  skew_insert_def\n  skew_find_def\n  skew_delete_def\n  skew_meld_def\n  skew_empty_def\n  skew_isEmpty_def", "theorem skew_empty_impl: \"prio_empty skew_\\<alpha> skew_invar skew_empty\"", "theorem skew_isEmpty_impl: \"prio_isEmpty skew_\\<alpha> skew_invar skew_isEmpty\"", "theorem skew_find_impl: \"prio_find skew_\\<alpha> skew_invar skew_find\"", "lemma skew_insert_impl: \"prio_insert skew_\\<alpha> skew_invar skew_insert\"", "lemma skew_meld_impl: \"prio_meld skew_\\<alpha> skew_invar skew_meld\"", "lemma skew_delete_impl: \n  \"prio_delete skew_\\<alpha> skew_invar skew_find skew_delete\""], "translations": [["", "lemmas skew_defs =\n  skew_\\<alpha>_def\n  skew_insert_def\n  skew_find_def\n  skew_delete_def\n  skew_meld_def\n  skew_empty_def\n  skew_isEmpty_def"], ["", "subsection \"Correctness\""], ["", "theorem skew_empty_impl: \"prio_empty skew_\\<alpha> skew_invar skew_empty\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prio_empty skew_\\<alpha> (\\<lambda>_. True) skew_empty", "by (unfold_locales, auto simp add: skew_defs)"], ["", "theorem skew_isEmpty_impl: \"prio_isEmpty skew_\\<alpha> skew_invar skew_isEmpty\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prio_isEmpty skew_\\<alpha> (\\<lambda>_. True) skew_isEmpty", "by unfold_locales \n     (simp add: skew_defs SkewBinomialHeap.isEmpty_correct SkewBinomialHeap.empty_correct)"], ["", "theorem skew_find_impl: \"prio_find skew_\\<alpha> skew_invar skew_find\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prio_find skew_\\<alpha> (\\<lambda>_. True) skew_find", "apply unfold_locales"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>p.\n       \\<lbrakk>True; skew_\\<alpha> p \\<noteq> {#}\\<rbrakk>\n       \\<Longrightarrow> skew_find p \\<in># skew_\\<alpha> p \\<and>\n                         (\\<forall>y\\<in>#skew_\\<alpha> p.\n                             snd (skew_find p) \\<le> snd y)", "apply (simp add: skew_defs SkewBinomialHeap.empty_correct SkewBinomialHeap.findMin_correct)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma skew_insert_impl: \"prio_insert skew_\\<alpha> skew_invar skew_insert\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prio_insert skew_\\<alpha> (\\<lambda>_. True) skew_insert", "apply(unfold_locales)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>p e a. True \\<Longrightarrow> True\n 2. \\<And>p e a.\n       True \\<Longrightarrow>\n       skew_\\<alpha> (skew_insert e a p) = skew_\\<alpha> p + {#(e, a)#}", "apply(unfold skew_defs)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>p e a. True \\<Longrightarrow> True\n 2. \\<And>p e a.\n       True \\<Longrightarrow>\n       SkewBinomialHeap.to_mset (SkewBinomialHeap.insert e a p) =\n       SkewBinomialHeap.to_mset p + {#(e, a)#}", "apply (simp_all add: SkewBinomialHeap.insert_correct)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma skew_meld_impl: \"prio_meld skew_\\<alpha> skew_invar skew_meld\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prio_meld skew_\\<alpha> (\\<lambda>_. True) skew_meld", "apply(unfold_locales)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>p p'. \\<lbrakk>True; True\\<rbrakk> \\<Longrightarrow> True\n 2. \\<And>p p'.\n       \\<lbrakk>True; True\\<rbrakk>\n       \\<Longrightarrow> skew_\\<alpha> (skew_meld p p') =\n                         skew_\\<alpha> p + skew_\\<alpha> p'", "apply(unfold skew_defs)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>p p'. \\<lbrakk>True; True\\<rbrakk> \\<Longrightarrow> True\n 2. \\<And>p p'.\n       \\<lbrakk>True; True\\<rbrakk>\n       \\<Longrightarrow> SkewBinomialHeap.to_mset\n                          (SkewBinomialHeap.meld p p') =\n                         SkewBinomialHeap.to_mset p +\n                         SkewBinomialHeap.to_mset p'", "apply(simp_all add: SkewBinomialHeap.meld_correct)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma skew_delete_impl: \n  \"prio_delete skew_\\<alpha> skew_invar skew_find skew_delete\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prio_delete skew_\\<alpha> (\\<lambda>_. True) skew_find skew_delete", "apply intro_locales"], ["proof (prove)\ngoal (2 subgoals):\n 1. prio_find skew_\\<alpha> (\\<lambda>_. True) skew_find\n 2. prio_delete_axioms skew_\\<alpha> (\\<lambda>_. True) skew_find\n     skew_delete", "apply (rule skew_find_impl)"], ["proof (prove)\ngoal (1 subgoal):\n 1. prio_delete_axioms skew_\\<alpha> (\\<lambda>_. True) skew_find\n     skew_delete", "apply(unfold_locales)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>p.\n       \\<lbrakk>True; skew_\\<alpha> p \\<noteq> {#}\\<rbrakk>\n       \\<Longrightarrow> True\n 2. \\<And>p.\n       \\<lbrakk>True; skew_\\<alpha> p \\<noteq> {#}\\<rbrakk>\n       \\<Longrightarrow> skew_\\<alpha> (skew_delete p) =\n                         skew_\\<alpha> p - {#skew_find p#}", "apply(simp_all add: skew_defs SkewBinomialHeap.empty_correct SkewBinomialHeap.deleteMin_correct)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "setup Locale_Code.open_block"], ["", "interpretation skew: StdPrio skew_ops"], ["proof (prove)\ngoal (1 subgoal):\n 1. StdPrio skew_ops", "apply (rule StdPrio.intro)"], ["proof (prove)\ngoal (6 subgoals):\n 1. prio_empty (prio_op_\\<alpha> skew_ops) (prio_op_invar skew_ops)\n     (prio_op_empty skew_ops)\n 2. prio_isEmpty (prio_op_\\<alpha> skew_ops) (prio_op_invar skew_ops)\n     (prio_op_isEmpty skew_ops)\n 3. prio_find (prio_op_\\<alpha> skew_ops) (prio_op_invar skew_ops)\n     (prio_op_find skew_ops)\n 4. prio_insert (prio_op_\\<alpha> skew_ops) (prio_op_invar skew_ops)\n     (prio_op_insert skew_ops)\n 5. prio_meld (prio_op_\\<alpha> skew_ops) (prio_op_invar skew_ops)\n     (prio_op_meld skew_ops)\n 6. prio_delete (prio_op_\\<alpha> skew_ops) (prio_op_invar skew_ops)\n     (prio_op_find skew_ops) (prio_op_delete skew_ops)", "apply (simp_all add: icf_rec_unf)"], ["proof (prove)\ngoal (6 subgoals):\n 1. prio_empty skew_\\<alpha> (\\<lambda>_. True) skew_empty\n 2. prio_isEmpty skew_\\<alpha> (\\<lambda>_. True) skew_isEmpty\n 3. prio_find skew_\\<alpha> (\\<lambda>_. True) skew_find\n 4. prio_insert skew_\\<alpha> (\\<lambda>_. True) skew_insert\n 5. prio_meld skew_\\<alpha> (\\<lambda>_. True) skew_meld\n 6. prio_delete skew_\\<alpha> (\\<lambda>_. True) skew_find skew_delete", "apply (rule \n    skew_empty_impl\n    skew_isEmpty_impl\n    skew_find_impl\n    skew_insert_impl\n    skew_meld_impl\n    skew_delete_impl\n  )+"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "interpretation skew: StdPrio_no_invar skew_ops"], ["proof (prove)\ngoal (1 subgoal):\n 1. StdPrio_no_invar skew_ops", "by unfold_locales (simp add: icf_rec_unf)"], ["", "setup Locale_Code.close_block"], ["", "definition test_codegen where \"test_codegen \\<equiv> (\n  skew.empty,\n  skew.isEmpty,\n  skew.find,\n  skew.insert,\n  skew.meld,\n  skew.delete\n)\""], ["", "export_code test_codegen checking SML"], ["", "end"]]}