{"file_name": "/home/qj213/afp-2021-10-22/thys/Collections/Iterator/SetIterator.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Collections", "problem_names": ["lemma set_iterator_weaken_R :\n    \"(\\<And>x y. \\<lbrakk>x \\<in> S0; y \\<in> S0; R x y\\<rbrakk> \\<Longrightarrow> R' x y) \\<Longrightarrow> \n             set_iterator_genord iti S0 R'\"", "lemma finite_S0 :\n    shows \"finite S0\"", "lemma iti_stop_rule_cond :\n    assumes not_c: \"\\<not>(c \\<sigma>)\"\n    shows \"iti c f \\<sigma> = \\<sigma>\"", "lemma iti_stop_rule_emp :\n    assumes S0_emp: \"S0 = {}\"\n    shows \"iti c f \\<sigma> = \\<sigma>\"", "lemma iteratei_rule_P:\n    assumes \n      \"I S0 \\<sigma>0\"\n      \"\\<And>S \\<sigma> x. \\<lbrakk> c \\<sigma>; x \\<in> S; I S \\<sigma>; S \\<subseteq> S0; \n                 \\<forall>y\\<in>S - {x}. R x y; \\<forall>y\\<in>S0 - S. R y x\\<rbrakk> \n                 \\<Longrightarrow> I (S - {x}) (f x \\<sigma>)\"\n      \"\\<And>\\<sigma>. I {} \\<sigma> \\<Longrightarrow> P \\<sigma>\"\n      \"\\<And>\\<sigma> S. \\<lbrakk> S \\<subseteq> S0; S \\<noteq> {}; \\<not> c \\<sigma>; I S \\<sigma>;\n               \\<forall>x\\<in>S. \\<forall>y\\<in>S0-S. R y x \\<rbrakk> \\<Longrightarrow> P \\<sigma>\"\n    shows \"P (iti c f \\<sigma>0)\"", "lemma iteratei_rule_insert_P:\n  assumes pre :\n      \"I {} \\<sigma>0\"\n      \"\\<And>S \\<sigma> x. \\<lbrakk> c \\<sigma>; x \\<in> S0 - S; I S \\<sigma>; S \\<subseteq> S0; \\<forall>y\\<in>(S0 - S) - {x}. R x y;\n                 \\<forall>y\\<in>S. R y x\\<rbrakk> \n                  \\<Longrightarrow> I (insert x S) (f x \\<sigma>)\"\n      \"\\<And>\\<sigma>. I S0 \\<sigma> \\<Longrightarrow> P \\<sigma>\"\n      \"\\<And>\\<sigma> S. \\<lbrakk> S \\<subseteq> S0; S \\<noteq> S0; \n              \\<not> (c \\<sigma>); I S \\<sigma>; \\<forall>x\\<in>S0-S. \\<forall>y\\<in>S. R y x \\<rbrakk> \\<Longrightarrow> P \\<sigma>\"\n  shows \"P (iti c f \\<sigma>0)\"", "lemma iti_fold: \n  assumes lc_f: \"comp_fun_commute f\"\n    shows \"iti (\\<lambda>_. True) f \\<sigma>0 = Finite_Set.fold f \\<sigma>0 S0\"", "lemma set_iterator_intro :\n    \"set_iterator_genord it S0 R \\<Longrightarrow> set_iterator it S0\"", "lemma set_iterator_no_cond_rule_P:\n\"\\<lbrakk> set_iterator it S0;\n   I S0 \\<sigma>0;\n   !!S \\<sigma> x. \\<lbrakk> x \\<in> S; I S \\<sigma>; S \\<subseteq> S0 \\<rbrakk> \\<Longrightarrow> I (S - {x}) (f x \\<sigma>);\n   !!\\<sigma>. I {} \\<sigma> \\<Longrightarrow> P \\<sigma>\n \\<rbrakk> \\<Longrightarrow> P (it (\\<lambda>_. True) f \\<sigma>0)\"", "lemma set_iterator_no_cond_rule_insert_P:\n\"\\<lbrakk> set_iterator it S0;\n   I {} \\<sigma>0;\n   !!S \\<sigma> x. \\<lbrakk> x \\<in> S0 - S; I S \\<sigma>; S \\<subseteq> S0 \\<rbrakk>  \\<Longrightarrow> I (insert x S) (f x \\<sigma>);\n   !!\\<sigma>. I S0 \\<sigma> \\<Longrightarrow> P \\<sigma>\n \\<rbrakk> \\<Longrightarrow> P (it (\\<lambda>_. True) f \\<sigma>0)\"", "lemma set_iterator_rule_P:\n\"\\<lbrakk> set_iterator it S0;\n   I S0 \\<sigma>0;\n   !!S \\<sigma> x. \\<lbrakk> c \\<sigma>; x \\<in> S; I S \\<sigma>; S \\<subseteq> S0 \\<rbrakk> \\<Longrightarrow> I (S - {x}) (f x \\<sigma>);\n   !!\\<sigma>. I {} \\<sigma> \\<Longrightarrow> P \\<sigma>;\n   !!\\<sigma> S. S \\<subseteq> S0 \\<Longrightarrow> S \\<noteq> {} \\<Longrightarrow> \\<not> c \\<sigma> \\<Longrightarrow> I S \\<sigma> \\<Longrightarrow> P \\<sigma>\n \\<rbrakk> \\<Longrightarrow> P (it c f \\<sigma>0)\"", "lemma set_iterator_rule_insert_P:\n\"\\<lbrakk> set_iterator it S0;\n   I {} \\<sigma>0;\n   !!S \\<sigma> x. \\<lbrakk> c \\<sigma>; x \\<in> S0 - S; I S \\<sigma>; S \\<subseteq> S0 \\<rbrakk>  \\<Longrightarrow> I (insert x S) (f x \\<sigma>);\n   !!\\<sigma>. I S0 \\<sigma> \\<Longrightarrow> P \\<sigma>;\n   !!\\<sigma> S. S \\<subseteq> S0 \\<Longrightarrow> S \\<noteq> S0 \\<Longrightarrow> \\<not> c \\<sigma> \\<Longrightarrow> I S \\<sigma> \\<Longrightarrow> P \\<sigma>\n \\<rbrakk> \\<Longrightarrow> P (it c f \\<sigma>0)\"", "lemma map_iterator_genord_rule_P:\n  assumes \"map_iterator_genord it m R\"\n      and I0: \"I (dom m) \\<sigma>0\"\n      and IP: \"!!k v it \\<sigma>. \\<lbrakk> c \\<sigma>; k \\<in> it; m k = Some v; it \\<subseteq> dom m; I it \\<sigma>; \n                             \\<forall>k' v'. k' \\<in> it-{k} \\<and> m k' = Some v' \\<longrightarrow> R (k, v) (k', v');\n                             \\<forall>k' v'. k' \\<notin> it \\<and> m k' = Some v' \\<longrightarrow> R (k', v') (k, v)\\<rbrakk> \\<Longrightarrow> \n                            I (it - {k}) (f (k, v) \\<sigma>)\"\n      and IF: \"!!\\<sigma>. I {} \\<sigma> \\<Longrightarrow> P \\<sigma>\"\n      and II: \"!!\\<sigma> it. \\<lbrakk> it \\<subseteq> dom m; it \\<noteq> {}; \\<not> c \\<sigma>; I it \\<sigma>;\n                         \\<forall>k v k' v'. k \\<notin> it \\<and> m k = Some v \\<and> k' \\<in> it \\<and> m k' = Some v' \\<longrightarrow> \n                                     R (k, v) (k', v') \\<rbrakk> \\<Longrightarrow> P \\<sigma>\"\n  shows \"P (it c f \\<sigma>0)\"", "lemma map_iterator_genord_rule_insert_P:\n  assumes \"map_iterator_genord it m R\"\n      and I0: \"I {} \\<sigma>0\"\n      and IP: \"!!k v it \\<sigma>. \\<lbrakk> c \\<sigma>; k \\<in> dom m - it; m k = Some v; it \\<subseteq> dom m; I it \\<sigma>; \n                             \\<forall>k' v'. k' \\<in> (dom m - it) - {k} \\<and> m k' = Some v' \\<longrightarrow> R (k, v) (k', v');\n                             \\<forall>k' v'. k' \\<in> it \\<and> m k' = Some v' \\<longrightarrow> \n                               R (k', v') (k, v)\\<rbrakk> \\<Longrightarrow> I (insert k it) (f (k, v) \\<sigma>)\"\n      and IF: \"!!\\<sigma>. I (dom m) \\<sigma> \\<Longrightarrow> P \\<sigma>\"\n      and II: \"!!\\<sigma> it. \\<lbrakk> it \\<subseteq> dom m; it \\<noteq> dom m; \\<not> c \\<sigma>; I it \\<sigma>;\n                         \\<forall>k v k' v'. k \\<in> it \\<and> m k = Some v \\<and> k' \\<notin> it \\<and> m k' = Some v' \\<longrightarrow> \n                                     R (k, v) (k', v') \\<rbrakk> \\<Longrightarrow> P \\<sigma>\"\n  shows \"P (it c f \\<sigma>0)\"", "lemma map_iterator_rule_P:\n  assumes \"map_iterator it m\"\n      and I0: \"I (dom m) \\<sigma>0\"\n      and IP: \"!!k v it \\<sigma>. \\<lbrakk> c \\<sigma>; k \\<in> it; m k = Some v; it \\<subseteq> dom m; I it \\<sigma> \\<rbrakk> \\<Longrightarrow> I (it - {k}) (f (k, v) \\<sigma>)\"\n      and IF: \"!!\\<sigma>. I {} \\<sigma> \\<Longrightarrow> P \\<sigma>\"\n      and II: \"!!\\<sigma> it. \\<lbrakk> it \\<subseteq> dom m; it \\<noteq> {}; \\<not> c \\<sigma>; I it \\<sigma> \\<rbrakk> \\<Longrightarrow> P \\<sigma>\"\n  shows \"P (it c f \\<sigma>0)\"", "lemma map_iterator_rule_insert_P:\n  assumes \"map_iterator it m\"\n      and I0: \"I {} \\<sigma>0\"\n      and IP: \"!!k v it \\<sigma>. \\<lbrakk> c \\<sigma>; k \\<in> dom m - it; m k = Some v; it \\<subseteq> dom m; I it \\<sigma> \\<rbrakk> \\<Longrightarrow> I (insert k it) (f (k, v) \\<sigma>)\"\n      and IF: \"!!\\<sigma>. I (dom m) \\<sigma> \\<Longrightarrow> P \\<sigma>\"\n      and II: \"!!\\<sigma> it. \\<lbrakk> it \\<subseteq> dom m; it \\<noteq> dom m; \\<not> c \\<sigma>; I it \\<sigma> \\<rbrakk> \\<Longrightarrow> P \\<sigma>\"\n  shows \"P (it c f \\<sigma>0)\"", "lemma map_iterator_no_cond_rule_P:\n  assumes \"map_iterator it m\"\n      and I0: \"I (dom m) \\<sigma>0\"\n      and IP: \"!!k v it \\<sigma>. \\<lbrakk> k \\<in> it; m k = Some v; it \\<subseteq> dom m; I it \\<sigma> \\<rbrakk> \\<Longrightarrow> I (it - {k}) (f (k, v) \\<sigma>)\"\n      and IF: \"!!\\<sigma>. I {} \\<sigma> \\<Longrightarrow> P \\<sigma>\"\n  shows \"P (it (\\<lambda>_. True) f \\<sigma>0)\"", "lemma map_iterator_no_cond_rule_insert_P:\n  assumes \"map_iterator it m\"\n      and I0: \"I {} \\<sigma>0\"\n      and IP: \"!!k v it \\<sigma>. \\<lbrakk> k \\<in> dom m - it; m k = Some v; it \\<subseteq> dom m; I it \\<sigma> \\<rbrakk> \\<Longrightarrow> I (insert k it) (f (k, v) \\<sigma>)\"\n      and IF: \"!!\\<sigma>. I (dom m) \\<sigma> \\<Longrightarrow> P \\<sigma>\"\n  shows \"P (it (\\<lambda>_. True) f \\<sigma>0)\"", "lemma set_iterator_linord_rule_P:\n  \"\\<lbrakk> set_iterator_linord it S0;\n     I S0 \\<sigma>0;\n     !!S \\<sigma> x. \\<lbrakk> c \\<sigma>; x \\<in> S; I S \\<sigma>; S \\<subseteq> S0; \\<And>x'. x' \\<in> S0-S \\<Longrightarrow> x' \\<le> x; \\<And>x'. x' \\<in> S \\<Longrightarrow> x \\<le> x'\\<rbrakk> \\<Longrightarrow> I (S - {x}) (f x \\<sigma>);\n     !!\\<sigma>. I {} \\<sigma> \\<Longrightarrow> P \\<sigma>;\n     !!\\<sigma> S. S \\<subseteq> S0 \\<Longrightarrow> S \\<noteq> {} \\<Longrightarrow> (\\<And>x x'. \\<lbrakk>x \\<in> S; x' \\<in> S0-S\\<rbrakk> \\<Longrightarrow> x' \\<le> x) \\<Longrightarrow> \\<not> c \\<sigma> \\<Longrightarrow> I S \\<sigma> \\<Longrightarrow> P \\<sigma>\n   \\<rbrakk> \\<Longrightarrow> P (it c f \\<sigma>0)\"", "lemma set_iterator_linord_rule_insert_P:\n  \"\\<lbrakk> set_iterator_linord it S0;\n     I {} \\<sigma>0;\n     !!S \\<sigma> x. \\<lbrakk> c \\<sigma>; x \\<in> S0 - S; I S \\<sigma>; S \\<subseteq> S0; \\<And>x'. x' \\<in> S \\<Longrightarrow> x' \\<le> x; \\<And>x'. x' \\<in> S0 - S \\<Longrightarrow> x \\<le> x'\\<rbrakk>  \\<Longrightarrow> I (insert x S) (f x \\<sigma>);\n     !!\\<sigma>. I S0 \\<sigma> \\<Longrightarrow> P \\<sigma>;\n     !!\\<sigma> S. S \\<subseteq> S0 \\<Longrightarrow> S \\<noteq> S0 \\<Longrightarrow> (\\<And>x x'. \\<lbrakk>x \\<in> S0-S; x' \\<in> S\\<rbrakk> \\<Longrightarrow> x' \\<le> x) \\<Longrightarrow> \\<not> c \\<sigma> \\<Longrightarrow> I S \\<sigma> \\<Longrightarrow> P \\<sigma>\n   \\<rbrakk> \\<Longrightarrow> P (it c f \\<sigma>0)\"", "lemma set_iterator_rev_linord_rule_P:\n  \"\\<lbrakk> set_iterator_rev_linord it S0;\n     I S0 \\<sigma>0;\n     !!S \\<sigma> x. \\<lbrakk> c \\<sigma>; x \\<in> S; I S \\<sigma>; S \\<subseteq> S0; \\<And>x'. x' \\<in> S0-S \\<Longrightarrow> x \\<le> x'; \\<And>x'. x' \\<in> S \\<Longrightarrow> x' \\<le> x\\<rbrakk> \\<Longrightarrow> I (S - {x}) (f x \\<sigma>);\n     !!\\<sigma>. I {} \\<sigma> \\<Longrightarrow> P \\<sigma>;\n     !!\\<sigma> S. S \\<subseteq> S0 \\<Longrightarrow> S \\<noteq> {} \\<Longrightarrow> (\\<And>x x'. \\<lbrakk>x \\<in> S; x' \\<in> S0-S\\<rbrakk> \\<Longrightarrow> x \\<le> x') \\<Longrightarrow> \\<not> c \\<sigma> \\<Longrightarrow> I S \\<sigma> \\<Longrightarrow> P \\<sigma>\n   \\<rbrakk> \\<Longrightarrow> P (it c f \\<sigma>0)\"", "lemma set_iterator_rev_linord_rule_insert_P:\n  \"\\<lbrakk> set_iterator_rev_linord it S0;\n     I {} \\<sigma>0;\n     !!S \\<sigma> x. \\<lbrakk> c \\<sigma>; x \\<in> S0 - S; I S \\<sigma>; S \\<subseteq> S0; \\<And>x'. x' \\<in> S \\<Longrightarrow> x \\<le> x'; \\<And>x'. x' \\<in> S0 - S \\<Longrightarrow> x' \\<le> x\\<rbrakk>  \\<Longrightarrow> I (insert x S) (f x \\<sigma>);\n     !!\\<sigma>. I S0 \\<sigma> \\<Longrightarrow> P \\<sigma>;\n     !!\\<sigma> S. S \\<subseteq> S0 \\<Longrightarrow> S \\<noteq> S0 \\<Longrightarrow>  (\\<And>x x'. \\<lbrakk>x \\<in> S0-S; x' \\<in> S\\<rbrakk> \\<Longrightarrow> x \\<le> x') \\<Longrightarrow> \\<not> c \\<sigma> \\<Longrightarrow> I S \\<sigma> \\<Longrightarrow> P \\<sigma>\n   \\<rbrakk> \\<Longrightarrow> P (it c f \\<sigma>0)\"", "lemma set_iterator_map_linord_rule_P:\n  \"\\<lbrakk> set_iterator_map_linord it S0;\n     I S0 \\<sigma>0;\n     !!S \\<sigma> k v. \\<lbrakk> c \\<sigma>; (k, v) \\<in> S; I S \\<sigma>; S \\<subseteq> S0; \\<And>k' v'. (k', v') \\<in> S0-S \\<Longrightarrow> k' \\<le> k;\n                  \\<And>k' v'. (k', v') \\<in> S \\<Longrightarrow> k \\<le> k'\\<rbrakk> \\<Longrightarrow> I (S - {(k,v)}) (f (k,v) \\<sigma>);\n     !!\\<sigma>. I {} \\<sigma> \\<Longrightarrow> P \\<sigma>;\n     !!\\<sigma> S. S \\<subseteq> S0 \\<Longrightarrow> S \\<noteq> {} \\<Longrightarrow> (\\<And>k v k' v'. \\<lbrakk>(k, v) \\<in> S0-S; (k', v') \\<in> S\\<rbrakk> \\<Longrightarrow> k \\<le> k') \\<Longrightarrow>\n         \\<not> c \\<sigma> \\<Longrightarrow> I S \\<sigma> \\<Longrightarrow> P \\<sigma>\n   \\<rbrakk> \\<Longrightarrow> P (it c f \\<sigma>0)\"", "lemma set_iterator_map_linord_rule_insert_P:\n  \"\\<lbrakk> set_iterator_map_linord it S0;\n     I {} \\<sigma>0;\n     !!S \\<sigma> k v. \\<lbrakk> c \\<sigma>; (k, v) \\<in> S0 - S; I S \\<sigma>; S \\<subseteq> S0; \\<And>k' v'. (k', v') \\<in> S \\<Longrightarrow> k' \\<le> k;\n                  \\<And>k' v'. (k',v') \\<in> S0 - S \\<Longrightarrow> k \\<le> k'\\<rbrakk>  \\<Longrightarrow> I (insert (k,v) S) (f (k,v) \\<sigma>);\n     !!\\<sigma>. I S0 \\<sigma> \\<Longrightarrow> P \\<sigma>;\n     !!\\<sigma> S. S \\<subseteq> S0 \\<Longrightarrow> S \\<noteq> S0 \\<Longrightarrow> (\\<And>k v k' v'. \\<lbrakk>(k, v) \\<in> S; (k', v') \\<in> S0-S\\<rbrakk> \\<Longrightarrow> k \\<le> k') \\<Longrightarrow>\n            \\<not> c \\<sigma> \\<Longrightarrow> I S \\<sigma> \\<Longrightarrow> P \\<sigma>\n   \\<rbrakk> \\<Longrightarrow> P (it c f \\<sigma>0)\"", "lemma set_iterator_map_rev_linord_rule_P:\n  \"\\<lbrakk> set_iterator_map_rev_linord it S0;\n     I S0 \\<sigma>0;\n     !!S \\<sigma> k v. \\<lbrakk> c \\<sigma>; (k, v) \\<in> S; I S \\<sigma>; S \\<subseteq> S0; \\<And>k' v'. (k', v') \\<in> S0-S \\<Longrightarrow> k \\<le> k';\n                  \\<And>k' v'. (k', v') \\<in> S \\<Longrightarrow> k' \\<le> k\\<rbrakk> \\<Longrightarrow> I (S - {(k,v)}) (f (k,v) \\<sigma>);\n     !!\\<sigma>. I {} \\<sigma> \\<Longrightarrow> P \\<sigma>;\n     !!\\<sigma> S. S \\<subseteq> S0 \\<Longrightarrow> S \\<noteq> {} \\<Longrightarrow> (\\<And>k v k' v'. \\<lbrakk>(k, v) \\<in> S0-S; (k', v') \\<in> S\\<rbrakk> \\<Longrightarrow> k' \\<le> k) \\<Longrightarrow> \n            \\<not> c \\<sigma> \\<Longrightarrow> I S \\<sigma> \\<Longrightarrow> P \\<sigma>\n   \\<rbrakk> \\<Longrightarrow> P (it c f \\<sigma>0)\"", "lemma set_iterator_map_rev_linord_rule_insert_P:\n  \"\\<lbrakk> set_iterator_map_rev_linord it S0;\n     I {} \\<sigma>0;\n     !!S \\<sigma> k v. \\<lbrakk> c \\<sigma>; (k, v) \\<in> S0 - S; I S \\<sigma>; S \\<subseteq> S0; \\<And>k' v'. (k', v') \\<in> S \\<Longrightarrow> k \\<le> k';\n                 \\<And>k' v'. (k',v') \\<in> S0 - S \\<Longrightarrow> k' \\<le> k\\<rbrakk>  \\<Longrightarrow> I (insert (k,v) S) (f (k,v) \\<sigma>);\n     !!\\<sigma>. I S0 \\<sigma> \\<Longrightarrow> P \\<sigma>;\n     !!\\<sigma> S. S \\<subseteq> S0 \\<Longrightarrow> S \\<noteq> S0 \\<Longrightarrow> (\\<And>k v k' v'. \\<lbrakk>(k, v) \\<in> S; (k', v') \\<in> S0-S\\<rbrakk> \\<Longrightarrow> k' \\<le> k) \\<Longrightarrow> \n            \\<not> c \\<sigma> \\<Longrightarrow> I S \\<sigma> \\<Longrightarrow> P \\<sigma>\n   \\<rbrakk> \\<Longrightarrow> P (it c f \\<sigma>0)\"", "lemma map_iterator_linord_rule_P:\n    assumes \"map_iterator_linord it m\"\n        and I0: \"I (dom m) \\<sigma>0\"\n        and IP: \"!!k v it \\<sigma>. \\<lbrakk> c \\<sigma>; k \\<in> it; m k = Some v; it \\<subseteq> dom m; I it \\<sigma>;\n                 \\<And>k'. k' \\<in> it \\<Longrightarrow> k \\<le> k'; \n                 \\<And>k'. k' \\<in> (dom m)-it \\<Longrightarrow> k' \\<le> k\\<rbrakk> \\<Longrightarrow> I (it - {k}) (f (k, v) \\<sigma>)\"\n        and IF: \"!!\\<sigma>. I {} \\<sigma> \\<Longrightarrow> P \\<sigma>\"\n        and II: \"!!\\<sigma> it. \\<lbrakk> it \\<subseteq> dom m; it \\<noteq> {}; \\<not> c \\<sigma>; I it \\<sigma>;\n                  \\<And>k k'. \\<lbrakk>k \\<in> (dom m)-it; k' \\<in> it\\<rbrakk> \\<Longrightarrow> k \\<le> k'\\<rbrakk> \\<Longrightarrow> P \\<sigma>\"\n    shows \"P (it c f \\<sigma>0)\"", "lemma map_iterator_linord_rule_insert_P:\n    assumes \"map_iterator_linord it m\"\n        and I0: \"I {} \\<sigma>0\"\n        and IP: \"!!k v it \\<sigma>. \\<lbrakk> c \\<sigma>; k \\<in> dom m - it; m k = Some v; it \\<subseteq> dom m; I it \\<sigma>;\n                 \\<And>k'. k' \\<in> (dom m - it) \\<Longrightarrow> k \\<le> k'; \n                 \\<And>k'. k' \\<in> it \\<Longrightarrow> k' \\<le> k \\<rbrakk> \\<Longrightarrow> I (insert k it) (f (k, v) \\<sigma>)\"\n        and IF: \"!!\\<sigma>. I (dom m) \\<sigma> \\<Longrightarrow> P \\<sigma>\"\n        and II: \"!!\\<sigma> it. \\<lbrakk> it \\<subseteq> dom m; it \\<noteq> dom m; \\<not> c \\<sigma>; I it \\<sigma>;\n                  \\<And>k k'. \\<lbrakk>k \\<in> it; k' \\<in> (dom m)-it\\<rbrakk> \\<Longrightarrow> k \\<le> k'\\<rbrakk> \\<Longrightarrow> P \\<sigma>\"\n    shows \"P (it c f \\<sigma>0)\"", "lemma map_iterator_rev_linord_rule_P:\n    assumes \"map_iterator_rev_linord it m\"\n        and I0: \"I (dom m) \\<sigma>0\"\n        and IP: \"!!k v it \\<sigma>. \\<lbrakk> c \\<sigma>; k \\<in> it; m k = Some v; it \\<subseteq> dom m; I it \\<sigma>;\n                 \\<And>k'. k' \\<in> it \\<Longrightarrow> k' \\<le> k; \n                 \\<And>k'. k' \\<in> (dom m)-it \\<Longrightarrow> k \\<le> k'\\<rbrakk> \\<Longrightarrow> I (it - {k}) (f (k, v) \\<sigma>)\"\n        and IF: \"!!\\<sigma>. I {} \\<sigma> \\<Longrightarrow> P \\<sigma>\"\n        and II: \"!!\\<sigma> it. \\<lbrakk> it \\<subseteq> dom m; it \\<noteq> {}; \\<not> c \\<sigma>; I it \\<sigma>;\n                  \\<And>k k'. \\<lbrakk>k \\<in> (dom m)-it; k' \\<in> it\\<rbrakk> \\<Longrightarrow> k' \\<le> k\\<rbrakk> \\<Longrightarrow> P \\<sigma>\"\n    shows \"P (it c f \\<sigma>0)\"", "lemma map_iterator_rev_linord_rule_insert_P:\n    assumes \"map_iterator_rev_linord it m\"\n        and I0: \"I {} \\<sigma>0\"\n        and IP: \"!!k v it \\<sigma>. \\<lbrakk> c \\<sigma>; k \\<in> dom m - it; m k = Some v; it \\<subseteq> dom m; I it \\<sigma>;\n                 \\<And>k'. k' \\<in> (dom m - it) \\<Longrightarrow> k' \\<le> k; \n                 \\<And>k'. k' \\<in> it \\<Longrightarrow> k \\<le> k'\\<rbrakk> \\<Longrightarrow> I (insert k it) (f (k, v) \\<sigma>)\"\n        and IF: \"!!\\<sigma>. I (dom m) \\<sigma> \\<Longrightarrow> P \\<sigma>\"\n        and II: \"!!\\<sigma> it. \\<lbrakk> it \\<subseteq> dom m; it \\<noteq> dom m; \\<not> c \\<sigma>; I it \\<sigma>;\n                  \\<And>k k'. \\<lbrakk>k \\<in> it; k' \\<in> (dom m)-it\\<rbrakk> \\<Longrightarrow> k' \\<le> k\\<rbrakk> \\<Longrightarrow> P \\<sigma>\"\n    shows \"P (it c f \\<sigma>0)\"", "lemma set_iterator_genord_foldli_conv :\n  \"set_iterator_genord iti S R \\<longleftrightarrow>\n   (\\<exists>l0. distinct l0 \\<and> S = set l0 \\<and> sorted_wrt R l0 \\<and> iti = foldli l0)\"", "lemma set_iterator_genord_I [intro] :\n  \"\\<lbrakk>distinct l0; S = set l0; sorted_wrt R l0; iti = foldli l0\\<rbrakk> \\<Longrightarrow>\n   set_iterator_genord iti S R\"", "lemma set_iterator_foldli_conv :\n  \"set_iterator iti S \\<longleftrightarrow>\n   (\\<exists>l0. distinct l0 \\<and> S = set l0 \\<and> iti = foldli l0)\"", "lemma set_iterator_I [intro] :\n  \"\\<lbrakk>distinct l0; S = set l0; iti = foldli l0\\<rbrakk> \\<Longrightarrow>\n   set_iterator iti S\"", "lemma set_iterator_linord_foldli_conv :\n    \"set_iterator_linord iti S \\<longleftrightarrow>\n     (\\<exists>l0. distinct l0 \\<and> S = set l0 \\<and> sorted l0 \\<and> iti = foldli l0)\"", "lemma set_iterator_linord_I [intro] :\n    \"\\<lbrakk>distinct l0; S = set l0; sorted l0; iti = foldli l0\\<rbrakk> \\<Longrightarrow>\n     set_iterator_linord iti S\"", "lemma set_iterator_rev_linord_foldli_conv :\n    \"set_iterator_rev_linord iti S \\<longleftrightarrow>\n     (\\<exists>l0. distinct l0 \\<and> S = set l0 \\<and> sorted (rev l0) \\<and> iti = foldli l0)\"", "lemma set_iterator_rev_linord_I [intro] :\n    \"\\<lbrakk>distinct l0; S = set l0; sorted (rev l0); iti = foldli l0\\<rbrakk> \\<Longrightarrow>\n     set_iterator_rev_linord iti S\"", "lemma map_iterator_genord_foldli_conv :\n  \"map_iterator_genord iti m R \\<longleftrightarrow>\n   (\\<exists>(l0::('k \\<times> 'v) list). distinct (map fst l0) \\<and> m = map_of l0 \\<and> sorted_wrt R l0 \\<and> iti = foldli l0)\"", "lemma map_iterator_genord_I [intro] :\n  \"\\<lbrakk>distinct (map fst l0); m = map_of l0; sorted_wrt R l0; iti = foldli l0\\<rbrakk> \\<Longrightarrow>\n   map_iterator_genord iti m R\"", "lemma map_iterator_foldli_conv :\n  \"map_iterator iti m \\<longleftrightarrow>\n   (\\<exists>l0. distinct (map fst l0) \\<and> m = map_of l0 \\<and> iti = foldli l0)\"", "lemma map_iterator_I [intro] :\n  \"\\<lbrakk>distinct (map fst l0); m = map_of l0; iti = foldli l0\\<rbrakk> \\<Longrightarrow>\n   map_iterator iti m\"", "lemma sorted_wrt_keys_map_fst:\n    \"sorted_wrt (\\<lambda>(k,_) (k',_). R k k') l = sorted_wrt R (map fst l)\"", "lemma map_iterator_linord_foldli_conv :\n    \"map_iterator_linord iti m \\<longleftrightarrow>\n     (\\<exists>l0. distinct (map fst l0) \\<and> m = map_of l0 \\<and> sorted (map fst l0) \\<and> iti = foldli l0)\"", "lemma map_iterator_linord_I [intro] :\n    \"\\<lbrakk>distinct (map fst l0); m = map_of l0; sorted (map fst l0); iti = foldli l0\\<rbrakk> \\<Longrightarrow>\n     map_iterator_linord iti m\"", "lemma map_iterator_rev_linord_foldli_conv :\n    \"map_iterator_rev_linord iti m \\<longleftrightarrow>\n     (\\<exists>l0. distinct (map fst l0) \\<and> m = map_of l0 \\<and> sorted (rev (map fst l0)) \\<and> iti = foldli l0)\"", "lemma map_iterator_rev_linord_I [intro] :\n    \"\\<lbrakk>distinct (map fst l0); m = map_of l0; sorted (rev (map fst l0)); iti = foldli l0\\<rbrakk> \\<Longrightarrow>\n     map_iterator_rev_linord iti m\""], "translations": [["", "lemma set_iterator_weaken_R :\n    \"(\\<And>x y. \\<lbrakk>x \\<in> S0; y \\<in> S0; R x y\\<rbrakk> \\<Longrightarrow> R' x y) \\<Longrightarrow> \n             set_iterator_genord iti S0 R'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>x y.\n        \\<lbrakk>x \\<in> S0; y \\<in> S0; R x y\\<rbrakk>\n        \\<Longrightarrow> R' x y) \\<Longrightarrow>\n    set_iterator_genord iti S0 R'", "by (metis set_iterator_genord.intro foldli_transform sorted_wrt_mono_rel)"], ["", "lemma finite_S0 :\n    shows \"finite S0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite S0", "by (metis finite_set foldli_transform)"], ["", "lemma iti_stop_rule_cond :\n    assumes not_c: \"\\<not>(c \\<sigma>)\"\n    shows \"iti c f \\<sigma> = \\<sigma>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. iti c f \\<sigma> = \\<sigma>", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. iti c f \\<sigma> = \\<sigma>", "from foldli_transform"], ["proof (chain)\npicking this:\n  \\<exists>l0.\n     distinct l0 \\<and>\n     S0 = set l0 \\<and> sorted_wrt R l0 \\<and> iti = foldli l0", "obtain l0 where l0_props:\n      \"iti c = foldli l0 c\""], ["proof (prove)\nusing this:\n  \\<exists>l0.\n     distinct l0 \\<and>\n     S0 = set l0 \\<and> sorted_wrt R l0 \\<and> iti = foldli l0\n\ngoal (1 subgoal):\n 1. (\\<And>l0.\n        iti c = foldli l0 c \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  iti c = foldli l0 c\n\ngoal (1 subgoal):\n 1. iti c f \\<sigma> = \\<sigma>", "with foldli_not_cond [of c \\<sigma> l0 f, OF not_c]"], ["proof (chain)\npicking this:\n  foldli l0 c f \\<sigma> = \\<sigma>\n  iti c = foldli l0 c", "show ?thesis"], ["proof (prove)\nusing this:\n  foldli l0 c f \\<sigma> = \\<sigma>\n  iti c = foldli l0 c\n\ngoal (1 subgoal):\n 1. iti c f \\<sigma> = \\<sigma>", "by simp"], ["proof (state)\nthis:\n  iti c f \\<sigma> = \\<sigma>\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma iti_stop_rule_emp :\n    assumes S0_emp: \"S0 = {}\"\n    shows \"iti c f \\<sigma> = \\<sigma>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. iti c f \\<sigma> = \\<sigma>", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. iti c f \\<sigma> = \\<sigma>", "from foldli_transform"], ["proof (chain)\npicking this:\n  \\<exists>l0.\n     distinct l0 \\<and>\n     S0 = set l0 \\<and> sorted_wrt R l0 \\<and> iti = foldli l0", "obtain l0 where l0_props:\n      \"S0 = set l0\" \"iti c = foldli l0 c\""], ["proof (prove)\nusing this:\n  \\<exists>l0.\n     distinct l0 \\<and>\n     S0 = set l0 \\<and> sorted_wrt R l0 \\<and> iti = foldli l0\n\ngoal (1 subgoal):\n 1. (\\<And>l0.\n        \\<lbrakk>S0 = set l0; iti c = foldli l0 c\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  S0 = set l0\n  iti c = foldli l0 c\n\ngoal (1 subgoal):\n 1. iti c f \\<sigma> = \\<sigma>", "with foldli.simps(1) [of c f \\<sigma>] S0_emp"], ["proof (chain)\npicking this:\n  foldli [] c f \\<sigma> = \\<sigma>\n  S0 = {}\n  S0 = set l0\n  iti c = foldli l0 c", "show ?thesis"], ["proof (prove)\nusing this:\n  foldli [] c f \\<sigma> = \\<sigma>\n  S0 = {}\n  S0 = set l0\n  iti c = foldli l0 c\n\ngoal (1 subgoal):\n 1. iti c f \\<sigma> = \\<sigma>", "by simp"], ["proof (state)\nthis:\n  iti c f \\<sigma> = \\<sigma>\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>Reducing everything to folding is cumbersome. Let's\n          define a few high-level inference rules.\\<close>"], ["", "lemma iteratei_rule_P:\n    assumes \n      \"I S0 \\<sigma>0\"\n      \"\\<And>S \\<sigma> x. \\<lbrakk> c \\<sigma>; x \\<in> S; I S \\<sigma>; S \\<subseteq> S0; \n                 \\<forall>y\\<in>S - {x}. R x y; \\<forall>y\\<in>S0 - S. R y x\\<rbrakk> \n                 \\<Longrightarrow> I (S - {x}) (f x \\<sigma>)\"\n      \"\\<And>\\<sigma>. I {} \\<sigma> \\<Longrightarrow> P \\<sigma>\"\n      \"\\<And>\\<sigma> S. \\<lbrakk> S \\<subseteq> S0; S \\<noteq> {}; \\<not> c \\<sigma>; I S \\<sigma>;\n               \\<forall>x\\<in>S. \\<forall>y\\<in>S0-S. R y x \\<rbrakk> \\<Longrightarrow> P \\<sigma>\"\n    shows \"P (iti c f \\<sigma>0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P (iti c f \\<sigma>0)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. P (iti c f \\<sigma>0)", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. P (iti c f \\<sigma>0)", "fix P I \\<sigma>0 f"], ["proof (state)\ngoal (1 subgoal):\n 1. P (iti c f \\<sigma>0)", "assume\n        I: \"I S0 \\<sigma>0\" and \n        R: \"\\<And>S \\<sigma> x. \\<lbrakk>c \\<sigma>; x \\<in> S; I S \\<sigma>; S \\<subseteq> S0; \\<forall>y\\<in>S-{x}. R x y\\<rbrakk> \\<Longrightarrow> I (S - {x}) (f x \\<sigma>)\" and\n        C1: \"I {} (iti c f \\<sigma>0) \\<Longrightarrow> P\" and\n        C2:\"\\<And>S. \\<lbrakk>S \\<subseteq> S0; S \\<noteq> {}; \\<not> c (iti c f \\<sigma>0); I S (iti c f \\<sigma>0)\\<rbrakk> \\<Longrightarrow> P\""], ["proof (state)\nthis:\n  I S0 \\<sigma>0\n  \\<lbrakk>c ?\\<sigma>; ?x \\<in> ?S; I ?S ?\\<sigma>; ?S \\<subseteq> S0;\n   \\<forall>y\\<in>?S - {?x}. R ?x y\\<rbrakk>\n  \\<Longrightarrow> I (?S - {?x}) (f ?x ?\\<sigma>)\n  I {} (iti c f \\<sigma>0) \\<Longrightarrow> P\n  \\<lbrakk>?S \\<subseteq> S0; ?S \\<noteq> {}; \\<not> c (iti c f \\<sigma>0);\n   I ?S (iti c f \\<sigma>0)\\<rbrakk>\n  \\<Longrightarrow> P\n\ngoal (1 subgoal):\n 1. P (iti c f \\<sigma>0)", "from foldli_transform"], ["proof (chain)\npicking this:\n  \\<exists>l0.\n     distinct l0 \\<and>\n     S0 = set l0 \\<and> sorted_wrt R l0 \\<and> iti = foldli l0", "obtain l0 where l0_props:\n         \"distinct l0\" \"S0 = set l0\" \"sorted_wrt R l0\"  \"iti c = foldli l0 c\""], ["proof (prove)\nusing this:\n  \\<exists>l0.\n     distinct l0 \\<and>\n     S0 = set l0 \\<and> sorted_wrt R l0 \\<and> iti = foldli l0\n\ngoal (1 subgoal):\n 1. (\\<And>l0.\n        \\<lbrakk>distinct l0; S0 = set l0; sorted_wrt R l0;\n         iti c = foldli l0 c\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  distinct l0\n  S0 = set l0\n  sorted_wrt R l0\n  iti c = foldli l0 c\n\ngoal (1 subgoal):\n 1. P (iti c f \\<sigma>0)", "from I R"], ["proof (chain)\npicking this:\n  I S0 \\<sigma>0\n  \\<lbrakk>c ?\\<sigma>; ?x \\<in> ?S; I ?S ?\\<sigma>; ?S \\<subseteq> S0;\n   \\<forall>y\\<in>?S - {?x}. R ?x y\\<rbrakk>\n  \\<Longrightarrow> I (?S - {?x}) (f ?x ?\\<sigma>)", "have \"I {} (iti c f \\<sigma>0) \\<or> \n          (\\<exists>S. S \\<subseteq> S0 \\<and> S \\<noteq> {} \\<and> \n               \\<not> (c (iti c f \\<sigma>0)) \\<and> \n               I S (iti c f \\<sigma>0))\""], ["proof (prove)\nusing this:\n  I S0 \\<sigma>0\n  \\<lbrakk>c ?\\<sigma>; ?x \\<in> ?S; I ?S ?\\<sigma>; ?S \\<subseteq> S0;\n   \\<forall>y\\<in>?S - {?x}. R ?x y\\<rbrakk>\n  \\<Longrightarrow> I (?S - {?x}) (f ?x ?\\<sigma>)\n\ngoal (1 subgoal):\n 1. I {} (iti c f \\<sigma>0) \\<or>\n    (\\<exists>S\\<subseteq>S0.\n        S \\<noteq> {} \\<and>\n        \\<not> c (iti c f \\<sigma>0) \\<and> I S (iti c f \\<sigma>0))", "unfolding l0_props"], ["proof (prove)\nusing this:\n  I (set l0) \\<sigma>0\n  \\<lbrakk>c ?\\<sigma>; ?x \\<in> ?S; I ?S ?\\<sigma>; ?S \\<subseteq> set l0;\n   \\<forall>y\\<in>?S - {?x}. R ?x y\\<rbrakk>\n  \\<Longrightarrow> I (?S - {?x}) (f ?x ?\\<sigma>)\n\ngoal (1 subgoal):\n 1. I {} (foldli l0 c f \\<sigma>0) \\<or>\n    (\\<exists>S\\<subseteq>set l0.\n        S \\<noteq> {} \\<and>\n        \\<not> c (foldli l0 c f \\<sigma>0) \\<and>\n        I S (foldli l0 c f \\<sigma>0))", "using l0_props(1,3)"], ["proof (prove)\nusing this:\n  I (set l0) \\<sigma>0\n  \\<lbrakk>c ?\\<sigma>; ?x \\<in> ?S; I ?S ?\\<sigma>; ?S \\<subseteq> set l0;\n   \\<forall>y\\<in>?S - {?x}. R ?x y\\<rbrakk>\n  \\<Longrightarrow> I (?S - {?x}) (f ?x ?\\<sigma>)\n  distinct l0\n  sorted_wrt R l0\n\ngoal (1 subgoal):\n 1. I {} (foldli l0 c f \\<sigma>0) \\<or>\n    (\\<exists>S\\<subseteq>set l0.\n        S \\<noteq> {} \\<and>\n        \\<not> c (foldli l0 c f \\<sigma>0) \\<and>\n        I S (foldli l0 c f \\<sigma>0))", "proof (induct l0 arbitrary: \\<sigma>0)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>\\<sigma>0.\n       \\<lbrakk>I (set []) \\<sigma>0;\n        \\<And>\\<sigma> x S.\n           \\<lbrakk>c \\<sigma>; x \\<in> S; I S \\<sigma>;\n            S \\<subseteq> set []; Ball (S - {x}) (R x)\\<rbrakk>\n           \\<Longrightarrow> I (S - {x}) (f x \\<sigma>);\n        distinct []; sorted_wrt R []\\<rbrakk>\n       \\<Longrightarrow> I {} (foldli [] c f \\<sigma>0) \\<or>\n                         (\\<exists>S\\<subseteq>set [].\n                             S \\<noteq> {} \\<and>\n                             \\<not> c (foldli [] c f \\<sigma>0) \\<and>\n                             I S (foldli [] c f \\<sigma>0))\n 2. \\<And>a l0 \\<sigma>0.\n       \\<lbrakk>\\<And>\\<sigma>0.\n                   \\<lbrakk>I (set l0) \\<sigma>0;\n                    \\<And>\\<sigma> x S.\n                       \\<lbrakk>c \\<sigma>; x \\<in> S; I S \\<sigma>;\n                        S \\<subseteq> set l0; Ball (S - {x}) (R x)\\<rbrakk>\n                       \\<Longrightarrow> I (S - {x}) (f x \\<sigma>);\n                    distinct l0; sorted_wrt R l0\\<rbrakk>\n                   \\<Longrightarrow> I {} (foldli l0 c f \\<sigma>0) \\<or>\n                                     (\\<exists>S\\<subseteq>set l0.\n   S \\<noteq> {} \\<and>\n   \\<not> c (foldli l0 c f \\<sigma>0) \\<and> I S (foldli l0 c f \\<sigma>0));\n        I (set (a # l0)) \\<sigma>0;\n        \\<And>\\<sigma> x S.\n           \\<lbrakk>c \\<sigma>; x \\<in> S; I S \\<sigma>;\n            S \\<subseteq> set (a # l0); Ball (S - {x}) (R x)\\<rbrakk>\n           \\<Longrightarrow> I (S - {x}) (f x \\<sigma>);\n        distinct (a # l0); sorted_wrt R (a # l0)\\<rbrakk>\n       \\<Longrightarrow> I {} (foldli (a # l0) c f \\<sigma>0) \\<or>\n                         (\\<exists>S\\<subseteq>set (a # l0).\n                             S \\<noteq> {} \\<and>\n                             \\<not> c (foldli (a # l0) c f \\<sigma>0) \\<and>\n                             I S (foldli (a # l0) c f \\<sigma>0))", "case Nil"], ["proof (state)\nthis:\n  I (set []) \\<sigma>0\n  \\<lbrakk>c ?\\<sigma>; ?x \\<in> ?S; I ?S ?\\<sigma>; ?S \\<subseteq> set [];\n   \\<forall>a\\<in>?S - {?x}. R ?x a\\<rbrakk>\n  \\<Longrightarrow> I (?S - {?x}) (f ?x ?\\<sigma>)\n  distinct []\n  sorted_wrt R []\n\ngoal (2 subgoals):\n 1. \\<And>\\<sigma>0.\n       \\<lbrakk>I (set []) \\<sigma>0;\n        \\<And>\\<sigma> x S.\n           \\<lbrakk>c \\<sigma>; x \\<in> S; I S \\<sigma>;\n            S \\<subseteq> set []; Ball (S - {x}) (R x)\\<rbrakk>\n           \\<Longrightarrow> I (S - {x}) (f x \\<sigma>);\n        distinct []; sorted_wrt R []\\<rbrakk>\n       \\<Longrightarrow> I {} (foldli [] c f \\<sigma>0) \\<or>\n                         (\\<exists>S\\<subseteq>set [].\n                             S \\<noteq> {} \\<and>\n                             \\<not> c (foldli [] c f \\<sigma>0) \\<and>\n                             I S (foldli [] c f \\<sigma>0))\n 2. \\<And>a l0 \\<sigma>0.\n       \\<lbrakk>\\<And>\\<sigma>0.\n                   \\<lbrakk>I (set l0) \\<sigma>0;\n                    \\<And>\\<sigma> x S.\n                       \\<lbrakk>c \\<sigma>; x \\<in> S; I S \\<sigma>;\n                        S \\<subseteq> set l0; Ball (S - {x}) (R x)\\<rbrakk>\n                       \\<Longrightarrow> I (S - {x}) (f x \\<sigma>);\n                    distinct l0; sorted_wrt R l0\\<rbrakk>\n                   \\<Longrightarrow> I {} (foldli l0 c f \\<sigma>0) \\<or>\n                                     (\\<exists>S\\<subseteq>set l0.\n   S \\<noteq> {} \\<and>\n   \\<not> c (foldli l0 c f \\<sigma>0) \\<and> I S (foldli l0 c f \\<sigma>0));\n        I (set (a # l0)) \\<sigma>0;\n        \\<And>\\<sigma> x S.\n           \\<lbrakk>c \\<sigma>; x \\<in> S; I S \\<sigma>;\n            S \\<subseteq> set (a # l0); Ball (S - {x}) (R x)\\<rbrakk>\n           \\<Longrightarrow> I (S - {x}) (f x \\<sigma>);\n        distinct (a # l0); sorted_wrt R (a # l0)\\<rbrakk>\n       \\<Longrightarrow> I {} (foldli (a # l0) c f \\<sigma>0) \\<or>\n                         (\\<exists>S\\<subseteq>set (a # l0).\n                             S \\<noteq> {} \\<and>\n                             \\<not> c (foldli (a # l0) c f \\<sigma>0) \\<and>\n                             I S (foldli (a # l0) c f \\<sigma>0))", "thus ?case"], ["proof (prove)\nusing this:\n  I (set []) \\<sigma>0\n  \\<lbrakk>c ?\\<sigma>; ?x \\<in> ?S; I ?S ?\\<sigma>; ?S \\<subseteq> set [];\n   \\<forall>a\\<in>?S - {?x}. R ?x a\\<rbrakk>\n  \\<Longrightarrow> I (?S - {?x}) (f ?x ?\\<sigma>)\n  distinct []\n  sorted_wrt R []\n\ngoal (1 subgoal):\n 1. I {} (foldli [] c f \\<sigma>0) \\<or>\n    (\\<exists>S\\<subseteq>set [].\n        S \\<noteq> {} \\<and>\n        \\<not> c (foldli [] c f \\<sigma>0) \\<and>\n        I S (foldli [] c f \\<sigma>0))", "by simp"], ["proof (state)\nthis:\n  I {} (foldli [] c f \\<sigma>0) \\<or>\n  (\\<exists>S\\<subseteq>set [].\n      S \\<noteq> {} \\<and>\n      \\<not> c (foldli [] c f \\<sigma>0) \\<and>\n      I S (foldli [] c f \\<sigma>0))\n\ngoal (1 subgoal):\n 1. \\<And>a l0 \\<sigma>0.\n       \\<lbrakk>\\<And>\\<sigma>0.\n                   \\<lbrakk>I (set l0) \\<sigma>0;\n                    \\<And>\\<sigma> x S.\n                       \\<lbrakk>c \\<sigma>; x \\<in> S; I S \\<sigma>;\n                        S \\<subseteq> set l0; Ball (S - {x}) (R x)\\<rbrakk>\n                       \\<Longrightarrow> I (S - {x}) (f x \\<sigma>);\n                    distinct l0; sorted_wrt R l0\\<rbrakk>\n                   \\<Longrightarrow> I {} (foldli l0 c f \\<sigma>0) \\<or>\n                                     (\\<exists>S\\<subseteq>set l0.\n   S \\<noteq> {} \\<and>\n   \\<not> c (foldli l0 c f \\<sigma>0) \\<and> I S (foldli l0 c f \\<sigma>0));\n        I (set (a # l0)) \\<sigma>0;\n        \\<And>\\<sigma> x S.\n           \\<lbrakk>c \\<sigma>; x \\<in> S; I S \\<sigma>;\n            S \\<subseteq> set (a # l0); Ball (S - {x}) (R x)\\<rbrakk>\n           \\<Longrightarrow> I (S - {x}) (f x \\<sigma>);\n        distinct (a # l0); sorted_wrt R (a # l0)\\<rbrakk>\n       \\<Longrightarrow> I {} (foldli (a # l0) c f \\<sigma>0) \\<or>\n                         (\\<exists>S\\<subseteq>set (a # l0).\n                             S \\<noteq> {} \\<and>\n                             \\<not> c (foldli (a # l0) c f \\<sigma>0) \\<and>\n                             I S (foldli (a # l0) c f \\<sigma>0))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a l0 \\<sigma>0.\n       \\<lbrakk>\\<And>\\<sigma>0.\n                   \\<lbrakk>I (set l0) \\<sigma>0;\n                    \\<And>\\<sigma> x S.\n                       \\<lbrakk>c \\<sigma>; x \\<in> S; I S \\<sigma>;\n                        S \\<subseteq> set l0; Ball (S - {x}) (R x)\\<rbrakk>\n                       \\<Longrightarrow> I (S - {x}) (f x \\<sigma>);\n                    distinct l0; sorted_wrt R l0\\<rbrakk>\n                   \\<Longrightarrow> I {} (foldli l0 c f \\<sigma>0) \\<or>\n                                     (\\<exists>S\\<subseteq>set l0.\n   S \\<noteq> {} \\<and>\n   \\<not> c (foldli l0 c f \\<sigma>0) \\<and> I S (foldli l0 c f \\<sigma>0));\n        I (set (a # l0)) \\<sigma>0;\n        \\<And>\\<sigma> x S.\n           \\<lbrakk>c \\<sigma>; x \\<in> S; I S \\<sigma>;\n            S \\<subseteq> set (a # l0); Ball (S - {x}) (R x)\\<rbrakk>\n           \\<Longrightarrow> I (S - {x}) (f x \\<sigma>);\n        distinct (a # l0); sorted_wrt R (a # l0)\\<rbrakk>\n       \\<Longrightarrow> I {} (foldli (a # l0) c f \\<sigma>0) \\<or>\n                         (\\<exists>S\\<subseteq>set (a # l0).\n                             S \\<noteq> {} \\<and>\n                             \\<not> c (foldli (a # l0) c f \\<sigma>0) \\<and>\n                             I S (foldli (a # l0) c f \\<sigma>0))", "case (Cons x l0)"], ["proof (state)\nthis:\n  \\<lbrakk>I (set l0) ?\\<sigma>0.0;\n   \\<And>\\<sigma> x S.\n      \\<lbrakk>c \\<sigma>; x \\<in> S; I S \\<sigma>; S \\<subseteq> set l0;\n       \\<forall>a\\<in>S - {x}. R x a\\<rbrakk>\n      \\<Longrightarrow> I (S - {x}) (f x \\<sigma>);\n   distinct l0; sorted_wrt R l0\\<rbrakk>\n  \\<Longrightarrow> I {} (foldli l0 c f ?\\<sigma>0.0) \\<or>\n                    (\\<exists>S\\<subseteq>set l0.\n                        S \\<noteq> {} \\<and>\n                        \\<not> c (foldli l0 c f ?\\<sigma>0.0) \\<and>\n                        I S (foldli l0 c f ?\\<sigma>0.0))\n  I (set (x # l0)) \\<sigma>0\n  \\<lbrakk>c ?\\<sigma>; ?x \\<in> ?S; I ?S ?\\<sigma>;\n   ?S \\<subseteq> set (x # l0); \\<forall>a\\<in>?S - {?x}. R ?x a\\<rbrakk>\n  \\<Longrightarrow> I (?S - {?x}) (f ?x ?\\<sigma>)\n  distinct (x # l0)\n  sorted_wrt R (x # l0)\n\ngoal (1 subgoal):\n 1. \\<And>a l0 \\<sigma>0.\n       \\<lbrakk>\\<And>\\<sigma>0.\n                   \\<lbrakk>I (set l0) \\<sigma>0;\n                    \\<And>\\<sigma> x S.\n                       \\<lbrakk>c \\<sigma>; x \\<in> S; I S \\<sigma>;\n                        S \\<subseteq> set l0; Ball (S - {x}) (R x)\\<rbrakk>\n                       \\<Longrightarrow> I (S - {x}) (f x \\<sigma>);\n                    distinct l0; sorted_wrt R l0\\<rbrakk>\n                   \\<Longrightarrow> I {} (foldli l0 c f \\<sigma>0) \\<or>\n                                     (\\<exists>S\\<subseteq>set l0.\n   S \\<noteq> {} \\<and>\n   \\<not> c (foldli l0 c f \\<sigma>0) \\<and> I S (foldli l0 c f \\<sigma>0));\n        I (set (a # l0)) \\<sigma>0;\n        \\<And>\\<sigma> x S.\n           \\<lbrakk>c \\<sigma>; x \\<in> S; I S \\<sigma>;\n            S \\<subseteq> set (a # l0); Ball (S - {x}) (R x)\\<rbrakk>\n           \\<Longrightarrow> I (S - {x}) (f x \\<sigma>);\n        distinct (a # l0); sorted_wrt R (a # l0)\\<rbrakk>\n       \\<Longrightarrow> I {} (foldli (a # l0) c f \\<sigma>0) \\<or>\n                         (\\<exists>S\\<subseteq>set (a # l0).\n                             S \\<noteq> {} \\<and>\n                             \\<not> c (foldli (a # l0) c f \\<sigma>0) \\<and>\n                             I S (foldli (a # l0) c f \\<sigma>0))", "note ind_hyp = Cons(1)"], ["proof (state)\nthis:\n  \\<lbrakk>I (set l0) ?\\<sigma>0.0;\n   \\<And>\\<sigma> x S.\n      \\<lbrakk>c \\<sigma>; x \\<in> S; I S \\<sigma>; S \\<subseteq> set l0;\n       \\<forall>a\\<in>S - {x}. R x a\\<rbrakk>\n      \\<Longrightarrow> I (S - {x}) (f x \\<sigma>);\n   distinct l0; sorted_wrt R l0\\<rbrakk>\n  \\<Longrightarrow> I {} (foldli l0 c f ?\\<sigma>0.0) \\<or>\n                    (\\<exists>S\\<subseteq>set l0.\n                        S \\<noteq> {} \\<and>\n                        \\<not> c (foldli l0 c f ?\\<sigma>0.0) \\<and>\n                        I S (foldli l0 c f ?\\<sigma>0.0))\n\ngoal (1 subgoal):\n 1. \\<And>a l0 \\<sigma>0.\n       \\<lbrakk>\\<And>\\<sigma>0.\n                   \\<lbrakk>I (set l0) \\<sigma>0;\n                    \\<And>\\<sigma> x S.\n                       \\<lbrakk>c \\<sigma>; x \\<in> S; I S \\<sigma>;\n                        S \\<subseteq> set l0; Ball (S - {x}) (R x)\\<rbrakk>\n                       \\<Longrightarrow> I (S - {x}) (f x \\<sigma>);\n                    distinct l0; sorted_wrt R l0\\<rbrakk>\n                   \\<Longrightarrow> I {} (foldli l0 c f \\<sigma>0) \\<or>\n                                     (\\<exists>S\\<subseteq>set l0.\n   S \\<noteq> {} \\<and>\n   \\<not> c (foldli l0 c f \\<sigma>0) \\<and> I S (foldli l0 c f \\<sigma>0));\n        I (set (a # l0)) \\<sigma>0;\n        \\<And>\\<sigma> x S.\n           \\<lbrakk>c \\<sigma>; x \\<in> S; I S \\<sigma>;\n            S \\<subseteq> set (a # l0); Ball (S - {x}) (R x)\\<rbrakk>\n           \\<Longrightarrow> I (S - {x}) (f x \\<sigma>);\n        distinct (a # l0); sorted_wrt R (a # l0)\\<rbrakk>\n       \\<Longrightarrow> I {} (foldli (a # l0) c f \\<sigma>0) \\<or>\n                         (\\<exists>S\\<subseteq>set (a # l0).\n                             S \\<noteq> {} \\<and>\n                             \\<not> c (foldli (a # l0) c f \\<sigma>0) \\<and>\n                             I S (foldli (a # l0) c f \\<sigma>0))", "note I_x_l0 = Cons(2)"], ["proof (state)\nthis:\n  I (set (x # l0)) \\<sigma>0\n\ngoal (1 subgoal):\n 1. \\<And>a l0 \\<sigma>0.\n       \\<lbrakk>\\<And>\\<sigma>0.\n                   \\<lbrakk>I (set l0) \\<sigma>0;\n                    \\<And>\\<sigma> x S.\n                       \\<lbrakk>c \\<sigma>; x \\<in> S; I S \\<sigma>;\n                        S \\<subseteq> set l0; Ball (S - {x}) (R x)\\<rbrakk>\n                       \\<Longrightarrow> I (S - {x}) (f x \\<sigma>);\n                    distinct l0; sorted_wrt R l0\\<rbrakk>\n                   \\<Longrightarrow> I {} (foldli l0 c f \\<sigma>0) \\<or>\n                                     (\\<exists>S\\<subseteq>set l0.\n   S \\<noteq> {} \\<and>\n   \\<not> c (foldli l0 c f \\<sigma>0) \\<and> I S (foldli l0 c f \\<sigma>0));\n        I (set (a # l0)) \\<sigma>0;\n        \\<And>\\<sigma> x S.\n           \\<lbrakk>c \\<sigma>; x \\<in> S; I S \\<sigma>;\n            S \\<subseteq> set (a # l0); Ball (S - {x}) (R x)\\<rbrakk>\n           \\<Longrightarrow> I (S - {x}) (f x \\<sigma>);\n        distinct (a # l0); sorted_wrt R (a # l0)\\<rbrakk>\n       \\<Longrightarrow> I {} (foldli (a # l0) c f \\<sigma>0) \\<or>\n                         (\\<exists>S\\<subseteq>set (a # l0).\n                             S \\<noteq> {} \\<and>\n                             \\<not> c (foldli (a # l0) c f \\<sigma>0) \\<and>\n                             I S (foldli (a # l0) c f \\<sigma>0))", "note step = Cons(3)"], ["proof (state)\nthis:\n  \\<lbrakk>c ?\\<sigma>; ?x \\<in> ?S; I ?S ?\\<sigma>;\n   ?S \\<subseteq> set (x # l0); \\<forall>a\\<in>?S - {?x}. R ?x a\\<rbrakk>\n  \\<Longrightarrow> I (?S - {?x}) (f ?x ?\\<sigma>)\n\ngoal (1 subgoal):\n 1. \\<And>a l0 \\<sigma>0.\n       \\<lbrakk>\\<And>\\<sigma>0.\n                   \\<lbrakk>I (set l0) \\<sigma>0;\n                    \\<And>\\<sigma> x S.\n                       \\<lbrakk>c \\<sigma>; x \\<in> S; I S \\<sigma>;\n                        S \\<subseteq> set l0; Ball (S - {x}) (R x)\\<rbrakk>\n                       \\<Longrightarrow> I (S - {x}) (f x \\<sigma>);\n                    distinct l0; sorted_wrt R l0\\<rbrakk>\n                   \\<Longrightarrow> I {} (foldli l0 c f \\<sigma>0) \\<or>\n                                     (\\<exists>S\\<subseteq>set l0.\n   S \\<noteq> {} \\<and>\n   \\<not> c (foldli l0 c f \\<sigma>0) \\<and> I S (foldli l0 c f \\<sigma>0));\n        I (set (a # l0)) \\<sigma>0;\n        \\<And>\\<sigma> x S.\n           \\<lbrakk>c \\<sigma>; x \\<in> S; I S \\<sigma>;\n            S \\<subseteq> set (a # l0); Ball (S - {x}) (R x)\\<rbrakk>\n           \\<Longrightarrow> I (S - {x}) (f x \\<sigma>);\n        distinct (a # l0); sorted_wrt R (a # l0)\\<rbrakk>\n       \\<Longrightarrow> I {} (foldli (a # l0) c f \\<sigma>0) \\<or>\n                         (\\<exists>S\\<subseteq>set (a # l0).\n                             S \\<noteq> {} \\<and>\n                             \\<not> c (foldli (a # l0) c f \\<sigma>0) \\<and>\n                             I S (foldli (a # l0) c f \\<sigma>0))", "from Cons(4)"], ["proof (chain)\npicking this:\n  distinct (x # l0)", "have dist_l0: \"distinct l0\" and x_nin_l0: \"x \\<notin> set l0\""], ["proof (prove)\nusing this:\n  distinct (x # l0)\n\ngoal (1 subgoal):\n 1. distinct l0 &&& x \\<notin> set l0", "by simp_all"], ["proof (state)\nthis:\n  distinct l0\n  x \\<notin> set l0\n\ngoal (1 subgoal):\n 1. \\<And>a l0 \\<sigma>0.\n       \\<lbrakk>\\<And>\\<sigma>0.\n                   \\<lbrakk>I (set l0) \\<sigma>0;\n                    \\<And>\\<sigma> x S.\n                       \\<lbrakk>c \\<sigma>; x \\<in> S; I S \\<sigma>;\n                        S \\<subseteq> set l0; Ball (S - {x}) (R x)\\<rbrakk>\n                       \\<Longrightarrow> I (S - {x}) (f x \\<sigma>);\n                    distinct l0; sorted_wrt R l0\\<rbrakk>\n                   \\<Longrightarrow> I {} (foldli l0 c f \\<sigma>0) \\<or>\n                                     (\\<exists>S\\<subseteq>set l0.\n   S \\<noteq> {} \\<and>\n   \\<not> c (foldli l0 c f \\<sigma>0) \\<and> I S (foldli l0 c f \\<sigma>0));\n        I (set (a # l0)) \\<sigma>0;\n        \\<And>\\<sigma> x S.\n           \\<lbrakk>c \\<sigma>; x \\<in> S; I S \\<sigma>;\n            S \\<subseteq> set (a # l0); Ball (S - {x}) (R x)\\<rbrakk>\n           \\<Longrightarrow> I (S - {x}) (f x \\<sigma>);\n        distinct (a # l0); sorted_wrt R (a # l0)\\<rbrakk>\n       \\<Longrightarrow> I {} (foldli (a # l0) c f \\<sigma>0) \\<or>\n                         (\\<exists>S\\<subseteq>set (a # l0).\n                             S \\<noteq> {} \\<and>\n                             \\<not> c (foldli (a # l0) c f \\<sigma>0) \\<and>\n                             I S (foldli (a # l0) c f \\<sigma>0))", "from Cons(5)"], ["proof (chain)\npicking this:\n  sorted_wrt R (x # l0)", "have R_l0: \"\\<forall>y\\<in>set l0. R x y\" and \n                          sort_l0: \"sorted_wrt R l0\""], ["proof (prove)\nusing this:\n  sorted_wrt R (x # l0)\n\ngoal (1 subgoal):\n 1. \\<forall>y\\<in>set l0. R x y &&& sorted_wrt R l0", "by simp_all"], ["proof (state)\nthis:\n  \\<forall>y\\<in>set l0. R x y\n  sorted_wrt R l0\n\ngoal (1 subgoal):\n 1. \\<And>a l0 \\<sigma>0.\n       \\<lbrakk>\\<And>\\<sigma>0.\n                   \\<lbrakk>I (set l0) \\<sigma>0;\n                    \\<And>\\<sigma> x S.\n                       \\<lbrakk>c \\<sigma>; x \\<in> S; I S \\<sigma>;\n                        S \\<subseteq> set l0; Ball (S - {x}) (R x)\\<rbrakk>\n                       \\<Longrightarrow> I (S - {x}) (f x \\<sigma>);\n                    distinct l0; sorted_wrt R l0\\<rbrakk>\n                   \\<Longrightarrow> I {} (foldli l0 c f \\<sigma>0) \\<or>\n                                     (\\<exists>S\\<subseteq>set l0.\n   S \\<noteq> {} \\<and>\n   \\<not> c (foldli l0 c f \\<sigma>0) \\<and> I S (foldli l0 c f \\<sigma>0));\n        I (set (a # l0)) \\<sigma>0;\n        \\<And>\\<sigma> x S.\n           \\<lbrakk>c \\<sigma>; x \\<in> S; I S \\<sigma>;\n            S \\<subseteq> set (a # l0); Ball (S - {x}) (R x)\\<rbrakk>\n           \\<Longrightarrow> I (S - {x}) (f x \\<sigma>);\n        distinct (a # l0); sorted_wrt R (a # l0)\\<rbrakk>\n       \\<Longrightarrow> I {} (foldli (a # l0) c f \\<sigma>0) \\<or>\n                         (\\<exists>S\\<subseteq>set (a # l0).\n                             S \\<noteq> {} \\<and>\n                             \\<not> c (foldli (a # l0) c f \\<sigma>0) \\<and>\n                             I S (foldli (a # l0) c f \\<sigma>0))", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. I {} (foldli (x # l0) c f \\<sigma>0) \\<or>\n    (\\<exists>S\\<subseteq>set (x # l0).\n        S \\<noteq> {} \\<and>\n        \\<not> c (foldli (x # l0) c f \\<sigma>0) \\<and>\n        I S (foldli (x # l0) c f \\<sigma>0))", "proof (cases \"c \\<sigma>0\")"], ["proof (state)\ngoal (2 subgoals):\n 1. c \\<sigma>0 \\<Longrightarrow>\n    I {} (foldli (x # l0) c f \\<sigma>0) \\<or>\n    (\\<exists>S\\<subseteq>set (x # l0).\n        S \\<noteq> {} \\<and>\n        \\<not> c (foldli (x # l0) c f \\<sigma>0) \\<and>\n        I S (foldli (x # l0) c f \\<sigma>0))\n 2. \\<not> c \\<sigma>0 \\<Longrightarrow>\n    I {} (foldli (x # l0) c f \\<sigma>0) \\<or>\n    (\\<exists>S\\<subseteq>set (x # l0).\n        S \\<noteq> {} \\<and>\n        \\<not> c (foldli (x # l0) c f \\<sigma>0) \\<and>\n        I S (foldli (x # l0) c f \\<sigma>0))", "case False"], ["proof (state)\nthis:\n  \\<not> c \\<sigma>0\n\ngoal (2 subgoals):\n 1. c \\<sigma>0 \\<Longrightarrow>\n    I {} (foldli (x # l0) c f \\<sigma>0) \\<or>\n    (\\<exists>S\\<subseteq>set (x # l0).\n        S \\<noteq> {} \\<and>\n        \\<not> c (foldli (x # l0) c f \\<sigma>0) \\<and>\n        I S (foldli (x # l0) c f \\<sigma>0))\n 2. \\<not> c \\<sigma>0 \\<Longrightarrow>\n    I {} (foldli (x # l0) c f \\<sigma>0) \\<or>\n    (\\<exists>S\\<subseteq>set (x # l0).\n        S \\<noteq> {} \\<and>\n        \\<not> c (foldli (x # l0) c f \\<sigma>0) \\<and>\n        I S (foldli (x # l0) c f \\<sigma>0))", "with I_x_l0"], ["proof (chain)\npicking this:\n  I (set (x # l0)) \\<sigma>0\n  \\<not> c \\<sigma>0", "show ?thesis"], ["proof (prove)\nusing this:\n  I (set (x # l0)) \\<sigma>0\n  \\<not> c \\<sigma>0\n\ngoal (1 subgoal):\n 1. I {} (foldli (x # l0) c f \\<sigma>0) \\<or>\n    (\\<exists>S\\<subseteq>set (x # l0).\n        S \\<noteq> {} \\<and>\n        \\<not> c (foldli (x # l0) c f \\<sigma>0) \\<and>\n        I S (foldli (x # l0) c f \\<sigma>0))", "apply (rule_tac disjI2)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>I (set (x # l0)) \\<sigma>0; \\<not> c \\<sigma>0\\<rbrakk>\n    \\<Longrightarrow> \\<exists>S\\<subseteq>set (x # l0).\n                         S \\<noteq> {} \\<and>\n                         \\<not> c (foldli (x # l0) c f \\<sigma>0) \\<and>\n                         I S (foldli (x # l0) c f \\<sigma>0)", "apply (rule_tac exI[where x=\"set (x # l0)\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>I (set (x # l0)) \\<sigma>0; \\<not> c \\<sigma>0\\<rbrakk>\n    \\<Longrightarrow> set (x # l0) \\<subseteq> set (x # l0) \\<and>\n                      set (x # l0) \\<noteq> {} \\<and>\n                      \\<not> c (foldli (x # l0) c f \\<sigma>0) \\<and>\n                      I (set (x # l0)) (foldli (x # l0) c f \\<sigma>0)", "apply (simp)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  I {} (foldli (x # l0) c f \\<sigma>0) \\<or>\n  (\\<exists>S\\<subseteq>set (x # l0).\n      S \\<noteq> {} \\<and>\n      \\<not> c (foldli (x # l0) c f \\<sigma>0) \\<and>\n      I S (foldli (x # l0) c f \\<sigma>0))\n\ngoal (1 subgoal):\n 1. c \\<sigma>0 \\<Longrightarrow>\n    I {} (foldli (x # l0) c f \\<sigma>0) \\<or>\n    (\\<exists>S\\<subseteq>set (x # l0).\n        S \\<noteq> {} \\<and>\n        \\<not> c (foldli (x # l0) c f \\<sigma>0) \\<and>\n        I S (foldli (x # l0) c f \\<sigma>0))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. c \\<sigma>0 \\<Longrightarrow>\n    I {} (foldli (x # l0) c f \\<sigma>0) \\<or>\n    (\\<exists>S\\<subseteq>set (x # l0).\n        S \\<noteq> {} \\<and>\n        \\<not> c (foldli (x # l0) c f \\<sigma>0) \\<and>\n        I S (foldli (x # l0) c f \\<sigma>0))", "case True"], ["proof (state)\nthis:\n  c \\<sigma>0\n\ngoal (1 subgoal):\n 1. c \\<sigma>0 \\<Longrightarrow>\n    I {} (foldli (x # l0) c f \\<sigma>0) \\<or>\n    (\\<exists>S\\<subseteq>set (x # l0).\n        S \\<noteq> {} \\<and>\n        \\<not> c (foldli (x # l0) c f \\<sigma>0) \\<and>\n        I S (foldli (x # l0) c f \\<sigma>0))", "note c_\\<sigma>0 = this"], ["proof (state)\nthis:\n  c \\<sigma>0\n\ngoal (1 subgoal):\n 1. c \\<sigma>0 \\<Longrightarrow>\n    I {} (foldli (x # l0) c f \\<sigma>0) \\<or>\n    (\\<exists>S\\<subseteq>set (x # l0).\n        S \\<noteq> {} \\<and>\n        \\<not> c (foldli (x # l0) c f \\<sigma>0) \\<and>\n        I S (foldli (x # l0) c f \\<sigma>0))", "from step[of \\<sigma>0 x \"set (x # l0)\"] I_x_l0 R_l0 c_\\<sigma>0 x_nin_l0"], ["proof (chain)\npicking this:\n  \\<lbrakk>c \\<sigma>0; x \\<in> set (x # l0); I (set (x # l0)) \\<sigma>0;\n   set (x # l0) \\<subseteq> set (x # l0);\n   \\<forall>a\\<in>set (x # l0) - {x}. R x a\\<rbrakk>\n  \\<Longrightarrow> I (set (x # l0) - {x}) (f x \\<sigma>0)\n  I (set (x # l0)) \\<sigma>0\n  \\<forall>y\\<in>set l0. R x y\n  c \\<sigma>0\n  x \\<notin> set l0", "have step': \"I (set l0) (f x \\<sigma>0)\""], ["proof (prove)\nusing this:\n  \\<lbrakk>c \\<sigma>0; x \\<in> set (x # l0); I (set (x # l0)) \\<sigma>0;\n   set (x # l0) \\<subseteq> set (x # l0);\n   \\<forall>a\\<in>set (x # l0) - {x}. R x a\\<rbrakk>\n  \\<Longrightarrow> I (set (x # l0) - {x}) (f x \\<sigma>0)\n  I (set (x # l0)) \\<sigma>0\n  \\<forall>y\\<in>set l0. R x y\n  c \\<sigma>0\n  x \\<notin> set l0\n\ngoal (1 subgoal):\n 1. I (set l0) (f x \\<sigma>0)", "by (simp_all add: Ball_def)"], ["proof (state)\nthis:\n  I (set l0) (f x \\<sigma>0)\n\ngoal (1 subgoal):\n 1. c \\<sigma>0 \\<Longrightarrow>\n    I {} (foldli (x # l0) c f \\<sigma>0) \\<or>\n    (\\<exists>S\\<subseteq>set (x # l0).\n        S \\<noteq> {} \\<and>\n        \\<not> c (foldli (x # l0) c f \\<sigma>0) \\<and>\n        I S (foldli (x # l0) c f \\<sigma>0))", "from ind_hyp [OF step' step dist_l0 sort_l0]"], ["proof (chain)\npicking this:\n  \\<lbrakk>\\<And>\\<sigma> x S.\n              \\<lbrakk>c \\<sigma>; x \\<in> S; I S \\<sigma>;\n               S \\<subseteq> set l0; \\<forall>a\\<in>S - {x}. R x a\\<rbrakk>\n              \\<Longrightarrow> c \\<sigma>;\n   \\<And>\\<sigma> x S.\n      \\<lbrakk>c \\<sigma>; x \\<in> S; I S \\<sigma>; S \\<subseteq> set l0;\n       \\<forall>a\\<in>S - {x}. R x a\\<rbrakk>\n      \\<Longrightarrow> x \\<in> S;\n   \\<And>\\<sigma> x S.\n      \\<lbrakk>c \\<sigma>; x \\<in> S; I S \\<sigma>; S \\<subseteq> set l0;\n       \\<forall>a\\<in>S - {x}. R x a\\<rbrakk>\n      \\<Longrightarrow> I S \\<sigma>;\n   \\<And>\\<sigma> xa S.\n      \\<lbrakk>c \\<sigma>; xa \\<in> S; I S \\<sigma>; S \\<subseteq> set l0;\n       \\<forall>a\\<in>S - {xa}. R xa a\\<rbrakk>\n      \\<Longrightarrow> S \\<subseteq> set (x # l0);\n   \\<And>\\<sigma> x S.\n      \\<lbrakk>c \\<sigma>; x \\<in> S; I S \\<sigma>; S \\<subseteq> set l0;\n       \\<forall>a\\<in>S - {x}. R x a\\<rbrakk>\n      \\<Longrightarrow> \\<forall>a\\<in>S - {x}. R x a\\<rbrakk>\n  \\<Longrightarrow> I {} (foldli l0 c f (f x \\<sigma>0)) \\<or>\n                    (\\<exists>S\\<subseteq>set l0.\n                        S \\<noteq> {} \\<and>\n                        \\<not> c (foldli l0 c f (f x \\<sigma>0)) \\<and>\n                        I S (foldli l0 c f (f x \\<sigma>0)))", "have \"I {} (foldli l0 c f (f x \\<sigma>0)) \\<or> \n                (\\<exists>S. S \\<subseteq> set l0 \\<and> S \\<noteq> {} \\<and>\n                \\<not> c (foldli l0 c f (f x \\<sigma>0)) \\<and> I S (foldli l0 c f (f x \\<sigma>0)))\""], ["proof (prove)\nusing this:\n  \\<lbrakk>\\<And>\\<sigma> x S.\n              \\<lbrakk>c \\<sigma>; x \\<in> S; I S \\<sigma>;\n               S \\<subseteq> set l0; \\<forall>a\\<in>S - {x}. R x a\\<rbrakk>\n              \\<Longrightarrow> c \\<sigma>;\n   \\<And>\\<sigma> x S.\n      \\<lbrakk>c \\<sigma>; x \\<in> S; I S \\<sigma>; S \\<subseteq> set l0;\n       \\<forall>a\\<in>S - {x}. R x a\\<rbrakk>\n      \\<Longrightarrow> x \\<in> S;\n   \\<And>\\<sigma> x S.\n      \\<lbrakk>c \\<sigma>; x \\<in> S; I S \\<sigma>; S \\<subseteq> set l0;\n       \\<forall>a\\<in>S - {x}. R x a\\<rbrakk>\n      \\<Longrightarrow> I S \\<sigma>;\n   \\<And>\\<sigma> xa S.\n      \\<lbrakk>c \\<sigma>; xa \\<in> S; I S \\<sigma>; S \\<subseteq> set l0;\n       \\<forall>a\\<in>S - {xa}. R xa a\\<rbrakk>\n      \\<Longrightarrow> S \\<subseteq> set (x # l0);\n   \\<And>\\<sigma> x S.\n      \\<lbrakk>c \\<sigma>; x \\<in> S; I S \\<sigma>; S \\<subseteq> set l0;\n       \\<forall>a\\<in>S - {x}. R x a\\<rbrakk>\n      \\<Longrightarrow> \\<forall>a\\<in>S - {x}. R x a\\<rbrakk>\n  \\<Longrightarrow> I {} (foldli l0 c f (f x \\<sigma>0)) \\<or>\n                    (\\<exists>S\\<subseteq>set l0.\n                        S \\<noteq> {} \\<and>\n                        \\<not> c (foldli l0 c f (f x \\<sigma>0)) \\<and>\n                        I S (foldli l0 c f (f x \\<sigma>0)))\n\ngoal (1 subgoal):\n 1. I {} (foldli l0 c f (f x \\<sigma>0)) \\<or>\n    (\\<exists>S\\<subseteq>set l0.\n        S \\<noteq> {} \\<and>\n        \\<not> c (foldli l0 c f (f x \\<sigma>0)) \\<and>\n        I S (foldli l0 c f (f x \\<sigma>0)))", "by (fastforce)"], ["proof (state)\nthis:\n  I {} (foldli l0 c f (f x \\<sigma>0)) \\<or>\n  (\\<exists>S\\<subseteq>set l0.\n      S \\<noteq> {} \\<and>\n      \\<not> c (foldli l0 c f (f x \\<sigma>0)) \\<and>\n      I S (foldli l0 c f (f x \\<sigma>0)))\n\ngoal (1 subgoal):\n 1. c \\<sigma>0 \\<Longrightarrow>\n    I {} (foldli (x # l0) c f \\<sigma>0) \\<or>\n    (\\<exists>S\\<subseteq>set (x # l0).\n        S \\<noteq> {} \\<and>\n        \\<not> c (foldli (x # l0) c f \\<sigma>0) \\<and>\n        I S (foldli (x # l0) c f \\<sigma>0))", "thus ?thesis"], ["proof (prove)\nusing this:\n  I {} (foldli l0 c f (f x \\<sigma>0)) \\<or>\n  (\\<exists>S\\<subseteq>set l0.\n      S \\<noteq> {} \\<and>\n      \\<not> c (foldli l0 c f (f x \\<sigma>0)) \\<and>\n      I S (foldli l0 c f (f x \\<sigma>0)))\n\ngoal (1 subgoal):\n 1. I {} (foldli (x # l0) c f \\<sigma>0) \\<or>\n    (\\<exists>S\\<subseteq>set (x # l0).\n        S \\<noteq> {} \\<and>\n        \\<not> c (foldli (x # l0) c f \\<sigma>0) \\<and>\n        I S (foldli (x # l0) c f \\<sigma>0))", "by (simp add: c_\\<sigma>0 subset_iff) metis"], ["proof (state)\nthis:\n  I {} (foldli (x # l0) c f \\<sigma>0) \\<or>\n  (\\<exists>S\\<subseteq>set (x # l0).\n      S \\<noteq> {} \\<and>\n      \\<not> c (foldli (x # l0) c f \\<sigma>0) \\<and>\n      I S (foldli (x # l0) c f \\<sigma>0))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  I {} (foldli (x # l0) c f \\<sigma>0) \\<or>\n  (\\<exists>S\\<subseteq>set (x # l0).\n      S \\<noteq> {} \\<and>\n      \\<not> c (foldli (x # l0) c f \\<sigma>0) \\<and>\n      I S (foldli (x # l0) c f \\<sigma>0))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  I {} (iti c f \\<sigma>0) \\<or>\n  (\\<exists>S\\<subseteq>S0.\n      S \\<noteq> {} \\<and>\n      \\<not> c (iti c f \\<sigma>0) \\<and> I S (iti c f \\<sigma>0))\n\ngoal (1 subgoal):\n 1. P (iti c f \\<sigma>0)", "with C1 C2"], ["proof (chain)\npicking this:\n  I {} (iti c f \\<sigma>0) \\<Longrightarrow> P\n  \\<lbrakk>?S \\<subseteq> S0; ?S \\<noteq> {}; \\<not> c (iti c f \\<sigma>0);\n   I ?S (iti c f \\<sigma>0)\\<rbrakk>\n  \\<Longrightarrow> P\n  I {} (iti c f \\<sigma>0) \\<or>\n  (\\<exists>S\\<subseteq>S0.\n      S \\<noteq> {} \\<and>\n      \\<not> c (iti c f \\<sigma>0) \\<and> I S (iti c f \\<sigma>0))", "have \"P\""], ["proof (prove)\nusing this:\n  I {} (iti c f \\<sigma>0) \\<Longrightarrow> P\n  \\<lbrakk>?S \\<subseteq> S0; ?S \\<noteq> {}; \\<not> c (iti c f \\<sigma>0);\n   I ?S (iti c f \\<sigma>0)\\<rbrakk>\n  \\<Longrightarrow> P\n  I {} (iti c f \\<sigma>0) \\<or>\n  (\\<exists>S\\<subseteq>S0.\n      S \\<noteq> {} \\<and>\n      \\<not> c (iti c f \\<sigma>0) \\<and> I S (iti c f \\<sigma>0))\n\ngoal (1 subgoal):\n 1. P", "by blast"], ["proof (state)\nthis:\n  P\n\ngoal (1 subgoal):\n 1. P (iti c f \\<sigma>0)", "}"], ["proof (state)\nthis:\n  \\<lbrakk>?Ia2 S0 ?\\<sigma>0a2;\n   \\<And>S \\<sigma> x.\n      \\<lbrakk>c \\<sigma>; x \\<in> S; ?Ia2 S \\<sigma>; S \\<subseteq> S0;\n       \\<forall>y\\<in>S - {x}. R x y\\<rbrakk>\n      \\<Longrightarrow> ?Ia2 (S - {x}) (?fa2 x \\<sigma>);\n   ?Ia2 {} (iti c ?fa2 ?\\<sigma>0a2) \\<Longrightarrow> ?Pa2;\n   \\<And>S.\n      \\<lbrakk>S \\<subseteq> S0; S \\<noteq> {};\n       \\<not> c (iti c ?fa2 ?\\<sigma>0a2);\n       ?Ia2 S (iti c ?fa2 ?\\<sigma>0a2)\\<rbrakk>\n      \\<Longrightarrow> ?Pa2\\<rbrakk>\n  \\<Longrightarrow> ?Pa2\n\ngoal (1 subgoal):\n 1. P (iti c f \\<sigma>0)", "note aux = this"], ["proof (state)\nthis:\n  \\<lbrakk>?Ia2 S0 ?\\<sigma>0a2;\n   \\<And>S \\<sigma> x.\n      \\<lbrakk>c \\<sigma>; x \\<in> S; ?Ia2 S \\<sigma>; S \\<subseteq> S0;\n       \\<forall>y\\<in>S - {x}. R x y\\<rbrakk>\n      \\<Longrightarrow> ?Ia2 (S - {x}) (?fa2 x \\<sigma>);\n   ?Ia2 {} (iti c ?fa2 ?\\<sigma>0a2) \\<Longrightarrow> ?Pa2;\n   \\<And>S.\n      \\<lbrakk>S \\<subseteq> S0; S \\<noteq> {};\n       \\<not> c (iti c ?fa2 ?\\<sigma>0a2);\n       ?Ia2 S (iti c ?fa2 ?\\<sigma>0a2)\\<rbrakk>\n      \\<Longrightarrow> ?Pa2\\<rbrakk>\n  \\<Longrightarrow> ?Pa2\n\ngoal (1 subgoal):\n 1. P (iti c f \\<sigma>0)", "from assms"], ["proof (chain)\npicking this:\n  I S0 \\<sigma>0\n  \\<lbrakk>c ?\\<sigma>; ?x \\<in> ?S; I ?S ?\\<sigma>; ?S \\<subseteq> S0;\n   \\<forall>y\\<in>?S - {?x}. R ?x y; \\<forall>y\\<in>S0 - ?S. R y ?x\\<rbrakk>\n  \\<Longrightarrow> I (?S - {?x}) (f ?x ?\\<sigma>)\n  I {} ?\\<sigma> \\<Longrightarrow> P ?\\<sigma>\n  \\<lbrakk>?S \\<subseteq> S0; ?S \\<noteq> {}; \\<not> c ?\\<sigma>;\n   I ?S ?\\<sigma>; \\<forall>x\\<in>?S. \\<forall>y\\<in>S0 - ?S. R y x\\<rbrakk>\n  \\<Longrightarrow> P ?\\<sigma>", "show ?thesis"], ["proof (prove)\nusing this:\n  I S0 \\<sigma>0\n  \\<lbrakk>c ?\\<sigma>; ?x \\<in> ?S; I ?S ?\\<sigma>; ?S \\<subseteq> S0;\n   \\<forall>y\\<in>?S - {?x}. R ?x y; \\<forall>y\\<in>S0 - ?S. R y ?x\\<rbrakk>\n  \\<Longrightarrow> I (?S - {?x}) (f ?x ?\\<sigma>)\n  I {} ?\\<sigma> \\<Longrightarrow> P ?\\<sigma>\n  \\<lbrakk>?S \\<subseteq> S0; ?S \\<noteq> {}; \\<not> c ?\\<sigma>;\n   I ?S ?\\<sigma>; \\<forall>x\\<in>?S. \\<forall>y\\<in>S0 - ?S. R y x\\<rbrakk>\n  \\<Longrightarrow> P ?\\<sigma>\n\ngoal (1 subgoal):\n 1. P (iti c f \\<sigma>0)", "apply (rule_tac aux [of \"\\<lambda>S \\<sigma>. I S \\<sigma> \\<and> (\\<forall>x\\<in>S. \\<forall>y\\<in>S0-S. R y x)\" \\<sigma>0 f])"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<lbrakk>I S0 \\<sigma>0;\n     \\<And>\\<sigma> x S.\n        \\<lbrakk>c \\<sigma>; x \\<in> S; I S \\<sigma>; S \\<subseteq> S0;\n         \\<forall>y\\<in>S - {x}. R x y;\n         \\<forall>y\\<in>S0 - S. R y x\\<rbrakk>\n        \\<Longrightarrow> I (S - {x}) (f x \\<sigma>);\n     \\<And>\\<sigma>. I {} \\<sigma> \\<Longrightarrow> P \\<sigma>;\n     \\<And>S \\<sigma>.\n        \\<lbrakk>S \\<subseteq> S0; S \\<noteq> {}; \\<not> c \\<sigma>;\n         I S \\<sigma>;\n         \\<forall>x\\<in>S. \\<forall>y\\<in>S0 - S. R y x\\<rbrakk>\n        \\<Longrightarrow> P \\<sigma>\\<rbrakk>\n    \\<Longrightarrow> I S0 \\<sigma>0 \\<and>\n                      (\\<forall>x\\<in>S0. \\<forall>y\\<in>S0 - S0. R y x)\n 2. \\<And>S \\<sigma> x.\n       \\<lbrakk>I S0 \\<sigma>0;\n        \\<And>\\<sigma> x S.\n           \\<lbrakk>c \\<sigma>; x \\<in> S; I S \\<sigma>; S \\<subseteq> S0;\n            \\<forall>y\\<in>S - {x}. R x y;\n            \\<forall>y\\<in>S0 - S. R y x\\<rbrakk>\n           \\<Longrightarrow> I (S - {x}) (f x \\<sigma>);\n        \\<And>\\<sigma>. I {} \\<sigma> \\<Longrightarrow> P \\<sigma>;\n        \\<And>S \\<sigma>.\n           \\<lbrakk>S \\<subseteq> S0; S \\<noteq> {}; \\<not> c \\<sigma>;\n            I S \\<sigma>;\n            \\<forall>x\\<in>S. \\<forall>y\\<in>S0 - S. R y x\\<rbrakk>\n           \\<Longrightarrow> P \\<sigma>;\n        c \\<sigma>; x \\<in> S;\n        I S \\<sigma> \\<and>\n        (\\<forall>x\\<in>S. \\<forall>y\\<in>S0 - S. R y x);\n        S \\<subseteq> S0; \\<forall>y\\<in>S - {x}. R x y\\<rbrakk>\n       \\<Longrightarrow> I (S - {x}) (f x \\<sigma>) \\<and>\n                         (\\<forall>xa\\<in>S - {x}.\n                             \\<forall>y\\<in>S0 - (S - {x}). R y xa)\n 3. \\<lbrakk>I S0 \\<sigma>0;\n     \\<And>\\<sigma> x S.\n        \\<lbrakk>c \\<sigma>; x \\<in> S; I S \\<sigma>; S \\<subseteq> S0;\n         \\<forall>y\\<in>S - {x}. R x y;\n         \\<forall>y\\<in>S0 - S. R y x\\<rbrakk>\n        \\<Longrightarrow> I (S - {x}) (f x \\<sigma>);\n     \\<And>\\<sigma>. I {} \\<sigma> \\<Longrightarrow> P \\<sigma>;\n     \\<And>S \\<sigma>.\n        \\<lbrakk>S \\<subseteq> S0; S \\<noteq> {}; \\<not> c \\<sigma>;\n         I S \\<sigma>;\n         \\<forall>x\\<in>S. \\<forall>y\\<in>S0 - S. R y x\\<rbrakk>\n        \\<Longrightarrow> P \\<sigma>;\n     I {} (iti c f \\<sigma>0) \\<and>\n     (\\<forall>x\\<in>{}. \\<forall>y\\<in>S0 - {}. R y x)\\<rbrakk>\n    \\<Longrightarrow> P (iti c f \\<sigma>0)\n 4. \\<And>S.\n       \\<lbrakk>I S0 \\<sigma>0;\n        \\<And>\\<sigma> x S.\n           \\<lbrakk>c \\<sigma>; x \\<in> S; I S \\<sigma>; S \\<subseteq> S0;\n            \\<forall>y\\<in>S - {x}. R x y;\n            \\<forall>y\\<in>S0 - S. R y x\\<rbrakk>\n           \\<Longrightarrow> I (S - {x}) (f x \\<sigma>);\n        \\<And>\\<sigma>. I {} \\<sigma> \\<Longrightarrow> P \\<sigma>;\n        \\<And>S \\<sigma>.\n           \\<lbrakk>S \\<subseteq> S0; S \\<noteq> {}; \\<not> c \\<sigma>;\n            I S \\<sigma>;\n            \\<forall>x\\<in>S. \\<forall>y\\<in>S0 - S. R y x\\<rbrakk>\n           \\<Longrightarrow> P \\<sigma>;\n        S \\<subseteq> S0; S \\<noteq> {}; \\<not> c (iti c f \\<sigma>0);\n        I S (iti c f \\<sigma>0) \\<and>\n        (\\<forall>x\\<in>S. \\<forall>y\\<in>S0 - S. R y x)\\<rbrakk>\n       \\<Longrightarrow> P (iti c f \\<sigma>0)", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  P (iti c f \\<sigma>0)\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>Instead of removing elements one by one from the invariant, adding them is sometimes more natural.\\<close>"], ["", "lemma iteratei_rule_insert_P:\n  assumes pre :\n      \"I {} \\<sigma>0\"\n      \"\\<And>S \\<sigma> x. \\<lbrakk> c \\<sigma>; x \\<in> S0 - S; I S \\<sigma>; S \\<subseteq> S0; \\<forall>y\\<in>(S0 - S) - {x}. R x y;\n                 \\<forall>y\\<in>S. R y x\\<rbrakk> \n                  \\<Longrightarrow> I (insert x S) (f x \\<sigma>)\"\n      \"\\<And>\\<sigma>. I S0 \\<sigma> \\<Longrightarrow> P \\<sigma>\"\n      \"\\<And>\\<sigma> S. \\<lbrakk> S \\<subseteq> S0; S \\<noteq> S0; \n              \\<not> (c \\<sigma>); I S \\<sigma>; \\<forall>x\\<in>S0-S. \\<forall>y\\<in>S. R y x \\<rbrakk> \\<Longrightarrow> P \\<sigma>\"\n  shows \"P (iti c f \\<sigma>0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P (iti c f \\<sigma>0)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. P (iti c f \\<sigma>0)", "let ?I' = \"\\<lambda>S \\<sigma>. I (S0 - S) \\<sigma>\""], ["proof (state)\ngoal (1 subgoal):\n 1. P (iti c f \\<sigma>0)", "have pre1: \n      \"!!\\<sigma> S. \\<lbrakk> S \\<subseteq> S0; S \\<noteq> {}; \\<not> (c \\<sigma>); ?I' S \\<sigma>;\n             \\<forall>x\\<in>S. \\<forall>y\\<in>S0-S. R y x\\<rbrakk> \\<Longrightarrow> P \\<sigma>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<sigma> S.\n       \\<lbrakk>S \\<subseteq> S0; S \\<noteq> {}; \\<not> c \\<sigma>;\n        I (S0 - S) \\<sigma>;\n        \\<forall>x\\<in>S. \\<forall>y\\<in>S0 - S. R y x\\<rbrakk>\n       \\<Longrightarrow> P \\<sigma>", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>\\<sigma> S.\n       \\<lbrakk>S \\<subseteq> S0; S \\<noteq> {}; \\<not> c \\<sigma>;\n        I (S0 - S) \\<sigma>;\n        \\<forall>x\\<in>S. \\<forall>y\\<in>S0 - S. R y x\\<rbrakk>\n       \\<Longrightarrow> P \\<sigma>", "fix S \\<sigma>"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>\\<sigma> S.\n       \\<lbrakk>S \\<subseteq> S0; S \\<noteq> {}; \\<not> c \\<sigma>;\n        I (S0 - S) \\<sigma>;\n        \\<forall>x\\<in>S. \\<forall>y\\<in>S0 - S. R y x\\<rbrakk>\n       \\<Longrightarrow> P \\<sigma>", "assume AA: \n        \"S \\<subseteq> S0\" \"S \\<noteq> {}\"\n        \"\\<not> (c \\<sigma>)\" \n        \"?I' S \\<sigma>\" \"\\<forall>x\\<in>S. \\<forall>y\\<in>S0-S. R y x\""], ["proof (state)\nthis:\n  S \\<subseteq> S0\n  S \\<noteq> {}\n  \\<not> c \\<sigma>\n  I (S0 - S) \\<sigma>\n  \\<forall>x\\<in>S. \\<forall>y\\<in>S0 - S. R y x\n\ngoal (1 subgoal):\n 1. \\<And>\\<sigma> S.\n       \\<lbrakk>S \\<subseteq> S0; S \\<noteq> {}; \\<not> c \\<sigma>;\n        I (S0 - S) \\<sigma>;\n        \\<forall>x\\<in>S. \\<forall>y\\<in>S0 - S. R y x\\<rbrakk>\n       \\<Longrightarrow> P \\<sigma>", "with pre(4) [of \"S0 - S\"]"], ["proof (chain)\npicking this:\n  \\<lbrakk>S0 - S \\<subseteq> S0; S0 - S \\<noteq> S0; \\<not> c ?\\<sigma>;\n   I (S0 - S) ?\\<sigma>;\n   \\<forall>x\\<in>S0 - (S0 - S). \\<forall>y\\<in>S0 - S. R y x\\<rbrakk>\n  \\<Longrightarrow> P ?\\<sigma>\n  S \\<subseteq> S0\n  S \\<noteq> {}\n  \\<not> c \\<sigma>\n  I (S0 - S) \\<sigma>\n  \\<forall>x\\<in>S. \\<forall>y\\<in>S0 - S. R y x", "show \"P \\<sigma>\""], ["proof (prove)\nusing this:\n  \\<lbrakk>S0 - S \\<subseteq> S0; S0 - S \\<noteq> S0; \\<not> c ?\\<sigma>;\n   I (S0 - S) ?\\<sigma>;\n   \\<forall>x\\<in>S0 - (S0 - S). \\<forall>y\\<in>S0 - S. R y x\\<rbrakk>\n  \\<Longrightarrow> P ?\\<sigma>\n  S \\<subseteq> S0\n  S \\<noteq> {}\n  \\<not> c \\<sigma>\n  I (S0 - S) \\<sigma>\n  \\<forall>x\\<in>S. \\<forall>y\\<in>S0 - S. R y x\n\ngoal (1 subgoal):\n 1. P \\<sigma>", "by auto"], ["proof (state)\nthis:\n  P \\<sigma>\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<lbrakk>?S \\<subseteq> S0; ?S \\<noteq> {}; \\<not> c ?\\<sigma>;\n   I (S0 - ?S) ?\\<sigma>;\n   \\<forall>x\\<in>?S. \\<forall>y\\<in>S0 - ?S. R y x\\<rbrakk>\n  \\<Longrightarrow> P ?\\<sigma>\n\ngoal (1 subgoal):\n 1. P (iti c f \\<sigma>0)", "have pre2 :\"\\<And>x S \\<sigma>. \\<lbrakk>c \\<sigma>; x \\<in> S; S \\<subseteq> S0; ?I' S \\<sigma>; \\<forall>y\\<in>S - {x}. R x y; \\<forall>y\\<in>S0-S. R y x \\<rbrakk> \\<Longrightarrow> ?I' (S - {x}) (f x \\<sigma>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x S \\<sigma>.\n       \\<lbrakk>c \\<sigma>; x \\<in> S; S \\<subseteq> S0;\n        I (S0 - S) \\<sigma>; \\<forall>y\\<in>S - {x}. R x y;\n        \\<forall>y\\<in>S0 - S. R y x\\<rbrakk>\n       \\<Longrightarrow> I (S0 - (S - {x})) (f x \\<sigma>)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x S \\<sigma>.\n       \\<lbrakk>c \\<sigma>; x \\<in> S; S \\<subseteq> S0;\n        I (S0 - S) \\<sigma>; \\<forall>y\\<in>S - {x}. R x y;\n        \\<forall>y\\<in>S0 - S. R y x\\<rbrakk>\n       \\<Longrightarrow> I (S0 - (S - {x})) (f x \\<sigma>)", "fix x S \\<sigma>"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x S \\<sigma>.\n       \\<lbrakk>c \\<sigma>; x \\<in> S; S \\<subseteq> S0;\n        I (S0 - S) \\<sigma>; \\<forall>y\\<in>S - {x}. R x y;\n        \\<forall>y\\<in>S0 - S. R y x\\<rbrakk>\n       \\<Longrightarrow> I (S0 - (S - {x})) (f x \\<sigma>)", "assume AA : \"c \\<sigma>\" \"x \\<in> S\" \"S \\<subseteq> S0\" \"?I' S \\<sigma>\" \"\\<forall>y\\<in>S - {x}. R x y\" \"\\<forall>y\\<in>S0 - S. R y x\""], ["proof (state)\nthis:\n  c \\<sigma>\n  x \\<in> S\n  S \\<subseteq> S0\n  I (S0 - S) \\<sigma>\n  \\<forall>y\\<in>S - {x}. R x y\n  \\<forall>y\\<in>S0 - S. R y x\n\ngoal (1 subgoal):\n 1. \\<And>x S \\<sigma>.\n       \\<lbrakk>c \\<sigma>; x \\<in> S; S \\<subseteq> S0;\n        I (S0 - S) \\<sigma>; \\<forall>y\\<in>S - {x}. R x y;\n        \\<forall>y\\<in>S0 - S. R y x\\<rbrakk>\n       \\<Longrightarrow> I (S0 - (S - {x})) (f x \\<sigma>)", "from AA(2) AA(3)"], ["proof (chain)\npicking this:\n  x \\<in> S\n  S \\<subseteq> S0", "have \"S0 - (S - {x}) = insert x (S0 - S)\" \"S0 - (S0 - S) = S\""], ["proof (prove)\nusing this:\n  x \\<in> S\n  S \\<subseteq> S0\n\ngoal (1 subgoal):\n 1. S0 - (S - {x}) = insert x (S0 - S) &&& S0 - (S0 - S) = S", "by auto"], ["proof (state)\nthis:\n  S0 - (S - {x}) = insert x (S0 - S)\n  S0 - (S0 - S) = S\n\ngoal (1 subgoal):\n 1. \\<And>x S \\<sigma>.\n       \\<lbrakk>c \\<sigma>; x \\<in> S; S \\<subseteq> S0;\n        I (S0 - S) \\<sigma>; \\<forall>y\\<in>S - {x}. R x y;\n        \\<forall>y\\<in>S0 - S. R y x\\<rbrakk>\n       \\<Longrightarrow> I (S0 - (S - {x})) (f x \\<sigma>)", "moreover"], ["proof (state)\nthis:\n  S0 - (S - {x}) = insert x (S0 - S)\n  S0 - (S0 - S) = S\n\ngoal (1 subgoal):\n 1. \\<And>x S \\<sigma>.\n       \\<lbrakk>c \\<sigma>; x \\<in> S; S \\<subseteq> S0;\n        I (S0 - S) \\<sigma>; \\<forall>y\\<in>S - {x}. R x y;\n        \\<forall>y\\<in>S0 - S. R y x\\<rbrakk>\n       \\<Longrightarrow> I (S0 - (S - {x})) (f x \\<sigma>)", "note pre(2) [of \\<sigma> x \"S0 - S\"] AA"], ["proof (state)\nthis:\n  \\<lbrakk>c \\<sigma>; x \\<in> S0 - (S0 - S); I (S0 - S) \\<sigma>;\n   S0 - S \\<subseteq> S0; \\<forall>y\\<in>S0 - (S0 - S) - {x}. R x y;\n   \\<forall>y\\<in>S0 - S. R y x\\<rbrakk>\n  \\<Longrightarrow> I (insert x (S0 - S)) (f x \\<sigma>)\n  c \\<sigma>\n  x \\<in> S\n  S \\<subseteq> S0\n  I (S0 - S) \\<sigma>\n  \\<forall>y\\<in>S - {x}. R x y\n  \\<forall>y\\<in>S0 - S. R y x\n\ngoal (1 subgoal):\n 1. \\<And>x S \\<sigma>.\n       \\<lbrakk>c \\<sigma>; x \\<in> S; S \\<subseteq> S0;\n        I (S0 - S) \\<sigma>; \\<forall>y\\<in>S - {x}. R x y;\n        \\<forall>y\\<in>S0 - S. R y x\\<rbrakk>\n       \\<Longrightarrow> I (S0 - (S - {x})) (f x \\<sigma>)", "ultimately"], ["proof (chain)\npicking this:\n  S0 - (S - {x}) = insert x (S0 - S)\n  S0 - (S0 - S) = S\n  \\<lbrakk>c \\<sigma>; x \\<in> S0 - (S0 - S); I (S0 - S) \\<sigma>;\n   S0 - S \\<subseteq> S0; \\<forall>y\\<in>S0 - (S0 - S) - {x}. R x y;\n   \\<forall>y\\<in>S0 - S. R y x\\<rbrakk>\n  \\<Longrightarrow> I (insert x (S0 - S)) (f x \\<sigma>)\n  c \\<sigma>\n  x \\<in> S\n  S \\<subseteq> S0\n  I (S0 - S) \\<sigma>\n  \\<forall>y\\<in>S - {x}. R x y\n  \\<forall>y\\<in>S0 - S. R y x", "show \"?I' (S - {x}) (f x \\<sigma>)\""], ["proof (prove)\nusing this:\n  S0 - (S - {x}) = insert x (S0 - S)\n  S0 - (S0 - S) = S\n  \\<lbrakk>c \\<sigma>; x \\<in> S0 - (S0 - S); I (S0 - S) \\<sigma>;\n   S0 - S \\<subseteq> S0; \\<forall>y\\<in>S0 - (S0 - S) - {x}. R x y;\n   \\<forall>y\\<in>S0 - S. R y x\\<rbrakk>\n  \\<Longrightarrow> I (insert x (S0 - S)) (f x \\<sigma>)\n  c \\<sigma>\n  x \\<in> S\n  S \\<subseteq> S0\n  I (S0 - S) \\<sigma>\n  \\<forall>y\\<in>S - {x}. R x y\n  \\<forall>y\\<in>S0 - S. R y x\n\ngoal (1 subgoal):\n 1. I (S0 - (S - {x})) (f x \\<sigma>)", "by auto"], ["proof (state)\nthis:\n  I (S0 - (S - {x})) (f x \\<sigma>)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<lbrakk>c ?\\<sigma>; ?x \\<in> ?S; ?S \\<subseteq> S0;\n   I (S0 - ?S) ?\\<sigma>; \\<forall>y\\<in>?S - {?x}. R ?x y;\n   \\<forall>y\\<in>S0 - ?S. R y ?x\\<rbrakk>\n  \\<Longrightarrow> I (S0 - (?S - {?x})) (f ?x ?\\<sigma>)\n\ngoal (1 subgoal):\n 1. P (iti c f \\<sigma>0)", "show \"P (iti c f \\<sigma>0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P (iti c f \\<sigma>0)", "apply (rule iteratei_rule_P [of ?I' \\<sigma>0 c f P])"], ["proof (prove)\ngoal (4 subgoals):\n 1. I (S0 - S0) \\<sigma>0\n 2. \\<And>S \\<sigma> x.\n       \\<lbrakk>c \\<sigma>; x \\<in> S; I (S0 - S) \\<sigma>;\n        S \\<subseteq> S0; \\<forall>y\\<in>S - {x}. R x y;\n        \\<forall>y\\<in>S0 - S. R y x\\<rbrakk>\n       \\<Longrightarrow> I (S0 - (S - {x})) (f x \\<sigma>)\n 3. \\<And>\\<sigma>. I (S0 - {}) \\<sigma> \\<Longrightarrow> P \\<sigma>\n 4. \\<And>\\<sigma> S.\n       \\<lbrakk>S \\<subseteq> S0; S \\<noteq> {}; \\<not> c \\<sigma>;\n        I (S0 - S) \\<sigma>;\n        \\<forall>x\\<in>S. \\<forall>y\\<in>S0 - S. R y x\\<rbrakk>\n       \\<Longrightarrow> P \\<sigma>", "apply (simp add: pre)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>S \\<sigma> x.\n       \\<lbrakk>c \\<sigma>; x \\<in> S; I (S0 - S) \\<sigma>;\n        S \\<subseteq> S0; \\<forall>y\\<in>S - {x}. R x y;\n        \\<forall>y\\<in>S0 - S. R y x\\<rbrakk>\n       \\<Longrightarrow> I (S0 - (S - {x})) (f x \\<sigma>)\n 2. \\<And>\\<sigma>. I (S0 - {}) \\<sigma> \\<Longrightarrow> P \\<sigma>\n 3. \\<And>\\<sigma> S.\n       \\<lbrakk>S \\<subseteq> S0; S \\<noteq> {}; \\<not> c \\<sigma>;\n        I (S0 - S) \\<sigma>;\n        \\<forall>x\\<in>S. \\<forall>y\\<in>S0 - S. R y x\\<rbrakk>\n       \\<Longrightarrow> P \\<sigma>", "apply (rule pre2)"], ["proof (prove)\ngoal (8 subgoals):\n 1. \\<And>S \\<sigma> x.\n       \\<lbrakk>c \\<sigma>; x \\<in> S; I (S0 - S) \\<sigma>;\n        S \\<subseteq> S0; \\<forall>y\\<in>S - {x}. R x y;\n        \\<forall>y\\<in>S0 - S. R y x\\<rbrakk>\n       \\<Longrightarrow> c \\<sigma>\n 2. \\<And>S \\<sigma> x.\n       \\<lbrakk>c \\<sigma>; x \\<in> S; I (S0 - S) \\<sigma>;\n        S \\<subseteq> S0; \\<forall>y\\<in>S - {x}. R x y;\n        \\<forall>y\\<in>S0 - S. R y x\\<rbrakk>\n       \\<Longrightarrow> x \\<in> S\n 3. \\<And>S \\<sigma> x.\n       \\<lbrakk>c \\<sigma>; x \\<in> S; I (S0 - S) \\<sigma>;\n        S \\<subseteq> S0; \\<forall>y\\<in>S - {x}. R x y;\n        \\<forall>y\\<in>S0 - S. R y x\\<rbrakk>\n       \\<Longrightarrow> S \\<subseteq> S0\n 4. \\<And>S \\<sigma> x.\n       \\<lbrakk>c \\<sigma>; x \\<in> S; I (S0 - S) \\<sigma>;\n        S \\<subseteq> S0; \\<forall>y\\<in>S - {x}. R x y;\n        \\<forall>y\\<in>S0 - S. R y x\\<rbrakk>\n       \\<Longrightarrow> I (S0 - S) \\<sigma>\n 5. \\<And>S \\<sigma> x.\n       \\<lbrakk>c \\<sigma>; x \\<in> S; I (S0 - S) \\<sigma>;\n        S \\<subseteq> S0; \\<forall>y\\<in>S - {x}. R x y;\n        \\<forall>y\\<in>S0 - S. R y x\\<rbrakk>\n       \\<Longrightarrow> \\<forall>y\\<in>S - {x}. R x y\n 6. \\<And>S \\<sigma> x.\n       \\<lbrakk>c \\<sigma>; x \\<in> S; I (S0 - S) \\<sigma>;\n        S \\<subseteq> S0; \\<forall>y\\<in>S - {x}. R x y;\n        \\<forall>y\\<in>S0 - S. R y x\\<rbrakk>\n       \\<Longrightarrow> \\<forall>y\\<in>S0 - S. R y x\n 7. \\<And>\\<sigma>. I (S0 - {}) \\<sigma> \\<Longrightarrow> P \\<sigma>\n 8. \\<And>\\<sigma> S.\n       \\<lbrakk>S \\<subseteq> S0; S \\<noteq> {}; \\<not> c \\<sigma>;\n        I (S0 - S) \\<sigma>;\n        \\<forall>x\\<in>S. \\<forall>y\\<in>S0 - S. R y x\\<rbrakk>\n       \\<Longrightarrow> P \\<sigma>", "apply simp_all"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>\\<sigma>. I S0 \\<sigma> \\<Longrightarrow> P \\<sigma>\n 2. \\<And>\\<sigma> S.\n       \\<lbrakk>S \\<subseteq> S0; S \\<noteq> {}; \\<not> c \\<sigma>;\n        I (S0 - S) \\<sigma>;\n        \\<forall>x\\<in>S. \\<forall>y\\<in>S0 - S. R y x\\<rbrakk>\n       \\<Longrightarrow> P \\<sigma>", "apply (simp add: pre(3))"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<sigma> S.\n       \\<lbrakk>S \\<subseteq> S0; S \\<noteq> {}; \\<not> c \\<sigma>;\n        I (S0 - S) \\<sigma>;\n        \\<forall>x\\<in>S. \\<forall>y\\<in>S0 - S. R y x\\<rbrakk>\n       \\<Longrightarrow> P \\<sigma>", "apply (simp add: pre1)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  P (iti c f \\<sigma>0)\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>Show that iti without interruption is related to fold\\<close>"], ["", "lemma iti_fold: \n  assumes lc_f: \"comp_fun_commute f\"\n    shows \"iti (\\<lambda>_. True) f \\<sigma>0 = Finite_Set.fold f \\<sigma>0 S0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. iti (\\<lambda>_. True) f \\<sigma>0 = Finite_Set.fold f \\<sigma>0 S0", "proof (rule iteratei_rule_insert_P [where I = \"\\<lambda>X \\<sigma>'. \\<sigma>' = Finite_Set.fold f \\<sigma>0 X\"])"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<sigma>0 = Finite_Set.fold f \\<sigma>0 {}\n 2. \\<And>S \\<sigma> x.\n       \\<lbrakk>True; x \\<in> S0 - S;\n        \\<sigma> = Finite_Set.fold f \\<sigma>0 S; S \\<subseteq> S0;\n        \\<forall>y\\<in>S0 - S - {x}. R x y; \\<forall>y\\<in>S. R y x\\<rbrakk>\n       \\<Longrightarrow> f x \\<sigma> =\n                         Finite_Set.fold f \\<sigma>0 (insert x S)\n 3. \\<And>\\<sigma>.\n       \\<sigma> = Finite_Set.fold f \\<sigma>0 S0 \\<Longrightarrow>\n       \\<sigma> = Finite_Set.fold f \\<sigma>0 S0\n 4. \\<And>\\<sigma> S.\n       \\<lbrakk>S \\<subseteq> S0; S \\<noteq> S0; \\<not> True;\n        \\<sigma> = Finite_Set.fold f \\<sigma>0 S;\n        \\<forall>x\\<in>S0 - S. \\<forall>y\\<in>S. R y x\\<rbrakk>\n       \\<Longrightarrow> \\<sigma> = Finite_Set.fold f \\<sigma>0 S0", "fix S \\<sigma> x"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<sigma>0 = Finite_Set.fold f \\<sigma>0 {}\n 2. \\<And>S \\<sigma> x.\n       \\<lbrakk>True; x \\<in> S0 - S;\n        \\<sigma> = Finite_Set.fold f \\<sigma>0 S; S \\<subseteq> S0;\n        \\<forall>y\\<in>S0 - S - {x}. R x y; \\<forall>y\\<in>S. R y x\\<rbrakk>\n       \\<Longrightarrow> f x \\<sigma> =\n                         Finite_Set.fold f \\<sigma>0 (insert x S)\n 3. \\<And>\\<sigma>.\n       \\<sigma> = Finite_Set.fold f \\<sigma>0 S0 \\<Longrightarrow>\n       \\<sigma> = Finite_Set.fold f \\<sigma>0 S0\n 4. \\<And>\\<sigma> S.\n       \\<lbrakk>S \\<subseteq> S0; S \\<noteq> S0; \\<not> True;\n        \\<sigma> = Finite_Set.fold f \\<sigma>0 S;\n        \\<forall>x\\<in>S0 - S. \\<forall>y\\<in>S. R y x\\<rbrakk>\n       \\<Longrightarrow> \\<sigma> = Finite_Set.fold f \\<sigma>0 S0", "assume \"x \\<in> S0 - S\" \"S \\<subseteq> S0\" and \\<sigma>_eq: \"\\<sigma> = Finite_Set.fold f \\<sigma>0 S\""], ["proof (state)\nthis:\n  x \\<in> S0 - S\n  S \\<subseteq> S0\n  \\<sigma> = Finite_Set.fold f \\<sigma>0 S\n\ngoal (4 subgoals):\n 1. \\<sigma>0 = Finite_Set.fold f \\<sigma>0 {}\n 2. \\<And>S \\<sigma> x.\n       \\<lbrakk>True; x \\<in> S0 - S;\n        \\<sigma> = Finite_Set.fold f \\<sigma>0 S; S \\<subseteq> S0;\n        \\<forall>y\\<in>S0 - S - {x}. R x y; \\<forall>y\\<in>S. R y x\\<rbrakk>\n       \\<Longrightarrow> f x \\<sigma> =\n                         Finite_Set.fold f \\<sigma>0 (insert x S)\n 3. \\<And>\\<sigma>.\n       \\<sigma> = Finite_Set.fold f \\<sigma>0 S0 \\<Longrightarrow>\n       \\<sigma> = Finite_Set.fold f \\<sigma>0 S0\n 4. \\<And>\\<sigma> S.\n       \\<lbrakk>S \\<subseteq> S0; S \\<noteq> S0; \\<not> True;\n        \\<sigma> = Finite_Set.fold f \\<sigma>0 S;\n        \\<forall>x\\<in>S0 - S. \\<forall>y\\<in>S. R y x\\<rbrakk>\n       \\<Longrightarrow> \\<sigma> = Finite_Set.fold f \\<sigma>0 S0", "from finite_S0 \\<open>S \\<subseteq> S0\\<close>"], ["proof (chain)\npicking this:\n  finite S0\n  S \\<subseteq> S0", "have fin_S: \"finite S\""], ["proof (prove)\nusing this:\n  finite S0\n  S \\<subseteq> S0\n\ngoal (1 subgoal):\n 1. finite S", "by (metis finite_subset)"], ["proof (state)\nthis:\n  finite S\n\ngoal (4 subgoals):\n 1. \\<sigma>0 = Finite_Set.fold f \\<sigma>0 {}\n 2. \\<And>S \\<sigma> x.\n       \\<lbrakk>True; x \\<in> S0 - S;\n        \\<sigma> = Finite_Set.fold f \\<sigma>0 S; S \\<subseteq> S0;\n        \\<forall>y\\<in>S0 - S - {x}. R x y; \\<forall>y\\<in>S. R y x\\<rbrakk>\n       \\<Longrightarrow> f x \\<sigma> =\n                         Finite_Set.fold f \\<sigma>0 (insert x S)\n 3. \\<And>\\<sigma>.\n       \\<sigma> = Finite_Set.fold f \\<sigma>0 S0 \\<Longrightarrow>\n       \\<sigma> = Finite_Set.fold f \\<sigma>0 S0\n 4. \\<And>\\<sigma> S.\n       \\<lbrakk>S \\<subseteq> S0; S \\<noteq> S0; \\<not> True;\n        \\<sigma> = Finite_Set.fold f \\<sigma>0 S;\n        \\<forall>x\\<in>S0 - S. \\<forall>y\\<in>S. R y x\\<rbrakk>\n       \\<Longrightarrow> \\<sigma> = Finite_Set.fold f \\<sigma>0 S0", "from \\<open>x \\<in> S0 - S\\<close>"], ["proof (chain)\npicking this:\n  x \\<in> S0 - S", "have x_nin_S: \"x \\<notin> S\""], ["proof (prove)\nusing this:\n  x \\<in> S0 - S\n\ngoal (1 subgoal):\n 1. x \\<notin> S", "by simp"], ["proof (state)\nthis:\n  x \\<notin> S\n\ngoal (4 subgoals):\n 1. \\<sigma>0 = Finite_Set.fold f \\<sigma>0 {}\n 2. \\<And>S \\<sigma> x.\n       \\<lbrakk>True; x \\<in> S0 - S;\n        \\<sigma> = Finite_Set.fold f \\<sigma>0 S; S \\<subseteq> S0;\n        \\<forall>y\\<in>S0 - S - {x}. R x y; \\<forall>y\\<in>S. R y x\\<rbrakk>\n       \\<Longrightarrow> f x \\<sigma> =\n                         Finite_Set.fold f \\<sigma>0 (insert x S)\n 3. \\<And>\\<sigma>.\n       \\<sigma> = Finite_Set.fold f \\<sigma>0 S0 \\<Longrightarrow>\n       \\<sigma> = Finite_Set.fold f \\<sigma>0 S0\n 4. \\<And>\\<sigma> S.\n       \\<lbrakk>S \\<subseteq> S0; S \\<noteq> S0; \\<not> True;\n        \\<sigma> = Finite_Set.fold f \\<sigma>0 S;\n        \\<forall>x\\<in>S0 - S. \\<forall>y\\<in>S. R y x\\<rbrakk>\n       \\<Longrightarrow> \\<sigma> = Finite_Set.fold f \\<sigma>0 S0", "note fold_eq = comp_fun_commute.fold_insert [OF lc_f fin_S x_nin_S]"], ["proof (state)\nthis:\n  Finite_Set.fold f ?z (insert x S) = f x (Finite_Set.fold f ?z S)\n\ngoal (4 subgoals):\n 1. \\<sigma>0 = Finite_Set.fold f \\<sigma>0 {}\n 2. \\<And>S \\<sigma> x.\n       \\<lbrakk>True; x \\<in> S0 - S;\n        \\<sigma> = Finite_Set.fold f \\<sigma>0 S; S \\<subseteq> S0;\n        \\<forall>y\\<in>S0 - S - {x}. R x y; \\<forall>y\\<in>S. R y x\\<rbrakk>\n       \\<Longrightarrow> f x \\<sigma> =\n                         Finite_Set.fold f \\<sigma>0 (insert x S)\n 3. \\<And>\\<sigma>.\n       \\<sigma> = Finite_Set.fold f \\<sigma>0 S0 \\<Longrightarrow>\n       \\<sigma> = Finite_Set.fold f \\<sigma>0 S0\n 4. \\<And>\\<sigma> S.\n       \\<lbrakk>S \\<subseteq> S0; S \\<noteq> S0; \\<not> True;\n        \\<sigma> = Finite_Set.fold f \\<sigma>0 S;\n        \\<forall>x\\<in>S0 - S. \\<forall>y\\<in>S. R y x\\<rbrakk>\n       \\<Longrightarrow> \\<sigma> = Finite_Set.fold f \\<sigma>0 S0", "show \"f x \\<sigma> = Finite_Set.fold f \\<sigma>0 (insert x S)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f x \\<sigma> = Finite_Set.fold f \\<sigma>0 (insert x S)", "by (simp add: fold_eq \\<sigma>_eq)"], ["proof (state)\nthis:\n  f x \\<sigma> = Finite_Set.fold f \\<sigma>0 (insert x S)\n\ngoal (3 subgoals):\n 1. \\<sigma>0 = Finite_Set.fold f \\<sigma>0 {}\n 2. \\<And>\\<sigma>.\n       \\<sigma> = Finite_Set.fold f \\<sigma>0 S0 \\<Longrightarrow>\n       \\<sigma> = Finite_Set.fold f \\<sigma>0 S0\n 3. \\<And>\\<sigma> S.\n       \\<lbrakk>S \\<subseteq> S0; S \\<noteq> S0; \\<not> True;\n        \\<sigma> = Finite_Set.fold f \\<sigma>0 S;\n        \\<forall>x\\<in>S0 - S. \\<forall>y\\<in>S. R y x\\<rbrakk>\n       \\<Longrightarrow> \\<sigma> = Finite_Set.fold f \\<sigma>0 S0", "qed simp_all"], ["", "end"], ["", "subsection \\<open>Iterators over Maps\\<close>"], ["", "type_synonym ('k,'v,'\\<sigma>) map_iterator = \"('k\\<times>'v,'\\<sigma>) set_iterator\""], ["", "text \\<open>Iterator over the key-value pairs of a finite map are called iterators over maps.\\<close>"], ["", "abbreviation \"map_iterator_genord it m R \\<equiv> set_iterator_genord it (map_to_set m) R\""], ["", "subsection \\<open>Unordered Iterators\\<close>"], ["", "text \\<open>Often one does not care about the order in which the elements are processed. \n        Therefore, the selection function can be set to not impose any further restrictings.\n        This leads to considerably simpler theorems.\\<close>"], ["", "definition \"set_iterator it S0 \\<equiv> set_iterator_genord it S0 (\\<lambda>_ _. True)\""], ["", "abbreviation \"map_iterator it m \\<equiv> set_iterator it (map_to_set m)\""], ["", "lemma set_iterator_intro :\n    \"set_iterator_genord it S0 R \\<Longrightarrow> set_iterator it S0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set_iterator_genord it S0 R \\<Longrightarrow> set_iterator it S0", "unfolding set_iterator_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. set_iterator_genord it S0 R \\<Longrightarrow>\n    set_iterator_genord it S0 (\\<lambda>_ _. True)", "apply (rule set_iterator_genord.set_iterator_weaken_R [where R = R])"], ["proof (prove)\ngoal (2 subgoals):\n 1. set_iterator_genord it S0 R \\<Longrightarrow>\n    set_iterator_genord it S0 R\n 2. \\<And>x y.\n       \\<lbrakk>set_iterator_genord it S0 R; x \\<in> S0; y \\<in> S0;\n        R x y\\<rbrakk>\n       \\<Longrightarrow> True", "apply simp_all"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma set_iterator_no_cond_rule_P:\n\"\\<lbrakk> set_iterator it S0;\n   I S0 \\<sigma>0;\n   !!S \\<sigma> x. \\<lbrakk> x \\<in> S; I S \\<sigma>; S \\<subseteq> S0 \\<rbrakk> \\<Longrightarrow> I (S - {x}) (f x \\<sigma>);\n   !!\\<sigma>. I {} \\<sigma> \\<Longrightarrow> P \\<sigma>\n \\<rbrakk> \\<Longrightarrow> P (it (\\<lambda>_. True) f \\<sigma>0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>set_iterator it S0; I S0 \\<sigma>0;\n     \\<And>S \\<sigma> x.\n        \\<lbrakk>x \\<in> S; I S \\<sigma>; S \\<subseteq> S0\\<rbrakk>\n        \\<Longrightarrow> I (S - {x}) (f x \\<sigma>);\n     \\<And>\\<sigma>. I {} \\<sigma> \\<Longrightarrow> P \\<sigma>\\<rbrakk>\n    \\<Longrightarrow> P (it (\\<lambda>_. True) f \\<sigma>0)", "unfolding set_iterator_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>set_iterator_genord it S0 (\\<lambda>_ _. True); I S0 \\<sigma>0;\n     \\<And>S \\<sigma> x.\n        \\<lbrakk>x \\<in> S; I S \\<sigma>; S \\<subseteq> S0\\<rbrakk>\n        \\<Longrightarrow> I (S - {x}) (f x \\<sigma>);\n     \\<And>\\<sigma>. I {} \\<sigma> \\<Longrightarrow> P \\<sigma>\\<rbrakk>\n    \\<Longrightarrow> P (it (\\<lambda>_. True) f \\<sigma>0)", "using set_iterator_genord.iteratei_rule_P [of it S0 \"\\<lambda>_ _. True\" I \\<sigma>0 \"\\<lambda>_. True\" f P]"], ["proof (prove)\nusing this:\n  \\<lbrakk>set_iterator_genord it S0 (\\<lambda>_ _. True); I S0 \\<sigma>0;\n   \\<And>S \\<sigma> x.\n      \\<lbrakk>True; x \\<in> S; I S \\<sigma>; S \\<subseteq> S0;\n       \\<forall>y\\<in>S - {x}. True; \\<forall>y\\<in>S0 - S. True\\<rbrakk>\n      \\<Longrightarrow> I (S - {x}) (f x \\<sigma>);\n   \\<And>\\<sigma>. I {} \\<sigma> \\<Longrightarrow> P \\<sigma>;\n   \\<And>\\<sigma> S.\n      \\<lbrakk>S \\<subseteq> S0; S \\<noteq> {}; \\<not> True; I S \\<sigma>;\n       \\<forall>x\\<in>S. \\<forall>y\\<in>S0 - S. True\\<rbrakk>\n      \\<Longrightarrow> P \\<sigma>\\<rbrakk>\n  \\<Longrightarrow> P (it (\\<lambda>_. True) f \\<sigma>0)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>set_iterator_genord it S0 (\\<lambda>_ _. True); I S0 \\<sigma>0;\n     \\<And>S \\<sigma> x.\n        \\<lbrakk>x \\<in> S; I S \\<sigma>; S \\<subseteq> S0\\<rbrakk>\n        \\<Longrightarrow> I (S - {x}) (f x \\<sigma>);\n     \\<And>\\<sigma>. I {} \\<sigma> \\<Longrightarrow> P \\<sigma>\\<rbrakk>\n    \\<Longrightarrow> P (it (\\<lambda>_. True) f \\<sigma>0)", "by simp"], ["", "lemma set_iterator_no_cond_rule_insert_P:\n\"\\<lbrakk> set_iterator it S0;\n   I {} \\<sigma>0;\n   !!S \\<sigma> x. \\<lbrakk> x \\<in> S0 - S; I S \\<sigma>; S \\<subseteq> S0 \\<rbrakk>  \\<Longrightarrow> I (insert x S) (f x \\<sigma>);\n   !!\\<sigma>. I S0 \\<sigma> \\<Longrightarrow> P \\<sigma>\n \\<rbrakk> \\<Longrightarrow> P (it (\\<lambda>_. True) f \\<sigma>0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>set_iterator it S0; I {} \\<sigma>0;\n     \\<And>S \\<sigma> x.\n        \\<lbrakk>x \\<in> S0 - S; I S \\<sigma>; S \\<subseteq> S0\\<rbrakk>\n        \\<Longrightarrow> I (insert x S) (f x \\<sigma>);\n     \\<And>\\<sigma>. I S0 \\<sigma> \\<Longrightarrow> P \\<sigma>\\<rbrakk>\n    \\<Longrightarrow> P (it (\\<lambda>_. True) f \\<sigma>0)", "unfolding set_iterator_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>set_iterator_genord it S0 (\\<lambda>_ _. True); I {} \\<sigma>0;\n     \\<And>S \\<sigma> x.\n        \\<lbrakk>x \\<in> S0 - S; I S \\<sigma>; S \\<subseteq> S0\\<rbrakk>\n        \\<Longrightarrow> I (insert x S) (f x \\<sigma>);\n     \\<And>\\<sigma>. I S0 \\<sigma> \\<Longrightarrow> P \\<sigma>\\<rbrakk>\n    \\<Longrightarrow> P (it (\\<lambda>_. True) f \\<sigma>0)", "using set_iterator_genord.iteratei_rule_insert_P [of it S0 \"\\<lambda>_ _. True\" I \\<sigma>0 \"\\<lambda>_. True\" f P]"], ["proof (prove)\nusing this:\n  \\<lbrakk>set_iterator_genord it S0 (\\<lambda>_ _. True); I {} \\<sigma>0;\n   \\<And>S \\<sigma> x.\n      \\<lbrakk>True; x \\<in> S0 - S; I S \\<sigma>; S \\<subseteq> S0;\n       \\<forall>y\\<in>S0 - S - {x}. True; \\<forall>y\\<in>S. True\\<rbrakk>\n      \\<Longrightarrow> I (insert x S) (f x \\<sigma>);\n   \\<And>\\<sigma>. I S0 \\<sigma> \\<Longrightarrow> P \\<sigma>;\n   \\<And>\\<sigma> S.\n      \\<lbrakk>S \\<subseteq> S0; S \\<noteq> S0; \\<not> True; I S \\<sigma>;\n       \\<forall>x\\<in>S0 - S. \\<forall>y\\<in>S. True\\<rbrakk>\n      \\<Longrightarrow> P \\<sigma>\\<rbrakk>\n  \\<Longrightarrow> P (it (\\<lambda>_. True) f \\<sigma>0)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>set_iterator_genord it S0 (\\<lambda>_ _. True); I {} \\<sigma>0;\n     \\<And>S \\<sigma> x.\n        \\<lbrakk>x \\<in> S0 - S; I S \\<sigma>; S \\<subseteq> S0\\<rbrakk>\n        \\<Longrightarrow> I (insert x S) (f x \\<sigma>);\n     \\<And>\\<sigma>. I S0 \\<sigma> \\<Longrightarrow> P \\<sigma>\\<rbrakk>\n    \\<Longrightarrow> P (it (\\<lambda>_. True) f \\<sigma>0)", "by simp"], ["", "lemma set_iterator_rule_P:\n\"\\<lbrakk> set_iterator it S0;\n   I S0 \\<sigma>0;\n   !!S \\<sigma> x. \\<lbrakk> c \\<sigma>; x \\<in> S; I S \\<sigma>; S \\<subseteq> S0 \\<rbrakk> \\<Longrightarrow> I (S - {x}) (f x \\<sigma>);\n   !!\\<sigma>. I {} \\<sigma> \\<Longrightarrow> P \\<sigma>;\n   !!\\<sigma> S. S \\<subseteq> S0 \\<Longrightarrow> S \\<noteq> {} \\<Longrightarrow> \\<not> c \\<sigma> \\<Longrightarrow> I S \\<sigma> \\<Longrightarrow> P \\<sigma>\n \\<rbrakk> \\<Longrightarrow> P (it c f \\<sigma>0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>set_iterator it S0; I S0 \\<sigma>0;\n     \\<And>S \\<sigma> x.\n        \\<lbrakk>c \\<sigma>; x \\<in> S; I S \\<sigma>;\n         S \\<subseteq> S0\\<rbrakk>\n        \\<Longrightarrow> I (S - {x}) (f x \\<sigma>);\n     \\<And>\\<sigma>. I {} \\<sigma> \\<Longrightarrow> P \\<sigma>;\n     \\<And>\\<sigma> S.\n        \\<lbrakk>S \\<subseteq> S0; S \\<noteq> {}; \\<not> c \\<sigma>;\n         I S \\<sigma>\\<rbrakk>\n        \\<Longrightarrow> P \\<sigma>\\<rbrakk>\n    \\<Longrightarrow> P (it c f \\<sigma>0)", "unfolding set_iterator_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>set_iterator_genord it S0 (\\<lambda>_ _. True); I S0 \\<sigma>0;\n     \\<And>S \\<sigma> x.\n        \\<lbrakk>c \\<sigma>; x \\<in> S; I S \\<sigma>;\n         S \\<subseteq> S0\\<rbrakk>\n        \\<Longrightarrow> I (S - {x}) (f x \\<sigma>);\n     \\<And>\\<sigma>. I {} \\<sigma> \\<Longrightarrow> P \\<sigma>;\n     \\<And>\\<sigma> S.\n        \\<lbrakk>S \\<subseteq> S0; S \\<noteq> {}; \\<not> c \\<sigma>;\n         I S \\<sigma>\\<rbrakk>\n        \\<Longrightarrow> P \\<sigma>\\<rbrakk>\n    \\<Longrightarrow> P (it c f \\<sigma>0)", "using set_iterator_genord.iteratei_rule_P [of it S0 \"\\<lambda>_ _. True\" I \\<sigma>0 c f P]"], ["proof (prove)\nusing this:\n  \\<lbrakk>set_iterator_genord it S0 (\\<lambda>_ _. True); I S0 \\<sigma>0;\n   \\<And>S \\<sigma> x.\n      \\<lbrakk>c \\<sigma>; x \\<in> S; I S \\<sigma>; S \\<subseteq> S0;\n       \\<forall>y\\<in>S - {x}. True; \\<forall>y\\<in>S0 - S. True\\<rbrakk>\n      \\<Longrightarrow> I (S - {x}) (f x \\<sigma>);\n   \\<And>\\<sigma>. I {} \\<sigma> \\<Longrightarrow> P \\<sigma>;\n   \\<And>\\<sigma> S.\n      \\<lbrakk>S \\<subseteq> S0; S \\<noteq> {}; \\<not> c \\<sigma>;\n       I S \\<sigma>; \\<forall>x\\<in>S. \\<forall>y\\<in>S0 - S. True\\<rbrakk>\n      \\<Longrightarrow> P \\<sigma>\\<rbrakk>\n  \\<Longrightarrow> P (it c f \\<sigma>0)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>set_iterator_genord it S0 (\\<lambda>_ _. True); I S0 \\<sigma>0;\n     \\<And>S \\<sigma> x.\n        \\<lbrakk>c \\<sigma>; x \\<in> S; I S \\<sigma>;\n         S \\<subseteq> S0\\<rbrakk>\n        \\<Longrightarrow> I (S - {x}) (f x \\<sigma>);\n     \\<And>\\<sigma>. I {} \\<sigma> \\<Longrightarrow> P \\<sigma>;\n     \\<And>\\<sigma> S.\n        \\<lbrakk>S \\<subseteq> S0; S \\<noteq> {}; \\<not> c \\<sigma>;\n         I S \\<sigma>\\<rbrakk>\n        \\<Longrightarrow> P \\<sigma>\\<rbrakk>\n    \\<Longrightarrow> P (it c f \\<sigma>0)", "by simp"], ["", "lemma set_iterator_rule_insert_P:\n\"\\<lbrakk> set_iterator it S0;\n   I {} \\<sigma>0;\n   !!S \\<sigma> x. \\<lbrakk> c \\<sigma>; x \\<in> S0 - S; I S \\<sigma>; S \\<subseteq> S0 \\<rbrakk>  \\<Longrightarrow> I (insert x S) (f x \\<sigma>);\n   !!\\<sigma>. I S0 \\<sigma> \\<Longrightarrow> P \\<sigma>;\n   !!\\<sigma> S. S \\<subseteq> S0 \\<Longrightarrow> S \\<noteq> S0 \\<Longrightarrow> \\<not> c \\<sigma> \\<Longrightarrow> I S \\<sigma> \\<Longrightarrow> P \\<sigma>\n \\<rbrakk> \\<Longrightarrow> P (it c f \\<sigma>0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>set_iterator it S0; I {} \\<sigma>0;\n     \\<And>S \\<sigma> x.\n        \\<lbrakk>c \\<sigma>; x \\<in> S0 - S; I S \\<sigma>;\n         S \\<subseteq> S0\\<rbrakk>\n        \\<Longrightarrow> I (insert x S) (f x \\<sigma>);\n     \\<And>\\<sigma>. I S0 \\<sigma> \\<Longrightarrow> P \\<sigma>;\n     \\<And>\\<sigma> S.\n        \\<lbrakk>S \\<subseteq> S0; S \\<noteq> S0; \\<not> c \\<sigma>;\n         I S \\<sigma>\\<rbrakk>\n        \\<Longrightarrow> P \\<sigma>\\<rbrakk>\n    \\<Longrightarrow> P (it c f \\<sigma>0)", "unfolding set_iterator_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>set_iterator_genord it S0 (\\<lambda>_ _. True); I {} \\<sigma>0;\n     \\<And>S \\<sigma> x.\n        \\<lbrakk>c \\<sigma>; x \\<in> S0 - S; I S \\<sigma>;\n         S \\<subseteq> S0\\<rbrakk>\n        \\<Longrightarrow> I (insert x S) (f x \\<sigma>);\n     \\<And>\\<sigma>. I S0 \\<sigma> \\<Longrightarrow> P \\<sigma>;\n     \\<And>\\<sigma> S.\n        \\<lbrakk>S \\<subseteq> S0; S \\<noteq> S0; \\<not> c \\<sigma>;\n         I S \\<sigma>\\<rbrakk>\n        \\<Longrightarrow> P \\<sigma>\\<rbrakk>\n    \\<Longrightarrow> P (it c f \\<sigma>0)", "using set_iterator_genord.iteratei_rule_insert_P [of it S0 \"\\<lambda>_ _. True\" I \\<sigma>0 c f P]"], ["proof (prove)\nusing this:\n  \\<lbrakk>set_iterator_genord it S0 (\\<lambda>_ _. True); I {} \\<sigma>0;\n   \\<And>S \\<sigma> x.\n      \\<lbrakk>c \\<sigma>; x \\<in> S0 - S; I S \\<sigma>; S \\<subseteq> S0;\n       \\<forall>y\\<in>S0 - S - {x}. True; \\<forall>y\\<in>S. True\\<rbrakk>\n      \\<Longrightarrow> I (insert x S) (f x \\<sigma>);\n   \\<And>\\<sigma>. I S0 \\<sigma> \\<Longrightarrow> P \\<sigma>;\n   \\<And>\\<sigma> S.\n      \\<lbrakk>S \\<subseteq> S0; S \\<noteq> S0; \\<not> c \\<sigma>;\n       I S \\<sigma>; \\<forall>x\\<in>S0 - S. \\<forall>y\\<in>S. True\\<rbrakk>\n      \\<Longrightarrow> P \\<sigma>\\<rbrakk>\n  \\<Longrightarrow> P (it c f \\<sigma>0)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>set_iterator_genord it S0 (\\<lambda>_ _. True); I {} \\<sigma>0;\n     \\<And>S \\<sigma> x.\n        \\<lbrakk>c \\<sigma>; x \\<in> S0 - S; I S \\<sigma>;\n         S \\<subseteq> S0\\<rbrakk>\n        \\<Longrightarrow> I (insert x S) (f x \\<sigma>);\n     \\<And>\\<sigma>. I S0 \\<sigma> \\<Longrightarrow> P \\<sigma>;\n     \\<And>\\<sigma> S.\n        \\<lbrakk>S \\<subseteq> S0; S \\<noteq> S0; \\<not> c \\<sigma>;\n         I S \\<sigma>\\<rbrakk>\n        \\<Longrightarrow> P \\<sigma>\\<rbrakk>\n    \\<Longrightarrow> P (it c f \\<sigma>0)", "by simp"], ["", "text\\<open>The following rules is adapted for maps. Instead of a set of key-value pairs the invariant\n       now only sees the keys.\\<close>"], ["", "lemma map_iterator_genord_rule_P:\n  assumes \"map_iterator_genord it m R\"\n      and I0: \"I (dom m) \\<sigma>0\"\n      and IP: \"!!k v it \\<sigma>. \\<lbrakk> c \\<sigma>; k \\<in> it; m k = Some v; it \\<subseteq> dom m; I it \\<sigma>; \n                             \\<forall>k' v'. k' \\<in> it-{k} \\<and> m k' = Some v' \\<longrightarrow> R (k, v) (k', v');\n                             \\<forall>k' v'. k' \\<notin> it \\<and> m k' = Some v' \\<longrightarrow> R (k', v') (k, v)\\<rbrakk> \\<Longrightarrow> \n                            I (it - {k}) (f (k, v) \\<sigma>)\"\n      and IF: \"!!\\<sigma>. I {} \\<sigma> \\<Longrightarrow> P \\<sigma>\"\n      and II: \"!!\\<sigma> it. \\<lbrakk> it \\<subseteq> dom m; it \\<noteq> {}; \\<not> c \\<sigma>; I it \\<sigma>;\n                         \\<forall>k v k' v'. k \\<notin> it \\<and> m k = Some v \\<and> k' \\<in> it \\<and> m k' = Some v' \\<longrightarrow> \n                                     R (k, v) (k', v') \\<rbrakk> \\<Longrightarrow> P \\<sigma>\"\n  shows \"P (it c f \\<sigma>0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P (it c f \\<sigma>0)", "proof (rule set_iterator_genord.iteratei_rule_P [of it \"map_to_set m\" R \"\\<lambda>S \\<sigma>. I (fst ` S) \\<sigma>\" \\<sigma>0 c f P])"], ["proof (state)\ngoal (5 subgoals):\n 1. map_iterator_genord it m R\n 2. I (fst ` map_to_set m) \\<sigma>0\n 3. \\<And>S \\<sigma> x.\n       \\<lbrakk>c \\<sigma>; x \\<in> S; I (fst ` S) \\<sigma>;\n        S \\<subseteq> map_to_set m; \\<forall>y\\<in>S - {x}. R x y;\n        \\<forall>y\\<in>map_to_set m - S. R y x\\<rbrakk>\n       \\<Longrightarrow> I (fst ` (S - {x})) (f x \\<sigma>)\n 4. \\<And>\\<sigma>. I (fst ` {}) \\<sigma> \\<Longrightarrow> P \\<sigma>\n 5. \\<And>\\<sigma> S.\n       \\<lbrakk>S \\<subseteq> map_to_set m; S \\<noteq> {};\n        \\<not> c \\<sigma>; I (fst ` S) \\<sigma>;\n        \\<forall>x\\<in>S. \\<forall>y\\<in>map_to_set m - S. R y x\\<rbrakk>\n       \\<Longrightarrow> P \\<sigma>", "show \"map_iterator_genord it m R\""], ["proof (prove)\ngoal (1 subgoal):\n 1. map_iterator_genord it m R", "by fact"], ["proof (state)\nthis:\n  map_iterator_genord it m R\n\ngoal (4 subgoals):\n 1. I (fst ` map_to_set m) \\<sigma>0\n 2. \\<And>S \\<sigma> x.\n       \\<lbrakk>c \\<sigma>; x \\<in> S; I (fst ` S) \\<sigma>;\n        S \\<subseteq> map_to_set m; \\<forall>y\\<in>S - {x}. R x y;\n        \\<forall>y\\<in>map_to_set m - S. R y x\\<rbrakk>\n       \\<Longrightarrow> I (fst ` (S - {x})) (f x \\<sigma>)\n 3. \\<And>\\<sigma>. I (fst ` {}) \\<sigma> \\<Longrightarrow> P \\<sigma>\n 4. \\<And>\\<sigma> S.\n       \\<lbrakk>S \\<subseteq> map_to_set m; S \\<noteq> {};\n        \\<not> c \\<sigma>; I (fst ` S) \\<sigma>;\n        \\<forall>x\\<in>S. \\<forall>y\\<in>map_to_set m - S. R y x\\<rbrakk>\n       \\<Longrightarrow> P \\<sigma>", "next"], ["proof (state)\ngoal (4 subgoals):\n 1. I (fst ` map_to_set m) \\<sigma>0\n 2. \\<And>S \\<sigma> x.\n       \\<lbrakk>c \\<sigma>; x \\<in> S; I (fst ` S) \\<sigma>;\n        S \\<subseteq> map_to_set m; \\<forall>y\\<in>S - {x}. R x y;\n        \\<forall>y\\<in>map_to_set m - S. R y x\\<rbrakk>\n       \\<Longrightarrow> I (fst ` (S - {x})) (f x \\<sigma>)\n 3. \\<And>\\<sigma>. I (fst ` {}) \\<sigma> \\<Longrightarrow> P \\<sigma>\n 4. \\<And>\\<sigma> S.\n       \\<lbrakk>S \\<subseteq> map_to_set m; S \\<noteq> {};\n        \\<not> c \\<sigma>; I (fst ` S) \\<sigma>;\n        \\<forall>x\\<in>S. \\<forall>y\\<in>map_to_set m - S. R y x\\<rbrakk>\n       \\<Longrightarrow> P \\<sigma>", "show \"I (fst ` map_to_set m) \\<sigma>0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. I (fst ` map_to_set m) \\<sigma>0", "using I0"], ["proof (prove)\nusing this:\n  I (dom m) \\<sigma>0\n\ngoal (1 subgoal):\n 1. I (fst ` map_to_set m) \\<sigma>0", "by (simp add: map_to_set_dom[symmetric])"], ["proof (state)\nthis:\n  I (fst ` map_to_set m) \\<sigma>0\n\ngoal (3 subgoals):\n 1. \\<And>S \\<sigma> x.\n       \\<lbrakk>c \\<sigma>; x \\<in> S; I (fst ` S) \\<sigma>;\n        S \\<subseteq> map_to_set m; \\<forall>y\\<in>S - {x}. R x y;\n        \\<forall>y\\<in>map_to_set m - S. R y x\\<rbrakk>\n       \\<Longrightarrow> I (fst ` (S - {x})) (f x \\<sigma>)\n 2. \\<And>\\<sigma>. I (fst ` {}) \\<sigma> \\<Longrightarrow> P \\<sigma>\n 3. \\<And>\\<sigma> S.\n       \\<lbrakk>S \\<subseteq> map_to_set m; S \\<noteq> {};\n        \\<not> c \\<sigma>; I (fst ` S) \\<sigma>;\n        \\<forall>x\\<in>S. \\<forall>y\\<in>map_to_set m - S. R y x\\<rbrakk>\n       \\<Longrightarrow> P \\<sigma>", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>S \\<sigma> x.\n       \\<lbrakk>c \\<sigma>; x \\<in> S; I (fst ` S) \\<sigma>;\n        S \\<subseteq> map_to_set m; \\<forall>y\\<in>S - {x}. R x y;\n        \\<forall>y\\<in>map_to_set m - S. R y x\\<rbrakk>\n       \\<Longrightarrow> I (fst ` (S - {x})) (f x \\<sigma>)\n 2. \\<And>\\<sigma>. I (fst ` {}) \\<sigma> \\<Longrightarrow> P \\<sigma>\n 3. \\<And>\\<sigma> S.\n       \\<lbrakk>S \\<subseteq> map_to_set m; S \\<noteq> {};\n        \\<not> c \\<sigma>; I (fst ` S) \\<sigma>;\n        \\<forall>x\\<in>S. \\<forall>y\\<in>map_to_set m - S. R y x\\<rbrakk>\n       \\<Longrightarrow> P \\<sigma>", "fix \\<sigma>"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>S \\<sigma> x.\n       \\<lbrakk>c \\<sigma>; x \\<in> S; I (fst ` S) \\<sigma>;\n        S \\<subseteq> map_to_set m; \\<forall>y\\<in>S - {x}. R x y;\n        \\<forall>y\\<in>map_to_set m - S. R y x\\<rbrakk>\n       \\<Longrightarrow> I (fst ` (S - {x})) (f x \\<sigma>)\n 2. \\<And>\\<sigma>. I (fst ` {}) \\<sigma> \\<Longrightarrow> P \\<sigma>\n 3. \\<And>\\<sigma> S.\n       \\<lbrakk>S \\<subseteq> map_to_set m; S \\<noteq> {};\n        \\<not> c \\<sigma>; I (fst ` S) \\<sigma>;\n        \\<forall>x\\<in>S. \\<forall>y\\<in>map_to_set m - S. R y x\\<rbrakk>\n       \\<Longrightarrow> P \\<sigma>", "assume \"I (fst ` {}) \\<sigma>\""], ["proof (state)\nthis:\n  I (fst ` {}) \\<sigma>\n\ngoal (3 subgoals):\n 1. \\<And>S \\<sigma> x.\n       \\<lbrakk>c \\<sigma>; x \\<in> S; I (fst ` S) \\<sigma>;\n        S \\<subseteq> map_to_set m; \\<forall>y\\<in>S - {x}. R x y;\n        \\<forall>y\\<in>map_to_set m - S. R y x\\<rbrakk>\n       \\<Longrightarrow> I (fst ` (S - {x})) (f x \\<sigma>)\n 2. \\<And>\\<sigma>. I (fst ` {}) \\<sigma> \\<Longrightarrow> P \\<sigma>\n 3. \\<And>\\<sigma> S.\n       \\<lbrakk>S \\<subseteq> map_to_set m; S \\<noteq> {};\n        \\<not> c \\<sigma>; I (fst ` S) \\<sigma>;\n        \\<forall>x\\<in>S. \\<forall>y\\<in>map_to_set m - S. R y x\\<rbrakk>\n       \\<Longrightarrow> P \\<sigma>", "with IF"], ["proof (chain)\npicking this:\n  I {} ?\\<sigma> \\<Longrightarrow> P ?\\<sigma>\n  I (fst ` {}) \\<sigma>", "show \"P \\<sigma>\""], ["proof (prove)\nusing this:\n  I {} ?\\<sigma> \\<Longrightarrow> P ?\\<sigma>\n  I (fst ` {}) \\<sigma>\n\ngoal (1 subgoal):\n 1. P \\<sigma>", "by simp"], ["proof (state)\nthis:\n  P \\<sigma>\n\ngoal (2 subgoals):\n 1. \\<And>S \\<sigma> x.\n       \\<lbrakk>c \\<sigma>; x \\<in> S; I (fst ` S) \\<sigma>;\n        S \\<subseteq> map_to_set m; \\<forall>y\\<in>S - {x}. R x y;\n        \\<forall>y\\<in>map_to_set m - S. R y x\\<rbrakk>\n       \\<Longrightarrow> I (fst ` (S - {x})) (f x \\<sigma>)\n 2. \\<And>\\<sigma> S.\n       \\<lbrakk>S \\<subseteq> map_to_set m; S \\<noteq> {};\n        \\<not> c \\<sigma>; I (fst ` S) \\<sigma>;\n        \\<forall>x\\<in>S. \\<forall>y\\<in>map_to_set m - S. R y x\\<rbrakk>\n       \\<Longrightarrow> P \\<sigma>", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>S \\<sigma> x.\n       \\<lbrakk>c \\<sigma>; x \\<in> S; I (fst ` S) \\<sigma>;\n        S \\<subseteq> map_to_set m; \\<forall>y\\<in>S - {x}. R x y;\n        \\<forall>y\\<in>map_to_set m - S. R y x\\<rbrakk>\n       \\<Longrightarrow> I (fst ` (S - {x})) (f x \\<sigma>)\n 2. \\<And>\\<sigma> S.\n       \\<lbrakk>S \\<subseteq> map_to_set m; S \\<noteq> {};\n        \\<not> c \\<sigma>; I (fst ` S) \\<sigma>;\n        \\<forall>x\\<in>S. \\<forall>y\\<in>map_to_set m - S. R y x\\<rbrakk>\n       \\<Longrightarrow> P \\<sigma>", "fix \\<sigma> S"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>S \\<sigma> x.\n       \\<lbrakk>c \\<sigma>; x \\<in> S; I (fst ` S) \\<sigma>;\n        S \\<subseteq> map_to_set m; \\<forall>y\\<in>S - {x}. R x y;\n        \\<forall>y\\<in>map_to_set m - S. R y x\\<rbrakk>\n       \\<Longrightarrow> I (fst ` (S - {x})) (f x \\<sigma>)\n 2. \\<And>\\<sigma> S.\n       \\<lbrakk>S \\<subseteq> map_to_set m; S \\<noteq> {};\n        \\<not> c \\<sigma>; I (fst ` S) \\<sigma>;\n        \\<forall>x\\<in>S. \\<forall>y\\<in>map_to_set m - S. R y x\\<rbrakk>\n       \\<Longrightarrow> P \\<sigma>", "assume \"S \\<subseteq> map_to_set m\" \"S \\<noteq> {}\" \"\\<not> c \\<sigma>\" \"I (fst ` S) \\<sigma>\"  \n         and R_prop: \"\\<forall>x\\<in>S. \\<forall>y\\<in>map_to_set m - S. R y x\""], ["proof (state)\nthis:\n  S \\<subseteq> map_to_set m\n  S \\<noteq> {}\n  \\<not> c \\<sigma>\n  I (fst ` S) \\<sigma>\n  \\<forall>x\\<in>S. \\<forall>y\\<in>map_to_set m - S. R y x\n\ngoal (2 subgoals):\n 1. \\<And>S \\<sigma> x.\n       \\<lbrakk>c \\<sigma>; x \\<in> S; I (fst ` S) \\<sigma>;\n        S \\<subseteq> map_to_set m; \\<forall>y\\<in>S - {x}. R x y;\n        \\<forall>y\\<in>map_to_set m - S. R y x\\<rbrakk>\n       \\<Longrightarrow> I (fst ` (S - {x})) (f x \\<sigma>)\n 2. \\<And>\\<sigma> S.\n       \\<lbrakk>S \\<subseteq> map_to_set m; S \\<noteq> {};\n        \\<not> c \\<sigma>; I (fst ` S) \\<sigma>;\n        \\<forall>x\\<in>S. \\<forall>y\\<in>map_to_set m - S. R y x\\<rbrakk>\n       \\<Longrightarrow> P \\<sigma>", "let ?S' = \"fst ` S\""], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>S \\<sigma> x.\n       \\<lbrakk>c \\<sigma>; x \\<in> S; I (fst ` S) \\<sigma>;\n        S \\<subseteq> map_to_set m; \\<forall>y\\<in>S - {x}. R x y;\n        \\<forall>y\\<in>map_to_set m - S. R y x\\<rbrakk>\n       \\<Longrightarrow> I (fst ` (S - {x})) (f x \\<sigma>)\n 2. \\<And>\\<sigma> S.\n       \\<lbrakk>S \\<subseteq> map_to_set m; S \\<noteq> {};\n        \\<not> c \\<sigma>; I (fst ` S) \\<sigma>;\n        \\<forall>x\\<in>S. \\<forall>y\\<in>map_to_set m - S. R y x\\<rbrakk>\n       \\<Longrightarrow> P \\<sigma>", "show \"P \\<sigma>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P \\<sigma>", "proof (rule II [where it = ?S'])"], ["proof (state)\ngoal (5 subgoals):\n 1. fst ` S \\<subseteq> dom m\n 2. fst ` S \\<noteq> {}\n 3. \\<not> c \\<sigma>\n 4. I (fst ` S) \\<sigma>\n 5. \\<forall>k v k' v'.\n       k \\<notin> fst ` S \\<and>\n       m k = Some v \\<and>\n       k' \\<in> fst ` S \\<and> m k' = Some v' \\<longrightarrow>\n       R (k, v) (k', v')", "from \\<open>S \\<subseteq> map_to_set m\\<close>"], ["proof (chain)\npicking this:\n  S \\<subseteq> map_to_set m", "show \"?S' \\<subseteq> dom m\""], ["proof (prove)\nusing this:\n  S \\<subseteq> map_to_set m\n\ngoal (1 subgoal):\n 1. fst ` S \\<subseteq> dom m", "unfolding map_to_set_dom"], ["proof (prove)\nusing this:\n  S \\<subseteq> map_to_set m\n\ngoal (1 subgoal):\n 1. fst ` S \\<subseteq> fst ` map_to_set m", "by auto"], ["proof (state)\nthis:\n  fst ` S \\<subseteq> dom m\n\ngoal (4 subgoals):\n 1. fst ` S \\<noteq> {}\n 2. \\<not> c \\<sigma>\n 3. I (fst ` S) \\<sigma>\n 4. \\<forall>k v k' v'.\n       k \\<notin> fst ` S \\<and>\n       m k = Some v \\<and>\n       k' \\<in> fst ` S \\<and> m k' = Some v' \\<longrightarrow>\n       R (k, v) (k', v')", "next"], ["proof (state)\ngoal (4 subgoals):\n 1. fst ` S \\<noteq> {}\n 2. \\<not> c \\<sigma>\n 3. I (fst ` S) \\<sigma>\n 4. \\<forall>k v k' v'.\n       k \\<notin> fst ` S \\<and>\n       m k = Some v \\<and>\n       k' \\<in> fst ` S \\<and> m k' = Some v' \\<longrightarrow>\n       R (k, v) (k', v')", "from \\<open>S \\<noteq> {}\\<close>"], ["proof (chain)\npicking this:\n  S \\<noteq> {}", "show \"?S' \\<noteq> {}\""], ["proof (prove)\nusing this:\n  S \\<noteq> {}\n\ngoal (1 subgoal):\n 1. fst ` S \\<noteq> {}", "by auto"], ["proof (state)\nthis:\n  fst ` S \\<noteq> {}\n\ngoal (3 subgoals):\n 1. \\<not> c \\<sigma>\n 2. I (fst ` S) \\<sigma>\n 3. \\<forall>k v k' v'.\n       k \\<notin> fst ` S \\<and>\n       m k = Some v \\<and>\n       k' \\<in> fst ` S \\<and> m k' = Some v' \\<longrightarrow>\n       R (k, v) (k', v')", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<not> c \\<sigma>\n 2. I (fst ` S) \\<sigma>\n 3. \\<forall>k v k' v'.\n       k \\<notin> fst ` S \\<and>\n       m k = Some v \\<and>\n       k' \\<in> fst ` S \\<and> m k' = Some v' \\<longrightarrow>\n       R (k, v) (k', v')", "show \"\\<not> (c \\<sigma>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> c \\<sigma>", "by fact"], ["proof (state)\nthis:\n  \\<not> c \\<sigma>\n\ngoal (2 subgoals):\n 1. I (fst ` S) \\<sigma>\n 2. \\<forall>k v k' v'.\n       k \\<notin> fst ` S \\<and>\n       m k = Some v \\<and>\n       k' \\<in> fst ` S \\<and> m k' = Some v' \\<longrightarrow>\n       R (k, v) (k', v')", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. I (fst ` S) \\<sigma>\n 2. \\<forall>k v k' v'.\n       k \\<notin> fst ` S \\<and>\n       m k = Some v \\<and>\n       k' \\<in> fst ` S \\<and> m k' = Some v' \\<longrightarrow>\n       R (k, v) (k', v')", "show \"I (fst ` S) \\<sigma>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. I (fst ` S) \\<sigma>", "by fact"], ["proof (state)\nthis:\n  I (fst ` S) \\<sigma>\n\ngoal (1 subgoal):\n 1. \\<forall>k v k' v'.\n       k \\<notin> fst ` S \\<and>\n       m k = Some v \\<and>\n       k' \\<in> fst ` S \\<and> m k' = Some v' \\<longrightarrow>\n       R (k, v) (k', v')", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<forall>k v k' v'.\n       k \\<notin> fst ` S \\<and>\n       m k = Some v \\<and>\n       k' \\<in> fst ` S \\<and> m k' = Some v' \\<longrightarrow>\n       R (k, v) (k', v')", "show \"\\<forall>k v k' v'.\n       k \\<notin> fst ` S \\<and>\n       m k = Some v \\<and>\n       k' \\<in> fst ` S \\<and> m k' = Some v' \\<longrightarrow>\n       R (k, v) (k', v')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>k v k' v'.\n       k \\<notin> fst ` S \\<and>\n       m k = Some v \\<and>\n       k' \\<in> fst ` S \\<and> m k' = Some v' \\<longrightarrow>\n       R (k, v) (k', v')", "proof (intro allI impI, elim conjE )"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>k v k' v'.\n       \\<lbrakk>k \\<notin> fst ` S; m k = Some v; k' \\<in> fst ` S;\n        m k' = Some v'\\<rbrakk>\n       \\<Longrightarrow> R (k, v) (k', v')", "fix k v k' v'"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>k v k' v'.\n       \\<lbrakk>k \\<notin> fst ` S; m k = Some v; k' \\<in> fst ` S;\n        m k' = Some v'\\<rbrakk>\n       \\<Longrightarrow> R (k, v) (k', v')", "assume pre_k: \"k \\<notin> fst ` S\" \"m k = Some v\""], ["proof (state)\nthis:\n  k \\<notin> fst ` S\n  m k = Some v\n\ngoal (1 subgoal):\n 1. \\<And>k v k' v'.\n       \\<lbrakk>k \\<notin> fst ` S; m k = Some v; k' \\<in> fst ` S;\n        m k' = Some v'\\<rbrakk>\n       \\<Longrightarrow> R (k, v) (k', v')", "assume pre_k': \"k' \\<in> fst ` S\" \"m k' = Some v'\""], ["proof (state)\nthis:\n  k' \\<in> fst ` S\n  m k' = Some v'\n\ngoal (1 subgoal):\n 1. \\<And>k v k' v'.\n       \\<lbrakk>k \\<notin> fst ` S; m k = Some v; k' \\<in> fst ` S;\n        m k' = Some v'\\<rbrakk>\n       \\<Longrightarrow> R (k, v) (k', v')", "from \\<open>S \\<subseteq> map_to_set m\\<close> pre_k'"], ["proof (chain)\npicking this:\n  S \\<subseteq> map_to_set m\n  k' \\<in> fst ` S\n  m k' = Some v'", "have kv'_in: \"(k', v') \\<in> S\""], ["proof (prove)\nusing this:\n  S \\<subseteq> map_to_set m\n  k' \\<in> fst ` S\n  m k' = Some v'\n\ngoal (1 subgoal):\n 1. (k', v') \\<in> S", "unfolding map_to_set_def"], ["proof (prove)\nusing this:\n  S \\<subseteq> {(k, v). m k = Some v}\n  k' \\<in> fst ` S\n  m k' = Some v'\n\ngoal (1 subgoal):\n 1. (k', v') \\<in> S", "by auto"], ["proof (state)\nthis:\n  (k', v') \\<in> S\n\ngoal (1 subgoal):\n 1. \\<And>k v k' v'.\n       \\<lbrakk>k \\<notin> fst ` S; m k = Some v; k' \\<in> fst ` S;\n        m k' = Some v'\\<rbrakk>\n       \\<Longrightarrow> R (k, v) (k', v')", "from \\<open>S \\<subseteq> map_to_set m\\<close> pre_k"], ["proof (chain)\npicking this:\n  S \\<subseteq> map_to_set m\n  k \\<notin> fst ` S\n  m k = Some v", "have kv_in: \"(k, v) \\<in> map_to_set m - S\""], ["proof (prove)\nusing this:\n  S \\<subseteq> map_to_set m\n  k \\<notin> fst ` S\n  m k = Some v\n\ngoal (1 subgoal):\n 1. (k, v) \\<in> map_to_set m - S", "unfolding map_to_set_def"], ["proof (prove)\nusing this:\n  S \\<subseteq> {(k, v). m k = Some v}\n  k \\<notin> fst ` S\n  m k = Some v\n\ngoal (1 subgoal):\n 1. (k, v) \\<in> {(k, v). m k = Some v} - S", "by (auto simp add: image_iff)"], ["proof (state)\nthis:\n  (k, v) \\<in> map_to_set m - S\n\ngoal (1 subgoal):\n 1. \\<And>k v k' v'.\n       \\<lbrakk>k \\<notin> fst ` S; m k = Some v; k' \\<in> fst ` S;\n        m k' = Some v'\\<rbrakk>\n       \\<Longrightarrow> R (k, v) (k', v')", "from R_prop kv_in kv'_in"], ["proof (chain)\npicking this:\n  \\<forall>x\\<in>S. \\<forall>y\\<in>map_to_set m - S. R y x\n  (k, v) \\<in> map_to_set m - S\n  (k', v') \\<in> S", "show \"R (k, v) (k',v')\""], ["proof (prove)\nusing this:\n  \\<forall>x\\<in>S. \\<forall>y\\<in>map_to_set m - S. R y x\n  (k, v) \\<in> map_to_set m - S\n  (k', v') \\<in> S\n\ngoal (1 subgoal):\n 1. R (k, v) (k', v')", "by simp"], ["proof (state)\nthis:\n  R (k, v) (k', v')\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>k v k' v'.\n     k \\<notin> fst ` S \\<and>\n     m k = Some v \\<and>\n     k' \\<in> fst ` S \\<and> m k' = Some v' \\<longrightarrow>\n     R (k, v) (k', v')\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  P \\<sigma>\n\ngoal (1 subgoal):\n 1. \\<And>S \\<sigma> x.\n       \\<lbrakk>c \\<sigma>; x \\<in> S; I (fst ` S) \\<sigma>;\n        S \\<subseteq> map_to_set m; \\<forall>y\\<in>S - {x}. R x y;\n        \\<forall>y\\<in>map_to_set m - S. R y x\\<rbrakk>\n       \\<Longrightarrow> I (fst ` (S - {x})) (f x \\<sigma>)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>S \\<sigma> x.\n       \\<lbrakk>c \\<sigma>; x \\<in> S; I (fst ` S) \\<sigma>;\n        S \\<subseteq> map_to_set m; \\<forall>y\\<in>S - {x}. R x y;\n        \\<forall>y\\<in>map_to_set m - S. R y x\\<rbrakk>\n       \\<Longrightarrow> I (fst ` (S - {x})) (f x \\<sigma>)", "fix \\<sigma> S kv"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>S \\<sigma> x.\n       \\<lbrakk>c \\<sigma>; x \\<in> S; I (fst ` S) \\<sigma>;\n        S \\<subseteq> map_to_set m; \\<forall>y\\<in>S - {x}. R x y;\n        \\<forall>y\\<in>map_to_set m - S. R y x\\<rbrakk>\n       \\<Longrightarrow> I (fst ` (S - {x})) (f x \\<sigma>)", "assume \"S \\<subseteq> map_to_set m\" \"kv \\<in> S\" \"c \\<sigma>\" and I_S': \"I (fst ` S) \\<sigma>\" and \n         R_S: \"\\<forall>kv'\\<in>S - {kv}. R kv kv'\" and\n         R_not_S: \"\\<forall>kv'\\<in>map_to_set m - S. R kv' kv\""], ["proof (state)\nthis:\n  S \\<subseteq> map_to_set m\n  kv \\<in> S\n  c \\<sigma>\n  I (fst ` S) \\<sigma>\n  \\<forall>kv'\\<in>S - {kv}. R kv kv'\n  \\<forall>kv'\\<in>map_to_set m - S. R kv' kv\n\ngoal (1 subgoal):\n 1. \\<And>S \\<sigma> x.\n       \\<lbrakk>c \\<sigma>; x \\<in> S; I (fst ` S) \\<sigma>;\n        S \\<subseteq> map_to_set m; \\<forall>y\\<in>S - {x}. R x y;\n        \\<forall>y\\<in>map_to_set m - S. R y x\\<rbrakk>\n       \\<Longrightarrow> I (fst ` (S - {x})) (f x \\<sigma>)", "let ?S' = \"fst ` S\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>S \\<sigma> x.\n       \\<lbrakk>c \\<sigma>; x \\<in> S; I (fst ` S) \\<sigma>;\n        S \\<subseteq> map_to_set m; \\<forall>y\\<in>S - {x}. R x y;\n        \\<forall>y\\<in>map_to_set m - S. R y x\\<rbrakk>\n       \\<Longrightarrow> I (fst ` (S - {x})) (f x \\<sigma>)", "obtain k v where kv_eq[simp]: \"kv = (k, v)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>k v. kv = (k, v) \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (rule prod.exhaust)"], ["proof (state)\nthis:\n  kv = (k, v)\n\ngoal (1 subgoal):\n 1. \\<And>S \\<sigma> x.\n       \\<lbrakk>c \\<sigma>; x \\<in> S; I (fst ` S) \\<sigma>;\n        S \\<subseteq> map_to_set m; \\<forall>y\\<in>S - {x}. R x y;\n        \\<forall>y\\<in>map_to_set m - S. R y x\\<rbrakk>\n       \\<Longrightarrow> I (fst ` (S - {x})) (f x \\<sigma>)", "have \"I (fst ` S - {k}) (f (k, v) \\<sigma>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. I (fst ` S - {k}) (f (k, v) \\<sigma>)", "proof (rule IP)"], ["proof (state)\ngoal (7 subgoals):\n 1. c \\<sigma>\n 2. k \\<in> fst ` S\n 3. m k = Some v\n 4. fst ` S \\<subseteq> dom m\n 5. I (fst ` S) \\<sigma>\n 6. \\<forall>k' v'.\n       k' \\<in> fst ` S - {k} \\<and> m k' = Some v' \\<longrightarrow>\n       R (k, v) (k', v')\n 7. \\<forall>k' v'.\n       k' \\<notin> fst ` S \\<and> m k' = Some v' \\<longrightarrow>\n       R (k', v') (k, v)", "show \"c \\<sigma>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. c \\<sigma>", "by fact"], ["proof (state)\nthis:\n  c \\<sigma>\n\ngoal (6 subgoals):\n 1. k \\<in> fst ` S\n 2. m k = Some v\n 3. fst ` S \\<subseteq> dom m\n 4. I (fst ` S) \\<sigma>\n 5. \\<forall>k' v'.\n       k' \\<in> fst ` S - {k} \\<and> m k' = Some v' \\<longrightarrow>\n       R (k, v) (k', v')\n 6. \\<forall>k' v'.\n       k' \\<notin> fst ` S \\<and> m k' = Some v' \\<longrightarrow>\n       R (k', v') (k, v)", "next"], ["proof (state)\ngoal (6 subgoals):\n 1. k \\<in> fst ` S\n 2. m k = Some v\n 3. fst ` S \\<subseteq> dom m\n 4. I (fst ` S) \\<sigma>\n 5. \\<forall>k' v'.\n       k' \\<in> fst ` S - {k} \\<and> m k' = Some v' \\<longrightarrow>\n       R (k, v) (k', v')\n 6. \\<forall>k' v'.\n       k' \\<notin> fst ` S \\<and> m k' = Some v' \\<longrightarrow>\n       R (k', v') (k, v)", "from \\<open>kv \\<in> S\\<close>"], ["proof (chain)\npicking this:\n  kv \\<in> S", "show \"k \\<in> ?S'\""], ["proof (prove)\nusing this:\n  kv \\<in> S\n\ngoal (1 subgoal):\n 1. k \\<in> fst ` S", "by (auto simp add: image_iff Bex_def)"], ["proof (state)\nthis:\n  k \\<in> fst ` S\n\ngoal (5 subgoals):\n 1. m k = Some v\n 2. fst ` S \\<subseteq> dom m\n 3. I (fst ` S) \\<sigma>\n 4. \\<forall>k' v'.\n       k' \\<in> fst ` S - {k} \\<and> m k' = Some v' \\<longrightarrow>\n       R (k, v) (k', v')\n 5. \\<forall>k' v'.\n       k' \\<notin> fst ` S \\<and> m k' = Some v' \\<longrightarrow>\n       R (k', v') (k, v)", "next"], ["proof (state)\ngoal (5 subgoals):\n 1. m k = Some v\n 2. fst ` S \\<subseteq> dom m\n 3. I (fst ` S) \\<sigma>\n 4. \\<forall>k' v'.\n       k' \\<in> fst ` S - {k} \\<and> m k' = Some v' \\<longrightarrow>\n       R (k, v) (k', v')\n 5. \\<forall>k' v'.\n       k' \\<notin> fst ` S \\<and> m k' = Some v' \\<longrightarrow>\n       R (k', v') (k, v)", "from \\<open>kv \\<in> S\\<close> \\<open>S \\<subseteq> map_to_set m\\<close>"], ["proof (chain)\npicking this:\n  kv \\<in> S\n  S \\<subseteq> map_to_set m", "have \"kv \\<in> map_to_set m\""], ["proof (prove)\nusing this:\n  kv \\<in> S\n  S \\<subseteq> map_to_set m\n\ngoal (1 subgoal):\n 1. kv \\<in> map_to_set m", "by auto"], ["proof (state)\nthis:\n  kv \\<in> map_to_set m\n\ngoal (5 subgoals):\n 1. m k = Some v\n 2. fst ` S \\<subseteq> dom m\n 3. I (fst ` S) \\<sigma>\n 4. \\<forall>k' v'.\n       k' \\<in> fst ` S - {k} \\<and> m k' = Some v' \\<longrightarrow>\n       R (k, v) (k', v')\n 5. \\<forall>k' v'.\n       k' \\<notin> fst ` S \\<and> m k' = Some v' \\<longrightarrow>\n       R (k', v') (k, v)", "thus m_k_eq: \"m k = Some v\""], ["proof (prove)\nusing this:\n  kv \\<in> map_to_set m\n\ngoal (1 subgoal):\n 1. m k = Some v", "unfolding map_to_set_def"], ["proof (prove)\nusing this:\n  kv \\<in> {(k, v). m k = Some v}\n\ngoal (1 subgoal):\n 1. m k = Some v", "by simp"], ["proof (state)\nthis:\n  m k = Some v\n\ngoal (4 subgoals):\n 1. fst ` S \\<subseteq> dom m\n 2. I (fst ` S) \\<sigma>\n 3. \\<forall>k' v'.\n       k' \\<in> fst ` S - {k} \\<and> m k' = Some v' \\<longrightarrow>\n       R (k, v) (k', v')\n 4. \\<forall>k' v'.\n       k' \\<notin> fst ` S \\<and> m k' = Some v' \\<longrightarrow>\n       R (k', v') (k, v)", "next"], ["proof (state)\ngoal (4 subgoals):\n 1. fst ` S \\<subseteq> dom m\n 2. I (fst ` S) \\<sigma>\n 3. \\<forall>k' v'.\n       k' \\<in> fst ` S - {k} \\<and> m k' = Some v' \\<longrightarrow>\n       R (k, v) (k', v')\n 4. \\<forall>k' v'.\n       k' \\<notin> fst ` S \\<and> m k' = Some v' \\<longrightarrow>\n       R (k', v') (k, v)", "from \\<open>S \\<subseteq> map_to_set m\\<close>"], ["proof (chain)\npicking this:\n  S \\<subseteq> map_to_set m", "show S'_subset: \"?S' \\<subseteq> dom m\""], ["proof (prove)\nusing this:\n  S \\<subseteq> map_to_set m\n\ngoal (1 subgoal):\n 1. fst ` S \\<subseteq> dom m", "unfolding map_to_set_dom"], ["proof (prove)\nusing this:\n  S \\<subseteq> map_to_set m\n\ngoal (1 subgoal):\n 1. fst ` S \\<subseteq> fst ` map_to_set m", "by auto"], ["proof (state)\nthis:\n  fst ` S \\<subseteq> dom m\n\ngoal (3 subgoals):\n 1. I (fst ` S) \\<sigma>\n 2. \\<forall>k' v'.\n       k' \\<in> fst ` S - {k} \\<and> m k' = Some v' \\<longrightarrow>\n       R (k, v) (k', v')\n 3. \\<forall>k' v'.\n       k' \\<notin> fst ` S \\<and> m k' = Some v' \\<longrightarrow>\n       R (k', v') (k, v)", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. I (fst ` S) \\<sigma>\n 2. \\<forall>k' v'.\n       k' \\<in> fst ` S - {k} \\<and> m k' = Some v' \\<longrightarrow>\n       R (k, v) (k', v')\n 3. \\<forall>k' v'.\n       k' \\<notin> fst ` S \\<and> m k' = Some v' \\<longrightarrow>\n       R (k', v') (k, v)", "show \"I (fst ` S) \\<sigma>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. I (fst ` S) \\<sigma>", "by fact"], ["proof (state)\nthis:\n  I (fst ` S) \\<sigma>\n\ngoal (2 subgoals):\n 1. \\<forall>k' v'.\n       k' \\<in> fst ` S - {k} \\<and> m k' = Some v' \\<longrightarrow>\n       R (k, v) (k', v')\n 2. \\<forall>k' v'.\n       k' \\<notin> fst ` S \\<and> m k' = Some v' \\<longrightarrow>\n       R (k', v') (k, v)", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<forall>k' v'.\n       k' \\<in> fst ` S - {k} \\<and> m k' = Some v' \\<longrightarrow>\n       R (k, v) (k', v')\n 2. \\<forall>k' v'.\n       k' \\<notin> fst ` S \\<and> m k' = Some v' \\<longrightarrow>\n       R (k', v') (k, v)", "from \\<open>S \\<subseteq> map_to_set m\\<close> \\<open>kv \\<in> S\\<close>"], ["proof (chain)\npicking this:\n  S \\<subseteq> map_to_set m\n  kv \\<in> S", "have S_simp: \"{(k', v'). k' \\<in> (fst ` S) - {k} \\<and> m k' = Some v'} = S - {kv}\""], ["proof (prove)\nusing this:\n  S \\<subseteq> map_to_set m\n  kv \\<in> S\n\ngoal (1 subgoal):\n 1. {(k', v'). k' \\<in> fst ` S - {k} \\<and> m k' = Some v'} = S - {kv}", "unfolding map_to_set_def subset_iff"], ["proof (prove)\nusing this:\n  \\<forall>t. t \\<in> S \\<longrightarrow> t \\<in> {(k, v). m k = Some v}\n  kv \\<in> S\n\ngoal (1 subgoal):\n 1. {(k', v'). k' \\<in> fst ` S - {k} \\<and> m k' = Some v'} = S - {kv}", "apply (auto simp add: image_iff Bex_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>b.\n       \\<lbrakk>\\<forall>a b. (a, b) \\<in> S \\<longrightarrow> m a = Some b;\n        (k, v) \\<in> S; (k, b) \\<in> S; b \\<noteq> v\\<rbrakk>\n       \\<Longrightarrow> False", "apply (metis option.inject)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  {(k', v'). k' \\<in> fst ` S - {k} \\<and> m k' = Some v'} = S - {kv}\n\ngoal (2 subgoals):\n 1. \\<forall>k' v'.\n       k' \\<in> fst ` S - {k} \\<and> m k' = Some v' \\<longrightarrow>\n       R (k, v) (k', v')\n 2. \\<forall>k' v'.\n       k' \\<notin> fst ` S \\<and> m k' = Some v' \\<longrightarrow>\n       R (k', v') (k, v)", "from R_S[unfolded S_simp[symmetric]] R_not_S"], ["proof (chain)\npicking this:\n  \\<forall>kv'\\<in>{(k', v'). k' \\<in> fst ` S - {k} \\<and> m k' = Some v'}.\n     R kv kv'\n  \\<forall>kv'\\<in>map_to_set m - S. R kv' kv", "show \"\\<forall>k' v'. k' \\<in> fst ` S - {k} \\<and> m k' = Some v' \\<longrightarrow>\n                  R (k, v) (k', v') \""], ["proof (prove)\nusing this:\n  \\<forall>kv'\\<in>{(k', v'). k' \\<in> fst ` S - {k} \\<and> m k' = Some v'}.\n     R kv kv'\n  \\<forall>kv'\\<in>map_to_set m - S. R kv' kv\n\ngoal (1 subgoal):\n 1. \\<forall>k' v'.\n       k' \\<in> fst ` S - {k} \\<and> m k' = Some v' \\<longrightarrow>\n       R (k, v) (k', v')", "by simp"], ["proof (state)\nthis:\n  \\<forall>k' v'.\n     k' \\<in> fst ` S - {k} \\<and> m k' = Some v' \\<longrightarrow>\n     R (k, v) (k', v')\n\ngoal (1 subgoal):\n 1. \\<forall>k' v'.\n       k' \\<notin> fst ` S \\<and> m k' = Some v' \\<longrightarrow>\n       R (k', v') (k, v)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<forall>k' v'.\n       k' \\<notin> fst ` S \\<and> m k' = Some v' \\<longrightarrow>\n       R (k', v') (k, v)", "from \\<open>S \\<subseteq> map_to_set m\\<close> R_not_S"], ["proof (chain)\npicking this:\n  S \\<subseteq> map_to_set m\n  \\<forall>kv'\\<in>map_to_set m - S. R kv' kv", "show \"\\<forall>k' v'. k' \\<notin> fst ` S \\<and> m k' = Some v' \\<longrightarrow> R (k', v') (k, v)\""], ["proof (prove)\nusing this:\n  S \\<subseteq> map_to_set m\n  \\<forall>kv'\\<in>map_to_set m - S. R kv' kv\n\ngoal (1 subgoal):\n 1. \\<forall>k' v'.\n       k' \\<notin> fst ` S \\<and> m k' = Some v' \\<longrightarrow>\n       R (k', v') (k, v)", "apply (simp add: Ball_def map_to_set_def subset_iff image_iff)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>a b. (a, b) \\<in> S \\<longrightarrow> m a = Some b;\n     \\<forall>a b.\n        m a = Some b \\<and> (a, b) \\<notin> S \\<longrightarrow>\n        R (a, b) (k, v)\\<rbrakk>\n    \\<Longrightarrow> \\<forall>k' v'.\n                         (\\<forall>a.\n                             (\\<exists>b. (a, b) \\<in> S) \\<longrightarrow>\n                             k' \\<noteq> a) \\<and>\n                         m k' = Some v' \\<longrightarrow>\n                         R (k', v') (k, v)", "apply metis"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  \\<forall>k' v'.\n     k' \\<notin> fst ` S \\<and> m k' = Some v' \\<longrightarrow>\n     R (k', v') (k, v)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  I (fst ` S - {k}) (f (k, v) \\<sigma>)\n\ngoal (1 subgoal):\n 1. \\<And>S \\<sigma> x.\n       \\<lbrakk>c \\<sigma>; x \\<in> S; I (fst ` S) \\<sigma>;\n        S \\<subseteq> map_to_set m; \\<forall>y\\<in>S - {x}. R x y;\n        \\<forall>y\\<in>map_to_set m - S. R y x\\<rbrakk>\n       \\<Longrightarrow> I (fst ` (S - {x})) (f x \\<sigma>)", "moreover"], ["proof (state)\nthis:\n  I (fst ` S - {k}) (f (k, v) \\<sigma>)\n\ngoal (1 subgoal):\n 1. \\<And>S \\<sigma> x.\n       \\<lbrakk>c \\<sigma>; x \\<in> S; I (fst ` S) \\<sigma>;\n        S \\<subseteq> map_to_set m; \\<forall>y\\<in>S - {x}. R x y;\n        \\<forall>y\\<in>map_to_set m - S. R y x\\<rbrakk>\n       \\<Longrightarrow> I (fst ` (S - {x})) (f x \\<sigma>)", "from \\<open>S \\<subseteq> map_to_set m\\<close> \\<open>kv \\<in> S\\<close>"], ["proof (chain)\npicking this:\n  S \\<subseteq> map_to_set m\n  kv \\<in> S", "have \"fst ` (S - {kv}) = fst ` S - {k}\""], ["proof (prove)\nusing this:\n  S \\<subseteq> map_to_set m\n  kv \\<in> S\n\ngoal (1 subgoal):\n 1. fst ` (S - {kv}) = fst ` S - {k}", "apply (simp add: set_eq_iff image_iff Bex_def map_to_set_def subset_iff)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>a b. (a, b) \\<in> S \\<longrightarrow> m a = Some b;\n     (k, v) \\<in> S\\<rbrakk>\n    \\<Longrightarrow> \\<forall>x.\n                         (\\<exists>b.\n                             (x, b) \\<in> S \\<and>\n                             (x = k \\<longrightarrow> b \\<noteq> v)) =\n                         ((\\<exists>b. (x, b) \\<in> S) \\<and> x \\<noteq> k)", "apply (metis option.inject)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  fst ` (S - {kv}) = fst ` S - {k}\n\ngoal (1 subgoal):\n 1. \\<And>S \\<sigma> x.\n       \\<lbrakk>c \\<sigma>; x \\<in> S; I (fst ` S) \\<sigma>;\n        S \\<subseteq> map_to_set m; \\<forall>y\\<in>S - {x}. R x y;\n        \\<forall>y\\<in>map_to_set m - S. R y x\\<rbrakk>\n       \\<Longrightarrow> I (fst ` (S - {x})) (f x \\<sigma>)", "ultimately"], ["proof (chain)\npicking this:\n  I (fst ` S - {k}) (f (k, v) \\<sigma>)\n  fst ` (S - {kv}) = fst ` S - {k}", "show \"I (fst ` (S - {kv})) (f kv \\<sigma>)\""], ["proof (prove)\nusing this:\n  I (fst ` S - {k}) (f (k, v) \\<sigma>)\n  fst ` (S - {kv}) = fst ` S - {k}\n\ngoal (1 subgoal):\n 1. I (fst ` (S - {kv})) (f kv \\<sigma>)", "by simp"], ["proof (state)\nthis:\n  I (fst ` (S - {kv})) (f kv \\<sigma>)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma map_iterator_genord_rule_insert_P:\n  assumes \"map_iterator_genord it m R\"\n      and I0: \"I {} \\<sigma>0\"\n      and IP: \"!!k v it \\<sigma>. \\<lbrakk> c \\<sigma>; k \\<in> dom m - it; m k = Some v; it \\<subseteq> dom m; I it \\<sigma>; \n                             \\<forall>k' v'. k' \\<in> (dom m - it) - {k} \\<and> m k' = Some v' \\<longrightarrow> R (k, v) (k', v');\n                             \\<forall>k' v'. k' \\<in> it \\<and> m k' = Some v' \\<longrightarrow> \n                               R (k', v') (k, v)\\<rbrakk> \\<Longrightarrow> I (insert k it) (f (k, v) \\<sigma>)\"\n      and IF: \"!!\\<sigma>. I (dom m) \\<sigma> \\<Longrightarrow> P \\<sigma>\"\n      and II: \"!!\\<sigma> it. \\<lbrakk> it \\<subseteq> dom m; it \\<noteq> dom m; \\<not> c \\<sigma>; I it \\<sigma>;\n                         \\<forall>k v k' v'. k \\<in> it \\<and> m k = Some v \\<and> k' \\<notin> it \\<and> m k' = Some v' \\<longrightarrow> \n                                     R (k, v) (k', v') \\<rbrakk> \\<Longrightarrow> P \\<sigma>\"\n  shows \"P (it c f \\<sigma>0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P (it c f \\<sigma>0)", "proof (rule map_iterator_genord_rule_P [of it m R \"\\<lambda>S \\<sigma>. I (dom m - S) \\<sigma>\"])"], ["proof (state)\ngoal (5 subgoals):\n 1. map_iterator_genord it m R\n 2. I (dom m - dom m) \\<sigma>0\n 3. \\<And>k v it \\<sigma>.\n       \\<lbrakk>c \\<sigma>; k \\<in> it; m k = Some v; it \\<subseteq> dom m;\n        I (dom m - it) \\<sigma>;\n        \\<forall>k' v'.\n           k' \\<in> it - {k} \\<and> m k' = Some v' \\<longrightarrow>\n           R (k, v) (k', v');\n        \\<forall>k' v'.\n           k' \\<notin> it \\<and> m k' = Some v' \\<longrightarrow>\n           R (k', v') (k, v)\\<rbrakk>\n       \\<Longrightarrow> I (dom m - (it - {k})) (f (k, v) \\<sigma>)\n 4. \\<And>\\<sigma>. I (dom m - {}) \\<sigma> \\<Longrightarrow> P \\<sigma>\n 5. \\<And>\\<sigma> it.\n       \\<lbrakk>it \\<subseteq> dom m; it \\<noteq> {}; \\<not> c \\<sigma>;\n        I (dom m - it) \\<sigma>;\n        \\<forall>k v k' v'.\n           k \\<notin> it \\<and>\n           m k = Some v \\<and>\n           k' \\<in> it \\<and> m k' = Some v' \\<longrightarrow>\n           R (k, v) (k', v')\\<rbrakk>\n       \\<Longrightarrow> P \\<sigma>", "show \"map_iterator_genord it m R\""], ["proof (prove)\ngoal (1 subgoal):\n 1. map_iterator_genord it m R", "by fact"], ["proof (state)\nthis:\n  map_iterator_genord it m R\n\ngoal (4 subgoals):\n 1. I (dom m - dom m) \\<sigma>0\n 2. \\<And>k v it \\<sigma>.\n       \\<lbrakk>c \\<sigma>; k \\<in> it; m k = Some v; it \\<subseteq> dom m;\n        I (dom m - it) \\<sigma>;\n        \\<forall>k' v'.\n           k' \\<in> it - {k} \\<and> m k' = Some v' \\<longrightarrow>\n           R (k, v) (k', v');\n        \\<forall>k' v'.\n           k' \\<notin> it \\<and> m k' = Some v' \\<longrightarrow>\n           R (k', v') (k, v)\\<rbrakk>\n       \\<Longrightarrow> I (dom m - (it - {k})) (f (k, v) \\<sigma>)\n 3. \\<And>\\<sigma>. I (dom m - {}) \\<sigma> \\<Longrightarrow> P \\<sigma>\n 4. \\<And>\\<sigma> it.\n       \\<lbrakk>it \\<subseteq> dom m; it \\<noteq> {}; \\<not> c \\<sigma>;\n        I (dom m - it) \\<sigma>;\n        \\<forall>k v k' v'.\n           k \\<notin> it \\<and>\n           m k = Some v \\<and>\n           k' \\<in> it \\<and> m k' = Some v' \\<longrightarrow>\n           R (k, v) (k', v')\\<rbrakk>\n       \\<Longrightarrow> P \\<sigma>", "next"], ["proof (state)\ngoal (4 subgoals):\n 1. I (dom m - dom m) \\<sigma>0\n 2. \\<And>k v it \\<sigma>.\n       \\<lbrakk>c \\<sigma>; k \\<in> it; m k = Some v; it \\<subseteq> dom m;\n        I (dom m - it) \\<sigma>;\n        \\<forall>k' v'.\n           k' \\<in> it - {k} \\<and> m k' = Some v' \\<longrightarrow>\n           R (k, v) (k', v');\n        \\<forall>k' v'.\n           k' \\<notin> it \\<and> m k' = Some v' \\<longrightarrow>\n           R (k', v') (k, v)\\<rbrakk>\n       \\<Longrightarrow> I (dom m - (it - {k})) (f (k, v) \\<sigma>)\n 3. \\<And>\\<sigma>. I (dom m - {}) \\<sigma> \\<Longrightarrow> P \\<sigma>\n 4. \\<And>\\<sigma> it.\n       \\<lbrakk>it \\<subseteq> dom m; it \\<noteq> {}; \\<not> c \\<sigma>;\n        I (dom m - it) \\<sigma>;\n        \\<forall>k v k' v'.\n           k \\<notin> it \\<and>\n           m k = Some v \\<and>\n           k' \\<in> it \\<and> m k' = Some v' \\<longrightarrow>\n           R (k, v) (k', v')\\<rbrakk>\n       \\<Longrightarrow> P \\<sigma>", "show \"I (dom m - dom m) \\<sigma>0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. I (dom m - dom m) \\<sigma>0", "using I0"], ["proof (prove)\nusing this:\n  I {} \\<sigma>0\n\ngoal (1 subgoal):\n 1. I (dom m - dom m) \\<sigma>0", "by simp"], ["proof (state)\nthis:\n  I (dom m - dom m) \\<sigma>0\n\ngoal (3 subgoals):\n 1. \\<And>k v it \\<sigma>.\n       \\<lbrakk>c \\<sigma>; k \\<in> it; m k = Some v; it \\<subseteq> dom m;\n        I (dom m - it) \\<sigma>;\n        \\<forall>k' v'.\n           k' \\<in> it - {k} \\<and> m k' = Some v' \\<longrightarrow>\n           R (k, v) (k', v');\n        \\<forall>k' v'.\n           k' \\<notin> it \\<and> m k' = Some v' \\<longrightarrow>\n           R (k', v') (k, v)\\<rbrakk>\n       \\<Longrightarrow> I (dom m - (it - {k})) (f (k, v) \\<sigma>)\n 2. \\<And>\\<sigma>. I (dom m - {}) \\<sigma> \\<Longrightarrow> P \\<sigma>\n 3. \\<And>\\<sigma> it.\n       \\<lbrakk>it \\<subseteq> dom m; it \\<noteq> {}; \\<not> c \\<sigma>;\n        I (dom m - it) \\<sigma>;\n        \\<forall>k v k' v'.\n           k \\<notin> it \\<and>\n           m k = Some v \\<and>\n           k' \\<in> it \\<and> m k' = Some v' \\<longrightarrow>\n           R (k, v) (k', v')\\<rbrakk>\n       \\<Longrightarrow> P \\<sigma>", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>k v it \\<sigma>.\n       \\<lbrakk>c \\<sigma>; k \\<in> it; m k = Some v; it \\<subseteq> dom m;\n        I (dom m - it) \\<sigma>;\n        \\<forall>k' v'.\n           k' \\<in> it - {k} \\<and> m k' = Some v' \\<longrightarrow>\n           R (k, v) (k', v');\n        \\<forall>k' v'.\n           k' \\<notin> it \\<and> m k' = Some v' \\<longrightarrow>\n           R (k', v') (k, v)\\<rbrakk>\n       \\<Longrightarrow> I (dom m - (it - {k})) (f (k, v) \\<sigma>)\n 2. \\<And>\\<sigma>. I (dom m - {}) \\<sigma> \\<Longrightarrow> P \\<sigma>\n 3. \\<And>\\<sigma> it.\n       \\<lbrakk>it \\<subseteq> dom m; it \\<noteq> {}; \\<not> c \\<sigma>;\n        I (dom m - it) \\<sigma>;\n        \\<forall>k v k' v'.\n           k \\<notin> it \\<and>\n           m k = Some v \\<and>\n           k' \\<in> it \\<and> m k' = Some v' \\<longrightarrow>\n           R (k, v) (k', v')\\<rbrakk>\n       \\<Longrightarrow> P \\<sigma>", "fix \\<sigma>"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>k v it \\<sigma>.\n       \\<lbrakk>c \\<sigma>; k \\<in> it; m k = Some v; it \\<subseteq> dom m;\n        I (dom m - it) \\<sigma>;\n        \\<forall>k' v'.\n           k' \\<in> it - {k} \\<and> m k' = Some v' \\<longrightarrow>\n           R (k, v) (k', v');\n        \\<forall>k' v'.\n           k' \\<notin> it \\<and> m k' = Some v' \\<longrightarrow>\n           R (k', v') (k, v)\\<rbrakk>\n       \\<Longrightarrow> I (dom m - (it - {k})) (f (k, v) \\<sigma>)\n 2. \\<And>\\<sigma>. I (dom m - {}) \\<sigma> \\<Longrightarrow> P \\<sigma>\n 3. \\<And>\\<sigma> it.\n       \\<lbrakk>it \\<subseteq> dom m; it \\<noteq> {}; \\<not> c \\<sigma>;\n        I (dom m - it) \\<sigma>;\n        \\<forall>k v k' v'.\n           k \\<notin> it \\<and>\n           m k = Some v \\<and>\n           k' \\<in> it \\<and> m k' = Some v' \\<longrightarrow>\n           R (k, v) (k', v')\\<rbrakk>\n       \\<Longrightarrow> P \\<sigma>", "assume \"I (dom m - {}) \\<sigma>\""], ["proof (state)\nthis:\n  I (dom m - {}) \\<sigma>\n\ngoal (3 subgoals):\n 1. \\<And>k v it \\<sigma>.\n       \\<lbrakk>c \\<sigma>; k \\<in> it; m k = Some v; it \\<subseteq> dom m;\n        I (dom m - it) \\<sigma>;\n        \\<forall>k' v'.\n           k' \\<in> it - {k} \\<and> m k' = Some v' \\<longrightarrow>\n           R (k, v) (k', v');\n        \\<forall>k' v'.\n           k' \\<notin> it \\<and> m k' = Some v' \\<longrightarrow>\n           R (k', v') (k, v)\\<rbrakk>\n       \\<Longrightarrow> I (dom m - (it - {k})) (f (k, v) \\<sigma>)\n 2. \\<And>\\<sigma>. I (dom m - {}) \\<sigma> \\<Longrightarrow> P \\<sigma>\n 3. \\<And>\\<sigma> it.\n       \\<lbrakk>it \\<subseteq> dom m; it \\<noteq> {}; \\<not> c \\<sigma>;\n        I (dom m - it) \\<sigma>;\n        \\<forall>k v k' v'.\n           k \\<notin> it \\<and>\n           m k = Some v \\<and>\n           k' \\<in> it \\<and> m k' = Some v' \\<longrightarrow>\n           R (k, v) (k', v')\\<rbrakk>\n       \\<Longrightarrow> P \\<sigma>", "with IF"], ["proof (chain)\npicking this:\n  I (dom m) ?\\<sigma> \\<Longrightarrow> P ?\\<sigma>\n  I (dom m - {}) \\<sigma>", "show \"P \\<sigma>\""], ["proof (prove)\nusing this:\n  I (dom m) ?\\<sigma> \\<Longrightarrow> P ?\\<sigma>\n  I (dom m - {}) \\<sigma>\n\ngoal (1 subgoal):\n 1. P \\<sigma>", "by simp"], ["proof (state)\nthis:\n  P \\<sigma>\n\ngoal (2 subgoals):\n 1. \\<And>k v it \\<sigma>.\n       \\<lbrakk>c \\<sigma>; k \\<in> it; m k = Some v; it \\<subseteq> dom m;\n        I (dom m - it) \\<sigma>;\n        \\<forall>k' v'.\n           k' \\<in> it - {k} \\<and> m k' = Some v' \\<longrightarrow>\n           R (k, v) (k', v');\n        \\<forall>k' v'.\n           k' \\<notin> it \\<and> m k' = Some v' \\<longrightarrow>\n           R (k', v') (k, v)\\<rbrakk>\n       \\<Longrightarrow> I (dom m - (it - {k})) (f (k, v) \\<sigma>)\n 2. \\<And>\\<sigma> it.\n       \\<lbrakk>it \\<subseteq> dom m; it \\<noteq> {}; \\<not> c \\<sigma>;\n        I (dom m - it) \\<sigma>;\n        \\<forall>k v k' v'.\n           k \\<notin> it \\<and>\n           m k = Some v \\<and>\n           k' \\<in> it \\<and> m k' = Some v' \\<longrightarrow>\n           R (k, v) (k', v')\\<rbrakk>\n       \\<Longrightarrow> P \\<sigma>", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>k v it \\<sigma>.\n       \\<lbrakk>c \\<sigma>; k \\<in> it; m k = Some v; it \\<subseteq> dom m;\n        I (dom m - it) \\<sigma>;\n        \\<forall>k' v'.\n           k' \\<in> it - {k} \\<and> m k' = Some v' \\<longrightarrow>\n           R (k, v) (k', v');\n        \\<forall>k' v'.\n           k' \\<notin> it \\<and> m k' = Some v' \\<longrightarrow>\n           R (k', v') (k, v)\\<rbrakk>\n       \\<Longrightarrow> I (dom m - (it - {k})) (f (k, v) \\<sigma>)\n 2. \\<And>\\<sigma> it.\n       \\<lbrakk>it \\<subseteq> dom m; it \\<noteq> {}; \\<not> c \\<sigma>;\n        I (dom m - it) \\<sigma>;\n        \\<forall>k v k' v'.\n           k \\<notin> it \\<and>\n           m k = Some v \\<and>\n           k' \\<in> it \\<and> m k' = Some v' \\<longrightarrow>\n           R (k, v) (k', v')\\<rbrakk>\n       \\<Longrightarrow> P \\<sigma>", "fix \\<sigma> it"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>k v it \\<sigma>.\n       \\<lbrakk>c \\<sigma>; k \\<in> it; m k = Some v; it \\<subseteq> dom m;\n        I (dom m - it) \\<sigma>;\n        \\<forall>k' v'.\n           k' \\<in> it - {k} \\<and> m k' = Some v' \\<longrightarrow>\n           R (k, v) (k', v');\n        \\<forall>k' v'.\n           k' \\<notin> it \\<and> m k' = Some v' \\<longrightarrow>\n           R (k', v') (k, v)\\<rbrakk>\n       \\<Longrightarrow> I (dom m - (it - {k})) (f (k, v) \\<sigma>)\n 2. \\<And>\\<sigma> it.\n       \\<lbrakk>it \\<subseteq> dom m; it \\<noteq> {}; \\<not> c \\<sigma>;\n        I (dom m - it) \\<sigma>;\n        \\<forall>k v k' v'.\n           k \\<notin> it \\<and>\n           m k = Some v \\<and>\n           k' \\<in> it \\<and> m k' = Some v' \\<longrightarrow>\n           R (k, v) (k', v')\\<rbrakk>\n       \\<Longrightarrow> P \\<sigma>", "assume assms: \"it \\<subseteq> dom m\" \"it \\<noteq> {}\" \"\\<not> c \\<sigma>\" \"I (dom m - it) \\<sigma>\"\n                \"\\<forall>k v k' v'. k \\<notin> it \\<and> m k = Some v \\<and> k' \\<in> it \\<and> m k' = Some v' \\<longrightarrow>\n                             R (k, v) (k', v')\""], ["proof (state)\nthis:\n  it \\<subseteq> dom m\n  it \\<noteq> {}\n  \\<not> c \\<sigma>\n  I (dom m - it) \\<sigma>\n  \\<forall>k v k' v'.\n     k \\<notin> it \\<and>\n     m k = Some v \\<and> k' \\<in> it \\<and> m k' = Some v' \\<longrightarrow>\n     R (k, v) (k', v')\n\ngoal (2 subgoals):\n 1. \\<And>k v it \\<sigma>.\n       \\<lbrakk>c \\<sigma>; k \\<in> it; m k = Some v; it \\<subseteq> dom m;\n        I (dom m - it) \\<sigma>;\n        \\<forall>k' v'.\n           k' \\<in> it - {k} \\<and> m k' = Some v' \\<longrightarrow>\n           R (k, v) (k', v');\n        \\<forall>k' v'.\n           k' \\<notin> it \\<and> m k' = Some v' \\<longrightarrow>\n           R (k', v') (k, v)\\<rbrakk>\n       \\<Longrightarrow> I (dom m - (it - {k})) (f (k, v) \\<sigma>)\n 2. \\<And>\\<sigma> it.\n       \\<lbrakk>it \\<subseteq> dom m; it \\<noteq> {}; \\<not> c \\<sigma>;\n        I (dom m - it) \\<sigma>;\n        \\<forall>k v k' v'.\n           k \\<notin> it \\<and>\n           m k = Some v \\<and>\n           k' \\<in> it \\<and> m k' = Some v' \\<longrightarrow>\n           R (k, v) (k', v')\\<rbrakk>\n       \\<Longrightarrow> P \\<sigma>", "from assms"], ["proof (chain)\npicking this:\n  it \\<subseteq> dom m\n  it \\<noteq> {}\n  \\<not> c \\<sigma>\n  I (dom m - it) \\<sigma>\n  \\<forall>k v k' v'.\n     k \\<notin> it \\<and>\n     m k = Some v \\<and> k' \\<in> it \\<and> m k' = Some v' \\<longrightarrow>\n     R (k, v) (k', v')", "have \"dom m - it \\<noteq> dom m\""], ["proof (prove)\nusing this:\n  it \\<subseteq> dom m\n  it \\<noteq> {}\n  \\<not> c \\<sigma>\n  I (dom m - it) \\<sigma>\n  \\<forall>k v k' v'.\n     k \\<notin> it \\<and>\n     m k = Some v \\<and> k' \\<in> it \\<and> m k' = Some v' \\<longrightarrow>\n     R (k, v) (k', v')\n\ngoal (1 subgoal):\n 1. dom m - it \\<noteq> dom m", "by auto"], ["proof (state)\nthis:\n  dom m - it \\<noteq> dom m\n\ngoal (2 subgoals):\n 1. \\<And>k v it \\<sigma>.\n       \\<lbrakk>c \\<sigma>; k \\<in> it; m k = Some v; it \\<subseteq> dom m;\n        I (dom m - it) \\<sigma>;\n        \\<forall>k' v'.\n           k' \\<in> it - {k} \\<and> m k' = Some v' \\<longrightarrow>\n           R (k, v) (k', v');\n        \\<forall>k' v'.\n           k' \\<notin> it \\<and> m k' = Some v' \\<longrightarrow>\n           R (k', v') (k, v)\\<rbrakk>\n       \\<Longrightarrow> I (dom m - (it - {k})) (f (k, v) \\<sigma>)\n 2. \\<And>\\<sigma> it.\n       \\<lbrakk>it \\<subseteq> dom m; it \\<noteq> {}; \\<not> c \\<sigma>;\n        I (dom m - it) \\<sigma>;\n        \\<forall>k v k' v'.\n           k \\<notin> it \\<and>\n           m k = Some v \\<and>\n           k' \\<in> it \\<and> m k' = Some v' \\<longrightarrow>\n           R (k, v) (k', v')\\<rbrakk>\n       \\<Longrightarrow> P \\<sigma>", "with II[of \"dom m - it\" \\<sigma>] assms"], ["proof (chain)\npicking this:\n  \\<lbrakk>dom m - it \\<subseteq> dom m; dom m - it \\<noteq> dom m;\n   \\<not> c \\<sigma>; I (dom m - it) \\<sigma>;\n   \\<forall>k v k' v'.\n      k \\<in> dom m - it \\<and>\n      m k = Some v \\<and>\n      k' \\<notin> dom m - it \\<and> m k' = Some v' \\<longrightarrow>\n      R (k, v) (k', v')\\<rbrakk>\n  \\<Longrightarrow> P \\<sigma>\n  it \\<subseteq> dom m\n  it \\<noteq> {}\n  \\<not> c \\<sigma>\n  I (dom m - it) \\<sigma>\n  \\<forall>k v k' v'.\n     k \\<notin> it \\<and>\n     m k = Some v \\<and> k' \\<in> it \\<and> m k' = Some v' \\<longrightarrow>\n     R (k, v) (k', v')\n  dom m - it \\<noteq> dom m", "show \"P \\<sigma>\""], ["proof (prove)\nusing this:\n  \\<lbrakk>dom m - it \\<subseteq> dom m; dom m - it \\<noteq> dom m;\n   \\<not> c \\<sigma>; I (dom m - it) \\<sigma>;\n   \\<forall>k v k' v'.\n      k \\<in> dom m - it \\<and>\n      m k = Some v \\<and>\n      k' \\<notin> dom m - it \\<and> m k' = Some v' \\<longrightarrow>\n      R (k, v) (k', v')\\<rbrakk>\n  \\<Longrightarrow> P \\<sigma>\n  it \\<subseteq> dom m\n  it \\<noteq> {}\n  \\<not> c \\<sigma>\n  I (dom m - it) \\<sigma>\n  \\<forall>k v k' v'.\n     k \\<notin> it \\<and>\n     m k = Some v \\<and> k' \\<in> it \\<and> m k' = Some v' \\<longrightarrow>\n     R (k, v) (k', v')\n  dom m - it \\<noteq> dom m\n\ngoal (1 subgoal):\n 1. P \\<sigma>", "apply (simp add: subset_iff dom_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>k v k' v'.\n                (\\<exists>y. m k = Some y) \\<and>\n                k \\<notin> it \\<and>\n                m k = Some v \\<and>\n                (m k' = None \\<or> k' \\<in> it) \\<and>\n                m k' = Some v' \\<longrightarrow>\n                R (k, v) (k', v') \\<Longrightarrow>\n             P \\<sigma>;\n     \\<forall>t. t \\<in> it \\<longrightarrow> (\\<exists>y. m t = Some y);\n     it \\<noteq> {}; \\<not> c \\<sigma>;\n     I ({a. \\<exists>y. m a = Some y} - it) \\<sigma>;\n     \\<forall>k v k' v'.\n        k \\<notin> it \\<and>\n        m k = Some v \\<and>\n        k' \\<in> it \\<and> m k' = Some v' \\<longrightarrow>\n        R (k, v) (k', v');\n     {a. \\<exists>y. m a = Some y} - it \\<noteq>\n     {a. \\<exists>y. m a = Some y}\\<rbrakk>\n    \\<Longrightarrow> P \\<sigma>", "apply (metis option.simps(2))"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  P \\<sigma>\n\ngoal (1 subgoal):\n 1. \\<And>k v it \\<sigma>.\n       \\<lbrakk>c \\<sigma>; k \\<in> it; m k = Some v; it \\<subseteq> dom m;\n        I (dom m - it) \\<sigma>;\n        \\<forall>k' v'.\n           k' \\<in> it - {k} \\<and> m k' = Some v' \\<longrightarrow>\n           R (k, v) (k', v');\n        \\<forall>k' v'.\n           k' \\<notin> it \\<and> m k' = Some v' \\<longrightarrow>\n           R (k', v') (k, v)\\<rbrakk>\n       \\<Longrightarrow> I (dom m - (it - {k})) (f (k, v) \\<sigma>)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>k v it \\<sigma>.\n       \\<lbrakk>c \\<sigma>; k \\<in> it; m k = Some v; it \\<subseteq> dom m;\n        I (dom m - it) \\<sigma>;\n        \\<forall>k' v'.\n           k' \\<in> it - {k} \\<and> m k' = Some v' \\<longrightarrow>\n           R (k, v) (k', v');\n        \\<forall>k' v'.\n           k' \\<notin> it \\<and> m k' = Some v' \\<longrightarrow>\n           R (k', v') (k, v)\\<rbrakk>\n       \\<Longrightarrow> I (dom m - (it - {k})) (f (k, v) \\<sigma>)", "fix k v it \\<sigma>"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>k v it \\<sigma>.\n       \\<lbrakk>c \\<sigma>; k \\<in> it; m k = Some v; it \\<subseteq> dom m;\n        I (dom m - it) \\<sigma>;\n        \\<forall>k' v'.\n           k' \\<in> it - {k} \\<and> m k' = Some v' \\<longrightarrow>\n           R (k, v) (k', v');\n        \\<forall>k' v'.\n           k' \\<notin> it \\<and> m k' = Some v' \\<longrightarrow>\n           R (k', v') (k, v)\\<rbrakk>\n       \\<Longrightarrow> I (dom m - (it - {k})) (f (k, v) \\<sigma>)", "assume assms: \"c \\<sigma>\" \"k \\<in> it\" \"m k = Some v\" \"it \\<subseteq> dom m\" \"I (dom m - it) \\<sigma>\"\n                \"\\<forall>k' v'. k' \\<in> it - {k} \\<and> m k' = Some v' \\<longrightarrow> R (k, v) (k', v')\"\n                \"\\<forall>k' v'. k' \\<notin> it \\<and> m k' = Some v' \\<longrightarrow> R (k', v') (k, v)\""], ["proof (state)\nthis:\n  c \\<sigma>\n  k \\<in> it\n  m k = Some v\n  it \\<subseteq> dom m\n  I (dom m - it) \\<sigma>\n  \\<forall>k' v'.\n     k' \\<in> it - {k} \\<and> m k' = Some v' \\<longrightarrow>\n     R (k, v) (k', v')\n  \\<forall>k' v'.\n     k' \\<notin> it \\<and> m k' = Some v' \\<longrightarrow>\n     R (k', v') (k, v)\n\ngoal (1 subgoal):\n 1. \\<And>k v it \\<sigma>.\n       \\<lbrakk>c \\<sigma>; k \\<in> it; m k = Some v; it \\<subseteq> dom m;\n        I (dom m - it) \\<sigma>;\n        \\<forall>k' v'.\n           k' \\<in> it - {k} \\<and> m k' = Some v' \\<longrightarrow>\n           R (k, v) (k', v');\n        \\<forall>k' v'.\n           k' \\<notin> it \\<and> m k' = Some v' \\<longrightarrow>\n           R (k', v') (k, v)\\<rbrakk>\n       \\<Longrightarrow> I (dom m - (it - {k})) (f (k, v) \\<sigma>)", "hence \"insert k (dom m - it) = (dom m - (it - {k}))\" \"dom m - (dom m - it) = it\""], ["proof (prove)\nusing this:\n  c \\<sigma>\n  k \\<in> it\n  m k = Some v\n  it \\<subseteq> dom m\n  I (dom m - it) \\<sigma>\n  \\<forall>k' v'.\n     k' \\<in> it - {k} \\<and> m k' = Some v' \\<longrightarrow>\n     R (k, v) (k', v')\n  \\<forall>k' v'.\n     k' \\<notin> it \\<and> m k' = Some v' \\<longrightarrow>\n     R (k', v') (k, v)\n\ngoal (1 subgoal):\n 1. insert k (dom m - it) = dom m - (it - {k}) &&& dom m - (dom m - it) = it", "by auto"], ["proof (state)\nthis:\n  insert k (dom m - it) = dom m - (it - {k})\n  dom m - (dom m - it) = it\n\ngoal (1 subgoal):\n 1. \\<And>k v it \\<sigma>.\n       \\<lbrakk>c \\<sigma>; k \\<in> it; m k = Some v; it \\<subseteq> dom m;\n        I (dom m - it) \\<sigma>;\n        \\<forall>k' v'.\n           k' \\<in> it - {k} \\<and> m k' = Some v' \\<longrightarrow>\n           R (k, v) (k', v');\n        \\<forall>k' v'.\n           k' \\<notin> it \\<and> m k' = Some v' \\<longrightarrow>\n           R (k', v') (k, v)\\<rbrakk>\n       \\<Longrightarrow> I (dom m - (it - {k})) (f (k, v) \\<sigma>)", "with assms IP[of \\<sigma> k \"dom m - it\" v]"], ["proof (chain)\npicking this:\n  c \\<sigma>\n  k \\<in> it\n  m k = Some v\n  it \\<subseteq> dom m\n  I (dom m - it) \\<sigma>\n  \\<forall>k' v'.\n     k' \\<in> it - {k} \\<and> m k' = Some v' \\<longrightarrow>\n     R (k, v) (k', v')\n  \\<forall>k' v'.\n     k' \\<notin> it \\<and> m k' = Some v' \\<longrightarrow>\n     R (k', v') (k, v)\n  \\<lbrakk>c \\<sigma>; k \\<in> dom m - (dom m - it); m k = Some v;\n   dom m - it \\<subseteq> dom m; I (dom m - it) \\<sigma>;\n   \\<forall>k' v'.\n      k' \\<in> dom m - (dom m - it) - {k} \\<and>\n      m k' = Some v' \\<longrightarrow>\n      R (k, v) (k', v');\n   \\<forall>k' v'.\n      k' \\<in> dom m - it \\<and> m k' = Some v' \\<longrightarrow>\n      R (k', v') (k, v)\\<rbrakk>\n  \\<Longrightarrow> I (insert k (dom m - it)) (f (k, v) \\<sigma>)\n  insert k (dom m - it) = dom m - (it - {k})\n  dom m - (dom m - it) = it", "show \"I (dom m - (it - {k})) (f (k, v) \\<sigma>)\""], ["proof (prove)\nusing this:\n  c \\<sigma>\n  k \\<in> it\n  m k = Some v\n  it \\<subseteq> dom m\n  I (dom m - it) \\<sigma>\n  \\<forall>k' v'.\n     k' \\<in> it - {k} \\<and> m k' = Some v' \\<longrightarrow>\n     R (k, v) (k', v')\n  \\<forall>k' v'.\n     k' \\<notin> it \\<and> m k' = Some v' \\<longrightarrow>\n     R (k', v') (k, v)\n  \\<lbrakk>c \\<sigma>; k \\<in> dom m - (dom m - it); m k = Some v;\n   dom m - it \\<subseteq> dom m; I (dom m - it) \\<sigma>;\n   \\<forall>k' v'.\n      k' \\<in> dom m - (dom m - it) - {k} \\<and>\n      m k' = Some v' \\<longrightarrow>\n      R (k, v) (k', v');\n   \\<forall>k' v'.\n      k' \\<in> dom m - it \\<and> m k' = Some v' \\<longrightarrow>\n      R (k', v') (k, v)\\<rbrakk>\n  \\<Longrightarrow> I (insert k (dom m - it)) (f (k, v) \\<sigma>)\n  insert k (dom m - it) = dom m - (it - {k})\n  dom m - (dom m - it) = it\n\ngoal (1 subgoal):\n 1. I (dom m - (it - {k})) (f (k, v) \\<sigma>)", "by (simp_all add: subset_iff)"], ["proof (state)\nthis:\n  I (dom m - (it - {k})) (f (k, v) \\<sigma>)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma map_iterator_rule_P:\n  assumes \"map_iterator it m\"\n      and I0: \"I (dom m) \\<sigma>0\"\n      and IP: \"!!k v it \\<sigma>. \\<lbrakk> c \\<sigma>; k \\<in> it; m k = Some v; it \\<subseteq> dom m; I it \\<sigma> \\<rbrakk> \\<Longrightarrow> I (it - {k}) (f (k, v) \\<sigma>)\"\n      and IF: \"!!\\<sigma>. I {} \\<sigma> \\<Longrightarrow> P \\<sigma>\"\n      and II: \"!!\\<sigma> it. \\<lbrakk> it \\<subseteq> dom m; it \\<noteq> {}; \\<not> c \\<sigma>; I it \\<sigma> \\<rbrakk> \\<Longrightarrow> P \\<sigma>\"\n  shows \"P (it c f \\<sigma>0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P (it c f \\<sigma>0)", "using assms map_iterator_genord_rule_P[of it m \"\\<lambda>_ _. True\" I \\<sigma>0 c f P]"], ["proof (prove)\nusing this:\n  map_iterator it m\n  I (dom m) \\<sigma>0\n  \\<lbrakk>c ?\\<sigma>; ?k \\<in> ?it; m ?k = Some ?v; ?it \\<subseteq> dom m;\n   I ?it ?\\<sigma>\\<rbrakk>\n  \\<Longrightarrow> I (?it - {?k}) (f (?k, ?v) ?\\<sigma>)\n  I {} ?\\<sigma> \\<Longrightarrow> P ?\\<sigma>\n  \\<lbrakk>?it \\<subseteq> dom m; ?it \\<noteq> {}; \\<not> c ?\\<sigma>;\n   I ?it ?\\<sigma>\\<rbrakk>\n  \\<Longrightarrow> P ?\\<sigma>\n  \\<lbrakk>map_iterator_genord it m (\\<lambda>_ _. True);\n   I (dom m) \\<sigma>0;\n   \\<And>k v it \\<sigma>.\n      \\<lbrakk>c \\<sigma>; k \\<in> it; m k = Some v; it \\<subseteq> dom m;\n       I it \\<sigma>;\n       \\<forall>k' v'.\n          k' \\<in> it - {k} \\<and> m k' = Some v' \\<longrightarrow> True;\n       \\<forall>k' v'.\n          k' \\<notin> it \\<and> m k' = Some v' \\<longrightarrow>\n          True\\<rbrakk>\n      \\<Longrightarrow> I (it - {k}) (f (k, v) \\<sigma>);\n   \\<And>\\<sigma>. I {} \\<sigma> \\<Longrightarrow> P \\<sigma>;\n   \\<And>\\<sigma> it.\n      \\<lbrakk>it \\<subseteq> dom m; it \\<noteq> {}; \\<not> c \\<sigma>;\n       I it \\<sigma>;\n       \\<forall>k v k' v'.\n          k \\<notin> it \\<and>\n          m k = Some v \\<and>\n          k' \\<in> it \\<and> m k' = Some v' \\<longrightarrow>\n          True\\<rbrakk>\n      \\<Longrightarrow> P \\<sigma>\\<rbrakk>\n  \\<Longrightarrow> P (it c f \\<sigma>0)\n\ngoal (1 subgoal):\n 1. P (it c f \\<sigma>0)", "unfolding set_iterator_def"], ["proof (prove)\nusing this:\n  map_iterator_genord it m (\\<lambda>_ _. True)\n  I (dom m) \\<sigma>0\n  \\<lbrakk>c ?\\<sigma>; ?k \\<in> ?it; m ?k = Some ?v; ?it \\<subseteq> dom m;\n   I ?it ?\\<sigma>\\<rbrakk>\n  \\<Longrightarrow> I (?it - {?k}) (f (?k, ?v) ?\\<sigma>)\n  I {} ?\\<sigma> \\<Longrightarrow> P ?\\<sigma>\n  \\<lbrakk>?it \\<subseteq> dom m; ?it \\<noteq> {}; \\<not> c ?\\<sigma>;\n   I ?it ?\\<sigma>\\<rbrakk>\n  \\<Longrightarrow> P ?\\<sigma>\n  \\<lbrakk>map_iterator_genord it m (\\<lambda>_ _. True);\n   I (dom m) \\<sigma>0;\n   \\<And>k v it \\<sigma>.\n      \\<lbrakk>c \\<sigma>; k \\<in> it; m k = Some v; it \\<subseteq> dom m;\n       I it \\<sigma>;\n       \\<forall>k' v'.\n          k' \\<in> it - {k} \\<and> m k' = Some v' \\<longrightarrow> True;\n       \\<forall>k' v'.\n          k' \\<notin> it \\<and> m k' = Some v' \\<longrightarrow>\n          True\\<rbrakk>\n      \\<Longrightarrow> I (it - {k}) (f (k, v) \\<sigma>);\n   \\<And>\\<sigma>. I {} \\<sigma> \\<Longrightarrow> P \\<sigma>;\n   \\<And>\\<sigma> it.\n      \\<lbrakk>it \\<subseteq> dom m; it \\<noteq> {}; \\<not> c \\<sigma>;\n       I it \\<sigma>;\n       \\<forall>k v k' v'.\n          k \\<notin> it \\<and>\n          m k = Some v \\<and>\n          k' \\<in> it \\<and> m k' = Some v' \\<longrightarrow>\n          True\\<rbrakk>\n      \\<Longrightarrow> P \\<sigma>\\<rbrakk>\n  \\<Longrightarrow> P (it c f \\<sigma>0)\n\ngoal (1 subgoal):\n 1. P (it c f \\<sigma>0)", "by simp"], ["", "lemma map_iterator_rule_insert_P:\n  assumes \"map_iterator it m\"\n      and I0: \"I {} \\<sigma>0\"\n      and IP: \"!!k v it \\<sigma>. \\<lbrakk> c \\<sigma>; k \\<in> dom m - it; m k = Some v; it \\<subseteq> dom m; I it \\<sigma> \\<rbrakk> \\<Longrightarrow> I (insert k it) (f (k, v) \\<sigma>)\"\n      and IF: \"!!\\<sigma>. I (dom m) \\<sigma> \\<Longrightarrow> P \\<sigma>\"\n      and II: \"!!\\<sigma> it. \\<lbrakk> it \\<subseteq> dom m; it \\<noteq> dom m; \\<not> c \\<sigma>; I it \\<sigma> \\<rbrakk> \\<Longrightarrow> P \\<sigma>\"\n  shows \"P (it c f \\<sigma>0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P (it c f \\<sigma>0)", "using assms map_iterator_genord_rule_insert_P[of it m \"\\<lambda>_ _. True\" I \\<sigma>0 c f P]"], ["proof (prove)\nusing this:\n  map_iterator it m\n  I {} \\<sigma>0\n  \\<lbrakk>c ?\\<sigma>; ?k \\<in> dom m - ?it; m ?k = Some ?v;\n   ?it \\<subseteq> dom m; I ?it ?\\<sigma>\\<rbrakk>\n  \\<Longrightarrow> I (insert ?k ?it) (f (?k, ?v) ?\\<sigma>)\n  I (dom m) ?\\<sigma> \\<Longrightarrow> P ?\\<sigma>\n  \\<lbrakk>?it \\<subseteq> dom m; ?it \\<noteq> dom m; \\<not> c ?\\<sigma>;\n   I ?it ?\\<sigma>\\<rbrakk>\n  \\<Longrightarrow> P ?\\<sigma>\n  \\<lbrakk>map_iterator_genord it m (\\<lambda>_ _. True); I {} \\<sigma>0;\n   \\<And>k v it \\<sigma>.\n      \\<lbrakk>c \\<sigma>; k \\<in> dom m - it; m k = Some v;\n       it \\<subseteq> dom m; I it \\<sigma>;\n       \\<forall>k' v'.\n          k' \\<in> dom m - it - {k} \\<and> m k' = Some v' \\<longrightarrow>\n          True;\n       \\<forall>k' v'.\n          k' \\<in> it \\<and> m k' = Some v' \\<longrightarrow> True\\<rbrakk>\n      \\<Longrightarrow> I (insert k it) (f (k, v) \\<sigma>);\n   \\<And>\\<sigma>. I (dom m) \\<sigma> \\<Longrightarrow> P \\<sigma>;\n   \\<And>\\<sigma> it.\n      \\<lbrakk>it \\<subseteq> dom m; it \\<noteq> dom m; \\<not> c \\<sigma>;\n       I it \\<sigma>;\n       \\<forall>k v k' v'.\n          k \\<in> it \\<and>\n          m k = Some v \\<and>\n          k' \\<notin> it \\<and> m k' = Some v' \\<longrightarrow>\n          True\\<rbrakk>\n      \\<Longrightarrow> P \\<sigma>\\<rbrakk>\n  \\<Longrightarrow> P (it c f \\<sigma>0)\n\ngoal (1 subgoal):\n 1. P (it c f \\<sigma>0)", "unfolding set_iterator_def"], ["proof (prove)\nusing this:\n  map_iterator_genord it m (\\<lambda>_ _. True)\n  I {} \\<sigma>0\n  \\<lbrakk>c ?\\<sigma>; ?k \\<in> dom m - ?it; m ?k = Some ?v;\n   ?it \\<subseteq> dom m; I ?it ?\\<sigma>\\<rbrakk>\n  \\<Longrightarrow> I (insert ?k ?it) (f (?k, ?v) ?\\<sigma>)\n  I (dom m) ?\\<sigma> \\<Longrightarrow> P ?\\<sigma>\n  \\<lbrakk>?it \\<subseteq> dom m; ?it \\<noteq> dom m; \\<not> c ?\\<sigma>;\n   I ?it ?\\<sigma>\\<rbrakk>\n  \\<Longrightarrow> P ?\\<sigma>\n  \\<lbrakk>map_iterator_genord it m (\\<lambda>_ _. True); I {} \\<sigma>0;\n   \\<And>k v it \\<sigma>.\n      \\<lbrakk>c \\<sigma>; k \\<in> dom m - it; m k = Some v;\n       it \\<subseteq> dom m; I it \\<sigma>;\n       \\<forall>k' v'.\n          k' \\<in> dom m - it - {k} \\<and> m k' = Some v' \\<longrightarrow>\n          True;\n       \\<forall>k' v'.\n          k' \\<in> it \\<and> m k' = Some v' \\<longrightarrow> True\\<rbrakk>\n      \\<Longrightarrow> I (insert k it) (f (k, v) \\<sigma>);\n   \\<And>\\<sigma>. I (dom m) \\<sigma> \\<Longrightarrow> P \\<sigma>;\n   \\<And>\\<sigma> it.\n      \\<lbrakk>it \\<subseteq> dom m; it \\<noteq> dom m; \\<not> c \\<sigma>;\n       I it \\<sigma>;\n       \\<forall>k v k' v'.\n          k \\<in> it \\<and>\n          m k = Some v \\<and>\n          k' \\<notin> it \\<and> m k' = Some v' \\<longrightarrow>\n          True\\<rbrakk>\n      \\<Longrightarrow> P \\<sigma>\\<rbrakk>\n  \\<Longrightarrow> P (it c f \\<sigma>0)\n\ngoal (1 subgoal):\n 1. P (it c f \\<sigma>0)", "by simp"], ["", "lemma map_iterator_no_cond_rule_P:\n  assumes \"map_iterator it m\"\n      and I0: \"I (dom m) \\<sigma>0\"\n      and IP: \"!!k v it \\<sigma>. \\<lbrakk> k \\<in> it; m k = Some v; it \\<subseteq> dom m; I it \\<sigma> \\<rbrakk> \\<Longrightarrow> I (it - {k}) (f (k, v) \\<sigma>)\"\n      and IF: \"!!\\<sigma>. I {} \\<sigma> \\<Longrightarrow> P \\<sigma>\"\n  shows \"P (it (\\<lambda>_. True) f \\<sigma>0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P (it (\\<lambda>_. True) f \\<sigma>0)", "using assms map_iterator_genord_rule_P[of it m \"\\<lambda>_ _. True\" I \\<sigma>0 \"\\<lambda>_. True\" f P]"], ["proof (prove)\nusing this:\n  map_iterator it m\n  I (dom m) \\<sigma>0\n  \\<lbrakk>?k \\<in> ?it; m ?k = Some ?v; ?it \\<subseteq> dom m;\n   I ?it ?\\<sigma>\\<rbrakk>\n  \\<Longrightarrow> I (?it - {?k}) (f (?k, ?v) ?\\<sigma>)\n  I {} ?\\<sigma> \\<Longrightarrow> P ?\\<sigma>\n  \\<lbrakk>map_iterator_genord it m (\\<lambda>_ _. True);\n   I (dom m) \\<sigma>0;\n   \\<And>k v it \\<sigma>.\n      \\<lbrakk>True; k \\<in> it; m k = Some v; it \\<subseteq> dom m;\n       I it \\<sigma>;\n       \\<forall>k' v'.\n          k' \\<in> it - {k} \\<and> m k' = Some v' \\<longrightarrow> True;\n       \\<forall>k' v'.\n          k' \\<notin> it \\<and> m k' = Some v' \\<longrightarrow>\n          True\\<rbrakk>\n      \\<Longrightarrow> I (it - {k}) (f (k, v) \\<sigma>);\n   \\<And>\\<sigma>. I {} \\<sigma> \\<Longrightarrow> P \\<sigma>;\n   \\<And>\\<sigma> it.\n      \\<lbrakk>it \\<subseteq> dom m; it \\<noteq> {}; \\<not> True;\n       I it \\<sigma>;\n       \\<forall>k v k' v'.\n          k \\<notin> it \\<and>\n          m k = Some v \\<and>\n          k' \\<in> it \\<and> m k' = Some v' \\<longrightarrow>\n          True\\<rbrakk>\n      \\<Longrightarrow> P \\<sigma>\\<rbrakk>\n  \\<Longrightarrow> P (it (\\<lambda>_. True) f \\<sigma>0)\n\ngoal (1 subgoal):\n 1. P (it (\\<lambda>_. True) f \\<sigma>0)", "unfolding set_iterator_def"], ["proof (prove)\nusing this:\n  map_iterator_genord it m (\\<lambda>_ _. True)\n  I (dom m) \\<sigma>0\n  \\<lbrakk>?k \\<in> ?it; m ?k = Some ?v; ?it \\<subseteq> dom m;\n   I ?it ?\\<sigma>\\<rbrakk>\n  \\<Longrightarrow> I (?it - {?k}) (f (?k, ?v) ?\\<sigma>)\n  I {} ?\\<sigma> \\<Longrightarrow> P ?\\<sigma>\n  \\<lbrakk>map_iterator_genord it m (\\<lambda>_ _. True);\n   I (dom m) \\<sigma>0;\n   \\<And>k v it \\<sigma>.\n      \\<lbrakk>True; k \\<in> it; m k = Some v; it \\<subseteq> dom m;\n       I it \\<sigma>;\n       \\<forall>k' v'.\n          k' \\<in> it - {k} \\<and> m k' = Some v' \\<longrightarrow> True;\n       \\<forall>k' v'.\n          k' \\<notin> it \\<and> m k' = Some v' \\<longrightarrow>\n          True\\<rbrakk>\n      \\<Longrightarrow> I (it - {k}) (f (k, v) \\<sigma>);\n   \\<And>\\<sigma>. I {} \\<sigma> \\<Longrightarrow> P \\<sigma>;\n   \\<And>\\<sigma> it.\n      \\<lbrakk>it \\<subseteq> dom m; it \\<noteq> {}; \\<not> True;\n       I it \\<sigma>;\n       \\<forall>k v k' v'.\n          k \\<notin> it \\<and>\n          m k = Some v \\<and>\n          k' \\<in> it \\<and> m k' = Some v' \\<longrightarrow>\n          True\\<rbrakk>\n      \\<Longrightarrow> P \\<sigma>\\<rbrakk>\n  \\<Longrightarrow> P (it (\\<lambda>_. True) f \\<sigma>0)\n\ngoal (1 subgoal):\n 1. P (it (\\<lambda>_. True) f \\<sigma>0)", "by simp"], ["", "lemma map_iterator_no_cond_rule_insert_P:\n  assumes \"map_iterator it m\"\n      and I0: \"I {} \\<sigma>0\"\n      and IP: \"!!k v it \\<sigma>. \\<lbrakk> k \\<in> dom m - it; m k = Some v; it \\<subseteq> dom m; I it \\<sigma> \\<rbrakk> \\<Longrightarrow> I (insert k it) (f (k, v) \\<sigma>)\"\n      and IF: \"!!\\<sigma>. I (dom m) \\<sigma> \\<Longrightarrow> P \\<sigma>\"\n  shows \"P (it (\\<lambda>_. True) f \\<sigma>0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P (it (\\<lambda>_. True) f \\<sigma>0)", "using assms map_iterator_genord_rule_insert_P[of it m \"\\<lambda>_ _. True\" I \\<sigma>0 \"\\<lambda>_. True\" f P]"], ["proof (prove)\nusing this:\n  map_iterator it m\n  I {} \\<sigma>0\n  \\<lbrakk>?k \\<in> dom m - ?it; m ?k = Some ?v; ?it \\<subseteq> dom m;\n   I ?it ?\\<sigma>\\<rbrakk>\n  \\<Longrightarrow> I (insert ?k ?it) (f (?k, ?v) ?\\<sigma>)\n  I (dom m) ?\\<sigma> \\<Longrightarrow> P ?\\<sigma>\n  \\<lbrakk>map_iterator_genord it m (\\<lambda>_ _. True); I {} \\<sigma>0;\n   \\<And>k v it \\<sigma>.\n      \\<lbrakk>True; k \\<in> dom m - it; m k = Some v; it \\<subseteq> dom m;\n       I it \\<sigma>;\n       \\<forall>k' v'.\n          k' \\<in> dom m - it - {k} \\<and> m k' = Some v' \\<longrightarrow>\n          True;\n       \\<forall>k' v'.\n          k' \\<in> it \\<and> m k' = Some v' \\<longrightarrow> True\\<rbrakk>\n      \\<Longrightarrow> I (insert k it) (f (k, v) \\<sigma>);\n   \\<And>\\<sigma>. I (dom m) \\<sigma> \\<Longrightarrow> P \\<sigma>;\n   \\<And>\\<sigma> it.\n      \\<lbrakk>it \\<subseteq> dom m; it \\<noteq> dom m; \\<not> True;\n       I it \\<sigma>;\n       \\<forall>k v k' v'.\n          k \\<in> it \\<and>\n          m k = Some v \\<and>\n          k' \\<notin> it \\<and> m k' = Some v' \\<longrightarrow>\n          True\\<rbrakk>\n      \\<Longrightarrow> P \\<sigma>\\<rbrakk>\n  \\<Longrightarrow> P (it (\\<lambda>_. True) f \\<sigma>0)\n\ngoal (1 subgoal):\n 1. P (it (\\<lambda>_. True) f \\<sigma>0)", "unfolding set_iterator_def"], ["proof (prove)\nusing this:\n  map_iterator_genord it m (\\<lambda>_ _. True)\n  I {} \\<sigma>0\n  \\<lbrakk>?k \\<in> dom m - ?it; m ?k = Some ?v; ?it \\<subseteq> dom m;\n   I ?it ?\\<sigma>\\<rbrakk>\n  \\<Longrightarrow> I (insert ?k ?it) (f (?k, ?v) ?\\<sigma>)\n  I (dom m) ?\\<sigma> \\<Longrightarrow> P ?\\<sigma>\n  \\<lbrakk>map_iterator_genord it m (\\<lambda>_ _. True); I {} \\<sigma>0;\n   \\<And>k v it \\<sigma>.\n      \\<lbrakk>True; k \\<in> dom m - it; m k = Some v; it \\<subseteq> dom m;\n       I it \\<sigma>;\n       \\<forall>k' v'.\n          k' \\<in> dom m - it - {k} \\<and> m k' = Some v' \\<longrightarrow>\n          True;\n       \\<forall>k' v'.\n          k' \\<in> it \\<and> m k' = Some v' \\<longrightarrow> True\\<rbrakk>\n      \\<Longrightarrow> I (insert k it) (f (k, v) \\<sigma>);\n   \\<And>\\<sigma>. I (dom m) \\<sigma> \\<Longrightarrow> P \\<sigma>;\n   \\<And>\\<sigma> it.\n      \\<lbrakk>it \\<subseteq> dom m; it \\<noteq> dom m; \\<not> True;\n       I it \\<sigma>;\n       \\<forall>k v k' v'.\n          k \\<in> it \\<and>\n          m k = Some v \\<and>\n          k' \\<notin> it \\<and> m k' = Some v' \\<longrightarrow>\n          True\\<rbrakk>\n      \\<Longrightarrow> P \\<sigma>\\<rbrakk>\n  \\<Longrightarrow> P (it (\\<lambda>_. True) f \\<sigma>0)\n\ngoal (1 subgoal):\n 1. P (it (\\<lambda>_. True) f \\<sigma>0)", "by simp"], ["", "subsection \\<open>Ordered Iterators\\<close>"], ["", "text \\<open>Selecting according to a linear order is another case that is interesting. \n Ordered iterators over maps, i.\\,e.\\ iterators over key-value pairs,\n use an order on the keys.\\<close>"], ["", "context linorder begin"], ["", "definition \"set_iterator_linord it S0 \n    \\<equiv> set_iterator_genord it S0 (\\<le>)\""], ["", "definition \"set_iterator_rev_linord it S0 \n    \\<equiv> set_iterator_genord it S0 (\\<ge>)\""], ["", "definition \"set_iterator_map_linord it S0 \\<equiv> \n     set_iterator_genord it S0 (\\<lambda>(k,_) (k',_). k\\<le>k')\""], ["", "definition \"set_iterator_map_rev_linord it S0 \\<equiv> \n     set_iterator_genord it S0 (\\<lambda>(k,_) (k',_). k\\<ge>k')\""], ["", "abbreviation \"map_iterator_linord it m \\<equiv> \n    set_iterator_map_linord it (map_to_set m)\""], ["", "abbreviation \"map_iterator_rev_linord it m \\<equiv> \n    set_iterator_map_rev_linord it (map_to_set m)\""], ["", "lemma set_iterator_linord_rule_P:\n  \"\\<lbrakk> set_iterator_linord it S0;\n     I S0 \\<sigma>0;\n     !!S \\<sigma> x. \\<lbrakk> c \\<sigma>; x \\<in> S; I S \\<sigma>; S \\<subseteq> S0; \\<And>x'. x' \\<in> S0-S \\<Longrightarrow> x' \\<le> x; \\<And>x'. x' \\<in> S \\<Longrightarrow> x \\<le> x'\\<rbrakk> \\<Longrightarrow> I (S - {x}) (f x \\<sigma>);\n     !!\\<sigma>. I {} \\<sigma> \\<Longrightarrow> P \\<sigma>;\n     !!\\<sigma> S. S \\<subseteq> S0 \\<Longrightarrow> S \\<noteq> {} \\<Longrightarrow> (\\<And>x x'. \\<lbrakk>x \\<in> S; x' \\<in> S0-S\\<rbrakk> \\<Longrightarrow> x' \\<le> x) \\<Longrightarrow> \\<not> c \\<sigma> \\<Longrightarrow> I S \\<sigma> \\<Longrightarrow> P \\<sigma>\n   \\<rbrakk> \\<Longrightarrow> P (it c f \\<sigma>0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>set_iterator_linord it S0; I S0 \\<sigma>0;\n     \\<And>S \\<sigma> x.\n        \\<lbrakk>c \\<sigma>; x \\<in> S; I S \\<sigma>; S \\<subseteq> S0;\n         \\<And>x'. x' \\<in> S0 - S \\<Longrightarrow> x' \\<le> x;\n         \\<And>x'. x' \\<in> S \\<Longrightarrow> x \\<le> x'\\<rbrakk>\n        \\<Longrightarrow> I (S - {x}) (f x \\<sigma>);\n     \\<And>\\<sigma>. I {} \\<sigma> \\<Longrightarrow> P \\<sigma>;\n     \\<And>\\<sigma> S.\n        \\<lbrakk>S \\<subseteq> S0; S \\<noteq> {};\n         \\<And>x x'.\n            \\<lbrakk>x \\<in> S; x' \\<in> S0 - S\\<rbrakk>\n            \\<Longrightarrow> x' \\<le> x;\n         \\<not> c \\<sigma>; I S \\<sigma>\\<rbrakk>\n        \\<Longrightarrow> P \\<sigma>\\<rbrakk>\n    \\<Longrightarrow> P (it c f \\<sigma>0)", "unfolding set_iterator_linord_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>set_iterator_genord it S0 (\\<le>); I S0 \\<sigma>0;\n     \\<And>S \\<sigma> x.\n        \\<lbrakk>c \\<sigma>; x \\<in> S; I S \\<sigma>; S \\<subseteq> S0;\n         \\<And>x'. x' \\<in> S0 - S \\<Longrightarrow> x' \\<le> x;\n         \\<And>x'. x' \\<in> S \\<Longrightarrow> x \\<le> x'\\<rbrakk>\n        \\<Longrightarrow> I (S - {x}) (f x \\<sigma>);\n     \\<And>\\<sigma>. I {} \\<sigma> \\<Longrightarrow> P \\<sigma>;\n     \\<And>\\<sigma> S.\n        \\<lbrakk>S \\<subseteq> S0; S \\<noteq> {};\n         \\<And>x x'.\n            \\<lbrakk>x \\<in> S; x' \\<in> S0 - S\\<rbrakk>\n            \\<Longrightarrow> x' \\<le> x;\n         \\<not> c \\<sigma>; I S \\<sigma>\\<rbrakk>\n        \\<Longrightarrow> P \\<sigma>\\<rbrakk>\n    \\<Longrightarrow> P (it c f \\<sigma>0)", "apply (rule set_iterator_genord.iteratei_rule_P [of it S0 \"(\\<le>)\" I \\<sigma>0 c f P])"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<lbrakk>set_iterator_genord it S0 (\\<le>); I S0 \\<sigma>0;\n     \\<And>S \\<sigma> x.\n        \\<lbrakk>c \\<sigma>; x \\<in> S; I S \\<sigma>; S \\<subseteq> S0;\n         \\<And>x'. x' \\<in> S0 - S \\<Longrightarrow> x' \\<le> x;\n         \\<And>x'. x' \\<in> S \\<Longrightarrow> x \\<le> x'\\<rbrakk>\n        \\<Longrightarrow> I (S - {x}) (f x \\<sigma>);\n     \\<And>\\<sigma>. I {} \\<sigma> \\<Longrightarrow> P \\<sigma>;\n     \\<And>\\<sigma> S.\n        \\<lbrakk>S \\<subseteq> S0; S \\<noteq> {};\n         \\<And>x x'.\n            \\<lbrakk>x \\<in> S; x' \\<in> S0 - S\\<rbrakk>\n            \\<Longrightarrow> x' \\<le> x;\n         \\<not> c \\<sigma>; I S \\<sigma>\\<rbrakk>\n        \\<Longrightarrow> P \\<sigma>\\<rbrakk>\n    \\<Longrightarrow> set_iterator_genord it S0 (\\<le>)\n 2. \\<lbrakk>set_iterator_genord it S0 (\\<le>); I S0 \\<sigma>0;\n     \\<And>S \\<sigma> x.\n        \\<lbrakk>c \\<sigma>; x \\<in> S; I S \\<sigma>; S \\<subseteq> S0;\n         \\<And>x'. x' \\<in> S0 - S \\<Longrightarrow> x' \\<le> x;\n         \\<And>x'. x' \\<in> S \\<Longrightarrow> x \\<le> x'\\<rbrakk>\n        \\<Longrightarrow> I (S - {x}) (f x \\<sigma>);\n     \\<And>\\<sigma>. I {} \\<sigma> \\<Longrightarrow> P \\<sigma>;\n     \\<And>\\<sigma> S.\n        \\<lbrakk>S \\<subseteq> S0; S \\<noteq> {};\n         \\<And>x x'.\n            \\<lbrakk>x \\<in> S; x' \\<in> S0 - S\\<rbrakk>\n            \\<Longrightarrow> x' \\<le> x;\n         \\<not> c \\<sigma>; I S \\<sigma>\\<rbrakk>\n        \\<Longrightarrow> P \\<sigma>\\<rbrakk>\n    \\<Longrightarrow> I S0 \\<sigma>0\n 3. \\<And>S \\<sigma> x.\n       \\<lbrakk>set_iterator_genord it S0 (\\<le>); I S0 \\<sigma>0;\n        \\<And>S \\<sigma> x.\n           \\<lbrakk>c \\<sigma>; x \\<in> S; I S \\<sigma>; S \\<subseteq> S0;\n            \\<And>x'. x' \\<in> S0 - S \\<Longrightarrow> x' \\<le> x;\n            \\<And>x'. x' \\<in> S \\<Longrightarrow> x \\<le> x'\\<rbrakk>\n           \\<Longrightarrow> I (S - {x}) (f x \\<sigma>);\n        \\<And>\\<sigma>. I {} \\<sigma> \\<Longrightarrow> P \\<sigma>;\n        \\<And>\\<sigma> S.\n           \\<lbrakk>S \\<subseteq> S0; S \\<noteq> {};\n            \\<And>x x'.\n               \\<lbrakk>x \\<in> S; x' \\<in> S0 - S\\<rbrakk>\n               \\<Longrightarrow> x' \\<le> x;\n            \\<not> c \\<sigma>; I S \\<sigma>\\<rbrakk>\n           \\<Longrightarrow> P \\<sigma>;\n        c \\<sigma>; x \\<in> S; I S \\<sigma>; S \\<subseteq> S0;\n        \\<forall>y\\<in>S - {x}. x \\<le> y;\n        \\<forall>y\\<in>S0 - S. y \\<le> x\\<rbrakk>\n       \\<Longrightarrow> I (S - {x}) (f x \\<sigma>)\n 4. \\<And>\\<sigma>.\n       \\<lbrakk>set_iterator_genord it S0 (\\<le>); I S0 \\<sigma>0;\n        \\<And>S \\<sigma> x.\n           \\<lbrakk>c \\<sigma>; x \\<in> S; I S \\<sigma>; S \\<subseteq> S0;\n            \\<And>x'. x' \\<in> S0 - S \\<Longrightarrow> x' \\<le> x;\n            \\<And>x'. x' \\<in> S \\<Longrightarrow> x \\<le> x'\\<rbrakk>\n           \\<Longrightarrow> I (S - {x}) (f x \\<sigma>);\n        \\<And>\\<sigma>. I {} \\<sigma> \\<Longrightarrow> P \\<sigma>;\n        \\<And>\\<sigma> S.\n           \\<lbrakk>S \\<subseteq> S0; S \\<noteq> {};\n            \\<And>x x'.\n               \\<lbrakk>x \\<in> S; x' \\<in> S0 - S\\<rbrakk>\n               \\<Longrightarrow> x' \\<le> x;\n            \\<not> c \\<sigma>; I S \\<sigma>\\<rbrakk>\n           \\<Longrightarrow> P \\<sigma>;\n        I {} \\<sigma>\\<rbrakk>\n       \\<Longrightarrow> P \\<sigma>\n 5. \\<And>\\<sigma> S.\n       \\<lbrakk>set_iterator_genord it S0 (\\<le>); I S0 \\<sigma>0;\n        \\<And>S \\<sigma> x.\n           \\<lbrakk>c \\<sigma>; x \\<in> S; I S \\<sigma>; S \\<subseteq> S0;\n            \\<And>x'. x' \\<in> S0 - S \\<Longrightarrow> x' \\<le> x;\n            \\<And>x'. x' \\<in> S \\<Longrightarrow> x \\<le> x'\\<rbrakk>\n           \\<Longrightarrow> I (S - {x}) (f x \\<sigma>);\n        \\<And>\\<sigma>. I {} \\<sigma> \\<Longrightarrow> P \\<sigma>;\n        \\<And>\\<sigma> S.\n           \\<lbrakk>S \\<subseteq> S0; S \\<noteq> {};\n            \\<And>x x'.\n               \\<lbrakk>x \\<in> S; x' \\<in> S0 - S\\<rbrakk>\n               \\<Longrightarrow> x' \\<le> x;\n            \\<not> c \\<sigma>; I S \\<sigma>\\<rbrakk>\n           \\<Longrightarrow> P \\<sigma>;\n        S \\<subseteq> S0; S \\<noteq> {}; \\<not> c \\<sigma>; I S \\<sigma>;\n        \\<forall>x\\<in>S. \\<forall>y\\<in>S0 - S. y \\<le> x\\<rbrakk>\n       \\<Longrightarrow> P \\<sigma>", "apply (simp_all add: Ball_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>S \\<sigma> x.\n       \\<lbrakk>set_iterator_genord it S0 (\\<le>); I S0 \\<sigma>0;\n        \\<And>S \\<sigma> x.\n           \\<lbrakk>c \\<sigma>; x \\<in> S; I S \\<sigma>; S \\<subseteq> S0;\n            \\<And>x'.\n               x' \\<in> S0 \\<and> x' \\<notin> S \\<Longrightarrow>\n               x' \\<le> x;\n            \\<And>x'. x' \\<in> S \\<Longrightarrow> x \\<le> x'\\<rbrakk>\n           \\<Longrightarrow> I (S - {x}) (f x \\<sigma>);\n        \\<And>\\<sigma>. I {} \\<sigma> \\<Longrightarrow> P \\<sigma>;\n        \\<And>\\<sigma> S.\n           \\<lbrakk>S \\<subseteq> S0; S \\<noteq> {};\n            \\<And>x x'.\n               \\<lbrakk>x \\<in> S; x' \\<in> S0 \\<and> x' \\<notin> S\\<rbrakk>\n               \\<Longrightarrow> x' \\<le> x;\n            \\<not> c \\<sigma>; I S \\<sigma>\\<rbrakk>\n           \\<Longrightarrow> P \\<sigma>;\n        c \\<sigma>; x \\<in> S; I S \\<sigma>; S \\<subseteq> S0;\n        \\<forall>xa.\n           xa \\<in> S \\<and> xa \\<noteq> x \\<longrightarrow> x \\<le> xa;\n        \\<forall>xa.\n           xa \\<in> S0 \\<and> xa \\<notin> S \\<longrightarrow>\n           xa \\<le> x\\<rbrakk>\n       \\<Longrightarrow> I (S - {x}) (f x \\<sigma>)", "apply (metis order_refl)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma set_iterator_linord_rule_insert_P:\n  \"\\<lbrakk> set_iterator_linord it S0;\n     I {} \\<sigma>0;\n     !!S \\<sigma> x. \\<lbrakk> c \\<sigma>; x \\<in> S0 - S; I S \\<sigma>; S \\<subseteq> S0; \\<And>x'. x' \\<in> S \\<Longrightarrow> x' \\<le> x; \\<And>x'. x' \\<in> S0 - S \\<Longrightarrow> x \\<le> x'\\<rbrakk>  \\<Longrightarrow> I (insert x S) (f x \\<sigma>);\n     !!\\<sigma>. I S0 \\<sigma> \\<Longrightarrow> P \\<sigma>;\n     !!\\<sigma> S. S \\<subseteq> S0 \\<Longrightarrow> S \\<noteq> S0 \\<Longrightarrow> (\\<And>x x'. \\<lbrakk>x \\<in> S0-S; x' \\<in> S\\<rbrakk> \\<Longrightarrow> x' \\<le> x) \\<Longrightarrow> \\<not> c \\<sigma> \\<Longrightarrow> I S \\<sigma> \\<Longrightarrow> P \\<sigma>\n   \\<rbrakk> \\<Longrightarrow> P (it c f \\<sigma>0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>set_iterator_linord it S0; I {} \\<sigma>0;\n     \\<And>S \\<sigma> x.\n        \\<lbrakk>c \\<sigma>; x \\<in> S0 - S; I S \\<sigma>; S \\<subseteq> S0;\n         \\<And>x'. x' \\<in> S \\<Longrightarrow> x' \\<le> x;\n         \\<And>x'. x' \\<in> S0 - S \\<Longrightarrow> x \\<le> x'\\<rbrakk>\n        \\<Longrightarrow> I (insert x S) (f x \\<sigma>);\n     \\<And>\\<sigma>. I S0 \\<sigma> \\<Longrightarrow> P \\<sigma>;\n     \\<And>\\<sigma> S.\n        \\<lbrakk>S \\<subseteq> S0; S \\<noteq> S0;\n         \\<And>x x'.\n            \\<lbrakk>x \\<in> S0 - S; x' \\<in> S\\<rbrakk>\n            \\<Longrightarrow> x' \\<le> x;\n         \\<not> c \\<sigma>; I S \\<sigma>\\<rbrakk>\n        \\<Longrightarrow> P \\<sigma>\\<rbrakk>\n    \\<Longrightarrow> P (it c f \\<sigma>0)", "unfolding set_iterator_linord_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>set_iterator_genord it S0 (\\<le>); I {} \\<sigma>0;\n     \\<And>S \\<sigma> x.\n        \\<lbrakk>c \\<sigma>; x \\<in> S0 - S; I S \\<sigma>; S \\<subseteq> S0;\n         \\<And>x'. x' \\<in> S \\<Longrightarrow> x' \\<le> x;\n         \\<And>x'. x' \\<in> S0 - S \\<Longrightarrow> x \\<le> x'\\<rbrakk>\n        \\<Longrightarrow> I (insert x S) (f x \\<sigma>);\n     \\<And>\\<sigma>. I S0 \\<sigma> \\<Longrightarrow> P \\<sigma>;\n     \\<And>\\<sigma> S.\n        \\<lbrakk>S \\<subseteq> S0; S \\<noteq> S0;\n         \\<And>x x'.\n            \\<lbrakk>x \\<in> S0 - S; x' \\<in> S\\<rbrakk>\n            \\<Longrightarrow> x' \\<le> x;\n         \\<not> c \\<sigma>; I S \\<sigma>\\<rbrakk>\n        \\<Longrightarrow> P \\<sigma>\\<rbrakk>\n    \\<Longrightarrow> P (it c f \\<sigma>0)", "apply (rule set_iterator_genord.iteratei_rule_insert_P [of it S0 \"(\\<le>)\" I \\<sigma>0 c f P])"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<lbrakk>set_iterator_genord it S0 (\\<le>); I {} \\<sigma>0;\n     \\<And>S \\<sigma> x.\n        \\<lbrakk>c \\<sigma>; x \\<in> S0 - S; I S \\<sigma>; S \\<subseteq> S0;\n         \\<And>x'. x' \\<in> S \\<Longrightarrow> x' \\<le> x;\n         \\<And>x'. x' \\<in> S0 - S \\<Longrightarrow> x \\<le> x'\\<rbrakk>\n        \\<Longrightarrow> I (insert x S) (f x \\<sigma>);\n     \\<And>\\<sigma>. I S0 \\<sigma> \\<Longrightarrow> P \\<sigma>;\n     \\<And>\\<sigma> S.\n        \\<lbrakk>S \\<subseteq> S0; S \\<noteq> S0;\n         \\<And>x x'.\n            \\<lbrakk>x \\<in> S0 - S; x' \\<in> S\\<rbrakk>\n            \\<Longrightarrow> x' \\<le> x;\n         \\<not> c \\<sigma>; I S \\<sigma>\\<rbrakk>\n        \\<Longrightarrow> P \\<sigma>\\<rbrakk>\n    \\<Longrightarrow> set_iterator_genord it S0 (\\<le>)\n 2. \\<lbrakk>set_iterator_genord it S0 (\\<le>); I {} \\<sigma>0;\n     \\<And>S \\<sigma> x.\n        \\<lbrakk>c \\<sigma>; x \\<in> S0 - S; I S \\<sigma>; S \\<subseteq> S0;\n         \\<And>x'. x' \\<in> S \\<Longrightarrow> x' \\<le> x;\n         \\<And>x'. x' \\<in> S0 - S \\<Longrightarrow> x \\<le> x'\\<rbrakk>\n        \\<Longrightarrow> I (insert x S) (f x \\<sigma>);\n     \\<And>\\<sigma>. I S0 \\<sigma> \\<Longrightarrow> P \\<sigma>;\n     \\<And>\\<sigma> S.\n        \\<lbrakk>S \\<subseteq> S0; S \\<noteq> S0;\n         \\<And>x x'.\n            \\<lbrakk>x \\<in> S0 - S; x' \\<in> S\\<rbrakk>\n            \\<Longrightarrow> x' \\<le> x;\n         \\<not> c \\<sigma>; I S \\<sigma>\\<rbrakk>\n        \\<Longrightarrow> P \\<sigma>\\<rbrakk>\n    \\<Longrightarrow> I {} \\<sigma>0\n 3. \\<And>S \\<sigma> x.\n       \\<lbrakk>set_iterator_genord it S0 (\\<le>); I {} \\<sigma>0;\n        \\<And>S \\<sigma> x.\n           \\<lbrakk>c \\<sigma>; x \\<in> S0 - S; I S \\<sigma>;\n            S \\<subseteq> S0;\n            \\<And>x'. x' \\<in> S \\<Longrightarrow> x' \\<le> x;\n            \\<And>x'. x' \\<in> S0 - S \\<Longrightarrow> x \\<le> x'\\<rbrakk>\n           \\<Longrightarrow> I (insert x S) (f x \\<sigma>);\n        \\<And>\\<sigma>. I S0 \\<sigma> \\<Longrightarrow> P \\<sigma>;\n        \\<And>\\<sigma> S.\n           \\<lbrakk>S \\<subseteq> S0; S \\<noteq> S0;\n            \\<And>x x'.\n               \\<lbrakk>x \\<in> S0 - S; x' \\<in> S\\<rbrakk>\n               \\<Longrightarrow> x' \\<le> x;\n            \\<not> c \\<sigma>; I S \\<sigma>\\<rbrakk>\n           \\<Longrightarrow> P \\<sigma>;\n        c \\<sigma>; x \\<in> S0 - S; I S \\<sigma>; S \\<subseteq> S0;\n        \\<forall>y\\<in>S0 - S - {x}. x \\<le> y;\n        \\<forall>y\\<in>S. y \\<le> x\\<rbrakk>\n       \\<Longrightarrow> I (insert x S) (f x \\<sigma>)\n 4. \\<And>\\<sigma>.\n       \\<lbrakk>set_iterator_genord it S0 (\\<le>); I {} \\<sigma>0;\n        \\<And>S \\<sigma> x.\n           \\<lbrakk>c \\<sigma>; x \\<in> S0 - S; I S \\<sigma>;\n            S \\<subseteq> S0;\n            \\<And>x'. x' \\<in> S \\<Longrightarrow> x' \\<le> x;\n            \\<And>x'. x' \\<in> S0 - S \\<Longrightarrow> x \\<le> x'\\<rbrakk>\n           \\<Longrightarrow> I (insert x S) (f x \\<sigma>);\n        \\<And>\\<sigma>. I S0 \\<sigma> \\<Longrightarrow> P \\<sigma>;\n        \\<And>\\<sigma> S.\n           \\<lbrakk>S \\<subseteq> S0; S \\<noteq> S0;\n            \\<And>x x'.\n               \\<lbrakk>x \\<in> S0 - S; x' \\<in> S\\<rbrakk>\n               \\<Longrightarrow> x' \\<le> x;\n            \\<not> c \\<sigma>; I S \\<sigma>\\<rbrakk>\n           \\<Longrightarrow> P \\<sigma>;\n        I S0 \\<sigma>\\<rbrakk>\n       \\<Longrightarrow> P \\<sigma>\n 5. \\<And>\\<sigma> S.\n       \\<lbrakk>set_iterator_genord it S0 (\\<le>); I {} \\<sigma>0;\n        \\<And>S \\<sigma> x.\n           \\<lbrakk>c \\<sigma>; x \\<in> S0 - S; I S \\<sigma>;\n            S \\<subseteq> S0;\n            \\<And>x'. x' \\<in> S \\<Longrightarrow> x' \\<le> x;\n            \\<And>x'. x' \\<in> S0 - S \\<Longrightarrow> x \\<le> x'\\<rbrakk>\n           \\<Longrightarrow> I (insert x S) (f x \\<sigma>);\n        \\<And>\\<sigma>. I S0 \\<sigma> \\<Longrightarrow> P \\<sigma>;\n        \\<And>\\<sigma> S.\n           \\<lbrakk>S \\<subseteq> S0; S \\<noteq> S0;\n            \\<And>x x'.\n               \\<lbrakk>x \\<in> S0 - S; x' \\<in> S\\<rbrakk>\n               \\<Longrightarrow> x' \\<le> x;\n            \\<not> c \\<sigma>; I S \\<sigma>\\<rbrakk>\n           \\<Longrightarrow> P \\<sigma>;\n        S \\<subseteq> S0; S \\<noteq> S0; \\<not> c \\<sigma>; I S \\<sigma>;\n        \\<forall>x\\<in>S0 - S. \\<forall>y\\<in>S. y \\<le> x\\<rbrakk>\n       \\<Longrightarrow> P \\<sigma>", "apply (simp_all add: Ball_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>S \\<sigma> x.\n       \\<lbrakk>set_iterator_genord it S0 (\\<le>); I {} \\<sigma>0;\n        \\<And>S \\<sigma> x.\n           \\<lbrakk>c \\<sigma>; x \\<in> S0 \\<and> x \\<notin> S;\n            I S \\<sigma>; S \\<subseteq> S0;\n            \\<And>x'. x' \\<in> S \\<Longrightarrow> x' \\<le> x;\n            \\<And>x'.\n               x' \\<in> S0 \\<and> x' \\<notin> S \\<Longrightarrow>\n               x \\<le> x'\\<rbrakk>\n           \\<Longrightarrow> I (insert x S) (f x \\<sigma>);\n        \\<And>\\<sigma>. I S0 \\<sigma> \\<Longrightarrow> P \\<sigma>;\n        \\<And>\\<sigma> S.\n           \\<lbrakk>S \\<subseteq> S0; S \\<noteq> S0;\n            \\<And>x x'.\n               \\<lbrakk>x \\<in> S0 \\<and> x \\<notin> S; x' \\<in> S\\<rbrakk>\n               \\<Longrightarrow> x' \\<le> x;\n            \\<not> c \\<sigma>; I S \\<sigma>\\<rbrakk>\n           \\<Longrightarrow> P \\<sigma>;\n        c \\<sigma>; x \\<in> S0 \\<and> x \\<notin> S; I S \\<sigma>;\n        S \\<subseteq> S0;\n        \\<forall>xa.\n           xa \\<in> S0 \\<and>\n           xa \\<notin> S \\<and> xa \\<noteq> x \\<longrightarrow>\n           x \\<le> xa;\n        \\<forall>xa. xa \\<in> S \\<longrightarrow> xa \\<le> x\\<rbrakk>\n       \\<Longrightarrow> I (insert x S) (f x \\<sigma>)", "apply (metis order_refl)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma set_iterator_rev_linord_rule_P:\n  \"\\<lbrakk> set_iterator_rev_linord it S0;\n     I S0 \\<sigma>0;\n     !!S \\<sigma> x. \\<lbrakk> c \\<sigma>; x \\<in> S; I S \\<sigma>; S \\<subseteq> S0; \\<And>x'. x' \\<in> S0-S \\<Longrightarrow> x \\<le> x'; \\<And>x'. x' \\<in> S \\<Longrightarrow> x' \\<le> x\\<rbrakk> \\<Longrightarrow> I (S - {x}) (f x \\<sigma>);\n     !!\\<sigma>. I {} \\<sigma> \\<Longrightarrow> P \\<sigma>;\n     !!\\<sigma> S. S \\<subseteq> S0 \\<Longrightarrow> S \\<noteq> {} \\<Longrightarrow> (\\<And>x x'. \\<lbrakk>x \\<in> S; x' \\<in> S0-S\\<rbrakk> \\<Longrightarrow> x \\<le> x') \\<Longrightarrow> \\<not> c \\<sigma> \\<Longrightarrow> I S \\<sigma> \\<Longrightarrow> P \\<sigma>\n   \\<rbrakk> \\<Longrightarrow> P (it c f \\<sigma>0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>set_iterator_rev_linord it S0; I S0 \\<sigma>0;\n     \\<And>S \\<sigma> x.\n        \\<lbrakk>c \\<sigma>; x \\<in> S; I S \\<sigma>; S \\<subseteq> S0;\n         \\<And>x'. x' \\<in> S0 - S \\<Longrightarrow> x \\<le> x';\n         \\<And>x'. x' \\<in> S \\<Longrightarrow> x' \\<le> x\\<rbrakk>\n        \\<Longrightarrow> I (S - {x}) (f x \\<sigma>);\n     \\<And>\\<sigma>. I {} \\<sigma> \\<Longrightarrow> P \\<sigma>;\n     \\<And>\\<sigma> S.\n        \\<lbrakk>S \\<subseteq> S0; S \\<noteq> {};\n         \\<And>x x'.\n            \\<lbrakk>x \\<in> S; x' \\<in> S0 - S\\<rbrakk>\n            \\<Longrightarrow> x \\<le> x';\n         \\<not> c \\<sigma>; I S \\<sigma>\\<rbrakk>\n        \\<Longrightarrow> P \\<sigma>\\<rbrakk>\n    \\<Longrightarrow> P (it c f \\<sigma>0)", "unfolding set_iterator_rev_linord_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>set_iterator_genord it S0 (\\<lambda>x y. y \\<le> x);\n     I S0 \\<sigma>0;\n     \\<And>S \\<sigma> x.\n        \\<lbrakk>c \\<sigma>; x \\<in> S; I S \\<sigma>; S \\<subseteq> S0;\n         \\<And>x'. x' \\<in> S0 - S \\<Longrightarrow> x \\<le> x';\n         \\<And>x'. x' \\<in> S \\<Longrightarrow> x' \\<le> x\\<rbrakk>\n        \\<Longrightarrow> I (S - {x}) (f x \\<sigma>);\n     \\<And>\\<sigma>. I {} \\<sigma> \\<Longrightarrow> P \\<sigma>;\n     \\<And>\\<sigma> S.\n        \\<lbrakk>S \\<subseteq> S0; S \\<noteq> {};\n         \\<And>x x'.\n            \\<lbrakk>x \\<in> S; x' \\<in> S0 - S\\<rbrakk>\n            \\<Longrightarrow> x \\<le> x';\n         \\<not> c \\<sigma>; I S \\<sigma>\\<rbrakk>\n        \\<Longrightarrow> P \\<sigma>\\<rbrakk>\n    \\<Longrightarrow> P (it c f \\<sigma>0)", "apply (rule set_iterator_genord.iteratei_rule_P [of it S0 \"(\\<ge>)\" I \\<sigma>0 c f P])"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<lbrakk>set_iterator_genord it S0 (\\<lambda>x y. y \\<le> x);\n     I S0 \\<sigma>0;\n     \\<And>S \\<sigma> x.\n        \\<lbrakk>c \\<sigma>; x \\<in> S; I S \\<sigma>; S \\<subseteq> S0;\n         \\<And>x'. x' \\<in> S0 - S \\<Longrightarrow> x \\<le> x';\n         \\<And>x'. x' \\<in> S \\<Longrightarrow> x' \\<le> x\\<rbrakk>\n        \\<Longrightarrow> I (S - {x}) (f x \\<sigma>);\n     \\<And>\\<sigma>. I {} \\<sigma> \\<Longrightarrow> P \\<sigma>;\n     \\<And>\\<sigma> S.\n        \\<lbrakk>S \\<subseteq> S0; S \\<noteq> {};\n         \\<And>x x'.\n            \\<lbrakk>x \\<in> S; x' \\<in> S0 - S\\<rbrakk>\n            \\<Longrightarrow> x \\<le> x';\n         \\<not> c \\<sigma>; I S \\<sigma>\\<rbrakk>\n        \\<Longrightarrow> P \\<sigma>\\<rbrakk>\n    \\<Longrightarrow> set_iterator_genord it S0 (\\<lambda>x y. y \\<le> x)\n 2. \\<lbrakk>set_iterator_genord it S0 (\\<lambda>x y. y \\<le> x);\n     I S0 \\<sigma>0;\n     \\<And>S \\<sigma> x.\n        \\<lbrakk>c \\<sigma>; x \\<in> S; I S \\<sigma>; S \\<subseteq> S0;\n         \\<And>x'. x' \\<in> S0 - S \\<Longrightarrow> x \\<le> x';\n         \\<And>x'. x' \\<in> S \\<Longrightarrow> x' \\<le> x\\<rbrakk>\n        \\<Longrightarrow> I (S - {x}) (f x \\<sigma>);\n     \\<And>\\<sigma>. I {} \\<sigma> \\<Longrightarrow> P \\<sigma>;\n     \\<And>\\<sigma> S.\n        \\<lbrakk>S \\<subseteq> S0; S \\<noteq> {};\n         \\<And>x x'.\n            \\<lbrakk>x \\<in> S; x' \\<in> S0 - S\\<rbrakk>\n            \\<Longrightarrow> x \\<le> x';\n         \\<not> c \\<sigma>; I S \\<sigma>\\<rbrakk>\n        \\<Longrightarrow> P \\<sigma>\\<rbrakk>\n    \\<Longrightarrow> I S0 \\<sigma>0\n 3. \\<And>S \\<sigma> x.\n       \\<lbrakk>set_iterator_genord it S0 (\\<lambda>x y. y \\<le> x);\n        I S0 \\<sigma>0;\n        \\<And>S \\<sigma> x.\n           \\<lbrakk>c \\<sigma>; x \\<in> S; I S \\<sigma>; S \\<subseteq> S0;\n            \\<And>x'. x' \\<in> S0 - S \\<Longrightarrow> x \\<le> x';\n            \\<And>x'. x' \\<in> S \\<Longrightarrow> x' \\<le> x\\<rbrakk>\n           \\<Longrightarrow> I (S - {x}) (f x \\<sigma>);\n        \\<And>\\<sigma>. I {} \\<sigma> \\<Longrightarrow> P \\<sigma>;\n        \\<And>\\<sigma> S.\n           \\<lbrakk>S \\<subseteq> S0; S \\<noteq> {};\n            \\<And>x x'.\n               \\<lbrakk>x \\<in> S; x' \\<in> S0 - S\\<rbrakk>\n               \\<Longrightarrow> x \\<le> x';\n            \\<not> c \\<sigma>; I S \\<sigma>\\<rbrakk>\n           \\<Longrightarrow> P \\<sigma>;\n        c \\<sigma>; x \\<in> S; I S \\<sigma>; S \\<subseteq> S0;\n        \\<forall>y\\<in>S - {x}. y \\<le> x;\n        \\<forall>y\\<in>S0 - S. x \\<le> y\\<rbrakk>\n       \\<Longrightarrow> I (S - {x}) (f x \\<sigma>)\n 4. \\<And>\\<sigma>.\n       \\<lbrakk>set_iterator_genord it S0 (\\<lambda>x y. y \\<le> x);\n        I S0 \\<sigma>0;\n        \\<And>S \\<sigma> x.\n           \\<lbrakk>c \\<sigma>; x \\<in> S; I S \\<sigma>; S \\<subseteq> S0;\n            \\<And>x'. x' \\<in> S0 - S \\<Longrightarrow> x \\<le> x';\n            \\<And>x'. x' \\<in> S \\<Longrightarrow> x' \\<le> x\\<rbrakk>\n           \\<Longrightarrow> I (S - {x}) (f x \\<sigma>);\n        \\<And>\\<sigma>. I {} \\<sigma> \\<Longrightarrow> P \\<sigma>;\n        \\<And>\\<sigma> S.\n           \\<lbrakk>S \\<subseteq> S0; S \\<noteq> {};\n            \\<And>x x'.\n               \\<lbrakk>x \\<in> S; x' \\<in> S0 - S\\<rbrakk>\n               \\<Longrightarrow> x \\<le> x';\n            \\<not> c \\<sigma>; I S \\<sigma>\\<rbrakk>\n           \\<Longrightarrow> P \\<sigma>;\n        I {} \\<sigma>\\<rbrakk>\n       \\<Longrightarrow> P \\<sigma>\n 5. \\<And>\\<sigma> S.\n       \\<lbrakk>set_iterator_genord it S0 (\\<lambda>x y. y \\<le> x);\n        I S0 \\<sigma>0;\n        \\<And>S \\<sigma> x.\n           \\<lbrakk>c \\<sigma>; x \\<in> S; I S \\<sigma>; S \\<subseteq> S0;\n            \\<And>x'. x' \\<in> S0 - S \\<Longrightarrow> x \\<le> x';\n            \\<And>x'. x' \\<in> S \\<Longrightarrow> x' \\<le> x\\<rbrakk>\n           \\<Longrightarrow> I (S - {x}) (f x \\<sigma>);\n        \\<And>\\<sigma>. I {} \\<sigma> \\<Longrightarrow> P \\<sigma>;\n        \\<And>\\<sigma> S.\n           \\<lbrakk>S \\<subseteq> S0; S \\<noteq> {};\n            \\<And>x x'.\n               \\<lbrakk>x \\<in> S; x' \\<in> S0 - S\\<rbrakk>\n               \\<Longrightarrow> x \\<le> x';\n            \\<not> c \\<sigma>; I S \\<sigma>\\<rbrakk>\n           \\<Longrightarrow> P \\<sigma>;\n        S \\<subseteq> S0; S \\<noteq> {}; \\<not> c \\<sigma>; I S \\<sigma>;\n        \\<forall>x\\<in>S. \\<forall>y\\<in>S0 - S. x \\<le> y\\<rbrakk>\n       \\<Longrightarrow> P \\<sigma>", "apply (simp_all add: Ball_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>S \\<sigma> x.\n       \\<lbrakk>set_iterator_genord it S0 (\\<lambda>x y. y \\<le> x);\n        I S0 \\<sigma>0;\n        \\<And>S \\<sigma> x.\n           \\<lbrakk>c \\<sigma>; x \\<in> S; I S \\<sigma>; S \\<subseteq> S0;\n            \\<And>x'.\n               x' \\<in> S0 \\<and> x' \\<notin> S \\<Longrightarrow>\n               x \\<le> x';\n            \\<And>x'. x' \\<in> S \\<Longrightarrow> x' \\<le> x\\<rbrakk>\n           \\<Longrightarrow> I (S - {x}) (f x \\<sigma>);\n        \\<And>\\<sigma>. I {} \\<sigma> \\<Longrightarrow> P \\<sigma>;\n        \\<And>\\<sigma> S.\n           \\<lbrakk>S \\<subseteq> S0; S \\<noteq> {};\n            \\<And>x x'.\n               \\<lbrakk>x \\<in> S; x' \\<in> S0 \\<and> x' \\<notin> S\\<rbrakk>\n               \\<Longrightarrow> x \\<le> x';\n            \\<not> c \\<sigma>; I S \\<sigma>\\<rbrakk>\n           \\<Longrightarrow> P \\<sigma>;\n        c \\<sigma>; x \\<in> S; I S \\<sigma>; S \\<subseteq> S0;\n        \\<forall>xa.\n           xa \\<in> S \\<and> xa \\<noteq> x \\<longrightarrow> xa \\<le> x;\n        \\<forall>xa.\n           xa \\<in> S0 \\<and> xa \\<notin> S \\<longrightarrow>\n           x \\<le> xa\\<rbrakk>\n       \\<Longrightarrow> I (S - {x}) (f x \\<sigma>)", "apply (metis order_refl)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma set_iterator_rev_linord_rule_insert_P:\n  \"\\<lbrakk> set_iterator_rev_linord it S0;\n     I {} \\<sigma>0;\n     !!S \\<sigma> x. \\<lbrakk> c \\<sigma>; x \\<in> S0 - S; I S \\<sigma>; S \\<subseteq> S0; \\<And>x'. x' \\<in> S \\<Longrightarrow> x \\<le> x'; \\<And>x'. x' \\<in> S0 - S \\<Longrightarrow> x' \\<le> x\\<rbrakk>  \\<Longrightarrow> I (insert x S) (f x \\<sigma>);\n     !!\\<sigma>. I S0 \\<sigma> \\<Longrightarrow> P \\<sigma>;\n     !!\\<sigma> S. S \\<subseteq> S0 \\<Longrightarrow> S \\<noteq> S0 \\<Longrightarrow>  (\\<And>x x'. \\<lbrakk>x \\<in> S0-S; x' \\<in> S\\<rbrakk> \\<Longrightarrow> x \\<le> x') \\<Longrightarrow> \\<not> c \\<sigma> \\<Longrightarrow> I S \\<sigma> \\<Longrightarrow> P \\<sigma>\n   \\<rbrakk> \\<Longrightarrow> P (it c f \\<sigma>0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>set_iterator_rev_linord it S0; I {} \\<sigma>0;\n     \\<And>S \\<sigma> x.\n        \\<lbrakk>c \\<sigma>; x \\<in> S0 - S; I S \\<sigma>; S \\<subseteq> S0;\n         \\<And>x'. x' \\<in> S \\<Longrightarrow> x \\<le> x';\n         \\<And>x'. x' \\<in> S0 - S \\<Longrightarrow> x' \\<le> x\\<rbrakk>\n        \\<Longrightarrow> I (insert x S) (f x \\<sigma>);\n     \\<And>\\<sigma>. I S0 \\<sigma> \\<Longrightarrow> P \\<sigma>;\n     \\<And>\\<sigma> S.\n        \\<lbrakk>S \\<subseteq> S0; S \\<noteq> S0;\n         \\<And>x x'.\n            \\<lbrakk>x \\<in> S0 - S; x' \\<in> S\\<rbrakk>\n            \\<Longrightarrow> x \\<le> x';\n         \\<not> c \\<sigma>; I S \\<sigma>\\<rbrakk>\n        \\<Longrightarrow> P \\<sigma>\\<rbrakk>\n    \\<Longrightarrow> P (it c f \\<sigma>0)", "unfolding set_iterator_rev_linord_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>set_iterator_genord it S0 (\\<lambda>x y. y \\<le> x);\n     I {} \\<sigma>0;\n     \\<And>S \\<sigma> x.\n        \\<lbrakk>c \\<sigma>; x \\<in> S0 - S; I S \\<sigma>; S \\<subseteq> S0;\n         \\<And>x'. x' \\<in> S \\<Longrightarrow> x \\<le> x';\n         \\<And>x'. x' \\<in> S0 - S \\<Longrightarrow> x' \\<le> x\\<rbrakk>\n        \\<Longrightarrow> I (insert x S) (f x \\<sigma>);\n     \\<And>\\<sigma>. I S0 \\<sigma> \\<Longrightarrow> P \\<sigma>;\n     \\<And>\\<sigma> S.\n        \\<lbrakk>S \\<subseteq> S0; S \\<noteq> S0;\n         \\<And>x x'.\n            \\<lbrakk>x \\<in> S0 - S; x' \\<in> S\\<rbrakk>\n            \\<Longrightarrow> x \\<le> x';\n         \\<not> c \\<sigma>; I S \\<sigma>\\<rbrakk>\n        \\<Longrightarrow> P \\<sigma>\\<rbrakk>\n    \\<Longrightarrow> P (it c f \\<sigma>0)", "apply (rule set_iterator_genord.iteratei_rule_insert_P [of it S0 \"(\\<ge>)\" I \\<sigma>0 c f P])"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<lbrakk>set_iterator_genord it S0 (\\<lambda>x y. y \\<le> x);\n     I {} \\<sigma>0;\n     \\<And>S \\<sigma> x.\n        \\<lbrakk>c \\<sigma>; x \\<in> S0 - S; I S \\<sigma>; S \\<subseteq> S0;\n         \\<And>x'. x' \\<in> S \\<Longrightarrow> x \\<le> x';\n         \\<And>x'. x' \\<in> S0 - S \\<Longrightarrow> x' \\<le> x\\<rbrakk>\n        \\<Longrightarrow> I (insert x S) (f x \\<sigma>);\n     \\<And>\\<sigma>. I S0 \\<sigma> \\<Longrightarrow> P \\<sigma>;\n     \\<And>\\<sigma> S.\n        \\<lbrakk>S \\<subseteq> S0; S \\<noteq> S0;\n         \\<And>x x'.\n            \\<lbrakk>x \\<in> S0 - S; x' \\<in> S\\<rbrakk>\n            \\<Longrightarrow> x \\<le> x';\n         \\<not> c \\<sigma>; I S \\<sigma>\\<rbrakk>\n        \\<Longrightarrow> P \\<sigma>\\<rbrakk>\n    \\<Longrightarrow> set_iterator_genord it S0 (\\<lambda>x y. y \\<le> x)\n 2. \\<lbrakk>set_iterator_genord it S0 (\\<lambda>x y. y \\<le> x);\n     I {} \\<sigma>0;\n     \\<And>S \\<sigma> x.\n        \\<lbrakk>c \\<sigma>; x \\<in> S0 - S; I S \\<sigma>; S \\<subseteq> S0;\n         \\<And>x'. x' \\<in> S \\<Longrightarrow> x \\<le> x';\n         \\<And>x'. x' \\<in> S0 - S \\<Longrightarrow> x' \\<le> x\\<rbrakk>\n        \\<Longrightarrow> I (insert x S) (f x \\<sigma>);\n     \\<And>\\<sigma>. I S0 \\<sigma> \\<Longrightarrow> P \\<sigma>;\n     \\<And>\\<sigma> S.\n        \\<lbrakk>S \\<subseteq> S0; S \\<noteq> S0;\n         \\<And>x x'.\n            \\<lbrakk>x \\<in> S0 - S; x' \\<in> S\\<rbrakk>\n            \\<Longrightarrow> x \\<le> x';\n         \\<not> c \\<sigma>; I S \\<sigma>\\<rbrakk>\n        \\<Longrightarrow> P \\<sigma>\\<rbrakk>\n    \\<Longrightarrow> I {} \\<sigma>0\n 3. \\<And>S \\<sigma> x.\n       \\<lbrakk>set_iterator_genord it S0 (\\<lambda>x y. y \\<le> x);\n        I {} \\<sigma>0;\n        \\<And>S \\<sigma> x.\n           \\<lbrakk>c \\<sigma>; x \\<in> S0 - S; I S \\<sigma>;\n            S \\<subseteq> S0;\n            \\<And>x'. x' \\<in> S \\<Longrightarrow> x \\<le> x';\n            \\<And>x'. x' \\<in> S0 - S \\<Longrightarrow> x' \\<le> x\\<rbrakk>\n           \\<Longrightarrow> I (insert x S) (f x \\<sigma>);\n        \\<And>\\<sigma>. I S0 \\<sigma> \\<Longrightarrow> P \\<sigma>;\n        \\<And>\\<sigma> S.\n           \\<lbrakk>S \\<subseteq> S0; S \\<noteq> S0;\n            \\<And>x x'.\n               \\<lbrakk>x \\<in> S0 - S; x' \\<in> S\\<rbrakk>\n               \\<Longrightarrow> x \\<le> x';\n            \\<not> c \\<sigma>; I S \\<sigma>\\<rbrakk>\n           \\<Longrightarrow> P \\<sigma>;\n        c \\<sigma>; x \\<in> S0 - S; I S \\<sigma>; S \\<subseteq> S0;\n        \\<forall>y\\<in>S0 - S - {x}. y \\<le> x;\n        \\<forall>y\\<in>S. x \\<le> y\\<rbrakk>\n       \\<Longrightarrow> I (insert x S) (f x \\<sigma>)\n 4. \\<And>\\<sigma>.\n       \\<lbrakk>set_iterator_genord it S0 (\\<lambda>x y. y \\<le> x);\n        I {} \\<sigma>0;\n        \\<And>S \\<sigma> x.\n           \\<lbrakk>c \\<sigma>; x \\<in> S0 - S; I S \\<sigma>;\n            S \\<subseteq> S0;\n            \\<And>x'. x' \\<in> S \\<Longrightarrow> x \\<le> x';\n            \\<And>x'. x' \\<in> S0 - S \\<Longrightarrow> x' \\<le> x\\<rbrakk>\n           \\<Longrightarrow> I (insert x S) (f x \\<sigma>);\n        \\<And>\\<sigma>. I S0 \\<sigma> \\<Longrightarrow> P \\<sigma>;\n        \\<And>\\<sigma> S.\n           \\<lbrakk>S \\<subseteq> S0; S \\<noteq> S0;\n            \\<And>x x'.\n               \\<lbrakk>x \\<in> S0 - S; x' \\<in> S\\<rbrakk>\n               \\<Longrightarrow> x \\<le> x';\n            \\<not> c \\<sigma>; I S \\<sigma>\\<rbrakk>\n           \\<Longrightarrow> P \\<sigma>;\n        I S0 \\<sigma>\\<rbrakk>\n       \\<Longrightarrow> P \\<sigma>\n 5. \\<And>\\<sigma> S.\n       \\<lbrakk>set_iterator_genord it S0 (\\<lambda>x y. y \\<le> x);\n        I {} \\<sigma>0;\n        \\<And>S \\<sigma> x.\n           \\<lbrakk>c \\<sigma>; x \\<in> S0 - S; I S \\<sigma>;\n            S \\<subseteq> S0;\n            \\<And>x'. x' \\<in> S \\<Longrightarrow> x \\<le> x';\n            \\<And>x'. x' \\<in> S0 - S \\<Longrightarrow> x' \\<le> x\\<rbrakk>\n           \\<Longrightarrow> I (insert x S) (f x \\<sigma>);\n        \\<And>\\<sigma>. I S0 \\<sigma> \\<Longrightarrow> P \\<sigma>;\n        \\<And>\\<sigma> S.\n           \\<lbrakk>S \\<subseteq> S0; S \\<noteq> S0;\n            \\<And>x x'.\n               \\<lbrakk>x \\<in> S0 - S; x' \\<in> S\\<rbrakk>\n               \\<Longrightarrow> x \\<le> x';\n            \\<not> c \\<sigma>; I S \\<sigma>\\<rbrakk>\n           \\<Longrightarrow> P \\<sigma>;\n        S \\<subseteq> S0; S \\<noteq> S0; \\<not> c \\<sigma>; I S \\<sigma>;\n        \\<forall>x\\<in>S0 - S. \\<forall>y\\<in>S. x \\<le> y\\<rbrakk>\n       \\<Longrightarrow> P \\<sigma>", "apply (simp_all add: Ball_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>S \\<sigma> x.\n       \\<lbrakk>set_iterator_genord it S0 (\\<lambda>x y. y \\<le> x);\n        I {} \\<sigma>0;\n        \\<And>S \\<sigma> x.\n           \\<lbrakk>c \\<sigma>; x \\<in> S0 \\<and> x \\<notin> S;\n            I S \\<sigma>; S \\<subseteq> S0;\n            \\<And>x'. x' \\<in> S \\<Longrightarrow> x \\<le> x';\n            \\<And>x'.\n               x' \\<in> S0 \\<and> x' \\<notin> S \\<Longrightarrow>\n               x' \\<le> x\\<rbrakk>\n           \\<Longrightarrow> I (insert x S) (f x \\<sigma>);\n        \\<And>\\<sigma>. I S0 \\<sigma> \\<Longrightarrow> P \\<sigma>;\n        \\<And>\\<sigma> S.\n           \\<lbrakk>S \\<subseteq> S0; S \\<noteq> S0;\n            \\<And>x x'.\n               \\<lbrakk>x \\<in> S0 \\<and> x \\<notin> S; x' \\<in> S\\<rbrakk>\n               \\<Longrightarrow> x \\<le> x';\n            \\<not> c \\<sigma>; I S \\<sigma>\\<rbrakk>\n           \\<Longrightarrow> P \\<sigma>;\n        c \\<sigma>; x \\<in> S0 \\<and> x \\<notin> S; I S \\<sigma>;\n        S \\<subseteq> S0;\n        \\<forall>xa.\n           xa \\<in> S0 \\<and>\n           xa \\<notin> S \\<and> xa \\<noteq> x \\<longrightarrow>\n           xa \\<le> x;\n        \\<forall>xa. xa \\<in> S \\<longrightarrow> x \\<le> xa\\<rbrakk>\n       \\<Longrightarrow> I (insert x S) (f x \\<sigma>)", "apply (metis order_refl)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma set_iterator_map_linord_rule_P:\n  \"\\<lbrakk> set_iterator_map_linord it S0;\n     I S0 \\<sigma>0;\n     !!S \\<sigma> k v. \\<lbrakk> c \\<sigma>; (k, v) \\<in> S; I S \\<sigma>; S \\<subseteq> S0; \\<And>k' v'. (k', v') \\<in> S0-S \\<Longrightarrow> k' \\<le> k;\n                  \\<And>k' v'. (k', v') \\<in> S \\<Longrightarrow> k \\<le> k'\\<rbrakk> \\<Longrightarrow> I (S - {(k,v)}) (f (k,v) \\<sigma>);\n     !!\\<sigma>. I {} \\<sigma> \\<Longrightarrow> P \\<sigma>;\n     !!\\<sigma> S. S \\<subseteq> S0 \\<Longrightarrow> S \\<noteq> {} \\<Longrightarrow> (\\<And>k v k' v'. \\<lbrakk>(k, v) \\<in> S0-S; (k', v') \\<in> S\\<rbrakk> \\<Longrightarrow> k \\<le> k') \\<Longrightarrow>\n         \\<not> c \\<sigma> \\<Longrightarrow> I S \\<sigma> \\<Longrightarrow> P \\<sigma>\n   \\<rbrakk> \\<Longrightarrow> P (it c f \\<sigma>0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>set_iterator_map_linord it S0; I S0 \\<sigma>0;\n     \\<And>S \\<sigma> k v.\n        \\<lbrakk>c \\<sigma>; (k, v) \\<in> S; I S \\<sigma>; S \\<subseteq> S0;\n         \\<And>k' v'. (k', v') \\<in> S0 - S \\<Longrightarrow> k' \\<le> k;\n         \\<And>k' v'. (k', v') \\<in> S \\<Longrightarrow> k \\<le> k'\\<rbrakk>\n        \\<Longrightarrow> I (S - {(k, v)}) (f (k, v) \\<sigma>);\n     \\<And>\\<sigma>. I {} \\<sigma> \\<Longrightarrow> P \\<sigma>;\n     \\<And>\\<sigma> S.\n        \\<lbrakk>S \\<subseteq> S0; S \\<noteq> {};\n         \\<And>k v k' v'.\n            \\<lbrakk>(k, v) \\<in> S0 - S; (k', v') \\<in> S\\<rbrakk>\n            \\<Longrightarrow> k \\<le> k';\n         \\<not> c \\<sigma>; I S \\<sigma>\\<rbrakk>\n        \\<Longrightarrow> P \\<sigma>\\<rbrakk>\n    \\<Longrightarrow> P (it c f \\<sigma>0)", "unfolding set_iterator_map_linord_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>set_iterator_genord it S0\n              (\\<lambda>(k, uu_) (k', uu_). k \\<le> k');\n     I S0 \\<sigma>0;\n     \\<And>S \\<sigma> k v.\n        \\<lbrakk>c \\<sigma>; (k, v) \\<in> S; I S \\<sigma>; S \\<subseteq> S0;\n         \\<And>k' v'. (k', v') \\<in> S0 - S \\<Longrightarrow> k' \\<le> k;\n         \\<And>k' v'. (k', v') \\<in> S \\<Longrightarrow> k \\<le> k'\\<rbrakk>\n        \\<Longrightarrow> I (S - {(k, v)}) (f (k, v) \\<sigma>);\n     \\<And>\\<sigma>. I {} \\<sigma> \\<Longrightarrow> P \\<sigma>;\n     \\<And>\\<sigma> S.\n        \\<lbrakk>S \\<subseteq> S0; S \\<noteq> {};\n         \\<And>k v k' v'.\n            \\<lbrakk>(k, v) \\<in> S0 - S; (k', v') \\<in> S\\<rbrakk>\n            \\<Longrightarrow> k \\<le> k';\n         \\<not> c \\<sigma>; I S \\<sigma>\\<rbrakk>\n        \\<Longrightarrow> P \\<sigma>\\<rbrakk>\n    \\<Longrightarrow> P (it c f \\<sigma>0)", "apply (rule set_iterator_genord.iteratei_rule_P \n    [of it S0 \"(\\<lambda>(k,_) (k',_). k \\<le> k')\" I \\<sigma>0 c f P])"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<lbrakk>set_iterator_genord it S0\n              (\\<lambda>(k, uu_) (k', uu_). k \\<le> k');\n     I S0 \\<sigma>0;\n     \\<And>S \\<sigma> k v.\n        \\<lbrakk>c \\<sigma>; (k, v) \\<in> S; I S \\<sigma>; S \\<subseteq> S0;\n         \\<And>k' v'. (k', v') \\<in> S0 - S \\<Longrightarrow> k' \\<le> k;\n         \\<And>k' v'. (k', v') \\<in> S \\<Longrightarrow> k \\<le> k'\\<rbrakk>\n        \\<Longrightarrow> I (S - {(k, v)}) (f (k, v) \\<sigma>);\n     \\<And>\\<sigma>. I {} \\<sigma> \\<Longrightarrow> P \\<sigma>;\n     \\<And>\\<sigma> S.\n        \\<lbrakk>S \\<subseteq> S0; S \\<noteq> {};\n         \\<And>k v k' v'.\n            \\<lbrakk>(k, v) \\<in> S0 - S; (k', v') \\<in> S\\<rbrakk>\n            \\<Longrightarrow> k \\<le> k';\n         \\<not> c \\<sigma>; I S \\<sigma>\\<rbrakk>\n        \\<Longrightarrow> P \\<sigma>\\<rbrakk>\n    \\<Longrightarrow> set_iterator_genord it S0\n                       (\\<lambda>(k, uu_) (k', uu_). k \\<le> k')\n 2. \\<lbrakk>set_iterator_genord it S0\n              (\\<lambda>(k, uu_) (k', uu_). k \\<le> k');\n     I S0 \\<sigma>0;\n     \\<And>S \\<sigma> k v.\n        \\<lbrakk>c \\<sigma>; (k, v) \\<in> S; I S \\<sigma>; S \\<subseteq> S0;\n         \\<And>k' v'. (k', v') \\<in> S0 - S \\<Longrightarrow> k' \\<le> k;\n         \\<And>k' v'. (k', v') \\<in> S \\<Longrightarrow> k \\<le> k'\\<rbrakk>\n        \\<Longrightarrow> I (S - {(k, v)}) (f (k, v) \\<sigma>);\n     \\<And>\\<sigma>. I {} \\<sigma> \\<Longrightarrow> P \\<sigma>;\n     \\<And>\\<sigma> S.\n        \\<lbrakk>S \\<subseteq> S0; S \\<noteq> {};\n         \\<And>k v k' v'.\n            \\<lbrakk>(k, v) \\<in> S0 - S; (k', v') \\<in> S\\<rbrakk>\n            \\<Longrightarrow> k \\<le> k';\n         \\<not> c \\<sigma>; I S \\<sigma>\\<rbrakk>\n        \\<Longrightarrow> P \\<sigma>\\<rbrakk>\n    \\<Longrightarrow> I S0 \\<sigma>0\n 3. \\<And>S \\<sigma> x.\n       \\<lbrakk>set_iterator_genord it S0\n                 (\\<lambda>(k, uu_) (k', uu_). k \\<le> k');\n        I S0 \\<sigma>0;\n        \\<And>S \\<sigma> k v.\n           \\<lbrakk>c \\<sigma>; (k, v) \\<in> S; I S \\<sigma>;\n            S \\<subseteq> S0;\n            \\<And>k' v'. (k', v') \\<in> S0 - S \\<Longrightarrow> k' \\<le> k;\n            \\<And>k' v'.\n               (k', v') \\<in> S \\<Longrightarrow> k \\<le> k'\\<rbrakk>\n           \\<Longrightarrow> I (S - {(k, v)}) (f (k, v) \\<sigma>);\n        \\<And>\\<sigma>. I {} \\<sigma> \\<Longrightarrow> P \\<sigma>;\n        \\<And>\\<sigma> S.\n           \\<lbrakk>S \\<subseteq> S0; S \\<noteq> {};\n            \\<And>k v k' v'.\n               \\<lbrakk>(k, v) \\<in> S0 - S; (k', v') \\<in> S\\<rbrakk>\n               \\<Longrightarrow> k \\<le> k';\n            \\<not> c \\<sigma>; I S \\<sigma>\\<rbrakk>\n           \\<Longrightarrow> P \\<sigma>;\n        c \\<sigma>; x \\<in> S; I S \\<sigma>; S \\<subseteq> S0;\n        \\<forall>y\\<in>S - {x}.\n           (case x of (k, uu_) \\<Rightarrow> \\<lambda>(k', uu_). k \\<le> k')\n            y;\n        \\<forall>y\\<in>S0 - S.\n           (case y of (k, uu_) \\<Rightarrow> \\<lambda>(k', uu_). k \\<le> k')\n            x\\<rbrakk>\n       \\<Longrightarrow> I (S - {x}) (f x \\<sigma>)\n 4. \\<And>\\<sigma>.\n       \\<lbrakk>set_iterator_genord it S0\n                 (\\<lambda>(k, uu_) (k', uu_). k \\<le> k');\n        I S0 \\<sigma>0;\n        \\<And>S \\<sigma> k v.\n           \\<lbrakk>c \\<sigma>; (k, v) \\<in> S; I S \\<sigma>;\n            S \\<subseteq> S0;\n            \\<And>k' v'. (k', v') \\<in> S0 - S \\<Longrightarrow> k' \\<le> k;\n            \\<And>k' v'.\n               (k', v') \\<in> S \\<Longrightarrow> k \\<le> k'\\<rbrakk>\n           \\<Longrightarrow> I (S - {(k, v)}) (f (k, v) \\<sigma>);\n        \\<And>\\<sigma>. I {} \\<sigma> \\<Longrightarrow> P \\<sigma>;\n        \\<And>\\<sigma> S.\n           \\<lbrakk>S \\<subseteq> S0; S \\<noteq> {};\n            \\<And>k v k' v'.\n               \\<lbrakk>(k, v) \\<in> S0 - S; (k', v') \\<in> S\\<rbrakk>\n               \\<Longrightarrow> k \\<le> k';\n            \\<not> c \\<sigma>; I S \\<sigma>\\<rbrakk>\n           \\<Longrightarrow> P \\<sigma>;\n        I {} \\<sigma>\\<rbrakk>\n       \\<Longrightarrow> P \\<sigma>\n 5. \\<And>\\<sigma> S.\n       \\<lbrakk>set_iterator_genord it S0\n                 (\\<lambda>(k, uu_) (k', uu_). k \\<le> k');\n        I S0 \\<sigma>0;\n        \\<And>S \\<sigma> k v.\n           \\<lbrakk>c \\<sigma>; (k, v) \\<in> S; I S \\<sigma>;\n            S \\<subseteq> S0;\n            \\<And>k' v'. (k', v') \\<in> S0 - S \\<Longrightarrow> k' \\<le> k;\n            \\<And>k' v'.\n               (k', v') \\<in> S \\<Longrightarrow> k \\<le> k'\\<rbrakk>\n           \\<Longrightarrow> I (S - {(k, v)}) (f (k, v) \\<sigma>);\n        \\<And>\\<sigma>. I {} \\<sigma> \\<Longrightarrow> P \\<sigma>;\n        \\<And>\\<sigma> S.\n           \\<lbrakk>S \\<subseteq> S0; S \\<noteq> {};\n            \\<And>k v k' v'.\n               \\<lbrakk>(k, v) \\<in> S0 - S; (k', v') \\<in> S\\<rbrakk>\n               \\<Longrightarrow> k \\<le> k';\n            \\<not> c \\<sigma>; I S \\<sigma>\\<rbrakk>\n           \\<Longrightarrow> P \\<sigma>;\n        S \\<subseteq> S0; S \\<noteq> {}; \\<not> c \\<sigma>; I S \\<sigma>;\n        \\<forall>x\\<in>S.\n           \\<forall>y\\<in>S0 - S.\n              (case y of\n               (k, uu_) \\<Rightarrow> \\<lambda>(k', uu_). k \\<le> k')\n               x\\<rbrakk>\n       \\<Longrightarrow> P \\<sigma>", "apply simp_all"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>S \\<sigma> x.\n       \\<lbrakk>set_iterator_genord it S0\n                 (\\<lambda>(k, uu_) (k', uu_). k \\<le> k');\n        I S0 \\<sigma>0;\n        \\<And>S \\<sigma> k v.\n           \\<lbrakk>c \\<sigma>; (k, v) \\<in> S; I S \\<sigma>;\n            S \\<subseteq> S0;\n            \\<And>k' v'.\n               (k', v') \\<in> S0 \\<and>\n               (k', v') \\<notin> S \\<Longrightarrow>\n               k' \\<le> k;\n            \\<And>k' v'.\n               (k', v') \\<in> S \\<Longrightarrow> k \\<le> k'\\<rbrakk>\n           \\<Longrightarrow> I (S - {(k, v)}) (f (k, v) \\<sigma>);\n        \\<And>\\<sigma>. I {} \\<sigma> \\<Longrightarrow> P \\<sigma>;\n        \\<And>\\<sigma> S.\n           \\<lbrakk>S \\<subseteq> S0; S \\<noteq> {};\n            \\<And>k v k' v'.\n               \\<lbrakk>(k, v) \\<in> S0 \\<and> (k, v) \\<notin> S;\n                (k', v') \\<in> S\\<rbrakk>\n               \\<Longrightarrow> k \\<le> k';\n            \\<not> c \\<sigma>; I S \\<sigma>\\<rbrakk>\n           \\<Longrightarrow> P \\<sigma>;\n        c \\<sigma>; x \\<in> S; I S \\<sigma>; S \\<subseteq> S0;\n        \\<forall>y\\<in>S - {x}.\n           (case x of (k, uu_) \\<Rightarrow> \\<lambda>(k', uu_). k \\<le> k')\n            y;\n        \\<forall>y\\<in>S0 - S.\n           (case y of (k, uu_) \\<Rightarrow> \\<lambda>(k', uu_). k \\<le> k')\n            x\\<rbrakk>\n       \\<Longrightarrow> I (S - {x}) (f x \\<sigma>)\n 2. \\<And>\\<sigma> S.\n       \\<lbrakk>set_iterator_genord it S0\n                 (\\<lambda>(k, uu_) (k', uu_). k \\<le> k');\n        I S0 \\<sigma>0;\n        \\<And>S \\<sigma> k v.\n           \\<lbrakk>c \\<sigma>; (k, v) \\<in> S; I S \\<sigma>;\n            S \\<subseteq> S0;\n            \\<And>k' v'.\n               (k', v') \\<in> S0 \\<and>\n               (k', v') \\<notin> S \\<Longrightarrow>\n               k' \\<le> k;\n            \\<And>k' v'.\n               (k', v') \\<in> S \\<Longrightarrow> k \\<le> k'\\<rbrakk>\n           \\<Longrightarrow> I (S - {(k, v)}) (f (k, v) \\<sigma>);\n        \\<And>\\<sigma>. I {} \\<sigma> \\<Longrightarrow> P \\<sigma>;\n        \\<And>\\<sigma> S.\n           \\<lbrakk>S \\<subseteq> S0; S \\<noteq> {};\n            \\<And>k v k' v'.\n               \\<lbrakk>(k, v) \\<in> S0 \\<and> (k, v) \\<notin> S;\n                (k', v') \\<in> S\\<rbrakk>\n               \\<Longrightarrow> k \\<le> k';\n            \\<not> c \\<sigma>; I S \\<sigma>\\<rbrakk>\n           \\<Longrightarrow> P \\<sigma>;\n        S \\<subseteq> S0; S \\<noteq> {}; \\<not> c \\<sigma>; I S \\<sigma>;\n        \\<forall>x\\<in>S.\n           \\<forall>y\\<in>S0 - S.\n              (case y of\n               (k, uu_) \\<Rightarrow> \\<lambda>(k', uu_). k \\<le> k')\n               x\\<rbrakk>\n       \\<Longrightarrow> P \\<sigma>", "apply (auto simp add: Ball_def)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>S \\<sigma> a b.\n       \\<lbrakk>set_iterator_genord it S0\n                 (\\<lambda>(k, uu_) (k', uu_). k \\<le> k');\n        I S0 \\<sigma>0;\n        \\<And>S \\<sigma> k v.\n           \\<lbrakk>c \\<sigma>; (k, v) \\<in> S; I S \\<sigma>;\n            S \\<subseteq> S0;\n            \\<And>k' v'.\n               (k', v') \\<in> S0 \\<and>\n               (k', v') \\<notin> S \\<Longrightarrow>\n               k' \\<le> k;\n            \\<And>k' v'.\n               (k', v') \\<in> S \\<Longrightarrow> k \\<le> k'\\<rbrakk>\n           \\<Longrightarrow> I (S - {(k, v)}) (f (k, v) \\<sigma>);\n        \\<And>\\<sigma>. I {} \\<sigma> \\<Longrightarrow> P \\<sigma>;\n        \\<And>\\<sigma> S.\n           \\<lbrakk>S \\<subseteq> S0; S \\<noteq> {};\n            \\<And>k v k' v'.\n               \\<lbrakk>(k, v) \\<in> S0 \\<and> (k, v) \\<notin> S;\n                (k', v') \\<in> S\\<rbrakk>\n               \\<Longrightarrow> k \\<le> k';\n            \\<not> c \\<sigma>; I S \\<sigma>\\<rbrakk>\n           \\<Longrightarrow> P \\<sigma>;\n        c \\<sigma>; (a, b) \\<in> S; I S \\<sigma>; S \\<subseteq> S0;\n        \\<forall>aa.\n           (\\<exists>ba.\n               (aa, ba) \\<in> S \\<and>\n               (aa = a \\<longrightarrow> ba \\<noteq> b)) \\<longrightarrow>\n           a \\<le> aa;\n        \\<forall>aa.\n           (\\<exists>b.\n               (aa, b) \\<in> S0 \\<and> (aa, b) \\<notin> S) \\<longrightarrow>\n           aa \\<le> a\\<rbrakk>\n       \\<Longrightarrow> I (S - {(a, b)}) (f (a, b) \\<sigma>)\n 2. \\<And>\\<sigma> S a b.\n       \\<lbrakk>set_iterator_genord it S0\n                 (\\<lambda>(k, uu_) (k', uu_). k \\<le> k');\n        I S0 \\<sigma>0;\n        \\<And>S \\<sigma> k v.\n           \\<lbrakk>c \\<sigma>; (k, v) \\<in> S; I S \\<sigma>;\n            S \\<subseteq> S0;\n            \\<And>k' v'.\n               (k', v') \\<in> S0 \\<and>\n               (k', v') \\<notin> S \\<Longrightarrow>\n               k' \\<le> k;\n            \\<And>k' v'.\n               (k', v') \\<in> S \\<Longrightarrow> k \\<le> k'\\<rbrakk>\n           \\<Longrightarrow> I (S - {(k, v)}) (f (k, v) \\<sigma>);\n        \\<And>\\<sigma>. I {} \\<sigma> \\<Longrightarrow> P \\<sigma>;\n        \\<And>\\<sigma> S.\n           \\<lbrakk>S \\<subseteq> S0; S \\<noteq> {};\n            \\<And>k v k' v'.\n               \\<lbrakk>(k, v) \\<in> S0 \\<and> (k, v) \\<notin> S;\n                (k', v') \\<in> S\\<rbrakk>\n               \\<Longrightarrow> k \\<le> k';\n            \\<not> c \\<sigma>; I S \\<sigma>\\<rbrakk>\n           \\<Longrightarrow> P \\<sigma>;\n        S \\<subseteq> S0; \\<not> c \\<sigma>; I S \\<sigma>;\n        \\<forall>a.\n           (\\<exists>b. (a, b) \\<in> S) \\<longrightarrow>\n           (\\<forall>aa.\n               (\\<exists>b.\n                   (aa, b) \\<in> S0 \\<and>\n                   (aa, b) \\<notin> S) \\<longrightarrow>\n               aa \\<le> a);\n        \\<not> P \\<sigma>; (a, b) \\<in> S\\<rbrakk>\n       \\<Longrightarrow> False", "apply (metis order_refl)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<sigma> S a b.\n       \\<lbrakk>set_iterator_genord it S0\n                 (\\<lambda>(k, uu_) (k', uu_). k \\<le> k');\n        I S0 \\<sigma>0;\n        \\<And>S \\<sigma> k v.\n           \\<lbrakk>c \\<sigma>; (k, v) \\<in> S; I S \\<sigma>;\n            S \\<subseteq> S0;\n            \\<And>k' v'.\n               (k', v') \\<in> S0 \\<and>\n               (k', v') \\<notin> S \\<Longrightarrow>\n               k' \\<le> k;\n            \\<And>k' v'.\n               (k', v') \\<in> S \\<Longrightarrow> k \\<le> k'\\<rbrakk>\n           \\<Longrightarrow> I (S - {(k, v)}) (f (k, v) \\<sigma>);\n        \\<And>\\<sigma>. I {} \\<sigma> \\<Longrightarrow> P \\<sigma>;\n        \\<And>\\<sigma> S.\n           \\<lbrakk>S \\<subseteq> S0; S \\<noteq> {};\n            \\<And>k v k' v'.\n               \\<lbrakk>(k, v) \\<in> S0 \\<and> (k, v) \\<notin> S;\n                (k', v') \\<in> S\\<rbrakk>\n               \\<Longrightarrow> k \\<le> k';\n            \\<not> c \\<sigma>; I S \\<sigma>\\<rbrakk>\n           \\<Longrightarrow> P \\<sigma>;\n        S \\<subseteq> S0; \\<not> c \\<sigma>; I S \\<sigma>;\n        \\<forall>a.\n           (\\<exists>b. (a, b) \\<in> S) \\<longrightarrow>\n           (\\<forall>aa.\n               (\\<exists>b.\n                   (aa, b) \\<in> S0 \\<and>\n                   (aa, b) \\<notin> S) \\<longrightarrow>\n               aa \\<le> a);\n        \\<not> P \\<sigma>; (a, b) \\<in> S\\<rbrakk>\n       \\<Longrightarrow> False", "apply metis"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma set_iterator_map_linord_rule_insert_P:\n  \"\\<lbrakk> set_iterator_map_linord it S0;\n     I {} \\<sigma>0;\n     !!S \\<sigma> k v. \\<lbrakk> c \\<sigma>; (k, v) \\<in> S0 - S; I S \\<sigma>; S \\<subseteq> S0; \\<And>k' v'. (k', v') \\<in> S \\<Longrightarrow> k' \\<le> k;\n                  \\<And>k' v'. (k',v') \\<in> S0 - S \\<Longrightarrow> k \\<le> k'\\<rbrakk>  \\<Longrightarrow> I (insert (k,v) S) (f (k,v) \\<sigma>);\n     !!\\<sigma>. I S0 \\<sigma> \\<Longrightarrow> P \\<sigma>;\n     !!\\<sigma> S. S \\<subseteq> S0 \\<Longrightarrow> S \\<noteq> S0 \\<Longrightarrow> (\\<And>k v k' v'. \\<lbrakk>(k, v) \\<in> S; (k', v') \\<in> S0-S\\<rbrakk> \\<Longrightarrow> k \\<le> k') \\<Longrightarrow>\n            \\<not> c \\<sigma> \\<Longrightarrow> I S \\<sigma> \\<Longrightarrow> P \\<sigma>\n   \\<rbrakk> \\<Longrightarrow> P (it c f \\<sigma>0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>set_iterator_map_linord it S0; I {} \\<sigma>0;\n     \\<And>S \\<sigma> k v.\n        \\<lbrakk>c \\<sigma>; (k, v) \\<in> S0 - S; I S \\<sigma>;\n         S \\<subseteq> S0;\n         \\<And>k' v'. (k', v') \\<in> S \\<Longrightarrow> k' \\<le> k;\n         \\<And>k' v'.\n            (k', v') \\<in> S0 - S \\<Longrightarrow> k \\<le> k'\\<rbrakk>\n        \\<Longrightarrow> I (insert (k, v) S) (f (k, v) \\<sigma>);\n     \\<And>\\<sigma>. I S0 \\<sigma> \\<Longrightarrow> P \\<sigma>;\n     \\<And>\\<sigma> S.\n        \\<lbrakk>S \\<subseteq> S0; S \\<noteq> S0;\n         \\<And>k v k' v'.\n            \\<lbrakk>(k, v) \\<in> S; (k', v') \\<in> S0 - S\\<rbrakk>\n            \\<Longrightarrow> k \\<le> k';\n         \\<not> c \\<sigma>; I S \\<sigma>\\<rbrakk>\n        \\<Longrightarrow> P \\<sigma>\\<rbrakk>\n    \\<Longrightarrow> P (it c f \\<sigma>0)", "unfolding set_iterator_map_linord_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>set_iterator_genord it S0\n              (\\<lambda>(k, uu_) (k', uu_). k \\<le> k');\n     I {} \\<sigma>0;\n     \\<And>S \\<sigma> k v.\n        \\<lbrakk>c \\<sigma>; (k, v) \\<in> S0 - S; I S \\<sigma>;\n         S \\<subseteq> S0;\n         \\<And>k' v'. (k', v') \\<in> S \\<Longrightarrow> k' \\<le> k;\n         \\<And>k' v'.\n            (k', v') \\<in> S0 - S \\<Longrightarrow> k \\<le> k'\\<rbrakk>\n        \\<Longrightarrow> I (insert (k, v) S) (f (k, v) \\<sigma>);\n     \\<And>\\<sigma>. I S0 \\<sigma> \\<Longrightarrow> P \\<sigma>;\n     \\<And>\\<sigma> S.\n        \\<lbrakk>S \\<subseteq> S0; S \\<noteq> S0;\n         \\<And>k v k' v'.\n            \\<lbrakk>(k, v) \\<in> S; (k', v') \\<in> S0 - S\\<rbrakk>\n            \\<Longrightarrow> k \\<le> k';\n         \\<not> c \\<sigma>; I S \\<sigma>\\<rbrakk>\n        \\<Longrightarrow> P \\<sigma>\\<rbrakk>\n    \\<Longrightarrow> P (it c f \\<sigma>0)", "apply (rule set_iterator_genord.iteratei_rule_insert_P \n    [of it S0 \"(\\<lambda>(k,_) (k',_). k \\<le> k')\" I \\<sigma>0 c f P])"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<lbrakk>set_iterator_genord it S0\n              (\\<lambda>(k, uu_) (k', uu_). k \\<le> k');\n     I {} \\<sigma>0;\n     \\<And>S \\<sigma> k v.\n        \\<lbrakk>c \\<sigma>; (k, v) \\<in> S0 - S; I S \\<sigma>;\n         S \\<subseteq> S0;\n         \\<And>k' v'. (k', v') \\<in> S \\<Longrightarrow> k' \\<le> k;\n         \\<And>k' v'.\n            (k', v') \\<in> S0 - S \\<Longrightarrow> k \\<le> k'\\<rbrakk>\n        \\<Longrightarrow> I (insert (k, v) S) (f (k, v) \\<sigma>);\n     \\<And>\\<sigma>. I S0 \\<sigma> \\<Longrightarrow> P \\<sigma>;\n     \\<And>\\<sigma> S.\n        \\<lbrakk>S \\<subseteq> S0; S \\<noteq> S0;\n         \\<And>k v k' v'.\n            \\<lbrakk>(k, v) \\<in> S; (k', v') \\<in> S0 - S\\<rbrakk>\n            \\<Longrightarrow> k \\<le> k';\n         \\<not> c \\<sigma>; I S \\<sigma>\\<rbrakk>\n        \\<Longrightarrow> P \\<sigma>\\<rbrakk>\n    \\<Longrightarrow> set_iterator_genord it S0\n                       (\\<lambda>(k, uu_) (k', uu_). k \\<le> k')\n 2. \\<lbrakk>set_iterator_genord it S0\n              (\\<lambda>(k, uu_) (k', uu_). k \\<le> k');\n     I {} \\<sigma>0;\n     \\<And>S \\<sigma> k v.\n        \\<lbrakk>c \\<sigma>; (k, v) \\<in> S0 - S; I S \\<sigma>;\n         S \\<subseteq> S0;\n         \\<And>k' v'. (k', v') \\<in> S \\<Longrightarrow> k' \\<le> k;\n         \\<And>k' v'.\n            (k', v') \\<in> S0 - S \\<Longrightarrow> k \\<le> k'\\<rbrakk>\n        \\<Longrightarrow> I (insert (k, v) S) (f (k, v) \\<sigma>);\n     \\<And>\\<sigma>. I S0 \\<sigma> \\<Longrightarrow> P \\<sigma>;\n     \\<And>\\<sigma> S.\n        \\<lbrakk>S \\<subseteq> S0; S \\<noteq> S0;\n         \\<And>k v k' v'.\n            \\<lbrakk>(k, v) \\<in> S; (k', v') \\<in> S0 - S\\<rbrakk>\n            \\<Longrightarrow> k \\<le> k';\n         \\<not> c \\<sigma>; I S \\<sigma>\\<rbrakk>\n        \\<Longrightarrow> P \\<sigma>\\<rbrakk>\n    \\<Longrightarrow> I {} \\<sigma>0\n 3. \\<And>S \\<sigma> x.\n       \\<lbrakk>set_iterator_genord it S0\n                 (\\<lambda>(k, uu_) (k', uu_). k \\<le> k');\n        I {} \\<sigma>0;\n        \\<And>S \\<sigma> k v.\n           \\<lbrakk>c \\<sigma>; (k, v) \\<in> S0 - S; I S \\<sigma>;\n            S \\<subseteq> S0;\n            \\<And>k' v'. (k', v') \\<in> S \\<Longrightarrow> k' \\<le> k;\n            \\<And>k' v'.\n               (k', v') \\<in> S0 - S \\<Longrightarrow> k \\<le> k'\\<rbrakk>\n           \\<Longrightarrow> I (insert (k, v) S) (f (k, v) \\<sigma>);\n        \\<And>\\<sigma>. I S0 \\<sigma> \\<Longrightarrow> P \\<sigma>;\n        \\<And>\\<sigma> S.\n           \\<lbrakk>S \\<subseteq> S0; S \\<noteq> S0;\n            \\<And>k v k' v'.\n               \\<lbrakk>(k, v) \\<in> S; (k', v') \\<in> S0 - S\\<rbrakk>\n               \\<Longrightarrow> k \\<le> k';\n            \\<not> c \\<sigma>; I S \\<sigma>\\<rbrakk>\n           \\<Longrightarrow> P \\<sigma>;\n        c \\<sigma>; x \\<in> S0 - S; I S \\<sigma>; S \\<subseteq> S0;\n        \\<forall>y\\<in>S0 - S - {x}.\n           (case x of (k, uu_) \\<Rightarrow> \\<lambda>(k', uu_). k \\<le> k')\n            y;\n        \\<forall>y\\<in>S.\n           (case y of (k, uu_) \\<Rightarrow> \\<lambda>(k', uu_). k \\<le> k')\n            x\\<rbrakk>\n       \\<Longrightarrow> I (insert x S) (f x \\<sigma>)\n 4. \\<And>\\<sigma>.\n       \\<lbrakk>set_iterator_genord it S0\n                 (\\<lambda>(k, uu_) (k', uu_). k \\<le> k');\n        I {} \\<sigma>0;\n        \\<And>S \\<sigma> k v.\n           \\<lbrakk>c \\<sigma>; (k, v) \\<in> S0 - S; I S \\<sigma>;\n            S \\<subseteq> S0;\n            \\<And>k' v'. (k', v') \\<in> S \\<Longrightarrow> k' \\<le> k;\n            \\<And>k' v'.\n               (k', v') \\<in> S0 - S \\<Longrightarrow> k \\<le> k'\\<rbrakk>\n           \\<Longrightarrow> I (insert (k, v) S) (f (k, v) \\<sigma>);\n        \\<And>\\<sigma>. I S0 \\<sigma> \\<Longrightarrow> P \\<sigma>;\n        \\<And>\\<sigma> S.\n           \\<lbrakk>S \\<subseteq> S0; S \\<noteq> S0;\n            \\<And>k v k' v'.\n               \\<lbrakk>(k, v) \\<in> S; (k', v') \\<in> S0 - S\\<rbrakk>\n               \\<Longrightarrow> k \\<le> k';\n            \\<not> c \\<sigma>; I S \\<sigma>\\<rbrakk>\n           \\<Longrightarrow> P \\<sigma>;\n        I S0 \\<sigma>\\<rbrakk>\n       \\<Longrightarrow> P \\<sigma>\n 5. \\<And>\\<sigma> S.\n       \\<lbrakk>set_iterator_genord it S0\n                 (\\<lambda>(k, uu_) (k', uu_). k \\<le> k');\n        I {} \\<sigma>0;\n        \\<And>S \\<sigma> k v.\n           \\<lbrakk>c \\<sigma>; (k, v) \\<in> S0 - S; I S \\<sigma>;\n            S \\<subseteq> S0;\n            \\<And>k' v'. (k', v') \\<in> S \\<Longrightarrow> k' \\<le> k;\n            \\<And>k' v'.\n               (k', v') \\<in> S0 - S \\<Longrightarrow> k \\<le> k'\\<rbrakk>\n           \\<Longrightarrow> I (insert (k, v) S) (f (k, v) \\<sigma>);\n        \\<And>\\<sigma>. I S0 \\<sigma> \\<Longrightarrow> P \\<sigma>;\n        \\<And>\\<sigma> S.\n           \\<lbrakk>S \\<subseteq> S0; S \\<noteq> S0;\n            \\<And>k v k' v'.\n               \\<lbrakk>(k, v) \\<in> S; (k', v') \\<in> S0 - S\\<rbrakk>\n               \\<Longrightarrow> k \\<le> k';\n            \\<not> c \\<sigma>; I S \\<sigma>\\<rbrakk>\n           \\<Longrightarrow> P \\<sigma>;\n        S \\<subseteq> S0; S \\<noteq> S0; \\<not> c \\<sigma>; I S \\<sigma>;\n        \\<forall>x\\<in>S0 - S.\n           \\<forall>y\\<in>S.\n              (case y of\n               (k, uu_) \\<Rightarrow> \\<lambda>(k', uu_). k \\<le> k')\n               x\\<rbrakk>\n       \\<Longrightarrow> P \\<sigma>", "apply simp_all"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>S \\<sigma> x.\n       \\<lbrakk>set_iterator_genord it S0\n                 (\\<lambda>(k, uu_) (k', uu_). k \\<le> k');\n        I {} \\<sigma>0;\n        \\<And>S \\<sigma> k v.\n           \\<lbrakk>c \\<sigma>; (k, v) \\<in> S0 \\<and> (k, v) \\<notin> S;\n            I S \\<sigma>; S \\<subseteq> S0;\n            \\<And>k' v'. (k', v') \\<in> S \\<Longrightarrow> k' \\<le> k;\n            \\<And>k' v'.\n               (k', v') \\<in> S0 \\<and>\n               (k', v') \\<notin> S \\<Longrightarrow>\n               k \\<le> k'\\<rbrakk>\n           \\<Longrightarrow> I (insert (k, v) S) (f (k, v) \\<sigma>);\n        \\<And>\\<sigma>. I S0 \\<sigma> \\<Longrightarrow> P \\<sigma>;\n        \\<And>\\<sigma> S.\n           \\<lbrakk>S \\<subseteq> S0; S \\<noteq> S0;\n            \\<And>k v k' v'.\n               \\<lbrakk>(k, v) \\<in> S;\n                (k', v') \\<in> S0 \\<and> (k', v') \\<notin> S\\<rbrakk>\n               \\<Longrightarrow> k \\<le> k';\n            \\<not> c \\<sigma>; I S \\<sigma>\\<rbrakk>\n           \\<Longrightarrow> P \\<sigma>;\n        c \\<sigma>; x \\<in> S0 \\<and> x \\<notin> S; I S \\<sigma>;\n        S \\<subseteq> S0;\n        \\<forall>y\\<in>S0 - S - {x}.\n           (case x of (k, uu_) \\<Rightarrow> \\<lambda>(k', uu_). k \\<le> k')\n            y;\n        \\<forall>y\\<in>S.\n           (case y of (k, uu_) \\<Rightarrow> \\<lambda>(k', uu_). k \\<le> k')\n            x\\<rbrakk>\n       \\<Longrightarrow> I (insert x S) (f x \\<sigma>)\n 2. \\<And>\\<sigma> S.\n       \\<lbrakk>set_iterator_genord it S0\n                 (\\<lambda>(k, uu_) (k', uu_). k \\<le> k');\n        I {} \\<sigma>0;\n        \\<And>S \\<sigma> k v.\n           \\<lbrakk>c \\<sigma>; (k, v) \\<in> S0 \\<and> (k, v) \\<notin> S;\n            I S \\<sigma>; S \\<subseteq> S0;\n            \\<And>k' v'. (k', v') \\<in> S \\<Longrightarrow> k' \\<le> k;\n            \\<And>k' v'.\n               (k', v') \\<in> S0 \\<and>\n               (k', v') \\<notin> S \\<Longrightarrow>\n               k \\<le> k'\\<rbrakk>\n           \\<Longrightarrow> I (insert (k, v) S) (f (k, v) \\<sigma>);\n        \\<And>\\<sigma>. I S0 \\<sigma> \\<Longrightarrow> P \\<sigma>;\n        \\<And>\\<sigma> S.\n           \\<lbrakk>S \\<subseteq> S0; S \\<noteq> S0;\n            \\<And>k v k' v'.\n               \\<lbrakk>(k, v) \\<in> S;\n                (k', v') \\<in> S0 \\<and> (k', v') \\<notin> S\\<rbrakk>\n               \\<Longrightarrow> k \\<le> k';\n            \\<not> c \\<sigma>; I S \\<sigma>\\<rbrakk>\n           \\<Longrightarrow> P \\<sigma>;\n        S \\<subseteq> S0; S \\<noteq> S0; \\<not> c \\<sigma>; I S \\<sigma>;\n        \\<forall>x\\<in>S0 - S.\n           \\<forall>y\\<in>S.\n              (case y of\n               (k, uu_) \\<Rightarrow> \\<lambda>(k', uu_). k \\<le> k')\n               x\\<rbrakk>\n       \\<Longrightarrow> P \\<sigma>", "apply (auto simp add: Ball_def)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>S \\<sigma> a b.\n       \\<lbrakk>set_iterator_genord it S0\n                 (\\<lambda>(k, uu_) (k', uu_). k \\<le> k');\n        I {} \\<sigma>0;\n        \\<And>S \\<sigma> k v.\n           \\<lbrakk>c \\<sigma>; (k, v) \\<in> S0 \\<and> (k, v) \\<notin> S;\n            I S \\<sigma>; S \\<subseteq> S0;\n            \\<And>k' v'. (k', v') \\<in> S \\<Longrightarrow> k' \\<le> k;\n            \\<And>k' v'.\n               (k', v') \\<in> S0 \\<and>\n               (k', v') \\<notin> S \\<Longrightarrow>\n               k \\<le> k'\\<rbrakk>\n           \\<Longrightarrow> I (insert (k, v) S) (f (k, v) \\<sigma>);\n        \\<And>\\<sigma>. I S0 \\<sigma> \\<Longrightarrow> P \\<sigma>;\n        \\<And>\\<sigma> S.\n           \\<lbrakk>S \\<subseteq> S0; S \\<noteq> S0;\n            \\<And>k v k' v'.\n               \\<lbrakk>(k, v) \\<in> S;\n                (k', v') \\<in> S0 \\<and> (k', v') \\<notin> S\\<rbrakk>\n               \\<Longrightarrow> k \\<le> k';\n            \\<not> c \\<sigma>; I S \\<sigma>\\<rbrakk>\n           \\<Longrightarrow> P \\<sigma>;\n        c \\<sigma>; I S \\<sigma>; S \\<subseteq> S0;\n        \\<forall>aa.\n           (\\<exists>ba.\n               (aa, ba) \\<in> S0 \\<and>\n               (aa, ba) \\<notin> S \\<and>\n               (aa = a \\<longrightarrow> ba \\<noteq> b)) \\<longrightarrow>\n           a \\<le> aa;\n        \\<forall>aa.\n           (\\<exists>b. (aa, b) \\<in> S) \\<longrightarrow> aa \\<le> a;\n        (a, b) \\<in> S0; (a, b) \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> I (insert (a, b) S) (f (a, b) \\<sigma>)\n 2. \\<And>\\<sigma> S a b.\n       \\<lbrakk>set_iterator_genord it S0\n                 (\\<lambda>(k, uu_) (k', uu_). k \\<le> k');\n        I {} \\<sigma>0;\n        \\<And>S \\<sigma> k v.\n           \\<lbrakk>c \\<sigma>; (k, v) \\<in> S0 \\<and> (k, v) \\<notin> S;\n            I S \\<sigma>; S \\<subseteq> S0;\n            \\<And>k' v'. (k', v') \\<in> S \\<Longrightarrow> k' \\<le> k;\n            \\<And>k' v'.\n               (k', v') \\<in> S0 \\<and>\n               (k', v') \\<notin> S \\<Longrightarrow>\n               k \\<le> k'\\<rbrakk>\n           \\<Longrightarrow> I (insert (k, v) S) (f (k, v) \\<sigma>);\n        \\<And>\\<sigma>. I S0 \\<sigma> \\<Longrightarrow> P \\<sigma>;\n        \\<And>\\<sigma> S.\n           \\<lbrakk>S \\<subseteq> S0; S \\<noteq> S0;\n            \\<And>k v k' v'.\n               \\<lbrakk>(k, v) \\<in> S;\n                (k', v') \\<in> S0 \\<and> (k', v') \\<notin> S\\<rbrakk>\n               \\<Longrightarrow> k \\<le> k';\n            \\<not> c \\<sigma>; I S \\<sigma>\\<rbrakk>\n           \\<Longrightarrow> P \\<sigma>;\n        S \\<subseteq> S0; \\<not> c \\<sigma>; I S \\<sigma>;\n        \\<forall>a.\n           (\\<exists>b.\n               (a, b) \\<in> S0 \\<and> (a, b) \\<notin> S) \\<longrightarrow>\n           (\\<forall>aa.\n               (\\<exists>b. (aa, b) \\<in> S) \\<longrightarrow> aa \\<le> a);\n        \\<not> P \\<sigma>; (a, b) \\<in> S0\\<rbrakk>\n       \\<Longrightarrow> (a, b) \\<in> S", "apply (metis order_refl)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<sigma> S a b.\n       \\<lbrakk>set_iterator_genord it S0\n                 (\\<lambda>(k, uu_) (k', uu_). k \\<le> k');\n        I {} \\<sigma>0;\n        \\<And>S \\<sigma> k v.\n           \\<lbrakk>c \\<sigma>; (k, v) \\<in> S0 \\<and> (k, v) \\<notin> S;\n            I S \\<sigma>; S \\<subseteq> S0;\n            \\<And>k' v'. (k', v') \\<in> S \\<Longrightarrow> k' \\<le> k;\n            \\<And>k' v'.\n               (k', v') \\<in> S0 \\<and>\n               (k', v') \\<notin> S \\<Longrightarrow>\n               k \\<le> k'\\<rbrakk>\n           \\<Longrightarrow> I (insert (k, v) S) (f (k, v) \\<sigma>);\n        \\<And>\\<sigma>. I S0 \\<sigma> \\<Longrightarrow> P \\<sigma>;\n        \\<And>\\<sigma> S.\n           \\<lbrakk>S \\<subseteq> S0; S \\<noteq> S0;\n            \\<And>k v k' v'.\n               \\<lbrakk>(k, v) \\<in> S;\n                (k', v') \\<in> S0 \\<and> (k', v') \\<notin> S\\<rbrakk>\n               \\<Longrightarrow> k \\<le> k';\n            \\<not> c \\<sigma>; I S \\<sigma>\\<rbrakk>\n           \\<Longrightarrow> P \\<sigma>;\n        S \\<subseteq> S0; \\<not> c \\<sigma>; I S \\<sigma>;\n        \\<forall>a.\n           (\\<exists>b.\n               (a, b) \\<in> S0 \\<and> (a, b) \\<notin> S) \\<longrightarrow>\n           (\\<forall>aa.\n               (\\<exists>b. (aa, b) \\<in> S) \\<longrightarrow> aa \\<le> a);\n        \\<not> P \\<sigma>; (a, b) \\<in> S0\\<rbrakk>\n       \\<Longrightarrow> (a, b) \\<in> S", "apply metis"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma set_iterator_map_rev_linord_rule_P:\n  \"\\<lbrakk> set_iterator_map_rev_linord it S0;\n     I S0 \\<sigma>0;\n     !!S \\<sigma> k v. \\<lbrakk> c \\<sigma>; (k, v) \\<in> S; I S \\<sigma>; S \\<subseteq> S0; \\<And>k' v'. (k', v') \\<in> S0-S \\<Longrightarrow> k \\<le> k';\n                  \\<And>k' v'. (k', v') \\<in> S \\<Longrightarrow> k' \\<le> k\\<rbrakk> \\<Longrightarrow> I (S - {(k,v)}) (f (k,v) \\<sigma>);\n     !!\\<sigma>. I {} \\<sigma> \\<Longrightarrow> P \\<sigma>;\n     !!\\<sigma> S. S \\<subseteq> S0 \\<Longrightarrow> S \\<noteq> {} \\<Longrightarrow> (\\<And>k v k' v'. \\<lbrakk>(k, v) \\<in> S0-S; (k', v') \\<in> S\\<rbrakk> \\<Longrightarrow> k' \\<le> k) \\<Longrightarrow> \n            \\<not> c \\<sigma> \\<Longrightarrow> I S \\<sigma> \\<Longrightarrow> P \\<sigma>\n   \\<rbrakk> \\<Longrightarrow> P (it c f \\<sigma>0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>set_iterator_map_rev_linord it S0; I S0 \\<sigma>0;\n     \\<And>S \\<sigma> k v.\n        \\<lbrakk>c \\<sigma>; (k, v) \\<in> S; I S \\<sigma>; S \\<subseteq> S0;\n         \\<And>k' v'. (k', v') \\<in> S0 - S \\<Longrightarrow> k \\<le> k';\n         \\<And>k' v'. (k', v') \\<in> S \\<Longrightarrow> k' \\<le> k\\<rbrakk>\n        \\<Longrightarrow> I (S - {(k, v)}) (f (k, v) \\<sigma>);\n     \\<And>\\<sigma>. I {} \\<sigma> \\<Longrightarrow> P \\<sigma>;\n     \\<And>\\<sigma> S.\n        \\<lbrakk>S \\<subseteq> S0; S \\<noteq> {};\n         \\<And>k v k' v'.\n            \\<lbrakk>(k, v) \\<in> S0 - S; (k', v') \\<in> S\\<rbrakk>\n            \\<Longrightarrow> k' \\<le> k;\n         \\<not> c \\<sigma>; I S \\<sigma>\\<rbrakk>\n        \\<Longrightarrow> P \\<sigma>\\<rbrakk>\n    \\<Longrightarrow> P (it c f \\<sigma>0)", "unfolding set_iterator_map_rev_linord_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>set_iterator_genord it S0\n              (\\<lambda>(k, uu_) (k', uu_). k' \\<le> k);\n     I S0 \\<sigma>0;\n     \\<And>S \\<sigma> k v.\n        \\<lbrakk>c \\<sigma>; (k, v) \\<in> S; I S \\<sigma>; S \\<subseteq> S0;\n         \\<And>k' v'. (k', v') \\<in> S0 - S \\<Longrightarrow> k \\<le> k';\n         \\<And>k' v'. (k', v') \\<in> S \\<Longrightarrow> k' \\<le> k\\<rbrakk>\n        \\<Longrightarrow> I (S - {(k, v)}) (f (k, v) \\<sigma>);\n     \\<And>\\<sigma>. I {} \\<sigma> \\<Longrightarrow> P \\<sigma>;\n     \\<And>\\<sigma> S.\n        \\<lbrakk>S \\<subseteq> S0; S \\<noteq> {};\n         \\<And>k v k' v'.\n            \\<lbrakk>(k, v) \\<in> S0 - S; (k', v') \\<in> S\\<rbrakk>\n            \\<Longrightarrow> k' \\<le> k;\n         \\<not> c \\<sigma>; I S \\<sigma>\\<rbrakk>\n        \\<Longrightarrow> P \\<sigma>\\<rbrakk>\n    \\<Longrightarrow> P (it c f \\<sigma>0)", "apply (rule set_iterator_genord.iteratei_rule_P \n    [of it S0 \"(\\<lambda>(k,_) (k',_). k \\<ge> k')\" I \\<sigma>0 c f P])"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<lbrakk>set_iterator_genord it S0\n              (\\<lambda>(k, uu_) (k', uu_). k' \\<le> k);\n     I S0 \\<sigma>0;\n     \\<And>S \\<sigma> k v.\n        \\<lbrakk>c \\<sigma>; (k, v) \\<in> S; I S \\<sigma>; S \\<subseteq> S0;\n         \\<And>k' v'. (k', v') \\<in> S0 - S \\<Longrightarrow> k \\<le> k';\n         \\<And>k' v'. (k', v') \\<in> S \\<Longrightarrow> k' \\<le> k\\<rbrakk>\n        \\<Longrightarrow> I (S - {(k, v)}) (f (k, v) \\<sigma>);\n     \\<And>\\<sigma>. I {} \\<sigma> \\<Longrightarrow> P \\<sigma>;\n     \\<And>\\<sigma> S.\n        \\<lbrakk>S \\<subseteq> S0; S \\<noteq> {};\n         \\<And>k v k' v'.\n            \\<lbrakk>(k, v) \\<in> S0 - S; (k', v') \\<in> S\\<rbrakk>\n            \\<Longrightarrow> k' \\<le> k;\n         \\<not> c \\<sigma>; I S \\<sigma>\\<rbrakk>\n        \\<Longrightarrow> P \\<sigma>\\<rbrakk>\n    \\<Longrightarrow> set_iterator_genord it S0\n                       (\\<lambda>(k, uu_) (k', uu_). k' \\<le> k)\n 2. \\<lbrakk>set_iterator_genord it S0\n              (\\<lambda>(k, uu_) (k', uu_). k' \\<le> k);\n     I S0 \\<sigma>0;\n     \\<And>S \\<sigma> k v.\n        \\<lbrakk>c \\<sigma>; (k, v) \\<in> S; I S \\<sigma>; S \\<subseteq> S0;\n         \\<And>k' v'. (k', v') \\<in> S0 - S \\<Longrightarrow> k \\<le> k';\n         \\<And>k' v'. (k', v') \\<in> S \\<Longrightarrow> k' \\<le> k\\<rbrakk>\n        \\<Longrightarrow> I (S - {(k, v)}) (f (k, v) \\<sigma>);\n     \\<And>\\<sigma>. I {} \\<sigma> \\<Longrightarrow> P \\<sigma>;\n     \\<And>\\<sigma> S.\n        \\<lbrakk>S \\<subseteq> S0; S \\<noteq> {};\n         \\<And>k v k' v'.\n            \\<lbrakk>(k, v) \\<in> S0 - S; (k', v') \\<in> S\\<rbrakk>\n            \\<Longrightarrow> k' \\<le> k;\n         \\<not> c \\<sigma>; I S \\<sigma>\\<rbrakk>\n        \\<Longrightarrow> P \\<sigma>\\<rbrakk>\n    \\<Longrightarrow> I S0 \\<sigma>0\n 3. \\<And>S \\<sigma> x.\n       \\<lbrakk>set_iterator_genord it S0\n                 (\\<lambda>(k, uu_) (k', uu_). k' \\<le> k);\n        I S0 \\<sigma>0;\n        \\<And>S \\<sigma> k v.\n           \\<lbrakk>c \\<sigma>; (k, v) \\<in> S; I S \\<sigma>;\n            S \\<subseteq> S0;\n            \\<And>k' v'. (k', v') \\<in> S0 - S \\<Longrightarrow> k \\<le> k';\n            \\<And>k' v'.\n               (k', v') \\<in> S \\<Longrightarrow> k' \\<le> k\\<rbrakk>\n           \\<Longrightarrow> I (S - {(k, v)}) (f (k, v) \\<sigma>);\n        \\<And>\\<sigma>. I {} \\<sigma> \\<Longrightarrow> P \\<sigma>;\n        \\<And>\\<sigma> S.\n           \\<lbrakk>S \\<subseteq> S0; S \\<noteq> {};\n            \\<And>k v k' v'.\n               \\<lbrakk>(k, v) \\<in> S0 - S; (k', v') \\<in> S\\<rbrakk>\n               \\<Longrightarrow> k' \\<le> k;\n            \\<not> c \\<sigma>; I S \\<sigma>\\<rbrakk>\n           \\<Longrightarrow> P \\<sigma>;\n        c \\<sigma>; x \\<in> S; I S \\<sigma>; S \\<subseteq> S0;\n        \\<forall>y\\<in>S - {x}.\n           (case x of (k, uu_) \\<Rightarrow> \\<lambda>(k', uu_). k' \\<le> k)\n            y;\n        \\<forall>y\\<in>S0 - S.\n           (case y of (k, uu_) \\<Rightarrow> \\<lambda>(k', uu_). k' \\<le> k)\n            x\\<rbrakk>\n       \\<Longrightarrow> I (S - {x}) (f x \\<sigma>)\n 4. \\<And>\\<sigma>.\n       \\<lbrakk>set_iterator_genord it S0\n                 (\\<lambda>(k, uu_) (k', uu_). k' \\<le> k);\n        I S0 \\<sigma>0;\n        \\<And>S \\<sigma> k v.\n           \\<lbrakk>c \\<sigma>; (k, v) \\<in> S; I S \\<sigma>;\n            S \\<subseteq> S0;\n            \\<And>k' v'. (k', v') \\<in> S0 - S \\<Longrightarrow> k \\<le> k';\n            \\<And>k' v'.\n               (k', v') \\<in> S \\<Longrightarrow> k' \\<le> k\\<rbrakk>\n           \\<Longrightarrow> I (S - {(k, v)}) (f (k, v) \\<sigma>);\n        \\<And>\\<sigma>. I {} \\<sigma> \\<Longrightarrow> P \\<sigma>;\n        \\<And>\\<sigma> S.\n           \\<lbrakk>S \\<subseteq> S0; S \\<noteq> {};\n            \\<And>k v k' v'.\n               \\<lbrakk>(k, v) \\<in> S0 - S; (k', v') \\<in> S\\<rbrakk>\n               \\<Longrightarrow> k' \\<le> k;\n            \\<not> c \\<sigma>; I S \\<sigma>\\<rbrakk>\n           \\<Longrightarrow> P \\<sigma>;\n        I {} \\<sigma>\\<rbrakk>\n       \\<Longrightarrow> P \\<sigma>\n 5. \\<And>\\<sigma> S.\n       \\<lbrakk>set_iterator_genord it S0\n                 (\\<lambda>(k, uu_) (k', uu_). k' \\<le> k);\n        I S0 \\<sigma>0;\n        \\<And>S \\<sigma> k v.\n           \\<lbrakk>c \\<sigma>; (k, v) \\<in> S; I S \\<sigma>;\n            S \\<subseteq> S0;\n            \\<And>k' v'. (k', v') \\<in> S0 - S \\<Longrightarrow> k \\<le> k';\n            \\<And>k' v'.\n               (k', v') \\<in> S \\<Longrightarrow> k' \\<le> k\\<rbrakk>\n           \\<Longrightarrow> I (S - {(k, v)}) (f (k, v) \\<sigma>);\n        \\<And>\\<sigma>. I {} \\<sigma> \\<Longrightarrow> P \\<sigma>;\n        \\<And>\\<sigma> S.\n           \\<lbrakk>S \\<subseteq> S0; S \\<noteq> {};\n            \\<And>k v k' v'.\n               \\<lbrakk>(k, v) \\<in> S0 - S; (k', v') \\<in> S\\<rbrakk>\n               \\<Longrightarrow> k' \\<le> k;\n            \\<not> c \\<sigma>; I S \\<sigma>\\<rbrakk>\n           \\<Longrightarrow> P \\<sigma>;\n        S \\<subseteq> S0; S \\<noteq> {}; \\<not> c \\<sigma>; I S \\<sigma>;\n        \\<forall>x\\<in>S.\n           \\<forall>y\\<in>S0 - S.\n              (case y of\n               (k, uu_) \\<Rightarrow> \\<lambda>(k', uu_). k' \\<le> k)\n               x\\<rbrakk>\n       \\<Longrightarrow> P \\<sigma>", "apply simp_all"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>S \\<sigma> x.\n       \\<lbrakk>set_iterator_genord it S0\n                 (\\<lambda>(k, uu_) (k', uu_). k' \\<le> k);\n        I S0 \\<sigma>0;\n        \\<And>S \\<sigma> k v.\n           \\<lbrakk>c \\<sigma>; (k, v) \\<in> S; I S \\<sigma>;\n            S \\<subseteq> S0;\n            \\<And>k' v'.\n               (k', v') \\<in> S0 \\<and>\n               (k', v') \\<notin> S \\<Longrightarrow>\n               k \\<le> k';\n            \\<And>k' v'.\n               (k', v') \\<in> S \\<Longrightarrow> k' \\<le> k\\<rbrakk>\n           \\<Longrightarrow> I (S - {(k, v)}) (f (k, v) \\<sigma>);\n        \\<And>\\<sigma>. I {} \\<sigma> \\<Longrightarrow> P \\<sigma>;\n        \\<And>\\<sigma> S.\n           \\<lbrakk>S \\<subseteq> S0; S \\<noteq> {};\n            \\<And>k v k' v'.\n               \\<lbrakk>(k, v) \\<in> S0 \\<and> (k, v) \\<notin> S;\n                (k', v') \\<in> S\\<rbrakk>\n               \\<Longrightarrow> k' \\<le> k;\n            \\<not> c \\<sigma>; I S \\<sigma>\\<rbrakk>\n           \\<Longrightarrow> P \\<sigma>;\n        c \\<sigma>; x \\<in> S; I S \\<sigma>; S \\<subseteq> S0;\n        \\<forall>y\\<in>S - {x}.\n           (case x of (k, uu_) \\<Rightarrow> \\<lambda>(k', uu_). k' \\<le> k)\n            y;\n        \\<forall>y\\<in>S0 - S.\n           (case y of (k, uu_) \\<Rightarrow> \\<lambda>(k', uu_). k' \\<le> k)\n            x\\<rbrakk>\n       \\<Longrightarrow> I (S - {x}) (f x \\<sigma>)\n 2. \\<And>\\<sigma> S.\n       \\<lbrakk>set_iterator_genord it S0\n                 (\\<lambda>(k, uu_) (k', uu_). k' \\<le> k);\n        I S0 \\<sigma>0;\n        \\<And>S \\<sigma> k v.\n           \\<lbrakk>c \\<sigma>; (k, v) \\<in> S; I S \\<sigma>;\n            S \\<subseteq> S0;\n            \\<And>k' v'.\n               (k', v') \\<in> S0 \\<and>\n               (k', v') \\<notin> S \\<Longrightarrow>\n               k \\<le> k';\n            \\<And>k' v'.\n               (k', v') \\<in> S \\<Longrightarrow> k' \\<le> k\\<rbrakk>\n           \\<Longrightarrow> I (S - {(k, v)}) (f (k, v) \\<sigma>);\n        \\<And>\\<sigma>. I {} \\<sigma> \\<Longrightarrow> P \\<sigma>;\n        \\<And>\\<sigma> S.\n           \\<lbrakk>S \\<subseteq> S0; S \\<noteq> {};\n            \\<And>k v k' v'.\n               \\<lbrakk>(k, v) \\<in> S0 \\<and> (k, v) \\<notin> S;\n                (k', v') \\<in> S\\<rbrakk>\n               \\<Longrightarrow> k' \\<le> k;\n            \\<not> c \\<sigma>; I S \\<sigma>\\<rbrakk>\n           \\<Longrightarrow> P \\<sigma>;\n        S \\<subseteq> S0; S \\<noteq> {}; \\<not> c \\<sigma>; I S \\<sigma>;\n        \\<forall>x\\<in>S.\n           \\<forall>y\\<in>S0 - S.\n              (case y of\n               (k, uu_) \\<Rightarrow> \\<lambda>(k', uu_). k' \\<le> k)\n               x\\<rbrakk>\n       \\<Longrightarrow> P \\<sigma>", "apply (auto simp add: Ball_def)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>S \\<sigma> a b.\n       \\<lbrakk>set_iterator_genord it S0\n                 (\\<lambda>(k, uu_) (k', uu_). k' \\<le> k);\n        I S0 \\<sigma>0;\n        \\<And>S \\<sigma> k v.\n           \\<lbrakk>c \\<sigma>; (k, v) \\<in> S; I S \\<sigma>;\n            S \\<subseteq> S0;\n            \\<And>k' v'.\n               (k', v') \\<in> S0 \\<and>\n               (k', v') \\<notin> S \\<Longrightarrow>\n               k \\<le> k';\n            \\<And>k' v'.\n               (k', v') \\<in> S \\<Longrightarrow> k' \\<le> k\\<rbrakk>\n           \\<Longrightarrow> I (S - {(k, v)}) (f (k, v) \\<sigma>);\n        \\<And>\\<sigma>. I {} \\<sigma> \\<Longrightarrow> P \\<sigma>;\n        \\<And>\\<sigma> S.\n           \\<lbrakk>S \\<subseteq> S0; S \\<noteq> {};\n            \\<And>k v k' v'.\n               \\<lbrakk>(k, v) \\<in> S0 \\<and> (k, v) \\<notin> S;\n                (k', v') \\<in> S\\<rbrakk>\n               \\<Longrightarrow> k' \\<le> k;\n            \\<not> c \\<sigma>; I S \\<sigma>\\<rbrakk>\n           \\<Longrightarrow> P \\<sigma>;\n        c \\<sigma>; (a, b) \\<in> S; I S \\<sigma>; S \\<subseteq> S0;\n        \\<forall>aa.\n           (\\<exists>ba.\n               (aa, ba) \\<in> S \\<and>\n               (aa = a \\<longrightarrow> ba \\<noteq> b)) \\<longrightarrow>\n           aa \\<le> a;\n        \\<forall>aa.\n           (\\<exists>b.\n               (aa, b) \\<in> S0 \\<and> (aa, b) \\<notin> S) \\<longrightarrow>\n           a \\<le> aa\\<rbrakk>\n       \\<Longrightarrow> I (S - {(a, b)}) (f (a, b) \\<sigma>)\n 2. \\<And>\\<sigma> S a b.\n       \\<lbrakk>set_iterator_genord it S0\n                 (\\<lambda>(k, uu_) (k', uu_). k' \\<le> k);\n        I S0 \\<sigma>0;\n        \\<And>S \\<sigma> k v.\n           \\<lbrakk>c \\<sigma>; (k, v) \\<in> S; I S \\<sigma>;\n            S \\<subseteq> S0;\n            \\<And>k' v'.\n               (k', v') \\<in> S0 \\<and>\n               (k', v') \\<notin> S \\<Longrightarrow>\n               k \\<le> k';\n            \\<And>k' v'.\n               (k', v') \\<in> S \\<Longrightarrow> k' \\<le> k\\<rbrakk>\n           \\<Longrightarrow> I (S - {(k, v)}) (f (k, v) \\<sigma>);\n        \\<And>\\<sigma>. I {} \\<sigma> \\<Longrightarrow> P \\<sigma>;\n        \\<And>\\<sigma> S.\n           \\<lbrakk>S \\<subseteq> S0; S \\<noteq> {};\n            \\<And>k v k' v'.\n               \\<lbrakk>(k, v) \\<in> S0 \\<and> (k, v) \\<notin> S;\n                (k', v') \\<in> S\\<rbrakk>\n               \\<Longrightarrow> k' \\<le> k;\n            \\<not> c \\<sigma>; I S \\<sigma>\\<rbrakk>\n           \\<Longrightarrow> P \\<sigma>;\n        S \\<subseteq> S0; \\<not> c \\<sigma>; I S \\<sigma>;\n        \\<forall>a.\n           (\\<exists>b. (a, b) \\<in> S) \\<longrightarrow>\n           (\\<forall>aa.\n               (\\<exists>b.\n                   (aa, b) \\<in> S0 \\<and>\n                   (aa, b) \\<notin> S) \\<longrightarrow>\n               a \\<le> aa);\n        \\<not> P \\<sigma>; (a, b) \\<in> S\\<rbrakk>\n       \\<Longrightarrow> False", "apply (metis order_refl)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<sigma> S a b.\n       \\<lbrakk>set_iterator_genord it S0\n                 (\\<lambda>(k, uu_) (k', uu_). k' \\<le> k);\n        I S0 \\<sigma>0;\n        \\<And>S \\<sigma> k v.\n           \\<lbrakk>c \\<sigma>; (k, v) \\<in> S; I S \\<sigma>;\n            S \\<subseteq> S0;\n            \\<And>k' v'.\n               (k', v') \\<in> S0 \\<and>\n               (k', v') \\<notin> S \\<Longrightarrow>\n               k \\<le> k';\n            \\<And>k' v'.\n               (k', v') \\<in> S \\<Longrightarrow> k' \\<le> k\\<rbrakk>\n           \\<Longrightarrow> I (S - {(k, v)}) (f (k, v) \\<sigma>);\n        \\<And>\\<sigma>. I {} \\<sigma> \\<Longrightarrow> P \\<sigma>;\n        \\<And>\\<sigma> S.\n           \\<lbrakk>S \\<subseteq> S0; S \\<noteq> {};\n            \\<And>k v k' v'.\n               \\<lbrakk>(k, v) \\<in> S0 \\<and> (k, v) \\<notin> S;\n                (k', v') \\<in> S\\<rbrakk>\n               \\<Longrightarrow> k' \\<le> k;\n            \\<not> c \\<sigma>; I S \\<sigma>\\<rbrakk>\n           \\<Longrightarrow> P \\<sigma>;\n        S \\<subseteq> S0; \\<not> c \\<sigma>; I S \\<sigma>;\n        \\<forall>a.\n           (\\<exists>b. (a, b) \\<in> S) \\<longrightarrow>\n           (\\<forall>aa.\n               (\\<exists>b.\n                   (aa, b) \\<in> S0 \\<and>\n                   (aa, b) \\<notin> S) \\<longrightarrow>\n               a \\<le> aa);\n        \\<not> P \\<sigma>; (a, b) \\<in> S\\<rbrakk>\n       \\<Longrightarrow> False", "apply metis"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma set_iterator_map_rev_linord_rule_insert_P:\n  \"\\<lbrakk> set_iterator_map_rev_linord it S0;\n     I {} \\<sigma>0;\n     !!S \\<sigma> k v. \\<lbrakk> c \\<sigma>; (k, v) \\<in> S0 - S; I S \\<sigma>; S \\<subseteq> S0; \\<And>k' v'. (k', v') \\<in> S \\<Longrightarrow> k \\<le> k';\n                 \\<And>k' v'. (k',v') \\<in> S0 - S \\<Longrightarrow> k' \\<le> k\\<rbrakk>  \\<Longrightarrow> I (insert (k,v) S) (f (k,v) \\<sigma>);\n     !!\\<sigma>. I S0 \\<sigma> \\<Longrightarrow> P \\<sigma>;\n     !!\\<sigma> S. S \\<subseteq> S0 \\<Longrightarrow> S \\<noteq> S0 \\<Longrightarrow> (\\<And>k v k' v'. \\<lbrakk>(k, v) \\<in> S; (k', v') \\<in> S0-S\\<rbrakk> \\<Longrightarrow> k' \\<le> k) \\<Longrightarrow> \n            \\<not> c \\<sigma> \\<Longrightarrow> I S \\<sigma> \\<Longrightarrow> P \\<sigma>\n   \\<rbrakk> \\<Longrightarrow> P (it c f \\<sigma>0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>set_iterator_map_rev_linord it S0; I {} \\<sigma>0;\n     \\<And>S \\<sigma> k v.\n        \\<lbrakk>c \\<sigma>; (k, v) \\<in> S0 - S; I S \\<sigma>;\n         S \\<subseteq> S0;\n         \\<And>k' v'. (k', v') \\<in> S \\<Longrightarrow> k \\<le> k';\n         \\<And>k' v'.\n            (k', v') \\<in> S0 - S \\<Longrightarrow> k' \\<le> k\\<rbrakk>\n        \\<Longrightarrow> I (insert (k, v) S) (f (k, v) \\<sigma>);\n     \\<And>\\<sigma>. I S0 \\<sigma> \\<Longrightarrow> P \\<sigma>;\n     \\<And>\\<sigma> S.\n        \\<lbrakk>S \\<subseteq> S0; S \\<noteq> S0;\n         \\<And>k v k' v'.\n            \\<lbrakk>(k, v) \\<in> S; (k', v') \\<in> S0 - S\\<rbrakk>\n            \\<Longrightarrow> k' \\<le> k;\n         \\<not> c \\<sigma>; I S \\<sigma>\\<rbrakk>\n        \\<Longrightarrow> P \\<sigma>\\<rbrakk>\n    \\<Longrightarrow> P (it c f \\<sigma>0)", "unfolding set_iterator_map_rev_linord_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>set_iterator_genord it S0\n              (\\<lambda>(k, uu_) (k', uu_). k' \\<le> k);\n     I {} \\<sigma>0;\n     \\<And>S \\<sigma> k v.\n        \\<lbrakk>c \\<sigma>; (k, v) \\<in> S0 - S; I S \\<sigma>;\n         S \\<subseteq> S0;\n         \\<And>k' v'. (k', v') \\<in> S \\<Longrightarrow> k \\<le> k';\n         \\<And>k' v'.\n            (k', v') \\<in> S0 - S \\<Longrightarrow> k' \\<le> k\\<rbrakk>\n        \\<Longrightarrow> I (insert (k, v) S) (f (k, v) \\<sigma>);\n     \\<And>\\<sigma>. I S0 \\<sigma> \\<Longrightarrow> P \\<sigma>;\n     \\<And>\\<sigma> S.\n        \\<lbrakk>S \\<subseteq> S0; S \\<noteq> S0;\n         \\<And>k v k' v'.\n            \\<lbrakk>(k, v) \\<in> S; (k', v') \\<in> S0 - S\\<rbrakk>\n            \\<Longrightarrow> k' \\<le> k;\n         \\<not> c \\<sigma>; I S \\<sigma>\\<rbrakk>\n        \\<Longrightarrow> P \\<sigma>\\<rbrakk>\n    \\<Longrightarrow> P (it c f \\<sigma>0)", "apply (rule set_iterator_genord.iteratei_rule_insert_P \n    [of it S0 \"(\\<lambda>(k,_) (k',_). k \\<ge> k')\" I \\<sigma>0 c f P])"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<lbrakk>set_iterator_genord it S0\n              (\\<lambda>(k, uu_) (k', uu_). k' \\<le> k);\n     I {} \\<sigma>0;\n     \\<And>S \\<sigma> k v.\n        \\<lbrakk>c \\<sigma>; (k, v) \\<in> S0 - S; I S \\<sigma>;\n         S \\<subseteq> S0;\n         \\<And>k' v'. (k', v') \\<in> S \\<Longrightarrow> k \\<le> k';\n         \\<And>k' v'.\n            (k', v') \\<in> S0 - S \\<Longrightarrow> k' \\<le> k\\<rbrakk>\n        \\<Longrightarrow> I (insert (k, v) S) (f (k, v) \\<sigma>);\n     \\<And>\\<sigma>. I S0 \\<sigma> \\<Longrightarrow> P \\<sigma>;\n     \\<And>\\<sigma> S.\n        \\<lbrakk>S \\<subseteq> S0; S \\<noteq> S0;\n         \\<And>k v k' v'.\n            \\<lbrakk>(k, v) \\<in> S; (k', v') \\<in> S0 - S\\<rbrakk>\n            \\<Longrightarrow> k' \\<le> k;\n         \\<not> c \\<sigma>; I S \\<sigma>\\<rbrakk>\n        \\<Longrightarrow> P \\<sigma>\\<rbrakk>\n    \\<Longrightarrow> set_iterator_genord it S0\n                       (\\<lambda>(k, uu_) (k', uu_). k' \\<le> k)\n 2. \\<lbrakk>set_iterator_genord it S0\n              (\\<lambda>(k, uu_) (k', uu_). k' \\<le> k);\n     I {} \\<sigma>0;\n     \\<And>S \\<sigma> k v.\n        \\<lbrakk>c \\<sigma>; (k, v) \\<in> S0 - S; I S \\<sigma>;\n         S \\<subseteq> S0;\n         \\<And>k' v'. (k', v') \\<in> S \\<Longrightarrow> k \\<le> k';\n         \\<And>k' v'.\n            (k', v') \\<in> S0 - S \\<Longrightarrow> k' \\<le> k\\<rbrakk>\n        \\<Longrightarrow> I (insert (k, v) S) (f (k, v) \\<sigma>);\n     \\<And>\\<sigma>. I S0 \\<sigma> \\<Longrightarrow> P \\<sigma>;\n     \\<And>\\<sigma> S.\n        \\<lbrakk>S \\<subseteq> S0; S \\<noteq> S0;\n         \\<And>k v k' v'.\n            \\<lbrakk>(k, v) \\<in> S; (k', v') \\<in> S0 - S\\<rbrakk>\n            \\<Longrightarrow> k' \\<le> k;\n         \\<not> c \\<sigma>; I S \\<sigma>\\<rbrakk>\n        \\<Longrightarrow> P \\<sigma>\\<rbrakk>\n    \\<Longrightarrow> I {} \\<sigma>0\n 3. \\<And>S \\<sigma> x.\n       \\<lbrakk>set_iterator_genord it S0\n                 (\\<lambda>(k, uu_) (k', uu_). k' \\<le> k);\n        I {} \\<sigma>0;\n        \\<And>S \\<sigma> k v.\n           \\<lbrakk>c \\<sigma>; (k, v) \\<in> S0 - S; I S \\<sigma>;\n            S \\<subseteq> S0;\n            \\<And>k' v'. (k', v') \\<in> S \\<Longrightarrow> k \\<le> k';\n            \\<And>k' v'.\n               (k', v') \\<in> S0 - S \\<Longrightarrow> k' \\<le> k\\<rbrakk>\n           \\<Longrightarrow> I (insert (k, v) S) (f (k, v) \\<sigma>);\n        \\<And>\\<sigma>. I S0 \\<sigma> \\<Longrightarrow> P \\<sigma>;\n        \\<And>\\<sigma> S.\n           \\<lbrakk>S \\<subseteq> S0; S \\<noteq> S0;\n            \\<And>k v k' v'.\n               \\<lbrakk>(k, v) \\<in> S; (k', v') \\<in> S0 - S\\<rbrakk>\n               \\<Longrightarrow> k' \\<le> k;\n            \\<not> c \\<sigma>; I S \\<sigma>\\<rbrakk>\n           \\<Longrightarrow> P \\<sigma>;\n        c \\<sigma>; x \\<in> S0 - S; I S \\<sigma>; S \\<subseteq> S0;\n        \\<forall>y\\<in>S0 - S - {x}.\n           (case x of (k, uu_) \\<Rightarrow> \\<lambda>(k', uu_). k' \\<le> k)\n            y;\n        \\<forall>y\\<in>S.\n           (case y of (k, uu_) \\<Rightarrow> \\<lambda>(k', uu_). k' \\<le> k)\n            x\\<rbrakk>\n       \\<Longrightarrow> I (insert x S) (f x \\<sigma>)\n 4. \\<And>\\<sigma>.\n       \\<lbrakk>set_iterator_genord it S0\n                 (\\<lambda>(k, uu_) (k', uu_). k' \\<le> k);\n        I {} \\<sigma>0;\n        \\<And>S \\<sigma> k v.\n           \\<lbrakk>c \\<sigma>; (k, v) \\<in> S0 - S; I S \\<sigma>;\n            S \\<subseteq> S0;\n            \\<And>k' v'. (k', v') \\<in> S \\<Longrightarrow> k \\<le> k';\n            \\<And>k' v'.\n               (k', v') \\<in> S0 - S \\<Longrightarrow> k' \\<le> k\\<rbrakk>\n           \\<Longrightarrow> I (insert (k, v) S) (f (k, v) \\<sigma>);\n        \\<And>\\<sigma>. I S0 \\<sigma> \\<Longrightarrow> P \\<sigma>;\n        \\<And>\\<sigma> S.\n           \\<lbrakk>S \\<subseteq> S0; S \\<noteq> S0;\n            \\<And>k v k' v'.\n               \\<lbrakk>(k, v) \\<in> S; (k', v') \\<in> S0 - S\\<rbrakk>\n               \\<Longrightarrow> k' \\<le> k;\n            \\<not> c \\<sigma>; I S \\<sigma>\\<rbrakk>\n           \\<Longrightarrow> P \\<sigma>;\n        I S0 \\<sigma>\\<rbrakk>\n       \\<Longrightarrow> P \\<sigma>\n 5. \\<And>\\<sigma> S.\n       \\<lbrakk>set_iterator_genord it S0\n                 (\\<lambda>(k, uu_) (k', uu_). k' \\<le> k);\n        I {} \\<sigma>0;\n        \\<And>S \\<sigma> k v.\n           \\<lbrakk>c \\<sigma>; (k, v) \\<in> S0 - S; I S \\<sigma>;\n            S \\<subseteq> S0;\n            \\<And>k' v'. (k', v') \\<in> S \\<Longrightarrow> k \\<le> k';\n            \\<And>k' v'.\n               (k', v') \\<in> S0 - S \\<Longrightarrow> k' \\<le> k\\<rbrakk>\n           \\<Longrightarrow> I (insert (k, v) S) (f (k, v) \\<sigma>);\n        \\<And>\\<sigma>. I S0 \\<sigma> \\<Longrightarrow> P \\<sigma>;\n        \\<And>\\<sigma> S.\n           \\<lbrakk>S \\<subseteq> S0; S \\<noteq> S0;\n            \\<And>k v k' v'.\n               \\<lbrakk>(k, v) \\<in> S; (k', v') \\<in> S0 - S\\<rbrakk>\n               \\<Longrightarrow> k' \\<le> k;\n            \\<not> c \\<sigma>; I S \\<sigma>\\<rbrakk>\n           \\<Longrightarrow> P \\<sigma>;\n        S \\<subseteq> S0; S \\<noteq> S0; \\<not> c \\<sigma>; I S \\<sigma>;\n        \\<forall>x\\<in>S0 - S.\n           \\<forall>y\\<in>S.\n              (case y of\n               (k, uu_) \\<Rightarrow> \\<lambda>(k', uu_). k' \\<le> k)\n               x\\<rbrakk>\n       \\<Longrightarrow> P \\<sigma>", "apply simp_all"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>S \\<sigma> x.\n       \\<lbrakk>set_iterator_genord it S0\n                 (\\<lambda>(k, uu_) (k', uu_). k' \\<le> k);\n        I {} \\<sigma>0;\n        \\<And>S \\<sigma> k v.\n           \\<lbrakk>c \\<sigma>; (k, v) \\<in> S0 \\<and> (k, v) \\<notin> S;\n            I S \\<sigma>; S \\<subseteq> S0;\n            \\<And>k' v'. (k', v') \\<in> S \\<Longrightarrow> k \\<le> k';\n            \\<And>k' v'.\n               (k', v') \\<in> S0 \\<and>\n               (k', v') \\<notin> S \\<Longrightarrow>\n               k' \\<le> k\\<rbrakk>\n           \\<Longrightarrow> I (insert (k, v) S) (f (k, v) \\<sigma>);\n        \\<And>\\<sigma>. I S0 \\<sigma> \\<Longrightarrow> P \\<sigma>;\n        \\<And>\\<sigma> S.\n           \\<lbrakk>S \\<subseteq> S0; S \\<noteq> S0;\n            \\<And>k v k' v'.\n               \\<lbrakk>(k, v) \\<in> S;\n                (k', v') \\<in> S0 \\<and> (k', v') \\<notin> S\\<rbrakk>\n               \\<Longrightarrow> k' \\<le> k;\n            \\<not> c \\<sigma>; I S \\<sigma>\\<rbrakk>\n           \\<Longrightarrow> P \\<sigma>;\n        c \\<sigma>; x \\<in> S0 \\<and> x \\<notin> S; I S \\<sigma>;\n        S \\<subseteq> S0;\n        \\<forall>y\\<in>S0 - S - {x}.\n           (case x of (k, uu_) \\<Rightarrow> \\<lambda>(k', uu_). k' \\<le> k)\n            y;\n        \\<forall>y\\<in>S.\n           (case y of (k, uu_) \\<Rightarrow> \\<lambda>(k', uu_). k' \\<le> k)\n            x\\<rbrakk>\n       \\<Longrightarrow> I (insert x S) (f x \\<sigma>)\n 2. \\<And>\\<sigma> S.\n       \\<lbrakk>set_iterator_genord it S0\n                 (\\<lambda>(k, uu_) (k', uu_). k' \\<le> k);\n        I {} \\<sigma>0;\n        \\<And>S \\<sigma> k v.\n           \\<lbrakk>c \\<sigma>; (k, v) \\<in> S0 \\<and> (k, v) \\<notin> S;\n            I S \\<sigma>; S \\<subseteq> S0;\n            \\<And>k' v'. (k', v') \\<in> S \\<Longrightarrow> k \\<le> k';\n            \\<And>k' v'.\n               (k', v') \\<in> S0 \\<and>\n               (k', v') \\<notin> S \\<Longrightarrow>\n               k' \\<le> k\\<rbrakk>\n           \\<Longrightarrow> I (insert (k, v) S) (f (k, v) \\<sigma>);\n        \\<And>\\<sigma>. I S0 \\<sigma> \\<Longrightarrow> P \\<sigma>;\n        \\<And>\\<sigma> S.\n           \\<lbrakk>S \\<subseteq> S0; S \\<noteq> S0;\n            \\<And>k v k' v'.\n               \\<lbrakk>(k, v) \\<in> S;\n                (k', v') \\<in> S0 \\<and> (k', v') \\<notin> S\\<rbrakk>\n               \\<Longrightarrow> k' \\<le> k;\n            \\<not> c \\<sigma>; I S \\<sigma>\\<rbrakk>\n           \\<Longrightarrow> P \\<sigma>;\n        S \\<subseteq> S0; S \\<noteq> S0; \\<not> c \\<sigma>; I S \\<sigma>;\n        \\<forall>x\\<in>S0 - S.\n           \\<forall>y\\<in>S.\n              (case y of\n               (k, uu_) \\<Rightarrow> \\<lambda>(k', uu_). k' \\<le> k)\n               x\\<rbrakk>\n       \\<Longrightarrow> P \\<sigma>", "apply (auto simp add: Ball_def)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>S \\<sigma> a b.\n       \\<lbrakk>set_iterator_genord it S0\n                 (\\<lambda>(k, uu_) (k', uu_). k' \\<le> k);\n        I {} \\<sigma>0;\n        \\<And>S \\<sigma> k v.\n           \\<lbrakk>c \\<sigma>; (k, v) \\<in> S0 \\<and> (k, v) \\<notin> S;\n            I S \\<sigma>; S \\<subseteq> S0;\n            \\<And>k' v'. (k', v') \\<in> S \\<Longrightarrow> k \\<le> k';\n            \\<And>k' v'.\n               (k', v') \\<in> S0 \\<and>\n               (k', v') \\<notin> S \\<Longrightarrow>\n               k' \\<le> k\\<rbrakk>\n           \\<Longrightarrow> I (insert (k, v) S) (f (k, v) \\<sigma>);\n        \\<And>\\<sigma>. I S0 \\<sigma> \\<Longrightarrow> P \\<sigma>;\n        \\<And>\\<sigma> S.\n           \\<lbrakk>S \\<subseteq> S0; S \\<noteq> S0;\n            \\<And>k v k' v'.\n               \\<lbrakk>(k, v) \\<in> S;\n                (k', v') \\<in> S0 \\<and> (k', v') \\<notin> S\\<rbrakk>\n               \\<Longrightarrow> k' \\<le> k;\n            \\<not> c \\<sigma>; I S \\<sigma>\\<rbrakk>\n           \\<Longrightarrow> P \\<sigma>;\n        c \\<sigma>; I S \\<sigma>; S \\<subseteq> S0;\n        \\<forall>aa.\n           (\\<exists>ba.\n               (aa, ba) \\<in> S0 \\<and>\n               (aa, ba) \\<notin> S \\<and>\n               (aa = a \\<longrightarrow> ba \\<noteq> b)) \\<longrightarrow>\n           aa \\<le> a;\n        \\<forall>aa.\n           (\\<exists>b. (aa, b) \\<in> S) \\<longrightarrow> a \\<le> aa;\n        (a, b) \\<in> S0; (a, b) \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> I (insert (a, b) S) (f (a, b) \\<sigma>)\n 2. \\<And>\\<sigma> S a b.\n       \\<lbrakk>set_iterator_genord it S0\n                 (\\<lambda>(k, uu_) (k', uu_). k' \\<le> k);\n        I {} \\<sigma>0;\n        \\<And>S \\<sigma> k v.\n           \\<lbrakk>c \\<sigma>; (k, v) \\<in> S0 \\<and> (k, v) \\<notin> S;\n            I S \\<sigma>; S \\<subseteq> S0;\n            \\<And>k' v'. (k', v') \\<in> S \\<Longrightarrow> k \\<le> k';\n            \\<And>k' v'.\n               (k', v') \\<in> S0 \\<and>\n               (k', v') \\<notin> S \\<Longrightarrow>\n               k' \\<le> k\\<rbrakk>\n           \\<Longrightarrow> I (insert (k, v) S) (f (k, v) \\<sigma>);\n        \\<And>\\<sigma>. I S0 \\<sigma> \\<Longrightarrow> P \\<sigma>;\n        \\<And>\\<sigma> S.\n           \\<lbrakk>S \\<subseteq> S0; S \\<noteq> S0;\n            \\<And>k v k' v'.\n               \\<lbrakk>(k, v) \\<in> S;\n                (k', v') \\<in> S0 \\<and> (k', v') \\<notin> S\\<rbrakk>\n               \\<Longrightarrow> k' \\<le> k;\n            \\<not> c \\<sigma>; I S \\<sigma>\\<rbrakk>\n           \\<Longrightarrow> P \\<sigma>;\n        S \\<subseteq> S0; \\<not> c \\<sigma>; I S \\<sigma>;\n        \\<forall>a.\n           (\\<exists>b.\n               (a, b) \\<in> S0 \\<and> (a, b) \\<notin> S) \\<longrightarrow>\n           (\\<forall>aa.\n               (\\<exists>b. (aa, b) \\<in> S) \\<longrightarrow> a \\<le> aa);\n        \\<not> P \\<sigma>; (a, b) \\<in> S0\\<rbrakk>\n       \\<Longrightarrow> (a, b) \\<in> S", "apply (metis order_refl)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<sigma> S a b.\n       \\<lbrakk>set_iterator_genord it S0\n                 (\\<lambda>(k, uu_) (k', uu_). k' \\<le> k);\n        I {} \\<sigma>0;\n        \\<And>S \\<sigma> k v.\n           \\<lbrakk>c \\<sigma>; (k, v) \\<in> S0 \\<and> (k, v) \\<notin> S;\n            I S \\<sigma>; S \\<subseteq> S0;\n            \\<And>k' v'. (k', v') \\<in> S \\<Longrightarrow> k \\<le> k';\n            \\<And>k' v'.\n               (k', v') \\<in> S0 \\<and>\n               (k', v') \\<notin> S \\<Longrightarrow>\n               k' \\<le> k\\<rbrakk>\n           \\<Longrightarrow> I (insert (k, v) S) (f (k, v) \\<sigma>);\n        \\<And>\\<sigma>. I S0 \\<sigma> \\<Longrightarrow> P \\<sigma>;\n        \\<And>\\<sigma> S.\n           \\<lbrakk>S \\<subseteq> S0; S \\<noteq> S0;\n            \\<And>k v k' v'.\n               \\<lbrakk>(k, v) \\<in> S;\n                (k', v') \\<in> S0 \\<and> (k', v') \\<notin> S\\<rbrakk>\n               \\<Longrightarrow> k' \\<le> k;\n            \\<not> c \\<sigma>; I S \\<sigma>\\<rbrakk>\n           \\<Longrightarrow> P \\<sigma>;\n        S \\<subseteq> S0; \\<not> c \\<sigma>; I S \\<sigma>;\n        \\<forall>a.\n           (\\<exists>b.\n               (a, b) \\<in> S0 \\<and> (a, b) \\<notin> S) \\<longrightarrow>\n           (\\<forall>aa.\n               (\\<exists>b. (aa, b) \\<in> S) \\<longrightarrow> a \\<le> aa);\n        \\<not> P \\<sigma>; (a, b) \\<in> S0\\<rbrakk>\n       \\<Longrightarrow> (a, b) \\<in> S", "apply metis"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma map_iterator_linord_rule_P:\n    assumes \"map_iterator_linord it m\"\n        and I0: \"I (dom m) \\<sigma>0\"\n        and IP: \"!!k v it \\<sigma>. \\<lbrakk> c \\<sigma>; k \\<in> it; m k = Some v; it \\<subseteq> dom m; I it \\<sigma>;\n                 \\<And>k'. k' \\<in> it \\<Longrightarrow> k \\<le> k'; \n                 \\<And>k'. k' \\<in> (dom m)-it \\<Longrightarrow> k' \\<le> k\\<rbrakk> \\<Longrightarrow> I (it - {k}) (f (k, v) \\<sigma>)\"\n        and IF: \"!!\\<sigma>. I {} \\<sigma> \\<Longrightarrow> P \\<sigma>\"\n        and II: \"!!\\<sigma> it. \\<lbrakk> it \\<subseteq> dom m; it \\<noteq> {}; \\<not> c \\<sigma>; I it \\<sigma>;\n                  \\<And>k k'. \\<lbrakk>k \\<in> (dom m)-it; k' \\<in> it\\<rbrakk> \\<Longrightarrow> k \\<le> k'\\<rbrakk> \\<Longrightarrow> P \\<sigma>\"\n    shows \"P (it c f \\<sigma>0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P (it c f \\<sigma>0)", "using assms"], ["proof (prove)\nusing this:\n  map_iterator_linord it m\n  I (dom m) \\<sigma>0\n  \\<lbrakk>c ?\\<sigma>; ?k \\<in> ?it; m ?k = Some ?v; ?it \\<subseteq> dom m;\n   I ?it ?\\<sigma>; \\<And>k'. k' \\<in> ?it \\<Longrightarrow> ?k \\<le> k';\n   \\<And>k'. k' \\<in> dom m - ?it \\<Longrightarrow> k' \\<le> ?k\\<rbrakk>\n  \\<Longrightarrow> I (?it - {?k}) (f (?k, ?v) ?\\<sigma>)\n  I {} ?\\<sigma> \\<Longrightarrow> P ?\\<sigma>\n  \\<lbrakk>?it \\<subseteq> dom m; ?it \\<noteq> {}; \\<not> c ?\\<sigma>;\n   I ?it ?\\<sigma>;\n   \\<And>k k'.\n      \\<lbrakk>k \\<in> dom m - ?it; k' \\<in> ?it\\<rbrakk>\n      \\<Longrightarrow> k \\<le> k'\\<rbrakk>\n  \\<Longrightarrow> P ?\\<sigma>\n\ngoal (1 subgoal):\n 1. P (it c f \\<sigma>0)", "unfolding set_iterator_map_linord_def"], ["proof (prove)\nusing this:\n  map_iterator_genord it m (\\<lambda>(k, uu_) (k', uu_). k \\<le> k')\n  I (dom m) \\<sigma>0\n  \\<lbrakk>c ?\\<sigma>; ?k \\<in> ?it; m ?k = Some ?v; ?it \\<subseteq> dom m;\n   I ?it ?\\<sigma>; \\<And>k'. k' \\<in> ?it \\<Longrightarrow> ?k \\<le> k';\n   \\<And>k'. k' \\<in> dom m - ?it \\<Longrightarrow> k' \\<le> ?k\\<rbrakk>\n  \\<Longrightarrow> I (?it - {?k}) (f (?k, ?v) ?\\<sigma>)\n  I {} ?\\<sigma> \\<Longrightarrow> P ?\\<sigma>\n  \\<lbrakk>?it \\<subseteq> dom m; ?it \\<noteq> {}; \\<not> c ?\\<sigma>;\n   I ?it ?\\<sigma>;\n   \\<And>k k'.\n      \\<lbrakk>k \\<in> dom m - ?it; k' \\<in> ?it\\<rbrakk>\n      \\<Longrightarrow> k \\<le> k'\\<rbrakk>\n  \\<Longrightarrow> P ?\\<sigma>\n\ngoal (1 subgoal):\n 1. P (it c f \\<sigma>0)", "by (rule map_iterator_genord_rule_P) auto"], ["", "lemma map_iterator_linord_rule_insert_P:\n    assumes \"map_iterator_linord it m\"\n        and I0: \"I {} \\<sigma>0\"\n        and IP: \"!!k v it \\<sigma>. \\<lbrakk> c \\<sigma>; k \\<in> dom m - it; m k = Some v; it \\<subseteq> dom m; I it \\<sigma>;\n                 \\<And>k'. k' \\<in> (dom m - it) \\<Longrightarrow> k \\<le> k'; \n                 \\<And>k'. k' \\<in> it \\<Longrightarrow> k' \\<le> k \\<rbrakk> \\<Longrightarrow> I (insert k it) (f (k, v) \\<sigma>)\"\n        and IF: \"!!\\<sigma>. I (dom m) \\<sigma> \\<Longrightarrow> P \\<sigma>\"\n        and II: \"!!\\<sigma> it. \\<lbrakk> it \\<subseteq> dom m; it \\<noteq> dom m; \\<not> c \\<sigma>; I it \\<sigma>;\n                  \\<And>k k'. \\<lbrakk>k \\<in> it; k' \\<in> (dom m)-it\\<rbrakk> \\<Longrightarrow> k \\<le> k'\\<rbrakk> \\<Longrightarrow> P \\<sigma>\"\n    shows \"P (it c f \\<sigma>0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P (it c f \\<sigma>0)", "using assms"], ["proof (prove)\nusing this:\n  map_iterator_linord it m\n  I {} \\<sigma>0\n  \\<lbrakk>c ?\\<sigma>; ?k \\<in> dom m - ?it; m ?k = Some ?v;\n   ?it \\<subseteq> dom m; I ?it ?\\<sigma>;\n   \\<And>k'. k' \\<in> dom m - ?it \\<Longrightarrow> ?k \\<le> k';\n   \\<And>k'. k' \\<in> ?it \\<Longrightarrow> k' \\<le> ?k\\<rbrakk>\n  \\<Longrightarrow> I (insert ?k ?it) (f (?k, ?v) ?\\<sigma>)\n  I (dom m) ?\\<sigma> \\<Longrightarrow> P ?\\<sigma>\n  \\<lbrakk>?it \\<subseteq> dom m; ?it \\<noteq> dom m; \\<not> c ?\\<sigma>;\n   I ?it ?\\<sigma>;\n   \\<And>k k'.\n      \\<lbrakk>k \\<in> ?it; k' \\<in> dom m - ?it\\<rbrakk>\n      \\<Longrightarrow> k \\<le> k'\\<rbrakk>\n  \\<Longrightarrow> P ?\\<sigma>\n\ngoal (1 subgoal):\n 1. P (it c f \\<sigma>0)", "unfolding set_iterator_map_linord_def"], ["proof (prove)\nusing this:\n  map_iterator_genord it m (\\<lambda>(k, uu_) (k', uu_). k \\<le> k')\n  I {} \\<sigma>0\n  \\<lbrakk>c ?\\<sigma>; ?k \\<in> dom m - ?it; m ?k = Some ?v;\n   ?it \\<subseteq> dom m; I ?it ?\\<sigma>;\n   \\<And>k'. k' \\<in> dom m - ?it \\<Longrightarrow> ?k \\<le> k';\n   \\<And>k'. k' \\<in> ?it \\<Longrightarrow> k' \\<le> ?k\\<rbrakk>\n  \\<Longrightarrow> I (insert ?k ?it) (f (?k, ?v) ?\\<sigma>)\n  I (dom m) ?\\<sigma> \\<Longrightarrow> P ?\\<sigma>\n  \\<lbrakk>?it \\<subseteq> dom m; ?it \\<noteq> dom m; \\<not> c ?\\<sigma>;\n   I ?it ?\\<sigma>;\n   \\<And>k k'.\n      \\<lbrakk>k \\<in> ?it; k' \\<in> dom m - ?it\\<rbrakk>\n      \\<Longrightarrow> k \\<le> k'\\<rbrakk>\n  \\<Longrightarrow> P ?\\<sigma>\n\ngoal (1 subgoal):\n 1. P (it c f \\<sigma>0)", "by (rule map_iterator_genord_rule_insert_P) auto"], ["", "lemma map_iterator_rev_linord_rule_P:\n    assumes \"map_iterator_rev_linord it m\"\n        and I0: \"I (dom m) \\<sigma>0\"\n        and IP: \"!!k v it \\<sigma>. \\<lbrakk> c \\<sigma>; k \\<in> it; m k = Some v; it \\<subseteq> dom m; I it \\<sigma>;\n                 \\<And>k'. k' \\<in> it \\<Longrightarrow> k' \\<le> k; \n                 \\<And>k'. k' \\<in> (dom m)-it \\<Longrightarrow> k \\<le> k'\\<rbrakk> \\<Longrightarrow> I (it - {k}) (f (k, v) \\<sigma>)\"\n        and IF: \"!!\\<sigma>. I {} \\<sigma> \\<Longrightarrow> P \\<sigma>\"\n        and II: \"!!\\<sigma> it. \\<lbrakk> it \\<subseteq> dom m; it \\<noteq> {}; \\<not> c \\<sigma>; I it \\<sigma>;\n                  \\<And>k k'. \\<lbrakk>k \\<in> (dom m)-it; k' \\<in> it\\<rbrakk> \\<Longrightarrow> k' \\<le> k\\<rbrakk> \\<Longrightarrow> P \\<sigma>\"\n    shows \"P (it c f \\<sigma>0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P (it c f \\<sigma>0)", "using assms"], ["proof (prove)\nusing this:\n  map_iterator_rev_linord it m\n  I (dom m) \\<sigma>0\n  \\<lbrakk>c ?\\<sigma>; ?k \\<in> ?it; m ?k = Some ?v; ?it \\<subseteq> dom m;\n   I ?it ?\\<sigma>; \\<And>k'. k' \\<in> ?it \\<Longrightarrow> k' \\<le> ?k;\n   \\<And>k'. k' \\<in> dom m - ?it \\<Longrightarrow> ?k \\<le> k'\\<rbrakk>\n  \\<Longrightarrow> I (?it - {?k}) (f (?k, ?v) ?\\<sigma>)\n  I {} ?\\<sigma> \\<Longrightarrow> P ?\\<sigma>\n  \\<lbrakk>?it \\<subseteq> dom m; ?it \\<noteq> {}; \\<not> c ?\\<sigma>;\n   I ?it ?\\<sigma>;\n   \\<And>k k'.\n      \\<lbrakk>k \\<in> dom m - ?it; k' \\<in> ?it\\<rbrakk>\n      \\<Longrightarrow> k' \\<le> k\\<rbrakk>\n  \\<Longrightarrow> P ?\\<sigma>\n\ngoal (1 subgoal):\n 1. P (it c f \\<sigma>0)", "unfolding set_iterator_map_rev_linord_def"], ["proof (prove)\nusing this:\n  map_iterator_genord it m (\\<lambda>(k, uu_) (k', uu_). k' \\<le> k)\n  I (dom m) \\<sigma>0\n  \\<lbrakk>c ?\\<sigma>; ?k \\<in> ?it; m ?k = Some ?v; ?it \\<subseteq> dom m;\n   I ?it ?\\<sigma>; \\<And>k'. k' \\<in> ?it \\<Longrightarrow> k' \\<le> ?k;\n   \\<And>k'. k' \\<in> dom m - ?it \\<Longrightarrow> ?k \\<le> k'\\<rbrakk>\n  \\<Longrightarrow> I (?it - {?k}) (f (?k, ?v) ?\\<sigma>)\n  I {} ?\\<sigma> \\<Longrightarrow> P ?\\<sigma>\n  \\<lbrakk>?it \\<subseteq> dom m; ?it \\<noteq> {}; \\<not> c ?\\<sigma>;\n   I ?it ?\\<sigma>;\n   \\<And>k k'.\n      \\<lbrakk>k \\<in> dom m - ?it; k' \\<in> ?it\\<rbrakk>\n      \\<Longrightarrow> k' \\<le> k\\<rbrakk>\n  \\<Longrightarrow> P ?\\<sigma>\n\ngoal (1 subgoal):\n 1. P (it c f \\<sigma>0)", "by (rule map_iterator_genord_rule_P) auto"], ["", "lemma map_iterator_rev_linord_rule_insert_P:\n    assumes \"map_iterator_rev_linord it m\"\n        and I0: \"I {} \\<sigma>0\"\n        and IP: \"!!k v it \\<sigma>. \\<lbrakk> c \\<sigma>; k \\<in> dom m - it; m k = Some v; it \\<subseteq> dom m; I it \\<sigma>;\n                 \\<And>k'. k' \\<in> (dom m - it) \\<Longrightarrow> k' \\<le> k; \n                 \\<And>k'. k' \\<in> it \\<Longrightarrow> k \\<le> k'\\<rbrakk> \\<Longrightarrow> I (insert k it) (f (k, v) \\<sigma>)\"\n        and IF: \"!!\\<sigma>. I (dom m) \\<sigma> \\<Longrightarrow> P \\<sigma>\"\n        and II: \"!!\\<sigma> it. \\<lbrakk> it \\<subseteq> dom m; it \\<noteq> dom m; \\<not> c \\<sigma>; I it \\<sigma>;\n                  \\<And>k k'. \\<lbrakk>k \\<in> it; k' \\<in> (dom m)-it\\<rbrakk> \\<Longrightarrow> k' \\<le> k\\<rbrakk> \\<Longrightarrow> P \\<sigma>\"\n    shows \"P (it c f \\<sigma>0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P (it c f \\<sigma>0)", "using assms"], ["proof (prove)\nusing this:\n  map_iterator_rev_linord it m\n  I {} \\<sigma>0\n  \\<lbrakk>c ?\\<sigma>; ?k \\<in> dom m - ?it; m ?k = Some ?v;\n   ?it \\<subseteq> dom m; I ?it ?\\<sigma>;\n   \\<And>k'. k' \\<in> dom m - ?it \\<Longrightarrow> k' \\<le> ?k;\n   \\<And>k'. k' \\<in> ?it \\<Longrightarrow> ?k \\<le> k'\\<rbrakk>\n  \\<Longrightarrow> I (insert ?k ?it) (f (?k, ?v) ?\\<sigma>)\n  I (dom m) ?\\<sigma> \\<Longrightarrow> P ?\\<sigma>\n  \\<lbrakk>?it \\<subseteq> dom m; ?it \\<noteq> dom m; \\<not> c ?\\<sigma>;\n   I ?it ?\\<sigma>;\n   \\<And>k k'.\n      \\<lbrakk>k \\<in> ?it; k' \\<in> dom m - ?it\\<rbrakk>\n      \\<Longrightarrow> k' \\<le> k\\<rbrakk>\n  \\<Longrightarrow> P ?\\<sigma>\n\ngoal (1 subgoal):\n 1. P (it c f \\<sigma>0)", "unfolding set_iterator_map_rev_linord_def"], ["proof (prove)\nusing this:\n  map_iterator_genord it m (\\<lambda>(k, uu_) (k', uu_). k' \\<le> k)\n  I {} \\<sigma>0\n  \\<lbrakk>c ?\\<sigma>; ?k \\<in> dom m - ?it; m ?k = Some ?v;\n   ?it \\<subseteq> dom m; I ?it ?\\<sigma>;\n   \\<And>k'. k' \\<in> dom m - ?it \\<Longrightarrow> k' \\<le> ?k;\n   \\<And>k'. k' \\<in> ?it \\<Longrightarrow> ?k \\<le> k'\\<rbrakk>\n  \\<Longrightarrow> I (insert ?k ?it) (f (?k, ?v) ?\\<sigma>)\n  I (dom m) ?\\<sigma> \\<Longrightarrow> P ?\\<sigma>\n  \\<lbrakk>?it \\<subseteq> dom m; ?it \\<noteq> dom m; \\<not> c ?\\<sigma>;\n   I ?it ?\\<sigma>;\n   \\<And>k k'.\n      \\<lbrakk>k \\<in> ?it; k' \\<in> dom m - ?it\\<rbrakk>\n      \\<Longrightarrow> k' \\<le> k\\<rbrakk>\n  \\<Longrightarrow> P ?\\<sigma>\n\ngoal (1 subgoal):\n 1. P (it c f \\<sigma>0)", "by (rule map_iterator_genord_rule_insert_P) auto"], ["", "end"], ["", "subsection \\<open>Conversions to foldli\\<close>"], ["", "lemma set_iterator_genord_foldli_conv :\n  \"set_iterator_genord iti S R \\<longleftrightarrow>\n   (\\<exists>l0. distinct l0 \\<and> S = set l0 \\<and> sorted_wrt R l0 \\<and> iti = foldli l0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set_iterator_genord iti S R =\n    (\\<exists>l0.\n        distinct l0 \\<and>\n        S = set l0 \\<and> sorted_wrt R l0 \\<and> iti = foldli l0)", "unfolding set_iterator_genord_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<exists>l0.\n        distinct l0 \\<and>\n        S = set l0 \\<and> sorted_wrt R l0 \\<and> iti = foldli l0) =\n    (\\<exists>l0.\n        distinct l0 \\<and>\n        S = set l0 \\<and> sorted_wrt R l0 \\<and> iti = foldli l0)", "by simp"], ["", "lemma set_iterator_genord_I [intro] :\n  \"\\<lbrakk>distinct l0; S = set l0; sorted_wrt R l0; iti = foldli l0\\<rbrakk> \\<Longrightarrow>\n   set_iterator_genord iti S R\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>distinct l0; S = set l0; sorted_wrt R l0;\n     iti = foldli l0\\<rbrakk>\n    \\<Longrightarrow> set_iterator_genord iti S R", "unfolding set_iterator_genord_foldli_conv"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>distinct l0; S = set l0; sorted_wrt R l0;\n     iti = foldli l0\\<rbrakk>\n    \\<Longrightarrow> \\<exists>l0.\n                         distinct l0 \\<and>\n                         S = set l0 \\<and>\n                         sorted_wrt R l0 \\<and> iti = foldli l0", "by blast"], ["", "lemma set_iterator_foldli_conv :\n  \"set_iterator iti S \\<longleftrightarrow>\n   (\\<exists>l0. distinct l0 \\<and> S = set l0 \\<and> iti = foldli l0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set_iterator iti S =\n    (\\<exists>l0. distinct l0 \\<and> S = set l0 \\<and> iti = foldli l0)", "unfolding set_iterator_def set_iterator_genord_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<exists>l0.\n        distinct l0 \\<and>\n        S = set l0 \\<and>\n        sorted_wrt (\\<lambda>_ _. True) l0 \\<and> iti = foldli l0) =\n    (\\<exists>l0. distinct l0 \\<and> S = set l0 \\<and> iti = foldli l0)", "by simp"], ["", "lemma set_iterator_I [intro] :\n  \"\\<lbrakk>distinct l0; S = set l0; iti = foldli l0\\<rbrakk> \\<Longrightarrow>\n   set_iterator iti S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>distinct l0; S = set l0; iti = foldli l0\\<rbrakk>\n    \\<Longrightarrow> set_iterator iti S", "unfolding set_iterator_foldli_conv"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>distinct l0; S = set l0; iti = foldli l0\\<rbrakk>\n    \\<Longrightarrow> \\<exists>l0.\n                         distinct l0 \\<and>\n                         S = set l0 \\<and> iti = foldli l0", "by blast"], ["", "context linorder begin"], ["", "lemma set_iterator_linord_foldli_conv :\n    \"set_iterator_linord iti S \\<longleftrightarrow>\n     (\\<exists>l0. distinct l0 \\<and> S = set l0 \\<and> sorted l0 \\<and> iti = foldli l0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set_iterator_linord iti S =\n    (\\<exists>l0.\n        distinct l0 \\<and>\n        S = set l0 \\<and> sorted l0 \\<and> iti = foldli l0)", "unfolding set_iterator_linord_def set_iterator_genord_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<exists>l0.\n        distinct l0 \\<and>\n        S = set l0 \\<and> sorted_wrt (\\<le>) l0 \\<and> iti = foldli l0) =\n    (\\<exists>l0.\n        distinct l0 \\<and>\n        S = set l0 \\<and> sorted l0 \\<and> iti = foldli l0)", "by (simp add: sorted_sorted_wrt)"], ["", "lemma set_iterator_linord_I [intro] :\n    \"\\<lbrakk>distinct l0; S = set l0; sorted l0; iti = foldli l0\\<rbrakk> \\<Longrightarrow>\n     set_iterator_linord iti S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>distinct l0; S = set l0; sorted l0; iti = foldli l0\\<rbrakk>\n    \\<Longrightarrow> set_iterator_linord iti S", "unfolding set_iterator_linord_foldli_conv"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>distinct l0; S = set l0; sorted l0; iti = foldli l0\\<rbrakk>\n    \\<Longrightarrow> \\<exists>l0.\n                         distinct l0 \\<and>\n                         S = set l0 \\<and> sorted l0 \\<and> iti = foldli l0", "by blast"], ["", "lemma set_iterator_rev_linord_foldli_conv :\n    \"set_iterator_rev_linord iti S \\<longleftrightarrow>\n     (\\<exists>l0. distinct l0 \\<and> S = set l0 \\<and> sorted (rev l0) \\<and> iti = foldli l0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set_iterator_rev_linord iti S =\n    (\\<exists>l0.\n        distinct l0 \\<and>\n        S = set l0 \\<and> sorted (rev l0) \\<and> iti = foldli l0)", "unfolding set_iterator_rev_linord_def set_iterator_genord_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<exists>l0.\n        distinct l0 \\<and>\n        S = set l0 \\<and>\n        sorted_wrt (\\<lambda>x y. y \\<le> x) l0 \\<and> iti = foldli l0) =\n    (\\<exists>l0.\n        distinct l0 \\<and>\n        S = set l0 \\<and> sorted (rev l0) \\<and> iti = foldli l0)", "by simp"], ["", "lemma set_iterator_rev_linord_I [intro] :\n    \"\\<lbrakk>distinct l0; S = set l0; sorted (rev l0); iti = foldli l0\\<rbrakk> \\<Longrightarrow>\n     set_iterator_rev_linord iti S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>distinct l0; S = set l0; sorted (rev l0);\n     iti = foldli l0\\<rbrakk>\n    \\<Longrightarrow> set_iterator_rev_linord iti S", "unfolding set_iterator_rev_linord_foldli_conv"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>distinct l0; S = set l0; sorted (rev l0);\n     iti = foldli l0\\<rbrakk>\n    \\<Longrightarrow> \\<exists>l0.\n                         distinct l0 \\<and>\n                         S = set l0 \\<and>\n                         sorted (rev l0) \\<and> iti = foldli l0", "by blast"], ["", "end"], ["", "lemma map_iterator_genord_foldli_conv :\n  \"map_iterator_genord iti m R \\<longleftrightarrow>\n   (\\<exists>(l0::('k \\<times> 'v) list). distinct (map fst l0) \\<and> m = map_of l0 \\<and> sorted_wrt R l0 \\<and> iti = foldli l0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. map_iterator_genord iti m R =\n    (\\<exists>l0.\n        distinct (map fst l0) \\<and>\n        m = map_of l0 \\<and> sorted_wrt R l0 \\<and> iti = foldli l0)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. map_iterator_genord iti m R =\n    (\\<exists>l0.\n        distinct (map fst l0) \\<and>\n        m = map_of l0 \\<and> sorted_wrt R l0 \\<and> iti = foldli l0)", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. map_iterator_genord iti m R =\n    (\\<exists>l0.\n        distinct (map fst l0) \\<and>\n        m = map_of l0 \\<and> sorted_wrt R l0 \\<and> iti = foldli l0)", "fix l0 :: \"('k \\<times> 'v) list\""], ["proof (state)\ngoal (1 subgoal):\n 1. map_iterator_genord iti m R =\n    (\\<exists>l0.\n        distinct (map fst l0) \\<and>\n        m = map_of l0 \\<and> sorted_wrt R l0 \\<and> iti = foldli l0)", "assume dist: \"distinct l0\""], ["proof (state)\nthis:\n  distinct l0\n\ngoal (1 subgoal):\n 1. map_iterator_genord iti m R =\n    (\\<exists>l0.\n        distinct (map fst l0) \\<and>\n        m = map_of l0 \\<and> sorted_wrt R l0 \\<and> iti = foldli l0)", "have \"(map_to_set m = set l0) \\<longleftrightarrow>\n          (distinct (map fst l0) \\<and>\n           m = map_of l0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (map_to_set m = set l0) = (distinct (map fst l0) \\<and> m = map_of l0)", "proof (cases \"distinct (map fst l0)\")"], ["proof (state)\ngoal (2 subgoals):\n 1. distinct (map fst l0) \\<Longrightarrow>\n    (map_to_set m = set l0) = (distinct (map fst l0) \\<and> m = map_of l0)\n 2. \\<not> distinct (map fst l0) \\<Longrightarrow>\n    (map_to_set m = set l0) = (distinct (map fst l0) \\<and> m = map_of l0)", "case True"], ["proof (state)\nthis:\n  distinct (map fst l0)\n\ngoal (2 subgoals):\n 1. distinct (map fst l0) \\<Longrightarrow>\n    (map_to_set m = set l0) = (distinct (map fst l0) \\<and> m = map_of l0)\n 2. \\<not> distinct (map fst l0) \\<Longrightarrow>\n    (map_to_set m = set l0) = (distinct (map fst l0) \\<and> m = map_of l0)", "thus ?thesis"], ["proof (prove)\nusing this:\n  distinct (map fst l0)\n\ngoal (1 subgoal):\n 1. (map_to_set m = set l0) = (distinct (map fst l0) \\<and> m = map_of l0)", "by (metis map_of_map_to_set)"], ["proof (state)\nthis:\n  (map_to_set m = set l0) = (distinct (map fst l0) \\<and> m = map_of l0)\n\ngoal (1 subgoal):\n 1. \\<not> distinct (map fst l0) \\<Longrightarrow>\n    (map_to_set m = set l0) = (distinct (map fst l0) \\<and> m = map_of l0)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> distinct (map fst l0) \\<Longrightarrow>\n    (map_to_set m = set l0) = (distinct (map fst l0) \\<and> m = map_of l0)", "case False"], ["proof (state)\nthis:\n  \\<not> distinct (map fst l0)\n\ngoal (1 subgoal):\n 1. \\<not> distinct (map fst l0) \\<Longrightarrow>\n    (map_to_set m = set l0) = (distinct (map fst l0) \\<and> m = map_of l0)", "note not_dist_fst = this"], ["proof (state)\nthis:\n  \\<not> distinct (map fst l0)\n\ngoal (1 subgoal):\n 1. \\<not> distinct (map fst l0) \\<Longrightarrow>\n    (map_to_set m = set l0) = (distinct (map fst l0) \\<and> m = map_of l0)", "with dist"], ["proof (chain)\npicking this:\n  distinct l0\n  \\<not> distinct (map fst l0)", "have \"~(inj_on fst (set l0))\""], ["proof (prove)\nusing this:\n  distinct l0\n  \\<not> distinct (map fst l0)\n\ngoal (1 subgoal):\n 1. \\<not> inj_on fst (set l0)", "by (simp add: distinct_map)"], ["proof (state)\nthis:\n  \\<not> inj_on fst (set l0)\n\ngoal (1 subgoal):\n 1. \\<not> distinct (map fst l0) \\<Longrightarrow>\n    (map_to_set m = set l0) = (distinct (map fst l0) \\<and> m = map_of l0)", "hence \"set l0 \\<noteq> map_to_set m\""], ["proof (prove)\nusing this:\n  \\<not> inj_on fst (set l0)\n\ngoal (1 subgoal):\n 1. set l0 \\<noteq> map_to_set m", "by (rule_tac notI) (simp add: map_to_set_def inj_on_def)"], ["proof (state)\nthis:\n  set l0 \\<noteq> map_to_set m\n\ngoal (1 subgoal):\n 1. \\<not> distinct (map fst l0) \\<Longrightarrow>\n    (map_to_set m = set l0) = (distinct (map fst l0) \\<and> m = map_of l0)", "with not_dist_fst"], ["proof (chain)\npicking this:\n  \\<not> distinct (map fst l0)\n  set l0 \\<noteq> map_to_set m", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<not> distinct (map fst l0)\n  set l0 \\<noteq> map_to_set m\n\ngoal (1 subgoal):\n 1. (map_to_set m = set l0) = (distinct (map fst l0) \\<and> m = map_of l0)", "by simp"], ["proof (state)\nthis:\n  (map_to_set m = set l0) = (distinct (map fst l0) \\<and> m = map_of l0)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (map_to_set m = set l0) = (distinct (map fst l0) \\<and> m = map_of l0)\n\ngoal (1 subgoal):\n 1. map_iterator_genord iti m R =\n    (\\<exists>l0.\n        distinct (map fst l0) \\<and>\n        m = map_of l0 \\<and> sorted_wrt R l0 \\<and> iti = foldli l0)", "}"], ["proof (state)\nthis:\n  distinct ?l0.2 \\<Longrightarrow>\n  (map_to_set m = set ?l0.2) =\n  (distinct (map fst ?l0.2) \\<and> m = map_of ?l0.2)\n\ngoal (1 subgoal):\n 1. map_iterator_genord iti m R =\n    (\\<exists>l0.\n        distinct (map fst l0) \\<and>\n        m = map_of l0 \\<and> sorted_wrt R l0 \\<and> iti = foldli l0)", "thus ?thesis"], ["proof (prove)\nusing this:\n  distinct ?l0.2 \\<Longrightarrow>\n  (map_to_set m = set ?l0.2) =\n  (distinct (map fst ?l0.2) \\<and> m = map_of ?l0.2)\n\ngoal (1 subgoal):\n 1. map_iterator_genord iti m R =\n    (\\<exists>l0.\n        distinct (map fst l0) \\<and>\n        m = map_of l0 \\<and> sorted_wrt R l0 \\<and> iti = foldli l0)", "unfolding set_iterator_genord_def distinct_map"], ["proof (prove)\nusing this:\n  distinct ?l0.2 \\<Longrightarrow>\n  (map_to_set m = set ?l0.2) =\n  ((distinct ?l0.2 \\<and> inj_on fst (set ?l0.2)) \\<and> m = map_of ?l0.2)\n\ngoal (1 subgoal):\n 1. (\\<exists>l0.\n        distinct l0 \\<and>\n        map_to_set m = set l0 \\<and>\n        sorted_wrt R l0 \\<and> iti = foldli l0) =\n    (\\<exists>l0.\n        (distinct l0 \\<and> inj_on fst (set l0)) \\<and>\n        m = map_of l0 \\<and> sorted_wrt R l0 \\<and> iti = foldli l0)", "by metis"], ["proof (state)\nthis:\n  map_iterator_genord iti m R =\n  (\\<exists>l0.\n      distinct (map fst l0) \\<and>\n      m = map_of l0 \\<and> sorted_wrt R l0 \\<and> iti = foldli l0)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma map_iterator_genord_I [intro] :\n  \"\\<lbrakk>distinct (map fst l0); m = map_of l0; sorted_wrt R l0; iti = foldli l0\\<rbrakk> \\<Longrightarrow>\n   map_iterator_genord iti m R\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>distinct (map fst l0); m = map_of l0; sorted_wrt R l0;\n     iti = foldli l0\\<rbrakk>\n    \\<Longrightarrow> map_iterator_genord iti m R", "unfolding map_iterator_genord_foldli_conv"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>distinct (map fst l0); m = map_of l0; sorted_wrt R l0;\n     iti = foldli l0\\<rbrakk>\n    \\<Longrightarrow> \\<exists>l0.\n                         distinct (map fst l0) \\<and>\n                         m = map_of l0 \\<and>\n                         sorted_wrt R l0 \\<and> iti = foldli l0", "by blast"], ["", "lemma map_iterator_foldli_conv :\n  \"map_iterator iti m \\<longleftrightarrow>\n   (\\<exists>l0. distinct (map fst l0) \\<and> m = map_of l0 \\<and> iti = foldli l0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. map_iterator iti m =\n    (\\<exists>l0.\n        distinct (map fst l0) \\<and> m = map_of l0 \\<and> iti = foldli l0)", "unfolding set_iterator_def map_iterator_genord_foldli_conv"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<exists>l0.\n        distinct (map fst l0) \\<and>\n        m = map_of l0 \\<and>\n        sorted_wrt (\\<lambda>_ _. True) l0 \\<and> iti = foldli l0) =\n    (\\<exists>l0.\n        distinct (map fst l0) \\<and> m = map_of l0 \\<and> iti = foldli l0)", "by simp"], ["", "lemma map_iterator_I [intro] :\n  \"\\<lbrakk>distinct (map fst l0); m = map_of l0; iti = foldli l0\\<rbrakk> \\<Longrightarrow>\n   map_iterator iti m\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>distinct (map fst l0); m = map_of l0; iti = foldli l0\\<rbrakk>\n    \\<Longrightarrow> map_iterator iti m", "unfolding map_iterator_foldli_conv"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>distinct (map fst l0); m = map_of l0; iti = foldli l0\\<rbrakk>\n    \\<Longrightarrow> \\<exists>l0.\n                         distinct (map fst l0) \\<and>\n                         m = map_of l0 \\<and> iti = foldli l0", "by blast"], ["", "context linorder begin"], ["", "lemma sorted_wrt_keys_map_fst:\n    \"sorted_wrt (\\<lambda>(k,_) (k',_). R k k') l = sorted_wrt R (map fst l)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sorted_wrt (\\<lambda>(k, uu_) (k', uu_). R k k') l =\n    sorted_wrt R (map fst l)", "by (induct l) auto"], ["", "lemma map_iterator_linord_foldli_conv :\n    \"map_iterator_linord iti m \\<longleftrightarrow>\n     (\\<exists>l0. distinct (map fst l0) \\<and> m = map_of l0 \\<and> sorted (map fst l0) \\<and> iti = foldli l0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. map_iterator_linord iti m =\n    (\\<exists>l0.\n        distinct (map fst l0) \\<and>\n        m = map_of l0 \\<and> sorted (map fst l0) \\<and> iti = foldli l0)", "unfolding set_iterator_map_linord_def map_iterator_genord_foldli_conv"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<exists>l0.\n        distinct (map fst l0) \\<and>\n        m = map_of l0 \\<and>\n        sorted_wrt (\\<lambda>(k, uu_) (k', uu_). k \\<le> k') l0 \\<and>\n        iti = foldli l0) =\n    (\\<exists>l0.\n        distinct (map fst l0) \\<and>\n        m = map_of l0 \\<and> sorted (map fst l0) \\<and> iti = foldli l0)", "by (simp add: sorted_wrt_keys_map_fst sorted_sorted_wrt)"], ["", "lemma map_iterator_linord_I [intro] :\n    \"\\<lbrakk>distinct (map fst l0); m = map_of l0; sorted (map fst l0); iti = foldli l0\\<rbrakk> \\<Longrightarrow>\n     map_iterator_linord iti m\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>distinct (map fst l0); m = map_of l0; sorted (map fst l0);\n     iti = foldli l0\\<rbrakk>\n    \\<Longrightarrow> map_iterator_linord iti m", "unfolding map_iterator_linord_foldli_conv"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>distinct (map fst l0); m = map_of l0; sorted (map fst l0);\n     iti = foldli l0\\<rbrakk>\n    \\<Longrightarrow> \\<exists>l0.\n                         distinct (map fst l0) \\<and>\n                         m = map_of l0 \\<and>\n                         sorted (map fst l0) \\<and> iti = foldli l0", "by blast"], ["", "lemma map_iterator_rev_linord_foldli_conv :\n    \"map_iterator_rev_linord iti m \\<longleftrightarrow>\n     (\\<exists>l0. distinct (map fst l0) \\<and> m = map_of l0 \\<and> sorted (rev (map fst l0)) \\<and> iti = foldli l0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. map_iterator_rev_linord iti m =\n    (\\<exists>l0.\n        distinct (map fst l0) \\<and>\n        m = map_of l0 \\<and>\n        sorted (rev (map fst l0)) \\<and> iti = foldli l0)", "unfolding set_iterator_map_rev_linord_def map_iterator_genord_foldli_conv"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<exists>l0.\n        distinct (map fst l0) \\<and>\n        m = map_of l0 \\<and>\n        sorted_wrt (\\<lambda>(k, uu_) (k', uu_). k' \\<le> k) l0 \\<and>\n        iti = foldli l0) =\n    (\\<exists>l0.\n        distinct (map fst l0) \\<and>\n        m = map_of l0 \\<and>\n        sorted (rev (map fst l0)) \\<and> iti = foldli l0)", "by (simp add: sorted_wrt_keys_map_fst)"], ["", "lemma map_iterator_rev_linord_I [intro] :\n    \"\\<lbrakk>distinct (map fst l0); m = map_of l0; sorted (rev (map fst l0)); iti = foldli l0\\<rbrakk> \\<Longrightarrow>\n     map_iterator_rev_linord iti m\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>distinct (map fst l0); m = map_of l0;\n     sorted (rev (map fst l0)); iti = foldli l0\\<rbrakk>\n    \\<Longrightarrow> map_iterator_rev_linord iti m", "unfolding map_iterator_rev_linord_foldli_conv"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>distinct (map fst l0); m = map_of l0;\n     sorted (rev (map fst l0)); iti = foldli l0\\<rbrakk>\n    \\<Longrightarrow> \\<exists>l0.\n                         distinct (map fst l0) \\<and>\n                         m = map_of l0 \\<and>\n                         sorted (rev (map fst l0)) \\<and> iti = foldli l0", "by blast"], ["", "end"], ["", "end"]]}