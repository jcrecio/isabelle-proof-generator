{"file_name": "/home/qj213/afp-2021-10-22/thys/Collections/ICF/impl/ListSetImpl_Sorted.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Collections", "problem_names": ["lemmas lss_defs = \n  lss_\\<alpha>_def\n  lss_invar_def\n  lss_empty_def\n  lss_memb_def\n  lss_ins_def\n  lss_ins_dj_def\n  lss_delete_def\n  lss_iteratei_def\n  lss_isEmpty_def\n  lss_union_def\n  lss_union_list_def\n  lss_inter_def\n  lss_union_dj_def\n  lss_image_filter_def\n  lss_inj_image_filter_def\n  lss_image_def\n  lss_inj_image_def\n  lss_to_list_def\n  list_to_lss_def", "lemma lss_empty_impl: \"set_empty lss_\\<alpha> lss_invar lss_empty\"", "lemma lss_memb_impl: \"set_memb lss_\\<alpha> lss_invar lss_memb\"", "lemma lss_ins_impl: \"set_ins lss_\\<alpha> lss_invar lss_ins\"", "lemma lss_ins_dj_impl: \"set_ins_dj lss_\\<alpha> lss_invar lss_ins_dj\"", "lemma lss_delete_impl: \"set_delete lss_\\<alpha> lss_invar lss_delete\"", "lemma lss_\\<alpha>_finite[simp, intro!]: \"finite (lss_\\<alpha> l)\"", "lemma lss_is_finite_set: \"finite_set lss_\\<alpha> lss_invar\"", "lemma lss_iterateoi_impl: \"poly_set_iterateoi lss_\\<alpha> lss_invar lss_iterateoi\"", "lemma lss_reverse_iterateoi_impl: \"poly_set_rev_iterateoi lss_\\<alpha> lss_invar lss_reverse_iterateoi\"", "lemma lss_iteratei_impl: \"poly_set_iteratei lss_\\<alpha> lss_invar lss_iteratei\"", "lemma lss_isEmpty_impl: \"set_isEmpty lss_\\<alpha> lss_invar lss_isEmpty\"", "lemma lss_inter_impl: \"set_inter lss_\\<alpha> lss_invar lss_\\<alpha> lss_invar lss_\\<alpha> lss_invar lss_inter\"", "lemma lss_union_impl: \"set_union lss_\\<alpha> lss_invar lss_\\<alpha> lss_invar lss_\\<alpha> lss_invar lss_union\"", "lemma lss_union_list_impl: \"set_union_list lss_\\<alpha> lss_invar lss_\\<alpha> lss_invar lss_union_list\"", "lemma lss_union_dj_impl: \"set_union_dj lss_\\<alpha> lss_invar lss_\\<alpha> lss_invar lss_\\<alpha> lss_invar lss_union_dj\"", "lemma lss_image_filter_impl : \"set_image_filter lss_\\<alpha> lss_invar lss_\\<alpha> lss_invar lss_image_filter\"", "lemma lss_inj_image_filter_impl : \"set_inj_image_filter lss_\\<alpha> lss_invar lss_\\<alpha> lss_invar lss_inj_image_filter\"", "lemma lss_filter_impl : \"set_filter lss_\\<alpha> lss_invar lss_\\<alpha> lss_invar lss_filter\"", "lemmas lss_image_impl = iflt_image_correct[OF lss_image_filter_impl, folded lss_image_def]", "lemmas lss_inj_image_impl = iflt_inj_image_correct[OF lss_inj_image_filter_impl, folded lss_inj_image_def]", "lemma lss_to_list_impl: \"set_to_list lss_\\<alpha> lss_invar lss_to_list\"", "lemma list_to_lss_impl: \"list_to_set lss_\\<alpha> lss_invar list_to_lss\"", "lemma pi_lss[proper_it]: \n  \"proper_it' lss_iteratei lss_iteratei\""], "translations": [["", "lemmas lss_defs = \n  lss_\\<alpha>_def\n  lss_invar_def\n  lss_empty_def\n  lss_memb_def\n  lss_ins_def\n  lss_ins_dj_def\n  lss_delete_def\n  lss_iteratei_def\n  lss_isEmpty_def\n  lss_union_def\n  lss_union_list_def\n  lss_inter_def\n  lss_union_dj_def\n  lss_image_filter_def\n  lss_inj_image_filter_def\n  lss_image_def\n  lss_inj_image_def\n  lss_to_list_def\n  list_to_lss_def"], ["", "lemma lss_empty_impl: \"set_empty lss_\\<alpha> lss_invar lss_empty\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set_empty lss_\\<alpha> lss_invar lss_empty", "by (unfold_locales) (auto simp add: lss_defs)"], ["", "lemma lss_memb_impl: \"set_memb lss_\\<alpha> lss_invar lss_memb\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set_memb lss_\\<alpha> lss_invar lss_memb", "by (unfold_locales) (auto simp add: lss_defs memb_sorted_correct)"], ["", "lemma lss_ins_impl: \"set_ins lss_\\<alpha> lss_invar lss_ins\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set_ins lss_\\<alpha> lss_invar lss_ins", "by (unfold_locales) (auto simp add: lss_defs insertion_sort_correct)"], ["", "lemma lss_ins_dj_impl: \"set_ins_dj lss_\\<alpha> lss_invar lss_ins_dj\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set_ins_dj lss_\\<alpha> lss_invar lss_ins_dj", "by (unfold_locales) (auto simp add: lss_defs insertion_sort_correct)"], ["", "lemma lss_delete_impl: \"set_delete lss_\\<alpha> lss_invar lss_delete\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set_delete lss_\\<alpha> lss_invar lss_delete", "by(unfold_locales)(auto simp add: lss_delete_def lss_\\<alpha>_def lss_invar_def delete_sorted_correct)"], ["", "lemma lss_\\<alpha>_finite[simp, intro!]: \"finite (lss_\\<alpha> l)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (lss_\\<alpha> l)", "by (auto simp add: lss_defs)"], ["", "lemma lss_is_finite_set: \"finite_set lss_\\<alpha> lss_invar\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite_set lss_\\<alpha> lss_invar", "by (unfold_locales) (auto simp add: lss_defs)"], ["", "lemma lss_iterateoi_impl: \"poly_set_iterateoi lss_\\<alpha> lss_invar lss_iterateoi\""], ["proof (prove)\ngoal (1 subgoal):\n 1. poly_set_iterateoi lss_\\<alpha> lss_invar lss_iterateoi", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>s. lss_invar s \\<Longrightarrow> finite (lss_\\<alpha> s)\n 2. \\<And>x.\n       lss_invar x \\<Longrightarrow>\n       set_iterator_linord (lss_iterateoi x) (lss_\\<alpha> x)", "fix l :: \"'a::{linorder} list\""], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>s. lss_invar s \\<Longrightarrow> finite (lss_\\<alpha> s)\n 2. \\<And>x.\n       lss_invar x \\<Longrightarrow>\n       set_iterator_linord (lss_iterateoi x) (lss_\\<alpha> x)", "assume invar_l: \"lss_invar l\""], ["proof (state)\nthis:\n  lss_invar l\n\ngoal (2 subgoals):\n 1. \\<And>s. lss_invar s \\<Longrightarrow> finite (lss_\\<alpha> s)\n 2. \\<And>x.\n       lss_invar x \\<Longrightarrow>\n       set_iterator_linord (lss_iterateoi x) (lss_\\<alpha> x)", "show \"finite (lss_\\<alpha> l)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (lss_\\<alpha> l)", "unfolding lss_\\<alpha>_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (set l)", "by simp"], ["proof (state)\nthis:\n  finite (lss_\\<alpha> l)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       lss_invar x \\<Longrightarrow>\n       set_iterator_linord (lss_iterateoi x) (lss_\\<alpha> x)", "from invar_l"], ["proof (chain)\npicking this:\n  lss_invar l", "show \"set_iterator_linord (lss_iterateoi l) (lss_\\<alpha> l)\""], ["proof (prove)\nusing this:\n  lss_invar l\n\ngoal (1 subgoal):\n 1. set_iterator_linord (lss_iterateoi l) (lss_\\<alpha> l)", "apply (rule_tac set_iterator_linord_I [of \"l\"])"], ["proof (prove)\ngoal (4 subgoals):\n 1. lss_invar l \\<Longrightarrow> distinct l\n 2. lss_invar l \\<Longrightarrow> lss_\\<alpha> l = set l\n 3. lss_invar l \\<Longrightarrow> sorted l\n 4. lss_invar l \\<Longrightarrow> lss_iterateoi l = foldli l", "apply (simp_all add: lss_\\<alpha>_def lss_invar_def lss_iterateoi_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  set_iterator_linord (lss_iterateoi l) (lss_\\<alpha> l)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma lss_reverse_iterateoi_impl: \"poly_set_rev_iterateoi lss_\\<alpha> lss_invar lss_reverse_iterateoi\""], ["proof (prove)\ngoal (1 subgoal):\n 1. poly_set_rev_iterateoi lss_\\<alpha> lss_invar lss_reverse_iterateoi", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>s. lss_invar s \\<Longrightarrow> finite (lss_\\<alpha> s)\n 2. \\<And>s.\n       lss_invar s \\<Longrightarrow>\n       set_iterator_rev_linord (lss_reverse_iterateoi s) (lss_\\<alpha> s)", "fix l :: \"'a list\""], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>s. lss_invar s \\<Longrightarrow> finite (lss_\\<alpha> s)\n 2. \\<And>s.\n       lss_invar s \\<Longrightarrow>\n       set_iterator_rev_linord (lss_reverse_iterateoi s) (lss_\\<alpha> s)", "assume invar_l: \"lss_invar l\""], ["proof (state)\nthis:\n  lss_invar l\n\ngoal (2 subgoals):\n 1. \\<And>s. lss_invar s \\<Longrightarrow> finite (lss_\\<alpha> s)\n 2. \\<And>s.\n       lss_invar s \\<Longrightarrow>\n       set_iterator_rev_linord (lss_reverse_iterateoi s) (lss_\\<alpha> s)", "show \"finite (lss_\\<alpha> l)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (lss_\\<alpha> l)", "unfolding lss_\\<alpha>_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (set l)", "by simp"], ["proof (state)\nthis:\n  finite (lss_\\<alpha> l)\n\ngoal (1 subgoal):\n 1. \\<And>s.\n       lss_invar s \\<Longrightarrow>\n       set_iterator_rev_linord (lss_reverse_iterateoi s) (lss_\\<alpha> s)", "from invar_l"], ["proof (chain)\npicking this:\n  lss_invar l", "show \"set_iterator_rev_linord (lss_reverse_iterateoi l) (lss_\\<alpha> l)\""], ["proof (prove)\nusing this:\n  lss_invar l\n\ngoal (1 subgoal):\n 1. set_iterator_rev_linord (lss_reverse_iterateoi l) (lss_\\<alpha> l)", "apply (rule_tac set_iterator_rev_linord_I [of \"rev l\"])"], ["proof (prove)\ngoal (4 subgoals):\n 1. lss_invar l \\<Longrightarrow> distinct (rev l)\n 2. lss_invar l \\<Longrightarrow> lss_\\<alpha> l = set (rev l)\n 3. lss_invar l \\<Longrightarrow> sorted (rev (rev l))\n 4. lss_invar l \\<Longrightarrow> lss_reverse_iterateoi l = foldli (rev l)", "apply (simp_all add: lss_\\<alpha>_def lss_invar_def lss_reverse_iterateoi_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  set_iterator_rev_linord (lss_reverse_iterateoi l) (lss_\\<alpha> l)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma lss_iteratei_impl: \"poly_set_iteratei lss_\\<alpha> lss_invar lss_iteratei\""], ["proof (prove)\ngoal (1 subgoal):\n 1. poly_set_iteratei lss_\\<alpha> lss_invar lss_iteratei", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>s. lss_invar s \\<Longrightarrow> finite (lss_\\<alpha> s)\n 2. \\<And>s.\n       lss_invar s \\<Longrightarrow>\n       set_iterator (lss_iteratei s) (lss_\\<alpha> s)", "fix l :: \"'a list\""], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>s. lss_invar s \\<Longrightarrow> finite (lss_\\<alpha> s)\n 2. \\<And>s.\n       lss_invar s \\<Longrightarrow>\n       set_iterator (lss_iteratei s) (lss_\\<alpha> s)", "assume invar_l: \"lss_invar l\""], ["proof (state)\nthis:\n  lss_invar l\n\ngoal (2 subgoals):\n 1. \\<And>s. lss_invar s \\<Longrightarrow> finite (lss_\\<alpha> s)\n 2. \\<And>s.\n       lss_invar s \\<Longrightarrow>\n       set_iterator (lss_iteratei s) (lss_\\<alpha> s)", "show \"finite (lss_\\<alpha> l)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (lss_\\<alpha> l)", "unfolding lss_\\<alpha>_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (set l)", "by simp"], ["proof (state)\nthis:\n  finite (lss_\\<alpha> l)\n\ngoal (1 subgoal):\n 1. \\<And>s.\n       lss_invar s \\<Longrightarrow>\n       set_iterator (lss_iteratei s) (lss_\\<alpha> s)", "from invar_l"], ["proof (chain)\npicking this:\n  lss_invar l", "show \"set_iterator (lss_iteratei l) (lss_\\<alpha> l)\""], ["proof (prove)\nusing this:\n  lss_invar l\n\ngoal (1 subgoal):\n 1. set_iterator (lss_iteratei l) (lss_\\<alpha> l)", "apply (rule_tac set_iterator_I [of \"l\"])"], ["proof (prove)\ngoal (3 subgoals):\n 1. lss_invar l \\<Longrightarrow> distinct l\n 2. lss_invar l \\<Longrightarrow> lss_\\<alpha> l = set l\n 3. lss_invar l \\<Longrightarrow> lss_iteratei l = foldli l", "apply (simp_all add: lss_\\<alpha>_def lss_invar_def lss_iteratei_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  set_iterator (lss_iteratei l) (lss_\\<alpha> l)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma lss_isEmpty_impl: \"set_isEmpty lss_\\<alpha> lss_invar lss_isEmpty\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set_isEmpty lss_\\<alpha> lss_invar lss_isEmpty", "by(unfold_locales)(auto simp add: lss_defs)"], ["", "lemma lss_inter_impl: \"set_inter lss_\\<alpha> lss_invar lss_\\<alpha> lss_invar lss_\\<alpha> lss_invar lss_inter\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set_inter lss_\\<alpha> lss_invar lss_\\<alpha> lss_invar lss_\\<alpha>\n     lss_invar lss_inter", "by (unfold_locales) (auto simp add: lss_defs inter_sorted_correct)"], ["", "lemma lss_union_impl: \"set_union lss_\\<alpha> lss_invar lss_\\<alpha> lss_invar lss_\\<alpha> lss_invar lss_union\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set_union lss_\\<alpha> lss_invar lss_\\<alpha> lss_invar lss_\\<alpha>\n     lss_invar lss_union", "by (unfold_locales) (auto simp add: lss_defs merge_correct)"], ["", "lemma lss_union_list_impl: \"set_union_list lss_\\<alpha> lss_invar lss_\\<alpha> lss_invar lss_union_list\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set_union_list lss_\\<alpha> lss_invar lss_\\<alpha> lss_invar\n     lss_union_list", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>l.\n       \\<forall>s1\\<in>set l. lss_invar s1 \\<Longrightarrow>\n       lss_\\<alpha> (lss_union_list l) =\n       \\<Union> {lss_\\<alpha> s1 |s1. s1 \\<in> set l}\n 2. \\<And>l.\n       \\<forall>s1\\<in>set l. lss_invar s1 \\<Longrightarrow>\n       lss_invar (lss_union_list l)", "fix l :: \"'a::{linorder} lss list\""], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>l.\n       \\<forall>s1\\<in>set l. lss_invar s1 \\<Longrightarrow>\n       lss_\\<alpha> (lss_union_list l) =\n       \\<Union> {lss_\\<alpha> s1 |s1. s1 \\<in> set l}\n 2. \\<And>l.\n       \\<forall>s1\\<in>set l. lss_invar s1 \\<Longrightarrow>\n       lss_invar (lss_union_list l)", "assume \"\\<forall>s1\\<in>set l. lss_invar s1\""], ["proof (state)\nthis:\n  \\<forall>s1\\<in>set l. lss_invar s1\n\ngoal (2 subgoals):\n 1. \\<And>l.\n       \\<forall>s1\\<in>set l. lss_invar s1 \\<Longrightarrow>\n       lss_\\<alpha> (lss_union_list l) =\n       \\<Union> {lss_\\<alpha> s1 |s1. s1 \\<in> set l}\n 2. \\<And>l.\n       \\<forall>s1\\<in>set l. lss_invar s1 \\<Longrightarrow>\n       lss_invar (lss_union_list l)", "with merge_list_correct [of l \"[]\"]"], ["proof (chain)\npicking this:\n  \\<lbrakk>\\<And>la.\n              la \\<in> set l \\<Longrightarrow> distinct la \\<and> sorted la;\n   \\<And>l.\n      l \\<in> set [] \\<Longrightarrow> distinct l \\<and> sorted l\\<rbrakk>\n  \\<Longrightarrow> distinct (merge_list [] l) \\<and>\n                    sorted (merge_list [] l) \\<and>\n                    set (merge_list [] l) = set (concat ([] @ l))\n  \\<forall>s1\\<in>set l. lss_invar s1", "show \"lss_\\<alpha> (lss_union_list l) = \\<Union>{lss_\\<alpha> s1 |s1. s1 \\<in> set l}\"\n       \"lss_invar (lss_union_list l)\""], ["proof (prove)\nusing this:\n  \\<lbrakk>\\<And>la.\n              la \\<in> set l \\<Longrightarrow> distinct la \\<and> sorted la;\n   \\<And>l.\n      l \\<in> set [] \\<Longrightarrow> distinct l \\<and> sorted l\\<rbrakk>\n  \\<Longrightarrow> distinct (merge_list [] l) \\<and>\n                    sorted (merge_list [] l) \\<and>\n                    set (merge_list [] l) = set (concat ([] @ l))\n  \\<forall>s1\\<in>set l. lss_invar s1\n\ngoal (1 subgoal):\n 1. lss_\\<alpha> (lss_union_list l) =\n    \\<Union> {lss_\\<alpha> s1 |s1. s1 \\<in> set l} &&&\n    lss_invar (lss_union_list l)", "by (auto simp add: lss_defs)"], ["proof (state)\nthis:\n  lss_\\<alpha> (lss_union_list l) =\n  \\<Union> {lss_\\<alpha> s1 |s1. s1 \\<in> set l}\n  lss_invar (lss_union_list l)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma lss_union_dj_impl: \"set_union_dj lss_\\<alpha> lss_invar lss_\\<alpha> lss_invar lss_\\<alpha> lss_invar lss_union_dj\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set_union_dj lss_\\<alpha> lss_invar lss_\\<alpha> lss_invar lss_\\<alpha>\n     lss_invar lss_union_dj", "by (unfold_locales) (auto simp add: lss_defs merge_correct)"], ["", "lemma lss_image_filter_impl : \"set_image_filter lss_\\<alpha> lss_invar lss_\\<alpha> lss_invar lss_image_filter\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set_image_filter lss_\\<alpha> lss_invar lss_\\<alpha> lss_invar\n     lss_image_filter", "apply (unfold_locales)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>s f.\n       lss_invar s \\<Longrightarrow>\n       lss_\\<alpha> (lss_image_filter f s) =\n       {b. \\<exists>a\\<in>lss_\\<alpha> s. f a = Some b}\n 2. \\<And>s f.\n       lss_invar s \\<Longrightarrow> lss_invar (lss_image_filter f s)", "apply (simp_all add: \n  lss_invar_def lss_image_filter_def lss_\\<alpha>_def mergesort_remdups_correct\n  set_map_filter Bex_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma lss_inj_image_filter_impl : \"set_inj_image_filter lss_\\<alpha> lss_invar lss_\\<alpha> lss_invar lss_inj_image_filter\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set_inj_image_filter lss_\\<alpha> lss_invar lss_\\<alpha> lss_invar\n     lss_inj_image_filter", "apply (unfold_locales)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>s f.\n       \\<lbrakk>lss_invar s;\n        inj_on f (lss_\\<alpha> s \\<inter> dom f)\\<rbrakk>\n       \\<Longrightarrow> lss_\\<alpha> (lss_inj_image_filter f s) =\n                         {b. \\<exists>a\\<in>lss_\\<alpha> s. f a = Some b}\n 2. \\<And>s f.\n       \\<lbrakk>lss_invar s;\n        inj_on f (lss_\\<alpha> s \\<inter> dom f)\\<rbrakk>\n       \\<Longrightarrow> lss_invar (lss_inj_image_filter f s)", "apply (simp_all add: lss_invar_def lss_inj_image_filter_def lss_image_filter_def\n                     mergesort_remdups_correct lss_\\<alpha>_def\n                     set_map_filter Bex_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma lss_filter_impl : \"set_filter lss_\\<alpha> lss_invar lss_\\<alpha> lss_invar lss_filter\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set_filter lss_\\<alpha> lss_invar lss_\\<alpha> lss_invar lss_filter", "apply (unfold_locales)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>s P.\n       lss_invar s \\<Longrightarrow>\n       lss_\\<alpha> (lss_filter P s) = {e \\<in> lss_\\<alpha> s. P e}\n 2. \\<And>s P. lss_invar s \\<Longrightarrow> lss_invar (lss_filter P s)", "apply (simp_all add: lss_invar_def lss_filter_def sorted_filter lss_\\<alpha>_def\n                     set_map_filter Bex_def sorted_filter')"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemmas lss_image_impl = iflt_image_correct[OF lss_image_filter_impl, folded lss_image_def]"], ["", "lemmas lss_inj_image_impl = iflt_inj_image_correct[OF lss_inj_image_filter_impl, folded lss_inj_image_def]"], ["", "lemma lss_to_list_impl: \"set_to_list lss_\\<alpha> lss_invar lss_to_list\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set_to_list lss_\\<alpha> lss_invar lss_to_list", "by(unfold_locales)(auto simp add: lss_defs)"], ["", "lemma list_to_lss_impl: \"list_to_set lss_\\<alpha> lss_invar list_to_lss\""], ["proof (prove)\ngoal (1 subgoal):\n 1. list_to_set lss_\\<alpha> lss_invar list_to_lss", "by (unfold_locales) (auto simp add: lss_defs mergesort_remdups_correct)"], ["", "definition lss_basic_ops :: \"('x::linorder,'x lss) oset_basic_ops\" \n  where [icf_rec_def]: \"lss_basic_ops \\<equiv> \\<lparr>\n    bset_op_\\<alpha> = lss_\\<alpha>,\n    bset_op_invar = lss_invar,\n    bset_op_empty = lss_empty,\n    bset_op_memb = lss_memb,\n    bset_op_ins = lss_ins,\n    bset_op_ins_dj = lss_ins_dj,\n    bset_op_delete = lss_delete,\n    bset_op_list_it = lss_iteratei,\n    bset_op_ordered_list_it = lss_iterateoi,\n    bset_op_rev_list_it = lss_reverse_iterateoi\n  \\<rparr>\""], ["", "setup Locale_Code.open_block"], ["", "interpretation lss_basic: StdBasicOSet lss_basic_ops"], ["proof (prove)\ngoal (1 subgoal):\n 1. StdBasicOSet lss_basic_ops", "apply (rule StdBasicOSet.intro)"], ["proof (prove)\ngoal (3 subgoals):\n 1. StdBasicSet lss_basic_ops\n 2. poly_set_iterateoi (bset_op_\\<alpha> lss_basic_ops)\n     (bset_op_invar lss_basic_ops) (bset_op_ordered_list_it lss_basic_ops)\n 3. poly_set_rev_iterateoi (bset_op_\\<alpha> lss_basic_ops)\n     (bset_op_invar lss_basic_ops) (bset_op_rev_list_it lss_basic_ops)", "apply (rule StdBasicSet.intro)"], ["proof (prove)\ngoal (8 subgoals):\n 1. set_empty (bset_op_\\<alpha> lss_basic_ops) (bset_op_invar lss_basic_ops)\n     (bset_op_empty lss_basic_ops)\n 2. set_memb (bset_op_\\<alpha> lss_basic_ops) (bset_op_invar lss_basic_ops)\n     (bset_op_memb lss_basic_ops)\n 3. set_ins (bset_op_\\<alpha> lss_basic_ops) (bset_op_invar lss_basic_ops)\n     (bset_op_ins lss_basic_ops)\n 4. set_ins_dj (bset_op_\\<alpha> lss_basic_ops)\n     (bset_op_invar lss_basic_ops) (bset_op_ins_dj lss_basic_ops)\n 5. set_delete (bset_op_\\<alpha> lss_basic_ops)\n     (bset_op_invar lss_basic_ops) (bset_op_delete lss_basic_ops)\n 6. poly_set_iteratei (bset_op_\\<alpha> lss_basic_ops)\n     (bset_op_invar lss_basic_ops) (bset_op_list_it lss_basic_ops)\n 7. poly_set_iterateoi (bset_op_\\<alpha> lss_basic_ops)\n     (bset_op_invar lss_basic_ops) (bset_op_ordered_list_it lss_basic_ops)\n 8. poly_set_rev_iterateoi (bset_op_\\<alpha> lss_basic_ops)\n     (bset_op_invar lss_basic_ops) (bset_op_rev_list_it lss_basic_ops)", "apply (simp_all add: icf_rec_unf)"], ["proof (prove)\ngoal (8 subgoals):\n 1. set_empty lss_\\<alpha> lss_invar lss_empty\n 2. set_memb lss_\\<alpha> lss_invar lss_memb\n 3. set_ins lss_\\<alpha> lss_invar lss_ins\n 4. set_ins_dj lss_\\<alpha> lss_invar lss_ins_dj\n 5. set_delete lss_\\<alpha> lss_invar lss_delete\n 6. poly_set_iteratei lss_\\<alpha> lss_invar lss_iteratei\n 7. poly_set_iterateoi lss_\\<alpha> lss_invar lss_iterateoi\n 8. poly_set_rev_iterateoi lss_\\<alpha> lss_invar lss_reverse_iterateoi", "apply (rule lss_empty_impl lss_memb_impl lss_ins_impl lss_ins_dj_impl\n    lss_delete_impl lss_iteratei_impl lss_iterateoi_impl \n    lss_reverse_iterateoi_impl)+"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "setup Locale_Code.close_block"], ["", "definition [icf_rec_def]: \"lss_ops \\<equiv> lss_basic.dflt_oops \\<lparr>\n  set_op_isEmpty := lss_isEmpty,\n  set_op_union := lss_union,\n  set_op_union_dj := lss_union_dj,\n  set_op_filter := lss_filter,\n  set_op_to_list := lss_to_list,\n  set_op_from_list := list_to_lss\n  \\<rparr>\""], ["", "setup Locale_Code.open_block"], ["", "interpretation lss: StdOSetDefs lss_ops"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "interpretation lss: StdOSet lss_ops"], ["proof (prove)\ngoal (1 subgoal):\n 1. StdOSet lss_ops", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. StdOSet lss_ops", "interpret aux: StdOSet lss_basic.dflt_oops"], ["proof (prove)\ngoal (1 subgoal):\n 1. StdOSet lss_basic.dflt_oops", "by (rule lss_basic.dflt_oops_impl)"], ["proof (state)\ngoal (1 subgoal):\n 1. StdOSet lss_ops", "show \"StdOSet lss_ops\""], ["proof (prove)\ngoal (1 subgoal):\n 1. StdOSet lss_ops", "unfolding lss_ops_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. StdOSet\n     (lss_basic.dflt_oops\n      \\<lparr>set_op_isEmpty := lss_isEmpty, set_op_union := lss_union,\n         set_op_union_dj := lss_union_dj, set_op_filter := lss_filter,\n         set_op_to_list := lss_to_list,\n         set_op_from_list := list_to_lss\\<rparr>)", "apply (rule StdOSet_intro)"], ["proof (prove)\ngoal (31 subgoals):\n 1. set_empty\n     (set_op_\\<alpha>\n       (lss_basic.dflt_oops\n        \\<lparr>set_op_isEmpty := lss_isEmpty, set_op_union := lss_union,\n           set_op_union_dj := lss_union_dj, set_op_filter := lss_filter,\n           set_op_to_list := lss_to_list,\n           set_op_from_list := list_to_lss\\<rparr>))\n     (set_op_invar\n       (lss_basic.dflt_oops\n        \\<lparr>set_op_isEmpty := lss_isEmpty, set_op_union := lss_union,\n           set_op_union_dj := lss_union_dj, set_op_filter := lss_filter,\n           set_op_to_list := lss_to_list,\n           set_op_from_list := list_to_lss\\<rparr>))\n     (set_op_empty\n       (lss_basic.dflt_oops\n        \\<lparr>set_op_isEmpty := lss_isEmpty, set_op_union := lss_union,\n           set_op_union_dj := lss_union_dj, set_op_filter := lss_filter,\n           set_op_to_list := lss_to_list,\n           set_op_from_list := list_to_lss\\<rparr>))\n 2. set_memb\n     (set_op_\\<alpha>\n       (lss_basic.dflt_oops\n        \\<lparr>set_op_isEmpty := lss_isEmpty, set_op_union := lss_union,\n           set_op_union_dj := lss_union_dj, set_op_filter := lss_filter,\n           set_op_to_list := lss_to_list,\n           set_op_from_list := list_to_lss\\<rparr>))\n     (set_op_invar\n       (lss_basic.dflt_oops\n        \\<lparr>set_op_isEmpty := lss_isEmpty, set_op_union := lss_union,\n           set_op_union_dj := lss_union_dj, set_op_filter := lss_filter,\n           set_op_to_list := lss_to_list,\n           set_op_from_list := list_to_lss\\<rparr>))\n     (set_op_memb\n       (lss_basic.dflt_oops\n        \\<lparr>set_op_isEmpty := lss_isEmpty, set_op_union := lss_union,\n           set_op_union_dj := lss_union_dj, set_op_filter := lss_filter,\n           set_op_to_list := lss_to_list,\n           set_op_from_list := list_to_lss\\<rparr>))\n 3. set_ins\n     (set_op_\\<alpha>\n       (lss_basic.dflt_oops\n        \\<lparr>set_op_isEmpty := lss_isEmpty, set_op_union := lss_union,\n           set_op_union_dj := lss_union_dj, set_op_filter := lss_filter,\n           set_op_to_list := lss_to_list,\n           set_op_from_list := list_to_lss\\<rparr>))\n     (set_op_invar\n       (lss_basic.dflt_oops\n        \\<lparr>set_op_isEmpty := lss_isEmpty, set_op_union := lss_union,\n           set_op_union_dj := lss_union_dj, set_op_filter := lss_filter,\n           set_op_to_list := lss_to_list,\n           set_op_from_list := list_to_lss\\<rparr>))\n     (set_op_ins\n       (lss_basic.dflt_oops\n        \\<lparr>set_op_isEmpty := lss_isEmpty, set_op_union := lss_union,\n           set_op_union_dj := lss_union_dj, set_op_filter := lss_filter,\n           set_op_to_list := lss_to_list,\n           set_op_from_list := list_to_lss\\<rparr>))\n 4. set_ins_dj\n     (set_op_\\<alpha>\n       (lss_basic.dflt_oops\n        \\<lparr>set_op_isEmpty := lss_isEmpty, set_op_union := lss_union,\n           set_op_union_dj := lss_union_dj, set_op_filter := lss_filter,\n           set_op_to_list := lss_to_list,\n           set_op_from_list := list_to_lss\\<rparr>))\n     (set_op_invar\n       (lss_basic.dflt_oops\n        \\<lparr>set_op_isEmpty := lss_isEmpty, set_op_union := lss_union,\n           set_op_union_dj := lss_union_dj, set_op_filter := lss_filter,\n           set_op_to_list := lss_to_list,\n           set_op_from_list := list_to_lss\\<rparr>))\n     (set_op_ins_dj\n       (lss_basic.dflt_oops\n        \\<lparr>set_op_isEmpty := lss_isEmpty, set_op_union := lss_union,\n           set_op_union_dj := lss_union_dj, set_op_filter := lss_filter,\n           set_op_to_list := lss_to_list,\n           set_op_from_list := list_to_lss\\<rparr>))\n 5. set_delete\n     (set_op_\\<alpha>\n       (lss_basic.dflt_oops\n        \\<lparr>set_op_isEmpty := lss_isEmpty, set_op_union := lss_union,\n           set_op_union_dj := lss_union_dj, set_op_filter := lss_filter,\n           set_op_to_list := lss_to_list,\n           set_op_from_list := list_to_lss\\<rparr>))\n     (set_op_invar\n       (lss_basic.dflt_oops\n        \\<lparr>set_op_isEmpty := lss_isEmpty, set_op_union := lss_union,\n           set_op_union_dj := lss_union_dj, set_op_filter := lss_filter,\n           set_op_to_list := lss_to_list,\n           set_op_from_list := list_to_lss\\<rparr>))\n     (set_op_delete\n       (lss_basic.dflt_oops\n        \\<lparr>set_op_isEmpty := lss_isEmpty, set_op_union := lss_union,\n           set_op_union_dj := lss_union_dj, set_op_filter := lss_filter,\n           set_op_to_list := lss_to_list,\n           set_op_from_list := list_to_lss\\<rparr>))\n 6. poly_set_iteratei\n     (set_op_\\<alpha>\n       (lss_basic.dflt_oops\n        \\<lparr>set_op_isEmpty := lss_isEmpty, set_op_union := lss_union,\n           set_op_union_dj := lss_union_dj, set_op_filter := lss_filter,\n           set_op_to_list := lss_to_list,\n           set_op_from_list := list_to_lss\\<rparr>))\n     (set_op_invar\n       (lss_basic.dflt_oops\n        \\<lparr>set_op_isEmpty := lss_isEmpty, set_op_union := lss_union,\n           set_op_union_dj := lss_union_dj, set_op_filter := lss_filter,\n           set_op_to_list := lss_to_list,\n           set_op_from_list := list_to_lss\\<rparr>))\n     (set_op_list_it\n       (lss_basic.dflt_oops\n        \\<lparr>set_op_isEmpty := lss_isEmpty, set_op_union := lss_union,\n           set_op_union_dj := lss_union_dj, set_op_filter := lss_filter,\n           set_op_to_list := lss_to_list,\n           set_op_from_list := list_to_lss\\<rparr>))\n 7. set_sng\n     (set_op_\\<alpha>\n       (lss_basic.dflt_oops\n        \\<lparr>set_op_isEmpty := lss_isEmpty, set_op_union := lss_union,\n           set_op_union_dj := lss_union_dj, set_op_filter := lss_filter,\n           set_op_to_list := lss_to_list,\n           set_op_from_list := list_to_lss\\<rparr>))\n     (set_op_invar\n       (lss_basic.dflt_oops\n        \\<lparr>set_op_isEmpty := lss_isEmpty, set_op_union := lss_union,\n           set_op_union_dj := lss_union_dj, set_op_filter := lss_filter,\n           set_op_to_list := lss_to_list,\n           set_op_from_list := list_to_lss\\<rparr>))\n     (set_op_sng\n       (lss_basic.dflt_oops\n        \\<lparr>set_op_isEmpty := lss_isEmpty, set_op_union := lss_union,\n           set_op_union_dj := lss_union_dj, set_op_filter := lss_filter,\n           set_op_to_list := lss_to_list,\n           set_op_from_list := list_to_lss\\<rparr>))\n 8. set_isEmpty\n     (set_op_\\<alpha>\n       (lss_basic.dflt_oops\n        \\<lparr>set_op_isEmpty := lss_isEmpty, set_op_union := lss_union,\n           set_op_union_dj := lss_union_dj, set_op_filter := lss_filter,\n           set_op_to_list := lss_to_list,\n           set_op_from_list := list_to_lss\\<rparr>))\n     (set_op_invar\n       (lss_basic.dflt_oops\n        \\<lparr>set_op_isEmpty := lss_isEmpty, set_op_union := lss_union,\n           set_op_union_dj := lss_union_dj, set_op_filter := lss_filter,\n           set_op_to_list := lss_to_list,\n           set_op_from_list := list_to_lss\\<rparr>))\n     (set_op_isEmpty\n       (lss_basic.dflt_oops\n        \\<lparr>set_op_isEmpty := lss_isEmpty, set_op_union := lss_union,\n           set_op_union_dj := lss_union_dj, set_op_filter := lss_filter,\n           set_op_to_list := lss_to_list,\n           set_op_from_list := list_to_lss\\<rparr>))\n 9. set_isSng\n     (set_op_\\<alpha>\n       (lss_basic.dflt_oops\n        \\<lparr>set_op_isEmpty := lss_isEmpty, set_op_union := lss_union,\n           set_op_union_dj := lss_union_dj, set_op_filter := lss_filter,\n           set_op_to_list := lss_to_list,\n           set_op_from_list := list_to_lss\\<rparr>))\n     (set_op_invar\n       (lss_basic.dflt_oops\n        \\<lparr>set_op_isEmpty := lss_isEmpty, set_op_union := lss_union,\n           set_op_union_dj := lss_union_dj, set_op_filter := lss_filter,\n           set_op_to_list := lss_to_list,\n           set_op_from_list := list_to_lss\\<rparr>))\n     (set_op_isSng\n       (lss_basic.dflt_oops\n        \\<lparr>set_op_isEmpty := lss_isEmpty, set_op_union := lss_union,\n           set_op_union_dj := lss_union_dj, set_op_filter := lss_filter,\n           set_op_to_list := lss_to_list,\n           set_op_from_list := list_to_lss\\<rparr>))\n 10. set_ball\n      (set_op_\\<alpha>\n        (lss_basic.dflt_oops\n         \\<lparr>set_op_isEmpty := lss_isEmpty, set_op_union := lss_union,\n            set_op_union_dj := lss_union_dj, set_op_filter := lss_filter,\n            set_op_to_list := lss_to_list,\n            set_op_from_list := list_to_lss\\<rparr>))\n      (set_op_invar\n        (lss_basic.dflt_oops\n         \\<lparr>set_op_isEmpty := lss_isEmpty, set_op_union := lss_union,\n            set_op_union_dj := lss_union_dj, set_op_filter := lss_filter,\n            set_op_to_list := lss_to_list,\n            set_op_from_list := list_to_lss\\<rparr>))\n      (set_op_ball\n        (lss_basic.dflt_oops\n         \\<lparr>set_op_isEmpty := lss_isEmpty, set_op_union := lss_union,\n            set_op_union_dj := lss_union_dj, set_op_filter := lss_filter,\n            set_op_to_list := lss_to_list,\n            set_op_from_list := list_to_lss\\<rparr>))\nA total of 31 subgoals...", "apply icf_locales"], ["proof (prove)\ngoal (6 subgoals):\n 1. set_isEmpty\n     (set_op_\\<alpha>\n       (lss_basic.dflt_oops\n        \\<lparr>set_op_isEmpty := lss_isEmpty, set_op_union := lss_union,\n           set_op_union_dj := lss_union_dj, set_op_filter := lss_filter,\n           set_op_to_list := lss_to_list,\n           set_op_from_list := list_to_lss\\<rparr>))\n     (set_op_invar\n       (lss_basic.dflt_oops\n        \\<lparr>set_op_isEmpty := lss_isEmpty, set_op_union := lss_union,\n           set_op_union_dj := lss_union_dj, set_op_filter := lss_filter,\n           set_op_to_list := lss_to_list,\n           set_op_from_list := list_to_lss\\<rparr>))\n     (set_op_isEmpty\n       (lss_basic.dflt_oops\n        \\<lparr>set_op_isEmpty := lss_isEmpty, set_op_union := lss_union,\n           set_op_union_dj := lss_union_dj, set_op_filter := lss_filter,\n           set_op_to_list := lss_to_list,\n           set_op_from_list := list_to_lss\\<rparr>))\n 2. set_union\n     (set_op_\\<alpha>\n       (lss_basic.dflt_oops\n        \\<lparr>set_op_isEmpty := lss_isEmpty, set_op_union := lss_union,\n           set_op_union_dj := lss_union_dj, set_op_filter := lss_filter,\n           set_op_to_list := lss_to_list,\n           set_op_from_list := list_to_lss\\<rparr>))\n     (set_op_invar\n       (lss_basic.dflt_oops\n        \\<lparr>set_op_isEmpty := lss_isEmpty, set_op_union := lss_union,\n           set_op_union_dj := lss_union_dj, set_op_filter := lss_filter,\n           set_op_to_list := lss_to_list,\n           set_op_from_list := list_to_lss\\<rparr>))\n     (set_op_\\<alpha>\n       (lss_basic.dflt_oops\n        \\<lparr>set_op_isEmpty := lss_isEmpty, set_op_union := lss_union,\n           set_op_union_dj := lss_union_dj, set_op_filter := lss_filter,\n           set_op_to_list := lss_to_list,\n           set_op_from_list := list_to_lss\\<rparr>))\n     (set_op_invar\n       (lss_basic.dflt_oops\n        \\<lparr>set_op_isEmpty := lss_isEmpty, set_op_union := lss_union,\n           set_op_union_dj := lss_union_dj, set_op_filter := lss_filter,\n           set_op_to_list := lss_to_list,\n           set_op_from_list := list_to_lss\\<rparr>))\n     (set_op_\\<alpha>\n       (lss_basic.dflt_oops\n        \\<lparr>set_op_isEmpty := lss_isEmpty, set_op_union := lss_union,\n           set_op_union_dj := lss_union_dj, set_op_filter := lss_filter,\n           set_op_to_list := lss_to_list,\n           set_op_from_list := list_to_lss\\<rparr>))\n     (set_op_invar\n       (lss_basic.dflt_oops\n        \\<lparr>set_op_isEmpty := lss_isEmpty, set_op_union := lss_union,\n           set_op_union_dj := lss_union_dj, set_op_filter := lss_filter,\n           set_op_to_list := lss_to_list,\n           set_op_from_list := list_to_lss\\<rparr>))\n     (set_op_union\n       (lss_basic.dflt_oops\n        \\<lparr>set_op_isEmpty := lss_isEmpty, set_op_union := lss_union,\n           set_op_union_dj := lss_union_dj, set_op_filter := lss_filter,\n           set_op_to_list := lss_to_list,\n           set_op_from_list := list_to_lss\\<rparr>))\n 3. set_union_dj\n     (set_op_\\<alpha>\n       (lss_basic.dflt_oops\n        \\<lparr>set_op_isEmpty := lss_isEmpty, set_op_union := lss_union,\n           set_op_union_dj := lss_union_dj, set_op_filter := lss_filter,\n           set_op_to_list := lss_to_list,\n           set_op_from_list := list_to_lss\\<rparr>))\n     (set_op_invar\n       (lss_basic.dflt_oops\n        \\<lparr>set_op_isEmpty := lss_isEmpty, set_op_union := lss_union,\n           set_op_union_dj := lss_union_dj, set_op_filter := lss_filter,\n           set_op_to_list := lss_to_list,\n           set_op_from_list := list_to_lss\\<rparr>))\n     (set_op_\\<alpha>\n       (lss_basic.dflt_oops\n        \\<lparr>set_op_isEmpty := lss_isEmpty, set_op_union := lss_union,\n           set_op_union_dj := lss_union_dj, set_op_filter := lss_filter,\n           set_op_to_list := lss_to_list,\n           set_op_from_list := list_to_lss\\<rparr>))\n     (set_op_invar\n       (lss_basic.dflt_oops\n        \\<lparr>set_op_isEmpty := lss_isEmpty, set_op_union := lss_union,\n           set_op_union_dj := lss_union_dj, set_op_filter := lss_filter,\n           set_op_to_list := lss_to_list,\n           set_op_from_list := list_to_lss\\<rparr>))\n     (set_op_\\<alpha>\n       (lss_basic.dflt_oops\n        \\<lparr>set_op_isEmpty := lss_isEmpty, set_op_union := lss_union,\n           set_op_union_dj := lss_union_dj, set_op_filter := lss_filter,\n           set_op_to_list := lss_to_list,\n           set_op_from_list := list_to_lss\\<rparr>))\n     (set_op_invar\n       (lss_basic.dflt_oops\n        \\<lparr>set_op_isEmpty := lss_isEmpty, set_op_union := lss_union,\n           set_op_union_dj := lss_union_dj, set_op_filter := lss_filter,\n           set_op_to_list := lss_to_list,\n           set_op_from_list := list_to_lss\\<rparr>))\n     (set_op_union_dj\n       (lss_basic.dflt_oops\n        \\<lparr>set_op_isEmpty := lss_isEmpty, set_op_union := lss_union,\n           set_op_union_dj := lss_union_dj, set_op_filter := lss_filter,\n           set_op_to_list := lss_to_list,\n           set_op_from_list := list_to_lss\\<rparr>))\n 4. set_filter\n     (set_op_\\<alpha>\n       (lss_basic.dflt_oops\n        \\<lparr>set_op_isEmpty := lss_isEmpty, set_op_union := lss_union,\n           set_op_union_dj := lss_union_dj, set_op_filter := lss_filter,\n           set_op_to_list := lss_to_list,\n           set_op_from_list := list_to_lss\\<rparr>))\n     (set_op_invar\n       (lss_basic.dflt_oops\n        \\<lparr>set_op_isEmpty := lss_isEmpty, set_op_union := lss_union,\n           set_op_union_dj := lss_union_dj, set_op_filter := lss_filter,\n           set_op_to_list := lss_to_list,\n           set_op_from_list := list_to_lss\\<rparr>))\n     (set_op_\\<alpha>\n       (lss_basic.dflt_oops\n        \\<lparr>set_op_isEmpty := lss_isEmpty, set_op_union := lss_union,\n           set_op_union_dj := lss_union_dj, set_op_filter := lss_filter,\n           set_op_to_list := lss_to_list,\n           set_op_from_list := list_to_lss\\<rparr>))\n     (set_op_invar\n       (lss_basic.dflt_oops\n        \\<lparr>set_op_isEmpty := lss_isEmpty, set_op_union := lss_union,\n           set_op_union_dj := lss_union_dj, set_op_filter := lss_filter,\n           set_op_to_list := lss_to_list,\n           set_op_from_list := list_to_lss\\<rparr>))\n     (set_op_filter\n       (lss_basic.dflt_oops\n        \\<lparr>set_op_isEmpty := lss_isEmpty, set_op_union := lss_union,\n           set_op_union_dj := lss_union_dj, set_op_filter := lss_filter,\n           set_op_to_list := lss_to_list,\n           set_op_from_list := list_to_lss\\<rparr>))\n 5. set_to_list\n     (set_op_\\<alpha>\n       (lss_basic.dflt_oops\n        \\<lparr>set_op_isEmpty := lss_isEmpty, set_op_union := lss_union,\n           set_op_union_dj := lss_union_dj, set_op_filter := lss_filter,\n           set_op_to_list := lss_to_list,\n           set_op_from_list := list_to_lss\\<rparr>))\n     (set_op_invar\n       (lss_basic.dflt_oops\n        \\<lparr>set_op_isEmpty := lss_isEmpty, set_op_union := lss_union,\n           set_op_union_dj := lss_union_dj, set_op_filter := lss_filter,\n           set_op_to_list := lss_to_list,\n           set_op_from_list := list_to_lss\\<rparr>))\n     (set_op_to_list\n       (lss_basic.dflt_oops\n        \\<lparr>set_op_isEmpty := lss_isEmpty, set_op_union := lss_union,\n           set_op_union_dj := lss_union_dj, set_op_filter := lss_filter,\n           set_op_to_list := lss_to_list,\n           set_op_from_list := list_to_lss\\<rparr>))\n 6. list_to_set\n     (set_op_\\<alpha>\n       (lss_basic.dflt_oops\n        \\<lparr>set_op_isEmpty := lss_isEmpty, set_op_union := lss_union,\n           set_op_union_dj := lss_union_dj, set_op_filter := lss_filter,\n           set_op_to_list := lss_to_list,\n           set_op_from_list := list_to_lss\\<rparr>))\n     (set_op_invar\n       (lss_basic.dflt_oops\n        \\<lparr>set_op_isEmpty := lss_isEmpty, set_op_union := lss_union,\n           set_op_union_dj := lss_union_dj, set_op_filter := lss_filter,\n           set_op_to_list := lss_to_list,\n           set_op_from_list := list_to_lss\\<rparr>))\n     (set_op_from_list\n       (lss_basic.dflt_oops\n        \\<lparr>set_op_isEmpty := lss_isEmpty, set_op_union := lss_union,\n           set_op_union_dj := lss_union_dj, set_op_filter := lss_filter,\n           set_op_to_list := lss_to_list,\n           set_op_from_list := list_to_lss\\<rparr>))", "apply (simp_all add: icf_rec_unf\n      lss_isEmpty_impl lss_union_impl lss_union_dj_impl lss_to_list_impl\n      lss_filter_impl\n      list_to_lss_impl\n    )"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  StdOSet lss_ops\n\ngoal:\nNo subgoals!", "qed"], ["", "setup Locale_Code.close_block"], ["", "setup \\<open>ICF_Tools.revert_abbrevs \"lss\"\\<close>"], ["", "lemma pi_lss[proper_it]: \n  \"proper_it' lss_iteratei lss_iteratei\""], ["proof (prove)\ngoal (1 subgoal):\n 1. proper_it' lss_iteratei lss_iteratei", "apply (rule proper_it'I)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>s. proper_it (lss_iteratei s) (lss_iteratei s)", "unfolding lss_iteratei_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>s. proper_it (foldli s) (foldli s)", "by (intro icf_proper_iteratorI)"], ["", "interpretation pi_lss: proper_it_loc lss_iteratei lss_iteratei"], ["proof (prove)\ngoal (1 subgoal):\n 1. proper_it_loc lss_iteratei lss_iteratei", "apply unfold_locales"], ["proof (prove)\ngoal (1 subgoal):\n 1. proper_it' lss_iteratei lss_iteratei", "by (rule pi_lss)"], ["", "definition test_codegen where \"test_codegen \\<equiv> (\n  lss.empty,\n  lss.memb,\n  lss.ins,\n  lss.delete,\n  lss.list_it,\n  lss.sng,\n  lss.isEmpty,\n  lss.isSng,\n  lss.ball,\n  lss.bex,\n  lss.size,\n  lss.size_abort,\n  lss.union,\n  lss.union_dj,\n  lss.diff,\n  lss.filter,\n  lss.inter,\n  lss.subset,\n  lss.equal,\n  lss.disjoint,\n  lss.disjoint_witness,\n  lss.sel,\n  lss.to_list,\n  lss.from_list\n)\""], ["", "export_code test_codegen checking SML"], ["", "end"]]}