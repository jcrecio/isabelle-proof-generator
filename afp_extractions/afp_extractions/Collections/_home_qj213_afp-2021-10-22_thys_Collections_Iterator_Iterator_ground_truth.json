{"file_name": "/home/qj213/afp-2021-10-22/thys/Collections/Iterator/Iterator.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Collections", "problem_names": ["lemma proper_it_to_list_opt[refine_transfer_post_subst]:\n    assumes PR: \"proper_it' it it'\"\n    shows \"foldli o it_to_list it \\<equiv> it'\"", "lemma iterator_cnv_to_comp[refine_transfer_post_simp]:\n    \"foldli (it_to_list it x) = (foldli o it_to_list it) x\""], "translations": [["", "lemma proper_it_to_list_opt[refine_transfer_post_subst]:\n    assumes PR: \"proper_it' it it'\"\n    shows \"foldli o it_to_list it \\<equiv> it'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (foldli \\<circ>\\<circ> it_to_list) it \\<equiv> it'", "proof (rule eq_reflection, intro ext)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x xa xb xc.\n       (foldli \\<circ>\\<circ> it_to_list) it x xa xb xc = it' x xa xb xc", "fix s c f \\<sigma>"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x xa xb xc.\n       (foldli \\<circ>\\<circ> it_to_list) it x xa xb xc = it' x xa xb xc", "obtain l where \"it s = foldli l\" and \"it' s = foldli l\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>l.\n        \\<lbrakk>it s = foldli l; it' s = foldli l\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (rule proper_itE[OF PR[THEN proper_it'D[where s=s]]])"], ["proof (state)\nthis:\n  it s = foldli l\n  it' s = foldli l\n\ngoal (1 subgoal):\n 1. \\<And>x xa xb xc.\n       (foldli \\<circ>\\<circ> it_to_list) it x xa xb xc = it' x xa xb xc", "thus \"(foldli o it_to_list it) s c f \\<sigma> = it' s c f \\<sigma>\""], ["proof (prove)\nusing this:\n  it s = foldli l\n  it' s = foldli l\n\ngoal (1 subgoal):\n 1. (foldli \\<circ>\\<circ> it_to_list) it s c f \\<sigma> =\n    it' s c f \\<sigma>", "by (simp add: comp_def it_to_list_def)"], ["proof (state)\nthis:\n  (foldli \\<circ>\\<circ> it_to_list) it s c f \\<sigma> = it' s c f \\<sigma>\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma iterator_cnv_to_comp[refine_transfer_post_simp]:\n    \"foldli (it_to_list it x) = (foldli o it_to_list it) x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. foldli (it_to_list it x) = (foldli \\<circ>\\<circ> it_to_list) it x", "by auto"], ["", "declare idx_iteratei_eq_foldli[autoref_rules]"], ["", "end"]]}