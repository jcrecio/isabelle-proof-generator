{"file_name": "/home/qj213/afp-2021-10-22/thys/Collections/ICF/impl/ListMapImpl.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Collections", "problem_names": ["lemma pi_lm[proper_it]: \n  \"proper_it' Assoc_List.iteratei Assoc_List.iteratei\"", "lemma pi_lm'[proper_it]: \n  \"proper_it' lm.iteratei lm.iteratei\""], "translations": [["", "lemma pi_lm[proper_it]: \n  \"proper_it' Assoc_List.iteratei Assoc_List.iteratei\""], ["proof (prove)\ngoal (1 subgoal):\n 1. proper_it' Assoc_List.iteratei Assoc_List.iteratei", "unfolding Assoc_List.iteratei_def[abs_def]"], ["proof (prove)\ngoal (1 subgoal):\n 1. proper_it' (\\<lambda>al. foldli (assoc_list.impl_of al))\n     (\\<lambda>al. foldli (assoc_list.impl_of al))", "by (intro icf_proper_iteratorI proper_it'I)"], ["", "interpretation pi_lm: proper_it_loc Assoc_List.iteratei Assoc_List.iteratei"], ["proof (prove)\ngoal (1 subgoal):\n 1. proper_it_loc Assoc_List.iteratei Assoc_List.iteratei", "apply unfold_locales"], ["proof (prove)\ngoal (1 subgoal):\n 1. proper_it' Assoc_List.iteratei Assoc_List.iteratei", "apply (rule pi_lm)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma pi_lm'[proper_it]: \n  \"proper_it' lm.iteratei lm.iteratei\""], ["proof (prove)\ngoal (1 subgoal):\n 1. proper_it' lm.iteratei lm.iteratei", "unfolding lm.iteratei_def[abs_def]"], ["proof (prove)\ngoal (1 subgoal):\n 1. proper_it' (\\<lambda>S. it_to_it (lm.list_it S))\n     (\\<lambda>S. it_to_it (lm.list_it S))", "by (intro icf_proper_iteratorI proper_it'I)"], ["", "interpretation pi_lm': proper_it_loc lm.iteratei lm.iteratei"], ["proof (prove)\ngoal (1 subgoal):\n 1. proper_it_loc lm.iteratei lm.iteratei", "apply unfold_locales"], ["proof (prove)\ngoal (1 subgoal):\n 1. proper_it' lm.iteratei lm.iteratei", "apply (rule pi_lm')"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "text \\<open>Code generator test\\<close>"], ["", "definition \"test_codegen \\<equiv> (\n  lm.add ,\n  lm.add_dj ,\n  lm.ball ,\n  lm.bex ,\n  lm.delete ,\n  lm.empty ,\n  lm.isEmpty ,\n  lm.isSng ,\n  lm.iterate ,\n  lm.iteratei ,\n  lm.list_it ,\n  lm.lookup ,\n  lm.restrict ,\n  lm.sel ,\n  lm.size ,\n  lm.size_abort ,\n  lm.sng ,\n  lm.to_list ,\n  lm.to_map ,\n  lm.update ,\n  lm.update_dj)\""], ["", "export_code test_codegen checking SML"], ["", "end"]]}