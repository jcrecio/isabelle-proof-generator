{"file_name": "/home/qj213/afp-2021-10-22/thys/Collections/Iterator/It_to_It.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Collections", "problem_names": ["lemma proper_it_fold: \n    \"proper_it it it' \\<Longrightarrow> foldli (it (\\<lambda>_. True) (\\<lambda>x l. l@[x]) []) = it'\"", "lemma proper_it_unfold: \n    \"proper_it it it' \\<Longrightarrow> it' = foldli (it (\\<lambda>_. True) (\\<lambda>x l. l@[x]) [])\"", "lemma pi_it_to_it[icf_proper_iteratorI]: \"proper_it (it_to_it I) (it_to_it I)\"", "lemma it_to_it_fold: \"proper_it it (it'::('x,'\\<sigma>) set_iterator) \n    \\<Longrightarrow> it_to_it it = it'\"", "lemma it_to_it_map_fold:\n    assumes P: \"proper_it it it'\"\n    shows \"it_to_it (\\<lambda>c f. it c (f \\<circ> f')) = (\\<lambda>c f. it' c (f o f'))\"", "lemma it_to_it_fold': \"proper_it' it (it'::'s \\<Rightarrow> ('x,'\\<sigma>) set_iterator) \n    \\<Longrightarrow> it_to_it (it s) = (it' s)\"", "lemma it_to_it_map_fold':\n    assumes P: \"proper_it' it it'\"\n    shows \"it_to_it (\\<lambda>c f. it s c (f \\<circ> f')) = (\\<lambda>c f. it' s c (f o f'))\"", "lemma proper: \"proper_it (it s) (it' s)\"", "lemmas it_to_it_code_unfold[code_unfold] = it_to_it_fold[OF proper]", "lemma it_to_it_genord_correct: \n    assumes \"set_iterator_genord (it::('x,'x list) set_iterator) S R\" \n    shows \"set_iterator_genord ((it_to_it it)::('x,'\\<sigma>) set_iterator) S R\"", "lemma it_to_it_linord_correct: \n    assumes \"set_iterator_linord (it::('x::linorder,'x list) set_iterator) S\" \n    shows \"set_iterator_linord ((it_to_it it)::('x,'\\<sigma>) set_iterator) S\"", "lemma it_to_it_rev_linord_correct: \n    assumes \"set_iterator_rev_linord (it::('x::linorder,'x list) set_iterator) S\"\n    shows \"set_iterator_rev_linord ((it_to_it it)::('x,'\\<sigma>) set_iterator) S\"", "lemma it_to_it_correct: \n    assumes \"set_iterator (it::('x,'x list) set_iterator) S\" \n    shows \"set_iterator ((it_to_it it)::('x,'\\<sigma>) set_iterator) S\"", "lemma it_to_it_map_genord_correct:\n    assumes \"map_iterator_genord (it::('u,'v,('u\\<times>'v) list) map_iterator) S R\" \n    shows \"map_iterator_genord ((it_to_it it)::('u,'v,'\\<sigma>) map_iterator) S R\"", "lemma it_to_it_map_linord_correct:\n    assumes \"map_iterator_linord (it::('u::linorder,'v,('u\\<times>'v) list) map_iterator) S\" \n    shows \"map_iterator_linord ((it_to_it it)::('u,'v,'\\<sigma>) map_iterator) S\"", "lemma it_to_it_map_rev_linord_correct:\n    assumes \n      \"map_iterator_rev_linord (it::('u::linorder,'v,('u\\<times>'v) list) map_iterator) S\" \n    shows \"map_iterator_rev_linord ((it_to_it it)::('u,'v,'\\<sigma>) map_iterator) S\"", "lemma it_to_it_map_correct:\n    assumes \"map_iterator (it::('u,'v,('u\\<times>'v) list) map_iterator) S\" \n    shows \"map_iterator ((it_to_it it)::('u,'v,'\\<sigma>) map_iterator) S\""], "translations": [["", "lemma proper_it_fold: \n    \"proper_it it it' \\<Longrightarrow> foldli (it (\\<lambda>_. True) (\\<lambda>x l. l@[x]) []) = it'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. proper_it it it' \\<Longrightarrow>\n    foldli (it (\\<lambda>_. True) (\\<lambda>x l. l @ [x]) []) = it'", "unfolding proper_it_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>l. it = foldli l \\<and> it' = foldli l \\<Longrightarrow>\n    foldli (it (\\<lambda>_. True) (\\<lambda>x l. l @ [x]) []) = it'", "by auto"], ["", "lemma proper_it_unfold: \n    \"proper_it it it' \\<Longrightarrow> it' = foldli (it (\\<lambda>_. True) (\\<lambda>x l. l@[x]) [])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. proper_it it it' \\<Longrightarrow>\n    it' = foldli (it (\\<lambda>_. True) (\\<lambda>x l. l @ [x]) [])", "unfolding proper_it_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>l. it = foldli l \\<and> it' = foldli l \\<Longrightarrow>\n    it' = foldli (it (\\<lambda>_. True) (\\<lambda>x l. l @ [x]) [])", "by auto"], ["", "text \\<open>The following constant converts an iterator over list-state\n    to an iterator over arbitrary state\\<close>"], ["", "definition it_to_it :: \"('x,'x list) set_iterator \\<Rightarrow> ('x,'\\<sigma>) set_iterator\"\n    where [code del]: \"it_to_it it \n    \\<equiv> (foldli (it (\\<lambda>_. True) (\\<lambda>x l. l@[x]) []))\""], ["", "lemma pi_it_to_it[icf_proper_iteratorI]: \"proper_it (it_to_it I) (it_to_it I)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. proper_it (it_to_it I) (it_to_it I)", "unfolding it_to_it_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. proper_it (foldli (I (\\<lambda>_. True) (\\<lambda>x l. l @ [x]) []))\n     (foldli (I (\\<lambda>_. True) (\\<lambda>x l. l @ [x]) []))", "by (rule pi_foldli)"], ["", "text \\<open>In case of a proper iterator, it is equivalent to direct iteration\\<close>"], ["", "lemma it_to_it_fold: \"proper_it it (it'::('x,'\\<sigma>) set_iterator) \n    \\<Longrightarrow> it_to_it it = it'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. proper_it it it' \\<Longrightarrow> it_to_it it = it'", "unfolding it_to_it_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. proper_it it it' \\<Longrightarrow>\n    foldli (it (\\<lambda>_. True) (\\<lambda>x l. l @ [x]) []) = it'", "by (simp add: proper_it_fold)"], ["", "lemma it_to_it_map_fold:\n    assumes P: \"proper_it it it'\"\n    shows \"it_to_it (\\<lambda>c f. it c (f \\<circ> f')) = (\\<lambda>c f. it' c (f o f'))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. it_to_it (\\<lambda>c f. it c (f \\<circ> f')) =\n    (\\<lambda>c f. it' c (f \\<circ> f'))", "apply (rule proper_itE[OF P])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>l.\n       \\<lbrakk>it = foldli l; it' = foldli l\\<rbrakk>\n       \\<Longrightarrow> it_to_it (\\<lambda>c f. it c (f \\<circ> f')) =\n                         (\\<lambda>c f. it' c (f \\<circ> f'))", "unfolding it_to_it_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>l.\n       \\<lbrakk>it = foldli l; it' = foldli l\\<rbrakk>\n       \\<Longrightarrow> foldli\n                          (it (\\<lambda>_. True)\n                            ((\\<lambda>x l. l @ [x]) \\<circ> f') []) =\n                         (\\<lambda>c f. it' c (f \\<circ> f'))", "apply (intro ext)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>l c f x.\n       \\<lbrakk>it = foldli l; it' = foldli l\\<rbrakk>\n       \\<Longrightarrow> foldli\n                          (it (\\<lambda>_. True)\n                            ((\\<lambda>x l. l @ [x]) \\<circ> f') [])\n                          c f x =\n                         it' c (f \\<circ> f') x", "apply (simp add: foldli_foldl map_by_foldl foldli_map)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma it_to_it_fold': \"proper_it' it (it'::'s \\<Rightarrow> ('x,'\\<sigma>) set_iterator) \n    \\<Longrightarrow> it_to_it (it s) = (it' s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. proper_it' it it' \\<Longrightarrow> it_to_it (it s) = it' s", "by (drule proper_it'D) (rule it_to_it_fold)"], ["", "lemma it_to_it_map_fold':\n    assumes P: \"proper_it' it it'\"\n    shows \"it_to_it (\\<lambda>c f. it s c (f \\<circ> f')) = (\\<lambda>c f. it' s c (f o f'))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. it_to_it (\\<lambda>c f. it s c (f \\<circ> f')) =\n    (\\<lambda>c f. it' s c (f \\<circ> f'))", "using P[THEN proper_it'D]"], ["proof (prove)\nusing this:\n  proper_it (it ?s) (it' ?s)\n\ngoal (1 subgoal):\n 1. it_to_it (\\<lambda>c f. it s c (f \\<circ> f')) =\n    (\\<lambda>c f. it' s c (f \\<circ> f'))", "by (rule it_to_it_map_fold)"], ["", "text \\<open>This locale wraps up the setup of a proper iterator for use\n    with \\<open>it_to_it\\<close>.\\<close>"], ["", "locale proper_it_loc =\n    fixes it :: \"'s \\<Rightarrow> ('x,'x list) set_iterator\"\n    and it' :: \"'s \\<Rightarrow> ('x,'\\<sigma>) set_iterator\"\n    assumes proper': \"proper_it' it it'\"\n  begin"], ["", "lemma proper: \"proper_it (it s) (it' s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. proper_it (it s) (it' s)", "using proper'"], ["proof (prove)\nusing this:\n  proper_it' it it'\n\ngoal (1 subgoal):\n 1. proper_it (it s) (it' s)", "by (rule proper_it'D)"], ["", "lemmas it_to_it_code_unfold[code_unfold] = it_to_it_fold[OF proper]"], ["", "end"], ["", "subsubsection \\<open>Correctness\\<close>"], ["", "text \\<open>The polymorphic iterator is a valid iterator again.\\<close>"], ["", "lemma it_to_it_genord_correct: \n    assumes \"set_iterator_genord (it::('x,'x list) set_iterator) S R\" \n    shows \"set_iterator_genord ((it_to_it it)::('x,'\\<sigma>) set_iterator) S R\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set_iterator_genord (it_to_it it) S R", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. set_iterator_genord (it_to_it it) S R", "interpret set_iterator_genord it S R"], ["proof (prove)\ngoal (1 subgoal):\n 1. set_iterator_genord it S R", "by fact"], ["proof (state)\ngoal (1 subgoal):\n 1. set_iterator_genord (it_to_it it) S R", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. set_iterator_genord (it_to_it it) S R", "apply (unfold_locales)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>l0.\n       distinct l0 \\<and>\n       S = set l0 \\<and> sorted_wrt R l0 \\<and> it_to_it it = foldli l0", "unfolding it_to_it_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>l0.\n       distinct l0 \\<and>\n       S = set l0 \\<and>\n       sorted_wrt R l0 \\<and>\n       foldli (it (\\<lambda>_. True) (\\<lambda>x l. l @ [x]) []) = foldli l0", "using foldli_transform"], ["proof (prove)\nusing this:\n  \\<exists>l0.\n     distinct l0 \\<and>\n     S = set l0 \\<and> sorted_wrt R l0 \\<and> it = foldli l0\n\ngoal (1 subgoal):\n 1. \\<exists>l0.\n       distinct l0 \\<and>\n       S = set l0 \\<and>\n       sorted_wrt R l0 \\<and>\n       foldli (it (\\<lambda>_. True) (\\<lambda>x l. l @ [x]) []) = foldli l0", "by auto"], ["proof (state)\nthis:\n  set_iterator_genord (it_to_it it) S R\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma it_to_it_linord_correct: \n    assumes \"set_iterator_linord (it::('x::linorder,'x list) set_iterator) S\" \n    shows \"set_iterator_linord ((it_to_it it)::('x,'\\<sigma>) set_iterator) S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set_iterator_linord (it_to_it it) S", "using assms"], ["proof (prove)\nusing this:\n  set_iterator_linord it S\n\ngoal (1 subgoal):\n 1. set_iterator_linord (it_to_it it) S", "unfolding set_iterator_linord_def"], ["proof (prove)\nusing this:\n  set_iterator_genord it S (\\<le>)\n\ngoal (1 subgoal):\n 1. set_iterator_genord (it_to_it it) S (\\<le>)", "by (rule it_to_it_genord_correct)"], ["", "lemma it_to_it_rev_linord_correct: \n    assumes \"set_iterator_rev_linord (it::('x::linorder,'x list) set_iterator) S\"\n    shows \"set_iterator_rev_linord ((it_to_it it)::('x,'\\<sigma>) set_iterator) S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set_iterator_rev_linord (it_to_it it) S", "using assms"], ["proof (prove)\nusing this:\n  set_iterator_rev_linord it S\n\ngoal (1 subgoal):\n 1. set_iterator_rev_linord (it_to_it it) S", "unfolding set_iterator_rev_linord_def"], ["proof (prove)\nusing this:\n  set_iterator_genord it S (\\<lambda>x y. y \\<le> x)\n\ngoal (1 subgoal):\n 1. set_iterator_genord (it_to_it it) S (\\<lambda>x y. y \\<le> x)", "by (rule it_to_it_genord_correct)"], ["", "lemma it_to_it_correct: \n    assumes \"set_iterator (it::('x,'x list) set_iterator) S\" \n    shows \"set_iterator ((it_to_it it)::('x,'\\<sigma>) set_iterator) S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set_iterator (it_to_it it) S", "using assms"], ["proof (prove)\nusing this:\n  set_iterator it S\n\ngoal (1 subgoal):\n 1. set_iterator (it_to_it it) S", "unfolding set_iterator_def"], ["proof (prove)\nusing this:\n  set_iterator_genord it S (\\<lambda>_ _. True)\n\ngoal (1 subgoal):\n 1. set_iterator_genord (it_to_it it) S (\\<lambda>_ _. True)", "by (rule it_to_it_genord_correct)"], ["", "lemma it_to_it_map_genord_correct:\n    assumes \"map_iterator_genord (it::('u,'v,('u\\<times>'v) list) map_iterator) S R\" \n    shows \"map_iterator_genord ((it_to_it it)::('u,'v,'\\<sigma>) map_iterator) S R\""], ["proof (prove)\ngoal (1 subgoal):\n 1. map_iterator_genord (it_to_it it) S R", "using assms"], ["proof (prove)\nusing this:\n  map_iterator_genord it S R\n\ngoal (1 subgoal):\n 1. map_iterator_genord (it_to_it it) S R", "by (rule it_to_it_genord_correct)"], ["", "lemma it_to_it_map_linord_correct:\n    assumes \"map_iterator_linord (it::('u::linorder,'v,('u\\<times>'v) list) map_iterator) S\" \n    shows \"map_iterator_linord ((it_to_it it)::('u,'v,'\\<sigma>) map_iterator) S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. map_iterator_linord (it_to_it it) S", "using assms"], ["proof (prove)\nusing this:\n  map_iterator_linord it S\n\ngoal (1 subgoal):\n 1. map_iterator_linord (it_to_it it) S", "unfolding set_iterator_map_linord_def"], ["proof (prove)\nusing this:\n  map_iterator_genord it S (\\<lambda>(k, uu_) (k', uu_). k \\<le> k')\n\ngoal (1 subgoal):\n 1. map_iterator_genord (it_to_it it) S\n     (\\<lambda>(k, uu_) (k', uu_). k \\<le> k')", "by (rule it_to_it_genord_correct)"], ["", "lemma it_to_it_map_rev_linord_correct:\n    assumes \n      \"map_iterator_rev_linord (it::('u::linorder,'v,('u\\<times>'v) list) map_iterator) S\" \n    shows \"map_iterator_rev_linord ((it_to_it it)::('u,'v,'\\<sigma>) map_iterator) S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. map_iterator_rev_linord (it_to_it it) S", "using assms"], ["proof (prove)\nusing this:\n  map_iterator_rev_linord it S\n\ngoal (1 subgoal):\n 1. map_iterator_rev_linord (it_to_it it) S", "unfolding set_iterator_map_rev_linord_def"], ["proof (prove)\nusing this:\n  map_iterator_genord it S (\\<lambda>(k, uu_) (k', uu_). k' \\<le> k)\n\ngoal (1 subgoal):\n 1. map_iterator_genord (it_to_it it) S\n     (\\<lambda>(k, uu_) (k', uu_). k' \\<le> k)", "by (rule it_to_it_genord_correct)"], ["", "lemma it_to_it_map_correct:\n    assumes \"map_iterator (it::('u,'v,('u\\<times>'v) list) map_iterator) S\" \n    shows \"map_iterator ((it_to_it it)::('u,'v,'\\<sigma>) map_iterator) S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. map_iterator (it_to_it it) S", "using assms"], ["proof (prove)\nusing this:\n  map_iterator it S\n\ngoal (1 subgoal):\n 1. map_iterator (it_to_it it) S", "by (rule it_to_it_correct)"], ["", "end"]]}