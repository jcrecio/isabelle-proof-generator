{"file_name": "/home/qj213/afp-2021-10-22/thys/Collections/GenCF/Intf/Intf_Comp.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Collections", "problem_names": ["lemmas [autoref_rel_intf] = REL_INTFI[of comp_res_rel i_comp_res]", "lemma eq_sym: \"\\<lbrakk>x\\<in>D; y\\<in>D\\<rbrakk> \\<Longrightarrow> cmp x y = EQUAL \\<Longrightarrow> cmp y x = EQUAL\"", "lemma linorder_to_class:\n  assumes \"linorder cmp\" \n  assumes [simp]: \"\\<And>x y. cmp x y = EQUAL \\<Longrightarrow> x=y\"\n  shows \"class.linorder (comp2le cmp) (comp2lt cmp)\"", "lemma (in linorder) class_to_linorder:\n  \"linorder (dflt_cmp (\\<le>) (<))\"", "lemma restrict_linorder: \"\\<lbrakk>linorder_on D cmp ; D'\\<subseteq>D\\<rbrakk> \\<Longrightarrow> linorder_on D' cmp\"", "lemma img_linorder[intro?]: \n  assumes LO: \"linorder_on (f`D) cmp\"\n  shows \"linorder_on D (cmp_img f cmp)\"", "lemma UnE': \n  assumes \"x\\<in>A\\<union>B\"\n  obtains \"x\\<in>A\" | \"x\\<notin>A\" \"x\\<in>B\"", "lemma combine_linorder[intro?]:\n  assumes \"linorder_on D1 cmp1\"\n  assumes \"linorder_on D2 cmp2\"\n  assumes \"D = D1\\<union>D2\"\n  shows \"linorder_on D (cmp_combine D1 cmp1 D2 cmp2)\"", "lemma univ_wo: \"well_order_on UNIV univ_order_rel\"", "lemma univ_linorder[intro?]: \"linorder univ_cmp\"", "lemma extend_linorder[intro?]: \n  \"linorder_on D cmp \\<Longrightarrow> linorder (cmp_extend D cmp)\"", "lemma cmp_lex_alt: \"cmp_lex cmp l m = cmp_lex' cmp l m\"", "lemma (in linorder_on) lex_linorder[intro?]:\n  \"linorder_on (lists D) (cmp_lex cmp)\"", "lemma cmp_prod_alt: \"cmp_prod = (\\<lambda>cmp1 cmp2 (a1,a2) (b1,b2). (\n    case cmp1 a1 b1 of\n      LESS \\<Rightarrow> LESS\n    | EQUAL \\<Rightarrow> cmp2 a2 b2\n    | GREATER \\<Rightarrow> GREATER))\"", "lemma prod_linorder[intro?]: \n  assumes A: \"linorder_on A cmp1\" \n  assumes B: \"linorder_on B cmp2\" \n  shows \"linorder_on (A\\<times>B) (cmp_prod cmp1 cmp2)\"", "lemma set_to_map_set_is_map_of: \n  \"distinct (map fst l) \\<Longrightarrow> set_to_map (set l) = map_of l\"", "lemma sorted_list_of_set_eq_nil[simp]:\n    assumes \"finite A\" \n    shows \"sorted_list_of_set A = [] \\<longleftrightarrow> A={}\"", "lemma sorted_list_of_set_eq_nil2[simp]:\n    assumes \"finite A\" \n    shows \"[] = sorted_list_of_set A \\<longleftrightarrow> A={}\"", "lemma set_insort[simp]: \"set (insort x l) = insert x (set l)\"", "lemma sorted_list_of_set_inj_aux:\n    fixes A B :: \"'a set\"\n    assumes \"finite A\" \n    assumes \"finite B\" \n    assumes \"sorted_list_of_set A = sorted_list_of_set B\"\n    shows \"A=B\"", "lemma sorted_list_of_set_inj: \"inj_on sorted_list_of_set (Collect finite)\"", "lemma the_sorted_list_of_set:\n    assumes \"distinct l\"\n    assumes \"sorted l\"\n    shows \"sorted_list_of_set (set l) = l\"", "lemma the_sorted_list_of_map:\n    assumes \"distinct (map fst l)\"\n    assumes \"sorted (map fst l)\"\n    shows \"sorted_list_of_map (map_of l) = l\"", "lemma map_of_sorted_list_of_map[simp]:\n    assumes FIN: \"finite (dom m)\" \n    shows \"map_of (sorted_list_of_map m) = m\"", "lemma sorted_list_of_map_inj_aux:\n    fixes A B :: \"'a\\<rightharpoonup>'b\"\n    assumes [simp]: \"finite (dom A)\" \n    assumes [simp]: \"finite (dom B)\" \n    assumes E: \"sorted_list_of_map A = sorted_list_of_map B\"\n    shows \"A=B\"", "lemma sorted_list_of_map_inj: \n    \"inj_on sorted_list_of_map (Collect (finite o dom))\"", "lemma set_ord_linear[intro?]: \n  \"linorder cmp \\<Longrightarrow> linorder (cmp_set cmp)\"", "lemma map_to_set_inj[intro!]: \"inj map_to_set\"", "lemma map_ord_linear[intro?]: \n  assumes A: \"linorder cmpk\" \n  assumes B: \"linorder cmpv\" \n  shows \"linorder (cmp_map cmpk cmpv)\"", "lemma cmp_eq[simp]: \"\\<lbrakk>x\\<in>D; y\\<in>D\\<rbrakk> \\<Longrightarrow> cmp x y = EQUAL \\<longleftrightarrow> x = y\"", "lemma dflt_cmp_2inv[simp]: \n  \"dflt_cmp (comp2le cmp) (comp2lt cmp) = cmp\"", "lemma (in linorder) dflt_cmp_inv2[simp]:\n  shows \n  \"(comp2le (dflt_cmp (\\<le>) (<)))= (\\<le>)\"\n  \"(comp2lt (dflt_cmp (\\<le>) (<)))= (<)\"", "lemma eq_linorder_class_conv:\n  \"eq_linorder cmp \\<longleftrightarrow> class.linorder (comp2le cmp) (comp2lt cmp)\"", "lemma (in linorder) class_to_eq_linorder:\n  \"eq_linorder (dflt_cmp (\\<le>) (<))\"", "lemma eq_linorder_comp2eq_eq: \n  assumes \"eq_linorder cmp\"\n  shows \"comp2eq cmp = (=)\"", "lemma restrict_eq_linorder: \n  assumes \"eq_linorder_on D cmp\" \n  assumes S: \"D'\\<subseteq>D\" \n  shows \"eq_linorder_on D' cmp\"", "lemma combine_eq_linorder[intro?]:\n  assumes A: \"eq_linorder_on D1 cmp1\"\n  assumes B: \"eq_linorder_on D2 cmp2\"\n  assumes EQ: \"D=D1\\<union>D2\"\n  shows \"eq_linorder_on D (cmp_combine D1 cmp1 D2 cmp2)\"", "lemma img_eq_linorder[intro?]:\n  assumes A: \"eq_linorder_on (f`D) cmp\"\n  assumes INJ: \"inj_on f D\"\n  shows \"eq_linorder_on D (cmp_img f cmp)\"", "lemma univ_eq_linorder[intro?]:\n  shows \"eq_linorder univ_cmp\"", "lemma extend_eq_linorder[intro?]:\n  assumes \"eq_linorder_on D cmp\"\n  shows \"eq_linorder (cmp_extend D cmp)\"", "lemma lex_eq_linorder[intro?]:\n  assumes \"eq_linorder_on D cmp\"\n  shows \"eq_linorder_on (lists D) (cmp_lex cmp)\"", "lemma prod_eq_linorder[intro?]:\n  assumes \"eq_linorder_on D1 cmp1\"\n  assumes \"eq_linorder_on D2 cmp2\"\n  shows \"eq_linorder_on (D1\\<times>D2) (cmp_prod cmp1 cmp2)\"", "lemma set_ord_eq_linorder[intro?]: \n  \"eq_linorder cmp \\<Longrightarrow> eq_linorder (cmp_set cmp)\"", "lemma map_ord_eq_linorder[intro?]: \n  \"\\<lbrakk>eq_linorder cmpk; eq_linorder cmpv\\<rbrakk> \\<Longrightarrow> eq_linorder (cmp_map cmpk cmpv)\"", "lemma cmp_unit_eq_linorder:\n  \"eq_linorder cmp_unit\"", "lemma param_cmp_extend[param]:\n  assumes \"(cmp,cmp')\\<in>R \\<rightarrow> R \\<rightarrow> Id\"\n  assumes \"Range R \\<subseteq> D\"\n  shows \"(cmp,cmp_extend D cmp') \\<in> R \\<rightarrow> R \\<rightarrow> Id\"", "lemma param_cmp_img[param]: \n  \"(cmp_img,cmp_img) \\<in> (Ra\\<rightarrow>Rb) \\<rightarrow> (Rb\\<rightarrow>Rb\\<rightarrow>Rc) \\<rightarrow> Ra \\<rightarrow> Ra \\<rightarrow> Rc\"", "lemma param_comp_res[param]:\n  \"(LESS,LESS)\\<in>Id\"\n  \"(EQUAL,EQUAL)\\<in>Id\"\n  \"(GREATER,GREATER)\\<in>Id\"\n  \"(case_comp_res,case_comp_res)\\<in>Ra\\<rightarrow>Ra\\<rightarrow>Ra\\<rightarrow>Id\\<rightarrow>Ra\"", "lemma param_cmp_lex[param]:\n  \"(cmp_lex,cmp_lex)\\<in>(Ra\\<rightarrow>Rb\\<rightarrow>Id)\\<rightarrow>\\<langle>Ra\\<rangle>list_rel\\<rightarrow>\\<langle>Rb\\<rangle>list_rel\\<rightarrow>Id\"", "lemma param_cmp_prod[param]:\n  \"(cmp_prod,cmp_prod)\\<in>\n  (Ra\\<rightarrow>Rb\\<rightarrow>Id)\\<rightarrow>(Rc\\<rightarrow>Rd\\<rightarrow>Id)\\<rightarrow>\\<langle>Ra,Rc\\<rangle>prod_rel\\<rightarrow>\\<langle>Rb,Rd\\<rangle>prod_rel\\<rightarrow>Id\"", "lemma param_cmp_unit[param]: \n  \"(cmp_unit,cmp_unit)\\<in>Id\\<rightarrow>Id\\<rightarrow>Id\"", "lemma param_comp2eq[param]: \"(comp2eq,comp2eq)\\<in>(R\\<rightarrow>R\\<rightarrow>Id)\\<rightarrow>R\\<rightarrow>R\\<rightarrow>Id\"", "lemma cmp_combine_paramD:\n  assumes \"(cmp,cmp_combine D1 cmp1 D2 cmp2)\\<in>R\\<rightarrow>R\\<rightarrow>Id\"\n  assumes \"Range R \\<subseteq> D1\"\n  shows \"(cmp,cmp1)\\<in>R\\<rightarrow>R\\<rightarrow>Id\"", "lemma cmp_extend_paramD:\n  assumes \"(cmp,cmp_extend D cmp')\\<in>R\\<rightarrow>R\\<rightarrow>Id\"\n  assumes \"Range R \\<subseteq> D\"\n  shows \"(cmp,cmp')\\<in>R\\<rightarrow>R\\<rightarrow>Id\"", "lemma [autoref_post_simps]: \"comp2eq (dflt_cmp (\\<le>) ((<)::_::linorder\\<Rightarrow>_)) = (=)\""], "translations": [["", "lemmas [autoref_rel_intf] = REL_INTFI[of comp_res_rel i_comp_res]"], ["", "definition \"comp2le cmp a b \\<equiv> \n  case cmp a b of LESS \\<Rightarrow> True | EQUAL \\<Rightarrow> True | GREATER \\<Rightarrow> False\""], ["", "definition \"comp2lt cmp a b \\<equiv> \n  case cmp a b of LESS \\<Rightarrow> True | EQUAL \\<Rightarrow> False | GREATER \\<Rightarrow> False\""], ["", "definition \"comp2eq cmp a b \\<equiv> \n  case cmp a b of LESS \\<Rightarrow> False | EQUAL \\<Rightarrow> True | GREATER \\<Rightarrow> False\""], ["", "locale linorder_on =\n  fixes D :: \"'a set\"\n  fixes cmp :: \"'a \\<Rightarrow> 'a \\<Rightarrow> comp_res\"\n  assumes lt_eq: \"\\<lbrakk>x\\<in>D; y\\<in>D\\<rbrakk> \\<Longrightarrow> cmp x y = LESS \\<longleftrightarrow> (cmp y x = GREATER)\"\n  assumes refl[simp, intro!]: \"x\\<in>D \\<Longrightarrow> cmp x x = EQUAL\"\n  assumes trans[trans]: \n    \"\\<lbrakk> x\\<in>D; y\\<in>D; z\\<in>D; cmp x y = LESS; cmp y z = LESS\\<rbrakk> \\<Longrightarrow> cmp x z = LESS\"\n    \"\\<lbrakk> x\\<in>D; y\\<in>D; z\\<in>D; cmp x y = LESS; cmp y z = EQUAL\\<rbrakk> \\<Longrightarrow> cmp x z = LESS\"\n    \"\\<lbrakk> x\\<in>D; y\\<in>D; z\\<in>D; cmp x y = EQUAL; cmp y z = LESS\\<rbrakk> \\<Longrightarrow> cmp x z = LESS\"\n    \"\\<lbrakk> x\\<in>D; y\\<in>D; z\\<in>D; cmp x y = EQUAL; cmp y z = EQUAL\\<rbrakk> \\<Longrightarrow> cmp x z = EQUAL\"\nbegin"], ["", "abbreviation \"le \\<equiv> comp2le cmp\""], ["", "abbreviation \"lt \\<equiv> comp2lt cmp\""], ["", "lemma eq_sym: \"\\<lbrakk>x\\<in>D; y\\<in>D\\<rbrakk> \\<Longrightarrow> cmp x y = EQUAL \\<Longrightarrow> cmp y x = EQUAL\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<in> D; y \\<in> D; cmp x y = EQUAL\\<rbrakk>\n    \\<Longrightarrow> cmp y x = EQUAL", "apply (cases \"cmp y x\")"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>x \\<in> D; y \\<in> D; cmp x y = EQUAL; cmp y x = LESS\\<rbrakk>\n    \\<Longrightarrow> cmp y x = EQUAL\n 2. \\<lbrakk>x \\<in> D; y \\<in> D; cmp x y = EQUAL; cmp y x = EQUAL\\<rbrakk>\n    \\<Longrightarrow> cmp y x = EQUAL\n 3. \\<lbrakk>x \\<in> D; y \\<in> D; cmp x y = EQUAL;\n     cmp y x = GREATER\\<rbrakk>\n    \\<Longrightarrow> cmp y x = EQUAL", "using lt_eq lt_eq[symmetric]"], ["proof (prove)\nusing this:\n  \\<lbrakk>?x \\<in> D; ?y \\<in> D\\<rbrakk>\n  \\<Longrightarrow> (cmp ?x ?y = LESS) = (cmp ?y ?x = GREATER)\n  \\<lbrakk>?x \\<in> D; ?y \\<in> D\\<rbrakk>\n  \\<Longrightarrow> (cmp ?y ?x = GREATER) = (cmp ?x ?y = LESS)\n\ngoal (3 subgoals):\n 1. \\<lbrakk>x \\<in> D; y \\<in> D; cmp x y = EQUAL; cmp y x = LESS\\<rbrakk>\n    \\<Longrightarrow> cmp y x = EQUAL\n 2. \\<lbrakk>x \\<in> D; y \\<in> D; cmp x y = EQUAL; cmp y x = EQUAL\\<rbrakk>\n    \\<Longrightarrow> cmp y x = EQUAL\n 3. \\<lbrakk>x \\<in> D; y \\<in> D; cmp x y = EQUAL;\n     cmp y x = GREATER\\<rbrakk>\n    \\<Longrightarrow> cmp y x = EQUAL", "by auto"], ["", "end"], ["", "abbreviation \"linorder \\<equiv> linorder_on UNIV\""], ["", "lemma linorder_to_class:\n  assumes \"linorder cmp\" \n  assumes [simp]: \"\\<And>x y. cmp x y = EQUAL \\<Longrightarrow> x=y\"\n  shows \"class.linorder (comp2le cmp) (comp2lt cmp)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. class.linorder (comp2le cmp) (comp2lt cmp)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. class.linorder (comp2le cmp) (comp2lt cmp)", "interpret linorder_on UNIV cmp"], ["proof (prove)\ngoal (1 subgoal):\n 1. linorder cmp", "by fact"], ["proof (state)\ngoal (1 subgoal):\n 1. class.linorder le lt", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. class.linorder le lt", "apply (unfold_locales)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>x y. lt x y = (le x y \\<and> \\<not> le y x)\n 2. \\<And>x. le x x\n 3. \\<And>x y z. \\<lbrakk>le x y; le y z\\<rbrakk> \\<Longrightarrow> le x z\n 4. \\<And>x y. \\<lbrakk>le x y; le y x\\<rbrakk> \\<Longrightarrow> x = y\n 5. \\<And>x y. le x y \\<or> le y x", "unfolding comp2le_def comp2lt_def"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>x y.\n       (case cmp x y of LESS \\<Rightarrow> True | _ \\<Rightarrow> False) =\n       ((case cmp x y of GREATER \\<Rightarrow> False\n         | _ \\<Rightarrow> True) \\<and>\n        \\<not> (case cmp y x of GREATER \\<Rightarrow> False\n                | _ \\<Rightarrow> True))\n 2. \\<And>x.\n       case cmp x x of GREATER \\<Rightarrow> False | _ \\<Rightarrow> True\n 3. \\<And>x y z.\n       \\<lbrakk>case cmp x y of GREATER \\<Rightarrow> False\n                | _ \\<Rightarrow> True;\n        case cmp y z of GREATER \\<Rightarrow> False\n        | _ \\<Rightarrow> True\\<rbrakk>\n       \\<Longrightarrow> case cmp x z of GREATER \\<Rightarrow> False\n                         | _ \\<Rightarrow> True\n 4. \\<And>x y.\n       \\<lbrakk>case cmp x y of GREATER \\<Rightarrow> False\n                | _ \\<Rightarrow> True;\n        case cmp y x of GREATER \\<Rightarrow> False\n        | _ \\<Rightarrow> True\\<rbrakk>\n       \\<Longrightarrow> x = y\n 5. \\<And>x y.\n       (case cmp x y of GREATER \\<Rightarrow> False\n        | _ \\<Rightarrow> True) \\<or>\n       (case cmp y x of GREATER \\<Rightarrow> False | _ \\<Rightarrow> True)", "apply (auto split: comp_res.split comp_res.split_asm)"], ["proof (prove)\ngoal (10 subgoals):\n 1. \\<And>x y.\n       \\<lbrakk>cmp y x = LESS; cmp x y = LESS\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>x y.\n       \\<lbrakk>cmp y x = EQUAL; cmp x y = LESS\\<rbrakk>\n       \\<Longrightarrow> False\n 3. \\<And>x y.\n       \\<lbrakk>cmp y x = GREATER; cmp x y = EQUAL\\<rbrakk>\n       \\<Longrightarrow> False\n 4. \\<And>x y z.\n       \\<lbrakk>cmp x y = LESS; cmp y z = LESS; cmp x z = GREATER\\<rbrakk>\n       \\<Longrightarrow> False\n 5. \\<And>x y z.\n       \\<lbrakk>cmp x y = LESS; cmp y z = EQUAL; cmp x z = GREATER\\<rbrakk>\n       \\<Longrightarrow> False\n 6. \\<And>x y z.\n       \\<lbrakk>cmp x y = EQUAL; cmp y z = LESS; cmp x z = GREATER\\<rbrakk>\n       \\<Longrightarrow> False\n 7. \\<And>x y z.\n       \\<lbrakk>cmp x y = EQUAL; cmp y z = EQUAL; cmp x z = GREATER\\<rbrakk>\n       \\<Longrightarrow> False\n 8. \\<And>x y.\n       \\<lbrakk>cmp x y = LESS; cmp y x = LESS\\<rbrakk>\n       \\<Longrightarrow> x = y\n 9. \\<And>x y.\n       \\<lbrakk>cmp x y = LESS; cmp y x = EQUAL\\<rbrakk>\n       \\<Longrightarrow> x = y\n 10. \\<And>x y.\n        \\<lbrakk>cmp x y = GREATER; cmp y x = GREATER\\<rbrakk>\n        \\<Longrightarrow> False", "using lt_eq"], ["proof (prove)\nusing this:\n  \\<lbrakk>?x \\<in> UNIV; ?y \\<in> UNIV\\<rbrakk>\n  \\<Longrightarrow> (cmp ?x ?y = LESS) = (cmp ?y ?x = GREATER)\n\ngoal (10 subgoals):\n 1. \\<And>x y.\n       \\<lbrakk>cmp y x = LESS; cmp x y = LESS\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>x y.\n       \\<lbrakk>cmp y x = EQUAL; cmp x y = LESS\\<rbrakk>\n       \\<Longrightarrow> False\n 3. \\<And>x y.\n       \\<lbrakk>cmp y x = GREATER; cmp x y = EQUAL\\<rbrakk>\n       \\<Longrightarrow> False\n 4. \\<And>x y z.\n       \\<lbrakk>cmp x y = LESS; cmp y z = LESS; cmp x z = GREATER\\<rbrakk>\n       \\<Longrightarrow> False\n 5. \\<And>x y z.\n       \\<lbrakk>cmp x y = LESS; cmp y z = EQUAL; cmp x z = GREATER\\<rbrakk>\n       \\<Longrightarrow> False\n 6. \\<And>x y z.\n       \\<lbrakk>cmp x y = EQUAL; cmp y z = LESS; cmp x z = GREATER\\<rbrakk>\n       \\<Longrightarrow> False\n 7. \\<And>x y z.\n       \\<lbrakk>cmp x y = EQUAL; cmp y z = EQUAL; cmp x z = GREATER\\<rbrakk>\n       \\<Longrightarrow> False\n 8. \\<And>x y.\n       \\<lbrakk>cmp x y = LESS; cmp y x = LESS\\<rbrakk>\n       \\<Longrightarrow> x = y\n 9. \\<And>x y.\n       \\<lbrakk>cmp x y = LESS; cmp y x = EQUAL\\<rbrakk>\n       \\<Longrightarrow> x = y\n 10. \\<And>x y.\n        \\<lbrakk>cmp x y = GREATER; cmp y x = GREATER\\<rbrakk>\n        \\<Longrightarrow> False", "apply simp"], ["proof (prove)\ngoal (9 subgoals):\n 1. \\<And>x y.\n       \\<lbrakk>cmp y x = EQUAL; cmp x y = LESS\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>x y.\n       \\<lbrakk>cmp y x = GREATER; cmp x y = EQUAL\\<rbrakk>\n       \\<Longrightarrow> False\n 3. \\<And>x y z.\n       \\<lbrakk>cmp x y = LESS; cmp y z = LESS; cmp x z = GREATER\\<rbrakk>\n       \\<Longrightarrow> False\n 4. \\<And>x y z.\n       \\<lbrakk>cmp x y = LESS; cmp y z = EQUAL; cmp x z = GREATER\\<rbrakk>\n       \\<Longrightarrow> False\n 5. \\<And>x y z.\n       \\<lbrakk>cmp x y = EQUAL; cmp y z = LESS; cmp x z = GREATER\\<rbrakk>\n       \\<Longrightarrow> False\n 6. \\<And>x y z.\n       \\<lbrakk>cmp x y = EQUAL; cmp y z = EQUAL; cmp x z = GREATER\\<rbrakk>\n       \\<Longrightarrow> False\n 7. \\<And>x y.\n       \\<lbrakk>cmp x y = LESS; cmp y x = LESS\\<rbrakk>\n       \\<Longrightarrow> x = y\n 8. \\<And>x y.\n       \\<lbrakk>cmp x y = LESS; cmp y x = EQUAL\\<rbrakk>\n       \\<Longrightarrow> x = y\n 9. \\<And>x y.\n       \\<lbrakk>cmp x y = GREATER; cmp y x = GREATER\\<rbrakk>\n       \\<Longrightarrow> False", "using lt_eq"], ["proof (prove)\nusing this:\n  \\<lbrakk>?x \\<in> UNIV; ?y \\<in> UNIV\\<rbrakk>\n  \\<Longrightarrow> (cmp ?x ?y = LESS) = (cmp ?y ?x = GREATER)\n\ngoal (9 subgoals):\n 1. \\<And>x y.\n       \\<lbrakk>cmp y x = EQUAL; cmp x y = LESS\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>x y.\n       \\<lbrakk>cmp y x = GREATER; cmp x y = EQUAL\\<rbrakk>\n       \\<Longrightarrow> False\n 3. \\<And>x y z.\n       \\<lbrakk>cmp x y = LESS; cmp y z = LESS; cmp x z = GREATER\\<rbrakk>\n       \\<Longrightarrow> False\n 4. \\<And>x y z.\n       \\<lbrakk>cmp x y = LESS; cmp y z = EQUAL; cmp x z = GREATER\\<rbrakk>\n       \\<Longrightarrow> False\n 5. \\<And>x y z.\n       \\<lbrakk>cmp x y = EQUAL; cmp y z = LESS; cmp x z = GREATER\\<rbrakk>\n       \\<Longrightarrow> False\n 6. \\<And>x y z.\n       \\<lbrakk>cmp x y = EQUAL; cmp y z = EQUAL; cmp x z = GREATER\\<rbrakk>\n       \\<Longrightarrow> False\n 7. \\<And>x y.\n       \\<lbrakk>cmp x y = LESS; cmp y x = LESS\\<rbrakk>\n       \\<Longrightarrow> x = y\n 8. \\<And>x y.\n       \\<lbrakk>cmp x y = LESS; cmp y x = EQUAL\\<rbrakk>\n       \\<Longrightarrow> x = y\n 9. \\<And>x y.\n       \\<lbrakk>cmp x y = GREATER; cmp y x = GREATER\\<rbrakk>\n       \\<Longrightarrow> False", "apply simp"], ["proof (prove)\ngoal (8 subgoals):\n 1. \\<And>x y.\n       \\<lbrakk>cmp y x = GREATER; cmp x y = EQUAL\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>x y z.\n       \\<lbrakk>cmp x y = LESS; cmp y z = LESS; cmp x z = GREATER\\<rbrakk>\n       \\<Longrightarrow> False\n 3. \\<And>x y z.\n       \\<lbrakk>cmp x y = LESS; cmp y z = EQUAL; cmp x z = GREATER\\<rbrakk>\n       \\<Longrightarrow> False\n 4. \\<And>x y z.\n       \\<lbrakk>cmp x y = EQUAL; cmp y z = LESS; cmp x z = GREATER\\<rbrakk>\n       \\<Longrightarrow> False\n 5. \\<And>x y z.\n       \\<lbrakk>cmp x y = EQUAL; cmp y z = EQUAL; cmp x z = GREATER\\<rbrakk>\n       \\<Longrightarrow> False\n 6. \\<And>x y.\n       \\<lbrakk>cmp x y = LESS; cmp y x = LESS\\<rbrakk>\n       \\<Longrightarrow> x = y\n 7. \\<And>x y.\n       \\<lbrakk>cmp x y = LESS; cmp y x = EQUAL\\<rbrakk>\n       \\<Longrightarrow> x = y\n 8. \\<And>x y.\n       \\<lbrakk>cmp x y = GREATER; cmp y x = GREATER\\<rbrakk>\n       \\<Longrightarrow> False", "using lt_eq[symmetric]"], ["proof (prove)\nusing this:\n  \\<lbrakk>?x \\<in> UNIV; ?y \\<in> UNIV\\<rbrakk>\n  \\<Longrightarrow> (cmp ?y ?x = GREATER) = (cmp ?x ?y = LESS)\n\ngoal (8 subgoals):\n 1. \\<And>x y.\n       \\<lbrakk>cmp y x = GREATER; cmp x y = EQUAL\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>x y z.\n       \\<lbrakk>cmp x y = LESS; cmp y z = LESS; cmp x z = GREATER\\<rbrakk>\n       \\<Longrightarrow> False\n 3. \\<And>x y z.\n       \\<lbrakk>cmp x y = LESS; cmp y z = EQUAL; cmp x z = GREATER\\<rbrakk>\n       \\<Longrightarrow> False\n 4. \\<And>x y z.\n       \\<lbrakk>cmp x y = EQUAL; cmp y z = LESS; cmp x z = GREATER\\<rbrakk>\n       \\<Longrightarrow> False\n 5. \\<And>x y z.\n       \\<lbrakk>cmp x y = EQUAL; cmp y z = EQUAL; cmp x z = GREATER\\<rbrakk>\n       \\<Longrightarrow> False\n 6. \\<And>x y.\n       \\<lbrakk>cmp x y = LESS; cmp y x = LESS\\<rbrakk>\n       \\<Longrightarrow> x = y\n 7. \\<And>x y.\n       \\<lbrakk>cmp x y = LESS; cmp y x = EQUAL\\<rbrakk>\n       \\<Longrightarrow> x = y\n 8. \\<And>x y.\n       \\<lbrakk>cmp x y = GREATER; cmp y x = GREATER\\<rbrakk>\n       \\<Longrightarrow> False", "apply simp"], ["proof (prove)\ngoal (7 subgoals):\n 1. \\<And>x y z.\n       \\<lbrakk>cmp x y = LESS; cmp y z = LESS; cmp x z = GREATER\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>x y z.\n       \\<lbrakk>cmp x y = LESS; cmp y z = EQUAL; cmp x z = GREATER\\<rbrakk>\n       \\<Longrightarrow> False\n 3. \\<And>x y z.\n       \\<lbrakk>cmp x y = EQUAL; cmp y z = LESS; cmp x z = GREATER\\<rbrakk>\n       \\<Longrightarrow> False\n 4. \\<And>x y z.\n       \\<lbrakk>cmp x y = EQUAL; cmp y z = EQUAL; cmp x z = GREATER\\<rbrakk>\n       \\<Longrightarrow> False\n 5. \\<And>x y.\n       \\<lbrakk>cmp x y = LESS; cmp y x = LESS\\<rbrakk>\n       \\<Longrightarrow> x = y\n 6. \\<And>x y.\n       \\<lbrakk>cmp x y = LESS; cmp y x = EQUAL\\<rbrakk>\n       \\<Longrightarrow> x = y\n 7. \\<And>x y.\n       \\<lbrakk>cmp x y = GREATER; cmp y x = GREATER\\<rbrakk>\n       \\<Longrightarrow> False", "apply (drule (1) trans[rotated 3], simp_all) []"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<And>x y z.\n       \\<lbrakk>cmp x y = LESS; cmp y z = EQUAL; cmp x z = GREATER\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>x y z.\n       \\<lbrakk>cmp x y = EQUAL; cmp y z = LESS; cmp x z = GREATER\\<rbrakk>\n       \\<Longrightarrow> False\n 3. \\<And>x y z.\n       \\<lbrakk>cmp x y = EQUAL; cmp y z = EQUAL; cmp x z = GREATER\\<rbrakk>\n       \\<Longrightarrow> False\n 4. \\<And>x y.\n       \\<lbrakk>cmp x y = LESS; cmp y x = LESS\\<rbrakk>\n       \\<Longrightarrow> x = y\n 5. \\<And>x y.\n       \\<lbrakk>cmp x y = LESS; cmp y x = EQUAL\\<rbrakk>\n       \\<Longrightarrow> x = y\n 6. \\<And>x y.\n       \\<lbrakk>cmp x y = GREATER; cmp y x = GREATER\\<rbrakk>\n       \\<Longrightarrow> False", "apply (drule (1) trans[rotated 3], simp_all) []"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>x y z.\n       \\<lbrakk>cmp x y = EQUAL; cmp y z = LESS; cmp x z = GREATER\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>x y z.\n       \\<lbrakk>cmp x y = EQUAL; cmp y z = EQUAL; cmp x z = GREATER\\<rbrakk>\n       \\<Longrightarrow> False\n 3. \\<And>x y.\n       \\<lbrakk>cmp x y = LESS; cmp y x = LESS\\<rbrakk>\n       \\<Longrightarrow> x = y\n 4. \\<And>x y.\n       \\<lbrakk>cmp x y = LESS; cmp y x = EQUAL\\<rbrakk>\n       \\<Longrightarrow> x = y\n 5. \\<And>x y.\n       \\<lbrakk>cmp x y = GREATER; cmp y x = GREATER\\<rbrakk>\n       \\<Longrightarrow> False", "apply (drule (1) trans[rotated 3], simp_all) []"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>x y z.\n       \\<lbrakk>cmp x y = EQUAL; cmp y z = EQUAL; cmp x z = GREATER\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>x y.\n       \\<lbrakk>cmp x y = LESS; cmp y x = LESS\\<rbrakk>\n       \\<Longrightarrow> x = y\n 3. \\<And>x y.\n       \\<lbrakk>cmp x y = LESS; cmp y x = EQUAL\\<rbrakk>\n       \\<Longrightarrow> x = y\n 4. \\<And>x y.\n       \\<lbrakk>cmp x y = GREATER; cmp y x = GREATER\\<rbrakk>\n       \\<Longrightarrow> False", "apply (drule (1) trans[rotated 3], simp_all) []"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>x y.\n       \\<lbrakk>cmp x y = LESS; cmp y x = LESS\\<rbrakk>\n       \\<Longrightarrow> x = y\n 2. \\<And>x y.\n       \\<lbrakk>cmp x y = LESS; cmp y x = EQUAL\\<rbrakk>\n       \\<Longrightarrow> x = y\n 3. \\<And>x y.\n       \\<lbrakk>cmp x y = GREATER; cmp y x = GREATER\\<rbrakk>\n       \\<Longrightarrow> False", "using lt_eq"], ["proof (prove)\nusing this:\n  \\<lbrakk>?x \\<in> UNIV; ?y \\<in> UNIV\\<rbrakk>\n  \\<Longrightarrow> (cmp ?x ?y = LESS) = (cmp ?y ?x = GREATER)\n\ngoal (3 subgoals):\n 1. \\<And>x y.\n       \\<lbrakk>cmp x y = LESS; cmp y x = LESS\\<rbrakk>\n       \\<Longrightarrow> x = y\n 2. \\<And>x y.\n       \\<lbrakk>cmp x y = LESS; cmp y x = EQUAL\\<rbrakk>\n       \\<Longrightarrow> x = y\n 3. \\<And>x y.\n       \\<lbrakk>cmp x y = GREATER; cmp y x = GREATER\\<rbrakk>\n       \\<Longrightarrow> False", "apply simp"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x y.\n       \\<lbrakk>cmp x y = LESS; cmp y x = EQUAL\\<rbrakk>\n       \\<Longrightarrow> x = y\n 2. \\<And>x y.\n       \\<lbrakk>cmp x y = GREATER; cmp y x = GREATER\\<rbrakk>\n       \\<Longrightarrow> False", "using lt_eq"], ["proof (prove)\nusing this:\n  \\<lbrakk>?x \\<in> UNIV; ?y \\<in> UNIV\\<rbrakk>\n  \\<Longrightarrow> (cmp ?x ?y = LESS) = (cmp ?y ?x = GREATER)\n\ngoal (2 subgoals):\n 1. \\<And>x y.\n       \\<lbrakk>cmp x y = LESS; cmp y x = EQUAL\\<rbrakk>\n       \\<Longrightarrow> x = y\n 2. \\<And>x y.\n       \\<lbrakk>cmp x y = GREATER; cmp y x = GREATER\\<rbrakk>\n       \\<Longrightarrow> False", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>cmp x y = GREATER; cmp y x = GREATER\\<rbrakk>\n       \\<Longrightarrow> False", "using lt_eq[symmetric]"], ["proof (prove)\nusing this:\n  \\<lbrakk>?x \\<in> UNIV; ?y \\<in> UNIV\\<rbrakk>\n  \\<Longrightarrow> (cmp ?y ?x = GREATER) = (cmp ?x ?y = LESS)\n\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>cmp x y = GREATER; cmp y x = GREATER\\<rbrakk>\n       \\<Longrightarrow> False", "apply simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  class.linorder le lt\n\ngoal:\nNo subgoals!", "qed"], ["", "definition \"dflt_cmp le lt a b \\<equiv> \n  if lt a b then LESS \n  else if le a b then EQUAL \n  else GREATER\""], ["", "lemma (in linorder) class_to_linorder:\n  \"linorder (dflt_cmp (\\<le>) (<))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. linorder (dflt_cmp (\\<le>) (<))", "apply (unfold_locales)"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<in> UNIV; y \\<in> UNIV\\<rbrakk>\n       \\<Longrightarrow> (dflt_cmp (\\<le>) (<) x y = LESS) =\n                         (dflt_cmp (\\<le>) (<) y x = GREATER)\n 2. \\<And>x. x \\<in> UNIV \\<Longrightarrow> dflt_cmp (\\<le>) (<) x x = EQUAL\n 3. \\<And>x y z.\n       \\<lbrakk>x \\<in> UNIV; y \\<in> UNIV; z \\<in> UNIV;\n        dflt_cmp (\\<le>) (<) x y = LESS;\n        dflt_cmp (\\<le>) (<) y z = LESS\\<rbrakk>\n       \\<Longrightarrow> dflt_cmp (\\<le>) (<) x z = LESS\n 4. \\<And>x y z.\n       \\<lbrakk>x \\<in> UNIV; y \\<in> UNIV; z \\<in> UNIV;\n        dflt_cmp (\\<le>) (<) x y = LESS;\n        dflt_cmp (\\<le>) (<) y z = EQUAL\\<rbrakk>\n       \\<Longrightarrow> dflt_cmp (\\<le>) (<) x z = LESS\n 5. \\<And>x y z.\n       \\<lbrakk>x \\<in> UNIV; y \\<in> UNIV; z \\<in> UNIV;\n        dflt_cmp (\\<le>) (<) x y = EQUAL;\n        dflt_cmp (\\<le>) (<) y z = LESS\\<rbrakk>\n       \\<Longrightarrow> dflt_cmp (\\<le>) (<) x z = LESS\n 6. \\<And>x y z.\n       \\<lbrakk>x \\<in> UNIV; y \\<in> UNIV; z \\<in> UNIV;\n        dflt_cmp (\\<le>) (<) x y = EQUAL;\n        dflt_cmp (\\<le>) (<) y z = EQUAL\\<rbrakk>\n       \\<Longrightarrow> dflt_cmp (\\<le>) (<) x z = EQUAL", "unfolding dflt_cmp_def"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<in> UNIV; y \\<in> UNIV\\<rbrakk>\n       \\<Longrightarrow> ((if x < y then LESS\n                           else if x \\<le> y then EQUAL else GREATER) =\n                          LESS) =\n                         ((if y < x then LESS\n                           else if y \\<le> x then EQUAL else GREATER) =\n                          GREATER)\n 2. \\<And>x.\n       x \\<in> UNIV \\<Longrightarrow>\n       (if x < x then LESS else if x \\<le> x then EQUAL else GREATER) =\n       EQUAL\n 3. \\<And>x y z.\n       \\<lbrakk>x \\<in> UNIV; y \\<in> UNIV; z \\<in> UNIV;\n        (if x < y then LESS else if x \\<le> y then EQUAL else GREATER) =\n        LESS;\n        (if y < z then LESS else if y \\<le> z then EQUAL else GREATER) =\n        LESS\\<rbrakk>\n       \\<Longrightarrow> (if x < z then LESS\n                          else if x \\<le> z then EQUAL else GREATER) =\n                         LESS\n 4. \\<And>x y z.\n       \\<lbrakk>x \\<in> UNIV; y \\<in> UNIV; z \\<in> UNIV;\n        (if x < y then LESS else if x \\<le> y then EQUAL else GREATER) =\n        LESS;\n        (if y < z then LESS else if y \\<le> z then EQUAL else GREATER) =\n        EQUAL\\<rbrakk>\n       \\<Longrightarrow> (if x < z then LESS\n                          else if x \\<le> z then EQUAL else GREATER) =\n                         LESS\n 5. \\<And>x y z.\n       \\<lbrakk>x \\<in> UNIV; y \\<in> UNIV; z \\<in> UNIV;\n        (if x < y then LESS else if x \\<le> y then EQUAL else GREATER) =\n        EQUAL;\n        (if y < z then LESS else if y \\<le> z then EQUAL else GREATER) =\n        LESS\\<rbrakk>\n       \\<Longrightarrow> (if x < z then LESS\n                          else if x \\<le> z then EQUAL else GREATER) =\n                         LESS\n 6. \\<And>x y z.\n       \\<lbrakk>x \\<in> UNIV; y \\<in> UNIV; z \\<in> UNIV;\n        (if x < y then LESS else if x \\<le> y then EQUAL else GREATER) =\n        EQUAL;\n        (if y < z then LESS else if y \\<le> z then EQUAL else GREATER) =\n        EQUAL\\<rbrakk>\n       \\<Longrightarrow> (if x < z then LESS\n                          else if x \\<le> z then EQUAL else GREATER) =\n                         EQUAL", "by (auto split: if_split_asm)"], ["", "lemma restrict_linorder: \"\\<lbrakk>linorder_on D cmp ; D'\\<subseteq>D\\<rbrakk> \\<Longrightarrow> linorder_on D' cmp\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>linorder_on D cmp; D' \\<subseteq> D\\<rbrakk>\n    \\<Longrightarrow> linorder_on D' cmp", "apply (rule linorder_on.intro)"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<And>x y.\n       \\<lbrakk>linorder_on D cmp; D' \\<subseteq> D; x \\<in> D';\n        y \\<in> D'\\<rbrakk>\n       \\<Longrightarrow> (cmp x y = LESS) = (cmp y x = GREATER)\n 2. \\<And>x.\n       \\<lbrakk>linorder_on D cmp; D' \\<subseteq> D; x \\<in> D'\\<rbrakk>\n       \\<Longrightarrow> cmp x x = EQUAL\n 3. \\<And>x y z.\n       \\<lbrakk>linorder_on D cmp; D' \\<subseteq> D; x \\<in> D'; y \\<in> D';\n        z \\<in> D'; cmp x y = LESS; cmp y z = LESS\\<rbrakk>\n       \\<Longrightarrow> cmp x z = LESS\n 4. \\<And>x y z.\n       \\<lbrakk>linorder_on D cmp; D' \\<subseteq> D; x \\<in> D'; y \\<in> D';\n        z \\<in> D'; cmp x y = LESS; cmp y z = EQUAL\\<rbrakk>\n       \\<Longrightarrow> cmp x z = LESS\n 5. \\<And>x y z.\n       \\<lbrakk>linorder_on D cmp; D' \\<subseteq> D; x \\<in> D'; y \\<in> D';\n        z \\<in> D'; cmp x y = EQUAL; cmp y z = LESS\\<rbrakk>\n       \\<Longrightarrow> cmp x z = LESS\n 6. \\<And>x y z.\n       \\<lbrakk>linorder_on D cmp; D' \\<subseteq> D; x \\<in> D'; y \\<in> D';\n        z \\<in> D'; cmp x y = EQUAL; cmp y z = EQUAL\\<rbrakk>\n       \\<Longrightarrow> cmp x z = EQUAL", "apply (drule (1) rev_subsetD)+"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<And>x y.\n       \\<lbrakk>linorder_on D cmp; D' \\<subseteq> D; x \\<in> D;\n        y \\<in> D\\<rbrakk>\n       \\<Longrightarrow> (cmp x y = LESS) = (cmp y x = GREATER)\n 2. \\<And>x.\n       \\<lbrakk>linorder_on D cmp; D' \\<subseteq> D; x \\<in> D'\\<rbrakk>\n       \\<Longrightarrow> cmp x x = EQUAL\n 3. \\<And>x y z.\n       \\<lbrakk>linorder_on D cmp; D' \\<subseteq> D; x \\<in> D'; y \\<in> D';\n        z \\<in> D'; cmp x y = LESS; cmp y z = LESS\\<rbrakk>\n       \\<Longrightarrow> cmp x z = LESS\n 4. \\<And>x y z.\n       \\<lbrakk>linorder_on D cmp; D' \\<subseteq> D; x \\<in> D'; y \\<in> D';\n        z \\<in> D'; cmp x y = LESS; cmp y z = EQUAL\\<rbrakk>\n       \\<Longrightarrow> cmp x z = LESS\n 5. \\<And>x y z.\n       \\<lbrakk>linorder_on D cmp; D' \\<subseteq> D; x \\<in> D'; y \\<in> D';\n        z \\<in> D'; cmp x y = EQUAL; cmp y z = LESS\\<rbrakk>\n       \\<Longrightarrow> cmp x z = LESS\n 6. \\<And>x y z.\n       \\<lbrakk>linorder_on D cmp; D' \\<subseteq> D; x \\<in> D'; y \\<in> D';\n        z \\<in> D'; cmp x y = EQUAL; cmp y z = EQUAL\\<rbrakk>\n       \\<Longrightarrow> cmp x z = EQUAL", "apply (erule (2) linorder_on.lt_eq)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>linorder_on D cmp; D' \\<subseteq> D; x \\<in> D'\\<rbrakk>\n       \\<Longrightarrow> cmp x x = EQUAL\n 2. \\<And>x y z.\n       \\<lbrakk>linorder_on D cmp; D' \\<subseteq> D; x \\<in> D'; y \\<in> D';\n        z \\<in> D'; cmp x y = LESS; cmp y z = LESS\\<rbrakk>\n       \\<Longrightarrow> cmp x z = LESS\n 3. \\<And>x y z.\n       \\<lbrakk>linorder_on D cmp; D' \\<subseteq> D; x \\<in> D'; y \\<in> D';\n        z \\<in> D'; cmp x y = LESS; cmp y z = EQUAL\\<rbrakk>\n       \\<Longrightarrow> cmp x z = LESS\n 4. \\<And>x y z.\n       \\<lbrakk>linorder_on D cmp; D' \\<subseteq> D; x \\<in> D'; y \\<in> D';\n        z \\<in> D'; cmp x y = EQUAL; cmp y z = LESS\\<rbrakk>\n       \\<Longrightarrow> cmp x z = LESS\n 5. \\<And>x y z.\n       \\<lbrakk>linorder_on D cmp; D' \\<subseteq> D; x \\<in> D'; y \\<in> D';\n        z \\<in> D'; cmp x y = EQUAL; cmp y z = EQUAL\\<rbrakk>\n       \\<Longrightarrow> cmp x z = EQUAL", "apply (drule (1) rev_subsetD)+"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>linorder_on D cmp; D' \\<subseteq> D; x \\<in> D\\<rbrakk>\n       \\<Longrightarrow> cmp x x = EQUAL\n 2. \\<And>x y z.\n       \\<lbrakk>linorder_on D cmp; D' \\<subseteq> D; x \\<in> D'; y \\<in> D';\n        z \\<in> D'; cmp x y = LESS; cmp y z = LESS\\<rbrakk>\n       \\<Longrightarrow> cmp x z = LESS\n 3. \\<And>x y z.\n       \\<lbrakk>linorder_on D cmp; D' \\<subseteq> D; x \\<in> D'; y \\<in> D';\n        z \\<in> D'; cmp x y = LESS; cmp y z = EQUAL\\<rbrakk>\n       \\<Longrightarrow> cmp x z = LESS\n 4. \\<And>x y z.\n       \\<lbrakk>linorder_on D cmp; D' \\<subseteq> D; x \\<in> D'; y \\<in> D';\n        z \\<in> D'; cmp x y = EQUAL; cmp y z = LESS\\<rbrakk>\n       \\<Longrightarrow> cmp x z = LESS\n 5. \\<And>x y z.\n       \\<lbrakk>linorder_on D cmp; D' \\<subseteq> D; x \\<in> D'; y \\<in> D';\n        z \\<in> D'; cmp x y = EQUAL; cmp y z = EQUAL\\<rbrakk>\n       \\<Longrightarrow> cmp x z = EQUAL", "apply (erule (1) linorder_on.refl)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>x y z.\n       \\<lbrakk>linorder_on D cmp; D' \\<subseteq> D; x \\<in> D'; y \\<in> D';\n        z \\<in> D'; cmp x y = LESS; cmp y z = LESS\\<rbrakk>\n       \\<Longrightarrow> cmp x z = LESS\n 2. \\<And>x y z.\n       \\<lbrakk>linorder_on D cmp; D' \\<subseteq> D; x \\<in> D'; y \\<in> D';\n        z \\<in> D'; cmp x y = LESS; cmp y z = EQUAL\\<rbrakk>\n       \\<Longrightarrow> cmp x z = LESS\n 3. \\<And>x y z.\n       \\<lbrakk>linorder_on D cmp; D' \\<subseteq> D; x \\<in> D'; y \\<in> D';\n        z \\<in> D'; cmp x y = EQUAL; cmp y z = LESS\\<rbrakk>\n       \\<Longrightarrow> cmp x z = LESS\n 4. \\<And>x y z.\n       \\<lbrakk>linorder_on D cmp; D' \\<subseteq> D; x \\<in> D'; y \\<in> D';\n        z \\<in> D'; cmp x y = EQUAL; cmp y z = EQUAL\\<rbrakk>\n       \\<Longrightarrow> cmp x z = EQUAL", "apply (drule (1) rev_subsetD)+"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>x y z.\n       \\<lbrakk>linorder_on D cmp; D' \\<subseteq> D; cmp x y = LESS;\n        cmp y z = LESS; x \\<in> D; y \\<in> D; z \\<in> D\\<rbrakk>\n       \\<Longrightarrow> cmp x z = LESS\n 2. \\<And>x y z.\n       \\<lbrakk>linorder_on D cmp; D' \\<subseteq> D; x \\<in> D'; y \\<in> D';\n        z \\<in> D'; cmp x y = LESS; cmp y z = EQUAL\\<rbrakk>\n       \\<Longrightarrow> cmp x z = LESS\n 3. \\<And>x y z.\n       \\<lbrakk>linorder_on D cmp; D' \\<subseteq> D; x \\<in> D'; y \\<in> D';\n        z \\<in> D'; cmp x y = EQUAL; cmp y z = LESS\\<rbrakk>\n       \\<Longrightarrow> cmp x z = LESS\n 4. \\<And>x y z.\n       \\<lbrakk>linorder_on D cmp; D' \\<subseteq> D; x \\<in> D'; y \\<in> D';\n        z \\<in> D'; cmp x y = EQUAL; cmp y z = EQUAL\\<rbrakk>\n       \\<Longrightarrow> cmp x z = EQUAL", "apply (erule (5) linorder_on.trans)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>x y z.\n       \\<lbrakk>linorder_on D cmp; D' \\<subseteq> D; x \\<in> D'; y \\<in> D';\n        z \\<in> D'; cmp x y = LESS; cmp y z = EQUAL\\<rbrakk>\n       \\<Longrightarrow> cmp x z = LESS\n 2. \\<And>x y z.\n       \\<lbrakk>linorder_on D cmp; D' \\<subseteq> D; x \\<in> D'; y \\<in> D';\n        z \\<in> D'; cmp x y = EQUAL; cmp y z = LESS\\<rbrakk>\n       \\<Longrightarrow> cmp x z = LESS\n 3. \\<And>x y z.\n       \\<lbrakk>linorder_on D cmp; D' \\<subseteq> D; x \\<in> D'; y \\<in> D';\n        z \\<in> D'; cmp x y = EQUAL; cmp y z = EQUAL\\<rbrakk>\n       \\<Longrightarrow> cmp x z = EQUAL", "apply (drule (1) rev_subsetD)+"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>x y z.\n       \\<lbrakk>linorder_on D cmp; D' \\<subseteq> D; cmp x y = LESS;\n        cmp y z = EQUAL; x \\<in> D; y \\<in> D; z \\<in> D\\<rbrakk>\n       \\<Longrightarrow> cmp x z = LESS\n 2. \\<And>x y z.\n       \\<lbrakk>linorder_on D cmp; D' \\<subseteq> D; x \\<in> D'; y \\<in> D';\n        z \\<in> D'; cmp x y = EQUAL; cmp y z = LESS\\<rbrakk>\n       \\<Longrightarrow> cmp x z = LESS\n 3. \\<And>x y z.\n       \\<lbrakk>linorder_on D cmp; D' \\<subseteq> D; x \\<in> D'; y \\<in> D';\n        z \\<in> D'; cmp x y = EQUAL; cmp y z = EQUAL\\<rbrakk>\n       \\<Longrightarrow> cmp x z = EQUAL", "apply (erule (5) linorder_on.trans)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x y z.\n       \\<lbrakk>linorder_on D cmp; D' \\<subseteq> D; x \\<in> D'; y \\<in> D';\n        z \\<in> D'; cmp x y = EQUAL; cmp y z = LESS\\<rbrakk>\n       \\<Longrightarrow> cmp x z = LESS\n 2. \\<And>x y z.\n       \\<lbrakk>linorder_on D cmp; D' \\<subseteq> D; x \\<in> D'; y \\<in> D';\n        z \\<in> D'; cmp x y = EQUAL; cmp y z = EQUAL\\<rbrakk>\n       \\<Longrightarrow> cmp x z = EQUAL", "apply (drule (1) rev_subsetD)+"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x y z.\n       \\<lbrakk>linorder_on D cmp; D' \\<subseteq> D; cmp x y = EQUAL;\n        cmp y z = LESS; x \\<in> D; y \\<in> D; z \\<in> D\\<rbrakk>\n       \\<Longrightarrow> cmp x z = LESS\n 2. \\<And>x y z.\n       \\<lbrakk>linorder_on D cmp; D' \\<subseteq> D; x \\<in> D'; y \\<in> D';\n        z \\<in> D'; cmp x y = EQUAL; cmp y z = EQUAL\\<rbrakk>\n       \\<Longrightarrow> cmp x z = EQUAL", "apply (erule (5) linorder_on.trans)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x y z.\n       \\<lbrakk>linorder_on D cmp; D' \\<subseteq> D; x \\<in> D'; y \\<in> D';\n        z \\<in> D'; cmp x y = EQUAL; cmp y z = EQUAL\\<rbrakk>\n       \\<Longrightarrow> cmp x z = EQUAL", "apply (drule (1) rev_subsetD)+"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x y z.\n       \\<lbrakk>linorder_on D cmp; D' \\<subseteq> D; cmp x y = EQUAL;\n        cmp y z = EQUAL; x \\<in> D; y \\<in> D; z \\<in> D\\<rbrakk>\n       \\<Longrightarrow> cmp x z = EQUAL", "apply (erule (5) linorder_on.trans)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "subsection \\<open>Operations on Linear Orderings\\<close>"], ["", "text \\<open>Map with injective function\\<close>"], ["", "definition cmp_img where \"cmp_img f cmp a b \\<equiv> cmp (f a) (f b)\""], ["", "lemma img_linorder[intro?]: \n  assumes LO: \"linorder_on (f`D) cmp\"\n  shows \"linorder_on D (cmp_img f cmp)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. linorder_on D (cmp_img f cmp)", "apply unfold_locales"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<in> D; y \\<in> D\\<rbrakk>\n       \\<Longrightarrow> (cmp_img f cmp x y = LESS) =\n                         (cmp_img f cmp y x = GREATER)\n 2. \\<And>x. x \\<in> D \\<Longrightarrow> cmp_img f cmp x x = EQUAL\n 3. \\<And>x y z.\n       \\<lbrakk>x \\<in> D; y \\<in> D; z \\<in> D; cmp_img f cmp x y = LESS;\n        cmp_img f cmp y z = LESS\\<rbrakk>\n       \\<Longrightarrow> cmp_img f cmp x z = LESS\n 4. \\<And>x y z.\n       \\<lbrakk>x \\<in> D; y \\<in> D; z \\<in> D; cmp_img f cmp x y = LESS;\n        cmp_img f cmp y z = EQUAL\\<rbrakk>\n       \\<Longrightarrow> cmp_img f cmp x z = LESS\n 5. \\<And>x y z.\n       \\<lbrakk>x \\<in> D; y \\<in> D; z \\<in> D; cmp_img f cmp x y = EQUAL;\n        cmp_img f cmp y z = LESS\\<rbrakk>\n       \\<Longrightarrow> cmp_img f cmp x z = LESS\n 6. \\<And>x y z.\n       \\<lbrakk>x \\<in> D; y \\<in> D; z \\<in> D; cmp_img f cmp x y = EQUAL;\n        cmp_img f cmp y z = EQUAL\\<rbrakk>\n       \\<Longrightarrow> cmp_img f cmp x z = EQUAL", "unfolding cmp_img_def"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<in> D; y \\<in> D\\<rbrakk>\n       \\<Longrightarrow> (cmp (f x) (f y) = LESS) =\n                         (cmp (f y) (f x) = GREATER)\n 2. \\<And>x. x \\<in> D \\<Longrightarrow> cmp (f x) (f x) = EQUAL\n 3. \\<And>x y z.\n       \\<lbrakk>x \\<in> D; y \\<in> D; z \\<in> D; cmp (f x) (f y) = LESS;\n        cmp (f y) (f z) = LESS\\<rbrakk>\n       \\<Longrightarrow> cmp (f x) (f z) = LESS\n 4. \\<And>x y z.\n       \\<lbrakk>x \\<in> D; y \\<in> D; z \\<in> D; cmp (f x) (f y) = LESS;\n        cmp (f y) (f z) = EQUAL\\<rbrakk>\n       \\<Longrightarrow> cmp (f x) (f z) = LESS\n 5. \\<And>x y z.\n       \\<lbrakk>x \\<in> D; y \\<in> D; z \\<in> D; cmp (f x) (f y) = EQUAL;\n        cmp (f y) (f z) = LESS\\<rbrakk>\n       \\<Longrightarrow> cmp (f x) (f z) = LESS\n 6. \\<And>x y z.\n       \\<lbrakk>x \\<in> D; y \\<in> D; z \\<in> D; cmp (f x) (f y) = EQUAL;\n        cmp (f y) (f z) = EQUAL\\<rbrakk>\n       \\<Longrightarrow> cmp (f x) (f z) = EQUAL", "apply (rule linorder_on.lt_eq[OF LO], auto) []"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>x. x \\<in> D \\<Longrightarrow> cmp (f x) (f x) = EQUAL\n 2. \\<And>x y z.\n       \\<lbrakk>x \\<in> D; y \\<in> D; z \\<in> D; cmp (f x) (f y) = LESS;\n        cmp (f y) (f z) = LESS\\<rbrakk>\n       \\<Longrightarrow> cmp (f x) (f z) = LESS\n 3. \\<And>x y z.\n       \\<lbrakk>x \\<in> D; y \\<in> D; z \\<in> D; cmp (f x) (f y) = LESS;\n        cmp (f y) (f z) = EQUAL\\<rbrakk>\n       \\<Longrightarrow> cmp (f x) (f z) = LESS\n 4. \\<And>x y z.\n       \\<lbrakk>x \\<in> D; y \\<in> D; z \\<in> D; cmp (f x) (f y) = EQUAL;\n        cmp (f y) (f z) = LESS\\<rbrakk>\n       \\<Longrightarrow> cmp (f x) (f z) = LESS\n 5. \\<And>x y z.\n       \\<lbrakk>x \\<in> D; y \\<in> D; z \\<in> D; cmp (f x) (f y) = EQUAL;\n        cmp (f y) (f z) = EQUAL\\<rbrakk>\n       \\<Longrightarrow> cmp (f x) (f z) = EQUAL", "apply (rule linorder_on.refl[OF LO], auto) []"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>x y z.\n       \\<lbrakk>x \\<in> D; y \\<in> D; z \\<in> D; cmp (f x) (f y) = LESS;\n        cmp (f y) (f z) = LESS\\<rbrakk>\n       \\<Longrightarrow> cmp (f x) (f z) = LESS\n 2. \\<And>x y z.\n       \\<lbrakk>x \\<in> D; y \\<in> D; z \\<in> D; cmp (f x) (f y) = LESS;\n        cmp (f y) (f z) = EQUAL\\<rbrakk>\n       \\<Longrightarrow> cmp (f x) (f z) = LESS\n 3. \\<And>x y z.\n       \\<lbrakk>x \\<in> D; y \\<in> D; z \\<in> D; cmp (f x) (f y) = EQUAL;\n        cmp (f y) (f z) = LESS\\<rbrakk>\n       \\<Longrightarrow> cmp (f x) (f z) = LESS\n 4. \\<And>x y z.\n       \\<lbrakk>x \\<in> D; y \\<in> D; z \\<in> D; cmp (f x) (f y) = EQUAL;\n        cmp (f y) (f z) = EQUAL\\<rbrakk>\n       \\<Longrightarrow> cmp (f x) (f z) = EQUAL", "apply (erule (1) linorder_on.trans[OF LO, rotated -2], auto) []"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>x y z.\n       \\<lbrakk>x \\<in> D; y \\<in> D; z \\<in> D; cmp (f x) (f y) = LESS;\n        cmp (f y) (f z) = EQUAL\\<rbrakk>\n       \\<Longrightarrow> cmp (f x) (f z) = LESS\n 2. \\<And>x y z.\n       \\<lbrakk>x \\<in> D; y \\<in> D; z \\<in> D; cmp (f x) (f y) = EQUAL;\n        cmp (f y) (f z) = LESS\\<rbrakk>\n       \\<Longrightarrow> cmp (f x) (f z) = LESS\n 3. \\<And>x y z.\n       \\<lbrakk>x \\<in> D; y \\<in> D; z \\<in> D; cmp (f x) (f y) = EQUAL;\n        cmp (f y) (f z) = EQUAL\\<rbrakk>\n       \\<Longrightarrow> cmp (f x) (f z) = EQUAL", "apply (erule (1) linorder_on.trans[OF LO, rotated -2], auto) []"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x y z.\n       \\<lbrakk>x \\<in> D; y \\<in> D; z \\<in> D; cmp (f x) (f y) = EQUAL;\n        cmp (f y) (f z) = LESS\\<rbrakk>\n       \\<Longrightarrow> cmp (f x) (f z) = LESS\n 2. \\<And>x y z.\n       \\<lbrakk>x \\<in> D; y \\<in> D; z \\<in> D; cmp (f x) (f y) = EQUAL;\n        cmp (f y) (f z) = EQUAL\\<rbrakk>\n       \\<Longrightarrow> cmp (f x) (f z) = EQUAL", "apply (erule (1) linorder_on.trans[OF LO, rotated -2], auto) []"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x y z.\n       \\<lbrakk>x \\<in> D; y \\<in> D; z \\<in> D; cmp (f x) (f y) = EQUAL;\n        cmp (f y) (f z) = EQUAL\\<rbrakk>\n       \\<Longrightarrow> cmp (f x) (f z) = EQUAL", "apply (erule (1) linorder_on.trans[OF LO, rotated -2], auto) []"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "text \\<open>Combine\\<close>"], ["", "definition \"cmp_combine D1 cmp1 D2 cmp2 a b \\<equiv> \n  if a\\<in>D1 \\<and> b\\<in>D1 then cmp1 a b\n  else if a\\<in>D1 \\<and> b\\<in>D2 then LESS\n  else if a\\<in>D2 \\<and> b\\<in>D1 then GREATER\n  else cmp2 a b\n\""], ["", "(* TODO: Move *)"], ["", "lemma UnE': \n  assumes \"x\\<in>A\\<union>B\"\n  obtains \"x\\<in>A\" | \"x\\<notin>A\" \"x\\<in>B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<in> A \\<Longrightarrow> thesis;\n     \\<lbrakk>x \\<notin> A; x \\<in> B\\<rbrakk>\n     \\<Longrightarrow> thesis\\<rbrakk>\n    \\<Longrightarrow> thesis", "using assms"], ["proof (prove)\nusing this:\n  x \\<in> A \\<union> B\n\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<in> A \\<Longrightarrow> thesis;\n     \\<lbrakk>x \\<notin> A; x \\<in> B\\<rbrakk>\n     \\<Longrightarrow> thesis\\<rbrakk>\n    \\<Longrightarrow> thesis", "by blast"], ["", "lemma combine_linorder[intro?]:\n  assumes \"linorder_on D1 cmp1\"\n  assumes \"linorder_on D2 cmp2\"\n  assumes \"D = D1\\<union>D2\"\n  shows \"linorder_on D (cmp_combine D1 cmp1 D2 cmp2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. linorder_on D (cmp_combine D1 cmp1 D2 cmp2)", "apply unfold_locales"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<in> D; y \\<in> D\\<rbrakk>\n       \\<Longrightarrow> (cmp_combine D1 cmp1 D2 cmp2 x y = LESS) =\n                         (cmp_combine D1 cmp1 D2 cmp2 y x = GREATER)\n 2. \\<And>x.\n       x \\<in> D \\<Longrightarrow> cmp_combine D1 cmp1 D2 cmp2 x x = EQUAL\n 3. \\<And>x y z.\n       \\<lbrakk>x \\<in> D; y \\<in> D; z \\<in> D;\n        cmp_combine D1 cmp1 D2 cmp2 x y = LESS;\n        cmp_combine D1 cmp1 D2 cmp2 y z = LESS\\<rbrakk>\n       \\<Longrightarrow> cmp_combine D1 cmp1 D2 cmp2 x z = LESS\n 4. \\<And>x y z.\n       \\<lbrakk>x \\<in> D; y \\<in> D; z \\<in> D;\n        cmp_combine D1 cmp1 D2 cmp2 x y = LESS;\n        cmp_combine D1 cmp1 D2 cmp2 y z = EQUAL\\<rbrakk>\n       \\<Longrightarrow> cmp_combine D1 cmp1 D2 cmp2 x z = LESS\n 5. \\<And>x y z.\n       \\<lbrakk>x \\<in> D; y \\<in> D; z \\<in> D;\n        cmp_combine D1 cmp1 D2 cmp2 x y = EQUAL;\n        cmp_combine D1 cmp1 D2 cmp2 y z = LESS\\<rbrakk>\n       \\<Longrightarrow> cmp_combine D1 cmp1 D2 cmp2 x z = LESS\n 6. \\<And>x y z.\n       \\<lbrakk>x \\<in> D; y \\<in> D; z \\<in> D;\n        cmp_combine D1 cmp1 D2 cmp2 x y = EQUAL;\n        cmp_combine D1 cmp1 D2 cmp2 y z = EQUAL\\<rbrakk>\n       \\<Longrightarrow> cmp_combine D1 cmp1 D2 cmp2 x z = EQUAL", "unfolding cmp_combine_def"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<in> D; y \\<in> D\\<rbrakk>\n       \\<Longrightarrow> ((if x \\<in> D1 \\<and> y \\<in> D1 then cmp1 x y\n                           else if x \\<in> D1 \\<and> y \\<in> D2 then LESS\n                                else if x \\<in> D2 \\<and> y \\<in> D1\n                                     then GREATER else cmp2 x y) =\n                          LESS) =\n                         ((if y \\<in> D1 \\<and> x \\<in> D1 then cmp1 y x\n                           else if y \\<in> D1 \\<and> x \\<in> D2 then LESS\n                                else if y \\<in> D2 \\<and> x \\<in> D1\n                                     then GREATER else cmp2 y x) =\n                          GREATER)\n 2. \\<And>x.\n       x \\<in> D \\<Longrightarrow>\n       (if x \\<in> D1 \\<and> x \\<in> D1 then cmp1 x x\n        else if x \\<in> D1 \\<and> x \\<in> D2 then LESS\n             else if x \\<in> D2 \\<and> x \\<in> D1 then GREATER\n                  else cmp2 x x) =\n       EQUAL\n 3. \\<And>x y z.\n       \\<lbrakk>x \\<in> D; y \\<in> D; z \\<in> D;\n        (if x \\<in> D1 \\<and> y \\<in> D1 then cmp1 x y\n         else if x \\<in> D1 \\<and> y \\<in> D2 then LESS\n              else if x \\<in> D2 \\<and> y \\<in> D1 then GREATER\n                   else cmp2 x y) =\n        LESS;\n        (if y \\<in> D1 \\<and> z \\<in> D1 then cmp1 y z\n         else if y \\<in> D1 \\<and> z \\<in> D2 then LESS\n              else if y \\<in> D2 \\<and> z \\<in> D1 then GREATER\n                   else cmp2 y z) =\n        LESS\\<rbrakk>\n       \\<Longrightarrow> (if x \\<in> D1 \\<and> z \\<in> D1 then cmp1 x z\n                          else if x \\<in> D1 \\<and> z \\<in> D2 then LESS\n                               else if x \\<in> D2 \\<and> z \\<in> D1\n                                    then GREATER else cmp2 x z) =\n                         LESS\n 4. \\<And>x y z.\n       \\<lbrakk>x \\<in> D; y \\<in> D; z \\<in> D;\n        (if x \\<in> D1 \\<and> y \\<in> D1 then cmp1 x y\n         else if x \\<in> D1 \\<and> y \\<in> D2 then LESS\n              else if x \\<in> D2 \\<and> y \\<in> D1 then GREATER\n                   else cmp2 x y) =\n        LESS;\n        (if y \\<in> D1 \\<and> z \\<in> D1 then cmp1 y z\n         else if y \\<in> D1 \\<and> z \\<in> D2 then LESS\n              else if y \\<in> D2 \\<and> z \\<in> D1 then GREATER\n                   else cmp2 y z) =\n        EQUAL\\<rbrakk>\n       \\<Longrightarrow> (if x \\<in> D1 \\<and> z \\<in> D1 then cmp1 x z\n                          else if x \\<in> D1 \\<and> z \\<in> D2 then LESS\n                               else if x \\<in> D2 \\<and> z \\<in> D1\n                                    then GREATER else cmp2 x z) =\n                         LESS\n 5. \\<And>x y z.\n       \\<lbrakk>x \\<in> D; y \\<in> D; z \\<in> D;\n        (if x \\<in> D1 \\<and> y \\<in> D1 then cmp1 x y\n         else if x \\<in> D1 \\<and> y \\<in> D2 then LESS\n              else if x \\<in> D2 \\<and> y \\<in> D1 then GREATER\n                   else cmp2 x y) =\n        EQUAL;\n        (if y \\<in> D1 \\<and> z \\<in> D1 then cmp1 y z\n         else if y \\<in> D1 \\<and> z \\<in> D2 then LESS\n              else if y \\<in> D2 \\<and> z \\<in> D1 then GREATER\n                   else cmp2 y z) =\n        LESS\\<rbrakk>\n       \\<Longrightarrow> (if x \\<in> D1 \\<and> z \\<in> D1 then cmp1 x z\n                          else if x \\<in> D1 \\<and> z \\<in> D2 then LESS\n                               else if x \\<in> D2 \\<and> z \\<in> D1\n                                    then GREATER else cmp2 x z) =\n                         LESS\n 6. \\<And>x y z.\n       \\<lbrakk>x \\<in> D; y \\<in> D; z \\<in> D;\n        (if x \\<in> D1 \\<and> y \\<in> D1 then cmp1 x y\n         else if x \\<in> D1 \\<and> y \\<in> D2 then LESS\n              else if x \\<in> D2 \\<and> y \\<in> D1 then GREATER\n                   else cmp2 x y) =\n        EQUAL;\n        (if y \\<in> D1 \\<and> z \\<in> D1 then cmp1 y z\n         else if y \\<in> D1 \\<and> z \\<in> D2 then LESS\n              else if y \\<in> D2 \\<and> z \\<in> D1 then GREATER\n                   else cmp2 y z) =\n        EQUAL\\<rbrakk>\n       \\<Longrightarrow> (if x \\<in> D1 \\<and> z \\<in> D1 then cmp1 x z\n                          else if x \\<in> D1 \\<and> z \\<in> D2 then LESS\n                               else if x \\<in> D2 \\<and> z \\<in> D1\n                                    then GREATER else cmp2 x z) =\n                         EQUAL", "using assms"], ["proof (prove)\nusing this:\n  linorder_on D1 cmp1\n  linorder_on D2 cmp2\n  D = D1 \\<union> D2\n\ngoal (6 subgoals):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<in> D; y \\<in> D\\<rbrakk>\n       \\<Longrightarrow> ((if x \\<in> D1 \\<and> y \\<in> D1 then cmp1 x y\n                           else if x \\<in> D1 \\<and> y \\<in> D2 then LESS\n                                else if x \\<in> D2 \\<and> y \\<in> D1\n                                     then GREATER else cmp2 x y) =\n                          LESS) =\n                         ((if y \\<in> D1 \\<and> x \\<in> D1 then cmp1 y x\n                           else if y \\<in> D1 \\<and> x \\<in> D2 then LESS\n                                else if y \\<in> D2 \\<and> x \\<in> D1\n                                     then GREATER else cmp2 y x) =\n                          GREATER)\n 2. \\<And>x.\n       x \\<in> D \\<Longrightarrow>\n       (if x \\<in> D1 \\<and> x \\<in> D1 then cmp1 x x\n        else if x \\<in> D1 \\<and> x \\<in> D2 then LESS\n             else if x \\<in> D2 \\<and> x \\<in> D1 then GREATER\n                  else cmp2 x x) =\n       EQUAL\n 3. \\<And>x y z.\n       \\<lbrakk>x \\<in> D; y \\<in> D; z \\<in> D;\n        (if x \\<in> D1 \\<and> y \\<in> D1 then cmp1 x y\n         else if x \\<in> D1 \\<and> y \\<in> D2 then LESS\n              else if x \\<in> D2 \\<and> y \\<in> D1 then GREATER\n                   else cmp2 x y) =\n        LESS;\n        (if y \\<in> D1 \\<and> z \\<in> D1 then cmp1 y z\n         else if y \\<in> D1 \\<and> z \\<in> D2 then LESS\n              else if y \\<in> D2 \\<and> z \\<in> D1 then GREATER\n                   else cmp2 y z) =\n        LESS\\<rbrakk>\n       \\<Longrightarrow> (if x \\<in> D1 \\<and> z \\<in> D1 then cmp1 x z\n                          else if x \\<in> D1 \\<and> z \\<in> D2 then LESS\n                               else if x \\<in> D2 \\<and> z \\<in> D1\n                                    then GREATER else cmp2 x z) =\n                         LESS\n 4. \\<And>x y z.\n       \\<lbrakk>x \\<in> D; y \\<in> D; z \\<in> D;\n        (if x \\<in> D1 \\<and> y \\<in> D1 then cmp1 x y\n         else if x \\<in> D1 \\<and> y \\<in> D2 then LESS\n              else if x \\<in> D2 \\<and> y \\<in> D1 then GREATER\n                   else cmp2 x y) =\n        LESS;\n        (if y \\<in> D1 \\<and> z \\<in> D1 then cmp1 y z\n         else if y \\<in> D1 \\<and> z \\<in> D2 then LESS\n              else if y \\<in> D2 \\<and> z \\<in> D1 then GREATER\n                   else cmp2 y z) =\n        EQUAL\\<rbrakk>\n       \\<Longrightarrow> (if x \\<in> D1 \\<and> z \\<in> D1 then cmp1 x z\n                          else if x \\<in> D1 \\<and> z \\<in> D2 then LESS\n                               else if x \\<in> D2 \\<and> z \\<in> D1\n                                    then GREATER else cmp2 x z) =\n                         LESS\n 5. \\<And>x y z.\n       \\<lbrakk>x \\<in> D; y \\<in> D; z \\<in> D;\n        (if x \\<in> D1 \\<and> y \\<in> D1 then cmp1 x y\n         else if x \\<in> D1 \\<and> y \\<in> D2 then LESS\n              else if x \\<in> D2 \\<and> y \\<in> D1 then GREATER\n                   else cmp2 x y) =\n        EQUAL;\n        (if y \\<in> D1 \\<and> z \\<in> D1 then cmp1 y z\n         else if y \\<in> D1 \\<and> z \\<in> D2 then LESS\n              else if y \\<in> D2 \\<and> z \\<in> D1 then GREATER\n                   else cmp2 y z) =\n        LESS\\<rbrakk>\n       \\<Longrightarrow> (if x \\<in> D1 \\<and> z \\<in> D1 then cmp1 x z\n                          else if x \\<in> D1 \\<and> z \\<in> D2 then LESS\n                               else if x \\<in> D2 \\<and> z \\<in> D1\n                                    then GREATER else cmp2 x z) =\n                         LESS\n 6. \\<And>x y z.\n       \\<lbrakk>x \\<in> D; y \\<in> D; z \\<in> D;\n        (if x \\<in> D1 \\<and> y \\<in> D1 then cmp1 x y\n         else if x \\<in> D1 \\<and> y \\<in> D2 then LESS\n              else if x \\<in> D2 \\<and> y \\<in> D1 then GREATER\n                   else cmp2 x y) =\n        EQUAL;\n        (if y \\<in> D1 \\<and> z \\<in> D1 then cmp1 y z\n         else if y \\<in> D1 \\<and> z \\<in> D2 then LESS\n              else if y \\<in> D2 \\<and> z \\<in> D1 then GREATER\n                   else cmp2 y z) =\n        EQUAL\\<rbrakk>\n       \\<Longrightarrow> (if x \\<in> D1 \\<and> z \\<in> D1 then cmp1 x z\n                          else if x \\<in> D1 \\<and> z \\<in> D2 then LESS\n                               else if x \\<in> D2 \\<and> z \\<in> D1\n                                    then GREATER else cmp2 x z) =\n                         EQUAL", "apply -"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<in> D; y \\<in> D; linorder_on D1 cmp1;\n        linorder_on D2 cmp2; D = D1 \\<union> D2\\<rbrakk>\n       \\<Longrightarrow> ((if x \\<in> D1 \\<and> y \\<in> D1 then cmp1 x y\n                           else if x \\<in> D1 \\<and> y \\<in> D2 then LESS\n                                else if x \\<in> D2 \\<and> y \\<in> D1\n                                     then GREATER else cmp2 x y) =\n                          LESS) =\n                         ((if y \\<in> D1 \\<and> x \\<in> D1 then cmp1 y x\n                           else if y \\<in> D1 \\<and> x \\<in> D2 then LESS\n                                else if y \\<in> D2 \\<and> x \\<in> D1\n                                     then GREATER else cmp2 y x) =\n                          GREATER)\n 2. \\<And>x.\n       \\<lbrakk>x \\<in> D; linorder_on D1 cmp1; linorder_on D2 cmp2;\n        D = D1 \\<union> D2\\<rbrakk>\n       \\<Longrightarrow> (if x \\<in> D1 \\<and> x \\<in> D1 then cmp1 x x\n                          else if x \\<in> D1 \\<and> x \\<in> D2 then LESS\n                               else if x \\<in> D2 \\<and> x \\<in> D1\n                                    then GREATER else cmp2 x x) =\n                         EQUAL\n 3. \\<And>x y z.\n       \\<lbrakk>x \\<in> D; y \\<in> D; z \\<in> D;\n        (if x \\<in> D1 \\<and> y \\<in> D1 then cmp1 x y\n         else if x \\<in> D1 \\<and> y \\<in> D2 then LESS\n              else if x \\<in> D2 \\<and> y \\<in> D1 then GREATER\n                   else cmp2 x y) =\n        LESS;\n        (if y \\<in> D1 \\<and> z \\<in> D1 then cmp1 y z\n         else if y \\<in> D1 \\<and> z \\<in> D2 then LESS\n              else if y \\<in> D2 \\<and> z \\<in> D1 then GREATER\n                   else cmp2 y z) =\n        LESS;\n        linorder_on D1 cmp1; linorder_on D2 cmp2;\n        D = D1 \\<union> D2\\<rbrakk>\n       \\<Longrightarrow> (if x \\<in> D1 \\<and> z \\<in> D1 then cmp1 x z\n                          else if x \\<in> D1 \\<and> z \\<in> D2 then LESS\n                               else if x \\<in> D2 \\<and> z \\<in> D1\n                                    then GREATER else cmp2 x z) =\n                         LESS\n 4. \\<And>x y z.\n       \\<lbrakk>x \\<in> D; y \\<in> D; z \\<in> D;\n        (if x \\<in> D1 \\<and> y \\<in> D1 then cmp1 x y\n         else if x \\<in> D1 \\<and> y \\<in> D2 then LESS\n              else if x \\<in> D2 \\<and> y \\<in> D1 then GREATER\n                   else cmp2 x y) =\n        LESS;\n        (if y \\<in> D1 \\<and> z \\<in> D1 then cmp1 y z\n         else if y \\<in> D1 \\<and> z \\<in> D2 then LESS\n              else if y \\<in> D2 \\<and> z \\<in> D1 then GREATER\n                   else cmp2 y z) =\n        EQUAL;\n        linorder_on D1 cmp1; linorder_on D2 cmp2;\n        D = D1 \\<union> D2\\<rbrakk>\n       \\<Longrightarrow> (if x \\<in> D1 \\<and> z \\<in> D1 then cmp1 x z\n                          else if x \\<in> D1 \\<and> z \\<in> D2 then LESS\n                               else if x \\<in> D2 \\<and> z \\<in> D1\n                                    then GREATER else cmp2 x z) =\n                         LESS\n 5. \\<And>x y z.\n       \\<lbrakk>x \\<in> D; y \\<in> D; z \\<in> D;\n        (if x \\<in> D1 \\<and> y \\<in> D1 then cmp1 x y\n         else if x \\<in> D1 \\<and> y \\<in> D2 then LESS\n              else if x \\<in> D2 \\<and> y \\<in> D1 then GREATER\n                   else cmp2 x y) =\n        EQUAL;\n        (if y \\<in> D1 \\<and> z \\<in> D1 then cmp1 y z\n         else if y \\<in> D1 \\<and> z \\<in> D2 then LESS\n              else if y \\<in> D2 \\<and> z \\<in> D1 then GREATER\n                   else cmp2 y z) =\n        LESS;\n        linorder_on D1 cmp1; linorder_on D2 cmp2;\n        D = D1 \\<union> D2\\<rbrakk>\n       \\<Longrightarrow> (if x \\<in> D1 \\<and> z \\<in> D1 then cmp1 x z\n                          else if x \\<in> D1 \\<and> z \\<in> D2 then LESS\n                               else if x \\<in> D2 \\<and> z \\<in> D1\n                                    then GREATER else cmp2 x z) =\n                         LESS\n 6. \\<And>x y z.\n       \\<lbrakk>x \\<in> D; y \\<in> D; z \\<in> D;\n        (if x \\<in> D1 \\<and> y \\<in> D1 then cmp1 x y\n         else if x \\<in> D1 \\<and> y \\<in> D2 then LESS\n              else if x \\<in> D2 \\<and> y \\<in> D1 then GREATER\n                   else cmp2 x y) =\n        EQUAL;\n        (if y \\<in> D1 \\<and> z \\<in> D1 then cmp1 y z\n         else if y \\<in> D1 \\<and> z \\<in> D2 then LESS\n              else if y \\<in> D2 \\<and> z \\<in> D1 then GREATER\n                   else cmp2 y z) =\n        EQUAL;\n        linorder_on D1 cmp1; linorder_on D2 cmp2;\n        D = D1 \\<union> D2\\<rbrakk>\n       \\<Longrightarrow> (if x \\<in> D1 \\<and> z \\<in> D1 then cmp1 x z\n                          else if x \\<in> D1 \\<and> z \\<in> D2 then LESS\n                               else if x \\<in> D2 \\<and> z \\<in> D1\n                                    then GREATER else cmp2 x z) =\n                         EQUAL", "apply (simp only:)"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<in> D1 \\<union> D2; y \\<in> D1 \\<union> D2;\n        linorder_on D1 cmp1; linorder_on D2 cmp2;\n        D = D1 \\<union> D2\\<rbrakk>\n       \\<Longrightarrow> ((if x \\<in> D1 \\<and> y \\<in> D1 then cmp1 x y\n                           else if x \\<in> D1 \\<and> y \\<in> D2 then LESS\n                                else if x \\<in> D2 \\<and> y \\<in> D1\n                                     then GREATER else cmp2 x y) =\n                          LESS) =\n                         ((if y \\<in> D1 \\<and> x \\<in> D1 then cmp1 y x\n                           else if y \\<in> D1 \\<and> x \\<in> D2 then LESS\n                                else if y \\<in> D2 \\<and> x \\<in> D1\n                                     then GREATER else cmp2 y x) =\n                          GREATER)\n 2. \\<And>x.\n       \\<lbrakk>x \\<in> D; linorder_on D1 cmp1; linorder_on D2 cmp2;\n        D = D1 \\<union> D2\\<rbrakk>\n       \\<Longrightarrow> (if x \\<in> D1 \\<and> x \\<in> D1 then cmp1 x x\n                          else if x \\<in> D1 \\<and> x \\<in> D2 then LESS\n                               else if x \\<in> D2 \\<and> x \\<in> D1\n                                    then GREATER else cmp2 x x) =\n                         EQUAL\n 3. \\<And>x y z.\n       \\<lbrakk>x \\<in> D; y \\<in> D; z \\<in> D;\n        (if x \\<in> D1 \\<and> y \\<in> D1 then cmp1 x y\n         else if x \\<in> D1 \\<and> y \\<in> D2 then LESS\n              else if x \\<in> D2 \\<and> y \\<in> D1 then GREATER\n                   else cmp2 x y) =\n        LESS;\n        (if y \\<in> D1 \\<and> z \\<in> D1 then cmp1 y z\n         else if y \\<in> D1 \\<and> z \\<in> D2 then LESS\n              else if y \\<in> D2 \\<and> z \\<in> D1 then GREATER\n                   else cmp2 y z) =\n        LESS;\n        linorder_on D1 cmp1; linorder_on D2 cmp2;\n        D = D1 \\<union> D2\\<rbrakk>\n       \\<Longrightarrow> (if x \\<in> D1 \\<and> z \\<in> D1 then cmp1 x z\n                          else if x \\<in> D1 \\<and> z \\<in> D2 then LESS\n                               else if x \\<in> D2 \\<and> z \\<in> D1\n                                    then GREATER else cmp2 x z) =\n                         LESS\n 4. \\<And>x y z.\n       \\<lbrakk>x \\<in> D; y \\<in> D; z \\<in> D;\n        (if x \\<in> D1 \\<and> y \\<in> D1 then cmp1 x y\n         else if x \\<in> D1 \\<and> y \\<in> D2 then LESS\n              else if x \\<in> D2 \\<and> y \\<in> D1 then GREATER\n                   else cmp2 x y) =\n        LESS;\n        (if y \\<in> D1 \\<and> z \\<in> D1 then cmp1 y z\n         else if y \\<in> D1 \\<and> z \\<in> D2 then LESS\n              else if y \\<in> D2 \\<and> z \\<in> D1 then GREATER\n                   else cmp2 y z) =\n        EQUAL;\n        linorder_on D1 cmp1; linorder_on D2 cmp2;\n        D = D1 \\<union> D2\\<rbrakk>\n       \\<Longrightarrow> (if x \\<in> D1 \\<and> z \\<in> D1 then cmp1 x z\n                          else if x \\<in> D1 \\<and> z \\<in> D2 then LESS\n                               else if x \\<in> D2 \\<and> z \\<in> D1\n                                    then GREATER else cmp2 x z) =\n                         LESS\n 5. \\<And>x y z.\n       \\<lbrakk>x \\<in> D; y \\<in> D; z \\<in> D;\n        (if x \\<in> D1 \\<and> y \\<in> D1 then cmp1 x y\n         else if x \\<in> D1 \\<and> y \\<in> D2 then LESS\n              else if x \\<in> D2 \\<and> y \\<in> D1 then GREATER\n                   else cmp2 x y) =\n        EQUAL;\n        (if y \\<in> D1 \\<and> z \\<in> D1 then cmp1 y z\n         else if y \\<in> D1 \\<and> z \\<in> D2 then LESS\n              else if y \\<in> D2 \\<and> z \\<in> D1 then GREATER\n                   else cmp2 y z) =\n        LESS;\n        linorder_on D1 cmp1; linorder_on D2 cmp2;\n        D = D1 \\<union> D2\\<rbrakk>\n       \\<Longrightarrow> (if x \\<in> D1 \\<and> z \\<in> D1 then cmp1 x z\n                          else if x \\<in> D1 \\<and> z \\<in> D2 then LESS\n                               else if x \\<in> D2 \\<and> z \\<in> D1\n                                    then GREATER else cmp2 x z) =\n                         LESS\n 6. \\<And>x y z.\n       \\<lbrakk>x \\<in> D; y \\<in> D; z \\<in> D;\n        (if x \\<in> D1 \\<and> y \\<in> D1 then cmp1 x y\n         else if x \\<in> D1 \\<and> y \\<in> D2 then LESS\n              else if x \\<in> D2 \\<and> y \\<in> D1 then GREATER\n                   else cmp2 x y) =\n        EQUAL;\n        (if y \\<in> D1 \\<and> z \\<in> D1 then cmp1 y z\n         else if y \\<in> D1 \\<and> z \\<in> D2 then LESS\n              else if y \\<in> D2 \\<and> z \\<in> D1 then GREATER\n                   else cmp2 y z) =\n        EQUAL;\n        linorder_on D1 cmp1; linorder_on D2 cmp2;\n        D = D1 \\<union> D2\\<rbrakk>\n       \\<Longrightarrow> (if x \\<in> D1 \\<and> z \\<in> D1 then cmp1 x z\n                          else if x \\<in> D1 \\<and> z \\<in> D2 then LESS\n                               else if x \\<in> D2 \\<and> z \\<in> D1\n                                    then GREATER else cmp2 x z) =\n                         EQUAL", "apply (elim UnE)"], ["proof (prove)\ngoal (9 subgoals):\n 1. \\<And>x y.\n       \\<lbrakk>linorder_on D1 cmp1; linorder_on D2 cmp2;\n        D = D1 \\<union> D2; x \\<in> D1; y \\<in> D1\\<rbrakk>\n       \\<Longrightarrow> ((if x \\<in> D1 \\<and> y \\<in> D1 then cmp1 x y\n                           else if x \\<in> D1 \\<and> y \\<in> D2 then LESS\n                                else if x \\<in> D2 \\<and> y \\<in> D1\n                                     then GREATER else cmp2 x y) =\n                          LESS) =\n                         ((if y \\<in> D1 \\<and> x \\<in> D1 then cmp1 y x\n                           else if y \\<in> D1 \\<and> x \\<in> D2 then LESS\n                                else if y \\<in> D2 \\<and> x \\<in> D1\n                                     then GREATER else cmp2 y x) =\n                          GREATER)\n 2. \\<And>x y.\n       \\<lbrakk>linorder_on D1 cmp1; linorder_on D2 cmp2;\n        D = D1 \\<union> D2; x \\<in> D1; y \\<in> D2\\<rbrakk>\n       \\<Longrightarrow> ((if x \\<in> D1 \\<and> y \\<in> D1 then cmp1 x y\n                           else if x \\<in> D1 \\<and> y \\<in> D2 then LESS\n                                else if x \\<in> D2 \\<and> y \\<in> D1\n                                     then GREATER else cmp2 x y) =\n                          LESS) =\n                         ((if y \\<in> D1 \\<and> x \\<in> D1 then cmp1 y x\n                           else if y \\<in> D1 \\<and> x \\<in> D2 then LESS\n                                else if y \\<in> D2 \\<and> x \\<in> D1\n                                     then GREATER else cmp2 y x) =\n                          GREATER)\n 3. \\<And>x y.\n       \\<lbrakk>linorder_on D1 cmp1; linorder_on D2 cmp2;\n        D = D1 \\<union> D2; x \\<in> D2; y \\<in> D1\\<rbrakk>\n       \\<Longrightarrow> ((if x \\<in> D1 \\<and> y \\<in> D1 then cmp1 x y\n                           else if x \\<in> D1 \\<and> y \\<in> D2 then LESS\n                                else if x \\<in> D2 \\<and> y \\<in> D1\n                                     then GREATER else cmp2 x y) =\n                          LESS) =\n                         ((if y \\<in> D1 \\<and> x \\<in> D1 then cmp1 y x\n                           else if y \\<in> D1 \\<and> x \\<in> D2 then LESS\n                                else if y \\<in> D2 \\<and> x \\<in> D1\n                                     then GREATER else cmp2 y x) =\n                          GREATER)\n 4. \\<And>x y.\n       \\<lbrakk>linorder_on D1 cmp1; linorder_on D2 cmp2;\n        D = D1 \\<union> D2; x \\<in> D2; y \\<in> D2\\<rbrakk>\n       \\<Longrightarrow> ((if x \\<in> D1 \\<and> y \\<in> D1 then cmp1 x y\n                           else if x \\<in> D1 \\<and> y \\<in> D2 then LESS\n                                else if x \\<in> D2 \\<and> y \\<in> D1\n                                     then GREATER else cmp2 x y) =\n                          LESS) =\n                         ((if y \\<in> D1 \\<and> x \\<in> D1 then cmp1 y x\n                           else if y \\<in> D1 \\<and> x \\<in> D2 then LESS\n                                else if y \\<in> D2 \\<and> x \\<in> D1\n                                     then GREATER else cmp2 y x) =\n                          GREATER)\n 5. \\<And>x.\n       \\<lbrakk>x \\<in> D; linorder_on D1 cmp1; linorder_on D2 cmp2;\n        D = D1 \\<union> D2\\<rbrakk>\n       \\<Longrightarrow> (if x \\<in> D1 \\<and> x \\<in> D1 then cmp1 x x\n                          else if x \\<in> D1 \\<and> x \\<in> D2 then LESS\n                               else if x \\<in> D2 \\<and> x \\<in> D1\n                                    then GREATER else cmp2 x x) =\n                         EQUAL\n 6. \\<And>x y z.\n       \\<lbrakk>x \\<in> D; y \\<in> D; z \\<in> D;\n        (if x \\<in> D1 \\<and> y \\<in> D1 then cmp1 x y\n         else if x \\<in> D1 \\<and> y \\<in> D2 then LESS\n              else if x \\<in> D2 \\<and> y \\<in> D1 then GREATER\n                   else cmp2 x y) =\n        LESS;\n        (if y \\<in> D1 \\<and> z \\<in> D1 then cmp1 y z\n         else if y \\<in> D1 \\<and> z \\<in> D2 then LESS\n              else if y \\<in> D2 \\<and> z \\<in> D1 then GREATER\n                   else cmp2 y z) =\n        LESS;\n        linorder_on D1 cmp1; linorder_on D2 cmp2;\n        D = D1 \\<union> D2\\<rbrakk>\n       \\<Longrightarrow> (if x \\<in> D1 \\<and> z \\<in> D1 then cmp1 x z\n                          else if x \\<in> D1 \\<and> z \\<in> D2 then LESS\n                               else if x \\<in> D2 \\<and> z \\<in> D1\n                                    then GREATER else cmp2 x z) =\n                         LESS\n 7. \\<And>x y z.\n       \\<lbrakk>x \\<in> D; y \\<in> D; z \\<in> D;\n        (if x \\<in> D1 \\<and> y \\<in> D1 then cmp1 x y\n         else if x \\<in> D1 \\<and> y \\<in> D2 then LESS\n              else if x \\<in> D2 \\<and> y \\<in> D1 then GREATER\n                   else cmp2 x y) =\n        LESS;\n        (if y \\<in> D1 \\<and> z \\<in> D1 then cmp1 y z\n         else if y \\<in> D1 \\<and> z \\<in> D2 then LESS\n              else if y \\<in> D2 \\<and> z \\<in> D1 then GREATER\n                   else cmp2 y z) =\n        EQUAL;\n        linorder_on D1 cmp1; linorder_on D2 cmp2;\n        D = D1 \\<union> D2\\<rbrakk>\n       \\<Longrightarrow> (if x \\<in> D1 \\<and> z \\<in> D1 then cmp1 x z\n                          else if x \\<in> D1 \\<and> z \\<in> D2 then LESS\n                               else if x \\<in> D2 \\<and> z \\<in> D1\n                                    then GREATER else cmp2 x z) =\n                         LESS\n 8. \\<And>x y z.\n       \\<lbrakk>x \\<in> D; y \\<in> D; z \\<in> D;\n        (if x \\<in> D1 \\<and> y \\<in> D1 then cmp1 x y\n         else if x \\<in> D1 \\<and> y \\<in> D2 then LESS\n              else if x \\<in> D2 \\<and> y \\<in> D1 then GREATER\n                   else cmp2 x y) =\n        EQUAL;\n        (if y \\<in> D1 \\<and> z \\<in> D1 then cmp1 y z\n         else if y \\<in> D1 \\<and> z \\<in> D2 then LESS\n              else if y \\<in> D2 \\<and> z \\<in> D1 then GREATER\n                   else cmp2 y z) =\n        LESS;\n        linorder_on D1 cmp1; linorder_on D2 cmp2;\n        D = D1 \\<union> D2\\<rbrakk>\n       \\<Longrightarrow> (if x \\<in> D1 \\<and> z \\<in> D1 then cmp1 x z\n                          else if x \\<in> D1 \\<and> z \\<in> D2 then LESS\n                               else if x \\<in> D2 \\<and> z \\<in> D1\n                                    then GREATER else cmp2 x z) =\n                         LESS\n 9. \\<And>x y z.\n       \\<lbrakk>x \\<in> D; y \\<in> D; z \\<in> D;\n        (if x \\<in> D1 \\<and> y \\<in> D1 then cmp1 x y\n         else if x \\<in> D1 \\<and> y \\<in> D2 then LESS\n              else if x \\<in> D2 \\<and> y \\<in> D1 then GREATER\n                   else cmp2 x y) =\n        EQUAL;\n        (if y \\<in> D1 \\<and> z \\<in> D1 then cmp1 y z\n         else if y \\<in> D1 \\<and> z \\<in> D2 then LESS\n              else if y \\<in> D2 \\<and> z \\<in> D1 then GREATER\n                   else cmp2 y z) =\n        EQUAL;\n        linorder_on D1 cmp1; linorder_on D2 cmp2;\n        D = D1 \\<union> D2\\<rbrakk>\n       \\<Longrightarrow> (if x \\<in> D1 \\<and> z \\<in> D1 then cmp1 x z\n                          else if x \\<in> D1 \\<and> z \\<in> D2 then LESS\n                               else if x \\<in> D2 \\<and> z \\<in> D1\n                                    then GREATER else cmp2 x z) =\n                         EQUAL", "apply (auto dest: linorder_on.lt_eq) [4]"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>x \\<in> D; linorder_on D1 cmp1; linorder_on D2 cmp2;\n        D = D1 \\<union> D2\\<rbrakk>\n       \\<Longrightarrow> (if x \\<in> D1 \\<and> x \\<in> D1 then cmp1 x x\n                          else if x \\<in> D1 \\<and> x \\<in> D2 then LESS\n                               else if x \\<in> D2 \\<and> x \\<in> D1\n                                    then GREATER else cmp2 x x) =\n                         EQUAL\n 2. \\<And>x y z.\n       \\<lbrakk>x \\<in> D; y \\<in> D; z \\<in> D;\n        (if x \\<in> D1 \\<and> y \\<in> D1 then cmp1 x y\n         else if x \\<in> D1 \\<and> y \\<in> D2 then LESS\n              else if x \\<in> D2 \\<and> y \\<in> D1 then GREATER\n                   else cmp2 x y) =\n        LESS;\n        (if y \\<in> D1 \\<and> z \\<in> D1 then cmp1 y z\n         else if y \\<in> D1 \\<and> z \\<in> D2 then LESS\n              else if y \\<in> D2 \\<and> z \\<in> D1 then GREATER\n                   else cmp2 y z) =\n        LESS;\n        linorder_on D1 cmp1; linorder_on D2 cmp2;\n        D = D1 \\<union> D2\\<rbrakk>\n       \\<Longrightarrow> (if x \\<in> D1 \\<and> z \\<in> D1 then cmp1 x z\n                          else if x \\<in> D1 \\<and> z \\<in> D2 then LESS\n                               else if x \\<in> D2 \\<and> z \\<in> D1\n                                    then GREATER else cmp2 x z) =\n                         LESS\n 3. \\<And>x y z.\n       \\<lbrakk>x \\<in> D; y \\<in> D; z \\<in> D;\n        (if x \\<in> D1 \\<and> y \\<in> D1 then cmp1 x y\n         else if x \\<in> D1 \\<and> y \\<in> D2 then LESS\n              else if x \\<in> D2 \\<and> y \\<in> D1 then GREATER\n                   else cmp2 x y) =\n        LESS;\n        (if y \\<in> D1 \\<and> z \\<in> D1 then cmp1 y z\n         else if y \\<in> D1 \\<and> z \\<in> D2 then LESS\n              else if y \\<in> D2 \\<and> z \\<in> D1 then GREATER\n                   else cmp2 y z) =\n        EQUAL;\n        linorder_on D1 cmp1; linorder_on D2 cmp2;\n        D = D1 \\<union> D2\\<rbrakk>\n       \\<Longrightarrow> (if x \\<in> D1 \\<and> z \\<in> D1 then cmp1 x z\n                          else if x \\<in> D1 \\<and> z \\<in> D2 then LESS\n                               else if x \\<in> D2 \\<and> z \\<in> D1\n                                    then GREATER else cmp2 x z) =\n                         LESS\n 4. \\<And>x y z.\n       \\<lbrakk>x \\<in> D; y \\<in> D; z \\<in> D;\n        (if x \\<in> D1 \\<and> y \\<in> D1 then cmp1 x y\n         else if x \\<in> D1 \\<and> y \\<in> D2 then LESS\n              else if x \\<in> D2 \\<and> y \\<in> D1 then GREATER\n                   else cmp2 x y) =\n        EQUAL;\n        (if y \\<in> D1 \\<and> z \\<in> D1 then cmp1 y z\n         else if y \\<in> D1 \\<and> z \\<in> D2 then LESS\n              else if y \\<in> D2 \\<and> z \\<in> D1 then GREATER\n                   else cmp2 y z) =\n        LESS;\n        linorder_on D1 cmp1; linorder_on D2 cmp2;\n        D = D1 \\<union> D2\\<rbrakk>\n       \\<Longrightarrow> (if x \\<in> D1 \\<and> z \\<in> D1 then cmp1 x z\n                          else if x \\<in> D1 \\<and> z \\<in> D2 then LESS\n                               else if x \\<in> D2 \\<and> z \\<in> D1\n                                    then GREATER else cmp2 x z) =\n                         LESS\n 5. \\<And>x y z.\n       \\<lbrakk>x \\<in> D; y \\<in> D; z \\<in> D;\n        (if x \\<in> D1 \\<and> y \\<in> D1 then cmp1 x y\n         else if x \\<in> D1 \\<and> y \\<in> D2 then LESS\n              else if x \\<in> D2 \\<and> y \\<in> D1 then GREATER\n                   else cmp2 x y) =\n        EQUAL;\n        (if y \\<in> D1 \\<and> z \\<in> D1 then cmp1 y z\n         else if y \\<in> D1 \\<and> z \\<in> D2 then LESS\n              else if y \\<in> D2 \\<and> z \\<in> D1 then GREATER\n                   else cmp2 y z) =\n        EQUAL;\n        linorder_on D1 cmp1; linorder_on D2 cmp2;\n        D = D1 \\<union> D2\\<rbrakk>\n       \\<Longrightarrow> (if x \\<in> D1 \\<and> z \\<in> D1 then cmp1 x z\n                          else if x \\<in> D1 \\<and> z \\<in> D2 then LESS\n                               else if x \\<in> D2 \\<and> z \\<in> D1\n                                    then GREATER else cmp2 x z) =\n                         EQUAL", "apply (simp only:)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>x \\<in> D1 \\<union> D2; linorder_on D1 cmp1;\n        linorder_on D2 cmp2; D = D1 \\<union> D2\\<rbrakk>\n       \\<Longrightarrow> (if x \\<in> D1 \\<and> x \\<in> D1 then cmp1 x x\n                          else if x \\<in> D1 \\<and> x \\<in> D2 then LESS\n                               else if x \\<in> D2 \\<and> x \\<in> D1\n                                    then GREATER else cmp2 x x) =\n                         EQUAL\n 2. \\<And>x y z.\n       \\<lbrakk>x \\<in> D; y \\<in> D; z \\<in> D;\n        (if x \\<in> D1 \\<and> y \\<in> D1 then cmp1 x y\n         else if x \\<in> D1 \\<and> y \\<in> D2 then LESS\n              else if x \\<in> D2 \\<and> y \\<in> D1 then GREATER\n                   else cmp2 x y) =\n        LESS;\n        (if y \\<in> D1 \\<and> z \\<in> D1 then cmp1 y z\n         else if y \\<in> D1 \\<and> z \\<in> D2 then LESS\n              else if y \\<in> D2 \\<and> z \\<in> D1 then GREATER\n                   else cmp2 y z) =\n        LESS;\n        linorder_on D1 cmp1; linorder_on D2 cmp2;\n        D = D1 \\<union> D2\\<rbrakk>\n       \\<Longrightarrow> (if x \\<in> D1 \\<and> z \\<in> D1 then cmp1 x z\n                          else if x \\<in> D1 \\<and> z \\<in> D2 then LESS\n                               else if x \\<in> D2 \\<and> z \\<in> D1\n                                    then GREATER else cmp2 x z) =\n                         LESS\n 3. \\<And>x y z.\n       \\<lbrakk>x \\<in> D; y \\<in> D; z \\<in> D;\n        (if x \\<in> D1 \\<and> y \\<in> D1 then cmp1 x y\n         else if x \\<in> D1 \\<and> y \\<in> D2 then LESS\n              else if x \\<in> D2 \\<and> y \\<in> D1 then GREATER\n                   else cmp2 x y) =\n        LESS;\n        (if y \\<in> D1 \\<and> z \\<in> D1 then cmp1 y z\n         else if y \\<in> D1 \\<and> z \\<in> D2 then LESS\n              else if y \\<in> D2 \\<and> z \\<in> D1 then GREATER\n                   else cmp2 y z) =\n        EQUAL;\n        linorder_on D1 cmp1; linorder_on D2 cmp2;\n        D = D1 \\<union> D2\\<rbrakk>\n       \\<Longrightarrow> (if x \\<in> D1 \\<and> z \\<in> D1 then cmp1 x z\n                          else if x \\<in> D1 \\<and> z \\<in> D2 then LESS\n                               else if x \\<in> D2 \\<and> z \\<in> D1\n                                    then GREATER else cmp2 x z) =\n                         LESS\n 4. \\<And>x y z.\n       \\<lbrakk>x \\<in> D; y \\<in> D; z \\<in> D;\n        (if x \\<in> D1 \\<and> y \\<in> D1 then cmp1 x y\n         else if x \\<in> D1 \\<and> y \\<in> D2 then LESS\n              else if x \\<in> D2 \\<and> y \\<in> D1 then GREATER\n                   else cmp2 x y) =\n        EQUAL;\n        (if y \\<in> D1 \\<and> z \\<in> D1 then cmp1 y z\n         else if y \\<in> D1 \\<and> z \\<in> D2 then LESS\n              else if y \\<in> D2 \\<and> z \\<in> D1 then GREATER\n                   else cmp2 y z) =\n        LESS;\n        linorder_on D1 cmp1; linorder_on D2 cmp2;\n        D = D1 \\<union> D2\\<rbrakk>\n       \\<Longrightarrow> (if x \\<in> D1 \\<and> z \\<in> D1 then cmp1 x z\n                          else if x \\<in> D1 \\<and> z \\<in> D2 then LESS\n                               else if x \\<in> D2 \\<and> z \\<in> D1\n                                    then GREATER else cmp2 x z) =\n                         LESS\n 5. \\<And>x y z.\n       \\<lbrakk>x \\<in> D; y \\<in> D; z \\<in> D;\n        (if x \\<in> D1 \\<and> y \\<in> D1 then cmp1 x y\n         else if x \\<in> D1 \\<and> y \\<in> D2 then LESS\n              else if x \\<in> D2 \\<and> y \\<in> D1 then GREATER\n                   else cmp2 x y) =\n        EQUAL;\n        (if y \\<in> D1 \\<and> z \\<in> D1 then cmp1 y z\n         else if y \\<in> D1 \\<and> z \\<in> D2 then LESS\n              else if y \\<in> D2 \\<and> z \\<in> D1 then GREATER\n                   else cmp2 y z) =\n        EQUAL;\n        linorder_on D1 cmp1; linorder_on D2 cmp2;\n        D = D1 \\<union> D2\\<rbrakk>\n       \\<Longrightarrow> (if x \\<in> D1 \\<and> z \\<in> D1 then cmp1 x z\n                          else if x \\<in> D1 \\<and> z \\<in> D2 then LESS\n                               else if x \\<in> D2 \\<and> z \\<in> D1\n                                    then GREATER else cmp2 x z) =\n                         EQUAL", "apply (elim UnE)"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>linorder_on D1 cmp1; linorder_on D2 cmp2;\n        D = D1 \\<union> D2; x \\<in> D1\\<rbrakk>\n       \\<Longrightarrow> (if x \\<in> D1 \\<and> x \\<in> D1 then cmp1 x x\n                          else if x \\<in> D1 \\<and> x \\<in> D2 then LESS\n                               else if x \\<in> D2 \\<and> x \\<in> D1\n                                    then GREATER else cmp2 x x) =\n                         EQUAL\n 2. \\<And>x.\n       \\<lbrakk>linorder_on D1 cmp1; linorder_on D2 cmp2;\n        D = D1 \\<union> D2; x \\<in> D2\\<rbrakk>\n       \\<Longrightarrow> (if x \\<in> D1 \\<and> x \\<in> D1 then cmp1 x x\n                          else if x \\<in> D1 \\<and> x \\<in> D2 then LESS\n                               else if x \\<in> D2 \\<and> x \\<in> D1\n                                    then GREATER else cmp2 x x) =\n                         EQUAL\n 3. \\<And>x y z.\n       \\<lbrakk>x \\<in> D; y \\<in> D; z \\<in> D;\n        (if x \\<in> D1 \\<and> y \\<in> D1 then cmp1 x y\n         else if x \\<in> D1 \\<and> y \\<in> D2 then LESS\n              else if x \\<in> D2 \\<and> y \\<in> D1 then GREATER\n                   else cmp2 x y) =\n        LESS;\n        (if y \\<in> D1 \\<and> z \\<in> D1 then cmp1 y z\n         else if y \\<in> D1 \\<and> z \\<in> D2 then LESS\n              else if y \\<in> D2 \\<and> z \\<in> D1 then GREATER\n                   else cmp2 y z) =\n        LESS;\n        linorder_on D1 cmp1; linorder_on D2 cmp2;\n        D = D1 \\<union> D2\\<rbrakk>\n       \\<Longrightarrow> (if x \\<in> D1 \\<and> z \\<in> D1 then cmp1 x z\n                          else if x \\<in> D1 \\<and> z \\<in> D2 then LESS\n                               else if x \\<in> D2 \\<and> z \\<in> D1\n                                    then GREATER else cmp2 x z) =\n                         LESS\n 4. \\<And>x y z.\n       \\<lbrakk>x \\<in> D; y \\<in> D; z \\<in> D;\n        (if x \\<in> D1 \\<and> y \\<in> D1 then cmp1 x y\n         else if x \\<in> D1 \\<and> y \\<in> D2 then LESS\n              else if x \\<in> D2 \\<and> y \\<in> D1 then GREATER\n                   else cmp2 x y) =\n        LESS;\n        (if y \\<in> D1 \\<and> z \\<in> D1 then cmp1 y z\n         else if y \\<in> D1 \\<and> z \\<in> D2 then LESS\n              else if y \\<in> D2 \\<and> z \\<in> D1 then GREATER\n                   else cmp2 y z) =\n        EQUAL;\n        linorder_on D1 cmp1; linorder_on D2 cmp2;\n        D = D1 \\<union> D2\\<rbrakk>\n       \\<Longrightarrow> (if x \\<in> D1 \\<and> z \\<in> D1 then cmp1 x z\n                          else if x \\<in> D1 \\<and> z \\<in> D2 then LESS\n                               else if x \\<in> D2 \\<and> z \\<in> D1\n                                    then GREATER else cmp2 x z) =\n                         LESS\n 5. \\<And>x y z.\n       \\<lbrakk>x \\<in> D; y \\<in> D; z \\<in> D;\n        (if x \\<in> D1 \\<and> y \\<in> D1 then cmp1 x y\n         else if x \\<in> D1 \\<and> y \\<in> D2 then LESS\n              else if x \\<in> D2 \\<and> y \\<in> D1 then GREATER\n                   else cmp2 x y) =\n        EQUAL;\n        (if y \\<in> D1 \\<and> z \\<in> D1 then cmp1 y z\n         else if y \\<in> D1 \\<and> z \\<in> D2 then LESS\n              else if y \\<in> D2 \\<and> z \\<in> D1 then GREATER\n                   else cmp2 y z) =\n        LESS;\n        linorder_on D1 cmp1; linorder_on D2 cmp2;\n        D = D1 \\<union> D2\\<rbrakk>\n       \\<Longrightarrow> (if x \\<in> D1 \\<and> z \\<in> D1 then cmp1 x z\n                          else if x \\<in> D1 \\<and> z \\<in> D2 then LESS\n                               else if x \\<in> D2 \\<and> z \\<in> D1\n                                    then GREATER else cmp2 x z) =\n                         LESS\n 6. \\<And>x y z.\n       \\<lbrakk>x \\<in> D; y \\<in> D; z \\<in> D;\n        (if x \\<in> D1 \\<and> y \\<in> D1 then cmp1 x y\n         else if x \\<in> D1 \\<and> y \\<in> D2 then LESS\n              else if x \\<in> D2 \\<and> y \\<in> D1 then GREATER\n                   else cmp2 x y) =\n        EQUAL;\n        (if y \\<in> D1 \\<and> z \\<in> D1 then cmp1 y z\n         else if y \\<in> D1 \\<and> z \\<in> D2 then LESS\n              else if y \\<in> D2 \\<and> z \\<in> D1 then GREATER\n                   else cmp2 y z) =\n        EQUAL;\n        linorder_on D1 cmp1; linorder_on D2 cmp2;\n        D = D1 \\<union> D2\\<rbrakk>\n       \\<Longrightarrow> (if x \\<in> D1 \\<and> z \\<in> D1 then cmp1 x z\n                          else if x \\<in> D1 \\<and> z \\<in> D2 then LESS\n                               else if x \\<in> D2 \\<and> z \\<in> D1\n                                    then GREATER else cmp2 x z) =\n                         EQUAL", "apply (auto dest: linorder_on.refl) [2]"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>x y z.\n       \\<lbrakk>x \\<in> D; y \\<in> D; z \\<in> D;\n        (if x \\<in> D1 \\<and> y \\<in> D1 then cmp1 x y\n         else if x \\<in> D1 \\<and> y \\<in> D2 then LESS\n              else if x \\<in> D2 \\<and> y \\<in> D1 then GREATER\n                   else cmp2 x y) =\n        LESS;\n        (if y \\<in> D1 \\<and> z \\<in> D1 then cmp1 y z\n         else if y \\<in> D1 \\<and> z \\<in> D2 then LESS\n              else if y \\<in> D2 \\<and> z \\<in> D1 then GREATER\n                   else cmp2 y z) =\n        LESS;\n        linorder_on D1 cmp1; linorder_on D2 cmp2;\n        D = D1 \\<union> D2\\<rbrakk>\n       \\<Longrightarrow> (if x \\<in> D1 \\<and> z \\<in> D1 then cmp1 x z\n                          else if x \\<in> D1 \\<and> z \\<in> D2 then LESS\n                               else if x \\<in> D2 \\<and> z \\<in> D1\n                                    then GREATER else cmp2 x z) =\n                         LESS\n 2. \\<And>x y z.\n       \\<lbrakk>x \\<in> D; y \\<in> D; z \\<in> D;\n        (if x \\<in> D1 \\<and> y \\<in> D1 then cmp1 x y\n         else if x \\<in> D1 \\<and> y \\<in> D2 then LESS\n              else if x \\<in> D2 \\<and> y \\<in> D1 then GREATER\n                   else cmp2 x y) =\n        LESS;\n        (if y \\<in> D1 \\<and> z \\<in> D1 then cmp1 y z\n         else if y \\<in> D1 \\<and> z \\<in> D2 then LESS\n              else if y \\<in> D2 \\<and> z \\<in> D1 then GREATER\n                   else cmp2 y z) =\n        EQUAL;\n        linorder_on D1 cmp1; linorder_on D2 cmp2;\n        D = D1 \\<union> D2\\<rbrakk>\n       \\<Longrightarrow> (if x \\<in> D1 \\<and> z \\<in> D1 then cmp1 x z\n                          else if x \\<in> D1 \\<and> z \\<in> D2 then LESS\n                               else if x \\<in> D2 \\<and> z \\<in> D1\n                                    then GREATER else cmp2 x z) =\n                         LESS\n 3. \\<And>x y z.\n       \\<lbrakk>x \\<in> D; y \\<in> D; z \\<in> D;\n        (if x \\<in> D1 \\<and> y \\<in> D1 then cmp1 x y\n         else if x \\<in> D1 \\<and> y \\<in> D2 then LESS\n              else if x \\<in> D2 \\<and> y \\<in> D1 then GREATER\n                   else cmp2 x y) =\n        EQUAL;\n        (if y \\<in> D1 \\<and> z \\<in> D1 then cmp1 y z\n         else if y \\<in> D1 \\<and> z \\<in> D2 then LESS\n              else if y \\<in> D2 \\<and> z \\<in> D1 then GREATER\n                   else cmp2 y z) =\n        LESS;\n        linorder_on D1 cmp1; linorder_on D2 cmp2;\n        D = D1 \\<union> D2\\<rbrakk>\n       \\<Longrightarrow> (if x \\<in> D1 \\<and> z \\<in> D1 then cmp1 x z\n                          else if x \\<in> D1 \\<and> z \\<in> D2 then LESS\n                               else if x \\<in> D2 \\<and> z \\<in> D1\n                                    then GREATER else cmp2 x z) =\n                         LESS\n 4. \\<And>x y z.\n       \\<lbrakk>x \\<in> D; y \\<in> D; z \\<in> D;\n        (if x \\<in> D1 \\<and> y \\<in> D1 then cmp1 x y\n         else if x \\<in> D1 \\<and> y \\<in> D2 then LESS\n              else if x \\<in> D2 \\<and> y \\<in> D1 then GREATER\n                   else cmp2 x y) =\n        EQUAL;\n        (if y \\<in> D1 \\<and> z \\<in> D1 then cmp1 y z\n         else if y \\<in> D1 \\<and> z \\<in> D2 then LESS\n              else if y \\<in> D2 \\<and> z \\<in> D1 then GREATER\n                   else cmp2 y z) =\n        EQUAL;\n        linorder_on D1 cmp1; linorder_on D2 cmp2;\n        D = D1 \\<union> D2\\<rbrakk>\n       \\<Longrightarrow> (if x \\<in> D1 \\<and> z \\<in> D1 then cmp1 x z\n                          else if x \\<in> D1 \\<and> z \\<in> D2 then LESS\n                               else if x \\<in> D2 \\<and> z \\<in> D1\n                                    then GREATER else cmp2 x z) =\n                         EQUAL", "apply (simp only:)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>x y z.\n       \\<lbrakk>x \\<in> D1 \\<union> D2; y \\<in> D1 \\<union> D2;\n        z \\<in> D1 \\<union> D2;\n        (if x \\<in> D1 \\<and> y \\<in> D1 then cmp1 x y\n         else if x \\<in> D1 \\<and> y \\<in> D2 then LESS\n              else if x \\<in> D2 \\<and> y \\<in> D1 then GREATER\n                   else cmp2 x y) =\n        LESS;\n        (if y \\<in> D1 \\<and> z \\<in> D1 then cmp1 y z\n         else if y \\<in> D1 \\<and> z \\<in> D2 then LESS\n              else if y \\<in> D2 \\<and> z \\<in> D1 then GREATER\n                   else cmp2 y z) =\n        LESS;\n        linorder_on D1 cmp1; linorder_on D2 cmp2;\n        D = D1 \\<union> D2\\<rbrakk>\n       \\<Longrightarrow> (if x \\<in> D1 \\<and> z \\<in> D1 then cmp1 x z\n                          else if x \\<in> D1 \\<and> z \\<in> D2 then LESS\n                               else if x \\<in> D2 \\<and> z \\<in> D1\n                                    then GREATER else cmp2 x z) =\n                         LESS\n 2. \\<And>x y z.\n       \\<lbrakk>x \\<in> D; y \\<in> D; z \\<in> D;\n        (if x \\<in> D1 \\<and> y \\<in> D1 then cmp1 x y\n         else if x \\<in> D1 \\<and> y \\<in> D2 then LESS\n              else if x \\<in> D2 \\<and> y \\<in> D1 then GREATER\n                   else cmp2 x y) =\n        LESS;\n        (if y \\<in> D1 \\<and> z \\<in> D1 then cmp1 y z\n         else if y \\<in> D1 \\<and> z \\<in> D2 then LESS\n              else if y \\<in> D2 \\<and> z \\<in> D1 then GREATER\n                   else cmp2 y z) =\n        EQUAL;\n        linorder_on D1 cmp1; linorder_on D2 cmp2;\n        D = D1 \\<union> D2\\<rbrakk>\n       \\<Longrightarrow> (if x \\<in> D1 \\<and> z \\<in> D1 then cmp1 x z\n                          else if x \\<in> D1 \\<and> z \\<in> D2 then LESS\n                               else if x \\<in> D2 \\<and> z \\<in> D1\n                                    then GREATER else cmp2 x z) =\n                         LESS\n 3. \\<And>x y z.\n       \\<lbrakk>x \\<in> D; y \\<in> D; z \\<in> D;\n        (if x \\<in> D1 \\<and> y \\<in> D1 then cmp1 x y\n         else if x \\<in> D1 \\<and> y \\<in> D2 then LESS\n              else if x \\<in> D2 \\<and> y \\<in> D1 then GREATER\n                   else cmp2 x y) =\n        EQUAL;\n        (if y \\<in> D1 \\<and> z \\<in> D1 then cmp1 y z\n         else if y \\<in> D1 \\<and> z \\<in> D2 then LESS\n              else if y \\<in> D2 \\<and> z \\<in> D1 then GREATER\n                   else cmp2 y z) =\n        LESS;\n        linorder_on D1 cmp1; linorder_on D2 cmp2;\n        D = D1 \\<union> D2\\<rbrakk>\n       \\<Longrightarrow> (if x \\<in> D1 \\<and> z \\<in> D1 then cmp1 x z\n                          else if x \\<in> D1 \\<and> z \\<in> D2 then LESS\n                               else if x \\<in> D2 \\<and> z \\<in> D1\n                                    then GREATER else cmp2 x z) =\n                         LESS\n 4. \\<And>x y z.\n       \\<lbrakk>x \\<in> D; y \\<in> D; z \\<in> D;\n        (if x \\<in> D1 \\<and> y \\<in> D1 then cmp1 x y\n         else if x \\<in> D1 \\<and> y \\<in> D2 then LESS\n              else if x \\<in> D2 \\<and> y \\<in> D1 then GREATER\n                   else cmp2 x y) =\n        EQUAL;\n        (if y \\<in> D1 \\<and> z \\<in> D1 then cmp1 y z\n         else if y \\<in> D1 \\<and> z \\<in> D2 then LESS\n              else if y \\<in> D2 \\<and> z \\<in> D1 then GREATER\n                   else cmp2 y z) =\n        EQUAL;\n        linorder_on D1 cmp1; linorder_on D2 cmp2;\n        D = D1 \\<union> D2\\<rbrakk>\n       \\<Longrightarrow> (if x \\<in> D1 \\<and> z \\<in> D1 then cmp1 x z\n                          else if x \\<in> D1 \\<and> z \\<in> D2 then LESS\n                               else if x \\<in> D2 \\<and> z \\<in> D1\n                                    then GREATER else cmp2 x z) =\n                         EQUAL", "apply (elim UnE')"], ["proof (prove)\ngoal (11 subgoals):\n 1. \\<And>x y z.\n       \\<lbrakk>(if x \\<in> D1 \\<and> y \\<in> D1 then cmp1 x y\n                 else if x \\<in> D1 \\<and> y \\<in> D2 then LESS\n                      else if x \\<in> D2 \\<and> y \\<in> D1 then GREATER\n                           else cmp2 x y) =\n                LESS;\n        (if y \\<in> D1 \\<and> z \\<in> D1 then cmp1 y z\n         else if y \\<in> D1 \\<and> z \\<in> D2 then LESS\n              else if y \\<in> D2 \\<and> z \\<in> D1 then GREATER\n                   else cmp2 y z) =\n        LESS;\n        linorder_on D1 cmp1; linorder_on D2 cmp2; D = D1 \\<union> D2;\n        x \\<in> D1; y \\<in> D1; z \\<in> D1\\<rbrakk>\n       \\<Longrightarrow> (if x \\<in> D1 \\<and> z \\<in> D1 then cmp1 x z\n                          else if x \\<in> D1 \\<and> z \\<in> D2 then LESS\n                               else if x \\<in> D2 \\<and> z \\<in> D1\n                                    then GREATER else cmp2 x z) =\n                         LESS\n 2. \\<And>x y z.\n       \\<lbrakk>(if x \\<in> D1 \\<and> y \\<in> D1 then cmp1 x y\n                 else if x \\<in> D1 \\<and> y \\<in> D2 then LESS\n                      else if x \\<in> D2 \\<and> y \\<in> D1 then GREATER\n                           else cmp2 x y) =\n                LESS;\n        (if y \\<in> D1 \\<and> z \\<in> D1 then cmp1 y z\n         else if y \\<in> D1 \\<and> z \\<in> D2 then LESS\n              else if y \\<in> D2 \\<and> z \\<in> D1 then GREATER\n                   else cmp2 y z) =\n        LESS;\n        linorder_on D1 cmp1; linorder_on D2 cmp2; D = D1 \\<union> D2;\n        x \\<in> D1; y \\<in> D1; z \\<notin> D1; z \\<in> D2\\<rbrakk>\n       \\<Longrightarrow> (if x \\<in> D1 \\<and> z \\<in> D1 then cmp1 x z\n                          else if x \\<in> D1 \\<and> z \\<in> D2 then LESS\n                               else if x \\<in> D2 \\<and> z \\<in> D1\n                                    then GREATER else cmp2 x z) =\n                         LESS\n 3. \\<And>x y z.\n       \\<lbrakk>(if x \\<in> D1 \\<and> y \\<in> D1 then cmp1 x y\n                 else if x \\<in> D1 \\<and> y \\<in> D2 then LESS\n                      else if x \\<in> D2 \\<and> y \\<in> D1 then GREATER\n                           else cmp2 x y) =\n                LESS;\n        (if y \\<in> D1 \\<and> z \\<in> D1 then cmp1 y z\n         else if y \\<in> D1 \\<and> z \\<in> D2 then LESS\n              else if y \\<in> D2 \\<and> z \\<in> D1 then GREATER\n                   else cmp2 y z) =\n        LESS;\n        linorder_on D1 cmp1; linorder_on D2 cmp2; D = D1 \\<union> D2;\n        x \\<in> D1; y \\<notin> D1; y \\<in> D2; z \\<in> D1\\<rbrakk>\n       \\<Longrightarrow> (if x \\<in> D1 \\<and> z \\<in> D1 then cmp1 x z\n                          else if x \\<in> D1 \\<and> z \\<in> D2 then LESS\n                               else if x \\<in> D2 \\<and> z \\<in> D1\n                                    then GREATER else cmp2 x z) =\n                         LESS\n 4. \\<And>x y z.\n       \\<lbrakk>(if x \\<in> D1 \\<and> y \\<in> D1 then cmp1 x y\n                 else if x \\<in> D1 \\<and> y \\<in> D2 then LESS\n                      else if x \\<in> D2 \\<and> y \\<in> D1 then GREATER\n                           else cmp2 x y) =\n                LESS;\n        (if y \\<in> D1 \\<and> z \\<in> D1 then cmp1 y z\n         else if y \\<in> D1 \\<and> z \\<in> D2 then LESS\n              else if y \\<in> D2 \\<and> z \\<in> D1 then GREATER\n                   else cmp2 y z) =\n        LESS;\n        linorder_on D1 cmp1; linorder_on D2 cmp2; D = D1 \\<union> D2;\n        x \\<in> D1; y \\<notin> D1; y \\<in> D2; z \\<notin> D1;\n        z \\<in> D2\\<rbrakk>\n       \\<Longrightarrow> (if x \\<in> D1 \\<and> z \\<in> D1 then cmp1 x z\n                          else if x \\<in> D1 \\<and> z \\<in> D2 then LESS\n                               else if x \\<in> D2 \\<and> z \\<in> D1\n                                    then GREATER else cmp2 x z) =\n                         LESS\n 5. \\<And>x y z.\n       \\<lbrakk>(if x \\<in> D1 \\<and> y \\<in> D1 then cmp1 x y\n                 else if x \\<in> D1 \\<and> y \\<in> D2 then LESS\n                      else if x \\<in> D2 \\<and> y \\<in> D1 then GREATER\n                           else cmp2 x y) =\n                LESS;\n        (if y \\<in> D1 \\<and> z \\<in> D1 then cmp1 y z\n         else if y \\<in> D1 \\<and> z \\<in> D2 then LESS\n              else if y \\<in> D2 \\<and> z \\<in> D1 then GREATER\n                   else cmp2 y z) =\n        LESS;\n        linorder_on D1 cmp1; linorder_on D2 cmp2; D = D1 \\<union> D2;\n        x \\<notin> D1; x \\<in> D2; y \\<in> D1; z \\<in> D1\\<rbrakk>\n       \\<Longrightarrow> (if x \\<in> D1 \\<and> z \\<in> D1 then cmp1 x z\n                          else if x \\<in> D1 \\<and> z \\<in> D2 then LESS\n                               else if x \\<in> D2 \\<and> z \\<in> D1\n                                    then GREATER else cmp2 x z) =\n                         LESS\n 6. \\<And>x y z.\n       \\<lbrakk>(if x \\<in> D1 \\<and> y \\<in> D1 then cmp1 x y\n                 else if x \\<in> D1 \\<and> y \\<in> D2 then LESS\n                      else if x \\<in> D2 \\<and> y \\<in> D1 then GREATER\n                           else cmp2 x y) =\n                LESS;\n        (if y \\<in> D1 \\<and> z \\<in> D1 then cmp1 y z\n         else if y \\<in> D1 \\<and> z \\<in> D2 then LESS\n              else if y \\<in> D2 \\<and> z \\<in> D1 then GREATER\n                   else cmp2 y z) =\n        LESS;\n        linorder_on D1 cmp1; linorder_on D2 cmp2; D = D1 \\<union> D2;\n        x \\<notin> D1; x \\<in> D2; y \\<in> D1; z \\<notin> D1;\n        z \\<in> D2\\<rbrakk>\n       \\<Longrightarrow> (if x \\<in> D1 \\<and> z \\<in> D1 then cmp1 x z\n                          else if x \\<in> D1 \\<and> z \\<in> D2 then LESS\n                               else if x \\<in> D2 \\<and> z \\<in> D1\n                                    then GREATER else cmp2 x z) =\n                         LESS\n 7. \\<And>x y z.\n       \\<lbrakk>(if x \\<in> D1 \\<and> y \\<in> D1 then cmp1 x y\n                 else if x \\<in> D1 \\<and> y \\<in> D2 then LESS\n                      else if x \\<in> D2 \\<and> y \\<in> D1 then GREATER\n                           else cmp2 x y) =\n                LESS;\n        (if y \\<in> D1 \\<and> z \\<in> D1 then cmp1 y z\n         else if y \\<in> D1 \\<and> z \\<in> D2 then LESS\n              else if y \\<in> D2 \\<and> z \\<in> D1 then GREATER\n                   else cmp2 y z) =\n        LESS;\n        linorder_on D1 cmp1; linorder_on D2 cmp2; D = D1 \\<union> D2;\n        x \\<notin> D1; x \\<in> D2; y \\<notin> D1; y \\<in> D2;\n        z \\<in> D1\\<rbrakk>\n       \\<Longrightarrow> (if x \\<in> D1 \\<and> z \\<in> D1 then cmp1 x z\n                          else if x \\<in> D1 \\<and> z \\<in> D2 then LESS\n                               else if x \\<in> D2 \\<and> z \\<in> D1\n                                    then GREATER else cmp2 x z) =\n                         LESS\n 8. \\<And>x y z.\n       \\<lbrakk>(if x \\<in> D1 \\<and> y \\<in> D1 then cmp1 x y\n                 else if x \\<in> D1 \\<and> y \\<in> D2 then LESS\n                      else if x \\<in> D2 \\<and> y \\<in> D1 then GREATER\n                           else cmp2 x y) =\n                LESS;\n        (if y \\<in> D1 \\<and> z \\<in> D1 then cmp1 y z\n         else if y \\<in> D1 \\<and> z \\<in> D2 then LESS\n              else if y \\<in> D2 \\<and> z \\<in> D1 then GREATER\n                   else cmp2 y z) =\n        LESS;\n        linorder_on D1 cmp1; linorder_on D2 cmp2; D = D1 \\<union> D2;\n        x \\<notin> D1; x \\<in> D2; y \\<notin> D1; y \\<in> D2; z \\<notin> D1;\n        z \\<in> D2\\<rbrakk>\n       \\<Longrightarrow> (if x \\<in> D1 \\<and> z \\<in> D1 then cmp1 x z\n                          else if x \\<in> D1 \\<and> z \\<in> D2 then LESS\n                               else if x \\<in> D2 \\<and> z \\<in> D1\n                                    then GREATER else cmp2 x z) =\n                         LESS\n 9. \\<And>x y z.\n       \\<lbrakk>x \\<in> D; y \\<in> D; z \\<in> D;\n        (if x \\<in> D1 \\<and> y \\<in> D1 then cmp1 x y\n         else if x \\<in> D1 \\<and> y \\<in> D2 then LESS\n              else if x \\<in> D2 \\<and> y \\<in> D1 then GREATER\n                   else cmp2 x y) =\n        LESS;\n        (if y \\<in> D1 \\<and> z \\<in> D1 then cmp1 y z\n         else if y \\<in> D1 \\<and> z \\<in> D2 then LESS\n              else if y \\<in> D2 \\<and> z \\<in> D1 then GREATER\n                   else cmp2 y z) =\n        EQUAL;\n        linorder_on D1 cmp1; linorder_on D2 cmp2;\n        D = D1 \\<union> D2\\<rbrakk>\n       \\<Longrightarrow> (if x \\<in> D1 \\<and> z \\<in> D1 then cmp1 x z\n                          else if x \\<in> D1 \\<and> z \\<in> D2 then LESS\n                               else if x \\<in> D2 \\<and> z \\<in> D1\n                                    then GREATER else cmp2 x z) =\n                         LESS\n 10. \\<And>x y z.\n        \\<lbrakk>x \\<in> D; y \\<in> D; z \\<in> D;\n         (if x \\<in> D1 \\<and> y \\<in> D1 then cmp1 x y\n          else if x \\<in> D1 \\<and> y \\<in> D2 then LESS\n               else if x \\<in> D2 \\<and> y \\<in> D1 then GREATER\n                    else cmp2 x y) =\n         EQUAL;\n         (if y \\<in> D1 \\<and> z \\<in> D1 then cmp1 y z\n          else if y \\<in> D1 \\<and> z \\<in> D2 then LESS\n               else if y \\<in> D2 \\<and> z \\<in> D1 then GREATER\n                    else cmp2 y z) =\n         LESS;\n         linorder_on D1 cmp1; linorder_on D2 cmp2;\n         D = D1 \\<union> D2\\<rbrakk>\n        \\<Longrightarrow> (if x \\<in> D1 \\<and> z \\<in> D1 then cmp1 x z\n                           else if x \\<in> D1 \\<and> z \\<in> D2 then LESS\n                                else if x \\<in> D2 \\<and> z \\<in> D1\n                                     then GREATER else cmp2 x z) =\n                          LESS\nA total of 11 subgoals...", "apply simp_all [8]"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>x y z.\n       \\<lbrakk>cmp1 x y = LESS; cmp1 y z = LESS; linorder_on D1 cmp1;\n        linorder_on D2 cmp2; D = D1 \\<union> D2; x \\<in> D1; y \\<in> D1;\n        z \\<in> D1\\<rbrakk>\n       \\<Longrightarrow> cmp1 x z = LESS\n 2. \\<And>x y z.\n       \\<lbrakk>cmp2 x y = LESS; cmp2 y z = LESS; linorder_on D1 cmp1;\n        linorder_on D2 cmp2; D = D1 \\<union> D2; x \\<notin> D1; x \\<in> D2;\n        y \\<notin> D1; y \\<in> D2; z \\<notin> D1; z \\<in> D2\\<rbrakk>\n       \\<Longrightarrow> cmp2 x z = LESS\n 3. \\<And>x y z.\n       \\<lbrakk>x \\<in> D; y \\<in> D; z \\<in> D;\n        (if x \\<in> D1 \\<and> y \\<in> D1 then cmp1 x y\n         else if x \\<in> D1 \\<and> y \\<in> D2 then LESS\n              else if x \\<in> D2 \\<and> y \\<in> D1 then GREATER\n                   else cmp2 x y) =\n        LESS;\n        (if y \\<in> D1 \\<and> z \\<in> D1 then cmp1 y z\n         else if y \\<in> D1 \\<and> z \\<in> D2 then LESS\n              else if y \\<in> D2 \\<and> z \\<in> D1 then GREATER\n                   else cmp2 y z) =\n        EQUAL;\n        linorder_on D1 cmp1; linorder_on D2 cmp2;\n        D = D1 \\<union> D2\\<rbrakk>\n       \\<Longrightarrow> (if x \\<in> D1 \\<and> z \\<in> D1 then cmp1 x z\n                          else if x \\<in> D1 \\<and> z \\<in> D2 then LESS\n                               else if x \\<in> D2 \\<and> z \\<in> D1\n                                    then GREATER else cmp2 x z) =\n                         LESS\n 4. \\<And>x y z.\n       \\<lbrakk>x \\<in> D; y \\<in> D; z \\<in> D;\n        (if x \\<in> D1 \\<and> y \\<in> D1 then cmp1 x y\n         else if x \\<in> D1 \\<and> y \\<in> D2 then LESS\n              else if x \\<in> D2 \\<and> y \\<in> D1 then GREATER\n                   else cmp2 x y) =\n        EQUAL;\n        (if y \\<in> D1 \\<and> z \\<in> D1 then cmp1 y z\n         else if y \\<in> D1 \\<and> z \\<in> D2 then LESS\n              else if y \\<in> D2 \\<and> z \\<in> D1 then GREATER\n                   else cmp2 y z) =\n        LESS;\n        linorder_on D1 cmp1; linorder_on D2 cmp2;\n        D = D1 \\<union> D2\\<rbrakk>\n       \\<Longrightarrow> (if x \\<in> D1 \\<and> z \\<in> D1 then cmp1 x z\n                          else if x \\<in> D1 \\<and> z \\<in> D2 then LESS\n                               else if x \\<in> D2 \\<and> z \\<in> D1\n                                    then GREATER else cmp2 x z) =\n                         LESS\n 5. \\<And>x y z.\n       \\<lbrakk>x \\<in> D; y \\<in> D; z \\<in> D;\n        (if x \\<in> D1 \\<and> y \\<in> D1 then cmp1 x y\n         else if x \\<in> D1 \\<and> y \\<in> D2 then LESS\n              else if x \\<in> D2 \\<and> y \\<in> D1 then GREATER\n                   else cmp2 x y) =\n        EQUAL;\n        (if y \\<in> D1 \\<and> z \\<in> D1 then cmp1 y z\n         else if y \\<in> D1 \\<and> z \\<in> D2 then LESS\n              else if y \\<in> D2 \\<and> z \\<in> D1 then GREATER\n                   else cmp2 y z) =\n        EQUAL;\n        linorder_on D1 cmp1; linorder_on D2 cmp2;\n        D = D1 \\<union> D2\\<rbrakk>\n       \\<Longrightarrow> (if x \\<in> D1 \\<and> z \\<in> D1 then cmp1 x z\n                          else if x \\<in> D1 \\<and> z \\<in> D2 then LESS\n                               else if x \\<in> D2 \\<and> z \\<in> D1\n                                    then GREATER else cmp2 x z) =\n                         EQUAL", "apply (erule (5) linorder_on.trans)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>x y z.\n       \\<lbrakk>cmp2 x y = LESS; cmp2 y z = LESS; linorder_on D1 cmp1;\n        linorder_on D2 cmp2; D = D1 \\<union> D2; x \\<notin> D1; x \\<in> D2;\n        y \\<notin> D1; y \\<in> D2; z \\<notin> D1; z \\<in> D2\\<rbrakk>\n       \\<Longrightarrow> cmp2 x z = LESS\n 2. \\<And>x y z.\n       \\<lbrakk>x \\<in> D; y \\<in> D; z \\<in> D;\n        (if x \\<in> D1 \\<and> y \\<in> D1 then cmp1 x y\n         else if x \\<in> D1 \\<and> y \\<in> D2 then LESS\n              else if x \\<in> D2 \\<and> y \\<in> D1 then GREATER\n                   else cmp2 x y) =\n        LESS;\n        (if y \\<in> D1 \\<and> z \\<in> D1 then cmp1 y z\n         else if y \\<in> D1 \\<and> z \\<in> D2 then LESS\n              else if y \\<in> D2 \\<and> z \\<in> D1 then GREATER\n                   else cmp2 y z) =\n        EQUAL;\n        linorder_on D1 cmp1; linorder_on D2 cmp2;\n        D = D1 \\<union> D2\\<rbrakk>\n       \\<Longrightarrow> (if x \\<in> D1 \\<and> z \\<in> D1 then cmp1 x z\n                          else if x \\<in> D1 \\<and> z \\<in> D2 then LESS\n                               else if x \\<in> D2 \\<and> z \\<in> D1\n                                    then GREATER else cmp2 x z) =\n                         LESS\n 3. \\<And>x y z.\n       \\<lbrakk>x \\<in> D; y \\<in> D; z \\<in> D;\n        (if x \\<in> D1 \\<and> y \\<in> D1 then cmp1 x y\n         else if x \\<in> D1 \\<and> y \\<in> D2 then LESS\n              else if x \\<in> D2 \\<and> y \\<in> D1 then GREATER\n                   else cmp2 x y) =\n        EQUAL;\n        (if y \\<in> D1 \\<and> z \\<in> D1 then cmp1 y z\n         else if y \\<in> D1 \\<and> z \\<in> D2 then LESS\n              else if y \\<in> D2 \\<and> z \\<in> D1 then GREATER\n                   else cmp2 y z) =\n        LESS;\n        linorder_on D1 cmp1; linorder_on D2 cmp2;\n        D = D1 \\<union> D2\\<rbrakk>\n       \\<Longrightarrow> (if x \\<in> D1 \\<and> z \\<in> D1 then cmp1 x z\n                          else if x \\<in> D1 \\<and> z \\<in> D2 then LESS\n                               else if x \\<in> D2 \\<and> z \\<in> D1\n                                    then GREATER else cmp2 x z) =\n                         LESS\n 4. \\<And>x y z.\n       \\<lbrakk>x \\<in> D; y \\<in> D; z \\<in> D;\n        (if x \\<in> D1 \\<and> y \\<in> D1 then cmp1 x y\n         else if x \\<in> D1 \\<and> y \\<in> D2 then LESS\n              else if x \\<in> D2 \\<and> y \\<in> D1 then GREATER\n                   else cmp2 x y) =\n        EQUAL;\n        (if y \\<in> D1 \\<and> z \\<in> D1 then cmp1 y z\n         else if y \\<in> D1 \\<and> z \\<in> D2 then LESS\n              else if y \\<in> D2 \\<and> z \\<in> D1 then GREATER\n                   else cmp2 y z) =\n        EQUAL;\n        linorder_on D1 cmp1; linorder_on D2 cmp2;\n        D = D1 \\<union> D2\\<rbrakk>\n       \\<Longrightarrow> (if x \\<in> D1 \\<and> z \\<in> D1 then cmp1 x z\n                          else if x \\<in> D1 \\<and> z \\<in> D2 then LESS\n                               else if x \\<in> D2 \\<and> z \\<in> D1\n                                    then GREATER else cmp2 x z) =\n                         EQUAL", "apply (erule (5) linorder_on.trans)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>x y z.\n       \\<lbrakk>x \\<in> D; y \\<in> D; z \\<in> D;\n        (if x \\<in> D1 \\<and> y \\<in> D1 then cmp1 x y\n         else if x \\<in> D1 \\<and> y \\<in> D2 then LESS\n              else if x \\<in> D2 \\<and> y \\<in> D1 then GREATER\n                   else cmp2 x y) =\n        LESS;\n        (if y \\<in> D1 \\<and> z \\<in> D1 then cmp1 y z\n         else if y \\<in> D1 \\<and> z \\<in> D2 then LESS\n              else if y \\<in> D2 \\<and> z \\<in> D1 then GREATER\n                   else cmp2 y z) =\n        EQUAL;\n        linorder_on D1 cmp1; linorder_on D2 cmp2;\n        D = D1 \\<union> D2\\<rbrakk>\n       \\<Longrightarrow> (if x \\<in> D1 \\<and> z \\<in> D1 then cmp1 x z\n                          else if x \\<in> D1 \\<and> z \\<in> D2 then LESS\n                               else if x \\<in> D2 \\<and> z \\<in> D1\n                                    then GREATER else cmp2 x z) =\n                         LESS\n 2. \\<And>x y z.\n       \\<lbrakk>x \\<in> D; y \\<in> D; z \\<in> D;\n        (if x \\<in> D1 \\<and> y \\<in> D1 then cmp1 x y\n         else if x \\<in> D1 \\<and> y \\<in> D2 then LESS\n              else if x \\<in> D2 \\<and> y \\<in> D1 then GREATER\n                   else cmp2 x y) =\n        EQUAL;\n        (if y \\<in> D1 \\<and> z \\<in> D1 then cmp1 y z\n         else if y \\<in> D1 \\<and> z \\<in> D2 then LESS\n              else if y \\<in> D2 \\<and> z \\<in> D1 then GREATER\n                   else cmp2 y z) =\n        LESS;\n        linorder_on D1 cmp1; linorder_on D2 cmp2;\n        D = D1 \\<union> D2\\<rbrakk>\n       \\<Longrightarrow> (if x \\<in> D1 \\<and> z \\<in> D1 then cmp1 x z\n                          else if x \\<in> D1 \\<and> z \\<in> D2 then LESS\n                               else if x \\<in> D2 \\<and> z \\<in> D1\n                                    then GREATER else cmp2 x z) =\n                         LESS\n 3. \\<And>x y z.\n       \\<lbrakk>x \\<in> D; y \\<in> D; z \\<in> D;\n        (if x \\<in> D1 \\<and> y \\<in> D1 then cmp1 x y\n         else if x \\<in> D1 \\<and> y \\<in> D2 then LESS\n              else if x \\<in> D2 \\<and> y \\<in> D1 then GREATER\n                   else cmp2 x y) =\n        EQUAL;\n        (if y \\<in> D1 \\<and> z \\<in> D1 then cmp1 y z\n         else if y \\<in> D1 \\<and> z \\<in> D2 then LESS\n              else if y \\<in> D2 \\<and> z \\<in> D1 then GREATER\n                   else cmp2 y z) =\n        EQUAL;\n        linorder_on D1 cmp1; linorder_on D2 cmp2;\n        D = D1 \\<union> D2\\<rbrakk>\n       \\<Longrightarrow> (if x \\<in> D1 \\<and> z \\<in> D1 then cmp1 x z\n                          else if x \\<in> D1 \\<and> z \\<in> D2 then LESS\n                               else if x \\<in> D2 \\<and> z \\<in> D1\n                                    then GREATER else cmp2 x z) =\n                         EQUAL", "apply (simp only:)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>x y z.\n       \\<lbrakk>x \\<in> D1 \\<union> D2; y \\<in> D1 \\<union> D2;\n        z \\<in> D1 \\<union> D2;\n        (if x \\<in> D1 \\<and> y \\<in> D1 then cmp1 x y\n         else if x \\<in> D1 \\<and> y \\<in> D2 then LESS\n              else if x \\<in> D2 \\<and> y \\<in> D1 then GREATER\n                   else cmp2 x y) =\n        LESS;\n        (if y \\<in> D1 \\<and> z \\<in> D1 then cmp1 y z\n         else if y \\<in> D1 \\<and> z \\<in> D2 then LESS\n              else if y \\<in> D2 \\<and> z \\<in> D1 then GREATER\n                   else cmp2 y z) =\n        EQUAL;\n        linorder_on D1 cmp1; linorder_on D2 cmp2;\n        D = D1 \\<union> D2\\<rbrakk>\n       \\<Longrightarrow> (if x \\<in> D1 \\<and> z \\<in> D1 then cmp1 x z\n                          else if x \\<in> D1 \\<and> z \\<in> D2 then LESS\n                               else if x \\<in> D2 \\<and> z \\<in> D1\n                                    then GREATER else cmp2 x z) =\n                         LESS\n 2. \\<And>x y z.\n       \\<lbrakk>x \\<in> D; y \\<in> D; z \\<in> D;\n        (if x \\<in> D1 \\<and> y \\<in> D1 then cmp1 x y\n         else if x \\<in> D1 \\<and> y \\<in> D2 then LESS\n              else if x \\<in> D2 \\<and> y \\<in> D1 then GREATER\n                   else cmp2 x y) =\n        EQUAL;\n        (if y \\<in> D1 \\<and> z \\<in> D1 then cmp1 y z\n         else if y \\<in> D1 \\<and> z \\<in> D2 then LESS\n              else if y \\<in> D2 \\<and> z \\<in> D1 then GREATER\n                   else cmp2 y z) =\n        LESS;\n        linorder_on D1 cmp1; linorder_on D2 cmp2;\n        D = D1 \\<union> D2\\<rbrakk>\n       \\<Longrightarrow> (if x \\<in> D1 \\<and> z \\<in> D1 then cmp1 x z\n                          else if x \\<in> D1 \\<and> z \\<in> D2 then LESS\n                               else if x \\<in> D2 \\<and> z \\<in> D1\n                                    then GREATER else cmp2 x z) =\n                         LESS\n 3. \\<And>x y z.\n       \\<lbrakk>x \\<in> D; y \\<in> D; z \\<in> D;\n        (if x \\<in> D1 \\<and> y \\<in> D1 then cmp1 x y\n         else if x \\<in> D1 \\<and> y \\<in> D2 then LESS\n              else if x \\<in> D2 \\<and> y \\<in> D1 then GREATER\n                   else cmp2 x y) =\n        EQUAL;\n        (if y \\<in> D1 \\<and> z \\<in> D1 then cmp1 y z\n         else if y \\<in> D1 \\<and> z \\<in> D2 then LESS\n              else if y \\<in> D2 \\<and> z \\<in> D1 then GREATER\n                   else cmp2 y z) =\n        EQUAL;\n        linorder_on D1 cmp1; linorder_on D2 cmp2;\n        D = D1 \\<union> D2\\<rbrakk>\n       \\<Longrightarrow> (if x \\<in> D1 \\<and> z \\<in> D1 then cmp1 x z\n                          else if x \\<in> D1 \\<and> z \\<in> D2 then LESS\n                               else if x \\<in> D2 \\<and> z \\<in> D1\n                                    then GREATER else cmp2 x z) =\n                         EQUAL", "apply (elim UnE')"], ["proof (prove)\ngoal (10 subgoals):\n 1. \\<And>x y z.\n       \\<lbrakk>(if x \\<in> D1 \\<and> y \\<in> D1 then cmp1 x y\n                 else if x \\<in> D1 \\<and> y \\<in> D2 then LESS\n                      else if x \\<in> D2 \\<and> y \\<in> D1 then GREATER\n                           else cmp2 x y) =\n                LESS;\n        (if y \\<in> D1 \\<and> z \\<in> D1 then cmp1 y z\n         else if y \\<in> D1 \\<and> z \\<in> D2 then LESS\n              else if y \\<in> D2 \\<and> z \\<in> D1 then GREATER\n                   else cmp2 y z) =\n        EQUAL;\n        linorder_on D1 cmp1; linorder_on D2 cmp2; D = D1 \\<union> D2;\n        x \\<in> D1; y \\<in> D1; z \\<in> D1\\<rbrakk>\n       \\<Longrightarrow> (if x \\<in> D1 \\<and> z \\<in> D1 then cmp1 x z\n                          else if x \\<in> D1 \\<and> z \\<in> D2 then LESS\n                               else if x \\<in> D2 \\<and> z \\<in> D1\n                                    then GREATER else cmp2 x z) =\n                         LESS\n 2. \\<And>x y z.\n       \\<lbrakk>(if x \\<in> D1 \\<and> y \\<in> D1 then cmp1 x y\n                 else if x \\<in> D1 \\<and> y \\<in> D2 then LESS\n                      else if x \\<in> D2 \\<and> y \\<in> D1 then GREATER\n                           else cmp2 x y) =\n                LESS;\n        (if y \\<in> D1 \\<and> z \\<in> D1 then cmp1 y z\n         else if y \\<in> D1 \\<and> z \\<in> D2 then LESS\n              else if y \\<in> D2 \\<and> z \\<in> D1 then GREATER\n                   else cmp2 y z) =\n        EQUAL;\n        linorder_on D1 cmp1; linorder_on D2 cmp2; D = D1 \\<union> D2;\n        x \\<in> D1; y \\<in> D1; z \\<notin> D1; z \\<in> D2\\<rbrakk>\n       \\<Longrightarrow> (if x \\<in> D1 \\<and> z \\<in> D1 then cmp1 x z\n                          else if x \\<in> D1 \\<and> z \\<in> D2 then LESS\n                               else if x \\<in> D2 \\<and> z \\<in> D1\n                                    then GREATER else cmp2 x z) =\n                         LESS\n 3. \\<And>x y z.\n       \\<lbrakk>(if x \\<in> D1 \\<and> y \\<in> D1 then cmp1 x y\n                 else if x \\<in> D1 \\<and> y \\<in> D2 then LESS\n                      else if x \\<in> D2 \\<and> y \\<in> D1 then GREATER\n                           else cmp2 x y) =\n                LESS;\n        (if y \\<in> D1 \\<and> z \\<in> D1 then cmp1 y z\n         else if y \\<in> D1 \\<and> z \\<in> D2 then LESS\n              else if y \\<in> D2 \\<and> z \\<in> D1 then GREATER\n                   else cmp2 y z) =\n        EQUAL;\n        linorder_on D1 cmp1; linorder_on D2 cmp2; D = D1 \\<union> D2;\n        x \\<in> D1; y \\<notin> D1; y \\<in> D2; z \\<in> D1\\<rbrakk>\n       \\<Longrightarrow> (if x \\<in> D1 \\<and> z \\<in> D1 then cmp1 x z\n                          else if x \\<in> D1 \\<and> z \\<in> D2 then LESS\n                               else if x \\<in> D2 \\<and> z \\<in> D1\n                                    then GREATER else cmp2 x z) =\n                         LESS\n 4. \\<And>x y z.\n       \\<lbrakk>(if x \\<in> D1 \\<and> y \\<in> D1 then cmp1 x y\n                 else if x \\<in> D1 \\<and> y \\<in> D2 then LESS\n                      else if x \\<in> D2 \\<and> y \\<in> D1 then GREATER\n                           else cmp2 x y) =\n                LESS;\n        (if y \\<in> D1 \\<and> z \\<in> D1 then cmp1 y z\n         else if y \\<in> D1 \\<and> z \\<in> D2 then LESS\n              else if y \\<in> D2 \\<and> z \\<in> D1 then GREATER\n                   else cmp2 y z) =\n        EQUAL;\n        linorder_on D1 cmp1; linorder_on D2 cmp2; D = D1 \\<union> D2;\n        x \\<in> D1; y \\<notin> D1; y \\<in> D2; z \\<notin> D1;\n        z \\<in> D2\\<rbrakk>\n       \\<Longrightarrow> (if x \\<in> D1 \\<and> z \\<in> D1 then cmp1 x z\n                          else if x \\<in> D1 \\<and> z \\<in> D2 then LESS\n                               else if x \\<in> D2 \\<and> z \\<in> D1\n                                    then GREATER else cmp2 x z) =\n                         LESS\n 5. \\<And>x y z.\n       \\<lbrakk>(if x \\<in> D1 \\<and> y \\<in> D1 then cmp1 x y\n                 else if x \\<in> D1 \\<and> y \\<in> D2 then LESS\n                      else if x \\<in> D2 \\<and> y \\<in> D1 then GREATER\n                           else cmp2 x y) =\n                LESS;\n        (if y \\<in> D1 \\<and> z \\<in> D1 then cmp1 y z\n         else if y \\<in> D1 \\<and> z \\<in> D2 then LESS\n              else if y \\<in> D2 \\<and> z \\<in> D1 then GREATER\n                   else cmp2 y z) =\n        EQUAL;\n        linorder_on D1 cmp1; linorder_on D2 cmp2; D = D1 \\<union> D2;\n        x \\<notin> D1; x \\<in> D2; y \\<in> D1; z \\<in> D1\\<rbrakk>\n       \\<Longrightarrow> (if x \\<in> D1 \\<and> z \\<in> D1 then cmp1 x z\n                          else if x \\<in> D1 \\<and> z \\<in> D2 then LESS\n                               else if x \\<in> D2 \\<and> z \\<in> D1\n                                    then GREATER else cmp2 x z) =\n                         LESS\n 6. \\<And>x y z.\n       \\<lbrakk>(if x \\<in> D1 \\<and> y \\<in> D1 then cmp1 x y\n                 else if x \\<in> D1 \\<and> y \\<in> D2 then LESS\n                      else if x \\<in> D2 \\<and> y \\<in> D1 then GREATER\n                           else cmp2 x y) =\n                LESS;\n        (if y \\<in> D1 \\<and> z \\<in> D1 then cmp1 y z\n         else if y \\<in> D1 \\<and> z \\<in> D2 then LESS\n              else if y \\<in> D2 \\<and> z \\<in> D1 then GREATER\n                   else cmp2 y z) =\n        EQUAL;\n        linorder_on D1 cmp1; linorder_on D2 cmp2; D = D1 \\<union> D2;\n        x \\<notin> D1; x \\<in> D2; y \\<in> D1; z \\<notin> D1;\n        z \\<in> D2\\<rbrakk>\n       \\<Longrightarrow> (if x \\<in> D1 \\<and> z \\<in> D1 then cmp1 x z\n                          else if x \\<in> D1 \\<and> z \\<in> D2 then LESS\n                               else if x \\<in> D2 \\<and> z \\<in> D1\n                                    then GREATER else cmp2 x z) =\n                         LESS\n 7. \\<And>x y z.\n       \\<lbrakk>(if x \\<in> D1 \\<and> y \\<in> D1 then cmp1 x y\n                 else if x \\<in> D1 \\<and> y \\<in> D2 then LESS\n                      else if x \\<in> D2 \\<and> y \\<in> D1 then GREATER\n                           else cmp2 x y) =\n                LESS;\n        (if y \\<in> D1 \\<and> z \\<in> D1 then cmp1 y z\n         else if y \\<in> D1 \\<and> z \\<in> D2 then LESS\n              else if y \\<in> D2 \\<and> z \\<in> D1 then GREATER\n                   else cmp2 y z) =\n        EQUAL;\n        linorder_on D1 cmp1; linorder_on D2 cmp2; D = D1 \\<union> D2;\n        x \\<notin> D1; x \\<in> D2; y \\<notin> D1; y \\<in> D2;\n        z \\<in> D1\\<rbrakk>\n       \\<Longrightarrow> (if x \\<in> D1 \\<and> z \\<in> D1 then cmp1 x z\n                          else if x \\<in> D1 \\<and> z \\<in> D2 then LESS\n                               else if x \\<in> D2 \\<and> z \\<in> D1\n                                    then GREATER else cmp2 x z) =\n                         LESS\n 8. \\<And>x y z.\n       \\<lbrakk>(if x \\<in> D1 \\<and> y \\<in> D1 then cmp1 x y\n                 else if x \\<in> D1 \\<and> y \\<in> D2 then LESS\n                      else if x \\<in> D2 \\<and> y \\<in> D1 then GREATER\n                           else cmp2 x y) =\n                LESS;\n        (if y \\<in> D1 \\<and> z \\<in> D1 then cmp1 y z\n         else if y \\<in> D1 \\<and> z \\<in> D2 then LESS\n              else if y \\<in> D2 \\<and> z \\<in> D1 then GREATER\n                   else cmp2 y z) =\n        EQUAL;\n        linorder_on D1 cmp1; linorder_on D2 cmp2; D = D1 \\<union> D2;\n        x \\<notin> D1; x \\<in> D2; y \\<notin> D1; y \\<in> D2; z \\<notin> D1;\n        z \\<in> D2\\<rbrakk>\n       \\<Longrightarrow> (if x \\<in> D1 \\<and> z \\<in> D1 then cmp1 x z\n                          else if x \\<in> D1 \\<and> z \\<in> D2 then LESS\n                               else if x \\<in> D2 \\<and> z \\<in> D1\n                                    then GREATER else cmp2 x z) =\n                         LESS\n 9. \\<And>x y z.\n       \\<lbrakk>x \\<in> D; y \\<in> D; z \\<in> D;\n        (if x \\<in> D1 \\<and> y \\<in> D1 then cmp1 x y\n         else if x \\<in> D1 \\<and> y \\<in> D2 then LESS\n              else if x \\<in> D2 \\<and> y \\<in> D1 then GREATER\n                   else cmp2 x y) =\n        EQUAL;\n        (if y \\<in> D1 \\<and> z \\<in> D1 then cmp1 y z\n         else if y \\<in> D1 \\<and> z \\<in> D2 then LESS\n              else if y \\<in> D2 \\<and> z \\<in> D1 then GREATER\n                   else cmp2 y z) =\n        LESS;\n        linorder_on D1 cmp1; linorder_on D2 cmp2;\n        D = D1 \\<union> D2\\<rbrakk>\n       \\<Longrightarrow> (if x \\<in> D1 \\<and> z \\<in> D1 then cmp1 x z\n                          else if x \\<in> D1 \\<and> z \\<in> D2 then LESS\n                               else if x \\<in> D2 \\<and> z \\<in> D1\n                                    then GREATER else cmp2 x z) =\n                         LESS\n 10. \\<And>x y z.\n        \\<lbrakk>x \\<in> D; y \\<in> D; z \\<in> D;\n         (if x \\<in> D1 \\<and> y \\<in> D1 then cmp1 x y\n          else if x \\<in> D1 \\<and> y \\<in> D2 then LESS\n               else if x \\<in> D2 \\<and> y \\<in> D1 then GREATER\n                    else cmp2 x y) =\n         EQUAL;\n         (if y \\<in> D1 \\<and> z \\<in> D1 then cmp1 y z\n          else if y \\<in> D1 \\<and> z \\<in> D2 then LESS\n               else if y \\<in> D2 \\<and> z \\<in> D1 then GREATER\n                    else cmp2 y z) =\n         EQUAL;\n         linorder_on D1 cmp1; linorder_on D2 cmp2;\n         D = D1 \\<union> D2\\<rbrakk>\n        \\<Longrightarrow> (if x \\<in> D1 \\<and> z \\<in> D1 then cmp1 x z\n                           else if x \\<in> D1 \\<and> z \\<in> D2 then LESS\n                                else if x \\<in> D2 \\<and> z \\<in> D1\n                                     then GREATER else cmp2 x z) =\n                          EQUAL", "apply simp_all [8]"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>x y z.\n       \\<lbrakk>cmp1 x y = LESS; cmp1 y z = EQUAL; linorder_on D1 cmp1;\n        linorder_on D2 cmp2; D = D1 \\<union> D2; x \\<in> D1; y \\<in> D1;\n        z \\<in> D1\\<rbrakk>\n       \\<Longrightarrow> cmp1 x z = LESS\n 2. \\<And>x y z.\n       \\<lbrakk>cmp2 x y = LESS; cmp2 y z = EQUAL; linorder_on D1 cmp1;\n        linorder_on D2 cmp2; D = D1 \\<union> D2; x \\<notin> D1; x \\<in> D2;\n        y \\<notin> D1; y \\<in> D2; z \\<notin> D1; z \\<in> D2\\<rbrakk>\n       \\<Longrightarrow> cmp2 x z = LESS\n 3. \\<And>x y z.\n       \\<lbrakk>x \\<in> D; y \\<in> D; z \\<in> D;\n        (if x \\<in> D1 \\<and> y \\<in> D1 then cmp1 x y\n         else if x \\<in> D1 \\<and> y \\<in> D2 then LESS\n              else if x \\<in> D2 \\<and> y \\<in> D1 then GREATER\n                   else cmp2 x y) =\n        EQUAL;\n        (if y \\<in> D1 \\<and> z \\<in> D1 then cmp1 y z\n         else if y \\<in> D1 \\<and> z \\<in> D2 then LESS\n              else if y \\<in> D2 \\<and> z \\<in> D1 then GREATER\n                   else cmp2 y z) =\n        LESS;\n        linorder_on D1 cmp1; linorder_on D2 cmp2;\n        D = D1 \\<union> D2\\<rbrakk>\n       \\<Longrightarrow> (if x \\<in> D1 \\<and> z \\<in> D1 then cmp1 x z\n                          else if x \\<in> D1 \\<and> z \\<in> D2 then LESS\n                               else if x \\<in> D2 \\<and> z \\<in> D1\n                                    then GREATER else cmp2 x z) =\n                         LESS\n 4. \\<And>x y z.\n       \\<lbrakk>x \\<in> D; y \\<in> D; z \\<in> D;\n        (if x \\<in> D1 \\<and> y \\<in> D1 then cmp1 x y\n         else if x \\<in> D1 \\<and> y \\<in> D2 then LESS\n              else if x \\<in> D2 \\<and> y \\<in> D1 then GREATER\n                   else cmp2 x y) =\n        EQUAL;\n        (if y \\<in> D1 \\<and> z \\<in> D1 then cmp1 y z\n         else if y \\<in> D1 \\<and> z \\<in> D2 then LESS\n              else if y \\<in> D2 \\<and> z \\<in> D1 then GREATER\n                   else cmp2 y z) =\n        EQUAL;\n        linorder_on D1 cmp1; linorder_on D2 cmp2;\n        D = D1 \\<union> D2\\<rbrakk>\n       \\<Longrightarrow> (if x \\<in> D1 \\<and> z \\<in> D1 then cmp1 x z\n                          else if x \\<in> D1 \\<and> z \\<in> D2 then LESS\n                               else if x \\<in> D2 \\<and> z \\<in> D1\n                                    then GREATER else cmp2 x z) =\n                         EQUAL", "apply (erule (5) linorder_on.trans)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>x y z.\n       \\<lbrakk>cmp2 x y = LESS; cmp2 y z = EQUAL; linorder_on D1 cmp1;\n        linorder_on D2 cmp2; D = D1 \\<union> D2; x \\<notin> D1; x \\<in> D2;\n        y \\<notin> D1; y \\<in> D2; z \\<notin> D1; z \\<in> D2\\<rbrakk>\n       \\<Longrightarrow> cmp2 x z = LESS\n 2. \\<And>x y z.\n       \\<lbrakk>x \\<in> D; y \\<in> D; z \\<in> D;\n        (if x \\<in> D1 \\<and> y \\<in> D1 then cmp1 x y\n         else if x \\<in> D1 \\<and> y \\<in> D2 then LESS\n              else if x \\<in> D2 \\<and> y \\<in> D1 then GREATER\n                   else cmp2 x y) =\n        EQUAL;\n        (if y \\<in> D1 \\<and> z \\<in> D1 then cmp1 y z\n         else if y \\<in> D1 \\<and> z \\<in> D2 then LESS\n              else if y \\<in> D2 \\<and> z \\<in> D1 then GREATER\n                   else cmp2 y z) =\n        LESS;\n        linorder_on D1 cmp1; linorder_on D2 cmp2;\n        D = D1 \\<union> D2\\<rbrakk>\n       \\<Longrightarrow> (if x \\<in> D1 \\<and> z \\<in> D1 then cmp1 x z\n                          else if x \\<in> D1 \\<and> z \\<in> D2 then LESS\n                               else if x \\<in> D2 \\<and> z \\<in> D1\n                                    then GREATER else cmp2 x z) =\n                         LESS\n 3. \\<And>x y z.\n       \\<lbrakk>x \\<in> D; y \\<in> D; z \\<in> D;\n        (if x \\<in> D1 \\<and> y \\<in> D1 then cmp1 x y\n         else if x \\<in> D1 \\<and> y \\<in> D2 then LESS\n              else if x \\<in> D2 \\<and> y \\<in> D1 then GREATER\n                   else cmp2 x y) =\n        EQUAL;\n        (if y \\<in> D1 \\<and> z \\<in> D1 then cmp1 y z\n         else if y \\<in> D1 \\<and> z \\<in> D2 then LESS\n              else if y \\<in> D2 \\<and> z \\<in> D1 then GREATER\n                   else cmp2 y z) =\n        EQUAL;\n        linorder_on D1 cmp1; linorder_on D2 cmp2;\n        D = D1 \\<union> D2\\<rbrakk>\n       \\<Longrightarrow> (if x \\<in> D1 \\<and> z \\<in> D1 then cmp1 x z\n                          else if x \\<in> D1 \\<and> z \\<in> D2 then LESS\n                               else if x \\<in> D2 \\<and> z \\<in> D1\n                                    then GREATER else cmp2 x z) =\n                         EQUAL", "apply (erule (5) linorder_on.trans)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x y z.\n       \\<lbrakk>x \\<in> D; y \\<in> D; z \\<in> D;\n        (if x \\<in> D1 \\<and> y \\<in> D1 then cmp1 x y\n         else if x \\<in> D1 \\<and> y \\<in> D2 then LESS\n              else if x \\<in> D2 \\<and> y \\<in> D1 then GREATER\n                   else cmp2 x y) =\n        EQUAL;\n        (if y \\<in> D1 \\<and> z \\<in> D1 then cmp1 y z\n         else if y \\<in> D1 \\<and> z \\<in> D2 then LESS\n              else if y \\<in> D2 \\<and> z \\<in> D1 then GREATER\n                   else cmp2 y z) =\n        LESS;\n        linorder_on D1 cmp1; linorder_on D2 cmp2;\n        D = D1 \\<union> D2\\<rbrakk>\n       \\<Longrightarrow> (if x \\<in> D1 \\<and> z \\<in> D1 then cmp1 x z\n                          else if x \\<in> D1 \\<and> z \\<in> D2 then LESS\n                               else if x \\<in> D2 \\<and> z \\<in> D1\n                                    then GREATER else cmp2 x z) =\n                         LESS\n 2. \\<And>x y z.\n       \\<lbrakk>x \\<in> D; y \\<in> D; z \\<in> D;\n        (if x \\<in> D1 \\<and> y \\<in> D1 then cmp1 x y\n         else if x \\<in> D1 \\<and> y \\<in> D2 then LESS\n              else if x \\<in> D2 \\<and> y \\<in> D1 then GREATER\n                   else cmp2 x y) =\n        EQUAL;\n        (if y \\<in> D1 \\<and> z \\<in> D1 then cmp1 y z\n         else if y \\<in> D1 \\<and> z \\<in> D2 then LESS\n              else if y \\<in> D2 \\<and> z \\<in> D1 then GREATER\n                   else cmp2 y z) =\n        EQUAL;\n        linorder_on D1 cmp1; linorder_on D2 cmp2;\n        D = D1 \\<union> D2\\<rbrakk>\n       \\<Longrightarrow> (if x \\<in> D1 \\<and> z \\<in> D1 then cmp1 x z\n                          else if x \\<in> D1 \\<and> z \\<in> D2 then LESS\n                               else if x \\<in> D2 \\<and> z \\<in> D1\n                                    then GREATER else cmp2 x z) =\n                         EQUAL", "apply (simp only:)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x y z.\n       \\<lbrakk>x \\<in> D1 \\<union> D2; y \\<in> D1 \\<union> D2;\n        z \\<in> D1 \\<union> D2;\n        (if x \\<in> D1 \\<and> y \\<in> D1 then cmp1 x y\n         else if x \\<in> D1 \\<and> y \\<in> D2 then LESS\n              else if x \\<in> D2 \\<and> y \\<in> D1 then GREATER\n                   else cmp2 x y) =\n        EQUAL;\n        (if y \\<in> D1 \\<and> z \\<in> D1 then cmp1 y z\n         else if y \\<in> D1 \\<and> z \\<in> D2 then LESS\n              else if y \\<in> D2 \\<and> z \\<in> D1 then GREATER\n                   else cmp2 y z) =\n        LESS;\n        linorder_on D1 cmp1; linorder_on D2 cmp2;\n        D = D1 \\<union> D2\\<rbrakk>\n       \\<Longrightarrow> (if x \\<in> D1 \\<and> z \\<in> D1 then cmp1 x z\n                          else if x \\<in> D1 \\<and> z \\<in> D2 then LESS\n                               else if x \\<in> D2 \\<and> z \\<in> D1\n                                    then GREATER else cmp2 x z) =\n                         LESS\n 2. \\<And>x y z.\n       \\<lbrakk>x \\<in> D; y \\<in> D; z \\<in> D;\n        (if x \\<in> D1 \\<and> y \\<in> D1 then cmp1 x y\n         else if x \\<in> D1 \\<and> y \\<in> D2 then LESS\n              else if x \\<in> D2 \\<and> y \\<in> D1 then GREATER\n                   else cmp2 x y) =\n        EQUAL;\n        (if y \\<in> D1 \\<and> z \\<in> D1 then cmp1 y z\n         else if y \\<in> D1 \\<and> z \\<in> D2 then LESS\n              else if y \\<in> D2 \\<and> z \\<in> D1 then GREATER\n                   else cmp2 y z) =\n        EQUAL;\n        linorder_on D1 cmp1; linorder_on D2 cmp2;\n        D = D1 \\<union> D2\\<rbrakk>\n       \\<Longrightarrow> (if x \\<in> D1 \\<and> z \\<in> D1 then cmp1 x z\n                          else if x \\<in> D1 \\<and> z \\<in> D2 then LESS\n                               else if x \\<in> D2 \\<and> z \\<in> D1\n                                    then GREATER else cmp2 x z) =\n                         EQUAL", "apply (elim UnE')"], ["proof (prove)\ngoal (9 subgoals):\n 1. \\<And>x y z.\n       \\<lbrakk>(if x \\<in> D1 \\<and> y \\<in> D1 then cmp1 x y\n                 else if x \\<in> D1 \\<and> y \\<in> D2 then LESS\n                      else if x \\<in> D2 \\<and> y \\<in> D1 then GREATER\n                           else cmp2 x y) =\n                EQUAL;\n        (if y \\<in> D1 \\<and> z \\<in> D1 then cmp1 y z\n         else if y \\<in> D1 \\<and> z \\<in> D2 then LESS\n              else if y \\<in> D2 \\<and> z \\<in> D1 then GREATER\n                   else cmp2 y z) =\n        LESS;\n        linorder_on D1 cmp1; linorder_on D2 cmp2; D = D1 \\<union> D2;\n        x \\<in> D1; y \\<in> D1; z \\<in> D1\\<rbrakk>\n       \\<Longrightarrow> (if x \\<in> D1 \\<and> z \\<in> D1 then cmp1 x z\n                          else if x \\<in> D1 \\<and> z \\<in> D2 then LESS\n                               else if x \\<in> D2 \\<and> z \\<in> D1\n                                    then GREATER else cmp2 x z) =\n                         LESS\n 2. \\<And>x y z.\n       \\<lbrakk>(if x \\<in> D1 \\<and> y \\<in> D1 then cmp1 x y\n                 else if x \\<in> D1 \\<and> y \\<in> D2 then LESS\n                      else if x \\<in> D2 \\<and> y \\<in> D1 then GREATER\n                           else cmp2 x y) =\n                EQUAL;\n        (if y \\<in> D1 \\<and> z \\<in> D1 then cmp1 y z\n         else if y \\<in> D1 \\<and> z \\<in> D2 then LESS\n              else if y \\<in> D2 \\<and> z \\<in> D1 then GREATER\n                   else cmp2 y z) =\n        LESS;\n        linorder_on D1 cmp1; linorder_on D2 cmp2; D = D1 \\<union> D2;\n        x \\<in> D1; y \\<in> D1; z \\<notin> D1; z \\<in> D2\\<rbrakk>\n       \\<Longrightarrow> (if x \\<in> D1 \\<and> z \\<in> D1 then cmp1 x z\n                          else if x \\<in> D1 \\<and> z \\<in> D2 then LESS\n                               else if x \\<in> D2 \\<and> z \\<in> D1\n                                    then GREATER else cmp2 x z) =\n                         LESS\n 3. \\<And>x y z.\n       \\<lbrakk>(if x \\<in> D1 \\<and> y \\<in> D1 then cmp1 x y\n                 else if x \\<in> D1 \\<and> y \\<in> D2 then LESS\n                      else if x \\<in> D2 \\<and> y \\<in> D1 then GREATER\n                           else cmp2 x y) =\n                EQUAL;\n        (if y \\<in> D1 \\<and> z \\<in> D1 then cmp1 y z\n         else if y \\<in> D1 \\<and> z \\<in> D2 then LESS\n              else if y \\<in> D2 \\<and> z \\<in> D1 then GREATER\n                   else cmp2 y z) =\n        LESS;\n        linorder_on D1 cmp1; linorder_on D2 cmp2; D = D1 \\<union> D2;\n        x \\<in> D1; y \\<notin> D1; y \\<in> D2; z \\<in> D1\\<rbrakk>\n       \\<Longrightarrow> (if x \\<in> D1 \\<and> z \\<in> D1 then cmp1 x z\n                          else if x \\<in> D1 \\<and> z \\<in> D2 then LESS\n                               else if x \\<in> D2 \\<and> z \\<in> D1\n                                    then GREATER else cmp2 x z) =\n                         LESS\n 4. \\<And>x y z.\n       \\<lbrakk>(if x \\<in> D1 \\<and> y \\<in> D1 then cmp1 x y\n                 else if x \\<in> D1 \\<and> y \\<in> D2 then LESS\n                      else if x \\<in> D2 \\<and> y \\<in> D1 then GREATER\n                           else cmp2 x y) =\n                EQUAL;\n        (if y \\<in> D1 \\<and> z \\<in> D1 then cmp1 y z\n         else if y \\<in> D1 \\<and> z \\<in> D2 then LESS\n              else if y \\<in> D2 \\<and> z \\<in> D1 then GREATER\n                   else cmp2 y z) =\n        LESS;\n        linorder_on D1 cmp1; linorder_on D2 cmp2; D = D1 \\<union> D2;\n        x \\<in> D1; y \\<notin> D1; y \\<in> D2; z \\<notin> D1;\n        z \\<in> D2\\<rbrakk>\n       \\<Longrightarrow> (if x \\<in> D1 \\<and> z \\<in> D1 then cmp1 x z\n                          else if x \\<in> D1 \\<and> z \\<in> D2 then LESS\n                               else if x \\<in> D2 \\<and> z \\<in> D1\n                                    then GREATER else cmp2 x z) =\n                         LESS\n 5. \\<And>x y z.\n       \\<lbrakk>(if x \\<in> D1 \\<and> y \\<in> D1 then cmp1 x y\n                 else if x \\<in> D1 \\<and> y \\<in> D2 then LESS\n                      else if x \\<in> D2 \\<and> y \\<in> D1 then GREATER\n                           else cmp2 x y) =\n                EQUAL;\n        (if y \\<in> D1 \\<and> z \\<in> D1 then cmp1 y z\n         else if y \\<in> D1 \\<and> z \\<in> D2 then LESS\n              else if y \\<in> D2 \\<and> z \\<in> D1 then GREATER\n                   else cmp2 y z) =\n        LESS;\n        linorder_on D1 cmp1; linorder_on D2 cmp2; D = D1 \\<union> D2;\n        x \\<notin> D1; x \\<in> D2; y \\<in> D1; z \\<in> D1\\<rbrakk>\n       \\<Longrightarrow> (if x \\<in> D1 \\<and> z \\<in> D1 then cmp1 x z\n                          else if x \\<in> D1 \\<and> z \\<in> D2 then LESS\n                               else if x \\<in> D2 \\<and> z \\<in> D1\n                                    then GREATER else cmp2 x z) =\n                         LESS\n 6. \\<And>x y z.\n       \\<lbrakk>(if x \\<in> D1 \\<and> y \\<in> D1 then cmp1 x y\n                 else if x \\<in> D1 \\<and> y \\<in> D2 then LESS\n                      else if x \\<in> D2 \\<and> y \\<in> D1 then GREATER\n                           else cmp2 x y) =\n                EQUAL;\n        (if y \\<in> D1 \\<and> z \\<in> D1 then cmp1 y z\n         else if y \\<in> D1 \\<and> z \\<in> D2 then LESS\n              else if y \\<in> D2 \\<and> z \\<in> D1 then GREATER\n                   else cmp2 y z) =\n        LESS;\n        linorder_on D1 cmp1; linorder_on D2 cmp2; D = D1 \\<union> D2;\n        x \\<notin> D1; x \\<in> D2; y \\<in> D1; z \\<notin> D1;\n        z \\<in> D2\\<rbrakk>\n       \\<Longrightarrow> (if x \\<in> D1 \\<and> z \\<in> D1 then cmp1 x z\n                          else if x \\<in> D1 \\<and> z \\<in> D2 then LESS\n                               else if x \\<in> D2 \\<and> z \\<in> D1\n                                    then GREATER else cmp2 x z) =\n                         LESS\n 7. \\<And>x y z.\n       \\<lbrakk>(if x \\<in> D1 \\<and> y \\<in> D1 then cmp1 x y\n                 else if x \\<in> D1 \\<and> y \\<in> D2 then LESS\n                      else if x \\<in> D2 \\<and> y \\<in> D1 then GREATER\n                           else cmp2 x y) =\n                EQUAL;\n        (if y \\<in> D1 \\<and> z \\<in> D1 then cmp1 y z\n         else if y \\<in> D1 \\<and> z \\<in> D2 then LESS\n              else if y \\<in> D2 \\<and> z \\<in> D1 then GREATER\n                   else cmp2 y z) =\n        LESS;\n        linorder_on D1 cmp1; linorder_on D2 cmp2; D = D1 \\<union> D2;\n        x \\<notin> D1; x \\<in> D2; y \\<notin> D1; y \\<in> D2;\n        z \\<in> D1\\<rbrakk>\n       \\<Longrightarrow> (if x \\<in> D1 \\<and> z \\<in> D1 then cmp1 x z\n                          else if x \\<in> D1 \\<and> z \\<in> D2 then LESS\n                               else if x \\<in> D2 \\<and> z \\<in> D1\n                                    then GREATER else cmp2 x z) =\n                         LESS\n 8. \\<And>x y z.\n       \\<lbrakk>(if x \\<in> D1 \\<and> y \\<in> D1 then cmp1 x y\n                 else if x \\<in> D1 \\<and> y \\<in> D2 then LESS\n                      else if x \\<in> D2 \\<and> y \\<in> D1 then GREATER\n                           else cmp2 x y) =\n                EQUAL;\n        (if y \\<in> D1 \\<and> z \\<in> D1 then cmp1 y z\n         else if y \\<in> D1 \\<and> z \\<in> D2 then LESS\n              else if y \\<in> D2 \\<and> z \\<in> D1 then GREATER\n                   else cmp2 y z) =\n        LESS;\n        linorder_on D1 cmp1; linorder_on D2 cmp2; D = D1 \\<union> D2;\n        x \\<notin> D1; x \\<in> D2; y \\<notin> D1; y \\<in> D2; z \\<notin> D1;\n        z \\<in> D2\\<rbrakk>\n       \\<Longrightarrow> (if x \\<in> D1 \\<and> z \\<in> D1 then cmp1 x z\n                          else if x \\<in> D1 \\<and> z \\<in> D2 then LESS\n                               else if x \\<in> D2 \\<and> z \\<in> D1\n                                    then GREATER else cmp2 x z) =\n                         LESS\n 9. \\<And>x y z.\n       \\<lbrakk>x \\<in> D; y \\<in> D; z \\<in> D;\n        (if x \\<in> D1 \\<and> y \\<in> D1 then cmp1 x y\n         else if x \\<in> D1 \\<and> y \\<in> D2 then LESS\n              else if x \\<in> D2 \\<and> y \\<in> D1 then GREATER\n                   else cmp2 x y) =\n        EQUAL;\n        (if y \\<in> D1 \\<and> z \\<in> D1 then cmp1 y z\n         else if y \\<in> D1 \\<and> z \\<in> D2 then LESS\n              else if y \\<in> D2 \\<and> z \\<in> D1 then GREATER\n                   else cmp2 y z) =\n        EQUAL;\n        linorder_on D1 cmp1; linorder_on D2 cmp2;\n        D = D1 \\<union> D2\\<rbrakk>\n       \\<Longrightarrow> (if x \\<in> D1 \\<and> z \\<in> D1 then cmp1 x z\n                          else if x \\<in> D1 \\<and> z \\<in> D2 then LESS\n                               else if x \\<in> D2 \\<and> z \\<in> D1\n                                    then GREATER else cmp2 x z) =\n                         EQUAL", "apply simp_all [8]"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>x y z.\n       \\<lbrakk>cmp1 x y = EQUAL; cmp1 y z = LESS; linorder_on D1 cmp1;\n        linorder_on D2 cmp2; D = D1 \\<union> D2; x \\<in> D1; y \\<in> D1;\n        z \\<in> D1\\<rbrakk>\n       \\<Longrightarrow> cmp1 x z = LESS\n 2. \\<And>x y z.\n       \\<lbrakk>cmp2 x y = EQUAL; cmp2 y z = LESS; linorder_on D1 cmp1;\n        linorder_on D2 cmp2; D = D1 \\<union> D2; x \\<notin> D1; x \\<in> D2;\n        y \\<notin> D1; y \\<in> D2; z \\<notin> D1; z \\<in> D2\\<rbrakk>\n       \\<Longrightarrow> cmp2 x z = LESS\n 3. \\<And>x y z.\n       \\<lbrakk>x \\<in> D; y \\<in> D; z \\<in> D;\n        (if x \\<in> D1 \\<and> y \\<in> D1 then cmp1 x y\n         else if x \\<in> D1 \\<and> y \\<in> D2 then LESS\n              else if x \\<in> D2 \\<and> y \\<in> D1 then GREATER\n                   else cmp2 x y) =\n        EQUAL;\n        (if y \\<in> D1 \\<and> z \\<in> D1 then cmp1 y z\n         else if y \\<in> D1 \\<and> z \\<in> D2 then LESS\n              else if y \\<in> D2 \\<and> z \\<in> D1 then GREATER\n                   else cmp2 y z) =\n        EQUAL;\n        linorder_on D1 cmp1; linorder_on D2 cmp2;\n        D = D1 \\<union> D2\\<rbrakk>\n       \\<Longrightarrow> (if x \\<in> D1 \\<and> z \\<in> D1 then cmp1 x z\n                          else if x \\<in> D1 \\<and> z \\<in> D2 then LESS\n                               else if x \\<in> D2 \\<and> z \\<in> D1\n                                    then GREATER else cmp2 x z) =\n                         EQUAL", "apply (erule (5) linorder_on.trans)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x y z.\n       \\<lbrakk>cmp2 x y = EQUAL; cmp2 y z = LESS; linorder_on D1 cmp1;\n        linorder_on D2 cmp2; D = D1 \\<union> D2; x \\<notin> D1; x \\<in> D2;\n        y \\<notin> D1; y \\<in> D2; z \\<notin> D1; z \\<in> D2\\<rbrakk>\n       \\<Longrightarrow> cmp2 x z = LESS\n 2. \\<And>x y z.\n       \\<lbrakk>x \\<in> D; y \\<in> D; z \\<in> D;\n        (if x \\<in> D1 \\<and> y \\<in> D1 then cmp1 x y\n         else if x \\<in> D1 \\<and> y \\<in> D2 then LESS\n              else if x \\<in> D2 \\<and> y \\<in> D1 then GREATER\n                   else cmp2 x y) =\n        EQUAL;\n        (if y \\<in> D1 \\<and> z \\<in> D1 then cmp1 y z\n         else if y \\<in> D1 \\<and> z \\<in> D2 then LESS\n              else if y \\<in> D2 \\<and> z \\<in> D1 then GREATER\n                   else cmp2 y z) =\n        EQUAL;\n        linorder_on D1 cmp1; linorder_on D2 cmp2;\n        D = D1 \\<union> D2\\<rbrakk>\n       \\<Longrightarrow> (if x \\<in> D1 \\<and> z \\<in> D1 then cmp1 x z\n                          else if x \\<in> D1 \\<and> z \\<in> D2 then LESS\n                               else if x \\<in> D2 \\<and> z \\<in> D1\n                                    then GREATER else cmp2 x z) =\n                         EQUAL", "apply (erule (5) linorder_on.trans)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x y z.\n       \\<lbrakk>x \\<in> D; y \\<in> D; z \\<in> D;\n        (if x \\<in> D1 \\<and> y \\<in> D1 then cmp1 x y\n         else if x \\<in> D1 \\<and> y \\<in> D2 then LESS\n              else if x \\<in> D2 \\<and> y \\<in> D1 then GREATER\n                   else cmp2 x y) =\n        EQUAL;\n        (if y \\<in> D1 \\<and> z \\<in> D1 then cmp1 y z\n         else if y \\<in> D1 \\<and> z \\<in> D2 then LESS\n              else if y \\<in> D2 \\<and> z \\<in> D1 then GREATER\n                   else cmp2 y z) =\n        EQUAL;\n        linorder_on D1 cmp1; linorder_on D2 cmp2;\n        D = D1 \\<union> D2\\<rbrakk>\n       \\<Longrightarrow> (if x \\<in> D1 \\<and> z \\<in> D1 then cmp1 x z\n                          else if x \\<in> D1 \\<and> z \\<in> D2 then LESS\n                               else if x \\<in> D2 \\<and> z \\<in> D1\n                                    then GREATER else cmp2 x z) =\n                         EQUAL", "apply (simp only:)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x y z.\n       \\<lbrakk>x \\<in> D1 \\<union> D2; y \\<in> D1 \\<union> D2;\n        z \\<in> D1 \\<union> D2;\n        (if x \\<in> D1 \\<and> y \\<in> D1 then cmp1 x y\n         else if x \\<in> D1 \\<and> y \\<in> D2 then LESS\n              else if x \\<in> D2 \\<and> y \\<in> D1 then GREATER\n                   else cmp2 x y) =\n        EQUAL;\n        (if y \\<in> D1 \\<and> z \\<in> D1 then cmp1 y z\n         else if y \\<in> D1 \\<and> z \\<in> D2 then LESS\n              else if y \\<in> D2 \\<and> z \\<in> D1 then GREATER\n                   else cmp2 y z) =\n        EQUAL;\n        linorder_on D1 cmp1; linorder_on D2 cmp2;\n        D = D1 \\<union> D2\\<rbrakk>\n       \\<Longrightarrow> (if x \\<in> D1 \\<and> z \\<in> D1 then cmp1 x z\n                          else if x \\<in> D1 \\<and> z \\<in> D2 then LESS\n                               else if x \\<in> D2 \\<and> z \\<in> D1\n                                    then GREATER else cmp2 x z) =\n                         EQUAL", "apply (elim UnE')"], ["proof (prove)\ngoal (8 subgoals):\n 1. \\<And>x y z.\n       \\<lbrakk>(if x \\<in> D1 \\<and> y \\<in> D1 then cmp1 x y\n                 else if x \\<in> D1 \\<and> y \\<in> D2 then LESS\n                      else if x \\<in> D2 \\<and> y \\<in> D1 then GREATER\n                           else cmp2 x y) =\n                EQUAL;\n        (if y \\<in> D1 \\<and> z \\<in> D1 then cmp1 y z\n         else if y \\<in> D1 \\<and> z \\<in> D2 then LESS\n              else if y \\<in> D2 \\<and> z \\<in> D1 then GREATER\n                   else cmp2 y z) =\n        EQUAL;\n        linorder_on D1 cmp1; linorder_on D2 cmp2; D = D1 \\<union> D2;\n        x \\<in> D1; y \\<in> D1; z \\<in> D1\\<rbrakk>\n       \\<Longrightarrow> (if x \\<in> D1 \\<and> z \\<in> D1 then cmp1 x z\n                          else if x \\<in> D1 \\<and> z \\<in> D2 then LESS\n                               else if x \\<in> D2 \\<and> z \\<in> D1\n                                    then GREATER else cmp2 x z) =\n                         EQUAL\n 2. \\<And>x y z.\n       \\<lbrakk>(if x \\<in> D1 \\<and> y \\<in> D1 then cmp1 x y\n                 else if x \\<in> D1 \\<and> y \\<in> D2 then LESS\n                      else if x \\<in> D2 \\<and> y \\<in> D1 then GREATER\n                           else cmp2 x y) =\n                EQUAL;\n        (if y \\<in> D1 \\<and> z \\<in> D1 then cmp1 y z\n         else if y \\<in> D1 \\<and> z \\<in> D2 then LESS\n              else if y \\<in> D2 \\<and> z \\<in> D1 then GREATER\n                   else cmp2 y z) =\n        EQUAL;\n        linorder_on D1 cmp1; linorder_on D2 cmp2; D = D1 \\<union> D2;\n        x \\<in> D1; y \\<in> D1; z \\<notin> D1; z \\<in> D2\\<rbrakk>\n       \\<Longrightarrow> (if x \\<in> D1 \\<and> z \\<in> D1 then cmp1 x z\n                          else if x \\<in> D1 \\<and> z \\<in> D2 then LESS\n                               else if x \\<in> D2 \\<and> z \\<in> D1\n                                    then GREATER else cmp2 x z) =\n                         EQUAL\n 3. \\<And>x y z.\n       \\<lbrakk>(if x \\<in> D1 \\<and> y \\<in> D1 then cmp1 x y\n                 else if x \\<in> D1 \\<and> y \\<in> D2 then LESS\n                      else if x \\<in> D2 \\<and> y \\<in> D1 then GREATER\n                           else cmp2 x y) =\n                EQUAL;\n        (if y \\<in> D1 \\<and> z \\<in> D1 then cmp1 y z\n         else if y \\<in> D1 \\<and> z \\<in> D2 then LESS\n              else if y \\<in> D2 \\<and> z \\<in> D1 then GREATER\n                   else cmp2 y z) =\n        EQUAL;\n        linorder_on D1 cmp1; linorder_on D2 cmp2; D = D1 \\<union> D2;\n        x \\<in> D1; y \\<notin> D1; y \\<in> D2; z \\<in> D1\\<rbrakk>\n       \\<Longrightarrow> (if x \\<in> D1 \\<and> z \\<in> D1 then cmp1 x z\n                          else if x \\<in> D1 \\<and> z \\<in> D2 then LESS\n                               else if x \\<in> D2 \\<and> z \\<in> D1\n                                    then GREATER else cmp2 x z) =\n                         EQUAL\n 4. \\<And>x y z.\n       \\<lbrakk>(if x \\<in> D1 \\<and> y \\<in> D1 then cmp1 x y\n                 else if x \\<in> D1 \\<and> y \\<in> D2 then LESS\n                      else if x \\<in> D2 \\<and> y \\<in> D1 then GREATER\n                           else cmp2 x y) =\n                EQUAL;\n        (if y \\<in> D1 \\<and> z \\<in> D1 then cmp1 y z\n         else if y \\<in> D1 \\<and> z \\<in> D2 then LESS\n              else if y \\<in> D2 \\<and> z \\<in> D1 then GREATER\n                   else cmp2 y z) =\n        EQUAL;\n        linorder_on D1 cmp1; linorder_on D2 cmp2; D = D1 \\<union> D2;\n        x \\<in> D1; y \\<notin> D1; y \\<in> D2; z \\<notin> D1;\n        z \\<in> D2\\<rbrakk>\n       \\<Longrightarrow> (if x \\<in> D1 \\<and> z \\<in> D1 then cmp1 x z\n                          else if x \\<in> D1 \\<and> z \\<in> D2 then LESS\n                               else if x \\<in> D2 \\<and> z \\<in> D1\n                                    then GREATER else cmp2 x z) =\n                         EQUAL\n 5. \\<And>x y z.\n       \\<lbrakk>(if x \\<in> D1 \\<and> y \\<in> D1 then cmp1 x y\n                 else if x \\<in> D1 \\<and> y \\<in> D2 then LESS\n                      else if x \\<in> D2 \\<and> y \\<in> D1 then GREATER\n                           else cmp2 x y) =\n                EQUAL;\n        (if y \\<in> D1 \\<and> z \\<in> D1 then cmp1 y z\n         else if y \\<in> D1 \\<and> z \\<in> D2 then LESS\n              else if y \\<in> D2 \\<and> z \\<in> D1 then GREATER\n                   else cmp2 y z) =\n        EQUAL;\n        linorder_on D1 cmp1; linorder_on D2 cmp2; D = D1 \\<union> D2;\n        x \\<notin> D1; x \\<in> D2; y \\<in> D1; z \\<in> D1\\<rbrakk>\n       \\<Longrightarrow> (if x \\<in> D1 \\<and> z \\<in> D1 then cmp1 x z\n                          else if x \\<in> D1 \\<and> z \\<in> D2 then LESS\n                               else if x \\<in> D2 \\<and> z \\<in> D1\n                                    then GREATER else cmp2 x z) =\n                         EQUAL\n 6. \\<And>x y z.\n       \\<lbrakk>(if x \\<in> D1 \\<and> y \\<in> D1 then cmp1 x y\n                 else if x \\<in> D1 \\<and> y \\<in> D2 then LESS\n                      else if x \\<in> D2 \\<and> y \\<in> D1 then GREATER\n                           else cmp2 x y) =\n                EQUAL;\n        (if y \\<in> D1 \\<and> z \\<in> D1 then cmp1 y z\n         else if y \\<in> D1 \\<and> z \\<in> D2 then LESS\n              else if y \\<in> D2 \\<and> z \\<in> D1 then GREATER\n                   else cmp2 y z) =\n        EQUAL;\n        linorder_on D1 cmp1; linorder_on D2 cmp2; D = D1 \\<union> D2;\n        x \\<notin> D1; x \\<in> D2; y \\<in> D1; z \\<notin> D1;\n        z \\<in> D2\\<rbrakk>\n       \\<Longrightarrow> (if x \\<in> D1 \\<and> z \\<in> D1 then cmp1 x z\n                          else if x \\<in> D1 \\<and> z \\<in> D2 then LESS\n                               else if x \\<in> D2 \\<and> z \\<in> D1\n                                    then GREATER else cmp2 x z) =\n                         EQUAL\n 7. \\<And>x y z.\n       \\<lbrakk>(if x \\<in> D1 \\<and> y \\<in> D1 then cmp1 x y\n                 else if x \\<in> D1 \\<and> y \\<in> D2 then LESS\n                      else if x \\<in> D2 \\<and> y \\<in> D1 then GREATER\n                           else cmp2 x y) =\n                EQUAL;\n        (if y \\<in> D1 \\<and> z \\<in> D1 then cmp1 y z\n         else if y \\<in> D1 \\<and> z \\<in> D2 then LESS\n              else if y \\<in> D2 \\<and> z \\<in> D1 then GREATER\n                   else cmp2 y z) =\n        EQUAL;\n        linorder_on D1 cmp1; linorder_on D2 cmp2; D = D1 \\<union> D2;\n        x \\<notin> D1; x \\<in> D2; y \\<notin> D1; y \\<in> D2;\n        z \\<in> D1\\<rbrakk>\n       \\<Longrightarrow> (if x \\<in> D1 \\<and> z \\<in> D1 then cmp1 x z\n                          else if x \\<in> D1 \\<and> z \\<in> D2 then LESS\n                               else if x \\<in> D2 \\<and> z \\<in> D1\n                                    then GREATER else cmp2 x z) =\n                         EQUAL\n 8. \\<And>x y z.\n       \\<lbrakk>(if x \\<in> D1 \\<and> y \\<in> D1 then cmp1 x y\n                 else if x \\<in> D1 \\<and> y \\<in> D2 then LESS\n                      else if x \\<in> D2 \\<and> y \\<in> D1 then GREATER\n                           else cmp2 x y) =\n                EQUAL;\n        (if y \\<in> D1 \\<and> z \\<in> D1 then cmp1 y z\n         else if y \\<in> D1 \\<and> z \\<in> D2 then LESS\n              else if y \\<in> D2 \\<and> z \\<in> D1 then GREATER\n                   else cmp2 y z) =\n        EQUAL;\n        linorder_on D1 cmp1; linorder_on D2 cmp2; D = D1 \\<union> D2;\n        x \\<notin> D1; x \\<in> D2; y \\<notin> D1; y \\<in> D2; z \\<notin> D1;\n        z \\<in> D2\\<rbrakk>\n       \\<Longrightarrow> (if x \\<in> D1 \\<and> z \\<in> D1 then cmp1 x z\n                          else if x \\<in> D1 \\<and> z \\<in> D2 then LESS\n                               else if x \\<in> D2 \\<and> z \\<in> D1\n                                    then GREATER else cmp2 x z) =\n                         EQUAL", "apply simp_all [8]"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x y z.\n       \\<lbrakk>cmp1 x y = EQUAL; cmp1 y z = EQUAL; linorder_on D1 cmp1;\n        linorder_on D2 cmp2; D = D1 \\<union> D2; x \\<in> D1; y \\<in> D1;\n        z \\<in> D1\\<rbrakk>\n       \\<Longrightarrow> cmp1 x z = EQUAL\n 2. \\<And>x y z.\n       \\<lbrakk>cmp2 x y = EQUAL; cmp2 y z = EQUAL; linorder_on D1 cmp1;\n        linorder_on D2 cmp2; D = D1 \\<union> D2; x \\<notin> D1; x \\<in> D2;\n        y \\<notin> D1; y \\<in> D2; z \\<notin> D1; z \\<in> D2\\<rbrakk>\n       \\<Longrightarrow> cmp2 x z = EQUAL", "apply (erule (5) linorder_on.trans)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x y z.\n       \\<lbrakk>cmp2 x y = EQUAL; cmp2 y z = EQUAL; linorder_on D1 cmp1;\n        linorder_on D2 cmp2; D = D1 \\<union> D2; x \\<notin> D1; x \\<in> D2;\n        y \\<notin> D1; y \\<in> D2; z \\<notin> D1; z \\<in> D2\\<rbrakk>\n       \\<Longrightarrow> cmp2 x z = EQUAL", "apply (erule (5) linorder_on.trans)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "subsection \\<open>Universal Linear Ordering\\<close>"], ["", "text \\<open>With Zorn's Lemma, we get a universal linear (even wf) ordering\\<close>"], ["", "definition \"univ_order_rel \\<equiv> (SOME r. well_order_on UNIV r)\""], ["", "definition \"univ_cmp x y \\<equiv> \n  if x=y then EQUAL \n  else if (x,y)\\<in>univ_order_rel then LESS\n  else GREATER\""], ["", "lemma univ_wo: \"well_order_on UNIV univ_order_rel\""], ["proof (prove)\ngoal (1 subgoal):\n 1. well_order univ_order_rel", "unfolding univ_order_rel_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. well_order (SOME r. well_order r)", "using well_order_on[of UNIV]"], ["proof (prove)\nusing this:\n  \\<exists>r. well_order r\n\ngoal (1 subgoal):\n 1. well_order (SOME r. well_order r)", ".."], ["", "lemma univ_linorder[intro?]: \"linorder univ_cmp\""], ["proof (prove)\ngoal (1 subgoal):\n 1. linorder univ_cmp", "apply unfold_locales"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<in> UNIV; y \\<in> UNIV\\<rbrakk>\n       \\<Longrightarrow> (univ_cmp x y = LESS) = (univ_cmp y x = GREATER)\n 2. \\<And>x. x \\<in> UNIV \\<Longrightarrow> univ_cmp x x = EQUAL\n 3. \\<And>x y z.\n       \\<lbrakk>x \\<in> UNIV; y \\<in> UNIV; z \\<in> UNIV;\n        univ_cmp x y = LESS; univ_cmp y z = LESS\\<rbrakk>\n       \\<Longrightarrow> univ_cmp x z = LESS\n 4. \\<And>x y z.\n       \\<lbrakk>x \\<in> UNIV; y \\<in> UNIV; z \\<in> UNIV;\n        univ_cmp x y = LESS; univ_cmp y z = EQUAL\\<rbrakk>\n       \\<Longrightarrow> univ_cmp x z = LESS\n 5. \\<And>x y z.\n       \\<lbrakk>x \\<in> UNIV; y \\<in> UNIV; z \\<in> UNIV;\n        univ_cmp x y = EQUAL; univ_cmp y z = LESS\\<rbrakk>\n       \\<Longrightarrow> univ_cmp x z = LESS\n 6. \\<And>x y z.\n       \\<lbrakk>x \\<in> UNIV; y \\<in> UNIV; z \\<in> UNIV;\n        univ_cmp x y = EQUAL; univ_cmp y z = EQUAL\\<rbrakk>\n       \\<Longrightarrow> univ_cmp x z = EQUAL", "unfolding univ_cmp_def"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<in> UNIV; y \\<in> UNIV\\<rbrakk>\n       \\<Longrightarrow> ((if x = y then EQUAL\n                           else if (x, y) \\<in> univ_order_rel then LESS\n                                else GREATER) =\n                          LESS) =\n                         ((if y = x then EQUAL\n                           else if (y, x) \\<in> univ_order_rel then LESS\n                                else GREATER) =\n                          GREATER)\n 2. \\<And>x.\n       x \\<in> UNIV \\<Longrightarrow>\n       (if x = x then EQUAL\n        else if (x, x) \\<in> univ_order_rel then LESS else GREATER) =\n       EQUAL\n 3. \\<And>x y z.\n       \\<lbrakk>x \\<in> UNIV; y \\<in> UNIV; z \\<in> UNIV;\n        (if x = y then EQUAL\n         else if (x, y) \\<in> univ_order_rel then LESS else GREATER) =\n        LESS;\n        (if y = z then EQUAL\n         else if (y, z) \\<in> univ_order_rel then LESS else GREATER) =\n        LESS\\<rbrakk>\n       \\<Longrightarrow> (if x = z then EQUAL\n                          else if (x, z) \\<in> univ_order_rel then LESS\n                               else GREATER) =\n                         LESS\n 4. \\<And>x y z.\n       \\<lbrakk>x \\<in> UNIV; y \\<in> UNIV; z \\<in> UNIV;\n        (if x = y then EQUAL\n         else if (x, y) \\<in> univ_order_rel then LESS else GREATER) =\n        LESS;\n        (if y = z then EQUAL\n         else if (y, z) \\<in> univ_order_rel then LESS else GREATER) =\n        EQUAL\\<rbrakk>\n       \\<Longrightarrow> (if x = z then EQUAL\n                          else if (x, z) \\<in> univ_order_rel then LESS\n                               else GREATER) =\n                         LESS\n 5. \\<And>x y z.\n       \\<lbrakk>x \\<in> UNIV; y \\<in> UNIV; z \\<in> UNIV;\n        (if x = y then EQUAL\n         else if (x, y) \\<in> univ_order_rel then LESS else GREATER) =\n        EQUAL;\n        (if y = z then EQUAL\n         else if (y, z) \\<in> univ_order_rel then LESS else GREATER) =\n        LESS\\<rbrakk>\n       \\<Longrightarrow> (if x = z then EQUAL\n                          else if (x, z) \\<in> univ_order_rel then LESS\n                               else GREATER) =\n                         LESS\n 6. \\<And>x y z.\n       \\<lbrakk>x \\<in> UNIV; y \\<in> UNIV; z \\<in> UNIV;\n        (if x = y then EQUAL\n         else if (x, y) \\<in> univ_order_rel then LESS else GREATER) =\n        EQUAL;\n        (if y = z then EQUAL\n         else if (y, z) \\<in> univ_order_rel then LESS else GREATER) =\n        EQUAL\\<rbrakk>\n       \\<Longrightarrow> (if x = z then EQUAL\n                          else if (x, z) \\<in> univ_order_rel then LESS\n                               else GREATER) =\n                         EQUAL", "apply (auto split: if_split_asm)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>x y.\n       \\<lbrakk>(x, y) \\<in> univ_order_rel;\n        (y, x) \\<in> univ_order_rel\\<rbrakk>\n       \\<Longrightarrow> y = x\n 2. \\<And>x y.\n       \\<lbrakk>(x, y) \\<notin> univ_order_rel;\n        (y, x) \\<notin> univ_order_rel\\<rbrakk>\n       \\<Longrightarrow> y = x\n 3. \\<And>x y z.\n       \\<lbrakk>x \\<noteq> y; (x, y) \\<in> univ_order_rel; y \\<noteq> z;\n        (y, z) \\<in> univ_order_rel\\<rbrakk>\n       \\<Longrightarrow> (x, z) \\<in> univ_order_rel\n 4. \\<And>y z.\n       \\<lbrakk>(z, y) \\<in> univ_order_rel; y \\<noteq> z;\n        (y, z) \\<in> univ_order_rel\\<rbrakk>\n       \\<Longrightarrow> False", "using univ_wo"], ["proof (prove)\nusing this:\n  well_order univ_order_rel\n\ngoal (4 subgoals):\n 1. \\<And>x y.\n       \\<lbrakk>(x, y) \\<in> univ_order_rel;\n        (y, x) \\<in> univ_order_rel\\<rbrakk>\n       \\<Longrightarrow> y = x\n 2. \\<And>x y.\n       \\<lbrakk>(x, y) \\<notin> univ_order_rel;\n        (y, x) \\<notin> univ_order_rel\\<rbrakk>\n       \\<Longrightarrow> y = x\n 3. \\<And>x y z.\n       \\<lbrakk>x \\<noteq> y; (x, y) \\<in> univ_order_rel; y \\<noteq> z;\n        (y, z) \\<in> univ_order_rel\\<rbrakk>\n       \\<Longrightarrow> (x, z) \\<in> univ_order_rel\n 4. \\<And>y z.\n       \\<lbrakk>(z, y) \\<in> univ_order_rel; y \\<noteq> z;\n        (y, z) \\<in> univ_order_rel\\<rbrakk>\n       \\<Longrightarrow> False", "apply -"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>x y.\n       \\<lbrakk>(x, y) \\<in> univ_order_rel; (y, x) \\<in> univ_order_rel;\n        well_order univ_order_rel\\<rbrakk>\n       \\<Longrightarrow> y = x\n 2. \\<And>x y.\n       \\<lbrakk>(x, y) \\<notin> univ_order_rel;\n        (y, x) \\<notin> univ_order_rel; well_order univ_order_rel\\<rbrakk>\n       \\<Longrightarrow> y = x\n 3. \\<And>x y z.\n       \\<lbrakk>x \\<noteq> y; (x, y) \\<in> univ_order_rel; y \\<noteq> z;\n        (y, z) \\<in> univ_order_rel; well_order univ_order_rel\\<rbrakk>\n       \\<Longrightarrow> (x, z) \\<in> univ_order_rel\n 4. \\<And>y z.\n       \\<lbrakk>(z, y) \\<in> univ_order_rel; y \\<noteq> z;\n        (y, z) \\<in> univ_order_rel; well_order univ_order_rel\\<rbrakk>\n       \\<Longrightarrow> False", "unfolding well_order_on_def linear_order_on_def partial_order_on_def\n    preorder_on_def"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>x y.\n       \\<lbrakk>(x, y) \\<in> univ_order_rel; (y, x) \\<in> univ_order_rel;\n        (((refl univ_order_rel \\<and> trans univ_order_rel) \\<and>\n          antisym univ_order_rel) \\<and>\n         total univ_order_rel) \\<and>\n        wf (univ_order_rel - Id)\\<rbrakk>\n       \\<Longrightarrow> y = x\n 2. \\<And>x y.\n       \\<lbrakk>(x, y) \\<notin> univ_order_rel;\n        (y, x) \\<notin> univ_order_rel;\n        (((refl univ_order_rel \\<and> trans univ_order_rel) \\<and>\n          antisym univ_order_rel) \\<and>\n         total univ_order_rel) \\<and>\n        wf (univ_order_rel - Id)\\<rbrakk>\n       \\<Longrightarrow> y = x\n 3. \\<And>x y z.\n       \\<lbrakk>x \\<noteq> y; (x, y) \\<in> univ_order_rel; y \\<noteq> z;\n        (y, z) \\<in> univ_order_rel;\n        (((refl univ_order_rel \\<and> trans univ_order_rel) \\<and>\n          antisym univ_order_rel) \\<and>\n         total univ_order_rel) \\<and>\n        wf (univ_order_rel - Id)\\<rbrakk>\n       \\<Longrightarrow> (x, z) \\<in> univ_order_rel\n 4. \\<And>y z.\n       \\<lbrakk>(z, y) \\<in> univ_order_rel; y \\<noteq> z;\n        (y, z) \\<in> univ_order_rel;\n        (((refl univ_order_rel \\<and> trans univ_order_rel) \\<and>\n          antisym univ_order_rel) \\<and>\n         total univ_order_rel) \\<and>\n        wf (univ_order_rel - Id)\\<rbrakk>\n       \\<Longrightarrow> False", "apply (auto simp add: antisym_def) []"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>x y.\n       \\<lbrakk>(x, y) \\<notin> univ_order_rel;\n        (y, x) \\<notin> univ_order_rel;\n        (((refl univ_order_rel \\<and> trans univ_order_rel) \\<and>\n          antisym univ_order_rel) \\<and>\n         total univ_order_rel) \\<and>\n        wf (univ_order_rel - Id)\\<rbrakk>\n       \\<Longrightarrow> y = x\n 2. \\<And>x y z.\n       \\<lbrakk>x \\<noteq> y; (x, y) \\<in> univ_order_rel; y \\<noteq> z;\n        (y, z) \\<in> univ_order_rel;\n        (((refl univ_order_rel \\<and> trans univ_order_rel) \\<and>\n          antisym univ_order_rel) \\<and>\n         total univ_order_rel) \\<and>\n        wf (univ_order_rel - Id)\\<rbrakk>\n       \\<Longrightarrow> (x, z) \\<in> univ_order_rel\n 3. \\<And>y z.\n       \\<lbrakk>(z, y) \\<in> univ_order_rel; y \\<noteq> z;\n        (y, z) \\<in> univ_order_rel;\n        (((refl univ_order_rel \\<and> trans univ_order_rel) \\<and>\n          antisym univ_order_rel) \\<and>\n         total univ_order_rel) \\<and>\n        wf (univ_order_rel - Id)\\<rbrakk>\n       \\<Longrightarrow> False", "apply (unfold total_on_def, fast) []"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x y z.\n       \\<lbrakk>x \\<noteq> y; (x, y) \\<in> univ_order_rel; y \\<noteq> z;\n        (y, z) \\<in> univ_order_rel;\n        (((refl univ_order_rel \\<and> trans univ_order_rel) \\<and>\n          antisym univ_order_rel) \\<and>\n         total univ_order_rel) \\<and>\n        wf (univ_order_rel - Id)\\<rbrakk>\n       \\<Longrightarrow> (x, z) \\<in> univ_order_rel\n 2. \\<And>y z.\n       \\<lbrakk>(z, y) \\<in> univ_order_rel; y \\<noteq> z;\n        (y, z) \\<in> univ_order_rel;\n        (((refl univ_order_rel \\<and> trans univ_order_rel) \\<and>\n          antisym univ_order_rel) \\<and>\n         total univ_order_rel) \\<and>\n        wf (univ_order_rel - Id)\\<rbrakk>\n       \\<Longrightarrow> False", "apply (unfold trans_def, fast) []"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>y z.\n       \\<lbrakk>(z, y) \\<in> univ_order_rel; y \\<noteq> z;\n        (y, z) \\<in> univ_order_rel;\n        (((refl univ_order_rel \\<and> trans univ_order_rel) \\<and>\n          antisym univ_order_rel) \\<and>\n         total univ_order_rel) \\<and>\n        wf (univ_order_rel - Id)\\<rbrakk>\n       \\<Longrightarrow> False", "apply (auto simp add: antisym_def) []"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "text \\<open>Extend any linear order to a universal order\\<close>"], ["", "definition \"cmp_extend D cmp \\<equiv> \n  cmp_combine D cmp UNIV univ_cmp\""], ["", "lemma extend_linorder[intro?]: \n  \"linorder_on D cmp \\<Longrightarrow> linorder (cmp_extend D cmp)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. linorder_on D cmp \\<Longrightarrow> linorder (cmp_extend D cmp)", "unfolding cmp_extend_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. linorder_on D cmp \\<Longrightarrow>\n    linorder (cmp_combine D cmp UNIV univ_cmp)", "apply rule"], ["proof (prove)\ngoal (3 subgoals):\n 1. linorder_on D cmp \\<Longrightarrow> linorder_on D cmp\n 2. linorder_on D cmp \\<Longrightarrow> linorder univ_cmp\n 3. linorder_on D cmp \\<Longrightarrow> UNIV = D \\<union> UNIV", "apply assumption"], ["proof (prove)\ngoal (2 subgoals):\n 1. linorder_on D cmp \\<Longrightarrow> linorder univ_cmp\n 2. linorder_on D cmp \\<Longrightarrow> UNIV = D \\<union> UNIV", "apply rule"], ["proof (prove)\ngoal (1 subgoal):\n 1. linorder_on D cmp \\<Longrightarrow> UNIV = D \\<union> UNIV", "by simp"], ["", "subsubsection \\<open>Lexicographic Order on Lists\\<close>"], ["", "fun cmp_lex where\n  \"cmp_lex cmp [] [] = EQUAL\"\n| \"cmp_lex cmp [] _ = LESS\"\n| \"cmp_lex cmp _ [] = GREATER\"\n| \"cmp_lex cmp (a#l) (b#m) = (\n    case cmp a b of\n      LESS \\<Rightarrow> LESS\n    | EQUAL \\<Rightarrow> cmp_lex cmp l m\n    | GREATER \\<Rightarrow> GREATER)\""], ["", "primrec cmp_lex' where\n  \"cmp_lex' cmp [] m = (case m of [] \\<Rightarrow> EQUAL | _ \\<Rightarrow> LESS)\"\n| \"cmp_lex' cmp (a#l) m = (case m of [] \\<Rightarrow> GREATER | (b#m) \\<Rightarrow> \n    (case cmp a b of\n      LESS \\<Rightarrow> LESS\n    | EQUAL \\<Rightarrow> cmp_lex' cmp l m\n    | GREATER \\<Rightarrow> GREATER\n  ))\""], ["", "lemma cmp_lex_alt: \"cmp_lex cmp l m = cmp_lex' cmp l m\""], ["proof (prove)\ngoal (1 subgoal):\n 1. cmp_lex cmp l m = cmp_lex' cmp l m", "apply (induct l arbitrary: m)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>m. cmp_lex cmp [] m = cmp_lex' cmp [] m\n 2. \\<And>a l m.\n       (\\<And>m. cmp_lex cmp l m = cmp_lex' cmp l m) \\<Longrightarrow>\n       cmp_lex cmp (a # l) m = cmp_lex' cmp (a # l) m", "apply (auto split: comp_res.split list.split)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in linorder_on) lex_linorder[intro?]:\n  \"linorder_on (lists D) (cmp_lex cmp)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. linorder_on (lists D) (cmp_lex cmp)", "proof"], ["proof (state)\ngoal (6 subgoals):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<in> lists D; y \\<in> lists D\\<rbrakk>\n       \\<Longrightarrow> (cmp_lex cmp x y = LESS) =\n                         (cmp_lex cmp y x = GREATER)\n 2. \\<And>x. x \\<in> lists D \\<Longrightarrow> cmp_lex cmp x x = EQUAL\n 3. \\<And>x y z.\n       \\<lbrakk>x \\<in> lists D; y \\<in> lists D; z \\<in> lists D;\n        cmp_lex cmp x y = LESS; cmp_lex cmp y z = LESS\\<rbrakk>\n       \\<Longrightarrow> cmp_lex cmp x z = LESS\n 4. \\<And>x y z.\n       \\<lbrakk>x \\<in> lists D; y \\<in> lists D; z \\<in> lists D;\n        cmp_lex cmp x y = LESS; cmp_lex cmp y z = EQUAL\\<rbrakk>\n       \\<Longrightarrow> cmp_lex cmp x z = LESS\n 5. \\<And>x y z.\n       \\<lbrakk>x \\<in> lists D; y \\<in> lists D; z \\<in> lists D;\n        cmp_lex cmp x y = EQUAL; cmp_lex cmp y z = LESS\\<rbrakk>\n       \\<Longrightarrow> cmp_lex cmp x z = LESS\n 6. \\<And>x y z.\n       \\<lbrakk>x \\<in> lists D; y \\<in> lists D; z \\<in> lists D;\n        cmp_lex cmp x y = EQUAL; cmp_lex cmp y z = EQUAL\\<rbrakk>\n       \\<Longrightarrow> cmp_lex cmp x z = EQUAL", "fix l m"], ["proof (state)\ngoal (6 subgoals):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<in> lists D; y \\<in> lists D\\<rbrakk>\n       \\<Longrightarrow> (cmp_lex cmp x y = LESS) =\n                         (cmp_lex cmp y x = GREATER)\n 2. \\<And>x. x \\<in> lists D \\<Longrightarrow> cmp_lex cmp x x = EQUAL\n 3. \\<And>x y z.\n       \\<lbrakk>x \\<in> lists D; y \\<in> lists D; z \\<in> lists D;\n        cmp_lex cmp x y = LESS; cmp_lex cmp y z = LESS\\<rbrakk>\n       \\<Longrightarrow> cmp_lex cmp x z = LESS\n 4. \\<And>x y z.\n       \\<lbrakk>x \\<in> lists D; y \\<in> lists D; z \\<in> lists D;\n        cmp_lex cmp x y = LESS; cmp_lex cmp y z = EQUAL\\<rbrakk>\n       \\<Longrightarrow> cmp_lex cmp x z = LESS\n 5. \\<And>x y z.\n       \\<lbrakk>x \\<in> lists D; y \\<in> lists D; z \\<in> lists D;\n        cmp_lex cmp x y = EQUAL; cmp_lex cmp y z = LESS\\<rbrakk>\n       \\<Longrightarrow> cmp_lex cmp x z = LESS\n 6. \\<And>x y z.\n       \\<lbrakk>x \\<in> lists D; y \\<in> lists D; z \\<in> lists D;\n        cmp_lex cmp x y = EQUAL; cmp_lex cmp y z = EQUAL\\<rbrakk>\n       \\<Longrightarrow> cmp_lex cmp x z = EQUAL", "assume \"l\\<in>lists D\" \"m\\<in>lists D\""], ["proof (state)\nthis:\n  l \\<in> lists D\n  m \\<in> lists D\n\ngoal (6 subgoals):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<in> lists D; y \\<in> lists D\\<rbrakk>\n       \\<Longrightarrow> (cmp_lex cmp x y = LESS) =\n                         (cmp_lex cmp y x = GREATER)\n 2. \\<And>x. x \\<in> lists D \\<Longrightarrow> cmp_lex cmp x x = EQUAL\n 3. \\<And>x y z.\n       \\<lbrakk>x \\<in> lists D; y \\<in> lists D; z \\<in> lists D;\n        cmp_lex cmp x y = LESS; cmp_lex cmp y z = LESS\\<rbrakk>\n       \\<Longrightarrow> cmp_lex cmp x z = LESS\n 4. \\<And>x y z.\n       \\<lbrakk>x \\<in> lists D; y \\<in> lists D; z \\<in> lists D;\n        cmp_lex cmp x y = LESS; cmp_lex cmp y z = EQUAL\\<rbrakk>\n       \\<Longrightarrow> cmp_lex cmp x z = LESS\n 5. \\<And>x y z.\n       \\<lbrakk>x \\<in> lists D; y \\<in> lists D; z \\<in> lists D;\n        cmp_lex cmp x y = EQUAL; cmp_lex cmp y z = LESS\\<rbrakk>\n       \\<Longrightarrow> cmp_lex cmp x z = LESS\n 6. \\<And>x y z.\n       \\<lbrakk>x \\<in> lists D; y \\<in> lists D; z \\<in> lists D;\n        cmp_lex cmp x y = EQUAL; cmp_lex cmp y z = EQUAL\\<rbrakk>\n       \\<Longrightarrow> cmp_lex cmp x z = EQUAL", "thus \"(cmp_lex cmp l m = LESS) = (cmp_lex cmp m l = GREATER)\""], ["proof (prove)\nusing this:\n  l \\<in> lists D\n  m \\<in> lists D\n\ngoal (1 subgoal):\n 1. (cmp_lex cmp l m = LESS) = (cmp_lex cmp m l = GREATER)", "apply (induct cmp\\<equiv>cmp l m rule: cmp_lex.induct)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<lbrakk>[] \\<in> lists D; [] \\<in> lists D\\<rbrakk>\n    \\<Longrightarrow> (cmp_lex cmp [] [] = LESS) =\n                      (cmp_lex cmp [] [] = GREATER)\n 2. \\<And>v va.\n       \\<lbrakk>[] \\<in> lists D; v # va \\<in> lists D\\<rbrakk>\n       \\<Longrightarrow> (cmp_lex cmp [] (v # va) = LESS) =\n                         (cmp_lex cmp (v # va) [] = GREATER)\n 3. \\<And>v va.\n       \\<lbrakk>v # va \\<in> lists D; [] \\<in> lists D\\<rbrakk>\n       \\<Longrightarrow> (cmp_lex cmp (v # va) [] = LESS) =\n                         (cmp_lex cmp [] (v # va) = GREATER)\n 4. \\<And>a l b m.\n       \\<lbrakk>\\<lbrakk>cmp a b = EQUAL; l \\<in> lists D;\n                 m \\<in> lists D\\<rbrakk>\n                \\<Longrightarrow> (cmp_lex cmp l m = LESS) =\n                                  (cmp_lex cmp m l = GREATER);\n        a # l \\<in> lists D; b # m \\<in> lists D\\<rbrakk>\n       \\<Longrightarrow> (cmp_lex cmp (a # l) (b # m) = LESS) =\n                         (cmp_lex cmp (b # m) (a # l) = GREATER)", "apply (auto split: comp_res.split simp: lt_eq)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>a l b m.\n       \\<lbrakk>a \\<in> D; \\<forall>x\\<in>set l. x \\<in> D; b \\<in> D;\n        \\<forall>x\\<in>set m. x \\<in> D; cmp a b = EQUAL; cmp b a = GREATER;\n        cmp_lex cmp l m \\<noteq> LESS;\n        cmp_lex cmp m l \\<noteq> GREATER\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>a l b m.\n       \\<lbrakk>a \\<in> D; \\<forall>x\\<in>set l. x \\<in> D; b \\<in> D;\n        \\<forall>x\\<in>set m. x \\<in> D; cmp a b = GREATER; cmp b a = EQUAL;\n        cmp_lex cmp m l = GREATER\\<rbrakk>\n       \\<Longrightarrow> False\n 3. \\<And>a l b m.\n       \\<lbrakk>a \\<in> D; \\<forall>x\\<in>set l. x \\<in> D; b \\<in> D;\n        \\<forall>x\\<in>set m. x \\<in> D; cmp a b = GREATER;\n        cmp b a = GREATER\\<rbrakk>\n       \\<Longrightarrow> False", "apply (auto simp: lt_eq[symmetric])"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  (cmp_lex cmp l m = LESS) = (cmp_lex cmp m l = GREATER)\n\ngoal (5 subgoals):\n 1. \\<And>x. x \\<in> lists D \\<Longrightarrow> cmp_lex cmp x x = EQUAL\n 2. \\<And>x y z.\n       \\<lbrakk>x \\<in> lists D; y \\<in> lists D; z \\<in> lists D;\n        cmp_lex cmp x y = LESS; cmp_lex cmp y z = LESS\\<rbrakk>\n       \\<Longrightarrow> cmp_lex cmp x z = LESS\n 3. \\<And>x y z.\n       \\<lbrakk>x \\<in> lists D; y \\<in> lists D; z \\<in> lists D;\n        cmp_lex cmp x y = LESS; cmp_lex cmp y z = EQUAL\\<rbrakk>\n       \\<Longrightarrow> cmp_lex cmp x z = LESS\n 4. \\<And>x y z.\n       \\<lbrakk>x \\<in> lists D; y \\<in> lists D; z \\<in> lists D;\n        cmp_lex cmp x y = EQUAL; cmp_lex cmp y z = LESS\\<rbrakk>\n       \\<Longrightarrow> cmp_lex cmp x z = LESS\n 5. \\<And>x y z.\n       \\<lbrakk>x \\<in> lists D; y \\<in> lists D; z \\<in> lists D;\n        cmp_lex cmp x y = EQUAL; cmp_lex cmp y z = EQUAL\\<rbrakk>\n       \\<Longrightarrow> cmp_lex cmp x z = EQUAL", "next"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>x. x \\<in> lists D \\<Longrightarrow> cmp_lex cmp x x = EQUAL\n 2. \\<And>x y z.\n       \\<lbrakk>x \\<in> lists D; y \\<in> lists D; z \\<in> lists D;\n        cmp_lex cmp x y = LESS; cmp_lex cmp y z = LESS\\<rbrakk>\n       \\<Longrightarrow> cmp_lex cmp x z = LESS\n 3. \\<And>x y z.\n       \\<lbrakk>x \\<in> lists D; y \\<in> lists D; z \\<in> lists D;\n        cmp_lex cmp x y = LESS; cmp_lex cmp y z = EQUAL\\<rbrakk>\n       \\<Longrightarrow> cmp_lex cmp x z = LESS\n 4. \\<And>x y z.\n       \\<lbrakk>x \\<in> lists D; y \\<in> lists D; z \\<in> lists D;\n        cmp_lex cmp x y = EQUAL; cmp_lex cmp y z = LESS\\<rbrakk>\n       \\<Longrightarrow> cmp_lex cmp x z = LESS\n 5. \\<And>x y z.\n       \\<lbrakk>x \\<in> lists D; y \\<in> lists D; z \\<in> lists D;\n        cmp_lex cmp x y = EQUAL; cmp_lex cmp y z = EQUAL\\<rbrakk>\n       \\<Longrightarrow> cmp_lex cmp x z = EQUAL", "fix x"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>x. x \\<in> lists D \\<Longrightarrow> cmp_lex cmp x x = EQUAL\n 2. \\<And>x y z.\n       \\<lbrakk>x \\<in> lists D; y \\<in> lists D; z \\<in> lists D;\n        cmp_lex cmp x y = LESS; cmp_lex cmp y z = LESS\\<rbrakk>\n       \\<Longrightarrow> cmp_lex cmp x z = LESS\n 3. \\<And>x y z.\n       \\<lbrakk>x \\<in> lists D; y \\<in> lists D; z \\<in> lists D;\n        cmp_lex cmp x y = LESS; cmp_lex cmp y z = EQUAL\\<rbrakk>\n       \\<Longrightarrow> cmp_lex cmp x z = LESS\n 4. \\<And>x y z.\n       \\<lbrakk>x \\<in> lists D; y \\<in> lists D; z \\<in> lists D;\n        cmp_lex cmp x y = EQUAL; cmp_lex cmp y z = LESS\\<rbrakk>\n       \\<Longrightarrow> cmp_lex cmp x z = LESS\n 5. \\<And>x y z.\n       \\<lbrakk>x \\<in> lists D; y \\<in> lists D; z \\<in> lists D;\n        cmp_lex cmp x y = EQUAL; cmp_lex cmp y z = EQUAL\\<rbrakk>\n       \\<Longrightarrow> cmp_lex cmp x z = EQUAL", "assume \"x\\<in>lists D\""], ["proof (state)\nthis:\n  x \\<in> lists D\n\ngoal (5 subgoals):\n 1. \\<And>x. x \\<in> lists D \\<Longrightarrow> cmp_lex cmp x x = EQUAL\n 2. \\<And>x y z.\n       \\<lbrakk>x \\<in> lists D; y \\<in> lists D; z \\<in> lists D;\n        cmp_lex cmp x y = LESS; cmp_lex cmp y z = LESS\\<rbrakk>\n       \\<Longrightarrow> cmp_lex cmp x z = LESS\n 3. \\<And>x y z.\n       \\<lbrakk>x \\<in> lists D; y \\<in> lists D; z \\<in> lists D;\n        cmp_lex cmp x y = LESS; cmp_lex cmp y z = EQUAL\\<rbrakk>\n       \\<Longrightarrow> cmp_lex cmp x z = LESS\n 4. \\<And>x y z.\n       \\<lbrakk>x \\<in> lists D; y \\<in> lists D; z \\<in> lists D;\n        cmp_lex cmp x y = EQUAL; cmp_lex cmp y z = LESS\\<rbrakk>\n       \\<Longrightarrow> cmp_lex cmp x z = LESS\n 5. \\<And>x y z.\n       \\<lbrakk>x \\<in> lists D; y \\<in> lists D; z \\<in> lists D;\n        cmp_lex cmp x y = EQUAL; cmp_lex cmp y z = EQUAL\\<rbrakk>\n       \\<Longrightarrow> cmp_lex cmp x z = EQUAL", "thus \"cmp_lex cmp x x = EQUAL\""], ["proof (prove)\nusing this:\n  x \\<in> lists D\n\ngoal (1 subgoal):\n 1. cmp_lex cmp x x = EQUAL", "by (induct x) auto"], ["proof (state)\nthis:\n  cmp_lex cmp x x = EQUAL\n\ngoal (4 subgoals):\n 1. \\<And>x y z.\n       \\<lbrakk>x \\<in> lists D; y \\<in> lists D; z \\<in> lists D;\n        cmp_lex cmp x y = LESS; cmp_lex cmp y z = LESS\\<rbrakk>\n       \\<Longrightarrow> cmp_lex cmp x z = LESS\n 2. \\<And>x y z.\n       \\<lbrakk>x \\<in> lists D; y \\<in> lists D; z \\<in> lists D;\n        cmp_lex cmp x y = LESS; cmp_lex cmp y z = EQUAL\\<rbrakk>\n       \\<Longrightarrow> cmp_lex cmp x z = LESS\n 3. \\<And>x y z.\n       \\<lbrakk>x \\<in> lists D; y \\<in> lists D; z \\<in> lists D;\n        cmp_lex cmp x y = EQUAL; cmp_lex cmp y z = LESS\\<rbrakk>\n       \\<Longrightarrow> cmp_lex cmp x z = LESS\n 4. \\<And>x y z.\n       \\<lbrakk>x \\<in> lists D; y \\<in> lists D; z \\<in> lists D;\n        cmp_lex cmp x y = EQUAL; cmp_lex cmp y z = EQUAL\\<rbrakk>\n       \\<Longrightarrow> cmp_lex cmp x z = EQUAL", "next"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>x y z.\n       \\<lbrakk>x \\<in> lists D; y \\<in> lists D; z \\<in> lists D;\n        cmp_lex cmp x y = LESS; cmp_lex cmp y z = LESS\\<rbrakk>\n       \\<Longrightarrow> cmp_lex cmp x z = LESS\n 2. \\<And>x y z.\n       \\<lbrakk>x \\<in> lists D; y \\<in> lists D; z \\<in> lists D;\n        cmp_lex cmp x y = LESS; cmp_lex cmp y z = EQUAL\\<rbrakk>\n       \\<Longrightarrow> cmp_lex cmp x z = LESS\n 3. \\<And>x y z.\n       \\<lbrakk>x \\<in> lists D; y \\<in> lists D; z \\<in> lists D;\n        cmp_lex cmp x y = EQUAL; cmp_lex cmp y z = LESS\\<rbrakk>\n       \\<Longrightarrow> cmp_lex cmp x z = LESS\n 4. \\<And>x y z.\n       \\<lbrakk>x \\<in> lists D; y \\<in> lists D; z \\<in> lists D;\n        cmp_lex cmp x y = EQUAL; cmp_lex cmp y z = EQUAL\\<rbrakk>\n       \\<Longrightarrow> cmp_lex cmp x z = EQUAL", "fix x y z"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>x y z.\n       \\<lbrakk>x \\<in> lists D; y \\<in> lists D; z \\<in> lists D;\n        cmp_lex cmp x y = LESS; cmp_lex cmp y z = LESS\\<rbrakk>\n       \\<Longrightarrow> cmp_lex cmp x z = LESS\n 2. \\<And>x y z.\n       \\<lbrakk>x \\<in> lists D; y \\<in> lists D; z \\<in> lists D;\n        cmp_lex cmp x y = LESS; cmp_lex cmp y z = EQUAL\\<rbrakk>\n       \\<Longrightarrow> cmp_lex cmp x z = LESS\n 3. \\<And>x y z.\n       \\<lbrakk>x \\<in> lists D; y \\<in> lists D; z \\<in> lists D;\n        cmp_lex cmp x y = EQUAL; cmp_lex cmp y z = LESS\\<rbrakk>\n       \\<Longrightarrow> cmp_lex cmp x z = LESS\n 4. \\<And>x y z.\n       \\<lbrakk>x \\<in> lists D; y \\<in> lists D; z \\<in> lists D;\n        cmp_lex cmp x y = EQUAL; cmp_lex cmp y z = EQUAL\\<rbrakk>\n       \\<Longrightarrow> cmp_lex cmp x z = EQUAL", "assume M: \"x\\<in>lists D\" \"y\\<in>lists D\" \"z\\<in>lists D\""], ["proof (state)\nthis:\n  x \\<in> lists D\n  y \\<in> lists D\n  z \\<in> lists D\n\ngoal (4 subgoals):\n 1. \\<And>x y z.\n       \\<lbrakk>x \\<in> lists D; y \\<in> lists D; z \\<in> lists D;\n        cmp_lex cmp x y = LESS; cmp_lex cmp y z = LESS\\<rbrakk>\n       \\<Longrightarrow> cmp_lex cmp x z = LESS\n 2. \\<And>x y z.\n       \\<lbrakk>x \\<in> lists D; y \\<in> lists D; z \\<in> lists D;\n        cmp_lex cmp x y = LESS; cmp_lex cmp y z = EQUAL\\<rbrakk>\n       \\<Longrightarrow> cmp_lex cmp x z = LESS\n 3. \\<And>x y z.\n       \\<lbrakk>x \\<in> lists D; y \\<in> lists D; z \\<in> lists D;\n        cmp_lex cmp x y = EQUAL; cmp_lex cmp y z = LESS\\<rbrakk>\n       \\<Longrightarrow> cmp_lex cmp x z = LESS\n 4. \\<And>x y z.\n       \\<lbrakk>x \\<in> lists D; y \\<in> lists D; z \\<in> lists D;\n        cmp_lex cmp x y = EQUAL; cmp_lex cmp y z = EQUAL\\<rbrakk>\n       \\<Longrightarrow> cmp_lex cmp x z = EQUAL", "{"], ["proof (state)\nthis:\n  x \\<in> lists D\n  y \\<in> lists D\n  z \\<in> lists D\n\ngoal (4 subgoals):\n 1. \\<And>x y z.\n       \\<lbrakk>x \\<in> lists D; y \\<in> lists D; z \\<in> lists D;\n        cmp_lex cmp x y = LESS; cmp_lex cmp y z = LESS\\<rbrakk>\n       \\<Longrightarrow> cmp_lex cmp x z = LESS\n 2. \\<And>x y z.\n       \\<lbrakk>x \\<in> lists D; y \\<in> lists D; z \\<in> lists D;\n        cmp_lex cmp x y = LESS; cmp_lex cmp y z = EQUAL\\<rbrakk>\n       \\<Longrightarrow> cmp_lex cmp x z = LESS\n 3. \\<And>x y z.\n       \\<lbrakk>x \\<in> lists D; y \\<in> lists D; z \\<in> lists D;\n        cmp_lex cmp x y = EQUAL; cmp_lex cmp y z = LESS\\<rbrakk>\n       \\<Longrightarrow> cmp_lex cmp x z = LESS\n 4. \\<And>x y z.\n       \\<lbrakk>x \\<in> lists D; y \\<in> lists D; z \\<in> lists D;\n        cmp_lex cmp x y = EQUAL; cmp_lex cmp y z = EQUAL\\<rbrakk>\n       \\<Longrightarrow> cmp_lex cmp x z = EQUAL", "assume \"cmp_lex cmp x y = LESS\" \"cmp_lex cmp y z = LESS\""], ["proof (state)\nthis:\n  cmp_lex cmp x y = LESS\n  cmp_lex cmp y z = LESS\n\ngoal (4 subgoals):\n 1. \\<And>x y z.\n       \\<lbrakk>x \\<in> lists D; y \\<in> lists D; z \\<in> lists D;\n        cmp_lex cmp x y = LESS; cmp_lex cmp y z = LESS\\<rbrakk>\n       \\<Longrightarrow> cmp_lex cmp x z = LESS\n 2. \\<And>x y z.\n       \\<lbrakk>x \\<in> lists D; y \\<in> lists D; z \\<in> lists D;\n        cmp_lex cmp x y = LESS; cmp_lex cmp y z = EQUAL\\<rbrakk>\n       \\<Longrightarrow> cmp_lex cmp x z = LESS\n 3. \\<And>x y z.\n       \\<lbrakk>x \\<in> lists D; y \\<in> lists D; z \\<in> lists D;\n        cmp_lex cmp x y = EQUAL; cmp_lex cmp y z = LESS\\<rbrakk>\n       \\<Longrightarrow> cmp_lex cmp x z = LESS\n 4. \\<And>x y z.\n       \\<lbrakk>x \\<in> lists D; y \\<in> lists D; z \\<in> lists D;\n        cmp_lex cmp x y = EQUAL; cmp_lex cmp y z = EQUAL\\<rbrakk>\n       \\<Longrightarrow> cmp_lex cmp x z = EQUAL", "thus \"cmp_lex cmp x z = LESS\""], ["proof (prove)\nusing this:\n  cmp_lex cmp x y = LESS\n  cmp_lex cmp y z = LESS\n\ngoal (1 subgoal):\n 1. cmp_lex cmp x z = LESS", "using M"], ["proof (prove)\nusing this:\n  cmp_lex cmp x y = LESS\n  cmp_lex cmp y z = LESS\n  x \\<in> lists D\n  y \\<in> lists D\n  z \\<in> lists D\n\ngoal (1 subgoal):\n 1. cmp_lex cmp x z = LESS", "apply (induct cmp\\<equiv>cmp x y arbitrary: z rule: cmp_lex.induct)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>z.\n       \\<lbrakk>cmp_lex cmp [] [] = LESS; cmp_lex cmp [] z = LESS;\n        [] \\<in> lists D; [] \\<in> lists D; z \\<in> lists D\\<rbrakk>\n       \\<Longrightarrow> cmp_lex cmp [] z = LESS\n 2. \\<And>v va z.\n       \\<lbrakk>cmp_lex cmp [] (v # va) = LESS;\n        cmp_lex cmp (v # va) z = LESS; [] \\<in> lists D;\n        v # va \\<in> lists D; z \\<in> lists D\\<rbrakk>\n       \\<Longrightarrow> cmp_lex cmp [] z = LESS\n 3. \\<And>v va z.\n       \\<lbrakk>cmp_lex cmp (v # va) [] = LESS; cmp_lex cmp [] z = LESS;\n        v # va \\<in> lists D; [] \\<in> lists D; z \\<in> lists D\\<rbrakk>\n       \\<Longrightarrow> cmp_lex cmp (v # va) z = LESS\n 4. \\<And>a l b m z.\n       \\<lbrakk>\\<And>z.\n                   \\<lbrakk>cmp a b = EQUAL; cmp_lex cmp l m = LESS;\n                    cmp_lex cmp m z = LESS; l \\<in> lists D;\n                    m \\<in> lists D; z \\<in> lists D\\<rbrakk>\n                   \\<Longrightarrow> cmp_lex cmp l z = LESS;\n        cmp_lex cmp (a # l) (b # m) = LESS; cmp_lex cmp (b # m) z = LESS;\n        a # l \\<in> lists D; b # m \\<in> lists D; z \\<in> lists D\\<rbrakk>\n       \\<Longrightarrow> cmp_lex cmp (a # l) z = LESS", "apply (auto split: comp_res.split_asm comp_res.split)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>v va z.\n       \\<lbrakk>cmp_lex cmp (v # va) z = LESS;\n        \\<forall>x\\<in>set z. x \\<in> D; v \\<in> D;\n        \\<forall>x\\<in>set va. x \\<in> D\\<rbrakk>\n       \\<Longrightarrow> cmp_lex cmp [] z = LESS\n 2. \\<And>a l b m z.\n       \\<lbrakk>cmp_lex cmp (b # m) z = LESS; cmp a b = LESS; a \\<in> D;\n        b \\<in> D; \\<forall>x\\<in>set z. x \\<in> D;\n        \\<forall>x\\<in>set l. x \\<in> D;\n        \\<forall>x\\<in>set m. x \\<in> D\\<rbrakk>\n       \\<Longrightarrow> cmp_lex cmp (a # l) z = LESS\n 3. \\<And>a l b m z.\n       \\<lbrakk>cmp_lex cmp (b # m) z = LESS;\n        \\<And>z.\n           \\<lbrakk>cmp_lex cmp m z = LESS; z \\<in> lists D\\<rbrakk>\n           \\<Longrightarrow> cmp_lex cmp l z = LESS;\n        cmp a b = EQUAL; a \\<in> D; b \\<in> D; cmp_lex cmp l m = LESS;\n        \\<forall>x\\<in>set z. x \\<in> D; \\<forall>x\\<in>set l. x \\<in> D;\n        \\<forall>x\\<in>set m. x \\<in> D\\<rbrakk>\n       \\<Longrightarrow> cmp_lex cmp (a # l) z = LESS", "apply (case_tac z, auto) []"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a l b m z.\n       \\<lbrakk>cmp_lex cmp (b # m) z = LESS; cmp a b = LESS; a \\<in> D;\n        b \\<in> D; \\<forall>x\\<in>set z. x \\<in> D;\n        \\<forall>x\\<in>set l. x \\<in> D;\n        \\<forall>x\\<in>set m. x \\<in> D\\<rbrakk>\n       \\<Longrightarrow> cmp_lex cmp (a # l) z = LESS\n 2. \\<And>a l b m z.\n       \\<lbrakk>cmp_lex cmp (b # m) z = LESS;\n        \\<And>z.\n           \\<lbrakk>cmp_lex cmp m z = LESS; z \\<in> lists D\\<rbrakk>\n           \\<Longrightarrow> cmp_lex cmp l z = LESS;\n        cmp a b = EQUAL; a \\<in> D; b \\<in> D; cmp_lex cmp l m = LESS;\n        \\<forall>x\\<in>set z. x \\<in> D; \\<forall>x\\<in>set l. x \\<in> D;\n        \\<forall>x\\<in>set m. x \\<in> D\\<rbrakk>\n       \\<Longrightarrow> cmp_lex cmp (a # l) z = LESS", "apply (case_tac z,\n        auto split: comp_res.split_asm comp_res.split,\n        (drule (4) trans, simp)+\n      ) []"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a l b m z.\n       \\<lbrakk>cmp_lex cmp (b # m) z = LESS;\n        \\<And>z.\n           \\<lbrakk>cmp_lex cmp m z = LESS; z \\<in> lists D\\<rbrakk>\n           \\<Longrightarrow> cmp_lex cmp l z = LESS;\n        cmp a b = EQUAL; a \\<in> D; b \\<in> D; cmp_lex cmp l m = LESS;\n        \\<forall>x\\<in>set z. x \\<in> D; \\<forall>x\\<in>set l. x \\<in> D;\n        \\<forall>x\\<in>set m. x \\<in> D\\<rbrakk>\n       \\<Longrightarrow> cmp_lex cmp (a # l) z = LESS", "apply (case_tac z,\n        auto split: comp_res.split_asm comp_res.split,\n        (drule (4) trans, simp)+\n      ) []"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  cmp_lex cmp x z = LESS\n\ngoal (3 subgoals):\n 1. \\<And>x y z.\n       \\<lbrakk>x \\<in> lists D; y \\<in> lists D; z \\<in> lists D;\n        cmp_lex cmp x y = LESS; cmp_lex cmp y z = EQUAL\\<rbrakk>\n       \\<Longrightarrow> cmp_lex cmp x z = LESS\n 2. \\<And>x y z.\n       \\<lbrakk>x \\<in> lists D; y \\<in> lists D; z \\<in> lists D;\n        cmp_lex cmp x y = EQUAL; cmp_lex cmp y z = LESS\\<rbrakk>\n       \\<Longrightarrow> cmp_lex cmp x z = LESS\n 3. \\<And>x y z.\n       \\<lbrakk>x \\<in> lists D; y \\<in> lists D; z \\<in> lists D;\n        cmp_lex cmp x y = EQUAL; cmp_lex cmp y z = EQUAL\\<rbrakk>\n       \\<Longrightarrow> cmp_lex cmp x z = EQUAL", "}"], ["proof (state)\nthis:\n  \\<lbrakk>cmp_lex cmp x y = LESS; cmp_lex cmp y z = LESS\\<rbrakk>\n  \\<Longrightarrow> cmp_lex cmp x z = LESS\n\ngoal (3 subgoals):\n 1. \\<And>x y z.\n       \\<lbrakk>x \\<in> lists D; y \\<in> lists D; z \\<in> lists D;\n        cmp_lex cmp x y = LESS; cmp_lex cmp y z = EQUAL\\<rbrakk>\n       \\<Longrightarrow> cmp_lex cmp x z = LESS\n 2. \\<And>x y z.\n       \\<lbrakk>x \\<in> lists D; y \\<in> lists D; z \\<in> lists D;\n        cmp_lex cmp x y = EQUAL; cmp_lex cmp y z = LESS\\<rbrakk>\n       \\<Longrightarrow> cmp_lex cmp x z = LESS\n 3. \\<And>x y z.\n       \\<lbrakk>x \\<in> lists D; y \\<in> lists D; z \\<in> lists D;\n        cmp_lex cmp x y = EQUAL; cmp_lex cmp y z = EQUAL\\<rbrakk>\n       \\<Longrightarrow> cmp_lex cmp x z = EQUAL", "{"], ["proof (state)\nthis:\n  \\<lbrakk>cmp_lex cmp x y = LESS; cmp_lex cmp y z = LESS\\<rbrakk>\n  \\<Longrightarrow> cmp_lex cmp x z = LESS\n\ngoal (3 subgoals):\n 1. \\<And>x y z.\n       \\<lbrakk>x \\<in> lists D; y \\<in> lists D; z \\<in> lists D;\n        cmp_lex cmp x y = LESS; cmp_lex cmp y z = EQUAL\\<rbrakk>\n       \\<Longrightarrow> cmp_lex cmp x z = LESS\n 2. \\<And>x y z.\n       \\<lbrakk>x \\<in> lists D; y \\<in> lists D; z \\<in> lists D;\n        cmp_lex cmp x y = EQUAL; cmp_lex cmp y z = LESS\\<rbrakk>\n       \\<Longrightarrow> cmp_lex cmp x z = LESS\n 3. \\<And>x y z.\n       \\<lbrakk>x \\<in> lists D; y \\<in> lists D; z \\<in> lists D;\n        cmp_lex cmp x y = EQUAL; cmp_lex cmp y z = EQUAL\\<rbrakk>\n       \\<Longrightarrow> cmp_lex cmp x z = EQUAL", "assume \"cmp_lex cmp x y = LESS\" \"cmp_lex cmp y z = EQUAL\""], ["proof (state)\nthis:\n  cmp_lex cmp x y = LESS\n  cmp_lex cmp y z = EQUAL\n\ngoal (3 subgoals):\n 1. \\<And>x y z.\n       \\<lbrakk>x \\<in> lists D; y \\<in> lists D; z \\<in> lists D;\n        cmp_lex cmp x y = LESS; cmp_lex cmp y z = EQUAL\\<rbrakk>\n       \\<Longrightarrow> cmp_lex cmp x z = LESS\n 2. \\<And>x y z.\n       \\<lbrakk>x \\<in> lists D; y \\<in> lists D; z \\<in> lists D;\n        cmp_lex cmp x y = EQUAL; cmp_lex cmp y z = LESS\\<rbrakk>\n       \\<Longrightarrow> cmp_lex cmp x z = LESS\n 3. \\<And>x y z.\n       \\<lbrakk>x \\<in> lists D; y \\<in> lists D; z \\<in> lists D;\n        cmp_lex cmp x y = EQUAL; cmp_lex cmp y z = EQUAL\\<rbrakk>\n       \\<Longrightarrow> cmp_lex cmp x z = EQUAL", "thus \"cmp_lex cmp x z = LESS\""], ["proof (prove)\nusing this:\n  cmp_lex cmp x y = LESS\n  cmp_lex cmp y z = EQUAL\n\ngoal (1 subgoal):\n 1. cmp_lex cmp x z = LESS", "using M"], ["proof (prove)\nusing this:\n  cmp_lex cmp x y = LESS\n  cmp_lex cmp y z = EQUAL\n  x \\<in> lists D\n  y \\<in> lists D\n  z \\<in> lists D\n\ngoal (1 subgoal):\n 1. cmp_lex cmp x z = LESS", "apply (induct cmp\\<equiv>cmp x y arbitrary: z rule: cmp_lex.induct)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>z.\n       \\<lbrakk>cmp_lex cmp [] [] = LESS; cmp_lex cmp [] z = EQUAL;\n        [] \\<in> lists D; [] \\<in> lists D; z \\<in> lists D\\<rbrakk>\n       \\<Longrightarrow> cmp_lex cmp [] z = LESS\n 2. \\<And>v va z.\n       \\<lbrakk>cmp_lex cmp [] (v # va) = LESS;\n        cmp_lex cmp (v # va) z = EQUAL; [] \\<in> lists D;\n        v # va \\<in> lists D; z \\<in> lists D\\<rbrakk>\n       \\<Longrightarrow> cmp_lex cmp [] z = LESS\n 3. \\<And>v va z.\n       \\<lbrakk>cmp_lex cmp (v # va) [] = LESS; cmp_lex cmp [] z = EQUAL;\n        v # va \\<in> lists D; [] \\<in> lists D; z \\<in> lists D\\<rbrakk>\n       \\<Longrightarrow> cmp_lex cmp (v # va) z = LESS\n 4. \\<And>a l b m z.\n       \\<lbrakk>\\<And>z.\n                   \\<lbrakk>cmp a b = EQUAL; cmp_lex cmp l m = LESS;\n                    cmp_lex cmp m z = EQUAL; l \\<in> lists D;\n                    m \\<in> lists D; z \\<in> lists D\\<rbrakk>\n                   \\<Longrightarrow> cmp_lex cmp l z = LESS;\n        cmp_lex cmp (a # l) (b # m) = LESS; cmp_lex cmp (b # m) z = EQUAL;\n        a # l \\<in> lists D; b # m \\<in> lists D; z \\<in> lists D\\<rbrakk>\n       \\<Longrightarrow> cmp_lex cmp (a # l) z = LESS", "apply (auto split: comp_res.split_asm comp_res.split)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>v va z.\n       \\<lbrakk>cmp_lex cmp (v # va) z = EQUAL;\n        \\<forall>x\\<in>set z. x \\<in> D; v \\<in> D;\n        \\<forall>x\\<in>set va. x \\<in> D\\<rbrakk>\n       \\<Longrightarrow> cmp_lex cmp [] z = LESS\n 2. \\<And>a l b m z.\n       \\<lbrakk>cmp_lex cmp (b # m) z = EQUAL; cmp a b = LESS; a \\<in> D;\n        b \\<in> D; \\<forall>x\\<in>set z. x \\<in> D;\n        \\<forall>x\\<in>set l. x \\<in> D;\n        \\<forall>x\\<in>set m. x \\<in> D\\<rbrakk>\n       \\<Longrightarrow> cmp_lex cmp (a # l) z = LESS\n 3. \\<And>a l b m z.\n       \\<lbrakk>cmp_lex cmp (b # m) z = EQUAL;\n        \\<And>z.\n           \\<lbrakk>cmp_lex cmp m z = EQUAL; z \\<in> lists D\\<rbrakk>\n           \\<Longrightarrow> cmp_lex cmp l z = LESS;\n        cmp a b = EQUAL; a \\<in> D; b \\<in> D; cmp_lex cmp l m = LESS;\n        \\<forall>x\\<in>set z. x \\<in> D; \\<forall>x\\<in>set l. x \\<in> D;\n        \\<forall>x\\<in>set m. x \\<in> D\\<rbrakk>\n       \\<Longrightarrow> cmp_lex cmp (a # l) z = LESS", "apply (case_tac z, auto) []"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a l b m z.\n       \\<lbrakk>cmp_lex cmp (b # m) z = EQUAL; cmp a b = LESS; a \\<in> D;\n        b \\<in> D; \\<forall>x\\<in>set z. x \\<in> D;\n        \\<forall>x\\<in>set l. x \\<in> D;\n        \\<forall>x\\<in>set m. x \\<in> D\\<rbrakk>\n       \\<Longrightarrow> cmp_lex cmp (a # l) z = LESS\n 2. \\<And>a l b m z.\n       \\<lbrakk>cmp_lex cmp (b # m) z = EQUAL;\n        \\<And>z.\n           \\<lbrakk>cmp_lex cmp m z = EQUAL; z \\<in> lists D\\<rbrakk>\n           \\<Longrightarrow> cmp_lex cmp l z = LESS;\n        cmp a b = EQUAL; a \\<in> D; b \\<in> D; cmp_lex cmp l m = LESS;\n        \\<forall>x\\<in>set z. x \\<in> D; \\<forall>x\\<in>set l. x \\<in> D;\n        \\<forall>x\\<in>set m. x \\<in> D\\<rbrakk>\n       \\<Longrightarrow> cmp_lex cmp (a # l) z = LESS", "apply (case_tac z,\n        auto split: comp_res.split_asm comp_res.split,\n        (drule (4) trans, simp)+\n      ) []"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a l b m z.\n       \\<lbrakk>cmp_lex cmp (b # m) z = EQUAL;\n        \\<And>z.\n           \\<lbrakk>cmp_lex cmp m z = EQUAL; z \\<in> lists D\\<rbrakk>\n           \\<Longrightarrow> cmp_lex cmp l z = LESS;\n        cmp a b = EQUAL; a \\<in> D; b \\<in> D; cmp_lex cmp l m = LESS;\n        \\<forall>x\\<in>set z. x \\<in> D; \\<forall>x\\<in>set l. x \\<in> D;\n        \\<forall>x\\<in>set m. x \\<in> D\\<rbrakk>\n       \\<Longrightarrow> cmp_lex cmp (a # l) z = LESS", "apply (case_tac z,\n        auto split: comp_res.split_asm comp_res.split,\n        (drule (4) trans, simp)+\n      ) []"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  cmp_lex cmp x z = LESS\n\ngoal (2 subgoals):\n 1. \\<And>x y z.\n       \\<lbrakk>x \\<in> lists D; y \\<in> lists D; z \\<in> lists D;\n        cmp_lex cmp x y = EQUAL; cmp_lex cmp y z = LESS\\<rbrakk>\n       \\<Longrightarrow> cmp_lex cmp x z = LESS\n 2. \\<And>x y z.\n       \\<lbrakk>x \\<in> lists D; y \\<in> lists D; z \\<in> lists D;\n        cmp_lex cmp x y = EQUAL; cmp_lex cmp y z = EQUAL\\<rbrakk>\n       \\<Longrightarrow> cmp_lex cmp x z = EQUAL", "}"], ["proof (state)\nthis:\n  \\<lbrakk>cmp_lex cmp x y = LESS; cmp_lex cmp y z = EQUAL\\<rbrakk>\n  \\<Longrightarrow> cmp_lex cmp x z = LESS\n\ngoal (2 subgoals):\n 1. \\<And>x y z.\n       \\<lbrakk>x \\<in> lists D; y \\<in> lists D; z \\<in> lists D;\n        cmp_lex cmp x y = EQUAL; cmp_lex cmp y z = LESS\\<rbrakk>\n       \\<Longrightarrow> cmp_lex cmp x z = LESS\n 2. \\<And>x y z.\n       \\<lbrakk>x \\<in> lists D; y \\<in> lists D; z \\<in> lists D;\n        cmp_lex cmp x y = EQUAL; cmp_lex cmp y z = EQUAL\\<rbrakk>\n       \\<Longrightarrow> cmp_lex cmp x z = EQUAL", "{"], ["proof (state)\nthis:\n  \\<lbrakk>cmp_lex cmp x y = LESS; cmp_lex cmp y z = EQUAL\\<rbrakk>\n  \\<Longrightarrow> cmp_lex cmp x z = LESS\n\ngoal (2 subgoals):\n 1. \\<And>x y z.\n       \\<lbrakk>x \\<in> lists D; y \\<in> lists D; z \\<in> lists D;\n        cmp_lex cmp x y = EQUAL; cmp_lex cmp y z = LESS\\<rbrakk>\n       \\<Longrightarrow> cmp_lex cmp x z = LESS\n 2. \\<And>x y z.\n       \\<lbrakk>x \\<in> lists D; y \\<in> lists D; z \\<in> lists D;\n        cmp_lex cmp x y = EQUAL; cmp_lex cmp y z = EQUAL\\<rbrakk>\n       \\<Longrightarrow> cmp_lex cmp x z = EQUAL", "assume \"cmp_lex cmp x y = EQUAL\" \"cmp_lex cmp y z = LESS\""], ["proof (state)\nthis:\n  cmp_lex cmp x y = EQUAL\n  cmp_lex cmp y z = LESS\n\ngoal (2 subgoals):\n 1. \\<And>x y z.\n       \\<lbrakk>x \\<in> lists D; y \\<in> lists D; z \\<in> lists D;\n        cmp_lex cmp x y = EQUAL; cmp_lex cmp y z = LESS\\<rbrakk>\n       \\<Longrightarrow> cmp_lex cmp x z = LESS\n 2. \\<And>x y z.\n       \\<lbrakk>x \\<in> lists D; y \\<in> lists D; z \\<in> lists D;\n        cmp_lex cmp x y = EQUAL; cmp_lex cmp y z = EQUAL\\<rbrakk>\n       \\<Longrightarrow> cmp_lex cmp x z = EQUAL", "thus \"cmp_lex cmp x z = LESS\""], ["proof (prove)\nusing this:\n  cmp_lex cmp x y = EQUAL\n  cmp_lex cmp y z = LESS\n\ngoal (1 subgoal):\n 1. cmp_lex cmp x z = LESS", "using M"], ["proof (prove)\nusing this:\n  cmp_lex cmp x y = EQUAL\n  cmp_lex cmp y z = LESS\n  x \\<in> lists D\n  y \\<in> lists D\n  z \\<in> lists D\n\ngoal (1 subgoal):\n 1. cmp_lex cmp x z = LESS", "apply (induct cmp\\<equiv>cmp x y arbitrary: z rule: cmp_lex.induct)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>z.\n       \\<lbrakk>cmp_lex cmp [] [] = EQUAL; cmp_lex cmp [] z = LESS;\n        [] \\<in> lists D; [] \\<in> lists D; z \\<in> lists D\\<rbrakk>\n       \\<Longrightarrow> cmp_lex cmp [] z = LESS\n 2. \\<And>v va z.\n       \\<lbrakk>cmp_lex cmp [] (v # va) = EQUAL;\n        cmp_lex cmp (v # va) z = LESS; [] \\<in> lists D;\n        v # va \\<in> lists D; z \\<in> lists D\\<rbrakk>\n       \\<Longrightarrow> cmp_lex cmp [] z = LESS\n 3. \\<And>v va z.\n       \\<lbrakk>cmp_lex cmp (v # va) [] = EQUAL; cmp_lex cmp [] z = LESS;\n        v # va \\<in> lists D; [] \\<in> lists D; z \\<in> lists D\\<rbrakk>\n       \\<Longrightarrow> cmp_lex cmp (v # va) z = LESS\n 4. \\<And>a l b m z.\n       \\<lbrakk>\\<And>z.\n                   \\<lbrakk>cmp a b = EQUAL; cmp_lex cmp l m = EQUAL;\n                    cmp_lex cmp m z = LESS; l \\<in> lists D;\n                    m \\<in> lists D; z \\<in> lists D\\<rbrakk>\n                   \\<Longrightarrow> cmp_lex cmp l z = LESS;\n        cmp_lex cmp (a # l) (b # m) = EQUAL; cmp_lex cmp (b # m) z = LESS;\n        a # l \\<in> lists D; b # m \\<in> lists D; z \\<in> lists D\\<rbrakk>\n       \\<Longrightarrow> cmp_lex cmp (a # l) z = LESS", "apply (auto split: comp_res.split_asm comp_res.split)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a l b m z.\n       \\<lbrakk>cmp_lex cmp (b # m) z = LESS;\n        \\<And>z.\n           \\<lbrakk>cmp_lex cmp m z = LESS; z \\<in> lists D\\<rbrakk>\n           \\<Longrightarrow> cmp_lex cmp l z = LESS;\n        cmp a b = EQUAL; a \\<in> D; b \\<in> D; cmp_lex cmp l m = EQUAL;\n        \\<forall>x\\<in>set z. x \\<in> D; \\<forall>x\\<in>set l. x \\<in> D;\n        \\<forall>x\\<in>set m. x \\<in> D\\<rbrakk>\n       \\<Longrightarrow> cmp_lex cmp (a # l) z = LESS", "apply (case_tac z,\n        auto split: comp_res.split_asm comp_res.split,\n        (drule (4) trans, simp)+\n      ) []"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  cmp_lex cmp x z = LESS\n\ngoal (1 subgoal):\n 1. \\<And>x y z.\n       \\<lbrakk>x \\<in> lists D; y \\<in> lists D; z \\<in> lists D;\n        cmp_lex cmp x y = EQUAL; cmp_lex cmp y z = EQUAL\\<rbrakk>\n       \\<Longrightarrow> cmp_lex cmp x z = EQUAL", "}"], ["proof (state)\nthis:\n  \\<lbrakk>cmp_lex cmp x y = EQUAL; cmp_lex cmp y z = LESS\\<rbrakk>\n  \\<Longrightarrow> cmp_lex cmp x z = LESS\n\ngoal (1 subgoal):\n 1. \\<And>x y z.\n       \\<lbrakk>x \\<in> lists D; y \\<in> lists D; z \\<in> lists D;\n        cmp_lex cmp x y = EQUAL; cmp_lex cmp y z = EQUAL\\<rbrakk>\n       \\<Longrightarrow> cmp_lex cmp x z = EQUAL", "{"], ["proof (state)\nthis:\n  \\<lbrakk>cmp_lex cmp x y = EQUAL; cmp_lex cmp y z = LESS\\<rbrakk>\n  \\<Longrightarrow> cmp_lex cmp x z = LESS\n\ngoal (1 subgoal):\n 1. \\<And>x y z.\n       \\<lbrakk>x \\<in> lists D; y \\<in> lists D; z \\<in> lists D;\n        cmp_lex cmp x y = EQUAL; cmp_lex cmp y z = EQUAL\\<rbrakk>\n       \\<Longrightarrow> cmp_lex cmp x z = EQUAL", "assume \"cmp_lex cmp x y = EQUAL\" \"cmp_lex cmp y z = EQUAL\""], ["proof (state)\nthis:\n  cmp_lex cmp x y = EQUAL\n  cmp_lex cmp y z = EQUAL\n\ngoal (1 subgoal):\n 1. \\<And>x y z.\n       \\<lbrakk>x \\<in> lists D; y \\<in> lists D; z \\<in> lists D;\n        cmp_lex cmp x y = EQUAL; cmp_lex cmp y z = EQUAL\\<rbrakk>\n       \\<Longrightarrow> cmp_lex cmp x z = EQUAL", "thus \"cmp_lex cmp x z = EQUAL\""], ["proof (prove)\nusing this:\n  cmp_lex cmp x y = EQUAL\n  cmp_lex cmp y z = EQUAL\n\ngoal (1 subgoal):\n 1. cmp_lex cmp x z = EQUAL", "using M"], ["proof (prove)\nusing this:\n  cmp_lex cmp x y = EQUAL\n  cmp_lex cmp y z = EQUAL\n  x \\<in> lists D\n  y \\<in> lists D\n  z \\<in> lists D\n\ngoal (1 subgoal):\n 1. cmp_lex cmp x z = EQUAL", "apply (induct cmp\\<equiv>cmp x y arbitrary: z rule: cmp_lex.induct)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>z.\n       \\<lbrakk>cmp_lex cmp [] [] = EQUAL; cmp_lex cmp [] z = EQUAL;\n        [] \\<in> lists D; [] \\<in> lists D; z \\<in> lists D\\<rbrakk>\n       \\<Longrightarrow> cmp_lex cmp [] z = EQUAL\n 2. \\<And>v va z.\n       \\<lbrakk>cmp_lex cmp [] (v # va) = EQUAL;\n        cmp_lex cmp (v # va) z = EQUAL; [] \\<in> lists D;\n        v # va \\<in> lists D; z \\<in> lists D\\<rbrakk>\n       \\<Longrightarrow> cmp_lex cmp [] z = EQUAL\n 3. \\<And>v va z.\n       \\<lbrakk>cmp_lex cmp (v # va) [] = EQUAL; cmp_lex cmp [] z = EQUAL;\n        v # va \\<in> lists D; [] \\<in> lists D; z \\<in> lists D\\<rbrakk>\n       \\<Longrightarrow> cmp_lex cmp (v # va) z = EQUAL\n 4. \\<And>a l b m z.\n       \\<lbrakk>\\<And>z.\n                   \\<lbrakk>cmp a b = EQUAL; cmp_lex cmp l m = EQUAL;\n                    cmp_lex cmp m z = EQUAL; l \\<in> lists D;\n                    m \\<in> lists D; z \\<in> lists D\\<rbrakk>\n                   \\<Longrightarrow> cmp_lex cmp l z = EQUAL;\n        cmp_lex cmp (a # l) (b # m) = EQUAL; cmp_lex cmp (b # m) z = EQUAL;\n        a # l \\<in> lists D; b # m \\<in> lists D; z \\<in> lists D\\<rbrakk>\n       \\<Longrightarrow> cmp_lex cmp (a # l) z = EQUAL", "apply (auto split: comp_res.split_asm comp_res.split)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a l b m z.\n       \\<lbrakk>cmp_lex cmp (b # m) z = EQUAL;\n        \\<And>z.\n           \\<lbrakk>cmp_lex cmp m z = EQUAL; z \\<in> lists D\\<rbrakk>\n           \\<Longrightarrow> cmp_lex cmp l z = EQUAL;\n        cmp a b = EQUAL; a \\<in> D; b \\<in> D; cmp_lex cmp l m = EQUAL;\n        \\<forall>x\\<in>set z. x \\<in> D; \\<forall>x\\<in>set l. x \\<in> D;\n        \\<forall>x\\<in>set m. x \\<in> D\\<rbrakk>\n       \\<Longrightarrow> cmp_lex cmp (a # l) z = EQUAL", "apply (case_tac z)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a l b m z.\n       \\<lbrakk>cmp_lex cmp (b # m) z = EQUAL;\n        \\<And>z.\n           \\<lbrakk>cmp_lex cmp m z = EQUAL; z \\<in> lists D\\<rbrakk>\n           \\<Longrightarrow> cmp_lex cmp l z = EQUAL;\n        cmp a b = EQUAL; a \\<in> D; b \\<in> D; cmp_lex cmp l m = EQUAL;\n        \\<forall>x\\<in>set z. x \\<in> D; \\<forall>x\\<in>set l. x \\<in> D;\n        \\<forall>x\\<in>set m. x \\<in> D; z = []\\<rbrakk>\n       \\<Longrightarrow> cmp_lex cmp (a # l) z = EQUAL\n 2. \\<And>a l b m z aa list.\n       \\<lbrakk>cmp_lex cmp (b # m) z = EQUAL;\n        \\<And>z.\n           \\<lbrakk>cmp_lex cmp m z = EQUAL; z \\<in> lists D\\<rbrakk>\n           \\<Longrightarrow> cmp_lex cmp l z = EQUAL;\n        cmp a b = EQUAL; a \\<in> D; b \\<in> D; cmp_lex cmp l m = EQUAL;\n        \\<forall>x\\<in>set z. x \\<in> D; \\<forall>x\\<in>set l. x \\<in> D;\n        \\<forall>x\\<in>set m. x \\<in> D; z = aa # list\\<rbrakk>\n       \\<Longrightarrow> cmp_lex cmp (a # l) z = EQUAL", "apply (auto split: comp_res.split_asm comp_res.split)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a l b m aa list.\n       \\<lbrakk>\\<And>z.\n                   \\<lbrakk>cmp_lex cmp m z = EQUAL;\n                    z \\<in> lists D\\<rbrakk>\n                   \\<Longrightarrow> cmp_lex cmp l z = EQUAL;\n        cmp a b = EQUAL; a \\<in> D; b \\<in> D; cmp_lex cmp l m = EQUAL;\n        \\<forall>x\\<in>set l. x \\<in> D; \\<forall>x\\<in>set m. x \\<in> D;\n        cmp b aa = EQUAL; aa \\<in> D; \\<forall>x\\<in>set list. x \\<in> D;\n        cmp_lex cmp m list = EQUAL; cmp a aa = LESS\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>a l b m aa list.\n       \\<lbrakk>\\<And>z.\n                   \\<lbrakk>cmp_lex cmp m z = EQUAL;\n                    z \\<in> lists D\\<rbrakk>\n                   \\<Longrightarrow> cmp_lex cmp l z = EQUAL;\n        cmp a b = EQUAL; a \\<in> D; b \\<in> D; cmp_lex cmp l m = EQUAL;\n        \\<forall>x\\<in>set l. x \\<in> D; \\<forall>x\\<in>set m. x \\<in> D;\n        cmp b aa = EQUAL; aa \\<in> D; \\<forall>x\\<in>set list. x \\<in> D;\n        cmp_lex cmp m list = EQUAL; cmp a aa = GREATER\\<rbrakk>\n       \\<Longrightarrow> False", "apply (drule (4) trans, simp)+"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  cmp_lex cmp x z = EQUAL\n\ngoal:\nNo subgoals!", "}"], ["proof (state)\nthis:\n  \\<lbrakk>cmp_lex cmp x y = EQUAL; cmp_lex cmp y z = EQUAL\\<rbrakk>\n  \\<Longrightarrow> cmp_lex cmp x z = EQUAL\n\ngoal:\nNo subgoals!", "qed"], ["", "subsubsection \\<open>Lexicographic Order on Pairs\\<close>"], ["", "fun cmp_prod where \n  \"cmp_prod cmp1 cmp2 (a1,a2) (b1,b2) \n  = (\n    case cmp1 a1 b1 of\n      LESS \\<Rightarrow> LESS\n    | EQUAL \\<Rightarrow> cmp2 a2 b2\n    | GREATER \\<Rightarrow> GREATER)\""], ["", "lemma cmp_prod_alt: \"cmp_prod = (\\<lambda>cmp1 cmp2 (a1,a2) (b1,b2). (\n    case cmp1 a1 b1 of\n      LESS \\<Rightarrow> LESS\n    | EQUAL \\<Rightarrow> cmp2 a2 b2\n    | GREATER \\<Rightarrow> GREATER))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. cmp_prod =\n    (\\<lambda>cmp1 cmp2 (a1, a2) (b1, b2).\n        case cmp1 a1 b1 of LESS \\<Rightarrow> LESS\n        | EQUAL \\<Rightarrow> cmp2 a2 b2 | GREATER \\<Rightarrow> GREATER)", "by (auto intro!: ext)"], ["", "lemma prod_linorder[intro?]: \n  assumes A: \"linorder_on A cmp1\" \n  assumes B: \"linorder_on B cmp2\" \n  shows \"linorder_on (A\\<times>B) (cmp_prod cmp1 cmp2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. linorder_on (A \\<times> B) (cmp_prod cmp1 cmp2)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. linorder_on (A \\<times> B) (cmp_prod cmp1 cmp2)", "interpret A: linorder_on A cmp1\n    + B: linorder_on B cmp2"], ["proof (prove)\ngoal (1 subgoal):\n 1. linorder_on A cmp1 &&& linorder_on B cmp2", "by fact+"], ["proof (state)\ngoal (1 subgoal):\n 1. linorder_on (A \\<times> B) (cmp_prod cmp1 cmp2)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. linorder_on (A \\<times> B) (cmp_prod cmp1 cmp2)", "apply unfold_locales"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<in> A \\<times> B; y \\<in> A \\<times> B\\<rbrakk>\n       \\<Longrightarrow> (cmp_prod cmp1 cmp2 x y = LESS) =\n                         (cmp_prod cmp1 cmp2 y x = GREATER)\n 2. \\<And>x.\n       x \\<in> A \\<times> B \\<Longrightarrow> cmp_prod cmp1 cmp2 x x = EQUAL\n 3. \\<And>x y z.\n       \\<lbrakk>x \\<in> A \\<times> B; y \\<in> A \\<times> B;\n        z \\<in> A \\<times> B; cmp_prod cmp1 cmp2 x y = LESS;\n        cmp_prod cmp1 cmp2 y z = LESS\\<rbrakk>\n       \\<Longrightarrow> cmp_prod cmp1 cmp2 x z = LESS\n 4. \\<And>x y z.\n       \\<lbrakk>x \\<in> A \\<times> B; y \\<in> A \\<times> B;\n        z \\<in> A \\<times> B; cmp_prod cmp1 cmp2 x y = LESS;\n        cmp_prod cmp1 cmp2 y z = EQUAL\\<rbrakk>\n       \\<Longrightarrow> cmp_prod cmp1 cmp2 x z = LESS\n 5. \\<And>x y z.\n       \\<lbrakk>x \\<in> A \\<times> B; y \\<in> A \\<times> B;\n        z \\<in> A \\<times> B; cmp_prod cmp1 cmp2 x y = EQUAL;\n        cmp_prod cmp1 cmp2 y z = LESS\\<rbrakk>\n       \\<Longrightarrow> cmp_prod cmp1 cmp2 x z = LESS\n 6. \\<And>x y z.\n       \\<lbrakk>x \\<in> A \\<times> B; y \\<in> A \\<times> B;\n        z \\<in> A \\<times> B; cmp_prod cmp1 cmp2 x y = EQUAL;\n        cmp_prod cmp1 cmp2 y z = EQUAL\\<rbrakk>\n       \\<Longrightarrow> cmp_prod cmp1 cmp2 x z = EQUAL", "apply (auto split: comp_res.split comp_res.split_asm,\n      simp_all add: A.lt_eq B.lt_eq,\n      simp_all add: A.lt_eq[symmetric]\n      ) []"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>x.\n       x \\<in> A \\<times> B \\<Longrightarrow> cmp_prod cmp1 cmp2 x x = EQUAL\n 2. \\<And>x y z.\n       \\<lbrakk>x \\<in> A \\<times> B; y \\<in> A \\<times> B;\n        z \\<in> A \\<times> B; cmp_prod cmp1 cmp2 x y = LESS;\n        cmp_prod cmp1 cmp2 y z = LESS\\<rbrakk>\n       \\<Longrightarrow> cmp_prod cmp1 cmp2 x z = LESS\n 3. \\<And>x y z.\n       \\<lbrakk>x \\<in> A \\<times> B; y \\<in> A \\<times> B;\n        z \\<in> A \\<times> B; cmp_prod cmp1 cmp2 x y = LESS;\n        cmp_prod cmp1 cmp2 y z = EQUAL\\<rbrakk>\n       \\<Longrightarrow> cmp_prod cmp1 cmp2 x z = LESS\n 4. \\<And>x y z.\n       \\<lbrakk>x \\<in> A \\<times> B; y \\<in> A \\<times> B;\n        z \\<in> A \\<times> B; cmp_prod cmp1 cmp2 x y = EQUAL;\n        cmp_prod cmp1 cmp2 y z = LESS\\<rbrakk>\n       \\<Longrightarrow> cmp_prod cmp1 cmp2 x z = LESS\n 5. \\<And>x y z.\n       \\<lbrakk>x \\<in> A \\<times> B; y \\<in> A \\<times> B;\n        z \\<in> A \\<times> B; cmp_prod cmp1 cmp2 x y = EQUAL;\n        cmp_prod cmp1 cmp2 y z = EQUAL\\<rbrakk>\n       \\<Longrightarrow> cmp_prod cmp1 cmp2 x z = EQUAL", "apply (auto split: comp_res.split comp_res.split_asm) []"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>x y z.\n       \\<lbrakk>x \\<in> A \\<times> B; y \\<in> A \\<times> B;\n        z \\<in> A \\<times> B; cmp_prod cmp1 cmp2 x y = LESS;\n        cmp_prod cmp1 cmp2 y z = LESS\\<rbrakk>\n       \\<Longrightarrow> cmp_prod cmp1 cmp2 x z = LESS\n 2. \\<And>x y z.\n       \\<lbrakk>x \\<in> A \\<times> B; y \\<in> A \\<times> B;\n        z \\<in> A \\<times> B; cmp_prod cmp1 cmp2 x y = LESS;\n        cmp_prod cmp1 cmp2 y z = EQUAL\\<rbrakk>\n       \\<Longrightarrow> cmp_prod cmp1 cmp2 x z = LESS\n 3. \\<And>x y z.\n       \\<lbrakk>x \\<in> A \\<times> B; y \\<in> A \\<times> B;\n        z \\<in> A \\<times> B; cmp_prod cmp1 cmp2 x y = EQUAL;\n        cmp_prod cmp1 cmp2 y z = LESS\\<rbrakk>\n       \\<Longrightarrow> cmp_prod cmp1 cmp2 x z = LESS\n 4. \\<And>x y z.\n       \\<lbrakk>x \\<in> A \\<times> B; y \\<in> A \\<times> B;\n        z \\<in> A \\<times> B; cmp_prod cmp1 cmp2 x y = EQUAL;\n        cmp_prod cmp1 cmp2 y z = EQUAL\\<rbrakk>\n       \\<Longrightarrow> cmp_prod cmp1 cmp2 x z = EQUAL", "apply (auto split: comp_res.split comp_res.split_asm) []"], ["proof (prove)\ngoal (11 subgoals):\n 1. \\<And>a b aa ba ab bb.\n       \\<lbrakk>a \\<in> A; b \\<in> B; aa \\<in> A; ba \\<in> B; ab \\<in> A;\n        bb \\<in> B; cmp1 a aa = LESS; cmp1 aa ab = LESS;\n        cmp1 a ab = EQUAL\\<rbrakk>\n       \\<Longrightarrow> cmp2 b bb = LESS\n 2. \\<And>a b aa ba ab bb.\n       \\<lbrakk>a \\<in> A; b \\<in> B; aa \\<in> A; ba \\<in> B; ab \\<in> A;\n        bb \\<in> B; cmp1 a aa = LESS; cmp1 aa ab = LESS;\n        cmp1 a ab = GREATER\\<rbrakk>\n       \\<Longrightarrow> False\n 3. \\<And>a b aa ba ab bb.\n       \\<lbrakk>a \\<in> A; b \\<in> B; aa \\<in> A; ba \\<in> B; ab \\<in> A;\n        bb \\<in> B; cmp1 a aa = LESS; cmp1 aa ab = EQUAL; cmp2 ba bb = LESS;\n        cmp1 a ab = EQUAL\\<rbrakk>\n       \\<Longrightarrow> cmp2 b bb = LESS\n 4. \\<And>a b aa ba ab bb.\n       \\<lbrakk>a \\<in> A; b \\<in> B; aa \\<in> A; ba \\<in> B; ab \\<in> A;\n        bb \\<in> B; cmp1 a aa = LESS; cmp1 aa ab = EQUAL; cmp2 ba bb = LESS;\n        cmp1 a ab = GREATER\\<rbrakk>\n       \\<Longrightarrow> False\n 5. \\<And>a b aa ba ab bb.\n       \\<lbrakk>a \\<in> A; b \\<in> B; aa \\<in> A; ba \\<in> B; ab \\<in> A;\n        bb \\<in> B; cmp1 a aa = EQUAL; cmp2 b ba = LESS; cmp1 aa ab = LESS;\n        cmp1 a ab = EQUAL\\<rbrakk>\n       \\<Longrightarrow> cmp2 b bb = LESS\n 6. \\<And>a b aa ba ab bb.\n       \\<lbrakk>a \\<in> A; b \\<in> B; aa \\<in> A; ba \\<in> B; ab \\<in> A;\n        bb \\<in> B; cmp1 a aa = EQUAL; cmp2 b ba = LESS; cmp1 aa ab = LESS;\n        cmp1 a ab = GREATER\\<rbrakk>\n       \\<Longrightarrow> False\n 7. \\<And>a b aa ba ab bb.\n       \\<lbrakk>a \\<in> A; b \\<in> B; aa \\<in> A; ba \\<in> B; ab \\<in> A;\n        bb \\<in> B; cmp1 a aa = EQUAL; cmp2 b ba = LESS; cmp1 aa ab = EQUAL;\n        cmp2 ba bb = LESS; cmp1 a ab = EQUAL\\<rbrakk>\n       \\<Longrightarrow> cmp2 b bb = LESS\n 8. \\<And>a b aa ba ab bb.\n       \\<lbrakk>a \\<in> A; b \\<in> B; aa \\<in> A; ba \\<in> B; ab \\<in> A;\n        bb \\<in> B; cmp1 a aa = EQUAL; cmp2 b ba = LESS; cmp1 aa ab = EQUAL;\n        cmp2 ba bb = LESS; cmp1 a ab = GREATER\\<rbrakk>\n       \\<Longrightarrow> False\n 9. \\<And>x y z.\n       \\<lbrakk>x \\<in> A \\<times> B; y \\<in> A \\<times> B;\n        z \\<in> A \\<times> B; cmp_prod cmp1 cmp2 x y = LESS;\n        cmp_prod cmp1 cmp2 y z = EQUAL\\<rbrakk>\n       \\<Longrightarrow> cmp_prod cmp1 cmp2 x z = LESS\n 10. \\<And>x y z.\n        \\<lbrakk>x \\<in> A \\<times> B; y \\<in> A \\<times> B;\n         z \\<in> A \\<times> B; cmp_prod cmp1 cmp2 x y = EQUAL;\n         cmp_prod cmp1 cmp2 y z = LESS\\<rbrakk>\n        \\<Longrightarrow> cmp_prod cmp1 cmp2 x z = LESS\nA total of 11 subgoals...", "apply (drule (4) A.trans B.trans, simp)+"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>x y z.\n       \\<lbrakk>x \\<in> A \\<times> B; y \\<in> A \\<times> B;\n        z \\<in> A \\<times> B; cmp_prod cmp1 cmp2 x y = LESS;\n        cmp_prod cmp1 cmp2 y z = EQUAL\\<rbrakk>\n       \\<Longrightarrow> cmp_prod cmp1 cmp2 x z = LESS\n 2. \\<And>x y z.\n       \\<lbrakk>x \\<in> A \\<times> B; y \\<in> A \\<times> B;\n        z \\<in> A \\<times> B; cmp_prod cmp1 cmp2 x y = EQUAL;\n        cmp_prod cmp1 cmp2 y z = LESS\\<rbrakk>\n       \\<Longrightarrow> cmp_prod cmp1 cmp2 x z = LESS\n 3. \\<And>x y z.\n       \\<lbrakk>x \\<in> A \\<times> B; y \\<in> A \\<times> B;\n        z \\<in> A \\<times> B; cmp_prod cmp1 cmp2 x y = EQUAL;\n        cmp_prod cmp1 cmp2 y z = EQUAL\\<rbrakk>\n       \\<Longrightarrow> cmp_prod cmp1 cmp2 x z = EQUAL", "apply (auto split: comp_res.split comp_res.split_asm) []"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<And>a b aa ba ab bb.\n       \\<lbrakk>a \\<in> A; b \\<in> B; aa \\<in> A; ba \\<in> B; ab \\<in> A;\n        bb \\<in> B; cmp1 a aa = LESS; cmp1 aa ab = EQUAL;\n        cmp2 ba bb = EQUAL; cmp1 a ab = EQUAL\\<rbrakk>\n       \\<Longrightarrow> cmp2 b bb = LESS\n 2. \\<And>a b aa ba ab bb.\n       \\<lbrakk>a \\<in> A; b \\<in> B; aa \\<in> A; ba \\<in> B; ab \\<in> A;\n        bb \\<in> B; cmp1 a aa = LESS; cmp1 aa ab = EQUAL;\n        cmp2 ba bb = EQUAL; cmp1 a ab = GREATER\\<rbrakk>\n       \\<Longrightarrow> False\n 3. \\<And>a b aa ba ab bb.\n       \\<lbrakk>a \\<in> A; b \\<in> B; aa \\<in> A; ba \\<in> B; ab \\<in> A;\n        bb \\<in> B; cmp1 a aa = EQUAL; cmp2 b ba = LESS; cmp1 aa ab = EQUAL;\n        cmp2 ba bb = EQUAL; cmp1 a ab = EQUAL\\<rbrakk>\n       \\<Longrightarrow> cmp2 b bb = LESS\n 4. \\<And>a b aa ba ab bb.\n       \\<lbrakk>a \\<in> A; b \\<in> B; aa \\<in> A; ba \\<in> B; ab \\<in> A;\n        bb \\<in> B; cmp1 a aa = EQUAL; cmp2 b ba = LESS; cmp1 aa ab = EQUAL;\n        cmp2 ba bb = EQUAL; cmp1 a ab = GREATER\\<rbrakk>\n       \\<Longrightarrow> False\n 5. \\<And>x y z.\n       \\<lbrakk>x \\<in> A \\<times> B; y \\<in> A \\<times> B;\n        z \\<in> A \\<times> B; cmp_prod cmp1 cmp2 x y = EQUAL;\n        cmp_prod cmp1 cmp2 y z = LESS\\<rbrakk>\n       \\<Longrightarrow> cmp_prod cmp1 cmp2 x z = LESS\n 6. \\<And>x y z.\n       \\<lbrakk>x \\<in> A \\<times> B; y \\<in> A \\<times> B;\n        z \\<in> A \\<times> B; cmp_prod cmp1 cmp2 x y = EQUAL;\n        cmp_prod cmp1 cmp2 y z = EQUAL\\<rbrakk>\n       \\<Longrightarrow> cmp_prod cmp1 cmp2 x z = EQUAL", "apply (drule (4) A.trans B.trans, simp)+"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x y z.\n       \\<lbrakk>x \\<in> A \\<times> B; y \\<in> A \\<times> B;\n        z \\<in> A \\<times> B; cmp_prod cmp1 cmp2 x y = EQUAL;\n        cmp_prod cmp1 cmp2 y z = LESS\\<rbrakk>\n       \\<Longrightarrow> cmp_prod cmp1 cmp2 x z = LESS\n 2. \\<And>x y z.\n       \\<lbrakk>x \\<in> A \\<times> B; y \\<in> A \\<times> B;\n        z \\<in> A \\<times> B; cmp_prod cmp1 cmp2 x y = EQUAL;\n        cmp_prod cmp1 cmp2 y z = EQUAL\\<rbrakk>\n       \\<Longrightarrow> cmp_prod cmp1 cmp2 x z = EQUAL", "apply (auto split: comp_res.split comp_res.split_asm) []"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>a b aa ba ab bb.\n       \\<lbrakk>a \\<in> A; b \\<in> B; aa \\<in> A; ba \\<in> B; ab \\<in> A;\n        bb \\<in> B; cmp1 a aa = EQUAL; cmp2 b ba = EQUAL; cmp1 aa ab = LESS;\n        cmp1 a ab = EQUAL\\<rbrakk>\n       \\<Longrightarrow> cmp2 b bb = LESS\n 2. \\<And>a b aa ba ab bb.\n       \\<lbrakk>a \\<in> A; b \\<in> B; aa \\<in> A; ba \\<in> B; ab \\<in> A;\n        bb \\<in> B; cmp1 a aa = EQUAL; cmp2 b ba = EQUAL; cmp1 aa ab = LESS;\n        cmp1 a ab = GREATER\\<rbrakk>\n       \\<Longrightarrow> False\n 3. \\<And>a b aa ba ab bb.\n       \\<lbrakk>a \\<in> A; b \\<in> B; aa \\<in> A; ba \\<in> B; ab \\<in> A;\n        bb \\<in> B; cmp1 a aa = EQUAL; cmp2 b ba = EQUAL;\n        cmp1 aa ab = EQUAL; cmp2 ba bb = LESS; cmp1 a ab = EQUAL\\<rbrakk>\n       \\<Longrightarrow> cmp2 b bb = LESS\n 4. \\<And>a b aa ba ab bb.\n       \\<lbrakk>a \\<in> A; b \\<in> B; aa \\<in> A; ba \\<in> B; ab \\<in> A;\n        bb \\<in> B; cmp1 a aa = EQUAL; cmp2 b ba = EQUAL;\n        cmp1 aa ab = EQUAL; cmp2 ba bb = LESS; cmp1 a ab = GREATER\\<rbrakk>\n       \\<Longrightarrow> False\n 5. \\<And>x y z.\n       \\<lbrakk>x \\<in> A \\<times> B; y \\<in> A \\<times> B;\n        z \\<in> A \\<times> B; cmp_prod cmp1 cmp2 x y = EQUAL;\n        cmp_prod cmp1 cmp2 y z = EQUAL\\<rbrakk>\n       \\<Longrightarrow> cmp_prod cmp1 cmp2 x z = EQUAL", "apply (drule (4) A.trans B.trans, simp)+"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x y z.\n       \\<lbrakk>x \\<in> A \\<times> B; y \\<in> A \\<times> B;\n        z \\<in> A \\<times> B; cmp_prod cmp1 cmp2 x y = EQUAL;\n        cmp_prod cmp1 cmp2 y z = EQUAL\\<rbrakk>\n       \\<Longrightarrow> cmp_prod cmp1 cmp2 x z = EQUAL", "apply (auto split: comp_res.split comp_res.split_asm) []"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>a b aa ba ab bb.\n       \\<lbrakk>a \\<in> A; b \\<in> B; aa \\<in> A; ba \\<in> B; ab \\<in> A;\n        bb \\<in> B; cmp1 a aa = EQUAL; cmp2 b ba = EQUAL;\n        cmp1 aa ab = EQUAL; cmp2 ba bb = EQUAL; cmp1 a ab = LESS\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>a b aa ba ab bb.\n       \\<lbrakk>a \\<in> A; b \\<in> B; aa \\<in> A; ba \\<in> B; ab \\<in> A;\n        bb \\<in> B; cmp1 a aa = EQUAL; cmp2 b ba = EQUAL;\n        cmp1 aa ab = EQUAL; cmp2 ba bb = EQUAL; cmp1 a ab = EQUAL\\<rbrakk>\n       \\<Longrightarrow> cmp2 b bb = EQUAL\n 3. \\<And>a b aa ba ab bb.\n       \\<lbrakk>a \\<in> A; b \\<in> B; aa \\<in> A; ba \\<in> B; ab \\<in> A;\n        bb \\<in> B; cmp1 a aa = EQUAL; cmp2 b ba = EQUAL;\n        cmp1 aa ab = EQUAL; cmp2 ba bb = EQUAL; cmp1 a ab = GREATER\\<rbrakk>\n       \\<Longrightarrow> False", "apply (drule (4) A.trans B.trans, simp)+"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  linorder_on (A \\<times> B) (cmp_prod cmp1 cmp2)\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection \\<open>Universal Ordering for Sets that is Effective for Finite Sets\\<close>"], ["", "subsubsection \\<open>Sorted Lists of Sets\\<close>"], ["", "text \\<open>Some more results about sorted lists of finite sets\\<close>"], ["", "lemma set_to_map_set_is_map_of: \n  \"distinct (map fst l) \\<Longrightarrow> set_to_map (set l) = map_of l\""], ["proof (prove)\ngoal (1 subgoal):\n 1. distinct (map fst l) \\<Longrightarrow> set_to_map (set l) = map_of l", "apply (induct l)"], ["proof (prove)\ngoal (2 subgoals):\n 1. distinct (map fst []) \\<Longrightarrow> set_to_map (set []) = map_of []\n 2. \\<And>a l.\n       \\<lbrakk>distinct (map fst l) \\<Longrightarrow>\n                set_to_map (set l) = map_of l;\n        distinct (map fst (a # l))\\<rbrakk>\n       \\<Longrightarrow> set_to_map (set (a # l)) = map_of (a # l)", "apply (auto simp: set_to_map_insert)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "context linorder begin"], ["", "lemma sorted_list_of_set_eq_nil[simp]:\n    assumes \"finite A\" \n    shows \"sorted_list_of_set A = [] \\<longleftrightarrow> A={}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (sorted_list_of_set A = []) = (A = {})", "using assms"], ["proof (prove)\nusing this:\n  finite A\n\ngoal (1 subgoal):\n 1. (sorted_list_of_set A = []) = (A = {})", "apply (induct rule: finite_induct)"], ["proof (prove)\ngoal (2 subgoals):\n 1. (sorted_list_of_set {} = []) = ({} = {})\n 2. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        (sorted_list_of_set F = []) = (F = {})\\<rbrakk>\n       \\<Longrightarrow> (sorted_list_of_set (insert x F) = []) =\n                         (insert x F = {})", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        (sorted_list_of_set F = []) = (F = {})\\<rbrakk>\n       \\<Longrightarrow> (sorted_list_of_set (insert x F) = []) =\n                         (insert x F = {})", "apply simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma sorted_list_of_set_eq_nil2[simp]:\n    assumes \"finite A\" \n    shows \"[] = sorted_list_of_set A \\<longleftrightarrow> A={}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ([] = sorted_list_of_set A) = (A = {})", "using assms"], ["proof (prove)\nusing this:\n  finite A\n\ngoal (1 subgoal):\n 1. ([] = sorted_list_of_set A) = (A = {})", "by (auto dest: sym)"], ["", "lemma set_insort[simp]: \"set (insort x l) = insert x (set l)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set (insort x l) = insert x (set l)", "by (induct l) auto"], ["", "lemma sorted_list_of_set_inj_aux:\n    fixes A B :: \"'a set\"\n    assumes \"finite A\" \n    assumes \"finite B\" \n    assumes \"sorted_list_of_set A = sorted_list_of_set B\"\n    shows \"A=B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A = B", "using assms"], ["proof (prove)\nusing this:\n  finite A\n  finite B\n  sorted_list_of_set A = sorted_list_of_set B\n\ngoal (1 subgoal):\n 1. A = B", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite A; finite B;\n     sorted_list_of_set A = sorted_list_of_set B\\<rbrakk>\n    \\<Longrightarrow> A = B", "from \\<open>finite B\\<close>"], ["proof (chain)\npicking this:\n  finite B", "have \"B = set (sorted_list_of_set B)\""], ["proof (prove)\nusing this:\n  finite B\n\ngoal (1 subgoal):\n 1. B = set (sorted_list_of_set B)", "by simp"], ["proof (state)\nthis:\n  B = set (sorted_list_of_set B)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>finite A; finite B;\n     sorted_list_of_set A = sorted_list_of_set B\\<rbrakk>\n    \\<Longrightarrow> A = B", "also"], ["proof (state)\nthis:\n  B = set (sorted_list_of_set B)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>finite A; finite B;\n     sorted_list_of_set A = sorted_list_of_set B\\<rbrakk>\n    \\<Longrightarrow> A = B", "from assms"], ["proof (chain)\npicking this:\n  finite A\n  finite B\n  sorted_list_of_set A = sorted_list_of_set B", "have \"\\<dots> = set (sorted_list_of_set (A))\""], ["proof (prove)\nusing this:\n  finite A\n  finite B\n  sorted_list_of_set A = sorted_list_of_set B\n\ngoal (1 subgoal):\n 1. set (sorted_list_of_set B) = set (sorted_list_of_set A)", "by simp"], ["proof (state)\nthis:\n  set (sorted_list_of_set B) = set (sorted_list_of_set A)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>finite A; finite B;\n     sorted_list_of_set A = sorted_list_of_set B\\<rbrakk>\n    \\<Longrightarrow> A = B", "also"], ["proof (state)\nthis:\n  set (sorted_list_of_set B) = set (sorted_list_of_set A)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>finite A; finite B;\n     sorted_list_of_set A = sorted_list_of_set B\\<rbrakk>\n    \\<Longrightarrow> A = B", "from \\<open>finite A\\<close>"], ["proof (chain)\npicking this:\n  finite A", "have \"set (sorted_list_of_set (A)) = A\""], ["proof (prove)\nusing this:\n  finite A\n\ngoal (1 subgoal):\n 1. set (sorted_list_of_set A) = A", "by simp"], ["proof (state)\nthis:\n  set (sorted_list_of_set A) = A\n\ngoal (1 subgoal):\n 1. \\<lbrakk>finite A; finite B;\n     sorted_list_of_set A = sorted_list_of_set B\\<rbrakk>\n    \\<Longrightarrow> A = B", "finally"], ["proof (chain)\npicking this:\n  B = A", "show ?thesis"], ["proof (prove)\nusing this:\n  B = A\n\ngoal (1 subgoal):\n 1. A = B", "by simp"], ["proof (state)\nthis:\n  A = B\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma sorted_list_of_set_inj: \"inj_on sorted_list_of_set (Collect finite)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. inj_on sorted_list_of_set (Collect finite)", "apply (rule inj_onI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<in> Collect finite; y \\<in> Collect finite;\n        sorted_list_of_set x = sorted_list_of_set y\\<rbrakk>\n       \\<Longrightarrow> x = y", "using sorted_list_of_set_inj_aux"], ["proof (prove)\nusing this:\n  \\<lbrakk>finite ?A; finite ?B;\n   sorted_list_of_set ?A = sorted_list_of_set ?B\\<rbrakk>\n  \\<Longrightarrow> ?A = ?B\n\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<in> Collect finite; y \\<in> Collect finite;\n        sorted_list_of_set x = sorted_list_of_set y\\<rbrakk>\n       \\<Longrightarrow> x = y", "by blast"], ["", "lemma the_sorted_list_of_set:\n    assumes \"distinct l\"\n    assumes \"sorted l\"\n    shows \"sorted_list_of_set (set l) = l\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sorted_list_of_set (set l) = l", "using assms"], ["proof (prove)\nusing this:\n  distinct l\n  sorted l\n\ngoal (1 subgoal):\n 1. sorted_list_of_set (set l) = l", "by (simp \n      add: sorted_list_of_set_sort_remdups distinct_remdups_id sorted_sort_id)"], ["", "definition \"sorted_list_of_map m \\<equiv> \n    map (\\<lambda>k. (k, the (m k))) (sorted_list_of_set (dom m))\""], ["", "lemma the_sorted_list_of_map:\n    assumes \"distinct (map fst l)\"\n    assumes \"sorted (map fst l)\"\n    shows \"sorted_list_of_map (map_of l) = l\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sorted_list_of_map (map_of l) = l", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. sorted_list_of_map (map_of l) = l", "have \"dom (map_of l) = set (map fst l)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dom (map_of l) = set (map fst l)", "by (induct l) force+"], ["proof (state)\nthis:\n  dom (map_of l) = set (map fst l)\n\ngoal (1 subgoal):\n 1. sorted_list_of_map (map_of l) = l", "hence \"sorted_list_of_set (dom (map_of l)) = map fst l\""], ["proof (prove)\nusing this:\n  dom (map_of l) = set (map fst l)\n\ngoal (1 subgoal):\n 1. sorted_list_of_set (dom (map_of l)) = map fst l", "using the_sorted_list_of_set[OF assms]"], ["proof (prove)\nusing this:\n  dom (map_of l) = set (map fst l)\n  sorted_list_of_set (set (map fst l)) = map fst l\n\ngoal (1 subgoal):\n 1. sorted_list_of_set (dom (map_of l)) = map fst l", "by simp"], ["proof (state)\nthis:\n  sorted_list_of_set (dom (map_of l)) = map fst l\n\ngoal (1 subgoal):\n 1. sorted_list_of_map (map_of l) = l", "hence \"sorted_list_of_map (map_of l) \n      = map (\\<lambda>k. (k, the (map_of l k))) (map fst l)\""], ["proof (prove)\nusing this:\n  sorted_list_of_set (dom (map_of l)) = map fst l\n\ngoal (1 subgoal):\n 1. sorted_list_of_map (map_of l) =\n    map (\\<lambda>k. (k, the (map_of l k))) (map fst l)", "unfolding sorted_list_of_map_def"], ["proof (prove)\nusing this:\n  sorted_list_of_set (dom (map_of l)) = map fst l\n\ngoal (1 subgoal):\n 1. map (\\<lambda>k. (k, the (map_of l k)))\n     (sorted_list_of_set (dom (map_of l))) =\n    map (\\<lambda>k. (k, the (map_of l k))) (map fst l)", "by simp"], ["proof (state)\nthis:\n  sorted_list_of_map (map_of l) =\n  map (\\<lambda>k. (k, the (map_of l k))) (map fst l)\n\ngoal (1 subgoal):\n 1. sorted_list_of_map (map_of l) = l", "also"], ["proof (state)\nthis:\n  sorted_list_of_map (map_of l) =\n  map (\\<lambda>k. (k, the (map_of l k))) (map fst l)\n\ngoal (1 subgoal):\n 1. sorted_list_of_map (map_of l) = l", "have \"\\<dots> = l\""], ["proof (prove)\ngoal (1 subgoal):\n 1. map (\\<lambda>k. (k, the (map_of l k))) (map fst l) = l", "using \\<open>distinct (map fst l)\\<close>"], ["proof (prove)\nusing this:\n  distinct (map fst l)\n\ngoal (1 subgoal):\n 1. map (\\<lambda>k. (k, the (map_of l k))) (map fst l) = l", "proof (induct l)"], ["proof (state)\ngoal (2 subgoals):\n 1. distinct (map fst []) \\<Longrightarrow>\n    map (\\<lambda>k. (k, the (map_of [] k))) (map fst []) = []\n 2. \\<And>a l.\n       \\<lbrakk>distinct (map fst l) \\<Longrightarrow>\n                map (\\<lambda>k. (k, the (map_of l k))) (map fst l) = l;\n        distinct (map fst (a # l))\\<rbrakk>\n       \\<Longrightarrow> map (\\<lambda>k. (k, the (map_of (a # l) k)))\n                          (map fst (a # l)) =\n                         a # l", "case Nil"], ["proof (state)\nthis:\n  distinct (map fst [])\n\ngoal (2 subgoals):\n 1. distinct (map fst []) \\<Longrightarrow>\n    map (\\<lambda>k. (k, the (map_of [] k))) (map fst []) = []\n 2. \\<And>a l.\n       \\<lbrakk>distinct (map fst l) \\<Longrightarrow>\n                map (\\<lambda>k. (k, the (map_of l k))) (map fst l) = l;\n        distinct (map fst (a # l))\\<rbrakk>\n       \\<Longrightarrow> map (\\<lambda>k. (k, the (map_of (a # l) k)))\n                          (map fst (a # l)) =\n                         a # l", "thus ?case"], ["proof (prove)\nusing this:\n  distinct (map fst [])\n\ngoal (1 subgoal):\n 1. map (\\<lambda>k. (k, the (map_of [] k))) (map fst []) = []", "by simp"], ["proof (state)\nthis:\n  map (\\<lambda>k. (k, the (map_of [] k))) (map fst []) = []\n\ngoal (1 subgoal):\n 1. \\<And>a l.\n       \\<lbrakk>distinct (map fst l) \\<Longrightarrow>\n                map (\\<lambda>k. (k, the (map_of l k))) (map fst l) = l;\n        distinct (map fst (a # l))\\<rbrakk>\n       \\<Longrightarrow> map (\\<lambda>k. (k, the (map_of (a # l) k)))\n                          (map fst (a # l)) =\n                         a # l", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a l.\n       \\<lbrakk>distinct (map fst l) \\<Longrightarrow>\n                map (\\<lambda>k. (k, the (map_of l k))) (map fst l) = l;\n        distinct (map fst (a # l))\\<rbrakk>\n       \\<Longrightarrow> map (\\<lambda>k. (k, the (map_of (a # l) k)))\n                          (map fst (a # l)) =\n                         a # l", "case (Cons a l)"], ["proof (state)\nthis:\n  distinct (map fst l) \\<Longrightarrow>\n  map (\\<lambda>k. (k, the (map_of l k))) (map fst l) = l\n  distinct (map fst (a # l))\n\ngoal (1 subgoal):\n 1. \\<And>a l.\n       \\<lbrakk>distinct (map fst l) \\<Longrightarrow>\n                map (\\<lambda>k. (k, the (map_of l k))) (map fst l) = l;\n        distinct (map fst (a # l))\\<rbrakk>\n       \\<Longrightarrow> map (\\<lambda>k. (k, the (map_of (a # l) k)))\n                          (map fst (a # l)) =\n                         a # l", "hence \n        1: \"distinct (map fst l)\" \n        and 2: \"fst a\\<notin>fst`set l\" \n        and 3: \"map (\\<lambda>k. (k, the (map_of l k))) (map fst l) = l\""], ["proof (prove)\nusing this:\n  distinct (map fst l) \\<Longrightarrow>\n  map (\\<lambda>k. (k, the (map_of l k))) (map fst l) = l\n  distinct (map fst (a # l))\n\ngoal (1 subgoal):\n 1. distinct (map fst l) &&&\n    fst a \\<notin> fst ` set l &&&\n    map (\\<lambda>k. (k, the (map_of l k))) (map fst l) = l", "by simp_all"], ["proof (state)\nthis:\n  distinct (map fst l)\n  fst a \\<notin> fst ` set l\n  map (\\<lambda>k. (k, the (map_of l k))) (map fst l) = l\n\ngoal (1 subgoal):\n 1. \\<And>a l.\n       \\<lbrakk>distinct (map fst l) \\<Longrightarrow>\n                map (\\<lambda>k. (k, the (map_of l k))) (map fst l) = l;\n        distinct (map fst (a # l))\\<rbrakk>\n       \\<Longrightarrow> map (\\<lambda>k. (k, the (map_of (a # l) k)))\n                          (map fst (a # l)) =\n                         a # l", "from 2"], ["proof (chain)\npicking this:\n  fst a \\<notin> fst ` set l", "have [simp]: \"\\<not>(\\<exists>x\\<in>set l. fst x = fst a)\""], ["proof (prove)\nusing this:\n  fst a \\<notin> fst ` set l\n\ngoal (1 subgoal):\n 1. \\<not> (\\<exists>x\\<in>set l. fst x = fst a)", "by (auto simp: image_iff)"], ["proof (state)\nthis:\n  \\<not> (\\<exists>x\\<in>set l. fst x = fst a)\n\ngoal (1 subgoal):\n 1. \\<And>a l.\n       \\<lbrakk>distinct (map fst l) \\<Longrightarrow>\n                map (\\<lambda>k. (k, the (map_of l k))) (map fst l) = l;\n        distinct (map fst (a # l))\\<rbrakk>\n       \\<Longrightarrow> map (\\<lambda>k. (k, the (map_of (a # l) k)))\n                          (map fst (a # l)) =\n                         a # l", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. map (\\<lambda>k. (k, the (map_of (a # l) k))) (map fst (a # l)) = a # l", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. map ((\\<lambda>k.\n             (k, the (if k = fst a then Some (snd a)\n                      else map_of l k))) \\<circ>\n         fst)\n     l =\n    l", "apply (subst (3) 3[symmetric])"], ["proof (prove)\ngoal (1 subgoal):\n 1. map ((\\<lambda>k.\n             (k, the (if k = fst a then Some (snd a)\n                      else map_of l k))) \\<circ>\n         fst)\n     l =\n    map (\\<lambda>k. (k, the (map_of l k))) (map fst l)", "apply simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  map (\\<lambda>k. (k, the (map_of (a # l) k))) (map fst (a # l)) = a # l\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  map (\\<lambda>k. (k, the (map_of l k))) (map fst l) = l\n\ngoal (1 subgoal):\n 1. sorted_list_of_map (map_of l) = l", "finally"], ["proof (chain)\npicking this:\n  sorted_list_of_map (map_of l) = l", "show ?thesis"], ["proof (prove)\nusing this:\n  sorted_list_of_map (map_of l) = l\n\ngoal (1 subgoal):\n 1. sorted_list_of_map (map_of l) = l", "."], ["proof (state)\nthis:\n  sorted_list_of_map (map_of l) = l\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma map_of_sorted_list_of_map[simp]:\n    assumes FIN: \"finite (dom m)\" \n    shows \"map_of (sorted_list_of_map m) = m\""], ["proof (prove)\ngoal (1 subgoal):\n 1. map_of (sorted_list_of_map m) = m", "unfolding sorted_list_of_map_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. map_of (map (\\<lambda>k. (k, the (m k))) (sorted_list_of_set (dom m))) =\n    m", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. map_of (map (\\<lambda>k. (k, the (m k))) (sorted_list_of_set (dom m))) =\n    m", "have \"set (sorted_list_of_set (dom m)) = dom m\"\n      and DIST: \"distinct (sorted_list_of_set (dom m))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set (sorted_list_of_set (dom m)) = dom m &&&\n    distinct (sorted_list_of_set (dom m))", "by (simp_all add: FIN)"], ["proof (state)\nthis:\n  set (sorted_list_of_set (dom m)) = dom m\n  distinct (sorted_list_of_set (dom m))\n\ngoal (1 subgoal):\n 1. map_of (map (\\<lambda>k. (k, the (m k))) (sorted_list_of_set (dom m))) =\n    m", "have [simp]: \"(fst \\<circ> (\\<lambda>k. (k, the (m k)))) = id\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fst \\<circ> (\\<lambda>k. (k, the (m k))) = id", "by auto"], ["proof (state)\nthis:\n  fst \\<circ> (\\<lambda>k. (k, the (m k))) = id\n\ngoal (1 subgoal):\n 1. map_of (map (\\<lambda>k. (k, the (m k))) (sorted_list_of_set (dom m))) =\n    m", "have [simp]: \"(\\<lambda>k. (k, the (m k))) ` dom m = map_to_set m\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>k. (k, the (m k))) ` dom m = map_to_set m", "by (auto simp: map_to_set_def)"], ["proof (state)\nthis:\n  (\\<lambda>k. (k, the (m k))) ` dom m = map_to_set m\n\ngoal (1 subgoal):\n 1. map_of (map (\\<lambda>k. (k, the (m k))) (sorted_list_of_set (dom m))) =\n    m", "show \"map_of (map (\\<lambda>k. (k, the (m k))) (sorted_list_of_set (dom m))) = m\""], ["proof (prove)\ngoal (1 subgoal):\n 1. map_of (map (\\<lambda>k. (k, the (m k))) (sorted_list_of_set (dom m))) =\n    m", "apply (subst set_to_map_set_is_map_of[symmetric])"], ["proof (prove)\ngoal (2 subgoals):\n 1. distinct\n     (map fst\n       (map (\\<lambda>k. (k, the (m k))) (sorted_list_of_set (dom m))))\n 2. set_to_map\n     (set (map (\\<lambda>k. (k, the (m k))) (sorted_list_of_set (dom m)))) =\n    m", "apply (simp add: DIST)"], ["proof (prove)\ngoal (1 subgoal):\n 1. set_to_map\n     (set (map (\\<lambda>k. (k, the (m k))) (sorted_list_of_set (dom m)))) =\n    m", "apply (subst set_map)"], ["proof (prove)\ngoal (1 subgoal):\n 1. set_to_map\n     ((\\<lambda>k. (k, the (m k))) ` set (sorted_list_of_set (dom m))) =\n    m", "apply (simp add: FIN map_to_set_inverse)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  map_of (map (\\<lambda>k. (k, the (m k))) (sorted_list_of_set (dom m))) = m\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma sorted_list_of_map_inj_aux:\n    fixes A B :: \"'a\\<rightharpoonup>'b\"\n    assumes [simp]: \"finite (dom A)\" \n    assumes [simp]: \"finite (dom B)\" \n    assumes E: \"sorted_list_of_map A = sorted_list_of_map B\"\n    shows \"A=B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A = B", "using assms"], ["proof (prove)\nusing this:\n  finite (dom A)\n  finite (dom B)\n  sorted_list_of_map A = sorted_list_of_map B\n\ngoal (1 subgoal):\n 1. A = B", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite (dom A); finite (dom B);\n     sorted_list_of_map A = sorted_list_of_map B\\<rbrakk>\n    \\<Longrightarrow> A = B", "have \"A = map_of (sorted_list_of_map A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A = map_of (sorted_list_of_map A)", "by simp"], ["proof (state)\nthis:\n  A = map_of (sorted_list_of_map A)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>finite (dom A); finite (dom B);\n     sorted_list_of_map A = sorted_list_of_map B\\<rbrakk>\n    \\<Longrightarrow> A = B", "also"], ["proof (state)\nthis:\n  A = map_of (sorted_list_of_map A)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>finite (dom A); finite (dom B);\n     sorted_list_of_map A = sorted_list_of_map B\\<rbrakk>\n    \\<Longrightarrow> A = B", "note E"], ["proof (state)\nthis:\n  sorted_list_of_map A = sorted_list_of_map B\n\ngoal (1 subgoal):\n 1. \\<lbrakk>finite (dom A); finite (dom B);\n     sorted_list_of_map A = sorted_list_of_map B\\<rbrakk>\n    \\<Longrightarrow> A = B", "also"], ["proof (state)\nthis:\n  sorted_list_of_map A = sorted_list_of_map B\n\ngoal (1 subgoal):\n 1. \\<lbrakk>finite (dom A); finite (dom B);\n     sorted_list_of_map A = sorted_list_of_map B\\<rbrakk>\n    \\<Longrightarrow> A = B", "have \"map_of (sorted_list_of_map B) = B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. map_of (sorted_list_of_map B) = B", "by simp"], ["proof (state)\nthis:\n  map_of (sorted_list_of_map B) = B\n\ngoal (1 subgoal):\n 1. \\<lbrakk>finite (dom A); finite (dom B);\n     sorted_list_of_map A = sorted_list_of_map B\\<rbrakk>\n    \\<Longrightarrow> A = B", "finally"], ["proof (chain)\npicking this:\n  A = B", "show ?thesis"], ["proof (prove)\nusing this:\n  A = B\n\ngoal (1 subgoal):\n 1. A = B", "."], ["proof (state)\nthis:\n  A = B\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma sorted_list_of_map_inj: \n    \"inj_on sorted_list_of_map (Collect (finite o dom))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. inj_on sorted_list_of_map (Collect (finite \\<circ> dom))", "apply (rule inj_onI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<in> Collect (finite \\<circ> dom);\n        y \\<in> Collect (finite \\<circ> dom);\n        sorted_list_of_map x = sorted_list_of_map y\\<rbrakk>\n       \\<Longrightarrow> x = y", "using sorted_list_of_map_inj_aux"], ["proof (prove)\nusing this:\n  \\<lbrakk>finite (dom ?A); finite (dom ?B);\n   sorted_list_of_map ?A = sorted_list_of_map ?B\\<rbrakk>\n  \\<Longrightarrow> ?A = ?B\n\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<in> Collect (finite \\<circ> dom);\n        y \\<in> Collect (finite \\<circ> dom);\n        sorted_list_of_map x = sorted_list_of_map y\\<rbrakk>\n       \\<Longrightarrow> x = y", "by auto"], ["", "end"], ["", "definition \"cmp_set cmp \\<equiv> \n  cmp_extend (Collect finite) (\n    cmp_img\n      (linorder.sorted_list_of_set (comp2le cmp)) \n      (cmp_lex cmp)\n  )\""], ["", "thm img_linorder"], ["", "lemma set_ord_linear[intro?]: \n  \"linorder cmp \\<Longrightarrow> linorder (cmp_set cmp)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. linorder cmp \\<Longrightarrow> linorder (cmp_set cmp)", "unfolding cmp_set_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. linorder cmp \\<Longrightarrow>\n    linorder\n     (cmp_extend (Collect finite)\n       (cmp_img (linorder.sorted_list_of_set (comp2le cmp)) (cmp_lex cmp)))", "apply rule"], ["proof (prove)\ngoal (1 subgoal):\n 1. linorder cmp \\<Longrightarrow>\n    linorder_on (Collect finite)\n     (cmp_img (linorder.sorted_list_of_set (comp2le cmp)) (cmp_lex cmp))", "apply rule"], ["proof (prove)\ngoal (1 subgoal):\n 1. linorder cmp \\<Longrightarrow>\n    linorder_on (linorder.sorted_list_of_set (comp2le cmp) ` Collect finite)\n     (cmp_lex cmp)", "apply (rule restrict_linorder)"], ["proof (prove)\ngoal (2 subgoals):\n 1. linorder cmp \\<Longrightarrow> linorder_on ?D4 (cmp_lex cmp)\n 2. linorder cmp \\<Longrightarrow>\n    linorder.sorted_list_of_set (comp2le cmp) ` Collect finite\n    \\<subseteq> ?D4", "apply (erule linorder_on.lex_linorder)"], ["proof (prove)\ngoal (1 subgoal):\n 1. linorder cmp \\<Longrightarrow>\n    linorder.sorted_list_of_set (comp2le cmp) ` Collect finite\n    \\<subseteq> lists UNIV", "apply simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "definition \"cmp_map cmpk cmpv \\<equiv>\n  cmp_extend (Collect (finite o dom)) (\n    cmp_img\n      (linorder.sorted_list_of_map (comp2le cmpk))\n      (cmp_lex (cmp_prod cmpk cmpv))\n  )\n\""], ["", "lemma map_to_set_inj[intro!]: \"inj map_to_set\""], ["proof (prove)\ngoal (1 subgoal):\n 1. inj map_to_set", "apply (rule inj_onI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<in> UNIV; y \\<in> UNIV;\n        map_to_set x = map_to_set y\\<rbrakk>\n       \\<Longrightarrow> x = y", "unfolding map_to_set_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<in> UNIV; y \\<in> UNIV;\n        {(k, v). x k = Some v} = {(k, v). y k = Some v}\\<rbrakk>\n       \\<Longrightarrow> x = y", "apply (rule ext)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x y xa.\n       \\<lbrakk>x \\<in> UNIV; y \\<in> UNIV;\n        {(k, v). x k = Some v} = {(k, v). y k = Some v}\\<rbrakk>\n       \\<Longrightarrow> x xa = y xa", "apply (case_tac \"x xa\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x y xa.\n       \\<lbrakk>x \\<in> UNIV; y \\<in> UNIV;\n        {(k, v). x k = Some v} = {(k, v). y k = Some v};\n        x xa = None\\<rbrakk>\n       \\<Longrightarrow> x xa = y xa\n 2. \\<And>x y xa a.\n       \\<lbrakk>x \\<in> UNIV; y \\<in> UNIV;\n        {(k, v). x k = Some v} = {(k, v). y k = Some v};\n        x xa = Some a\\<rbrakk>\n       \\<Longrightarrow> x xa = y xa", "apply (case_tac [!] \"y xa\")"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>x y xa.\n       \\<lbrakk>x \\<in> UNIV; y \\<in> UNIV;\n        {(k, v). x k = Some v} = {(k, v). y k = Some v}; x xa = None;\n        y xa = None\\<rbrakk>\n       \\<Longrightarrow> x xa = y xa\n 2. \\<And>x y xa a.\n       \\<lbrakk>x \\<in> UNIV; y \\<in> UNIV;\n        {(k, v). x k = Some v} = {(k, v). y k = Some v}; x xa = None;\n        y xa = Some a\\<rbrakk>\n       \\<Longrightarrow> x xa = y xa\n 3. \\<And>x y xa a.\n       \\<lbrakk>x \\<in> UNIV; y \\<in> UNIV;\n        {(k, v). x k = Some v} = {(k, v). y k = Some v}; x xa = Some a;\n        y xa = None\\<rbrakk>\n       \\<Longrightarrow> x xa = y xa\n 4. \\<And>x y xa a aa.\n       \\<lbrakk>x \\<in> UNIV; y \\<in> UNIV;\n        {(k, v). x k = Some v} = {(k, v). y k = Some v}; x xa = Some a;\n        y xa = Some aa\\<rbrakk>\n       \\<Longrightarrow> x xa = y xa", "apply force+"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "corollary map_to_set_inj'[intro!]: \"inj_on map_to_set S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. inj_on map_to_set S", "by (metis map_to_set_inj subset_UNIV subset_inj_on)"], ["", "lemma map_ord_linear[intro?]: \n  assumes A: \"linorder cmpk\" \n  assumes B: \"linorder cmpv\" \n  shows \"linorder (cmp_map cmpk cmpv)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. linorder (cmp_map cmpk cmpv)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. linorder (cmp_map cmpk cmpv)", "interpret lk: linorder_on UNIV cmpk"], ["proof (prove)\ngoal (1 subgoal):\n 1. linorder cmpk", "by fact"], ["proof (state)\ngoal (1 subgoal):\n 1. linorder (cmp_map cmpk cmpv)", "interpret lv: linorder_on UNIV cmpv"], ["proof (prove)\ngoal (1 subgoal):\n 1. linorder cmpv", "by fact"], ["proof (state)\ngoal (1 subgoal):\n 1. linorder (cmp_map cmpk cmpv)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. linorder (cmp_map cmpk cmpv)", "unfolding cmp_map_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. linorder\n     (cmp_extend (Collect (finite \\<circ> dom))\n       (cmp_img (linorder.sorted_list_of_map lk.le)\n         (cmp_lex (cmp_prod cmpk cmpv))))", "apply rule"], ["proof (prove)\ngoal (1 subgoal):\n 1. linorder_on (Collect (finite \\<circ> dom))\n     (cmp_img (linorder.sorted_list_of_map lk.le)\n       (cmp_lex (cmp_prod cmpk cmpv)))", "apply rule"], ["proof (prove)\ngoal (1 subgoal):\n 1. linorder_on\n     (linorder.sorted_list_of_map lk.le ` Collect (finite \\<circ> dom))\n     (cmp_lex (cmp_prod cmpk cmpv))", "apply (rule restrict_linorder)"], ["proof (prove)\ngoal (2 subgoals):\n 1. linorder_on ?D4 (cmp_lex (cmp_prod cmpk cmpv))\n 2. linorder.sorted_list_of_map lk.le ` Collect (finite \\<circ> dom)\n    \\<subseteq> ?D4", "apply (rule linorder_on.lex_linorder)"], ["proof (prove)\ngoal (2 subgoals):\n 1. linorder_on ?D7 (cmp_prod cmpk cmpv)\n 2. linorder.sorted_list_of_map lk.le ` Collect (finite \\<circ> dom)\n    \\<subseteq> lists ?D7", "apply (rule)"], ["proof (prove)\ngoal (3 subgoals):\n 1. linorder_on ?A9 cmpk\n 2. linorder_on ?B9 cmpv\n 3. linorder.sorted_list_of_map lk.le ` Collect (finite \\<circ> dom)\n    \\<subseteq> lists (?A9 \\<times> ?B9)", "apply fact"], ["proof (prove)\ngoal (2 subgoals):\n 1. linorder_on ?B9 cmpv\n 2. linorder.sorted_list_of_map lk.le ` Collect (finite \\<circ> dom)\n    \\<subseteq> lists (UNIV \\<times> ?B9)", "apply fact"], ["proof (prove)\ngoal (1 subgoal):\n 1. linorder.sorted_list_of_map lk.le ` Collect (finite \\<circ> dom)\n    \\<subseteq> lists (UNIV \\<times> UNIV)", "apply simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  linorder (cmp_map cmpk cmpv)\n\ngoal:\nNo subgoals!", "qed"], ["", "locale eq_linorder_on = linorder_on +\n  assumes cmp_imp_equal: \"\\<lbrakk>x\\<in>D; y\\<in>D\\<rbrakk> \\<Longrightarrow> cmp x y = EQUAL \\<Longrightarrow> x = y\"\nbegin"], ["", "lemma cmp_eq[simp]: \"\\<lbrakk>x\\<in>D; y\\<in>D\\<rbrakk> \\<Longrightarrow> cmp x y = EQUAL \\<longleftrightarrow> x = y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<in> D; y \\<in> D\\<rbrakk>\n    \\<Longrightarrow> (cmp x y = EQUAL) = (x = y)", "by (auto simp: cmp_imp_equal)"], ["", "end"], ["", "abbreviation \"eq_linorder \\<equiv> eq_linorder_on UNIV\""], ["", "lemma dflt_cmp_2inv[simp]: \n  \"dflt_cmp (comp2le cmp) (comp2lt cmp) = cmp\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dflt_cmp (comp2le cmp) (comp2lt cmp) = cmp", "unfolding dflt_cmp_def[abs_def] comp2le_def[abs_def] comp2lt_def[abs_def]"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>a b.\n        if case cmp a b of LESS \\<Rightarrow> True | _ \\<Rightarrow> False\n        then LESS\n        else if case cmp a b of GREATER \\<Rightarrow> False\n                | _ \\<Rightarrow> True\n             then EQUAL else GREATER) =\n    cmp", "apply (auto split: comp_res.splits intro!: ext)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in linorder) dflt_cmp_inv2[simp]:\n  shows \n  \"(comp2le (dflt_cmp (\\<le>) (<)))= (\\<le>)\"\n  \"(comp2lt (dflt_cmp (\\<le>) (<)))= (<)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. comp2le (dflt_cmp (\\<le>) (<)) = (\\<le>) &&&\n    comp2lt (dflt_cmp (\\<le>) (<)) = (<)", "proof -"], ["proof (state)\ngoal (2 subgoals):\n 1. comp2le (dflt_cmp (\\<le>) (<)) = (\\<le>)\n 2. comp2lt (dflt_cmp (\\<le>) (<)) = (<)", "show \"(comp2lt (dflt_cmp (\\<le>) (<)))= (<)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. comp2lt (dflt_cmp (\\<le>) (<)) = (<)", "unfolding dflt_cmp_def[abs_def] comp2le_def[abs_def] comp2lt_def[abs_def]"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>a b.\n        case if a < b then LESS else if a \\<le> b then EQUAL else GREATER of\n        LESS \\<Rightarrow> True | _ \\<Rightarrow> False) =\n    (<)", "apply (auto split: comp_res.splits intro!: ext)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  comp2lt (dflt_cmp (\\<le>) (<)) = (<)\n\ngoal (1 subgoal):\n 1. comp2le (dflt_cmp (\\<le>) (<)) = (\\<le>)", "show \"(comp2le (dflt_cmp (\\<le>) (<))) = (\\<le>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. comp2le (dflt_cmp (\\<le>) (<)) = (\\<le>)", "unfolding dflt_cmp_def[abs_def] comp2le_def[abs_def] comp2lt_def[abs_def]"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>a b.\n        case if a < b then LESS else if a \\<le> b then EQUAL else GREATER of\n        GREATER \\<Rightarrow> False | _ \\<Rightarrow> True) =\n    (\\<le>)", "apply (auto split: comp_res.splits intro!: ext)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  comp2le (dflt_cmp (\\<le>) (<)) = (\\<le>)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma eq_linorder_class_conv:\n  \"eq_linorder cmp \\<longleftrightarrow> class.linorder (comp2le cmp) (comp2lt cmp)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. eq_linorder cmp = class.linorder (comp2le cmp) (comp2lt cmp)", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. eq_linorder cmp \\<Longrightarrow>\n    class.linorder (comp2le cmp) (comp2lt cmp)\n 2. class.linorder (comp2le cmp) (comp2lt cmp) \\<Longrightarrow>\n    eq_linorder cmp", "assume \"eq_linorder cmp\""], ["proof (state)\nthis:\n  eq_linorder cmp\n\ngoal (2 subgoals):\n 1. eq_linorder cmp \\<Longrightarrow>\n    class.linorder (comp2le cmp) (comp2lt cmp)\n 2. class.linorder (comp2le cmp) (comp2lt cmp) \\<Longrightarrow>\n    eq_linorder cmp", "then"], ["proof (chain)\npicking this:\n  eq_linorder cmp", "interpret eq_linorder_on UNIV cmp"], ["proof (prove)\nusing this:\n  eq_linorder cmp\n\ngoal (1 subgoal):\n 1. eq_linorder cmp", "."], ["proof (state)\ngoal (2 subgoals):\n 1. eq_linorder cmp \\<Longrightarrow> class.linorder le lt\n 2. class.linorder le lt \\<Longrightarrow> eq_linorder cmp", "have \"linorder cmp\""], ["proof (prove)\ngoal (1 subgoal):\n 1. linorder cmp", "by unfold_locales"], ["proof (state)\nthis:\n  linorder cmp\n\ngoal (2 subgoals):\n 1. eq_linorder cmp \\<Longrightarrow> class.linorder le lt\n 2. class.linorder le lt \\<Longrightarrow> eq_linorder cmp", "show \"class.linorder (comp2le cmp) (comp2lt cmp)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. class.linorder le lt", "apply (rule linorder_to_class)"], ["proof (prove)\ngoal (2 subgoals):\n 1. linorder cmp\n 2. \\<And>x y. cmp x y = EQUAL \\<Longrightarrow> x = y", "apply fact"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x y. cmp x y = EQUAL \\<Longrightarrow> x = y", "by simp"], ["proof (state)\nthis:\n  class.linorder le lt\n\ngoal (1 subgoal):\n 1. class.linorder le lt \\<Longrightarrow> eq_linorder cmp", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. class.linorder (comp2le cmp) (comp2lt cmp) \\<Longrightarrow>\n    eq_linorder cmp", "assume \"class.linorder (comp2le cmp) (comp2lt cmp)\""], ["proof (state)\nthis:\n  class.linorder (comp2le cmp) (comp2lt cmp)\n\ngoal (1 subgoal):\n 1. class.linorder (comp2le cmp) (comp2lt cmp) \\<Longrightarrow>\n    eq_linorder cmp", "then"], ["proof (chain)\npicking this:\n  class.linorder (comp2le cmp) (comp2lt cmp)", "interpret linorder \"comp2le cmp\" \"comp2lt cmp\""], ["proof (prove)\nusing this:\n  class.linorder (comp2le cmp) (comp2lt cmp)\n\ngoal (1 subgoal):\n 1. class.linorder (comp2le cmp) (comp2lt cmp)", "."], ["proof (state)\ngoal (1 subgoal):\n 1. class.linorder (comp2le cmp) (comp2lt cmp) \\<Longrightarrow>\n    eq_linorder cmp", "from class_to_linorder"], ["proof (chain)\npicking this:\n  linorder (dflt_cmp (comp2le cmp) (comp2lt cmp))", "interpret linorder_on UNIV cmp"], ["proof (prove)\nusing this:\n  linorder (dflt_cmp (comp2le cmp) (comp2lt cmp))\n\ngoal (1 subgoal):\n 1. linorder cmp", "by simp"], ["proof (state)\ngoal (1 subgoal):\n 1. class.linorder le lt \\<Longrightarrow> eq_linorder cmp", "show \"eq_linorder cmp\""], ["proof (prove)\ngoal (1 subgoal):\n 1. eq_linorder cmp", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<in> UNIV; y \\<in> UNIV; cmp x y = EQUAL\\<rbrakk>\n       \\<Longrightarrow> x = y", "fix x y"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<in> UNIV; y \\<in> UNIV; cmp x y = EQUAL\\<rbrakk>\n       \\<Longrightarrow> x = y", "assume \"cmp x y = EQUAL\""], ["proof (state)\nthis:\n  cmp x y = EQUAL\n\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<in> UNIV; y \\<in> UNIV; cmp x y = EQUAL\\<rbrakk>\n       \\<Longrightarrow> x = y", "hence \"comp2le cmp x y\" \"\\<not>comp2lt cmp x y\""], ["proof (prove)\nusing this:\n  cmp x y = EQUAL\n\ngoal (1 subgoal):\n 1. le x y &&& \\<not> lt x y", "by (auto simp: comp2le_def comp2lt_def)"], ["proof (state)\nthis:\n  le x y\n  \\<not> lt x y\n\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<in> UNIV; y \\<in> UNIV; cmp x y = EQUAL\\<rbrakk>\n       \\<Longrightarrow> x = y", "thus \"x=y\""], ["proof (prove)\nusing this:\n  le x y\n  \\<not> lt x y\n\ngoal (1 subgoal):\n 1. x = y", "by simp"], ["proof (state)\nthis:\n  x = y\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  eq_linorder cmp\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma (in linorder) class_to_eq_linorder:\n  \"eq_linorder (dflt_cmp (\\<le>) (<))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. eq_linorder (dflt_cmp (\\<le>) (<))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. eq_linorder (dflt_cmp (\\<le>) (<))", "interpret linorder_on UNIV \"dflt_cmp (\\<le>) (<)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. linorder (dflt_cmp (\\<le>) (<))", "by (rule class_to_linorder)"], ["proof (state)\ngoal (1 subgoal):\n 1. eq_linorder (dflt_cmp (\\<le>) (<))", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. eq_linorder (dflt_cmp (\\<le>) (<))", "apply unfold_locales"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<in> UNIV; y \\<in> UNIV;\n        dflt_cmp (\\<le>) (<) x y = EQUAL\\<rbrakk>\n       \\<Longrightarrow> x = y", "apply (auto simp: dflt_cmp_def split: if_split_asm)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  eq_linorder (dflt_cmp (\\<le>) (<))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma eq_linorder_comp2eq_eq: \n  assumes \"eq_linorder cmp\"\n  shows \"comp2eq cmp = (=)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. comp2eq cmp = (=)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. comp2eq cmp = (=)", "interpret eq_linorder_on UNIV cmp"], ["proof (prove)\ngoal (1 subgoal):\n 1. eq_linorder cmp", "by fact"], ["proof (state)\ngoal (1 subgoal):\n 1. comp2eq cmp = (=)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. comp2eq cmp = (=)", "apply (intro ext)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x xa. comp2eq cmp x xa = (x = xa)", "unfolding comp2eq_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x xa.\n       (case cmp x xa of EQUAL \\<Rightarrow> True | _ \\<Rightarrow> False) =\n       (x = xa)", "apply (auto split: comp_res.split dest: refl)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  comp2eq cmp = (=)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma restrict_eq_linorder: \n  assumes \"eq_linorder_on D cmp\" \n  assumes S: \"D'\\<subseteq>D\" \n  shows \"eq_linorder_on D' cmp\""], ["proof (prove)\ngoal (1 subgoal):\n 1. eq_linorder_on D' cmp", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. eq_linorder_on D' cmp", "interpret eq_linorder_on D cmp"], ["proof (prove)\ngoal (1 subgoal):\n 1. eq_linorder_on D cmp", "by fact"], ["proof (state)\ngoal (1 subgoal):\n 1. eq_linorder_on D' cmp", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. eq_linorder_on D' cmp", "apply (rule eq_linorder_on.intro)"], ["proof (prove)\ngoal (2 subgoals):\n 1. linorder_on D' cmp\n 2. eq_linorder_on_axioms D' cmp", "apply (rule restrict_linorder[where D=D])"], ["proof (prove)\ngoal (3 subgoals):\n 1. linorder_on D cmp\n 2. D' \\<subseteq> D\n 3. eq_linorder_on_axioms D' cmp", "apply unfold_locales []"], ["proof (prove)\ngoal (2 subgoals):\n 1. D' \\<subseteq> D\n 2. eq_linorder_on_axioms D' cmp", "apply fact"], ["proof (prove)\ngoal (1 subgoal):\n 1. eq_linorder_on_axioms D' cmp", "apply unfold_locales"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<in> D'; y \\<in> D'; cmp x y = EQUAL\\<rbrakk>\n       \\<Longrightarrow> x = y", "using S"], ["proof (prove)\nusing this:\n  D' \\<subseteq> D\n\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<in> D'; y \\<in> D'; cmp x y = EQUAL\\<rbrakk>\n       \\<Longrightarrow> x = y", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<in> D'; y \\<in> D'; cmp x y = EQUAL;\n        D' \\<subseteq> D\\<rbrakk>\n       \\<Longrightarrow> x = y", "apply (drule (1) rev_subsetD)+"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>cmp x y = EQUAL; D' \\<subseteq> D; x \\<in> D;\n        y \\<in> D\\<rbrakk>\n       \\<Longrightarrow> x = y", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  eq_linorder_on D' cmp\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma combine_eq_linorder[intro?]:\n  assumes A: \"eq_linorder_on D1 cmp1\"\n  assumes B: \"eq_linorder_on D2 cmp2\"\n  assumes EQ: \"D=D1\\<union>D2\"\n  shows \"eq_linorder_on D (cmp_combine D1 cmp1 D2 cmp2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. eq_linorder_on D (cmp_combine D1 cmp1 D2 cmp2)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. eq_linorder_on D (cmp_combine D1 cmp1 D2 cmp2)", "interpret A: eq_linorder_on D1 cmp1"], ["proof (prove)\ngoal (1 subgoal):\n 1. eq_linorder_on D1 cmp1", "by fact"], ["proof (state)\ngoal (1 subgoal):\n 1. eq_linorder_on D (cmp_combine D1 cmp1 D2 cmp2)", "interpret B: eq_linorder_on D2 cmp2"], ["proof (prove)\ngoal (1 subgoal):\n 1. eq_linorder_on D2 cmp2", "by fact"], ["proof (state)\ngoal (1 subgoal):\n 1. eq_linorder_on D (cmp_combine D1 cmp1 D2 cmp2)", "interpret linorder_on \"(D1 \\<union> D2)\" \"(cmp_combine D1 cmp1 D2 cmp2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. linorder_on (D1 \\<union> D2) (cmp_combine D1 cmp1 D2 cmp2)", "apply rule"], ["proof (prove)\ngoal (3 subgoals):\n 1. linorder_on D1 cmp1\n 2. linorder_on D2 cmp2\n 3. D1 \\<union> D2 = D1 \\<union> D2", "apply unfold_locales"], ["proof (prove)\ngoal (1 subgoal):\n 1. D1 \\<union> D2 = D1 \\<union> D2", "by simp"], ["proof (state)\ngoal (1 subgoal):\n 1. eq_linorder_on D (cmp_combine D1 cmp1 D2 cmp2)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. eq_linorder_on D (cmp_combine D1 cmp1 D2 cmp2)", "apply (simp only: EQ)"], ["proof (prove)\ngoal (1 subgoal):\n 1. eq_linorder_on (D1 \\<union> D2) (cmp_combine D1 cmp1 D2 cmp2)", "apply unfold_locales"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<in> D1 \\<union> D2; y \\<in> D1 \\<union> D2;\n        cmp_combine D1 cmp1 D2 cmp2 x y = EQUAL\\<rbrakk>\n       \\<Longrightarrow> x = y", "unfolding cmp_combine_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<in> D1 \\<union> D2; y \\<in> D1 \\<union> D2;\n        (if x \\<in> D1 \\<and> y \\<in> D1 then cmp1 x y\n         else if x \\<in> D1 \\<and> y \\<in> D2 then LESS\n              else if x \\<in> D2 \\<and> y \\<in> D1 then GREATER\n                   else cmp2 x y) =\n        EQUAL\\<rbrakk>\n       \\<Longrightarrow> x = y", "by (auto split: if_split_asm)"], ["proof (state)\nthis:\n  eq_linorder_on D (cmp_combine D1 cmp1 D2 cmp2)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma img_eq_linorder[intro?]:\n  assumes A: \"eq_linorder_on (f`D) cmp\"\n  assumes INJ: \"inj_on f D\"\n  shows \"eq_linorder_on D (cmp_img f cmp)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. eq_linorder_on D (cmp_img f cmp)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. eq_linorder_on D (cmp_img f cmp)", "interpret eq_linorder_on \"f`D\" cmp"], ["proof (prove)\ngoal (1 subgoal):\n 1. eq_linorder_on (f ` D) cmp", "by fact"], ["proof (state)\ngoal (1 subgoal):\n 1. eq_linorder_on D (cmp_img f cmp)", "interpret L: linorder_on \"(D)\" \"(cmp_img f cmp)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. linorder_on D (cmp_img f cmp)", "apply rule"], ["proof (prove)\ngoal (1 subgoal):\n 1. linorder_on (f ` D) cmp", "apply unfold_locales"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\ngoal (1 subgoal):\n 1. eq_linorder_on D (cmp_img f cmp)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. eq_linorder_on D (cmp_img f cmp)", "apply unfold_locales"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<in> D; y \\<in> D; cmp_img f cmp x y = EQUAL\\<rbrakk>\n       \\<Longrightarrow> x = y", "unfolding cmp_img_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<in> D; y \\<in> D; cmp (f x) (f y) = EQUAL\\<rbrakk>\n       \\<Longrightarrow> x = y", "using INJ"], ["proof (prove)\nusing this:\n  inj_on f D\n\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<in> D; y \\<in> D; cmp (f x) (f y) = EQUAL\\<rbrakk>\n       \\<Longrightarrow> x = y", "apply (auto dest: inj_onD)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  eq_linorder_on D (cmp_img f cmp)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma univ_eq_linorder[intro?]:\n  shows \"eq_linorder univ_cmp\""], ["proof (prove)\ngoal (1 subgoal):\n 1. eq_linorder univ_cmp", "apply (rule eq_linorder_on.intro)"], ["proof (prove)\ngoal (2 subgoals):\n 1. linorder univ_cmp\n 2. eq_linorder_on_axioms UNIV univ_cmp", "apply rule"], ["proof (prove)\ngoal (1 subgoal):\n 1. eq_linorder_on_axioms UNIV univ_cmp", "apply unfold_locales"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<in> UNIV; y \\<in> UNIV; univ_cmp x y = EQUAL\\<rbrakk>\n       \\<Longrightarrow> x = y", "unfolding univ_cmp_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<in> UNIV; y \\<in> UNIV;\n        (if x = y then EQUAL\n         else if (x, y) \\<in> univ_order_rel then LESS else GREATER) =\n        EQUAL\\<rbrakk>\n       \\<Longrightarrow> x = y", "apply (auto split: if_split_asm)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma extend_eq_linorder[intro?]:\n  assumes \"eq_linorder_on D cmp\"\n  shows \"eq_linorder (cmp_extend D cmp)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. eq_linorder (cmp_extend D cmp)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. eq_linorder (cmp_extend D cmp)", "interpret eq_linorder_on D cmp"], ["proof (prove)\ngoal (1 subgoal):\n 1. eq_linorder_on D cmp", "by fact"], ["proof (state)\ngoal (1 subgoal):\n 1. eq_linorder (cmp_extend D cmp)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. eq_linorder (cmp_extend D cmp)", "unfolding cmp_extend_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. eq_linorder (cmp_combine D cmp UNIV univ_cmp)", "apply (rule)"], ["proof (prove)\ngoal (3 subgoals):\n 1. eq_linorder_on D cmp\n 2. eq_linorder univ_cmp\n 3. UNIV = D \\<union> UNIV", "apply fact"], ["proof (prove)\ngoal (2 subgoals):\n 1. eq_linorder univ_cmp\n 2. UNIV = D \\<union> UNIV", "apply rule"], ["proof (prove)\ngoal (1 subgoal):\n 1. UNIV = D \\<union> UNIV", "by simp"], ["proof (state)\nthis:\n  eq_linorder (cmp_extend D cmp)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma lex_eq_linorder[intro?]:\n  assumes \"eq_linorder_on D cmp\"\n  shows \"eq_linorder_on (lists D) (cmp_lex cmp)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. eq_linorder_on (lists D) (cmp_lex cmp)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. eq_linorder_on (lists D) (cmp_lex cmp)", "interpret eq_linorder_on D cmp"], ["proof (prove)\ngoal (1 subgoal):\n 1. eq_linorder_on D cmp", "by fact"], ["proof (state)\ngoal (1 subgoal):\n 1. eq_linorder_on (lists D) (cmp_lex cmp)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. eq_linorder_on (lists D) (cmp_lex cmp)", "apply (rule eq_linorder_on.intro)"], ["proof (prove)\ngoal (2 subgoals):\n 1. linorder_on (lists D) (cmp_lex cmp)\n 2. eq_linorder_on_axioms (lists D) (cmp_lex cmp)", "apply rule"], ["proof (prove)\ngoal (1 subgoal):\n 1. eq_linorder_on_axioms (lists D) (cmp_lex cmp)", "apply unfold_locales"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<in> lists D; y \\<in> lists D;\n        cmp_lex cmp x y = EQUAL\\<rbrakk>\n       \\<Longrightarrow> x = y", "subgoal for l m"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>l \\<in> lists D; m \\<in> lists D;\n     cmp_lex cmp l m = EQUAL\\<rbrakk>\n    \\<Longrightarrow> l = m", "apply (induct cmp\\<equiv>cmp l m rule: cmp_lex.induct)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<lbrakk>[] \\<in> lists D; [] \\<in> lists D;\n     cmp_lex cmp [] [] = EQUAL\\<rbrakk>\n    \\<Longrightarrow> [] = []\n 2. \\<And>v va.\n       \\<lbrakk>[] \\<in> lists D; v # va \\<in> lists D;\n        cmp_lex cmp [] (v # va) = EQUAL\\<rbrakk>\n       \\<Longrightarrow> [] = v # va\n 3. \\<And>v va.\n       \\<lbrakk>v # va \\<in> lists D; [] \\<in> lists D;\n        cmp_lex cmp (v # va) [] = EQUAL\\<rbrakk>\n       \\<Longrightarrow> v # va = []\n 4. \\<And>a l b m.\n       \\<lbrakk>\\<lbrakk>cmp a b = EQUAL; l \\<in> lists D; m \\<in> lists D;\n                 cmp_lex cmp l m = EQUAL\\<rbrakk>\n                \\<Longrightarrow> l = m;\n        a # l \\<in> lists D; b # m \\<in> lists D;\n        cmp_lex cmp (a # l) (b # m) = EQUAL\\<rbrakk>\n       \\<Longrightarrow> a # l = b # m", "apply (auto split: comp_res.splits)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  eq_linorder_on (lists D) (cmp_lex cmp)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma prod_eq_linorder[intro?]:\n  assumes \"eq_linorder_on D1 cmp1\"\n  assumes \"eq_linorder_on D2 cmp2\"\n  shows \"eq_linorder_on (D1\\<times>D2) (cmp_prod cmp1 cmp2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. eq_linorder_on (D1 \\<times> D2) (cmp_prod cmp1 cmp2)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. eq_linorder_on (D1 \\<times> D2) (cmp_prod cmp1 cmp2)", "interpret A: eq_linorder_on D1 cmp1"], ["proof (prove)\ngoal (1 subgoal):\n 1. eq_linorder_on D1 cmp1", "by fact"], ["proof (state)\ngoal (1 subgoal):\n 1. eq_linorder_on (D1 \\<times> D2) (cmp_prod cmp1 cmp2)", "interpret B: eq_linorder_on D2 cmp2"], ["proof (prove)\ngoal (1 subgoal):\n 1. eq_linorder_on D2 cmp2", "by fact"], ["proof (state)\ngoal (1 subgoal):\n 1. eq_linorder_on (D1 \\<times> D2) (cmp_prod cmp1 cmp2)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. eq_linorder_on (D1 \\<times> D2) (cmp_prod cmp1 cmp2)", "apply (rule eq_linorder_on.intro)"], ["proof (prove)\ngoal (2 subgoals):\n 1. linorder_on (D1 \\<times> D2) (cmp_prod cmp1 cmp2)\n 2. eq_linorder_on_axioms (D1 \\<times> D2) (cmp_prod cmp1 cmp2)", "apply rule"], ["proof (prove)\ngoal (3 subgoals):\n 1. linorder_on D1 cmp1\n 2. linorder_on D2 cmp2\n 3. eq_linorder_on_axioms (D1 \\<times> D2) (cmp_prod cmp1 cmp2)", "apply unfold_locales"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<in> D1 \\<times> D2; y \\<in> D1 \\<times> D2;\n        cmp_prod cmp1 cmp2 x y = EQUAL\\<rbrakk>\n       \\<Longrightarrow> x = y", "apply (auto split: comp_res.splits)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  eq_linorder_on (D1 \\<times> D2) (cmp_prod cmp1 cmp2)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma set_ord_eq_linorder[intro?]: \n  \"eq_linorder cmp \\<Longrightarrow> eq_linorder (cmp_set cmp)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. eq_linorder cmp \\<Longrightarrow> eq_linorder (cmp_set cmp)", "unfolding cmp_set_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. eq_linorder cmp \\<Longrightarrow>\n    eq_linorder\n     (cmp_extend (Collect finite)\n       (cmp_img (linorder.sorted_list_of_set (comp2le cmp)) (cmp_lex cmp)))", "apply rule"], ["proof (prove)\ngoal (1 subgoal):\n 1. eq_linorder cmp \\<Longrightarrow>\n    eq_linorder_on (Collect finite)\n     (cmp_img (linorder.sorted_list_of_set (comp2le cmp)) (cmp_lex cmp))", "apply rule"], ["proof (prove)\ngoal (2 subgoals):\n 1. eq_linorder cmp \\<Longrightarrow>\n    eq_linorder_on\n     (linorder.sorted_list_of_set (comp2le cmp) ` Collect finite)\n     (cmp_lex cmp)\n 2. eq_linorder cmp \\<Longrightarrow>\n    inj_on (linorder.sorted_list_of_set (comp2le cmp)) (Collect finite)", "apply (rule restrict_eq_linorder)"], ["proof (prove)\ngoal (3 subgoals):\n 1. eq_linorder cmp \\<Longrightarrow> eq_linorder_on ?D5 (cmp_lex cmp)\n 2. eq_linorder cmp \\<Longrightarrow>\n    linorder.sorted_list_of_set (comp2le cmp) ` Collect finite\n    \\<subseteq> ?D5\n 3. eq_linorder cmp \\<Longrightarrow>\n    inj_on (linorder.sorted_list_of_set (comp2le cmp)) (Collect finite)", "apply rule"], ["proof (prove)\ngoal (3 subgoals):\n 1. eq_linorder cmp \\<Longrightarrow> eq_linorder_on ?D8 cmp\n 2. eq_linorder cmp \\<Longrightarrow>\n    linorder.sorted_list_of_set (comp2le cmp) ` Collect finite\n    \\<subseteq> lists ?D8\n 3. eq_linorder cmp \\<Longrightarrow>\n    inj_on (linorder.sorted_list_of_set (comp2le cmp)) (Collect finite)", "apply assumption"], ["proof (prove)\ngoal (2 subgoals):\n 1. eq_linorder cmp \\<Longrightarrow>\n    linorder.sorted_list_of_set (comp2le cmp) ` Collect finite\n    \\<subseteq> lists UNIV\n 2. eq_linorder cmp \\<Longrightarrow>\n    inj_on (linorder.sorted_list_of_set (comp2le cmp)) (Collect finite)", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. eq_linorder cmp \\<Longrightarrow>\n    inj_on (linorder.sorted_list_of_set (comp2le cmp)) (Collect finite)", "apply (rule linorder.sorted_list_of_set_inj)"], ["proof (prove)\ngoal (1 subgoal):\n 1. eq_linorder cmp \\<Longrightarrow> class.linorder (comp2le cmp) ?less10", "apply (subst (asm) eq_linorder_class_conv)"], ["proof (prove)\ngoal (1 subgoal):\n 1. class.linorder (comp2le cmp) (comp2lt cmp) \\<Longrightarrow>\n    class.linorder (comp2le cmp) ?less10", "."], ["", "lemma map_ord_eq_linorder[intro?]: \n  \"\\<lbrakk>eq_linorder cmpk; eq_linorder cmpv\\<rbrakk> \\<Longrightarrow> eq_linorder (cmp_map cmpk cmpv)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>eq_linorder cmpk; eq_linorder cmpv\\<rbrakk>\n    \\<Longrightarrow> eq_linorder (cmp_map cmpk cmpv)", "unfolding cmp_map_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>eq_linorder cmpk; eq_linorder cmpv\\<rbrakk>\n    \\<Longrightarrow> eq_linorder\n                       (cmp_extend (Collect (finite \\<circ> dom))\n                         (cmp_img\n                           (linorder.sorted_list_of_map (comp2le cmpk))\n                           (cmp_lex (cmp_prod cmpk cmpv))))", "apply rule"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>eq_linorder cmpk; eq_linorder cmpv\\<rbrakk>\n    \\<Longrightarrow> eq_linorder_on (Collect (finite \\<circ> dom))\n                       (cmp_img (linorder.sorted_list_of_map (comp2le cmpk))\n                         (cmp_lex (cmp_prod cmpk cmpv)))", "apply rule"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>eq_linorder cmpk; eq_linorder cmpv\\<rbrakk>\n    \\<Longrightarrow> eq_linorder_on\n                       (linorder.sorted_list_of_map (comp2le cmpk) `\n                        Collect (finite \\<circ> dom))\n                       (cmp_lex (cmp_prod cmpk cmpv))\n 2. \\<lbrakk>eq_linorder cmpk; eq_linorder cmpv\\<rbrakk>\n    \\<Longrightarrow> inj_on (linorder.sorted_list_of_map (comp2le cmpk))\n                       (Collect (finite \\<circ> dom))", "apply (rule restrict_eq_linorder)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>eq_linorder cmpk; eq_linorder cmpv\\<rbrakk>\n    \\<Longrightarrow> eq_linorder_on ?D5 (cmp_lex (cmp_prod cmpk cmpv))\n 2. \\<lbrakk>eq_linorder cmpk; eq_linorder cmpv\\<rbrakk>\n    \\<Longrightarrow> linorder.sorted_list_of_map (comp2le cmpk) `\n                      Collect (finite \\<circ> dom)\n                      \\<subseteq> ?D5\n 3. \\<lbrakk>eq_linorder cmpk; eq_linorder cmpv\\<rbrakk>\n    \\<Longrightarrow> inj_on (linorder.sorted_list_of_map (comp2le cmpk))\n                       (Collect (finite \\<circ> dom))", "apply rule"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>eq_linorder cmpk; eq_linorder cmpv\\<rbrakk>\n    \\<Longrightarrow> eq_linorder_on ?D8 (cmp_prod cmpk cmpv)\n 2. \\<lbrakk>eq_linorder cmpk; eq_linorder cmpv\\<rbrakk>\n    \\<Longrightarrow> linorder.sorted_list_of_map (comp2le cmpk) `\n                      Collect (finite \\<circ> dom)\n                      \\<subseteq> lists ?D8\n 3. \\<lbrakk>eq_linorder cmpk; eq_linorder cmpv\\<rbrakk>\n    \\<Longrightarrow> inj_on (linorder.sorted_list_of_map (comp2le cmpk))\n                       (Collect (finite \\<circ> dom))", "apply rule"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<lbrakk>eq_linorder cmpk; eq_linorder cmpv\\<rbrakk>\n    \\<Longrightarrow> eq_linorder_on ?D1.10 cmpk\n 2. \\<lbrakk>eq_linorder cmpk; eq_linorder cmpv\\<rbrakk>\n    \\<Longrightarrow> eq_linorder_on ?D2.10 cmpv\n 3. \\<lbrakk>eq_linorder cmpk; eq_linorder cmpv\\<rbrakk>\n    \\<Longrightarrow> linorder.sorted_list_of_map (comp2le cmpk) `\n                      Collect (finite \\<circ> dom)\n                      \\<subseteq> lists (?D1.10 \\<times> ?D2.10)\n 4. \\<lbrakk>eq_linorder cmpk; eq_linorder cmpv\\<rbrakk>\n    \\<Longrightarrow> inj_on (linorder.sorted_list_of_map (comp2le cmpk))\n                       (Collect (finite \\<circ> dom))", "apply assumption"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>eq_linorder cmpk; eq_linorder cmpv\\<rbrakk>\n    \\<Longrightarrow> eq_linorder_on ?D2.10 cmpv\n 2. \\<lbrakk>eq_linorder cmpk; eq_linorder cmpv\\<rbrakk>\n    \\<Longrightarrow> linorder.sorted_list_of_map (comp2le cmpk) `\n                      Collect (finite \\<circ> dom)\n                      \\<subseteq> lists (UNIV \\<times> ?D2.10)\n 3. \\<lbrakk>eq_linorder cmpk; eq_linorder cmpv\\<rbrakk>\n    \\<Longrightarrow> inj_on (linorder.sorted_list_of_map (comp2le cmpk))\n                       (Collect (finite \\<circ> dom))", "apply assumption"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>eq_linorder cmpk; eq_linorder cmpv\\<rbrakk>\n    \\<Longrightarrow> linorder.sorted_list_of_map (comp2le cmpk) `\n                      Collect (finite \\<circ> dom)\n                      \\<subseteq> lists (UNIV \\<times> UNIV)\n 2. \\<lbrakk>eq_linorder cmpk; eq_linorder cmpv\\<rbrakk>\n    \\<Longrightarrow> inj_on (linorder.sorted_list_of_map (comp2le cmpk))\n                       (Collect (finite \\<circ> dom))", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>eq_linorder cmpk; eq_linorder cmpv\\<rbrakk>\n    \\<Longrightarrow> inj_on (linorder.sorted_list_of_map (comp2le cmpk))\n                       (Collect (finite \\<circ> dom))", "apply (rule linorder.sorted_list_of_map_inj)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>eq_linorder cmpk; eq_linorder cmpv\\<rbrakk>\n    \\<Longrightarrow> class.linorder (comp2le cmpk) ?less13", "apply (subst (asm) eq_linorder_class_conv)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>class.linorder (comp2le cmpk) (comp2lt cmpk);\n     eq_linorder cmpv\\<rbrakk>\n    \\<Longrightarrow> class.linorder (comp2le cmpk) ?less13", "."], ["", "definition cmp_unit :: \"unit \\<Rightarrow> unit \\<Rightarrow> comp_res\" \n  where [simp]: \"cmp_unit u v \\<equiv> EQUAL\""], ["", "lemma cmp_unit_eq_linorder:\n  \"eq_linorder cmp_unit\""], ["proof (prove)\ngoal (1 subgoal):\n 1. eq_linorder cmp_unit", "by unfold_locales simp_all"], ["", "subsection \\<open>Parametricity\\<close>"], ["", "lemma param_cmp_extend[param]:\n  assumes \"(cmp,cmp')\\<in>R \\<rightarrow> R \\<rightarrow> Id\"\n  assumes \"Range R \\<subseteq> D\"\n  shows \"(cmp,cmp_extend D cmp') \\<in> R \\<rightarrow> R \\<rightarrow> Id\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (cmp, cmp_extend D cmp')\n    \\<in> R \\<rightarrow> R \\<rightarrow> comp_res_rel", "unfolding cmp_extend_def cmp_combine_def[abs_def]"], ["proof (prove)\ngoal (1 subgoal):\n 1. (cmp,\n     \\<lambda>a b.\n        if a \\<in> D \\<and> b \\<in> D then cmp' a b\n        else if a \\<in> D \\<and> b \\<in> UNIV then LESS\n             else if a \\<in> UNIV \\<and> b \\<in> D then GREATER\n                  else univ_cmp a b)\n    \\<in> R \\<rightarrow> R \\<rightarrow> comp_res_rel", "using assms"], ["proof (prove)\nusing this:\n  (cmp, cmp') \\<in> R \\<rightarrow> R \\<rightarrow> comp_res_rel\n  Range R \\<subseteq> D\n\ngoal (1 subgoal):\n 1. (cmp,\n     \\<lambda>a b.\n        if a \\<in> D \\<and> b \\<in> D then cmp' a b\n        else if a \\<in> D \\<and> b \\<in> UNIV then LESS\n             else if a \\<in> UNIV \\<and> b \\<in> D then GREATER\n                  else univ_cmp a b)\n    \\<in> R \\<rightarrow> R \\<rightarrow> comp_res_rel", "apply clarsimp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a a' aa a'a.\n       \\<lbrakk>(cmp, cmp')\n                \\<in> R \\<rightarrow> R \\<rightarrow> comp_res_rel;\n        Range R \\<subseteq> D; (a, a') \\<in> R; (aa, a'a) \\<in> R\\<rbrakk>\n       \\<Longrightarrow> (a'a \\<in> D \\<longrightarrow>\n                          (a' \\<in> D \\<longrightarrow>\n                           cmp a aa = cmp' a' a'a) \\<and>\n                          (a' \\<notin> D \\<longrightarrow>\n                           cmp a aa = GREATER)) \\<and>\n                         (a'a \\<notin> D \\<longrightarrow>\n                          (a' \\<in> D \\<longrightarrow>\n                           cmp a aa = LESS) \\<and>\n                          (a' \\<notin> D \\<longrightarrow>\n                           cmp a aa = univ_cmp a' a'a))", "by (blast dest!: fun_relD)"], ["", "lemma param_cmp_img[param]: \n  \"(cmp_img,cmp_img) \\<in> (Ra\\<rightarrow>Rb) \\<rightarrow> (Rb\\<rightarrow>Rb\\<rightarrow>Rc) \\<rightarrow> Ra \\<rightarrow> Ra \\<rightarrow> Rc\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (cmp_img, cmp_img)\n    \\<in> (Ra \\<rightarrow> Rb) \\<rightarrow>\n          (Rb \\<rightarrow> Rb \\<rightarrow> Rc) \\<rightarrow>\n          Ra \\<rightarrow> Ra \\<rightarrow> Rc", "unfolding cmp_img_def[abs_def]"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>f cmp a b. cmp (f a) (f b),\n     \\<lambda>f cmp a b. cmp (f a) (f b))\n    \\<in> (Ra \\<rightarrow> Rb) \\<rightarrow>\n          (Rb \\<rightarrow> Rb \\<rightarrow> Rc) \\<rightarrow>\n          Ra \\<rightarrow> Ra \\<rightarrow> Rc", "by parametricity"], ["", "lemma param_comp_res[param]:\n  \"(LESS,LESS)\\<in>Id\"\n  \"(EQUAL,EQUAL)\\<in>Id\"\n  \"(GREATER,GREATER)\\<in>Id\"\n  \"(case_comp_res,case_comp_res)\\<in>Ra\\<rightarrow>Ra\\<rightarrow>Ra\\<rightarrow>Id\\<rightarrow>Ra\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((LESS, LESS) \\<in> comp_res_rel &&&\n     (EQUAL, EQUAL) \\<in> comp_res_rel) &&&\n    (GREATER, GREATER) \\<in> comp_res_rel &&&\n    (case_comp_res, case_comp_res)\n    \\<in> Ra \\<rightarrow>\n          Ra \\<rightarrow> Ra \\<rightarrow> comp_res_rel \\<rightarrow> Ra", "by (auto split: comp_res.split)"], ["", "term cmp_lex"], ["", "lemma param_cmp_lex[param]:\n  \"(cmp_lex,cmp_lex)\\<in>(Ra\\<rightarrow>Rb\\<rightarrow>Id)\\<rightarrow>\\<langle>Ra\\<rangle>list_rel\\<rightarrow>\\<langle>Rb\\<rangle>list_rel\\<rightarrow>Id\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (cmp_lex, cmp_lex)\n    \\<in> (Ra \\<rightarrow> Rb \\<rightarrow> comp_res_rel) \\<rightarrow>\n          \\<langle>Ra\\<rangle>list_rel \\<rightarrow>\n          \\<langle>Rb\\<rangle>list_rel \\<rightarrow> comp_res_rel", "unfolding cmp_lex_alt[abs_def] cmp_lex'_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>cmp l.\n        rec_list (\\<lambda>cmp. case_list EQUAL (\\<lambda>a list. LESS))\n         (\\<lambda>a l la cmp.\n             case_list GREATER\n              (\\<lambda>b m.\n                  case cmp a b of LESS \\<Rightarrow> LESS\n                  | EQUAL \\<Rightarrow> la cmp m\n                  | GREATER \\<Rightarrow> GREATER))\n         l cmp,\n     \\<lambda>cmp l.\n        rec_list (\\<lambda>cmp. case_list EQUAL (\\<lambda>a list. LESS))\n         (\\<lambda>a l la cmp.\n             case_list GREATER\n              (\\<lambda>b m.\n                  case cmp a b of LESS \\<Rightarrow> LESS\n                  | EQUAL \\<Rightarrow> la cmp m\n                  | GREATER \\<Rightarrow> GREATER))\n         l cmp)\n    \\<in> (Ra \\<rightarrow> Rb \\<rightarrow> comp_res_rel) \\<rightarrow>\n          \\<langle>Ra\\<rangle>list_rel \\<rightarrow>\n          \\<langle>Rb\\<rangle>list_rel \\<rightarrow> comp_res_rel", "by (parametricity)"], ["", "term cmp_prod"], ["", "lemma param_cmp_prod[param]:\n  \"(cmp_prod,cmp_prod)\\<in>\n  (Ra\\<rightarrow>Rb\\<rightarrow>Id)\\<rightarrow>(Rc\\<rightarrow>Rd\\<rightarrow>Id)\\<rightarrow>\\<langle>Ra,Rc\\<rangle>prod_rel\\<rightarrow>\\<langle>Rb,Rd\\<rangle>prod_rel\\<rightarrow>Id\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (cmp_prod, cmp_prod)\n    \\<in> (Ra \\<rightarrow> Rb \\<rightarrow> comp_res_rel) \\<rightarrow>\n          (Rc \\<rightarrow> Rd \\<rightarrow> comp_res_rel) \\<rightarrow>\n          Ra \\<times>\\<^sub>r Rc \\<rightarrow>\n          Rb \\<times>\\<^sub>r Rd \\<rightarrow> comp_res_rel", "unfolding cmp_prod_alt"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>cmp1 cmp2 (a1, a2) (b1, b2).\n        case cmp1 a1 b1 of LESS \\<Rightarrow> LESS\n        | EQUAL \\<Rightarrow> cmp2 a2 b2 | GREATER \\<Rightarrow> GREATER,\n     \\<lambda>cmp1 cmp2 (a1, a2) (b1, b2).\n        case cmp1 a1 b1 of LESS \\<Rightarrow> LESS\n        | EQUAL \\<Rightarrow> cmp2 a2 b2 | GREATER \\<Rightarrow> GREATER)\n    \\<in> (Ra \\<rightarrow> Rb \\<rightarrow> comp_res_rel) \\<rightarrow>\n          (Rc \\<rightarrow> Rd \\<rightarrow> comp_res_rel) \\<rightarrow>\n          Ra \\<times>\\<^sub>r Rc \\<rightarrow>\n          Rb \\<times>\\<^sub>r Rd \\<rightarrow> comp_res_rel", "by (parametricity)"], ["", "lemma param_cmp_unit[param]: \n  \"(cmp_unit,cmp_unit)\\<in>Id\\<rightarrow>Id\\<rightarrow>Id\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (cmp_unit, cmp_unit)\n    \\<in> unit_rel \\<rightarrow> unit_rel \\<rightarrow> comp_res_rel", "by auto"], ["", "lemma param_comp2eq[param]: \"(comp2eq,comp2eq)\\<in>(R\\<rightarrow>R\\<rightarrow>Id)\\<rightarrow>R\\<rightarrow>R\\<rightarrow>Id\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (comp2eq, comp2eq)\n    \\<in> (R \\<rightarrow> R \\<rightarrow> comp_res_rel) \\<rightarrow>\n          R \\<rightarrow> R \\<rightarrow> bool_rel", "unfolding comp2eq_def[abs_def]"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>cmp a b.\n        case cmp a b of EQUAL \\<Rightarrow> True | _ \\<Rightarrow> False,\n     \\<lambda>cmp a b.\n        case cmp a b of EQUAL \\<Rightarrow> True | _ \\<Rightarrow> False)\n    \\<in> (R \\<rightarrow> R \\<rightarrow> comp_res_rel) \\<rightarrow>\n          R \\<rightarrow> R \\<rightarrow> bool_rel", "by (parametricity)"], ["", "lemma cmp_combine_paramD:\n  assumes \"(cmp,cmp_combine D1 cmp1 D2 cmp2)\\<in>R\\<rightarrow>R\\<rightarrow>Id\"\n  assumes \"Range R \\<subseteq> D1\"\n  shows \"(cmp,cmp1)\\<in>R\\<rightarrow>R\\<rightarrow>Id\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (cmp, cmp1) \\<in> R \\<rightarrow> R \\<rightarrow> comp_res_rel", "using assms"], ["proof (prove)\nusing this:\n  (cmp, cmp_combine D1 cmp1 D2 cmp2)\n  \\<in> R \\<rightarrow> R \\<rightarrow> comp_res_rel\n  Range R \\<subseteq> D1\n\ngoal (1 subgoal):\n 1. (cmp, cmp1) \\<in> R \\<rightarrow> R \\<rightarrow> comp_res_rel", "unfolding cmp_combine_def[abs_def]"], ["proof (prove)\nusing this:\n  (cmp,\n   \\<lambda>a b.\n      if a \\<in> D1 \\<and> b \\<in> D1 then cmp1 a b\n      else if a \\<in> D1 \\<and> b \\<in> D2 then LESS\n           else if a \\<in> D2 \\<and> b \\<in> D1 then GREATER else cmp2 a b)\n  \\<in> R \\<rightarrow> R \\<rightarrow> comp_res_rel\n  Range R \\<subseteq> D1\n\ngoal (1 subgoal):\n 1. (cmp, cmp1) \\<in> R \\<rightarrow> R \\<rightarrow> comp_res_rel", "apply (intro fun_relI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a a' aa a'a.\n       \\<lbrakk>(cmp,\n                 \\<lambda>a b.\n                    if a \\<in> D1 \\<and> b \\<in> D1 then cmp1 a b\n                    else if a \\<in> D1 \\<and> b \\<in> D2 then LESS\n                         else if a \\<in> D2 \\<and> b \\<in> D1 then GREATER\n                              else cmp2 a b)\n                \\<in> R \\<rightarrow> R \\<rightarrow> comp_res_rel;\n        Range R \\<subseteq> D1; (a, a') \\<in> R; (aa, a'a) \\<in> R\\<rbrakk>\n       \\<Longrightarrow> (cmp a aa, cmp1 a' a'a) \\<in> comp_res_rel", "apply (drule_tac x=a in fun_relD, assumption)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a a' aa a'a.\n       \\<lbrakk>Range R \\<subseteq> D1; (a, a') \\<in> R; (aa, a'a) \\<in> R;\n        (cmp a,\n         \\<lambda>b.\n            if a' \\<in> D1 \\<and> b \\<in> D1 then cmp1 a' b\n            else if a' \\<in> D1 \\<and> b \\<in> D2 then LESS\n                 else if a' \\<in> D2 \\<and> b \\<in> D1 then GREATER\n                      else cmp2 a' b)\n        \\<in> R \\<rightarrow> comp_res_rel\\<rbrakk>\n       \\<Longrightarrow> (cmp a aa, cmp1 a' a'a) \\<in> comp_res_rel", "apply (drule_tac x=aa in fun_relD, assumption)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a a' aa a'a.\n       \\<lbrakk>Range R \\<subseteq> D1; (a, a') \\<in> R; (aa, a'a) \\<in> R;\n        (cmp a aa,\n         if a' \\<in> D1 \\<and> a'a \\<in> D1 then cmp1 a' a'a\n         else if a' \\<in> D1 \\<and> a'a \\<in> D2 then LESS\n              else if a' \\<in> D2 \\<and> a'a \\<in> D1 then GREATER\n                   else cmp2 a' a'a)\n        \\<in> comp_res_rel\\<rbrakk>\n       \\<Longrightarrow> (cmp a aa, cmp1 a' a'a) \\<in> comp_res_rel", "apply (drule RangeI, drule (1) rev_subsetD)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a a' aa a'a.\n       \\<lbrakk>Range R \\<subseteq> D1; (aa, a'a) \\<in> R;\n        (cmp a aa,\n         if a' \\<in> D1 \\<and> a'a \\<in> D1 then cmp1 a' a'a\n         else if a' \\<in> D1 \\<and> a'a \\<in> D2 then LESS\n              else if a' \\<in> D2 \\<and> a'a \\<in> D1 then GREATER\n                   else cmp2 a' a'a)\n        \\<in> comp_res_rel;\n        a' \\<in> D1\\<rbrakk>\n       \\<Longrightarrow> (cmp a aa, cmp1 a' a'a) \\<in> comp_res_rel", "apply (drule RangeI, drule (1) rev_subsetD)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a a' aa a'a.\n       \\<lbrakk>Range R \\<subseteq> D1;\n        (cmp a aa,\n         if a' \\<in> D1 \\<and> a'a \\<in> D1 then cmp1 a' a'a\n         else if a' \\<in> D1 \\<and> a'a \\<in> D2 then LESS\n              else if a' \\<in> D2 \\<and> a'a \\<in> D1 then GREATER\n                   else cmp2 a' a'a)\n        \\<in> comp_res_rel;\n        a' \\<in> D1; a'a \\<in> D1\\<rbrakk>\n       \\<Longrightarrow> (cmp a aa, cmp1 a' a'a) \\<in> comp_res_rel", "apply simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma cmp_extend_paramD:\n  assumes \"(cmp,cmp_extend D cmp')\\<in>R\\<rightarrow>R\\<rightarrow>Id\"\n  assumes \"Range R \\<subseteq> D\"\n  shows \"(cmp,cmp')\\<in>R\\<rightarrow>R\\<rightarrow>Id\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (cmp, cmp') \\<in> R \\<rightarrow> R \\<rightarrow> comp_res_rel", "using assms"], ["proof (prove)\nusing this:\n  (cmp, cmp_extend D cmp')\n  \\<in> R \\<rightarrow> R \\<rightarrow> comp_res_rel\n  Range R \\<subseteq> D\n\ngoal (1 subgoal):\n 1. (cmp, cmp') \\<in> R \\<rightarrow> R \\<rightarrow> comp_res_rel", "unfolding cmp_extend_def"], ["proof (prove)\nusing this:\n  (cmp, cmp_combine D cmp' UNIV univ_cmp)\n  \\<in> R \\<rightarrow> R \\<rightarrow> comp_res_rel\n  Range R \\<subseteq> D\n\ngoal (1 subgoal):\n 1. (cmp, cmp') \\<in> R \\<rightarrow> R \\<rightarrow> comp_res_rel", "apply (rule cmp_combine_paramD)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "subsection \\<open>Tuning of Generated Implementation\\<close>"], ["", "lemma [autoref_post_simps]: \"comp2eq (dflt_cmp (\\<le>) ((<)::_::linorder\\<Rightarrow>_)) = (=)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. comp2eq (dflt_cmp (\\<le>) (<)) = (=)", "by (simp add: class_to_eq_linorder eq_linorder_comp2eq_eq)"], ["", "end"]]}