{"file_name": "/home/qj213/afp-2021-10-22/thys/Collections/Lib/Dlist_add.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Collections", "problem_names": ["lemma distinct_remove1': \"distinct (xs @ ys) \\<Longrightarrow> \n  distinct (dlist_remove1' x xs ys)\"", "lemma set_dlist_remove1': \"distinct ys \\<Longrightarrow> \n  set (dlist_remove1' x xs ys) = set xs \\<union> (set ys - {x})\"", "lemma list_of_dlist_remove' [simp, code abstract]:\n  \"list_of_dlist (dlist_remove' a xs) = dlist_remove1' a [] (list_of_dlist xs)\"", "lemma dlist_remove'_correct: \n  \"y \\<in> set (list_of_dlist (dlist_remove' x xs)) \n  \\<longleftrightarrow> (if x = y then False else y \\<in> set (list_of_dlist xs))\"", "lemma dlist_iteratei_correct:\n  \"set_iterator (dlist_iteratei xs) (set (list_of_dlist xs))\"", "lemma dlist_member_empty: \"(set (list_of_dlist Dlist.empty)) = {}\"", "lemma dlist_member_insert [simp]: \"set (list_of_dlist (Dlist.insert x xs)) \n  = insert x (set (list_of_dlist xs))\"", "lemma dlist_finite_member [simp, intro!]: \"finite (set (list_of_dlist xs))\""], "translations": [["", "lemma distinct_remove1': \"distinct (xs @ ys) \\<Longrightarrow> \n  distinct (dlist_remove1' x xs ys)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. distinct (xs @ ys) \\<Longrightarrow> distinct (dlist_remove1' x xs ys)", "by(induct ys arbitrary: xs) simp_all"], ["", "lemma set_dlist_remove1': \"distinct ys \\<Longrightarrow> \n  set (dlist_remove1' x xs ys) = set xs \\<union> (set ys - {x})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. distinct ys \\<Longrightarrow>\n    set (dlist_remove1' x xs ys) = set xs \\<union> (set ys - {x})", "by(induct ys arbitrary: xs) auto"], ["", "lemma list_of_dlist_remove' [simp, code abstract]:\n  \"list_of_dlist (dlist_remove' a xs) = dlist_remove1' a [] (list_of_dlist xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. list_of_dlist (dlist_remove' a xs) =\n    dlist_remove1' a [] (list_of_dlist xs)", "by(simp add: dlist_remove'_def distinct_remove1')"], ["", "lemma dlist_remove'_correct: \n  \"y \\<in> set (list_of_dlist (dlist_remove' x xs)) \n  \\<longleftrightarrow> (if x = y then False else y \\<in> set (list_of_dlist xs))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (y \\<in> set (list_of_dlist (dlist_remove' x xs))) =\n    (if x = y then False else y \\<in> set (list_of_dlist xs))", "by(simp add: dlist_remove'_def \n    Dlist.member_def List.member_def set_dlist_remove1')"], ["", "definition dlist_iteratei :: \"'a dlist \\<Rightarrow> ('a, 'b) set_iterator\"\n  where \"dlist_iteratei xs = foldli (list_of_dlist xs)\""], ["", "lemma dlist_iteratei_correct:\n  \"set_iterator (dlist_iteratei xs) (set (list_of_dlist xs))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set_iterator (dlist_iteratei xs) (set (list_of_dlist xs))", "using distinct_list_of_dlist[of xs] \n      set_iterator_foldli_correct[of \"list_of_dlist xs\"]"], ["proof (prove)\nusing this:\n  distinct (list_of_dlist xs)\n  distinct (list_of_dlist xs) \\<Longrightarrow>\n  set_iterator (foldli (list_of_dlist xs)) (set (list_of_dlist xs))\n\ngoal (1 subgoal):\n 1. set_iterator (dlist_iteratei xs) (set (list_of_dlist xs))", "unfolding Dlist.member_def List.member_def dlist_iteratei_def"], ["proof (prove)\nusing this:\n  distinct (list_of_dlist xs)\n  distinct (list_of_dlist xs) \\<Longrightarrow>\n  set_iterator (foldli (list_of_dlist xs)) (set (list_of_dlist xs))\n\ngoal (1 subgoal):\n 1. set_iterator (foldli (list_of_dlist xs)) (set (list_of_dlist xs))", "by simp"], ["", "lemma dlist_member_empty: \"(set (list_of_dlist Dlist.empty)) = {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set (list_of_dlist Dlist.empty) = {}", "by(simp add: Dlist.empty_def)"], ["", "lemma dlist_member_insert [simp]: \"set (list_of_dlist (Dlist.insert x xs)) \n  = insert x (set (list_of_dlist xs))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set (list_of_dlist (Dlist.insert x xs)) =\n    insert x (set (list_of_dlist xs))", "by(simp add: Dlist.insert_def Dlist.member_def )"], ["", "lemma dlist_finite_member [simp, intro!]: \"finite (set (list_of_dlist xs))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (set (list_of_dlist xs))", "by(simp add: member_def )"], ["", "end"]]}