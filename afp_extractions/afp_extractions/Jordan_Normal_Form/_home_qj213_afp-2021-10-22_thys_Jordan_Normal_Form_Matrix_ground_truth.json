{"file_name": "/home/qj213/afp-2021-10-22/thys/Jordan_Normal_Form/Matrix.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Jordan_Normal_Form", "problem_names": ["lemma carrier_vec_dim_vec[simp]: \"v \\<in> carrier_vec (dim_vec v)\"", "lemma dim_vec[simp]: \"dim_vec (vec n f) = n\"", "lemma vec_carrier[simp]: \"vec n f \\<in> carrier_vec n\"", "lemma index_vec[simp]: \"i < n \\<Longrightarrow> vec n f $ i = f i\"", "lemma eq_vecI[intro]: \"(\\<And> i. i < dim_vec w \\<Longrightarrow> v $ i = w $ i) \\<Longrightarrow> dim_vec v = dim_vec w\n  \\<Longrightarrow> v = w\"", "lemma carrier_dim_vec: \"v \\<in> carrier_vec n \\<longleftrightarrow> dim_vec v = n\"", "lemma carrier_vecD[simp]: \"v \\<in> carrier_vec n \\<Longrightarrow> dim_vec v = n\"", "lemma carrier_vecI: \"dim_vec v = n \\<Longrightarrow> v \\<in> carrier_vec n\"", "lemma zero_carrier_vec[simp]: \"0\\<^sub>v n \\<in> carrier_vec n\"", "lemma index_zero_vec[simp]: \"i < n \\<Longrightarrow> 0\\<^sub>v n $ i = 0\" \"dim_vec (0\\<^sub>v n) = n\"", "lemma vec_of_dim_0[simp]: \"dim_vec v = 0 \\<longleftrightarrow> v = 0\\<^sub>v 0\"", "lemma index_unit_vec[simp]:\n  \"i < n \\<Longrightarrow> j < n \\<Longrightarrow> unit_vec n i $ j = (if j = i then 1 else 0)\"\n  \"i < n \\<Longrightarrow> unit_vec n i $ i = 1\"\n  \"dim_vec (unit_vec n i) = n\"", "lemma unit_vec_eq[simp]:\n  assumes i: \"i < n\"\n  shows \"(unit_vec n i = unit_vec n j) = (i = j)\"", "lemma unit_vec_nonzero[simp]:\n  assumes i_n: \"i < n\" shows \"unit_vec n i \\<noteq> zero_vec n\" (is \"?l \\<noteq> ?r\")", "lemma unit_vec_carrier[simp]: \"unit_vec n i \\<in> carrier_vec n\"", "lemma unit_vecs_first: \"unit_vecs n = unit_vecs_first n n\"", "lemma unit_vecs_last_carrier: \"set (unit_vecs_last n i) \\<subseteq> carrier_vec n\"", "lemma unit_vecs_last[code]: \"unit_vecs n = unit_vecs_last n n\"", "lemma unit_vecs_carrier: \"set (unit_vecs n) \\<subseteq> carrier_vec n\"", "lemma unit_vecs_last_distinct:\n  \"j \\<le> n \\<Longrightarrow> i < n - j \\<Longrightarrow> unit_vec n i \\<notin> set (unit_vecs_last n j)\"", "lemma unit_vecs_first_distinct:\n  \"i \\<le> j \\<Longrightarrow> j < n \\<Longrightarrow> unit_vec n j \\<notin> set (unit_vecs_first n i)\"", "lemma monoid_vec_simps:\n  \"mult (monoid_vec ty n) = (+)\"\n  \"carrier (monoid_vec ty n) = carrier_vec n\"\n  \"one (monoid_vec ty n) = 0\\<^sub>v n\"", "lemma module_vec_simps:\n  \"add (module_vec ty n) = (+)\"\n  \"zero (module_vec ty n) = 0\\<^sub>v n\"\n  \"carrier (module_vec ty n) = carrier_vec n\"\n  \"smult (module_vec ty n) = (\\<cdot>\\<^sub>v)\"", "lemma index_add_vec[simp]:\n  \"i < dim_vec v\\<^sub>2 \\<Longrightarrow> (v\\<^sub>1 + v\\<^sub>2) $ i = v\\<^sub>1 $ i + v\\<^sub>2 $ i\" \"dim_vec (v\\<^sub>1 + v\\<^sub>2) = dim_vec v\\<^sub>2\"", "lemma index_minus_vec[simp]:\n  \"i < dim_vec v\\<^sub>2 \\<Longrightarrow> (v\\<^sub>1 - v\\<^sub>2) $ i = v\\<^sub>1 $ i - v\\<^sub>2 $ i\" \"dim_vec (v\\<^sub>1 - v\\<^sub>2) = dim_vec v\\<^sub>2\"", "lemma index_map_vec[simp]:\n  \"i < dim_vec v \\<Longrightarrow> map_vec f v $ i = f (v $ i)\"\n  \"dim_vec (map_vec f v) = dim_vec v\"", "lemma map_carrier_vec[simp]: \"map_vec h v \\<in> carrier_vec n = (v \\<in> carrier_vec n)\"", "lemma index_uminus_vec[simp]:\n  \"i < dim_vec v \\<Longrightarrow> (- v) $ i = - (v $ i)\"\n  \"dim_vec (- v) = dim_vec v\"", "lemma index_smult_vec[simp]:\n  \"i < dim_vec v \\<Longrightarrow> (a \\<cdot>\\<^sub>v v) $ i = a * v $ i\" \"dim_vec (a \\<cdot>\\<^sub>v v) = dim_vec v\"", "lemma add_carrier_vec[simp]:\n  \"v\\<^sub>1 \\<in> carrier_vec n \\<Longrightarrow> v\\<^sub>2 \\<in> carrier_vec n \\<Longrightarrow> v\\<^sub>1 + v\\<^sub>2 \\<in> carrier_vec n\"", "lemma minus_carrier_vec[simp]:\n  \"v\\<^sub>1 \\<in> carrier_vec n \\<Longrightarrow> v\\<^sub>2 \\<in> carrier_vec n \\<Longrightarrow> v\\<^sub>1 - v\\<^sub>2 \\<in> carrier_vec n\"", "lemma comm_add_vec[ac_simps]:\n  \"(v\\<^sub>1 :: 'a :: ab_semigroup_add vec) \\<in> carrier_vec n \\<Longrightarrow> v\\<^sub>2 \\<in> carrier_vec n \\<Longrightarrow> v\\<^sub>1 + v\\<^sub>2 = v\\<^sub>2 + v\\<^sub>1\"", "lemma assoc_add_vec[simp]:\n  \"(v\\<^sub>1 :: 'a :: semigroup_add vec) \\<in> carrier_vec n \\<Longrightarrow> v\\<^sub>2 \\<in> carrier_vec n \\<Longrightarrow> v\\<^sub>3 \\<in> carrier_vec n\n  \\<Longrightarrow> (v\\<^sub>1 + v\\<^sub>2) + v\\<^sub>3 = v\\<^sub>1 + (v\\<^sub>2 + v\\<^sub>3)\"", "lemma zero_minus_vec[simp]: \"(v :: 'a :: group_add vec) \\<in> carrier_vec n \\<Longrightarrow> 0\\<^sub>v n - v = - v\"", "lemma minus_zero_vec[simp]: \"(v :: 'a :: group_add vec) \\<in> carrier_vec n \\<Longrightarrow> v - 0\\<^sub>v n = v\"", "lemma minus_cancel_vec[simp]: \"(v :: 'a :: group_add vec) \\<in> carrier_vec n \\<Longrightarrow> v - v = 0\\<^sub>v n\"", "lemma minus_add_uminus_vec: \"(v :: 'a :: group_add vec) \\<in> carrier_vec n \\<Longrightarrow>\n  w \\<in> carrier_vec n \\<Longrightarrow> v - w = v + (- w)\"", "lemma comm_monoid_vec: \"comm_monoid (monoid_vec TYPE ('a :: comm_monoid_add) n)\"", "lemma left_zero_vec[simp]: \"(v :: 'a :: monoid_add vec) \\<in> carrier_vec n  \\<Longrightarrow> 0\\<^sub>v n + v = v\"", "lemma right_zero_vec[simp]: \"(v :: 'a :: monoid_add vec) \\<in> carrier_vec n  \\<Longrightarrow> v + 0\\<^sub>v n = v\"", "lemma uminus_carrier_vec[simp]:\n  \"(- v \\<in> carrier_vec n) = (v \\<in> carrier_vec n)\"", "lemma uminus_r_inv_vec[simp]:\n  \"(v :: 'a :: group_add vec) \\<in> carrier_vec n \\<Longrightarrow> (v + - v) = 0\\<^sub>v n\"", "lemma uminus_l_inv_vec[simp]:\n  \"(v :: 'a :: group_add vec) \\<in> carrier_vec n \\<Longrightarrow> (- v + v) = 0\\<^sub>v n\"", "lemma add_inv_exists_vec:\n  \"(v :: 'a :: group_add vec) \\<in> carrier_vec n \\<Longrightarrow> \\<exists> w \\<in> carrier_vec n. w + v = 0\\<^sub>v n \\<and> v + w = 0\\<^sub>v n\"", "lemma comm_group_vec: \"comm_group (monoid_vec TYPE ('a :: ab_group_add) n)\"", "lemmas finsum_vec_insert =\n  comm_monoid.finprod_insert[OF comm_monoid_vec, folded finsum_vec_def, unfolded monoid_vec_simps]", "lemmas finsum_vec_closed =\n  comm_monoid.finprod_closed[OF comm_monoid_vec, folded finsum_vec_def, unfolded monoid_vec_simps]", "lemmas finsum_vec_empty =\n  comm_monoid.finprod_empty[OF comm_monoid_vec, folded finsum_vec_def, unfolded monoid_vec_simps]", "lemma smult_carrier_vec[simp]: \"(a \\<cdot>\\<^sub>v v \\<in> carrier_vec n) = (v \\<in> carrier_vec n)\"", "lemma scalar_prod_left_zero[simp]: \"v \\<in> carrier_vec n \\<Longrightarrow> 0\\<^sub>v n \\<bullet> v = 0\"", "lemma scalar_prod_right_zero[simp]: \"v \\<in> carrier_vec n \\<Longrightarrow> v \\<bullet> 0\\<^sub>v n = 0\"", "lemma scalar_prod_left_unit[simp]: assumes v: \"(v :: 'a :: semiring_1 vec) \\<in> carrier_vec n\" and i: \"i < n\"\n  shows \"unit_vec n i \\<bullet> v = v $ i\"", "lemma scalar_prod_right_unit[simp]: assumes i: \"i < n\"\n  shows \"(v :: 'a :: semiring_1 vec) \\<bullet> unit_vec n i = v $ i\"", "lemma add_scalar_prod_distrib: assumes v: \"v\\<^sub>1 \\<in> carrier_vec n\" \"v\\<^sub>2 \\<in> carrier_vec n\" \"v\\<^sub>3 \\<in> carrier_vec n\"\n  shows \"(v\\<^sub>1 + v\\<^sub>2) \\<bullet> v\\<^sub>3 = v\\<^sub>1 \\<bullet> v\\<^sub>3 + v\\<^sub>2 \\<bullet> v\\<^sub>3\"", "lemma scalar_prod_add_distrib: assumes v: \"v\\<^sub>1 \\<in> carrier_vec n\" \"v\\<^sub>2 \\<in> carrier_vec n\" \"v\\<^sub>3 \\<in> carrier_vec n\"\n  shows \"v\\<^sub>1 \\<bullet> (v\\<^sub>2 + v\\<^sub>3) = v\\<^sub>1 \\<bullet> v\\<^sub>2 + v\\<^sub>1 \\<bullet> v\\<^sub>3\"", "lemma smult_scalar_prod_distrib[simp]: assumes v: \"v\\<^sub>1 \\<in> carrier_vec n\" \"v\\<^sub>2 \\<in> carrier_vec n\"\n  shows \"(a \\<cdot>\\<^sub>v v\\<^sub>1) \\<bullet> v\\<^sub>2 = a * (v\\<^sub>1 \\<bullet> v\\<^sub>2)\"", "lemma scalar_prod_smult_distrib[simp]: assumes v: \"v\\<^sub>1 \\<in> carrier_vec n\" \"v\\<^sub>2 \\<in> carrier_vec n\"\n  shows \"v\\<^sub>1 \\<bullet> (a \\<cdot>\\<^sub>v v\\<^sub>2) = (a :: 'a :: comm_ring) * (v\\<^sub>1 \\<bullet> v\\<^sub>2)\"", "lemma comm_scalar_prod: assumes \"(v\\<^sub>1 :: 'a :: comm_semiring_0 vec) \\<in> carrier_vec n\" \"v\\<^sub>2 \\<in> carrier_vec n\"\n  shows \"v\\<^sub>1 \\<bullet> v\\<^sub>2 = v\\<^sub>2 \\<bullet> v\\<^sub>1\"", "lemma add_smult_distrib_vec:\n  \"((a::'a::ring) + b) \\<cdot>\\<^sub>v v = a \\<cdot>\\<^sub>v v + b \\<cdot>\\<^sub>v v\"", "lemma smult_add_distrib_vec:\n  assumes \"v \\<in> carrier_vec n\" \"w \\<in> carrier_vec n\"\n  shows \"(a::'a::ring) \\<cdot>\\<^sub>v (v + w) = a \\<cdot>\\<^sub>v v + a \\<cdot>\\<^sub>v w\"", "lemma smult_smult_assoc:\n  \"a \\<cdot>\\<^sub>v (b \\<cdot>\\<^sub>v v) = (a * b::'a::ring) \\<cdot>\\<^sub>v v\"", "lemma one_smult_vec [simp]:\n  \"(1::'a::ring_1) \\<cdot>\\<^sub>v v = v\"", "lemma uminus_zero_vec[simp]: \"- (0\\<^sub>v n) = (0\\<^sub>v n :: 'a :: group_add vec)\"", "lemma index_finsum_vec: assumes \"finite F\" and i: \"i < n\"\n  and vs: \"vs \\<in> F \\<rightarrow> carrier_vec n\"\n  shows \"finsum_vec TYPE('a :: comm_monoid_add) n vs F $ i = sum (\\<lambda> f. vs f $ i) F\"", "lemma undef_cong_mat: assumes \"\\<And> i j. i < nr \\<Longrightarrow> j < nc \\<Longrightarrow> f (i,j) = f' (i,j)\"\n  shows \"undef_mat nr nc f x = undef_mat nr nc f' x\"", "lemma cong_mk_mat: assumes \"\\<And> i j. i < nr \\<Longrightarrow> j < nc \\<Longrightarrow> f (i,j) = f' (i,j)\"\n  shows \"mk_mat nr nc f = mk_mat nr nc f'\"", "lemma upper_triangularD[elim] :\n  \"upper_triangular A \\<Longrightarrow> j < i \\<Longrightarrow> i < dim_row A \\<Longrightarrow> A $$ (i,j) = 0\"", "lemma upper_triangularI[intro] :\n  \"(\\<And>i j. j < i \\<Longrightarrow> i < dim_row A \\<Longrightarrow> A $$ (i,j) = 0) \\<Longrightarrow> upper_triangular A\"", "lemma dim_row_mat[simp]: \"dim_row (mat nr nc f) = nr\" \"dim_row (mat\\<^sub>r nr nc g) = nr\"", "lemma dim_col_mat[simp]: \"dim_col (mat nr nc f) = nc\" \"dim_col (mat\\<^sub>r nr nc g) = nc\"", "lemma carrier_mat_triv[simp]: \"m \\<in> carrier_mat (dim_row m) (dim_col m)\"", "lemma mat_carrier[simp]: \"mat nr nc f \\<in> carrier_mat nr nc\"", "lemma elements_matD [dest]:\n  \"a \\<in> elements_mat A \\<Longrightarrow> \\<exists>i j. i < dim_row A \\<and> j < dim_col A \\<and> a = A $$ (i,j)\"", "lemma elements_matI [intro]:\n  \"A \\<in> carrier_mat nr nc \\<Longrightarrow> i < nr \\<Longrightarrow> j < nc \\<Longrightarrow> a = A $$ (i,j) \\<Longrightarrow> a \\<in> elements_mat A\"", "lemma index_mat[simp]:  \"i < nr \\<Longrightarrow> j < nc \\<Longrightarrow> mat nr nc f $$ (i,j) = f (i,j)\"\n  \"i < nr \\<Longrightarrow> j < nc \\<Longrightarrow> mat\\<^sub>r nr nc g $$ (i,j) = g i $ j\"", "lemma eq_matI[intro]: \"(\\<And> i j . i < dim_row B \\<Longrightarrow> j < dim_col B \\<Longrightarrow> A $$ (i,j) = B $$ (i,j))\n  \\<Longrightarrow> dim_row A = dim_row B\n  \\<Longrightarrow> dim_col A = dim_col B\n  \\<Longrightarrow> A = B\"", "lemma carrier_matI[intro]:\n  assumes \"dim_row A = nr\" \"dim_col A = nc\" shows  \"A \\<in> carrier_mat nr nc\"", "lemma carrier_matD[dest,simp]: assumes \"A \\<in> carrier_mat nr nc\"\n  shows \"dim_row A = nr\" \"dim_col A = nc\"", "lemma cong_mat: assumes \"nr = nr'\" \"nc = nc'\" \"\\<And> i j. i < nr \\<Longrightarrow> j < nc \\<Longrightarrow>\n  f (i,j) = f' (i,j)\" shows \"mat nr nc f = mat nr' nc' f'\"", "lemma row_carrier[simp]: \"row A i \\<in> carrier_vec (dim_col A)\"", "lemma rows_carrier[simp]: \"set (rows A) \\<subseteq> carrier_vec (dim_col A)\"", "lemma length_rows[simp]: \"length (rows A) = dim_row A\"", "lemma nth_rows[simp]: \"i < dim_row A \\<Longrightarrow> rows A ! i = row A i\"", "lemma row_mat_of_row_fun[simp]: \"i < nr \\<Longrightarrow> dim_vec (f i) = nc \\<Longrightarrow> row (mat\\<^sub>r nr nc f) i = f i\"", "lemma set_rows_carrier:\n  assumes \"A \\<in> carrier_mat m n\" and \"v \\<in> set (rows A)\" shows \"v \\<in> carrier_vec n\"", "lemma mat_of_rows_carrier[simp]:\n  \"mat_of_rows n vs \\<in> carrier_mat (length vs) n\"\n  \"dim_row (mat_of_rows n vs) = length vs\"\n  \"dim_col (mat_of_rows n vs) = n\"", "lemma mat_of_rows_row[simp]:\n  assumes i:\"i < length vs\" and n: \"vs ! i \\<in> carrier_vec n\"\n  shows \"row (mat_of_rows n vs) i = vs ! i\"", "lemma rows_mat_of_rows[simp]:\n  assumes \"set vs \\<subseteq> carrier_vec n\" shows \"rows (mat_of_rows n vs) = vs\"", "lemma mat_of_rows_rows[simp]:\n  \"mat_of_rows (dim_col A) (rows A) = A\"", "lemma col_dim[simp]: \"col A i \\<in> carrier_vec (dim_row A)\"", "lemma dim_col[simp]: \"dim_vec (col A i) = dim_row A\"", "lemma cols_dim[simp]: \"set (cols A) \\<subseteq> carrier_vec (dim_row A)\"", "lemma cols_length[simp]: \"length (cols A) = dim_col A\"", "lemma cols_nth[simp]: \"i < dim_col A \\<Longrightarrow> cols A ! i = col A i\"", "lemma mat_of_cols_carrier[simp]:\n  \"mat_of_cols n vs \\<in> carrier_mat n (length vs)\"\n  \"dim_row (mat_of_cols n vs) = n\"\n  \"dim_col (mat_of_cols n vs) = length vs\"", "lemma col_mat_of_cols[simp]:\n  assumes j:\"j < length vs\" and n: \"vs ! j \\<in> carrier_vec n\"\n  shows \"col (mat_of_cols n vs) j = vs ! j\"", "lemma cols_mat_of_cols[simp]:\n  assumes \"set vs \\<subseteq> carrier_vec n\" shows \"cols (mat_of_cols n vs) = vs\"", "lemma mat_of_cols_cols[simp]:\n  \"mat_of_cols (dim_row A) (cols A) = A\"", "lemma elements_0_mat [simp]: \"elements_mat (0\\<^sub>m nr nc) \\<subseteq> {0}\"", "lemma ring_mat_simps:\n  \"mult (ring_mat ty n b) = (*)\"\n  \"add (ring_mat ty n b) = (+)\"\n  \"one (ring_mat ty n b) = 1\\<^sub>m n\"\n  \"zero (ring_mat ty n b) = 0\\<^sub>m n n\"\n  \"carrier (ring_mat ty n b) = carrier_mat n n\"", "lemma module_mat_simps:\n  \"mult (module_mat ty nr nc) = (*)\"\n  \"add (module_mat ty nr nc) = (+)\"\n  \"one (module_mat ty nr nc) = 1\\<^sub>m nr\"\n  \"zero (module_mat ty nr nc) = 0\\<^sub>m nr nc\"\n  \"carrier (module_mat ty nr nc) = carrier_mat nr nc\"\n  \"smult (module_mat ty nr nc) = (\\<cdot>\\<^sub>m)\"", "lemma index_zero_mat[simp]: \"i < nr \\<Longrightarrow> j < nc \\<Longrightarrow> 0\\<^sub>m nr nc $$ (i,j) = 0\"\n  \"dim_row (0\\<^sub>m nr nc) = nr\" \"dim_col (0\\<^sub>m nr nc) = nc\"", "lemma index_one_mat[simp]: \"i < n \\<Longrightarrow> j < n \\<Longrightarrow> 1\\<^sub>m n $$ (i,j) = (if i = j then 1 else 0)\"\n  \"dim_row (1\\<^sub>m n) = n\" \"dim_col (1\\<^sub>m n) = n\"", "lemma index_add_mat[simp]:\n  \"i < dim_row B \\<Longrightarrow> j < dim_col B \\<Longrightarrow> (A + B) $$ (i,j) = A $$ (i,j) + B $$ (i,j)\"\n  \"dim_row (A + B) = dim_row B\" \"dim_col (A + B) = dim_col B\"", "lemma index_minus_mat[simp]:\n  \"i < dim_row B \\<Longrightarrow> j < dim_col B \\<Longrightarrow> (A - B) $$ (i,j) = A $$ (i,j) - B $$ (i,j)\"\n  \"dim_row (A - B) = dim_row B\" \"dim_col (A - B) = dim_col B\"", "lemma index_map_mat[simp]:\n  \"i < dim_row A \\<Longrightarrow> j < dim_col A \\<Longrightarrow> map_mat f A $$ (i,j) = f (A $$ (i,j))\"\n  \"dim_row (map_mat f A) = dim_row A\" \"dim_col (map_mat f A) = dim_col A\"", "lemma index_smult_mat[simp]:\n  \"i < dim_row A \\<Longrightarrow> j < dim_col A \\<Longrightarrow> (a \\<cdot>\\<^sub>m A) $$ (i,j) = a * A $$ (i,j)\"\n  \"dim_row (a \\<cdot>\\<^sub>m A) = dim_row A\" \"dim_col (a \\<cdot>\\<^sub>m A) = dim_col A\"", "lemma index_uminus_mat[simp]:\n  \"i < dim_row A \\<Longrightarrow> j < dim_col A \\<Longrightarrow> (- A) $$ (i,j) = - (A $$ (i,j))\"\n  \"dim_row (- A) = dim_row A\" \"dim_col (- A) = dim_col A\"", "lemma index_transpose_mat[simp]:\n  \"i < dim_col A \\<Longrightarrow> j < dim_row A \\<Longrightarrow> transpose_mat A $$ (i,j) = A $$ (j,i)\"\n  \"dim_row (transpose_mat A) = dim_col A\" \"dim_col (transpose_mat A) = dim_row A\"", "lemma index_mult_mat[simp]:\n  \"i < dim_row A \\<Longrightarrow> j < dim_col B \\<Longrightarrow> (A * B) $$ (i,j) = row A i \\<bullet> col B j\"\n  \"dim_row (A * B) = dim_row A\" \"dim_col (A * B) = dim_col B\"", "lemma dim_mult_mat_vec[simp]: \"dim_vec (A *\\<^sub>v v) = dim_row A\"", "lemma index_mult_mat_vec[simp]: \"i < dim_row A \\<Longrightarrow> (A *\\<^sub>v v) $ i = row A i \\<bullet> v\"", "lemma index_row[simp]:\n  \"i < dim_row A \\<Longrightarrow> j < dim_col A \\<Longrightarrow> row A i $ j = A $$ (i,j)\"\n  \"dim_vec (row A i) = dim_col A\"", "lemma index_col[simp]: \"i < dim_row A \\<Longrightarrow> j < dim_col A \\<Longrightarrow> col A j $ i = A $$ (i,j)\"", "lemma upper_triangular_one[simp]: \"upper_triangular (1\\<^sub>m n)\"", "lemma upper_triangular_zero[simp]: \"upper_triangular (0\\<^sub>m n n)\"", "lemma mat_row_carrierI[intro,simp]: \"mat\\<^sub>r nr nc r \\<in> carrier_mat nr nc\"", "lemma eq_rowI: assumes rows: \"\\<And> i. i < dim_row B \\<Longrightarrow> row A i = row B i\"\n  and dims: \"dim_row A = dim_row B\" \"dim_col A = dim_col B\"\n  shows \"A = B\"", "lemma row_mat[simp]: \"i < nr \\<Longrightarrow> row (mat nr nc f) i = vec nc (\\<lambda> j. f (i,j))\"", "lemma col_mat[simp]: \"j < nc \\<Longrightarrow> col (mat nr nc f) j = vec nr (\\<lambda> i. f (i,j))\"", "lemma zero_carrier_mat[simp]: \"0\\<^sub>m nr nc \\<in> carrier_mat nr nc\"", "lemma smult_carrier_mat[simp]:\n  \"A \\<in> carrier_mat nr nc \\<Longrightarrow> k \\<cdot>\\<^sub>m A \\<in> carrier_mat nr nc\"", "lemma add_carrier_mat[simp]:\n  \"B \\<in> carrier_mat nr nc \\<Longrightarrow> A + B \\<in> carrier_mat nr nc\"", "lemma one_carrier_mat[simp]: \"1\\<^sub>m n \\<in> carrier_mat n n\"", "lemma uminus_carrier_mat:\n  \"A \\<in> carrier_mat nr nc \\<Longrightarrow> (- A \\<in> carrier_mat nr nc)\"", "lemma uminus_carrier_iff_mat[simp]:\n  \"(- A \\<in> carrier_mat nr nc) = (A \\<in> carrier_mat nr nc)\"", "lemma minus_carrier_mat:\n  \"B \\<in> carrier_mat nr nc \\<Longrightarrow> (A - B \\<in> carrier_mat nr nc)\"", "lemma transpose_carrier_mat[simp]: \"(transpose_mat A \\<in> carrier_mat nc nr) = (A \\<in> carrier_mat nr nc)\"", "lemma row_carrier_vec[simp]: \"i < nr \\<Longrightarrow> A \\<in> carrier_mat nr nc \\<Longrightarrow> row A i \\<in> carrier_vec nc\"", "lemma col_carrier_vec[simp]: \"j < nc \\<Longrightarrow> A \\<in> carrier_mat nr nc \\<Longrightarrow> col A j \\<in> carrier_vec nr\"", "lemma mult_carrier_mat[simp]:\n  \"A \\<in> carrier_mat nr n \\<Longrightarrow> B \\<in> carrier_mat n nc \\<Longrightarrow> A * B \\<in> carrier_mat nr nc\"", "lemma mult_mat_vec_carrier[simp]:\n  \"A \\<in> carrier_mat nr n \\<Longrightarrow> v \\<in> carrier_vec n \\<Longrightarrow> A *\\<^sub>v v \\<in> carrier_vec nr\"", "lemma comm_add_mat[ac_simps]:\n  \"(A :: 'a :: comm_monoid_add mat) \\<in> carrier_mat nr nc \\<Longrightarrow> B \\<in> carrier_mat nr nc \\<Longrightarrow> A + B = B + A\"", "lemma minus_r_inv_mat[simp]:\n  \"(A :: 'a :: group_add mat) \\<in> carrier_mat nr nc \\<Longrightarrow> (A - A) = 0\\<^sub>m nr nc\"", "lemma uminus_l_inv_mat[simp]:\n  \"(A :: 'a :: group_add mat) \\<in> carrier_mat nr nc \\<Longrightarrow> (- A + A) = 0\\<^sub>m nr nc\"", "lemma add_inv_exists_mat:\n  \"(A :: 'a :: group_add mat) \\<in> carrier_mat nr nc \\<Longrightarrow> \\<exists> B \\<in> carrier_mat nr nc. B + A = 0\\<^sub>m nr nc \\<and> A + B = 0\\<^sub>m nr nc\"", "lemma assoc_add_mat[simp]:\n  \"(A :: 'a :: monoid_add mat) \\<in> carrier_mat nr nc \\<Longrightarrow> B \\<in> carrier_mat nr nc \\<Longrightarrow> C \\<in> carrier_mat nr nc\n  \\<Longrightarrow> (A + B) + C = A + (B + C)\"", "lemma uminus_add_mat: fixes A :: \"'a :: group_add mat\"\n  assumes \"A \\<in> carrier_mat nr nc\"\n  and \"B \\<in> carrier_mat nr nc\"\n  shows \"- (A + B) = - B + - A\"", "lemma transpose_transpose[simp]:\n  \"transpose_mat (transpose_mat A) = A\"", "lemma transpose_one[simp]: \"transpose_mat (1\\<^sub>m n) = (1\\<^sub>m n)\"", "lemma row_transpose[simp]:\n  \"j < dim_col A \\<Longrightarrow> row (transpose_mat A) j = col A j\"", "lemma col_transpose[simp]:\n  \"i < dim_row A \\<Longrightarrow> col (transpose_mat A) i = row A i\"", "lemma row_zero[simp]:\n  \"i < nr \\<Longrightarrow> row (0\\<^sub>m nr nc) i = 0\\<^sub>v nc\"", "lemma col_zero[simp]:\n  \"j < nc \\<Longrightarrow> col (0\\<^sub>m nr nc) j = 0\\<^sub>v nr\"", "lemma row_one[simp]:\n  \"i < n \\<Longrightarrow> row (1\\<^sub>m n) i = unit_vec n i\"", "lemma col_one[simp]:\n  \"j < n \\<Longrightarrow> col (1\\<^sub>m n) j = unit_vec n j\"", "lemma transpose_add: \"A \\<in> carrier_mat nr nc \\<Longrightarrow> B \\<in> carrier_mat nr nc\n  \\<Longrightarrow> transpose_mat (A + B) = transpose_mat A + transpose_mat B\"", "lemma transpose_minus: \"A \\<in> carrier_mat nr nc \\<Longrightarrow> B \\<in> carrier_mat nr nc\n  \\<Longrightarrow> transpose_mat (A - B) = transpose_mat A - transpose_mat B\"", "lemma transpose_uminus: \"A \\<in> carrier_mat nr nc \\<Longrightarrow> transpose_mat (- A) = - (transpose_mat A)\"", "lemma row_add[simp]:\n  \"A \\<in> carrier_mat nr nc \\<Longrightarrow> B \\<in> carrier_mat nr nc \\<Longrightarrow> i < nr\n  \\<Longrightarrow> row (A + B) i = row A i + row B i\"\n  \"i < dim_row A \\<Longrightarrow> dim_row B = dim_row A \\<Longrightarrow> dim_col B = dim_col A \\<Longrightarrow> row (A + B) i = row A i + row B i\"", "lemma col_add[simp]:\n  \"A \\<in> carrier_mat nr nc \\<Longrightarrow> B \\<in> carrier_mat nr nc \\<Longrightarrow> j < nc\n  \\<Longrightarrow> col (A + B) j = col A j + col B j\"", "lemma row_mult[simp]: assumes m: \"A \\<in> carrier_mat nr n\" \"B \\<in> carrier_mat n nc\"\n  and i: \"i < nr\"\n  shows \"row (A * B) i = vec nc (\\<lambda> j. row A i \\<bullet> col B j)\"", "lemma col_mult[simp]: assumes m: \"A \\<in> carrier_mat nr n\" \"B \\<in> carrier_mat n nc\"\n  and j: \"j < nc\"\n  shows \"col (A * B) j = vec nr (\\<lambda> i. row A i \\<bullet> col B j)\"", "lemma transpose_mult:\n  \"(A :: 'a :: comm_semiring_0 mat) \\<in> carrier_mat nr n \\<Longrightarrow> B \\<in> carrier_mat n nc\n  \\<Longrightarrow> transpose_mat (A * B) = transpose_mat B * transpose_mat A\"", "lemma left_add_zero_mat[simp]:\n  \"(A :: 'a :: monoid_add mat) \\<in> carrier_mat nr nc  \\<Longrightarrow> 0\\<^sub>m nr nc + A = A\"", "lemma add_uminus_minus_mat: \"A \\<in> carrier_mat nr nc \\<Longrightarrow> B \\<in> carrier_mat nr nc \\<Longrightarrow> \n  A + (- B) = A - (B :: 'a :: group_add mat)\"", "lemma right_add_zero_mat[simp]: \"A \\<in> carrier_mat nr nc \\<Longrightarrow> \n  A + 0\\<^sub>m nr nc = (A :: 'a :: monoid_add mat)\"", "lemma left_mult_zero_mat:\n  \"A \\<in> carrier_mat n nc \\<Longrightarrow> 0\\<^sub>m nr n * A = 0\\<^sub>m nr nc\"", "lemma left_mult_zero_mat'[simp]: \"dim_row A = n \\<Longrightarrow> 0\\<^sub>m nr n * A = 0\\<^sub>m nr (dim_col A)\"", "lemma right_mult_zero_mat:\n  \"A \\<in> carrier_mat nr n \\<Longrightarrow> A * 0\\<^sub>m n nc = 0\\<^sub>m nr nc\"", "lemma right_mult_zero_mat'[simp]: \"dim_col A = n \\<Longrightarrow> A * 0\\<^sub>m n nc = 0\\<^sub>m (dim_row A) nc\"", "lemma left_mult_one_mat:\n  \"(A :: 'a :: semiring_1 mat) \\<in> carrier_mat nr nc \\<Longrightarrow> 1\\<^sub>m nr * A = A\"", "lemma left_mult_one_mat'[simp]: \"dim_row (A :: 'a :: semiring_1 mat) = n \\<Longrightarrow> 1\\<^sub>m n * A = A\"", "lemma right_mult_one_mat:\n  \"(A :: 'a :: semiring_1 mat) \\<in> carrier_mat nr nc \\<Longrightarrow> A * 1\\<^sub>m nc = A\"", "lemma right_mult_one_mat'[simp]: \"dim_col (A :: 'a :: semiring_1 mat) = n \\<Longrightarrow> A * 1\\<^sub>m n = A\"", "lemma one_mult_mat_vec[simp]:\n  \"(v :: 'a :: semiring_1 vec) \\<in> carrier_vec n \\<Longrightarrow> 1\\<^sub>m n *\\<^sub>v v = v\"", "lemma minus_add_uminus_mat: fixes A :: \"'a :: group_add mat\"\n  shows \"A \\<in> carrier_mat nr nc \\<Longrightarrow> B \\<in> carrier_mat nr nc \\<Longrightarrow>\n  A - B = A + (- B)\"", "lemma add_mult_distrib_mat[algebra_simps]: assumes m: \"A \\<in> carrier_mat nr n\"\n  \"B \\<in> carrier_mat nr n\" \"C \\<in> carrier_mat n nc\"\n  shows \"(A + B) * C = A * C + B * C\"", "lemma mult_add_distrib_mat[algebra_simps]: assumes m: \"A \\<in> carrier_mat nr n\"\n  \"B \\<in> carrier_mat n nc\" \"C \\<in> carrier_mat n nc\"\n  shows \"A * (B + C) = A * B + A * C\"", "lemma add_mult_distrib_mat_vec[algebra_simps]: assumes m: \"A \\<in> carrier_mat nr nc\"\n  \"B \\<in> carrier_mat nr nc\" \"v \\<in> carrier_vec nc\"\n  shows \"(A + B) *\\<^sub>v v = A *\\<^sub>v v + B *\\<^sub>v v\"", "lemma mult_add_distrib_mat_vec[algebra_simps]: assumes m: \"A \\<in> carrier_mat nr nc\"\n  \"v\\<^sub>1 \\<in> carrier_vec nc\" \"v\\<^sub>2 \\<in> carrier_vec nc\"\n  shows \"A *\\<^sub>v (v\\<^sub>1 + v\\<^sub>2) = A *\\<^sub>v v\\<^sub>1 + A *\\<^sub>v v\\<^sub>2\"", "lemma mult_mat_vec:\n  assumes m: \"(A::'a::field mat) \\<in> carrier_mat nr nc\" and v: \"v \\<in> carrier_vec nc\"\n  shows \"A *\\<^sub>v (k \\<cdot>\\<^sub>v v) = k \\<cdot>\\<^sub>v (A *\\<^sub>v v)\" (is \"?l = ?r\")", "lemma assoc_scalar_prod: assumes *: \"v\\<^sub>1 \\<in> carrier_vec nr\" \"A \\<in> carrier_mat nr nc\" \"v\\<^sub>2 \\<in> carrier_vec nc\"\n  shows \"vec nc (\\<lambda>j. v\\<^sub>1 \\<bullet> col A j) \\<bullet> v\\<^sub>2 = v\\<^sub>1 \\<bullet> vec nr (\\<lambda>i. row A i \\<bullet> v\\<^sub>2)\"", "lemma assoc_mult_mat[simp]:\n  \"A \\<in> carrier_mat n\\<^sub>1 n\\<^sub>2 \\<Longrightarrow> B \\<in> carrier_mat n\\<^sub>2 n\\<^sub>3 \\<Longrightarrow> C \\<in> carrier_mat n\\<^sub>3 n\\<^sub>4\n  \\<Longrightarrow> (A * B) * C = A * (B * C)\"", "lemma assoc_mult_mat_vec[simp]:\n  \"A \\<in> carrier_mat n\\<^sub>1 n\\<^sub>2 \\<Longrightarrow> B \\<in> carrier_mat n\\<^sub>2 n\\<^sub>3 \\<Longrightarrow> v \\<in> carrier_vec n\\<^sub>3\n  \\<Longrightarrow> (A * B) *\\<^sub>v v = A *\\<^sub>v (B *\\<^sub>v v)\"", "lemma comm_monoid_mat: \"comm_monoid (monoid_mat TYPE('a :: comm_monoid_add) nr nc)\"", "lemma comm_group_mat: \"comm_group (monoid_mat TYPE('a :: ab_group_add) nr nc)\"", "lemma semiring_mat: \"semiring (ring_mat TYPE('a :: semiring_1) n b)\"", "lemma ring_mat: \"ring (ring_mat TYPE('a :: comm_ring_1) n b)\"", "lemma abelian_group_mat: \"abelian_group (module_mat TYPE('a :: comm_ring_1) nr nc)\"", "lemma row_smult[simp]: assumes i: \"i < dim_row A\"\n  shows \"row (k \\<cdot>\\<^sub>m A) i = k \\<cdot>\\<^sub>v (row A i)\"", "lemma col_smult[simp]: assumes i: \"i < dim_col A\"\n  shows \"col (k \\<cdot>\\<^sub>m A) i = k \\<cdot>\\<^sub>v (col A i)\"", "lemma row_uminus[simp]: assumes i: \"i < dim_row A\"\n  shows \"row (- A) i = - (row A i)\"", "lemma scalar_prod_uminus_left[simp]: assumes dim: \"dim_vec v = dim_vec (w :: 'a :: ring vec)\"\n  shows \"- v \\<bullet> w = - (v \\<bullet> w)\"", "lemma col_uminus[simp]: assumes i: \"i < dim_col A\"\n  shows \"col (- A) i = - (col A i)\"", "lemma scalar_prod_uminus_right[simp]: assumes dim: \"dim_vec v = dim_vec (w :: 'a :: ring vec)\"\n  shows \"v \\<bullet> - w = - (v \\<bullet> w)\"", "lemma uminus_mult_left_mat[simp]: \"(- A * B) = - (A * B)\"", "lemma uminus_mult_right_mat[simp]: \"(A * - B) = - (A * B)\"", "lemma minus_mult_distrib_mat[algebra_simps]: fixes A :: \"'a :: ring mat\"\n  assumes m: \"A \\<in> carrier_mat nr n\" \"B \\<in> carrier_mat nr n\" \"C \\<in> carrier_mat n nc\"\n  shows \"(A - B) * C = A * C - B * C\"", "lemma minus_mult_distrib_mat_vec[algebra_simps]: assumes A: \"(A :: 'a :: ring mat) \\<in> carrier_mat nr nc\"\n  and B: \"B \\<in> carrier_mat nr nc\"\n  and v: \"v \\<in> carrier_vec nc\"\nshows \"(A - B) *\\<^sub>v v = A *\\<^sub>v v - B *\\<^sub>v v\"", "lemma mult_minus_distrib_mat_vec[algebra_simps]: assumes A: \"(A :: 'a :: ring mat) \\<in> carrier_mat nr nc\"\n  and v: \"v \\<in> carrier_vec nc\"\n  and w: \"w \\<in> carrier_vec nc\"\nshows \"A *\\<^sub>v (v - w) = A *\\<^sub>v v - A *\\<^sub>v w\"", "lemma mult_minus_distrib_mat[algebra_simps]: fixes A :: \"'a :: ring mat\"\n  assumes m: \"A \\<in> carrier_mat nr n\" \"B \\<in> carrier_mat n nc\" \"C \\<in> carrier_mat n nc\"\n  shows \"A * (B - C) = A * B - A * C\"", "lemma uminus_mult_mat_vec[simp]: assumes v: \"dim_vec v = dim_col (A :: 'a :: ring mat)\"\n  shows \"- A *\\<^sub>v v = - (A *\\<^sub>v v)\"", "lemma uminus_zero_vec_eq: assumes v: \"(v :: 'a :: group_add vec) \\<in> carrier_vec n\"\n  shows \"(- v = 0\\<^sub>v n) = (v = 0\\<^sub>v n)\"", "lemma map_carrier_mat[simp]:\n  \"(map_mat f A \\<in> carrier_mat nr nc) = (A \\<in> carrier_mat nr nc)\"", "lemma col_map_mat[simp]:\n  assumes \"j < dim_col A\" shows \"col (map_mat f A) j = map_vec f (col A j)\"", "lemma scalar_vec_one[simp]: \"1 \\<cdot>\\<^sub>v (v :: 'a :: semiring_1 vec) = v\"", "lemma scalar_prod_smult_right[simp]:\n  \"dim_vec w = dim_vec v \\<Longrightarrow> w \\<bullet> (k \\<cdot>\\<^sub>v v) = (k :: 'a :: comm_semiring_0) * (w \\<bullet> v)\"", "lemma scalar_prod_smult_left[simp]:\n  \"dim_vec w = dim_vec v \\<Longrightarrow> (k \\<cdot>\\<^sub>v w) \\<bullet> v = (k :: 'a :: comm_semiring_0) * (w \\<bullet> v)\"", "lemma mult_smult_distrib: assumes A: \"A \\<in> carrier_mat nr n\" and B: \"B \\<in> carrier_mat n nc\"\n  shows \"A * (k \\<cdot>\\<^sub>m B) = (k :: 'a :: comm_semiring_0) \\<cdot>\\<^sub>m (A * B)\"", "lemma add_smult_distrib_left_mat: assumes \"A \\<in> carrier_mat nr nc\" \"B \\<in> carrier_mat nr nc\"\n  shows \"k \\<cdot>\\<^sub>m (A + B) = (k :: 'a :: semiring) \\<cdot>\\<^sub>m A + k \\<cdot>\\<^sub>m B\"", "lemma add_smult_distrib_right_mat: assumes \"A \\<in> carrier_mat nr nc\"\n  shows \"(k + l) \\<cdot>\\<^sub>m A = (k :: 'a :: semiring) \\<cdot>\\<^sub>m A + l \\<cdot>\\<^sub>m A\"", "lemma mult_smult_assoc_mat: assumes A: \"A \\<in> carrier_mat nr n\" and B: \"B \\<in> carrier_mat n nc\"\n  shows \"(k \\<cdot>\\<^sub>m A) * B = (k :: 'a :: comm_semiring_0) \\<cdot>\\<^sub>m (A * B)\"", "lemma similar_matD: assumes \"similar_mat A B\"\n  shows \"\\<exists> n P Q. {A,B,P,Q} \\<subseteq> carrier_mat n n \\<and> P * Q = 1\\<^sub>m n \\<and> Q * P = 1\\<^sub>m n \\<and> A = P * B * Q\"", "lemma similar_matI: assumes \"{A,B,P,Q} \\<subseteq> carrier_mat n n\" \"P * Q = 1\\<^sub>m n\" \"Q * P = 1\\<^sub>m n\" \"A = P * B * Q\"\n  shows \"similar_mat A B\"", "lemma pow_mat_dim[simp]:\n  \"dim_row (A ^\\<^sub>m k) = dim_row A\"\n  \"dim_col (A ^\\<^sub>m k) = (if k = 0 then dim_row A else dim_col A)\"", "lemma pow_mat_dim_square[simp]:\n  \"A \\<in> carrier_mat n n \\<Longrightarrow> dim_row (A ^\\<^sub>m k) = n\"\n  \"A \\<in> carrier_mat n n \\<Longrightarrow> dim_col (A ^\\<^sub>m k) = n\"", "lemma pow_carrier_mat[simp]: \"A \\<in> carrier_mat n n \\<Longrightarrow> A ^\\<^sub>m k \\<in> carrier_mat n n\"", "lemma prod_list_diag_prod: \"prod_list (diag_mat A) = (\\<Prod> i = 0 ..< dim_row A. A $$ (i,i))\"", "lemma diag_mat_transpose[simp]: \"dim_row A = dim_col A \\<Longrightarrow>\n  diag_mat (transpose_mat A) = diag_mat A\"", "lemma diag_mat_zero[simp]: \"diag_mat (0\\<^sub>m n n) = replicate n 0\"", "lemma diag_mat_one[simp]: \"diag_mat (1\\<^sub>m n) = replicate n 1\"", "lemma pow_mat_ring_pow: assumes A: \"(A :: ('a :: semiring_1)mat) \\<in> carrier_mat n n\"\n  shows \"A ^\\<^sub>m k = A [^]\\<^bsub>ring_mat TYPE('a) n b\\<^esub> k\"\n  (is \"_ = A [^]\\<^bsub>?C\\<^esub> k\")", "lemma sum_mat_0[simp]: \"sum_mat (0\\<^sub>m nr nc) = (0 :: 'a :: comm_monoid_add)\"", "lemma sum_mat_add: assumes A: \"(A :: 'a :: comm_monoid_add mat) \\<in> carrier_mat nr nc\" and B: \"B \\<in> carrier_mat nr nc\"\n  shows \"sum_mat (A + B) = sum_mat A + sum_mat B\"", "lemma dim_update_vec[simp]:\n  \"dim_vec (v |\\<^sub>v i \\<mapsto> a) = dim_vec v\"", "lemma index_update_vec1[simp]:\n  assumes \"i < dim_vec v\" shows \"(v |\\<^sub>v i \\<mapsto> a) $ i = a\"", "lemma index_update_vec2[simp]:\n  assumes \"i' \\<noteq> i\" shows \"(v |\\<^sub>v i \\<mapsto> a) $ i' = v $ i'\"", "lemma dim_update_mat[simp]:\n  \"dim_row (A |\\<^sub>m ij \\<mapsto> a) = dim_row A\"\n  \"dim_col (A |\\<^sub>m ij \\<mapsto> a) = dim_col A\"", "lemma index_update_mat1[simp]:\n  assumes \"i < dim_row A\" \"j < dim_col A\" shows \"(A |\\<^sub>m (i,j) \\<mapsto> a) $$ (i,j) = a\"", "lemma index_update_mat2[simp]:\n  assumes i': \"i' < dim_row A\" and j': \"j' < dim_col A\" and neq: \"(i',j') \\<noteq> ij\"\n  shows \"(A |\\<^sub>m ij \\<mapsto> a) $$ (i',j') = A $$ (i',j')\"", "lemma index_append_vec[simp]: \"i < dim_vec v + dim_vec w\n  \\<Longrightarrow> (v @\\<^sub>v w) $ i = (if i < dim_vec v then v $ i else w $ (i - dim_vec v))\"\n  \"dim_vec (v @\\<^sub>v w) = dim_vec v + dim_vec w\"", "lemma append_carrier_vec[simp,intro]:\n  \"v \\<in> carrier_vec n1 \\<Longrightarrow> w \\<in> carrier_vec n2 \\<Longrightarrow> v @\\<^sub>v w \\<in> carrier_vec (n1 + n2)\"", "lemma scalar_prod_append: assumes \"v1 \\<in> carrier_vec n1\" \"v2 \\<in> carrier_vec n2\"\n  \"w1 \\<in> carrier_vec n1\" \"w2 \\<in> carrier_vec n2\"\n  shows \"(v1 @\\<^sub>v v2) \\<bullet> (w1 @\\<^sub>v w2) = v1 \\<bullet> w1 + v2 \\<bullet> w2\"", "lemma dim_vec_first[simp]: \"dim_vec (vec_first v n) = n\"", "lemma dim_vec_last[simp]: \"dim_vec (vec_last v n) = n\"", "lemma vec_first_carrier[simp]: \"vec_first v n \\<in> carrier_vec n\"", "lemma vec_last_carrier[simp]: \"vec_last v n \\<in> carrier_vec n\"", "lemma vec_first_last_append[simp]:\n  assumes \"v \\<in> carrier_vec (n+m)\" shows \"vec_first v n @\\<^sub>v vec_last v m = v\"", "lemma append_vec_le: assumes \"v \\<in> carrier_vec n\" and w: \"w \\<in> carrier_vec n\" \n  shows \"v @\\<^sub>v v' \\<le> w @\\<^sub>v w' \\<longleftrightarrow> v \\<le> w \\<and> v' \\<le> w'\"", "lemma all_vec_append: \"(\\<forall> x \\<in> carrier_vec (n + m). P x) \\<longleftrightarrow> (\\<forall> x1 \\<in> carrier_vec n. \\<forall> x2 \\<in> carrier_vec m. P (x1 @\\<^sub>v x2))\"", "lemma index_mat_four_block[simp]:\n  \"i < dim_row A + dim_row D \\<Longrightarrow> j < dim_col A + dim_col D \\<Longrightarrow> four_block_mat A B C D $$ (i,j)\n  = (if i < dim_row A then\n      if j < dim_col A then A $$ (i,j) else B $$ (i,j - dim_col A)\n      else if j < dim_col A then C $$ (i - dim_row A, j) else D $$ (i - dim_row A, j - dim_col A))\"\n  \"dim_row (four_block_mat A B C D) = dim_row A + dim_row D\"\n  \"dim_col (four_block_mat A B C D) = dim_col A + dim_col D\"", "lemma four_block_carrier_mat[simp]:\n  \"A \\<in> carrier_mat nr1 nc1 \\<Longrightarrow> D \\<in> carrier_mat nr2 nc2 \\<Longrightarrow>\n  four_block_mat A B C D \\<in> carrier_mat (nr1 + nr2) (nc1 + nc2)\"", "lemma cong_four_block_mat: \"A1 = B1 \\<Longrightarrow> A2 = B2 \\<Longrightarrow> A3 = B3 \\<Longrightarrow> A4 = B4 \\<Longrightarrow>\n  four_block_mat A1 A2 A3 A4 = four_block_mat B1 B2 B3 B4\"", "lemma four_block_one_mat[simp]:\n  \"four_block_mat (1\\<^sub>m n1) (0\\<^sub>m n1 n2) (0\\<^sub>m n2 n1) (1\\<^sub>m n2) = 1\\<^sub>m (n1 + n2)\"", "lemma four_block_zero_mat[simp]:\n  \"four_block_mat (0\\<^sub>m nr1 nc1) (0\\<^sub>m nr1 nc2) (0\\<^sub>m nr2 nc1) (0\\<^sub>m nr2 nc2) = 0\\<^sub>m (nr1 + nr2) (nc1 + nc2)\"", "lemma row_four_block_mat:\n  assumes c: \"A \\<in> carrier_mat nr1 nc1\" \"B \\<in> carrier_mat nr1 nc2\"\n  \"C \\<in> carrier_mat nr2 nc1\" \"D \\<in> carrier_mat nr2 nc2\"\n  shows\n  \"i < nr1 \\<Longrightarrow> row (four_block_mat A B C D) i = row A i @\\<^sub>v row B i\" (is \"_ \\<Longrightarrow> ?AB\")\n  \"\\<not> i < nr1 \\<Longrightarrow> i < nr1 + nr2 \\<Longrightarrow> row (four_block_mat A B C D) i = row C (i - nr1) @\\<^sub>v row D (i - nr1)\"\n  (is \"_ \\<Longrightarrow> _ \\<Longrightarrow> ?CD\")", "lemma col_four_block_mat:\n  assumes c: \"A \\<in> carrier_mat nr1 nc1\" \"B \\<in> carrier_mat nr1 nc2\"\n  \"C \\<in> carrier_mat nr2 nc1\" \"D \\<in> carrier_mat nr2 nc2\"\n  shows\n  \"j < nc1 \\<Longrightarrow> col (four_block_mat A B C D) j = col A j @\\<^sub>v col C j\" (is \"_ \\<Longrightarrow> ?AC\")\n  \"\\<not> j < nc1 \\<Longrightarrow> j < nc1 + nc2 \\<Longrightarrow> col (four_block_mat A B C D) j = col B (j - nc1) @\\<^sub>v col D (j - nc1)\"\n  (is \"_ \\<Longrightarrow> _ \\<Longrightarrow> ?BD\")", "lemma mult_four_block_mat: assumes\n  c1: \"A1 \\<in> carrier_mat nr1 n1\" \"B1 \\<in> carrier_mat nr1 n2\" \"C1 \\<in> carrier_mat nr2 n1\" \"D1 \\<in> carrier_mat nr2 n2\" and\n  c2: \"A2 \\<in> carrier_mat n1 nc1\" \"B2 \\<in> carrier_mat n1 nc2\" \"C2 \\<in> carrier_mat n2 nc1\" \"D2 \\<in> carrier_mat n2 nc2\"\n  shows \"four_block_mat A1 B1 C1 D1 * four_block_mat A2 B2 C2 D2\n  = four_block_mat (A1 * A2 + B1 * C2) (A1 * B2 + B1 * D2)\n    (C1 * A2 + D1 * C2) (C1 * B2 + D1 * D2)\" (is \"?M1 * ?M2 = _\")", "lemma carrier_append_rows[simp,intro]: \"A \\<in> carrier_mat nr1 nc \\<Longrightarrow> B \\<in> carrier_mat nr2 nc \\<Longrightarrow>\n  A @\\<^sub>r B \\<in> carrier_mat (nr1 + nr2) nc\"", "lemma col_mult2[simp]:\n  assumes A: \"A : carrier_mat nr n\"\n      and B: \"B : carrier_mat n nc\"\n      and j: \"j < nc\"\n  shows \"col (A * B) j = A *\\<^sub>v col B j\"", "lemma mat_vec_as_mat_mat_mult: assumes A: \"A \\<in> carrier_mat nr nc\" \n  and v: \"v \\<in> carrier_vec nc\" \nshows \"A *\\<^sub>v v = col (A * mat_of_cols nc [v]) 0\"", "lemma mat_mult_append: assumes A: \"A \\<in> carrier_mat nr1 nc\" \n  and B: \"B \\<in> carrier_mat nr2 nc\" \n  and v: \"v \\<in> carrier_vec nc\" \nshows \"(A @\\<^sub>r B) *\\<^sub>v v = (A *\\<^sub>v v) @\\<^sub>v (B *\\<^sub>v v)\"", "lemma append_rows_le: assumes A: \"A \\<in> carrier_mat nr1 nc\" \n  and B: \"B \\<in> carrier_mat nr2 nc\" \n  and a: \"a \\<in> carrier_vec nr1\" \n  and v: \"v \\<in> carrier_vec nc\"\nshows \"(A @\\<^sub>r B) *\\<^sub>v v \\<le> (a @\\<^sub>v b) \\<longleftrightarrow> A *\\<^sub>v v \\<le> a \\<and> B *\\<^sub>v v \\<le> b\"", "lemma elements_four_block_mat:\n  assumes c: \"A \\<in> carrier_mat nr1 nc1\" \"B \\<in> carrier_mat nr1 nc2\"\n  \"C \\<in> carrier_mat nr2 nc1\" \"D \\<in> carrier_mat nr2 nc2\"\n  shows\n  \"elements_mat (four_block_mat A B C D) \\<subseteq>\n   elements_mat A \\<union> elements_mat B \\<union> elements_mat C \\<union> elements_mat D\"\n   (is \"elements_mat ?four \\<subseteq> _\")", "lemma assoc_four_block_mat: fixes FB :: \"'a mat \\<Rightarrow> 'a mat \\<Rightarrow> 'a :: zero mat\"\n  defines FB: \"FB \\<equiv> \\<lambda> Bb Cc. four_block_mat Bb (0\\<^sub>m (dim_row Bb) (dim_col Cc)) (0\\<^sub>m (dim_row Cc) (dim_col Bb)) Cc\"\n  shows \"FB A (FB B C) = FB (FB A B) C\" (is \"?L = ?R\")", "lemma split_block: assumes res: \"split_block A sr1 sc1 = (A1,A2,A3,A4)\"\n  and dims: \"dim_row A = sr1 + sr2\" \"dim_col A = sc1 + sc2\"\n  shows \"A1 \\<in> carrier_mat sr1 sc1\" \"A2 \\<in> carrier_mat sr1 sc2\"\n    \"A3 \\<in> carrier_mat sr2 sc1\" \"A4 \\<in> carrier_mat sr2 sc2\"\n    \"A = four_block_mat A1 A2 A3 A4\"", "lemma dim_diag_block_mat:\n  \"dim_row (diag_block_mat As) = sum_list (map dim_row As)\" (is \"?row\")\n  \"dim_col (diag_block_mat As) = sum_list (map dim_col As)\" (is \"?col\")", "lemma diag_block_mat_singleton[simp]: \"diag_block_mat [A] = A\"", "lemma diag_block_mat_append: \"diag_block_mat (As @ Bs) =\n  (let A = diag_block_mat As; B = diag_block_mat Bs\n  in four_block_mat A (0\\<^sub>m (dim_row A) (dim_col B)) (0\\<^sub>m (dim_row B) (dim_col A)) B)\"", "lemma diag_block_mat_last: \"diag_block_mat (As @ [B]) =\n  (let A = diag_block_mat As\n  in four_block_mat A (0\\<^sub>m (dim_row A) (dim_col B)) (0\\<^sub>m (dim_row B) (dim_col A)) B)\"", "lemma diag_block_mat_square:\n  \"Ball (set As) square_mat \\<Longrightarrow> square_mat (diag_block_mat As)\"", "lemma diag_block_one_mat[simp]:\n  \"diag_block_mat (map (\\<lambda>A. 1\\<^sub>m (dim_row A)) As) = (1\\<^sub>m (sum_list (map dim_row As)))\"", "lemma elements_diag_block_mat:\n  \"elements_mat (diag_block_mat As) \\<subseteq> {0} \\<union> \\<Union> (set (map elements_mat As))\"", "lemma diag_block_pow_mat: assumes sq: \"Ball (set As) square_mat\"\n  shows \"diag_block_mat As ^\\<^sub>m n = diag_block_mat (map (\\<lambda> A. A ^\\<^sub>m n) As)\" (is \"?As ^\\<^sub>m _ = _\")", "lemma diag_block_upper_triangular: assumes\n    \"\\<And> A i j. A \\<in> set As \\<Longrightarrow> j < i \\<Longrightarrow> i < dim_row A \\<Longrightarrow> A $$ (i,j) = 0\"\n  and \"Ball (set As) square_mat\"\n  and \"j < i\" \"i < dim_row (diag_block_mat As)\"\n  shows \"diag_block_mat As $$ (i,j) = 0\"", "lemma smult_four_block_mat: assumes c: \"A \\<in> carrier_mat nr1 nc1\" \"B \\<in> carrier_mat nr1 nc2\"\n  \"C \\<in> carrier_mat nr2 nc1\" \"D \\<in> carrier_mat nr2 nc2\"\n  shows \"a \\<cdot>\\<^sub>m four_block_mat A B C D = four_block_mat (a \\<cdot>\\<^sub>m A) (a \\<cdot>\\<^sub>m B) (a \\<cdot>\\<^sub>m C) (a \\<cdot>\\<^sub>m D)\"", "lemma map_four_block_mat: assumes c: \"A \\<in> carrier_mat nr1 nc1\" \"B \\<in> carrier_mat nr1 nc2\"\n  \"C \\<in> carrier_mat nr2 nc1\" \"D \\<in> carrier_mat nr2 nc2\"\n  shows \"map_mat f (four_block_mat A B C D) = four_block_mat (map_mat f A) (map_mat f B) (map_mat f C) (map_mat f D)\"", "lemma add_four_block_mat: assumes\n  c1: \"A1 \\<in> carrier_mat nr1 nc1\" \"B1 \\<in> carrier_mat nr1 nc2\" \"C1 \\<in> carrier_mat nr2 nc1\" \"D1 \\<in> carrier_mat nr2 nc2\" and\n  c2: \"A2 \\<in> carrier_mat nr1 nc1\" \"B2 \\<in> carrier_mat nr1 nc2\" \"C2 \\<in> carrier_mat nr2 nc1\" \"D2 \\<in> carrier_mat nr2 nc2\"\n  shows \"four_block_mat A1 B1 C1 D1 + four_block_mat A2 B2 C2 D2\n  = four_block_mat (A1 + A2) (B1 + B2) (C1 + C2) (D1 + D2)\"", "lemma diag_four_block_mat: assumes c: \"A \\<in> carrier_mat n1 n1\"\n   \"D \\<in> carrier_mat n2 n2\"\n  shows \"diag_mat (four_block_mat A B C D) = diag_mat A @ diag_mat D\"", "lemma mk_diagonal_dim:\n  \"dim_row (mk_diagonal as) = length as\" \"dim_col (mk_diagonal as) = length as\"", "lemma mk_diagonal_diagonal: \"diagonal_mat (mk_diagonal as)\"", "lemma orthogonal_matD[elim]:\n  \"orthogonal_mat A \\<Longrightarrow>\n   i < dim_col A \\<Longrightarrow> j < dim_col A \\<Longrightarrow> (col A i \\<bullet> col A j = 0) = (i \\<noteq> j)\"", "lemma orthogonal_matI[intro]:\n  \"(\\<And>i j. i < dim_col A \\<Longrightarrow> j < dim_col A \\<Longrightarrow> (col A i \\<bullet> col A j = 0) = (i \\<noteq> j)) \\<Longrightarrow>\n   orthogonal_mat A\"", "lemma orthogonalD[elim]:\n  \"orthogonal vs \\<Longrightarrow> i < length vs \\<Longrightarrow> j < length vs \\<Longrightarrow>\n  (nth vs i \\<bullet> nth vs j = 0) = (i \\<noteq> j)\"", "lemma orthogonalI[intro]:\n  \"(\\<And>i j. i < length vs \\<Longrightarrow> j < length vs \\<Longrightarrow> (nth vs i \\<bullet> nth vs j = 0) = (i \\<noteq> j)) \\<Longrightarrow>\n   orthogonal vs\"", "lemma transpose_four_block_mat: assumes *: \"A \\<in> carrier_mat nr1 nc1\" \"B \\<in> carrier_mat nr1 nc2\"\n  \"C \\<in> carrier_mat nr2 nc1\" \"D \\<in> carrier_mat nr2 nc2\"\n  shows \"transpose_mat (four_block_mat A B C D) =\n    four_block_mat (transpose_mat A) (transpose_mat C) (transpose_mat B) (transpose_mat D)\"", "lemma zero_transpose_mat[simp]: \"transpose_mat (0\\<^sub>m n m) = (0\\<^sub>m m n)\"", "lemma upper_triangular_four_block: assumes AD: \"A \\<in> carrier_mat n n\" \"D \\<in> carrier_mat m m\"\n  and ut: \"upper_triangular A\" \"upper_triangular D\"\n  shows \"upper_triangular (four_block_mat A B (0\\<^sub>m m n) D)\"", "lemma pow_four_block_mat: assumes A: \"A \\<in> carrier_mat n n\"\n  and B: \"B \\<in> carrier_mat m m\"\n  shows \"(four_block_mat A (0\\<^sub>m n m) (0\\<^sub>m m n) B) ^\\<^sub>m k =\n    four_block_mat (A ^\\<^sub>m k) (0\\<^sub>m n m) (0\\<^sub>m m n) (B ^\\<^sub>m k)\"", "lemma uminus_scalar_prod:\n  assumes [simp]: \"v : carrier_vec n\" \"w : carrier_vec n\"\n  shows \"- ((v::'a::field vec) \\<bullet> w) = (- v) \\<bullet> w\"", "lemma append_vec_eq:\n  assumes [simp]: \"v : carrier_vec n\" \"v' : carrier_vec n\"\n  shows [simp]: \"v @\\<^sub>v w = v' @\\<^sub>v w' \\<longleftrightarrow> v = v' \\<and> w = w'\" (is \"?L \\<longleftrightarrow> ?R\")", "lemma append_vec_add:\n  assumes [simp]: \"v : carrier_vec n\" \"v' : carrier_vec n\"\n      and [simp]: \"w : carrier_vec m\" \"w' : carrier_vec m\"\n  shows \"(v @\\<^sub>v w) + (v' @\\<^sub>v w') = (v + v') @\\<^sub>v (w + w')\" (is \"?L = ?R\")", "lemma mult_mat_vec_split:\n  assumes A: \"A : carrier_mat n n\"\n      and D: \"D : carrier_mat m m\"\n      and a: \"a : carrier_vec n\"\n      and d: \"d : carrier_vec m\"\n  shows \"four_block_mat A (0\\<^sub>m n m) (0\\<^sub>m m n) D *\\<^sub>v (a @\\<^sub>v d) = A *\\<^sub>v a @\\<^sub>v D *\\<^sub>v d\"\n    (is \"?A00D *\\<^sub>v _ = ?r\")", "lemma similar_mat_witI: assumes \"P * Q = 1\\<^sub>m n\" \"Q * P = 1\\<^sub>m n\" \"A = P * B * Q\"\n  \"A \\<in> carrier_mat n n\" \"B \\<in> carrier_mat n n\" \"P \\<in> carrier_mat n n\" \"Q \\<in> carrier_mat n n\"\n  shows \"similar_mat_wit A B P Q\"", "lemma similar_mat_witD: assumes \"n = dim_row A\" \"similar_mat_wit A B P Q\"\n  shows \"P * Q = 1\\<^sub>m n\" \"Q * P = 1\\<^sub>m n\" \"A = P * B * Q\"\n  \"A \\<in> carrier_mat n n\" \"B \\<in> carrier_mat n n\" \"P \\<in> carrier_mat n n\" \"Q \\<in> carrier_mat n n\"", "lemma similar_mat_witD2: assumes \"A \\<in> carrier_mat n m\" \"similar_mat_wit A B P Q\"\n  shows \"P * Q = 1\\<^sub>m n\" \"Q * P = 1\\<^sub>m n\" \"A = P * B * Q\"\n  \"A \\<in> carrier_mat n n\" \"B \\<in> carrier_mat n n\" \"P \\<in> carrier_mat n n\" \"Q \\<in> carrier_mat n n\"", "lemma similar_mat_wit_sym: assumes sim: \"similar_mat_wit A B P Q\"\n  shows \"similar_mat_wit B A Q P\"", "lemma similar_mat_wit_refl: assumes A: \"A \\<in> carrier_mat n n\"\n  shows \"similar_mat_wit A A (1\\<^sub>m n) (1\\<^sub>m n)\"", "lemma similar_mat_wit_trans: assumes AB: \"similar_mat_wit A B P Q\"\n  and BC: \"similar_mat_wit B C P' Q'\"\n  shows \"similar_mat_wit A C (P * P') (Q' * Q)\"", "lemma similar_mat_refl: \"A \\<in> carrier_mat n n \\<Longrightarrow> similar_mat A A\"", "lemma similar_mat_trans: \"similar_mat A B \\<Longrightarrow> similar_mat B C \\<Longrightarrow> similar_mat A C\"", "lemma similar_mat_sym: \"similar_mat A B \\<Longrightarrow> similar_mat B A\"", "lemma similar_mat_wit_four_block: assumes\n      1: \"similar_mat_wit A1 B1 P1 Q1\"\n  and 2: \"similar_mat_wit A2 B2 P2 Q2\"\n  and URA: \"URA = (P1 * UR * Q2)\"\n  and LLA: \"LLA = (P2 * LL * Q1)\"\n  and A1: \"A1 \\<in> carrier_mat n n\"\n  and A2: \"A2 \\<in> carrier_mat m m\"\n  and LL: \"LL \\<in> carrier_mat m n\"\n  and UR: \"UR \\<in> carrier_mat n m\"\n  shows \"similar_mat_wit (four_block_mat A1 URA LLA A2) (four_block_mat B1 UR LL B2)\n    (four_block_mat P1 (0\\<^sub>m n m) (0\\<^sub>m m n) P2) (four_block_mat Q1 (0\\<^sub>m n m) (0\\<^sub>m m n) Q2)\"\n  (is \"similar_mat_wit ?A ?B ?P ?Q\")", "lemma similar_mat_four_block_0_ex: assumes\n      1: \"similar_mat A1 B1\"\n  and 2: \"similar_mat A2 B2\"\n  and A0: \"A0 \\<in> carrier_mat n m\"\n  and A1: \"A1 \\<in> carrier_mat n n\"\n  and A2: \"A2 \\<in> carrier_mat m m\"\n  shows \"\\<exists> B0. B0 \\<in> carrier_mat n m \\<and> similar_mat (four_block_mat A1 A0 (0\\<^sub>m m n) A2)\n    (four_block_mat B1 B0 (0\\<^sub>m m n) B2)\"", "lemma similar_mat_four_block_0_0: assumes\n      1: \"similar_mat A1 B1\"\n  and 2: \"similar_mat A2 B2\"\n  and A1: \"A1 \\<in> carrier_mat n n\"\n  and A2: \"A2 \\<in> carrier_mat m m\"\n  shows \"similar_mat (four_block_mat A1 (0\\<^sub>m n m) (0\\<^sub>m m n) A2)\n    (four_block_mat B1 (0\\<^sub>m n m) (0\\<^sub>m m n) B2)\"", "lemma similar_diag_mat_block_mat: assumes \"\\<And> A B. (A,B) \\<in> set Ms \\<Longrightarrow> similar_mat A B\"\n  shows \"similar_mat (diag_block_mat (map fst Ms)) (diag_block_mat (map snd Ms))\"", "lemma similar_mat_wit_pow: assumes wit: \"similar_mat_wit A B P Q\"\n  shows \"similar_mat_wit (A ^\\<^sub>m k) (B ^\\<^sub>m k) P Q\"", "lemma similar_mat_wit_pow_id: \"similar_mat_wit A B P Q \\<Longrightarrow> A ^\\<^sub>m k = P * B ^\\<^sub>m k * Q\"", "lemma vec_hom_zero: \"vec\\<^sub>h (0\\<^sub>v n) = 0\\<^sub>v n\"", "lemma mat_hom_one: \"mat\\<^sub>h (1\\<^sub>m n) = 1\\<^sub>m n\"", "lemma mat_hom_mult: assumes A: \"A \\<in> carrier_mat nr n\" and B: \"B \\<in> carrier_mat n nc\"\n  shows \"mat\\<^sub>h (A * B) = mat\\<^sub>h A * mat\\<^sub>h B\"", "lemma mult_mat_vec_hom: assumes A: \"A \\<in> carrier_mat nr n\" and v: \"v \\<in> carrier_vec n\"\n  shows \"vec\\<^sub>h (A *\\<^sub>v v) = mat\\<^sub>h A *\\<^sub>v vec\\<^sub>h v\"", "lemma vec_eq_iff: \"(x = y) = (dim_vec x = dim_vec y \\<and> (\\<forall> i < dim_vec y. x $ i = y $ i))\" (is \"?l = ?r\")", "lemma mat_eq_iff: \"(x = y) = (dim_row x = dim_row y \\<and> dim_col x = dim_col y \\<and>\n  (\\<forall> i j. i < dim_row y \\<longrightarrow> j < dim_col y \\<longrightarrow> x $$ (i,j) = y $$ (i,j)))\" (is \"?l = ?r\")", "lemma (in inj_semiring_hom) vec_hom_zero_iff[simp]: \"(vec\\<^sub>h x = 0\\<^sub>v n) = (x = 0\\<^sub>v n)\"", "lemma (in inj_semiring_hom) mat_hom_inj: \"mat\\<^sub>h A = mat\\<^sub>h B \\<Longrightarrow> A = B\"", "lemma (in inj_semiring_hom) vec_hom_inj: \"vec\\<^sub>h v = vec\\<^sub>h w \\<Longrightarrow> v = w\"", "lemma (in semiring_hom) mat_hom_pow: assumes A: \"A \\<in> carrier_mat n n\"\n  shows \"mat\\<^sub>h (A ^\\<^sub>m k) = (mat\\<^sub>h A) ^\\<^sub>m k\"", "lemma (in semiring_hom) hom_sum_mat: \"hom (sum_mat A) = sum_mat (mat\\<^sub>h A)\"", "lemma (in semiring_hom) vec_hom_smult: \"vec\\<^sub>h (ev \\<cdot>\\<^sub>v v) = hom ev \\<cdot>\\<^sub>v vec\\<^sub>h v\"", "lemma minus_scalar_prod_distrib: fixes v\\<^sub>1 :: \"'a :: ring vec\"\n  assumes v: \"v\\<^sub>1 \\<in> carrier_vec n\" \"v\\<^sub>2 \\<in> carrier_vec n\" \"v\\<^sub>3 \\<in> carrier_vec n\"\n  shows \"(v\\<^sub>1 - v\\<^sub>2) \\<bullet> v\\<^sub>3 = v\\<^sub>1 \\<bullet> v\\<^sub>3 - v\\<^sub>2 \\<bullet> v\\<^sub>3\"", "lemma scalar_prod_minus_distrib: fixes v\\<^sub>1 :: \"'a :: ring vec\"\n  assumes v: \"v\\<^sub>1 \\<in> carrier_vec n\" \"v\\<^sub>2 \\<in> carrier_vec n\" \"v\\<^sub>3 \\<in> carrier_vec n\"\n  shows \"v\\<^sub>1 \\<bullet> (v\\<^sub>2 - v\\<^sub>3) = v\\<^sub>1 \\<bullet> v\\<^sub>2 - v\\<^sub>1 \\<bullet> v\\<^sub>3\"", "lemma uminus_add_minus_vec:\n  assumes \"l \\<in> carrier_vec n\" \"r \\<in> carrier_vec n\"\n  shows \"- ((l::'a :: ab_group_add vec) + r) = (- l - r)\"", "lemma minus_add_minus_vec: fixes u :: \"'a :: ab_group_add vec\"\n  assumes \"u \\<in> carrier_vec n\" \"v \\<in> carrier_vec n\" \"w \\<in> carrier_vec n\"\n  shows \"u - (v + w) = u - v - w\"", "lemma uminus_add_minus_mat:\n  assumes \"l \\<in> carrier_mat nr nc\" \"r \\<in> carrier_mat nr nc\"\n  shows \"- ((l::'a :: ab_group_add mat) + r) = (- l - r)\"", "lemma minus_add_minus_mat: fixes u :: \"'a :: ab_group_add mat\"\n  assumes \"u \\<in> carrier_mat nr nc\" \"v \\<in> carrier_mat nr nc\" \"w \\<in> carrier_mat nr nc\"\n  shows \"u - (v + w) = u - v - w\"", "lemma uminus_uminus_vec[simp]: \"- (- (v::'a:: group_add vec)) = v\"", "lemma uminus_eq_vec[simp]: \"- (v::'a:: group_add vec) = - w \\<longleftrightarrow> v = w\"", "lemma uminus_uminus_mat[simp]: \"- (- (A::'a:: group_add mat)) = A\"", "lemma uminus_eq_mat[simp]: \"- (A::'a:: group_add mat) = - B \\<longleftrightarrow> A = B\"", "lemma smult_zero_mat[simp]: \"(k :: 'a :: mult_zero) \\<cdot>\\<^sub>m 0\\<^sub>m nr nc = 0\\<^sub>m nr nc\"", "lemma similar_mat_wit_smult: fixes A :: \"'a :: comm_ring_1 mat\"\n  assumes \"similar_mat_wit A B P Q\"\n  shows \"similar_mat_wit (k \\<cdot>\\<^sub>m A) (k \\<cdot>\\<^sub>m B) P Q\"", "lemma similar_mat_smult: fixes A :: \"'a :: comm_ring_1 mat\"\n  assumes \"similar_mat A B\"\n  shows \"similar_mat (k \\<cdot>\\<^sub>m A) (k \\<cdot>\\<^sub>m B)\"", "lemma mat_diag_dim[simp]: \"mat_diag n f \\<in> carrier_mat n n\"", "lemma mat_diag_mult_left: assumes A: \"A \\<in> carrier_mat n nr\"\n  shows \"mat_diag n f * A = Matrix.mat n nr (\\<lambda> (i,j). f i * A $$ (i,j))\"", "lemma mat_diag_mult_right: assumes A: \"A \\<in> carrier_mat nr n\"\n  shows \"A * mat_diag n f = Matrix.mat nr n (\\<lambda> (i,j). A $$ (i,j) * f j)\"", "lemma mat_diag_diag[simp]: \"mat_diag n f * mat_diag n g = mat_diag n (\\<lambda> i. f i * g i)\"", "lemma mat_diag_one[simp]: \"mat_diag n (\\<lambda> x. 1) = 1\\<^sub>m n\"", "lemma mat_of_row_carrier[simp,intro]: \n  \"y \\<in> carrier_vec n \\<Longrightarrow> mat_of_row y \\<in> carrier_mat 1 n\"\n  \"y \\<in> carrier_vec n \\<Longrightarrow> mat_of_row y \\<in> carrier_mat (Suc 0) n\"", "lemma mat_of_row_dim[simp]: \"dim_row (mat_of_row y) = 1\" \n  \"dim_col (mat_of_row y) = dim_vec y\"", "lemma mat_of_row_index[simp]: \"x < dim_vec y \\<Longrightarrow> mat_of_row y $$ (0,x) = y $ x\"", "lemma row_mat_of_row[simp]: \"row (mat_of_row y) 0 = y\"", "lemma mat_of_row_mult_append_rows: assumes y1: \"y1 \\<in> carrier_vec nr1\" \n  and y2: \"y2 \\<in> carrier_vec nr2\" \n  and A1: \"A1 \\<in> carrier_mat nr1 nc\" \n  and A2: \"A2 \\<in> carrier_mat nr2 nc\" \nshows \"mat_of_row (y1 @\\<^sub>v y2) * (A1 @\\<^sub>r A2) = \n  mat_of_row y1 * A1 + mat_of_row y2 * A2\"", "lemma vec_index_vCons_0 [simp]: \"vCons a v $ 0 = a\"", "lemma vec_index_vCons_Suc [simp]:\n  fixes v :: \"'a vec\"\n  shows \"vCons a v $ Suc n = v $ n\"", "lemma vec_index_vCons: \"vCons a v $ n = (if n = 0 then a else v $ (n - 1))\"", "lemma dim_vec_vCons [simp]: \"dim_vec (vCons a v) = Suc (dim_vec v)\"", "lemma vCons_carrier_vec[simp]: \"vCons a v \\<in> carrier_vec (Suc n) \\<longleftrightarrow> v \\<in> carrier_vec n\"", "lemma vec_Suc: \"vec (Suc n) f = vCons (f 0) (vec n (f \\<circ> Suc))\" (is \"?l = ?r\")", "lemma vec_cases [case_names vNil vCons, cases type: vec]:\n  assumes \"v = vNil \\<Longrightarrow> thesis\" and \"\\<And>a w. v = vCons a w \\<Longrightarrow> thesis\"\n  shows \"thesis\"", "lemma vec_induct [case_names vNil vCons, induct type: vec]:\n  assumes \"P vNil\" and \"\\<And>a v. P v \\<Longrightarrow> P (vCons a v)\"\n  shows \"P v\"", "lemma carrier_vec_induct [consumes 1, case_names 0 Suc, induct set:carrier_vec]:\n  assumes v: \"v \\<in> carrier_vec n\"\n    and 1: \"P 0 vNil\" and 2: \"\\<And>n a v. v \\<in> carrier_vec n \\<Longrightarrow> P n v \\<Longrightarrow> P (Suc n) (vCons a v)\"\n  shows \"P n v\"", "lemma vec_of_list_Cons[simp]: \"vec_of_list (a#as) = vCons a (vec_of_list as)\"", "lemma vec_of_list_Nil[simp]: \"vec_of_list [] = vNil\"", "lemma scalar_prod_vCons[simp]:\n  \"vCons a v \\<bullet> vCons b w = a * b + v \\<bullet> w\"", "lemma zero_vec_Suc: \"0\\<^sub>v (Suc n) = vCons 0 (0\\<^sub>v n)\"", "lemma zero_vec_zero[simp]: \"0\\<^sub>v 0 = vNil\"", "lemma vCons_eq_vCons[simp]: \"vCons a v = vCons b w \\<longleftrightarrow> a = b \\<and> v = w\" (is \"?l \\<longleftrightarrow> ?r\")", "lemma vec_carrier_vec[simp]: \"vec n f \\<in> carrier_vec m \\<longleftrightarrow> n = m\"", "lemma map_mat_transpose: \"(map_mat f A)\\<^sup>T = map_mat f A\\<^sup>T\"", "lemma cols_transpose[simp]: \"cols A\\<^sup>T = rows A\"", "lemma rows_transpose[simp]: \"rows A\\<^sup>T = cols A\"", "lemma list_of_vec_vec [simp]: \"list_of_vec (vec n f) = map f [0..<n]\"", "lemma list_of_vec_0 [simp]: \"list_of_vec (0\\<^sub>v n) = replicate n 0\"", "lemma diag_mat_map:\n  assumes M_carrier: \"M \\<in> carrier_mat n n\"\n  shows \"diag_mat (map_mat f M) = map f (diag_mat M)\"", "lemma mat_of_rows_map [simp]:\n  assumes x: \"set vs \\<subseteq> carrier_vec n\"\n  shows \"mat_of_rows n (map (map_vec f) vs) = map_mat f (mat_of_rows n vs)\"", "lemma mat_of_cols_map [simp]:\n  assumes x: \"set vs \\<subseteq> carrier_vec n\"\n  shows \"mat_of_cols n (map (map_vec f) vs) = map_mat f (mat_of_cols n vs)\"", "lemma vec_of_list_map [simp]: \"vec_of_list (map f xs) = map_vec f (vec_of_list xs)\"", "lemma map_vec: \"map_vec f (vec n g) = vec n (f o g)\"", "lemma mat_of_cols_Cons_index_0: \"i < n \\<Longrightarrow> mat_of_cols n (w # ws) $$ (i, 0) = w $ i\"", "lemma nth_map_out_of_bound: \"i \\<ge> length xs \\<Longrightarrow> map f xs ! i = [] ! (i - length xs)\"", "lemma mat_of_cols_Cons_index_Suc:\n  \"i < n \\<Longrightarrow> mat_of_cols n (w # ws) $$ (i, Suc j) = mat_of_cols n ws $$ (i,j)\"", "lemma mat_of_cols_index: \"i < n \\<Longrightarrow> j < length ws \\<Longrightarrow> mat_of_cols n ws $$ (i,j) = ws ! j $ i\"", "lemma mat_of_rows_index: \"i < length rs \\<Longrightarrow> j < n \\<Longrightarrow> mat_of_rows n rs $$ (i,j) = rs ! i $ j\"", "lemma transpose_mat_of_rows: \"(mat_of_rows n vs)\\<^sup>T = mat_of_cols n vs\"", "lemma transpose_mat_of_cols: \"(mat_of_cols n vs)\\<^sup>T = mat_of_rows n vs\"", "lemma nth_list_of_vec [simp]:\n  assumes \"i < dim_vec v\" shows \"list_of_vec v ! i = v $ i\"", "lemma length_list_of_vec [simp]:\n  \"length (list_of_vec v) = dim_vec v\"", "lemma vec_eq_0_iff:\n  \"v = 0\\<^sub>v n \\<longleftrightarrow> n = dim_vec v \\<and> (n = 0 \\<or> set (list_of_vec v) = {0})\" (is \"?l \\<longleftrightarrow> ?r\")", "lemma list_of_vec_vCons[simp]: \"list_of_vec (vCons a v) = a # list_of_vec v\" (is \"?l = ?r\")", "lemma append_vec_vCons[simp]: \"vCons a v @\\<^sub>v w = vCons a (v @\\<^sub>v w)\" (is \"?l = ?r\")", "lemma append_vec_vNil[simp]: \"vNil @\\<^sub>v v = v\"", "lemma list_of_vec_append[simp]: \"list_of_vec (v @\\<^sub>v w) = list_of_vec v @ list_of_vec w\"", "lemma transpose_mat_eq[simp]: \"A\\<^sup>T = B\\<^sup>T \\<longleftrightarrow> A = B\"", "lemma mat_col_eqI: assumes cols: \"\\<And> i. i < dim_col B \\<Longrightarrow> col A i = col B i\"\n  and dims: \"dim_row A = dim_row B\" \"dim_col A = dim_col B\"\nshows \"A = B\"", "lemma upper_triangular_imp_distinct:\n  assumes A: \"A \\<in> carrier_mat n n\"\n    and tri: \"upper_triangular A\"\n    and diag: \"0 \\<notin> set (diag_mat A)\"\n  shows \"distinct (rows A)\"", "lemma dim_vec_of_list[simp] :\"dim_vec (vec_of_list as) = length as\"", "lemma list_vec: \"list_of_vec (vec_of_list xs) = xs\"", "lemma vec_list: \"vec_of_list (list_of_vec v) = v\"", "lemma index_vec_of_list: \"i<length xs \\<Longrightarrow> (vec_of_list xs) $ i = xs ! i\"", "lemma vec_of_list_index: \"vec_of_list xs $ j = xs ! j\"", "lemma list_of_vec_index: \"list_of_vec v ! j = v $ j\"", "lemma list_of_vec_map: \"list_of_vec xs = map (($) xs) [0..<dim_vec xs]\"", "lemma index_component_mult:\nassumes \"i < dim_vec v\" \"i < dim_vec w\"\nshows \"component_mult v w $ i = v $ i * w $ i\"", "lemma dim_component_mult:\n\"dim_vec (component_mult v w) = min (dim_vec v) (dim_vec w)\"", "lemma vec_setE:\nassumes \"a \\<in> set\\<^sub>v v\"\nobtains i where \"v$i = a\" \"i<dim_vec v\"", "lemma vec_setI:\nassumes \"v$i = a\" \"i<dim_vec v\"\nshows \"a \\<in> set\\<^sub>v v\"", "lemma set_list_of_vec: \"set (list_of_vec v) = set\\<^sub>v v\"", "lemma conjugate_vCons [simp]:\n  \"conjugate (vCons a v) = vCons (conjugate a) (conjugate v)\"", "lemma dim_vec_conjugate[simp]: \"dim_vec (conjugate v) = dim_vec v\"", "lemma carrier_vec_conjugate[simp]: \"v \\<in> carrier_vec n \\<Longrightarrow> conjugate v \\<in> carrier_vec n\"", "lemma vec_index_conjugate[simp]:\n  shows \"i < dim_vec v \\<Longrightarrow> conjugate v $ i = conjugate (v $ i)\"", "lemma conjugate_add_vec:\n  fixes v w :: \"'a :: conjugatable_ring vec\"\n  assumes dim: \"v : carrier_vec n\" \"w : carrier_vec n\"\n  shows \"conjugate (v + w) = conjugate v + conjugate w\"", "lemma uminus_conjugate_vec:\n  fixes v w :: \"'a :: conjugatable_ring vec\"\n  shows \"- (conjugate v) = conjugate (- v)\"", "lemma conjugate_zero_vec[simp]:\n  \"conjugate (0\\<^sub>v n :: 'a :: conjugatable_ring vec) = 0\\<^sub>v n\"", "lemma conjugate_vec_0[simp]:\n  \"conjugate (vec 0 f) = vec 0 f\"", "lemma sprod_vec_0[simp]: \"v \\<bullet> vec 0 f = 0\"", "lemma conjugate_zero_iff_vec[simp]:\n  fixes v :: \"'a :: conjugatable_ring vec\"\n  shows \"conjugate v = 0\\<^sub>v n \\<longleftrightarrow> v = 0\\<^sub>v n\"", "lemma conjugate_smult_vec:\n  fixes k :: \"'a :: conjugatable_ring\"\n  shows \"conjugate (k \\<cdot>\\<^sub>v v) = conjugate k \\<cdot>\\<^sub>v conjugate v\"", "lemma conjugate_sprod_vec:\n  fixes v w :: \"'a :: conjugatable_ring vec\"\n  assumes v: \"v : carrier_vec n\" and w: \"w : carrier_vec n\"\n  shows \"conjugate (v \\<bullet> w) = conjugate v \\<bullet> conjugate w\"", "lemma conjugate_conjugate_sprod[simp]:\n  assumes v[simp]: \"v : carrier_vec n\" and w[simp]: \"w : carrier_vec n\"\n  shows \"conjugate (conjugate v \\<bullet> w) = v \\<bullet>c w\"", "lemma conjugate_vec_sprod_comm:\n  fixes v w :: \"'a :: {conjugatable_ring, comm_ring} vec\"\n  assumes \"v : carrier_vec n\" and \"w : carrier_vec n\"\n  shows \"v \\<bullet>c w = (conjugate w \\<bullet> v)\"", "lemma conjugate_square_ge_0_vec[intro!]:\n  fixes v :: \"'a :: conjugatable_ordered_ring vec\"\n  shows \"v \\<bullet>c v \\<ge> 0\"", "lemma conjugate_square_eq_0_vec[simp]:\n  fixes v :: \"'a :: {conjugatable_ordered_ring,semiring_no_zero_divisors} vec\"\n  assumes \"v \\<in> carrier_vec n\"\n  shows \"v \\<bullet>c v = 0 \\<longleftrightarrow> v = 0\\<^sub>v n\"", "lemma conjugate_square_greater_0_vec[simp]:\n  fixes v :: \"'a :: {conjugatable_ordered_ring,semiring_no_zero_divisors} vec\"\n  assumes \"v \\<in> carrier_vec n\"\n  shows \"v \\<bullet>c v > 0 \\<longleftrightarrow> v \\<noteq> 0\\<^sub>v n\"", "lemma vec_conjugate_rat[simp]: \"(conjugate :: rat vec \\<Rightarrow> rat vec) = (\\<lambda>x. x)\"", "lemma vec_conjugate_real[simp]: \"(conjugate :: real vec \\<Rightarrow> real vec) = (\\<lambda>x. x)\""], "translations": [["", "lemma carrier_vec_dim_vec[simp]: \"v \\<in> carrier_vec (dim_vec v)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. v \\<in> carrier_vec (dim_vec v)", "unfolding carrier_vec_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. v \\<in> {va. dim_vec va = dim_vec v}", "by auto"], ["", "lemma dim_vec[simp]: \"dim_vec (vec n f) = n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dim_vec (vec n f) = n", "by transfer simp"], ["", "lemma vec_carrier[simp]: \"vec n f \\<in> carrier_vec n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. vec n f \\<in> carrier_vec n", "unfolding carrier_vec_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. vec n f \\<in> {v. dim_vec v = n}", "by auto"], ["", "lemma index_vec[simp]: \"i < n \\<Longrightarrow> vec n f $ i = f i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. i < n \\<Longrightarrow> vec n f $ i = f i", "by transfer (simp add: mk_vec_def)"], ["", "lemma eq_vecI[intro]: \"(\\<And> i. i < dim_vec w \\<Longrightarrow> v $ i = w $ i) \\<Longrightarrow> dim_vec v = dim_vec w\n  \\<Longrightarrow> v = w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>i. i < dim_vec w \\<Longrightarrow> v $ i = w $ i;\n     dim_vec v = dim_vec w\\<rbrakk>\n    \\<Longrightarrow> v = w", "by (transfer, auto simp: mk_vec_def)"], ["", "lemma carrier_dim_vec: \"v \\<in> carrier_vec n \\<longleftrightarrow> dim_vec v = n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (v \\<in> carrier_vec n) = (dim_vec v = n)", "unfolding carrier_vec_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (v \\<in> {v. dim_vec v = n}) = (dim_vec v = n)", "by auto"], ["", "lemma carrier_vecD[simp]: \"v \\<in> carrier_vec n \\<Longrightarrow> dim_vec v = n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. v \\<in> carrier_vec n \\<Longrightarrow> dim_vec v = n", "using carrier_dim_vec"], ["proof (prove)\nusing this:\n  (?v \\<in> carrier_vec ?n) = (dim_vec ?v = ?n)\n\ngoal (1 subgoal):\n 1. v \\<in> carrier_vec n \\<Longrightarrow> dim_vec v = n", "by auto"], ["", "lemma carrier_vecI: \"dim_vec v = n \\<Longrightarrow> v \\<in> carrier_vec n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dim_vec v = n \\<Longrightarrow> v \\<in> carrier_vec n", "using carrier_dim_vec"], ["proof (prove)\nusing this:\n  (?v \\<in> carrier_vec ?n) = (dim_vec ?v = ?n)\n\ngoal (1 subgoal):\n 1. dim_vec v = n \\<Longrightarrow> v \\<in> carrier_vec n", "by auto"], ["", "instantiation vec :: (plus) plus\nbegin"], ["", "definition plus_vec :: \"'a vec \\<Rightarrow> 'a vec \\<Rightarrow> 'a :: plus vec\" where\n  \"v\\<^sub>1 + v\\<^sub>2 \\<equiv> vec (dim_vec v\\<^sub>2) (\\<lambda> i. v\\<^sub>1 $ i + v\\<^sub>2 $ i)\""], ["", "instance"], ["proof (prove)\ngoal (1 subgoal):\n 1. OFCLASS('a vec, plus_class)", ".."], ["", "end"], ["", "instantiation vec :: (minus) minus\nbegin"], ["", "definition minus_vec :: \"'a vec \\<Rightarrow> 'a vec \\<Rightarrow> 'a :: minus vec\" where\n  \"v\\<^sub>1 - v\\<^sub>2 \\<equiv> vec (dim_vec v\\<^sub>2) (\\<lambda> i. v\\<^sub>1 $ i - v\\<^sub>2 $ i)\""], ["", "instance"], ["proof (prove)\ngoal (1 subgoal):\n 1. OFCLASS('a vec, minus_class)", ".."], ["", "end"], ["", "definition\n  zero_vec :: \"nat \\<Rightarrow> 'a :: zero vec\" (\"0\\<^sub>v\")\n  where \"0\\<^sub>v n \\<equiv> vec n (\\<lambda> i. 0)\""], ["", "lemma zero_carrier_vec[simp]: \"0\\<^sub>v n \\<in> carrier_vec n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0\\<^sub>v n \\<in> carrier_vec n", "unfolding zero_vec_def carrier_vec_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. vec n (\\<lambda>i. 0::'a) \\<in> {v. dim_vec v = n}", "by auto"], ["", "lemma index_zero_vec[simp]: \"i < n \\<Longrightarrow> 0\\<^sub>v n $ i = 0\" \"dim_vec (0\\<^sub>v n) = n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (i < n \\<Longrightarrow> 0\\<^sub>v n $ i = (0::'a)) &&&\n    dim_vec (0\\<^sub>v n) = n", "unfolding zero_vec_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (i < n \\<Longrightarrow> vec n (\\<lambda>i. 0::'a) $ i = (0::'a)) &&&\n    dim_vec (vec n (\\<lambda>i. 0::'b)) = n", "by auto"], ["", "lemma vec_of_dim_0[simp]: \"dim_vec v = 0 \\<longleftrightarrow> v = 0\\<^sub>v 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (dim_vec v = 0) = (v = 0\\<^sub>v 0)", "by auto"], ["", "definition\n  unit_vec :: \"nat \\<Rightarrow> nat \\<Rightarrow> ('a :: zero_neq_one) vec\"\n  where \"unit_vec n i = vec n (\\<lambda> j. if j = i then 1 else 0)\""], ["", "lemma index_unit_vec[simp]:\n  \"i < n \\<Longrightarrow> j < n \\<Longrightarrow> unit_vec n i $ j = (if j = i then 1 else 0)\"\n  \"i < n \\<Longrightarrow> unit_vec n i $ i = 1\"\n  \"dim_vec (unit_vec n i) = n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lbrakk>i < n; j < n\\<rbrakk>\n     \\<Longrightarrow> unit_vec n i $ j =\n                       (if j = i then 1::'a else (0::'a))) &&&\n    (i < n \\<Longrightarrow> unit_vec n i $ i = (1::'b)) &&&\n    dim_vec (unit_vec n i) = n", "unfolding unit_vec_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lbrakk>i < n; j < n\\<rbrakk>\n     \\<Longrightarrow> vec n\n                        (\\<lambda>j. if j = i then 1::'a else (0::'a)) $\n                       j =\n                       (if j = i then 1::'a else (0::'a))) &&&\n    (i < n \\<Longrightarrow>\n     vec n (\\<lambda>j. if j = i then 1::'b else (0::'b)) $ i = (1::'b)) &&&\n    dim_vec (vec n (\\<lambda>j. if j = i then 1::'c else (0::'c))) = n", "by auto"], ["", "lemma unit_vec_eq[simp]:\n  assumes i: \"i < n\"\n  shows \"(unit_vec n i = unit_vec n j) = (i = j)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (unit_vec n i = unit_vec n j) = (i = j)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (unit_vec n i = unit_vec n j) = (i = j)", "have \"i \\<noteq> j \\<Longrightarrow> unit_vec n i $ i \\<noteq> unit_vec n j $ i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. i \\<noteq> j \\<Longrightarrow>\n    unit_vec n i $ i \\<noteq> unit_vec n j $ i", "unfolding unit_vec_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. i \\<noteq> j \\<Longrightarrow>\n    vec n (\\<lambda>j. if j = i then 1::'b else (0::'b)) $ i \\<noteq>\n    vec n (\\<lambda>ja. if ja = j then 1::'b else (0::'b)) $ i", "using i"], ["proof (prove)\nusing this:\n  i < n\n\ngoal (1 subgoal):\n 1. i \\<noteq> j \\<Longrightarrow>\n    vec n (\\<lambda>j. if j = i then 1::'b else (0::'b)) $ i \\<noteq>\n    vec n (\\<lambda>ja. if ja = j then 1::'b else (0::'b)) $ i", "by simp"], ["proof (state)\nthis:\n  i \\<noteq> j \\<Longrightarrow> unit_vec n i $ i \\<noteq> unit_vec n j $ i\n\ngoal (1 subgoal):\n 1. (unit_vec n i = unit_vec n j) = (i = j)", "then"], ["proof (chain)\npicking this:\n  i \\<noteq> j \\<Longrightarrow> unit_vec n i $ i \\<noteq> unit_vec n j $ i", "show ?thesis"], ["proof (prove)\nusing this:\n  i \\<noteq> j \\<Longrightarrow> unit_vec n i $ i \\<noteq> unit_vec n j $ i\n\ngoal (1 subgoal):\n 1. (unit_vec n i = unit_vec n j) = (i = j)", "by metis"], ["proof (state)\nthis:\n  (unit_vec n i = unit_vec n j) = (i = j)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma unit_vec_nonzero[simp]:\n  assumes i_n: \"i < n\" shows \"unit_vec n i \\<noteq> zero_vec n\" (is \"?l \\<noteq> ?r\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. unit_vec n i \\<noteq> 0\\<^sub>v n", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. unit_vec n i \\<noteq> 0\\<^sub>v n", "have \"?l $ i = 1\" \"?r $ i = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. unit_vec n i $ i = (1::'a) &&& 0\\<^sub>v n $ i = (0::'a)", "using i_n"], ["proof (prove)\nusing this:\n  i < n\n\ngoal (1 subgoal):\n 1. unit_vec n i $ i = (1::'a) &&& 0\\<^sub>v n $ i = (0::'a)", "by auto"], ["proof (state)\nthis:\n  unit_vec n i $ i = (1::'a)\n  0\\<^sub>v n $ i = (0::'a)\n\ngoal (1 subgoal):\n 1. unit_vec n i \\<noteq> 0\\<^sub>v n", "thus \"?l \\<noteq> ?r\""], ["proof (prove)\nusing this:\n  unit_vec n i $ i = (1::'a)\n  0\\<^sub>v n $ i = (0::'a)\n\ngoal (1 subgoal):\n 1. unit_vec n i \\<noteq> 0\\<^sub>v n", "by auto"], ["proof (state)\nthis:\n  unit_vec n i \\<noteq> 0\\<^sub>v n\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma unit_vec_carrier[simp]: \"unit_vec n i \\<in> carrier_vec n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. unit_vec n i \\<in> carrier_vec n", "unfolding unit_vec_def carrier_vec_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. vec n (\\<lambda>j. if j = i then 1::'a else (0::'a))\n    \\<in> {v. dim_vec v = n}", "by auto"], ["", "definition unit_vecs:: \"nat \\<Rightarrow> 'a :: zero_neq_one vec list\"\n  where \"unit_vecs n = map (unit_vec n) [0..<n]\""], ["", "text \"List of first i units\""], ["", "fun unit_vecs_first:: \"nat \\<Rightarrow> nat \\<Rightarrow> 'a::zero_neq_one vec list\"\n  where \"unit_vecs_first n 0 = []\"\n    |   \"unit_vecs_first n (Suc i) = unit_vecs_first n i @ [unit_vec n i]\""], ["", "lemma unit_vecs_first: \"unit_vecs n = unit_vecs_first n n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. unit_vecs n = unit_vecs_first n n", "unfolding unit_vecs_def set_map set_upt"], ["proof (prove)\ngoal (1 subgoal):\n 1. map (unit_vec n) [0..<n] = unit_vecs_first n n", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. map (unit_vec n) [0..<n] = unit_vecs_first n n", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. map (unit_vec n) [0..<n] = unit_vecs_first n n", "fix m"], ["proof (state)\ngoal (1 subgoal):\n 1. map (unit_vec n) [0..<n] = unit_vecs_first n n", "have \"m \\<le> n \\<Longrightarrow> map (unit_vec n) [0..<m] = unit_vecs_first n m\""], ["proof (prove)\ngoal (1 subgoal):\n 1. m \\<le> n \\<Longrightarrow>\n    map (unit_vec n) [0..<m] = unit_vecs_first n m", "proof (induct m)"], ["proof (state)\ngoal (2 subgoals):\n 1. 0 \\<le> n \\<Longrightarrow>\n    map (unit_vec n) [0..<0] = unit_vecs_first n 0\n 2. \\<And>m.\n       \\<lbrakk>m \\<le> n \\<Longrightarrow>\n                map (unit_vec n) [0..<m] = unit_vecs_first n m;\n        Suc m \\<le> n\\<rbrakk>\n       \\<Longrightarrow> map (unit_vec n) [0..<Suc m] =\n                         unit_vecs_first n (Suc m)", "case (Suc m)"], ["proof (state)\nthis:\n  m \\<le> n \\<Longrightarrow> map (unit_vec n) [0..<m] = unit_vecs_first n m\n  Suc m \\<le> n\n\ngoal (2 subgoals):\n 1. 0 \\<le> n \\<Longrightarrow>\n    map (unit_vec n) [0..<0] = unit_vecs_first n 0\n 2. \\<And>m.\n       \\<lbrakk>m \\<le> n \\<Longrightarrow>\n                map (unit_vec n) [0..<m] = unit_vecs_first n m;\n        Suc m \\<le> n\\<rbrakk>\n       \\<Longrightarrow> map (unit_vec n) [0..<Suc m] =\n                         unit_vecs_first n (Suc m)", "then"], ["proof (chain)\npicking this:\n  m \\<le> n \\<Longrightarrow> map (unit_vec n) [0..<m] = unit_vecs_first n m\n  Suc m \\<le> n", "have mn:\"m\\<le>n\""], ["proof (prove)\nusing this:\n  m \\<le> n \\<Longrightarrow> map (unit_vec n) [0..<m] = unit_vecs_first n m\n  Suc m \\<le> n\n\ngoal (1 subgoal):\n 1. m \\<le> n", "by auto"], ["proof (state)\nthis:\n  m \\<le> n\n\ngoal (2 subgoals):\n 1. 0 \\<le> n \\<Longrightarrow>\n    map (unit_vec n) [0..<0] = unit_vecs_first n 0\n 2. \\<And>m.\n       \\<lbrakk>m \\<le> n \\<Longrightarrow>\n                map (unit_vec n) [0..<m] = unit_vecs_first n m;\n        Suc m \\<le> n\\<rbrakk>\n       \\<Longrightarrow> map (unit_vec n) [0..<Suc m] =\n                         unit_vecs_first n (Suc m)", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. map (unit_vec n) [0..<Suc m] = unit_vecs_first n (Suc m)", "unfolding upt_Suc"], ["proof (prove)\ngoal (1 subgoal):\n 1. map (unit_vec n) (if 0 \\<le> m then [0..<m] @ [m] else []) =\n    unit_vecs_first n (Suc m)", "using Suc(1)[OF mn]"], ["proof (prove)\nusing this:\n  map (unit_vec n) [0..<m] = unit_vecs_first n m\n\ngoal (1 subgoal):\n 1. map (unit_vec n) (if 0 \\<le> m then [0..<m] @ [m] else []) =\n    unit_vecs_first n (Suc m)", "by auto"], ["proof (state)\nthis:\n  map (unit_vec n) [0..<Suc m] = unit_vecs_first n (Suc m)\n\ngoal (1 subgoal):\n 1. 0 \\<le> n \\<Longrightarrow>\n    map (unit_vec n) [0..<0] = unit_vecs_first n 0", "qed auto"], ["proof (state)\nthis:\n  m \\<le> n \\<Longrightarrow> map (unit_vec n) [0..<m] = unit_vecs_first n m\n\ngoal (1 subgoal):\n 1. map (unit_vec n) [0..<n] = unit_vecs_first n n", "}"], ["proof (state)\nthis:\n  ?m4 \\<le> n \\<Longrightarrow>\n  map (unit_vec n) [0..<?m4] = unit_vecs_first n ?m4\n\ngoal (1 subgoal):\n 1. map (unit_vec n) [0..<n] = unit_vecs_first n n", "thus \"map (unit_vec n) [0..<n] = unit_vecs_first n n\""], ["proof (prove)\nusing this:\n  ?m4 \\<le> n \\<Longrightarrow>\n  map (unit_vec n) [0..<?m4] = unit_vecs_first n ?m4\n\ngoal (1 subgoal):\n 1. map (unit_vec n) [0..<n] = unit_vecs_first n n", "by auto"], ["proof (state)\nthis:\n  map (unit_vec n) [0..<n] = unit_vecs_first n n\n\ngoal:\nNo subgoals!", "qed"], ["", "text \"list of last i units\""], ["", "fun unit_vecs_last:: \"nat \\<Rightarrow> nat \\<Rightarrow> 'a :: zero_neq_one vec list\"\n  where \"unit_vecs_last n 0 = []\"\n    |   \"unit_vecs_last n (Suc i) = unit_vec n (n - Suc i) # unit_vecs_last n i\""], ["", "lemma unit_vecs_last_carrier: \"set (unit_vecs_last n i) \\<subseteq> carrier_vec n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set (unit_vecs_last n i) \\<subseteq> carrier_vec n", "by (induct i;auto)"], ["", "lemma unit_vecs_last[code]: \"unit_vecs n = unit_vecs_last n n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. unit_vecs n = unit_vecs_last n n", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. unit_vecs n = unit_vecs_last n n", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. unit_vecs n = unit_vecs_last n n", "fix m"], ["proof (state)\ngoal (1 subgoal):\n 1. unit_vecs n = unit_vecs_last n n", "assume \"m = n\""], ["proof (state)\nthis:\n  m = n\n\ngoal (1 subgoal):\n 1. unit_vecs n = unit_vecs_last n n", "have \"m \\<le> n \\<Longrightarrow> map (unit_vec n) [n-m..<n] = unit_vecs_last n m\""], ["proof (prove)\ngoal (1 subgoal):\n 1. m \\<le> n \\<Longrightarrow>\n    map (unit_vec n) [n - m..<n] = unit_vecs_last n m", "proof (induction m)"], ["proof (state)\ngoal (2 subgoals):\n 1. 0 \\<le> n \\<Longrightarrow>\n    map (unit_vec n) [n - 0..<n] = unit_vecs_last n 0\n 2. \\<And>m.\n       \\<lbrakk>m \\<le> n \\<Longrightarrow>\n                map (unit_vec n) [n - m..<n] = unit_vecs_last n m;\n        Suc m \\<le> n\\<rbrakk>\n       \\<Longrightarrow> map (unit_vec n) [n - Suc m..<n] =\n                         unit_vecs_last n (Suc m)", "case (Suc m)"], ["proof (state)\nthis:\n  m \\<le> n \\<Longrightarrow>\n  map (unit_vec n) [n - m..<n] = unit_vecs_last n m\n  Suc m \\<le> n\n\ngoal (2 subgoals):\n 1. 0 \\<le> n \\<Longrightarrow>\n    map (unit_vec n) [n - 0..<n] = unit_vecs_last n 0\n 2. \\<And>m.\n       \\<lbrakk>m \\<le> n \\<Longrightarrow>\n                map (unit_vec n) [n - m..<n] = unit_vecs_last n m;\n        Suc m \\<le> n\\<rbrakk>\n       \\<Longrightarrow> map (unit_vec n) [n - Suc m..<n] =\n                         unit_vecs_last n (Suc m)", "then"], ["proof (chain)\npicking this:\n  m \\<le> n \\<Longrightarrow>\n  map (unit_vec n) [n - m..<n] = unit_vecs_last n m\n  Suc m \\<le> n", "have nm:\"n - Suc m < n\""], ["proof (prove)\nusing this:\n  m \\<le> n \\<Longrightarrow>\n  map (unit_vec n) [n - m..<n] = unit_vecs_last n m\n  Suc m \\<le> n\n\ngoal (1 subgoal):\n 1. n - Suc m < n", "by auto"], ["proof (state)\nthis:\n  n - Suc m < n\n\ngoal (2 subgoals):\n 1. 0 \\<le> n \\<Longrightarrow>\n    map (unit_vec n) [n - 0..<n] = unit_vecs_last n 0\n 2. \\<And>m.\n       \\<lbrakk>m \\<le> n \\<Longrightarrow>\n                map (unit_vec n) [n - m..<n] = unit_vecs_last n m;\n        Suc m \\<le> n\\<rbrakk>\n       \\<Longrightarrow> map (unit_vec n) [n - Suc m..<n] =\n                         unit_vecs_last n (Suc m)", "have ins: \"[n - Suc m ..< n] = (n - Suc m) # [n - m ..< n]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. [n - Suc m..<n] = (n - Suc m) # [n - m..<n]", "unfolding upt_conv_Cons[OF nm]"], ["proof (prove)\ngoal (1 subgoal):\n 1. (n - Suc m) # [Suc (n - Suc m)..<n] = (n - Suc m) # [n - m..<n]", "by (auto simp: Suc.prems Suc_diff_Suc Suc_le_lessD)"], ["proof (state)\nthis:\n  [n - Suc m..<n] = (n - Suc m) # [n - m..<n]\n\ngoal (2 subgoals):\n 1. 0 \\<le> n \\<Longrightarrow>\n    map (unit_vec n) [n - 0..<n] = unit_vecs_last n 0\n 2. \\<And>m.\n       \\<lbrakk>m \\<le> n \\<Longrightarrow>\n                map (unit_vec n) [n - m..<n] = unit_vecs_last n m;\n        Suc m \\<le> n\\<rbrakk>\n       \\<Longrightarrow> map (unit_vec n) [n - Suc m..<n] =\n                         unit_vecs_last n (Suc m)", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. map (unit_vec n) [n - Suc m..<n] = unit_vecs_last n (Suc m)", "unfolding ins"], ["proof (prove)\ngoal (1 subgoal):\n 1. map (unit_vec n) ((n - Suc m) # [n - m..<n]) = unit_vecs_last n (Suc m)", "unfolding unit_vecs_last.simps"], ["proof (prove)\ngoal (1 subgoal):\n 1. map (unit_vec n) ((n - Suc m) # [n - m..<n]) =\n    unit_vec n (n - Suc m) # unit_vecs_last n m", "unfolding list.map"], ["proof (prove)\ngoal (1 subgoal):\n 1. unit_vec n (n - Suc m) # map (unit_vec n) [n - m..<n] =\n    unit_vec n (n - Suc m) # unit_vecs_last n m", "using Suc"], ["proof (prove)\nusing this:\n  m \\<le> n \\<Longrightarrow>\n  map (unit_vec n) [n - m..<n] = unit_vecs_last n m\n  Suc m \\<le> n\n\ngoal (1 subgoal):\n 1. unit_vec n (n - Suc m) # map (unit_vec n) [n - m..<n] =\n    unit_vec n (n - Suc m) # unit_vecs_last n m", "unfolding Suc"], ["proof (prove)\nusing this:\n  m \\<le> n \\<Longrightarrow>\n  map (unit_vec n) [n - m..<n] = unit_vecs_last n m\n  Suc m \\<le> n\n\ngoal (1 subgoal):\n 1. unit_vec n (n - Suc m) # map (unit_vec n) [n - m..<n] =\n    unit_vec n (n - Suc m) # unit_vecs_last n m", "by auto"], ["proof (state)\nthis:\n  map (unit_vec n) [n - Suc m..<n] = unit_vecs_last n (Suc m)\n\ngoal (1 subgoal):\n 1. 0 \\<le> n \\<Longrightarrow>\n    map (unit_vec n) [n - 0..<n] = unit_vecs_last n 0", "qed simp"], ["proof (state)\nthis:\n  m \\<le> n \\<Longrightarrow>\n  map (unit_vec n) [n - m..<n] = unit_vecs_last n m\n\ngoal (1 subgoal):\n 1. unit_vecs n = unit_vecs_last n n", "}"], ["proof (state)\nthis:\n  \\<lbrakk>?m4 = n; ?m4 \\<le> n\\<rbrakk>\n  \\<Longrightarrow> map (unit_vec n) [n - ?m4..<n] = unit_vecs_last n ?m4\n\ngoal (1 subgoal):\n 1. unit_vecs n = unit_vecs_last n n", "thus \"unit_vecs n = unit_vecs_last n n\""], ["proof (prove)\nusing this:\n  \\<lbrakk>?m4 = n; ?m4 \\<le> n\\<rbrakk>\n  \\<Longrightarrow> map (unit_vec n) [n - ?m4..<n] = unit_vecs_last n ?m4\n\ngoal (1 subgoal):\n 1. unit_vecs n = unit_vecs_last n n", "unfolding unit_vecs_def"], ["proof (prove)\nusing this:\n  \\<lbrakk>?m4 = n; ?m4 \\<le> n\\<rbrakk>\n  \\<Longrightarrow> map (unit_vec n) [n - ?m4..<n] = unit_vecs_last n ?m4\n\ngoal (1 subgoal):\n 1. map (unit_vec n) [0..<n] = unit_vecs_last n n", "by auto"], ["proof (state)\nthis:\n  unit_vecs n = unit_vecs_last n n\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma unit_vecs_carrier: \"set (unit_vecs n) \\<subseteq> carrier_vec n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set (unit_vecs n) \\<subseteq> carrier_vec n", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> set (unit_vecs n) \\<Longrightarrow> x \\<in> carrier_vec n", "fix u :: \"'a vec\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> set (unit_vecs n) \\<Longrightarrow> x \\<in> carrier_vec n", "assume u: \"u \\<in> set (unit_vecs n)\""], ["proof (state)\nthis:\n  u \\<in> set (unit_vecs n)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> set (unit_vecs n) \\<Longrightarrow> x \\<in> carrier_vec n", "then"], ["proof (chain)\npicking this:\n  u \\<in> set (unit_vecs n)", "obtain i where \"u = unit_vec n i\""], ["proof (prove)\nusing this:\n  u \\<in> set (unit_vecs n)\n\ngoal (1 subgoal):\n 1. (\\<And>i. u = unit_vec n i \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding unit_vecs_def"], ["proof (prove)\nusing this:\n  u \\<in> set (map (unit_vec n) [0..<n])\n\ngoal (1 subgoal):\n 1. (\\<And>i. u = unit_vec n i \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  u = unit_vec n i\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> set (unit_vecs n) \\<Longrightarrow> x \\<in> carrier_vec n", "then"], ["proof (chain)\npicking this:\n  u = unit_vec n i", "show \"u \\<in> carrier_vec n\""], ["proof (prove)\nusing this:\n  u = unit_vec n i\n\ngoal (1 subgoal):\n 1. u \\<in> carrier_vec n", "using unit_vec_carrier"], ["proof (prove)\nusing this:\n  u = unit_vec n i\n  unit_vec ?n ?i \\<in> carrier_vec ?n\n\ngoal (1 subgoal):\n 1. u \\<in> carrier_vec n", "by auto"], ["proof (state)\nthis:\n  u \\<in> carrier_vec n\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma unit_vecs_last_distinct:\n  \"j \\<le> n \\<Longrightarrow> i < n - j \\<Longrightarrow> unit_vec n i \\<notin> set (unit_vecs_last n j)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>j \\<le> n; i < n - j\\<rbrakk>\n    \\<Longrightarrow> unit_vec n i \\<notin> set (unit_vecs_last n j)", "by (induction j arbitrary:i, auto)"], ["", "lemma unit_vecs_first_distinct:\n  \"i \\<le> j \\<Longrightarrow> j < n \\<Longrightarrow> unit_vec n j \\<notin> set (unit_vecs_first n i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>i \\<le> j; j < n\\<rbrakk>\n    \\<Longrightarrow> unit_vec n j \\<notin> set (unit_vecs_first n i)", "by (induction i arbitrary:j, auto)"], ["", "definition map_vec where \"map_vec f v \\<equiv> vec (dim_vec v) (\\<lambda>i. f (v $ i))\""], ["", "instantiation vec :: (uminus) uminus\nbegin"], ["", "definition uminus_vec :: \"'a :: uminus vec \\<Rightarrow> 'a vec\" where\n  \"- v \\<equiv> vec (dim_vec v) (\\<lambda> i. - (v $ i))\""], ["", "instance"], ["proof (prove)\ngoal (1 subgoal):\n 1. OFCLASS('a vec, uminus_class)", ".."], ["", "end"], ["", "definition smult_vec :: \"'a :: times \\<Rightarrow> 'a vec \\<Rightarrow> 'a vec\" (infixl \"\\<cdot>\\<^sub>v\" 70)\n  where \"a \\<cdot>\\<^sub>v v \\<equiv> vec (dim_vec v) (\\<lambda> i. a * v $ i)\""], ["", "definition scalar_prod :: \"'a vec \\<Rightarrow> 'a vec \\<Rightarrow> 'a :: semiring_0\" (infix \"\\<bullet>\" 70)\n  where \"v \\<bullet> w \\<equiv> \\<Sum> i \\<in> {0 ..< dim_vec w}. v $ i * w $ i\""], ["", "definition monoid_vec :: \"'a itself \\<Rightarrow> nat \\<Rightarrow> ('a :: monoid_add vec) monoid\" where\n  \"monoid_vec ty n \\<equiv> \\<lparr>\n    carrier = carrier_vec n,\n    mult = (+),\n    one = 0\\<^sub>v n\\<rparr>\""], ["", "definition module_vec ::\n  \"'a :: semiring_1 itself \\<Rightarrow> nat \\<Rightarrow> ('a,'a vec) module\" where\n  \"module_vec ty n \\<equiv> \\<lparr>\n    carrier = carrier_vec n,\n    mult = undefined,\n    one = undefined,\n    zero = 0\\<^sub>v n,\n    add = (+),\n    smult = (\\<cdot>\\<^sub>v)\\<rparr>\""], ["", "lemma monoid_vec_simps:\n  \"mult (monoid_vec ty n) = (+)\"\n  \"carrier (monoid_vec ty n) = carrier_vec n\"\n  \"one (monoid_vec ty n) = 0\\<^sub>v n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<otimes>\\<^bsub>monoid_vec ty n\\<^esub>) = (+) &&&\n    carrier (monoid_vec ty n) = carrier_vec n &&&\n    \\<one>\\<^bsub>monoid_vec ty n\\<^esub> = 0\\<^sub>v n", "unfolding monoid_vec_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<otimes>\\<^bsub>\\<lparr>carrier = carrier_vec n, mult = (+), one = 0\\<^sub>v n\\<rparr>\\<^esub>) =\n    (+) &&&\n    carrier\n     \\<lparr>carrier = carrier_vec n, mult = (+),\n        one = 0\\<^sub>v n\\<rparr> =\n    carrier_vec n &&&\n    \\<one>\\<^bsub>\\<lparr>carrier = carrier_vec n, mult = (+), one = 0\\<^sub>v n\\<rparr>\\<^esub> =\n    0\\<^sub>v n", "by auto"], ["", "lemma module_vec_simps:\n  \"add (module_vec ty n) = (+)\"\n  \"zero (module_vec ty n) = 0\\<^sub>v n\"\n  \"carrier (module_vec ty n) = carrier_vec n\"\n  \"smult (module_vec ty n) = (\\<cdot>\\<^sub>v)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((\\<oplus>\\<^bsub>module_vec ty n\\<^esub>) = (+) &&&\n     \\<zero>\\<^bsub>module_vec ty n\\<^esub> = 0\\<^sub>v n) &&&\n    carrier (module_vec ty n) = carrier_vec n &&&\n    (\\<odot>\\<^bsub>module_vec ty n\\<^esub>) = (\\<cdot>\\<^sub>v)", "unfolding module_vec_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. ((\\<oplus>\\<^bsub>\\<lparr>carrier = carrier_vec n, mult = undefined, one = undefined, zero = 0\\<^sub>v n, add = (+), smult = (\\<cdot>\\<^sub>v)\\<rparr>\\<^esub>) =\n     (+) &&&\n     \\<zero>\\<^bsub>\\<lparr>carrier = carrier_vec n, mult = undefined, one = undefined, zero = 0\\<^sub>v n, add = (+), smult = (\\<cdot>\\<^sub>v)\\<rparr>\\<^esub> =\n     0\\<^sub>v n) &&&\n    carrier\n     \\<lparr>carrier = carrier_vec n, mult = undefined, one = undefined,\n        zero = 0\\<^sub>v n, add = (+), smult = (\\<cdot>\\<^sub>v)\\<rparr> =\n    carrier_vec n &&&\n    (\\<odot>\\<^bsub>\\<lparr>carrier = carrier_vec n, mult = undefined, one = undefined, zero = 0\\<^sub>v n, add = (+), smult = (\\<cdot>\\<^sub>v)\\<rparr>\\<^esub>) =\n    (\\<cdot>\\<^sub>v)", "by auto"], ["", "definition finsum_vec :: \"'a :: monoid_add itself \\<Rightarrow> nat \\<Rightarrow> ('c \\<Rightarrow> 'a vec) \\<Rightarrow> 'c set \\<Rightarrow> 'a vec\" where\n  \"finsum_vec ty n = finprod (monoid_vec ty n)\""], ["", "lemma index_add_vec[simp]:\n  \"i < dim_vec v\\<^sub>2 \\<Longrightarrow> (v\\<^sub>1 + v\\<^sub>2) $ i = v\\<^sub>1 $ i + v\\<^sub>2 $ i\" \"dim_vec (v\\<^sub>1 + v\\<^sub>2) = dim_vec v\\<^sub>2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (i < dim_vec v\\<^sub>2 \\<Longrightarrow>\n     (v\\<^sub>1 + v\\<^sub>2) $ i = v\\<^sub>1 $ i + v\\<^sub>2 $ i) &&&\n    dim_vec (v\\<^sub>1 + v\\<^sub>2) = dim_vec v\\<^sub>2", "unfolding plus_vec_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (i < dim_vec v\\<^sub>2 \\<Longrightarrow>\n     vec (dim_vec v\\<^sub>2) (\\<lambda>i. v\\<^sub>1 $ i + v\\<^sub>2 $ i) $\n     i =\n     v\\<^sub>1 $ i + v\\<^sub>2 $ i) &&&\n    dim_vec\n     (vec (dim_vec v\\<^sub>2) (\\<lambda>i. v\\<^sub>1 $ i + v\\<^sub>2 $ i)) =\n    dim_vec v\\<^sub>2", "by auto"], ["", "lemma index_minus_vec[simp]:\n  \"i < dim_vec v\\<^sub>2 \\<Longrightarrow> (v\\<^sub>1 - v\\<^sub>2) $ i = v\\<^sub>1 $ i - v\\<^sub>2 $ i\" \"dim_vec (v\\<^sub>1 - v\\<^sub>2) = dim_vec v\\<^sub>2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (i < dim_vec v\\<^sub>2 \\<Longrightarrow>\n     (v\\<^sub>1 - v\\<^sub>2) $ i = v\\<^sub>1 $ i - v\\<^sub>2 $ i) &&&\n    dim_vec (v\\<^sub>1 - v\\<^sub>2) = dim_vec v\\<^sub>2", "unfolding minus_vec_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (i < dim_vec v\\<^sub>2 \\<Longrightarrow>\n     vec (dim_vec v\\<^sub>2) (\\<lambda>i. v\\<^sub>1 $ i - v\\<^sub>2 $ i) $\n     i =\n     v\\<^sub>1 $ i - v\\<^sub>2 $ i) &&&\n    dim_vec\n     (vec (dim_vec v\\<^sub>2) (\\<lambda>i. v\\<^sub>1 $ i - v\\<^sub>2 $ i)) =\n    dim_vec v\\<^sub>2", "by auto"], ["", "lemma index_map_vec[simp]:\n  \"i < dim_vec v \\<Longrightarrow> map_vec f v $ i = f (v $ i)\"\n  \"dim_vec (map_vec f v) = dim_vec v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (i < dim_vec v \\<Longrightarrow> map_vec f v $ i = f (v $ i)) &&&\n    dim_vec (map_vec f v) = dim_vec v", "unfolding map_vec_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (i < dim_vec v \\<Longrightarrow>\n     vec (dim_vec v) (\\<lambda>i. f (v $ i)) $ i = f (v $ i)) &&&\n    dim_vec (vec (dim_vec v) (\\<lambda>i. f (v $ i))) = dim_vec v", "by auto"], ["", "lemma map_carrier_vec[simp]: \"map_vec h v \\<in> carrier_vec n = (v \\<in> carrier_vec n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (map_vec h v \\<in> carrier_vec n) = (v \\<in> carrier_vec n)", "unfolding map_vec_def carrier_vec_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (vec (dim_vec v) (\\<lambda>i. h (v $ i)) \\<in> {v. dim_vec v = n}) =\n    (v \\<in> {v. dim_vec v = n})", "by auto"], ["", "lemma index_uminus_vec[simp]:\n  \"i < dim_vec v \\<Longrightarrow> (- v) $ i = - (v $ i)\"\n  \"dim_vec (- v) = dim_vec v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (i < dim_vec v \\<Longrightarrow> (- v) $ i = - v $ i) &&&\n    dim_vec (- v) = dim_vec v", "unfolding uminus_vec_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (i < dim_vec v \\<Longrightarrow>\n     vec (dim_vec v) (\\<lambda>i. - v $ i) $ i = - v $ i) &&&\n    dim_vec (vec (dim_vec v) (\\<lambda>i. - v $ i)) = dim_vec v", "by auto"], ["", "lemma index_smult_vec[simp]:\n  \"i < dim_vec v \\<Longrightarrow> (a \\<cdot>\\<^sub>v v) $ i = a * v $ i\" \"dim_vec (a \\<cdot>\\<^sub>v v) = dim_vec v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (i < dim_vec v \\<Longrightarrow>\n     (a \\<cdot>\\<^sub>v v) $ i = a * v $ i) &&&\n    dim_vec (a \\<cdot>\\<^sub>v v) = dim_vec v", "unfolding smult_vec_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (i < dim_vec v \\<Longrightarrow>\n     vec (dim_vec v) (\\<lambda>i. a * v $ i) $ i = a * v $ i) &&&\n    dim_vec (vec (dim_vec v) (\\<lambda>i. a * v $ i)) = dim_vec v", "by auto"], ["", "lemma add_carrier_vec[simp]:\n  \"v\\<^sub>1 \\<in> carrier_vec n \\<Longrightarrow> v\\<^sub>2 \\<in> carrier_vec n \\<Longrightarrow> v\\<^sub>1 + v\\<^sub>2 \\<in> carrier_vec n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>v\\<^sub>1 \\<in> carrier_vec n;\n     v\\<^sub>2 \\<in> carrier_vec n\\<rbrakk>\n    \\<Longrightarrow> v\\<^sub>1 + v\\<^sub>2 \\<in> carrier_vec n", "unfolding carrier_vec_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>v\\<^sub>1 \\<in> {v. dim_vec v = n};\n     v\\<^sub>2 \\<in> {v. dim_vec v = n}\\<rbrakk>\n    \\<Longrightarrow> v\\<^sub>1 + v\\<^sub>2 \\<in> {v. dim_vec v = n}", "by auto"], ["", "lemma minus_carrier_vec[simp]:\n  \"v\\<^sub>1 \\<in> carrier_vec n \\<Longrightarrow> v\\<^sub>2 \\<in> carrier_vec n \\<Longrightarrow> v\\<^sub>1 - v\\<^sub>2 \\<in> carrier_vec n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>v\\<^sub>1 \\<in> carrier_vec n;\n     v\\<^sub>2 \\<in> carrier_vec n\\<rbrakk>\n    \\<Longrightarrow> v\\<^sub>1 - v\\<^sub>2 \\<in> carrier_vec n", "unfolding carrier_vec_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>v\\<^sub>1 \\<in> {v. dim_vec v = n};\n     v\\<^sub>2 \\<in> {v. dim_vec v = n}\\<rbrakk>\n    \\<Longrightarrow> v\\<^sub>1 - v\\<^sub>2 \\<in> {v. dim_vec v = n}", "by auto"], ["", "lemma comm_add_vec[ac_simps]:\n  \"(v\\<^sub>1 :: 'a :: ab_semigroup_add vec) \\<in> carrier_vec n \\<Longrightarrow> v\\<^sub>2 \\<in> carrier_vec n \\<Longrightarrow> v\\<^sub>1 + v\\<^sub>2 = v\\<^sub>2 + v\\<^sub>1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>v\\<^sub>1 \\<in> carrier_vec n;\n     v\\<^sub>2 \\<in> carrier_vec n\\<rbrakk>\n    \\<Longrightarrow> v\\<^sub>1 + v\\<^sub>2 = v\\<^sub>2 + v\\<^sub>1", "by (intro eq_vecI, auto simp: ac_simps)"], ["", "lemma assoc_add_vec[simp]:\n  \"(v\\<^sub>1 :: 'a :: semigroup_add vec) \\<in> carrier_vec n \\<Longrightarrow> v\\<^sub>2 \\<in> carrier_vec n \\<Longrightarrow> v\\<^sub>3 \\<in> carrier_vec n\n  \\<Longrightarrow> (v\\<^sub>1 + v\\<^sub>2) + v\\<^sub>3 = v\\<^sub>1 + (v\\<^sub>2 + v\\<^sub>3)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>v\\<^sub>1 \\<in> carrier_vec n; v\\<^sub>2 \\<in> carrier_vec n;\n     v\\<^sub>3 \\<in> carrier_vec n\\<rbrakk>\n    \\<Longrightarrow> v\\<^sub>1 + v\\<^sub>2 + v\\<^sub>3 =\n                      v\\<^sub>1 + (v\\<^sub>2 + v\\<^sub>3)", "by (intro eq_vecI, auto simp: ac_simps)"], ["", "lemma zero_minus_vec[simp]: \"(v :: 'a :: group_add vec) \\<in> carrier_vec n \\<Longrightarrow> 0\\<^sub>v n - v = - v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. v \\<in> carrier_vec n \\<Longrightarrow> 0\\<^sub>v n - v = - v", "by (intro eq_vecI, auto)"], ["", "lemma minus_zero_vec[simp]: \"(v :: 'a :: group_add vec) \\<in> carrier_vec n \\<Longrightarrow> v - 0\\<^sub>v n = v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. v \\<in> carrier_vec n \\<Longrightarrow> v - 0\\<^sub>v n = v", "by (intro eq_vecI, auto)"], ["", "lemma minus_cancel_vec[simp]: \"(v :: 'a :: group_add vec) \\<in> carrier_vec n \\<Longrightarrow> v - v = 0\\<^sub>v n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. v \\<in> carrier_vec n \\<Longrightarrow> v - v = 0\\<^sub>v n", "by (intro eq_vecI, auto)"], ["", "lemma minus_add_uminus_vec: \"(v :: 'a :: group_add vec) \\<in> carrier_vec n \\<Longrightarrow>\n  w \\<in> carrier_vec n \\<Longrightarrow> v - w = v + (- w)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>v \\<in> carrier_vec n; w \\<in> carrier_vec n\\<rbrakk>\n    \\<Longrightarrow> v - w = v + - w", "by (intro eq_vecI, auto)"], ["", "lemma comm_monoid_vec: \"comm_monoid (monoid_vec TYPE ('a :: comm_monoid_add) n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Group.comm_monoid (monoid_vec TYPE('a) n)", "by (unfold_locales, auto simp: monoid_vec_def ac_simps)"], ["", "lemma left_zero_vec[simp]: \"(v :: 'a :: monoid_add vec) \\<in> carrier_vec n  \\<Longrightarrow> 0\\<^sub>v n + v = v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. v \\<in> carrier_vec n \\<Longrightarrow> 0\\<^sub>v n + v = v", "by auto"], ["", "lemma right_zero_vec[simp]: \"(v :: 'a :: monoid_add vec) \\<in> carrier_vec n  \\<Longrightarrow> v + 0\\<^sub>v n = v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. v \\<in> carrier_vec n \\<Longrightarrow> v + 0\\<^sub>v n = v", "by auto"], ["", "lemma uminus_carrier_vec[simp]:\n  \"(- v \\<in> carrier_vec n) = (v \\<in> carrier_vec n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (- v \\<in> carrier_vec n) = (v \\<in> carrier_vec n)", "unfolding carrier_vec_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (- v \\<in> {v. dim_vec v = n}) = (v \\<in> {v. dim_vec v = n})", "by auto"], ["", "lemma uminus_r_inv_vec[simp]:\n  \"(v :: 'a :: group_add vec) \\<in> carrier_vec n \\<Longrightarrow> (v + - v) = 0\\<^sub>v n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. v \\<in> carrier_vec n \\<Longrightarrow> v + - v = 0\\<^sub>v n", "by (intro eq_vecI, auto)"], ["", "lemma uminus_l_inv_vec[simp]:\n  \"(v :: 'a :: group_add vec) \\<in> carrier_vec n \\<Longrightarrow> (- v + v) = 0\\<^sub>v n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. v \\<in> carrier_vec n \\<Longrightarrow> - v + v = 0\\<^sub>v n", "by (intro eq_vecI, auto)"], ["", "lemma add_inv_exists_vec:\n  \"(v :: 'a :: group_add vec) \\<in> carrier_vec n \\<Longrightarrow> \\<exists> w \\<in> carrier_vec n. w + v = 0\\<^sub>v n \\<and> v + w = 0\\<^sub>v n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. v \\<in> carrier_vec n \\<Longrightarrow>\n    \\<exists>w\\<in>carrier_vec n.\n       w + v = 0\\<^sub>v n \\<and> v + w = 0\\<^sub>v n", "by (intro bexI[of _ \"- v\"], auto)"], ["", "lemma comm_group_vec: \"comm_group (monoid_vec TYPE ('a :: ab_group_add) n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. comm_group (monoid_vec TYPE('a) n)", "by (unfold_locales, insert add_inv_exists_vec, auto simp: monoid_vec_def ac_simps Units_def)"], ["", "lemmas finsum_vec_insert =\n  comm_monoid.finprod_insert[OF comm_monoid_vec, folded finsum_vec_def, unfolded monoid_vec_simps]"], ["", "lemmas finsum_vec_closed =\n  comm_monoid.finprod_closed[OF comm_monoid_vec, folded finsum_vec_def, unfolded monoid_vec_simps]"], ["", "lemmas finsum_vec_empty =\n  comm_monoid.finprod_empty[OF comm_monoid_vec, folded finsum_vec_def, unfolded monoid_vec_simps]"], ["", "lemma smult_carrier_vec[simp]: \"(a \\<cdot>\\<^sub>v v \\<in> carrier_vec n) = (v \\<in> carrier_vec n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (a \\<cdot>\\<^sub>v v \\<in> carrier_vec n) = (v \\<in> carrier_vec n)", "unfolding carrier_vec_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (a \\<cdot>\\<^sub>v v \\<in> {v. dim_vec v = n}) =\n    (v \\<in> {v. dim_vec v = n})", "by auto"], ["", "lemma scalar_prod_left_zero[simp]: \"v \\<in> carrier_vec n \\<Longrightarrow> 0\\<^sub>v n \\<bullet> v = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. v \\<in> carrier_vec n \\<Longrightarrow>\n    0\\<^sub>v n \\<bullet> v = (0::'a)", "unfolding scalar_prod_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. v \\<in> carrier_vec n \\<Longrightarrow>\n    (\\<Sum>i = 0..<dim_vec v. 0\\<^sub>v n $ i * v $ i) = (0::'a)", "by (rule sum.neutral, auto)"], ["", "lemma scalar_prod_right_zero[simp]: \"v \\<in> carrier_vec n \\<Longrightarrow> v \\<bullet> 0\\<^sub>v n = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. v \\<in> carrier_vec n \\<Longrightarrow>\n    v \\<bullet> 0\\<^sub>v n = (0::'a)", "unfolding scalar_prod_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. v \\<in> carrier_vec n \\<Longrightarrow>\n    (\\<Sum>i = 0..<dim_vec (0\\<^sub>v n). v $ i * 0\\<^sub>v n $ i) = (0::'a)", "by (rule sum.neutral, auto)"], ["", "lemma scalar_prod_left_unit[simp]: assumes v: \"(v :: 'a :: semiring_1 vec) \\<in> carrier_vec n\" and i: \"i < n\"\n  shows \"unit_vec n i \\<bullet> v = v $ i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. unit_vec n i \\<bullet> v = v $ i", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. unit_vec n i \\<bullet> v = v $ i", "let ?f = \"\\<lambda> k. unit_vec n i $ k * v $ k\""], ["proof (state)\ngoal (1 subgoal):\n 1. unit_vec n i \\<bullet> v = v $ i", "have id: \"(\\<Sum>k\\<in>{0..<n}. ?f k) = unit_vec n i $ i * v $ i + (\\<Sum>k\\<in>{0..<n} - {i}. ?f k)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>k = 0..<n. unit_vec n i $ k * v $ k) =\n    unit_vec n i $ i * v $ i +\n    (\\<Sum>k\\<in>{0..<n} - {i}. unit_vec n i $ k * v $ k)", "by (rule sum.remove, insert i, auto)"], ["proof (state)\nthis:\n  (\\<Sum>k = 0..<n. unit_vec n i $ k * v $ k) =\n  unit_vec n i $ i * v $ i +\n  (\\<Sum>k\\<in>{0..<n} - {i}. unit_vec n i $ k * v $ k)\n\ngoal (1 subgoal):\n 1. unit_vec n i \\<bullet> v = v $ i", "also"], ["proof (state)\nthis:\n  (\\<Sum>k = 0..<n. unit_vec n i $ k * v $ k) =\n  unit_vec n i $ i * v $ i +\n  (\\<Sum>k\\<in>{0..<n} - {i}. unit_vec n i $ k * v $ k)\n\ngoal (1 subgoal):\n 1. unit_vec n i \\<bullet> v = v $ i", "have \"(\\<Sum> k\\<in>{0..<n} - {i}. ?f k) = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>k\\<in>{0..<n} - {i}. unit_vec n i $ k * v $ k) = (0::'a)", "by (rule sum.neutral, insert i, auto)"], ["proof (state)\nthis:\n  (\\<Sum>k\\<in>{0..<n} - {i}. unit_vec n i $ k * v $ k) = (0::'a)\n\ngoal (1 subgoal):\n 1. unit_vec n i \\<bullet> v = v $ i", "finally"], ["proof (chain)\npicking this:\n  (\\<Sum>k = 0..<n. unit_vec n i $ k * v $ k) =\n  unit_vec n i $ i * v $ i + (0::'a)", "show ?thesis"], ["proof (prove)\nusing this:\n  (\\<Sum>k = 0..<n. unit_vec n i $ k * v $ k) =\n  unit_vec n i $ i * v $ i + (0::'a)\n\ngoal (1 subgoal):\n 1. unit_vec n i \\<bullet> v = v $ i", "unfolding scalar_prod_def"], ["proof (prove)\nusing this:\n  (\\<Sum>k = 0..<n. unit_vec n i $ k * v $ k) =\n  unit_vec n i $ i * v $ i + (0::'a)\n\ngoal (1 subgoal):\n 1. (\\<Sum>ia = 0..<dim_vec v. unit_vec n i $ ia * v $ ia) = v $ i", "using i v"], ["proof (prove)\nusing this:\n  (\\<Sum>k = 0..<n. unit_vec n i $ k * v $ k) =\n  unit_vec n i $ i * v $ i + (0::'a)\n  i < n\n  v \\<in> carrier_vec n\n\ngoal (1 subgoal):\n 1. (\\<Sum>ia = 0..<dim_vec v. unit_vec n i $ ia * v $ ia) = v $ i", "by simp"], ["proof (state)\nthis:\n  unit_vec n i \\<bullet> v = v $ i\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma scalar_prod_right_unit[simp]: assumes i: \"i < n\"\n  shows \"(v :: 'a :: semiring_1 vec) \\<bullet> unit_vec n i = v $ i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. v \\<bullet> unit_vec n i = v $ i", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. v \\<bullet> unit_vec n i = v $ i", "let ?f = \"\\<lambda> k. v $ k * unit_vec n i $ k\""], ["proof (state)\ngoal (1 subgoal):\n 1. v \\<bullet> unit_vec n i = v $ i", "have id: \"(\\<Sum>k\\<in>{0..<n}. ?f k) = v $ i * unit_vec n i $ i + (\\<Sum>k\\<in>{0..<n} - {i}. ?f k)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>k = 0..<n. v $ k * unit_vec n i $ k) =\n    v $ i * unit_vec n i $ i +\n    (\\<Sum>k\\<in>{0..<n} - {i}. v $ k * unit_vec n i $ k)", "by (rule sum.remove, insert i, auto)"], ["proof (state)\nthis:\n  (\\<Sum>k = 0..<n. v $ k * unit_vec n i $ k) =\n  v $ i * unit_vec n i $ i +\n  (\\<Sum>k\\<in>{0..<n} - {i}. v $ k * unit_vec n i $ k)\n\ngoal (1 subgoal):\n 1. v \\<bullet> unit_vec n i = v $ i", "also"], ["proof (state)\nthis:\n  (\\<Sum>k = 0..<n. v $ k * unit_vec n i $ k) =\n  v $ i * unit_vec n i $ i +\n  (\\<Sum>k\\<in>{0..<n} - {i}. v $ k * unit_vec n i $ k)\n\ngoal (1 subgoal):\n 1. v \\<bullet> unit_vec n i = v $ i", "have \"(\\<Sum>k\\<in>{0..<n} - {i}. ?f k) = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>k\\<in>{0..<n} - {i}. v $ k * unit_vec n i $ k) = (0::'a)", "by (rule sum.neutral, insert i, auto)"], ["proof (state)\nthis:\n  (\\<Sum>k\\<in>{0..<n} - {i}. v $ k * unit_vec n i $ k) = (0::'a)\n\ngoal (1 subgoal):\n 1. v \\<bullet> unit_vec n i = v $ i", "finally"], ["proof (chain)\npicking this:\n  (\\<Sum>k = 0..<n. v $ k * unit_vec n i $ k) =\n  v $ i * unit_vec n i $ i + (0::'a)", "show ?thesis"], ["proof (prove)\nusing this:\n  (\\<Sum>k = 0..<n. v $ k * unit_vec n i $ k) =\n  v $ i * unit_vec n i $ i + (0::'a)\n\ngoal (1 subgoal):\n 1. v \\<bullet> unit_vec n i = v $ i", "unfolding scalar_prod_def"], ["proof (prove)\nusing this:\n  (\\<Sum>k = 0..<n. v $ k * unit_vec n i $ k) =\n  v $ i * unit_vec n i $ i + (0::'a)\n\ngoal (1 subgoal):\n 1. (\\<Sum>ia = 0..<dim_vec (unit_vec n i). v $ ia * unit_vec n i $ ia) =\n    v $ i", "using i"], ["proof (prove)\nusing this:\n  (\\<Sum>k = 0..<n. v $ k * unit_vec n i $ k) =\n  v $ i * unit_vec n i $ i + (0::'a)\n  i < n\n\ngoal (1 subgoal):\n 1. (\\<Sum>ia = 0..<dim_vec (unit_vec n i). v $ ia * unit_vec n i $ ia) =\n    v $ i", "by simp"], ["proof (state)\nthis:\n  v \\<bullet> unit_vec n i = v $ i\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma add_scalar_prod_distrib: assumes v: \"v\\<^sub>1 \\<in> carrier_vec n\" \"v\\<^sub>2 \\<in> carrier_vec n\" \"v\\<^sub>3 \\<in> carrier_vec n\"\n  shows \"(v\\<^sub>1 + v\\<^sub>2) \\<bullet> v\\<^sub>3 = v\\<^sub>1 \\<bullet> v\\<^sub>3 + v\\<^sub>2 \\<bullet> v\\<^sub>3\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (v\\<^sub>1 + v\\<^sub>2) \\<bullet> v\\<^sub>3 =\n    v\\<^sub>1 \\<bullet> v\\<^sub>3 + v\\<^sub>2 \\<bullet> v\\<^sub>3", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (v\\<^sub>1 + v\\<^sub>2) \\<bullet> v\\<^sub>3 =\n    v\\<^sub>1 \\<bullet> v\\<^sub>3 + v\\<^sub>2 \\<bullet> v\\<^sub>3", "have \"(\\<Sum>i\\<in>{0..<dim_vec v\\<^sub>3}. (v\\<^sub>1 + v\\<^sub>2) $ i * v\\<^sub>3 $ i) = (\\<Sum>i\\<in>{0..<dim_vec v\\<^sub>3}. v\\<^sub>1 $ i * v\\<^sub>3 $ i + v\\<^sub>2 $ i * v\\<^sub>3 $ i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>i = 0..<dim_vec v\\<^sub>3.\n        (v\\<^sub>1 + v\\<^sub>2) $ i * v\\<^sub>3 $ i) =\n    (\\<Sum>i = 0..<dim_vec v\\<^sub>3.\n        v\\<^sub>1 $ i * v\\<^sub>3 $ i + v\\<^sub>2 $ i * v\\<^sub>3 $ i)", "by (rule sum.cong, insert v, auto simp: algebra_simps)"], ["proof (state)\nthis:\n  (\\<Sum>i = 0..<dim_vec v\\<^sub>3.\n      (v\\<^sub>1 + v\\<^sub>2) $ i * v\\<^sub>3 $ i) =\n  (\\<Sum>i = 0..<dim_vec v\\<^sub>3.\n      v\\<^sub>1 $ i * v\\<^sub>3 $ i + v\\<^sub>2 $ i * v\\<^sub>3 $ i)\n\ngoal (1 subgoal):\n 1. (v\\<^sub>1 + v\\<^sub>2) \\<bullet> v\\<^sub>3 =\n    v\\<^sub>1 \\<bullet> v\\<^sub>3 + v\\<^sub>2 \\<bullet> v\\<^sub>3", "thus ?thesis"], ["proof (prove)\nusing this:\n  (\\<Sum>i = 0..<dim_vec v\\<^sub>3.\n      (v\\<^sub>1 + v\\<^sub>2) $ i * v\\<^sub>3 $ i) =\n  (\\<Sum>i = 0..<dim_vec v\\<^sub>3.\n      v\\<^sub>1 $ i * v\\<^sub>3 $ i + v\\<^sub>2 $ i * v\\<^sub>3 $ i)\n\ngoal (1 subgoal):\n 1. (v\\<^sub>1 + v\\<^sub>2) \\<bullet> v\\<^sub>3 =\n    v\\<^sub>1 \\<bullet> v\\<^sub>3 + v\\<^sub>2 \\<bullet> v\\<^sub>3", "unfolding scalar_prod_def"], ["proof (prove)\nusing this:\n  (\\<Sum>i = 0..<dim_vec v\\<^sub>3.\n      (v\\<^sub>1 + v\\<^sub>2) $ i * v\\<^sub>3 $ i) =\n  (\\<Sum>i = 0..<dim_vec v\\<^sub>3.\n      v\\<^sub>1 $ i * v\\<^sub>3 $ i + v\\<^sub>2 $ i * v\\<^sub>3 $ i)\n\ngoal (1 subgoal):\n 1. (\\<Sum>i = 0..<dim_vec v\\<^sub>3.\n        (v\\<^sub>1 + v\\<^sub>2) $ i * v\\<^sub>3 $ i) =\n    (\\<Sum>i = 0..<dim_vec v\\<^sub>3. v\\<^sub>1 $ i * v\\<^sub>3 $ i) +\n    (\\<Sum>i = 0..<dim_vec v\\<^sub>3. v\\<^sub>2 $ i * v\\<^sub>3 $ i)", "using v"], ["proof (prove)\nusing this:\n  (\\<Sum>i = 0..<dim_vec v\\<^sub>3.\n      (v\\<^sub>1 + v\\<^sub>2) $ i * v\\<^sub>3 $ i) =\n  (\\<Sum>i = 0..<dim_vec v\\<^sub>3.\n      v\\<^sub>1 $ i * v\\<^sub>3 $ i + v\\<^sub>2 $ i * v\\<^sub>3 $ i)\n  v\\<^sub>1 \\<in> carrier_vec n\n  v\\<^sub>2 \\<in> carrier_vec n\n  v\\<^sub>3 \\<in> carrier_vec n\n\ngoal (1 subgoal):\n 1. (\\<Sum>i = 0..<dim_vec v\\<^sub>3.\n        (v\\<^sub>1 + v\\<^sub>2) $ i * v\\<^sub>3 $ i) =\n    (\\<Sum>i = 0..<dim_vec v\\<^sub>3. v\\<^sub>1 $ i * v\\<^sub>3 $ i) +\n    (\\<Sum>i = 0..<dim_vec v\\<^sub>3. v\\<^sub>2 $ i * v\\<^sub>3 $ i)", "by (auto simp: sum.distrib)"], ["proof (state)\nthis:\n  (v\\<^sub>1 + v\\<^sub>2) \\<bullet> v\\<^sub>3 =\n  v\\<^sub>1 \\<bullet> v\\<^sub>3 + v\\<^sub>2 \\<bullet> v\\<^sub>3\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma scalar_prod_add_distrib: assumes v: \"v\\<^sub>1 \\<in> carrier_vec n\" \"v\\<^sub>2 \\<in> carrier_vec n\" \"v\\<^sub>3 \\<in> carrier_vec n\"\n  shows \"v\\<^sub>1 \\<bullet> (v\\<^sub>2 + v\\<^sub>3) = v\\<^sub>1 \\<bullet> v\\<^sub>2 + v\\<^sub>1 \\<bullet> v\\<^sub>3\""], ["proof (prove)\ngoal (1 subgoal):\n 1. v\\<^sub>1 \\<bullet> (v\\<^sub>2 + v\\<^sub>3) =\n    v\\<^sub>1 \\<bullet> v\\<^sub>2 + v\\<^sub>1 \\<bullet> v\\<^sub>3", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. v\\<^sub>1 \\<bullet> (v\\<^sub>2 + v\\<^sub>3) =\n    v\\<^sub>1 \\<bullet> v\\<^sub>2 + v\\<^sub>1 \\<bullet> v\\<^sub>3", "have \"(\\<Sum>i\\<in>{0..<dim_vec v\\<^sub>3}. v\\<^sub>1 $ i * (v\\<^sub>2 + v\\<^sub>3) $ i) = (\\<Sum>i\\<in>{0..<dim_vec v\\<^sub>3}. v\\<^sub>1 $ i * v\\<^sub>2 $ i + v\\<^sub>1 $ i * v\\<^sub>3 $ i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>i = 0..<dim_vec v\\<^sub>3.\n        v\\<^sub>1 $ i * (v\\<^sub>2 + v\\<^sub>3) $ i) =\n    (\\<Sum>i = 0..<dim_vec v\\<^sub>3.\n        v\\<^sub>1 $ i * v\\<^sub>2 $ i + v\\<^sub>1 $ i * v\\<^sub>3 $ i)", "by (rule sum.cong, insert v, auto simp: algebra_simps)"], ["proof (state)\nthis:\n  (\\<Sum>i = 0..<dim_vec v\\<^sub>3.\n      v\\<^sub>1 $ i * (v\\<^sub>2 + v\\<^sub>3) $ i) =\n  (\\<Sum>i = 0..<dim_vec v\\<^sub>3.\n      v\\<^sub>1 $ i * v\\<^sub>2 $ i + v\\<^sub>1 $ i * v\\<^sub>3 $ i)\n\ngoal (1 subgoal):\n 1. v\\<^sub>1 \\<bullet> (v\\<^sub>2 + v\\<^sub>3) =\n    v\\<^sub>1 \\<bullet> v\\<^sub>2 + v\\<^sub>1 \\<bullet> v\\<^sub>3", "thus ?thesis"], ["proof (prove)\nusing this:\n  (\\<Sum>i = 0..<dim_vec v\\<^sub>3.\n      v\\<^sub>1 $ i * (v\\<^sub>2 + v\\<^sub>3) $ i) =\n  (\\<Sum>i = 0..<dim_vec v\\<^sub>3.\n      v\\<^sub>1 $ i * v\\<^sub>2 $ i + v\\<^sub>1 $ i * v\\<^sub>3 $ i)\n\ngoal (1 subgoal):\n 1. v\\<^sub>1 \\<bullet> (v\\<^sub>2 + v\\<^sub>3) =\n    v\\<^sub>1 \\<bullet> v\\<^sub>2 + v\\<^sub>1 \\<bullet> v\\<^sub>3", "unfolding scalar_prod_def"], ["proof (prove)\nusing this:\n  (\\<Sum>i = 0..<dim_vec v\\<^sub>3.\n      v\\<^sub>1 $ i * (v\\<^sub>2 + v\\<^sub>3) $ i) =\n  (\\<Sum>i = 0..<dim_vec v\\<^sub>3.\n      v\\<^sub>1 $ i * v\\<^sub>2 $ i + v\\<^sub>1 $ i * v\\<^sub>3 $ i)\n\ngoal (1 subgoal):\n 1. (\\<Sum>i = 0..<dim_vec (v\\<^sub>2 + v\\<^sub>3).\n        v\\<^sub>1 $ i * (v\\<^sub>2 + v\\<^sub>3) $ i) =\n    (\\<Sum>i = 0..<dim_vec v\\<^sub>2. v\\<^sub>1 $ i * v\\<^sub>2 $ i) +\n    (\\<Sum>i = 0..<dim_vec v\\<^sub>3. v\\<^sub>1 $ i * v\\<^sub>3 $ i)", "using v"], ["proof (prove)\nusing this:\n  (\\<Sum>i = 0..<dim_vec v\\<^sub>3.\n      v\\<^sub>1 $ i * (v\\<^sub>2 + v\\<^sub>3) $ i) =\n  (\\<Sum>i = 0..<dim_vec v\\<^sub>3.\n      v\\<^sub>1 $ i * v\\<^sub>2 $ i + v\\<^sub>1 $ i * v\\<^sub>3 $ i)\n  v\\<^sub>1 \\<in> carrier_vec n\n  v\\<^sub>2 \\<in> carrier_vec n\n  v\\<^sub>3 \\<in> carrier_vec n\n\ngoal (1 subgoal):\n 1. (\\<Sum>i = 0..<dim_vec (v\\<^sub>2 + v\\<^sub>3).\n        v\\<^sub>1 $ i * (v\\<^sub>2 + v\\<^sub>3) $ i) =\n    (\\<Sum>i = 0..<dim_vec v\\<^sub>2. v\\<^sub>1 $ i * v\\<^sub>2 $ i) +\n    (\\<Sum>i = 0..<dim_vec v\\<^sub>3. v\\<^sub>1 $ i * v\\<^sub>3 $ i)", "by (auto intro: sum.distrib)"], ["proof (state)\nthis:\n  v\\<^sub>1 \\<bullet> (v\\<^sub>2 + v\\<^sub>3) =\n  v\\<^sub>1 \\<bullet> v\\<^sub>2 + v\\<^sub>1 \\<bullet> v\\<^sub>3\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma smult_scalar_prod_distrib[simp]: assumes v: \"v\\<^sub>1 \\<in> carrier_vec n\" \"v\\<^sub>2 \\<in> carrier_vec n\"\n  shows \"(a \\<cdot>\\<^sub>v v\\<^sub>1) \\<bullet> v\\<^sub>2 = a * (v\\<^sub>1 \\<bullet> v\\<^sub>2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (a \\<cdot>\\<^sub>v v\\<^sub>1) \\<bullet> v\\<^sub>2 =\n    a * (v\\<^sub>1 \\<bullet> v\\<^sub>2)", "unfolding scalar_prod_def sum_distrib_left"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>i = 0..<dim_vec v\\<^sub>2.\n        (a \\<cdot>\\<^sub>v v\\<^sub>1) $ i * v\\<^sub>2 $ i) =\n    (\\<Sum>n = 0..<dim_vec v\\<^sub>2. a * (v\\<^sub>1 $ n * v\\<^sub>2 $ n))", "by (rule sum.cong, insert v, auto simp: ac_simps)"], ["", "lemma scalar_prod_smult_distrib[simp]: assumes v: \"v\\<^sub>1 \\<in> carrier_vec n\" \"v\\<^sub>2 \\<in> carrier_vec n\"\n  shows \"v\\<^sub>1 \\<bullet> (a \\<cdot>\\<^sub>v v\\<^sub>2) = (a :: 'a :: comm_ring) * (v\\<^sub>1 \\<bullet> v\\<^sub>2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. v\\<^sub>1 \\<bullet> (a \\<cdot>\\<^sub>v v\\<^sub>2) =\n    a * (v\\<^sub>1 \\<bullet> v\\<^sub>2)", "unfolding scalar_prod_def sum_distrib_left"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>i = 0..<dim_vec (a \\<cdot>\\<^sub>v v\\<^sub>2).\n        v\\<^sub>1 $ i * (a \\<cdot>\\<^sub>v v\\<^sub>2) $ i) =\n    (\\<Sum>n = 0..<dim_vec v\\<^sub>2. a * (v\\<^sub>1 $ n * v\\<^sub>2 $ n))", "by (rule sum.cong, insert v, auto simp: ac_simps)"], ["", "lemma comm_scalar_prod: assumes \"(v\\<^sub>1 :: 'a :: comm_semiring_0 vec) \\<in> carrier_vec n\" \"v\\<^sub>2 \\<in> carrier_vec n\"\n  shows \"v\\<^sub>1 \\<bullet> v\\<^sub>2 = v\\<^sub>2 \\<bullet> v\\<^sub>1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. v\\<^sub>1 \\<bullet> v\\<^sub>2 = v\\<^sub>2 \\<bullet> v\\<^sub>1", "unfolding scalar_prod_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>i = 0..<dim_vec v\\<^sub>2. v\\<^sub>1 $ i * v\\<^sub>2 $ i) =\n    (\\<Sum>i = 0..<dim_vec v\\<^sub>1. v\\<^sub>2 $ i * v\\<^sub>1 $ i)", "by (rule sum.cong, insert assms, auto simp: ac_simps)"], ["", "lemma add_smult_distrib_vec:\n  \"((a::'a::ring) + b) \\<cdot>\\<^sub>v v = a \\<cdot>\\<^sub>v v + b \\<cdot>\\<^sub>v v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (a + b) \\<cdot>\\<^sub>v v = a \\<cdot>\\<^sub>v v + b \\<cdot>\\<^sub>v v", "unfolding smult_vec_def plus_vec_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. vec (dim_vec v) (\\<lambda>i. (a + b) * v $ i) =\n    vec (dim_vec (vec (dim_vec v) (\\<lambda>i. b * v $ i)))\n     (\\<lambda>i.\n         vec (dim_vec v) (\\<lambda>i. a * v $ i) $ i +\n         vec (dim_vec v) (\\<lambda>i. b * v $ i) $ i)", "by (rule eq_vecI, auto simp: distrib_right)"], ["", "lemma smult_add_distrib_vec:\n  assumes \"v \\<in> carrier_vec n\" \"w \\<in> carrier_vec n\"\n  shows \"(a::'a::ring) \\<cdot>\\<^sub>v (v + w) = a \\<cdot>\\<^sub>v v + a \\<cdot>\\<^sub>v w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<cdot>\\<^sub>v (v + w) = a \\<cdot>\\<^sub>v v + a \\<cdot>\\<^sub>v w", "apply (rule eq_vecI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>i.\n       i < dim_vec\n            (a \\<cdot>\\<^sub>v v + a \\<cdot>\\<^sub>v w) \\<Longrightarrow>\n       (a \\<cdot>\\<^sub>v (v + w)) $ i =\n       (a \\<cdot>\\<^sub>v v + a \\<cdot>\\<^sub>v w) $ i\n 2. dim_vec (a \\<cdot>\\<^sub>v (v + w)) =\n    dim_vec (a \\<cdot>\\<^sub>v v + a \\<cdot>\\<^sub>v w)", "unfolding smult_vec_def plus_vec_def"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>i.\n       i < dim_vec\n            (vec (dim_vec (vec (dim_vec w) (\\<lambda>i. a * w $ i)))\n              (\\<lambda>i.\n                  vec (dim_vec v) (\\<lambda>i. a * v $ i) $ i +\n                  vec (dim_vec w) (\\<lambda>i. a * w $ i) $\n                  i)) \\<Longrightarrow>\n       vec (dim_vec (vec (dim_vec w) (\\<lambda>i. v $ i + w $ i)))\n        (\\<lambda>i. a * vec (dim_vec w) (\\<lambda>i. v $ i + w $ i) $ i) $\n       i =\n       vec (dim_vec (vec (dim_vec w) (\\<lambda>i. a * w $ i)))\n        (\\<lambda>i.\n            vec (dim_vec v) (\\<lambda>i. a * v $ i) $ i +\n            vec (dim_vec w) (\\<lambda>i. a * w $ i) $ i) $\n       i\n 2. dim_vec\n     (vec (dim_vec (vec (dim_vec w) (\\<lambda>i. v $ i + w $ i)))\n       (\\<lambda>i. a * vec (dim_vec w) (\\<lambda>i. v $ i + w $ i) $ i)) =\n    dim_vec\n     (vec (dim_vec (vec (dim_vec w) (\\<lambda>i. a * w $ i)))\n       (\\<lambda>i.\n           vec (dim_vec v) (\\<lambda>i. a * v $ i) $ i +\n           vec (dim_vec w) (\\<lambda>i. a * w $ i) $ i))", "using assms distrib_left"], ["proof (prove)\nusing this:\n  v \\<in> carrier_vec n\n  w \\<in> carrier_vec n\n  ?a * (?b + ?c) = ?a * ?b + ?a * ?c\n\ngoal (2 subgoals):\n 1. \\<And>i.\n       i < dim_vec\n            (vec (dim_vec (vec (dim_vec w) (\\<lambda>i. a * w $ i)))\n              (\\<lambda>i.\n                  vec (dim_vec v) (\\<lambda>i. a * v $ i) $ i +\n                  vec (dim_vec w) (\\<lambda>i. a * w $ i) $\n                  i)) \\<Longrightarrow>\n       vec (dim_vec (vec (dim_vec w) (\\<lambda>i. v $ i + w $ i)))\n        (\\<lambda>i. a * vec (dim_vec w) (\\<lambda>i. v $ i + w $ i) $ i) $\n       i =\n       vec (dim_vec (vec (dim_vec w) (\\<lambda>i. a * w $ i)))\n        (\\<lambda>i.\n            vec (dim_vec v) (\\<lambda>i. a * v $ i) $ i +\n            vec (dim_vec w) (\\<lambda>i. a * w $ i) $ i) $\n       i\n 2. dim_vec\n     (vec (dim_vec (vec (dim_vec w) (\\<lambda>i. v $ i + w $ i)))\n       (\\<lambda>i. a * vec (dim_vec w) (\\<lambda>i. v $ i + w $ i) $ i)) =\n    dim_vec\n     (vec (dim_vec (vec (dim_vec w) (\\<lambda>i. a * w $ i)))\n       (\\<lambda>i.\n           vec (dim_vec v) (\\<lambda>i. a * v $ i) $ i +\n           vec (dim_vec w) (\\<lambda>i. a * w $ i) $ i))", "by auto"], ["", "lemma smult_smult_assoc:\n  \"a \\<cdot>\\<^sub>v (b \\<cdot>\\<^sub>v v) = (a * b::'a::ring) \\<cdot>\\<^sub>v v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<cdot>\\<^sub>v (b \\<cdot>\\<^sub>v v) = a * b \\<cdot>\\<^sub>v v", "apply (rule sym, rule eq_vecI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>i.\n       i < dim_vec\n            (a \\<cdot>\\<^sub>v (b \\<cdot>\\<^sub>v v)) \\<Longrightarrow>\n       (a * b \\<cdot>\\<^sub>v v) $ i =\n       (a \\<cdot>\\<^sub>v (b \\<cdot>\\<^sub>v v)) $ i\n 2. dim_vec (a * b \\<cdot>\\<^sub>v v) =\n    dim_vec (a \\<cdot>\\<^sub>v (b \\<cdot>\\<^sub>v v))", "unfolding smult_vec_def plus_vec_def"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>i.\n       i < dim_vec\n            (vec (dim_vec (vec (dim_vec v) (\\<lambda>i. b * v $ i)))\n              (\\<lambda>i.\n                  a *\n                  vec (dim_vec v) (\\<lambda>i. b * v $ i) $\n                  i)) \\<Longrightarrow>\n       vec (dim_vec v) (\\<lambda>i. a * b * v $ i) $ i =\n       vec (dim_vec (vec (dim_vec v) (\\<lambda>i. b * v $ i)))\n        (\\<lambda>i. a * vec (dim_vec v) (\\<lambda>i. b * v $ i) $ i) $\n       i\n 2. dim_vec (vec (dim_vec v) (\\<lambda>i. a * b * v $ i)) =\n    dim_vec\n     (vec (dim_vec (vec (dim_vec v) (\\<lambda>i. b * v $ i)))\n       (\\<lambda>i. a * vec (dim_vec v) (\\<lambda>i. b * v $ i) $ i))", "using mult.assoc"], ["proof (prove)\nusing this:\n  ?a * ?b * ?c = ?a * (?b * ?c)\n\ngoal (2 subgoals):\n 1. \\<And>i.\n       i < dim_vec\n            (vec (dim_vec (vec (dim_vec v) (\\<lambda>i. b * v $ i)))\n              (\\<lambda>i.\n                  a *\n                  vec (dim_vec v) (\\<lambda>i. b * v $ i) $\n                  i)) \\<Longrightarrow>\n       vec (dim_vec v) (\\<lambda>i. a * b * v $ i) $ i =\n       vec (dim_vec (vec (dim_vec v) (\\<lambda>i. b * v $ i)))\n        (\\<lambda>i. a * vec (dim_vec v) (\\<lambda>i. b * v $ i) $ i) $\n       i\n 2. dim_vec (vec (dim_vec v) (\\<lambda>i. a * b * v $ i)) =\n    dim_vec\n     (vec (dim_vec (vec (dim_vec v) (\\<lambda>i. b * v $ i)))\n       (\\<lambda>i. a * vec (dim_vec v) (\\<lambda>i. b * v $ i) $ i))", "by auto"], ["", "lemma one_smult_vec [simp]:\n  \"(1::'a::ring_1) \\<cdot>\\<^sub>v v = v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (1::'a) \\<cdot>\\<^sub>v v = v", "unfolding smult_vec_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. vec (dim_vec v) (\\<lambda>i. (1::'a) * v $ i) = v", "by (rule eq_vecI,auto)"], ["", "lemma uminus_zero_vec[simp]: \"- (0\\<^sub>v n) = (0\\<^sub>v n :: 'a :: group_add vec)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. - 0\\<^sub>v n = 0\\<^sub>v n", "by (intro eq_vecI, auto)"], ["", "lemma index_finsum_vec: assumes \"finite F\" and i: \"i < n\"\n  and vs: \"vs \\<in> F \\<rightarrow> carrier_vec n\"\n  shows \"finsum_vec TYPE('a :: comm_monoid_add) n vs F $ i = sum (\\<lambda> f. vs f $ i) F\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finsum_vec TYPE('a) n vs F $ i = (\\<Sum>f\\<in>F. vs f $ i)", "using \\<open>finite F\\<close> vs"], ["proof (prove)\nusing this:\n  finite F\n  vs \\<in> F \\<rightarrow> carrier_vec n\n\ngoal (1 subgoal):\n 1. finsum_vec TYPE('a) n vs F $ i = (\\<Sum>f\\<in>F. vs f $ i)", "proof (induct F)"], ["proof (state)\ngoal (2 subgoals):\n 1. vs \\<in> {} \\<rightarrow> carrier_vec n \\<Longrightarrow>\n    finsum_vec TYPE('a) n vs {} $ i = (\\<Sum>f\\<in>{}. vs f $ i)\n 2. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        vs \\<in> F \\<rightarrow> carrier_vec n \\<Longrightarrow>\n        finsum_vec TYPE('a) n vs F $ i = (\\<Sum>f\\<in>F. vs f $ i);\n        vs \\<in> insert x F \\<rightarrow> carrier_vec n\\<rbrakk>\n       \\<Longrightarrow> finsum_vec TYPE('a) n vs (insert x F) $ i =\n                         (\\<Sum>f\\<in>insert x F. vs f $ i)", "case (insert f F)"], ["proof (state)\nthis:\n  finite F\n  f \\<notin> F\n  vs \\<in> F \\<rightarrow> carrier_vec n \\<Longrightarrow>\n  finsum_vec TYPE('a) n vs F $ i = (\\<Sum>f\\<in>F. vs f $ i)\n  vs \\<in> insert f F \\<rightarrow> carrier_vec n\n\ngoal (2 subgoals):\n 1. vs \\<in> {} \\<rightarrow> carrier_vec n \\<Longrightarrow>\n    finsum_vec TYPE('a) n vs {} $ i = (\\<Sum>f\\<in>{}. vs f $ i)\n 2. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        vs \\<in> F \\<rightarrow> carrier_vec n \\<Longrightarrow>\n        finsum_vec TYPE('a) n vs F $ i = (\\<Sum>f\\<in>F. vs f $ i);\n        vs \\<in> insert x F \\<rightarrow> carrier_vec n\\<rbrakk>\n       \\<Longrightarrow> finsum_vec TYPE('a) n vs (insert x F) $ i =\n                         (\\<Sum>f\\<in>insert x F. vs f $ i)", "hence IH: \"finsum_vec TYPE('a) n vs F $ i = (\\<Sum>f\\<in>F. vs f $ i)\"\n    and vs: \"vs \\<in> F \\<rightarrow> carrier_vec n\" \"vs f \\<in> carrier_vec n\""], ["proof (prove)\nusing this:\n  finite F\n  f \\<notin> F\n  vs \\<in> F \\<rightarrow> carrier_vec n \\<Longrightarrow>\n  finsum_vec TYPE('a) n vs F $ i = (\\<Sum>f\\<in>F. vs f $ i)\n  vs \\<in> insert f F \\<rightarrow> carrier_vec n\n\ngoal (1 subgoal):\n 1. finsum_vec TYPE('a) n vs F $ i = (\\<Sum>f\\<in>F. vs f $ i) &&&\n    vs \\<in> F \\<rightarrow> carrier_vec n &&& vs f \\<in> carrier_vec n", "by auto"], ["proof (state)\nthis:\n  finsum_vec TYPE('a) n vs F $ i = (\\<Sum>f\\<in>F. vs f $ i)\n  vs \\<in> F \\<rightarrow> carrier_vec n\n  vs f \\<in> carrier_vec n\n\ngoal (2 subgoals):\n 1. vs \\<in> {} \\<rightarrow> carrier_vec n \\<Longrightarrow>\n    finsum_vec TYPE('a) n vs {} $ i = (\\<Sum>f\\<in>{}. vs f $ i)\n 2. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        vs \\<in> F \\<rightarrow> carrier_vec n \\<Longrightarrow>\n        finsum_vec TYPE('a) n vs F $ i = (\\<Sum>f\\<in>F. vs f $ i);\n        vs \\<in> insert x F \\<rightarrow> carrier_vec n\\<rbrakk>\n       \\<Longrightarrow> finsum_vec TYPE('a) n vs (insert x F) $ i =\n                         (\\<Sum>f\\<in>insert x F. vs f $ i)", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. finsum_vec TYPE('a) n vs (insert f F) $ i =\n    (\\<Sum>f\\<in>insert f F. vs f $ i)", "unfolding finsum_vec_insert[OF insert(1-2) vs]"], ["proof (prove)\ngoal (1 subgoal):\n 1. (vs f + finsum_vec TYPE('a) n vs F) $ i =\n    (\\<Sum>f\\<in>insert f F. vs f $ i)", "unfolding sum.insert[OF insert(1-2)]"], ["proof (prove)\ngoal (1 subgoal):\n 1. (vs f + finsum_vec TYPE('a) n vs F) $ i =\n    vs f $ i + (\\<Sum>f\\<in>F. vs f $ i)", "unfolding IH[symmetric]"], ["proof (prove)\ngoal (1 subgoal):\n 1. (vs f + finsum_vec TYPE('a) n vs F) $ i =\n    vs f $ i + finsum_vec TYPE('a) n vs F $ i", "by (rule index_add_vec, insert i, insert finsum_vec_closed[OF vs(1)], auto)"], ["proof (state)\nthis:\n  finsum_vec TYPE('a) n vs (insert f F) $ i =\n  (\\<Sum>f\\<in>insert f F. vs f $ i)\n\ngoal (1 subgoal):\n 1. vs \\<in> {} \\<rightarrow> carrier_vec n \\<Longrightarrow>\n    finsum_vec TYPE('a) n vs {} $ i = (\\<Sum>f\\<in>{}. vs f $ i)", "qed (insert i, auto simp: finsum_vec_empty)"], ["", "text \\<open>Definition of pointwise ordering on vectors for non-strict part, and\n  strict version is defined in a way such that the @{class order} constraints are satisfied.\\<close>"], ["", "instantiation vec :: (ord) ord\nbegin"], ["", "definition less_eq_vec :: \"'a vec \\<Rightarrow> 'a vec \\<Rightarrow> bool\" where\n  \"less_eq_vec v w = (dim_vec v = dim_vec w \\<and> (\\<forall> i < dim_vec w. v $ i \\<le> w $ i))\""], ["", "definition less_vec :: \"'a vec \\<Rightarrow> 'a vec \\<Rightarrow> bool\" where\n  \"less_vec v w = (v \\<le> w \\<and> \\<not> (w \\<le> v))\""], ["", "instance"], ["proof (prove)\ngoal (1 subgoal):\n 1. OFCLASS('a vec, ord_class)", ".."], ["", "end"], ["", "instantiation vec :: (preorder) preorder\nbegin"], ["", "instance"], ["proof (prove)\ngoal (1 subgoal):\n 1. OFCLASS('a vec, preorder_class)", "by (standard, auto simp: less_vec_def less_eq_vec_def order_trans)"], ["", "end"], ["", "instantiation vec :: (order) order\nbegin"], ["", "instance"], ["proof (prove)\ngoal (1 subgoal):\n 1. OFCLASS('a vec, order_class)", "by (standard, intro eq_vecI, auto simp: less_eq_vec_def order.antisym)"], ["", "end"], ["", "subsection\\<open>Matrices\\<close>"], ["", "text \\<open>Similarly as for vectors, we specify which value should be returned in case\n  an index is out of bounds. It is defined in a way that only few\n  index comparisons have to be performed in the implementation.\\<close>"], ["", "definition undef_mat :: \"nat \\<Rightarrow> nat \\<Rightarrow> (nat \\<times> nat \\<Rightarrow> 'a) \\<Rightarrow> nat \\<times> nat \\<Rightarrow> 'a\" where\n  \"undef_mat nr nc f \\<equiv> \\<lambda> (i,j). [[f (i,j). j <- [0 ..< nc]] . i <- [0 ..< nr]] ! i ! j\""], ["", "lemma undef_cong_mat: assumes \"\\<And> i j. i < nr \\<Longrightarrow> j < nc \\<Longrightarrow> f (i,j) = f' (i,j)\"\n  shows \"undef_mat nr nc f x = undef_mat nr nc f' x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. undef_mat nr nc f x = undef_mat nr nc f' x", "proof (cases x)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a b.\n       x = (a, b) \\<Longrightarrow>\n       undef_mat nr nc f x = undef_mat nr nc f' x", "case (Pair i j)"], ["proof (state)\nthis:\n  x = (i, j)\n\ngoal (1 subgoal):\n 1. \\<And>a b.\n       x = (a, b) \\<Longrightarrow>\n       undef_mat nr nc f x = undef_mat nr nc f' x", "have nth_map_ge: \"\\<And> i xs. \\<not> i < length xs \\<Longrightarrow> xs ! i = [] ! (i - length xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i xs.\n       \\<not> i < length xs \\<Longrightarrow> xs ! i = [] ! (i - length xs)", "by (metis append_Nil2 nth_append)"], ["proof (state)\nthis:\n  \\<not> ?i < length ?xs \\<Longrightarrow> ?xs ! ?i = [] ! (?i - length ?xs)\n\ngoal (1 subgoal):\n 1. \\<And>a b.\n       x = (a, b) \\<Longrightarrow>\n       undef_mat nr nc f x = undef_mat nr nc f' x", "note [simp] = Pair undef_mat_def nth_map_ge[of i] nth_map_ge[of j]"], ["proof (state)\nthis:\n  x = (i, j)\n  undef_mat ?nr ?nc ?f \\<equiv>\n  \\<lambda>(i, j).\n     map (\\<lambda>i. map (\\<lambda>j. ?f (i, j)) [0..<?nc]) [0..<?nr] ! i !\n     j\n  \\<not> i < length ?xs \\<Longrightarrow> ?xs ! i = [] ! (i - length ?xs)\n  \\<not> j < length ?xs \\<Longrightarrow> ?xs ! j = [] ! (j - length ?xs)\n\ngoal (1 subgoal):\n 1. \\<And>a b.\n       x = (a, b) \\<Longrightarrow>\n       undef_mat nr nc f x = undef_mat nr nc f' x", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. undef_mat nr nc f x = undef_mat nr nc f' x", "by (cases \"i < nr\", simp, cases \"j < nc\", insert assms, auto)"], ["proof (state)\nthis:\n  undef_mat nr nc f x = undef_mat nr nc f' x\n\ngoal:\nNo subgoals!", "qed"], ["", "definition mk_mat :: \"nat \\<Rightarrow> nat \\<Rightarrow> (nat \\<times> nat \\<Rightarrow> 'a) \\<Rightarrow> (nat \\<times> nat \\<Rightarrow> 'a)\" where\n  \"mk_mat nr nc f \\<equiv> \\<lambda> (i,j). if i < nr \\<and> j < nc then f (i,j) else undef_mat nr nc f (i,j)\""], ["", "lemma cong_mk_mat: assumes \"\\<And> i j. i < nr \\<Longrightarrow> j < nc \\<Longrightarrow> f (i,j) = f' (i,j)\"\n  shows \"mk_mat nr nc f = mk_mat nr nc f'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mk_mat nr nc f = mk_mat nr nc f'", "using undef_cong_mat[of nr nc f f', OF assms]"], ["proof (prove)\nusing this:\n  \\<lbrakk>\\<And>i j.\n              \\<lbrakk>i < nr; j < nc\\<rbrakk> \\<Longrightarrow> i < nr;\n   \\<And>i j.\n      \\<lbrakk>i < nr; j < nc\\<rbrakk> \\<Longrightarrow> j < nc\\<rbrakk>\n  \\<Longrightarrow> undef_mat nr nc f ?x = undef_mat nr nc f' ?x\n\ngoal (1 subgoal):\n 1. mk_mat nr nc f = mk_mat nr nc f'", "using assms"], ["proof (prove)\nusing this:\n  \\<lbrakk>\\<And>i j.\n              \\<lbrakk>i < nr; j < nc\\<rbrakk> \\<Longrightarrow> i < nr;\n   \\<And>i j.\n      \\<lbrakk>i < nr; j < nc\\<rbrakk> \\<Longrightarrow> j < nc\\<rbrakk>\n  \\<Longrightarrow> undef_mat nr nc f ?x = undef_mat nr nc f' ?x\n  \\<lbrakk>?i < nr; ?j < nc\\<rbrakk>\n  \\<Longrightarrow> f (?i, ?j) = f' (?i, ?j)\n\ngoal (1 subgoal):\n 1. mk_mat nr nc f = mk_mat nr nc f'", "unfolding mk_mat_def"], ["proof (prove)\nusing this:\n  \\<lbrakk>\\<And>i j.\n              \\<lbrakk>i < nr; j < nc\\<rbrakk> \\<Longrightarrow> i < nr;\n   \\<And>i j.\n      \\<lbrakk>i < nr; j < nc\\<rbrakk> \\<Longrightarrow> j < nc\\<rbrakk>\n  \\<Longrightarrow> undef_mat nr nc f ?x = undef_mat nr nc f' ?x\n  \\<lbrakk>?i < nr; ?j < nc\\<rbrakk>\n  \\<Longrightarrow> f (?i, ?j) = f' (?i, ?j)\n\ngoal (1 subgoal):\n 1. (\\<lambda>(i, j).\n        if i < nr \\<and> j < nc then f (i, j)\n        else undef_mat nr nc f (i, j)) =\n    (\\<lambda>(i, j).\n        if i < nr \\<and> j < nc then f' (i, j)\n        else undef_mat nr nc f' (i, j))", "by auto"], ["", "typedef 'a mat = \"{(nr, nc, mk_mat nr nc f) | nr nc f :: nat \\<times> nat \\<Rightarrow> 'a. True}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>x. x \\<in> {(nr, nc, mk_mat nr nc f) |nr nc f. True}", "by auto"], ["", "setup_lifting type_definition_mat"], ["", "lift_definition dim_row :: \"'a mat \\<Rightarrow> nat\" is fst"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "lift_definition dim_col :: \"'a mat \\<Rightarrow> nat\" is \"fst o snd\""], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "lift_definition index_mat :: \"'a mat \\<Rightarrow> (nat \\<times> nat \\<Rightarrow> 'a)\" (infixl \"$$\" 100) is \"snd o snd\""], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "lift_definition mat :: \"nat \\<Rightarrow> nat \\<Rightarrow> (nat \\<times> nat \\<Rightarrow> 'a) \\<Rightarrow> 'a mat\"\n  is \"\\<lambda> nr nc f. (nr, nc, mk_mat nr nc f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>nat1 nat2 fun.\n       \\<exists>nr nc f.\n          (nat1, nat2, mk_mat nat1 nat2 fun) =\n          (nr, nc, mk_mat nr nc f) \\<and>\n          True", "by auto"], ["", "lift_definition mat_of_row_fun :: \"nat \\<Rightarrow> nat \\<Rightarrow> (nat \\<Rightarrow> 'a vec) \\<Rightarrow> 'a mat\" (\"mat\\<^sub>r\")\n  is \"\\<lambda> nr nc f. (nr, nc, mk_mat nr nc (\\<lambda> (i,j). f i $ j))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>nat1 nat2 fun.\n       \\<exists>nr nc f.\n          (nat1, nat2, mk_mat nat1 nat2 (\\<lambda>(i, y). fun i $ y)) =\n          (nr, nc, mk_mat nr nc f) \\<and>\n          True", "by auto"], ["", "definition mat_to_list :: \"'a mat \\<Rightarrow> 'a list list\" where\n  \"mat_to_list A = [ [A $$ (i,j) . j <- [0 ..< dim_col A]] . i <- [0 ..< dim_row A]]\""], ["", "fun square_mat :: \"'a mat \\<Rightarrow> bool\" where \"square_mat A = (dim_col A = dim_row A)\""], ["", "definition upper_triangular :: \"'a::zero mat \\<Rightarrow> bool\"\n  where \"upper_triangular A \\<equiv>\n    \\<forall>i < dim_row A. \\<forall> j < i. A $$ (i,j) = 0\""], ["", "lemma upper_triangularD[elim] :\n  \"upper_triangular A \\<Longrightarrow> j < i \\<Longrightarrow> i < dim_row A \\<Longrightarrow> A $$ (i,j) = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>upper_triangular A; j < i; i < dim_row A\\<rbrakk>\n    \\<Longrightarrow> A $$ (i, j) = (0::'a)", "unfolding upper_triangular_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>i<dim_row A. \\<forall>j<i. A $$ (i, j) = (0::'a);\n     j < i; i < dim_row A\\<rbrakk>\n    \\<Longrightarrow> A $$ (i, j) = (0::'a)", "by auto"], ["", "lemma upper_triangularI[intro] :\n  \"(\\<And>i j. j < i \\<Longrightarrow> i < dim_row A \\<Longrightarrow> A $$ (i,j) = 0) \\<Longrightarrow> upper_triangular A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>i j.\n        \\<lbrakk>j < i; i < dim_row A\\<rbrakk>\n        \\<Longrightarrow> A $$ (i, j) = (0::'a)) \\<Longrightarrow>\n    upper_triangular A", "unfolding upper_triangular_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>i j.\n        \\<lbrakk>j < i; i < dim_row A\\<rbrakk>\n        \\<Longrightarrow> A $$ (i, j) = (0::'a)) \\<Longrightarrow>\n    \\<forall>i<dim_row A. \\<forall>j<i. A $$ (i, j) = (0::'a)", "by auto"], ["", "lemma dim_row_mat[simp]: \"dim_row (mat nr nc f) = nr\" \"dim_row (mat\\<^sub>r nr nc g) = nr\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dim_row (mat nr nc f) = nr &&& dim_row (mat\\<^sub>r nr nc g) = nr", "by (transfer, simp)+"], ["", "lemma dim_col_mat[simp]: \"dim_col (mat nr nc f) = nc\" \"dim_col (mat\\<^sub>r nr nc g) = nc\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dim_col (mat nr nc f) = nc &&& dim_col (mat\\<^sub>r nr nc g) = nc", "by (transfer, simp)+"], ["", "definition carrier_mat :: \"nat \\<Rightarrow> nat \\<Rightarrow> 'a mat set\"\n  where \"carrier_mat nr nc = { m . dim_row m = nr \\<and> dim_col m = nc}\""], ["", "lemma carrier_mat_triv[simp]: \"m \\<in> carrier_mat (dim_row m) (dim_col m)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. m \\<in> carrier_mat (dim_row m) (dim_col m)", "unfolding carrier_mat_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. m \\<in> {ma. dim_row ma = dim_row m \\<and> dim_col ma = dim_col m}", "by auto"], ["", "lemma mat_carrier[simp]: \"mat nr nc f \\<in> carrier_mat nr nc\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mat nr nc f \\<in> carrier_mat nr nc", "unfolding carrier_mat_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. mat nr nc f \\<in> {m. dim_row m = nr \\<and> dim_col m = nc}", "by auto"], ["", "definition elements_mat :: \"'a mat \\<Rightarrow> 'a set\"\n  where \"elements_mat A = set [A $$ (i,j). i <- [0 ..< dim_row A], j <- [0 ..< dim_col A]]\""], ["", "lemma elements_matD [dest]:\n  \"a \\<in> elements_mat A \\<Longrightarrow> \\<exists>i j. i < dim_row A \\<and> j < dim_col A \\<and> a = A $$ (i,j)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<in> elements_mat A \\<Longrightarrow>\n    \\<exists>i j. i < dim_row A \\<and> j < dim_col A \\<and> a = A $$ (i, j)", "unfolding elements_mat_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<in> set (concat\n                  (map (\\<lambda>i.\n                           map (\\<lambda>j. A $$ (i, j)) [0..<dim_col A])\n                    [0..<dim_row A])) \\<Longrightarrow>\n    \\<exists>i j. i < dim_row A \\<and> j < dim_col A \\<and> a = A $$ (i, j)", "by force"], ["", "lemma elements_matI [intro]:\n  \"A \\<in> carrier_mat nr nc \\<Longrightarrow> i < nr \\<Longrightarrow> j < nc \\<Longrightarrow> a = A $$ (i,j) \\<Longrightarrow> a \\<in> elements_mat A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>A \\<in> carrier_mat nr nc; i < nr; j < nc;\n     a = A $$ (i, j)\\<rbrakk>\n    \\<Longrightarrow> a \\<in> elements_mat A", "unfolding elements_mat_def carrier_mat_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>A \\<in> {m. dim_row m = nr \\<and> dim_col m = nc}; i < nr;\n     j < nc; a = A $$ (i, j)\\<rbrakk>\n    \\<Longrightarrow> a \\<in> set (concat\n                                    (map\n(\\<lambda>i. map (\\<lambda>j. A $$ (i, j)) [0..<dim_col A])\n[0..<dim_row A]))", "by force"], ["", "lemma index_mat[simp]:  \"i < nr \\<Longrightarrow> j < nc \\<Longrightarrow> mat nr nc f $$ (i,j) = f (i,j)\"\n  \"i < nr \\<Longrightarrow> j < nc \\<Longrightarrow> mat\\<^sub>r nr nc g $$ (i,j) = g i $ j\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lbrakk>i < nr; j < nc\\<rbrakk>\n     \\<Longrightarrow> mat nr nc f $$ (i, j) = f (i, j)) &&&\n    (\\<lbrakk>i < nr; j < nc\\<rbrakk>\n     \\<Longrightarrow> mat\\<^sub>r nr nc g $$ (i, j) = g i $ j)", "by (transfer', simp add: mk_mat_def)+"], ["", "lemma eq_matI[intro]: \"(\\<And> i j . i < dim_row B \\<Longrightarrow> j < dim_col B \\<Longrightarrow> A $$ (i,j) = B $$ (i,j))\n  \\<Longrightarrow> dim_row A = dim_row B\n  \\<Longrightarrow> dim_col A = dim_col B\n  \\<Longrightarrow> A = B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>i j.\n                \\<lbrakk>i < dim_row B; j < dim_col B\\<rbrakk>\n                \\<Longrightarrow> A $$ (i, j) = B $$ (i, j);\n     dim_row A = dim_row B; dim_col A = dim_col B\\<rbrakk>\n    \\<Longrightarrow> A = B", "by (transfer, auto intro!: cong_mk_mat, auto simp: mk_mat_def)"], ["", "lemma carrier_matI[intro]:\n  assumes \"dim_row A = nr\" \"dim_col A = nc\" shows  \"A \\<in> carrier_mat nr nc\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A \\<in> carrier_mat nr nc", "using assms"], ["proof (prove)\nusing this:\n  dim_row A = nr\n  dim_col A = nc\n\ngoal (1 subgoal):\n 1. A \\<in> carrier_mat nr nc", "unfolding carrier_mat_def"], ["proof (prove)\nusing this:\n  dim_row A = nr\n  dim_col A = nc\n\ngoal (1 subgoal):\n 1. A \\<in> {m. dim_row m = nr \\<and> dim_col m = nc}", "by auto"], ["", "lemma carrier_matD[dest,simp]: assumes \"A \\<in> carrier_mat nr nc\"\n  shows \"dim_row A = nr\" \"dim_col A = nc\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dim_row A = nr &&& dim_col A = nc", "using assms"], ["proof (prove)\nusing this:\n  A \\<in> carrier_mat nr nc\n\ngoal (1 subgoal):\n 1. dim_row A = nr &&& dim_col A = nc", "unfolding carrier_mat_def"], ["proof (prove)\nusing this:\n  A \\<in> {m. dim_row m = nr \\<and> dim_col m = nc}\n\ngoal (1 subgoal):\n 1. dim_row A = nr &&& dim_col A = nc", "by auto"], ["", "lemma cong_mat: assumes \"nr = nr'\" \"nc = nc'\" \"\\<And> i j. i < nr \\<Longrightarrow> j < nc \\<Longrightarrow>\n  f (i,j) = f' (i,j)\" shows \"mat nr nc f = mat nr' nc' f'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mat nr nc f = mat nr' nc' f'", "by (rule eq_matI, insert assms, auto)"], ["", "definition row :: \"'a mat \\<Rightarrow> nat \\<Rightarrow> 'a vec\" where\n  \"row A i = vec (dim_col A) (\\<lambda> j. A $$ (i,j))\""], ["", "definition rows :: \"'a mat \\<Rightarrow> 'a vec list\" where\n  \"rows A = map (row A) [0..<dim_row A]\""], ["", "lemma row_carrier[simp]: \"row A i \\<in> carrier_vec (dim_col A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. row A i \\<in> carrier_vec (dim_col A)", "unfolding row_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. vec (dim_col A) (\\<lambda>j. A $$ (i, j)) \\<in> carrier_vec (dim_col A)", "by auto"], ["", "lemma rows_carrier[simp]: \"set (rows A) \\<subseteq> carrier_vec (dim_col A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set (rows A) \\<subseteq> carrier_vec (dim_col A)", "unfolding rows_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. set (map (row A) [0..<dim_row A]) \\<subseteq> carrier_vec (dim_col A)", "by auto"], ["", "lemma length_rows[simp]: \"length (rows A) = dim_row A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length (rows A) = dim_row A", "unfolding rows_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. length (map (row A) [0..<dim_row A]) = dim_row A", "by auto"], ["", "lemma nth_rows[simp]: \"i < dim_row A \\<Longrightarrow> rows A ! i = row A i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. i < dim_row A \\<Longrightarrow> rows A ! i = row A i", "unfolding rows_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. i < dim_row A \\<Longrightarrow>\n    map (row A) [0..<dim_row A] ! i = row A i", "by auto"], ["", "lemma row_mat_of_row_fun[simp]: \"i < nr \\<Longrightarrow> dim_vec (f i) = nc \\<Longrightarrow> row (mat\\<^sub>r nr nc f) i = f i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>i < nr; dim_vec (f i) = nc\\<rbrakk>\n    \\<Longrightarrow> row (mat\\<^sub>r nr nc f) i = f i", "by (rule eq_vecI, auto simp: row_def)"], ["", "lemma set_rows_carrier:\n  assumes \"A \\<in> carrier_mat m n\" and \"v \\<in> set (rows A)\" shows \"v \\<in> carrier_vec n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. v \\<in> carrier_vec n", "using assms"], ["proof (prove)\nusing this:\n  A \\<in> carrier_mat m n\n  v \\<in> set (rows A)\n\ngoal (1 subgoal):\n 1. v \\<in> carrier_vec n", "by (auto simp: rows_def row_def)"], ["", "definition mat_of_rows :: \"nat \\<Rightarrow> 'a vec list \\<Rightarrow> 'a mat\"\n  where \"mat_of_rows n rs = mat (length rs) n (\\<lambda>(i,j). rs ! i $ j)\""], ["", "definition mat_of_rows_list :: \"nat \\<Rightarrow> 'a list list \\<Rightarrow> 'a mat\" where\n  \"mat_of_rows_list nc rs = mat (length rs) nc (\\<lambda> (i,j). rs ! i ! j)\""], ["", "lemma mat_of_rows_carrier[simp]:\n  \"mat_of_rows n vs \\<in> carrier_mat (length vs) n\"\n  \"dim_row (mat_of_rows n vs) = length vs\"\n  \"dim_col (mat_of_rows n vs) = n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mat_of_rows n vs \\<in> carrier_mat (length vs) n &&&\n    dim_row (mat_of_rows n vs) = length vs &&&\n    dim_col (mat_of_rows n vs) = n", "unfolding mat_of_rows_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. mat (length vs) n (\\<lambda>(i, y). vs ! i $ y)\n    \\<in> carrier_mat (length vs) n &&&\n    dim_row (mat (length vs) n (\\<lambda>(i, y). vs ! i $ y)) =\n    length vs &&&\n    dim_col (mat (length vs) n (\\<lambda>(i, y). vs ! i $ y)) = n", "by auto"], ["", "lemma mat_of_rows_row[simp]:\n  assumes i:\"i < length vs\" and n: \"vs ! i \\<in> carrier_vec n\"\n  shows \"row (mat_of_rows n vs) i = vs ! i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. row (mat_of_rows n vs) i = vs ! i", "unfolding mat_of_rows_def row_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. vec (dim_col (mat (length vs) n (\\<lambda>(i, y). vs ! i $ y)))\n     (\\<lambda>j.\n         mat (length vs) n (\\<lambda>(i, y). vs ! i $ y) $$ (i, j)) =\n    vs ! i", "using n i"], ["proof (prove)\nusing this:\n  vs ! i \\<in> carrier_vec n\n  i < length vs\n\ngoal (1 subgoal):\n 1. vec (dim_col (mat (length vs) n (\\<lambda>(i, y). vs ! i $ y)))\n     (\\<lambda>j.\n         mat (length vs) n (\\<lambda>(i, y). vs ! i $ y) $$ (i, j)) =\n    vs ! i", "by auto"], ["", "lemma rows_mat_of_rows[simp]:\n  assumes \"set vs \\<subseteq> carrier_vec n\" shows \"rows (mat_of_rows n vs) = vs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rows (mat_of_rows n vs) = vs", "unfolding rows_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. map (row (mat_of_rows n vs)) [0..<dim_row (mat_of_rows n vs)] = vs", "apply (rule nth_equalityI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. length (map (row (mat_of_rows n vs)) [0..<dim_row (mat_of_rows n vs)]) =\n    length vs\n 2. \\<And>i.\n       i < length\n            (map (row (mat_of_rows n vs))\n              [0..<dim_row (mat_of_rows n vs)]) \\<Longrightarrow>\n       map (row (mat_of_rows n vs)) [0..<dim_row (mat_of_rows n vs)] ! i =\n       vs ! i", "using assms"], ["proof (prove)\nusing this:\n  set vs \\<subseteq> carrier_vec n\n\ngoal (2 subgoals):\n 1. length (map (row (mat_of_rows n vs)) [0..<dim_row (mat_of_rows n vs)]) =\n    length vs\n 2. \\<And>i.\n       i < length\n            (map (row (mat_of_rows n vs))\n              [0..<dim_row (mat_of_rows n vs)]) \\<Longrightarrow>\n       map (row (mat_of_rows n vs)) [0..<dim_row (mat_of_rows n vs)] ! i =\n       vs ! i", "unfolding subset_code(1)"], ["proof (prove)\nusing this:\n  \\<forall>x\\<in>set vs. x \\<in> carrier_vec n\n\ngoal (2 subgoals):\n 1. length (map (row (mat_of_rows n vs)) [0..<dim_row (mat_of_rows n vs)]) =\n    length vs\n 2. \\<And>i.\n       i < length\n            (map (row (mat_of_rows n vs))\n              [0..<dim_row (mat_of_rows n vs)]) \\<Longrightarrow>\n       map (row (mat_of_rows n vs)) [0..<dim_row (mat_of_rows n vs)] ! i =\n       vs ! i", "by auto"], ["", "lemma mat_of_rows_rows[simp]:\n  \"mat_of_rows (dim_col A) (rows A) = A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mat_of_rows (dim_col A) (rows A) = A", "unfolding mat_of_rows_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. mat (length (rows A)) (dim_col A) (\\<lambda>(i, y). rows A ! i $ y) = A", "by (rule, auto simp: row_def)"], ["", "definition col :: \"'a mat \\<Rightarrow> nat \\<Rightarrow> 'a vec\" where\n  \"col A j = vec (dim_row A) (\\<lambda> i. A $$ (i,j))\""], ["", "definition cols :: \"'a mat \\<Rightarrow> 'a vec list\" where\n  \"cols A = map (col A) [0..<dim_col A]\""], ["", "definition mat_of_cols :: \"nat \\<Rightarrow> 'a vec list \\<Rightarrow> 'a mat\"\n  where \"mat_of_cols n cs = mat n (length cs) (\\<lambda>(i,j). cs ! j $ i)\""], ["", "definition mat_of_cols_list :: \"nat \\<Rightarrow> 'a list list \\<Rightarrow> 'a mat\" where\n  \"mat_of_cols_list nr cs = mat nr (length cs) (\\<lambda> (i,j). cs ! j ! i)\""], ["", "lemma col_dim[simp]: \"col A i \\<in> carrier_vec (dim_row A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. col A i \\<in> carrier_vec (dim_row A)", "unfolding col_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. vec (dim_row A) (\\<lambda>ia. A $$ (ia, i))\n    \\<in> carrier_vec (dim_row A)", "by auto"], ["", "lemma dim_col[simp]: \"dim_vec (col A i) = dim_row A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dim_vec (col A i) = dim_row A", "by auto"], ["", "lemma cols_dim[simp]: \"set (cols A) \\<subseteq> carrier_vec (dim_row A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set (cols A) \\<subseteq> carrier_vec (dim_row A)", "unfolding cols_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. set (map (col A) [0..<dim_col A]) \\<subseteq> carrier_vec (dim_row A)", "by auto"], ["", "lemma cols_length[simp]: \"length (cols A) = dim_col A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length (cols A) = dim_col A", "unfolding cols_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. length (map (col A) [0..<dim_col A]) = dim_col A", "by auto"], ["", "lemma cols_nth[simp]: \"i < dim_col A \\<Longrightarrow> cols A ! i = col A i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. i < dim_col A \\<Longrightarrow> cols A ! i = col A i", "unfolding cols_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. i < dim_col A \\<Longrightarrow>\n    map (col A) [0..<dim_col A] ! i = col A i", "by auto"], ["", "lemma mat_of_cols_carrier[simp]:\n  \"mat_of_cols n vs \\<in> carrier_mat n (length vs)\"\n  \"dim_row (mat_of_cols n vs) = n\"\n  \"dim_col (mat_of_cols n vs) = length vs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mat_of_cols n vs \\<in> carrier_mat n (length vs) &&&\n    dim_row (mat_of_cols n vs) = n &&&\n    dim_col (mat_of_cols n vs) = length vs", "unfolding mat_of_cols_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. mat n (length vs) (\\<lambda>(i, j). vs ! j $ i)\n    \\<in> carrier_mat n (length vs) &&&\n    dim_row (mat n (length vs) (\\<lambda>(i, j). vs ! j $ i)) = n &&&\n    dim_col (mat n (length vs) (\\<lambda>(i, j). vs ! j $ i)) = length vs", "by auto"], ["", "lemma col_mat_of_cols[simp]:\n  assumes j:\"j < length vs\" and n: \"vs ! j \\<in> carrier_vec n\"\n  shows \"col (mat_of_cols n vs) j = vs ! j\""], ["proof (prove)\ngoal (1 subgoal):\n 1. col (mat_of_cols n vs) j = vs ! j", "unfolding mat_of_cols_def col_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. vec (dim_row (mat n (length vs) (\\<lambda>(i, j). vs ! j $ i)))\n     (\\<lambda>i.\n         mat n (length vs) (\\<lambda>(i, j). vs ! j $ i) $$ (i, j)) =\n    vs ! j", "using j n"], ["proof (prove)\nusing this:\n  j < length vs\n  vs ! j \\<in> carrier_vec n\n\ngoal (1 subgoal):\n 1. vec (dim_row (mat n (length vs) (\\<lambda>(i, j). vs ! j $ i)))\n     (\\<lambda>i.\n         mat n (length vs) (\\<lambda>(i, j). vs ! j $ i) $$ (i, j)) =\n    vs ! j", "by auto"], ["", "lemma cols_mat_of_cols[simp]:\n  assumes \"set vs \\<subseteq> carrier_vec n\" shows \"cols (mat_of_cols n vs) = vs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. cols (mat_of_cols n vs) = vs", "unfolding cols_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. map (col (mat_of_cols n vs)) [0..<dim_col (mat_of_cols n vs)] = vs", "apply(rule nth_equalityI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. length (map (col (mat_of_cols n vs)) [0..<dim_col (mat_of_cols n vs)]) =\n    length vs\n 2. \\<And>i.\n       i < length\n            (map (col (mat_of_cols n vs))\n              [0..<dim_col (mat_of_cols n vs)]) \\<Longrightarrow>\n       map (col (mat_of_cols n vs)) [0..<dim_col (mat_of_cols n vs)] ! i =\n       vs ! i", "using assms"], ["proof (prove)\nusing this:\n  set vs \\<subseteq> carrier_vec n\n\ngoal (2 subgoals):\n 1. length (map (col (mat_of_cols n vs)) [0..<dim_col (mat_of_cols n vs)]) =\n    length vs\n 2. \\<And>i.\n       i < length\n            (map (col (mat_of_cols n vs))\n              [0..<dim_col (mat_of_cols n vs)]) \\<Longrightarrow>\n       map (col (mat_of_cols n vs)) [0..<dim_col (mat_of_cols n vs)] ! i =\n       vs ! i", "unfolding subset_code(1)"], ["proof (prove)\nusing this:\n  \\<forall>x\\<in>set vs. x \\<in> carrier_vec n\n\ngoal (2 subgoals):\n 1. length (map (col (mat_of_cols n vs)) [0..<dim_col (mat_of_cols n vs)]) =\n    length vs\n 2. \\<And>i.\n       i < length\n            (map (col (mat_of_cols n vs))\n              [0..<dim_col (mat_of_cols n vs)]) \\<Longrightarrow>\n       map (col (mat_of_cols n vs)) [0..<dim_col (mat_of_cols n vs)] ! i =\n       vs ! i", "by auto"], ["", "lemma mat_of_cols_cols[simp]:\n  \"mat_of_cols (dim_row A) (cols A) = A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mat_of_cols (dim_row A) (cols A) = A", "unfolding mat_of_cols_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. mat (dim_row A) (length (cols A)) (\\<lambda>(i, j). cols A ! j $ i) = A", "by (rule, auto simp: col_def)"], ["", "instantiation mat :: (ord) ord\nbegin"], ["", "definition less_eq_mat :: \"'a mat \\<Rightarrow> 'a mat \\<Rightarrow> bool\" where\n  \"less_eq_mat A B = (dim_row A = dim_row B \\<and> dim_col A = dim_col B \\<and> \n      (\\<forall> i < dim_row B. \\<forall> j < dim_col B. A $$ (i,j) \\<le> B $$ (i,j)))\""], ["", "definition less_mat :: \"'a mat \\<Rightarrow> 'a mat \\<Rightarrow> bool\" where\n  \"less_mat A B = (A \\<le> B \\<and> \\<not> (B \\<le> A))\""], ["", "instance"], ["proof (prove)\ngoal (1 subgoal):\n 1. OFCLASS('a mat, ord_class)", ".."], ["", "end"], ["", "instantiation mat :: (preorder) preorder\nbegin"], ["", "instance"], ["proof (prove)\ngoal (1 subgoal):\n 1. OFCLASS('a mat, preorder_class)", "proof (standard, auto simp: less_mat_def less_eq_mat_def, goal_cases)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x y z i j.\n       \\<lbrakk>dim_row x = dim_row z; dim_row y = dim_row z;\n        dim_col x = dim_col z;\n        \\<forall>i<dim_row z.\n           \\<forall>j<dim_col z. x $$ (i, j) \\<le> y $$ (i, j);\n        dim_col y = dim_col z;\n        \\<forall>i<dim_row z.\n           \\<forall>j<dim_col z. y $$ (i, j) \\<le> z $$ (i, j);\n        i < dim_row z; j < dim_col z\\<rbrakk>\n       \\<Longrightarrow> x $$ (i, j) \\<le> z $$ (i, j)", "case (1 A B C i j)"], ["proof (state)\nthis:\n  dim_row A = dim_row C\n  dim_row B = dim_row C\n  dim_col A = dim_col C\n  \\<forall>i<dim_row C. \\<forall>j<dim_col C. A $$ (i, j) \\<le> B $$ (i, j)\n  dim_col B = dim_col C\n  \\<forall>i<dim_row C. \\<forall>j<dim_col C. B $$ (i, j) \\<le> C $$ (i, j)\n  i < dim_row C\n  j < dim_col C\n\ngoal (1 subgoal):\n 1. \\<And>x y z i j.\n       \\<lbrakk>dim_row x = dim_row z; dim_row y = dim_row z;\n        dim_col x = dim_col z;\n        \\<forall>i<dim_row z.\n           \\<forall>j<dim_col z. x $$ (i, j) \\<le> y $$ (i, j);\n        dim_col y = dim_col z;\n        \\<forall>i<dim_row z.\n           \\<forall>j<dim_col z. y $$ (i, j) \\<le> z $$ (i, j);\n        i < dim_row z; j < dim_col z\\<rbrakk>\n       \\<Longrightarrow> x $$ (i, j) \\<le> z $$ (i, j)", "thus ?case"], ["proof (prove)\nusing this:\n  dim_row A = dim_row C\n  dim_row B = dim_row C\n  dim_col A = dim_col C\n  \\<forall>i<dim_row C. \\<forall>j<dim_col C. A $$ (i, j) \\<le> B $$ (i, j)\n  dim_col B = dim_col C\n  \\<forall>i<dim_row C. \\<forall>j<dim_col C. B $$ (i, j) \\<le> C $$ (i, j)\n  i < dim_row C\n  j < dim_col C\n\ngoal (1 subgoal):\n 1. A $$ (i, j) \\<le> C $$ (i, j)", "using order_trans[of \"A $$ (i,j)\" \"B $$ (i,j)\" \"C $$ (i,j)\"]"], ["proof (prove)\nusing this:\n  dim_row A = dim_row C\n  dim_row B = dim_row C\n  dim_col A = dim_col C\n  \\<forall>i<dim_row C. \\<forall>j<dim_col C. A $$ (i, j) \\<le> B $$ (i, j)\n  dim_col B = dim_col C\n  \\<forall>i<dim_row C. \\<forall>j<dim_col C. B $$ (i, j) \\<le> C $$ (i, j)\n  i < dim_row C\n  j < dim_col C\n  \\<lbrakk>A $$ (i, j) \\<le> B $$ (i, j);\n   B $$ (i, j) \\<le> C $$ (i, j)\\<rbrakk>\n  \\<Longrightarrow> A $$ (i, j) \\<le> C $$ (i, j)\n\ngoal (1 subgoal):\n 1. A $$ (i, j) \\<le> C $$ (i, j)", "by auto"], ["proof (state)\nthis:\n  A $$ (i, j) \\<le> C $$ (i, j)\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "instantiation mat :: (order) order\nbegin"], ["", "instance"], ["proof (prove)\ngoal (1 subgoal):\n 1. OFCLASS('a mat, order_class)", "by (standard, intro eq_matI, auto simp: less_eq_mat_def order.antisym)"], ["", "end"], ["", "instantiation mat :: (plus) plus\nbegin"], ["", "definition plus_mat :: \"('a :: plus) mat \\<Rightarrow> 'a mat \\<Rightarrow> 'a mat\" where\n  \"A + B \\<equiv> mat (dim_row B) (dim_col B) (\\<lambda> ij. A $$ ij + B $$ ij)\""], ["", "instance"], ["proof (prove)\ngoal (1 subgoal):\n 1. OFCLASS('a mat, plus_class)", ".."], ["", "end"], ["", "definition map_mat :: \"('a \\<Rightarrow> 'b) \\<Rightarrow> 'a mat \\<Rightarrow> 'b mat\" where\n  \"map_mat f A \\<equiv> mat (dim_row A) (dim_col A) (\\<lambda> ij. f (A $$ ij))\""], ["", "definition smult_mat :: \"'a :: times \\<Rightarrow> 'a mat \\<Rightarrow> 'a mat\" (infixl \"\\<cdot>\\<^sub>m\" 70)\n  where \"a \\<cdot>\\<^sub>m A \\<equiv> map_mat (\\<lambda> b. a * b) A\""], ["", "definition zero_mat :: \"nat \\<Rightarrow> nat \\<Rightarrow> 'a :: zero mat\" (\"0\\<^sub>m\") where\n  \"0\\<^sub>m nr nc \\<equiv> mat nr nc (\\<lambda> ij. 0)\""], ["", "lemma elements_0_mat [simp]: \"elements_mat (0\\<^sub>m nr nc) \\<subseteq> {0}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. elements_mat (0\\<^sub>m nr nc) \\<subseteq> {0::'a}", "unfolding elements_mat_def zero_mat_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. set (concat\n          (map (\\<lambda>i.\n                   map (\\<lambda>j.\n                           mat nr nc (\\<lambda>ij. 0::'a) $$ (i, j))\n                    [0..<dim_col (mat nr nc (\\<lambda>ij. 0::'a))])\n            [0..<dim_row (mat nr nc (\\<lambda>ij. 0::'a))]))\n    \\<subseteq> {0::'a}", "by auto"], ["", "definition transpose_mat :: \"'a mat \\<Rightarrow> 'a mat\" where\n  \"transpose_mat A \\<equiv> mat (dim_col A) (dim_row A) (\\<lambda> (i,j). A $$ (j,i))\""], ["", "definition one_mat :: \"nat \\<Rightarrow> 'a :: {zero,one} mat\" (\"1\\<^sub>m\") where\n  \"1\\<^sub>m n \\<equiv> mat n n (\\<lambda> (i,j). if i = j then 1 else 0)\""], ["", "instantiation mat :: (uminus) uminus\nbegin"], ["", "definition uminus_mat :: \"'a :: uminus mat \\<Rightarrow> 'a mat\" where\n  \"- A \\<equiv> mat (dim_row A) (dim_col A) (\\<lambda> ij. - (A $$ ij))\""], ["", "instance"], ["proof (prove)\ngoal (1 subgoal):\n 1. OFCLASS('a mat, uminus_class)", ".."], ["", "end"], ["", "instantiation mat :: (minus) minus\nbegin"], ["", "definition minus_mat :: \"('a :: minus) mat \\<Rightarrow> 'a mat \\<Rightarrow> 'a mat\" where\n  \"A - B \\<equiv> mat (dim_row B) (dim_col B) (\\<lambda> ij. A $$ ij - B $$ ij)\""], ["", "instance"], ["proof (prove)\ngoal (1 subgoal):\n 1. OFCLASS('a mat, minus_class)", ".."], ["", "end"], ["", "instantiation mat :: (semiring_0) times\nbegin"], ["", "definition times_mat :: \"'a :: semiring_0 mat \\<Rightarrow> 'a mat \\<Rightarrow> 'a mat\"\n  where \"A * B \\<equiv> mat (dim_row A) (dim_col B) (\\<lambda> (i,j). row A i \\<bullet> col B j)\""], ["", "instance"], ["proof (prove)\ngoal (1 subgoal):\n 1. OFCLASS('a mat, times_class)", ".."], ["", "end"], ["", "definition mult_mat_vec :: \"'a :: semiring_0 mat \\<Rightarrow> 'a vec \\<Rightarrow> 'a vec\" (infixl \"*\\<^sub>v\" 70)\n  where \"A *\\<^sub>v v \\<equiv> vec (dim_row A) (\\<lambda> i. row A i \\<bullet> v)\""], ["", "definition inverts_mat :: \"'a :: semiring_1 mat \\<Rightarrow> 'a mat \\<Rightarrow> bool\" where\n  \"inverts_mat A B \\<equiv> A * B = 1\\<^sub>m (dim_row A)\""], ["", "definition invertible_mat :: \"'a :: semiring_1 mat \\<Rightarrow> bool\"\n  where \"invertible_mat A \\<equiv> square_mat A \\<and> (\\<exists>B. inverts_mat A B \\<and> inverts_mat B A)\""], ["", "definition monoid_mat :: \"'a :: monoid_add itself \\<Rightarrow> nat \\<Rightarrow> nat \\<Rightarrow> 'a mat monoid\" where\n  \"monoid_mat ty nr nc \\<equiv> \\<lparr>\n    carrier = carrier_mat nr nc,\n    mult = (+),\n    one = 0\\<^sub>m nr nc\\<rparr>\""], ["", "definition ring_mat :: \"'a :: semiring_1 itself \\<Rightarrow> nat \\<Rightarrow> 'b \\<Rightarrow> ('a mat,'b) ring_scheme\" where\n  \"ring_mat ty n b \\<equiv> \\<lparr>\n    carrier = carrier_mat n n,\n    mult = (*),\n    one = 1\\<^sub>m n,\n    zero = 0\\<^sub>m n n,\n    add = (+),\n    \\<dots> = b\\<rparr>\""], ["", "definition module_mat :: \"'a :: semiring_1 itself \\<Rightarrow> nat \\<Rightarrow> nat \\<Rightarrow> ('a,'a mat)module\" where\n  \"module_mat ty nr nc \\<equiv> \\<lparr>\n    carrier = carrier_mat nr nc,\n    mult = (*),\n    one = 1\\<^sub>m nr,\n    zero = 0\\<^sub>m nr nc,\n    add = (+),\n    smult = (\\<cdot>\\<^sub>m)\\<rparr>\""], ["", "lemma ring_mat_simps:\n  \"mult (ring_mat ty n b) = (*)\"\n  \"add (ring_mat ty n b) = (+)\"\n  \"one (ring_mat ty n b) = 1\\<^sub>m n\"\n  \"zero (ring_mat ty n b) = 0\\<^sub>m n n\"\n  \"carrier (ring_mat ty n b) = carrier_mat n n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((\\<otimes>\\<^bsub>ring_mat ty n b\\<^esub>) = (*) &&&\n     (\\<oplus>\\<^bsub>ring_mat ty n b\\<^esub>) = (+)) &&&\n    \\<one>\\<^bsub>ring_mat ty n b\\<^esub> = 1\\<^sub>m n &&&\n    \\<zero>\\<^bsub>ring_mat ty n b\\<^esub> = 0\\<^sub>m n n &&&\n    carrier (ring_mat ty n b) = carrier_mat n n", "unfolding ring_mat_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. ((\\<otimes>\\<^bsub>\\<lparr>carrier = carrier_mat n n, mult = (*), one = 1\\<^sub>m n, zero = 0\\<^sub>m n n, add = (+), \\<dots> = b\\<rparr>\\<^esub>) =\n     (*) &&&\n     (\\<oplus>\\<^bsub>\\<lparr>carrier = carrier_mat n n, mult = (*), one = 1\\<^sub>m n, zero = 0\\<^sub>m n n, add = (+), \\<dots> = b\\<rparr>\\<^esub>) =\n     (+)) &&&\n    \\<one>\\<^bsub>\\<lparr>carrier = carrier_mat n n, mult = (*), one = 1\\<^sub>m n, zero = 0\\<^sub>m n n, add = (+), \\<dots> = b\\<rparr>\\<^esub> =\n    1\\<^sub>m n &&&\n    \\<zero>\\<^bsub>\\<lparr>carrier = carrier_mat n n, mult = (*), one = 1\\<^sub>m n, zero = 0\\<^sub>m n n, add = (+), \\<dots> = b\\<rparr>\\<^esub> =\n    0\\<^sub>m n n &&&\n    carrier\n     \\<lparr>carrier = carrier_mat n n, mult = (*), one = 1\\<^sub>m n,\n        zero = 0\\<^sub>m n n, add = (+), \\<dots> = b\\<rparr> =\n    carrier_mat n n", "by auto"], ["", "lemma module_mat_simps:\n  \"mult (module_mat ty nr nc) = (*)\"\n  \"add (module_mat ty nr nc) = (+)\"\n  \"one (module_mat ty nr nc) = 1\\<^sub>m nr\"\n  \"zero (module_mat ty nr nc) = 0\\<^sub>m nr nc\"\n  \"carrier (module_mat ty nr nc) = carrier_mat nr nc\"\n  \"smult (module_mat ty nr nc) = (\\<cdot>\\<^sub>m)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((\\<otimes>\\<^bsub>module_mat ty nr nc\\<^esub>) = (*) &&&\n     (\\<oplus>\\<^bsub>module_mat ty nr nc\\<^esub>) = (+) &&&\n     \\<one>\\<^bsub>module_mat ty nr nc\\<^esub> = 1\\<^sub>m nr) &&&\n    \\<zero>\\<^bsub>module_mat ty nr nc\\<^esub> = 0\\<^sub>m nr nc &&&\n    carrier (module_mat ty nr nc) = carrier_mat nr nc &&&\n    (\\<odot>\\<^bsub>module_mat ty nr nc\\<^esub>) = (\\<cdot>\\<^sub>m)", "unfolding module_mat_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. ((\\<otimes>\\<^bsub>\\<lparr>carrier = carrier_mat nr nc, mult = (*), one = 1\\<^sub>m nr, zero = 0\\<^sub>m nr nc, add = (+), smult = (\\<cdot>\\<^sub>m)\\<rparr>\\<^esub>) =\n     (*) &&&\n     (\\<oplus>\\<^bsub>\\<lparr>carrier = carrier_mat nr nc, mult = (*), one = 1\\<^sub>m nr, zero = 0\\<^sub>m nr nc, add = (+), smult = (\\<cdot>\\<^sub>m)\\<rparr>\\<^esub>) =\n     (+) &&&\n     \\<one>\\<^bsub>\\<lparr>carrier = carrier_mat nr nc, mult = (*), one = 1\\<^sub>m nr, zero = 0\\<^sub>m nr nc, add = (+), smult = (\\<cdot>\\<^sub>m)\\<rparr>\\<^esub> =\n     1\\<^sub>m nr) &&&\n    \\<zero>\\<^bsub>\\<lparr>carrier = carrier_mat nr nc, mult = (*), one = 1\\<^sub>m nr, zero = 0\\<^sub>m nr nc, add = (+), smult = (\\<cdot>\\<^sub>m)\\<rparr>\\<^esub> =\n    0\\<^sub>m nr nc &&&\n    carrier\n     \\<lparr>carrier = carrier_mat nr nc, mult = (*), one = 1\\<^sub>m nr,\n        zero = 0\\<^sub>m nr nc, add = (+),\n        smult = (\\<cdot>\\<^sub>m)\\<rparr> =\n    carrier_mat nr nc &&&\n    (\\<odot>\\<^bsub>\\<lparr>carrier = carrier_mat nr nc, mult = (*), one = 1\\<^sub>m nr, zero = 0\\<^sub>m nr nc, add = (+), smult = (\\<cdot>\\<^sub>m)\\<rparr>\\<^esub>) =\n    (\\<cdot>\\<^sub>m)", "by auto"], ["", "lemma index_zero_mat[simp]: \"i < nr \\<Longrightarrow> j < nc \\<Longrightarrow> 0\\<^sub>m nr nc $$ (i,j) = 0\"\n  \"dim_row (0\\<^sub>m nr nc) = nr\" \"dim_col (0\\<^sub>m nr nc) = nc\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lbrakk>i < nr; j < nc\\<rbrakk>\n     \\<Longrightarrow> 0\\<^sub>m nr nc $$ (i, j) = (0::'a)) &&&\n    dim_row (0\\<^sub>m nr nc) = nr &&& dim_col (0\\<^sub>m nr nc) = nc", "unfolding zero_mat_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lbrakk>i < nr; j < nc\\<rbrakk>\n     \\<Longrightarrow> mat nr nc (\\<lambda>ij. 0::'a) $$ (i, j) =\n                       (0::'a)) &&&\n    dim_row (mat nr nc (\\<lambda>ij. 0::'b)) = nr &&&\n    dim_col (mat nr nc (\\<lambda>ij. 0::'c)) = nc", "by auto"], ["", "lemma index_one_mat[simp]: \"i < n \\<Longrightarrow> j < n \\<Longrightarrow> 1\\<^sub>m n $$ (i,j) = (if i = j then 1 else 0)\"\n  \"dim_row (1\\<^sub>m n) = n\" \"dim_col (1\\<^sub>m n) = n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lbrakk>i < n; j < n\\<rbrakk>\n     \\<Longrightarrow> 1\\<^sub>m n $$ (i, j) =\n                       (if i = j then 1::'a else (0::'a))) &&&\n    dim_row (1\\<^sub>m n) = n &&& dim_col (1\\<^sub>m n) = n", "unfolding one_mat_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lbrakk>i < n; j < n\\<rbrakk>\n     \\<Longrightarrow> mat n n\n                        (\\<lambda>(i, j).\n                            if i = j then 1::'a else (0::'a)) $$\n                       (i, j) =\n                       (if i = j then 1::'a else (0::'a))) &&&\n    dim_row (mat n n (\\<lambda>(i, j). if i = j then 1::'b else (0::'b))) =\n    n &&&\n    dim_col (mat n n (\\<lambda>(i, j). if i = j then 1::'c else (0::'c))) =\n    n", "by auto"], ["", "lemma index_add_mat[simp]:\n  \"i < dim_row B \\<Longrightarrow> j < dim_col B \\<Longrightarrow> (A + B) $$ (i,j) = A $$ (i,j) + B $$ (i,j)\"\n  \"dim_row (A + B) = dim_row B\" \"dim_col (A + B) = dim_col B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lbrakk>i < dim_row B; j < dim_col B\\<rbrakk>\n     \\<Longrightarrow> (A + B) $$ (i, j) = A $$ (i, j) + B $$ (i, j)) &&&\n    dim_row (A + B) = dim_row B &&& dim_col (A + B) = dim_col B", "unfolding plus_mat_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lbrakk>i < dim_row B; j < dim_col B\\<rbrakk>\n     \\<Longrightarrow> mat (dim_row B) (dim_col B)\n                        (\\<lambda>ij. A $$ ij + B $$ ij) $$\n                       (i, j) =\n                       A $$ (i, j) + B $$ (i, j)) &&&\n    dim_row (mat (dim_row B) (dim_col B) (\\<lambda>ij. A $$ ij + B $$ ij)) =\n    dim_row B &&&\n    dim_col (mat (dim_row B) (dim_col B) (\\<lambda>ij. A $$ ij + B $$ ij)) =\n    dim_col B", "by auto"], ["", "lemma index_minus_mat[simp]:\n  \"i < dim_row B \\<Longrightarrow> j < dim_col B \\<Longrightarrow> (A - B) $$ (i,j) = A $$ (i,j) - B $$ (i,j)\"\n  \"dim_row (A - B) = dim_row B\" \"dim_col (A - B) = dim_col B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lbrakk>i < dim_row B; j < dim_col B\\<rbrakk>\n     \\<Longrightarrow> (A - B) $$ (i, j) = A $$ (i, j) - B $$ (i, j)) &&&\n    dim_row (A - B) = dim_row B &&& dim_col (A - B) = dim_col B", "unfolding minus_mat_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lbrakk>i < dim_row B; j < dim_col B\\<rbrakk>\n     \\<Longrightarrow> mat (dim_row B) (dim_col B)\n                        (\\<lambda>ij. A $$ ij - B $$ ij) $$\n                       (i, j) =\n                       A $$ (i, j) - B $$ (i, j)) &&&\n    dim_row (mat (dim_row B) (dim_col B) (\\<lambda>ij. A $$ ij - B $$ ij)) =\n    dim_row B &&&\n    dim_col (mat (dim_row B) (dim_col B) (\\<lambda>ij. A $$ ij - B $$ ij)) =\n    dim_col B", "by auto"], ["", "lemma index_map_mat[simp]:\n  \"i < dim_row A \\<Longrightarrow> j < dim_col A \\<Longrightarrow> map_mat f A $$ (i,j) = f (A $$ (i,j))\"\n  \"dim_row (map_mat f A) = dim_row A\" \"dim_col (map_mat f A) = dim_col A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lbrakk>i < dim_row A; j < dim_col A\\<rbrakk>\n     \\<Longrightarrow> map_mat f A $$ (i, j) = f (A $$ (i, j))) &&&\n    dim_row (map_mat f A) = dim_row A &&& dim_col (map_mat f A) = dim_col A", "unfolding map_mat_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lbrakk>i < dim_row A; j < dim_col A\\<rbrakk>\n     \\<Longrightarrow> mat (dim_row A) (dim_col A)\n                        (\\<lambda>ij. f (A $$ ij)) $$\n                       (i, j) =\n                       f (A $$ (i, j))) &&&\n    dim_row (mat (dim_row A) (dim_col A) (\\<lambda>ij. f (A $$ ij))) =\n    dim_row A &&&\n    dim_col (mat (dim_row A) (dim_col A) (\\<lambda>ij. f (A $$ ij))) =\n    dim_col A", "by auto"], ["", "lemma index_smult_mat[simp]:\n  \"i < dim_row A \\<Longrightarrow> j < dim_col A \\<Longrightarrow> (a \\<cdot>\\<^sub>m A) $$ (i,j) = a * A $$ (i,j)\"\n  \"dim_row (a \\<cdot>\\<^sub>m A) = dim_row A\" \"dim_col (a \\<cdot>\\<^sub>m A) = dim_col A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lbrakk>i < dim_row A; j < dim_col A\\<rbrakk>\n     \\<Longrightarrow> (a \\<cdot>\\<^sub>m A) $$ (i, j) =\n                       a * A $$ (i, j)) &&&\n    dim_row (a \\<cdot>\\<^sub>m A) = dim_row A &&&\n    dim_col (a \\<cdot>\\<^sub>m A) = dim_col A", "unfolding smult_mat_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lbrakk>i < dim_row A; j < dim_col A\\<rbrakk>\n     \\<Longrightarrow> map_mat ((*) a) A $$ (i, j) = a * A $$ (i, j)) &&&\n    dim_row (map_mat ((*) a) A) = dim_row A &&&\n    dim_col (map_mat ((*) a) A) = dim_col A", "by auto"], ["", "lemma index_uminus_mat[simp]:\n  \"i < dim_row A \\<Longrightarrow> j < dim_col A \\<Longrightarrow> (- A) $$ (i,j) = - (A $$ (i,j))\"\n  \"dim_row (- A) = dim_row A\" \"dim_col (- A) = dim_col A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lbrakk>i < dim_row A; j < dim_col A\\<rbrakk>\n     \\<Longrightarrow> (- A) $$ (i, j) = - A $$ (i, j)) &&&\n    dim_row (- A) = dim_row A &&& dim_col (- A) = dim_col A", "unfolding uminus_mat_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lbrakk>i < dim_row A; j < dim_col A\\<rbrakk>\n     \\<Longrightarrow> mat (dim_row A) (dim_col A)\n                        (\\<lambda>ij. - A $$ ij) $$\n                       (i, j) =\n                       - A $$ (i, j)) &&&\n    dim_row (mat (dim_row A) (dim_col A) (\\<lambda>ij. - A $$ ij)) =\n    dim_row A &&&\n    dim_col (mat (dim_row A) (dim_col A) (\\<lambda>ij. - A $$ ij)) =\n    dim_col A", "by auto"], ["", "lemma index_transpose_mat[simp]:\n  \"i < dim_col A \\<Longrightarrow> j < dim_row A \\<Longrightarrow> transpose_mat A $$ (i,j) = A $$ (j,i)\"\n  \"dim_row (transpose_mat A) = dim_col A\" \"dim_col (transpose_mat A) = dim_row A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lbrakk>i < dim_col A; j < dim_row A\\<rbrakk>\n     \\<Longrightarrow> transpose_mat A $$ (i, j) = A $$ (j, i)) &&&\n    dim_row (transpose_mat A) = dim_col A &&&\n    dim_col (transpose_mat A) = dim_row A", "unfolding transpose_mat_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lbrakk>i < dim_col A; j < dim_row A\\<rbrakk>\n     \\<Longrightarrow> mat (dim_col A) (dim_row A)\n                        (\\<lambda>(i, j). A $$ (j, i)) $$\n                       (i, j) =\n                       A $$ (j, i)) &&&\n    dim_row (mat (dim_col A) (dim_row A) (\\<lambda>(i, j). A $$ (j, i))) =\n    dim_col A &&&\n    dim_col (mat (dim_col A) (dim_row A) (\\<lambda>(i, j). A $$ (j, i))) =\n    dim_row A", "by auto"], ["", "lemma index_mult_mat[simp]:\n  \"i < dim_row A \\<Longrightarrow> j < dim_col B \\<Longrightarrow> (A * B) $$ (i,j) = row A i \\<bullet> col B j\"\n  \"dim_row (A * B) = dim_row A\" \"dim_col (A * B) = dim_col B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lbrakk>i < dim_row A; j < dim_col B\\<rbrakk>\n     \\<Longrightarrow> (A * B) $$ (i, j) = row A i \\<bullet> col B j) &&&\n    dim_row (A * B) = dim_row A &&& dim_col (A * B) = dim_col B", "by (auto simp: times_mat_def)"], ["", "lemma dim_mult_mat_vec[simp]: \"dim_vec (A *\\<^sub>v v) = dim_row A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dim_vec (A *\\<^sub>v v) = dim_row A", "by (auto simp: mult_mat_vec_def)"], ["", "lemma index_mult_mat_vec[simp]: \"i < dim_row A \\<Longrightarrow> (A *\\<^sub>v v) $ i = row A i \\<bullet> v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. i < dim_row A \\<Longrightarrow>\n    (A *\\<^sub>v v) $ i = row A i \\<bullet> v", "by (auto simp: mult_mat_vec_def)"], ["", "lemma index_row[simp]:\n  \"i < dim_row A \\<Longrightarrow> j < dim_col A \\<Longrightarrow> row A i $ j = A $$ (i,j)\"\n  \"dim_vec (row A i) = dim_col A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lbrakk>i < dim_row A; j < dim_col A\\<rbrakk>\n     \\<Longrightarrow> row A i $ j = A $$ (i, j)) &&&\n    dim_vec (row A i) = dim_col A", "by (auto simp: row_def)"], ["", "lemma index_col[simp]: \"i < dim_row A \\<Longrightarrow> j < dim_col A \\<Longrightarrow> col A j $ i = A $$ (i,j)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>i < dim_row A; j < dim_col A\\<rbrakk>\n    \\<Longrightarrow> col A j $ i = A $$ (i, j)", "by (auto simp: col_def)"], ["", "lemma upper_triangular_one[simp]: \"upper_triangular (1\\<^sub>m n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. upper_triangular (1\\<^sub>m n)", "by (rule, auto)"], ["", "lemma upper_triangular_zero[simp]: \"upper_triangular (0\\<^sub>m n n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. upper_triangular (0\\<^sub>m n n)", "by (rule, auto)"], ["", "lemma mat_row_carrierI[intro,simp]: \"mat\\<^sub>r nr nc r \\<in> carrier_mat nr nc\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mat\\<^sub>r nr nc r \\<in> carrier_mat nr nc", "by (unfold carrier_mat_def carrier_vec_def, auto)"], ["", "lemma eq_rowI: assumes rows: \"\\<And> i. i < dim_row B \\<Longrightarrow> row A i = row B i\"\n  and dims: \"dim_row A = dim_row B\" \"dim_col A = dim_col B\"\n  shows \"A = B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A = B", "proof (rule eq_matI[OF _ dims])"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>i < dim_row B; j < dim_col B\\<rbrakk>\n       \\<Longrightarrow> A $$ (i, j) = B $$ (i, j)", "fix i j"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>i < dim_row B; j < dim_col B\\<rbrakk>\n       \\<Longrightarrow> A $$ (i, j) = B $$ (i, j)", "assume i: \"i < dim_row B\" and j: \"j < dim_col B\""], ["proof (state)\nthis:\n  i < dim_row B\n  j < dim_col B\n\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>i < dim_row B; j < dim_col B\\<rbrakk>\n       \\<Longrightarrow> A $$ (i, j) = B $$ (i, j)", "from rows[OF i]"], ["proof (chain)\npicking this:\n  row A i = row B i", "have id: \"row A i $ j = row B i $ j\""], ["proof (prove)\nusing this:\n  row A i = row B i\n\ngoal (1 subgoal):\n 1. row A i $ j = row B i $ j", "by simp"], ["proof (state)\nthis:\n  row A i $ j = row B i $ j\n\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>i < dim_row B; j < dim_col B\\<rbrakk>\n       \\<Longrightarrow> A $$ (i, j) = B $$ (i, j)", "show \"A $$ (i, j) = B $$ (i, j)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A $$ (i, j) = B $$ (i, j)", "using index_row(1)[OF i j, folded id] index_row(1)[of i A j] i j dims"], ["proof (prove)\nusing this:\n  row A i $ j = B $$ (i, j)\n  \\<lbrakk>i < dim_row A; j < dim_col A\\<rbrakk>\n  \\<Longrightarrow> row A i $ j = A $$ (i, j)\n  i < dim_row B\n  j < dim_col B\n  dim_row A = dim_row B\n  dim_col A = dim_col B\n\ngoal (1 subgoal):\n 1. A $$ (i, j) = B $$ (i, j)", "by auto"], ["proof (state)\nthis:\n  A $$ (i, j) = B $$ (i, j)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma row_mat[simp]: \"i < nr \\<Longrightarrow> row (mat nr nc f) i = vec nc (\\<lambda> j. f (i,j))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. i < nr \\<Longrightarrow>\n    row (mat nr nc f) i = vec nc (\\<lambda>j. f (i, j))", "by auto"], ["", "lemma col_mat[simp]: \"j < nc \\<Longrightarrow> col (mat nr nc f) j = vec nr (\\<lambda> i. f (i,j))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. j < nc \\<Longrightarrow>\n    col (mat nr nc f) j = vec nr (\\<lambda>i. f (i, j))", "by auto"], ["", "lemma zero_carrier_mat[simp]: \"0\\<^sub>m nr nc \\<in> carrier_mat nr nc\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0\\<^sub>m nr nc \\<in> carrier_mat nr nc", "unfolding carrier_mat_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. 0\\<^sub>m nr nc \\<in> {m. dim_row m = nr \\<and> dim_col m = nc}", "by auto"], ["", "lemma smult_carrier_mat[simp]:\n  \"A \\<in> carrier_mat nr nc \\<Longrightarrow> k \\<cdot>\\<^sub>m A \\<in> carrier_mat nr nc\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A \\<in> carrier_mat nr nc \\<Longrightarrow>\n    k \\<cdot>\\<^sub>m A \\<in> carrier_mat nr nc", "unfolding carrier_mat_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. A \\<in> {m. dim_row m = nr \\<and> dim_col m = nc} \\<Longrightarrow>\n    k \\<cdot>\\<^sub>m A \\<in> {m. dim_row m = nr \\<and> dim_col m = nc}", "by auto"], ["", "lemma add_carrier_mat[simp]:\n  \"B \\<in> carrier_mat nr nc \\<Longrightarrow> A + B \\<in> carrier_mat nr nc\""], ["proof (prove)\ngoal (1 subgoal):\n 1. B \\<in> carrier_mat nr nc \\<Longrightarrow>\n    A + B \\<in> carrier_mat nr nc", "unfolding carrier_mat_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. B \\<in> {m. dim_row m = nr \\<and> dim_col m = nc} \\<Longrightarrow>\n    A + B \\<in> {m. dim_row m = nr \\<and> dim_col m = nc}", "by force"], ["", "lemma one_carrier_mat[simp]: \"1\\<^sub>m n \\<in> carrier_mat n n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 1\\<^sub>m n \\<in> carrier_mat n n", "unfolding carrier_mat_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. 1\\<^sub>m n \\<in> {m. dim_row m = n \\<and> dim_col m = n}", "by auto"], ["", "lemma uminus_carrier_mat:\n  \"A \\<in> carrier_mat nr nc \\<Longrightarrow> (- A \\<in> carrier_mat nr nc)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A \\<in> carrier_mat nr nc \\<Longrightarrow> - A \\<in> carrier_mat nr nc", "unfolding carrier_mat_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. A \\<in> {m. dim_row m = nr \\<and> dim_col m = nc} \\<Longrightarrow>\n    - A \\<in> {m. dim_row m = nr \\<and> dim_col m = nc}", "by auto"], ["", "lemma uminus_carrier_iff_mat[simp]:\n  \"(- A \\<in> carrier_mat nr nc) = (A \\<in> carrier_mat nr nc)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (- A \\<in> carrier_mat nr nc) = (A \\<in> carrier_mat nr nc)", "unfolding carrier_mat_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (- A \\<in> {m. dim_row m = nr \\<and> dim_col m = nc}) =\n    (A \\<in> {m. dim_row m = nr \\<and> dim_col m = nc})", "by auto"], ["", "lemma minus_carrier_mat:\n  \"B \\<in> carrier_mat nr nc \\<Longrightarrow> (A - B \\<in> carrier_mat nr nc)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. B \\<in> carrier_mat nr nc \\<Longrightarrow>\n    A - B \\<in> carrier_mat nr nc", "unfolding carrier_mat_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. B \\<in> {m. dim_row m = nr \\<and> dim_col m = nc} \\<Longrightarrow>\n    A - B \\<in> {m. dim_row m = nr \\<and> dim_col m = nc}", "by auto"], ["", "lemma transpose_carrier_mat[simp]: \"(transpose_mat A \\<in> carrier_mat nc nr) = (A \\<in> carrier_mat nr nc)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (transpose_mat A \\<in> carrier_mat nc nr) = (A \\<in> carrier_mat nr nc)", "unfolding carrier_mat_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (transpose_mat A \\<in> {m. dim_row m = nc \\<and> dim_col m = nr}) =\n    (A \\<in> {m. dim_row m = nr \\<and> dim_col m = nc})", "by auto"], ["", "lemma row_carrier_vec[simp]: \"i < nr \\<Longrightarrow> A \\<in> carrier_mat nr nc \\<Longrightarrow> row A i \\<in> carrier_vec nc\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>i < nr; A \\<in> carrier_mat nr nc\\<rbrakk>\n    \\<Longrightarrow> row A i \\<in> carrier_vec nc", "unfolding carrier_vec_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>i < nr; A \\<in> carrier_mat nr nc\\<rbrakk>\n    \\<Longrightarrow> row A i \\<in> {v. dim_vec v = nc}", "by auto"], ["", "lemma col_carrier_vec[simp]: \"j < nc \\<Longrightarrow> A \\<in> carrier_mat nr nc \\<Longrightarrow> col A j \\<in> carrier_vec nr\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>j < nc; A \\<in> carrier_mat nr nc\\<rbrakk>\n    \\<Longrightarrow> col A j \\<in> carrier_vec nr", "unfolding carrier_vec_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>j < nc; A \\<in> carrier_mat nr nc\\<rbrakk>\n    \\<Longrightarrow> col A j \\<in> {v. dim_vec v = nr}", "by auto"], ["", "lemma mult_carrier_mat[simp]:\n  \"A \\<in> carrier_mat nr n \\<Longrightarrow> B \\<in> carrier_mat n nc \\<Longrightarrow> A * B \\<in> carrier_mat nr nc\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>A \\<in> carrier_mat nr n; B \\<in> carrier_mat n nc\\<rbrakk>\n    \\<Longrightarrow> A * B \\<in> carrier_mat nr nc", "unfolding carrier_mat_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>A \\<in> {m. dim_row m = nr \\<and> dim_col m = n};\n     B \\<in> {m. dim_row m = n \\<and> dim_col m = nc}\\<rbrakk>\n    \\<Longrightarrow> A * B \\<in> {m. dim_row m = nr \\<and> dim_col m = nc}", "by auto"], ["", "lemma mult_mat_vec_carrier[simp]:\n  \"A \\<in> carrier_mat nr n \\<Longrightarrow> v \\<in> carrier_vec n \\<Longrightarrow> A *\\<^sub>v v \\<in> carrier_vec nr\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>A \\<in> carrier_mat nr n; v \\<in> carrier_vec n\\<rbrakk>\n    \\<Longrightarrow> A *\\<^sub>v v \\<in> carrier_vec nr", "unfolding carrier_mat_def carrier_vec_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>A \\<in> {m. dim_row m = nr \\<and> dim_col m = n};\n     v \\<in> {v. dim_vec v = n}\\<rbrakk>\n    \\<Longrightarrow> A *\\<^sub>v v \\<in> {v. dim_vec v = nr}", "by auto"], ["", "lemma comm_add_mat[ac_simps]:\n  \"(A :: 'a :: comm_monoid_add mat) \\<in> carrier_mat nr nc \\<Longrightarrow> B \\<in> carrier_mat nr nc \\<Longrightarrow> A + B = B + A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>A \\<in> carrier_mat nr nc; B \\<in> carrier_mat nr nc\\<rbrakk>\n    \\<Longrightarrow> A + B = B + A", "by (intro eq_matI, auto simp: ac_simps)"], ["", "lemma minus_r_inv_mat[simp]:\n  \"(A :: 'a :: group_add mat) \\<in> carrier_mat nr nc \\<Longrightarrow> (A - A) = 0\\<^sub>m nr nc\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A \\<in> carrier_mat nr nc \\<Longrightarrow> A - A = 0\\<^sub>m nr nc", "by (intro eq_matI, auto)"], ["", "lemma uminus_l_inv_mat[simp]:\n  \"(A :: 'a :: group_add mat) \\<in> carrier_mat nr nc \\<Longrightarrow> (- A + A) = 0\\<^sub>m nr nc\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A \\<in> carrier_mat nr nc \\<Longrightarrow> - A + A = 0\\<^sub>m nr nc", "by (intro eq_matI, auto)"], ["", "lemma add_inv_exists_mat:\n  \"(A :: 'a :: group_add mat) \\<in> carrier_mat nr nc \\<Longrightarrow> \\<exists> B \\<in> carrier_mat nr nc. B + A = 0\\<^sub>m nr nc \\<and> A + B = 0\\<^sub>m nr nc\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A \\<in> carrier_mat nr nc \\<Longrightarrow>\n    \\<exists>B\\<in>carrier_mat nr nc.\n       B + A = 0\\<^sub>m nr nc \\<and> A + B = 0\\<^sub>m nr nc", "by (intro bexI[of _ \"- A\"], auto)"], ["", "lemma assoc_add_mat[simp]:\n  \"(A :: 'a :: monoid_add mat) \\<in> carrier_mat nr nc \\<Longrightarrow> B \\<in> carrier_mat nr nc \\<Longrightarrow> C \\<in> carrier_mat nr nc\n  \\<Longrightarrow> (A + B) + C = A + (B + C)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>A \\<in> carrier_mat nr nc; B \\<in> carrier_mat nr nc;\n     C \\<in> carrier_mat nr nc\\<rbrakk>\n    \\<Longrightarrow> A + B + C = A + (B + C)", "by (intro eq_matI, auto simp: ac_simps)"], ["", "lemma uminus_add_mat: fixes A :: \"'a :: group_add mat\"\n  assumes \"A \\<in> carrier_mat nr nc\"\n  and \"B \\<in> carrier_mat nr nc\"\n  shows \"- (A + B) = - B + - A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. - (A + B) = - B + - A", "by (intro eq_matI, insert assms, auto simp: minus_add)"], ["", "lemma transpose_transpose[simp]:\n  \"transpose_mat (transpose_mat A) = A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. transpose_mat (transpose_mat A) = A", "by (intro eq_matI, auto)"], ["", "lemma transpose_one[simp]: \"transpose_mat (1\\<^sub>m n) = (1\\<^sub>m n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. transpose_mat (1\\<^sub>m n) = 1\\<^sub>m n", "by auto"], ["", "lemma row_transpose[simp]:\n  \"j < dim_col A \\<Longrightarrow> row (transpose_mat A) j = col A j\""], ["proof (prove)\ngoal (1 subgoal):\n 1. j < dim_col A \\<Longrightarrow> row (transpose_mat A) j = col A j", "unfolding row_def col_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. j < dim_col A \\<Longrightarrow>\n    vec (dim_col (transpose_mat A))\n     (\\<lambda>ja. transpose_mat A $$ (j, ja)) =\n    vec (dim_row A) (\\<lambda>i. A $$ (i, j))", "by (intro eq_vecI, auto)"], ["", "lemma col_transpose[simp]:\n  \"i < dim_row A \\<Longrightarrow> col (transpose_mat A) i = row A i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. i < dim_row A \\<Longrightarrow> col (transpose_mat A) i = row A i", "unfolding row_def col_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. i < dim_row A \\<Longrightarrow>\n    vec (dim_row (transpose_mat A))\n     (\\<lambda>ia. transpose_mat A $$ (ia, i)) =\n    vec (dim_col A) (\\<lambda>j. A $$ (i, j))", "by (intro eq_vecI, auto)"], ["", "lemma row_zero[simp]:\n  \"i < nr \\<Longrightarrow> row (0\\<^sub>m nr nc) i = 0\\<^sub>v nc\""], ["proof (prove)\ngoal (1 subgoal):\n 1. i < nr \\<Longrightarrow> row (0\\<^sub>m nr nc) i = 0\\<^sub>v nc", "by (intro eq_vecI, auto)"], ["", "lemma col_zero[simp]:\n  \"j < nc \\<Longrightarrow> col (0\\<^sub>m nr nc) j = 0\\<^sub>v nr\""], ["proof (prove)\ngoal (1 subgoal):\n 1. j < nc \\<Longrightarrow> col (0\\<^sub>m nr nc) j = 0\\<^sub>v nr", "by (intro eq_vecI, auto)"], ["", "lemma row_one[simp]:\n  \"i < n \\<Longrightarrow> row (1\\<^sub>m n) i = unit_vec n i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. i < n \\<Longrightarrow> row (1\\<^sub>m n) i = unit_vec n i", "by (intro eq_vecI, auto)"], ["", "lemma col_one[simp]:\n  \"j < n \\<Longrightarrow> col (1\\<^sub>m n) j = unit_vec n j\""], ["proof (prove)\ngoal (1 subgoal):\n 1. j < n \\<Longrightarrow> col (1\\<^sub>m n) j = unit_vec n j", "by (intro eq_vecI, auto)"], ["", "lemma transpose_add: \"A \\<in> carrier_mat nr nc \\<Longrightarrow> B \\<in> carrier_mat nr nc\n  \\<Longrightarrow> transpose_mat (A + B) = transpose_mat A + transpose_mat B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>A \\<in> carrier_mat nr nc; B \\<in> carrier_mat nr nc\\<rbrakk>\n    \\<Longrightarrow> transpose_mat (A + B) =\n                      transpose_mat A + transpose_mat B", "by (intro eq_matI, auto)"], ["", "lemma transpose_minus: \"A \\<in> carrier_mat nr nc \\<Longrightarrow> B \\<in> carrier_mat nr nc\n  \\<Longrightarrow> transpose_mat (A - B) = transpose_mat A - transpose_mat B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>A \\<in> carrier_mat nr nc; B \\<in> carrier_mat nr nc\\<rbrakk>\n    \\<Longrightarrow> transpose_mat (A - B) =\n                      transpose_mat A - transpose_mat B", "by (intro eq_matI, auto)"], ["", "lemma transpose_uminus: \"A \\<in> carrier_mat nr nc \\<Longrightarrow> transpose_mat (- A) = - (transpose_mat A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A \\<in> carrier_mat nr nc \\<Longrightarrow>\n    transpose_mat (- A) = - transpose_mat A", "by (intro eq_matI, auto)"], ["", "lemma row_add[simp]:\n  \"A \\<in> carrier_mat nr nc \\<Longrightarrow> B \\<in> carrier_mat nr nc \\<Longrightarrow> i < nr\n  \\<Longrightarrow> row (A + B) i = row A i + row B i\"\n  \"i < dim_row A \\<Longrightarrow> dim_row B = dim_row A \\<Longrightarrow> dim_col B = dim_col A \\<Longrightarrow> row (A + B) i = row A i + row B i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lbrakk>A \\<in> carrier_mat nr nc; B \\<in> carrier_mat nr nc;\n      i < nr\\<rbrakk>\n     \\<Longrightarrow> row (A + B) i = row A i + row B i) &&&\n    (\\<lbrakk>i < dim_row A; dim_row B = dim_row A;\n      dim_col B = dim_col A\\<rbrakk>\n     \\<Longrightarrow> row (A + B) i = row A i + row B i)", "by (rule eq_vecI, auto)"], ["", "lemma col_add[simp]:\n  \"A \\<in> carrier_mat nr nc \\<Longrightarrow> B \\<in> carrier_mat nr nc \\<Longrightarrow> j < nc\n  \\<Longrightarrow> col (A + B) j = col A j + col B j\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>A \\<in> carrier_mat nr nc; B \\<in> carrier_mat nr nc;\n     j < nc\\<rbrakk>\n    \\<Longrightarrow> col (A + B) j = col A j + col B j", "by (rule eq_vecI, auto)"], ["", "lemma row_mult[simp]: assumes m: \"A \\<in> carrier_mat nr n\" \"B \\<in> carrier_mat n nc\"\n  and i: \"i < nr\"\n  shows \"row (A * B) i = vec nc (\\<lambda> j. row A i \\<bullet> col B j)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. row (A * B) i = vec nc (\\<lambda>j. row A i \\<bullet> col B j)", "by (rule eq_vecI, insert m i, auto)"], ["", "lemma col_mult[simp]: assumes m: \"A \\<in> carrier_mat nr n\" \"B \\<in> carrier_mat n nc\"\n  and j: \"j < nc\"\n  shows \"col (A * B) j = vec nr (\\<lambda> i. row A i \\<bullet> col B j)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. col (A * B) j = vec nr (\\<lambda>i. row A i \\<bullet> col B j)", "by (rule eq_vecI, insert m j, auto)"], ["", "lemma transpose_mult:\n  \"(A :: 'a :: comm_semiring_0 mat) \\<in> carrier_mat nr n \\<Longrightarrow> B \\<in> carrier_mat n nc\n  \\<Longrightarrow> transpose_mat (A * B) = transpose_mat B * transpose_mat A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>A \\<in> carrier_mat nr n; B \\<in> carrier_mat n nc\\<rbrakk>\n    \\<Longrightarrow> transpose_mat (A * B) =\n                      transpose_mat B * transpose_mat A", "by (intro eq_matI, auto simp: comm_scalar_prod[of _ n])"], ["", "lemma left_add_zero_mat[simp]:\n  \"(A :: 'a :: monoid_add mat) \\<in> carrier_mat nr nc  \\<Longrightarrow> 0\\<^sub>m nr nc + A = A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A \\<in> carrier_mat nr nc \\<Longrightarrow> 0\\<^sub>m nr nc + A = A", "by (intro eq_matI, auto)"], ["", "lemma add_uminus_minus_mat: \"A \\<in> carrier_mat nr nc \\<Longrightarrow> B \\<in> carrier_mat nr nc \\<Longrightarrow> \n  A + (- B) = A - (B :: 'a :: group_add mat)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>A \\<in> carrier_mat nr nc; B \\<in> carrier_mat nr nc\\<rbrakk>\n    \\<Longrightarrow> A + - B = A - B", "by (intro eq_matI, auto)"], ["", "lemma right_add_zero_mat[simp]: \"A \\<in> carrier_mat nr nc \\<Longrightarrow> \n  A + 0\\<^sub>m nr nc = (A :: 'a :: monoid_add mat)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A \\<in> carrier_mat nr nc \\<Longrightarrow> A + 0\\<^sub>m nr nc = A", "by (intro eq_matI, auto)"], ["", "lemma left_mult_zero_mat:\n  \"A \\<in> carrier_mat n nc \\<Longrightarrow> 0\\<^sub>m nr n * A = 0\\<^sub>m nr nc\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A \\<in> carrier_mat n nc \\<Longrightarrow>\n    0\\<^sub>m nr n * A = 0\\<^sub>m nr nc", "by (intro eq_matI, auto)"], ["", "lemma left_mult_zero_mat'[simp]: \"dim_row A = n \\<Longrightarrow> 0\\<^sub>m nr n * A = 0\\<^sub>m nr (dim_col A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dim_row A = n \\<Longrightarrow>\n    0\\<^sub>m nr n * A = 0\\<^sub>m nr (dim_col A)", "by (rule left_mult_zero_mat, unfold carrier_mat_def, simp)"], ["", "lemma right_mult_zero_mat:\n  \"A \\<in> carrier_mat nr n \\<Longrightarrow> A * 0\\<^sub>m n nc = 0\\<^sub>m nr nc\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A \\<in> carrier_mat nr n \\<Longrightarrow>\n    A * 0\\<^sub>m n nc = 0\\<^sub>m nr nc", "by (intro eq_matI, auto)"], ["", "lemma right_mult_zero_mat'[simp]: \"dim_col A = n \\<Longrightarrow> A * 0\\<^sub>m n nc = 0\\<^sub>m (dim_row A) nc\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dim_col A = n \\<Longrightarrow>\n    A * 0\\<^sub>m n nc = 0\\<^sub>m (dim_row A) nc", "by (rule right_mult_zero_mat, unfold carrier_mat_def, simp)"], ["", "lemma left_mult_one_mat:\n  \"(A :: 'a :: semiring_1 mat) \\<in> carrier_mat nr nc \\<Longrightarrow> 1\\<^sub>m nr * A = A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A \\<in> carrier_mat nr nc \\<Longrightarrow> 1\\<^sub>m nr * A = A", "by (intro eq_matI, auto)"], ["", "lemma left_mult_one_mat'[simp]: \"dim_row (A :: 'a :: semiring_1 mat) = n \\<Longrightarrow> 1\\<^sub>m n * A = A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dim_row A = n \\<Longrightarrow> 1\\<^sub>m n * A = A", "by (rule left_mult_one_mat, unfold carrier_mat_def, simp)"], ["", "lemma right_mult_one_mat:\n  \"(A :: 'a :: semiring_1 mat) \\<in> carrier_mat nr nc \\<Longrightarrow> A * 1\\<^sub>m nc = A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A \\<in> carrier_mat nr nc \\<Longrightarrow> A * 1\\<^sub>m nc = A", "by (intro eq_matI, auto)"], ["", "lemma right_mult_one_mat'[simp]: \"dim_col (A :: 'a :: semiring_1 mat) = n \\<Longrightarrow> A * 1\\<^sub>m n = A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dim_col A = n \\<Longrightarrow> A * 1\\<^sub>m n = A", "by (rule right_mult_one_mat, unfold carrier_mat_def, simp)"], ["", "lemma one_mult_mat_vec[simp]:\n  \"(v :: 'a :: semiring_1 vec) \\<in> carrier_vec n \\<Longrightarrow> 1\\<^sub>m n *\\<^sub>v v = v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. v \\<in> carrier_vec n \\<Longrightarrow> 1\\<^sub>m n *\\<^sub>v v = v", "by (intro eq_vecI, auto)"], ["", "lemma minus_add_uminus_mat: fixes A :: \"'a :: group_add mat\"\n  shows \"A \\<in> carrier_mat nr nc \\<Longrightarrow> B \\<in> carrier_mat nr nc \\<Longrightarrow>\n  A - B = A + (- B)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>A \\<in> carrier_mat nr nc; B \\<in> carrier_mat nr nc\\<rbrakk>\n    \\<Longrightarrow> A - B = A + - B", "by (intro eq_matI, auto)"], ["", "lemma add_mult_distrib_mat[algebra_simps]: assumes m: \"A \\<in> carrier_mat nr n\"\n  \"B \\<in> carrier_mat nr n\" \"C \\<in> carrier_mat n nc\"\n  shows \"(A + B) * C = A * C + B * C\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (A + B) * C = A * C + B * C", "using m"], ["proof (prove)\nusing this:\n  A \\<in> carrier_mat nr n\n  B \\<in> carrier_mat nr n\n  C \\<in> carrier_mat n nc\n\ngoal (1 subgoal):\n 1. (A + B) * C = A * C + B * C", "by (intro eq_matI, auto simp: add_scalar_prod_distrib[of _ n])"], ["", "lemma mult_add_distrib_mat[algebra_simps]: assumes m: \"A \\<in> carrier_mat nr n\"\n  \"B \\<in> carrier_mat n nc\" \"C \\<in> carrier_mat n nc\"\n  shows \"A * (B + C) = A * B + A * C\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A * (B + C) = A * B + A * C", "using m"], ["proof (prove)\nusing this:\n  A \\<in> carrier_mat nr n\n  B \\<in> carrier_mat n nc\n  C \\<in> carrier_mat n nc\n\ngoal (1 subgoal):\n 1. A * (B + C) = A * B + A * C", "by (intro eq_matI, auto simp: scalar_prod_add_distrib[of _ n])"], ["", "lemma add_mult_distrib_mat_vec[algebra_simps]: assumes m: \"A \\<in> carrier_mat nr nc\"\n  \"B \\<in> carrier_mat nr nc\" \"v \\<in> carrier_vec nc\"\n  shows \"(A + B) *\\<^sub>v v = A *\\<^sub>v v + B *\\<^sub>v v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (A + B) *\\<^sub>v v = A *\\<^sub>v v + B *\\<^sub>v v", "using m"], ["proof (prove)\nusing this:\n  A \\<in> carrier_mat nr nc\n  B \\<in> carrier_mat nr nc\n  v \\<in> carrier_vec nc\n\ngoal (1 subgoal):\n 1. (A + B) *\\<^sub>v v = A *\\<^sub>v v + B *\\<^sub>v v", "by (intro eq_vecI, auto intro!: add_scalar_prod_distrib)"], ["", "lemma mult_add_distrib_mat_vec[algebra_simps]: assumes m: \"A \\<in> carrier_mat nr nc\"\n  \"v\\<^sub>1 \\<in> carrier_vec nc\" \"v\\<^sub>2 \\<in> carrier_vec nc\"\n  shows \"A *\\<^sub>v (v\\<^sub>1 + v\\<^sub>2) = A *\\<^sub>v v\\<^sub>1 + A *\\<^sub>v v\\<^sub>2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A *\\<^sub>v (v\\<^sub>1 + v\\<^sub>2) =\n    A *\\<^sub>v v\\<^sub>1 + A *\\<^sub>v v\\<^sub>2", "using m"], ["proof (prove)\nusing this:\n  A \\<in> carrier_mat nr nc\n  v\\<^sub>1 \\<in> carrier_vec nc\n  v\\<^sub>2 \\<in> carrier_vec nc\n\ngoal (1 subgoal):\n 1. A *\\<^sub>v (v\\<^sub>1 + v\\<^sub>2) =\n    A *\\<^sub>v v\\<^sub>1 + A *\\<^sub>v v\\<^sub>2", "by (intro eq_vecI, auto simp: scalar_prod_add_distrib[of _ nc])"], ["", "lemma mult_mat_vec:\n  assumes m: \"(A::'a::field mat) \\<in> carrier_mat nr nc\" and v: \"v \\<in> carrier_vec nc\"\n  shows \"A *\\<^sub>v (k \\<cdot>\\<^sub>v v) = k \\<cdot>\\<^sub>v (A *\\<^sub>v v)\" (is \"?l = ?r\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. A *\\<^sub>v (k \\<cdot>\\<^sub>v v) = k \\<cdot>\\<^sub>v (A *\\<^sub>v v)", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>i.\n       i < dim_vec (k \\<cdot>\\<^sub>v (A *\\<^sub>v v)) \\<Longrightarrow>\n       (A *\\<^sub>v (k \\<cdot>\\<^sub>v v)) $ i =\n       (k \\<cdot>\\<^sub>v (A *\\<^sub>v v)) $ i\n 2. dim_vec (A *\\<^sub>v (k \\<cdot>\\<^sub>v v)) =\n    dim_vec (k \\<cdot>\\<^sub>v (A *\\<^sub>v v))", "have nr: \"dim_vec ?l = nr\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dim_vec (A *\\<^sub>v (k \\<cdot>\\<^sub>v v)) = nr", "using m v"], ["proof (prove)\nusing this:\n  A \\<in> carrier_mat nr nc\n  v \\<in> carrier_vec nc\n\ngoal (1 subgoal):\n 1. dim_vec (A *\\<^sub>v (k \\<cdot>\\<^sub>v v)) = nr", "by auto"], ["proof (state)\nthis:\n  dim_vec (A *\\<^sub>v (k \\<cdot>\\<^sub>v v)) = nr\n\ngoal (2 subgoals):\n 1. \\<And>i.\n       i < dim_vec (k \\<cdot>\\<^sub>v (A *\\<^sub>v v)) \\<Longrightarrow>\n       (A *\\<^sub>v (k \\<cdot>\\<^sub>v v)) $ i =\n       (k \\<cdot>\\<^sub>v (A *\\<^sub>v v)) $ i\n 2. dim_vec (A *\\<^sub>v (k \\<cdot>\\<^sub>v v)) =\n    dim_vec (k \\<cdot>\\<^sub>v (A *\\<^sub>v v))", "also"], ["proof (state)\nthis:\n  dim_vec (A *\\<^sub>v (k \\<cdot>\\<^sub>v v)) = nr\n\ngoal (2 subgoals):\n 1. \\<And>i.\n       i < dim_vec (k \\<cdot>\\<^sub>v (A *\\<^sub>v v)) \\<Longrightarrow>\n       (A *\\<^sub>v (k \\<cdot>\\<^sub>v v)) $ i =\n       (k \\<cdot>\\<^sub>v (A *\\<^sub>v v)) $ i\n 2. dim_vec (A *\\<^sub>v (k \\<cdot>\\<^sub>v v)) =\n    dim_vec (k \\<cdot>\\<^sub>v (A *\\<^sub>v v))", "have \"... = dim_vec ?r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. nr = dim_vec (k \\<cdot>\\<^sub>v (A *\\<^sub>v v))", "using m v"], ["proof (prove)\nusing this:\n  A \\<in> carrier_mat nr nc\n  v \\<in> carrier_vec nc\n\ngoal (1 subgoal):\n 1. nr = dim_vec (k \\<cdot>\\<^sub>v (A *\\<^sub>v v))", "by auto"], ["proof (state)\nthis:\n  nr = dim_vec (k \\<cdot>\\<^sub>v (A *\\<^sub>v v))\n\ngoal (2 subgoals):\n 1. \\<And>i.\n       i < dim_vec (k \\<cdot>\\<^sub>v (A *\\<^sub>v v)) \\<Longrightarrow>\n       (A *\\<^sub>v (k \\<cdot>\\<^sub>v v)) $ i =\n       (k \\<cdot>\\<^sub>v (A *\\<^sub>v v)) $ i\n 2. dim_vec (A *\\<^sub>v (k \\<cdot>\\<^sub>v v)) =\n    dim_vec (k \\<cdot>\\<^sub>v (A *\\<^sub>v v))", "finally"], ["proof (chain)\npicking this:\n  dim_vec (A *\\<^sub>v (k \\<cdot>\\<^sub>v v)) =\n  dim_vec (k \\<cdot>\\<^sub>v (A *\\<^sub>v v))", "show \"dim_vec ?l = dim_vec ?r\""], ["proof (prove)\nusing this:\n  dim_vec (A *\\<^sub>v (k \\<cdot>\\<^sub>v v)) =\n  dim_vec (k \\<cdot>\\<^sub>v (A *\\<^sub>v v))\n\ngoal (1 subgoal):\n 1. dim_vec (A *\\<^sub>v (k \\<cdot>\\<^sub>v v)) =\n    dim_vec (k \\<cdot>\\<^sub>v (A *\\<^sub>v v))", "."], ["proof (state)\nthis:\n  dim_vec (A *\\<^sub>v (k \\<cdot>\\<^sub>v v)) =\n  dim_vec (k \\<cdot>\\<^sub>v (A *\\<^sub>v v))\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       i < dim_vec (k \\<cdot>\\<^sub>v (A *\\<^sub>v v)) \\<Longrightarrow>\n       (A *\\<^sub>v (k \\<cdot>\\<^sub>v v)) $ i =\n       (k \\<cdot>\\<^sub>v (A *\\<^sub>v v)) $ i", "show \"\\<And>i. i < dim_vec ?r \\<Longrightarrow> ?l $ i = ?r $ i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i.\n       i < dim_vec (k \\<cdot>\\<^sub>v (A *\\<^sub>v v)) \\<Longrightarrow>\n       (A *\\<^sub>v (k \\<cdot>\\<^sub>v v)) $ i =\n       (k \\<cdot>\\<^sub>v (A *\\<^sub>v v)) $ i", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i.\n       i < dim_vec (k \\<cdot>\\<^sub>v (A *\\<^sub>v v)) \\<Longrightarrow>\n       (A *\\<^sub>v (k \\<cdot>\\<^sub>v v)) $ i =\n       (k \\<cdot>\\<^sub>v (A *\\<^sub>v v)) $ i", "fix i"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i.\n       i < dim_vec (k \\<cdot>\\<^sub>v (A *\\<^sub>v v)) \\<Longrightarrow>\n       (A *\\<^sub>v (k \\<cdot>\\<^sub>v v)) $ i =\n       (k \\<cdot>\\<^sub>v (A *\\<^sub>v v)) $ i", "assume \"i < dim_vec ?r\""], ["proof (state)\nthis:\n  i < dim_vec (k \\<cdot>\\<^sub>v (A *\\<^sub>v v))\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       i < dim_vec (k \\<cdot>\\<^sub>v (A *\\<^sub>v v)) \\<Longrightarrow>\n       (A *\\<^sub>v (k \\<cdot>\\<^sub>v v)) $ i =\n       (k \\<cdot>\\<^sub>v (A *\\<^sub>v v)) $ i", "hence i: \"i < dim_row A\""], ["proof (prove)\nusing this:\n  i < dim_vec (k \\<cdot>\\<^sub>v (A *\\<^sub>v v))\n\ngoal (1 subgoal):\n 1. i < dim_row A", "using nr m"], ["proof (prove)\nusing this:\n  i < dim_vec (k \\<cdot>\\<^sub>v (A *\\<^sub>v v))\n  dim_vec (A *\\<^sub>v (k \\<cdot>\\<^sub>v v)) = nr\n  A \\<in> carrier_mat nr nc\n\ngoal (1 subgoal):\n 1. i < dim_row A", "by auto"], ["proof (state)\nthis:\n  i < dim_row A\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       i < dim_vec (k \\<cdot>\\<^sub>v (A *\\<^sub>v v)) \\<Longrightarrow>\n       (A *\\<^sub>v (k \\<cdot>\\<^sub>v v)) $ i =\n       (k \\<cdot>\\<^sub>v (A *\\<^sub>v v)) $ i", "hence i2: \"i < dim_vec (A *\\<^sub>v v)\""], ["proof (prove)\nusing this:\n  i < dim_row A\n\ngoal (1 subgoal):\n 1. i < dim_vec (A *\\<^sub>v v)", "using m"], ["proof (prove)\nusing this:\n  i < dim_row A\n  A \\<in> carrier_mat nr nc\n\ngoal (1 subgoal):\n 1. i < dim_vec (A *\\<^sub>v v)", "by auto"], ["proof (state)\nthis:\n  i < dim_vec (A *\\<^sub>v v)\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       i < dim_vec (k \\<cdot>\\<^sub>v (A *\\<^sub>v v)) \\<Longrightarrow>\n       (A *\\<^sub>v (k \\<cdot>\\<^sub>v v)) $ i =\n       (k \\<cdot>\\<^sub>v (A *\\<^sub>v v)) $ i", "show \"?l $ i = ?r $ i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (A *\\<^sub>v (k \\<cdot>\\<^sub>v v)) $ i =\n    (k \\<cdot>\\<^sub>v (A *\\<^sub>v v)) $ i", "apply (subst (1) mult_mat_vec_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. vec (dim_row A) (\\<lambda>i. row A i \\<bullet> (k \\<cdot>\\<^sub>v v)) $\n    i =\n    (k \\<cdot>\\<^sub>v (A *\\<^sub>v v)) $ i", "apply (subst (2) smult_vec_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. vec (dim_row A) (\\<lambda>i. row A i \\<bullet> (k \\<cdot>\\<^sub>v v)) $\n    i =\n    vec (dim_vec (A *\\<^sub>v v)) (\\<lambda>i. k * (A *\\<^sub>v v) $ i) $ i", "unfolding index_vec[OF i] index_vec[OF i2]"], ["proof (prove)\ngoal (1 subgoal):\n 1. row A i \\<bullet> (k \\<cdot>\\<^sub>v v) = k * (A *\\<^sub>v v) $ i", "unfolding mult_mat_vec_def smult_vec_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. row A i \\<bullet> vec (dim_vec v) (\\<lambda>i. k * v $ i) =\n    k * vec (dim_row A) (\\<lambda>i. row A i \\<bullet> v) $ i", "unfolding scalar_prod_def index_vec[OF i]"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>ia = 0..<dim_vec (vec (dim_vec v) (\\<lambda>i. k * v $ i)).\n        row A i $ ia * vec (dim_vec v) (\\<lambda>i. k * v $ i) $ ia) =\n    k * (\\<Sum>ia = 0..<dim_vec v. row A i $ ia * v $ ia)", "by (simp add: mult.left_commute sum_distrib_left)"], ["proof (state)\nthis:\n  (A *\\<^sub>v (k \\<cdot>\\<^sub>v v)) $ i =\n  (k \\<cdot>\\<^sub>v (A *\\<^sub>v v)) $ i\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ?i < dim_vec (k \\<cdot>\\<^sub>v (A *\\<^sub>v v)) \\<Longrightarrow>\n  (A *\\<^sub>v (k \\<cdot>\\<^sub>v v)) $ ?i =\n  (k \\<cdot>\\<^sub>v (A *\\<^sub>v v)) $ ?i\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma assoc_scalar_prod: assumes *: \"v\\<^sub>1 \\<in> carrier_vec nr\" \"A \\<in> carrier_mat nr nc\" \"v\\<^sub>2 \\<in> carrier_vec nc\"\n  shows \"vec nc (\\<lambda>j. v\\<^sub>1 \\<bullet> col A j) \\<bullet> v\\<^sub>2 = v\\<^sub>1 \\<bullet> vec nr (\\<lambda>i. row A i \\<bullet> v\\<^sub>2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. vec nc (\\<lambda>j. v\\<^sub>1 \\<bullet> col A j) \\<bullet> v\\<^sub>2 =\n    v\\<^sub>1 \\<bullet> vec nr (\\<lambda>i. row A i \\<bullet> v\\<^sub>2)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. vec nc (\\<lambda>j. v\\<^sub>1 \\<bullet> col A j) \\<bullet> v\\<^sub>2 =\n    v\\<^sub>1 \\<bullet> vec nr (\\<lambda>i. row A i \\<bullet> v\\<^sub>2)", "have \"vec nc (\\<lambda>j. v\\<^sub>1 \\<bullet> col A j) \\<bullet> v\\<^sub>2 = (\\<Sum>i\\<in>{0..<nc}. vec nc (\\<lambda>j. \\<Sum>k\\<in>{0..<nr}. v\\<^sub>1 $ k * col A j $ k) $ i * v\\<^sub>2 $ i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. vec nc (\\<lambda>j. v\\<^sub>1 \\<bullet> col A j) \\<bullet> v\\<^sub>2 =\n    (\\<Sum>i = 0..<nc.\n        vec nc (\\<lambda>j. \\<Sum>k = 0..<nr. v\\<^sub>1 $ k * col A j $ k) $\n        i *\n        v\\<^sub>2 $ i)", "unfolding scalar_prod_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>i = 0..<dim_vec v\\<^sub>2.\n        vec nc\n         (\\<lambda>j.\n             \\<Sum>i = 0..<dim_vec (col A j). v\\<^sub>1 $ i * col A j $ i) $\n        i *\n        v\\<^sub>2 $ i) =\n    (\\<Sum>i = 0..<nc.\n        vec nc (\\<lambda>j. \\<Sum>k = 0..<nr. v\\<^sub>1 $ k * col A j $ k) $\n        i *\n        v\\<^sub>2 $ i)", "using *"], ["proof (prove)\nusing this:\n  v\\<^sub>1 \\<in> carrier_vec nr\n  A \\<in> carrier_mat nr nc\n  v\\<^sub>2 \\<in> carrier_vec nc\n\ngoal (1 subgoal):\n 1. (\\<Sum>i = 0..<dim_vec v\\<^sub>2.\n        vec nc\n         (\\<lambda>j.\n             \\<Sum>i = 0..<dim_vec (col A j). v\\<^sub>1 $ i * col A j $ i) $\n        i *\n        v\\<^sub>2 $ i) =\n    (\\<Sum>i = 0..<nc.\n        vec nc (\\<lambda>j. \\<Sum>k = 0..<nr. v\\<^sub>1 $ k * col A j $ k) $\n        i *\n        v\\<^sub>2 $ i)", "by auto"], ["proof (state)\nthis:\n  vec nc (\\<lambda>j. v\\<^sub>1 \\<bullet> col A j) \\<bullet> v\\<^sub>2 =\n  (\\<Sum>i = 0..<nc.\n      vec nc (\\<lambda>j. \\<Sum>k = 0..<nr. v\\<^sub>1 $ k * col A j $ k) $\n      i *\n      v\\<^sub>2 $ i)\n\ngoal (1 subgoal):\n 1. vec nc (\\<lambda>j. v\\<^sub>1 \\<bullet> col A j) \\<bullet> v\\<^sub>2 =\n    v\\<^sub>1 \\<bullet> vec nr (\\<lambda>i. row A i \\<bullet> v\\<^sub>2)", "also"], ["proof (state)\nthis:\n  vec nc (\\<lambda>j. v\\<^sub>1 \\<bullet> col A j) \\<bullet> v\\<^sub>2 =\n  (\\<Sum>i = 0..<nc.\n      vec nc (\\<lambda>j. \\<Sum>k = 0..<nr. v\\<^sub>1 $ k * col A j $ k) $\n      i *\n      v\\<^sub>2 $ i)\n\ngoal (1 subgoal):\n 1. vec nc (\\<lambda>j. v\\<^sub>1 \\<bullet> col A j) \\<bullet> v\\<^sub>2 =\n    v\\<^sub>1 \\<bullet> vec nr (\\<lambda>i. row A i \\<bullet> v\\<^sub>2)", "have \"\\<dots> = (\\<Sum>i\\<in>{0..<nc}. (\\<Sum>k\\<in>{0..<nr}. v\\<^sub>1 $ k * col A i $ k) * v\\<^sub>2 $ i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>i = 0..<nc.\n        vec nc (\\<lambda>j. \\<Sum>k = 0..<nr. v\\<^sub>1 $ k * col A j $ k) $\n        i *\n        v\\<^sub>2 $ i) =\n    (\\<Sum>i = 0..<nc.\n        (\\<Sum>k = 0..<nr. v\\<^sub>1 $ k * col A i $ k) * v\\<^sub>2 $ i)", "by (rule sum.cong, auto)"], ["proof (state)\nthis:\n  (\\<Sum>i = 0..<nc.\n      vec nc (\\<lambda>j. \\<Sum>k = 0..<nr. v\\<^sub>1 $ k * col A j $ k) $\n      i *\n      v\\<^sub>2 $ i) =\n  (\\<Sum>i = 0..<nc.\n      (\\<Sum>k = 0..<nr. v\\<^sub>1 $ k * col A i $ k) * v\\<^sub>2 $ i)\n\ngoal (1 subgoal):\n 1. vec nc (\\<lambda>j. v\\<^sub>1 \\<bullet> col A j) \\<bullet> v\\<^sub>2 =\n    v\\<^sub>1 \\<bullet> vec nr (\\<lambda>i. row A i \\<bullet> v\\<^sub>2)", "also"], ["proof (state)\nthis:\n  (\\<Sum>i = 0..<nc.\n      vec nc (\\<lambda>j. \\<Sum>k = 0..<nr. v\\<^sub>1 $ k * col A j $ k) $\n      i *\n      v\\<^sub>2 $ i) =\n  (\\<Sum>i = 0..<nc.\n      (\\<Sum>k = 0..<nr. v\\<^sub>1 $ k * col A i $ k) * v\\<^sub>2 $ i)\n\ngoal (1 subgoal):\n 1. vec nc (\\<lambda>j. v\\<^sub>1 \\<bullet> col A j) \\<bullet> v\\<^sub>2 =\n    v\\<^sub>1 \\<bullet> vec nr (\\<lambda>i. row A i \\<bullet> v\\<^sub>2)", "have \"\\<dots> = (\\<Sum>i\\<in>{0..<nc}. (\\<Sum>k\\<in>{0..<nr}. v\\<^sub>1 $ k * col A i $ k * v\\<^sub>2 $ i))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>i = 0..<nc.\n        (\\<Sum>k = 0..<nr. v\\<^sub>1 $ k * col A i $ k) * v\\<^sub>2 $ i) =\n    (\\<Sum>i = 0..<nc.\n        \\<Sum>k = 0..<nr. v\\<^sub>1 $ k * col A i $ k * v\\<^sub>2 $ i)", "unfolding sum_distrib_right"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>i = 0..<nc.\n        \\<Sum>n = 0..<nr. v\\<^sub>1 $ n * col A i $ n * v\\<^sub>2 $ i) =\n    (\\<Sum>i = 0..<nc.\n        \\<Sum>k = 0..<nr. v\\<^sub>1 $ k * col A i $ k * v\\<^sub>2 $ i)", ".."], ["proof (state)\nthis:\n  (\\<Sum>i = 0..<nc.\n      (\\<Sum>k = 0..<nr. v\\<^sub>1 $ k * col A i $ k) * v\\<^sub>2 $ i) =\n  (\\<Sum>i = 0..<nc.\n      \\<Sum>k = 0..<nr. v\\<^sub>1 $ k * col A i $ k * v\\<^sub>2 $ i)\n\ngoal (1 subgoal):\n 1. vec nc (\\<lambda>j. v\\<^sub>1 \\<bullet> col A j) \\<bullet> v\\<^sub>2 =\n    v\\<^sub>1 \\<bullet> vec nr (\\<lambda>i. row A i \\<bullet> v\\<^sub>2)", "also"], ["proof (state)\nthis:\n  (\\<Sum>i = 0..<nc.\n      (\\<Sum>k = 0..<nr. v\\<^sub>1 $ k * col A i $ k) * v\\<^sub>2 $ i) =\n  (\\<Sum>i = 0..<nc.\n      \\<Sum>k = 0..<nr. v\\<^sub>1 $ k * col A i $ k * v\\<^sub>2 $ i)\n\ngoal (1 subgoal):\n 1. vec nc (\\<lambda>j. v\\<^sub>1 \\<bullet> col A j) \\<bullet> v\\<^sub>2 =\n    v\\<^sub>1 \\<bullet> vec nr (\\<lambda>i. row A i \\<bullet> v\\<^sub>2)", "have \"\\<dots> = (\\<Sum>k\\<in>{0..<nr}. (\\<Sum>i\\<in>{0..<nc}. v\\<^sub>1 $ k * col A i $ k * v\\<^sub>2 $ i))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>i = 0..<nc.\n        \\<Sum>k = 0..<nr. v\\<^sub>1 $ k * col A i $ k * v\\<^sub>2 $ i) =\n    (\\<Sum>k = 0..<nr.\n        \\<Sum>i = 0..<nc. v\\<^sub>1 $ k * col A i $ k * v\\<^sub>2 $ i)", "by (rule sum.swap)"], ["proof (state)\nthis:\n  (\\<Sum>i = 0..<nc.\n      \\<Sum>k = 0..<nr. v\\<^sub>1 $ k * col A i $ k * v\\<^sub>2 $ i) =\n  (\\<Sum>k = 0..<nr.\n      \\<Sum>i = 0..<nc. v\\<^sub>1 $ k * col A i $ k * v\\<^sub>2 $ i)\n\ngoal (1 subgoal):\n 1. vec nc (\\<lambda>j. v\\<^sub>1 \\<bullet> col A j) \\<bullet> v\\<^sub>2 =\n    v\\<^sub>1 \\<bullet> vec nr (\\<lambda>i. row A i \\<bullet> v\\<^sub>2)", "also"], ["proof (state)\nthis:\n  (\\<Sum>i = 0..<nc.\n      \\<Sum>k = 0..<nr. v\\<^sub>1 $ k * col A i $ k * v\\<^sub>2 $ i) =\n  (\\<Sum>k = 0..<nr.\n      \\<Sum>i = 0..<nc. v\\<^sub>1 $ k * col A i $ k * v\\<^sub>2 $ i)\n\ngoal (1 subgoal):\n 1. vec nc (\\<lambda>j. v\\<^sub>1 \\<bullet> col A j) \\<bullet> v\\<^sub>2 =\n    v\\<^sub>1 \\<bullet> vec nr (\\<lambda>i. row A i \\<bullet> v\\<^sub>2)", "have \"\\<dots> = (\\<Sum>k\\<in>{0..<nr}. (\\<Sum>i\\<in>{0..<nc}. v\\<^sub>1 $ k * (col A i $ k * v\\<^sub>2 $ i)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>k = 0..<nr.\n        \\<Sum>i = 0..<nc. v\\<^sub>1 $ k * col A i $ k * v\\<^sub>2 $ i) =\n    (\\<Sum>k = 0..<nr.\n        \\<Sum>i = 0..<nc. v\\<^sub>1 $ k * (col A i $ k * v\\<^sub>2 $ i))", "by (simp add: ac_simps)"], ["proof (state)\nthis:\n  (\\<Sum>k = 0..<nr.\n      \\<Sum>i = 0..<nc. v\\<^sub>1 $ k * col A i $ k * v\\<^sub>2 $ i) =\n  (\\<Sum>k = 0..<nr.\n      \\<Sum>i = 0..<nc. v\\<^sub>1 $ k * (col A i $ k * v\\<^sub>2 $ i))\n\ngoal (1 subgoal):\n 1. vec nc (\\<lambda>j. v\\<^sub>1 \\<bullet> col A j) \\<bullet> v\\<^sub>2 =\n    v\\<^sub>1 \\<bullet> vec nr (\\<lambda>i. row A i \\<bullet> v\\<^sub>2)", "also"], ["proof (state)\nthis:\n  (\\<Sum>k = 0..<nr.\n      \\<Sum>i = 0..<nc. v\\<^sub>1 $ k * col A i $ k * v\\<^sub>2 $ i) =\n  (\\<Sum>k = 0..<nr.\n      \\<Sum>i = 0..<nc. v\\<^sub>1 $ k * (col A i $ k * v\\<^sub>2 $ i))\n\ngoal (1 subgoal):\n 1. vec nc (\\<lambda>j. v\\<^sub>1 \\<bullet> col A j) \\<bullet> v\\<^sub>2 =\n    v\\<^sub>1 \\<bullet> vec nr (\\<lambda>i. row A i \\<bullet> v\\<^sub>2)", "have \"\\<dots> = (\\<Sum>k\\<in>{0..<nr}. v\\<^sub>1 $ k * (\\<Sum>i\\<in>{0..<nc}. col A i $ k * v\\<^sub>2 $ i))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>k = 0..<nr.\n        \\<Sum>i = 0..<nc. v\\<^sub>1 $ k * (col A i $ k * v\\<^sub>2 $ i)) =\n    (\\<Sum>k = 0..<nr.\n        v\\<^sub>1 $ k * (\\<Sum>i = 0..<nc. col A i $ k * v\\<^sub>2 $ i))", "unfolding sum_distrib_left"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>k = 0..<nr.\n        \\<Sum>i = 0..<nc. v\\<^sub>1 $ k * (col A i $ k * v\\<^sub>2 $ i)) =\n    (\\<Sum>k = 0..<nr.\n        \\<Sum>n = 0..<nc. v\\<^sub>1 $ k * (col A n $ k * v\\<^sub>2 $ n))", ".."], ["proof (state)\nthis:\n  (\\<Sum>k = 0..<nr.\n      \\<Sum>i = 0..<nc. v\\<^sub>1 $ k * (col A i $ k * v\\<^sub>2 $ i)) =\n  (\\<Sum>k = 0..<nr.\n      v\\<^sub>1 $ k * (\\<Sum>i = 0..<nc. col A i $ k * v\\<^sub>2 $ i))\n\ngoal (1 subgoal):\n 1. vec nc (\\<lambda>j. v\\<^sub>1 \\<bullet> col A j) \\<bullet> v\\<^sub>2 =\n    v\\<^sub>1 \\<bullet> vec nr (\\<lambda>i. row A i \\<bullet> v\\<^sub>2)", "also"], ["proof (state)\nthis:\n  (\\<Sum>k = 0..<nr.\n      \\<Sum>i = 0..<nc. v\\<^sub>1 $ k * (col A i $ k * v\\<^sub>2 $ i)) =\n  (\\<Sum>k = 0..<nr.\n      v\\<^sub>1 $ k * (\\<Sum>i = 0..<nc. col A i $ k * v\\<^sub>2 $ i))\n\ngoal (1 subgoal):\n 1. vec nc (\\<lambda>j. v\\<^sub>1 \\<bullet> col A j) \\<bullet> v\\<^sub>2 =\n    v\\<^sub>1 \\<bullet> vec nr (\\<lambda>i. row A i \\<bullet> v\\<^sub>2)", "have \"\\<dots> = (\\<Sum>k\\<in>{0..<nr}. v\\<^sub>1 $ k * vec nr (\\<lambda>k. \\<Sum>i\\<in>{0..<nc}. row A k $ i * v\\<^sub>2 $ i) $ k)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>k = 0..<nr.\n        v\\<^sub>1 $ k * (\\<Sum>i = 0..<nc. col A i $ k * v\\<^sub>2 $ i)) =\n    (\\<Sum>k = 0..<nr.\n        v\\<^sub>1 $ k *\n        vec nr (\\<lambda>k. \\<Sum>i = 0..<nc. row A k $ i * v\\<^sub>2 $ i) $\n        k)", "using *"], ["proof (prove)\nusing this:\n  v\\<^sub>1 \\<in> carrier_vec nr\n  A \\<in> carrier_mat nr nc\n  v\\<^sub>2 \\<in> carrier_vec nc\n\ngoal (1 subgoal):\n 1. (\\<Sum>k = 0..<nr.\n        v\\<^sub>1 $ k * (\\<Sum>i = 0..<nc. col A i $ k * v\\<^sub>2 $ i)) =\n    (\\<Sum>k = 0..<nr.\n        v\\<^sub>1 $ k *\n        vec nr (\\<lambda>k. \\<Sum>i = 0..<nc. row A k $ i * v\\<^sub>2 $ i) $\n        k)", "by auto"], ["proof (state)\nthis:\n  (\\<Sum>k = 0..<nr.\n      v\\<^sub>1 $ k * (\\<Sum>i = 0..<nc. col A i $ k * v\\<^sub>2 $ i)) =\n  (\\<Sum>k = 0..<nr.\n      v\\<^sub>1 $ k *\n      vec nr (\\<lambda>k. \\<Sum>i = 0..<nc. row A k $ i * v\\<^sub>2 $ i) $\n      k)\n\ngoal (1 subgoal):\n 1. vec nc (\\<lambda>j. v\\<^sub>1 \\<bullet> col A j) \\<bullet> v\\<^sub>2 =\n    v\\<^sub>1 \\<bullet> vec nr (\\<lambda>i. row A i \\<bullet> v\\<^sub>2)", "also"], ["proof (state)\nthis:\n  (\\<Sum>k = 0..<nr.\n      v\\<^sub>1 $ k * (\\<Sum>i = 0..<nc. col A i $ k * v\\<^sub>2 $ i)) =\n  (\\<Sum>k = 0..<nr.\n      v\\<^sub>1 $ k *\n      vec nr (\\<lambda>k. \\<Sum>i = 0..<nc. row A k $ i * v\\<^sub>2 $ i) $\n      k)\n\ngoal (1 subgoal):\n 1. vec nc (\\<lambda>j. v\\<^sub>1 \\<bullet> col A j) \\<bullet> v\\<^sub>2 =\n    v\\<^sub>1 \\<bullet> vec nr (\\<lambda>i. row A i \\<bullet> v\\<^sub>2)", "have \"\\<dots> = v\\<^sub>1 \\<bullet> vec nr (\\<lambda>i. row A i \\<bullet> v\\<^sub>2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>k = 0..<nr.\n        v\\<^sub>1 $ k *\n        vec nr (\\<lambda>k. \\<Sum>i = 0..<nc. row A k $ i * v\\<^sub>2 $ i) $\n        k) =\n    v\\<^sub>1 \\<bullet> vec nr (\\<lambda>i. row A i \\<bullet> v\\<^sub>2)", "unfolding scalar_prod_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>k = 0..<nr.\n        v\\<^sub>1 $ k *\n        vec nr (\\<lambda>k. \\<Sum>i = 0..<nc. row A k $ i * v\\<^sub>2 $ i) $\n        k) =\n    (\\<Sum>i = 0..<dim_vec\n                    (vec nr\n                      (\\<lambda>i.\n                          \\<Sum>ia = 0..<dim_vec v\\<^sub>2.\n                             row A i $ ia * v\\<^sub>2 $ ia)).\n        v\\<^sub>1 $ i *\n        vec nr\n         (\\<lambda>i.\n             \\<Sum>ia = 0..<dim_vec v\\<^sub>2.\n                row A i $ ia * v\\<^sub>2 $ ia) $\n        i)", "using *"], ["proof (prove)\nusing this:\n  v\\<^sub>1 \\<in> carrier_vec nr\n  A \\<in> carrier_mat nr nc\n  v\\<^sub>2 \\<in> carrier_vec nc\n\ngoal (1 subgoal):\n 1. (\\<Sum>k = 0..<nr.\n        v\\<^sub>1 $ k *\n        vec nr (\\<lambda>k. \\<Sum>i = 0..<nc. row A k $ i * v\\<^sub>2 $ i) $\n        k) =\n    (\\<Sum>i = 0..<dim_vec\n                    (vec nr\n                      (\\<lambda>i.\n                          \\<Sum>ia = 0..<dim_vec v\\<^sub>2.\n                             row A i $ ia * v\\<^sub>2 $ ia)).\n        v\\<^sub>1 $ i *\n        vec nr\n         (\\<lambda>i.\n             \\<Sum>ia = 0..<dim_vec v\\<^sub>2.\n                row A i $ ia * v\\<^sub>2 $ ia) $\n        i)", "by simp"], ["proof (state)\nthis:\n  (\\<Sum>k = 0..<nr.\n      v\\<^sub>1 $ k *\n      vec nr (\\<lambda>k. \\<Sum>i = 0..<nc. row A k $ i * v\\<^sub>2 $ i) $\n      k) =\n  v\\<^sub>1 \\<bullet> vec nr (\\<lambda>i. row A i \\<bullet> v\\<^sub>2)\n\ngoal (1 subgoal):\n 1. vec nc (\\<lambda>j. v\\<^sub>1 \\<bullet> col A j) \\<bullet> v\\<^sub>2 =\n    v\\<^sub>1 \\<bullet> vec nr (\\<lambda>i. row A i \\<bullet> v\\<^sub>2)", "finally"], ["proof (chain)\npicking this:\n  vec nc (\\<lambda>j. v\\<^sub>1 \\<bullet> col A j) \\<bullet> v\\<^sub>2 =\n  v\\<^sub>1 \\<bullet> vec nr (\\<lambda>i. row A i \\<bullet> v\\<^sub>2)", "show ?thesis"], ["proof (prove)\nusing this:\n  vec nc (\\<lambda>j. v\\<^sub>1 \\<bullet> col A j) \\<bullet> v\\<^sub>2 =\n  v\\<^sub>1 \\<bullet> vec nr (\\<lambda>i. row A i \\<bullet> v\\<^sub>2)\n\ngoal (1 subgoal):\n 1. vec nc (\\<lambda>j. v\\<^sub>1 \\<bullet> col A j) \\<bullet> v\\<^sub>2 =\n    v\\<^sub>1 \\<bullet> vec nr (\\<lambda>i. row A i \\<bullet> v\\<^sub>2)", "."], ["proof (state)\nthis:\n  vec nc (\\<lambda>j. v\\<^sub>1 \\<bullet> col A j) \\<bullet> v\\<^sub>2 =\n  v\\<^sub>1 \\<bullet> vec nr (\\<lambda>i. row A i \\<bullet> v\\<^sub>2)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma assoc_mult_mat[simp]:\n  \"A \\<in> carrier_mat n\\<^sub>1 n\\<^sub>2 \\<Longrightarrow> B \\<in> carrier_mat n\\<^sub>2 n\\<^sub>3 \\<Longrightarrow> C \\<in> carrier_mat n\\<^sub>3 n\\<^sub>4\n  \\<Longrightarrow> (A * B) * C = A * (B * C)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>A \\<in> carrier_mat n\\<^sub>1 n\\<^sub>2;\n     B \\<in> carrier_mat n\\<^sub>2 n\\<^sub>3;\n     C \\<in> carrier_mat n\\<^sub>3 n\\<^sub>4\\<rbrakk>\n    \\<Longrightarrow> A * B * C = A * (B * C)", "by (intro eq_matI, auto simp: assoc_scalar_prod)"], ["", "lemma assoc_mult_mat_vec[simp]:\n  \"A \\<in> carrier_mat n\\<^sub>1 n\\<^sub>2 \\<Longrightarrow> B \\<in> carrier_mat n\\<^sub>2 n\\<^sub>3 \\<Longrightarrow> v \\<in> carrier_vec n\\<^sub>3\n  \\<Longrightarrow> (A * B) *\\<^sub>v v = A *\\<^sub>v (B *\\<^sub>v v)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>A \\<in> carrier_mat n\\<^sub>1 n\\<^sub>2;\n     B \\<in> carrier_mat n\\<^sub>2 n\\<^sub>3;\n     v \\<in> carrier_vec n\\<^sub>3\\<rbrakk>\n    \\<Longrightarrow> A * B *\\<^sub>v v = A *\\<^sub>v (B *\\<^sub>v v)", "by (intro eq_vecI, auto simp add: mult_mat_vec_def assoc_scalar_prod)"], ["", "lemma comm_monoid_mat: \"comm_monoid (monoid_mat TYPE('a :: comm_monoid_add) nr nc)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Group.comm_monoid (monoid_mat TYPE('a) nr nc)", "by (unfold_locales, auto simp: monoid_mat_def ac_simps)"], ["", "lemma comm_group_mat: \"comm_group (monoid_mat TYPE('a :: ab_group_add) nr nc)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. comm_group (monoid_mat TYPE('a) nr nc)", "by (unfold_locales, insert add_inv_exists_mat, auto simp: monoid_mat_def ac_simps Units_def)"], ["", "lemma semiring_mat: \"semiring (ring_mat TYPE('a :: semiring_1) n b)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. semiring (ring_mat TYPE('a) n b)", "by (unfold_locales, auto simp: ring_mat_def algebra_simps)"], ["", "lemma ring_mat: \"ring (ring_mat TYPE('a :: comm_ring_1) n b)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ring (ring_mat TYPE('a) n b)", "by (unfold_locales, insert add_inv_exists_mat, auto simp: ring_mat_def algebra_simps Units_def)"], ["", "lemma abelian_group_mat: \"abelian_group (module_mat TYPE('a :: comm_ring_1) nr nc)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. abelian_group (module_mat TYPE('a) nr nc)", "by (unfold_locales, insert add_inv_exists_mat, auto simp: module_mat_def Units_def)"], ["", "lemma row_smult[simp]: assumes i: \"i < dim_row A\"\n  shows \"row (k \\<cdot>\\<^sub>m A) i = k \\<cdot>\\<^sub>v (row A i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. row (k \\<cdot>\\<^sub>m A) i = k \\<cdot>\\<^sub>v row A i", "by (rule eq_vecI, insert i, auto)"], ["", "lemma col_smult[simp]: assumes i: \"i < dim_col A\"\n  shows \"col (k \\<cdot>\\<^sub>m A) i = k \\<cdot>\\<^sub>v (col A i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. col (k \\<cdot>\\<^sub>m A) i = k \\<cdot>\\<^sub>v col A i", "by (rule eq_vecI, insert i, auto)"], ["", "lemma row_uminus[simp]: assumes i: \"i < dim_row A\"\n  shows \"row (- A) i = - (row A i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. row (- A) i = - row A i", "by (rule eq_vecI, insert i, auto)"], ["", "lemma scalar_prod_uminus_left[simp]: assumes dim: \"dim_vec v = dim_vec (w :: 'a :: ring vec)\"\n  shows \"- v \\<bullet> w = - (v \\<bullet> w)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. - v \\<bullet> w = - (v \\<bullet> w)", "unfolding scalar_prod_def dim[symmetric]"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>i = 0..<dim_vec v. (- v) $ i * w $ i) =\n    - (\\<Sum>i = 0..<dim_vec v. v $ i * w $ i)", "by (subst sum_negf[symmetric], rule sum.cong, auto)"], ["", "lemma col_uminus[simp]: assumes i: \"i < dim_col A\"\n  shows \"col (- A) i = - (col A i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. col (- A) i = - col A i", "by (rule eq_vecI, insert i, auto)"], ["", "lemma scalar_prod_uminus_right[simp]: assumes dim: \"dim_vec v = dim_vec (w :: 'a :: ring vec)\"\n  shows \"v \\<bullet> - w = - (v \\<bullet> w)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. v \\<bullet> - w = - (v \\<bullet> w)", "unfolding scalar_prod_def dim"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>i = 0..<dim_vec (- w). v $ i * (- w) $ i) =\n    - (\\<Sum>i = 0..<dim_vec w. v $ i * w $ i)", "by (subst sum_negf[symmetric], rule sum.cong, auto)"], ["", "context fixes A B :: \"'a :: ring mat\"\n  assumes dim: \"dim_col A = dim_row B\"\nbegin"], ["", "lemma uminus_mult_left_mat[simp]: \"(- A * B) = - (A * B)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. - A * B = - (A * B)", "by (intro eq_matI, insert dim, auto)"], ["", "lemma uminus_mult_right_mat[simp]: \"(A * - B) = - (A * B)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A * - B = - (A * B)", "by (intro eq_matI, insert dim, auto)"], ["", "end"], ["", "lemma minus_mult_distrib_mat[algebra_simps]: fixes A :: \"'a :: ring mat\"\n  assumes m: \"A \\<in> carrier_mat nr n\" \"B \\<in> carrier_mat nr n\" \"C \\<in> carrier_mat n nc\"\n  shows \"(A - B) * C = A * C - B * C\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (A - B) * C = A * C - B * C", "unfolding minus_add_uminus_mat[OF m(1,2)]\n    add_mult_distrib_mat[OF m(1) uminus_carrier_mat[OF m(2)] m(3)]"], ["proof (prove)\ngoal (1 subgoal):\n 1. A * C + - B * C = A * C - B * C", "by (subst uminus_mult_left_mat, insert m, auto)"], ["", "lemma minus_mult_distrib_mat_vec[algebra_simps]: assumes A: \"(A :: 'a :: ring mat) \\<in> carrier_mat nr nc\"\n  and B: \"B \\<in> carrier_mat nr nc\"\n  and v: \"v \\<in> carrier_vec nc\"\nshows \"(A - B) *\\<^sub>v v = A *\\<^sub>v v - B *\\<^sub>v v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (A - B) *\\<^sub>v v = A *\\<^sub>v v - B *\\<^sub>v v", "unfolding minus_add_uminus_mat[OF A B]"], ["proof (prove)\ngoal (1 subgoal):\n 1. (A + - B) *\\<^sub>v v = A *\\<^sub>v v - B *\\<^sub>v v", "by (subst add_mult_distrib_mat_vec[OF A _ v], insert A B v, auto)"], ["", "lemma mult_minus_distrib_mat_vec[algebra_simps]: assumes A: \"(A :: 'a :: ring mat) \\<in> carrier_mat nr nc\"\n  and v: \"v \\<in> carrier_vec nc\"\n  and w: \"w \\<in> carrier_vec nc\"\nshows \"A *\\<^sub>v (v - w) = A *\\<^sub>v v - A *\\<^sub>v w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A *\\<^sub>v (v - w) = A *\\<^sub>v v - A *\\<^sub>v w", "unfolding minus_add_uminus_vec[OF v w]"], ["proof (prove)\ngoal (1 subgoal):\n 1. A *\\<^sub>v (v + - w) = A *\\<^sub>v v - A *\\<^sub>v w", "by (subst mult_add_distrib_mat_vec[OF A], insert A v w, auto)"], ["", "lemma mult_minus_distrib_mat[algebra_simps]: fixes A :: \"'a :: ring mat\"\n  assumes m: \"A \\<in> carrier_mat nr n\" \"B \\<in> carrier_mat n nc\" \"C \\<in> carrier_mat n nc\"\n  shows \"A * (B - C) = A * B - A * C\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A * (B - C) = A * B - A * C", "unfolding minus_add_uminus_mat[OF m(2,3)]\n    mult_add_distrib_mat[OF m(1) m(2) uminus_carrier_mat[OF m(3)]]"], ["proof (prove)\ngoal (1 subgoal):\n 1. A * B + A * - C = A * B - A * C", "by (subst uminus_mult_right_mat, insert m, auto)"], ["", "lemma uminus_mult_mat_vec[simp]: assumes v: \"dim_vec v = dim_col (A :: 'a :: ring mat)\"\n  shows \"- A *\\<^sub>v v = - (A *\\<^sub>v v)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. - A *\\<^sub>v v = - (A *\\<^sub>v v)", "using v"], ["proof (prove)\nusing this:\n  dim_vec v = dim_col A\n\ngoal (1 subgoal):\n 1. - A *\\<^sub>v v = - (A *\\<^sub>v v)", "by (intro eq_vecI, auto)"], ["", "lemma uminus_zero_vec_eq: assumes v: \"(v :: 'a :: group_add vec) \\<in> carrier_vec n\"\n  shows \"(- v = 0\\<^sub>v n) = (v = 0\\<^sub>v n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (- v = 0\\<^sub>v n) = (v = 0\\<^sub>v n)", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. - v = 0\\<^sub>v n \\<Longrightarrow> v = 0\\<^sub>v n\n 2. v = 0\\<^sub>v n \\<Longrightarrow> - v = 0\\<^sub>v n", "assume z: \"- v = 0\\<^sub>v n\""], ["proof (state)\nthis:\n  - v = 0\\<^sub>v n\n\ngoal (2 subgoals):\n 1. - v = 0\\<^sub>v n \\<Longrightarrow> v = 0\\<^sub>v n\n 2. v = 0\\<^sub>v n \\<Longrightarrow> - v = 0\\<^sub>v n", "{"], ["proof (state)\nthis:\n  - v = 0\\<^sub>v n\n\ngoal (2 subgoals):\n 1. - v = 0\\<^sub>v n \\<Longrightarrow> v = 0\\<^sub>v n\n 2. v = 0\\<^sub>v n \\<Longrightarrow> - v = 0\\<^sub>v n", "fix i"], ["proof (state)\ngoal (2 subgoals):\n 1. - v = 0\\<^sub>v n \\<Longrightarrow> v = 0\\<^sub>v n\n 2. v = 0\\<^sub>v n \\<Longrightarrow> - v = 0\\<^sub>v n", "assume i: \"i < n\""], ["proof (state)\nthis:\n  i < n\n\ngoal (2 subgoals):\n 1. - v = 0\\<^sub>v n \\<Longrightarrow> v = 0\\<^sub>v n\n 2. v = 0\\<^sub>v n \\<Longrightarrow> - v = 0\\<^sub>v n", "have \"v $ i = - (- (v $ i))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. v $ i = - (- v $ i)", "by simp"], ["proof (state)\nthis:\n  v $ i = - (- v $ i)\n\ngoal (2 subgoals):\n 1. - v = 0\\<^sub>v n \\<Longrightarrow> v = 0\\<^sub>v n\n 2. v = 0\\<^sub>v n \\<Longrightarrow> - v = 0\\<^sub>v n", "also"], ["proof (state)\nthis:\n  v $ i = - (- v $ i)\n\ngoal (2 subgoals):\n 1. - v = 0\\<^sub>v n \\<Longrightarrow> v = 0\\<^sub>v n\n 2. v = 0\\<^sub>v n \\<Longrightarrow> - v = 0\\<^sub>v n", "have \"- (v $ i) = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. - v $ i = (0::'a)", "using arg_cong[OF z, of \"\\<lambda> v. v $ i\"] i v"], ["proof (prove)\nusing this:\n  (- v) $ i = 0\\<^sub>v n $ i\n  i < n\n  v \\<in> carrier_vec n\n\ngoal (1 subgoal):\n 1. - v $ i = (0::'a)", "by auto"], ["proof (state)\nthis:\n  - v $ i = (0::'a)\n\ngoal (2 subgoals):\n 1. - v = 0\\<^sub>v n \\<Longrightarrow> v = 0\\<^sub>v n\n 2. v = 0\\<^sub>v n \\<Longrightarrow> - v = 0\\<^sub>v n", "also"], ["proof (state)\nthis:\n  - v $ i = (0::'a)\n\ngoal (2 subgoals):\n 1. - v = 0\\<^sub>v n \\<Longrightarrow> v = 0\\<^sub>v n\n 2. v = 0\\<^sub>v n \\<Longrightarrow> - v = 0\\<^sub>v n", "have \"- 0 = (0 :: 'a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. - (0::'a) = (0::'a)", "by simp"], ["proof (state)\nthis:\n  - (0::'a) = (0::'a)\n\ngoal (2 subgoals):\n 1. - v = 0\\<^sub>v n \\<Longrightarrow> v = 0\\<^sub>v n\n 2. v = 0\\<^sub>v n \\<Longrightarrow> - v = 0\\<^sub>v n", "finally"], ["proof (chain)\npicking this:\n  v $ i = (0::'a)", "have \"v $ i = 0\""], ["proof (prove)\nusing this:\n  v $ i = (0::'a)\n\ngoal (1 subgoal):\n 1. v $ i = (0::'a)", "."], ["proof (state)\nthis:\n  v $ i = (0::'a)\n\ngoal (2 subgoals):\n 1. - v = 0\\<^sub>v n \\<Longrightarrow> v = 0\\<^sub>v n\n 2. v = 0\\<^sub>v n \\<Longrightarrow> - v = 0\\<^sub>v n", "}"], ["proof (state)\nthis:\n  ?i2 < n \\<Longrightarrow> v $ ?i2 = (0::'a)\n\ngoal (2 subgoals):\n 1. - v = 0\\<^sub>v n \\<Longrightarrow> v = 0\\<^sub>v n\n 2. v = 0\\<^sub>v n \\<Longrightarrow> - v = 0\\<^sub>v n", "thus \"v = 0\\<^sub>v n\""], ["proof (prove)\nusing this:\n  ?i2 < n \\<Longrightarrow> v $ ?i2 = (0::'a)\n\ngoal (1 subgoal):\n 1. v = 0\\<^sub>v n", "using v"], ["proof (prove)\nusing this:\n  ?i2 < n \\<Longrightarrow> v $ ?i2 = (0::'a)\n  v \\<in> carrier_vec n\n\ngoal (1 subgoal):\n 1. v = 0\\<^sub>v n", "by (intro eq_vecI, auto)"], ["proof (state)\nthis:\n  v = 0\\<^sub>v n\n\ngoal (1 subgoal):\n 1. v = 0\\<^sub>v n \\<Longrightarrow> - v = 0\\<^sub>v n", "qed auto"], ["", "lemma map_carrier_mat[simp]:\n  \"(map_mat f A \\<in> carrier_mat nr nc) = (A \\<in> carrier_mat nr nc)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (map_mat f A \\<in> carrier_mat nr nc) = (A \\<in> carrier_mat nr nc)", "unfolding carrier_mat_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (map_mat f A \\<in> {m. dim_row m = nr \\<and> dim_col m = nc}) =\n    (A \\<in> {m. dim_row m = nr \\<and> dim_col m = nc})", "by auto"], ["", "lemma col_map_mat[simp]:\n  assumes \"j < dim_col A\" shows \"col (map_mat f A) j = map_vec f (col A j)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. col (map_mat f A) j = map_vec f (col A j)", "unfolding map_mat_def map_vec_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. col (mat (dim_row A) (dim_col A) (\\<lambda>ij. f (A $$ ij))) j =\n    vec (dim_vec (col A j)) (\\<lambda>i. f (col A j $ i))", "using assms"], ["proof (prove)\nusing this:\n  j < dim_col A\n\ngoal (1 subgoal):\n 1. col (mat (dim_row A) (dim_col A) (\\<lambda>ij. f (A $$ ij))) j =\n    vec (dim_vec (col A j)) (\\<lambda>i. f (col A j $ i))", "by auto"], ["", "lemma scalar_vec_one[simp]: \"1 \\<cdot>\\<^sub>v (v :: 'a :: semiring_1 vec) = v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (1::'a) \\<cdot>\\<^sub>v v = v", "by (rule eq_vecI, auto)"], ["", "lemma scalar_prod_smult_right[simp]:\n  \"dim_vec w = dim_vec v \\<Longrightarrow> w \\<bullet> (k \\<cdot>\\<^sub>v v) = (k :: 'a :: comm_semiring_0) * (w \\<bullet> v)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dim_vec w = dim_vec v \\<Longrightarrow>\n    w \\<bullet> (k \\<cdot>\\<^sub>v v) = k * (w \\<bullet> v)", "unfolding scalar_prod_def sum_distrib_left"], ["proof (prove)\ngoal (1 subgoal):\n 1. dim_vec w = dim_vec v \\<Longrightarrow>\n    (\\<Sum>i = 0..<dim_vec (k \\<cdot>\\<^sub>v v).\n        w $ i * (k \\<cdot>\\<^sub>v v) $ i) =\n    (\\<Sum>n = 0..<dim_vec v. k * (w $ n * v $ n))", "by (auto intro: sum.cong simp: ac_simps)"], ["", "lemma scalar_prod_smult_left[simp]:\n  \"dim_vec w = dim_vec v \\<Longrightarrow> (k \\<cdot>\\<^sub>v w) \\<bullet> v = (k :: 'a :: comm_semiring_0) * (w \\<bullet> v)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dim_vec w = dim_vec v \\<Longrightarrow>\n    (k \\<cdot>\\<^sub>v w) \\<bullet> v = k * (w \\<bullet> v)", "unfolding scalar_prod_def sum_distrib_left"], ["proof (prove)\ngoal (1 subgoal):\n 1. dim_vec w = dim_vec v \\<Longrightarrow>\n    (\\<Sum>i = 0..<dim_vec v. (k \\<cdot>\\<^sub>v w) $ i * v $ i) =\n    (\\<Sum>n = 0..<dim_vec v. k * (w $ n * v $ n))", "by (auto intro: sum.cong simp: ac_simps)"], ["", "lemma mult_smult_distrib: assumes A: \"A \\<in> carrier_mat nr n\" and B: \"B \\<in> carrier_mat n nc\"\n  shows \"A * (k \\<cdot>\\<^sub>m B) = (k :: 'a :: comm_semiring_0) \\<cdot>\\<^sub>m (A * B)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A * (k \\<cdot>\\<^sub>m B) = k \\<cdot>\\<^sub>m (A * B)", "by (rule eq_matI, insert A B, auto)"], ["", "lemma add_smult_distrib_left_mat: assumes \"A \\<in> carrier_mat nr nc\" \"B \\<in> carrier_mat nr nc\"\n  shows \"k \\<cdot>\\<^sub>m (A + B) = (k :: 'a :: semiring) \\<cdot>\\<^sub>m A + k \\<cdot>\\<^sub>m B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. k \\<cdot>\\<^sub>m (A + B) = k \\<cdot>\\<^sub>m A + k \\<cdot>\\<^sub>m B", "by (rule eq_matI, insert assms, auto simp: field_simps)"], ["", "lemma add_smult_distrib_right_mat: assumes \"A \\<in> carrier_mat nr nc\"\n  shows \"(k + l) \\<cdot>\\<^sub>m A = (k :: 'a :: semiring) \\<cdot>\\<^sub>m A + l \\<cdot>\\<^sub>m A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (k + l) \\<cdot>\\<^sub>m A = k \\<cdot>\\<^sub>m A + l \\<cdot>\\<^sub>m A", "by (rule eq_matI, insert assms, auto simp: field_simps)"], ["", "lemma mult_smult_assoc_mat: assumes A: \"A \\<in> carrier_mat nr n\" and B: \"B \\<in> carrier_mat n nc\"\n  shows \"(k \\<cdot>\\<^sub>m A) * B = (k :: 'a :: comm_semiring_0) \\<cdot>\\<^sub>m (A * B)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. k \\<cdot>\\<^sub>m A * B = k \\<cdot>\\<^sub>m (A * B)", "by (rule eq_matI, insert A B, auto)"], ["", "definition similar_mat_wit :: \"'a :: semiring_1 mat \\<Rightarrow> 'a mat \\<Rightarrow> 'a mat \\<Rightarrow> 'a mat \\<Rightarrow> bool\" where\n  \"similar_mat_wit A B P Q = (let n = dim_row A in {A,B,P,Q} \\<subseteq> carrier_mat n n \\<and> P * Q = 1\\<^sub>m n \\<and> Q * P = 1\\<^sub>m n \\<and>\n    A = P * B * Q)\""], ["", "definition similar_mat :: \"'a :: semiring_1 mat \\<Rightarrow> 'a mat \\<Rightarrow> bool\" where\n  \"similar_mat A B = (\\<exists> P Q. similar_mat_wit A B P Q)\""], ["", "lemma similar_matD: assumes \"similar_mat A B\"\n  shows \"\\<exists> n P Q. {A,B,P,Q} \\<subseteq> carrier_mat n n \\<and> P * Q = 1\\<^sub>m n \\<and> Q * P = 1\\<^sub>m n \\<and> A = P * B * Q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>n P Q.\n       {A, B, P, Q} \\<subseteq> carrier_mat n n \\<and>\n       P * Q = 1\\<^sub>m n \\<and> Q * P = 1\\<^sub>m n \\<and> A = P * B * Q", "using assms"], ["proof (prove)\nusing this:\n  similar_mat A B\n\ngoal (1 subgoal):\n 1. \\<exists>n P Q.\n       {A, B, P, Q} \\<subseteq> carrier_mat n n \\<and>\n       P * Q = 1\\<^sub>m n \\<and> Q * P = 1\\<^sub>m n \\<and> A = P * B * Q", "unfolding similar_mat_def similar_mat_wit_def[abs_def] Let_def"], ["proof (prove)\nusing this:\n  \\<exists>P Q.\n     {A, B, P, Q} \\<subseteq> carrier_mat (dim_row A) (dim_row A) \\<and>\n     P * Q = 1\\<^sub>m (dim_row A) \\<and>\n     Q * P = 1\\<^sub>m (dim_row A) \\<and> A = P * B * Q\n\ngoal (1 subgoal):\n 1. \\<exists>n P Q.\n       {A, B, P, Q} \\<subseteq> carrier_mat n n \\<and>\n       P * Q = 1\\<^sub>m n \\<and> Q * P = 1\\<^sub>m n \\<and> A = P * B * Q", "by blast"], ["", "lemma similar_matI: assumes \"{A,B,P,Q} \\<subseteq> carrier_mat n n\" \"P * Q = 1\\<^sub>m n\" \"Q * P = 1\\<^sub>m n\" \"A = P * B * Q\"\n  shows \"similar_mat A B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. similar_mat A B", "unfolding similar_mat_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>P. Ex (similar_mat_wit A B P)", "by (rule exI[of _ P], rule exI[of _ Q], unfold similar_mat_wit_def Let_def, insert assms, auto)"], ["", "fun pow_mat :: \"'a :: semiring_1 mat \\<Rightarrow> nat \\<Rightarrow> 'a mat\" (infixr \"^\\<^sub>m\" 75) where\n  \"A ^\\<^sub>m 0 = 1\\<^sub>m (dim_row A)\"\n| \"A ^\\<^sub>m (Suc k) = A ^\\<^sub>m k * A\""], ["", "lemma pow_mat_dim[simp]:\n  \"dim_row (A ^\\<^sub>m k) = dim_row A\"\n  \"dim_col (A ^\\<^sub>m k) = (if k = 0 then dim_row A else dim_col A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dim_row (A ^\\<^sub>m k) = dim_row A &&&\n    dim_col (A ^\\<^sub>m k) = (if k = 0 then dim_row A else dim_col A)", "by (induct k, auto)"], ["", "lemma pow_mat_dim_square[simp]:\n  \"A \\<in> carrier_mat n n \\<Longrightarrow> dim_row (A ^\\<^sub>m k) = n\"\n  \"A \\<in> carrier_mat n n \\<Longrightarrow> dim_col (A ^\\<^sub>m k) = n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (A \\<in> carrier_mat n n \\<Longrightarrow>\n     dim_row (A ^\\<^sub>m k) = n) &&&\n    (A \\<in> carrier_mat n n \\<Longrightarrow> dim_col (A ^\\<^sub>m k) = n)", "by auto"], ["", "lemma pow_carrier_mat[simp]: \"A \\<in> carrier_mat n n \\<Longrightarrow> A ^\\<^sub>m k \\<in> carrier_mat n n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A \\<in> carrier_mat n n \\<Longrightarrow>\n    A ^\\<^sub>m k \\<in> carrier_mat n n", "unfolding carrier_mat_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. A \\<in> {m. dim_row m = n \\<and> dim_col m = n} \\<Longrightarrow>\n    A ^\\<^sub>m k \\<in> {m. dim_row m = n \\<and> dim_col m = n}", "by auto"], ["", "definition diag_mat :: \"'a mat \\<Rightarrow> 'a list\" where\n  \"diag_mat A = map (\\<lambda> i. A $$ (i,i)) [0 ..< dim_row A]\""], ["", "lemma prod_list_diag_prod: \"prod_list (diag_mat A) = (\\<Prod> i = 0 ..< dim_row A. A $$ (i,i))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prod_list (diag_mat A) = (\\<Prod>i = 0..<dim_row A. A $$ (i, i))", "unfolding diag_mat_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Prod>i\\<leftarrow>[0..<dim_row A]. A $$ (i, i)) =\n    (\\<Prod>i = 0..<dim_row A. A $$ (i, i))", "by (subst prod.distinct_set_conv_list[symmetric], auto)"], ["", "lemma diag_mat_transpose[simp]: \"dim_row A = dim_col A \\<Longrightarrow>\n  diag_mat (transpose_mat A) = diag_mat A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dim_row A = dim_col A \\<Longrightarrow>\n    diag_mat (transpose_mat A) = diag_mat A", "unfolding diag_mat_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. dim_row A = dim_col A \\<Longrightarrow>\n    map (\\<lambda>i. transpose_mat A $$ (i, i))\n     [0..<dim_row (transpose_mat A)] =\n    map (\\<lambda>i. A $$ (i, i)) [0..<dim_row A]", "by auto"], ["", "lemma diag_mat_zero[simp]: \"diag_mat (0\\<^sub>m n n) = replicate n 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. diag_mat (0\\<^sub>m n n) = replicate n (0::'a)", "unfolding diag_mat_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. map (\\<lambda>i. 0\\<^sub>m n n $$ (i, i))\n     [0..<dim_row (0\\<^sub>m n n)] =\n    replicate n (0::'a)", "by (rule nth_equalityI, auto)"], ["", "lemma diag_mat_one[simp]: \"diag_mat (1\\<^sub>m n) = replicate n 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. diag_mat (1\\<^sub>m n) = replicate n (1::'a)", "unfolding diag_mat_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. map (\\<lambda>i. 1\\<^sub>m n $$ (i, i)) [0..<dim_row (1\\<^sub>m n)] =\n    replicate n (1::'a)", "by (rule nth_equalityI, auto)"], ["", "lemma pow_mat_ring_pow: assumes A: \"(A :: ('a :: semiring_1)mat) \\<in> carrier_mat n n\"\n  shows \"A ^\\<^sub>m k = A [^]\\<^bsub>ring_mat TYPE('a) n b\\<^esub> k\"\n  (is \"_ = A [^]\\<^bsub>?C\\<^esub> k\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. A ^\\<^sub>m k = A [^]\\<^bsub>ring_mat TYPE('a) n b\\<^esub> k", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. A ^\\<^sub>m k = A [^]\\<^bsub>ring_mat TYPE('a) n b\\<^esub> k", "interpret semiring ?C"], ["proof (prove)\ngoal (1 subgoal):\n 1. semiring (ring_mat TYPE('a) n b)", "by (rule semiring_mat)"], ["proof (state)\ngoal (1 subgoal):\n 1. A ^\\<^sub>m k = A [^]\\<^bsub>ring_mat TYPE('a) n b\\<^esub> k", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. A ^\\<^sub>m k = A [^]\\<^bsub>ring_mat TYPE('a) n b\\<^esub> k", "by (induct k, insert A, auto simp: ring_mat_def nat_pow_def)"], ["proof (state)\nthis:\n  A ^\\<^sub>m k = A [^]\\<^bsub>ring_mat TYPE('a) n b\\<^esub> k\n\ngoal:\nNo subgoals!", "qed"], ["", "definition diagonal_mat :: \"'a::zero mat \\<Rightarrow> bool\" where\n  \"diagonal_mat A \\<equiv> \\<forall>i<dim_row A. \\<forall>j<dim_col A. i \\<noteq> j \\<longrightarrow> A $$ (i,j) = 0\""], ["", "definition (in comm_monoid_add) sum_mat :: \"'a mat \\<Rightarrow> 'a\" where\n  \"sum_mat A = sum (\\<lambda> ij. A $$ ij) ({0 ..< dim_row A} \\<times> {0 ..< dim_col A})\""], ["", "lemma sum_mat_0[simp]: \"sum_mat (0\\<^sub>m nr nc) = (0 :: 'a :: comm_monoid_add)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sum_mat (0\\<^sub>m nr nc) = (0::'a)", "unfolding sum_mat_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. sum (($$) (0\\<^sub>m nr nc))\n     ({0..<dim_row (0\\<^sub>m nr nc)} \\<times>\n      {0..<dim_col (0\\<^sub>m nr nc)}) =\n    (0::'a)", "by (rule sum.neutral, auto)"], ["", "lemma sum_mat_add: assumes A: \"(A :: 'a :: comm_monoid_add mat) \\<in> carrier_mat nr nc\" and B: \"B \\<in> carrier_mat nr nc\"\n  shows \"sum_mat (A + B) = sum_mat A + sum_mat B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sum_mat (A + B) = sum_mat A + sum_mat B", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. sum_mat (A + B) = sum_mat A + sum_mat B", "from A B"], ["proof (chain)\npicking this:\n  A \\<in> carrier_mat nr nc\n  B \\<in> carrier_mat nr nc", "have id: \"dim_row A = nr\" \"dim_row B = nr\" \"dim_col A = nc\" \"dim_col B = nc\""], ["proof (prove)\nusing this:\n  A \\<in> carrier_mat nr nc\n  B \\<in> carrier_mat nr nc\n\ngoal (1 subgoal):\n 1. (dim_row A = nr &&& dim_row B = nr) &&&\n    dim_col A = nc &&& dim_col B = nc", "by auto"], ["proof (state)\nthis:\n  dim_row A = nr\n  dim_row B = nr\n  dim_col A = nc\n  dim_col B = nc\n\ngoal (1 subgoal):\n 1. sum_mat (A + B) = sum_mat A + sum_mat B", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. sum_mat (A + B) = sum_mat A + sum_mat B", "unfolding sum_mat_def id"], ["proof (prove)\ngoal (1 subgoal):\n 1. sum (($$) (A + B))\n     ({0..<dim_row (A + B)} \\<times> {0..<dim_col (A + B)}) =\n    sum (($$) A) ({0..<nr} \\<times> {0..<nc}) +\n    sum (($$) B) ({0..<nr} \\<times> {0..<nc})", "by (subst sum.distrib[symmetric], rule sum.cong, insert A B, auto)"], ["proof (state)\nthis:\n  sum_mat (A + B) = sum_mat A + sum_mat B\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection \\<open>Update Operators\\<close>"], ["", "definition update_vec :: \"'a vec \\<Rightarrow> nat \\<Rightarrow> 'a \\<Rightarrow> 'a vec\" (\"_ |\\<^sub>v _ \\<mapsto> _\" [60,61,62] 60)\n  where \"v |\\<^sub>v i \\<mapsto> a = vec (dim_vec v) (\\<lambda>i'. if i' = i then a else v $ i')\""], ["", "definition update_mat :: \"'a mat \\<Rightarrow> nat \\<times> nat \\<Rightarrow> 'a \\<Rightarrow> 'a mat\" (\"_ |\\<^sub>m _ \\<mapsto> _\" [60,61,62] 60)\n  where \"A |\\<^sub>m ij \\<mapsto> a = mat (dim_row A) (dim_col A) (\\<lambda>ij'. if ij' = ij then a else A $$ ij')\""], ["", "lemma dim_update_vec[simp]:\n  \"dim_vec (v |\\<^sub>v i \\<mapsto> a) = dim_vec v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dim_vec (v |\\<^sub>v i \\<mapsto> a) = dim_vec v", "unfolding update_vec_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. dim_vec (vec (dim_vec v) (\\<lambda>i'. if i' = i then a else v $ i')) =\n    dim_vec v", "by simp"], ["", "lemma index_update_vec1[simp]:\n  assumes \"i < dim_vec v\" shows \"(v |\\<^sub>v i \\<mapsto> a) $ i = a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (v |\\<^sub>v i \\<mapsto> a) $ i = a", "unfolding update_vec_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. vec (dim_vec v) (\\<lambda>i'. if i' = i then a else v $ i') $ i = a", "using assms"], ["proof (prove)\nusing this:\n  i < dim_vec v\n\ngoal (1 subgoal):\n 1. vec (dim_vec v) (\\<lambda>i'. if i' = i then a else v $ i') $ i = a", "by simp"], ["", "lemma index_update_vec2[simp]:\n  assumes \"i' \\<noteq> i\" shows \"(v |\\<^sub>v i \\<mapsto> a) $ i' = v $ i'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (v |\\<^sub>v i \\<mapsto> a) $ i' = v $ i'", "unfolding update_vec_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. vec (dim_vec v) (\\<lambda>i'. if i' = i then a else v $ i') $ i' =\n    v $ i'", "using assms"], ["proof (prove)\nusing this:\n  i' \\<noteq> i\n\ngoal (1 subgoal):\n 1. vec (dim_vec v) (\\<lambda>i'. if i' = i then a else v $ i') $ i' =\n    v $ i'", "apply transfer"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i' i v a.\n       \\<lbrakk>i' \\<noteq> i;\n        \\<exists>n f. v = (n, mk_vec n f) \\<and> True\\<rbrakk>\n       \\<Longrightarrow> snd (fst v,\n                              mk_vec (fst v)\n                               (\\<lambda>i'.\n                                   if i' = i then a else snd v i'))\n                          i' =\n                         snd v i'", "unfolding mk_vec_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i' i v a.\n       \\<lbrakk>i' \\<noteq> i;\n        \\<exists>n f.\n           v =\n           (n, \\<lambda>i. if i < n then f i else undef_vec (i - n)) \\<and>\n           True\\<rbrakk>\n       \\<Longrightarrow> snd (fst v,\n                              \\<lambda>ia.\n                                 if ia < fst v\n                                 then if ia = i then a else snd v ia\n                                 else undef_vec (ia - fst v))\n                          i' =\n                         snd v i'", "by auto"], ["", "lemma dim_update_mat[simp]:\n  \"dim_row (A |\\<^sub>m ij \\<mapsto> a) = dim_row A\"\n  \"dim_col (A |\\<^sub>m ij \\<mapsto> a) = dim_col A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dim_row (A |\\<^sub>m ij \\<mapsto> a) = dim_row A &&&\n    dim_col (A |\\<^sub>m ij \\<mapsto> a) = dim_col A", "unfolding update_mat_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. dim_row\n     (mat (dim_row A) (dim_col A)\n       (\\<lambda>ij'. if ij' = ij then a else A $$ ij')) =\n    dim_row A &&&\n    dim_col\n     (mat (dim_row A) (dim_col A)\n       (\\<lambda>ij'. if ij' = ij then a else A $$ ij')) =\n    dim_col A", "by simp+"], ["", "lemma index_update_mat1[simp]:\n  assumes \"i < dim_row A\" \"j < dim_col A\" shows \"(A |\\<^sub>m (i,j) \\<mapsto> a) $$ (i,j) = a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (A |\\<^sub>m (i, j) \\<mapsto> a) $$ (i, j) = a", "unfolding update_mat_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. mat (dim_row A) (dim_col A)\n     (\\<lambda>ij'. if ij' = (i, j) then a else A $$ ij') $$\n    (i, j) =\n    a", "using assms"], ["proof (prove)\nusing this:\n  i < dim_row A\n  j < dim_col A\n\ngoal (1 subgoal):\n 1. mat (dim_row A) (dim_col A)\n     (\\<lambda>ij'. if ij' = (i, j) then a else A $$ ij') $$\n    (i, j) =\n    a", "by simp"], ["", "lemma index_update_mat2[simp]:\n  assumes i': \"i' < dim_row A\" and j': \"j' < dim_col A\" and neq: \"(i',j') \\<noteq> ij\"\n  shows \"(A |\\<^sub>m ij \\<mapsto> a) $$ (i',j') = A $$ (i',j')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (A |\\<^sub>m ij \\<mapsto> a) $$ (i', j') = A $$ (i', j')", "unfolding update_mat_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. mat (dim_row A) (dim_col A)\n     (\\<lambda>ij'. if ij' = ij then a else A $$ ij') $$\n    (i', j') =\n    A $$ (i', j')", "using assms"], ["proof (prove)\nusing this:\n  i' < dim_row A\n  j' < dim_col A\n  (i', j') \\<noteq> ij\n\ngoal (1 subgoal):\n 1. mat (dim_row A) (dim_col A)\n     (\\<lambda>ij'. if ij' = ij then a else A $$ ij') $$\n    (i', j') =\n    A $$ (i', j')", "by auto"], ["", "subsection \\<open>Block Vectors and Matrices\\<close>"], ["", "definition append_vec :: \"'a vec \\<Rightarrow> 'a vec \\<Rightarrow> 'a vec\" (infixr \"@\\<^sub>v\" 65) where\n  \"v @\\<^sub>v w \\<equiv> let n = dim_vec v; m = dim_vec w in\n    vec (n + m) (\\<lambda> i. if i < n then v $ i else w $ (i - n))\""], ["", "lemma index_append_vec[simp]: \"i < dim_vec v + dim_vec w\n  \\<Longrightarrow> (v @\\<^sub>v w) $ i = (if i < dim_vec v then v $ i else w $ (i - dim_vec v))\"\n  \"dim_vec (v @\\<^sub>v w) = dim_vec v + dim_vec w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (i < dim_vec v + dim_vec w \\<Longrightarrow>\n     (v @\\<^sub>v w) $ i =\n     (if i < dim_vec v then v $ i else w $ (i - dim_vec v))) &&&\n    dim_vec (v @\\<^sub>v w) = dim_vec v + dim_vec w", "unfolding append_vec_def Let_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (i < dim_vec v + dim_vec w \\<Longrightarrow>\n     vec (dim_vec v + dim_vec w)\n      (\\<lambda>i. if i < dim_vec v then v $ i else w $ (i - dim_vec v)) $\n     i =\n     (if i < dim_vec v then v $ i else w $ (i - dim_vec v))) &&&\n    dim_vec\n     (vec (dim_vec v + dim_vec w)\n       (\\<lambda>i. if i < dim_vec v then v $ i else w $ (i - dim_vec v))) =\n    dim_vec v + dim_vec w", "by auto"], ["", "lemma append_carrier_vec[simp,intro]:\n  \"v \\<in> carrier_vec n1 \\<Longrightarrow> w \\<in> carrier_vec n2 \\<Longrightarrow> v @\\<^sub>v w \\<in> carrier_vec (n1 + n2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>v \\<in> carrier_vec n1; w \\<in> carrier_vec n2\\<rbrakk>\n    \\<Longrightarrow> v @\\<^sub>v w \\<in> carrier_vec (n1 + n2)", "unfolding carrier_vec_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>v \\<in> {v. dim_vec v = n1};\n     w \\<in> {v. dim_vec v = n2}\\<rbrakk>\n    \\<Longrightarrow> v @\\<^sub>v w \\<in> {v. dim_vec v = n1 + n2}", "by auto"], ["", "lemma scalar_prod_append: assumes \"v1 \\<in> carrier_vec n1\" \"v2 \\<in> carrier_vec n2\"\n  \"w1 \\<in> carrier_vec n1\" \"w2 \\<in> carrier_vec n2\"\n  shows \"(v1 @\\<^sub>v v2) \\<bullet> (w1 @\\<^sub>v w2) = v1 \\<bullet> w1 + v2 \\<bullet> w2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (v1 @\\<^sub>v v2) \\<bullet> (w1 @\\<^sub>v w2) =\n    v1 \\<bullet> w1 + v2 \\<bullet> w2", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (v1 @\\<^sub>v v2) \\<bullet> (w1 @\\<^sub>v w2) =\n    v1 \\<bullet> w1 + v2 \\<bullet> w2", "from assms"], ["proof (chain)\npicking this:\n  v1 \\<in> carrier_vec n1\n  v2 \\<in> carrier_vec n2\n  w1 \\<in> carrier_vec n1\n  w2 \\<in> carrier_vec n2", "have dim: \"dim_vec v1 = n1\" \"dim_vec v2 = n2\" \"dim_vec w1 = n1\" \"dim_vec w2 = n2\""], ["proof (prove)\nusing this:\n  v1 \\<in> carrier_vec n1\n  v2 \\<in> carrier_vec n2\n  w1 \\<in> carrier_vec n1\n  w2 \\<in> carrier_vec n2\n\ngoal (1 subgoal):\n 1. (dim_vec v1 = n1 &&& dim_vec v2 = n2) &&&\n    dim_vec w1 = n1 &&& dim_vec w2 = n2", "by auto"], ["proof (state)\nthis:\n  dim_vec v1 = n1\n  dim_vec v2 = n2\n  dim_vec w1 = n1\n  dim_vec w2 = n2\n\ngoal (1 subgoal):\n 1. (v1 @\\<^sub>v v2) \\<bullet> (w1 @\\<^sub>v w2) =\n    v1 \\<bullet> w1 + v2 \\<bullet> w2", "have id: \"{0 ..< n1 + n2} = {0 ..< n1} \\<union> {n1 ..< n1 + n2}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {0..<n1 + n2} = {0..<n1} \\<union> {n1..<n1 + n2}", "by auto"], ["proof (state)\nthis:\n  {0..<n1 + n2} = {0..<n1} \\<union> {n1..<n1 + n2}\n\ngoal (1 subgoal):\n 1. (v1 @\\<^sub>v v2) \\<bullet> (w1 @\\<^sub>v w2) =\n    v1 \\<bullet> w1 + v2 \\<bullet> w2", "have id2: \"{n1 ..< n1 + n2} = (plus n1) ` {0 ..< n2}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {n1..<n1 + n2} = (+) n1 ` {0..<n2}", "by (simp add: ac_simps)"], ["proof (state)\nthis:\n  {n1..<n1 + n2} = (+) n1 ` {0..<n2}\n\ngoal (1 subgoal):\n 1. (v1 @\\<^sub>v v2) \\<bullet> (w1 @\\<^sub>v w2) =\n    v1 \\<bullet> w1 + v2 \\<bullet> w2", "have \"(v1 @\\<^sub>v v2) \\<bullet> (w1 @\\<^sub>v w2) = (\\<Sum>i = 0..<n1. v1 $ i * w1 $ i) +\n    (\\<Sum>i = n1..<n1 + n2. v2 $ (i - n1) * w2 $ (i - n1))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (v1 @\\<^sub>v v2) \\<bullet> (w1 @\\<^sub>v w2) =\n    (\\<Sum>i = 0..<n1. v1 $ i * w1 $ i) +\n    (\\<Sum>i = n1..<n1 + n2. v2 $ (i - n1) * w2 $ (i - n1))", "unfolding scalar_prod_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>i = 0..<dim_vec (w1 @\\<^sub>v w2).\n        (v1 @\\<^sub>v v2) $ i * (w1 @\\<^sub>v w2) $ i) =\n    (\\<Sum>i = 0..<n1. v1 $ i * w1 $ i) +\n    (\\<Sum>i = n1..<n1 + n2. v2 $ (i - n1) * w2 $ (i - n1))", "by (auto simp: dim id, subst sum.union_disjoint, insert assms, force+)"], ["proof (state)\nthis:\n  (v1 @\\<^sub>v v2) \\<bullet> (w1 @\\<^sub>v w2) =\n  (\\<Sum>i = 0..<n1. v1 $ i * w1 $ i) +\n  (\\<Sum>i = n1..<n1 + n2. v2 $ (i - n1) * w2 $ (i - n1))\n\ngoal (1 subgoal):\n 1. (v1 @\\<^sub>v v2) \\<bullet> (w1 @\\<^sub>v w2) =\n    v1 \\<bullet> w1 + v2 \\<bullet> w2", "also"], ["proof (state)\nthis:\n  (v1 @\\<^sub>v v2) \\<bullet> (w1 @\\<^sub>v w2) =\n  (\\<Sum>i = 0..<n1. v1 $ i * w1 $ i) +\n  (\\<Sum>i = n1..<n1 + n2. v2 $ (i - n1) * w2 $ (i - n1))\n\ngoal (1 subgoal):\n 1. (v1 @\\<^sub>v v2) \\<bullet> (w1 @\\<^sub>v w2) =\n    v1 \\<bullet> w1 + v2 \\<bullet> w2", "have \"(\\<Sum>i = n1..<n1 + n2. v2 $ (i - n1) * w2 $ (i - n1))\n    = (\\<Sum>i = 0..< n2. v2 $ i * w2 $ i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>i = n1..<n1 + n2. v2 $ (i - n1) * w2 $ (i - n1)) =\n    (\\<Sum>i = 0..<n2. v2 $ i * w2 $ i)", "by (rule sum.reindex_cong [OF _ id2]) simp_all"], ["proof (state)\nthis:\n  (\\<Sum>i = n1..<n1 + n2. v2 $ (i - n1) * w2 $ (i - n1)) =\n  (\\<Sum>i = 0..<n2. v2 $ i * w2 $ i)\n\ngoal (1 subgoal):\n 1. (v1 @\\<^sub>v v2) \\<bullet> (w1 @\\<^sub>v w2) =\n    v1 \\<bullet> w1 + v2 \\<bullet> w2", "finally"], ["proof (chain)\npicking this:\n  (v1 @\\<^sub>v v2) \\<bullet> (w1 @\\<^sub>v w2) =\n  (\\<Sum>i = 0..<n1. v1 $ i * w1 $ i) + (\\<Sum>i = 0..<n2. v2 $ i * w2 $ i)", "show ?thesis"], ["proof (prove)\nusing this:\n  (v1 @\\<^sub>v v2) \\<bullet> (w1 @\\<^sub>v w2) =\n  (\\<Sum>i = 0..<n1. v1 $ i * w1 $ i) + (\\<Sum>i = 0..<n2. v2 $ i * w2 $ i)\n\ngoal (1 subgoal):\n 1. (v1 @\\<^sub>v v2) \\<bullet> (w1 @\\<^sub>v w2) =\n    v1 \\<bullet> w1 + v2 \\<bullet> w2", "by (simp, insert assms, auto simp: scalar_prod_def)"], ["proof (state)\nthis:\n  (v1 @\\<^sub>v v2) \\<bullet> (w1 @\\<^sub>v w2) =\n  v1 \\<bullet> w1 + v2 \\<bullet> w2\n\ngoal:\nNo subgoals!", "qed"], ["", "definition \"vec_first v n \\<equiv> vec n (\\<lambda>i. v $ i)\""], ["", "definition \"vec_last v n \\<equiv> vec n (\\<lambda>i. v $ (dim_vec v - n + i))\""], ["", "lemma dim_vec_first[simp]: \"dim_vec (vec_first v n) = n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dim_vec (vec_first v n) = n", "unfolding vec_first_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. dim_vec (vec n (($) v)) = n", "by auto"], ["", "lemma dim_vec_last[simp]: \"dim_vec (vec_last v n) = n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dim_vec (vec_last v n) = n", "unfolding vec_last_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. dim_vec (vec n (\\<lambda>i. v $ (dim_vec v - n + i))) = n", "by auto"], ["", "lemma vec_first_carrier[simp]: \"vec_first v n \\<in> carrier_vec n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. vec_first v n \\<in> carrier_vec n", "by (rule carrier_vecI, auto)"], ["", "lemma vec_last_carrier[simp]: \"vec_last v n \\<in> carrier_vec n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. vec_last v n \\<in> carrier_vec n", "by (rule carrier_vecI, auto)"], ["", "lemma vec_first_last_append[simp]:\n  assumes \"v \\<in> carrier_vec (n+m)\" shows \"vec_first v n @\\<^sub>v vec_last v m = v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. vec_first v n @\\<^sub>v vec_last v m = v", "apply(rule)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>i.\n       i < dim_vec v \\<Longrightarrow>\n       (vec_first v n @\\<^sub>v vec_last v m) $ i = v $ i\n 2. dim_vec (vec_first v n @\\<^sub>v vec_last v m) = dim_vec v", "unfolding vec_first_def vec_last_def"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>i.\n       i < dim_vec v \\<Longrightarrow>\n       (vec n (($) v) @\\<^sub>v\n        vec m (\\<lambda>i. v $ (dim_vec v - m + i))) $\n       i =\n       v $ i\n 2. dim_vec\n     (vec n (($) v) @\\<^sub>v vec m (\\<lambda>i. v $ (dim_vec v - m + i))) =\n    dim_vec v", "using assms"], ["proof (prove)\nusing this:\n  v \\<in> carrier_vec (n + m)\n\ngoal (2 subgoals):\n 1. \\<And>i.\n       i < dim_vec v \\<Longrightarrow>\n       (vec n (($) v) @\\<^sub>v\n        vec m (\\<lambda>i. v $ (dim_vec v - m + i))) $\n       i =\n       v $ i\n 2. dim_vec\n     (vec n (($) v) @\\<^sub>v vec m (\\<lambda>i. v $ (dim_vec v - m + i))) =\n    dim_vec v", "by auto"], ["", "lemma append_vec_le: assumes \"v \\<in> carrier_vec n\" and w: \"w \\<in> carrier_vec n\" \n  shows \"v @\\<^sub>v v' \\<le> w @\\<^sub>v w' \\<longleftrightarrow> v \\<le> w \\<and> v' \\<le> w'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (v @\\<^sub>v v' \\<le> w @\\<^sub>v w') = (v \\<le> w \\<and> v' \\<le> w')", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (v @\\<^sub>v v' \\<le> w @\\<^sub>v w') = (v \\<le> w \\<and> v' \\<le> w')", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. (v @\\<^sub>v v' \\<le> w @\\<^sub>v w') = (v \\<le> w \\<and> v' \\<le> w')", "fix i"], ["proof (state)\ngoal (1 subgoal):\n 1. (v @\\<^sub>v v' \\<le> w @\\<^sub>v w') = (v \\<le> w \\<and> v' \\<le> w')", "assume *: \"\\<forall>i. (\\<not> i < n \\<longrightarrow> i < n + dim_vec w' \\<longrightarrow> v' $ (i - n) \\<le> w' $ (i - n))\"\n      and i: \"i < dim_vec w'\""], ["proof (state)\nthis:\n  \\<forall>i.\n     \\<not> i < n \\<longrightarrow>\n     i < n + dim_vec w' \\<longrightarrow> v' $ (i - n) \\<le> w' $ (i - n)\n  i < dim_vec w'\n\ngoal (1 subgoal):\n 1. (v @\\<^sub>v v' \\<le> w @\\<^sub>v w') = (v \\<le> w \\<and> v' \\<le> w')", "have \"v' $ i \\<le> w' $ i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. v' $ i \\<le> w' $ i", "using *[rule_format, of \"n + i\"] i"], ["proof (prove)\nusing this:\n  \\<lbrakk>\\<not> n + i < n; n + i < n + dim_vec w'\\<rbrakk>\n  \\<Longrightarrow> v' $ (n + i - n) \\<le> w' $ (n + i - n)\n  i < dim_vec w'\n\ngoal (1 subgoal):\n 1. v' $ i \\<le> w' $ i", "by auto"], ["proof (state)\nthis:\n  v' $ i \\<le> w' $ i\n\ngoal (1 subgoal):\n 1. (v @\\<^sub>v v' \\<le> w @\\<^sub>v w') = (v \\<le> w \\<and> v' \\<le> w')", "}"], ["proof (state)\nthis:\n  \\<lbrakk>\\<forall>i.\n              \\<not> i < n \\<longrightarrow>\n              i < n + dim_vec w' \\<longrightarrow>\n              v' $ (i - n) \\<le> w' $ (i - n);\n   ?i2 < dim_vec w'\\<rbrakk>\n  \\<Longrightarrow> v' $ ?i2 \\<le> w' $ ?i2\n\ngoal (1 subgoal):\n 1. (v @\\<^sub>v v' \\<le> w @\\<^sub>v w') = (v \\<le> w \\<and> v' \\<le> w')", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<lbrakk>\\<forall>i.\n              \\<not> i < n \\<longrightarrow>\n              i < n + dim_vec w' \\<longrightarrow>\n              v' $ (i - n) \\<le> w' $ (i - n);\n   ?i2 < dim_vec w'\\<rbrakk>\n  \\<Longrightarrow> v' $ ?i2 \\<le> w' $ ?i2\n\ngoal (1 subgoal):\n 1. (v @\\<^sub>v v' \\<le> w @\\<^sub>v w') = (v \\<le> w \\<and> v' \\<le> w')", "using assms"], ["proof (prove)\nusing this:\n  \\<lbrakk>\\<forall>i.\n              \\<not> i < n \\<longrightarrow>\n              i < n + dim_vec w' \\<longrightarrow>\n              v' $ (i - n) \\<le> w' $ (i - n);\n   ?i2 < dim_vec w'\\<rbrakk>\n  \\<Longrightarrow> v' $ ?i2 \\<le> w' $ ?i2\n  v \\<in> carrier_vec n\n  w \\<in> carrier_vec n\n\ngoal (1 subgoal):\n 1. (v @\\<^sub>v v' \\<le> w @\\<^sub>v w') = (v \\<le> w \\<and> v' \\<le> w')", "unfolding less_eq_vec_def"], ["proof (prove)\nusing this:\n  \\<lbrakk>\\<forall>i.\n              \\<not> i < n \\<longrightarrow>\n              i < n + dim_vec w' \\<longrightarrow>\n              v' $ (i - n) \\<le> w' $ (i - n);\n   ?i2 < dim_vec w'\\<rbrakk>\n  \\<Longrightarrow> v' $ ?i2 \\<le> w' $ ?i2\n  v \\<in> carrier_vec n\n  w \\<in> carrier_vec n\n\ngoal (1 subgoal):\n 1. (dim_vec (v @\\<^sub>v v') = dim_vec (w @\\<^sub>v w') \\<and>\n     (\\<forall>i<dim_vec (w @\\<^sub>v w').\n         (v @\\<^sub>v v') $ i \\<le> (w @\\<^sub>v w') $ i)) =\n    ((dim_vec v = dim_vec w \\<and>\n      (\\<forall>i<dim_vec w. v $ i \\<le> w $ i)) \\<and>\n     dim_vec v' = dim_vec w' \\<and>\n     (\\<forall>i<dim_vec w'. v' $ i \\<le> w' $ i))", "by auto"], ["proof (state)\nthis:\n  (v @\\<^sub>v v' \\<le> w @\\<^sub>v w') = (v \\<le> w \\<and> v' \\<le> w')\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma all_vec_append: \"(\\<forall> x \\<in> carrier_vec (n + m). P x) \\<longleftrightarrow> (\\<forall> x1 \\<in> carrier_vec n. \\<forall> x2 \\<in> carrier_vec m. P (x1 @\\<^sub>v x2))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>x\\<in>carrier_vec (n + m). P x) =\n    (\\<forall>x1\\<in>carrier_vec n.\n        \\<forall>x2\\<in>carrier_vec m. P (x1 @\\<^sub>v x2))", "proof (standard, force, intro ballI, goal_cases)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>\\<forall>x1\\<in>carrier_vec n.\n                   \\<forall>x2\\<in>carrier_vec m. P (x1 @\\<^sub>v x2);\n        x \\<in> carrier_vec (n + m)\\<rbrakk>\n       \\<Longrightarrow> P x", "case (1 x)"], ["proof (state)\nthis:\n  \\<forall>x1\\<in>carrier_vec n.\n     \\<forall>x2\\<in>carrier_vec m. P (x1 @\\<^sub>v x2)\n  x \\<in> carrier_vec (n + m)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>\\<forall>x1\\<in>carrier_vec n.\n                   \\<forall>x2\\<in>carrier_vec m. P (x1 @\\<^sub>v x2);\n        x \\<in> carrier_vec (n + m)\\<rbrakk>\n       \\<Longrightarrow> P x", "have \"x = vec n (\\<lambda> i. x $ i) @\\<^sub>v vec m (\\<lambda> i. x $ (n + i))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x = vec n (($) x) @\\<^sub>v vec m (\\<lambda>i. x $ (n + i))", "by (rule eq_vecI, insert 1(2), auto)"], ["proof (state)\nthis:\n  x = vec n (($) x) @\\<^sub>v vec m (\\<lambda>i. x $ (n + i))\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>\\<forall>x1\\<in>carrier_vec n.\n                   \\<forall>x2\\<in>carrier_vec m. P (x1 @\\<^sub>v x2);\n        x \\<in> carrier_vec (n + m)\\<rbrakk>\n       \\<Longrightarrow> P x", "hence \"P x = P (vec n (\\<lambda> i. x $ i) @\\<^sub>v vec m (\\<lambda> i. x $ (n + i)))\""], ["proof (prove)\nusing this:\n  x = vec n (($) x) @\\<^sub>v vec m (\\<lambda>i. x $ (n + i))\n\ngoal (1 subgoal):\n 1. P x = P (vec n (($) x) @\\<^sub>v vec m (\\<lambda>i. x $ (n + i)))", "by simp"], ["proof (state)\nthis:\n  P x = P (vec n (($) x) @\\<^sub>v vec m (\\<lambda>i. x $ (n + i)))\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>\\<forall>x1\\<in>carrier_vec n.\n                   \\<forall>x2\\<in>carrier_vec m. P (x1 @\\<^sub>v x2);\n        x \\<in> carrier_vec (n + m)\\<rbrakk>\n       \\<Longrightarrow> P x", "also"], ["proof (state)\nthis:\n  P x = P (vec n (($) x) @\\<^sub>v vec m (\\<lambda>i. x $ (n + i)))\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>\\<forall>x1\\<in>carrier_vec n.\n                   \\<forall>x2\\<in>carrier_vec m. P (x1 @\\<^sub>v x2);\n        x \\<in> carrier_vec (n + m)\\<rbrakk>\n       \\<Longrightarrow> P x", "have \"\\<dots>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P (vec n (($) x) @\\<^sub>v vec m (\\<lambda>i. x $ (n + i)))", "using 1"], ["proof (prove)\nusing this:\n  \\<forall>x1\\<in>carrier_vec n.\n     \\<forall>x2\\<in>carrier_vec m. P (x1 @\\<^sub>v x2)\n  x \\<in> carrier_vec (n + m)\n\ngoal (1 subgoal):\n 1. P (vec n (($) x) @\\<^sub>v vec m (\\<lambda>i. x $ (n + i)))", "by auto"], ["proof (state)\nthis:\n  P (vec n (($) x) @\\<^sub>v vec m (\\<lambda>i. x $ (n + i)))\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>\\<forall>x1\\<in>carrier_vec n.\n                   \\<forall>x2\\<in>carrier_vec m. P (x1 @\\<^sub>v x2);\n        x \\<in> carrier_vec (n + m)\\<rbrakk>\n       \\<Longrightarrow> P x", "finally"], ["proof (chain)\npicking this:\n  P x", "show ?case"], ["proof (prove)\nusing this:\n  P x\n\ngoal (1 subgoal):\n 1. P x", "."], ["proof (state)\nthis:\n  P x\n\ngoal:\nNo subgoals!", "qed"], ["", "(* A B\n   C D *)"], ["", "definition four_block_mat :: \"'a mat \\<Rightarrow> 'a mat \\<Rightarrow> 'a mat \\<Rightarrow> 'a mat \\<Rightarrow> 'a mat\" where\n  \"four_block_mat A B C D =\n    (let nra = dim_row A; nrd = dim_row D;\n         nca = dim_col A; ncd = dim_col D\n       in\n    mat (nra + nrd) (nca + ncd) (\\<lambda> (i,j). if i < nra then\n      if j < nca then A $$ (i,j) else B $$ (i,j - nca)\n      else if j < nca then C $$ (i - nra, j) else D $$ (i - nra, j - nca)))\""], ["", "lemma index_mat_four_block[simp]:\n  \"i < dim_row A + dim_row D \\<Longrightarrow> j < dim_col A + dim_col D \\<Longrightarrow> four_block_mat A B C D $$ (i,j)\n  = (if i < dim_row A then\n      if j < dim_col A then A $$ (i,j) else B $$ (i,j - dim_col A)\n      else if j < dim_col A then C $$ (i - dim_row A, j) else D $$ (i - dim_row A, j - dim_col A))\"\n  \"dim_row (four_block_mat A B C D) = dim_row A + dim_row D\"\n  \"dim_col (four_block_mat A B C D) = dim_col A + dim_col D\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lbrakk>i < dim_row A + dim_row D; j < dim_col A + dim_col D\\<rbrakk>\n     \\<Longrightarrow> four_block_mat A B C D $$ (i, j) =\n                       (if i < dim_row A\n                        then if j < dim_col A then A $$ (i, j)\n                             else B $$ (i, j - dim_col A)\n                        else if j < dim_col A then C $$ (i - dim_row A, j)\n                             else D $$ (i - dim_row A, j - dim_col A))) &&&\n    dim_row (four_block_mat A B C D) = dim_row A + dim_row D &&&\n    dim_col (four_block_mat A B C D) = dim_col A + dim_col D", "unfolding four_block_mat_def Let_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lbrakk>i < dim_row A + dim_row D; j < dim_col A + dim_col D\\<rbrakk>\n     \\<Longrightarrow> mat (dim_row A + dim_row D) (dim_col A + dim_col D)\n                        (\\<lambda>(i, j).\n                            if i < dim_row A\n                            then if j < dim_col A then A $$ (i, j)\n                                 else B $$ (i, j - dim_col A)\n                            else if j < dim_col A\n                                 then C $$ (i - dim_row A, j)\n                                 else D $$\n(i - dim_row A, j - dim_col A)) $$\n                       (i, j) =\n                       (if i < dim_row A\n                        then if j < dim_col A then A $$ (i, j)\n                             else B $$ (i, j - dim_col A)\n                        else if j < dim_col A then C $$ (i - dim_row A, j)\n                             else D $$ (i - dim_row A, j - dim_col A))) &&&\n    dim_row\n     (mat (dim_row A + dim_row D) (dim_col A + dim_col D)\n       (\\<lambda>(i, j).\n           if i < dim_row A\n           then if j < dim_col A then A $$ (i, j)\n                else B $$ (i, j - dim_col A)\n           else if j < dim_col A then C $$ (i - dim_row A, j)\n                else D $$ (i - dim_row A, j - dim_col A))) =\n    dim_row A + dim_row D &&&\n    dim_col\n     (mat (dim_row A + dim_row D) (dim_col A + dim_col D)\n       (\\<lambda>(i, j).\n           if i < dim_row A\n           then if j < dim_col A then A $$ (i, j)\n                else B $$ (i, j - dim_col A)\n           else if j < dim_col A then C $$ (i - dim_row A, j)\n                else D $$ (i - dim_row A, j - dim_col A))) =\n    dim_col A + dim_col D", "by auto"], ["", "lemma four_block_carrier_mat[simp]:\n  \"A \\<in> carrier_mat nr1 nc1 \\<Longrightarrow> D \\<in> carrier_mat nr2 nc2 \\<Longrightarrow>\n  four_block_mat A B C D \\<in> carrier_mat (nr1 + nr2) (nc1 + nc2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>A \\<in> carrier_mat nr1 nc1;\n     D \\<in> carrier_mat nr2 nc2\\<rbrakk>\n    \\<Longrightarrow> four_block_mat A B C D\n                      \\<in> carrier_mat (nr1 + nr2) (nc1 + nc2)", "unfolding carrier_mat_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>A \\<in> {m. dim_row m = nr1 \\<and> dim_col m = nc1};\n     D \\<in> {m. dim_row m = nr2 \\<and> dim_col m = nc2}\\<rbrakk>\n    \\<Longrightarrow> four_block_mat A B C D\n                      \\<in> {m. dim_row m = nr1 + nr2 \\<and>\n                                dim_col m = nc1 + nc2}", "by auto"], ["", "lemma cong_four_block_mat: \"A1 = B1 \\<Longrightarrow> A2 = B2 \\<Longrightarrow> A3 = B3 \\<Longrightarrow> A4 = B4 \\<Longrightarrow>\n  four_block_mat A1 A2 A3 A4 = four_block_mat B1 B2 B3 B4\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>A1 = B1; A2 = B2; A3 = B3; A4 = B4\\<rbrakk>\n    \\<Longrightarrow> four_block_mat A1 A2 A3 A4 =\n                      four_block_mat B1 B2 B3 B4", "by auto"], ["", "lemma four_block_one_mat[simp]:\n  \"four_block_mat (1\\<^sub>m n1) (0\\<^sub>m n1 n2) (0\\<^sub>m n2 n1) (1\\<^sub>m n2) = 1\\<^sub>m (n1 + n2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. four_block_mat (1\\<^sub>m n1) (0\\<^sub>m n1 n2) (0\\<^sub>m n2 n1)\n     (1\\<^sub>m n2) =\n    1\\<^sub>m (n1 + n2)", "by (rule eq_matI, auto)"], ["", "lemma four_block_zero_mat[simp]:\n  \"four_block_mat (0\\<^sub>m nr1 nc1) (0\\<^sub>m nr1 nc2) (0\\<^sub>m nr2 nc1) (0\\<^sub>m nr2 nc2) = 0\\<^sub>m (nr1 + nr2) (nc1 + nc2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. four_block_mat (0\\<^sub>m nr1 nc1) (0\\<^sub>m nr1 nc2)\n     (0\\<^sub>m nr2 nc1) (0\\<^sub>m nr2 nc2) =\n    0\\<^sub>m (nr1 + nr2) (nc1 + nc2)", "by (rule eq_matI, auto)"], ["", "lemma row_four_block_mat:\n  assumes c: \"A \\<in> carrier_mat nr1 nc1\" \"B \\<in> carrier_mat nr1 nc2\"\n  \"C \\<in> carrier_mat nr2 nc1\" \"D \\<in> carrier_mat nr2 nc2\"\n  shows\n  \"i < nr1 \\<Longrightarrow> row (four_block_mat A B C D) i = row A i @\\<^sub>v row B i\" (is \"_ \\<Longrightarrow> ?AB\")\n  \"\\<not> i < nr1 \\<Longrightarrow> i < nr1 + nr2 \\<Longrightarrow> row (four_block_mat A B C D) i = row C (i - nr1) @\\<^sub>v row D (i - nr1)\"\n  (is \"_ \\<Longrightarrow> _ \\<Longrightarrow> ?CD\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. (i < nr1 \\<Longrightarrow>\n     row (four_block_mat A B C D) i = row A i @\\<^sub>v row B i) &&&\n    (\\<lbrakk>\\<not> i < nr1; i < nr1 + nr2\\<rbrakk>\n     \\<Longrightarrow> row (four_block_mat A B C D) i =\n                       row C (i - nr1) @\\<^sub>v row D (i - nr1))", "proof -"], ["proof (state)\ngoal (2 subgoals):\n 1. i < nr1 \\<Longrightarrow>\n    row (four_block_mat A B C D) i = row A i @\\<^sub>v row B i\n 2. \\<lbrakk>\\<not> i < nr1; i < nr1 + nr2\\<rbrakk>\n    \\<Longrightarrow> row (four_block_mat A B C D) i =\n                      row C (i - nr1) @\\<^sub>v row D (i - nr1)", "assume i: \"i < nr1\""], ["proof (state)\nthis:\n  i < nr1\n\ngoal (2 subgoals):\n 1. i < nr1 \\<Longrightarrow>\n    row (four_block_mat A B C D) i = row A i @\\<^sub>v row B i\n 2. \\<lbrakk>\\<not> i < nr1; i < nr1 + nr2\\<rbrakk>\n    \\<Longrightarrow> row (four_block_mat A B C D) i =\n                      row C (i - nr1) @\\<^sub>v row D (i - nr1)", "show ?AB"], ["proof (prove)\ngoal (1 subgoal):\n 1. row (four_block_mat A B C D) i = row A i @\\<^sub>v row B i", "by (rule eq_vecI, insert i c, auto)"], ["proof (state)\nthis:\n  row (four_block_mat A B C D) i = row A i @\\<^sub>v row B i\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<not> i < nr1; i < nr1 + nr2\\<rbrakk>\n    \\<Longrightarrow> row (four_block_mat A B C D) i =\n                      row C (i - nr1) @\\<^sub>v row D (i - nr1)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<not> i < nr1; i < nr1 + nr2\\<rbrakk>\n    \\<Longrightarrow> row (four_block_mat A B C D) i =\n                      row C (i - nr1) @\\<^sub>v row D (i - nr1)", "assume i: \"\\<not> i < nr1\" \"i < nr1 + nr2\""], ["proof (state)\nthis:\n  \\<not> i < nr1\n  i < nr1 + nr2\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<not> i < nr1; i < nr1 + nr2\\<rbrakk>\n    \\<Longrightarrow> row (four_block_mat A B C D) i =\n                      row C (i - nr1) @\\<^sub>v row D (i - nr1)", "show ?CD"], ["proof (prove)\ngoal (1 subgoal):\n 1. row (four_block_mat A B C D) i =\n    row C (i - nr1) @\\<^sub>v row D (i - nr1)", "by (rule eq_vecI, insert i c, auto)"], ["proof (state)\nthis:\n  row (four_block_mat A B C D) i = row C (i - nr1) @\\<^sub>v row D (i - nr1)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma col_four_block_mat:\n  assumes c: \"A \\<in> carrier_mat nr1 nc1\" \"B \\<in> carrier_mat nr1 nc2\"\n  \"C \\<in> carrier_mat nr2 nc1\" \"D \\<in> carrier_mat nr2 nc2\"\n  shows\n  \"j < nc1 \\<Longrightarrow> col (four_block_mat A B C D) j = col A j @\\<^sub>v col C j\" (is \"_ \\<Longrightarrow> ?AC\")\n  \"\\<not> j < nc1 \\<Longrightarrow> j < nc1 + nc2 \\<Longrightarrow> col (four_block_mat A B C D) j = col B (j - nc1) @\\<^sub>v col D (j - nc1)\"\n  (is \"_ \\<Longrightarrow> _ \\<Longrightarrow> ?BD\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. (j < nc1 \\<Longrightarrow>\n     col (four_block_mat A B C D) j = col A j @\\<^sub>v col C j) &&&\n    (\\<lbrakk>\\<not> j < nc1; j < nc1 + nc2\\<rbrakk>\n     \\<Longrightarrow> col (four_block_mat A B C D) j =\n                       col B (j - nc1) @\\<^sub>v col D (j - nc1))", "proof -"], ["proof (state)\ngoal (2 subgoals):\n 1. j < nc1 \\<Longrightarrow>\n    col (four_block_mat A B C D) j = col A j @\\<^sub>v col C j\n 2. \\<lbrakk>\\<not> j < nc1; j < nc1 + nc2\\<rbrakk>\n    \\<Longrightarrow> col (four_block_mat A B C D) j =\n                      col B (j - nc1) @\\<^sub>v col D (j - nc1)", "assume j: \"j < nc1\""], ["proof (state)\nthis:\n  j < nc1\n\ngoal (2 subgoals):\n 1. j < nc1 \\<Longrightarrow>\n    col (four_block_mat A B C D) j = col A j @\\<^sub>v col C j\n 2. \\<lbrakk>\\<not> j < nc1; j < nc1 + nc2\\<rbrakk>\n    \\<Longrightarrow> col (four_block_mat A B C D) j =\n                      col B (j - nc1) @\\<^sub>v col D (j - nc1)", "show ?AC"], ["proof (prove)\ngoal (1 subgoal):\n 1. col (four_block_mat A B C D) j = col A j @\\<^sub>v col C j", "by (rule eq_vecI, insert j c, auto)"], ["proof (state)\nthis:\n  col (four_block_mat A B C D) j = col A j @\\<^sub>v col C j\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<not> j < nc1; j < nc1 + nc2\\<rbrakk>\n    \\<Longrightarrow> col (four_block_mat A B C D) j =\n                      col B (j - nc1) @\\<^sub>v col D (j - nc1)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<not> j < nc1; j < nc1 + nc2\\<rbrakk>\n    \\<Longrightarrow> col (four_block_mat A B C D) j =\n                      col B (j - nc1) @\\<^sub>v col D (j - nc1)", "assume j: \"\\<not> j < nc1\" \"j < nc1 + nc2\""], ["proof (state)\nthis:\n  \\<not> j < nc1\n  j < nc1 + nc2\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<not> j < nc1; j < nc1 + nc2\\<rbrakk>\n    \\<Longrightarrow> col (four_block_mat A B C D) j =\n                      col B (j - nc1) @\\<^sub>v col D (j - nc1)", "show ?BD"], ["proof (prove)\ngoal (1 subgoal):\n 1. col (four_block_mat A B C D) j =\n    col B (j - nc1) @\\<^sub>v col D (j - nc1)", "by (rule eq_vecI, insert j c, auto)"], ["proof (state)\nthis:\n  col (four_block_mat A B C D) j = col B (j - nc1) @\\<^sub>v col D (j - nc1)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma mult_four_block_mat: assumes\n  c1: \"A1 \\<in> carrier_mat nr1 n1\" \"B1 \\<in> carrier_mat nr1 n2\" \"C1 \\<in> carrier_mat nr2 n1\" \"D1 \\<in> carrier_mat nr2 n2\" and\n  c2: \"A2 \\<in> carrier_mat n1 nc1\" \"B2 \\<in> carrier_mat n1 nc2\" \"C2 \\<in> carrier_mat n2 nc1\" \"D2 \\<in> carrier_mat n2 nc2\"\n  shows \"four_block_mat A1 B1 C1 D1 * four_block_mat A2 B2 C2 D2\n  = four_block_mat (A1 * A2 + B1 * C2) (A1 * B2 + B1 * D2)\n    (C1 * A2 + D1 * C2) (C1 * B2 + D1 * D2)\" (is \"?M1 * ?M2 = _\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. four_block_mat A1 B1 C1 D1 * four_block_mat A2 B2 C2 D2 =\n    four_block_mat (A1 * A2 + B1 * C2) (A1 * B2 + B1 * D2)\n     (C1 * A2 + D1 * C2) (C1 * B2 + D1 * D2)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. four_block_mat A1 B1 C1 D1 * four_block_mat A2 B2 C2 D2 =\n    four_block_mat (A1 * A2 + B1 * C2) (A1 * B2 + B1 * D2)\n     (C1 * A2 + D1 * C2) (C1 * B2 + D1 * D2)", "note row = row_four_block_mat[OF c1]"], ["proof (state)\nthis:\n  ?i < nr1 \\<Longrightarrow>\n  row (four_block_mat A1 B1 C1 D1) ?i = row A1 ?i @\\<^sub>v row B1 ?i\n  \\<lbrakk>\\<not> ?i < nr1; ?i < nr1 + nr2\\<rbrakk>\n  \\<Longrightarrow> row (four_block_mat A1 B1 C1 D1) ?i =\n                    row C1 (?i - nr1) @\\<^sub>v row D1 (?i - nr1)\n\ngoal (1 subgoal):\n 1. four_block_mat A1 B1 C1 D1 * four_block_mat A2 B2 C2 D2 =\n    four_block_mat (A1 * A2 + B1 * C2) (A1 * B2 + B1 * D2)\n     (C1 * A2 + D1 * C2) (C1 * B2 + D1 * D2)", "note col = col_four_block_mat[OF c2]"], ["proof (state)\nthis:\n  ?j < nc1 \\<Longrightarrow>\n  col (four_block_mat A2 B2 C2 D2) ?j = col A2 ?j @\\<^sub>v col C2 ?j\n  \\<lbrakk>\\<not> ?j < nc1; ?j < nc1 + nc2\\<rbrakk>\n  \\<Longrightarrow> col (four_block_mat A2 B2 C2 D2) ?j =\n                    col B2 (?j - nc1) @\\<^sub>v col D2 (?j - nc1)\n\ngoal (1 subgoal):\n 1. four_block_mat A1 B1 C1 D1 * four_block_mat A2 B2 C2 D2 =\n    four_block_mat (A1 * A2 + B1 * C2) (A1 * B2 + B1 * D2)\n     (C1 * A2 + D1 * C2) (C1 * B2 + D1 * D2)", "{"], ["proof (state)\nthis:\n  ?j < nc1 \\<Longrightarrow>\n  col (four_block_mat A2 B2 C2 D2) ?j = col A2 ?j @\\<^sub>v col C2 ?j\n  \\<lbrakk>\\<not> ?j < nc1; ?j < nc1 + nc2\\<rbrakk>\n  \\<Longrightarrow> col (four_block_mat A2 B2 C2 D2) ?j =\n                    col B2 (?j - nc1) @\\<^sub>v col D2 (?j - nc1)\n\ngoal (1 subgoal):\n 1. four_block_mat A1 B1 C1 D1 * four_block_mat A2 B2 C2 D2 =\n    four_block_mat (A1 * A2 + B1 * C2) (A1 * B2 + B1 * D2)\n     (C1 * A2 + D1 * C2) (C1 * B2 + D1 * D2)", "fix i j"], ["proof (state)\ngoal (1 subgoal):\n 1. four_block_mat A1 B1 C1 D1 * four_block_mat A2 B2 C2 D2 =\n    four_block_mat (A1 * A2 + B1 * C2) (A1 * B2 + B1 * D2)\n     (C1 * A2 + D1 * C2) (C1 * B2 + D1 * D2)", "assume i: \"i < nr1\" and j: \"j < nc1\""], ["proof (state)\nthis:\n  i < nr1\n  j < nc1\n\ngoal (1 subgoal):\n 1. four_block_mat A1 B1 C1 D1 * four_block_mat A2 B2 C2 D2 =\n    four_block_mat (A1 * A2 + B1 * C2) (A1 * B2 + B1 * D2)\n     (C1 * A2 + D1 * C2) (C1 * B2 + D1 * D2)", "have \"row ?M1 i \\<bullet> col ?M2 j = row A1 i \\<bullet> col A2 j + row B1 i \\<bullet> col C2 j\""], ["proof (prove)\ngoal (1 subgoal):\n 1. row (four_block_mat A1 B1 C1 D1) i \\<bullet>\n    col (four_block_mat A2 B2 C2 D2) j =\n    row A1 i \\<bullet> col A2 j + row B1 i \\<bullet> col C2 j", "unfolding row(1)[OF i] col(1)[OF j]"], ["proof (prove)\ngoal (1 subgoal):\n 1. (row A1 i @\\<^sub>v row B1 i) \\<bullet> (col A2 j @\\<^sub>v col C2 j) =\n    row A1 i \\<bullet> col A2 j + row B1 i \\<bullet> col C2 j", "by (rule scalar_prod_append[of _ n1 _ n2], insert c1 c2 i j, auto)"], ["proof (state)\nthis:\n  row (four_block_mat A1 B1 C1 D1) i \\<bullet>\n  col (four_block_mat A2 B2 C2 D2) j =\n  row A1 i \\<bullet> col A2 j + row B1 i \\<bullet> col C2 j\n\ngoal (1 subgoal):\n 1. four_block_mat A1 B1 C1 D1 * four_block_mat A2 B2 C2 D2 =\n    four_block_mat (A1 * A2 + B1 * C2) (A1 * B2 + B1 * D2)\n     (C1 * A2 + D1 * C2) (C1 * B2 + D1 * D2)", "}"], ["proof (state)\nthis:\n  \\<lbrakk>?i2 < nr1; ?j2 < nc1\\<rbrakk>\n  \\<Longrightarrow> row (four_block_mat A1 B1 C1 D1) ?i2 \\<bullet>\n                    col (four_block_mat A2 B2 C2 D2) ?j2 =\n                    row A1 ?i2 \\<bullet> col A2 ?j2 +\n                    row B1 ?i2 \\<bullet> col C2 ?j2\n\ngoal (1 subgoal):\n 1. four_block_mat A1 B1 C1 D1 * four_block_mat A2 B2 C2 D2 =\n    four_block_mat (A1 * A2 + B1 * C2) (A1 * B2 + B1 * D2)\n     (C1 * A2 + D1 * C2) (C1 * B2 + D1 * D2)", "moreover"], ["proof (state)\nthis:\n  \\<lbrakk>?i2 < nr1; ?j2 < nc1\\<rbrakk>\n  \\<Longrightarrow> row (four_block_mat A1 B1 C1 D1) ?i2 \\<bullet>\n                    col (four_block_mat A2 B2 C2 D2) ?j2 =\n                    row A1 ?i2 \\<bullet> col A2 ?j2 +\n                    row B1 ?i2 \\<bullet> col C2 ?j2\n\ngoal (1 subgoal):\n 1. four_block_mat A1 B1 C1 D1 * four_block_mat A2 B2 C2 D2 =\n    four_block_mat (A1 * A2 + B1 * C2) (A1 * B2 + B1 * D2)\n     (C1 * A2 + D1 * C2) (C1 * B2 + D1 * D2)", "{"], ["proof (state)\nthis:\n  \\<lbrakk>?i2 < nr1; ?j2 < nc1\\<rbrakk>\n  \\<Longrightarrow> row (four_block_mat A1 B1 C1 D1) ?i2 \\<bullet>\n                    col (four_block_mat A2 B2 C2 D2) ?j2 =\n                    row A1 ?i2 \\<bullet> col A2 ?j2 +\n                    row B1 ?i2 \\<bullet> col C2 ?j2\n\ngoal (1 subgoal):\n 1. four_block_mat A1 B1 C1 D1 * four_block_mat A2 B2 C2 D2 =\n    four_block_mat (A1 * A2 + B1 * C2) (A1 * B2 + B1 * D2)\n     (C1 * A2 + D1 * C2) (C1 * B2 + D1 * D2)", "fix i j"], ["proof (state)\ngoal (1 subgoal):\n 1. four_block_mat A1 B1 C1 D1 * four_block_mat A2 B2 C2 D2 =\n    four_block_mat (A1 * A2 + B1 * C2) (A1 * B2 + B1 * D2)\n     (C1 * A2 + D1 * C2) (C1 * B2 + D1 * D2)", "assume i: \"\\<not> i < nr1\" \"i < nr1 + nr2\" and j: \"j < nc1\""], ["proof (state)\nthis:\n  \\<not> i < nr1\n  i < nr1 + nr2\n  j < nc1\n\ngoal (1 subgoal):\n 1. four_block_mat A1 B1 C1 D1 * four_block_mat A2 B2 C2 D2 =\n    four_block_mat (A1 * A2 + B1 * C2) (A1 * B2 + B1 * D2)\n     (C1 * A2 + D1 * C2) (C1 * B2 + D1 * D2)", "hence i': \"i - nr1 < nr2\""], ["proof (prove)\nusing this:\n  \\<not> i < nr1\n  i < nr1 + nr2\n  j < nc1\n\ngoal (1 subgoal):\n 1. i - nr1 < nr2", "by auto"], ["proof (state)\nthis:\n  i - nr1 < nr2\n\ngoal (1 subgoal):\n 1. four_block_mat A1 B1 C1 D1 * four_block_mat A2 B2 C2 D2 =\n    four_block_mat (A1 * A2 + B1 * C2) (A1 * B2 + B1 * D2)\n     (C1 * A2 + D1 * C2) (C1 * B2 + D1 * D2)", "have \"row ?M1 i \\<bullet> col ?M2 j = row C1 (i - nr1) \\<bullet> col A2 j + row D1 (i - nr1) \\<bullet> col C2 j\""], ["proof (prove)\ngoal (1 subgoal):\n 1. row (four_block_mat A1 B1 C1 D1) i \\<bullet>\n    col (four_block_mat A2 B2 C2 D2) j =\n    row C1 (i - nr1) \\<bullet> col A2 j +\n    row D1 (i - nr1) \\<bullet> col C2 j", "unfolding row(2)[OF i] col(1)[OF j]"], ["proof (prove)\ngoal (1 subgoal):\n 1. (row C1 (i - nr1) @\\<^sub>v row D1 (i - nr1)) \\<bullet>\n    (col A2 j @\\<^sub>v col C2 j) =\n    row C1 (i - nr1) \\<bullet> col A2 j +\n    row D1 (i - nr1) \\<bullet> col C2 j", "by (rule scalar_prod_append[of _ n1 _ n2], insert c1 c2 i i' j, auto)"], ["proof (state)\nthis:\n  row (four_block_mat A1 B1 C1 D1) i \\<bullet>\n  col (four_block_mat A2 B2 C2 D2) j =\n  row C1 (i - nr1) \\<bullet> col A2 j + row D1 (i - nr1) \\<bullet> col C2 j\n\ngoal (1 subgoal):\n 1. four_block_mat A1 B1 C1 D1 * four_block_mat A2 B2 C2 D2 =\n    four_block_mat (A1 * A2 + B1 * C2) (A1 * B2 + B1 * D2)\n     (C1 * A2 + D1 * C2) (C1 * B2 + D1 * D2)", "}"], ["proof (state)\nthis:\n  \\<lbrakk>\\<not> ?i2 < nr1; ?i2 < nr1 + nr2; ?j2 < nc1\\<rbrakk>\n  \\<Longrightarrow> row (four_block_mat A1 B1 C1 D1) ?i2 \\<bullet>\n                    col (four_block_mat A2 B2 C2 D2) ?j2 =\n                    row C1 (?i2 - nr1) \\<bullet> col A2 ?j2 +\n                    row D1 (?i2 - nr1) \\<bullet> col C2 ?j2\n\ngoal (1 subgoal):\n 1. four_block_mat A1 B1 C1 D1 * four_block_mat A2 B2 C2 D2 =\n    four_block_mat (A1 * A2 + B1 * C2) (A1 * B2 + B1 * D2)\n     (C1 * A2 + D1 * C2) (C1 * B2 + D1 * D2)", "moreover"], ["proof (state)\nthis:\n  \\<lbrakk>\\<not> ?i2 < nr1; ?i2 < nr1 + nr2; ?j2 < nc1\\<rbrakk>\n  \\<Longrightarrow> row (four_block_mat A1 B1 C1 D1) ?i2 \\<bullet>\n                    col (four_block_mat A2 B2 C2 D2) ?j2 =\n                    row C1 (?i2 - nr1) \\<bullet> col A2 ?j2 +\n                    row D1 (?i2 - nr1) \\<bullet> col C2 ?j2\n\ngoal (1 subgoal):\n 1. four_block_mat A1 B1 C1 D1 * four_block_mat A2 B2 C2 D2 =\n    four_block_mat (A1 * A2 + B1 * C2) (A1 * B2 + B1 * D2)\n     (C1 * A2 + D1 * C2) (C1 * B2 + D1 * D2)", "{"], ["proof (state)\nthis:\n  \\<lbrakk>\\<not> ?i2 < nr1; ?i2 < nr1 + nr2; ?j2 < nc1\\<rbrakk>\n  \\<Longrightarrow> row (four_block_mat A1 B1 C1 D1) ?i2 \\<bullet>\n                    col (four_block_mat A2 B2 C2 D2) ?j2 =\n                    row C1 (?i2 - nr1) \\<bullet> col A2 ?j2 +\n                    row D1 (?i2 - nr1) \\<bullet> col C2 ?j2\n\ngoal (1 subgoal):\n 1. four_block_mat A1 B1 C1 D1 * four_block_mat A2 B2 C2 D2 =\n    four_block_mat (A1 * A2 + B1 * C2) (A1 * B2 + B1 * D2)\n     (C1 * A2 + D1 * C2) (C1 * B2 + D1 * D2)", "fix i j"], ["proof (state)\ngoal (1 subgoal):\n 1. four_block_mat A1 B1 C1 D1 * four_block_mat A2 B2 C2 D2 =\n    four_block_mat (A1 * A2 + B1 * C2) (A1 * B2 + B1 * D2)\n     (C1 * A2 + D1 * C2) (C1 * B2 + D1 * D2)", "assume i: \"i < nr1\" and j: \"\\<not> j < nc1\" \"j < nc1 + nc2\""], ["proof (state)\nthis:\n  i < nr1\n  \\<not> j < nc1\n  j < nc1 + nc2\n\ngoal (1 subgoal):\n 1. four_block_mat A1 B1 C1 D1 * four_block_mat A2 B2 C2 D2 =\n    four_block_mat (A1 * A2 + B1 * C2) (A1 * B2 + B1 * D2)\n     (C1 * A2 + D1 * C2) (C1 * B2 + D1 * D2)", "hence j': \"j - nc1 < nc2\""], ["proof (prove)\nusing this:\n  i < nr1\n  \\<not> j < nc1\n  j < nc1 + nc2\n\ngoal (1 subgoal):\n 1. j - nc1 < nc2", "by auto"], ["proof (state)\nthis:\n  j - nc1 < nc2\n\ngoal (1 subgoal):\n 1. four_block_mat A1 B1 C1 D1 * four_block_mat A2 B2 C2 D2 =\n    four_block_mat (A1 * A2 + B1 * C2) (A1 * B2 + B1 * D2)\n     (C1 * A2 + D1 * C2) (C1 * B2 + D1 * D2)", "have \"row ?M1 i \\<bullet> col ?M2 j = row A1 i \\<bullet> col B2 (j - nc1) + row B1 i \\<bullet> col D2 (j - nc1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. row (four_block_mat A1 B1 C1 D1) i \\<bullet>\n    col (four_block_mat A2 B2 C2 D2) j =\n    row A1 i \\<bullet> col B2 (j - nc1) +\n    row B1 i \\<bullet> col D2 (j - nc1)", "unfolding row(1)[OF i] col(2)[OF j]"], ["proof (prove)\ngoal (1 subgoal):\n 1. (row A1 i @\\<^sub>v row B1 i) \\<bullet>\n    (col B2 (j - nc1) @\\<^sub>v col D2 (j - nc1)) =\n    row A1 i \\<bullet> col B2 (j - nc1) +\n    row B1 i \\<bullet> col D2 (j - nc1)", "by (rule scalar_prod_append[of _ n1 _ n2], insert c1 c2 i j' j, auto)"], ["proof (state)\nthis:\n  row (four_block_mat A1 B1 C1 D1) i \\<bullet>\n  col (four_block_mat A2 B2 C2 D2) j =\n  row A1 i \\<bullet> col B2 (j - nc1) + row B1 i \\<bullet> col D2 (j - nc1)\n\ngoal (1 subgoal):\n 1. four_block_mat A1 B1 C1 D1 * four_block_mat A2 B2 C2 D2 =\n    four_block_mat (A1 * A2 + B1 * C2) (A1 * B2 + B1 * D2)\n     (C1 * A2 + D1 * C2) (C1 * B2 + D1 * D2)", "}"], ["proof (state)\nthis:\n  \\<lbrakk>?i2 < nr1; \\<not> ?j2 < nc1; ?j2 < nc1 + nc2\\<rbrakk>\n  \\<Longrightarrow> row (four_block_mat A1 B1 C1 D1) ?i2 \\<bullet>\n                    col (four_block_mat A2 B2 C2 D2) ?j2 =\n                    row A1 ?i2 \\<bullet> col B2 (?j2 - nc1) +\n                    row B1 ?i2 \\<bullet> col D2 (?j2 - nc1)\n\ngoal (1 subgoal):\n 1. four_block_mat A1 B1 C1 D1 * four_block_mat A2 B2 C2 D2 =\n    four_block_mat (A1 * A2 + B1 * C2) (A1 * B2 + B1 * D2)\n     (C1 * A2 + D1 * C2) (C1 * B2 + D1 * D2)", "moreover"], ["proof (state)\nthis:\n  \\<lbrakk>?i2 < nr1; \\<not> ?j2 < nc1; ?j2 < nc1 + nc2\\<rbrakk>\n  \\<Longrightarrow> row (four_block_mat A1 B1 C1 D1) ?i2 \\<bullet>\n                    col (four_block_mat A2 B2 C2 D2) ?j2 =\n                    row A1 ?i2 \\<bullet> col B2 (?j2 - nc1) +\n                    row B1 ?i2 \\<bullet> col D2 (?j2 - nc1)\n\ngoal (1 subgoal):\n 1. four_block_mat A1 B1 C1 D1 * four_block_mat A2 B2 C2 D2 =\n    four_block_mat (A1 * A2 + B1 * C2) (A1 * B2 + B1 * D2)\n     (C1 * A2 + D1 * C2) (C1 * B2 + D1 * D2)", "{"], ["proof (state)\nthis:\n  \\<lbrakk>?i2 < nr1; \\<not> ?j2 < nc1; ?j2 < nc1 + nc2\\<rbrakk>\n  \\<Longrightarrow> row (four_block_mat A1 B1 C1 D1) ?i2 \\<bullet>\n                    col (four_block_mat A2 B2 C2 D2) ?j2 =\n                    row A1 ?i2 \\<bullet> col B2 (?j2 - nc1) +\n                    row B1 ?i2 \\<bullet> col D2 (?j2 - nc1)\n\ngoal (1 subgoal):\n 1. four_block_mat A1 B1 C1 D1 * four_block_mat A2 B2 C2 D2 =\n    four_block_mat (A1 * A2 + B1 * C2) (A1 * B2 + B1 * D2)\n     (C1 * A2 + D1 * C2) (C1 * B2 + D1 * D2)", "fix i j"], ["proof (state)\ngoal (1 subgoal):\n 1. four_block_mat A1 B1 C1 D1 * four_block_mat A2 B2 C2 D2 =\n    four_block_mat (A1 * A2 + B1 * C2) (A1 * B2 + B1 * D2)\n     (C1 * A2 + D1 * C2) (C1 * B2 + D1 * D2)", "assume i: \"\\<not> i < nr1\" \"i < nr1 + nr2\" and j: \"\\<not> j < nc1\" \"j < nc1 + nc2\""], ["proof (state)\nthis:\n  \\<not> i < nr1\n  i < nr1 + nr2\n  \\<not> j < nc1\n  j < nc1 + nc2\n\ngoal (1 subgoal):\n 1. four_block_mat A1 B1 C1 D1 * four_block_mat A2 B2 C2 D2 =\n    four_block_mat (A1 * A2 + B1 * C2) (A1 * B2 + B1 * D2)\n     (C1 * A2 + D1 * C2) (C1 * B2 + D1 * D2)", "hence i': \"i - nr1 < nr2\" and j': \"j - nc1 < nc2\""], ["proof (prove)\nusing this:\n  \\<not> i < nr1\n  i < nr1 + nr2\n  \\<not> j < nc1\n  j < nc1 + nc2\n\ngoal (1 subgoal):\n 1. i - nr1 < nr2 &&& j - nc1 < nc2", "by auto"], ["proof (state)\nthis:\n  i - nr1 < nr2\n  j - nc1 < nc2\n\ngoal (1 subgoal):\n 1. four_block_mat A1 B1 C1 D1 * four_block_mat A2 B2 C2 D2 =\n    four_block_mat (A1 * A2 + B1 * C2) (A1 * B2 + B1 * D2)\n     (C1 * A2 + D1 * C2) (C1 * B2 + D1 * D2)", "have \"row ?M1 i \\<bullet> col ?M2 j = row C1 (i - nr1) \\<bullet> col B2 (j - nc1) + row D1 (i - nr1) \\<bullet> col D2 (j - nc1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. row (four_block_mat A1 B1 C1 D1) i \\<bullet>\n    col (four_block_mat A2 B2 C2 D2) j =\n    row C1 (i - nr1) \\<bullet> col B2 (j - nc1) +\n    row D1 (i - nr1) \\<bullet> col D2 (j - nc1)", "unfolding row(2)[OF i] col(2)[OF j]"], ["proof (prove)\ngoal (1 subgoal):\n 1. (row C1 (i - nr1) @\\<^sub>v row D1 (i - nr1)) \\<bullet>\n    (col B2 (j - nc1) @\\<^sub>v col D2 (j - nc1)) =\n    row C1 (i - nr1) \\<bullet> col B2 (j - nc1) +\n    row D1 (i - nr1) \\<bullet> col D2 (j - nc1)", "by (rule scalar_prod_append[of _ n1 _ n2], insert c1 c2 i i' j' j, auto)"], ["proof (state)\nthis:\n  row (four_block_mat A1 B1 C1 D1) i \\<bullet>\n  col (four_block_mat A2 B2 C2 D2) j =\n  row C1 (i - nr1) \\<bullet> col B2 (j - nc1) +\n  row D1 (i - nr1) \\<bullet> col D2 (j - nc1)\n\ngoal (1 subgoal):\n 1. four_block_mat A1 B1 C1 D1 * four_block_mat A2 B2 C2 D2 =\n    four_block_mat (A1 * A2 + B1 * C2) (A1 * B2 + B1 * D2)\n     (C1 * A2 + D1 * C2) (C1 * B2 + D1 * D2)", "}"], ["proof (state)\nthis:\n  \\<lbrakk>\\<not> ?i2 < nr1; ?i2 < nr1 + nr2; \\<not> ?j2 < nc1;\n   ?j2 < nc1 + nc2\\<rbrakk>\n  \\<Longrightarrow> row (four_block_mat A1 B1 C1 D1) ?i2 \\<bullet>\n                    col (four_block_mat A2 B2 C2 D2) ?j2 =\n                    row C1 (?i2 - nr1) \\<bullet> col B2 (?j2 - nc1) +\n                    row D1 (?i2 - nr1) \\<bullet> col D2 (?j2 - nc1)\n\ngoal (1 subgoal):\n 1. four_block_mat A1 B1 C1 D1 * four_block_mat A2 B2 C2 D2 =\n    four_block_mat (A1 * A2 + B1 * C2) (A1 * B2 + B1 * D2)\n     (C1 * A2 + D1 * C2) (C1 * B2 + D1 * D2)", "ultimately"], ["proof (chain)\npicking this:\n  \\<lbrakk>?i2 < nr1; ?j2 < nc1\\<rbrakk>\n  \\<Longrightarrow> row (four_block_mat A1 B1 C1 D1) ?i2 \\<bullet>\n                    col (four_block_mat A2 B2 C2 D2) ?j2 =\n                    row A1 ?i2 \\<bullet> col A2 ?j2 +\n                    row B1 ?i2 \\<bullet> col C2 ?j2\n  \\<lbrakk>\\<not> ?i2 < nr1; ?i2 < nr1 + nr2; ?j2 < nc1\\<rbrakk>\n  \\<Longrightarrow> row (four_block_mat A1 B1 C1 D1) ?i2 \\<bullet>\n                    col (four_block_mat A2 B2 C2 D2) ?j2 =\n                    row C1 (?i2 - nr1) \\<bullet> col A2 ?j2 +\n                    row D1 (?i2 - nr1) \\<bullet> col C2 ?j2\n  \\<lbrakk>?i2 < nr1; \\<not> ?j2 < nc1; ?j2 < nc1 + nc2\\<rbrakk>\n  \\<Longrightarrow> row (four_block_mat A1 B1 C1 D1) ?i2 \\<bullet>\n                    col (four_block_mat A2 B2 C2 D2) ?j2 =\n                    row A1 ?i2 \\<bullet> col B2 (?j2 - nc1) +\n                    row B1 ?i2 \\<bullet> col D2 (?j2 - nc1)\n  \\<lbrakk>\\<not> ?i2 < nr1; ?i2 < nr1 + nr2; \\<not> ?j2 < nc1;\n   ?j2 < nc1 + nc2\\<rbrakk>\n  \\<Longrightarrow> row (four_block_mat A1 B1 C1 D1) ?i2 \\<bullet>\n                    col (four_block_mat A2 B2 C2 D2) ?j2 =\n                    row C1 (?i2 - nr1) \\<bullet> col B2 (?j2 - nc1) +\n                    row D1 (?i2 - nr1) \\<bullet> col D2 (?j2 - nc1)", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<lbrakk>?i2 < nr1; ?j2 < nc1\\<rbrakk>\n  \\<Longrightarrow> row (four_block_mat A1 B1 C1 D1) ?i2 \\<bullet>\n                    col (four_block_mat A2 B2 C2 D2) ?j2 =\n                    row A1 ?i2 \\<bullet> col A2 ?j2 +\n                    row B1 ?i2 \\<bullet> col C2 ?j2\n  \\<lbrakk>\\<not> ?i2 < nr1; ?i2 < nr1 + nr2; ?j2 < nc1\\<rbrakk>\n  \\<Longrightarrow> row (four_block_mat A1 B1 C1 D1) ?i2 \\<bullet>\n                    col (four_block_mat A2 B2 C2 D2) ?j2 =\n                    row C1 (?i2 - nr1) \\<bullet> col A2 ?j2 +\n                    row D1 (?i2 - nr1) \\<bullet> col C2 ?j2\n  \\<lbrakk>?i2 < nr1; \\<not> ?j2 < nc1; ?j2 < nc1 + nc2\\<rbrakk>\n  \\<Longrightarrow> row (four_block_mat A1 B1 C1 D1) ?i2 \\<bullet>\n                    col (four_block_mat A2 B2 C2 D2) ?j2 =\n                    row A1 ?i2 \\<bullet> col B2 (?j2 - nc1) +\n                    row B1 ?i2 \\<bullet> col D2 (?j2 - nc1)\n  \\<lbrakk>\\<not> ?i2 < nr1; ?i2 < nr1 + nr2; \\<not> ?j2 < nc1;\n   ?j2 < nc1 + nc2\\<rbrakk>\n  \\<Longrightarrow> row (four_block_mat A1 B1 C1 D1) ?i2 \\<bullet>\n                    col (four_block_mat A2 B2 C2 D2) ?j2 =\n                    row C1 (?i2 - nr1) \\<bullet> col B2 (?j2 - nc1) +\n                    row D1 (?i2 - nr1) \\<bullet> col D2 (?j2 - nc1)\n\ngoal (1 subgoal):\n 1. four_block_mat A1 B1 C1 D1 * four_block_mat A2 B2 C2 D2 =\n    four_block_mat (A1 * A2 + B1 * C2) (A1 * B2 + B1 * D2)\n     (C1 * A2 + D1 * C2) (C1 * B2 + D1 * D2)", "by (intro eq_matI, insert c1 c2, auto)"], ["proof (state)\nthis:\n  four_block_mat A1 B1 C1 D1 * four_block_mat A2 B2 C2 D2 =\n  four_block_mat (A1 * A2 + B1 * C2) (A1 * B2 + B1 * D2) (C1 * A2 + D1 * C2)\n   (C1 * B2 + D1 * D2)\n\ngoal:\nNo subgoals!", "qed"], ["", "definition append_rows :: \"'a :: zero mat \\<Rightarrow> 'a mat \\<Rightarrow> 'a mat\" (infixr \"@\\<^sub>r\" 65)where\n  \"A @\\<^sub>r B = four_block_mat A (0\\<^sub>m (dim_row A) 0) B (0\\<^sub>m (dim_row B) 0)\""], ["", "lemma carrier_append_rows[simp,intro]: \"A \\<in> carrier_mat nr1 nc \\<Longrightarrow> B \\<in> carrier_mat nr2 nc \\<Longrightarrow>\n  A @\\<^sub>r B \\<in> carrier_mat (nr1 + nr2) nc\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>A \\<in> carrier_mat nr1 nc; B \\<in> carrier_mat nr2 nc\\<rbrakk>\n    \\<Longrightarrow> A @\\<^sub>r B \\<in> carrier_mat (nr1 + nr2) nc", "unfolding append_rows_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>A \\<in> carrier_mat nr1 nc; B \\<in> carrier_mat nr2 nc\\<rbrakk>\n    \\<Longrightarrow> four_block_mat A (0\\<^sub>m (dim_row A) 0) B\n                       (0\\<^sub>m (dim_row B) 0)\n                      \\<in> carrier_mat (nr1 + nr2) nc", "by auto"], ["", "lemma col_mult2[simp]:\n  assumes A: \"A : carrier_mat nr n\"\n      and B: \"B : carrier_mat n nc\"\n      and j: \"j < nc\"\n  shows \"col (A * B) j = A *\\<^sub>v col B j\""], ["proof (prove)\ngoal (1 subgoal):\n 1. col (A * B) j = A *\\<^sub>v col B j", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>i.\n       i < dim_vec (A *\\<^sub>v col B j) \\<Longrightarrow>\n       col (A * B) j $ i = (A *\\<^sub>v col B j) $ i\n 2. dim_vec (col (A * B) j) = dim_vec (A *\\<^sub>v col B j)", "have AB: \"A * B : carrier_mat nr nc\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A * B \\<in> carrier_mat nr nc", "using A B"], ["proof (prove)\nusing this:\n  A \\<in> carrier_mat nr n\n  B \\<in> carrier_mat n nc\n\ngoal (1 subgoal):\n 1. A * B \\<in> carrier_mat nr nc", "by auto"], ["proof (state)\nthis:\n  A * B \\<in> carrier_mat nr nc\n\ngoal (2 subgoals):\n 1. \\<And>i.\n       i < dim_vec (A *\\<^sub>v col B j) \\<Longrightarrow>\n       col (A * B) j $ i = (A *\\<^sub>v col B j) $ i\n 2. dim_vec (col (A * B) j) = dim_vec (A *\\<^sub>v col B j)", "fix i"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>i.\n       i < dim_vec (A *\\<^sub>v col B j) \\<Longrightarrow>\n       col (A * B) j $ i = (A *\\<^sub>v col B j) $ i\n 2. dim_vec (col (A * B) j) = dim_vec (A *\\<^sub>v col B j)", "assume i: \"i < dim_vec (A *\\<^sub>v col B j)\""], ["proof (state)\nthis:\n  i < dim_vec (A *\\<^sub>v col B j)\n\ngoal (2 subgoals):\n 1. \\<And>i.\n       i < dim_vec (A *\\<^sub>v col B j) \\<Longrightarrow>\n       col (A * B) j $ i = (A *\\<^sub>v col B j) $ i\n 2. dim_vec (col (A * B) j) = dim_vec (A *\\<^sub>v col B j)", "show \"col (A * B) j $ i = (A *\\<^sub>v col B j) $ i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. col (A * B) j $ i = (A *\\<^sub>v col B j) $ i", "using A B AB j i"], ["proof (prove)\nusing this:\n  A \\<in> carrier_mat nr n\n  B \\<in> carrier_mat n nc\n  A * B \\<in> carrier_mat nr nc\n  j < nc\n  i < dim_vec (A *\\<^sub>v col B j)\n\ngoal (1 subgoal):\n 1. col (A * B) j $ i = (A *\\<^sub>v col B j) $ i", "by simp"], ["proof (state)\nthis:\n  col (A * B) j $ i = (A *\\<^sub>v col B j) $ i\n\ngoal (1 subgoal):\n 1. dim_vec (col (A * B) j) = dim_vec (A *\\<^sub>v col B j)", "qed auto"], ["", "lemma mat_vec_as_mat_mat_mult: assumes A: \"A \\<in> carrier_mat nr nc\" \n  and v: \"v \\<in> carrier_vec nc\" \nshows \"A *\\<^sub>v v = col (A * mat_of_cols nc [v]) 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A *\\<^sub>v v = col (A * mat_of_cols nc [v]) 0", "by (subst col_mult2[OF A], insert v, auto)"], ["", "lemma mat_mult_append: assumes A: \"A \\<in> carrier_mat nr1 nc\" \n  and B: \"B \\<in> carrier_mat nr2 nc\" \n  and v: \"v \\<in> carrier_vec nc\" \nshows \"(A @\\<^sub>r B) *\\<^sub>v v = (A *\\<^sub>v v) @\\<^sub>v (B *\\<^sub>v v)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (A @\\<^sub>r B) *\\<^sub>v v = A *\\<^sub>v v @\\<^sub>v B *\\<^sub>v v", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (A @\\<^sub>r B) *\\<^sub>v v = A *\\<^sub>v v @\\<^sub>v B *\\<^sub>v v", "let ?Fb1 = \"four_block_mat A (0\\<^sub>m nr1 0) B (0\\<^sub>m nr2 0)\""], ["proof (state)\ngoal (1 subgoal):\n 1. (A @\\<^sub>r B) *\\<^sub>v v = A *\\<^sub>v v @\\<^sub>v B *\\<^sub>v v", "let ?Fb2 = \"four_block_mat (mat_of_cols nc [v]) (0\\<^sub>m nc 0) (0\\<^sub>m 0 1) (0\\<^sub>m 0 0)\""], ["proof (state)\ngoal (1 subgoal):\n 1. (A @\\<^sub>r B) *\\<^sub>v v = A *\\<^sub>v v @\\<^sub>v B *\\<^sub>v v", "have id: \"?Fb2 = mat_of_cols nc [v]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. four_block_mat (mat_of_cols nc [v]) (0\\<^sub>m nc 0) (0\\<^sub>m 0 1)\n     (0\\<^sub>m 0 0) =\n    mat_of_cols nc [v]", "using v"], ["proof (prove)\nusing this:\n  v \\<in> carrier_vec nc\n\ngoal (1 subgoal):\n 1. four_block_mat (mat_of_cols nc [v]) (0\\<^sub>m nc 0) (0\\<^sub>m 0 1)\n     (0\\<^sub>m 0 0) =\n    mat_of_cols nc [v]", "by auto"], ["proof (state)\nthis:\n  four_block_mat (mat_of_cols nc [v]) (0\\<^sub>m nc 0) (0\\<^sub>m 0 1)\n   (0\\<^sub>m 0 0) =\n  mat_of_cols nc [v]\n\ngoal (1 subgoal):\n 1. (A @\\<^sub>r B) *\\<^sub>v v = A *\\<^sub>v v @\\<^sub>v B *\\<^sub>v v", "have \"(A @\\<^sub>r B) *\\<^sub>v v = col (?Fb1 * ?Fb2) 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (A @\\<^sub>r B) *\\<^sub>v v =\n    col (four_block_mat A (0\\<^sub>m nr1 0) B (0\\<^sub>m nr2 0) *\n         four_block_mat (mat_of_cols nc [v]) (0\\<^sub>m nc 0)\n          (0\\<^sub>m 0 1) (0\\<^sub>m 0 0))\n     0", "unfolding id"], ["proof (prove)\ngoal (1 subgoal):\n 1. (A @\\<^sub>r B) *\\<^sub>v v =\n    col (four_block_mat A (0\\<^sub>m nr1 0) B (0\\<^sub>m nr2 0) *\n         mat_of_cols nc [v])\n     0", "by (subst mat_vec_as_mat_mat_mult[OF _ v], insert A B, auto simp: append_rows_def)"], ["proof (state)\nthis:\n  (A @\\<^sub>r B) *\\<^sub>v v =\n  col (four_block_mat A (0\\<^sub>m nr1 0) B (0\\<^sub>m nr2 0) *\n       four_block_mat (mat_of_cols nc [v]) (0\\<^sub>m nc 0) (0\\<^sub>m 0 1)\n        (0\\<^sub>m 0 0))\n   0\n\ngoal (1 subgoal):\n 1. (A @\\<^sub>r B) *\\<^sub>v v = A *\\<^sub>v v @\\<^sub>v B *\\<^sub>v v", "also"], ["proof (state)\nthis:\n  (A @\\<^sub>r B) *\\<^sub>v v =\n  col (four_block_mat A (0\\<^sub>m nr1 0) B (0\\<^sub>m nr2 0) *\n       four_block_mat (mat_of_cols nc [v]) (0\\<^sub>m nc 0) (0\\<^sub>m 0 1)\n        (0\\<^sub>m 0 0))\n   0\n\ngoal (1 subgoal):\n 1. (A @\\<^sub>r B) *\\<^sub>v v = A *\\<^sub>v v @\\<^sub>v B *\\<^sub>v v", "have \"?Fb1 * ?Fb2 = four_block_mat (A * mat_of_cols nc [v] + 0\\<^sub>m nr1 0 * 0\\<^sub>m 0 1) (A * 0\\<^sub>m nc 0 + 0\\<^sub>m nr1 0 * 0\\<^sub>m 0 0)\n     (B * mat_of_cols nc [v] + 0\\<^sub>m nr2 0 * 0\\<^sub>m 0 1) (B * 0\\<^sub>m nc 0 + 0\\<^sub>m nr2 0 * 0\\<^sub>m 0 0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. four_block_mat A (0\\<^sub>m nr1 0) B (0\\<^sub>m nr2 0) *\n    four_block_mat (mat_of_cols nc [v]) (0\\<^sub>m nc 0) (0\\<^sub>m 0 1)\n     (0\\<^sub>m 0 0) =\n    four_block_mat\n     (A * mat_of_cols nc [v] + 0\\<^sub>m nr1 0 * 0\\<^sub>m 0 1)\n     (A * 0\\<^sub>m nc 0 + 0\\<^sub>m nr1 0 * 0\\<^sub>m 0 0)\n     (B * mat_of_cols nc [v] + 0\\<^sub>m nr2 0 * 0\\<^sub>m 0 1)\n     (B * 0\\<^sub>m nc 0 + 0\\<^sub>m nr2 0 * 0\\<^sub>m 0 0)", "by (rule mult_four_block_mat[OF A _ B], auto)"], ["proof (state)\nthis:\n  four_block_mat A (0\\<^sub>m nr1 0) B (0\\<^sub>m nr2 0) *\n  four_block_mat (mat_of_cols nc [v]) (0\\<^sub>m nc 0) (0\\<^sub>m 0 1)\n   (0\\<^sub>m 0 0) =\n  four_block_mat (A * mat_of_cols nc [v] + 0\\<^sub>m nr1 0 * 0\\<^sub>m 0 1)\n   (A * 0\\<^sub>m nc 0 + 0\\<^sub>m nr1 0 * 0\\<^sub>m 0 0)\n   (B * mat_of_cols nc [v] + 0\\<^sub>m nr2 0 * 0\\<^sub>m 0 1)\n   (B * 0\\<^sub>m nc 0 + 0\\<^sub>m nr2 0 * 0\\<^sub>m 0 0)\n\ngoal (1 subgoal):\n 1. (A @\\<^sub>r B) *\\<^sub>v v = A *\\<^sub>v v @\\<^sub>v B *\\<^sub>v v", "also"], ["proof (state)\nthis:\n  four_block_mat A (0\\<^sub>m nr1 0) B (0\\<^sub>m nr2 0) *\n  four_block_mat (mat_of_cols nc [v]) (0\\<^sub>m nc 0) (0\\<^sub>m 0 1)\n   (0\\<^sub>m 0 0) =\n  four_block_mat (A * mat_of_cols nc [v] + 0\\<^sub>m nr1 0 * 0\\<^sub>m 0 1)\n   (A * 0\\<^sub>m nc 0 + 0\\<^sub>m nr1 0 * 0\\<^sub>m 0 0)\n   (B * mat_of_cols nc [v] + 0\\<^sub>m nr2 0 * 0\\<^sub>m 0 1)\n   (B * 0\\<^sub>m nc 0 + 0\\<^sub>m nr2 0 * 0\\<^sub>m 0 0)\n\ngoal (1 subgoal):\n 1. (A @\\<^sub>r B) *\\<^sub>v v = A *\\<^sub>v v @\\<^sub>v B *\\<^sub>v v", "have \"(A * mat_of_cols nc [v] + 0\\<^sub>m nr1 0 * 0\\<^sub>m 0 1) = A * mat_of_cols nc [v]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A * mat_of_cols nc [v] + 0\\<^sub>m nr1 0 * 0\\<^sub>m 0 1 =\n    A * mat_of_cols nc [v]", "using A v"], ["proof (prove)\nusing this:\n  A \\<in> carrier_mat nr1 nc\n  v \\<in> carrier_vec nc\n\ngoal (1 subgoal):\n 1. A * mat_of_cols nc [v] + 0\\<^sub>m nr1 0 * 0\\<^sub>m 0 1 =\n    A * mat_of_cols nc [v]", "by auto"], ["proof (state)\nthis:\n  A * mat_of_cols nc [v] + 0\\<^sub>m nr1 0 * 0\\<^sub>m 0 1 =\n  A * mat_of_cols nc [v]\n\ngoal (1 subgoal):\n 1. (A @\\<^sub>r B) *\\<^sub>v v = A *\\<^sub>v v @\\<^sub>v B *\\<^sub>v v", "also"], ["proof (state)\nthis:\n  A * mat_of_cols nc [v] + 0\\<^sub>m nr1 0 * 0\\<^sub>m 0 1 =\n  A * mat_of_cols nc [v]\n\ngoal (1 subgoal):\n 1. (A @\\<^sub>r B) *\\<^sub>v v = A *\\<^sub>v v @\\<^sub>v B *\\<^sub>v v", "have \"(B * mat_of_cols nc [v] + 0\\<^sub>m nr2 0 * 0\\<^sub>m 0 1) = B * mat_of_cols nc [v]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. B * mat_of_cols nc [v] + 0\\<^sub>m nr2 0 * 0\\<^sub>m 0 1 =\n    B * mat_of_cols nc [v]", "using B v"], ["proof (prove)\nusing this:\n  B \\<in> carrier_mat nr2 nc\n  v \\<in> carrier_vec nc\n\ngoal (1 subgoal):\n 1. B * mat_of_cols nc [v] + 0\\<^sub>m nr2 0 * 0\\<^sub>m 0 1 =\n    B * mat_of_cols nc [v]", "by auto"], ["proof (state)\nthis:\n  B * mat_of_cols nc [v] + 0\\<^sub>m nr2 0 * 0\\<^sub>m 0 1 =\n  B * mat_of_cols nc [v]\n\ngoal (1 subgoal):\n 1. (A @\\<^sub>r B) *\\<^sub>v v = A *\\<^sub>v v @\\<^sub>v B *\\<^sub>v v", "also"], ["proof (state)\nthis:\n  B * mat_of_cols nc [v] + 0\\<^sub>m nr2 0 * 0\\<^sub>m 0 1 =\n  B * mat_of_cols nc [v]\n\ngoal (1 subgoal):\n 1. (A @\\<^sub>r B) *\\<^sub>v v = A *\\<^sub>v v @\\<^sub>v B *\\<^sub>v v", "have \"(A * 0\\<^sub>m nc 0 + 0\\<^sub>m nr1 0 * 0\\<^sub>m 0 0) = 0\\<^sub>m nr1 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A * 0\\<^sub>m nc 0 + 0\\<^sub>m nr1 0 * 0\\<^sub>m 0 0 = 0\\<^sub>m nr1 0", "using A"], ["proof (prove)\nusing this:\n  A \\<in> carrier_mat nr1 nc\n\ngoal (1 subgoal):\n 1. A * 0\\<^sub>m nc 0 + 0\\<^sub>m nr1 0 * 0\\<^sub>m 0 0 = 0\\<^sub>m nr1 0", "by auto"], ["proof (state)\nthis:\n  A * 0\\<^sub>m nc 0 + 0\\<^sub>m nr1 0 * 0\\<^sub>m 0 0 = 0\\<^sub>m nr1 0\n\ngoal (1 subgoal):\n 1. (A @\\<^sub>r B) *\\<^sub>v v = A *\\<^sub>v v @\\<^sub>v B *\\<^sub>v v", "also"], ["proof (state)\nthis:\n  A * 0\\<^sub>m nc 0 + 0\\<^sub>m nr1 0 * 0\\<^sub>m 0 0 = 0\\<^sub>m nr1 0\n\ngoal (1 subgoal):\n 1. (A @\\<^sub>r B) *\\<^sub>v v = A *\\<^sub>v v @\\<^sub>v B *\\<^sub>v v", "have \"(B * 0\\<^sub>m nc 0 + 0\\<^sub>m nr2 0 * 0\\<^sub>m 0 0) = 0\\<^sub>m nr2 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. B * 0\\<^sub>m nc 0 + 0\\<^sub>m nr2 0 * 0\\<^sub>m 0 0 = 0\\<^sub>m nr2 0", "using B"], ["proof (prove)\nusing this:\n  B \\<in> carrier_mat nr2 nc\n\ngoal (1 subgoal):\n 1. B * 0\\<^sub>m nc 0 + 0\\<^sub>m nr2 0 * 0\\<^sub>m 0 0 = 0\\<^sub>m nr2 0", "by auto"], ["proof (state)\nthis:\n  B * 0\\<^sub>m nc 0 + 0\\<^sub>m nr2 0 * 0\\<^sub>m 0 0 = 0\\<^sub>m nr2 0\n\ngoal (1 subgoal):\n 1. (A @\\<^sub>r B) *\\<^sub>v v = A *\\<^sub>v v @\\<^sub>v B *\\<^sub>v v", "finally"], ["proof (chain)\npicking this:\n  (A @\\<^sub>r B) *\\<^sub>v v =\n  col (four_block_mat (A * mat_of_cols nc [v]) (0\\<^sub>m nr1 0)\n        (B * mat_of_cols nc [v]) (0\\<^sub>m nr2 0))\n   0", "have \"(A @\\<^sub>r B) *\\<^sub>v v = col (four_block_mat (A * mat_of_cols nc [v]) (0\\<^sub>m nr1 0) (B * mat_of_cols nc [v]) (0\\<^sub>m nr2 0)) 0\""], ["proof (prove)\nusing this:\n  (A @\\<^sub>r B) *\\<^sub>v v =\n  col (four_block_mat (A * mat_of_cols nc [v]) (0\\<^sub>m nr1 0)\n        (B * mat_of_cols nc [v]) (0\\<^sub>m nr2 0))\n   0\n\ngoal (1 subgoal):\n 1. (A @\\<^sub>r B) *\\<^sub>v v =\n    col (four_block_mat (A * mat_of_cols nc [v]) (0\\<^sub>m nr1 0)\n          (B * mat_of_cols nc [v]) (0\\<^sub>m nr2 0))\n     0", "."], ["proof (state)\nthis:\n  (A @\\<^sub>r B) *\\<^sub>v v =\n  col (four_block_mat (A * mat_of_cols nc [v]) (0\\<^sub>m nr1 0)\n        (B * mat_of_cols nc [v]) (0\\<^sub>m nr2 0))\n   0\n\ngoal (1 subgoal):\n 1. (A @\\<^sub>r B) *\\<^sub>v v = A *\\<^sub>v v @\\<^sub>v B *\\<^sub>v v", "also"], ["proof (state)\nthis:\n  (A @\\<^sub>r B) *\\<^sub>v v =\n  col (four_block_mat (A * mat_of_cols nc [v]) (0\\<^sub>m nr1 0)\n        (B * mat_of_cols nc [v]) (0\\<^sub>m nr2 0))\n   0\n\ngoal (1 subgoal):\n 1. (A @\\<^sub>r B) *\\<^sub>v v = A *\\<^sub>v v @\\<^sub>v B *\\<^sub>v v", "have \"\\<dots> = col (A * mat_of_cols nc [v]) 0 @\\<^sub>v col (B * mat_of_cols nc [v]) 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. col (four_block_mat (A * mat_of_cols nc [v]) (0\\<^sub>m nr1 0)\n          (B * mat_of_cols nc [v]) (0\\<^sub>m nr2 0))\n     0 =\n    col (A * mat_of_cols nc [v]) 0 @\\<^sub>v col (B * mat_of_cols nc [v]) 0", "by (rule col_four_block_mat, insert A B v, auto)"], ["proof (state)\nthis:\n  col (four_block_mat (A * mat_of_cols nc [v]) (0\\<^sub>m nr1 0)\n        (B * mat_of_cols nc [v]) (0\\<^sub>m nr2 0))\n   0 =\n  col (A * mat_of_cols nc [v]) 0 @\\<^sub>v col (B * mat_of_cols nc [v]) 0\n\ngoal (1 subgoal):\n 1. (A @\\<^sub>r B) *\\<^sub>v v = A *\\<^sub>v v @\\<^sub>v B *\\<^sub>v v", "also"], ["proof (state)\nthis:\n  col (four_block_mat (A * mat_of_cols nc [v]) (0\\<^sub>m nr1 0)\n        (B * mat_of_cols nc [v]) (0\\<^sub>m nr2 0))\n   0 =\n  col (A * mat_of_cols nc [v]) 0 @\\<^sub>v col (B * mat_of_cols nc [v]) 0\n\ngoal (1 subgoal):\n 1. (A @\\<^sub>r B) *\\<^sub>v v = A *\\<^sub>v v @\\<^sub>v B *\\<^sub>v v", "have \"col (A * mat_of_cols nc [v]) 0 = A *\\<^sub>v v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. col (A * mat_of_cols nc [v]) 0 = A *\\<^sub>v v", "by (rule mat_vec_as_mat_mat_mult[symmetric, OF A v])"], ["proof (state)\nthis:\n  col (A * mat_of_cols nc [v]) 0 = A *\\<^sub>v v\n\ngoal (1 subgoal):\n 1. (A @\\<^sub>r B) *\\<^sub>v v = A *\\<^sub>v v @\\<^sub>v B *\\<^sub>v v", "also"], ["proof (state)\nthis:\n  col (A * mat_of_cols nc [v]) 0 = A *\\<^sub>v v\n\ngoal (1 subgoal):\n 1. (A @\\<^sub>r B) *\\<^sub>v v = A *\\<^sub>v v @\\<^sub>v B *\\<^sub>v v", "have \"col (B * mat_of_cols nc [v]) 0 = B *\\<^sub>v v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. col (B * mat_of_cols nc [v]) 0 = B *\\<^sub>v v", "by (rule mat_vec_as_mat_mat_mult[symmetric, OF B v])"], ["proof (state)\nthis:\n  col (B * mat_of_cols nc [v]) 0 = B *\\<^sub>v v\n\ngoal (1 subgoal):\n 1. (A @\\<^sub>r B) *\\<^sub>v v = A *\\<^sub>v v @\\<^sub>v B *\\<^sub>v v", "finally"], ["proof (chain)\npicking this:\n  (A @\\<^sub>r B) *\\<^sub>v v = A *\\<^sub>v v @\\<^sub>v B *\\<^sub>v v", "show ?thesis"], ["proof (prove)\nusing this:\n  (A @\\<^sub>r B) *\\<^sub>v v = A *\\<^sub>v v @\\<^sub>v B *\\<^sub>v v\n\ngoal (1 subgoal):\n 1. (A @\\<^sub>r B) *\\<^sub>v v = A *\\<^sub>v v @\\<^sub>v B *\\<^sub>v v", "."], ["proof (state)\nthis:\n  (A @\\<^sub>r B) *\\<^sub>v v = A *\\<^sub>v v @\\<^sub>v B *\\<^sub>v v\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma append_rows_le: assumes A: \"A \\<in> carrier_mat nr1 nc\" \n  and B: \"B \\<in> carrier_mat nr2 nc\" \n  and a: \"a \\<in> carrier_vec nr1\" \n  and v: \"v \\<in> carrier_vec nc\"\nshows \"(A @\\<^sub>r B) *\\<^sub>v v \\<le> (a @\\<^sub>v b) \\<longleftrightarrow> A *\\<^sub>v v \\<le> a \\<and> B *\\<^sub>v v \\<le> b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((A @\\<^sub>r B) *\\<^sub>v v \\<le> a @\\<^sub>v b) =\n    (A *\\<^sub>v v \\<le> a \\<and> B *\\<^sub>v v \\<le> b)", "unfolding mat_mult_append[OF A B v]"], ["proof (prove)\ngoal (1 subgoal):\n 1. (A *\\<^sub>v v @\\<^sub>v B *\\<^sub>v v \\<le> a @\\<^sub>v b) =\n    (A *\\<^sub>v v \\<le> a \\<and> B *\\<^sub>v v \\<le> b)", "by (rule append_vec_le[OF _ a], insert A v, auto)"], ["", "lemma elements_four_block_mat:\n  assumes c: \"A \\<in> carrier_mat nr1 nc1\" \"B \\<in> carrier_mat nr1 nc2\"\n  \"C \\<in> carrier_mat nr2 nc1\" \"D \\<in> carrier_mat nr2 nc2\"\n  shows\n  \"elements_mat (four_block_mat A B C D) \\<subseteq>\n   elements_mat A \\<union> elements_mat B \\<union> elements_mat C \\<union> elements_mat D\"\n   (is \"elements_mat ?four \\<subseteq> _\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. elements_mat (four_block_mat A B C D)\n    \\<subseteq> elements_mat A \\<union> elements_mat B \\<union>\n                elements_mat C \\<union>\n                elements_mat D", "proof rule"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> elements_mat (four_block_mat A B C D) \\<Longrightarrow>\n       x \\<in> elements_mat A \\<union> elements_mat B \\<union>\n               elements_mat C \\<union>\n               elements_mat D", "fix a"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> elements_mat (four_block_mat A B C D) \\<Longrightarrow>\n       x \\<in> elements_mat A \\<union> elements_mat B \\<union>\n               elements_mat C \\<union>\n               elements_mat D", "assume \"a \\<in> elements_mat ?four\""], ["proof (state)\nthis:\n  a \\<in> elements_mat (four_block_mat A B C D)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> elements_mat (four_block_mat A B C D) \\<Longrightarrow>\n       x \\<in> elements_mat A \\<union> elements_mat B \\<union>\n               elements_mat C \\<union>\n               elements_mat D", "then"], ["proof (chain)\npicking this:\n  a \\<in> elements_mat (four_block_mat A B C D)", "obtain i j\n    where i4: \"i < dim_row ?four\" and j4: \"j < dim_col ?four\" and a: \"a = ?four $$ (i, j)\""], ["proof (prove)\nusing this:\n  a \\<in> elements_mat (four_block_mat A B C D)\n\ngoal (1 subgoal):\n 1. (\\<And>i j.\n        \\<lbrakk>i < dim_row (four_block_mat A B C D);\n         j < dim_col (four_block_mat A B C D);\n         a = four_block_mat A B C D $$ (i, j)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  i < dim_row (four_block_mat A B C D)\n  j < dim_col (four_block_mat A B C D)\n  a = four_block_mat A B C D $$ (i, j)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> elements_mat (four_block_mat A B C D) \\<Longrightarrow>\n       x \\<in> elements_mat A \\<union> elements_mat B \\<union>\n               elements_mat C \\<union>\n               elements_mat D", "show \"a \\<in> elements_mat A \\<union> elements_mat B \\<union> elements_mat C \\<union> elements_mat D\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<in> elements_mat A \\<union> elements_mat B \\<union>\n            elements_mat C \\<union>\n            elements_mat D", "proof (cases \"i < nr1\")"], ["proof (state)\ngoal (2 subgoals):\n 1. i < nr1 \\<Longrightarrow>\n    a \\<in> elements_mat A \\<union> elements_mat B \\<union>\n            elements_mat C \\<union>\n            elements_mat D\n 2. \\<not> i < nr1 \\<Longrightarrow>\n    a \\<in> elements_mat A \\<union> elements_mat B \\<union>\n            elements_mat C \\<union>\n            elements_mat D", "case True"], ["proof (state)\nthis:\n  i < nr1\n\ngoal (2 subgoals):\n 1. i < nr1 \\<Longrightarrow>\n    a \\<in> elements_mat A \\<union> elements_mat B \\<union>\n            elements_mat C \\<union>\n            elements_mat D\n 2. \\<not> i < nr1 \\<Longrightarrow>\n    a \\<in> elements_mat A \\<union> elements_mat B \\<union>\n            elements_mat C \\<union>\n            elements_mat D", "note i1 = this"], ["proof (state)\nthis:\n  i < nr1\n\ngoal (2 subgoals):\n 1. i < nr1 \\<Longrightarrow>\n    a \\<in> elements_mat A \\<union> elements_mat B \\<union>\n            elements_mat C \\<union>\n            elements_mat D\n 2. \\<not> i < nr1 \\<Longrightarrow>\n    a \\<in> elements_mat A \\<union> elements_mat B \\<union>\n            elements_mat C \\<union>\n            elements_mat D", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<in> elements_mat A \\<union> elements_mat B \\<union>\n            elements_mat C \\<union>\n            elements_mat D", "proof (cases \"j < nc1\")"], ["proof (state)\ngoal (2 subgoals):\n 1. j < nc1 \\<Longrightarrow>\n    a \\<in> elements_mat A \\<union> elements_mat B \\<union>\n            elements_mat C \\<union>\n            elements_mat D\n 2. \\<not> j < nc1 \\<Longrightarrow>\n    a \\<in> elements_mat A \\<union> elements_mat B \\<union>\n            elements_mat C \\<union>\n            elements_mat D", "case True"], ["proof (state)\nthis:\n  j < nc1\n\ngoal (2 subgoals):\n 1. j < nc1 \\<Longrightarrow>\n    a \\<in> elements_mat A \\<union> elements_mat B \\<union>\n            elements_mat C \\<union>\n            elements_mat D\n 2. \\<not> j < nc1 \\<Longrightarrow>\n    a \\<in> elements_mat A \\<union> elements_mat B \\<union>\n            elements_mat C \\<union>\n            elements_mat D", "then"], ["proof (chain)\npicking this:\n  j < nc1", "have \"a = A $$ (i,j)\""], ["proof (prove)\nusing this:\n  j < nc1\n\ngoal (1 subgoal):\n 1. a = A $$ (i, j)", "using c i1 a"], ["proof (prove)\nusing this:\n  j < nc1\n  A \\<in> carrier_mat nr1 nc1\n  B \\<in> carrier_mat nr1 nc2\n  C \\<in> carrier_mat nr2 nc1\n  D \\<in> carrier_mat nr2 nc2\n  i < nr1\n  a = four_block_mat A B C D $$ (i, j)\n\ngoal (1 subgoal):\n 1. a = A $$ (i, j)", "by simp"], ["proof (state)\nthis:\n  a = A $$ (i, j)\n\ngoal (2 subgoals):\n 1. j < nc1 \\<Longrightarrow>\n    a \\<in> elements_mat A \\<union> elements_mat B \\<union>\n            elements_mat C \\<union>\n            elements_mat D\n 2. \\<not> j < nc1 \\<Longrightarrow>\n    a \\<in> elements_mat A \\<union> elements_mat B \\<union>\n            elements_mat C \\<union>\n            elements_mat D", "thus ?thesis"], ["proof (prove)\nusing this:\n  a = A $$ (i, j)\n\ngoal (1 subgoal):\n 1. a \\<in> elements_mat A \\<union> elements_mat B \\<union>\n            elements_mat C \\<union>\n            elements_mat D", "using c i1 True"], ["proof (prove)\nusing this:\n  a = A $$ (i, j)\n  A \\<in> carrier_mat nr1 nc1\n  B \\<in> carrier_mat nr1 nc2\n  C \\<in> carrier_mat nr2 nc1\n  D \\<in> carrier_mat nr2 nc2\n  i < nr1\n  j < nc1\n\ngoal (1 subgoal):\n 1. a \\<in> elements_mat A \\<union> elements_mat B \\<union>\n            elements_mat C \\<union>\n            elements_mat D", "by auto"], ["proof (state)\nthis:\n  a \\<in> elements_mat A \\<union> elements_mat B \\<union>\n          elements_mat C \\<union>\n          elements_mat D\n\ngoal (1 subgoal):\n 1. \\<not> j < nc1 \\<Longrightarrow>\n    a \\<in> elements_mat A \\<union> elements_mat B \\<union>\n            elements_mat C \\<union>\n            elements_mat D", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> j < nc1 \\<Longrightarrow>\n    a \\<in> elements_mat A \\<union> elements_mat B \\<union>\n            elements_mat C \\<union>\n            elements_mat D", "case False"], ["proof (state)\nthis:\n  \\<not> j < nc1\n\ngoal (1 subgoal):\n 1. \\<not> j < nc1 \\<Longrightarrow>\n    a \\<in> elements_mat A \\<union> elements_mat B \\<union>\n            elements_mat C \\<union>\n            elements_mat D", "then"], ["proof (chain)\npicking this:\n  \\<not> j < nc1", "have \"a = B $$ (i,j-nc1)\""], ["proof (prove)\nusing this:\n  \\<not> j < nc1\n\ngoal (1 subgoal):\n 1. a = B $$ (i, j - nc1)", "using c i1 a j4"], ["proof (prove)\nusing this:\n  \\<not> j < nc1\n  A \\<in> carrier_mat nr1 nc1\n  B \\<in> carrier_mat nr1 nc2\n  C \\<in> carrier_mat nr2 nc1\n  D \\<in> carrier_mat nr2 nc2\n  i < nr1\n  a = four_block_mat A B C D $$ (i, j)\n  j < dim_col (four_block_mat A B C D)\n\ngoal (1 subgoal):\n 1. a = B $$ (i, j - nc1)", "by simp"], ["proof (state)\nthis:\n  a = B $$ (i, j - nc1)\n\ngoal (1 subgoal):\n 1. \\<not> j < nc1 \\<Longrightarrow>\n    a \\<in> elements_mat A \\<union> elements_mat B \\<union>\n            elements_mat C \\<union>\n            elements_mat D", "moreover"], ["proof (state)\nthis:\n  a = B $$ (i, j - nc1)\n\ngoal (1 subgoal):\n 1. \\<not> j < nc1 \\<Longrightarrow>\n    a \\<in> elements_mat A \\<union> elements_mat B \\<union>\n            elements_mat C \\<union>\n            elements_mat D", "have \"j - nc1 < nc2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. j - nc1 < nc2", "using c j4 False"], ["proof (prove)\nusing this:\n  A \\<in> carrier_mat nr1 nc1\n  B \\<in> carrier_mat nr1 nc2\n  C \\<in> carrier_mat nr2 nc1\n  D \\<in> carrier_mat nr2 nc2\n  j < dim_col (four_block_mat A B C D)\n  \\<not> j < nc1\n\ngoal (1 subgoal):\n 1. j - nc1 < nc2", "by auto"], ["proof (state)\nthis:\n  j - nc1 < nc2\n\ngoal (1 subgoal):\n 1. \\<not> j < nc1 \\<Longrightarrow>\n    a \\<in> elements_mat A \\<union> elements_mat B \\<union>\n            elements_mat C \\<union>\n            elements_mat D", "ultimately"], ["proof (chain)\npicking this:\n  a = B $$ (i, j - nc1)\n  j - nc1 < nc2", "show ?thesis"], ["proof (prove)\nusing this:\n  a = B $$ (i, j - nc1)\n  j - nc1 < nc2\n\ngoal (1 subgoal):\n 1. a \\<in> elements_mat A \\<union> elements_mat B \\<union>\n            elements_mat C \\<union>\n            elements_mat D", "using c i1"], ["proof (prove)\nusing this:\n  a = B $$ (i, j - nc1)\n  j - nc1 < nc2\n  A \\<in> carrier_mat nr1 nc1\n  B \\<in> carrier_mat nr1 nc2\n  C \\<in> carrier_mat nr2 nc1\n  D \\<in> carrier_mat nr2 nc2\n  i < nr1\n\ngoal (1 subgoal):\n 1. a \\<in> elements_mat A \\<union> elements_mat B \\<union>\n            elements_mat C \\<union>\n            elements_mat D", "by auto"], ["proof (state)\nthis:\n  a \\<in> elements_mat A \\<union> elements_mat B \\<union>\n          elements_mat C \\<union>\n          elements_mat D\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  a \\<in> elements_mat A \\<union> elements_mat B \\<union>\n          elements_mat C \\<union>\n          elements_mat D\n\ngoal (1 subgoal):\n 1. \\<not> i < nr1 \\<Longrightarrow>\n    a \\<in> elements_mat A \\<union> elements_mat B \\<union>\n            elements_mat C \\<union>\n            elements_mat D", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> i < nr1 \\<Longrightarrow>\n    a \\<in> elements_mat A \\<union> elements_mat B \\<union>\n            elements_mat C \\<union>\n            elements_mat D", "case False"], ["proof (state)\nthis:\n  \\<not> i < nr1\n\ngoal (1 subgoal):\n 1. \\<not> i < nr1 \\<Longrightarrow>\n    a \\<in> elements_mat A \\<union> elements_mat B \\<union>\n            elements_mat C \\<union>\n            elements_mat D", "note i1 = this"], ["proof (state)\nthis:\n  \\<not> i < nr1\n\ngoal (1 subgoal):\n 1. \\<not> i < nr1 \\<Longrightarrow>\n    a \\<in> elements_mat A \\<union> elements_mat B \\<union>\n            elements_mat C \\<union>\n            elements_mat D", "have i2: \"i - nr1 < nr2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. i - nr1 < nr2", "using c i1 i4"], ["proof (prove)\nusing this:\n  A \\<in> carrier_mat nr1 nc1\n  B \\<in> carrier_mat nr1 nc2\n  C \\<in> carrier_mat nr2 nc1\n  D \\<in> carrier_mat nr2 nc2\n  \\<not> i < nr1\n  i < dim_row (four_block_mat A B C D)\n\ngoal (1 subgoal):\n 1. i - nr1 < nr2", "by auto"], ["proof (state)\nthis:\n  i - nr1 < nr2\n\ngoal (1 subgoal):\n 1. \\<not> i < nr1 \\<Longrightarrow>\n    a \\<in> elements_mat A \\<union> elements_mat B \\<union>\n            elements_mat C \\<union>\n            elements_mat D", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<in> elements_mat A \\<union> elements_mat B \\<union>\n            elements_mat C \\<union>\n            elements_mat D", "proof (cases \"j < nc1\")"], ["proof (state)\ngoal (2 subgoals):\n 1. j < nc1 \\<Longrightarrow>\n    a \\<in> elements_mat A \\<union> elements_mat B \\<union>\n            elements_mat C \\<union>\n            elements_mat D\n 2. \\<not> j < nc1 \\<Longrightarrow>\n    a \\<in> elements_mat A \\<union> elements_mat B \\<union>\n            elements_mat C \\<union>\n            elements_mat D", "case True"], ["proof (state)\nthis:\n  j < nc1\n\ngoal (2 subgoals):\n 1. j < nc1 \\<Longrightarrow>\n    a \\<in> elements_mat A \\<union> elements_mat B \\<union>\n            elements_mat C \\<union>\n            elements_mat D\n 2. \\<not> j < nc1 \\<Longrightarrow>\n    a \\<in> elements_mat A \\<union> elements_mat B \\<union>\n            elements_mat C \\<union>\n            elements_mat D", "then"], ["proof (chain)\npicking this:\n  j < nc1", "have \"a = C $$ (i-nr1,j)\""], ["proof (prove)\nusing this:\n  j < nc1\n\ngoal (1 subgoal):\n 1. a = C $$ (i - nr1, j)", "using c i2 a i1"], ["proof (prove)\nusing this:\n  j < nc1\n  A \\<in> carrier_mat nr1 nc1\n  B \\<in> carrier_mat nr1 nc2\n  C \\<in> carrier_mat nr2 nc1\n  D \\<in> carrier_mat nr2 nc2\n  i - nr1 < nr2\n  a = four_block_mat A B C D $$ (i, j)\n  \\<not> i < nr1\n\ngoal (1 subgoal):\n 1. a = C $$ (i - nr1, j)", "by simp"], ["proof (state)\nthis:\n  a = C $$ (i - nr1, j)\n\ngoal (2 subgoals):\n 1. j < nc1 \\<Longrightarrow>\n    a \\<in> elements_mat A \\<union> elements_mat B \\<union>\n            elements_mat C \\<union>\n            elements_mat D\n 2. \\<not> j < nc1 \\<Longrightarrow>\n    a \\<in> elements_mat A \\<union> elements_mat B \\<union>\n            elements_mat C \\<union>\n            elements_mat D", "thus ?thesis"], ["proof (prove)\nusing this:\n  a = C $$ (i - nr1, j)\n\ngoal (1 subgoal):\n 1. a \\<in> elements_mat A \\<union> elements_mat B \\<union>\n            elements_mat C \\<union>\n            elements_mat D", "using c i2 True"], ["proof (prove)\nusing this:\n  a = C $$ (i - nr1, j)\n  A \\<in> carrier_mat nr1 nc1\n  B \\<in> carrier_mat nr1 nc2\n  C \\<in> carrier_mat nr2 nc1\n  D \\<in> carrier_mat nr2 nc2\n  i - nr1 < nr2\n  j < nc1\n\ngoal (1 subgoal):\n 1. a \\<in> elements_mat A \\<union> elements_mat B \\<union>\n            elements_mat C \\<union>\n            elements_mat D", "by auto"], ["proof (state)\nthis:\n  a \\<in> elements_mat A \\<union> elements_mat B \\<union>\n          elements_mat C \\<union>\n          elements_mat D\n\ngoal (1 subgoal):\n 1. \\<not> j < nc1 \\<Longrightarrow>\n    a \\<in> elements_mat A \\<union> elements_mat B \\<union>\n            elements_mat C \\<union>\n            elements_mat D", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> j < nc1 \\<Longrightarrow>\n    a \\<in> elements_mat A \\<union> elements_mat B \\<union>\n            elements_mat C \\<union>\n            elements_mat D", "case False"], ["proof (state)\nthis:\n  \\<not> j < nc1\n\ngoal (1 subgoal):\n 1. \\<not> j < nc1 \\<Longrightarrow>\n    a \\<in> elements_mat A \\<union> elements_mat B \\<union>\n            elements_mat C \\<union>\n            elements_mat D", "then"], ["proof (chain)\npicking this:\n  \\<not> j < nc1", "have \"a = D $$ (i-nr1,j-nc1)\""], ["proof (prove)\nusing this:\n  \\<not> j < nc1\n\ngoal (1 subgoal):\n 1. a = D $$ (i - nr1, j - nc1)", "using c i2 a i1 j4"], ["proof (prove)\nusing this:\n  \\<not> j < nc1\n  A \\<in> carrier_mat nr1 nc1\n  B \\<in> carrier_mat nr1 nc2\n  C \\<in> carrier_mat nr2 nc1\n  D \\<in> carrier_mat nr2 nc2\n  i - nr1 < nr2\n  a = four_block_mat A B C D $$ (i, j)\n  \\<not> i < nr1\n  j < dim_col (four_block_mat A B C D)\n\ngoal (1 subgoal):\n 1. a = D $$ (i - nr1, j - nc1)", "by simp"], ["proof (state)\nthis:\n  a = D $$ (i - nr1, j - nc1)\n\ngoal (1 subgoal):\n 1. \\<not> j < nc1 \\<Longrightarrow>\n    a \\<in> elements_mat A \\<union> elements_mat B \\<union>\n            elements_mat C \\<union>\n            elements_mat D", "moreover"], ["proof (state)\nthis:\n  a = D $$ (i - nr1, j - nc1)\n\ngoal (1 subgoal):\n 1. \\<not> j < nc1 \\<Longrightarrow>\n    a \\<in> elements_mat A \\<union> elements_mat B \\<union>\n            elements_mat C \\<union>\n            elements_mat D", "have \"j - nc1 < nc2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. j - nc1 < nc2", "using c j4 False"], ["proof (prove)\nusing this:\n  A \\<in> carrier_mat nr1 nc1\n  B \\<in> carrier_mat nr1 nc2\n  C \\<in> carrier_mat nr2 nc1\n  D \\<in> carrier_mat nr2 nc2\n  j < dim_col (four_block_mat A B C D)\n  \\<not> j < nc1\n\ngoal (1 subgoal):\n 1. j - nc1 < nc2", "by auto"], ["proof (state)\nthis:\n  j - nc1 < nc2\n\ngoal (1 subgoal):\n 1. \\<not> j < nc1 \\<Longrightarrow>\n    a \\<in> elements_mat A \\<union> elements_mat B \\<union>\n            elements_mat C \\<union>\n            elements_mat D", "ultimately"], ["proof (chain)\npicking this:\n  a = D $$ (i - nr1, j - nc1)\n  j - nc1 < nc2", "show ?thesis"], ["proof (prove)\nusing this:\n  a = D $$ (i - nr1, j - nc1)\n  j - nc1 < nc2\n\ngoal (1 subgoal):\n 1. a \\<in> elements_mat A \\<union> elements_mat B \\<union>\n            elements_mat C \\<union>\n            elements_mat D", "using c i2"], ["proof (prove)\nusing this:\n  a = D $$ (i - nr1, j - nc1)\n  j - nc1 < nc2\n  A \\<in> carrier_mat nr1 nc1\n  B \\<in> carrier_mat nr1 nc2\n  C \\<in> carrier_mat nr2 nc1\n  D \\<in> carrier_mat nr2 nc2\n  i - nr1 < nr2\n\ngoal (1 subgoal):\n 1. a \\<in> elements_mat A \\<union> elements_mat B \\<union>\n            elements_mat C \\<union>\n            elements_mat D", "by auto"], ["proof (state)\nthis:\n  a \\<in> elements_mat A \\<union> elements_mat B \\<union>\n          elements_mat C \\<union>\n          elements_mat D\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  a \\<in> elements_mat A \\<union> elements_mat B \\<union>\n          elements_mat C \\<union>\n          elements_mat D\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  a \\<in> elements_mat A \\<union> elements_mat B \\<union>\n          elements_mat C \\<union>\n          elements_mat D\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma assoc_four_block_mat: fixes FB :: \"'a mat \\<Rightarrow> 'a mat \\<Rightarrow> 'a :: zero mat\"\n  defines FB: \"FB \\<equiv> \\<lambda> Bb Cc. four_block_mat Bb (0\\<^sub>m (dim_row Bb) (dim_col Cc)) (0\\<^sub>m (dim_row Cc) (dim_col Bb)) Cc\"\n  shows \"FB A (FB B C) = FB (FB A B) C\" (is \"?L = ?R\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. FB A (FB B C) = FB (FB A B) C", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. FB A (FB B C) = FB (FB A B) C", "let ?ar = \"dim_row A\""], ["proof (state)\ngoal (1 subgoal):\n 1. FB A (FB B C) = FB (FB A B) C", "let ?ac = \"dim_col A\""], ["proof (state)\ngoal (1 subgoal):\n 1. FB A (FB B C) = FB (FB A B) C", "let ?br = \"dim_row B\""], ["proof (state)\ngoal (1 subgoal):\n 1. FB A (FB B C) = FB (FB A B) C", "let ?bc = \"dim_col B\""], ["proof (state)\ngoal (1 subgoal):\n 1. FB A (FB B C) = FB (FB A B) C", "let ?cr = \"dim_row C\""], ["proof (state)\ngoal (1 subgoal):\n 1. FB A (FB B C) = FB (FB A B) C", "let ?cc = \"dim_col C\""], ["proof (state)\ngoal (1 subgoal):\n 1. FB A (FB B C) = FB (FB A B) C", "let ?r = \"?ar + ?br + ?cr\""], ["proof (state)\ngoal (1 subgoal):\n 1. FB A (FB B C) = FB (FB A B) C", "let ?c = \"?ac + ?bc + ?cc\""], ["proof (state)\ngoal (1 subgoal):\n 1. FB A (FB B C) = FB (FB A B) C", "let ?BC = \"FB B C\""], ["proof (state)\ngoal (1 subgoal):\n 1. FB A (FB B C) = FB (FB A B) C", "let ?AB = \"FB A B\""], ["proof (state)\ngoal (1 subgoal):\n 1. FB A (FB B C) = FB (FB A B) C", "have dL: \"dim_row ?L = ?r\" \"dim_col ?L = ?c\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dim_row (FB A (FB B C)) = dim_row A + dim_row B + dim_row C &&&\n    dim_col (FB A (FB B C)) = dim_col A + dim_col B + dim_col C", "unfolding FB"], ["proof (prove)\ngoal (1 subgoal):\n 1. dim_row\n     (four_block_mat A\n       (0\\<^sub>m (dim_row A)\n         (dim_col\n           (four_block_mat B (0\\<^sub>m (dim_row B) (dim_col C))\n             (0\\<^sub>m (dim_row C) (dim_col B)) C)))\n       (0\\<^sub>m\n         (dim_row\n           (four_block_mat B (0\\<^sub>m (dim_row B) (dim_col C))\n             (0\\<^sub>m (dim_row C) (dim_col B)) C))\n         (dim_col A))\n       (four_block_mat B (0\\<^sub>m (dim_row B) (dim_col C))\n         (0\\<^sub>m (dim_row C) (dim_col B)) C)) =\n    dim_row A + dim_row B + dim_row C &&&\n    dim_col\n     (four_block_mat A\n       (0\\<^sub>m (dim_row A)\n         (dim_col\n           (four_block_mat B (0\\<^sub>m (dim_row B) (dim_col C))\n             (0\\<^sub>m (dim_row C) (dim_col B)) C)))\n       (0\\<^sub>m\n         (dim_row\n           (four_block_mat B (0\\<^sub>m (dim_row B) (dim_col C))\n             (0\\<^sub>m (dim_row C) (dim_col B)) C))\n         (dim_col A))\n       (four_block_mat B (0\\<^sub>m (dim_row B) (dim_col C))\n         (0\\<^sub>m (dim_row C) (dim_col B)) C)) =\n    dim_col A + dim_col B + dim_col C", "by auto"], ["proof (state)\nthis:\n  dim_row (FB A (FB B C)) = dim_row A + dim_row B + dim_row C\n  dim_col (FB A (FB B C)) = dim_col A + dim_col B + dim_col C\n\ngoal (1 subgoal):\n 1. FB A (FB B C) = FB (FB A B) C", "have dR: \"dim_row ?R = ?ar + ?br + ?cr\" \"dim_col ?R = ?ac + ?bc + ?cc\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dim_row (FB (FB A B) C) = dim_row A + dim_row B + dim_row C &&&\n    dim_col (FB (FB A B) C) = dim_col A + dim_col B + dim_col C", "unfolding FB"], ["proof (prove)\ngoal (1 subgoal):\n 1. dim_row\n     (four_block_mat\n       (four_block_mat A (0\\<^sub>m (dim_row A) (dim_col B))\n         (0\\<^sub>m (dim_row B) (dim_col A)) B)\n       (0\\<^sub>m\n         (dim_row\n           (four_block_mat A (0\\<^sub>m (dim_row A) (dim_col B))\n             (0\\<^sub>m (dim_row B) (dim_col A)) B))\n         (dim_col C))\n       (0\\<^sub>m (dim_row C)\n         (dim_col\n           (four_block_mat A (0\\<^sub>m (dim_row A) (dim_col B))\n             (0\\<^sub>m (dim_row B) (dim_col A)) B)))\n       C) =\n    dim_row A + dim_row B + dim_row C &&&\n    dim_col\n     (four_block_mat\n       (four_block_mat A (0\\<^sub>m (dim_row A) (dim_col B))\n         (0\\<^sub>m (dim_row B) (dim_col A)) B)\n       (0\\<^sub>m\n         (dim_row\n           (four_block_mat A (0\\<^sub>m (dim_row A) (dim_col B))\n             (0\\<^sub>m (dim_row B) (dim_col A)) B))\n         (dim_col C))\n       (0\\<^sub>m (dim_row C)\n         (dim_col\n           (four_block_mat A (0\\<^sub>m (dim_row A) (dim_col B))\n             (0\\<^sub>m (dim_row B) (dim_col A)) B)))\n       C) =\n    dim_col A + dim_col B + dim_col C", "by auto"], ["proof (state)\nthis:\n  dim_row (FB (FB A B) C) = dim_row A + dim_row B + dim_row C\n  dim_col (FB (FB A B) C) = dim_col A + dim_col B + dim_col C\n\ngoal (1 subgoal):\n 1. FB A (FB B C) = FB (FB A B) C", "have dBC: \"dim_row ?BC = ?br + ?cr\" \"dim_col ?BC = ?bc + ?cc\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dim_row (FB B C) = dim_row B + dim_row C &&&\n    dim_col (FB B C) = dim_col B + dim_col C", "unfolding FB"], ["proof (prove)\ngoal (1 subgoal):\n 1. dim_row\n     (four_block_mat B (0\\<^sub>m (dim_row B) (dim_col C))\n       (0\\<^sub>m (dim_row C) (dim_col B)) C) =\n    dim_row B + dim_row C &&&\n    dim_col\n     (four_block_mat B (0\\<^sub>m (dim_row B) (dim_col C))\n       (0\\<^sub>m (dim_row C) (dim_col B)) C) =\n    dim_col B + dim_col C", "by auto"], ["proof (state)\nthis:\n  dim_row (FB B C) = dim_row B + dim_row C\n  dim_col (FB B C) = dim_col B + dim_col C\n\ngoal (1 subgoal):\n 1. FB A (FB B C) = FB (FB A B) C", "have dAB: \"dim_row ?AB = ?ar + ?br\" \"dim_col ?AB = ?ac + ?bc\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dim_row (FB A B) = dim_row A + dim_row B &&&\n    dim_col (FB A B) = dim_col A + dim_col B", "unfolding FB"], ["proof (prove)\ngoal (1 subgoal):\n 1. dim_row\n     (four_block_mat A (0\\<^sub>m (dim_row A) (dim_col B))\n       (0\\<^sub>m (dim_row B) (dim_col A)) B) =\n    dim_row A + dim_row B &&&\n    dim_col\n     (four_block_mat A (0\\<^sub>m (dim_row A) (dim_col B))\n       (0\\<^sub>m (dim_row B) (dim_col A)) B) =\n    dim_col A + dim_col B", "by auto"], ["proof (state)\nthis:\n  dim_row (FB A B) = dim_row A + dim_row B\n  dim_col (FB A B) = dim_col A + dim_col B\n\ngoal (1 subgoal):\n 1. FB A (FB B C) = FB (FB A B) C", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. FB A (FB B C) = FB (FB A B) C", "proof (intro eq_matI[of ?R ?L, unfolded dL dR, OF _ refl refl])"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>i < dim_row A + dim_row B + dim_row C;\n        j < dim_col A + dim_col B + dim_col C\\<rbrakk>\n       \\<Longrightarrow> FB A (FB B C) $$ (i, j) = FB (FB A B) C $$ (i, j)", "fix i j"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>i < dim_row A + dim_row B + dim_row C;\n        j < dim_col A + dim_col B + dim_col C\\<rbrakk>\n       \\<Longrightarrow> FB A (FB B C) $$ (i, j) = FB (FB A B) C $$ (i, j)", "assume i: \"i < ?r\" and j: \"j < ?c\""], ["proof (state)\nthis:\n  i < dim_row A + dim_row B + dim_row C\n  j < dim_col A + dim_col B + dim_col C\n\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>i < dim_row A + dim_row B + dim_row C;\n        j < dim_col A + dim_col B + dim_col C\\<rbrakk>\n       \\<Longrightarrow> FB A (FB B C) $$ (i, j) = FB (FB A B) C $$ (i, j)", "show \"?L $$ (i,j) = ?R $$ (i,j)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. FB A (FB B C) $$ (i, j) = FB (FB A B) C $$ (i, j)", "proof (cases \"i < ?ar\")"], ["proof (state)\ngoal (2 subgoals):\n 1. i < dim_row A \\<Longrightarrow>\n    FB A (FB B C) $$ (i, j) = FB (FB A B) C $$ (i, j)\n 2. \\<not> i < dim_row A \\<Longrightarrow>\n    FB A (FB B C) $$ (i, j) = FB (FB A B) C $$ (i, j)", "case True"], ["proof (state)\nthis:\n  i < dim_row A\n\ngoal (2 subgoals):\n 1. i < dim_row A \\<Longrightarrow>\n    FB A (FB B C) $$ (i, j) = FB (FB A B) C $$ (i, j)\n 2. \\<not> i < dim_row A \\<Longrightarrow>\n    FB A (FB B C) $$ (i, j) = FB (FB A B) C $$ (i, j)", "note i = this"], ["proof (state)\nthis:\n  i < dim_row A\n\ngoal (2 subgoals):\n 1. i < dim_row A \\<Longrightarrow>\n    FB A (FB B C) $$ (i, j) = FB (FB A B) C $$ (i, j)\n 2. \\<not> i < dim_row A \\<Longrightarrow>\n    FB A (FB B C) $$ (i, j) = FB (FB A B) C $$ (i, j)", "thus ?thesis"], ["proof (prove)\nusing this:\n  i < dim_row A\n\ngoal (1 subgoal):\n 1. FB A (FB B C) $$ (i, j) = FB (FB A B) C $$ (i, j)", "using j"], ["proof (prove)\nusing this:\n  i < dim_row A\n  j < dim_col A + dim_col B + dim_col C\n\ngoal (1 subgoal):\n 1. FB A (FB B C) $$ (i, j) = FB (FB A B) C $$ (i, j)", "by (cases \"j < ?ac\", auto simp: FB)"], ["proof (state)\nthis:\n  FB A (FB B C) $$ (i, j) = FB (FB A B) C $$ (i, j)\n\ngoal (1 subgoal):\n 1. \\<not> i < dim_row A \\<Longrightarrow>\n    FB A (FB B C) $$ (i, j) = FB (FB A B) C $$ (i, j)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> i < dim_row A \\<Longrightarrow>\n    FB A (FB B C) $$ (i, j) = FB (FB A B) C $$ (i, j)", "case False"], ["proof (state)\nthis:\n  \\<not> i < dim_row A\n\ngoal (1 subgoal):\n 1. \\<not> i < dim_row A \\<Longrightarrow>\n    FB A (FB B C) $$ (i, j) = FB (FB A B) C $$ (i, j)", "note ii = this"], ["proof (state)\nthis:\n  \\<not> i < dim_row A\n\ngoal (1 subgoal):\n 1. \\<not> i < dim_row A \\<Longrightarrow>\n    FB A (FB B C) $$ (i, j) = FB (FB A B) C $$ (i, j)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. FB A (FB B C) $$ (i, j) = FB (FB A B) C $$ (i, j)", "proof (cases \"j < ?ac\")"], ["proof (state)\ngoal (2 subgoals):\n 1. j < dim_col A \\<Longrightarrow>\n    FB A (FB B C) $$ (i, j) = FB (FB A B) C $$ (i, j)\n 2. \\<not> j < dim_col A \\<Longrightarrow>\n    FB A (FB B C) $$ (i, j) = FB (FB A B) C $$ (i, j)", "case True"], ["proof (state)\nthis:\n  j < dim_col A\n\ngoal (2 subgoals):\n 1. j < dim_col A \\<Longrightarrow>\n    FB A (FB B C) $$ (i, j) = FB (FB A B) C $$ (i, j)\n 2. \\<not> j < dim_col A \\<Longrightarrow>\n    FB A (FB B C) $$ (i, j) = FB (FB A B) C $$ (i, j)", "with i ii"], ["proof (chain)\npicking this:\n  i < dim_row A + dim_row B + dim_row C\n  \\<not> i < dim_row A\n  j < dim_col A", "show ?thesis"], ["proof (prove)\nusing this:\n  i < dim_row A + dim_row B + dim_row C\n  \\<not> i < dim_row A\n  j < dim_col A\n\ngoal (1 subgoal):\n 1. FB A (FB B C) $$ (i, j) = FB (FB A B) C $$ (i, j)", "unfolding FB"], ["proof (prove)\nusing this:\n  i < dim_row A + dim_row B + dim_row C\n  \\<not> i < dim_row A\n  j < dim_col A\n\ngoal (1 subgoal):\n 1. four_block_mat A\n     (0\\<^sub>m (dim_row A)\n       (dim_col\n         (four_block_mat B (0\\<^sub>m (dim_row B) (dim_col C))\n           (0\\<^sub>m (dim_row C) (dim_col B)) C)))\n     (0\\<^sub>m\n       (dim_row\n         (four_block_mat B (0\\<^sub>m (dim_row B) (dim_col C))\n           (0\\<^sub>m (dim_row C) (dim_col B)) C))\n       (dim_col A))\n     (four_block_mat B (0\\<^sub>m (dim_row B) (dim_col C))\n       (0\\<^sub>m (dim_row C) (dim_col B)) C) $$\n    (i, j) =\n    four_block_mat\n     (four_block_mat A (0\\<^sub>m (dim_row A) (dim_col B))\n       (0\\<^sub>m (dim_row B) (dim_col A)) B)\n     (0\\<^sub>m\n       (dim_row\n         (four_block_mat A (0\\<^sub>m (dim_row A) (dim_col B))\n           (0\\<^sub>m (dim_row B) (dim_col A)) B))\n       (dim_col C))\n     (0\\<^sub>m (dim_row C)\n       (dim_col\n         (four_block_mat A (0\\<^sub>m (dim_row A) (dim_col B))\n           (0\\<^sub>m (dim_row B) (dim_col A)) B)))\n     C $$\n    (i, j)", "by auto"], ["proof (state)\nthis:\n  FB A (FB B C) $$ (i, j) = FB (FB A B) C $$ (i, j)\n\ngoal (1 subgoal):\n 1. \\<not> j < dim_col A \\<Longrightarrow>\n    FB A (FB B C) $$ (i, j) = FB (FB A B) C $$ (i, j)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> j < dim_col A \\<Longrightarrow>\n    FB A (FB B C) $$ (i, j) = FB (FB A B) C $$ (i, j)", "case False"], ["proof (state)\nthis:\n  \\<not> j < dim_col A\n\ngoal (1 subgoal):\n 1. \\<not> j < dim_col A \\<Longrightarrow>\n    FB A (FB B C) $$ (i, j) = FB (FB A B) C $$ (i, j)", "note jj = this"], ["proof (state)\nthis:\n  \\<not> j < dim_col A\n\ngoal (1 subgoal):\n 1. \\<not> j < dim_col A \\<Longrightarrow>\n    FB A (FB B C) $$ (i, j) = FB (FB A B) C $$ (i, j)", "from j jj i ii"], ["proof (chain)\npicking this:\n  j < dim_col A + dim_col B + dim_col C\n  \\<not> j < dim_col A\n  i < dim_row A + dim_row B + dim_row C\n  \\<not> i < dim_row A", "have L: \"?L $$ (i,j) = ?BC $$ (i - ?ar, j - ?ac)\""], ["proof (prove)\nusing this:\n  j < dim_col A + dim_col B + dim_col C\n  \\<not> j < dim_col A\n  i < dim_row A + dim_row B + dim_row C\n  \\<not> i < dim_row A\n\ngoal (1 subgoal):\n 1. FB A (FB B C) $$ (i, j) = FB B C $$ (i - dim_row A, j - dim_col A)", "unfolding FB"], ["proof (prove)\nusing this:\n  j < dim_col A + dim_col B + dim_col C\n  \\<not> j < dim_col A\n  i < dim_row A + dim_row B + dim_row C\n  \\<not> i < dim_row A\n\ngoal (1 subgoal):\n 1. four_block_mat A\n     (0\\<^sub>m (dim_row A)\n       (dim_col\n         (four_block_mat B (0\\<^sub>m (dim_row B) (dim_col C))\n           (0\\<^sub>m (dim_row C) (dim_col B)) C)))\n     (0\\<^sub>m\n       (dim_row\n         (four_block_mat B (0\\<^sub>m (dim_row B) (dim_col C))\n           (0\\<^sub>m (dim_row C) (dim_col B)) C))\n       (dim_col A))\n     (four_block_mat B (0\\<^sub>m (dim_row B) (dim_col C))\n       (0\\<^sub>m (dim_row C) (dim_col B)) C) $$\n    (i, j) =\n    four_block_mat B (0\\<^sub>m (dim_row B) (dim_col C))\n     (0\\<^sub>m (dim_row C) (dim_col B)) C $$\n    (i - dim_row A, j - dim_col A)", "by auto"], ["proof (state)\nthis:\n  FB A (FB B C) $$ (i, j) = FB B C $$ (i - dim_row A, j - dim_col A)\n\ngoal (1 subgoal):\n 1. \\<not> j < dim_col A \\<Longrightarrow>\n    FB A (FB B C) $$ (i, j) = FB (FB A B) C $$ (i, j)", "have R: \"?R $$ (i,j) = ?BC $$ (i - ?ar, j - ?ac)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. FB (FB A B) C $$ (i, j) = FB B C $$ (i - dim_row A, j - dim_col A)", "using ii jj i j"], ["proof (prove)\nusing this:\n  \\<not> i < dim_row A\n  \\<not> j < dim_col A\n  i < dim_row A + dim_row B + dim_row C\n  j < dim_col A + dim_col B + dim_col C\n\ngoal (1 subgoal):\n 1. FB (FB A B) C $$ (i, j) = FB B C $$ (i - dim_row A, j - dim_col A)", "by (cases \"i < ?ar + ?br\"; cases \"j < ?ac + ?bc\", auto simp: FB)"], ["proof (state)\nthis:\n  FB (FB A B) C $$ (i, j) = FB B C $$ (i - dim_row A, j - dim_col A)\n\ngoal (1 subgoal):\n 1. \\<not> j < dim_col A \\<Longrightarrow>\n    FB A (FB B C) $$ (i, j) = FB (FB A B) C $$ (i, j)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. FB A (FB B C) $$ (i, j) = FB (FB A B) C $$ (i, j)", "unfolding L R"], ["proof (prove)\ngoal (1 subgoal):\n 1. FB B C $$ (i - dim_row A, j - dim_col A) =\n    FB B C $$ (i - dim_row A, j - dim_col A)", ".."], ["proof (state)\nthis:\n  FB A (FB B C) $$ (i, j) = FB (FB A B) C $$ (i, j)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  FB A (FB B C) $$ (i, j) = FB (FB A B) C $$ (i, j)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  FB A (FB B C) $$ (i, j) = FB (FB A B) C $$ (i, j)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  FB A (FB B C) = FB (FB A B) C\n\ngoal:\nNo subgoals!", "qed"], ["", "definition split_block :: \"'a mat \\<Rightarrow> nat \\<Rightarrow> nat \\<Rightarrow> ('a mat \\<times> 'a mat \\<times> 'a mat \\<times> 'a mat)\"\n  where \"split_block A sr sc = (let\n    nr = dim_row A; nc = dim_col A;\n    nr2 = nr - sr; nc2 = nc - sc;\n    A1 = mat sr sc (\\<lambda> ij. A $$ ij);\n    A2 = mat sr nc2 (\\<lambda> (i,j). A $$ (i,j+sc));\n    A3 = mat nr2 sc (\\<lambda> (i,j). A $$ (i+sr,j));\n    A4 = mat nr2 nc2 (\\<lambda> (i,j). A $$ (i+sr,j+sc))\n  in (A1,A2,A3,A4))\""], ["", "lemma split_block: assumes res: \"split_block A sr1 sc1 = (A1,A2,A3,A4)\"\n  and dims: \"dim_row A = sr1 + sr2\" \"dim_col A = sc1 + sc2\"\n  shows \"A1 \\<in> carrier_mat sr1 sc1\" \"A2 \\<in> carrier_mat sr1 sc2\"\n    \"A3 \\<in> carrier_mat sr2 sc1\" \"A4 \\<in> carrier_mat sr2 sc2\"\n    \"A = four_block_mat A1 A2 A3 A4\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (A1 \\<in> carrier_mat sr1 sc1 &&& A2 \\<in> carrier_mat sr1 sc2) &&&\n    A3 \\<in> carrier_mat sr2 sc1 &&&\n    A4 \\<in> carrier_mat sr2 sc2 &&& A = four_block_mat A1 A2 A3 A4", "using res"], ["proof (prove)\nusing this:\n  split_block A sr1 sc1 = (A1, A2, A3, A4)\n\ngoal (1 subgoal):\n 1. (A1 \\<in> carrier_mat sr1 sc1 &&& A2 \\<in> carrier_mat sr1 sc2) &&&\n    A3 \\<in> carrier_mat sr2 sc1 &&&\n    A4 \\<in> carrier_mat sr2 sc2 &&& A = four_block_mat A1 A2 A3 A4", "unfolding split_block_def Let_def"], ["proof (prove)\nusing this:\n  (mat sr1 sc1 (($$) A),\n   mat sr1 (dim_col A - sc1) (\\<lambda>(i, j). A $$ (i, j + sc1)),\n   mat (dim_row A - sr1) sc1 (\\<lambda>(i, j). A $$ (i + sr1, j)),\n   mat (dim_row A - sr1) (dim_col A - sc1)\n    (\\<lambda>(i, j). A $$ (i + sr1, j + sc1))) =\n  (A1, A2, A3, A4)\n\ngoal (1 subgoal):\n 1. (A1 \\<in> carrier_mat sr1 sc1 &&& A2 \\<in> carrier_mat sr1 sc2) &&&\n    A3 \\<in> carrier_mat sr2 sc1 &&&\n    A4 \\<in> carrier_mat sr2 sc2 &&& A = four_block_mat A1 A2 A3 A4", "by (auto simp: dims)"], ["", "text \\<open>Using @{const four_block_mat} we define block-diagonal matrices.\\<close>"], ["", "fun diag_block_mat :: \"'a :: zero mat list \\<Rightarrow> 'a mat\" where\n  \"diag_block_mat [] = 0\\<^sub>m 0 0\"\n| \"diag_block_mat (A # As) = (let\n     B = diag_block_mat As\n     in four_block_mat A (0\\<^sub>m (dim_row A) (dim_col B)) (0\\<^sub>m (dim_row B) (dim_col A)) B)\""], ["", "lemma dim_diag_block_mat:\n  \"dim_row (diag_block_mat As) = sum_list (map dim_row As)\" (is \"?row\")\n  \"dim_col (diag_block_mat As) = sum_list (map dim_col As)\" (is \"?col\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. dim_row (diag_block_mat As) = sum_list (map dim_row As) &&&\n    dim_col (diag_block_mat As) = sum_list (map dim_col As)", "proof -"], ["proof (state)\ngoal (2 subgoals):\n 1. dim_row (diag_block_mat As) = sum_list (map dim_row As)\n 2. dim_col (diag_block_mat As) = sum_list (map dim_col As)", "have \"?row \\<and> ?col\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dim_row (diag_block_mat As) = sum_list (map dim_row As) \\<and>\n    dim_col (diag_block_mat As) = sum_list (map dim_col As)", "by (induct As, auto simp: Let_def)"], ["proof (state)\nthis:\n  dim_row (diag_block_mat As) = sum_list (map dim_row As) \\<and>\n  dim_col (diag_block_mat As) = sum_list (map dim_col As)\n\ngoal (2 subgoals):\n 1. dim_row (diag_block_mat As) = sum_list (map dim_row As)\n 2. dim_col (diag_block_mat As) = sum_list (map dim_col As)", "thus ?row and ?col"], ["proof (prove)\nusing this:\n  dim_row (diag_block_mat As) = sum_list (map dim_row As) \\<and>\n  dim_col (diag_block_mat As) = sum_list (map dim_col As)\n\ngoal (1 subgoal):\n 1. dim_row (diag_block_mat As) = sum_list (map dim_row As) &&&\n    dim_col (diag_block_mat As) = sum_list (map dim_col As)", "by auto"], ["proof (state)\nthis:\n  dim_row (diag_block_mat As) = sum_list (map dim_row As)\n  dim_col (diag_block_mat As) = sum_list (map dim_col As)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma diag_block_mat_singleton[simp]: \"diag_block_mat [A] = A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. diag_block_mat [A] = A", "by auto"], ["", "lemma diag_block_mat_append: \"diag_block_mat (As @ Bs) =\n  (let A = diag_block_mat As; B = diag_block_mat Bs\n  in four_block_mat A (0\\<^sub>m (dim_row A) (dim_col B)) (0\\<^sub>m (dim_row B) (dim_col A)) B)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. diag_block_mat (As @ Bs) =\n    (let A = diag_block_mat As; B = diag_block_mat Bs\n     in four_block_mat A (0\\<^sub>m (dim_row A) (dim_col B))\n         (0\\<^sub>m (dim_row B) (dim_col A)) B)", "unfolding Let_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. diag_block_mat (As @ Bs) =\n    four_block_mat (diag_block_mat As)\n     (0\\<^sub>m (dim_row (diag_block_mat As)) (dim_col (diag_block_mat Bs)))\n     (0\\<^sub>m (dim_row (diag_block_mat Bs)) (dim_col (diag_block_mat As)))\n     (diag_block_mat Bs)", "proof (induct As)"], ["proof (state)\ngoal (2 subgoals):\n 1. diag_block_mat ([] @ Bs) =\n    four_block_mat (diag_block_mat [])\n     (0\\<^sub>m (dim_row (diag_block_mat [])) (dim_col (diag_block_mat Bs)))\n     (0\\<^sub>m (dim_row (diag_block_mat Bs)) (dim_col (diag_block_mat [])))\n     (diag_block_mat Bs)\n 2. \\<And>a As.\n       diag_block_mat (As @ Bs) =\n       four_block_mat (diag_block_mat As)\n        (0\\<^sub>m (dim_row (diag_block_mat As))\n          (dim_col (diag_block_mat Bs)))\n        (0\\<^sub>m (dim_row (diag_block_mat Bs))\n          (dim_col (diag_block_mat As)))\n        (diag_block_mat Bs) \\<Longrightarrow>\n       diag_block_mat ((a # As) @ Bs) =\n       four_block_mat (diag_block_mat (a # As))\n        (0\\<^sub>m (dim_row (diag_block_mat (a # As)))\n          (dim_col (diag_block_mat Bs)))\n        (0\\<^sub>m (dim_row (diag_block_mat Bs))\n          (dim_col (diag_block_mat (a # As))))\n        (diag_block_mat Bs)", "case (Cons A As)"], ["proof (state)\nthis:\n  diag_block_mat (As @ Bs) =\n  four_block_mat (diag_block_mat As)\n   (0\\<^sub>m (dim_row (diag_block_mat As)) (dim_col (diag_block_mat Bs)))\n   (0\\<^sub>m (dim_row (diag_block_mat Bs)) (dim_col (diag_block_mat As)))\n   (diag_block_mat Bs)\n\ngoal (2 subgoals):\n 1. diag_block_mat ([] @ Bs) =\n    four_block_mat (diag_block_mat [])\n     (0\\<^sub>m (dim_row (diag_block_mat [])) (dim_col (diag_block_mat Bs)))\n     (0\\<^sub>m (dim_row (diag_block_mat Bs)) (dim_col (diag_block_mat [])))\n     (diag_block_mat Bs)\n 2. \\<And>a As.\n       diag_block_mat (As @ Bs) =\n       four_block_mat (diag_block_mat As)\n        (0\\<^sub>m (dim_row (diag_block_mat As))\n          (dim_col (diag_block_mat Bs)))\n        (0\\<^sub>m (dim_row (diag_block_mat Bs))\n          (dim_col (diag_block_mat As)))\n        (diag_block_mat Bs) \\<Longrightarrow>\n       diag_block_mat ((a # As) @ Bs) =\n       four_block_mat (diag_block_mat (a # As))\n        (0\\<^sub>m (dim_row (diag_block_mat (a # As)))\n          (dim_col (diag_block_mat Bs)))\n        (0\\<^sub>m (dim_row (diag_block_mat Bs))\n          (dim_col (diag_block_mat (a # As))))\n        (diag_block_mat Bs)", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. diag_block_mat ((A # As) @ Bs) =\n    four_block_mat (diag_block_mat (A # As))\n     (0\\<^sub>m (dim_row (diag_block_mat (A # As)))\n       (dim_col (diag_block_mat Bs)))\n     (0\\<^sub>m (dim_row (diag_block_mat Bs))\n       (dim_col (diag_block_mat (A # As))))\n     (diag_block_mat Bs)", "unfolding append.simps"], ["proof (prove)\ngoal (1 subgoal):\n 1. diag_block_mat (A # As @ Bs) =\n    four_block_mat (diag_block_mat (A # As))\n     (0\\<^sub>m (dim_row (diag_block_mat (A # As)))\n       (dim_col (diag_block_mat Bs)))\n     (0\\<^sub>m (dim_row (diag_block_mat Bs))\n       (dim_col (diag_block_mat (A # As))))\n     (diag_block_mat Bs)", "unfolding diag_block_mat.simps Let_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. four_block_mat A\n     (0\\<^sub>m (dim_row A) (dim_col (diag_block_mat (As @ Bs))))\n     (0\\<^sub>m (dim_row (diag_block_mat (As @ Bs))) (dim_col A))\n     (diag_block_mat (As @ Bs)) =\n    four_block_mat\n     (four_block_mat A (0\\<^sub>m (dim_row A) (dim_col (diag_block_mat As)))\n       (0\\<^sub>m (dim_row (diag_block_mat As)) (dim_col A))\n       (diag_block_mat As))\n     (0\\<^sub>m\n       (dim_row\n         (four_block_mat A\n           (0\\<^sub>m (dim_row A) (dim_col (diag_block_mat As)))\n           (0\\<^sub>m (dim_row (diag_block_mat As)) (dim_col A))\n           (diag_block_mat As)))\n       (dim_col (diag_block_mat Bs)))\n     (0\\<^sub>m (dim_row (diag_block_mat Bs))\n       (dim_col\n         (four_block_mat A\n           (0\\<^sub>m (dim_row A) (dim_col (diag_block_mat As)))\n           (0\\<^sub>m (dim_row (diag_block_mat As)) (dim_col A))\n           (diag_block_mat As))))\n     (diag_block_mat Bs)", "unfolding Cons"], ["proof (prove)\ngoal (1 subgoal):\n 1. four_block_mat A\n     (0\\<^sub>m (dim_row A)\n       (dim_col\n         (four_block_mat (diag_block_mat As)\n           (0\\<^sub>m (dim_row (diag_block_mat As))\n             (dim_col (diag_block_mat Bs)))\n           (0\\<^sub>m (dim_row (diag_block_mat Bs))\n             (dim_col (diag_block_mat As)))\n           (diag_block_mat Bs))))\n     (0\\<^sub>m\n       (dim_row\n         (four_block_mat (diag_block_mat As)\n           (0\\<^sub>m (dim_row (diag_block_mat As))\n             (dim_col (diag_block_mat Bs)))\n           (0\\<^sub>m (dim_row (diag_block_mat Bs))\n             (dim_col (diag_block_mat As)))\n           (diag_block_mat Bs)))\n       (dim_col A))\n     (four_block_mat (diag_block_mat As)\n       (0\\<^sub>m (dim_row (diag_block_mat As))\n         (dim_col (diag_block_mat Bs)))\n       (0\\<^sub>m (dim_row (diag_block_mat Bs))\n         (dim_col (diag_block_mat As)))\n       (diag_block_mat Bs)) =\n    four_block_mat\n     (four_block_mat A (0\\<^sub>m (dim_row A) (dim_col (diag_block_mat As)))\n       (0\\<^sub>m (dim_row (diag_block_mat As)) (dim_col A))\n       (diag_block_mat As))\n     (0\\<^sub>m\n       (dim_row\n         (four_block_mat A\n           (0\\<^sub>m (dim_row A) (dim_col (diag_block_mat As)))\n           (0\\<^sub>m (dim_row (diag_block_mat As)) (dim_col A))\n           (diag_block_mat As)))\n       (dim_col (diag_block_mat Bs)))\n     (0\\<^sub>m (dim_row (diag_block_mat Bs))\n       (dim_col\n         (four_block_mat A\n           (0\\<^sub>m (dim_row A) (dim_col (diag_block_mat As)))\n           (0\\<^sub>m (dim_row (diag_block_mat As)) (dim_col A))\n           (diag_block_mat As))))\n     (diag_block_mat Bs)", "by (rule assoc_four_block_mat)"], ["proof (state)\nthis:\n  diag_block_mat ((A # As) @ Bs) =\n  four_block_mat (diag_block_mat (A # As))\n   (0\\<^sub>m (dim_row (diag_block_mat (A # As)))\n     (dim_col (diag_block_mat Bs)))\n   (0\\<^sub>m (dim_row (diag_block_mat Bs))\n     (dim_col (diag_block_mat (A # As))))\n   (diag_block_mat Bs)\n\ngoal (1 subgoal):\n 1. diag_block_mat ([] @ Bs) =\n    four_block_mat (diag_block_mat [])\n     (0\\<^sub>m (dim_row (diag_block_mat [])) (dim_col (diag_block_mat Bs)))\n     (0\\<^sub>m (dim_row (diag_block_mat Bs)) (dim_col (diag_block_mat [])))\n     (diag_block_mat Bs)", "qed auto"], ["", "lemma diag_block_mat_last: \"diag_block_mat (As @ [B]) =\n  (let A = diag_block_mat As\n  in four_block_mat A (0\\<^sub>m (dim_row A) (dim_col B)) (0\\<^sub>m (dim_row B) (dim_col A)) B)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. diag_block_mat (As @ [B]) =\n    (let A = diag_block_mat As\n     in four_block_mat A (0\\<^sub>m (dim_row A) (dim_col B))\n         (0\\<^sub>m (dim_row B) (dim_col A)) B)", "unfolding diag_block_mat_append diag_block_mat_singleton"], ["proof (prove)\ngoal (1 subgoal):\n 1. (let A = diag_block_mat As; B = B\n     in four_block_mat A (0\\<^sub>m (dim_row A) (dim_col B))\n         (0\\<^sub>m (dim_row B) (dim_col A)) B) =\n    (let A = diag_block_mat As\n     in four_block_mat A (0\\<^sub>m (dim_row A) (dim_col B))\n         (0\\<^sub>m (dim_row B) (dim_col A)) B)", "by auto"], ["", "lemma diag_block_mat_square:\n  \"Ball (set As) square_mat \\<Longrightarrow> square_mat (diag_block_mat As)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Ball (set As) square_mat \\<Longrightarrow>\n    square_mat (diag_block_mat As)", "by (induct As, auto simp:Let_def)"], ["", "lemma diag_block_one_mat[simp]:\n  \"diag_block_mat (map (\\<lambda>A. 1\\<^sub>m (dim_row A)) As) = (1\\<^sub>m (sum_list (map dim_row As)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. diag_block_mat (map (\\<lambda>A. 1\\<^sub>m (dim_row A)) As) =\n    1\\<^sub>m (sum_list (map dim_row As))", "by (induct As, auto simp: Let_def)"], ["", "lemma elements_diag_block_mat:\n  \"elements_mat (diag_block_mat As) \\<subseteq> {0} \\<union> \\<Union> (set (map elements_mat As))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. elements_mat (diag_block_mat As)\n    \\<subseteq> {0::'a} \\<union> \\<Union> (set (map elements_mat As))", "proof (induct As)"], ["proof (state)\ngoal (2 subgoals):\n 1. elements_mat (diag_block_mat [])\n    \\<subseteq> {0::'a} \\<union> \\<Union> (set (map elements_mat []))\n 2. \\<And>a As.\n       elements_mat (diag_block_mat As)\n       \\<subseteq> {0::'a} \\<union>\n                   \\<Union> (set (map elements_mat As)) \\<Longrightarrow>\n       elements_mat (diag_block_mat (a # As))\n       \\<subseteq> {0::'a} \\<union>\n                   \\<Union> (set (map elements_mat (a # As)))", "case Nil"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. elements_mat (diag_block_mat [])\n    \\<subseteq> {0::'a} \\<union> \\<Union> (set (map elements_mat []))\n 2. \\<And>a As.\n       elements_mat (diag_block_mat As)\n       \\<subseteq> {0::'a} \\<union>\n                   \\<Union> (set (map elements_mat As)) \\<Longrightarrow>\n       elements_mat (diag_block_mat (a # As))\n       \\<subseteq> {0::'a} \\<union>\n                   \\<Union> (set (map elements_mat (a # As)))", "then"], ["proof (chain)\npicking this:", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. elements_mat (diag_block_mat [])\n    \\<subseteq> {0::'a} \\<union> \\<Union> (set (map elements_mat []))", "using dim_diag_block_mat[of Nil]"], ["proof (prove)\nusing this:\n  dim_row (diag_block_mat []) = sum_list (map dim_row [])\n  dim_col (diag_block_mat []) = sum_list (map dim_col [])\n\ngoal (1 subgoal):\n 1. elements_mat (diag_block_mat [])\n    \\<subseteq> {0::'a} \\<union> \\<Union> (set (map elements_mat []))", "by auto"], ["proof (state)\nthis:\n  elements_mat (diag_block_mat [])\n  \\<subseteq> {0::'a} \\<union> \\<Union> (set (map elements_mat []))\n\ngoal (1 subgoal):\n 1. \\<And>a As.\n       elements_mat (diag_block_mat As)\n       \\<subseteq> {0::'a} \\<union>\n                   \\<Union> (set (map elements_mat As)) \\<Longrightarrow>\n       elements_mat (diag_block_mat (a # As))\n       \\<subseteq> {0::'a} \\<union>\n                   \\<Union> (set (map elements_mat (a # As)))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a As.\n       elements_mat (diag_block_mat As)\n       \\<subseteq> {0::'a} \\<union>\n                   \\<Union> (set (map elements_mat As)) \\<Longrightarrow>\n       elements_mat (diag_block_mat (a # As))\n       \\<subseteq> {0::'a} \\<union>\n                   \\<Union> (set (map elements_mat (a # As)))", "case (Cons A As)"], ["proof (state)\nthis:\n  elements_mat (diag_block_mat As)\n  \\<subseteq> {0::'a} \\<union> \\<Union> (set (map elements_mat As))\n\ngoal (1 subgoal):\n 1. \\<And>a As.\n       elements_mat (diag_block_mat As)\n       \\<subseteq> {0::'a} \\<union>\n                   \\<Union> (set (map elements_mat As)) \\<Longrightarrow>\n       elements_mat (diag_block_mat (a # As))\n       \\<subseteq> {0::'a} \\<union>\n                   \\<Union> (set (map elements_mat (a # As)))", "let ?D = \"diag_block_mat As\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a As.\n       elements_mat (diag_block_mat As)\n       \\<subseteq> {0::'a} \\<union>\n                   \\<Union> (set (map elements_mat As)) \\<Longrightarrow>\n       elements_mat (diag_block_mat (a # As))\n       \\<subseteq> {0::'a} \\<union>\n                   \\<Union> (set (map elements_mat (a # As)))", "let ?B = \"0\\<^sub>m (dim_row A) (dim_col ?D)\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a As.\n       elements_mat (diag_block_mat As)\n       \\<subseteq> {0::'a} \\<union>\n                   \\<Union> (set (map elements_mat As)) \\<Longrightarrow>\n       elements_mat (diag_block_mat (a # As))\n       \\<subseteq> {0::'a} \\<union>\n                   \\<Union> (set (map elements_mat (a # As)))", "let ?C = \"0\\<^sub>m (dim_row ?D) (dim_col A)\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a As.\n       elements_mat (diag_block_mat As)\n       \\<subseteq> {0::'a} \\<union>\n                   \\<Union> (set (map elements_mat As)) \\<Longrightarrow>\n       elements_mat (diag_block_mat (a # As))\n       \\<subseteq> {0::'a} \\<union>\n                   \\<Union> (set (map elements_mat (a # As)))", "have A: \"A \\<in> carrier_mat (dim_row A) (dim_col A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A \\<in> carrier_mat (dim_row A) (dim_col A)", "by auto"], ["proof (state)\nthis:\n  A \\<in> carrier_mat (dim_row A) (dim_col A)\n\ngoal (1 subgoal):\n 1. \\<And>a As.\n       elements_mat (diag_block_mat As)\n       \\<subseteq> {0::'a} \\<union>\n                   \\<Union> (set (map elements_mat As)) \\<Longrightarrow>\n       elements_mat (diag_block_mat (a # As))\n       \\<subseteq> {0::'a} \\<union>\n                   \\<Union> (set (map elements_mat (a # As)))", "have B: \"?B \\<in> carrier_mat (dim_row A) (dim_col ?D)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0\\<^sub>m (dim_row A) (dim_col (diag_block_mat As))\n    \\<in> carrier_mat (dim_row A) (dim_col (diag_block_mat As))", "by auto"], ["proof (state)\nthis:\n  0\\<^sub>m (dim_row A) (dim_col (diag_block_mat As))\n  \\<in> carrier_mat (dim_row A) (dim_col (diag_block_mat As))\n\ngoal (1 subgoal):\n 1. \\<And>a As.\n       elements_mat (diag_block_mat As)\n       \\<subseteq> {0::'a} \\<union>\n                   \\<Union> (set (map elements_mat As)) \\<Longrightarrow>\n       elements_mat (diag_block_mat (a # As))\n       \\<subseteq> {0::'a} \\<union>\n                   \\<Union> (set (map elements_mat (a # As)))", "have C: \"?C \\<in> carrier_mat (dim_row ?D) (dim_col A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0\\<^sub>m (dim_row (diag_block_mat As)) (dim_col A)\n    \\<in> carrier_mat (dim_row (diag_block_mat As)) (dim_col A)", "by auto"], ["proof (state)\nthis:\n  0\\<^sub>m (dim_row (diag_block_mat As)) (dim_col A)\n  \\<in> carrier_mat (dim_row (diag_block_mat As)) (dim_col A)\n\ngoal (1 subgoal):\n 1. \\<And>a As.\n       elements_mat (diag_block_mat As)\n       \\<subseteq> {0::'a} \\<union>\n                   \\<Union> (set (map elements_mat As)) \\<Longrightarrow>\n       elements_mat (diag_block_mat (a # As))\n       \\<subseteq> {0::'a} \\<union>\n                   \\<Union> (set (map elements_mat (a # As)))", "have D: \"?D \\<in> carrier_mat (dim_row ?D) (dim_col ?D)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. diag_block_mat As\n    \\<in> carrier_mat (dim_row (diag_block_mat As))\n           (dim_col (diag_block_mat As))", "by auto"], ["proof (state)\nthis:\n  diag_block_mat As\n  \\<in> carrier_mat (dim_row (diag_block_mat As))\n         (dim_col (diag_block_mat As))\n\ngoal (1 subgoal):\n 1. \\<And>a As.\n       elements_mat (diag_block_mat As)\n       \\<subseteq> {0::'a} \\<union>\n                   \\<Union> (set (map elements_mat As)) \\<Longrightarrow>\n       elements_mat (diag_block_mat (a # As))\n       \\<subseteq> {0::'a} \\<union>\n                   \\<Union> (set (map elements_mat (a # As)))", "have\n      \"elements_mat (diag_block_mat (A#As)) \\<subseteq>\n       elements_mat A \\<union> elements_mat ?B \\<union> elements_mat ?C \\<union> elements_mat ?D\""], ["proof (prove)\ngoal (1 subgoal):\n 1. elements_mat (diag_block_mat (A # As))\n    \\<subseteq> elements_mat A \\<union>\n                elements_mat\n                 (0\\<^sub>m (dim_row A)\n                   (dim_col (diag_block_mat As))) \\<union>\n                elements_mat\n                 (0\\<^sub>m (dim_row (diag_block_mat As))\n                   (dim_col A)) \\<union>\n                elements_mat (diag_block_mat As)", "unfolding diag_block_mat.simps Let_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. elements_mat\n     (four_block_mat A (0\\<^sub>m (dim_row A) (dim_col (diag_block_mat As)))\n       (0\\<^sub>m (dim_row (diag_block_mat As)) (dim_col A))\n       (diag_block_mat As))\n    \\<subseteq> elements_mat A \\<union>\n                elements_mat\n                 (0\\<^sub>m (dim_row A)\n                   (dim_col (diag_block_mat As))) \\<union>\n                elements_mat\n                 (0\\<^sub>m (dim_row (diag_block_mat As))\n                   (dim_col A)) \\<union>\n                elements_mat (diag_block_mat As)", "using elements_four_block_mat[OF A B C D] elements_0_mat"], ["proof (prove)\nusing this:\n  elements_mat\n   (four_block_mat A (0\\<^sub>m (dim_row A) (dim_col (diag_block_mat As)))\n     (0\\<^sub>m (dim_row (diag_block_mat As)) (dim_col A))\n     (diag_block_mat As))\n  \\<subseteq> elements_mat A \\<union>\n              elements_mat\n               (0\\<^sub>m (dim_row A)\n                 (dim_col (diag_block_mat As))) \\<union>\n              elements_mat\n               (0\\<^sub>m (dim_row (diag_block_mat As))\n                 (dim_col A)) \\<union>\n              elements_mat (diag_block_mat As)\n  elements_mat (0\\<^sub>m ?nr ?nc) \\<subseteq> {0::?'a}\n\ngoal (1 subgoal):\n 1. elements_mat\n     (four_block_mat A (0\\<^sub>m (dim_row A) (dim_col (diag_block_mat As)))\n       (0\\<^sub>m (dim_row (diag_block_mat As)) (dim_col A))\n       (diag_block_mat As))\n    \\<subseteq> elements_mat A \\<union>\n                elements_mat\n                 (0\\<^sub>m (dim_row A)\n                   (dim_col (diag_block_mat As))) \\<union>\n                elements_mat\n                 (0\\<^sub>m (dim_row (diag_block_mat As))\n                   (dim_col A)) \\<union>\n                elements_mat (diag_block_mat As)", "by auto"], ["proof (state)\nthis:\n  elements_mat (diag_block_mat (A # As))\n  \\<subseteq> elements_mat A \\<union>\n              elements_mat\n               (0\\<^sub>m (dim_row A)\n                 (dim_col (diag_block_mat As))) \\<union>\n              elements_mat\n               (0\\<^sub>m (dim_row (diag_block_mat As))\n                 (dim_col A)) \\<union>\n              elements_mat (diag_block_mat As)\n\ngoal (1 subgoal):\n 1. \\<And>a As.\n       elements_mat (diag_block_mat As)\n       \\<subseteq> {0::'a} \\<union>\n                   \\<Union> (set (map elements_mat As)) \\<Longrightarrow>\n       elements_mat (diag_block_mat (a # As))\n       \\<subseteq> {0::'a} \\<union>\n                   \\<Union> (set (map elements_mat (a # As)))", "also"], ["proof (state)\nthis:\n  elements_mat (diag_block_mat (A # As))\n  \\<subseteq> elements_mat A \\<union>\n              elements_mat\n               (0\\<^sub>m (dim_row A)\n                 (dim_col (diag_block_mat As))) \\<union>\n              elements_mat\n               (0\\<^sub>m (dim_row (diag_block_mat As))\n                 (dim_col A)) \\<union>\n              elements_mat (diag_block_mat As)\n\ngoal (1 subgoal):\n 1. \\<And>a As.\n       elements_mat (diag_block_mat As)\n       \\<subseteq> {0::'a} \\<union>\n                   \\<Union> (set (map elements_mat As)) \\<Longrightarrow>\n       elements_mat (diag_block_mat (a # As))\n       \\<subseteq> {0::'a} \\<union>\n                   \\<Union> (set (map elements_mat (a # As)))", "have \"... \\<subseteq> {0} \\<union> elements_mat A \\<union> elements_mat ?D\""], ["proof (prove)\ngoal (1 subgoal):\n 1. elements_mat A \\<union>\n    elements_mat\n     (0\\<^sub>m (dim_row A) (dim_col (diag_block_mat As))) \\<union>\n    elements_mat\n     (0\\<^sub>m (dim_row (diag_block_mat As)) (dim_col A)) \\<union>\n    elements_mat (diag_block_mat As)\n    \\<subseteq> {0::'a} \\<union> elements_mat A \\<union>\n                elements_mat (diag_block_mat As)", "using elements_0_mat"], ["proof (prove)\nusing this:\n  elements_mat (0\\<^sub>m ?nr ?nc) \\<subseteq> {0::?'a}\n\ngoal (1 subgoal):\n 1. elements_mat A \\<union>\n    elements_mat\n     (0\\<^sub>m (dim_row A) (dim_col (diag_block_mat As))) \\<union>\n    elements_mat\n     (0\\<^sub>m (dim_row (diag_block_mat As)) (dim_col A)) \\<union>\n    elements_mat (diag_block_mat As)\n    \\<subseteq> {0::'a} \\<union> elements_mat A \\<union>\n                elements_mat (diag_block_mat As)", "by auto"], ["proof (state)\nthis:\n  elements_mat A \\<union>\n  elements_mat\n   (0\\<^sub>m (dim_row A) (dim_col (diag_block_mat As))) \\<union>\n  elements_mat\n   (0\\<^sub>m (dim_row (diag_block_mat As)) (dim_col A)) \\<union>\n  elements_mat (diag_block_mat As)\n  \\<subseteq> {0::'a} \\<union> elements_mat A \\<union>\n              elements_mat (diag_block_mat As)\n\ngoal (1 subgoal):\n 1. \\<And>a As.\n       elements_mat (diag_block_mat As)\n       \\<subseteq> {0::'a} \\<union>\n                   \\<Union> (set (map elements_mat As)) \\<Longrightarrow>\n       elements_mat (diag_block_mat (a # As))\n       \\<subseteq> {0::'a} \\<union>\n                   \\<Union> (set (map elements_mat (a # As)))", "finally"], ["proof (chain)\npicking this:\n  elements_mat (diag_block_mat (A # As))\n  \\<subseteq> {0::'a} \\<union> elements_mat A \\<union>\n              elements_mat (diag_block_mat As)", "show ?case"], ["proof (prove)\nusing this:\n  elements_mat (diag_block_mat (A # As))\n  \\<subseteq> {0::'a} \\<union> elements_mat A \\<union>\n              elements_mat (diag_block_mat As)\n\ngoal (1 subgoal):\n 1. elements_mat (diag_block_mat (A # As))\n    \\<subseteq> {0::'a} \\<union> \\<Union> (set (map elements_mat (A # As)))", "using Cons"], ["proof (prove)\nusing this:\n  elements_mat (diag_block_mat (A # As))\n  \\<subseteq> {0::'a} \\<union> elements_mat A \\<union>\n              elements_mat (diag_block_mat As)\n  elements_mat (diag_block_mat As)\n  \\<subseteq> {0::'a} \\<union> \\<Union> (set (map elements_mat As))\n\ngoal (1 subgoal):\n 1. elements_mat (diag_block_mat (A # As))\n    \\<subseteq> {0::'a} \\<union> \\<Union> (set (map elements_mat (A # As)))", "by auto"], ["proof (state)\nthis:\n  elements_mat (diag_block_mat (A # As))\n  \\<subseteq> {0::'a} \\<union> \\<Union> (set (map elements_mat (A # As)))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma diag_block_pow_mat: assumes sq: \"Ball (set As) square_mat\"\n  shows \"diag_block_mat As ^\\<^sub>m n = diag_block_mat (map (\\<lambda> A. A ^\\<^sub>m n) As)\" (is \"?As ^\\<^sub>m _ = _\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. diag_block_mat As ^\\<^sub>m n =\n    diag_block_mat (map (\\<lambda>A. A ^\\<^sub>m n) As)", "proof (induct n)"], ["proof (state)\ngoal (2 subgoals):\n 1. diag_block_mat As ^\\<^sub>m 0 =\n    diag_block_mat (map (\\<lambda>A. A ^\\<^sub>m 0) As)\n 2. \\<And>n.\n       diag_block_mat As ^\\<^sub>m n =\n       diag_block_mat (map (\\<lambda>A. A ^\\<^sub>m n) As) \\<Longrightarrow>\n       diag_block_mat As ^\\<^sub>m Suc n =\n       diag_block_mat (map (\\<lambda>A. A ^\\<^sub>m Suc n) As)", "case 0"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. diag_block_mat As ^\\<^sub>m 0 =\n    diag_block_mat (map (\\<lambda>A. A ^\\<^sub>m 0) As)\n 2. \\<And>n.\n       diag_block_mat As ^\\<^sub>m n =\n       diag_block_mat (map (\\<lambda>A. A ^\\<^sub>m n) As) \\<Longrightarrow>\n       diag_block_mat As ^\\<^sub>m Suc n =\n       diag_block_mat (map (\\<lambda>A. A ^\\<^sub>m Suc n) As)", "have \"?As ^\\<^sub>m 0 = 1\\<^sub>m (dim_row ?As)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. diag_block_mat As ^\\<^sub>m 0 = 1\\<^sub>m (dim_row (diag_block_mat As))", "by simp"], ["proof (state)\nthis:\n  diag_block_mat As ^\\<^sub>m 0 = 1\\<^sub>m (dim_row (diag_block_mat As))\n\ngoal (2 subgoals):\n 1. diag_block_mat As ^\\<^sub>m 0 =\n    diag_block_mat (map (\\<lambda>A. A ^\\<^sub>m 0) As)\n 2. \\<And>n.\n       diag_block_mat As ^\\<^sub>m n =\n       diag_block_mat (map (\\<lambda>A. A ^\\<^sub>m n) As) \\<Longrightarrow>\n       diag_block_mat As ^\\<^sub>m Suc n =\n       diag_block_mat (map (\\<lambda>A. A ^\\<^sub>m Suc n) As)", "also"], ["proof (state)\nthis:\n  diag_block_mat As ^\\<^sub>m 0 = 1\\<^sub>m (dim_row (diag_block_mat As))\n\ngoal (2 subgoals):\n 1. diag_block_mat As ^\\<^sub>m 0 =\n    diag_block_mat (map (\\<lambda>A. A ^\\<^sub>m 0) As)\n 2. \\<And>n.\n       diag_block_mat As ^\\<^sub>m n =\n       diag_block_mat (map (\\<lambda>A. A ^\\<^sub>m n) As) \\<Longrightarrow>\n       diag_block_mat As ^\\<^sub>m Suc n =\n       diag_block_mat (map (\\<lambda>A. A ^\\<^sub>m Suc n) As)", "have \"dim_row ?As = sum_list (map dim_row As)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dim_row (diag_block_mat As) = sum_list (map dim_row As)", "using diag_block_mat_square[OF sq]"], ["proof (prove)\nusing this:\n  square_mat (diag_block_mat As)\n\ngoal (1 subgoal):\n 1. dim_row (diag_block_mat As) = sum_list (map dim_row As)", "unfolding dim_diag_block_mat"], ["proof (prove)\nusing this:\n  square_mat (diag_block_mat As)\n\ngoal (1 subgoal):\n 1. sum_list (map dim_row As) = sum_list (map dim_row As)", "by auto"], ["proof (state)\nthis:\n  dim_row (diag_block_mat As) = sum_list (map dim_row As)\n\ngoal (2 subgoals):\n 1. diag_block_mat As ^\\<^sub>m 0 =\n    diag_block_mat (map (\\<lambda>A. A ^\\<^sub>m 0) As)\n 2. \\<And>n.\n       diag_block_mat As ^\\<^sub>m n =\n       diag_block_mat (map (\\<lambda>A. A ^\\<^sub>m n) As) \\<Longrightarrow>\n       diag_block_mat As ^\\<^sub>m Suc n =\n       diag_block_mat (map (\\<lambda>A. A ^\\<^sub>m Suc n) As)", "also"], ["proof (state)\nthis:\n  dim_row (diag_block_mat As) = sum_list (map dim_row As)\n\ngoal (2 subgoals):\n 1. diag_block_mat As ^\\<^sub>m 0 =\n    diag_block_mat (map (\\<lambda>A. A ^\\<^sub>m 0) As)\n 2. \\<And>n.\n       diag_block_mat As ^\\<^sub>m n =\n       diag_block_mat (map (\\<lambda>A. A ^\\<^sub>m n) As) \\<Longrightarrow>\n       diag_block_mat As ^\\<^sub>m Suc n =\n       diag_block_mat (map (\\<lambda>A. A ^\\<^sub>m Suc n) As)", "have \"1\\<^sub>m \\<dots> = diag_block_mat (map (\\<lambda>A. 1\\<^sub>m (dim_row A)) As)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 1\\<^sub>m (sum_list (map dim_row As)) =\n    diag_block_mat (map (\\<lambda>A. 1\\<^sub>m (dim_row A)) As)", "by simp"], ["proof (state)\nthis:\n  1\\<^sub>m (sum_list (map dim_row As)) =\n  diag_block_mat (map (\\<lambda>A. 1\\<^sub>m (dim_row A)) As)\n\ngoal (2 subgoals):\n 1. diag_block_mat As ^\\<^sub>m 0 =\n    diag_block_mat (map (\\<lambda>A. A ^\\<^sub>m 0) As)\n 2. \\<And>n.\n       diag_block_mat As ^\\<^sub>m n =\n       diag_block_mat (map (\\<lambda>A. A ^\\<^sub>m n) As) \\<Longrightarrow>\n       diag_block_mat As ^\\<^sub>m Suc n =\n       diag_block_mat (map (\\<lambda>A. A ^\\<^sub>m Suc n) As)", "also"], ["proof (state)\nthis:\n  1\\<^sub>m (sum_list (map dim_row As)) =\n  diag_block_mat (map (\\<lambda>A. 1\\<^sub>m (dim_row A)) As)\n\ngoal (2 subgoals):\n 1. diag_block_mat As ^\\<^sub>m 0 =\n    diag_block_mat (map (\\<lambda>A. A ^\\<^sub>m 0) As)\n 2. \\<And>n.\n       diag_block_mat As ^\\<^sub>m n =\n       diag_block_mat (map (\\<lambda>A. A ^\\<^sub>m n) As) \\<Longrightarrow>\n       diag_block_mat As ^\\<^sub>m Suc n =\n       diag_block_mat (map (\\<lambda>A. A ^\\<^sub>m Suc n) As)", "have \"\\<dots> = diag_block_mat (map (\\<lambda> A. A ^\\<^sub>m 0) As)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. diag_block_mat (map (\\<lambda>A. 1\\<^sub>m (dim_row A)) As) =\n    diag_block_mat (map (\\<lambda>A. A ^\\<^sub>m 0) As)", "by simp"], ["proof (state)\nthis:\n  diag_block_mat (map (\\<lambda>A. 1\\<^sub>m (dim_row A)) As) =\n  diag_block_mat (map (\\<lambda>A. A ^\\<^sub>m 0) As)\n\ngoal (2 subgoals):\n 1. diag_block_mat As ^\\<^sub>m 0 =\n    diag_block_mat (map (\\<lambda>A. A ^\\<^sub>m 0) As)\n 2. \\<And>n.\n       diag_block_mat As ^\\<^sub>m n =\n       diag_block_mat (map (\\<lambda>A. A ^\\<^sub>m n) As) \\<Longrightarrow>\n       diag_block_mat As ^\\<^sub>m Suc n =\n       diag_block_mat (map (\\<lambda>A. A ^\\<^sub>m Suc n) As)", "finally"], ["proof (chain)\npicking this:\n  diag_block_mat As ^\\<^sub>m 0 =\n  diag_block_mat (map (\\<lambda>A. A ^\\<^sub>m 0) As)", "show ?case"], ["proof (prove)\nusing this:\n  diag_block_mat As ^\\<^sub>m 0 =\n  diag_block_mat (map (\\<lambda>A. A ^\\<^sub>m 0) As)\n\ngoal (1 subgoal):\n 1. diag_block_mat As ^\\<^sub>m 0 =\n    diag_block_mat (map (\\<lambda>A. A ^\\<^sub>m 0) As)", "."], ["proof (state)\nthis:\n  diag_block_mat As ^\\<^sub>m 0 =\n  diag_block_mat (map (\\<lambda>A. A ^\\<^sub>m 0) As)\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       diag_block_mat As ^\\<^sub>m n =\n       diag_block_mat (map (\\<lambda>A. A ^\\<^sub>m n) As) \\<Longrightarrow>\n       diag_block_mat As ^\\<^sub>m Suc n =\n       diag_block_mat (map (\\<lambda>A. A ^\\<^sub>m Suc n) As)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n.\n       diag_block_mat As ^\\<^sub>m n =\n       diag_block_mat (map (\\<lambda>A. A ^\\<^sub>m n) As) \\<Longrightarrow>\n       diag_block_mat As ^\\<^sub>m Suc n =\n       diag_block_mat (map (\\<lambda>A. A ^\\<^sub>m Suc n) As)", "case (Suc n)"], ["proof (state)\nthis:\n  diag_block_mat As ^\\<^sub>m n =\n  diag_block_mat (map (\\<lambda>A. A ^\\<^sub>m n) As)\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       diag_block_mat As ^\\<^sub>m n =\n       diag_block_mat (map (\\<lambda>A. A ^\\<^sub>m n) As) \\<Longrightarrow>\n       diag_block_mat As ^\\<^sub>m Suc n =\n       diag_block_mat (map (\\<lambda>A. A ^\\<^sub>m Suc n) As)", "let ?An = \"\\<lambda> As. diag_block_mat (map (\\<lambda>A. A ^\\<^sub>m n) As)\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n.\n       diag_block_mat As ^\\<^sub>m n =\n       diag_block_mat (map (\\<lambda>A. A ^\\<^sub>m n) As) \\<Longrightarrow>\n       diag_block_mat As ^\\<^sub>m Suc n =\n       diag_block_mat (map (\\<lambda>A. A ^\\<^sub>m Suc n) As)", "let ?Asn = \"\\<lambda> As. diag_block_mat (map (\\<lambda>A. A ^\\<^sub>m n * A) As)\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n.\n       diag_block_mat As ^\\<^sub>m n =\n       diag_block_mat (map (\\<lambda>A. A ^\\<^sub>m n) As) \\<Longrightarrow>\n       diag_block_mat As ^\\<^sub>m Suc n =\n       diag_block_mat (map (\\<lambda>A. A ^\\<^sub>m Suc n) As)", "from Suc"], ["proof (chain)\npicking this:\n  diag_block_mat As ^\\<^sub>m n =\n  diag_block_mat (map (\\<lambda>A. A ^\\<^sub>m n) As)", "have \"?case = (?An As * diag_block_mat As = ?Asn As)\""], ["proof (prove)\nusing this:\n  diag_block_mat As ^\\<^sub>m n =\n  diag_block_mat (map (\\<lambda>A. A ^\\<^sub>m n) As)\n\ngoal (1 subgoal):\n 1. (diag_block_mat As ^\\<^sub>m Suc n =\n     diag_block_mat (map (\\<lambda>A. A ^\\<^sub>m Suc n) As)) =\n    (diag_block_mat (map (\\<lambda>A. A ^\\<^sub>m n) As) *\n     diag_block_mat As =\n     diag_block_mat (map (\\<lambda>A. A ^\\<^sub>m n * A) As))", "by simp"], ["proof (state)\nthis:\n  (diag_block_mat As ^\\<^sub>m Suc n =\n   diag_block_mat (map (\\<lambda>A. A ^\\<^sub>m Suc n) As)) =\n  (diag_block_mat (map (\\<lambda>A. A ^\\<^sub>m n) As) * diag_block_mat As =\n   diag_block_mat (map (\\<lambda>A. A ^\\<^sub>m n * A) As))\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       diag_block_mat As ^\\<^sub>m n =\n       diag_block_mat (map (\\<lambda>A. A ^\\<^sub>m n) As) \\<Longrightarrow>\n       diag_block_mat As ^\\<^sub>m Suc n =\n       diag_block_mat (map (\\<lambda>A. A ^\\<^sub>m Suc n) As)", "also"], ["proof (state)\nthis:\n  (diag_block_mat As ^\\<^sub>m Suc n =\n   diag_block_mat (map (\\<lambda>A. A ^\\<^sub>m Suc n) As)) =\n  (diag_block_mat (map (\\<lambda>A. A ^\\<^sub>m n) As) * diag_block_mat As =\n   diag_block_mat (map (\\<lambda>A. A ^\\<^sub>m n * A) As))\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       diag_block_mat As ^\\<^sub>m n =\n       diag_block_mat (map (\\<lambda>A. A ^\\<^sub>m n) As) \\<Longrightarrow>\n       diag_block_mat As ^\\<^sub>m Suc n =\n       diag_block_mat (map (\\<lambda>A. A ^\\<^sub>m Suc n) As)", "have \"\\<dots>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. diag_block_mat (map (\\<lambda>A. A ^\\<^sub>m n) As) *\n    diag_block_mat As =\n    diag_block_mat (map (\\<lambda>A. A ^\\<^sub>m n * A) As)", "using sq"], ["proof (prove)\nusing this:\n  Ball (set As) square_mat\n\ngoal (1 subgoal):\n 1. diag_block_mat (map (\\<lambda>A. A ^\\<^sub>m n) As) *\n    diag_block_mat As =\n    diag_block_mat (map (\\<lambda>A. A ^\\<^sub>m n * A) As)", "proof (induct As)"], ["proof (state)\ngoal (2 subgoals):\n 1. Ball (set []) square_mat \\<Longrightarrow>\n    diag_block_mat (map (\\<lambda>A. A ^\\<^sub>m n) []) *\n    diag_block_mat [] =\n    diag_block_mat (map (\\<lambda>A. A ^\\<^sub>m n * A) [])\n 2. \\<And>a As.\n       \\<lbrakk>Ball (set As) square_mat \\<Longrightarrow>\n                diag_block_mat (map (\\<lambda>A. A ^\\<^sub>m n) As) *\n                diag_block_mat As =\n                diag_block_mat (map (\\<lambda>A. A ^\\<^sub>m n * A) As);\n        Ball (set (a # As)) square_mat\\<rbrakk>\n       \\<Longrightarrow> diag_block_mat\n                          (map (\\<lambda>A. A ^\\<^sub>m n) (a # As)) *\n                         diag_block_mat (a # As) =\n                         diag_block_mat\n                          (map (\\<lambda>A. A ^\\<^sub>m n * A) (a # As))", "case (Cons A As)"], ["proof (state)\nthis:\n  \\<forall>a\\<in>set As. square_mat a \\<Longrightarrow>\n  diag_block_mat (map (\\<lambda>A. A ^\\<^sub>m n) As) * diag_block_mat As =\n  diag_block_mat (map (\\<lambda>A. A ^\\<^sub>m n * A) As)\n  \\<forall>a\\<in>set (A # As). square_mat a\n\ngoal (2 subgoals):\n 1. Ball (set []) square_mat \\<Longrightarrow>\n    diag_block_mat (map (\\<lambda>A. A ^\\<^sub>m n) []) *\n    diag_block_mat [] =\n    diag_block_mat (map (\\<lambda>A. A ^\\<^sub>m n * A) [])\n 2. \\<And>a As.\n       \\<lbrakk>Ball (set As) square_mat \\<Longrightarrow>\n                diag_block_mat (map (\\<lambda>A. A ^\\<^sub>m n) As) *\n                diag_block_mat As =\n                diag_block_mat (map (\\<lambda>A. A ^\\<^sub>m n * A) As);\n        Ball (set (a # As)) square_mat\\<rbrakk>\n       \\<Longrightarrow> diag_block_mat\n                          (map (\\<lambda>A. A ^\\<^sub>m n) (a # As)) *\n                         diag_block_mat (a # As) =\n                         diag_block_mat\n                          (map (\\<lambda>A. A ^\\<^sub>m n * A) (a # As))", "hence IH: \"?An As * diag_block_mat As = ?Asn As\"\n      and sq: \"Ball (set As) square_mat\" and A: \"dim_col A = dim_row A\""], ["proof (prove)\nusing this:\n  \\<forall>a\\<in>set As. square_mat a \\<Longrightarrow>\n  diag_block_mat (map (\\<lambda>A. A ^\\<^sub>m n) As) * diag_block_mat As =\n  diag_block_mat (map (\\<lambda>A. A ^\\<^sub>m n * A) As)\n  \\<forall>a\\<in>set (A # As). square_mat a\n\ngoal (1 subgoal):\n 1. diag_block_mat (map (\\<lambda>A. A ^\\<^sub>m n) As) *\n    diag_block_mat As =\n    diag_block_mat (map (\\<lambda>A. A ^\\<^sub>m n * A) As) &&&\n    Ball (set As) square_mat &&& dim_col A = dim_row A", "by auto"], ["proof (state)\nthis:\n  diag_block_mat (map (\\<lambda>A. A ^\\<^sub>m n) As) * diag_block_mat As =\n  diag_block_mat (map (\\<lambda>A. A ^\\<^sub>m n * A) As)\n  Ball (set As) square_mat\n  dim_col A = dim_row A\n\ngoal (2 subgoals):\n 1. Ball (set []) square_mat \\<Longrightarrow>\n    diag_block_mat (map (\\<lambda>A. A ^\\<^sub>m n) []) *\n    diag_block_mat [] =\n    diag_block_mat (map (\\<lambda>A. A ^\\<^sub>m n * A) [])\n 2. \\<And>a As.\n       \\<lbrakk>Ball (set As) square_mat \\<Longrightarrow>\n                diag_block_mat (map (\\<lambda>A. A ^\\<^sub>m n) As) *\n                diag_block_mat As =\n                diag_block_mat (map (\\<lambda>A. A ^\\<^sub>m n * A) As);\n        Ball (set (a # As)) square_mat\\<rbrakk>\n       \\<Longrightarrow> diag_block_mat\n                          (map (\\<lambda>A. A ^\\<^sub>m n) (a # As)) *\n                         diag_block_mat (a # As) =\n                         diag_block_mat\n                          (map (\\<lambda>A. A ^\\<^sub>m n * A) (a # As))", "have sq2: \"Ball (set (List.map (\\<lambda>A. A ^\\<^sub>m n) As)) square_mat\"\n      and sq3: \"Ball (set (List.map (\\<lambda>A. A ^\\<^sub>m n * A) As)) square_mat\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Ball (set (map (\\<lambda>A. A ^\\<^sub>m n) As)) square_mat &&&\n    Ball (set (map (\\<lambda>A. A ^\\<^sub>m n * A) As)) square_mat", "using sq"], ["proof (prove)\nusing this:\n  Ball (set As) square_mat\n\ngoal (1 subgoal):\n 1. Ball (set (map (\\<lambda>A. A ^\\<^sub>m n) As)) square_mat &&&\n    Ball (set (map (\\<lambda>A. A ^\\<^sub>m n * A) As)) square_mat", "by auto"], ["proof (state)\nthis:\n  Ball (set (map (\\<lambda>A. A ^\\<^sub>m n) As)) square_mat\n  Ball (set (map (\\<lambda>A. A ^\\<^sub>m n * A) As)) square_mat\n\ngoal (2 subgoals):\n 1. Ball (set []) square_mat \\<Longrightarrow>\n    diag_block_mat (map (\\<lambda>A. A ^\\<^sub>m n) []) *\n    diag_block_mat [] =\n    diag_block_mat (map (\\<lambda>A. A ^\\<^sub>m n * A) [])\n 2. \\<And>a As.\n       \\<lbrakk>Ball (set As) square_mat \\<Longrightarrow>\n                diag_block_mat (map (\\<lambda>A. A ^\\<^sub>m n) As) *\n                diag_block_mat As =\n                diag_block_mat (map (\\<lambda>A. A ^\\<^sub>m n * A) As);\n        Ball (set (a # As)) square_mat\\<rbrakk>\n       \\<Longrightarrow> diag_block_mat\n                          (map (\\<lambda>A. A ^\\<^sub>m n) (a # As)) *\n                         diag_block_mat (a # As) =\n                         diag_block_mat\n                          (map (\\<lambda>A. A ^\\<^sub>m n * A) (a # As))", "define n1 where \"n1 = dim_row A\""], ["proof (state)\nthis:\n  n1 = dim_row A\n\ngoal (2 subgoals):\n 1. Ball (set []) square_mat \\<Longrightarrow>\n    diag_block_mat (map (\\<lambda>A. A ^\\<^sub>m n) []) *\n    diag_block_mat [] =\n    diag_block_mat (map (\\<lambda>A. A ^\\<^sub>m n * A) [])\n 2. \\<And>a As.\n       \\<lbrakk>Ball (set As) square_mat \\<Longrightarrow>\n                diag_block_mat (map (\\<lambda>A. A ^\\<^sub>m n) As) *\n                diag_block_mat As =\n                diag_block_mat (map (\\<lambda>A. A ^\\<^sub>m n * A) As);\n        Ball (set (a # As)) square_mat\\<rbrakk>\n       \\<Longrightarrow> diag_block_mat\n                          (map (\\<lambda>A. A ^\\<^sub>m n) (a # As)) *\n                         diag_block_mat (a # As) =\n                         diag_block_mat\n                          (map (\\<lambda>A. A ^\\<^sub>m n * A) (a # As))", "define n2 where \"n2 = sum_list (map dim_row As)\""], ["proof (state)\nthis:\n  n2 = sum_list (map dim_row As)\n\ngoal (2 subgoals):\n 1. Ball (set []) square_mat \\<Longrightarrow>\n    diag_block_mat (map (\\<lambda>A. A ^\\<^sub>m n) []) *\n    diag_block_mat [] =\n    diag_block_mat (map (\\<lambda>A. A ^\\<^sub>m n * A) [])\n 2. \\<And>a As.\n       \\<lbrakk>Ball (set As) square_mat \\<Longrightarrow>\n                diag_block_mat (map (\\<lambda>A. A ^\\<^sub>m n) As) *\n                diag_block_mat As =\n                diag_block_mat (map (\\<lambda>A. A ^\\<^sub>m n * A) As);\n        Ball (set (a # As)) square_mat\\<rbrakk>\n       \\<Longrightarrow> diag_block_mat\n                          (map (\\<lambda>A. A ^\\<^sub>m n) (a # As)) *\n                         diag_block_mat (a # As) =\n                         diag_block_mat\n                          (map (\\<lambda>A. A ^\\<^sub>m n * A) (a # As))", "from A"], ["proof (chain)\npicking this:\n  dim_col A = dim_row A", "have A: \"A \\<in> carrier_mat n1 n1\""], ["proof (prove)\nusing this:\n  dim_col A = dim_row A\n\ngoal (1 subgoal):\n 1. A \\<in> carrier_mat n1 n1", "unfolding n1_def carrier_mat_def"], ["proof (prove)\nusing this:\n  dim_col A = dim_row A\n\ngoal (1 subgoal):\n 1. A \\<in> {m. dim_row m = dim_row A \\<and> dim_col m = dim_row A}", "by simp"], ["proof (state)\nthis:\n  A \\<in> carrier_mat n1 n1\n\ngoal (2 subgoals):\n 1. Ball (set []) square_mat \\<Longrightarrow>\n    diag_block_mat (map (\\<lambda>A. A ^\\<^sub>m n) []) *\n    diag_block_mat [] =\n    diag_block_mat (map (\\<lambda>A. A ^\\<^sub>m n * A) [])\n 2. \\<And>a As.\n       \\<lbrakk>Ball (set As) square_mat \\<Longrightarrow>\n                diag_block_mat (map (\\<lambda>A. A ^\\<^sub>m n) As) *\n                diag_block_mat As =\n                diag_block_mat (map (\\<lambda>A. A ^\\<^sub>m n * A) As);\n        Ball (set (a # As)) square_mat\\<rbrakk>\n       \\<Longrightarrow> diag_block_mat\n                          (map (\\<lambda>A. A ^\\<^sub>m n) (a # As)) *\n                         diag_block_mat (a # As) =\n                         diag_block_mat\n                          (map (\\<lambda>A. A ^\\<^sub>m n * A) (a # As))", "have [simp]: \"dim_col (?An As) = n2\" \"dim_row (?An As) = n2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dim_col (diag_block_mat (map (\\<lambda>A. A ^\\<^sub>m n) As)) = n2 &&&\n    dim_row (diag_block_mat (map (\\<lambda>A. A ^\\<^sub>m n) As)) = n2", "unfolding n2_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. dim_col (diag_block_mat (map (\\<lambda>A. A ^\\<^sub>m n) As)) =\n    sum_list (map dim_row As) &&&\n    dim_row (diag_block_mat (map (\\<lambda>A. A ^\\<^sub>m n) As)) =\n    sum_list (map dim_row As)", "using diag_block_mat_square[OF sq2,unfolded square_mat.simps]"], ["proof (prove)\nusing this:\n  dim_col (diag_block_mat (map (\\<lambda>A. A ^\\<^sub>m n) As)) =\n  dim_row (diag_block_mat (map (\\<lambda>A. A ^\\<^sub>m n) As))\n\ngoal (1 subgoal):\n 1. dim_col (diag_block_mat (map (\\<lambda>A. A ^\\<^sub>m n) As)) =\n    sum_list (map dim_row As) &&&\n    dim_row (diag_block_mat (map (\\<lambda>A. A ^\\<^sub>m n) As)) =\n    sum_list (map dim_row As)", "unfolding dim_diag_block_mat map_map"], ["proof (prove)\nusing this:\n  sum_list (map (dim_col \\<circ> (\\<lambda>A. A ^\\<^sub>m n)) As) =\n  sum_list (map (dim_row \\<circ> (\\<lambda>A. A ^\\<^sub>m n)) As)\n\ngoal (1 subgoal):\n 1. sum_list (map (dim_col \\<circ> (\\<lambda>A. A ^\\<^sub>m n)) As) =\n    sum_list (map dim_row As) &&&\n    sum_list (map (dim_row \\<circ> (\\<lambda>A. A ^\\<^sub>m n)) As) =\n    sum_list (map dim_row As)", "by (auto simp:o_def)"], ["proof (state)\nthis:\n  dim_col (diag_block_mat (map (\\<lambda>A. A ^\\<^sub>m n) As)) = n2\n  dim_row (diag_block_mat (map (\\<lambda>A. A ^\\<^sub>m n) As)) = n2\n\ngoal (2 subgoals):\n 1. Ball (set []) square_mat \\<Longrightarrow>\n    diag_block_mat (map (\\<lambda>A. A ^\\<^sub>m n) []) *\n    diag_block_mat [] =\n    diag_block_mat (map (\\<lambda>A. A ^\\<^sub>m n * A) [])\n 2. \\<And>a As.\n       \\<lbrakk>Ball (set As) square_mat \\<Longrightarrow>\n                diag_block_mat (map (\\<lambda>A. A ^\\<^sub>m n) As) *\n                diag_block_mat As =\n                diag_block_mat (map (\\<lambda>A. A ^\\<^sub>m n * A) As);\n        Ball (set (a # As)) square_mat\\<rbrakk>\n       \\<Longrightarrow> diag_block_mat\n                          (map (\\<lambda>A. A ^\\<^sub>m n) (a # As)) *\n                         diag_block_mat (a # As) =\n                         diag_block_mat\n                          (map (\\<lambda>A. A ^\\<^sub>m n * A) (a # As))", "have [simp]: \"dim_col (?Asn As) = n2\" \"dim_row (?Asn As) = n2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dim_col (diag_block_mat (map (\\<lambda>A. A ^\\<^sub>m n * A) As)) =\n    n2 &&&\n    dim_row (diag_block_mat (map (\\<lambda>A. A ^\\<^sub>m n * A) As)) = n2", "unfolding n2_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. dim_col (diag_block_mat (map (\\<lambda>A. A ^\\<^sub>m n * A) As)) =\n    sum_list (map dim_row As) &&&\n    dim_row (diag_block_mat (map (\\<lambda>A. A ^\\<^sub>m n * A) As)) =\n    sum_list (map dim_row As)", "using diag_block_mat_square[OF sq3,unfolded square_mat.simps]"], ["proof (prove)\nusing this:\n  dim_col (diag_block_mat (map (\\<lambda>A. A ^\\<^sub>m n * A) As)) =\n  dim_row (diag_block_mat (map (\\<lambda>A. A ^\\<^sub>m n * A) As))\n\ngoal (1 subgoal):\n 1. dim_col (diag_block_mat (map (\\<lambda>A. A ^\\<^sub>m n * A) As)) =\n    sum_list (map dim_row As) &&&\n    dim_row (diag_block_mat (map (\\<lambda>A. A ^\\<^sub>m n * A) As)) =\n    sum_list (map dim_row As)", "unfolding dim_diag_block_mat map_map"], ["proof (prove)\nusing this:\n  sum_list (map (dim_col \\<circ> (\\<lambda>A. A ^\\<^sub>m n * A)) As) =\n  sum_list (map (dim_row \\<circ> (\\<lambda>A. A ^\\<^sub>m n * A)) As)\n\ngoal (1 subgoal):\n 1. sum_list (map (dim_col \\<circ> (\\<lambda>A. A ^\\<^sub>m n * A)) As) =\n    sum_list (map dim_row As) &&&\n    sum_list (map (dim_row \\<circ> (\\<lambda>A. A ^\\<^sub>m n * A)) As) =\n    sum_list (map dim_row As)", "by (auto simp:o_def)"], ["proof (state)\nthis:\n  dim_col (diag_block_mat (map (\\<lambda>A. A ^\\<^sub>m n * A) As)) = n2\n  dim_row (diag_block_mat (map (\\<lambda>A. A ^\\<^sub>m n * A) As)) = n2\n\ngoal (2 subgoals):\n 1. Ball (set []) square_mat \\<Longrightarrow>\n    diag_block_mat (map (\\<lambda>A. A ^\\<^sub>m n) []) *\n    diag_block_mat [] =\n    diag_block_mat (map (\\<lambda>A. A ^\\<^sub>m n * A) [])\n 2. \\<And>a As.\n       \\<lbrakk>Ball (set As) square_mat \\<Longrightarrow>\n                diag_block_mat (map (\\<lambda>A. A ^\\<^sub>m n) As) *\n                diag_block_mat As =\n                diag_block_mat (map (\\<lambda>A. A ^\\<^sub>m n * A) As);\n        Ball (set (a # As)) square_mat\\<rbrakk>\n       \\<Longrightarrow> diag_block_mat\n                          (map (\\<lambda>A. A ^\\<^sub>m n) (a # As)) *\n                         diag_block_mat (a # As) =\n                         diag_block_mat\n                          (map (\\<lambda>A. A ^\\<^sub>m n * A) (a # As))", "have [simp]:\n      \"dim_row (diag_block_mat As) = n2\"\n      \"dim_col (diag_block_mat As) = n2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dim_row (diag_block_mat As) = n2 &&& dim_col (diag_block_mat As) = n2", "unfolding n2_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. dim_row (diag_block_mat As) = sum_list (map dim_row As) &&&\n    dim_col (diag_block_mat As) = sum_list (map dim_row As)", "using diag_block_mat_square[OF sq,unfolded square_mat.simps]"], ["proof (prove)\nusing this:\n  dim_col (diag_block_mat As) = dim_row (diag_block_mat As)\n\ngoal (1 subgoal):\n 1. dim_row (diag_block_mat As) = sum_list (map dim_row As) &&&\n    dim_col (diag_block_mat As) = sum_list (map dim_row As)", "unfolding dim_diag_block_mat"], ["proof (prove)\nusing this:\n  sum_list (map dim_col As) = sum_list (map dim_row As)\n\ngoal (1 subgoal):\n 1. sum_list (map dim_row As) = sum_list (map dim_row As) &&&\n    sum_list (map dim_col As) = sum_list (map dim_row As)", "by auto"], ["proof (state)\nthis:\n  dim_row (diag_block_mat As) = n2\n  dim_col (diag_block_mat As) = n2\n\ngoal (2 subgoals):\n 1. Ball (set []) square_mat \\<Longrightarrow>\n    diag_block_mat (map (\\<lambda>A. A ^\\<^sub>m n) []) *\n    diag_block_mat [] =\n    diag_block_mat (map (\\<lambda>A. A ^\\<^sub>m n * A) [])\n 2. \\<And>a As.\n       \\<lbrakk>Ball (set As) square_mat \\<Longrightarrow>\n                diag_block_mat (map (\\<lambda>A. A ^\\<^sub>m n) As) *\n                diag_block_mat As =\n                diag_block_mat (map (\\<lambda>A. A ^\\<^sub>m n * A) As);\n        Ball (set (a # As)) square_mat\\<rbrakk>\n       \\<Longrightarrow> diag_block_mat\n                          (map (\\<lambda>A. A ^\\<^sub>m n) (a # As)) *\n                         diag_block_mat (a # As) =\n                         diag_block_mat\n                          (map (\\<lambda>A. A ^\\<^sub>m n * A) (a # As))", "have [simp]: \"diag_block_mat As \\<in> carrier_mat n2 n2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. diag_block_mat As \\<in> carrier_mat n2 n2", "unfolding carrier_mat_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. diag_block_mat As \\<in> {m. dim_row m = n2 \\<and> dim_col m = n2}", "by simp"], ["proof (state)\nthis:\n  diag_block_mat As \\<in> carrier_mat n2 n2\n\ngoal (2 subgoals):\n 1. Ball (set []) square_mat \\<Longrightarrow>\n    diag_block_mat (map (\\<lambda>A. A ^\\<^sub>m n) []) *\n    diag_block_mat [] =\n    diag_block_mat (map (\\<lambda>A. A ^\\<^sub>m n * A) [])\n 2. \\<And>a As.\n       \\<lbrakk>Ball (set As) square_mat \\<Longrightarrow>\n                diag_block_mat (map (\\<lambda>A. A ^\\<^sub>m n) As) *\n                diag_block_mat As =\n                diag_block_mat (map (\\<lambda>A. A ^\\<^sub>m n * A) As);\n        Ball (set (a # As)) square_mat\\<rbrakk>\n       \\<Longrightarrow> diag_block_mat\n                          (map (\\<lambda>A. A ^\\<^sub>m n) (a # As)) *\n                         diag_block_mat (a # As) =\n                         diag_block_mat\n                          (map (\\<lambda>A. A ^\\<^sub>m n * A) (a # As))", "have [simp]: \"?An As \\<in> carrier_mat n2 n2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. diag_block_mat (map (\\<lambda>A. A ^\\<^sub>m n) As)\n    \\<in> carrier_mat n2 n2", "unfolding carrier_mat_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. diag_block_mat (map (\\<lambda>A. A ^\\<^sub>m n) As)\n    \\<in> {m. dim_row m = n2 \\<and> dim_col m = n2}", "by simp"], ["proof (state)\nthis:\n  diag_block_mat (map (\\<lambda>A. A ^\\<^sub>m n) As)\n  \\<in> carrier_mat n2 n2\n\ngoal (2 subgoals):\n 1. Ball (set []) square_mat \\<Longrightarrow>\n    diag_block_mat (map (\\<lambda>A. A ^\\<^sub>m n) []) *\n    diag_block_mat [] =\n    diag_block_mat (map (\\<lambda>A. A ^\\<^sub>m n * A) [])\n 2. \\<And>a As.\n       \\<lbrakk>Ball (set As) square_mat \\<Longrightarrow>\n                diag_block_mat (map (\\<lambda>A. A ^\\<^sub>m n) As) *\n                diag_block_mat As =\n                diag_block_mat (map (\\<lambda>A. A ^\\<^sub>m n * A) As);\n        Ball (set (a # As)) square_mat\\<rbrakk>\n       \\<Longrightarrow> diag_block_mat\n                          (map (\\<lambda>A. A ^\\<^sub>m n) (a # As)) *\n                         diag_block_mat (a # As) =\n                         diag_block_mat\n                          (map (\\<lambda>A. A ^\\<^sub>m n * A) (a # As))", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. diag_block_mat (map (\\<lambda>A. A ^\\<^sub>m n) (A # As)) *\n    diag_block_mat (A # As) =\n    diag_block_mat (map (\\<lambda>A. A ^\\<^sub>m n * A) (A # As))", "unfolding diag_block_mat.simps Let_def list.simps"], ["proof (prove)\ngoal (1 subgoal):\n 1. four_block_mat (A ^\\<^sub>m n)\n     (0\\<^sub>m (dim_row (A ^\\<^sub>m n))\n       (dim_col (diag_block_mat (map (\\<lambda>A. A ^\\<^sub>m n) As))))\n     (0\\<^sub>m\n       (dim_row (diag_block_mat (map (\\<lambda>A. A ^\\<^sub>m n) As)))\n       (dim_col (A ^\\<^sub>m n)))\n     (diag_block_mat (map (\\<lambda>A. A ^\\<^sub>m n) As)) *\n    four_block_mat A (0\\<^sub>m (dim_row A) (dim_col (diag_block_mat As)))\n     (0\\<^sub>m (dim_row (diag_block_mat As)) (dim_col A))\n     (diag_block_mat As) =\n    four_block_mat (A ^\\<^sub>m n * A)\n     (0\\<^sub>m (dim_row (A ^\\<^sub>m n * A))\n       (dim_col (diag_block_mat (map (\\<lambda>A. A ^\\<^sub>m n * A) As))))\n     (0\\<^sub>m\n       (dim_row (diag_block_mat (map (\\<lambda>A. A ^\\<^sub>m n * A) As)))\n       (dim_col (A ^\\<^sub>m n * A)))\n     (diag_block_mat (map (\\<lambda>A. A ^\\<^sub>m n * A) As))", "by (subst mult_four_block_mat[of _ n1 n1 _ n2 _ n2 _ _ n1 _ n2],\n      insert A, auto simp: IH)"], ["proof (state)\nthis:\n  diag_block_mat (map (\\<lambda>A. A ^\\<^sub>m n) (A # As)) *\n  diag_block_mat (A # As) =\n  diag_block_mat (map (\\<lambda>A. A ^\\<^sub>m n * A) (A # As))\n\ngoal (1 subgoal):\n 1. Ball (set []) square_mat \\<Longrightarrow>\n    diag_block_mat (map (\\<lambda>A. A ^\\<^sub>m n) []) *\n    diag_block_mat [] =\n    diag_block_mat (map (\\<lambda>A. A ^\\<^sub>m n * A) [])", "qed auto"], ["proof (state)\nthis:\n  diag_block_mat (map (\\<lambda>A. A ^\\<^sub>m n) As) * diag_block_mat As =\n  diag_block_mat (map (\\<lambda>A. A ^\\<^sub>m n * A) As)\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       diag_block_mat As ^\\<^sub>m n =\n       diag_block_mat (map (\\<lambda>A. A ^\\<^sub>m n) As) \\<Longrightarrow>\n       diag_block_mat As ^\\<^sub>m Suc n =\n       diag_block_mat (map (\\<lambda>A. A ^\\<^sub>m Suc n) As)", "finally"], ["proof (chain)\npicking this:\n  (diag_block_mat As ^\\<^sub>m Suc n =\n   diag_block_mat (map (\\<lambda>A. A ^\\<^sub>m Suc n) As)) =\n  (diag_block_mat (map (\\<lambda>A. A ^\\<^sub>m n * A) As) =\n   diag_block_mat (map (\\<lambda>A. A ^\\<^sub>m n * A) As))", "show ?case"], ["proof (prove)\nusing this:\n  (diag_block_mat As ^\\<^sub>m Suc n =\n   diag_block_mat (map (\\<lambda>A. A ^\\<^sub>m Suc n) As)) =\n  (diag_block_mat (map (\\<lambda>A. A ^\\<^sub>m n * A) As) =\n   diag_block_mat (map (\\<lambda>A. A ^\\<^sub>m n * A) As))\n\ngoal (1 subgoal):\n 1. diag_block_mat As ^\\<^sub>m Suc n =\n    diag_block_mat (map (\\<lambda>A. A ^\\<^sub>m Suc n) As)", "by simp"], ["proof (state)\nthis:\n  diag_block_mat As ^\\<^sub>m Suc n =\n  diag_block_mat (map (\\<lambda>A. A ^\\<^sub>m Suc n) As)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma diag_block_upper_triangular: assumes\n    \"\\<And> A i j. A \\<in> set As \\<Longrightarrow> j < i \\<Longrightarrow> i < dim_row A \\<Longrightarrow> A $$ (i,j) = 0\"\n  and \"Ball (set As) square_mat\"\n  and \"j < i\" \"i < dim_row (diag_block_mat As)\"\n  shows \"diag_block_mat As $$ (i,j) = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. diag_block_mat As $$ (i, j) = (0::'a)", "using assms"], ["proof (prove)\nusing this:\n  \\<lbrakk>?A \\<in> set As; ?j < ?i; ?i < dim_row ?A\\<rbrakk>\n  \\<Longrightarrow> ?A $$ (?i, ?j) = (0::'a)\n  Ball (set As) square_mat\n  j < i\n  i < dim_row (diag_block_mat As)\n\ngoal (1 subgoal):\n 1. diag_block_mat As $$ (i, j) = (0::'a)", "proof (induct As arbitrary: i j)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>i j.\n       \\<lbrakk>\\<And>A j i.\n                   \\<lbrakk>A \\<in> set []; j < i; i < dim_row A\\<rbrakk>\n                   \\<Longrightarrow> A $$ (i, j) = (0::'a);\n        Ball (set []) square_mat; j < i;\n        i < dim_row (diag_block_mat [])\\<rbrakk>\n       \\<Longrightarrow> diag_block_mat [] $$ (i, j) = (0::'a)\n 2. \\<And>a As i j.\n       \\<lbrakk>\\<And>i j.\n                   \\<lbrakk>\\<And>A j i.\n                               \\<lbrakk>A \\<in> set As; j < i;\n                                i < dim_row A\\<rbrakk>\n                               \\<Longrightarrow> A $$ (i, j) = (0::'a);\n                    Ball (set As) square_mat; j < i;\n                    i < dim_row (diag_block_mat As)\\<rbrakk>\n                   \\<Longrightarrow> diag_block_mat As $$ (i, j) = (0::'a);\n        \\<And>A j i.\n           \\<lbrakk>A \\<in> set (a # As); j < i; i < dim_row A\\<rbrakk>\n           \\<Longrightarrow> A $$ (i, j) = (0::'a);\n        Ball (set (a # As)) square_mat; j < i;\n        i < dim_row (diag_block_mat (a # As))\\<rbrakk>\n       \\<Longrightarrow> diag_block_mat (a # As) $$ (i, j) = (0::'a)", "case (Cons A As i j)"], ["proof (state)\nthis:\n  \\<lbrakk>\\<And>A j i.\n              \\<lbrakk>A \\<in> set As; j < i; i < dim_row A\\<rbrakk>\n              \\<Longrightarrow> A $$ (i, j) = (0::'a);\n   \\<forall>a\\<in>set As. square_mat a; ?j < ?i;\n   ?i < dim_row (diag_block_mat As)\\<rbrakk>\n  \\<Longrightarrow> diag_block_mat As $$ (?i, ?j) = (0::'a)\n  \\<lbrakk>?A \\<in> set (A # As); ?j < ?i; ?i < dim_row ?A\\<rbrakk>\n  \\<Longrightarrow> ?A $$ (?i, ?j) = (0::'a)\n  \\<forall>a\\<in>set (A # As). square_mat a\n  j < i\n  i < dim_row (diag_block_mat (A # As))\n\ngoal (2 subgoals):\n 1. \\<And>i j.\n       \\<lbrakk>\\<And>A j i.\n                   \\<lbrakk>A \\<in> set []; j < i; i < dim_row A\\<rbrakk>\n                   \\<Longrightarrow> A $$ (i, j) = (0::'a);\n        Ball (set []) square_mat; j < i;\n        i < dim_row (diag_block_mat [])\\<rbrakk>\n       \\<Longrightarrow> diag_block_mat [] $$ (i, j) = (0::'a)\n 2. \\<And>a As i j.\n       \\<lbrakk>\\<And>i j.\n                   \\<lbrakk>\\<And>A j i.\n                               \\<lbrakk>A \\<in> set As; j < i;\n                                i < dim_row A\\<rbrakk>\n                               \\<Longrightarrow> A $$ (i, j) = (0::'a);\n                    Ball (set As) square_mat; j < i;\n                    i < dim_row (diag_block_mat As)\\<rbrakk>\n                   \\<Longrightarrow> diag_block_mat As $$ (i, j) = (0::'a);\n        \\<And>A j i.\n           \\<lbrakk>A \\<in> set (a # As); j < i; i < dim_row A\\<rbrakk>\n           \\<Longrightarrow> A $$ (i, j) = (0::'a);\n        Ball (set (a # As)) square_mat; j < i;\n        i < dim_row (diag_block_mat (a # As))\\<rbrakk>\n       \\<Longrightarrow> diag_block_mat (a # As) $$ (i, j) = (0::'a)", "let ?n1 = \"dim_row A\""], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>i j.\n       \\<lbrakk>\\<And>A j i.\n                   \\<lbrakk>A \\<in> set []; j < i; i < dim_row A\\<rbrakk>\n                   \\<Longrightarrow> A $$ (i, j) = (0::'a);\n        Ball (set []) square_mat; j < i;\n        i < dim_row (diag_block_mat [])\\<rbrakk>\n       \\<Longrightarrow> diag_block_mat [] $$ (i, j) = (0::'a)\n 2. \\<And>a As i j.\n       \\<lbrakk>\\<And>i j.\n                   \\<lbrakk>\\<And>A j i.\n                               \\<lbrakk>A \\<in> set As; j < i;\n                                i < dim_row A\\<rbrakk>\n                               \\<Longrightarrow> A $$ (i, j) = (0::'a);\n                    Ball (set As) square_mat; j < i;\n                    i < dim_row (diag_block_mat As)\\<rbrakk>\n                   \\<Longrightarrow> diag_block_mat As $$ (i, j) = (0::'a);\n        \\<And>A j i.\n           \\<lbrakk>A \\<in> set (a # As); j < i; i < dim_row A\\<rbrakk>\n           \\<Longrightarrow> A $$ (i, j) = (0::'a);\n        Ball (set (a # As)) square_mat; j < i;\n        i < dim_row (diag_block_mat (a # As))\\<rbrakk>\n       \\<Longrightarrow> diag_block_mat (a # As) $$ (i, j) = (0::'a)", "let ?n2 = \"sum_list (map dim_row As)\""], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>i j.\n       \\<lbrakk>\\<And>A j i.\n                   \\<lbrakk>A \\<in> set []; j < i; i < dim_row A\\<rbrakk>\n                   \\<Longrightarrow> A $$ (i, j) = (0::'a);\n        Ball (set []) square_mat; j < i;\n        i < dim_row (diag_block_mat [])\\<rbrakk>\n       \\<Longrightarrow> diag_block_mat [] $$ (i, j) = (0::'a)\n 2. \\<And>a As i j.\n       \\<lbrakk>\\<And>i j.\n                   \\<lbrakk>\\<And>A j i.\n                               \\<lbrakk>A \\<in> set As; j < i;\n                                i < dim_row A\\<rbrakk>\n                               \\<Longrightarrow> A $$ (i, j) = (0::'a);\n                    Ball (set As) square_mat; j < i;\n                    i < dim_row (diag_block_mat As)\\<rbrakk>\n                   \\<Longrightarrow> diag_block_mat As $$ (i, j) = (0::'a);\n        \\<And>A j i.\n           \\<lbrakk>A \\<in> set (a # As); j < i; i < dim_row A\\<rbrakk>\n           \\<Longrightarrow> A $$ (i, j) = (0::'a);\n        Ball (set (a # As)) square_mat; j < i;\n        i < dim_row (diag_block_mat (a # As))\\<rbrakk>\n       \\<Longrightarrow> diag_block_mat (a # As) $$ (i, j) = (0::'a)", "from Cons"], ["proof (chain)\npicking this:\n  \\<lbrakk>\\<And>A j i.\n              \\<lbrakk>A \\<in> set As; j < i; i < dim_row A\\<rbrakk>\n              \\<Longrightarrow> A $$ (i, j) = (0::'a);\n   \\<forall>a\\<in>set As. square_mat a; ?j < ?i;\n   ?i < dim_row (diag_block_mat As)\\<rbrakk>\n  \\<Longrightarrow> diag_block_mat As $$ (?i, ?j) = (0::'a)\n  \\<lbrakk>?A \\<in> set (A # As); ?j < ?i; ?i < dim_row ?A\\<rbrakk>\n  \\<Longrightarrow> ?A $$ (?i, ?j) = (0::'a)\n  \\<forall>a\\<in>set (A # As). square_mat a\n  j < i\n  i < dim_row (diag_block_mat (A # As))", "have [simp]: \"dim_col A = ?n1\""], ["proof (prove)\nusing this:\n  \\<lbrakk>\\<And>A j i.\n              \\<lbrakk>A \\<in> set As; j < i; i < dim_row A\\<rbrakk>\n              \\<Longrightarrow> A $$ (i, j) = (0::'a);\n   \\<forall>a\\<in>set As. square_mat a; ?j < ?i;\n   ?i < dim_row (diag_block_mat As)\\<rbrakk>\n  \\<Longrightarrow> diag_block_mat As $$ (?i, ?j) = (0::'a)\n  \\<lbrakk>?A \\<in> set (A # As); ?j < ?i; ?i < dim_row ?A\\<rbrakk>\n  \\<Longrightarrow> ?A $$ (?i, ?j) = (0::'a)\n  \\<forall>a\\<in>set (A # As). square_mat a\n  j < i\n  i < dim_row (diag_block_mat (A # As))\n\ngoal (1 subgoal):\n 1. dim_col A = dim_row A", "by simp"], ["proof (state)\nthis:\n  dim_col A = dim_row A\n\ngoal (2 subgoals):\n 1. \\<And>i j.\n       \\<lbrakk>\\<And>A j i.\n                   \\<lbrakk>A \\<in> set []; j < i; i < dim_row A\\<rbrakk>\n                   \\<Longrightarrow> A $$ (i, j) = (0::'a);\n        Ball (set []) square_mat; j < i;\n        i < dim_row (diag_block_mat [])\\<rbrakk>\n       \\<Longrightarrow> diag_block_mat [] $$ (i, j) = (0::'a)\n 2. \\<And>a As i j.\n       \\<lbrakk>\\<And>i j.\n                   \\<lbrakk>\\<And>A j i.\n                               \\<lbrakk>A \\<in> set As; j < i;\n                                i < dim_row A\\<rbrakk>\n                               \\<Longrightarrow> A $$ (i, j) = (0::'a);\n                    Ball (set As) square_mat; j < i;\n                    i < dim_row (diag_block_mat As)\\<rbrakk>\n                   \\<Longrightarrow> diag_block_mat As $$ (i, j) = (0::'a);\n        \\<And>A j i.\n           \\<lbrakk>A \\<in> set (a # As); j < i; i < dim_row A\\<rbrakk>\n           \\<Longrightarrow> A $$ (i, j) = (0::'a);\n        Ball (set (a # As)) square_mat; j < i;\n        i < dim_row (diag_block_mat (a # As))\\<rbrakk>\n       \\<Longrightarrow> diag_block_mat (a # As) $$ (i, j) = (0::'a)", "from Cons"], ["proof (chain)\npicking this:\n  \\<lbrakk>\\<And>A j i.\n              \\<lbrakk>A \\<in> set As; j < i; i < dim_row A\\<rbrakk>\n              \\<Longrightarrow> A $$ (i, j) = (0::'a);\n   \\<forall>a\\<in>set As. square_mat a; ?j < ?i;\n   ?i < dim_row (diag_block_mat As)\\<rbrakk>\n  \\<Longrightarrow> diag_block_mat As $$ (?i, ?j) = (0::'a)\n  \\<lbrakk>?A \\<in> set (A # As); ?j < ?i; ?i < dim_row ?A\\<rbrakk>\n  \\<Longrightarrow> ?A $$ (?i, ?j) = (0::'a)\n  \\<forall>a\\<in>set (A # As). square_mat a\n  j < i\n  i < dim_row (diag_block_mat (A # As))", "have \"Ball (set As) square_mat\""], ["proof (prove)\nusing this:\n  \\<lbrakk>\\<And>A j i.\n              \\<lbrakk>A \\<in> set As; j < i; i < dim_row A\\<rbrakk>\n              \\<Longrightarrow> A $$ (i, j) = (0::'a);\n   \\<forall>a\\<in>set As. square_mat a; ?j < ?i;\n   ?i < dim_row (diag_block_mat As)\\<rbrakk>\n  \\<Longrightarrow> diag_block_mat As $$ (?i, ?j) = (0::'a)\n  \\<lbrakk>?A \\<in> set (A # As); ?j < ?i; ?i < dim_row ?A\\<rbrakk>\n  \\<Longrightarrow> ?A $$ (?i, ?j) = (0::'a)\n  \\<forall>a\\<in>set (A # As). square_mat a\n  j < i\n  i < dim_row (diag_block_mat (A # As))\n\ngoal (1 subgoal):\n 1. Ball (set As) square_mat", "by auto"], ["proof (state)\nthis:\n  Ball (set As) square_mat\n\ngoal (2 subgoals):\n 1. \\<And>i j.\n       \\<lbrakk>\\<And>A j i.\n                   \\<lbrakk>A \\<in> set []; j < i; i < dim_row A\\<rbrakk>\n                   \\<Longrightarrow> A $$ (i, j) = (0::'a);\n        Ball (set []) square_mat; j < i;\n        i < dim_row (diag_block_mat [])\\<rbrakk>\n       \\<Longrightarrow> diag_block_mat [] $$ (i, j) = (0::'a)\n 2. \\<And>a As i j.\n       \\<lbrakk>\\<And>i j.\n                   \\<lbrakk>\\<And>A j i.\n                               \\<lbrakk>A \\<in> set As; j < i;\n                                i < dim_row A\\<rbrakk>\n                               \\<Longrightarrow> A $$ (i, j) = (0::'a);\n                    Ball (set As) square_mat; j < i;\n                    i < dim_row (diag_block_mat As)\\<rbrakk>\n                   \\<Longrightarrow> diag_block_mat As $$ (i, j) = (0::'a);\n        \\<And>A j i.\n           \\<lbrakk>A \\<in> set (a # As); j < i; i < dim_row A\\<rbrakk>\n           \\<Longrightarrow> A $$ (i, j) = (0::'a);\n        Ball (set (a # As)) square_mat; j < i;\n        i < dim_row (diag_block_mat (a # As))\\<rbrakk>\n       \\<Longrightarrow> diag_block_mat (a # As) $$ (i, j) = (0::'a)", "note [simp] = diag_block_mat_square[OF this,unfolded square_mat.simps]"], ["proof (state)\nthis:\n  dim_col (diag_block_mat As) = dim_row (diag_block_mat As)\n\ngoal (2 subgoals):\n 1. \\<And>i j.\n       \\<lbrakk>\\<And>A j i.\n                   \\<lbrakk>A \\<in> set []; j < i; i < dim_row A\\<rbrakk>\n                   \\<Longrightarrow> A $$ (i, j) = (0::'a);\n        Ball (set []) square_mat; j < i;\n        i < dim_row (diag_block_mat [])\\<rbrakk>\n       \\<Longrightarrow> diag_block_mat [] $$ (i, j) = (0::'a)\n 2. \\<And>a As i j.\n       \\<lbrakk>\\<And>i j.\n                   \\<lbrakk>\\<And>A j i.\n                               \\<lbrakk>A \\<in> set As; j < i;\n                                i < dim_row A\\<rbrakk>\n                               \\<Longrightarrow> A $$ (i, j) = (0::'a);\n                    Ball (set As) square_mat; j < i;\n                    i < dim_row (diag_block_mat As)\\<rbrakk>\n                   \\<Longrightarrow> diag_block_mat As $$ (i, j) = (0::'a);\n        \\<And>A j i.\n           \\<lbrakk>A \\<in> set (a # As); j < i; i < dim_row A\\<rbrakk>\n           \\<Longrightarrow> A $$ (i, j) = (0::'a);\n        Ball (set (a # As)) square_mat; j < i;\n        i < dim_row (diag_block_mat (a # As))\\<rbrakk>\n       \\<Longrightarrow> diag_block_mat (a # As) $$ (i, j) = (0::'a)", "note [simp] = dim_diag_block_mat(1)"], ["proof (state)\nthis:\n  dim_row (diag_block_mat ?As) = sum_list (map dim_row ?As)\n\ngoal (2 subgoals):\n 1. \\<And>i j.\n       \\<lbrakk>\\<And>A j i.\n                   \\<lbrakk>A \\<in> set []; j < i; i < dim_row A\\<rbrakk>\n                   \\<Longrightarrow> A $$ (i, j) = (0::'a);\n        Ball (set []) square_mat; j < i;\n        i < dim_row (diag_block_mat [])\\<rbrakk>\n       \\<Longrightarrow> diag_block_mat [] $$ (i, j) = (0::'a)\n 2. \\<And>a As i j.\n       \\<lbrakk>\\<And>i j.\n                   \\<lbrakk>\\<And>A j i.\n                               \\<lbrakk>A \\<in> set As; j < i;\n                                i < dim_row A\\<rbrakk>\n                               \\<Longrightarrow> A $$ (i, j) = (0::'a);\n                    Ball (set As) square_mat; j < i;\n                    i < dim_row (diag_block_mat As)\\<rbrakk>\n                   \\<Longrightarrow> diag_block_mat As $$ (i, j) = (0::'a);\n        \\<And>A j i.\n           \\<lbrakk>A \\<in> set (a # As); j < i; i < dim_row A\\<rbrakk>\n           \\<Longrightarrow> A $$ (i, j) = (0::'a);\n        Ball (set (a # As)) square_mat; j < i;\n        i < dim_row (diag_block_mat (a # As))\\<rbrakk>\n       \\<Longrightarrow> diag_block_mat (a # As) $$ (i, j) = (0::'a)", "from Cons(5)"], ["proof (chain)\npicking this:\n  i < dim_row (diag_block_mat (A # As))", "have i: \"i < ?n1 + ?n2\""], ["proof (prove)\nusing this:\n  i < dim_row (diag_block_mat (A # As))\n\ngoal (1 subgoal):\n 1. i < dim_row A + sum_list (map dim_row As)", "by simp"], ["proof (state)\nthis:\n  i < dim_row A + sum_list (map dim_row As)\n\ngoal (2 subgoals):\n 1. \\<And>i j.\n       \\<lbrakk>\\<And>A j i.\n                   \\<lbrakk>A \\<in> set []; j < i; i < dim_row A\\<rbrakk>\n                   \\<Longrightarrow> A $$ (i, j) = (0::'a);\n        Ball (set []) square_mat; j < i;\n        i < dim_row (diag_block_mat [])\\<rbrakk>\n       \\<Longrightarrow> diag_block_mat [] $$ (i, j) = (0::'a)\n 2. \\<And>a As i j.\n       \\<lbrakk>\\<And>i j.\n                   \\<lbrakk>\\<And>A j i.\n                               \\<lbrakk>A \\<in> set As; j < i;\n                                i < dim_row A\\<rbrakk>\n                               \\<Longrightarrow> A $$ (i, j) = (0::'a);\n                    Ball (set As) square_mat; j < i;\n                    i < dim_row (diag_block_mat As)\\<rbrakk>\n                   \\<Longrightarrow> diag_block_mat As $$ (i, j) = (0::'a);\n        \\<And>A j i.\n           \\<lbrakk>A \\<in> set (a # As); j < i; i < dim_row A\\<rbrakk>\n           \\<Longrightarrow> A $$ (i, j) = (0::'a);\n        Ball (set (a # As)) square_mat; j < i;\n        i < dim_row (diag_block_mat (a # As))\\<rbrakk>\n       \\<Longrightarrow> diag_block_mat (a # As) $$ (i, j) = (0::'a)", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. diag_block_mat (A # As) $$ (i, j) = (0::'a)", "proof (cases \"i < ?n1\")"], ["proof (state)\ngoal (2 subgoals):\n 1. i < dim_row A \\<Longrightarrow>\n    diag_block_mat (A # As) $$ (i, j) = (0::'a)\n 2. \\<not> i < dim_row A \\<Longrightarrow>\n    diag_block_mat (A # As) $$ (i, j) = (0::'a)", "case True"], ["proof (state)\nthis:\n  i < dim_row A\n\ngoal (2 subgoals):\n 1. i < dim_row A \\<Longrightarrow>\n    diag_block_mat (A # As) $$ (i, j) = (0::'a)\n 2. \\<not> i < dim_row A \\<Longrightarrow>\n    diag_block_mat (A # As) $$ (i, j) = (0::'a)", "with Cons(4)"], ["proof (chain)\npicking this:\n  j < i\n  i < dim_row A", "have j: \"j < ?n1\""], ["proof (prove)\nusing this:\n  j < i\n  i < dim_row A\n\ngoal (1 subgoal):\n 1. j < dim_row A", "by auto"], ["proof (state)\nthis:\n  j < dim_row A\n\ngoal (2 subgoals):\n 1. i < dim_row A \\<Longrightarrow>\n    diag_block_mat (A # As) $$ (i, j) = (0::'a)\n 2. \\<not> i < dim_row A \\<Longrightarrow>\n    diag_block_mat (A # As) $$ (i, j) = (0::'a)", "with True Cons(2)[of A, OF _ Cons(4)]"], ["proof (chain)\npicking this:\n  i < dim_row A\n  \\<lbrakk>A \\<in> set (A # As); i < dim_row A\\<rbrakk>\n  \\<Longrightarrow> A $$ (i, j) = (0::'a)\n  j < dim_row A", "show ?thesis"], ["proof (prove)\nusing this:\n  i < dim_row A\n  \\<lbrakk>A \\<in> set (A # As); i < dim_row A\\<rbrakk>\n  \\<Longrightarrow> A $$ (i, j) = (0::'a)\n  j < dim_row A\n\ngoal (1 subgoal):\n 1. diag_block_mat (A # As) $$ (i, j) = (0::'a)", "by (simp add: Let_def)"], ["proof (state)\nthis:\n  diag_block_mat (A # As) $$ (i, j) = (0::'a)\n\ngoal (1 subgoal):\n 1. \\<not> i < dim_row A \\<Longrightarrow>\n    diag_block_mat (A # As) $$ (i, j) = (0::'a)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> i < dim_row A \\<Longrightarrow>\n    diag_block_mat (A # As) $$ (i, j) = (0::'a)", "case False"], ["proof (state)\nthis:\n  \\<not> i < dim_row A\n\ngoal (1 subgoal):\n 1. \\<not> i < dim_row A \\<Longrightarrow>\n    diag_block_mat (A # As) $$ (i, j) = (0::'a)", "note iAs = this"], ["proof (state)\nthis:\n  \\<not> i < dim_row A\n\ngoal (1 subgoal):\n 1. \\<not> i < dim_row A \\<Longrightarrow>\n    diag_block_mat (A # As) $$ (i, j) = (0::'a)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. diag_block_mat (A # As) $$ (i, j) = (0::'a)", "proof (cases \"j < ?n1\")"], ["proof (state)\ngoal (2 subgoals):\n 1. j < dim_row A \\<Longrightarrow>\n    diag_block_mat (A # As) $$ (i, j) = (0::'a)\n 2. \\<not> j < dim_row A \\<Longrightarrow>\n    diag_block_mat (A # As) $$ (i, j) = (0::'a)", "case True"], ["proof (state)\nthis:\n  j < dim_row A\n\ngoal (2 subgoals):\n 1. j < dim_row A \\<Longrightarrow>\n    diag_block_mat (A # As) $$ (i, j) = (0::'a)\n 2. \\<not> j < dim_row A \\<Longrightarrow>\n    diag_block_mat (A # As) $$ (i, j) = (0::'a)", "with i iAs"], ["proof (chain)\npicking this:\n  i < dim_row A + sum_list (map dim_row As)\n  \\<not> i < dim_row A\n  j < dim_row A", "show ?thesis"], ["proof (prove)\nusing this:\n  i < dim_row A + sum_list (map dim_row As)\n  \\<not> i < dim_row A\n  j < dim_row A\n\ngoal (1 subgoal):\n 1. diag_block_mat (A # As) $$ (i, j) = (0::'a)", "by (simp add: Let_def)"], ["proof (state)\nthis:\n  diag_block_mat (A # As) $$ (i, j) = (0::'a)\n\ngoal (1 subgoal):\n 1. \\<not> j < dim_row A \\<Longrightarrow>\n    diag_block_mat (A # As) $$ (i, j) = (0::'a)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> j < dim_row A \\<Longrightarrow>\n    diag_block_mat (A # As) $$ (i, j) = (0::'a)", "case False"], ["proof (state)\nthis:\n  \\<not> j < dim_row A\n\ngoal (1 subgoal):\n 1. \\<not> j < dim_row A \\<Longrightarrow>\n    diag_block_mat (A # As) $$ (i, j) = (0::'a)", "note jAs = this"], ["proof (state)\nthis:\n  \\<not> j < dim_row A\n\ngoal (1 subgoal):\n 1. \\<not> j < dim_row A \\<Longrightarrow>\n    diag_block_mat (A # As) $$ (i, j) = (0::'a)", "from Cons(4) i"], ["proof (chain)\npicking this:\n  j < i\n  i < dim_row A + sum_list (map dim_row As)", "have j: \"j < ?n1 + ?n2\""], ["proof (prove)\nusing this:\n  j < i\n  i < dim_row A + sum_list (map dim_row As)\n\ngoal (1 subgoal):\n 1. j < dim_row A + sum_list (map dim_row As)", "by auto"], ["proof (state)\nthis:\n  j < dim_row A + sum_list (map dim_row As)\n\ngoal (1 subgoal):\n 1. \\<not> j < dim_row A \\<Longrightarrow>\n    diag_block_mat (A # As) $$ (i, j) = (0::'a)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. diag_block_mat (A # As) $$ (i, j) = (0::'a)", "using iAs jAs i j"], ["proof (prove)\nusing this:\n  \\<not> i < dim_row A\n  \\<not> j < dim_row A\n  i < dim_row A + sum_list (map dim_row As)\n  j < dim_row A + sum_list (map dim_row As)\n\ngoal (1 subgoal):\n 1. diag_block_mat (A # As) $$ (i, j) = (0::'a)", "by (simp add: Let_def, subst Cons(1), insert Cons(2-4), auto)"], ["proof (state)\nthis:\n  diag_block_mat (A # As) $$ (i, j) = (0::'a)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  diag_block_mat (A # As) $$ (i, j) = (0::'a)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  diag_block_mat (A # As) $$ (i, j) = (0::'a)\n\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>\\<And>A j i.\n                   \\<lbrakk>A \\<in> set []; j < i; i < dim_row A\\<rbrakk>\n                   \\<Longrightarrow> A $$ (i, j) = (0::'a);\n        Ball (set []) square_mat; j < i;\n        i < dim_row (diag_block_mat [])\\<rbrakk>\n       \\<Longrightarrow> diag_block_mat [] $$ (i, j) = (0::'a)", "qed simp"], ["", "lemma smult_four_block_mat: assumes c: \"A \\<in> carrier_mat nr1 nc1\" \"B \\<in> carrier_mat nr1 nc2\"\n  \"C \\<in> carrier_mat nr2 nc1\" \"D \\<in> carrier_mat nr2 nc2\"\n  shows \"a \\<cdot>\\<^sub>m four_block_mat A B C D = four_block_mat (a \\<cdot>\\<^sub>m A) (a \\<cdot>\\<^sub>m B) (a \\<cdot>\\<^sub>m C) (a \\<cdot>\\<^sub>m D)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<cdot>\\<^sub>m four_block_mat A B C D =\n    four_block_mat (a \\<cdot>\\<^sub>m A) (a \\<cdot>\\<^sub>m B)\n     (a \\<cdot>\\<^sub>m C) (a \\<cdot>\\<^sub>m D)", "by (rule eq_matI, insert c, auto)"], ["", "lemma map_four_block_mat: assumes c: \"A \\<in> carrier_mat nr1 nc1\" \"B \\<in> carrier_mat nr1 nc2\"\n  \"C \\<in> carrier_mat nr2 nc1\" \"D \\<in> carrier_mat nr2 nc2\"\n  shows \"map_mat f (four_block_mat A B C D) = four_block_mat (map_mat f A) (map_mat f B) (map_mat f C) (map_mat f D)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. map_mat f (four_block_mat A B C D) =\n    four_block_mat (map_mat f A) (map_mat f B) (map_mat f C) (map_mat f D)", "by (rule eq_matI, insert c, auto)"], ["", "lemma add_four_block_mat: assumes\n  c1: \"A1 \\<in> carrier_mat nr1 nc1\" \"B1 \\<in> carrier_mat nr1 nc2\" \"C1 \\<in> carrier_mat nr2 nc1\" \"D1 \\<in> carrier_mat nr2 nc2\" and\n  c2: \"A2 \\<in> carrier_mat nr1 nc1\" \"B2 \\<in> carrier_mat nr1 nc2\" \"C2 \\<in> carrier_mat nr2 nc1\" \"D2 \\<in> carrier_mat nr2 nc2\"\n  shows \"four_block_mat A1 B1 C1 D1 + four_block_mat A2 B2 C2 D2\n  = four_block_mat (A1 + A2) (B1 + B2) (C1 + C2) (D1 + D2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. four_block_mat A1 B1 C1 D1 + four_block_mat A2 B2 C2 D2 =\n    four_block_mat (A1 + A2) (B1 + B2) (C1 + C2) (D1 + D2)", "by (rule eq_matI, insert assms, auto)"], ["", "lemma diag_four_block_mat: assumes c: \"A \\<in> carrier_mat n1 n1\"\n   \"D \\<in> carrier_mat n2 n2\"\n  shows \"diag_mat (four_block_mat A B C D) = diag_mat A @ diag_mat D\""], ["proof (prove)\ngoal (1 subgoal):\n 1. diag_mat (four_block_mat A B C D) = diag_mat A @ diag_mat D", "by (rule nth_equalityI, insert c, auto simp: diag_mat_def nth_append)"], ["", "definition mk_diagonal :: \"'a::zero list \\<Rightarrow> 'a mat\"\n  where \"mk_diagonal as = diag_block_mat (map (\\<lambda>a. mat (Suc 0) (Suc 0) (\\<lambda>_. a)) as)\""], ["", "lemma mk_diagonal_dim:\n  \"dim_row (mk_diagonal as) = length as\" \"dim_col (mk_diagonal as) = length as\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dim_row (mk_diagonal as) = length as &&&\n    dim_col (mk_diagonal as) = length as", "unfolding mk_diagonal_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. dim_row\n     (diag_block_mat\n       (map (\\<lambda>a. mat (Suc 0) (Suc 0) (\\<lambda>_. a)) as)) =\n    length as &&&\n    dim_col\n     (diag_block_mat\n       (map (\\<lambda>a. mat (Suc 0) (Suc 0) (\\<lambda>_. a)) as)) =\n    length as", "by(induct as, auto simp: Let_def)"], ["", "lemma mk_diagonal_diagonal: \"diagonal_mat (mk_diagonal as)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. diagonal_mat (mk_diagonal as)", "unfolding mk_diagonal_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. diagonal_mat\n     (diag_block_mat\n       (map (\\<lambda>a. mat (Suc 0) (Suc 0) (\\<lambda>_. a)) as))", "proof (induct as)"], ["proof (state)\ngoal (2 subgoals):\n 1. diagonal_mat\n     (diag_block_mat\n       (map (\\<lambda>a. mat (Suc 0) (Suc 0) (\\<lambda>_. a)) []))\n 2. \\<And>a as.\n       diagonal_mat\n        (diag_block_mat\n          (map (\\<lambda>a. mat (Suc 0) (Suc 0) (\\<lambda>_. a))\n            as)) \\<Longrightarrow>\n       diagonal_mat\n        (diag_block_mat\n          (map (\\<lambda>a. mat (Suc 0) (Suc 0) (\\<lambda>_. a)) (a # as)))", "case Nil"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. diagonal_mat\n     (diag_block_mat\n       (map (\\<lambda>a. mat (Suc 0) (Suc 0) (\\<lambda>_. a)) []))\n 2. \\<And>a as.\n       diagonal_mat\n        (diag_block_mat\n          (map (\\<lambda>a. mat (Suc 0) (Suc 0) (\\<lambda>_. a))\n            as)) \\<Longrightarrow>\n       diagonal_mat\n        (diag_block_mat\n          (map (\\<lambda>a. mat (Suc 0) (Suc 0) (\\<lambda>_. a)) (a # as)))", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. diagonal_mat\n     (diag_block_mat\n       (map (\\<lambda>a. mat (Suc 0) (Suc 0) (\\<lambda>_. a)) []))", "unfolding mk_diagonal_def diagonal_mat_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>i<dim_row\n                (diag_block_mat\n                  (map (\\<lambda>a. mat (Suc 0) (Suc 0) (\\<lambda>_. a))\n                    [])).\n       \\<forall>j<dim_col\n                   (diag_block_mat\n                     (map (\\<lambda>a. mat (Suc 0) (Suc 0) (\\<lambda>_. a))\n                       [])).\n          i \\<noteq> j \\<longrightarrow>\n          diag_block_mat\n           (map (\\<lambda>a. mat (Suc 0) (Suc 0) (\\<lambda>_. a)) []) $$\n          (i, j) =\n          (0::'a)", "by simp"], ["proof (state)\nthis:\n  diagonal_mat\n   (diag_block_mat\n     (map (\\<lambda>a. mat (Suc 0) (Suc 0) (\\<lambda>_. a)) []))\n\ngoal (1 subgoal):\n 1. \\<And>a as.\n       diagonal_mat\n        (diag_block_mat\n          (map (\\<lambda>a. mat (Suc 0) (Suc 0) (\\<lambda>_. a))\n            as)) \\<Longrightarrow>\n       diagonal_mat\n        (diag_block_mat\n          (map (\\<lambda>a. mat (Suc 0) (Suc 0) (\\<lambda>_. a)) (a # as)))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a as.\n       diagonal_mat\n        (diag_block_mat\n          (map (\\<lambda>a. mat (Suc 0) (Suc 0) (\\<lambda>_. a))\n            as)) \\<Longrightarrow>\n       diagonal_mat\n        (diag_block_mat\n          (map (\\<lambda>a. mat (Suc 0) (Suc 0) (\\<lambda>_. a)) (a # as)))", "case (Cons a as)"], ["proof (state)\nthis:\n  diagonal_mat\n   (diag_block_mat\n     (map (\\<lambda>a. mat (Suc 0) (Suc 0) (\\<lambda>_. a)) as))\n\ngoal (1 subgoal):\n 1. \\<And>a as.\n       diagonal_mat\n        (diag_block_mat\n          (map (\\<lambda>a. mat (Suc 0) (Suc 0) (\\<lambda>_. a))\n            as)) \\<Longrightarrow>\n       diagonal_mat\n        (diag_block_mat\n          (map (\\<lambda>a. mat (Suc 0) (Suc 0) (\\<lambda>_. a)) (a # as)))", "let ?n = \"length (a#as)\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a as.\n       diagonal_mat\n        (diag_block_mat\n          (map (\\<lambda>a. mat (Suc 0) (Suc 0) (\\<lambda>_. a))\n            as)) \\<Longrightarrow>\n       diagonal_mat\n        (diag_block_mat\n          (map (\\<lambda>a. mat (Suc 0) (Suc 0) (\\<lambda>_. a)) (a # as)))", "let ?A = \"mat (Suc 0) (Suc 0) (\\<lambda>_. a)\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a as.\n       diagonal_mat\n        (diag_block_mat\n          (map (\\<lambda>a. mat (Suc 0) (Suc 0) (\\<lambda>_. a))\n            as)) \\<Longrightarrow>\n       diagonal_mat\n        (diag_block_mat\n          (map (\\<lambda>a. mat (Suc 0) (Suc 0) (\\<lambda>_. a)) (a # as)))", "let ?f = \"map (\\<lambda>a. mat (Suc 0) (Suc 0) (\\<lambda>_. a))\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a as.\n       diagonal_mat\n        (diag_block_mat\n          (map (\\<lambda>a. mat (Suc 0) (Suc 0) (\\<lambda>_. a))\n            as)) \\<Longrightarrow>\n       diagonal_mat\n        (diag_block_mat\n          (map (\\<lambda>a. mat (Suc 0) (Suc 0) (\\<lambda>_. a)) (a # as)))", "let ?AS = \"diag_block_mat (?f as)\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a as.\n       diagonal_mat\n        (diag_block_mat\n          (map (\\<lambda>a. mat (Suc 0) (Suc 0) (\\<lambda>_. a))\n            as)) \\<Longrightarrow>\n       diagonal_mat\n        (diag_block_mat\n          (map (\\<lambda>a. mat (Suc 0) (Suc 0) (\\<lambda>_. a)) (a # as)))", "let ?AAS = \"diag_block_mat (?f (a#as))\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a as.\n       diagonal_mat\n        (diag_block_mat\n          (map (\\<lambda>a. mat (Suc 0) (Suc 0) (\\<lambda>_. a))\n            as)) \\<Longrightarrow>\n       diagonal_mat\n        (diag_block_mat\n          (map (\\<lambda>a. mat (Suc 0) (Suc 0) (\\<lambda>_. a)) (a # as)))", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. diagonal_mat\n     (diag_block_mat\n       (map (\\<lambda>a. mat (Suc 0) (Suc 0) (\\<lambda>_. a)) (a # as)))", "unfolding diagonal_mat_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>i<dim_row\n                (diag_block_mat\n                  (map (\\<lambda>a. mat (Suc 0) (Suc 0) (\\<lambda>_. a))\n                    (a # as))).\n       \\<forall>j<dim_col\n                   (diag_block_mat\n                     (map (\\<lambda>a. mat (Suc 0) (Suc 0) (\\<lambda>_. a))\n                       (a # as))).\n          i \\<noteq> j \\<longrightarrow>\n          diag_block_mat\n           (map (\\<lambda>a. mat (Suc 0) (Suc 0) (\\<lambda>_. a))\n             (a # as)) $$\n          (i, j) =\n          (0::'a)", "proof(intro allI impI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>i < dim_row\n                     (diag_block_mat\n                       (map (\\<lambda>a.\n                                mat (Suc 0) (Suc 0) (\\<lambda>_. a))\n                         (a # as)));\n        j < dim_col\n             (diag_block_mat\n               (map (\\<lambda>a. mat (Suc 0) (Suc 0) (\\<lambda>_. a))\n                 (a # as)));\n        i \\<noteq> j\\<rbrakk>\n       \\<Longrightarrow> diag_block_mat\n                          (map (\\<lambda>a.\n                                   mat (Suc 0) (Suc 0) (\\<lambda>_. a))\n                            (a # as)) $$\n                         (i, j) =\n                         (0::'a)", "fix i j"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>i < dim_row\n                     (diag_block_mat\n                       (map (\\<lambda>a.\n                                mat (Suc 0) (Suc 0) (\\<lambda>_. a))\n                         (a # as)));\n        j < dim_col\n             (diag_block_mat\n               (map (\\<lambda>a. mat (Suc 0) (Suc 0) (\\<lambda>_. a))\n                 (a # as)));\n        i \\<noteq> j\\<rbrakk>\n       \\<Longrightarrow> diag_block_mat\n                          (map (\\<lambda>a.\n                                   mat (Suc 0) (Suc 0) (\\<lambda>_. a))\n                            (a # as)) $$\n                         (i, j) =\n                         (0::'a)", "assume ir: \"i < dim_row ?AAS\" and jc: \"j < dim_col ?AAS\" and ij: \"i \\<noteq> j\""], ["proof (state)\nthis:\n  i < dim_row\n       (diag_block_mat\n         (map (\\<lambda>a. mat (Suc 0) (Suc 0) (\\<lambda>_. a)) (a # as)))\n  j < dim_col\n       (diag_block_mat\n         (map (\\<lambda>a. mat (Suc 0) (Suc 0) (\\<lambda>_. a)) (a # as)))\n  i \\<noteq> j\n\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>i < dim_row\n                     (diag_block_mat\n                       (map (\\<lambda>a.\n                                mat (Suc 0) (Suc 0) (\\<lambda>_. a))\n                         (a # as)));\n        j < dim_col\n             (diag_block_mat\n               (map (\\<lambda>a. mat (Suc 0) (Suc 0) (\\<lambda>_. a))\n                 (a # as)));\n        i \\<noteq> j\\<rbrakk>\n       \\<Longrightarrow> diag_block_mat\n                          (map (\\<lambda>a.\n                                   mat (Suc 0) (Suc 0) (\\<lambda>_. a))\n                            (a # as)) $$\n                         (i, j) =\n                         (0::'a)", "hence ir2: \"i < 1 + dim_row ?AS\" and jc2: \"j < 1 + dim_col ?AS\""], ["proof (prove)\nusing this:\n  i < dim_row\n       (diag_block_mat\n         (map (\\<lambda>a. mat (Suc 0) (Suc 0) (\\<lambda>_. a)) (a # as)))\n  j < dim_col\n       (diag_block_mat\n         (map (\\<lambda>a. mat (Suc 0) (Suc 0) (\\<lambda>_. a)) (a # as)))\n  i \\<noteq> j\n\ngoal (1 subgoal):\n 1. i < 1 +\n        dim_row\n         (diag_block_mat\n           (map (\\<lambda>a. mat (Suc 0) (Suc 0) (\\<lambda>_. a)) as)) &&&\n    j < 1 +\n        dim_col\n         (diag_block_mat\n           (map (\\<lambda>a. mat (Suc 0) (Suc 0) (\\<lambda>_. a)) as))", "unfolding dim_row_mat list.map diag_block_mat.simps Let_def"], ["proof (prove)\nusing this:\n  i < dim_row\n       (four_block_mat (mat (Suc 0) (Suc 0) (\\<lambda>_. a))\n         (0\\<^sub>m (Suc 0)\n           (dim_col\n             (diag_block_mat\n               (map (\\<lambda>a. mat (Suc 0) (Suc 0) (\\<lambda>_. a)) as))))\n         (0\\<^sub>m\n           (dim_row\n             (diag_block_mat\n               (map (\\<lambda>a. mat (Suc 0) (Suc 0) (\\<lambda>_. a)) as)))\n           (dim_col (mat (Suc 0) (Suc 0) (\\<lambda>_. a))))\n         (diag_block_mat\n           (map (\\<lambda>a. mat (Suc 0) (Suc 0) (\\<lambda>_. a)) as)))\n  j < dim_col\n       (four_block_mat (mat (Suc 0) (Suc 0) (\\<lambda>_. a))\n         (0\\<^sub>m (Suc 0)\n           (dim_col\n             (diag_block_mat\n               (map (\\<lambda>a. mat (Suc 0) (Suc 0) (\\<lambda>_. a)) as))))\n         (0\\<^sub>m\n           (dim_row\n             (diag_block_mat\n               (map (\\<lambda>a. mat (Suc 0) (Suc 0) (\\<lambda>_. a)) as)))\n           (dim_col (mat (Suc 0) (Suc 0) (\\<lambda>_. a))))\n         (diag_block_mat\n           (map (\\<lambda>a. mat (Suc 0) (Suc 0) (\\<lambda>_. a)) as)))\n  i \\<noteq> j\n\ngoal (1 subgoal):\n 1. i < 1 +\n        dim_row\n         (diag_block_mat\n           (map (\\<lambda>a. mat (Suc 0) (Suc 0) (\\<lambda>_. a)) as)) &&&\n    j < 1 +\n        dim_col\n         (diag_block_mat\n           (map (\\<lambda>a. mat (Suc 0) (Suc 0) (\\<lambda>_. a)) as))", "by auto"], ["proof (state)\nthis:\n  i < 1 +\n      dim_row\n       (diag_block_mat\n         (map (\\<lambda>a. mat (Suc 0) (Suc 0) (\\<lambda>_. a)) as))\n  j < 1 +\n      dim_col\n       (diag_block_mat\n         (map (\\<lambda>a. mat (Suc 0) (Suc 0) (\\<lambda>_. a)) as))\n\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>i < dim_row\n                     (diag_block_mat\n                       (map (\\<lambda>a.\n                                mat (Suc 0) (Suc 0) (\\<lambda>_. a))\n                         (a # as)));\n        j < dim_col\n             (diag_block_mat\n               (map (\\<lambda>a. mat (Suc 0) (Suc 0) (\\<lambda>_. a))\n                 (a # as)));\n        i \\<noteq> j\\<rbrakk>\n       \\<Longrightarrow> diag_block_mat\n                          (map (\\<lambda>a.\n                                   mat (Suc 0) (Suc 0) (\\<lambda>_. a))\n                            (a # as)) $$\n                         (i, j) =\n                         (0::'a)", "show \"?AAS $$ (i,j) = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. diag_block_mat\n     (map (\\<lambda>a. mat (Suc 0) (Suc 0) (\\<lambda>_. a)) (a # as)) $$\n    (i, j) =\n    (0::'a)", "proof (cases \"i = 0\")"], ["proof (state)\ngoal (2 subgoals):\n 1. i = 0 \\<Longrightarrow>\n    diag_block_mat\n     (map (\\<lambda>a. mat (Suc 0) (Suc 0) (\\<lambda>_. a)) (a # as)) $$\n    (i, j) =\n    (0::'a)\n 2. i \\<noteq> 0 \\<Longrightarrow>\n    diag_block_mat\n     (map (\\<lambda>a. mat (Suc 0) (Suc 0) (\\<lambda>_. a)) (a # as)) $$\n    (i, j) =\n    (0::'a)", "case True"], ["proof (state)\nthis:\n  i = 0\n\ngoal (2 subgoals):\n 1. i = 0 \\<Longrightarrow>\n    diag_block_mat\n     (map (\\<lambda>a. mat (Suc 0) (Suc 0) (\\<lambda>_. a)) (a # as)) $$\n    (i, j) =\n    (0::'a)\n 2. i \\<noteq> 0 \\<Longrightarrow>\n    diag_block_mat\n     (map (\\<lambda>a. mat (Suc 0) (Suc 0) (\\<lambda>_. a)) (a # as)) $$\n    (i, j) =\n    (0::'a)", "then"], ["proof (chain)\npicking this:\n  i = 0", "show ?thesis"], ["proof (prove)\nusing this:\n  i = 0\n\ngoal (1 subgoal):\n 1. diag_block_mat\n     (map (\\<lambda>a. mat (Suc 0) (Suc 0) (\\<lambda>_. a)) (a # as)) $$\n    (i, j) =\n    (0::'a)", "using jc ij"], ["proof (prove)\nusing this:\n  i = 0\n  j < dim_col\n       (diag_block_mat\n         (map (\\<lambda>a. mat (Suc 0) (Suc 0) (\\<lambda>_. a)) (a # as)))\n  i \\<noteq> j\n\ngoal (1 subgoal):\n 1. diag_block_mat\n     (map (\\<lambda>a. mat (Suc 0) (Suc 0) (\\<lambda>_. a)) (a # as)) $$\n    (i, j) =\n    (0::'a)", "by (auto simp: Let_def)"], ["proof (state)\nthis:\n  diag_block_mat\n   (map (\\<lambda>a. mat (Suc 0) (Suc 0) (\\<lambda>_. a)) (a # as)) $$\n  (i, j) =\n  (0::'a)\n\ngoal (1 subgoal):\n 1. i \\<noteq> 0 \\<Longrightarrow>\n    diag_block_mat\n     (map (\\<lambda>a. mat (Suc 0) (Suc 0) (\\<lambda>_. a)) (a # as)) $$\n    (i, j) =\n    (0::'a)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. i \\<noteq> 0 \\<Longrightarrow>\n    diag_block_mat\n     (map (\\<lambda>a. mat (Suc 0) (Suc 0) (\\<lambda>_. a)) (a # as)) $$\n    (i, j) =\n    (0::'a)", "case False"], ["proof (state)\nthis:\n  i \\<noteq> 0\n\ngoal (1 subgoal):\n 1. i \\<noteq> 0 \\<Longrightarrow>\n    diag_block_mat\n     (map (\\<lambda>a. mat (Suc 0) (Suc 0) (\\<lambda>_. a)) (a # as)) $$\n    (i, j) =\n    (0::'a)", "note i0 = this"], ["proof (state)\nthis:\n  i \\<noteq> 0\n\ngoal (1 subgoal):\n 1. i \\<noteq> 0 \\<Longrightarrow>\n    diag_block_mat\n     (map (\\<lambda>a. mat (Suc 0) (Suc 0) (\\<lambda>_. a)) (a # as)) $$\n    (i, j) =\n    (0::'a)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. diag_block_mat\n     (map (\\<lambda>a. mat (Suc 0) (Suc 0) (\\<lambda>_. a)) (a # as)) $$\n    (i, j) =\n    (0::'a)", "proof (cases \"j = 0\")"], ["proof (state)\ngoal (2 subgoals):\n 1. j = 0 \\<Longrightarrow>\n    diag_block_mat\n     (map (\\<lambda>a. mat (Suc 0) (Suc 0) (\\<lambda>_. a)) (a # as)) $$\n    (i, j) =\n    (0::'a)\n 2. j \\<noteq> 0 \\<Longrightarrow>\n    diag_block_mat\n     (map (\\<lambda>a. mat (Suc 0) (Suc 0) (\\<lambda>_. a)) (a # as)) $$\n    (i, j) =\n    (0::'a)", "case True"], ["proof (state)\nthis:\n  j = 0\n\ngoal (2 subgoals):\n 1. j = 0 \\<Longrightarrow>\n    diag_block_mat\n     (map (\\<lambda>a. mat (Suc 0) (Suc 0) (\\<lambda>_. a)) (a # as)) $$\n    (i, j) =\n    (0::'a)\n 2. j \\<noteq> 0 \\<Longrightarrow>\n    diag_block_mat\n     (map (\\<lambda>a. mat (Suc 0) (Suc 0) (\\<lambda>_. a)) (a # as)) $$\n    (i, j) =\n    (0::'a)", "then"], ["proof (chain)\npicking this:\n  j = 0", "show ?thesis"], ["proof (prove)\nusing this:\n  j = 0\n\ngoal (1 subgoal):\n 1. diag_block_mat\n     (map (\\<lambda>a. mat (Suc 0) (Suc 0) (\\<lambda>_. a)) (a # as)) $$\n    (i, j) =\n    (0::'a)", "using ir ij"], ["proof (prove)\nusing this:\n  j = 0\n  i < dim_row\n       (diag_block_mat\n         (map (\\<lambda>a. mat (Suc 0) (Suc 0) (\\<lambda>_. a)) (a # as)))\n  i \\<noteq> j\n\ngoal (1 subgoal):\n 1. diag_block_mat\n     (map (\\<lambda>a. mat (Suc 0) (Suc 0) (\\<lambda>_. a)) (a # as)) $$\n    (i, j) =\n    (0::'a)", "by (auto simp: Let_def)"], ["proof (state)\nthis:\n  diag_block_mat\n   (map (\\<lambda>a. mat (Suc 0) (Suc 0) (\\<lambda>_. a)) (a # as)) $$\n  (i, j) =\n  (0::'a)\n\ngoal (1 subgoal):\n 1. j \\<noteq> 0 \\<Longrightarrow>\n    diag_block_mat\n     (map (\\<lambda>a. mat (Suc 0) (Suc 0) (\\<lambda>_. a)) (a # as)) $$\n    (i, j) =\n    (0::'a)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. j \\<noteq> 0 \\<Longrightarrow>\n    diag_block_mat\n     (map (\\<lambda>a. mat (Suc 0) (Suc 0) (\\<lambda>_. a)) (a # as)) $$\n    (i, j) =\n    (0::'a)", "case False"], ["proof (state)\nthis:\n  j \\<noteq> 0\n\ngoal (1 subgoal):\n 1. j \\<noteq> 0 \\<Longrightarrow>\n    diag_block_mat\n     (map (\\<lambda>a. mat (Suc 0) (Suc 0) (\\<lambda>_. a)) (a # as)) $$\n    (i, j) =\n    (0::'a)", "have ir3: \"i-1 < dim_row ?AS\" and jc3: \"j-1 < dim_col ?AS\""], ["proof (prove)\ngoal (1 subgoal):\n 1. i - 1\n    < dim_row\n       (diag_block_mat\n         (map (\\<lambda>a. mat (Suc 0) (Suc 0) (\\<lambda>_. a)) as)) &&&\n    j - 1\n    < dim_col\n       (diag_block_mat\n         (map (\\<lambda>a. mat (Suc 0) (Suc 0) (\\<lambda>_. a)) as))", "using ir2 jc2 i0 False"], ["proof (prove)\nusing this:\n  i < 1 +\n      dim_row\n       (diag_block_mat\n         (map (\\<lambda>a. mat (Suc 0) (Suc 0) (\\<lambda>_. a)) as))\n  j < 1 +\n      dim_col\n       (diag_block_mat\n         (map (\\<lambda>a. mat (Suc 0) (Suc 0) (\\<lambda>_. a)) as))\n  i \\<noteq> 0\n  j \\<noteq> 0\n\ngoal (1 subgoal):\n 1. i - 1\n    < dim_row\n       (diag_block_mat\n         (map (\\<lambda>a. mat (Suc 0) (Suc 0) (\\<lambda>_. a)) as)) &&&\n    j - 1\n    < dim_col\n       (diag_block_mat\n         (map (\\<lambda>a. mat (Suc 0) (Suc 0) (\\<lambda>_. a)) as))", "by auto"], ["proof (state)\nthis:\n  i - 1\n  < dim_row\n     (diag_block_mat\n       (map (\\<lambda>a. mat (Suc 0) (Suc 0) (\\<lambda>_. a)) as))\n  j - 1\n  < dim_col\n     (diag_block_mat\n       (map (\\<lambda>a. mat (Suc 0) (Suc 0) (\\<lambda>_. a)) as))\n\ngoal (1 subgoal):\n 1. j \\<noteq> 0 \\<Longrightarrow>\n    diag_block_mat\n     (map (\\<lambda>a. mat (Suc 0) (Suc 0) (\\<lambda>_. a)) (a # as)) $$\n    (i, j) =\n    (0::'a)", "have IH: \"\\<And>i j. i < dim_row ?AS \\<Longrightarrow> j < dim_col ?AS \\<Longrightarrow> i \\<noteq> j \\<Longrightarrow>\n                ?AS $$ (i,j) = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>i < dim_row\n                     (diag_block_mat\n                       (map (\\<lambda>a.\n                                mat (Suc 0) (Suc 0) (\\<lambda>_. a))\n                         as));\n        j < dim_col\n             (diag_block_mat\n               (map (\\<lambda>a. mat (Suc 0) (Suc 0) (\\<lambda>_. a)) as));\n        i \\<noteq> j\\<rbrakk>\n       \\<Longrightarrow> diag_block_mat\n                          (map (\\<lambda>a.\n                                   mat (Suc 0) (Suc 0) (\\<lambda>_. a))\n                            as) $$\n                         (i, j) =\n                         (0::'a)", "using Cons"], ["proof (prove)\nusing this:\n  diagonal_mat\n   (diag_block_mat\n     (map (\\<lambda>a. mat (Suc 0) (Suc 0) (\\<lambda>_. a)) as))\n\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>i < dim_row\n                     (diag_block_mat\n                       (map (\\<lambda>a.\n                                mat (Suc 0) (Suc 0) (\\<lambda>_. a))\n                         as));\n        j < dim_col\n             (diag_block_mat\n               (map (\\<lambda>a. mat (Suc 0) (Suc 0) (\\<lambda>_. a)) as));\n        i \\<noteq> j\\<rbrakk>\n       \\<Longrightarrow> diag_block_mat\n                          (map (\\<lambda>a.\n                                   mat (Suc 0) (Suc 0) (\\<lambda>_. a))\n                            as) $$\n                         (i, j) =\n                         (0::'a)", "unfolding diagonal_mat_def"], ["proof (prove)\nusing this:\n  \\<forall>i<dim_row\n              (diag_block_mat\n                (map (\\<lambda>a. mat (Suc 0) (Suc 0) (\\<lambda>_. a)) as)).\n     \\<forall>j<dim_col\n                 (diag_block_mat\n                   (map (\\<lambda>a. mat (Suc 0) (Suc 0) (\\<lambda>_. a))\n                     as)).\n        i \\<noteq> j \\<longrightarrow>\n        diag_block_mat\n         (map (\\<lambda>a. mat (Suc 0) (Suc 0) (\\<lambda>_. a)) as) $$\n        (i, j) =\n        (0::'a)\n\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>i < dim_row\n                     (diag_block_mat\n                       (map (\\<lambda>a.\n                                mat (Suc 0) (Suc 0) (\\<lambda>_. a))\n                         as));\n        j < dim_col\n             (diag_block_mat\n               (map (\\<lambda>a. mat (Suc 0) (Suc 0) (\\<lambda>_. a)) as));\n        i \\<noteq> j\\<rbrakk>\n       \\<Longrightarrow> diag_block_mat\n                          (map (\\<lambda>a.\n                                   mat (Suc 0) (Suc 0) (\\<lambda>_. a))\n                            as) $$\n                         (i, j) =\n                         (0::'a)", "by auto"], ["proof (state)\nthis:\n  \\<lbrakk>?i1\n           < dim_row\n              (diag_block_mat\n                (map (\\<lambda>a. mat (Suc 0) (Suc 0) (\\<lambda>_. a)) as));\n   ?j1\n   < dim_col\n      (diag_block_mat\n        (map (\\<lambda>a. mat (Suc 0) (Suc 0) (\\<lambda>_. a)) as));\n   ?i1 \\<noteq> ?j1\\<rbrakk>\n  \\<Longrightarrow> diag_block_mat\n                     (map (\\<lambda>a. mat (Suc 0) (Suc 0) (\\<lambda>_. a))\n                       as) $$\n                    (?i1, ?j1) =\n                    (0::'a)\n\ngoal (1 subgoal):\n 1. j \\<noteq> 0 \\<Longrightarrow>\n    diag_block_mat\n     (map (\\<lambda>a. mat (Suc 0) (Suc 0) (\\<lambda>_. a)) (a # as)) $$\n    (i, j) =\n    (0::'a)", "have \"?AS $$ (i-1,j-1) = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. diag_block_mat\n     (map (\\<lambda>a. mat (Suc 0) (Suc 0) (\\<lambda>_. a)) as) $$\n    (i - 1, j - 1) =\n    (0::'a)", "using IH[OF ir3 jc3] i0 False ij"], ["proof (prove)\nusing this:\n  i - 1 \\<noteq> j - 1 \\<Longrightarrow>\n  diag_block_mat\n   (map (\\<lambda>a. mat (Suc 0) (Suc 0) (\\<lambda>_. a)) as) $$\n  (i - 1, j - 1) =\n  (0::'a)\n  i \\<noteq> 0\n  j \\<noteq> 0\n  i \\<noteq> j\n\ngoal (1 subgoal):\n 1. diag_block_mat\n     (map (\\<lambda>a. mat (Suc 0) (Suc 0) (\\<lambda>_. a)) as) $$\n    (i - 1, j - 1) =\n    (0::'a)", "by auto"], ["proof (state)\nthis:\n  diag_block_mat\n   (map (\\<lambda>a. mat (Suc 0) (Suc 0) (\\<lambda>_. a)) as) $$\n  (i - 1, j - 1) =\n  (0::'a)\n\ngoal (1 subgoal):\n 1. j \\<noteq> 0 \\<Longrightarrow>\n    diag_block_mat\n     (map (\\<lambda>a. mat (Suc 0) (Suc 0) (\\<lambda>_. a)) (a # as)) $$\n    (i, j) =\n    (0::'a)", "thus ?thesis"], ["proof (prove)\nusing this:\n  diag_block_mat\n   (map (\\<lambda>a. mat (Suc 0) (Suc 0) (\\<lambda>_. a)) as) $$\n  (i - 1, j - 1) =\n  (0::'a)\n\ngoal (1 subgoal):\n 1. diag_block_mat\n     (map (\\<lambda>a. mat (Suc 0) (Suc 0) (\\<lambda>_. a)) (a # as)) $$\n    (i, j) =\n    (0::'a)", "using ir jc ij"], ["proof (prove)\nusing this:\n  diag_block_mat\n   (map (\\<lambda>a. mat (Suc 0) (Suc 0) (\\<lambda>_. a)) as) $$\n  (i - 1, j - 1) =\n  (0::'a)\n  i < dim_row\n       (diag_block_mat\n         (map (\\<lambda>a. mat (Suc 0) (Suc 0) (\\<lambda>_. a)) (a # as)))\n  j < dim_col\n       (diag_block_mat\n         (map (\\<lambda>a. mat (Suc 0) (Suc 0) (\\<lambda>_. a)) (a # as)))\n  i \\<noteq> j\n\ngoal (1 subgoal):\n 1. diag_block_mat\n     (map (\\<lambda>a. mat (Suc 0) (Suc 0) (\\<lambda>_. a)) (a # as)) $$\n    (i, j) =\n    (0::'a)", "by (simp add: Let_def)"], ["proof (state)\nthis:\n  diag_block_mat\n   (map (\\<lambda>a. mat (Suc 0) (Suc 0) (\\<lambda>_. a)) (a # as)) $$\n  (i, j) =\n  (0::'a)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  diag_block_mat\n   (map (\\<lambda>a. mat (Suc 0) (Suc 0) (\\<lambda>_. a)) (a # as)) $$\n  (i, j) =\n  (0::'a)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  diag_block_mat\n   (map (\\<lambda>a. mat (Suc 0) (Suc 0) (\\<lambda>_. a)) (a # as)) $$\n  (i, j) =\n  (0::'a)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  diagonal_mat\n   (diag_block_mat\n     (map (\\<lambda>a. mat (Suc 0) (Suc 0) (\\<lambda>_. a)) (a # as)))\n\ngoal:\nNo subgoals!", "qed"], ["", "definition orthogonal_mat :: \"'a::semiring_0 mat \\<Rightarrow> bool\"\n  where \"orthogonal_mat A \\<equiv>\n    let B = transpose_mat A * A in\n    diagonal_mat B \\<and> (\\<forall>i<dim_col A. B $$ (i,i) \\<noteq> 0)\""], ["", "lemma orthogonal_matD[elim]:\n  \"orthogonal_mat A \\<Longrightarrow>\n   i < dim_col A \\<Longrightarrow> j < dim_col A \\<Longrightarrow> (col A i \\<bullet> col A j = 0) = (i \\<noteq> j)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>orthogonal_mat A; i < dim_col A; j < dim_col A\\<rbrakk>\n    \\<Longrightarrow> (col A i \\<bullet> col A j = (0::'a)) = (i \\<noteq> j)", "unfolding orthogonal_mat_def diagonal_mat_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>let B = transpose_mat A * A\n             in (\\<forall>i<dim_row B.\n                    \\<forall>j<dim_col B.\n                       i \\<noteq> j \\<longrightarrow>\n                       B $$ (i, j) = (0::'a)) \\<and>\n                (\\<forall>i<dim_col A. B $$ (i, i) \\<noteq> (0::'a));\n     i < dim_col A; j < dim_col A\\<rbrakk>\n    \\<Longrightarrow> (col A i \\<bullet> col A j = (0::'a)) = (i \\<noteq> j)", "by auto"], ["", "lemma orthogonal_matI[intro]:\n  \"(\\<And>i j. i < dim_col A \\<Longrightarrow> j < dim_col A \\<Longrightarrow> (col A i \\<bullet> col A j = 0) = (i \\<noteq> j)) \\<Longrightarrow>\n   orthogonal_mat A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>i j.\n        \\<lbrakk>i < dim_col A; j < dim_col A\\<rbrakk>\n        \\<Longrightarrow> (col A i \\<bullet> col A j = (0::'a)) =\n                          (i \\<noteq> j)) \\<Longrightarrow>\n    orthogonal_mat A", "unfolding orthogonal_mat_def diagonal_mat_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>i j.\n        \\<lbrakk>i < dim_col A; j < dim_col A\\<rbrakk>\n        \\<Longrightarrow> (col A i \\<bullet> col A j = (0::'a)) =\n                          (i \\<noteq> j)) \\<Longrightarrow>\n    let B = transpose_mat A * A\n    in (\\<forall>i<dim_row B.\n           \\<forall>j<dim_col B.\n              i \\<noteq> j \\<longrightarrow> B $$ (i, j) = (0::'a)) \\<and>\n       (\\<forall>i<dim_col A. B $$ (i, i) \\<noteq> (0::'a))", "by auto"], ["", "definition orthogonal :: \"'a::semiring_0 vec list \\<Rightarrow> bool\"\n  where \"orthogonal vs \\<equiv>\n    \\<forall>i j. i < length vs \\<longrightarrow> j < length vs \\<longrightarrow>\n      (vs ! i \\<bullet> vs ! j = 0) = (i \\<noteq> j)\""], ["", "lemma orthogonalD[elim]:\n  \"orthogonal vs \\<Longrightarrow> i < length vs \\<Longrightarrow> j < length vs \\<Longrightarrow>\n  (nth vs i \\<bullet> nth vs j = 0) = (i \\<noteq> j)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>orthogonal vs; i < length vs; j < length vs\\<rbrakk>\n    \\<Longrightarrow> (vs ! i \\<bullet> vs ! j = (0::'a)) = (i \\<noteq> j)", "unfolding orthogonal_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>i j.\n                i < length vs \\<longrightarrow>\n                j < length vs \\<longrightarrow>\n                (vs ! i \\<bullet> vs ! j = (0::'a)) = (i \\<noteq> j);\n     i < length vs; j < length vs\\<rbrakk>\n    \\<Longrightarrow> (vs ! i \\<bullet> vs ! j = (0::'a)) = (i \\<noteq> j)", "by auto"], ["", "lemma orthogonalI[intro]:\n  \"(\\<And>i j. i < length vs \\<Longrightarrow> j < length vs \\<Longrightarrow> (nth vs i \\<bullet> nth vs j = 0) = (i \\<noteq> j)) \\<Longrightarrow>\n   orthogonal vs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>i j.\n        \\<lbrakk>i < length vs; j < length vs\\<rbrakk>\n        \\<Longrightarrow> (vs ! i \\<bullet> vs ! j = (0::'a)) =\n                          (i \\<noteq> j)) \\<Longrightarrow>\n    orthogonal vs", "unfolding orthogonal_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>i j.\n        \\<lbrakk>i < length vs; j < length vs\\<rbrakk>\n        \\<Longrightarrow> (vs ! i \\<bullet> vs ! j = (0::'a)) =\n                          (i \\<noteq> j)) \\<Longrightarrow>\n    \\<forall>i j.\n       i < length vs \\<longrightarrow>\n       j < length vs \\<longrightarrow>\n       (vs ! i \\<bullet> vs ! j = (0::'a)) = (i \\<noteq> j)", "by auto"], ["", "lemma transpose_four_block_mat: assumes *: \"A \\<in> carrier_mat nr1 nc1\" \"B \\<in> carrier_mat nr1 nc2\"\n  \"C \\<in> carrier_mat nr2 nc1\" \"D \\<in> carrier_mat nr2 nc2\"\n  shows \"transpose_mat (four_block_mat A B C D) =\n    four_block_mat (transpose_mat A) (transpose_mat C) (transpose_mat B) (transpose_mat D)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. transpose_mat (four_block_mat A B C D) =\n    four_block_mat (transpose_mat A) (transpose_mat C) (transpose_mat B)\n     (transpose_mat D)", "by (rule eq_matI, insert *, auto)"], ["", "lemma zero_transpose_mat[simp]: \"transpose_mat (0\\<^sub>m n m) = (0\\<^sub>m m n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. transpose_mat (0\\<^sub>m n m) = 0\\<^sub>m m n", "by (rule eq_matI, auto)"], ["", "lemma upper_triangular_four_block: assumes AD: \"A \\<in> carrier_mat n n\" \"D \\<in> carrier_mat m m\"\n  and ut: \"upper_triangular A\" \"upper_triangular D\"\n  shows \"upper_triangular (four_block_mat A B (0\\<^sub>m m n) D)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. upper_triangular (four_block_mat A B (0\\<^sub>m m n) D)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. upper_triangular (four_block_mat A B (0\\<^sub>m m n) D)", "let ?C = \"four_block_mat A B (0\\<^sub>m m n) D\""], ["proof (state)\ngoal (1 subgoal):\n 1. upper_triangular (four_block_mat A B (0\\<^sub>m m n) D)", "from AD"], ["proof (chain)\npicking this:\n  A \\<in> carrier_mat n n\n  D \\<in> carrier_mat m m", "have dim: \"dim_row ?C = n + m\" \"dim_col ?C = n + m\" \"dim_row A = n\""], ["proof (prove)\nusing this:\n  A \\<in> carrier_mat n n\n  D \\<in> carrier_mat m m\n\ngoal (1 subgoal):\n 1. dim_row (four_block_mat A B (0\\<^sub>m m n) D) = n + m &&&\n    dim_col (four_block_mat A B (0\\<^sub>m m n) D) = n + m &&& dim_row A = n", "by auto"], ["proof (state)\nthis:\n  dim_row (four_block_mat A B (0\\<^sub>m m n) D) = n + m\n  dim_col (four_block_mat A B (0\\<^sub>m m n) D) = n + m\n  dim_row A = n\n\ngoal (1 subgoal):\n 1. upper_triangular (four_block_mat A B (0\\<^sub>m m n) D)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. upper_triangular (four_block_mat A B (0\\<^sub>m m n) D)", "proof (rule upper_triangularI, unfold dim)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>j < i; i < n + m\\<rbrakk>\n       \\<Longrightarrow> four_block_mat A B (0\\<^sub>m m n) D $$ (i, j) =\n                         (0::'a)", "fix i j"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>j < i; i < n + m\\<rbrakk>\n       \\<Longrightarrow> four_block_mat A B (0\\<^sub>m m n) D $$ (i, j) =\n                         (0::'a)", "assume *: \"j < i\" \"i < n + m\""], ["proof (state)\nthis:\n  j < i\n  i < n + m\n\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>j < i; i < n + m\\<rbrakk>\n       \\<Longrightarrow> four_block_mat A B (0\\<^sub>m m n) D $$ (i, j) =\n                         (0::'a)", "show \"?C $$ (i,j) = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. four_block_mat A B (0\\<^sub>m m n) D $$ (i, j) = (0::'a)", "proof (cases \"i < n\")"], ["proof (state)\ngoal (2 subgoals):\n 1. i < n \\<Longrightarrow>\n    four_block_mat A B (0\\<^sub>m m n) D $$ (i, j) = (0::'a)\n 2. \\<not> i < n \\<Longrightarrow>\n    four_block_mat A B (0\\<^sub>m m n) D $$ (i, j) = (0::'a)", "case True"], ["proof (state)\nthis:\n  i < n\n\ngoal (2 subgoals):\n 1. i < n \\<Longrightarrow>\n    four_block_mat A B (0\\<^sub>m m n) D $$ (i, j) = (0::'a)\n 2. \\<not> i < n \\<Longrightarrow>\n    four_block_mat A B (0\\<^sub>m m n) D $$ (i, j) = (0::'a)", "with upper_triangularD[OF ut(1) *(1)] * AD"], ["proof (chain)\npicking this:\n  i < dim_row A \\<Longrightarrow> A $$ (i, j) = (0::'a)\n  j < i\n  i < n + m\n  A \\<in> carrier_mat n n\n  D \\<in> carrier_mat m m\n  i < n", "show ?thesis"], ["proof (prove)\nusing this:\n  i < dim_row A \\<Longrightarrow> A $$ (i, j) = (0::'a)\n  j < i\n  i < n + m\n  A \\<in> carrier_mat n n\n  D \\<in> carrier_mat m m\n  i < n\n\ngoal (1 subgoal):\n 1. four_block_mat A B (0\\<^sub>m m n) D $$ (i, j) = (0::'a)", "by auto"], ["proof (state)\nthis:\n  four_block_mat A B (0\\<^sub>m m n) D $$ (i, j) = (0::'a)\n\ngoal (1 subgoal):\n 1. \\<not> i < n \\<Longrightarrow>\n    four_block_mat A B (0\\<^sub>m m n) D $$ (i, j) = (0::'a)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> i < n \\<Longrightarrow>\n    four_block_mat A B (0\\<^sub>m m n) D $$ (i, j) = (0::'a)", "case False"], ["proof (state)\nthis:\n  \\<not> i < n\n\ngoal (1 subgoal):\n 1. \\<not> i < n \\<Longrightarrow>\n    four_block_mat A B (0\\<^sub>m m n) D $$ (i, j) = (0::'a)", "note i = this"], ["proof (state)\nthis:\n  \\<not> i < n\n\ngoal (1 subgoal):\n 1. \\<not> i < n \\<Longrightarrow>\n    four_block_mat A B (0\\<^sub>m m n) D $$ (i, j) = (0::'a)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. four_block_mat A B (0\\<^sub>m m n) D $$ (i, j) = (0::'a)", "by (cases \"j < n\", insert upper_triangularD[OF ut(2)] * i AD, auto)"], ["proof (state)\nthis:\n  four_block_mat A B (0\\<^sub>m m n) D $$ (i, j) = (0::'a)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  four_block_mat A B (0\\<^sub>m m n) D $$ (i, j) = (0::'a)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  upper_triangular (four_block_mat A B (0\\<^sub>m m n) D)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma pow_four_block_mat: assumes A: \"A \\<in> carrier_mat n n\"\n  and B: \"B \\<in> carrier_mat m m\"\n  shows \"(four_block_mat A (0\\<^sub>m n m) (0\\<^sub>m m n) B) ^\\<^sub>m k =\n    four_block_mat (A ^\\<^sub>m k) (0\\<^sub>m n m) (0\\<^sub>m m n) (B ^\\<^sub>m k)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. four_block_mat A (0\\<^sub>m n m) (0\\<^sub>m m n) B ^\\<^sub>m k =\n    four_block_mat (A ^\\<^sub>m k) (0\\<^sub>m n m) (0\\<^sub>m m n)\n     (B ^\\<^sub>m k)", "proof (induct k)"], ["proof (state)\ngoal (2 subgoals):\n 1. four_block_mat A (0\\<^sub>m n m) (0\\<^sub>m m n) B ^\\<^sub>m 0 =\n    four_block_mat (A ^\\<^sub>m 0) (0\\<^sub>m n m) (0\\<^sub>m m n)\n     (B ^\\<^sub>m 0)\n 2. \\<And>k.\n       four_block_mat A (0\\<^sub>m n m) (0\\<^sub>m m n) B ^\\<^sub>m k =\n       four_block_mat (A ^\\<^sub>m k) (0\\<^sub>m n m) (0\\<^sub>m m n)\n        (B ^\\<^sub>m k) \\<Longrightarrow>\n       four_block_mat A (0\\<^sub>m n m) (0\\<^sub>m m n) B ^\\<^sub>m Suc k =\n       four_block_mat (A ^\\<^sub>m Suc k) (0\\<^sub>m n m) (0\\<^sub>m m n)\n        (B ^\\<^sub>m Suc k)", "case (Suc k)"], ["proof (state)\nthis:\n  four_block_mat A (0\\<^sub>m n m) (0\\<^sub>m m n) B ^\\<^sub>m k =\n  four_block_mat (A ^\\<^sub>m k) (0\\<^sub>m n m) (0\\<^sub>m m n)\n   (B ^\\<^sub>m k)\n\ngoal (2 subgoals):\n 1. four_block_mat A (0\\<^sub>m n m) (0\\<^sub>m m n) B ^\\<^sub>m 0 =\n    four_block_mat (A ^\\<^sub>m 0) (0\\<^sub>m n m) (0\\<^sub>m m n)\n     (B ^\\<^sub>m 0)\n 2. \\<And>k.\n       four_block_mat A (0\\<^sub>m n m) (0\\<^sub>m m n) B ^\\<^sub>m k =\n       four_block_mat (A ^\\<^sub>m k) (0\\<^sub>m n m) (0\\<^sub>m m n)\n        (B ^\\<^sub>m k) \\<Longrightarrow>\n       four_block_mat A (0\\<^sub>m n m) (0\\<^sub>m m n) B ^\\<^sub>m Suc k =\n       four_block_mat (A ^\\<^sub>m Suc k) (0\\<^sub>m n m) (0\\<^sub>m m n)\n        (B ^\\<^sub>m Suc k)", "let ?FB = \"\\<lambda> A B. four_block_mat A (0\\<^sub>m n m) (0\\<^sub>m m n) B\""], ["proof (state)\ngoal (2 subgoals):\n 1. four_block_mat A (0\\<^sub>m n m) (0\\<^sub>m m n) B ^\\<^sub>m 0 =\n    four_block_mat (A ^\\<^sub>m 0) (0\\<^sub>m n m) (0\\<^sub>m m n)\n     (B ^\\<^sub>m 0)\n 2. \\<And>k.\n       four_block_mat A (0\\<^sub>m n m) (0\\<^sub>m m n) B ^\\<^sub>m k =\n       four_block_mat (A ^\\<^sub>m k) (0\\<^sub>m n m) (0\\<^sub>m m n)\n        (B ^\\<^sub>m k) \\<Longrightarrow>\n       four_block_mat A (0\\<^sub>m n m) (0\\<^sub>m m n) B ^\\<^sub>m Suc k =\n       four_block_mat (A ^\\<^sub>m Suc k) (0\\<^sub>m n m) (0\\<^sub>m m n)\n        (B ^\\<^sub>m Suc k)", "let ?A = \"?FB A B\""], ["proof (state)\ngoal (2 subgoals):\n 1. four_block_mat A (0\\<^sub>m n m) (0\\<^sub>m m n) B ^\\<^sub>m 0 =\n    four_block_mat (A ^\\<^sub>m 0) (0\\<^sub>m n m) (0\\<^sub>m m n)\n     (B ^\\<^sub>m 0)\n 2. \\<And>k.\n       four_block_mat A (0\\<^sub>m n m) (0\\<^sub>m m n) B ^\\<^sub>m k =\n       four_block_mat (A ^\\<^sub>m k) (0\\<^sub>m n m) (0\\<^sub>m m n)\n        (B ^\\<^sub>m k) \\<Longrightarrow>\n       four_block_mat A (0\\<^sub>m n m) (0\\<^sub>m m n) B ^\\<^sub>m Suc k =\n       four_block_mat (A ^\\<^sub>m Suc k) (0\\<^sub>m n m) (0\\<^sub>m m n)\n        (B ^\\<^sub>m Suc k)", "let ?B = \"?FB (A ^\\<^sub>m k) (B ^\\<^sub>m k)\""], ["proof (state)\ngoal (2 subgoals):\n 1. four_block_mat A (0\\<^sub>m n m) (0\\<^sub>m m n) B ^\\<^sub>m 0 =\n    four_block_mat (A ^\\<^sub>m 0) (0\\<^sub>m n m) (0\\<^sub>m m n)\n     (B ^\\<^sub>m 0)\n 2. \\<And>k.\n       four_block_mat A (0\\<^sub>m n m) (0\\<^sub>m m n) B ^\\<^sub>m k =\n       four_block_mat (A ^\\<^sub>m k) (0\\<^sub>m n m) (0\\<^sub>m m n)\n        (B ^\\<^sub>m k) \\<Longrightarrow>\n       four_block_mat A (0\\<^sub>m n m) (0\\<^sub>m m n) B ^\\<^sub>m Suc k =\n       four_block_mat (A ^\\<^sub>m Suc k) (0\\<^sub>m n m) (0\\<^sub>m m n)\n        (B ^\\<^sub>m Suc k)", "from A B"], ["proof (chain)\npicking this:\n  A \\<in> carrier_mat n n\n  B \\<in> carrier_mat m m", "have Ak: \"A ^\\<^sub>m k \\<in> carrier_mat n n\" and Bk: \"B ^\\<^sub>m k \\<in> carrier_mat m m\""], ["proof (prove)\nusing this:\n  A \\<in> carrier_mat n n\n  B \\<in> carrier_mat m m\n\ngoal (1 subgoal):\n 1. A ^\\<^sub>m k \\<in> carrier_mat n n &&&\n    B ^\\<^sub>m k \\<in> carrier_mat m m", "by auto"], ["proof (state)\nthis:\n  A ^\\<^sub>m k \\<in> carrier_mat n n\n  B ^\\<^sub>m k \\<in> carrier_mat m m\n\ngoal (2 subgoals):\n 1. four_block_mat A (0\\<^sub>m n m) (0\\<^sub>m m n) B ^\\<^sub>m 0 =\n    four_block_mat (A ^\\<^sub>m 0) (0\\<^sub>m n m) (0\\<^sub>m m n)\n     (B ^\\<^sub>m 0)\n 2. \\<And>k.\n       four_block_mat A (0\\<^sub>m n m) (0\\<^sub>m m n) B ^\\<^sub>m k =\n       four_block_mat (A ^\\<^sub>m k) (0\\<^sub>m n m) (0\\<^sub>m m n)\n        (B ^\\<^sub>m k) \\<Longrightarrow>\n       four_block_mat A (0\\<^sub>m n m) (0\\<^sub>m m n) B ^\\<^sub>m Suc k =\n       four_block_mat (A ^\\<^sub>m Suc k) (0\\<^sub>m n m) (0\\<^sub>m m n)\n        (B ^\\<^sub>m Suc k)", "have \"?A ^\\<^sub>m Suc k = ?A ^\\<^sub>m k * ?A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. four_block_mat A (0\\<^sub>m n m) (0\\<^sub>m m n) B ^\\<^sub>m Suc k =\n    four_block_mat A (0\\<^sub>m n m) (0\\<^sub>m m n) B ^\\<^sub>m k *\n    four_block_mat A (0\\<^sub>m n m) (0\\<^sub>m m n) B", "by simp"], ["proof (state)\nthis:\n  four_block_mat A (0\\<^sub>m n m) (0\\<^sub>m m n) B ^\\<^sub>m Suc k =\n  four_block_mat A (0\\<^sub>m n m) (0\\<^sub>m m n) B ^\\<^sub>m k *\n  four_block_mat A (0\\<^sub>m n m) (0\\<^sub>m m n) B\n\ngoal (2 subgoals):\n 1. four_block_mat A (0\\<^sub>m n m) (0\\<^sub>m m n) B ^\\<^sub>m 0 =\n    four_block_mat (A ^\\<^sub>m 0) (0\\<^sub>m n m) (0\\<^sub>m m n)\n     (B ^\\<^sub>m 0)\n 2. \\<And>k.\n       four_block_mat A (0\\<^sub>m n m) (0\\<^sub>m m n) B ^\\<^sub>m k =\n       four_block_mat (A ^\\<^sub>m k) (0\\<^sub>m n m) (0\\<^sub>m m n)\n        (B ^\\<^sub>m k) \\<Longrightarrow>\n       four_block_mat A (0\\<^sub>m n m) (0\\<^sub>m m n) B ^\\<^sub>m Suc k =\n       four_block_mat (A ^\\<^sub>m Suc k) (0\\<^sub>m n m) (0\\<^sub>m m n)\n        (B ^\\<^sub>m Suc k)", "also"], ["proof (state)\nthis:\n  four_block_mat A (0\\<^sub>m n m) (0\\<^sub>m m n) B ^\\<^sub>m Suc k =\n  four_block_mat A (0\\<^sub>m n m) (0\\<^sub>m m n) B ^\\<^sub>m k *\n  four_block_mat A (0\\<^sub>m n m) (0\\<^sub>m m n) B\n\ngoal (2 subgoals):\n 1. four_block_mat A (0\\<^sub>m n m) (0\\<^sub>m m n) B ^\\<^sub>m 0 =\n    four_block_mat (A ^\\<^sub>m 0) (0\\<^sub>m n m) (0\\<^sub>m m n)\n     (B ^\\<^sub>m 0)\n 2. \\<And>k.\n       four_block_mat A (0\\<^sub>m n m) (0\\<^sub>m m n) B ^\\<^sub>m k =\n       four_block_mat (A ^\\<^sub>m k) (0\\<^sub>m n m) (0\\<^sub>m m n)\n        (B ^\\<^sub>m k) \\<Longrightarrow>\n       four_block_mat A (0\\<^sub>m n m) (0\\<^sub>m m n) B ^\\<^sub>m Suc k =\n       four_block_mat (A ^\\<^sub>m Suc k) (0\\<^sub>m n m) (0\\<^sub>m m n)\n        (B ^\\<^sub>m Suc k)", "have \"?A ^\\<^sub>m k = ?B \""], ["proof (prove)\ngoal (1 subgoal):\n 1. four_block_mat A (0\\<^sub>m n m) (0\\<^sub>m m n) B ^\\<^sub>m k =\n    four_block_mat (A ^\\<^sub>m k) (0\\<^sub>m n m) (0\\<^sub>m m n)\n     (B ^\\<^sub>m k)", "by (rule Suc)"], ["proof (state)\nthis:\n  four_block_mat A (0\\<^sub>m n m) (0\\<^sub>m m n) B ^\\<^sub>m k =\n  four_block_mat (A ^\\<^sub>m k) (0\\<^sub>m n m) (0\\<^sub>m m n)\n   (B ^\\<^sub>m k)\n\ngoal (2 subgoals):\n 1. four_block_mat A (0\\<^sub>m n m) (0\\<^sub>m m n) B ^\\<^sub>m 0 =\n    four_block_mat (A ^\\<^sub>m 0) (0\\<^sub>m n m) (0\\<^sub>m m n)\n     (B ^\\<^sub>m 0)\n 2. \\<And>k.\n       four_block_mat A (0\\<^sub>m n m) (0\\<^sub>m m n) B ^\\<^sub>m k =\n       four_block_mat (A ^\\<^sub>m k) (0\\<^sub>m n m) (0\\<^sub>m m n)\n        (B ^\\<^sub>m k) \\<Longrightarrow>\n       four_block_mat A (0\\<^sub>m n m) (0\\<^sub>m m n) B ^\\<^sub>m Suc k =\n       four_block_mat (A ^\\<^sub>m Suc k) (0\\<^sub>m n m) (0\\<^sub>m m n)\n        (B ^\\<^sub>m Suc k)", "also"], ["proof (state)\nthis:\n  four_block_mat A (0\\<^sub>m n m) (0\\<^sub>m m n) B ^\\<^sub>m k =\n  four_block_mat (A ^\\<^sub>m k) (0\\<^sub>m n m) (0\\<^sub>m m n)\n   (B ^\\<^sub>m k)\n\ngoal (2 subgoals):\n 1. four_block_mat A (0\\<^sub>m n m) (0\\<^sub>m m n) B ^\\<^sub>m 0 =\n    four_block_mat (A ^\\<^sub>m 0) (0\\<^sub>m n m) (0\\<^sub>m m n)\n     (B ^\\<^sub>m 0)\n 2. \\<And>k.\n       four_block_mat A (0\\<^sub>m n m) (0\\<^sub>m m n) B ^\\<^sub>m k =\n       four_block_mat (A ^\\<^sub>m k) (0\\<^sub>m n m) (0\\<^sub>m m n)\n        (B ^\\<^sub>m k) \\<Longrightarrow>\n       four_block_mat A (0\\<^sub>m n m) (0\\<^sub>m m n) B ^\\<^sub>m Suc k =\n       four_block_mat (A ^\\<^sub>m Suc k) (0\\<^sub>m n m) (0\\<^sub>m m n)\n        (B ^\\<^sub>m Suc k)", "have \"?B * ?A = ?FB (A ^\\<^sub>m Suc k) (B ^\\<^sub>m Suc k)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. four_block_mat (A ^\\<^sub>m k) (0\\<^sub>m n m) (0\\<^sub>m m n)\n     (B ^\\<^sub>m k) *\n    four_block_mat A (0\\<^sub>m n m) (0\\<^sub>m m n) B =\n    four_block_mat (A ^\\<^sub>m Suc k) (0\\<^sub>m n m) (0\\<^sub>m m n)\n     (B ^\\<^sub>m Suc k)", "by (subst mult_four_block_mat[OF Ak _ _ Bk A _ _ B], insert A B, auto)"], ["proof (state)\nthis:\n  four_block_mat (A ^\\<^sub>m k) (0\\<^sub>m n m) (0\\<^sub>m m n)\n   (B ^\\<^sub>m k) *\n  four_block_mat A (0\\<^sub>m n m) (0\\<^sub>m m n) B =\n  four_block_mat (A ^\\<^sub>m Suc k) (0\\<^sub>m n m) (0\\<^sub>m m n)\n   (B ^\\<^sub>m Suc k)\n\ngoal (2 subgoals):\n 1. four_block_mat A (0\\<^sub>m n m) (0\\<^sub>m m n) B ^\\<^sub>m 0 =\n    four_block_mat (A ^\\<^sub>m 0) (0\\<^sub>m n m) (0\\<^sub>m m n)\n     (B ^\\<^sub>m 0)\n 2. \\<And>k.\n       four_block_mat A (0\\<^sub>m n m) (0\\<^sub>m m n) B ^\\<^sub>m k =\n       four_block_mat (A ^\\<^sub>m k) (0\\<^sub>m n m) (0\\<^sub>m m n)\n        (B ^\\<^sub>m k) \\<Longrightarrow>\n       four_block_mat A (0\\<^sub>m n m) (0\\<^sub>m m n) B ^\\<^sub>m Suc k =\n       four_block_mat (A ^\\<^sub>m Suc k) (0\\<^sub>m n m) (0\\<^sub>m m n)\n        (B ^\\<^sub>m Suc k)", "finally"], ["proof (chain)\npicking this:\n  four_block_mat A (0\\<^sub>m n m) (0\\<^sub>m m n) B ^\\<^sub>m Suc k =\n  four_block_mat (A ^\\<^sub>m Suc k) (0\\<^sub>m n m) (0\\<^sub>m m n)\n   (B ^\\<^sub>m Suc k)", "show ?case"], ["proof (prove)\nusing this:\n  four_block_mat A (0\\<^sub>m n m) (0\\<^sub>m m n) B ^\\<^sub>m Suc k =\n  four_block_mat (A ^\\<^sub>m Suc k) (0\\<^sub>m n m) (0\\<^sub>m m n)\n   (B ^\\<^sub>m Suc k)\n\ngoal (1 subgoal):\n 1. four_block_mat A (0\\<^sub>m n m) (0\\<^sub>m m n) B ^\\<^sub>m Suc k =\n    four_block_mat (A ^\\<^sub>m Suc k) (0\\<^sub>m n m) (0\\<^sub>m m n)\n     (B ^\\<^sub>m Suc k)", "."], ["proof (state)\nthis:\n  four_block_mat A (0\\<^sub>m n m) (0\\<^sub>m m n) B ^\\<^sub>m Suc k =\n  four_block_mat (A ^\\<^sub>m Suc k) (0\\<^sub>m n m) (0\\<^sub>m m n)\n   (B ^\\<^sub>m Suc k)\n\ngoal (1 subgoal):\n 1. four_block_mat A (0\\<^sub>m n m) (0\\<^sub>m m n) B ^\\<^sub>m 0 =\n    four_block_mat (A ^\\<^sub>m 0) (0\\<^sub>m n m) (0\\<^sub>m m n)\n     (B ^\\<^sub>m 0)", "qed (insert A B, auto)"], ["", "lemma uminus_scalar_prod:\n  assumes [simp]: \"v : carrier_vec n\" \"w : carrier_vec n\"\n  shows \"- ((v::'a::field vec) \\<bullet> w) = (- v) \\<bullet> w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. - (v \\<bullet> w) = - v \\<bullet> w", "unfolding scalar_prod_def uminus_vec_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. - (\\<Sum>i = 0..<dim_vec w. v $ i * w $ i) =\n    (\\<Sum>i = 0..<dim_vec w.\n        vec (dim_vec v) (\\<lambda>i. - v $ i) $ i * w $ i)", "apply (subst sum_negf[symmetric])"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>x = 0..<dim_vec w. - (v $ x * w $ x)) =\n    (\\<Sum>i = 0..<dim_vec w.\n        vec (dim_vec v) (\\<lambda>i. - v $ i) $ i * w $ i)", "proof (rule sum.cong[OF refl])"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {0..<dim_vec w} \\<Longrightarrow>\n       - (v $ x * w $ x) = vec (dim_vec v) (\\<lambda>i. - v $ i) $ x * w $ x", "fix i"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {0..<dim_vec w} \\<Longrightarrow>\n       - (v $ x * w $ x) = vec (dim_vec v) (\\<lambda>i. - v $ i) $ x * w $ x", "assume i: \"i : {0 ..<dim_vec w}\""], ["proof (state)\nthis:\n  i \\<in> {0..<dim_vec w}\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {0..<dim_vec w} \\<Longrightarrow>\n       - (v $ x * w $ x) = vec (dim_vec v) (\\<lambda>i. - v $ i) $ x * w $ x", "have [simp]: \"dim_vec v = n\" \"dim_vec w = n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dim_vec v = n &&& dim_vec w = n", "by auto"], ["proof (state)\nthis:\n  dim_vec v = n\n  dim_vec w = n\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {0..<dim_vec w} \\<Longrightarrow>\n       - (v $ x * w $ x) = vec (dim_vec v) (\\<lambda>i. - v $ i) $ x * w $ x", "show \"- (v $ i * w $ i) = vec (dim_vec v) (\\<lambda>i. - v $ i) $ i * w $ i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. - (v $ i * w $ i) = vec (dim_vec v) (\\<lambda>i. - v $ i) $ i * w $ i", "unfolding minus_mult_left"], ["proof (prove)\ngoal (1 subgoal):\n 1. - v $ i * w $ i = vec (dim_vec v) (\\<lambda>i. - v $ i) $ i * w $ i", "using i"], ["proof (prove)\nusing this:\n  i \\<in> {0..<dim_vec w}\n\ngoal (1 subgoal):\n 1. - v $ i * w $ i = vec (dim_vec v) (\\<lambda>i. - v $ i) $ i * w $ i", "by auto"], ["proof (state)\nthis:\n  - (v $ i * w $ i) = vec (dim_vec v) (\\<lambda>i. - v $ i) $ i * w $ i\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma append_vec_eq:\n  assumes [simp]: \"v : carrier_vec n\" \"v' : carrier_vec n\"\n  shows [simp]: \"v @\\<^sub>v w = v' @\\<^sub>v w' \\<longleftrightarrow> v = v' \\<and> w = w'\" (is \"?L \\<longleftrightarrow> ?R\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. (v @\\<^sub>v w = v' @\\<^sub>v w') = (v = v' \\<and> w = w')", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. v @\\<^sub>v w = v' @\\<^sub>v w' \\<Longrightarrow> v = v' \\<and> w = w'\n 2. v = v' \\<and> w = w' \\<Longrightarrow> v @\\<^sub>v w = v' @\\<^sub>v w'", "have [simp]: \"dim_vec v = n\" \"dim_vec v' = n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dim_vec v = n &&& dim_vec v' = n", "by auto"], ["proof (state)\nthis:\n  dim_vec v = n\n  dim_vec v' = n\n\ngoal (2 subgoals):\n 1. v @\\<^sub>v w = v' @\\<^sub>v w' \\<Longrightarrow> v = v' \\<and> w = w'\n 2. v = v' \\<and> w = w' \\<Longrightarrow> v @\\<^sub>v w = v' @\\<^sub>v w'", "{"], ["proof (state)\nthis:\n  dim_vec v = n\n  dim_vec v' = n\n\ngoal (2 subgoals):\n 1. v @\\<^sub>v w = v' @\\<^sub>v w' \\<Longrightarrow> v = v' \\<and> w = w'\n 2. v = v' \\<and> w = w' \\<Longrightarrow> v @\\<^sub>v w = v' @\\<^sub>v w'", "assume L: ?L"], ["proof (state)\nthis:\n  v @\\<^sub>v w = v' @\\<^sub>v w'\n\ngoal (2 subgoals):\n 1. v @\\<^sub>v w = v' @\\<^sub>v w' \\<Longrightarrow> v = v' \\<and> w = w'\n 2. v = v' \\<and> w = w' \\<Longrightarrow> v @\\<^sub>v w = v' @\\<^sub>v w'", "have vv': \"v = v'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. v = v'", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>i. i < dim_vec v' \\<Longrightarrow> v $ i = v' $ i\n 2. dim_vec v = dim_vec v'", "fix i"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>i. i < dim_vec v' \\<Longrightarrow> v $ i = v' $ i\n 2. dim_vec v = dim_vec v'", "assume i: \"i < dim_vec v'\""], ["proof (state)\nthis:\n  i < dim_vec v'\n\ngoal (2 subgoals):\n 1. \\<And>i. i < dim_vec v' \\<Longrightarrow> v $ i = v' $ i\n 2. dim_vec v = dim_vec v'", "have \"(v @\\<^sub>v w) $ i = (v' @\\<^sub>v w') $ i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (v @\\<^sub>v w) $ i = (v' @\\<^sub>v w') $ i", "using L"], ["proof (prove)\nusing this:\n  v @\\<^sub>v w = v' @\\<^sub>v w'\n\ngoal (1 subgoal):\n 1. (v @\\<^sub>v w) $ i = (v' @\\<^sub>v w') $ i", "by auto"], ["proof (state)\nthis:\n  (v @\\<^sub>v w) $ i = (v' @\\<^sub>v w') $ i\n\ngoal (2 subgoals):\n 1. \\<And>i. i < dim_vec v' \\<Longrightarrow> v $ i = v' $ i\n 2. dim_vec v = dim_vec v'", "thus \"v $ i = v' $ i\""], ["proof (prove)\nusing this:\n  (v @\\<^sub>v w) $ i = (v' @\\<^sub>v w') $ i\n\ngoal (1 subgoal):\n 1. v $ i = v' $ i", "using i"], ["proof (prove)\nusing this:\n  (v @\\<^sub>v w) $ i = (v' @\\<^sub>v w') $ i\n  i < dim_vec v'\n\ngoal (1 subgoal):\n 1. v $ i = v' $ i", "by auto"], ["proof (state)\nthis:\n  v $ i = v' $ i\n\ngoal (1 subgoal):\n 1. dim_vec v = dim_vec v'", "qed auto"], ["proof (state)\nthis:\n  v = v'\n\ngoal (2 subgoals):\n 1. v @\\<^sub>v w = v' @\\<^sub>v w' \\<Longrightarrow> v = v' \\<and> w = w'\n 2. v = v' \\<and> w = w' \\<Longrightarrow> v @\\<^sub>v w = v' @\\<^sub>v w'", "moreover"], ["proof (state)\nthis:\n  v = v'\n\ngoal (2 subgoals):\n 1. v @\\<^sub>v w = v' @\\<^sub>v w' \\<Longrightarrow> v = v' \\<and> w = w'\n 2. v = v' \\<and> w = w' \\<Longrightarrow> v @\\<^sub>v w = v' @\\<^sub>v w'", "have \"w = w'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. w = w'", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>i. i < dim_vec w' \\<Longrightarrow> w $ i = w' $ i\n 2. dim_vec w = dim_vec w'", "show \"dim_vec w = dim_vec w'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dim_vec w = dim_vec w'", "using vv' L"], ["proof (prove)\nusing this:\n  v = v'\n  v @\\<^sub>v w = v' @\\<^sub>v w'\n\ngoal (1 subgoal):\n 1. dim_vec w = dim_vec w'", "by (metis add_diff_cancel_left' index_append_vec(2))"], ["proof (state)\nthis:\n  dim_vec w = dim_vec w'\n\ngoal (1 subgoal):\n 1. \\<And>i. i < dim_vec w' \\<Longrightarrow> w $ i = w' $ i", "moreover"], ["proof (state)\nthis:\n  dim_vec w = dim_vec w'\n\ngoal (1 subgoal):\n 1. \\<And>i. i < dim_vec w' \\<Longrightarrow> w $ i = w' $ i", "fix i"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i. i < dim_vec w' \\<Longrightarrow> w $ i = w' $ i", "assume i: \"i < dim_vec w'\""], ["proof (state)\nthis:\n  i < dim_vec w'\n\ngoal (1 subgoal):\n 1. \\<And>i. i < dim_vec w' \\<Longrightarrow> w $ i = w' $ i", "have \"(v @\\<^sub>v w) $ (n + i) = (v' @\\<^sub>v w') $ (n + i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (v @\\<^sub>v w) $ (n + i) = (v' @\\<^sub>v w') $ (n + i)", "using L"], ["proof (prove)\nusing this:\n  v @\\<^sub>v w = v' @\\<^sub>v w'\n\ngoal (1 subgoal):\n 1. (v @\\<^sub>v w) $ (n + i) = (v' @\\<^sub>v w') $ (n + i)", "by auto"], ["proof (state)\nthis:\n  (v @\\<^sub>v w) $ (n + i) = (v' @\\<^sub>v w') $ (n + i)\n\ngoal (1 subgoal):\n 1. \\<And>i. i < dim_vec w' \\<Longrightarrow> w $ i = w' $ i", "ultimately"], ["proof (chain)\npicking this:\n  dim_vec w = dim_vec w'\n  (v @\\<^sub>v w) $ (n + i) = (v' @\\<^sub>v w') $ (n + i)", "show \"w $ i = w' $ i\""], ["proof (prove)\nusing this:\n  dim_vec w = dim_vec w'\n  (v @\\<^sub>v w) $ (n + i) = (v' @\\<^sub>v w') $ (n + i)\n\ngoal (1 subgoal):\n 1. w $ i = w' $ i", "using i"], ["proof (prove)\nusing this:\n  dim_vec w = dim_vec w'\n  (v @\\<^sub>v w) $ (n + i) = (v' @\\<^sub>v w') $ (n + i)\n  i < dim_vec w'\n\ngoal (1 subgoal):\n 1. w $ i = w' $ i", "by simp"], ["proof (state)\nthis:\n  w $ i = w' $ i\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  w = w'\n\ngoal (2 subgoals):\n 1. v @\\<^sub>v w = v' @\\<^sub>v w' \\<Longrightarrow> v = v' \\<and> w = w'\n 2. v = v' \\<and> w = w' \\<Longrightarrow> v @\\<^sub>v w = v' @\\<^sub>v w'", "ultimately"], ["proof (chain)\npicking this:\n  v = v'\n  w = w'", "show ?R"], ["proof (prove)\nusing this:\n  v = v'\n  w = w'\n\ngoal (1 subgoal):\n 1. v = v' \\<and> w = w'", "by simp"], ["proof (state)\nthis:\n  v = v' \\<and> w = w'\n\ngoal (1 subgoal):\n 1. v = v' \\<and> w = w' \\<Longrightarrow> v @\\<^sub>v w = v' @\\<^sub>v w'", "}"], ["proof (state)\nthis:\n  v @\\<^sub>v w = v' @\\<^sub>v w' \\<Longrightarrow> v = v' \\<and> w = w'\n\ngoal (1 subgoal):\n 1. v = v' \\<and> w = w' \\<Longrightarrow> v @\\<^sub>v w = v' @\\<^sub>v w'", "qed auto"], ["", "lemma append_vec_add:\n  assumes [simp]: \"v : carrier_vec n\" \"v' : carrier_vec n\"\n      and [simp]: \"w : carrier_vec m\" \"w' : carrier_vec m\"\n  shows \"(v @\\<^sub>v w) + (v' @\\<^sub>v w') = (v + v') @\\<^sub>v (w + w')\" (is \"?L = ?R\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. v @\\<^sub>v w + (v' @\\<^sub>v w') = (v + v') @\\<^sub>v w + w'", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>i.\n       i < dim_vec ((v + v') @\\<^sub>v w + w') \\<Longrightarrow>\n       (v @\\<^sub>v w + (v' @\\<^sub>v w')) $ i =\n       ((v + v') @\\<^sub>v w + w') $ i\n 2. dim_vec (v @\\<^sub>v w + (v' @\\<^sub>v w')) =\n    dim_vec ((v + v') @\\<^sub>v w + w')", "have [simp]: \"dim_vec v = n\" \"dim_vec v' = n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dim_vec v = n &&& dim_vec v' = n", "by auto"], ["proof (state)\nthis:\n  dim_vec v = n\n  dim_vec v' = n\n\ngoal (2 subgoals):\n 1. \\<And>i.\n       i < dim_vec ((v + v') @\\<^sub>v w + w') \\<Longrightarrow>\n       (v @\\<^sub>v w + (v' @\\<^sub>v w')) $ i =\n       ((v + v') @\\<^sub>v w + w') $ i\n 2. dim_vec (v @\\<^sub>v w + (v' @\\<^sub>v w')) =\n    dim_vec ((v + v') @\\<^sub>v w + w')", "have [simp]: \"dim_vec w = m\" \"dim_vec w' = m\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dim_vec w = m &&& dim_vec w' = m", "by auto"], ["proof (state)\nthis:\n  dim_vec w = m\n  dim_vec w' = m\n\ngoal (2 subgoals):\n 1. \\<And>i.\n       i < dim_vec ((v + v') @\\<^sub>v w + w') \\<Longrightarrow>\n       (v @\\<^sub>v w + (v' @\\<^sub>v w')) $ i =\n       ((v + v') @\\<^sub>v w + w') $ i\n 2. dim_vec (v @\\<^sub>v w + (v' @\\<^sub>v w')) =\n    dim_vec ((v + v') @\\<^sub>v w + w')", "fix i"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>i.\n       i < dim_vec ((v + v') @\\<^sub>v w + w') \\<Longrightarrow>\n       (v @\\<^sub>v w + (v' @\\<^sub>v w')) $ i =\n       ((v + v') @\\<^sub>v w + w') $ i\n 2. dim_vec (v @\\<^sub>v w + (v' @\\<^sub>v w')) =\n    dim_vec ((v + v') @\\<^sub>v w + w')", "assume i: \"i < dim_vec ?R\""], ["proof (state)\nthis:\n  i < dim_vec ((v + v') @\\<^sub>v w + w')\n\ngoal (2 subgoals):\n 1. \\<And>i.\n       i < dim_vec ((v + v') @\\<^sub>v w + w') \\<Longrightarrow>\n       (v @\\<^sub>v w + (v' @\\<^sub>v w')) $ i =\n       ((v + v') @\\<^sub>v w + w') $ i\n 2. dim_vec (v @\\<^sub>v w + (v' @\\<^sub>v w')) =\n    dim_vec ((v + v') @\\<^sub>v w + w')", "thus \"?L $ i = ?R $ i\""], ["proof (prove)\nusing this:\n  i < dim_vec ((v + v') @\\<^sub>v w + w')\n\ngoal (1 subgoal):\n 1. (v @\\<^sub>v w + (v' @\\<^sub>v w')) $ i =\n    ((v + v') @\\<^sub>v w + w') $ i", "by (cases \"i < n\",auto)"], ["proof (state)\nthis:\n  (v @\\<^sub>v w + (v' @\\<^sub>v w')) $ i = ((v + v') @\\<^sub>v w + w') $ i\n\ngoal (1 subgoal):\n 1. dim_vec (v @\\<^sub>v w + (v' @\\<^sub>v w')) =\n    dim_vec ((v + v') @\\<^sub>v w + w')", "qed auto"], ["", "lemma mult_mat_vec_split:\n  assumes A: \"A : carrier_mat n n\"\n      and D: \"D : carrier_mat m m\"\n      and a: \"a : carrier_vec n\"\n      and d: \"d : carrier_vec m\"\n  shows \"four_block_mat A (0\\<^sub>m n m) (0\\<^sub>m m n) D *\\<^sub>v (a @\\<^sub>v d) = A *\\<^sub>v a @\\<^sub>v D *\\<^sub>v d\"\n    (is \"?A00D *\\<^sub>v _ = ?r\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. four_block_mat A (0\\<^sub>m n m) (0\\<^sub>m m n) D *\\<^sub>v\n    (a @\\<^sub>v d) =\n    A *\\<^sub>v a @\\<^sub>v D *\\<^sub>v d", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>i.\n       i < dim_vec (A *\\<^sub>v a @\\<^sub>v D *\\<^sub>v d) \\<Longrightarrow>\n       (four_block_mat A (0\\<^sub>m n m) (0\\<^sub>m m n) D *\\<^sub>v\n        (a @\\<^sub>v d)) $\n       i =\n       (A *\\<^sub>v a @\\<^sub>v D *\\<^sub>v d) $ i\n 2. dim_vec\n     (four_block_mat A (0\\<^sub>m n m) (0\\<^sub>m m n) D *\\<^sub>v\n      (a @\\<^sub>v d)) =\n    dim_vec (A *\\<^sub>v a @\\<^sub>v D *\\<^sub>v d)", "have A00D: \"?A00D : carrier_mat (n+m) (n+m)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. four_block_mat A (0\\<^sub>m n m) (0\\<^sub>m m n) D\n    \\<in> carrier_mat (n + m) (n + m)", "using four_block_carrier_mat[OF A D]"], ["proof (prove)\nusing this:\n  four_block_mat A ?B ?C D \\<in> carrier_mat (n + m) (n + m)\n\ngoal (1 subgoal):\n 1. four_block_mat A (0\\<^sub>m n m) (0\\<^sub>m m n) D\n    \\<in> carrier_mat (n + m) (n + m)", "."], ["proof (state)\nthis:\n  four_block_mat A (0\\<^sub>m n m) (0\\<^sub>m m n) D\n  \\<in> carrier_mat (n + m) (n + m)\n\ngoal (2 subgoals):\n 1. \\<And>i.\n       i < dim_vec (A *\\<^sub>v a @\\<^sub>v D *\\<^sub>v d) \\<Longrightarrow>\n       (four_block_mat A (0\\<^sub>m n m) (0\\<^sub>m m n) D *\\<^sub>v\n        (a @\\<^sub>v d)) $\n       i =\n       (A *\\<^sub>v a @\\<^sub>v D *\\<^sub>v d) $ i\n 2. dim_vec\n     (four_block_mat A (0\\<^sub>m n m) (0\\<^sub>m m n) D *\\<^sub>v\n      (a @\\<^sub>v d)) =\n    dim_vec (A *\\<^sub>v a @\\<^sub>v D *\\<^sub>v d)", "fix i"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>i.\n       i < dim_vec (A *\\<^sub>v a @\\<^sub>v D *\\<^sub>v d) \\<Longrightarrow>\n       (four_block_mat A (0\\<^sub>m n m) (0\\<^sub>m m n) D *\\<^sub>v\n        (a @\\<^sub>v d)) $\n       i =\n       (A *\\<^sub>v a @\\<^sub>v D *\\<^sub>v d) $ i\n 2. dim_vec\n     (four_block_mat A (0\\<^sub>m n m) (0\\<^sub>m m n) D *\\<^sub>v\n      (a @\\<^sub>v d)) =\n    dim_vec (A *\\<^sub>v a @\\<^sub>v D *\\<^sub>v d)", "assume i: \"i < dim_vec ?r\""], ["proof (state)\nthis:\n  i < dim_vec (A *\\<^sub>v a @\\<^sub>v D *\\<^sub>v d)\n\ngoal (2 subgoals):\n 1. \\<And>i.\n       i < dim_vec (A *\\<^sub>v a @\\<^sub>v D *\\<^sub>v d) \\<Longrightarrow>\n       (four_block_mat A (0\\<^sub>m n m) (0\\<^sub>m m n) D *\\<^sub>v\n        (a @\\<^sub>v d)) $\n       i =\n       (A *\\<^sub>v a @\\<^sub>v D *\\<^sub>v d) $ i\n 2. dim_vec\n     (four_block_mat A (0\\<^sub>m n m) (0\\<^sub>m m n) D *\\<^sub>v\n      (a @\\<^sub>v d)) =\n    dim_vec (A *\\<^sub>v a @\\<^sub>v D *\\<^sub>v d)", "show \"(?A00D *\\<^sub>v (a @\\<^sub>v d)) $ i = ?r $ i\" (is \"?li = _\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. (four_block_mat A (0\\<^sub>m n m) (0\\<^sub>m m n) D *\\<^sub>v\n     (a @\\<^sub>v d)) $\n    i =\n    (A *\\<^sub>v a @\\<^sub>v D *\\<^sub>v d) $ i", "proof (cases \"i < n\")"], ["proof (state)\ngoal (2 subgoals):\n 1. i < n \\<Longrightarrow>\n    (four_block_mat A (0\\<^sub>m n m) (0\\<^sub>m m n) D *\\<^sub>v\n     (a @\\<^sub>v d)) $\n    i =\n    (A *\\<^sub>v a @\\<^sub>v D *\\<^sub>v d) $ i\n 2. \\<not> i < n \\<Longrightarrow>\n    (four_block_mat A (0\\<^sub>m n m) (0\\<^sub>m m n) D *\\<^sub>v\n     (a @\\<^sub>v d)) $\n    i =\n    (A *\\<^sub>v a @\\<^sub>v D *\\<^sub>v d) $ i", "case True"], ["proof (state)\nthis:\n  i < n\n\ngoal (2 subgoals):\n 1. i < n \\<Longrightarrow>\n    (four_block_mat A (0\\<^sub>m n m) (0\\<^sub>m m n) D *\\<^sub>v\n     (a @\\<^sub>v d)) $\n    i =\n    (A *\\<^sub>v a @\\<^sub>v D *\\<^sub>v d) $ i\n 2. \\<not> i < n \\<Longrightarrow>\n    (four_block_mat A (0\\<^sub>m n m) (0\\<^sub>m m n) D *\\<^sub>v\n     (a @\\<^sub>v d)) $\n    i =\n    (A *\\<^sub>v a @\\<^sub>v D *\\<^sub>v d) $ i", "have \"?li = (row A i @\\<^sub>v 0\\<^sub>v m) \\<bullet> (a @\\<^sub>v d)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (four_block_mat A (0\\<^sub>m n m) (0\\<^sub>m m n) D *\\<^sub>v\n     (a @\\<^sub>v d)) $\n    i =\n    (row A i @\\<^sub>v 0\\<^sub>v m) \\<bullet> (a @\\<^sub>v d)", "using A row_four_block_mat[OF A _ _ D] True"], ["proof (prove)\nusing this:\n  A \\<in> carrier_mat n n\n  \\<lbrakk>?B \\<in> carrier_mat n m; ?C \\<in> carrier_mat m n;\n   ?i < n\\<rbrakk>\n  \\<Longrightarrow> row (four_block_mat A ?B ?C D) ?i =\n                    row A ?i @\\<^sub>v row ?B ?i\n  \\<lbrakk>?B \\<in> carrier_mat n m; ?C \\<in> carrier_mat m n;\n   \\<not> ?i < n; ?i < n + m\\<rbrakk>\n  \\<Longrightarrow> row (four_block_mat A ?B ?C D) ?i =\n                    row ?C (?i - n) @\\<^sub>v row D (?i - n)\n  i < n\n\ngoal (1 subgoal):\n 1. (four_block_mat A (0\\<^sub>m n m) (0\\<^sub>m m n) D *\\<^sub>v\n     (a @\\<^sub>v d)) $\n    i =\n    (row A i @\\<^sub>v 0\\<^sub>v m) \\<bullet> (a @\\<^sub>v d)", "by simp"], ["proof (state)\nthis:\n  (four_block_mat A (0\\<^sub>m n m) (0\\<^sub>m m n) D *\\<^sub>v\n   (a @\\<^sub>v d)) $\n  i =\n  (row A i @\\<^sub>v 0\\<^sub>v m) \\<bullet> (a @\\<^sub>v d)\n\ngoal (2 subgoals):\n 1. i < n \\<Longrightarrow>\n    (four_block_mat A (0\\<^sub>m n m) (0\\<^sub>m m n) D *\\<^sub>v\n     (a @\\<^sub>v d)) $\n    i =\n    (A *\\<^sub>v a @\\<^sub>v D *\\<^sub>v d) $ i\n 2. \\<not> i < n \\<Longrightarrow>\n    (four_block_mat A (0\\<^sub>m n m) (0\\<^sub>m m n) D *\\<^sub>v\n     (a @\\<^sub>v d)) $\n    i =\n    (A *\\<^sub>v a @\\<^sub>v D *\\<^sub>v d) $ i", "also"], ["proof (state)\nthis:\n  (four_block_mat A (0\\<^sub>m n m) (0\\<^sub>m m n) D *\\<^sub>v\n   (a @\\<^sub>v d)) $\n  i =\n  (row A i @\\<^sub>v 0\\<^sub>v m) \\<bullet> (a @\\<^sub>v d)\n\ngoal (2 subgoals):\n 1. i < n \\<Longrightarrow>\n    (four_block_mat A (0\\<^sub>m n m) (0\\<^sub>m m n) D *\\<^sub>v\n     (a @\\<^sub>v d)) $\n    i =\n    (A *\\<^sub>v a @\\<^sub>v D *\\<^sub>v d) $ i\n 2. \\<not> i < n \\<Longrightarrow>\n    (four_block_mat A (0\\<^sub>m n m) (0\\<^sub>m m n) D *\\<^sub>v\n     (a @\\<^sub>v d)) $\n    i =\n    (A *\\<^sub>v a @\\<^sub>v D *\\<^sub>v d) $ i", "have \"... = row A i \\<bullet> a + 0\\<^sub>v m \\<bullet> d\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (row A i @\\<^sub>v 0\\<^sub>v m) \\<bullet> (a @\\<^sub>v d) =\n    row A i \\<bullet> a + 0\\<^sub>v m \\<bullet> d", "apply (rule scalar_prod_append)"], ["proof (prove)\ngoal (4 subgoals):\n 1. row A i \\<in> carrier_vec ?n1.0\n 2. 0\\<^sub>v m \\<in> carrier_vec ?n2.0\n 3. a \\<in> carrier_vec ?n1.0\n 4. d \\<in> carrier_vec ?n2.0", "using A D a d True"], ["proof (prove)\nusing this:\n  A \\<in> carrier_mat n n\n  D \\<in> carrier_mat m m\n  a \\<in> carrier_vec n\n  d \\<in> carrier_vec m\n  i < n\n\ngoal (4 subgoals):\n 1. row A i \\<in> carrier_vec ?n1.0\n 2. 0\\<^sub>v m \\<in> carrier_vec ?n2.0\n 3. a \\<in> carrier_vec ?n1.0\n 4. d \\<in> carrier_vec ?n2.0", "by auto"], ["proof (state)\nthis:\n  (row A i @\\<^sub>v 0\\<^sub>v m) \\<bullet> (a @\\<^sub>v d) =\n  row A i \\<bullet> a + 0\\<^sub>v m \\<bullet> d\n\ngoal (2 subgoals):\n 1. i < n \\<Longrightarrow>\n    (four_block_mat A (0\\<^sub>m n m) (0\\<^sub>m m n) D *\\<^sub>v\n     (a @\\<^sub>v d)) $\n    i =\n    (A *\\<^sub>v a @\\<^sub>v D *\\<^sub>v d) $ i\n 2. \\<not> i < n \\<Longrightarrow>\n    (four_block_mat A (0\\<^sub>m n m) (0\\<^sub>m m n) D *\\<^sub>v\n     (a @\\<^sub>v d)) $\n    i =\n    (A *\\<^sub>v a @\\<^sub>v D *\\<^sub>v d) $ i", "also"], ["proof (state)\nthis:\n  (row A i @\\<^sub>v 0\\<^sub>v m) \\<bullet> (a @\\<^sub>v d) =\n  row A i \\<bullet> a + 0\\<^sub>v m \\<bullet> d\n\ngoal (2 subgoals):\n 1. i < n \\<Longrightarrow>\n    (four_block_mat A (0\\<^sub>m n m) (0\\<^sub>m m n) D *\\<^sub>v\n     (a @\\<^sub>v d)) $\n    i =\n    (A *\\<^sub>v a @\\<^sub>v D *\\<^sub>v d) $ i\n 2. \\<not> i < n \\<Longrightarrow>\n    (four_block_mat A (0\\<^sub>m n m) (0\\<^sub>m m n) D *\\<^sub>v\n     (a @\\<^sub>v d)) $\n    i =\n    (A *\\<^sub>v a @\\<^sub>v D *\\<^sub>v d) $ i", "have \"... = row A i \\<bullet> a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. row A i \\<bullet> a + 0\\<^sub>v m \\<bullet> d = row A i \\<bullet> a", "using d"], ["proof (prove)\nusing this:\n  d \\<in> carrier_vec m\n\ngoal (1 subgoal):\n 1. row A i \\<bullet> a + 0\\<^sub>v m \\<bullet> d = row A i \\<bullet> a", "by simp"], ["proof (state)\nthis:\n  row A i \\<bullet> a + 0\\<^sub>v m \\<bullet> d = row A i \\<bullet> a\n\ngoal (2 subgoals):\n 1. i < n \\<Longrightarrow>\n    (four_block_mat A (0\\<^sub>m n m) (0\\<^sub>m m n) D *\\<^sub>v\n     (a @\\<^sub>v d)) $\n    i =\n    (A *\\<^sub>v a @\\<^sub>v D *\\<^sub>v d) $ i\n 2. \\<not> i < n \\<Longrightarrow>\n    (four_block_mat A (0\\<^sub>m n m) (0\\<^sub>m m n) D *\\<^sub>v\n     (a @\\<^sub>v d)) $\n    i =\n    (A *\\<^sub>v a @\\<^sub>v D *\\<^sub>v d) $ i", "finally"], ["proof (chain)\npicking this:\n  (four_block_mat A (0\\<^sub>m n m) (0\\<^sub>m m n) D *\\<^sub>v\n   (a @\\<^sub>v d)) $\n  i =\n  row A i \\<bullet> a", "show ?thesis"], ["proof (prove)\nusing this:\n  (four_block_mat A (0\\<^sub>m n m) (0\\<^sub>m m n) D *\\<^sub>v\n   (a @\\<^sub>v d)) $\n  i =\n  row A i \\<bullet> a\n\ngoal (1 subgoal):\n 1. (four_block_mat A (0\\<^sub>m n m) (0\\<^sub>m m n) D *\\<^sub>v\n     (a @\\<^sub>v d)) $\n    i =\n    (A *\\<^sub>v a @\\<^sub>v D *\\<^sub>v d) $ i", "using A True"], ["proof (prove)\nusing this:\n  (four_block_mat A (0\\<^sub>m n m) (0\\<^sub>m m n) D *\\<^sub>v\n   (a @\\<^sub>v d)) $\n  i =\n  row A i \\<bullet> a\n  A \\<in> carrier_mat n n\n  i < n\n\ngoal (1 subgoal):\n 1. (four_block_mat A (0\\<^sub>m n m) (0\\<^sub>m m n) D *\\<^sub>v\n     (a @\\<^sub>v d)) $\n    i =\n    (A *\\<^sub>v a @\\<^sub>v D *\\<^sub>v d) $ i", "by auto"], ["proof (state)\nthis:\n  (four_block_mat A (0\\<^sub>m n m) (0\\<^sub>m m n) D *\\<^sub>v\n   (a @\\<^sub>v d)) $\n  i =\n  (A *\\<^sub>v a @\\<^sub>v D *\\<^sub>v d) $ i\n\ngoal (1 subgoal):\n 1. \\<not> i < n \\<Longrightarrow>\n    (four_block_mat A (0\\<^sub>m n m) (0\\<^sub>m m n) D *\\<^sub>v\n     (a @\\<^sub>v d)) $\n    i =\n    (A *\\<^sub>v a @\\<^sub>v D *\\<^sub>v d) $ i", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> i < n \\<Longrightarrow>\n    (four_block_mat A (0\\<^sub>m n m) (0\\<^sub>m m n) D *\\<^sub>v\n     (a @\\<^sub>v d)) $\n    i =\n    (A *\\<^sub>v a @\\<^sub>v D *\\<^sub>v d) $ i", "case False"], ["proof (state)\nthis:\n  \\<not> i < n\n\ngoal (1 subgoal):\n 1. \\<not> i < n \\<Longrightarrow>\n    (four_block_mat A (0\\<^sub>m n m) (0\\<^sub>m m n) D *\\<^sub>v\n     (a @\\<^sub>v d)) $\n    i =\n    (A *\\<^sub>v a @\\<^sub>v D *\\<^sub>v d) $ i", "let ?i = \"i - n\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> i < n \\<Longrightarrow>\n    (four_block_mat A (0\\<^sub>m n m) (0\\<^sub>m m n) D *\\<^sub>v\n     (a @\\<^sub>v d)) $\n    i =\n    (A *\\<^sub>v a @\\<^sub>v D *\\<^sub>v d) $ i", "have \"?li = (0\\<^sub>v n @\\<^sub>v row D ?i) \\<bullet> (a @\\<^sub>v d)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (four_block_mat A (0\\<^sub>m n m) (0\\<^sub>m m n) D *\\<^sub>v\n     (a @\\<^sub>v d)) $\n    i =\n    (0\\<^sub>v n @\\<^sub>v row D (i - n)) \\<bullet> (a @\\<^sub>v d)", "using i row_four_block_mat[OF A _ _ D] False A D"], ["proof (prove)\nusing this:\n  i < dim_vec (A *\\<^sub>v a @\\<^sub>v D *\\<^sub>v d)\n  \\<lbrakk>?B \\<in> carrier_mat n m; ?C \\<in> carrier_mat m n;\n   ?i < n\\<rbrakk>\n  \\<Longrightarrow> row (four_block_mat A ?B ?C D) ?i =\n                    row A ?i @\\<^sub>v row ?B ?i\n  \\<lbrakk>?B \\<in> carrier_mat n m; ?C \\<in> carrier_mat m n;\n   \\<not> ?i < n; ?i < n + m\\<rbrakk>\n  \\<Longrightarrow> row (four_block_mat A ?B ?C D) ?i =\n                    row ?C (?i - n) @\\<^sub>v row D (?i - n)\n  \\<not> i < n\n  A \\<in> carrier_mat n n\n  D \\<in> carrier_mat m m\n\ngoal (1 subgoal):\n 1. (four_block_mat A (0\\<^sub>m n m) (0\\<^sub>m m n) D *\\<^sub>v\n     (a @\\<^sub>v d)) $\n    i =\n    (0\\<^sub>v n @\\<^sub>v row D (i - n)) \\<bullet> (a @\\<^sub>v d)", "by simp"], ["proof (state)\nthis:\n  (four_block_mat A (0\\<^sub>m n m) (0\\<^sub>m m n) D *\\<^sub>v\n   (a @\\<^sub>v d)) $\n  i =\n  (0\\<^sub>v n @\\<^sub>v row D (i - n)) \\<bullet> (a @\\<^sub>v d)\n\ngoal (1 subgoal):\n 1. \\<not> i < n \\<Longrightarrow>\n    (four_block_mat A (0\\<^sub>m n m) (0\\<^sub>m m n) D *\\<^sub>v\n     (a @\\<^sub>v d)) $\n    i =\n    (A *\\<^sub>v a @\\<^sub>v D *\\<^sub>v d) $ i", "also"], ["proof (state)\nthis:\n  (four_block_mat A (0\\<^sub>m n m) (0\\<^sub>m m n) D *\\<^sub>v\n   (a @\\<^sub>v d)) $\n  i =\n  (0\\<^sub>v n @\\<^sub>v row D (i - n)) \\<bullet> (a @\\<^sub>v d)\n\ngoal (1 subgoal):\n 1. \\<not> i < n \\<Longrightarrow>\n    (four_block_mat A (0\\<^sub>m n m) (0\\<^sub>m m n) D *\\<^sub>v\n     (a @\\<^sub>v d)) $\n    i =\n    (A *\\<^sub>v a @\\<^sub>v D *\\<^sub>v d) $ i", "have \"... = 0\\<^sub>v n \\<bullet> a + row D ?i \\<bullet> d\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (0\\<^sub>v n @\\<^sub>v row D (i - n)) \\<bullet> (a @\\<^sub>v d) =\n    0\\<^sub>v n \\<bullet> a + row D (i - n) \\<bullet> d", "apply (rule scalar_prod_append)"], ["proof (prove)\ngoal (4 subgoals):\n 1. 0\\<^sub>v n \\<in> carrier_vec ?n1.0\n 2. row D (i - n) \\<in> carrier_vec ?n2.0\n 3. a \\<in> carrier_vec ?n1.0\n 4. d \\<in> carrier_vec ?n2.0", "using A D a d False"], ["proof (prove)\nusing this:\n  A \\<in> carrier_mat n n\n  D \\<in> carrier_mat m m\n  a \\<in> carrier_vec n\n  d \\<in> carrier_vec m\n  \\<not> i < n\n\ngoal (4 subgoals):\n 1. 0\\<^sub>v n \\<in> carrier_vec ?n1.0\n 2. row D (i - n) \\<in> carrier_vec ?n2.0\n 3. a \\<in> carrier_vec ?n1.0\n 4. d \\<in> carrier_vec ?n2.0", "by auto"], ["proof (state)\nthis:\n  (0\\<^sub>v n @\\<^sub>v row D (i - n)) \\<bullet> (a @\\<^sub>v d) =\n  0\\<^sub>v n \\<bullet> a + row D (i - n) \\<bullet> d\n\ngoal (1 subgoal):\n 1. \\<not> i < n \\<Longrightarrow>\n    (four_block_mat A (0\\<^sub>m n m) (0\\<^sub>m m n) D *\\<^sub>v\n     (a @\\<^sub>v d)) $\n    i =\n    (A *\\<^sub>v a @\\<^sub>v D *\\<^sub>v d) $ i", "also"], ["proof (state)\nthis:\n  (0\\<^sub>v n @\\<^sub>v row D (i - n)) \\<bullet> (a @\\<^sub>v d) =\n  0\\<^sub>v n \\<bullet> a + row D (i - n) \\<bullet> d\n\ngoal (1 subgoal):\n 1. \\<not> i < n \\<Longrightarrow>\n    (four_block_mat A (0\\<^sub>m n m) (0\\<^sub>m m n) D *\\<^sub>v\n     (a @\\<^sub>v d)) $\n    i =\n    (A *\\<^sub>v a @\\<^sub>v D *\\<^sub>v d) $ i", "have \"... = row D ?i \\<bullet> d\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0\\<^sub>v n \\<bullet> a + row D (i - n) \\<bullet> d =\n    row D (i - n) \\<bullet> d", "using a"], ["proof (prove)\nusing this:\n  a \\<in> carrier_vec n\n\ngoal (1 subgoal):\n 1. 0\\<^sub>v n \\<bullet> a + row D (i - n) \\<bullet> d =\n    row D (i - n) \\<bullet> d", "by simp"], ["proof (state)\nthis:\n  0\\<^sub>v n \\<bullet> a + row D (i - n) \\<bullet> d =\n  row D (i - n) \\<bullet> d\n\ngoal (1 subgoal):\n 1. \\<not> i < n \\<Longrightarrow>\n    (four_block_mat A (0\\<^sub>m n m) (0\\<^sub>m m n) D *\\<^sub>v\n     (a @\\<^sub>v d)) $\n    i =\n    (A *\\<^sub>v a @\\<^sub>v D *\\<^sub>v d) $ i", "finally"], ["proof (chain)\npicking this:\n  (four_block_mat A (0\\<^sub>m n m) (0\\<^sub>m m n) D *\\<^sub>v\n   (a @\\<^sub>v d)) $\n  i =\n  row D (i - n) \\<bullet> d", "show ?thesis"], ["proof (prove)\nusing this:\n  (four_block_mat A (0\\<^sub>m n m) (0\\<^sub>m m n) D *\\<^sub>v\n   (a @\\<^sub>v d)) $\n  i =\n  row D (i - n) \\<bullet> d\n\ngoal (1 subgoal):\n 1. (four_block_mat A (0\\<^sub>m n m) (0\\<^sub>m m n) D *\\<^sub>v\n     (a @\\<^sub>v d)) $\n    i =\n    (A *\\<^sub>v a @\\<^sub>v D *\\<^sub>v d) $ i", "using A D False i"], ["proof (prove)\nusing this:\n  (four_block_mat A (0\\<^sub>m n m) (0\\<^sub>m m n) D *\\<^sub>v\n   (a @\\<^sub>v d)) $\n  i =\n  row D (i - n) \\<bullet> d\n  A \\<in> carrier_mat n n\n  D \\<in> carrier_mat m m\n  \\<not> i < n\n  i < dim_vec (A *\\<^sub>v a @\\<^sub>v D *\\<^sub>v d)\n\ngoal (1 subgoal):\n 1. (four_block_mat A (0\\<^sub>m n m) (0\\<^sub>m m n) D *\\<^sub>v\n     (a @\\<^sub>v d)) $\n    i =\n    (A *\\<^sub>v a @\\<^sub>v D *\\<^sub>v d) $ i", "by auto"], ["proof (state)\nthis:\n  (four_block_mat A (0\\<^sub>m n m) (0\\<^sub>m m n) D *\\<^sub>v\n   (a @\\<^sub>v d)) $\n  i =\n  (A *\\<^sub>v a @\\<^sub>v D *\\<^sub>v d) $ i\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (four_block_mat A (0\\<^sub>m n m) (0\\<^sub>m m n) D *\\<^sub>v\n   (a @\\<^sub>v d)) $\n  i =\n  (A *\\<^sub>v a @\\<^sub>v D *\\<^sub>v d) $ i\n\ngoal (1 subgoal):\n 1. dim_vec\n     (four_block_mat A (0\\<^sub>m n m) (0\\<^sub>m m n) D *\\<^sub>v\n      (a @\\<^sub>v d)) =\n    dim_vec (A *\\<^sub>v a @\\<^sub>v D *\\<^sub>v d)", "qed auto"], ["", "lemma similar_mat_witI: assumes \"P * Q = 1\\<^sub>m n\" \"Q * P = 1\\<^sub>m n\" \"A = P * B * Q\"\n  \"A \\<in> carrier_mat n n\" \"B \\<in> carrier_mat n n\" \"P \\<in> carrier_mat n n\" \"Q \\<in> carrier_mat n n\"\n  shows \"similar_mat_wit A B P Q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. similar_mat_wit A B P Q", "using assms"], ["proof (prove)\nusing this:\n  P * Q = 1\\<^sub>m n\n  Q * P = 1\\<^sub>m n\n  A = P * B * Q\n  A \\<in> carrier_mat n n\n  B \\<in> carrier_mat n n\n  P \\<in> carrier_mat n n\n  Q \\<in> carrier_mat n n\n\ngoal (1 subgoal):\n 1. similar_mat_wit A B P Q", "unfolding similar_mat_wit_def Let_def"], ["proof (prove)\nusing this:\n  P * Q = 1\\<^sub>m n\n  Q * P = 1\\<^sub>m n\n  A = P * B * Q\n  A \\<in> carrier_mat n n\n  B \\<in> carrier_mat n n\n  P \\<in> carrier_mat n n\n  Q \\<in> carrier_mat n n\n\ngoal (1 subgoal):\n 1. {A, B, P, Q} \\<subseteq> carrier_mat (dim_row A) (dim_row A) \\<and>\n    P * Q = 1\\<^sub>m (dim_row A) \\<and>\n    Q * P = 1\\<^sub>m (dim_row A) \\<and> A = P * B * Q", "by auto"], ["", "lemma similar_mat_witD: assumes \"n = dim_row A\" \"similar_mat_wit A B P Q\"\n  shows \"P * Q = 1\\<^sub>m n\" \"Q * P = 1\\<^sub>m n\" \"A = P * B * Q\"\n  \"A \\<in> carrier_mat n n\" \"B \\<in> carrier_mat n n\" \"P \\<in> carrier_mat n n\" \"Q \\<in> carrier_mat n n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (P * Q = 1\\<^sub>m n &&& Q * P = 1\\<^sub>m n &&& A = P * B * Q) &&&\n    (A \\<in> carrier_mat n n &&& B \\<in> carrier_mat n n) &&&\n    P \\<in> carrier_mat n n &&& Q \\<in> carrier_mat n n", "using assms(2)"], ["proof (prove)\nusing this:\n  similar_mat_wit A B P Q\n\ngoal (1 subgoal):\n 1. (P * Q = 1\\<^sub>m n &&& Q * P = 1\\<^sub>m n &&& A = P * B * Q) &&&\n    (A \\<in> carrier_mat n n &&& B \\<in> carrier_mat n n) &&&\n    P \\<in> carrier_mat n n &&& Q \\<in> carrier_mat n n", "unfolding similar_mat_wit_def Let_def assms(1)[symmetric]"], ["proof (prove)\nusing this:\n  {A, B, P, Q} \\<subseteq> carrier_mat n n \\<and>\n  P * Q = 1\\<^sub>m n \\<and> Q * P = 1\\<^sub>m n \\<and> A = P * B * Q\n\ngoal (1 subgoal):\n 1. (P * Q = 1\\<^sub>m n &&& Q * P = 1\\<^sub>m n &&& A = P * B * Q) &&&\n    (A \\<in> carrier_mat n n &&& B \\<in> carrier_mat n n) &&&\n    P \\<in> carrier_mat n n &&& Q \\<in> carrier_mat n n", "by auto"], ["", "lemma similar_mat_witD2: assumes \"A \\<in> carrier_mat n m\" \"similar_mat_wit A B P Q\"\n  shows \"P * Q = 1\\<^sub>m n\" \"Q * P = 1\\<^sub>m n\" \"A = P * B * Q\"\n  \"A \\<in> carrier_mat n n\" \"B \\<in> carrier_mat n n\" \"P \\<in> carrier_mat n n\" \"Q \\<in> carrier_mat n n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (P * Q = 1\\<^sub>m n &&& Q * P = 1\\<^sub>m n &&& A = P * B * Q) &&&\n    (A \\<in> carrier_mat n n &&& B \\<in> carrier_mat n n) &&&\n    P \\<in> carrier_mat n n &&& Q \\<in> carrier_mat n n", "using similar_mat_witD[OF _ assms(2), of n] assms(1)[unfolded carrier_mat_def]"], ["proof (prove)\nusing this:\n  n = dim_row A \\<Longrightarrow> P * Q = 1\\<^sub>m n\n  n = dim_row A \\<Longrightarrow> Q * P = 1\\<^sub>m n\n  n = dim_row A \\<Longrightarrow> A = P * B * Q\n  n = dim_row A \\<Longrightarrow> A \\<in> carrier_mat n n\n  n = dim_row A \\<Longrightarrow> B \\<in> carrier_mat n n\n  n = dim_row A \\<Longrightarrow> P \\<in> carrier_mat n n\n  n = dim_row A \\<Longrightarrow> Q \\<in> carrier_mat n n\n  A \\<in> {ma. dim_row ma = n \\<and> dim_col ma = m}\n\ngoal (1 subgoal):\n 1. (P * Q = 1\\<^sub>m n &&& Q * P = 1\\<^sub>m n &&& A = P * B * Q) &&&\n    (A \\<in> carrier_mat n n &&& B \\<in> carrier_mat n n) &&&\n    P \\<in> carrier_mat n n &&& Q \\<in> carrier_mat n n", "by auto"], ["", "lemma similar_mat_wit_sym: assumes sim: \"similar_mat_wit A B P Q\"\n  shows \"similar_mat_wit B A Q P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. similar_mat_wit B A Q P", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. similar_mat_wit B A Q P", "from similar_mat_witD[OF refl sim]"], ["proof (chain)\npicking this:\n  P * Q = 1\\<^sub>m (dim_row A)\n  Q * P = 1\\<^sub>m (dim_row A)\n  A = P * B * Q\n  A \\<in> carrier_mat (dim_row A) (dim_row A)\n  B \\<in> carrier_mat (dim_row A) (dim_row A)\n  P \\<in> carrier_mat (dim_row A) (dim_row A)\n  Q \\<in> carrier_mat (dim_row A) (dim_row A)", "obtain n where\n    AB: \"{A, B, P, Q} \\<subseteq> carrier_mat n n\" \"P * Q = 1\\<^sub>m n\" \"Q * P = 1\\<^sub>m n\" and A: \"A = P * B * Q\""], ["proof (prove)\nusing this:\n  P * Q = 1\\<^sub>m (dim_row A)\n  Q * P = 1\\<^sub>m (dim_row A)\n  A = P * B * Q\n  A \\<in> carrier_mat (dim_row A) (dim_row A)\n  B \\<in> carrier_mat (dim_row A) (dim_row A)\n  P \\<in> carrier_mat (dim_row A) (dim_row A)\n  Q \\<in> carrier_mat (dim_row A) (dim_row A)\n\ngoal (1 subgoal):\n 1. (\\<And>n.\n        \\<lbrakk>{A, B, P, Q} \\<subseteq> carrier_mat n n;\n         P * Q = 1\\<^sub>m n; Q * P = 1\\<^sub>m n; A = P * B * Q\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  {A, B, P, Q} \\<subseteq> carrier_mat n n\n  P * Q = 1\\<^sub>m n\n  Q * P = 1\\<^sub>m n\n  A = P * B * Q\n\ngoal (1 subgoal):\n 1. similar_mat_wit B A Q P", "hence *: \"{B, A, Q, P} \\<subseteq> carrier_mat n n\" \"Q * P = 1\\<^sub>m n\" \"P * Q = 1\\<^sub>m n\""], ["proof (prove)\nusing this:\n  {A, B, P, Q} \\<subseteq> carrier_mat n n\n  P * Q = 1\\<^sub>m n\n  Q * P = 1\\<^sub>m n\n  A = P * B * Q\n\ngoal (1 subgoal):\n 1. {B, A, Q, P} \\<subseteq> carrier_mat n n &&&\n    Q * P = 1\\<^sub>m n &&& P * Q = 1\\<^sub>m n", "by auto"], ["proof (state)\nthis:\n  {B, A, Q, P} \\<subseteq> carrier_mat n n\n  Q * P = 1\\<^sub>m n\n  P * Q = 1\\<^sub>m n\n\ngoal (1 subgoal):\n 1. similar_mat_wit B A Q P", "let ?c = \"\\<lambda> A. A \\<in> carrier_mat n n\""], ["proof (state)\ngoal (1 subgoal):\n 1. similar_mat_wit B A Q P", "from *"], ["proof (chain)\npicking this:\n  {B, A, Q, P} \\<subseteq> carrier_mat n n\n  Q * P = 1\\<^sub>m n\n  P * Q = 1\\<^sub>m n", "have Carr: \"?c B\" \"?c P\" \"?c Q\""], ["proof (prove)\nusing this:\n  {B, A, Q, P} \\<subseteq> carrier_mat n n\n  Q * P = 1\\<^sub>m n\n  P * Q = 1\\<^sub>m n\n\ngoal (1 subgoal):\n 1. B \\<in> carrier_mat n n &&&\n    P \\<in> carrier_mat n n &&& Q \\<in> carrier_mat n n", "by auto"], ["proof (state)\nthis:\n  B \\<in> carrier_mat n n\n  P \\<in> carrier_mat n n\n  Q \\<in> carrier_mat n n\n\ngoal (1 subgoal):\n 1. similar_mat_wit B A Q P", "note [simp] = assoc_mult_mat[of _ n n _ n _ n]"], ["proof (state)\nthis:\n  \\<lbrakk>?A \\<in> carrier_mat n n; ?B \\<in> carrier_mat n n;\n   ?C \\<in> carrier_mat n n\\<rbrakk>\n  \\<Longrightarrow> ?A * ?B * ?C = ?A * (?B * ?C)\n\ngoal (1 subgoal):\n 1. similar_mat_wit B A Q P", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. similar_mat_wit B A Q P", "proof (rule similar_mat_witI[of _ _ n])"], ["proof (state)\ngoal (7 subgoals):\n 1. Q * P = 1\\<^sub>m n\n 2. P * Q = 1\\<^sub>m n\n 3. B = Q * A * P\n 4. B \\<in> carrier_mat n n\n 5. A \\<in> carrier_mat n n\n 6. Q \\<in> carrier_mat n n\n 7. P \\<in> carrier_mat n n", "have \"Q * A * P = (Q * P) * B * (Q * P)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Q * A * P = Q * P * B * (Q * P)", "using Carr"], ["proof (prove)\nusing this:\n  B \\<in> carrier_mat n n\n  P \\<in> carrier_mat n n\n  Q \\<in> carrier_mat n n\n\ngoal (1 subgoal):\n 1. Q * A * P = Q * P * B * (Q * P)", "unfolding A"], ["proof (prove)\nusing this:\n  B \\<in> carrier_mat n n\n  P \\<in> carrier_mat n n\n  Q \\<in> carrier_mat n n\n\ngoal (1 subgoal):\n 1. Q * (P * B * Q) * P = Q * P * B * (Q * P)", "by simp"], ["proof (state)\nthis:\n  Q * A * P = Q * P * B * (Q * P)\n\ngoal (7 subgoals):\n 1. Q * P = 1\\<^sub>m n\n 2. P * Q = 1\\<^sub>m n\n 3. B = Q * A * P\n 4. B \\<in> carrier_mat n n\n 5. A \\<in> carrier_mat n n\n 6. Q \\<in> carrier_mat n n\n 7. P \\<in> carrier_mat n n", "also"], ["proof (state)\nthis:\n  Q * A * P = Q * P * B * (Q * P)\n\ngoal (7 subgoals):\n 1. Q * P = 1\\<^sub>m n\n 2. P * Q = 1\\<^sub>m n\n 3. B = Q * A * P\n 4. B \\<in> carrier_mat n n\n 5. A \\<in> carrier_mat n n\n 6. Q \\<in> carrier_mat n n\n 7. P \\<in> carrier_mat n n", "have \"\\<dots> = B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Q * P * B * (Q * P) = B", "using Carr"], ["proof (prove)\nusing this:\n  B \\<in> carrier_mat n n\n  P \\<in> carrier_mat n n\n  Q \\<in> carrier_mat n n\n\ngoal (1 subgoal):\n 1. Q * P * B * (Q * P) = B", "unfolding AB"], ["proof (prove)\nusing this:\n  B \\<in> carrier_mat n n\n  P \\<in> carrier_mat n n\n  Q \\<in> carrier_mat n n\n\ngoal (1 subgoal):\n 1. 1\\<^sub>m n * B * 1\\<^sub>m n = B", "by simp"], ["proof (state)\nthis:\n  Q * P * B * (Q * P) = B\n\ngoal (7 subgoals):\n 1. Q * P = 1\\<^sub>m n\n 2. P * Q = 1\\<^sub>m n\n 3. B = Q * A * P\n 4. B \\<in> carrier_mat n n\n 5. A \\<in> carrier_mat n n\n 6. Q \\<in> carrier_mat n n\n 7. P \\<in> carrier_mat n n", "finally"], ["proof (chain)\npicking this:\n  Q * A * P = B", "show \"B = Q * A * P\""], ["proof (prove)\nusing this:\n  Q * A * P = B\n\ngoal (1 subgoal):\n 1. B = Q * A * P", "by simp"], ["proof (state)\nthis:\n  B = Q * A * P\n\ngoal (6 subgoals):\n 1. Q * P = 1\\<^sub>m n\n 2. P * Q = 1\\<^sub>m n\n 3. B \\<in> carrier_mat n n\n 4. A \\<in> carrier_mat n n\n 5. Q \\<in> carrier_mat n n\n 6. P \\<in> carrier_mat n n", "qed (insert * AB, auto)"], ["proof (state)\nthis:\n  similar_mat_wit B A Q P\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma similar_mat_wit_refl: assumes A: \"A \\<in> carrier_mat n n\"\n  shows \"similar_mat_wit A A (1\\<^sub>m n) (1\\<^sub>m n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. similar_mat_wit A A (1\\<^sub>m n) (1\\<^sub>m n)", "by (rule similar_mat_witI[OF _ _ _ A], insert A, auto)"], ["", "lemma similar_mat_wit_trans: assumes AB: \"similar_mat_wit A B P Q\"\n  and BC: \"similar_mat_wit B C P' Q'\"\n  shows \"similar_mat_wit A C (P * P') (Q' * Q)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. similar_mat_wit A C (P * P') (Q' * Q)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. similar_mat_wit A C (P * P') (Q' * Q)", "from similar_mat_witD[OF refl AB]"], ["proof (chain)\npicking this:\n  P * Q = 1\\<^sub>m (dim_row A)\n  Q * P = 1\\<^sub>m (dim_row A)\n  A = P * B * Q\n  A \\<in> carrier_mat (dim_row A) (dim_row A)\n  B \\<in> carrier_mat (dim_row A) (dim_row A)\n  P \\<in> carrier_mat (dim_row A) (dim_row A)\n  Q \\<in> carrier_mat (dim_row A) (dim_row A)", "obtain n where\n    AB: \"{A, B, P, Q} \\<subseteq> carrier_mat n n\" \"P * Q = 1\\<^sub>m n\" \"Q * P = 1\\<^sub>m n\" \"A = P * B * Q\""], ["proof (prove)\nusing this:\n  P * Q = 1\\<^sub>m (dim_row A)\n  Q * P = 1\\<^sub>m (dim_row A)\n  A = P * B * Q\n  A \\<in> carrier_mat (dim_row A) (dim_row A)\n  B \\<in> carrier_mat (dim_row A) (dim_row A)\n  P \\<in> carrier_mat (dim_row A) (dim_row A)\n  Q \\<in> carrier_mat (dim_row A) (dim_row A)\n\ngoal (1 subgoal):\n 1. (\\<And>n.\n        \\<lbrakk>{A, B, P, Q} \\<subseteq> carrier_mat n n;\n         P * Q = 1\\<^sub>m n; Q * P = 1\\<^sub>m n; A = P * B * Q\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  {A, B, P, Q} \\<subseteq> carrier_mat n n\n  P * Q = 1\\<^sub>m n\n  Q * P = 1\\<^sub>m n\n  A = P * B * Q\n\ngoal (1 subgoal):\n 1. similar_mat_wit A C (P * P') (Q' * Q)", "hence B: \"B \\<in> carrier_mat n n\""], ["proof (prove)\nusing this:\n  {A, B, P, Q} \\<subseteq> carrier_mat n n\n  P * Q = 1\\<^sub>m n\n  Q * P = 1\\<^sub>m n\n  A = P * B * Q\n\ngoal (1 subgoal):\n 1. B \\<in> carrier_mat n n", "by auto"], ["proof (state)\nthis:\n  B \\<in> carrier_mat n n\n\ngoal (1 subgoal):\n 1. similar_mat_wit A C (P * P') (Q' * Q)", "from similar_mat_witD2[OF B BC]"], ["proof (chain)\npicking this:\n  P' * Q' = 1\\<^sub>m n\n  Q' * P' = 1\\<^sub>m n\n  B = P' * C * Q'\n  B \\<in> carrier_mat n n\n  C \\<in> carrier_mat n n\n  P' \\<in> carrier_mat n n\n  Q' \\<in> carrier_mat n n", "have\n    BC: \"{C, P', Q'} \\<subseteq> carrier_mat n n\" \"P' * Q' = 1\\<^sub>m n\" \"Q' * P' = 1\\<^sub>m n\" \"B = P' * C * Q'\""], ["proof (prove)\nusing this:\n  P' * Q' = 1\\<^sub>m n\n  Q' * P' = 1\\<^sub>m n\n  B = P' * C * Q'\n  B \\<in> carrier_mat n n\n  C \\<in> carrier_mat n n\n  P' \\<in> carrier_mat n n\n  Q' \\<in> carrier_mat n n\n\ngoal (1 subgoal):\n 1. ({C, P', Q'} \\<subseteq> carrier_mat n n &&& P' * Q' = 1\\<^sub>m n) &&&\n    Q' * P' = 1\\<^sub>m n &&& B = P' * C * Q'", "by auto"], ["proof (state)\nthis:\n  {C, P', Q'} \\<subseteq> carrier_mat n n\n  P' * Q' = 1\\<^sub>m n\n  Q' * P' = 1\\<^sub>m n\n  B = P' * C * Q'\n\ngoal (1 subgoal):\n 1. similar_mat_wit A C (P * P') (Q' * Q)", "let ?c = \"\\<lambda> A. A \\<in> carrier_mat n n\""], ["proof (state)\ngoal (1 subgoal):\n 1. similar_mat_wit A C (P * P') (Q' * Q)", "let ?P = \"P * P'\""], ["proof (state)\ngoal (1 subgoal):\n 1. similar_mat_wit A C (P * P') (Q' * Q)", "let ?Q = \"Q' * Q\""], ["proof (state)\ngoal (1 subgoal):\n 1. similar_mat_wit A C (P * P') (Q' * Q)", "from AB BC"], ["proof (chain)\npicking this:\n  {A, B, P, Q} \\<subseteq> carrier_mat n n\n  P * Q = 1\\<^sub>m n\n  Q * P = 1\\<^sub>m n\n  A = P * B * Q\n  {C, P', Q'} \\<subseteq> carrier_mat n n\n  P' * Q' = 1\\<^sub>m n\n  Q' * P' = 1\\<^sub>m n\n  B = P' * C * Q'", "have carr: \"?c A\" \"?c B\" \"?c C\" \"?c P\" \"?c P'\" \"?c Q\" \"?c Q'\"\n    and Carr: \"{A, C, ?P, ?Q} \\<subseteq> carrier_mat n n\""], ["proof (prove)\nusing this:\n  {A, B, P, Q} \\<subseteq> carrier_mat n n\n  P * Q = 1\\<^sub>m n\n  Q * P = 1\\<^sub>m n\n  A = P * B * Q\n  {C, P', Q'} \\<subseteq> carrier_mat n n\n  P' * Q' = 1\\<^sub>m n\n  Q' * P' = 1\\<^sub>m n\n  B = P' * C * Q'\n\ngoal (1 subgoal):\n 1. ((A \\<in> carrier_mat n n &&&\n      B \\<in> carrier_mat n n &&& C \\<in> carrier_mat n n) &&&\n     (P \\<in> carrier_mat n n &&& P' \\<in> carrier_mat n n) &&&\n     Q \\<in> carrier_mat n n &&& Q' \\<in> carrier_mat n n) &&&\n    {A, C, P * P', Q' * Q} \\<subseteq> carrier_mat n n", "by auto"], ["proof (state)\nthis:\n  A \\<in> carrier_mat n n\n  B \\<in> carrier_mat n n\n  C \\<in> carrier_mat n n\n  P \\<in> carrier_mat n n\n  P' \\<in> carrier_mat n n\n  Q \\<in> carrier_mat n n\n  Q' \\<in> carrier_mat n n\n  {A, C, P * P', Q' * Q} \\<subseteq> carrier_mat n n\n\ngoal (1 subgoal):\n 1. similar_mat_wit A C (P * P') (Q' * Q)", "note [simp] = assoc_mult_mat[of _ n n _ n _ n]"], ["proof (state)\nthis:\n  \\<lbrakk>?A \\<in> carrier_mat n n; ?B \\<in> carrier_mat n n;\n   ?C \\<in> carrier_mat n n\\<rbrakk>\n  \\<Longrightarrow> ?A * ?B * ?C = ?A * (?B * ?C)\n\ngoal (1 subgoal):\n 1. similar_mat_wit A C (P * P') (Q' * Q)", "have id: \"A = ?P * C * ?Q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A = P * P' * C * (Q' * Q)", "unfolding AB(4)[unfolded BC(4)]"], ["proof (prove)\ngoal (1 subgoal):\n 1. P * (P' * C * Q') * Q = P * P' * C * (Q' * Q)", "using carr"], ["proof (prove)\nusing this:\n  A \\<in> carrier_mat n n\n  B \\<in> carrier_mat n n\n  C \\<in> carrier_mat n n\n  P \\<in> carrier_mat n n\n  P' \\<in> carrier_mat n n\n  Q \\<in> carrier_mat n n\n  Q' \\<in> carrier_mat n n\n\ngoal (1 subgoal):\n 1. P * (P' * C * Q') * Q = P * P' * C * (Q' * Q)", "by simp"], ["proof (state)\nthis:\n  A = P * P' * C * (Q' * Q)\n\ngoal (1 subgoal):\n 1. similar_mat_wit A C (P * P') (Q' * Q)", "have \"?P * ?Q = P * (P' * Q') * Q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P * P' * (Q' * Q) = P * (P' * Q') * Q", "using carr"], ["proof (prove)\nusing this:\n  A \\<in> carrier_mat n n\n  B \\<in> carrier_mat n n\n  C \\<in> carrier_mat n n\n  P \\<in> carrier_mat n n\n  P' \\<in> carrier_mat n n\n  Q \\<in> carrier_mat n n\n  Q' \\<in> carrier_mat n n\n\ngoal (1 subgoal):\n 1. P * P' * (Q' * Q) = P * (P' * Q') * Q", "by simp"], ["proof (state)\nthis:\n  P * P' * (Q' * Q) = P * (P' * Q') * Q\n\ngoal (1 subgoal):\n 1. similar_mat_wit A C (P * P') (Q' * Q)", "also"], ["proof (state)\nthis:\n  P * P' * (Q' * Q) = P * (P' * Q') * Q\n\ngoal (1 subgoal):\n 1. similar_mat_wit A C (P * P') (Q' * Q)", "have \"\\<dots> = 1\\<^sub>m n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P * (P' * Q') * Q = 1\\<^sub>m n", "unfolding BC"], ["proof (prove)\ngoal (1 subgoal):\n 1. P * 1\\<^sub>m n * Q = 1\\<^sub>m n", "using carr AB"], ["proof (prove)\nusing this:\n  A \\<in> carrier_mat n n\n  B \\<in> carrier_mat n n\n  C \\<in> carrier_mat n n\n  P \\<in> carrier_mat n n\n  P' \\<in> carrier_mat n n\n  Q \\<in> carrier_mat n n\n  Q' \\<in> carrier_mat n n\n  {A, B, P, Q} \\<subseteq> carrier_mat n n\n  P * Q = 1\\<^sub>m n\n  Q * P = 1\\<^sub>m n\n  A = P * B * Q\n\ngoal (1 subgoal):\n 1. P * 1\\<^sub>m n * Q = 1\\<^sub>m n", "by simp"], ["proof (state)\nthis:\n  P * (P' * Q') * Q = 1\\<^sub>m n\n\ngoal (1 subgoal):\n 1. similar_mat_wit A C (P * P') (Q' * Q)", "finally"], ["proof (chain)\npicking this:\n  P * P' * (Q' * Q) = 1\\<^sub>m n", "have PQ: \"?P * ?Q = 1\\<^sub>m n\""], ["proof (prove)\nusing this:\n  P * P' * (Q' * Q) = 1\\<^sub>m n\n\ngoal (1 subgoal):\n 1. P * P' * (Q' * Q) = 1\\<^sub>m n", "."], ["proof (state)\nthis:\n  P * P' * (Q' * Q) = 1\\<^sub>m n\n\ngoal (1 subgoal):\n 1. similar_mat_wit A C (P * P') (Q' * Q)", "have \"?Q * ?P = Q' * (Q * P) * P'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Q' * Q * (P * P') = Q' * (Q * P) * P'", "using carr"], ["proof (prove)\nusing this:\n  A \\<in> carrier_mat n n\n  B \\<in> carrier_mat n n\n  C \\<in> carrier_mat n n\n  P \\<in> carrier_mat n n\n  P' \\<in> carrier_mat n n\n  Q \\<in> carrier_mat n n\n  Q' \\<in> carrier_mat n n\n\ngoal (1 subgoal):\n 1. Q' * Q * (P * P') = Q' * (Q * P) * P'", "by simp"], ["proof (state)\nthis:\n  Q' * Q * (P * P') = Q' * (Q * P) * P'\n\ngoal (1 subgoal):\n 1. similar_mat_wit A C (P * P') (Q' * Q)", "also"], ["proof (state)\nthis:\n  Q' * Q * (P * P') = Q' * (Q * P) * P'\n\ngoal (1 subgoal):\n 1. similar_mat_wit A C (P * P') (Q' * Q)", "have \"\\<dots> = 1\\<^sub>m n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Q' * (Q * P) * P' = 1\\<^sub>m n", "unfolding AB"], ["proof (prove)\ngoal (1 subgoal):\n 1. Q' * 1\\<^sub>m n * P' = 1\\<^sub>m n", "using carr BC"], ["proof (prove)\nusing this:\n  A \\<in> carrier_mat n n\n  B \\<in> carrier_mat n n\n  C \\<in> carrier_mat n n\n  P \\<in> carrier_mat n n\n  P' \\<in> carrier_mat n n\n  Q \\<in> carrier_mat n n\n  Q' \\<in> carrier_mat n n\n  {C, P', Q'} \\<subseteq> carrier_mat n n\n  P' * Q' = 1\\<^sub>m n\n  Q' * P' = 1\\<^sub>m n\n  B = P' * C * Q'\n\ngoal (1 subgoal):\n 1. Q' * 1\\<^sub>m n * P' = 1\\<^sub>m n", "by simp"], ["proof (state)\nthis:\n  Q' * (Q * P) * P' = 1\\<^sub>m n\n\ngoal (1 subgoal):\n 1. similar_mat_wit A C (P * P') (Q' * Q)", "finally"], ["proof (chain)\npicking this:\n  Q' * Q * (P * P') = 1\\<^sub>m n", "have QP: \"?Q * ?P = 1\\<^sub>m n\""], ["proof (prove)\nusing this:\n  Q' * Q * (P * P') = 1\\<^sub>m n\n\ngoal (1 subgoal):\n 1. Q' * Q * (P * P') = 1\\<^sub>m n", "."], ["proof (state)\nthis:\n  Q' * Q * (P * P') = 1\\<^sub>m n\n\ngoal (1 subgoal):\n 1. similar_mat_wit A C (P * P') (Q' * Q)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. similar_mat_wit A C (P * P') (Q' * Q)", "by (rule similar_mat_witI[OF PQ QP id], insert Carr, auto)"], ["proof (state)\nthis:\n  similar_mat_wit A C (P * P') (Q' * Q)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma similar_mat_refl: \"A \\<in> carrier_mat n n \\<Longrightarrow> similar_mat A A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A \\<in> carrier_mat n n \\<Longrightarrow> similar_mat A A", "using similar_mat_wit_refl"], ["proof (prove)\nusing this:\n  ?A \\<in> carrier_mat ?n ?n \\<Longrightarrow>\n  similar_mat_wit ?A ?A (1\\<^sub>m ?n) (1\\<^sub>m ?n)\n\ngoal (1 subgoal):\n 1. A \\<in> carrier_mat n n \\<Longrightarrow> similar_mat A A", "unfolding similar_mat_def"], ["proof (prove)\nusing this:\n  ?A \\<in> carrier_mat ?n ?n \\<Longrightarrow>\n  similar_mat_wit ?A ?A (1\\<^sub>m ?n) (1\\<^sub>m ?n)\n\ngoal (1 subgoal):\n 1. A \\<in> carrier_mat n n \\<Longrightarrow>\n    \\<exists>P. Ex (similar_mat_wit A A P)", "by blast"], ["", "lemma similar_mat_trans: \"similar_mat A B \\<Longrightarrow> similar_mat B C \\<Longrightarrow> similar_mat A C\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>similar_mat A B; similar_mat B C\\<rbrakk>\n    \\<Longrightarrow> similar_mat A C", "using similar_mat_wit_trans"], ["proof (prove)\nusing this:\n  \\<lbrakk>similar_mat_wit ?A ?B ?P ?Q;\n   similar_mat_wit ?B ?C ?P' ?Q'\\<rbrakk>\n  \\<Longrightarrow> similar_mat_wit ?A ?C (?P * ?P') (?Q' * ?Q)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>similar_mat A B; similar_mat B C\\<rbrakk>\n    \\<Longrightarrow> similar_mat A C", "unfolding similar_mat_def"], ["proof (prove)\nusing this:\n  \\<lbrakk>similar_mat_wit ?A ?B ?P ?Q;\n   similar_mat_wit ?B ?C ?P' ?Q'\\<rbrakk>\n  \\<Longrightarrow> similar_mat_wit ?A ?C (?P * ?P') (?Q' * ?Q)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<exists>P. Ex (similar_mat_wit A B P);\n     \\<exists>P. Ex (similar_mat_wit B C P)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>P. Ex (similar_mat_wit A C P)", "by blast"], ["", "lemma similar_mat_sym: \"similar_mat A B \\<Longrightarrow> similar_mat B A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. similar_mat A B \\<Longrightarrow> similar_mat B A", "using similar_mat_wit_sym"], ["proof (prove)\nusing this:\n  similar_mat_wit ?A ?B ?P ?Q \\<Longrightarrow> similar_mat_wit ?B ?A ?Q ?P\n\ngoal (1 subgoal):\n 1. similar_mat A B \\<Longrightarrow> similar_mat B A", "unfolding similar_mat_def"], ["proof (prove)\nusing this:\n  similar_mat_wit ?A ?B ?P ?Q \\<Longrightarrow> similar_mat_wit ?B ?A ?Q ?P\n\ngoal (1 subgoal):\n 1. \\<exists>P. Ex (similar_mat_wit A B P) \\<Longrightarrow>\n    \\<exists>P. Ex (similar_mat_wit B A P)", "by blast"], ["", "lemma similar_mat_wit_four_block: assumes\n      1: \"similar_mat_wit A1 B1 P1 Q1\"\n  and 2: \"similar_mat_wit A2 B2 P2 Q2\"\n  and URA: \"URA = (P1 * UR * Q2)\"\n  and LLA: \"LLA = (P2 * LL * Q1)\"\n  and A1: \"A1 \\<in> carrier_mat n n\"\n  and A2: \"A2 \\<in> carrier_mat m m\"\n  and LL: \"LL \\<in> carrier_mat m n\"\n  and UR: \"UR \\<in> carrier_mat n m\"\n  shows \"similar_mat_wit (four_block_mat A1 URA LLA A2) (four_block_mat B1 UR LL B2)\n    (four_block_mat P1 (0\\<^sub>m n m) (0\\<^sub>m m n) P2) (four_block_mat Q1 (0\\<^sub>m n m) (0\\<^sub>m m n) Q2)\"\n  (is \"similar_mat_wit ?A ?B ?P ?Q\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. similar_mat_wit (four_block_mat A1 URA LLA A2)\n     (four_block_mat B1 UR LL B2)\n     (four_block_mat P1 (0\\<^sub>m n m) (0\\<^sub>m m n) P2)\n     (four_block_mat Q1 (0\\<^sub>m n m) (0\\<^sub>m m n) Q2)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. similar_mat_wit (four_block_mat A1 URA LLA A2)\n     (four_block_mat B1 UR LL B2)\n     (four_block_mat P1 (0\\<^sub>m n m) (0\\<^sub>m m n) P2)\n     (four_block_mat Q1 (0\\<^sub>m n m) (0\\<^sub>m m n) Q2)", "let ?n = \"n + m\""], ["proof (state)\ngoal (1 subgoal):\n 1. similar_mat_wit (four_block_mat A1 URA LLA A2)\n     (four_block_mat B1 UR LL B2)\n     (four_block_mat P1 (0\\<^sub>m n m) (0\\<^sub>m m n) P2)\n     (four_block_mat Q1 (0\\<^sub>m n m) (0\\<^sub>m m n) Q2)", "let ?O1 = \"1\\<^sub>m n\""], ["proof (state)\ngoal (1 subgoal):\n 1. similar_mat_wit (four_block_mat A1 URA LLA A2)\n     (four_block_mat B1 UR LL B2)\n     (four_block_mat P1 (0\\<^sub>m n m) (0\\<^sub>m m n) P2)\n     (four_block_mat Q1 (0\\<^sub>m n m) (0\\<^sub>m m n) Q2)", "let ?O2 = \"1\\<^sub>m m\""], ["proof (state)\ngoal (1 subgoal):\n 1. similar_mat_wit (four_block_mat A1 URA LLA A2)\n     (four_block_mat B1 UR LL B2)\n     (four_block_mat P1 (0\\<^sub>m n m) (0\\<^sub>m m n) P2)\n     (four_block_mat Q1 (0\\<^sub>m n m) (0\\<^sub>m m n) Q2)", "let ?O = \"1\\<^sub>m ?n\""], ["proof (state)\ngoal (1 subgoal):\n 1. similar_mat_wit (four_block_mat A1 URA LLA A2)\n     (four_block_mat B1 UR LL B2)\n     (four_block_mat P1 (0\\<^sub>m n m) (0\\<^sub>m m n) P2)\n     (four_block_mat Q1 (0\\<^sub>m n m) (0\\<^sub>m m n) Q2)", "from similar_mat_witD2[OF A1 1]"], ["proof (chain)\npicking this:\n  P1 * Q1 = 1\\<^sub>m n\n  Q1 * P1 = 1\\<^sub>m n\n  A1 = P1 * B1 * Q1\n  A1 \\<in> carrier_mat n n\n  B1 \\<in> carrier_mat n n\n  P1 \\<in> carrier_mat n n\n  Q1 \\<in> carrier_mat n n", "have 11: \"P1 * Q1 = ?O1\" \"Q1 * P1 = ?O1\"\n    and P1: \"P1 \\<in> carrier_mat n n\" and Q1: \"Q1 \\<in> carrier_mat n n\"\n    and B1: \"B1 \\<in> carrier_mat n n\" and 1: \"A1 = P1 * B1 * Q1\""], ["proof (prove)\nusing this:\n  P1 * Q1 = 1\\<^sub>m n\n  Q1 * P1 = 1\\<^sub>m n\n  A1 = P1 * B1 * Q1\n  A1 \\<in> carrier_mat n n\n  B1 \\<in> carrier_mat n n\n  P1 \\<in> carrier_mat n n\n  Q1 \\<in> carrier_mat n n\n\ngoal (1 subgoal):\n 1. ((P1 * Q1 = 1\\<^sub>m n &&& Q1 * P1 = 1\\<^sub>m n) &&&\n     P1 \\<in> carrier_mat n n) &&&\n    Q1 \\<in> carrier_mat n n &&&\n    B1 \\<in> carrier_mat n n &&& A1 = P1 * B1 * Q1", "by auto"], ["proof (state)\nthis:\n  P1 * Q1 = 1\\<^sub>m n\n  Q1 * P1 = 1\\<^sub>m n\n  P1 \\<in> carrier_mat n n\n  Q1 \\<in> carrier_mat n n\n  B1 \\<in> carrier_mat n n\n  A1 = P1 * B1 * Q1\n\ngoal (1 subgoal):\n 1. similar_mat_wit (four_block_mat A1 URA LLA A2)\n     (four_block_mat B1 UR LL B2)\n     (four_block_mat P1 (0\\<^sub>m n m) (0\\<^sub>m m n) P2)\n     (four_block_mat Q1 (0\\<^sub>m n m) (0\\<^sub>m m n) Q2)", "from similar_mat_witD2[OF A2 2]"], ["proof (chain)\npicking this:\n  P2 * Q2 = 1\\<^sub>m m\n  Q2 * P2 = 1\\<^sub>m m\n  A2 = P2 * B2 * Q2\n  A2 \\<in> carrier_mat m m\n  B2 \\<in> carrier_mat m m\n  P2 \\<in> carrier_mat m m\n  Q2 \\<in> carrier_mat m m", "have 21: \"P2 * Q2 = ?O2\" \"Q2 * P2 = ?O2\"\n    and P2: \"P2 \\<in> carrier_mat m m\" and Q2: \"Q2 \\<in> carrier_mat m m\"\n    and B2: \"B2 \\<in> carrier_mat m m\" and 2: \"A2 = P2 * B2 * Q2\""], ["proof (prove)\nusing this:\n  P2 * Q2 = 1\\<^sub>m m\n  Q2 * P2 = 1\\<^sub>m m\n  A2 = P2 * B2 * Q2\n  A2 \\<in> carrier_mat m m\n  B2 \\<in> carrier_mat m m\n  P2 \\<in> carrier_mat m m\n  Q2 \\<in> carrier_mat m m\n\ngoal (1 subgoal):\n 1. ((P2 * Q2 = 1\\<^sub>m m &&& Q2 * P2 = 1\\<^sub>m m) &&&\n     P2 \\<in> carrier_mat m m) &&&\n    Q2 \\<in> carrier_mat m m &&&\n    B2 \\<in> carrier_mat m m &&& A2 = P2 * B2 * Q2", "by auto"], ["proof (state)\nthis:\n  P2 * Q2 = 1\\<^sub>m m\n  Q2 * P2 = 1\\<^sub>m m\n  P2 \\<in> carrier_mat m m\n  Q2 \\<in> carrier_mat m m\n  B2 \\<in> carrier_mat m m\n  A2 = P2 * B2 * Q2\n\ngoal (1 subgoal):\n 1. similar_mat_wit (four_block_mat A1 URA LLA A2)\n     (four_block_mat B1 UR LL B2)\n     (four_block_mat P1 (0\\<^sub>m n m) (0\\<^sub>m m n) P2)\n     (four_block_mat Q1 (0\\<^sub>m n m) (0\\<^sub>m m n) Q2)", "have PQ1: \"?P * ?Q = ?O\""], ["proof (prove)\ngoal (1 subgoal):\n 1. four_block_mat P1 (0\\<^sub>m n m) (0\\<^sub>m m n) P2 *\n    four_block_mat Q1 (0\\<^sub>m n m) (0\\<^sub>m m n) Q2 =\n    1\\<^sub>m (n + m)", "by (subst mult_four_block_mat[OF P1 _ _ P2 Q1 _ _ Q2], unfold 11 21, insert P1 P2 Q1 Q2,\n      auto intro!: eq_matI)"], ["proof (state)\nthis:\n  four_block_mat P1 (0\\<^sub>m n m) (0\\<^sub>m m n) P2 *\n  four_block_mat Q1 (0\\<^sub>m n m) (0\\<^sub>m m n) Q2 =\n  1\\<^sub>m (n + m)\n\ngoal (1 subgoal):\n 1. similar_mat_wit (four_block_mat A1 URA LLA A2)\n     (four_block_mat B1 UR LL B2)\n     (four_block_mat P1 (0\\<^sub>m n m) (0\\<^sub>m m n) P2)\n     (four_block_mat Q1 (0\\<^sub>m n m) (0\\<^sub>m m n) Q2)", "have QP1: \"?Q * ?P = ?O\""], ["proof (prove)\ngoal (1 subgoal):\n 1. four_block_mat Q1 (0\\<^sub>m n m) (0\\<^sub>m m n) Q2 *\n    four_block_mat P1 (0\\<^sub>m n m) (0\\<^sub>m m n) P2 =\n    1\\<^sub>m (n + m)", "by (subst mult_four_block_mat[OF Q1 _ _ Q2 P1 _ _ P2], unfold 11 21, insert P1 P2 Q1 Q2,\n      auto intro!: eq_matI)"], ["proof (state)\nthis:\n  four_block_mat Q1 (0\\<^sub>m n m) (0\\<^sub>m m n) Q2 *\n  four_block_mat P1 (0\\<^sub>m n m) (0\\<^sub>m m n) P2 =\n  1\\<^sub>m (n + m)\n\ngoal (1 subgoal):\n 1. similar_mat_wit (four_block_mat A1 URA LLA A2)\n     (four_block_mat B1 UR LL B2)\n     (four_block_mat P1 (0\\<^sub>m n m) (0\\<^sub>m m n) P2)\n     (four_block_mat Q1 (0\\<^sub>m n m) (0\\<^sub>m m n) Q2)", "let ?PB = \"?P * ?B\""], ["proof (state)\ngoal (1 subgoal):\n 1. similar_mat_wit (four_block_mat A1 URA LLA A2)\n     (four_block_mat B1 UR LL B2)\n     (four_block_mat P1 (0\\<^sub>m n m) (0\\<^sub>m m n) P2)\n     (four_block_mat Q1 (0\\<^sub>m n m) (0\\<^sub>m m n) Q2)", "have P: \"?P \\<in> carrier_mat ?n ?n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. four_block_mat P1 (0\\<^sub>m n m) (0\\<^sub>m m n) P2\n    \\<in> carrier_mat (n + m) (n + m)", "using P1 P2"], ["proof (prove)\nusing this:\n  P1 \\<in> carrier_mat n n\n  P2 \\<in> carrier_mat m m\n\ngoal (1 subgoal):\n 1. four_block_mat P1 (0\\<^sub>m n m) (0\\<^sub>m m n) P2\n    \\<in> carrier_mat (n + m) (n + m)", "by auto"], ["proof (state)\nthis:\n  four_block_mat P1 (0\\<^sub>m n m) (0\\<^sub>m m n) P2\n  \\<in> carrier_mat (n + m) (n + m)\n\ngoal (1 subgoal):\n 1. similar_mat_wit (four_block_mat A1 URA LLA A2)\n     (four_block_mat B1 UR LL B2)\n     (four_block_mat P1 (0\\<^sub>m n m) (0\\<^sub>m m n) P2)\n     (four_block_mat Q1 (0\\<^sub>m n m) (0\\<^sub>m m n) Q2)", "have Q: \"?Q \\<in> carrier_mat ?n ?n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. four_block_mat Q1 (0\\<^sub>m n m) (0\\<^sub>m m n) Q2\n    \\<in> carrier_mat (n + m) (n + m)", "using Q1 Q2"], ["proof (prove)\nusing this:\n  Q1 \\<in> carrier_mat n n\n  Q2 \\<in> carrier_mat m m\n\ngoal (1 subgoal):\n 1. four_block_mat Q1 (0\\<^sub>m n m) (0\\<^sub>m m n) Q2\n    \\<in> carrier_mat (n + m) (n + m)", "by auto"], ["proof (state)\nthis:\n  four_block_mat Q1 (0\\<^sub>m n m) (0\\<^sub>m m n) Q2\n  \\<in> carrier_mat (n + m) (n + m)\n\ngoal (1 subgoal):\n 1. similar_mat_wit (four_block_mat A1 URA LLA A2)\n     (four_block_mat B1 UR LL B2)\n     (four_block_mat P1 (0\\<^sub>m n m) (0\\<^sub>m m n) P2)\n     (four_block_mat Q1 (0\\<^sub>m n m) (0\\<^sub>m m n) Q2)", "have B: \"?B \\<in> carrier_mat ?n ?n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. four_block_mat B1 UR LL B2 \\<in> carrier_mat (n + m) (n + m)", "using B1 UR LL B2"], ["proof (prove)\nusing this:\n  B1 \\<in> carrier_mat n n\n  UR \\<in> carrier_mat n m\n  LL \\<in> carrier_mat m n\n  B2 \\<in> carrier_mat m m\n\ngoal (1 subgoal):\n 1. four_block_mat B1 UR LL B2 \\<in> carrier_mat (n + m) (n + m)", "by auto"], ["proof (state)\nthis:\n  four_block_mat B1 UR LL B2 \\<in> carrier_mat (n + m) (n + m)\n\ngoal (1 subgoal):\n 1. similar_mat_wit (four_block_mat A1 URA LLA A2)\n     (four_block_mat B1 UR LL B2)\n     (four_block_mat P1 (0\\<^sub>m n m) (0\\<^sub>m m n) P2)\n     (four_block_mat Q1 (0\\<^sub>m n m) (0\\<^sub>m m n) Q2)", "have PB: \"?PB \\<in> carrier_mat ?n ?n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. four_block_mat P1 (0\\<^sub>m n m) (0\\<^sub>m m n) P2 *\n    four_block_mat B1 UR LL B2\n    \\<in> carrier_mat (n + m) (n + m)", "using P B"], ["proof (prove)\nusing this:\n  four_block_mat P1 (0\\<^sub>m n m) (0\\<^sub>m m n) P2\n  \\<in> carrier_mat (n + m) (n + m)\n  four_block_mat B1 UR LL B2 \\<in> carrier_mat (n + m) (n + m)\n\ngoal (1 subgoal):\n 1. four_block_mat P1 (0\\<^sub>m n m) (0\\<^sub>m m n) P2 *\n    four_block_mat B1 UR LL B2\n    \\<in> carrier_mat (n + m) (n + m)", "by auto"], ["proof (state)\nthis:\n  four_block_mat P1 (0\\<^sub>m n m) (0\\<^sub>m m n) P2 *\n  four_block_mat B1 UR LL B2\n  \\<in> carrier_mat (n + m) (n + m)\n\ngoal (1 subgoal):\n 1. similar_mat_wit (four_block_mat A1 URA LLA A2)\n     (four_block_mat B1 UR LL B2)\n     (four_block_mat P1 (0\\<^sub>m n m) (0\\<^sub>m m n) P2)\n     (four_block_mat Q1 (0\\<^sub>m n m) (0\\<^sub>m m n) Q2)", "have PB1: \"P1 * B1 \\<in> carrier_mat n n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P1 * B1 \\<in> carrier_mat n n", "using P1 B1"], ["proof (prove)\nusing this:\n  P1 \\<in> carrier_mat n n\n  B1 \\<in> carrier_mat n n\n\ngoal (1 subgoal):\n 1. P1 * B1 \\<in> carrier_mat n n", "by auto"], ["proof (state)\nthis:\n  P1 * B1 \\<in> carrier_mat n n\n\ngoal (1 subgoal):\n 1. similar_mat_wit (four_block_mat A1 URA LLA A2)\n     (four_block_mat B1 UR LL B2)\n     (four_block_mat P1 (0\\<^sub>m n m) (0\\<^sub>m m n) P2)\n     (four_block_mat Q1 (0\\<^sub>m n m) (0\\<^sub>m m n) Q2)", "have PB2: \"P2 * B2 \\<in> carrier_mat m m\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P2 * B2 \\<in> carrier_mat m m", "using P2 B2"], ["proof (prove)\nusing this:\n  P2 \\<in> carrier_mat m m\n  B2 \\<in> carrier_mat m m\n\ngoal (1 subgoal):\n 1. P2 * B2 \\<in> carrier_mat m m", "by auto"], ["proof (state)\nthis:\n  P2 * B2 \\<in> carrier_mat m m\n\ngoal (1 subgoal):\n 1. similar_mat_wit (four_block_mat A1 URA LLA A2)\n     (four_block_mat B1 UR LL B2)\n     (four_block_mat P1 (0\\<^sub>m n m) (0\\<^sub>m m n) P2)\n     (four_block_mat Q1 (0\\<^sub>m n m) (0\\<^sub>m m n) Q2)", "have P1UR: \"P1 * UR \\<in> carrier_mat n m\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P1 * UR \\<in> carrier_mat n m", "using P1 UR"], ["proof (prove)\nusing this:\n  P1 \\<in> carrier_mat n n\n  UR \\<in> carrier_mat n m\n\ngoal (1 subgoal):\n 1. P1 * UR \\<in> carrier_mat n m", "by auto"], ["proof (state)\nthis:\n  P1 * UR \\<in> carrier_mat n m\n\ngoal (1 subgoal):\n 1. similar_mat_wit (four_block_mat A1 URA LLA A2)\n     (four_block_mat B1 UR LL B2)\n     (four_block_mat P1 (0\\<^sub>m n m) (0\\<^sub>m m n) P2)\n     (four_block_mat Q1 (0\\<^sub>m n m) (0\\<^sub>m m n) Q2)", "have P2LL: \"P2 * LL \\<in> carrier_mat m n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P2 * LL \\<in> carrier_mat m n", "using P2 LL"], ["proof (prove)\nusing this:\n  P2 \\<in> carrier_mat m m\n  LL \\<in> carrier_mat m n\n\ngoal (1 subgoal):\n 1. P2 * LL \\<in> carrier_mat m n", "by auto"], ["proof (state)\nthis:\n  P2 * LL \\<in> carrier_mat m n\n\ngoal (1 subgoal):\n 1. similar_mat_wit (four_block_mat A1 URA LLA A2)\n     (four_block_mat B1 UR LL B2)\n     (four_block_mat P1 (0\\<^sub>m n m) (0\\<^sub>m m n) P2)\n     (four_block_mat Q1 (0\\<^sub>m n m) (0\\<^sub>m m n) Q2)", "have id: \"?PB = four_block_mat (P1 * B1) (P1 * UR) (P2 * LL) (P2 * B2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. four_block_mat P1 (0\\<^sub>m n m) (0\\<^sub>m m n) P2 *\n    four_block_mat B1 UR LL B2 =\n    four_block_mat (P1 * B1) (P1 * UR) (P2 * LL) (P2 * B2)", "by (subst mult_four_block_mat[OF P1 _ _ P2 B1 UR LL B2], insert P1 P2 B1 B2 LL UR, auto)"], ["proof (state)\nthis:\n  four_block_mat P1 (0\\<^sub>m n m) (0\\<^sub>m m n) P2 *\n  four_block_mat B1 UR LL B2 =\n  four_block_mat (P1 * B1) (P1 * UR) (P2 * LL) (P2 * B2)\n\ngoal (1 subgoal):\n 1. similar_mat_wit (four_block_mat A1 URA LLA A2)\n     (four_block_mat B1 UR LL B2)\n     (four_block_mat P1 (0\\<^sub>m n m) (0\\<^sub>m m n) P2)\n     (four_block_mat Q1 (0\\<^sub>m n m) (0\\<^sub>m m n) Q2)", "have id: \"?PB * ?Q = four_block_mat (P1 * B1 * Q1) (P1 * UR * Q2)\n    (P2 * LL * Q1) (P2 * B2 * Q2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. four_block_mat P1 (0\\<^sub>m n m) (0\\<^sub>m m n) P2 *\n    four_block_mat B1 UR LL B2 *\n    four_block_mat Q1 (0\\<^sub>m n m) (0\\<^sub>m m n) Q2 =\n    four_block_mat (P1 * B1 * Q1) (P1 * UR * Q2) (P2 * LL * Q1)\n     (P2 * B2 * Q2)", "unfolding id"], ["proof (prove)\ngoal (1 subgoal):\n 1. four_block_mat (P1 * B1) (P1 * UR) (P2 * LL) (P2 * B2) *\n    four_block_mat Q1 (0\\<^sub>m n m) (0\\<^sub>m m n) Q2 =\n    four_block_mat (P1 * B1 * Q1) (P1 * UR * Q2) (P2 * LL * Q1)\n     (P2 * B2 * Q2)", "by (subst mult_four_block_mat[OF PB1 P1UR P2LL PB2 Q1 _ _ Q2],\n    insert P1 P2 B1 B2 Q1 Q2 UR LL, auto)"], ["proof (state)\nthis:\n  four_block_mat P1 (0\\<^sub>m n m) (0\\<^sub>m m n) P2 *\n  four_block_mat B1 UR LL B2 *\n  four_block_mat Q1 (0\\<^sub>m n m) (0\\<^sub>m m n) Q2 =\n  four_block_mat (P1 * B1 * Q1) (P1 * UR * Q2) (P2 * LL * Q1) (P2 * B2 * Q2)\n\ngoal (1 subgoal):\n 1. similar_mat_wit (four_block_mat A1 URA LLA A2)\n     (four_block_mat B1 UR LL B2)\n     (four_block_mat P1 (0\\<^sub>m n m) (0\\<^sub>m m n) P2)\n     (four_block_mat Q1 (0\\<^sub>m n m) (0\\<^sub>m m n) Q2)", "have id: \"?A = ?P * ?B * ?Q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. four_block_mat A1 URA LLA A2 =\n    four_block_mat P1 (0\\<^sub>m n m) (0\\<^sub>m m n) P2 *\n    four_block_mat B1 UR LL B2 *\n    four_block_mat Q1 (0\\<^sub>m n m) (0\\<^sub>m m n) Q2", "unfolding id 1 2 URA LLA"], ["proof (prove)\ngoal (1 subgoal):\n 1. four_block_mat (P1 * B1 * Q1) (P1 * UR * Q2) (P2 * LL * Q1)\n     (P2 * B2 * Q2) =\n    four_block_mat (P1 * B1 * Q1) (P1 * UR * Q2) (P2 * LL * Q1)\n     (P2 * B2 * Q2)", ".."], ["proof (state)\nthis:\n  four_block_mat A1 URA LLA A2 =\n  four_block_mat P1 (0\\<^sub>m n m) (0\\<^sub>m m n) P2 *\n  four_block_mat B1 UR LL B2 *\n  four_block_mat Q1 (0\\<^sub>m n m) (0\\<^sub>m m n) Q2\n\ngoal (1 subgoal):\n 1. similar_mat_wit (four_block_mat A1 URA LLA A2)\n     (four_block_mat B1 UR LL B2)\n     (four_block_mat P1 (0\\<^sub>m n m) (0\\<^sub>m m n) P2)\n     (four_block_mat Q1 (0\\<^sub>m n m) (0\\<^sub>m m n) Q2)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. similar_mat_wit (four_block_mat A1 URA LLA A2)\n     (four_block_mat B1 UR LL B2)\n     (four_block_mat P1 (0\\<^sub>m n m) (0\\<^sub>m m n) P2)\n     (four_block_mat Q1 (0\\<^sub>m n m) (0\\<^sub>m m n) Q2)", "by (rule similar_mat_witI[OF PQ1 QP1 id], insert A1 A2 B1 B2 Q1 Q2 P1 P2, auto)"], ["proof (state)\nthis:\n  similar_mat_wit (four_block_mat A1 URA LLA A2)\n   (four_block_mat B1 UR LL B2)\n   (four_block_mat P1 (0\\<^sub>m n m) (0\\<^sub>m m n) P2)\n   (four_block_mat Q1 (0\\<^sub>m n m) (0\\<^sub>m m n) Q2)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma similar_mat_four_block_0_ex: assumes\n      1: \"similar_mat A1 B1\"\n  and 2: \"similar_mat A2 B2\"\n  and A0: \"A0 \\<in> carrier_mat n m\"\n  and A1: \"A1 \\<in> carrier_mat n n\"\n  and A2: \"A2 \\<in> carrier_mat m m\"\n  shows \"\\<exists> B0. B0 \\<in> carrier_mat n m \\<and> similar_mat (four_block_mat A1 A0 (0\\<^sub>m m n) A2)\n    (four_block_mat B1 B0 (0\\<^sub>m m n) B2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>B0.\n       B0 \\<in> carrier_mat n m \\<and>\n       similar_mat (four_block_mat A1 A0 (0\\<^sub>m m n) A2)\n        (four_block_mat B1 B0 (0\\<^sub>m m n) B2)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>B0.\n       B0 \\<in> carrier_mat n m \\<and>\n       similar_mat (four_block_mat A1 A0 (0\\<^sub>m m n) A2)\n        (four_block_mat B1 B0 (0\\<^sub>m m n) B2)", "from 1[unfolded similar_mat_def]"], ["proof (chain)\npicking this:\n  \\<exists>P. Ex (similar_mat_wit A1 B1 P)", "obtain P1 Q1 where 1: \"similar_mat_wit A1 B1 P1 Q1\""], ["proof (prove)\nusing this:\n  \\<exists>P. Ex (similar_mat_wit A1 B1 P)\n\ngoal (1 subgoal):\n 1. (\\<And>P1 Q1.\n        similar_mat_wit A1 B1 P1 Q1 \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  similar_mat_wit A1 B1 P1 Q1\n\ngoal (1 subgoal):\n 1. \\<exists>B0.\n       B0 \\<in> carrier_mat n m \\<and>\n       similar_mat (four_block_mat A1 A0 (0\\<^sub>m m n) A2)\n        (four_block_mat B1 B0 (0\\<^sub>m m n) B2)", "note w1 = similar_mat_witD2[OF A1 1]"], ["proof (state)\nthis:\n  P1 * Q1 = 1\\<^sub>m n\n  Q1 * P1 = 1\\<^sub>m n\n  A1 = P1 * B1 * Q1\n  A1 \\<in> carrier_mat n n\n  B1 \\<in> carrier_mat n n\n  P1 \\<in> carrier_mat n n\n  Q1 \\<in> carrier_mat n n\n\ngoal (1 subgoal):\n 1. \\<exists>B0.\n       B0 \\<in> carrier_mat n m \\<and>\n       similar_mat (four_block_mat A1 A0 (0\\<^sub>m m n) A2)\n        (four_block_mat B1 B0 (0\\<^sub>m m n) B2)", "from 2[unfolded similar_mat_def]"], ["proof (chain)\npicking this:\n  \\<exists>P. Ex (similar_mat_wit A2 B2 P)", "obtain P2 Q2 where 2: \"similar_mat_wit A2 B2 P2 Q2\""], ["proof (prove)\nusing this:\n  \\<exists>P. Ex (similar_mat_wit A2 B2 P)\n\ngoal (1 subgoal):\n 1. (\\<And>P2 Q2.\n        similar_mat_wit A2 B2 P2 Q2 \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  similar_mat_wit A2 B2 P2 Q2\n\ngoal (1 subgoal):\n 1. \\<exists>B0.\n       B0 \\<in> carrier_mat n m \\<and>\n       similar_mat (four_block_mat A1 A0 (0\\<^sub>m m n) A2)\n        (four_block_mat B1 B0 (0\\<^sub>m m n) B2)", "note w2 = similar_mat_witD2[OF A2 2]"], ["proof (state)\nthis:\n  P2 * Q2 = 1\\<^sub>m m\n  Q2 * P2 = 1\\<^sub>m m\n  A2 = P2 * B2 * Q2\n  A2 \\<in> carrier_mat m m\n  B2 \\<in> carrier_mat m m\n  P2 \\<in> carrier_mat m m\n  Q2 \\<in> carrier_mat m m\n\ngoal (1 subgoal):\n 1. \\<exists>B0.\n       B0 \\<in> carrier_mat n m \\<and>\n       similar_mat (four_block_mat A1 A0 (0\\<^sub>m m n) A2)\n        (four_block_mat B1 B0 (0\\<^sub>m m n) B2)", "from w1 w2"], ["proof (chain)\npicking this:\n  P1 * Q1 = 1\\<^sub>m n\n  Q1 * P1 = 1\\<^sub>m n\n  A1 = P1 * B1 * Q1\n  A1 \\<in> carrier_mat n n\n  B1 \\<in> carrier_mat n n\n  P1 \\<in> carrier_mat n n\n  Q1 \\<in> carrier_mat n n\n  P2 * Q2 = 1\\<^sub>m m\n  Q2 * P2 = 1\\<^sub>m m\n  A2 = P2 * B2 * Q2\n  A2 \\<in> carrier_mat m m\n  B2 \\<in> carrier_mat m m\n  P2 \\<in> carrier_mat m m\n  Q2 \\<in> carrier_mat m m", "have C: \"B1 \\<in> carrier_mat n n\" \"B2 \\<in> carrier_mat m m\""], ["proof (prove)\nusing this:\n  P1 * Q1 = 1\\<^sub>m n\n  Q1 * P1 = 1\\<^sub>m n\n  A1 = P1 * B1 * Q1\n  A1 \\<in> carrier_mat n n\n  B1 \\<in> carrier_mat n n\n  P1 \\<in> carrier_mat n n\n  Q1 \\<in> carrier_mat n n\n  P2 * Q2 = 1\\<^sub>m m\n  Q2 * P2 = 1\\<^sub>m m\n  A2 = P2 * B2 * Q2\n  A2 \\<in> carrier_mat m m\n  B2 \\<in> carrier_mat m m\n  P2 \\<in> carrier_mat m m\n  Q2 \\<in> carrier_mat m m\n\ngoal (1 subgoal):\n 1. B1 \\<in> carrier_mat n n &&& B2 \\<in> carrier_mat m m", "by auto"], ["proof (state)\nthis:\n  B1 \\<in> carrier_mat n n\n  B2 \\<in> carrier_mat m m\n\ngoal (1 subgoal):\n 1. \\<exists>B0.\n       B0 \\<in> carrier_mat n m \\<and>\n       similar_mat (four_block_mat A1 A0 (0\\<^sub>m m n) A2)\n        (four_block_mat B1 B0 (0\\<^sub>m m n) B2)", "from w1 w2"], ["proof (chain)\npicking this:\n  P1 * Q1 = 1\\<^sub>m n\n  Q1 * P1 = 1\\<^sub>m n\n  A1 = P1 * B1 * Q1\n  A1 \\<in> carrier_mat n n\n  B1 \\<in> carrier_mat n n\n  P1 \\<in> carrier_mat n n\n  Q1 \\<in> carrier_mat n n\n  P2 * Q2 = 1\\<^sub>m m\n  Q2 * P2 = 1\\<^sub>m m\n  A2 = P2 * B2 * Q2\n  A2 \\<in> carrier_mat m m\n  B2 \\<in> carrier_mat m m\n  P2 \\<in> carrier_mat m m\n  Q2 \\<in> carrier_mat m m", "have id: \"0\\<^sub>m m n = Q2 * 0\\<^sub>m m n * P1\""], ["proof (prove)\nusing this:\n  P1 * Q1 = 1\\<^sub>m n\n  Q1 * P1 = 1\\<^sub>m n\n  A1 = P1 * B1 * Q1\n  A1 \\<in> carrier_mat n n\n  B1 \\<in> carrier_mat n n\n  P1 \\<in> carrier_mat n n\n  Q1 \\<in> carrier_mat n n\n  P2 * Q2 = 1\\<^sub>m m\n  Q2 * P2 = 1\\<^sub>m m\n  A2 = P2 * B2 * Q2\n  A2 \\<in> carrier_mat m m\n  B2 \\<in> carrier_mat m m\n  P2 \\<in> carrier_mat m m\n  Q2 \\<in> carrier_mat m m\n\ngoal (1 subgoal):\n 1. 0\\<^sub>m m n = Q2 * 0\\<^sub>m m n * P1", "by simp"], ["proof (state)\nthis:\n  0\\<^sub>m m n = Q2 * 0\\<^sub>m m n * P1\n\ngoal (1 subgoal):\n 1. \\<exists>B0.\n       B0 \\<in> carrier_mat n m \\<and>\n       similar_mat (four_block_mat A1 A0 (0\\<^sub>m m n) A2)\n        (four_block_mat B1 B0 (0\\<^sub>m m n) B2)", "let ?wit = \"Q1 * A0 * P2\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>B0.\n       B0 \\<in> carrier_mat n m \\<and>\n       similar_mat (four_block_mat A1 A0 (0\\<^sub>m m n) A2)\n        (four_block_mat B1 B0 (0\\<^sub>m m n) B2)", "from w1 w2 A0"], ["proof (chain)\npicking this:\n  P1 * Q1 = 1\\<^sub>m n\n  Q1 * P1 = 1\\<^sub>m n\n  A1 = P1 * B1 * Q1\n  A1 \\<in> carrier_mat n n\n  B1 \\<in> carrier_mat n n\n  P1 \\<in> carrier_mat n n\n  Q1 \\<in> carrier_mat n n\n  P2 * Q2 = 1\\<^sub>m m\n  Q2 * P2 = 1\\<^sub>m m\n  A2 = P2 * B2 * Q2\n  A2 \\<in> carrier_mat m m\n  B2 \\<in> carrier_mat m m\n  P2 \\<in> carrier_mat m m\n  Q2 \\<in> carrier_mat m m\n  A0 \\<in> carrier_mat n m", "have wit: \"?wit \\<in> carrier_mat n m\""], ["proof (prove)\nusing this:\n  P1 * Q1 = 1\\<^sub>m n\n  Q1 * P1 = 1\\<^sub>m n\n  A1 = P1 * B1 * Q1\n  A1 \\<in> carrier_mat n n\n  B1 \\<in> carrier_mat n n\n  P1 \\<in> carrier_mat n n\n  Q1 \\<in> carrier_mat n n\n  P2 * Q2 = 1\\<^sub>m m\n  Q2 * P2 = 1\\<^sub>m m\n  A2 = P2 * B2 * Q2\n  A2 \\<in> carrier_mat m m\n  B2 \\<in> carrier_mat m m\n  P2 \\<in> carrier_mat m m\n  Q2 \\<in> carrier_mat m m\n  A0 \\<in> carrier_mat n m\n\ngoal (1 subgoal):\n 1. Q1 * A0 * P2 \\<in> carrier_mat n m", "by auto"], ["proof (state)\nthis:\n  Q1 * A0 * P2 \\<in> carrier_mat n m\n\ngoal (1 subgoal):\n 1. \\<exists>B0.\n       B0 \\<in> carrier_mat n m \\<and>\n       similar_mat (four_block_mat A1 A0 (0\\<^sub>m m n) A2)\n        (four_block_mat B1 B0 (0\\<^sub>m m n) B2)", "from similar_mat_wit_sym[OF similar_mat_wit_four_block[OF similar_mat_wit_sym[OF 1] similar_mat_wit_sym[OF 2]\n    refl id C zero_carrier_mat A0]]"], ["proof (chain)\npicking this:\n  similar_mat_wit (four_block_mat A1 A0 (0\\<^sub>m m n) A2)\n   (four_block_mat B1 (Q1 * A0 * P2) (0\\<^sub>m m n) B2)\n   (four_block_mat P1 (0\\<^sub>m n m) (0\\<^sub>m m n) P2)\n   (four_block_mat Q1 (0\\<^sub>m n m) (0\\<^sub>m m n) Q2)", "have \"similar_mat (four_block_mat A1 A0 (0\\<^sub>m m n) A2) (four_block_mat B1 (Q1 * A0 * P2) (0\\<^sub>m m n) B2)\""], ["proof (prove)\nusing this:\n  similar_mat_wit (four_block_mat A1 A0 (0\\<^sub>m m n) A2)\n   (four_block_mat B1 (Q1 * A0 * P2) (0\\<^sub>m m n) B2)\n   (four_block_mat P1 (0\\<^sub>m n m) (0\\<^sub>m m n) P2)\n   (four_block_mat Q1 (0\\<^sub>m n m) (0\\<^sub>m m n) Q2)\n\ngoal (1 subgoal):\n 1. similar_mat (four_block_mat A1 A0 (0\\<^sub>m m n) A2)\n     (four_block_mat B1 (Q1 * A0 * P2) (0\\<^sub>m m n) B2)", "unfolding similar_mat_def"], ["proof (prove)\nusing this:\n  similar_mat_wit (four_block_mat A1 A0 (0\\<^sub>m m n) A2)\n   (four_block_mat B1 (Q1 * A0 * P2) (0\\<^sub>m m n) B2)\n   (four_block_mat P1 (0\\<^sub>m n m) (0\\<^sub>m m n) P2)\n   (four_block_mat Q1 (0\\<^sub>m n m) (0\\<^sub>m m n) Q2)\n\ngoal (1 subgoal):\n 1. \\<exists>P.\n       Ex (similar_mat_wit (four_block_mat A1 A0 (0\\<^sub>m m n) A2)\n            (four_block_mat B1 (Q1 * A0 * P2) (0\\<^sub>m m n) B2) P)", "by auto"], ["proof (state)\nthis:\n  similar_mat (four_block_mat A1 A0 (0\\<^sub>m m n) A2)\n   (four_block_mat B1 (Q1 * A0 * P2) (0\\<^sub>m m n) B2)\n\ngoal (1 subgoal):\n 1. \\<exists>B0.\n       B0 \\<in> carrier_mat n m \\<and>\n       similar_mat (four_block_mat A1 A0 (0\\<^sub>m m n) A2)\n        (four_block_mat B1 B0 (0\\<^sub>m m n) B2)", "thus ?thesis"], ["proof (prove)\nusing this:\n  similar_mat (four_block_mat A1 A0 (0\\<^sub>m m n) A2)\n   (four_block_mat B1 (Q1 * A0 * P2) (0\\<^sub>m m n) B2)\n\ngoal (1 subgoal):\n 1. \\<exists>B0.\n       B0 \\<in> carrier_mat n m \\<and>\n       similar_mat (four_block_mat A1 A0 (0\\<^sub>m m n) A2)\n        (four_block_mat B1 B0 (0\\<^sub>m m n) B2)", "using wit"], ["proof (prove)\nusing this:\n  similar_mat (four_block_mat A1 A0 (0\\<^sub>m m n) A2)\n   (four_block_mat B1 (Q1 * A0 * P2) (0\\<^sub>m m n) B2)\n  Q1 * A0 * P2 \\<in> carrier_mat n m\n\ngoal (1 subgoal):\n 1. \\<exists>B0.\n       B0 \\<in> carrier_mat n m \\<and>\n       similar_mat (four_block_mat A1 A0 (0\\<^sub>m m n) A2)\n        (four_block_mat B1 B0 (0\\<^sub>m m n) B2)", "by auto"], ["proof (state)\nthis:\n  \\<exists>B0.\n     B0 \\<in> carrier_mat n m \\<and>\n     similar_mat (four_block_mat A1 A0 (0\\<^sub>m m n) A2)\n      (four_block_mat B1 B0 (0\\<^sub>m m n) B2)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma similar_mat_four_block_0_0: assumes\n      1: \"similar_mat A1 B1\"\n  and 2: \"similar_mat A2 B2\"\n  and A1: \"A1 \\<in> carrier_mat n n\"\n  and A2: \"A2 \\<in> carrier_mat m m\"\n  shows \"similar_mat (four_block_mat A1 (0\\<^sub>m n m) (0\\<^sub>m m n) A2)\n    (four_block_mat B1 (0\\<^sub>m n m) (0\\<^sub>m m n) B2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. similar_mat (four_block_mat A1 (0\\<^sub>m n m) (0\\<^sub>m m n) A2)\n     (four_block_mat B1 (0\\<^sub>m n m) (0\\<^sub>m m n) B2)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. similar_mat (four_block_mat A1 (0\\<^sub>m n m) (0\\<^sub>m m n) A2)\n     (four_block_mat B1 (0\\<^sub>m n m) (0\\<^sub>m m n) B2)", "from 1[unfolded similar_mat_def]"], ["proof (chain)\npicking this:\n  \\<exists>P. Ex (similar_mat_wit A1 B1 P)", "obtain P1 Q1 where 1: \"similar_mat_wit A1 B1 P1 Q1\""], ["proof (prove)\nusing this:\n  \\<exists>P. Ex (similar_mat_wit A1 B1 P)\n\ngoal (1 subgoal):\n 1. (\\<And>P1 Q1.\n        similar_mat_wit A1 B1 P1 Q1 \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  similar_mat_wit A1 B1 P1 Q1\n\ngoal (1 subgoal):\n 1. similar_mat (four_block_mat A1 (0\\<^sub>m n m) (0\\<^sub>m m n) A2)\n     (four_block_mat B1 (0\\<^sub>m n m) (0\\<^sub>m m n) B2)", "note w1 = similar_mat_witD2[OF A1 1]"], ["proof (state)\nthis:\n  P1 * Q1 = 1\\<^sub>m n\n  Q1 * P1 = 1\\<^sub>m n\n  A1 = P1 * B1 * Q1\n  A1 \\<in> carrier_mat n n\n  B1 \\<in> carrier_mat n n\n  P1 \\<in> carrier_mat n n\n  Q1 \\<in> carrier_mat n n\n\ngoal (1 subgoal):\n 1. similar_mat (four_block_mat A1 (0\\<^sub>m n m) (0\\<^sub>m m n) A2)\n     (four_block_mat B1 (0\\<^sub>m n m) (0\\<^sub>m m n) B2)", "from 2[unfolded similar_mat_def]"], ["proof (chain)\npicking this:\n  \\<exists>P. Ex (similar_mat_wit A2 B2 P)", "obtain P2 Q2 where 2: \"similar_mat_wit A2 B2 P2 Q2\""], ["proof (prove)\nusing this:\n  \\<exists>P. Ex (similar_mat_wit A2 B2 P)\n\ngoal (1 subgoal):\n 1. (\\<And>P2 Q2.\n        similar_mat_wit A2 B2 P2 Q2 \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  similar_mat_wit A2 B2 P2 Q2\n\ngoal (1 subgoal):\n 1. similar_mat (four_block_mat A1 (0\\<^sub>m n m) (0\\<^sub>m m n) A2)\n     (four_block_mat B1 (0\\<^sub>m n m) (0\\<^sub>m m n) B2)", "note w2 = similar_mat_witD2[OF A2 2]"], ["proof (state)\nthis:\n  P2 * Q2 = 1\\<^sub>m m\n  Q2 * P2 = 1\\<^sub>m m\n  A2 = P2 * B2 * Q2\n  A2 \\<in> carrier_mat m m\n  B2 \\<in> carrier_mat m m\n  P2 \\<in> carrier_mat m m\n  Q2 \\<in> carrier_mat m m\n\ngoal (1 subgoal):\n 1. similar_mat (four_block_mat A1 (0\\<^sub>m n m) (0\\<^sub>m m n) A2)\n     (four_block_mat B1 (0\\<^sub>m n m) (0\\<^sub>m m n) B2)", "from w1 w2"], ["proof (chain)\npicking this:\n  P1 * Q1 = 1\\<^sub>m n\n  Q1 * P1 = 1\\<^sub>m n\n  A1 = P1 * B1 * Q1\n  A1 \\<in> carrier_mat n n\n  B1 \\<in> carrier_mat n n\n  P1 \\<in> carrier_mat n n\n  Q1 \\<in> carrier_mat n n\n  P2 * Q2 = 1\\<^sub>m m\n  Q2 * P2 = 1\\<^sub>m m\n  A2 = P2 * B2 * Q2\n  A2 \\<in> carrier_mat m m\n  B2 \\<in> carrier_mat m m\n  P2 \\<in> carrier_mat m m\n  Q2 \\<in> carrier_mat m m", "have C: \"B1 \\<in> carrier_mat n n\" \"B2 \\<in> carrier_mat m m\""], ["proof (prove)\nusing this:\n  P1 * Q1 = 1\\<^sub>m n\n  Q1 * P1 = 1\\<^sub>m n\n  A1 = P1 * B1 * Q1\n  A1 \\<in> carrier_mat n n\n  B1 \\<in> carrier_mat n n\n  P1 \\<in> carrier_mat n n\n  Q1 \\<in> carrier_mat n n\n  P2 * Q2 = 1\\<^sub>m m\n  Q2 * P2 = 1\\<^sub>m m\n  A2 = P2 * B2 * Q2\n  A2 \\<in> carrier_mat m m\n  B2 \\<in> carrier_mat m m\n  P2 \\<in> carrier_mat m m\n  Q2 \\<in> carrier_mat m m\n\ngoal (1 subgoal):\n 1. B1 \\<in> carrier_mat n n &&& B2 \\<in> carrier_mat m m", "by auto"], ["proof (state)\nthis:\n  B1 \\<in> carrier_mat n n\n  B2 \\<in> carrier_mat m m\n\ngoal (1 subgoal):\n 1. similar_mat (four_block_mat A1 (0\\<^sub>m n m) (0\\<^sub>m m n) A2)\n     (four_block_mat B1 (0\\<^sub>m n m) (0\\<^sub>m m n) B2)", "from w1 w2"], ["proof (chain)\npicking this:\n  P1 * Q1 = 1\\<^sub>m n\n  Q1 * P1 = 1\\<^sub>m n\n  A1 = P1 * B1 * Q1\n  A1 \\<in> carrier_mat n n\n  B1 \\<in> carrier_mat n n\n  P1 \\<in> carrier_mat n n\n  Q1 \\<in> carrier_mat n n\n  P2 * Q2 = 1\\<^sub>m m\n  Q2 * P2 = 1\\<^sub>m m\n  A2 = P2 * B2 * Q2\n  A2 \\<in> carrier_mat m m\n  B2 \\<in> carrier_mat m m\n  P2 \\<in> carrier_mat m m\n  Q2 \\<in> carrier_mat m m", "have id: \"0\\<^sub>m m n = Q2 * 0\\<^sub>m m n * P1\""], ["proof (prove)\nusing this:\n  P1 * Q1 = 1\\<^sub>m n\n  Q1 * P1 = 1\\<^sub>m n\n  A1 = P1 * B1 * Q1\n  A1 \\<in> carrier_mat n n\n  B1 \\<in> carrier_mat n n\n  P1 \\<in> carrier_mat n n\n  Q1 \\<in> carrier_mat n n\n  P2 * Q2 = 1\\<^sub>m m\n  Q2 * P2 = 1\\<^sub>m m\n  A2 = P2 * B2 * Q2\n  A2 \\<in> carrier_mat m m\n  B2 \\<in> carrier_mat m m\n  P2 \\<in> carrier_mat m m\n  Q2 \\<in> carrier_mat m m\n\ngoal (1 subgoal):\n 1. 0\\<^sub>m m n = Q2 * 0\\<^sub>m m n * P1", "by simp"], ["proof (state)\nthis:\n  0\\<^sub>m m n = Q2 * 0\\<^sub>m m n * P1\n\ngoal (1 subgoal):\n 1. similar_mat (four_block_mat A1 (0\\<^sub>m n m) (0\\<^sub>m m n) A2)\n     (four_block_mat B1 (0\\<^sub>m n m) (0\\<^sub>m m n) B2)", "from w1 w2"], ["proof (chain)\npicking this:\n  P1 * Q1 = 1\\<^sub>m n\n  Q1 * P1 = 1\\<^sub>m n\n  A1 = P1 * B1 * Q1\n  A1 \\<in> carrier_mat n n\n  B1 \\<in> carrier_mat n n\n  P1 \\<in> carrier_mat n n\n  Q1 \\<in> carrier_mat n n\n  P2 * Q2 = 1\\<^sub>m m\n  Q2 * P2 = 1\\<^sub>m m\n  A2 = P2 * B2 * Q2\n  A2 \\<in> carrier_mat m m\n  B2 \\<in> carrier_mat m m\n  P2 \\<in> carrier_mat m m\n  Q2 \\<in> carrier_mat m m", "have id2: \"0\\<^sub>m n m = Q1 * 0\\<^sub>m n m * P2\""], ["proof (prove)\nusing this:\n  P1 * Q1 = 1\\<^sub>m n\n  Q1 * P1 = 1\\<^sub>m n\n  A1 = P1 * B1 * Q1\n  A1 \\<in> carrier_mat n n\n  B1 \\<in> carrier_mat n n\n  P1 \\<in> carrier_mat n n\n  Q1 \\<in> carrier_mat n n\n  P2 * Q2 = 1\\<^sub>m m\n  Q2 * P2 = 1\\<^sub>m m\n  A2 = P2 * B2 * Q2\n  A2 \\<in> carrier_mat m m\n  B2 \\<in> carrier_mat m m\n  P2 \\<in> carrier_mat m m\n  Q2 \\<in> carrier_mat m m\n\ngoal (1 subgoal):\n 1. 0\\<^sub>m n m = Q1 * 0\\<^sub>m n m * P2", "by simp"], ["proof (state)\nthis:\n  0\\<^sub>m n m = Q1 * 0\\<^sub>m n m * P2\n\ngoal (1 subgoal):\n 1. similar_mat (four_block_mat A1 (0\\<^sub>m n m) (0\\<^sub>m m n) A2)\n     (four_block_mat B1 (0\\<^sub>m n m) (0\\<^sub>m m n) B2)", "from similar_mat_wit_sym[OF similar_mat_wit_four_block[OF similar_mat_wit_sym[OF 1] similar_mat_wit_sym[OF 2]\n    id2 id C zero_carrier_mat zero_carrier_mat]]"], ["proof (chain)\npicking this:\n  similar_mat_wit (four_block_mat A1 (0\\<^sub>m n m) (0\\<^sub>m m n) A2)\n   (four_block_mat B1 (0\\<^sub>m n m) (0\\<^sub>m m n) B2)\n   (four_block_mat P1 (0\\<^sub>m n m) (0\\<^sub>m m n) P2)\n   (four_block_mat Q1 (0\\<^sub>m n m) (0\\<^sub>m m n) Q2)", "show ?thesis"], ["proof (prove)\nusing this:\n  similar_mat_wit (four_block_mat A1 (0\\<^sub>m n m) (0\\<^sub>m m n) A2)\n   (four_block_mat B1 (0\\<^sub>m n m) (0\\<^sub>m m n) B2)\n   (four_block_mat P1 (0\\<^sub>m n m) (0\\<^sub>m m n) P2)\n   (four_block_mat Q1 (0\\<^sub>m n m) (0\\<^sub>m m n) Q2)\n\ngoal (1 subgoal):\n 1. similar_mat (four_block_mat A1 (0\\<^sub>m n m) (0\\<^sub>m m n) A2)\n     (four_block_mat B1 (0\\<^sub>m n m) (0\\<^sub>m m n) B2)", "unfolding similar_mat_def"], ["proof (prove)\nusing this:\n  similar_mat_wit (four_block_mat A1 (0\\<^sub>m n m) (0\\<^sub>m m n) A2)\n   (four_block_mat B1 (0\\<^sub>m n m) (0\\<^sub>m m n) B2)\n   (four_block_mat P1 (0\\<^sub>m n m) (0\\<^sub>m m n) P2)\n   (four_block_mat Q1 (0\\<^sub>m n m) (0\\<^sub>m m n) Q2)\n\ngoal (1 subgoal):\n 1. \\<exists>P.\n       Ex (similar_mat_wit\n            (four_block_mat A1 (0\\<^sub>m n m) (0\\<^sub>m m n) A2)\n            (four_block_mat B1 (0\\<^sub>m n m) (0\\<^sub>m m n) B2) P)", "by blast"], ["proof (state)\nthis:\n  similar_mat (four_block_mat A1 (0\\<^sub>m n m) (0\\<^sub>m m n) A2)\n   (four_block_mat B1 (0\\<^sub>m n m) (0\\<^sub>m m n) B2)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma similar_diag_mat_block_mat: assumes \"\\<And> A B. (A,B) \\<in> set Ms \\<Longrightarrow> similar_mat A B\"\n  shows \"similar_mat (diag_block_mat (map fst Ms)) (diag_block_mat (map snd Ms))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. similar_mat (diag_block_mat (map fst Ms)) (diag_block_mat (map snd Ms))", "using assms"], ["proof (prove)\nusing this:\n  (?A, ?B) \\<in> set Ms \\<Longrightarrow> similar_mat ?A ?B\n\ngoal (1 subgoal):\n 1. similar_mat (diag_block_mat (map fst Ms)) (diag_block_mat (map snd Ms))", "proof (induct Ms)"], ["proof (state)\ngoal (2 subgoals):\n 1. (\\<And>A B.\n        (A, B) \\<in> set [] \\<Longrightarrow>\n        similar_mat A B) \\<Longrightarrow>\n    similar_mat (diag_block_mat (map fst [])) (diag_block_mat (map snd []))\n 2. \\<And>a Ms.\n       \\<lbrakk>(\\<And>A B.\n                    (A, B) \\<in> set Ms \\<Longrightarrow>\n                    similar_mat A B) \\<Longrightarrow>\n                similar_mat (diag_block_mat (map fst Ms))\n                 (diag_block_mat (map snd Ms));\n        \\<And>A B.\n           (A, B) \\<in> set (a # Ms) \\<Longrightarrow>\n           similar_mat A B\\<rbrakk>\n       \\<Longrightarrow> similar_mat (diag_block_mat (map fst (a # Ms)))\n                          (diag_block_mat (map snd (a # Ms)))", "case Nil"], ["proof (state)\nthis:\n  (?A, ?B) \\<in> set [] \\<Longrightarrow> similar_mat ?A ?B\n\ngoal (2 subgoals):\n 1. (\\<And>A B.\n        (A, B) \\<in> set [] \\<Longrightarrow>\n        similar_mat A B) \\<Longrightarrow>\n    similar_mat (diag_block_mat (map fst [])) (diag_block_mat (map snd []))\n 2. \\<And>a Ms.\n       \\<lbrakk>(\\<And>A B.\n                    (A, B) \\<in> set Ms \\<Longrightarrow>\n                    similar_mat A B) \\<Longrightarrow>\n                similar_mat (diag_block_mat (map fst Ms))\n                 (diag_block_mat (map snd Ms));\n        \\<And>A B.\n           (A, B) \\<in> set (a # Ms) \\<Longrightarrow>\n           similar_mat A B\\<rbrakk>\n       \\<Longrightarrow> similar_mat (diag_block_mat (map fst (a # Ms)))\n                          (diag_block_mat (map snd (a # Ms)))", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. similar_mat (diag_block_mat (map fst [])) (diag_block_mat (map snd []))", "by (auto intro!: similar_mat_refl[of _ 0])"], ["proof (state)\nthis:\n  similar_mat (diag_block_mat (map fst [])) (diag_block_mat (map snd []))\n\ngoal (1 subgoal):\n 1. \\<And>a Ms.\n       \\<lbrakk>(\\<And>A B.\n                    (A, B) \\<in> set Ms \\<Longrightarrow>\n                    similar_mat A B) \\<Longrightarrow>\n                similar_mat (diag_block_mat (map fst Ms))\n                 (diag_block_mat (map snd Ms));\n        \\<And>A B.\n           (A, B) \\<in> set (a # Ms) \\<Longrightarrow>\n           similar_mat A B\\<rbrakk>\n       \\<Longrightarrow> similar_mat (diag_block_mat (map fst (a # Ms)))\n                          (diag_block_mat (map snd (a # Ms)))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a Ms.\n       \\<lbrakk>(\\<And>A B.\n                    (A, B) \\<in> set Ms \\<Longrightarrow>\n                    similar_mat A B) \\<Longrightarrow>\n                similar_mat (diag_block_mat (map fst Ms))\n                 (diag_block_mat (map snd Ms));\n        \\<And>A B.\n           (A, B) \\<in> set (a # Ms) \\<Longrightarrow>\n           similar_mat A B\\<rbrakk>\n       \\<Longrightarrow> similar_mat (diag_block_mat (map fst (a # Ms)))\n                          (diag_block_mat (map snd (a # Ms)))", "case (Cons AB Ms)"], ["proof (state)\nthis:\n  (\\<And>A B.\n      (A, B) \\<in> set Ms \\<Longrightarrow>\n      similar_mat A B) \\<Longrightarrow>\n  similar_mat (diag_block_mat (map fst Ms)) (diag_block_mat (map snd Ms))\n  (?A, ?B) \\<in> set (AB # Ms) \\<Longrightarrow> similar_mat ?A ?B\n\ngoal (1 subgoal):\n 1. \\<And>a Ms.\n       \\<lbrakk>(\\<And>A B.\n                    (A, B) \\<in> set Ms \\<Longrightarrow>\n                    similar_mat A B) \\<Longrightarrow>\n                similar_mat (diag_block_mat (map fst Ms))\n                 (diag_block_mat (map snd Ms));\n        \\<And>A B.\n           (A, B) \\<in> set (a # Ms) \\<Longrightarrow>\n           similar_mat A B\\<rbrakk>\n       \\<Longrightarrow> similar_mat (diag_block_mat (map fst (a # Ms)))\n                          (diag_block_mat (map snd (a # Ms)))", "obtain A B where AB: \"AB = (A,B)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>A B. AB = (A, B) \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by force"], ["proof (state)\nthis:\n  AB = (A, B)\n\ngoal (1 subgoal):\n 1. \\<And>a Ms.\n       \\<lbrakk>(\\<And>A B.\n                    (A, B) \\<in> set Ms \\<Longrightarrow>\n                    similar_mat A B) \\<Longrightarrow>\n                similar_mat (diag_block_mat (map fst Ms))\n                 (diag_block_mat (map snd Ms));\n        \\<And>A B.\n           (A, B) \\<in> set (a # Ms) \\<Longrightarrow>\n           similar_mat A B\\<rbrakk>\n       \\<Longrightarrow> similar_mat (diag_block_mat (map fst (a # Ms)))\n                          (diag_block_mat (map snd (a # Ms)))", "from Cons(2)[of A B]"], ["proof (chain)\npicking this:\n  (A, B) \\<in> set (AB # Ms) \\<Longrightarrow> similar_mat A B", "have simAB: \"similar_mat A B\""], ["proof (prove)\nusing this:\n  (A, B) \\<in> set (AB # Ms) \\<Longrightarrow> similar_mat A B\n\ngoal (1 subgoal):\n 1. similar_mat A B", "unfolding AB"], ["proof (prove)\nusing this:\n  (A, B) \\<in> set ((A, B) # Ms) \\<Longrightarrow> similar_mat A B\n\ngoal (1 subgoal):\n 1. similar_mat A B", "by auto"], ["proof (state)\nthis:\n  similar_mat A B\n\ngoal (1 subgoal):\n 1. \\<And>a Ms.\n       \\<lbrakk>(\\<And>A B.\n                    (A, B) \\<in> set Ms \\<Longrightarrow>\n                    similar_mat A B) \\<Longrightarrow>\n                similar_mat (diag_block_mat (map fst Ms))\n                 (diag_block_mat (map snd Ms));\n        \\<And>A B.\n           (A, B) \\<in> set (a # Ms) \\<Longrightarrow>\n           similar_mat A B\\<rbrakk>\n       \\<Longrightarrow> similar_mat (diag_block_mat (map fst (a # Ms)))\n                          (diag_block_mat (map snd (a # Ms)))", "from similar_matD[OF this]"], ["proof (chain)\npicking this:\n  \\<exists>n P Q.\n     {A, B, P, Q} \\<subseteq> carrier_mat n n \\<and>\n     P * Q = 1\\<^sub>m n \\<and> Q * P = 1\\<^sub>m n \\<and> A = P * B * Q", "obtain n where A: \"A \\<in> carrier_mat n n\" and B: \"B \\<in> carrier_mat n n\""], ["proof (prove)\nusing this:\n  \\<exists>n P Q.\n     {A, B, P, Q} \\<subseteq> carrier_mat n n \\<and>\n     P * Q = 1\\<^sub>m n \\<and> Q * P = 1\\<^sub>m n \\<and> A = P * B * Q\n\ngoal (1 subgoal):\n 1. (\\<And>n.\n        \\<lbrakk>A \\<in> carrier_mat n n; B \\<in> carrier_mat n n\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  A \\<in> carrier_mat n n\n  B \\<in> carrier_mat n n\n\ngoal (1 subgoal):\n 1. \\<And>a Ms.\n       \\<lbrakk>(\\<And>A B.\n                    (A, B) \\<in> set Ms \\<Longrightarrow>\n                    similar_mat A B) \\<Longrightarrow>\n                similar_mat (diag_block_mat (map fst Ms))\n                 (diag_block_mat (map snd Ms));\n        \\<And>A B.\n           (A, B) \\<in> set (a # Ms) \\<Longrightarrow>\n           similar_mat A B\\<rbrakk>\n       \\<Longrightarrow> similar_mat (diag_block_mat (map fst (a # Ms)))\n                          (diag_block_mat (map snd (a # Ms)))", "hence [simp]: \"dim_row A = n\" \"dim_col A = n\" \"dim_row B = n\" \"dim_col B = n\""], ["proof (prove)\nusing this:\n  A \\<in> carrier_mat n n\n  B \\<in> carrier_mat n n\n\ngoal (1 subgoal):\n 1. (dim_row A = n &&& dim_col A = n) &&& dim_row B = n &&& dim_col B = n", "by auto"], ["proof (state)\nthis:\n  dim_row A = n\n  dim_col A = n\n  dim_row B = n\n  dim_col B = n\n\ngoal (1 subgoal):\n 1. \\<And>a Ms.\n       \\<lbrakk>(\\<And>A B.\n                    (A, B) \\<in> set Ms \\<Longrightarrow>\n                    similar_mat A B) \\<Longrightarrow>\n                similar_mat (diag_block_mat (map fst Ms))\n                 (diag_block_mat (map snd Ms));\n        \\<And>A B.\n           (A, B) \\<in> set (a # Ms) \\<Longrightarrow>\n           similar_mat A B\\<rbrakk>\n       \\<Longrightarrow> similar_mat (diag_block_mat (map fst (a # Ms)))\n                          (diag_block_mat (map snd (a # Ms)))", "let ?C = \"diag_block_mat (map fst Ms)\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a Ms.\n       \\<lbrakk>(\\<And>A B.\n                    (A, B) \\<in> set Ms \\<Longrightarrow>\n                    similar_mat A B) \\<Longrightarrow>\n                similar_mat (diag_block_mat (map fst Ms))\n                 (diag_block_mat (map snd Ms));\n        \\<And>A B.\n           (A, B) \\<in> set (a # Ms) \\<Longrightarrow>\n           similar_mat A B\\<rbrakk>\n       \\<Longrightarrow> similar_mat (diag_block_mat (map fst (a # Ms)))\n                          (diag_block_mat (map snd (a # Ms)))", "let ?D = \"diag_block_mat (map snd Ms)\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a Ms.\n       \\<lbrakk>(\\<And>A B.\n                    (A, B) \\<in> set Ms \\<Longrightarrow>\n                    similar_mat A B) \\<Longrightarrow>\n                similar_mat (diag_block_mat (map fst Ms))\n                 (diag_block_mat (map snd Ms));\n        \\<And>A B.\n           (A, B) \\<in> set (a # Ms) \\<Longrightarrow>\n           similar_mat A B\\<rbrakk>\n       \\<Longrightarrow> similar_mat (diag_block_mat (map fst (a # Ms)))\n                          (diag_block_mat (map snd (a # Ms)))", "from Cons(1)[OF Cons(2)]"], ["proof (chain)\npicking this:\n  (\\<And>A B.\n      (A, B) \\<in> set Ms \\<Longrightarrow>\n      (A, B) \\<in> set (AB # Ms)) \\<Longrightarrow>\n  similar_mat (diag_block_mat (map fst Ms)) (diag_block_mat (map snd Ms))", "have simRec: \"similar_mat ?C ?D\""], ["proof (prove)\nusing this:\n  (\\<And>A B.\n      (A, B) \\<in> set Ms \\<Longrightarrow>\n      (A, B) \\<in> set (AB # Ms)) \\<Longrightarrow>\n  similar_mat (diag_block_mat (map fst Ms)) (diag_block_mat (map snd Ms))\n\ngoal (1 subgoal):\n 1. similar_mat (diag_block_mat (map fst Ms)) (diag_block_mat (map snd Ms))", "by auto"], ["proof (state)\nthis:\n  similar_mat (diag_block_mat (map fst Ms)) (diag_block_mat (map snd Ms))\n\ngoal (1 subgoal):\n 1. \\<And>a Ms.\n       \\<lbrakk>(\\<And>A B.\n                    (A, B) \\<in> set Ms \\<Longrightarrow>\n                    similar_mat A B) \\<Longrightarrow>\n                similar_mat (diag_block_mat (map fst Ms))\n                 (diag_block_mat (map snd Ms));\n        \\<And>A B.\n           (A, B) \\<in> set (a # Ms) \\<Longrightarrow>\n           similar_mat A B\\<rbrakk>\n       \\<Longrightarrow> similar_mat (diag_block_mat (map fst (a # Ms)))\n                          (diag_block_mat (map snd (a # Ms)))", "from similar_matD[OF this]"], ["proof (chain)\npicking this:\n  \\<exists>n P Q.\n     {diag_block_mat (map fst Ms), diag_block_mat (map snd Ms), P, Q}\n     \\<subseteq> carrier_mat n n \\<and>\n     P * Q = 1\\<^sub>m n \\<and>\n     Q * P = 1\\<^sub>m n \\<and>\n     diag_block_mat (map fst Ms) = P * diag_block_mat (map snd Ms) * Q", "obtain m where C: \"?C \\<in> carrier_mat m m\" and D: \"?D \\<in> carrier_mat m m\""], ["proof (prove)\nusing this:\n  \\<exists>n P Q.\n     {diag_block_mat (map fst Ms), diag_block_mat (map snd Ms), P, Q}\n     \\<subseteq> carrier_mat n n \\<and>\n     P * Q = 1\\<^sub>m n \\<and>\n     Q * P = 1\\<^sub>m n \\<and>\n     diag_block_mat (map fst Ms) = P * diag_block_mat (map snd Ms) * Q\n\ngoal (1 subgoal):\n 1. (\\<And>m.\n        \\<lbrakk>diag_block_mat (map fst Ms) \\<in> carrier_mat m m;\n         diag_block_mat (map snd Ms) \\<in> carrier_mat m m\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  diag_block_mat (map fst Ms) \\<in> carrier_mat m m\n  diag_block_mat (map snd Ms) \\<in> carrier_mat m m\n\ngoal (1 subgoal):\n 1. \\<And>a Ms.\n       \\<lbrakk>(\\<And>A B.\n                    (A, B) \\<in> set Ms \\<Longrightarrow>\n                    similar_mat A B) \\<Longrightarrow>\n                similar_mat (diag_block_mat (map fst Ms))\n                 (diag_block_mat (map snd Ms));\n        \\<And>A B.\n           (A, B) \\<in> set (a # Ms) \\<Longrightarrow>\n           similar_mat A B\\<rbrakk>\n       \\<Longrightarrow> similar_mat (diag_block_mat (map fst (a # Ms)))\n                          (diag_block_mat (map snd (a # Ms)))", "hence [simp]: \"dim_row ?C = m\" \"dim_col ?C = m\" \"dim_row ?D = m\" \"dim_col ?D = m\""], ["proof (prove)\nusing this:\n  diag_block_mat (map fst Ms) \\<in> carrier_mat m m\n  diag_block_mat (map snd Ms) \\<in> carrier_mat m m\n\ngoal (1 subgoal):\n 1. (dim_row (diag_block_mat (map fst Ms)) = m &&&\n     dim_col (diag_block_mat (map fst Ms)) = m) &&&\n    dim_row (diag_block_mat (map snd Ms)) = m &&&\n    dim_col (diag_block_mat (map snd Ms)) = m", "by auto"], ["proof (state)\nthis:\n  dim_row (diag_block_mat (map fst Ms)) = m\n  dim_col (diag_block_mat (map fst Ms)) = m\n  dim_row (diag_block_mat (map snd Ms)) = m\n  dim_col (diag_block_mat (map snd Ms)) = m\n\ngoal (1 subgoal):\n 1. \\<And>a Ms.\n       \\<lbrakk>(\\<And>A B.\n                    (A, B) \\<in> set Ms \\<Longrightarrow>\n                    similar_mat A B) \\<Longrightarrow>\n                similar_mat (diag_block_mat (map fst Ms))\n                 (diag_block_mat (map snd Ms));\n        \\<And>A B.\n           (A, B) \\<in> set (a # Ms) \\<Longrightarrow>\n           similar_mat A B\\<rbrakk>\n       \\<Longrightarrow> similar_mat (diag_block_mat (map fst (a # Ms)))\n                          (diag_block_mat (map snd (a # Ms)))", "have \"similar_mat (diag_block_mat (map fst (AB # Ms))) (diag_block_mat (map snd (AB # Ms)))\n    = similar_mat (four_block_mat A (0\\<^sub>m n m) (0\\<^sub>m m n) ?C) (four_block_mat B (0\\<^sub>m n m) (0\\<^sub>m m n) ?D)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. similar_mat (diag_block_mat (map fst (AB # Ms)))\n     (diag_block_mat (map snd (AB # Ms))) =\n    similar_mat\n     (four_block_mat A (0\\<^sub>m n m) (0\\<^sub>m m n)\n       (diag_block_mat (map fst Ms)))\n     (four_block_mat B (0\\<^sub>m n m) (0\\<^sub>m m n)\n       (diag_block_mat (map snd Ms)))", "unfolding AB"], ["proof (prove)\ngoal (1 subgoal):\n 1. similar_mat (diag_block_mat (map fst ((A, B) # Ms)))\n     (diag_block_mat (map snd ((A, B) # Ms))) =\n    similar_mat\n     (four_block_mat A (0\\<^sub>m n m) (0\\<^sub>m m n)\n       (diag_block_mat (map fst Ms)))\n     (four_block_mat B (0\\<^sub>m n m) (0\\<^sub>m m n)\n       (diag_block_mat (map snd Ms)))", "by (simp add: Let_def)"], ["proof (state)\nthis:\n  similar_mat (diag_block_mat (map fst (AB # Ms)))\n   (diag_block_mat (map snd (AB # Ms))) =\n  similar_mat\n   (four_block_mat A (0\\<^sub>m n m) (0\\<^sub>m m n)\n     (diag_block_mat (map fst Ms)))\n   (four_block_mat B (0\\<^sub>m n m) (0\\<^sub>m m n)\n     (diag_block_mat (map snd Ms)))\n\ngoal (1 subgoal):\n 1. \\<And>a Ms.\n       \\<lbrakk>(\\<And>A B.\n                    (A, B) \\<in> set Ms \\<Longrightarrow>\n                    similar_mat A B) \\<Longrightarrow>\n                similar_mat (diag_block_mat (map fst Ms))\n                 (diag_block_mat (map snd Ms));\n        \\<And>A B.\n           (A, B) \\<in> set (a # Ms) \\<Longrightarrow>\n           similar_mat A B\\<rbrakk>\n       \\<Longrightarrow> similar_mat (diag_block_mat (map fst (a # Ms)))\n                          (diag_block_mat (map snd (a # Ms)))", "also"], ["proof (state)\nthis:\n  similar_mat (diag_block_mat (map fst (AB # Ms)))\n   (diag_block_mat (map snd (AB # Ms))) =\n  similar_mat\n   (four_block_mat A (0\\<^sub>m n m) (0\\<^sub>m m n)\n     (diag_block_mat (map fst Ms)))\n   (four_block_mat B (0\\<^sub>m n m) (0\\<^sub>m m n)\n     (diag_block_mat (map snd Ms)))\n\ngoal (1 subgoal):\n 1. \\<And>a Ms.\n       \\<lbrakk>(\\<And>A B.\n                    (A, B) \\<in> set Ms \\<Longrightarrow>\n                    similar_mat A B) \\<Longrightarrow>\n                similar_mat (diag_block_mat (map fst Ms))\n                 (diag_block_mat (map snd Ms));\n        \\<And>A B.\n           (A, B) \\<in> set (a # Ms) \\<Longrightarrow>\n           similar_mat A B\\<rbrakk>\n       \\<Longrightarrow> similar_mat (diag_block_mat (map fst (a # Ms)))\n                          (diag_block_mat (map snd (a # Ms)))", "have \"\\<dots>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. similar_mat\n     (four_block_mat A (0\\<^sub>m n m) (0\\<^sub>m m n)\n       (diag_block_mat (map fst Ms)))\n     (four_block_mat B (0\\<^sub>m n m) (0\\<^sub>m m n)\n       (diag_block_mat (map snd Ms)))", "by (rule similar_mat_four_block_0_0[OF simAB simRec A C])"], ["proof (state)\nthis:\n  similar_mat\n   (four_block_mat A (0\\<^sub>m n m) (0\\<^sub>m m n)\n     (diag_block_mat (map fst Ms)))\n   (four_block_mat B (0\\<^sub>m n m) (0\\<^sub>m m n)\n     (diag_block_mat (map snd Ms)))\n\ngoal (1 subgoal):\n 1. \\<And>a Ms.\n       \\<lbrakk>(\\<And>A B.\n                    (A, B) \\<in> set Ms \\<Longrightarrow>\n                    similar_mat A B) \\<Longrightarrow>\n                similar_mat (diag_block_mat (map fst Ms))\n                 (diag_block_mat (map snd Ms));\n        \\<And>A B.\n           (A, B) \\<in> set (a # Ms) \\<Longrightarrow>\n           similar_mat A B\\<rbrakk>\n       \\<Longrightarrow> similar_mat (diag_block_mat (map fst (a # Ms)))\n                          (diag_block_mat (map snd (a # Ms)))", "finally"], ["proof (chain)\npicking this:\n  similar_mat (diag_block_mat (map fst (AB # Ms)))\n   (diag_block_mat (map snd (AB # Ms)))", "show ?case"], ["proof (prove)\nusing this:\n  similar_mat (diag_block_mat (map fst (AB # Ms)))\n   (diag_block_mat (map snd (AB # Ms)))\n\ngoal (1 subgoal):\n 1. similar_mat (diag_block_mat (map fst (AB # Ms)))\n     (diag_block_mat (map snd (AB # Ms)))", "."], ["proof (state)\nthis:\n  similar_mat (diag_block_mat (map fst (AB # Ms)))\n   (diag_block_mat (map snd (AB # Ms)))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma similar_mat_wit_pow: assumes wit: \"similar_mat_wit A B P Q\"\n  shows \"similar_mat_wit (A ^\\<^sub>m k) (B ^\\<^sub>m k) P Q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. similar_mat_wit (A ^\\<^sub>m k) (B ^\\<^sub>m k) P Q", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. similar_mat_wit (A ^\\<^sub>m k) (B ^\\<^sub>m k) P Q", "define n where \"n = dim_row A\""], ["proof (state)\nthis:\n  n = dim_row A\n\ngoal (1 subgoal):\n 1. similar_mat_wit (A ^\\<^sub>m k) (B ^\\<^sub>m k) P Q", "let ?C = \"carrier_mat n n\""], ["proof (state)\ngoal (1 subgoal):\n 1. similar_mat_wit (A ^\\<^sub>m k) (B ^\\<^sub>m k) P Q", "from similar_mat_witD[OF refl wit, folded n_def]"], ["proof (chain)\npicking this:\n  P * Q = 1\\<^sub>m n\n  Q * P = 1\\<^sub>m n\n  A = P * B * Q\n  A \\<in> carrier_mat n n\n  B \\<in> carrier_mat n n\n  P \\<in> carrier_mat n n\n  Q \\<in> carrier_mat n n", "have\n    A: \"A \\<in> ?C\" and B: \"B \\<in> ?C\" and P: \"P \\<in> ?C\" and Q: \"Q \\<in> ?C\"\n    and PQ: \"P * Q = 1\\<^sub>m n\" and QP: \"Q * P = 1\\<^sub>m n\"\n    and AB: \"A = P * B * Q\""], ["proof (prove)\nusing this:\n  P * Q = 1\\<^sub>m n\n  Q * P = 1\\<^sub>m n\n  A = P * B * Q\n  A \\<in> carrier_mat n n\n  B \\<in> carrier_mat n n\n  P \\<in> carrier_mat n n\n  Q \\<in> carrier_mat n n\n\ngoal (1 subgoal):\n 1. (A \\<in> carrier_mat n n &&&\n     B \\<in> carrier_mat n n &&& P \\<in> carrier_mat n n) &&&\n    (Q \\<in> carrier_mat n n &&& P * Q = 1\\<^sub>m n) &&&\n    Q * P = 1\\<^sub>m n &&& A = P * B * Q", "by auto"], ["proof (state)\nthis:\n  A \\<in> carrier_mat n n\n  B \\<in> carrier_mat n n\n  P \\<in> carrier_mat n n\n  Q \\<in> carrier_mat n n\n  P * Q = 1\\<^sub>m n\n  Q * P = 1\\<^sub>m n\n  A = P * B * Q\n\ngoal (1 subgoal):\n 1. similar_mat_wit (A ^\\<^sub>m k) (B ^\\<^sub>m k) P Q", "from A B"], ["proof (chain)\npicking this:\n  A \\<in> carrier_mat n n\n  B \\<in> carrier_mat n n", "have *: \"(A ^\\<^sub>m k) \\<in> carrier_mat n n\" \"B ^\\<^sub>m k \\<in> carrier_mat n n\""], ["proof (prove)\nusing this:\n  A \\<in> carrier_mat n n\n  B \\<in> carrier_mat n n\n\ngoal (1 subgoal):\n 1. A ^\\<^sub>m k \\<in> carrier_mat n n &&&\n    B ^\\<^sub>m k \\<in> carrier_mat n n", "by auto"], ["proof (state)\nthis:\n  A ^\\<^sub>m k \\<in> carrier_mat n n\n  B ^\\<^sub>m k \\<in> carrier_mat n n\n\ngoal (1 subgoal):\n 1. similar_mat_wit (A ^\\<^sub>m k) (B ^\\<^sub>m k) P Q", "note carr = A B P Q"], ["proof (state)\nthis:\n  A \\<in> carrier_mat n n\n  B \\<in> carrier_mat n n\n  P \\<in> carrier_mat n n\n  Q \\<in> carrier_mat n n\n\ngoal (1 subgoal):\n 1. similar_mat_wit (A ^\\<^sub>m k) (B ^\\<^sub>m k) P Q", "have id: \"A ^\\<^sub>m k = P * B ^\\<^sub>m k * Q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A ^\\<^sub>m k = P * B ^\\<^sub>m k * Q", "unfolding AB"], ["proof (prove)\ngoal (1 subgoal):\n 1. (P * B * Q) ^\\<^sub>m k = P * B ^\\<^sub>m k * Q", "proof (induct k)"], ["proof (state)\ngoal (2 subgoals):\n 1. (P * B * Q) ^\\<^sub>m 0 = P * B ^\\<^sub>m 0 * Q\n 2. \\<And>k.\n       (P * B * Q) ^\\<^sub>m k = P * B ^\\<^sub>m k * Q \\<Longrightarrow>\n       (P * B * Q) ^\\<^sub>m Suc k = P * B ^\\<^sub>m Suc k * Q", "case 0"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. (P * B * Q) ^\\<^sub>m 0 = P * B ^\\<^sub>m 0 * Q\n 2. \\<And>k.\n       (P * B * Q) ^\\<^sub>m k = P * B ^\\<^sub>m k * Q \\<Longrightarrow>\n       (P * B * Q) ^\\<^sub>m Suc k = P * B ^\\<^sub>m Suc k * Q", "thus ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. (P * B * Q) ^\\<^sub>m 0 = P * B ^\\<^sub>m 0 * Q", "using carr"], ["proof (prove)\nusing this:\n  A \\<in> carrier_mat n n\n  B \\<in> carrier_mat n n\n  P \\<in> carrier_mat n n\n  Q \\<in> carrier_mat n n\n\ngoal (1 subgoal):\n 1. (P * B * Q) ^\\<^sub>m 0 = P * B ^\\<^sub>m 0 * Q", "by (simp add: PQ)"], ["proof (state)\nthis:\n  (P * B * Q) ^\\<^sub>m 0 = P * B ^\\<^sub>m 0 * Q\n\ngoal (1 subgoal):\n 1. \\<And>k.\n       (P * B * Q) ^\\<^sub>m k = P * B ^\\<^sub>m k * Q \\<Longrightarrow>\n       (P * B * Q) ^\\<^sub>m Suc k = P * B ^\\<^sub>m Suc k * Q", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>k.\n       (P * B * Q) ^\\<^sub>m k = P * B ^\\<^sub>m k * Q \\<Longrightarrow>\n       (P * B * Q) ^\\<^sub>m Suc k = P * B ^\\<^sub>m Suc k * Q", "case (Suc k)"], ["proof (state)\nthis:\n  (P * B * Q) ^\\<^sub>m k = P * B ^\\<^sub>m k * Q\n\ngoal (1 subgoal):\n 1. \\<And>k.\n       (P * B * Q) ^\\<^sub>m k = P * B ^\\<^sub>m k * Q \\<Longrightarrow>\n       (P * B * Q) ^\\<^sub>m Suc k = P * B ^\\<^sub>m Suc k * Q", "define Bk where \"Bk = B ^\\<^sub>m k\""], ["proof (state)\nthis:\n  Bk = B ^\\<^sub>m k\n\ngoal (1 subgoal):\n 1. \\<And>k.\n       (P * B * Q) ^\\<^sub>m k = P * B ^\\<^sub>m k * Q \\<Longrightarrow>\n       (P * B * Q) ^\\<^sub>m Suc k = P * B ^\\<^sub>m Suc k * Q", "have Bk: \"Bk \\<in> carrier_mat n n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Bk \\<in> carrier_mat n n", "unfolding Bk_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. B ^\\<^sub>m k \\<in> carrier_mat n n", "using carr"], ["proof (prove)\nusing this:\n  A \\<in> carrier_mat n n\n  B \\<in> carrier_mat n n\n  P \\<in> carrier_mat n n\n  Q \\<in> carrier_mat n n\n\ngoal (1 subgoal):\n 1. B ^\\<^sub>m k \\<in> carrier_mat n n", "by simp"], ["proof (state)\nthis:\n  Bk \\<in> carrier_mat n n\n\ngoal (1 subgoal):\n 1. \\<And>k.\n       (P * B * Q) ^\\<^sub>m k = P * B ^\\<^sub>m k * Q \\<Longrightarrow>\n       (P * B * Q) ^\\<^sub>m Suc k = P * B ^\\<^sub>m Suc k * Q", "have \"(P * B * Q) ^\\<^sub>m Suc k = (P * Bk * Q) * (P * B * Q)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (P * B * Q) ^\\<^sub>m Suc k = P * Bk * Q * (P * B * Q)", "by (simp add: Suc Bk_def)"], ["proof (state)\nthis:\n  (P * B * Q) ^\\<^sub>m Suc k = P * Bk * Q * (P * B * Q)\n\ngoal (1 subgoal):\n 1. \\<And>k.\n       (P * B * Q) ^\\<^sub>m k = P * B ^\\<^sub>m k * Q \\<Longrightarrow>\n       (P * B * Q) ^\\<^sub>m Suc k = P * B ^\\<^sub>m Suc k * Q", "also"], ["proof (state)\nthis:\n  (P * B * Q) ^\\<^sub>m Suc k = P * Bk * Q * (P * B * Q)\n\ngoal (1 subgoal):\n 1. \\<And>k.\n       (P * B * Q) ^\\<^sub>m k = P * B ^\\<^sub>m k * Q \\<Longrightarrow>\n       (P * B * Q) ^\\<^sub>m Suc k = P * B ^\\<^sub>m Suc k * Q", "have \"\\<dots> = P * (Bk * (Q * P) * B) * Q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P * Bk * Q * (P * B * Q) = P * (Bk * (Q * P) * B) * Q", "using carr Bk"], ["proof (prove)\nusing this:\n  A \\<in> carrier_mat n n\n  B \\<in> carrier_mat n n\n  P \\<in> carrier_mat n n\n  Q \\<in> carrier_mat n n\n  Bk \\<in> carrier_mat n n\n\ngoal (1 subgoal):\n 1. P * Bk * Q * (P * B * Q) = P * (Bk * (Q * P) * B) * Q", "by (simp add: assoc_mult_mat[of _ n n _ n _ n])"], ["proof (state)\nthis:\n  P * Bk * Q * (P * B * Q) = P * (Bk * (Q * P) * B) * Q\n\ngoal (1 subgoal):\n 1. \\<And>k.\n       (P * B * Q) ^\\<^sub>m k = P * B ^\\<^sub>m k * Q \\<Longrightarrow>\n       (P * B * Q) ^\\<^sub>m Suc k = P * B ^\\<^sub>m Suc k * Q", "also"], ["proof (state)\nthis:\n  P * Bk * Q * (P * B * Q) = P * (Bk * (Q * P) * B) * Q\n\ngoal (1 subgoal):\n 1. \\<And>k.\n       (P * B * Q) ^\\<^sub>m k = P * B ^\\<^sub>m k * Q \\<Longrightarrow>\n       (P * B * Q) ^\\<^sub>m Suc k = P * B ^\\<^sub>m Suc k * Q", "have \"Bk * (Q * P) = Bk\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Bk * (Q * P) = Bk", "unfolding QP"], ["proof (prove)\ngoal (1 subgoal):\n 1. Bk * 1\\<^sub>m n = Bk", "using Bk"], ["proof (prove)\nusing this:\n  Bk \\<in> carrier_mat n n\n\ngoal (1 subgoal):\n 1. Bk * 1\\<^sub>m n = Bk", "by simp"], ["proof (state)\nthis:\n  Bk * (Q * P) = Bk\n\ngoal (1 subgoal):\n 1. \\<And>k.\n       (P * B * Q) ^\\<^sub>m k = P * B ^\\<^sub>m k * Q \\<Longrightarrow>\n       (P * B * Q) ^\\<^sub>m Suc k = P * B ^\\<^sub>m Suc k * Q", "finally"], ["proof (chain)\npicking this:\n  (P * B * Q) ^\\<^sub>m Suc k = P * (Bk * B) * Q", "show ?case"], ["proof (prove)\nusing this:\n  (P * B * Q) ^\\<^sub>m Suc k = P * (Bk * B) * Q\n\ngoal (1 subgoal):\n 1. (P * B * Q) ^\\<^sub>m Suc k = P * B ^\\<^sub>m Suc k * Q", "unfolding Bk_def"], ["proof (prove)\nusing this:\n  (P * B * Q) ^\\<^sub>m Suc k = P * (B ^\\<^sub>m k * B) * Q\n\ngoal (1 subgoal):\n 1. (P * B * Q) ^\\<^sub>m Suc k = P * B ^\\<^sub>m Suc k * Q", "by simp"], ["proof (state)\nthis:\n  (P * B * Q) ^\\<^sub>m Suc k = P * B ^\\<^sub>m Suc k * Q\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  A ^\\<^sub>m k = P * B ^\\<^sub>m k * Q\n\ngoal (1 subgoal):\n 1. similar_mat_wit (A ^\\<^sub>m k) (B ^\\<^sub>m k) P Q", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. similar_mat_wit (A ^\\<^sub>m k) (B ^\\<^sub>m k) P Q", "by (rule similar_mat_witI[OF PQ QP id * P Q])"], ["proof (state)\nthis:\n  similar_mat_wit (A ^\\<^sub>m k) (B ^\\<^sub>m k) P Q\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma similar_mat_wit_pow_id: \"similar_mat_wit A B P Q \\<Longrightarrow> A ^\\<^sub>m k = P * B ^\\<^sub>m k * Q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. similar_mat_wit A B P Q \\<Longrightarrow>\n    A ^\\<^sub>m k = P * B ^\\<^sub>m k * Q", "using similar_mat_wit_pow[of A B P Q k]"], ["proof (prove)\nusing this:\n  similar_mat_wit A B P Q \\<Longrightarrow>\n  similar_mat_wit (A ^\\<^sub>m k) (B ^\\<^sub>m k) P Q\n\ngoal (1 subgoal):\n 1. similar_mat_wit A B P Q \\<Longrightarrow>\n    A ^\\<^sub>m k = P * B ^\\<^sub>m k * Q", "unfolding similar_mat_wit_def Let_def"], ["proof (prove)\nusing this:\n  {A, B, P, Q} \\<subseteq> carrier_mat (dim_row A) (dim_row A) \\<and>\n  P * Q = 1\\<^sub>m (dim_row A) \\<and>\n  Q * P = 1\\<^sub>m (dim_row A) \\<and> A = P * B * Q \\<Longrightarrow>\n  {A ^\\<^sub>m k, B ^\\<^sub>m k, P, Q}\n  \\<subseteq> carrier_mat (dim_row (A ^\\<^sub>m k))\n               (dim_row (A ^\\<^sub>m k)) \\<and>\n  P * Q = 1\\<^sub>m (dim_row (A ^\\<^sub>m k)) \\<and>\n  Q * P = 1\\<^sub>m (dim_row (A ^\\<^sub>m k)) \\<and>\n  A ^\\<^sub>m k = P * B ^\\<^sub>m k * Q\n\ngoal (1 subgoal):\n 1. {A, B, P, Q} \\<subseteq> carrier_mat (dim_row A) (dim_row A) \\<and>\n    P * Q = 1\\<^sub>m (dim_row A) \\<and>\n    Q * P = 1\\<^sub>m (dim_row A) \\<and> A = P * B * Q \\<Longrightarrow>\n    A ^\\<^sub>m k = P * B ^\\<^sub>m k * Q", "by blast"], ["", "subsection\\<open>Homomorphism properties\\<close>"], ["", "context semiring_hom\nbegin"], ["", "abbreviation mat_hom :: \"'a mat \\<Rightarrow> 'b mat\" (\"mat\\<^sub>h\")\n  where \"mat\\<^sub>h \\<equiv> map_mat hom\""], ["", "abbreviation vec_hom :: \"'a vec \\<Rightarrow> 'b vec\" (\"vec\\<^sub>h\")\n  where \"vec\\<^sub>h \\<equiv> map_vec hom\""], ["", "lemma vec_hom_zero: \"vec\\<^sub>h (0\\<^sub>v n) = 0\\<^sub>v n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. vec\\<^sub>h (0\\<^sub>v n) = 0\\<^sub>v n", "by (rule eq_vecI, auto)"], ["", "lemma mat_hom_one: \"mat\\<^sub>h (1\\<^sub>m n) = 1\\<^sub>m n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mat\\<^sub>h (1\\<^sub>m n) = 1\\<^sub>m n", "by (rule eq_matI, auto)"], ["", "lemma mat_hom_mult: assumes A: \"A \\<in> carrier_mat nr n\" and B: \"B \\<in> carrier_mat n nc\"\n  shows \"mat\\<^sub>h (A * B) = mat\\<^sub>h A * mat\\<^sub>h B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mat\\<^sub>h (A * B) = mat\\<^sub>h A * mat\\<^sub>h B", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. mat\\<^sub>h (A * B) = mat\\<^sub>h A * mat\\<^sub>h B", "let ?L = \"mat\\<^sub>h (A * B)\""], ["proof (state)\ngoal (1 subgoal):\n 1. mat\\<^sub>h (A * B) = mat\\<^sub>h A * mat\\<^sub>h B", "let ?R = \"mat\\<^sub>h A * mat\\<^sub>h B\""], ["proof (state)\ngoal (1 subgoal):\n 1. mat\\<^sub>h (A * B) = mat\\<^sub>h A * mat\\<^sub>h B", "let ?A = \"mat\\<^sub>h A\""], ["proof (state)\ngoal (1 subgoal):\n 1. mat\\<^sub>h (A * B) = mat\\<^sub>h A * mat\\<^sub>h B", "let ?B = \"mat\\<^sub>h B\""], ["proof (state)\ngoal (1 subgoal):\n 1. mat\\<^sub>h (A * B) = mat\\<^sub>h A * mat\\<^sub>h B", "from A B"], ["proof (chain)\npicking this:\n  A \\<in> carrier_mat nr n\n  B \\<in> carrier_mat n nc", "have id:\n    \"dim_row ?L = nr\" \"dim_row ?R = nr\"\n    \"dim_col ?L = nc\" \"dim_col ?R = nc\""], ["proof (prove)\nusing this:\n  A \\<in> carrier_mat nr n\n  B \\<in> carrier_mat n nc\n\ngoal (1 subgoal):\n 1. (dim_row (mat\\<^sub>h (A * B)) = nr &&&\n     dim_row (mat\\<^sub>h A * mat\\<^sub>h B) = nr) &&&\n    dim_col (mat\\<^sub>h (A * B)) = nc &&&\n    dim_col (mat\\<^sub>h A * mat\\<^sub>h B) = nc", "by auto"], ["proof (state)\nthis:\n  dim_row (mat\\<^sub>h (A * B)) = nr\n  dim_row (mat\\<^sub>h A * mat\\<^sub>h B) = nr\n  dim_col (mat\\<^sub>h (A * B)) = nc\n  dim_col (mat\\<^sub>h A * mat\\<^sub>h B) = nc\n\ngoal (1 subgoal):\n 1. mat\\<^sub>h (A * B) = mat\\<^sub>h A * mat\\<^sub>h B", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. mat\\<^sub>h (A * B) = mat\\<^sub>h A * mat\\<^sub>h B", "proof (rule eq_matI, unfold id)"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>i j.\n       \\<lbrakk>i < nr; j < nc\\<rbrakk>\n       \\<Longrightarrow> mat\\<^sub>h (A * B) $$ (i, j) =\n                         (mat\\<^sub>h A * mat\\<^sub>h B) $$ (i, j)\n 2. nr = nr\n 3. nc = nc", "fix i j"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>i j.\n       \\<lbrakk>i < nr; j < nc\\<rbrakk>\n       \\<Longrightarrow> mat\\<^sub>h (A * B) $$ (i, j) =\n                         (mat\\<^sub>h A * mat\\<^sub>h B) $$ (i, j)\n 2. nr = nr\n 3. nc = nc", "assume *: \"i < nr\" \"j < nc\""], ["proof (state)\nthis:\n  i < nr\n  j < nc\n\ngoal (3 subgoals):\n 1. \\<And>i j.\n       \\<lbrakk>i < nr; j < nc\\<rbrakk>\n       \\<Longrightarrow> mat\\<^sub>h (A * B) $$ (i, j) =\n                         (mat\\<^sub>h A * mat\\<^sub>h B) $$ (i, j)\n 2. nr = nr\n 3. nc = nc", "define I where \"I = {0 ..< n}\""], ["proof (state)\nthis:\n  I = {0..<n}\n\ngoal (3 subgoals):\n 1. \\<And>i j.\n       \\<lbrakk>i < nr; j < nc\\<rbrakk>\n       \\<Longrightarrow> mat\\<^sub>h (A * B) $$ (i, j) =\n                         (mat\\<^sub>h A * mat\\<^sub>h B) $$ (i, j)\n 2. nr = nr\n 3. nc = nc", "have id: \"{0 ..< dim_vec (col ?B j)} = I\" \"{0 ..< dim_vec (col B j)} = I\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {0..<dim_vec (col (mat\\<^sub>h B) j)} = I &&&\n    {0..<dim_vec (col B j)} = I", "unfolding I_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. {0..<dim_vec (col (mat\\<^sub>h B) j)} = {0..<n} &&&\n    {0..<dim_vec (col B j)} = {0..<n}", "using * B"], ["proof (prove)\nusing this:\n  i < nr\n  j < nc\n  B \\<in> carrier_mat n nc\n\ngoal (1 subgoal):\n 1. {0..<dim_vec (col (mat\\<^sub>h B) j)} = {0..<n} &&&\n    {0..<dim_vec (col B j)} = {0..<n}", "by auto"], ["proof (state)\nthis:\n  {0..<dim_vec (col (mat\\<^sub>h B) j)} = I\n  {0..<dim_vec (col B j)} = I\n\ngoal (3 subgoals):\n 1. \\<And>i j.\n       \\<lbrakk>i < nr; j < nc\\<rbrakk>\n       \\<Longrightarrow> mat\\<^sub>h (A * B) $$ (i, j) =\n                         (mat\\<^sub>h A * mat\\<^sub>h B) $$ (i, j)\n 2. nr = nr\n 3. nc = nc", "have finite: \"finite I\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite I", "unfolding I_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. finite {0..<n}", "by auto"], ["proof (state)\nthis:\n  finite I\n\ngoal (3 subgoals):\n 1. \\<And>i j.\n       \\<lbrakk>i < nr; j < nc\\<rbrakk>\n       \\<Longrightarrow> mat\\<^sub>h (A * B) $$ (i, j) =\n                         (mat\\<^sub>h A * mat\\<^sub>h B) $$ (i, j)\n 2. nr = nr\n 3. nc = nc", "have I: \"I \\<subseteq> {0 ..< n}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. I \\<subseteq> {0..<n}", "unfolding I_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. {0..<n} \\<subseteq> {0..<n}", "by auto"], ["proof (state)\nthis:\n  I \\<subseteq> {0..<n}\n\ngoal (3 subgoals):\n 1. \\<And>i j.\n       \\<lbrakk>i < nr; j < nc\\<rbrakk>\n       \\<Longrightarrow> mat\\<^sub>h (A * B) $$ (i, j) =\n                         (mat\\<^sub>h A * mat\\<^sub>h B) $$ (i, j)\n 2. nr = nr\n 3. nc = nc", "have \"?L $$ (i,j) = hom (row A i \\<bullet> col B j)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mat\\<^sub>h (A * B) $$ (i, j) = hom (row A i \\<bullet> col B j)", "using A B *"], ["proof (prove)\nusing this:\n  A \\<in> carrier_mat nr n\n  B \\<in> carrier_mat n nc\n  i < nr\n  j < nc\n\ngoal (1 subgoal):\n 1. mat\\<^sub>h (A * B) $$ (i, j) = hom (row A i \\<bullet> col B j)", "by auto"], ["proof (state)\nthis:\n  mat\\<^sub>h (A * B) $$ (i, j) = hom (row A i \\<bullet> col B j)\n\ngoal (3 subgoals):\n 1. \\<And>i j.\n       \\<lbrakk>i < nr; j < nc\\<rbrakk>\n       \\<Longrightarrow> mat\\<^sub>h (A * B) $$ (i, j) =\n                         (mat\\<^sub>h A * mat\\<^sub>h B) $$ (i, j)\n 2. nr = nr\n 3. nc = nc", "also"], ["proof (state)\nthis:\n  mat\\<^sub>h (A * B) $$ (i, j) = hom (row A i \\<bullet> col B j)\n\ngoal (3 subgoals):\n 1. \\<And>i j.\n       \\<lbrakk>i < nr; j < nc\\<rbrakk>\n       \\<Longrightarrow> mat\\<^sub>h (A * B) $$ (i, j) =\n                         (mat\\<^sub>h A * mat\\<^sub>h B) $$ (i, j)\n 2. nr = nr\n 3. nc = nc", "have \"\\<dots> = row ?A i \\<bullet> col ?B j\""], ["proof (prove)\ngoal (1 subgoal):\n 1. hom (row A i \\<bullet> col B j) =\n    row (mat\\<^sub>h A) i \\<bullet> col (mat\\<^sub>h B) j", "unfolding scalar_prod_def id"], ["proof (prove)\ngoal (1 subgoal):\n 1. hom (\\<Sum>ia\\<in>I. row A i $ ia * col B j $ ia) =\n    (\\<Sum>ia\\<in>I.\n       row (mat\\<^sub>h A) i $ ia * col (mat\\<^sub>h B) j $ ia)", "using finite I"], ["proof (prove)\nusing this:\n  finite I\n  I \\<subseteq> {0..<n}\n\ngoal (1 subgoal):\n 1. hom (\\<Sum>ia\\<in>I. row A i $ ia * col B j $ ia) =\n    (\\<Sum>ia\\<in>I.\n       row (mat\\<^sub>h A) i $ ia * col (mat\\<^sub>h B) j $ ia)", "proof (induct I)"], ["proof (state)\ngoal (2 subgoals):\n 1. {} \\<subseteq> {0..<n} \\<Longrightarrow>\n    hom (\\<Sum>ia\\<in>{}. row A i $ ia * col B j $ ia) =\n    (\\<Sum>ia\\<in>{}.\n       row (mat\\<^sub>h A) i $ ia * col (mat\\<^sub>h B) j $ ia)\n 2. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        F \\<subseteq> {0..<n} \\<Longrightarrow>\n        hom (\\<Sum>ia\\<in>F. row A i $ ia * col B j $ ia) =\n        (\\<Sum>ia\\<in>F.\n           row (mat\\<^sub>h A) i $ ia * col (mat\\<^sub>h B) j $ ia);\n        insert x F \\<subseteq> {0..<n}\\<rbrakk>\n       \\<Longrightarrow> hom (\\<Sum>ia\\<in>insert x F.\n                                row A i $ ia * col B j $ ia) =\n                         (\\<Sum>ia\\<in>insert x F.\n                            row (mat\\<^sub>h A) i $ ia *\n                            col (mat\\<^sub>h B) j $ ia)", "case (insert k I)"], ["proof (state)\nthis:\n  finite I\n  k \\<notin> I\n  I \\<subseteq> {0..<n} \\<Longrightarrow>\n  hom (\\<Sum>ia\\<in>I. row A i $ ia * col B j $ ia) =\n  (\\<Sum>ia\\<in>I. row (mat\\<^sub>h A) i $ ia * col (mat\\<^sub>h B) j $ ia)\n  insert k I \\<subseteq> {0..<n}\n\ngoal (2 subgoals):\n 1. {} \\<subseteq> {0..<n} \\<Longrightarrow>\n    hom (\\<Sum>ia\\<in>{}. row A i $ ia * col B j $ ia) =\n    (\\<Sum>ia\\<in>{}.\n       row (mat\\<^sub>h A) i $ ia * col (mat\\<^sub>h B) j $ ia)\n 2. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        F \\<subseteq> {0..<n} \\<Longrightarrow>\n        hom (\\<Sum>ia\\<in>F. row A i $ ia * col B j $ ia) =\n        (\\<Sum>ia\\<in>F.\n           row (mat\\<^sub>h A) i $ ia * col (mat\\<^sub>h B) j $ ia);\n        insert x F \\<subseteq> {0..<n}\\<rbrakk>\n       \\<Longrightarrow> hom (\\<Sum>ia\\<in>insert x F.\n                                row A i $ ia * col B j $ ia) =\n                         (\\<Sum>ia\\<in>insert x F.\n                            row (mat\\<^sub>h A) i $ ia *\n                            col (mat\\<^sub>h B) j $ ia)", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. hom (\\<Sum>ia\\<in>insert k I. row A i $ ia * col B j $ ia) =\n    (\\<Sum>ia\\<in>insert k I.\n       row (mat\\<^sub>h A) i $ ia * col (mat\\<^sub>h B) j $ ia)", "unfolding sum.insert[OF insert(1-2)] hom_add hom_mult"], ["proof (prove)\ngoal (1 subgoal):\n 1. hom (row A i $ k) * hom (col B j $ k) +\n    hom (\\<Sum>ia\\<in>I. row A i $ ia * col B j $ ia) =\n    row (mat\\<^sub>h A) i $ k * col (mat\\<^sub>h B) j $ k +\n    (\\<Sum>ia\\<in>I.\n       row (mat\\<^sub>h A) i $ ia * col (mat\\<^sub>h B) j $ ia)", "using insert(3-) * A B"], ["proof (prove)\nusing this:\n  I \\<subseteq> {0..<n} \\<Longrightarrow>\n  hom (\\<Sum>ia\\<in>I. row A i $ ia * col B j $ ia) =\n  (\\<Sum>ia\\<in>I. row (mat\\<^sub>h A) i $ ia * col (mat\\<^sub>h B) j $ ia)\n  insert k I \\<subseteq> {0..<n}\n  i < nr\n  j < nc\n  A \\<in> carrier_mat nr n\n  B \\<in> carrier_mat n nc\n\ngoal (1 subgoal):\n 1. hom (row A i $ k) * hom (col B j $ k) +\n    hom (\\<Sum>ia\\<in>I. row A i $ ia * col B j $ ia) =\n    row (mat\\<^sub>h A) i $ k * col (mat\\<^sub>h B) j $ k +\n    (\\<Sum>ia\\<in>I.\n       row (mat\\<^sub>h A) i $ ia * col (mat\\<^sub>h B) j $ ia)", "by auto"], ["proof (state)\nthis:\n  hom (\\<Sum>ia\\<in>insert k I. row A i $ ia * col B j $ ia) =\n  (\\<Sum>ia\\<in>insert k I.\n     row (mat\\<^sub>h A) i $ ia * col (mat\\<^sub>h B) j $ ia)\n\ngoal (1 subgoal):\n 1. {} \\<subseteq> {0..<n} \\<Longrightarrow>\n    hom (\\<Sum>ia\\<in>{}. row A i $ ia * col B j $ ia) =\n    (\\<Sum>ia\\<in>{}.\n       row (mat\\<^sub>h A) i $ ia * col (mat\\<^sub>h B) j $ ia)", "qed simp"], ["proof (state)\nthis:\n  hom (row A i \\<bullet> col B j) =\n  row (mat\\<^sub>h A) i \\<bullet> col (mat\\<^sub>h B) j\n\ngoal (3 subgoals):\n 1. \\<And>i j.\n       \\<lbrakk>i < nr; j < nc\\<rbrakk>\n       \\<Longrightarrow> mat\\<^sub>h (A * B) $$ (i, j) =\n                         (mat\\<^sub>h A * mat\\<^sub>h B) $$ (i, j)\n 2. nr = nr\n 3. nc = nc", "also"], ["proof (state)\nthis:\n  hom (row A i \\<bullet> col B j) =\n  row (mat\\<^sub>h A) i \\<bullet> col (mat\\<^sub>h B) j\n\ngoal (3 subgoals):\n 1. \\<And>i j.\n       \\<lbrakk>i < nr; j < nc\\<rbrakk>\n       \\<Longrightarrow> mat\\<^sub>h (A * B) $$ (i, j) =\n                         (mat\\<^sub>h A * mat\\<^sub>h B) $$ (i, j)\n 2. nr = nr\n 3. nc = nc", "have \"\\<dots> = ?R $$ (i,j)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. row (mat\\<^sub>h A) i \\<bullet> col (mat\\<^sub>h B) j =\n    (mat\\<^sub>h A * mat\\<^sub>h B) $$ (i, j)", "using A B *"], ["proof (prove)\nusing this:\n  A \\<in> carrier_mat nr n\n  B \\<in> carrier_mat n nc\n  i < nr\n  j < nc\n\ngoal (1 subgoal):\n 1. row (mat\\<^sub>h A) i \\<bullet> col (mat\\<^sub>h B) j =\n    (mat\\<^sub>h A * mat\\<^sub>h B) $$ (i, j)", "by auto"], ["proof (state)\nthis:\n  row (mat\\<^sub>h A) i \\<bullet> col (mat\\<^sub>h B) j =\n  (mat\\<^sub>h A * mat\\<^sub>h B) $$ (i, j)\n\ngoal (3 subgoals):\n 1. \\<And>i j.\n       \\<lbrakk>i < nr; j < nc\\<rbrakk>\n       \\<Longrightarrow> mat\\<^sub>h (A * B) $$ (i, j) =\n                         (mat\\<^sub>h A * mat\\<^sub>h B) $$ (i, j)\n 2. nr = nr\n 3. nc = nc", "finally"], ["proof (chain)\npicking this:\n  mat\\<^sub>h (A * B) $$ (i, j) = (mat\\<^sub>h A * mat\\<^sub>h B) $$ (i, j)", "show \"?L $$ (i, j) = ?R $$ (i, j)\""], ["proof (prove)\nusing this:\n  mat\\<^sub>h (A * B) $$ (i, j) = (mat\\<^sub>h A * mat\\<^sub>h B) $$ (i, j)\n\ngoal (1 subgoal):\n 1. mat\\<^sub>h (A * B) $$ (i, j) =\n    (mat\\<^sub>h A * mat\\<^sub>h B) $$ (i, j)", "."], ["proof (state)\nthis:\n  mat\\<^sub>h (A * B) $$ (i, j) = (mat\\<^sub>h A * mat\\<^sub>h B) $$ (i, j)\n\ngoal (2 subgoals):\n 1. nr = nr\n 2. nc = nc", "qed auto"], ["proof (state)\nthis:\n  mat\\<^sub>h (A * B) = mat\\<^sub>h A * mat\\<^sub>h B\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma mult_mat_vec_hom: assumes A: \"A \\<in> carrier_mat nr n\" and v: \"v \\<in> carrier_vec n\"\n  shows \"vec\\<^sub>h (A *\\<^sub>v v) = mat\\<^sub>h A *\\<^sub>v vec\\<^sub>h v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. vec\\<^sub>h (A *\\<^sub>v v) = mat\\<^sub>h A *\\<^sub>v vec\\<^sub>h v", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. vec\\<^sub>h (A *\\<^sub>v v) = mat\\<^sub>h A *\\<^sub>v vec\\<^sub>h v", "let ?L = \"vec\\<^sub>h (A *\\<^sub>v v)\""], ["proof (state)\ngoal (1 subgoal):\n 1. vec\\<^sub>h (A *\\<^sub>v v) = mat\\<^sub>h A *\\<^sub>v vec\\<^sub>h v", "let ?R = \"mat\\<^sub>h A *\\<^sub>v vec\\<^sub>h v\""], ["proof (state)\ngoal (1 subgoal):\n 1. vec\\<^sub>h (A *\\<^sub>v v) = mat\\<^sub>h A *\\<^sub>v vec\\<^sub>h v", "let ?A = \"mat\\<^sub>h A\""], ["proof (state)\ngoal (1 subgoal):\n 1. vec\\<^sub>h (A *\\<^sub>v v) = mat\\<^sub>h A *\\<^sub>v vec\\<^sub>h v", "let ?v = \"vec\\<^sub>h v\""], ["proof (state)\ngoal (1 subgoal):\n 1. vec\\<^sub>h (A *\\<^sub>v v) = mat\\<^sub>h A *\\<^sub>v vec\\<^sub>h v", "from A v"], ["proof (chain)\npicking this:\n  A \\<in> carrier_mat nr n\n  v \\<in> carrier_vec n", "have id:\n    \"dim_vec ?L = nr\" \"dim_vec ?R = nr\""], ["proof (prove)\nusing this:\n  A \\<in> carrier_mat nr n\n  v \\<in> carrier_vec n\n\ngoal (1 subgoal):\n 1. dim_vec (vec\\<^sub>h (A *\\<^sub>v v)) = nr &&&\n    dim_vec (mat\\<^sub>h A *\\<^sub>v vec\\<^sub>h v) = nr", "by auto"], ["proof (state)\nthis:\n  dim_vec (vec\\<^sub>h (A *\\<^sub>v v)) = nr\n  dim_vec (mat\\<^sub>h A *\\<^sub>v vec\\<^sub>h v) = nr\n\ngoal (1 subgoal):\n 1. vec\\<^sub>h (A *\\<^sub>v v) = mat\\<^sub>h A *\\<^sub>v vec\\<^sub>h v", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. vec\\<^sub>h (A *\\<^sub>v v) = mat\\<^sub>h A *\\<^sub>v vec\\<^sub>h v", "proof (rule eq_vecI, unfold id)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>i.\n       i < nr \\<Longrightarrow>\n       vec\\<^sub>h (A *\\<^sub>v v) $ i =\n       (mat\\<^sub>h A *\\<^sub>v vec\\<^sub>h v) $ i\n 2. nr = nr", "fix i"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>i.\n       i < nr \\<Longrightarrow>\n       vec\\<^sub>h (A *\\<^sub>v v) $ i =\n       (mat\\<^sub>h A *\\<^sub>v vec\\<^sub>h v) $ i\n 2. nr = nr", "assume *: \"i < nr\""], ["proof (state)\nthis:\n  i < nr\n\ngoal (2 subgoals):\n 1. \\<And>i.\n       i < nr \\<Longrightarrow>\n       vec\\<^sub>h (A *\\<^sub>v v) $ i =\n       (mat\\<^sub>h A *\\<^sub>v vec\\<^sub>h v) $ i\n 2. nr = nr", "define I where \"I = {0 ..< n}\""], ["proof (state)\nthis:\n  I = {0..<n}\n\ngoal (2 subgoals):\n 1. \\<And>i.\n       i < nr \\<Longrightarrow>\n       vec\\<^sub>h (A *\\<^sub>v v) $ i =\n       (mat\\<^sub>h A *\\<^sub>v vec\\<^sub>h v) $ i\n 2. nr = nr", "have id: \"{0 ..< dim_vec v} = I\" \"{0 ..< dim_vec (vec\\<^sub>h v)} = I\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {0..<dim_vec v} = I &&& {0..<dim_vec (vec\\<^sub>h v)} = I", "unfolding I_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. {0..<dim_vec v} = {0..<n} &&& {0..<dim_vec (vec\\<^sub>h v)} = {0..<n}", "using * v"], ["proof (prove)\nusing this:\n  i < nr\n  v \\<in> carrier_vec n\n\ngoal (1 subgoal):\n 1. {0..<dim_vec v} = {0..<n} &&& {0..<dim_vec (vec\\<^sub>h v)} = {0..<n}", "by auto"], ["proof (state)\nthis:\n  {0..<dim_vec v} = I\n  {0..<dim_vec (vec\\<^sub>h v)} = I\n\ngoal (2 subgoals):\n 1. \\<And>i.\n       i < nr \\<Longrightarrow>\n       vec\\<^sub>h (A *\\<^sub>v v) $ i =\n       (mat\\<^sub>h A *\\<^sub>v vec\\<^sub>h v) $ i\n 2. nr = nr", "have finite: \"finite I\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite I", "unfolding I_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. finite {0..<n}", "by auto"], ["proof (state)\nthis:\n  finite I\n\ngoal (2 subgoals):\n 1. \\<And>i.\n       i < nr \\<Longrightarrow>\n       vec\\<^sub>h (A *\\<^sub>v v) $ i =\n       (mat\\<^sub>h A *\\<^sub>v vec\\<^sub>h v) $ i\n 2. nr = nr", "have I: \"I \\<subseteq> {0 ..< n}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. I \\<subseteq> {0..<n}", "unfolding I_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. {0..<n} \\<subseteq> {0..<n}", "by auto"], ["proof (state)\nthis:\n  I \\<subseteq> {0..<n}\n\ngoal (2 subgoals):\n 1. \\<And>i.\n       i < nr \\<Longrightarrow>\n       vec\\<^sub>h (A *\\<^sub>v v) $ i =\n       (mat\\<^sub>h A *\\<^sub>v vec\\<^sub>h v) $ i\n 2. nr = nr", "have \"?L $ i = hom (row A i \\<bullet> v)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. vec\\<^sub>h (A *\\<^sub>v v) $ i = hom (row A i \\<bullet> v)", "using A v *"], ["proof (prove)\nusing this:\n  A \\<in> carrier_mat nr n\n  v \\<in> carrier_vec n\n  i < nr\n\ngoal (1 subgoal):\n 1. vec\\<^sub>h (A *\\<^sub>v v) $ i = hom (row A i \\<bullet> v)", "by auto"], ["proof (state)\nthis:\n  vec\\<^sub>h (A *\\<^sub>v v) $ i = hom (row A i \\<bullet> v)\n\ngoal (2 subgoals):\n 1. \\<And>i.\n       i < nr \\<Longrightarrow>\n       vec\\<^sub>h (A *\\<^sub>v v) $ i =\n       (mat\\<^sub>h A *\\<^sub>v vec\\<^sub>h v) $ i\n 2. nr = nr", "also"], ["proof (state)\nthis:\n  vec\\<^sub>h (A *\\<^sub>v v) $ i = hom (row A i \\<bullet> v)\n\ngoal (2 subgoals):\n 1. \\<And>i.\n       i < nr \\<Longrightarrow>\n       vec\\<^sub>h (A *\\<^sub>v v) $ i =\n       (mat\\<^sub>h A *\\<^sub>v vec\\<^sub>h v) $ i\n 2. nr = nr", "have \"\\<dots> = row ?A i \\<bullet> ?v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. hom (row A i \\<bullet> v) =\n    row (mat\\<^sub>h A) i \\<bullet> vec\\<^sub>h v", "unfolding scalar_prod_def id"], ["proof (prove)\ngoal (1 subgoal):\n 1. hom (\\<Sum>ia\\<in>I. row A i $ ia * v $ ia) =\n    (\\<Sum>ia\\<in>I. row (mat\\<^sub>h A) i $ ia * vec\\<^sub>h v $ ia)", "using finite I"], ["proof (prove)\nusing this:\n  finite I\n  I \\<subseteq> {0..<n}\n\ngoal (1 subgoal):\n 1. hom (\\<Sum>ia\\<in>I. row A i $ ia * v $ ia) =\n    (\\<Sum>ia\\<in>I. row (mat\\<^sub>h A) i $ ia * vec\\<^sub>h v $ ia)", "proof (induct I)"], ["proof (state)\ngoal (2 subgoals):\n 1. {} \\<subseteq> {0..<n} \\<Longrightarrow>\n    hom (\\<Sum>ia\\<in>{}. row A i $ ia * v $ ia) =\n    (\\<Sum>ia\\<in>{}. row (mat\\<^sub>h A) i $ ia * vec\\<^sub>h v $ ia)\n 2. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        F \\<subseteq> {0..<n} \\<Longrightarrow>\n        hom (\\<Sum>ia\\<in>F. row A i $ ia * v $ ia) =\n        (\\<Sum>ia\\<in>F. row (mat\\<^sub>h A) i $ ia * vec\\<^sub>h v $ ia);\n        insert x F \\<subseteq> {0..<n}\\<rbrakk>\n       \\<Longrightarrow> hom (\\<Sum>ia\\<in>insert x F.\n                                row A i $ ia * v $ ia) =\n                         (\\<Sum>ia\\<in>insert x F.\n                            row (mat\\<^sub>h A) i $ ia * vec\\<^sub>h v $ ia)", "case (insert k I)"], ["proof (state)\nthis:\n  finite I\n  k \\<notin> I\n  I \\<subseteq> {0..<n} \\<Longrightarrow>\n  hom (\\<Sum>ia\\<in>I. row A i $ ia * v $ ia) =\n  (\\<Sum>ia\\<in>I. row (mat\\<^sub>h A) i $ ia * vec\\<^sub>h v $ ia)\n  insert k I \\<subseteq> {0..<n}\n\ngoal (2 subgoals):\n 1. {} \\<subseteq> {0..<n} \\<Longrightarrow>\n    hom (\\<Sum>ia\\<in>{}. row A i $ ia * v $ ia) =\n    (\\<Sum>ia\\<in>{}. row (mat\\<^sub>h A) i $ ia * vec\\<^sub>h v $ ia)\n 2. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        F \\<subseteq> {0..<n} \\<Longrightarrow>\n        hom (\\<Sum>ia\\<in>F. row A i $ ia * v $ ia) =\n        (\\<Sum>ia\\<in>F. row (mat\\<^sub>h A) i $ ia * vec\\<^sub>h v $ ia);\n        insert x F \\<subseteq> {0..<n}\\<rbrakk>\n       \\<Longrightarrow> hom (\\<Sum>ia\\<in>insert x F.\n                                row A i $ ia * v $ ia) =\n                         (\\<Sum>ia\\<in>insert x F.\n                            row (mat\\<^sub>h A) i $ ia * vec\\<^sub>h v $ ia)", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. hom (\\<Sum>ia\\<in>insert k I. row A i $ ia * v $ ia) =\n    (\\<Sum>ia\\<in>insert k I.\n       row (mat\\<^sub>h A) i $ ia * vec\\<^sub>h v $ ia)", "unfolding sum.insert[OF insert(1-2)] hom_add hom_mult"], ["proof (prove)\ngoal (1 subgoal):\n 1. hom (row A i $ k) * hom (v $ k) +\n    hom (\\<Sum>ia\\<in>I. row A i $ ia * v $ ia) =\n    row (mat\\<^sub>h A) i $ k * vec\\<^sub>h v $ k +\n    (\\<Sum>ia\\<in>I. row (mat\\<^sub>h A) i $ ia * vec\\<^sub>h v $ ia)", "using insert(3-) * A v"], ["proof (prove)\nusing this:\n  I \\<subseteq> {0..<n} \\<Longrightarrow>\n  hom (\\<Sum>ia\\<in>I. row A i $ ia * v $ ia) =\n  (\\<Sum>ia\\<in>I. row (mat\\<^sub>h A) i $ ia * vec\\<^sub>h v $ ia)\n  insert k I \\<subseteq> {0..<n}\n  i < nr\n  A \\<in> carrier_mat nr n\n  v \\<in> carrier_vec n\n\ngoal (1 subgoal):\n 1. hom (row A i $ k) * hom (v $ k) +\n    hom (\\<Sum>ia\\<in>I. row A i $ ia * v $ ia) =\n    row (mat\\<^sub>h A) i $ k * vec\\<^sub>h v $ k +\n    (\\<Sum>ia\\<in>I. row (mat\\<^sub>h A) i $ ia * vec\\<^sub>h v $ ia)", "by auto"], ["proof (state)\nthis:\n  hom (\\<Sum>ia\\<in>insert k I. row A i $ ia * v $ ia) =\n  (\\<Sum>ia\\<in>insert k I. row (mat\\<^sub>h A) i $ ia * vec\\<^sub>h v $ ia)\n\ngoal (1 subgoal):\n 1. {} \\<subseteq> {0..<n} \\<Longrightarrow>\n    hom (\\<Sum>ia\\<in>{}. row A i $ ia * v $ ia) =\n    (\\<Sum>ia\\<in>{}. row (mat\\<^sub>h A) i $ ia * vec\\<^sub>h v $ ia)", "qed simp"], ["proof (state)\nthis:\n  hom (row A i \\<bullet> v) = row (mat\\<^sub>h A) i \\<bullet> vec\\<^sub>h v\n\ngoal (2 subgoals):\n 1. \\<And>i.\n       i < nr \\<Longrightarrow>\n       vec\\<^sub>h (A *\\<^sub>v v) $ i =\n       (mat\\<^sub>h A *\\<^sub>v vec\\<^sub>h v) $ i\n 2. nr = nr", "also"], ["proof (state)\nthis:\n  hom (row A i \\<bullet> v) = row (mat\\<^sub>h A) i \\<bullet> vec\\<^sub>h v\n\ngoal (2 subgoals):\n 1. \\<And>i.\n       i < nr \\<Longrightarrow>\n       vec\\<^sub>h (A *\\<^sub>v v) $ i =\n       (mat\\<^sub>h A *\\<^sub>v vec\\<^sub>h v) $ i\n 2. nr = nr", "have \"\\<dots> = ?R $ i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. row (mat\\<^sub>h A) i \\<bullet> vec\\<^sub>h v =\n    (mat\\<^sub>h A *\\<^sub>v vec\\<^sub>h v) $ i", "using A v *"], ["proof (prove)\nusing this:\n  A \\<in> carrier_mat nr n\n  v \\<in> carrier_vec n\n  i < nr\n\ngoal (1 subgoal):\n 1. row (mat\\<^sub>h A) i \\<bullet> vec\\<^sub>h v =\n    (mat\\<^sub>h A *\\<^sub>v vec\\<^sub>h v) $ i", "by auto"], ["proof (state)\nthis:\n  row (mat\\<^sub>h A) i \\<bullet> vec\\<^sub>h v =\n  (mat\\<^sub>h A *\\<^sub>v vec\\<^sub>h v) $ i\n\ngoal (2 subgoals):\n 1. \\<And>i.\n       i < nr \\<Longrightarrow>\n       vec\\<^sub>h (A *\\<^sub>v v) $ i =\n       (mat\\<^sub>h A *\\<^sub>v vec\\<^sub>h v) $ i\n 2. nr = nr", "finally"], ["proof (chain)\npicking this:\n  vec\\<^sub>h (A *\\<^sub>v v) $ i =\n  (mat\\<^sub>h A *\\<^sub>v vec\\<^sub>h v) $ i", "show \"?L $ i = ?R $ i\""], ["proof (prove)\nusing this:\n  vec\\<^sub>h (A *\\<^sub>v v) $ i =\n  (mat\\<^sub>h A *\\<^sub>v vec\\<^sub>h v) $ i\n\ngoal (1 subgoal):\n 1. vec\\<^sub>h (A *\\<^sub>v v) $ i =\n    (mat\\<^sub>h A *\\<^sub>v vec\\<^sub>h v) $ i", "."], ["proof (state)\nthis:\n  vec\\<^sub>h (A *\\<^sub>v v) $ i =\n  (mat\\<^sub>h A *\\<^sub>v vec\\<^sub>h v) $ i\n\ngoal (1 subgoal):\n 1. nr = nr", "qed auto"], ["proof (state)\nthis:\n  vec\\<^sub>h (A *\\<^sub>v v) = mat\\<^sub>h A *\\<^sub>v vec\\<^sub>h v\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "lemma vec_eq_iff: \"(x = y) = (dim_vec x = dim_vec y \\<and> (\\<forall> i < dim_vec y. x $ i = y $ i))\" (is \"?l = ?r\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. (x = y) =\n    (dim_vec x = dim_vec y \\<and> (\\<forall>i<dim_vec y. x $ i = y $ i))", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. x = y \\<Longrightarrow>\n    dim_vec x = dim_vec y \\<and> (\\<forall>i<dim_vec y. x $ i = y $ i)\n 2. dim_vec x = dim_vec y \\<and>\n    (\\<forall>i<dim_vec y. x $ i = y $ i) \\<Longrightarrow>\n    x = y", "assume ?r"], ["proof (state)\nthis:\n  dim_vec x = dim_vec y \\<and> (\\<forall>i<dim_vec y. x $ i = y $ i)\n\ngoal (2 subgoals):\n 1. x = y \\<Longrightarrow>\n    dim_vec x = dim_vec y \\<and> (\\<forall>i<dim_vec y. x $ i = y $ i)\n 2. dim_vec x = dim_vec y \\<and>\n    (\\<forall>i<dim_vec y. x $ i = y $ i) \\<Longrightarrow>\n    x = y", "show ?l"], ["proof (prove)\ngoal (1 subgoal):\n 1. x = y", "by (rule eq_vecI, insert \\<open>?r\\<close>, auto)"], ["proof (state)\nthis:\n  x = y\n\ngoal (1 subgoal):\n 1. x = y \\<Longrightarrow>\n    dim_vec x = dim_vec y \\<and> (\\<forall>i<dim_vec y. x $ i = y $ i)", "qed simp"], ["", "lemma mat_eq_iff: \"(x = y) = (dim_row x = dim_row y \\<and> dim_col x = dim_col y \\<and>\n  (\\<forall> i j. i < dim_row y \\<longrightarrow> j < dim_col y \\<longrightarrow> x $$ (i,j) = y $$ (i,j)))\" (is \"?l = ?r\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. (x = y) =\n    (dim_row x = dim_row y \\<and>\n     dim_col x = dim_col y \\<and>\n     (\\<forall>i j.\n         i < dim_row y \\<longrightarrow>\n         j < dim_col y \\<longrightarrow> x $$ (i, j) = y $$ (i, j)))", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. x = y \\<Longrightarrow>\n    dim_row x = dim_row y \\<and>\n    dim_col x = dim_col y \\<and>\n    (\\<forall>i j.\n        i < dim_row y \\<longrightarrow>\n        j < dim_col y \\<longrightarrow> x $$ (i, j) = y $$ (i, j))\n 2. dim_row x = dim_row y \\<and>\n    dim_col x = dim_col y \\<and>\n    (\\<forall>i j.\n        i < dim_row y \\<longrightarrow>\n        j < dim_col y \\<longrightarrow>\n        x $$ (i, j) = y $$ (i, j)) \\<Longrightarrow>\n    x = y", "assume ?r"], ["proof (state)\nthis:\n  dim_row x = dim_row y \\<and>\n  dim_col x = dim_col y \\<and>\n  (\\<forall>i j.\n      i < dim_row y \\<longrightarrow>\n      j < dim_col y \\<longrightarrow> x $$ (i, j) = y $$ (i, j))\n\ngoal (2 subgoals):\n 1. x = y \\<Longrightarrow>\n    dim_row x = dim_row y \\<and>\n    dim_col x = dim_col y \\<and>\n    (\\<forall>i j.\n        i < dim_row y \\<longrightarrow>\n        j < dim_col y \\<longrightarrow> x $$ (i, j) = y $$ (i, j))\n 2. dim_row x = dim_row y \\<and>\n    dim_col x = dim_col y \\<and>\n    (\\<forall>i j.\n        i < dim_row y \\<longrightarrow>\n        j < dim_col y \\<longrightarrow>\n        x $$ (i, j) = y $$ (i, j)) \\<Longrightarrow>\n    x = y", "show ?l"], ["proof (prove)\ngoal (1 subgoal):\n 1. x = y", "by (rule eq_matI, insert \\<open>?r\\<close>, auto)"], ["proof (state)\nthis:\n  x = y\n\ngoal (1 subgoal):\n 1. x = y \\<Longrightarrow>\n    dim_row x = dim_row y \\<and>\n    dim_col x = dim_col y \\<and>\n    (\\<forall>i j.\n        i < dim_row y \\<longrightarrow>\n        j < dim_col y \\<longrightarrow> x $$ (i, j) = y $$ (i, j))", "qed simp"], ["", "lemma (in inj_semiring_hom) vec_hom_zero_iff[simp]: \"(vec\\<^sub>h x = 0\\<^sub>v n) = (x = 0\\<^sub>v n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (vec\\<^sub>h x = 0\\<^sub>v n) = (x = 0\\<^sub>v n)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (vec\\<^sub>h x = 0\\<^sub>v n) = (x = 0\\<^sub>v n)", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. (vec\\<^sub>h x = 0\\<^sub>v n) = (x = 0\\<^sub>v n)", "fix i"], ["proof (state)\ngoal (1 subgoal):\n 1. (vec\\<^sub>h x = 0\\<^sub>v n) = (x = 0\\<^sub>v n)", "assume i: \"i < n\" \"dim_vec x = n\""], ["proof (state)\nthis:\n  i < n\n  dim_vec x = n\n\ngoal (1 subgoal):\n 1. (vec\\<^sub>h x = 0\\<^sub>v n) = (x = 0\\<^sub>v n)", "hence \"vec\\<^sub>h x $ i = 0 \\<longleftrightarrow> x $ i = 0\""], ["proof (prove)\nusing this:\n  i < n\n  dim_vec x = n\n\ngoal (1 subgoal):\n 1. (vec\\<^sub>h x $ i = (0::'b)) = (x $ i = (0::'a))", "using index_map_vec(1)[of i x]"], ["proof (prove)\nusing this:\n  i < n\n  dim_vec x = n\n  i < dim_vec x \\<Longrightarrow> map_vec ?f x $ i = ?f (x $ i)\n\ngoal (1 subgoal):\n 1. (vec\\<^sub>h x $ i = (0::'b)) = (x $ i = (0::'a))", "by simp"], ["proof (state)\nthis:\n  (vec\\<^sub>h x $ i = (0::'b)) = (x $ i = (0::'a))\n\ngoal (1 subgoal):\n 1. (vec\\<^sub>h x = 0\\<^sub>v n) = (x = 0\\<^sub>v n)", "}"], ["proof (state)\nthis:\n  \\<lbrakk>?i2 < n; dim_vec x = n\\<rbrakk>\n  \\<Longrightarrow> (vec\\<^sub>h x $ ?i2 = (0::'b)) = (x $ ?i2 = (0::'a))\n\ngoal (1 subgoal):\n 1. (vec\\<^sub>h x = 0\\<^sub>v n) = (x = 0\\<^sub>v n)", "note main = this"], ["proof (state)\nthis:\n  \\<lbrakk>?i2 < n; dim_vec x = n\\<rbrakk>\n  \\<Longrightarrow> (vec\\<^sub>h x $ ?i2 = (0::'b)) = (x $ ?i2 = (0::'a))\n\ngoal (1 subgoal):\n 1. (vec\\<^sub>h x = 0\\<^sub>v n) = (x = 0\\<^sub>v n)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. (vec\\<^sub>h x = 0\\<^sub>v n) = (x = 0\\<^sub>v n)", "unfolding vec_eq_iff"], ["proof (prove)\ngoal (1 subgoal):\n 1. (dim_vec (vec\\<^sub>h x) = dim_vec (0\\<^sub>v n) \\<and>\n     (\\<forall>i<dim_vec (0\\<^sub>v n).\n         vec\\<^sub>h x $ i = 0\\<^sub>v n $ i)) =\n    (dim_vec x = dim_vec (0\\<^sub>v n) \\<and>\n     (\\<forall>i<dim_vec (0\\<^sub>v n). x $ i = 0\\<^sub>v n $ i))", "by (simp, insert main, auto)"], ["proof (state)\nthis:\n  (vec\\<^sub>h x = 0\\<^sub>v n) = (x = 0\\<^sub>v n)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma (in inj_semiring_hom) mat_hom_inj: \"mat\\<^sub>h A = mat\\<^sub>h B \\<Longrightarrow> A = B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mat\\<^sub>h A = mat\\<^sub>h B \\<Longrightarrow> A = B", "unfolding mat_eq_iff"], ["proof (prove)\ngoal (1 subgoal):\n 1. dim_row (mat\\<^sub>h A) = dim_row (mat\\<^sub>h B) \\<and>\n    dim_col (mat\\<^sub>h A) = dim_col (mat\\<^sub>h B) \\<and>\n    (\\<forall>i j.\n        i < dim_row (mat\\<^sub>h B) \\<longrightarrow>\n        j < dim_col (mat\\<^sub>h B) \\<longrightarrow>\n        mat\\<^sub>h A $$ (i, j) = mat\\<^sub>h B $$ (i, j)) \\<Longrightarrow>\n    dim_row A = dim_row B \\<and>\n    dim_col A = dim_col B \\<and>\n    (\\<forall>i j.\n        i < dim_row B \\<longrightarrow>\n        j < dim_col B \\<longrightarrow> A $$ (i, j) = B $$ (i, j))", "by auto"], ["", "lemma (in inj_semiring_hom) vec_hom_inj: \"vec\\<^sub>h v = vec\\<^sub>h w \\<Longrightarrow> v = w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. vec\\<^sub>h v = vec\\<^sub>h w \\<Longrightarrow> v = w", "unfolding vec_eq_iff"], ["proof (prove)\ngoal (1 subgoal):\n 1. dim_vec (vec\\<^sub>h v) = dim_vec (vec\\<^sub>h w) \\<and>\n    (\\<forall>i<dim_vec (vec\\<^sub>h w).\n        vec\\<^sub>h v $ i = vec\\<^sub>h w $ i) \\<Longrightarrow>\n    dim_vec v = dim_vec w \\<and> (\\<forall>i<dim_vec w. v $ i = w $ i)", "by auto"], ["", "lemma (in semiring_hom) mat_hom_pow: assumes A: \"A \\<in> carrier_mat n n\"\n  shows \"mat\\<^sub>h (A ^\\<^sub>m k) = (mat\\<^sub>h A) ^\\<^sub>m k\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mat\\<^sub>h (A ^\\<^sub>m k) = mat\\<^sub>h A ^\\<^sub>m k", "proof (induct k)"], ["proof (state)\ngoal (2 subgoals):\n 1. mat\\<^sub>h (A ^\\<^sub>m 0) = mat\\<^sub>h A ^\\<^sub>m 0\n 2. \\<And>k.\n       mat\\<^sub>h (A ^\\<^sub>m k) =\n       mat\\<^sub>h A ^\\<^sub>m k \\<Longrightarrow>\n       mat\\<^sub>h (A ^\\<^sub>m Suc k) = mat\\<^sub>h A ^\\<^sub>m Suc k", "case (Suc k)"], ["proof (state)\nthis:\n  mat\\<^sub>h (A ^\\<^sub>m k) = mat\\<^sub>h A ^\\<^sub>m k\n\ngoal (2 subgoals):\n 1. mat\\<^sub>h (A ^\\<^sub>m 0) = mat\\<^sub>h A ^\\<^sub>m 0\n 2. \\<And>k.\n       mat\\<^sub>h (A ^\\<^sub>m k) =\n       mat\\<^sub>h A ^\\<^sub>m k \\<Longrightarrow>\n       mat\\<^sub>h (A ^\\<^sub>m Suc k) = mat\\<^sub>h A ^\\<^sub>m Suc k", "thus ?case"], ["proof (prove)\nusing this:\n  mat\\<^sub>h (A ^\\<^sub>m k) = mat\\<^sub>h A ^\\<^sub>m k\n\ngoal (1 subgoal):\n 1. mat\\<^sub>h (A ^\\<^sub>m Suc k) = mat\\<^sub>h A ^\\<^sub>m Suc k", "using mat_hom_mult[OF pow_carrier_mat[OF A, of k] A]"], ["proof (prove)\nusing this:\n  mat\\<^sub>h (A ^\\<^sub>m k) = mat\\<^sub>h A ^\\<^sub>m k\n  mat\\<^sub>h (A ^\\<^sub>m k * A) =\n  mat\\<^sub>h (A ^\\<^sub>m k) * mat\\<^sub>h A\n\ngoal (1 subgoal):\n 1. mat\\<^sub>h (A ^\\<^sub>m Suc k) = mat\\<^sub>h A ^\\<^sub>m Suc k", "by simp"], ["proof (state)\nthis:\n  mat\\<^sub>h (A ^\\<^sub>m Suc k) = mat\\<^sub>h A ^\\<^sub>m Suc k\n\ngoal (1 subgoal):\n 1. mat\\<^sub>h (A ^\\<^sub>m 0) = mat\\<^sub>h A ^\\<^sub>m 0", "qed (simp add: mat_hom_one)"], ["", "lemma (in semiring_hom) hom_sum_mat: \"hom (sum_mat A) = sum_mat (mat\\<^sub>h A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. hom (sum_mat A) = sum_mat (mat\\<^sub>h A)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. hom (sum_mat A) = sum_mat (mat\\<^sub>h A)", "obtain B where id: \"?thesis = (hom (sum (($$) A) B) = sum (($$) (mat\\<^sub>h A)) B)\"\n    and B: \"B \\<subseteq> {0..<dim_row A} \\<times> {0..<dim_col A}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>B.\n        \\<lbrakk>(hom (sum_mat A) = sum_mat (mat\\<^sub>h A)) =\n                 (hom (sum (($$) A) B) = sum (($$) (mat\\<^sub>h A)) B);\n         B \\<subseteq> {0..<dim_row A} \\<times> {0..<dim_col A}\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding sum_mat_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>B.\n        \\<lbrakk>(hom (sum (($$) A)\n                        ({0..<dim_row A} \\<times> {0..<dim_col A})) =\n                  sum (($$) (mat\\<^sub>h A))\n                   ({0..<dim_row (mat\\<^sub>h A)} \\<times>\n                    {0..<dim_col (mat\\<^sub>h A)})) =\n                 (hom (sum (($$) A) B) = sum (($$) (mat\\<^sub>h A)) B);\n         B \\<subseteq> {0..<dim_row A} \\<times> {0..<dim_col A}\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  (hom (sum_mat A) = sum_mat (mat\\<^sub>h A)) =\n  (hom (sum (($$) A) B) = sum (($$) (mat\\<^sub>h A)) B)\n  B \\<subseteq> {0..<dim_row A} \\<times> {0..<dim_col A}\n\ngoal (1 subgoal):\n 1. hom (sum_mat A) = sum_mat (mat\\<^sub>h A)", "from B"], ["proof (chain)\npicking this:\n  B \\<subseteq> {0..<dim_row A} \\<times> {0..<dim_col A}", "have \"finite B\""], ["proof (prove)\nusing this:\n  B \\<subseteq> {0..<dim_row A} \\<times> {0..<dim_col A}\n\ngoal (1 subgoal):\n 1. finite B", "using finite_subset"], ["proof (prove)\nusing this:\n  B \\<subseteq> {0..<dim_row A} \\<times> {0..<dim_col A}\n  \\<lbrakk>?A \\<subseteq> ?B; finite ?B\\<rbrakk> \\<Longrightarrow> finite ?A\n\ngoal (1 subgoal):\n 1. finite B", "by blast"], ["proof (state)\nthis:\n  finite B\n\ngoal (1 subgoal):\n 1. hom (sum_mat A) = sum_mat (mat\\<^sub>h A)", "thus ?thesis"], ["proof (prove)\nusing this:\n  finite B\n\ngoal (1 subgoal):\n 1. hom (sum_mat A) = sum_mat (mat\\<^sub>h A)", "unfolding id"], ["proof (prove)\nusing this:\n  finite B\n\ngoal (1 subgoal):\n 1. hom (sum (($$) A) B) = sum (($$) (mat\\<^sub>h A)) B", "using B"], ["proof (prove)\nusing this:\n  finite B\n  B \\<subseteq> {0..<dim_row A} \\<times> {0..<dim_col A}\n\ngoal (1 subgoal):\n 1. hom (sum (($$) A) B) = sum (($$) (mat\\<^sub>h A)) B", "proof (induct B)"], ["proof (state)\ngoal (2 subgoals):\n 1. {} \\<subseteq> {0..<dim_row A} \\<times>\n                   {0..<dim_col A} \\<Longrightarrow>\n    hom (sum (($$) A) {}) = sum (($$) (mat\\<^sub>h A)) {}\n 2. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        F \\<subseteq> {0..<dim_row A} \\<times>\n                      {0..<dim_col A} \\<Longrightarrow>\n        hom (sum (($$) A) F) = sum (($$) (mat\\<^sub>h A)) F;\n        insert x F\n        \\<subseteq> {0..<dim_row A} \\<times> {0..<dim_col A}\\<rbrakk>\n       \\<Longrightarrow> hom (sum (($$) A) (insert x F)) =\n                         sum (($$) (mat\\<^sub>h A)) (insert x F)", "case (insert x F)"], ["proof (state)\nthis:\n  finite F\n  x \\<notin> F\n  F \\<subseteq> {0..<dim_row A} \\<times> {0..<dim_col A} \\<Longrightarrow>\n  hom (sum (($$) A) F) = sum (($$) (mat\\<^sub>h A)) F\n  insert x F \\<subseteq> {0..<dim_row A} \\<times> {0..<dim_col A}\n\ngoal (2 subgoals):\n 1. {} \\<subseteq> {0..<dim_row A} \\<times>\n                   {0..<dim_col A} \\<Longrightarrow>\n    hom (sum (($$) A) {}) = sum (($$) (mat\\<^sub>h A)) {}\n 2. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        F \\<subseteq> {0..<dim_row A} \\<times>\n                      {0..<dim_col A} \\<Longrightarrow>\n        hom (sum (($$) A) F) = sum (($$) (mat\\<^sub>h A)) F;\n        insert x F\n        \\<subseteq> {0..<dim_row A} \\<times> {0..<dim_col A}\\<rbrakk>\n       \\<Longrightarrow> hom (sum (($$) A) (insert x F)) =\n                         sum (($$) (mat\\<^sub>h A)) (insert x F)", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. hom (sum (($$) A) (insert x F)) =\n    sum (($$) (mat\\<^sub>h A)) (insert x F)", "unfolding sum.insert[OF insert(1-2)] hom_add"], ["proof (prove)\ngoal (1 subgoal):\n 1. hom (A $$ x) + hom (sum (($$) A) F) =\n    mat\\<^sub>h A $$ x + sum (($$) (mat\\<^sub>h A)) F", "using insert(3-)"], ["proof (prove)\nusing this:\n  F \\<subseteq> {0..<dim_row A} \\<times> {0..<dim_col A} \\<Longrightarrow>\n  hom (sum (($$) A) F) = sum (($$) (mat\\<^sub>h A)) F\n  insert x F \\<subseteq> {0..<dim_row A} \\<times> {0..<dim_col A}\n\ngoal (1 subgoal):\n 1. hom (A $$ x) + hom (sum (($$) A) F) =\n    mat\\<^sub>h A $$ x + sum (($$) (mat\\<^sub>h A)) F", "by auto"], ["proof (state)\nthis:\n  hom (sum (($$) A) (insert x F)) = sum (($$) (mat\\<^sub>h A)) (insert x F)\n\ngoal (1 subgoal):\n 1. {} \\<subseteq> {0..<dim_row A} \\<times>\n                   {0..<dim_col A} \\<Longrightarrow>\n    hom (sum (($$) A) {}) = sum (($$) (mat\\<^sub>h A)) {}", "qed simp"], ["proof (state)\nthis:\n  hom (sum_mat A) = sum_mat (mat\\<^sub>h A)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma (in semiring_hom) vec_hom_smult: \"vec\\<^sub>h (ev \\<cdot>\\<^sub>v v) = hom ev \\<cdot>\\<^sub>v vec\\<^sub>h v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. vec\\<^sub>h (ev \\<cdot>\\<^sub>v v) =\n    hom ev \\<cdot>\\<^sub>v vec\\<^sub>h v", "by (rule eq_vecI, auto simp: hom_distribs)"], ["", "lemma minus_scalar_prod_distrib: fixes v\\<^sub>1 :: \"'a :: ring vec\"\n  assumes v: \"v\\<^sub>1 \\<in> carrier_vec n\" \"v\\<^sub>2 \\<in> carrier_vec n\" \"v\\<^sub>3 \\<in> carrier_vec n\"\n  shows \"(v\\<^sub>1 - v\\<^sub>2) \\<bullet> v\\<^sub>3 = v\\<^sub>1 \\<bullet> v\\<^sub>3 - v\\<^sub>2 \\<bullet> v\\<^sub>3\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (v\\<^sub>1 - v\\<^sub>2) \\<bullet> v\\<^sub>3 =\n    v\\<^sub>1 \\<bullet> v\\<^sub>3 - v\\<^sub>2 \\<bullet> v\\<^sub>3", "unfolding minus_add_uminus_vec[OF v(1-2)]"], ["proof (prove)\ngoal (1 subgoal):\n 1. (v\\<^sub>1 + - v\\<^sub>2) \\<bullet> v\\<^sub>3 =\n    v\\<^sub>1 \\<bullet> v\\<^sub>3 - v\\<^sub>2 \\<bullet> v\\<^sub>3", "by (subst add_scalar_prod_distrib[OF v(1)], insert v, auto)"], ["", "lemma scalar_prod_minus_distrib: fixes v\\<^sub>1 :: \"'a :: ring vec\"\n  assumes v: \"v\\<^sub>1 \\<in> carrier_vec n\" \"v\\<^sub>2 \\<in> carrier_vec n\" \"v\\<^sub>3 \\<in> carrier_vec n\"\n  shows \"v\\<^sub>1 \\<bullet> (v\\<^sub>2 - v\\<^sub>3) = v\\<^sub>1 \\<bullet> v\\<^sub>2 - v\\<^sub>1 \\<bullet> v\\<^sub>3\""], ["proof (prove)\ngoal (1 subgoal):\n 1. v\\<^sub>1 \\<bullet> (v\\<^sub>2 - v\\<^sub>3) =\n    v\\<^sub>1 \\<bullet> v\\<^sub>2 - v\\<^sub>1 \\<bullet> v\\<^sub>3", "unfolding minus_add_uminus_vec[OF v(2-3)]"], ["proof (prove)\ngoal (1 subgoal):\n 1. v\\<^sub>1 \\<bullet> (v\\<^sub>2 + - v\\<^sub>3) =\n    v\\<^sub>1 \\<bullet> v\\<^sub>2 - v\\<^sub>1 \\<bullet> v\\<^sub>3", "by (subst scalar_prod_add_distrib[OF v(1)], insert v, auto)"], ["", "lemma uminus_add_minus_vec:\n  assumes \"l \\<in> carrier_vec n\" \"r \\<in> carrier_vec n\"\n  shows \"- ((l::'a :: ab_group_add vec) + r) = (- l - r)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. - (l + r) = - l - r", "using assms"], ["proof (prove)\nusing this:\n  l \\<in> carrier_vec n\n  r \\<in> carrier_vec n\n\ngoal (1 subgoal):\n 1. - (l + r) = - l - r", "by auto"], ["", "lemma minus_add_minus_vec: fixes u :: \"'a :: ab_group_add vec\"\n  assumes \"u \\<in> carrier_vec n\" \"v \\<in> carrier_vec n\" \"w \\<in> carrier_vec n\"\n  shows \"u - (v + w) = u - v - w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. u - (v + w) = u - v - w", "using assms"], ["proof (prove)\nusing this:\n  u \\<in> carrier_vec n\n  v \\<in> carrier_vec n\n  w \\<in> carrier_vec n\n\ngoal (1 subgoal):\n 1. u - (v + w) = u - v - w", "by auto"], ["", "lemma uminus_add_minus_mat:\n  assumes \"l \\<in> carrier_mat nr nc\" \"r \\<in> carrier_mat nr nc\"\n  shows \"- ((l::'a :: ab_group_add mat) + r) = (- l - r)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. - (l + r) = - l - r", "using assms"], ["proof (prove)\nusing this:\n  l \\<in> carrier_mat nr nc\n  r \\<in> carrier_mat nr nc\n\ngoal (1 subgoal):\n 1. - (l + r) = - l - r", "by auto"], ["", "lemma minus_add_minus_mat: fixes u :: \"'a :: ab_group_add mat\"\n  assumes \"u \\<in> carrier_mat nr nc\" \"v \\<in> carrier_mat nr nc\" \"w \\<in> carrier_mat nr nc\"\n  shows \"u - (v + w) = u - v - w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. u - (v + w) = u - v - w", "using assms"], ["proof (prove)\nusing this:\n  u \\<in> carrier_mat nr nc\n  v \\<in> carrier_mat nr nc\n  w \\<in> carrier_mat nr nc\n\ngoal (1 subgoal):\n 1. u - (v + w) = u - v - w", "by auto"], ["", "lemma uminus_uminus_vec[simp]: \"- (- (v::'a:: group_add vec)) = v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. - (- v) = v", "by auto"], ["", "lemma uminus_eq_vec[simp]: \"- (v::'a:: group_add vec) = - w \\<longleftrightarrow> v = w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (- v = - w) = (v = w)", "by (metis uminus_uminus_vec)"], ["", "lemma uminus_uminus_mat[simp]: \"- (- (A::'a:: group_add mat)) = A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. - (- A) = A", "by auto"], ["", "lemma uminus_eq_mat[simp]: \"- (A::'a:: group_add mat) = - B \\<longleftrightarrow> A = B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (- A = - B) = (A = B)", "by (metis uminus_uminus_mat)"], ["", "lemma smult_zero_mat[simp]: \"(k :: 'a :: mult_zero) \\<cdot>\\<^sub>m 0\\<^sub>m nr nc = 0\\<^sub>m nr nc\""], ["proof (prove)\ngoal (1 subgoal):\n 1. k \\<cdot>\\<^sub>m 0\\<^sub>m nr nc = 0\\<^sub>m nr nc", "by (intro eq_matI, auto)"], ["", "lemma similar_mat_wit_smult: fixes A :: \"'a :: comm_ring_1 mat\"\n  assumes \"similar_mat_wit A B P Q\"\n  shows \"similar_mat_wit (k \\<cdot>\\<^sub>m A) (k \\<cdot>\\<^sub>m B) P Q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. similar_mat_wit (k \\<cdot>\\<^sub>m A) (k \\<cdot>\\<^sub>m B) P Q", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. similar_mat_wit (k \\<cdot>\\<^sub>m A) (k \\<cdot>\\<^sub>m B) P Q", "define n where \"n = dim_row A\""], ["proof (state)\nthis:\n  n = dim_row A\n\ngoal (1 subgoal):\n 1. similar_mat_wit (k \\<cdot>\\<^sub>m A) (k \\<cdot>\\<^sub>m B) P Q", "note main = similar_mat_witD[OF n_def assms]"], ["proof (state)\nthis:\n  P * Q = 1\\<^sub>m n\n  Q * P = 1\\<^sub>m n\n  A = P * B * Q\n  A \\<in> carrier_mat n n\n  B \\<in> carrier_mat n n\n  P \\<in> carrier_mat n n\n  Q \\<in> carrier_mat n n\n\ngoal (1 subgoal):\n 1. similar_mat_wit (k \\<cdot>\\<^sub>m A) (k \\<cdot>\\<^sub>m B) P Q", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. similar_mat_wit (k \\<cdot>\\<^sub>m A) (k \\<cdot>\\<^sub>m B) P Q", "by (rule similar_mat_witI[OF main(1-2) _ _ _ main(6-7)], insert main(3-), auto\n      simp: mult_smult_distrib mult_smult_assoc_mat[of _ n n _ n])"], ["proof (state)\nthis:\n  similar_mat_wit (k \\<cdot>\\<^sub>m A) (k \\<cdot>\\<^sub>m B) P Q\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma similar_mat_smult: fixes A :: \"'a :: comm_ring_1 mat\"\n  assumes \"similar_mat A B\"\n  shows \"similar_mat (k \\<cdot>\\<^sub>m A) (k \\<cdot>\\<^sub>m B)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. similar_mat (k \\<cdot>\\<^sub>m A) (k \\<cdot>\\<^sub>m B)", "using similar_mat_wit_smult assms"], ["proof (prove)\nusing this:\n  similar_mat_wit ?A ?B ?P ?Q \\<Longrightarrow>\n  similar_mat_wit (?k \\<cdot>\\<^sub>m ?A) (?k \\<cdot>\\<^sub>m ?B) ?P ?Q\n  similar_mat A B\n\ngoal (1 subgoal):\n 1. similar_mat (k \\<cdot>\\<^sub>m A) (k \\<cdot>\\<^sub>m B)", "unfolding similar_mat_def"], ["proof (prove)\nusing this:\n  similar_mat_wit ?A ?B ?P ?Q \\<Longrightarrow>\n  similar_mat_wit (?k \\<cdot>\\<^sub>m ?A) (?k \\<cdot>\\<^sub>m ?B) ?P ?Q\n  \\<exists>P. Ex (similar_mat_wit A B P)\n\ngoal (1 subgoal):\n 1. \\<exists>P.\n       Ex (similar_mat_wit (k \\<cdot>\\<^sub>m A) (k \\<cdot>\\<^sub>m B) P)", "by blast"], ["", "definition mat_diag :: \"nat \\<Rightarrow> (nat \\<Rightarrow> 'a :: zero) \\<Rightarrow> 'a mat\" where\n  \"mat_diag n f = Matrix.mat n n (\\<lambda> (i,j). if i = j then f j else 0)\""], ["", "lemma mat_diag_dim[simp]: \"mat_diag n f \\<in> carrier_mat n n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mat_diag n f \\<in> carrier_mat n n", "unfolding mat_diag_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. mat n n (\\<lambda>(i, j). if i = j then f j else (0::'a))\n    \\<in> carrier_mat n n", "by auto"], ["", "lemma mat_diag_mult_left: assumes A: \"A \\<in> carrier_mat n nr\"\n  shows \"mat_diag n f * A = Matrix.mat n nr (\\<lambda> (i,j). f i * A $$ (i,j))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mat_diag n f * A = mat n nr (\\<lambda>(i, j). f i * A $$ (i, j))", "proof (rule eq_matI, insert A, auto simp: mat_diag_def scalar_prod_def, goal_cases)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>i < n; j < nr; A \\<in> carrier_mat n nr\\<rbrakk>\n       \\<Longrightarrow> (\\<Sum>ia = 0..<n.\n                             (if i = ia then f ia else (0::'a)) *\n                             A $$ (ia, j)) =\n                         f i * A $$ (i, j)", "case (1 i j)"], ["proof (state)\nthis:\n  i < n\n  j < nr\n  A \\<in> carrier_mat n nr\n\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>i < n; j < nr; A \\<in> carrier_mat n nr\\<rbrakk>\n       \\<Longrightarrow> (\\<Sum>ia = 0..<n.\n                             (if i = ia then f ia else (0::'a)) *\n                             A $$ (ia, j)) =\n                         f i * A $$ (i, j)", "thus ?case"], ["proof (prove)\nusing this:\n  i < n\n  j < nr\n  A \\<in> carrier_mat n nr\n\ngoal (1 subgoal):\n 1. (\\<Sum>ia = 0..<n. (if i = ia then f ia else (0::'a)) * A $$ (ia, j)) =\n    f i * A $$ (i, j)", "by (subst sum.remove[of _ i], auto)"], ["proof (state)\nthis:\n  (\\<Sum>ia = 0..<n. (if i = ia then f ia else (0::'a)) * A $$ (ia, j)) =\n  f i * A $$ (i, j)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma mat_diag_mult_right: assumes A: \"A \\<in> carrier_mat nr n\"\n  shows \"A * mat_diag n f = Matrix.mat nr n (\\<lambda> (i,j). A $$ (i,j) * f j)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A * mat_diag n f = mat nr n (\\<lambda>(i, j). A $$ (i, j) * f j)", "proof (rule eq_matI, insert A, auto simp: mat_diag_def scalar_prod_def, goal_cases)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>i < nr; j < n; A \\<in> carrier_mat nr n\\<rbrakk>\n       \\<Longrightarrow> (\\<Sum>ia = 0..<n.\n                             A $$ (i, ia) *\n                             (if ia = j then f j else (0::'a))) =\n                         A $$ (i, j) * f j", "case (1 i j)"], ["proof (state)\nthis:\n  i < nr\n  j < n\n  A \\<in> carrier_mat nr n\n\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>i < nr; j < n; A \\<in> carrier_mat nr n\\<rbrakk>\n       \\<Longrightarrow> (\\<Sum>ia = 0..<n.\n                             A $$ (i, ia) *\n                             (if ia = j then f j else (0::'a))) =\n                         A $$ (i, j) * f j", "thus ?case"], ["proof (prove)\nusing this:\n  i < nr\n  j < n\n  A \\<in> carrier_mat nr n\n\ngoal (1 subgoal):\n 1. (\\<Sum>ia = 0..<n. A $$ (i, ia) * (if ia = j then f j else (0::'a))) =\n    A $$ (i, j) * f j", "by (subst sum.remove[of _ j], auto)"], ["proof (state)\nthis:\n  (\\<Sum>ia = 0..<n. A $$ (i, ia) * (if ia = j then f j else (0::'a))) =\n  A $$ (i, j) * f j\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma mat_diag_diag[simp]: \"mat_diag n f * mat_diag n g = mat_diag n (\\<lambda> i. f i * g i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mat_diag n f * mat_diag n g = mat_diag n (\\<lambda>i. f i * g i)", "by (subst mat_diag_mult_left[of _ n n], auto simp: mat_diag_def)"], ["", "lemma mat_diag_one[simp]: \"mat_diag n (\\<lambda> x. 1) = 1\\<^sub>m n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mat_diag n (\\<lambda>x. 1::'a) = 1\\<^sub>m n", "unfolding mat_diag_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. mat n n (\\<lambda>(i, j). if i = j then 1::'a else (0::'a)) =\n    1\\<^sub>m n", "by auto"], ["", "text \\<open>Interpret vector as row-matrix\\<close>"], ["", "definition \"mat_of_row y = mat 1 (dim_vec y) (\\<lambda> ij. y $ (snd ij))\""], ["", "lemma mat_of_row_carrier[simp,intro]: \n  \"y \\<in> carrier_vec n \\<Longrightarrow> mat_of_row y \\<in> carrier_mat 1 n\"\n  \"y \\<in> carrier_vec n \\<Longrightarrow> mat_of_row y \\<in> carrier_mat (Suc 0) n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (y \\<in> carrier_vec n \\<Longrightarrow>\n     mat_of_row y \\<in> carrier_mat 1 n) &&&\n    (y \\<in> carrier_vec n \\<Longrightarrow>\n     mat_of_row y \\<in> carrier_mat (Suc 0) n)", "unfolding mat_of_row_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (y \\<in> carrier_vec n \\<Longrightarrow>\n     mat 1 (dim_vec y) (\\<lambda>ij. y $ snd ij) \\<in> carrier_mat 1 n) &&&\n    (y \\<in> carrier_vec n \\<Longrightarrow>\n     mat 1 (dim_vec y) (\\<lambda>ij. y $ snd ij)\n     \\<in> carrier_mat (Suc 0) n)", "by auto"], ["", "lemma mat_of_row_dim[simp]: \"dim_row (mat_of_row y) = 1\" \n  \"dim_col (mat_of_row y) = dim_vec y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dim_row (mat_of_row y) = 1 &&& dim_col (mat_of_row y) = dim_vec y", "unfolding mat_of_row_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. dim_row (mat 1 (dim_vec y) (\\<lambda>ij. y $ snd ij)) = 1 &&&\n    dim_col (mat 1 (dim_vec y) (\\<lambda>ij. y $ snd ij)) = dim_vec y", "by auto"], ["", "lemma mat_of_row_index[simp]: \"x < dim_vec y \\<Longrightarrow> mat_of_row y $$ (0,x) = y $ x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x < dim_vec y \\<Longrightarrow> mat_of_row y $$ (0, x) = y $ x", "unfolding mat_of_row_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. x < dim_vec y \\<Longrightarrow>\n    mat 1 (dim_vec y) (\\<lambda>ij. y $ snd ij) $$ (0, x) = y $ x", "by auto"], ["", "lemma row_mat_of_row[simp]: \"row (mat_of_row y) 0 = y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. row (mat_of_row y) 0 = y", "by auto"], ["", "lemma mat_of_row_mult_append_rows: assumes y1: \"y1 \\<in> carrier_vec nr1\" \n  and y2: \"y2 \\<in> carrier_vec nr2\" \n  and A1: \"A1 \\<in> carrier_mat nr1 nc\" \n  and A2: \"A2 \\<in> carrier_mat nr2 nc\" \nshows \"mat_of_row (y1 @\\<^sub>v y2) * (A1 @\\<^sub>r A2) = \n  mat_of_row y1 * A1 + mat_of_row y2 * A2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mat_of_row (y1 @\\<^sub>v y2) * (A1 @\\<^sub>r A2) =\n    mat_of_row y1 * A1 + mat_of_row y2 * A2", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. mat_of_row (y1 @\\<^sub>v y2) * (A1 @\\<^sub>r A2) =\n    mat_of_row y1 * A1 + mat_of_row y2 * A2", "from A1 A2"], ["proof (chain)\npicking this:\n  A1 \\<in> carrier_mat nr1 nc\n  A2 \\<in> carrier_mat nr2 nc", "have dim: \"dim_row A1 = nr1\" \"dim_row A2 = nr2\""], ["proof (prove)\nusing this:\n  A1 \\<in> carrier_mat nr1 nc\n  A2 \\<in> carrier_mat nr2 nc\n\ngoal (1 subgoal):\n 1. dim_row A1 = nr1 &&& dim_row A2 = nr2", "by auto"], ["proof (state)\nthis:\n  dim_row A1 = nr1\n  dim_row A2 = nr2\n\ngoal (1 subgoal):\n 1. mat_of_row (y1 @\\<^sub>v y2) * (A1 @\\<^sub>r A2) =\n    mat_of_row y1 * A1 + mat_of_row y2 * A2", "let ?M1 = \"mat_of_row y1\""], ["proof (state)\ngoal (1 subgoal):\n 1. mat_of_row (y1 @\\<^sub>v y2) * (A1 @\\<^sub>r A2) =\n    mat_of_row y1 * A1 + mat_of_row y2 * A2", "have M1: \"?M1 \\<in> carrier_mat 1 nr1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mat_of_row y1 \\<in> carrier_mat 1 nr1", "using y1"], ["proof (prove)\nusing this:\n  y1 \\<in> carrier_vec nr1\n\ngoal (1 subgoal):\n 1. mat_of_row y1 \\<in> carrier_mat 1 nr1", "by auto"], ["proof (state)\nthis:\n  mat_of_row y1 \\<in> carrier_mat 1 nr1\n\ngoal (1 subgoal):\n 1. mat_of_row (y1 @\\<^sub>v y2) * (A1 @\\<^sub>r A2) =\n    mat_of_row y1 * A1 + mat_of_row y2 * A2", "let ?M2 = \"mat_of_row y2\""], ["proof (state)\ngoal (1 subgoal):\n 1. mat_of_row (y1 @\\<^sub>v y2) * (A1 @\\<^sub>r A2) =\n    mat_of_row y1 * A1 + mat_of_row y2 * A2", "have M2: \"?M2 \\<in> carrier_mat 1 nr2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mat_of_row y2 \\<in> carrier_mat 1 nr2", "using y2"], ["proof (prove)\nusing this:\n  y2 \\<in> carrier_vec nr2\n\ngoal (1 subgoal):\n 1. mat_of_row y2 \\<in> carrier_mat 1 nr2", "by auto"], ["proof (state)\nthis:\n  mat_of_row y2 \\<in> carrier_mat 1 nr2\n\ngoal (1 subgoal):\n 1. mat_of_row (y1 @\\<^sub>v y2) * (A1 @\\<^sub>r A2) =\n    mat_of_row y1 * A1 + mat_of_row y2 * A2", "let ?M3 = \"0\\<^sub>m 0 nr1\""], ["proof (state)\ngoal (1 subgoal):\n 1. mat_of_row (y1 @\\<^sub>v y2) * (A1 @\\<^sub>r A2) =\n    mat_of_row y1 * A1 + mat_of_row y2 * A2", "let ?M4 = \"0\\<^sub>m 0 nr2\""], ["proof (state)\ngoal (1 subgoal):\n 1. mat_of_row (y1 @\\<^sub>v y2) * (A1 @\\<^sub>r A2) =\n    mat_of_row y1 * A1 + mat_of_row y2 * A2", "note z = zero_carrier_mat"], ["proof (state)\nthis:\n  0\\<^sub>m ?nr ?nc \\<in> carrier_mat ?nr ?nc\n\ngoal (1 subgoal):\n 1. mat_of_row (y1 @\\<^sub>v y2) * (A1 @\\<^sub>r A2) =\n    mat_of_row y1 * A1 + mat_of_row y2 * A2", "have id: \"mat_of_row (y1 @\\<^sub>v y2) = four_block_mat \n    ?M1 ?M2 ?M3 ?M4\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mat_of_row (y1 @\\<^sub>v y2) =\n    four_block_mat (mat_of_row y1) (mat_of_row y2) (0\\<^sub>m 0 nr1)\n     (0\\<^sub>m 0 nr2)", "using y1 y2"], ["proof (prove)\nusing this:\n  y1 \\<in> carrier_vec nr1\n  y2 \\<in> carrier_vec nr2\n\ngoal (1 subgoal):\n 1. mat_of_row (y1 @\\<^sub>v y2) =\n    four_block_mat (mat_of_row y1) (mat_of_row y2) (0\\<^sub>m 0 nr1)\n     (0\\<^sub>m 0 nr2)", "by (intro eq_matI, auto simp: mat_of_rows_def)"], ["proof (state)\nthis:\n  mat_of_row (y1 @\\<^sub>v y2) =\n  four_block_mat (mat_of_row y1) (mat_of_row y2) (0\\<^sub>m 0 nr1)\n   (0\\<^sub>m 0 nr2)\n\ngoal (1 subgoal):\n 1. mat_of_row (y1 @\\<^sub>v y2) * (A1 @\\<^sub>r A2) =\n    mat_of_row y1 * A1 + mat_of_row y2 * A2", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. mat_of_row (y1 @\\<^sub>v y2) * (A1 @\\<^sub>r A2) =\n    mat_of_row y1 * A1 + mat_of_row y2 * A2", "unfolding id append_rows_def dim"], ["proof (prove)\ngoal (1 subgoal):\n 1. four_block_mat (mat_of_row y1) (mat_of_row y2) (0\\<^sub>m 0 nr1)\n     (0\\<^sub>m 0 nr2) *\n    four_block_mat A1 (0\\<^sub>m nr1 0) A2 (0\\<^sub>m nr2 0) =\n    mat_of_row y1 * A1 + mat_of_row y2 * A2", "by (subst mult_four_block_mat[OF M1 M2 z z A1 z A2 z], insert A1 A2, auto)"], ["proof (state)\nthis:\n  mat_of_row (y1 @\\<^sub>v y2) * (A1 @\\<^sub>r A2) =\n  mat_of_row y1 * A1 + mat_of_row y2 * A2\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>Allowing to construct and deconstruct vectors like lists\\<close>"], ["", "abbreviation vNil where \"vNil \\<equiv> vec 0 ((!) [])\""], ["", "definition vCons where \"vCons a v \\<equiv> vec (Suc (dim_vec v)) (\\<lambda>i. case i of 0 \\<Rightarrow> a | Suc i \\<Rightarrow> v $ i)\""], ["", "lemma vec_index_vCons_0 [simp]: \"vCons a v $ 0 = a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. vCons a v $ 0 = a", "by (simp add: vCons_def)"], ["", "lemma vec_index_vCons_Suc [simp]:\n  fixes v :: \"'a vec\"\n  shows \"vCons a v $ Suc n = v $ n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. vCons a v $ Suc n = v $ n", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. vCons a v $ Suc n = v $ n", "have 1: \"vec (Suc d) f $ Suc n = vec d (f \\<circ> Suc) $ n\" for d and f :: \"nat \\<Rightarrow> 'a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. vec (Suc d) f $ Suc n = vec d (f \\<circ> Suc) $ n", "by (transfer, auto simp: mk_vec_def)"], ["proof (state)\nthis:\n  vec (Suc ?d) ?f $ Suc n = vec ?d (?f \\<circ> Suc) $ n\n\ngoal (1 subgoal):\n 1. vCons a v $ Suc n = v $ n", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. vCons a v $ Suc n = v $ n", "apply (auto simp: 1 vCons_def o_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. vec (dim_vec v) (($) v) $ n = v $ n", "apply transfer"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>v n.\n       \\<exists>n f. v = (n, mk_vec n f) \\<and> True \\<Longrightarrow>\n       snd (fst v, mk_vec (fst v) (snd v)) n = snd v n", "apply (auto simp: mk_vec_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  vCons a v $ Suc n = v $ n\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma vec_index_vCons: \"vCons a v $ n = (if n = 0 then a else v $ (n - 1))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. vCons a v $ n = (if n = 0 then a else v $ (n - 1))", "by (cases n, auto)"], ["", "lemma dim_vec_vCons [simp]: \"dim_vec (vCons a v) = Suc (dim_vec v)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dim_vec (vCons a v) = Suc (dim_vec v)", "by (simp add: vCons_def)"], ["", "lemma vCons_carrier_vec[simp]: \"vCons a v \\<in> carrier_vec (Suc n) \\<longleftrightarrow> v \\<in> carrier_vec n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (vCons a v \\<in> carrier_vec (Suc n)) = (v \\<in> carrier_vec n)", "by (auto dest!: carrier_vecD intro: carrier_vecI)"], ["", "lemma vec_Suc: \"vec (Suc n) f = vCons (f 0) (vec n (f \\<circ> Suc))\" (is \"?l = ?r\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. vec (Suc n) f = vCons (f 0) (vec n (f \\<circ> Suc))", "proof (unfold vec_eq_iff, intro conjI allI impI)"], ["proof (state)\ngoal (2 subgoals):\n 1. dim_vec (vec (Suc n) f) = dim_vec (vCons (f 0) (vec n (f \\<circ> Suc)))\n 2. \\<And>i.\n       i < dim_vec (vCons (f 0) (vec n (f \\<circ> Suc))) \\<Longrightarrow>\n       vec (Suc n) f $ i = vCons (f 0) (vec n (f \\<circ> Suc)) $ i", "fix i"], ["proof (state)\ngoal (2 subgoals):\n 1. dim_vec (vec (Suc n) f) = dim_vec (vCons (f 0) (vec n (f \\<circ> Suc)))\n 2. \\<And>i.\n       i < dim_vec (vCons (f 0) (vec n (f \\<circ> Suc))) \\<Longrightarrow>\n       vec (Suc n) f $ i = vCons (f 0) (vec n (f \\<circ> Suc)) $ i", "assume \"i < dim_vec ?r\""], ["proof (state)\nthis:\n  i < dim_vec (vCons (f 0) (vec n (f \\<circ> Suc)))\n\ngoal (2 subgoals):\n 1. dim_vec (vec (Suc n) f) = dim_vec (vCons (f 0) (vec n (f \\<circ> Suc)))\n 2. \\<And>i.\n       i < dim_vec (vCons (f 0) (vec n (f \\<circ> Suc))) \\<Longrightarrow>\n       vec (Suc n) f $ i = vCons (f 0) (vec n (f \\<circ> Suc)) $ i", "then"], ["proof (chain)\npicking this:\n  i < dim_vec (vCons (f 0) (vec n (f \\<circ> Suc)))", "show \"?l $ i = ?r $ i\""], ["proof (prove)\nusing this:\n  i < dim_vec (vCons (f 0) (vec n (f \\<circ> Suc)))\n\ngoal (1 subgoal):\n 1. vec (Suc n) f $ i = vCons (f 0) (vec n (f \\<circ> Suc)) $ i", "by (cases i, auto)"], ["proof (state)\nthis:\n  vec (Suc n) f $ i = vCons (f 0) (vec n (f \\<circ> Suc)) $ i\n\ngoal (1 subgoal):\n 1. dim_vec (vec (Suc n) f) = dim_vec (vCons (f 0) (vec n (f \\<circ> Suc)))", "qed simp"], ["", "declare Abs_vec_cases[cases del]"], ["", "lemma vec_cases [case_names vNil vCons, cases type: vec]:\n  assumes \"v = vNil \\<Longrightarrow> thesis\" and \"\\<And>a w. v = vCons a w \\<Longrightarrow> thesis\"\n  shows \"thesis\""], ["proof (prove)\ngoal (1 subgoal):\n 1. thesis", "proof (cases \"dim_vec v\")"], ["proof (state)\ngoal (2 subgoals):\n 1. dim_vec v = 0 \\<Longrightarrow> thesis\n 2. \\<And>nat. dim_vec v = Suc nat \\<Longrightarrow> thesis", "case 0"], ["proof (state)\nthis:\n  dim_vec v = 0\n\ngoal (2 subgoals):\n 1. dim_vec v = 0 \\<Longrightarrow> thesis\n 2. \\<And>nat. dim_vec v = Suc nat \\<Longrightarrow> thesis", "then"], ["proof (chain)\npicking this:\n  dim_vec v = 0", "show thesis"], ["proof (prove)\nusing this:\n  dim_vec v = 0\n\ngoal (1 subgoal):\n 1. thesis", "by (intro assms(1), auto)"], ["proof (state)\nthis:\n  thesis\n\ngoal (1 subgoal):\n 1. \\<And>nat. dim_vec v = Suc nat \\<Longrightarrow> thesis", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>nat. dim_vec v = Suc nat \\<Longrightarrow> thesis", "case (Suc n)"], ["proof (state)\nthis:\n  dim_vec v = Suc n\n\ngoal (1 subgoal):\n 1. \\<And>nat. dim_vec v = Suc nat \\<Longrightarrow> thesis", "show thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. thesis", "proof (rule assms(2))"], ["proof (state)\ngoal (1 subgoal):\n 1. v = vCons ?a ?w", "show v: \"v = vCons (v $ 0) (vec n (\\<lambda>i. v $ Suc i))\" (is \"v = ?r\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. v = vCons (v $ 0) (vec n (\\<lambda>i. v $ Suc i))", "proof (rule eq_vecI, unfold dim_vec_vCons dim_vec Suc)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>i.\n       i < Suc n \\<Longrightarrow>\n       v $ i = vCons (v $ 0) (vec n (\\<lambda>i. v $ Suc i)) $ i\n 2. Suc n = Suc n", "fix i"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>i.\n       i < Suc n \\<Longrightarrow>\n       v $ i = vCons (v $ 0) (vec n (\\<lambda>i. v $ Suc i)) $ i\n 2. Suc n = Suc n", "assume \"i < Suc n\""], ["proof (state)\nthis:\n  i < Suc n\n\ngoal (2 subgoals):\n 1. \\<And>i.\n       i < Suc n \\<Longrightarrow>\n       v $ i = vCons (v $ 0) (vec n (\\<lambda>i. v $ Suc i)) $ i\n 2. Suc n = Suc n", "then"], ["proof (chain)\npicking this:\n  i < Suc n", "show \"v $ i = ?r $ i\""], ["proof (prove)\nusing this:\n  i < Suc n\n\ngoal (1 subgoal):\n 1. v $ i = vCons (v $ 0) (vec n (\\<lambda>i. v $ Suc i)) $ i", "by (cases i, auto simp: vCons_def)"], ["proof (state)\nthis:\n  v $ i = vCons (v $ 0) (vec n (\\<lambda>i. v $ Suc i)) $ i\n\ngoal (1 subgoal):\n 1. Suc n = Suc n", "qed simp"], ["proof (state)\nthis:\n  v = vCons (v $ 0) (vec n (\\<lambda>i. v $ Suc i))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  thesis\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma vec_induct [case_names vNil vCons, induct type: vec]:\n  assumes \"P vNil\" and \"\\<And>a v. P v \\<Longrightarrow> P (vCons a v)\"\n  shows \"P v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P v", "proof (induct \"dim_vec v\" arbitrary:v)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>v. 0 = dim_vec v \\<Longrightarrow> P v\n 2. \\<And>x v.\n       \\<lbrakk>\\<And>v. x = dim_vec v \\<Longrightarrow> P v;\n        Suc x = dim_vec v\\<rbrakk>\n       \\<Longrightarrow> P v", "case 0"], ["proof (state)\nthis:\n  0 = dim_vec v\n\ngoal (2 subgoals):\n 1. \\<And>v. 0 = dim_vec v \\<Longrightarrow> P v\n 2. \\<And>x v.\n       \\<lbrakk>\\<And>v. x = dim_vec v \\<Longrightarrow> P v;\n        Suc x = dim_vec v\\<rbrakk>\n       \\<Longrightarrow> P v", "then"], ["proof (chain)\npicking this:\n  0 = dim_vec v", "show ?case"], ["proof (prove)\nusing this:\n  0 = dim_vec v\n\ngoal (1 subgoal):\n 1. P v", "by (cases v, auto intro: assms(1))"], ["proof (state)\nthis:\n  P v\n\ngoal (1 subgoal):\n 1. \\<And>x v.\n       \\<lbrakk>\\<And>v. x = dim_vec v \\<Longrightarrow> P v;\n        Suc x = dim_vec v\\<rbrakk>\n       \\<Longrightarrow> P v", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x v.\n       \\<lbrakk>\\<And>v. x = dim_vec v \\<Longrightarrow> P v;\n        Suc x = dim_vec v\\<rbrakk>\n       \\<Longrightarrow> P v", "case (Suc n)"], ["proof (state)\nthis:\n  n = dim_vec ?v \\<Longrightarrow> P ?v\n  Suc n = dim_vec v\n\ngoal (1 subgoal):\n 1. \\<And>x v.\n       \\<lbrakk>\\<And>v. x = dim_vec v \\<Longrightarrow> P v;\n        Suc x = dim_vec v\\<rbrakk>\n       \\<Longrightarrow> P v", "then"], ["proof (chain)\npicking this:\n  n = dim_vec ?v \\<Longrightarrow> P ?v\n  Suc n = dim_vec v", "show ?case"], ["proof (prove)\nusing this:\n  n = dim_vec ?v \\<Longrightarrow> P ?v\n  Suc n = dim_vec v\n\ngoal (1 subgoal):\n 1. P v", "by (cases v, auto intro: assms(2))"], ["proof (state)\nthis:\n  P v\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma carrier_vec_induct [consumes 1, case_names 0 Suc, induct set:carrier_vec]:\n  assumes v: \"v \\<in> carrier_vec n\"\n    and 1: \"P 0 vNil\" and 2: \"\\<And>n a v. v \\<in> carrier_vec n \\<Longrightarrow> P n v \\<Longrightarrow> P (Suc n) (vCons a v)\"\n  shows \"P n v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P n v", "proof (insert v, induct n arbitrary: v)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>v. v \\<in> carrier_vec 0 \\<Longrightarrow> P 0 v\n 2. \\<And>n v.\n       \\<lbrakk>\\<And>v. v \\<in> carrier_vec n \\<Longrightarrow> P n v;\n        v \\<in> carrier_vec (Suc n)\\<rbrakk>\n       \\<Longrightarrow> P (Suc n) v", "case 0"], ["proof (state)\nthis:\n  v \\<in> carrier_vec 0\n\ngoal (2 subgoals):\n 1. \\<And>v. v \\<in> carrier_vec 0 \\<Longrightarrow> P 0 v\n 2. \\<And>n v.\n       \\<lbrakk>\\<And>v. v \\<in> carrier_vec n \\<Longrightarrow> P n v;\n        v \\<in> carrier_vec (Suc n)\\<rbrakk>\n       \\<Longrightarrow> P (Suc n) v", "then"], ["proof (chain)\npicking this:\n  v \\<in> carrier_vec 0", "have \"v = vec 0 ((!) [])\""], ["proof (prove)\nusing this:\n  v \\<in> carrier_vec 0\n\ngoal (1 subgoal):\n 1. v = vNil", "by auto"], ["proof (state)\nthis:\n  v = vNil\n\ngoal (2 subgoals):\n 1. \\<And>v. v \\<in> carrier_vec 0 \\<Longrightarrow> P 0 v\n 2. \\<And>n v.\n       \\<lbrakk>\\<And>v. v \\<in> carrier_vec n \\<Longrightarrow> P n v;\n        v \\<in> carrier_vec (Suc n)\\<rbrakk>\n       \\<Longrightarrow> P (Suc n) v", "with 1"], ["proof (chain)\npicking this:\n  P 0 vNil\n  v = vNil", "show ?case"], ["proof (prove)\nusing this:\n  P 0 vNil\n  v = vNil\n\ngoal (1 subgoal):\n 1. P 0 v", "by auto"], ["proof (state)\nthis:\n  P 0 v\n\ngoal (1 subgoal):\n 1. \\<And>n v.\n       \\<lbrakk>\\<And>v. v \\<in> carrier_vec n \\<Longrightarrow> P n v;\n        v \\<in> carrier_vec (Suc n)\\<rbrakk>\n       \\<Longrightarrow> P (Suc n) v", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n v.\n       \\<lbrakk>\\<And>v. v \\<in> carrier_vec n \\<Longrightarrow> P n v;\n        v \\<in> carrier_vec (Suc n)\\<rbrakk>\n       \\<Longrightarrow> P (Suc n) v", "case (Suc n)"], ["proof (state)\nthis:\n  ?v \\<in> carrier_vec n \\<Longrightarrow> P n ?v\n  v \\<in> carrier_vec (Suc n)\n\ngoal (1 subgoal):\n 1. \\<And>n v.\n       \\<lbrakk>\\<And>v. v \\<in> carrier_vec n \\<Longrightarrow> P n v;\n        v \\<in> carrier_vec (Suc n)\\<rbrakk>\n       \\<Longrightarrow> P (Suc n) v", "then"], ["proof (chain)\npicking this:\n  ?v \\<in> carrier_vec n \\<Longrightarrow> P n ?v\n  v \\<in> carrier_vec (Suc n)", "show ?case"], ["proof (prove)\nusing this:\n  ?v \\<in> carrier_vec n \\<Longrightarrow> P n ?v\n  v \\<in> carrier_vec (Suc n)\n\ngoal (1 subgoal):\n 1. P (Suc n) v", "by (cases v, auto dest!: carrier_vecD intro:2)"], ["proof (state)\nthis:\n  P (Suc n) v\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma vec_of_list_Cons[simp]: \"vec_of_list (a#as) = vCons a (vec_of_list as)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. vec_of_list (a # as) = vCons a (vec_of_list as)", "by (unfold vCons_def, transfer, auto simp:mk_vec_def split:nat.split)"], ["", "lemma vec_of_list_Nil[simp]: \"vec_of_list [] = vNil\""], ["proof (prove)\ngoal (1 subgoal):\n 1. vec_of_list [] = vNil", "by (transfer', auto)"], ["", "lemma scalar_prod_vCons[simp]:\n  \"vCons a v \\<bullet> vCons b w = a * b + v \\<bullet> w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. vCons a v \\<bullet> vCons b w = a * b + v \\<bullet> w", "apply (unfold scalar_prod_def atLeast0_lessThan_Suc_eq_insert_0 dim_vec_vCons)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>i\\<in>insert 0 (Suc ` {0..<dim_vec w}).\n       vCons a v $ i * vCons b w $ i) =\n    a * b + (\\<Sum>i = 0..<dim_vec w. v $ i * w $ i)", "apply (subst sum.insert)"], ["proof (prove)\ngoal (3 subgoals):\n 1. finite (Suc ` {0..<dim_vec w})\n 2. 0 \\<notin> Suc ` {0..<dim_vec w}\n 3. vCons a v $ 0 * vCons b w $ 0 +\n    (\\<Sum>i\\<in>Suc ` {0..<dim_vec w}. vCons a v $ i * vCons b w $ i) =\n    a * b + (\\<Sum>i = 0..<dim_vec w. v $ i * w $ i)", "apply (simp,simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. vCons a v $ 0 * vCons b w $ 0 +\n    (\\<Sum>i\\<in>Suc ` {0..<dim_vec w}. vCons a v $ i * vCons b w $ i) =\n    a * b + (\\<Sum>i = 0..<dim_vec w. v $ i * w $ i)", "apply (subst sum.reindex)"], ["proof (prove)\ngoal (2 subgoals):\n 1. inj_on Suc {0..<dim_vec w}\n 2. vCons a v $ 0 * vCons b w $ 0 +\n    sum ((\\<lambda>i. vCons a v $ i * vCons b w $ i) \\<circ> Suc)\n     {0..<dim_vec w} =\n    a * b + (\\<Sum>i = 0..<dim_vec w. v $ i * w $ i)", "apply force"], ["proof (prove)\ngoal (1 subgoal):\n 1. vCons a v $ 0 * vCons b w $ 0 +\n    sum ((\\<lambda>i. vCons a v $ i * vCons b w $ i) \\<circ> Suc)\n     {0..<dim_vec w} =\n    a * b + (\\<Sum>i = 0..<dim_vec w. v $ i * w $ i)", "apply simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma zero_vec_Suc: \"0\\<^sub>v (Suc n) = vCons 0 (0\\<^sub>v n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0\\<^sub>v (Suc n) = vCons (0::'a) (0\\<^sub>v n)", "by (auto simp: zero_vec_def vec_Suc o_def)"], ["", "lemma zero_vec_zero[simp]: \"0\\<^sub>v 0 = vNil\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0\\<^sub>v 0 = vNil", "by auto"], ["", "lemma vCons_eq_vCons[simp]: \"vCons a v = vCons b w \\<longleftrightarrow> a = b \\<and> v = w\" (is \"?l \\<longleftrightarrow> ?r\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. (vCons a v = vCons b w) = (a = b \\<and> v = w)", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. vCons a v = vCons b w \\<Longrightarrow> a = b \\<and> v = w\n 2. a = b \\<and> v = w \\<Longrightarrow> vCons a v = vCons b w", "assume ?l"], ["proof (state)\nthis:\n  vCons a v = vCons b w\n\ngoal (2 subgoals):\n 1. vCons a v = vCons b w \\<Longrightarrow> a = b \\<and> v = w\n 2. a = b \\<and> v = w \\<Longrightarrow> vCons a v = vCons b w", "note arg_cong[OF this]"], ["proof (state)\nthis:\n  ?f (vCons a v) = ?f (vCons b w)\n\ngoal (2 subgoals):\n 1. vCons a v = vCons b w \\<Longrightarrow> a = b \\<and> v = w\n 2. a = b \\<and> v = w \\<Longrightarrow> vCons a v = vCons b w", "from this[of dim_vec] this[of \"\\<lambda>x. x$0\"] this[of \"\\<lambda>x. x$Suc _\"]"], ["proof (chain)\npicking this:\n  dim_vec (vCons a v) = dim_vec (vCons b w)\n  vCons a v $ 0 = vCons b w $ 0\n  vCons a v $ Suc ?uu3 = vCons b w $ Suc ?uu3", "show ?r"], ["proof (prove)\nusing this:\n  dim_vec (vCons a v) = dim_vec (vCons b w)\n  vCons a v $ 0 = vCons b w $ 0\n  vCons a v $ Suc ?uu3 = vCons b w $ Suc ?uu3\n\ngoal (1 subgoal):\n 1. a = b \\<and> v = w", "by (auto simp: vec_eq_iff)"], ["proof (state)\nthis:\n  a = b \\<and> v = w\n\ngoal (1 subgoal):\n 1. a = b \\<and> v = w \\<Longrightarrow> vCons a v = vCons b w", "qed simp"], ["", "lemma vec_carrier_vec[simp]: \"vec n f \\<in> carrier_vec m \\<longleftrightarrow> n = m\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (vec n f \\<in> carrier_vec m) = (n = m)", "unfolding carrier_vec_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (vec n f \\<in> {v. dim_vec v = m}) = (n = m)", "by auto"], ["", "notation transpose_mat (\"(_\\<^sup>T)\" [1000])"], ["", "lemma map_mat_transpose: \"(map_mat f A)\\<^sup>T = map_mat f A\\<^sup>T\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (map_mat f A)\\<^sup>T = map_mat f A\\<^sup>T", "by auto"], ["", "lemma cols_transpose[simp]: \"cols A\\<^sup>T = rows A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. cols A\\<^sup>T = rows A", "unfolding cols_def rows_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. map (col A\\<^sup>T) [0..<dim_col A\\<^sup>T] =\n    map (row A) [0..<dim_row A]", "by auto"], ["", "lemma rows_transpose[simp]: \"rows A\\<^sup>T = cols A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rows A\\<^sup>T = cols A", "unfolding cols_def rows_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. map (row A\\<^sup>T) [0..<dim_row A\\<^sup>T] =\n    map (col A) [0..<dim_col A]", "by auto"], ["", "lemma list_of_vec_vec [simp]: \"list_of_vec (vec n f) = map f [0..<n]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. list_of_vec (vec n f) = map f [0..<n]", "by (transfer, auto simp: mk_vec_def)"], ["", "lemma list_of_vec_0 [simp]: \"list_of_vec (0\\<^sub>v n) = replicate n 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. list_of_vec (0\\<^sub>v n) = replicate n (0::'a)", "by (simp add: zero_vec_def map_replicate_trivial)"], ["", "lemma diag_mat_map:\n  assumes M_carrier: \"M \\<in> carrier_mat n n\"\n  shows \"diag_mat (map_mat f M) = map f (diag_mat M)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. diag_mat (map_mat f M) = map f (diag_mat M)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. diag_mat (map_mat f M) = map f (diag_mat M)", "have dim_eq: \"dim_row M = dim_col M\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dim_row M = dim_col M", "using M_carrier"], ["proof (prove)\nusing this:\n  M \\<in> carrier_mat n n\n\ngoal (1 subgoal):\n 1. dim_row M = dim_col M", "by auto"], ["proof (state)\nthis:\n  dim_row M = dim_col M\n\ngoal (1 subgoal):\n 1. diag_mat (map_mat f M) = map f (diag_mat M)", "have m: \"map_mat f M $$ (i, i) = f (M $$ (i, i))\" if i: \"i < dim_row M\" for i"], ["proof (prove)\ngoal (1 subgoal):\n 1. map_mat f M $$ (i, i) = f (M $$ (i, i))", "using dim_eq i"], ["proof (prove)\nusing this:\n  dim_row M = dim_col M\n  i < dim_row M\n\ngoal (1 subgoal):\n 1. map_mat f M $$ (i, i) = f (M $$ (i, i))", "by auto"], ["proof (state)\nthis:\n  ?i < dim_row M \\<Longrightarrow>\n  map_mat f M $$ (?i, ?i) = f (M $$ (?i, ?i))\n\ngoal (1 subgoal):\n 1. diag_mat (map_mat f M) = map f (diag_mat M)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. diag_mat (map_mat f M) = map f (diag_mat M)", "by (rule nth_equalityI, insert m, auto simp add: diag_mat_def M_carrier)"], ["proof (state)\nthis:\n  diag_mat (map_mat f M) = map f (diag_mat M)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma mat_of_rows_map [simp]:\n  assumes x: \"set vs \\<subseteq> carrier_vec n\"\n  shows \"mat_of_rows n (map (map_vec f) vs) = map_mat f (mat_of_rows n vs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mat_of_rows n (map (map_vec f) vs) = map_mat f (mat_of_rows n vs)", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. mat_of_rows n (map (map_vec f) vs) = map_mat f (mat_of_rows n vs)", "have \"\\<forall>x\\<in>set vs. dim_vec x = n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>set vs. dim_vec x = n", "using x"], ["proof (prove)\nusing this:\n  set vs \\<subseteq> carrier_vec n\n\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>set vs. dim_vec x = n", "by auto"], ["proof (state)\nthis:\n  \\<forall>x\\<in>set vs. dim_vec x = n\n\ngoal (1 subgoal):\n 1. mat_of_rows n (map (map_vec f) vs) = map_mat f (mat_of_rows n vs)", "then"], ["proof (chain)\npicking this:\n  \\<forall>x\\<in>set vs. dim_vec x = n", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<forall>x\\<in>set vs. dim_vec x = n\n\ngoal (1 subgoal):\n 1. mat_of_rows n (map (map_vec f) vs) = map_mat f (mat_of_rows n vs)", "by (auto simp add: mat_eq_iff map_vec_def mat_of_rows_def)"], ["proof (state)\nthis:\n  mat_of_rows n (map (map_vec f) vs) = map_mat f (mat_of_rows n vs)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma mat_of_cols_map [simp]:\n  assumes x: \"set vs \\<subseteq> carrier_vec n\"\n  shows \"mat_of_cols n (map (map_vec f) vs) = map_mat f (mat_of_cols n vs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mat_of_cols n (map (map_vec f) vs) = map_mat f (mat_of_cols n vs)", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. mat_of_cols n (map (map_vec f) vs) = map_mat f (mat_of_cols n vs)", "have \"\\<forall>x\\<in>set vs. dim_vec x = n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>set vs. dim_vec x = n", "using x"], ["proof (prove)\nusing this:\n  set vs \\<subseteq> carrier_vec n\n\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>set vs. dim_vec x = n", "by auto"], ["proof (state)\nthis:\n  \\<forall>x\\<in>set vs. dim_vec x = n\n\ngoal (1 subgoal):\n 1. mat_of_cols n (map (map_vec f) vs) = map_mat f (mat_of_cols n vs)", "then"], ["proof (chain)\npicking this:\n  \\<forall>x\\<in>set vs. dim_vec x = n", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<forall>x\\<in>set vs. dim_vec x = n\n\ngoal (1 subgoal):\n 1. mat_of_cols n (map (map_vec f) vs) = map_mat f (mat_of_cols n vs)", "by (auto simp add: mat_eq_iff map_vec_def mat_of_cols_def)"], ["proof (state)\nthis:\n  mat_of_cols n (map (map_vec f) vs) = map_mat f (mat_of_cols n vs)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma vec_of_list_map [simp]: \"vec_of_list (map f xs) = map_vec f (vec_of_list xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. vec_of_list (map f xs) = map_vec f (vec_of_list xs)", "unfolding map_vec_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. vec_of_list (map f xs) =\n    vec (dim_vec (vec_of_list xs)) (\\<lambda>i. f (vec_of_list xs $ i))", "by (transfer, auto simp add: mk_vec_def)"], ["", "lemma map_vec: \"map_vec f (vec n g) = vec n (f o g)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. map_vec f (vec n g) = vec n (f \\<circ> g)", "by auto"], ["", "lemma mat_of_cols_Cons_index_0: \"i < n \\<Longrightarrow> mat_of_cols n (w # ws) $$ (i, 0) = w $ i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. i < n \\<Longrightarrow> mat_of_cols n (w # ws) $$ (i, 0) = w $ i", "by (unfold mat_of_cols_def, transfer', auto simp: mk_mat_def)"], ["", "lemma nth_map_out_of_bound: \"i \\<ge> length xs \\<Longrightarrow> map f xs ! i = [] ! (i - length xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length xs \\<le> i \\<Longrightarrow> map f xs ! i = [] ! (i - length xs)", "by (induct xs arbitrary:i, auto)"], ["", "lemma mat_of_cols_Cons_index_Suc:\n  \"i < n \\<Longrightarrow> mat_of_cols n (w # ws) $$ (i, Suc j) = mat_of_cols n ws $$ (i,j)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. i < n \\<Longrightarrow>\n    mat_of_cols n (w # ws) $$ (i, Suc j) = mat_of_cols n ws $$ (i, j)", "by (unfold mat_of_cols_def, transfer, auto simp: mk_mat_def undef_mat_def nth_append nth_map_out_of_bound)"], ["", "lemma mat_of_cols_index: \"i < n \\<Longrightarrow> j < length ws \\<Longrightarrow> mat_of_cols n ws $$ (i,j) = ws ! j $ i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>i < n; j < length ws\\<rbrakk>\n    \\<Longrightarrow> mat_of_cols n ws $$ (i, j) = ws ! j $ i", "by (unfold mat_of_cols_def, auto)"], ["", "lemma mat_of_rows_index: \"i < length rs \\<Longrightarrow> j < n \\<Longrightarrow> mat_of_rows n rs $$ (i,j) = rs ! i $ j\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>i < length rs; j < n\\<rbrakk>\n    \\<Longrightarrow> mat_of_rows n rs $$ (i, j) = rs ! i $ j", "by (unfold mat_of_rows_def, auto)"], ["", "lemma transpose_mat_of_rows: \"(mat_of_rows n vs)\\<^sup>T = mat_of_cols n vs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (mat_of_rows n vs)\\<^sup>T = mat_of_cols n vs", "by (auto intro!: eq_matI simp: mat_of_rows_index mat_of_cols_index)"], ["", "lemma transpose_mat_of_cols: \"(mat_of_cols n vs)\\<^sup>T = mat_of_rows n vs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (mat_of_cols n vs)\\<^sup>T = mat_of_rows n vs", "by (auto intro!: eq_matI simp: mat_of_rows_index mat_of_cols_index)"], ["", "lemma nth_list_of_vec [simp]:\n  assumes \"i < dim_vec v\" shows \"list_of_vec v ! i = v $ i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. list_of_vec v ! i = v $ i", "using assms"], ["proof (prove)\nusing this:\n  i < dim_vec v\n\ngoal (1 subgoal):\n 1. list_of_vec v ! i = v $ i", "by (transfer, auto)"], ["", "lemma length_list_of_vec [simp]:\n  \"length (list_of_vec v) = dim_vec v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length (list_of_vec v) = dim_vec v", "by (transfer, auto)"], ["", "lemma vec_eq_0_iff:\n  \"v = 0\\<^sub>v n \\<longleftrightarrow> n = dim_vec v \\<and> (n = 0 \\<or> set (list_of_vec v) = {0})\" (is \"?l \\<longleftrightarrow> ?r\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. (v = 0\\<^sub>v n) =\n    (n = dim_vec v \\<and> (n = 0 \\<or> set (list_of_vec v) = {0::'a}))", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. v = 0\\<^sub>v n \\<Longrightarrow>\n    n = dim_vec v \\<and> (n = 0 \\<or> set (list_of_vec v) = {0::'a})\n 2. n = dim_vec v \\<and>\n    (n = 0 \\<or> set (list_of_vec v) = {0::'a}) \\<Longrightarrow>\n    v = 0\\<^sub>v n", "show \"?l \\<Longrightarrow> ?r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. v = 0\\<^sub>v n \\<Longrightarrow>\n    n = dim_vec v \\<and> (n = 0 \\<or> set (list_of_vec v) = {0::'a})", "by auto"], ["proof (state)\nthis:\n  v = 0\\<^sub>v n \\<Longrightarrow>\n  n = dim_vec v \\<and> (n = 0 \\<or> set (list_of_vec v) = {0::'a})\n\ngoal (1 subgoal):\n 1. n = dim_vec v \\<and>\n    (n = 0 \\<or> set (list_of_vec v) = {0::'a}) \\<Longrightarrow>\n    v = 0\\<^sub>v n", "show \"?r \\<Longrightarrow> ?l\""], ["proof (prove)\ngoal (1 subgoal):\n 1. n = dim_vec v \\<and>\n    (n = 0 \\<or> set (list_of_vec v) = {0::'a}) \\<Longrightarrow>\n    v = 0\\<^sub>v n", "by (intro iffI eq_vecI, force simp: set_conv_nth, force)"], ["proof (state)\nthis:\n  n = dim_vec v \\<and>\n  (n = 0 \\<or> set (list_of_vec v) = {0::'a}) \\<Longrightarrow>\n  v = 0\\<^sub>v n\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma list_of_vec_vCons[simp]: \"list_of_vec (vCons a v) = a # list_of_vec v\" (is \"?l = ?r\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. list_of_vec (vCons a v) = a # list_of_vec v", "proof (intro nth_equalityI)"], ["proof (state)\ngoal (2 subgoals):\n 1. length (list_of_vec (vCons a v)) = length (a # list_of_vec v)\n 2. \\<And>i.\n       i < length (list_of_vec (vCons a v)) \\<Longrightarrow>\n       list_of_vec (vCons a v) ! i = (a # list_of_vec v) ! i", "fix i"], ["proof (state)\ngoal (2 subgoals):\n 1. length (list_of_vec (vCons a v)) = length (a # list_of_vec v)\n 2. \\<And>i.\n       i < length (list_of_vec (vCons a v)) \\<Longrightarrow>\n       list_of_vec (vCons a v) ! i = (a # list_of_vec v) ! i", "assume \"i < length ?l\""], ["proof (state)\nthis:\n  i < length (list_of_vec (vCons a v))\n\ngoal (2 subgoals):\n 1. length (list_of_vec (vCons a v)) = length (a # list_of_vec v)\n 2. \\<And>i.\n       i < length (list_of_vec (vCons a v)) \\<Longrightarrow>\n       list_of_vec (vCons a v) ! i = (a # list_of_vec v) ! i", "then"], ["proof (chain)\npicking this:\n  i < length (list_of_vec (vCons a v))", "show \"?l ! i = ?r ! i\""], ["proof (prove)\nusing this:\n  i < length (list_of_vec (vCons a v))\n\ngoal (1 subgoal):\n 1. list_of_vec (vCons a v) ! i = (a # list_of_vec v) ! i", "by (cases i, auto)"], ["proof (state)\nthis:\n  list_of_vec (vCons a v) ! i = (a # list_of_vec v) ! i\n\ngoal (1 subgoal):\n 1. length (list_of_vec (vCons a v)) = length (a # list_of_vec v)", "qed simp"], ["", "lemma append_vec_vCons[simp]: \"vCons a v @\\<^sub>v w = vCons a (v @\\<^sub>v w)\" (is \"?l = ?r\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. vCons a v @\\<^sub>v w = vCons a (v @\\<^sub>v w)", "proof (unfold vec_eq_iff, intro conjI allI impI)"], ["proof (state)\ngoal (2 subgoals):\n 1. dim_vec (vCons a v @\\<^sub>v w) = dim_vec (vCons a (v @\\<^sub>v w))\n 2. \\<And>i.\n       i < dim_vec (vCons a (v @\\<^sub>v w)) \\<Longrightarrow>\n       (vCons a v @\\<^sub>v w) $ i = vCons a (v @\\<^sub>v w) $ i", "fix i"], ["proof (state)\ngoal (2 subgoals):\n 1. dim_vec (vCons a v @\\<^sub>v w) = dim_vec (vCons a (v @\\<^sub>v w))\n 2. \\<And>i.\n       i < dim_vec (vCons a (v @\\<^sub>v w)) \\<Longrightarrow>\n       (vCons a v @\\<^sub>v w) $ i = vCons a (v @\\<^sub>v w) $ i", "assume \"i < dim_vec ?r\""], ["proof (state)\nthis:\n  i < dim_vec (vCons a (v @\\<^sub>v w))\n\ngoal (2 subgoals):\n 1. dim_vec (vCons a v @\\<^sub>v w) = dim_vec (vCons a (v @\\<^sub>v w))\n 2. \\<And>i.\n       i < dim_vec (vCons a (v @\\<^sub>v w)) \\<Longrightarrow>\n       (vCons a v @\\<^sub>v w) $ i = vCons a (v @\\<^sub>v w) $ i", "then"], ["proof (chain)\npicking this:\n  i < dim_vec (vCons a (v @\\<^sub>v w))", "show \"?l $ i = ?r $ i\""], ["proof (prove)\nusing this:\n  i < dim_vec (vCons a (v @\\<^sub>v w))\n\ngoal (1 subgoal):\n 1. (vCons a v @\\<^sub>v w) $ i = vCons a (v @\\<^sub>v w) $ i", "by (cases i; subst index_append_vec, auto)"], ["proof (state)\nthis:\n  (vCons a v @\\<^sub>v w) $ i = vCons a (v @\\<^sub>v w) $ i\n\ngoal (1 subgoal):\n 1. dim_vec (vCons a v @\\<^sub>v w) = dim_vec (vCons a (v @\\<^sub>v w))", "qed simp"], ["", "lemma append_vec_vNil[simp]: \"vNil @\\<^sub>v v = v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. vNil @\\<^sub>v v = v", "by (unfold vec_eq_iff, auto)"], ["", "lemma list_of_vec_append[simp]: \"list_of_vec (v @\\<^sub>v w) = list_of_vec v @ list_of_vec w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. list_of_vec (v @\\<^sub>v w) = list_of_vec v @ list_of_vec w", "by (induct v, auto)"], ["", "lemma transpose_mat_eq[simp]: \"A\\<^sup>T = B\\<^sup>T \\<longleftrightarrow> A = B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (A\\<^sup>T = B\\<^sup>T) = (A = B)", "using transpose_transpose"], ["proof (prove)\nusing this:\n  ?A\\<^sup>T\\<^sup>T = ?A\n\ngoal (1 subgoal):\n 1. (A\\<^sup>T = B\\<^sup>T) = (A = B)", "by metis"], ["", "lemma mat_col_eqI: assumes cols: \"\\<And> i. i < dim_col B \\<Longrightarrow> col A i = col B i\"\n  and dims: \"dim_row A = dim_row B\" \"dim_col A = dim_col B\"\nshows \"A = B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A = B", "by(subst transpose_mat_eq[symmetric], rule eq_rowI,insert assms,auto)"], ["", "lemma upper_triangular_imp_distinct:\n  assumes A: \"A \\<in> carrier_mat n n\"\n    and tri: \"upper_triangular A\"\n    and diag: \"0 \\<notin> set (diag_mat A)\"\n  shows \"distinct (rows A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. distinct (rows A)", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. distinct (rows A)", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. distinct (rows A)", "fix i and j"], ["proof (state)\ngoal (1 subgoal):\n 1. distinct (rows A)", "assume eq: \"rows A ! i = rows A ! j\" and ij: \"i < j\" and jn: \"j < n\""], ["proof (state)\nthis:\n  rows A ! i = rows A ! j\n  i < j\n  j < n\n\ngoal (1 subgoal):\n 1. distinct (rows A)", "from tri A ij jn"], ["proof (chain)\npicking this:\n  upper_triangular A\n  A \\<in> carrier_mat n n\n  i < j\n  j < n", "have \"rows A ! j $ i = 0\""], ["proof (prove)\nusing this:\n  upper_triangular A\n  A \\<in> carrier_mat n n\n  i < j\n  j < n\n\ngoal (1 subgoal):\n 1. rows A ! j $ i = (0::'a)", "by (auto dest!:upper_triangularD)"], ["proof (state)\nthis:\n  rows A ! j $ i = (0::'a)\n\ngoal (1 subgoal):\n 1. distinct (rows A)", "with eq"], ["proof (chain)\npicking this:\n  rows A ! i = rows A ! j\n  rows A ! j $ i = (0::'a)", "have \"rows A ! i $ i = 0\""], ["proof (prove)\nusing this:\n  rows A ! i = rows A ! j\n  rows A ! j $ i = (0::'a)\n\ngoal (1 subgoal):\n 1. rows A ! i $ i = (0::'a)", "by auto"], ["proof (state)\nthis:\n  rows A ! i $ i = (0::'a)\n\ngoal (1 subgoal):\n 1. distinct (rows A)", "with diag ij jn A"], ["proof (chain)\npicking this:\n  (0::'a) \\<notin> set (diag_mat A)\n  i < j\n  j < n\n  A \\<in> carrier_mat n n\n  rows A ! i $ i = (0::'a)", "have False"], ["proof (prove)\nusing this:\n  (0::'a) \\<notin> set (diag_mat A)\n  i < j\n  j < n\n  A \\<in> carrier_mat n n\n  rows A ! i $ i = (0::'a)\n\ngoal (1 subgoal):\n 1. False", "by (auto simp: diag_mat_def)"], ["proof (state)\nthis:\n  False\n\ngoal (1 subgoal):\n 1. distinct (rows A)", "}"], ["proof (state)\nthis:\n  \\<lbrakk>rows A ! ?i2 = rows A ! ?j2; ?i2 < ?j2; ?j2 < n\\<rbrakk>\n  \\<Longrightarrow> False\n\ngoal (1 subgoal):\n 1. distinct (rows A)", "with A"], ["proof (chain)\npicking this:\n  A \\<in> carrier_mat n n\n  \\<lbrakk>rows A ! ?i2 = rows A ! ?j2; ?i2 < ?j2; ?j2 < n\\<rbrakk>\n  \\<Longrightarrow> False", "show ?thesis"], ["proof (prove)\nusing this:\n  A \\<in> carrier_mat n n\n  \\<lbrakk>rows A ! ?i2 = rows A ! ?j2; ?i2 < ?j2; ?j2 < n\\<rbrakk>\n  \\<Longrightarrow> False\n\ngoal (1 subgoal):\n 1. distinct (rows A)", "by (force simp: distinct_conv_nth nat_neq_iff)"], ["proof (state)\nthis:\n  distinct (rows A)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma dim_vec_of_list[simp] :\"dim_vec (vec_of_list as) = length as\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dim_vec (vec_of_list as) = length as", "by transfer auto"], ["", "lemma list_vec: \"list_of_vec (vec_of_list xs) = xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. list_of_vec (vec_of_list xs) = xs", "by (transfer, metis (mono_tags, lifting) atLeastLessThan_iff map_eq_conv map_nth mk_vec_def old.prod.case set_upt)"], ["", "lemma vec_list: \"vec_of_list (list_of_vec v) = v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. vec_of_list (list_of_vec v) = v", "apply transfer"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>v.\n       \\<exists>n f. v = (n, mk_vec n f) \\<and> True \\<Longrightarrow>\n       (length (case v of (n, v) \\<Rightarrow> map v [0..<n]),\n        mk_vec (length (case v of (n, v) \\<Rightarrow> map v [0..<n]))\n         ((!) (case v of (n, v) \\<Rightarrow> map v [0..<n]))) =\n       v", "unfolding mk_vec_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>v.\n       \\<exists>n f.\n          v =\n          (n, \\<lambda>i. if i < n then f i else undef_vec (i - n)) \\<and>\n          True \\<Longrightarrow>\n       (length (case v of (n, v) \\<Rightarrow> map v [0..<n]),\n        \\<lambda>i.\n           if i < length (case v of (n, v) \\<Rightarrow> map v [0..<n])\n           then (case v of (n, v) \\<Rightarrow> map v [0..<n]) ! i\n           else undef_vec\n                 (i -\n                  length (case v of (n, v) \\<Rightarrow> map v [0..<n]))) =\n       v", "by auto"], ["", "lemma index_vec_of_list: \"i<length xs \\<Longrightarrow> (vec_of_list xs) $ i = xs ! i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. i < length xs \\<Longrightarrow> vec_of_list xs $ i = xs ! i", "by (metis vec.abs_eq index_vec vec_of_list.abs_eq)"], ["", "lemma vec_of_list_index: \"vec_of_list xs $ j = xs ! j\""], ["proof (prove)\ngoal (1 subgoal):\n 1. vec_of_list xs $ j = xs ! j", "apply transfer"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xs j. snd (length xs, mk_vec (length xs) ((!) xs)) j = xs ! j", "unfolding mk_vec_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xs j.\n       snd (length xs,\n            \\<lambda>i.\n               if i < length xs then xs ! i else undef_vec (i - length xs))\n        j =\n       xs ! j", "unfolding undef_vec_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xs j.\n       snd (length xs,\n            \\<lambda>i.\n               if i < length xs then xs ! i else [] ! (i - length xs))\n        j =\n       xs ! j", "by (simp, metis append_Nil2 nth_append)"], ["", "lemma list_of_vec_index: \"list_of_vec v ! j = v $ j\""], ["proof (prove)\ngoal (1 subgoal):\n 1. list_of_vec v ! j = v $ j", "by (metis vec_list vec_of_list_index)"], ["", "lemma list_of_vec_map: \"list_of_vec xs = map (($) xs) [0..<dim_vec xs]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. list_of_vec xs = map (($) xs) [0..<dim_vec xs]", "by transfer auto"], ["", "definition \"component_mult v w = vec (min (dim_vec v) (dim_vec w)) (\\<lambda>i. v $ i * w $ i)\""], ["", "definition vec_set::\"'a vec \\<Rightarrow> 'a set\" (\"set\\<^sub>v\")\n  where \"vec_set v = vec_index v ` {..<dim_vec v}\""], ["", "lemma index_component_mult:\nassumes \"i < dim_vec v\" \"i < dim_vec w\"\nshows \"component_mult v w $ i = v $ i * w $ i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. component_mult v w $ i = v $ i * w $ i", "unfolding component_mult_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. vec (min (dim_vec v) (dim_vec w)) (\\<lambda>i. v $ i * w $ i) $ i =\n    v $ i * w $ i", "using assms index_vec"], ["proof (prove)\nusing this:\n  i < dim_vec v\n  i < dim_vec w\n  ?i < ?n \\<Longrightarrow> vec ?n ?f $ ?i = ?f ?i\n\ngoal (1 subgoal):\n 1. vec (min (dim_vec v) (dim_vec w)) (\\<lambda>i. v $ i * w $ i) $ i =\n    v $ i * w $ i", "by auto"], ["", "lemma dim_component_mult:\n\"dim_vec (component_mult v w) = min (dim_vec v) (dim_vec w)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dim_vec (component_mult v w) = min (dim_vec v) (dim_vec w)", "unfolding component_mult_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. dim_vec\n     (vec (min (dim_vec v) (dim_vec w)) (\\<lambda>i. v $ i * w $ i)) =\n    min (dim_vec v) (dim_vec w)", "using index_vec"], ["proof (prove)\nusing this:\n  ?i < ?n \\<Longrightarrow> vec ?n ?f $ ?i = ?f ?i\n\ngoal (1 subgoal):\n 1. dim_vec\n     (vec (min (dim_vec v) (dim_vec w)) (\\<lambda>i. v $ i * w $ i)) =\n    min (dim_vec v) (dim_vec w)", "by auto"], ["", "lemma vec_setE:\nassumes \"a \\<in> set\\<^sub>v v\"\nobtains i where \"v$i = a\" \"i<dim_vec v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>i.\n        \\<lbrakk>v $ i = a; i < dim_vec v\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using assms"], ["proof (prove)\nusing this:\n  a \\<in> set\\<^sub>v v\n\ngoal (1 subgoal):\n 1. (\\<And>i.\n        \\<lbrakk>v $ i = a; i < dim_vec v\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding vec_set_def"], ["proof (prove)\nusing this:\n  a \\<in> ($) v ` {..<dim_vec v}\n\ngoal (1 subgoal):\n 1. (\\<And>i.\n        \\<lbrakk>v $ i = a; i < dim_vec v\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["", "lemma vec_setI:\nassumes \"v$i = a\" \"i<dim_vec v\"\nshows \"a \\<in> set\\<^sub>v v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<in> set\\<^sub>v v", "using assms"], ["proof (prove)\nusing this:\n  v $ i = a\n  i < dim_vec v\n\ngoal (1 subgoal):\n 1. a \\<in> set\\<^sub>v v", "unfolding vec_set_def"], ["proof (prove)\nusing this:\n  v $ i = a\n  i < dim_vec v\n\ngoal (1 subgoal):\n 1. a \\<in> ($) v ` {..<dim_vec v}", "using image_eqI lessThan_iff"], ["proof (prove)\nusing this:\n  v $ i = a\n  i < dim_vec v\n  \\<lbrakk>?b = ?f ?x; ?x \\<in> ?A\\<rbrakk>\n  \\<Longrightarrow> ?b \\<in> ?f ` ?A\n  (?i \\<in> {..<?k}) = (?i < ?k)\n\ngoal (1 subgoal):\n 1. a \\<in> ($) v ` {..<dim_vec v}", "by blast"], ["", "lemma set_list_of_vec: \"set (list_of_vec v) = set\\<^sub>v v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set (list_of_vec v) = set\\<^sub>v v", "unfolding vec_set_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. set (list_of_vec v) = ($) v ` {..<dim_vec v}", "by transfer auto"], ["", "instantiation vec :: (conjugate) conjugate\nbegin"], ["", "definition conjugate_vec :: \"'a :: conjugate vec \\<Rightarrow> 'a vec\"\n  where \"conjugate v = vec (dim_vec v) (\\<lambda>i. conjugate (v $ i))\""], ["", "lemma conjugate_vCons [simp]:\n  \"conjugate (vCons a v) = vCons (conjugate a) (conjugate v)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. conjugate (vCons a v) = vCons (conjugate a) (conjugate v)", "by (auto simp: vec_Suc conjugate_vec_def)"], ["", "lemma dim_vec_conjugate[simp]: \"dim_vec (conjugate v) = dim_vec v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dim_vec (conjugate v) = dim_vec v", "unfolding conjugate_vec_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. dim_vec (vec (dim_vec v) (\\<lambda>i. conjugate (v $ i))) = dim_vec v", "by auto"], ["", "lemma carrier_vec_conjugate[simp]: \"v \\<in> carrier_vec n \\<Longrightarrow> conjugate v \\<in> carrier_vec n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. v \\<in> carrier_vec n \\<Longrightarrow> conjugate v \\<in> carrier_vec n", "by (auto intro!: carrier_vecI)"], ["", "lemma vec_index_conjugate[simp]:\n  shows \"i < dim_vec v \\<Longrightarrow> conjugate v $ i = conjugate (v $ i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. i < dim_vec v \\<Longrightarrow> conjugate v $ i = conjugate (v $ i)", "unfolding conjugate_vec_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. i < dim_vec v \\<Longrightarrow>\n    vec (dim_vec v) (\\<lambda>i. conjugate (v $ i)) $ i = conjugate (v $ i)", "by auto"], ["", "instance"], ["proof (prove)\ngoal (1 subgoal):\n 1. OFCLASS('a vec, conjugate_class)", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>a. conjugate (conjugate a) = a\n 2. \\<And>a b. (conjugate a = conjugate b) = (a = b)", "fix v w :: \"'a vec\""], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>a. conjugate (conjugate a) = a\n 2. \\<And>a b. (conjugate a = conjugate b) = (a = b)", "show \"conjugate (conjugate v) = v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. conjugate (conjugate v) = v", "by (induct v, auto simp: conjugate_vec_def)"], ["proof (state)\nthis:\n  conjugate (conjugate v) = v\n\ngoal (1 subgoal):\n 1. \\<And>a b. (conjugate a = conjugate b) = (a = b)", "let ?v = \"conjugate v\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a b. (conjugate a = conjugate b) = (a = b)", "let ?w = \"conjugate w\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a b. (conjugate a = conjugate b) = (a = b)", "show \"conjugate v = conjugate w \\<longleftrightarrow> v = w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (conjugate v = conjugate w) = (v = w)", "proof(rule iffI)"], ["proof (state)\ngoal (2 subgoals):\n 1. conjugate v = conjugate w \\<Longrightarrow> v = w\n 2. v = w \\<Longrightarrow> conjugate v = conjugate w", "assume cvw: \"?v = ?w\""], ["proof (state)\nthis:\n  conjugate v = conjugate w\n\ngoal (2 subgoals):\n 1. conjugate v = conjugate w \\<Longrightarrow> v = w\n 2. v = w \\<Longrightarrow> conjugate v = conjugate w", "show \"v = w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. v = w", "proof(rule)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>i. i < dim_vec w \\<Longrightarrow> v $ i = w $ i\n 2. dim_vec v = dim_vec w", "have \"dim_vec ?v = dim_vec ?w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dim_vec (conjugate v) = dim_vec (conjugate w)", "using cvw"], ["proof (prove)\nusing this:\n  conjugate v = conjugate w\n\ngoal (1 subgoal):\n 1. dim_vec (conjugate v) = dim_vec (conjugate w)", "by auto"], ["proof (state)\nthis:\n  dim_vec (conjugate v) = dim_vec (conjugate w)\n\ngoal (2 subgoals):\n 1. \\<And>i. i < dim_vec w \\<Longrightarrow> v $ i = w $ i\n 2. dim_vec v = dim_vec w", "then"], ["proof (chain)\npicking this:\n  dim_vec (conjugate v) = dim_vec (conjugate w)", "show dim: \"dim_vec v = dim_vec w\""], ["proof (prove)\nusing this:\n  dim_vec (conjugate v) = dim_vec (conjugate w)\n\ngoal (1 subgoal):\n 1. dim_vec v = dim_vec w", "by simp"], ["proof (state)\nthis:\n  dim_vec v = dim_vec w\n\ngoal (1 subgoal):\n 1. \\<And>i. i < dim_vec w \\<Longrightarrow> v $ i = w $ i", "fix i"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i. i < dim_vec w \\<Longrightarrow> v $ i = w $ i", "assume i: \"i < dim_vec w\""], ["proof (state)\nthis:\n  i < dim_vec w\n\ngoal (1 subgoal):\n 1. \\<And>i. i < dim_vec w \\<Longrightarrow> v $ i = w $ i", "then"], ["proof (chain)\npicking this:\n  i < dim_vec w", "have \"conjugate v $ i = conjugate w $ i\""], ["proof (prove)\nusing this:\n  i < dim_vec w\n\ngoal (1 subgoal):\n 1. conjugate v $ i = conjugate w $ i", "using cvw"], ["proof (prove)\nusing this:\n  i < dim_vec w\n  conjugate v = conjugate w\n\ngoal (1 subgoal):\n 1. conjugate v $ i = conjugate w $ i", "by auto"], ["proof (state)\nthis:\n  conjugate v $ i = conjugate w $ i\n\ngoal (1 subgoal):\n 1. \\<And>i. i < dim_vec w \\<Longrightarrow> v $ i = w $ i", "then"], ["proof (chain)\npicking this:\n  conjugate v $ i = conjugate w $ i", "have \"conjugate (v$i) = conjugate (w $ i)\""], ["proof (prove)\nusing this:\n  conjugate v $ i = conjugate w $ i\n\ngoal (1 subgoal):\n 1. conjugate (v $ i) = conjugate (w $ i)", "using i dim"], ["proof (prove)\nusing this:\n  conjugate v $ i = conjugate w $ i\n  i < dim_vec w\n  dim_vec v = dim_vec w\n\ngoal (1 subgoal):\n 1. conjugate (v $ i) = conjugate (w $ i)", "by auto"], ["proof (state)\nthis:\n  conjugate (v $ i) = conjugate (w $ i)\n\ngoal (1 subgoal):\n 1. \\<And>i. i < dim_vec w \\<Longrightarrow> v $ i = w $ i", "then"], ["proof (chain)\npicking this:\n  conjugate (v $ i) = conjugate (w $ i)", "show \"v $ i = w $ i\""], ["proof (prove)\nusing this:\n  conjugate (v $ i) = conjugate (w $ i)\n\ngoal (1 subgoal):\n 1. v $ i = w $ i", "by auto"], ["proof (state)\nthis:\n  v $ i = w $ i\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  v = w\n\ngoal (1 subgoal):\n 1. v = w \\<Longrightarrow> conjugate v = conjugate w", "qed auto"], ["proof (state)\nthis:\n  (conjugate v = conjugate w) = (v = w)\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "lemma conjugate_add_vec:\n  fixes v w :: \"'a :: conjugatable_ring vec\"\n  assumes dim: \"v : carrier_vec n\" \"w : carrier_vec n\"\n  shows \"conjugate (v + w) = conjugate v + conjugate w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. conjugate (v + w) = conjugate v + conjugate w", "by (rule, insert dim, auto simp: conjugate_dist_add)"], ["", "lemma uminus_conjugate_vec:\n  fixes v w :: \"'a :: conjugatable_ring vec\"\n  shows \"- (conjugate v) = conjugate (- v)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. - conjugate v = conjugate (- v)", "by (rule, auto simp:conjugate_neg)"], ["", "lemma conjugate_zero_vec[simp]:\n  \"conjugate (0\\<^sub>v n :: 'a :: conjugatable_ring vec) = 0\\<^sub>v n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. conjugate (0\\<^sub>v n) = 0\\<^sub>v n", "by auto"], ["", "lemma conjugate_vec_0[simp]:\n  \"conjugate (vec 0 f) = vec 0 f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. conjugate (vec 0 f) = vec 0 f", "by auto"], ["", "lemma sprod_vec_0[simp]: \"v \\<bullet> vec 0 f = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. v \\<bullet> vec 0 f = (0::'a)", "by(auto simp: scalar_prod_def)"], ["", "lemma conjugate_zero_iff_vec[simp]:\n  fixes v :: \"'a :: conjugatable_ring vec\"\n  shows \"conjugate v = 0\\<^sub>v n \\<longleftrightarrow> v = 0\\<^sub>v n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (conjugate v = 0\\<^sub>v n) = (v = 0\\<^sub>v n)", "using conjugate_cancel_iff[of _ \"0\\<^sub>v n :: 'a vec\"]"], ["proof (prove)\nusing this:\n  (conjugate ?a = conjugate (0\\<^sub>v n)) = (?a = 0\\<^sub>v n)\n\ngoal (1 subgoal):\n 1. (conjugate v = 0\\<^sub>v n) = (v = 0\\<^sub>v n)", "by auto"], ["", "lemma conjugate_smult_vec:\n  fixes k :: \"'a :: conjugatable_ring\"\n  shows \"conjugate (k \\<cdot>\\<^sub>v v) = conjugate k \\<cdot>\\<^sub>v conjugate v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. conjugate (k \\<cdot>\\<^sub>v v) =\n    conjugate k \\<cdot>\\<^sub>v conjugate v", "using conjugate_dist_mul"], ["proof (prove)\nusing this:\n  conjugate (?a * ?b) = conjugate ?a * conjugate ?b\n\ngoal (1 subgoal):\n 1. conjugate (k \\<cdot>\\<^sub>v v) =\n    conjugate k \\<cdot>\\<^sub>v conjugate v", "by (intro eq_vecI, auto)"], ["", "lemma conjugate_sprod_vec:\n  fixes v w :: \"'a :: conjugatable_ring vec\"\n  assumes v: \"v : carrier_vec n\" and w: \"w : carrier_vec n\"\n  shows \"conjugate (v \\<bullet> w) = conjugate v \\<bullet> conjugate w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. conjugate (v \\<bullet> w) = conjugate v \\<bullet> conjugate w", "proof (insert w v, induct w arbitrary: v rule:carrier_vec_induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>v.\n       v \\<in> carrier_vec 0 \\<Longrightarrow>\n       conjugate (v \\<bullet> vNil) = conjugate v \\<bullet> conjugate vNil\n 2. \\<And>n a v va.\n       \\<lbrakk>v \\<in> carrier_vec n;\n        \\<And>va.\n           va \\<in> carrier_vec n \\<Longrightarrow>\n           conjugate (va \\<bullet> v) = conjugate va \\<bullet> conjugate v;\n        va \\<in> carrier_vec (Suc n)\\<rbrakk>\n       \\<Longrightarrow> conjugate (va \\<bullet> vCons a v) =\n                         conjugate va \\<bullet> conjugate (vCons a v)", "case 0"], ["proof (state)\nthis:\n  v \\<in> carrier_vec 0\n\ngoal (2 subgoals):\n 1. \\<And>v.\n       v \\<in> carrier_vec 0 \\<Longrightarrow>\n       conjugate (v \\<bullet> vNil) = conjugate v \\<bullet> conjugate vNil\n 2. \\<And>n a v va.\n       \\<lbrakk>v \\<in> carrier_vec n;\n        \\<And>va.\n           va \\<in> carrier_vec n \\<Longrightarrow>\n           conjugate (va \\<bullet> v) = conjugate va \\<bullet> conjugate v;\n        va \\<in> carrier_vec (Suc n)\\<rbrakk>\n       \\<Longrightarrow> conjugate (va \\<bullet> vCons a v) =\n                         conjugate va \\<bullet> conjugate (vCons a v)", "then"], ["proof (chain)\npicking this:\n  v \\<in> carrier_vec 0", "show ?case"], ["proof (prove)\nusing this:\n  v \\<in> carrier_vec 0\n\ngoal (1 subgoal):\n 1. conjugate (v \\<bullet> vNil) = conjugate v \\<bullet> conjugate vNil", "by (cases v, auto)"], ["proof (state)\nthis:\n  conjugate (v \\<bullet> vNil) = conjugate v \\<bullet> conjugate vNil\n\ngoal (1 subgoal):\n 1. \\<And>n a v va.\n       \\<lbrakk>v \\<in> carrier_vec n;\n        \\<And>va.\n           va \\<in> carrier_vec n \\<Longrightarrow>\n           conjugate (va \\<bullet> v) = conjugate va \\<bullet> conjugate v;\n        va \\<in> carrier_vec (Suc n)\\<rbrakk>\n       \\<Longrightarrow> conjugate (va \\<bullet> vCons a v) =\n                         conjugate va \\<bullet> conjugate (vCons a v)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n a v va.\n       \\<lbrakk>v \\<in> carrier_vec n;\n        \\<And>va.\n           va \\<in> carrier_vec n \\<Longrightarrow>\n           conjugate (va \\<bullet> v) = conjugate va \\<bullet> conjugate v;\n        va \\<in> carrier_vec (Suc n)\\<rbrakk>\n       \\<Longrightarrow> conjugate (va \\<bullet> vCons a v) =\n                         conjugate va \\<bullet> conjugate (vCons a v)", "case (Suc n b w)"], ["proof (state)\nthis:\n  w \\<in> carrier_vec n\n  ?v \\<in> carrier_vec n \\<Longrightarrow>\n  conjugate (?v \\<bullet> w) = conjugate ?v \\<bullet> conjugate w\n  v \\<in> carrier_vec (Suc n)\n\ngoal (1 subgoal):\n 1. \\<And>n a v va.\n       \\<lbrakk>v \\<in> carrier_vec n;\n        \\<And>va.\n           va \\<in> carrier_vec n \\<Longrightarrow>\n           conjugate (va \\<bullet> v) = conjugate va \\<bullet> conjugate v;\n        va \\<in> carrier_vec (Suc n)\\<rbrakk>\n       \\<Longrightarrow> conjugate (va \\<bullet> vCons a v) =\n                         conjugate va \\<bullet> conjugate (vCons a v)", "then"], ["proof (chain)\npicking this:\n  w \\<in> carrier_vec n\n  ?v \\<in> carrier_vec n \\<Longrightarrow>\n  conjugate (?v \\<bullet> w) = conjugate ?v \\<bullet> conjugate w\n  v \\<in> carrier_vec (Suc n)", "show ?case"], ["proof (prove)\nusing this:\n  w \\<in> carrier_vec n\n  ?v \\<in> carrier_vec n \\<Longrightarrow>\n  conjugate (?v \\<bullet> w) = conjugate ?v \\<bullet> conjugate w\n  v \\<in> carrier_vec (Suc n)\n\ngoal (1 subgoal):\n 1. conjugate (v \\<bullet> vCons b w) =\n    conjugate v \\<bullet> conjugate (vCons b w)", "by (cases v, auto dest: carrier_vecD simp:conjugate_dist_add conjugate_dist_mul)"], ["proof (state)\nthis:\n  conjugate (v \\<bullet> vCons b w) =\n  conjugate v \\<bullet> conjugate (vCons b w)\n\ngoal:\nNo subgoals!", "qed"], ["", "abbreviation cscalar_prod :: \"'a vec \\<Rightarrow> 'a vec \\<Rightarrow> 'a :: conjugatable_ring\" (infix \"\\<bullet>c\" 70)\n  where \"(\\<bullet>c) \\<equiv> \\<lambda>v w. v \\<bullet> conjugate w\""], ["", "lemma conjugate_conjugate_sprod[simp]:\n  assumes v[simp]: \"v : carrier_vec n\" and w[simp]: \"w : carrier_vec n\"\n  shows \"conjugate (conjugate v \\<bullet> w) = v \\<bullet>c w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. conjugate (conjugate v \\<bullet> w) = v \\<bullet>c w", "apply (subst conjugate_sprod_vec[of _ n])"], ["proof (prove)\ngoal (3 subgoals):\n 1. conjugate v \\<in> carrier_vec n\n 2. w \\<in> carrier_vec n\n 3. conjugate (conjugate v) \\<bullet>c w = v \\<bullet>c w", "by auto"], ["", "lemma conjugate_vec_sprod_comm:\n  fixes v w :: \"'a :: {conjugatable_ring, comm_ring} vec\"\n  assumes \"v : carrier_vec n\" and \"w : carrier_vec n\"\n  shows \"v \\<bullet>c w = (conjugate w \\<bullet> v)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. v \\<bullet>c w = conjugate w \\<bullet> v", "unfolding scalar_prod_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>i = 0..<dim_vec (conjugate w). v $ i * conjugate w $ i) =\n    (\\<Sum>i = 0..<dim_vec v. conjugate w $ i * v $ i)", "using assms"], ["proof (prove)\nusing this:\n  v \\<in> carrier_vec n\n  w \\<in> carrier_vec n\n\ngoal (1 subgoal):\n 1. (\\<Sum>i = 0..<dim_vec (conjugate w). v $ i * conjugate w $ i) =\n    (\\<Sum>i = 0..<dim_vec v. conjugate w $ i * v $ i)", "by(subst sum.ivl_cong, auto simp: ac_simps)"], ["", "lemma conjugate_square_ge_0_vec[intro!]:\n  fixes v :: \"'a :: conjugatable_ordered_ring vec\"\n  shows \"v \\<bullet>c v \\<ge> 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (0::'a) \\<le> v \\<bullet>c v", "proof (induct v)"], ["proof (state)\ngoal (2 subgoals):\n 1. (0::'a) \\<le> vNil \\<bullet>c vNil\n 2. \\<And>a v.\n       (0::'a) \\<le> v \\<bullet>c v \\<Longrightarrow>\n       (0::'a) \\<le> vCons a v \\<bullet>c vCons a v", "case vNil"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. (0::'a) \\<le> vNil \\<bullet>c vNil\n 2. \\<And>a v.\n       (0::'a) \\<le> v \\<bullet>c v \\<Longrightarrow>\n       (0::'a) \\<le> vCons a v \\<bullet>c vCons a v", "then"], ["proof (chain)\npicking this:", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. (0::'a) \\<le> vNil \\<bullet>c vNil", "by auto"], ["proof (state)\nthis:\n  (0::'a) \\<le> vNil \\<bullet>c vNil\n\ngoal (1 subgoal):\n 1. \\<And>a v.\n       (0::'a) \\<le> v \\<bullet>c v \\<Longrightarrow>\n       (0::'a) \\<le> vCons a v \\<bullet>c vCons a v", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a v.\n       (0::'a) \\<le> v \\<bullet>c v \\<Longrightarrow>\n       (0::'a) \\<le> vCons a v \\<bullet>c vCons a v", "case (vCons a v)"], ["proof (state)\nthis:\n  (0::'a) \\<le> v \\<bullet>c v\n\ngoal (1 subgoal):\n 1. \\<And>a v.\n       (0::'a) \\<le> v \\<bullet>c v \\<Longrightarrow>\n       (0::'a) \\<le> vCons a v \\<bullet>c vCons a v", "then"], ["proof (chain)\npicking this:\n  (0::'a) \\<le> v \\<bullet>c v", "show ?case"], ["proof (prove)\nusing this:\n  (0::'a) \\<le> v \\<bullet>c v\n\ngoal (1 subgoal):\n 1. (0::'a) \\<le> vCons a v \\<bullet>c vCons a v", "using conjugate_square_positive[of a]"], ["proof (prove)\nusing this:\n  (0::'a) \\<le> v \\<bullet>c v\n  (0::'a) \\<le> a * conjugate a\n\ngoal (1 subgoal):\n 1. (0::'a) \\<le> vCons a v \\<bullet>c vCons a v", "by auto"], ["proof (state)\nthis:\n  (0::'a) \\<le> vCons a v \\<bullet>c vCons a v\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma conjugate_square_eq_0_vec[simp]:\n  fixes v :: \"'a :: {conjugatable_ordered_ring,semiring_no_zero_divisors} vec\"\n  assumes \"v \\<in> carrier_vec n\"\n  shows \"v \\<bullet>c v = 0 \\<longleftrightarrow> v = 0\\<^sub>v n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (v \\<bullet>c v = (0::'a)) = (v = 0\\<^sub>v n)", "proof (insert assms, induct rule: carrier_vec_induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. (vNil \\<bullet>c vNil = (0::'a)) = (vNil = 0\\<^sub>v 0)\n 2. \\<And>n a v.\n       \\<lbrakk>v \\<in> carrier_vec n;\n        (v \\<bullet>c v = (0::'a)) = (v = 0\\<^sub>v n)\\<rbrakk>\n       \\<Longrightarrow> (vCons a v \\<bullet>c vCons a v = (0::'a)) =\n                         (vCons a v = 0\\<^sub>v (Suc n))", "case 0"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. (vNil \\<bullet>c vNil = (0::'a)) = (vNil = 0\\<^sub>v 0)\n 2. \\<And>n a v.\n       \\<lbrakk>v \\<in> carrier_vec n;\n        (v \\<bullet>c v = (0::'a)) = (v = 0\\<^sub>v n)\\<rbrakk>\n       \\<Longrightarrow> (vCons a v \\<bullet>c vCons a v = (0::'a)) =\n                         (vCons a v = 0\\<^sub>v (Suc n))", "then"], ["proof (chain)\npicking this:", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. (vNil \\<bullet>c vNil = (0::'a)) = (vNil = 0\\<^sub>v 0)", "by auto"], ["proof (state)\nthis:\n  (vNil \\<bullet>c vNil = (0::'a)) = (vNil = 0\\<^sub>v 0)\n\ngoal (1 subgoal):\n 1. \\<And>n a v.\n       \\<lbrakk>v \\<in> carrier_vec n;\n        (v \\<bullet>c v = (0::'a)) = (v = 0\\<^sub>v n)\\<rbrakk>\n       \\<Longrightarrow> (vCons a v \\<bullet>c vCons a v = (0::'a)) =\n                         (vCons a v = 0\\<^sub>v (Suc n))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n a v.\n       \\<lbrakk>v \\<in> carrier_vec n;\n        (v \\<bullet>c v = (0::'a)) = (v = 0\\<^sub>v n)\\<rbrakk>\n       \\<Longrightarrow> (vCons a v \\<bullet>c vCons a v = (0::'a)) =\n                         (vCons a v = 0\\<^sub>v (Suc n))", "case (Suc n a v)"], ["proof (state)\nthis:\n  v \\<in> carrier_vec n\n  (v \\<bullet>c v = (0::'a)) = (v = 0\\<^sub>v n)\n\ngoal (1 subgoal):\n 1. \\<And>n a v.\n       \\<lbrakk>v \\<in> carrier_vec n;\n        (v \\<bullet>c v = (0::'a)) = (v = 0\\<^sub>v n)\\<rbrakk>\n       \\<Longrightarrow> (vCons a v \\<bullet>c vCons a v = (0::'a)) =\n                         (vCons a v = 0\\<^sub>v (Suc n))", "then"], ["proof (chain)\npicking this:\n  v \\<in> carrier_vec n\n  (v \\<bullet>c v = (0::'a)) = (v = 0\\<^sub>v n)", "show ?case"], ["proof (prove)\nusing this:\n  v \\<in> carrier_vec n\n  (v \\<bullet>c v = (0::'a)) = (v = 0\\<^sub>v n)\n\ngoal (1 subgoal):\n 1. (vCons a v \\<bullet>c vCons a v = (0::'a)) =\n    (vCons a v = 0\\<^sub>v (Suc n))", "using conjugate_square_positive[of a] conjugate_square_ge_0_vec[of v]"], ["proof (prove)\nusing this:\n  v \\<in> carrier_vec n\n  (v \\<bullet>c v = (0::'a)) = (v = 0\\<^sub>v n)\n  (0::'a) \\<le> a * conjugate a\n  (0::'a) \\<le> v \\<bullet>c v\n\ngoal (1 subgoal):\n 1. (vCons a v \\<bullet>c vCons a v = (0::'a)) =\n    (vCons a v = 0\\<^sub>v (Suc n))", "by (auto simp: le_less add_nonneg_eq_0_iff zero_vec_Suc)"], ["proof (state)\nthis:\n  (vCons a v \\<bullet>c vCons a v = (0::'a)) =\n  (vCons a v = 0\\<^sub>v (Suc n))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma conjugate_square_greater_0_vec[simp]:\n  fixes v :: \"'a :: {conjugatable_ordered_ring,semiring_no_zero_divisors} vec\"\n  assumes \"v \\<in> carrier_vec n\"\n  shows \"v \\<bullet>c v > 0 \\<longleftrightarrow> v \\<noteq> 0\\<^sub>v n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((0::'a) < v \\<bullet>c v) = (v \\<noteq> 0\\<^sub>v n)", "using assms"], ["proof (prove)\nusing this:\n  v \\<in> carrier_vec n\n\ngoal (1 subgoal):\n 1. ((0::'a) < v \\<bullet>c v) = (v \\<noteq> 0\\<^sub>v n)", "by (auto simp: less_le)"], ["", "lemma vec_conjugate_rat[simp]: \"(conjugate :: rat vec \\<Rightarrow> rat vec) = (\\<lambda>x. x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. conjugate = (\\<lambda>x. x)", "by force"], ["", "lemma vec_conjugate_real[simp]: \"(conjugate :: real vec \\<Rightarrow> real vec) = (\\<lambda>x. x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. conjugate = (\\<lambda>x. x)", "by force"], ["", "end"]]}