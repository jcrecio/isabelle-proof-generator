{"file_name": "/home/qj213/afp-2021-10-22/thys/Jordan_Normal_Form/Gram_Schmidt.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Jordan_Normal_Form", "problem_names": ["lemma corthogonalD[elim]:\n  \"corthogonal vs \\<Longrightarrow> i < length vs \\<Longrightarrow> j < length vs \\<Longrightarrow>\n   vs ! i \\<bullet>c vs ! j = 0 \\<longleftrightarrow> i \\<noteq> j\"", "lemma corthogonalI[intro]:\n  \"(\\<And>i j. i < length vs \\<Longrightarrow> j < length vs \\<Longrightarrow> vs ! i \\<bullet>c vs ! j = 0 \\<longleftrightarrow> i \\<noteq> j) \\<Longrightarrow>\n   corthogonal vs\"", "lemma corthogonal_distinct: \"corthogonal us \\<Longrightarrow> distinct us\"", "lemma corthogonal_sort:\n  assumes dist': \"distinct us'\"\n      and mem: \"set us = set us'\"\n  shows \"corthogonal us \\<Longrightarrow> corthogonal us'\"", "lemma gram_schmidt_sub_eq:\n  \"rev (gram_schmidt_sub n us ws) = rev us @ gram_schmidt_sub2 n us ws\"", "lemma gram_schmidt_code[code]:\n  \"gram_schmidt n ws = gram_schmidt_sub2 n [] ws\"", "lemma adjuster_finsum:\n  assumes U: \"set us \\<subseteq> carrier_vec n\"\n    and dist: \"distinct (us :: 'a vec list)\"\n  shows \"adjuster n w us = finsum V (\\<lambda>u. -(w \\<bullet>c u)/(u \\<bullet>c u) \\<cdot>\\<^sub>v u) (set us)\"", "lemma adjuster_lincomb:\n  assumes w: \"(w :: 'a vec) : carrier_vec n\"\n    and us: \"set (us :: 'a vec list) \\<subseteq> carrier_vec n\"\n    and dist: \"distinct us\"\n  shows \"adjuster n w us = lincomb (\\<lambda>u. -(w \\<bullet>c u)/(u \\<bullet>c u)) (set us)\"\n    (is \"_ = lincomb ?a _\")", "lemma adjuster_in_span:\n  assumes w: \"(w :: 'a vec) : carrier_vec n\"\n    and us: \"set (us :: 'a vec list) \\<subseteq> carrier_vec n\"\n    and dist: \"distinct us\"\n  shows \"adjuster n w us : span (set us)\"", "lemma adjuster_carrier[simp]:\n  assumes w: \"(w :: 'a vec) : carrier_vec n\"\n    and us: \"set (us :: 'a vec list) \\<subseteq> carrier_vec n\"\n    and dist: \"distinct us\"\n  shows \"adjuster n w us : carrier_vec n\"", "lemma adjust_not_in_span:\n  assumes w[simp]: \"(w :: 'a vec) : carrier_vec n\"\n    and us: \"set (us :: 'a vec list) \\<subseteq> carrier_vec n\"\n    and dist: \"distinct us\"\n    and ind: \"w \\<notin> span (set us)\"\n  shows \"adjuster n w us + w \\<notin> span (set us)\"", "lemma adjust_not_mem:\n  assumes w[simp]: \"(w :: 'a vec) : carrier_vec n\"\n    and us: \"set (us :: 'a vec list) \\<subseteq> carrier_vec n\"\n    and dist: \"distinct us\"\n    and ind: \"w \\<notin> span (set us)\"\n  shows \"adjuster n w us + w \\<notin> set us\"", "lemma adjust_in_span:\n  assumes w[simp]: \"(w :: 'a vec) : carrier_vec n\"\n    and us: \"set (us :: 'a vec list) \\<subseteq> carrier_vec n\"\n    and dist: \"distinct us\"\n  shows \"adjuster n w us + w : span (insert w (set us))\" (is \"?v + _ : span ?U\")", "lemma adjust_not_lindep:\n  assumes w[simp]: \"(w :: 'a vec) : carrier_vec n\"\n    and us: \"set (us :: 'a vec list) \\<subseteq> carrier_vec n\"\n    and dist: \"distinct us\"\n    and wus: \"w \\<notin> span (set us)\"\n    and ind: \"~ lin_dep (set us)\"\n  shows \"~ lin_dep (insert (adjuster n w us + w) (set us))\"\n    (is \"~ _ (insert ?v _)\")", "lemma adjust_preserves_span:\n  assumes w[simp]: \"(w :: 'a vec) : carrier_vec n\"\n    and us: \"set (us :: 'a vec list) \\<subseteq> carrier_vec n\"\n    and dist: \"distinct us\"\n  shows \"w : span (set us) \\<longleftrightarrow> adjuster n w us + w : span (set us)\"\n    (is \"_ \\<longleftrightarrow> ?v + _ : _\")", "lemma in_span_adjust:\n  assumes w[simp]: \"(w :: 'a vec) : carrier_vec n\"\n    and us: \"set (us :: 'a vec list) \\<subseteq> carrier_vec n\"\n    and dist: \"distinct us\"\n  shows \"w : span (insert (adjuster n w us + w) (set us))\"\n    (is \"_ : span (insert ?v _)\")", "lemma adjust_zero:\n  assumes U: \"set (us :: 'a vec list) \\<subseteq> carrier_vec n\"\n    and orth: \"corthogonal us\"\n    and w[simp]: \"w : carrier_vec n\"\n    and i: \"i < length us\"\n  shows \"(adjuster n w us + w) \\<bullet>c us!i = 0\"", "lemma adjust_nonzero:\n  assumes U: \"set (us :: 'a vec list) \\<subseteq> carrier_vec n\"\n    and dist: \"distinct us\"\n    and w[simp]: \"w : carrier_vec n\"\n    and wsU: \"w \\<notin> span (set us)\"\n  shows \"adjuster n w us + w \\<noteq> 0\\<^sub>v n\" (is \"?a + _ \\<noteq> _\")", "lemma adjust_orthogonal:\n  assumes U: \"set (us :: 'a vec list) \\<subseteq> carrier_vec n\"\n    and orth: \"corthogonal us\"\n    and w[simp]: \"w : carrier_vec n\"\n    and wsU: \"w \\<notin> span (set us)\"\n  shows \"corthogonal ((adjuster n w us + w) # us)\"\n    (is \"corthogonal (?aw # _)\")", "lemma gram_schmidt_sub_span:\n  assumes w[simp]: \"w : carrier_vec n\"\n    and us: \"set us \\<subseteq> carrier_vec n\"\n    and dist: \"distinct us\"\n  shows \"span (set ((adjuster n w us + w) # us)) = span (set (w # us))\"\n  (is \"span (set (?v # _)) = span ?wU\")", "lemma gram_schmidt_sub_result:\n  assumes \"gram_schmidt_sub n us ws = us'\"\n    and \"set ws \\<subseteq> carrier_vec n\"\n    and \"set us \\<subseteq> carrier_vec n\"\n    and \"distinct (us @ ws)\"\n    and \"~ lin_dep (set (us @ ws))\"\n    and \"corthogonal us\"\n  shows \"set us' \\<subseteq> carrier_vec n \\<and>\n         distinct us' \\<and>\n         corthogonal us' \\<and>\n         span (set (us @ ws)) = span (set us') \\<and> length us' = length us + length ws\"", "lemma gram_schmidt_hd [simp]:\n  assumes [simp]: \"w : carrier_vec n\" shows \"hd (gram_schmidt n (w#ws)) = w\"", "theorem gram_schmidt_result:\n  assumes ws: \"set ws \\<subseteq> carrier_vec n\"\n    and dist: \"distinct ws\"\n    and ind: \"~ lin_dep (set ws)\"\n    and us: \"us = gram_schmidt n ws\"\n  shows \"span (set ws) = span (set us)\"\n    and \"corthogonal us\"\n    and \"set us \\<subseteq> carrier_vec n\"\n    and \"length us = length ws\"\n    and \"distinct us\""], "translations": [["", "lemma corthogonalD[elim]:\n  \"corthogonal vs \\<Longrightarrow> i < length vs \\<Longrightarrow> j < length vs \\<Longrightarrow>\n   vs ! i \\<bullet>c vs ! j = 0 \\<longleftrightarrow> i \\<noteq> j\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>corthogonal vs; i < length vs; j < length vs\\<rbrakk>\n    \\<Longrightarrow> (vs ! i \\<bullet>c vs ! j = (0::'a)) = (i \\<noteq> j)", "unfolding corthogonal_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>i<length vs.\n                \\<forall>j<length vs.\n                   (vs ! i \\<bullet>c vs ! j = (0::'a)) = (i \\<noteq> j);\n     i < length vs; j < length vs\\<rbrakk>\n    \\<Longrightarrow> (vs ! i \\<bullet>c vs ! j = (0::'a)) = (i \\<noteq> j)", "by auto"], ["", "lemma corthogonalI[intro]:\n  \"(\\<And>i j. i < length vs \\<Longrightarrow> j < length vs \\<Longrightarrow> vs ! i \\<bullet>c vs ! j = 0 \\<longleftrightarrow> i \\<noteq> j) \\<Longrightarrow>\n   corthogonal vs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>i j.\n        \\<lbrakk>i < length vs; j < length vs\\<rbrakk>\n        \\<Longrightarrow> (vs ! i \\<bullet>c vs ! j = (0::'a)) =\n                          (i \\<noteq> j)) \\<Longrightarrow>\n    corthogonal vs", "unfolding corthogonal_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>i j.\n        \\<lbrakk>i < length vs; j < length vs\\<rbrakk>\n        \\<Longrightarrow> (vs ! i \\<bullet>c vs ! j = (0::'a)) =\n                          (i \\<noteq> j)) \\<Longrightarrow>\n    \\<forall>i<length vs.\n       \\<forall>j<length vs.\n          (vs ! i \\<bullet>c vs ! j = (0::'a)) = (i \\<noteq> j)", "by auto"], ["", "lemma corthogonal_distinct: \"corthogonal us \\<Longrightarrow> distinct us\""], ["proof (prove)\ngoal (1 subgoal):\n 1. corthogonal us \\<Longrightarrow> distinct us", "proof (induct us)"], ["proof (state)\ngoal (2 subgoals):\n 1. corthogonal [] \\<Longrightarrow> distinct []\n 2. \\<And>a us.\n       \\<lbrakk>corthogonal us \\<Longrightarrow> distinct us;\n        corthogonal (a # us)\\<rbrakk>\n       \\<Longrightarrow> distinct (a # us)", "case (Cons u us)"], ["proof (state)\nthis:\n  corthogonal us \\<Longrightarrow> distinct us\n  corthogonal (u # us)\n\ngoal (2 subgoals):\n 1. corthogonal [] \\<Longrightarrow> distinct []\n 2. \\<And>a us.\n       \\<lbrakk>corthogonal us \\<Longrightarrow> distinct us;\n        corthogonal (a # us)\\<rbrakk>\n       \\<Longrightarrow> distinct (a # us)", "have \"u \\<notin> set us\""], ["proof (prove)\ngoal (1 subgoal):\n 1. u \\<notin> set us", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. u \\<in> set us \\<Longrightarrow> False", "assume \"u : set us\""], ["proof (state)\nthis:\n  u \\<in> set us\n\ngoal (1 subgoal):\n 1. u \\<in> set us \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  u \\<in> set us", "obtain j where uj: \"u = us!j\" and j: \"j < length us\""], ["proof (prove)\nusing this:\n  u \\<in> set us\n\ngoal (1 subgoal):\n 1. (\\<And>j.\n        \\<lbrakk>u = us ! j; j < length us\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using in_set_conv_nth"], ["proof (prove)\nusing this:\n  u \\<in> set us\n  (?x \\<in> set ?xs) = (\\<exists>i<length ?xs. ?xs ! i = ?x)\n\ngoal (1 subgoal):\n 1. (\\<And>j.\n        \\<lbrakk>u = us ! j; j < length us\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by metis"], ["proof (state)\nthis:\n  u = us ! j\n  j < length us\n\ngoal (1 subgoal):\n 1. u \\<in> set us \\<Longrightarrow> False", "hence j': \"j+1 < length (u#us)\""], ["proof (prove)\nusing this:\n  u = us ! j\n  j < length us\n\ngoal (1 subgoal):\n 1. j + 1 < length (u # us)", "by auto"], ["proof (state)\nthis:\n  j + 1 < length (u # us)\n\ngoal (1 subgoal):\n 1. u \\<in> set us \\<Longrightarrow> False", "have \"u \\<bullet>c us!j = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. u \\<bullet>c us ! j = (0::'a)", "using corthogonalD[OF Cons(2) _ j',of 0]"], ["proof (prove)\nusing this:\n  0 < length (u # us) \\<Longrightarrow>\n  ((u # us) ! 0 \\<bullet>c (u # us) ! (j + 1) = (0::'a)) =\n  (0 \\<noteq> j + 1)\n\ngoal (1 subgoal):\n 1. u \\<bullet>c us ! j = (0::'a)", "by auto"], ["proof (state)\nthis:\n  u \\<bullet>c us ! j = (0::'a)\n\ngoal (1 subgoal):\n 1. u \\<in> set us \\<Longrightarrow> False", "hence \"u \\<bullet>c u = 0\""], ["proof (prove)\nusing this:\n  u \\<bullet>c us ! j = (0::'a)\n\ngoal (1 subgoal):\n 1. u \\<bullet>c u = (0::'a)", "using uj"], ["proof (prove)\nusing this:\n  u \\<bullet>c us ! j = (0::'a)\n  u = us ! j\n\ngoal (1 subgoal):\n 1. u \\<bullet>c u = (0::'a)", "by simp"], ["proof (state)\nthis:\n  u \\<bullet>c u = (0::'a)\n\ngoal (1 subgoal):\n 1. u \\<in> set us \\<Longrightarrow> False", "thus False"], ["proof (prove)\nusing this:\n  u \\<bullet>c u = (0::'a)\n\ngoal (1 subgoal):\n 1. False", "using corthogonalD[OF Cons(2),of 0 0]"], ["proof (prove)\nusing this:\n  u \\<bullet>c u = (0::'a)\n  \\<lbrakk>0 < length (u # us); 0 < length (u # us)\\<rbrakk>\n  \\<Longrightarrow> ((u # us) ! 0 \\<bullet>c (u # us) ! 0 = (0::'a)) =\n                    (0 \\<noteq> 0)\n\ngoal (1 subgoal):\n 1. False", "by auto"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  u \\<notin> set us\n\ngoal (2 subgoals):\n 1. corthogonal [] \\<Longrightarrow> distinct []\n 2. \\<And>a us.\n       \\<lbrakk>corthogonal us \\<Longrightarrow> distinct us;\n        corthogonal (a # us)\\<rbrakk>\n       \\<Longrightarrow> distinct (a # us)", "moreover"], ["proof (state)\nthis:\n  u \\<notin> set us\n\ngoal (2 subgoals):\n 1. corthogonal [] \\<Longrightarrow> distinct []\n 2. \\<And>a us.\n       \\<lbrakk>corthogonal us \\<Longrightarrow> distinct us;\n        corthogonal (a # us)\\<rbrakk>\n       \\<Longrightarrow> distinct (a # us)", "have \"distinct us\""], ["proof (prove)\ngoal (1 subgoal):\n 1. distinct us", "proof (rule Cons(1),intro corthogonalI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>i < length us; j < length us\\<rbrakk>\n       \\<Longrightarrow> (us ! i \\<bullet>c us ! j = (0::'a)) =\n                         (i \\<noteq> j)", "fix i j"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>i < length us; j < length us\\<rbrakk>\n       \\<Longrightarrow> (us ! i \\<bullet>c us ! j = (0::'a)) =\n                         (i \\<noteq> j)", "assume \"i < length (us)\" \"j < length (us)\""], ["proof (state)\nthis:\n  i < length us\n  j < length us\n\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>i < length us; j < length us\\<rbrakk>\n       \\<Longrightarrow> (us ! i \\<bullet>c us ! j = (0::'a)) =\n                         (i \\<noteq> j)", "hence len: \"i+1 < length (u#us)\" \"j+1 < length (u#us)\""], ["proof (prove)\nusing this:\n  i < length us\n  j < length us\n\ngoal (1 subgoal):\n 1. i + 1 < length (u # us) &&& j + 1 < length (u # us)", "by auto"], ["proof (state)\nthis:\n  i + 1 < length (u # us)\n  j + 1 < length (u # us)\n\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>i < length us; j < length us\\<rbrakk>\n       \\<Longrightarrow> (us ! i \\<bullet>c us ! j = (0::'a)) =\n                         (i \\<noteq> j)", "show \"(us!i \\<bullet>c us!j = 0) = (i\\<noteq>j)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (us ! i \\<bullet>c us ! j = (0::'a)) = (i \\<noteq> j)", "using corthogonalD[OF Cons(2) len]"], ["proof (prove)\nusing this:\n  ((u # us) ! (i + 1) \\<bullet>c (u # us) ! (j + 1) = (0::'a)) =\n  (i + 1 \\<noteq> j + 1)\n\ngoal (1 subgoal):\n 1. (us ! i \\<bullet>c us ! j = (0::'a)) = (i \\<noteq> j)", "by simp"], ["proof (state)\nthis:\n  (us ! i \\<bullet>c us ! j = (0::'a)) = (i \\<noteq> j)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  distinct us\n\ngoal (2 subgoals):\n 1. corthogonal [] \\<Longrightarrow> distinct []\n 2. \\<And>a us.\n       \\<lbrakk>corthogonal us \\<Longrightarrow> distinct us;\n        corthogonal (a # us)\\<rbrakk>\n       \\<Longrightarrow> distinct (a # us)", "ultimately"], ["proof (chain)\npicking this:\n  u \\<notin> set us\n  distinct us", "show ?case"], ["proof (prove)\nusing this:\n  u \\<notin> set us\n  distinct us\n\ngoal (1 subgoal):\n 1. distinct (u # us)", "by simp"], ["proof (state)\nthis:\n  distinct (u # us)\n\ngoal (1 subgoal):\n 1. corthogonal [] \\<Longrightarrow> distinct []", "qed simp"], ["", "lemma corthogonal_sort:\n  assumes dist': \"distinct us'\"\n      and mem: \"set us = set us'\"\n  shows \"corthogonal us \\<Longrightarrow> corthogonal us'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. corthogonal us \\<Longrightarrow> corthogonal us'", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>corthogonal us; i < length us'; j < length us'\\<rbrakk>\n       \\<Longrightarrow> (us' ! i \\<bullet>c us' ! j = (0::'a)) =\n                         (i \\<noteq> j)", "assume orth: \"corthogonal us\""], ["proof (state)\nthis:\n  corthogonal us\n\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>corthogonal us; i < length us'; j < length us'\\<rbrakk>\n       \\<Longrightarrow> (us' ! i \\<bullet>c us' ! j = (0::'a)) =\n                         (i \\<noteq> j)", "hence dist: \"distinct us\""], ["proof (prove)\nusing this:\n  corthogonal us\n\ngoal (1 subgoal):\n 1. distinct us", "using corthogonal_distinct"], ["proof (prove)\nusing this:\n  corthogonal us\n  corthogonal ?us \\<Longrightarrow> distinct ?us\n\ngoal (1 subgoal):\n 1. distinct us", "by auto"], ["proof (state)\nthis:\n  distinct us\n\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>corthogonal us; i < length us'; j < length us'\\<rbrakk>\n       \\<Longrightarrow> (us' ! i \\<bullet>c us' ! j = (0::'a)) =\n                         (i \\<noteq> j)", "fix i' j'"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>corthogonal us; i < length us'; j < length us'\\<rbrakk>\n       \\<Longrightarrow> (us' ! i \\<bullet>c us' ! j = (0::'a)) =\n                         (i \\<noteq> j)", "assume i': \"i' < length us'\" and j': \"j' < length us'\""], ["proof (state)\nthis:\n  i' < length us'\n  j' < length us'\n\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>corthogonal us; i < length us'; j < length us'\\<rbrakk>\n       \\<Longrightarrow> (us' ! i \\<bullet>c us' ! j = (0::'a)) =\n                         (i \\<noteq> j)", "obtain i where ii': \"us!i = us'!i'\" and i: \"i < length us\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>i.\n        \\<lbrakk>us ! i = us' ! i'; i < length us\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using mem i' in_set_conv_nth"], ["proof (prove)\nusing this:\n  set us = set us'\n  i' < length us'\n  (?x \\<in> set ?xs) = (\\<exists>i<length ?xs. ?xs ! i = ?x)\n\ngoal (1 subgoal):\n 1. (\\<And>i.\n        \\<lbrakk>us ! i = us' ! i'; i < length us\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by metis"], ["proof (state)\nthis:\n  us ! i = us' ! i'\n  i < length us\n\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>corthogonal us; i < length us'; j < length us'\\<rbrakk>\n       \\<Longrightarrow> (us' ! i \\<bullet>c us' ! j = (0::'a)) =\n                         (i \\<noteq> j)", "obtain j where jj': \"us!j = us'!j'\" and j: \"j < length us\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>j.\n        \\<lbrakk>us ! j = us' ! j'; j < length us\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using mem j' in_set_conv_nth"], ["proof (prove)\nusing this:\n  set us = set us'\n  j' < length us'\n  (?x \\<in> set ?xs) = (\\<exists>i<length ?xs. ?xs ! i = ?x)\n\ngoal (1 subgoal):\n 1. (\\<And>j.\n        \\<lbrakk>us ! j = us' ! j'; j < length us\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by metis"], ["proof (state)\nthis:\n  us ! j = us' ! j'\n  j < length us\n\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>corthogonal us; i < length us'; j < length us'\\<rbrakk>\n       \\<Longrightarrow> (us' ! i \\<bullet>c us' ! j = (0::'a)) =\n                         (i \\<noteq> j)", "from corthogonalD[OF orth i j]"], ["proof (chain)\npicking this:\n  (us ! i \\<bullet>c us ! j = (0::'a)) = (i \\<noteq> j)", "have \"(us!i \\<bullet>c us!j = 0) = (i \\<noteq> j)\""], ["proof (prove)\nusing this:\n  (us ! i \\<bullet>c us ! j = (0::'a)) = (i \\<noteq> j)\n\ngoal (1 subgoal):\n 1. (us ! i \\<bullet>c us ! j = (0::'a)) = (i \\<noteq> j)", "."], ["proof (state)\nthis:\n  (us ! i \\<bullet>c us ! j = (0::'a)) = (i \\<noteq> j)\n\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>corthogonal us; i < length us'; j < length us'\\<rbrakk>\n       \\<Longrightarrow> (us' ! i \\<bullet>c us' ! j = (0::'a)) =\n                         (i \\<noteq> j)", "hence \"(us'!i' \\<bullet>c us'!j' = 0) = (i \\<noteq> j)\""], ["proof (prove)\nusing this:\n  (us ! i \\<bullet>c us ! j = (0::'a)) = (i \\<noteq> j)\n\ngoal (1 subgoal):\n 1. (us' ! i' \\<bullet>c us' ! j' = (0::'a)) = (i \\<noteq> j)", "using ii' jj'"], ["proof (prove)\nusing this:\n  (us ! i \\<bullet>c us ! j = (0::'a)) = (i \\<noteq> j)\n  us ! i = us' ! i'\n  us ! j = us' ! j'\n\ngoal (1 subgoal):\n 1. (us' ! i' \\<bullet>c us' ! j' = (0::'a)) = (i \\<noteq> j)", "by auto"], ["proof (state)\nthis:\n  (us' ! i' \\<bullet>c us' ! j' = (0::'a)) = (i \\<noteq> j)\n\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>corthogonal us; i < length us'; j < length us'\\<rbrakk>\n       \\<Longrightarrow> (us' ! i \\<bullet>c us' ! j = (0::'a)) =\n                         (i \\<noteq> j)", "also"], ["proof (state)\nthis:\n  (us' ! i' \\<bullet>c us' ! j' = (0::'a)) = (i \\<noteq> j)\n\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>corthogonal us; i < length us'; j < length us'\\<rbrakk>\n       \\<Longrightarrow> (us' ! i \\<bullet>c us' ! j = (0::'a)) =\n                         (i \\<noteq> j)", "have \"... = (us!i \\<noteq> us!j)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (i \\<noteq> j) = (us ! i \\<noteq> us ! j)", "using nth_eq_iff_index_eq dist i j"], ["proof (prove)\nusing this:\n  \\<lbrakk>distinct ?xs; ?i < length ?xs; ?j < length ?xs\\<rbrakk>\n  \\<Longrightarrow> (?xs ! ?i = ?xs ! ?j) = (?i = ?j)\n  distinct us\n  i < length us\n  j < length us\n\ngoal (1 subgoal):\n 1. (i \\<noteq> j) = (us ! i \\<noteq> us ! j)", "by auto"], ["proof (state)\nthis:\n  (i \\<noteq> j) = (us ! i \\<noteq> us ! j)\n\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>corthogonal us; i < length us'; j < length us'\\<rbrakk>\n       \\<Longrightarrow> (us' ! i \\<bullet>c us' ! j = (0::'a)) =\n                         (i \\<noteq> j)", "also"], ["proof (state)\nthis:\n  (i \\<noteq> j) = (us ! i \\<noteq> us ! j)\n\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>corthogonal us; i < length us'; j < length us'\\<rbrakk>\n       \\<Longrightarrow> (us' ! i \\<bullet>c us' ! j = (0::'a)) =\n                         (i \\<noteq> j)", "have \"... = (us'!i' \\<noteq> us'!j')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (us ! i \\<noteq> us ! j) = (us' ! i' \\<noteq> us' ! j')", "using ii' jj'"], ["proof (prove)\nusing this:\n  us ! i = us' ! i'\n  us ! j = us' ! j'\n\ngoal (1 subgoal):\n 1. (us ! i \\<noteq> us ! j) = (us' ! i' \\<noteq> us' ! j')", "by auto"], ["proof (state)\nthis:\n  (us ! i \\<noteq> us ! j) = (us' ! i' \\<noteq> us' ! j')\n\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>corthogonal us; i < length us'; j < length us'\\<rbrakk>\n       \\<Longrightarrow> (us' ! i \\<bullet>c us' ! j = (0::'a)) =\n                         (i \\<noteq> j)", "also"], ["proof (state)\nthis:\n  (us ! i \\<noteq> us ! j) = (us' ! i' \\<noteq> us' ! j')\n\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>corthogonal us; i < length us'; j < length us'\\<rbrakk>\n       \\<Longrightarrow> (us' ! i \\<bullet>c us' ! j = (0::'a)) =\n                         (i \\<noteq> j)", "have \"... = (i' \\<noteq> j')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (us' ! i' \\<noteq> us' ! j') = (i' \\<noteq> j')", "using nth_eq_iff_index_eq dist' i' j'"], ["proof (prove)\nusing this:\n  \\<lbrakk>distinct ?xs; ?i < length ?xs; ?j < length ?xs\\<rbrakk>\n  \\<Longrightarrow> (?xs ! ?i = ?xs ! ?j) = (?i = ?j)\n  distinct us'\n  i' < length us'\n  j' < length us'\n\ngoal (1 subgoal):\n 1. (us' ! i' \\<noteq> us' ! j') = (i' \\<noteq> j')", "by auto"], ["proof (state)\nthis:\n  (us' ! i' \\<noteq> us' ! j') = (i' \\<noteq> j')\n\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>corthogonal us; i < length us'; j < length us'\\<rbrakk>\n       \\<Longrightarrow> (us' ! i \\<bullet>c us' ! j = (0::'a)) =\n                         (i \\<noteq> j)", "finally"], ["proof (chain)\npicking this:\n  (us' ! i' \\<bullet>c us' ! j' = (0::'a)) = (i' \\<noteq> j')", "show \"(us'!i' \\<bullet>c us'!j' = 0) = (i' \\<noteq> j')\""], ["proof (prove)\nusing this:\n  (us' ! i' \\<bullet>c us' ! j' = (0::'a)) = (i' \\<noteq> j')\n\ngoal (1 subgoal):\n 1. (us' ! i' \\<bullet>c us' ! j' = (0::'a)) = (i' \\<noteq> j')", "."], ["proof (state)\nthis:\n  (us' ! i' \\<bullet>c us' ! j' = (0::'a)) = (i' \\<noteq> j')\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection\\<open>The Algorithm\\<close>"], ["", "fun adjuster :: \"nat \\<Rightarrow> 'a :: conjugatable_field vec \\<Rightarrow> 'a vec list \\<Rightarrow> 'a vec\"\n  where \"adjuster n w [] = 0\\<^sub>v n\"\n    |  \"adjuster n w (u#us) = -(w \\<bullet>c u)/(u \\<bullet>c u) \\<cdot>\\<^sub>v u + adjuster n w us\""], ["", "text \\<open>\n  The following formulation is easier to analyze,\n  but outputs of the subroutine should be properly reversed.\n\\<close>"], ["", "fun gram_schmidt_sub\n  where \"gram_schmidt_sub n us [] = us\"\n  | \"gram_schmidt_sub n us (w # ws) =\n     gram_schmidt_sub n ((adjuster n w us + w) # us) ws\""], ["", "definition gram_schmidt :: \"nat \\<Rightarrow> 'a :: conjugatable_field vec list \\<Rightarrow> 'a vec list\"\n  where \"gram_schmidt n ws = rev (gram_schmidt_sub n [] ws)\""], ["", "text \\<open>\n  The following formulation requires no reversal.\n\\<close>"], ["", "fun gram_schmidt_sub2\n  where \"gram_schmidt_sub2 n us [] = []\"\n  | \"gram_schmidt_sub2 n us (w # ws) =\n     (let u = adjuster n w us + w in\n      u # gram_schmidt_sub2 n (u # us) ws)\""], ["", "lemma gram_schmidt_sub_eq:\n  \"rev (gram_schmidt_sub n us ws) = rev us @ gram_schmidt_sub2 n us ws\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rev (gram_schmidt_sub n us ws) = rev us @ gram_schmidt_sub2 n us ws", "by (induct ws arbitrary:us, auto simp:Let_def)"], ["", "lemma gram_schmidt_code[code]:\n  \"gram_schmidt n ws = gram_schmidt_sub2 n [] ws\""], ["proof (prove)\ngoal (1 subgoal):\n 1. gram_schmidt n ws = gram_schmidt_sub2 n [] ws", "unfolding gram_schmidt_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. rev (gram_schmidt_sub n [] ws) = gram_schmidt_sub2 n [] ws", "apply(subst gram_schmidt_sub_eq)"], ["proof (prove)\ngoal (1 subgoal):\n 1. rev [] @ gram_schmidt_sub2 n [] ws = gram_schmidt_sub2 n [] ws", "by simp"], ["", "subsection \\<open>Properties of the Algorithms\\<close>"], ["", "locale cof_vec_space = vec_space f_ty for\n  f_ty :: \"'a :: conjugatable_ordered_field itself\"\nbegin"], ["", "lemma adjuster_finsum:\n  assumes U: \"set us \\<subseteq> carrier_vec n\"\n    and dist: \"distinct (us :: 'a vec list)\"\n  shows \"adjuster n w us = finsum V (\\<lambda>u. -(w \\<bullet>c u)/(u \\<bullet>c u) \\<cdot>\\<^sub>v u) (set us)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. adjuster n w us =\n    (\\<Oplus>\\<^bsub>V\\<^esub>u\\<in>set us. - (w \\<bullet>c u) /\n      (u \\<bullet>c u) \\<cdot>\\<^sub>v\n      u)", "using assms"], ["proof (prove)\nusing this:\n  set us \\<subseteq> carrier_vec n\n  distinct us\n\ngoal (1 subgoal):\n 1. adjuster n w us =\n    (\\<Oplus>\\<^bsub>V\\<^esub>u\\<in>set us. - (w \\<bullet>c u) /\n      (u \\<bullet>c u) \\<cdot>\\<^sub>v\n      u)", "proof (induct us)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>set [] \\<subseteq> carrier_vec n; distinct []\\<rbrakk>\n    \\<Longrightarrow> adjuster n w [] =\n                      (\\<Oplus>\\<^bsub>V\\<^esub>u\\<in>set\n                 []. - (w \\<bullet>c u) / (u \\<bullet>c u) \\<cdot>\\<^sub>v\n                     u)\n 2. \\<And>a us.\n       \\<lbrakk>\\<lbrakk>set us \\<subseteq> carrier_vec n;\n                 distinct us\\<rbrakk>\n                \\<Longrightarrow> adjuster n w us =\n                                  (\\<Oplus>\\<^bsub>V\\<^esub>u\\<in>set\n                             us. - (w \\<bullet>c u) /\n                                 (u \\<bullet>c u) \\<cdot>\\<^sub>v\n                                 u);\n        set (a # us) \\<subseteq> carrier_vec n; distinct (a # us)\\<rbrakk>\n       \\<Longrightarrow> adjuster n w (a # us) =\n                         (\\<Oplus>\\<^bsub>V\\<^esub>u\\<in>set\n                    (a #\n                     us). - (w \\<bullet>c u) /\n                          (u \\<bullet>c u) \\<cdot>\\<^sub>v\n                          u)", "case Cons"], ["proof (state)\nthis:\n  \\<lbrakk>set us_ \\<subseteq> carrier_vec n; distinct us_\\<rbrakk>\n  \\<Longrightarrow> adjuster n w us_ =\n                    (\\<Oplus>\\<^bsub>V\\<^esub>u\\<in>set\n               us_. - (w \\<bullet>c u) / (u \\<bullet>c u) \\<cdot>\\<^sub>v u)\n  set (a_ # us_) \\<subseteq> carrier_vec n\n  distinct (a_ # us_)\n\ngoal (2 subgoals):\n 1. \\<lbrakk>set [] \\<subseteq> carrier_vec n; distinct []\\<rbrakk>\n    \\<Longrightarrow> adjuster n w [] =\n                      (\\<Oplus>\\<^bsub>V\\<^esub>u\\<in>set\n                 []. - (w \\<bullet>c u) / (u \\<bullet>c u) \\<cdot>\\<^sub>v\n                     u)\n 2. \\<And>a us.\n       \\<lbrakk>\\<lbrakk>set us \\<subseteq> carrier_vec n;\n                 distinct us\\<rbrakk>\n                \\<Longrightarrow> adjuster n w us =\n                                  (\\<Oplus>\\<^bsub>V\\<^esub>u\\<in>set\n                             us. - (w \\<bullet>c u) /\n                                 (u \\<bullet>c u) \\<cdot>\\<^sub>v\n                                 u);\n        set (a # us) \\<subseteq> carrier_vec n; distinct (a # us)\\<rbrakk>\n       \\<Longrightarrow> adjuster n w (a # us) =\n                         (\\<Oplus>\\<^bsub>V\\<^esub>u\\<in>set\n                    (a #\n                     us). - (w \\<bullet>c u) /\n                          (u \\<bullet>c u) \\<cdot>\\<^sub>v\n                          u)", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. adjuster n w (a_ # us_) =\n    (\\<Oplus>\\<^bsub>V\\<^esub>u\\<in>set (a_ #\n   us_). - (w \\<bullet>c u) / (u \\<bullet>c u) \\<cdot>\\<^sub>v u)", "unfolding set_simps"], ["proof (prove)\ngoal (1 subgoal):\n 1. adjuster n w (a_ # us_) =\n    (\\<Oplus>\\<^bsub>V\\<^esub>u\\<in>insert a_\n                                     (set\n us_). - (w \\<bullet>c u) / (u \\<bullet>c u) \\<cdot>\\<^sub>v u)", "by (subst finsum_insert[OF finite_set], insert Cons, auto)"], ["proof (state)\nthis:\n  adjuster n w (a_ # us_) =\n  (\\<Oplus>\\<^bsub>V\\<^esub>u\\<in>set (a_ #\n us_). - (w \\<bullet>c u) / (u \\<bullet>c u) \\<cdot>\\<^sub>v u)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>set [] \\<subseteq> carrier_vec n; distinct []\\<rbrakk>\n    \\<Longrightarrow> adjuster n w [] =\n                      (\\<Oplus>\\<^bsub>V\\<^esub>u\\<in>set\n                 []. - (w \\<bullet>c u) / (u \\<bullet>c u) \\<cdot>\\<^sub>v\n                     u)", "qed simp"], ["", "lemma adjuster_lincomb:\n  assumes w: \"(w :: 'a vec) : carrier_vec n\"\n    and us: \"set (us :: 'a vec list) \\<subseteq> carrier_vec n\"\n    and dist: \"distinct us\"\n  shows \"adjuster n w us = lincomb (\\<lambda>u. -(w \\<bullet>c u)/(u \\<bullet>c u)) (set us)\"\n    (is \"_ = lincomb ?a _\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. adjuster n w us =\n    lincomb (\\<lambda>u. - (w \\<bullet>c u) / (u \\<bullet>c u)) (set us)", "using us dist"], ["proof (prove)\nusing this:\n  set us \\<subseteq> carrier_vec n\n  distinct us\n\ngoal (1 subgoal):\n 1. adjuster n w us =\n    lincomb (\\<lambda>u. - (w \\<bullet>c u) / (u \\<bullet>c u)) (set us)", "unfolding lincomb_def"], ["proof (prove)\nusing this:\n  set us \\<subseteq> carrier_vec n\n  distinct us\n\ngoal (1 subgoal):\n 1. adjuster n w us =\n    (\\<Oplus>\\<^bsub>V\\<^esub>v\\<in>set us. - (w \\<bullet>c v) /\n      (v \\<bullet>c v) \\<cdot>\\<^sub>v\n      v)", "proof (induct us)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>set [] \\<subseteq> carrier_vec n; distinct []\\<rbrakk>\n    \\<Longrightarrow> adjuster n w [] =\n                      (\\<Oplus>\\<^bsub>V\\<^esub>v\\<in>set\n                 []. - (w \\<bullet>c v) / (v \\<bullet>c v) \\<cdot>\\<^sub>v\n                     v)\n 2. \\<And>a us.\n       \\<lbrakk>\\<lbrakk>set us \\<subseteq> carrier_vec n;\n                 distinct us\\<rbrakk>\n                \\<Longrightarrow> adjuster n w us =\n                                  (\\<Oplus>\\<^bsub>V\\<^esub>v\\<in>set\n                             us. - (w \\<bullet>c v) /\n                                 (v \\<bullet>c v) \\<cdot>\\<^sub>v\n                                 v);\n        set (a # us) \\<subseteq> carrier_vec n; distinct (a # us)\\<rbrakk>\n       \\<Longrightarrow> adjuster n w (a # us) =\n                         (\\<Oplus>\\<^bsub>V\\<^esub>v\\<in>set\n                    (a #\n                     us). - (w \\<bullet>c v) /\n                          (v \\<bullet>c v) \\<cdot>\\<^sub>v\n                          v)", "case (Cons u us)"], ["proof (state)\nthis:\n  \\<lbrakk>set us \\<subseteq> carrier_vec n; distinct us\\<rbrakk>\n  \\<Longrightarrow> adjuster n w us =\n                    (\\<Oplus>\\<^bsub>V\\<^esub>v\\<in>set\n               us. - (w \\<bullet>c v) / (v \\<bullet>c v) \\<cdot>\\<^sub>v v)\n  set (u # us) \\<subseteq> carrier_vec n\n  distinct (u # us)\n\ngoal (2 subgoals):\n 1. \\<lbrakk>set [] \\<subseteq> carrier_vec n; distinct []\\<rbrakk>\n    \\<Longrightarrow> adjuster n w [] =\n                      (\\<Oplus>\\<^bsub>V\\<^esub>v\\<in>set\n                 []. - (w \\<bullet>c v) / (v \\<bullet>c v) \\<cdot>\\<^sub>v\n                     v)\n 2. \\<And>a us.\n       \\<lbrakk>\\<lbrakk>set us \\<subseteq> carrier_vec n;\n                 distinct us\\<rbrakk>\n                \\<Longrightarrow> adjuster n w us =\n                                  (\\<Oplus>\\<^bsub>V\\<^esub>v\\<in>set\n                             us. - (w \\<bullet>c v) /\n                                 (v \\<bullet>c v) \\<cdot>\\<^sub>v\n                                 v);\n        set (a # us) \\<subseteq> carrier_vec n; distinct (a # us)\\<rbrakk>\n       \\<Longrightarrow> adjuster n w (a # us) =\n                         (\\<Oplus>\\<^bsub>V\\<^esub>v\\<in>set\n                    (a #\n                     us). - (w \\<bullet>c v) /\n                          (v \\<bullet>c v) \\<cdot>\\<^sub>v\n                          v)", "let ?f = \"\\<lambda>u. ?a u \\<cdot>\\<^sub>v u\""], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>set [] \\<subseteq> carrier_vec n; distinct []\\<rbrakk>\n    \\<Longrightarrow> adjuster n w [] =\n                      (\\<Oplus>\\<^bsub>V\\<^esub>v\\<in>set\n                 []. - (w \\<bullet>c v) / (v \\<bullet>c v) \\<cdot>\\<^sub>v\n                     v)\n 2. \\<And>a us.\n       \\<lbrakk>\\<lbrakk>set us \\<subseteq> carrier_vec n;\n                 distinct us\\<rbrakk>\n                \\<Longrightarrow> adjuster n w us =\n                                  (\\<Oplus>\\<^bsub>V\\<^esub>v\\<in>set\n                             us. - (w \\<bullet>c v) /\n                                 (v \\<bullet>c v) \\<cdot>\\<^sub>v\n                                 v);\n        set (a # us) \\<subseteq> carrier_vec n; distinct (a # us)\\<rbrakk>\n       \\<Longrightarrow> adjuster n w (a # us) =\n                         (\\<Oplus>\\<^bsub>V\\<^esub>v\\<in>set\n                    (a #\n                     us). - (w \\<bullet>c v) /\n                          (v \\<bullet>c v) \\<cdot>\\<^sub>v\n                          v)", "have \"?f : (set us) \\<rightarrow> carrier_vec n\" and \"?f u : carrier_vec n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>u. - (w \\<bullet>c u) / (u \\<bullet>c u) \\<cdot>\\<^sub>v u)\n    \\<in> set us \\<rightarrow> carrier_vec n &&&\n    - (w \\<bullet>c u) / (u \\<bullet>c u) \\<cdot>\\<^sub>v u\n    \\<in> carrier_vec n", "using w Cons"], ["proof (prove)\nusing this:\n  w \\<in> carrier_vec n\n  \\<lbrakk>set us \\<subseteq> carrier_vec n; distinct us\\<rbrakk>\n  \\<Longrightarrow> adjuster n w us =\n                    (\\<Oplus>\\<^bsub>V\\<^esub>v\\<in>set\n               us. - (w \\<bullet>c v) / (v \\<bullet>c v) \\<cdot>\\<^sub>v v)\n  set (u # us) \\<subseteq> carrier_vec n\n  distinct (u # us)\n\ngoal (1 subgoal):\n 1. (\\<lambda>u. - (w \\<bullet>c u) / (u \\<bullet>c u) \\<cdot>\\<^sub>v u)\n    \\<in> set us \\<rightarrow> carrier_vec n &&&\n    - (w \\<bullet>c u) / (u \\<bullet>c u) \\<cdot>\\<^sub>v u\n    \\<in> carrier_vec n", "by auto"], ["proof (state)\nthis:\n  (\\<lambda>u. - (w \\<bullet>c u) / (u \\<bullet>c u) \\<cdot>\\<^sub>v u)\n  \\<in> set us \\<rightarrow> carrier_vec n\n  - (w \\<bullet>c u) / (u \\<bullet>c u) \\<cdot>\\<^sub>v u\n  \\<in> carrier_vec n\n\ngoal (2 subgoals):\n 1. \\<lbrakk>set [] \\<subseteq> carrier_vec n; distinct []\\<rbrakk>\n    \\<Longrightarrow> adjuster n w [] =\n                      (\\<Oplus>\\<^bsub>V\\<^esub>v\\<in>set\n                 []. - (w \\<bullet>c v) / (v \\<bullet>c v) \\<cdot>\\<^sub>v\n                     v)\n 2. \\<And>a us.\n       \\<lbrakk>\\<lbrakk>set us \\<subseteq> carrier_vec n;\n                 distinct us\\<rbrakk>\n                \\<Longrightarrow> adjuster n w us =\n                                  (\\<Oplus>\\<^bsub>V\\<^esub>v\\<in>set\n                             us. - (w \\<bullet>c v) /\n                                 (v \\<bullet>c v) \\<cdot>\\<^sub>v\n                                 v);\n        set (a # us) \\<subseteq> carrier_vec n; distinct (a # us)\\<rbrakk>\n       \\<Longrightarrow> adjuster n w (a # us) =\n                         (\\<Oplus>\\<^bsub>V\\<^esub>v\\<in>set\n                    (a #\n                     us). - (w \\<bullet>c v) /\n                          (v \\<bullet>c v) \\<cdot>\\<^sub>v\n                          v)", "moreover"], ["proof (state)\nthis:\n  (\\<lambda>u. - (w \\<bullet>c u) / (u \\<bullet>c u) \\<cdot>\\<^sub>v u)\n  \\<in> set us \\<rightarrow> carrier_vec n\n  - (w \\<bullet>c u) / (u \\<bullet>c u) \\<cdot>\\<^sub>v u\n  \\<in> carrier_vec n\n\ngoal (2 subgoals):\n 1. \\<lbrakk>set [] \\<subseteq> carrier_vec n; distinct []\\<rbrakk>\n    \\<Longrightarrow> adjuster n w [] =\n                      (\\<Oplus>\\<^bsub>V\\<^esub>v\\<in>set\n                 []. - (w \\<bullet>c v) / (v \\<bullet>c v) \\<cdot>\\<^sub>v\n                     v)\n 2. \\<And>a us.\n       \\<lbrakk>\\<lbrakk>set us \\<subseteq> carrier_vec n;\n                 distinct us\\<rbrakk>\n                \\<Longrightarrow> adjuster n w us =\n                                  (\\<Oplus>\\<^bsub>V\\<^esub>v\\<in>set\n                             us. - (w \\<bullet>c v) /\n                                 (v \\<bullet>c v) \\<cdot>\\<^sub>v\n                                 v);\n        set (a # us) \\<subseteq> carrier_vec n; distinct (a # us)\\<rbrakk>\n       \\<Longrightarrow> adjuster n w (a # us) =\n                         (\\<Oplus>\\<^bsub>V\\<^esub>v\\<in>set\n                    (a #\n                     us). - (w \\<bullet>c v) /\n                          (v \\<bullet>c v) \\<cdot>\\<^sub>v\n                          v)", "have \"u \\<notin> set us\""], ["proof (prove)\ngoal (1 subgoal):\n 1. u \\<notin> set us", "using Cons"], ["proof (prove)\nusing this:\n  \\<lbrakk>set us \\<subseteq> carrier_vec n; distinct us\\<rbrakk>\n  \\<Longrightarrow> adjuster n w us =\n                    (\\<Oplus>\\<^bsub>V\\<^esub>v\\<in>set\n               us. - (w \\<bullet>c v) / (v \\<bullet>c v) \\<cdot>\\<^sub>v v)\n  set (u # us) \\<subseteq> carrier_vec n\n  distinct (u # us)\n\ngoal (1 subgoal):\n 1. u \\<notin> set us", "by auto"], ["proof (state)\nthis:\n  u \\<notin> set us\n\ngoal (2 subgoals):\n 1. \\<lbrakk>set [] \\<subseteq> carrier_vec n; distinct []\\<rbrakk>\n    \\<Longrightarrow> adjuster n w [] =\n                      (\\<Oplus>\\<^bsub>V\\<^esub>v\\<in>set\n                 []. - (w \\<bullet>c v) / (v \\<bullet>c v) \\<cdot>\\<^sub>v\n                     v)\n 2. \\<And>a us.\n       \\<lbrakk>\\<lbrakk>set us \\<subseteq> carrier_vec n;\n                 distinct us\\<rbrakk>\n                \\<Longrightarrow> adjuster n w us =\n                                  (\\<Oplus>\\<^bsub>V\\<^esub>v\\<in>set\n                             us. - (w \\<bullet>c v) /\n                                 (v \\<bullet>c v) \\<cdot>\\<^sub>v\n                                 v);\n        set (a # us) \\<subseteq> carrier_vec n; distinct (a # us)\\<rbrakk>\n       \\<Longrightarrow> adjuster n w (a # us) =\n                         (\\<Oplus>\\<^bsub>V\\<^esub>v\\<in>set\n                    (a #\n                     us). - (w \\<bullet>c v) /\n                          (v \\<bullet>c v) \\<cdot>\\<^sub>v\n                          v)", "ultimately"], ["proof (chain)\npicking this:\n  (\\<lambda>u. - (w \\<bullet>c u) / (u \\<bullet>c u) \\<cdot>\\<^sub>v u)\n  \\<in> set us \\<rightarrow> carrier_vec n\n  - (w \\<bullet>c u) / (u \\<bullet>c u) \\<cdot>\\<^sub>v u\n  \\<in> carrier_vec n\n  u \\<notin> set us", "show ?case"], ["proof (prove)\nusing this:\n  (\\<lambda>u. - (w \\<bullet>c u) / (u \\<bullet>c u) \\<cdot>\\<^sub>v u)\n  \\<in> set us \\<rightarrow> carrier_vec n\n  - (w \\<bullet>c u) / (u \\<bullet>c u) \\<cdot>\\<^sub>v u\n  \\<in> carrier_vec n\n  u \\<notin> set us\n\ngoal (1 subgoal):\n 1. adjuster n w (u # us) =\n    (\\<Oplus>\\<^bsub>V\\<^esub>v\\<in>set (u #\n   us). - (w \\<bullet>c v) / (v \\<bullet>c v) \\<cdot>\\<^sub>v v)", "unfolding adjuster.simps"], ["proof (prove)\nusing this:\n  (\\<lambda>u. - (w \\<bullet>c u) / (u \\<bullet>c u) \\<cdot>\\<^sub>v u)\n  \\<in> set us \\<rightarrow> carrier_vec n\n  - (w \\<bullet>c u) / (u \\<bullet>c u) \\<cdot>\\<^sub>v u\n  \\<in> carrier_vec n\n  u \\<notin> set us\n\ngoal (1 subgoal):\n 1. - (w \\<bullet>c u) / (u \\<bullet>c u) \\<cdot>\\<^sub>v u +\n    adjuster n w us =\n    (\\<Oplus>\\<^bsub>V\\<^esub>v\\<in>set (u #\n   us). - (w \\<bullet>c v) / (v \\<bullet>c v) \\<cdot>\\<^sub>v v)", "unfolding set_simps"], ["proof (prove)\nusing this:\n  (\\<lambda>u. - (w \\<bullet>c u) / (u \\<bullet>c u) \\<cdot>\\<^sub>v u)\n  \\<in> set us \\<rightarrow> carrier_vec n\n  - (w \\<bullet>c u) / (u \\<bullet>c u) \\<cdot>\\<^sub>v u\n  \\<in> carrier_vec n\n  u \\<notin> set us\n\ngoal (1 subgoal):\n 1. - (w \\<bullet>c u) / (u \\<bullet>c u) \\<cdot>\\<^sub>v u +\n    adjuster n w us =\n    (\\<Oplus>\\<^bsub>V\\<^esub>v\\<in>insert u\n                                     (set\n us). - (w \\<bullet>c v) / (v \\<bullet>c v) \\<cdot>\\<^sub>v v)", "using finsum_insert[OF finite_set] Cons"], ["proof (prove)\nusing this:\n  (\\<lambda>u. - (w \\<bullet>c u) / (u \\<bullet>c u) \\<cdot>\\<^sub>v u)\n  \\<in> set us \\<rightarrow> carrier_vec n\n  - (w \\<bullet>c u) / (u \\<bullet>c u) \\<cdot>\\<^sub>v u\n  \\<in> carrier_vec n\n  u \\<notin> set us\n  \\<lbrakk>?a \\<notin> set ?xs1;\n   ?f \\<in> set ?xs1 \\<rightarrow> carrier_vec n;\n   ?f ?a \\<in> carrier_vec n\\<rbrakk>\n  \\<Longrightarrow> finsum V ?f (insert ?a (set ?xs1)) =\n                    ?f ?a + finsum V ?f (set ?xs1)\n  \\<lbrakk>set us \\<subseteq> carrier_vec n; distinct us\\<rbrakk>\n  \\<Longrightarrow> adjuster n w us =\n                    (\\<Oplus>\\<^bsub>V\\<^esub>v\\<in>set\n               us. - (w \\<bullet>c v) / (v \\<bullet>c v) \\<cdot>\\<^sub>v v)\n  set (u # us) \\<subseteq> carrier_vec n\n  distinct (u # us)\n\ngoal (1 subgoal):\n 1. - (w \\<bullet>c u) / (u \\<bullet>c u) \\<cdot>\\<^sub>v u +\n    adjuster n w us =\n    (\\<Oplus>\\<^bsub>V\\<^esub>v\\<in>insert u\n                                     (set\n us). - (w \\<bullet>c v) / (v \\<bullet>c v) \\<cdot>\\<^sub>v v)", "by auto"], ["proof (state)\nthis:\n  adjuster n w (u # us) =\n  (\\<Oplus>\\<^bsub>V\\<^esub>v\\<in>set (u #\n us). - (w \\<bullet>c v) / (v \\<bullet>c v) \\<cdot>\\<^sub>v v)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>set [] \\<subseteq> carrier_vec n; distinct []\\<rbrakk>\n    \\<Longrightarrow> adjuster n w [] =\n                      (\\<Oplus>\\<^bsub>V\\<^esub>v\\<in>set\n                 []. - (w \\<bullet>c v) / (v \\<bullet>c v) \\<cdot>\\<^sub>v\n                     v)", "qed simp"], ["", "lemma adjuster_in_span:\n  assumes w: \"(w :: 'a vec) : carrier_vec n\"\n    and us: \"set (us :: 'a vec list) \\<subseteq> carrier_vec n\"\n    and dist: \"distinct us\"\n  shows \"adjuster n w us : span (set us)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. adjuster n w us \\<in> local.span (set us)", "using adjuster_lincomb[OF assms]"], ["proof (prove)\nusing this:\n  adjuster n w us =\n  lincomb (\\<lambda>u. - (w \\<bullet>c u) / (u \\<bullet>c u)) (set us)\n\ngoal (1 subgoal):\n 1. adjuster n w us \\<in> local.span (set us)", "unfolding finite_span[OF finite_set us]"], ["proof (prove)\nusing this:\n  adjuster n w us =\n  lincomb (\\<lambda>u. - (w \\<bullet>c u) / (u \\<bullet>c u)) (set us)\n\ngoal (1 subgoal):\n 1. adjuster n w us \\<in> {uu_. \\<exists>a. uu_ = lincomb a (set us)}", "by auto"], ["", "lemma adjuster_carrier[simp]:\n  assumes w: \"(w :: 'a vec) : carrier_vec n\"\n    and us: \"set (us :: 'a vec list) \\<subseteq> carrier_vec n\"\n    and dist: \"distinct us\"\n  shows \"adjuster n w us : carrier_vec n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. adjuster n w us \\<in> carrier_vec n", "using adjuster_in_span span_closed assms"], ["proof (prove)\nusing this:\n  \\<lbrakk>?w \\<in> carrier_vec n; set ?us \\<subseteq> carrier_vec n;\n   distinct ?us\\<rbrakk>\n  \\<Longrightarrow> adjuster n ?w ?us \\<in> local.span (set ?us)\n  \\<lbrakk>?U \\<subseteq> carrier_vec n; ?v \\<in> local.span ?U\\<rbrakk>\n  \\<Longrightarrow> ?v \\<in> carrier_vec n\n  w \\<in> carrier_vec n\n  set us \\<subseteq> carrier_vec n\n  distinct us\n\ngoal (1 subgoal):\n 1. adjuster n w us \\<in> carrier_vec n", "by auto"], ["", "lemma adjust_not_in_span:\n  assumes w[simp]: \"(w :: 'a vec) : carrier_vec n\"\n    and us: \"set (us :: 'a vec list) \\<subseteq> carrier_vec n\"\n    and dist: \"distinct us\"\n    and ind: \"w \\<notin> span (set us)\"\n  shows \"adjuster n w us + w \\<notin> span (set us)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. adjuster n w us + w \\<notin> local.span (set us)", "using span_add[OF us adjuster_in_span[OF w us dist] w]"], ["proof (prove)\nusing this:\n  (w \\<in> local.span (set us)) =\n  (adjuster n w us + w \\<in> local.span (set us))\n\ngoal (1 subgoal):\n 1. adjuster n w us + w \\<notin> local.span (set us)", "using comm_add_vec ind"], ["proof (prove)\nusing this:\n  (w \\<in> local.span (set us)) =\n  (adjuster n w us + w \\<in> local.span (set us))\n  \\<lbrakk>?v\\<^sub>1 \\<in> carrier_vec ?n;\n   ?v\\<^sub>2 \\<in> carrier_vec ?n\\<rbrakk>\n  \\<Longrightarrow> ?v\\<^sub>1 + ?v\\<^sub>2 = ?v\\<^sub>2 + ?v\\<^sub>1\n  w \\<notin> local.span (set us)\n\ngoal (1 subgoal):\n 1. adjuster n w us + w \\<notin> local.span (set us)", "by auto"], ["", "lemma adjust_not_mem:\n  assumes w[simp]: \"(w :: 'a vec) : carrier_vec n\"\n    and us: \"set (us :: 'a vec list) \\<subseteq> carrier_vec n\"\n    and dist: \"distinct us\"\n    and ind: \"w \\<notin> span (set us)\"\n  shows \"adjuster n w us + w \\<notin> set us\""], ["proof (prove)\ngoal (1 subgoal):\n 1. adjuster n w us + w \\<notin> set us", "using adjust_not_in_span[OF assms] span_mem[OF us]"], ["proof (prove)\nusing this:\n  adjuster n w us + w \\<notin> local.span (set us)\n  ?u \\<in> set us \\<Longrightarrow> ?u \\<in> local.span (set us)\n\ngoal (1 subgoal):\n 1. adjuster n w us + w \\<notin> set us", "by auto"], ["", "lemma adjust_in_span:\n  assumes w[simp]: \"(w :: 'a vec) : carrier_vec n\"\n    and us: \"set (us :: 'a vec list) \\<subseteq> carrier_vec n\"\n    and dist: \"distinct us\"\n  shows \"adjuster n w us + w : span (insert w (set us))\" (is \"?v + _ : span ?U\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. adjuster n w us + w \\<in> local.span (insert w (set us))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. adjuster n w us + w \\<in> local.span (insert w (set us))", "let ?a = \"\\<lambda>u. -(w \\<bullet>c u)/(u \\<bullet>c u)\""], ["proof (state)\ngoal (1 subgoal):\n 1. adjuster n w us + w \\<in> local.span (insert w (set us))", "have \"?v = lincomb ?a (set us)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. adjuster n w us =\n    lincomb (\\<lambda>u. - (w \\<bullet>c u) / (u \\<bullet>c u)) (set us)", "using adjuster_lincomb[OF assms]"], ["proof (prove)\nusing this:\n  adjuster n w us =\n  lincomb (\\<lambda>u. - (w \\<bullet>c u) / (u \\<bullet>c u)) (set us)\n\ngoal (1 subgoal):\n 1. adjuster n w us =\n    lincomb (\\<lambda>u. - (w \\<bullet>c u) / (u \\<bullet>c u)) (set us)", "."], ["proof (state)\nthis:\n  adjuster n w us =\n  lincomb (\\<lambda>u. - (w \\<bullet>c u) / (u \\<bullet>c u)) (set us)\n\ngoal (1 subgoal):\n 1. adjuster n w us + w \\<in> local.span (insert w (set us))", "hence vU: \"?v : span (set us)\""], ["proof (prove)\nusing this:\n  adjuster n w us =\n  lincomb (\\<lambda>u. - (w \\<bullet>c u) / (u \\<bullet>c u)) (set us)\n\ngoal (1 subgoal):\n 1. adjuster n w us \\<in> local.span (set us)", "unfolding finite_span[OF finite_set us]"], ["proof (prove)\nusing this:\n  adjuster n w us =\n  lincomb (\\<lambda>u. - (w \\<bullet>c u) / (u \\<bullet>c u)) (set us)\n\ngoal (1 subgoal):\n 1. adjuster n w us \\<in> {uu_. \\<exists>a. uu_ = lincomb a (set us)}", "by auto"], ["proof (state)\nthis:\n  adjuster n w us \\<in> local.span (set us)\n\ngoal (1 subgoal):\n 1. adjuster n w us + w \\<in> local.span (insert w (set us))", "hence v[simp]: \"?v : carrier_vec n\""], ["proof (prove)\nusing this:\n  adjuster n w us \\<in> local.span (set us)\n\ngoal (1 subgoal):\n 1. adjuster n w us \\<in> carrier_vec n", "using span_closed[OF us]"], ["proof (prove)\nusing this:\n  adjuster n w us \\<in> local.span (set us)\n  ?v \\<in> local.span (set us) \\<Longrightarrow> ?v \\<in> carrier_vec n\n\ngoal (1 subgoal):\n 1. adjuster n w us \\<in> carrier_vec n", "by auto"], ["proof (state)\nthis:\n  adjuster n w us \\<in> carrier_vec n\n\ngoal (1 subgoal):\n 1. adjuster n w us + w \\<in> local.span (insert w (set us))", "have vU': \"?v : span ?U\""], ["proof (prove)\ngoal (1 subgoal):\n 1. adjuster n w us \\<in> local.span (insert w (set us))", "using vU span_is_monotone[OF subset_insertI]"], ["proof (prove)\nusing this:\n  adjuster n w us \\<in> local.span (set us)\n  local.span ?S \\<subseteq> local.span (insert ?a1 ?S)\n\ngoal (1 subgoal):\n 1. adjuster n w us \\<in> local.span (insert w (set us))", "by auto"], ["proof (state)\nthis:\n  adjuster n w us \\<in> local.span (insert w (set us))\n\ngoal (1 subgoal):\n 1. adjuster n w us + w \\<in> local.span (insert w (set us))", "have \"{w} \\<subseteq> ?U\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {w} \\<subseteq> insert w (set us)", "by simp"], ["proof (state)\nthis:\n  {w} \\<subseteq> insert w (set us)\n\ngoal (1 subgoal):\n 1. adjuster n w us + w \\<in> local.span (insert w (set us))", "from span_is_monotone[OF this]"], ["proof (chain)\npicking this:\n  local.span {w} \\<subseteq> local.span (insert w (set us))", "have wU': \"w : span ?U\""], ["proof (prove)\nusing this:\n  local.span {w} \\<subseteq> local.span (insert w (set us))\n\ngoal (1 subgoal):\n 1. w \\<in> local.span (insert w (set us))", "using span_self[OF w]"], ["proof (prove)\nusing this:\n  local.span {w} \\<subseteq> local.span (insert w (set us))\n  w \\<in> local.span {w}\n\ngoal (1 subgoal):\n 1. w \\<in> local.span (insert w (set us))", "by auto"], ["proof (state)\nthis:\n  w \\<in> local.span (insert w (set us))\n\ngoal (1 subgoal):\n 1. adjuster n w us + w \\<in> local.span (insert w (set us))", "have \"?U \\<subseteq> carrier_vec n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. insert w (set us) \\<subseteq> carrier_vec n", "using us w"], ["proof (prove)\nusing this:\n  set us \\<subseteq> carrier_vec n\n  w \\<in> carrier_vec n\n\ngoal (1 subgoal):\n 1. insert w (set us) \\<subseteq> carrier_vec n", "by simp"], ["proof (state)\nthis:\n  insert w (set us) \\<subseteq> carrier_vec n\n\ngoal (1 subgoal):\n 1. adjuster n w us + w \\<in> local.span (insert w (set us))", "from span_add[OF this wU' v] vU' comm_add_vec[OF w]"], ["proof (chain)\npicking this:\n  (adjuster n w us \\<in> local.span (insert w (set us))) =\n  (w + adjuster n w us \\<in> local.span (insert w (set us)))\n  adjuster n w us \\<in> local.span (insert w (set us))\n  ?v\\<^sub>2 \\<in> carrier_vec n \\<Longrightarrow>\n  w + ?v\\<^sub>2 = ?v\\<^sub>2 + w", "show ?thesis"], ["proof (prove)\nusing this:\n  (adjuster n w us \\<in> local.span (insert w (set us))) =\n  (w + adjuster n w us \\<in> local.span (insert w (set us)))\n  adjuster n w us \\<in> local.span (insert w (set us))\n  ?v\\<^sub>2 \\<in> carrier_vec n \\<Longrightarrow>\n  w + ?v\\<^sub>2 = ?v\\<^sub>2 + w\n\ngoal (1 subgoal):\n 1. adjuster n w us + w \\<in> local.span (insert w (set us))", "by simp"], ["proof (state)\nthis:\n  adjuster n w us + w \\<in> local.span (insert w (set us))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma adjust_not_lindep:\n  assumes w[simp]: \"(w :: 'a vec) : carrier_vec n\"\n    and us: \"set (us :: 'a vec list) \\<subseteq> carrier_vec n\"\n    and dist: \"distinct us\"\n    and wus: \"w \\<notin> span (set us)\"\n    and ind: \"~ lin_dep (set us)\"\n  shows \"~ lin_dep (insert (adjuster n w us + w) (set us))\"\n    (is \"~ _ (insert ?v _)\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. lin_indpt (insert (adjuster n w us + w) (set us))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. lin_indpt (insert (adjuster n w us + w) (set us))", "have v: \"?v : carrier_vec n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. adjuster n w us + w \\<in> carrier_vec n", "using assms"], ["proof (prove)\nusing this:\n  w \\<in> carrier_vec n\n  set us \\<subseteq> carrier_vec n\n  distinct us\n  w \\<notin> local.span (set us)\n  lin_indpt (set us)\n\ngoal (1 subgoal):\n 1. adjuster n w us + w \\<in> carrier_vec n", "by auto"], ["proof (state)\nthis:\n  adjuster n w us + w \\<in> carrier_vec n\n\ngoal (1 subgoal):\n 1. lin_indpt (insert (adjuster n w us + w) (set us))", "have \"?v \\<notin> span (set us)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. adjuster n w us + w \\<notin> local.span (set us)", "using adjust_not_in_span[OF w us dist wus]"], ["proof (prove)\nusing this:\n  adjuster n w us + w \\<notin> local.span (set us)\n\ngoal (1 subgoal):\n 1. adjuster n w us + w \\<notin> local.span (set us)", "using comm_add_vec[OF adjuster_carrier[OF w us dist] w]"], ["proof (prove)\nusing this:\n  adjuster n w us + w \\<notin> local.span (set us)\n  adjuster n w us + w = w + adjuster n w us\n\ngoal (1 subgoal):\n 1. adjuster n w us + w \\<notin> local.span (set us)", "by auto"], ["proof (state)\nthis:\n  adjuster n w us + w \\<notin> local.span (set us)\n\ngoal (1 subgoal):\n 1. lin_indpt (insert (adjuster n w us + w) (set us))", "thus ?thesis"], ["proof (prove)\nusing this:\n  adjuster n w us + w \\<notin> local.span (set us)\n\ngoal (1 subgoal):\n 1. lin_indpt (insert (adjuster n w us + w) (set us))", "using lin_dep_iff_in_span[OF us ind v] adjust_not_mem[OF w us dist wus]"], ["proof (prove)\nusing this:\n  adjuster n w us + w \\<notin> local.span (set us)\n  adjuster n w us + w \\<notin> set us \\<Longrightarrow>\n  (adjuster n w us + w \\<in> local.span (set us)) =\n  lin_dep (set us \\<union> {adjuster n w us + w})\n  adjuster n w us + w \\<notin> set us\n\ngoal (1 subgoal):\n 1. lin_indpt (insert (adjuster n w us + w) (set us))", "by auto"], ["proof (state)\nthis:\n  lin_indpt (insert (adjuster n w us + w) (set us))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma adjust_preserves_span:\n  assumes w[simp]: \"(w :: 'a vec) : carrier_vec n\"\n    and us: \"set (us :: 'a vec list) \\<subseteq> carrier_vec n\"\n    and dist: \"distinct us\"\n  shows \"w : span (set us) \\<longleftrightarrow> adjuster n w us + w : span (set us)\"\n    (is \"_ \\<longleftrightarrow> ?v + _ : _\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. (w \\<in> local.span (set us)) =\n    (adjuster n w us + w \\<in> local.span (set us))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (w \\<in> local.span (set us)) =\n    (adjuster n w us + w \\<in> local.span (set us))", "have \"?v : span (set us)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. adjuster n w us \\<in> local.span (set us)", "using adjuster_lincomb[OF assms]"], ["proof (prove)\nusing this:\n  adjuster n w us =\n  lincomb (\\<lambda>u. - (w \\<bullet>c u) / (u \\<bullet>c u)) (set us)\n\ngoal (1 subgoal):\n 1. adjuster n w us \\<in> local.span (set us)", "unfolding finite_span[OF finite_set us]"], ["proof (prove)\nusing this:\n  adjuster n w us =\n  lincomb (\\<lambda>u. - (w \\<bullet>c u) / (u \\<bullet>c u)) (set us)\n\ngoal (1 subgoal):\n 1. adjuster n w us \\<in> {uu_. \\<exists>a. uu_ = lincomb a (set us)}", "by auto"], ["proof (state)\nthis:\n  adjuster n w us \\<in> local.span (set us)\n\ngoal (1 subgoal):\n 1. (w \\<in> local.span (set us)) =\n    (adjuster n w us + w \\<in> local.span (set us))", "hence [simp]: \"?v : carrier_vec n\""], ["proof (prove)\nusing this:\n  adjuster n w us \\<in> local.span (set us)\n\ngoal (1 subgoal):\n 1. adjuster n w us \\<in> carrier_vec n", "using span_closed[OF us]"], ["proof (prove)\nusing this:\n  adjuster n w us \\<in> local.span (set us)\n  ?v \\<in> local.span (set us) \\<Longrightarrow> ?v \\<in> carrier_vec n\n\ngoal (1 subgoal):\n 1. adjuster n w us \\<in> carrier_vec n", "by auto"], ["proof (state)\nthis:\n  adjuster n w us \\<in> carrier_vec n\n\ngoal (1 subgoal):\n 1. (w \\<in> local.span (set us)) =\n    (adjuster n w us + w \\<in> local.span (set us))", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. (w \\<in> local.span (set us)) =\n    (adjuster n w us + w \\<in> local.span (set us))", "using span_add[OF us adjuster_in_span[OF w us] w] comm_add_vec[OF w] dist"], ["proof (prove)\nusing this:\n  distinct us \\<Longrightarrow>\n  (w \\<in> local.span (set us)) =\n  (adjuster n w us + w \\<in> local.span (set us))\n  ?v\\<^sub>2 \\<in> carrier_vec n \\<Longrightarrow>\n  w + ?v\\<^sub>2 = ?v\\<^sub>2 + w\n  distinct us\n\ngoal (1 subgoal):\n 1. (w \\<in> local.span (set us)) =\n    (adjuster n w us + w \\<in> local.span (set us))", "by auto"], ["proof (state)\nthis:\n  (w \\<in> local.span (set us)) =\n  (adjuster n w us + w \\<in> local.span (set us))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma in_span_adjust:\n  assumes w[simp]: \"(w :: 'a vec) : carrier_vec n\"\n    and us: \"set (us :: 'a vec list) \\<subseteq> carrier_vec n\"\n    and dist: \"distinct us\"\n  shows \"w : span (insert (adjuster n w us + w) (set us))\"\n    (is \"_ : span (insert ?v _)\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. w \\<in> local.span (insert (adjuster n w us + w) (set us))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. w \\<in> local.span (insert (adjuster n w us + w) (set us))", "have v: \"?v : carrier_vec n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. adjuster n w us + w \\<in> carrier_vec n", "using assms"], ["proof (prove)\nusing this:\n  w \\<in> carrier_vec n\n  set us \\<subseteq> carrier_vec n\n  distinct us\n\ngoal (1 subgoal):\n 1. adjuster n w us + w \\<in> carrier_vec n", "by auto"], ["proof (state)\nthis:\n  adjuster n w us + w \\<in> carrier_vec n\n\ngoal (1 subgoal):\n 1. w \\<in> local.span (insert (adjuster n w us + w) (set us))", "have a[simp]: \"adjuster n w us : carrier_vec n\"\n   and neg: \"- adjuster n w us : carrier_vec n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. adjuster n w us \\<in> carrier_vec n &&&\n    - adjuster n w us \\<in> carrier_vec n", "using assms"], ["proof (prove)\nusing this:\n  w \\<in> carrier_vec n\n  set us \\<subseteq> carrier_vec n\n  distinct us\n\ngoal (1 subgoal):\n 1. adjuster n w us \\<in> carrier_vec n &&&\n    - adjuster n w us \\<in> carrier_vec n", "by auto"], ["proof (state)\nthis:\n  adjuster n w us \\<in> carrier_vec n\n  - adjuster n w us \\<in> carrier_vec n\n\ngoal (1 subgoal):\n 1. w \\<in> local.span (insert (adjuster n w us + w) (set us))", "hence vU: \"insert ?v (set us) \\<subseteq> carrier_vec n\""], ["proof (prove)\nusing this:\n  adjuster n w us \\<in> carrier_vec n\n  - adjuster n w us \\<in> carrier_vec n\n\ngoal (1 subgoal):\n 1. insert (adjuster n w us + w) (set us) \\<subseteq> carrier_vec n", "using us"], ["proof (prove)\nusing this:\n  adjuster n w us \\<in> carrier_vec n\n  - adjuster n w us \\<in> carrier_vec n\n  set us \\<subseteq> carrier_vec n\n\ngoal (1 subgoal):\n 1. insert (adjuster n w us + w) (set us) \\<subseteq> carrier_vec n", "by auto"], ["proof (state)\nthis:\n  insert (adjuster n w us + w) (set us) \\<subseteq> carrier_vec n\n\ngoal (1 subgoal):\n 1. w \\<in> local.span (insert (adjuster n w us + w) (set us))", "have aS: \"adjuster n w us : span (insert ?v (set us))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. adjuster n w us \\<in> local.span (insert (adjuster n w us + w) (set us))", "using adjuster_in_span[OF w us] span_is_monotone[OF subset_insertI] dist"], ["proof (prove)\nusing this:\n  distinct us \\<Longrightarrow> adjuster n w us \\<in> local.span (set us)\n  local.span ?S \\<subseteq> local.span (insert ?a1 ?S)\n  distinct us\n\ngoal (1 subgoal):\n 1. adjuster n w us \\<in> local.span (insert (adjuster n w us + w) (set us))", "by auto"], ["proof (state)\nthis:\n  adjuster n w us \\<in> local.span (insert (adjuster n w us + w) (set us))\n\ngoal (1 subgoal):\n 1. w \\<in> local.span (insert (adjuster n w us + w) (set us))", "have negS: \"- adjuster n w us : span (insert ?v (set us))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. - adjuster n w us\n    \\<in> local.span (insert (adjuster n w us + w) (set us))", "using span_neg[OF vU aS] us"], ["proof (prove)\nusing this:\n  \\<ominus>\\<^bsub>V\\<^esub> adjuster n w us\n  \\<in> local.span (insert (adjuster n w us + w) (set us))\n  set us \\<subseteq> carrier_vec n\n\ngoal (1 subgoal):\n 1. - adjuster n w us\n    \\<in> local.span (insert (adjuster n w us + w) (set us))", "by simp"], ["proof (state)\nthis:\n  - adjuster n w us \\<in> local.span (insert (adjuster n w us + w) (set us))\n\ngoal (1 subgoal):\n 1. w \\<in> local.span (insert (adjuster n w us + w) (set us))", "have [simp]:\"- adjuster n w us + (adjuster n w us + w) = w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. - adjuster n w us + (adjuster n w us + w) = w", "unfolding a_assoc[OF neg a w,symmetric]"], ["proof (prove)\ngoal (1 subgoal):\n 1. - adjuster n w us + adjuster n w us + w = w", "by simp"], ["proof (state)\nthis:\n  - adjuster n w us + (adjuster n w us + w) = w\n\ngoal (1 subgoal):\n 1. w \\<in> local.span (insert (adjuster n w us + w) (set us))", "have \"{?v} \\<subseteq> insert ?v (set us)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {adjuster n w us + w} \\<subseteq> insert (adjuster n w us + w) (set us)", "by simp"], ["proof (state)\nthis:\n  {adjuster n w us + w} \\<subseteq> insert (adjuster n w us + w) (set us)\n\ngoal (1 subgoal):\n 1. w \\<in> local.span (insert (adjuster n w us + w) (set us))", "from span_is_monotone[OF this]"], ["proof (chain)\npicking this:\n  local.span {adjuster n w us + w}\n  \\<subseteq> local.span (insert (adjuster n w us + w) (set us))", "have vS: \"?v : span (insert ?v (set us))\""], ["proof (prove)\nusing this:\n  local.span {adjuster n w us + w}\n  \\<subseteq> local.span (insert (adjuster n w us + w) (set us))\n\ngoal (1 subgoal):\n 1. adjuster n w us + w\n    \\<in> local.span (insert (adjuster n w us + w) (set us))", "using span_self[OF v]"], ["proof (prove)\nusing this:\n  local.span {adjuster n w us + w}\n  \\<subseteq> local.span (insert (adjuster n w us + w) (set us))\n  adjuster n w us + w \\<in> local.span {adjuster n w us + w}\n\ngoal (1 subgoal):\n 1. adjuster n w us + w\n    \\<in> local.span (insert (adjuster n w us + w) (set us))", "by auto"], ["proof (state)\nthis:\n  adjuster n w us + w\n  \\<in> local.span (insert (adjuster n w us + w) (set us))\n\ngoal (1 subgoal):\n 1. w \\<in> local.span (insert (adjuster n w us + w) (set us))", "thus ?thesis"], ["proof (prove)\nusing this:\n  adjuster n w us + w\n  \\<in> local.span (insert (adjuster n w us + w) (set us))\n\ngoal (1 subgoal):\n 1. w \\<in> local.span (insert (adjuster n w us + w) (set us))", "using span_add[OF vU negS v]"], ["proof (prove)\nusing this:\n  adjuster n w us + w\n  \\<in> local.span (insert (adjuster n w us + w) (set us))\n  (adjuster n w us + w\n   \\<in> local.span (insert (adjuster n w us + w) (set us))) =\n  (- adjuster n w us + (adjuster n w us + w)\n   \\<in> local.span (insert (adjuster n w us + w) (set us)))\n\ngoal (1 subgoal):\n 1. w \\<in> local.span (insert (adjuster n w us + w) (set us))", "by auto"], ["proof (state)\nthis:\n  w \\<in> local.span (insert (adjuster n w us + w) (set us))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma adjust_zero:\n  assumes U: \"set (us :: 'a vec list) \\<subseteq> carrier_vec n\"\n    and orth: \"corthogonal us\"\n    and w[simp]: \"w : carrier_vec n\"\n    and i: \"i < length us\"\n  shows \"(adjuster n w us + w) \\<bullet>c us!i = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (adjuster n w us + w) \\<bullet>c us ! i = (0::'a)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (adjuster n w us + w) \\<bullet>c us ! i = (0::'a)", "define u where \"u = us!i\""], ["proof (state)\nthis:\n  u = us ! i\n\ngoal (1 subgoal):\n 1. (adjuster n w us + w) \\<bullet>c us ! i = (0::'a)", "have u[simp]: \"u : carrier_vec n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. u \\<in> carrier_vec n", "using i U u_def"], ["proof (prove)\nusing this:\n  i < length us\n  set us \\<subseteq> carrier_vec n\n  u = us ! i\n\ngoal (1 subgoal):\n 1. u \\<in> carrier_vec n", "by auto"], ["proof (state)\nthis:\n  u \\<in> carrier_vec n\n\ngoal (1 subgoal):\n 1. (adjuster n w us + w) \\<bullet>c us ! i = (0::'a)", "hence cu[simp]: \"conjugate u : carrier_vec n\""], ["proof (prove)\nusing this:\n  u \\<in> carrier_vec n\n\ngoal (1 subgoal):\n 1. conjugate u \\<in> carrier_vec n", "by auto"], ["proof (state)\nthis:\n  conjugate u \\<in> carrier_vec n\n\ngoal (1 subgoal):\n 1. (adjuster n w us + w) \\<bullet>c us ! i = (0::'a)", "have uU: \"u : set us\""], ["proof (prove)\ngoal (1 subgoal):\n 1. u \\<in> set us", "using i u_def"], ["proof (prove)\nusing this:\n  i < length us\n  u = us ! i\n\ngoal (1 subgoal):\n 1. u \\<in> set us", "by auto"], ["proof (state)\nthis:\n  u \\<in> set us\n\ngoal (1 subgoal):\n 1. (adjuster n w us + w) \\<bullet>c us ! i = (0::'a)", "let ?g = \"\\<lambda>u'::'a vec. (-(w \\<bullet>c u')/(u' \\<bullet>c u') \\<cdot>\\<^sub>v u')\""], ["proof (state)\ngoal (1 subgoal):\n 1. (adjuster n w us + w) \\<bullet>c us ! i = (0::'a)", "have g: \"?g : set us \\<rightarrow> carrier_vec n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>u'.\n        - (w \\<bullet>c u') / (u' \\<bullet>c u') \\<cdot>\\<^sub>v u')\n    \\<in> set us \\<rightarrow> carrier_vec n", "using w U"], ["proof (prove)\nusing this:\n  w \\<in> carrier_vec n\n  set us \\<subseteq> carrier_vec n\n\ngoal (1 subgoal):\n 1. (\\<lambda>u'.\n        - (w \\<bullet>c u') / (u' \\<bullet>c u') \\<cdot>\\<^sub>v u')\n    \\<in> set us \\<rightarrow> carrier_vec n", "by auto"], ["proof (state)\nthis:\n  (\\<lambda>u'. - (w \\<bullet>c u') / (u' \\<bullet>c u') \\<cdot>\\<^sub>v u')\n  \\<in> set us \\<rightarrow> carrier_vec n\n\ngoal (1 subgoal):\n 1. (adjuster n w us + w) \\<bullet>c us ! i = (0::'a)", "hence carrier: \"finsum V ?g (set us) : carrier_vec n\""], ["proof (prove)\nusing this:\n  (\\<lambda>u'. - (w \\<bullet>c u') / (u' \\<bullet>c u') \\<cdot>\\<^sub>v u')\n  \\<in> set us \\<rightarrow> carrier_vec n\n\ngoal (1 subgoal):\n 1. (\\<Oplus>\\<^bsub>V\\<^esub>u'\\<in>set\nus. - (w \\<bullet>c u') / (u' \\<bullet>c u') \\<cdot>\\<^sub>v u')\n    \\<in> carrier_vec n", "by simp"], ["proof (state)\nthis:\n  (\\<Oplus>\\<^bsub>V\\<^esub>u'\\<in>set us. - (w \\<bullet>c u') /\n     (u' \\<bullet>c u') \\<cdot>\\<^sub>v\n     u')\n  \\<in> carrier_vec n\n\ngoal (1 subgoal):\n 1. (adjuster n w us + w) \\<bullet>c us ! i = (0::'a)", "let ?f = \"\\<lambda>u'. ?g u' \\<bullet>c u\""], ["proof (state)\ngoal (1 subgoal):\n 1. (adjuster n w us + w) \\<bullet>c us ! i = (0::'a)", "let ?U = \"set us - {u}\""], ["proof (state)\ngoal (1 subgoal):\n 1. (adjuster n w us + w) \\<bullet>c us ! i = (0::'a)", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. (adjuster n w us + w) \\<bullet>c us ! i = (0::'a)", "fix u'"], ["proof (state)\ngoal (1 subgoal):\n 1. (adjuster n w us + w) \\<bullet>c us ! i = (0::'a)", "assume u': \"(u'::'a vec) : carrier_vec n\""], ["proof (state)\nthis:\n  u' \\<in> carrier_vec n\n\ngoal (1 subgoal):\n 1. (adjuster n w us + w) \\<bullet>c us ! i = (0::'a)", "have [simp]: \"dim_vec u = n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dim_vec u = n", "by auto"], ["proof (state)\nthis:\n  dim_vec u = n\n\ngoal (1 subgoal):\n 1. (adjuster n w us + w) \\<bullet>c us ! i = (0::'a)", "have \"?f u' = (- (w \\<bullet>c u') / (u' \\<bullet>c u')) * (u' \\<bullet>c u)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (- (w \\<bullet>c u') / (u' \\<bullet>c u') \\<cdot>\\<^sub>v u') \\<bullet>c\n    u =\n    - (w \\<bullet>c u') / (u' \\<bullet>c u') * (u' \\<bullet>c u)", "using scalar_prod_smult_left[of \"u'\" \"conjugate u\"]"], ["proof (prove)\nusing this:\n  dim_vec u' = dim_vec (conjugate u) \\<Longrightarrow>\n  (?k \\<cdot>\\<^sub>v u') \\<bullet>c u = ?k * (u' \\<bullet>c u)\n\ngoal (1 subgoal):\n 1. (- (w \\<bullet>c u') / (u' \\<bullet>c u') \\<cdot>\\<^sub>v u') \\<bullet>c\n    u =\n    - (w \\<bullet>c u') / (u' \\<bullet>c u') * (u' \\<bullet>c u)", "unfolding carrier_vecD[OF u] carrier_vecD[OF u']"], ["proof (prove)\nusing this:\n  n = dim_vec (conjugate u) \\<Longrightarrow>\n  (?k \\<cdot>\\<^sub>v u') \\<bullet>c u = ?k * (u' \\<bullet>c u)\n\ngoal (1 subgoal):\n 1. (- (w \\<bullet>c u') / (u' \\<bullet>c u') \\<cdot>\\<^sub>v u') \\<bullet>c\n    u =\n    - (w \\<bullet>c u') / (u' \\<bullet>c u') * (u' \\<bullet>c u)", "by auto"], ["proof (state)\nthis:\n  (- (w \\<bullet>c u') / (u' \\<bullet>c u') \\<cdot>\\<^sub>v u') \\<bullet>c\n  u =\n  - (w \\<bullet>c u') / (u' \\<bullet>c u') * (u' \\<bullet>c u)\n\ngoal (1 subgoal):\n 1. (adjuster n w us + w) \\<bullet>c us ! i = (0::'a)", "}"], ["proof (state)\nthis:\n  ?u'3 \\<in> carrier_vec n \\<Longrightarrow>\n  (- (w \\<bullet>c ?u'3) / (?u'3 \\<bullet>c ?u'3) \\<cdot>\\<^sub>v\n   ?u'3) \\<bullet>c\n  u =\n  - (w \\<bullet>c ?u'3) / (?u'3 \\<bullet>c ?u'3) * (?u'3 \\<bullet>c u)\n\ngoal (1 subgoal):\n 1. (adjuster n w us + w) \\<bullet>c us ! i = (0::'a)", "note conv = this"], ["proof (state)\nthis:\n  ?u'3 \\<in> carrier_vec n \\<Longrightarrow>\n  (- (w \\<bullet>c ?u'3) / (?u'3 \\<bullet>c ?u'3) \\<cdot>\\<^sub>v\n   ?u'3) \\<bullet>c\n  u =\n  - (w \\<bullet>c ?u'3) / (?u'3 \\<bullet>c ?u'3) * (?u'3 \\<bullet>c u)\n\ngoal (1 subgoal):\n 1. (adjuster n w us + w) \\<bullet>c us ! i = (0::'a)", "have \"?f : ?U \\<rightarrow> {0}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>u'.\n        (- (w \\<bullet>c u') / (u' \\<bullet>c u') \\<cdot>\\<^sub>v\n         u') \\<bullet>c\n        u)\n    \\<in> set us - {u} \\<rightarrow> {0::'a}", "proof (intro Pi_I)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> set us - {u} \\<Longrightarrow>\n       (- (w \\<bullet>c x) / (x \\<bullet>c x) \\<cdot>\\<^sub>v x) \\<bullet>c\n       u\n       \\<in> {0::'a}", "fix u'"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> set us - {u} \\<Longrightarrow>\n       (- (w \\<bullet>c x) / (x \\<bullet>c x) \\<cdot>\\<^sub>v x) \\<bullet>c\n       u\n       \\<in> {0::'a}", "assume u'Uu: \"u' : set us - {u}\""], ["proof (state)\nthis:\n  u' \\<in> set us - {u}\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> set us - {u} \\<Longrightarrow>\n       (- (w \\<bullet>c x) / (x \\<bullet>c x) \\<cdot>\\<^sub>v x) \\<bullet>c\n       u\n       \\<in> {0::'a}", "hence u'U: \"u' : set us\""], ["proof (prove)\nusing this:\n  u' \\<in> set us - {u}\n\ngoal (1 subgoal):\n 1. u' \\<in> set us", "by auto"], ["proof (state)\nthis:\n  u' \\<in> set us\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> set us - {u} \\<Longrightarrow>\n       (- (w \\<bullet>c x) / (x \\<bullet>c x) \\<cdot>\\<^sub>v x) \\<bullet>c\n       u\n       \\<in> {0::'a}", "hence u'[simp]: \"u' : carrier_vec n\""], ["proof (prove)\nusing this:\n  u' \\<in> set us\n\ngoal (1 subgoal):\n 1. u' \\<in> carrier_vec n", "using U"], ["proof (prove)\nusing this:\n  u' \\<in> set us\n  set us \\<subseteq> carrier_vec n\n\ngoal (1 subgoal):\n 1. u' \\<in> carrier_vec n", "by auto"], ["proof (state)\nthis:\n  u' \\<in> carrier_vec n\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> set us - {u} \\<Longrightarrow>\n       (- (w \\<bullet>c x) / (x \\<bullet>c x) \\<cdot>\\<^sub>v x) \\<bullet>c\n       u\n       \\<in> {0::'a}", "obtain j where j: \"j < length us\" and u'j: \"u' = us ! j\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>j.\n        \\<lbrakk>j < length us; u' = us ! j\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using u'U in_set_conv_nth"], ["proof (prove)\nusing this:\n  u' \\<in> set us\n  (?x \\<in> set ?xs) = (\\<exists>i<length ?xs. ?xs ! i = ?x)\n\ngoal (1 subgoal):\n 1. (\\<And>j.\n        \\<lbrakk>j < length us; u' = us ! j\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by metis"], ["proof (state)\nthis:\n  j < length us\n  u' = us ! j\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> set us - {u} \\<Longrightarrow>\n       (- (w \\<bullet>c x) / (x \\<bullet>c x) \\<cdot>\\<^sub>v x) \\<bullet>c\n       u\n       \\<in> {0::'a}", "have \"i \\<noteq> j\""], ["proof (prove)\ngoal (1 subgoal):\n 1. i \\<noteq> j", "using u'Uu u'j u_def"], ["proof (prove)\nusing this:\n  u' \\<in> set us - {u}\n  u' = us ! j\n  u = us ! i\n\ngoal (1 subgoal):\n 1. i \\<noteq> j", "by auto"], ["proof (state)\nthis:\n  i \\<noteq> j\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> set us - {u} \\<Longrightarrow>\n       (- (w \\<bullet>c x) / (x \\<bullet>c x) \\<cdot>\\<^sub>v x) \\<bullet>c\n       u\n       \\<in> {0::'a}", "hence \"u' \\<bullet>c u = 0\""], ["proof (prove)\nusing this:\n  i \\<noteq> j\n\ngoal (1 subgoal):\n 1. u' \\<bullet>c u = (0::'a)", "unfolding u'j"], ["proof (prove)\nusing this:\n  i \\<noteq> j\n\ngoal (1 subgoal):\n 1. us ! j \\<bullet>c u = (0::'a)", "using corthogonalD[OF orth j i] u_def"], ["proof (prove)\nusing this:\n  i \\<noteq> j\n  (us ! j \\<bullet>c us ! i = (0::'a)) = (j \\<noteq> i)\n  u = us ! i\n\ngoal (1 subgoal):\n 1. us ! j \\<bullet>c u = (0::'a)", "by auto"], ["proof (state)\nthis:\n  u' \\<bullet>c u = (0::'a)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> set us - {u} \\<Longrightarrow>\n       (- (w \\<bullet>c x) / (x \\<bullet>c x) \\<cdot>\\<^sub>v x) \\<bullet>c\n       u\n       \\<in> {0::'a}", "hence \"?f u' = 0\""], ["proof (prove)\nusing this:\n  u' \\<bullet>c u = (0::'a)\n\ngoal (1 subgoal):\n 1. (- (w \\<bullet>c u') / (u' \\<bullet>c u') \\<cdot>\\<^sub>v u') \\<bullet>c\n    u =\n    (0::'a)", "using mult_zero_right conv[OF u']"], ["proof (prove)\nusing this:\n  u' \\<bullet>c u = (0::'a)\n  ?a * (0::?'a) = (0::?'a)\n  (- (w \\<bullet>c u') / (u' \\<bullet>c u') \\<cdot>\\<^sub>v u') \\<bullet>c\n  u =\n  - (w \\<bullet>c u') / (u' \\<bullet>c u') * (u' \\<bullet>c u)\n\ngoal (1 subgoal):\n 1. (- (w \\<bullet>c u') / (u' \\<bullet>c u') \\<cdot>\\<^sub>v u') \\<bullet>c\n    u =\n    (0::'a)", "by auto"], ["proof (state)\nthis:\n  (- (w \\<bullet>c u') / (u' \\<bullet>c u') \\<cdot>\\<^sub>v u') \\<bullet>c\n  u =\n  (0::'a)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> set us - {u} \\<Longrightarrow>\n       (- (w \\<bullet>c x) / (x \\<bullet>c x) \\<cdot>\\<^sub>v x) \\<bullet>c\n       u\n       \\<in> {0::'a}", "thus \"?f u' : {0}\""], ["proof (prove)\nusing this:\n  (- (w \\<bullet>c u') / (u' \\<bullet>c u') \\<cdot>\\<^sub>v u') \\<bullet>c\n  u =\n  (0::'a)\n\ngoal (1 subgoal):\n 1. (- (w \\<bullet>c u') / (u' \\<bullet>c u') \\<cdot>\\<^sub>v u') \\<bullet>c\n    u\n    \\<in> {0::'a}", "by auto"], ["proof (state)\nthis:\n  (- (w \\<bullet>c u') / (u' \\<bullet>c u') \\<cdot>\\<^sub>v u') \\<bullet>c u\n  \\<in> {0::'a}\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (\\<lambda>u'.\n      (- (w \\<bullet>c u') / (u' \\<bullet>c u') \\<cdot>\\<^sub>v\n       u') \\<bullet>c\n      u)\n  \\<in> set us - {u} \\<rightarrow> {0::'a}\n\ngoal (1 subgoal):\n 1. (adjuster n w us + w) \\<bullet>c us ! i = (0::'a)", "hence \"restrict ?f ?U = restrict (\\<lambda>u. 0) ?U\""], ["proof (prove)\nusing this:\n  (\\<lambda>u'.\n      (- (w \\<bullet>c u') / (u' \\<bullet>c u') \\<cdot>\\<^sub>v\n       u') \\<bullet>c\n      u)\n  \\<in> set us - {u} \\<rightarrow> {0::'a}\n\ngoal (1 subgoal):\n 1. (\\<lambda>u'\\<in>set us - {u}.\n        (- (w \\<bullet>c u') / (u' \\<bullet>c u') \\<cdot>\\<^sub>v\n         u') \\<bullet>c\n        u) =\n    (\\<lambda>u\\<in>set us - {u}. 0::'a)", "by force"], ["proof (state)\nthis:\n  (\\<lambda>u'\\<in>set us - {u}.\n      (- (w \\<bullet>c u') / (u' \\<bullet>c u') \\<cdot>\\<^sub>v\n       u') \\<bullet>c\n      u) =\n  (\\<lambda>u\\<in>set us - {u}. 0::'a)\n\ngoal (1 subgoal):\n 1. (adjuster n w us + w) \\<bullet>c us ! i = (0::'a)", "hence \"sum ?f ?U = sum (\\<lambda>u. 0) ?U\""], ["proof (prove)\nusing this:\n  (\\<lambda>u'\\<in>set us - {u}.\n      (- (w \\<bullet>c u') / (u' \\<bullet>c u') \\<cdot>\\<^sub>v\n       u') \\<bullet>c\n      u) =\n  (\\<lambda>u\\<in>set us - {u}. 0::'a)\n\ngoal (1 subgoal):\n 1. (\\<Sum>u'\\<in>set us - {u}.\n       (- (w \\<bullet>c u') / (u' \\<bullet>c u') \\<cdot>\\<^sub>v\n        u') \\<bullet>c\n       u) =\n    (\\<Sum>u\\<in>set us - {u}. (0::'a))", "by (intro R.finsum_restrict, auto)"], ["proof (state)\nthis:\n  (\\<Sum>u'\\<in>set us - {u}.\n     (- (w \\<bullet>c u') / (u' \\<bullet>c u') \\<cdot>\\<^sub>v\n      u') \\<bullet>c\n     u) =\n  (\\<Sum>u\\<in>set us - {u}. (0::'a))\n\ngoal (1 subgoal):\n 1. (adjuster n w us + w) \\<bullet>c us ! i = (0::'a)", "hence fU'0: \"sum ?f ?U = 0\""], ["proof (prove)\nusing this:\n  (\\<Sum>u'\\<in>set us - {u}.\n     (- (w \\<bullet>c u') / (u' \\<bullet>c u') \\<cdot>\\<^sub>v\n      u') \\<bullet>c\n     u) =\n  (\\<Sum>u\\<in>set us - {u}. (0::'a))\n\ngoal (1 subgoal):\n 1. (\\<Sum>u'\\<in>set us - {u}.\n       (- (w \\<bullet>c u') / (u' \\<bullet>c u') \\<cdot>\\<^sub>v\n        u') \\<bullet>c\n       u) =\n    (0::'a)", "by auto"], ["proof (state)\nthis:\n  (\\<Sum>u'\\<in>set us - {u}.\n     (- (w \\<bullet>c u') / (u' \\<bullet>c u') \\<cdot>\\<^sub>v\n      u') \\<bullet>c\n     u) =\n  (0::'a)\n\ngoal (1 subgoal):\n 1. (adjuster n w us + w) \\<bullet>c us ! i = (0::'a)", "have uU': \"u \\<notin> ?U\""], ["proof (prove)\ngoal (1 subgoal):\n 1. u \\<notin> set us - {u}", "by auto"], ["proof (state)\nthis:\n  u \\<notin> set us - {u}\n\ngoal (1 subgoal):\n 1. (adjuster n w us + w) \\<bullet>c us ! i = (0::'a)", "have \"set us = insert u ?U\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set us = insert u (set us - {u})", "using insert_Diff_single uU"], ["proof (prove)\nusing this:\n  insert ?a (?A - {?a}) = insert ?a ?A\n  u \\<in> set us\n\ngoal (1 subgoal):\n 1. set us = insert u (set us - {u})", "by auto"], ["proof (state)\nthis:\n  set us = insert u (set us - {u})\n\ngoal (1 subgoal):\n 1. (adjuster n w us + w) \\<bullet>c us ! i = (0::'a)", "hence \"sum ?f (set us) = ?f u + sum ?f ?U\""], ["proof (prove)\nusing this:\n  set us = insert u (set us - {u})\n\ngoal (1 subgoal):\n 1. (\\<Sum>u'\\<in>set us.\n       (- (w \\<bullet>c u') / (u' \\<bullet>c u') \\<cdot>\\<^sub>v\n        u') \\<bullet>c\n       u) =\n    (- (w \\<bullet>c u) / (u \\<bullet>c u) \\<cdot>\\<^sub>v u) \\<bullet>c u +\n    (\\<Sum>u'\\<in>set us - {u}.\n       (- (w \\<bullet>c u') / (u' \\<bullet>c u') \\<cdot>\\<^sub>v\n        u') \\<bullet>c\n       u)", "using R.finsum_insert[OF _ uU']"], ["proof (prove)\nusing this:\n  set us = insert u (set us - {u})\n  finite (set us - {u}) \\<Longrightarrow>\n  sum ?f (insert u (set us - {u})) = ?f u + sum ?f (set us - {u})\n\ngoal (1 subgoal):\n 1. (\\<Sum>u'\\<in>set us.\n       (- (w \\<bullet>c u') / (u' \\<bullet>c u') \\<cdot>\\<^sub>v\n        u') \\<bullet>c\n       u) =\n    (- (w \\<bullet>c u) / (u \\<bullet>c u) \\<cdot>\\<^sub>v u) \\<bullet>c u +\n    (\\<Sum>u'\\<in>set us - {u}.\n       (- (w \\<bullet>c u') / (u' \\<bullet>c u') \\<cdot>\\<^sub>v\n        u') \\<bullet>c\n       u)", "by auto"], ["proof (state)\nthis:\n  (\\<Sum>u'\\<in>set us.\n     (- (w \\<bullet>c u') / (u' \\<bullet>c u') \\<cdot>\\<^sub>v\n      u') \\<bullet>c\n     u) =\n  (- (w \\<bullet>c u) / (u \\<bullet>c u) \\<cdot>\\<^sub>v u) \\<bullet>c u +\n  (\\<Sum>u'\\<in>set us - {u}.\n     (- (w \\<bullet>c u') / (u' \\<bullet>c u') \\<cdot>\\<^sub>v\n      u') \\<bullet>c\n     u)\n\ngoal (1 subgoal):\n 1. (adjuster n w us + w) \\<bullet>c us ! i = (0::'a)", "also"], ["proof (state)\nthis:\n  (\\<Sum>u'\\<in>set us.\n     (- (w \\<bullet>c u') / (u' \\<bullet>c u') \\<cdot>\\<^sub>v\n      u') \\<bullet>c\n     u) =\n  (- (w \\<bullet>c u) / (u \\<bullet>c u) \\<cdot>\\<^sub>v u) \\<bullet>c u +\n  (\\<Sum>u'\\<in>set us - {u}.\n     (- (w \\<bullet>c u') / (u' \\<bullet>c u') \\<cdot>\\<^sub>v\n      u') \\<bullet>c\n     u)\n\ngoal (1 subgoal):\n 1. (adjuster n w us + w) \\<bullet>c us ! i = (0::'a)", "have \"... = ?f u\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (- (w \\<bullet>c u) / (u \\<bullet>c u) \\<cdot>\\<^sub>v u) \\<bullet>c u +\n    (\\<Sum>u'\\<in>set us - {u}.\n       (- (w \\<bullet>c u') / (u' \\<bullet>c u') \\<cdot>\\<^sub>v\n        u') \\<bullet>c\n       u) =\n    (- (w \\<bullet>c u) / (u \\<bullet>c u) \\<cdot>\\<^sub>v u) \\<bullet>c u", "using fU'0"], ["proof (prove)\nusing this:\n  (\\<Sum>u'\\<in>set us - {u}.\n     (- (w \\<bullet>c u') / (u' \\<bullet>c u') \\<cdot>\\<^sub>v\n      u') \\<bullet>c\n     u) =\n  (0::'a)\n\ngoal (1 subgoal):\n 1. (- (w \\<bullet>c u) / (u \\<bullet>c u) \\<cdot>\\<^sub>v u) \\<bullet>c u +\n    (\\<Sum>u'\\<in>set us - {u}.\n       (- (w \\<bullet>c u') / (u' \\<bullet>c u') \\<cdot>\\<^sub>v\n        u') \\<bullet>c\n       u) =\n    (- (w \\<bullet>c u) / (u \\<bullet>c u) \\<cdot>\\<^sub>v u) \\<bullet>c u", "by auto"], ["proof (state)\nthis:\n  (- (w \\<bullet>c u) / (u \\<bullet>c u) \\<cdot>\\<^sub>v u) \\<bullet>c u +\n  (\\<Sum>u'\\<in>set us - {u}.\n     (- (w \\<bullet>c u') / (u' \\<bullet>c u') \\<cdot>\\<^sub>v\n      u') \\<bullet>c\n     u) =\n  (- (w \\<bullet>c u) / (u \\<bullet>c u) \\<cdot>\\<^sub>v u) \\<bullet>c u\n\ngoal (1 subgoal):\n 1. (adjuster n w us + w) \\<bullet>c us ! i = (0::'a)", "also"], ["proof (state)\nthis:\n  (- (w \\<bullet>c u) / (u \\<bullet>c u) \\<cdot>\\<^sub>v u) \\<bullet>c u +\n  (\\<Sum>u'\\<in>set us - {u}.\n     (- (w \\<bullet>c u') / (u' \\<bullet>c u') \\<cdot>\\<^sub>v\n      u') \\<bullet>c\n     u) =\n  (- (w \\<bullet>c u) / (u \\<bullet>c u) \\<cdot>\\<^sub>v u) \\<bullet>c u\n\ngoal (1 subgoal):\n 1. (adjuster n w us + w) \\<bullet>c us ! i = (0::'a)", "have \"... = - (w \\<bullet>c u) / (u \\<bullet>c u) * (u \\<bullet>c u)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (- (w \\<bullet>c u) / (u \\<bullet>c u) \\<cdot>\\<^sub>v u) \\<bullet>c u =\n    - (w \\<bullet>c u) / (u \\<bullet>c u) * (u \\<bullet>c u)", "using conv[OF u]"], ["proof (prove)\nusing this:\n  (- (w \\<bullet>c u) / (u \\<bullet>c u) \\<cdot>\\<^sub>v u) \\<bullet>c u =\n  - (w \\<bullet>c u) / (u \\<bullet>c u) * (u \\<bullet>c u)\n\ngoal (1 subgoal):\n 1. (- (w \\<bullet>c u) / (u \\<bullet>c u) \\<cdot>\\<^sub>v u) \\<bullet>c u =\n    - (w \\<bullet>c u) / (u \\<bullet>c u) * (u \\<bullet>c u)", "by auto"], ["proof (state)\nthis:\n  (- (w \\<bullet>c u) / (u \\<bullet>c u) \\<cdot>\\<^sub>v u) \\<bullet>c u =\n  - (w \\<bullet>c u) / (u \\<bullet>c u) * (u \\<bullet>c u)\n\ngoal (1 subgoal):\n 1. (adjuster n w us + w) \\<bullet>c us ! i = (0::'a)", "finally"], ["proof (chain)\npicking this:\n  (\\<Sum>u'\\<in>set us.\n     (- (w \\<bullet>c u') / (u' \\<bullet>c u') \\<cdot>\\<^sub>v\n      u') \\<bullet>c\n     u) =\n  - (w \\<bullet>c u) / (u \\<bullet>c u) * (u \\<bullet>c u)", "have main: \"sum ?f (set us) = - (w \\<bullet>c u)\""], ["proof (prove)\nusing this:\n  (\\<Sum>u'\\<in>set us.\n     (- (w \\<bullet>c u') / (u' \\<bullet>c u') \\<cdot>\\<^sub>v\n      u') \\<bullet>c\n     u) =\n  - (w \\<bullet>c u) / (u \\<bullet>c u) * (u \\<bullet>c u)\n\ngoal (1 subgoal):\n 1. (\\<Sum>u'\\<in>set us.\n       (- (w \\<bullet>c u') / (u' \\<bullet>c u') \\<cdot>\\<^sub>v\n        u') \\<bullet>c\n       u) =\n    - (w \\<bullet>c u)", "unfolding u_def"], ["proof (prove)\nusing this:\n  (\\<Sum>u'\\<in>set us.\n     (- (w \\<bullet>c u') / (u' \\<bullet>c u') \\<cdot>\\<^sub>v\n      u') \\<bullet>c\n     us ! i) =\n  - (w \\<bullet>c us ! i) / (us ! i \\<bullet>c us ! i) *\n  (us ! i \\<bullet>c us ! i)\n\ngoal (1 subgoal):\n 1. (\\<Sum>u'\\<in>set us.\n       (- (w \\<bullet>c u') / (u' \\<bullet>c u') \\<cdot>\\<^sub>v\n        u') \\<bullet>c\n       us ! i) =\n    - (w \\<bullet>c us ! i)", "by (simp add: i orth corthogonalD)"], ["proof (state)\nthis:\n  (\\<Sum>u'\\<in>set us.\n     (- (w \\<bullet>c u') / (u' \\<bullet>c u') \\<cdot>\\<^sub>v\n      u') \\<bullet>c\n     u) =\n  - (w \\<bullet>c u)\n\ngoal (1 subgoal):\n 1. (adjuster n w us + w) \\<bullet>c us ! i = (0::'a)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. (adjuster n w us + w) \\<bullet>c us ! i = (0::'a)", "unfolding u_def[symmetric]"], ["proof (prove)\ngoal (1 subgoal):\n 1. (adjuster n w us + w) \\<bullet>c u = (0::'a)", "unfolding adjuster_finsum[OF U corthogonal_distinct[OF orth]]"], ["proof (prove)\ngoal (1 subgoal):\n 1. ((\\<Oplus>\\<^bsub>V\\<^esub>u\\<in>set\nus. - (w \\<bullet>c u) / (u \\<bullet>c u) \\<cdot>\\<^sub>v u) +\n     w) \\<bullet>c\n    u =\n    (0::'a)", "unfolding add_scalar_prod_distrib[OF carrier w cu]"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Oplus>\\<^bsub>V\\<^esub>u\\<in>set us. - (w \\<bullet>c u) /\n      (u \\<bullet>c u) \\<cdot>\\<^sub>v\n      u) \\<bullet>c\n    u +\n    w \\<bullet>c u =\n    (0::'a)", "unfolding finsum_scalar_prod_sum[OF g cu]"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>ua\\<in>set us.\n       (- (w \\<bullet>c ua) / (ua \\<bullet>c ua) \\<cdot>\\<^sub>v\n        ua) \\<bullet>c\n       u) +\n    w \\<bullet>c u =\n    (0::'a)", "unfolding main"], ["proof (prove)\ngoal (1 subgoal):\n 1. - (w \\<bullet>c u) + w \\<bullet>c u = (0::'a)", "unfolding comm_scalar_prod[OF cu w]"], ["proof (prove)\ngoal (1 subgoal):\n 1. - (w \\<bullet>c u) + w \\<bullet>c u = (0::'a)", "using left_minus"], ["proof (prove)\nusing this:\n  - ?a + ?a = (0::?'a)\n\ngoal (1 subgoal):\n 1. - (w \\<bullet>c u) + w \\<bullet>c u = (0::'a)", "by auto"], ["proof (state)\nthis:\n  (adjuster n w us + w) \\<bullet>c us ! i = (0::'a)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma adjust_nonzero:\n  assumes U: \"set (us :: 'a vec list) \\<subseteq> carrier_vec n\"\n    and dist: \"distinct us\"\n    and w[simp]: \"w : carrier_vec n\"\n    and wsU: \"w \\<notin> span (set us)\"\n  shows \"adjuster n w us + w \\<noteq> 0\\<^sub>v n\" (is \"?a + _ \\<noteq> _\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. adjuster n w us + w \\<noteq> 0\\<^sub>v n", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. adjuster n w us + w = 0\\<^sub>v n \\<Longrightarrow> False", "have [simp]: \"?a : carrier_vec n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. adjuster n w us \\<in> carrier_vec n", "using U dist"], ["proof (prove)\nusing this:\n  set us \\<subseteq> carrier_vec n\n  distinct us\n\ngoal (1 subgoal):\n 1. adjuster n w us \\<in> carrier_vec n", "by auto"], ["proof (state)\nthis:\n  adjuster n w us \\<in> carrier_vec n\n\ngoal (1 subgoal):\n 1. adjuster n w us + w = 0\\<^sub>v n \\<Longrightarrow> False", "have [simp]: \"- ?a : carrier_vec n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. - adjuster n w us \\<in> carrier_vec n", "by auto"], ["proof (state)\nthis:\n  - adjuster n w us \\<in> carrier_vec n\n\ngoal (1 subgoal):\n 1. adjuster n w us + w = 0\\<^sub>v n \\<Longrightarrow> False", "have [simp]: \"?a + w : carrier_vec n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. adjuster n w us + w \\<in> carrier_vec n", "by auto"], ["proof (state)\nthis:\n  adjuster n w us + w \\<in> carrier_vec n\n\ngoal (1 subgoal):\n 1. adjuster n w us + w = 0\\<^sub>v n \\<Longrightarrow> False", "assume \"?a + w = 0\\<^sub>v n\""], ["proof (state)\nthis:\n  adjuster n w us + w = 0\\<^sub>v n\n\ngoal (1 subgoal):\n 1. adjuster n w us + w = 0\\<^sub>v n \\<Longrightarrow> False", "hence \"- ?a = - ?a + (?a + w)\""], ["proof (prove)\nusing this:\n  adjuster n w us + w = 0\\<^sub>v n\n\ngoal (1 subgoal):\n 1. - adjuster n w us = - adjuster n w us + (adjuster n w us + w)", "by auto"], ["proof (state)\nthis:\n  - adjuster n w us = - adjuster n w us + (adjuster n w us + w)\n\ngoal (1 subgoal):\n 1. adjuster n w us + w = 0\\<^sub>v n \\<Longrightarrow> False", "also"], ["proof (state)\nthis:\n  - adjuster n w us = - adjuster n w us + (adjuster n w us + w)\n\ngoal (1 subgoal):\n 1. adjuster n w us + w = 0\\<^sub>v n \\<Longrightarrow> False", "have \"... = (- ?a + ?a) + w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. - adjuster n w us + (adjuster n w us + w) =\n    - adjuster n w us + adjuster n w us + w", "apply(subst a_assoc)"], ["proof (prove)\ngoal (4 subgoals):\n 1. - adjuster n w us \\<in> carrier_vec n\n 2. adjuster n w us \\<in> carrier_vec n\n 3. w \\<in> carrier_vec n\n 4. - adjuster n w us + (adjuster n w us + w) =\n    - adjuster n w us + (adjuster n w us + w)", "by auto"], ["proof (state)\nthis:\n  - adjuster n w us + (adjuster n w us + w) =\n  - adjuster n w us + adjuster n w us + w\n\ngoal (1 subgoal):\n 1. adjuster n w us + w = 0\\<^sub>v n \\<Longrightarrow> False", "also"], ["proof (state)\nthis:\n  - adjuster n w us + (adjuster n w us + w) =\n  - adjuster n w us + adjuster n w us + w\n\ngoal (1 subgoal):\n 1. adjuster n w us + w = 0\\<^sub>v n \\<Longrightarrow> False", "have \"- ?a + ?a = 0\\<^sub>v n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. - adjuster n w us + adjuster n w us = 0\\<^sub>v n", "using r_neg[OF w]"], ["proof (prove)\nusing this:\n  w + \\<ominus>\\<^bsub>V\\<^esub> w = 0\\<^sub>v n\n\ngoal (1 subgoal):\n 1. - adjuster n w us + adjuster n w us = 0\\<^sub>v n", "unfolding vec_neg[OF w]"], ["proof (prove)\nusing this:\n  w + - w = 0\\<^sub>v n\n\ngoal (1 subgoal):\n 1. - adjuster n w us + adjuster n w us = 0\\<^sub>v n", "by auto"], ["proof (state)\nthis:\n  - adjuster n w us + adjuster n w us = 0\\<^sub>v n\n\ngoal (1 subgoal):\n 1. adjuster n w us + w = 0\\<^sub>v n \\<Longrightarrow> False", "finally"], ["proof (chain)\npicking this:\n  - adjuster n w us = 0\\<^sub>v n + w", "have \"- ?a = w\""], ["proof (prove)\nusing this:\n  - adjuster n w us = 0\\<^sub>v n + w\n\ngoal (1 subgoal):\n 1. - adjuster n w us = w", "by auto"], ["proof (state)\nthis:\n  - adjuster n w us = w\n\ngoal (1 subgoal):\n 1. adjuster n w us + w = 0\\<^sub>v n \\<Longrightarrow> False", "moreover"], ["proof (state)\nthis:\n  - adjuster n w us = w\n\ngoal (1 subgoal):\n 1. adjuster n w us + w = 0\\<^sub>v n \\<Longrightarrow> False", "have \"- ?a : span (set us)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. - adjuster n w us \\<in> local.span (set us)", "using span_neg[OF U adjuster_in_span[OF w U dist]]"], ["proof (prove)\nusing this:\n  \\<ominus>\\<^bsub>V\\<^esub> adjuster n w us \\<in> local.span (set us)\n\ngoal (1 subgoal):\n 1. - adjuster n w us \\<in> local.span (set us)", "by auto"], ["proof (state)\nthis:\n  - adjuster n w us \\<in> local.span (set us)\n\ngoal (1 subgoal):\n 1. adjuster n w us + w = 0\\<^sub>v n \\<Longrightarrow> False", "ultimately"], ["proof (chain)\npicking this:\n  - adjuster n w us = w\n  - adjuster n w us \\<in> local.span (set us)", "show \"False\""], ["proof (prove)\nusing this:\n  - adjuster n w us = w\n  - adjuster n w us \\<in> local.span (set us)\n\ngoal (1 subgoal):\n 1. False", "using wsU"], ["proof (prove)\nusing this:\n  - adjuster n w us = w\n  - adjuster n w us \\<in> local.span (set us)\n  w \\<notin> local.span (set us)\n\ngoal (1 subgoal):\n 1. False", "by auto"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma adjust_orthogonal:\n  assumes U: \"set (us :: 'a vec list) \\<subseteq> carrier_vec n\"\n    and orth: \"corthogonal us\"\n    and w[simp]: \"w : carrier_vec n\"\n    and wsU: \"w \\<notin> span (set us)\"\n  shows \"corthogonal ((adjuster n w us + w) # us)\"\n    (is \"corthogonal (?aw # _)\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. corthogonal ((adjuster n w us + w) # us)", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>i < length ((adjuster n w us + w) # us);\n        j < length ((adjuster n w us + w) # us)\\<rbrakk>\n       \\<Longrightarrow> (((adjuster n w us + w) # us) ! i \\<bullet>c\n                          ((adjuster n w us + w) # us) ! j =\n                          (0::'a)) =\n                         (i \\<noteq> j)", "have dist: \"distinct us\""], ["proof (prove)\ngoal (1 subgoal):\n 1. distinct us", "using corthogonal_distinct orth"], ["proof (prove)\nusing this:\n  corthogonal ?us \\<Longrightarrow> distinct ?us\n  corthogonal us\n\ngoal (1 subgoal):\n 1. distinct us", "by auto"], ["proof (state)\nthis:\n  distinct us\n\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>i < length ((adjuster n w us + w) # us);\n        j < length ((adjuster n w us + w) # us)\\<rbrakk>\n       \\<Longrightarrow> (((adjuster n w us + w) # us) ! i \\<bullet>c\n                          ((adjuster n w us + w) # us) ! j =\n                          (0::'a)) =\n                         (i \\<noteq> j)", "have aw[simp]: \"?aw : carrier_vec n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. adjuster n w us + w \\<in> carrier_vec n", "using U dist"], ["proof (prove)\nusing this:\n  set us \\<subseteq> carrier_vec n\n  distinct us\n\ngoal (1 subgoal):\n 1. adjuster n w us + w \\<in> carrier_vec n", "by auto"], ["proof (state)\nthis:\n  adjuster n w us + w \\<in> carrier_vec n\n\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>i < length ((adjuster n w us + w) # us);\n        j < length ((adjuster n w us + w) # us)\\<rbrakk>\n       \\<Longrightarrow> (((adjuster n w us + w) # us) ! i \\<bullet>c\n                          ((adjuster n w us + w) # us) ! j =\n                          (0::'a)) =\n                         (i \\<noteq> j)", "note adjust_nonzero[OF U dist w] wsU"], ["proof (state)\nthis:\n  w \\<notin> local.span (set us) \\<Longrightarrow>\n  adjuster n w us + w \\<noteq> 0\\<^sub>v n\n  w \\<notin> local.span (set us)\n\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>i < length ((adjuster n w us + w) # us);\n        j < length ((adjuster n w us + w) # us)\\<rbrakk>\n       \\<Longrightarrow> (((adjuster n w us + w) # us) ! i \\<bullet>c\n                          ((adjuster n w us + w) # us) ! j =\n                          (0::'a)) =\n                         (i \\<noteq> j)", "hence aw0: \"?aw \\<bullet>c ?aw \\<noteq> 0\""], ["proof (prove)\nusing this:\n  w \\<notin> local.span (set us) \\<Longrightarrow>\n  adjuster n w us + w \\<noteq> 0\\<^sub>v n\n  w \\<notin> local.span (set us)\n\ngoal (1 subgoal):\n 1. (adjuster n w us + w) \\<bullet>c (adjuster n w us + w) \\<noteq> (0::'a)", "using conjugate_square_eq_0_vec[OF aw]"], ["proof (prove)\nusing this:\n  w \\<notin> local.span (set us) \\<Longrightarrow>\n  adjuster n w us + w \\<noteq> 0\\<^sub>v n\n  w \\<notin> local.span (set us)\n  ((adjuster n w us + w) \\<bullet>c (adjuster n w us + w) = (0::'a)) =\n  (adjuster n w us + w = 0\\<^sub>v n)\n\ngoal (1 subgoal):\n 1. (adjuster n w us + w) \\<bullet>c (adjuster n w us + w) \\<noteq> (0::'a)", "by auto"], ["proof (state)\nthis:\n  (adjuster n w us + w) \\<bullet>c (adjuster n w us + w) \\<noteq> (0::'a)\n\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>i < length ((adjuster n w us + w) # us);\n        j < length ((adjuster n w us + w) # us)\\<rbrakk>\n       \\<Longrightarrow> (((adjuster n w us + w) # us) ! i \\<bullet>c\n                          ((adjuster n w us + w) # us) ! j =\n                          (0::'a)) =\n                         (i \\<noteq> j)", "fix i j"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>i < length ((adjuster n w us + w) # us);\n        j < length ((adjuster n w us + w) # us)\\<rbrakk>\n       \\<Longrightarrow> (((adjuster n w us + w) # us) ! i \\<bullet>c\n                          ((adjuster n w us + w) # us) ! j =\n                          (0::'a)) =\n                         (i \\<noteq> j)", "assume i: \"i < length (?aw # us)\" and j: \"j < length (?aw # us)\""], ["proof (state)\nthis:\n  i < length ((adjuster n w us + w) # us)\n  j < length ((adjuster n w us + w) # us)\n\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>i < length ((adjuster n w us + w) # us);\n        j < length ((adjuster n w us + w) # us)\\<rbrakk>\n       \\<Longrightarrow> (((adjuster n w us + w) # us) ! i \\<bullet>c\n                          ((adjuster n w us + w) # us) ! j =\n                          (0::'a)) =\n                         (i \\<noteq> j)", "show \"((?aw # us) ! i \\<bullet>c (?aw # us) ! j = 0) = (i \\<noteq> j)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (((adjuster n w us + w) # us) ! i \\<bullet>c\n     ((adjuster n w us + w) # us) ! j =\n     (0::'a)) =\n    (i \\<noteq> j)", "proof (cases \"i = 0\")"], ["proof (state)\ngoal (2 subgoals):\n 1. i = 0 \\<Longrightarrow>\n    (((adjuster n w us + w) # us) ! i \\<bullet>c\n     ((adjuster n w us + w) # us) ! j =\n     (0::'a)) =\n    (i \\<noteq> j)\n 2. i \\<noteq> 0 \\<Longrightarrow>\n    (((adjuster n w us + w) # us) ! i \\<bullet>c\n     ((adjuster n w us + w) # us) ! j =\n     (0::'a)) =\n    (i \\<noteq> j)", "case True"], ["proof (state)\nthis:\n  i = 0\n\ngoal (2 subgoals):\n 1. i = 0 \\<Longrightarrow>\n    (((adjuster n w us + w) # us) ! i \\<bullet>c\n     ((adjuster n w us + w) # us) ! j =\n     (0::'a)) =\n    (i \\<noteq> j)\n 2. i \\<noteq> 0 \\<Longrightarrow>\n    (((adjuster n w us + w) # us) ! i \\<bullet>c\n     ((adjuster n w us + w) # us) ! j =\n     (0::'a)) =\n    (i \\<noteq> j)", "note i0 = this"], ["proof (state)\nthis:\n  i = 0\n\ngoal (2 subgoals):\n 1. i = 0 \\<Longrightarrow>\n    (((adjuster n w us + w) # us) ! i \\<bullet>c\n     ((adjuster n w us + w) # us) ! j =\n     (0::'a)) =\n    (i \\<noteq> j)\n 2. i \\<noteq> 0 \\<Longrightarrow>\n    (((adjuster n w us + w) # us) ! i \\<bullet>c\n     ((adjuster n w us + w) # us) ! j =\n     (0::'a)) =\n    (i \\<noteq> j)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. (((adjuster n w us + w) # us) ! i \\<bullet>c\n     ((adjuster n w us + w) # us) ! j =\n     (0::'a)) =\n    (i \\<noteq> j)", "proof (cases \"j = 0\")"], ["proof (state)\ngoal (2 subgoals):\n 1. j = 0 \\<Longrightarrow>\n    (((adjuster n w us + w) # us) ! i \\<bullet>c\n     ((adjuster n w us + w) # us) ! j =\n     (0::'a)) =\n    (i \\<noteq> j)\n 2. j \\<noteq> 0 \\<Longrightarrow>\n    (((adjuster n w us + w) # us) ! i \\<bullet>c\n     ((adjuster n w us + w) # us) ! j =\n     (0::'a)) =\n    (i \\<noteq> j)", "case True"], ["proof (state)\nthis:\n  j = 0\n\ngoal (2 subgoals):\n 1. j = 0 \\<Longrightarrow>\n    (((adjuster n w us + w) # us) ! i \\<bullet>c\n     ((adjuster n w us + w) # us) ! j =\n     (0::'a)) =\n    (i \\<noteq> j)\n 2. j \\<noteq> 0 \\<Longrightarrow>\n    (((adjuster n w us + w) # us) ! i \\<bullet>c\n     ((adjuster n w us + w) # us) ! j =\n     (0::'a)) =\n    (i \\<noteq> j)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. (((adjuster n w us + w) # us) ! i \\<bullet>c\n     ((adjuster n w us + w) # us) ! j =\n     (0::'a)) =\n    (i \\<noteq> j)", "unfolding True i0"], ["proof (prove)\ngoal (1 subgoal):\n 1. (((adjuster n w us + w) # us) ! 0 \\<bullet>c\n     ((adjuster n w us + w) # us) ! 0 =\n     (0::'a)) =\n    (0 \\<noteq> 0)", "using aw0"], ["proof (prove)\nusing this:\n  (adjuster n w us + w) \\<bullet>c (adjuster n w us + w) \\<noteq> (0::'a)\n\ngoal (1 subgoal):\n 1. (((adjuster n w us + w) # us) ! 0 \\<bullet>c\n     ((adjuster n w us + w) # us) ! 0 =\n     (0::'a)) =\n    (0 \\<noteq> 0)", "by auto"], ["proof (state)\nthis:\n  (((adjuster n w us + w) # us) ! i \\<bullet>c\n   ((adjuster n w us + w) # us) ! j =\n   (0::'a)) =\n  (i \\<noteq> j)\n\ngoal (1 subgoal):\n 1. j \\<noteq> 0 \\<Longrightarrow>\n    (((adjuster n w us + w) # us) ! i \\<bullet>c\n     ((adjuster n w us + w) # us) ! j =\n     (0::'a)) =\n    (i \\<noteq> j)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. j \\<noteq> 0 \\<Longrightarrow>\n    (((adjuster n w us + w) # us) ! i \\<bullet>c\n     ((adjuster n w us + w) # us) ! j =\n     (0::'a)) =\n    (i \\<noteq> j)", "case False"], ["proof (state)\nthis:\n  j \\<noteq> 0\n\ngoal (1 subgoal):\n 1. j \\<noteq> 0 \\<Longrightarrow>\n    (((adjuster n w us + w) # us) ! i \\<bullet>c\n     ((adjuster n w us + w) # us) ! j =\n     (0::'a)) =\n    (i \\<noteq> j)", "define j' where \"j' = j-1\""], ["proof (state)\nthis:\n  j' = j - 1\n\ngoal (1 subgoal):\n 1. j \\<noteq> 0 \\<Longrightarrow>\n    (((adjuster n w us + w) # us) ! i \\<bullet>c\n     ((adjuster n w us + w) # us) ! j =\n     (0::'a)) =\n    (i \\<noteq> j)", "hence jfold: \"j = j'+1\""], ["proof (prove)\nusing this:\n  j' = j - 1\n\ngoal (1 subgoal):\n 1. j = j' + 1", "using False"], ["proof (prove)\nusing this:\n  j' = j - 1\n  j \\<noteq> 0\n\ngoal (1 subgoal):\n 1. j = j' + 1", "by auto"], ["proof (state)\nthis:\n  j = j' + 1\n\ngoal (1 subgoal):\n 1. j \\<noteq> 0 \\<Longrightarrow>\n    (((adjuster n w us + w) # us) ! i \\<bullet>c\n     ((adjuster n w us + w) # us) ! j =\n     (0::'a)) =\n    (i \\<noteq> j)", "hence j': \"j' < length us\""], ["proof (prove)\nusing this:\n  j = j' + 1\n\ngoal (1 subgoal):\n 1. j' < length us", "using j"], ["proof (prove)\nusing this:\n  j = j' + 1\n  j < length ((adjuster n w us + w) # us)\n\ngoal (1 subgoal):\n 1. j' < length us", "by auto"], ["proof (state)\nthis:\n  j' < length us\n\ngoal (1 subgoal):\n 1. j \\<noteq> 0 \\<Longrightarrow>\n    (((adjuster n w us + w) # us) ! i \\<bullet>c\n     ((adjuster n w us + w) # us) ! j =\n     (0::'a)) =\n    (i \\<noteq> j)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. (((adjuster n w us + w) # us) ! i \\<bullet>c\n     ((adjuster n w us + w) # us) ! j =\n     (0::'a)) =\n    (i \\<noteq> j)", "unfolding i0 jfold"], ["proof (prove)\ngoal (1 subgoal):\n 1. (((adjuster n w us + w) # us) ! 0 \\<bullet>c\n     ((adjuster n w us + w) # us) ! (j' + 1) =\n     (0::'a)) =\n    (0 \\<noteq> j' + 1)", "using adjust_zero[OF U orth w j']"], ["proof (prove)\nusing this:\n  (adjuster n w us + w) \\<bullet>c us ! j' = (0::'a)\n\ngoal (1 subgoal):\n 1. (((adjuster n w us + w) # us) ! 0 \\<bullet>c\n     ((adjuster n w us + w) # us) ! (j' + 1) =\n     (0::'a)) =\n    (0 \\<noteq> j' + 1)", "by auto"], ["proof (state)\nthis:\n  (((adjuster n w us + w) # us) ! i \\<bullet>c\n   ((adjuster n w us + w) # us) ! j =\n   (0::'a)) =\n  (i \\<noteq> j)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (((adjuster n w us + w) # us) ! i \\<bullet>c\n   ((adjuster n w us + w) # us) ! j =\n   (0::'a)) =\n  (i \\<noteq> j)\n\ngoal (1 subgoal):\n 1. i \\<noteq> 0 \\<Longrightarrow>\n    (((adjuster n w us + w) # us) ! i \\<bullet>c\n     ((adjuster n w us + w) # us) ! j =\n     (0::'a)) =\n    (i \\<noteq> j)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. i \\<noteq> 0 \\<Longrightarrow>\n    (((adjuster n w us + w) # us) ! i \\<bullet>c\n     ((adjuster n w us + w) # us) ! j =\n     (0::'a)) =\n    (i \\<noteq> j)", "case False"], ["proof (state)\nthis:\n  i \\<noteq> 0\n\ngoal (1 subgoal):\n 1. i \\<noteq> 0 \\<Longrightarrow>\n    (((adjuster n w us + w) # us) ! i \\<bullet>c\n     ((adjuster n w us + w) # us) ! j =\n     (0::'a)) =\n    (i \\<noteq> j)", "define i' where \"i' = i-1\""], ["proof (state)\nthis:\n  i' = i - 1\n\ngoal (1 subgoal):\n 1. i \\<noteq> 0 \\<Longrightarrow>\n    (((adjuster n w us + w) # us) ! i \\<bullet>c\n     ((adjuster n w us + w) # us) ! j =\n     (0::'a)) =\n    (i \\<noteq> j)", "hence ifold: \"i = i'+1\""], ["proof (prove)\nusing this:\n  i' = i - 1\n\ngoal (1 subgoal):\n 1. i = i' + 1", "using False"], ["proof (prove)\nusing this:\n  i' = i - 1\n  i \\<noteq> 0\n\ngoal (1 subgoal):\n 1. i = i' + 1", "by auto"], ["proof (state)\nthis:\n  i = i' + 1\n\ngoal (1 subgoal):\n 1. i \\<noteq> 0 \\<Longrightarrow>\n    (((adjuster n w us + w) # us) ! i \\<bullet>c\n     ((adjuster n w us + w) # us) ! j =\n     (0::'a)) =\n    (i \\<noteq> j)", "hence i': \"i' < length us\""], ["proof (prove)\nusing this:\n  i = i' + 1\n\ngoal (1 subgoal):\n 1. i' < length us", "using i"], ["proof (prove)\nusing this:\n  i = i' + 1\n  i < length ((adjuster n w us + w) # us)\n\ngoal (1 subgoal):\n 1. i' < length us", "by auto"], ["proof (state)\nthis:\n  i' < length us\n\ngoal (1 subgoal):\n 1. i \\<noteq> 0 \\<Longrightarrow>\n    (((adjuster n w us + w) # us) ! i \\<bullet>c\n     ((adjuster n w us + w) # us) ! j =\n     (0::'a)) =\n    (i \\<noteq> j)", "have [simp]: \"us ! i' : carrier_vec n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. us ! i' \\<in> carrier_vec n", "using U i'"], ["proof (prove)\nusing this:\n  set us \\<subseteq> carrier_vec n\n  i' < length us\n\ngoal (1 subgoal):\n 1. us ! i' \\<in> carrier_vec n", "by auto"], ["proof (state)\nthis:\n  us ! i' \\<in> carrier_vec n\n\ngoal (1 subgoal):\n 1. i \\<noteq> 0 \\<Longrightarrow>\n    (((adjuster n w us + w) # us) ! i \\<bullet>c\n     ((adjuster n w us + w) # us) ! j =\n     (0::'a)) =\n    (i \\<noteq> j)", "hence cu': \"conjugate (us ! i') : carrier_vec n\""], ["proof (prove)\nusing this:\n  us ! i' \\<in> carrier_vec n\n\ngoal (1 subgoal):\n 1. conjugate (us ! i') \\<in> carrier_vec n", "by auto"], ["proof (state)\nthis:\n  conjugate (us ! i') \\<in> carrier_vec n\n\ngoal (1 subgoal):\n 1. i \\<noteq> 0 \\<Longrightarrow>\n    (((adjuster n w us + w) # us) ! i \\<bullet>c\n     ((adjuster n w us + w) # us) ! j =\n     (0::'a)) =\n    (i \\<noteq> j)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. (((adjuster n w us + w) # us) ! i \\<bullet>c\n     ((adjuster n w us + w) # us) ! j =\n     (0::'a)) =\n    (i \\<noteq> j)", "proof (cases \"j = 0\")"], ["proof (state)\ngoal (2 subgoals):\n 1. j = 0 \\<Longrightarrow>\n    (((adjuster n w us + w) # us) ! i \\<bullet>c\n     ((adjuster n w us + w) # us) ! j =\n     (0::'a)) =\n    (i \\<noteq> j)\n 2. j \\<noteq> 0 \\<Longrightarrow>\n    (((adjuster n w us + w) # us) ! i \\<bullet>c\n     ((adjuster n w us + w) # us) ! j =\n     (0::'a)) =\n    (i \\<noteq> j)", "case True"], ["proof (state)\nthis:\n  j = 0\n\ngoal (2 subgoals):\n 1. j = 0 \\<Longrightarrow>\n    (((adjuster n w us + w) # us) ! i \\<bullet>c\n     ((adjuster n w us + w) # us) ! j =\n     (0::'a)) =\n    (i \\<noteq> j)\n 2. j \\<noteq> 0 \\<Longrightarrow>\n    (((adjuster n w us + w) # us) ! i \\<bullet>c\n     ((adjuster n w us + w) # us) ! j =\n     (0::'a)) =\n    (i \\<noteq> j)", "{"], ["proof (state)\nthis:\n  j = 0\n\ngoal (2 subgoals):\n 1. j = 0 \\<Longrightarrow>\n    (((adjuster n w us + w) # us) ! i \\<bullet>c\n     ((adjuster n w us + w) # us) ! j =\n     (0::'a)) =\n    (i \\<noteq> j)\n 2. j \\<noteq> 0 \\<Longrightarrow>\n    (((adjuster n w us + w) # us) ! i \\<bullet>c\n     ((adjuster n w us + w) # us) ! j =\n     (0::'a)) =\n    (i \\<noteq> j)", "assume \"?aw \\<bullet>c us ! i' = 0\""], ["proof (state)\nthis:\n  (adjuster n w us + w) \\<bullet>c us ! i' = (0::'a)\n\ngoal (2 subgoals):\n 1. j = 0 \\<Longrightarrow>\n    (((adjuster n w us + w) # us) ! i \\<bullet>c\n     ((adjuster n w us + w) # us) ! j =\n     (0::'a)) =\n    (i \\<noteq> j)\n 2. j \\<noteq> 0 \\<Longrightarrow>\n    (((adjuster n w us + w) # us) ! i \\<bullet>c\n     ((adjuster n w us + w) # us) ! j =\n     (0::'a)) =\n    (i \\<noteq> j)", "hence \"conjugate (?aw \\<bullet>c us ! i') = 0\""], ["proof (prove)\nusing this:\n  (adjuster n w us + w) \\<bullet>c us ! i' = (0::'a)\n\ngoal (1 subgoal):\n 1. conjugate ((adjuster n w us + w) \\<bullet>c us ! i') = (0::'a)", "using conjugate_zero"], ["proof (prove)\nusing this:\n  (adjuster n w us + w) \\<bullet>c us ! i' = (0::'a)\n  conjugate (0::?'a) = (0::?'a)\n\ngoal (1 subgoal):\n 1. conjugate ((adjuster n w us + w) \\<bullet>c us ! i') = (0::'a)", "by auto"], ["proof (state)\nthis:\n  conjugate ((adjuster n w us + w) \\<bullet>c us ! i') = (0::'a)\n\ngoal (2 subgoals):\n 1. j = 0 \\<Longrightarrow>\n    (((adjuster n w us + w) # us) ! i \\<bullet>c\n     ((adjuster n w us + w) # us) ! j =\n     (0::'a)) =\n    (i \\<noteq> j)\n 2. j \\<noteq> 0 \\<Longrightarrow>\n    (((adjuster n w us + w) # us) ! i \\<bullet>c\n     ((adjuster n w us + w) # us) ! j =\n     (0::'a)) =\n    (i \\<noteq> j)", "hence \"conjugate ?aw \\<bullet> us ! i' = 0\""], ["proof (prove)\nusing this:\n  conjugate ((adjuster n w us + w) \\<bullet>c us ! i') = (0::'a)\n\ngoal (1 subgoal):\n 1. conjugate (adjuster n w us + w) \\<bullet> us ! i' = (0::'a)", "using conjugate_sprod_vec[OF aw cu']"], ["proof (prove)\nusing this:\n  conjugate ((adjuster n w us + w) \\<bullet>c us ! i') = (0::'a)\n  conjugate ((adjuster n w us + w) \\<bullet>c us ! i') =\n  conjugate (adjuster n w us + w) \\<bullet>c conjugate (us ! i')\n\ngoal (1 subgoal):\n 1. conjugate (adjuster n w us + w) \\<bullet> us ! i' = (0::'a)", "by auto"], ["proof (state)\nthis:\n  conjugate (adjuster n w us + w) \\<bullet> us ! i' = (0::'a)\n\ngoal (2 subgoals):\n 1. j = 0 \\<Longrightarrow>\n    (((adjuster n w us + w) # us) ! i \\<bullet>c\n     ((adjuster n w us + w) # us) ! j =\n     (0::'a)) =\n    (i \\<noteq> j)\n 2. j \\<noteq> 0 \\<Longrightarrow>\n    (((adjuster n w us + w) # us) ! i \\<bullet>c\n     ((adjuster n w us + w) # us) ! j =\n     (0::'a)) =\n    (i \\<noteq> j)", "}"], ["proof (state)\nthis:\n  (adjuster n w us + w) \\<bullet>c us ! i' = (0::'a) \\<Longrightarrow>\n  conjugate (adjuster n w us + w) \\<bullet> us ! i' = (0::'a)\n\ngoal (2 subgoals):\n 1. j = 0 \\<Longrightarrow>\n    (((adjuster n w us + w) # us) ! i \\<bullet>c\n     ((adjuster n w us + w) # us) ! j =\n     (0::'a)) =\n    (i \\<noteq> j)\n 2. j \\<noteq> 0 \\<Longrightarrow>\n    (((adjuster n w us + w) # us) ! i \\<bullet>c\n     ((adjuster n w us + w) # us) ! j =\n     (0::'a)) =\n    (i \\<noteq> j)", "thus ?thesis"], ["proof (prove)\nusing this:\n  (adjuster n w us + w) \\<bullet>c us ! i' = (0::'a) \\<Longrightarrow>\n  conjugate (adjuster n w us + w) \\<bullet> us ! i' = (0::'a)\n\ngoal (1 subgoal):\n 1. (((adjuster n w us + w) # us) ! i \\<bullet>c\n     ((adjuster n w us + w) # us) ! j =\n     (0::'a)) =\n    (i \\<noteq> j)", "unfolding True ifold"], ["proof (prove)\nusing this:\n  (adjuster n w us + w) \\<bullet>c us ! i' = (0::'a) \\<Longrightarrow>\n  conjugate (adjuster n w us + w) \\<bullet> us ! i' = (0::'a)\n\ngoal (1 subgoal):\n 1. (((adjuster n w us + w) # us) ! (i' + 1) \\<bullet>c\n     ((adjuster n w us + w) # us) ! 0 =\n     (0::'a)) =\n    (i' + 1 \\<noteq> 0)", "using adjust_zero[OF U orth w i']"], ["proof (prove)\nusing this:\n  (adjuster n w us + w) \\<bullet>c us ! i' = (0::'a) \\<Longrightarrow>\n  conjugate (adjuster n w us + w) \\<bullet> us ! i' = (0::'a)\n  (adjuster n w us + w) \\<bullet>c us ! i' = (0::'a)\n\ngoal (1 subgoal):\n 1. (((adjuster n w us + w) # us) ! (i' + 1) \\<bullet>c\n     ((adjuster n w us + w) # us) ! 0 =\n     (0::'a)) =\n    (i' + 1 \\<noteq> 0)", "by (subst comm_scalar_prod[of _ n], auto)"], ["proof (state)\nthis:\n  (((adjuster n w us + w) # us) ! i \\<bullet>c\n   ((adjuster n w us + w) # us) ! j =\n   (0::'a)) =\n  (i \\<noteq> j)\n\ngoal (1 subgoal):\n 1. j \\<noteq> 0 \\<Longrightarrow>\n    (((adjuster n w us + w) # us) ! i \\<bullet>c\n     ((adjuster n w us + w) # us) ! j =\n     (0::'a)) =\n    (i \\<noteq> j)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. j \\<noteq> 0 \\<Longrightarrow>\n    (((adjuster n w us + w) # us) ! i \\<bullet>c\n     ((adjuster n w us + w) # us) ! j =\n     (0::'a)) =\n    (i \\<noteq> j)", "case False"], ["proof (state)\nthis:\n  j \\<noteq> 0\n\ngoal (1 subgoal):\n 1. j \\<noteq> 0 \\<Longrightarrow>\n    (((adjuster n w us + w) # us) ! i \\<bullet>c\n     ((adjuster n w us + w) # us) ! j =\n     (0::'a)) =\n    (i \\<noteq> j)", "define j' where \"j' = j-1\""], ["proof (state)\nthis:\n  j' = j - 1\n\ngoal (1 subgoal):\n 1. j \\<noteq> 0 \\<Longrightarrow>\n    (((adjuster n w us + w) # us) ! i \\<bullet>c\n     ((adjuster n w us + w) # us) ! j =\n     (0::'a)) =\n    (i \\<noteq> j)", "hence jfold: \"j = j'+1\""], ["proof (prove)\nusing this:\n  j' = j - 1\n\ngoal (1 subgoal):\n 1. j = j' + 1", "using False"], ["proof (prove)\nusing this:\n  j' = j - 1\n  j \\<noteq> 0\n\ngoal (1 subgoal):\n 1. j = j' + 1", "by auto"], ["proof (state)\nthis:\n  j = j' + 1\n\ngoal (1 subgoal):\n 1. j \\<noteq> 0 \\<Longrightarrow>\n    (((adjuster n w us + w) # us) ! i \\<bullet>c\n     ((adjuster n w us + w) # us) ! j =\n     (0::'a)) =\n    (i \\<noteq> j)", "hence j': \"j' < length us\""], ["proof (prove)\nusing this:\n  j = j' + 1\n\ngoal (1 subgoal):\n 1. j' < length us", "using j"], ["proof (prove)\nusing this:\n  j = j' + 1\n  j < length ((adjuster n w us + w) # us)\n\ngoal (1 subgoal):\n 1. j' < length us", "by auto"], ["proof (state)\nthis:\n  j' < length us\n\ngoal (1 subgoal):\n 1. j \\<noteq> 0 \\<Longrightarrow>\n    (((adjuster n w us + w) # us) ! i \\<bullet>c\n     ((adjuster n w us + w) # us) ! j =\n     (0::'a)) =\n    (i \\<noteq> j)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. (((adjuster n w us + w) # us) ! i \\<bullet>c\n     ((adjuster n w us + w) # us) ! j =\n     (0::'a)) =\n    (i \\<noteq> j)", "unfolding ifold jfold"], ["proof (prove)\ngoal (1 subgoal):\n 1. (((adjuster n w us + w) # us) ! (i' + 1) \\<bullet>c\n     ((adjuster n w us + w) # us) ! (j' + 1) =\n     (0::'a)) =\n    (i' + 1 \\<noteq> j' + 1)", "using orth i' j'"], ["proof (prove)\nusing this:\n  corthogonal us\n  i' < length us\n  j' < length us\n\ngoal (1 subgoal):\n 1. (((adjuster n w us + w) # us) ! (i' + 1) \\<bullet>c\n     ((adjuster n w us + w) # us) ! (j' + 1) =\n     (0::'a)) =\n    (i' + 1 \\<noteq> j' + 1)", "by (auto simp: corthogonalD)"], ["proof (state)\nthis:\n  (((adjuster n w us + w) # us) ! i \\<bullet>c\n   ((adjuster n w us + w) # us) ! j =\n   (0::'a)) =\n  (i \\<noteq> j)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (((adjuster n w us + w) # us) ! i \\<bullet>c\n   ((adjuster n w us + w) # us) ! j =\n   (0::'a)) =\n  (i \\<noteq> j)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (((adjuster n w us + w) # us) ! i \\<bullet>c\n   ((adjuster n w us + w) # us) ! j =\n   (0::'a)) =\n  (i \\<noteq> j)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma gram_schmidt_sub_span:\n  assumes w[simp]: \"w : carrier_vec n\"\n    and us: \"set us \\<subseteq> carrier_vec n\"\n    and dist: \"distinct us\"\n  shows \"span (set ((adjuster n w us + w) # us)) = span (set (w # us))\"\n  (is \"span (set (?v # _)) = span ?wU\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. local.span (set ((adjuster n w us + w) # us)) =\n    local.span (set (w # us))", "proof (cases \"w : span (set us)\")"], ["proof (state)\ngoal (2 subgoals):\n 1. w \\<in> local.span (set us) \\<Longrightarrow>\n    local.span (set ((adjuster n w us + w) # us)) =\n    local.span (set (w # us))\n 2. w \\<notin> local.span (set us) \\<Longrightarrow>\n    local.span (set ((adjuster n w us + w) # us)) =\n    local.span (set (w # us))", "case True"], ["proof (state)\nthis:\n  w \\<in> local.span (set us)\n\ngoal (2 subgoals):\n 1. w \\<in> local.span (set us) \\<Longrightarrow>\n    local.span (set ((adjuster n w us + w) # us)) =\n    local.span (set (w # us))\n 2. w \\<notin> local.span (set us) \\<Longrightarrow>\n    local.span (set ((adjuster n w us + w) # us)) =\n    local.span (set (w # us))", "hence \"?v : span (set us)\""], ["proof (prove)\nusing this:\n  w \\<in> local.span (set us)\n\ngoal (1 subgoal):\n 1. adjuster n w us + w \\<in> local.span (set us)", "using adjust_preserves_span[OF assms]"], ["proof (prove)\nusing this:\n  w \\<in> local.span (set us)\n  (w \\<in> local.span (set us)) =\n  (adjuster n w us + w \\<in> local.span (set us))\n\ngoal (1 subgoal):\n 1. adjuster n w us + w \\<in> local.span (set us)", "by auto"], ["proof (state)\nthis:\n  adjuster n w us + w \\<in> local.span (set us)\n\ngoal (2 subgoals):\n 1. w \\<in> local.span (set us) \\<Longrightarrow>\n    local.span (set ((adjuster n w us + w) # us)) =\n    local.span (set (w # us))\n 2. w \\<notin> local.span (set us) \\<Longrightarrow>\n    local.span (set ((adjuster n w us + w) # us)) =\n    local.span (set (w # us))", "thus ?thesis"], ["proof (prove)\nusing this:\n  adjuster n w us + w \\<in> local.span (set us)\n\ngoal (1 subgoal):\n 1. local.span (set ((adjuster n w us + w) # us)) =\n    local.span (set (w # us))", "using already_in_span[OF us] True"], ["proof (prove)\nusing this:\n  adjuster n w us + w \\<in> local.span (set us)\n  ?v \\<in> local.span (set us) \\<Longrightarrow>\n  local.span (set us) = local.span (set us \\<union> {?v})\n  w \\<in> local.span (set us)\n\ngoal (1 subgoal):\n 1. local.span (set ((adjuster n w us + w) # us)) =\n    local.span (set (w # us))", "by auto"], ["proof (state)\nthis:\n  local.span (set ((adjuster n w us + w) # us)) = local.span (set (w # us))\n\ngoal (1 subgoal):\n 1. w \\<notin> local.span (set us) \\<Longrightarrow>\n    local.span (set ((adjuster n w us + w) # us)) =\n    local.span (set (w # us))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. w \\<notin> local.span (set us) \\<Longrightarrow>\n    local.span (set ((adjuster n w us + w) # us)) =\n    local.span (set (w # us))", "case False"], ["proof (state)\nthis:\n  w \\<notin> local.span (set us)\n\ngoal (1 subgoal):\n 1. w \\<notin> local.span (set us) \\<Longrightarrow>\n    local.span (set ((adjuster n w us + w) # us)) =\n    local.span (set (w # us))", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. local.span (set ((adjuster n w us + w) # us)) =\n    local.span (set (w # us))", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. local.span (set ((adjuster n w us + w) # us))\n    \\<subseteq> local.span (set (w # us))\n 2. local.span (set (w # us))\n    \\<subseteq> local.span (set ((adjuster n w us + w) # us))", "have wU: \"?wU \\<subseteq> carrier_vec n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set (w # us) \\<subseteq> carrier_vec n", "using us"], ["proof (prove)\nusing this:\n  set us \\<subseteq> carrier_vec n\n\ngoal (1 subgoal):\n 1. set (w # us) \\<subseteq> carrier_vec n", "by simp"], ["proof (state)\nthis:\n  set (w # us) \\<subseteq> carrier_vec n\n\ngoal (2 subgoals):\n 1. local.span (set ((adjuster n w us + w) # us))\n    \\<subseteq> local.span (set (w # us))\n 2. local.span (set (w # us))\n    \\<subseteq> local.span (set ((adjuster n w us + w) # us))", "have vswU: \"?v : span ?wU\""], ["proof (prove)\ngoal (1 subgoal):\n 1. adjuster n w us + w \\<in> local.span (set (w # us))", "using adjust_in_span[OF assms]"], ["proof (prove)\nusing this:\n  adjuster n w us + w \\<in> local.span (insert w (set us))\n\ngoal (1 subgoal):\n 1. adjuster n w us + w \\<in> local.span (set (w # us))", "by auto"], ["proof (state)\nthis:\n  adjuster n w us + w \\<in> local.span (set (w # us))\n\ngoal (2 subgoals):\n 1. local.span (set ((adjuster n w us + w) # us))\n    \\<subseteq> local.span (set (w # us))\n 2. local.span (set (w # us))\n    \\<subseteq> local.span (set ((adjuster n w us + w) # us))", "hence v: \"?v : carrier_vec n\""], ["proof (prove)\nusing this:\n  adjuster n w us + w \\<in> local.span (set (w # us))\n\ngoal (1 subgoal):\n 1. adjuster n w us + w \\<in> carrier_vec n", "using span_closed[OF wU]"], ["proof (prove)\nusing this:\n  adjuster n w us + w \\<in> local.span (set (w # us))\n  ?v \\<in> local.span (set (w # us)) \\<Longrightarrow>\n  ?v \\<in> carrier_vec n\n\ngoal (1 subgoal):\n 1. adjuster n w us + w \\<in> carrier_vec n", "by auto"], ["proof (state)\nthis:\n  adjuster n w us + w \\<in> carrier_vec n\n\ngoal (2 subgoals):\n 1. local.span (set ((adjuster n w us + w) # us))\n    \\<subseteq> local.span (set (w # us))\n 2. local.span (set (w # us))\n    \\<subseteq> local.span (set ((adjuster n w us + w) # us))", "have wsvU: \"w : span (insert ?v (set us))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. w \\<in> local.span (insert (adjuster n w us + w) (set us))", "using in_span_adjust[OF assms]"], ["proof (prove)\nusing this:\n  w \\<in> local.span (insert (adjuster n w us + w) (set us))\n\ngoal (1 subgoal):\n 1. w \\<in> local.span (insert (adjuster n w us + w) (set us))", "."], ["proof (state)\nthis:\n  w \\<in> local.span (insert (adjuster n w us + w) (set us))\n\ngoal (2 subgoals):\n 1. local.span (set ((adjuster n w us + w) # us))\n    \\<subseteq> local.span (set (w # us))\n 2. local.span (set (w # us))\n    \\<subseteq> local.span (set ((adjuster n w us + w) # us))", "show \"span ?wU \\<subseteq> span (set (?v # us))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. local.span (set (w # us))\n    \\<subseteq> local.span (set ((adjuster n w us + w) # us))", "using span_swap[OF finite_set us w False v wsvU]"], ["proof (prove)\nusing this:\n  local.span (insert w (set us))\n  \\<subseteq> local.span (insert (adjuster n w us + w) (set us))\n\ngoal (1 subgoal):\n 1. local.span (set (w # us))\n    \\<subseteq> local.span (set ((adjuster n w us + w) # us))", "by auto"], ["proof (state)\nthis:\n  local.span (set (w # us))\n  \\<subseteq> local.span (set ((adjuster n w us + w) # us))\n\ngoal (1 subgoal):\n 1. local.span (set ((adjuster n w us + w) # us))\n    \\<subseteq> local.span (set (w # us))", "have \"?v \\<notin> span (set us)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. adjuster n w us + w \\<notin> local.span (set us)", "using False adjust_preserves_span[OF assms]"], ["proof (prove)\nusing this:\n  w \\<notin> local.span (set us)\n  (w \\<in> local.span (set us)) =\n  (adjuster n w us + w \\<in> local.span (set us))\n\ngoal (1 subgoal):\n 1. adjuster n w us + w \\<notin> local.span (set us)", "by auto"], ["proof (state)\nthis:\n  adjuster n w us + w \\<notin> local.span (set us)\n\ngoal (1 subgoal):\n 1. local.span (set ((adjuster n w us + w) # us))\n    \\<subseteq> local.span (set (w # us))", "thus \"span (set (?v # us)) \\<subseteq> span ?wU\""], ["proof (prove)\nusing this:\n  adjuster n w us + w \\<notin> local.span (set us)\n\ngoal (1 subgoal):\n 1. local.span (set ((adjuster n w us + w) # us))\n    \\<subseteq> local.span (set (w # us))", "using span_swap[OF finite_set us v _ w] vswU"], ["proof (prove)\nusing this:\n  adjuster n w us + w \\<notin> local.span (set us)\n  \\<lbrakk>adjuster n w us + w \\<notin> local.span (set us);\n   adjuster n w us + w \\<in> local.span (insert w (set us))\\<rbrakk>\n  \\<Longrightarrow> local.span (insert (adjuster n w us + w) (set us))\n                    \\<subseteq> local.span (insert w (set us))\n  adjuster n w us + w \\<in> local.span (set (w # us))\n\ngoal (1 subgoal):\n 1. local.span (set ((adjuster n w us + w) # us))\n    \\<subseteq> local.span (set (w # us))", "by auto"], ["proof (state)\nthis:\n  local.span (set ((adjuster n w us + w) # us))\n  \\<subseteq> local.span (set (w # us))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  local.span (set ((adjuster n w us + w) # us)) = local.span (set (w # us))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma gram_schmidt_sub_result:\n  assumes \"gram_schmidt_sub n us ws = us'\"\n    and \"set ws \\<subseteq> carrier_vec n\"\n    and \"set us \\<subseteq> carrier_vec n\"\n    and \"distinct (us @ ws)\"\n    and \"~ lin_dep (set (us @ ws))\"\n    and \"corthogonal us\"\n  shows \"set us' \\<subseteq> carrier_vec n \\<and>\n         distinct us' \\<and>\n         corthogonal us' \\<and>\n         span (set (us @ ws)) = span (set us') \\<and> length us' = length us + length ws\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set us' \\<subseteq> carrier_vec n \\<and>\n    distinct us' \\<and>\n    corthogonal us' \\<and>\n    local.span (set (us @ ws)) = local.span (set us') \\<and>\n    length us' = length us + length ws", "using assms"], ["proof (prove)\nusing this:\n  gram_schmidt_sub n us ws = us'\n  set ws \\<subseteq> carrier_vec n\n  set us \\<subseteq> carrier_vec n\n  distinct (us @ ws)\n  lin_indpt (set (us @ ws))\n  corthogonal us\n\ngoal (1 subgoal):\n 1. set us' \\<subseteq> carrier_vec n \\<and>\n    distinct us' \\<and>\n    corthogonal us' \\<and>\n    local.span (set (us @ ws)) = local.span (set us') \\<and>\n    length us' = length us + length ws", "proof (induct ws arbitrary: us us')"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>us us'.\n       \\<lbrakk>gram_schmidt_sub n us [] = us';\n        set [] \\<subseteq> carrier_vec n; set us \\<subseteq> carrier_vec n;\n        distinct (us @ []); lin_indpt (set (us @ []));\n        corthogonal us\\<rbrakk>\n       \\<Longrightarrow> set us' \\<subseteq> carrier_vec n \\<and>\n                         distinct us' \\<and>\n                         corthogonal us' \\<and>\n                         local.span (set (us @ [])) =\n                         local.span (set us') \\<and>\n                         length us' = length us + length []\n 2. \\<And>a ws us us'.\n       \\<lbrakk>\\<And>us us'.\n                   \\<lbrakk>gram_schmidt_sub n us ws = us';\n                    set ws \\<subseteq> carrier_vec n;\n                    set us \\<subseteq> carrier_vec n; distinct (us @ ws);\n                    lin_indpt (set (us @ ws)); corthogonal us\\<rbrakk>\n                   \\<Longrightarrow> set us'\n                                     \\<subseteq> carrier_vec n \\<and>\n                                     distinct us' \\<and>\n                                     corthogonal us' \\<and>\n                                     local.span (set (us @ ws)) =\n                                     local.span (set us') \\<and>\n                                     length us' = length us + length ws;\n        gram_schmidt_sub n us (a # ws) = us';\n        set (a # ws) \\<subseteq> carrier_vec n;\n        set us \\<subseteq> carrier_vec n; distinct (us @ a # ws);\n        lin_indpt (set (us @ a # ws)); corthogonal us\\<rbrakk>\n       \\<Longrightarrow> set us' \\<subseteq> carrier_vec n \\<and>\n                         distinct us' \\<and>\n                         corthogonal us' \\<and>\n                         local.span (set (us @ a # ws)) =\n                         local.span (set us') \\<and>\n                         length us' = length us + length (a # ws)", "case (Cons w ws)"], ["proof (state)\nthis:\n  \\<lbrakk>gram_schmidt_sub n ?us1 ws = ?us'1;\n   set ws \\<subseteq> carrier_vec n; set ?us1 \\<subseteq> carrier_vec n;\n   distinct (?us1 @ ws); lin_indpt (set (?us1 @ ws));\n   corthogonal ?us1\\<rbrakk>\n  \\<Longrightarrow> set ?us'1 \\<subseteq> carrier_vec n \\<and>\n                    distinct ?us'1 \\<and>\n                    corthogonal ?us'1 \\<and>\n                    local.span (set (?us1 @ ws)) =\n                    local.span (set ?us'1) \\<and>\n                    length ?us'1 = length ?us1 + length ws\n  gram_schmidt_sub n us (w # ws) = us'\n  set (w # ws) \\<subseteq> carrier_vec n\n  set us \\<subseteq> carrier_vec n\n  distinct (us @ w # ws)\n  lin_indpt (set (us @ w # ws))\n  corthogonal us\n\ngoal (2 subgoals):\n 1. \\<And>us us'.\n       \\<lbrakk>gram_schmidt_sub n us [] = us';\n        set [] \\<subseteq> carrier_vec n; set us \\<subseteq> carrier_vec n;\n        distinct (us @ []); lin_indpt (set (us @ []));\n        corthogonal us\\<rbrakk>\n       \\<Longrightarrow> set us' \\<subseteq> carrier_vec n \\<and>\n                         distinct us' \\<and>\n                         corthogonal us' \\<and>\n                         local.span (set (us @ [])) =\n                         local.span (set us') \\<and>\n                         length us' = length us + length []\n 2. \\<And>a ws us us'.\n       \\<lbrakk>\\<And>us us'.\n                   \\<lbrakk>gram_schmidt_sub n us ws = us';\n                    set ws \\<subseteq> carrier_vec n;\n                    set us \\<subseteq> carrier_vec n; distinct (us @ ws);\n                    lin_indpt (set (us @ ws)); corthogonal us\\<rbrakk>\n                   \\<Longrightarrow> set us'\n                                     \\<subseteq> carrier_vec n \\<and>\n                                     distinct us' \\<and>\n                                     corthogonal us' \\<and>\n                                     local.span (set (us @ ws)) =\n                                     local.span (set us') \\<and>\n                                     length us' = length us + length ws;\n        gram_schmidt_sub n us (a # ws) = us';\n        set (a # ws) \\<subseteq> carrier_vec n;\n        set us \\<subseteq> carrier_vec n; distinct (us @ a # ws);\n        lin_indpt (set (us @ a # ws)); corthogonal us\\<rbrakk>\n       \\<Longrightarrow> set us' \\<subseteq> carrier_vec n \\<and>\n                         distinct us' \\<and>\n                         corthogonal us' \\<and>\n                         local.span (set (us @ a # ws)) =\n                         local.span (set us') \\<and>\n                         length us' = length us + length (a # ws)", "let ?v = \"adjuster n w us\""], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>us us'.\n       \\<lbrakk>gram_schmidt_sub n us [] = us';\n        set [] \\<subseteq> carrier_vec n; set us \\<subseteq> carrier_vec n;\n        distinct (us @ []); lin_indpt (set (us @ []));\n        corthogonal us\\<rbrakk>\n       \\<Longrightarrow> set us' \\<subseteq> carrier_vec n \\<and>\n                         distinct us' \\<and>\n                         corthogonal us' \\<and>\n                         local.span (set (us @ [])) =\n                         local.span (set us') \\<and>\n                         length us' = length us + length []\n 2. \\<And>a ws us us'.\n       \\<lbrakk>\\<And>us us'.\n                   \\<lbrakk>gram_schmidt_sub n us ws = us';\n                    set ws \\<subseteq> carrier_vec n;\n                    set us \\<subseteq> carrier_vec n; distinct (us @ ws);\n                    lin_indpt (set (us @ ws)); corthogonal us\\<rbrakk>\n                   \\<Longrightarrow> set us'\n                                     \\<subseteq> carrier_vec n \\<and>\n                                     distinct us' \\<and>\n                                     corthogonal us' \\<and>\n                                     local.span (set (us @ ws)) =\n                                     local.span (set us') \\<and>\n                                     length us' = length us + length ws;\n        gram_schmidt_sub n us (a # ws) = us';\n        set (a # ws) \\<subseteq> carrier_vec n;\n        set us \\<subseteq> carrier_vec n; distinct (us @ a # ws);\n        lin_indpt (set (us @ a # ws)); corthogonal us\\<rbrakk>\n       \\<Longrightarrow> set us' \\<subseteq> carrier_vec n \\<and>\n                         distinct us' \\<and>\n                         corthogonal us' \\<and>\n                         local.span (set (us @ a # ws)) =\n                         local.span (set us') \\<and>\n                         length us' = length us + length (a # ws)", "have wW[simp]: \"set (w#ws) \\<subseteq> carrier_vec n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set (w # ws) \\<subseteq> carrier_vec n", "using Cons"], ["proof (prove)\nusing this:\n  \\<lbrakk>gram_schmidt_sub n ?us1 ws = ?us'1;\n   set ws \\<subseteq> carrier_vec n; set ?us1 \\<subseteq> carrier_vec n;\n   distinct (?us1 @ ws); lin_indpt (set (?us1 @ ws));\n   corthogonal ?us1\\<rbrakk>\n  \\<Longrightarrow> set ?us'1 \\<subseteq> carrier_vec n \\<and>\n                    distinct ?us'1 \\<and>\n                    corthogonal ?us'1 \\<and>\n                    local.span (set (?us1 @ ws)) =\n                    local.span (set ?us'1) \\<and>\n                    length ?us'1 = length ?us1 + length ws\n  gram_schmidt_sub n us (w # ws) = us'\n  set (w # ws) \\<subseteq> carrier_vec n\n  set us \\<subseteq> carrier_vec n\n  distinct (us @ w # ws)\n  lin_indpt (set (us @ w # ws))\n  corthogonal us\n\ngoal (1 subgoal):\n 1. set (w # ws) \\<subseteq> carrier_vec n", "by simp"], ["proof (state)\nthis:\n  set (w # ws) \\<subseteq> carrier_vec n\n\ngoal (2 subgoals):\n 1. \\<And>us us'.\n       \\<lbrakk>gram_schmidt_sub n us [] = us';\n        set [] \\<subseteq> carrier_vec n; set us \\<subseteq> carrier_vec n;\n        distinct (us @ []); lin_indpt (set (us @ []));\n        corthogonal us\\<rbrakk>\n       \\<Longrightarrow> set us' \\<subseteq> carrier_vec n \\<and>\n                         distinct us' \\<and>\n                         corthogonal us' \\<and>\n                         local.span (set (us @ [])) =\n                         local.span (set us') \\<and>\n                         length us' = length us + length []\n 2. \\<And>a ws us us'.\n       \\<lbrakk>\\<And>us us'.\n                   \\<lbrakk>gram_schmidt_sub n us ws = us';\n                    set ws \\<subseteq> carrier_vec n;\n                    set us \\<subseteq> carrier_vec n; distinct (us @ ws);\n                    lin_indpt (set (us @ ws)); corthogonal us\\<rbrakk>\n                   \\<Longrightarrow> set us'\n                                     \\<subseteq> carrier_vec n \\<and>\n                                     distinct us' \\<and>\n                                     corthogonal us' \\<and>\n                                     local.span (set (us @ ws)) =\n                                     local.span (set us') \\<and>\n                                     length us' = length us + length ws;\n        gram_schmidt_sub n us (a # ws) = us';\n        set (a # ws) \\<subseteq> carrier_vec n;\n        set us \\<subseteq> carrier_vec n; distinct (us @ a # ws);\n        lin_indpt (set (us @ a # ws)); corthogonal us\\<rbrakk>\n       \\<Longrightarrow> set us' \\<subseteq> carrier_vec n \\<and>\n                         distinct us' \\<and>\n                         corthogonal us' \\<and>\n                         local.span (set (us @ a # ws)) =\n                         local.span (set us') \\<and>\n                         length us' = length us + length (a # ws)", "hence W[simp]: \"set ws \\<subseteq> carrier_vec n\"\n   and w[simp]: \"w : carrier_vec n\""], ["proof (prove)\nusing this:\n  set (w # ws) \\<subseteq> carrier_vec n\n\ngoal (1 subgoal):\n 1. set ws \\<subseteq> carrier_vec n &&& w \\<in> carrier_vec n", "by auto"], ["proof (state)\nthis:\n  set ws \\<subseteq> carrier_vec n\n  w \\<in> carrier_vec n\n\ngoal (2 subgoals):\n 1. \\<And>us us'.\n       \\<lbrakk>gram_schmidt_sub n us [] = us';\n        set [] \\<subseteq> carrier_vec n; set us \\<subseteq> carrier_vec n;\n        distinct (us @ []); lin_indpt (set (us @ []));\n        corthogonal us\\<rbrakk>\n       \\<Longrightarrow> set us' \\<subseteq> carrier_vec n \\<and>\n                         distinct us' \\<and>\n                         corthogonal us' \\<and>\n                         local.span (set (us @ [])) =\n                         local.span (set us') \\<and>\n                         length us' = length us + length []\n 2. \\<And>a ws us us'.\n       \\<lbrakk>\\<And>us us'.\n                   \\<lbrakk>gram_schmidt_sub n us ws = us';\n                    set ws \\<subseteq> carrier_vec n;\n                    set us \\<subseteq> carrier_vec n; distinct (us @ ws);\n                    lin_indpt (set (us @ ws)); corthogonal us\\<rbrakk>\n                   \\<Longrightarrow> set us'\n                                     \\<subseteq> carrier_vec n \\<and>\n                                     distinct us' \\<and>\n                                     corthogonal us' \\<and>\n                                     local.span (set (us @ ws)) =\n                                     local.span (set us') \\<and>\n                                     length us' = length us + length ws;\n        gram_schmidt_sub n us (a # ws) = us';\n        set (a # ws) \\<subseteq> carrier_vec n;\n        set us \\<subseteq> carrier_vec n; distinct (us @ a # ws);\n        lin_indpt (set (us @ a # ws)); corthogonal us\\<rbrakk>\n       \\<Longrightarrow> set us' \\<subseteq> carrier_vec n \\<and>\n                         distinct us' \\<and>\n                         corthogonal us' \\<and>\n                         local.span (set (us @ a # ws)) =\n                         local.span (set us') \\<and>\n                         length us' = length us + length (a # ws)", "have U[simp]: \"set us \\<subseteq> carrier_vec n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set us \\<subseteq> carrier_vec n", "using Cons"], ["proof (prove)\nusing this:\n  \\<lbrakk>gram_schmidt_sub n ?us1 ws = ?us'1;\n   set ws \\<subseteq> carrier_vec n; set ?us1 \\<subseteq> carrier_vec n;\n   distinct (?us1 @ ws); lin_indpt (set (?us1 @ ws));\n   corthogonal ?us1\\<rbrakk>\n  \\<Longrightarrow> set ?us'1 \\<subseteq> carrier_vec n \\<and>\n                    distinct ?us'1 \\<and>\n                    corthogonal ?us'1 \\<and>\n                    local.span (set (?us1 @ ws)) =\n                    local.span (set ?us'1) \\<and>\n                    length ?us'1 = length ?us1 + length ws\n  gram_schmidt_sub n us (w # ws) = us'\n  set (w # ws) \\<subseteq> carrier_vec n\n  set us \\<subseteq> carrier_vec n\n  distinct (us @ w # ws)\n  lin_indpt (set (us @ w # ws))\n  corthogonal us\n\ngoal (1 subgoal):\n 1. set us \\<subseteq> carrier_vec n", "by simp"], ["proof (state)\nthis:\n  set us \\<subseteq> carrier_vec n\n\ngoal (2 subgoals):\n 1. \\<And>us us'.\n       \\<lbrakk>gram_schmidt_sub n us [] = us';\n        set [] \\<subseteq> carrier_vec n; set us \\<subseteq> carrier_vec n;\n        distinct (us @ []); lin_indpt (set (us @ []));\n        corthogonal us\\<rbrakk>\n       \\<Longrightarrow> set us' \\<subseteq> carrier_vec n \\<and>\n                         distinct us' \\<and>\n                         corthogonal us' \\<and>\n                         local.span (set (us @ [])) =\n                         local.span (set us') \\<and>\n                         length us' = length us + length []\n 2. \\<And>a ws us us'.\n       \\<lbrakk>\\<And>us us'.\n                   \\<lbrakk>gram_schmidt_sub n us ws = us';\n                    set ws \\<subseteq> carrier_vec n;\n                    set us \\<subseteq> carrier_vec n; distinct (us @ ws);\n                    lin_indpt (set (us @ ws)); corthogonal us\\<rbrakk>\n                   \\<Longrightarrow> set us'\n                                     \\<subseteq> carrier_vec n \\<and>\n                                     distinct us' \\<and>\n                                     corthogonal us' \\<and>\n                                     local.span (set (us @ ws)) =\n                                     local.span (set us') \\<and>\n                                     length us' = length us + length ws;\n        gram_schmidt_sub n us (a # ws) = us';\n        set (a # ws) \\<subseteq> carrier_vec n;\n        set us \\<subseteq> carrier_vec n; distinct (us @ a # ws);\n        lin_indpt (set (us @ a # ws)); corthogonal us\\<rbrakk>\n       \\<Longrightarrow> set us' \\<subseteq> carrier_vec n \\<and>\n                         distinct us' \\<and>\n                         corthogonal us' \\<and>\n                         local.span (set (us @ a # ws)) =\n                         local.span (set us') \\<and>\n                         length us' = length us + length (a # ws)", "have UW: \"set (us@ws) \\<subseteq> carrier_vec n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set (us @ ws) \\<subseteq> carrier_vec n", "by simp"], ["proof (state)\nthis:\n  set (us @ ws) \\<subseteq> carrier_vec n\n\ngoal (2 subgoals):\n 1. \\<And>us us'.\n       \\<lbrakk>gram_schmidt_sub n us [] = us';\n        set [] \\<subseteq> carrier_vec n; set us \\<subseteq> carrier_vec n;\n        distinct (us @ []); lin_indpt (set (us @ []));\n        corthogonal us\\<rbrakk>\n       \\<Longrightarrow> set us' \\<subseteq> carrier_vec n \\<and>\n                         distinct us' \\<and>\n                         corthogonal us' \\<and>\n                         local.span (set (us @ [])) =\n                         local.span (set us') \\<and>\n                         length us' = length us + length []\n 2. \\<And>a ws us us'.\n       \\<lbrakk>\\<And>us us'.\n                   \\<lbrakk>gram_schmidt_sub n us ws = us';\n                    set ws \\<subseteq> carrier_vec n;\n                    set us \\<subseteq> carrier_vec n; distinct (us @ ws);\n                    lin_indpt (set (us @ ws)); corthogonal us\\<rbrakk>\n                   \\<Longrightarrow> set us'\n                                     \\<subseteq> carrier_vec n \\<and>\n                                     distinct us' \\<and>\n                                     corthogonal us' \\<and>\n                                     local.span (set (us @ ws)) =\n                                     local.span (set us') \\<and>\n                                     length us' = length us + length ws;\n        gram_schmidt_sub n us (a # ws) = us';\n        set (a # ws) \\<subseteq> carrier_vec n;\n        set us \\<subseteq> carrier_vec n; distinct (us @ a # ws);\n        lin_indpt (set (us @ a # ws)); corthogonal us\\<rbrakk>\n       \\<Longrightarrow> set us' \\<subseteq> carrier_vec n \\<and>\n                         distinct us' \\<and>\n                         corthogonal us' \\<and>\n                         local.span (set (us @ a # ws)) =\n                         local.span (set us') \\<and>\n                         length us' = length us + length (a # ws)", "have wU: \"set (w#us) \\<subseteq> carrier_vec n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set (w # us) \\<subseteq> carrier_vec n", "by simp"], ["proof (state)\nthis:\n  set (w # us) \\<subseteq> carrier_vec n\n\ngoal (2 subgoals):\n 1. \\<And>us us'.\n       \\<lbrakk>gram_schmidt_sub n us [] = us';\n        set [] \\<subseteq> carrier_vec n; set us \\<subseteq> carrier_vec n;\n        distinct (us @ []); lin_indpt (set (us @ []));\n        corthogonal us\\<rbrakk>\n       \\<Longrightarrow> set us' \\<subseteq> carrier_vec n \\<and>\n                         distinct us' \\<and>\n                         corthogonal us' \\<and>\n                         local.span (set (us @ [])) =\n                         local.span (set us') \\<and>\n                         length us' = length us + length []\n 2. \\<And>a ws us us'.\n       \\<lbrakk>\\<And>us us'.\n                   \\<lbrakk>gram_schmidt_sub n us ws = us';\n                    set ws \\<subseteq> carrier_vec n;\n                    set us \\<subseteq> carrier_vec n; distinct (us @ ws);\n                    lin_indpt (set (us @ ws)); corthogonal us\\<rbrakk>\n                   \\<Longrightarrow> set us'\n                                     \\<subseteq> carrier_vec n \\<and>\n                                     distinct us' \\<and>\n                                     corthogonal us' \\<and>\n                                     local.span (set (us @ ws)) =\n                                     local.span (set us') \\<and>\n                                     length us' = length us + length ws;\n        gram_schmidt_sub n us (a # ws) = us';\n        set (a # ws) \\<subseteq> carrier_vec n;\n        set us \\<subseteq> carrier_vec n; distinct (us @ a # ws);\n        lin_indpt (set (us @ a # ws)); corthogonal us\\<rbrakk>\n       \\<Longrightarrow> set us' \\<subseteq> carrier_vec n \\<and>\n                         distinct us' \\<and>\n                         corthogonal us' \\<and>\n                         local.span (set (us @ a # ws)) =\n                         local.span (set us') \\<and>\n                         length us' = length us + length (a # ws)", "have dist: \"distinct (us @ w # ws)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. distinct (us @ w # ws)", "using Cons"], ["proof (prove)\nusing this:\n  \\<lbrakk>gram_schmidt_sub n ?us1 ws = ?us'1;\n   set ws \\<subseteq> carrier_vec n; set ?us1 \\<subseteq> carrier_vec n;\n   distinct (?us1 @ ws); lin_indpt (set (?us1 @ ws));\n   corthogonal ?us1\\<rbrakk>\n  \\<Longrightarrow> set ?us'1 \\<subseteq> carrier_vec n \\<and>\n                    distinct ?us'1 \\<and>\n                    corthogonal ?us'1 \\<and>\n                    local.span (set (?us1 @ ws)) =\n                    local.span (set ?us'1) \\<and>\n                    length ?us'1 = length ?us1 + length ws\n  gram_schmidt_sub n us (w # ws) = us'\n  set (w # ws) \\<subseteq> carrier_vec n\n  set us \\<subseteq> carrier_vec n\n  distinct (us @ w # ws)\n  lin_indpt (set (us @ w # ws))\n  corthogonal us\n\ngoal (1 subgoal):\n 1. distinct (us @ w # ws)", "by simp"], ["proof (state)\nthis:\n  distinct (us @ w # ws)\n\ngoal (2 subgoals):\n 1. \\<And>us us'.\n       \\<lbrakk>gram_schmidt_sub n us [] = us';\n        set [] \\<subseteq> carrier_vec n; set us \\<subseteq> carrier_vec n;\n        distinct (us @ []); lin_indpt (set (us @ []));\n        corthogonal us\\<rbrakk>\n       \\<Longrightarrow> set us' \\<subseteq> carrier_vec n \\<and>\n                         distinct us' \\<and>\n                         corthogonal us' \\<and>\n                         local.span (set (us @ [])) =\n                         local.span (set us') \\<and>\n                         length us' = length us + length []\n 2. \\<And>a ws us us'.\n       \\<lbrakk>\\<And>us us'.\n                   \\<lbrakk>gram_schmidt_sub n us ws = us';\n                    set ws \\<subseteq> carrier_vec n;\n                    set us \\<subseteq> carrier_vec n; distinct (us @ ws);\n                    lin_indpt (set (us @ ws)); corthogonal us\\<rbrakk>\n                   \\<Longrightarrow> set us'\n                                     \\<subseteq> carrier_vec n \\<and>\n                                     distinct us' \\<and>\n                                     corthogonal us' \\<and>\n                                     local.span (set (us @ ws)) =\n                                     local.span (set us') \\<and>\n                                     length us' = length us + length ws;\n        gram_schmidt_sub n us (a # ws) = us';\n        set (a # ws) \\<subseteq> carrier_vec n;\n        set us \\<subseteq> carrier_vec n; distinct (us @ a # ws);\n        lin_indpt (set (us @ a # ws)); corthogonal us\\<rbrakk>\n       \\<Longrightarrow> set us' \\<subseteq> carrier_vec n \\<and>\n                         distinct us' \\<and>\n                         corthogonal us' \\<and>\n                         local.span (set (us @ a # ws)) =\n                         local.span (set us') \\<and>\n                         length us' = length us + length (a # ws)", "hence dist_U: \"distinct us\"\n    and dist_W: \"distinct ws\"\n    and dist_UW: \"distinct (us @ ws)\"\n    and w_U: \"w \\<notin> set us\"\n    and w_W: \"w \\<notin> set ws\"\n    and w_UW: \"w \\<notin> set (us @ ws)\""], ["proof (prove)\nusing this:\n  distinct (us @ w # ws)\n\ngoal (1 subgoal):\n 1. (distinct us &&& distinct ws &&& distinct (us @ ws)) &&&\n    w \\<notin> set us &&& w \\<notin> set ws &&& w \\<notin> set (us @ ws)", "by auto"], ["proof (state)\nthis:\n  distinct us\n  distinct ws\n  distinct (us @ ws)\n  w \\<notin> set us\n  w \\<notin> set ws\n  w \\<notin> set (us @ ws)\n\ngoal (2 subgoals):\n 1. \\<And>us us'.\n       \\<lbrakk>gram_schmidt_sub n us [] = us';\n        set [] \\<subseteq> carrier_vec n; set us \\<subseteq> carrier_vec n;\n        distinct (us @ []); lin_indpt (set (us @ []));\n        corthogonal us\\<rbrakk>\n       \\<Longrightarrow> set us' \\<subseteq> carrier_vec n \\<and>\n                         distinct us' \\<and>\n                         corthogonal us' \\<and>\n                         local.span (set (us @ [])) =\n                         local.span (set us') \\<and>\n                         length us' = length us + length []\n 2. \\<And>a ws us us'.\n       \\<lbrakk>\\<And>us us'.\n                   \\<lbrakk>gram_schmidt_sub n us ws = us';\n                    set ws \\<subseteq> carrier_vec n;\n                    set us \\<subseteq> carrier_vec n; distinct (us @ ws);\n                    lin_indpt (set (us @ ws)); corthogonal us\\<rbrakk>\n                   \\<Longrightarrow> set us'\n                                     \\<subseteq> carrier_vec n \\<and>\n                                     distinct us' \\<and>\n                                     corthogonal us' \\<and>\n                                     local.span (set (us @ ws)) =\n                                     local.span (set us') \\<and>\n                                     length us' = length us + length ws;\n        gram_schmidt_sub n us (a # ws) = us';\n        set (a # ws) \\<subseteq> carrier_vec n;\n        set us \\<subseteq> carrier_vec n; distinct (us @ a # ws);\n        lin_indpt (set (us @ a # ws)); corthogonal us\\<rbrakk>\n       \\<Longrightarrow> set us' \\<subseteq> carrier_vec n \\<and>\n                         distinct us' \\<and>\n                         corthogonal us' \\<and>\n                         local.span (set (us @ a # ws)) =\n                         local.span (set us') \\<and>\n                         length us' = length us + length (a # ws)", "have ind: \"~ lin_dep (set (us @ w # ws))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lin_indpt (set (us @ w # ws))", "using Cons"], ["proof (prove)\nusing this:\n  \\<lbrakk>gram_schmidt_sub n ?us1 ws = ?us'1;\n   set ws \\<subseteq> carrier_vec n; set ?us1 \\<subseteq> carrier_vec n;\n   distinct (?us1 @ ws); lin_indpt (set (?us1 @ ws));\n   corthogonal ?us1\\<rbrakk>\n  \\<Longrightarrow> set ?us'1 \\<subseteq> carrier_vec n \\<and>\n                    distinct ?us'1 \\<and>\n                    corthogonal ?us'1 \\<and>\n                    local.span (set (?us1 @ ws)) =\n                    local.span (set ?us'1) \\<and>\n                    length ?us'1 = length ?us1 + length ws\n  gram_schmidt_sub n us (w # ws) = us'\n  set (w # ws) \\<subseteq> carrier_vec n\n  set us \\<subseteq> carrier_vec n\n  distinct (us @ w # ws)\n  lin_indpt (set (us @ w # ws))\n  corthogonal us\n\ngoal (1 subgoal):\n 1. lin_indpt (set (us @ w # ws))", "by simp"], ["proof (state)\nthis:\n  lin_indpt (set (us @ w # ws))\n\ngoal (2 subgoals):\n 1. \\<And>us us'.\n       \\<lbrakk>gram_schmidt_sub n us [] = us';\n        set [] \\<subseteq> carrier_vec n; set us \\<subseteq> carrier_vec n;\n        distinct (us @ []); lin_indpt (set (us @ []));\n        corthogonal us\\<rbrakk>\n       \\<Longrightarrow> set us' \\<subseteq> carrier_vec n \\<and>\n                         distinct us' \\<and>\n                         corthogonal us' \\<and>\n                         local.span (set (us @ [])) =\n                         local.span (set us') \\<and>\n                         length us' = length us + length []\n 2. \\<And>a ws us us'.\n       \\<lbrakk>\\<And>us us'.\n                   \\<lbrakk>gram_schmidt_sub n us ws = us';\n                    set ws \\<subseteq> carrier_vec n;\n                    set us \\<subseteq> carrier_vec n; distinct (us @ ws);\n                    lin_indpt (set (us @ ws)); corthogonal us\\<rbrakk>\n                   \\<Longrightarrow> set us'\n                                     \\<subseteq> carrier_vec n \\<and>\n                                     distinct us' \\<and>\n                                     corthogonal us' \\<and>\n                                     local.span (set (us @ ws)) =\n                                     local.span (set us') \\<and>\n                                     length us' = length us + length ws;\n        gram_schmidt_sub n us (a # ws) = us';\n        set (a # ws) \\<subseteq> carrier_vec n;\n        set us \\<subseteq> carrier_vec n; distinct (us @ a # ws);\n        lin_indpt (set (us @ a # ws)); corthogonal us\\<rbrakk>\n       \\<Longrightarrow> set us' \\<subseteq> carrier_vec n \\<and>\n                         distinct us' \\<and>\n                         corthogonal us' \\<and>\n                         local.span (set (us @ a # ws)) =\n                         local.span (set us') \\<and>\n                         length us' = length us + length (a # ws)", "have ind_U: \"~ lin_dep (set us)\"\n    and ind_W: \"~ lin_dep (set ws)\"\n    and ind_wU: \"~ lin_dep (insert w (set us))\"\n    and ind_UW: \"~ lin_dep (set (us @ ws))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (lin_indpt (set us) &&& lin_indpt (set ws)) &&&\n    lin_indpt (insert w (set us)) &&& lin_indpt (set (us @ ws))", "by (subst subset_li_is_li[OF ind];auto)+"], ["proof (state)\nthis:\n  lin_indpt (set us)\n  lin_indpt (set ws)\n  lin_indpt (insert w (set us))\n  lin_indpt (set (us @ ws))\n\ngoal (2 subgoals):\n 1. \\<And>us us'.\n       \\<lbrakk>gram_schmidt_sub n us [] = us';\n        set [] \\<subseteq> carrier_vec n; set us \\<subseteq> carrier_vec n;\n        distinct (us @ []); lin_indpt (set (us @ []));\n        corthogonal us\\<rbrakk>\n       \\<Longrightarrow> set us' \\<subseteq> carrier_vec n \\<and>\n                         distinct us' \\<and>\n                         corthogonal us' \\<and>\n                         local.span (set (us @ [])) =\n                         local.span (set us') \\<and>\n                         length us' = length us + length []\n 2. \\<And>a ws us us'.\n       \\<lbrakk>\\<And>us us'.\n                   \\<lbrakk>gram_schmidt_sub n us ws = us';\n                    set ws \\<subseteq> carrier_vec n;\n                    set us \\<subseteq> carrier_vec n; distinct (us @ ws);\n                    lin_indpt (set (us @ ws)); corthogonal us\\<rbrakk>\n                   \\<Longrightarrow> set us'\n                                     \\<subseteq> carrier_vec n \\<and>\n                                     distinct us' \\<and>\n                                     corthogonal us' \\<and>\n                                     local.span (set (us @ ws)) =\n                                     local.span (set us') \\<and>\n                                     length us' = length us + length ws;\n        gram_schmidt_sub n us (a # ws) = us';\n        set (a # ws) \\<subseteq> carrier_vec n;\n        set us \\<subseteq> carrier_vec n; distinct (us @ a # ws);\n        lin_indpt (set (us @ a # ws)); corthogonal us\\<rbrakk>\n       \\<Longrightarrow> set us' \\<subseteq> carrier_vec n \\<and>\n                         distinct us' \\<and>\n                         corthogonal us' \\<and>\n                         local.span (set (us @ a # ws)) =\n                         local.span (set us') \\<and>\n                         length us' = length us + length (a # ws)", "have corth: \"corthogonal us\""], ["proof (prove)\ngoal (1 subgoal):\n 1. corthogonal us", "using Cons"], ["proof (prove)\nusing this:\n  \\<lbrakk>gram_schmidt_sub n ?us1 ws = ?us'1;\n   set ws \\<subseteq> carrier_vec n; set ?us1 \\<subseteq> carrier_vec n;\n   distinct (?us1 @ ws); lin_indpt (set (?us1 @ ws));\n   corthogonal ?us1\\<rbrakk>\n  \\<Longrightarrow> set ?us'1 \\<subseteq> carrier_vec n \\<and>\n                    distinct ?us'1 \\<and>\n                    corthogonal ?us'1 \\<and>\n                    local.span (set (?us1 @ ws)) =\n                    local.span (set ?us'1) \\<and>\n                    length ?us'1 = length ?us1 + length ws\n  gram_schmidt_sub n us (w # ws) = us'\n  set (w # ws) \\<subseteq> carrier_vec n\n  set us \\<subseteq> carrier_vec n\n  distinct (us @ w # ws)\n  lin_indpt (set (us @ w # ws))\n  corthogonal us\n\ngoal (1 subgoal):\n 1. corthogonal us", "by simp"], ["proof (state)\nthis:\n  corthogonal us\n\ngoal (2 subgoals):\n 1. \\<And>us us'.\n       \\<lbrakk>gram_schmidt_sub n us [] = us';\n        set [] \\<subseteq> carrier_vec n; set us \\<subseteq> carrier_vec n;\n        distinct (us @ []); lin_indpt (set (us @ []));\n        corthogonal us\\<rbrakk>\n       \\<Longrightarrow> set us' \\<subseteq> carrier_vec n \\<and>\n                         distinct us' \\<and>\n                         corthogonal us' \\<and>\n                         local.span (set (us @ [])) =\n                         local.span (set us') \\<and>\n                         length us' = length us + length []\n 2. \\<And>a ws us us'.\n       \\<lbrakk>\\<And>us us'.\n                   \\<lbrakk>gram_schmidt_sub n us ws = us';\n                    set ws \\<subseteq> carrier_vec n;\n                    set us \\<subseteq> carrier_vec n; distinct (us @ ws);\n                    lin_indpt (set (us @ ws)); corthogonal us\\<rbrakk>\n                   \\<Longrightarrow> set us'\n                                     \\<subseteq> carrier_vec n \\<and>\n                                     distinct us' \\<and>\n                                     corthogonal us' \\<and>\n                                     local.span (set (us @ ws)) =\n                                     local.span (set us') \\<and>\n                                     length us' = length us + length ws;\n        gram_schmidt_sub n us (a # ws) = us';\n        set (a # ws) \\<subseteq> carrier_vec n;\n        set us \\<subseteq> carrier_vec n; distinct (us @ a # ws);\n        lin_indpt (set (us @ a # ws)); corthogonal us\\<rbrakk>\n       \\<Longrightarrow> set us' \\<subseteq> carrier_vec n \\<and>\n                         distinct us' \\<and>\n                         corthogonal us' \\<and>\n                         local.span (set (us @ a # ws)) =\n                         local.span (set us') \\<and>\n                         length us' = length us + length (a # ws)", "have U'def: \"gram_schmidt_sub n ((?v + w)#us) ws = us'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. gram_schmidt_sub n ((adjuster n w us + w) # us) ws = us'", "using Cons"], ["proof (prove)\nusing this:\n  \\<lbrakk>gram_schmidt_sub n ?us1 ws = ?us'1;\n   set ws \\<subseteq> carrier_vec n; set ?us1 \\<subseteq> carrier_vec n;\n   distinct (?us1 @ ws); lin_indpt (set (?us1 @ ws));\n   corthogonal ?us1\\<rbrakk>\n  \\<Longrightarrow> set ?us'1 \\<subseteq> carrier_vec n \\<and>\n                    distinct ?us'1 \\<and>\n                    corthogonal ?us'1 \\<and>\n                    local.span (set (?us1 @ ws)) =\n                    local.span (set ?us'1) \\<and>\n                    length ?us'1 = length ?us1 + length ws\n  gram_schmidt_sub n us (w # ws) = us'\n  set (w # ws) \\<subseteq> carrier_vec n\n  set us \\<subseteq> carrier_vec n\n  distinct (us @ w # ws)\n  lin_indpt (set (us @ w # ws))\n  corthogonal us\n\ngoal (1 subgoal):\n 1. gram_schmidt_sub n ((adjuster n w us + w) # us) ws = us'", "by simp"], ["proof (state)\nthis:\n  gram_schmidt_sub n ((adjuster n w us + w) # us) ws = us'\n\ngoal (2 subgoals):\n 1. \\<And>us us'.\n       \\<lbrakk>gram_schmidt_sub n us [] = us';\n        set [] \\<subseteq> carrier_vec n; set us \\<subseteq> carrier_vec n;\n        distinct (us @ []); lin_indpt (set (us @ []));\n        corthogonal us\\<rbrakk>\n       \\<Longrightarrow> set us' \\<subseteq> carrier_vec n \\<and>\n                         distinct us' \\<and>\n                         corthogonal us' \\<and>\n                         local.span (set (us @ [])) =\n                         local.span (set us') \\<and>\n                         length us' = length us + length []\n 2. \\<And>a ws us us'.\n       \\<lbrakk>\\<And>us us'.\n                   \\<lbrakk>gram_schmidt_sub n us ws = us';\n                    set ws \\<subseteq> carrier_vec n;\n                    set us \\<subseteq> carrier_vec n; distinct (us @ ws);\n                    lin_indpt (set (us @ ws)); corthogonal us\\<rbrakk>\n                   \\<Longrightarrow> set us'\n                                     \\<subseteq> carrier_vec n \\<and>\n                                     distinct us' \\<and>\n                                     corthogonal us' \\<and>\n                                     local.span (set (us @ ws)) =\n                                     local.span (set us') \\<and>\n                                     length us' = length us + length ws;\n        gram_schmidt_sub n us (a # ws) = us';\n        set (a # ws) \\<subseteq> carrier_vec n;\n        set us \\<subseteq> carrier_vec n; distinct (us @ a # ws);\n        lin_indpt (set (us @ a # ws)); corthogonal us\\<rbrakk>\n       \\<Longrightarrow> set us' \\<subseteq> carrier_vec n \\<and>\n                         distinct us' \\<and>\n                         corthogonal us' \\<and>\n                         local.span (set (us @ a # ws)) =\n                         local.span (set us') \\<and>\n                         length us' = length us + length (a # ws)", "have v: \"?v : carrier_vec n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. adjuster n w us \\<in> carrier_vec n", "using dist_U"], ["proof (prove)\nusing this:\n  distinct us\n\ngoal (1 subgoal):\n 1. adjuster n w us \\<in> carrier_vec n", "by auto"], ["proof (state)\nthis:\n  adjuster n w us \\<in> carrier_vec n\n\ngoal (2 subgoals):\n 1. \\<And>us us'.\n       \\<lbrakk>gram_schmidt_sub n us [] = us';\n        set [] \\<subseteq> carrier_vec n; set us \\<subseteq> carrier_vec n;\n        distinct (us @ []); lin_indpt (set (us @ []));\n        corthogonal us\\<rbrakk>\n       \\<Longrightarrow> set us' \\<subseteq> carrier_vec n \\<and>\n                         distinct us' \\<and>\n                         corthogonal us' \\<and>\n                         local.span (set (us @ [])) =\n                         local.span (set us') \\<and>\n                         length us' = length us + length []\n 2. \\<And>a ws us us'.\n       \\<lbrakk>\\<And>us us'.\n                   \\<lbrakk>gram_schmidt_sub n us ws = us';\n                    set ws \\<subseteq> carrier_vec n;\n                    set us \\<subseteq> carrier_vec n; distinct (us @ ws);\n                    lin_indpt (set (us @ ws)); corthogonal us\\<rbrakk>\n                   \\<Longrightarrow> set us'\n                                     \\<subseteq> carrier_vec n \\<and>\n                                     distinct us' \\<and>\n                                     corthogonal us' \\<and>\n                                     local.span (set (us @ ws)) =\n                                     local.span (set us') \\<and>\n                                     length us' = length us + length ws;\n        gram_schmidt_sub n us (a # ws) = us';\n        set (a # ws) \\<subseteq> carrier_vec n;\n        set us \\<subseteq> carrier_vec n; distinct (us @ a # ws);\n        lin_indpt (set (us @ a # ws)); corthogonal us\\<rbrakk>\n       \\<Longrightarrow> set us' \\<subseteq> carrier_vec n \\<and>\n                         distinct us' \\<and>\n                         corthogonal us' \\<and>\n                         local.span (set (us @ a # ws)) =\n                         local.span (set us') \\<and>\n                         length us' = length us + length (a # ws)", "hence vw: \"?v + w : carrier_vec n\""], ["proof (prove)\nusing this:\n  adjuster n w us \\<in> carrier_vec n\n\ngoal (1 subgoal):\n 1. adjuster n w us + w \\<in> carrier_vec n", "by auto"], ["proof (state)\nthis:\n  adjuster n w us + w \\<in> carrier_vec n\n\ngoal (2 subgoals):\n 1. \\<And>us us'.\n       \\<lbrakk>gram_schmidt_sub n us [] = us';\n        set [] \\<subseteq> carrier_vec n; set us \\<subseteq> carrier_vec n;\n        distinct (us @ []); lin_indpt (set (us @ []));\n        corthogonal us\\<rbrakk>\n       \\<Longrightarrow> set us' \\<subseteq> carrier_vec n \\<and>\n                         distinct us' \\<and>\n                         corthogonal us' \\<and>\n                         local.span (set (us @ [])) =\n                         local.span (set us') \\<and>\n                         length us' = length us + length []\n 2. \\<And>a ws us us'.\n       \\<lbrakk>\\<And>us us'.\n                   \\<lbrakk>gram_schmidt_sub n us ws = us';\n                    set ws \\<subseteq> carrier_vec n;\n                    set us \\<subseteq> carrier_vec n; distinct (us @ ws);\n                    lin_indpt (set (us @ ws)); corthogonal us\\<rbrakk>\n                   \\<Longrightarrow> set us'\n                                     \\<subseteq> carrier_vec n \\<and>\n                                     distinct us' \\<and>\n                                     corthogonal us' \\<and>\n                                     local.span (set (us @ ws)) =\n                                     local.span (set us') \\<and>\n                                     length us' = length us + length ws;\n        gram_schmidt_sub n us (a # ws) = us';\n        set (a # ws) \\<subseteq> carrier_vec n;\n        set us \\<subseteq> carrier_vec n; distinct (us @ a # ws);\n        lin_indpt (set (us @ a # ws)); corthogonal us\\<rbrakk>\n       \\<Longrightarrow> set us' \\<subseteq> carrier_vec n \\<and>\n                         distinct us' \\<and>\n                         corthogonal us' \\<and>\n                         local.span (set (us @ a # ws)) =\n                         local.span (set us') \\<and>\n                         length us' = length us + length (a # ws)", "hence vwU: \"set ((?v + w) # us) \\<subseteq> carrier_vec n\""], ["proof (prove)\nusing this:\n  adjuster n w us + w \\<in> carrier_vec n\n\ngoal (1 subgoal):\n 1. set ((adjuster n w us + w) # us) \\<subseteq> carrier_vec n", "by auto"], ["proof (state)\nthis:\n  set ((adjuster n w us + w) # us) \\<subseteq> carrier_vec n\n\ngoal (2 subgoals):\n 1. \\<And>us us'.\n       \\<lbrakk>gram_schmidt_sub n us [] = us';\n        set [] \\<subseteq> carrier_vec n; set us \\<subseteq> carrier_vec n;\n        distinct (us @ []); lin_indpt (set (us @ []));\n        corthogonal us\\<rbrakk>\n       \\<Longrightarrow> set us' \\<subseteq> carrier_vec n \\<and>\n                         distinct us' \\<and>\n                         corthogonal us' \\<and>\n                         local.span (set (us @ [])) =\n                         local.span (set us') \\<and>\n                         length us' = length us + length []\n 2. \\<And>a ws us us'.\n       \\<lbrakk>\\<And>us us'.\n                   \\<lbrakk>gram_schmidt_sub n us ws = us';\n                    set ws \\<subseteq> carrier_vec n;\n                    set us \\<subseteq> carrier_vec n; distinct (us @ ws);\n                    lin_indpt (set (us @ ws)); corthogonal us\\<rbrakk>\n                   \\<Longrightarrow> set us'\n                                     \\<subseteq> carrier_vec n \\<and>\n                                     distinct us' \\<and>\n                                     corthogonal us' \\<and>\n                                     local.span (set (us @ ws)) =\n                                     local.span (set us') \\<and>\n                                     length us' = length us + length ws;\n        gram_schmidt_sub n us (a # ws) = us';\n        set (a # ws) \\<subseteq> carrier_vec n;\n        set us \\<subseteq> carrier_vec n; distinct (us @ a # ws);\n        lin_indpt (set (us @ a # ws)); corthogonal us\\<rbrakk>\n       \\<Longrightarrow> set us' \\<subseteq> carrier_vec n \\<and>\n                         distinct us' \\<and>\n                         corthogonal us' \\<and>\n                         local.span (set (us @ a # ws)) =\n                         local.span (set us') \\<and>\n                         length us' = length us + length (a # ws)", "have vsU: \"?v : span (set us)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. adjuster n w us \\<in> local.span (set us)", "using adjuster_in_span[OF w] dist"], ["proof (prove)\nusing this:\n  \\<lbrakk>set ?us \\<subseteq> carrier_vec n; distinct ?us\\<rbrakk>\n  \\<Longrightarrow> adjuster n w ?us \\<in> local.span (set ?us)\n  distinct (us @ w # ws)\n\ngoal (1 subgoal):\n 1. adjuster n w us \\<in> local.span (set us)", "by auto"], ["proof (state)\nthis:\n  adjuster n w us \\<in> local.span (set us)\n\ngoal (2 subgoals):\n 1. \\<And>us us'.\n       \\<lbrakk>gram_schmidt_sub n us [] = us';\n        set [] \\<subseteq> carrier_vec n; set us \\<subseteq> carrier_vec n;\n        distinct (us @ []); lin_indpt (set (us @ []));\n        corthogonal us\\<rbrakk>\n       \\<Longrightarrow> set us' \\<subseteq> carrier_vec n \\<and>\n                         distinct us' \\<and>\n                         corthogonal us' \\<and>\n                         local.span (set (us @ [])) =\n                         local.span (set us') \\<and>\n                         length us' = length us + length []\n 2. \\<And>a ws us us'.\n       \\<lbrakk>\\<And>us us'.\n                   \\<lbrakk>gram_schmidt_sub n us ws = us';\n                    set ws \\<subseteq> carrier_vec n;\n                    set us \\<subseteq> carrier_vec n; distinct (us @ ws);\n                    lin_indpt (set (us @ ws)); corthogonal us\\<rbrakk>\n                   \\<Longrightarrow> set us'\n                                     \\<subseteq> carrier_vec n \\<and>\n                                     distinct us' \\<and>\n                                     corthogonal us' \\<and>\n                                     local.span (set (us @ ws)) =\n                                     local.span (set us') \\<and>\n                                     length us' = length us + length ws;\n        gram_schmidt_sub n us (a # ws) = us';\n        set (a # ws) \\<subseteq> carrier_vec n;\n        set us \\<subseteq> carrier_vec n; distinct (us @ a # ws);\n        lin_indpt (set (us @ a # ws)); corthogonal us\\<rbrakk>\n       \\<Longrightarrow> set us' \\<subseteq> carrier_vec n \\<and>\n                         distinct us' \\<and>\n                         corthogonal us' \\<and>\n                         local.span (set (us @ a # ws)) =\n                         local.span (set us') \\<and>\n                         length us' = length us + length (a # ws)", "hence vsUW: \"?v : span (set (us @ ws))\""], ["proof (prove)\nusing this:\n  adjuster n w us \\<in> local.span (set us)\n\ngoal (1 subgoal):\n 1. adjuster n w us \\<in> local.span (set (us @ ws))", "using span_is_monotone[of \"set us\" \"set (us@ws)\"]"], ["proof (prove)\nusing this:\n  adjuster n w us \\<in> local.span (set us)\n  set us \\<subseteq> set (us @ ws) \\<Longrightarrow>\n  local.span (set us) \\<subseteq> local.span (set (us @ ws))\n\ngoal (1 subgoal):\n 1. adjuster n w us \\<in> local.span (set (us @ ws))", "by auto"], ["proof (state)\nthis:\n  adjuster n w us \\<in> local.span (set (us @ ws))\n\ngoal (2 subgoals):\n 1. \\<And>us us'.\n       \\<lbrakk>gram_schmidt_sub n us [] = us';\n        set [] \\<subseteq> carrier_vec n; set us \\<subseteq> carrier_vec n;\n        distinct (us @ []); lin_indpt (set (us @ []));\n        corthogonal us\\<rbrakk>\n       \\<Longrightarrow> set us' \\<subseteq> carrier_vec n \\<and>\n                         distinct us' \\<and>\n                         corthogonal us' \\<and>\n                         local.span (set (us @ [])) =\n                         local.span (set us') \\<and>\n                         length us' = length us + length []\n 2. \\<And>a ws us us'.\n       \\<lbrakk>\\<And>us us'.\n                   \\<lbrakk>gram_schmidt_sub n us ws = us';\n                    set ws \\<subseteq> carrier_vec n;\n                    set us \\<subseteq> carrier_vec n; distinct (us @ ws);\n                    lin_indpt (set (us @ ws)); corthogonal us\\<rbrakk>\n                   \\<Longrightarrow> set us'\n                                     \\<subseteq> carrier_vec n \\<and>\n                                     distinct us' \\<and>\n                                     corthogonal us' \\<and>\n                                     local.span (set (us @ ws)) =\n                                     local.span (set us') \\<and>\n                                     length us' = length us + length ws;\n        gram_schmidt_sub n us (a # ws) = us';\n        set (a # ws) \\<subseteq> carrier_vec n;\n        set us \\<subseteq> carrier_vec n; distinct (us @ a # ws);\n        lin_indpt (set (us @ a # ws)); corthogonal us\\<rbrakk>\n       \\<Longrightarrow> set us' \\<subseteq> carrier_vec n \\<and>\n                         distinct us' \\<and>\n                         corthogonal us' \\<and>\n                         local.span (set (us @ a # ws)) =\n                         local.span (set us') \\<and>\n                         length us' = length us + length (a # ws)", "have wsU: \"w \\<notin> span (set us)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. w \\<notin> local.span (set us)", "using lin_dep_iff_in_span[OF U ind_U w w_U] ind_wU"], ["proof (prove)\nusing this:\n  (w \\<in> local.span (set us)) = lin_dep (set us \\<union> {w})\n  lin_indpt (insert w (set us))\n\ngoal (1 subgoal):\n 1. w \\<notin> local.span (set us)", "by auto"], ["proof (state)\nthis:\n  w \\<notin> local.span (set us)\n\ngoal (2 subgoals):\n 1. \\<And>us us'.\n       \\<lbrakk>gram_schmidt_sub n us [] = us';\n        set [] \\<subseteq> carrier_vec n; set us \\<subseteq> carrier_vec n;\n        distinct (us @ []); lin_indpt (set (us @ []));\n        corthogonal us\\<rbrakk>\n       \\<Longrightarrow> set us' \\<subseteq> carrier_vec n \\<and>\n                         distinct us' \\<and>\n                         corthogonal us' \\<and>\n                         local.span (set (us @ [])) =\n                         local.span (set us') \\<and>\n                         length us' = length us + length []\n 2. \\<And>a ws us us'.\n       \\<lbrakk>\\<And>us us'.\n                   \\<lbrakk>gram_schmidt_sub n us ws = us';\n                    set ws \\<subseteq> carrier_vec n;\n                    set us \\<subseteq> carrier_vec n; distinct (us @ ws);\n                    lin_indpt (set (us @ ws)); corthogonal us\\<rbrakk>\n                   \\<Longrightarrow> set us'\n                                     \\<subseteq> carrier_vec n \\<and>\n                                     distinct us' \\<and>\n                                     corthogonal us' \\<and>\n                                     local.span (set (us @ ws)) =\n                                     local.span (set us') \\<and>\n                                     length us' = length us + length ws;\n        gram_schmidt_sub n us (a # ws) = us';\n        set (a # ws) \\<subseteq> carrier_vec n;\n        set us \\<subseteq> carrier_vec n; distinct (us @ a # ws);\n        lin_indpt (set (us @ a # ws)); corthogonal us\\<rbrakk>\n       \\<Longrightarrow> set us' \\<subseteq> carrier_vec n \\<and>\n                         distinct us' \\<and>\n                         corthogonal us' \\<and>\n                         local.span (set (us @ a # ws)) =\n                         local.span (set us') \\<and>\n                         length us' = length us + length (a # ws)", "hence vwU: \"?v + w \\<notin> span (set us)\""], ["proof (prove)\nusing this:\n  w \\<notin> local.span (set us)\n\ngoal (1 subgoal):\n 1. adjuster n w us + w \\<notin> local.span (set us)", "using adjust_not_in_span[OF w U dist_U]"], ["proof (prove)\nusing this:\n  w \\<notin> local.span (set us)\n  w \\<notin> local.span (set us) \\<Longrightarrow>\n  adjuster n w us + w \\<notin> local.span (set us)\n\ngoal (1 subgoal):\n 1. adjuster n w us + w \\<notin> local.span (set us)", "by auto"], ["proof (state)\nthis:\n  adjuster n w us + w \\<notin> local.span (set us)\n\ngoal (2 subgoals):\n 1. \\<And>us us'.\n       \\<lbrakk>gram_schmidt_sub n us [] = us';\n        set [] \\<subseteq> carrier_vec n; set us \\<subseteq> carrier_vec n;\n        distinct (us @ []); lin_indpt (set (us @ []));\n        corthogonal us\\<rbrakk>\n       \\<Longrightarrow> set us' \\<subseteq> carrier_vec n \\<and>\n                         distinct us' \\<and>\n                         corthogonal us' \\<and>\n                         local.span (set (us @ [])) =\n                         local.span (set us') \\<and>\n                         length us' = length us + length []\n 2. \\<And>a ws us us'.\n       \\<lbrakk>\\<And>us us'.\n                   \\<lbrakk>gram_schmidt_sub n us ws = us';\n                    set ws \\<subseteq> carrier_vec n;\n                    set us \\<subseteq> carrier_vec n; distinct (us @ ws);\n                    lin_indpt (set (us @ ws)); corthogonal us\\<rbrakk>\n                   \\<Longrightarrow> set us'\n                                     \\<subseteq> carrier_vec n \\<and>\n                                     distinct us' \\<and>\n                                     corthogonal us' \\<and>\n                                     local.span (set (us @ ws)) =\n                                     local.span (set us') \\<and>\n                                     length us' = length us + length ws;\n        gram_schmidt_sub n us (a # ws) = us';\n        set (a # ws) \\<subseteq> carrier_vec n;\n        set us \\<subseteq> carrier_vec n; distinct (us @ a # ws);\n        lin_indpt (set (us @ a # ws)); corthogonal us\\<rbrakk>\n       \\<Longrightarrow> set us' \\<subseteq> carrier_vec n \\<and>\n                         distinct us' \\<and>\n                         corthogonal us' \\<and>\n                         local.span (set (us @ a # ws)) =\n                         local.span (set us') \\<and>\n                         length us' = length us + length (a # ws)", "have \"w \\<notin> span (set (us@ws))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. w \\<notin> local.span (set (us @ ws))", "using lin_dep_iff_in_span[OF _ ind_UW] dist ind"], ["proof (prove)\nusing this:\n  \\<lbrakk>set (us @ ws) \\<subseteq> carrier_vec n; ?v \\<in> carrier_vec n;\n   ?v \\<notin> set (us @ ws)\\<rbrakk>\n  \\<Longrightarrow> (?v \\<in> local.span (set (us @ ws))) =\n                    lin_dep (set (us @ ws) \\<union> {?v})\n  distinct (us @ w # ws)\n  lin_indpt (set (us @ w # ws))\n\ngoal (1 subgoal):\n 1. w \\<notin> local.span (set (us @ ws))", "by auto"], ["proof (state)\nthis:\n  w \\<notin> local.span (set (us @ ws))\n\ngoal (2 subgoals):\n 1. \\<And>us us'.\n       \\<lbrakk>gram_schmidt_sub n us [] = us';\n        set [] \\<subseteq> carrier_vec n; set us \\<subseteq> carrier_vec n;\n        distinct (us @ []); lin_indpt (set (us @ []));\n        corthogonal us\\<rbrakk>\n       \\<Longrightarrow> set us' \\<subseteq> carrier_vec n \\<and>\n                         distinct us' \\<and>\n                         corthogonal us' \\<and>\n                         local.span (set (us @ [])) =\n                         local.span (set us') \\<and>\n                         length us' = length us + length []\n 2. \\<And>a ws us us'.\n       \\<lbrakk>\\<And>us us'.\n                   \\<lbrakk>gram_schmidt_sub n us ws = us';\n                    set ws \\<subseteq> carrier_vec n;\n                    set us \\<subseteq> carrier_vec n; distinct (us @ ws);\n                    lin_indpt (set (us @ ws)); corthogonal us\\<rbrakk>\n                   \\<Longrightarrow> set us'\n                                     \\<subseteq> carrier_vec n \\<and>\n                                     distinct us' \\<and>\n                                     corthogonal us' \\<and>\n                                     local.span (set (us @ ws)) =\n                                     local.span (set us') \\<and>\n                                     length us' = length us + length ws;\n        gram_schmidt_sub n us (a # ws) = us';\n        set (a # ws) \\<subseteq> carrier_vec n;\n        set us \\<subseteq> carrier_vec n; distinct (us @ a # ws);\n        lin_indpt (set (us @ a # ws)); corthogonal us\\<rbrakk>\n       \\<Longrightarrow> set us' \\<subseteq> carrier_vec n \\<and>\n                         distinct us' \\<and>\n                         corthogonal us' \\<and>\n                         local.span (set (us @ a # ws)) =\n                         local.span (set us') \\<and>\n                         length us' = length us + length (a # ws)", "hence span: \"?v + w \\<notin> span (set (us@ws))\""], ["proof (prove)\nusing this:\n  w \\<notin> local.span (set (us @ ws))\n\ngoal (1 subgoal):\n 1. adjuster n w us + w \\<notin> local.span (set (us @ ws))", "using span_add[OF UW vsUW w]"], ["proof (prove)\nusing this:\n  w \\<notin> local.span (set (us @ ws))\n  (w \\<in> local.span (set (us @ ws))) =\n  (adjuster n w us + w \\<in> local.span (set (us @ ws)))\n\ngoal (1 subgoal):\n 1. adjuster n w us + w \\<notin> local.span (set (us @ ws))", "by auto"], ["proof (state)\nthis:\n  adjuster n w us + w \\<notin> local.span (set (us @ ws))\n\ngoal (2 subgoals):\n 1. \\<And>us us'.\n       \\<lbrakk>gram_schmidt_sub n us [] = us';\n        set [] \\<subseteq> carrier_vec n; set us \\<subseteq> carrier_vec n;\n        distinct (us @ []); lin_indpt (set (us @ []));\n        corthogonal us\\<rbrakk>\n       \\<Longrightarrow> set us' \\<subseteq> carrier_vec n \\<and>\n                         distinct us' \\<and>\n                         corthogonal us' \\<and>\n                         local.span (set (us @ [])) =\n                         local.span (set us') \\<and>\n                         length us' = length us + length []\n 2. \\<And>a ws us us'.\n       \\<lbrakk>\\<And>us us'.\n                   \\<lbrakk>gram_schmidt_sub n us ws = us';\n                    set ws \\<subseteq> carrier_vec n;\n                    set us \\<subseteq> carrier_vec n; distinct (us @ ws);\n                    lin_indpt (set (us @ ws)); corthogonal us\\<rbrakk>\n                   \\<Longrightarrow> set us'\n                                     \\<subseteq> carrier_vec n \\<and>\n                                     distinct us' \\<and>\n                                     corthogonal us' \\<and>\n                                     local.span (set (us @ ws)) =\n                                     local.span (set us') \\<and>\n                                     length us' = length us + length ws;\n        gram_schmidt_sub n us (a # ws) = us';\n        set (a # ws) \\<subseteq> carrier_vec n;\n        set us \\<subseteq> carrier_vec n; distinct (us @ a # ws);\n        lin_indpt (set (us @ a # ws)); corthogonal us\\<rbrakk>\n       \\<Longrightarrow> set us' \\<subseteq> carrier_vec n \\<and>\n                         distinct us' \\<and>\n                         corthogonal us' \\<and>\n                         local.span (set (us @ a # ws)) =\n                         local.span (set us') \\<and>\n                         length us' = length us + length (a # ws)", "hence vwUS: \"?v + w \\<notin> set (us @ ws)\""], ["proof (prove)\nusing this:\n  adjuster n w us + w \\<notin> local.span (set (us @ ws))\n\ngoal (1 subgoal):\n 1. adjuster n w us + w \\<notin> set (us @ ws)", "using span_mem"], ["proof (prove)\nusing this:\n  adjuster n w us + w \\<notin> local.span (set (us @ ws))\n  \\<lbrakk>?E \\<subseteq> carrier_vec n; ?u \\<in> ?E\\<rbrakk>\n  \\<Longrightarrow> ?u \\<in> local.span ?E\n\ngoal (1 subgoal):\n 1. adjuster n w us + w \\<notin> set (us @ ws)", "by auto"], ["proof (state)\nthis:\n  adjuster n w us + w \\<notin> set (us @ ws)\n\ngoal (2 subgoals):\n 1. \\<And>us us'.\n       \\<lbrakk>gram_schmidt_sub n us [] = us';\n        set [] \\<subseteq> carrier_vec n; set us \\<subseteq> carrier_vec n;\n        distinct (us @ []); lin_indpt (set (us @ []));\n        corthogonal us\\<rbrakk>\n       \\<Longrightarrow> set us' \\<subseteq> carrier_vec n \\<and>\n                         distinct us' \\<and>\n                         corthogonal us' \\<and>\n                         local.span (set (us @ [])) =\n                         local.span (set us') \\<and>\n                         length us' = length us + length []\n 2. \\<And>a ws us us'.\n       \\<lbrakk>\\<And>us us'.\n                   \\<lbrakk>gram_schmidt_sub n us ws = us';\n                    set ws \\<subseteq> carrier_vec n;\n                    set us \\<subseteq> carrier_vec n; distinct (us @ ws);\n                    lin_indpt (set (us @ ws)); corthogonal us\\<rbrakk>\n                   \\<Longrightarrow> set us'\n                                     \\<subseteq> carrier_vec n \\<and>\n                                     distinct us' \\<and>\n                                     corthogonal us' \\<and>\n                                     local.span (set (us @ ws)) =\n                                     local.span (set us') \\<and>\n                                     length us' = length us + length ws;\n        gram_schmidt_sub n us (a # ws) = us';\n        set (a # ws) \\<subseteq> carrier_vec n;\n        set us \\<subseteq> carrier_vec n; distinct (us @ a # ws);\n        lin_indpt (set (us @ a # ws)); corthogonal us\\<rbrakk>\n       \\<Longrightarrow> set us' \\<subseteq> carrier_vec n \\<and>\n                         distinct us' \\<and>\n                         corthogonal us' \\<and>\n                         local.span (set (us @ a # ws)) =\n                         local.span (set us') \\<and>\n                         length us' = length us + length (a # ws)", "hence ind2: \"~ lin_dep (set (((?v + w) # us) @ ws))\""], ["proof (prove)\nusing this:\n  adjuster n w us + w \\<notin> set (us @ ws)\n\ngoal (1 subgoal):\n 1. lin_indpt (set (((adjuster n w us + w) # us) @ ws))", "using lin_dep_iff_in_span[OF UW ind_UW vw] span"], ["proof (prove)\nusing this:\n  adjuster n w us + w \\<notin> set (us @ ws)\n  adjuster n w us + w \\<notin> set (us @ ws) \\<Longrightarrow>\n  (adjuster n w us + w \\<in> local.span (set (us @ ws))) =\n  lin_dep (set (us @ ws) \\<union> {adjuster n w us + w})\n  adjuster n w us + w \\<notin> local.span (set (us @ ws))\n\ngoal (1 subgoal):\n 1. lin_indpt (set (((adjuster n w us + w) # us) @ ws))", "by auto"], ["proof (state)\nthis:\n  lin_indpt (set (((adjuster n w us + w) # us) @ ws))\n\ngoal (2 subgoals):\n 1. \\<And>us us'.\n       \\<lbrakk>gram_schmidt_sub n us [] = us';\n        set [] \\<subseteq> carrier_vec n; set us \\<subseteq> carrier_vec n;\n        distinct (us @ []); lin_indpt (set (us @ []));\n        corthogonal us\\<rbrakk>\n       \\<Longrightarrow> set us' \\<subseteq> carrier_vec n \\<and>\n                         distinct us' \\<and>\n                         corthogonal us' \\<and>\n                         local.span (set (us @ [])) =\n                         local.span (set us') \\<and>\n                         length us' = length us + length []\n 2. \\<And>a ws us us'.\n       \\<lbrakk>\\<And>us us'.\n                   \\<lbrakk>gram_schmidt_sub n us ws = us';\n                    set ws \\<subseteq> carrier_vec n;\n                    set us \\<subseteq> carrier_vec n; distinct (us @ ws);\n                    lin_indpt (set (us @ ws)); corthogonal us\\<rbrakk>\n                   \\<Longrightarrow> set us'\n                                     \\<subseteq> carrier_vec n \\<and>\n                                     distinct us' \\<and>\n                                     corthogonal us' \\<and>\n                                     local.span (set (us @ ws)) =\n                                     local.span (set us') \\<and>\n                                     length us' = length us + length ws;\n        gram_schmidt_sub n us (a # ws) = us';\n        set (a # ws) \\<subseteq> carrier_vec n;\n        set us \\<subseteq> carrier_vec n; distinct (us @ a # ws);\n        lin_indpt (set (us @ a # ws)); corthogonal us\\<rbrakk>\n       \\<Longrightarrow> set us' \\<subseteq> carrier_vec n \\<and>\n                         distinct us' \\<and>\n                         corthogonal us' \\<and>\n                         local.span (set (us @ a # ws)) =\n                         local.span (set us') \\<and>\n                         length us' = length us + length (a # ws)", "have vwU: \"set ((?v + w) # us) \\<subseteq> carrier_vec n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set ((adjuster n w us + w) # us) \\<subseteq> carrier_vec n", "using U w dist"], ["proof (prove)\nusing this:\n  set us \\<subseteq> carrier_vec n\n  w \\<in> carrier_vec n\n  distinct (us @ w # ws)\n\ngoal (1 subgoal):\n 1. set ((adjuster n w us + w) # us) \\<subseteq> carrier_vec n", "by auto"], ["proof (state)\nthis:\n  set ((adjuster n w us + w) # us) \\<subseteq> carrier_vec n\n\ngoal (2 subgoals):\n 1. \\<And>us us'.\n       \\<lbrakk>gram_schmidt_sub n us [] = us';\n        set [] \\<subseteq> carrier_vec n; set us \\<subseteq> carrier_vec n;\n        distinct (us @ []); lin_indpt (set (us @ []));\n        corthogonal us\\<rbrakk>\n       \\<Longrightarrow> set us' \\<subseteq> carrier_vec n \\<and>\n                         distinct us' \\<and>\n                         corthogonal us' \\<and>\n                         local.span (set (us @ [])) =\n                         local.span (set us') \\<and>\n                         length us' = length us + length []\n 2. \\<And>a ws us us'.\n       \\<lbrakk>\\<And>us us'.\n                   \\<lbrakk>gram_schmidt_sub n us ws = us';\n                    set ws \\<subseteq> carrier_vec n;\n                    set us \\<subseteq> carrier_vec n; distinct (us @ ws);\n                    lin_indpt (set (us @ ws)); corthogonal us\\<rbrakk>\n                   \\<Longrightarrow> set us'\n                                     \\<subseteq> carrier_vec n \\<and>\n                                     distinct us' \\<and>\n                                     corthogonal us' \\<and>\n                                     local.span (set (us @ ws)) =\n                                     local.span (set us') \\<and>\n                                     length us' = length us + length ws;\n        gram_schmidt_sub n us (a # ws) = us';\n        set (a # ws) \\<subseteq> carrier_vec n;\n        set us \\<subseteq> carrier_vec n; distinct (us @ a # ws);\n        lin_indpt (set (us @ a # ws)); corthogonal us\\<rbrakk>\n       \\<Longrightarrow> set us' \\<subseteq> carrier_vec n \\<and>\n                         distinct us' \\<and>\n                         corthogonal us' \\<and>\n                         local.span (set (us @ a # ws)) =\n                         local.span (set us') \\<and>\n                         length us' = length us + length (a # ws)", "have dist2: \"distinct (((?v + w) # us) @ ws)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. distinct (((adjuster n w us + w) # us) @ ws)", "using dist vwUS"], ["proof (prove)\nusing this:\n  distinct (us @ w # ws)\n  adjuster n w us + w \\<notin> set (us @ ws)\n\ngoal (1 subgoal):\n 1. distinct (((adjuster n w us + w) # us) @ ws)", "by simp"], ["proof (state)\nthis:\n  distinct (((adjuster n w us + w) # us) @ ws)\n\ngoal (2 subgoals):\n 1. \\<And>us us'.\n       \\<lbrakk>gram_schmidt_sub n us [] = us';\n        set [] \\<subseteq> carrier_vec n; set us \\<subseteq> carrier_vec n;\n        distinct (us @ []); lin_indpt (set (us @ []));\n        corthogonal us\\<rbrakk>\n       \\<Longrightarrow> set us' \\<subseteq> carrier_vec n \\<and>\n                         distinct us' \\<and>\n                         corthogonal us' \\<and>\n                         local.span (set (us @ [])) =\n                         local.span (set us') \\<and>\n                         length us' = length us + length []\n 2. \\<And>a ws us us'.\n       \\<lbrakk>\\<And>us us'.\n                   \\<lbrakk>gram_schmidt_sub n us ws = us';\n                    set ws \\<subseteq> carrier_vec n;\n                    set us \\<subseteq> carrier_vec n; distinct (us @ ws);\n                    lin_indpt (set (us @ ws)); corthogonal us\\<rbrakk>\n                   \\<Longrightarrow> set us'\n                                     \\<subseteq> carrier_vec n \\<and>\n                                     distinct us' \\<and>\n                                     corthogonal us' \\<and>\n                                     local.span (set (us @ ws)) =\n                                     local.span (set us') \\<and>\n                                     length us' = length us + length ws;\n        gram_schmidt_sub n us (a # ws) = us';\n        set (a # ws) \\<subseteq> carrier_vec n;\n        set us \\<subseteq> carrier_vec n; distinct (us @ a # ws);\n        lin_indpt (set (us @ a # ws)); corthogonal us\\<rbrakk>\n       \\<Longrightarrow> set us' \\<subseteq> carrier_vec n \\<and>\n                         distinct us' \\<and>\n                         corthogonal us' \\<and>\n                         local.span (set (us @ a # ws)) =\n                         local.span (set us') \\<and>\n                         length us' = length us + length (a # ws)", "have orth2: \"corthogonal ((adjuster n w us + w) # us)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. corthogonal ((adjuster n w us + w) # us)", "using adjust_orthogonal[OF U corth w wsU]"], ["proof (prove)\nusing this:\n  corthogonal ((adjuster n w us + w) # us)\n\ngoal (1 subgoal):\n 1. corthogonal ((adjuster n w us + w) # us)", "."], ["proof (state)\nthis:\n  corthogonal ((adjuster n w us + w) # us)\n\ngoal (2 subgoals):\n 1. \\<And>us us'.\n       \\<lbrakk>gram_schmidt_sub n us [] = us';\n        set [] \\<subseteq> carrier_vec n; set us \\<subseteq> carrier_vec n;\n        distinct (us @ []); lin_indpt (set (us @ []));\n        corthogonal us\\<rbrakk>\n       \\<Longrightarrow> set us' \\<subseteq> carrier_vec n \\<and>\n                         distinct us' \\<and>\n                         corthogonal us' \\<and>\n                         local.span (set (us @ [])) =\n                         local.span (set us') \\<and>\n                         length us' = length us + length []\n 2. \\<And>a ws us us'.\n       \\<lbrakk>\\<And>us us'.\n                   \\<lbrakk>gram_schmidt_sub n us ws = us';\n                    set ws \\<subseteq> carrier_vec n;\n                    set us \\<subseteq> carrier_vec n; distinct (us @ ws);\n                    lin_indpt (set (us @ ws)); corthogonal us\\<rbrakk>\n                   \\<Longrightarrow> set us'\n                                     \\<subseteq> carrier_vec n \\<and>\n                                     distinct us' \\<and>\n                                     corthogonal us' \\<and>\n                                     local.span (set (us @ ws)) =\n                                     local.span (set us') \\<and>\n                                     length us' = length us + length ws;\n        gram_schmidt_sub n us (a # ws) = us';\n        set (a # ws) \\<subseteq> carrier_vec n;\n        set us \\<subseteq> carrier_vec n; distinct (us @ a # ws);\n        lin_indpt (set (us @ a # ws)); corthogonal us\\<rbrakk>\n       \\<Longrightarrow> set us' \\<subseteq> carrier_vec n \\<and>\n                         distinct us' \\<and>\n                         corthogonal us' \\<and>\n                         local.span (set (us @ a # ws)) =\n                         local.span (set us') \\<and>\n                         length us' = length us + length (a # ws)", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. set us' \\<subseteq> carrier_vec n \\<and>\n    distinct us' \\<and>\n    corthogonal us' \\<and>\n    local.span (set (us @ w # ws)) = local.span (set us') \\<and>\n    length us' = length us + length (w # ws)", "using Cons(1)[OF U'def W vwU dist2 ind2] orth2"], ["proof (prove)\nusing this:\n  corthogonal ((adjuster n w us + w) # us) \\<Longrightarrow>\n  set us' \\<subseteq> carrier_vec n \\<and>\n  distinct us' \\<and>\n  corthogonal us' \\<and>\n  local.span (set (((adjuster n w us + w) # us) @ ws)) =\n  local.span (set us') \\<and>\n  length us' = length ((adjuster n w us + w) # us) + length ws\n  corthogonal ((adjuster n w us + w) # us)\n\ngoal (1 subgoal):\n 1. set us' \\<subseteq> carrier_vec n \\<and>\n    distinct us' \\<and>\n    corthogonal us' \\<and>\n    local.span (set (us @ w # ws)) = local.span (set us') \\<and>\n    length us' = length us + length (w # ws)", "using span_Un[OF vwU wU gram_schmidt_sub_span[OF w U dist_U] W W]"], ["proof (prove)\nusing this:\n  corthogonal ((adjuster n w us + w) # us) \\<Longrightarrow>\n  set us' \\<subseteq> carrier_vec n \\<and>\n  distinct us' \\<and>\n  corthogonal us' \\<and>\n  local.span (set (((adjuster n w us + w) # us) @ ws)) =\n  local.span (set us') \\<and>\n  length us' = length ((adjuster n w us + w) # us) + length ws\n  corthogonal ((adjuster n w us + w) # us)\n  local.span (set ws) = local.span (set ws) \\<Longrightarrow>\n  local.span (set ((adjuster n w us + w) # us) \\<union> set ws) =\n  local.span (set (w # us) \\<union> set ws)\n\ngoal (1 subgoal):\n 1. set us' \\<subseteq> carrier_vec n \\<and>\n    distinct us' \\<and>\n    corthogonal us' \\<and>\n    local.span (set (us @ w # ws)) = local.span (set us') \\<and>\n    length us' = length us + length (w # ws)", "by auto"], ["proof (state)\nthis:\n  set us' \\<subseteq> carrier_vec n \\<and>\n  distinct us' \\<and>\n  corthogonal us' \\<and>\n  local.span (set (us @ w # ws)) = local.span (set us') \\<and>\n  length us' = length us + length (w # ws)\n\ngoal (1 subgoal):\n 1. \\<And>us us'.\n       \\<lbrakk>gram_schmidt_sub n us [] = us';\n        set [] \\<subseteq> carrier_vec n; set us \\<subseteq> carrier_vec n;\n        distinct (us @ []); lin_indpt (set (us @ []));\n        corthogonal us\\<rbrakk>\n       \\<Longrightarrow> set us' \\<subseteq> carrier_vec n \\<and>\n                         distinct us' \\<and>\n                         corthogonal us' \\<and>\n                         local.span (set (us @ [])) =\n                         local.span (set us') \\<and>\n                         length us' = length us + length []", "qed simp"], ["", "lemma gram_schmidt_hd [simp]:\n  assumes [simp]: \"w : carrier_vec n\" shows \"hd (gram_schmidt n (w#ws)) = w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. hd (gram_schmidt n (w # ws)) = w", "unfolding gram_schmidt_code"], ["proof (prove)\ngoal (1 subgoal):\n 1. hd (gram_schmidt_sub2 n [] (w # ws)) = w", "by simp"], ["", "theorem gram_schmidt_result:\n  assumes ws: \"set ws \\<subseteq> carrier_vec n\"\n    and dist: \"distinct ws\"\n    and ind: \"~ lin_dep (set ws)\"\n    and us: \"us = gram_schmidt n ws\"\n  shows \"span (set ws) = span (set us)\"\n    and \"corthogonal us\"\n    and \"set us \\<subseteq> carrier_vec n\"\n    and \"length us = length ws\"\n    and \"distinct us\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (local.span (set ws) = local.span (set us) &&& corthogonal us) &&&\n    set us \\<subseteq> carrier_vec n &&&\n    length us = length ws &&& distinct us", "proof -"], ["proof (state)\ngoal (5 subgoals):\n 1. local.span (set ws) = local.span (set us)\n 2. corthogonal us\n 3. set us \\<subseteq> carrier_vec n\n 4. length us = length ws\n 5. distinct us", "have main: \"gram_schmidt_sub n [] ws = rev us\""], ["proof (prove)\ngoal (1 subgoal):\n 1. gram_schmidt_sub n [] ws = rev us", "using us"], ["proof (prove)\nusing this:\n  us = gram_schmidt n ws\n\ngoal (1 subgoal):\n 1. gram_schmidt_sub n [] ws = rev us", "unfolding gram_schmidt_def"], ["proof (prove)\nusing this:\n  us = rev (gram_schmidt_sub n [] ws)\n\ngoal (1 subgoal):\n 1. gram_schmidt_sub n [] ws = rev us", "using gram_schmidt_sub_eq"], ["proof (prove)\nusing this:\n  us = rev (gram_schmidt_sub n [] ws)\n  rev (gram_schmidt_sub ?n ?us ?ws) = rev ?us @ gram_schmidt_sub2 ?n ?us ?ws\n\ngoal (1 subgoal):\n 1. gram_schmidt_sub n [] ws = rev us", "by auto"], ["proof (state)\nthis:\n  gram_schmidt_sub n [] ws = rev us\n\ngoal (5 subgoals):\n 1. local.span (set ws) = local.span (set us)\n 2. corthogonal us\n 3. set us \\<subseteq> carrier_vec n\n 4. length us = length ws\n 5. distinct us", "have orth: \"corthogonal []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. corthogonal []", "by auto"], ["proof (state)\nthis:\n  corthogonal []\n\ngoal (5 subgoals):\n 1. local.span (set ws) = local.span (set us)\n 2. corthogonal us\n 3. set us \\<subseteq> carrier_vec n\n 4. length us = length ws\n 5. distinct us", "have \"span (set ws) = span (set (rev us))\"\n   and orth2: \"corthogonal (rev us)\"\n   and \"set us \\<subseteq> carrier_vec n\"\n   and \"length us = length ws\"\n   and dist: \"distinct us\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (local.span (set ws) = local.span (set (rev us)) &&&\n     corthogonal (rev us)) &&&\n    set us \\<subseteq> carrier_vec n &&&\n    length us = length ws &&& distinct us", "using gram_schmidt_sub_result[OF main ws]"], ["proof (prove)\nusing this:\n  \\<lbrakk>set [] \\<subseteq> carrier_vec n; distinct ([] @ ws);\n   lin_indpt (set ([] @ ws)); corthogonal []\\<rbrakk>\n  \\<Longrightarrow> set (rev us) \\<subseteq> carrier_vec n \\<and>\n                    distinct (rev us) \\<and>\n                    corthogonal (rev us) \\<and>\n                    local.span (set ([] @ ws)) =\n                    local.span (set (rev us)) \\<and>\n                    length (rev us) = length [] + length ws\n\ngoal (1 subgoal):\n 1. (local.span (set ws) = local.span (set (rev us)) &&&\n     corthogonal (rev us)) &&&\n    set us \\<subseteq> carrier_vec n &&&\n    length us = length ws &&& distinct us", "by (auto simp: assms orth)"], ["proof (state)\nthis:\n  local.span (set ws) = local.span (set (rev us))\n  corthogonal (rev us)\n  set us \\<subseteq> carrier_vec n\n  length us = length ws\n  distinct us\n\ngoal (5 subgoals):\n 1. local.span (set ws) = local.span (set us)\n 2. corthogonal us\n 3. set us \\<subseteq> carrier_vec n\n 4. length us = length ws\n 5. distinct us", "thus \"span (set ws) = span (set us)\""], ["proof (prove)\nusing this:\n  local.span (set ws) = local.span (set (rev us))\n  corthogonal (rev us)\n  set us \\<subseteq> carrier_vec n\n  length us = length ws\n  distinct us\n\ngoal (1 subgoal):\n 1. local.span (set ws) = local.span (set us)", "by simp"], ["proof (state)\nthis:\n  local.span (set ws) = local.span (set us)\n\ngoal (4 subgoals):\n 1. corthogonal us\n 2. set us \\<subseteq> carrier_vec n\n 3. length us = length ws\n 4. distinct us", "show \"set us \\<subseteq> carrier_vec n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set us \\<subseteq> carrier_vec n", "by fact"], ["proof (state)\nthis:\n  set us \\<subseteq> carrier_vec n\n\ngoal (3 subgoals):\n 1. corthogonal us\n 2. length us = length ws\n 3. distinct us", "show \"length us = length ws\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length us = length ws", "by fact"], ["proof (state)\nthis:\n  length us = length ws\n\ngoal (2 subgoals):\n 1. corthogonal us\n 2. distinct us", "show \"distinct us\""], ["proof (prove)\ngoal (1 subgoal):\n 1. distinct us", "by fact"], ["proof (state)\nthis:\n  distinct us\n\ngoal (1 subgoal):\n 1. corthogonal us", "show \"corthogonal us\""], ["proof (prove)\ngoal (1 subgoal):\n 1. corthogonal us", "using corthogonal_distinct[OF orth2]"], ["proof (prove)\nusing this:\n  distinct (rev us)\n\ngoal (1 subgoal):\n 1. corthogonal us", "unfolding distinct_rev"], ["proof (prove)\nusing this:\n  distinct us\n\ngoal (1 subgoal):\n 1. corthogonal us", "using corthogonal_sort[OF _ set_rev orth2]"], ["proof (prove)\nusing this:\n  distinct us\n  distinct us \\<Longrightarrow> corthogonal us\n\ngoal (1 subgoal):\n 1. corthogonal us", "by auto"], ["proof (state)\nthis:\n  corthogonal us\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "end"]]}