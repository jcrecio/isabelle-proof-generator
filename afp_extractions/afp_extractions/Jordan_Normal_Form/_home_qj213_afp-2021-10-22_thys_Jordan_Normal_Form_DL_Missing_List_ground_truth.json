{"file_name": "/home/qj213/afp-2021-10-22/thys/Jordan_Normal_Form/DL_Missing_List.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Jordan_Normal_Form", "problem_names": ["lemma nth_map_zip:\nassumes \"i < length xs\"\nassumes \"i < length ys\"\nshows \"map f (zip xs ys) ! i = f (xs ! i, ys ! i)\"", "lemma nth_map_zip2:\nassumes \"i < length (map f (zip xs ys))\"\nshows \"map f (zip xs ys) ! i = f (xs ! i, ys ! i)\"", "lemma find_first_le:\nassumes \"a \\<in> set xs\"\nshows \"find_first a xs < length xs\"", "lemma nth_find_first:\nassumes \"a \\<in> set xs\"\nshows \"xs ! (find_first a xs) = a\"", "lemma find_first_unique:\nassumes \"distinct xs\"\nand \"i < length xs\"\nshows \"find_first (xs ! i) xs = i\""], "translations": [["", "lemma nth_map_zip:\nassumes \"i < length xs\"\nassumes \"i < length ys\"\nshows \"map f (zip xs ys) ! i = f (xs ! i, ys ! i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. map f (zip xs ys) ! i = f (xs ! i, ys ! i)", "using nth_zip nth_map length_zip"], ["proof (prove)\nusing this:\n  \\<lbrakk>?i < length ?xs; ?i < length ?ys\\<rbrakk>\n  \\<Longrightarrow> zip ?xs ?ys ! ?i = (?xs ! ?i, ?ys ! ?i)\n  ?n < length ?xs \\<Longrightarrow> map ?f ?xs ! ?n = ?f (?xs ! ?n)\n  length (zip ?xs ?ys) = min (length ?xs) (length ?ys)\n\ngoal (1 subgoal):\n 1. map f (zip xs ys) ! i = f (xs ! i, ys ! i)", "by (simp add: assms(1) assms(2))"], ["", "lemma nth_map_zip2:\nassumes \"i < length (map f (zip xs ys))\"\nshows \"map f (zip xs ys) ! i = f (xs ! i, ys ! i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. map f (zip xs ys) ! i = f (xs ! i, ys ! i)", "using nth_zip nth_map length_zip assms"], ["proof (prove)\nusing this:\n  \\<lbrakk>?i < length ?xs; ?i < length ?ys\\<rbrakk>\n  \\<Longrightarrow> zip ?xs ?ys ! ?i = (?xs ! ?i, ?ys ! ?i)\n  ?n < length ?xs \\<Longrightarrow> map ?f ?xs ! ?n = ?f (?xs ! ?n)\n  length (zip ?xs ?ys) = min (length ?xs) (length ?ys)\n  i < length (map f (zip xs ys))\n\ngoal (1 subgoal):\n 1. map f (zip xs ys) ! i = f (xs ! i, ys ! i)", "by simp"], ["", "fun find_first where\n\"find_first a [] = undefined\" |\n\"find_first a (x # xs) = (if x = a then 0 else Suc (find_first a xs))\""], ["", "lemma find_first_le:\nassumes \"a \\<in> set xs\"\nshows \"find_first a xs < length xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. find_first a xs < length xs", "using assms"], ["proof (prove)\nusing this:\n  a \\<in> set xs\n\ngoal (1 subgoal):\n 1. find_first a xs < length xs", "proof (induction xs)"], ["proof (state)\ngoal (2 subgoals):\n 1. a \\<in> set [] \\<Longrightarrow> find_first a [] < length []\n 2. \\<And>aa xs.\n       \\<lbrakk>a \\<in> set xs \\<Longrightarrow>\n                find_first a xs < length xs;\n        a \\<in> set (aa # xs)\\<rbrakk>\n       \\<Longrightarrow> find_first a (aa # xs) < length (aa # xs)", "case (Cons x xs)"], ["proof (state)\nthis:\n  a \\<in> set xs \\<Longrightarrow> find_first a xs < length xs\n  a \\<in> set (x # xs)\n\ngoal (2 subgoals):\n 1. a \\<in> set [] \\<Longrightarrow> find_first a [] < length []\n 2. \\<And>aa xs.\n       \\<lbrakk>a \\<in> set xs \\<Longrightarrow>\n                find_first a xs < length xs;\n        a \\<in> set (aa # xs)\\<rbrakk>\n       \\<Longrightarrow> find_first a (aa # xs) < length (aa # xs)", "then"], ["proof (chain)\npicking this:\n  a \\<in> set xs \\<Longrightarrow> find_first a xs < length xs\n  a \\<in> set (x # xs)", "show ?case"], ["proof (prove)\nusing this:\n  a \\<in> set xs \\<Longrightarrow> find_first a xs < length xs\n  a \\<in> set (x # xs)\n\ngoal (1 subgoal):\n 1. find_first a (x # xs) < length (x # xs)", "using find_first.simps(2) nth_Cons_0 nth_Cons_Suc set_ConsD"], ["proof (prove)\nusing this:\n  a \\<in> set xs \\<Longrightarrow> find_first a xs < length xs\n  a \\<in> set (x # xs)\n  find_first ?a (?x # ?xs) =\n  (if ?x = ?a then 0 else Suc (find_first ?a ?xs))\n  (?x # ?xs) ! 0 = ?x\n  (?x # ?xs) ! Suc ?n = ?xs ! ?n\n  ?y \\<in> set (?x # ?xs) \\<Longrightarrow> ?y = ?x \\<or> ?y \\<in> set ?xs\n\ngoal (1 subgoal):\n 1. find_first a (x # xs) < length (x # xs)", "by auto"], ["proof (state)\nthis:\n  find_first a (x # xs) < length (x # xs)\n\ngoal (1 subgoal):\n 1. a \\<in> set [] \\<Longrightarrow> find_first a [] < length []", "qed auto"], ["", "lemma nth_find_first:\nassumes \"a \\<in> set xs\"\nshows \"xs ! (find_first a xs) = a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. xs ! find_first a xs = a", "using assms"], ["proof (prove)\nusing this:\n  a \\<in> set xs\n\ngoal (1 subgoal):\n 1. xs ! find_first a xs = a", "proof (induction xs)"], ["proof (state)\ngoal (2 subgoals):\n 1. a \\<in> set [] \\<Longrightarrow> [] ! find_first a [] = a\n 2. \\<And>aa xs.\n       \\<lbrakk>a \\<in> set xs \\<Longrightarrow> xs ! find_first a xs = a;\n        a \\<in> set (aa # xs)\\<rbrakk>\n       \\<Longrightarrow> (aa # xs) ! find_first a (aa # xs) = a", "case (Cons x xs)"], ["proof (state)\nthis:\n  a \\<in> set xs \\<Longrightarrow> xs ! find_first a xs = a\n  a \\<in> set (x # xs)\n\ngoal (2 subgoals):\n 1. a \\<in> set [] \\<Longrightarrow> [] ! find_first a [] = a\n 2. \\<And>aa xs.\n       \\<lbrakk>a \\<in> set xs \\<Longrightarrow> xs ! find_first a xs = a;\n        a \\<in> set (aa # xs)\\<rbrakk>\n       \\<Longrightarrow> (aa # xs) ! find_first a (aa # xs) = a", "then"], ["proof (chain)\npicking this:\n  a \\<in> set xs \\<Longrightarrow> xs ! find_first a xs = a\n  a \\<in> set (x # xs)", "show ?case"], ["proof (prove)\nusing this:\n  a \\<in> set xs \\<Longrightarrow> xs ! find_first a xs = a\n  a \\<in> set (x # xs)\n\ngoal (1 subgoal):\n 1. (x # xs) ! find_first a (x # xs) = a", "using find_first.simps(2) nth_Cons_0 nth_Cons_Suc set_ConsD"], ["proof (prove)\nusing this:\n  a \\<in> set xs \\<Longrightarrow> xs ! find_first a xs = a\n  a \\<in> set (x # xs)\n  find_first ?a (?x # ?xs) =\n  (if ?x = ?a then 0 else Suc (find_first ?a ?xs))\n  (?x # ?xs) ! 0 = ?x\n  (?x # ?xs) ! Suc ?n = ?xs ! ?n\n  ?y \\<in> set (?x # ?xs) \\<Longrightarrow> ?y = ?x \\<or> ?y \\<in> set ?xs\n\ngoal (1 subgoal):\n 1. (x # xs) ! find_first a (x # xs) = a", "by auto"], ["proof (state)\nthis:\n  (x # xs) ! find_first a (x # xs) = a\n\ngoal (1 subgoal):\n 1. a \\<in> set [] \\<Longrightarrow> [] ! find_first a [] = a", "qed auto"], ["", "lemma find_first_unique:\nassumes \"distinct xs\"\nand \"i < length xs\"\nshows \"find_first (xs ! i) xs = i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. find_first (xs ! i) xs = i", "using assms"], ["proof (prove)\nusing this:\n  distinct xs\n  i < length xs\n\ngoal (1 subgoal):\n 1. find_first (xs ! i) xs = i", "proof (induction xs arbitrary:i)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>i.\n       \\<lbrakk>distinct []; i < length []\\<rbrakk>\n       \\<Longrightarrow> find_first ([] ! i) [] = i\n 2. \\<And>a xs i.\n       \\<lbrakk>\\<And>i.\n                   \\<lbrakk>distinct xs; i < length xs\\<rbrakk>\n                   \\<Longrightarrow> find_first (xs ! i) xs = i;\n        distinct (a # xs); i < length (a # xs)\\<rbrakk>\n       \\<Longrightarrow> find_first ((a # xs) ! i) (a # xs) = i", "case (Cons x xs i)"], ["proof (state)\nthis:\n  \\<lbrakk>distinct xs; ?i < length xs\\<rbrakk>\n  \\<Longrightarrow> find_first (xs ! ?i) xs = ?i\n  distinct (x # xs)\n  i < length (x # xs)\n\ngoal (2 subgoals):\n 1. \\<And>i.\n       \\<lbrakk>distinct []; i < length []\\<rbrakk>\n       \\<Longrightarrow> find_first ([] ! i) [] = i\n 2. \\<And>a xs i.\n       \\<lbrakk>\\<And>i.\n                   \\<lbrakk>distinct xs; i < length xs\\<rbrakk>\n                   \\<Longrightarrow> find_first (xs ! i) xs = i;\n        distinct (a # xs); i < length (a # xs)\\<rbrakk>\n       \\<Longrightarrow> find_first ((a # xs) ! i) (a # xs) = i", "then"], ["proof (chain)\npicking this:\n  \\<lbrakk>distinct xs; ?i < length xs\\<rbrakk>\n  \\<Longrightarrow> find_first (xs ! ?i) xs = ?i\n  distinct (x # xs)\n  i < length (x # xs)", "show ?case"], ["proof (prove)\nusing this:\n  \\<lbrakk>distinct xs; ?i < length xs\\<rbrakk>\n  \\<Longrightarrow> find_first (xs ! ?i) xs = ?i\n  distinct (x # xs)\n  i < length (x # xs)\n\ngoal (1 subgoal):\n 1. find_first ((x # xs) ! i) (x # xs) = i", "by (cases i; auto)"], ["proof (state)\nthis:\n  find_first ((x # xs) ! i) (x # xs) = i\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       \\<lbrakk>distinct []; i < length []\\<rbrakk>\n       \\<Longrightarrow> find_first ([] ! i) [] = i", "qed auto"], ["", "end"]]}