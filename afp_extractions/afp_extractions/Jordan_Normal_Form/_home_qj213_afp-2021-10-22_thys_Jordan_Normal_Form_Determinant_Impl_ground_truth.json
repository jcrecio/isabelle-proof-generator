{"file_name": "/home/qj213/afp-2021-10-22/thys/Jordan_Normal_Form/Determinant_Impl.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Jordan_Normal_Form", "problem_names": ["lemma det_selection_funD: \"det_selection_fun f \\<Longrightarrow> xs \\<noteq> [] \\<Longrightarrow> f xs \\<in> fst ` set xs\"", "lemma triangular_columnD [dest]:\n  \"triangular_column j A \\<Longrightarrow> j < i \\<Longrightarrow> i < dim_row A \\<Longrightarrow> A $$ (i,j) = 0\"", "lemma triangular_columnI [intro]:\n  \"(\\<And>i. j < i \\<Longrightarrow> i < dim_row A \\<Longrightarrow> A $$ (i,j) = 0) \\<Longrightarrow> triangular_column j A\"", "lemma triangular_to_triangular: \"upper_triangular A = triangular_to (dim_row A) A\"", "lemma triangular_toD [dest]:\n  \"triangular_to k A \\<Longrightarrow> j < k \\<Longrightarrow> j < i \\<Longrightarrow> i < dim_row A \\<Longrightarrow> A $$ (i,j) = 0\"", "lemma triangular_toI [intro]:\n  \"(\\<And>i j. j < k \\<Longrightarrow> j < i \\<Longrightarrow> i < dim_row A \\<Longrightarrow> A $$ (i,j) = 0) \\<Longrightarrow> triangular_to k A\"", "lemma triangle_growth:\n  assumes tri:\"triangular_to k A\"\n  and col:\"triangular_column k A\"\n  shows \"triangular_to (Suc k) A\"", "lemma triangle_trans: \"triangular_to k A \\<Longrightarrow> k > k' \\<Longrightarrow> triangular_to k' A\"", "lemma mute_preserves_dimensions:\n  assumes \"mute q k l (r,A) = (r',A')\"\n  shows [simp]: \"dim_row A' = dim_row A\" and [simp]: \"dim_col A' = dim_col A\"", "lemma mute_makes_0 :\n assumes mute_fun: \"mute_fun mf\"\n assumes \"mute (A $$ (l,l)) k l (r,A) = (r',A')\"\n \"l < dim_row A\"\n \"l < dim_col A\"\n \"k < dim_row A\"\n \"k \\<noteq> l\"\n shows \"A' $$ (k,l) = 0\"", "lemma mute_preserves:\n  \"mute q k l (r,A) = (r',A') \\<Longrightarrow>\n   i < dim_row A \\<Longrightarrow>\n   j < dim_col A \\<Longrightarrow>\n   l < dim_row A \\<Longrightarrow>\n   k < dim_row A \\<Longrightarrow>\n   i \\<noteq> k \\<Longrightarrow>\n   A' $$ (i,j) = A $$ (i,j)\"", "lemma mute_preserves_0:\n  \"mute q k l (r,A) = (r',A') \\<Longrightarrow>\n   i < dim_row A \\<Longrightarrow>\n   j < dim_col A \\<Longrightarrow>\n   l < dim_row A \\<Longrightarrow>\n   k < dim_row A \\<Longrightarrow>\n   A $$ (i,j) = 0 \\<Longrightarrow>\n   A $$ (l,j) = 0 \\<Longrightarrow>\n   A' $$ (i,j) = 0\"", "lemma mute_preserves_triangle:\n assumes rA' : \"mute q k l (r,A) = (r',A')\"\n and triA: \"triangular_to l A\"\n and lk: \"l < k\"\n and kr: \"k < dim_row A\"\n and lr: \"l < dim_row A\"\n and lc: \"l < dim_col A\"\n shows \"triangular_to l A'\"", "lemma sub1_preserves_dimensions[simp]:\n  \"sub1 q k l (r,A) = (r',A') \\<Longrightarrow> dim_row A' = dim_row A\"\n  \"sub1 q k l (r,A) = (r',A') \\<Longrightarrow> dim_col A' = dim_col A\"", "lemma sub1_closed [simp]:\n  \"sub1 q k l (r,A) = (r',A') \\<Longrightarrow> A \\<in> carrier_mat m n \\<Longrightarrow> A' \\<in> carrier_mat m n\"", "lemma sub1_preserves_diagnal:\n  assumes \"sub1 q k l (r,A) = (r',A')\"\n  and \"l < dim_col A\"\n  and \"k + l < dim_row A\"\n  shows \"A' $$ (l,l) = A $$ (l,l)\"", "lemma sub1_preserves_triangle:\n  assumes \"sub1 q k l (r,A) = (r',A')\"\n  and tri: \"triangular_to l A\"\n  and lr: \"l < dim_row A\"\n  and lc: \"l < dim_col A\"\n  and lkr: \"l + k < dim_row A\"\n  shows \"triangular_to l A'\"", "lemma sub1_makes_0s:\n  assumes \"sub1 (A $$ (l,l)) k l (r,A) = (r',A')\"\n  and lr: \"l < dim_row A\"\n  and lc: \"l < dim_col A\"\n  and li: \"l < i\"\n  and \"i \\<le> k + l\"\n  and \"k + l < dim_row A\"\n  shows \"A' $$ (i,l) = 0\"", "lemma sub1_triangulizes_column:\n  assumes rA': \"sub1 (A $$ (l,l)) (dim_row A - Suc l) l (r,A) = (r',A')\"\n  and tri:\"triangular_to l A\"\n  and r: \"dim_row A > 0\"\n  and lr: \"l < dim_row A\"\n  and lc: \"l < dim_col A\"\n  shows \"triangular_column l A'\"", "lemma sub1_grows_triangle:\n  assumes rA': \"sub1 (A $$ (l,l)) (dim_row A - Suc l) l (r,A) = (r',A')\"\n  and r: \"dim_row A > 0\"\n  and tri:\"triangular_to l A\"\n  and lr: \"l < dim_row A\"\n  and lc: \"l < dim_col A\"\n  shows \"triangular_to (Suc l) A'\"", "lemma find_non0: assumes sel_fun: \"det_selection_fun sel_fun\"\n  and res: \"find_non0 l A = Some m\"\n  shows \"A $$ (m,l) \\<noteq> 0\" \"l < m\" \"m < dim_row A\"", "lemma find_non0_all0:\n  \"find_non0 l A = None \\<Longrightarrow> triangular_column l A\"", "lemma sub2_preserves_dimensions[simp]:\n  assumes rA': \"sub2 d l (r,A) = (r',A')\"\n  shows \"dim_row A' = dim_row A \\<and> dim_col A' = dim_col A\"", "lemma sub2_closed [simp]:\n  \"sub2 d l (r,A) = (r',A') \\<Longrightarrow> A \\<in> carrier_mat m n \\<Longrightarrow> A' \\<in> carrier_mat m n\"", "lemma sub2_preserves_triangle:\n  assumes rA': \"sub2 d l (r,A) = (r',A')\"\n  and tri: \"triangular_to l A\"\n  and lc: \"l < dim_col A\"\n  and ld: \"l < d\"\n  and dr: \"d \\<le> dim_row A\"\n  shows \"triangular_to l A'\"", "lemma sub2_grows_triangle:\n  assumes mf: \"mute_fun mf\"\n  and rA': \"sub2 (dim_row A) l (r,A) = (r',A')\"\n  and tri: \"triangular_to l A\"\n  and lc: \"l < dim_col A\"\n  and lr: \"l < dim_row A\"\n  shows \"triangular_to (Suc l) A'\"", "lemma sub3_preserves_dimensions[simp]:\n  \"sub3 d l (r,A) = (r',A') \\<Longrightarrow> dim_row A' = dim_row A\"\n  \"sub3 d l (r,A) = (r',A') \\<Longrightarrow> dim_col A' = dim_col A\"", "lemma sub3_closed[simp]:\n  \"sub3 k l (r,A) = (r',A') \\<Longrightarrow> A \\<in> carrier_mat m n \\<Longrightarrow> A' \\<in> carrier_mat m n\"", "lemma sub3_makes_triangle:\n  assumes mf: \"mute_fun mf\"\n  and sel_fun: \"det_selection_fun sel_fun\"\n  and \"sub3 (dim_row A) l (r,A) = (r',A')\"\n  and \"l \\<le> dim_row A\"\n  and \"l \\<le> dim_col A\"\n  shows \"triangular_to l A'\"", "lemma triangulize_preserves_dimensions[simp]:\n  \"triangulize A = (r',A') \\<Longrightarrow> dim_row A' = dim_row A\"\n  \"triangulize A = (r',A') \\<Longrightarrow> dim_col A' = dim_col A\"", "lemma triangulize_closed[simp]:\n  \"triangulize A = (r',A') \\<Longrightarrow> A \\<in> carrier_mat m n \\<Longrightarrow> A' \\<in> carrier_mat m n\"", "theorem triangulized:\n  assumes \"A \\<in> carrier_mat n n\"\n  and \"triangulize A = (r',A')\"\n  shows \"upper_triangular A'\"", "lemma sub1_divisor [simp]:\n  assumes rA': \"sub1 q k l (r, A) = (r',A')\"\n  and r0: \"r \\<noteq> 0\"\n  and All: \"q \\<noteq> 0\"\n  and \"k + l < dim_row A \"\n  and lc: \"l < dim_col A\"\n  shows \"r' \\<noteq> 0\"", "lemma sub2_divisor [simp]:\n  assumes rA': \"sub2 k l (r, A) = (r',A')\"\n  and lk: \"l < k\"\n  and kr: \"k \\<le> dim_row A\"\n  and lc: \"l < dim_col A\"\n  and r0: \"r \\<noteq> 0\"\n  shows \"r' \\<noteq> 0\"", "lemma sub3_divisor [simp]:\n  assumes \"sub3 d l (r,A) = (r'',A'')\"\n  and \"l \\<le> d\"\n  and \"d \\<le> dim_row A\"\n  and \"l \\<le> dim_col A\"\n  and r0: \"r \\<noteq> 0\"\n  shows \"r'' \\<noteq> 0\"", "theorem triangulize_divisor:\n  assumes A: \"A \\<in> carrier_mat d d\"\n  shows \"triangulize A = (r',A') \\<Longrightarrow> r' \\<noteq> 0\"", "lemma mute_det:\n  assumes \"A \\<in> carrier_mat n n\"\n  and rA': \"mute q k l (r,A) = (r',A')\"\n  and \"k < n\"\n  and \"l < n\"\n  and \"k \\<noteq> l\"\n  shows \"r * det A' = r' * det A\"", "lemma sub1_det:\n  assumes A: \"A \\<in> carrier_mat n n\"\n  and sub1: \"sub1 q k l (r,A) = (r'',A'')\"\n  and r0: \"r \\<noteq> 0\"\n  and All0: \"q \\<noteq> 0\"\n  and l: \"l + k < n\"\n  shows \"r * det A'' = r'' * det A\"", "lemma sub2_det:\n  assumes A: \"A \\<in> carrier_mat d d\"\n  and rA': \"sub2 d l (r,A) = (r',A')\"\n  and r0: \"r \\<noteq> 0\"\n  and ld: \"l < d\"\n  shows \"r * det A' = r' * det A\"", "lemma sub3_det:\n  assumes A:\"A \\<in> carrier_mat d d\"\n  and \"sub3 d l (r,A) = (r'',A'')\"\n  and r0: \"r \\<noteq> 0\"\n  and \"l \\<le> d\"\n  shows \"r * det A'' = r'' * det A\"", "theorem triangulize_det:\n  assumes A: \"A \\<in> carrier_mat d d\"\n  and rA': \"triangulize A = (r',A')\"\n  shows \"det A * r' = det A'\"", "lemma det_code[simp]: assumes sel_fun: \"det_selection_fun sel_fun\"\n  and mf: \"mute_fun mf\"\n  shows \"det_code A = det A\"", "lemma trivial_mute_fun[simp,intro]: \"mute_fun trivial_mute_fun\"", "lemma fst_sel_fun[simp]: \"det_selection_fun fst_sel_fun\"", "lemma select_min[simp]: \"det_selection_fun select_min\"", "lemma det_code_fst_sel_fun[code]: \"det A = det_code fst_sel_fun trivial_mute_fun A\"", "lemma field_mute_fun[simp,intro]: \"mute_fun field_mute_fun\"", "lemma det_field[simp]: \"det_field = det\"", "lemma gcd_mute_fun[simp,intro]: \"mute_fun gcd_mute_fun\"", "lemma det_int[simp]: \"det_int = det\"", "lemma det_field_poly[simp]: \"det_field_poly = det\""], "translations": [["", "lemma det_selection_funD: \"det_selection_fun f \\<Longrightarrow> xs \\<noteq> [] \\<Longrightarrow> f xs \\<in> fst ` set xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>det_selection_fun f; xs \\<noteq> []\\<rbrakk>\n    \\<Longrightarrow> f xs \\<in> fst ` set xs", "unfolding det_selection_fun_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>xs.\n                xs \\<noteq> [] \\<longrightarrow> f xs \\<in> fst ` set xs;\n     xs \\<noteq> []\\<rbrakk>\n    \\<Longrightarrow> f xs \\<in> fst ` set xs", "by auto"], ["", "definition mute_fun :: \"('a :: comm_ring_1 \\<Rightarrow> 'a \\<Rightarrow> 'a \\<times> 'a \\<times> 'a) \\<Rightarrow> bool\" where\n  \"mute_fun f = (\\<forall> x y x' y' g. f x y = (x',y',g) \\<longrightarrow> y \\<noteq> 0 \n   \\<longrightarrow> x = x' * g \\<and> y * x' = x * y')\""], ["", "context\n  fixes sel_fun :: \"'a ::idom_divide det_selection_fun\"\nbegin"], ["", "subsection \\<open>Properties of triangular matrices\\<close>"], ["", "text \\<open>\n  Each column of a triangular matrix should satisfy the following property.\n\\<close>"], ["", "definition triangular_column::\"nat \\<Rightarrow> 'a mat \\<Rightarrow> bool\"\n  where \"triangular_column j A \\<equiv> \\<forall>i. j < i \\<longrightarrow> i < dim_row A \\<longrightarrow> A $$ (i,j) = 0\""], ["", "lemma triangular_columnD [dest]:\n  \"triangular_column j A \\<Longrightarrow> j < i \\<Longrightarrow> i < dim_row A \\<Longrightarrow> A $$ (i,j) = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>local.triangular_column j A; j < i; i < dim_row A\\<rbrakk>\n    \\<Longrightarrow> A $$ (i, j) = (0::'a)", "unfolding triangular_column_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>i>j.\n                i < dim_row A \\<longrightarrow> A $$ (i, j) = (0::'a);\n     j < i; i < dim_row A\\<rbrakk>\n    \\<Longrightarrow> A $$ (i, j) = (0::'a)", "by auto"], ["", "lemma triangular_columnI [intro]:\n  \"(\\<And>i. j < i \\<Longrightarrow> i < dim_row A \\<Longrightarrow> A $$ (i,j) = 0) \\<Longrightarrow> triangular_column j A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>i.\n        \\<lbrakk>j < i; i < dim_row A\\<rbrakk>\n        \\<Longrightarrow> A $$ (i, j) = (0::'a)) \\<Longrightarrow>\n    local.triangular_column j A", "unfolding triangular_column_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>i.\n        \\<lbrakk>j < i; i < dim_row A\\<rbrakk>\n        \\<Longrightarrow> A $$ (i, j) = (0::'a)) \\<Longrightarrow>\n    \\<forall>i>j. i < dim_row A \\<longrightarrow> A $$ (i, j) = (0::'a)", "by auto"], ["", "text \\<open>\n  The following predicate states that the first $k$ columns satisfy\n  triangularity.\n\\<close>"], ["", "definition triangular_to:: \"nat \\<Rightarrow> 'a mat \\<Rightarrow> bool\"\n  where \"triangular_to k A == \\<forall>j. j<k \\<longrightarrow> triangular_column j A\""], ["", "lemma triangular_to_triangular: \"upper_triangular A = triangular_to (dim_row A) A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. upper_triangular A = local.triangular_to (dim_row A) A", "unfolding triangular_to_def triangular_column_def upper_triangular_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>i<dim_row A. \\<forall>j<i. A $$ (i, j) = (0::'a)) =\n    (\\<forall>j<dim_row A.\n        \\<forall>i>j. i < dim_row A \\<longrightarrow> A $$ (i, j) = (0::'a))", "by auto"], ["", "lemma triangular_toD [dest]:\n  \"triangular_to k A \\<Longrightarrow> j < k \\<Longrightarrow> j < i \\<Longrightarrow> i < dim_row A \\<Longrightarrow> A $$ (i,j) = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>local.triangular_to k A; j < k; j < i; i < dim_row A\\<rbrakk>\n    \\<Longrightarrow> A $$ (i, j) = (0::'a)", "unfolding triangular_to_def triangular_column_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>j<k.\n                \\<forall>i>j.\n                   i < dim_row A \\<longrightarrow> A $$ (i, j) = (0::'a);\n     j < k; j < i; i < dim_row A\\<rbrakk>\n    \\<Longrightarrow> A $$ (i, j) = (0::'a)", "by auto"], ["", "lemma triangular_toI [intro]:\n  \"(\\<And>i j. j < k \\<Longrightarrow> j < i \\<Longrightarrow> i < dim_row A \\<Longrightarrow> A $$ (i,j) = 0) \\<Longrightarrow> triangular_to k A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>i j.\n        \\<lbrakk>j < k; j < i; i < dim_row A\\<rbrakk>\n        \\<Longrightarrow> A $$ (i, j) = (0::'a)) \\<Longrightarrow>\n    local.triangular_to k A", "unfolding triangular_to_def triangular_column_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>i j.\n        \\<lbrakk>j < k; j < i; i < dim_row A\\<rbrakk>\n        \\<Longrightarrow> A $$ (i, j) = (0::'a)) \\<Longrightarrow>\n    \\<forall>j<k.\n       \\<forall>i>j. i < dim_row A \\<longrightarrow> A $$ (i, j) = (0::'a)", "by auto"], ["", "lemma triangle_growth:\n  assumes tri:\"triangular_to k A\"\n  and col:\"triangular_column k A\"\n  shows \"triangular_to (Suc k) A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. local.triangular_to (Suc k) A", "unfolding triangular_to_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>j<Suc k. local.triangular_column j A", "proof (intro allI impI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>j. j < Suc k \\<Longrightarrow> local.triangular_column j A", "fix i"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>j. j < Suc k \\<Longrightarrow> local.triangular_column j A", "assume iSk:\"i < Suc k\""], ["proof (state)\nthis:\n  i < Suc k\n\ngoal (1 subgoal):\n 1. \\<And>j. j < Suc k \\<Longrightarrow> local.triangular_column j A", "show \"triangular_column i A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. local.triangular_column i A", "proof (cases \"i = k\")"], ["proof (state)\ngoal (2 subgoals):\n 1. i = k \\<Longrightarrow> local.triangular_column i A\n 2. i \\<noteq> k \\<Longrightarrow> local.triangular_column i A", "case True"], ["proof (state)\nthis:\n  i = k\n\ngoal (2 subgoals):\n 1. i = k \\<Longrightarrow> local.triangular_column i A\n 2. i \\<noteq> k \\<Longrightarrow> local.triangular_column i A", "then"], ["proof (chain)\npicking this:\n  i = k", "show ?thesis"], ["proof (prove)\nusing this:\n  i = k\n\ngoal (1 subgoal):\n 1. local.triangular_column i A", "using col"], ["proof (prove)\nusing this:\n  i = k\n  local.triangular_column k A\n\ngoal (1 subgoal):\n 1. local.triangular_column i A", "by auto"], ["proof (state)\nthis:\n  local.triangular_column i A\n\ngoal (1 subgoal):\n 1. i \\<noteq> k \\<Longrightarrow> local.triangular_column i A", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. i \\<noteq> k \\<Longrightarrow> local.triangular_column i A", "case False"], ["proof (state)\nthis:\n  i \\<noteq> k\n\ngoal (1 subgoal):\n 1. i \\<noteq> k \\<Longrightarrow> local.triangular_column i A", "then"], ["proof (chain)\npicking this:\n  i \\<noteq> k", "have \"i < k\""], ["proof (prove)\nusing this:\n  i \\<noteq> k\n\ngoal (1 subgoal):\n 1. i < k", "using iSk"], ["proof (prove)\nusing this:\n  i \\<noteq> k\n  i < Suc k\n\ngoal (1 subgoal):\n 1. i < k", "by auto"], ["proof (state)\nthis:\n  i < k\n\ngoal (1 subgoal):\n 1. i \\<noteq> k \\<Longrightarrow> local.triangular_column i A", "thus ?thesis"], ["proof (prove)\nusing this:\n  i < k\n\ngoal (1 subgoal):\n 1. local.triangular_column i A", "using tri"], ["proof (prove)\nusing this:\n  i < k\n  local.triangular_to k A\n\ngoal (1 subgoal):\n 1. local.triangular_column i A", "unfolding triangular_to_def"], ["proof (prove)\nusing this:\n  i < k\n  \\<forall>j<k. local.triangular_column j A\n\ngoal (1 subgoal):\n 1. local.triangular_column i A", "by auto"], ["proof (state)\nthis:\n  local.triangular_column i A\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  local.triangular_column i A\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma triangle_trans: \"triangular_to k A \\<Longrightarrow> k > k' \\<Longrightarrow> triangular_to k' A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>local.triangular_to k A; k' < k\\<rbrakk>\n    \\<Longrightarrow> local.triangular_to k' A", "by (intro triangular_toI, elim triangular_toD, auto)"], ["", "subsection \\<open>Algorithms for Triangulization\\<close>"], ["", "context \n  fixes mf :: \"'a \\<Rightarrow> 'a \\<Rightarrow> 'a \\<times> 'a \\<times> 'a\"\nbegin"], ["", "private"], ["", "fun mute :: \"'a \\<Rightarrow> nat \\<Rightarrow> nat \\<Rightarrow> 'a \\<times> 'a mat \\<Rightarrow> 'a \\<times> 'a mat\" where\n  \"mute A_ll k l (r,A) = (let p = A $$ (k,l) in if p = 0 then (r,A) else \n    case mf A_ll p of (q',p',g) \\<Rightarrow> \n      (r * q', addrow (-p') k l (multrow k q' A)))\""], ["", "lemma mute_preserves_dimensions:\n  assumes \"mute q k l (r,A) = (r',A')\"\n  shows [simp]: \"dim_row A' = dim_row A\" and [simp]: \"dim_col A' = dim_col A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dim_row A' = dim_row A &&& dim_col A' = dim_col A", "using assms"], ["proof (prove)\nusing this:\n  mute q k l (r, A) = (r', A')\n\ngoal (1 subgoal):\n 1. dim_row A' = dim_row A &&& dim_col A' = dim_col A", "by (auto simp: Let_def split: if_splits prod.splits)"], ["", "text \\<open>\n  Algorithm @{term \"mute k l\"} makes $k$-th row $l$-th column element to 0.\n\\<close>"], ["", "lemma mute_makes_0 :\n assumes mute_fun: \"mute_fun mf\"\n assumes \"mute (A $$ (l,l)) k l (r,A) = (r',A')\"\n \"l < dim_row A\"\n \"l < dim_col A\"\n \"k < dim_row A\"\n \"k \\<noteq> l\"\n shows \"A' $$ (k,l) = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A' $$ (k, l) = (0::'a)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. A' $$ (k, l) = (0::'a)", "define a where \"a = A $$ (l, l)\""], ["proof (state)\nthis:\n  a = A $$ (l, l)\n\ngoal (1 subgoal):\n 1. A' $$ (k, l) = (0::'a)", "define b where \"b = A $$ (k, l)\""], ["proof (state)\nthis:\n  b = A $$ (k, l)\n\ngoal (1 subgoal):\n 1. A' $$ (k, l) = (0::'a)", "let ?mf = \"mf (A $$ (l, l)) (A $$ (k, l))\""], ["proof (state)\ngoal (1 subgoal):\n 1. A' $$ (k, l) = (0::'a)", "obtain q' p' g where id: \"?mf = (q',p',g)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>q' p' g.\n        mf (A $$ (l, l)) (A $$ (k, l)) = (q', p', g) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (cases ?mf, auto)"], ["proof (state)\nthis:\n  mf (A $$ (l, l)) (A $$ (k, l)) = (q', p', g)\n\ngoal (1 subgoal):\n 1. A' $$ (k, l) = (0::'a)", "note mf = mute_fun[unfolded mute_fun_def, rule_format, OF id]"], ["proof (state)\nthis:\n  A $$ (k, l) \\<noteq> (0::'a) \\<Longrightarrow>\n  A $$ (l, l) = q' * g \\<and> A $$ (k, l) * q' = A $$ (l, l) * p'\n\ngoal (1 subgoal):\n 1. A' $$ (k, l) = (0::'a)", "from assms"], ["proof (chain)\npicking this:\n  mute_fun mf\n  mute (A $$ (l, l)) k l (r, A) = (r', A')\n  l < dim_row A\n  l < dim_col A\n  k < dim_row A\n  k \\<noteq> l", "show ?thesis"], ["proof (prove)\nusing this:\n  mute_fun mf\n  mute (A $$ (l, l)) k l (r, A) = (r', A')\n  l < dim_row A\n  l < dim_col A\n  k < dim_row A\n  k \\<noteq> l\n\ngoal (1 subgoal):\n 1. A' $$ (k, l) = (0::'a)", "unfolding mat_addrow_def"], ["proof (prove)\nusing this:\n  mute_fun mf\n  mute (A $$ (l, l)) k l (r, A) = (r', A')\n  l < dim_row A\n  l < dim_col A\n  k < dim_row A\n  k \\<noteq> l\n\ngoal (1 subgoal):\n 1. A' $$ (k, l) = (0::'a)", "using mf id"], ["proof (prove)\nusing this:\n  mute_fun mf\n  mute (A $$ (l, l)) k l (r, A) = (r', A')\n  l < dim_row A\n  l < dim_col A\n  k < dim_row A\n  k \\<noteq> l\n  A $$ (k, l) \\<noteq> (0::'a) \\<Longrightarrow>\n  A $$ (l, l) = q' * g \\<and> A $$ (k, l) * q' = A $$ (l, l) * p'\n  mf (A $$ (l, l)) (A $$ (k, l)) = (q', p', g)\n\ngoal (1 subgoal):\n 1. A' $$ (k, l) = (0::'a)", "by (auto simp: ac_simps Let_def split: if_splits)"], ["proof (state)\nthis:\n  A' $$ (k, l) = (0::'a)\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>It will not touch unexpected rows.\\<close>"], ["", "lemma mute_preserves:\n  \"mute q k l (r,A) = (r',A') \\<Longrightarrow>\n   i < dim_row A \\<Longrightarrow>\n   j < dim_col A \\<Longrightarrow>\n   l < dim_row A \\<Longrightarrow>\n   k < dim_row A \\<Longrightarrow>\n   i \\<noteq> k \\<Longrightarrow>\n   A' $$ (i,j) = A $$ (i,j)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>mute q k l (r, A) = (r', A'); i < dim_row A; j < dim_col A;\n     l < dim_row A; k < dim_row A; i \\<noteq> k\\<rbrakk>\n    \\<Longrightarrow> A' $$ (i, j) = A $$ (i, j)", "by (auto simp: Let_def split: if_splits prod.splits)"], ["", "text \\<open>It preserves $0$s in the touched row.\\<close>"], ["", "lemma mute_preserves_0:\n  \"mute q k l (r,A) = (r',A') \\<Longrightarrow>\n   i < dim_row A \\<Longrightarrow>\n   j < dim_col A \\<Longrightarrow>\n   l < dim_row A \\<Longrightarrow>\n   k < dim_row A \\<Longrightarrow>\n   A $$ (i,j) = 0 \\<Longrightarrow>\n   A $$ (l,j) = 0 \\<Longrightarrow>\n   A' $$ (i,j) = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>mute q k l (r, A) = (r', A'); i < dim_row A; j < dim_col A;\n     l < dim_row A; k < dim_row A; A $$ (i, j) = (0::'a);\n     A $$ (l, j) = (0::'a)\\<rbrakk>\n    \\<Longrightarrow> A' $$ (i, j) = (0::'a)", "by (auto simp: Let_def split: if_splits prod.splits)"], ["", "text \\<open>Hence, it will respect partially triangular matrix.\\<close>"], ["", "lemma mute_preserves_triangle:\n assumes rA' : \"mute q k l (r,A) = (r',A')\"\n and triA: \"triangular_to l A\"\n and lk: \"l < k\"\n and kr: \"k < dim_row A\"\n and lr: \"l < dim_row A\"\n and lc: \"l < dim_col A\"\n shows \"triangular_to l A'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. local.triangular_to l A'", "proof (rule triangular_toI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>j < l; j < i; i < dim_row A'\\<rbrakk>\n       \\<Longrightarrow> A' $$ (i, j) = (0::'a)", "fix i j"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>j < l; j < i; i < dim_row A'\\<rbrakk>\n       \\<Longrightarrow> A' $$ (i, j) = (0::'a)", "assume jl: \"j < l\" and ji: \"j < i\" and ir': \"i < dim_row A'\""], ["proof (state)\nthis:\n  j < l\n  j < i\n  i < dim_row A'\n\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>j < l; j < i; i < dim_row A'\\<rbrakk>\n       \\<Longrightarrow> A' $$ (i, j) = (0::'a)", "then"], ["proof (chain)\npicking this:\n  j < l\n  j < i\n  i < dim_row A'", "have A0: \"A $$ (i,j) = 0\""], ["proof (prove)\nusing this:\n  j < l\n  j < i\n  i < dim_row A'\n\ngoal (1 subgoal):\n 1. A $$ (i, j) = (0::'a)", "using triA rA'"], ["proof (prove)\nusing this:\n  j < l\n  j < i\n  i < dim_row A'\n  local.triangular_to l A\n  mute q k l (r, A) = (r', A')\n\ngoal (1 subgoal):\n 1. A $$ (i, j) = (0::'a)", "by auto"], ["proof (state)\nthis:\n  A $$ (i, j) = (0::'a)\n\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>j < l; j < i; i < dim_row A'\\<rbrakk>\n       \\<Longrightarrow> A' $$ (i, j) = (0::'a)", "moreover"], ["proof (state)\nthis:\n  A $$ (i, j) = (0::'a)\n\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>j < l; j < i; i < dim_row A'\\<rbrakk>\n       \\<Longrightarrow> A' $$ (i, j) = (0::'a)", "have \"A $$ (l,j) = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A $$ (l, j) = (0::'a)", "using triA jl jl lr"], ["proof (prove)\nusing this:\n  local.triangular_to l A\n  j < l\n  j < l\n  l < dim_row A\n\ngoal (1 subgoal):\n 1. A $$ (l, j) = (0::'a)", "by auto"], ["proof (state)\nthis:\n  A $$ (l, j) = (0::'a)\n\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>j < l; j < i; i < dim_row A'\\<rbrakk>\n       \\<Longrightarrow> A' $$ (i, j) = (0::'a)", "moreover"], ["proof (state)\nthis:\n  A $$ (l, j) = (0::'a)\n\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>j < l; j < i; i < dim_row A'\\<rbrakk>\n       \\<Longrightarrow> A' $$ (i, j) = (0::'a)", "have jc:\"j < dim_col A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. j < dim_col A", "using jl lc"], ["proof (prove)\nusing this:\n  j < l\n  l < dim_col A\n\ngoal (1 subgoal):\n 1. j < dim_col A", "by auto"], ["proof (state)\nthis:\n  j < dim_col A\n\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>j < l; j < i; i < dim_row A'\\<rbrakk>\n       \\<Longrightarrow> A' $$ (i, j) = (0::'a)", "moreover"], ["proof (state)\nthis:\n  j < dim_col A\n\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>j < l; j < i; i < dim_row A'\\<rbrakk>\n       \\<Longrightarrow> A' $$ (i, j) = (0::'a)", "have ir: \"i < dim_row A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. i < dim_row A", "using ir' rA'"], ["proof (prove)\nusing this:\n  i < dim_row A'\n  mute q k l (r, A) = (r', A')\n\ngoal (1 subgoal):\n 1. i < dim_row A", "by auto"], ["proof (state)\nthis:\n  i < dim_row A\n\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>j < l; j < i; i < dim_row A'\\<rbrakk>\n       \\<Longrightarrow> A' $$ (i, j) = (0::'a)", "ultimately"], ["proof (chain)\npicking this:\n  A $$ (i, j) = (0::'a)\n  A $$ (l, j) = (0::'a)\n  j < dim_col A\n  i < dim_row A", "show \"A' $$ (i,j) = 0\""], ["proof (prove)\nusing this:\n  A $$ (i, j) = (0::'a)\n  A $$ (l, j) = (0::'a)\n  j < dim_col A\n  i < dim_row A\n\ngoal (1 subgoal):\n 1. A' $$ (i, j) = (0::'a)", "using mute_preserves_0[OF rA'] lr kr"], ["proof (prove)\nusing this:\n  A $$ (i, j) = (0::'a)\n  A $$ (l, j) = (0::'a)\n  j < dim_col A\n  i < dim_row A\n  \\<lbrakk>?i < dim_row A; ?j < dim_col A; l < dim_row A; k < dim_row A;\n   A $$ (?i, ?j) = (0::'a); A $$ (l, ?j) = (0::'a)\\<rbrakk>\n  \\<Longrightarrow> A' $$ (?i, ?j) = (0::'a)\n  l < dim_row A\n  k < dim_row A\n\ngoal (1 subgoal):\n 1. A' $$ (i, j) = (0::'a)", "by auto"], ["proof (state)\nthis:\n  A' $$ (i, j) = (0::'a)\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>Recursive application of @{const mute}\\<close>"], ["", "private"], ["", "fun sub1 :: \"'a \\<Rightarrow> nat \\<Rightarrow> nat \\<Rightarrow> 'a \\<times> 'a mat \\<Rightarrow> 'a \\<times> 'a mat\"\nwhere \"sub1 q 0 l rA = rA\"\n  | \"sub1 q (Suc k) l rA = mute q (l + Suc k) l (sub1 q k l rA)\""], ["", "lemma sub1_preserves_dimensions[simp]:\n  \"sub1 q k l (r,A) = (r',A') \\<Longrightarrow> dim_row A' = dim_row A\"\n  \"sub1 q k l (r,A) = (r',A') \\<Longrightarrow> dim_col A' = dim_col A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (sub1 q k l (r, A) = (r', A') \\<Longrightarrow>\n     dim_row A' = dim_row A) &&&\n    (sub1 q k l (r, A) = (r', A') \\<Longrightarrow> dim_col A' = dim_col A)", "proof (induction k arbitrary: r' A')"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>r' A'.\n       sub1 q 0 l (r, A) = (r', A') \\<Longrightarrow> dim_row A' = dim_row A\n 2. \\<And>r' A'.\n       sub1 q 0 l (r, A) = (r', A') \\<Longrightarrow> dim_col A' = dim_col A\n 3. \\<And>k r' A'.\n       \\<lbrakk>\\<And>r' A'.\n                   sub1 q k l (r, A) = (r', A') \\<Longrightarrow>\n                   dim_row A' = dim_row A;\n        \\<And>r' A'.\n           sub1 q k l (r, A) = (r', A') \\<Longrightarrow>\n           dim_col A' = dim_col A;\n        sub1 q (Suc k) l (r, A) = (r', A')\\<rbrakk>\n       \\<Longrightarrow> dim_row A' = dim_row A\n 4. \\<And>k r' A'.\n       \\<lbrakk>\\<And>r' A'.\n                   sub1 q k l (r, A) = (r', A') \\<Longrightarrow>\n                   dim_row A' = dim_row A;\n        \\<And>r' A'.\n           sub1 q k l (r, A) = (r', A') \\<Longrightarrow>\n           dim_col A' = dim_col A;\n        sub1 q (Suc k) l (r, A) = (r', A')\\<rbrakk>\n       \\<Longrightarrow> dim_col A' = dim_col A", "case (Suc k)"], ["proof (state)\nthis:\n  sub1 q k l (r, A) = (?r', ?A') \\<Longrightarrow> dim_row ?A' = dim_row A\n  sub1 q k l (r, A) = (?r', ?A') \\<Longrightarrow> dim_col ?A' = dim_col A\n\ngoal (4 subgoals):\n 1. \\<And>r' A'.\n       sub1 q 0 l (r, A) = (r', A') \\<Longrightarrow> dim_row A' = dim_row A\n 2. \\<And>r' A'.\n       sub1 q 0 l (r, A) = (r', A') \\<Longrightarrow> dim_col A' = dim_col A\n 3. \\<And>k r' A'.\n       \\<lbrakk>\\<And>r' A'.\n                   sub1 q k l (r, A) = (r', A') \\<Longrightarrow>\n                   dim_row A' = dim_row A;\n        \\<And>r' A'.\n           sub1 q k l (r, A) = (r', A') \\<Longrightarrow>\n           dim_col A' = dim_col A;\n        sub1 q (Suc k) l (r, A) = (r', A')\\<rbrakk>\n       \\<Longrightarrow> dim_row A' = dim_row A\n 4. \\<And>k r' A'.\n       \\<lbrakk>\\<And>r' A'.\n                   sub1 q k l (r, A) = (r', A') \\<Longrightarrow>\n                   dim_row A' = dim_row A;\n        \\<And>r' A'.\n           sub1 q k l (r, A) = (r', A') \\<Longrightarrow>\n           dim_col A' = dim_col A;\n        sub1 q (Suc k) l (r, A) = (r', A')\\<rbrakk>\n       \\<Longrightarrow> dim_col A' = dim_col A", "moreover"], ["proof (state)\nthis:\n  sub1 q k l (r, A) = (?r', ?A') \\<Longrightarrow> dim_row ?A' = dim_row A\n  sub1 q k l (r, A) = (?r', ?A') \\<Longrightarrow> dim_col ?A' = dim_col A\n\ngoal (4 subgoals):\n 1. \\<And>r' A'.\n       sub1 q 0 l (r, A) = (r', A') \\<Longrightarrow> dim_row A' = dim_row A\n 2. \\<And>r' A'.\n       sub1 q 0 l (r, A) = (r', A') \\<Longrightarrow> dim_col A' = dim_col A\n 3. \\<And>k r' A'.\n       \\<lbrakk>\\<And>r' A'.\n                   sub1 q k l (r, A) = (r', A') \\<Longrightarrow>\n                   dim_row A' = dim_row A;\n        \\<And>r' A'.\n           sub1 q k l (r, A) = (r', A') \\<Longrightarrow>\n           dim_col A' = dim_col A;\n        sub1 q (Suc k) l (r, A) = (r', A')\\<rbrakk>\n       \\<Longrightarrow> dim_row A' = dim_row A\n 4. \\<And>k r' A'.\n       \\<lbrakk>\\<And>r' A'.\n                   sub1 q k l (r, A) = (r', A') \\<Longrightarrow>\n                   dim_row A' = dim_row A;\n        \\<And>r' A'.\n           sub1 q k l (r, A) = (r', A') \\<Longrightarrow>\n           dim_col A' = dim_col A;\n        sub1 q (Suc k) l (r, A) = (r', A')\\<rbrakk>\n       \\<Longrightarrow> dim_col A' = dim_col A", "obtain r' A' where rA': \"sub1 q k l (r, A) = (r', A')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>r' A'.\n        sub1 q k l (r, A) = (r', A') \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by force"], ["proof (state)\nthis:\n  sub1 q k l (r, A) = (r', A')\n\ngoal (4 subgoals):\n 1. \\<And>r' A'.\n       sub1 q 0 l (r, A) = (r', A') \\<Longrightarrow> dim_row A' = dim_row A\n 2. \\<And>r' A'.\n       sub1 q 0 l (r, A) = (r', A') \\<Longrightarrow> dim_col A' = dim_col A\n 3. \\<And>k r' A'.\n       \\<lbrakk>\\<And>r' A'.\n                   sub1 q k l (r, A) = (r', A') \\<Longrightarrow>\n                   dim_row A' = dim_row A;\n        \\<And>r' A'.\n           sub1 q k l (r, A) = (r', A') \\<Longrightarrow>\n           dim_col A' = dim_col A;\n        sub1 q (Suc k) l (r, A) = (r', A')\\<rbrakk>\n       \\<Longrightarrow> dim_row A' = dim_row A\n 4. \\<And>k r' A'.\n       \\<lbrakk>\\<And>r' A'.\n                   sub1 q k l (r, A) = (r', A') \\<Longrightarrow>\n                   dim_row A' = dim_row A;\n        \\<And>r' A'.\n           sub1 q k l (r, A) = (r', A') \\<Longrightarrow>\n           dim_col A' = dim_col A;\n        sub1 q (Suc k) l (r, A) = (r', A')\\<rbrakk>\n       \\<Longrightarrow> dim_col A' = dim_col A", "moreover"], ["proof (state)\nthis:\n  sub1 q k l (r, A) = (r', A')\n\ngoal (4 subgoals):\n 1. \\<And>r' A'.\n       sub1 q 0 l (r, A) = (r', A') \\<Longrightarrow> dim_row A' = dim_row A\n 2. \\<And>r' A'.\n       sub1 q 0 l (r, A) = (r', A') \\<Longrightarrow> dim_col A' = dim_col A\n 3. \\<And>k r' A'.\n       \\<lbrakk>\\<And>r' A'.\n                   sub1 q k l (r, A) = (r', A') \\<Longrightarrow>\n                   dim_row A' = dim_row A;\n        \\<And>r' A'.\n           sub1 q k l (r, A) = (r', A') \\<Longrightarrow>\n           dim_col A' = dim_col A;\n        sub1 q (Suc k) l (r, A) = (r', A')\\<rbrakk>\n       \\<Longrightarrow> dim_row A' = dim_row A\n 4. \\<And>k r' A'.\n       \\<lbrakk>\\<And>r' A'.\n                   sub1 q k l (r, A) = (r', A') \\<Longrightarrow>\n                   dim_row A' = dim_row A;\n        \\<And>r' A'.\n           sub1 q k l (r, A) = (r', A') \\<Longrightarrow>\n           dim_col A' = dim_col A;\n        sub1 q (Suc k) l (r, A) = (r', A')\\<rbrakk>\n       \\<Longrightarrow> dim_col A' = dim_col A", "fix r'' A''"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>r' A'.\n       sub1 q 0 l (r, A) = (r', A') \\<Longrightarrow> dim_row A' = dim_row A\n 2. \\<And>r' A'.\n       sub1 q 0 l (r, A) = (r', A') \\<Longrightarrow> dim_col A' = dim_col A\n 3. \\<And>k r' A'.\n       \\<lbrakk>\\<And>r' A'.\n                   sub1 q k l (r, A) = (r', A') \\<Longrightarrow>\n                   dim_row A' = dim_row A;\n        \\<And>r' A'.\n           sub1 q k l (r, A) = (r', A') \\<Longrightarrow>\n           dim_col A' = dim_col A;\n        sub1 q (Suc k) l (r, A) = (r', A')\\<rbrakk>\n       \\<Longrightarrow> dim_row A' = dim_row A\n 4. \\<And>k r' A'.\n       \\<lbrakk>\\<And>r' A'.\n                   sub1 q k l (r, A) = (r', A') \\<Longrightarrow>\n                   dim_row A' = dim_row A;\n        \\<And>r' A'.\n           sub1 q k l (r, A) = (r', A') \\<Longrightarrow>\n           dim_col A' = dim_col A;\n        sub1 q (Suc k) l (r, A) = (r', A')\\<rbrakk>\n       \\<Longrightarrow> dim_col A' = dim_col A", "assume \"sub1 q (Suc k) l (r, A) = (r'', A'')\""], ["proof (state)\nthis:\n  sub1 q (Suc k) l (r, A) = (r'', A'')\n\ngoal (4 subgoals):\n 1. \\<And>r' A'.\n       sub1 q 0 l (r, A) = (r', A') \\<Longrightarrow> dim_row A' = dim_row A\n 2. \\<And>r' A'.\n       sub1 q 0 l (r, A) = (r', A') \\<Longrightarrow> dim_col A' = dim_col A\n 3. \\<And>k r' A'.\n       \\<lbrakk>\\<And>r' A'.\n                   sub1 q k l (r, A) = (r', A') \\<Longrightarrow>\n                   dim_row A' = dim_row A;\n        \\<And>r' A'.\n           sub1 q k l (r, A) = (r', A') \\<Longrightarrow>\n           dim_col A' = dim_col A;\n        sub1 q (Suc k) l (r, A) = (r', A')\\<rbrakk>\n       \\<Longrightarrow> dim_row A' = dim_row A\n 4. \\<And>k r' A'.\n       \\<lbrakk>\\<And>r' A'.\n                   sub1 q k l (r, A) = (r', A') \\<Longrightarrow>\n                   dim_row A' = dim_row A;\n        \\<And>r' A'.\n           sub1 q k l (r, A) = (r', A') \\<Longrightarrow>\n           dim_col A' = dim_col A;\n        sub1 q (Suc k) l (r, A) = (r', A')\\<rbrakk>\n       \\<Longrightarrow> dim_col A' = dim_col A", "ultimately"], ["proof (chain)\npicking this:\n  sub1 q k l (r, A) = (?r', ?A') \\<Longrightarrow> dim_row ?A' = dim_row A\n  sub1 q k l (r, A) = (?r', ?A') \\<Longrightarrow> dim_col ?A' = dim_col A\n  sub1 q k l (r, A) = (r', A')\n  sub1 q (Suc k) l (r, A) = (r'', A'')", "show \"dim_row A'' = dim_row A\" \"dim_col A'' = dim_col A\""], ["proof (prove)\nusing this:\n  sub1 q k l (r, A) = (?r', ?A') \\<Longrightarrow> dim_row ?A' = dim_row A\n  sub1 q k l (r, A) = (?r', ?A') \\<Longrightarrow> dim_col ?A' = dim_col A\n  sub1 q k l (r, A) = (r', A')\n  sub1 q (Suc k) l (r, A) = (r'', A'')\n\ngoal (1 subgoal):\n 1. dim_row A'' = dim_row A &&& dim_col A'' = dim_col A", "by auto"], ["proof (state)\nthis:\n  dim_row A'' = dim_row A\n  dim_col A'' = dim_col A\n\ngoal (2 subgoals):\n 1. \\<And>r' A'.\n       sub1 q 0 l (r, A) = (r', A') \\<Longrightarrow> dim_row A' = dim_row A\n 2. \\<And>r' A'.\n       sub1 q 0 l (r, A) = (r', A') \\<Longrightarrow> dim_col A' = dim_col A", "qed auto"], ["", "lemma sub1_closed [simp]:\n  \"sub1 q k l (r,A) = (r',A') \\<Longrightarrow> A \\<in> carrier_mat m n \\<Longrightarrow> A' \\<in> carrier_mat m n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>sub1 q k l (r, A) = (r', A'); A \\<in> carrier_mat m n\\<rbrakk>\n    \\<Longrightarrow> A' \\<in> carrier_mat m n", "unfolding carrier_mat_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>sub1 q k l (r, A) = (r', A');\n     A \\<in> {ma. dim_row ma = m \\<and> dim_col ma = n}\\<rbrakk>\n    \\<Longrightarrow> A' \\<in> {ma. dim_row ma = m \\<and> dim_col ma = n}", "by auto"], ["", "lemma sub1_preserves_diagnal:\n  assumes \"sub1 q k l (r,A) = (r',A')\"\n  and \"l < dim_col A\"\n  and \"k + l < dim_row A\"\n  shows \"A' $$ (l,l) = A $$ (l,l)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A' $$ (l, l) = A $$ (l, l)", "using assms"], ["proof (prove)\nusing this:\n  sub1 q k l (r, A) = (r', A')\n  l < dim_col A\n  k + l < dim_row A\n\ngoal (1 subgoal):\n 1. A' $$ (l, l) = A $$ (l, l)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>sub1 q k l (r, A) = (r', A'); l < dim_col A;\n     k + l < dim_row A\\<rbrakk>\n    \\<Longrightarrow> A' $$ (l, l) = A $$ (l, l)", "show \"k + l < dim_row A \\<Longrightarrow> sub1 q k l (r,A) = (r',A') \\<Longrightarrow>\n    A' $$ (l,l) = A $$ (l,l)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>k + l < dim_row A; sub1 q k l (r, A) = (r', A')\\<rbrakk>\n    \\<Longrightarrow> A' $$ (l, l) = A $$ (l, l)", "proof (induction k arbitrary: r' A')"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>r' A'.\n       \\<lbrakk>0 + l < dim_row A; sub1 q 0 l (r, A) = (r', A')\\<rbrakk>\n       \\<Longrightarrow> A' $$ (l, l) = A $$ (l, l)\n 2. \\<And>k r' A'.\n       \\<lbrakk>\\<And>r' A'.\n                   \\<lbrakk>k + l < dim_row A;\n                    sub1 q k l (r, A) = (r', A')\\<rbrakk>\n                   \\<Longrightarrow> A' $$ (l, l) = A $$ (l, l);\n        Suc k + l < dim_row A; sub1 q (Suc k) l (r, A) = (r', A')\\<rbrakk>\n       \\<Longrightarrow> A' $$ (l, l) = A $$ (l, l)", "case (Suc k)"], ["proof (state)\nthis:\n  \\<lbrakk>k + l < dim_row A; sub1 q k l (r, A) = (?r', ?A')\\<rbrakk>\n  \\<Longrightarrow> ?A' $$ (l, l) = A $$ (l, l)\n  Suc k + l < dim_row A\n  sub1 q (Suc k) l (r, A) = (r', A')\n\ngoal (2 subgoals):\n 1. \\<And>r' A'.\n       \\<lbrakk>0 + l < dim_row A; sub1 q 0 l (r, A) = (r', A')\\<rbrakk>\n       \\<Longrightarrow> A' $$ (l, l) = A $$ (l, l)\n 2. \\<And>k r' A'.\n       \\<lbrakk>\\<And>r' A'.\n                   \\<lbrakk>k + l < dim_row A;\n                    sub1 q k l (r, A) = (r', A')\\<rbrakk>\n                   \\<Longrightarrow> A' $$ (l, l) = A $$ (l, l);\n        Suc k + l < dim_row A; sub1 q (Suc k) l (r, A) = (r', A')\\<rbrakk>\n       \\<Longrightarrow> A' $$ (l, l) = A $$ (l, l)", "obtain r'' A'' where rA''[simp]: \"sub1 q k l (r,A) = (r'',A'')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>r'' A''.\n        sub1 q k l (r, A) = (r'', A'') \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by force"], ["proof (state)\nthis:\n  sub1 q k l (r, A) = (r'', A'')\n\ngoal (2 subgoals):\n 1. \\<And>r' A'.\n       \\<lbrakk>0 + l < dim_row A; sub1 q 0 l (r, A) = (r', A')\\<rbrakk>\n       \\<Longrightarrow> A' $$ (l, l) = A $$ (l, l)\n 2. \\<And>k r' A'.\n       \\<lbrakk>\\<And>r' A'.\n                   \\<lbrakk>k + l < dim_row A;\n                    sub1 q k l (r, A) = (r', A')\\<rbrakk>\n                   \\<Longrightarrow> A' $$ (l, l) = A $$ (l, l);\n        Suc k + l < dim_row A; sub1 q (Suc k) l (r, A) = (r', A')\\<rbrakk>\n       \\<Longrightarrow> A' $$ (l, l) = A $$ (l, l)", "have [simp]:\"dim_row A'' = dim_row A\" and [simp]:\"dim_col A'' = dim_col A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dim_row A'' = dim_row A &&& dim_col A'' = dim_col A", "using snd_conv sub1_preserves_dimensions[OF rA'']"], ["proof (prove)\nusing this:\n  snd (?x1.0, ?x2.0) = ?x2.0\n  dim_row A'' = dim_row A\n  dim_col A'' = dim_col A\n\ngoal (1 subgoal):\n 1. dim_row A'' = dim_row A &&& dim_col A'' = dim_col A", "by auto"], ["proof (state)\nthis:\n  dim_row A'' = dim_row A\n  dim_col A'' = dim_col A\n\ngoal (2 subgoals):\n 1. \\<And>r' A'.\n       \\<lbrakk>0 + l < dim_row A; sub1 q 0 l (r, A) = (r', A')\\<rbrakk>\n       \\<Longrightarrow> A' $$ (l, l) = A $$ (l, l)\n 2. \\<And>k r' A'.\n       \\<lbrakk>\\<And>r' A'.\n                   \\<lbrakk>k + l < dim_row A;\n                    sub1 q k l (r, A) = (r', A')\\<rbrakk>\n                   \\<Longrightarrow> A' $$ (l, l) = A $$ (l, l);\n        Suc k + l < dim_row A; sub1 q (Suc k) l (r, A) = (r', A')\\<rbrakk>\n       \\<Longrightarrow> A' $$ (l, l) = A $$ (l, l)", "have \"A'' $$ (l,l) = A $$ (l,l)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A'' $$ (l, l) = A $$ (l, l)", "using assms Suc"], ["proof (prove)\nusing this:\n  sub1 q k l (r, A) = (r', A')\n  l < dim_col A\n  k + l < dim_row A\n  \\<lbrakk>k + l < dim_row A; sub1 q k l (r, A) = (?r', ?A')\\<rbrakk>\n  \\<Longrightarrow> ?A' $$ (l, l) = A $$ (l, l)\n  Suc k + l < dim_row A\n  sub1 q (Suc k) l (r, A) = (r', A')\n\ngoal (1 subgoal):\n 1. A'' $$ (l, l) = A $$ (l, l)", "by auto"], ["proof (state)\nthis:\n  A'' $$ (l, l) = A $$ (l, l)\n\ngoal (2 subgoals):\n 1. \\<And>r' A'.\n       \\<lbrakk>0 + l < dim_row A; sub1 q 0 l (r, A) = (r', A')\\<rbrakk>\n       \\<Longrightarrow> A' $$ (l, l) = A $$ (l, l)\n 2. \\<And>k r' A'.\n       \\<lbrakk>\\<And>r' A'.\n                   \\<lbrakk>k + l < dim_row A;\n                    sub1 q k l (r, A) = (r', A')\\<rbrakk>\n                   \\<Longrightarrow> A' $$ (l, l) = A $$ (l, l);\n        Suc k + l < dim_row A; sub1 q (Suc k) l (r, A) = (r', A')\\<rbrakk>\n       \\<Longrightarrow> A' $$ (l, l) = A $$ (l, l)", "have rA': \"mute q (l + Suc k) l (r'', A'') = (r',A')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mute q (l + Suc k) l (r'', A'') = (r', A')", "using Suc"], ["proof (prove)\nusing this:\n  \\<lbrakk>k + l < dim_row A; sub1 q k l (r, A) = (?r', ?A')\\<rbrakk>\n  \\<Longrightarrow> ?A' $$ (l, l) = A $$ (l, l)\n  Suc k + l < dim_row A\n  sub1 q (Suc k) l (r, A) = (r', A')\n\ngoal (1 subgoal):\n 1. mute q (l + Suc k) l (r'', A'') = (r', A')", "by auto"], ["proof (state)\nthis:\n  mute q (l + Suc k) l (r'', A'') = (r', A')\n\ngoal (2 subgoals):\n 1. \\<And>r' A'.\n       \\<lbrakk>0 + l < dim_row A; sub1 q 0 l (r, A) = (r', A')\\<rbrakk>\n       \\<Longrightarrow> A' $$ (l, l) = A $$ (l, l)\n 2. \\<And>k r' A'.\n       \\<lbrakk>\\<And>r' A'.\n                   \\<lbrakk>k + l < dim_row A;\n                    sub1 q k l (r, A) = (r', A')\\<rbrakk>\n                   \\<Longrightarrow> A' $$ (l, l) = A $$ (l, l);\n        Suc k + l < dim_row A; sub1 q (Suc k) l (r, A) = (r', A')\\<rbrakk>\n       \\<Longrightarrow> A' $$ (l, l) = A $$ (l, l)", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. A' $$ (l, l) = A $$ (l, l)", "using subst mute_preserves[OF rA'] Suc assms"], ["proof (prove)\nusing this:\n  \\<lbrakk>?s = ?t; ?P ?s\\<rbrakk> \\<Longrightarrow> ?P ?t\n  \\<lbrakk>?i < dim_row A''; ?j < dim_col A''; l < dim_row A'';\n   l + Suc k < dim_row A''; ?i \\<noteq> l + Suc k\\<rbrakk>\n  \\<Longrightarrow> A' $$ (?i, ?j) = A'' $$ (?i, ?j)\n  \\<lbrakk>k + l < dim_row A; sub1 q k l (r, A) = (?r', ?A')\\<rbrakk>\n  \\<Longrightarrow> ?A' $$ (l, l) = A $$ (l, l)\n  Suc k + l < dim_row A\n  sub1 q (Suc k) l (r, A) = (r', A')\n  sub1 q k l (r, A) = (r', A')\n  l < dim_col A\n  k + l < dim_row A\n\ngoal (1 subgoal):\n 1. A' $$ (l, l) = A $$ (l, l)", "by auto"], ["proof (state)\nthis:\n  A' $$ (l, l) = A $$ (l, l)\n\ngoal (1 subgoal):\n 1. \\<And>r' A'.\n       \\<lbrakk>0 + l < dim_row A; sub1 q 0 l (r, A) = (r', A')\\<rbrakk>\n       \\<Longrightarrow> A' $$ (l, l) = A $$ (l, l)", "qed auto"], ["proof (state)\nthis:\n  \\<lbrakk>k + l < dim_row A; sub1 q k l (r, A) = (r', A')\\<rbrakk>\n  \\<Longrightarrow> A' $$ (l, l) = A $$ (l, l)\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>Triangularity is respected by @{const sub1}.\\<close>"], ["", "lemma sub1_preserves_triangle:\n  assumes \"sub1 q k l (r,A) = (r',A')\"\n  and tri: \"triangular_to l A\"\n  and lr: \"l < dim_row A\"\n  and lc: \"l < dim_col A\"\n  and lkr: \"l + k < dim_row A\"\n  shows \"triangular_to l A'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. local.triangular_to l A'", "using assms"], ["proof (prove)\nusing this:\n  sub1 q k l (r, A) = (r', A')\n  local.triangular_to l A\n  l < dim_row A\n  l < dim_col A\n  l + k < dim_row A\n\ngoal (1 subgoal):\n 1. local.triangular_to l A'", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>sub1 q k l (r, A) = (r', A'); local.triangular_to l A;\n     l < dim_row A; l < dim_col A; l + k < dim_row A\\<rbrakk>\n    \\<Longrightarrow> local.triangular_to l A'", "show \"sub1 q k l (r,A) = (r',A') \\<Longrightarrow> l + k < dim_row A \\<Longrightarrow>\n    triangular_to l A'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>sub1 q k l (r, A) = (r', A'); l + k < dim_row A\\<rbrakk>\n    \\<Longrightarrow> local.triangular_to l A'", "proof (induction k arbitrary: r' A')"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>r' A'.\n       \\<lbrakk>sub1 q 0 l (r, A) = (r', A'); l + 0 < dim_row A\\<rbrakk>\n       \\<Longrightarrow> local.triangular_to l A'\n 2. \\<And>k r' A'.\n       \\<lbrakk>\\<And>r' A'.\n                   \\<lbrakk>sub1 q k l (r, A) = (r', A');\n                    l + k < dim_row A\\<rbrakk>\n                   \\<Longrightarrow> local.triangular_to l A';\n        sub1 q (Suc k) l (r, A) = (r', A'); l + Suc k < dim_row A\\<rbrakk>\n       \\<Longrightarrow> local.triangular_to l A'", "case (Suc k)"], ["proof (state)\nthis:\n  \\<lbrakk>sub1 q k l (r, A) = (?r', ?A'); l + k < dim_row A\\<rbrakk>\n  \\<Longrightarrow> local.triangular_to l ?A'\n  sub1 q (Suc k) l (r, A) = (r', A')\n  l + Suc k < dim_row A\n\ngoal (2 subgoals):\n 1. \\<And>r' A'.\n       \\<lbrakk>sub1 q 0 l (r, A) = (r', A'); l + 0 < dim_row A\\<rbrakk>\n       \\<Longrightarrow> local.triangular_to l A'\n 2. \\<And>k r' A'.\n       \\<lbrakk>\\<And>r' A'.\n                   \\<lbrakk>sub1 q k l (r, A) = (r', A');\n                    l + k < dim_row A\\<rbrakk>\n                   \\<Longrightarrow> local.triangular_to l A';\n        sub1 q (Suc k) l (r, A) = (r', A'); l + Suc k < dim_row A\\<rbrakk>\n       \\<Longrightarrow> local.triangular_to l A'", "then"], ["proof (chain)\npicking this:\n  \\<lbrakk>sub1 q k l (r, A) = (?r', ?A'); l + k < dim_row A\\<rbrakk>\n  \\<Longrightarrow> local.triangular_to l ?A'\n  sub1 q (Suc k) l (r, A) = (r', A')\n  l + Suc k < dim_row A", "have \"sub1 q (Suc k) l (r,A) = (r',A')\""], ["proof (prove)\nusing this:\n  \\<lbrakk>sub1 q k l (r, A) = (?r', ?A'); l + k < dim_row A\\<rbrakk>\n  \\<Longrightarrow> local.triangular_to l ?A'\n  sub1 q (Suc k) l (r, A) = (r', A')\n  l + Suc k < dim_row A\n\ngoal (1 subgoal):\n 1. sub1 q (Suc k) l (r, A) = (r', A')", "by auto"], ["proof (state)\nthis:\n  sub1 q (Suc k) l (r, A) = (r', A')\n\ngoal (2 subgoals):\n 1. \\<And>r' A'.\n       \\<lbrakk>sub1 q 0 l (r, A) = (r', A'); l + 0 < dim_row A\\<rbrakk>\n       \\<Longrightarrow> local.triangular_to l A'\n 2. \\<And>k r' A'.\n       \\<lbrakk>\\<And>r' A'.\n                   \\<lbrakk>sub1 q k l (r, A) = (r', A');\n                    l + k < dim_row A\\<rbrakk>\n                   \\<Longrightarrow> local.triangular_to l A';\n        sub1 q (Suc k) l (r, A) = (r', A'); l + Suc k < dim_row A\\<rbrakk>\n       \\<Longrightarrow> local.triangular_to l A'", "moreover"], ["proof (state)\nthis:\n  sub1 q (Suc k) l (r, A) = (r', A')\n\ngoal (2 subgoals):\n 1. \\<And>r' A'.\n       \\<lbrakk>sub1 q 0 l (r, A) = (r', A'); l + 0 < dim_row A\\<rbrakk>\n       \\<Longrightarrow> local.triangular_to l A'\n 2. \\<And>k r' A'.\n       \\<lbrakk>\\<And>r' A'.\n                   \\<lbrakk>sub1 q k l (r, A) = (r', A');\n                    l + k < dim_row A\\<rbrakk>\n                   \\<Longrightarrow> local.triangular_to l A';\n        sub1 q (Suc k) l (r, A) = (r', A'); l + Suc k < dim_row A\\<rbrakk>\n       \\<Longrightarrow> local.triangular_to l A'", "obtain r'' A''\n      where rA'': \"sub1 q k l (r, A) = (r'',A'')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>r'' A''.\n        sub1 q k l (r, A) = (r'', A'') \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by force"], ["proof (state)\nthis:\n  sub1 q k l (r, A) = (r'', A'')\n\ngoal (2 subgoals):\n 1. \\<And>r' A'.\n       \\<lbrakk>sub1 q 0 l (r, A) = (r', A'); l + 0 < dim_row A\\<rbrakk>\n       \\<Longrightarrow> local.triangular_to l A'\n 2. \\<And>k r' A'.\n       \\<lbrakk>\\<And>r' A'.\n                   \\<lbrakk>sub1 q k l (r, A) = (r', A');\n                    l + k < dim_row A\\<rbrakk>\n                   \\<Longrightarrow> local.triangular_to l A';\n        sub1 q (Suc k) l (r, A) = (r', A'); l + Suc k < dim_row A\\<rbrakk>\n       \\<Longrightarrow> local.triangular_to l A'", "ultimately"], ["proof (chain)\npicking this:\n  sub1 q (Suc k) l (r, A) = (r', A')\n  sub1 q k l (r, A) = (r'', A'')", "have rA': \"mute q (Suc (l + k)) l (r'',A'') = (r',A')\""], ["proof (prove)\nusing this:\n  sub1 q (Suc k) l (r, A) = (r', A')\n  sub1 q k l (r, A) = (r'', A'')\n\ngoal (1 subgoal):\n 1. mute q (Suc (l + k)) l (r'', A'') = (r', A')", "by auto"], ["proof (state)\nthis:\n  mute q (Suc (l + k)) l (r'', A'') = (r', A')\n\ngoal (2 subgoals):\n 1. \\<And>r' A'.\n       \\<lbrakk>sub1 q 0 l (r, A) = (r', A'); l + 0 < dim_row A\\<rbrakk>\n       \\<Longrightarrow> local.triangular_to l A'\n 2. \\<And>k r' A'.\n       \\<lbrakk>\\<And>r' A'.\n                   \\<lbrakk>sub1 q k l (r, A) = (r', A');\n                    l + k < dim_row A\\<rbrakk>\n                   \\<Longrightarrow> local.triangular_to l A';\n        sub1 q (Suc k) l (r, A) = (r', A'); l + Suc k < dim_row A\\<rbrakk>\n       \\<Longrightarrow> local.triangular_to l A'", "have \"triangular_to l A''\""], ["proof (prove)\ngoal (1 subgoal):\n 1. local.triangular_to l A''", "using rA'' Suc"], ["proof (prove)\nusing this:\n  sub1 q k l (r, A) = (r'', A'')\n  \\<lbrakk>sub1 q k l (r, A) = (?r', ?A'); l + k < dim_row A\\<rbrakk>\n  \\<Longrightarrow> local.triangular_to l ?A'\n  sub1 q (Suc k) l (r, A) = (r', A')\n  l + Suc k < dim_row A\n\ngoal (1 subgoal):\n 1. local.triangular_to l A''", "by auto"], ["proof (state)\nthis:\n  local.triangular_to l A''\n\ngoal (2 subgoals):\n 1. \\<And>r' A'.\n       \\<lbrakk>sub1 q 0 l (r, A) = (r', A'); l + 0 < dim_row A\\<rbrakk>\n       \\<Longrightarrow> local.triangular_to l A'\n 2. \\<And>k r' A'.\n       \\<lbrakk>\\<And>r' A'.\n                   \\<lbrakk>sub1 q k l (r, A) = (r', A');\n                    l + k < dim_row A\\<rbrakk>\n                   \\<Longrightarrow> local.triangular_to l A';\n        sub1 q (Suc k) l (r, A) = (r', A'); l + Suc k < dim_row A\\<rbrakk>\n       \\<Longrightarrow> local.triangular_to l A'", "thus ?case"], ["proof (prove)\nusing this:\n  local.triangular_to l A''\n\ngoal (1 subgoal):\n 1. local.triangular_to l A'", "using Suc assms mute_preserves_triangle[OF rA'] rA''"], ["proof (prove)\nusing this:\n  local.triangular_to l A''\n  \\<lbrakk>sub1 q k l (r, A) = (?r', ?A'); l + k < dim_row A\\<rbrakk>\n  \\<Longrightarrow> local.triangular_to l ?A'\n  sub1 q (Suc k) l (r, A) = (r', A')\n  l + Suc k < dim_row A\n  sub1 q k l (r, A) = (r', A')\n  local.triangular_to l A\n  l < dim_row A\n  l < dim_col A\n  l + k < dim_row A\n  \\<lbrakk>local.triangular_to l A''; l < Suc (l + k);\n   Suc (l + k) < dim_row A''; l < dim_row A''; l < dim_col A''\\<rbrakk>\n  \\<Longrightarrow> local.triangular_to l A'\n  sub1 q k l (r, A) = (r'', A'')\n\ngoal (1 subgoal):\n 1. local.triangular_to l A'", "by auto"], ["proof (state)\nthis:\n  local.triangular_to l A'\n\ngoal (1 subgoal):\n 1. \\<And>r' A'.\n       \\<lbrakk>sub1 q 0 l (r, A) = (r', A'); l + 0 < dim_row A\\<rbrakk>\n       \\<Longrightarrow> local.triangular_to l A'", "qed (insert assms,auto)"], ["proof (state)\nthis:\n  \\<lbrakk>sub1 q k l (r, A) = (r', A'); l + k < dim_row A\\<rbrakk>\n  \\<Longrightarrow> local.triangular_to l A'\n\ngoal:\nNo subgoals!", "qed"], ["", "context\n  assumes mf: \"mute_fun mf\"\nbegin"], ["", "lemma sub1_makes_0s:\n  assumes \"sub1 (A $$ (l,l)) k l (r,A) = (r',A')\"\n  and lr: \"l < dim_row A\"\n  and lc: \"l < dim_col A\"\n  and li: \"l < i\"\n  and \"i \\<le> k + l\"\n  and \"k + l < dim_row A\"\n  shows \"A' $$ (i,l) = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A' $$ (i, l) = (0::'a)", "using assms"], ["proof (prove)\nusing this:\n  sub1 (A $$ (l, l)) k l (r, A) = (r', A')\n  l < dim_row A\n  l < dim_col A\n  l < i\n  i \\<le> k + l\n  k + l < dim_row A\n\ngoal (1 subgoal):\n 1. A' $$ (i, l) = (0::'a)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>sub1 (A $$ (l, l)) k l (r, A) = (r', A'); l < dim_row A;\n     l < dim_col A; l < i; i \\<le> k + l; k + l < dim_row A\\<rbrakk>\n    \\<Longrightarrow> A' $$ (i, l) = (0::'a)", "show \"sub1 (A $$ (l,l)) k l (r,A) = (r',A') \\<Longrightarrow> i \\<le> k + l \\<Longrightarrow> k + l < dim_row A \\<Longrightarrow>\n    A' $$ (i,l) = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>sub1 (A $$ (l, l)) k l (r, A) = (r', A'); i \\<le> k + l;\n     k + l < dim_row A\\<rbrakk>\n    \\<Longrightarrow> A' $$ (i, l) = (0::'a)", "using lr lc li"], ["proof (prove)\nusing this:\n  l < dim_row A\n  l < dim_col A\n  l < i\n\ngoal (1 subgoal):\n 1. \\<lbrakk>sub1 (A $$ (l, l)) k l (r, A) = (r', A'); i \\<le> k + l;\n     k + l < dim_row A\\<rbrakk>\n    \\<Longrightarrow> A' $$ (i, l) = (0::'a)", "proof (induction k arbitrary: r' A')"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>r' A'.\n       \\<lbrakk>sub1 (A $$ (l, l)) 0 l (r, A) = (r', A'); i \\<le> 0 + l;\n        0 + l < dim_row A; l < dim_row A; l < dim_col A; l < i\\<rbrakk>\n       \\<Longrightarrow> A' $$ (i, l) = (0::'a)\n 2. \\<And>k r' A'.\n       \\<lbrakk>\\<And>r' A'.\n                   \\<lbrakk>sub1 (A $$ (l, l)) k l (r, A) = (r', A');\n                    i \\<le> k + l; k + l < dim_row A; l < dim_row A;\n                    l < dim_col A; l < i\\<rbrakk>\n                   \\<Longrightarrow> A' $$ (i, l) = (0::'a);\n        sub1 (A $$ (l, l)) (Suc k) l (r, A) = (r', A'); i \\<le> Suc k + l;\n        Suc k + l < dim_row A; l < dim_row A; l < dim_col A; l < i\\<rbrakk>\n       \\<Longrightarrow> A' $$ (i, l) = (0::'a)", "case (Suc k)"], ["proof (state)\nthis:\n  \\<lbrakk>sub1 (A $$ (l, l)) k l (r, A) = (?r', ?A'); i \\<le> k + l;\n   k + l < dim_row A; l < dim_row A; l < dim_col A; l < i\\<rbrakk>\n  \\<Longrightarrow> ?A' $$ (i, l) = (0::'a)\n  sub1 (A $$ (l, l)) (Suc k) l (r, A) = (r', A')\n  i \\<le> Suc k + l\n  Suc k + l < dim_row A\n  l < dim_row A\n  l < dim_col A\n  l < i\n\ngoal (2 subgoals):\n 1. \\<And>r' A'.\n       \\<lbrakk>sub1 (A $$ (l, l)) 0 l (r, A) = (r', A'); i \\<le> 0 + l;\n        0 + l < dim_row A; l < dim_row A; l < dim_col A; l < i\\<rbrakk>\n       \\<Longrightarrow> A' $$ (i, l) = (0::'a)\n 2. \\<And>k r' A'.\n       \\<lbrakk>\\<And>r' A'.\n                   \\<lbrakk>sub1 (A $$ (l, l)) k l (r, A) = (r', A');\n                    i \\<le> k + l; k + l < dim_row A; l < dim_row A;\n                    l < dim_col A; l < i\\<rbrakk>\n                   \\<Longrightarrow> A' $$ (i, l) = (0::'a);\n        sub1 (A $$ (l, l)) (Suc k) l (r, A) = (r', A'); i \\<le> Suc k + l;\n        Suc k + l < dim_row A; l < dim_row A; l < dim_col A; l < i\\<rbrakk>\n       \\<Longrightarrow> A' $$ (i, l) = (0::'a)", "obtain r' A' where rA': \"sub1 (A $$ (l,l)) k l (r, A) = (r',A')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>r' A'.\n        sub1 (A $$ (l, l)) k l (r, A) = (r', A') \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by force"], ["proof (state)\nthis:\n  sub1 (A $$ (l, l)) k l (r, A) = (r', A')\n\ngoal (2 subgoals):\n 1. \\<And>r' A'.\n       \\<lbrakk>sub1 (A $$ (l, l)) 0 l (r, A) = (r', A'); i \\<le> 0 + l;\n        0 + l < dim_row A; l < dim_row A; l < dim_col A; l < i\\<rbrakk>\n       \\<Longrightarrow> A' $$ (i, l) = (0::'a)\n 2. \\<And>k r' A'.\n       \\<lbrakk>\\<And>r' A'.\n                   \\<lbrakk>sub1 (A $$ (l, l)) k l (r, A) = (r', A');\n                    i \\<le> k + l; k + l < dim_row A; l < dim_row A;\n                    l < dim_col A; l < i\\<rbrakk>\n                   \\<Longrightarrow> A' $$ (i, l) = (0::'a);\n        sub1 (A $$ (l, l)) (Suc k) l (r, A) = (r', A'); i \\<le> Suc k + l;\n        Suc k + l < dim_row A; l < dim_row A; l < dim_col A; l < i\\<rbrakk>\n       \\<Longrightarrow> A' $$ (i, l) = (0::'a)", "fix r'' A''"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>r' A'.\n       \\<lbrakk>sub1 (A $$ (l, l)) 0 l (r, A) = (r', A'); i \\<le> 0 + l;\n        0 + l < dim_row A; l < dim_row A; l < dim_col A; l < i\\<rbrakk>\n       \\<Longrightarrow> A' $$ (i, l) = (0::'a)\n 2. \\<And>k r' A'.\n       \\<lbrakk>\\<And>r' A'.\n                   \\<lbrakk>sub1 (A $$ (l, l)) k l (r, A) = (r', A');\n                    i \\<le> k + l; k + l < dim_row A; l < dim_row A;\n                    l < dim_col A; l < i\\<rbrakk>\n                   \\<Longrightarrow> A' $$ (i, l) = (0::'a);\n        sub1 (A $$ (l, l)) (Suc k) l (r, A) = (r', A'); i \\<le> Suc k + l;\n        Suc k + l < dim_row A; l < dim_row A; l < dim_col A; l < i\\<rbrakk>\n       \\<Longrightarrow> A' $$ (i, l) = (0::'a)", "from sub1_preserves_diagnal[OF rA']"], ["proof (chain)\npicking this:\n  \\<lbrakk>l < dim_col A; k + l < dim_row A\\<rbrakk>\n  \\<Longrightarrow> A' $$ (l, l) = A $$ (l, l)", "have AA': \"A $$ (l, l) = A' $$ (l, l)\""], ["proof (prove)\nusing this:\n  \\<lbrakk>l < dim_col A; k + l < dim_row A\\<rbrakk>\n  \\<Longrightarrow> A' $$ (l, l) = A $$ (l, l)\n\ngoal (1 subgoal):\n 1. A $$ (l, l) = A' $$ (l, l)", "using Suc(2-)"], ["proof (prove)\nusing this:\n  \\<lbrakk>l < dim_col A; k + l < dim_row A\\<rbrakk>\n  \\<Longrightarrow> A' $$ (l, l) = A $$ (l, l)\n  sub1 (A $$ (l, l)) (Suc k) l (r, A) = (r'a__, A'a__)\n  i \\<le> Suc k + l\n  Suc k + l < dim_row A\n  l < dim_row A\n  l < dim_col A\n  l < i\n\ngoal (1 subgoal):\n 1. A $$ (l, l) = A' $$ (l, l)", "by auto"], ["proof (state)\nthis:\n  A $$ (l, l) = A' $$ (l, l)\n\ngoal (2 subgoals):\n 1. \\<And>r' A'.\n       \\<lbrakk>sub1 (A $$ (l, l)) 0 l (r, A) = (r', A'); i \\<le> 0 + l;\n        0 + l < dim_row A; l < dim_row A; l < dim_col A; l < i\\<rbrakk>\n       \\<Longrightarrow> A' $$ (i, l) = (0::'a)\n 2. \\<And>k r' A'.\n       \\<lbrakk>\\<And>r' A'.\n                   \\<lbrakk>sub1 (A $$ (l, l)) k l (r, A) = (r', A');\n                    i \\<le> k + l; k + l < dim_row A; l < dim_row A;\n                    l < dim_col A; l < i\\<rbrakk>\n                   \\<Longrightarrow> A' $$ (i, l) = (0::'a);\n        sub1 (A $$ (l, l)) (Suc k) l (r, A) = (r', A'); i \\<le> Suc k + l;\n        Suc k + l < dim_row A; l < dim_row A; l < dim_col A; l < i\\<rbrakk>\n       \\<Longrightarrow> A' $$ (i, l) = (0::'a)", "assume \"sub1 (A $$ (l,l)) (Suc k) l (r, A) = (r'',A'')\""], ["proof (state)\nthis:\n  sub1 (A $$ (l, l)) (Suc k) l (r, A) = (r'', A'')\n\ngoal (2 subgoals):\n 1. \\<And>r' A'.\n       \\<lbrakk>sub1 (A $$ (l, l)) 0 l (r, A) = (r', A'); i \\<le> 0 + l;\n        0 + l < dim_row A; l < dim_row A; l < dim_col A; l < i\\<rbrakk>\n       \\<Longrightarrow> A' $$ (i, l) = (0::'a)\n 2. \\<And>k r' A'.\n       \\<lbrakk>\\<And>r' A'.\n                   \\<lbrakk>sub1 (A $$ (l, l)) k l (r, A) = (r', A');\n                    i \\<le> k + l; k + l < dim_row A; l < dim_row A;\n                    l < dim_col A; l < i\\<rbrakk>\n                   \\<Longrightarrow> A' $$ (i, l) = (0::'a);\n        sub1 (A $$ (l, l)) (Suc k) l (r, A) = (r', A'); i \\<le> Suc k + l;\n        Suc k + l < dim_row A; l < dim_row A; l < dim_col A; l < i\\<rbrakk>\n       \\<Longrightarrow> A' $$ (i, l) = (0::'a)", "then"], ["proof (chain)\npicking this:\n  sub1 (A $$ (l, l)) (Suc k) l (r, A) = (r'', A'')", "have rA'': \"mute (A $$ (l,l)) (Suc (l + k)) l (r', A') = (r'', A'')\""], ["proof (prove)\nusing this:\n  sub1 (A $$ (l, l)) (Suc k) l (r, A) = (r'', A'')\n\ngoal (1 subgoal):\n 1. mute (A $$ (l, l)) (Suc (l + k)) l (r', A') = (r'', A'')", "using rA'"], ["proof (prove)\nusing this:\n  sub1 (A $$ (l, l)) (Suc k) l (r, A) = (r'', A'')\n  sub1 (A $$ (l, l)) k l (r, A) = (r', A')\n\ngoal (1 subgoal):\n 1. mute (A $$ (l, l)) (Suc (l + k)) l (r', A') = (r'', A'')", "by simp"], ["proof (state)\nthis:\n  mute (A $$ (l, l)) (Suc (l + k)) l (r', A') = (r'', A'')\n\ngoal (2 subgoals):\n 1. \\<And>r' A'.\n       \\<lbrakk>sub1 (A $$ (l, l)) 0 l (r, A) = (r', A'); i \\<le> 0 + l;\n        0 + l < dim_row A; l < dim_row A; l < dim_col A; l < i\\<rbrakk>\n       \\<Longrightarrow> A' $$ (i, l) = (0::'a)\n 2. \\<And>k r' A'.\n       \\<lbrakk>\\<And>r' A'.\n                   \\<lbrakk>sub1 (A $$ (l, l)) k l (r, A) = (r', A');\n                    i \\<le> k + l; k + l < dim_row A; l < dim_row A;\n                    l < dim_col A; l < i\\<rbrakk>\n                   \\<Longrightarrow> A' $$ (i, l) = (0::'a);\n        sub1 (A $$ (l, l)) (Suc k) l (r, A) = (r', A'); i \\<le> Suc k + l;\n        Suc k + l < dim_row A; l < dim_row A; l < dim_col A; l < i\\<rbrakk>\n       \\<Longrightarrow> A' $$ (i, l) = (0::'a)", "have ir: \"i < dim_row A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. i < dim_row A", "using Suc"], ["proof (prove)\nusing this:\n  \\<lbrakk>sub1 (A $$ (l, l)) k l (r, A) = (?r', ?A'); i \\<le> k + l;\n   k + l < dim_row A; l < dim_row A; l < dim_col A; l < i\\<rbrakk>\n  \\<Longrightarrow> ?A' $$ (i, l) = (0::'a)\n  sub1 (A $$ (l, l)) (Suc k) l (r, A) = (r'a__, A'a__)\n  i \\<le> Suc k + l\n  Suc k + l < dim_row A\n  l < dim_row A\n  l < dim_col A\n  l < i\n\ngoal (1 subgoal):\n 1. i < dim_row A", "by auto"], ["proof (state)\nthis:\n  i < dim_row A\n\ngoal (2 subgoals):\n 1. \\<And>r' A'.\n       \\<lbrakk>sub1 (A $$ (l, l)) 0 l (r, A) = (r', A'); i \\<le> 0 + l;\n        0 + l < dim_row A; l < dim_row A; l < dim_col A; l < i\\<rbrakk>\n       \\<Longrightarrow> A' $$ (i, l) = (0::'a)\n 2. \\<And>k r' A'.\n       \\<lbrakk>\\<And>r' A'.\n                   \\<lbrakk>sub1 (A $$ (l, l)) k l (r, A) = (r', A');\n                    i \\<le> k + l; k + l < dim_row A; l < dim_row A;\n                    l < dim_col A; l < i\\<rbrakk>\n                   \\<Longrightarrow> A' $$ (i, l) = (0::'a);\n        sub1 (A $$ (l, l)) (Suc k) l (r, A) = (r', A'); i \\<le> Suc k + l;\n        Suc k + l < dim_row A; l < dim_row A; l < dim_col A; l < i\\<rbrakk>\n       \\<Longrightarrow> A' $$ (i, l) = (0::'a)", "have il: \"i \\<noteq> l\""], ["proof (prove)\ngoal (1 subgoal):\n 1. i \\<noteq> l", "using li"], ["proof (prove)\nusing this:\n  l < i\n\ngoal (1 subgoal):\n 1. i \\<noteq> l", "by auto"], ["proof (state)\nthis:\n  i \\<noteq> l\n\ngoal (2 subgoals):\n 1. \\<And>r' A'.\n       \\<lbrakk>sub1 (A $$ (l, l)) 0 l (r, A) = (r', A'); i \\<le> 0 + l;\n        0 + l < dim_row A; l < dim_row A; l < dim_col A; l < i\\<rbrakk>\n       \\<Longrightarrow> A' $$ (i, l) = (0::'a)\n 2. \\<And>k r' A'.\n       \\<lbrakk>\\<And>r' A'.\n                   \\<lbrakk>sub1 (A $$ (l, l)) k l (r, A) = (r', A');\n                    i \\<le> k + l; k + l < dim_row A; l < dim_row A;\n                    l < dim_col A; l < i\\<rbrakk>\n                   \\<Longrightarrow> A' $$ (i, l) = (0::'a);\n        sub1 (A $$ (l, l)) (Suc k) l (r, A) = (r', A'); i \\<le> Suc k + l;\n        Suc k + l < dim_row A; l < dim_row A; l < dim_col A; l < i\\<rbrakk>\n       \\<Longrightarrow> A' $$ (i, l) = (0::'a)", "have lr': \"l < dim_row A'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. l < dim_row A'", "using lr rA'"], ["proof (prove)\nusing this:\n  l < dim_row A\n  sub1 (A $$ (l, l)) k l (r, A) = (r', A')\n\ngoal (1 subgoal):\n 1. l < dim_row A'", "by auto"], ["proof (state)\nthis:\n  l < dim_row A'\n\ngoal (2 subgoals):\n 1. \\<And>r' A'.\n       \\<lbrakk>sub1 (A $$ (l, l)) 0 l (r, A) = (r', A'); i \\<le> 0 + l;\n        0 + l < dim_row A; l < dim_row A; l < dim_col A; l < i\\<rbrakk>\n       \\<Longrightarrow> A' $$ (i, l) = (0::'a)\n 2. \\<And>k r' A'.\n       \\<lbrakk>\\<And>r' A'.\n                   \\<lbrakk>sub1 (A $$ (l, l)) k l (r, A) = (r', A');\n                    i \\<le> k + l; k + l < dim_row A; l < dim_row A;\n                    l < dim_col A; l < i\\<rbrakk>\n                   \\<Longrightarrow> A' $$ (i, l) = (0::'a);\n        sub1 (A $$ (l, l)) (Suc k) l (r, A) = (r', A'); i \\<le> Suc k + l;\n        Suc k + l < dim_row A; l < dim_row A; l < dim_col A; l < i\\<rbrakk>\n       \\<Longrightarrow> A' $$ (i, l) = (0::'a)", "have lc': \"l < dim_col A'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. l < dim_col A'", "using lc rA'"], ["proof (prove)\nusing this:\n  l < dim_col A\n  sub1 (A $$ (l, l)) k l (r, A) = (r', A')\n\ngoal (1 subgoal):\n 1. l < dim_col A'", "by auto"], ["proof (state)\nthis:\n  l < dim_col A'\n\ngoal (2 subgoals):\n 1. \\<And>r' A'.\n       \\<lbrakk>sub1 (A $$ (l, l)) 0 l (r, A) = (r', A'); i \\<le> 0 + l;\n        0 + l < dim_row A; l < dim_row A; l < dim_col A; l < i\\<rbrakk>\n       \\<Longrightarrow> A' $$ (i, l) = (0::'a)\n 2. \\<And>k r' A'.\n       \\<lbrakk>\\<And>r' A'.\n                   \\<lbrakk>sub1 (A $$ (l, l)) k l (r, A) = (r', A');\n                    i \\<le> k + l; k + l < dim_row A; l < dim_row A;\n                    l < dim_col A; l < i\\<rbrakk>\n                   \\<Longrightarrow> A' $$ (i, l) = (0::'a);\n        sub1 (A $$ (l, l)) (Suc k) l (r, A) = (r', A'); i \\<le> Suc k + l;\n        Suc k + l < dim_row A; l < dim_row A; l < dim_col A; l < i\\<rbrakk>\n       \\<Longrightarrow> A' $$ (i, l) = (0::'a)", "have Slkr': \"Suc (l+k) < dim_row A'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Suc (l + k) < dim_row A'", "using Suc rA'"], ["proof (prove)\nusing this:\n  \\<lbrakk>sub1 (A $$ (l, l)) k l (r, A) = (?r', ?A'); i \\<le> k + l;\n   k + l < dim_row A; l < dim_row A; l < dim_col A; l < i\\<rbrakk>\n  \\<Longrightarrow> ?A' $$ (i, l) = (0::'a)\n  sub1 (A $$ (l, l)) (Suc k) l (r, A) = (r'a__, A'a__)\n  i \\<le> Suc k + l\n  Suc k + l < dim_row A\n  l < dim_row A\n  l < dim_col A\n  l < i\n  sub1 (A $$ (l, l)) k l (r, A) = (r', A')\n\ngoal (1 subgoal):\n 1. Suc (l + k) < dim_row A'", "by auto"], ["proof (state)\nthis:\n  Suc (l + k) < dim_row A'\n\ngoal (2 subgoals):\n 1. \\<And>r' A'.\n       \\<lbrakk>sub1 (A $$ (l, l)) 0 l (r, A) = (r', A'); i \\<le> 0 + l;\n        0 + l < dim_row A; l < dim_row A; l < dim_col A; l < i\\<rbrakk>\n       \\<Longrightarrow> A' $$ (i, l) = (0::'a)\n 2. \\<And>k r' A'.\n       \\<lbrakk>\\<And>r' A'.\n                   \\<lbrakk>sub1 (A $$ (l, l)) k l (r, A) = (r', A');\n                    i \\<le> k + l; k + l < dim_row A; l < dim_row A;\n                    l < dim_col A; l < i\\<rbrakk>\n                   \\<Longrightarrow> A' $$ (i, l) = (0::'a);\n        sub1 (A $$ (l, l)) (Suc k) l (r, A) = (r', A'); i \\<le> Suc k + l;\n        Suc k + l < dim_row A; l < dim_row A; l < dim_col A; l < i\\<rbrakk>\n       \\<Longrightarrow> A' $$ (i, l) = (0::'a)", "show \"A'' $$ (i,l) = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A'' $$ (i, l) = (0::'a)", "proof (cases \"Suc(l + k) = i\")"], ["proof (state)\ngoal (2 subgoals):\n 1. Suc (l + k) = i \\<Longrightarrow> A'' $$ (i, l) = (0::'a)\n 2. Suc (l + k) \\<noteq> i \\<Longrightarrow> A'' $$ (i, l) = (0::'a)", "case True"], ["proof (state)\nthis:\n  Suc (l + k) = i\n\ngoal (2 subgoals):\n 1. Suc (l + k) = i \\<Longrightarrow> A'' $$ (i, l) = (0::'a)\n 2. Suc (l + k) \\<noteq> i \\<Longrightarrow> A'' $$ (i, l) = (0::'a)", "{"], ["proof (state)\nthis:\n  Suc (l + k) = i\n\ngoal (2 subgoals):\n 1. Suc (l + k) = i \\<Longrightarrow> A'' $$ (i, l) = (0::'a)\n 2. Suc (l + k) \\<noteq> i \\<Longrightarrow> A'' $$ (i, l) = (0::'a)", "have l: \"Suc (l + k) \\<noteq> l\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Suc (l + k) \\<noteq> l", "by auto"], ["proof (state)\nthis:\n  Suc (l + k) \\<noteq> l\n\ngoal (2 subgoals):\n 1. Suc (l + k) = i \\<Longrightarrow> A'' $$ (i, l) = (0::'a)\n 2. Suc (l + k) \\<noteq> i \\<Longrightarrow> A'' $$ (i, l) = (0::'a)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. A'' $$ (i, l) = (0::'a)", "using mute_makes_0[OF mf rA''[unfolded AA'] lr' lc' Slkr' l] ir il rA'"], ["proof (prove)\nusing this:\n  A'' $$ (Suc (l + k), l) = (0::'a)\n  i < dim_row A\n  i \\<noteq> l\n  sub1 (A $$ (l, l)) k l (r, A) = (r', A')\n\ngoal (1 subgoal):\n 1. A'' $$ (i, l) = (0::'a)", "by (simp add:True)"], ["proof (state)\nthis:\n  A'' $$ (i, l) = (0::'a)\n\ngoal (1 subgoal):\n 1. Suc (l + k) \\<noteq> i \\<Longrightarrow> A'' $$ (i, l) = (0::'a)", "}"], ["proof (state)\nthis:\n  A'' $$ (i, l) = (0::'a)\n\ngoal (1 subgoal):\n 1. Suc (l + k) \\<noteq> i \\<Longrightarrow> A'' $$ (i, l) = (0::'a)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. Suc (l + k) \\<noteq> i \\<Longrightarrow> A'' $$ (i, l) = (0::'a)", "case False"], ["proof (state)\nthis:\n  Suc (l + k) \\<noteq> i\n\ngoal (1 subgoal):\n 1. Suc (l + k) \\<noteq> i \\<Longrightarrow> A'' $$ (i, l) = (0::'a)", "{"], ["proof (state)\nthis:\n  Suc (l + k) \\<noteq> i\n\ngoal (1 subgoal):\n 1. Suc (l + k) \\<noteq> i \\<Longrightarrow> A'' $$ (i, l) = (0::'a)", "then"], ["proof (chain)\npicking this:\n  Suc (l + k) \\<noteq> i", "have ikl: \"i \\<le> k+l\""], ["proof (prove)\nusing this:\n  Suc (l + k) \\<noteq> i\n\ngoal (1 subgoal):\n 1. i \\<le> k + l", "using Suc"], ["proof (prove)\nusing this:\n  Suc (l + k) \\<noteq> i\n  \\<lbrakk>sub1 (A $$ (l, l)) k l (r, A) = (?r', ?A'); i \\<le> k + l;\n   k + l < dim_row A; l < dim_row A; l < dim_col A; l < i\\<rbrakk>\n  \\<Longrightarrow> ?A' $$ (i, l) = (0::'a)\n  sub1 (A $$ (l, l)) (Suc k) l (r, A) = (r'a__, A'a__)\n  i \\<le> Suc k + l\n  Suc k + l < dim_row A\n  l < dim_row A\n  l < dim_col A\n  l < i\n\ngoal (1 subgoal):\n 1. i \\<le> k + l", "by auto"], ["proof (state)\nthis:\n  i \\<le> k + l\n\ngoal (1 subgoal):\n 1. Suc (l + k) \\<noteq> i \\<Longrightarrow> A'' $$ (i, l) = (0::'a)", "have ir': \"i < dim_row A'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. i < dim_row A'", "using ir rA'"], ["proof (prove)\nusing this:\n  i < dim_row A\n  sub1 (A $$ (l, l)) k l (r, A) = (r', A')\n\ngoal (1 subgoal):\n 1. i < dim_row A'", "by auto"], ["proof (state)\nthis:\n  i < dim_row A'\n\ngoal (1 subgoal):\n 1. Suc (l + k) \\<noteq> i \\<Longrightarrow> A'' $$ (i, l) = (0::'a)", "have lc': \"l < dim_col A'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. l < dim_col A'", "using lc rA'"], ["proof (prove)\nusing this:\n  l < dim_col A\n  sub1 (A $$ (l, l)) k l (r, A) = (r', A')\n\ngoal (1 subgoal):\n 1. l < dim_col A'", "by auto"], ["proof (state)\nthis:\n  l < dim_col A'\n\ngoal (1 subgoal):\n 1. Suc (l + k) \\<noteq> i \\<Longrightarrow> A'' $$ (i, l) = (0::'a)", "have IH: \"A' $$ (i,l) = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A' $$ (i, l) = (0::'a)", "using rA' Suc False"], ["proof (prove)\nusing this:\n  sub1 (A $$ (l, l)) k l (r, A) = (r', A')\n  \\<lbrakk>sub1 (A $$ (l, l)) k l (r, A) = (?r', ?A'); i \\<le> k + l;\n   k + l < dim_row A; l < dim_row A; l < dim_col A; l < i\\<rbrakk>\n  \\<Longrightarrow> ?A' $$ (i, l) = (0::'a)\n  sub1 (A $$ (l, l)) (Suc k) l (r, A) = (r'a__, A'a__)\n  i \\<le> Suc k + l\n  Suc k + l < dim_row A\n  l < dim_row A\n  l < dim_col A\n  l < i\n  Suc (l + k) \\<noteq> i\n\ngoal (1 subgoal):\n 1. A' $$ (i, l) = (0::'a)", "by auto"], ["proof (state)\nthis:\n  A' $$ (i, l) = (0::'a)\n\ngoal (1 subgoal):\n 1. Suc (l + k) \\<noteq> i \\<Longrightarrow> A'' $$ (i, l) = (0::'a)", "thus ?thesis"], ["proof (prove)\nusing this:\n  A' $$ (i, l) = (0::'a)\n\ngoal (1 subgoal):\n 1. A'' $$ (i, l) = (0::'a)", "using mute_preserves[OF rA'' ir' lc'] rA' False Suc"], ["proof (prove)\nusing this:\n  A' $$ (i, l) = (0::'a)\n  \\<lbrakk>l < dim_row A'; Suc (l + k) < dim_row A';\n   i \\<noteq> Suc (l + k)\\<rbrakk>\n  \\<Longrightarrow> A'' $$ (i, l) = A' $$ (i, l)\n  sub1 (A $$ (l, l)) k l (r, A) = (r', A')\n  Suc (l + k) \\<noteq> i\n  \\<lbrakk>sub1 (A $$ (l, l)) k l (r, A) = (?r', ?A'); i \\<le> k + l;\n   k + l < dim_row A; l < dim_row A; l < dim_col A; l < i\\<rbrakk>\n  \\<Longrightarrow> ?A' $$ (i, l) = (0::'a)\n  sub1 (A $$ (l, l)) (Suc k) l (r, A) = (r'a__, A'a__)\n  i \\<le> Suc k + l\n  Suc k + l < dim_row A\n  l < dim_row A\n  l < dim_col A\n  l < i\n\ngoal (1 subgoal):\n 1. A'' $$ (i, l) = (0::'a)", "by simp"], ["proof (state)\nthis:\n  A'' $$ (i, l) = (0::'a)\n\ngoal:\nNo subgoals!", "}"], ["proof (state)\nthis:\n  A'' $$ (i, l) = (0::'a)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  A'' $$ (i, l) = (0::'a)\n\ngoal (1 subgoal):\n 1. \\<And>r' A'.\n       \\<lbrakk>sub1 (A $$ (l, l)) 0 l (r, A) = (r', A'); i \\<le> 0 + l;\n        0 + l < dim_row A; l < dim_row A; l < dim_col A; l < i\\<rbrakk>\n       \\<Longrightarrow> A' $$ (i, l) = (0::'a)", "qed auto"], ["proof (state)\nthis:\n  \\<lbrakk>sub1 (A $$ (l, l)) k l (r, A) = (r', A'); i \\<le> k + l;\n   k + l < dim_row A\\<rbrakk>\n  \\<Longrightarrow> A' $$ (i, l) = (0::'a)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma sub1_triangulizes_column:\n  assumes rA': \"sub1 (A $$ (l,l)) (dim_row A - Suc l) l (r,A) = (r',A')\"\n  and tri:\"triangular_to l A\"\n  and r: \"dim_row A > 0\"\n  and lr: \"l < dim_row A\"\n  and lc: \"l < dim_col A\"\n  shows \"triangular_column l A'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. local.triangular_column l A'", "proof (intro triangular_columnI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i.\n       \\<lbrakk>l < i; i < dim_row A'\\<rbrakk>\n       \\<Longrightarrow> A' $$ (i, l) = (0::'a)", "fix i"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i.\n       \\<lbrakk>l < i; i < dim_row A'\\<rbrakk>\n       \\<Longrightarrow> A' $$ (i, l) = (0::'a)", "assume li: \"l < i\""], ["proof (state)\nthis:\n  l < i\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       \\<lbrakk>l < i; i < dim_row A'\\<rbrakk>\n       \\<Longrightarrow> A' $$ (i, l) = (0::'a)", "assume ir: \"i < dim_row A'\""], ["proof (state)\nthis:\n  i < dim_row A'\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       \\<lbrakk>l < i; i < dim_row A'\\<rbrakk>\n       \\<Longrightarrow> A' $$ (i, l) = (0::'a)", "also"], ["proof (state)\nthis:\n  i < dim_row A'\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       \\<lbrakk>l < i; i < dim_row A'\\<rbrakk>\n       \\<Longrightarrow> A' $$ (i, l) = (0::'a)", "have \"... = dim_row A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dim_row A' = dim_row A", "using sub1_preserves_dimensions[OF rA']"], ["proof (prove)\nusing this:\n  dim_row A' = dim_row A\n  dim_col A' = dim_col A\n\ngoal (1 subgoal):\n 1. dim_row A' = dim_row A", "by auto"], ["proof (state)\nthis:\n  dim_row A' = dim_row A\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       \\<lbrakk>l < i; i < dim_row A'\\<rbrakk>\n       \\<Longrightarrow> A' $$ (i, l) = (0::'a)", "also"], ["proof (state)\nthis:\n  dim_row A' = dim_row A\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       \\<lbrakk>l < i; i < dim_row A'\\<rbrakk>\n       \\<Longrightarrow> A' $$ (i, l) = (0::'a)", "have \"... = dim_row A - l + l\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dim_row A = dim_row A - l + l", "using lr li"], ["proof (prove)\nusing this:\n  l < dim_row A\n  l < i\n\ngoal (1 subgoal):\n 1. dim_row A = dim_row A - l + l", "by auto"], ["proof (state)\nthis:\n  dim_row A = dim_row A - l + l\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       \\<lbrakk>l < i; i < dim_row A'\\<rbrakk>\n       \\<Longrightarrow> A' $$ (i, l) = (0::'a)", "finally"], ["proof (chain)\npicking this:\n  i < dim_row A - l + l", "have ir2: \"i \\<le> dim_row A - l + l\""], ["proof (prove)\nusing this:\n  i < dim_row A - l + l\n\ngoal (1 subgoal):\n 1. i \\<le> dim_row A - l + l", "by auto"], ["proof (state)\nthis:\n  i \\<le> dim_row A - l + l\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       \\<lbrakk>l < i; i < dim_row A'\\<rbrakk>\n       \\<Longrightarrow> A' $$ (i, l) = (0::'a)", "show \"A' $$ (i,l) = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A' $$ (i, l) = (0::'a)", "apply (subst sub1_makes_0s[OF rA' lr lc])"], ["proof (prove)\ngoal (4 subgoals):\n 1. l < i\n 2. i \\<le> dim_row A - Suc l + l\n 3. dim_row A - Suc l + l < dim_row A\n 4. (0::'a) = (0::'a)", "using li ir assms"], ["proof (prove)\nusing this:\n  l < i\n  i < dim_row A'\n  sub1 (A $$ (l, l)) (dim_row A - Suc l) l (r, A) = (r', A')\n  local.triangular_to l A\n  0 < dim_row A\n  l < dim_row A\n  l < dim_col A\n\ngoal (4 subgoals):\n 1. l < i\n 2. i \\<le> dim_row A - Suc l + l\n 3. dim_row A - Suc l + l < dim_row A\n 4. (0::'a) = (0::'a)", "by auto"], ["proof (state)\nthis:\n  A' $$ (i, l) = (0::'a)\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>\n  The algorithm @{const sub1} increases the number of columns that form triangle.\n\\<close>"], ["", "lemma sub1_grows_triangle:\n  assumes rA': \"sub1 (A $$ (l,l)) (dim_row A - Suc l) l (r,A) = (r',A')\"\n  and r: \"dim_row A > 0\"\n  and tri:\"triangular_to l A\"\n  and lr: \"l < dim_row A\"\n  and lc: \"l < dim_col A\"\n  shows \"triangular_to (Suc l) A'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. local.triangular_to (Suc l) A'", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. local.triangular_to (Suc l) A'", "have \"triangular_to l A'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. local.triangular_to l A'", "using sub1_preserves_triangle[OF rA'] assms"], ["proof (prove)\nusing this:\n  \\<lbrakk>local.triangular_to l A; l < dim_row A; l < dim_col A;\n   l + (dim_row A - Suc l) < dim_row A\\<rbrakk>\n  \\<Longrightarrow> local.triangular_to l A'\n  sub1 (A $$ (l, l)) (dim_row A - Suc l) l (r, A) = (r', A')\n  0 < dim_row A\n  local.triangular_to l A\n  l < dim_row A\n  l < dim_col A\n\ngoal (1 subgoal):\n 1. local.triangular_to l A'", "by auto"], ["proof (state)\nthis:\n  local.triangular_to l A'\n\ngoal (1 subgoal):\n 1. local.triangular_to (Suc l) A'", "moreover"], ["proof (state)\nthis:\n  local.triangular_to l A'\n\ngoal (1 subgoal):\n 1. local.triangular_to (Suc l) A'", "have \"triangular_column l A'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. local.triangular_column l A'", "using sub1_triangulizes_column[OF rA'] assms"], ["proof (prove)\nusing this:\n  \\<lbrakk>local.triangular_to l A; 0 < dim_row A; l < dim_row A;\n   l < dim_col A\\<rbrakk>\n  \\<Longrightarrow> local.triangular_column l A'\n  sub1 (A $$ (l, l)) (dim_row A - Suc l) l (r, A) = (r', A')\n  0 < dim_row A\n  local.triangular_to l A\n  l < dim_row A\n  l < dim_col A\n\ngoal (1 subgoal):\n 1. local.triangular_column l A'", "by auto"], ["proof (state)\nthis:\n  local.triangular_column l A'\n\ngoal (1 subgoal):\n 1. local.triangular_to (Suc l) A'", "ultimately"], ["proof (chain)\npicking this:\n  local.triangular_to l A'\n  local.triangular_column l A'", "show ?thesis"], ["proof (prove)\nusing this:\n  local.triangular_to l A'\n  local.triangular_column l A'\n\ngoal (1 subgoal):\n 1. local.triangular_to (Suc l) A'", "by (rule triangle_growth)"], ["proof (state)\nthis:\n  local.triangular_to (Suc l) A'\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "subsection \\<open>Finding Non-Zero Elements\\<close>"], ["", "private"], ["", "definition find_non0 :: \"nat \\<Rightarrow> 'a mat \\<Rightarrow> nat option\" where\n  \"find_non0 l A = (let is = [Suc l ..< dim_row A];\n    Ais = filter (\\<lambda> (i,Ail). Ail \\<noteq> 0) (map (\\<lambda> i. (i, A $$ (i,l))) is)\n    in case Ais of [] \\<Rightarrow> None | _ \\<Rightarrow> Some (sel_fun Ais))\""], ["", "lemma find_non0: assumes sel_fun: \"det_selection_fun sel_fun\"\n  and res: \"find_non0 l A = Some m\"\n  shows \"A $$ (m,l) \\<noteq> 0\" \"l < m\" \"m < dim_row A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A $$ (m, l) \\<noteq> (0::'a) &&& l < m &&& m < dim_row A", "proof -"], ["proof (state)\ngoal (3 subgoals):\n 1. A $$ (m, l) \\<noteq> (0::'a)\n 2. l < m\n 3. m < dim_row A", "let ?xs = \"filter (\\<lambda> (i,Ail). Ail \\<noteq> 0) (map (\\<lambda> i. (i, A $$ (i,l))) [Suc l..<dim_row A])\""], ["proof (state)\ngoal (3 subgoals):\n 1. A $$ (m, l) \\<noteq> (0::'a)\n 2. l < m\n 3. m < dim_row A", "from res[unfolded find_non0_def Let_def]"], ["proof (chain)\npicking this:\n  (case filter (\\<lambda>(i, Ail). Ail \\<noteq> (0::'a))\n         (map (\\<lambda>i. (i, A $$ (i, l))) [Suc l..<dim_row A]) of\n   [] \\<Rightarrow> None\n   | a # list \\<Rightarrow>\n       Some\n        (sel_fun\n          (filter (\\<lambda>(i, Ail). Ail \\<noteq> (0::'a))\n            (map (\\<lambda>i. (i, A $$ (i, l))) [Suc l..<dim_row A])))) =\n  Some m", "have xs: \"?xs \\<noteq> []\" and m: \"m = sel_fun ?xs\""], ["proof (prove)\nusing this:\n  (case filter (\\<lambda>(i, Ail). Ail \\<noteq> (0::'a))\n         (map (\\<lambda>i. (i, A $$ (i, l))) [Suc l..<dim_row A]) of\n   [] \\<Rightarrow> None\n   | a # list \\<Rightarrow>\n       Some\n        (sel_fun\n          (filter (\\<lambda>(i, Ail). Ail \\<noteq> (0::'a))\n            (map (\\<lambda>i. (i, A $$ (i, l))) [Suc l..<dim_row A])))) =\n  Some m\n\ngoal (1 subgoal):\n 1. filter (\\<lambda>(i, Ail). Ail \\<noteq> (0::'a))\n     (map (\\<lambda>i. (i, A $$ (i, l))) [Suc l..<dim_row A]) \\<noteq>\n    [] &&&\n    m =\n    sel_fun\n     (filter (\\<lambda>(i, Ail). Ail \\<noteq> (0::'a))\n       (map (\\<lambda>i. (i, A $$ (i, l))) [Suc l..<dim_row A]))", "by (cases ?xs, auto)+"], ["proof (state)\nthis:\n  filter (\\<lambda>(i, Ail). Ail \\<noteq> (0::'a))\n   (map (\\<lambda>i. (i, A $$ (i, l))) [Suc l..<dim_row A]) \\<noteq>\n  []\n  m =\n  sel_fun\n   (filter (\\<lambda>(i, Ail). Ail \\<noteq> (0::'a))\n     (map (\\<lambda>i. (i, A $$ (i, l))) [Suc l..<dim_row A]))\n\ngoal (3 subgoals):\n 1. A $$ (m, l) \\<noteq> (0::'a)\n 2. l < m\n 3. m < dim_row A", "from det_selection_funD[OF sel_fun xs, folded m]"], ["proof (chain)\npicking this:\n  m \\<in> fst `\n          set (filter (\\<lambda>(i, Ail). Ail \\<noteq> (0::'a))\n                (map (\\<lambda>i. (i, A $$ (i, l))) [Suc l..<dim_row A]))", "show \"A $$ (m, l) \\<noteq> 0\" \"l < m\" \"m < dim_row A\""], ["proof (prove)\nusing this:\n  m \\<in> fst `\n          set (filter (\\<lambda>(i, Ail). Ail \\<noteq> (0::'a))\n                (map (\\<lambda>i. (i, A $$ (i, l))) [Suc l..<dim_row A]))\n\ngoal (1 subgoal):\n 1. A $$ (m, l) \\<noteq> (0::'a) &&& l < m &&& m < dim_row A", "by auto"], ["proof (state)\nthis:\n  A $$ (m, l) \\<noteq> (0::'a)\n  l < m\n  m < dim_row A\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>\n  If @{term \"find_non0 l A\"} fails,\n  then $A$ is already triangular to $l$-th column.\n\\<close>"], ["", "lemma find_non0_all0:\n  \"find_non0 l A = None \\<Longrightarrow> triangular_column l A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. find_non0 l A = None \\<Longrightarrow> local.triangular_column l A", "proof (intro triangular_columnI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i.\n       \\<lbrakk>find_non0 l A = None; l < i; i < dim_row A\\<rbrakk>\n       \\<Longrightarrow> A $$ (i, l) = (0::'a)", "fix i"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i.\n       \\<lbrakk>find_non0 l A = None; l < i; i < dim_row A\\<rbrakk>\n       \\<Longrightarrow> A $$ (i, l) = (0::'a)", "let ?xs = \"filter (\\<lambda> (i,Ail). Ail \\<noteq> 0) (map (\\<lambda> i. (i, A $$ (i,l))) [Suc l..<dim_row A])\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i.\n       \\<lbrakk>find_non0 l A = None; l < i; i < dim_row A\\<rbrakk>\n       \\<Longrightarrow> A $$ (i, l) = (0::'a)", "assume none: \"find_non0 l A = None\" and li: \"l < i\" \"i < dim_row A\""], ["proof (state)\nthis:\n  find_non0 l A = None\n  l < i\n  i < dim_row A\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       \\<lbrakk>find_non0 l A = None; l < i; i < dim_row A\\<rbrakk>\n       \\<Longrightarrow> A $$ (i, l) = (0::'a)", "from none"], ["proof (chain)\npicking this:\n  find_non0 l A = None", "have xs: \"?xs = []\""], ["proof (prove)\nusing this:\n  find_non0 l A = None\n\ngoal (1 subgoal):\n 1. filter (\\<lambda>(i, Ail). Ail \\<noteq> (0::'a))\n     (map (\\<lambda>i. (i, A $$ (i, l))) [Suc l..<dim_row A]) =\n    []", "unfolding find_non0_def Let_def"], ["proof (prove)\nusing this:\n  (case filter (\\<lambda>(i, Ail). Ail \\<noteq> (0::'a))\n         (map (\\<lambda>i. (i, A $$ (i, l))) [Suc l..<dim_row A]) of\n   [] \\<Rightarrow> None\n   | a # list \\<Rightarrow>\n       Some\n        (sel_fun\n          (filter (\\<lambda>(i, Ail). Ail \\<noteq> (0::'a))\n            (map (\\<lambda>i. (i, A $$ (i, l))) [Suc l..<dim_row A])))) =\n  None\n\ngoal (1 subgoal):\n 1. filter (\\<lambda>(i, Ail). Ail \\<noteq> (0::'a))\n     (map (\\<lambda>i. (i, A $$ (i, l))) [Suc l..<dim_row A]) =\n    []", "by (cases ?xs, auto)"], ["proof (state)\nthis:\n  filter (\\<lambda>(i, Ail). Ail \\<noteq> (0::'a))\n   (map (\\<lambda>i. (i, A $$ (i, l))) [Suc l..<dim_row A]) =\n  []\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       \\<lbrakk>find_non0 l A = None; l < i; i < dim_row A\\<rbrakk>\n       \\<Longrightarrow> A $$ (i, l) = (0::'a)", "from li"], ["proof (chain)\npicking this:\n  l < i\n  i < dim_row A", "have \"(i, A $$ (i,l)) \\<in> set (map (\\<lambda> i. (i, A $$ (i,l))) [Suc l..<dim_row A])\""], ["proof (prove)\nusing this:\n  l < i\n  i < dim_row A\n\ngoal (1 subgoal):\n 1. (i, A $$ (i, l))\n    \\<in> set (map (\\<lambda>i. (i, A $$ (i, l))) [Suc l..<dim_row A])", "by auto"], ["proof (state)\nthis:\n  (i, A $$ (i, l))\n  \\<in> set (map (\\<lambda>i. (i, A $$ (i, l))) [Suc l..<dim_row A])\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       \\<lbrakk>find_non0 l A = None; l < i; i < dim_row A\\<rbrakk>\n       \\<Longrightarrow> A $$ (i, l) = (0::'a)", "with xs"], ["proof (chain)\npicking this:\n  filter (\\<lambda>(i, Ail). Ail \\<noteq> (0::'a))\n   (map (\\<lambda>i. (i, A $$ (i, l))) [Suc l..<dim_row A]) =\n  []\n  (i, A $$ (i, l))\n  \\<in> set (map (\\<lambda>i. (i, A $$ (i, l))) [Suc l..<dim_row A])", "show \"A $$ (i,l) = 0\""], ["proof (prove)\nusing this:\n  filter (\\<lambda>(i, Ail). Ail \\<noteq> (0::'a))\n   (map (\\<lambda>i. (i, A $$ (i, l))) [Suc l..<dim_row A]) =\n  []\n  (i, A $$ (i, l))\n  \\<in> set (map (\\<lambda>i. (i, A $$ (i, l))) [Suc l..<dim_row A])\n\ngoal (1 subgoal):\n 1. A $$ (i, l) = (0::'a)", "by (metis (mono_tags) xs case_prodI filter_empty_conv)"], ["proof (state)\nthis:\n  A $$ (i, l) = (0::'a)\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection \\<open>Determinant Preserving Growth of Triangle\\<close>"], ["", "text \\<open>\n  The algorithm @{const sub1} does not preserve determinants when it hits\n  a $0$-valued diagonal element. To avoid this case, we introduce the following\n  operation:\n\\<close>"], ["", "private"], ["", "fun sub2 :: \"nat \\<Rightarrow> nat \\<Rightarrow> 'a \\<times> 'a mat \\<Rightarrow> 'a \\<times> 'a mat\"\n  where \"sub2 d l (r,A) = (\n    case find_non0 l A of None \\<Rightarrow> (r,A)\n    | Some m \\<Rightarrow> let A' = swaprows m l A in sub1 (A' $$ (l,l)) (d - Suc l) l (-r, A'))\""], ["", "lemma sub2_preserves_dimensions[simp]:\n  assumes rA': \"sub2 d l (r,A) = (r',A')\"\n  shows \"dim_row A' = dim_row A \\<and> dim_col A' = dim_col A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dim_row A' = dim_row A \\<and> dim_col A' = dim_col A", "proof (cases \"find_non0 l A\")"], ["proof (state)\ngoal (2 subgoals):\n 1. find_non0 l A = None \\<Longrightarrow>\n    dim_row A' = dim_row A \\<and> dim_col A' = dim_col A\n 2. \\<And>a.\n       find_non0 l A = Some a \\<Longrightarrow>\n       dim_row A' = dim_row A \\<and> dim_col A' = dim_col A", "case None"], ["proof (state)\nthis:\n  find_non0 l A = None\n\ngoal (2 subgoals):\n 1. find_non0 l A = None \\<Longrightarrow>\n    dim_row A' = dim_row A \\<and> dim_col A' = dim_col A\n 2. \\<And>a.\n       find_non0 l A = Some a \\<Longrightarrow>\n       dim_row A' = dim_row A \\<and> dim_col A' = dim_col A", "then"], ["proof (chain)\npicking this:\n  find_non0 l A = None", "show ?thesis"], ["proof (prove)\nusing this:\n  find_non0 l A = None\n\ngoal (1 subgoal):\n 1. dim_row A' = dim_row A \\<and> dim_col A' = dim_col A", "using rA'"], ["proof (prove)\nusing this:\n  find_non0 l A = None\n  sub2 d l (r, A) = (r', A')\n\ngoal (1 subgoal):\n 1. dim_row A' = dim_row A \\<and> dim_col A' = dim_col A", "by auto"], ["proof (state)\nthis:\n  dim_row A' = dim_row A \\<and> dim_col A' = dim_col A\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       find_non0 l A = Some a \\<Longrightarrow>\n       dim_row A' = dim_row A \\<and> dim_col A' = dim_col A", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a.\n       find_non0 l A = Some a \\<Longrightarrow>\n       dim_row A' = dim_row A \\<and> dim_col A' = dim_col A", "case (Some m)"], ["proof (state)\nthis:\n  find_non0 l A = Some m\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       find_non0 l A = Some a \\<Longrightarrow>\n       dim_row A' = dim_row A \\<and> dim_col A' = dim_col A", "then"], ["proof (chain)\npicking this:\n  find_non0 l A = Some m", "show ?thesis"], ["proof (prove)\nusing this:\n  find_non0 l A = Some m\n\ngoal (1 subgoal):\n 1. dim_row A' = dim_row A \\<and> dim_col A' = dim_col A", "using rA'"], ["proof (prove)\nusing this:\n  find_non0 l A = Some m\n  sub2 d l (r, A) = (r', A')\n\ngoal (1 subgoal):\n 1. dim_row A' = dim_row A \\<and> dim_col A' = dim_col A", "by (cases \"m = l\", auto simp: Let_def)"], ["proof (state)\nthis:\n  dim_row A' = dim_row A \\<and> dim_col A' = dim_col A\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma sub2_closed [simp]:\n  \"sub2 d l (r,A) = (r',A') \\<Longrightarrow> A \\<in> carrier_mat m n \\<Longrightarrow> A' \\<in> carrier_mat m n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>sub2 d l (r, A) = (r', A'); A \\<in> carrier_mat m n\\<rbrakk>\n    \\<Longrightarrow> A' \\<in> carrier_mat m n", "unfolding carrier_mat_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>sub2 d l (r, A) = (r', A');\n     A \\<in> {ma. dim_row ma = m \\<and> dim_col ma = n}\\<rbrakk>\n    \\<Longrightarrow> A' \\<in> {ma. dim_row ma = m \\<and> dim_col ma = n}", "by auto"], ["", "context \n  assumes sel_fun: \"det_selection_fun sel_fun\"\nbegin"], ["", "lemma sub2_preserves_triangle:\n  assumes rA': \"sub2 d l (r,A) = (r',A')\"\n  and tri: \"triangular_to l A\"\n  and lc: \"l < dim_col A\"\n  and ld: \"l < d\"\n  and dr: \"d \\<le> dim_row A\"\n  shows \"triangular_to l A'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. local.triangular_to l A'", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. local.triangular_to l A'", "have lr: \"l < dim_row A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. l < dim_row A", "using ld dr"], ["proof (prove)\nusing this:\n  l < d\n  d \\<le> dim_row A\n\ngoal (1 subgoal):\n 1. l < dim_row A", "by auto"], ["proof (state)\nthis:\n  l < dim_row A\n\ngoal (1 subgoal):\n 1. local.triangular_to l A'", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. local.triangular_to l A'", "proof (cases \"find_non0 l A\")"], ["proof (state)\ngoal (2 subgoals):\n 1. find_non0 l A = None \\<Longrightarrow> local.triangular_to l A'\n 2. \\<And>a.\n       find_non0 l A = Some a \\<Longrightarrow> local.triangular_to l A'", "case None"], ["proof (state)\nthis:\n  find_non0 l A = None\n\ngoal (2 subgoals):\n 1. find_non0 l A = None \\<Longrightarrow> local.triangular_to l A'\n 2. \\<And>a.\n       find_non0 l A = Some a \\<Longrightarrow> local.triangular_to l A'", "then"], ["proof (chain)\npicking this:\n  find_non0 l A = None", "show ?thesis"], ["proof (prove)\nusing this:\n  find_non0 l A = None\n\ngoal (1 subgoal):\n 1. local.triangular_to l A'", "using rA' tri"], ["proof (prove)\nusing this:\n  find_non0 l A = None\n  sub2 d l (r, A) = (r', A')\n  local.triangular_to l A\n\ngoal (1 subgoal):\n 1. local.triangular_to l A'", "by simp"], ["proof (state)\nthis:\n  local.triangular_to l A'\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       find_non0 l A = Some a \\<Longrightarrow> local.triangular_to l A'", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a.\n       find_non0 l A = Some a \\<Longrightarrow> local.triangular_to l A'", "case (Some m)"], ["proof (state)\nthis:\n  find_non0 l A = Some m\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       find_non0 l A = Some a \\<Longrightarrow> local.triangular_to l A'", "{"], ["proof (state)\nthis:\n  find_non0 l A = Some m\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       find_non0 l A = Some a \\<Longrightarrow> local.triangular_to l A'", "have lm : \"l < m\" and mr : \"m < dim_row A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. l < m &&& m < dim_row A", "using find_non0[OF sel_fun Some]"], ["proof (prove)\nusing this:\n  A $$ (m, l) \\<noteq> (0::'a)\n  l < m\n  m < dim_row A\n\ngoal (1 subgoal):\n 1. l < m &&& m < dim_row A", "by auto"], ["proof (state)\nthis:\n  l < m\n  m < dim_row A\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       find_non0 l A = Some a \\<Longrightarrow> local.triangular_to l A'", "let ?A1 = \"swaprows m l A\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a.\n       find_non0 l A = Some a \\<Longrightarrow> local.triangular_to l A'", "have tri'': \"triangular_to l ?A1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. local.triangular_to l (swaprows m l A)", "proof (intro triangular_toI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>j < l; j < i; i < dim_row (swaprows m l A)\\<rbrakk>\n       \\<Longrightarrow> swaprows m l A $$ (i, j) = (0::'a)", "fix i j"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>j < l; j < i; i < dim_row (swaprows m l A)\\<rbrakk>\n       \\<Longrightarrow> swaprows m l A $$ (i, j) = (0::'a)", "assume jl:\"j < l\" and ji:\"j < i\" and ir1: \"i < dim_row ?A1\""], ["proof (state)\nthis:\n  j < l\n  j < i\n  i < dim_row (swaprows m l A)\n\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>j < l; j < i; i < dim_row (swaprows m l A)\\<rbrakk>\n       \\<Longrightarrow> swaprows m l A $$ (i, j) = (0::'a)", "have jm: \"j < m\""], ["proof (prove)\ngoal (1 subgoal):\n 1. j < m", "using jl lm"], ["proof (prove)\nusing this:\n  j < l\n  l < m\n\ngoal (1 subgoal):\n 1. j < m", "by auto"], ["proof (state)\nthis:\n  j < m\n\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>j < l; j < i; i < dim_row (swaprows m l A)\\<rbrakk>\n       \\<Longrightarrow> swaprows m l A $$ (i, j) = (0::'a)", "have ir: \"i < dim_row A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. i < dim_row A", "using ir1"], ["proof (prove)\nusing this:\n  i < dim_row (swaprows m l A)\n\ngoal (1 subgoal):\n 1. i < dim_row A", "by auto"], ["proof (state)\nthis:\n  i < dim_row A\n\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>j < l; j < i; i < dim_row (swaprows m l A)\\<rbrakk>\n       \\<Longrightarrow> swaprows m l A $$ (i, j) = (0::'a)", "have jc: \"j < dim_col A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. j < dim_col A", "using jl lc"], ["proof (prove)\nusing this:\n  j < l\n  l < dim_col A\n\ngoal (1 subgoal):\n 1. j < dim_col A", "by auto"], ["proof (state)\nthis:\n  j < dim_col A\n\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>j < l; j < i; i < dim_row (swaprows m l A)\\<rbrakk>\n       \\<Longrightarrow> swaprows m l A $$ (i, j) = (0::'a)", "show \"?A1 $$ (i, j) = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. swaprows m l A $$ (i, j) = (0::'a)", "proof (cases \"m=i\")"], ["proof (state)\ngoal (2 subgoals):\n 1. m = i \\<Longrightarrow> swaprows m l A $$ (i, j) = (0::'a)\n 2. m \\<noteq> i \\<Longrightarrow> swaprows m l A $$ (i, j) = (0::'a)", "case True"], ["proof (state)\nthis:\n  m = i\n\ngoal (2 subgoals):\n 1. m = i \\<Longrightarrow> swaprows m l A $$ (i, j) = (0::'a)\n 2. m \\<noteq> i \\<Longrightarrow> swaprows m l A $$ (i, j) = (0::'a)", "{"], ["proof (state)\nthis:\n  m = i\n\ngoal (2 subgoals):\n 1. m = i \\<Longrightarrow> swaprows m l A $$ (i, j) = (0::'a)\n 2. m \\<noteq> i \\<Longrightarrow> swaprows m l A $$ (i, j) = (0::'a)", "then"], ["proof (chain)\npicking this:\n  m = i", "have li: \"l \\<noteq> i\""], ["proof (prove)\nusing this:\n  m = i\n\ngoal (1 subgoal):\n 1. l \\<noteq> i", "using lm"], ["proof (prove)\nusing this:\n  m = i\n  l < m\n\ngoal (1 subgoal):\n 1. l \\<noteq> i", "by auto"], ["proof (state)\nthis:\n  l \\<noteq> i\n\ngoal (2 subgoals):\n 1. m = i \\<Longrightarrow> swaprows m l A $$ (i, j) = (0::'a)\n 2. m \\<noteq> i \\<Longrightarrow> swaprows m l A $$ (i, j) = (0::'a)", "hence \"?A1 $$ (i,j) = A $$ (l,j)\""], ["proof (prove)\nusing this:\n  l \\<noteq> i\n\ngoal (1 subgoal):\n 1. swaprows m l A $$ (i, j) = A $$ (l, j)", "using ir jc \\<open>m=i\\<close>"], ["proof (prove)\nusing this:\n  l \\<noteq> i\n  i < dim_row A\n  j < dim_col A\n  m = i\n\ngoal (1 subgoal):\n 1. swaprows m l A $$ (i, j) = A $$ (l, j)", "by auto"], ["proof (state)\nthis:\n  swaprows m l A $$ (i, j) = A $$ (l, j)\n\ngoal (2 subgoals):\n 1. m = i \\<Longrightarrow> swaprows m l A $$ (i, j) = (0::'a)\n 2. m \\<noteq> i \\<Longrightarrow> swaprows m l A $$ (i, j) = (0::'a)", "also"], ["proof (state)\nthis:\n  swaprows m l A $$ (i, j) = A $$ (l, j)\n\ngoal (2 subgoals):\n 1. m = i \\<Longrightarrow> swaprows m l A $$ (i, j) = (0::'a)\n 2. m \\<noteq> i \\<Longrightarrow> swaprows m l A $$ (i, j) = (0::'a)", "have \"... = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A $$ (l, j) = (0::'a)", "using tri jl lr"], ["proof (prove)\nusing this:\n  local.triangular_to l A\n  j < l\n  l < dim_row A\n\ngoal (1 subgoal):\n 1. A $$ (l, j) = (0::'a)", "by auto"], ["proof (state)\nthis:\n  A $$ (l, j) = (0::'a)\n\ngoal (2 subgoals):\n 1. m = i \\<Longrightarrow> swaprows m l A $$ (i, j) = (0::'a)\n 2. m \\<noteq> i \\<Longrightarrow> swaprows m l A $$ (i, j) = (0::'a)", "finally"], ["proof (chain)\npicking this:\n  swaprows m l A $$ (i, j) = (0::'a)", "show ?thesis"], ["proof (prove)\nusing this:\n  swaprows m l A $$ (i, j) = (0::'a)\n\ngoal (1 subgoal):\n 1. swaprows m l A $$ (i, j) = (0::'a)", "."], ["proof (state)\nthis:\n  swaprows m l A $$ (i, j) = (0::'a)\n\ngoal (1 subgoal):\n 1. m \\<noteq> i \\<Longrightarrow> swaprows m l A $$ (i, j) = (0::'a)", "}"], ["proof (state)\nthis:\n  swaprows m l A $$ (i, j) = (0::'a)\n\ngoal (1 subgoal):\n 1. m \\<noteq> i \\<Longrightarrow> swaprows m l A $$ (i, j) = (0::'a)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. m \\<noteq> i \\<Longrightarrow> swaprows m l A $$ (i, j) = (0::'a)", "case False"], ["proof (state)\nthis:\n  m \\<noteq> i\n\ngoal (1 subgoal):\n 1. m \\<noteq> i \\<Longrightarrow> swaprows m l A $$ (i, j) = (0::'a)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. swaprows m l A $$ (i, j) = (0::'a)", "proof (cases \"l=i\")"], ["proof (state)\ngoal (2 subgoals):\n 1. l = i \\<Longrightarrow> swaprows m l A $$ (i, j) = (0::'a)\n 2. l \\<noteq> i \\<Longrightarrow> swaprows m l A $$ (i, j) = (0::'a)", "case True"], ["proof (state)\nthis:\n  l = i\n\ngoal (2 subgoals):\n 1. l = i \\<Longrightarrow> swaprows m l A $$ (i, j) = (0::'a)\n 2. l \\<noteq> i \\<Longrightarrow> swaprows m l A $$ (i, j) = (0::'a)", "{"], ["proof (state)\nthis:\n  l = i\n\ngoal (2 subgoals):\n 1. l = i \\<Longrightarrow> swaprows m l A $$ (i, j) = (0::'a)\n 2. l \\<noteq> i \\<Longrightarrow> swaprows m l A $$ (i, j) = (0::'a)", "then"], ["proof (chain)\npicking this:\n  l = i", "have \"?A1 $$ (i,j) = A $$ (m,j)\""], ["proof (prove)\nusing this:\n  l = i\n\ngoal (1 subgoal):\n 1. swaprows m l A $$ (i, j) = A $$ (m, j)", "using ir jc \\<open>m\\<noteq>i\\<close>"], ["proof (prove)\nusing this:\n  l = i\n  i < dim_row A\n  j < dim_col A\n  m \\<noteq> i\n\ngoal (1 subgoal):\n 1. swaprows m l A $$ (i, j) = A $$ (m, j)", "by auto"], ["proof (state)\nthis:\n  swaprows m l A $$ (i, j) = A $$ (m, j)\n\ngoal (2 subgoals):\n 1. l = i \\<Longrightarrow> swaprows m l A $$ (i, j) = (0::'a)\n 2. l \\<noteq> i \\<Longrightarrow> swaprows m l A $$ (i, j) = (0::'a)", "thus \"?A1 $$ (i,j) = 0\""], ["proof (prove)\nusing this:\n  swaprows m l A $$ (i, j) = A $$ (m, j)\n\ngoal (1 subgoal):\n 1. swaprows m l A $$ (i, j) = (0::'a)", "using tri jl jm mr"], ["proof (prove)\nusing this:\n  swaprows m l A $$ (i, j) = A $$ (m, j)\n  local.triangular_to l A\n  j < l\n  j < m\n  m < dim_row A\n\ngoal (1 subgoal):\n 1. swaprows m l A $$ (i, j) = (0::'a)", "by auto"], ["proof (state)\nthis:\n  swaprows m l A $$ (i, j) = (0::'a)\n\ngoal (1 subgoal):\n 1. l \\<noteq> i \\<Longrightarrow> swaprows m l A $$ (i, j) = (0::'a)", "}"], ["proof (state)\nthis:\n  swaprows m l A $$ (i, j) = (0::'a)\n\ngoal (1 subgoal):\n 1. l \\<noteq> i \\<Longrightarrow> swaprows m l A $$ (i, j) = (0::'a)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. l \\<noteq> i \\<Longrightarrow> swaprows m l A $$ (i, j) = (0::'a)", "case False"], ["proof (state)\nthis:\n  l \\<noteq> i\n\ngoal (1 subgoal):\n 1. l \\<noteq> i \\<Longrightarrow> swaprows m l A $$ (i, j) = (0::'a)", "{"], ["proof (state)\nthis:\n  l \\<noteq> i\n\ngoal (1 subgoal):\n 1. l \\<noteq> i \\<Longrightarrow> swaprows m l A $$ (i, j) = (0::'a)", "then"], ["proof (chain)\npicking this:\n  l \\<noteq> i", "have \"?A1 $$ (i,j) = A $$ (i,j)\""], ["proof (prove)\nusing this:\n  l \\<noteq> i\n\ngoal (1 subgoal):\n 1. swaprows m l A $$ (i, j) = A $$ (i, j)", "using ir jc \\<open>m\\<noteq>i\\<close>"], ["proof (prove)\nusing this:\n  l \\<noteq> i\n  i < dim_row A\n  j < dim_col A\n  m \\<noteq> i\n\ngoal (1 subgoal):\n 1. swaprows m l A $$ (i, j) = A $$ (i, j)", "by auto"], ["proof (state)\nthis:\n  swaprows m l A $$ (i, j) = A $$ (i, j)\n\ngoal (1 subgoal):\n 1. l \\<noteq> i \\<Longrightarrow> swaprows m l A $$ (i, j) = (0::'a)", "thus \"?A1 $$ (i,j) = 0\""], ["proof (prove)\nusing this:\n  swaprows m l A $$ (i, j) = A $$ (i, j)\n\ngoal (1 subgoal):\n 1. swaprows m l A $$ (i, j) = (0::'a)", "using tri jl ji ir"], ["proof (prove)\nusing this:\n  swaprows m l A $$ (i, j) = A $$ (i, j)\n  local.triangular_to l A\n  j < l\n  j < i\n  i < dim_row A\n\ngoal (1 subgoal):\n 1. swaprows m l A $$ (i, j) = (0::'a)", "by auto"], ["proof (state)\nthis:\n  swaprows m l A $$ (i, j) = (0::'a)\n\ngoal:\nNo subgoals!", "}"], ["proof (state)\nthis:\n  swaprows m l A $$ (i, j) = (0::'a)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  swaprows m l A $$ (i, j) = (0::'a)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  swaprows m l A $$ (i, j) = (0::'a)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  local.triangular_to l (swaprows m l A)\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       find_non0 l A = Some a \\<Longrightarrow> local.triangular_to l A'", "let ?rA3 = \"sub1 (?A1 $$ (l,l)) (d - Suc l) l (-r,?A1)\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a.\n       find_non0 l A = Some a \\<Longrightarrow> local.triangular_to l A'", "have [simp]: \"dim_row ?A1 = dim_row A \\<and> dim_col ?A1 = dim_col A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dim_row (swaprows m l A) = dim_row A \\<and>\n    dim_col (swaprows m l A) = dim_col A", "by auto"], ["proof (state)\nthis:\n  dim_row (swaprows m l A) = dim_row A \\<and>\n  dim_col (swaprows m l A) = dim_col A\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       find_non0 l A = Some a \\<Longrightarrow> local.triangular_to l A'", "have rA'2: \"?rA3 = (r',A')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sub1 (swaprows m l A $$ (l, l)) (d - Suc l) l (- r, swaprows m l A) =\n    (r', A')", "using rA' Some"], ["proof (prove)\nusing this:\n  sub2 d l (r, A) = (r', A')\n  find_non0 l A = Some m\n\ngoal (1 subgoal):\n 1. sub1 (swaprows m l A $$ (l, l)) (d - Suc l) l (- r, swaprows m l A) =\n    (r', A')", "by (simp add: Let_def)"], ["proof (state)\nthis:\n  sub1 (swaprows m l A $$ (l, l)) (d - Suc l) l (- r, swaprows m l A) =\n  (r', A')\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       find_non0 l A = Some a \\<Longrightarrow> local.triangular_to l A'", "have \"l + (d - Suc l) < dim_row A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. l + (d - Suc l) < dim_row A", "using ld dr"], ["proof (prove)\nusing this:\n  l < d\n  d \\<le> dim_row A\n\ngoal (1 subgoal):\n 1. l + (d - Suc l) < dim_row A", "by auto"], ["proof (state)\nthis:\n  l + (d - Suc l) < dim_row A\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       find_non0 l A = Some a \\<Longrightarrow> local.triangular_to l A'", "thus ?thesis"], ["proof (prove)\nusing this:\n  l + (d - Suc l) < dim_row A\n\ngoal (1 subgoal):\n 1. local.triangular_to l A'", "using sub1_preserves_triangle[OF rA'2 tri''] lr lc rA'"], ["proof (prove)\nusing this:\n  l + (d - Suc l) < dim_row A\n  \\<lbrakk>l < dim_row (swaprows m l A); l < dim_col (swaprows m l A);\n   l + (d - Suc l) < dim_row (swaprows m l A)\\<rbrakk>\n  \\<Longrightarrow> local.triangular_to l A'\n  l < dim_row A\n  l < dim_col A\n  sub2 d l (r, A) = (r', A')\n\ngoal (1 subgoal):\n 1. local.triangular_to l A'", "by auto"], ["proof (state)\nthis:\n  local.triangular_to l A'\n\ngoal:\nNo subgoals!", "}"], ["proof (state)\nthis:\n  local.triangular_to l A'\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  local.triangular_to l A'\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma sub2_grows_triangle:\n  assumes mf: \"mute_fun mf\"\n  and rA': \"sub2 (dim_row A) l (r,A) = (r',A')\"\n  and tri: \"triangular_to l A\"\n  and lc: \"l < dim_col A\"\n  and lr: \"l < dim_row A\"\n  shows \"triangular_to (Suc l) A'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. local.triangular_to (Suc l) A'", "proof (rule triangle_growth)"], ["proof (state)\ngoal (2 subgoals):\n 1. local.triangular_to l A'\n 2. local.triangular_column l A'", "show \"triangular_to l A'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. local.triangular_to l A'", "using sub2_preserves_triangle[OF rA' tri lc lr]"], ["proof (prove)\nusing this:\n  dim_row A \\<le> dim_row A \\<Longrightarrow> local.triangular_to l A'\n\ngoal (1 subgoal):\n 1. local.triangular_to l A'", "by auto"], ["proof (state)\nthis:\n  local.triangular_to l A'\n\ngoal (1 subgoal):\n 1. local.triangular_column l A'", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. local.triangular_column l A'", "have r0: \"0 < dim_row A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < dim_row A", "using lr"], ["proof (prove)\nusing this:\n  l < dim_row A\n\ngoal (1 subgoal):\n 1. 0 < dim_row A", "by auto"], ["proof (state)\nthis:\n  0 < dim_row A\n\ngoal (1 subgoal):\n 1. local.triangular_column l A'", "show \"triangular_column l A'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. local.triangular_column l A'", "proof (cases \"find_non0 l A\")"], ["proof (state)\ngoal (2 subgoals):\n 1. find_non0 l A = None \\<Longrightarrow> local.triangular_column l A'\n 2. \\<And>a.\n       find_non0 l A = Some a \\<Longrightarrow> local.triangular_column l A'", "case None"], ["proof (state)\nthis:\n  find_non0 l A = None\n\ngoal (2 subgoals):\n 1. find_non0 l A = None \\<Longrightarrow> local.triangular_column l A'\n 2. \\<And>a.\n       find_non0 l A = Some a \\<Longrightarrow> local.triangular_column l A'", "{"], ["proof (state)\nthis:\n  find_non0 l A = None\n\ngoal (2 subgoals):\n 1. find_non0 l A = None \\<Longrightarrow> local.triangular_column l A'\n 2. \\<And>a.\n       find_non0 l A = Some a \\<Longrightarrow> local.triangular_column l A'", "then"], ["proof (chain)\npicking this:\n  find_non0 l A = None", "have \"A' = A\""], ["proof (prove)\nusing this:\n  find_non0 l A = None\n\ngoal (1 subgoal):\n 1. A' = A", "using rA'"], ["proof (prove)\nusing this:\n  find_non0 l A = None\n  sub2 (dim_row A) l (r, A) = (r', A')\n\ngoal (1 subgoal):\n 1. A' = A", "by simp"], ["proof (state)\nthis:\n  A' = A\n\ngoal (2 subgoals):\n 1. find_non0 l A = None \\<Longrightarrow> local.triangular_column l A'\n 2. \\<And>a.\n       find_non0 l A = Some a \\<Longrightarrow> local.triangular_column l A'", "moreover"], ["proof (state)\nthis:\n  A' = A\n\ngoal (2 subgoals):\n 1. find_non0 l A = None \\<Longrightarrow> local.triangular_column l A'\n 2. \\<And>a.\n       find_non0 l A = Some a \\<Longrightarrow> local.triangular_column l A'", "have \"triangular_column l A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. local.triangular_column l A", "using find_non0_all0[OF None]"], ["proof (prove)\nusing this:\n  local.triangular_column l A\n\ngoal (1 subgoal):\n 1. local.triangular_column l A", "."], ["proof (state)\nthis:\n  local.triangular_column l A\n\ngoal (2 subgoals):\n 1. find_non0 l A = None \\<Longrightarrow> local.triangular_column l A'\n 2. \\<And>a.\n       find_non0 l A = Some a \\<Longrightarrow> local.triangular_column l A'", "ultimately"], ["proof (chain)\npicking this:\n  A' = A\n  local.triangular_column l A", "show ?thesis"], ["proof (prove)\nusing this:\n  A' = A\n  local.triangular_column l A\n\ngoal (1 subgoal):\n 1. local.triangular_column l A'", "by auto"], ["proof (state)\nthis:\n  local.triangular_column l A'\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       find_non0 l A = Some a \\<Longrightarrow> local.triangular_column l A'", "}"], ["proof (state)\nthis:\n  local.triangular_column l A'\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       find_non0 l A = Some a \\<Longrightarrow> local.triangular_column l A'", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a.\n       find_non0 l A = Some a \\<Longrightarrow> local.triangular_column l A'", "case (Some m)"], ["proof (state)\nthis:\n  find_non0 l A = Some m\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       find_non0 l A = Some a \\<Longrightarrow> local.triangular_column l A'", "{"], ["proof (state)\nthis:\n  find_non0 l A = Some m\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       find_non0 l A = Some a \\<Longrightarrow> local.triangular_column l A'", "have lm: \"l < m\" and mr: \"m < dim_row A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. l < m &&& m < dim_row A", "using find_non0[OF sel_fun Some]"], ["proof (prove)\nusing this:\n  A $$ (m, l) \\<noteq> (0::'a)\n  l < m\n  m < dim_row A\n\ngoal (1 subgoal):\n 1. l < m &&& m < dim_row A", "by auto"], ["proof (state)\nthis:\n  l < m\n  m < dim_row A\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       find_non0 l A = Some a \\<Longrightarrow> local.triangular_column l A'", "let ?A = \"swaprows m l A\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a.\n       find_non0 l A = Some a \\<Longrightarrow> local.triangular_column l A'", "have tri2: \"triangular_to l ?A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. local.triangular_to l (swaprows m l A)", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>j < l; j < i; i < dim_row (swaprows m l A)\\<rbrakk>\n       \\<Longrightarrow> swaprows m l A $$ (i, j) = (0::'a)", "fix i j"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>j < l; j < i; i < dim_row (swaprows m l A)\\<rbrakk>\n       \\<Longrightarrow> swaprows m l A $$ (i, j) = (0::'a)", "assume jl: \"j < l\" and ji:\"j < i\" and ir: \"i < dim_row ?A\""], ["proof (state)\nthis:\n  j < l\n  j < i\n  i < dim_row (swaprows m l A)\n\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>j < l; j < i; i < dim_row (swaprows m l A)\\<rbrakk>\n       \\<Longrightarrow> swaprows m l A $$ (i, j) = (0::'a)", "show \"?A $$ (i,j) = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. swaprows m l A $$ (i, j) = (0::'a)", "proof (cases \"i = m\")"], ["proof (state)\ngoal (2 subgoals):\n 1. i = m \\<Longrightarrow> swaprows m l A $$ (i, j) = (0::'a)\n 2. i \\<noteq> m \\<Longrightarrow> swaprows m l A $$ (i, j) = (0::'a)", "case True"], ["proof (state)\nthis:\n  i = m\n\ngoal (2 subgoals):\n 1. i = m \\<Longrightarrow> swaprows m l A $$ (i, j) = (0::'a)\n 2. i \\<noteq> m \\<Longrightarrow> swaprows m l A $$ (i, j) = (0::'a)", "{"], ["proof (state)\nthis:\n  i = m\n\ngoal (2 subgoals):\n 1. i = m \\<Longrightarrow> swaprows m l A $$ (i, j) = (0::'a)\n 2. i \\<noteq> m \\<Longrightarrow> swaprows m l A $$ (i, j) = (0::'a)", "then"], ["proof (chain)\npicking this:\n  i = m", "have \"?A $$ (i,j) = A $$ (l,j)\""], ["proof (prove)\nusing this:\n  i = m\n\ngoal (1 subgoal):\n 1. swaprows m l A $$ (i, j) = A $$ (l, j)", "using jl lc ir"], ["proof (prove)\nusing this:\n  i = m\n  j < l\n  l < dim_col A\n  i < dim_row (swaprows m l A)\n\ngoal (1 subgoal):\n 1. swaprows m l A $$ (i, j) = A $$ (l, j)", "by simp"], ["proof (state)\nthis:\n  swaprows m l A $$ (i, j) = A $$ (l, j)\n\ngoal (2 subgoals):\n 1. i = m \\<Longrightarrow> swaprows m l A $$ (i, j) = (0::'a)\n 2. i \\<noteq> m \\<Longrightarrow> swaprows m l A $$ (i, j) = (0::'a)", "also"], ["proof (state)\nthis:\n  swaprows m l A $$ (i, j) = A $$ (l, j)\n\ngoal (2 subgoals):\n 1. i = m \\<Longrightarrow> swaprows m l A $$ (i, j) = (0::'a)\n 2. i \\<noteq> m \\<Longrightarrow> swaprows m l A $$ (i, j) = (0::'a)", "have \"... = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A $$ (l, j) = (0::'a)", "using triangular_toD[OF tri jl jl] lr"], ["proof (prove)\nusing this:\n  l < dim_row A \\<Longrightarrow> A $$ (l, j) = (0::'a)\n  l < dim_row A\n\ngoal (1 subgoal):\n 1. A $$ (l, j) = (0::'a)", "by auto"], ["proof (state)\nthis:\n  A $$ (l, j) = (0::'a)\n\ngoal (2 subgoals):\n 1. i = m \\<Longrightarrow> swaprows m l A $$ (i, j) = (0::'a)\n 2. i \\<noteq> m \\<Longrightarrow> swaprows m l A $$ (i, j) = (0::'a)", "finally"], ["proof (chain)\npicking this:\n  swaprows m l A $$ (i, j) = (0::'a)", "show ?thesis"], ["proof (prove)\nusing this:\n  swaprows m l A $$ (i, j) = (0::'a)\n\ngoal (1 subgoal):\n 1. swaprows m l A $$ (i, j) = (0::'a)", "by auto"], ["proof (state)\nthis:\n  swaprows m l A $$ (i, j) = (0::'a)\n\ngoal (1 subgoal):\n 1. i \\<noteq> m \\<Longrightarrow> swaprows m l A $$ (i, j) = (0::'a)", "}"], ["proof (state)\nthis:\n  swaprows m l A $$ (i, j) = (0::'a)\n\ngoal (1 subgoal):\n 1. i \\<noteq> m \\<Longrightarrow> swaprows m l A $$ (i, j) = (0::'a)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. i \\<noteq> m \\<Longrightarrow> swaprows m l A $$ (i, j) = (0::'a)", "case False"], ["proof (state)\nthis:\n  i \\<noteq> m\n\ngoal (1 subgoal):\n 1. i \\<noteq> m \\<Longrightarrow> swaprows m l A $$ (i, j) = (0::'a)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. swaprows m l A $$ (i, j) = (0::'a)", "proof (cases \"i = l\")"], ["proof (state)\ngoal (2 subgoals):\n 1. i = l \\<Longrightarrow> swaprows m l A $$ (i, j) = (0::'a)\n 2. i \\<noteq> l \\<Longrightarrow> swaprows m l A $$ (i, j) = (0::'a)", "case True"], ["proof (state)\nthis:\n  i = l\n\ngoal (2 subgoals):\n 1. i = l \\<Longrightarrow> swaprows m l A $$ (i, j) = (0::'a)\n 2. i \\<noteq> l \\<Longrightarrow> swaprows m l A $$ (i, j) = (0::'a)", "{"], ["proof (state)\nthis:\n  i = l\n\ngoal (2 subgoals):\n 1. i = l \\<Longrightarrow> swaprows m l A $$ (i, j) = (0::'a)\n 2. i \\<noteq> l \\<Longrightarrow> swaprows m l A $$ (i, j) = (0::'a)", "then"], ["proof (chain)\npicking this:\n  i = l", "have \"?A $$ (i,j) = A $$ (m,j)\""], ["proof (prove)\nusing this:\n  i = l\n\ngoal (1 subgoal):\n 1. swaprows m l A $$ (i, j) = A $$ (m, j)", "using jl lc ir"], ["proof (prove)\nusing this:\n  i = l\n  j < l\n  l < dim_col A\n  i < dim_row (swaprows m l A)\n\ngoal (1 subgoal):\n 1. swaprows m l A $$ (i, j) = A $$ (m, j)", "by auto"], ["proof (state)\nthis:\n  swaprows m l A $$ (i, j) = A $$ (m, j)\n\ngoal (2 subgoals):\n 1. i = l \\<Longrightarrow> swaprows m l A $$ (i, j) = (0::'a)\n 2. i \\<noteq> l \\<Longrightarrow> swaprows m l A $$ (i, j) = (0::'a)", "also"], ["proof (state)\nthis:\n  swaprows m l A $$ (i, j) = A $$ (m, j)\n\ngoal (2 subgoals):\n 1. i = l \\<Longrightarrow> swaprows m l A $$ (i, j) = (0::'a)\n 2. i \\<noteq> l \\<Longrightarrow> swaprows m l A $$ (i, j) = (0::'a)", "have \"... = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A $$ (m, j) = (0::'a)", "using triangular_toD[OF tri jl] jl lm mr"], ["proof (prove)\nusing this:\n  \\<lbrakk>j < ?i; ?i < dim_row A\\<rbrakk>\n  \\<Longrightarrow> A $$ (?i, j) = (0::'a)\n  j < l\n  l < m\n  m < dim_row A\n\ngoal (1 subgoal):\n 1. A $$ (m, j) = (0::'a)", "by auto"], ["proof (state)\nthis:\n  A $$ (m, j) = (0::'a)\n\ngoal (2 subgoals):\n 1. i = l \\<Longrightarrow> swaprows m l A $$ (i, j) = (0::'a)\n 2. i \\<noteq> l \\<Longrightarrow> swaprows m l A $$ (i, j) = (0::'a)", "finally"], ["proof (chain)\npicking this:\n  swaprows m l A $$ (i, j) = (0::'a)", "show ?thesis"], ["proof (prove)\nusing this:\n  swaprows m l A $$ (i, j) = (0::'a)\n\ngoal (1 subgoal):\n 1. swaprows m l A $$ (i, j) = (0::'a)", "by auto"], ["proof (state)\nthis:\n  swaprows m l A $$ (i, j) = (0::'a)\n\ngoal (1 subgoal):\n 1. i \\<noteq> l \\<Longrightarrow> swaprows m l A $$ (i, j) = (0::'a)", "}"], ["proof (state)\nthis:\n  swaprows m l A $$ (i, j) = (0::'a)\n\ngoal (1 subgoal):\n 1. i \\<noteq> l \\<Longrightarrow> swaprows m l A $$ (i, j) = (0::'a)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. i \\<noteq> l \\<Longrightarrow> swaprows m l A $$ (i, j) = (0::'a)", "case False"], ["proof (state)\nthis:\n  i \\<noteq> l\n\ngoal (1 subgoal):\n 1. i \\<noteq> l \\<Longrightarrow> swaprows m l A $$ (i, j) = (0::'a)", "{"], ["proof (state)\nthis:\n  i \\<noteq> l\n\ngoal (1 subgoal):\n 1. i \\<noteq> l \\<Longrightarrow> swaprows m l A $$ (i, j) = (0::'a)", "then"], ["proof (chain)\npicking this:\n  i \\<noteq> l", "have \"?A $$ (i,j) = A $$ (i,j)\""], ["proof (prove)\nusing this:\n  i \\<noteq> l\n\ngoal (1 subgoal):\n 1. swaprows m l A $$ (i, j) = A $$ (i, j)", "using \\<open>i \\<noteq> m\\<close> jl lc ir"], ["proof (prove)\nusing this:\n  i \\<noteq> l\n  i \\<noteq> m\n  j < l\n  l < dim_col A\n  i < dim_row (swaprows m l A)\n\ngoal (1 subgoal):\n 1. swaprows m l A $$ (i, j) = A $$ (i, j)", "by auto"], ["proof (state)\nthis:\n  swaprows m l A $$ (i, j) = A $$ (i, j)\n\ngoal (1 subgoal):\n 1. i \\<noteq> l \\<Longrightarrow> swaprows m l A $$ (i, j) = (0::'a)", "thus ?thesis"], ["proof (prove)\nusing this:\n  swaprows m l A $$ (i, j) = A $$ (i, j)\n\ngoal (1 subgoal):\n 1. swaprows m l A $$ (i, j) = (0::'a)", "using tri jl ji ir"], ["proof (prove)\nusing this:\n  swaprows m l A $$ (i, j) = A $$ (i, j)\n  local.triangular_to l A\n  j < l\n  j < i\n  i < dim_row (swaprows m l A)\n\ngoal (1 subgoal):\n 1. swaprows m l A $$ (i, j) = (0::'a)", "by auto"], ["proof (state)\nthis:\n  swaprows m l A $$ (i, j) = (0::'a)\n\ngoal:\nNo subgoals!", "}"], ["proof (state)\nthis:\n  swaprows m l A $$ (i, j) = (0::'a)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  swaprows m l A $$ (i, j) = (0::'a)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  swaprows m l A $$ (i, j) = (0::'a)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  local.triangular_to l (swaprows m l A)\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       find_non0 l A = Some a \\<Longrightarrow> local.triangular_column l A'", "have rA'2: \"sub1 (?A $$ (l,l)) (dim_row ?A - Suc l) l (-r, ?A) = (r',A')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sub1 (swaprows m l A $$ (l, l)) (dim_row (swaprows m l A) - Suc l) l\n     (- r, swaprows m l A) =\n    (r', A')", "using lm Some rA'"], ["proof (prove)\nusing this:\n  l < m\n  find_non0 l A = Some m\n  sub2 (dim_row A) l (r, A) = (r', A')\n\ngoal (1 subgoal):\n 1. sub1 (swaprows m l A $$ (l, l)) (dim_row (swaprows m l A) - Suc l) l\n     (- r, swaprows m l A) =\n    (r', A')", "by (simp add: Let_def)"], ["proof (state)\nthis:\n  sub1 (swaprows m l A $$ (l, l)) (dim_row (swaprows m l A) - Suc l) l\n   (- r, swaprows m l A) =\n  (r', A')\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       find_non0 l A = Some a \\<Longrightarrow> local.triangular_column l A'", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. local.triangular_column l A'", "using sub1_triangulizes_column[OF mf rA'2 tri2] r0 lr lc"], ["proof (prove)\nusing this:\n  \\<lbrakk>0 < dim_row (swaprows m l A); l < dim_row (swaprows m l A);\n   l < dim_col (swaprows m l A)\\<rbrakk>\n  \\<Longrightarrow> local.triangular_column l A'\n  0 < dim_row A\n  l < dim_row A\n  l < dim_col A\n\ngoal (1 subgoal):\n 1. local.triangular_column l A'", "by auto"], ["proof (state)\nthis:\n  local.triangular_column l A'\n\ngoal:\nNo subgoals!", "}"], ["proof (state)\nthis:\n  local.triangular_column l A'\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  local.triangular_column l A'\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "subsection \\<open>Recursive Triangulization of Columns\\<close>"], ["", "text \\<open>\n  Now we recursively apply @{const sub2} to make the entire matrix to be triangular.\n\\<close>"], ["", "private"], ["", "fun sub3 :: \"nat \\<Rightarrow> nat \\<Rightarrow> 'a \\<times> 'a mat \\<Rightarrow> 'a \\<times> 'a mat\"\n  where \"sub3 d 0 rA = rA\"\n  | \"sub3 d (Suc l) rA = sub2 d l (sub3 d l rA)\""], ["", "lemma sub3_preserves_dimensions[simp]:\n  \"sub3 d l (r,A) = (r',A') \\<Longrightarrow> dim_row A' = dim_row A\"\n  \"sub3 d l (r,A) = (r',A') \\<Longrightarrow> dim_col A' = dim_col A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (sub3 d l (r, A) = (r', A') \\<Longrightarrow>\n     dim_row A' = dim_row A) &&&\n    (sub3 d l (r, A) = (r', A') \\<Longrightarrow> dim_col A' = dim_col A)", "proof (induction l arbitrary: r' A')"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>r' A'.\n       sub3 d 0 (r, A) = (r', A') \\<Longrightarrow> dim_row A' = dim_row A\n 2. \\<And>r' A'.\n       sub3 d 0 (r, A) = (r', A') \\<Longrightarrow> dim_col A' = dim_col A\n 3. \\<And>l r' A'.\n       \\<lbrakk>\\<And>r' A'.\n                   sub3 d l (r, A) = (r', A') \\<Longrightarrow>\n                   dim_row A' = dim_row A;\n        \\<And>r' A'.\n           sub3 d l (r, A) = (r', A') \\<Longrightarrow>\n           dim_col A' = dim_col A;\n        sub3 d (Suc l) (r, A) = (r', A')\\<rbrakk>\n       \\<Longrightarrow> dim_row A' = dim_row A\n 4. \\<And>l r' A'.\n       \\<lbrakk>\\<And>r' A'.\n                   sub3 d l (r, A) = (r', A') \\<Longrightarrow>\n                   dim_row A' = dim_row A;\n        \\<And>r' A'.\n           sub3 d l (r, A) = (r', A') \\<Longrightarrow>\n           dim_col A' = dim_col A;\n        sub3 d (Suc l) (r, A) = (r', A')\\<rbrakk>\n       \\<Longrightarrow> dim_col A' = dim_col A", "case (Suc l)"], ["proof (state)\nthis:\n  sub3 d l (r, A) = (?r', ?A') \\<Longrightarrow> dim_row ?A' = dim_row A\n  sub3 d l (r, A) = (?r', ?A') \\<Longrightarrow> dim_col ?A' = dim_col A\n\ngoal (4 subgoals):\n 1. \\<And>r' A'.\n       sub3 d 0 (r, A) = (r', A') \\<Longrightarrow> dim_row A' = dim_row A\n 2. \\<And>r' A'.\n       sub3 d 0 (r, A) = (r', A') \\<Longrightarrow> dim_col A' = dim_col A\n 3. \\<And>l r' A'.\n       \\<lbrakk>\\<And>r' A'.\n                   sub3 d l (r, A) = (r', A') \\<Longrightarrow>\n                   dim_row A' = dim_row A;\n        \\<And>r' A'.\n           sub3 d l (r, A) = (r', A') \\<Longrightarrow>\n           dim_col A' = dim_col A;\n        sub3 d (Suc l) (r, A) = (r', A')\\<rbrakk>\n       \\<Longrightarrow> dim_row A' = dim_row A\n 4. \\<And>l r' A'.\n       \\<lbrakk>\\<And>r' A'.\n                   sub3 d l (r, A) = (r', A') \\<Longrightarrow>\n                   dim_row A' = dim_row A;\n        \\<And>r' A'.\n           sub3 d l (r, A) = (r', A') \\<Longrightarrow>\n           dim_col A' = dim_col A;\n        sub3 d (Suc l) (r, A) = (r', A')\\<rbrakk>\n       \\<Longrightarrow> dim_col A' = dim_col A", "obtain r' A' where rA': \"sub3 d l (r, A) = (r', A')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>r' A'.\n        sub3 d l (r, A) = (r', A') \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by force"], ["proof (state)\nthis:\n  sub3 d l (r, A) = (r', A')\n\ngoal (4 subgoals):\n 1. \\<And>r' A'.\n       sub3 d 0 (r, A) = (r', A') \\<Longrightarrow> dim_row A' = dim_row A\n 2. \\<And>r' A'.\n       sub3 d 0 (r, A) = (r', A') \\<Longrightarrow> dim_col A' = dim_col A\n 3. \\<And>l r' A'.\n       \\<lbrakk>\\<And>r' A'.\n                   sub3 d l (r, A) = (r', A') \\<Longrightarrow>\n                   dim_row A' = dim_row A;\n        \\<And>r' A'.\n           sub3 d l (r, A) = (r', A') \\<Longrightarrow>\n           dim_col A' = dim_col A;\n        sub3 d (Suc l) (r, A) = (r', A')\\<rbrakk>\n       \\<Longrightarrow> dim_row A' = dim_row A\n 4. \\<And>l r' A'.\n       \\<lbrakk>\\<And>r' A'.\n                   sub3 d l (r, A) = (r', A') \\<Longrightarrow>\n                   dim_row A' = dim_row A;\n        \\<And>r' A'.\n           sub3 d l (r, A) = (r', A') \\<Longrightarrow>\n           dim_col A' = dim_col A;\n        sub3 d (Suc l) (r, A) = (r', A')\\<rbrakk>\n       \\<Longrightarrow> dim_col A' = dim_col A", "fix r'' A''"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>r' A'.\n       sub3 d 0 (r, A) = (r', A') \\<Longrightarrow> dim_row A' = dim_row A\n 2. \\<And>r' A'.\n       sub3 d 0 (r, A) = (r', A') \\<Longrightarrow> dim_col A' = dim_col A\n 3. \\<And>l r' A'.\n       \\<lbrakk>\\<And>r' A'.\n                   sub3 d l (r, A) = (r', A') \\<Longrightarrow>\n                   dim_row A' = dim_row A;\n        \\<And>r' A'.\n           sub3 d l (r, A) = (r', A') \\<Longrightarrow>\n           dim_col A' = dim_col A;\n        sub3 d (Suc l) (r, A) = (r', A')\\<rbrakk>\n       \\<Longrightarrow> dim_row A' = dim_row A\n 4. \\<And>l r' A'.\n       \\<lbrakk>\\<And>r' A'.\n                   sub3 d l (r, A) = (r', A') \\<Longrightarrow>\n                   dim_row A' = dim_row A;\n        \\<And>r' A'.\n           sub3 d l (r, A) = (r', A') \\<Longrightarrow>\n           dim_col A' = dim_col A;\n        sub3 d (Suc l) (r, A) = (r', A')\\<rbrakk>\n       \\<Longrightarrow> dim_col A' = dim_col A", "assume rA'': \"sub3 d (Suc l) (r, A) = (r'', A'')\""], ["proof (state)\nthis:\n  sub3 d (Suc l) (r, A) = (r'', A'')\n\ngoal (4 subgoals):\n 1. \\<And>r' A'.\n       sub3 d 0 (r, A) = (r', A') \\<Longrightarrow> dim_row A' = dim_row A\n 2. \\<And>r' A'.\n       sub3 d 0 (r, A) = (r', A') \\<Longrightarrow> dim_col A' = dim_col A\n 3. \\<And>l r' A'.\n       \\<lbrakk>\\<And>r' A'.\n                   sub3 d l (r, A) = (r', A') \\<Longrightarrow>\n                   dim_row A' = dim_row A;\n        \\<And>r' A'.\n           sub3 d l (r, A) = (r', A') \\<Longrightarrow>\n           dim_col A' = dim_col A;\n        sub3 d (Suc l) (r, A) = (r', A')\\<rbrakk>\n       \\<Longrightarrow> dim_row A' = dim_row A\n 4. \\<And>l r' A'.\n       \\<lbrakk>\\<And>r' A'.\n                   sub3 d l (r, A) = (r', A') \\<Longrightarrow>\n                   dim_row A' = dim_row A;\n        \\<And>r' A'.\n           sub3 d l (r, A) = (r', A') \\<Longrightarrow>\n           dim_col A' = dim_col A;\n        sub3 d (Suc l) (r, A) = (r', A')\\<rbrakk>\n       \\<Longrightarrow> dim_col A' = dim_col A", "then"], ["proof (chain)\npicking this:\n  sub3 d (Suc l) (r, A) = (r'', A'')", "show \"dim_row A'' = dim_row A\" \"dim_col A'' = dim_col A\""], ["proof (prove)\nusing this:\n  sub3 d (Suc l) (r, A) = (r'', A'')\n\ngoal (1 subgoal):\n 1. dim_row A'' = dim_row A &&& dim_col A'' = dim_col A", "using Suc rA'"], ["proof (prove)\nusing this:\n  sub3 d (Suc l) (r, A) = (r'', A'')\n  sub3 d l (r, A) = (?r', ?A') \\<Longrightarrow> dim_row ?A' = dim_row A\n  sub3 d l (r, A) = (?r', ?A') \\<Longrightarrow> dim_col ?A' = dim_col A\n  sub3 d l (r, A) = (r', A')\n\ngoal (1 subgoal):\n 1. dim_row A'' = dim_row A &&& dim_col A'' = dim_col A", "by auto"], ["proof (state)\nthis:\n  dim_row A'' = dim_row A\n  dim_col A'' = dim_col A\n\ngoal (2 subgoals):\n 1. \\<And>r' A'.\n       sub3 d 0 (r, A) = (r', A') \\<Longrightarrow> dim_row A' = dim_row A\n 2. \\<And>r' A'.\n       sub3 d 0 (r, A) = (r', A') \\<Longrightarrow> dim_col A' = dim_col A", "qed auto"], ["", "lemma sub3_closed[simp]:\n  \"sub3 k l (r,A) = (r',A') \\<Longrightarrow> A \\<in> carrier_mat m n \\<Longrightarrow> A' \\<in> carrier_mat m n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>sub3 k l (r, A) = (r', A'); A \\<in> carrier_mat m n\\<rbrakk>\n    \\<Longrightarrow> A' \\<in> carrier_mat m n", "unfolding carrier_mat_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>sub3 k l (r, A) = (r', A');\n     A \\<in> {ma. dim_row ma = m \\<and> dim_col ma = n}\\<rbrakk>\n    \\<Longrightarrow> A' \\<in> {ma. dim_row ma = m \\<and> dim_col ma = n}", "by auto"], ["", "lemma sub3_makes_triangle:\n  assumes mf: \"mute_fun mf\"\n  and sel_fun: \"det_selection_fun sel_fun\"\n  and \"sub3 (dim_row A) l (r,A) = (r',A')\"\n  and \"l \\<le> dim_row A\"\n  and \"l \\<le> dim_col A\"\n  shows \"triangular_to l A'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. local.triangular_to l A'", "using assms"], ["proof (prove)\nusing this:\n  mute_fun mf\n  det_selection_fun sel_fun\n  sub3 (dim_row A) l (r, A) = (r', A')\n  l \\<le> dim_row A\n  l \\<le> dim_col A\n\ngoal (1 subgoal):\n 1. local.triangular_to l A'", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>mute_fun mf; det_selection_fun sel_fun;\n     sub3 (dim_row A) l (r, A) = (r', A'); l \\<le> dim_row A;\n     l \\<le> dim_col A\\<rbrakk>\n    \\<Longrightarrow> local.triangular_to l A'", "show \"sub3 (dim_row A) l (r,A) = (r',A') \\<Longrightarrow> l \\<le> dim_row A \\<Longrightarrow> l \\<le> dim_col A \\<Longrightarrow>\n    triangular_to l A'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>sub3 (dim_row A) l (r, A) = (r', A'); l \\<le> dim_row A;\n     l \\<le> dim_col A\\<rbrakk>\n    \\<Longrightarrow> local.triangular_to l A'", "proof (induction l arbitrary:r' A')"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>r' A'.\n       \\<lbrakk>sub3 (dim_row A) 0 (r, A) = (r', A'); 0 \\<le> dim_row A;\n        0 \\<le> dim_col A\\<rbrakk>\n       \\<Longrightarrow> local.triangular_to 0 A'\n 2. \\<And>l r' A'.\n       \\<lbrakk>\\<And>r' A'.\n                   \\<lbrakk>sub3 (dim_row A) l (r, A) = (r', A');\n                    l \\<le> dim_row A; l \\<le> dim_col A\\<rbrakk>\n                   \\<Longrightarrow> local.triangular_to l A';\n        sub3 (dim_row A) (Suc l) (r, A) = (r', A'); Suc l \\<le> dim_row A;\n        Suc l \\<le> dim_col A\\<rbrakk>\n       \\<Longrightarrow> local.triangular_to (Suc l) A'", "case (Suc l)"], ["proof (state)\nthis:\n  \\<lbrakk>sub3 (dim_row A) l (r, A) = (?r', ?A'); l \\<le> dim_row A;\n   l \\<le> dim_col A\\<rbrakk>\n  \\<Longrightarrow> local.triangular_to l ?A'\n  sub3 (dim_row A) (Suc l) (r, A) = (r', A')\n  Suc l \\<le> dim_row A\n  Suc l \\<le> dim_col A\n\ngoal (2 subgoals):\n 1. \\<And>r' A'.\n       \\<lbrakk>sub3 (dim_row A) 0 (r, A) = (r', A'); 0 \\<le> dim_row A;\n        0 \\<le> dim_col A\\<rbrakk>\n       \\<Longrightarrow> local.triangular_to 0 A'\n 2. \\<And>l r' A'.\n       \\<lbrakk>\\<And>r' A'.\n                   \\<lbrakk>sub3 (dim_row A) l (r, A) = (r', A');\n                    l \\<le> dim_row A; l \\<le> dim_col A\\<rbrakk>\n                   \\<Longrightarrow> local.triangular_to l A';\n        sub3 (dim_row A) (Suc l) (r, A) = (r', A'); Suc l \\<le> dim_row A;\n        Suc l \\<le> dim_col A\\<rbrakk>\n       \\<Longrightarrow> local.triangular_to (Suc l) A'", "then"], ["proof (chain)\npicking this:\n  \\<lbrakk>sub3 (dim_row A) l (r, A) = (?r', ?A'); l \\<le> dim_row A;\n   l \\<le> dim_col A\\<rbrakk>\n  \\<Longrightarrow> local.triangular_to l ?A'\n  sub3 (dim_row A) (Suc l) (r, A) = (r', A')\n  Suc l \\<le> dim_row A\n  Suc l \\<le> dim_col A", "have Slr: \"Suc l \\<le> dim_row A\" and Slc: \"Suc l \\<le> dim_col A\""], ["proof (prove)\nusing this:\n  \\<lbrakk>sub3 (dim_row A) l (r, A) = (?r', ?A'); l \\<le> dim_row A;\n   l \\<le> dim_col A\\<rbrakk>\n  \\<Longrightarrow> local.triangular_to l ?A'\n  sub3 (dim_row A) (Suc l) (r, A) = (r', A')\n  Suc l \\<le> dim_row A\n  Suc l \\<le> dim_col A\n\ngoal (1 subgoal):\n 1. Suc l \\<le> dim_row A &&& Suc l \\<le> dim_col A", "by auto"], ["proof (state)\nthis:\n  Suc l \\<le> dim_row A\n  Suc l \\<le> dim_col A\n\ngoal (2 subgoals):\n 1. \\<And>r' A'.\n       \\<lbrakk>sub3 (dim_row A) 0 (r, A) = (r', A'); 0 \\<le> dim_row A;\n        0 \\<le> dim_col A\\<rbrakk>\n       \\<Longrightarrow> local.triangular_to 0 A'\n 2. \\<And>l r' A'.\n       \\<lbrakk>\\<And>r' A'.\n                   \\<lbrakk>sub3 (dim_row A) l (r, A) = (r', A');\n                    l \\<le> dim_row A; l \\<le> dim_col A\\<rbrakk>\n                   \\<Longrightarrow> local.triangular_to l A';\n        sub3 (dim_row A) (Suc l) (r, A) = (r', A'); Suc l \\<le> dim_row A;\n        Suc l \\<le> dim_col A\\<rbrakk>\n       \\<Longrightarrow> local.triangular_to (Suc l) A'", "hence lr: \"l < dim_row A\" and lc: \"l < dim_col A\""], ["proof (prove)\nusing this:\n  Suc l \\<le> dim_row A\n  Suc l \\<le> dim_col A\n\ngoal (1 subgoal):\n 1. l < dim_row A &&& l < dim_col A", "by auto"], ["proof (state)\nthis:\n  l < dim_row A\n  l < dim_col A\n\ngoal (2 subgoals):\n 1. \\<And>r' A'.\n       \\<lbrakk>sub3 (dim_row A) 0 (r, A) = (r', A'); 0 \\<le> dim_row A;\n        0 \\<le> dim_col A\\<rbrakk>\n       \\<Longrightarrow> local.triangular_to 0 A'\n 2. \\<And>l r' A'.\n       \\<lbrakk>\\<And>r' A'.\n                   \\<lbrakk>sub3 (dim_row A) l (r, A) = (r', A');\n                    l \\<le> dim_row A; l \\<le> dim_col A\\<rbrakk>\n                   \\<Longrightarrow> local.triangular_to l A';\n        sub3 (dim_row A) (Suc l) (r, A) = (r', A'); Suc l \\<le> dim_row A;\n        Suc l \\<le> dim_col A\\<rbrakk>\n       \\<Longrightarrow> local.triangular_to (Suc l) A'", "moreover"], ["proof (state)\nthis:\n  l < dim_row A\n  l < dim_col A\n\ngoal (2 subgoals):\n 1. \\<And>r' A'.\n       \\<lbrakk>sub3 (dim_row A) 0 (r, A) = (r', A'); 0 \\<le> dim_row A;\n        0 \\<le> dim_col A\\<rbrakk>\n       \\<Longrightarrow> local.triangular_to 0 A'\n 2. \\<And>l r' A'.\n       \\<lbrakk>\\<And>r' A'.\n                   \\<lbrakk>sub3 (dim_row A) l (r, A) = (r', A');\n                    l \\<le> dim_row A; l \\<le> dim_col A\\<rbrakk>\n                   \\<Longrightarrow> local.triangular_to l A';\n        sub3 (dim_row A) (Suc l) (r, A) = (r', A'); Suc l \\<le> dim_row A;\n        Suc l \\<le> dim_col A\\<rbrakk>\n       \\<Longrightarrow> local.triangular_to (Suc l) A'", "obtain r'' A''\n        where rA'': \"sub3 (dim_row A) l (r,A) = (r'',A'')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>r'' A''.\n        sub3 (dim_row A) l (r, A) = (r'', A'') \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by force"], ["proof (state)\nthis:\n  sub3 (dim_row A) l (r, A) = (r'', A'')\n\ngoal (2 subgoals):\n 1. \\<And>r' A'.\n       \\<lbrakk>sub3 (dim_row A) 0 (r, A) = (r', A'); 0 \\<le> dim_row A;\n        0 \\<le> dim_col A\\<rbrakk>\n       \\<Longrightarrow> local.triangular_to 0 A'\n 2. \\<And>l r' A'.\n       \\<lbrakk>\\<And>r' A'.\n                   \\<lbrakk>sub3 (dim_row A) l (r, A) = (r', A');\n                    l \\<le> dim_row A; l \\<le> dim_col A\\<rbrakk>\n                   \\<Longrightarrow> local.triangular_to l A';\n        sub3 (dim_row A) (Suc l) (r, A) = (r', A'); Suc l \\<le> dim_row A;\n        Suc l \\<le> dim_col A\\<rbrakk>\n       \\<Longrightarrow> local.triangular_to (Suc l) A'", "ultimately"], ["proof (chain)\npicking this:\n  l < dim_row A\n  l < dim_col A\n  sub3 (dim_row A) l (r, A) = (r'', A'')", "have IH: \"triangular_to l A''\""], ["proof (prove)\nusing this:\n  l < dim_row A\n  l < dim_col A\n  sub3 (dim_row A) l (r, A) = (r'', A'')\n\ngoal (1 subgoal):\n 1. local.triangular_to l A''", "using Suc"], ["proof (prove)\nusing this:\n  l < dim_row A\n  l < dim_col A\n  sub3 (dim_row A) l (r, A) = (r'', A'')\n  \\<lbrakk>sub3 (dim_row A) l (r, A) = (?r', ?A'); l \\<le> dim_row A;\n   l \\<le> dim_col A\\<rbrakk>\n  \\<Longrightarrow> local.triangular_to l ?A'\n  sub3 (dim_row A) (Suc l) (r, A) = (r', A')\n  Suc l \\<le> dim_row A\n  Suc l \\<le> dim_col A\n\ngoal (1 subgoal):\n 1. local.triangular_to l A''", "by auto"], ["proof (state)\nthis:\n  local.triangular_to l A''\n\ngoal (2 subgoals):\n 1. \\<And>r' A'.\n       \\<lbrakk>sub3 (dim_row A) 0 (r, A) = (r', A'); 0 \\<le> dim_row A;\n        0 \\<le> dim_col A\\<rbrakk>\n       \\<Longrightarrow> local.triangular_to 0 A'\n 2. \\<And>l r' A'.\n       \\<lbrakk>\\<And>r' A'.\n                   \\<lbrakk>sub3 (dim_row A) l (r, A) = (r', A');\n                    l \\<le> dim_row A; l \\<le> dim_col A\\<rbrakk>\n                   \\<Longrightarrow> local.triangular_to l A';\n        sub3 (dim_row A) (Suc l) (r, A) = (r', A'); Suc l \\<le> dim_row A;\n        Suc l \\<le> dim_col A\\<rbrakk>\n       \\<Longrightarrow> local.triangular_to (Suc l) A'", "have [simp]:\"dim_row A'' = dim_row A\" and [simp]:\"dim_col A'' = dim_col A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dim_row A'' = dim_row A &&& dim_col A'' = dim_col A", "using Slr Slc rA''"], ["proof (prove)\nusing this:\n  Suc l \\<le> dim_row A\n  Suc l \\<le> dim_col A\n  sub3 (dim_row A) l (r, A) = (r'', A'')\n\ngoal (1 subgoal):\n 1. dim_row A'' = dim_row A &&& dim_col A'' = dim_col A", "by auto"], ["proof (state)\nthis:\n  dim_row A'' = dim_row A\n  dim_col A'' = dim_col A\n\ngoal (2 subgoals):\n 1. \\<And>r' A'.\n       \\<lbrakk>sub3 (dim_row A) 0 (r, A) = (r', A'); 0 \\<le> dim_row A;\n        0 \\<le> dim_col A\\<rbrakk>\n       \\<Longrightarrow> local.triangular_to 0 A'\n 2. \\<And>l r' A'.\n       \\<lbrakk>\\<And>r' A'.\n                   \\<lbrakk>sub3 (dim_row A) l (r, A) = (r', A');\n                    l \\<le> dim_row A; l \\<le> dim_col A\\<rbrakk>\n                   \\<Longrightarrow> local.triangular_to l A';\n        sub3 (dim_row A) (Suc l) (r, A) = (r', A'); Suc l \\<le> dim_row A;\n        Suc l \\<le> dim_col A\\<rbrakk>\n       \\<Longrightarrow> local.triangular_to (Suc l) A'", "fix r' A'"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>r' A'.\n       \\<lbrakk>sub3 (dim_row A) 0 (r, A) = (r', A'); 0 \\<le> dim_row A;\n        0 \\<le> dim_col A\\<rbrakk>\n       \\<Longrightarrow> local.triangular_to 0 A'\n 2. \\<And>l r' A'.\n       \\<lbrakk>\\<And>r' A'.\n                   \\<lbrakk>sub3 (dim_row A) l (r, A) = (r', A');\n                    l \\<le> dim_row A; l \\<le> dim_col A\\<rbrakk>\n                   \\<Longrightarrow> local.triangular_to l A';\n        sub3 (dim_row A) (Suc l) (r, A) = (r', A'); Suc l \\<le> dim_row A;\n        Suc l \\<le> dim_col A\\<rbrakk>\n       \\<Longrightarrow> local.triangular_to (Suc l) A'", "assume \"sub3 (dim_row A) (Suc l) (r, A) = (r', A')\""], ["proof (state)\nthis:\n  sub3 (dim_row A) (Suc l) (r, A) = (r', A')\n\ngoal (2 subgoals):\n 1. \\<And>r' A'.\n       \\<lbrakk>sub3 (dim_row A) 0 (r, A) = (r', A'); 0 \\<le> dim_row A;\n        0 \\<le> dim_col A\\<rbrakk>\n       \\<Longrightarrow> local.triangular_to 0 A'\n 2. \\<And>l r' A'.\n       \\<lbrakk>\\<And>r' A'.\n                   \\<lbrakk>sub3 (dim_row A) l (r, A) = (r', A');\n                    l \\<le> dim_row A; l \\<le> dim_col A\\<rbrakk>\n                   \\<Longrightarrow> local.triangular_to l A';\n        sub3 (dim_row A) (Suc l) (r, A) = (r', A'); Suc l \\<le> dim_row A;\n        Suc l \\<le> dim_col A\\<rbrakk>\n       \\<Longrightarrow> local.triangular_to (Suc l) A'", "then"], ["proof (chain)\npicking this:\n  sub3 (dim_row A) (Suc l) (r, A) = (r', A')", "have rA': \"sub2 (dim_row A'') l (r'',A'') = (r',A')\""], ["proof (prove)\nusing this:\n  sub3 (dim_row A) (Suc l) (r, A) = (r', A')\n\ngoal (1 subgoal):\n 1. sub2 (dim_row A'') l (r'', A'') = (r', A')", "using rA''"], ["proof (prove)\nusing this:\n  sub3 (dim_row A) (Suc l) (r, A) = (r', A')\n  sub3 (dim_row A) l (r, A) = (r'', A'')\n\ngoal (1 subgoal):\n 1. sub2 (dim_row A'') l (r'', A'') = (r', A')", "by auto"], ["proof (state)\nthis:\n  sub2 (dim_row A'') l (r'', A'') = (r', A')\n\ngoal (2 subgoals):\n 1. \\<And>r' A'.\n       \\<lbrakk>sub3 (dim_row A) 0 (r, A) = (r', A'); 0 \\<le> dim_row A;\n        0 \\<le> dim_col A\\<rbrakk>\n       \\<Longrightarrow> local.triangular_to 0 A'\n 2. \\<And>l r' A'.\n       \\<lbrakk>\\<And>r' A'.\n                   \\<lbrakk>sub3 (dim_row A) l (r, A) = (r', A');\n                    l \\<le> dim_row A; l \\<le> dim_col A\\<rbrakk>\n                   \\<Longrightarrow> local.triangular_to l A';\n        sub3 (dim_row A) (Suc l) (r, A) = (r', A'); Suc l \\<le> dim_row A;\n        Suc l \\<le> dim_col A\\<rbrakk>\n       \\<Longrightarrow> local.triangular_to (Suc l) A'", "show \"triangular_to (Suc l) A'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. local.triangular_to (Suc l) A'", "using sub2_grows_triangle[OF sel_fun mf rA'] lr lc rA'' IH"], ["proof (prove)\nusing this:\n  \\<lbrakk>local.triangular_to l A''; l < dim_col A'';\n   l < dim_row A''\\<rbrakk>\n  \\<Longrightarrow> local.triangular_to (Suc l) A'\n  l < dim_row A\n  l < dim_col A\n  sub3 (dim_row A) l (r, A) = (r'', A'')\n  local.triangular_to l A''\n\ngoal (1 subgoal):\n 1. local.triangular_to (Suc l) A'", "by auto"], ["proof (state)\nthis:\n  local.triangular_to (Suc l) A'\n\ngoal (1 subgoal):\n 1. \\<And>r' A'.\n       \\<lbrakk>sub3 (dim_row A) 0 (r, A) = (r', A'); 0 \\<le> dim_row A;\n        0 \\<le> dim_col A\\<rbrakk>\n       \\<Longrightarrow> local.triangular_to 0 A'", "qed auto"], ["proof (state)\nthis:\n  \\<lbrakk>sub3 (dim_row A) l (r, A) = (r', A'); l \\<le> dim_row A;\n   l \\<le> dim_col A\\<rbrakk>\n  \\<Longrightarrow> local.triangular_to l A'\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection \\<open>Triangulization\\<close>"], ["", "definition triangulize :: \"'a mat \\<Rightarrow> 'a \\<times> 'a mat\"\nwhere \"triangulize A = sub3 (dim_row A) (dim_row A) (1,A)\""], ["", "lemma triangulize_preserves_dimensions[simp]:\n  \"triangulize A = (r',A') \\<Longrightarrow> dim_row A' = dim_row A\"\n  \"triangulize A = (r',A') \\<Longrightarrow> dim_col A' = dim_col A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (local.triangulize A = (r', A') \\<Longrightarrow>\n     dim_row A' = dim_row A) &&&\n    (local.triangulize A = (r', A') \\<Longrightarrow>\n     dim_col A' = dim_col A)", "unfolding triangulize_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (sub3 (dim_row A) (dim_row A) (1::'a, A) = (r', A') \\<Longrightarrow>\n     dim_row A' = dim_row A) &&&\n    (sub3 (dim_row A) (dim_row A) (1::'a, A) = (r', A') \\<Longrightarrow>\n     dim_col A' = dim_col A)", "by auto"], ["", "lemma triangulize_closed[simp]:\n  \"triangulize A = (r',A') \\<Longrightarrow> A \\<in> carrier_mat m n \\<Longrightarrow> A' \\<in> carrier_mat m n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>local.triangulize A = (r', A');\n     A \\<in> carrier_mat m n\\<rbrakk>\n    \\<Longrightarrow> A' \\<in> carrier_mat m n", "unfolding carrier_mat_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>local.triangulize A = (r', A');\n     A \\<in> {ma. dim_row ma = m \\<and> dim_col ma = n}\\<rbrakk>\n    \\<Longrightarrow> A' \\<in> {ma. dim_row ma = m \\<and> dim_col ma = n}", "by auto"], ["", "context\n  assumes mf: \"mute_fun mf\"\n  and sel_fun: \"det_selection_fun sel_fun\"\nbegin"], ["", "theorem triangulized:\n  assumes \"A \\<in> carrier_mat n n\"\n  and \"triangulize A = (r',A')\"\n  shows \"upper_triangular A'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. upper_triangular A'", "proof (cases \"0<n\")"], ["proof (state)\ngoal (2 subgoals):\n 1. 0 < n \\<Longrightarrow> upper_triangular A'\n 2. \\<not> 0 < n \\<Longrightarrow> upper_triangular A'", "case True"], ["proof (state)\nthis:\n  0 < n\n\ngoal (2 subgoals):\n 1. 0 < n \\<Longrightarrow> upper_triangular A'\n 2. \\<not> 0 < n \\<Longrightarrow> upper_triangular A'", "have rA': \"sub3 (dim_row A) (dim_row A) (1,A) = (r',A')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sub3 (dim_row A) (dim_row A) (1::'a, A) = (r', A')", "using assms"], ["proof (prove)\nusing this:\n  A \\<in> carrier_mat n n\n  local.triangulize A = (r', A')\n\ngoal (1 subgoal):\n 1. sub3 (dim_row A) (dim_row A) (1::'a, A) = (r', A')", "unfolding triangulize_def"], ["proof (prove)\nusing this:\n  A \\<in> carrier_mat n n\n  sub3 (dim_row A) (dim_row A) (1::'a, A) = (r', A')\n\ngoal (1 subgoal):\n 1. sub3 (dim_row A) (dim_row A) (1::'a, A) = (r', A')", "by auto"], ["proof (state)\nthis:\n  sub3 (dim_row A) (dim_row A) (1::'a, A) = (r', A')\n\ngoal (2 subgoals):\n 1. 0 < n \\<Longrightarrow> upper_triangular A'\n 2. \\<not> 0 < n \\<Longrightarrow> upper_triangular A'", "have nr:\"n = dim_row A\" and nc:\"n = dim_col A\" and nr':\"n = dim_row A'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. n = dim_row A &&& n = dim_col A &&& n = dim_row A'", "using assms"], ["proof (prove)\nusing this:\n  A \\<in> carrier_mat n n\n  local.triangulize A = (r', A')\n\ngoal (1 subgoal):\n 1. n = dim_row A &&& n = dim_col A &&& n = dim_row A'", "by auto"], ["proof (state)\nthis:\n  n = dim_row A\n  n = dim_col A\n  n = dim_row A'\n\ngoal (2 subgoals):\n 1. 0 < n \\<Longrightarrow> upper_triangular A'\n 2. \\<not> 0 < n \\<Longrightarrow> upper_triangular A'", "thus ?thesis"], ["proof (prove)\nusing this:\n  n = dim_row A\n  n = dim_col A\n  n = dim_row A'\n\ngoal (1 subgoal):\n 1. upper_triangular A'", "unfolding triangular_to_triangular"], ["proof (prove)\nusing this:\n  n = dim_row A\n  n = dim_col A\n  n = dim_row A'\n\ngoal (1 subgoal):\n 1. local.triangular_to (dim_row A') A'", "using sub3_makes_triangle[OF mf sel_fun rA'] True"], ["proof (prove)\nusing this:\n  n = dim_row A\n  n = dim_col A\n  n = dim_row A'\n  \\<lbrakk>dim_row A \\<le> dim_row A; dim_row A \\<le> dim_col A\\<rbrakk>\n  \\<Longrightarrow> local.triangular_to (dim_row A) A'\n  0 < n\n\ngoal (1 subgoal):\n 1. local.triangular_to (dim_row A') A'", "by auto"], ["proof (state)\nthis:\n  upper_triangular A'\n\ngoal (1 subgoal):\n 1. \\<not> 0 < n \\<Longrightarrow> upper_triangular A'", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> 0 < n \\<Longrightarrow> upper_triangular A'", "case False"], ["proof (state)\nthis:\n  \\<not> 0 < n\n\ngoal (1 subgoal):\n 1. \\<not> 0 < n \\<Longrightarrow> upper_triangular A'", "then"], ["proof (chain)\npicking this:\n  \\<not> 0 < n", "have nr':\"dim_row A' = 0\""], ["proof (prove)\nusing this:\n  \\<not> 0 < n\n\ngoal (1 subgoal):\n 1. dim_row A' = 0", "using assms"], ["proof (prove)\nusing this:\n  \\<not> 0 < n\n  A \\<in> carrier_mat n n\n  local.triangulize A = (r', A')\n\ngoal (1 subgoal):\n 1. dim_row A' = 0", "by auto"], ["proof (state)\nthis:\n  dim_row A' = 0\n\ngoal (1 subgoal):\n 1. \\<not> 0 < n \\<Longrightarrow> upper_triangular A'", "thus ?thesis"], ["proof (prove)\nusing this:\n  dim_row A' = 0\n\ngoal (1 subgoal):\n 1. upper_triangular A'", "unfolding upper_triangular_def"], ["proof (prove)\nusing this:\n  dim_row A' = 0\n\ngoal (1 subgoal):\n 1. \\<forall>i<dim_row A'. \\<forall>j<i. A' $$ (i, j) = (0::'a)", "by auto"], ["proof (state)\nthis:\n  upper_triangular A'\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection\\<open>Divisor will not be 0\\<close>"], ["", "text \\<open>\n  Here we show that each sub-algorithm will not make $r$\n  of the input/output pair $(r,A)$ to 0.\n  The algorithm @{term \"sub1 A_ll k l (r,A)\"} requires $A_{l,l} \\neq 0$.\n\\<close>"], ["", "lemma sub1_divisor [simp]:\n  assumes rA': \"sub1 q k l (r, A) = (r',A')\"\n  and r0: \"r \\<noteq> 0\"\n  and All: \"q \\<noteq> 0\"\n  and \"k + l < dim_row A \"\n  and lc: \"l < dim_col A\"\n  shows \"r' \\<noteq> 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. r' \\<noteq> (0::'a)", "using assms"], ["proof (prove)\nusing this:\n  sub1 q k l (r, A) = (r', A')\n  r \\<noteq> (0::'a)\n  q \\<noteq> (0::'a)\n  k + l < dim_row A\n  l < dim_col A\n\ngoal (1 subgoal):\n 1. r' \\<noteq> (0::'a)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>sub1 q k l (r, A) = (r', A'); r \\<noteq> (0::'a);\n     q \\<noteq> (0::'a); k + l < dim_row A; l < dim_col A\\<rbrakk>\n    \\<Longrightarrow> r' \\<noteq> (0::'a)", "show \"sub1 q k l (r,A) = (r',A') \\<Longrightarrow> k + l < dim_row A \\<Longrightarrow> r' \\<noteq> 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>sub1 q k l (r, A) = (r', A'); k + l < dim_row A\\<rbrakk>\n    \\<Longrightarrow> r' \\<noteq> (0::'a)", "proof (induction k arbitrary: r' A')"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>r' A'.\n       \\<lbrakk>sub1 q 0 l (r, A) = (r', A'); 0 + l < dim_row A\\<rbrakk>\n       \\<Longrightarrow> r' \\<noteq> (0::'a)\n 2. \\<And>k r' A'.\n       \\<lbrakk>\\<And>r' A'.\n                   \\<lbrakk>sub1 q k l (r, A) = (r', A');\n                    k + l < dim_row A\\<rbrakk>\n                   \\<Longrightarrow> r' \\<noteq> (0::'a);\n        sub1 q (Suc k) l (r, A) = (r', A'); Suc k + l < dim_row A\\<rbrakk>\n       \\<Longrightarrow> r' \\<noteq> (0::'a)", "case (Suc k)"], ["proof (state)\nthis:\n  \\<lbrakk>sub1 q k l (r, A) = (?r', ?A'); k + l < dim_row A\\<rbrakk>\n  \\<Longrightarrow> ?r' \\<noteq> (0::'a)\n  sub1 q (Suc k) l (r, A) = (r', A')\n  Suc k + l < dim_row A\n\ngoal (2 subgoals):\n 1. \\<And>r' A'.\n       \\<lbrakk>sub1 q 0 l (r, A) = (r', A'); 0 + l < dim_row A\\<rbrakk>\n       \\<Longrightarrow> r' \\<noteq> (0::'a)\n 2. \\<And>k r' A'.\n       \\<lbrakk>\\<And>r' A'.\n                   \\<lbrakk>sub1 q k l (r, A) = (r', A');\n                    k + l < dim_row A\\<rbrakk>\n                   \\<Longrightarrow> r' \\<noteq> (0::'a);\n        sub1 q (Suc k) l (r, A) = (r', A'); Suc k + l < dim_row A\\<rbrakk>\n       \\<Longrightarrow> r' \\<noteq> (0::'a)", "obtain r'' A'' where rA'': \"sub1 q k l (r, A) = (r'', A'')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>r'' A''.\n        sub1 q k l (r, A) = (r'', A'') \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by force"], ["proof (state)\nthis:\n  sub1 q k l (r, A) = (r'', A'')\n\ngoal (2 subgoals):\n 1. \\<And>r' A'.\n       \\<lbrakk>sub1 q 0 l (r, A) = (r', A'); 0 + l < dim_row A\\<rbrakk>\n       \\<Longrightarrow> r' \\<noteq> (0::'a)\n 2. \\<And>k r' A'.\n       \\<lbrakk>\\<And>r' A'.\n                   \\<lbrakk>sub1 q k l (r, A) = (r', A');\n                    k + l < dim_row A\\<rbrakk>\n                   \\<Longrightarrow> r' \\<noteq> (0::'a);\n        sub1 q (Suc k) l (r, A) = (r', A'); Suc k + l < dim_row A\\<rbrakk>\n       \\<Longrightarrow> r' \\<noteq> (0::'a)", "then"], ["proof (chain)\npicking this:\n  sub1 q k l (r, A) = (r'', A'')", "have IH: \"r'' \\<noteq> 0\""], ["proof (prove)\nusing this:\n  sub1 q k l (r, A) = (r'', A'')\n\ngoal (1 subgoal):\n 1. r'' \\<noteq> (0::'a)", "using Suc"], ["proof (prove)\nusing this:\n  sub1 q k l (r, A) = (r'', A'')\n  \\<lbrakk>sub1 q k l (r, A) = (?r', ?A'); k + l < dim_row A\\<rbrakk>\n  \\<Longrightarrow> ?r' \\<noteq> (0::'a)\n  sub1 q (Suc k) l (r, A) = (r', A')\n  Suc k + l < dim_row A\n\ngoal (1 subgoal):\n 1. r'' \\<noteq> (0::'a)", "by auto"], ["proof (state)\nthis:\n  r'' \\<noteq> (0::'a)\n\ngoal (2 subgoals):\n 1. \\<And>r' A'.\n       \\<lbrakk>sub1 q 0 l (r, A) = (r', A'); 0 + l < dim_row A\\<rbrakk>\n       \\<Longrightarrow> r' \\<noteq> (0::'a)\n 2. \\<And>k r' A'.\n       \\<lbrakk>\\<And>r' A'.\n                   \\<lbrakk>sub1 q k l (r, A) = (r', A');\n                    k + l < dim_row A\\<rbrakk>\n                   \\<Longrightarrow> r' \\<noteq> (0::'a);\n        sub1 q (Suc k) l (r, A) = (r', A'); Suc k + l < dim_row A\\<rbrakk>\n       \\<Longrightarrow> r' \\<noteq> (0::'a)", "obtain q' l' g where mf_id: \"mf q (A'' $$ (Suc (l + k), l)) = (q',l',g)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>q' l' g.\n        mf q (A'' $$ (Suc (l + k), l)) = (q', l', g) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (rule prod_cases3)"], ["proof (state)\nthis:\n  mf q (A'' $$ (Suc (l + k), l)) = (q', l', g)\n\ngoal (2 subgoals):\n 1. \\<And>r' A'.\n       \\<lbrakk>sub1 q 0 l (r, A) = (r', A'); 0 + l < dim_row A\\<rbrakk>\n       \\<Longrightarrow> r' \\<noteq> (0::'a)\n 2. \\<And>k r' A'.\n       \\<lbrakk>\\<And>r' A'.\n                   \\<lbrakk>sub1 q k l (r, A) = (r', A');\n                    k + l < dim_row A\\<rbrakk>\n                   \\<Longrightarrow> r' \\<noteq> (0::'a);\n        sub1 q (Suc k) l (r, A) = (r', A'); Suc k + l < dim_row A\\<rbrakk>\n       \\<Longrightarrow> r' \\<noteq> (0::'a)", "define fact where \"fact = (if A'' $$ (Suc (l+k),l) = 0 then 1 else q')\""], ["proof (state)\nthis:\n  fact = (if A'' $$ (Suc (l + k), l) = (0::'a) then 1::'a else q')\n\ngoal (2 subgoals):\n 1. \\<And>r' A'.\n       \\<lbrakk>sub1 q 0 l (r, A) = (r', A'); 0 + l < dim_row A\\<rbrakk>\n       \\<Longrightarrow> r' \\<noteq> (0::'a)\n 2. \\<And>k r' A'.\n       \\<lbrakk>\\<And>r' A'.\n                   \\<lbrakk>sub1 q k l (r, A) = (r', A');\n                    k + l < dim_row A\\<rbrakk>\n                   \\<Longrightarrow> r' \\<noteq> (0::'a);\n        sub1 q (Suc k) l (r, A) = (r', A'); Suc k + l < dim_row A\\<rbrakk>\n       \\<Longrightarrow> r' \\<noteq> (0::'a)", "note mf = mf[unfolded mute_fun_def, rule_format, OF mf_id]"], ["proof (state)\nthis:\n  A'' $$ (Suc (l + k), l) \\<noteq> (0::'a) \\<Longrightarrow>\n  q = q' * g \\<and> A'' $$ (Suc (l + k), l) * q' = q * l'\n\ngoal (2 subgoals):\n 1. \\<And>r' A'.\n       \\<lbrakk>sub1 q 0 l (r, A) = (r', A'); 0 + l < dim_row A\\<rbrakk>\n       \\<Longrightarrow> r' \\<noteq> (0::'a)\n 2. \\<And>k r' A'.\n       \\<lbrakk>\\<And>r' A'.\n                   \\<lbrakk>sub1 q k l (r, A) = (r', A');\n                    k + l < dim_row A\\<rbrakk>\n                   \\<Longrightarrow> r' \\<noteq> (0::'a);\n        sub1 q (Suc k) l (r, A) = (r', A'); Suc k + l < dim_row A\\<rbrakk>\n       \\<Longrightarrow> r' \\<noteq> (0::'a)", "have All: \"q \\<noteq> 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. q \\<noteq> (0::'a)", "using sub1_preserves_diagnal[OF rA'' lc] All Suc"], ["proof (prove)\nusing this:\n  k + l < dim_row A \\<Longrightarrow> A'' $$ (l, l) = A $$ (l, l)\n  q \\<noteq> (0::'a)\n  \\<lbrakk>sub1 q k l (r, A) = (?r', ?A'); k + l < dim_row A\\<rbrakk>\n  \\<Longrightarrow> ?r' \\<noteq> (0::'a)\n  sub1 q (Suc k) l (r, A) = (r', A')\n  Suc k + l < dim_row A\n\ngoal (1 subgoal):\n 1. q \\<noteq> (0::'a)", "by auto"], ["proof (state)\nthis:\n  q \\<noteq> (0::'a)\n\ngoal (2 subgoals):\n 1. \\<And>r' A'.\n       \\<lbrakk>sub1 q 0 l (r, A) = (r', A'); 0 + l < dim_row A\\<rbrakk>\n       \\<Longrightarrow> r' \\<noteq> (0::'a)\n 2. \\<And>k r' A'.\n       \\<lbrakk>\\<And>r' A'.\n                   \\<lbrakk>sub1 q k l (r, A) = (r', A');\n                    k + l < dim_row A\\<rbrakk>\n                   \\<Longrightarrow> r' \\<noteq> (0::'a);\n        sub1 q (Suc k) l (r, A) = (r', A'); Suc k + l < dim_row A\\<rbrakk>\n       \\<Longrightarrow> r' \\<noteq> (0::'a)", "moreover"], ["proof (state)\nthis:\n  q \\<noteq> (0::'a)\n\ngoal (2 subgoals):\n 1. \\<And>r' A'.\n       \\<lbrakk>sub1 q 0 l (r, A) = (r', A'); 0 + l < dim_row A\\<rbrakk>\n       \\<Longrightarrow> r' \\<noteq> (0::'a)\n 2. \\<And>k r' A'.\n       \\<lbrakk>\\<And>r' A'.\n                   \\<lbrakk>sub1 q k l (r, A) = (r', A');\n                    k + l < dim_row A\\<rbrakk>\n                   \\<Longrightarrow> r' \\<noteq> (0::'a);\n        sub1 q (Suc k) l (r, A) = (r', A'); Suc k + l < dim_row A\\<rbrakk>\n       \\<Longrightarrow> r' \\<noteq> (0::'a)", "have \"fact \\<noteq> 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fact \\<noteq> (0::'a)", "unfolding fact_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (if A'' $$ (Suc (l + k), l) = (0::'a) then 1::'a else q') \\<noteq>\n    (0::'a)", "using All mf"], ["proof (prove)\nusing this:\n  q \\<noteq> (0::'a)\n  A'' $$ (Suc (l + k), l) \\<noteq> (0::'a) \\<Longrightarrow>\n  q = q' * g \\<and> A'' $$ (Suc (l + k), l) * q' = q * l'\n\ngoal (1 subgoal):\n 1. (if A'' $$ (Suc (l + k), l) = (0::'a) then 1::'a else q') \\<noteq>\n    (0::'a)", "by auto"], ["proof (state)\nthis:\n  fact \\<noteq> (0::'a)\n\ngoal (2 subgoals):\n 1. \\<And>r' A'.\n       \\<lbrakk>sub1 q 0 l (r, A) = (r', A'); 0 + l < dim_row A\\<rbrakk>\n       \\<Longrightarrow> r' \\<noteq> (0::'a)\n 2. \\<And>k r' A'.\n       \\<lbrakk>\\<And>r' A'.\n                   \\<lbrakk>sub1 q k l (r, A) = (r', A');\n                    k + l < dim_row A\\<rbrakk>\n                   \\<Longrightarrow> r' \\<noteq> (0::'a);\n        sub1 q (Suc k) l (r, A) = (r', A'); Suc k + l < dim_row A\\<rbrakk>\n       \\<Longrightarrow> r' \\<noteq> (0::'a)", "moreover"], ["proof (state)\nthis:\n  fact \\<noteq> (0::'a)\n\ngoal (2 subgoals):\n 1. \\<And>r' A'.\n       \\<lbrakk>sub1 q 0 l (r, A) = (r', A'); 0 + l < dim_row A\\<rbrakk>\n       \\<Longrightarrow> r' \\<noteq> (0::'a)\n 2. \\<And>k r' A'.\n       \\<lbrakk>\\<And>r' A'.\n                   \\<lbrakk>sub1 q k l (r, A) = (r', A');\n                    k + l < dim_row A\\<rbrakk>\n                   \\<Longrightarrow> r' \\<noteq> (0::'a);\n        sub1 q (Suc k) l (r, A) = (r', A'); Suc k + l < dim_row A\\<rbrakk>\n       \\<Longrightarrow> r' \\<noteq> (0::'a)", "assume \"sub1 q (Suc k) l (r,A) = (r',A')\""], ["proof (state)\nthis:\n  sub1 q (Suc k) l (r, A) = (r', A')\n\ngoal (2 subgoals):\n 1. \\<And>r' A'.\n       \\<lbrakk>sub1 q 0 l (r, A) = (r', A'); 0 + l < dim_row A\\<rbrakk>\n       \\<Longrightarrow> r' \\<noteq> (0::'a)\n 2. \\<And>k r' A'.\n       \\<lbrakk>\\<And>r' A'.\n                   \\<lbrakk>sub1 q k l (r, A) = (r', A');\n                    k + l < dim_row A\\<rbrakk>\n                   \\<Longrightarrow> r' \\<noteq> (0::'a);\n        sub1 q (Suc k) l (r, A) = (r', A'); Suc k + l < dim_row A\\<rbrakk>\n       \\<Longrightarrow> r' \\<noteq> (0::'a)", "then"], ["proof (chain)\npicking this:\n  sub1 q (Suc k) l (r, A) = (r', A')", "have \"mute q (Suc (l + k)) l (r'',A'') = (r',A')\""], ["proof (prove)\nusing this:\n  sub1 q (Suc k) l (r, A) = (r', A')\n\ngoal (1 subgoal):\n 1. mute q (Suc (l + k)) l (r'', A'') = (r', A')", "using rA''"], ["proof (prove)\nusing this:\n  sub1 q (Suc k) l (r, A) = (r', A')\n  sub1 q k l (r, A) = (r'', A'')\n\ngoal (1 subgoal):\n 1. mute q (Suc (l + k)) l (r'', A'') = (r', A')", "by auto"], ["proof (state)\nthis:\n  mute q (Suc (l + k)) l (r'', A'') = (r', A')\n\ngoal (2 subgoals):\n 1. \\<And>r' A'.\n       \\<lbrakk>sub1 q 0 l (r, A) = (r', A'); 0 + l < dim_row A\\<rbrakk>\n       \\<Longrightarrow> r' \\<noteq> (0::'a)\n 2. \\<And>k r' A'.\n       \\<lbrakk>\\<And>r' A'.\n                   \\<lbrakk>sub1 q k l (r, A) = (r', A');\n                    k + l < dim_row A\\<rbrakk>\n                   \\<Longrightarrow> r' \\<noteq> (0::'a);\n        sub1 q (Suc k) l (r, A) = (r', A'); Suc k + l < dim_row A\\<rbrakk>\n       \\<Longrightarrow> r' \\<noteq> (0::'a)", "hence \"r'' * fact = r'\""], ["proof (prove)\nusing this:\n  mute q (Suc (l + k)) l (r'', A'') = (r', A')\n\ngoal (1 subgoal):\n 1. r'' * fact = r'", "unfolding mute.simps fact_def Let_def mf_id"], ["proof (prove)\nusing this:\n  (if A'' $$ (Suc (l + k), l) = (0::'a) then (r'', A'')\n   else case (q', l', g) of\n        (q', p', g) \\<Rightarrow>\n          (r'' * q',\n           addrow (- p') (Suc (l + k)) l (multrow (Suc (l + k)) q' A''))) =\n  (r', A')\n\ngoal (1 subgoal):\n 1. r'' * (if A'' $$ (Suc (l + k), l) = (0::'a) then 1::'a else q') = r'", "using IH"], ["proof (prove)\nusing this:\n  (if A'' $$ (Suc (l + k), l) = (0::'a) then (r'', A'')\n   else case (q', l', g) of\n        (q', p', g) \\<Rightarrow>\n          (r'' * q',\n           addrow (- p') (Suc (l + k)) l (multrow (Suc (l + k)) q' A''))) =\n  (r', A')\n  r'' \\<noteq> (0::'a)\n\ngoal (1 subgoal):\n 1. r'' * (if A'' $$ (Suc (l + k), l) = (0::'a) then 1::'a else q') = r'", "by (auto split: if_splits)"], ["proof (state)\nthis:\n  r'' * fact = r'\n\ngoal (2 subgoals):\n 1. \\<And>r' A'.\n       \\<lbrakk>sub1 q 0 l (r, A) = (r', A'); 0 + l < dim_row A\\<rbrakk>\n       \\<Longrightarrow> r' \\<noteq> (0::'a)\n 2. \\<And>k r' A'.\n       \\<lbrakk>\\<And>r' A'.\n                   \\<lbrakk>sub1 q k l (r, A) = (r', A');\n                    k + l < dim_row A\\<rbrakk>\n                   \\<Longrightarrow> r' \\<noteq> (0::'a);\n        sub1 q (Suc k) l (r, A) = (r', A'); Suc k + l < dim_row A\\<rbrakk>\n       \\<Longrightarrow> r' \\<noteq> (0::'a)", "ultimately"], ["proof (chain)\npicking this:\n  q \\<noteq> (0::'a)\n  fact \\<noteq> (0::'a)\n  r'' * fact = r'", "show \"r' \\<noteq> 0\""], ["proof (prove)\nusing this:\n  q \\<noteq> (0::'a)\n  fact \\<noteq> (0::'a)\n  r'' * fact = r'\n\ngoal (1 subgoal):\n 1. r' \\<noteq> (0::'a)", "using IH"], ["proof (prove)\nusing this:\n  q \\<noteq> (0::'a)\n  fact \\<noteq> (0::'a)\n  r'' * fact = r'\n  r'' \\<noteq> (0::'a)\n\ngoal (1 subgoal):\n 1. r' \\<noteq> (0::'a)", "by auto"], ["proof (state)\nthis:\n  r' \\<noteq> (0::'a)\n\ngoal (1 subgoal):\n 1. \\<And>r' A'.\n       \\<lbrakk>sub1 q 0 l (r, A) = (r', A'); 0 + l < dim_row A\\<rbrakk>\n       \\<Longrightarrow> r' \\<noteq> (0::'a)", "qed (insert r0, simp)"], ["proof (state)\nthis:\n  \\<lbrakk>sub1 q k l (r, A) = (r', A'); k + l < dim_row A\\<rbrakk>\n  \\<Longrightarrow> r' \\<noteq> (0::'a)\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>The algorithm @{term \"sub2\"} will not require such a condition.\\<close>"], ["", "lemma sub2_divisor [simp]:\n  assumes rA': \"sub2 k l (r, A) = (r',A')\"\n  and lk: \"l < k\"\n  and kr: \"k \\<le> dim_row A\"\n  and lc: \"l < dim_col A\"\n  and r0: \"r \\<noteq> 0\"\n  shows \"r' \\<noteq> 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. r' \\<noteq> (0::'a)", "using assms"], ["proof (prove)\nusing this:\n  sub2 k l (r, A) = (r', A')\n  l < k\n  k \\<le> dim_row A\n  l < dim_col A\n  r \\<noteq> (0::'a)\n\ngoal (1 subgoal):\n 1. r' \\<noteq> (0::'a)", "proof (cases \"find_non0 l A\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>sub2 k l (r, A) = (r', A'); l < k; k \\<le> dim_row A;\n     l < dim_col A; r \\<noteq> (0::'a); find_non0 l A = None\\<rbrakk>\n    \\<Longrightarrow> r' \\<noteq> (0::'a)\n 2. \\<And>a.\n       \\<lbrakk>sub2 k l (r, A) = (r', A'); l < k; k \\<le> dim_row A;\n        l < dim_col A; r \\<noteq> (0::'a); find_non0 l A = Some a\\<rbrakk>\n       \\<Longrightarrow> r' \\<noteq> (0::'a)", "{"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>sub2 k l (r, A) = (r', A'); l < k; k \\<le> dim_row A;\n     l < dim_col A; r \\<noteq> (0::'a); find_non0 l A = None\\<rbrakk>\n    \\<Longrightarrow> r' \\<noteq> (0::'a)\n 2. \\<And>a.\n       \\<lbrakk>sub2 k l (r, A) = (r', A'); l < k; k \\<le> dim_row A;\n        l < dim_col A; r \\<noteq> (0::'a); find_non0 l A = Some a\\<rbrakk>\n       \\<Longrightarrow> r' \\<noteq> (0::'a)", "case (Some m)"], ["proof (state)\nthis:\n  find_non0 l A = Some m\n\ngoal (2 subgoals):\n 1. \\<lbrakk>sub2 k l (r, A) = (r', A'); l < k; k \\<le> dim_row A;\n     l < dim_col A; r \\<noteq> (0::'a); find_non0 l A = None\\<rbrakk>\n    \\<Longrightarrow> r' \\<noteq> (0::'a)\n 2. \\<And>a.\n       \\<lbrakk>sub2 k l (r, A) = (r', A'); l < k; k \\<le> dim_row A;\n        l < dim_col A; r \\<noteq> (0::'a); find_non0 l A = Some a\\<rbrakk>\n       \\<Longrightarrow> r' \\<noteq> (0::'a)", "then"], ["proof (chain)\npicking this:\n  find_non0 l A = Some m", "have Aml0: \"A $$ (m,l) \\<noteq> 0\""], ["proof (prove)\nusing this:\n  find_non0 l A = Some m\n\ngoal (1 subgoal):\n 1. A $$ (m, l) \\<noteq> (0::'a)", "using find_non0[OF sel_fun]"], ["proof (prove)\nusing this:\n  find_non0 l A = Some m\n  find_non0 ?l ?A = Some ?m \\<Longrightarrow>\n  ?A $$ (?m, ?l) \\<noteq> (0::'a)\n  find_non0 ?l ?A = Some ?m \\<Longrightarrow> ?l < ?m\n  find_non0 ?l ?A = Some ?m \\<Longrightarrow> ?m < dim_row ?A\n\ngoal (1 subgoal):\n 1. A $$ (m, l) \\<noteq> (0::'a)", "by auto"], ["proof (state)\nthis:\n  A $$ (m, l) \\<noteq> (0::'a)\n\ngoal (2 subgoals):\n 1. \\<lbrakk>sub2 k l (r, A) = (r', A'); l < k; k \\<le> dim_row A;\n     l < dim_col A; r \\<noteq> (0::'a); find_non0 l A = None\\<rbrakk>\n    \\<Longrightarrow> r' \\<noteq> (0::'a)\n 2. \\<And>a.\n       \\<lbrakk>sub2 k l (r, A) = (r', A'); l < k; k \\<le> dim_row A;\n        l < dim_col A; r \\<noteq> (0::'a); find_non0 l A = Some a\\<rbrakk>\n       \\<Longrightarrow> r' \\<noteq> (0::'a)", "have md: \"m < dim_row A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. m < dim_row A", "using find_non0[OF sel_fun Some] lk kr"], ["proof (prove)\nusing this:\n  A $$ (m, l) \\<noteq> (0::'a)\n  l < m\n  m < dim_row A\n  l < k\n  k \\<le> dim_row A\n\ngoal (1 subgoal):\n 1. m < dim_row A", "by auto"], ["proof (state)\nthis:\n  m < dim_row A\n\ngoal (2 subgoals):\n 1. \\<lbrakk>sub2 k l (r, A) = (r', A'); l < k; k \\<le> dim_row A;\n     l < dim_col A; r \\<noteq> (0::'a); find_non0 l A = None\\<rbrakk>\n    \\<Longrightarrow> r' \\<noteq> (0::'a)\n 2. \\<And>a.\n       \\<lbrakk>sub2 k l (r, A) = (r', A'); l < k; k \\<le> dim_row A;\n        l < dim_col A; r \\<noteq> (0::'a); find_non0 l A = Some a\\<rbrakk>\n       \\<Longrightarrow> r' \\<noteq> (0::'a)", "let ?A'' = \"swaprows m l A\""], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>sub2 k l (r, A) = (r', A'); l < k; k \\<le> dim_row A;\n     l < dim_col A; r \\<noteq> (0::'a); find_non0 l A = None\\<rbrakk>\n    \\<Longrightarrow> r' \\<noteq> (0::'a)\n 2. \\<And>a.\n       \\<lbrakk>sub2 k l (r, A) = (r', A'); l < k; k \\<le> dim_row A;\n        l < dim_col A; r \\<noteq> (0::'a); find_non0 l A = Some a\\<rbrakk>\n       \\<Longrightarrow> r' \\<noteq> (0::'a)", "have rA'2: \"sub1 (?A'' $$ (l,l)) (k - Suc l) l (-r, ?A'') = (r',A')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sub1 (swaprows m l A $$ (l, l)) (k - Suc l) l (- r, swaprows m l A) =\n    (r', A')", "using rA' Some"], ["proof (prove)\nusing this:\n  sub2 k l (r, A) = (r', A')\n  find_non0 l A = Some m\n\ngoal (1 subgoal):\n 1. sub1 (swaprows m l A $$ (l, l)) (k - Suc l) l (- r, swaprows m l A) =\n    (r', A')", "by (simp add: Let_def)"], ["proof (state)\nthis:\n  sub1 (swaprows m l A $$ (l, l)) (k - Suc l) l (- r, swaprows m l A) =\n  (r', A')\n\ngoal (2 subgoals):\n 1. \\<lbrakk>sub2 k l (r, A) = (r', A'); l < k; k \\<le> dim_row A;\n     l < dim_col A; r \\<noteq> (0::'a); find_non0 l A = None\\<rbrakk>\n    \\<Longrightarrow> r' \\<noteq> (0::'a)\n 2. \\<And>a.\n       \\<lbrakk>sub2 k l (r, A) = (r', A'); l < k; k \\<le> dim_row A;\n        l < dim_col A; r \\<noteq> (0::'a); find_non0 l A = Some a\\<rbrakk>\n       \\<Longrightarrow> r' \\<noteq> (0::'a)", "have All0: \"?A'' $$ (l,l) \\<noteq> 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. swaprows m l A $$ (l, l) \\<noteq> (0::'a)", "using Aml0 md lk kr lc"], ["proof (prove)\nusing this:\n  A $$ (m, l) \\<noteq> (0::'a)\n  m < dim_row A\n  l < k\n  k \\<le> dim_row A\n  l < dim_col A\n\ngoal (1 subgoal):\n 1. swaprows m l A $$ (l, l) \\<noteq> (0::'a)", "by auto"], ["proof (state)\nthis:\n  swaprows m l A $$ (l, l) \\<noteq> (0::'a)\n\ngoal (2 subgoals):\n 1. \\<lbrakk>sub2 k l (r, A) = (r', A'); l < k; k \\<le> dim_row A;\n     l < dim_col A; r \\<noteq> (0::'a); find_non0 l A = None\\<rbrakk>\n    \\<Longrightarrow> r' \\<noteq> (0::'a)\n 2. \\<And>a.\n       \\<lbrakk>sub2 k l (r, A) = (r', A'); l < k; k \\<le> dim_row A;\n        l < dim_col A; r \\<noteq> (0::'a); find_non0 l A = Some a\\<rbrakk>\n       \\<Longrightarrow> r' \\<noteq> (0::'a)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. r' \\<noteq> (0::'a)", "using sub1_divisor[OF rA'2 _ All0] r0 lk kr lc"], ["proof (prove)\nusing this:\n  \\<lbrakk>- r \\<noteq> (0::'a); k - Suc l + l < dim_row (swaprows m l A);\n   l < dim_col (swaprows m l A)\\<rbrakk>\n  \\<Longrightarrow> r' \\<noteq> (0::'a)\n  r \\<noteq> (0::'a)\n  l < k\n  k \\<le> dim_row A\n  l < dim_col A\n\ngoal (1 subgoal):\n 1. r' \\<noteq> (0::'a)", "by simp"], ["proof (state)\nthis:\n  r' \\<noteq> (0::'a)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>sub2 k l (r, A) = (r', A'); l < k; k \\<le> dim_row A;\n     l < dim_col A; r \\<noteq> (0::'a); find_non0 l A = None\\<rbrakk>\n    \\<Longrightarrow> r' \\<noteq> (0::'a)", "}"], ["proof (state)\nthis:\n  find_non0 l A = Some ?m2 \\<Longrightarrow> r' \\<noteq> (0::'a)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>sub2 k l (r, A) = (r', A'); l < k; k \\<le> dim_row A;\n     l < dim_col A; r \\<noteq> (0::'a); find_non0 l A = None\\<rbrakk>\n    \\<Longrightarrow> r' \\<noteq> (0::'a)", "qed auto"], ["", "lemma sub3_divisor [simp]:\n  assumes \"sub3 d l (r,A) = (r'',A'')\"\n  and \"l \\<le> d\"\n  and \"d \\<le> dim_row A\"\n  and \"l \\<le> dim_col A\"\n  and r0: \"r \\<noteq> 0\"\n  shows \"r'' \\<noteq> 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. r'' \\<noteq> (0::'a)", "using assms"], ["proof (prove)\nusing this:\n  sub3 d l (r, A) = (r'', A'')\n  l \\<le> d\n  d \\<le> dim_row A\n  l \\<le> dim_col A\n  r \\<noteq> (0::'a)\n\ngoal (1 subgoal):\n 1. r'' \\<noteq> (0::'a)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>sub3 d l (r, A) = (r'', A''); l \\<le> d; d \\<le> dim_row A;\n     l \\<le> dim_col A; r \\<noteq> (0::'a)\\<rbrakk>\n    \\<Longrightarrow> r'' \\<noteq> (0::'a)", "show\n    \"sub3 d l (r,A) = (r'',A'') \\<Longrightarrow>\n     l \\<le> d \\<Longrightarrow> d \\<le> dim_row A \\<Longrightarrow> l \\<le> dim_col A \\<Longrightarrow> ?thesis\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>sub3 d l (r, A) = (r'', A''); l \\<le> d; d \\<le> dim_row A;\n     l \\<le> dim_col A\\<rbrakk>\n    \\<Longrightarrow> r'' \\<noteq> (0::'a)", "proof (induction l arbitrary: r'' A'')"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>r'' A''.\n       \\<lbrakk>sub3 d 0 (r, A) = (r'', A''); 0 \\<le> d; d \\<le> dim_row A;\n        0 \\<le> dim_col A\\<rbrakk>\n       \\<Longrightarrow> r'' \\<noteq> (0::'a)\n 2. \\<And>l r'' A''.\n       \\<lbrakk>\\<And>r'' A''.\n                   \\<lbrakk>sub3 d l (r, A) = (r'', A''); l \\<le> d;\n                    d \\<le> dim_row A; l \\<le> dim_col A\\<rbrakk>\n                   \\<Longrightarrow> r'' \\<noteq> (0::'a);\n        sub3 d (Suc l) (r, A) = (r'', A''); Suc l \\<le> d;\n        d \\<le> dim_row A; Suc l \\<le> dim_col A\\<rbrakk>\n       \\<Longrightarrow> r'' \\<noteq> (0::'a)", "case 0"], ["proof (state)\nthis:\n  sub3 d 0 (r, A) = (r'', A'')\n  0 \\<le> d\n  d \\<le> dim_row A\n  0 \\<le> dim_col A\n\ngoal (2 subgoals):\n 1. \\<And>r'' A''.\n       \\<lbrakk>sub3 d 0 (r, A) = (r'', A''); 0 \\<le> d; d \\<le> dim_row A;\n        0 \\<le> dim_col A\\<rbrakk>\n       \\<Longrightarrow> r'' \\<noteq> (0::'a)\n 2. \\<And>l r'' A''.\n       \\<lbrakk>\\<And>r'' A''.\n                   \\<lbrakk>sub3 d l (r, A) = (r'', A''); l \\<le> d;\n                    d \\<le> dim_row A; l \\<le> dim_col A\\<rbrakk>\n                   \\<Longrightarrow> r'' \\<noteq> (0::'a);\n        sub3 d (Suc l) (r, A) = (r'', A''); Suc l \\<le> d;\n        d \\<le> dim_row A; Suc l \\<le> dim_col A\\<rbrakk>\n       \\<Longrightarrow> r'' \\<noteq> (0::'a)", "then"], ["proof (chain)\npicking this:\n  sub3 d 0 (r, A) = (r'', A'')\n  0 \\<le> d\n  d \\<le> dim_row A\n  0 \\<le> dim_col A", "show ?case"], ["proof (prove)\nusing this:\n  sub3 d 0 (r, A) = (r'', A'')\n  0 \\<le> d\n  d \\<le> dim_row A\n  0 \\<le> dim_col A\n\ngoal (1 subgoal):\n 1. r'' \\<noteq> (0::'a)", "using r0"], ["proof (prove)\nusing this:\n  sub3 d 0 (r, A) = (r'', A'')\n  0 \\<le> d\n  d \\<le> dim_row A\n  0 \\<le> dim_col A\n  r \\<noteq> (0::'a)\n\ngoal (1 subgoal):\n 1. r'' \\<noteq> (0::'a)", "by simp"], ["proof (state)\nthis:\n  r'' \\<noteq> (0::'a)\n\ngoal (1 subgoal):\n 1. \\<And>l r'' A''.\n       \\<lbrakk>\\<And>r'' A''.\n                   \\<lbrakk>sub3 d l (r, A) = (r'', A''); l \\<le> d;\n                    d \\<le> dim_row A; l \\<le> dim_col A\\<rbrakk>\n                   \\<Longrightarrow> r'' \\<noteq> (0::'a);\n        sub3 d (Suc l) (r, A) = (r'', A''); Suc l \\<le> d;\n        d \\<le> dim_row A; Suc l \\<le> dim_col A\\<rbrakk>\n       \\<Longrightarrow> r'' \\<noteq> (0::'a)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>l r'' A''.\n       \\<lbrakk>\\<And>r'' A''.\n                   \\<lbrakk>sub3 d l (r, A) = (r'', A''); l \\<le> d;\n                    d \\<le> dim_row A; l \\<le> dim_col A\\<rbrakk>\n                   \\<Longrightarrow> r'' \\<noteq> (0::'a);\n        sub3 d (Suc l) (r, A) = (r'', A''); Suc l \\<le> d;\n        d \\<le> dim_row A; Suc l \\<le> dim_col A\\<rbrakk>\n       \\<Longrightarrow> r'' \\<noteq> (0::'a)", "case (Suc l)"], ["proof (state)\nthis:\n  \\<lbrakk>sub3 d l (r, A) = (?r'', ?A''); l \\<le> d; d \\<le> dim_row A;\n   l \\<le> dim_col A\\<rbrakk>\n  \\<Longrightarrow> ?r'' \\<noteq> (0::'a)\n  sub3 d (Suc l) (r, A) = (r'', A'')\n  Suc l \\<le> d\n  d \\<le> dim_row A\n  Suc l \\<le> dim_col A\n\ngoal (1 subgoal):\n 1. \\<And>l r'' A''.\n       \\<lbrakk>\\<And>r'' A''.\n                   \\<lbrakk>sub3 d l (r, A) = (r'', A''); l \\<le> d;\n                    d \\<le> dim_row A; l \\<le> dim_col A\\<rbrakk>\n                   \\<Longrightarrow> r'' \\<noteq> (0::'a);\n        sub3 d (Suc l) (r, A) = (r'', A''); Suc l \\<le> d;\n        d \\<le> dim_row A; Suc l \\<le> dim_col A\\<rbrakk>\n       \\<Longrightarrow> r'' \\<noteq> (0::'a)", "obtain r' A' where rA': \"sub3 d l (r,A) = (r',A')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>r' A'.\n        sub3 d l (r, A) = (r', A') \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by force"], ["proof (state)\nthis:\n  sub3 d l (r, A) = (r', A')\n\ngoal (1 subgoal):\n 1. \\<And>l r'' A''.\n       \\<lbrakk>\\<And>r'' A''.\n                   \\<lbrakk>sub3 d l (r, A) = (r'', A''); l \\<le> d;\n                    d \\<le> dim_row A; l \\<le> dim_col A\\<rbrakk>\n                   \\<Longrightarrow> r'' \\<noteq> (0::'a);\n        sub3 d (Suc l) (r, A) = (r'', A''); Suc l \\<le> d;\n        d \\<le> dim_row A; Suc l \\<le> dim_col A\\<rbrakk>\n       \\<Longrightarrow> r'' \\<noteq> (0::'a)", "then"], ["proof (chain)\npicking this:\n  sub3 d l (r, A) = (r', A')", "have [simp]:\"dim_row A' = dim_row A\" and [simp]:\"dim_col A' = dim_col A\""], ["proof (prove)\nusing this:\n  sub3 d l (r, A) = (r', A')\n\ngoal (1 subgoal):\n 1. dim_row A' = dim_row A &&& dim_col A' = dim_col A", "by auto"], ["proof (state)\nthis:\n  dim_row A' = dim_row A\n  dim_col A' = dim_col A\n\ngoal (1 subgoal):\n 1. \\<And>l r'' A''.\n       \\<lbrakk>\\<And>r'' A''.\n                   \\<lbrakk>sub3 d l (r, A) = (r'', A''); l \\<le> d;\n                    d \\<le> dim_row A; l \\<le> dim_col A\\<rbrakk>\n                   \\<Longrightarrow> r'' \\<noteq> (0::'a);\n        sub3 d (Suc l) (r, A) = (r'', A''); Suc l \\<le> d;\n        d \\<le> dim_row A; Suc l \\<le> dim_col A\\<rbrakk>\n       \\<Longrightarrow> r'' \\<noteq> (0::'a)", "from rA'"], ["proof (chain)\npicking this:\n  sub3 d l (r, A) = (r', A')", "have \"r' \\<noteq> 0\""], ["proof (prove)\nusing this:\n  sub3 d l (r, A) = (r', A')\n\ngoal (1 subgoal):\n 1. r' \\<noteq> (0::'a)", "using Suc r0"], ["proof (prove)\nusing this:\n  sub3 d l (r, A) = (r', A')\n  \\<lbrakk>sub3 d l (r, A) = (?r'', ?A''); l \\<le> d; d \\<le> dim_row A;\n   l \\<le> dim_col A\\<rbrakk>\n  \\<Longrightarrow> ?r'' \\<noteq> (0::'a)\n  sub3 d (Suc l) (r, A) = (r'', A'')\n  Suc l \\<le> d\n  d \\<le> dim_row A\n  Suc l \\<le> dim_col A\n  r \\<noteq> (0::'a)\n\ngoal (1 subgoal):\n 1. r' \\<noteq> (0::'a)", "by auto"], ["proof (state)\nthis:\n  r' \\<noteq> (0::'a)\n\ngoal (1 subgoal):\n 1. \\<And>l r'' A''.\n       \\<lbrakk>\\<And>r'' A''.\n                   \\<lbrakk>sub3 d l (r, A) = (r'', A''); l \\<le> d;\n                    d \\<le> dim_row A; l \\<le> dim_col A\\<rbrakk>\n                   \\<Longrightarrow> r'' \\<noteq> (0::'a);\n        sub3 d (Suc l) (r, A) = (r'', A''); Suc l \\<le> d;\n        d \\<le> dim_row A; Suc l \\<le> dim_col A\\<rbrakk>\n       \\<Longrightarrow> r'' \\<noteq> (0::'a)", "moreover"], ["proof (state)\nthis:\n  r' \\<noteq> (0::'a)\n\ngoal (1 subgoal):\n 1. \\<And>l r'' A''.\n       \\<lbrakk>\\<And>r'' A''.\n                   \\<lbrakk>sub3 d l (r, A) = (r'', A''); l \\<le> d;\n                    d \\<le> dim_row A; l \\<le> dim_col A\\<rbrakk>\n                   \\<Longrightarrow> r'' \\<noteq> (0::'a);\n        sub3 d (Suc l) (r, A) = (r'', A''); Suc l \\<le> d;\n        d \\<le> dim_row A; Suc l \\<le> dim_col A\\<rbrakk>\n       \\<Longrightarrow> r'' \\<noteq> (0::'a)", "have \"sub2 d l (r',A') = (r'',A'')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sub2 d l (r', A') = (r'', A'')", "using rA' Suc"], ["proof (prove)\nusing this:\n  sub3 d l (r, A) = (r', A')\n  \\<lbrakk>sub3 d l (r, A) = (?r'', ?A''); l \\<le> d; d \\<le> dim_row A;\n   l \\<le> dim_col A\\<rbrakk>\n  \\<Longrightarrow> ?r'' \\<noteq> (0::'a)\n  sub3 d (Suc l) (r, A) = (r'', A'')\n  Suc l \\<le> d\n  d \\<le> dim_row A\n  Suc l \\<le> dim_col A\n\ngoal (1 subgoal):\n 1. sub2 d l (r', A') = (r'', A'')", "by simp"], ["proof (state)\nthis:\n  sub2 d l (r', A') = (r'', A'')\n\ngoal (1 subgoal):\n 1. \\<And>l r'' A''.\n       \\<lbrakk>\\<And>r'' A''.\n                   \\<lbrakk>sub3 d l (r, A) = (r'', A''); l \\<le> d;\n                    d \\<le> dim_row A; l \\<le> dim_col A\\<rbrakk>\n                   \\<Longrightarrow> r'' \\<noteq> (0::'a);\n        sub3 d (Suc l) (r, A) = (r'', A''); Suc l \\<le> d;\n        d \\<le> dim_row A; Suc l \\<le> dim_col A\\<rbrakk>\n       \\<Longrightarrow> r'' \\<noteq> (0::'a)", "ultimately"], ["proof (chain)\npicking this:\n  r' \\<noteq> (0::'a)\n  sub2 d l (r', A') = (r'', A'')", "show ?case"], ["proof (prove)\nusing this:\n  r' \\<noteq> (0::'a)\n  sub2 d l (r', A') = (r'', A'')\n\ngoal (1 subgoal):\n 1. r'' \\<noteq> (0::'a)", "using sub2_divisor"], ["proof (prove)\nusing this:\n  r' \\<noteq> (0::'a)\n  sub2 d l (r', A') = (r'', A'')\n  \\<lbrakk>sub2 ?k ?l (?r, ?A) = (?r', ?A'); ?l < ?k; ?k \\<le> dim_row ?A;\n   ?l < dim_col ?A; ?r \\<noteq> (0::'a)\\<rbrakk>\n  \\<Longrightarrow> ?r' \\<noteq> (0::'a)\n\ngoal (1 subgoal):\n 1. r'' \\<noteq> (0::'a)", "using Suc"], ["proof (prove)\nusing this:\n  r' \\<noteq> (0::'a)\n  sub2 d l (r', A') = (r'', A'')\n  \\<lbrakk>sub2 ?k ?l (?r, ?A) = (?r', ?A'); ?l < ?k; ?k \\<le> dim_row ?A;\n   ?l < dim_col ?A; ?r \\<noteq> (0::'a)\\<rbrakk>\n  \\<Longrightarrow> ?r' \\<noteq> (0::'a)\n  \\<lbrakk>sub3 d l (r, A) = (?r'', ?A''); l \\<le> d; d \\<le> dim_row A;\n   l \\<le> dim_col A\\<rbrakk>\n  \\<Longrightarrow> ?r'' \\<noteq> (0::'a)\n  sub3 d (Suc l) (r, A) = (r'', A'')\n  Suc l \\<le> d\n  d \\<le> dim_row A\n  Suc l \\<le> dim_col A\n\ngoal (1 subgoal):\n 1. r'' \\<noteq> (0::'a)", "by simp"], ["proof (state)\nthis:\n  r'' \\<noteq> (0::'a)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<lbrakk>sub3 d l (r, A) = (r'', A''); l \\<le> d; d \\<le> dim_row A;\n   l \\<le> dim_col A\\<rbrakk>\n  \\<Longrightarrow> r'' \\<noteq> (0::'a)\n\ngoal:\nNo subgoals!", "qed"], ["", "theorem triangulize_divisor:\n  assumes A: \"A \\<in> carrier_mat d d\"\n  shows \"triangulize A = (r',A') \\<Longrightarrow> r' \\<noteq> 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. local.triangulize A = (r', A') \\<Longrightarrow> r' \\<noteq> (0::'a)", "unfolding triangulize_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. sub3 (dim_row A) (dim_row A) (1::'a, A) = (r', A') \\<Longrightarrow>\n    r' \\<noteq> (0::'a)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. sub3 (dim_row A) (dim_row A) (1::'a, A) = (r', A') \\<Longrightarrow>\n    r' \\<noteq> (0::'a)", "assume rA': \"sub3 (dim_row A) (dim_row A) (1, A) = (r', A')\""], ["proof (state)\nthis:\n  sub3 (dim_row A) (dim_row A) (1::'a, A) = (r', A')\n\ngoal (1 subgoal):\n 1. sub3 (dim_row A) (dim_row A) (1::'a, A) = (r', A') \\<Longrightarrow>\n    r' \\<noteq> (0::'a)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. r' \\<noteq> (0::'a)", "using sub3_divisor[OF rA'] A"], ["proof (prove)\nusing this:\n  \\<lbrakk>dim_row A \\<le> dim_row A; dim_row A \\<le> dim_row A;\n   dim_row A \\<le> dim_col A; (1::'a) \\<noteq> (0::'a)\\<rbrakk>\n  \\<Longrightarrow> r' \\<noteq> (0::'a)\n  A \\<in> carrier_mat d d\n\ngoal (1 subgoal):\n 1. r' \\<noteq> (0::'a)", "by auto"], ["proof (state)\nthis:\n  r' \\<noteq> (0::'a)\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection \\<open>Determinant Preservation Results\\<close>"], ["", "text \\<open>\n  For each sub-algorithm $f$,\n  we show $f(r,A) = (r',A')$ implies @{term \"r * det A' = r' * det A\"}.\n\\<close>"], ["", "lemma mute_det:\n  assumes \"A \\<in> carrier_mat n n\"\n  and rA': \"mute q k l (r,A) = (r',A')\"\n  and \"k < n\"\n  and \"l < n\"\n  and \"k \\<noteq> l\"\n  shows \"r * det A' = r' * det A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. r * det A' = r' * det A", "proof (cases \"A $$ (k,l) = 0\")"], ["proof (state)\ngoal (2 subgoals):\n 1. A $$ (k, l) = (0::'a) \\<Longrightarrow> r * det A' = r' * det A\n 2. A $$ (k, l) \\<noteq> (0::'a) \\<Longrightarrow> r * det A' = r' * det A", "case True"], ["proof (state)\nthis:\n  A $$ (k, l) = (0::'a)\n\ngoal (2 subgoals):\n 1. A $$ (k, l) = (0::'a) \\<Longrightarrow> r * det A' = r' * det A\n 2. A $$ (k, l) \\<noteq> (0::'a) \\<Longrightarrow> r * det A' = r' * det A", "thus ?thesis"], ["proof (prove)\nusing this:\n  A $$ (k, l) = (0::'a)\n\ngoal (1 subgoal):\n 1. r * det A' = r' * det A", "using assms"], ["proof (prove)\nusing this:\n  A $$ (k, l) = (0::'a)\n  A \\<in> carrier_mat n n\n  mute q k l (r, A) = (r', A')\n  k < n\n  l < n\n  k \\<noteq> l\n\ngoal (1 subgoal):\n 1. r * det A' = r' * det A", "by auto"], ["proof (state)\nthis:\n  r * det A' = r' * det A\n\ngoal (1 subgoal):\n 1. A $$ (k, l) \\<noteq> (0::'a) \\<Longrightarrow> r * det A' = r' * det A", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. A $$ (k, l) \\<noteq> (0::'a) \\<Longrightarrow> r * det A' = r' * det A", "case False"], ["proof (state)\nthis:\n  A $$ (k, l) \\<noteq> (0::'a)\n\ngoal (1 subgoal):\n 1. A $$ (k, l) \\<noteq> (0::'a) \\<Longrightarrow> r * det A' = r' * det A", "obtain p' q' g where mf_id: \"mf q (A $$ (k,l)) = (q',p',g)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>q' p' g.\n        mf q (A $$ (k, l)) = (q', p', g) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (rule prod_cases3)"], ["proof (state)\nthis:\n  mf q (A $$ (k, l)) = (q', p', g)\n\ngoal (1 subgoal):\n 1. A $$ (k, l) \\<noteq> (0::'a) \\<Longrightarrow> r * det A' = r' * det A", "let ?All = \"q'\""], ["proof (state)\ngoal (1 subgoal):\n 1. A $$ (k, l) \\<noteq> (0::'a) \\<Longrightarrow> r * det A' = r' * det A", "let ?Akl = \"- p'\""], ["proof (state)\ngoal (1 subgoal):\n 1. A $$ (k, l) \\<noteq> (0::'a) \\<Longrightarrow> r * det A' = r' * det A", "let ?B = \"multrow k ?All A\""], ["proof (state)\ngoal (1 subgoal):\n 1. A $$ (k, l) \\<noteq> (0::'a) \\<Longrightarrow> r * det A' = r' * det A", "let ?C = \"addrow ?Akl k l ?B\""], ["proof (state)\ngoal (1 subgoal):\n 1. A $$ (k, l) \\<noteq> (0::'a) \\<Longrightarrow> r * det A' = r' * det A", "have \"r * det A' = r * det ?C\""], ["proof (prove)\ngoal (1 subgoal):\n 1. r * det A' = r * det (addrow (- p') k l (multrow k q' A))", "using assms"], ["proof (prove)\nusing this:\n  A \\<in> carrier_mat n n\n  mute q k l (r, A) = (r', A')\n  k < n\n  l < n\n  k \\<noteq> l\n\ngoal (1 subgoal):\n 1. r * det A' = r * det (addrow (- p') k l (multrow k q' A))", "by (simp add: Let_def mf_id False)"], ["proof (state)\nthis:\n  r * det A' = r * det (addrow (- p') k l (multrow k q' A))\n\ngoal (1 subgoal):\n 1. A $$ (k, l) \\<noteq> (0::'a) \\<Longrightarrow> r * det A' = r' * det A", "also"], ["proof (state)\nthis:\n  r * det A' = r * det (addrow (- p') k l (multrow k q' A))\n\ngoal (1 subgoal):\n 1. A $$ (k, l) \\<noteq> (0::'a) \\<Longrightarrow> r * det A' = r' * det A", "have \"det ?C = det ?B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. det (addrow (- p') k l (multrow k q' A)) = det (multrow k q' A)", "using assms"], ["proof (prove)\nusing this:\n  A \\<in> carrier_mat n n\n  mute q k l (r, A) = (r', A')\n  k < n\n  l < n\n  k \\<noteq> l\n\ngoal (1 subgoal):\n 1. det (addrow (- p') k l (multrow k q' A)) = det (multrow k q' A)", "by (auto simp: det_addrow)"], ["proof (state)\nthis:\n  det (addrow (- p') k l (multrow k q' A)) = det (multrow k q' A)\n\ngoal (1 subgoal):\n 1. A $$ (k, l) \\<noteq> (0::'a) \\<Longrightarrow> r * det A' = r' * det A", "also"], ["proof (state)\nthis:\n  det (addrow (- p') k l (multrow k q' A)) = det (multrow k q' A)\n\ngoal (1 subgoal):\n 1. A $$ (k, l) \\<noteq> (0::'a) \\<Longrightarrow> r * det A' = r' * det A", "have \"\\<dots> = ?All * det A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. det (multrow k q' A) = q' * det A", "using assms det_multrow"], ["proof (prove)\nusing this:\n  A \\<in> carrier_mat n n\n  mute q k l (r, A) = (r', A')\n  k < n\n  l < n\n  k \\<noteq> l\n  \\<lbrakk>?k < ?n; ?A \\<in> carrier_mat ?n ?n\\<rbrakk>\n  \\<Longrightarrow> det (multrow ?k ?a ?A) = ?a * det ?A\n\ngoal (1 subgoal):\n 1. det (multrow k q' A) = q' * det A", "by auto"], ["proof (state)\nthis:\n  det (multrow k q' A) = q' * det A\n\ngoal (1 subgoal):\n 1. A $$ (k, l) \\<noteq> (0::'a) \\<Longrightarrow> r * det A' = r' * det A", "also"], ["proof (state)\nthis:\n  det (multrow k q' A) = q' * det A\n\ngoal (1 subgoal):\n 1. A $$ (k, l) \\<noteq> (0::'a) \\<Longrightarrow> r * det A' = r' * det A", "have \"r * \\<dots> = (r * ?All) * det A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. r * (q' * det A) = r * q' * det A", "by simp"], ["proof (state)\nthis:\n  r * (q' * det A) = r * q' * det A\n\ngoal (1 subgoal):\n 1. A $$ (k, l) \\<noteq> (0::'a) \\<Longrightarrow> r * det A' = r' * det A", "also"], ["proof (state)\nthis:\n  r * (q' * det A) = r * q' * det A\n\ngoal (1 subgoal):\n 1. A $$ (k, l) \\<noteq> (0::'a) \\<Longrightarrow> r * det A' = r' * det A", "have r: \"r * ?All = r'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. r * q' = r'", "using assms"], ["proof (prove)\nusing this:\n  A \\<in> carrier_mat n n\n  mute q k l (r, A) = (r', A')\n  k < n\n  l < n\n  k \\<noteq> l\n\ngoal (1 subgoal):\n 1. r * q' = r'", "by (simp add: Let_def mf_id False)"], ["proof (state)\nthis:\n  r * q' = r'\n\ngoal (1 subgoal):\n 1. A $$ (k, l) \\<noteq> (0::'a) \\<Longrightarrow> r * det A' = r' * det A", "finally"], ["proof (chain)\npicking this:\n  r * det A' = r' * det A", "show ?thesis"], ["proof (prove)\nusing this:\n  r * det A' = r' * det A\n\ngoal (1 subgoal):\n 1. r * det A' = r' * det A", "."], ["proof (state)\nthis:\n  r * det A' = r' * det A\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma sub1_det:\n  assumes A: \"A \\<in> carrier_mat n n\"\n  and sub1: \"sub1 q k l (r,A) = (r'',A'')\"\n  and r0: \"r \\<noteq> 0\"\n  and All0: \"q \\<noteq> 0\"\n  and l: \"l + k < n\"\n  shows \"r * det A'' = r'' * det A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. r * det A'' = r'' * det A", "using sub1 l"], ["proof (prove)\nusing this:\n  sub1 q k l (r, A) = (r'', A'')\n  l + k < n\n\ngoal (1 subgoal):\n 1. r * det A'' = r'' * det A", "proof (induction k arbitrary: A'' r'')"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>A'' r''.\n       \\<lbrakk>sub1 q 0 l (r, A) = (r'', A''); l + 0 < n\\<rbrakk>\n       \\<Longrightarrow> r * det A'' = r'' * det A\n 2. \\<And>k A'' r''.\n       \\<lbrakk>\\<And>A'' r''.\n                   \\<lbrakk>sub1 q k l (r, A) = (r'', A'');\n                    l + k < n\\<rbrakk>\n                   \\<Longrightarrow> r * det A'' = r'' * det A;\n        sub1 q (Suc k) l (r, A) = (r'', A''); l + Suc k < n\\<rbrakk>\n       \\<Longrightarrow> r * det A'' = r'' * det A", "case 0"], ["proof (state)\nthis:\n  sub1 q 0 l (r, A) = (r'', A'')\n  l + 0 < n\n\ngoal (2 subgoals):\n 1. \\<And>A'' r''.\n       \\<lbrakk>sub1 q 0 l (r, A) = (r'', A''); l + 0 < n\\<rbrakk>\n       \\<Longrightarrow> r * det A'' = r'' * det A\n 2. \\<And>k A'' r''.\n       \\<lbrakk>\\<And>A'' r''.\n                   \\<lbrakk>sub1 q k l (r, A) = (r'', A'');\n                    l + k < n\\<rbrakk>\n                   \\<Longrightarrow> r * det A'' = r'' * det A;\n        sub1 q (Suc k) l (r, A) = (r'', A''); l + Suc k < n\\<rbrakk>\n       \\<Longrightarrow> r * det A'' = r'' * det A", "then"], ["proof (chain)\npicking this:\n  sub1 q 0 l (r, A) = (r'', A'')\n  l + 0 < n", "show ?case"], ["proof (prove)\nusing this:\n  sub1 q 0 l (r, A) = (r'', A'')\n  l + 0 < n\n\ngoal (1 subgoal):\n 1. r * det A'' = r'' * det A", "by auto"], ["proof (state)\nthis:\n  r * det A'' = r'' * det A\n\ngoal (1 subgoal):\n 1. \\<And>k A'' r''.\n       \\<lbrakk>\\<And>A'' r''.\n                   \\<lbrakk>sub1 q k l (r, A) = (r'', A'');\n                    l + k < n\\<rbrakk>\n                   \\<Longrightarrow> r * det A'' = r'' * det A;\n        sub1 q (Suc k) l (r, A) = (r'', A''); l + Suc k < n\\<rbrakk>\n       \\<Longrightarrow> r * det A'' = r'' * det A", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>k A'' r''.\n       \\<lbrakk>\\<And>A'' r''.\n                   \\<lbrakk>sub1 q k l (r, A) = (r'', A'');\n                    l + k < n\\<rbrakk>\n                   \\<Longrightarrow> r * det A'' = r'' * det A;\n        sub1 q (Suc k) l (r, A) = (r'', A''); l + Suc k < n\\<rbrakk>\n       \\<Longrightarrow> r * det A'' = r'' * det A", "case (Suc k)"], ["proof (state)\nthis:\n  \\<lbrakk>sub1 q k l (r, A) = (?r'', ?A''); l + k < n\\<rbrakk>\n  \\<Longrightarrow> r * det ?A'' = ?r'' * det A\n  sub1 q (Suc k) l (r, A) = (r'', A'')\n  l + Suc k < n\n\ngoal (1 subgoal):\n 1. \\<And>k A'' r''.\n       \\<lbrakk>\\<And>A'' r''.\n                   \\<lbrakk>sub1 q k l (r, A) = (r'', A'');\n                    l + k < n\\<rbrakk>\n                   \\<Longrightarrow> r * det A'' = r'' * det A;\n        sub1 q (Suc k) l (r, A) = (r'', A''); l + Suc k < n\\<rbrakk>\n       \\<Longrightarrow> r * det A'' = r'' * det A", "let ?rA' = \"sub1 q k l (r,A)\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>k A'' r''.\n       \\<lbrakk>\\<And>A'' r''.\n                   \\<lbrakk>sub1 q k l (r, A) = (r'', A'');\n                    l + k < n\\<rbrakk>\n                   \\<Longrightarrow> r * det A'' = r'' * det A;\n        sub1 q (Suc k) l (r, A) = (r'', A''); l + Suc k < n\\<rbrakk>\n       \\<Longrightarrow> r * det A'' = r'' * det A", "obtain r' A' where rA':\"?rA' = (r',A')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>r' A'.\n        sub1 q k l (r, A) = (r', A') \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by force"], ["proof (state)\nthis:\n  sub1 q k l (r, A) = (r', A')\n\ngoal (1 subgoal):\n 1. \\<And>k A'' r''.\n       \\<lbrakk>\\<And>A'' r''.\n                   \\<lbrakk>sub1 q k l (r, A) = (r'', A'');\n                    l + k < n\\<rbrakk>\n                   \\<Longrightarrow> r * det A'' = r'' * det A;\n        sub1 q (Suc k) l (r, A) = (r'', A''); l + Suc k < n\\<rbrakk>\n       \\<Longrightarrow> r * det A'' = r'' * det A", "have A':\"A' \\<in> carrier_mat n n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A' \\<in> carrier_mat n n", "using sub1_closed[OF rA'] A"], ["proof (prove)\nusing this:\n  A \\<in> carrier_mat ?m ?n \\<Longrightarrow> A' \\<in> carrier_mat ?m ?n\n  A \\<in> carrier_mat n n\n\ngoal (1 subgoal):\n 1. A' \\<in> carrier_mat n n", "by auto"], ["proof (state)\nthis:\n  A' \\<in> carrier_mat n n\n\ngoal (1 subgoal):\n 1. \\<And>k A'' r''.\n       \\<lbrakk>\\<And>A'' r''.\n                   \\<lbrakk>sub1 q k l (r, A) = (r'', A'');\n                    l + k < n\\<rbrakk>\n                   \\<Longrightarrow> r * det A'' = r'' * det A;\n        sub1 q (Suc k) l (r, A) = (r'', A''); l + Suc k < n\\<rbrakk>\n       \\<Longrightarrow> r * det A'' = r'' * det A", "have IH: \"r * det A' = r' * det A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. r * det A' = r' * det A", "using Suc assms rA'"], ["proof (prove)\nusing this:\n  \\<lbrakk>sub1 q k l (r, A) = (?r'', ?A''); l + k < n\\<rbrakk>\n  \\<Longrightarrow> r * det ?A'' = ?r'' * det A\n  sub1 q (Suc k) l (r, A) = (r'', A'')\n  l + Suc k < n\n  A \\<in> carrier_mat n n\n  sub1 q k l (r, A) = (r'', A'')\n  r \\<noteq> (0::'a)\n  q \\<noteq> (0::'a)\n  l + k < n\n  sub1 q k l (r, A) = (r', A')\n\ngoal (1 subgoal):\n 1. r * det A' = r' * det A", "by auto"], ["proof (state)\nthis:\n  r * det A' = r' * det A\n\ngoal (1 subgoal):\n 1. \\<And>k A'' r''.\n       \\<lbrakk>\\<And>A'' r''.\n                   \\<lbrakk>sub1 q k l (r, A) = (r'', A'');\n                    l + k < n\\<rbrakk>\n                   \\<Longrightarrow> r * det A'' = r'' * det A;\n        sub1 q (Suc k) l (r, A) = (r'', A''); l + Suc k < n\\<rbrakk>\n       \\<Longrightarrow> r * det A'' = r'' * det A", "assume \"sub1 q (Suc k) l (r,A) = (r'',A'')\""], ["proof (state)\nthis:\n  sub1 q (Suc k) l (r, A) = (r'', A'')\n\ngoal (1 subgoal):\n 1. \\<And>k A'' r''.\n       \\<lbrakk>\\<And>A'' r''.\n                   \\<lbrakk>sub1 q k l (r, A) = (r'', A'');\n                    l + k < n\\<rbrakk>\n                   \\<Longrightarrow> r * det A'' = r'' * det A;\n        sub1 q (Suc k) l (r, A) = (r'', A''); l + Suc k < n\\<rbrakk>\n       \\<Longrightarrow> r * det A'' = r'' * det A", "then"], ["proof (chain)\npicking this:\n  sub1 q (Suc k) l (r, A) = (r'', A'')", "have rA'':\"mute q (Suc (l+k)) l (r',A') = (r'',A'')\""], ["proof (prove)\nusing this:\n  sub1 q (Suc k) l (r, A) = (r'', A'')\n\ngoal (1 subgoal):\n 1. mute q (Suc (l + k)) l (r', A') = (r'', A'')", "using rA'"], ["proof (prove)\nusing this:\n  sub1 q (Suc k) l (r, A) = (r'', A'')\n  sub1 q k l (r, A) = (r', A')\n\ngoal (1 subgoal):\n 1. mute q (Suc (l + k)) l (r', A') = (r'', A'')", "by auto"], ["proof (state)\nthis:\n  mute q (Suc (l + k)) l (r', A') = (r'', A'')\n\ngoal (1 subgoal):\n 1. \\<And>k A'' r''.\n       \\<lbrakk>\\<And>A'' r''.\n                   \\<lbrakk>sub1 q k l (r, A) = (r'', A'');\n                    l + k < n\\<rbrakk>\n                   \\<Longrightarrow> r * det A'' = r'' * det A;\n        sub1 q (Suc k) l (r, A) = (r'', A''); l + Suc k < n\\<rbrakk>\n       \\<Longrightarrow> r * det A'' = r'' * det A", "hence lem: \"r' * det A'' = r'' * det A'\""], ["proof (prove)\nusing this:\n  mute q (Suc (l + k)) l (r', A') = (r'', A'')\n\ngoal (1 subgoal):\n 1. r' * det A'' = r'' * det A'", "using assms Suc A' mute_det[OF A' rA'']"], ["proof (prove)\nusing this:\n  mute q (Suc (l + k)) l (r', A') = (r'', A'')\n  A \\<in> carrier_mat n n\n  sub1 q k l (r, A) = (r'', A'')\n  r \\<noteq> (0::'a)\n  q \\<noteq> (0::'a)\n  l + k < n\n  \\<lbrakk>sub1 q k l (r, A) = (?r'', ?A''); l + k < n\\<rbrakk>\n  \\<Longrightarrow> r * det ?A'' = ?r'' * det A\n  sub1 q (Suc k) l (r, A) = (r'', A'')\n  l + Suc k < n\n  A' \\<in> carrier_mat n n\n  \\<lbrakk>Suc (l + k) < n; l < n; Suc (l + k) \\<noteq> l\\<rbrakk>\n  \\<Longrightarrow> r' * det A'' = r'' * det A'\n\ngoal (1 subgoal):\n 1. r' * det A'' = r'' * det A'", "by auto"], ["proof (state)\nthis:\n  r' * det A'' = r'' * det A'\n\ngoal (1 subgoal):\n 1. \\<And>k A'' r''.\n       \\<lbrakk>\\<And>A'' r''.\n                   \\<lbrakk>sub1 q k l (r, A) = (r'', A'');\n                    l + k < n\\<rbrakk>\n                   \\<Longrightarrow> r * det A'' = r'' * det A;\n        sub1 q (Suc k) l (r, A) = (r'', A''); l + Suc k < n\\<rbrakk>\n       \\<Longrightarrow> r * det A'' = r'' * det A", "hence \"r * r' * det A'' = r * r'' * det A'\""], ["proof (prove)\nusing this:\n  r' * det A'' = r'' * det A'\n\ngoal (1 subgoal):\n 1. r * r' * det A'' = r * r'' * det A'", "by auto"], ["proof (state)\nthis:\n  r * r' * det A'' = r * r'' * det A'\n\ngoal (1 subgoal):\n 1. \\<And>k A'' r''.\n       \\<lbrakk>\\<And>A'' r''.\n                   \\<lbrakk>sub1 q k l (r, A) = (r'', A'');\n                    l + k < n\\<rbrakk>\n                   \\<Longrightarrow> r * det A'' = r'' * det A;\n        sub1 q (Suc k) l (r, A) = (r'', A''); l + Suc k < n\\<rbrakk>\n       \\<Longrightarrow> r * det A'' = r'' * det A", "also"], ["proof (state)\nthis:\n  r * r' * det A'' = r * r'' * det A'\n\ngoal (1 subgoal):\n 1. \\<And>k A'' r''.\n       \\<lbrakk>\\<And>A'' r''.\n                   \\<lbrakk>sub1 q k l (r, A) = (r'', A'');\n                    l + k < n\\<rbrakk>\n                   \\<Longrightarrow> r * det A'' = r'' * det A;\n        sub1 q (Suc k) l (r, A) = (r'', A''); l + Suc k < n\\<rbrakk>\n       \\<Longrightarrow> r * det A'' = r'' * det A", "from IH"], ["proof (chain)\npicking this:\n  r * det A' = r' * det A", "have \"... = r'' * r' * det A\""], ["proof (prove)\nusing this:\n  r * det A' = r' * det A\n\ngoal (1 subgoal):\n 1. r * r'' * det A' = r'' * r' * det A", "by auto"], ["proof (state)\nthis:\n  r * r'' * det A' = r'' * r' * det A\n\ngoal (1 subgoal):\n 1. \\<And>k A'' r''.\n       \\<lbrakk>\\<And>A'' r''.\n                   \\<lbrakk>sub1 q k l (r, A) = (r'', A'');\n                    l + k < n\\<rbrakk>\n                   \\<Longrightarrow> r * det A'' = r'' * det A;\n        sub1 q (Suc k) l (r, A) = (r'', A''); l + Suc k < n\\<rbrakk>\n       \\<Longrightarrow> r * det A'' = r'' * det A", "finally"], ["proof (chain)\npicking this:\n  r * r' * det A'' = r'' * r' * det A", "have *: \"r * r' * det A'' = r'' * r' * det A\""], ["proof (prove)\nusing this:\n  r * r' * det A'' = r'' * r' * det A\n\ngoal (1 subgoal):\n 1. r * r' * det A'' = r'' * r' * det A", "."], ["proof (state)\nthis:\n  r * r' * det A'' = r'' * r' * det A\n\ngoal (1 subgoal):\n 1. \\<And>k A'' r''.\n       \\<lbrakk>\\<And>A'' r''.\n                   \\<lbrakk>sub1 q k l (r, A) = (r'', A'');\n                    l + k < n\\<rbrakk>\n                   \\<Longrightarrow> r * det A'' = r'' * det A;\n        sub1 q (Suc k) l (r, A) = (r'', A''); l + Suc k < n\\<rbrakk>\n       \\<Longrightarrow> r * det A'' = r'' * det A", "then"], ["proof (chain)\npicking this:\n  r * r' * det A'' = r'' * r' * det A", "have \"r * r' * det A'' div r' = r'' * r' * det A div r'\""], ["proof (prove)\nusing this:\n  r * r' * det A'' = r'' * r' * det A\n\ngoal (1 subgoal):\n 1. r * r' * det A'' div r' = r'' * r' * det A div r'", "by presburger"], ["proof (state)\nthis:\n  r * r' * det A'' div r' = r'' * r' * det A div r'\n\ngoal (1 subgoal):\n 1. \\<And>k A'' r''.\n       \\<lbrakk>\\<And>A'' r''.\n                   \\<lbrakk>sub1 q k l (r, A) = (r'', A'');\n                    l + k < n\\<rbrakk>\n                   \\<Longrightarrow> r * det A'' = r'' * det A;\n        sub1 q (Suc k) l (r, A) = (r'', A''); l + Suc k < n\\<rbrakk>\n       \\<Longrightarrow> r * det A'' = r'' * det A", "moreover"], ["proof (state)\nthis:\n  r * r' * det A'' div r' = r'' * r' * det A div r'\n\ngoal (1 subgoal):\n 1. \\<And>k A'' r''.\n       \\<lbrakk>\\<And>A'' r''.\n                   \\<lbrakk>sub1 q k l (r, A) = (r'', A'');\n                    l + k < n\\<rbrakk>\n                   \\<Longrightarrow> r * det A'' = r'' * det A;\n        sub1 q (Suc k) l (r, A) = (r'', A''); l + Suc k < n\\<rbrakk>\n       \\<Longrightarrow> r * det A'' = r'' * det A", "have \"r' \\<noteq> 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. r' \\<noteq> (0::'a)", "using r0 sub1_divisor[OF rA'] All0 Suc A"], ["proof (prove)\nusing this:\n  r \\<noteq> (0::'a)\n  \\<lbrakk>r \\<noteq> (0::'a); q \\<noteq> (0::'a); k + l < dim_row A;\n   l < dim_col A\\<rbrakk>\n  \\<Longrightarrow> r' \\<noteq> (0::'a)\n  q \\<noteq> (0::'a)\n  \\<lbrakk>sub1 q k l (r, A) = (?r'', ?A''); l + k < n\\<rbrakk>\n  \\<Longrightarrow> r * det ?A'' = ?r'' * det A\n  sub1 q (Suc k) l (r, A) = (r'', A'')\n  l + Suc k < n\n  A \\<in> carrier_mat n n\n\ngoal (1 subgoal):\n 1. r' \\<noteq> (0::'a)", "by auto"], ["proof (state)\nthis:\n  r' \\<noteq> (0::'a)\n\ngoal (1 subgoal):\n 1. \\<And>k A'' r''.\n       \\<lbrakk>\\<And>A'' r''.\n                   \\<lbrakk>sub1 q k l (r, A) = (r'', A'');\n                    l + k < n\\<rbrakk>\n                   \\<Longrightarrow> r * det A'' = r'' * det A;\n        sub1 q (Suc k) l (r, A) = (r'', A''); l + Suc k < n\\<rbrakk>\n       \\<Longrightarrow> r * det A'' = r'' * det A", "ultimately"], ["proof (chain)\npicking this:\n  r * r' * det A'' div r' = r'' * r' * det A div r'\n  r' \\<noteq> (0::'a)", "show ?case"], ["proof (prove)\nusing this:\n  r * r' * det A'' div r' = r'' * r' * det A div r'\n  r' \\<noteq> (0::'a)\n\ngoal (1 subgoal):\n 1. r * det A'' = r'' * det A", "using *"], ["proof (prove)\nusing this:\n  r * r' * det A'' div r' = r'' * r' * det A div r'\n  r' \\<noteq> (0::'a)\n  r * r' * det A'' = r'' * r' * det A\n\ngoal (1 subgoal):\n 1. r * det A'' = r'' * det A", "by auto"], ["proof (state)\nthis:\n  r * det A'' = r'' * det A\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma sub2_det:\n  assumes A: \"A \\<in> carrier_mat d d\"\n  and rA': \"sub2 d l (r,A) = (r',A')\"\n  and r0: \"r \\<noteq> 0\"\n  and ld: \"l < d\"\n  shows \"r * det A' = r' * det A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. r * det A' = r' * det A", "proof (cases \"find_non0 l A\")"], ["proof (state)\ngoal (2 subgoals):\n 1. find_non0 l A = None \\<Longrightarrow> r * det A' = r' * det A\n 2. \\<And>a.\n       find_non0 l A = Some a \\<Longrightarrow> r * det A' = r' * det A", "case None"], ["proof (state)\nthis:\n  find_non0 l A = None\n\ngoal (2 subgoals):\n 1. find_non0 l A = None \\<Longrightarrow> r * det A' = r' * det A\n 2. \\<And>a.\n       find_non0 l A = Some a \\<Longrightarrow> r * det A' = r' * det A", "then"], ["proof (chain)\npicking this:\n  find_non0 l A = None", "show ?thesis"], ["proof (prove)\nusing this:\n  find_non0 l A = None\n\ngoal (1 subgoal):\n 1. r * det A' = r' * det A", "using assms"], ["proof (prove)\nusing this:\n  find_non0 l A = None\n  A \\<in> carrier_mat d d\n  sub2 d l (r, A) = (r', A')\n  r \\<noteq> (0::'a)\n  l < d\n\ngoal (1 subgoal):\n 1. r * det A' = r' * det A", "by auto"], ["proof (state)\nthis:\n  r * det A' = r' * det A\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       find_non0 l A = Some a \\<Longrightarrow> r * det A' = r' * det A", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a.\n       find_non0 l A = Some a \\<Longrightarrow> r * det A' = r' * det A", "case (Some m)"], ["proof (state)\nthis:\n  find_non0 l A = Some m\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       find_non0 l A = Some a \\<Longrightarrow> r * det A' = r' * det A", "{"], ["proof (state)\nthis:\n  find_non0 l A = Some m\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       find_non0 l A = Some a \\<Longrightarrow> r * det A' = r' * det A", "then"], ["proof (chain)\npicking this:\n  find_non0 l A = Some m", "have lm: \"l < m\" and md: \"m < d\""], ["proof (prove)\nusing this:\n  find_non0 l A = Some m\n\ngoal (1 subgoal):\n 1. l < m &&& m < d", "using A find_non0[OF sel_fun Some] ld"], ["proof (prove)\nusing this:\n  find_non0 l A = Some m\n  A \\<in> carrier_mat d d\n  A $$ (m, l) \\<noteq> (0::'a)\n  l < m\n  m < dim_row A\n  l < d\n\ngoal (1 subgoal):\n 1. l < m &&& m < d", "by auto"], ["proof (state)\nthis:\n  l < m\n  m < d\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       find_non0 l A = Some a \\<Longrightarrow> r * det A' = r' * det A", "hence \"m \\<noteq> l\""], ["proof (prove)\nusing this:\n  l < m\n  m < d\n\ngoal (1 subgoal):\n 1. m \\<noteq> l", "by auto"], ["proof (state)\nthis:\n  m \\<noteq> l\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       find_non0 l A = Some a \\<Longrightarrow> r * det A' = r' * det A", "let ?A'' = \"swaprows m l A\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a.\n       find_non0 l A = Some a \\<Longrightarrow> r * det A' = r' * det A", "have rA'2: \"sub1 (?A'' $$ (l,l)) (d - Suc l) l (-r, ?A'') = (r',A')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sub1 (swaprows m l A $$ (l, l)) (d - Suc l) l (- r, swaprows m l A) =\n    (r', A')", "using rA' Some"], ["proof (prove)\nusing this:\n  sub2 d l (r, A) = (r', A')\n  find_non0 l A = Some m\n\ngoal (1 subgoal):\n 1. sub1 (swaprows m l A $$ (l, l)) (d - Suc l) l (- r, swaprows m l A) =\n    (r', A')", "by (simp add: Let_def)"], ["proof (state)\nthis:\n  sub1 (swaprows m l A $$ (l, l)) (d - Suc l) l (- r, swaprows m l A) =\n  (r', A')\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       find_non0 l A = Some a \\<Longrightarrow> r * det A' = r' * det A", "have A'': \"?A'' \\<in> carrier_mat d d\""], ["proof (prove)\ngoal (1 subgoal):\n 1. swaprows m l A \\<in> carrier_mat d d", "using A"], ["proof (prove)\nusing this:\n  A \\<in> carrier_mat d d\n\ngoal (1 subgoal):\n 1. swaprows m l A \\<in> carrier_mat d d", "by auto"], ["proof (state)\nthis:\n  swaprows m l A \\<in> carrier_mat d d\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       find_non0 l A = Some a \\<Longrightarrow> r * det A' = r' * det A", "hence A''ll0: \"?A'' $$ (l,l) \\<noteq> 0\""], ["proof (prove)\nusing this:\n  swaprows m l A \\<in> carrier_mat d d\n\ngoal (1 subgoal):\n 1. swaprows m l A $$ (l, l) \\<noteq> (0::'a)", "using find_non0[OF sel_fun Some] ld"], ["proof (prove)\nusing this:\n  swaprows m l A \\<in> carrier_mat d d\n  A $$ (m, l) \\<noteq> (0::'a)\n  l < m\n  m < dim_row A\n  l < d\n\ngoal (1 subgoal):\n 1. swaprows m l A $$ (l, l) \\<noteq> (0::'a)", "by auto"], ["proof (state)\nthis:\n  swaprows m l A $$ (l, l) \\<noteq> (0::'a)\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       find_non0 l A = Some a \\<Longrightarrow> r * det A' = r' * det A", "hence \"-r * det A' = r' * det ?A''\""], ["proof (prove)\nusing this:\n  swaprows m l A $$ (l, l) \\<noteq> (0::'a)\n\ngoal (1 subgoal):\n 1. - r * det A' = r' * det (swaprows m l A)", "using sub1_det[OF A'' rA'2] ld A r0"], ["proof (prove)\nusing this:\n  swaprows m l A $$ (l, l) \\<noteq> (0::'a)\n  \\<lbrakk>- r \\<noteq> (0::'a); swaprows m l A $$ (l, l) \\<noteq> (0::'a);\n   l + (d - Suc l) < d\\<rbrakk>\n  \\<Longrightarrow> - r * det A' = r' * det (swaprows m l A)\n  l < d\n  A \\<in> carrier_mat d d\n  r \\<noteq> (0::'a)\n\ngoal (1 subgoal):\n 1. - r * det A' = r' * det (swaprows m l A)", "by auto"], ["proof (state)\nthis:\n  - r * det A' = r' * det (swaprows m l A)\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       find_non0 l A = Some a \\<Longrightarrow> r * det A' = r' * det A", "also"], ["proof (state)\nthis:\n  - r * det A' = r' * det (swaprows m l A)\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       find_non0 l A = Some a \\<Longrightarrow> r * det A' = r' * det A", "have \"r * ... = -r * r' * det A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. r * (r' * det (swaprows m l A)) = - r * r' * det A", "using det_swaprows[OF md ld \\<open>m\\<noteq>l\\<close> A]"], ["proof (prove)\nusing this:\n  det (swaprows m l A) = - det A\n\ngoal (1 subgoal):\n 1. r * (r' * det (swaprows m l A)) = - r * r' * det A", "by auto"], ["proof (state)\nthis:\n  r * (r' * det (swaprows m l A)) = - r * r' * det A\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       find_non0 l A = Some a \\<Longrightarrow> r * det A' = r' * det A", "finally"], ["proof (chain)\npicking this:\n  r * (- r * det A') = - r * r' * det A", "have \"r * -r * det A' = -r * r' * det A\""], ["proof (prove)\nusing this:\n  r * (- r * det A') = - r * r' * det A\n\ngoal (1 subgoal):\n 1. r * - r * det A' = - r * r' * det A", "by auto"], ["proof (state)\nthis:\n  r * - r * det A' = - r * r' * det A\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       find_non0 l A = Some a \\<Longrightarrow> r * det A' = r' * det A", "thus ?thesis"], ["proof (prove)\nusing this:\n  r * - r * det A' = - r * r' * det A\n\ngoal (1 subgoal):\n 1. r * det A' = r' * det A", "using r0"], ["proof (prove)\nusing this:\n  r * - r * det A' = - r * r' * det A\n  r \\<noteq> (0::'a)\n\ngoal (1 subgoal):\n 1. r * det A' = r' * det A", "by auto"], ["proof (state)\nthis:\n  r * det A' = r' * det A\n\ngoal:\nNo subgoals!", "}"], ["proof (state)\nthis:\n  r * det A' = r' * det A\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma sub3_det:\n  assumes A:\"A \\<in> carrier_mat d d\"\n  and \"sub3 d l (r,A) = (r'',A'')\"\n  and r0: \"r \\<noteq> 0\"\n  and \"l \\<le> d\"\n  shows \"r * det A'' = r'' * det A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. r * det A'' = r'' * det A", "using assms"], ["proof (prove)\nusing this:\n  A \\<in> carrier_mat d d\n  sub3 d l (r, A) = (r'', A'')\n  r \\<noteq> (0::'a)\n  l \\<le> d\n\ngoal (1 subgoal):\n 1. r * det A'' = r'' * det A", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>A \\<in> carrier_mat d d; sub3 d l (r, A) = (r'', A'');\n     r \\<noteq> (0::'a); l \\<le> d\\<rbrakk>\n    \\<Longrightarrow> r * det A'' = r'' * det A", "have d: \"d = dim_row A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. d = dim_row A", "using A"], ["proof (prove)\nusing this:\n  A \\<in> carrier_mat d d\n\ngoal (1 subgoal):\n 1. d = dim_row A", "by auto"], ["proof (state)\nthis:\n  d = dim_row A\n\ngoal (1 subgoal):\n 1. \\<lbrakk>A \\<in> carrier_mat d d; sub3 d l (r, A) = (r'', A'');\n     r \\<noteq> (0::'a); l \\<le> d\\<rbrakk>\n    \\<Longrightarrow> r * det A'' = r'' * det A", "show \"sub3 d l (r,A) = (r'',A'') \\<Longrightarrow> l \\<le> d \\<Longrightarrow> r * det A'' = r'' * det A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>sub3 d l (r, A) = (r'', A''); l \\<le> d\\<rbrakk>\n    \\<Longrightarrow> r * det A'' = r'' * det A", "proof (induction l arbitrary: r'' A'')"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>r'' A''.\n       \\<lbrakk>sub3 d 0 (r, A) = (r'', A''); 0 \\<le> d\\<rbrakk>\n       \\<Longrightarrow> r * det A'' = r'' * det A\n 2. \\<And>l r'' A''.\n       \\<lbrakk>\\<And>r'' A''.\n                   \\<lbrakk>sub3 d l (r, A) = (r'', A''); l \\<le> d\\<rbrakk>\n                   \\<Longrightarrow> r * det A'' = r'' * det A;\n        sub3 d (Suc l) (r, A) = (r'', A''); Suc l \\<le> d\\<rbrakk>\n       \\<Longrightarrow> r * det A'' = r'' * det A", "case (Suc l)"], ["proof (state)\nthis:\n  \\<lbrakk>sub3 d l (r, A) = (?r'', ?A''); l \\<le> d\\<rbrakk>\n  \\<Longrightarrow> r * det ?A'' = ?r'' * det A\n  sub3 d (Suc l) (r, A) = (r'', A'')\n  Suc l \\<le> d\n\ngoal (2 subgoals):\n 1. \\<And>r'' A''.\n       \\<lbrakk>sub3 d 0 (r, A) = (r'', A''); 0 \\<le> d\\<rbrakk>\n       \\<Longrightarrow> r * det A'' = r'' * det A\n 2. \\<And>l r'' A''.\n       \\<lbrakk>\\<And>r'' A''.\n                   \\<lbrakk>sub3 d l (r, A) = (r'', A''); l \\<le> d\\<rbrakk>\n                   \\<Longrightarrow> r * det A'' = r'' * det A;\n        sub3 d (Suc l) (r, A) = (r'', A''); Suc l \\<le> d\\<rbrakk>\n       \\<Longrightarrow> r * det A'' = r'' * det A", "let ?rA' = \"sub3 d l (r,A)\""], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>r'' A''.\n       \\<lbrakk>sub3 d 0 (r, A) = (r'', A''); 0 \\<le> d\\<rbrakk>\n       \\<Longrightarrow> r * det A'' = r'' * det A\n 2. \\<And>l r'' A''.\n       \\<lbrakk>\\<And>r'' A''.\n                   \\<lbrakk>sub3 d l (r, A) = (r'', A''); l \\<le> d\\<rbrakk>\n                   \\<Longrightarrow> r * det A'' = r'' * det A;\n        sub3 d (Suc l) (r, A) = (r'', A''); Suc l \\<le> d\\<rbrakk>\n       \\<Longrightarrow> r * det A'' = r'' * det A", "obtain r' A' where rA':\"?rA' = (r',A')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>r' A'.\n        sub3 d l (r, A) = (r', A') \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by force"], ["proof (state)\nthis:\n  sub3 d l (r, A) = (r', A')\n\ngoal (2 subgoals):\n 1. \\<And>r'' A''.\n       \\<lbrakk>sub3 d 0 (r, A) = (r'', A''); 0 \\<le> d\\<rbrakk>\n       \\<Longrightarrow> r * det A'' = r'' * det A\n 2. \\<And>l r'' A''.\n       \\<lbrakk>\\<And>r'' A''.\n                   \\<lbrakk>sub3 d l (r, A) = (r'', A''); l \\<le> d\\<rbrakk>\n                   \\<Longrightarrow> r * det A'' = r'' * det A;\n        sub3 d (Suc l) (r, A) = (r'', A''); Suc l \\<le> d\\<rbrakk>\n       \\<Longrightarrow> r * det A'' = r'' * det A", "then"], ["proof (chain)\npicking this:\n  sub3 d l (r, A) = (r', A')", "have rA'': \"sub2 d l (r',A') = (r'',A'')\""], ["proof (prove)\nusing this:\n  sub3 d l (r, A) = (r', A')\n\ngoal (1 subgoal):\n 1. sub2 d l (r', A') = (r'', A'')", "using Suc"], ["proof (prove)\nusing this:\n  sub3 d l (r, A) = (r', A')\n  \\<lbrakk>sub3 d l (r, A) = (?r'', ?A''); l \\<le> d\\<rbrakk>\n  \\<Longrightarrow> r * det ?A'' = ?r'' * det A\n  sub3 d (Suc l) (r, A) = (r'', A'')\n  Suc l \\<le> d\n\ngoal (1 subgoal):\n 1. sub2 d l (r', A') = (r'', A'')", "by auto"], ["proof (state)\nthis:\n  sub2 d l (r', A') = (r'', A'')\n\ngoal (2 subgoals):\n 1. \\<And>r'' A''.\n       \\<lbrakk>sub3 d 0 (r, A) = (r'', A''); 0 \\<le> d\\<rbrakk>\n       \\<Longrightarrow> r * det A'' = r'' * det A\n 2. \\<And>l r'' A''.\n       \\<lbrakk>\\<And>r'' A''.\n                   \\<lbrakk>sub3 d l (r, A) = (r'', A''); l \\<le> d\\<rbrakk>\n                   \\<Longrightarrow> r * det A'' = r'' * det A;\n        sub3 d (Suc l) (r, A) = (r'', A''); Suc l \\<le> d\\<rbrakk>\n       \\<Longrightarrow> r * det A'' = r'' * det A", "have A': \"A' \\<in> carrier_mat d d\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A' \\<in> carrier_mat d d", "using A rA' rA''"], ["proof (prove)\nusing this:\n  A \\<in> carrier_mat d d\n  sub3 d l (r, A) = (r', A')\n  sub2 d l (r', A') = (r'', A'')\n\ngoal (1 subgoal):\n 1. A' \\<in> carrier_mat d d", "by auto"], ["proof (state)\nthis:\n  A' \\<in> carrier_mat d d\n\ngoal (2 subgoals):\n 1. \\<And>r'' A''.\n       \\<lbrakk>sub3 d 0 (r, A) = (r'', A''); 0 \\<le> d\\<rbrakk>\n       \\<Longrightarrow> r * det A'' = r'' * det A\n 2. \\<And>l r'' A''.\n       \\<lbrakk>\\<And>r'' A''.\n                   \\<lbrakk>sub3 d l (r, A) = (r'', A''); l \\<le> d\\<rbrakk>\n                   \\<Longrightarrow> r * det A'' = r'' * det A;\n        sub3 d (Suc l) (r, A) = (r'', A''); Suc l \\<le> d\\<rbrakk>\n       \\<Longrightarrow> r * det A'' = r'' * det A", "have r'0: \"r' \\<noteq> 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. r' \\<noteq> (0::'a)", "using r0 sub3_divisor[OF rA'] A Suc"], ["proof (prove)\nusing this:\n  r \\<noteq> (0::'a)\n  \\<lbrakk>l \\<le> d; d \\<le> dim_row A; l \\<le> dim_col A;\n   r \\<noteq> (0::'a)\\<rbrakk>\n  \\<Longrightarrow> r' \\<noteq> (0::'a)\n  A \\<in> carrier_mat d d\n  \\<lbrakk>sub3 d l (r, A) = (?r'', ?A''); l \\<le> d\\<rbrakk>\n  \\<Longrightarrow> r * det ?A'' = ?r'' * det A\n  sub3 d (Suc l) (r, A) = (r'', A'')\n  Suc l \\<le> d\n\ngoal (1 subgoal):\n 1. r' \\<noteq> (0::'a)", "by auto"], ["proof (state)\nthis:\n  r' \\<noteq> (0::'a)\n\ngoal (2 subgoals):\n 1. \\<And>r'' A''.\n       \\<lbrakk>sub3 d 0 (r, A) = (r'', A''); 0 \\<le> d\\<rbrakk>\n       \\<Longrightarrow> r * det A'' = r'' * det A\n 2. \\<And>l r'' A''.\n       \\<lbrakk>\\<And>r'' A''.\n                   \\<lbrakk>sub3 d l (r, A) = (r'', A''); l \\<le> d\\<rbrakk>\n                   \\<Longrightarrow> r * det A'' = r'' * det A;\n        sub3 d (Suc l) (r, A) = (r'', A''); Suc l \\<le> d\\<rbrakk>\n       \\<Longrightarrow> r * det A'' = r'' * det A", "have \"r' * det A'' = r'' * det A'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. r' * det A'' = r'' * det A'", "using Suc r'0 A"], ["proof (prove)\nusing this:\n  \\<lbrakk>sub3 d l (r, A) = (?r'', ?A''); l \\<le> d\\<rbrakk>\n  \\<Longrightarrow> r * det ?A'' = ?r'' * det A\n  sub3 d (Suc l) (r, A) = (r'', A'')\n  Suc l \\<le> d\n  r' \\<noteq> (0::'a)\n  A \\<in> carrier_mat d d\n\ngoal (1 subgoal):\n 1. r' * det A'' = r'' * det A'", "by(subst sub2_det[OF A' rA''],auto)"], ["proof (state)\nthis:\n  r' * det A'' = r'' * det A'\n\ngoal (2 subgoals):\n 1. \\<And>r'' A''.\n       \\<lbrakk>sub3 d 0 (r, A) = (r'', A''); 0 \\<le> d\\<rbrakk>\n       \\<Longrightarrow> r * det A'' = r'' * det A\n 2. \\<And>l r'' A''.\n       \\<lbrakk>\\<And>r'' A''.\n                   \\<lbrakk>sub3 d l (r, A) = (r'', A''); l \\<le> d\\<rbrakk>\n                   \\<Longrightarrow> r * det A'' = r'' * det A;\n        sub3 d (Suc l) (r, A) = (r'', A''); Suc l \\<le> d\\<rbrakk>\n       \\<Longrightarrow> r * det A'' = r'' * det A", "also"], ["proof (state)\nthis:\n  r' * det A'' = r'' * det A'\n\ngoal (2 subgoals):\n 1. \\<And>r'' A''.\n       \\<lbrakk>sub3 d 0 (r, A) = (r'', A''); 0 \\<le> d\\<rbrakk>\n       \\<Longrightarrow> r * det A'' = r'' * det A\n 2. \\<And>l r'' A''.\n       \\<lbrakk>\\<And>r'' A''.\n                   \\<lbrakk>sub3 d l (r, A) = (r'', A''); l \\<le> d\\<rbrakk>\n                   \\<Longrightarrow> r * det A'' = r'' * det A;\n        sub3 d (Suc l) (r, A) = (r'', A''); Suc l \\<le> d\\<rbrakk>\n       \\<Longrightarrow> r * det A'' = r'' * det A", "have \"r * ... = r'' * (r * det A')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. r * (r'' * det A') = r'' * (r * det A')", "by auto"], ["proof (state)\nthis:\n  r * (r'' * det A') = r'' * (r * det A')\n\ngoal (2 subgoals):\n 1. \\<And>r'' A''.\n       \\<lbrakk>sub3 d 0 (r, A) = (r'', A''); 0 \\<le> d\\<rbrakk>\n       \\<Longrightarrow> r * det A'' = r'' * det A\n 2. \\<And>l r'' A''.\n       \\<lbrakk>\\<And>r'' A''.\n                   \\<lbrakk>sub3 d l (r, A) = (r'', A''); l \\<le> d\\<rbrakk>\n                   \\<Longrightarrow> r * det A'' = r'' * det A;\n        sub3 d (Suc l) (r, A) = (r'', A''); Suc l \\<le> d\\<rbrakk>\n       \\<Longrightarrow> r * det A'' = r'' * det A", "also"], ["proof (state)\nthis:\n  r * (r'' * det A') = r'' * (r * det A')\n\ngoal (2 subgoals):\n 1. \\<And>r'' A''.\n       \\<lbrakk>sub3 d 0 (r, A) = (r'', A''); 0 \\<le> d\\<rbrakk>\n       \\<Longrightarrow> r * det A'' = r'' * det A\n 2. \\<And>l r'' A''.\n       \\<lbrakk>\\<And>r'' A''.\n                   \\<lbrakk>sub3 d l (r, A) = (r'', A''); l \\<le> d\\<rbrakk>\n                   \\<Longrightarrow> r * det A'' = r'' * det A;\n        sub3 d (Suc l) (r, A) = (r'', A''); Suc l \\<le> d\\<rbrakk>\n       \\<Longrightarrow> r * det A'' = r'' * det A", "have \"r * det A' = r' * det A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. r * det A' = r' * det A", "using Suc rA'"], ["proof (prove)\nusing this:\n  \\<lbrakk>sub3 d l (r, A) = (?r'', ?A''); l \\<le> d\\<rbrakk>\n  \\<Longrightarrow> r * det ?A'' = ?r'' * det A\n  sub3 d (Suc l) (r, A) = (r'', A'')\n  Suc l \\<le> d\n  sub3 d l (r, A) = (r', A')\n\ngoal (1 subgoal):\n 1. r * det A' = r' * det A", "by auto"], ["proof (state)\nthis:\n  r * det A' = r' * det A\n\ngoal (2 subgoals):\n 1. \\<And>r'' A''.\n       \\<lbrakk>sub3 d 0 (r, A) = (r'', A''); 0 \\<le> d\\<rbrakk>\n       \\<Longrightarrow> r * det A'' = r'' * det A\n 2. \\<And>l r'' A''.\n       \\<lbrakk>\\<And>r'' A''.\n                   \\<lbrakk>sub3 d l (r, A) = (r'', A''); l \\<le> d\\<rbrakk>\n                   \\<Longrightarrow> r * det A'' = r'' * det A;\n        sub3 d (Suc l) (r, A) = (r'', A''); Suc l \\<le> d\\<rbrakk>\n       \\<Longrightarrow> r * det A'' = r'' * det A", "also"], ["proof (state)\nthis:\n  r * det A' = r' * det A\n\ngoal (2 subgoals):\n 1. \\<And>r'' A''.\n       \\<lbrakk>sub3 d 0 (r, A) = (r'', A''); 0 \\<le> d\\<rbrakk>\n       \\<Longrightarrow> r * det A'' = r'' * det A\n 2. \\<And>l r'' A''.\n       \\<lbrakk>\\<And>r'' A''.\n                   \\<lbrakk>sub3 d l (r, A) = (r'', A''); l \\<le> d\\<rbrakk>\n                   \\<Longrightarrow> r * det A'' = r'' * det A;\n        sub3 d (Suc l) (r, A) = (r'', A''); Suc l \\<le> d\\<rbrakk>\n       \\<Longrightarrow> r * det A'' = r'' * det A", "have \"r'' * ... div r' = r'' * r' * det A div r'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. r'' * (r' * det A) div r' = r'' * r' * det A div r'", "by (simp add: ac_simps)"], ["proof (state)\nthis:\n  r'' * (r' * det A) div r' = r'' * r' * det A div r'\n\ngoal (2 subgoals):\n 1. \\<And>r'' A''.\n       \\<lbrakk>sub3 d 0 (r, A) = (r'', A''); 0 \\<le> d\\<rbrakk>\n       \\<Longrightarrow> r * det A'' = r'' * det A\n 2. \\<And>l r'' A''.\n       \\<lbrakk>\\<And>r'' A''.\n                   \\<lbrakk>sub3 d l (r, A) = (r'', A''); l \\<le> d\\<rbrakk>\n                   \\<Longrightarrow> r * det A'' = r'' * det A;\n        sub3 d (Suc l) (r, A) = (r'', A''); Suc l \\<le> d\\<rbrakk>\n       \\<Longrightarrow> r * det A'' = r'' * det A", "finally"], ["proof (chain)\npicking this:\n  r * (r' * det A'') div r' = r'' * r' * det A div r'", "show \"r * det A'' = r'' * det A\""], ["proof (prove)\nusing this:\n  r * (r' * det A'') div r' = r'' * r' * det A div r'\n\ngoal (1 subgoal):\n 1. r * det A'' = r'' * det A", "using r'0"], ["proof (prove)\nusing this:\n  r * (r' * det A'') div r' = r'' * r' * det A div r'\n  r' \\<noteq> (0::'a)\n\ngoal (1 subgoal):\n 1. r * det A'' = r'' * det A", "by (metis \\<open>r * det A' = r' * det A\\<close> \\<open>r' * det A'' = r'' * det A'\\<close> \n          mult.left_commute mult_cancel_left)"], ["proof (state)\nthis:\n  r * det A'' = r'' * det A\n\ngoal (1 subgoal):\n 1. \\<And>r'' A''.\n       \\<lbrakk>sub3 d 0 (r, A) = (r'', A''); 0 \\<le> d\\<rbrakk>\n       \\<Longrightarrow> r * det A'' = r'' * det A", "qed simp"], ["proof (state)\nthis:\n  \\<lbrakk>sub3 d l (r, A) = (r'', A''); l \\<le> d\\<rbrakk>\n  \\<Longrightarrow> r * det A'' = r'' * det A\n\ngoal:\nNo subgoals!", "qed"], ["", "theorem triangulize_det:\n  assumes A: \"A \\<in> carrier_mat d d\"\n  and rA': \"triangulize A = (r',A')\"\n  shows \"det A * r' = det A'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. det A * r' = det A'", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. det A * r' = det A'", "have rA'2: \"sub3 d d (1,A) = (r',A')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sub3 d d (1::'a, A) = (r', A')", "using A rA'"], ["proof (prove)\nusing this:\n  A \\<in> carrier_mat d d\n  local.triangulize A = (r', A')\n\ngoal (1 subgoal):\n 1. sub3 d d (1::'a, A) = (r', A')", "unfolding triangulize_def"], ["proof (prove)\nusing this:\n  A \\<in> carrier_mat d d\n  sub3 (dim_row A) (dim_row A) (1::'a, A) = (r', A')\n\ngoal (1 subgoal):\n 1. sub3 d d (1::'a, A) = (r', A')", "by auto"], ["proof (state)\nthis:\n  sub3 d d (1::'a, A) = (r', A')\n\ngoal (1 subgoal):\n 1. det A * r' = det A'", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. det A * r' = det A'", "proof (cases \"d = 0\")"], ["proof (state)\ngoal (2 subgoals):\n 1. d = 0 \\<Longrightarrow> det A * r' = det A'\n 2. d \\<noteq> 0 \\<Longrightarrow> det A * r' = det A'", "case True"], ["proof (state)\nthis:\n  d = 0\n\ngoal (2 subgoals):\n 1. d = 0 \\<Longrightarrow> det A * r' = det A'\n 2. d \\<noteq> 0 \\<Longrightarrow> det A * r' = det A'", "then"], ["proof (chain)\npicking this:\n  d = 0", "have A': \"A' \\<in> carrier_mat 0 0\""], ["proof (prove)\nusing this:\n  d = 0\n\ngoal (1 subgoal):\n 1. A' \\<in> carrier_mat 0 0", "using A rA'2"], ["proof (prove)\nusing this:\n  d = 0\n  A \\<in> carrier_mat d d\n  sub3 d d (1::'a, A) = (r', A')\n\ngoal (1 subgoal):\n 1. A' \\<in> carrier_mat 0 0", "by auto"], ["proof (state)\nthis:\n  A' \\<in> carrier_mat 0 0\n\ngoal (2 subgoals):\n 1. d = 0 \\<Longrightarrow> det A * r' = det A'\n 2. d \\<noteq> 0 \\<Longrightarrow> det A * r' = det A'", "have rA'3: \"(r',A') = (1,A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (r', A') = (1::'a, A)", "using True rA'2"], ["proof (prove)\nusing this:\n  d = 0\n  sub3 d d (1::'a, A) = (r', A')\n\ngoal (1 subgoal):\n 1. (r', A') = (1::'a, A)", "by simp"], ["proof (state)\nthis:\n  (r', A') = (1::'a, A)\n\ngoal (2 subgoals):\n 1. d = 0 \\<Longrightarrow> det A * r' = det A'\n 2. d \\<noteq> 0 \\<Longrightarrow> det A * r' = det A'", "thus ?thesis"], ["proof (prove)\nusing this:\n  (r', A') = (1::'a, A)\n\ngoal (1 subgoal):\n 1. det A * r' = det A'", "by auto"], ["proof (state)\nthis:\n  det A * r' = det A'\n\ngoal (1 subgoal):\n 1. d \\<noteq> 0 \\<Longrightarrow> det A * r' = det A'", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. d \\<noteq> 0 \\<Longrightarrow> det A * r' = det A'", "case False"], ["proof (state)\nthis:\n  d \\<noteq> 0\n\ngoal (1 subgoal):\n 1. d \\<noteq> 0 \\<Longrightarrow> det A * r' = det A'", "then"], ["proof (chain)\npicking this:\n  d \\<noteq> 0", "show ?thesis"], ["proof (prove)\nusing this:\n  d \\<noteq> 0\n\ngoal (1 subgoal):\n 1. det A * r' = det A'", "using sub3_det[OF A rA'2] assms"], ["proof (prove)\nusing this:\n  d \\<noteq> 0\n  \\<lbrakk>(1::'a) \\<noteq> (0::'a); d \\<le> d\\<rbrakk>\n  \\<Longrightarrow> (1::'a) * det A' = r' * det A\n  A \\<in> carrier_mat d d\n  local.triangulize A = (r', A')\n\ngoal (1 subgoal):\n 1. det A * r' = det A'", "by auto"], ["proof (state)\nthis:\n  det A * r' = det A'\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  det A * r' = det A'\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "subsection \\<open>Determinant Computation\\<close>"], ["", "definition det_code :: \"'a mat \\<Rightarrow> 'a\" where\n  \"det_code A = (if dim_row A = dim_col A then\n     case triangulize A of (m,A') \\<Rightarrow>\n       prod_list (diag_mat A') div m\n   else 0)\""], ["", "lemma det_code[simp]: assumes sel_fun: \"det_selection_fun sel_fun\"\n  and mf: \"mute_fun mf\"\n  shows \"det_code A = det A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. local.det_code A = det A", "using det_code_def[simp]"], ["proof (prove)\nusing this:\n  local.det_code ?A =\n  (if dim_row ?A = dim_col ?A\n   then case local.triangulize ?A of\n        (m, A') \\<Rightarrow> prod_list (diag_mat A') div m\n   else (0::'a))\n\ngoal (1 subgoal):\n 1. local.det_code A = det A", "proof (cases \"dim_row A = dim_col A\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>A.\n                local.det_code A =\n                (if dim_row A = dim_col A\n                 then case local.triangulize A of\n                      (m, A') \\<Rightarrow> prod_list (diag_mat A') div m\n                 else (0::'a));\n     dim_row A = dim_col A\\<rbrakk>\n    \\<Longrightarrow> local.det_code A = det A\n 2. \\<lbrakk>\\<And>A.\n                local.det_code A =\n                (if dim_row A = dim_col A\n                 then case local.triangulize A of\n                      (m, A') \\<Rightarrow> prod_list (diag_mat A') div m\n                 else (0::'a));\n     dim_row A \\<noteq> dim_col A\\<rbrakk>\n    \\<Longrightarrow> local.det_code A = det A", "case True"], ["proof (state)\nthis:\n  dim_row A = dim_col A\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>A.\n                local.det_code A =\n                (if dim_row A = dim_col A\n                 then case local.triangulize A of\n                      (m, A') \\<Rightarrow> prod_list (diag_mat A') div m\n                 else (0::'a));\n     dim_row A = dim_col A\\<rbrakk>\n    \\<Longrightarrow> local.det_code A = det A\n 2. \\<lbrakk>\\<And>A.\n                local.det_code A =\n                (if dim_row A = dim_col A\n                 then case local.triangulize A of\n                      (m, A') \\<Rightarrow> prod_list (diag_mat A') div m\n                 else (0::'a));\n     dim_row A \\<noteq> dim_col A\\<rbrakk>\n    \\<Longrightarrow> local.det_code A = det A", "then"], ["proof (chain)\npicking this:\n  dim_row A = dim_col A", "have A: \"A \\<in> carrier_mat (dim_row A) (dim_row A)\""], ["proof (prove)\nusing this:\n  dim_row A = dim_col A\n\ngoal (1 subgoal):\n 1. A \\<in> carrier_mat (dim_row A) (dim_row A)", "unfolding carrier_mat_def"], ["proof (prove)\nusing this:\n  dim_row A = dim_col A\n\ngoal (1 subgoal):\n 1. A \\<in> {m. dim_row m = dim_row A \\<and> dim_col m = dim_row A}", "by auto"], ["proof (state)\nthis:\n  A \\<in> carrier_mat (dim_row A) (dim_row A)\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>A.\n                local.det_code A =\n                (if dim_row A = dim_col A\n                 then case local.triangulize A of\n                      (m, A') \\<Rightarrow> prod_list (diag_mat A') div m\n                 else (0::'a));\n     dim_row A = dim_col A\\<rbrakk>\n    \\<Longrightarrow> local.det_code A = det A\n 2. \\<lbrakk>\\<And>A.\n                local.det_code A =\n                (if dim_row A = dim_col A\n                 then case local.triangulize A of\n                      (m, A') \\<Rightarrow> prod_list (diag_mat A') div m\n                 else (0::'a));\n     dim_row A \\<noteq> dim_col A\\<rbrakk>\n    \\<Longrightarrow> local.det_code A = det A", "obtain r' A' where rA': \"triangulize A = (r',A')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>r' A'.\n        local.triangulize A = (r', A') \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by force"], ["proof (state)\nthis:\n  local.triangulize A = (r', A')\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>A.\n                local.det_code A =\n                (if dim_row A = dim_col A\n                 then case local.triangulize A of\n                      (m, A') \\<Rightarrow> prod_list (diag_mat A') div m\n                 else (0::'a));\n     dim_row A = dim_col A\\<rbrakk>\n    \\<Longrightarrow> local.det_code A = det A\n 2. \\<lbrakk>\\<And>A.\n                local.det_code A =\n                (if dim_row A = dim_col A\n                 then case local.triangulize A of\n                      (m, A') \\<Rightarrow> prod_list (diag_mat A') div m\n                 else (0::'a));\n     dim_row A \\<noteq> dim_col A\\<rbrakk>\n    \\<Longrightarrow> local.det_code A = det A", "from triangulize_divisor[OF mf sel_fun A] rA'"], ["proof (chain)\npicking this:\n  local.triangulize A = (?r', ?A') \\<Longrightarrow> ?r' \\<noteq> (0::'a)\n  local.triangulize A = (r', A')", "have r'0: \"r' \\<noteq> 0\""], ["proof (prove)\nusing this:\n  local.triangulize A = (?r', ?A') \\<Longrightarrow> ?r' \\<noteq> (0::'a)\n  local.triangulize A = (r', A')\n\ngoal (1 subgoal):\n 1. r' \\<noteq> (0::'a)", "by auto"], ["proof (state)\nthis:\n  r' \\<noteq> (0::'a)\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>A.\n                local.det_code A =\n                (if dim_row A = dim_col A\n                 then case local.triangulize A of\n                      (m, A') \\<Rightarrow> prod_list (diag_mat A') div m\n                 else (0::'a));\n     dim_row A = dim_col A\\<rbrakk>\n    \\<Longrightarrow> local.det_code A = det A\n 2. \\<lbrakk>\\<And>A.\n                local.det_code A =\n                (if dim_row A = dim_col A\n                 then case local.triangulize A of\n                      (m, A') \\<Rightarrow> prod_list (diag_mat A') div m\n                 else (0::'a));\n     dim_row A \\<noteq> dim_col A\\<rbrakk>\n    \\<Longrightarrow> local.det_code A = det A", "from triangulize_det[OF mf sel_fun A rA']"], ["proof (chain)\npicking this:\n  det A * r' = det A'", "have det': \"det A * r' = det A'\""], ["proof (prove)\nusing this:\n  det A * r' = det A'\n\ngoal (1 subgoal):\n 1. det A * r' = det A'", "by auto"], ["proof (state)\nthis:\n  det A * r' = det A'\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>A.\n                local.det_code A =\n                (if dim_row A = dim_col A\n                 then case local.triangulize A of\n                      (m, A') \\<Rightarrow> prod_list (diag_mat A') div m\n                 else (0::'a));\n     dim_row A = dim_col A\\<rbrakk>\n    \\<Longrightarrow> local.det_code A = det A\n 2. \\<lbrakk>\\<And>A.\n                local.det_code A =\n                (if dim_row A = dim_col A\n                 then case local.triangulize A of\n                      (m, A') \\<Rightarrow> prod_list (diag_mat A') div m\n                 else (0::'a));\n     dim_row A \\<noteq> dim_col A\\<rbrakk>\n    \\<Longrightarrow> local.det_code A = det A", "from triangulized[OF mf sel_fun A, unfolded rA']"], ["proof (chain)\npicking this:\n  (r', A') = (?r', ?A') \\<Longrightarrow> upper_triangular ?A'", "have tri': \"upper_triangular A'\""], ["proof (prove)\nusing this:\n  (r', A') = (?r', ?A') \\<Longrightarrow> upper_triangular ?A'\n\ngoal (1 subgoal):\n 1. upper_triangular A'", "by simp"], ["proof (state)\nthis:\n  upper_triangular A'\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>A.\n                local.det_code A =\n                (if dim_row A = dim_col A\n                 then case local.triangulize A of\n                      (m, A') \\<Rightarrow> prod_list (diag_mat A') div m\n                 else (0::'a));\n     dim_row A = dim_col A\\<rbrakk>\n    \\<Longrightarrow> local.det_code A = det A\n 2. \\<lbrakk>\\<And>A.\n                local.det_code A =\n                (if dim_row A = dim_col A\n                 then case local.triangulize A of\n                      (m, A') \\<Rightarrow> prod_list (diag_mat A') div m\n                 else (0::'a));\n     dim_row A \\<noteq> dim_col A\\<rbrakk>\n    \\<Longrightarrow> local.det_code A = det A", "have A': \"A' \\<in> carrier_mat (dim_row A') (dim_row A')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A' \\<in> carrier_mat (dim_row A') (dim_row A')", "using triangulize_closed[OF rA' A]"], ["proof (prove)\nusing this:\n  A' \\<in> carrier_mat (dim_row A) (dim_row A)\n\ngoal (1 subgoal):\n 1. A' \\<in> carrier_mat (dim_row A') (dim_row A')", "by auto"], ["proof (state)\nthis:\n  A' \\<in> carrier_mat (dim_row A') (dim_row A')\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>A.\n                local.det_code A =\n                (if dim_row A = dim_col A\n                 then case local.triangulize A of\n                      (m, A') \\<Rightarrow> prod_list (diag_mat A') div m\n                 else (0::'a));\n     dim_row A = dim_col A\\<rbrakk>\n    \\<Longrightarrow> local.det_code A = det A\n 2. \\<lbrakk>\\<And>A.\n                local.det_code A =\n                (if dim_row A = dim_col A\n                 then case local.triangulize A of\n                      (m, A') \\<Rightarrow> prod_list (diag_mat A') div m\n                 else (0::'a));\n     dim_row A \\<noteq> dim_col A\\<rbrakk>\n    \\<Longrightarrow> local.det_code A = det A", "from tri'"], ["proof (chain)\npicking this:\n  upper_triangular A'", "have tr: \"triangular_to (dim_row A') A'\""], ["proof (prove)\nusing this:\n  upper_triangular A'\n\ngoal (1 subgoal):\n 1. local.triangular_to (dim_row A') A'", "by auto"], ["proof (state)\nthis:\n  local.triangular_to (dim_row A') A'\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>A.\n                local.det_code A =\n                (if dim_row A = dim_col A\n                 then case local.triangulize A of\n                      (m, A') \\<Rightarrow> prod_list (diag_mat A') div m\n                 else (0::'a));\n     dim_row A = dim_col A\\<rbrakk>\n    \\<Longrightarrow> local.det_code A = det A\n 2. \\<lbrakk>\\<And>A.\n                local.det_code A =\n                (if dim_row A = dim_col A\n                 then case local.triangulize A of\n                      (m, A') \\<Rightarrow> prod_list (diag_mat A') div m\n                 else (0::'a));\n     dim_row A \\<noteq> dim_col A\\<rbrakk>\n    \\<Longrightarrow> local.det_code A = det A", "have \"det_code A = prod_list (diag_mat A') div r'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. local.det_code A = prod_list (diag_mat A') div r'", "using rA' True"], ["proof (prove)\nusing this:\n  local.triangulize A = (r', A')\n  dim_row A = dim_col A\n\ngoal (1 subgoal):\n 1. local.det_code A = prod_list (diag_mat A') div r'", "by simp"], ["proof (state)\nthis:\n  local.det_code A = prod_list (diag_mat A') div r'\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>A.\n                local.det_code A =\n                (if dim_row A = dim_col A\n                 then case local.triangulize A of\n                      (m, A') \\<Rightarrow> prod_list (diag_mat A') div m\n                 else (0::'a));\n     dim_row A = dim_col A\\<rbrakk>\n    \\<Longrightarrow> local.det_code A = det A\n 2. \\<lbrakk>\\<And>A.\n                local.det_code A =\n                (if dim_row A = dim_col A\n                 then case local.triangulize A of\n                      (m, A') \\<Rightarrow> prod_list (diag_mat A') div m\n                 else (0::'a));\n     dim_row A \\<noteq> dim_col A\\<rbrakk>\n    \\<Longrightarrow> local.det_code A = det A", "also"], ["proof (state)\nthis:\n  local.det_code A = prod_list (diag_mat A') div r'\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>A.\n                local.det_code A =\n                (if dim_row A = dim_col A\n                 then case local.triangulize A of\n                      (m, A') \\<Rightarrow> prod_list (diag_mat A') div m\n                 else (0::'a));\n     dim_row A = dim_col A\\<rbrakk>\n    \\<Longrightarrow> local.det_code A = det A\n 2. \\<lbrakk>\\<And>A.\n                local.det_code A =\n                (if dim_row A = dim_col A\n                 then case local.triangulize A of\n                      (m, A') \\<Rightarrow> prod_list (diag_mat A') div m\n                 else (0::'a));\n     dim_row A \\<noteq> dim_col A\\<rbrakk>\n    \\<Longrightarrow> local.det_code A = det A", "have \"prod_list (diag_mat A') = det A'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prod_list (diag_mat A') = det A'", "unfolding det_upper_triangular[OF tri' A']"], ["proof (prove)\ngoal (1 subgoal):\n 1. prod_list (diag_mat A') = prod_list (diag_mat A')", ".."], ["proof (state)\nthis:\n  prod_list (diag_mat A') = det A'\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>A.\n                local.det_code A =\n                (if dim_row A = dim_col A\n                 then case local.triangulize A of\n                      (m, A') \\<Rightarrow> prod_list (diag_mat A') div m\n                 else (0::'a));\n     dim_row A = dim_col A\\<rbrakk>\n    \\<Longrightarrow> local.det_code A = det A\n 2. \\<lbrakk>\\<And>A.\n                local.det_code A =\n                (if dim_row A = dim_col A\n                 then case local.triangulize A of\n                      (m, A') \\<Rightarrow> prod_list (diag_mat A') div m\n                 else (0::'a));\n     dim_row A \\<noteq> dim_col A\\<rbrakk>\n    \\<Longrightarrow> local.det_code A = det A", "also"], ["proof (state)\nthis:\n  prod_list (diag_mat A') = det A'\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>A.\n                local.det_code A =\n                (if dim_row A = dim_col A\n                 then case local.triangulize A of\n                      (m, A') \\<Rightarrow> prod_list (diag_mat A') div m\n                 else (0::'a));\n     dim_row A = dim_col A\\<rbrakk>\n    \\<Longrightarrow> local.det_code A = det A\n 2. \\<lbrakk>\\<And>A.\n                local.det_code A =\n                (if dim_row A = dim_col A\n                 then case local.triangulize A of\n                      (m, A') \\<Rightarrow> prod_list (diag_mat A') div m\n                 else (0::'a));\n     dim_row A \\<noteq> dim_col A\\<rbrakk>\n    \\<Longrightarrow> local.det_code A = det A", "have \"\\<dots> = det A * r'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. det A' = det A * r'", "by (simp add: det')"], ["proof (state)\nthis:\n  det A' = det A * r'\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>A.\n                local.det_code A =\n                (if dim_row A = dim_col A\n                 then case local.triangulize A of\n                      (m, A') \\<Rightarrow> prod_list (diag_mat A') div m\n                 else (0::'a));\n     dim_row A = dim_col A\\<rbrakk>\n    \\<Longrightarrow> local.det_code A = det A\n 2. \\<lbrakk>\\<And>A.\n                local.det_code A =\n                (if dim_row A = dim_col A\n                 then case local.triangulize A of\n                      (m, A') \\<Rightarrow> prod_list (diag_mat A') div m\n                 else (0::'a));\n     dim_row A \\<noteq> dim_col A\\<rbrakk>\n    \\<Longrightarrow> local.det_code A = det A", "also"], ["proof (state)\nthis:\n  det A' = det A * r'\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>A.\n                local.det_code A =\n                (if dim_row A = dim_col A\n                 then case local.triangulize A of\n                      (m, A') \\<Rightarrow> prod_list (diag_mat A') div m\n                 else (0::'a));\n     dim_row A = dim_col A\\<rbrakk>\n    \\<Longrightarrow> local.det_code A = det A\n 2. \\<lbrakk>\\<And>A.\n                local.det_code A =\n                (if dim_row A = dim_col A\n                 then case local.triangulize A of\n                      (m, A') \\<Rightarrow> prod_list (diag_mat A') div m\n                 else (0::'a));\n     dim_row A \\<noteq> dim_col A\\<rbrakk>\n    \\<Longrightarrow> local.det_code A = det A", "have \"\\<dots> div r' = det A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. det A * r' div r' = det A", "using r'0"], ["proof (prove)\nusing this:\n  r' \\<noteq> (0::'a)\n\ngoal (1 subgoal):\n 1. det A * r' div r' = det A", "by auto"], ["proof (state)\nthis:\n  det A * r' div r' = det A\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>A.\n                local.det_code A =\n                (if dim_row A = dim_col A\n                 then case local.triangulize A of\n                      (m, A') \\<Rightarrow> prod_list (diag_mat A') div m\n                 else (0::'a));\n     dim_row A = dim_col A\\<rbrakk>\n    \\<Longrightarrow> local.det_code A = det A\n 2. \\<lbrakk>\\<And>A.\n                local.det_code A =\n                (if dim_row A = dim_col A\n                 then case local.triangulize A of\n                      (m, A') \\<Rightarrow> prod_list (diag_mat A') div m\n                 else (0::'a));\n     dim_row A \\<noteq> dim_col A\\<rbrakk>\n    \\<Longrightarrow> local.det_code A = det A", "finally"], ["proof (chain)\npicking this:\n  local.det_code A = det A", "show ?thesis"], ["proof (prove)\nusing this:\n  local.det_code A = det A\n\ngoal (1 subgoal):\n 1. local.det_code A = det A", "."], ["proof (state)\nthis:\n  local.det_code A = det A\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>A.\n                local.det_code A =\n                (if dim_row A = dim_col A\n                 then case local.triangulize A of\n                      (m, A') \\<Rightarrow> prod_list (diag_mat A') div m\n                 else (0::'a));\n     dim_row A \\<noteq> dim_col A\\<rbrakk>\n    \\<Longrightarrow> local.det_code A = det A", "qed (simp add: det_def)"], ["", "end"], ["", "end"], ["", "text \\<open>Now we can select an arbitrary selection and mute function. This will be important for computing\n  resultants over polynomials, where usually a polynomial with small degree is preferable.\n\n  The default however is to use the first element.\\<close>"], ["", "definition trivial_mute_fun :: \"'a :: comm_ring_1 \\<Rightarrow> 'a \\<Rightarrow> 'a \\<times> 'a \\<times> 'a\" where\n  \"trivial_mute_fun x y = (x,y,1)\""], ["", "lemma trivial_mute_fun[simp,intro]: \"mute_fun trivial_mute_fun\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mute_fun trivial_mute_fun", "unfolding mute_fun_def trivial_mute_fun_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x y x' y' g.\n       (x, y, 1::'a) = (x', y', g) \\<longrightarrow>\n       y \\<noteq> (0::'a) \\<longrightarrow>\n       x = x' * g \\<and> y * x' = x * y'", "by auto"], ["", "definition fst_sel_fun :: \"'a det_selection_fun\" where\n  \"fst_sel_fun x = fst (hd x)\""], ["", "lemma fst_sel_fun[simp]: \"det_selection_fun fst_sel_fun\""], ["proof (prove)\ngoal (1 subgoal):\n 1. det_selection_fun fst_sel_fun", "unfolding det_selection_fun_def fst_sel_fun_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>xs.\n       xs \\<noteq> [] \\<longrightarrow> fst (hd xs) \\<in> fst ` set xs", "by auto"], ["", "context\n  fixes measure :: \"'a \\<Rightarrow> nat\" \nbegin"], ["", "private"], ["", "fun select_min_main where \n  \"select_min_main m i ((j,p) # xs) = (let n = measure p in if n < m then select_min_main n j xs\n    else select_min_main m i xs)\"\n| \"select_min_main m i [] = i\""], ["", "definition select_min :: \"(nat \\<times> 'a) list \\<Rightarrow> nat\" where\n  \"select_min xs = (case xs of ((i,p) # ys) \\<Rightarrow> (select_min_main (measure p) i ys))\""], ["", "lemma select_min[simp]: \"det_selection_fun select_min\""], ["proof (prove)\ngoal (1 subgoal):\n 1. det_selection_fun local.select_min", "unfolding det_selection_fun_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>xs.\n       xs \\<noteq> [] \\<longrightarrow>\n       local.select_min xs \\<in> fst ` set xs", "proof (intro allI impI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xs.\n       xs \\<noteq> [] \\<Longrightarrow>\n       local.select_min xs \\<in> fst ` set xs", "fix xs :: \"(nat \\<times> 'a)list\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xs.\n       xs \\<noteq> [] \\<Longrightarrow>\n       local.select_min xs \\<in> fst ` set xs", "assume \"xs \\<noteq> []\""], ["proof (state)\nthis:\n  xs \\<noteq> []\n\ngoal (1 subgoal):\n 1. \\<And>xs.\n       xs \\<noteq> [] \\<Longrightarrow>\n       local.select_min xs \\<in> fst ` set xs", "then"], ["proof (chain)\npicking this:\n  xs \\<noteq> []", "obtain i p ys where xs: \"xs = ((i,p) # ys)\""], ["proof (prove)\nusing this:\n  xs \\<noteq> []\n\ngoal (1 subgoal):\n 1. (\\<And>i p ys.\n        xs = (i, p) # ys \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (cases xs, auto)"], ["proof (state)\nthis:\n  xs = (i, p) # ys\n\ngoal (1 subgoal):\n 1. \\<And>xs.\n       xs \\<noteq> [] \\<Longrightarrow>\n       local.select_min xs \\<in> fst ` set xs", "then"], ["proof (chain)\npicking this:\n  xs = (i, p) # ys", "obtain m where id: \"select_min xs = select_min_main m i ys\""], ["proof (prove)\nusing this:\n  xs = (i, p) # ys\n\ngoal (1 subgoal):\n 1. (\\<And>m.\n        local.select_min xs = select_min_main m i ys \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "unfolding select_min_def"], ["proof (prove)\nusing this:\n  xs = (i, p) # ys\n\ngoal (1 subgoal):\n 1. (\\<And>m.\n        (case xs of\n         (i, p) # ys \\<Rightarrow> select_min_main (measure p) i ys) =\n        select_min_main m i ys \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  local.select_min xs = select_min_main m i ys\n\ngoal (1 subgoal):\n 1. \\<And>xs.\n       xs \\<noteq> [] \\<Longrightarrow>\n       local.select_min xs \\<in> fst ` set xs", "have \"i \\<in> fst ` set xs\" \"set ys \\<subseteq> set xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. i \\<in> fst ` set xs &&& set ys \\<subseteq> set xs", "unfolding xs"], ["proof (prove)\ngoal (1 subgoal):\n 1. i \\<in> fst ` set ((i, p) # ys) &&& set ys \\<subseteq> set ((i, p) # ys)", "by auto"], ["proof (state)\nthis:\n  i \\<in> fst ` set xs\n  set ys \\<subseteq> set xs\n\ngoal (1 subgoal):\n 1. \\<And>xs.\n       xs \\<noteq> [] \\<Longrightarrow>\n       local.select_min xs \\<in> fst ` set xs", "thus \"select_min xs \\<in> fst ` set xs\""], ["proof (prove)\nusing this:\n  i \\<in> fst ` set xs\n  set ys \\<subseteq> set xs\n\ngoal (1 subgoal):\n 1. local.select_min xs \\<in> fst ` set xs", "unfolding id"], ["proof (prove)\nusing this:\n  i \\<in> fst ` set xs\n  set ys \\<subseteq> set xs\n\ngoal (1 subgoal):\n 1. select_min_main m i ys \\<in> fst ` set xs", "proof (induct ys arbitrary: m i )"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>m i.\n       \\<lbrakk>i \\<in> fst ` set xs; set [] \\<subseteq> set xs\\<rbrakk>\n       \\<Longrightarrow> select_min_main m i [] \\<in> fst ` set xs\n 2. \\<And>a ys m i.\n       \\<lbrakk>\\<And>m i.\n                   \\<lbrakk>i \\<in> fst ` set xs;\n                    set ys \\<subseteq> set xs\\<rbrakk>\n                   \\<Longrightarrow> select_min_main m i ys\n                                     \\<in> fst ` set xs;\n        i \\<in> fst ` set xs; set (a # ys) \\<subseteq> set xs\\<rbrakk>\n       \\<Longrightarrow> select_min_main m i (a # ys) \\<in> fst ` set xs", "case (Cons jp ys m i)"], ["proof (state)\nthis:\n  \\<lbrakk>?i5 \\<in> fst ` set xs; set ys \\<subseteq> set xs\\<rbrakk>\n  \\<Longrightarrow> select_min_main ?m5 ?i5 ys \\<in> fst ` set xs\n  i \\<in> fst ` set xs\n  set (jp # ys) \\<subseteq> set xs\n\ngoal (2 subgoals):\n 1. \\<And>m i.\n       \\<lbrakk>i \\<in> fst ` set xs; set [] \\<subseteq> set xs\\<rbrakk>\n       \\<Longrightarrow> select_min_main m i [] \\<in> fst ` set xs\n 2. \\<And>a ys m i.\n       \\<lbrakk>\\<And>m i.\n                   \\<lbrakk>i \\<in> fst ` set xs;\n                    set ys \\<subseteq> set xs\\<rbrakk>\n                   \\<Longrightarrow> select_min_main m i ys\n                                     \\<in> fst ` set xs;\n        i \\<in> fst ` set xs; set (a # ys) \\<subseteq> set xs\\<rbrakk>\n       \\<Longrightarrow> select_min_main m i (a # ys) \\<in> fst ` set xs", "obtain j p where jp: \"jp = (j,p)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>j p. jp = (j, p) \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by force"], ["proof (state)\nthis:\n  jp = (j, p)\n\ngoal (2 subgoals):\n 1. \\<And>m i.\n       \\<lbrakk>i \\<in> fst ` set xs; set [] \\<subseteq> set xs\\<rbrakk>\n       \\<Longrightarrow> select_min_main m i [] \\<in> fst ` set xs\n 2. \\<And>a ys m i.\n       \\<lbrakk>\\<And>m i.\n                   \\<lbrakk>i \\<in> fst ` set xs;\n                    set ys \\<subseteq> set xs\\<rbrakk>\n                   \\<Longrightarrow> select_min_main m i ys\n                                     \\<in> fst ` set xs;\n        i \\<in> fst ` set xs; set (a # ys) \\<subseteq> set xs\\<rbrakk>\n       \\<Longrightarrow> select_min_main m i (a # ys) \\<in> fst ` set xs", "obtain k n where res: \"select_min_main m i (jp # ys) = select_min_main n k ys\" \n      and k: \"k \\<in> fst ` set xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>n k.\n        \\<lbrakk>select_min_main m i (jp # ys) = select_min_main n k ys;\n         k \\<in> fst ` set xs\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using Cons(2-)"], ["proof (prove)\nusing this:\n  i \\<in> fst ` set xs\n  set (jp # ys) \\<subseteq> set xs\n\ngoal (1 subgoal):\n 1. (\\<And>n k.\n        \\<lbrakk>select_min_main m i (jp # ys) = select_min_main n k ys;\n         k \\<in> fst ` set xs\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding jp"], ["proof (prove)\nusing this:\n  i \\<in> fst ` set xs\n  set ((j, p) # ys) \\<subseteq> set xs\n\ngoal (1 subgoal):\n 1. (\\<And>n k.\n        \\<lbrakk>select_min_main m i ((j, p) # ys) = select_min_main n k ys;\n         k \\<in> fst ` set xs\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (cases \"measure p < m\"; force simp: Let_def)"], ["proof (state)\nthis:\n  select_min_main m i (jp # ys) = select_min_main n k ys\n  k \\<in> fst ` set xs\n\ngoal (2 subgoals):\n 1. \\<And>m i.\n       \\<lbrakk>i \\<in> fst ` set xs; set [] \\<subseteq> set xs\\<rbrakk>\n       \\<Longrightarrow> select_min_main m i [] \\<in> fst ` set xs\n 2. \\<And>a ys m i.\n       \\<lbrakk>\\<And>m i.\n                   \\<lbrakk>i \\<in> fst ` set xs;\n                    set ys \\<subseteq> set xs\\<rbrakk>\n                   \\<Longrightarrow> select_min_main m i ys\n                                     \\<in> fst ` set xs;\n        i \\<in> fst ` set xs; set (a # ys) \\<subseteq> set xs\\<rbrakk>\n       \\<Longrightarrow> select_min_main m i (a # ys) \\<in> fst ` set xs", "from Cons(1)[OF k, of n] Cons(3)"], ["proof (chain)\npicking this:\n  set ys \\<subseteq> set xs \\<Longrightarrow>\n  select_min_main n k ys \\<in> fst ` set xs\n  set (jp # ys) \\<subseteq> set xs", "show ?case"], ["proof (prove)\nusing this:\n  set ys \\<subseteq> set xs \\<Longrightarrow>\n  select_min_main n k ys \\<in> fst ` set xs\n  set (jp # ys) \\<subseteq> set xs\n\ngoal (1 subgoal):\n 1. select_min_main m i (jp # ys) \\<in> fst ` set xs", "unfolding res"], ["proof (prove)\nusing this:\n  set ys \\<subseteq> set xs \\<Longrightarrow>\n  select_min_main n k ys \\<in> fst ` set xs\n  set (jp # ys) \\<subseteq> set xs\n\ngoal (1 subgoal):\n 1. select_min_main n k ys \\<in> fst ` set xs", "by auto"], ["proof (state)\nthis:\n  select_min_main m i (jp # ys) \\<in> fst ` set xs\n\ngoal (1 subgoal):\n 1. \\<And>m i.\n       \\<lbrakk>i \\<in> fst ` set xs; set [] \\<subseteq> set xs\\<rbrakk>\n       \\<Longrightarrow> select_min_main m i [] \\<in> fst ` set xs", "qed simp"], ["proof (state)\nthis:\n  local.select_min xs \\<in> fst ` set xs\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "text \\<open>For the code equation we use the trivial mute and selection function as this does\n  not impose any further class restrictions.\\<close>"], ["", "lemma det_code_fst_sel_fun[code]: \"det A = det_code fst_sel_fun trivial_mute_fun A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. det A = det_code fst_sel_fun trivial_mute_fun A", "by simp"], ["", "text \\<open>But we also provide specialiced functions for more specific carriers.\\<close>"], ["", "definition field_mute_fun :: \"'a :: field \\<Rightarrow> 'a \\<Rightarrow> 'a \\<times> 'a \\<times> 'a\" where\n  \"field_mute_fun x y = (x/y,1,y)\""], ["", "lemma field_mute_fun[simp,intro]: \"mute_fun field_mute_fun\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mute_fun field_mute_fun", "unfolding mute_fun_def field_mute_fun_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x y x' y' g.\n       (x / y, 1::'a, y) = (x', y', g) \\<longrightarrow>\n       y \\<noteq> (0::'a) \\<longrightarrow>\n       x = x' * g \\<and> y * x' = x * y'", "by auto"], ["", "definition det_field :: \"'a :: field mat \\<Rightarrow> 'a\" where \n  \"det_field A = det_code fst_sel_fun field_mute_fun A\""], ["", "lemma det_field[simp]: \"det_field = det\""], ["proof (prove)\ngoal (1 subgoal):\n 1. det_field = det", "by (intro ext, auto simp: det_field_def)"], ["", "definition gcd_mute_fun :: \"'a :: ring_gcd \\<Rightarrow> 'a \\<Rightarrow> 'a \\<times> 'a \\<times> 'a\" where\n  \"gcd_mute_fun x y = (let g = gcd x y in (x div g, y div g,g))\""], ["", "lemma gcd_mute_fun[simp,intro]: \"mute_fun gcd_mute_fun\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mute_fun gcd_mute_fun", "unfolding mute_fun_def gcd_mute_fun_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x y x' y' g.\n       (let g = gcd x y in (x div g, y div g, g)) =\n       (x', y', g) \\<longrightarrow>\n       y \\<noteq> (0::'a) \\<longrightarrow>\n       x = x' * g \\<and> y * x' = x * y'", "by (auto simp: Let_def div_mult_swap mult.commute)"], ["", "definition det_int :: \"int mat \\<Rightarrow> int\" where \n  \"det_int A = det_code (select_min (\\<lambda> x. nat (abs x))) gcd_mute_fun A\""], ["", "lemma det_int[simp]: \"det_int = det\""], ["proof (prove)\ngoal (1 subgoal):\n 1. det_int = det", "by (intro ext, auto simp: det_int_def)"], ["", "definition det_field_poly :: \"'a :: {field,field_gcd} poly mat \\<Rightarrow> 'a poly\" where\n  \"det_field_poly A = det_code (select_min degree) gcd_mute_fun A\""], ["", "lemma det_field_poly[simp]: \"det_field_poly = det\""], ["proof (prove)\ngoal (1 subgoal):\n 1. det_field_poly = det", "by (intro ext, auto simp: det_field_poly_def)"], ["", "end"]]}