{"file_name": "/home/qj213/afp-2021-10-22/thys/Jordan_Normal_Form/DL_Missing_Sublist.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Jordan_Normal_Form", "problem_names": ["lemma nths_only_one:\nassumes \"{i. i < length xs \\<and> i\\<in>I} = {j}\"\nshows \"nths xs I = [xs!j]\"", "lemma nths_replicate:\n\"nths (replicate n x) A = (replicate (card {i. i < n \\<and> i \\<in> A}) x)\"", "lemma length_nths_even:\nassumes \"even (length xs)\"\nshows \"length (nths xs (Collect even)) = length (nths xs (Collect odd))\"", "lemma nths_map:\n\"nths (map f xs) A = map f (nths xs A)\"", "lemma pick_in_set_inf:\nassumes \"infinite S\"\nshows \"pick S n \\<in> S\"", "lemma pick_mono_inf:\nassumes \"infinite S\"\nshows \"m < n \\<Longrightarrow> pick S m < pick S n\"", "lemma pick_eq_iff_inf:\nassumes \"infinite S\"\nshows \"x = y \\<longleftrightarrow> pick S x = pick S y\"", "lemma card_le_pick_inf:\nassumes \"infinite S\"\nand \"pick S n \\<ge> i\"\nshows \"card {a\\<in>S. a < i} \\<le> n\"", "lemma card_pick_inf:\nassumes \"infinite S\"\nshows \"card {a\\<in>S. a < pick S n} = n\"", "lemma\nassumes \"n < card S\"\nshows\n  pick_in_set_le:\"pick S n \\<in> S\" and\n  card_pick_le: \"card {a\\<in>S. a < pick S n} = n\" and\n  pick_mono_le: \"m < n \\<Longrightarrow> pick S m < pick S n\"", "lemma card_le_pick_le:\nassumes \"n < card S\"\nand \"pick S n \\<ge> i\"\nshows \"card {a\\<in>S. a < i} \\<le> n\"", "lemma\nassumes \"n < card S \\<or> infinite S\"\nshows\n  pick_in_set:\"pick S n \\<in> S\" and\n  card_le_pick: \"i \\<le> pick S n ==> card {a\\<in>S. a < i} \\<le> n\" and\n  card_pick: \"card {a\\<in>S. a < pick S n} = n\" and\n  pick_mono: \"m < n \\<Longrightarrow> pick S m < pick S n\"", "lemma pick_card:\n\"pick I (card {a\\<in>I. a < i}) = (LEAST a. a\\<in>I \\<and> a \\<ge> i)\"", "lemma pick_card_in_set: \"i\\<in>I \\<Longrightarrow> pick I (card {a\\<in>I. a < i}) = i\"", "lemma nth_nths_card:\nassumes \"j<length xs\"\nand \"j\\<in>J\"\nshows \"nths xs J ! card {j0. j0 < j \\<and> j0 \\<in> J} = xs!j\"", "lemma pick_reduce_set:\nassumes \"i<card {a. a<m \\<and> a\\<in>I}\"\nshows \"pick I i = pick {a. a < m \\<and> a \\<in> I} i\"", "lemma nth_nths:\nassumes \"i<card {i. i<length xs \\<and> i\\<in>I}\"\nshows \"nths xs I ! i = xs ! pick I i\"", "lemma pick_UNIV: \"pick UNIV j = j\"", "lemma pick_le:\nassumes \"n < card {a. a < i \\<and> a \\<in> S}\"\nshows \"pick S n < i\"", "lemma prod_list_complementary_nthss:\nfixes f ::\"'a \\<Rightarrow> 'b::comm_monoid_mult\"\nshows \"prod_list (map f xs) = prod_list (map f (nths xs A)) *  prod_list (map f (nths xs (-A)))\"", "lemma nths_zip: \"nths (zip xs ys) I = zip (nths xs I) (nths ys I)\"", "lemma length_weave:\nshows \"length (weave A xs ys) = length xs + length ys\"", "lemma nth_weave:\nassumes \"i < length (weave A xs ys)\"\nshows \"weave A xs ys ! i = (if i\\<in>A then xs!(card {a\\<in>A. a<i}) else ys!(card {a\\<in>-A. a<i}))\"", "lemma weave_append1:\nassumes \"length xs + length ys \\<in> A\"\nassumes \"length xs = card {a\\<in>A. a < length xs + length ys}\"\nshows \"weave A (xs @ [x]) ys = weave A xs ys @ [x]\"", "lemma weave_append2:\nassumes \"length xs + length ys \\<notin> A\"\nassumes \"length ys = card {a\\<in>-A. a < length xs + length ys}\"\nshows \"weave A xs (ys @ [y]) = weave A xs ys @ [y]\"", "lemma nths_nth:\nassumes \"n\\<in>A\" \"n<length xs\"\nshows \"nths xs A ! (card {i. i<n \\<and> i\\<in>A}) = xs ! n\"", "lemma list_all2_nths:\nassumes \"list_all2 P (nths xs A) (nths ys A)\"\nand     \"list_all2 P (nths xs (-A)) (nths ys (-A))\"\nshows \"list_all2 P xs ys\"", "lemma nths_weave:\nassumes \"length xs = card {a\\<in>A. a < length xs + length ys}\"\nassumes \"length ys = card {a\\<in>(-A). a < length xs + length ys}\"\nshows \"nths (weave A xs ys) A = xs \\<and> nths (weave A xs ys) (-A) = ys\"", "lemma set_weave:\nassumes \"length xs = card {a\\<in>A. a < length xs + length ys}\"\nassumes \"length ys = card {a\\<in>-A. a < length xs + length ys}\"\nshows \"set (weave A xs ys) = set xs \\<union> set ys\"", "lemma weave_complementary_nthss[simp]:\n \"weave A (nths xs A) (nths xs (-A)) = xs\"", "lemma length_nths': \"length (nths xs I) = card {i\\<in>I. i < length xs}\""], "translations": [["", "lemma nths_only_one:\nassumes \"{i. i < length xs \\<and> i\\<in>I} = {j}\"\nshows \"nths xs I = [xs!j]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. nths xs I = [xs ! j]", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. nths xs I = [xs ! j]", "have \"set (nths xs I) = {xs!j}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set (nths xs I) = {xs ! j}", "unfolding set_nths"], ["proof (prove)\ngoal (1 subgoal):\n 1. {xs ! i |i. i < length xs \\<and> i \\<in> I} = {xs ! j}", "using subset_antisym assms"], ["proof (prove)\nusing this:\n  \\<lbrakk>?A \\<subseteq> ?B; ?B \\<subseteq> ?A\\<rbrakk>\n  \\<Longrightarrow> ?A = ?B\n  {i. i < length xs \\<and> i \\<in> I} = {j}\n\ngoal (1 subgoal):\n 1. {xs ! i |i. i < length xs \\<and> i \\<in> I} = {xs ! j}", "by fastforce"], ["proof (state)\nthis:\n  set (nths xs I) = {xs ! j}\n\ngoal (1 subgoal):\n 1. nths xs I = [xs ! j]", "moreover"], ["proof (state)\nthis:\n  set (nths xs I) = {xs ! j}\n\ngoal (1 subgoal):\n 1. nths xs I = [xs ! j]", "have \"length (nths xs I) = 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length (nths xs I) = 1", "unfolding length_nths assms"], ["proof (prove)\ngoal (1 subgoal):\n 1. card {j} = 1", "by auto"], ["proof (state)\nthis:\n  length (nths xs I) = 1\n\ngoal (1 subgoal):\n 1. nths xs I = [xs ! j]", "ultimately"], ["proof (chain)\npicking this:\n  set (nths xs I) = {xs ! j}\n  length (nths xs I) = 1", "show ?thesis"], ["proof (prove)\nusing this:\n  set (nths xs I) = {xs ! j}\n  length (nths xs I) = 1\n\ngoal (1 subgoal):\n 1. nths xs I = [xs ! j]", "by (metis One_nat_def length_0_conv length_Suc_conv the_elem_eq the_elem_set)"], ["proof (state)\nthis:\n  nths xs I = [xs ! j]\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma nths_replicate:\n\"nths (replicate n x) A = (replicate (card {i. i < n \\<and> i \\<in> A}) x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. nths (replicate n x) A = replicate (card {i. i < n \\<and> i \\<in> A}) x", "proof (induction n)"], ["proof (state)\ngoal (2 subgoals):\n 1. nths (replicate 0 x) A = replicate (card {i. i < 0 \\<and> i \\<in> A}) x\n 2. \\<And>n.\n       nths (replicate n x) A =\n       replicate (card {i. i < n \\<and> i \\<in> A}) x \\<Longrightarrow>\n       nths (replicate (Suc n) x) A =\n       replicate (card {i. i < Suc n \\<and> i \\<in> A}) x", "case 0"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. nths (replicate 0 x) A = replicate (card {i. i < 0 \\<and> i \\<in> A}) x\n 2. \\<And>n.\n       nths (replicate n x) A =\n       replicate (card {i. i < n \\<and> i \\<in> A}) x \\<Longrightarrow>\n       nths (replicate (Suc n) x) A =\n       replicate (card {i. i < Suc n \\<and> i \\<in> A}) x", "then"], ["proof (chain)\npicking this:", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. nths (replicate 0 x) A = replicate (card {i. i < 0 \\<and> i \\<in> A}) x", "by simp"], ["proof (state)\nthis:\n  nths (replicate 0 x) A = replicate (card {i. i < 0 \\<and> i \\<in> A}) x\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       nths (replicate n x) A =\n       replicate (card {i. i < n \\<and> i \\<in> A}) x \\<Longrightarrow>\n       nths (replicate (Suc n) x) A =\n       replicate (card {i. i < Suc n \\<and> i \\<in> A}) x", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n.\n       nths (replicate n x) A =\n       replicate (card {i. i < n \\<and> i \\<in> A}) x \\<Longrightarrow>\n       nths (replicate (Suc n) x) A =\n       replicate (card {i. i < Suc n \\<and> i \\<in> A}) x", "case (Suc n)"], ["proof (state)\nthis:\n  nths (replicate n x) A = replicate (card {i. i < n \\<and> i \\<in> A}) x\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       nths (replicate n x) A =\n       replicate (card {i. i < n \\<and> i \\<in> A}) x \\<Longrightarrow>\n       nths (replicate (Suc n) x) A =\n       replicate (card {i. i < Suc n \\<and> i \\<in> A}) x", "then"], ["proof (chain)\npicking this:\n  nths (replicate n x) A = replicate (card {i. i < n \\<and> i \\<in> A}) x", "show ?case"], ["proof (prove)\nusing this:\n  nths (replicate n x) A = replicate (card {i. i < n \\<and> i \\<in> A}) x\n\ngoal (1 subgoal):\n 1. nths (replicate (Suc n) x) A =\n    replicate (card {i. i < Suc n \\<and> i \\<in> A}) x", "proof (cases \"n\\<in>A\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>nths (replicate n x) A =\n             replicate (card {i. i < n \\<and> i \\<in> A}) x;\n     n \\<in> A\\<rbrakk>\n    \\<Longrightarrow> nths (replicate (Suc n) x) A =\n                      replicate (card {i. i < Suc n \\<and> i \\<in> A}) x\n 2. \\<lbrakk>nths (replicate n x) A =\n             replicate (card {i. i < n \\<and> i \\<in> A}) x;\n     n \\<notin> A\\<rbrakk>\n    \\<Longrightarrow> nths (replicate (Suc n) x) A =\n                      replicate (card {i. i < Suc n \\<and> i \\<in> A}) x", "case True"], ["proof (state)\nthis:\n  n \\<in> A\n\ngoal (2 subgoals):\n 1. \\<lbrakk>nths (replicate n x) A =\n             replicate (card {i. i < n \\<and> i \\<in> A}) x;\n     n \\<in> A\\<rbrakk>\n    \\<Longrightarrow> nths (replicate (Suc n) x) A =\n                      replicate (card {i. i < Suc n \\<and> i \\<in> A}) x\n 2. \\<lbrakk>nths (replicate n x) A =\n             replicate (card {i. i < n \\<and> i \\<in> A}) x;\n     n \\<notin> A\\<rbrakk>\n    \\<Longrightarrow> nths (replicate (Suc n) x) A =\n                      replicate (card {i. i < Suc n \\<and> i \\<in> A}) x", "then"], ["proof (chain)\npicking this:\n  n \\<in> A", "have 0:\"(if 0 \\<in> {j. j + length (replicate n x) \\<in> A} then [x] else []) = [x]\""], ["proof (prove)\nusing this:\n  n \\<in> A\n\ngoal (1 subgoal):\n 1. (if 0 \\<in> {j. j + length (replicate n x) \\<in> A} then [x] else []) =\n    [x]", "by simp"], ["proof (state)\nthis:\n  (if 0 \\<in> {j. j + length (replicate n x) \\<in> A} then [x] else []) =\n  [x]\n\ngoal (2 subgoals):\n 1. \\<lbrakk>nths (replicate n x) A =\n             replicate (card {i. i < n \\<and> i \\<in> A}) x;\n     n \\<in> A\\<rbrakk>\n    \\<Longrightarrow> nths (replicate (Suc n) x) A =\n                      replicate (card {i. i < Suc n \\<and> i \\<in> A}) x\n 2. \\<lbrakk>nths (replicate n x) A =\n             replicate (card {i. i < n \\<and> i \\<in> A}) x;\n     n \\<notin> A\\<rbrakk>\n    \\<Longrightarrow> nths (replicate (Suc n) x) A =\n                      replicate (card {i. i < Suc n \\<and> i \\<in> A}) x", "have \"{i. i < Suc n \\<and> i \\<in> A} = insert n {i. i < n \\<and> i \\<in> A}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {i. i < Suc n \\<and> i \\<in> A} = insert n {i. i < n \\<and> i \\<in> A}", "using True"], ["proof (prove)\nusing this:\n  n \\<in> A\n\ngoal (1 subgoal):\n 1. {i. i < Suc n \\<and> i \\<in> A} = insert n {i. i < n \\<and> i \\<in> A}", "by auto"], ["proof (state)\nthis:\n  {i. i < Suc n \\<and> i \\<in> A} = insert n {i. i < n \\<and> i \\<in> A}\n\ngoal (2 subgoals):\n 1. \\<lbrakk>nths (replicate n x) A =\n             replicate (card {i. i < n \\<and> i \\<in> A}) x;\n     n \\<in> A\\<rbrakk>\n    \\<Longrightarrow> nths (replicate (Suc n) x) A =\n                      replicate (card {i. i < Suc n \\<and> i \\<in> A}) x\n 2. \\<lbrakk>nths (replicate n x) A =\n             replicate (card {i. i < n \\<and> i \\<in> A}) x;\n     n \\<notin> A\\<rbrakk>\n    \\<Longrightarrow> nths (replicate (Suc n) x) A =\n                      replicate (card {i. i < Suc n \\<and> i \\<in> A}) x", "have \"Suc (card {i. i < n \\<and> i \\<in> A}) = card {i. i < Suc n \\<and> i \\<in> A}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Suc (card {i. i < n \\<and> i \\<in> A}) =\n    card {i. i < Suc n \\<and> i \\<in> A}", "unfolding \\<open>{i. i < Suc n \\<and> i \\<in> A} = insert n {i. i < n \\<and> i \\<in> A}\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. Suc (card {i. i < n \\<and> i \\<in> A}) =\n    card (insert n {i. i < n \\<and> i \\<in> A})", "using finite_Collect_conjI[THEN card_insert_if] finite_Collect_less_nat\n       less_irrefl_nat mem_Collect_eq"], ["proof (prove)\nusing this:\n  finite {x. ?P1 x} \\<or> finite {x. ?Q1 x} \\<Longrightarrow>\n  card (insert ?x {x. ?P1 x \\<and> ?Q1 x}) =\n  (if ?x \\<in> {x. ?P1 x \\<and> ?Q1 x} then card {x. ?P1 x \\<and> ?Q1 x}\n   else Suc (card {x. ?P1 x \\<and> ?Q1 x}))\n  finite {n. n < ?k}\n  ?n < ?n \\<Longrightarrow> ?R\n  (?a \\<in> Collect ?P) = ?P ?a\n\ngoal (1 subgoal):\n 1. Suc (card {i. i < n \\<and> i \\<in> A}) =\n    card (insert n {i. i < n \\<and> i \\<in> A})", "by simp"], ["proof (state)\nthis:\n  Suc (card {i. i < n \\<and> i \\<in> A}) =\n  card {i. i < Suc n \\<and> i \\<in> A}\n\ngoal (2 subgoals):\n 1. \\<lbrakk>nths (replicate n x) A =\n             replicate (card {i. i < n \\<and> i \\<in> A}) x;\n     n \\<in> A\\<rbrakk>\n    \\<Longrightarrow> nths (replicate (Suc n) x) A =\n                      replicate (card {i. i < Suc n \\<and> i \\<in> A}) x\n 2. \\<lbrakk>nths (replicate n x) A =\n             replicate (card {i. i < n \\<and> i \\<in> A}) x;\n     n \\<notin> A\\<rbrakk>\n    \\<Longrightarrow> nths (replicate (Suc n) x) A =\n                      replicate (card {i. i < Suc n \\<and> i \\<in> A}) x", "then"], ["proof (chain)\npicking this:\n  Suc (card {i. i < n \\<and> i \\<in> A}) =\n  card {i. i < Suc n \\<and> i \\<in> A}", "show ?thesis"], ["proof (prove)\nusing this:\n  Suc (card {i. i < n \\<and> i \\<in> A}) =\n  card {i. i < Suc n \\<and> i \\<in> A}\n\ngoal (1 subgoal):\n 1. nths (replicate (Suc n) x) A =\n    replicate (card {i. i < Suc n \\<and> i \\<in> A}) x", "unfolding replicate_Suc replicate_append_same[symmetric] nths_append Suc nths_singleton 0"], ["proof (prove)\nusing this:\n  Suc (card {i. i < n \\<and> i \\<in> A}) =\n  card {i. i < Suc n \\<and> i \\<in> A}\n\ngoal (1 subgoal):\n 1. replicate (card {i. i < n \\<and> i \\<in> A}) x @ [x] =\n    replicate (card {i. i < Suc n \\<and> i \\<in> A}) x", "unfolding replicate_append_same replicate_Suc[symmetric]"], ["proof (prove)\nusing this:\n  Suc (card {i. i < n \\<and> i \\<in> A}) =\n  card {i. i < Suc n \\<and> i \\<in> A}\n\ngoal (1 subgoal):\n 1. replicate (Suc (card {i. i < n \\<and> i \\<in> A})) x =\n    replicate (card {i. i < Suc n \\<and> i \\<in> A}) x", "by simp"], ["proof (state)\nthis:\n  nths (replicate (Suc n) x) A =\n  replicate (card {i. i < Suc n \\<and> i \\<in> A}) x\n\ngoal (1 subgoal):\n 1. \\<lbrakk>nths (replicate n x) A =\n             replicate (card {i. i < n \\<and> i \\<in> A}) x;\n     n \\<notin> A\\<rbrakk>\n    \\<Longrightarrow> nths (replicate (Suc n) x) A =\n                      replicate (card {i. i < Suc n \\<and> i \\<in> A}) x", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>nths (replicate n x) A =\n             replicate (card {i. i < n \\<and> i \\<in> A}) x;\n     n \\<notin> A\\<rbrakk>\n    \\<Longrightarrow> nths (replicate (Suc n) x) A =\n                      replicate (card {i. i < Suc n \\<and> i \\<in> A}) x", "case False"], ["proof (state)\nthis:\n  n \\<notin> A\n\ngoal (1 subgoal):\n 1. \\<lbrakk>nths (replicate n x) A =\n             replicate (card {i. i < n \\<and> i \\<in> A}) x;\n     n \\<notin> A\\<rbrakk>\n    \\<Longrightarrow> nths (replicate (Suc n) x) A =\n                      replicate (card {i. i < Suc n \\<and> i \\<in> A}) x", "then"], ["proof (chain)\npicking this:\n  n \\<notin> A", "have 0:\"(if 0 \\<in> {j. j + length (replicate n x) \\<in> A} then [x] else []) = []\""], ["proof (prove)\nusing this:\n  n \\<notin> A\n\ngoal (1 subgoal):\n 1. (if 0 \\<in> {j. j + length (replicate n x) \\<in> A} then [x] else []) =\n    []", "by simp"], ["proof (state)\nthis:\n  (if 0 \\<in> {j. j + length (replicate n x) \\<in> A} then [x] else []) = []\n\ngoal (1 subgoal):\n 1. \\<lbrakk>nths (replicate n x) A =\n             replicate (card {i. i < n \\<and> i \\<in> A}) x;\n     n \\<notin> A\\<rbrakk>\n    \\<Longrightarrow> nths (replicate (Suc n) x) A =\n                      replicate (card {i. i < Suc n \\<and> i \\<in> A}) x", "have \"{i. i < Suc n \\<and> i \\<in> A} = {i. i < n \\<and> i \\<in> A}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {i. i < Suc n \\<and> i \\<in> A} = {i. i < n \\<and> i \\<in> A}", "using False"], ["proof (prove)\nusing this:\n  n \\<notin> A\n\ngoal (1 subgoal):\n 1. {i. i < Suc n \\<and> i \\<in> A} = {i. i < n \\<and> i \\<in> A}", "using le_less less_Suc_eq_le"], ["proof (prove)\nusing this:\n  n \\<notin> A\n  (?x \\<le> ?y) = (?x < ?y \\<or> ?x = ?y)\n  (?m < Suc ?n) = (?m \\<le> ?n)\n\ngoal (1 subgoal):\n 1. {i. i < Suc n \\<and> i \\<in> A} = {i. i < n \\<and> i \\<in> A}", "by auto"], ["proof (state)\nthis:\n  {i. i < Suc n \\<and> i \\<in> A} = {i. i < n \\<and> i \\<in> A}\n\ngoal (1 subgoal):\n 1. \\<lbrakk>nths (replicate n x) A =\n             replicate (card {i. i < n \\<and> i \\<in> A}) x;\n     n \\<notin> A\\<rbrakk>\n    \\<Longrightarrow> nths (replicate (Suc n) x) A =\n                      replicate (card {i. i < Suc n \\<and> i \\<in> A}) x", "then"], ["proof (chain)\npicking this:\n  {i. i < Suc n \\<and> i \\<in> A} = {i. i < n \\<and> i \\<in> A}", "show ?thesis"], ["proof (prove)\nusing this:\n  {i. i < Suc n \\<and> i \\<in> A} = {i. i < n \\<and> i \\<in> A}\n\ngoal (1 subgoal):\n 1. nths (replicate (Suc n) x) A =\n    replicate (card {i. i < Suc n \\<and> i \\<in> A}) x", "unfolding replicate_Suc replicate_append_same[symmetric] nths_append Suc nths_singleton 0"], ["proof (prove)\nusing this:\n  {i. i < Suc n \\<and> i \\<in> A} = {i. i < n \\<and> i \\<in> A}\n\ngoal (1 subgoal):\n 1. replicate (card {i. i < n \\<and> i \\<in> A}) x @ [] =\n    replicate (card {i. i < Suc n \\<and> i \\<in> A}) x", "by simp"], ["proof (state)\nthis:\n  nths (replicate (Suc n) x) A =\n  replicate (card {i. i < Suc n \\<and> i \\<in> A}) x\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  nths (replicate (Suc n) x) A =\n  replicate (card {i. i < Suc n \\<and> i \\<in> A}) x\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma length_nths_even:\nassumes \"even (length xs)\"\nshows \"length (nths xs (Collect even)) = length (nths xs (Collect odd))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length (nths xs (Collect even)) = length (nths xs {a. odd a})", "using assms"], ["proof (prove)\nusing this:\n  even (length xs)\n\ngoal (1 subgoal):\n 1. length (nths xs (Collect even)) = length (nths xs {a. odd a})", "proof (induction \"length xs div 2\" arbitrary:xs)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>xs.\n       \\<lbrakk>0 = length xs div 2; even (length xs)\\<rbrakk>\n       \\<Longrightarrow> length (nths xs (Collect even)) =\n                         length (nths xs {a. odd a})\n 2. \\<And>x xs.\n       \\<lbrakk>\\<And>xs.\n                   \\<lbrakk>x = length xs div 2; even (length xs)\\<rbrakk>\n                   \\<Longrightarrow> length (nths xs (Collect even)) =\n                                     length (nths xs {a. odd a});\n        Suc x = length xs div 2; even (length xs)\\<rbrakk>\n       \\<Longrightarrow> length (nths xs (Collect even)) =\n                         length (nths xs {a. odd a})", "case 0"], ["proof (state)\nthis:\n  0 = length xs div 2\n  even (length xs)\n\ngoal (2 subgoals):\n 1. \\<And>xs.\n       \\<lbrakk>0 = length xs div 2; even (length xs)\\<rbrakk>\n       \\<Longrightarrow> length (nths xs (Collect even)) =\n                         length (nths xs {a. odd a})\n 2. \\<And>x xs.\n       \\<lbrakk>\\<And>xs.\n                   \\<lbrakk>x = length xs div 2; even (length xs)\\<rbrakk>\n                   \\<Longrightarrow> length (nths xs (Collect even)) =\n                                     length (nths xs {a. odd a});\n        Suc x = length xs div 2; even (length xs)\\<rbrakk>\n       \\<Longrightarrow> length (nths xs (Collect even)) =\n                         length (nths xs {a. odd a})", "then"], ["proof (chain)\npicking this:\n  0 = length xs div 2\n  even (length xs)", "have \"length xs = 0\""], ["proof (prove)\nusing this:\n  0 = length xs div 2\n  even (length xs)\n\ngoal (1 subgoal):\n 1. length xs = 0", "by (auto elim: evenE)"], ["proof (state)\nthis:\n  length xs = 0\n\ngoal (2 subgoals):\n 1. \\<And>xs.\n       \\<lbrakk>0 = length xs div 2; even (length xs)\\<rbrakk>\n       \\<Longrightarrow> length (nths xs (Collect even)) =\n                         length (nths xs {a. odd a})\n 2. \\<And>x xs.\n       \\<lbrakk>\\<And>xs.\n                   \\<lbrakk>x = length xs div 2; even (length xs)\\<rbrakk>\n                   \\<Longrightarrow> length (nths xs (Collect even)) =\n                                     length (nths xs {a. odd a});\n        Suc x = length xs div 2; even (length xs)\\<rbrakk>\n       \\<Longrightarrow> length (nths xs (Collect even)) =\n                         length (nths xs {a. odd a})", "then"], ["proof (chain)\npicking this:\n  length xs = 0", "show ?case"], ["proof (prove)\nusing this:\n  length xs = 0\n\ngoal (1 subgoal):\n 1. length (nths xs (Collect even)) = length (nths xs {a. odd a})", "by simp"], ["proof (state)\nthis:\n  length (nths xs (Collect even)) = length (nths xs {a. odd a})\n\ngoal (1 subgoal):\n 1. \\<And>x xs.\n       \\<lbrakk>\\<And>xs.\n                   \\<lbrakk>x = length xs div 2; even (length xs)\\<rbrakk>\n                   \\<Longrightarrow> length (nths xs (Collect even)) =\n                                     length (nths xs {a. odd a});\n        Suc x = length xs div 2; even (length xs)\\<rbrakk>\n       \\<Longrightarrow> length (nths xs (Collect even)) =\n                         length (nths xs {a. odd a})", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x xs.\n       \\<lbrakk>\\<And>xs.\n                   \\<lbrakk>x = length xs div 2; even (length xs)\\<rbrakk>\n                   \\<Longrightarrow> length (nths xs (Collect even)) =\n                                     length (nths xs {a. odd a});\n        Suc x = length xs div 2; even (length xs)\\<rbrakk>\n       \\<Longrightarrow> length (nths xs (Collect even)) =\n                         length (nths xs {a. odd a})", "case (Suc l xs)"], ["proof (state)\nthis:\n  \\<lbrakk>l = length ?xs div 2; even (length ?xs)\\<rbrakk>\n  \\<Longrightarrow> length (nths ?xs (Collect even)) =\n                    length (nths ?xs {a. odd a})\n  Suc l = length xs div 2\n  even (length xs)\n\ngoal (1 subgoal):\n 1. \\<And>x xs.\n       \\<lbrakk>\\<And>xs.\n                   \\<lbrakk>x = length xs div 2; even (length xs)\\<rbrakk>\n                   \\<Longrightarrow> length (nths xs (Collect even)) =\n                                     length (nths xs {a. odd a});\n        Suc x = length xs div 2; even (length xs)\\<rbrakk>\n       \\<Longrightarrow> length (nths xs (Collect even)) =\n                         length (nths xs {a. odd a})", "then"], ["proof (chain)\npicking this:\n  \\<lbrakk>l = length ?xs div 2; even (length ?xs)\\<rbrakk>\n  \\<Longrightarrow> length (nths ?xs (Collect even)) =\n                    length (nths ?xs {a. odd a})\n  Suc l = length xs div 2\n  even (length xs)", "have length_drop2: \"length (nths (drop 2 xs) (Collect even)) = length (nths (drop 2 xs) {a. odd a})\""], ["proof (prove)\nusing this:\n  \\<lbrakk>l = length ?xs div 2; even (length ?xs)\\<rbrakk>\n  \\<Longrightarrow> length (nths ?xs (Collect even)) =\n                    length (nths ?xs {a. odd a})\n  Suc l = length xs div 2\n  even (length xs)\n\ngoal (1 subgoal):\n 1. length (nths (drop 2 xs) (Collect even)) =\n    length (nths (drop 2 xs) {a. odd a})", "by simp"], ["proof (state)\nthis:\n  length (nths (drop 2 xs) (Collect even)) =\n  length (nths (drop 2 xs) {a. odd a})\n\ngoal (1 subgoal):\n 1. \\<And>x xs.\n       \\<lbrakk>\\<And>xs.\n                   \\<lbrakk>x = length xs div 2; even (length xs)\\<rbrakk>\n                   \\<Longrightarrow> length (nths xs (Collect even)) =\n                                     length (nths xs {a. odd a});\n        Suc x = length xs div 2; even (length xs)\\<rbrakk>\n       \\<Longrightarrow> length (nths xs (Collect even)) =\n                         length (nths xs {a. odd a})", "have \"length (take 2 xs) = 2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length (take 2 xs) = 2", "using Suc.hyps(2)"], ["proof (prove)\nusing this:\n  Suc l = length xs div 2\n\ngoal (1 subgoal):\n 1. length (take 2 xs) = 2", "by auto"], ["proof (state)\nthis:\n  length (take 2 xs) = 2\n\ngoal (1 subgoal):\n 1. \\<And>x xs.\n       \\<lbrakk>\\<And>xs.\n                   \\<lbrakk>x = length xs div 2; even (length xs)\\<rbrakk>\n                   \\<Longrightarrow> length (nths xs (Collect even)) =\n                                     length (nths xs {a. odd a});\n        Suc x = length xs div 2; even (length xs)\\<rbrakk>\n       \\<Longrightarrow> length (nths xs (Collect even)) =\n                         length (nths xs {a. odd a})", "then"], ["proof (chain)\npicking this:\n  length (take 2 xs) = 2", "have plus_odd: \"{j. j + length (take 2 xs) \\<in> Collect odd} = Collect odd\" and\n            plus_even: \"{j. j + length (take 2 xs) \\<in> Collect even} = Collect even\""], ["proof (prove)\nusing this:\n  length (take 2 xs) = 2\n\ngoal (1 subgoal):\n 1. {j. j + length (take 2 xs) \\<in> {a. odd a}} = {a. odd a} &&&\n    {j. j + length (take 2 xs) \\<in> Collect even} = Collect even", "by simp_all"], ["proof (state)\nthis:\n  {j. j + length (take 2 xs) \\<in> {a. odd a}} = {a. odd a}\n  {j. j + length (take 2 xs) \\<in> Collect even} = Collect even\n\ngoal (1 subgoal):\n 1. \\<And>x xs.\n       \\<lbrakk>\\<And>xs.\n                   \\<lbrakk>x = length xs div 2; even (length xs)\\<rbrakk>\n                   \\<Longrightarrow> length (nths xs (Collect even)) =\n                                     length (nths xs {a. odd a});\n        Suc x = length xs div 2; even (length xs)\\<rbrakk>\n       \\<Longrightarrow> length (nths xs (Collect even)) =\n                         length (nths xs {a. odd a})", "have nths_take2: \"nths (take 2 xs) (Collect even) = [take 2 xs ! 0]\" \"nths (take 2 xs) (Collect odd) = [take 2 xs ! 1]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. nths (take 2 xs) (Collect even) = [take 2 xs ! 0] &&&\n    nths (take 2 xs) {a. odd a} = [take 2 xs ! 1]", "using \\<open>length (take 2 xs) = 2\\<close> less_2_cases nths_only_one[of \"take 2 xs\" \"Collect even\" 0]\n    nths_only_one[of \"take 2 xs\" \"Collect odd\" 1]"], ["proof (prove)\nusing this:\n  length (take 2 xs) = 2\n  ?n < 2 \\<Longrightarrow> ?n = 0 \\<or> ?n = Suc 0\n  {i. i < length (take 2 xs) \\<and> i \\<in> Collect even} =\n  {0} \\<Longrightarrow>\n  nths (take 2 xs) (Collect even) = [take 2 xs ! 0]\n  {i. i < length (take 2 xs) \\<and> i \\<in> {a. odd a}} =\n  {1} \\<Longrightarrow>\n  nths (take 2 xs) {a. odd a} = [take 2 xs ! 1]\n\ngoal (1 subgoal):\n 1. nths (take 2 xs) (Collect even) = [take 2 xs ! 0] &&&\n    nths (take 2 xs) {a. odd a} = [take 2 xs ! 1]", "by fastforce+"], ["proof (state)\nthis:\n  nths (take 2 xs) (Collect even) = [take 2 xs ! 0]\n  nths (take 2 xs) {a. odd a} = [take 2 xs ! 1]\n\ngoal (1 subgoal):\n 1. \\<And>x xs.\n       \\<lbrakk>\\<And>xs.\n                   \\<lbrakk>x = length xs div 2; even (length xs)\\<rbrakk>\n                   \\<Longrightarrow> length (nths xs (Collect even)) =\n                                     length (nths xs {a. odd a});\n        Suc x = length xs div 2; even (length xs)\\<rbrakk>\n       \\<Longrightarrow> length (nths xs (Collect even)) =\n                         length (nths xs {a. odd a})", "then"], ["proof (chain)\npicking this:\n  nths (take 2 xs) (Collect even) = [take 2 xs ! 0]\n  nths (take 2 xs) {a. odd a} = [take 2 xs ! 1]", "have \"length (nths (take 2 xs @ drop 2 xs) (Collect even))\n           = length (nths (take 2 xs @ drop 2 xs) {a. odd a})\""], ["proof (prove)\nusing this:\n  nths (take 2 xs) (Collect even) = [take 2 xs ! 0]\n  nths (take 2 xs) {a. odd a} = [take 2 xs ! 1]\n\ngoal (1 subgoal):\n 1. length (nths (take 2 xs @ drop 2 xs) (Collect even)) =\n    length (nths (take 2 xs @ drop 2 xs) {a. odd a})", "unfolding nths_append length_append plus_odd plus_even nths_take2 length_drop2"], ["proof (prove)\nusing this:\n  [take 2 xs ! 0] = [take 2 xs ! 0]\n  [take 2 xs ! 1] = [take 2 xs ! 1]\n\ngoal (1 subgoal):\n 1. length [take 2 xs ! 0] + length (nths (drop 2 xs) {a. odd a}) =\n    length [take 2 xs ! 1] + length (nths (drop 2 xs) {a. odd a})", "by auto"], ["proof (state)\nthis:\n  length (nths (take 2 xs @ drop 2 xs) (Collect even)) =\n  length (nths (take 2 xs @ drop 2 xs) {a. odd a})\n\ngoal (1 subgoal):\n 1. \\<And>x xs.\n       \\<lbrakk>\\<And>xs.\n                   \\<lbrakk>x = length xs div 2; even (length xs)\\<rbrakk>\n                   \\<Longrightarrow> length (nths xs (Collect even)) =\n                                     length (nths xs {a. odd a});\n        Suc x = length xs div 2; even (length xs)\\<rbrakk>\n       \\<Longrightarrow> length (nths xs (Collect even)) =\n                         length (nths xs {a. odd a})", "then"], ["proof (chain)\npicking this:\n  length (nths (take 2 xs @ drop 2 xs) (Collect even)) =\n  length (nths (take 2 xs @ drop 2 xs) {a. odd a})", "show ?case"], ["proof (prove)\nusing this:\n  length (nths (take 2 xs @ drop 2 xs) (Collect even)) =\n  length (nths (take 2 xs @ drop 2 xs) {a. odd a})\n\ngoal (1 subgoal):\n 1. length (nths xs (Collect even)) = length (nths xs {a. odd a})", "using append_take_drop_id[of 2 xs]"], ["proof (prove)\nusing this:\n  length (nths (take 2 xs @ drop 2 xs) (Collect even)) =\n  length (nths (take 2 xs @ drop 2 xs) {a. odd a})\n  take 2 xs @ drop 2 xs = xs\n\ngoal (1 subgoal):\n 1. length (nths xs (Collect even)) = length (nths xs {a. odd a})", "by simp"], ["proof (state)\nthis:\n  length (nths xs (Collect even)) = length (nths xs {a. odd a})\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma nths_map:\n\"nths (map f xs) A = map f (nths xs A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. nths (map f xs) A = map f (nths xs A)", "proof (induction xs arbitrary:A)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>A. nths (map f []) A = map f (nths [] A)\n 2. \\<And>a xs A.\n       (\\<And>A. nths (map f xs) A = map f (nths xs A)) \\<Longrightarrow>\n       nths (map f (a # xs)) A = map f (nths (a # xs) A)", "case Nil"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. \\<And>A. nths (map f []) A = map f (nths [] A)\n 2. \\<And>a xs A.\n       (\\<And>A. nths (map f xs) A = map f (nths xs A)) \\<Longrightarrow>\n       nths (map f (a # xs)) A = map f (nths (a # xs) A)", "then"], ["proof (chain)\npicking this:", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. nths (map f []) A = map f (nths [] A)", "by simp"], ["proof (state)\nthis:\n  nths (map f []) A = map f (nths [] A)\n\ngoal (1 subgoal):\n 1. \\<And>a xs A.\n       (\\<And>A. nths (map f xs) A = map f (nths xs A)) \\<Longrightarrow>\n       nths (map f (a # xs)) A = map f (nths (a # xs) A)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a xs A.\n       (\\<And>A. nths (map f xs) A = map f (nths xs A)) \\<Longrightarrow>\n       nths (map f (a # xs)) A = map f (nths (a # xs) A)", "case (Cons x xs)"], ["proof (state)\nthis:\n  nths (map f xs) ?A = map f (nths xs ?A)\n\ngoal (1 subgoal):\n 1. \\<And>a xs A.\n       (\\<And>A. nths (map f xs) A = map f (nths xs A)) \\<Longrightarrow>\n       nths (map f (a # xs)) A = map f (nths (a # xs) A)", "then"], ["proof (chain)\npicking this:\n  nths (map f xs) ?A = map f (nths xs ?A)", "show ?case"], ["proof (prove)\nusing this:\n  nths (map f xs) ?A = map f (nths xs ?A)\n\ngoal (1 subgoal):\n 1. nths (map f (x # xs)) A = map f (nths (x # xs) A)", "by (simp add: nths_Cons)"], ["proof (state)\nthis:\n  nths (map f (x # xs)) A = map f (nths (x # xs) A)\n\ngoal:\nNo subgoals!", "qed"], ["", "section \"Pick\""], ["", "fun pick :: \"nat set \\<Rightarrow> nat \\<Rightarrow> nat\" where\n\"pick S 0 = (LEAST a. a\\<in>S)\" |\n\"pick S (Suc n) = (LEAST a. a\\<in>S \\<and> a > pick S n)\""], ["", "lemma pick_in_set_inf:\nassumes \"infinite S\"\nshows \"pick S n \\<in> S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pick S n \\<in> S", "proof (cases n)"], ["proof (state)\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow> pick S n \\<in> S\n 2. \\<And>nat. n = Suc nat \\<Longrightarrow> pick S n \\<in> S", "show \"n = 0 \\<Longrightarrow> pick S n \\<in> S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. n = 0 \\<Longrightarrow> pick S n \\<in> S", "unfolding pick.simps"], ["proof (prove)\ngoal (1 subgoal):\n 1. n = 0 \\<Longrightarrow> pick S n \\<in> S", "using \\<open>infinite S\\<close> LeastI pick.simps(1)"], ["proof (prove)\nusing this:\n  infinite S\n  ?P ?k \\<Longrightarrow> ?P (LEAST x. ?P x)\n  pick ?S 0 = (LEAST a. a \\<in> ?S)\n\ngoal (1 subgoal):\n 1. n = 0 \\<Longrightarrow> pick S n \\<in> S", "by (metis Collect_mem_eq not_finite_existsD)"], ["proof (state)\nthis:\n  n = 0 \\<Longrightarrow> pick S n \\<in> S\n\ngoal (1 subgoal):\n 1. \\<And>nat. n = Suc nat \\<Longrightarrow> pick S n \\<in> S", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>nat. n = Suc nat \\<Longrightarrow> pick S n \\<in> S", "fix n'"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>nat. n = Suc nat \\<Longrightarrow> pick S n \\<in> S", "assume \"n = Suc n'\""], ["proof (state)\nthis:\n  n = Suc n'\n\ngoal (1 subgoal):\n 1. \\<And>nat. n = Suc nat \\<Longrightarrow> pick S n \\<in> S", "obtain a where \"a\\<in>S \\<and> a > pick S n'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>a.\n        a \\<in> S \\<and> pick S n' < a \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using assms"], ["proof (prove)\nusing this:\n  infinite S\n\ngoal (1 subgoal):\n 1. (\\<And>a.\n        a \\<in> S \\<and> pick S n' < a \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (metis bounded_nat_set_is_finite less_Suc_eq nat_neq_iff)"], ["proof (state)\nthis:\n  a \\<in> S \\<and> pick S n' < a\n\ngoal (1 subgoal):\n 1. \\<And>nat. n = Suc nat \\<Longrightarrow> pick S n \\<in> S", "show \"pick S n \\<in> S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pick S n \\<in> S", "unfolding \\<open>n = Suc n'\\<close> pick.simps(2)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (LEAST a. a \\<in> S \\<and> pick S n' < a) \\<in> S", "using LeastI[of \"\\<lambda>a. a \\<in> S \\<and> pick S n' < a\" a, OF \\<open>a\\<in>S \\<and> a > pick S n'\\<close>]"], ["proof (prove)\nusing this:\n  (LEAST x. x \\<in> S \\<and> pick S n' < x) \\<in> S \\<and>\n  pick S n' < (LEAST x. x \\<in> S \\<and> pick S n' < x)\n\ngoal (1 subgoal):\n 1. (LEAST a. a \\<in> S \\<and> pick S n' < a) \\<in> S", "by blast"], ["proof (state)\nthis:\n  pick S n \\<in> S\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma pick_mono_inf:\nassumes \"infinite S\"\nshows \"m < n \\<Longrightarrow> pick S m < pick S n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. m < n \\<Longrightarrow> pick S m < pick S n", "using assms"], ["proof (prove)\nusing this:\n  infinite S\n\ngoal (1 subgoal):\n 1. m < n \\<Longrightarrow> pick S m < pick S n", "proof (induction n)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>m < 0; infinite S\\<rbrakk>\n    \\<Longrightarrow> pick S m < pick S 0\n 2. \\<And>n.\n       \\<lbrakk>\\<lbrakk>m < n; infinite S\\<rbrakk>\n                \\<Longrightarrow> pick S m < pick S n;\n        m < Suc n; infinite S\\<rbrakk>\n       \\<Longrightarrow> pick S m < pick S (Suc n)", "case 0"], ["proof (state)\nthis:\n  m < 0\n  infinite S\n\ngoal (2 subgoals):\n 1. \\<lbrakk>m < 0; infinite S\\<rbrakk>\n    \\<Longrightarrow> pick S m < pick S 0\n 2. \\<And>n.\n       \\<lbrakk>\\<lbrakk>m < n; infinite S\\<rbrakk>\n                \\<Longrightarrow> pick S m < pick S n;\n        m < Suc n; infinite S\\<rbrakk>\n       \\<Longrightarrow> pick S m < pick S (Suc n)", "then"], ["proof (chain)\npicking this:\n  m < 0\n  infinite S", "show ?case"], ["proof (prove)\nusing this:\n  m < 0\n  infinite S\n\ngoal (1 subgoal):\n 1. pick S m < pick S 0", "by auto"], ["proof (state)\nthis:\n  pick S m < pick S 0\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>\\<lbrakk>m < n; infinite S\\<rbrakk>\n                \\<Longrightarrow> pick S m < pick S n;\n        m < Suc n; infinite S\\<rbrakk>\n       \\<Longrightarrow> pick S m < pick S (Suc n)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>\\<lbrakk>m < n; infinite S\\<rbrakk>\n                \\<Longrightarrow> pick S m < pick S n;\n        m < Suc n; infinite S\\<rbrakk>\n       \\<Longrightarrow> pick S m < pick S (Suc n)", "case (Suc n)"], ["proof (state)\nthis:\n  \\<lbrakk>m < n; infinite S\\<rbrakk> \\<Longrightarrow> pick S m < pick S n\n  m < Suc n\n  infinite S\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>\\<lbrakk>m < n; infinite S\\<rbrakk>\n                \\<Longrightarrow> pick S m < pick S n;\n        m < Suc n; infinite S\\<rbrakk>\n       \\<Longrightarrow> pick S m < pick S (Suc n)", "then"], ["proof (chain)\npicking this:\n  \\<lbrakk>m < n; infinite S\\<rbrakk> \\<Longrightarrow> pick S m < pick S n\n  m < Suc n\n  infinite S", "obtain a where \"a \\<in> S \\<and> pick S n < a\""], ["proof (prove)\nusing this:\n  \\<lbrakk>m < n; infinite S\\<rbrakk> \\<Longrightarrow> pick S m < pick S n\n  m < Suc n\n  infinite S\n\ngoal (1 subgoal):\n 1. (\\<And>a.\n        a \\<in> S \\<and> pick S n < a \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (metis bounded_nat_set_is_finite less_Suc_eq nat_neq_iff)"], ["proof (state)\nthis:\n  a \\<in> S \\<and> pick S n < a\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>\\<lbrakk>m < n; infinite S\\<rbrakk>\n                \\<Longrightarrow> pick S m < pick S n;\n        m < Suc n; infinite S\\<rbrakk>\n       \\<Longrightarrow> pick S m < pick S (Suc n)", "then"], ["proof (chain)\npicking this:\n  a \\<in> S \\<and> pick S n < a", "have \"pick S n < pick S (Suc n)\""], ["proof (prove)\nusing this:\n  a \\<in> S \\<and> pick S n < a\n\ngoal (1 subgoal):\n 1. pick S n < pick S (Suc n)", "unfolding pick.simps"], ["proof (prove)\nusing this:\n  a \\<in> S \\<and> pick S n < a\n\ngoal (1 subgoal):\n 1. pick S n < (LEAST a. a \\<in> S \\<and> pick S n < a)", "using LeastI[of \"\\<lambda>a. a \\<in> S \\<and> pick S n < a\" a, OF \\<open>a\\<in>S \\<and> a > pick S n\\<close>]"], ["proof (prove)\nusing this:\n  a \\<in> S \\<and> pick S n < a\n  (LEAST x. x \\<in> S \\<and> pick S n < x) \\<in> S \\<and>\n  pick S n < (LEAST x. x \\<in> S \\<and> pick S n < x)\n\ngoal (1 subgoal):\n 1. pick S n < (LEAST a. a \\<in> S \\<and> pick S n < a)", "by simp"], ["proof (state)\nthis:\n  pick S n < pick S (Suc n)\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>\\<lbrakk>m < n; infinite S\\<rbrakk>\n                \\<Longrightarrow> pick S m < pick S n;\n        m < Suc n; infinite S\\<rbrakk>\n       \\<Longrightarrow> pick S m < pick S (Suc n)", "then"], ["proof (chain)\npicking this:\n  pick S n < pick S (Suc n)", "show ?case"], ["proof (prove)\nusing this:\n  pick S n < pick S (Suc n)\n\ngoal (1 subgoal):\n 1. pick S m < pick S (Suc n)", "using Suc.IH Suc.prems(1) assms dual_order.strict_trans less_Suc_eq"], ["proof (prove)\nusing this:\n  pick S n < pick S (Suc n)\n  \\<lbrakk>m < n; infinite S\\<rbrakk> \\<Longrightarrow> pick S m < pick S n\n  m < Suc n\n  infinite S\n  \\<lbrakk>?b < ?a; ?c < ?b\\<rbrakk> \\<Longrightarrow> ?c < ?a\n  (?m < Suc ?n) = (?m < ?n \\<or> ?m = ?n)\n\ngoal (1 subgoal):\n 1. pick S m < pick S (Suc n)", "by auto"], ["proof (state)\nthis:\n  pick S m < pick S (Suc n)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma pick_eq_iff_inf:\nassumes \"infinite S\"\nshows \"x = y \\<longleftrightarrow> pick S x = pick S y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (x = y) = (pick S x = pick S y)", "by (metis assms nat_neq_iff pick_mono_inf)"], ["", "lemma card_le_pick_inf:\nassumes \"infinite S\"\nand \"pick S n \\<ge> i\"\nshows \"card {a\\<in>S. a < i} \\<le> n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card {a \\<in> S. a < i} \\<le> n", "using assms"], ["proof (prove)\nusing this:\n  infinite S\n  i \\<le> pick S n\n\ngoal (1 subgoal):\n 1. card {a \\<in> S. a < i} \\<le> n", "proof (induction n arbitrary:i)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>i.\n       \\<lbrakk>infinite S; i \\<le> pick S 0\\<rbrakk>\n       \\<Longrightarrow> card {a \\<in> S. a < i} \\<le> 0\n 2. \\<And>n i.\n       \\<lbrakk>\\<And>i.\n                   \\<lbrakk>infinite S; i \\<le> pick S n\\<rbrakk>\n                   \\<Longrightarrow> card {a \\<in> S. a < i} \\<le> n;\n        infinite S; i \\<le> pick S (Suc n)\\<rbrakk>\n       \\<Longrightarrow> card {a \\<in> S. a < i} \\<le> Suc n", "case 0"], ["proof (state)\nthis:\n  infinite S\n  i \\<le> pick S 0\n\ngoal (2 subgoals):\n 1. \\<And>i.\n       \\<lbrakk>infinite S; i \\<le> pick S 0\\<rbrakk>\n       \\<Longrightarrow> card {a \\<in> S. a < i} \\<le> 0\n 2. \\<And>n i.\n       \\<lbrakk>\\<And>i.\n                   \\<lbrakk>infinite S; i \\<le> pick S n\\<rbrakk>\n                   \\<Longrightarrow> card {a \\<in> S. a < i} \\<le> n;\n        infinite S; i \\<le> pick S (Suc n)\\<rbrakk>\n       \\<Longrightarrow> card {a \\<in> S. a < i} \\<le> Suc n", "then"], ["proof (chain)\npicking this:\n  infinite S\n  i \\<le> pick S 0", "show ?case"], ["proof (prove)\nusing this:\n  infinite S\n  i \\<le> pick S 0\n\ngoal (1 subgoal):\n 1. card {a \\<in> S. a < i} \\<le> 0", "unfolding pick.simps"], ["proof (prove)\nusing this:\n  infinite S\n  i \\<le> (LEAST a. a \\<in> S)\n\ngoal (1 subgoal):\n 1. card {a \\<in> S. a < i} \\<le> 0", "using not_less_Least"], ["proof (prove)\nusing this:\n  infinite S\n  i \\<le> (LEAST a. a \\<in> S)\n  ?k < (LEAST x. ?P x) \\<Longrightarrow> \\<not> ?P ?k\n\ngoal (1 subgoal):\n 1. card {a \\<in> S. a < i} \\<le> 0", "by (metis (no_types, lifting) Collect_empty_eq card_0_eq card_ge_0_finite dual_order.strict_trans1 leI le_0_eq)"], ["proof (state)\nthis:\n  card {a \\<in> S. a < i} \\<le> 0\n\ngoal (1 subgoal):\n 1. \\<And>n i.\n       \\<lbrakk>\\<And>i.\n                   \\<lbrakk>infinite S; i \\<le> pick S n\\<rbrakk>\n                   \\<Longrightarrow> card {a \\<in> S. a < i} \\<le> n;\n        infinite S; i \\<le> pick S (Suc n)\\<rbrakk>\n       \\<Longrightarrow> card {a \\<in> S. a < i} \\<le> Suc n", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n i.\n       \\<lbrakk>\\<And>i.\n                   \\<lbrakk>infinite S; i \\<le> pick S n\\<rbrakk>\n                   \\<Longrightarrow> card {a \\<in> S. a < i} \\<le> n;\n        infinite S; i \\<le> pick S (Suc n)\\<rbrakk>\n       \\<Longrightarrow> card {a \\<in> S. a < i} \\<le> Suc n", "case (Suc n)"], ["proof (state)\nthis:\n  \\<lbrakk>infinite S; ?i \\<le> pick S n\\<rbrakk>\n  \\<Longrightarrow> card {a \\<in> S. a < ?i} \\<le> n\n  infinite S\n  i \\<le> pick S (Suc n)\n\ngoal (1 subgoal):\n 1. \\<And>n i.\n       \\<lbrakk>\\<And>i.\n                   \\<lbrakk>infinite S; i \\<le> pick S n\\<rbrakk>\n                   \\<Longrightarrow> card {a \\<in> S. a < i} \\<le> n;\n        infinite S; i \\<le> pick S (Suc n)\\<rbrakk>\n       \\<Longrightarrow> card {a \\<in> S. a < i} \\<le> Suc n", "then"], ["proof (chain)\npicking this:\n  \\<lbrakk>infinite S; ?i \\<le> pick S n\\<rbrakk>\n  \\<Longrightarrow> card {a \\<in> S. a < ?i} \\<le> n\n  infinite S\n  i \\<le> pick S (Suc n)", "show ?case"], ["proof (prove)\nusing this:\n  \\<lbrakk>infinite S; ?i \\<le> pick S n\\<rbrakk>\n  \\<Longrightarrow> card {a \\<in> S. a < ?i} \\<le> n\n  infinite S\n  i \\<le> pick S (Suc n)\n\ngoal (1 subgoal):\n 1. card {a \\<in> S. a < i} \\<le> Suc n", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>i.\n                \\<lbrakk>infinite S; i \\<le> pick S n\\<rbrakk>\n                \\<Longrightarrow> card {a \\<in> S. a < i} \\<le> n;\n     infinite S; i \\<le> pick S (Suc n)\\<rbrakk>\n    \\<Longrightarrow> card {a \\<in> S. a < i} \\<le> Suc n", "have \"card {a \\<in> S. a < pick S n} \\<le> n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card {a \\<in> S. a < pick S n} \\<le> n", "using Suc"], ["proof (prove)\nusing this:\n  \\<lbrakk>infinite S; ?i \\<le> pick S n\\<rbrakk>\n  \\<Longrightarrow> card {a \\<in> S. a < ?i} \\<le> n\n  infinite S\n  i \\<le> pick S (Suc n)\n\ngoal (1 subgoal):\n 1. card {a \\<in> S. a < pick S n} \\<le> n", "by blast"], ["proof (state)\nthis:\n  card {a \\<in> S. a < pick S n} \\<le> n\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>i.\n                \\<lbrakk>infinite S; i \\<le> pick S n\\<rbrakk>\n                \\<Longrightarrow> card {a \\<in> S. a < i} \\<le> n;\n     infinite S; i \\<le> pick S (Suc n)\\<rbrakk>\n    \\<Longrightarrow> card {a \\<in> S. a < i} \\<le> Suc n", "have \"{a \\<in> S. a < i} \\<subseteq> {a \\<in> S. a < pick S (Suc n)}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {a \\<in> S. a < i} \\<subseteq> {a \\<in> S. a < pick S (Suc n)}", "using Suc.prems(2)"], ["proof (prove)\nusing this:\n  i \\<le> pick S (Suc n)\n\ngoal (1 subgoal):\n 1. {a \\<in> S. a < i} \\<subseteq> {a \\<in> S. a < pick S (Suc n)}", "by auto"], ["proof (state)\nthis:\n  {a \\<in> S. a < i} \\<subseteq> {a \\<in> S. a < pick S (Suc n)}\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>i.\n                \\<lbrakk>infinite S; i \\<le> pick S n\\<rbrakk>\n                \\<Longrightarrow> card {a \\<in> S. a < i} \\<le> n;\n     infinite S; i \\<le> pick S (Suc n)\\<rbrakk>\n    \\<Longrightarrow> card {a \\<in> S. a < i} \\<le> Suc n", "have \"{a \\<in> S. a < pick S (Suc n)} = {a \\<in> S. a < pick S n} \\<union> {pick S n}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {a \\<in> S. a < pick S (Suc n)} =\n    {a \\<in> S. a < pick S n} \\<union> {pick S n}", "apply (rule subset_antisym; rule subsetI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> {a \\<in> S. a < pick S (Suc n)} \\<Longrightarrow>\n       x \\<in> {a \\<in> S. a < pick S n} \\<union> {pick S n}\n 2. \\<And>x.\n       x \\<in> {a \\<in> S. a < pick S n} \\<union>\n               {pick S n} \\<Longrightarrow>\n       x \\<in> {a \\<in> S. a < pick S (Suc n)}", "using not_less_Least UnCI mem_Collect_eq nat_neq_iff singleton_conv\n       pick_mono_inf[OF Suc.prems(1), of n \"Suc n\"] pick_in_set_inf[OF Suc.prems(1), of n]"], ["proof (prove)\nusing this:\n  ?k < (LEAST x. ?P x) \\<Longrightarrow> \\<not> ?P ?k\n  (?c \\<notin> ?B \\<Longrightarrow> ?c \\<in> ?A) \\<Longrightarrow>\n  ?c \\<in> ?A \\<union> ?B\n  (?a \\<in> Collect ?P) = ?P ?a\n  (?m \\<noteq> ?n) = (?m < ?n \\<or> ?n < ?m)\n  {x. x = ?a} = {?a}\n  n < Suc n \\<Longrightarrow> pick S n < pick S (Suc n)\n  pick S n \\<in> S\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> {a \\<in> S. a < pick S (Suc n)} \\<Longrightarrow>\n       x \\<in> {a \\<in> S. a < pick S n} \\<union> {pick S n}\n 2. \\<And>x.\n       x \\<in> {a \\<in> S. a < pick S n} \\<union>\n               {pick S n} \\<Longrightarrow>\n       x \\<in> {a \\<in> S. a < pick S (Suc n)}", "by fastforce+"], ["proof (state)\nthis:\n  {a \\<in> S. a < pick S (Suc n)} =\n  {a \\<in> S. a < pick S n} \\<union> {pick S n}\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>i.\n                \\<lbrakk>infinite S; i \\<le> pick S n\\<rbrakk>\n                \\<Longrightarrow> card {a \\<in> S. a < i} \\<le> n;\n     infinite S; i \\<le> pick S (Suc n)\\<rbrakk>\n    \\<Longrightarrow> card {a \\<in> S. a < i} \\<le> Suc n", "then"], ["proof (chain)\npicking this:\n  {a \\<in> S. a < pick S (Suc n)} =\n  {a \\<in> S. a < pick S n} \\<union> {pick S n}", "have \"card {a \\<in> S. a < i} \\<le> card {a \\<in> S. a < pick S n} + card {pick S n}\""], ["proof (prove)\nusing this:\n  {a \\<in> S. a < pick S (Suc n)} =\n  {a \\<in> S. a < pick S n} \\<union> {pick S n}\n\ngoal (1 subgoal):\n 1. card {a \\<in> S. a < i}\n    \\<le> card {a \\<in> S. a < pick S n} + card {pick S n}", "using card_Un_disjoint  card_mono[OF _ \\<open>{a \\<in> S. a < i} \\<subseteq> {a \\<in> S. a < pick S (Suc n)}\\<close>]"], ["proof (prove)\nusing this:\n  {a \\<in> S. a < pick S (Suc n)} =\n  {a \\<in> S. a < pick S n} \\<union> {pick S n}\n  \\<lbrakk>finite ?A; finite ?B; ?A \\<inter> ?B = {}\\<rbrakk>\n  \\<Longrightarrow> card (?A \\<union> ?B) = card ?A + card ?B\n  finite {a \\<in> S. a < pick S (Suc n)} \\<Longrightarrow>\n  card {a \\<in> S. a < i} \\<le> card {a \\<in> S. a < pick S (Suc n)}\n\ngoal (1 subgoal):\n 1. card {a \\<in> S. a < i}\n    \\<le> card {a \\<in> S. a < pick S n} + card {pick S n}", "by simp"], ["proof (state)\nthis:\n  card {a \\<in> S. a < i}\n  \\<le> card {a \\<in> S. a < pick S n} + card {pick S n}\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>i.\n                \\<lbrakk>infinite S; i \\<le> pick S n\\<rbrakk>\n                \\<Longrightarrow> card {a \\<in> S. a < i} \\<le> n;\n     infinite S; i \\<le> pick S (Suc n)\\<rbrakk>\n    \\<Longrightarrow> card {a \\<in> S. a < i} \\<le> Suc n", "then"], ["proof (chain)\npicking this:\n  card {a \\<in> S. a < i}\n  \\<le> card {a \\<in> S. a < pick S n} + card {pick S n}", "show ?thesis"], ["proof (prove)\nusing this:\n  card {a \\<in> S. a < i}\n  \\<le> card {a \\<in> S. a < pick S n} + card {pick S n}\n\ngoal (1 subgoal):\n 1. card {a \\<in> S. a < i} \\<le> Suc n", "using \\<open>card {a \\<in> S. a < pick S n} \\<le> n\\<close>"], ["proof (prove)\nusing this:\n  card {a \\<in> S. a < i}\n  \\<le> card {a \\<in> S. a < pick S n} + card {pick S n}\n  card {a \\<in> S. a < pick S n} \\<le> n\n\ngoal (1 subgoal):\n 1. card {a \\<in> S. a < i} \\<le> Suc n", "by auto"], ["proof (state)\nthis:\n  card {a \\<in> S. a < i} \\<le> Suc n\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  card {a \\<in> S. a < i} \\<le> Suc n\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma card_pick_inf:\nassumes \"infinite S\"\nshows \"card {a\\<in>S. a < pick S n} = n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card {a \\<in> S. a < pick S n} = n", "using assms"], ["proof (prove)\nusing this:\n  infinite S\n\ngoal (1 subgoal):\n 1. card {a \\<in> S. a < pick S n} = n", "proof (induction n)"], ["proof (state)\ngoal (2 subgoals):\n 1. infinite S \\<Longrightarrow> card {a \\<in> S. a < pick S 0} = 0\n 2. \\<And>n.\n       \\<lbrakk>infinite S \\<Longrightarrow>\n                card {a \\<in> S. a < pick S n} = n;\n        infinite S\\<rbrakk>\n       \\<Longrightarrow> card {a \\<in> S. a < pick S (Suc n)} = Suc n", "case 0"], ["proof (state)\nthis:\n  infinite S\n\ngoal (2 subgoals):\n 1. infinite S \\<Longrightarrow> card {a \\<in> S. a < pick S 0} = 0\n 2. \\<And>n.\n       \\<lbrakk>infinite S \\<Longrightarrow>\n                card {a \\<in> S. a < pick S n} = n;\n        infinite S\\<rbrakk>\n       \\<Longrightarrow> card {a \\<in> S. a < pick S (Suc n)} = Suc n", "then"], ["proof (chain)\npicking this:\n  infinite S", "show ?case"], ["proof (prove)\nusing this:\n  infinite S\n\ngoal (1 subgoal):\n 1. card {a \\<in> S. a < pick S 0} = 0", "unfolding pick.simps"], ["proof (prove)\nusing this:\n  infinite S\n\ngoal (1 subgoal):\n 1. card {a \\<in> S. a < (LEAST a. a \\<in> S)} = 0", "using not_less_Least"], ["proof (prove)\nusing this:\n  infinite S\n  ?k < (LEAST x. ?P x) \\<Longrightarrow> \\<not> ?P ?k\n\ngoal (1 subgoal):\n 1. card {a \\<in> S. a < (LEAST a. a \\<in> S)} = 0", "by auto"], ["proof (state)\nthis:\n  card {a \\<in> S. a < pick S 0} = 0\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>infinite S \\<Longrightarrow>\n                card {a \\<in> S. a < pick S n} = n;\n        infinite S\\<rbrakk>\n       \\<Longrightarrow> card {a \\<in> S. a < pick S (Suc n)} = Suc n", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>infinite S \\<Longrightarrow>\n                card {a \\<in> S. a < pick S n} = n;\n        infinite S\\<rbrakk>\n       \\<Longrightarrow> card {a \\<in> S. a < pick S (Suc n)} = Suc n", "case (Suc n)"], ["proof (state)\nthis:\n  infinite S \\<Longrightarrow> card {a \\<in> S. a < pick S n} = n\n  infinite S\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>infinite S \\<Longrightarrow>\n                card {a \\<in> S. a < pick S n} = n;\n        infinite S\\<rbrakk>\n       \\<Longrightarrow> card {a \\<in> S. a < pick S (Suc n)} = Suc n", "then"], ["proof (chain)\npicking this:\n  infinite S \\<Longrightarrow> card {a \\<in> S. a < pick S n} = n\n  infinite S", "show \"card {a\\<in>S. a < pick S (Suc n)} = Suc n\""], ["proof (prove)\nusing this:\n  infinite S \\<Longrightarrow> card {a \\<in> S. a < pick S n} = n\n  infinite S\n\ngoal (1 subgoal):\n 1. card {a \\<in> S. a < pick S (Suc n)} = Suc n", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>infinite S \\<Longrightarrow>\n             card {a \\<in> S. a < pick S n} = n;\n     infinite S\\<rbrakk>\n    \\<Longrightarrow> card {a \\<in> S. a < pick S (Suc n)} = Suc n", "have \"{a \\<in> S. a < pick S (Suc n)} = {a \\<in> S. a < pick S n} \\<union> {pick S n}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {a \\<in> S. a < pick S (Suc n)} =\n    {a \\<in> S. a < pick S n} \\<union> {pick S n}", "apply (rule subset_antisym; rule subsetI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> {a \\<in> S. a < pick S (Suc n)} \\<Longrightarrow>\n       x \\<in> {a \\<in> S. a < pick S n} \\<union> {pick S n}\n 2. \\<And>x.\n       x \\<in> {a \\<in> S. a < pick S n} \\<union>\n               {pick S n} \\<Longrightarrow>\n       x \\<in> {a \\<in> S. a < pick S (Suc n)}", "using not_less_Least UnCI mem_Collect_eq nat_neq_iff singleton_conv\n       pick_mono_inf[OF Suc.prems, of n \"Suc n\"] pick_in_set_inf[OF Suc.prems, of n]"], ["proof (prove)\nusing this:\n  ?k < (LEAST x. ?P x) \\<Longrightarrow> \\<not> ?P ?k\n  (?c \\<notin> ?B \\<Longrightarrow> ?c \\<in> ?A) \\<Longrightarrow>\n  ?c \\<in> ?A \\<union> ?B\n  (?a \\<in> Collect ?P) = ?P ?a\n  (?m \\<noteq> ?n) = (?m < ?n \\<or> ?n < ?m)\n  {x. x = ?a} = {?a}\n  n < Suc n \\<Longrightarrow> pick S n < pick S (Suc n)\n  pick S n \\<in> S\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> {a \\<in> S. a < pick S (Suc n)} \\<Longrightarrow>\n       x \\<in> {a \\<in> S. a < pick S n} \\<union> {pick S n}\n 2. \\<And>x.\n       x \\<in> {a \\<in> S. a < pick S n} \\<union>\n               {pick S n} \\<Longrightarrow>\n       x \\<in> {a \\<in> S. a < pick S (Suc n)}", "by fastforce+"], ["proof (state)\nthis:\n  {a \\<in> S. a < pick S (Suc n)} =\n  {a \\<in> S. a < pick S n} \\<union> {pick S n}\n\ngoal (1 subgoal):\n 1. \\<lbrakk>infinite S \\<Longrightarrow>\n             card {a \\<in> S. a < pick S n} = n;\n     infinite S\\<rbrakk>\n    \\<Longrightarrow> card {a \\<in> S. a < pick S (Suc n)} = Suc n", "then"], ["proof (chain)\npicking this:\n  {a \\<in> S. a < pick S (Suc n)} =\n  {a \\<in> S. a < pick S n} \\<union> {pick S n}", "have \"card {a \\<in> S. a < pick S (Suc n)} = card {a \\<in> S. a < pick S n} + card {pick S n}\""], ["proof (prove)\nusing this:\n  {a \\<in> S. a < pick S (Suc n)} =\n  {a \\<in> S. a < pick S n} \\<union> {pick S n}\n\ngoal (1 subgoal):\n 1. card {a \\<in> S. a < pick S (Suc n)} =\n    card {a \\<in> S. a < pick S n} + card {pick S n}", "using card_Un_disjoint"], ["proof (prove)\nusing this:\n  {a \\<in> S. a < pick S (Suc n)} =\n  {a \\<in> S. a < pick S n} \\<union> {pick S n}\n  \\<lbrakk>finite ?A; finite ?B; ?A \\<inter> ?B = {}\\<rbrakk>\n  \\<Longrightarrow> card (?A \\<union> ?B) = card ?A + card ?B\n\ngoal (1 subgoal):\n 1. card {a \\<in> S. a < pick S (Suc n)} =\n    card {a \\<in> S. a < pick S n} + card {pick S n}", "by auto"], ["proof (state)\nthis:\n  card {a \\<in> S. a < pick S (Suc n)} =\n  card {a \\<in> S. a < pick S n} + card {pick S n}\n\ngoal (1 subgoal):\n 1. \\<lbrakk>infinite S \\<Longrightarrow>\n             card {a \\<in> S. a < pick S n} = n;\n     infinite S\\<rbrakk>\n    \\<Longrightarrow> card {a \\<in> S. a < pick S (Suc n)} = Suc n", "then"], ["proof (chain)\npicking this:\n  card {a \\<in> S. a < pick S (Suc n)} =\n  card {a \\<in> S. a < pick S n} + card {pick S n}", "show ?thesis"], ["proof (prove)\nusing this:\n  card {a \\<in> S. a < pick S (Suc n)} =\n  card {a \\<in> S. a < pick S n} + card {pick S n}\n\ngoal (1 subgoal):\n 1. card {a \\<in> S. a < pick S (Suc n)} = Suc n", "by (metis One_nat_def Suc_eq_plus1 Suc card.empty card_insert_if empty_iff finite.emptyI)"], ["proof (state)\nthis:\n  card {a \\<in> S. a < pick S (Suc n)} = Suc n\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  card {a \\<in> S. a < pick S (Suc n)} = Suc n\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma\nassumes \"n < card S\"\nshows\n  pick_in_set_le:\"pick S n \\<in> S\" and\n  card_pick_le: \"card {a\\<in>S. a < pick S n} = n\" and\n  pick_mono_le: \"m < n \\<Longrightarrow> pick S m < pick S n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pick S n \\<in> S &&&\n    card {a \\<in> S. a < pick S n} = n &&&\n    (m < n \\<Longrightarrow> pick S m < pick S n)", "using assms"], ["proof (prove)\nusing this:\n  n < card S\n\ngoal (1 subgoal):\n 1. pick S n \\<in> S &&&\n    card {a \\<in> S. a < pick S n} = n &&&\n    (m < n \\<Longrightarrow> pick S m < pick S n)", "proof (induction n)"], ["proof (state)\ngoal (6 subgoals):\n 1. 0 < card S \\<Longrightarrow> pick S 0 \\<in> S\n 2. 0 < card S \\<Longrightarrow> card {a \\<in> S. a < pick S 0} = 0\n 3. \\<lbrakk>m < 0; 0 < card S\\<rbrakk>\n    \\<Longrightarrow> pick S m < pick S 0\n 4. \\<And>n.\n       \\<lbrakk>n < card S \\<Longrightarrow> pick S n \\<in> S;\n        n < card S \\<Longrightarrow> card {a \\<in> S. a < pick S n} = n;\n        \\<lbrakk>m < n; n < card S\\<rbrakk>\n        \\<Longrightarrow> pick S m < pick S n;\n        Suc n < card S\\<rbrakk>\n       \\<Longrightarrow> pick S (Suc n) \\<in> S\n 5. \\<And>n.\n       \\<lbrakk>n < card S \\<Longrightarrow> pick S n \\<in> S;\n        n < card S \\<Longrightarrow> card {a \\<in> S. a < pick S n} = n;\n        \\<lbrakk>m < n; n < card S\\<rbrakk>\n        \\<Longrightarrow> pick S m < pick S n;\n        Suc n < card S\\<rbrakk>\n       \\<Longrightarrow> card {a \\<in> S. a < pick S (Suc n)} = Suc n\n 6. \\<And>n.\n       \\<lbrakk>n < card S \\<Longrightarrow> pick S n \\<in> S;\n        n < card S \\<Longrightarrow> card {a \\<in> S. a < pick S n} = n;\n        \\<lbrakk>m < n; n < card S\\<rbrakk>\n        \\<Longrightarrow> pick S m < pick S n;\n        m < Suc n; Suc n < card S\\<rbrakk>\n       \\<Longrightarrow> pick S m < pick S (Suc n)", "assume \"0 < card S\""], ["proof (state)\nthis:\n  0 < card S\n\ngoal (6 subgoals):\n 1. 0 < card S \\<Longrightarrow> pick S 0 \\<in> S\n 2. 0 < card S \\<Longrightarrow> card {a \\<in> S. a < pick S 0} = 0\n 3. \\<lbrakk>m < 0; 0 < card S\\<rbrakk>\n    \\<Longrightarrow> pick S m < pick S 0\n 4. \\<And>n.\n       \\<lbrakk>n < card S \\<Longrightarrow> pick S n \\<in> S;\n        n < card S \\<Longrightarrow> card {a \\<in> S. a < pick S n} = n;\n        \\<lbrakk>m < n; n < card S\\<rbrakk>\n        \\<Longrightarrow> pick S m < pick S n;\n        Suc n < card S\\<rbrakk>\n       \\<Longrightarrow> pick S (Suc n) \\<in> S\n 5. \\<And>n.\n       \\<lbrakk>n < card S \\<Longrightarrow> pick S n \\<in> S;\n        n < card S \\<Longrightarrow> card {a \\<in> S. a < pick S n} = n;\n        \\<lbrakk>m < n; n < card S\\<rbrakk>\n        \\<Longrightarrow> pick S m < pick S n;\n        Suc n < card S\\<rbrakk>\n       \\<Longrightarrow> card {a \\<in> S. a < pick S (Suc n)} = Suc n\n 6. \\<And>n.\n       \\<lbrakk>n < card S \\<Longrightarrow> pick S n \\<in> S;\n        n < card S \\<Longrightarrow> card {a \\<in> S. a < pick S n} = n;\n        \\<lbrakk>m < n; n < card S\\<rbrakk>\n        \\<Longrightarrow> pick S m < pick S n;\n        m < Suc n; Suc n < card S\\<rbrakk>\n       \\<Longrightarrow> pick S m < pick S (Suc n)", "then"], ["proof (chain)\npicking this:\n  0 < card S", "obtain x where \"x\\<in>S\""], ["proof (prove)\nusing this:\n  0 < card S\n\ngoal (1 subgoal):\n 1. (\\<And>x. x \\<in> S \\<Longrightarrow> thesis) \\<Longrightarrow> thesis", "by fastforce"], ["proof (state)\nthis:\n  x \\<in> S\n\ngoal (6 subgoals):\n 1. 0 < card S \\<Longrightarrow> pick S 0 \\<in> S\n 2. 0 < card S \\<Longrightarrow> card {a \\<in> S. a < pick S 0} = 0\n 3. \\<lbrakk>m < 0; 0 < card S\\<rbrakk>\n    \\<Longrightarrow> pick S m < pick S 0\n 4. \\<And>n.\n       \\<lbrakk>n < card S \\<Longrightarrow> pick S n \\<in> S;\n        n < card S \\<Longrightarrow> card {a \\<in> S. a < pick S n} = n;\n        \\<lbrakk>m < n; n < card S\\<rbrakk>\n        \\<Longrightarrow> pick S m < pick S n;\n        Suc n < card S\\<rbrakk>\n       \\<Longrightarrow> pick S (Suc n) \\<in> S\n 5. \\<And>n.\n       \\<lbrakk>n < card S \\<Longrightarrow> pick S n \\<in> S;\n        n < card S \\<Longrightarrow> card {a \\<in> S. a < pick S n} = n;\n        \\<lbrakk>m < n; n < card S\\<rbrakk>\n        \\<Longrightarrow> pick S m < pick S n;\n        Suc n < card S\\<rbrakk>\n       \\<Longrightarrow> card {a \\<in> S. a < pick S (Suc n)} = Suc n\n 6. \\<And>n.\n       \\<lbrakk>n < card S \\<Longrightarrow> pick S n \\<in> S;\n        n < card S \\<Longrightarrow> card {a \\<in> S. a < pick S n} = n;\n        \\<lbrakk>m < n; n < card S\\<rbrakk>\n        \\<Longrightarrow> pick S m < pick S n;\n        m < Suc n; Suc n < card S\\<rbrakk>\n       \\<Longrightarrow> pick S m < pick S (Suc n)", "then"], ["proof (chain)\npicking this:\n  x \\<in> S", "show \"pick S 0 \\<in> S\""], ["proof (prove)\nusing this:\n  x \\<in> S\n\ngoal (1 subgoal):\n 1. pick S 0 \\<in> S", "unfolding pick.simps"], ["proof (prove)\nusing this:\n  x \\<in> S\n\ngoal (1 subgoal):\n 1. (LEAST a. a \\<in> S) \\<in> S", "by (meson LeastI)"], ["proof (state)\nthis:\n  pick S 0 \\<in> S\n\ngoal (5 subgoals):\n 1. 0 < card S \\<Longrightarrow> card {a \\<in> S. a < pick S 0} = 0\n 2. \\<lbrakk>m < 0; 0 < card S\\<rbrakk>\n    \\<Longrightarrow> pick S m < pick S 0\n 3. \\<And>n.\n       \\<lbrakk>n < card S \\<Longrightarrow> pick S n \\<in> S;\n        n < card S \\<Longrightarrow> card {a \\<in> S. a < pick S n} = n;\n        \\<lbrakk>m < n; n < card S\\<rbrakk>\n        \\<Longrightarrow> pick S m < pick S n;\n        Suc n < card S\\<rbrakk>\n       \\<Longrightarrow> pick S (Suc n) \\<in> S\n 4. \\<And>n.\n       \\<lbrakk>n < card S \\<Longrightarrow> pick S n \\<in> S;\n        n < card S \\<Longrightarrow> card {a \\<in> S. a < pick S n} = n;\n        \\<lbrakk>m < n; n < card S\\<rbrakk>\n        \\<Longrightarrow> pick S m < pick S n;\n        Suc n < card S\\<rbrakk>\n       \\<Longrightarrow> card {a \\<in> S. a < pick S (Suc n)} = Suc n\n 5. \\<And>n.\n       \\<lbrakk>n < card S \\<Longrightarrow> pick S n \\<in> S;\n        n < card S \\<Longrightarrow> card {a \\<in> S. a < pick S n} = n;\n        \\<lbrakk>m < n; n < card S\\<rbrakk>\n        \\<Longrightarrow> pick S m < pick S n;\n        m < Suc n; Suc n < card S\\<rbrakk>\n       \\<Longrightarrow> pick S m < pick S (Suc n)", "then"], ["proof (chain)\npicking this:\n  pick S 0 \\<in> S", "show \"card {a \\<in> S. a < pick S 0} = 0\""], ["proof (prove)\nusing this:\n  pick S 0 \\<in> S\n\ngoal (1 subgoal):\n 1. card {a \\<in> S. a < pick S 0} = 0", "using not_less_Least"], ["proof (prove)\nusing this:\n  pick S 0 \\<in> S\n  ?k < (LEAST x. ?P x) \\<Longrightarrow> \\<not> ?P ?k\n\ngoal (1 subgoal):\n 1. card {a \\<in> S. a < pick S 0} = 0", "by auto"], ["proof (state)\nthis:\n  card {a \\<in> S. a < pick S 0} = 0\n\ngoal (4 subgoals):\n 1. \\<lbrakk>m < 0; 0 < card S\\<rbrakk>\n    \\<Longrightarrow> pick S m < pick S 0\n 2. \\<And>n.\n       \\<lbrakk>n < card S \\<Longrightarrow> pick S n \\<in> S;\n        n < card S \\<Longrightarrow> card {a \\<in> S. a < pick S n} = n;\n        \\<lbrakk>m < n; n < card S\\<rbrakk>\n        \\<Longrightarrow> pick S m < pick S n;\n        Suc n < card S\\<rbrakk>\n       \\<Longrightarrow> pick S (Suc n) \\<in> S\n 3. \\<And>n.\n       \\<lbrakk>n < card S \\<Longrightarrow> pick S n \\<in> S;\n        n < card S \\<Longrightarrow> card {a \\<in> S. a < pick S n} = n;\n        \\<lbrakk>m < n; n < card S\\<rbrakk>\n        \\<Longrightarrow> pick S m < pick S n;\n        Suc n < card S\\<rbrakk>\n       \\<Longrightarrow> card {a \\<in> S. a < pick S (Suc n)} = Suc n\n 4. \\<And>n.\n       \\<lbrakk>n < card S \\<Longrightarrow> pick S n \\<in> S;\n        n < card S \\<Longrightarrow> card {a \\<in> S. a < pick S n} = n;\n        \\<lbrakk>m < n; n < card S\\<rbrakk>\n        \\<Longrightarrow> pick S m < pick S n;\n        m < Suc n; Suc n < card S\\<rbrakk>\n       \\<Longrightarrow> pick S m < pick S (Suc n)", "show \"m < 0 \\<Longrightarrow>  pick S m < pick S 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. m < 0 \\<Longrightarrow> pick S m < pick S 0", "by auto"], ["proof (state)\nthis:\n  m < 0 \\<Longrightarrow> pick S m < pick S 0\n\ngoal (3 subgoals):\n 1. \\<And>n.\n       \\<lbrakk>n < card S \\<Longrightarrow> pick S n \\<in> S;\n        n < card S \\<Longrightarrow> card {a \\<in> S. a < pick S n} = n;\n        \\<lbrakk>m < n; n < card S\\<rbrakk>\n        \\<Longrightarrow> pick S m < pick S n;\n        Suc n < card S\\<rbrakk>\n       \\<Longrightarrow> pick S (Suc n) \\<in> S\n 2. \\<And>n.\n       \\<lbrakk>n < card S \\<Longrightarrow> pick S n \\<in> S;\n        n < card S \\<Longrightarrow> card {a \\<in> S. a < pick S n} = n;\n        \\<lbrakk>m < n; n < card S\\<rbrakk>\n        \\<Longrightarrow> pick S m < pick S n;\n        Suc n < card S\\<rbrakk>\n       \\<Longrightarrow> card {a \\<in> S. a < pick S (Suc n)} = Suc n\n 3. \\<And>n.\n       \\<lbrakk>n < card S \\<Longrightarrow> pick S n \\<in> S;\n        n < card S \\<Longrightarrow> card {a \\<in> S. a < pick S n} = n;\n        \\<lbrakk>m < n; n < card S\\<rbrakk>\n        \\<Longrightarrow> pick S m < pick S n;\n        m < Suc n; Suc n < card S\\<rbrakk>\n       \\<Longrightarrow> pick S m < pick S (Suc n)", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>n.\n       \\<lbrakk>n < card S \\<Longrightarrow> pick S n \\<in> S;\n        n < card S \\<Longrightarrow> card {a \\<in> S. a < pick S n} = n;\n        \\<lbrakk>m < n; n < card S\\<rbrakk>\n        \\<Longrightarrow> pick S m < pick S n;\n        Suc n < card S\\<rbrakk>\n       \\<Longrightarrow> pick S (Suc n) \\<in> S\n 2. \\<And>n.\n       \\<lbrakk>n < card S \\<Longrightarrow> pick S n \\<in> S;\n        n < card S \\<Longrightarrow> card {a \\<in> S. a < pick S n} = n;\n        \\<lbrakk>m < n; n < card S\\<rbrakk>\n        \\<Longrightarrow> pick S m < pick S n;\n        Suc n < card S\\<rbrakk>\n       \\<Longrightarrow> card {a \\<in> S. a < pick S (Suc n)} = Suc n\n 3. \\<And>n.\n       \\<lbrakk>n < card S \\<Longrightarrow> pick S n \\<in> S;\n        n < card S \\<Longrightarrow> card {a \\<in> S. a < pick S n} = n;\n        \\<lbrakk>m < n; n < card S\\<rbrakk>\n        \\<Longrightarrow> pick S m < pick S n;\n        m < Suc n; Suc n < card S\\<rbrakk>\n       \\<Longrightarrow> pick S m < pick S (Suc n)", "fix n"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>n.\n       \\<lbrakk>n < card S \\<Longrightarrow> pick S n \\<in> S;\n        n < card S \\<Longrightarrow> card {a \\<in> S. a < pick S n} = n;\n        \\<lbrakk>m < n; n < card S\\<rbrakk>\n        \\<Longrightarrow> pick S m < pick S n;\n        Suc n < card S\\<rbrakk>\n       \\<Longrightarrow> pick S (Suc n) \\<in> S\n 2. \\<And>n.\n       \\<lbrakk>n < card S \\<Longrightarrow> pick S n \\<in> S;\n        n < card S \\<Longrightarrow> card {a \\<in> S. a < pick S n} = n;\n        \\<lbrakk>m < n; n < card S\\<rbrakk>\n        \\<Longrightarrow> pick S m < pick S n;\n        Suc n < card S\\<rbrakk>\n       \\<Longrightarrow> card {a \\<in> S. a < pick S (Suc n)} = Suc n\n 3. \\<And>n.\n       \\<lbrakk>n < card S \\<Longrightarrow> pick S n \\<in> S;\n        n < card S \\<Longrightarrow> card {a \\<in> S. a < pick S n} = n;\n        \\<lbrakk>m < n; n < card S\\<rbrakk>\n        \\<Longrightarrow> pick S m < pick S n;\n        m < Suc n; Suc n < card S\\<rbrakk>\n       \\<Longrightarrow> pick S m < pick S (Suc n)", "assume \"n < card S \\<Longrightarrow> pick S n \\<in> S\"\n    and \"n < card S \\<Longrightarrow> card {a \\<in> S. a < pick S n} = n\"\n    and \"Suc n < card S\"\n    and \"m < n \\<Longrightarrow> n < card S \\<Longrightarrow> pick S m < pick S n\""], ["proof (state)\nthis:\n  n < card S \\<Longrightarrow> pick S n \\<in> S\n  n < card S \\<Longrightarrow> card {a \\<in> S. a < pick S n} = n\n  Suc n < card S\n  \\<lbrakk>m < n; n < card S\\<rbrakk> \\<Longrightarrow> pick S m < pick S n\n\ngoal (3 subgoals):\n 1. \\<And>n.\n       \\<lbrakk>n < card S \\<Longrightarrow> pick S n \\<in> S;\n        n < card S \\<Longrightarrow> card {a \\<in> S. a < pick S n} = n;\n        \\<lbrakk>m < n; n < card S\\<rbrakk>\n        \\<Longrightarrow> pick S m < pick S n;\n        Suc n < card S\\<rbrakk>\n       \\<Longrightarrow> pick S (Suc n) \\<in> S\n 2. \\<And>n.\n       \\<lbrakk>n < card S \\<Longrightarrow> pick S n \\<in> S;\n        n < card S \\<Longrightarrow> card {a \\<in> S. a < pick S n} = n;\n        \\<lbrakk>m < n; n < card S\\<rbrakk>\n        \\<Longrightarrow> pick S m < pick S n;\n        Suc n < card S\\<rbrakk>\n       \\<Longrightarrow> card {a \\<in> S. a < pick S (Suc n)} = Suc n\n 3. \\<And>n.\n       \\<lbrakk>n < card S \\<Longrightarrow> pick S n \\<in> S;\n        n < card S \\<Longrightarrow> card {a \\<in> S. a < pick S n} = n;\n        \\<lbrakk>m < n; n < card S\\<rbrakk>\n        \\<Longrightarrow> pick S m < pick S n;\n        m < Suc n; Suc n < card S\\<rbrakk>\n       \\<Longrightarrow> pick S m < pick S (Suc n)", "then"], ["proof (chain)\npicking this:\n  n < card S \\<Longrightarrow> pick S n \\<in> S\n  n < card S \\<Longrightarrow> card {a \\<in> S. a < pick S n} = n\n  Suc n < card S\n  \\<lbrakk>m < n; n < card S\\<rbrakk> \\<Longrightarrow> pick S m < pick S n", "have \"card {a \\<in> S. a < pick S n} = n\" \"pick S n \\<in> S\""], ["proof (prove)\nusing this:\n  n < card S \\<Longrightarrow> pick S n \\<in> S\n  n < card S \\<Longrightarrow> card {a \\<in> S. a < pick S n} = n\n  Suc n < card S\n  \\<lbrakk>m < n; n < card S\\<rbrakk> \\<Longrightarrow> pick S m < pick S n\n\ngoal (1 subgoal):\n 1. card {a \\<in> S. a < pick S n} = n &&& pick S n \\<in> S", "by linarith+"], ["proof (state)\nthis:\n  card {a \\<in> S. a < pick S n} = n\n  pick S n \\<in> S\n\ngoal (3 subgoals):\n 1. \\<And>n.\n       \\<lbrakk>n < card S \\<Longrightarrow> pick S n \\<in> S;\n        n < card S \\<Longrightarrow> card {a \\<in> S. a < pick S n} = n;\n        \\<lbrakk>m < n; n < card S\\<rbrakk>\n        \\<Longrightarrow> pick S m < pick S n;\n        Suc n < card S\\<rbrakk>\n       \\<Longrightarrow> pick S (Suc n) \\<in> S\n 2. \\<And>n.\n       \\<lbrakk>n < card S \\<Longrightarrow> pick S n \\<in> S;\n        n < card S \\<Longrightarrow> card {a \\<in> S. a < pick S n} = n;\n        \\<lbrakk>m < n; n < card S\\<rbrakk>\n        \\<Longrightarrow> pick S m < pick S n;\n        Suc n < card S\\<rbrakk>\n       \\<Longrightarrow> card {a \\<in> S. a < pick S (Suc n)} = Suc n\n 3. \\<And>n.\n       \\<lbrakk>n < card S \\<Longrightarrow> pick S n \\<in> S;\n        n < card S \\<Longrightarrow> card {a \\<in> S. a < pick S n} = n;\n        \\<lbrakk>m < n; n < card S\\<rbrakk>\n        \\<Longrightarrow> pick S m < pick S n;\n        m < Suc n; Suc n < card S\\<rbrakk>\n       \\<Longrightarrow> pick S m < pick S (Suc n)", "have \"card {a \\<in> S. a > pick S n} > 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < card {a \\<in> S. pick S n < a}", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. 0 < card {a \\<in> S. pick S n < a}", "have \"S = {a \\<in> S. a < pick S n} \\<union> {a \\<in> S. a \\<ge> pick S n}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. S = {a \\<in> S. a < pick S n} \\<union> {a \\<in> S. pick S n \\<le> a}", "by fastforce"], ["proof (state)\nthis:\n  S = {a \\<in> S. a < pick S n} \\<union> {a \\<in> S. pick S n \\<le> a}\n\ngoal (1 subgoal):\n 1. 0 < card {a \\<in> S. pick S n < a}", "then"], ["proof (chain)\npicking this:\n  S = {a \\<in> S. a < pick S n} \\<union> {a \\<in> S. pick S n \\<le> a}", "have \"card {a \\<in> S. a \\<ge> pick S n} > 1\""], ["proof (prove)\nusing this:\n  S = {a \\<in> S. a < pick S n} \\<union> {a \\<in> S. pick S n \\<le> a}\n\ngoal (1 subgoal):\n 1. 1 < card {a \\<in> S. pick S n \\<le> a}", "using \\<open>Suc n < card S\\<close> \\<open>card {a \\<in> S. a < pick S n} = n\\<close>\n      card_Un_le[of \"{a \\<in> S. a < pick S n}\" \"{a \\<in> S. pick S n \\<le> a}\"]"], ["proof (prove)\nusing this:\n  S = {a \\<in> S. a < pick S n} \\<union> {a \\<in> S. pick S n \\<le> a}\n  Suc n < card S\n  card {a \\<in> S. a < pick S n} = n\n  card ({a \\<in> S. a < pick S n} \\<union> {a \\<in> S. pick S n \\<le> a})\n  \\<le> card {a \\<in> S. a < pick S n} + card {a \\<in> S. pick S n \\<le> a}\n\ngoal (1 subgoal):\n 1. 1 < card {a \\<in> S. pick S n \\<le> a}", "by force"], ["proof (state)\nthis:\n  1 < card {a \\<in> S. pick S n \\<le> a}\n\ngoal (1 subgoal):\n 1. 0 < card {a \\<in> S. pick S n < a}", "then"], ["proof (chain)\npicking this:\n  1 < card {a \\<in> S. pick S n \\<le> a}", "have 0:\"{a \\<in> S. a \\<ge> pick S n} \\<subseteq> {pick S n} \\<union> {a \\<in> S. a > pick S n}\""], ["proof (prove)\nusing this:\n  1 < card {a \\<in> S. pick S n \\<le> a}\n\ngoal (1 subgoal):\n 1. {a \\<in> S. pick S n \\<le> a}\n    \\<subseteq> {pick S n} \\<union> {a \\<in> S. pick S n < a}", "by auto"], ["proof (state)\nthis:\n  {a \\<in> S. pick S n \\<le> a}\n  \\<subseteq> {pick S n} \\<union> {a \\<in> S. pick S n < a}\n\ngoal (1 subgoal):\n 1. 0 < card {a \\<in> S. pick S n < a}", "have 1:\"finite ({pick S n} \\<union> {a \\<in> S. pick S n < a})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite ({pick S n} \\<union> {a \\<in> S. pick S n < a})", "unfolding finite_Un"], ["proof (prove)\ngoal (1 subgoal):\n 1. finite {pick S n} \\<and> finite {a \\<in> S. pick S n < a}", "using Collect_mem_eq assms card.infinite conjI"], ["proof (prove)\nusing this:\n  {x. x \\<in> ?A} = ?A\n  n < card S\n  infinite ?A \\<Longrightarrow> card ?A = 0\n  \\<lbrakk>?P; ?Q\\<rbrakk> \\<Longrightarrow> ?P \\<and> ?Q\n\ngoal (1 subgoal):\n 1. finite {pick S n} \\<and> finite {a \\<in> S. pick S n < a}", "by force"], ["proof (state)\nthis:\n  finite ({pick S n} \\<union> {a \\<in> S. pick S n < a})\n\ngoal (1 subgoal):\n 1. 0 < card {a \\<in> S. pick S n < a}", "have \"1 < card {pick S n} + card {a \\<in> S. pick S n < a}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 1 < card {pick S n} + card {a \\<in> S. pick S n < a}", "using card_mono[OF 1 0] card_Un_le[of \"{pick S n}\" \"{a \\<in> S. a > pick S n}\"]  \\<open>card {a \\<in> S. a \\<ge> pick S n} > 1\\<close>"], ["proof (prove)\nusing this:\n  card {a \\<in> S. pick S n \\<le> a}\n  \\<le> card ({pick S n} \\<union> {a \\<in> S. pick S n < a})\n  card ({pick S n} \\<union> {a \\<in> S. pick S n < a})\n  \\<le> card {pick S n} + card {a \\<in> S. pick S n < a}\n  1 < card {a \\<in> S. pick S n \\<le> a}\n\ngoal (1 subgoal):\n 1. 1 < card {pick S n} + card {a \\<in> S. pick S n < a}", "by linarith"], ["proof (state)\nthis:\n  1 < card {pick S n} + card {a \\<in> S. pick S n < a}\n\ngoal (1 subgoal):\n 1. 0 < card {a \\<in> S. pick S n < a}", "then"], ["proof (chain)\npicking this:\n  1 < card {pick S n} + card {a \\<in> S. pick S n < a}", "show ?thesis"], ["proof (prove)\nusing this:\n  1 < card {pick S n} + card {a \\<in> S. pick S n < a}\n\ngoal (1 subgoal):\n 1. 0 < card {a \\<in> S. pick S n < a}", "by simp"], ["proof (state)\nthis:\n  0 < card {a \\<in> S. pick S n < a}\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  0 < card {a \\<in> S. pick S n < a}\n\ngoal (3 subgoals):\n 1. \\<And>n.\n       \\<lbrakk>n < card S \\<Longrightarrow> pick S n \\<in> S;\n        n < card S \\<Longrightarrow> card {a \\<in> S. a < pick S n} = n;\n        \\<lbrakk>m < n; n < card S\\<rbrakk>\n        \\<Longrightarrow> pick S m < pick S n;\n        Suc n < card S\\<rbrakk>\n       \\<Longrightarrow> pick S (Suc n) \\<in> S\n 2. \\<And>n.\n       \\<lbrakk>n < card S \\<Longrightarrow> pick S n \\<in> S;\n        n < card S \\<Longrightarrow> card {a \\<in> S. a < pick S n} = n;\n        \\<lbrakk>m < n; n < card S\\<rbrakk>\n        \\<Longrightarrow> pick S m < pick S n;\n        Suc n < card S\\<rbrakk>\n       \\<Longrightarrow> card {a \\<in> S. a < pick S (Suc n)} = Suc n\n 3. \\<And>n.\n       \\<lbrakk>n < card S \\<Longrightarrow> pick S n \\<in> S;\n        n < card S \\<Longrightarrow> card {a \\<in> S. a < pick S n} = n;\n        \\<lbrakk>m < n; n < card S\\<rbrakk>\n        \\<Longrightarrow> pick S m < pick S n;\n        m < Suc n; Suc n < card S\\<rbrakk>\n       \\<Longrightarrow> pick S m < pick S (Suc n)", "then"], ["proof (chain)\npicking this:\n  0 < card {a \\<in> S. pick S n < a}", "show \"pick S (Suc n) \\<in> S\""], ["proof (prove)\nusing this:\n  0 < card {a \\<in> S. pick S n < a}\n\ngoal (1 subgoal):\n 1. pick S (Suc n) \\<in> S", "unfolding pick.simps"], ["proof (prove)\nusing this:\n  0 < card {a \\<in> S. pick S n < a}\n\ngoal (1 subgoal):\n 1. (LEAST a. a \\<in> S \\<and> pick S n < a) \\<in> S", "by (metis (no_types, lifting) Collect_empty_eq LeastI card_0_eq card.infinite less_numeral_extra(3))"], ["proof (state)\nthis:\n  pick S (Suc n) \\<in> S\n\ngoal (2 subgoals):\n 1. \\<And>n.\n       \\<lbrakk>n < card S \\<Longrightarrow> pick S n \\<in> S;\n        n < card S \\<Longrightarrow> card {a \\<in> S. a < pick S n} = n;\n        \\<lbrakk>m < n; n < card S\\<rbrakk>\n        \\<Longrightarrow> pick S m < pick S n;\n        Suc n < card S\\<rbrakk>\n       \\<Longrightarrow> card {a \\<in> S. a < pick S (Suc n)} = Suc n\n 2. \\<And>n.\n       \\<lbrakk>n < card S \\<Longrightarrow> pick S n \\<in> S;\n        n < card S \\<Longrightarrow> card {a \\<in> S. a < pick S n} = n;\n        \\<lbrakk>m < n; n < card S\\<rbrakk>\n        \\<Longrightarrow> pick S m < pick S n;\n        m < Suc n; Suc n < card S\\<rbrakk>\n       \\<Longrightarrow> pick S m < pick S (Suc n)", "have \"pick S (Suc n) > pick S n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pick S n < pick S (Suc n)", "by (metis (no_types, lifting) pick.simps(2) \\<open>card {a \\<in> S. a > pick S n} > 0\\<close> Collect_empty_eq LeastI card_0_eq card.infinite less_numeral_extra(3))"], ["proof (state)\nthis:\n  pick S n < pick S (Suc n)\n\ngoal (2 subgoals):\n 1. \\<And>n.\n       \\<lbrakk>n < card S \\<Longrightarrow> pick S n \\<in> S;\n        n < card S \\<Longrightarrow> card {a \\<in> S. a < pick S n} = n;\n        \\<lbrakk>m < n; n < card S\\<rbrakk>\n        \\<Longrightarrow> pick S m < pick S n;\n        Suc n < card S\\<rbrakk>\n       \\<Longrightarrow> card {a \\<in> S. a < pick S (Suc n)} = Suc n\n 2. \\<And>n.\n       \\<lbrakk>n < card S \\<Longrightarrow> pick S n \\<in> S;\n        n < card S \\<Longrightarrow> card {a \\<in> S. a < pick S n} = n;\n        \\<lbrakk>m < n; n < card S\\<rbrakk>\n        \\<Longrightarrow> pick S m < pick S n;\n        m < Suc n; Suc n < card S\\<rbrakk>\n       \\<Longrightarrow> pick S m < pick S (Suc n)", "then"], ["proof (chain)\npicking this:\n  pick S n < pick S (Suc n)", "show \"m < Suc n \\<Longrightarrow> pick S m < pick S (Suc n)\""], ["proof (prove)\nusing this:\n  pick S n < pick S (Suc n)\n\ngoal (1 subgoal):\n 1. m < Suc n \\<Longrightarrow> pick S m < pick S (Suc n)", "using \\<open>m < n \\<Longrightarrow> n < card S \\<Longrightarrow> pick S m < pick S n\\<close>"], ["proof (prove)\nusing this:\n  pick S n < pick S (Suc n)\n  \\<lbrakk>m < n; n < card S\\<rbrakk> \\<Longrightarrow> pick S m < pick S n\n\ngoal (1 subgoal):\n 1. m < Suc n \\<Longrightarrow> pick S m < pick S (Suc n)", "using \\<open>Suc n < card S\\<close> dual_order.strict_trans less_Suc_eq"], ["proof (prove)\nusing this:\n  pick S n < pick S (Suc n)\n  \\<lbrakk>m < n; n < card S\\<rbrakk> \\<Longrightarrow> pick S m < pick S n\n  Suc n < card S\n  \\<lbrakk>?b < ?a; ?c < ?b\\<rbrakk> \\<Longrightarrow> ?c < ?a\n  (?m < Suc ?n) = (?m < ?n \\<or> ?m = ?n)\n\ngoal (1 subgoal):\n 1. m < Suc n \\<Longrightarrow> pick S m < pick S (Suc n)", "by auto"], ["proof (state)\nthis:\n  m < Suc n \\<Longrightarrow> pick S m < pick S (Suc n)\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>n < card S \\<Longrightarrow> pick S n \\<in> S;\n        n < card S \\<Longrightarrow> card {a \\<in> S. a < pick S n} = n;\n        \\<lbrakk>m < n; n < card S\\<rbrakk>\n        \\<Longrightarrow> pick S m < pick S n;\n        Suc n < card S\\<rbrakk>\n       \\<Longrightarrow> card {a \\<in> S. a < pick S (Suc n)} = Suc n", "then"], ["proof (chain)\npicking this:\n  m < Suc n \\<Longrightarrow> pick S m < pick S (Suc n)", "show \"card {a\\<in>S. a < pick S (Suc n)} = Suc n\""], ["proof (prove)\nusing this:\n  m < Suc n \\<Longrightarrow> pick S m < pick S (Suc n)\n\ngoal (1 subgoal):\n 1. card {a \\<in> S. a < pick S (Suc n)} = Suc n", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (m < Suc n \\<Longrightarrow>\n     pick S m < pick S (Suc n)) \\<Longrightarrow>\n    card {a \\<in> S. a < pick S (Suc n)} = Suc n", "have \"{a \\<in> S. a < pick S (Suc n)} = {a \\<in> S. a < pick S n} \\<union> {pick S n}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {a \\<in> S. a < pick S (Suc n)} =\n    {a \\<in> S. a < pick S n} \\<union> {pick S n}", "apply (rule subset_antisym; rule subsetI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> {a \\<in> S. a < pick S (Suc n)} \\<Longrightarrow>\n       x \\<in> {a \\<in> S. a < pick S n} \\<union> {pick S n}\n 2. \\<And>x.\n       x \\<in> {a \\<in> S. a < pick S n} \\<union>\n               {pick S n} \\<Longrightarrow>\n       x \\<in> {a \\<in> S. a < pick S (Suc n)}", "using pick.simps not_less_Least \\<open>pick S (Suc n) > pick S n\\<close> \\<open>pick S n \\<in> S\\<close>"], ["proof (prove)\nusing this:\n  pick ?S 0 = (LEAST a. a \\<in> ?S)\n  pick ?S (Suc ?n) = (LEAST a. a \\<in> ?S \\<and> pick ?S ?n < a)\n  ?k < (LEAST x. ?P x) \\<Longrightarrow> \\<not> ?P ?k\n  pick S n < pick S (Suc n)\n  pick S n \\<in> S\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> {a \\<in> S. a < pick S (Suc n)} \\<Longrightarrow>\n       x \\<in> {a \\<in> S. a < pick S n} \\<union> {pick S n}\n 2. \\<And>x.\n       x \\<in> {a \\<in> S. a < pick S n} \\<union>\n               {pick S n} \\<Longrightarrow>\n       x \\<in> {a \\<in> S. a < pick S (Suc n)}", "by fastforce+"], ["proof (state)\nthis:\n  {a \\<in> S. a < pick S (Suc n)} =\n  {a \\<in> S. a < pick S n} \\<union> {pick S n}\n\ngoal (1 subgoal):\n 1. (m < Suc n \\<Longrightarrow>\n     pick S m < pick S (Suc n)) \\<Longrightarrow>\n    card {a \\<in> S. a < pick S (Suc n)} = Suc n", "then"], ["proof (chain)\npicking this:\n  {a \\<in> S. a < pick S (Suc n)} =\n  {a \\<in> S. a < pick S n} \\<union> {pick S n}", "have \"card {a \\<in> S. a < pick S (Suc n)} = card {a \\<in> S. a < pick S n} + card {pick S n}\""], ["proof (prove)\nusing this:\n  {a \\<in> S. a < pick S (Suc n)} =\n  {a \\<in> S. a < pick S n} \\<union> {pick S n}\n\ngoal (1 subgoal):\n 1. card {a \\<in> S. a < pick S (Suc n)} =\n    card {a \\<in> S. a < pick S n} + card {pick S n}", "using card_Un_disjoint"], ["proof (prove)\nusing this:\n  {a \\<in> S. a < pick S (Suc n)} =\n  {a \\<in> S. a < pick S n} \\<union> {pick S n}\n  \\<lbrakk>finite ?A; finite ?B; ?A \\<inter> ?B = {}\\<rbrakk>\n  \\<Longrightarrow> card (?A \\<union> ?B) = card ?A + card ?B\n\ngoal (1 subgoal):\n 1. card {a \\<in> S. a < pick S (Suc n)} =\n    card {a \\<in> S. a < pick S n} + card {pick S n}", "by auto"], ["proof (state)\nthis:\n  card {a \\<in> S. a < pick S (Suc n)} =\n  card {a \\<in> S. a < pick S n} + card {pick S n}\n\ngoal (1 subgoal):\n 1. (m < Suc n \\<Longrightarrow>\n     pick S m < pick S (Suc n)) \\<Longrightarrow>\n    card {a \\<in> S. a < pick S (Suc n)} = Suc n", "then"], ["proof (chain)\npicking this:\n  card {a \\<in> S. a < pick S (Suc n)} =\n  card {a \\<in> S. a < pick S n} + card {pick S n}", "show ?thesis"], ["proof (prove)\nusing this:\n  card {a \\<in> S. a < pick S (Suc n)} =\n  card {a \\<in> S. a < pick S n} + card {pick S n}\n\ngoal (1 subgoal):\n 1. card {a \\<in> S. a < pick S (Suc n)} = Suc n", "by (metis One_nat_def Suc_eq_plus1 \\<open>card {a \\<in> S. a < pick S n} = n\\<close> card.empty card_insert_if empty_iff finite.emptyI)"], ["proof (state)\nthis:\n  card {a \\<in> S. a < pick S (Suc n)} = Suc n\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  card {a \\<in> S. a < pick S (Suc n)} = Suc n\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma card_le_pick_le:\nassumes \"n < card S\"\nand \"pick S n \\<ge> i\"\nshows \"card {a\\<in>S. a < i} \\<le> n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card {a \\<in> S. a < i} \\<le> n", "using assms"], ["proof (prove)\nusing this:\n  n < card S\n  i \\<le> pick S n\n\ngoal (1 subgoal):\n 1. card {a \\<in> S. a < i} \\<le> n", "proof (induction n arbitrary:i)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>i.\n       \\<lbrakk>0 < card S; i \\<le> pick S 0\\<rbrakk>\n       \\<Longrightarrow> card {a \\<in> S. a < i} \\<le> 0\n 2. \\<And>n i.\n       \\<lbrakk>\\<And>i.\n                   \\<lbrakk>n < card S; i \\<le> pick S n\\<rbrakk>\n                   \\<Longrightarrow> card {a \\<in> S. a < i} \\<le> n;\n        Suc n < card S; i \\<le> pick S (Suc n)\\<rbrakk>\n       \\<Longrightarrow> card {a \\<in> S. a < i} \\<le> Suc n", "case 0"], ["proof (state)\nthis:\n  0 < card S\n  i \\<le> pick S 0\n\ngoal (2 subgoals):\n 1. \\<And>i.\n       \\<lbrakk>0 < card S; i \\<le> pick S 0\\<rbrakk>\n       \\<Longrightarrow> card {a \\<in> S. a < i} \\<le> 0\n 2. \\<And>n i.\n       \\<lbrakk>\\<And>i.\n                   \\<lbrakk>n < card S; i \\<le> pick S n\\<rbrakk>\n                   \\<Longrightarrow> card {a \\<in> S. a < i} \\<le> n;\n        Suc n < card S; i \\<le> pick S (Suc n)\\<rbrakk>\n       \\<Longrightarrow> card {a \\<in> S. a < i} \\<le> Suc n", "then"], ["proof (chain)\npicking this:\n  0 < card S\n  i \\<le> pick S 0", "show ?case"], ["proof (prove)\nusing this:\n  0 < card S\n  i \\<le> pick S 0\n\ngoal (1 subgoal):\n 1. card {a \\<in> S. a < i} \\<le> 0", "unfolding pick.simps"], ["proof (prove)\nusing this:\n  0 < card S\n  i \\<le> (LEAST a. a \\<in> S)\n\ngoal (1 subgoal):\n 1. card {a \\<in> S. a < i} \\<le> 0", "using not_less_Least"], ["proof (prove)\nusing this:\n  0 < card S\n  i \\<le> (LEAST a. a \\<in> S)\n  ?k < (LEAST x. ?P x) \\<Longrightarrow> \\<not> ?P ?k\n\ngoal (1 subgoal):\n 1. card {a \\<in> S. a < i} \\<le> 0", "by (metis (no_types, lifting) Collect_empty_eq card_0_eq card_ge_0_finite dual_order.strict_trans1 leI le_0_eq)"], ["proof (state)\nthis:\n  card {a \\<in> S. a < i} \\<le> 0\n\ngoal (1 subgoal):\n 1. \\<And>n i.\n       \\<lbrakk>\\<And>i.\n                   \\<lbrakk>n < card S; i \\<le> pick S n\\<rbrakk>\n                   \\<Longrightarrow> card {a \\<in> S. a < i} \\<le> n;\n        Suc n < card S; i \\<le> pick S (Suc n)\\<rbrakk>\n       \\<Longrightarrow> card {a \\<in> S. a < i} \\<le> Suc n", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n i.\n       \\<lbrakk>\\<And>i.\n                   \\<lbrakk>n < card S; i \\<le> pick S n\\<rbrakk>\n                   \\<Longrightarrow> card {a \\<in> S. a < i} \\<le> n;\n        Suc n < card S; i \\<le> pick S (Suc n)\\<rbrakk>\n       \\<Longrightarrow> card {a \\<in> S. a < i} \\<le> Suc n", "case (Suc n)"], ["proof (state)\nthis:\n  \\<lbrakk>n < card S; ?i \\<le> pick S n\\<rbrakk>\n  \\<Longrightarrow> card {a \\<in> S. a < ?i} \\<le> n\n  Suc n < card S\n  i \\<le> pick S (Suc n)\n\ngoal (1 subgoal):\n 1. \\<And>n i.\n       \\<lbrakk>\\<And>i.\n                   \\<lbrakk>n < card S; i \\<le> pick S n\\<rbrakk>\n                   \\<Longrightarrow> card {a \\<in> S. a < i} \\<le> n;\n        Suc n < card S; i \\<le> pick S (Suc n)\\<rbrakk>\n       \\<Longrightarrow> card {a \\<in> S. a < i} \\<le> Suc n", "have \"card {a \\<in> S. a < pick S n} \\<le> n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card {a \\<in> S. a < pick S n} \\<le> n", "using Suc"], ["proof (prove)\nusing this:\n  \\<lbrakk>n < card S; ?i \\<le> pick S n\\<rbrakk>\n  \\<Longrightarrow> card {a \\<in> S. a < ?i} \\<le> n\n  Suc n < card S\n  i \\<le> pick S (Suc n)\n\ngoal (1 subgoal):\n 1. card {a \\<in> S. a < pick S n} \\<le> n", "by (simp add: less_eq_Suc_le nat_less_le)"], ["proof (state)\nthis:\n  card {a \\<in> S. a < pick S n} \\<le> n\n\ngoal (1 subgoal):\n 1. \\<And>n i.\n       \\<lbrakk>\\<And>i.\n                   \\<lbrakk>n < card S; i \\<le> pick S n\\<rbrakk>\n                   \\<Longrightarrow> card {a \\<in> S. a < i} \\<le> n;\n        Suc n < card S; i \\<le> pick S (Suc n)\\<rbrakk>\n       \\<Longrightarrow> card {a \\<in> S. a < i} \\<le> Suc n", "have \"{a \\<in> S. a < i} \\<subseteq> {a \\<in> S. a < pick S (Suc n)}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {a \\<in> S. a < i} \\<subseteq> {a \\<in> S. a < pick S (Suc n)}", "using Suc.prems(2)"], ["proof (prove)\nusing this:\n  i \\<le> pick S (Suc n)\n\ngoal (1 subgoal):\n 1. {a \\<in> S. a < i} \\<subseteq> {a \\<in> S. a < pick S (Suc n)}", "by auto"], ["proof (state)\nthis:\n  {a \\<in> S. a < i} \\<subseteq> {a \\<in> S. a < pick S (Suc n)}\n\ngoal (1 subgoal):\n 1. \\<And>n i.\n       \\<lbrakk>\\<And>i.\n                   \\<lbrakk>n < card S; i \\<le> pick S n\\<rbrakk>\n                   \\<Longrightarrow> card {a \\<in> S. a < i} \\<le> n;\n        Suc n < card S; i \\<le> pick S (Suc n)\\<rbrakk>\n       \\<Longrightarrow> card {a \\<in> S. a < i} \\<le> Suc n", "have \"{a \\<in> S. a < pick S (Suc n)} = {a \\<in> S. a < pick S n} \\<union> {pick S n}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {a \\<in> S. a < pick S (Suc n)} =\n    {a \\<in> S. a < pick S n} \\<union> {pick S n}", "apply (rule subset_antisym; rule subsetI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> {a \\<in> S. a < pick S (Suc n)} \\<Longrightarrow>\n       x \\<in> {a \\<in> S. a < pick S n} \\<union> {pick S n}\n 2. \\<And>x.\n       x \\<in> {a \\<in> S. a < pick S n} \\<union>\n               {pick S n} \\<Longrightarrow>\n       x \\<in> {a \\<in> S. a < pick S (Suc n)}", "using pick.simps not_less_Least  pick_mono_le[OF Suc.prems(1), of n, OF lessI] pick_in_set_le[of n S] Suc"], ["proof (prove)\nusing this:\n  pick ?S 0 = (LEAST a. a \\<in> ?S)\n  pick ?S (Suc ?n) = (LEAST a. a \\<in> ?S \\<and> pick ?S ?n < a)\n  ?k < (LEAST x. ?P x) \\<Longrightarrow> \\<not> ?P ?k\n  pick S n < pick S (Suc n)\n  n < card S \\<Longrightarrow> pick S n \\<in> S\n  \\<lbrakk>n < card S; ?i \\<le> pick S n\\<rbrakk>\n  \\<Longrightarrow> card {a \\<in> S. a < ?i} \\<le> n\n  Suc n < card S\n  i \\<le> pick S (Suc n)\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> {a \\<in> S. a < pick S (Suc n)} \\<Longrightarrow>\n       x \\<in> {a \\<in> S. a < pick S n} \\<union> {pick S n}\n 2. \\<And>x.\n       x \\<in> {a \\<in> S. a < pick S n} \\<union>\n               {pick S n} \\<Longrightarrow>\n       x \\<in> {a \\<in> S. a < pick S (Suc n)}", "by fastforce+"], ["proof (state)\nthis:\n  {a \\<in> S. a < pick S (Suc n)} =\n  {a \\<in> S. a < pick S n} \\<union> {pick S n}\n\ngoal (1 subgoal):\n 1. \\<And>n i.\n       \\<lbrakk>\\<And>i.\n                   \\<lbrakk>n < card S; i \\<le> pick S n\\<rbrakk>\n                   \\<Longrightarrow> card {a \\<in> S. a < i} \\<le> n;\n        Suc n < card S; i \\<le> pick S (Suc n)\\<rbrakk>\n       \\<Longrightarrow> card {a \\<in> S. a < i} \\<le> Suc n", "then"], ["proof (chain)\npicking this:\n  {a \\<in> S. a < pick S (Suc n)} =\n  {a \\<in> S. a < pick S n} \\<union> {pick S n}", "have \"card {a \\<in> S. a < i} \\<le> card {a \\<in> S. a < pick S n} + card {pick S n}\""], ["proof (prove)\nusing this:\n  {a \\<in> S. a < pick S (Suc n)} =\n  {a \\<in> S. a < pick S n} \\<union> {pick S n}\n\ngoal (1 subgoal):\n 1. card {a \\<in> S. a < i}\n    \\<le> card {a \\<in> S. a < pick S n} + card {pick S n}", "using card_Un_disjoint  card_mono[OF _ \\<open>{a \\<in> S. a < i} \\<subseteq> {a \\<in> S. a < pick S (Suc n)}\\<close>]"], ["proof (prove)\nusing this:\n  {a \\<in> S. a < pick S (Suc n)} =\n  {a \\<in> S. a < pick S n} \\<union> {pick S n}\n  \\<lbrakk>finite ?A; finite ?B; ?A \\<inter> ?B = {}\\<rbrakk>\n  \\<Longrightarrow> card (?A \\<union> ?B) = card ?A + card ?B\n  finite {a \\<in> S. a < pick S (Suc n)} \\<Longrightarrow>\n  card {a \\<in> S. a < i} \\<le> card {a \\<in> S. a < pick S (Suc n)}\n\ngoal (1 subgoal):\n 1. card {a \\<in> S. a < i}\n    \\<le> card {a \\<in> S. a < pick S n} + card {pick S n}", "by simp"], ["proof (state)\nthis:\n  card {a \\<in> S. a < i}\n  \\<le> card {a \\<in> S. a < pick S n} + card {pick S n}\n\ngoal (1 subgoal):\n 1. \\<And>n i.\n       \\<lbrakk>\\<And>i.\n                   \\<lbrakk>n < card S; i \\<le> pick S n\\<rbrakk>\n                   \\<Longrightarrow> card {a \\<in> S. a < i} \\<le> n;\n        Suc n < card S; i \\<le> pick S (Suc n)\\<rbrakk>\n       \\<Longrightarrow> card {a \\<in> S. a < i} \\<le> Suc n", "then"], ["proof (chain)\npicking this:\n  card {a \\<in> S. a < i}\n  \\<le> card {a \\<in> S. a < pick S n} + card {pick S n}", "show ?case"], ["proof (prove)\nusing this:\n  card {a \\<in> S. a < i}\n  \\<le> card {a \\<in> S. a < pick S n} + card {pick S n}\n\ngoal (1 subgoal):\n 1. card {a \\<in> S. a < i} \\<le> Suc n", "using \\<open>card {a \\<in> S. a < pick S n} \\<le> n\\<close>"], ["proof (prove)\nusing this:\n  card {a \\<in> S. a < i}\n  \\<le> card {a \\<in> S. a < pick S n} + card {pick S n}\n  card {a \\<in> S. a < pick S n} \\<le> n\n\ngoal (1 subgoal):\n 1. card {a \\<in> S. a < i} \\<le> Suc n", "by auto"], ["proof (state)\nthis:\n  card {a \\<in> S. a < i} \\<le> Suc n\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma\nassumes \"n < card S \\<or> infinite S\"\nshows\n  pick_in_set:\"pick S n \\<in> S\" and\n  card_le_pick: \"i \\<le> pick S n ==> card {a\\<in>S. a < i} \\<le> n\" and\n  card_pick: \"card {a\\<in>S. a < pick S n} = n\" and\n  pick_mono: \"m < n \\<Longrightarrow> pick S m < pick S n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (pick S n \\<in> S &&&\n     (i \\<le> pick S n \\<Longrightarrow>\n      card {a \\<in> S. a < i} \\<le> n)) &&&\n    card {a \\<in> S. a < pick S n} = n &&&\n    (m < n \\<Longrightarrow> pick S m < pick S n)", "using assms pick_in_set_inf pick_in_set_le card_pick_inf card_pick_le card_le_pick_le card_le_pick_inf\n    pick_mono_inf pick_mono_le"], ["proof (prove)\nusing this:\n  n < card S \\<or> infinite S\n  infinite ?S \\<Longrightarrow> pick ?S ?n \\<in> ?S\n  ?n < card ?S \\<Longrightarrow> pick ?S ?n \\<in> ?S\n  infinite ?S \\<Longrightarrow> card {a \\<in> ?S. a < pick ?S ?n} = ?n\n  ?n < card ?S \\<Longrightarrow> card {a \\<in> ?S. a < pick ?S ?n} = ?n\n  \\<lbrakk>?n < card ?S; ?i \\<le> pick ?S ?n\\<rbrakk>\n  \\<Longrightarrow> card {a \\<in> ?S. a < ?i} \\<le> ?n\n  \\<lbrakk>infinite ?S; ?i \\<le> pick ?S ?n\\<rbrakk>\n  \\<Longrightarrow> card {a \\<in> ?S. a < ?i} \\<le> ?n\n  \\<lbrakk>infinite ?S; ?m < ?n\\<rbrakk>\n  \\<Longrightarrow> pick ?S ?m < pick ?S ?n\n  \\<lbrakk>?n < card ?S; ?m < ?n\\<rbrakk>\n  \\<Longrightarrow> pick ?S ?m < pick ?S ?n\n\ngoal (1 subgoal):\n 1. (pick S n \\<in> S &&&\n     (i \\<le> pick S n \\<Longrightarrow>\n      card {a \\<in> S. a < i} \\<le> n)) &&&\n    card {a \\<in> S. a < pick S n} = n &&&\n    (m < n \\<Longrightarrow> pick S m < pick S n)", "by auto"], ["", "lemma pick_card:\n\"pick I (card {a\\<in>I. a < i}) = (LEAST a. a\\<in>I \\<and> a \\<ge> i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pick I (card {a \\<in> I. a < i}) = (LEAST a. a \\<in> I \\<and> i \\<le> a)", "proof (induction i)"], ["proof (state)\ngoal (2 subgoals):\n 1. pick I (card {a \\<in> I. a < 0}) = (LEAST a. a \\<in> I \\<and> 0 \\<le> a)\n 2. \\<And>i.\n       pick I (card {a \\<in> I. a < i}) =\n       (LEAST a. a \\<in> I \\<and> i \\<le> a) \\<Longrightarrow>\n       pick I (card {a \\<in> I. a < Suc i}) =\n       (LEAST a. a \\<in> I \\<and> Suc i \\<le> a)", "case 0"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. pick I (card {a \\<in> I. a < 0}) = (LEAST a. a \\<in> I \\<and> 0 \\<le> a)\n 2. \\<And>i.\n       pick I (card {a \\<in> I. a < i}) =\n       (LEAST a. a \\<in> I \\<and> i \\<le> a) \\<Longrightarrow>\n       pick I (card {a \\<in> I. a < Suc i}) =\n       (LEAST a. a \\<in> I \\<and> Suc i \\<le> a)", "then"], ["proof (chain)\npicking this:", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. pick I (card {a \\<in> I. a < 0}) = (LEAST a. a \\<in> I \\<and> 0 \\<le> a)", "by (simp add: pick_in_set_le)"], ["proof (state)\nthis:\n  pick I (card {a \\<in> I. a < 0}) = (LEAST a. a \\<in> I \\<and> 0 \\<le> a)\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       pick I (card {a \\<in> I. a < i}) =\n       (LEAST a. a \\<in> I \\<and> i \\<le> a) \\<Longrightarrow>\n       pick I (card {a \\<in> I. a < Suc i}) =\n       (LEAST a. a \\<in> I \\<and> Suc i \\<le> a)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i.\n       pick I (card {a \\<in> I. a < i}) =\n       (LEAST a. a \\<in> I \\<and> i \\<le> a) \\<Longrightarrow>\n       pick I (card {a \\<in> I. a < Suc i}) =\n       (LEAST a. a \\<in> I \\<and> Suc i \\<le> a)", "case (Suc i)"], ["proof (state)\nthis:\n  pick I (card {a \\<in> I. a < i}) = (LEAST a. a \\<in> I \\<and> i \\<le> a)\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       pick I (card {a \\<in> I. a < i}) =\n       (LEAST a. a \\<in> I \\<and> i \\<le> a) \\<Longrightarrow>\n       pick I (card {a \\<in> I. a < Suc i}) =\n       (LEAST a. a \\<in> I \\<and> Suc i \\<le> a)", "then"], ["proof (chain)\npicking this:\n  pick I (card {a \\<in> I. a < i}) = (LEAST a. a \\<in> I \\<and> i \\<le> a)", "show ?case"], ["proof (prove)\nusing this:\n  pick I (card {a \\<in> I. a < i}) = (LEAST a. a \\<in> I \\<and> i \\<le> a)\n\ngoal (1 subgoal):\n 1. pick I (card {a \\<in> I. a < Suc i}) =\n    (LEAST a. a \\<in> I \\<and> Suc i \\<le> a)", "proof (cases \"i\\<in>I\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>pick I (card {a \\<in> I. a < i}) =\n             (LEAST a. a \\<in> I \\<and> i \\<le> a);\n     i \\<in> I\\<rbrakk>\n    \\<Longrightarrow> pick I (card {a \\<in> I. a < Suc i}) =\n                      (LEAST a. a \\<in> I \\<and> Suc i \\<le> a)\n 2. \\<lbrakk>pick I (card {a \\<in> I. a < i}) =\n             (LEAST a. a \\<in> I \\<and> i \\<le> a);\n     i \\<notin> I\\<rbrakk>\n    \\<Longrightarrow> pick I (card {a \\<in> I. a < Suc i}) =\n                      (LEAST a. a \\<in> I \\<and> Suc i \\<le> a)", "case True"], ["proof (state)\nthis:\n  i \\<in> I\n\ngoal (2 subgoals):\n 1. \\<lbrakk>pick I (card {a \\<in> I. a < i}) =\n             (LEAST a. a \\<in> I \\<and> i \\<le> a);\n     i \\<in> I\\<rbrakk>\n    \\<Longrightarrow> pick I (card {a \\<in> I. a < Suc i}) =\n                      (LEAST a. a \\<in> I \\<and> Suc i \\<le> a)\n 2. \\<lbrakk>pick I (card {a \\<in> I. a < i}) =\n             (LEAST a. a \\<in> I \\<and> i \\<le> a);\n     i \\<notin> I\\<rbrakk>\n    \\<Longrightarrow> pick I (card {a \\<in> I. a < Suc i}) =\n                      (LEAST a. a \\<in> I \\<and> Suc i \\<le> a)", "then"], ["proof (chain)\npicking this:\n  i \\<in> I", "have 1:\"pick I (card {a\\<in>I. a < i}) = i\""], ["proof (prove)\nusing this:\n  i \\<in> I\n\ngoal (1 subgoal):\n 1. pick I (card {a \\<in> I. a < i}) = i", "by (metis (mono_tags, lifting) Least_equality Suc.IH order_refl)"], ["proof (state)\nthis:\n  pick I (card {a \\<in> I. a < i}) = i\n\ngoal (2 subgoals):\n 1. \\<lbrakk>pick I (card {a \\<in> I. a < i}) =\n             (LEAST a. a \\<in> I \\<and> i \\<le> a);\n     i \\<in> I\\<rbrakk>\n    \\<Longrightarrow> pick I (card {a \\<in> I. a < Suc i}) =\n                      (LEAST a. a \\<in> I \\<and> Suc i \\<le> a)\n 2. \\<lbrakk>pick I (card {a \\<in> I. a < i}) =\n             (LEAST a. a \\<in> I \\<and> i \\<le> a);\n     i \\<notin> I\\<rbrakk>\n    \\<Longrightarrow> pick I (card {a \\<in> I. a < Suc i}) =\n                      (LEAST a. a \\<in> I \\<and> Suc i \\<le> a)", "have \"{a \\<in> I. a < Suc i} = {a \\<in> I. a < i} \\<union> {i}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {a \\<in> I. a < Suc i} = {a \\<in> I. a < i} \\<union> {i}", "using True"], ["proof (prove)\nusing this:\n  i \\<in> I\n\ngoal (1 subgoal):\n 1. {a \\<in> I. a < Suc i} = {a \\<in> I. a < i} \\<union> {i}", "by auto"], ["proof (state)\nthis:\n  {a \\<in> I. a < Suc i} = {a \\<in> I. a < i} \\<union> {i}\n\ngoal (2 subgoals):\n 1. \\<lbrakk>pick I (card {a \\<in> I. a < i}) =\n             (LEAST a. a \\<in> I \\<and> i \\<le> a);\n     i \\<in> I\\<rbrakk>\n    \\<Longrightarrow> pick I (card {a \\<in> I. a < Suc i}) =\n                      (LEAST a. a \\<in> I \\<and> Suc i \\<le> a)\n 2. \\<lbrakk>pick I (card {a \\<in> I. a < i}) =\n             (LEAST a. a \\<in> I \\<and> i \\<le> a);\n     i \\<notin> I\\<rbrakk>\n    \\<Longrightarrow> pick I (card {a \\<in> I. a < Suc i}) =\n                      (LEAST a. a \\<in> I \\<and> Suc i \\<le> a)", "then"], ["proof (chain)\npicking this:\n  {a \\<in> I. a < Suc i} = {a \\<in> I. a < i} \\<union> {i}", "have 2:\"card {a \\<in> I. a < Suc i} = Suc (card {a \\<in> I. a < i})\""], ["proof (prove)\nusing this:\n  {a \\<in> I. a < Suc i} = {a \\<in> I. a < i} \\<union> {i}\n\ngoal (1 subgoal):\n 1. card {a \\<in> I. a < Suc i} = Suc (card {a \\<in> I. a < i})", "by auto"], ["proof (state)\nthis:\n  card {a \\<in> I. a < Suc i} = Suc (card {a \\<in> I. a < i})\n\ngoal (2 subgoals):\n 1. \\<lbrakk>pick I (card {a \\<in> I. a < i}) =\n             (LEAST a. a \\<in> I \\<and> i \\<le> a);\n     i \\<in> I\\<rbrakk>\n    \\<Longrightarrow> pick I (card {a \\<in> I. a < Suc i}) =\n                      (LEAST a. a \\<in> I \\<and> Suc i \\<le> a)\n 2. \\<lbrakk>pick I (card {a \\<in> I. a < i}) =\n             (LEAST a. a \\<in> I \\<and> i \\<le> a);\n     i \\<notin> I\\<rbrakk>\n    \\<Longrightarrow> pick I (card {a \\<in> I. a < Suc i}) =\n                      (LEAST a. a \\<in> I \\<and> Suc i \\<le> a)", "then"], ["proof (chain)\npicking this:\n  card {a \\<in> I. a < Suc i} = Suc (card {a \\<in> I. a < i})", "show ?thesis"], ["proof (prove)\nusing this:\n  card {a \\<in> I. a < Suc i} = Suc (card {a \\<in> I. a < i})\n\ngoal (1 subgoal):\n 1. pick I (card {a \\<in> I. a < Suc i}) =\n    (LEAST a. a \\<in> I \\<and> Suc i \\<le> a)", "unfolding 2 pick.simps 1"], ["proof (prove)\nusing this:\n  Suc (card {a \\<in> I. a < i}) = Suc (card {a \\<in> I. a < i})\n\ngoal (1 subgoal):\n 1. (LEAST a. a \\<in> I \\<and> i < a) =\n    (LEAST a. a \\<in> I \\<and> Suc i \\<le> a)", "using Suc_le_eq"], ["proof (prove)\nusing this:\n  Suc (card {a \\<in> I. a < i}) = Suc (card {a \\<in> I. a < i})\n  (Suc ?m \\<le> ?n) = (?m < ?n)\n\ngoal (1 subgoal):\n 1. (LEAST a. a \\<in> I \\<and> i < a) =\n    (LEAST a. a \\<in> I \\<and> Suc i \\<le> a)", "by auto"], ["proof (state)\nthis:\n  pick I (card {a \\<in> I. a < Suc i}) =\n  (LEAST a. a \\<in> I \\<and> Suc i \\<le> a)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>pick I (card {a \\<in> I. a < i}) =\n             (LEAST a. a \\<in> I \\<and> i \\<le> a);\n     i \\<notin> I\\<rbrakk>\n    \\<Longrightarrow> pick I (card {a \\<in> I. a < Suc i}) =\n                      (LEAST a. a \\<in> I \\<and> Suc i \\<le> a)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>pick I (card {a \\<in> I. a < i}) =\n             (LEAST a. a \\<in> I \\<and> i \\<le> a);\n     i \\<notin> I\\<rbrakk>\n    \\<Longrightarrow> pick I (card {a \\<in> I. a < Suc i}) =\n                      (LEAST a. a \\<in> I \\<and> Suc i \\<le> a)", "case False"], ["proof (state)\nthis:\n  i \\<notin> I\n\ngoal (1 subgoal):\n 1. \\<lbrakk>pick I (card {a \\<in> I. a < i}) =\n             (LEAST a. a \\<in> I \\<and> i \\<le> a);\n     i \\<notin> I\\<rbrakk>\n    \\<Longrightarrow> pick I (card {a \\<in> I. a < Suc i}) =\n                      (LEAST a. a \\<in> I \\<and> Suc i \\<le> a)", "then"], ["proof (chain)\npicking this:\n  i \\<notin> I", "have 1:\"{a \\<in> I. a < Suc i} = {a \\<in> I. a < i}\""], ["proof (prove)\nusing this:\n  i \\<notin> I\n\ngoal (1 subgoal):\n 1. {a \\<in> I. a < Suc i} = {a \\<in> I. a < i}", "using Collect_cong less_Suc_eq"], ["proof (prove)\nusing this:\n  i \\<notin> I\n  (\\<And>x. ?P x = ?Q x) \\<Longrightarrow> {x. ?P x} = {x. ?Q x}\n  (?m < Suc ?n) = (?m < ?n \\<or> ?m = ?n)\n\ngoal (1 subgoal):\n 1. {a \\<in> I. a < Suc i} = {a \\<in> I. a < i}", "by auto"], ["proof (state)\nthis:\n  {a \\<in> I. a < Suc i} = {a \\<in> I. a < i}\n\ngoal (1 subgoal):\n 1. \\<lbrakk>pick I (card {a \\<in> I. a < i}) =\n             (LEAST a. a \\<in> I \\<and> i \\<le> a);\n     i \\<notin> I\\<rbrakk>\n    \\<Longrightarrow> pick I (card {a \\<in> I. a < Suc i}) =\n                      (LEAST a. a \\<in> I \\<and> Suc i \\<le> a)", "have 2:\"\\<And>a. (a \\<in> I \\<and> Suc i \\<le> a) = (a \\<in> I \\<and> i \\<le> a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a. (a \\<in> I \\<and> Suc i \\<le> a) = (a \\<in> I \\<and> i \\<le> a)", "using False Suc_leD le_less_Suc_eq not_le"], ["proof (prove)\nusing this:\n  i \\<notin> I\n  Suc ?m \\<le> ?n \\<Longrightarrow> ?m \\<le> ?n\n  ?m \\<le> ?n \\<Longrightarrow> (?n < Suc ?m) = (?n = ?m)\n  (\\<not> ?x \\<le> ?y) = (?y < ?x)\n\ngoal (1 subgoal):\n 1. \\<And>a. (a \\<in> I \\<and> Suc i \\<le> a) = (a \\<in> I \\<and> i \\<le> a)", "by blast"], ["proof (state)\nthis:\n  (?a \\<in> I \\<and> Suc i \\<le> ?a) = (?a \\<in> I \\<and> i \\<le> ?a)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>pick I (card {a \\<in> I. a < i}) =\n             (LEAST a. a \\<in> I \\<and> i \\<le> a);\n     i \\<notin> I\\<rbrakk>\n    \\<Longrightarrow> pick I (card {a \\<in> I. a < Suc i}) =\n                      (LEAST a. a \\<in> I \\<and> Suc i \\<le> a)", "then"], ["proof (chain)\npicking this:\n  (?a \\<in> I \\<and> Suc i \\<le> ?a) = (?a \\<in> I \\<and> i \\<le> ?a)", "show ?thesis"], ["proof (prove)\nusing this:\n  (?a \\<in> I \\<and> Suc i \\<le> ?a) = (?a \\<in> I \\<and> i \\<le> ?a)\n\ngoal (1 subgoal):\n 1. pick I (card {a \\<in> I. a < Suc i}) =\n    (LEAST a. a \\<in> I \\<and> Suc i \\<le> a)", "unfolding 1 2"], ["proof (prove)\nusing this:\n  (?a \\<in> I \\<and> i \\<le> ?a) = (?a \\<in> I \\<and> i \\<le> ?a)\n\ngoal (1 subgoal):\n 1. pick I (card {a \\<in> I. a < i}) = (LEAST a. a \\<in> I \\<and> i \\<le> a)", "using Suc.IH"], ["proof (prove)\nusing this:\n  (?a \\<in> I \\<and> i \\<le> ?a) = (?a \\<in> I \\<and> i \\<le> ?a)\n  pick I (card {a \\<in> I. a < i}) = (LEAST a. a \\<in> I \\<and> i \\<le> a)\n\ngoal (1 subgoal):\n 1. pick I (card {a \\<in> I. a < i}) = (LEAST a. a \\<in> I \\<and> i \\<le> a)", "by blast"], ["proof (state)\nthis:\n  pick I (card {a \\<in> I. a < Suc i}) =\n  (LEAST a. a \\<in> I \\<and> Suc i \\<le> a)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  pick I (card {a \\<in> I. a < Suc i}) =\n  (LEAST a. a \\<in> I \\<and> Suc i \\<le> a)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma pick_card_in_set: \"i\\<in>I \\<Longrightarrow> pick I (card {a\\<in>I. a < i}) = i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. i \\<in> I \\<Longrightarrow> pick I (card {a \\<in> I. a < i}) = i", "unfolding pick_card"], ["proof (prove)\ngoal (1 subgoal):\n 1. i \\<in> I \\<Longrightarrow> (LEAST a. a \\<in> I \\<and> i \\<le> a) = i", "using Least_equality order_refl"], ["proof (prove)\nusing this:\n  \\<lbrakk>?P ?x; \\<And>y. ?P y \\<Longrightarrow> ?x \\<le> y\\<rbrakk>\n  \\<Longrightarrow> Least ?P = ?x\n  ?x \\<le> ?x\n\ngoal (1 subgoal):\n 1. i \\<in> I \\<Longrightarrow> (LEAST a. a \\<in> I \\<and> i \\<le> a) = i", "by (metis (no_types, lifting))"], ["", "section \"Sublist\""], ["", "lemma nth_nths_card:\nassumes \"j<length xs\"\nand \"j\\<in>J\"\nshows \"nths xs J ! card {j0. j0 < j \\<and> j0 \\<in> J} = xs!j\""], ["proof (prove)\ngoal (1 subgoal):\n 1. nths xs J ! card {j0. j0 < j \\<and> j0 \\<in> J} = xs ! j", "using assms"], ["proof (prove)\nusing this:\n  j < length xs\n  j \\<in> J\n\ngoal (1 subgoal):\n 1. nths xs J ! card {j0. j0 < j \\<and> j0 \\<in> J} = xs ! j", "proof (induction xs rule:rev_induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>j < length []; j \\<in> J\\<rbrakk>\n    \\<Longrightarrow> nths [] J ! card {j0. j0 < j \\<and> j0 \\<in> J} =\n                      [] ! j\n 2. \\<And>x xs.\n       \\<lbrakk>\\<lbrakk>j < length xs; j \\<in> J\\<rbrakk>\n                \\<Longrightarrow> nths xs J !\n                                  card {j0. j0 < j \\<and> j0 \\<in> J} =\n                                  xs ! j;\n        j < length (xs @ [x]); j \\<in> J\\<rbrakk>\n       \\<Longrightarrow> nths (xs @ [x]) J !\n                         card {j0. j0 < j \\<and> j0 \\<in> J} =\n                         (xs @ [x]) ! j", "case Nil"], ["proof (state)\nthis:\n  j < length []\n  j \\<in> J\n\ngoal (2 subgoals):\n 1. \\<lbrakk>j < length []; j \\<in> J\\<rbrakk>\n    \\<Longrightarrow> nths [] J ! card {j0. j0 < j \\<and> j0 \\<in> J} =\n                      [] ! j\n 2. \\<And>x xs.\n       \\<lbrakk>\\<lbrakk>j < length xs; j \\<in> J\\<rbrakk>\n                \\<Longrightarrow> nths xs J !\n                                  card {j0. j0 < j \\<and> j0 \\<in> J} =\n                                  xs ! j;\n        j < length (xs @ [x]); j \\<in> J\\<rbrakk>\n       \\<Longrightarrow> nths (xs @ [x]) J !\n                         card {j0. j0 < j \\<and> j0 \\<in> J} =\n                         (xs @ [x]) ! j", "then"], ["proof (chain)\npicking this:\n  j < length []\n  j \\<in> J", "show ?case"], ["proof (prove)\nusing this:\n  j < length []\n  j \\<in> J\n\ngoal (1 subgoal):\n 1. nths [] J ! card {j0. j0 < j \\<and> j0 \\<in> J} = [] ! j", "using gr_implies_not0 list.size(3)"], ["proof (prove)\nusing this:\n  j < length []\n  j \\<in> J\n  ?m < ?n \\<Longrightarrow> ?n \\<noteq> 0\n  length [] = 0\n\ngoal (1 subgoal):\n 1. nths [] J ! card {j0. j0 < j \\<and> j0 \\<in> J} = [] ! j", "by auto"], ["proof (state)\nthis:\n  nths [] J ! card {j0. j0 < j \\<and> j0 \\<in> J} = [] ! j\n\ngoal (1 subgoal):\n 1. \\<And>x xs.\n       \\<lbrakk>\\<lbrakk>j < length xs; j \\<in> J\\<rbrakk>\n                \\<Longrightarrow> nths xs J !\n                                  card {j0. j0 < j \\<and> j0 \\<in> J} =\n                                  xs ! j;\n        j < length (xs @ [x]); j \\<in> J\\<rbrakk>\n       \\<Longrightarrow> nths (xs @ [x]) J !\n                         card {j0. j0 < j \\<and> j0 \\<in> J} =\n                         (xs @ [x]) ! j", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x xs.\n       \\<lbrakk>\\<lbrakk>j < length xs; j \\<in> J\\<rbrakk>\n                \\<Longrightarrow> nths xs J !\n                                  card {j0. j0 < j \\<and> j0 \\<in> J} =\n                                  xs ! j;\n        j < length (xs @ [x]); j \\<in> J\\<rbrakk>\n       \\<Longrightarrow> nths (xs @ [x]) J !\n                         card {j0. j0 < j \\<and> j0 \\<in> J} =\n                         (xs @ [x]) ! j", "case (snoc x xs)"], ["proof (state)\nthis:\n  \\<lbrakk>j < length xs; j \\<in> J\\<rbrakk>\n  \\<Longrightarrow> nths xs J ! card {j0. j0 < j \\<and> j0 \\<in> J} = xs ! j\n  j < length (xs @ [x])\n  j \\<in> J\n\ngoal (1 subgoal):\n 1. \\<And>x xs.\n       \\<lbrakk>\\<lbrakk>j < length xs; j \\<in> J\\<rbrakk>\n                \\<Longrightarrow> nths xs J !\n                                  card {j0. j0 < j \\<and> j0 \\<in> J} =\n                                  xs ! j;\n        j < length (xs @ [x]); j \\<in> J\\<rbrakk>\n       \\<Longrightarrow> nths (xs @ [x]) J !\n                         card {j0. j0 < j \\<and> j0 \\<in> J} =\n                         (xs @ [x]) ! j", "then"], ["proof (chain)\npicking this:\n  \\<lbrakk>j < length xs; j \\<in> J\\<rbrakk>\n  \\<Longrightarrow> nths xs J ! card {j0. j0 < j \\<and> j0 \\<in> J} = xs ! j\n  j < length (xs @ [x])\n  j \\<in> J", "show ?case"], ["proof (prove)\nusing this:\n  \\<lbrakk>j < length xs; j \\<in> J\\<rbrakk>\n  \\<Longrightarrow> nths xs J ! card {j0. j0 < j \\<and> j0 \\<in> J} = xs ! j\n  j < length (xs @ [x])\n  j \\<in> J\n\ngoal (1 subgoal):\n 1. nths (xs @ [x]) J ! card {j0. j0 < j \\<and> j0 \\<in> J} = (xs @ [x]) ! j", "proof (cases \"j < length xs\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<lbrakk>j < length xs; j \\<in> J\\<rbrakk>\n             \\<Longrightarrow> nths xs J !\n                               card {j0. j0 < j \\<and> j0 \\<in> J} =\n                               xs ! j;\n     j < length (xs @ [x]); j \\<in> J; j < length xs\\<rbrakk>\n    \\<Longrightarrow> nths (xs @ [x]) J !\n                      card {j0. j0 < j \\<and> j0 \\<in> J} =\n                      (xs @ [x]) ! j\n 2. \\<lbrakk>\\<lbrakk>j < length xs; j \\<in> J\\<rbrakk>\n             \\<Longrightarrow> nths xs J !\n                               card {j0. j0 < j \\<and> j0 \\<in> J} =\n                               xs ! j;\n     j < length (xs @ [x]); j \\<in> J; \\<not> j < length xs\\<rbrakk>\n    \\<Longrightarrow> nths (xs @ [x]) J !\n                      card {j0. j0 < j \\<and> j0 \\<in> J} =\n                      (xs @ [x]) ! j", "case True"], ["proof (state)\nthis:\n  j < length xs\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<lbrakk>j < length xs; j \\<in> J\\<rbrakk>\n             \\<Longrightarrow> nths xs J !\n                               card {j0. j0 < j \\<and> j0 \\<in> J} =\n                               xs ! j;\n     j < length (xs @ [x]); j \\<in> J; j < length xs\\<rbrakk>\n    \\<Longrightarrow> nths (xs @ [x]) J !\n                      card {j0. j0 < j \\<and> j0 \\<in> J} =\n                      (xs @ [x]) ! j\n 2. \\<lbrakk>\\<lbrakk>j < length xs; j \\<in> J\\<rbrakk>\n             \\<Longrightarrow> nths xs J !\n                               card {j0. j0 < j \\<and> j0 \\<in> J} =\n                               xs ! j;\n     j < length (xs @ [x]); j \\<in> J; \\<not> j < length xs\\<rbrakk>\n    \\<Longrightarrow> nths (xs @ [x]) J !\n                      card {j0. j0 < j \\<and> j0 \\<in> J} =\n                      (xs @ [x]) ! j", "have \"{j0. j0 < j \\<and> j0 \\<in> J} \\<subset> {i. i < length xs \\<and> i \\<in> J}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {j0. j0 < j \\<and> j0 \\<in> J}\n    \\<subset> {i. i < length xs \\<and> i \\<in> J}", "using True snoc.prems(2)"], ["proof (prove)\nusing this:\n  j < length xs\n  j \\<in> J\n\ngoal (1 subgoal):\n 1. {j0. j0 < j \\<and> j0 \\<in> J}\n    \\<subset> {i. i < length xs \\<and> i \\<in> J}", "by auto"], ["proof (state)\nthis:\n  {j0. j0 < j \\<and> j0 \\<in> J}\n  \\<subset> {i. i < length xs \\<and> i \\<in> J}\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<lbrakk>j < length xs; j \\<in> J\\<rbrakk>\n             \\<Longrightarrow> nths xs J !\n                               card {j0. j0 < j \\<and> j0 \\<in> J} =\n                               xs ! j;\n     j < length (xs @ [x]); j \\<in> J; j < length xs\\<rbrakk>\n    \\<Longrightarrow> nths (xs @ [x]) J !\n                      card {j0. j0 < j \\<and> j0 \\<in> J} =\n                      (xs @ [x]) ! j\n 2. \\<lbrakk>\\<lbrakk>j < length xs; j \\<in> J\\<rbrakk>\n             \\<Longrightarrow> nths xs J !\n                               card {j0. j0 < j \\<and> j0 \\<in> J} =\n                               xs ! j;\n     j < length (xs @ [x]); j \\<in> J; \\<not> j < length xs\\<rbrakk>\n    \\<Longrightarrow> nths (xs @ [x]) J !\n                      card {j0. j0 < j \\<and> j0 \\<in> J} =\n                      (xs @ [x]) ! j", "then"], ["proof (chain)\npicking this:\n  {j0. j0 < j \\<and> j0 \\<in> J}\n  \\<subset> {i. i < length xs \\<and> i \\<in> J}", "have \"card {j0. j0 < j \\<and> j0 \\<in> J} < length (nths xs J)\""], ["proof (prove)\nusing this:\n  {j0. j0 < j \\<and> j0 \\<in> J}\n  \\<subset> {i. i < length xs \\<and> i \\<in> J}\n\ngoal (1 subgoal):\n 1. card {j0. j0 < j \\<and> j0 \\<in> J} < length (nths xs J)", "unfolding length_nths"], ["proof (prove)\nusing this:\n  {j0. j0 < j \\<and> j0 \\<in> J}\n  \\<subset> {i. i < length xs \\<and> i \\<in> J}\n\ngoal (1 subgoal):\n 1. card {j0. j0 < j \\<and> j0 \\<in> J}\n    < card {i. i < length xs \\<and> i \\<in> J}", "using psubset_card_mono[of \"{i. i < length xs \\<and> i \\<in> J}\"]"], ["proof (prove)\nusing this:\n  {j0. j0 < j \\<and> j0 \\<in> J}\n  \\<subset> {i. i < length xs \\<and> i \\<in> J}\n  \\<lbrakk>finite {i. i < length xs \\<and> i \\<in> J};\n   ?A \\<subset> {i. i < length xs \\<and> i \\<in> J}\\<rbrakk>\n  \\<Longrightarrow> card ?A < card {i. i < length xs \\<and> i \\<in> J}\n\ngoal (1 subgoal):\n 1. card {j0. j0 < j \\<and> j0 \\<in> J}\n    < card {i. i < length xs \\<and> i \\<in> J}", "by simp"], ["proof (state)\nthis:\n  card {j0. j0 < j \\<and> j0 \\<in> J} < length (nths xs J)\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<lbrakk>j < length xs; j \\<in> J\\<rbrakk>\n             \\<Longrightarrow> nths xs J !\n                               card {j0. j0 < j \\<and> j0 \\<in> J} =\n                               xs ! j;\n     j < length (xs @ [x]); j \\<in> J; j < length xs\\<rbrakk>\n    \\<Longrightarrow> nths (xs @ [x]) J !\n                      card {j0. j0 < j \\<and> j0 \\<in> J} =\n                      (xs @ [x]) ! j\n 2. \\<lbrakk>\\<lbrakk>j < length xs; j \\<in> J\\<rbrakk>\n             \\<Longrightarrow> nths xs J !\n                               card {j0. j0 < j \\<and> j0 \\<in> J} =\n                               xs ! j;\n     j < length (xs @ [x]); j \\<in> J; \\<not> j < length xs\\<rbrakk>\n    \\<Longrightarrow> nths (xs @ [x]) J !\n                      card {j0. j0 < j \\<and> j0 \\<in> J} =\n                      (xs @ [x]) ! j", "then"], ["proof (chain)\npicking this:\n  card {j0. j0 < j \\<and> j0 \\<in> J} < length (nths xs J)", "show ?thesis"], ["proof (prove)\nusing this:\n  card {j0. j0 < j \\<and> j0 \\<in> J} < length (nths xs J)\n\ngoal (1 subgoal):\n 1. nths (xs @ [x]) J ! card {j0. j0 < j \\<and> j0 \\<in> J} = (xs @ [x]) ! j", "unfolding nths_append nth_append"], ["proof (prove)\nusing this:\n  card {j0. j0 < j \\<and> j0 \\<in> J} < length (nths xs J)\n\ngoal (1 subgoal):\n 1. (if card {j0. j0 < j \\<and> j0 \\<in> J} < length (nths xs J)\n     then nths xs J ! card {j0. j0 < j \\<and> j0 \\<in> J}\n     else nths [x] {j. j + length xs \\<in> J} !\n          (card {j0. j0 < j \\<and> j0 \\<in> J} - length (nths xs J))) =\n    (if j < length xs then xs ! j else [x] ! (j - length xs))", "by (simp add: True snoc.IH snoc.prems(2))"], ["proof (state)\nthis:\n  nths (xs @ [x]) J ! card {j0. j0 < j \\<and> j0 \\<in> J} = (xs @ [x]) ! j\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<lbrakk>j < length xs; j \\<in> J\\<rbrakk>\n             \\<Longrightarrow> nths xs J !\n                               card {j0. j0 < j \\<and> j0 \\<in> J} =\n                               xs ! j;\n     j < length (xs @ [x]); j \\<in> J; \\<not> j < length xs\\<rbrakk>\n    \\<Longrightarrow> nths (xs @ [x]) J !\n                      card {j0. j0 < j \\<and> j0 \\<in> J} =\n                      (xs @ [x]) ! j", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<lbrakk>j < length xs; j \\<in> J\\<rbrakk>\n             \\<Longrightarrow> nths xs J !\n                               card {j0. j0 < j \\<and> j0 \\<in> J} =\n                               xs ! j;\n     j < length (xs @ [x]); j \\<in> J; \\<not> j < length xs\\<rbrakk>\n    \\<Longrightarrow> nths (xs @ [x]) J !\n                      card {j0. j0 < j \\<and> j0 \\<in> J} =\n                      (xs @ [x]) ! j", "case False"], ["proof (state)\nthis:\n  \\<not> j < length xs\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<lbrakk>j < length xs; j \\<in> J\\<rbrakk>\n             \\<Longrightarrow> nths xs J !\n                               card {j0. j0 < j \\<and> j0 \\<in> J} =\n                               xs ! j;\n     j < length (xs @ [x]); j \\<in> J; \\<not> j < length xs\\<rbrakk>\n    \\<Longrightarrow> nths (xs @ [x]) J !\n                      card {j0. j0 < j \\<and> j0 \\<in> J} =\n                      (xs @ [x]) ! j", "then"], ["proof (chain)\npicking this:\n  \\<not> j < length xs", "have \"length xs = j\""], ["proof (prove)\nusing this:\n  \\<not> j < length xs\n\ngoal (1 subgoal):\n 1. length xs = j", "using length_append_singleton less_antisym snoc.prems(1)"], ["proof (prove)\nusing this:\n  \\<not> j < length xs\n  length (?xs @ [?x]) = Suc (length ?xs)\n  \\<lbrakk>\\<not> ?n < ?m; ?n < Suc ?m\\<rbrakk> \\<Longrightarrow> ?m = ?n\n  j < length (xs @ [x])\n\ngoal (1 subgoal):\n 1. length xs = j", "by auto"], ["proof (state)\nthis:\n  length xs = j\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<lbrakk>j < length xs; j \\<in> J\\<rbrakk>\n             \\<Longrightarrow> nths xs J !\n                               card {j0. j0 < j \\<and> j0 \\<in> J} =\n                               xs ! j;\n     j < length (xs @ [x]); j \\<in> J; \\<not> j < length xs\\<rbrakk>\n    \\<Longrightarrow> nths (xs @ [x]) J !\n                      card {j0. j0 < j \\<and> j0 \\<in> J} =\n                      (xs @ [x]) ! j", "then"], ["proof (chain)\npicking this:\n  length xs = j", "show ?thesis"], ["proof (prove)\nusing this:\n  length xs = j\n\ngoal (1 subgoal):\n 1. nths (xs @ [x]) J ! card {j0. j0 < j \\<and> j0 \\<in> J} = (xs @ [x]) ! j", "unfolding nths_append nth_append length_nths \\<open>length xs = j\\<close>"], ["proof (prove)\nusing this:\n  j = j\n\ngoal (1 subgoal):\n 1. (if card {j0. j0 < j \\<and> j0 \\<in> J}\n        < card {i. i < j \\<and> i \\<in> J}\n     then nths xs J ! card {j0. j0 < j \\<and> j0 \\<in> J}\n     else nths [x] {ja. ja + j \\<in> J} !\n          (card {j0. j0 < j \\<and> j0 \\<in> J} -\n           card {i. i < j \\<and> i \\<in> J})) =\n    (if j < j then xs ! j else [x] ! (j - j))", "by (simp add: snoc.prems(2))"], ["proof (state)\nthis:\n  nths (xs @ [x]) J ! card {j0. j0 < j \\<and> j0 \\<in> J} = (xs @ [x]) ! j\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  nths (xs @ [x]) J ! card {j0. j0 < j \\<and> j0 \\<in> J} = (xs @ [x]) ! j\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma pick_reduce_set:\nassumes \"i<card {a. a<m \\<and> a\\<in>I}\"\nshows \"pick I i = pick {a. a < m \\<and> a \\<in> I} i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pick I i = pick {a. a < m \\<and> a \\<in> I} i", "using assms"], ["proof (prove)\nusing this:\n  i < card {a. a < m \\<and> a \\<in> I}\n\ngoal (1 subgoal):\n 1. pick I i = pick {a. a < m \\<and> a \\<in> I} i", "proof (induction i)"], ["proof (state)\ngoal (2 subgoals):\n 1. 0 < card {a. a < m \\<and> a \\<in> I} \\<Longrightarrow>\n    pick I 0 = pick {a. a < m \\<and> a \\<in> I} 0\n 2. \\<And>i.\n       \\<lbrakk>i < card {a. a < m \\<and> a \\<in> I} \\<Longrightarrow>\n                pick I i = pick {a. a < m \\<and> a \\<in> I} i;\n        Suc i < card {a. a < m \\<and> a \\<in> I}\\<rbrakk>\n       \\<Longrightarrow> pick I (Suc i) =\n                         pick {a. a < m \\<and> a \\<in> I} (Suc i)", "let ?L = \"LEAST a. a \\<in> {a. a < m \\<and> a \\<in> I}\""], ["proof (state)\ngoal (2 subgoals):\n 1. 0 < card {a. a < m \\<and> a \\<in> I} \\<Longrightarrow>\n    pick I 0 = pick {a. a < m \\<and> a \\<in> I} 0\n 2. \\<And>i.\n       \\<lbrakk>i < card {a. a < m \\<and> a \\<in> I} \\<Longrightarrow>\n                pick I i = pick {a. a < m \\<and> a \\<in> I} i;\n        Suc i < card {a. a < m \\<and> a \\<in> I}\\<rbrakk>\n       \\<Longrightarrow> pick I (Suc i) =\n                         pick {a. a < m \\<and> a \\<in> I} (Suc i)", "case 0"], ["proof (state)\nthis:\n  0 < card {a. a < m \\<and> a \\<in> I}\n\ngoal (2 subgoals):\n 1. 0 < card {a. a < m \\<and> a \\<in> I} \\<Longrightarrow>\n    pick I 0 = pick {a. a < m \\<and> a \\<in> I} 0\n 2. \\<And>i.\n       \\<lbrakk>i < card {a. a < m \\<and> a \\<in> I} \\<Longrightarrow>\n                pick I i = pick {a. a < m \\<and> a \\<in> I} i;\n        Suc i < card {a. a < m \\<and> a \\<in> I}\\<rbrakk>\n       \\<Longrightarrow> pick I (Suc i) =\n                         pick {a. a < m \\<and> a \\<in> I} (Suc i)", "then"], ["proof (chain)\npicking this:\n  0 < card {a. a < m \\<and> a \\<in> I}", "have \"{a. a < m \\<and> a \\<in> I} \\<noteq> {}\""], ["proof (prove)\nusing this:\n  0 < card {a. a < m \\<and> a \\<in> I}\n\ngoal (1 subgoal):\n 1. {a. a < m \\<and> a \\<in> I} \\<noteq> {}", "using card.empty less_numeral_extra(3)"], ["proof (prove)\nusing this:\n  0 < card {a. a < m \\<and> a \\<in> I}\n  card {} = 0\n  \\<not> (0::?'a) < (0::?'a)\n\ngoal (1 subgoal):\n 1. {a. a < m \\<and> a \\<in> I} \\<noteq> {}", "by fastforce"], ["proof (state)\nthis:\n  {a. a < m \\<and> a \\<in> I} \\<noteq> {}\n\ngoal (2 subgoals):\n 1. 0 < card {a. a < m \\<and> a \\<in> I} \\<Longrightarrow>\n    pick I 0 = pick {a. a < m \\<and> a \\<in> I} 0\n 2. \\<And>i.\n       \\<lbrakk>i < card {a. a < m \\<and> a \\<in> I} \\<Longrightarrow>\n                pick I i = pick {a. a < m \\<and> a \\<in> I} i;\n        Suc i < card {a. a < m \\<and> a \\<in> I}\\<rbrakk>\n       \\<Longrightarrow> pick I (Suc i) =\n                         pick {a. a < m \\<and> a \\<in> I} (Suc i)", "then"], ["proof (chain)\npicking this:\n  {a. a < m \\<and> a \\<in> I} \\<noteq> {}", "have \"?L \\<in> I\" \"?L < m\""], ["proof (prove)\nusing this:\n  {a. a < m \\<and> a \\<in> I} \\<noteq> {}\n\ngoal (1 subgoal):\n 1. (LEAST a. a \\<in> {a. a < m \\<and> a \\<in> I}) \\<in> I &&&\n    (LEAST a. a \\<in> {a. a < m \\<and> a \\<in> I}) < m", "by (metis (mono_tags, lifting) Collect_empty_eq LeastI mem_Collect_eq)+"], ["proof (state)\nthis:\n  (LEAST a. a \\<in> {a. a < m \\<and> a \\<in> I}) \\<in> I\n  (LEAST a. a \\<in> {a. a < m \\<and> a \\<in> I}) < m\n\ngoal (2 subgoals):\n 1. 0 < card {a. a < m \\<and> a \\<in> I} \\<Longrightarrow>\n    pick I 0 = pick {a. a < m \\<and> a \\<in> I} 0\n 2. \\<And>i.\n       \\<lbrakk>i < card {a. a < m \\<and> a \\<in> I} \\<Longrightarrow>\n                pick I i = pick {a. a < m \\<and> a \\<in> I} i;\n        Suc i < card {a. a < m \\<and> a \\<in> I}\\<rbrakk>\n       \\<Longrightarrow> pick I (Suc i) =\n                         pick {a. a < m \\<and> a \\<in> I} (Suc i)", "have \"\\<And>x. x \\<in> {a. a < m \\<and> a \\<in> I} \\<Longrightarrow> ?L \\<le> x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {a. a < m \\<and> a \\<in> I} \\<Longrightarrow>\n       (LEAST a. a \\<in> {a. a < m \\<and> a \\<in> I}) \\<le> x", "by (simp add: Least_le)"], ["proof (state)\nthis:\n  ?x \\<in> {a. a < m \\<and> a \\<in> I} \\<Longrightarrow>\n  (LEAST a. a \\<in> {a. a < m \\<and> a \\<in> I}) \\<le> ?x\n\ngoal (2 subgoals):\n 1. 0 < card {a. a < m \\<and> a \\<in> I} \\<Longrightarrow>\n    pick I 0 = pick {a. a < m \\<and> a \\<in> I} 0\n 2. \\<And>i.\n       \\<lbrakk>i < card {a. a < m \\<and> a \\<in> I} \\<Longrightarrow>\n                pick I i = pick {a. a < m \\<and> a \\<in> I} i;\n        Suc i < card {a. a < m \\<and> a \\<in> I}\\<rbrakk>\n       \\<Longrightarrow> pick I (Suc i) =\n                         pick {a. a < m \\<and> a \\<in> I} (Suc i)", "have \"\\<And>x. x \\<in> I \\<Longrightarrow> ?L \\<le> x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> I \\<Longrightarrow>\n       (LEAST a. a \\<in> {a. a < m \\<and> a \\<in> I}) \\<le> x", "by (metis (mono_tags) \\<open>?L < m\\<close> \\<open>\\<And>x. x \\<in> {a. a < m \\<and> a \\<in> I} \\<Longrightarrow> ?L \\<le> x\\<close> dual_order.strict_trans2 le_cases mem_Collect_eq)"], ["proof (state)\nthis:\n  ?x \\<in> I \\<Longrightarrow>\n  (LEAST a. a \\<in> {a. a < m \\<and> a \\<in> I}) \\<le> ?x\n\ngoal (2 subgoals):\n 1. 0 < card {a. a < m \\<and> a \\<in> I} \\<Longrightarrow>\n    pick I 0 = pick {a. a < m \\<and> a \\<in> I} 0\n 2. \\<And>i.\n       \\<lbrakk>i < card {a. a < m \\<and> a \\<in> I} \\<Longrightarrow>\n                pick I i = pick {a. a < m \\<and> a \\<in> I} i;\n        Suc i < card {a. a < m \\<and> a \\<in> I}\\<rbrakk>\n       \\<Longrightarrow> pick I (Suc i) =\n                         pick {a. a < m \\<and> a \\<in> I} (Suc i)", "then"], ["proof (chain)\npicking this:\n  ?x \\<in> I \\<Longrightarrow>\n  (LEAST a. a \\<in> {a. a < m \\<and> a \\<in> I}) \\<le> ?x", "show ?case"], ["proof (prove)\nusing this:\n  ?x \\<in> I \\<Longrightarrow>\n  (LEAST a. a \\<in> {a. a < m \\<and> a \\<in> I}) \\<le> ?x\n\ngoal (1 subgoal):\n 1. pick I 0 = pick {a. a < m \\<and> a \\<in> I} 0", "unfolding pick.simps"], ["proof (prove)\nusing this:\n  ?x \\<in> I \\<Longrightarrow>\n  (LEAST a. a \\<in> {a. a < m \\<and> a \\<in> I}) \\<le> ?x\n\ngoal (1 subgoal):\n 1. (LEAST a. a \\<in> I) = (LEAST a. a \\<in> {a. a < m \\<and> a \\<in> I})", "using Least_equality[of \"\\<lambda>x. x\\<in>I\", OF \\<open>?L \\<in> I\\<close>]"], ["proof (prove)\nusing this:\n  ?x \\<in> I \\<Longrightarrow>\n  (LEAST a. a \\<in> {a. a < m \\<and> a \\<in> I}) \\<le> ?x\n  (\\<And>y.\n      y \\<in> I \\<Longrightarrow>\n      (LEAST a. a \\<in> {a. a < m \\<and> a \\<in> I})\n      \\<le> y) \\<Longrightarrow>\n  (LEAST x. x \\<in> I) = (LEAST a. a \\<in> {a. a < m \\<and> a \\<in> I})\n\ngoal (1 subgoal):\n 1. (LEAST a. a \\<in> I) = (LEAST a. a \\<in> {a. a < m \\<and> a \\<in> I})", "by blast"], ["proof (state)\nthis:\n  pick I 0 = pick {a. a < m \\<and> a \\<in> I} 0\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       \\<lbrakk>i < card {a. a < m \\<and> a \\<in> I} \\<Longrightarrow>\n                pick I i = pick {a. a < m \\<and> a \\<in> I} i;\n        Suc i < card {a. a < m \\<and> a \\<in> I}\\<rbrakk>\n       \\<Longrightarrow> pick I (Suc i) =\n                         pick {a. a < m \\<and> a \\<in> I} (Suc i)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i.\n       \\<lbrakk>i < card {a. a < m \\<and> a \\<in> I} \\<Longrightarrow>\n                pick I i = pick {a. a < m \\<and> a \\<in> I} i;\n        Suc i < card {a. a < m \\<and> a \\<in> I}\\<rbrakk>\n       \\<Longrightarrow> pick I (Suc i) =\n                         pick {a. a < m \\<and> a \\<in> I} (Suc i)", "case (Suc i)"], ["proof (state)\nthis:\n  i < card {a. a < m \\<and> a \\<in> I} \\<Longrightarrow>\n  pick I i = pick {a. a < m \\<and> a \\<in> I} i\n  Suc i < card {a. a < m \\<and> a \\<in> I}\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       \\<lbrakk>i < card {a. a < m \\<and> a \\<in> I} \\<Longrightarrow>\n                pick I i = pick {a. a < m \\<and> a \\<in> I} i;\n        Suc i < card {a. a < m \\<and> a \\<in> I}\\<rbrakk>\n       \\<Longrightarrow> pick I (Suc i) =\n                         pick {a. a < m \\<and> a \\<in> I} (Suc i)", "let ?L = \"LEAST x. x \\<in> {a. a < m \\<and> a \\<in> I} \\<and> pick I i < x\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i.\n       \\<lbrakk>i < card {a. a < m \\<and> a \\<in> I} \\<Longrightarrow>\n                pick I i = pick {a. a < m \\<and> a \\<in> I} i;\n        Suc i < card {a. a < m \\<and> a \\<in> I}\\<rbrakk>\n       \\<Longrightarrow> pick I (Suc i) =\n                         pick {a. a < m \\<and> a \\<in> I} (Suc i)", "have 0:\"pick {a. a < m \\<and> a \\<in> I} i = pick I i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pick {a. a < m \\<and> a \\<in> I} i = pick I i", "using Suc_lessD Suc"], ["proof (prove)\nusing this:\n  Suc ?m < ?n \\<Longrightarrow> ?m < ?n\n  i < card {a. a < m \\<and> a \\<in> I} \\<Longrightarrow>\n  pick I i = pick {a. a < m \\<and> a \\<in> I} i\n  Suc i < card {a. a < m \\<and> a \\<in> I}\n\ngoal (1 subgoal):\n 1. pick {a. a < m \\<and> a \\<in> I} i = pick I i", "by linarith"], ["proof (state)\nthis:\n  pick {a. a < m \\<and> a \\<in> I} i = pick I i\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       \\<lbrakk>i < card {a. a < m \\<and> a \\<in> I} \\<Longrightarrow>\n                pick I i = pick {a. a < m \\<and> a \\<in> I} i;\n        Suc i < card {a. a < m \\<and> a \\<in> I}\\<rbrakk>\n       \\<Longrightarrow> pick I (Suc i) =\n                         pick {a. a < m \\<and> a \\<in> I} (Suc i)", "then"], ["proof (chain)\npicking this:\n  pick {a. a < m \\<and> a \\<in> I} i = pick I i", "have \"?L \\<in> {a. a < m \\<and> a \\<in> I}\" \"pick I i < ?L\""], ["proof (prove)\nusing this:\n  pick {a. a < m \\<and> a \\<in> I} i = pick I i\n\ngoal (1 subgoal):\n 1. (LEAST x. x \\<in> {a. a < m \\<and> a \\<in> I} \\<and> pick I i < x)\n    \\<in> {a. a < m \\<and> a \\<in> I} &&&\n    pick I i\n    < (LEAST x. x \\<in> {a. a < m \\<and> a \\<in> I} \\<and> pick I i < x)", "using LeastI[of \"\\<lambda>a. a \\<in> {a. a < m \\<and> a \\<in> I} \\<and> pick I i < a\"]"], ["proof (prove)\nusing this:\n  pick {a. a < m \\<and> a \\<in> I} i = pick I i\n  ?k \\<in> {a. a < m \\<and> a \\<in> I} \\<and>\n  pick I i < ?k \\<Longrightarrow>\n  (LEAST x. x \\<in> {a. a < m \\<and> a \\<in> I} \\<and> pick I i < x)\n  \\<in> {a. a < m \\<and> a \\<in> I} \\<and>\n  pick I i\n  < (LEAST x. x \\<in> {a. a < m \\<and> a \\<in> I} \\<and> pick I i < x)\n\ngoal (1 subgoal):\n 1. (LEAST x. x \\<in> {a. a < m \\<and> a \\<in> I} \\<and> pick I i < x)\n    \\<in> {a. a < m \\<and> a \\<in> I} &&&\n    pick I i\n    < (LEAST x. x \\<in> {a. a < m \\<and> a \\<in> I} \\<and> pick I i < x)", "using Suc.prems pick_in_set_le pick_mono_le"], ["proof (prove)\nusing this:\n  pick {a. a < m \\<and> a \\<in> I} i = pick I i\n  ?k \\<in> {a. a < m \\<and> a \\<in> I} \\<and>\n  pick I i < ?k \\<Longrightarrow>\n  (LEAST x. x \\<in> {a. a < m \\<and> a \\<in> I} \\<and> pick I i < x)\n  \\<in> {a. a < m \\<and> a \\<in> I} \\<and>\n  pick I i\n  < (LEAST x. x \\<in> {a. a < m \\<and> a \\<in> I} \\<and> pick I i < x)\n  Suc i < card {a. a < m \\<and> a \\<in> I}\n  ?n < card ?S \\<Longrightarrow> pick ?S ?n \\<in> ?S\n  \\<lbrakk>?n < card ?S; ?m < ?n\\<rbrakk>\n  \\<Longrightarrow> pick ?S ?m < pick ?S ?n\n\ngoal (1 subgoal):\n 1. (LEAST x. x \\<in> {a. a < m \\<and> a \\<in> I} \\<and> pick I i < x)\n    \\<in> {a. a < m \\<and> a \\<in> I} &&&\n    pick I i\n    < (LEAST x. x \\<in> {a. a < m \\<and> a \\<in> I} \\<and> pick I i < x)", "by fastforce+"], ["proof (state)\nthis:\n  (LEAST x. x \\<in> {a. a < m \\<and> a \\<in> I} \\<and> pick I i < x)\n  \\<in> {a. a < m \\<and> a \\<in> I}\n  pick I i\n  < (LEAST x. x \\<in> {a. a < m \\<and> a \\<in> I} \\<and> pick I i < x)\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       \\<lbrakk>i < card {a. a < m \\<and> a \\<in> I} \\<Longrightarrow>\n                pick I i = pick {a. a < m \\<and> a \\<in> I} i;\n        Suc i < card {a. a < m \\<and> a \\<in> I}\\<rbrakk>\n       \\<Longrightarrow> pick I (Suc i) =\n                         pick {a. a < m \\<and> a \\<in> I} (Suc i)", "then"], ["proof (chain)\npicking this:\n  (LEAST x. x \\<in> {a. a < m \\<and> a \\<in> I} \\<and> pick I i < x)\n  \\<in> {a. a < m \\<and> a \\<in> I}\n  pick I i\n  < (LEAST x. x \\<in> {a. a < m \\<and> a \\<in> I} \\<and> pick I i < x)", "have \"?L \\<in> I\""], ["proof (prove)\nusing this:\n  (LEAST x. x \\<in> {a. a < m \\<and> a \\<in> I} \\<and> pick I i < x)\n  \\<in> {a. a < m \\<and> a \\<in> I}\n  pick I i\n  < (LEAST x. x \\<in> {a. a < m \\<and> a \\<in> I} \\<and> pick I i < x)\n\ngoal (1 subgoal):\n 1. (LEAST x. x \\<in> {a. a < m \\<and> a \\<in> I} \\<and> pick I i < x)\n    \\<in> I", "by blast"], ["proof (state)\nthis:\n  (LEAST x. x \\<in> {a. a < m \\<and> a \\<in> I} \\<and> pick I i < x) \\<in> I\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       \\<lbrakk>i < card {a. a < m \\<and> a \\<in> I} \\<Longrightarrow>\n                pick I i = pick {a. a < m \\<and> a \\<in> I} i;\n        Suc i < card {a. a < m \\<and> a \\<in> I}\\<rbrakk>\n       \\<Longrightarrow> pick I (Suc i) =\n                         pick {a. a < m \\<and> a \\<in> I} (Suc i)", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. pick I (Suc i) = pick {a. a < m \\<and> a \\<in> I} (Suc i)", "unfolding pick.simps 0"], ["proof (prove)\ngoal (1 subgoal):\n 1. (LEAST a. a \\<in> I \\<and> pick I i < a) =\n    (LEAST a. a \\<in> {a. a < m \\<and> a \\<in> I} \\<and> pick I i < a)", "using Least_equality[of \"\\<lambda>a. a \\<in> I \\<and> pick I i < a\" ?L]"], ["proof (prove)\nusing this:\n  \\<lbrakk>(LEAST x.\n               x \\<in> {a. a < m \\<and> a \\<in> I} \\<and> pick I i < x)\n           \\<in> I \\<and>\n           pick I i\n           < (LEAST x.\n                 x \\<in> {a. a < m \\<and> a \\<in> I} \\<and> pick I i < x);\n   \\<And>y.\n      y \\<in> I \\<and> pick I i < y \\<Longrightarrow>\n      (LEAST x. x \\<in> {a. a < m \\<and> a \\<in> I} \\<and> pick I i < x)\n      \\<le> y\\<rbrakk>\n  \\<Longrightarrow> (LEAST a. a \\<in> I \\<and> pick I i < a) =\n                    (LEAST x.\n                        x \\<in> {a. a < m \\<and> a \\<in> I} \\<and>\n                        pick I i < x)\n\ngoal (1 subgoal):\n 1. (LEAST a. a \\<in> I \\<and> pick I i < a) =\n    (LEAST a. a \\<in> {a. a < m \\<and> a \\<in> I} \\<and> pick I i < a)", "by (metis (no_types, lifting) Least_le \\<open>?L \\<in> {a. a < m \\<and> a \\<in> I}\\<close> \\<open>pick I i < ?L\\<close> mem_Collect_eq not_le not_less_iff_gr_or_eq order.trans)"], ["proof (state)\nthis:\n  pick I (Suc i) = pick {a. a < m \\<and> a \\<in> I} (Suc i)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma nth_nths:\nassumes \"i<card {i. i<length xs \\<and> i\\<in>I}\"\nshows \"nths xs I ! i = xs ! pick I i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. nths xs I ! i = xs ! pick I i", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. nths xs I ! i = xs ! pick I i", "have \"{a \\<in> {i. i < length xs \\<and> i \\<in> I}. a < pick {i. i < length xs \\<and> i \\<in> I} i}\n        = {a.  a < pick {i. i < length xs \\<and> i \\<in> I} i \\<and> a \\<in> I}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {a \\<in> {i. i < length xs \\<and> i \\<in> I}.\n     a < pick {i. i < length xs \\<and> i \\<in> I} i} =\n    {a. a < pick {i. i < length xs \\<and> i \\<in> I} i \\<and> a \\<in> I}", "using assms pick_in_set"], ["proof (prove)\nusing this:\n  i < card {i. i < length xs \\<and> i \\<in> I}\n  ?n < card ?S \\<or> infinite ?S \\<Longrightarrow> pick ?S ?n \\<in> ?S\n\ngoal (1 subgoal):\n 1. {a \\<in> {i. i < length xs \\<and> i \\<in> I}.\n     a < pick {i. i < length xs \\<and> i \\<in> I} i} =\n    {a. a < pick {i. i < length xs \\<and> i \\<in> I} i \\<and> a \\<in> I}", "by fastforce"], ["proof (state)\nthis:\n  {a \\<in> {i. i < length xs \\<and> i \\<in> I}.\n   a < pick {i. i < length xs \\<and> i \\<in> I} i} =\n  {a. a < pick {i. i < length xs \\<and> i \\<in> I} i \\<and> a \\<in> I}\n\ngoal (1 subgoal):\n 1. nths xs I ! i = xs ! pick I i", "then"], ["proof (chain)\npicking this:\n  {a \\<in> {i. i < length xs \\<and> i \\<in> I}.\n   a < pick {i. i < length xs \\<and> i \\<in> I} i} =\n  {a. a < pick {i. i < length xs \\<and> i \\<in> I} i \\<and> a \\<in> I}", "have \"card {a. a < pick {i. i < length xs \\<and> i \\<in> I} i \\<and> a \\<in> I} = i\""], ["proof (prove)\nusing this:\n  {a \\<in> {i. i < length xs \\<and> i \\<in> I}.\n   a < pick {i. i < length xs \\<and> i \\<in> I} i} =\n  {a. a < pick {i. i < length xs \\<and> i \\<in> I} i \\<and> a \\<in> I}\n\ngoal (1 subgoal):\n 1. card\n     {a. a < pick {i. i < length xs \\<and> i \\<in> I} i \\<and> a \\<in> I} =\n    i", "using card_pick_le[OF assms]"], ["proof (prove)\nusing this:\n  {a \\<in> {i. i < length xs \\<and> i \\<in> I}.\n   a < pick {i. i < length xs \\<and> i \\<in> I} i} =\n  {a. a < pick {i. i < length xs \\<and> i \\<in> I} i \\<and> a \\<in> I}\n  card\n   {a \\<in> {i. i < length xs \\<and> i \\<in> I}.\n    a < pick {i. i < length xs \\<and> i \\<in> I} i} =\n  i\n\ngoal (1 subgoal):\n 1. card\n     {a. a < pick {i. i < length xs \\<and> i \\<in> I} i \\<and> a \\<in> I} =\n    i", "by simp"], ["proof (state)\nthis:\n  card\n   {a. a < pick {i. i < length xs \\<and> i \\<in> I} i \\<and> a \\<in> I} =\n  i\n\ngoal (1 subgoal):\n 1. nths xs I ! i = xs ! pick I i", "then"], ["proof (chain)\npicking this:\n  card\n   {a. a < pick {i. i < length xs \\<and> i \\<in> I} i \\<and> a \\<in> I} =\n  i", "have \"nths xs I ! i = xs ! pick {i. i < length xs \\<and> i \\<in> I} i\""], ["proof (prove)\nusing this:\n  card\n   {a. a < pick {i. i < length xs \\<and> i \\<in> I} i \\<and> a \\<in> I} =\n  i\n\ngoal (1 subgoal):\n 1. nths xs I ! i = xs ! pick {i. i < length xs \\<and> i \\<in> I} i", "using nth_nths_card[where j = \"pick {i. i < length xs \\<and> i \\<in> I} i\", of xs I]\n    assms pick_in_set pick_in_set"], ["proof (prove)\nusing this:\n  card\n   {a. a < pick {i. i < length xs \\<and> i \\<in> I} i \\<and> a \\<in> I} =\n  i\n  \\<lbrakk>pick {i. i < length xs \\<and> i \\<in> I} i < length xs;\n   pick {i. i < length xs \\<and> i \\<in> I} i \\<in> I\\<rbrakk>\n  \\<Longrightarrow> nths xs I !\n                    card\n                     {j0.\n                      j0 < pick {i. i < length xs \\<and> i \\<in> I} i \\<and>\n                      j0 \\<in> I} =\n                    xs ! pick {i. i < length xs \\<and> i \\<in> I} i\n  i < card {i. i < length xs \\<and> i \\<in> I}\n  ?n < card ?S \\<or> infinite ?S \\<Longrightarrow> pick ?S ?n \\<in> ?S\n  ?n < card ?S \\<or> infinite ?S \\<Longrightarrow> pick ?S ?n \\<in> ?S\n\ngoal (1 subgoal):\n 1. nths xs I ! i = xs ! pick {i. i < length xs \\<and> i \\<in> I} i", "by auto"], ["proof (state)\nthis:\n  nths xs I ! i = xs ! pick {i. i < length xs \\<and> i \\<in> I} i\n\ngoal (1 subgoal):\n 1. nths xs I ! i = xs ! pick I i", "then"], ["proof (chain)\npicking this:\n  nths xs I ! i = xs ! pick {i. i < length xs \\<and> i \\<in> I} i", "show ?thesis"], ["proof (prove)\nusing this:\n  nths xs I ! i = xs ! pick {i. i < length xs \\<and> i \\<in> I} i\n\ngoal (1 subgoal):\n 1. nths xs I ! i = xs ! pick I i", "using pick_reduce_set"], ["proof (prove)\nusing this:\n  nths xs I ! i = xs ! pick {i. i < length xs \\<and> i \\<in> I} i\n  ?i < card {a. a < ?m \\<and> a \\<in> ?I} \\<Longrightarrow>\n  pick ?I ?i = pick {a. a < ?m \\<and> a \\<in> ?I} ?i\n\ngoal (1 subgoal):\n 1. nths xs I ! i = xs ! pick I i", "using assms"], ["proof (prove)\nusing this:\n  nths xs I ! i = xs ! pick {i. i < length xs \\<and> i \\<in> I} i\n  ?i < card {a. a < ?m \\<and> a \\<in> ?I} \\<Longrightarrow>\n  pick ?I ?i = pick {a. a < ?m \\<and> a \\<in> ?I} ?i\n  i < card {i. i < length xs \\<and> i \\<in> I}\n\ngoal (1 subgoal):\n 1. nths xs I ! i = xs ! pick I i", "by auto"], ["proof (state)\nthis:\n  nths xs I ! i = xs ! pick I i\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma pick_UNIV: \"pick UNIV j = j\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pick UNIV j = j", "by (induction j, simp, metis (no_types, lifting) LeastI pick.simps(2)  Suc_mono UNIV_I less_Suc_eq not_less_Least)"], ["", "lemma pick_le:\nassumes \"n < card {a. a < i \\<and> a \\<in> S}\"\nshows \"pick S n < i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pick S n < i", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. pick S n < i", "have 0:\"{a \\<in> {a. a < i \\<and> a \\<in> S}. a < i} = {a. a < i \\<and> a \\<in> S}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {a \\<in> {a. a < i \\<and> a \\<in> S}. a < i} =\n    {a. a < i \\<and> a \\<in> S}", "by blast"], ["proof (state)\nthis:\n  {a \\<in> {a. a < i \\<and> a \\<in> S}. a < i} = {a. a < i \\<and> a \\<in> S}\n\ngoal (1 subgoal):\n 1. pick S n < i", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. pick S n < i", "apply (rule ccontr)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> pick S n < i \\<Longrightarrow> False", "using card_le_pick_le[OF assms, unfolded pick_reduce_set[OF assms, symmetric], of i, unfolded 0]\n    assms not_less not_le"], ["proof (prove)\nusing this:\n  i \\<le> pick S n \\<Longrightarrow>\n  card {a. a < i \\<and> a \\<in> S} \\<le> n\n  n < card {a. a < i \\<and> a \\<in> S}\n  (\\<not> ?x < ?y) = (?y \\<le> ?x)\n  (\\<not> ?x \\<le> ?y) = (?y < ?x)\n\ngoal (1 subgoal):\n 1. \\<not> pick S n < i \\<Longrightarrow> False", "by blast"], ["proof (state)\nthis:\n  pick S n < i\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma prod_list_complementary_nthss:\nfixes f ::\"'a \\<Rightarrow> 'b::comm_monoid_mult\"\nshows \"prod_list (map f xs) = prod_list (map f (nths xs A)) *  prod_list (map f (nths xs (-A)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prod_list (map f xs) =\n    prod_list (map f (nths xs A)) * prod_list (map f (nths xs (- A)))", "proof (induction xs rule:rev_induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. prod_list (map f []) =\n    prod_list (map f (nths [] A)) * prod_list (map f (nths [] (- A)))\n 2. \\<And>x xs.\n       prod_list (map f xs) =\n       prod_list (map f (nths xs A)) *\n       prod_list (map f (nths xs (- A))) \\<Longrightarrow>\n       prod_list (map f (xs @ [x])) =\n       prod_list (map f (nths (xs @ [x]) A)) *\n       prod_list (map f (nths (xs @ [x]) (- A)))", "case Nil"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. prod_list (map f []) =\n    prod_list (map f (nths [] A)) * prod_list (map f (nths [] (- A)))\n 2. \\<And>x xs.\n       prod_list (map f xs) =\n       prod_list (map f (nths xs A)) *\n       prod_list (map f (nths xs (- A))) \\<Longrightarrow>\n       prod_list (map f (xs @ [x])) =\n       prod_list (map f (nths (xs @ [x]) A)) *\n       prod_list (map f (nths (xs @ [x]) (- A)))", "then"], ["proof (chain)\npicking this:", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. prod_list (map f []) =\n    prod_list (map f (nths [] A)) * prod_list (map f (nths [] (- A)))", "by simp"], ["proof (state)\nthis:\n  prod_list (map f []) =\n  prod_list (map f (nths [] A)) * prod_list (map f (nths [] (- A)))\n\ngoal (1 subgoal):\n 1. \\<And>x xs.\n       prod_list (map f xs) =\n       prod_list (map f (nths xs A)) *\n       prod_list (map f (nths xs (- A))) \\<Longrightarrow>\n       prod_list (map f (xs @ [x])) =\n       prod_list (map f (nths (xs @ [x]) A)) *\n       prod_list (map f (nths (xs @ [x]) (- A)))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x xs.\n       prod_list (map f xs) =\n       prod_list (map f (nths xs A)) *\n       prod_list (map f (nths xs (- A))) \\<Longrightarrow>\n       prod_list (map f (xs @ [x])) =\n       prod_list (map f (nths (xs @ [x]) A)) *\n       prod_list (map f (nths (xs @ [x]) (- A)))", "case (snoc x xs)"], ["proof (state)\nthis:\n  prod_list (map f xs) =\n  prod_list (map f (nths xs A)) * prod_list (map f (nths xs (- A)))\n\ngoal (1 subgoal):\n 1. \\<And>x xs.\n       prod_list (map f xs) =\n       prod_list (map f (nths xs A)) *\n       prod_list (map f (nths xs (- A))) \\<Longrightarrow>\n       prod_list (map f (xs @ [x])) =\n       prod_list (map f (nths (xs @ [x]) A)) *\n       prod_list (map f (nths (xs @ [x]) (- A)))", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. prod_list (map f (xs @ [x])) =\n    prod_list (map f (nths (xs @ [x]) A)) *\n    prod_list (map f (nths (xs @ [x]) (- A)))", "unfolding map_append \"prod_list.append\" nths_append nths_singleton snoc"], ["proof (prove)\ngoal (1 subgoal):\n 1. prod_list (map f (nths xs A)) * prod_list (map f (nths xs (- A))) *\n    prod_list (map f [x]) =\n    prod_list (map f (nths xs A)) *\n    prod_list\n     (map f (if 0 \\<in> {j. j + length xs \\<in> A} then [x] else [])) *\n    (prod_list (map f (nths xs (- A))) *\n     prod_list\n      (map f (if 0 \\<in> {j. j + length xs \\<in> - A} then [x] else [])))", "by (cases \"(length xs)\\<in>A\"; simp;metis mult.assoc mult.commute)"], ["proof (state)\nthis:\n  prod_list (map f (xs @ [x])) =\n  prod_list (map f (nths (xs @ [x]) A)) *\n  prod_list (map f (nths (xs @ [x]) (- A)))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma nths_zip: \"nths (zip xs ys) I = zip (nths xs I) (nths ys I)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. nths (zip xs ys) I = zip (nths xs I) (nths ys I)", "proof (rule nth_equalityI)"], ["proof (state)\ngoal (2 subgoals):\n 1. length (nths (zip xs ys) I) = length (zip (nths xs I) (nths ys I))\n 2. \\<And>i.\n       i < length (nths (zip xs ys) I) \\<Longrightarrow>\n       nths (zip xs ys) I ! i = zip (nths xs I) (nths ys I) ! i", "show \"length (nths (zip xs ys) I) = length (zip (nths xs I) (nths ys I))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length (nths (zip xs ys) I) = length (zip (nths xs I) (nths ys I))", "proof (cases \"length xs \\<le> length ys\")"], ["proof (state)\ngoal (2 subgoals):\n 1. length xs \\<le> length ys \\<Longrightarrow>\n    length (nths (zip xs ys) I) = length (zip (nths xs I) (nths ys I))\n 2. \\<not> length xs \\<le> length ys \\<Longrightarrow>\n    length (nths (zip xs ys) I) = length (zip (nths xs I) (nths ys I))", "case True"], ["proof (state)\nthis:\n  length xs \\<le> length ys\n\ngoal (2 subgoals):\n 1. length xs \\<le> length ys \\<Longrightarrow>\n    length (nths (zip xs ys) I) = length (zip (nths xs I) (nths ys I))\n 2. \\<not> length xs \\<le> length ys \\<Longrightarrow>\n    length (nths (zip xs ys) I) = length (zip (nths xs I) (nths ys I))", "then"], ["proof (chain)\npicking this:\n  length xs \\<le> length ys", "have \"{i. i < length xs \\<and> i \\<in> I} \\<subseteq> {i. i < length ys \\<and> i \\<in> I}\""], ["proof (prove)\nusing this:\n  length xs \\<le> length ys\n\ngoal (1 subgoal):\n 1. {i. i < length xs \\<and> i \\<in> I}\n    \\<subseteq> {i. i < length ys \\<and> i \\<in> I}", "by (simp add: Collect_mono less_le_trans)"], ["proof (state)\nthis:\n  {i. i < length xs \\<and> i \\<in> I}\n  \\<subseteq> {i. i < length ys \\<and> i \\<in> I}\n\ngoal (2 subgoals):\n 1. length xs \\<le> length ys \\<Longrightarrow>\n    length (nths (zip xs ys) I) = length (zip (nths xs I) (nths ys I))\n 2. \\<not> length xs \\<le> length ys \\<Longrightarrow>\n    length (nths (zip xs ys) I) = length (zip (nths xs I) (nths ys I))", "then"], ["proof (chain)\npicking this:\n  {i. i < length xs \\<and> i \\<in> I}\n  \\<subseteq> {i. i < length ys \\<and> i \\<in> I}", "have \"card {i. i < length xs \\<and> i \\<in> I} \\<le> card {i. i < length ys \\<and> i \\<in> I}\""], ["proof (prove)\nusing this:\n  {i. i < length xs \\<and> i \\<in> I}\n  \\<subseteq> {i. i < length ys \\<and> i \\<in> I}\n\ngoal (1 subgoal):\n 1. card {i. i < length xs \\<and> i \\<in> I}\n    \\<le> card {i. i < length ys \\<and> i \\<in> I}", "by (metis (mono_tags, lifting) card_mono finite_nat_set_iff_bounded mem_Collect_eq)"], ["proof (state)\nthis:\n  card {i. i < length xs \\<and> i \\<in> I}\n  \\<le> card {i. i < length ys \\<and> i \\<in> I}\n\ngoal (2 subgoals):\n 1. length xs \\<le> length ys \\<Longrightarrow>\n    length (nths (zip xs ys) I) = length (zip (nths xs I) (nths ys I))\n 2. \\<not> length xs \\<le> length ys \\<Longrightarrow>\n    length (nths (zip xs ys) I) = length (zip (nths xs I) (nths ys I))", "then"], ["proof (chain)\npicking this:\n  card {i. i < length xs \\<and> i \\<in> I}\n  \\<le> card {i. i < length ys \\<and> i \\<in> I}", "show ?thesis"], ["proof (prove)\nusing this:\n  card {i. i < length xs \\<and> i \\<in> I}\n  \\<le> card {i. i < length ys \\<and> i \\<in> I}\n\ngoal (1 subgoal):\n 1. length (nths (zip xs ys) I) = length (zip (nths xs I) (nths ys I))", "unfolding length_nths length_zip"], ["proof (prove)\nusing this:\n  card {i. i < length xs \\<and> i \\<in> I}\n  \\<le> card {i. i < length ys \\<and> i \\<in> I}\n\ngoal (1 subgoal):\n 1. card {i. i < min (length xs) (length ys) \\<and> i \\<in> I} =\n    min (card {i. i < length xs \\<and> i \\<in> I})\n     (card {i. i < length ys \\<and> i \\<in> I})", "using True"], ["proof (prove)\nusing this:\n  card {i. i < length xs \\<and> i \\<in> I}\n  \\<le> card {i. i < length ys \\<and> i \\<in> I}\n  length xs \\<le> length ys\n\ngoal (1 subgoal):\n 1. card {i. i < min (length xs) (length ys) \\<and> i \\<in> I} =\n    min (card {i. i < length xs \\<and> i \\<in> I})\n     (card {i. i < length ys \\<and> i \\<in> I})", "using min_def"], ["proof (prove)\nusing this:\n  card {i. i < length xs \\<and> i \\<in> I}\n  \\<le> card {i. i < length ys \\<and> i \\<in> I}\n  length xs \\<le> length ys\n  min ?a ?b = (if ?a \\<le> ?b then ?a else ?b)\n\ngoal (1 subgoal):\n 1. card {i. i < min (length xs) (length ys) \\<and> i \\<in> I} =\n    min (card {i. i < length xs \\<and> i \\<in> I})\n     (card {i. i < length ys \\<and> i \\<in> I})", "by linarith"], ["proof (state)\nthis:\n  length (nths (zip xs ys) I) = length (zip (nths xs I) (nths ys I))\n\ngoal (1 subgoal):\n 1. \\<not> length xs \\<le> length ys \\<Longrightarrow>\n    length (nths (zip xs ys) I) = length (zip (nths xs I) (nths ys I))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> length xs \\<le> length ys \\<Longrightarrow>\n    length (nths (zip xs ys) I) = length (zip (nths xs I) (nths ys I))", "case False"], ["proof (state)\nthis:\n  \\<not> length xs \\<le> length ys\n\ngoal (1 subgoal):\n 1. \\<not> length xs \\<le> length ys \\<Longrightarrow>\n    length (nths (zip xs ys) I) = length (zip (nths xs I) (nths ys I))", "then"], ["proof (chain)\npicking this:\n  \\<not> length xs \\<le> length ys", "have \"{i. i < length ys \\<and> i \\<in> I} \\<subseteq> {i. i < length xs \\<and> i \\<in> I}\""], ["proof (prove)\nusing this:\n  \\<not> length xs \\<le> length ys\n\ngoal (1 subgoal):\n 1. {i. i < length ys \\<and> i \\<in> I}\n    \\<subseteq> {i. i < length xs \\<and> i \\<in> I}", "by (simp add: Collect_mono less_le_trans)"], ["proof (state)\nthis:\n  {i. i < length ys \\<and> i \\<in> I}\n  \\<subseteq> {i. i < length xs \\<and> i \\<in> I}\n\ngoal (1 subgoal):\n 1. \\<not> length xs \\<le> length ys \\<Longrightarrow>\n    length (nths (zip xs ys) I) = length (zip (nths xs I) (nths ys I))", "then"], ["proof (chain)\npicking this:\n  {i. i < length ys \\<and> i \\<in> I}\n  \\<subseteq> {i. i < length xs \\<and> i \\<in> I}", "have \"card {i. i < length ys \\<and> i \\<in> I} \\<le> card {i. i < length xs \\<and> i \\<in> I}\""], ["proof (prove)\nusing this:\n  {i. i < length ys \\<and> i \\<in> I}\n  \\<subseteq> {i. i < length xs \\<and> i \\<in> I}\n\ngoal (1 subgoal):\n 1. card {i. i < length ys \\<and> i \\<in> I}\n    \\<le> card {i. i < length xs \\<and> i \\<in> I}", "by (metis (mono_tags, lifting) card_mono finite_nat_set_iff_bounded mem_Collect_eq)"], ["proof (state)\nthis:\n  card {i. i < length ys \\<and> i \\<in> I}\n  \\<le> card {i. i < length xs \\<and> i \\<in> I}\n\ngoal (1 subgoal):\n 1. \\<not> length xs \\<le> length ys \\<Longrightarrow>\n    length (nths (zip xs ys) I) = length (zip (nths xs I) (nths ys I))", "then"], ["proof (chain)\npicking this:\n  card {i. i < length ys \\<and> i \\<in> I}\n  \\<le> card {i. i < length xs \\<and> i \\<in> I}", "show ?thesis"], ["proof (prove)\nusing this:\n  card {i. i < length ys \\<and> i \\<in> I}\n  \\<le> card {i. i < length xs \\<and> i \\<in> I}\n\ngoal (1 subgoal):\n 1. length (nths (zip xs ys) I) = length (zip (nths xs I) (nths ys I))", "unfolding length_nths length_zip"], ["proof (prove)\nusing this:\n  card {i. i < length ys \\<and> i \\<in> I}\n  \\<le> card {i. i < length xs \\<and> i \\<in> I}\n\ngoal (1 subgoal):\n 1. card {i. i < min (length xs) (length ys) \\<and> i \\<in> I} =\n    min (card {i. i < length xs \\<and> i \\<in> I})\n     (card {i. i < length ys \\<and> i \\<in> I})", "using False"], ["proof (prove)\nusing this:\n  card {i. i < length ys \\<and> i \\<in> I}\n  \\<le> card {i. i < length xs \\<and> i \\<in> I}\n  \\<not> length xs \\<le> length ys\n\ngoal (1 subgoal):\n 1. card {i. i < min (length xs) (length ys) \\<and> i \\<in> I} =\n    min (card {i. i < length xs \\<and> i \\<in> I})\n     (card {i. i < length ys \\<and> i \\<in> I})", "using min_def"], ["proof (prove)\nusing this:\n  card {i. i < length ys \\<and> i \\<in> I}\n  \\<le> card {i. i < length xs \\<and> i \\<in> I}\n  \\<not> length xs \\<le> length ys\n  min ?a ?b = (if ?a \\<le> ?b then ?a else ?b)\n\ngoal (1 subgoal):\n 1. card {i. i < min (length xs) (length ys) \\<and> i \\<in> I} =\n    min (card {i. i < length xs \\<and> i \\<in> I})\n     (card {i. i < length ys \\<and> i \\<in> I})", "by linarith"], ["proof (state)\nthis:\n  length (nths (zip xs ys) I) = length (zip (nths xs I) (nths ys I))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  length (nths (zip xs ys) I) = length (zip (nths xs I) (nths ys I))\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       i < length (nths (zip xs ys) I) \\<Longrightarrow>\n       nths (zip xs ys) I ! i = zip (nths xs I) (nths ys I) ! i", "show \"nths (zip xs ys) I ! i = zip (nths xs I) (nths ys I) ! i\" if \"i < length (nths (zip xs ys) I)\" for i"], ["proof (prove)\ngoal (1 subgoal):\n 1. nths (zip xs ys) I ! i = zip (nths xs I) (nths ys I) ! i", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. nths (zip xs ys) I ! i = zip (nths xs I) (nths ys I) ! i", "have \"i < length (nths xs I)\" \"i < length (nths ys I)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. i < length (nths xs I) &&& i < length (nths ys I)", "using that"], ["proof (prove)\nusing this:\n  i < length (nths (zip xs ys) I)\n\ngoal (1 subgoal):\n 1. i < length (nths xs I) &&& i < length (nths ys I)", "by (simp_all add: \\<open>length (nths (zip xs ys) I) = length (zip (nths xs I) (nths ys I))\\<close>)"], ["proof (state)\nthis:\n  i < length (nths xs I)\n  i < length (nths ys I)\n\ngoal (1 subgoal):\n 1. nths (zip xs ys) I ! i = zip (nths xs I) (nths ys I) ! i", "show \"nths (zip xs ys) I ! i = zip (nths xs I) (nths ys I) ! i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. nths (zip xs ys) I ! i = zip (nths xs I) (nths ys I) ! i", "unfolding nth_nths[OF \\<open>i < length (nths (zip xs ys) I)\\<close>[unfolded length_nths]]"], ["proof (prove)\ngoal (1 subgoal):\n 1. zip xs ys ! pick I i = zip (nths xs I) (nths ys I) ! i", "unfolding nth_zip[OF \\<open>i < length (nths xs I)\\<close> \\<open>i < length (nths ys I)\\<close>]"], ["proof (prove)\ngoal (1 subgoal):\n 1. zip xs ys ! pick I i = (nths xs I ! i, nths ys I ! i)", "unfolding nth_zip[OF pick_le[OF \\<open>i < length (nths xs I)\\<close>[unfolded length_nths]]\n                          pick_le[OF \\<open>i < length (nths ys I)\\<close>[unfolded length_nths]]]"], ["proof (prove)\ngoal (1 subgoal):\n 1. (xs ! pick I i, ys ! pick I i) = (nths xs I ! i, nths ys I ! i)", "by (metis (full_types) \\<open>i < length (nths xs I)\\<close> \\<open>i < length (nths ys I)\\<close> length_nths nth_nths)"], ["proof (state)\nthis:\n  nths (zip xs ys) I ! i = zip (nths xs I) (nths ys I) ! i\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ?i < length (nths (zip xs ys) I) \\<Longrightarrow>\n  nths (zip xs ys) I ! ?i = zip (nths xs I) (nths ys I) ! ?i\n\ngoal:\nNo subgoals!", "qed"], ["", "section \"weave\""], ["", "definition weave :: \"nat set \\<Rightarrow> 'a list \\<Rightarrow> 'a list \\<Rightarrow> 'a list\" where\n\"weave A xs ys = map (\\<lambda>i. if i\\<in>A then xs!(card {a\\<in>A. a<i}) else ys!(card {a\\<in>-A. a<i})) [0..<length xs + length ys]\""], ["", "lemma length_weave:\nshows \"length (weave A xs ys) = length xs + length ys\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length (weave A xs ys) = length xs + length ys", "unfolding weave_def length_map"], ["proof (prove)\ngoal (1 subgoal):\n 1. length [0..<length xs + length ys] = length xs + length ys", "by simp"], ["", "lemma nth_weave:\nassumes \"i < length (weave A xs ys)\"\nshows \"weave A xs ys ! i = (if i\\<in>A then xs!(card {a\\<in>A. a<i}) else ys!(card {a\\<in>-A. a<i}))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. weave A xs ys ! i =\n    (if i \\<in> A then xs ! card {a \\<in> A. a < i}\n     else ys ! card {a \\<in> - A. a < i})", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. weave A xs ys ! i =\n    (if i \\<in> A then xs ! card {a \\<in> A. a < i}\n     else ys ! card {a \\<in> - A. a < i})", "have \"i < length xs + length ys\""], ["proof (prove)\ngoal (1 subgoal):\n 1. i < length xs + length ys", "using length_weave"], ["proof (prove)\nusing this:\n  length (weave ?A ?xs ?ys) = length ?xs + length ?ys\n\ngoal (1 subgoal):\n 1. i < length xs + length ys", "using assms"], ["proof (prove)\nusing this:\n  length (weave ?A ?xs ?ys) = length ?xs + length ?ys\n  i < length (weave A xs ys)\n\ngoal (1 subgoal):\n 1. i < length xs + length ys", "by metis"], ["proof (state)\nthis:\n  i < length xs + length ys\n\ngoal (1 subgoal):\n 1. weave A xs ys ! i =\n    (if i \\<in> A then xs ! card {a \\<in> A. a < i}\n     else ys ! card {a \\<in> - A. a < i})", "then"], ["proof (chain)\npicking this:\n  i < length xs + length ys", "have \"i < length [0..<length xs + length ys]\""], ["proof (prove)\nusing this:\n  i < length xs + length ys\n\ngoal (1 subgoal):\n 1. i < length [0..<length xs + length ys]", "by auto"], ["proof (state)\nthis:\n  i < length [0..<length xs + length ys]\n\ngoal (1 subgoal):\n 1. weave A xs ys ! i =\n    (if i \\<in> A then xs ! card {a \\<in> A. a < i}\n     else ys ! card {a \\<in> - A. a < i})", "then"], ["proof (chain)\npicking this:\n  i < length [0..<length xs + length ys]", "have \"[0..<length xs + length ys] ! i = i\""], ["proof (prove)\nusing this:\n  i < length [0..<length xs + length ys]\n\ngoal (1 subgoal):\n 1. [0..<length xs + length ys] ! i = i", "by (metis \\<open>i < length xs + length ys\\<close> add.left_neutral nth_upt)"], ["proof (state)\nthis:\n  [0..<length xs + length ys] ! i = i\n\ngoal (1 subgoal):\n 1. weave A xs ys ! i =\n    (if i \\<in> A then xs ! card {a \\<in> A. a < i}\n     else ys ! card {a \\<in> - A. a < i})", "then"], ["proof (chain)\npicking this:\n  [0..<length xs + length ys] ! i = i", "show ?thesis"], ["proof (prove)\nusing this:\n  [0..<length xs + length ys] ! i = i\n\ngoal (1 subgoal):\n 1. weave A xs ys ! i =\n    (if i \\<in> A then xs ! card {a \\<in> A. a < i}\n     else ys ! card {a \\<in> - A. a < i})", "unfolding weave_def nth_map[OF \\<open>i < length [0..<length xs + length ys]\\<close>]"], ["proof (prove)\nusing this:\n  [0..<length xs + length ys] ! i = i\n\ngoal (1 subgoal):\n 1. (if [0..<length xs + length ys] ! i \\<in> A\n     then xs ! card {a \\<in> A. a < [0..<length xs + length ys] ! i}\n     else ys ! card {a \\<in> - A. a < [0..<length xs + length ys] ! i}) =\n    (if i \\<in> A then xs ! card {a \\<in> A. a < i}\n     else ys ! card {a \\<in> - A. a < i})", "by presburger"], ["proof (state)\nthis:\n  weave A xs ys ! i =\n  (if i \\<in> A then xs ! card {a \\<in> A. a < i}\n   else ys ! card {a \\<in> - A. a < i})\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma weave_append1:\nassumes \"length xs + length ys \\<in> A\"\nassumes \"length xs = card {a\\<in>A. a < length xs + length ys}\"\nshows \"weave A (xs @ [x]) ys = weave A xs ys @ [x]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. weave A (xs @ [x]) ys = weave A xs ys @ [x]", "proof (rule nth_equalityI)"], ["proof (state)\ngoal (2 subgoals):\n 1. length (weave A (xs @ [x]) ys) = length (weave A xs ys @ [x])\n 2. \\<And>i.\n       i < length (weave A (xs @ [x]) ys) \\<Longrightarrow>\n       weave A (xs @ [x]) ys ! i = (weave A xs ys @ [x]) ! i", "show \"length (weave A (xs @ [x]) ys) = length (weave A xs ys @ [x])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length (weave A (xs @ [x]) ys) = length (weave A xs ys @ [x])", "unfolding weave_def length_map"], ["proof (prove)\ngoal (1 subgoal):\n 1. length [0..<length (xs @ [x]) + length ys] =\n    length\n     (map (\\<lambda>i.\n              if i \\<in> A then xs ! card {a \\<in> A. a < i}\n              else ys ! card {a \\<in> - A. a < i})\n       [0..<length xs + length ys] @\n      [x])", "by simp"], ["proof (state)\nthis:\n  length (weave A (xs @ [x]) ys) = length (weave A xs ys @ [x])\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       i < length (weave A (xs @ [x]) ys) \\<Longrightarrow>\n       weave A (xs @ [x]) ys ! i = (weave A xs ys @ [x]) ! i", "show \"weave A (xs @ [x]) ys ! i = (weave A xs ys @ [x]) ! i\"\n    if \"i < length (weave A (xs @ [x]) ys)\" for i"], ["proof (prove)\ngoal (1 subgoal):\n 1. weave A (xs @ [x]) ys ! i = (weave A xs ys @ [x]) ! i", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. weave A (xs @ [x]) ys ! i = (weave A xs ys @ [x]) ! i", "show \"weave A (xs @ [x]) ys ! i = (weave A xs ys @ [x]) ! i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. weave A (xs @ [x]) ys ! i = (weave A xs ys @ [x]) ! i", "proof (cases \"i = length xs + length ys\")"], ["proof (state)\ngoal (2 subgoals):\n 1. i = length xs + length ys \\<Longrightarrow>\n    weave A (xs @ [x]) ys ! i = (weave A xs ys @ [x]) ! i\n 2. i \\<noteq> length xs + length ys \\<Longrightarrow>\n    weave A (xs @ [x]) ys ! i = (weave A xs ys @ [x]) ! i", "case True"], ["proof (state)\nthis:\n  i = length xs + length ys\n\ngoal (2 subgoals):\n 1. i = length xs + length ys \\<Longrightarrow>\n    weave A (xs @ [x]) ys ! i = (weave A xs ys @ [x]) ! i\n 2. i \\<noteq> length xs + length ys \\<Longrightarrow>\n    weave A (xs @ [x]) ys ! i = (weave A xs ys @ [x]) ! i", "then"], ["proof (chain)\npicking this:\n  i = length xs + length ys", "have \"(weave A xs ys @ [x]) ! i = x\""], ["proof (prove)\nusing this:\n  i = length xs + length ys\n\ngoal (1 subgoal):\n 1. (weave A xs ys @ [x]) ! i = x", "using length_weave"], ["proof (prove)\nusing this:\n  i = length xs + length ys\n  length (weave ?A ?xs ?ys) = length ?xs + length ?ys\n\ngoal (1 subgoal):\n 1. (weave A xs ys @ [x]) ! i = x", "by (metis nth_append_length)"], ["proof (state)\nthis:\n  (weave A xs ys @ [x]) ! i = x\n\ngoal (2 subgoals):\n 1. i = length xs + length ys \\<Longrightarrow>\n    weave A (xs @ [x]) ys ! i = (weave A xs ys @ [x]) ! i\n 2. i \\<noteq> length xs + length ys \\<Longrightarrow>\n    weave A (xs @ [x]) ys ! i = (weave A xs ys @ [x]) ! i", "have \"card {a \\<in> A. a < i} = length xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card {a \\<in> A. a < i} = length xs", "using assms(2) True"], ["proof (prove)\nusing this:\n  length xs = card {a \\<in> A. a < length xs + length ys}\n  i = length xs + length ys\n\ngoal (1 subgoal):\n 1. card {a \\<in> A. a < i} = length xs", "by auto"], ["proof (state)\nthis:\n  card {a \\<in> A. a < i} = length xs\n\ngoal (2 subgoals):\n 1. i = length xs + length ys \\<Longrightarrow>\n    weave A (xs @ [x]) ys ! i = (weave A xs ys @ [x]) ! i\n 2. i \\<noteq> length xs + length ys \\<Longrightarrow>\n    weave A (xs @ [x]) ys ! i = (weave A xs ys @ [x]) ! i", "then"], ["proof (chain)\npicking this:\n  card {a \\<in> A. a < i} = length xs", "show ?thesis"], ["proof (prove)\nusing this:\n  card {a \\<in> A. a < i} = length xs\n\ngoal (1 subgoal):\n 1. weave A (xs @ [x]) ys ! i = (weave A xs ys @ [x]) ! i", "unfolding nth_weave[OF \\<open>i < length (weave A (xs @ [x]) ys)\\<close>]\n        \\<open>(weave A xs ys @ [x]) ! i = x\\<close>"], ["proof (prove)\nusing this:\n  card {a \\<in> A. a < i} = length xs\n\ngoal (1 subgoal):\n 1. (if i \\<in> A then (xs @ [x]) ! card {a \\<in> A. a < i}\n     else ys ! card {a \\<in> - A. a < i}) =\n    x", "using True assms(1)"], ["proof (prove)\nusing this:\n  card {a \\<in> A. a < i} = length xs\n  i = length xs + length ys\n  length xs + length ys \\<in> A\n\ngoal (1 subgoal):\n 1. (if i \\<in> A then (xs @ [x]) ! card {a \\<in> A. a < i}\n     else ys ! card {a \\<in> - A. a < i}) =\n    x", "by simp"], ["proof (state)\nthis:\n  weave A (xs @ [x]) ys ! i = (weave A xs ys @ [x]) ! i\n\ngoal (1 subgoal):\n 1. i \\<noteq> length xs + length ys \\<Longrightarrow>\n    weave A (xs @ [x]) ys ! i = (weave A xs ys @ [x]) ! i", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. i \\<noteq> length xs + length ys \\<Longrightarrow>\n    weave A (xs @ [x]) ys ! i = (weave A xs ys @ [x]) ! i", "case False"], ["proof (state)\nthis:\n  i \\<noteq> length xs + length ys\n\ngoal (1 subgoal):\n 1. i \\<noteq> length xs + length ys \\<Longrightarrow>\n    weave A (xs @ [x]) ys ! i = (weave A xs ys @ [x]) ! i", "have \"i < length (weave A xs ys)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. i < length (weave A xs ys)", "using \\<open>i < length (weave A (xs @ [x]) ys)\\<close>\n        \\<open>length (weave A (xs @ [x]) ys) = length (weave A xs ys @ [x])\\<close> length_append_singleton\n        length_weave less_antisym False"], ["proof (prove)\nusing this:\n  i < length (weave A (xs @ [x]) ys)\n  length (weave A (xs @ [x]) ys) = length (weave A xs ys @ [x])\n  length (?xs @ [?x]) = Suc (length ?xs)\n  length (weave ?A ?xs ?ys) = length ?xs + length ?ys\n  \\<lbrakk>\\<not> ?n < ?m; ?n < Suc ?m\\<rbrakk> \\<Longrightarrow> ?m = ?n\n  i \\<noteq> length xs + length ys\n\ngoal (1 subgoal):\n 1. i < length (weave A xs ys)", "by fastforce"], ["proof (state)\nthis:\n  i < length (weave A xs ys)\n\ngoal (1 subgoal):\n 1. i \\<noteq> length xs + length ys \\<Longrightarrow>\n    weave A (xs @ [x]) ys ! i = (weave A xs ys @ [x]) ! i", "then"], ["proof (chain)\npicking this:\n  i < length (weave A xs ys)", "have \"(weave A xs ys @ [x]) ! i = (weave A xs ys) ! i\""], ["proof (prove)\nusing this:\n  i < length (weave A xs ys)\n\ngoal (1 subgoal):\n 1. (weave A xs ys @ [x]) ! i = weave A xs ys ! i", "by (simp add: nth_append)"], ["proof (state)\nthis:\n  (weave A xs ys @ [x]) ! i = weave A xs ys ! i\n\ngoal (1 subgoal):\n 1. i \\<noteq> length xs + length ys \\<Longrightarrow>\n    weave A (xs @ [x]) ys ! i = (weave A xs ys @ [x]) ! i", "{"], ["proof (state)\nthis:\n  (weave A xs ys @ [x]) ! i = weave A xs ys ! i\n\ngoal (1 subgoal):\n 1. i \\<noteq> length xs + length ys \\<Longrightarrow>\n    weave A (xs @ [x]) ys ! i = (weave A xs ys @ [x]) ! i", "assume \"i\\<in>A\""], ["proof (state)\nthis:\n  i \\<in> A\n\ngoal (1 subgoal):\n 1. i \\<noteq> length xs + length ys \\<Longrightarrow>\n    weave A (xs @ [x]) ys ! i = (weave A xs ys @ [x]) ! i", "have  \"i<length xs + length ys\""], ["proof (prove)\ngoal (1 subgoal):\n 1. i < length xs + length ys", "by (metis \\<open>i < length (weave A xs ys)\\<close> length_weave)"], ["proof (state)\nthis:\n  i < length xs + length ys\n\ngoal (1 subgoal):\n 1. i \\<noteq> length xs + length ys \\<Longrightarrow>\n    weave A (xs @ [x]) ys ! i = (weave A xs ys @ [x]) ! i", "then"], ["proof (chain)\npicking this:\n  i < length xs + length ys", "have \"{a \\<in> A. a < i} \\<subset> {a\\<in>A. a < length xs + length ys}\""], ["proof (prove)\nusing this:\n  i < length xs + length ys\n\ngoal (1 subgoal):\n 1. {a \\<in> A. a < i} \\<subset> {a \\<in> A. a < length xs + length ys}", "using assms(1) \\<open>i<length xs + length ys\\<close> \\<open>i\\<in>A\\<close>"], ["proof (prove)\nusing this:\n  i < length xs + length ys\n  length xs + length ys \\<in> A\n  i < length xs + length ys\n  i \\<in> A\n\ngoal (1 subgoal):\n 1. {a \\<in> A. a < i} \\<subset> {a \\<in> A. a < length xs + length ys}", "by auto"], ["proof (state)\nthis:\n  {a \\<in> A. a < i} \\<subset> {a \\<in> A. a < length xs + length ys}\n\ngoal (1 subgoal):\n 1. i \\<noteq> length xs + length ys \\<Longrightarrow>\n    weave A (xs @ [x]) ys ! i = (weave A xs ys @ [x]) ! i", "then"], ["proof (chain)\npicking this:\n  {a \\<in> A. a < i} \\<subset> {a \\<in> A. a < length xs + length ys}", "have \"card {a \\<in> A. a < i} < card {a\\<in>A. a < length xs + length ys}\""], ["proof (prove)\nusing this:\n  {a \\<in> A. a < i} \\<subset> {a \\<in> A. a < length xs + length ys}\n\ngoal (1 subgoal):\n 1. card {a \\<in> A. a < i} < card {a \\<in> A. a < length xs + length ys}", "using psubset_card_mono[of \"{a\\<in>A. a < length xs + length ys}\" \"{a \\<in> A. a < i}\"]"], ["proof (prove)\nusing this:\n  {a \\<in> A. a < i} \\<subset> {a \\<in> A. a < length xs + length ys}\n  \\<lbrakk>finite {a \\<in> A. a < length xs + length ys};\n   {a \\<in> A. a < i}\n   \\<subset> {a \\<in> A. a < length xs + length ys}\\<rbrakk>\n  \\<Longrightarrow> card {a \\<in> A. a < i}\n                    < card {a \\<in> A. a < length xs + length ys}\n\ngoal (1 subgoal):\n 1. card {a \\<in> A. a < i} < card {a \\<in> A. a < length xs + length ys}", "by simp"], ["proof (state)\nthis:\n  card {a \\<in> A. a < i} < card {a \\<in> A. a < length xs + length ys}\n\ngoal (1 subgoal):\n 1. i \\<noteq> length xs + length ys \\<Longrightarrow>\n    weave A (xs @ [x]) ys ! i = (weave A xs ys @ [x]) ! i", "then"], ["proof (chain)\npicking this:\n  card {a \\<in> A. a < i} < card {a \\<in> A. a < length xs + length ys}", "have \"(xs @ [x]) ! card {a \\<in> A. a < i} = xs ! card {a \\<in> A. a < i}\""], ["proof (prove)\nusing this:\n  card {a \\<in> A. a < i} < card {a \\<in> A. a < length xs + length ys}\n\ngoal (1 subgoal):\n 1. (xs @ [x]) ! card {a \\<in> A. a < i} = xs ! card {a \\<in> A. a < i}", "by (metis (no_types, lifting)  assms(2) nth_append)"], ["proof (state)\nthis:\n  (xs @ [x]) ! card {a \\<in> A. a < i} = xs ! card {a \\<in> A. a < i}\n\ngoal (1 subgoal):\n 1. i \\<noteq> length xs + length ys \\<Longrightarrow>\n    weave A (xs @ [x]) ys ! i = (weave A xs ys @ [x]) ! i", "}"], ["proof (state)\nthis:\n  i \\<in> A \\<Longrightarrow>\n  (xs @ [x]) ! card {a \\<in> A. a < i} = xs ! card {a \\<in> A. a < i}\n\ngoal (1 subgoal):\n 1. i \\<noteq> length xs + length ys \\<Longrightarrow>\n    weave A (xs @ [x]) ys ! i = (weave A xs ys @ [x]) ! i", "then"], ["proof (chain)\npicking this:\n  i \\<in> A \\<Longrightarrow>\n  (xs @ [x]) ! card {a \\<in> A. a < i} = xs ! card {a \\<in> A. a < i}", "show ?thesis"], ["proof (prove)\nusing this:\n  i \\<in> A \\<Longrightarrow>\n  (xs @ [x]) ! card {a \\<in> A. a < i} = xs ! card {a \\<in> A. a < i}\n\ngoal (1 subgoal):\n 1. weave A (xs @ [x]) ys ! i = (weave A xs ys @ [x]) ! i", "unfolding nth_weave[OF \\<open>i < length (weave A (xs @ [x]) ys)\\<close>]\n        \\<open>(weave A xs ys @ [x]) ! i = (weave A xs ys) ! i\\<close> nth_weave[OF \\<open>i < length (weave A xs ys)\\<close>]"], ["proof (prove)\nusing this:\n  i \\<in> A \\<Longrightarrow>\n  (xs @ [x]) ! card {a \\<in> A. a < i} = xs ! card {a \\<in> A. a < i}\n\ngoal (1 subgoal):\n 1. (if i \\<in> A then (xs @ [x]) ! card {a \\<in> A. a < i}\n     else ys ! card {a \\<in> - A. a < i}) =\n    (if i \\<in> A then xs ! card {a \\<in> A. a < i}\n     else ys ! card {a \\<in> - A. a < i})", "by simp"], ["proof (state)\nthis:\n  weave A (xs @ [x]) ys ! i = (weave A xs ys @ [x]) ! i\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  weave A (xs @ [x]) ys ! i = (weave A xs ys @ [x]) ! i\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ?i < length (weave A (xs @ [x]) ys) \\<Longrightarrow>\n  weave A (xs @ [x]) ys ! ?i = (weave A xs ys @ [x]) ! ?i\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma weave_append2:\nassumes \"length xs + length ys \\<notin> A\"\nassumes \"length ys = card {a\\<in>-A. a < length xs + length ys}\"\nshows \"weave A xs (ys @ [y]) = weave A xs ys @ [y]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. weave A xs (ys @ [y]) = weave A xs ys @ [y]", "proof (rule nth_equalityI)"], ["proof (state)\ngoal (2 subgoals):\n 1. length (weave A xs (ys @ [y])) = length (weave A xs ys @ [y])\n 2. \\<And>i.\n       i < length (weave A xs (ys @ [y])) \\<Longrightarrow>\n       weave A xs (ys @ [y]) ! i = (weave A xs ys @ [y]) ! i", "show \"length (weave A xs (ys @ [y])) = length (weave A xs ys @ [y])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length (weave A xs (ys @ [y])) = length (weave A xs ys @ [y])", "unfolding weave_def length_map"], ["proof (prove)\ngoal (1 subgoal):\n 1. length [0..<length xs + length (ys @ [y])] =\n    length\n     (map (\\<lambda>i.\n              if i \\<in> A then xs ! card {a \\<in> A. a < i}\n              else ys ! card {a \\<in> - A. a < i})\n       [0..<length xs + length ys] @\n      [y])", "by simp"], ["proof (state)\nthis:\n  length (weave A xs (ys @ [y])) = length (weave A xs ys @ [y])\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       i < length (weave A xs (ys @ [y])) \\<Longrightarrow>\n       weave A xs (ys @ [y]) ! i = (weave A xs ys @ [y]) ! i", "show \"weave A xs (ys @ [y]) ! i = (weave A xs ys @ [y]) ! i\" if \"i < length (weave A xs (ys @ [y]))\" for i"], ["proof (prove)\ngoal (1 subgoal):\n 1. weave A xs (ys @ [y]) ! i = (weave A xs ys @ [y]) ! i", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. weave A xs (ys @ [y]) ! i = (weave A xs ys @ [y]) ! i", "show \"weave A xs (ys @ [y]) ! i = (weave A xs ys @ [y]) ! i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. weave A xs (ys @ [y]) ! i = (weave A xs ys @ [y]) ! i", "proof (cases \"i = length xs + length ys\")"], ["proof (state)\ngoal (2 subgoals):\n 1. i = length xs + length ys \\<Longrightarrow>\n    weave A xs (ys @ [y]) ! i = (weave A xs ys @ [y]) ! i\n 2. i \\<noteq> length xs + length ys \\<Longrightarrow>\n    weave A xs (ys @ [y]) ! i = (weave A xs ys @ [y]) ! i", "case True"], ["proof (state)\nthis:\n  i = length xs + length ys\n\ngoal (2 subgoals):\n 1. i = length xs + length ys \\<Longrightarrow>\n    weave A xs (ys @ [y]) ! i = (weave A xs ys @ [y]) ! i\n 2. i \\<noteq> length xs + length ys \\<Longrightarrow>\n    weave A xs (ys @ [y]) ! i = (weave A xs ys @ [y]) ! i", "then"], ["proof (chain)\npicking this:\n  i = length xs + length ys", "have \"(weave A xs ys @ [y]) ! i = y\""], ["proof (prove)\nusing this:\n  i = length xs + length ys\n\ngoal (1 subgoal):\n 1. (weave A xs ys @ [y]) ! i = y", "using length_weave"], ["proof (prove)\nusing this:\n  i = length xs + length ys\n  length (weave ?A ?xs ?ys) = length ?xs + length ?ys\n\ngoal (1 subgoal):\n 1. (weave A xs ys @ [y]) ! i = y", "by (metis nth_append_length)"], ["proof (state)\nthis:\n  (weave A xs ys @ [y]) ! i = y\n\ngoal (2 subgoals):\n 1. i = length xs + length ys \\<Longrightarrow>\n    weave A xs (ys @ [y]) ! i = (weave A xs ys @ [y]) ! i\n 2. i \\<noteq> length xs + length ys \\<Longrightarrow>\n    weave A xs (ys @ [y]) ! i = (weave A xs ys @ [y]) ! i", "have \"card {a \\<in> -A. a < i} = length ys\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card {a \\<in> - A. a < i} = length ys", "using assms(2) True"], ["proof (prove)\nusing this:\n  length ys = card {a \\<in> - A. a < length xs + length ys}\n  i = length xs + length ys\n\ngoal (1 subgoal):\n 1. card {a \\<in> - A. a < i} = length ys", "by auto"], ["proof (state)\nthis:\n  card {a \\<in> - A. a < i} = length ys\n\ngoal (2 subgoals):\n 1. i = length xs + length ys \\<Longrightarrow>\n    weave A xs (ys @ [y]) ! i = (weave A xs ys @ [y]) ! i\n 2. i \\<noteq> length xs + length ys \\<Longrightarrow>\n    weave A xs (ys @ [y]) ! i = (weave A xs ys @ [y]) ! i", "then"], ["proof (chain)\npicking this:\n  card {a \\<in> - A. a < i} = length ys", "show ?thesis"], ["proof (prove)\nusing this:\n  card {a \\<in> - A. a < i} = length ys\n\ngoal (1 subgoal):\n 1. weave A xs (ys @ [y]) ! i = (weave A xs ys @ [y]) ! i", "unfolding nth_weave[OF \\<open>i < length (weave A xs (ys @ [y]))\\<close>]\n        \\<open>(weave A xs ys @ [y]) ! i = y\\<close>"], ["proof (prove)\nusing this:\n  card {a \\<in> - A. a < i} = length ys\n\ngoal (1 subgoal):\n 1. (if i \\<in> A then xs ! card {a \\<in> A. a < i}\n     else (ys @ [y]) ! card {a \\<in> - A. a < i}) =\n    y", "using True assms(1)"], ["proof (prove)\nusing this:\n  card {a \\<in> - A. a < i} = length ys\n  i = length xs + length ys\n  length xs + length ys \\<notin> A\n\ngoal (1 subgoal):\n 1. (if i \\<in> A then xs ! card {a \\<in> A. a < i}\n     else (ys @ [y]) ! card {a \\<in> - A. a < i}) =\n    y", "by simp"], ["proof (state)\nthis:\n  weave A xs (ys @ [y]) ! i = (weave A xs ys @ [y]) ! i\n\ngoal (1 subgoal):\n 1. i \\<noteq> length xs + length ys \\<Longrightarrow>\n    weave A xs (ys @ [y]) ! i = (weave A xs ys @ [y]) ! i", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. i \\<noteq> length xs + length ys \\<Longrightarrow>\n    weave A xs (ys @ [y]) ! i = (weave A xs ys @ [y]) ! i", "case False"], ["proof (state)\nthis:\n  i \\<noteq> length xs + length ys\n\ngoal (1 subgoal):\n 1. i \\<noteq> length xs + length ys \\<Longrightarrow>\n    weave A xs (ys @ [y]) ! i = (weave A xs ys @ [y]) ! i", "have \"i < length (weave A xs ys)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. i < length (weave A xs ys)", "using \\<open>i < length (weave A xs (ys @ [y]))\\<close>\n        \\<open>length (weave A xs (ys @ [y])) = length (weave A xs ys @ [y])\\<close> length_append_singleton\n        length_weave less_antisym False"], ["proof (prove)\nusing this:\n  i < length (weave A xs (ys @ [y]))\n  length (weave A xs (ys @ [y])) = length (weave A xs ys @ [y])\n  length (?xs @ [?x]) = Suc (length ?xs)\n  length (weave ?A ?xs ?ys) = length ?xs + length ?ys\n  \\<lbrakk>\\<not> ?n < ?m; ?n < Suc ?m\\<rbrakk> \\<Longrightarrow> ?m = ?n\n  i \\<noteq> length xs + length ys\n\ngoal (1 subgoal):\n 1. i < length (weave A xs ys)", "by fastforce"], ["proof (state)\nthis:\n  i < length (weave A xs ys)\n\ngoal (1 subgoal):\n 1. i \\<noteq> length xs + length ys \\<Longrightarrow>\n    weave A xs (ys @ [y]) ! i = (weave A xs ys @ [y]) ! i", "then"], ["proof (chain)\npicking this:\n  i < length (weave A xs ys)", "have \"(weave A xs ys @ [y]) ! i = (weave A xs ys) ! i\""], ["proof (prove)\nusing this:\n  i < length (weave A xs ys)\n\ngoal (1 subgoal):\n 1. (weave A xs ys @ [y]) ! i = weave A xs ys ! i", "by (simp add: nth_append)"], ["proof (state)\nthis:\n  (weave A xs ys @ [y]) ! i = weave A xs ys ! i\n\ngoal (1 subgoal):\n 1. i \\<noteq> length xs + length ys \\<Longrightarrow>\n    weave A xs (ys @ [y]) ! i = (weave A xs ys @ [y]) ! i", "{"], ["proof (state)\nthis:\n  (weave A xs ys @ [y]) ! i = weave A xs ys ! i\n\ngoal (1 subgoal):\n 1. i \\<noteq> length xs + length ys \\<Longrightarrow>\n    weave A xs (ys @ [y]) ! i = (weave A xs ys @ [y]) ! i", "assume \"i\\<notin>A\""], ["proof (state)\nthis:\n  i \\<notin> A\n\ngoal (1 subgoal):\n 1. i \\<noteq> length xs + length ys \\<Longrightarrow>\n    weave A xs (ys @ [y]) ! i = (weave A xs ys @ [y]) ! i", "have  \"i<length xs + length ys\""], ["proof (prove)\ngoal (1 subgoal):\n 1. i < length xs + length ys", "by (metis \\<open>i < length (weave A xs ys)\\<close> length_weave)"], ["proof (state)\nthis:\n  i < length xs + length ys\n\ngoal (1 subgoal):\n 1. i \\<noteq> length xs + length ys \\<Longrightarrow>\n    weave A xs (ys @ [y]) ! i = (weave A xs ys @ [y]) ! i", "then"], ["proof (chain)\npicking this:\n  i < length xs + length ys", "have \"{a \\<in> -A. a < i} \\<subset> {a\\<in>-A. a < length xs + length ys}\""], ["proof (prove)\nusing this:\n  i < length xs + length ys\n\ngoal (1 subgoal):\n 1. {a \\<in> - A. a < i} \\<subset> {a \\<in> - A. a < length xs + length ys}", "using assms(1) \\<open>i<length xs + length ys\\<close> \\<open>i\\<notin>A\\<close>"], ["proof (prove)\nusing this:\n  i < length xs + length ys\n  length xs + length ys \\<notin> A\n  i < length xs + length ys\n  i \\<notin> A\n\ngoal (1 subgoal):\n 1. {a \\<in> - A. a < i} \\<subset> {a \\<in> - A. a < length xs + length ys}", "by auto"], ["proof (state)\nthis:\n  {a \\<in> - A. a < i} \\<subset> {a \\<in> - A. a < length xs + length ys}\n\ngoal (1 subgoal):\n 1. i \\<noteq> length xs + length ys \\<Longrightarrow>\n    weave A xs (ys @ [y]) ! i = (weave A xs ys @ [y]) ! i", "then"], ["proof (chain)\npicking this:\n  {a \\<in> - A. a < i} \\<subset> {a \\<in> - A. a < length xs + length ys}", "have \"card {a \\<in> -A. a < i} < card {a\\<in>-A. a < length xs + length ys}\""], ["proof (prove)\nusing this:\n  {a \\<in> - A. a < i} \\<subset> {a \\<in> - A. a < length xs + length ys}\n\ngoal (1 subgoal):\n 1. card {a \\<in> - A. a < i}\n    < card {a \\<in> - A. a < length xs + length ys}", "using psubset_card_mono[of \"{a\\<in>-A. a < length xs + length ys}\" \"{a \\<in> -A. a < i}\"]"], ["proof (prove)\nusing this:\n  {a \\<in> - A. a < i} \\<subset> {a \\<in> - A. a < length xs + length ys}\n  \\<lbrakk>finite {a \\<in> - A. a < length xs + length ys};\n   {a \\<in> - A. a < i}\n   \\<subset> {a \\<in> - A. a < length xs + length ys}\\<rbrakk>\n  \\<Longrightarrow> card {a \\<in> - A. a < i}\n                    < card {a \\<in> - A. a < length xs + length ys}\n\ngoal (1 subgoal):\n 1. card {a \\<in> - A. a < i}\n    < card {a \\<in> - A. a < length xs + length ys}", "by simp"], ["proof (state)\nthis:\n  card {a \\<in> - A. a < i} < card {a \\<in> - A. a < length xs + length ys}\n\ngoal (1 subgoal):\n 1. i \\<noteq> length xs + length ys \\<Longrightarrow>\n    weave A xs (ys @ [y]) ! i = (weave A xs ys @ [y]) ! i", "then"], ["proof (chain)\npicking this:\n  card {a \\<in> - A. a < i} < card {a \\<in> - A. a < length xs + length ys}", "have \"(ys @ [y]) ! card {a \\<in> -A. a < i} = ys ! card {a \\<in> -A. a < i}\""], ["proof (prove)\nusing this:\n  card {a \\<in> - A. a < i} < card {a \\<in> - A. a < length xs + length ys}\n\ngoal (1 subgoal):\n 1. (ys @ [y]) ! card {a \\<in> - A. a < i} = ys ! card {a \\<in> - A. a < i}", "by (metis (no_types, lifting)  assms(2) nth_append)"], ["proof (state)\nthis:\n  (ys @ [y]) ! card {a \\<in> - A. a < i} = ys ! card {a \\<in> - A. a < i}\n\ngoal (1 subgoal):\n 1. i \\<noteq> length xs + length ys \\<Longrightarrow>\n    weave A xs (ys @ [y]) ! i = (weave A xs ys @ [y]) ! i", "}"], ["proof (state)\nthis:\n  i \\<notin> A \\<Longrightarrow>\n  (ys @ [y]) ! card {a \\<in> - A. a < i} = ys ! card {a \\<in> - A. a < i}\n\ngoal (1 subgoal):\n 1. i \\<noteq> length xs + length ys \\<Longrightarrow>\n    weave A xs (ys @ [y]) ! i = (weave A xs ys @ [y]) ! i", "then"], ["proof (chain)\npicking this:\n  i \\<notin> A \\<Longrightarrow>\n  (ys @ [y]) ! card {a \\<in> - A. a < i} = ys ! card {a \\<in> - A. a < i}", "show ?thesis"], ["proof (prove)\nusing this:\n  i \\<notin> A \\<Longrightarrow>\n  (ys @ [y]) ! card {a \\<in> - A. a < i} = ys ! card {a \\<in> - A. a < i}\n\ngoal (1 subgoal):\n 1. weave A xs (ys @ [y]) ! i = (weave A xs ys @ [y]) ! i", "unfolding nth_weave[OF \\<open>i < length (weave A xs (ys @ [y]))\\<close>]\n        \\<open>(weave A xs ys @ [y]) ! i = (weave A xs ys) ! i\\<close> nth_weave[OF \\<open>i < length (weave A xs ys)\\<close>]"], ["proof (prove)\nusing this:\n  i \\<notin> A \\<Longrightarrow>\n  (ys @ [y]) ! card {a \\<in> - A. a < i} = ys ! card {a \\<in> - A. a < i}\n\ngoal (1 subgoal):\n 1. (if i \\<in> A then xs ! card {a \\<in> A. a < i}\n     else (ys @ [y]) ! card {a \\<in> - A. a < i}) =\n    (if i \\<in> A then xs ! card {a \\<in> A. a < i}\n     else ys ! card {a \\<in> - A. a < i})", "by simp"], ["proof (state)\nthis:\n  weave A xs (ys @ [y]) ! i = (weave A xs ys @ [y]) ! i\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  weave A xs (ys @ [y]) ! i = (weave A xs ys @ [y]) ! i\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ?i < length (weave A xs (ys @ [y])) \\<Longrightarrow>\n  weave A xs (ys @ [y]) ! ?i = (weave A xs ys @ [y]) ! ?i\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma nths_nth:\nassumes \"n\\<in>A\" \"n<length xs\"\nshows \"nths xs A ! (card {i. i<n \\<and> i\\<in>A}) = xs ! n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. nths xs A ! card {i. i < n \\<and> i \\<in> A} = xs ! n", "using assms"], ["proof (prove)\nusing this:\n  n \\<in> A\n  n < length xs\n\ngoal (1 subgoal):\n 1. nths xs A ! card {i. i < n \\<and> i \\<in> A} = xs ! n", "proof (induction xs rule:rev_induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>n \\<in> A; n < length []\\<rbrakk>\n    \\<Longrightarrow> nths [] A ! card {i. i < n \\<and> i \\<in> A} = [] ! n\n 2. \\<And>x xs.\n       \\<lbrakk>\\<lbrakk>n \\<in> A; n < length xs\\<rbrakk>\n                \\<Longrightarrow> nths xs A !\n                                  card {i. i < n \\<and> i \\<in> A} =\n                                  xs ! n;\n        n \\<in> A; n < length (xs @ [x])\\<rbrakk>\n       \\<Longrightarrow> nths (xs @ [x]) A !\n                         card {i. i < n \\<and> i \\<in> A} =\n                         (xs @ [x]) ! n", "case (snoc x xs)"], ["proof (state)\nthis:\n  \\<lbrakk>n \\<in> A; n < length xs\\<rbrakk>\n  \\<Longrightarrow> nths xs A ! card {i. i < n \\<and> i \\<in> A} = xs ! n\n  n \\<in> A\n  n < length (xs @ [x])\n\ngoal (2 subgoals):\n 1. \\<lbrakk>n \\<in> A; n < length []\\<rbrakk>\n    \\<Longrightarrow> nths [] A ! card {i. i < n \\<and> i \\<in> A} = [] ! n\n 2. \\<And>x xs.\n       \\<lbrakk>\\<lbrakk>n \\<in> A; n < length xs\\<rbrakk>\n                \\<Longrightarrow> nths xs A !\n                                  card {i. i < n \\<and> i \\<in> A} =\n                                  xs ! n;\n        n \\<in> A; n < length (xs @ [x])\\<rbrakk>\n       \\<Longrightarrow> nths (xs @ [x]) A !\n                         card {i. i < n \\<and> i \\<in> A} =\n                         (xs @ [x]) ! n", "then"], ["proof (chain)\npicking this:\n  \\<lbrakk>n \\<in> A; n < length xs\\<rbrakk>\n  \\<Longrightarrow> nths xs A ! card {i. i < n \\<and> i \\<in> A} = xs ! n\n  n \\<in> A\n  n < length (xs @ [x])", "show ?case"], ["proof (prove)\nusing this:\n  \\<lbrakk>n \\<in> A; n < length xs\\<rbrakk>\n  \\<Longrightarrow> nths xs A ! card {i. i < n \\<and> i \\<in> A} = xs ! n\n  n \\<in> A\n  n < length (xs @ [x])\n\ngoal (1 subgoal):\n 1. nths (xs @ [x]) A ! card {i. i < n \\<and> i \\<in> A} = (xs @ [x]) ! n", "proof (cases \"n = length xs\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<lbrakk>n \\<in> A; n < length xs\\<rbrakk>\n             \\<Longrightarrow> nths xs A !\n                               card {i. i < n \\<and> i \\<in> A} =\n                               xs ! n;\n     n \\<in> A; n < length (xs @ [x]); n = length xs\\<rbrakk>\n    \\<Longrightarrow> nths (xs @ [x]) A ! card {i. i < n \\<and> i \\<in> A} =\n                      (xs @ [x]) ! n\n 2. \\<lbrakk>\\<lbrakk>n \\<in> A; n < length xs\\<rbrakk>\n             \\<Longrightarrow> nths xs A !\n                               card {i. i < n \\<and> i \\<in> A} =\n                               xs ! n;\n     n \\<in> A; n < length (xs @ [x]); n \\<noteq> length xs\\<rbrakk>\n    \\<Longrightarrow> nths (xs @ [x]) A ! card {i. i < n \\<and> i \\<in> A} =\n                      (xs @ [x]) ! n", "case True"], ["proof (state)\nthis:\n  n = length xs\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<lbrakk>n \\<in> A; n < length xs\\<rbrakk>\n             \\<Longrightarrow> nths xs A !\n                               card {i. i < n \\<and> i \\<in> A} =\n                               xs ! n;\n     n \\<in> A; n < length (xs @ [x]); n = length xs\\<rbrakk>\n    \\<Longrightarrow> nths (xs @ [x]) A ! card {i. i < n \\<and> i \\<in> A} =\n                      (xs @ [x]) ! n\n 2. \\<lbrakk>\\<lbrakk>n \\<in> A; n < length xs\\<rbrakk>\n             \\<Longrightarrow> nths xs A !\n                               card {i. i < n \\<and> i \\<in> A} =\n                               xs ! n;\n     n \\<in> A; n < length (xs @ [x]); n \\<noteq> length xs\\<rbrakk>\n    \\<Longrightarrow> nths (xs @ [x]) A ! card {i. i < n \\<and> i \\<in> A} =\n                      (xs @ [x]) ! n", "then"], ["proof (chain)\npicking this:\n  n = length xs", "show ?thesis"], ["proof (prove)\nusing this:\n  n = length xs\n\ngoal (1 subgoal):\n 1. nths (xs @ [x]) A ! card {i. i < n \\<and> i \\<in> A} = (xs @ [x]) ! n", "unfolding nths_append[of xs \"[x]\" A] nth_append"], ["proof (prove)\nusing this:\n  n = length xs\n\ngoal (1 subgoal):\n 1. (if card {i. i < n \\<and> i \\<in> A} < length (nths xs A)\n     then nths xs A ! card {i. i < n \\<and> i \\<in> A}\n     else nths [x] {j. j + length xs \\<in> A} !\n          (card {i. i < n \\<and> i \\<in> A} - length (nths xs A))) =\n    (if n < length xs then xs ! n else [x] ! (n - length xs))", "using length_nths[of xs A] nths_singleton snoc.prems(1)"], ["proof (prove)\nusing this:\n  n = length xs\n  length (nths xs A) = card {i. i < length xs \\<and> i \\<in> A}\n  nths [?x] ?A = (if 0 \\<in> ?A then [?x] else [])\n  n \\<in> A\n\ngoal (1 subgoal):\n 1. (if card {i. i < n \\<and> i \\<in> A} < length (nths xs A)\n     then nths xs A ! card {i. i < n \\<and> i \\<in> A}\n     else nths [x] {j. j + length xs \\<in> A} !\n          (card {i. i < n \\<and> i \\<in> A} - length (nths xs A))) =\n    (if n < length xs then xs ! n else [x] ! (n - length xs))", "by auto"], ["proof (state)\nthis:\n  nths (xs @ [x]) A ! card {i. i < n \\<and> i \\<in> A} = (xs @ [x]) ! n\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<lbrakk>n \\<in> A; n < length xs\\<rbrakk>\n             \\<Longrightarrow> nths xs A !\n                               card {i. i < n \\<and> i \\<in> A} =\n                               xs ! n;\n     n \\<in> A; n < length (xs @ [x]); n \\<noteq> length xs\\<rbrakk>\n    \\<Longrightarrow> nths (xs @ [x]) A ! card {i. i < n \\<and> i \\<in> A} =\n                      (xs @ [x]) ! n", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<lbrakk>n \\<in> A; n < length xs\\<rbrakk>\n             \\<Longrightarrow> nths xs A !\n                               card {i. i < n \\<and> i \\<in> A} =\n                               xs ! n;\n     n \\<in> A; n < length (xs @ [x]); n \\<noteq> length xs\\<rbrakk>\n    \\<Longrightarrow> nths (xs @ [x]) A ! card {i. i < n \\<and> i \\<in> A} =\n                      (xs @ [x]) ! n", "case False"], ["proof (state)\nthis:\n  n \\<noteq> length xs\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<lbrakk>n \\<in> A; n < length xs\\<rbrakk>\n             \\<Longrightarrow> nths xs A !\n                               card {i. i < n \\<and> i \\<in> A} =\n                               xs ! n;\n     n \\<in> A; n < length (xs @ [x]); n \\<noteq> length xs\\<rbrakk>\n    \\<Longrightarrow> nths (xs @ [x]) A ! card {i. i < n \\<and> i \\<in> A} =\n                      (xs @ [x]) ! n", "then"], ["proof (chain)\npicking this:\n  n \\<noteq> length xs", "have \"n < length xs\""], ["proof (prove)\nusing this:\n  n \\<noteq> length xs\n\ngoal (1 subgoal):\n 1. n < length xs", "using snoc"], ["proof (prove)\nusing this:\n  n \\<noteq> length xs\n  \\<lbrakk>n \\<in> A; n < length xs\\<rbrakk>\n  \\<Longrightarrow> nths xs A ! card {i. i < n \\<and> i \\<in> A} = xs ! n\n  n \\<in> A\n  n < length (xs @ [x])\n\ngoal (1 subgoal):\n 1. n < length xs", "by auto"], ["proof (state)\nthis:\n  n < length xs\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<lbrakk>n \\<in> A; n < length xs\\<rbrakk>\n             \\<Longrightarrow> nths xs A !\n                               card {i. i < n \\<and> i \\<in> A} =\n                               xs ! n;\n     n \\<in> A; n < length (xs @ [x]); n \\<noteq> length xs\\<rbrakk>\n    \\<Longrightarrow> nths (xs @ [x]) A ! card {i. i < n \\<and> i \\<in> A} =\n                      (xs @ [x]) ! n", "then"], ["proof (chain)\npicking this:\n  n < length xs", "have 0:\"nths xs A ! card {i. i < n \\<and> i \\<in> A} = xs ! n\""], ["proof (prove)\nusing this:\n  n < length xs\n\ngoal (1 subgoal):\n 1. nths xs A ! card {i. i < n \\<and> i \\<in> A} = xs ! n", "using snoc"], ["proof (prove)\nusing this:\n  n < length xs\n  \\<lbrakk>n \\<in> A; n < length xs\\<rbrakk>\n  \\<Longrightarrow> nths xs A ! card {i. i < n \\<and> i \\<in> A} = xs ! n\n  n \\<in> A\n  n < length (xs @ [x])\n\ngoal (1 subgoal):\n 1. nths xs A ! card {i. i < n \\<and> i \\<in> A} = xs ! n", "by auto"], ["proof (state)\nthis:\n  nths xs A ! card {i. i < n \\<and> i \\<in> A} = xs ! n\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<lbrakk>n \\<in> A; n < length xs\\<rbrakk>\n             \\<Longrightarrow> nths xs A !\n                               card {i. i < n \\<and> i \\<in> A} =\n                               xs ! n;\n     n \\<in> A; n < length (xs @ [x]); n \\<noteq> length xs\\<rbrakk>\n    \\<Longrightarrow> nths (xs @ [x]) A ! card {i. i < n \\<and> i \\<in> A} =\n                      (xs @ [x]) ! n", "have \"{i. i < n \\<and> i \\<in> A} \\<subset> {i. i < length xs \\<and> i \\<in> A}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {i. i < n \\<and> i \\<in> A}\n    \\<subset> {i. i < length xs \\<and> i \\<in> A}", "using \\<open>n < length xs\\<close> snoc"], ["proof (prove)\nusing this:\n  n < length xs\n  \\<lbrakk>n \\<in> A; n < length xs\\<rbrakk>\n  \\<Longrightarrow> nths xs A ! card {i. i < n \\<and> i \\<in> A} = xs ! n\n  n \\<in> A\n  n < length (xs @ [x])\n\ngoal (1 subgoal):\n 1. {i. i < n \\<and> i \\<in> A}\n    \\<subset> {i. i < length xs \\<and> i \\<in> A}", "by force"], ["proof (state)\nthis:\n  {i. i < n \\<and> i \\<in> A} \\<subset> {i. i < length xs \\<and> i \\<in> A}\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<lbrakk>n \\<in> A; n < length xs\\<rbrakk>\n             \\<Longrightarrow> nths xs A !\n                               card {i. i < n \\<and> i \\<in> A} =\n                               xs ! n;\n     n \\<in> A; n < length (xs @ [x]); n \\<noteq> length xs\\<rbrakk>\n    \\<Longrightarrow> nths (xs @ [x]) A ! card {i. i < n \\<and> i \\<in> A} =\n                      (xs @ [x]) ! n", "then"], ["proof (chain)\npicking this:\n  {i. i < n \\<and> i \\<in> A} \\<subset> {i. i < length xs \\<and> i \\<in> A}", "have \"card {i. i < n \\<and> i \\<in> A} < length (nths xs A)\""], ["proof (prove)\nusing this:\n  {i. i < n \\<and> i \\<in> A} \\<subset> {i. i < length xs \\<and> i \\<in> A}\n\ngoal (1 subgoal):\n 1. card {i. i < n \\<and> i \\<in> A} < length (nths xs A)", "unfolding length_nths"], ["proof (prove)\nusing this:\n  {i. i < n \\<and> i \\<in> A} \\<subset> {i. i < length xs \\<and> i \\<in> A}\n\ngoal (1 subgoal):\n 1. card {i. i < n \\<and> i \\<in> A}\n    < card {i. i < length xs \\<and> i \\<in> A}", "by (simp add: psubset_card_mono)"], ["proof (state)\nthis:\n  card {i. i < n \\<and> i \\<in> A} < length (nths xs A)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<lbrakk>n \\<in> A; n < length xs\\<rbrakk>\n             \\<Longrightarrow> nths xs A !\n                               card {i. i < n \\<and> i \\<in> A} =\n                               xs ! n;\n     n \\<in> A; n < length (xs @ [x]); n \\<noteq> length xs\\<rbrakk>\n    \\<Longrightarrow> nths (xs @ [x]) A ! card {i. i < n \\<and> i \\<in> A} =\n                      (xs @ [x]) ! n", "then"], ["proof (chain)\npicking this:\n  card {i. i < n \\<and> i \\<in> A} < length (nths xs A)", "show ?thesis"], ["proof (prove)\nusing this:\n  card {i. i < n \\<and> i \\<in> A} < length (nths xs A)\n\ngoal (1 subgoal):\n 1. nths (xs @ [x]) A ! card {i. i < n \\<and> i \\<in> A} = (xs @ [x]) ! n", "unfolding nths_append[of xs \"[x]\" A] nth_append"], ["proof (prove)\nusing this:\n  card {i. i < n \\<and> i \\<in> A} < length (nths xs A)\n\ngoal (1 subgoal):\n 1. (if card {i. i < n \\<and> i \\<in> A} < length (nths xs A)\n     then nths xs A ! card {i. i < n \\<and> i \\<in> A}\n     else nths [x] {j. j + length xs \\<in> A} !\n          (card {i. i < n \\<and> i \\<in> A} - length (nths xs A))) =\n    (if n < length xs then xs ! n else [x] ! (n - length xs))", "using 0"], ["proof (prove)\nusing this:\n  card {i. i < n \\<and> i \\<in> A} < length (nths xs A)\n  nths xs A ! card {i. i < n \\<and> i \\<in> A} = xs ! n\n\ngoal (1 subgoal):\n 1. (if card {i. i < n \\<and> i \\<in> A} < length (nths xs A)\n     then nths xs A ! card {i. i < n \\<and> i \\<in> A}\n     else nths [x] {j. j + length xs \\<in> A} !\n          (card {i. i < n \\<and> i \\<in> A} - length (nths xs A))) =\n    (if n < length xs then xs ! n else [x] ! (n - length xs))", "by (simp add: \\<open>n < length xs\\<close>)"], ["proof (state)\nthis:\n  nths (xs @ [x]) A ! card {i. i < n \\<and> i \\<in> A} = (xs @ [x]) ! n\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  nths (xs @ [x]) A ! card {i. i < n \\<and> i \\<in> A} = (xs @ [x]) ! n\n\ngoal (1 subgoal):\n 1. \\<lbrakk>n \\<in> A; n < length []\\<rbrakk>\n    \\<Longrightarrow> nths [] A ! card {i. i < n \\<and> i \\<in> A} = [] ! n", "qed simp"], ["", "lemma list_all2_nths:\nassumes \"list_all2 P (nths xs A) (nths ys A)\"\nand     \"list_all2 P (nths xs (-A)) (nths ys (-A))\"\nshows \"list_all2 P xs ys\""], ["proof (prove)\ngoal (1 subgoal):\n 1. list_all2 P xs ys", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. list_all2 P xs ys", "have \"length xs = length ys\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length xs = length ys", "proof (rule ccontr; cases \"length xs < length ys\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>length xs \\<noteq> length ys; length xs < length ys\\<rbrakk>\n    \\<Longrightarrow> False\n 2. \\<lbrakk>length xs \\<noteq> length ys;\n     \\<not> length xs < length ys\\<rbrakk>\n    \\<Longrightarrow> False", "case True"], ["proof (state)\nthis:\n  length xs < length ys\n\ngoal (2 subgoals):\n 1. \\<lbrakk>length xs \\<noteq> length ys; length xs < length ys\\<rbrakk>\n    \\<Longrightarrow> False\n 2. \\<lbrakk>length xs \\<noteq> length ys;\n     \\<not> length xs < length ys\\<rbrakk>\n    \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  length xs < length ys", "show False"], ["proof (prove)\nusing this:\n  length xs < length ys\n\ngoal (1 subgoal):\n 1. False", "proof (cases \"length xs \\<in> A\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>length xs < length ys; length xs \\<in> A\\<rbrakk>\n    \\<Longrightarrow> False\n 2. \\<lbrakk>length xs < length ys; length xs \\<notin> A\\<rbrakk>\n    \\<Longrightarrow> False", "case False"], ["proof (state)\nthis:\n  length xs \\<notin> A\n\ngoal (2 subgoals):\n 1. \\<lbrakk>length xs < length ys; length xs \\<in> A\\<rbrakk>\n    \\<Longrightarrow> False\n 2. \\<lbrakk>length xs < length ys; length xs \\<notin> A\\<rbrakk>\n    \\<Longrightarrow> False", "have \"{i. i < length xs \\<and> i \\<in> - A} \\<subset> {i. i < length ys \\<and> i \\<in> - A}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {i. i < length xs \\<and> i \\<in> - A}\n    \\<subset> {i. i < length ys \\<and> i \\<in> - A}", "using False \\<open>length xs < length ys\\<close>"], ["proof (prove)\nusing this:\n  length xs \\<notin> A\n  length xs < length ys\n\ngoal (1 subgoal):\n 1. {i. i < length xs \\<and> i \\<in> - A}\n    \\<subset> {i. i < length ys \\<and> i \\<in> - A}", "by force"], ["proof (state)\nthis:\n  {i. i < length xs \\<and> i \\<in> - A}\n  \\<subset> {i. i < length ys \\<and> i \\<in> - A}\n\ngoal (2 subgoals):\n 1. \\<lbrakk>length xs < length ys; length xs \\<in> A\\<rbrakk>\n    \\<Longrightarrow> False\n 2. \\<lbrakk>length xs < length ys; length xs \\<notin> A\\<rbrakk>\n    \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  {i. i < length xs \\<and> i \\<in> - A}\n  \\<subset> {i. i < length ys \\<and> i \\<in> - A}", "have \"length (nths ys (-A)) > length (nths xs (-A))\""], ["proof (prove)\nusing this:\n  {i. i < length xs \\<and> i \\<in> - A}\n  \\<subset> {i. i < length ys \\<and> i \\<in> - A}\n\ngoal (1 subgoal):\n 1. length (nths xs (- A)) < length (nths ys (- A))", "unfolding length_nths"], ["proof (prove)\nusing this:\n  {i. i < length xs \\<and> i \\<in> - A}\n  \\<subset> {i. i < length ys \\<and> i \\<in> - A}\n\ngoal (1 subgoal):\n 1. card {i. i < length xs \\<and> i \\<in> - A}\n    < card {i. i < length ys \\<and> i \\<in> - A}", "by (simp add: psubset_card_mono)"], ["proof (state)\nthis:\n  length (nths xs (- A)) < length (nths ys (- A))\n\ngoal (2 subgoals):\n 1. \\<lbrakk>length xs < length ys; length xs \\<in> A\\<rbrakk>\n    \\<Longrightarrow> False\n 2. \\<lbrakk>length xs < length ys; length xs \\<notin> A\\<rbrakk>\n    \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  length (nths xs (- A)) < length (nths ys (- A))", "show False"], ["proof (prove)\nusing this:\n  length (nths xs (- A)) < length (nths ys (- A))\n\ngoal (1 subgoal):\n 1. False", "using assms(2) list_all2_lengthD not_less_iff_gr_or_eq"], ["proof (prove)\nusing this:\n  length (nths xs (- A)) < length (nths ys (- A))\n  list_all2 P (nths xs (- A)) (nths ys (- A))\n  list_all2 ?P ?xs ?ys \\<Longrightarrow> length ?xs = length ?ys\n  (\\<not> ?x < ?y) = (?y < ?x \\<or> ?x = ?y)\n\ngoal (1 subgoal):\n 1. False", "by blast"], ["proof (state)\nthis:\n  False\n\ngoal (1 subgoal):\n 1. \\<lbrakk>length xs < length ys; length xs \\<in> A\\<rbrakk>\n    \\<Longrightarrow> False", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>length xs < length ys; length xs \\<in> A\\<rbrakk>\n    \\<Longrightarrow> False", "case True"], ["proof (state)\nthis:\n  length xs \\<in> A\n\ngoal (1 subgoal):\n 1. \\<lbrakk>length xs < length ys; length xs \\<in> A\\<rbrakk>\n    \\<Longrightarrow> False", "have \"{i. i < length xs \\<and> i \\<in> A} \\<subset> {i. i < length ys \\<and> i \\<in> A}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {i. i < length xs \\<and> i \\<in> A}\n    \\<subset> {i. i < length ys \\<and> i \\<in> A}", "using True \\<open>length xs < length ys\\<close>"], ["proof (prove)\nusing this:\n  length xs \\<in> A\n  length xs < length ys\n\ngoal (1 subgoal):\n 1. {i. i < length xs \\<and> i \\<in> A}\n    \\<subset> {i. i < length ys \\<and> i \\<in> A}", "by force"], ["proof (state)\nthis:\n  {i. i < length xs \\<and> i \\<in> A}\n  \\<subset> {i. i < length ys \\<and> i \\<in> A}\n\ngoal (1 subgoal):\n 1. \\<lbrakk>length xs < length ys; length xs \\<in> A\\<rbrakk>\n    \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  {i. i < length xs \\<and> i \\<in> A}\n  \\<subset> {i. i < length ys \\<and> i \\<in> A}", "have \"length (nths ys A) > length (nths xs A)\""], ["proof (prove)\nusing this:\n  {i. i < length xs \\<and> i \\<in> A}\n  \\<subset> {i. i < length ys \\<and> i \\<in> A}\n\ngoal (1 subgoal):\n 1. length (nths xs A) < length (nths ys A)", "unfolding length_nths"], ["proof (prove)\nusing this:\n  {i. i < length xs \\<and> i \\<in> A}\n  \\<subset> {i. i < length ys \\<and> i \\<in> A}\n\ngoal (1 subgoal):\n 1. card {i. i < length xs \\<and> i \\<in> A}\n    < card {i. i < length ys \\<and> i \\<in> A}", "by (simp add: psubset_card_mono)"], ["proof (state)\nthis:\n  length (nths xs A) < length (nths ys A)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>length xs < length ys; length xs \\<in> A\\<rbrakk>\n    \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  length (nths xs A) < length (nths ys A)", "show False"], ["proof (prove)\nusing this:\n  length (nths xs A) < length (nths ys A)\n\ngoal (1 subgoal):\n 1. False", "using assms(1) list_all2_lengthD not_less_iff_gr_or_eq"], ["proof (prove)\nusing this:\n  length (nths xs A) < length (nths ys A)\n  list_all2 P (nths xs A) (nths ys A)\n  list_all2 ?P ?xs ?ys \\<Longrightarrow> length ?xs = length ?ys\n  (\\<not> ?x < ?y) = (?y < ?x \\<or> ?x = ?y)\n\ngoal (1 subgoal):\n 1. False", "by blast"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  False\n\ngoal (1 subgoal):\n 1. \\<lbrakk>length xs \\<noteq> length ys;\n     \\<not> length xs < length ys\\<rbrakk>\n    \\<Longrightarrow> False", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>length xs \\<noteq> length ys;\n     \\<not> length xs < length ys\\<rbrakk>\n    \\<Longrightarrow> False", "assume \"length xs \\<noteq> length ys\""], ["proof (state)\nthis:\n  length xs \\<noteq> length ys\n\ngoal (1 subgoal):\n 1. \\<lbrakk>length xs \\<noteq> length ys;\n     \\<not> length xs < length ys\\<rbrakk>\n    \\<Longrightarrow> False", "case False"], ["proof (state)\nthis:\n  \\<not> length xs < length ys\n\ngoal (1 subgoal):\n 1. \\<lbrakk>length xs \\<noteq> length ys;\n     \\<not> length xs < length ys\\<rbrakk>\n    \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  \\<not> length xs < length ys", "have \"length xs > length ys\""], ["proof (prove)\nusing this:\n  \\<not> length xs < length ys\n\ngoal (1 subgoal):\n 1. length ys < length xs", "using \\<open>length xs \\<noteq> length ys\\<close>"], ["proof (prove)\nusing this:\n  \\<not> length xs < length ys\n  length xs \\<noteq> length ys\n\ngoal (1 subgoal):\n 1. length ys < length xs", "by auto"], ["proof (state)\nthis:\n  length ys < length xs\n\ngoal (1 subgoal):\n 1. \\<lbrakk>length xs \\<noteq> length ys;\n     \\<not> length xs < length ys\\<rbrakk>\n    \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  length ys < length xs", "show False"], ["proof (prove)\nusing this:\n  length ys < length xs\n\ngoal (1 subgoal):\n 1. False", "proof (cases \"length ys \\<in> A\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>length ys < length xs; length ys \\<in> A\\<rbrakk>\n    \\<Longrightarrow> False\n 2. \\<lbrakk>length ys < length xs; length ys \\<notin> A\\<rbrakk>\n    \\<Longrightarrow> False", "case False"], ["proof (state)\nthis:\n  length ys \\<notin> A\n\ngoal (2 subgoals):\n 1. \\<lbrakk>length ys < length xs; length ys \\<in> A\\<rbrakk>\n    \\<Longrightarrow> False\n 2. \\<lbrakk>length ys < length xs; length ys \\<notin> A\\<rbrakk>\n    \\<Longrightarrow> False", "have \"{i. i < length ys \\<and> i \\<in> -A} \\<subset> {i. i < length xs \\<and> i \\<in> -A}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {i. i < length ys \\<and> i \\<in> - A}\n    \\<subset> {i. i < length xs \\<and> i \\<in> - A}", "using False \\<open>length xs > length ys\\<close>"], ["proof (prove)\nusing this:\n  length ys \\<notin> A\n  length ys < length xs\n\ngoal (1 subgoal):\n 1. {i. i < length ys \\<and> i \\<in> - A}\n    \\<subset> {i. i < length xs \\<and> i \\<in> - A}", "by force"], ["proof (state)\nthis:\n  {i. i < length ys \\<and> i \\<in> - A}\n  \\<subset> {i. i < length xs \\<and> i \\<in> - A}\n\ngoal (2 subgoals):\n 1. \\<lbrakk>length ys < length xs; length ys \\<in> A\\<rbrakk>\n    \\<Longrightarrow> False\n 2. \\<lbrakk>length ys < length xs; length ys \\<notin> A\\<rbrakk>\n    \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  {i. i < length ys \\<and> i \\<in> - A}\n  \\<subset> {i. i < length xs \\<and> i \\<in> - A}", "have \"length (nths xs (-A)) > length (nths ys (-A))\""], ["proof (prove)\nusing this:\n  {i. i < length ys \\<and> i \\<in> - A}\n  \\<subset> {i. i < length xs \\<and> i \\<in> - A}\n\ngoal (1 subgoal):\n 1. length (nths ys (- A)) < length (nths xs (- A))", "unfolding length_nths"], ["proof (prove)\nusing this:\n  {i. i < length ys \\<and> i \\<in> - A}\n  \\<subset> {i. i < length xs \\<and> i \\<in> - A}\n\ngoal (1 subgoal):\n 1. card {i. i < length ys \\<and> i \\<in> - A}\n    < card {i. i < length xs \\<and> i \\<in> - A}", "by (simp add: psubset_card_mono)"], ["proof (state)\nthis:\n  length (nths ys (- A)) < length (nths xs (- A))\n\ngoal (2 subgoals):\n 1. \\<lbrakk>length ys < length xs; length ys \\<in> A\\<rbrakk>\n    \\<Longrightarrow> False\n 2. \\<lbrakk>length ys < length xs; length ys \\<notin> A\\<rbrakk>\n    \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  length (nths ys (- A)) < length (nths xs (- A))", "show False"], ["proof (prove)\nusing this:\n  length (nths ys (- A)) < length (nths xs (- A))\n\ngoal (1 subgoal):\n 1. False", "using assms(2) list_all2_lengthD dual_order.strict_implies_not_eq"], ["proof (prove)\nusing this:\n  length (nths ys (- A)) < length (nths xs (- A))\n  list_all2 P (nths xs (- A)) (nths ys (- A))\n  list_all2 ?P ?xs ?ys \\<Longrightarrow> length ?xs = length ?ys\n  ?b < ?a \\<Longrightarrow> ?a \\<noteq> ?b\n\ngoal (1 subgoal):\n 1. False", "by blast"], ["proof (state)\nthis:\n  False\n\ngoal (1 subgoal):\n 1. \\<lbrakk>length ys < length xs; length ys \\<in> A\\<rbrakk>\n    \\<Longrightarrow> False", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>length ys < length xs; length ys \\<in> A\\<rbrakk>\n    \\<Longrightarrow> False", "case True"], ["proof (state)\nthis:\n  length ys \\<in> A\n\ngoal (1 subgoal):\n 1. \\<lbrakk>length ys < length xs; length ys \\<in> A\\<rbrakk>\n    \\<Longrightarrow> False", "have \"{i. i < length ys \\<and> i \\<in> A} \\<subset> {i. i < length xs \\<and> i \\<in> A}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {i. i < length ys \\<and> i \\<in> A}\n    \\<subset> {i. i < length xs \\<and> i \\<in> A}", "using True \\<open>length xs > length ys\\<close>"], ["proof (prove)\nusing this:\n  length ys \\<in> A\n  length ys < length xs\n\ngoal (1 subgoal):\n 1. {i. i < length ys \\<and> i \\<in> A}\n    \\<subset> {i. i < length xs \\<and> i \\<in> A}", "by force"], ["proof (state)\nthis:\n  {i. i < length ys \\<and> i \\<in> A}\n  \\<subset> {i. i < length xs \\<and> i \\<in> A}\n\ngoal (1 subgoal):\n 1. \\<lbrakk>length ys < length xs; length ys \\<in> A\\<rbrakk>\n    \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  {i. i < length ys \\<and> i \\<in> A}\n  \\<subset> {i. i < length xs \\<and> i \\<in> A}", "have \"length (nths xs A) > length (nths ys A)\""], ["proof (prove)\nusing this:\n  {i. i < length ys \\<and> i \\<in> A}\n  \\<subset> {i. i < length xs \\<and> i \\<in> A}\n\ngoal (1 subgoal):\n 1. length (nths ys A) < length (nths xs A)", "unfolding length_nths"], ["proof (prove)\nusing this:\n  {i. i < length ys \\<and> i \\<in> A}\n  \\<subset> {i. i < length xs \\<and> i \\<in> A}\n\ngoal (1 subgoal):\n 1. card {i. i < length ys \\<and> i \\<in> A}\n    < card {i. i < length xs \\<and> i \\<in> A}", "by (simp add: psubset_card_mono)"], ["proof (state)\nthis:\n  length (nths ys A) < length (nths xs A)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>length ys < length xs; length ys \\<in> A\\<rbrakk>\n    \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  length (nths ys A) < length (nths xs A)", "show False"], ["proof (prove)\nusing this:\n  length (nths ys A) < length (nths xs A)\n\ngoal (1 subgoal):\n 1. False", "using assms(1) list_all2_lengthD dual_order.strict_implies_not_eq"], ["proof (prove)\nusing this:\n  length (nths ys A) < length (nths xs A)\n  list_all2 P (nths xs A) (nths ys A)\n  list_all2 ?P ?xs ?ys \\<Longrightarrow> length ?xs = length ?ys\n  ?b < ?a \\<Longrightarrow> ?a \\<noteq> ?b\n\ngoal (1 subgoal):\n 1. False", "by blast"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  length xs = length ys\n\ngoal (1 subgoal):\n 1. list_all2 P xs ys", "have \"\\<And>n. n < length xs \\<Longrightarrow> P (xs ! n) (ys ! n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n. n < length xs \\<Longrightarrow> P (xs ! n) (ys ! n)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n. n < length xs \\<Longrightarrow> P (xs ! n) (ys ! n)", "fix n"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n. n < length xs \\<Longrightarrow> P (xs ! n) (ys ! n)", "assume \"n < length xs\""], ["proof (state)\nthis:\n  n < length xs\n\ngoal (1 subgoal):\n 1. \\<And>n. n < length xs \\<Longrightarrow> P (xs ! n) (ys ! n)", "then"], ["proof (chain)\npicking this:\n  n < length xs", "have \"n < length ys\""], ["proof (prove)\nusing this:\n  n < length xs\n\ngoal (1 subgoal):\n 1. n < length ys", "using \\<open>length xs = length ys\\<close>"], ["proof (prove)\nusing this:\n  n < length xs\n  length xs = length ys\n\ngoal (1 subgoal):\n 1. n < length ys", "by auto"], ["proof (state)\nthis:\n  n < length ys\n\ngoal (1 subgoal):\n 1. \\<And>n. n < length xs \\<Longrightarrow> P (xs ! n) (ys ! n)", "then"], ["proof (chain)\npicking this:\n  n < length ys", "show \"P (xs ! n) (ys ! n)\""], ["proof (prove)\nusing this:\n  n < length ys\n\ngoal (1 subgoal):\n 1. P (xs ! n) (ys ! n)", "proof (cases \"n\\<in>A\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>n < length ys; n \\<in> A\\<rbrakk>\n    \\<Longrightarrow> P (xs ! n) (ys ! n)\n 2. \\<lbrakk>n < length ys; n \\<notin> A\\<rbrakk>\n    \\<Longrightarrow> P (xs ! n) (ys ! n)", "case True"], ["proof (state)\nthis:\n  n \\<in> A\n\ngoal (2 subgoals):\n 1. \\<lbrakk>n < length ys; n \\<in> A\\<rbrakk>\n    \\<Longrightarrow> P (xs ! n) (ys ! n)\n 2. \\<lbrakk>n < length ys; n \\<notin> A\\<rbrakk>\n    \\<Longrightarrow> P (xs ! n) (ys ! n)", "have \"{i. i < n \\<and> i \\<in> A} \\<subset> {i. i < length xs \\<and> i \\<in> A}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {i. i < n \\<and> i \\<in> A}\n    \\<subset> {i. i < length xs \\<and> i \\<in> A}", "using \\<open>n < length xs\\<close> \\<open>n\\<in>A\\<close>"], ["proof (prove)\nusing this:\n  n < length xs\n  n \\<in> A\n\ngoal (1 subgoal):\n 1. {i. i < n \\<and> i \\<in> A}\n    \\<subset> {i. i < length xs \\<and> i \\<in> A}", "by force"], ["proof (state)\nthis:\n  {i. i < n \\<and> i \\<in> A} \\<subset> {i. i < length xs \\<and> i \\<in> A}\n\ngoal (2 subgoals):\n 1. \\<lbrakk>n < length ys; n \\<in> A\\<rbrakk>\n    \\<Longrightarrow> P (xs ! n) (ys ! n)\n 2. \\<lbrakk>n < length ys; n \\<notin> A\\<rbrakk>\n    \\<Longrightarrow> P (xs ! n) (ys ! n)", "then"], ["proof (chain)\npicking this:\n  {i. i < n \\<and> i \\<in> A} \\<subset> {i. i < length xs \\<and> i \\<in> A}", "have \"card {i. i < n \\<and> i \\<in> A} < length (nths xs A)\""], ["proof (prove)\nusing this:\n  {i. i < n \\<and> i \\<in> A} \\<subset> {i. i < length xs \\<and> i \\<in> A}\n\ngoal (1 subgoal):\n 1. card {i. i < n \\<and> i \\<in> A} < length (nths xs A)", "unfolding length_nths"], ["proof (prove)\nusing this:\n  {i. i < n \\<and> i \\<in> A} \\<subset> {i. i < length xs \\<and> i \\<in> A}\n\ngoal (1 subgoal):\n 1. card {i. i < n \\<and> i \\<in> A}\n    < card {i. i < length xs \\<and> i \\<in> A}", "by (simp add: psubset_card_mono)"], ["proof (state)\nthis:\n  card {i. i < n \\<and> i \\<in> A} < length (nths xs A)\n\ngoal (2 subgoals):\n 1. \\<lbrakk>n < length ys; n \\<in> A\\<rbrakk>\n    \\<Longrightarrow> P (xs ! n) (ys ! n)\n 2. \\<lbrakk>n < length ys; n \\<notin> A\\<rbrakk>\n    \\<Longrightarrow> P (xs ! n) (ys ! n)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. P (xs ! n) (ys ! n)", "using nths_nth[OF \\<open>n\\<in>A\\<close> \\<open>n < length xs\\<close>] nths_nth[OF \\<open>n\\<in>A\\<close> \\<open>n < length ys\\<close>]\n        list_all2_nthD[OF assms(1), of \"card {i. i < n \\<and> i \\<in> A}\"] length_nths"], ["proof (prove)\nusing this:\n  nths xs A ! card {i. i < n \\<and> i \\<in> A} = xs ! n\n  nths ys A ! card {i. i < n \\<and> i \\<in> A} = ys ! n\n  card {i. i < n \\<and> i \\<in> A} < length (nths xs A) \\<Longrightarrow>\n  P (nths xs A ! card {i. i < n \\<and> i \\<in> A})\n   (nths ys A ! card {i. i < n \\<and> i \\<in> A})\n  length (nths ?xs ?I) = card {i. i < length ?xs \\<and> i \\<in> ?I}\n\ngoal (1 subgoal):\n 1. P (xs ! n) (ys ! n)", "by (simp add: \\<open>card {i. i < n \\<and> i \\<in> A} < length (nths xs A)\\<close>)"], ["proof (state)\nthis:\n  P (xs ! n) (ys ! n)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>n < length ys; n \\<notin> A\\<rbrakk>\n    \\<Longrightarrow> P (xs ! n) (ys ! n)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>n < length ys; n \\<notin> A\\<rbrakk>\n    \\<Longrightarrow> P (xs ! n) (ys ! n)", "case False"], ["proof (state)\nthis:\n  n \\<notin> A\n\ngoal (1 subgoal):\n 1. \\<lbrakk>n < length ys; n \\<notin> A\\<rbrakk>\n    \\<Longrightarrow> P (xs ! n) (ys ! n)", "then"], ["proof (chain)\npicking this:\n  n \\<notin> A", "have \"n\\<in>-A\""], ["proof (prove)\nusing this:\n  n \\<notin> A\n\ngoal (1 subgoal):\n 1. n \\<in> - A", "by auto"], ["proof (state)\nthis:\n  n \\<in> - A\n\ngoal (1 subgoal):\n 1. \\<lbrakk>n < length ys; n \\<notin> A\\<rbrakk>\n    \\<Longrightarrow> P (xs ! n) (ys ! n)", "have \"{i. i < n \\<and> i \\<in> -A} \\<subset> {i. i < length xs \\<and> i \\<in> -A}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {i. i < n \\<and> i \\<in> - A}\n    \\<subset> {i. i < length xs \\<and> i \\<in> - A}", "using \\<open>n < length xs\\<close> \\<open>n\\<in>-A\\<close>"], ["proof (prove)\nusing this:\n  n < length xs\n  n \\<in> - A\n\ngoal (1 subgoal):\n 1. {i. i < n \\<and> i \\<in> - A}\n    \\<subset> {i. i < length xs \\<and> i \\<in> - A}", "by force"], ["proof (state)\nthis:\n  {i. i < n \\<and> i \\<in> - A}\n  \\<subset> {i. i < length xs \\<and> i \\<in> - A}\n\ngoal (1 subgoal):\n 1. \\<lbrakk>n < length ys; n \\<notin> A\\<rbrakk>\n    \\<Longrightarrow> P (xs ! n) (ys ! n)", "then"], ["proof (chain)\npicking this:\n  {i. i < n \\<and> i \\<in> - A}\n  \\<subset> {i. i < length xs \\<and> i \\<in> - A}", "have \"card {i. i < n \\<and> i \\<in> -A} < length (nths xs (-A))\""], ["proof (prove)\nusing this:\n  {i. i < n \\<and> i \\<in> - A}\n  \\<subset> {i. i < length xs \\<and> i \\<in> - A}\n\ngoal (1 subgoal):\n 1. card {i. i < n \\<and> i \\<in> - A} < length (nths xs (- A))", "unfolding length_nths"], ["proof (prove)\nusing this:\n  {i. i < n \\<and> i \\<in> - A}\n  \\<subset> {i. i < length xs \\<and> i \\<in> - A}\n\ngoal (1 subgoal):\n 1. card {i. i < n \\<and> i \\<in> - A}\n    < card {i. i < length xs \\<and> i \\<in> - A}", "by (simp add: psubset_card_mono)"], ["proof (state)\nthis:\n  card {i. i < n \\<and> i \\<in> - A} < length (nths xs (- A))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>n < length ys; n \\<notin> A\\<rbrakk>\n    \\<Longrightarrow> P (xs ! n) (ys ! n)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. P (xs ! n) (ys ! n)", "using nths_nth[OF \\<open>n\\<in>-A\\<close> \\<open>n < length xs\\<close>] nths_nth[OF \\<open>n\\<in>-A\\<close> \\<open>n < length ys\\<close>]\n        list_all2_nthD[OF assms(2), of \"card {i. i < n \\<and> i \\<in> -A}\"] length_nths"], ["proof (prove)\nusing this:\n  nths xs (- A) ! card {i. i < n \\<and> i \\<in> - A} = xs ! n\n  nths ys (- A) ! card {i. i < n \\<and> i \\<in> - A} = ys ! n\n  card {i. i < n \\<and> i \\<in> - A}\n  < length (nths xs (- A)) \\<Longrightarrow>\n  P (nths xs (- A) ! card {i. i < n \\<and> i \\<in> - A})\n   (nths ys (- A) ! card {i. i < n \\<and> i \\<in> - A})\n  length (nths ?xs ?I) = card {i. i < length ?xs \\<and> i \\<in> ?I}\n\ngoal (1 subgoal):\n 1. P (xs ! n) (ys ! n)", "using \\<open>card {i. i < n \\<and> i \\<in> - A} < length (nths xs (- A))\\<close>"], ["proof (prove)\nusing this:\n  nths xs (- A) ! card {i. i < n \\<and> i \\<in> - A} = xs ! n\n  nths ys (- A) ! card {i. i < n \\<and> i \\<in> - A} = ys ! n\n  card {i. i < n \\<and> i \\<in> - A}\n  < length (nths xs (- A)) \\<Longrightarrow>\n  P (nths xs (- A) ! card {i. i < n \\<and> i \\<in> - A})\n   (nths ys (- A) ! card {i. i < n \\<and> i \\<in> - A})\n  length (nths ?xs ?I) = card {i. i < length ?xs \\<and> i \\<in> ?I}\n  card {i. i < n \\<and> i \\<in> - A} < length (nths xs (- A))\n\ngoal (1 subgoal):\n 1. P (xs ! n) (ys ! n)", "by auto"], ["proof (state)\nthis:\n  P (xs ! n) (ys ! n)\n\ngoal:\nNo subgoals!", "next"], ["proof (state)\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  P (xs ! n) (ys ! n)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ?n < length xs \\<Longrightarrow> P (xs ! ?n) (ys ! ?n)\n\ngoal (1 subgoal):\n 1. list_all2 P xs ys", "then"], ["proof (chain)\npicking this:\n  ?n < length xs \\<Longrightarrow> P (xs ! ?n) (ys ! ?n)", "show ?thesis"], ["proof (prove)\nusing this:\n  ?n < length xs \\<Longrightarrow> P (xs ! ?n) (ys ! ?n)\n\ngoal (1 subgoal):\n 1. list_all2 P xs ys", "using \\<open>length xs = length ys\\<close> list_all2_all_nthI"], ["proof (prove)\nusing this:\n  ?n < length xs \\<Longrightarrow> P (xs ! ?n) (ys ! ?n)\n  length xs = length ys\n  \\<lbrakk>length ?a = length ?b;\n   \\<And>n. n < length ?a \\<Longrightarrow> ?P (?a ! n) (?b ! n)\\<rbrakk>\n  \\<Longrightarrow> list_all2 ?P ?a ?b\n\ngoal (1 subgoal):\n 1. list_all2 P xs ys", "by blast"], ["proof (state)\nthis:\n  list_all2 P xs ys\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma nths_weave:\nassumes \"length xs = card {a\\<in>A. a < length xs + length ys}\"\nassumes \"length ys = card {a\\<in>(-A). a < length xs + length ys}\"\nshows \"nths (weave A xs ys) A = xs \\<and> nths (weave A xs ys) (-A) = ys\""], ["proof (prove)\ngoal (1 subgoal):\n 1. nths (weave A xs ys) A = xs \\<and> nths (weave A xs ys) (- A) = ys", "using assms"], ["proof (prove)\nusing this:\n  length xs = card {a \\<in> A. a < length xs + length ys}\n  length ys = card {a \\<in> - A. a < length xs + length ys}\n\ngoal (1 subgoal):\n 1. nths (weave A xs ys) A = xs \\<and> nths (weave A xs ys) (- A) = ys", "proof (induction \"length xs + length ys\" arbitrary: xs ys)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>xs ys.\n       \\<lbrakk>0 = length xs + length ys;\n        length xs = card {a \\<in> A. a < length xs + length ys};\n        length ys = card {a \\<in> - A. a < length xs + length ys}\\<rbrakk>\n       \\<Longrightarrow> nths (weave A xs ys) A = xs \\<and>\n                         nths (weave A xs ys) (- A) = ys\n 2. \\<And>x xs ys.\n       \\<lbrakk>\\<And>xs ys.\n                   \\<lbrakk>x = length xs + length ys;\n                    length xs = card {a \\<in> A. a < length xs + length ys};\n                    length ys =\n                    card {a \\<in> - A. a < length xs + length ys}\\<rbrakk>\n                   \\<Longrightarrow> nths (weave A xs ys) A = xs \\<and>\n                                     nths (weave A xs ys) (- A) = ys;\n        Suc x = length xs + length ys;\n        length xs = card {a \\<in> A. a < length xs + length ys};\n        length ys = card {a \\<in> - A. a < length xs + length ys}\\<rbrakk>\n       \\<Longrightarrow> nths (weave A xs ys) A = xs \\<and>\n                         nths (weave A xs ys) (- A) = ys", "case 0"], ["proof (state)\nthis:\n  0 = length xs + length ys\n  length xs = card {a \\<in> A. a < length xs + length ys}\n  length ys = card {a \\<in> - A. a < length xs + length ys}\n\ngoal (2 subgoals):\n 1. \\<And>xs ys.\n       \\<lbrakk>0 = length xs + length ys;\n        length xs = card {a \\<in> A. a < length xs + length ys};\n        length ys = card {a \\<in> - A. a < length xs + length ys}\\<rbrakk>\n       \\<Longrightarrow> nths (weave A xs ys) A = xs \\<and>\n                         nths (weave A xs ys) (- A) = ys\n 2. \\<And>x xs ys.\n       \\<lbrakk>\\<And>xs ys.\n                   \\<lbrakk>x = length xs + length ys;\n                    length xs = card {a \\<in> A. a < length xs + length ys};\n                    length ys =\n                    card {a \\<in> - A. a < length xs + length ys}\\<rbrakk>\n                   \\<Longrightarrow> nths (weave A xs ys) A = xs \\<and>\n                                     nths (weave A xs ys) (- A) = ys;\n        Suc x = length xs + length ys;\n        length xs = card {a \\<in> A. a < length xs + length ys};\n        length ys = card {a \\<in> - A. a < length xs + length ys}\\<rbrakk>\n       \\<Longrightarrow> nths (weave A xs ys) A = xs \\<and>\n                         nths (weave A xs ys) (- A) = ys", "then"], ["proof (chain)\npicking this:\n  0 = length xs + length ys\n  length xs = card {a \\<in> A. a < length xs + length ys}\n  length ys = card {a \\<in> - A. a < length xs + length ys}", "show ?case"], ["proof (prove)\nusing this:\n  0 = length xs + length ys\n  length xs = card {a \\<in> A. a < length xs + length ys}\n  length ys = card {a \\<in> - A. a < length xs + length ys}\n\ngoal (1 subgoal):\n 1. nths (weave A xs ys) A = xs \\<and> nths (weave A xs ys) (- A) = ys", "unfolding weave_def nths_map"], ["proof (prove)\nusing this:\n  0 = length xs + length ys\n  length xs = card {a \\<in> A. a < length xs + length ys}\n  length ys = card {a \\<in> - A. a < length xs + length ys}\n\ngoal (1 subgoal):\n 1. map (\\<lambda>i.\n            if i \\<in> A then xs ! card {a \\<in> A. a < i}\n            else ys ! card {a \\<in> - A. a < i})\n     (nths [0..<length xs + length ys] A) =\n    xs \\<and>\n    map (\\<lambda>i.\n            if i \\<in> A then xs ! card {a \\<in> A. a < i}\n            else ys ! card {a \\<in> - A. a < i})\n     (nths [0..<length xs + length ys] (- A)) =\n    ys", "by simp"], ["proof (state)\nthis:\n  nths (weave A xs ys) A = xs \\<and> nths (weave A xs ys) (- A) = ys\n\ngoal (1 subgoal):\n 1. \\<And>x xs ys.\n       \\<lbrakk>\\<And>xs ys.\n                   \\<lbrakk>x = length xs + length ys;\n                    length xs = card {a \\<in> A. a < length xs + length ys};\n                    length ys =\n                    card {a \\<in> - A. a < length xs + length ys}\\<rbrakk>\n                   \\<Longrightarrow> nths (weave A xs ys) A = xs \\<and>\n                                     nths (weave A xs ys) (- A) = ys;\n        Suc x = length xs + length ys;\n        length xs = card {a \\<in> A. a < length xs + length ys};\n        length ys = card {a \\<in> - A. a < length xs + length ys}\\<rbrakk>\n       \\<Longrightarrow> nths (weave A xs ys) A = xs \\<and>\n                         nths (weave A xs ys) (- A) = ys", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x xs ys.\n       \\<lbrakk>\\<And>xs ys.\n                   \\<lbrakk>x = length xs + length ys;\n                    length xs = card {a \\<in> A. a < length xs + length ys};\n                    length ys =\n                    card {a \\<in> - A. a < length xs + length ys}\\<rbrakk>\n                   \\<Longrightarrow> nths (weave A xs ys) A = xs \\<and>\n                                     nths (weave A xs ys) (- A) = ys;\n        Suc x = length xs + length ys;\n        length xs = card {a \\<in> A. a < length xs + length ys};\n        length ys = card {a \\<in> - A. a < length xs + length ys}\\<rbrakk>\n       \\<Longrightarrow> nths (weave A xs ys) A = xs \\<and>\n                         nths (weave A xs ys) (- A) = ys", "case (Suc l)"], ["proof (state)\nthis:\n  \\<lbrakk>l = length ?xs + length ?ys;\n   length ?xs = card {a \\<in> A. a < length ?xs + length ?ys};\n   length ?ys = card {a \\<in> - A. a < length ?xs + length ?ys}\\<rbrakk>\n  \\<Longrightarrow> nths (weave A ?xs ?ys) A = ?xs \\<and>\n                    nths (weave A ?xs ?ys) (- A) = ?ys\n  Suc l = length xs + length ys\n  length xs = card {a \\<in> A. a < length xs + length ys}\n  length ys = card {a \\<in> - A. a < length xs + length ys}\n\ngoal (1 subgoal):\n 1. \\<And>x xs ys.\n       \\<lbrakk>\\<And>xs ys.\n                   \\<lbrakk>x = length xs + length ys;\n                    length xs = card {a \\<in> A. a < length xs + length ys};\n                    length ys =\n                    card {a \\<in> - A. a < length xs + length ys}\\<rbrakk>\n                   \\<Longrightarrow> nths (weave A xs ys) A = xs \\<and>\n                                     nths (weave A xs ys) (- A) = ys;\n        Suc x = length xs + length ys;\n        length xs = card {a \\<in> A. a < length xs + length ys};\n        length ys = card {a \\<in> - A. a < length xs + length ys}\\<rbrakk>\n       \\<Longrightarrow> nths (weave A xs ys) A = xs \\<and>\n                         nths (weave A xs ys) (- A) = ys", "then"], ["proof (chain)\npicking this:\n  \\<lbrakk>l = length ?xs + length ?ys;\n   length ?xs = card {a \\<in> A. a < length ?xs + length ?ys};\n   length ?ys = card {a \\<in> - A. a < length ?xs + length ?ys}\\<rbrakk>\n  \\<Longrightarrow> nths (weave A ?xs ?ys) A = ?xs \\<and>\n                    nths (weave A ?xs ?ys) (- A) = ?ys\n  Suc l = length xs + length ys\n  length xs = card {a \\<in> A. a < length xs + length ys}\n  length ys = card {a \\<in> - A. a < length xs + length ys}", "show ?case"], ["proof (prove)\nusing this:\n  \\<lbrakk>l = length ?xs + length ?ys;\n   length ?xs = card {a \\<in> A. a < length ?xs + length ?ys};\n   length ?ys = card {a \\<in> - A. a < length ?xs + length ?ys}\\<rbrakk>\n  \\<Longrightarrow> nths (weave A ?xs ?ys) A = ?xs \\<and>\n                    nths (weave A ?xs ?ys) (- A) = ?ys\n  Suc l = length xs + length ys\n  length xs = card {a \\<in> A. a < length xs + length ys}\n  length ys = card {a \\<in> - A. a < length xs + length ys}\n\ngoal (1 subgoal):\n 1. nths (weave A xs ys) A = xs \\<and> nths (weave A xs ys) (- A) = ys", "proof (cases \"l\\<in>A\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>xs ys.\n                \\<lbrakk>l = length xs + length ys;\n                 length xs = card {a \\<in> A. a < length xs + length ys};\n                 length ys =\n                 card {a \\<in> - A. a < length xs + length ys}\\<rbrakk>\n                \\<Longrightarrow> nths (weave A xs ys) A = xs \\<and>\n                                  nths (weave A xs ys) (- A) = ys;\n     Suc l = length xs + length ys;\n     length xs = card {a \\<in> A. a < length xs + length ys};\n     length ys = card {a \\<in> - A. a < length xs + length ys};\n     l \\<in> A\\<rbrakk>\n    \\<Longrightarrow> nths (weave A xs ys) A = xs \\<and>\n                      nths (weave A xs ys) (- A) = ys\n 2. \\<lbrakk>\\<And>xs ys.\n                \\<lbrakk>l = length xs + length ys;\n                 length xs = card {a \\<in> A. a < length xs + length ys};\n                 length ys =\n                 card {a \\<in> - A. a < length xs + length ys}\\<rbrakk>\n                \\<Longrightarrow> nths (weave A xs ys) A = xs \\<and>\n                                  nths (weave A xs ys) (- A) = ys;\n     Suc l = length xs + length ys;\n     length xs = card {a \\<in> A. a < length xs + length ys};\n     length ys = card {a \\<in> - A. a < length xs + length ys};\n     l \\<notin> A\\<rbrakk>\n    \\<Longrightarrow> nths (weave A xs ys) A = xs \\<and>\n                      nths (weave A xs ys) (- A) = ys", "case True"], ["proof (state)\nthis:\n  l \\<in> A\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>xs ys.\n                \\<lbrakk>l = length xs + length ys;\n                 length xs = card {a \\<in> A. a < length xs + length ys};\n                 length ys =\n                 card {a \\<in> - A. a < length xs + length ys}\\<rbrakk>\n                \\<Longrightarrow> nths (weave A xs ys) A = xs \\<and>\n                                  nths (weave A xs ys) (- A) = ys;\n     Suc l = length xs + length ys;\n     length xs = card {a \\<in> A. a < length xs + length ys};\n     length ys = card {a \\<in> - A. a < length xs + length ys};\n     l \\<in> A\\<rbrakk>\n    \\<Longrightarrow> nths (weave A xs ys) A = xs \\<and>\n                      nths (weave A xs ys) (- A) = ys\n 2. \\<lbrakk>\\<And>xs ys.\n                \\<lbrakk>l = length xs + length ys;\n                 length xs = card {a \\<in> A. a < length xs + length ys};\n                 length ys =\n                 card {a \\<in> - A. a < length xs + length ys}\\<rbrakk>\n                \\<Longrightarrow> nths (weave A xs ys) A = xs \\<and>\n                                  nths (weave A xs ys) (- A) = ys;\n     Suc l = length xs + length ys;\n     length xs = card {a \\<in> A. a < length xs + length ys};\n     length ys = card {a \\<in> - A. a < length xs + length ys};\n     l \\<notin> A\\<rbrakk>\n    \\<Longrightarrow> nths (weave A xs ys) A = xs \\<and>\n                      nths (weave A xs ys) (- A) = ys", "then"], ["proof (chain)\npicking this:\n  l \\<in> A", "have \"l\\<in>{a \\<in> A. a < length xs + length ys}\""], ["proof (prove)\nusing this:\n  l \\<in> A\n\ngoal (1 subgoal):\n 1. l \\<in> {a \\<in> A. a < length xs + length ys}", "using Suc.hyps mem_Collect_eq zero_less_Suc"], ["proof (prove)\nusing this:\n  l \\<in> A\n  \\<lbrakk>l = length ?xs + length ?ys;\n   length ?xs = card {a \\<in> A. a < length ?xs + length ?ys};\n   length ?ys = card {a \\<in> - A. a < length ?xs + length ?ys}\\<rbrakk>\n  \\<Longrightarrow> nths (weave A ?xs ?ys) A = ?xs \\<and>\n                    nths (weave A ?xs ?ys) (- A) = ?ys\n  Suc l = length xs + length ys\n  (?a \\<in> Collect ?P) = ?P ?a\n  0 < Suc ?n\n\ngoal (1 subgoal):\n 1. l \\<in> {a \\<in> A. a < length xs + length ys}", "by auto"], ["proof (state)\nthis:\n  l \\<in> {a \\<in> A. a < length xs + length ys}\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>xs ys.\n                \\<lbrakk>l = length xs + length ys;\n                 length xs = card {a \\<in> A. a < length xs + length ys};\n                 length ys =\n                 card {a \\<in> - A. a < length xs + length ys}\\<rbrakk>\n                \\<Longrightarrow> nths (weave A xs ys) A = xs \\<and>\n                                  nths (weave A xs ys) (- A) = ys;\n     Suc l = length xs + length ys;\n     length xs = card {a \\<in> A. a < length xs + length ys};\n     length ys = card {a \\<in> - A. a < length xs + length ys};\n     l \\<in> A\\<rbrakk>\n    \\<Longrightarrow> nths (weave A xs ys) A = xs \\<and>\n                      nths (weave A xs ys) (- A) = ys\n 2. \\<lbrakk>\\<And>xs ys.\n                \\<lbrakk>l = length xs + length ys;\n                 length xs = card {a \\<in> A. a < length xs + length ys};\n                 length ys =\n                 card {a \\<in> - A. a < length xs + length ys}\\<rbrakk>\n                \\<Longrightarrow> nths (weave A xs ys) A = xs \\<and>\n                                  nths (weave A xs ys) (- A) = ys;\n     Suc l = length xs + length ys;\n     length xs = card {a \\<in> A. a < length xs + length ys};\n     length ys = card {a \\<in> - A. a < length xs + length ys};\n     l \\<notin> A\\<rbrakk>\n    \\<Longrightarrow> nths (weave A xs ys) A = xs \\<and>\n                      nths (weave A xs ys) (- A) = ys", "then"], ["proof (chain)\npicking this:\n  l \\<in> {a \\<in> A. a < length xs + length ys}", "have \"length xs > 0\""], ["proof (prove)\nusing this:\n  l \\<in> {a \\<in> A. a < length xs + length ys}\n\ngoal (1 subgoal):\n 1. 0 < length xs", "using Suc"], ["proof (prove)\nusing this:\n  l \\<in> {a \\<in> A. a < length xs + length ys}\n  \\<lbrakk>l = length ?xs + length ?ys;\n   length ?xs = card {a \\<in> A. a < length ?xs + length ?ys};\n   length ?ys = card {a \\<in> - A. a < length ?xs + length ?ys}\\<rbrakk>\n  \\<Longrightarrow> nths (weave A ?xs ?ys) A = ?xs \\<and>\n                    nths (weave A ?xs ?ys) (- A) = ?ys\n  Suc l = length xs + length ys\n  length xs = card {a \\<in> A. a < length xs + length ys}\n  length ys = card {a \\<in> - A. a < length xs + length ys}\n\ngoal (1 subgoal):\n 1. 0 < length xs", "by fastforce"], ["proof (state)\nthis:\n  0 < length xs\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>xs ys.\n                \\<lbrakk>l = length xs + length ys;\n                 length xs = card {a \\<in> A. a < length xs + length ys};\n                 length ys =\n                 card {a \\<in> - A. a < length xs + length ys}\\<rbrakk>\n                \\<Longrightarrow> nths (weave A xs ys) A = xs \\<and>\n                                  nths (weave A xs ys) (- A) = ys;\n     Suc l = length xs + length ys;\n     length xs = card {a \\<in> A. a < length xs + length ys};\n     length ys = card {a \\<in> - A. a < length xs + length ys};\n     l \\<in> A\\<rbrakk>\n    \\<Longrightarrow> nths (weave A xs ys) A = xs \\<and>\n                      nths (weave A xs ys) (- A) = ys\n 2. \\<lbrakk>\\<And>xs ys.\n                \\<lbrakk>l = length xs + length ys;\n                 length xs = card {a \\<in> A. a < length xs + length ys};\n                 length ys =\n                 card {a \\<in> - A. a < length xs + length ys}\\<rbrakk>\n                \\<Longrightarrow> nths (weave A xs ys) A = xs \\<and>\n                                  nths (weave A xs ys) (- A) = ys;\n     Suc l = length xs + length ys;\n     length xs = card {a \\<in> A. a < length xs + length ys};\n     length ys = card {a \\<in> - A. a < length xs + length ys};\n     l \\<notin> A\\<rbrakk>\n    \\<Longrightarrow> nths (weave A xs ys) A = xs \\<and>\n                      nths (weave A xs ys) (- A) = ys", "then"], ["proof (chain)\npicking this:\n  0 < length xs", "obtain xs' x where \"xs = xs' @ [x]\""], ["proof (prove)\nusing this:\n  0 < length xs\n\ngoal (1 subgoal):\n 1. (\\<And>xs' x. xs = xs' @ [x] \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis append_butlast_last_id length_greater_0_conv)"], ["proof (state)\nthis:\n  xs = xs' @ [x]\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>xs ys.\n                \\<lbrakk>l = length xs + length ys;\n                 length xs = card {a \\<in> A. a < length xs + length ys};\n                 length ys =\n                 card {a \\<in> - A. a < length xs + length ys}\\<rbrakk>\n                \\<Longrightarrow> nths (weave A xs ys) A = xs \\<and>\n                                  nths (weave A xs ys) (- A) = ys;\n     Suc l = length xs + length ys;\n     length xs = card {a \\<in> A. a < length xs + length ys};\n     length ys = card {a \\<in> - A. a < length xs + length ys};\n     l \\<in> A\\<rbrakk>\n    \\<Longrightarrow> nths (weave A xs ys) A = xs \\<and>\n                      nths (weave A xs ys) (- A) = ys\n 2. \\<lbrakk>\\<And>xs ys.\n                \\<lbrakk>l = length xs + length ys;\n                 length xs = card {a \\<in> A. a < length xs + length ys};\n                 length ys =\n                 card {a \\<in> - A. a < length xs + length ys}\\<rbrakk>\n                \\<Longrightarrow> nths (weave A xs ys) A = xs \\<and>\n                                  nths (weave A xs ys) (- A) = ys;\n     Suc l = length xs + length ys;\n     length xs = card {a \\<in> A. a < length xs + length ys};\n     length ys = card {a \\<in> - A. a < length xs + length ys};\n     l \\<notin> A\\<rbrakk>\n    \\<Longrightarrow> nths (weave A xs ys) A = xs \\<and>\n                      nths (weave A xs ys) (- A) = ys", "then"], ["proof (chain)\npicking this:\n  xs = xs' @ [x]", "have \"l = length xs' + length ys\""], ["proof (prove)\nusing this:\n  xs = xs' @ [x]\n\ngoal (1 subgoal):\n 1. l = length xs' + length ys", "using Suc.hyps"], ["proof (prove)\nusing this:\n  xs = xs' @ [x]\n  \\<lbrakk>l = length ?xs + length ?ys;\n   length ?xs = card {a \\<in> A. a < length ?xs + length ?ys};\n   length ?ys = card {a \\<in> - A. a < length ?xs + length ?ys}\\<rbrakk>\n  \\<Longrightarrow> nths (weave A ?xs ?ys) A = ?xs \\<and>\n                    nths (weave A ?xs ?ys) (- A) = ?ys\n  Suc l = length xs + length ys\n\ngoal (1 subgoal):\n 1. l = length xs' + length ys", "by simp"], ["proof (state)\nthis:\n  l = length xs' + length ys\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>xs ys.\n                \\<lbrakk>l = length xs + length ys;\n                 length xs = card {a \\<in> A. a < length xs + length ys};\n                 length ys =\n                 card {a \\<in> - A. a < length xs + length ys}\\<rbrakk>\n                \\<Longrightarrow> nths (weave A xs ys) A = xs \\<and>\n                                  nths (weave A xs ys) (- A) = ys;\n     Suc l = length xs + length ys;\n     length xs = card {a \\<in> A. a < length xs + length ys};\n     length ys = card {a \\<in> - A. a < length xs + length ys};\n     l \\<in> A\\<rbrakk>\n    \\<Longrightarrow> nths (weave A xs ys) A = xs \\<and>\n                      nths (weave A xs ys) (- A) = ys\n 2. \\<lbrakk>\\<And>xs ys.\n                \\<lbrakk>l = length xs + length ys;\n                 length xs = card {a \\<in> A. a < length xs + length ys};\n                 length ys =\n                 card {a \\<in> - A. a < length xs + length ys}\\<rbrakk>\n                \\<Longrightarrow> nths (weave A xs ys) A = xs \\<and>\n                                  nths (weave A xs ys) (- A) = ys;\n     Suc l = length xs + length ys;\n     length xs = card {a \\<in> A. a < length xs + length ys};\n     length ys = card {a \\<in> - A. a < length xs + length ys};\n     l \\<notin> A\\<rbrakk>\n    \\<Longrightarrow> nths (weave A xs ys) A = xs \\<and>\n                      nths (weave A xs ys) (- A) = ys", "have length_xs':\"length xs' = card {a \\<in> A. a < length xs' + length ys}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length xs' = card {a \\<in> A. a < length xs' + length ys}", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. length xs' = card {a \\<in> A. a < length xs' + length ys}", "have \"{a \\<in> A. a < length xs + length ys} = {a \\<in> A. a < length xs' + length ys} \\<union> {l}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {a \\<in> A. a < length xs + length ys} =\n    {a \\<in> A. a < length xs' + length ys} \\<union> {l}", "using \\<open>xs = xs' @ [x]\\<close> \\<open>l\\<in>{a \\<in> A. a < length xs + length ys}\\<close> \\<open>l = length xs' + length ys\\<close>"], ["proof (prove)\nusing this:\n  xs = xs' @ [x]\n  l \\<in> {a \\<in> A. a < length xs + length ys}\n  l = length xs' + length ys\n\ngoal (1 subgoal):\n 1. {a \\<in> A. a < length xs + length ys} =\n    {a \\<in> A. a < length xs' + length ys} \\<union> {l}", "by force"], ["proof (state)\nthis:\n  {a \\<in> A. a < length xs + length ys} =\n  {a \\<in> A. a < length xs' + length ys} \\<union> {l}\n\ngoal (1 subgoal):\n 1. length xs' = card {a \\<in> A. a < length xs' + length ys}", "then"], ["proof (chain)\npicking this:\n  {a \\<in> A. a < length xs + length ys} =\n  {a \\<in> A. a < length xs' + length ys} \\<union> {l}", "have \"card {a \\<in> A. a < length xs + length ys} = card {a \\<in> A. a < length xs' + length ys} + 1\""], ["proof (prove)\nusing this:\n  {a \\<in> A. a < length xs + length ys} =\n  {a \\<in> A. a < length xs' + length ys} \\<union> {l}\n\ngoal (1 subgoal):\n 1. card {a \\<in> A. a < length xs + length ys} =\n    card {a \\<in> A. a < length xs' + length ys} + 1", "using \\<open>l = length xs' + length ys\\<close>"], ["proof (prove)\nusing this:\n  {a \\<in> A. a < length xs + length ys} =\n  {a \\<in> A. a < length xs' + length ys} \\<union> {l}\n  l = length xs' + length ys\n\ngoal (1 subgoal):\n 1. card {a \\<in> A. a < length xs + length ys} =\n    card {a \\<in> A. a < length xs' + length ys} + 1", "by fastforce"], ["proof (state)\nthis:\n  card {a \\<in> A. a < length xs + length ys} =\n  card {a \\<in> A. a < length xs' + length ys} + 1\n\ngoal (1 subgoal):\n 1. length xs' = card {a \\<in> A. a < length xs' + length ys}", "then"], ["proof (chain)\npicking this:\n  card {a \\<in> A. a < length xs + length ys} =\n  card {a \\<in> A. a < length xs' + length ys} + 1", "show ?thesis"], ["proof (prove)\nusing this:\n  card {a \\<in> A. a < length xs + length ys} =\n  card {a \\<in> A. a < length xs' + length ys} + 1\n\ngoal (1 subgoal):\n 1. length xs' = card {a \\<in> A. a < length xs' + length ys}", "by (metis One_nat_def Suc.prems(1) \\<open>xs = xs' @ [x]\\<close> add_right_imp_eq\n        length_Cons length_append list.size(3))"], ["proof (state)\nthis:\n  length xs' = card {a \\<in> A. a < length xs' + length ys}\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  length xs' = card {a \\<in> A. a < length xs' + length ys}\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>xs ys.\n                \\<lbrakk>l = length xs + length ys;\n                 length xs = card {a \\<in> A. a < length xs + length ys};\n                 length ys =\n                 card {a \\<in> - A. a < length xs + length ys}\\<rbrakk>\n                \\<Longrightarrow> nths (weave A xs ys) A = xs \\<and>\n                                  nths (weave A xs ys) (- A) = ys;\n     Suc l = length xs + length ys;\n     length xs = card {a \\<in> A. a < length xs + length ys};\n     length ys = card {a \\<in> - A. a < length xs + length ys};\n     l \\<in> A\\<rbrakk>\n    \\<Longrightarrow> nths (weave A xs ys) A = xs \\<and>\n                      nths (weave A xs ys) (- A) = ys\n 2. \\<lbrakk>\\<And>xs ys.\n                \\<lbrakk>l = length xs + length ys;\n                 length xs = card {a \\<in> A. a < length xs + length ys};\n                 length ys =\n                 card {a \\<in> - A. a < length xs + length ys}\\<rbrakk>\n                \\<Longrightarrow> nths (weave A xs ys) A = xs \\<and>\n                                  nths (weave A xs ys) (- A) = ys;\n     Suc l = length xs + length ys;\n     length xs = card {a \\<in> A. a < length xs + length ys};\n     length ys = card {a \\<in> - A. a < length xs + length ys};\n     l \\<notin> A\\<rbrakk>\n    \\<Longrightarrow> nths (weave A xs ys) A = xs \\<and>\n                      nths (weave A xs ys) (- A) = ys", "have length_ys:\"length ys = card {a \\<in> - A. a < length xs' + length ys}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length ys = card {a \\<in> - A. a < length xs' + length ys}", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. length ys = card {a \\<in> - A. a < length xs' + length ys}", "have \"l\\<notin>{a \\<in> - A. a < length xs + length ys}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. l \\<notin> {a \\<in> - A. a < length xs + length ys}", "using \\<open>l\\<in>A\\<close> \\<open>l = length xs' + length ys\\<close>"], ["proof (prove)\nusing this:\n  l \\<in> A\n  l = length xs' + length ys\n\ngoal (1 subgoal):\n 1. l \\<notin> {a \\<in> - A. a < length xs + length ys}", "by blast"], ["proof (state)\nthis:\n  l \\<notin> {a \\<in> - A. a < length xs + length ys}\n\ngoal (1 subgoal):\n 1. length ys = card {a \\<in> - A. a < length xs' + length ys}", "have \"{a \\<in> -A. a < length xs + length ys} = {a \\<in> -A. a < length xs' + length ys}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {a \\<in> - A. a < length xs + length ys} =\n    {a \\<in> - A. a < length xs' + length ys}", "apply (rule subset_antisym)"], ["proof (prove)\ngoal (2 subgoals):\n 1. {a \\<in> - A. a < length xs + length ys}\n    \\<subseteq> {a \\<in> - A. a < length xs' + length ys}\n 2. {a \\<in> - A. a < length xs' + length ys}\n    \\<subseteq> {a \\<in> - A. a < length xs + length ys}", "using  \\<open>l = length xs' + length ys\\<close> \\<open>Suc l = length xs + length ys\\<close> \\<open>l\\<notin>{a \\<in> - A. a < length xs + length ys}\\<close>"], ["proof (prove)\nusing this:\n  l = length xs' + length ys\n  Suc l = length xs + length ys\n  l \\<notin> {a \\<in> - A. a < length xs + length ys}\n\ngoal (2 subgoals):\n 1. {a \\<in> - A. a < length xs + length ys}\n    \\<subseteq> {a \\<in> - A. a < length xs' + length ys}\n 2. {a \\<in> - A. a < length xs' + length ys}\n    \\<subseteq> {a \\<in> - A. a < length xs + length ys}", "apply (metis (no_types, lifting) Collect_mono less_Suc_eq mem_Collect_eq)"], ["proof (prove)\ngoal (1 subgoal):\n 1. {a \\<in> - A. a < length xs' + length ys}\n    \\<subseteq> {a \\<in> - A. a < length xs + length ys}", "using Collect_mono Suc.hyps(2) \\<open>l = length xs' + length ys\\<close>"], ["proof (prove)\nusing this:\n  (\\<And>x. ?P x \\<longrightarrow> ?Q x) \\<Longrightarrow>\n  Collect ?P \\<subseteq> Collect ?Q\n  Suc l = length xs + length ys\n  l = length xs' + length ys\n\ngoal (1 subgoal):\n 1. {a \\<in> - A. a < length xs' + length ys}\n    \\<subseteq> {a \\<in> - A. a < length xs + length ys}", "by auto"], ["proof (state)\nthis:\n  {a \\<in> - A. a < length xs + length ys} =\n  {a \\<in> - A. a < length xs' + length ys}\n\ngoal (1 subgoal):\n 1. length ys = card {a \\<in> - A. a < length xs' + length ys}", "then"], ["proof (chain)\npicking this:\n  {a \\<in> - A. a < length xs + length ys} =\n  {a \\<in> - A. a < length xs' + length ys}", "show ?thesis"], ["proof (prove)\nusing this:\n  {a \\<in> - A. a < length xs + length ys} =\n  {a \\<in> - A. a < length xs' + length ys}\n\ngoal (1 subgoal):\n 1. length ys = card {a \\<in> - A. a < length xs' + length ys}", "using Suc.prems(2)"], ["proof (prove)\nusing this:\n  {a \\<in> - A. a < length xs + length ys} =\n  {a \\<in> - A. a < length xs' + length ys}\n  length ys = card {a \\<in> - A. a < length xs + length ys}\n\ngoal (1 subgoal):\n 1. length ys = card {a \\<in> - A. a < length xs' + length ys}", "by auto"], ["proof (state)\nthis:\n  length ys = card {a \\<in> - A. a < length xs' + length ys}\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  length ys = card {a \\<in> - A. a < length xs' + length ys}\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>xs ys.\n                \\<lbrakk>l = length xs + length ys;\n                 length xs = card {a \\<in> A. a < length xs + length ys};\n                 length ys =\n                 card {a \\<in> - A. a < length xs + length ys}\\<rbrakk>\n                \\<Longrightarrow> nths (weave A xs ys) A = xs \\<and>\n                                  nths (weave A xs ys) (- A) = ys;\n     Suc l = length xs + length ys;\n     length xs = card {a \\<in> A. a < length xs + length ys};\n     length ys = card {a \\<in> - A. a < length xs + length ys};\n     l \\<in> A\\<rbrakk>\n    \\<Longrightarrow> nths (weave A xs ys) A = xs \\<and>\n                      nths (weave A xs ys) (- A) = ys\n 2. \\<lbrakk>\\<And>xs ys.\n                \\<lbrakk>l = length xs + length ys;\n                 length xs = card {a \\<in> A. a < length xs + length ys};\n                 length ys =\n                 card {a \\<in> - A. a < length xs + length ys}\\<rbrakk>\n                \\<Longrightarrow> nths (weave A xs ys) A = xs \\<and>\n                                  nths (weave A xs ys) (- A) = ys;\n     Suc l = length xs + length ys;\n     length xs = card {a \\<in> A. a < length xs + length ys};\n     length ys = card {a \\<in> - A. a < length xs + length ys};\n     l \\<notin> A\\<rbrakk>\n    \\<Longrightarrow> nths (weave A xs ys) A = xs \\<and>\n                      nths (weave A xs ys) (- A) = ys", "have \"length xs' + length ys \\<in> A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length xs' + length ys \\<in> A", "using \\<open>l\\<in>A\\<close> \\<open>l = length xs' + length ys\\<close>"], ["proof (prove)\nusing this:\n  l \\<in> A\n  l = length xs' + length ys\n\ngoal (1 subgoal):\n 1. length xs' + length ys \\<in> A", "by blast"], ["proof (state)\nthis:\n  length xs' + length ys \\<in> A\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>xs ys.\n                \\<lbrakk>l = length xs + length ys;\n                 length xs = card {a \\<in> A. a < length xs + length ys};\n                 length ys =\n                 card {a \\<in> - A. a < length xs + length ys}\\<rbrakk>\n                \\<Longrightarrow> nths (weave A xs ys) A = xs \\<and>\n                                  nths (weave A xs ys) (- A) = ys;\n     Suc l = length xs + length ys;\n     length xs = card {a \\<in> A. a < length xs + length ys};\n     length ys = card {a \\<in> - A. a < length xs + length ys};\n     l \\<in> A\\<rbrakk>\n    \\<Longrightarrow> nths (weave A xs ys) A = xs \\<and>\n                      nths (weave A xs ys) (- A) = ys\n 2. \\<lbrakk>\\<And>xs ys.\n                \\<lbrakk>l = length xs + length ys;\n                 length xs = card {a \\<in> A. a < length xs + length ys};\n                 length ys =\n                 card {a \\<in> - A. a < length xs + length ys}\\<rbrakk>\n                \\<Longrightarrow> nths (weave A xs ys) A = xs \\<and>\n                                  nths (weave A xs ys) (- A) = ys;\n     Suc l = length xs + length ys;\n     length xs = card {a \\<in> A. a < length xs + length ys};\n     length ys = card {a \\<in> - A. a < length xs + length ys};\n     l \\<notin> A\\<rbrakk>\n    \\<Longrightarrow> nths (weave A xs ys) A = xs \\<and>\n                      nths (weave A xs ys) (- A) = ys", "then"], ["proof (chain)\npicking this:\n  length xs' + length ys \\<in> A", "have \"nths (weave A xs ys) A = nths (weave A xs' ys @ [x]) A\""], ["proof (prove)\nusing this:\n  length xs' + length ys \\<in> A\n\ngoal (1 subgoal):\n 1. nths (weave A xs ys) A = nths (weave A xs' ys @ [x]) A", "unfolding\n       \\<open>xs = xs' @ [x]\\<close>"], ["proof (prove)\nusing this:\n  length xs' + length ys \\<in> A\n\ngoal (1 subgoal):\n 1. nths (weave A (xs' @ [x]) ys) A = nths (weave A xs' ys @ [x]) A", "using weave_append1[OF \\<open>length xs' + length ys \\<in> A\\<close> length_xs']"], ["proof (prove)\nusing this:\n  length xs' + length ys \\<in> A\n  weave A (xs' @ [?x]) ys = weave A xs' ys @ [?x]\n\ngoal (1 subgoal):\n 1. nths (weave A (xs' @ [x]) ys) A = nths (weave A xs' ys @ [x]) A", "by metis"], ["proof (state)\nthis:\n  nths (weave A xs ys) A = nths (weave A xs' ys @ [x]) A\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>xs ys.\n                \\<lbrakk>l = length xs + length ys;\n                 length xs = card {a \\<in> A. a < length xs + length ys};\n                 length ys =\n                 card {a \\<in> - A. a < length xs + length ys}\\<rbrakk>\n                \\<Longrightarrow> nths (weave A xs ys) A = xs \\<and>\n                                  nths (weave A xs ys) (- A) = ys;\n     Suc l = length xs + length ys;\n     length xs = card {a \\<in> A. a < length xs + length ys};\n     length ys = card {a \\<in> - A. a < length xs + length ys};\n     l \\<in> A\\<rbrakk>\n    \\<Longrightarrow> nths (weave A xs ys) A = xs \\<and>\n                      nths (weave A xs ys) (- A) = ys\n 2. \\<lbrakk>\\<And>xs ys.\n                \\<lbrakk>l = length xs + length ys;\n                 length xs = card {a \\<in> A. a < length xs + length ys};\n                 length ys =\n                 card {a \\<in> - A. a < length xs + length ys}\\<rbrakk>\n                \\<Longrightarrow> nths (weave A xs ys) A = xs \\<and>\n                                  nths (weave A xs ys) (- A) = ys;\n     Suc l = length xs + length ys;\n     length xs = card {a \\<in> A. a < length xs + length ys};\n     length ys = card {a \\<in> - A. a < length xs + length ys};\n     l \\<notin> A\\<rbrakk>\n    \\<Longrightarrow> nths (weave A xs ys) A = xs \\<and>\n                      nths (weave A xs ys) (- A) = ys", "also"], ["proof (state)\nthis:\n  nths (weave A xs ys) A = nths (weave A xs' ys @ [x]) A\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>xs ys.\n                \\<lbrakk>l = length xs + length ys;\n                 length xs = card {a \\<in> A. a < length xs + length ys};\n                 length ys =\n                 card {a \\<in> - A. a < length xs + length ys}\\<rbrakk>\n                \\<Longrightarrow> nths (weave A xs ys) A = xs \\<and>\n                                  nths (weave A xs ys) (- A) = ys;\n     Suc l = length xs + length ys;\n     length xs = card {a \\<in> A. a < length xs + length ys};\n     length ys = card {a \\<in> - A. a < length xs + length ys};\n     l \\<in> A\\<rbrakk>\n    \\<Longrightarrow> nths (weave A xs ys) A = xs \\<and>\n                      nths (weave A xs ys) (- A) = ys\n 2. \\<lbrakk>\\<And>xs ys.\n                \\<lbrakk>l = length xs + length ys;\n                 length xs = card {a \\<in> A. a < length xs + length ys};\n                 length ys =\n                 card {a \\<in> - A. a < length xs + length ys}\\<rbrakk>\n                \\<Longrightarrow> nths (weave A xs ys) A = xs \\<and>\n                                  nths (weave A xs ys) (- A) = ys;\n     Suc l = length xs + length ys;\n     length xs = card {a \\<in> A. a < length xs + length ys};\n     length ys = card {a \\<in> - A. a < length xs + length ys};\n     l \\<notin> A\\<rbrakk>\n    \\<Longrightarrow> nths (weave A xs ys) A = xs \\<and>\n                      nths (weave A xs ys) (- A) = ys", "have \"... = nths (weave A xs' ys) A @ nths [x] {a. a + (length xs' + length ys) \\<in> A}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. nths (weave A xs' ys @ [x]) A =\n    nths (weave A xs' ys) A @\n    nths [x] {a. a + (length xs' + length ys) \\<in> A}", "using nths_append length_weave"], ["proof (prove)\nusing this:\n  nths (?l @ ?l') ?A = nths ?l ?A @ nths ?l' {j. j + length ?l \\<in> ?A}\n  length (weave ?A ?xs ?ys) = length ?xs + length ?ys\n\ngoal (1 subgoal):\n 1. nths (weave A xs' ys @ [x]) A =\n    nths (weave A xs' ys) A @\n    nths [x] {a. a + (length xs' + length ys) \\<in> A}", "by metis"], ["proof (state)\nthis:\n  nths (weave A xs' ys @ [x]) A =\n  nths (weave A xs' ys) A @\n  nths [x] {a. a + (length xs' + length ys) \\<in> A}\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>xs ys.\n                \\<lbrakk>l = length xs + length ys;\n                 length xs = card {a \\<in> A. a < length xs + length ys};\n                 length ys =\n                 card {a \\<in> - A. a < length xs + length ys}\\<rbrakk>\n                \\<Longrightarrow> nths (weave A xs ys) A = xs \\<and>\n                                  nths (weave A xs ys) (- A) = ys;\n     Suc l = length xs + length ys;\n     length xs = card {a \\<in> A. a < length xs + length ys};\n     length ys = card {a \\<in> - A. a < length xs + length ys};\n     l \\<in> A\\<rbrakk>\n    \\<Longrightarrow> nths (weave A xs ys) A = xs \\<and>\n                      nths (weave A xs ys) (- A) = ys\n 2. \\<lbrakk>\\<And>xs ys.\n                \\<lbrakk>l = length xs + length ys;\n                 length xs = card {a \\<in> A. a < length xs + length ys};\n                 length ys =\n                 card {a \\<in> - A. a < length xs + length ys}\\<rbrakk>\n                \\<Longrightarrow> nths (weave A xs ys) A = xs \\<and>\n                                  nths (weave A xs ys) (- A) = ys;\n     Suc l = length xs + length ys;\n     length xs = card {a \\<in> A. a < length xs + length ys};\n     length ys = card {a \\<in> - A. a < length xs + length ys};\n     l \\<notin> A\\<rbrakk>\n    \\<Longrightarrow> nths (weave A xs ys) A = xs \\<and>\n                      nths (weave A xs ys) (- A) = ys", "also"], ["proof (state)\nthis:\n  nths (weave A xs' ys @ [x]) A =\n  nths (weave A xs' ys) A @\n  nths [x] {a. a + (length xs' + length ys) \\<in> A}\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>xs ys.\n                \\<lbrakk>l = length xs + length ys;\n                 length xs = card {a \\<in> A. a < length xs + length ys};\n                 length ys =\n                 card {a \\<in> - A. a < length xs + length ys}\\<rbrakk>\n                \\<Longrightarrow> nths (weave A xs ys) A = xs \\<and>\n                                  nths (weave A xs ys) (- A) = ys;\n     Suc l = length xs + length ys;\n     length xs = card {a \\<in> A. a < length xs + length ys};\n     length ys = card {a \\<in> - A. a < length xs + length ys};\n     l \\<in> A\\<rbrakk>\n    \\<Longrightarrow> nths (weave A xs ys) A = xs \\<and>\n                      nths (weave A xs ys) (- A) = ys\n 2. \\<lbrakk>\\<And>xs ys.\n                \\<lbrakk>l = length xs + length ys;\n                 length xs = card {a \\<in> A. a < length xs + length ys};\n                 length ys =\n                 card {a \\<in> - A. a < length xs + length ys}\\<rbrakk>\n                \\<Longrightarrow> nths (weave A xs ys) A = xs \\<and>\n                                  nths (weave A xs ys) (- A) = ys;\n     Suc l = length xs + length ys;\n     length xs = card {a \\<in> A. a < length xs + length ys};\n     length ys = card {a \\<in> - A. a < length xs + length ys};\n     l \\<notin> A\\<rbrakk>\n    \\<Longrightarrow> nths (weave A xs ys) A = xs \\<and>\n                      nths (weave A xs ys) (- A) = ys", "have \"... = nths (weave A xs' ys) A @ [x]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. nths (weave A xs' ys) A @\n    nths [x] {a. a + (length xs' + length ys) \\<in> A} =\n    nths (weave A xs' ys) A @ [x]", "using nths_singleton \\<open>length xs' + length ys \\<in> A\\<close>"], ["proof (prove)\nusing this:\n  nths [?x] ?A = (if 0 \\<in> ?A then [?x] else [])\n  length xs' + length ys \\<in> A\n\ngoal (1 subgoal):\n 1. nths (weave A xs' ys) A @\n    nths [x] {a. a + (length xs' + length ys) \\<in> A} =\n    nths (weave A xs' ys) A @ [x]", "by auto"], ["proof (state)\nthis:\n  nths (weave A xs' ys) A @\n  nths [x] {a. a + (length xs' + length ys) \\<in> A} =\n  nths (weave A xs' ys) A @ [x]\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>xs ys.\n                \\<lbrakk>l = length xs + length ys;\n                 length xs = card {a \\<in> A. a < length xs + length ys};\n                 length ys =\n                 card {a \\<in> - A. a < length xs + length ys}\\<rbrakk>\n                \\<Longrightarrow> nths (weave A xs ys) A = xs \\<and>\n                                  nths (weave A xs ys) (- A) = ys;\n     Suc l = length xs + length ys;\n     length xs = card {a \\<in> A. a < length xs + length ys};\n     length ys = card {a \\<in> - A. a < length xs + length ys};\n     l \\<in> A\\<rbrakk>\n    \\<Longrightarrow> nths (weave A xs ys) A = xs \\<and>\n                      nths (weave A xs ys) (- A) = ys\n 2. \\<lbrakk>\\<And>xs ys.\n                \\<lbrakk>l = length xs + length ys;\n                 length xs = card {a \\<in> A. a < length xs + length ys};\n                 length ys =\n                 card {a \\<in> - A. a < length xs + length ys}\\<rbrakk>\n                \\<Longrightarrow> nths (weave A xs ys) A = xs \\<and>\n                                  nths (weave A xs ys) (- A) = ys;\n     Suc l = length xs + length ys;\n     length xs = card {a \\<in> A. a < length xs + length ys};\n     length ys = card {a \\<in> - A. a < length xs + length ys};\n     l \\<notin> A\\<rbrakk>\n    \\<Longrightarrow> nths (weave A xs ys) A = xs \\<and>\n                      nths (weave A xs ys) (- A) = ys", "also"], ["proof (state)\nthis:\n  nths (weave A xs' ys) A @\n  nths [x] {a. a + (length xs' + length ys) \\<in> A} =\n  nths (weave A xs' ys) A @ [x]\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>xs ys.\n                \\<lbrakk>l = length xs + length ys;\n                 length xs = card {a \\<in> A. a < length xs + length ys};\n                 length ys =\n                 card {a \\<in> - A. a < length xs + length ys}\\<rbrakk>\n                \\<Longrightarrow> nths (weave A xs ys) A = xs \\<and>\n                                  nths (weave A xs ys) (- A) = ys;\n     Suc l = length xs + length ys;\n     length xs = card {a \\<in> A. a < length xs + length ys};\n     length ys = card {a \\<in> - A. a < length xs + length ys};\n     l \\<in> A\\<rbrakk>\n    \\<Longrightarrow> nths (weave A xs ys) A = xs \\<and>\n                      nths (weave A xs ys) (- A) = ys\n 2. \\<lbrakk>\\<And>xs ys.\n                \\<lbrakk>l = length xs + length ys;\n                 length xs = card {a \\<in> A. a < length xs + length ys};\n                 length ys =\n                 card {a \\<in> - A. a < length xs + length ys}\\<rbrakk>\n                \\<Longrightarrow> nths (weave A xs ys) A = xs \\<and>\n                                  nths (weave A xs ys) (- A) = ys;\n     Suc l = length xs + length ys;\n     length xs = card {a \\<in> A. a < length xs + length ys};\n     length ys = card {a \\<in> - A. a < length xs + length ys};\n     l \\<notin> A\\<rbrakk>\n    \\<Longrightarrow> nths (weave A xs ys) A = xs \\<and>\n                      nths (weave A xs ys) (- A) = ys", "have \"... = xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. nths (weave A xs' ys) A @ [x] = xs", "using Suc.hyps(1)[OF \\<open>l = length xs' + length ys\\<close> length_xs' length_ys]\n     \\<open>xs = xs' @ [x]\\<close>"], ["proof (prove)\nusing this:\n  nths (weave A xs' ys) A = xs' \\<and> nths (weave A xs' ys) (- A) = ys\n  xs = xs' @ [x]\n\ngoal (1 subgoal):\n 1. nths (weave A xs' ys) A @ [x] = xs", "by presburger"], ["proof (state)\nthis:\n  nths (weave A xs' ys) A @ [x] = xs\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>xs ys.\n                \\<lbrakk>l = length xs + length ys;\n                 length xs = card {a \\<in> A. a < length xs + length ys};\n                 length ys =\n                 card {a \\<in> - A. a < length xs + length ys}\\<rbrakk>\n                \\<Longrightarrow> nths (weave A xs ys) A = xs \\<and>\n                                  nths (weave A xs ys) (- A) = ys;\n     Suc l = length xs + length ys;\n     length xs = card {a \\<in> A. a < length xs + length ys};\n     length ys = card {a \\<in> - A. a < length xs + length ys};\n     l \\<in> A\\<rbrakk>\n    \\<Longrightarrow> nths (weave A xs ys) A = xs \\<and>\n                      nths (weave A xs ys) (- A) = ys\n 2. \\<lbrakk>\\<And>xs ys.\n                \\<lbrakk>l = length xs + length ys;\n                 length xs = card {a \\<in> A. a < length xs + length ys};\n                 length ys =\n                 card {a \\<in> - A. a < length xs + length ys}\\<rbrakk>\n                \\<Longrightarrow> nths (weave A xs ys) A = xs \\<and>\n                                  nths (weave A xs ys) (- A) = ys;\n     Suc l = length xs + length ys;\n     length xs = card {a \\<in> A. a < length xs + length ys};\n     length ys = card {a \\<in> - A. a < length xs + length ys};\n     l \\<notin> A\\<rbrakk>\n    \\<Longrightarrow> nths (weave A xs ys) A = xs \\<and>\n                      nths (weave A xs ys) (- A) = ys", "finally"], ["proof (chain)\npicking this:\n  nths (weave A xs ys) A = xs", "have \"nths (weave A xs ys) A = xs\""], ["proof (prove)\nusing this:\n  nths (weave A xs ys) A = xs\n\ngoal (1 subgoal):\n 1. nths (weave A xs ys) A = xs", "by metis"], ["proof (state)\nthis:\n  nths (weave A xs ys) A = xs\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>xs ys.\n                \\<lbrakk>l = length xs + length ys;\n                 length xs = card {a \\<in> A. a < length xs + length ys};\n                 length ys =\n                 card {a \\<in> - A. a < length xs + length ys}\\<rbrakk>\n                \\<Longrightarrow> nths (weave A xs ys) A = xs \\<and>\n                                  nths (weave A xs ys) (- A) = ys;\n     Suc l = length xs + length ys;\n     length xs = card {a \\<in> A. a < length xs + length ys};\n     length ys = card {a \\<in> - A. a < length xs + length ys};\n     l \\<in> A\\<rbrakk>\n    \\<Longrightarrow> nths (weave A xs ys) A = xs \\<and>\n                      nths (weave A xs ys) (- A) = ys\n 2. \\<lbrakk>\\<And>xs ys.\n                \\<lbrakk>l = length xs + length ys;\n                 length xs = card {a \\<in> A. a < length xs + length ys};\n                 length ys =\n                 card {a \\<in> - A. a < length xs + length ys}\\<rbrakk>\n                \\<Longrightarrow> nths (weave A xs ys) A = xs \\<and>\n                                  nths (weave A xs ys) (- A) = ys;\n     Suc l = length xs + length ys;\n     length xs = card {a \\<in> A. a < length xs + length ys};\n     length ys = card {a \\<in> - A. a < length xs + length ys};\n     l \\<notin> A\\<rbrakk>\n    \\<Longrightarrow> nths (weave A xs ys) A = xs \\<and>\n                      nths (weave A xs ys) (- A) = ys", "have \"nths (weave A xs ys) (-A) = nths (weave A xs' ys @ [x]) (-A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. nths (weave A xs ys) (- A) = nths (weave A xs' ys @ [x]) (- A)", "unfolding\n       \\<open>xs = xs' @ [x]\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. nths (weave A (xs' @ [x]) ys) (- A) = nths (weave A xs' ys @ [x]) (- A)", "using weave_append1[OF \\<open>length xs' + length ys \\<in> A\\<close> length_xs']"], ["proof (prove)\nusing this:\n  weave A (xs' @ [?x]) ys = weave A xs' ys @ [?x]\n\ngoal (1 subgoal):\n 1. nths (weave A (xs' @ [x]) ys) (- A) = nths (weave A xs' ys @ [x]) (- A)", "by metis"], ["proof (state)\nthis:\n  nths (weave A xs ys) (- A) = nths (weave A xs' ys @ [x]) (- A)\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>xs ys.\n                \\<lbrakk>l = length xs + length ys;\n                 length xs = card {a \\<in> A. a < length xs + length ys};\n                 length ys =\n                 card {a \\<in> - A. a < length xs + length ys}\\<rbrakk>\n                \\<Longrightarrow> nths (weave A xs ys) A = xs \\<and>\n                                  nths (weave A xs ys) (- A) = ys;\n     Suc l = length xs + length ys;\n     length xs = card {a \\<in> A. a < length xs + length ys};\n     length ys = card {a \\<in> - A. a < length xs + length ys};\n     l \\<in> A\\<rbrakk>\n    \\<Longrightarrow> nths (weave A xs ys) A = xs \\<and>\n                      nths (weave A xs ys) (- A) = ys\n 2. \\<lbrakk>\\<And>xs ys.\n                \\<lbrakk>l = length xs + length ys;\n                 length xs = card {a \\<in> A. a < length xs + length ys};\n                 length ys =\n                 card {a \\<in> - A. a < length xs + length ys}\\<rbrakk>\n                \\<Longrightarrow> nths (weave A xs ys) A = xs \\<and>\n                                  nths (weave A xs ys) (- A) = ys;\n     Suc l = length xs + length ys;\n     length xs = card {a \\<in> A. a < length xs + length ys};\n     length ys = card {a \\<in> - A. a < length xs + length ys};\n     l \\<notin> A\\<rbrakk>\n    \\<Longrightarrow> nths (weave A xs ys) A = xs \\<and>\n                      nths (weave A xs ys) (- A) = ys", "also"], ["proof (state)\nthis:\n  nths (weave A xs ys) (- A) = nths (weave A xs' ys @ [x]) (- A)\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>xs ys.\n                \\<lbrakk>l = length xs + length ys;\n                 length xs = card {a \\<in> A. a < length xs + length ys};\n                 length ys =\n                 card {a \\<in> - A. a < length xs + length ys}\\<rbrakk>\n                \\<Longrightarrow> nths (weave A xs ys) A = xs \\<and>\n                                  nths (weave A xs ys) (- A) = ys;\n     Suc l = length xs + length ys;\n     length xs = card {a \\<in> A. a < length xs + length ys};\n     length ys = card {a \\<in> - A. a < length xs + length ys};\n     l \\<in> A\\<rbrakk>\n    \\<Longrightarrow> nths (weave A xs ys) A = xs \\<and>\n                      nths (weave A xs ys) (- A) = ys\n 2. \\<lbrakk>\\<And>xs ys.\n                \\<lbrakk>l = length xs + length ys;\n                 length xs = card {a \\<in> A. a < length xs + length ys};\n                 length ys =\n                 card {a \\<in> - A. a < length xs + length ys}\\<rbrakk>\n                \\<Longrightarrow> nths (weave A xs ys) A = xs \\<and>\n                                  nths (weave A xs ys) (- A) = ys;\n     Suc l = length xs + length ys;\n     length xs = card {a \\<in> A. a < length xs + length ys};\n     length ys = card {a \\<in> - A. a < length xs + length ys};\n     l \\<notin> A\\<rbrakk>\n    \\<Longrightarrow> nths (weave A xs ys) A = xs \\<and>\n                      nths (weave A xs ys) (- A) = ys", "have \"... = nths (weave A xs' ys) (-A) @ nths [x] {a. a + (length xs' + length ys) \\<in> (-A)}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. nths (weave A xs' ys @ [x]) (- A) =\n    nths (weave A xs' ys) (- A) @\n    nths [x] {a. a + (length xs' + length ys) \\<in> - A}", "using nths_append length_weave"], ["proof (prove)\nusing this:\n  nths (?l @ ?l') ?A = nths ?l ?A @ nths ?l' {j. j + length ?l \\<in> ?A}\n  length (weave ?A ?xs ?ys) = length ?xs + length ?ys\n\ngoal (1 subgoal):\n 1. nths (weave A xs' ys @ [x]) (- A) =\n    nths (weave A xs' ys) (- A) @\n    nths [x] {a. a + (length xs' + length ys) \\<in> - A}", "by metis"], ["proof (state)\nthis:\n  nths (weave A xs' ys @ [x]) (- A) =\n  nths (weave A xs' ys) (- A) @\n  nths [x] {a. a + (length xs' + length ys) \\<in> - A}\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>xs ys.\n                \\<lbrakk>l = length xs + length ys;\n                 length xs = card {a \\<in> A. a < length xs + length ys};\n                 length ys =\n                 card {a \\<in> - A. a < length xs + length ys}\\<rbrakk>\n                \\<Longrightarrow> nths (weave A xs ys) A = xs \\<and>\n                                  nths (weave A xs ys) (- A) = ys;\n     Suc l = length xs + length ys;\n     length xs = card {a \\<in> A. a < length xs + length ys};\n     length ys = card {a \\<in> - A. a < length xs + length ys};\n     l \\<in> A\\<rbrakk>\n    \\<Longrightarrow> nths (weave A xs ys) A = xs \\<and>\n                      nths (weave A xs ys) (- A) = ys\n 2. \\<lbrakk>\\<And>xs ys.\n                \\<lbrakk>l = length xs + length ys;\n                 length xs = card {a \\<in> A. a < length xs + length ys};\n                 length ys =\n                 card {a \\<in> - A. a < length xs + length ys}\\<rbrakk>\n                \\<Longrightarrow> nths (weave A xs ys) A = xs \\<and>\n                                  nths (weave A xs ys) (- A) = ys;\n     Suc l = length xs + length ys;\n     length xs = card {a \\<in> A. a < length xs + length ys};\n     length ys = card {a \\<in> - A. a < length xs + length ys};\n     l \\<notin> A\\<rbrakk>\n    \\<Longrightarrow> nths (weave A xs ys) A = xs \\<and>\n                      nths (weave A xs ys) (- A) = ys", "also"], ["proof (state)\nthis:\n  nths (weave A xs' ys @ [x]) (- A) =\n  nths (weave A xs' ys) (- A) @\n  nths [x] {a. a + (length xs' + length ys) \\<in> - A}\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>xs ys.\n                \\<lbrakk>l = length xs + length ys;\n                 length xs = card {a \\<in> A. a < length xs + length ys};\n                 length ys =\n                 card {a \\<in> - A. a < length xs + length ys}\\<rbrakk>\n                \\<Longrightarrow> nths (weave A xs ys) A = xs \\<and>\n                                  nths (weave A xs ys) (- A) = ys;\n     Suc l = length xs + length ys;\n     length xs = card {a \\<in> A. a < length xs + length ys};\n     length ys = card {a \\<in> - A. a < length xs + length ys};\n     l \\<in> A\\<rbrakk>\n    \\<Longrightarrow> nths (weave A xs ys) A = xs \\<and>\n                      nths (weave A xs ys) (- A) = ys\n 2. \\<lbrakk>\\<And>xs ys.\n                \\<lbrakk>l = length xs + length ys;\n                 length xs = card {a \\<in> A. a < length xs + length ys};\n                 length ys =\n                 card {a \\<in> - A. a < length xs + length ys}\\<rbrakk>\n                \\<Longrightarrow> nths (weave A xs ys) A = xs \\<and>\n                                  nths (weave A xs ys) (- A) = ys;\n     Suc l = length xs + length ys;\n     length xs = card {a \\<in> A. a < length xs + length ys};\n     length ys = card {a \\<in> - A. a < length xs + length ys};\n     l \\<notin> A\\<rbrakk>\n    \\<Longrightarrow> nths (weave A xs ys) A = xs \\<and>\n                      nths (weave A xs ys) (- A) = ys", "have \"... = nths (weave A xs' ys) (-A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. nths (weave A xs' ys) (- A) @\n    nths [x] {a. a + (length xs' + length ys) \\<in> - A} =\n    nths (weave A xs' ys) (- A)", "using nths_singleton \\<open>length xs' + length ys \\<in> A\\<close>"], ["proof (prove)\nusing this:\n  nths [?x] ?A = (if 0 \\<in> ?A then [?x] else [])\n  length xs' + length ys \\<in> A\n\ngoal (1 subgoal):\n 1. nths (weave A xs' ys) (- A) @\n    nths [x] {a. a + (length xs' + length ys) \\<in> - A} =\n    nths (weave A xs' ys) (- A)", "by auto"], ["proof (state)\nthis:\n  nths (weave A xs' ys) (- A) @\n  nths [x] {a. a + (length xs' + length ys) \\<in> - A} =\n  nths (weave A xs' ys) (- A)\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>xs ys.\n                \\<lbrakk>l = length xs + length ys;\n                 length xs = card {a \\<in> A. a < length xs + length ys};\n                 length ys =\n                 card {a \\<in> - A. a < length xs + length ys}\\<rbrakk>\n                \\<Longrightarrow> nths (weave A xs ys) A = xs \\<and>\n                                  nths (weave A xs ys) (- A) = ys;\n     Suc l = length xs + length ys;\n     length xs = card {a \\<in> A. a < length xs + length ys};\n     length ys = card {a \\<in> - A. a < length xs + length ys};\n     l \\<in> A\\<rbrakk>\n    \\<Longrightarrow> nths (weave A xs ys) A = xs \\<and>\n                      nths (weave A xs ys) (- A) = ys\n 2. \\<lbrakk>\\<And>xs ys.\n                \\<lbrakk>l = length xs + length ys;\n                 length xs = card {a \\<in> A. a < length xs + length ys};\n                 length ys =\n                 card {a \\<in> - A. a < length xs + length ys}\\<rbrakk>\n                \\<Longrightarrow> nths (weave A xs ys) A = xs \\<and>\n                                  nths (weave A xs ys) (- A) = ys;\n     Suc l = length xs + length ys;\n     length xs = card {a \\<in> A. a < length xs + length ys};\n     length ys = card {a \\<in> - A. a < length xs + length ys};\n     l \\<notin> A\\<rbrakk>\n    \\<Longrightarrow> nths (weave A xs ys) A = xs \\<and>\n                      nths (weave A xs ys) (- A) = ys", "also"], ["proof (state)\nthis:\n  nths (weave A xs' ys) (- A) @\n  nths [x] {a. a + (length xs' + length ys) \\<in> - A} =\n  nths (weave A xs' ys) (- A)\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>xs ys.\n                \\<lbrakk>l = length xs + length ys;\n                 length xs = card {a \\<in> A. a < length xs + length ys};\n                 length ys =\n                 card {a \\<in> - A. a < length xs + length ys}\\<rbrakk>\n                \\<Longrightarrow> nths (weave A xs ys) A = xs \\<and>\n                                  nths (weave A xs ys) (- A) = ys;\n     Suc l = length xs + length ys;\n     length xs = card {a \\<in> A. a < length xs + length ys};\n     length ys = card {a \\<in> - A. a < length xs + length ys};\n     l \\<in> A\\<rbrakk>\n    \\<Longrightarrow> nths (weave A xs ys) A = xs \\<and>\n                      nths (weave A xs ys) (- A) = ys\n 2. \\<lbrakk>\\<And>xs ys.\n                \\<lbrakk>l = length xs + length ys;\n                 length xs = card {a \\<in> A. a < length xs + length ys};\n                 length ys =\n                 card {a \\<in> - A. a < length xs + length ys}\\<rbrakk>\n                \\<Longrightarrow> nths (weave A xs ys) A = xs \\<and>\n                                  nths (weave A xs ys) (- A) = ys;\n     Suc l = length xs + length ys;\n     length xs = card {a \\<in> A. a < length xs + length ys};\n     length ys = card {a \\<in> - A. a < length xs + length ys};\n     l \\<notin> A\\<rbrakk>\n    \\<Longrightarrow> nths (weave A xs ys) A = xs \\<and>\n                      nths (weave A xs ys) (- A) = ys", "have \"... = ys\""], ["proof (prove)\ngoal (1 subgoal):\n 1. nths (weave A xs' ys) (- A) = ys", "using Suc.hyps(1)[OF \\<open>l = length xs' + length ys\\<close> length_xs' length_ys]"], ["proof (prove)\nusing this:\n  nths (weave A xs' ys) A = xs' \\<and> nths (weave A xs' ys) (- A) = ys\n\ngoal (1 subgoal):\n 1. nths (weave A xs' ys) (- A) = ys", "by presburger"], ["proof (state)\nthis:\n  nths (weave A xs' ys) (- A) = ys\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>xs ys.\n                \\<lbrakk>l = length xs + length ys;\n                 length xs = card {a \\<in> A. a < length xs + length ys};\n                 length ys =\n                 card {a \\<in> - A. a < length xs + length ys}\\<rbrakk>\n                \\<Longrightarrow> nths (weave A xs ys) A = xs \\<and>\n                                  nths (weave A xs ys) (- A) = ys;\n     Suc l = length xs + length ys;\n     length xs = card {a \\<in> A. a < length xs + length ys};\n     length ys = card {a \\<in> - A. a < length xs + length ys};\n     l \\<in> A\\<rbrakk>\n    \\<Longrightarrow> nths (weave A xs ys) A = xs \\<and>\n                      nths (weave A xs ys) (- A) = ys\n 2. \\<lbrakk>\\<And>xs ys.\n                \\<lbrakk>l = length xs + length ys;\n                 length xs = card {a \\<in> A. a < length xs + length ys};\n                 length ys =\n                 card {a \\<in> - A. a < length xs + length ys}\\<rbrakk>\n                \\<Longrightarrow> nths (weave A xs ys) A = xs \\<and>\n                                  nths (weave A xs ys) (- A) = ys;\n     Suc l = length xs + length ys;\n     length xs = card {a \\<in> A. a < length xs + length ys};\n     length ys = card {a \\<in> - A. a < length xs + length ys};\n     l \\<notin> A\\<rbrakk>\n    \\<Longrightarrow> nths (weave A xs ys) A = xs \\<and>\n                      nths (weave A xs ys) (- A) = ys", "finally"], ["proof (chain)\npicking this:\n  nths (weave A xs ys) (- A) = ys", "show ?thesis"], ["proof (prove)\nusing this:\n  nths (weave A xs ys) (- A) = ys\n\ngoal (1 subgoal):\n 1. nths (weave A xs ys) A = xs \\<and> nths (weave A xs ys) (- A) = ys", "using \\<open>nths (weave A xs ys) A = xs\\<close>"], ["proof (prove)\nusing this:\n  nths (weave A xs ys) (- A) = ys\n  nths (weave A xs ys) A = xs\n\ngoal (1 subgoal):\n 1. nths (weave A xs ys) A = xs \\<and> nths (weave A xs ys) (- A) = ys", "by auto"], ["proof (state)\nthis:\n  nths (weave A xs ys) A = xs \\<and> nths (weave A xs ys) (- A) = ys\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>xs ys.\n                \\<lbrakk>l = length xs + length ys;\n                 length xs = card {a \\<in> A. a < length xs + length ys};\n                 length ys =\n                 card {a \\<in> - A. a < length xs + length ys}\\<rbrakk>\n                \\<Longrightarrow> nths (weave A xs ys) A = xs \\<and>\n                                  nths (weave A xs ys) (- A) = ys;\n     Suc l = length xs + length ys;\n     length xs = card {a \\<in> A. a < length xs + length ys};\n     length ys = card {a \\<in> - A. a < length xs + length ys};\n     l \\<notin> A\\<rbrakk>\n    \\<Longrightarrow> nths (weave A xs ys) A = xs \\<and>\n                      nths (weave A xs ys) (- A) = ys", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>xs ys.\n                \\<lbrakk>l = length xs + length ys;\n                 length xs = card {a \\<in> A. a < length xs + length ys};\n                 length ys =\n                 card {a \\<in> - A. a < length xs + length ys}\\<rbrakk>\n                \\<Longrightarrow> nths (weave A xs ys) A = xs \\<and>\n                                  nths (weave A xs ys) (- A) = ys;\n     Suc l = length xs + length ys;\n     length xs = card {a \\<in> A. a < length xs + length ys};\n     length ys = card {a \\<in> - A. a < length xs + length ys};\n     l \\<notin> A\\<rbrakk>\n    \\<Longrightarrow> nths (weave A xs ys) A = xs \\<and>\n                      nths (weave A xs ys) (- A) = ys", "case False"], ["proof (state)\nthis:\n  l \\<notin> A\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>xs ys.\n                \\<lbrakk>l = length xs + length ys;\n                 length xs = card {a \\<in> A. a < length xs + length ys};\n                 length ys =\n                 card {a \\<in> - A. a < length xs + length ys}\\<rbrakk>\n                \\<Longrightarrow> nths (weave A xs ys) A = xs \\<and>\n                                  nths (weave A xs ys) (- A) = ys;\n     Suc l = length xs + length ys;\n     length xs = card {a \\<in> A. a < length xs + length ys};\n     length ys = card {a \\<in> - A. a < length xs + length ys};\n     l \\<notin> A\\<rbrakk>\n    \\<Longrightarrow> nths (weave A xs ys) A = xs \\<and>\n                      nths (weave A xs ys) (- A) = ys", "then"], ["proof (chain)\npicking this:\n  l \\<notin> A", "have \"l\\<notin>{a \\<in> A. a < length xs + length ys}\""], ["proof (prove)\nusing this:\n  l \\<notin> A\n\ngoal (1 subgoal):\n 1. l \\<notin> {a \\<in> A. a < length xs + length ys}", "using Suc.hyps mem_Collect_eq zero_less_Suc"], ["proof (prove)\nusing this:\n  l \\<notin> A\n  \\<lbrakk>l = length ?xs + length ?ys;\n   length ?xs = card {a \\<in> A. a < length ?xs + length ?ys};\n   length ?ys = card {a \\<in> - A. a < length ?xs + length ?ys}\\<rbrakk>\n  \\<Longrightarrow> nths (weave A ?xs ?ys) A = ?xs \\<and>\n                    nths (weave A ?xs ?ys) (- A) = ?ys\n  Suc l = length xs + length ys\n  (?a \\<in> Collect ?P) = ?P ?a\n  0 < Suc ?n\n\ngoal (1 subgoal):\n 1. l \\<notin> {a \\<in> A. a < length xs + length ys}", "by auto"], ["proof (state)\nthis:\n  l \\<notin> {a \\<in> A. a < length xs + length ys}\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>xs ys.\n                \\<lbrakk>l = length xs + length ys;\n                 length xs = card {a \\<in> A. a < length xs + length ys};\n                 length ys =\n                 card {a \\<in> - A. a < length xs + length ys}\\<rbrakk>\n                \\<Longrightarrow> nths (weave A xs ys) A = xs \\<and>\n                                  nths (weave A xs ys) (- A) = ys;\n     Suc l = length xs + length ys;\n     length xs = card {a \\<in> A. a < length xs + length ys};\n     length ys = card {a \\<in> - A. a < length xs + length ys};\n     l \\<notin> A\\<rbrakk>\n    \\<Longrightarrow> nths (weave A xs ys) A = xs \\<and>\n                      nths (weave A xs ys) (- A) = ys", "then"], ["proof (chain)\npicking this:\n  l \\<notin> {a \\<in> A. a < length xs + length ys}", "have \"length ys > 0\""], ["proof (prove)\nusing this:\n  l \\<notin> {a \\<in> A. a < length xs + length ys}\n\ngoal (1 subgoal):\n 1. 0 < length ys", "using Suc"], ["proof (prove)\nusing this:\n  l \\<notin> {a \\<in> A. a < length xs + length ys}\n  \\<lbrakk>l = length ?xs + length ?ys;\n   length ?xs = card {a \\<in> A. a < length ?xs + length ?ys};\n   length ?ys = card {a \\<in> - A. a < length ?xs + length ?ys}\\<rbrakk>\n  \\<Longrightarrow> nths (weave A ?xs ?ys) A = ?xs \\<and>\n                    nths (weave A ?xs ?ys) (- A) = ?ys\n  Suc l = length xs + length ys\n  length xs = card {a \\<in> A. a < length xs + length ys}\n  length ys = card {a \\<in> - A. a < length xs + length ys}\n\ngoal (1 subgoal):\n 1. 0 < length ys", "by fastforce"], ["proof (state)\nthis:\n  0 < length ys\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>xs ys.\n                \\<lbrakk>l = length xs + length ys;\n                 length xs = card {a \\<in> A. a < length xs + length ys};\n                 length ys =\n                 card {a \\<in> - A. a < length xs + length ys}\\<rbrakk>\n                \\<Longrightarrow> nths (weave A xs ys) A = xs \\<and>\n                                  nths (weave A xs ys) (- A) = ys;\n     Suc l = length xs + length ys;\n     length xs = card {a \\<in> A. a < length xs + length ys};\n     length ys = card {a \\<in> - A. a < length xs + length ys};\n     l \\<notin> A\\<rbrakk>\n    \\<Longrightarrow> nths (weave A xs ys) A = xs \\<and>\n                      nths (weave A xs ys) (- A) = ys", "then"], ["proof (chain)\npicking this:\n  0 < length ys", "obtain ys' y where \"ys = ys' @ [y]\""], ["proof (prove)\nusing this:\n  0 < length ys\n\ngoal (1 subgoal):\n 1. (\\<And>ys' y. ys = ys' @ [y] \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis append_butlast_last_id length_greater_0_conv)"], ["proof (state)\nthis:\n  ys = ys' @ [y]\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>xs ys.\n                \\<lbrakk>l = length xs + length ys;\n                 length xs = card {a \\<in> A. a < length xs + length ys};\n                 length ys =\n                 card {a \\<in> - A. a < length xs + length ys}\\<rbrakk>\n                \\<Longrightarrow> nths (weave A xs ys) A = xs \\<and>\n                                  nths (weave A xs ys) (- A) = ys;\n     Suc l = length xs + length ys;\n     length xs = card {a \\<in> A. a < length xs + length ys};\n     length ys = card {a \\<in> - A. a < length xs + length ys};\n     l \\<notin> A\\<rbrakk>\n    \\<Longrightarrow> nths (weave A xs ys) A = xs \\<and>\n                      nths (weave A xs ys) (- A) = ys", "then"], ["proof (chain)\npicking this:\n  ys = ys' @ [y]", "have \"l = length xs + length ys'\""], ["proof (prove)\nusing this:\n  ys = ys' @ [y]\n\ngoal (1 subgoal):\n 1. l = length xs + length ys'", "using Suc.hyps"], ["proof (prove)\nusing this:\n  ys = ys' @ [y]\n  \\<lbrakk>l = length ?xs + length ?ys;\n   length ?xs = card {a \\<in> A. a < length ?xs + length ?ys};\n   length ?ys = card {a \\<in> - A. a < length ?xs + length ?ys}\\<rbrakk>\n  \\<Longrightarrow> nths (weave A ?xs ?ys) A = ?xs \\<and>\n                    nths (weave A ?xs ?ys) (- A) = ?ys\n  Suc l = length xs + length ys\n\ngoal (1 subgoal):\n 1. l = length xs + length ys'", "by simp"], ["proof (state)\nthis:\n  l = length xs + length ys'\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>xs ys.\n                \\<lbrakk>l = length xs + length ys;\n                 length xs = card {a \\<in> A. a < length xs + length ys};\n                 length ys =\n                 card {a \\<in> - A. a < length xs + length ys}\\<rbrakk>\n                \\<Longrightarrow> nths (weave A xs ys) A = xs \\<and>\n                                  nths (weave A xs ys) (- A) = ys;\n     Suc l = length xs + length ys;\n     length xs = card {a \\<in> A. a < length xs + length ys};\n     length ys = card {a \\<in> - A. a < length xs + length ys};\n     l \\<notin> A\\<rbrakk>\n    \\<Longrightarrow> nths (weave A xs ys) A = xs \\<and>\n                      nths (weave A xs ys) (- A) = ys", "have length_ys':\"length ys' = card {a \\<in> -A. a < length xs + length ys'}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length ys' = card {a \\<in> - A. a < length xs + length ys'}", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. length ys' = card {a \\<in> - A. a < length xs + length ys'}", "have \"{a \\<in> -A. a < length xs + length ys} = {a \\<in> -A. a < length xs + length ys'} \\<union> {l}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {a \\<in> - A. a < length xs + length ys} =\n    {a \\<in> - A. a < length xs + length ys'} \\<union> {l}", "using \\<open>ys = ys' @ [y]\\<close> \\<open>l\\<notin>{a \\<in> A. a < length xs + length ys}\\<close> \\<open>l = length xs + length ys'\\<close>"], ["proof (prove)\nusing this:\n  ys = ys' @ [y]\n  l \\<notin> {a \\<in> A. a < length xs + length ys}\n  l = length xs + length ys'\n\ngoal (1 subgoal):\n 1. {a \\<in> - A. a < length xs + length ys} =\n    {a \\<in> - A. a < length xs + length ys'} \\<union> {l}", "by force"], ["proof (state)\nthis:\n  {a \\<in> - A. a < length xs + length ys} =\n  {a \\<in> - A. a < length xs + length ys'} \\<union> {l}\n\ngoal (1 subgoal):\n 1. length ys' = card {a \\<in> - A. a < length xs + length ys'}", "then"], ["proof (chain)\npicking this:\n  {a \\<in> - A. a < length xs + length ys} =\n  {a \\<in> - A. a < length xs + length ys'} \\<union> {l}", "have \"card {a \\<in> -A. a < length xs + length ys} = card {a \\<in> -A. a < length xs + length ys'} + 1\""], ["proof (prove)\nusing this:\n  {a \\<in> - A. a < length xs + length ys} =\n  {a \\<in> - A. a < length xs + length ys'} \\<union> {l}\n\ngoal (1 subgoal):\n 1. card {a \\<in> - A. a < length xs + length ys} =\n    card {a \\<in> - A. a < length xs + length ys'} + 1", "using \\<open>l = length xs + length ys'\\<close>"], ["proof (prove)\nusing this:\n  {a \\<in> - A. a < length xs + length ys} =\n  {a \\<in> - A. a < length xs + length ys'} \\<union> {l}\n  l = length xs + length ys'\n\ngoal (1 subgoal):\n 1. card {a \\<in> - A. a < length xs + length ys} =\n    card {a \\<in> - A. a < length xs + length ys'} + 1", "by fastforce"], ["proof (state)\nthis:\n  card {a \\<in> - A. a < length xs + length ys} =\n  card {a \\<in> - A. a < length xs + length ys'} + 1\n\ngoal (1 subgoal):\n 1. length ys' = card {a \\<in> - A. a < length xs + length ys'}", "then"], ["proof (chain)\npicking this:\n  card {a \\<in> - A. a < length xs + length ys} =\n  card {a \\<in> - A. a < length xs + length ys'} + 1", "show ?thesis"], ["proof (prove)\nusing this:\n  card {a \\<in> - A. a < length xs + length ys} =\n  card {a \\<in> - A. a < length xs + length ys'} + 1\n\ngoal (1 subgoal):\n 1. length ys' = card {a \\<in> - A. a < length xs + length ys'}", "by (metis One_nat_def Suc.prems(2) \\<open>ys = ys' @ [y]\\<close> add_right_imp_eq\n        length_Cons length_append list.size(3))"], ["proof (state)\nthis:\n  length ys' = card {a \\<in> - A. a < length xs + length ys'}\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  length ys' = card {a \\<in> - A. a < length xs + length ys'}\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>xs ys.\n                \\<lbrakk>l = length xs + length ys;\n                 length xs = card {a \\<in> A. a < length xs + length ys};\n                 length ys =\n                 card {a \\<in> - A. a < length xs + length ys}\\<rbrakk>\n                \\<Longrightarrow> nths (weave A xs ys) A = xs \\<and>\n                                  nths (weave A xs ys) (- A) = ys;\n     Suc l = length xs + length ys;\n     length xs = card {a \\<in> A. a < length xs + length ys};\n     length ys = card {a \\<in> - A. a < length xs + length ys};\n     l \\<notin> A\\<rbrakk>\n    \\<Longrightarrow> nths (weave A xs ys) A = xs \\<and>\n                      nths (weave A xs ys) (- A) = ys", "have length_xs:\"length xs = card {a \\<in> A. a < length xs + length ys'}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length xs = card {a \\<in> A. a < length xs + length ys'}", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. length xs = card {a \\<in> A. a < length xs + length ys'}", "have \"l\\<notin>{a \\<in> A. a < length xs + length ys}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. l \\<notin> {a \\<in> A. a < length xs + length ys}", "using \\<open>l\\<notin>A\\<close> \\<open>l = length xs + length ys'\\<close>"], ["proof (prove)\nusing this:\n  l \\<notin> A\n  l = length xs + length ys'\n\ngoal (1 subgoal):\n 1. l \\<notin> {a \\<in> A. a < length xs + length ys}", "by blast"], ["proof (state)\nthis:\n  l \\<notin> {a \\<in> A. a < length xs + length ys}\n\ngoal (1 subgoal):\n 1. length xs = card {a \\<in> A. a < length xs + length ys'}", "have \"{a \\<in> A. a < length xs + length ys} = {a \\<in> A. a < length xs + length ys'}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {a \\<in> A. a < length xs + length ys} =\n    {a \\<in> A. a < length xs + length ys'}", "apply (rule subset_antisym)"], ["proof (prove)\ngoal (2 subgoals):\n 1. {a \\<in> A. a < length xs + length ys}\n    \\<subseteq> {a \\<in> A. a < length xs + length ys'}\n 2. {a \\<in> A. a < length xs + length ys'}\n    \\<subseteq> {a \\<in> A. a < length xs + length ys}", "using  \\<open>l = length xs + length ys'\\<close> \\<open>Suc l = length xs + length ys\\<close> \\<open>l\\<notin>{a \\<in> A. a < length xs + length ys}\\<close>"], ["proof (prove)\nusing this:\n  l = length xs + length ys'\n  Suc l = length xs + length ys\n  l \\<notin> {a \\<in> A. a < length xs + length ys}\n\ngoal (2 subgoals):\n 1. {a \\<in> A. a < length xs + length ys}\n    \\<subseteq> {a \\<in> A. a < length xs + length ys'}\n 2. {a \\<in> A. a < length xs + length ys'}\n    \\<subseteq> {a \\<in> A. a < length xs + length ys}", "apply (metis (no_types, lifting) Collect_mono less_Suc_eq mem_Collect_eq)"], ["proof (prove)\ngoal (1 subgoal):\n 1. {a \\<in> A. a < length xs + length ys'}\n    \\<subseteq> {a \\<in> A. a < length xs + length ys}", "using Collect_mono Suc.hyps(2) \\<open>l = length xs + length ys'\\<close>"], ["proof (prove)\nusing this:\n  (\\<And>x. ?P x \\<longrightarrow> ?Q x) \\<Longrightarrow>\n  Collect ?P \\<subseteq> Collect ?Q\n  Suc l = length xs + length ys\n  l = length xs + length ys'\n\ngoal (1 subgoal):\n 1. {a \\<in> A. a < length xs + length ys'}\n    \\<subseteq> {a \\<in> A. a < length xs + length ys}", "by auto"], ["proof (state)\nthis:\n  {a \\<in> A. a < length xs + length ys} =\n  {a \\<in> A. a < length xs + length ys'}\n\ngoal (1 subgoal):\n 1. length xs = card {a \\<in> A. a < length xs + length ys'}", "then"], ["proof (chain)\npicking this:\n  {a \\<in> A. a < length xs + length ys} =\n  {a \\<in> A. a < length xs + length ys'}", "show ?thesis"], ["proof (prove)\nusing this:\n  {a \\<in> A. a < length xs + length ys} =\n  {a \\<in> A. a < length xs + length ys'}\n\ngoal (1 subgoal):\n 1. length xs = card {a \\<in> A. a < length xs + length ys'}", "using Suc.prems(1)"], ["proof (prove)\nusing this:\n  {a \\<in> A. a < length xs + length ys} =\n  {a \\<in> A. a < length xs + length ys'}\n  length xs = card {a \\<in> A. a < length xs + length ys}\n\ngoal (1 subgoal):\n 1. length xs = card {a \\<in> A. a < length xs + length ys'}", "by auto"], ["proof (state)\nthis:\n  length xs = card {a \\<in> A. a < length xs + length ys'}\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  length xs = card {a \\<in> A. a < length xs + length ys'}\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>xs ys.\n                \\<lbrakk>l = length xs + length ys;\n                 length xs = card {a \\<in> A. a < length xs + length ys};\n                 length ys =\n                 card {a \\<in> - A. a < length xs + length ys}\\<rbrakk>\n                \\<Longrightarrow> nths (weave A xs ys) A = xs \\<and>\n                                  nths (weave A xs ys) (- A) = ys;\n     Suc l = length xs + length ys;\n     length xs = card {a \\<in> A. a < length xs + length ys};\n     length ys = card {a \\<in> - A. a < length xs + length ys};\n     l \\<notin> A\\<rbrakk>\n    \\<Longrightarrow> nths (weave A xs ys) A = xs \\<and>\n                      nths (weave A xs ys) (- A) = ys", "have \"length xs + length ys' \\<notin> A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length xs + length ys' \\<notin> A", "using \\<open>l\\<notin>A\\<close> \\<open>l = length xs + length ys'\\<close>"], ["proof (prove)\nusing this:\n  l \\<notin> A\n  l = length xs + length ys'\n\ngoal (1 subgoal):\n 1. length xs + length ys' \\<notin> A", "by blast"], ["proof (state)\nthis:\n  length xs + length ys' \\<notin> A\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>xs ys.\n                \\<lbrakk>l = length xs + length ys;\n                 length xs = card {a \\<in> A. a < length xs + length ys};\n                 length ys =\n                 card {a \\<in> - A. a < length xs + length ys}\\<rbrakk>\n                \\<Longrightarrow> nths (weave A xs ys) A = xs \\<and>\n                                  nths (weave A xs ys) (- A) = ys;\n     Suc l = length xs + length ys;\n     length xs = card {a \\<in> A. a < length xs + length ys};\n     length ys = card {a \\<in> - A. a < length xs + length ys};\n     l \\<notin> A\\<rbrakk>\n    \\<Longrightarrow> nths (weave A xs ys) A = xs \\<and>\n                      nths (weave A xs ys) (- A) = ys", "then"], ["proof (chain)\npicking this:\n  length xs + length ys' \\<notin> A", "have \"nths (weave A xs ys) A = nths (weave A xs ys' @ [y]) A\""], ["proof (prove)\nusing this:\n  length xs + length ys' \\<notin> A\n\ngoal (1 subgoal):\n 1. nths (weave A xs ys) A = nths (weave A xs ys' @ [y]) A", "unfolding\n       \\<open>ys = ys' @ [y]\\<close>"], ["proof (prove)\nusing this:\n  length xs + length ys' \\<notin> A\n\ngoal (1 subgoal):\n 1. nths (weave A xs (ys' @ [y])) A = nths (weave A xs ys' @ [y]) A", "using weave_append2[OF \\<open>length xs + length ys' \\<notin> A\\<close> length_ys']"], ["proof (prove)\nusing this:\n  length xs + length ys' \\<notin> A\n  weave A xs (ys' @ [?y]) = weave A xs ys' @ [?y]\n\ngoal (1 subgoal):\n 1. nths (weave A xs (ys' @ [y])) A = nths (weave A xs ys' @ [y]) A", "by metis"], ["proof (state)\nthis:\n  nths (weave A xs ys) A = nths (weave A xs ys' @ [y]) A\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>xs ys.\n                \\<lbrakk>l = length xs + length ys;\n                 length xs = card {a \\<in> A. a < length xs + length ys};\n                 length ys =\n                 card {a \\<in> - A. a < length xs + length ys}\\<rbrakk>\n                \\<Longrightarrow> nths (weave A xs ys) A = xs \\<and>\n                                  nths (weave A xs ys) (- A) = ys;\n     Suc l = length xs + length ys;\n     length xs = card {a \\<in> A. a < length xs + length ys};\n     length ys = card {a \\<in> - A. a < length xs + length ys};\n     l \\<notin> A\\<rbrakk>\n    \\<Longrightarrow> nths (weave A xs ys) A = xs \\<and>\n                      nths (weave A xs ys) (- A) = ys", "also"], ["proof (state)\nthis:\n  nths (weave A xs ys) A = nths (weave A xs ys' @ [y]) A\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>xs ys.\n                \\<lbrakk>l = length xs + length ys;\n                 length xs = card {a \\<in> A. a < length xs + length ys};\n                 length ys =\n                 card {a \\<in> - A. a < length xs + length ys}\\<rbrakk>\n                \\<Longrightarrow> nths (weave A xs ys) A = xs \\<and>\n                                  nths (weave A xs ys) (- A) = ys;\n     Suc l = length xs + length ys;\n     length xs = card {a \\<in> A. a < length xs + length ys};\n     length ys = card {a \\<in> - A. a < length xs + length ys};\n     l \\<notin> A\\<rbrakk>\n    \\<Longrightarrow> nths (weave A xs ys) A = xs \\<and>\n                      nths (weave A xs ys) (- A) = ys", "have \"... = nths (weave A xs ys') A @ nths [y] {a. a + (length xs + length ys') \\<in> A}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. nths (weave A xs ys' @ [y]) A =\n    nths (weave A xs ys') A @\n    nths [y] {a. a + (length xs + length ys') \\<in> A}", "using nths_append length_weave"], ["proof (prove)\nusing this:\n  nths (?l @ ?l') ?A = nths ?l ?A @ nths ?l' {j. j + length ?l \\<in> ?A}\n  length (weave ?A ?xs ?ys) = length ?xs + length ?ys\n\ngoal (1 subgoal):\n 1. nths (weave A xs ys' @ [y]) A =\n    nths (weave A xs ys') A @\n    nths [y] {a. a + (length xs + length ys') \\<in> A}", "by metis"], ["proof (state)\nthis:\n  nths (weave A xs ys' @ [y]) A =\n  nths (weave A xs ys') A @\n  nths [y] {a. a + (length xs + length ys') \\<in> A}\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>xs ys.\n                \\<lbrakk>l = length xs + length ys;\n                 length xs = card {a \\<in> A. a < length xs + length ys};\n                 length ys =\n                 card {a \\<in> - A. a < length xs + length ys}\\<rbrakk>\n                \\<Longrightarrow> nths (weave A xs ys) A = xs \\<and>\n                                  nths (weave A xs ys) (- A) = ys;\n     Suc l = length xs + length ys;\n     length xs = card {a \\<in> A. a < length xs + length ys};\n     length ys = card {a \\<in> - A. a < length xs + length ys};\n     l \\<notin> A\\<rbrakk>\n    \\<Longrightarrow> nths (weave A xs ys) A = xs \\<and>\n                      nths (weave A xs ys) (- A) = ys", "also"], ["proof (state)\nthis:\n  nths (weave A xs ys' @ [y]) A =\n  nths (weave A xs ys') A @\n  nths [y] {a. a + (length xs + length ys') \\<in> A}\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>xs ys.\n                \\<lbrakk>l = length xs + length ys;\n                 length xs = card {a \\<in> A. a < length xs + length ys};\n                 length ys =\n                 card {a \\<in> - A. a < length xs + length ys}\\<rbrakk>\n                \\<Longrightarrow> nths (weave A xs ys) A = xs \\<and>\n                                  nths (weave A xs ys) (- A) = ys;\n     Suc l = length xs + length ys;\n     length xs = card {a \\<in> A. a < length xs + length ys};\n     length ys = card {a \\<in> - A. a < length xs + length ys};\n     l \\<notin> A\\<rbrakk>\n    \\<Longrightarrow> nths (weave A xs ys) A = xs \\<and>\n                      nths (weave A xs ys) (- A) = ys", "have \"... = nths (weave A xs ys') A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. nths (weave A xs ys') A @\n    nths [y] {a. a + (length xs + length ys') \\<in> A} =\n    nths (weave A xs ys') A", "using nths_singleton \\<open>length xs + length ys' \\<notin> A\\<close>"], ["proof (prove)\nusing this:\n  nths [?x] ?A = (if 0 \\<in> ?A then [?x] else [])\n  length xs + length ys' \\<notin> A\n\ngoal (1 subgoal):\n 1. nths (weave A xs ys') A @\n    nths [y] {a. a + (length xs + length ys') \\<in> A} =\n    nths (weave A xs ys') A", "by auto"], ["proof (state)\nthis:\n  nths (weave A xs ys') A @\n  nths [y] {a. a + (length xs + length ys') \\<in> A} =\n  nths (weave A xs ys') A\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>xs ys.\n                \\<lbrakk>l = length xs + length ys;\n                 length xs = card {a \\<in> A. a < length xs + length ys};\n                 length ys =\n                 card {a \\<in> - A. a < length xs + length ys}\\<rbrakk>\n                \\<Longrightarrow> nths (weave A xs ys) A = xs \\<and>\n                                  nths (weave A xs ys) (- A) = ys;\n     Suc l = length xs + length ys;\n     length xs = card {a \\<in> A. a < length xs + length ys};\n     length ys = card {a \\<in> - A. a < length xs + length ys};\n     l \\<notin> A\\<rbrakk>\n    \\<Longrightarrow> nths (weave A xs ys) A = xs \\<and>\n                      nths (weave A xs ys) (- A) = ys", "also"], ["proof (state)\nthis:\n  nths (weave A xs ys') A @\n  nths [y] {a. a + (length xs + length ys') \\<in> A} =\n  nths (weave A xs ys') A\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>xs ys.\n                \\<lbrakk>l = length xs + length ys;\n                 length xs = card {a \\<in> A. a < length xs + length ys};\n                 length ys =\n                 card {a \\<in> - A. a < length xs + length ys}\\<rbrakk>\n                \\<Longrightarrow> nths (weave A xs ys) A = xs \\<and>\n                                  nths (weave A xs ys) (- A) = ys;\n     Suc l = length xs + length ys;\n     length xs = card {a \\<in> A. a < length xs + length ys};\n     length ys = card {a \\<in> - A. a < length xs + length ys};\n     l \\<notin> A\\<rbrakk>\n    \\<Longrightarrow> nths (weave A xs ys) A = xs \\<and>\n                      nths (weave A xs ys) (- A) = ys", "have \"... = xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. nths (weave A xs ys') A = xs", "using Suc.hyps(1)[OF \\<open>l = length xs + length ys'\\<close> length_xs length_ys']"], ["proof (prove)\nusing this:\n  nths (weave A xs ys') A = xs \\<and> nths (weave A xs ys') (- A) = ys'\n\ngoal (1 subgoal):\n 1. nths (weave A xs ys') A = xs", "by auto"], ["proof (state)\nthis:\n  nths (weave A xs ys') A = xs\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>xs ys.\n                \\<lbrakk>l = length xs + length ys;\n                 length xs = card {a \\<in> A. a < length xs + length ys};\n                 length ys =\n                 card {a \\<in> - A. a < length xs + length ys}\\<rbrakk>\n                \\<Longrightarrow> nths (weave A xs ys) A = xs \\<and>\n                                  nths (weave A xs ys) (- A) = ys;\n     Suc l = length xs + length ys;\n     length xs = card {a \\<in> A. a < length xs + length ys};\n     length ys = card {a \\<in> - A. a < length xs + length ys};\n     l \\<notin> A\\<rbrakk>\n    \\<Longrightarrow> nths (weave A xs ys) A = xs \\<and>\n                      nths (weave A xs ys) (- A) = ys", "finally"], ["proof (chain)\npicking this:\n  nths (weave A xs ys) A = xs", "have \"nths (weave A xs ys) A = xs\""], ["proof (prove)\nusing this:\n  nths (weave A xs ys) A = xs\n\ngoal (1 subgoal):\n 1. nths (weave A xs ys) A = xs", "by auto"], ["proof (state)\nthis:\n  nths (weave A xs ys) A = xs\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>xs ys.\n                \\<lbrakk>l = length xs + length ys;\n                 length xs = card {a \\<in> A. a < length xs + length ys};\n                 length ys =\n                 card {a \\<in> - A. a < length xs + length ys}\\<rbrakk>\n                \\<Longrightarrow> nths (weave A xs ys) A = xs \\<and>\n                                  nths (weave A xs ys) (- A) = ys;\n     Suc l = length xs + length ys;\n     length xs = card {a \\<in> A. a < length xs + length ys};\n     length ys = card {a \\<in> - A. a < length xs + length ys};\n     l \\<notin> A\\<rbrakk>\n    \\<Longrightarrow> nths (weave A xs ys) A = xs \\<and>\n                      nths (weave A xs ys) (- A) = ys", "have \"nths (weave A xs ys) (-A) = nths (weave A xs ys' @ [y]) (-A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. nths (weave A xs ys) (- A) = nths (weave A xs ys' @ [y]) (- A)", "unfolding\n       \\<open>ys = ys' @ [y]\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. nths (weave A xs (ys' @ [y])) (- A) = nths (weave A xs ys' @ [y]) (- A)", "using weave_append2[OF \\<open>length xs + length ys' \\<notin> A\\<close> length_ys']"], ["proof (prove)\nusing this:\n  weave A xs (ys' @ [?y]) = weave A xs ys' @ [?y]\n\ngoal (1 subgoal):\n 1. nths (weave A xs (ys' @ [y])) (- A) = nths (weave A xs ys' @ [y]) (- A)", "by metis"], ["proof (state)\nthis:\n  nths (weave A xs ys) (- A) = nths (weave A xs ys' @ [y]) (- A)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>xs ys.\n                \\<lbrakk>l = length xs + length ys;\n                 length xs = card {a \\<in> A. a < length xs + length ys};\n                 length ys =\n                 card {a \\<in> - A. a < length xs + length ys}\\<rbrakk>\n                \\<Longrightarrow> nths (weave A xs ys) A = xs \\<and>\n                                  nths (weave A xs ys) (- A) = ys;\n     Suc l = length xs + length ys;\n     length xs = card {a \\<in> A. a < length xs + length ys};\n     length ys = card {a \\<in> - A. a < length xs + length ys};\n     l \\<notin> A\\<rbrakk>\n    \\<Longrightarrow> nths (weave A xs ys) A = xs \\<and>\n                      nths (weave A xs ys) (- A) = ys", "also"], ["proof (state)\nthis:\n  nths (weave A xs ys) (- A) = nths (weave A xs ys' @ [y]) (- A)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>xs ys.\n                \\<lbrakk>l = length xs + length ys;\n                 length xs = card {a \\<in> A. a < length xs + length ys};\n                 length ys =\n                 card {a \\<in> - A. a < length xs + length ys}\\<rbrakk>\n                \\<Longrightarrow> nths (weave A xs ys) A = xs \\<and>\n                                  nths (weave A xs ys) (- A) = ys;\n     Suc l = length xs + length ys;\n     length xs = card {a \\<in> A. a < length xs + length ys};\n     length ys = card {a \\<in> - A. a < length xs + length ys};\n     l \\<notin> A\\<rbrakk>\n    \\<Longrightarrow> nths (weave A xs ys) A = xs \\<and>\n                      nths (weave A xs ys) (- A) = ys", "have \"... = nths (weave A xs ys') (-A) @ nths [y] {a. a + (length xs + length ys') \\<in> (-A)}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. nths (weave A xs ys' @ [y]) (- A) =\n    nths (weave A xs ys') (- A) @\n    nths [y] {a. a + (length xs + length ys') \\<in> - A}", "using nths_append length_weave"], ["proof (prove)\nusing this:\n  nths (?l @ ?l') ?A = nths ?l ?A @ nths ?l' {j. j + length ?l \\<in> ?A}\n  length (weave ?A ?xs ?ys) = length ?xs + length ?ys\n\ngoal (1 subgoal):\n 1. nths (weave A xs ys' @ [y]) (- A) =\n    nths (weave A xs ys') (- A) @\n    nths [y] {a. a + (length xs + length ys') \\<in> - A}", "by metis"], ["proof (state)\nthis:\n  nths (weave A xs ys' @ [y]) (- A) =\n  nths (weave A xs ys') (- A) @\n  nths [y] {a. a + (length xs + length ys') \\<in> - A}\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>xs ys.\n                \\<lbrakk>l = length xs + length ys;\n                 length xs = card {a \\<in> A. a < length xs + length ys};\n                 length ys =\n                 card {a \\<in> - A. a < length xs + length ys}\\<rbrakk>\n                \\<Longrightarrow> nths (weave A xs ys) A = xs \\<and>\n                                  nths (weave A xs ys) (- A) = ys;\n     Suc l = length xs + length ys;\n     length xs = card {a \\<in> A. a < length xs + length ys};\n     length ys = card {a \\<in> - A. a < length xs + length ys};\n     l \\<notin> A\\<rbrakk>\n    \\<Longrightarrow> nths (weave A xs ys) A = xs \\<and>\n                      nths (weave A xs ys) (- A) = ys", "also"], ["proof (state)\nthis:\n  nths (weave A xs ys' @ [y]) (- A) =\n  nths (weave A xs ys') (- A) @\n  nths [y] {a. a + (length xs + length ys') \\<in> - A}\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>xs ys.\n                \\<lbrakk>l = length xs + length ys;\n                 length xs = card {a \\<in> A. a < length xs + length ys};\n                 length ys =\n                 card {a \\<in> - A. a < length xs + length ys}\\<rbrakk>\n                \\<Longrightarrow> nths (weave A xs ys) A = xs \\<and>\n                                  nths (weave A xs ys) (- A) = ys;\n     Suc l = length xs + length ys;\n     length xs = card {a \\<in> A. a < length xs + length ys};\n     length ys = card {a \\<in> - A. a < length xs + length ys};\n     l \\<notin> A\\<rbrakk>\n    \\<Longrightarrow> nths (weave A xs ys) A = xs \\<and>\n                      nths (weave A xs ys) (- A) = ys", "have \"... = nths (weave A xs ys') (-A) @ [y]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. nths (weave A xs ys') (- A) @\n    nths [y] {a. a + (length xs + length ys') \\<in> - A} =\n    nths (weave A xs ys') (- A) @ [y]", "using nths_singleton \\<open>length xs + length ys' \\<notin> A\\<close>"], ["proof (prove)\nusing this:\n  nths [?x] ?A = (if 0 \\<in> ?A then [?x] else [])\n  length xs + length ys' \\<notin> A\n\ngoal (1 subgoal):\n 1. nths (weave A xs ys') (- A) @\n    nths [y] {a. a + (length xs + length ys') \\<in> - A} =\n    nths (weave A xs ys') (- A) @ [y]", "by auto"], ["proof (state)\nthis:\n  nths (weave A xs ys') (- A) @\n  nths [y] {a. a + (length xs + length ys') \\<in> - A} =\n  nths (weave A xs ys') (- A) @ [y]\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>xs ys.\n                \\<lbrakk>l = length xs + length ys;\n                 length xs = card {a \\<in> A. a < length xs + length ys};\n                 length ys =\n                 card {a \\<in> - A. a < length xs + length ys}\\<rbrakk>\n                \\<Longrightarrow> nths (weave A xs ys) A = xs \\<and>\n                                  nths (weave A xs ys) (- A) = ys;\n     Suc l = length xs + length ys;\n     length xs = card {a \\<in> A. a < length xs + length ys};\n     length ys = card {a \\<in> - A. a < length xs + length ys};\n     l \\<notin> A\\<rbrakk>\n    \\<Longrightarrow> nths (weave A xs ys) A = xs \\<and>\n                      nths (weave A xs ys) (- A) = ys", "also"], ["proof (state)\nthis:\n  nths (weave A xs ys') (- A) @\n  nths [y] {a. a + (length xs + length ys') \\<in> - A} =\n  nths (weave A xs ys') (- A) @ [y]\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>xs ys.\n                \\<lbrakk>l = length xs + length ys;\n                 length xs = card {a \\<in> A. a < length xs + length ys};\n                 length ys =\n                 card {a \\<in> - A. a < length xs + length ys}\\<rbrakk>\n                \\<Longrightarrow> nths (weave A xs ys) A = xs \\<and>\n                                  nths (weave A xs ys) (- A) = ys;\n     Suc l = length xs + length ys;\n     length xs = card {a \\<in> A. a < length xs + length ys};\n     length ys = card {a \\<in> - A. a < length xs + length ys};\n     l \\<notin> A\\<rbrakk>\n    \\<Longrightarrow> nths (weave A xs ys) A = xs \\<and>\n                      nths (weave A xs ys) (- A) = ys", "have \"... = ys\""], ["proof (prove)\ngoal (1 subgoal):\n 1. nths (weave A xs ys') (- A) @ [y] = ys", "using Suc.hyps(1)[OF \\<open>l = length xs + length ys'\\<close> length_xs length_ys'] \\<open>ys = ys' @ [y]\\<close>"], ["proof (prove)\nusing this:\n  nths (weave A xs ys') A = xs \\<and> nths (weave A xs ys') (- A) = ys'\n  ys = ys' @ [y]\n\ngoal (1 subgoal):\n 1. nths (weave A xs ys') (- A) @ [y] = ys", "by simp"], ["proof (state)\nthis:\n  nths (weave A xs ys') (- A) @ [y] = ys\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>xs ys.\n                \\<lbrakk>l = length xs + length ys;\n                 length xs = card {a \\<in> A. a < length xs + length ys};\n                 length ys =\n                 card {a \\<in> - A. a < length xs + length ys}\\<rbrakk>\n                \\<Longrightarrow> nths (weave A xs ys) A = xs \\<and>\n                                  nths (weave A xs ys) (- A) = ys;\n     Suc l = length xs + length ys;\n     length xs = card {a \\<in> A. a < length xs + length ys};\n     length ys = card {a \\<in> - A. a < length xs + length ys};\n     l \\<notin> A\\<rbrakk>\n    \\<Longrightarrow> nths (weave A xs ys) A = xs \\<and>\n                      nths (weave A xs ys) (- A) = ys", "finally"], ["proof (chain)\npicking this:\n  nths (weave A xs ys) (- A) = ys", "show ?thesis"], ["proof (prove)\nusing this:\n  nths (weave A xs ys) (- A) = ys\n\ngoal (1 subgoal):\n 1. nths (weave A xs ys) A = xs \\<and> nths (weave A xs ys) (- A) = ys", "using \\<open>nths (weave A xs ys) A = xs\\<close>"], ["proof (prove)\nusing this:\n  nths (weave A xs ys) (- A) = ys\n  nths (weave A xs ys) A = xs\n\ngoal (1 subgoal):\n 1. nths (weave A xs ys) A = xs \\<and> nths (weave A xs ys) (- A) = ys", "by auto"], ["proof (state)\nthis:\n  nths (weave A xs ys) A = xs \\<and> nths (weave A xs ys) (- A) = ys\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  nths (weave A xs ys) A = xs \\<and> nths (weave A xs ys) (- A) = ys\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma set_weave:\nassumes \"length xs = card {a\\<in>A. a < length xs + length ys}\"\nassumes \"length ys = card {a\\<in>-A. a < length xs + length ys}\"\nshows \"set (weave A xs ys) = set xs \\<union> set ys\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set (weave A xs ys) = set xs \\<union> set ys", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. set (weave A xs ys) \\<subseteq> set xs \\<union> set ys\n 2. set xs \\<union> set ys \\<subseteq> set (weave A xs ys)", "show \"set (weave A xs ys) \\<subseteq> set xs \\<union> set ys\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set (weave A xs ys) \\<subseteq> set xs \\<union> set ys", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> set (weave A xs ys) \\<Longrightarrow>\n       x \\<in> set xs \\<union> set ys", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> set (weave A xs ys) \\<Longrightarrow>\n       x \\<in> set xs \\<union> set ys", "assume \"x\\<in>set (weave A xs ys)\""], ["proof (state)\nthis:\n  x \\<in> set (weave A xs ys)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> set (weave A xs ys) \\<Longrightarrow>\n       x \\<in> set xs \\<union> set ys", "then"], ["proof (chain)\npicking this:\n  x \\<in> set (weave A xs ys)", "obtain i where \"weave A xs ys ! i = x\" \"i<length (weave A xs ys)\""], ["proof (prove)\nusing this:\n  x \\<in> set (weave A xs ys)\n\ngoal (1 subgoal):\n 1. (\\<And>i.\n        \\<lbrakk>weave A xs ys ! i = x; i < length (weave A xs ys)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (meson in_set_conv_nth)"], ["proof (state)\nthis:\n  weave A xs ys ! i = x\n  i < length (weave A xs ys)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> set (weave A xs ys) \\<Longrightarrow>\n       x \\<in> set xs \\<union> set ys", "show \"x \\<in> set xs \\<union> set ys\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<in> set xs \\<union> set ys", "proof (cases \"i\\<in>A\")"], ["proof (state)\ngoal (2 subgoals):\n 1. i \\<in> A \\<Longrightarrow> x \\<in> set xs \\<union> set ys\n 2. i \\<notin> A \\<Longrightarrow> x \\<in> set xs \\<union> set ys", "case True"], ["proof (state)\nthis:\n  i \\<in> A\n\ngoal (2 subgoals):\n 1. i \\<in> A \\<Longrightarrow> x \\<in> set xs \\<union> set ys\n 2. i \\<notin> A \\<Longrightarrow> x \\<in> set xs \\<union> set ys", "then"], ["proof (chain)\npicking this:\n  i \\<in> A", "have \"i \\<in> {a\\<in>A. a < length xs + length ys}\""], ["proof (prove)\nusing this:\n  i \\<in> A\n\ngoal (1 subgoal):\n 1. i \\<in> {a \\<in> A. a < length xs + length ys}", "unfolding length_weave"], ["proof (prove)\nusing this:\n  i \\<in> A\n\ngoal (1 subgoal):\n 1. i \\<in> {a \\<in> A. a < length xs + length ys}", "by (metis \\<open>i < length (weave A xs ys)\\<close> length_weave mem_Collect_eq)"], ["proof (state)\nthis:\n  i \\<in> {a \\<in> A. a < length xs + length ys}\n\ngoal (2 subgoals):\n 1. i \\<in> A \\<Longrightarrow> x \\<in> set xs \\<union> set ys\n 2. i \\<notin> A \\<Longrightarrow> x \\<in> set xs \\<union> set ys", "then"], ["proof (chain)\npicking this:\n  i \\<in> {a \\<in> A. a < length xs + length ys}", "have \"{a \\<in> A. a < i} \\<subset> {a\\<in>A. a < length xs + length ys}\""], ["proof (prove)\nusing this:\n  i \\<in> {a \\<in> A. a < length xs + length ys}\n\ngoal (1 subgoal):\n 1. {a \\<in> A. a < i} \\<subset> {a \\<in> A. a < length xs + length ys}", "using Collect_mono \\<open>i < length (weave A xs ys)\\<close>[unfolded length_weave] le_Suc_ex  less_imp_le_nat trans_less_add1\n        le_neq_trans less_irrefl mem_Collect_eq"], ["proof (prove)\nusing this:\n  i \\<in> {a \\<in> A. a < length xs + length ys}\n  (\\<And>x. ?P x \\<longrightarrow> ?Q x) \\<Longrightarrow>\n  Collect ?P \\<subseteq> Collect ?Q\n  i < length xs + length ys\n  ?k \\<le> ?l \\<Longrightarrow> \\<exists>n. ?l = ?k + n\n  ?m < ?n \\<Longrightarrow> ?m \\<le> ?n\n  ?i < ?j \\<Longrightarrow> ?i < ?j + ?m\n  \\<lbrakk>?a \\<le> ?b; ?a \\<noteq> ?b\\<rbrakk> \\<Longrightarrow> ?a < ?b\n  \\<not> ?x < ?x\n  (?a \\<in> Collect ?P) = ?P ?a\n\ngoal (1 subgoal):\n 1. {a \\<in> A. a < i} \\<subset> {a \\<in> A. a < length xs + length ys}", "by auto"], ["proof (state)\nthis:\n  {a \\<in> A. a < i} \\<subset> {a \\<in> A. a < length xs + length ys}\n\ngoal (2 subgoals):\n 1. i \\<in> A \\<Longrightarrow> x \\<in> set xs \\<union> set ys\n 2. i \\<notin> A \\<Longrightarrow> x \\<in> set xs \\<union> set ys", "then"], ["proof (chain)\npicking this:\n  {a \\<in> A. a < i} \\<subset> {a \\<in> A. a < length xs + length ys}", "have \"card {a \\<in> A. a < i} < card {a\\<in>A. a < length xs + length ys}\""], ["proof (prove)\nusing this:\n  {a \\<in> A. a < i} \\<subset> {a \\<in> A. a < length xs + length ys}\n\ngoal (1 subgoal):\n 1. card {a \\<in> A. a < i} < card {a \\<in> A. a < length xs + length ys}", "by (simp add: psubset_card_mono)"], ["proof (state)\nthis:\n  card {a \\<in> A. a < i} < card {a \\<in> A. a < length xs + length ys}\n\ngoal (2 subgoals):\n 1. i \\<in> A \\<Longrightarrow> x \\<in> set xs \\<union> set ys\n 2. i \\<notin> A \\<Longrightarrow> x \\<in> set xs \\<union> set ys", "then"], ["proof (chain)\npicking this:\n  card {a \\<in> A. a < i} < card {a \\<in> A. a < length xs + length ys}", "show \"x \\<in> set xs \\<union> set ys\""], ["proof (prove)\nusing this:\n  card {a \\<in> A. a < i} < card {a \\<in> A. a < length xs + length ys}\n\ngoal (1 subgoal):\n 1. x \\<in> set xs \\<union> set ys", "unfolding nth_weave[OF \\<open>i<length (weave A xs ys)\\<close>, unfolded \\<open>weave A xs ys ! i = x\\<close>]"], ["proof (prove)\nusing this:\n  card {a \\<in> A. a < i} < card {a \\<in> A. a < length xs + length ys}\n\ngoal (1 subgoal):\n 1. (if i \\<in> A then xs ! card {a \\<in> A. a < i}\n     else ys ! card {a \\<in> - A. a < i})\n    \\<in> set xs \\<union> set ys", "using True"], ["proof (prove)\nusing this:\n  card {a \\<in> A. a < i} < card {a \\<in> A. a < length xs + length ys}\n  i \\<in> A\n\ngoal (1 subgoal):\n 1. (if i \\<in> A then xs ! card {a \\<in> A. a < i}\n     else ys ! card {a \\<in> - A. a < i})\n    \\<in> set xs \\<union> set ys", "using UnI1 assms(1) nth_mem"], ["proof (prove)\nusing this:\n  card {a \\<in> A. a < i} < card {a \\<in> A. a < length xs + length ys}\n  i \\<in> A\n  ?c \\<in> ?A \\<Longrightarrow> ?c \\<in> ?A \\<union> ?B\n  length xs = card {a \\<in> A. a < length xs + length ys}\n  ?n < length ?xs \\<Longrightarrow> ?xs ! ?n \\<in> set ?xs\n\ngoal (1 subgoal):\n 1. (if i \\<in> A then xs ! card {a \\<in> A. a < i}\n     else ys ! card {a \\<in> - A. a < i})\n    \\<in> set xs \\<union> set ys", "by auto"], ["proof (state)\nthis:\n  x \\<in> set xs \\<union> set ys\n\ngoal (1 subgoal):\n 1. i \\<notin> A \\<Longrightarrow> x \\<in> set xs \\<union> set ys", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. i \\<notin> A \\<Longrightarrow> x \\<in> set xs \\<union> set ys", "case False"], ["proof (state)\nthis:\n  i \\<notin> A\n\ngoal (1 subgoal):\n 1. i \\<notin> A \\<Longrightarrow> x \\<in> set xs \\<union> set ys", "have \"i\\<notin>A \\<Longrightarrow> i \\<in> {a\\<in>-A. a < length xs + length ys}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. i \\<notin> A \\<Longrightarrow>\n    i \\<in> {a \\<in> - A. a < length xs + length ys}", "unfolding length_weave"], ["proof (prove)\ngoal (1 subgoal):\n 1. i \\<notin> A \\<Longrightarrow>\n    i \\<in> {a \\<in> - A. a < length xs + length ys}", "by (metis ComplI \\<open>i < length (weave A xs ys)\\<close> length_weave mem_Collect_eq)"], ["proof (state)\nthis:\n  i \\<notin> A \\<Longrightarrow>\n  i \\<in> {a \\<in> - A. a < length xs + length ys}\n\ngoal (1 subgoal):\n 1. i \\<notin> A \\<Longrightarrow> x \\<in> set xs \\<union> set ys", "then"], ["proof (chain)\npicking this:\n  i \\<notin> A \\<Longrightarrow>\n  i \\<in> {a \\<in> - A. a < length xs + length ys}", "have \"{a \\<in> -A. a < i} \\<subset> {a\\<in>-A. a < length xs + length ys}\""], ["proof (prove)\nusing this:\n  i \\<notin> A \\<Longrightarrow>\n  i \\<in> {a \\<in> - A. a < length xs + length ys}\n\ngoal (1 subgoal):\n 1. {a \\<in> - A. a < i} \\<subset> {a \\<in> - A. a < length xs + length ys}", "using Collect_mono \\<open>i < length (weave A xs ys)\\<close>[unfolded length_weave] le_Suc_ex  less_imp_le_nat trans_less_add1\n        le_neq_trans less_irrefl mem_Collect_eq"], ["proof (prove)\nusing this:\n  i \\<notin> A \\<Longrightarrow>\n  i \\<in> {a \\<in> - A. a < length xs + length ys}\n  (\\<And>x. ?P x \\<longrightarrow> ?Q x) \\<Longrightarrow>\n  Collect ?P \\<subseteq> Collect ?Q\n  i < length xs + length ys\n  ?k \\<le> ?l \\<Longrightarrow> \\<exists>n. ?l = ?k + n\n  ?m < ?n \\<Longrightarrow> ?m \\<le> ?n\n  ?i < ?j \\<Longrightarrow> ?i < ?j + ?m\n  \\<lbrakk>?a \\<le> ?b; ?a \\<noteq> ?b\\<rbrakk> \\<Longrightarrow> ?a < ?b\n  \\<not> ?x < ?x\n  (?a \\<in> Collect ?P) = ?P ?a\n\ngoal (1 subgoal):\n 1. {a \\<in> - A. a < i} \\<subset> {a \\<in> - A. a < length xs + length ys}", "using False"], ["proof (prove)\nusing this:\n  i \\<notin> A \\<Longrightarrow>\n  i \\<in> {a \\<in> - A. a < length xs + length ys}\n  (\\<And>x. ?P x \\<longrightarrow> ?Q x) \\<Longrightarrow>\n  Collect ?P \\<subseteq> Collect ?Q\n  i < length xs + length ys\n  ?k \\<le> ?l \\<Longrightarrow> \\<exists>n. ?l = ?k + n\n  ?m < ?n \\<Longrightarrow> ?m \\<le> ?n\n  ?i < ?j \\<Longrightarrow> ?i < ?j + ?m\n  \\<lbrakk>?a \\<le> ?b; ?a \\<noteq> ?b\\<rbrakk> \\<Longrightarrow> ?a < ?b\n  \\<not> ?x < ?x\n  (?a \\<in> Collect ?P) = ?P ?a\n  i \\<notin> A\n\ngoal (1 subgoal):\n 1. {a \\<in> - A. a < i} \\<subset> {a \\<in> - A. a < length xs + length ys}", "by auto"], ["proof (state)\nthis:\n  {a \\<in> - A. a < i} \\<subset> {a \\<in> - A. a < length xs + length ys}\n\ngoal (1 subgoal):\n 1. i \\<notin> A \\<Longrightarrow> x \\<in> set xs \\<union> set ys", "then"], ["proof (chain)\npicking this:\n  {a \\<in> - A. a < i} \\<subset> {a \\<in> - A. a < length xs + length ys}", "have \"card {a \\<in> -A. a < i} < card {a\\<in>-A. a < length xs + length ys}\""], ["proof (prove)\nusing this:\n  {a \\<in> - A. a < i} \\<subset> {a \\<in> - A. a < length xs + length ys}\n\ngoal (1 subgoal):\n 1. card {a \\<in> - A. a < i}\n    < card {a \\<in> - A. a < length xs + length ys}", "by (simp add: psubset_card_mono)"], ["proof (state)\nthis:\n  card {a \\<in> - A. a < i} < card {a \\<in> - A. a < length xs + length ys}\n\ngoal (1 subgoal):\n 1. i \\<notin> A \\<Longrightarrow> x \\<in> set xs \\<union> set ys", "then"], ["proof (chain)\npicking this:\n  card {a \\<in> - A. a < i} < card {a \\<in> - A. a < length xs + length ys}", "show \"x \\<in> set xs \\<union> set ys\""], ["proof (prove)\nusing this:\n  card {a \\<in> - A. a < i} < card {a \\<in> - A. a < length xs + length ys}\n\ngoal (1 subgoal):\n 1. x \\<in> set xs \\<union> set ys", "unfolding nth_weave[OF \\<open>i<length (weave A xs ys)\\<close>, unfolded \\<open>weave A xs ys ! i = x\\<close>]"], ["proof (prove)\nusing this:\n  card {a \\<in> - A. a < i} < card {a \\<in> - A. a < length xs + length ys}\n\ngoal (1 subgoal):\n 1. (if i \\<in> A then xs ! card {a \\<in> A. a < i}\n     else ys ! card {a \\<in> - A. a < i})\n    \\<in> set xs \\<union> set ys", "using False"], ["proof (prove)\nusing this:\n  card {a \\<in> - A. a < i} < card {a \\<in> - A. a < length xs + length ys}\n  i \\<notin> A\n\ngoal (1 subgoal):\n 1. (if i \\<in> A then xs ! card {a \\<in> A. a < i}\n     else ys ! card {a \\<in> - A. a < i})\n    \\<in> set xs \\<union> set ys", "using UnI1 assms(2) nth_mem"], ["proof (prove)\nusing this:\n  card {a \\<in> - A. a < i} < card {a \\<in> - A. a < length xs + length ys}\n  i \\<notin> A\n  ?c \\<in> ?A \\<Longrightarrow> ?c \\<in> ?A \\<union> ?B\n  length ys = card {a \\<in> - A. a < length xs + length ys}\n  ?n < length ?xs \\<Longrightarrow> ?xs ! ?n \\<in> set ?xs\n\ngoal (1 subgoal):\n 1. (if i \\<in> A then xs ! card {a \\<in> A. a < i}\n     else ys ! card {a \\<in> - A. a < i})\n    \\<in> set xs \\<union> set ys", "by auto"], ["proof (state)\nthis:\n  x \\<in> set xs \\<union> set ys\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  x \\<in> set xs \\<union> set ys\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  set (weave A xs ys) \\<subseteq> set xs \\<union> set ys\n\ngoal (1 subgoal):\n 1. set xs \\<union> set ys \\<subseteq> set (weave A xs ys)", "show \"set xs \\<union> set ys \\<subseteq> set (weave A xs ys)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set xs \\<union> set ys \\<subseteq> set (weave A xs ys)", "using nths_weave[OF assms]"], ["proof (prove)\nusing this:\n  nths (weave A xs ys) A = xs \\<and> nths (weave A xs ys) (- A) = ys\n\ngoal (1 subgoal):\n 1. set xs \\<union> set ys \\<subseteq> set (weave A xs ys)", "by (metis Un_subset_iff set_nths_subset)"], ["proof (state)\nthis:\n  set xs \\<union> set ys \\<subseteq> set (weave A xs ys)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma weave_complementary_nthss[simp]:\n \"weave A (nths xs A) (nths xs (-A)) = xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. weave A (nths xs A) (nths xs (- A)) = xs", "proof (induction xs rule:rev_induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. weave A (nths [] A) (nths [] (- A)) = []\n 2. \\<And>x xs.\n       weave A (nths xs A) (nths xs (- A)) = xs \\<Longrightarrow>\n       weave A (nths (xs @ [x]) A) (nths (xs @ [x]) (- A)) = xs @ [x]", "case Nil"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. weave A (nths [] A) (nths [] (- A)) = []\n 2. \\<And>x xs.\n       weave A (nths xs A) (nths xs (- A)) = xs \\<Longrightarrow>\n       weave A (nths (xs @ [x]) A) (nths (xs @ [x]) (- A)) = xs @ [x]", "then"], ["proof (chain)\npicking this:", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. weave A (nths [] A) (nths [] (- A)) = []", "by (metis gen_length_def length_0_conv length_code length_weave nths_nil)"], ["proof (state)\nthis:\n  weave A (nths [] A) (nths [] (- A)) = []\n\ngoal (1 subgoal):\n 1. \\<And>x xs.\n       weave A (nths xs A) (nths xs (- A)) = xs \\<Longrightarrow>\n       weave A (nths (xs @ [x]) A) (nths (xs @ [x]) (- A)) = xs @ [x]", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x xs.\n       weave A (nths xs A) (nths xs (- A)) = xs \\<Longrightarrow>\n       weave A (nths (xs @ [x]) A) (nths (xs @ [x]) (- A)) = xs @ [x]", "case (snoc x xs)"], ["proof (state)\nthis:\n  weave A (nths xs A) (nths xs (- A)) = xs\n\ngoal (1 subgoal):\n 1. \\<And>x xs.\n       weave A (nths xs A) (nths xs (- A)) = xs \\<Longrightarrow>\n       weave A (nths (xs @ [x]) A) (nths (xs @ [x]) (- A)) = xs @ [x]", "have length_xs:\"length xs = length (nths xs A) + length (nths xs (-A))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length xs = length (nths xs A) + length (nths xs (- A))", "by (metis length_weave snoc.IH)"], ["proof (state)\nthis:\n  length xs = length (nths xs A) + length (nths xs (- A))\n\ngoal (1 subgoal):\n 1. \\<And>x xs.\n       weave A (nths xs A) (nths xs (- A)) = xs \\<Longrightarrow>\n       weave A (nths (xs @ [x]) A) (nths (xs @ [x]) (- A)) = xs @ [x]", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. weave A (nths (xs @ [x]) A) (nths (xs @ [x]) (- A)) = xs @ [x]", "proof (cases \"(length xs)\\<in>A\")"], ["proof (state)\ngoal (2 subgoals):\n 1. length xs \\<in> A \\<Longrightarrow>\n    weave A (nths (xs @ [x]) A) (nths (xs @ [x]) (- A)) = xs @ [x]\n 2. length xs \\<notin> A \\<Longrightarrow>\n    weave A (nths (xs @ [x]) A) (nths (xs @ [x]) (- A)) = xs @ [x]", "case True"], ["proof (state)\nthis:\n  length xs \\<in> A\n\ngoal (2 subgoals):\n 1. length xs \\<in> A \\<Longrightarrow>\n    weave A (nths (xs @ [x]) A) (nths (xs @ [x]) (- A)) = xs @ [x]\n 2. length xs \\<notin> A \\<Longrightarrow>\n    weave A (nths (xs @ [x]) A) (nths (xs @ [x]) (- A)) = xs @ [x]", "have 0:\"length (nths xs A) + length (nths xs (-A)) \\<in> A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length (nths xs A) + length (nths xs (- A)) \\<in> A", "using length_xs True"], ["proof (prove)\nusing this:\n  length xs = length (nths xs A) + length (nths xs (- A))\n  length xs \\<in> A\n\ngoal (1 subgoal):\n 1. length (nths xs A) + length (nths xs (- A)) \\<in> A", "by metis"], ["proof (state)\nthis:\n  length (nths xs A) + length (nths xs (- A)) \\<in> A\n\ngoal (2 subgoals):\n 1. length xs \\<in> A \\<Longrightarrow>\n    weave A (nths (xs @ [x]) A) (nths (xs @ [x]) (- A)) = xs @ [x]\n 2. length xs \\<notin> A \\<Longrightarrow>\n    weave A (nths (xs @ [x]) A) (nths (xs @ [x]) (- A)) = xs @ [x]", "have 1:\"length (nths xs A) = card {a \\<in> A. a < length (nths xs A) + length (nths xs (-A))}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length (nths xs A) =\n    card {a \\<in> A. a < length (nths xs A) + length (nths xs (- A))}", "using length_nths[of xs A]"], ["proof (prove)\nusing this:\n  length (nths xs A) = card {i. i < length xs \\<and> i \\<in> A}\n\ngoal (1 subgoal):\n 1. length (nths xs A) =\n    card {a \\<in> A. a < length (nths xs A) + length (nths xs (- A))}", "by (metis (no_types, lifting) Collect_cong length_xs)"], ["proof (state)\nthis:\n  length (nths xs A) =\n  card {a \\<in> A. a < length (nths xs A) + length (nths xs (- A))}\n\ngoal (2 subgoals):\n 1. length xs \\<in> A \\<Longrightarrow>\n    weave A (nths (xs @ [x]) A) (nths (xs @ [x]) (- A)) = xs @ [x]\n 2. length xs \\<notin> A \\<Longrightarrow>\n    weave A (nths (xs @ [x]) A) (nths (xs @ [x]) (- A)) = xs @ [x]", "have 2:\"nths (xs @ [x]) A = nths xs A @ [x]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. nths (xs @ [x]) A = nths xs A @ [x]", "unfolding nths_append[of xs \"[x]\" A]"], ["proof (prove)\ngoal (1 subgoal):\n 1. nths xs A @ nths [x] {j. j + length xs \\<in> A} = nths xs A @ [x]", "using nths_singleton True"], ["proof (prove)\nusing this:\n  nths [?x] ?A = (if 0 \\<in> ?A then [?x] else [])\n  length xs \\<in> A\n\ngoal (1 subgoal):\n 1. nths xs A @ nths [x] {j. j + length xs \\<in> A} = nths xs A @ [x]", "by auto"], ["proof (state)\nthis:\n  nths (xs @ [x]) A = nths xs A @ [x]\n\ngoal (2 subgoals):\n 1. length xs \\<in> A \\<Longrightarrow>\n    weave A (nths (xs @ [x]) A) (nths (xs @ [x]) (- A)) = xs @ [x]\n 2. length xs \\<notin> A \\<Longrightarrow>\n    weave A (nths (xs @ [x]) A) (nths (xs @ [x]) (- A)) = xs @ [x]", "have 3:\"nths (xs @ [x]) (-A) = nths xs (-A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. nths (xs @ [x]) (- A) = nths xs (- A)", "unfolding nths_append[of xs \"[x]\" \"-A\"]"], ["proof (prove)\ngoal (1 subgoal):\n 1. nths xs (- A) @ nths [x] {j. j + length xs \\<in> - A} = nths xs (- A)", "using True"], ["proof (prove)\nusing this:\n  length xs \\<in> A\n\ngoal (1 subgoal):\n 1. nths xs (- A) @ nths [x] {j. j + length xs \\<in> - A} = nths xs (- A)", "by auto"], ["proof (state)\nthis:\n  nths (xs @ [x]) (- A) = nths xs (- A)\n\ngoal (2 subgoals):\n 1. length xs \\<in> A \\<Longrightarrow>\n    weave A (nths (xs @ [x]) A) (nths (xs @ [x]) (- A)) = xs @ [x]\n 2. length xs \\<notin> A \\<Longrightarrow>\n    weave A (nths (xs @ [x]) A) (nths (xs @ [x]) (- A)) = xs @ [x]", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. weave A (nths (xs @ [x]) A) (nths (xs @ [x]) (- A)) = xs @ [x]", "unfolding 2 3 weave_append1[OF 0 1] snoc.IH"], ["proof (prove)\ngoal (1 subgoal):\n 1. xs @ [x] = xs @ [x]", "by metis"], ["proof (state)\nthis:\n  weave A (nths (xs @ [x]) A) (nths (xs @ [x]) (- A)) = xs @ [x]\n\ngoal (1 subgoal):\n 1. length xs \\<notin> A \\<Longrightarrow>\n    weave A (nths (xs @ [x]) A) (nths (xs @ [x]) (- A)) = xs @ [x]", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. length xs \\<notin> A \\<Longrightarrow>\n    weave A (nths (xs @ [x]) A) (nths (xs @ [x]) (- A)) = xs @ [x]", "case False"], ["proof (state)\nthis:\n  length xs \\<notin> A\n\ngoal (1 subgoal):\n 1. length xs \\<notin> A \\<Longrightarrow>\n    weave A (nths (xs @ [x]) A) (nths (xs @ [x]) (- A)) = xs @ [x]", "have 0:\"length (nths xs A) + length (nths xs (-A)) \\<notin> A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length (nths xs A) + length (nths xs (- A)) \\<notin> A", "using length_xs False"], ["proof (prove)\nusing this:\n  length xs = length (nths xs A) + length (nths xs (- A))\n  length xs \\<notin> A\n\ngoal (1 subgoal):\n 1. length (nths xs A) + length (nths xs (- A)) \\<notin> A", "by metis"], ["proof (state)\nthis:\n  length (nths xs A) + length (nths xs (- A)) \\<notin> A\n\ngoal (1 subgoal):\n 1. length xs \\<notin> A \\<Longrightarrow>\n    weave A (nths (xs @ [x]) A) (nths (xs @ [x]) (- A)) = xs @ [x]", "have 1:\"length (nths xs (-A)) = card {a \\<in> -A. a < length (nths xs A) + length (nths xs (-A))}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length (nths xs (- A)) =\n    card {a \\<in> - A. a < length (nths xs A) + length (nths xs (- A))}", "using length_nths[of xs \"-A\"]"], ["proof (prove)\nusing this:\n  length (nths xs (- A)) = card {i. i < length xs \\<and> i \\<in> - A}\n\ngoal (1 subgoal):\n 1. length (nths xs (- A)) =\n    card {a \\<in> - A. a < length (nths xs A) + length (nths xs (- A))}", "by (metis (no_types, lifting) Collect_cong length_xs)"], ["proof (state)\nthis:\n  length (nths xs (- A)) =\n  card {a \\<in> - A. a < length (nths xs A) + length (nths xs (- A))}\n\ngoal (1 subgoal):\n 1. length xs \\<notin> A \\<Longrightarrow>\n    weave A (nths (xs @ [x]) A) (nths (xs @ [x]) (- A)) = xs @ [x]", "have 2:\"nths (xs @ [x]) A = nths xs A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. nths (xs @ [x]) A = nths xs A", "unfolding nths_append[of xs \"[x]\" A]"], ["proof (prove)\ngoal (1 subgoal):\n 1. nths xs A @ nths [x] {j. j + length xs \\<in> A} = nths xs A", "using nths_singleton False"], ["proof (prove)\nusing this:\n  nths [?x] ?A = (if 0 \\<in> ?A then [?x] else [])\n  length xs \\<notin> A\n\ngoal (1 subgoal):\n 1. nths xs A @ nths [x] {j. j + length xs \\<in> A} = nths xs A", "by auto"], ["proof (state)\nthis:\n  nths (xs @ [x]) A = nths xs A\n\ngoal (1 subgoal):\n 1. length xs \\<notin> A \\<Longrightarrow>\n    weave A (nths (xs @ [x]) A) (nths (xs @ [x]) (- A)) = xs @ [x]", "have 3:\"nths (xs @ [x]) (-A) = nths xs (-A) @ [x]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. nths (xs @ [x]) (- A) = nths xs (- A) @ [x]", "unfolding nths_append[of xs \"[x]\" \"-A\"]"], ["proof (prove)\ngoal (1 subgoal):\n 1. nths xs (- A) @ nths [x] {j. j + length xs \\<in> - A} =\n    nths xs (- A) @ [x]", "using False"], ["proof (prove)\nusing this:\n  length xs \\<notin> A\n\ngoal (1 subgoal):\n 1. nths xs (- A) @ nths [x] {j. j + length xs \\<in> - A} =\n    nths xs (- A) @ [x]", "by auto"], ["proof (state)\nthis:\n  nths (xs @ [x]) (- A) = nths xs (- A) @ [x]\n\ngoal (1 subgoal):\n 1. length xs \\<notin> A \\<Longrightarrow>\n    weave A (nths (xs @ [x]) A) (nths (xs @ [x]) (- A)) = xs @ [x]", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. weave A (nths (xs @ [x]) A) (nths (xs @ [x]) (- A)) = xs @ [x]", "unfolding 2 3 weave_append2[OF 0 1] snoc.IH"], ["proof (prove)\ngoal (1 subgoal):\n 1. xs @ [x] = xs @ [x]", "by metis"], ["proof (state)\nthis:\n  weave A (nths (xs @ [x]) A) (nths (xs @ [x]) (- A)) = xs @ [x]\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  weave A (nths (xs @ [x]) A) (nths (xs @ [x]) (- A)) = xs @ [x]\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma length_nths': \"length (nths xs I) = card {i\\<in>I. i < length xs}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length (nths xs I) = card {i \\<in> I. i < length xs}", "unfolding length_nths"], ["proof (prove)\ngoal (1 subgoal):\n 1. card {i. i < length xs \\<and> i \\<in> I} =\n    card {i \\<in> I. i < length xs}", "by meson"], ["", "end"]]}