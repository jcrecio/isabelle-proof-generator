{"file_name": "/home/qj213/afp-2021-10-22/thys/Jordan_Normal_Form/Missing_Permutations.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Jordan_Normal_Form", "problem_names": ["lemma signof_id[simp]: \"signof id = 1\" \"signof (\\<lambda> x. x) = 1\"", "lemma signof_inv: \"finite S \\<Longrightarrow> p permutes S \\<Longrightarrow> signof (Hilbert_Choice.inv p) = signof p\"", "lemma signof_pm_one: \"signof p \\<in> {1, - 1}\"", "lemma signof_compose: assumes \"p permutes {0..<(n :: nat)}\"\n  and \"q permutes {0 ..<(m :: nat)}\"\n  shows \"signof (p o q) = signof p * signof q\"", "lemma permutes_funcset: \"p permutes A \\<Longrightarrow> (p ` A \\<rightarrow> B) = (A \\<rightarrow> B)\"", "lemma finprod_permute:\n  assumes p: \"p permutes S\"\n  and f: \"f \\<in> S \\<rightarrow> carrier G\"\n  shows \"finprod G f S = finprod G (f \\<circ> p) S\"", "lemma finprod_singleton_set[simp]: assumes \"f a \\<in> carrier G\"\n  shows \"finprod G f {a} = f a\"", "lemmas (in semiring) finsum_permute = add.finprod_permute", "lemmas (in semiring) finsum_singleton_set = add.finprod_singleton_set", "lemma permutes_less[simp]: assumes p: \"p permutes {0..<(n :: nat)}\"\n  shows \"i < n \\<Longrightarrow> p i < n\" \"i < n \\<Longrightarrow> Hilbert_Choice.inv p i < n\" \n  \"p (Hilbert_Choice.inv p i) = i\"\n  \"Hilbert_Choice.inv p (p i) = i\"", "lemma finsum_permutations_inverse: \n  assumes f: \"f \\<in> {p. p permutes S} \\<rightarrow> carrier R\"\n  shows \"finsum R f {p. p permutes S} = finsum R (\\<lambda>p. f(Hilbert_Choice.inv p)) {p. p permutes S}\"\n  (is \"?lhs = ?rhs\")", "lemma finsum_permutations_compose_right: assumes q: \"q permutes S\"\n  and *: \"f \\<in> {p. p permutes S} \\<rightarrow> carrier R\"\n  shows \"finsum R f {p. p permutes S} = finsum R (\\<lambda>p. f(p \\<circ> q)) {p. p permutes S}\"\n  (is \"?lhs = ?rhs\")", "lemma finite_bounded_functions:\n  assumes fS: \"finite S\"\n  shows \"finite T \\<Longrightarrow> finite {f. (\\<forall>i \\<in> T. f i \\<in> S) \\<and> (\\<forall>i. i \\<notin> T \\<longrightarrow> f i = i)}\"", "lemma finite_bounded_functions':\n  assumes fS: \"finite S\"\n  shows \"finite T \\<Longrightarrow> finite {f. (\\<forall>i \\<in> T. f i \\<in> S) \\<and> (\\<forall>i. i \\<notin> T \\<longrightarrow> f i = j)}\"", "lemma permutes_memb: fixes p :: \"'b \\<Rightarrow> 'b\"\n  assumes p: \"p permutes B\"\n  and a: \"a \\<in> A\"\n  defines \"ip \\<equiv> Hilbert_Choice.inv p\"\n  shows \"a \\<in> A\" \"a_to_b a \\<in> B\" \"ip (a_to_b a) \\<in> B\" \"p (a_to_b a) \\<in> B\" \n    \"b_to_a (p (a_to_b a)) \\<in> A\" \"b_to_a (ip (a_to_b a)) \\<in> A\"", "lemma permutes_bij_main: \n  \"{p . p permutes A} \\<supseteq> (\\<lambda> p a. if a \\<in> A then b_to_a (p (a_to_b a)) else a) ` {p . p permutes B}\" \n  (is \"?A \\<supseteq> ?f ` ?B\")", "lemma  permutes_bij': assumes ab: \"\\<And> a. a \\<in> A \\<Longrightarrow> a_to_b a \\<in> B\"\n    and ba: \"\\<And> b. b \\<in> B \\<Longrightarrow> b_to_a b \\<in> A\"\n    and ab_ba: \"\\<And> a. a \\<in> A \\<Longrightarrow> b_to_a (a_to_b a) = a\"\n    and ba_ab: \"\\<And> b. b \\<in> B \\<Longrightarrow> a_to_b (b_to_a b) = b\"\n  shows \"{p . p permutes A} = (\\<lambda> p a. if a \\<in> A then b_to_a (p (a_to_b a)) else a) ` {p . p permutes B}\" \n  (is \"?A = ?f ` ?B\")", "lemma inj_on_nat_permutes: assumes i: \"inj_on f (S :: nat set)\"\n  and fS: \"f \\<in> S \\<rightarrow> S\"\n  and fin: \"finite S\"\n  and f: \"\\<And> i. i \\<notin> S \\<Longrightarrow> f i = i\"\n  shows \"f permutes S\"", "lemma permutes_pair_eq:\n  assumes p: \"p permutes S\"\n  shows \"{ (p s, s) | s. s \\<in> S } = { (s, Hilbert_Choice.inv p s) | s. s \\<in> S }\"\n    (is \"?L = ?R\")", "lemma inj_on_finite[simp]:\n  assumes inj: \"inj_on f A\" shows \"finite (f ` A) = finite A\"", "lemma permutes_prod:\n  assumes p: \"p permutes S\"\n  shows \"(\\<Prod>s\\<in>S. f (p s) s) = (\\<Prod>s\\<in>S. f s (Hilbert_Choice.inv p s))\"\n    (is \"?l = ?r\")", "lemma permutes_sum:\n  assumes p: \"p permutes S\"\n  shows \"(\\<Sum>s\\<in>S. f (p s) s) = (\\<Sum>s\\<in>S. f s (Hilbert_Choice.inv p s))\"\n    (is \"?l = ?r\")", "lemma inv_inj_on_permutes: \"inj_on Hilbert_Choice.inv { p. p permutes S }\"", "lemma permutes_others:\n  assumes p: \"p permutes S\" and x: \"x \\<notin> S\" shows \"p x = x\""], "translations": [["", "lemma signof_id[simp]: \"signof id = 1\" \"signof (\\<lambda> x. x) = 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. signof id = (1::'a) &&& signof (\\<lambda>x. x) = (1::'b)", "unfolding signof_def sign_id id_def[symmetric]"], ["proof (prove)\ngoal (1 subgoal):\n 1. (if 1 = 1 then 1::'a else - (1::'a)) = (1::'a) &&&\n    (if 1 = 1 then 1::'b else - (1::'b)) = (1::'b)", "by auto"], ["", "lemma signof_inv: \"finite S \\<Longrightarrow> p permutes S \\<Longrightarrow> signof (Hilbert_Choice.inv p) = signof p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite S; p permutes S\\<rbrakk>\n    \\<Longrightarrow> signof (inv p) = signof p", "unfolding signof_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite S; p permutes S\\<rbrakk>\n    \\<Longrightarrow> (if sign (inv p) = 1 then 1::'a else - (1::'a)) =\n                      (if sign p = 1 then 1::'a else - (1::'a))", "using sign_inverse permutation_permutes"], ["proof (prove)\nusing this:\n  permutation ?p \\<Longrightarrow> sign (inv ?p) = sign ?p\n  permutation ?p = (\\<exists>S. finite S \\<and> ?p permutes S)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>finite S; p permutes S\\<rbrakk>\n    \\<Longrightarrow> (if sign (inv p) = 1 then 1::'a else - (1::'a)) =\n                      (if sign p = 1 then 1::'a else - (1::'a))", "by metis"], ["", "lemma signof_pm_one: \"signof p \\<in> {1, - 1}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. signof p \\<in> {1::'a, - (1::'a)}", "unfolding signof_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (if sign p = 1 then 1::'a else - (1::'a)) \\<in> {1::'a, - (1::'a)}", "by auto"], ["", "lemma signof_compose: assumes \"p permutes {0..<(n :: nat)}\"\n  and \"q permutes {0 ..<(m :: nat)}\"\n  shows \"signof (p o q) = signof p * signof q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. signof (p \\<circ> q) = signof p * signof q", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. signof (p \\<circ> q) = signof p * signof q", "from assms"], ["proof (chain)\npicking this:\n  p permutes {0..<n}\n  q permutes {0..<m}", "have pp: \"permutation p\" \"permutation q\""], ["proof (prove)\nusing this:\n  p permutes {0..<n}\n  q permutes {0..<m}\n\ngoal (1 subgoal):\n 1. permutation p &&& permutation q", "by (auto simp: permutation_permutes)"], ["proof (state)\nthis:\n  permutation p\n  permutation q\n\ngoal (1 subgoal):\n 1. signof (p \\<circ> q) = signof p * signof q", "show \"signof (p o q) = signof p * signof q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. signof (p \\<circ> q) = signof p * signof q", "unfolding signof_def sign_compose[OF pp]"], ["proof (prove)\ngoal (1 subgoal):\n 1. (if sign p * sign q = 1 then 1::'b else - (1::'b)) =\n    (if sign p = 1 then 1::'b else - (1::'b)) *\n    (if sign q = 1 then 1::'b else - (1::'b))", "by (auto simp: sign_def split: if_splits)"], ["proof (state)\nthis:\n  signof (p \\<circ> q) = signof p * signof q\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma permutes_funcset: \"p permutes A \\<Longrightarrow> (p ` A \\<rightarrow> B) = (A \\<rightarrow> B)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. p permutes A \\<Longrightarrow> p ` A \\<rightarrow> B = A \\<rightarrow> B", "by (simp add: permutes_image)"], ["", "context comm_monoid\nbegin"], ["", "lemma finprod_permute:\n  assumes p: \"p permutes S\"\n  and f: \"f \\<in> S \\<rightarrow> carrier G\"\n  shows \"finprod G f S = finprod G (f \\<circ> p) S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finprod G f S = finprod G (f \\<circ> p) S", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. finprod G f S = finprod G (f \\<circ> p) S", "from \\<open>p permutes S\\<close>"], ["proof (chain)\npicking this:\n  p permutes S", "have \"inj p\""], ["proof (prove)\nusing this:\n  p permutes S\n\ngoal (1 subgoal):\n 1. inj p", "by (rule permutes_inj)"], ["proof (state)\nthis:\n  inj p\n\ngoal (1 subgoal):\n 1. finprod G f S = finprod G (f \\<circ> p) S", "then"], ["proof (chain)\npicking this:\n  inj p", "have \"inj_on p S\""], ["proof (prove)\nusing this:\n  inj p\n\ngoal (1 subgoal):\n 1. inj_on p S", "by (auto intro: subset_inj_on)"], ["proof (state)\nthis:\n  inj_on p S\n\ngoal (1 subgoal):\n 1. finprod G f S = finprod G (f \\<circ> p) S", "from finprod_reindex[OF _ this, unfolded permutes_image[OF p], OF f]"], ["proof (chain)\npicking this:\n  finprod G f S = (\\<Otimes>x\\<in>S. f (p x))", "show ?thesis"], ["proof (prove)\nusing this:\n  finprod G f S = (\\<Otimes>x\\<in>S. f (p x))\n\ngoal (1 subgoal):\n 1. finprod G f S = finprod G (f \\<circ> p) S", "unfolding o_def"], ["proof (prove)\nusing this:\n  finprod G f S = (\\<Otimes>x\\<in>S. f (p x))\n\ngoal (1 subgoal):\n 1. finprod G f S = (\\<Otimes>x\\<in>S. f (p x))", "."], ["proof (state)\nthis:\n  finprod G f S = finprod G (f \\<circ> p) S\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma finprod_singleton_set[simp]: assumes \"f a \\<in> carrier G\"\n  shows \"finprod G f {a} = f a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finprod G f {a} = f a", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. finprod G f {a} = f a", "have \"finprod G f {a} = f a \\<otimes> finprod G f {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finprod G f {a} = f a \\<otimes> finprod G f {}", "by (rule finprod_insert, insert assms, auto)"], ["proof (state)\nthis:\n  finprod G f {a} = f a \\<otimes> finprod G f {}\n\ngoal (1 subgoal):\n 1. finprod G f {a} = f a", "also"], ["proof (state)\nthis:\n  finprod G f {a} = f a \\<otimes> finprod G f {}\n\ngoal (1 subgoal):\n 1. finprod G f {a} = f a", "have \"\\<dots> = f a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f a \\<otimes> finprod G f {} = f a", "using assms"], ["proof (prove)\nusing this:\n  f a \\<in> carrier G\n\ngoal (1 subgoal):\n 1. f a \\<otimes> finprod G f {} = f a", "by auto"], ["proof (state)\nthis:\n  f a \\<otimes> finprod G f {} = f a\n\ngoal (1 subgoal):\n 1. finprod G f {a} = f a", "finally"], ["proof (chain)\npicking this:\n  finprod G f {a} = f a", "show ?thesis"], ["proof (prove)\nusing this:\n  finprod G f {a} = f a\n\ngoal (1 subgoal):\n 1. finprod G f {a} = f a", "."], ["proof (state)\nthis:\n  finprod G f {a} = f a\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "lemmas (in semiring) finsum_permute = add.finprod_permute"], ["", "lemmas (in semiring) finsum_singleton_set = add.finprod_singleton_set"], ["", "lemma permutes_less[simp]: assumes p: \"p permutes {0..<(n :: nat)}\"\n  shows \"i < n \\<Longrightarrow> p i < n\" \"i < n \\<Longrightarrow> Hilbert_Choice.inv p i < n\" \n  \"p (Hilbert_Choice.inv p i) = i\"\n  \"Hilbert_Choice.inv p (p i) = i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((i < n \\<Longrightarrow> p i < n) &&&\n     (i < n \\<Longrightarrow> inv p i < n)) &&&\n    p (inv p i) = i &&& inv p (p i) = i", "proof -"], ["proof (state)\ngoal (4 subgoals):\n 1. i < n \\<Longrightarrow> p i < n\n 2. i < n \\<Longrightarrow> inv p i < n\n 3. p (inv p i) = i\n 4. inv p (p i) = i", "assume i: \"i < n\""], ["proof (state)\nthis:\n  i < n\n\ngoal (4 subgoals):\n 1. i < n \\<Longrightarrow> p i < n\n 2. i < n \\<Longrightarrow> inv p i < n\n 3. p (inv p i) = i\n 4. inv p (p i) = i", "show \"p i < n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. p i < n", "using permutes_in_image[OF p] i"], ["proof (prove)\nusing this:\n  (p ?x \\<in> {0..<n}) = (?x \\<in> {0..<n})\n  i < n\n\ngoal (1 subgoal):\n 1. p i < n", "by auto"], ["proof (state)\nthis:\n  p i < n\n\ngoal (3 subgoals):\n 1. i < n \\<Longrightarrow> inv p i < n\n 2. p (inv p i) = i\n 3. inv p (p i) = i", "let ?inv = \"Hilbert_Choice.inv p\""], ["proof (state)\ngoal (3 subgoals):\n 1. i < n \\<Longrightarrow> inv p i < n\n 2. p (inv p i) = i\n 3. inv p (p i) = i", "have \"\\<And>n. ?inv (p n) = n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n. inv p (p n) = n", "using permutes_inverses[OF p]"], ["proof (prove)\nusing this:\n  p (inv p ?x) = ?x\n  inv p (p ?x) = ?x\n\ngoal (1 subgoal):\n 1. \\<And>n. inv p (p n) = n", "by simp"], ["proof (state)\nthis:\n  inv p (p ?n) = ?n\n\ngoal (3 subgoals):\n 1. i < n \\<Longrightarrow> inv p i < n\n 2. p (inv p i) = i\n 3. inv p (p i) = i", "thus \"?inv i < n\""], ["proof (prove)\nusing this:\n  inv p (p ?n) = ?n\n\ngoal (1 subgoal):\n 1. inv p i < n", "by (metis (no_types) atLeastLessThan_iff f_inv_into_f inv_into_into le0 permutes_image[OF p] i)"], ["proof (state)\nthis:\n  inv p i < n\n\ngoal (2 subgoals):\n 1. p (inv p i) = i\n 2. inv p (p i) = i", "qed (insert permutes_inverses[OF p], auto)"], ["", "context cring\nbegin"], ["", "lemma finsum_permutations_inverse: \n  assumes f: \"f \\<in> {p. p permutes S} \\<rightarrow> carrier R\"\n  shows \"finsum R f {p. p permutes S} = finsum R (\\<lambda>p. f(Hilbert_Choice.inv p)) {p. p permutes S}\"\n  (is \"?lhs = ?rhs\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. finsum R f {p. p permutes S} =\n    (\\<Oplus>p\\<in>{p. p permutes S}. f (inv p))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. finsum R f {p. p permutes S} =\n    (\\<Oplus>p\\<in>{p. p permutes S}. f (inv p))", "let ?inv = \"Hilbert_Choice.inv\""], ["proof (state)\ngoal (1 subgoal):\n 1. finsum R f {p. p permutes S} =\n    (\\<Oplus>p\\<in>{p. p permutes S}. f (inv p))", "let ?S = \"{p . p permutes S}\""], ["proof (state)\ngoal (1 subgoal):\n 1. finsum R f {p. p permutes S} =\n    (\\<Oplus>p\\<in>{p. p permutes S}. f (inv p))", "have th0: \"inj_on ?inv ?S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. inj_on inv {p. p permutes S}", "proof (auto simp add: inj_on_def)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x permutes S; y permutes S; inv x = inv y\\<rbrakk>\n       \\<Longrightarrow> x = y", "fix q r"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x permutes S; y permutes S; inv x = inv y\\<rbrakk>\n       \\<Longrightarrow> x = y", "assume q: \"q permutes S\"\n      and r: \"r permutes S\"\n      and qr: \"?inv q = ?inv r\""], ["proof (state)\nthis:\n  q permutes S\n  r permutes S\n  inv q = inv r\n\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x permutes S; y permutes S; inv x = inv y\\<rbrakk>\n       \\<Longrightarrow> x = y", "then"], ["proof (chain)\npicking this:\n  q permutes S\n  r permutes S\n  inv q = inv r", "have \"?inv (?inv q) = ?inv (?inv r)\""], ["proof (prove)\nusing this:\n  q permutes S\n  r permutes S\n  inv q = inv r\n\ngoal (1 subgoal):\n 1. inv (inv q) = inv (inv r)", "by simp"], ["proof (state)\nthis:\n  inv (inv q) = inv (inv r)\n\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x permutes S; y permutes S; inv x = inv y\\<rbrakk>\n       \\<Longrightarrow> x = y", "with permutes_inv_inv[OF q] permutes_inv_inv[OF r]"], ["proof (chain)\npicking this:\n  inv (inv q) = q\n  inv (inv r) = r\n  inv (inv q) = inv (inv r)", "show \"q = r\""], ["proof (prove)\nusing this:\n  inv (inv q) = q\n  inv (inv r) = r\n  inv (inv q) = inv (inv r)\n\ngoal (1 subgoal):\n 1. q = r", "by metis"], ["proof (state)\nthis:\n  q = r\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  inj_on inv {p. p permutes S}\n\ngoal (1 subgoal):\n 1. finsum R f {p. p permutes S} =\n    (\\<Oplus>p\\<in>{p. p permutes S}. f (inv p))", "have th1: \"?inv ` ?S = ?S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. inv ` {p. p permutes S} = {p. p permutes S}", "using image_inverse_permutations"], ["proof (prove)\nusing this:\n  {inv p |p. p permutes ?S} = {p. p permutes ?S}\n\ngoal (1 subgoal):\n 1. inv ` {p. p permutes S} = {p. p permutes S}", "by blast"], ["proof (state)\nthis:\n  inv ` {p. p permutes S} = {p. p permutes S}\n\ngoal (1 subgoal):\n 1. finsum R f {p. p permutes S} =\n    (\\<Oplus>p\\<in>{p. p permutes S}. f (inv p))", "have th2: \"?rhs = finsum R (f \\<circ> ?inv) ?S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Oplus>p\\<in>{p. p permutes S}. f (inv p)) =\n    finsum R (f \\<circ> inv) {p. p permutes S}", "by (simp add: o_def)"], ["proof (state)\nthis:\n  (\\<Oplus>p\\<in>{p. p permutes S}. f (inv p)) =\n  finsum R (f \\<circ> inv) {p. p permutes S}\n\ngoal (1 subgoal):\n 1. finsum R f {p. p permutes S} =\n    (\\<Oplus>p\\<in>{p. p permutes S}. f (inv p))", "from finsum_reindex[OF _ th0, of f]"], ["proof (chain)\npicking this:\n  f \\<in> inv ` {p. p permutes S} \\<rightarrow> carrier R \\<Longrightarrow>\n  finsum R f (inv ` {p. p permutes S}) =\n  (\\<Oplus>x\\<in>{p. p permutes S}. f (inv x))", "show ?thesis"], ["proof (prove)\nusing this:\n  f \\<in> inv ` {p. p permutes S} \\<rightarrow> carrier R \\<Longrightarrow>\n  finsum R f (inv ` {p. p permutes S}) =\n  (\\<Oplus>x\\<in>{p. p permutes S}. f (inv x))\n\ngoal (1 subgoal):\n 1. finsum R f {p. p permutes S} =\n    (\\<Oplus>p\\<in>{p. p permutes S}. f (inv p))", "unfolding th1 th2"], ["proof (prove)\nusing this:\n  f \\<in> {p. p permutes S} \\<rightarrow> carrier R \\<Longrightarrow>\n  finsum R f {p. p permutes S} = finsum R (f \\<circ> inv) {x. x permutes S}\n\ngoal (1 subgoal):\n 1. finsum R f {p. p permutes S} =\n    finsum R (f \\<circ> inv) {p. p permutes S}", "using f"], ["proof (prove)\nusing this:\n  f \\<in> {p. p permutes S} \\<rightarrow> carrier R \\<Longrightarrow>\n  finsum R f {p. p permutes S} = finsum R (f \\<circ> inv) {x. x permutes S}\n  f \\<in> {p. p permutes S} \\<rightarrow> carrier R\n\ngoal (1 subgoal):\n 1. finsum R f {p. p permutes S} =\n    finsum R (f \\<circ> inv) {p. p permutes S}", "."], ["proof (state)\nthis:\n  finsum R f {p. p permutes S} =\n  (\\<Oplus>p\\<in>{p. p permutes S}. f (inv p))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma finsum_permutations_compose_right: assumes q: \"q permutes S\"\n  and *: \"f \\<in> {p. p permutes S} \\<rightarrow> carrier R\"\n  shows \"finsum R f {p. p permutes S} = finsum R (\\<lambda>p. f(p \\<circ> q)) {p. p permutes S}\"\n  (is \"?lhs = ?rhs\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. finsum R f {p. p permutes S} =\n    (\\<Oplus>p\\<in>{p. p permutes S}. f (p \\<circ> q))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. finsum R f {p. p permutes S} =\n    (\\<Oplus>p\\<in>{p. p permutes S}. f (p \\<circ> q))", "let ?S = \"{p. p permutes S}\""], ["proof (state)\ngoal (1 subgoal):\n 1. finsum R f {p. p permutes S} =\n    (\\<Oplus>p\\<in>{p. p permutes S}. f (p \\<circ> q))", "let ?inv = \"Hilbert_Choice.inv\""], ["proof (state)\ngoal (1 subgoal):\n 1. finsum R f {p. p permutes S} =\n    (\\<Oplus>p\\<in>{p. p permutes S}. f (p \\<circ> q))", "have th0: \"?rhs = finsum R (f \\<circ> (\\<lambda>p. p \\<circ> q)) ?S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Oplus>p\\<in>{p. p permutes S}. f (p \\<circ> q)) =\n    finsum R (f \\<circ> (\\<lambda>p. p \\<circ> q)) {p. p permutes S}", "by (simp add: o_def)"], ["proof (state)\nthis:\n  (\\<Oplus>p\\<in>{p. p permutes S}. f (p \\<circ> q)) =\n  finsum R (f \\<circ> (\\<lambda>p. p \\<circ> q)) {p. p permutes S}\n\ngoal (1 subgoal):\n 1. finsum R f {p. p permutes S} =\n    (\\<Oplus>p\\<in>{p. p permutes S}. f (p \\<circ> q))", "have th1: \"inj_on (\\<lambda>p. p \\<circ> q) ?S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. inj_on (\\<lambda>p. p \\<circ> q) {p. p permutes S}", "proof (auto simp add: inj_on_def)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x permutes S; y permutes S;\n        x \\<circ> q = y \\<circ> q\\<rbrakk>\n       \\<Longrightarrow> x = y", "fix p r"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x permutes S; y permutes S;\n        x \\<circ> q = y \\<circ> q\\<rbrakk>\n       \\<Longrightarrow> x = y", "assume \"p permutes S\"\n      and r: \"r permutes S\"\n      and rp: \"p \\<circ> q = r \\<circ> q\""], ["proof (state)\nthis:\n  p permutes S\n  r permutes S\n  p \\<circ> q = r \\<circ> q\n\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x permutes S; y permutes S;\n        x \\<circ> q = y \\<circ> q\\<rbrakk>\n       \\<Longrightarrow> x = y", "then"], ["proof (chain)\npicking this:\n  p permutes S\n  r permutes S\n  p \\<circ> q = r \\<circ> q", "have \"p \\<circ> (q \\<circ> ?inv q) = r \\<circ> (q \\<circ> ?inv q)\""], ["proof (prove)\nusing this:\n  p permutes S\n  r permutes S\n  p \\<circ> q = r \\<circ> q\n\ngoal (1 subgoal):\n 1. p \\<circ> (q \\<circ> inv q) = r \\<circ> (q \\<circ> inv q)", "by (simp add: o_assoc)"], ["proof (state)\nthis:\n  p \\<circ> (q \\<circ> inv q) = r \\<circ> (q \\<circ> inv q)\n\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x permutes S; y permutes S;\n        x \\<circ> q = y \\<circ> q\\<rbrakk>\n       \\<Longrightarrow> x = y", "with permutes_surj[OF q, unfolded surj_iff]"], ["proof (chain)\npicking this:\n  q \\<circ> inv q = id\n  p \\<circ> (q \\<circ> inv q) = r \\<circ> (q \\<circ> inv q)", "show \"p = r\""], ["proof (prove)\nusing this:\n  q \\<circ> inv q = id\n  p \\<circ> (q \\<circ> inv q) = r \\<circ> (q \\<circ> inv q)\n\ngoal (1 subgoal):\n 1. p = r", "by simp"], ["proof (state)\nthis:\n  p = r\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  inj_on (\\<lambda>p. p \\<circ> q) {p. p permutes S}\n\ngoal (1 subgoal):\n 1. finsum R f {p. p permutes S} =\n    (\\<Oplus>p\\<in>{p. p permutes S}. f (p \\<circ> q))", "have th3: \"(\\<lambda>p. p \\<circ> q) ` ?S = ?S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>p. p \\<circ> q) ` {p. p permutes S} = {p. p permutes S}", "using image_compose_permutations_right[OF q]"], ["proof (prove)\nusing this:\n  {p \\<circ> q |p. p permutes S} = {p. p permutes S}\n\ngoal (1 subgoal):\n 1. (\\<lambda>p. p \\<circ> q) ` {p. p permutes S} = {p. p permutes S}", "by auto"], ["proof (state)\nthis:\n  (\\<lambda>p. p \\<circ> q) ` {p. p permutes S} = {p. p permutes S}\n\ngoal (1 subgoal):\n 1. finsum R f {p. p permutes S} =\n    (\\<Oplus>p\\<in>{p. p permutes S}. f (p \\<circ> q))", "from finsum_reindex[OF _ th1, of f]"], ["proof (chain)\npicking this:\n  f \\<in> (\\<lambda>p. p \\<circ> q) ` {p. p permutes S} \\<rightarrow>\n          carrier R \\<Longrightarrow>\n  finsum R f ((\\<lambda>p. p \\<circ> q) ` {p. p permutes S}) =\n  (\\<Oplus>x\\<in>{p. p permutes S}. f (x \\<circ> q))", "show ?thesis"], ["proof (prove)\nusing this:\n  f \\<in> (\\<lambda>p. p \\<circ> q) ` {p. p permutes S} \\<rightarrow>\n          carrier R \\<Longrightarrow>\n  finsum R f ((\\<lambda>p. p \\<circ> q) ` {p. p permutes S}) =\n  (\\<Oplus>x\\<in>{p. p permutes S}. f (x \\<circ> q))\n\ngoal (1 subgoal):\n 1. finsum R f {p. p permutes S} =\n    (\\<Oplus>p\\<in>{p. p permutes S}. f (p \\<circ> q))", "unfolding th0 th1 th3"], ["proof (prove)\nusing this:\n  f \\<in> {p. p permutes S} \\<rightarrow> carrier R \\<Longrightarrow>\n  finsum R f {p. p permutes S} =\n  finsum R (f \\<circ> (\\<lambda>x. x \\<circ> q)) {x. x permutes S}\n\ngoal (1 subgoal):\n 1. finsum R f {p. p permutes S} =\n    finsum R (f \\<circ> (\\<lambda>p. p \\<circ> q)) {p. p permutes S}", "using *"], ["proof (prove)\nusing this:\n  f \\<in> {p. p permutes S} \\<rightarrow> carrier R \\<Longrightarrow>\n  finsum R f {p. p permutes S} =\n  finsum R (f \\<circ> (\\<lambda>x. x \\<circ> q)) {x. x permutes S}\n  f \\<in> {p. p permutes S} \\<rightarrow> carrier R\n\ngoal (1 subgoal):\n 1. finsum R f {p. p permutes S} =\n    finsum R (f \\<circ> (\\<lambda>p. p \\<circ> q)) {p. p permutes S}", "."], ["proof (state)\nthis:\n  finsum R f {p. p permutes S} =\n  (\\<Oplus>p\\<in>{p. p permutes S}. f (p \\<circ> q))\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "text \\<open>The following lemma is slightly generalized from Determinants.thy in HMA.\\<close>"], ["", "lemma finite_bounded_functions:\n  assumes fS: \"finite S\"\n  shows \"finite T \\<Longrightarrow> finite {f. (\\<forall>i \\<in> T. f i \\<in> S) \\<and> (\\<forall>i. i \\<notin> T \\<longrightarrow> f i = i)}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite T \\<Longrightarrow>\n    finite\n     {f. (\\<forall>i\\<in>T. f i \\<in> S) \\<and>\n         (\\<forall>i. i \\<notin> T \\<longrightarrow> f i = i)}", "proof (induct T rule: finite_induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. finite\n     {f. (\\<forall>i\\<in>{}. f i \\<in> S) \\<and>\n         (\\<forall>i. i \\<notin> {} \\<longrightarrow> f i = i)}\n 2. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        finite\n         {f. (\\<forall>i\\<in>F. f i \\<in> S) \\<and>\n             (\\<forall>i. i \\<notin> F \\<longrightarrow> f i = i)}\\<rbrakk>\n       \\<Longrightarrow> finite\n                          {f. (\\<forall>i\\<in>insert x F.\n                                  f i \\<in> S) \\<and>\n                              (\\<forall>i.\n                                  i \\<notin> insert x F \\<longrightarrow>\n                                  f i = i)}", "case empty"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. finite\n     {f. (\\<forall>i\\<in>{}. f i \\<in> S) \\<and>\n         (\\<forall>i. i \\<notin> {} \\<longrightarrow> f i = i)}\n 2. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        finite\n         {f. (\\<forall>i\\<in>F. f i \\<in> S) \\<and>\n             (\\<forall>i. i \\<notin> F \\<longrightarrow> f i = i)}\\<rbrakk>\n       \\<Longrightarrow> finite\n                          {f. (\\<forall>i\\<in>insert x F.\n                                  f i \\<in> S) \\<and>\n                              (\\<forall>i.\n                                  i \\<notin> insert x F \\<longrightarrow>\n                                  f i = i)}", "have th: \"{f. \\<forall>i. f i = i} = {id}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {f. \\<forall>i. f i = i} = {id}", "by auto"], ["proof (state)\nthis:\n  {f. \\<forall>i. f i = i} = {id}\n\ngoal (2 subgoals):\n 1. finite\n     {f. (\\<forall>i\\<in>{}. f i \\<in> S) \\<and>\n         (\\<forall>i. i \\<notin> {} \\<longrightarrow> f i = i)}\n 2. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        finite\n         {f. (\\<forall>i\\<in>F. f i \\<in> S) \\<and>\n             (\\<forall>i. i \\<notin> F \\<longrightarrow> f i = i)}\\<rbrakk>\n       \\<Longrightarrow> finite\n                          {f. (\\<forall>i\\<in>insert x F.\n                                  f i \\<in> S) \\<and>\n                              (\\<forall>i.\n                                  i \\<notin> insert x F \\<longrightarrow>\n                                  f i = i)}", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. finite\n     {f. (\\<forall>i\\<in>{}. f i \\<in> S) \\<and>\n         (\\<forall>i. i \\<notin> {} \\<longrightarrow> f i = i)}", "by (auto simp add: th)"], ["proof (state)\nthis:\n  finite\n   {f. (\\<forall>i\\<in>{}. f i \\<in> S) \\<and>\n       (\\<forall>i. i \\<notin> {} \\<longrightarrow> f i = i)}\n\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        finite\n         {f. (\\<forall>i\\<in>F. f i \\<in> S) \\<and>\n             (\\<forall>i. i \\<notin> F \\<longrightarrow> f i = i)}\\<rbrakk>\n       \\<Longrightarrow> finite\n                          {f. (\\<forall>i\\<in>insert x F.\n                                  f i \\<in> S) \\<and>\n                              (\\<forall>i.\n                                  i \\<notin> insert x F \\<longrightarrow>\n                                  f i = i)}", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        finite\n         {f. (\\<forall>i\\<in>F. f i \\<in> S) \\<and>\n             (\\<forall>i. i \\<notin> F \\<longrightarrow> f i = i)}\\<rbrakk>\n       \\<Longrightarrow> finite\n                          {f. (\\<forall>i\\<in>insert x F.\n                                  f i \\<in> S) \\<and>\n                              (\\<forall>i.\n                                  i \\<notin> insert x F \\<longrightarrow>\n                                  f i = i)}", "case (insert a T)"], ["proof (state)\nthis:\n  finite T\n  a \\<notin> T\n  finite\n   {f. (\\<forall>i\\<in>T. f i \\<in> S) \\<and>\n       (\\<forall>i. i \\<notin> T \\<longrightarrow> f i = i)}\n\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        finite\n         {f. (\\<forall>i\\<in>F. f i \\<in> S) \\<and>\n             (\\<forall>i. i \\<notin> F \\<longrightarrow> f i = i)}\\<rbrakk>\n       \\<Longrightarrow> finite\n                          {f. (\\<forall>i\\<in>insert x F.\n                                  f i \\<in> S) \\<and>\n                              (\\<forall>i.\n                                  i \\<notin> insert x F \\<longrightarrow>\n                                  f i = i)}", "let ?f = \"\\<lambda>(y,g) i. if i = a then y else g i\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        finite\n         {f. (\\<forall>i\\<in>F. f i \\<in> S) \\<and>\n             (\\<forall>i. i \\<notin> F \\<longrightarrow> f i = i)}\\<rbrakk>\n       \\<Longrightarrow> finite\n                          {f. (\\<forall>i\\<in>insert x F.\n                                  f i \\<in> S) \\<and>\n                              (\\<forall>i.\n                                  i \\<notin> insert x F \\<longrightarrow>\n                                  f i = i)}", "let ?S = \"?f ` (S \\<times> {f. (\\<forall>i\\<in>T. f i \\<in> S) \\<and> (\\<forall>i. i \\<notin> T \\<longrightarrow> f i = i)})\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        finite\n         {f. (\\<forall>i\\<in>F. f i \\<in> S) \\<and>\n             (\\<forall>i. i \\<notin> F \\<longrightarrow> f i = i)}\\<rbrakk>\n       \\<Longrightarrow> finite\n                          {f. (\\<forall>i\\<in>insert x F.\n                                  f i \\<in> S) \\<and>\n                              (\\<forall>i.\n                                  i \\<notin> insert x F \\<longrightarrow>\n                                  f i = i)}", "have \"?S = {f. (\\<forall>i\\<in> insert a T. f i \\<in> S) \\<and> (\\<forall>i. i \\<notin> insert a T \\<longrightarrow> f i = i)}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>(y, g) i. if i = a then y else g i) `\n    (S \\<times>\n     {f. (\\<forall>i\\<in>T. f i \\<in> S) \\<and>\n         (\\<forall>i. i \\<notin> T \\<longrightarrow> f i = i)}) =\n    {f. (\\<forall>i\\<in>insert a T. f i \\<in> S) \\<and>\n        (\\<forall>i. i \\<notin> insert a T \\<longrightarrow> f i = i)}", "apply (auto simp add: image_iff)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>x a \\<in> S; \\<forall>i\\<in>T. x i \\<in> S;\n        \\<forall>i.\n           i \\<noteq> a \\<and> i \\<notin> T \\<longrightarrow>\n           x i = i\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xa\\<in>S.\n                            \\<exists>y.\n                               (\\<forall>i\\<in>T. y i \\<in> S) \\<and>\n                               (\\<forall>i.\n                                   i \\<notin> T \\<longrightarrow>\n                                   y i = i) \\<and>\n                               x = (\\<lambda>i. if i = a then xa else y i)", "apply (rule_tac x=\"x a\" in bexI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>x a \\<in> S; \\<forall>i\\<in>T. x i \\<in> S;\n        \\<forall>i.\n           i \\<noteq> a \\<and> i \\<notin> T \\<longrightarrow>\n           x i = i\\<rbrakk>\n       \\<Longrightarrow> \\<exists>y.\n                            (\\<forall>i\\<in>T. y i \\<in> S) \\<and>\n                            (\\<forall>i.\n                                i \\<notin> T \\<longrightarrow>\n                                y i = i) \\<and>\n                            x = (\\<lambda>i. if i = a then x a else y i)\n 2. \\<And>x.\n       \\<lbrakk>x a \\<in> S; \\<forall>i\\<in>T. x i \\<in> S;\n        \\<forall>i.\n           i \\<noteq> a \\<and> i \\<notin> T \\<longrightarrow>\n           x i = i\\<rbrakk>\n       \\<Longrightarrow> x a \\<in> S", "apply (rule_tac x = \"\\<lambda>i. if i = a then i else x i\" in exI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>x a \\<in> S; \\<forall>i\\<in>T. x i \\<in> S;\n        \\<forall>i.\n           i \\<noteq> a \\<and> i \\<notin> T \\<longrightarrow>\n           x i = i\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>i\\<in>T.\n                             (if i = a then i else x i) \\<in> S) \\<and>\n                         (\\<forall>i.\n                             i \\<notin> T \\<longrightarrow>\n                             (if i = a then i else x i) = i) \\<and>\n                         x =\n                         (\\<lambda>i.\n                             if i = a then x a\n                             else if i = a then i else x i)\n 2. \\<And>x.\n       \\<lbrakk>x a \\<in> S; \\<forall>i\\<in>T. x i \\<in> S;\n        \\<forall>i.\n           i \\<noteq> a \\<and> i \\<notin> T \\<longrightarrow>\n           x i = i\\<rbrakk>\n       \\<Longrightarrow> x a \\<in> S", "apply (insert insert, auto)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  (\\<lambda>(y, g) i. if i = a then y else g i) `\n  (S \\<times>\n   {f. (\\<forall>i\\<in>T. f i \\<in> S) \\<and>\n       (\\<forall>i. i \\<notin> T \\<longrightarrow> f i = i)}) =\n  {f. (\\<forall>i\\<in>insert a T. f i \\<in> S) \\<and>\n      (\\<forall>i. i \\<notin> insert a T \\<longrightarrow> f i = i)}\n\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        finite\n         {f. (\\<forall>i\\<in>F. f i \\<in> S) \\<and>\n             (\\<forall>i. i \\<notin> F \\<longrightarrow> f i = i)}\\<rbrakk>\n       \\<Longrightarrow> finite\n                          {f. (\\<forall>i\\<in>insert x F.\n                                  f i \\<in> S) \\<and>\n                              (\\<forall>i.\n                                  i \\<notin> insert x F \\<longrightarrow>\n                                  f i = i)}", "with finite_imageI[OF finite_cartesian_product[OF fS insert.hyps(3)], of ?f]"], ["proof (chain)\npicking this:\n  finite\n   ((\\<lambda>(y, g) i. if i = a then y else g i) `\n    (S \\<times>\n     {f. (\\<forall>i\\<in>T. f i \\<in> S) \\<and>\n         (\\<forall>i. i \\<notin> T \\<longrightarrow> f i = i)}))\n  (\\<lambda>(y, g) i. if i = a then y else g i) `\n  (S \\<times>\n   {f. (\\<forall>i\\<in>T. f i \\<in> S) \\<and>\n       (\\<forall>i. i \\<notin> T \\<longrightarrow> f i = i)}) =\n  {f. (\\<forall>i\\<in>insert a T. f i \\<in> S) \\<and>\n      (\\<forall>i. i \\<notin> insert a T \\<longrightarrow> f i = i)}", "show ?case"], ["proof (prove)\nusing this:\n  finite\n   ((\\<lambda>(y, g) i. if i = a then y else g i) `\n    (S \\<times>\n     {f. (\\<forall>i\\<in>T. f i \\<in> S) \\<and>\n         (\\<forall>i. i \\<notin> T \\<longrightarrow> f i = i)}))\n  (\\<lambda>(y, g) i. if i = a then y else g i) `\n  (S \\<times>\n   {f. (\\<forall>i\\<in>T. f i \\<in> S) \\<and>\n       (\\<forall>i. i \\<notin> T \\<longrightarrow> f i = i)}) =\n  {f. (\\<forall>i\\<in>insert a T. f i \\<in> S) \\<and>\n      (\\<forall>i. i \\<notin> insert a T \\<longrightarrow> f i = i)}\n\ngoal (1 subgoal):\n 1. finite\n     {f. (\\<forall>i\\<in>insert a T. f i \\<in> S) \\<and>\n         (\\<forall>i. i \\<notin> insert a T \\<longrightarrow> f i = i)}", "by metis"], ["proof (state)\nthis:\n  finite\n   {f. (\\<forall>i\\<in>insert a T. f i \\<in> S) \\<and>\n       (\\<forall>i. i \\<notin> insert a T \\<longrightarrow> f i = i)}\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma finite_bounded_functions':\n  assumes fS: \"finite S\"\n  shows \"finite T \\<Longrightarrow> finite {f. (\\<forall>i \\<in> T. f i \\<in> S) \\<and> (\\<forall>i. i \\<notin> T \\<longrightarrow> f i = j)}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite T \\<Longrightarrow>\n    finite\n     {f. (\\<forall>i\\<in>T. f i \\<in> S) \\<and>\n         (\\<forall>i. i \\<notin> T \\<longrightarrow> f i = j)}", "proof (induct T rule: finite_induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. finite\n     {f. (\\<forall>i\\<in>{}. f i \\<in> S) \\<and>\n         (\\<forall>i. i \\<notin> {} \\<longrightarrow> f i = j)}\n 2. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        finite\n         {f. (\\<forall>i\\<in>F. f i \\<in> S) \\<and>\n             (\\<forall>i. i \\<notin> F \\<longrightarrow> f i = j)}\\<rbrakk>\n       \\<Longrightarrow> finite\n                          {f. (\\<forall>i\\<in>insert x F.\n                                  f i \\<in> S) \\<and>\n                              (\\<forall>i.\n                                  i \\<notin> insert x F \\<longrightarrow>\n                                  f i = j)}", "case empty"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. finite\n     {f. (\\<forall>i\\<in>{}. f i \\<in> S) \\<and>\n         (\\<forall>i. i \\<notin> {} \\<longrightarrow> f i = j)}\n 2. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        finite\n         {f. (\\<forall>i\\<in>F. f i \\<in> S) \\<and>\n             (\\<forall>i. i \\<notin> F \\<longrightarrow> f i = j)}\\<rbrakk>\n       \\<Longrightarrow> finite\n                          {f. (\\<forall>i\\<in>insert x F.\n                                  f i \\<in> S) \\<and>\n                              (\\<forall>i.\n                                  i \\<notin> insert x F \\<longrightarrow>\n                                  f i = j)}", "have th: \"{f. \\<forall>i. f i = j} = {(\\<lambda> x. j)}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {f. \\<forall>i. f i = j} = {\\<lambda>x. j}", "by auto"], ["proof (state)\nthis:\n  {f. \\<forall>i. f i = j} = {\\<lambda>x. j}\n\ngoal (2 subgoals):\n 1. finite\n     {f. (\\<forall>i\\<in>{}. f i \\<in> S) \\<and>\n         (\\<forall>i. i \\<notin> {} \\<longrightarrow> f i = j)}\n 2. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        finite\n         {f. (\\<forall>i\\<in>F. f i \\<in> S) \\<and>\n             (\\<forall>i. i \\<notin> F \\<longrightarrow> f i = j)}\\<rbrakk>\n       \\<Longrightarrow> finite\n                          {f. (\\<forall>i\\<in>insert x F.\n                                  f i \\<in> S) \\<and>\n                              (\\<forall>i.\n                                  i \\<notin> insert x F \\<longrightarrow>\n                                  f i = j)}", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. finite\n     {f. (\\<forall>i\\<in>{}. f i \\<in> S) \\<and>\n         (\\<forall>i. i \\<notin> {} \\<longrightarrow> f i = j)}", "by (auto simp add: th)"], ["proof (state)\nthis:\n  finite\n   {f. (\\<forall>i\\<in>{}. f i \\<in> S) \\<and>\n       (\\<forall>i. i \\<notin> {} \\<longrightarrow> f i = j)}\n\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        finite\n         {f. (\\<forall>i\\<in>F. f i \\<in> S) \\<and>\n             (\\<forall>i. i \\<notin> F \\<longrightarrow> f i = j)}\\<rbrakk>\n       \\<Longrightarrow> finite\n                          {f. (\\<forall>i\\<in>insert x F.\n                                  f i \\<in> S) \\<and>\n                              (\\<forall>i.\n                                  i \\<notin> insert x F \\<longrightarrow>\n                                  f i = j)}", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        finite\n         {f. (\\<forall>i\\<in>F. f i \\<in> S) \\<and>\n             (\\<forall>i. i \\<notin> F \\<longrightarrow> f i = j)}\\<rbrakk>\n       \\<Longrightarrow> finite\n                          {f. (\\<forall>i\\<in>insert x F.\n                                  f i \\<in> S) \\<and>\n                              (\\<forall>i.\n                                  i \\<notin> insert x F \\<longrightarrow>\n                                  f i = j)}", "case (insert a T)"], ["proof (state)\nthis:\n  finite T\n  a \\<notin> T\n  finite\n   {f. (\\<forall>i\\<in>T. f i \\<in> S) \\<and>\n       (\\<forall>i. i \\<notin> T \\<longrightarrow> f i = j)}\n\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        finite\n         {f. (\\<forall>i\\<in>F. f i \\<in> S) \\<and>\n             (\\<forall>i. i \\<notin> F \\<longrightarrow> f i = j)}\\<rbrakk>\n       \\<Longrightarrow> finite\n                          {f. (\\<forall>i\\<in>insert x F.\n                                  f i \\<in> S) \\<and>\n                              (\\<forall>i.\n                                  i \\<notin> insert x F \\<longrightarrow>\n                                  f i = j)}", "let ?f = \"\\<lambda>(y,g) i. if i = a then y else g i\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        finite\n         {f. (\\<forall>i\\<in>F. f i \\<in> S) \\<and>\n             (\\<forall>i. i \\<notin> F \\<longrightarrow> f i = j)}\\<rbrakk>\n       \\<Longrightarrow> finite\n                          {f. (\\<forall>i\\<in>insert x F.\n                                  f i \\<in> S) \\<and>\n                              (\\<forall>i.\n                                  i \\<notin> insert x F \\<longrightarrow>\n                                  f i = j)}", "let ?S = \"?f ` (S \\<times> {f. (\\<forall>i\\<in>T. f i \\<in> S) \\<and> (\\<forall>i. i \\<notin> T \\<longrightarrow> f i = j)})\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        finite\n         {f. (\\<forall>i\\<in>F. f i \\<in> S) \\<and>\n             (\\<forall>i. i \\<notin> F \\<longrightarrow> f i = j)}\\<rbrakk>\n       \\<Longrightarrow> finite\n                          {f. (\\<forall>i\\<in>insert x F.\n                                  f i \\<in> S) \\<and>\n                              (\\<forall>i.\n                                  i \\<notin> insert x F \\<longrightarrow>\n                                  f i = j)}", "have \"?S = {f. (\\<forall>i\\<in> insert a T. f i \\<in> S) \\<and> (\\<forall>i. i \\<notin> insert a T \\<longrightarrow> f i = j)}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>(y, g) i. if i = a then y else g i) `\n    (S \\<times>\n     {f. (\\<forall>i\\<in>T. f i \\<in> S) \\<and>\n         (\\<forall>i. i \\<notin> T \\<longrightarrow> f i = j)}) =\n    {f. (\\<forall>i\\<in>insert a T. f i \\<in> S) \\<and>\n        (\\<forall>i. i \\<notin> insert a T \\<longrightarrow> f i = j)}", "apply (auto simp add: image_iff)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>x a \\<in> S; \\<forall>i\\<in>T. x i \\<in> S;\n        \\<forall>i.\n           i \\<noteq> a \\<and> i \\<notin> T \\<longrightarrow>\n           x i = j\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xa\\<in>S.\n                            \\<exists>y.\n                               (\\<forall>i\\<in>T. y i \\<in> S) \\<and>\n                               (\\<forall>i.\n                                   i \\<notin> T \\<longrightarrow>\n                                   y i = j) \\<and>\n                               x = (\\<lambda>i. if i = a then xa else y i)", "apply (rule_tac x=\"x a\" in bexI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>x a \\<in> S; \\<forall>i\\<in>T. x i \\<in> S;\n        \\<forall>i.\n           i \\<noteq> a \\<and> i \\<notin> T \\<longrightarrow>\n           x i = j\\<rbrakk>\n       \\<Longrightarrow> \\<exists>y.\n                            (\\<forall>i\\<in>T. y i \\<in> S) \\<and>\n                            (\\<forall>i.\n                                i \\<notin> T \\<longrightarrow>\n                                y i = j) \\<and>\n                            x = (\\<lambda>i. if i = a then x a else y i)\n 2. \\<And>x.\n       \\<lbrakk>x a \\<in> S; \\<forall>i\\<in>T. x i \\<in> S;\n        \\<forall>i.\n           i \\<noteq> a \\<and> i \\<notin> T \\<longrightarrow>\n           x i = j\\<rbrakk>\n       \\<Longrightarrow> x a \\<in> S", "apply (rule_tac x = \"\\<lambda>i. if i = a then j else x i\" in exI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>x a \\<in> S; \\<forall>i\\<in>T. x i \\<in> S;\n        \\<forall>i.\n           i \\<noteq> a \\<and> i \\<notin> T \\<longrightarrow>\n           x i = j\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>i\\<in>T.\n                             (if i = a then j else x i) \\<in> S) \\<and>\n                         (\\<forall>i.\n                             i \\<notin> T \\<longrightarrow>\n                             (if i = a then j else x i) = j) \\<and>\n                         x =\n                         (\\<lambda>i.\n                             if i = a then x a\n                             else if i = a then j else x i)\n 2. \\<And>x.\n       \\<lbrakk>x a \\<in> S; \\<forall>i\\<in>T. x i \\<in> S;\n        \\<forall>i.\n           i \\<noteq> a \\<and> i \\<notin> T \\<longrightarrow>\n           x i = j\\<rbrakk>\n       \\<Longrightarrow> x a \\<in> S", "apply (insert insert, auto)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  (\\<lambda>(y, g) i. if i = a then y else g i) `\n  (S \\<times>\n   {f. (\\<forall>i\\<in>T. f i \\<in> S) \\<and>\n       (\\<forall>i. i \\<notin> T \\<longrightarrow> f i = j)}) =\n  {f. (\\<forall>i\\<in>insert a T. f i \\<in> S) \\<and>\n      (\\<forall>i. i \\<notin> insert a T \\<longrightarrow> f i = j)}\n\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        finite\n         {f. (\\<forall>i\\<in>F. f i \\<in> S) \\<and>\n             (\\<forall>i. i \\<notin> F \\<longrightarrow> f i = j)}\\<rbrakk>\n       \\<Longrightarrow> finite\n                          {f. (\\<forall>i\\<in>insert x F.\n                                  f i \\<in> S) \\<and>\n                              (\\<forall>i.\n                                  i \\<notin> insert x F \\<longrightarrow>\n                                  f i = j)}", "with finite_imageI[OF finite_cartesian_product[OF fS insert.hyps(3)], of ?f]"], ["proof (chain)\npicking this:\n  finite\n   ((\\<lambda>(y, g) i. if i = a then y else g i) `\n    (S \\<times>\n     {f. (\\<forall>i\\<in>T. f i \\<in> S) \\<and>\n         (\\<forall>i. i \\<notin> T \\<longrightarrow> f i = j)}))\n  (\\<lambda>(y, g) i. if i = a then y else g i) `\n  (S \\<times>\n   {f. (\\<forall>i\\<in>T. f i \\<in> S) \\<and>\n       (\\<forall>i. i \\<notin> T \\<longrightarrow> f i = j)}) =\n  {f. (\\<forall>i\\<in>insert a T. f i \\<in> S) \\<and>\n      (\\<forall>i. i \\<notin> insert a T \\<longrightarrow> f i = j)}", "show ?case"], ["proof (prove)\nusing this:\n  finite\n   ((\\<lambda>(y, g) i. if i = a then y else g i) `\n    (S \\<times>\n     {f. (\\<forall>i\\<in>T. f i \\<in> S) \\<and>\n         (\\<forall>i. i \\<notin> T \\<longrightarrow> f i = j)}))\n  (\\<lambda>(y, g) i. if i = a then y else g i) `\n  (S \\<times>\n   {f. (\\<forall>i\\<in>T. f i \\<in> S) \\<and>\n       (\\<forall>i. i \\<notin> T \\<longrightarrow> f i = j)}) =\n  {f. (\\<forall>i\\<in>insert a T. f i \\<in> S) \\<and>\n      (\\<forall>i. i \\<notin> insert a T \\<longrightarrow> f i = j)}\n\ngoal (1 subgoal):\n 1. finite\n     {f. (\\<forall>i\\<in>insert a T. f i \\<in> S) \\<and>\n         (\\<forall>i. i \\<notin> insert a T \\<longrightarrow> f i = j)}", "by metis"], ["proof (state)\nthis:\n  finite\n   {f. (\\<forall>i\\<in>insert a T. f i \\<in> S) \\<and>\n       (\\<forall>i. i \\<notin> insert a T \\<longrightarrow> f i = j)}\n\ngoal:\nNo subgoals!", "qed"], ["", "context\n  fixes A :: \"'a set\" \n    and B :: \"'b set\"\n    and a_to_b :: \"'a \\<Rightarrow> 'b\"\n    and b_to_a :: \"'b \\<Rightarrow> 'a\"\n  assumes ab: \"\\<And> a. a \\<in> A \\<Longrightarrow> a_to_b a \\<in> B\"\n    and ba: \"\\<And> b. b \\<in> B \\<Longrightarrow> b_to_a b \\<in> A\"\n    and ab_ba: \"\\<And> a. a \\<in> A \\<Longrightarrow> b_to_a (a_to_b a) = a\"\n    and ba_ab: \"\\<And> b. b \\<in> B \\<Longrightarrow> a_to_b (b_to_a b) = b\"\nbegin"], ["", "qualified"], ["", "lemma permutes_memb: fixes p :: \"'b \\<Rightarrow> 'b\"\n  assumes p: \"p permutes B\"\n  and a: \"a \\<in> A\"\n  defines \"ip \\<equiv> Hilbert_Choice.inv p\"\n  shows \"a \\<in> A\" \"a_to_b a \\<in> B\" \"ip (a_to_b a) \\<in> B\" \"p (a_to_b a) \\<in> B\" \n    \"b_to_a (p (a_to_b a)) \\<in> A\" \"b_to_a (ip (a_to_b a)) \\<in> A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (a \\<in> A &&& a_to_b a \\<in> B &&& ip (a_to_b a) \\<in> B) &&&\n    p (a_to_b a) \\<in> B &&&\n    b_to_a (p (a_to_b a)) \\<in> A &&& b_to_a (ip (a_to_b a)) \\<in> A", "proof -"], ["proof (state)\ngoal (6 subgoals):\n 1. a \\<in> A\n 2. a_to_b a \\<in> B\n 3. ip (a_to_b a) \\<in> B\n 4. p (a_to_b a) \\<in> B\n 5. b_to_a (p (a_to_b a)) \\<in> A\n 6. b_to_a (ip (a_to_b a)) \\<in> A", "let ?b = \"a_to_b a\""], ["proof (state)\ngoal (6 subgoals):\n 1. a \\<in> A\n 2. a_to_b a \\<in> B\n 3. ip (a_to_b a) \\<in> B\n 4. p (a_to_b a) \\<in> B\n 5. b_to_a (p (a_to_b a)) \\<in> A\n 6. b_to_a (ip (a_to_b a)) \\<in> A", "from p"], ["proof (chain)\npicking this:\n  p permutes B", "have ip: \"ip permutes B\""], ["proof (prove)\nusing this:\n  p permutes B\n\ngoal (1 subgoal):\n 1. ip permutes B", "unfolding ip_def"], ["proof (prove)\nusing this:\n  p permutes B\n\ngoal (1 subgoal):\n 1. inv p permutes B", "by (rule permutes_inv)"], ["proof (state)\nthis:\n  ip permutes B\n\ngoal (6 subgoals):\n 1. a \\<in> A\n 2. a_to_b a \\<in> B\n 3. ip (a_to_b a) \\<in> B\n 4. p (a_to_b a) \\<in> B\n 5. b_to_a (p (a_to_b a)) \\<in> A\n 6. b_to_a (ip (a_to_b a)) \\<in> A", "note in_ip = permutes_in_image[OF ip]"], ["proof (state)\nthis:\n  (ip ?x \\<in> B) = (?x \\<in> B)\n\ngoal (6 subgoals):\n 1. a \\<in> A\n 2. a_to_b a \\<in> B\n 3. ip (a_to_b a) \\<in> B\n 4. p (a_to_b a) \\<in> B\n 5. b_to_a (p (a_to_b a)) \\<in> A\n 6. b_to_a (ip (a_to_b a)) \\<in> A", "note in_p = permutes_in_image[OF p]"], ["proof (state)\nthis:\n  (p ?x \\<in> B) = (?x \\<in> B)\n\ngoal (6 subgoals):\n 1. a \\<in> A\n 2. a_to_b a \\<in> B\n 3. ip (a_to_b a) \\<in> B\n 4. p (a_to_b a) \\<in> B\n 5. b_to_a (p (a_to_b a)) \\<in> A\n 6. b_to_a (ip (a_to_b a)) \\<in> A", "show a: \"a \\<in> A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<in> A", "by fact"], ["proof (state)\nthis:\n  a \\<in> A\n\ngoal (5 subgoals):\n 1. a_to_b a \\<in> B\n 2. ip (a_to_b a) \\<in> B\n 3. p (a_to_b a) \\<in> B\n 4. b_to_a (p (a_to_b a)) \\<in> A\n 5. b_to_a (ip (a_to_b a)) \\<in> A", "show b: \"?b \\<in> B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a_to_b a \\<in> B", "by (rule ab[OF a])"], ["proof (state)\nthis:\n  a_to_b a \\<in> B\n\ngoal (4 subgoals):\n 1. ip (a_to_b a) \\<in> B\n 2. p (a_to_b a) \\<in> B\n 3. b_to_a (p (a_to_b a)) \\<in> A\n 4. b_to_a (ip (a_to_b a)) \\<in> A", "show pb: \"p ?b \\<in> B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. p (a_to_b a) \\<in> B", "unfolding in_p"], ["proof (prove)\ngoal (1 subgoal):\n 1. a_to_b a \\<in> B", "by (rule b)"], ["proof (state)\nthis:\n  p (a_to_b a) \\<in> B\n\ngoal (3 subgoals):\n 1. ip (a_to_b a) \\<in> B\n 2. b_to_a (p (a_to_b a)) \\<in> A\n 3. b_to_a (ip (a_to_b a)) \\<in> A", "show ipb: \"ip ?b \\<in> B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ip (a_to_b a) \\<in> B", "unfolding in_ip"], ["proof (prove)\ngoal (1 subgoal):\n 1. a_to_b a \\<in> B", "by (rule b)"], ["proof (state)\nthis:\n  ip (a_to_b a) \\<in> B\n\ngoal (2 subgoals):\n 1. b_to_a (p (a_to_b a)) \\<in> A\n 2. b_to_a (ip (a_to_b a)) \\<in> A", "show \"b_to_a (p ?b) \\<in> A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. b_to_a (p (a_to_b a)) \\<in> A", "by (rule ba[OF pb])"], ["proof (state)\nthis:\n  b_to_a (p (a_to_b a)) \\<in> A\n\ngoal (1 subgoal):\n 1. b_to_a (ip (a_to_b a)) \\<in> A", "show \"b_to_a (ip ?b) \\<in> A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. b_to_a (ip (a_to_b a)) \\<in> A", "by (rule ba[OF ipb])"], ["proof (state)\nthis:\n  b_to_a (ip (a_to_b a)) \\<in> A\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma permutes_bij_main: \n  \"{p . p permutes A} \\<supseteq> (\\<lambda> p a. if a \\<in> A then b_to_a (p (a_to_b a)) else a) ` {p . p permutes B}\" \n  (is \"?A \\<supseteq> ?f ` ?B\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>p a. if a \\<in> A then b_to_a (p (a_to_b a)) else a) `\n    {p. p permutes B}\n    \\<subseteq> {p. p permutes A}", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> (\\<lambda>p a.\n                   if a \\<in> A then b_to_a (p (a_to_b a)) else a) `\n               {p. p permutes B} \\<Longrightarrow>\n       x \\<in> {p. p permutes A}", "note d = permutes_def"], ["proof (state)\nthis:\n  (?p permutes ?S) =\n  ((\\<forall>x. x \\<notin> ?S \\<longrightarrow> ?p x = x) \\<and>\n   (\\<forall>y. \\<exists>!x. ?p x = y))\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> (\\<lambda>p a.\n                   if a \\<in> A then b_to_a (p (a_to_b a)) else a) `\n               {p. p permutes B} \\<Longrightarrow>\n       x \\<in> {p. p permutes A}", "let ?g = \"\\<lambda> q b. if b \\<in> B then a_to_b (q (b_to_a b)) else b\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> (\\<lambda>p a.\n                   if a \\<in> A then b_to_a (p (a_to_b a)) else a) `\n               {p. p permutes B} \\<Longrightarrow>\n       x \\<in> {p. p permutes A}", "let ?inv = \"Hilbert_Choice.inv\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> (\\<lambda>p a.\n                   if a \\<in> A then b_to_a (p (a_to_b a)) else a) `\n               {p. p permutes B} \\<Longrightarrow>\n       x \\<in> {p. p permutes A}", "fix p"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> (\\<lambda>p a.\n                   if a \\<in> A then b_to_a (p (a_to_b a)) else a) `\n               {p. p permutes B} \\<Longrightarrow>\n       x \\<in> {p. p permutes A}", "assume p: \"p \\<in> ?f ` ?B\""], ["proof (state)\nthis:\n  p \\<in> (\\<lambda>p a. if a \\<in> A then b_to_a (p (a_to_b a)) else a) `\n          {p. p permutes B}\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> (\\<lambda>p a.\n                   if a \\<in> A then b_to_a (p (a_to_b a)) else a) `\n               {p. p permutes B} \\<Longrightarrow>\n       x \\<in> {p. p permutes A}", "then"], ["proof (chain)\npicking this:\n  p \\<in> (\\<lambda>p a. if a \\<in> A then b_to_a (p (a_to_b a)) else a) `\n          {p. p permutes B}", "obtain q where q: \"q permutes B\" and p: \"p = ?f q\""], ["proof (prove)\nusing this:\n  p \\<in> (\\<lambda>p a. if a \\<in> A then b_to_a (p (a_to_b a)) else a) `\n          {p. p permutes B}\n\ngoal (1 subgoal):\n 1. (\\<And>q.\n        \\<lbrakk>q permutes B;\n         p =\n         (\\<lambda>a.\n             if a \\<in> A then b_to_a (q (a_to_b a)) else a)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  q permutes B\n  p = (\\<lambda>a. if a \\<in> A then b_to_a (q (a_to_b a)) else a)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> (\\<lambda>p a.\n                   if a \\<in> A then b_to_a (p (a_to_b a)) else a) `\n               {p. p permutes B} \\<Longrightarrow>\n       x \\<in> {p. p permutes A}", "let ?iq = \"?inv q\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> (\\<lambda>p a.\n                   if a \\<in> A then b_to_a (p (a_to_b a)) else a) `\n               {p. p permutes B} \\<Longrightarrow>\n       x \\<in> {p. p permutes A}", "from q"], ["proof (chain)\npicking this:\n  q permutes B", "have iq: \"?iq permutes B\""], ["proof (prove)\nusing this:\n  q permutes B\n\ngoal (1 subgoal):\n 1. inv q permutes B", "by (rule permutes_inv)"], ["proof (state)\nthis:\n  inv q permutes B\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> (\\<lambda>p a.\n                   if a \\<in> A then b_to_a (p (a_to_b a)) else a) `\n               {p. p permutes B} \\<Longrightarrow>\n       x \\<in> {p. p permutes A}", "note in_iq = permutes_in_image[OF iq]"], ["proof (state)\nthis:\n  (inv q ?x \\<in> B) = (?x \\<in> B)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> (\\<lambda>p a.\n                   if a \\<in> A then b_to_a (p (a_to_b a)) else a) `\n               {p. p permutes B} \\<Longrightarrow>\n       x \\<in> {p. p permutes A}", "note in_q = permutes_in_image[OF q]"], ["proof (state)\nthis:\n  (q ?x \\<in> B) = (?x \\<in> B)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> (\\<lambda>p a.\n                   if a \\<in> A then b_to_a (p (a_to_b a)) else a) `\n               {p. p permutes B} \\<Longrightarrow>\n       x \\<in> {p. p permutes A}", "have qiB: \"\\<And> b. b \\<in> B \\<Longrightarrow> q (?iq b) = b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>b. b \\<in> B \\<Longrightarrow> q (inv q b) = b", "using q"], ["proof (prove)\nusing this:\n  q permutes B\n\ngoal (1 subgoal):\n 1. \\<And>b. b \\<in> B \\<Longrightarrow> q (inv q b) = b", "by (rule permutes_inverses)"], ["proof (state)\nthis:\n  ?b1 \\<in> B \\<Longrightarrow> q (inv q ?b1) = ?b1\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> (\\<lambda>p a.\n                   if a \\<in> A then b_to_a (p (a_to_b a)) else a) `\n               {p. p permutes B} \\<Longrightarrow>\n       x \\<in> {p. p permutes A}", "have iqB: \"\\<And> b. b \\<in> B \\<Longrightarrow> ?iq (q b) = b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>b. b \\<in> B \\<Longrightarrow> inv q (q b) = b", "using q"], ["proof (prove)\nusing this:\n  q permutes B\n\ngoal (1 subgoal):\n 1. \\<And>b. b \\<in> B \\<Longrightarrow> inv q (q b) = b", "by (rule permutes_inverses)"], ["proof (state)\nthis:\n  ?b1 \\<in> B \\<Longrightarrow> inv q (q ?b1) = ?b1\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> (\\<lambda>p a.\n                   if a \\<in> A then b_to_a (p (a_to_b a)) else a) `\n               {p. p permutes B} \\<Longrightarrow>\n       x \\<in> {p. p permutes A}", "from q[unfolded d]"], ["proof (chain)\npicking this:\n  (\\<forall>x. x \\<notin> B \\<longrightarrow> q x = x) \\<and>\n  (\\<forall>y. \\<exists>!x. q x = y)", "have q1: \"\\<And> b. b \\<notin> B \\<Longrightarrow> q b = b\" \n   and q2: \"\\<And> b. \\<exists>!b'. q b' = b\""], ["proof (prove)\nusing this:\n  (\\<forall>x. x \\<notin> B \\<longrightarrow> q x = x) \\<and>\n  (\\<forall>y. \\<exists>!x. q x = y)\n\ngoal (1 subgoal):\n 1. (\\<And>b. b \\<notin> B \\<Longrightarrow> q b = b) &&&\n    (\\<And>b. \\<exists>!b'. q b' = b)", "by auto"], ["proof (state)\nthis:\n  ?b1 \\<notin> B \\<Longrightarrow> q ?b1 = ?b1\n  \\<exists>!b'. q b' = ?b1\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> (\\<lambda>p a.\n                   if a \\<in> A then b_to_a (p (a_to_b a)) else a) `\n               {p. p permutes B} \\<Longrightarrow>\n       x \\<in> {p. p permutes A}", "note memb = permutes_memb[OF q]"], ["proof (state)\nthis:\n  ?a \\<in> A \\<Longrightarrow> ?a \\<in> A\n  ?a \\<in> A \\<Longrightarrow> a_to_b ?a \\<in> B\n  ?a \\<in> A \\<Longrightarrow> inv q (a_to_b ?a) \\<in> B\n  ?a \\<in> A \\<Longrightarrow> q (a_to_b ?a) \\<in> B\n  ?a \\<in> A \\<Longrightarrow> b_to_a (q (a_to_b ?a)) \\<in> A\n  ?a \\<in> A \\<Longrightarrow> b_to_a (inv q (a_to_b ?a)) \\<in> A\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> (\\<lambda>p a.\n                   if a \\<in> A then b_to_a (p (a_to_b a)) else a) `\n               {p. p permutes B} \\<Longrightarrow>\n       x \\<in> {p. p permutes A}", "show \"p \\<in> ?A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. p \\<in> {p. p permutes A}", "unfolding p d"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>a. if a \\<in> A then b_to_a (q (a_to_b a)) else a)\n    \\<in> {p. (\\<forall>x. x \\<notin> A \\<longrightarrow> p x = x) \\<and>\n              (\\<forall>y. \\<exists>!x. p x = y)}", "proof (rule, intro conjI impI allI, force)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>y.\n       \\<exists>!x. (if x \\<in> A then b_to_a (q (a_to_b x)) else x) = y", "fix a"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>y.\n       \\<exists>!x. (if x \\<in> A then b_to_a (q (a_to_b x)) else x) = y", "show \"\\<exists>!a'. ?f q a' = a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>!a'. (if a' \\<in> A then b_to_a (q (a_to_b a')) else a') = a", "proof (cases \"a \\<in> A\")"], ["proof (state)\ngoal (2 subgoals):\n 1. a \\<in> A \\<Longrightarrow>\n    \\<exists>!a'. (if a' \\<in> A then b_to_a (q (a_to_b a')) else a') = a\n 2. a \\<notin> A \\<Longrightarrow>\n    \\<exists>!a'. (if a' \\<in> A then b_to_a (q (a_to_b a')) else a') = a", "case True"], ["proof (state)\nthis:\n  a \\<in> A\n\ngoal (2 subgoals):\n 1. a \\<in> A \\<Longrightarrow>\n    \\<exists>!a'. (if a' \\<in> A then b_to_a (q (a_to_b a')) else a') = a\n 2. a \\<notin> A \\<Longrightarrow>\n    \\<exists>!a'. (if a' \\<in> A then b_to_a (q (a_to_b a')) else a') = a", "note a = memb[OF True]"], ["proof (state)\nthis:\n  a \\<in> A\n  a_to_b a \\<in> B\n  inv q (a_to_b a) \\<in> B\n  q (a_to_b a) \\<in> B\n  b_to_a (q (a_to_b a)) \\<in> A\n  b_to_a (inv q (a_to_b a)) \\<in> A\n\ngoal (2 subgoals):\n 1. a \\<in> A \\<Longrightarrow>\n    \\<exists>!a'. (if a' \\<in> A then b_to_a (q (a_to_b a')) else a') = a\n 2. a \\<notin> A \\<Longrightarrow>\n    \\<exists>!a'. (if a' \\<in> A then b_to_a (q (a_to_b a')) else a') = a", "let ?a = \"b_to_a (?iq (a_to_b a))\""], ["proof (state)\ngoal (2 subgoals):\n 1. a \\<in> A \\<Longrightarrow>\n    \\<exists>!a'. (if a' \\<in> A then b_to_a (q (a_to_b a')) else a') = a\n 2. a \\<notin> A \\<Longrightarrow>\n    \\<exists>!a'. (if a' \\<in> A then b_to_a (q (a_to_b a')) else a') = a", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>!a'. (if a' \\<in> A then b_to_a (q (a_to_b a')) else a') = a", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. (if ?a \\<in> A then b_to_a (q (a_to_b ?a)) else ?a) = a\n 2. \\<And>a'.\n       (if a' \\<in> A then b_to_a (q (a_to_b a')) else a') =\n       a \\<Longrightarrow>\n       a' = ?a", "show \"?f q ?a = a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (if b_to_a (inv q (a_to_b a)) \\<in> A\n     then b_to_a (q (a_to_b (b_to_a (inv q (a_to_b a)))))\n     else b_to_a (inv q (a_to_b a))) =\n    a", "using a"], ["proof (prove)\nusing this:\n  a \\<in> A\n  a_to_b a \\<in> B\n  inv q (a_to_b a) \\<in> B\n  q (a_to_b a) \\<in> B\n  b_to_a (q (a_to_b a)) \\<in> A\n  b_to_a (inv q (a_to_b a)) \\<in> A\n\ngoal (1 subgoal):\n 1. (if b_to_a (inv q (a_to_b a)) \\<in> A\n     then b_to_a (q (a_to_b (b_to_a (inv q (a_to_b a)))))\n     else b_to_a (inv q (a_to_b a))) =\n    a", "by (simp add: ba_ab qiB ab_ba)"], ["proof (state)\nthis:\n  (if b_to_a (inv q (a_to_b a)) \\<in> A\n   then b_to_a (q (a_to_b (b_to_a (inv q (a_to_b a)))))\n   else b_to_a (inv q (a_to_b a))) =\n  a\n\ngoal (1 subgoal):\n 1. \\<And>a'.\n       (if a' \\<in> A then b_to_a (q (a_to_b a')) else a') =\n       a \\<Longrightarrow>\n       a' = b_to_a (inv q (a_to_b a))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a'.\n       (if a' \\<in> A then b_to_a (q (a_to_b a')) else a') =\n       a \\<Longrightarrow>\n       a' = b_to_a (inv q (a_to_b a))", "fix a'"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a'.\n       (if a' \\<in> A then b_to_a (q (a_to_b a')) else a') =\n       a \\<Longrightarrow>\n       a' = b_to_a (inv q (a_to_b a))", "assume id: \"?f q a' = a\""], ["proof (state)\nthis:\n  (if a' \\<in> A then b_to_a (q (a_to_b a')) else a') = a\n\ngoal (1 subgoal):\n 1. \\<And>a'.\n       (if a' \\<in> A then b_to_a (q (a_to_b a')) else a') =\n       a \\<Longrightarrow>\n       a' = b_to_a (inv q (a_to_b a))", "show \"a' = ?a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a' = b_to_a (inv q (a_to_b a))", "proof (cases \"a' \\<in> A\")"], ["proof (state)\ngoal (2 subgoals):\n 1. a' \\<in> A \\<Longrightarrow> a' = b_to_a (inv q (a_to_b a))\n 2. a' \\<notin> A \\<Longrightarrow> a' = b_to_a (inv q (a_to_b a))", "case False"], ["proof (state)\nthis:\n  a' \\<notin> A\n\ngoal (2 subgoals):\n 1. a' \\<in> A \\<Longrightarrow> a' = b_to_a (inv q (a_to_b a))\n 2. a' \\<notin> A \\<Longrightarrow> a' = b_to_a (inv q (a_to_b a))", "thus ?thesis"], ["proof (prove)\nusing this:\n  a' \\<notin> A\n\ngoal (1 subgoal):\n 1. a' = b_to_a (inv q (a_to_b a))", "using id a"], ["proof (prove)\nusing this:\n  a' \\<notin> A\n  (if a' \\<in> A then b_to_a (q (a_to_b a')) else a') = a\n  a \\<in> A\n  a_to_b a \\<in> B\n  inv q (a_to_b a) \\<in> B\n  q (a_to_b a) \\<in> B\n  b_to_a (q (a_to_b a)) \\<in> A\n  b_to_a (inv q (a_to_b a)) \\<in> A\n\ngoal (1 subgoal):\n 1. a' = b_to_a (inv q (a_to_b a))", "by auto"], ["proof (state)\nthis:\n  a' = b_to_a (inv q (a_to_b a))\n\ngoal (1 subgoal):\n 1. a' \\<in> A \\<Longrightarrow> a' = b_to_a (inv q (a_to_b a))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. a' \\<in> A \\<Longrightarrow> a' = b_to_a (inv q (a_to_b a))", "case True"], ["proof (state)\nthis:\n  a' \\<in> A\n\ngoal (1 subgoal):\n 1. a' \\<in> A \\<Longrightarrow> a' = b_to_a (inv q (a_to_b a))", "note a' = memb[OF this]"], ["proof (state)\nthis:\n  a' \\<in> A\n  a_to_b a' \\<in> B\n  inv q (a_to_b a') \\<in> B\n  q (a_to_b a') \\<in> B\n  b_to_a (q (a_to_b a')) \\<in> A\n  b_to_a (inv q (a_to_b a')) \\<in> A\n\ngoal (1 subgoal):\n 1. a' \\<in> A \\<Longrightarrow> a' = b_to_a (inv q (a_to_b a))", "from id True"], ["proof (chain)\npicking this:\n  (if a' \\<in> A then b_to_a (q (a_to_b a')) else a') = a\n  a' \\<in> A", "have \"b_to_a (q (a_to_b a')) = a\""], ["proof (prove)\nusing this:\n  (if a' \\<in> A then b_to_a (q (a_to_b a')) else a') = a\n  a' \\<in> A\n\ngoal (1 subgoal):\n 1. b_to_a (q (a_to_b a')) = a", "by simp"], ["proof (state)\nthis:\n  b_to_a (q (a_to_b a')) = a\n\ngoal (1 subgoal):\n 1. a' \\<in> A \\<Longrightarrow> a' = b_to_a (inv q (a_to_b a))", "from arg_cong[OF this, of \"a_to_b\"] a' a"], ["proof (chain)\npicking this:\n  a_to_b (b_to_a (q (a_to_b a'))) = a_to_b a\n  a' \\<in> A\n  a_to_b a' \\<in> B\n  inv q (a_to_b a') \\<in> B\n  q (a_to_b a') \\<in> B\n  b_to_a (q (a_to_b a')) \\<in> A\n  b_to_a (inv q (a_to_b a')) \\<in> A\n  a \\<in> A\n  a_to_b a \\<in> B\n  inv q (a_to_b a) \\<in> B\n  q (a_to_b a) \\<in> B\n  b_to_a (q (a_to_b a)) \\<in> A\n  b_to_a (inv q (a_to_b a)) \\<in> A", "have \"q (a_to_b a') = a_to_b a\""], ["proof (prove)\nusing this:\n  a_to_b (b_to_a (q (a_to_b a'))) = a_to_b a\n  a' \\<in> A\n  a_to_b a' \\<in> B\n  inv q (a_to_b a') \\<in> B\n  q (a_to_b a') \\<in> B\n  b_to_a (q (a_to_b a')) \\<in> A\n  b_to_a (inv q (a_to_b a')) \\<in> A\n  a \\<in> A\n  a_to_b a \\<in> B\n  inv q (a_to_b a) \\<in> B\n  q (a_to_b a) \\<in> B\n  b_to_a (q (a_to_b a)) \\<in> A\n  b_to_a (inv q (a_to_b a)) \\<in> A\n\ngoal (1 subgoal):\n 1. q (a_to_b a') = a_to_b a", "by (simp add: ba_ab)"], ["proof (state)\nthis:\n  q (a_to_b a') = a_to_b a\n\ngoal (1 subgoal):\n 1. a' \\<in> A \\<Longrightarrow> a' = b_to_a (inv q (a_to_b a))", "from arg_cong[OF this, of ?iq]"], ["proof (chain)\npicking this:\n  inv q (q (a_to_b a')) = inv q (a_to_b a)", "have \"a_to_b a' = ?iq (a_to_b a)\""], ["proof (prove)\nusing this:\n  inv q (q (a_to_b a')) = inv q (a_to_b a)\n\ngoal (1 subgoal):\n 1. a_to_b a' = inv q (a_to_b a)", "unfolding iqB[OF a'(2)]"], ["proof (prove)\nusing this:\n  a_to_b a' = inv q (a_to_b a)\n\ngoal (1 subgoal):\n 1. a_to_b a' = inv q (a_to_b a)", "."], ["proof (state)\nthis:\n  a_to_b a' = inv q (a_to_b a)\n\ngoal (1 subgoal):\n 1. a' \\<in> A \\<Longrightarrow> a' = b_to_a (inv q (a_to_b a))", "from arg_cong[OF this, of b_to_a]"], ["proof (chain)\npicking this:\n  b_to_a (a_to_b a') = b_to_a (inv q (a_to_b a))", "show ?thesis"], ["proof (prove)\nusing this:\n  b_to_a (a_to_b a') = b_to_a (inv q (a_to_b a))\n\ngoal (1 subgoal):\n 1. a' = b_to_a (inv q (a_to_b a))", "unfolding ab_ba[OF True]"], ["proof (prove)\nusing this:\n  a' = b_to_a (inv q (a_to_b a))\n\ngoal (1 subgoal):\n 1. a' = b_to_a (inv q (a_to_b a))", "."], ["proof (state)\nthis:\n  a' = b_to_a (inv q (a_to_b a))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  a' = b_to_a (inv q (a_to_b a))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>!a'. (if a' \\<in> A then b_to_a (q (a_to_b a')) else a') = a\n\ngoal (1 subgoal):\n 1. a \\<notin> A \\<Longrightarrow>\n    \\<exists>!a'. (if a' \\<in> A then b_to_a (q (a_to_b a')) else a') = a", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. a \\<notin> A \\<Longrightarrow>\n    \\<exists>!a'. (if a' \\<in> A then b_to_a (q (a_to_b a')) else a') = a", "case False"], ["proof (state)\nthis:\n  a \\<notin> A\n\ngoal (1 subgoal):\n 1. a \\<notin> A \\<Longrightarrow>\n    \\<exists>!a'. (if a' \\<in> A then b_to_a (q (a_to_b a')) else a') = a", "note a = this"], ["proof (state)\nthis:\n  a \\<notin> A\n\ngoal (1 subgoal):\n 1. a \\<notin> A \\<Longrightarrow>\n    \\<exists>!a'. (if a' \\<in> A then b_to_a (q (a_to_b a')) else a') = a", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>!a'. (if a' \\<in> A then b_to_a (q (a_to_b a')) else a') = a", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. (if ?a \\<in> A then b_to_a (q (a_to_b ?a)) else ?a) = a\n 2. \\<And>a'.\n       (if a' \\<in> A then b_to_a (q (a_to_b a')) else a') =\n       a \\<Longrightarrow>\n       a' = ?a", "show \"?f q a = a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (if a \\<in> A then b_to_a (q (a_to_b a)) else a) = a", "using a"], ["proof (prove)\nusing this:\n  a \\<notin> A\n\ngoal (1 subgoal):\n 1. (if a \\<in> A then b_to_a (q (a_to_b a)) else a) = a", "by simp"], ["proof (state)\nthis:\n  (if a \\<in> A then b_to_a (q (a_to_b a)) else a) = a\n\ngoal (1 subgoal):\n 1. \\<And>a'.\n       (if a' \\<in> A then b_to_a (q (a_to_b a')) else a') =\n       a \\<Longrightarrow>\n       a' = a", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a'.\n       (if a' \\<in> A then b_to_a (q (a_to_b a')) else a') =\n       a \\<Longrightarrow>\n       a' = a", "fix a'"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a'.\n       (if a' \\<in> A then b_to_a (q (a_to_b a')) else a') =\n       a \\<Longrightarrow>\n       a' = a", "assume id: \"?f q a' = a\""], ["proof (state)\nthis:\n  (if a' \\<in> A then b_to_a (q (a_to_b a')) else a') = a\n\ngoal (1 subgoal):\n 1. \\<And>a'.\n       (if a' \\<in> A then b_to_a (q (a_to_b a')) else a') =\n       a \\<Longrightarrow>\n       a' = a", "show \"a' = a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a' = a", "proof (cases \"a' \\<in> A\")"], ["proof (state)\ngoal (2 subgoals):\n 1. a' \\<in> A \\<Longrightarrow> a' = a\n 2. a' \\<notin> A \\<Longrightarrow> a' = a", "case False"], ["proof (state)\nthis:\n  a' \\<notin> A\n\ngoal (2 subgoals):\n 1. a' \\<in> A \\<Longrightarrow> a' = a\n 2. a' \\<notin> A \\<Longrightarrow> a' = a", "with id"], ["proof (chain)\npicking this:\n  (if a' \\<in> A then b_to_a (q (a_to_b a')) else a') = a\n  a' \\<notin> A", "show ?thesis"], ["proof (prove)\nusing this:\n  (if a' \\<in> A then b_to_a (q (a_to_b a')) else a') = a\n  a' \\<notin> A\n\ngoal (1 subgoal):\n 1. a' = a", "by simp"], ["proof (state)\nthis:\n  a' = a\n\ngoal (1 subgoal):\n 1. a' \\<in> A \\<Longrightarrow> a' = a", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. a' \\<in> A \\<Longrightarrow> a' = a", "case True"], ["proof (state)\nthis:\n  a' \\<in> A\n\ngoal (1 subgoal):\n 1. a' \\<in> A \\<Longrightarrow> a' = a", "note a' = memb[OF True]"], ["proof (state)\nthis:\n  a' \\<in> A\n  a_to_b a' \\<in> B\n  inv q (a_to_b a') \\<in> B\n  q (a_to_b a') \\<in> B\n  b_to_a (q (a_to_b a')) \\<in> A\n  b_to_a (inv q (a_to_b a')) \\<in> A\n\ngoal (1 subgoal):\n 1. a' \\<in> A \\<Longrightarrow> a' = a", "with id False"], ["proof (chain)\npicking this:\n  (if a' \\<in> A then b_to_a (q (a_to_b a')) else a') = a\n  a \\<notin> A\n  a' \\<in> A\n  a_to_b a' \\<in> B\n  inv q (a_to_b a') \\<in> B\n  q (a_to_b a') \\<in> B\n  b_to_a (q (a_to_b a')) \\<in> A\n  b_to_a (inv q (a_to_b a')) \\<in> A", "show ?thesis"], ["proof (prove)\nusing this:\n  (if a' \\<in> A then b_to_a (q (a_to_b a')) else a') = a\n  a \\<notin> A\n  a' \\<in> A\n  a_to_b a' \\<in> B\n  inv q (a_to_b a') \\<in> B\n  q (a_to_b a') \\<in> B\n  b_to_a (q (a_to_b a')) \\<in> A\n  b_to_a (inv q (a_to_b a')) \\<in> A\n\ngoal (1 subgoal):\n 1. a' = a", "by auto"], ["proof (state)\nthis:\n  a' = a\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  a' = a\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>!a'. (if a' \\<in> A then b_to_a (q (a_to_b a')) else a') = a\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>!a'. (if a' \\<in> A then b_to_a (q (a_to_b a')) else a') = a\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  p \\<in> {p. p permutes A}\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "lemma  permutes_bij': assumes ab: \"\\<And> a. a \\<in> A \\<Longrightarrow> a_to_b a \\<in> B\"\n    and ba: \"\\<And> b. b \\<in> B \\<Longrightarrow> b_to_a b \\<in> A\"\n    and ab_ba: \"\\<And> a. a \\<in> A \\<Longrightarrow> b_to_a (a_to_b a) = a\"\n    and ba_ab: \"\\<And> b. b \\<in> B \\<Longrightarrow> a_to_b (b_to_a b) = b\"\n  shows \"{p . p permutes A} = (\\<lambda> p a. if a \\<in> A then b_to_a (p (a_to_b a)) else a) ` {p . p permutes B}\" \n  (is \"?A = ?f ` ?B\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. {p. p permutes A} =\n    (\\<lambda>p a. if a \\<in> A then b_to_a (p (a_to_b a)) else a) `\n    {p. p permutes B}", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. {p. p permutes A} =\n    (\\<lambda>p a. if a \\<in> A then b_to_a (p (a_to_b a)) else a) `\n    {p. p permutes B}", "note one_dir = ab ba ab_ba ba_ab"], ["proof (state)\nthis:\n  ?a \\<in> A \\<Longrightarrow> a_to_b ?a \\<in> B\n  ?b \\<in> B \\<Longrightarrow> b_to_a ?b \\<in> A\n  ?a \\<in> A \\<Longrightarrow> b_to_a (a_to_b ?a) = ?a\n  ?b \\<in> B \\<Longrightarrow> a_to_b (b_to_a ?b) = ?b\n\ngoal (1 subgoal):\n 1. {p. p permutes A} =\n    (\\<lambda>p a. if a \\<in> A then b_to_a (p (a_to_b a)) else a) `\n    {p. p permutes B}", "note other_dir = ba ab ba_ab ab_ba"], ["proof (state)\nthis:\n  ?b \\<in> B \\<Longrightarrow> b_to_a ?b \\<in> A\n  ?a \\<in> A \\<Longrightarrow> a_to_b ?a \\<in> B\n  ?b \\<in> B \\<Longrightarrow> a_to_b (b_to_a ?b) = ?b\n  ?a \\<in> A \\<Longrightarrow> b_to_a (a_to_b ?a) = ?a\n\ngoal (1 subgoal):\n 1. {p. p permutes A} =\n    (\\<lambda>p a. if a \\<in> A then b_to_a (p (a_to_b a)) else a) `\n    {p. p permutes B}", "let ?g = \"(\\<lambda> p b. if b \\<in> B then a_to_b (p (b_to_a b)) else b)\""], ["proof (state)\ngoal (1 subgoal):\n 1. {p. p permutes A} =\n    (\\<lambda>p a. if a \\<in> A then b_to_a (p (a_to_b a)) else a) `\n    {p. p permutes B}", "define PA where \"PA = ?A\""], ["proof (state)\nthis:\n  PA = {p. p permutes A}\n\ngoal (1 subgoal):\n 1. {p. p permutes A} =\n    (\\<lambda>p a. if a \\<in> A then b_to_a (p (a_to_b a)) else a) `\n    {p. p permutes B}", "define f where \"f = ?f\""], ["proof (state)\nthis:\n  f = (\\<lambda>p a. if a \\<in> A then b_to_a (p (a_to_b a)) else a)\n\ngoal (1 subgoal):\n 1. {p. p permutes A} =\n    (\\<lambda>p a. if a \\<in> A then b_to_a (p (a_to_b a)) else a) `\n    {p. p permutes B}", "define g where \"g = ?g\""], ["proof (state)\nthis:\n  g = (\\<lambda>p b. if b \\<in> B then a_to_b (p (b_to_a b)) else b)\n\ngoal (1 subgoal):\n 1. {p. p permutes A} =\n    (\\<lambda>p a. if a \\<in> A then b_to_a (p (a_to_b a)) else a) `\n    {p. p permutes B}", "{"], ["proof (state)\nthis:\n  g = (\\<lambda>p b. if b \\<in> B then a_to_b (p (b_to_a b)) else b)\n\ngoal (1 subgoal):\n 1. {p. p permutes A} =\n    (\\<lambda>p a. if a \\<in> A then b_to_a (p (a_to_b a)) else a) `\n    {p. p permutes B}", "fix p"], ["proof (state)\ngoal (1 subgoal):\n 1. {p. p permutes A} =\n    (\\<lambda>p a. if a \\<in> A then b_to_a (p (a_to_b a)) else a) `\n    {p. p permutes B}", "assume \"p \\<in> PA\""], ["proof (state)\nthis:\n  p \\<in> PA\n\ngoal (1 subgoal):\n 1. {p. p permutes A} =\n    (\\<lambda>p a. if a \\<in> A then b_to_a (p (a_to_b a)) else a) `\n    {p. p permutes B}", "hence p: \"p permutes A\""], ["proof (prove)\nusing this:\n  p \\<in> PA\n\ngoal (1 subgoal):\n 1. p permutes A", "unfolding PA_def"], ["proof (prove)\nusing this:\n  p \\<in> {p. p permutes A}\n\ngoal (1 subgoal):\n 1. p permutes A", "by simp"], ["proof (state)\nthis:\n  p permutes A\n\ngoal (1 subgoal):\n 1. {p. p permutes A} =\n    (\\<lambda>p a. if a \\<in> A then b_to_a (p (a_to_b a)) else a) `\n    {p. p permutes B}", "from p[unfolded permutes_def]"], ["proof (chain)\npicking this:\n  (\\<forall>x. x \\<notin> A \\<longrightarrow> p x = x) \\<and>\n  (\\<forall>y. \\<exists>!x. p x = y)", "have pnA: \"\\<And> a. a \\<notin> A \\<Longrightarrow> p a = a\""], ["proof (prove)\nusing this:\n  (\\<forall>x. x \\<notin> A \\<longrightarrow> p x = x) \\<and>\n  (\\<forall>y. \\<exists>!x. p x = y)\n\ngoal (1 subgoal):\n 1. \\<And>a. a \\<notin> A \\<Longrightarrow> p a = a", "by auto"], ["proof (state)\nthis:\n  ?a \\<notin> A \\<Longrightarrow> p ?a = ?a\n\ngoal (1 subgoal):\n 1. {p. p permutes A} =\n    (\\<lambda>p a. if a \\<in> A then b_to_a (p (a_to_b a)) else a) `\n    {p. p permutes B}", "have \"?f (?g p) = p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>a.\n        if a \\<in> A\n        then b_to_a\n              (if a_to_b a \\<in> B then a_to_b (p (b_to_a (a_to_b a)))\n               else a_to_b a)\n        else a) =\n    p", "proof (rule ext)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a.\n       (if a \\<in> A\n        then b_to_a\n              (if a_to_b a \\<in> B then a_to_b (p (b_to_a (a_to_b a)))\n               else a_to_b a)\n        else a) =\n       p a", "fix a"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a.\n       (if a \\<in> A\n        then b_to_a\n              (if a_to_b a \\<in> B then a_to_b (p (b_to_a (a_to_b a)))\n               else a_to_b a)\n        else a) =\n       p a", "show \"?f (?g p) a = p a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (if a \\<in> A\n     then b_to_a\n           (if a_to_b a \\<in> B then a_to_b (p (b_to_a (a_to_b a)))\n            else a_to_b a)\n     else a) =\n    p a", "proof (cases \"a \\<in> A\")"], ["proof (state)\ngoal (2 subgoals):\n 1. a \\<in> A \\<Longrightarrow>\n    (if a \\<in> A\n     then b_to_a\n           (if a_to_b a \\<in> B then a_to_b (p (b_to_a (a_to_b a)))\n            else a_to_b a)\n     else a) =\n    p a\n 2. a \\<notin> A \\<Longrightarrow>\n    (if a \\<in> A\n     then b_to_a\n           (if a_to_b a \\<in> B then a_to_b (p (b_to_a (a_to_b a)))\n            else a_to_b a)\n     else a) =\n    p a", "case False"], ["proof (state)\nthis:\n  a \\<notin> A\n\ngoal (2 subgoals):\n 1. a \\<in> A \\<Longrightarrow>\n    (if a \\<in> A\n     then b_to_a\n           (if a_to_b a \\<in> B then a_to_b (p (b_to_a (a_to_b a)))\n            else a_to_b a)\n     else a) =\n    p a\n 2. a \\<notin> A \\<Longrightarrow>\n    (if a \\<in> A\n     then b_to_a\n           (if a_to_b a \\<in> B then a_to_b (p (b_to_a (a_to_b a)))\n            else a_to_b a)\n     else a) =\n    p a", "thus ?thesis"], ["proof (prove)\nusing this:\n  a \\<notin> A\n\ngoal (1 subgoal):\n 1. (if a \\<in> A\n     then b_to_a\n           (if a_to_b a \\<in> B then a_to_b (p (b_to_a (a_to_b a)))\n            else a_to_b a)\n     else a) =\n    p a", "by (simp add: pnA)"], ["proof (state)\nthis:\n  (if a \\<in> A\n   then b_to_a\n         (if a_to_b a \\<in> B then a_to_b (p (b_to_a (a_to_b a)))\n          else a_to_b a)\n   else a) =\n  p a\n\ngoal (1 subgoal):\n 1. a \\<in> A \\<Longrightarrow>\n    (if a \\<in> A\n     then b_to_a\n           (if a_to_b a \\<in> B then a_to_b (p (b_to_a (a_to_b a)))\n            else a_to_b a)\n     else a) =\n    p a", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. a \\<in> A \\<Longrightarrow>\n    (if a \\<in> A\n     then b_to_a\n           (if a_to_b a \\<in> B then a_to_b (p (b_to_a (a_to_b a)))\n            else a_to_b a)\n     else a) =\n    p a", "case True"], ["proof (state)\nthis:\n  a \\<in> A\n\ngoal (1 subgoal):\n 1. a \\<in> A \\<Longrightarrow>\n    (if a \\<in> A\n     then b_to_a\n           (if a_to_b a \\<in> B then a_to_b (p (b_to_a (a_to_b a)))\n            else a_to_b a)\n     else a) =\n    p a", "note a = this"], ["proof (state)\nthis:\n  a \\<in> A\n\ngoal (1 subgoal):\n 1. a \\<in> A \\<Longrightarrow>\n    (if a \\<in> A\n     then b_to_a\n           (if a_to_b a \\<in> B then a_to_b (p (b_to_a (a_to_b a)))\n            else a_to_b a)\n     else a) =\n    p a", "hence \"p a \\<in> A\""], ["proof (prove)\nusing this:\n  a \\<in> A\n\ngoal (1 subgoal):\n 1. p a \\<in> A", "unfolding permutes_in_image[OF p]"], ["proof (prove)\nusing this:\n  a \\<in> A\n\ngoal (1 subgoal):\n 1. a \\<in> A", "."], ["proof (state)\nthis:\n  p a \\<in> A\n\ngoal (1 subgoal):\n 1. a \\<in> A \\<Longrightarrow>\n    (if a \\<in> A\n     then b_to_a\n           (if a_to_b a \\<in> B then a_to_b (p (b_to_a (a_to_b a)))\n            else a_to_b a)\n     else a) =\n    p a", "thus ?thesis"], ["proof (prove)\nusing this:\n  p a \\<in> A\n\ngoal (1 subgoal):\n 1. (if a \\<in> A\n     then b_to_a\n           (if a_to_b a \\<in> B then a_to_b (p (b_to_a (a_to_b a)))\n            else a_to_b a)\n     else a) =\n    p a", "using a"], ["proof (prove)\nusing this:\n  p a \\<in> A\n  a \\<in> A\n\ngoal (1 subgoal):\n 1. (if a \\<in> A\n     then b_to_a\n           (if a_to_b a \\<in> B then a_to_b (p (b_to_a (a_to_b a)))\n            else a_to_b a)\n     else a) =\n    p a", "by (simp add: ab_ba ba_ab ab)"], ["proof (state)\nthis:\n  (if a \\<in> A\n   then b_to_a\n         (if a_to_b a \\<in> B then a_to_b (p (b_to_a (a_to_b a)))\n          else a_to_b a)\n   else a) =\n  p a\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (if a \\<in> A\n   then b_to_a\n         (if a_to_b a \\<in> B then a_to_b (p (b_to_a (a_to_b a)))\n          else a_to_b a)\n   else a) =\n  p a\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (\\<lambda>a.\n      if a \\<in> A\n      then b_to_a\n            (if a_to_b a \\<in> B then a_to_b (p (b_to_a (a_to_b a)))\n             else a_to_b a)\n      else a) =\n  p\n\ngoal (1 subgoal):\n 1. {p. p permutes A} =\n    (\\<lambda>p a. if a \\<in> A then b_to_a (p (a_to_b a)) else a) `\n    {p. p permutes B}", "hence \"f (g p) = p\""], ["proof (prove)\nusing this:\n  (\\<lambda>a.\n      if a \\<in> A\n      then b_to_a\n            (if a_to_b a \\<in> B then a_to_b (p (b_to_a (a_to_b a)))\n             else a_to_b a)\n      else a) =\n  p\n\ngoal (1 subgoal):\n 1. f (g p) = p", "unfolding f_def g_def"], ["proof (prove)\nusing this:\n  (\\<lambda>a.\n      if a \\<in> A\n      then b_to_a\n            (if a_to_b a \\<in> B then a_to_b (p (b_to_a (a_to_b a)))\n             else a_to_b a)\n      else a) =\n  p\n\ngoal (1 subgoal):\n 1. (\\<lambda>a.\n        if a \\<in> A\n        then b_to_a\n              (if a_to_b a \\<in> B then a_to_b (p (b_to_a (a_to_b a)))\n               else a_to_b a)\n        else a) =\n    p", "."], ["proof (state)\nthis:\n  f (g p) = p\n\ngoal (1 subgoal):\n 1. {p. p permutes A} =\n    (\\<lambda>p a. if a \\<in> A then b_to_a (p (a_to_b a)) else a) `\n    {p. p permutes B}", "}"], ["proof (state)\nthis:\n  ?p2 \\<in> PA \\<Longrightarrow> f (g ?p2) = ?p2\n\ngoal (1 subgoal):\n 1. {p. p permutes A} =\n    (\\<lambda>p a. if a \\<in> A then b_to_a (p (a_to_b a)) else a) `\n    {p. p permutes B}", "hence \"f ` g ` PA = PA\""], ["proof (prove)\nusing this:\n  ?p2 \\<in> PA \\<Longrightarrow> f (g ?p2) = ?p2\n\ngoal (1 subgoal):\n 1. f ` g ` PA = PA", "by force"], ["proof (state)\nthis:\n  f ` g ` PA = PA\n\ngoal (1 subgoal):\n 1. {p. p permutes A} =\n    (\\<lambda>p a. if a \\<in> A then b_to_a (p (a_to_b a)) else a) `\n    {p. p permutes B}", "hence id: \"?f ` ?g ` ?A = ?A\""], ["proof (prove)\nusing this:\n  f ` g ` PA = PA\n\ngoal (1 subgoal):\n 1. (\\<lambda>p a. if a \\<in> A then b_to_a (p (a_to_b a)) else a) `\n    (\\<lambda>p b. if b \\<in> B then a_to_b (p (b_to_a b)) else b) `\n    {p. p permutes A} =\n    {p. p permutes A}", "unfolding PA_def f_def g_def"], ["proof (prove)\nusing this:\n  (\\<lambda>p a. if a \\<in> A then b_to_a (p (a_to_b a)) else a) `\n  (\\<lambda>p b. if b \\<in> B then a_to_b (p (b_to_a b)) else b) `\n  {p. p permutes A} =\n  {p. p permutes A}\n\ngoal (1 subgoal):\n 1. (\\<lambda>p a. if a \\<in> A then b_to_a (p (a_to_b a)) else a) `\n    (\\<lambda>p b. if b \\<in> B then a_to_b (p (b_to_a b)) else b) `\n    {p. p permutes A} =\n    {p. p permutes A}", "."], ["proof (state)\nthis:\n  (\\<lambda>p a. if a \\<in> A then b_to_a (p (a_to_b a)) else a) `\n  (\\<lambda>p b. if b \\<in> B then a_to_b (p (b_to_a b)) else b) `\n  {p. p permutes A} =\n  {p. p permutes A}\n\ngoal (1 subgoal):\n 1. {p. p permutes A} =\n    (\\<lambda>p a. if a \\<in> A then b_to_a (p (a_to_b a)) else a) `\n    {p. p permutes B}", "have \"?f ` ?B \\<subseteq> ?A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>p a. if a \\<in> A then b_to_a (p (a_to_b a)) else a) `\n    {p. p permutes B}\n    \\<subseteq> {p. p permutes A}", "by (rule permutes_bij_main[OF one_dir])"], ["proof (state)\nthis:\n  (\\<lambda>p a. if a \\<in> A then b_to_a (p (a_to_b a)) else a) `\n  {p. p permutes B}\n  \\<subseteq> {p. p permutes A}\n\ngoal (1 subgoal):\n 1. {p. p permutes A} =\n    (\\<lambda>p a. if a \\<in> A then b_to_a (p (a_to_b a)) else a) `\n    {p. p permutes B}", "moreover"], ["proof (state)\nthis:\n  (\\<lambda>p a. if a \\<in> A then b_to_a (p (a_to_b a)) else a) `\n  {p. p permutes B}\n  \\<subseteq> {p. p permutes A}\n\ngoal (1 subgoal):\n 1. {p. p permutes A} =\n    (\\<lambda>p a. if a \\<in> A then b_to_a (p (a_to_b a)) else a) `\n    {p. p permutes B}", "have \"?g ` ?A \\<subseteq> ?B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>p b. if b \\<in> B then a_to_b (p (b_to_a b)) else b) `\n    {p. p permutes A}\n    \\<subseteq> {p. p permutes B}", "by (rule permutes_bij_main[OF ba ab ba_ab ab_ba])"], ["proof (state)\nthis:\n  (\\<lambda>p b. if b \\<in> B then a_to_b (p (b_to_a b)) else b) `\n  {p. p permutes A}\n  \\<subseteq> {p. p permutes B}\n\ngoal (1 subgoal):\n 1. {p. p permutes A} =\n    (\\<lambda>p a. if a \\<in> A then b_to_a (p (a_to_b a)) else a) `\n    {p. p permutes B}", "hence \"?f ` ?g ` ?A \\<subseteq> ?f ` ?B\""], ["proof (prove)\nusing this:\n  (\\<lambda>p b. if b \\<in> B then a_to_b (p (b_to_a b)) else b) `\n  {p. p permutes A}\n  \\<subseteq> {p. p permutes B}\n\ngoal (1 subgoal):\n 1. (\\<lambda>p a. if a \\<in> A then b_to_a (p (a_to_b a)) else a) `\n    (\\<lambda>p b. if b \\<in> B then a_to_b (p (b_to_a b)) else b) `\n    {p. p permutes A}\n    \\<subseteq> (\\<lambda>p a.\n                    if a \\<in> A then b_to_a (p (a_to_b a)) else a) `\n                {p. p permutes B}", "by auto"], ["proof (state)\nthis:\n  (\\<lambda>p a. if a \\<in> A then b_to_a (p (a_to_b a)) else a) `\n  (\\<lambda>p b. if b \\<in> B then a_to_b (p (b_to_a b)) else b) `\n  {p. p permutes A}\n  \\<subseteq> (\\<lambda>p a.\n                  if a \\<in> A then b_to_a (p (a_to_b a)) else a) `\n              {p. p permutes B}\n\ngoal (1 subgoal):\n 1. {p. p permutes A} =\n    (\\<lambda>p a. if a \\<in> A then b_to_a (p (a_to_b a)) else a) `\n    {p. p permutes B}", "hence \"?A \\<subseteq> ?f ` ?B\""], ["proof (prove)\nusing this:\n  (\\<lambda>p a. if a \\<in> A then b_to_a (p (a_to_b a)) else a) `\n  (\\<lambda>p b. if b \\<in> B then a_to_b (p (b_to_a b)) else b) `\n  {p. p permutes A}\n  \\<subseteq> (\\<lambda>p a.\n                  if a \\<in> A then b_to_a (p (a_to_b a)) else a) `\n              {p. p permutes B}\n\ngoal (1 subgoal):\n 1. {p. p permutes A}\n    \\<subseteq> (\\<lambda>p a.\n                    if a \\<in> A then b_to_a (p (a_to_b a)) else a) `\n                {p. p permutes B}", "unfolding id"], ["proof (prove)\nusing this:\n  {p. p permutes A}\n  \\<subseteq> (\\<lambda>p a.\n                  if a \\<in> A then b_to_a (p (a_to_b a)) else a) `\n              {p. p permutes B}\n\ngoal (1 subgoal):\n 1. {p. p permutes A}\n    \\<subseteq> (\\<lambda>p a.\n                    if a \\<in> A then b_to_a (p (a_to_b a)) else a) `\n                {p. p permutes B}", "."], ["proof (state)\nthis:\n  {p. p permutes A}\n  \\<subseteq> (\\<lambda>p a.\n                  if a \\<in> A then b_to_a (p (a_to_b a)) else a) `\n              {p. p permutes B}\n\ngoal (1 subgoal):\n 1. {p. p permutes A} =\n    (\\<lambda>p a. if a \\<in> A then b_to_a (p (a_to_b a)) else a) `\n    {p. p permutes B}", "ultimately"], ["proof (chain)\npicking this:\n  (\\<lambda>p a. if a \\<in> A then b_to_a (p (a_to_b a)) else a) `\n  {p. p permutes B}\n  \\<subseteq> {p. p permutes A}\n  {p. p permutes A}\n  \\<subseteq> (\\<lambda>p a.\n                  if a \\<in> A then b_to_a (p (a_to_b a)) else a) `\n              {p. p permutes B}", "show ?thesis"], ["proof (prove)\nusing this:\n  (\\<lambda>p a. if a \\<in> A then b_to_a (p (a_to_b a)) else a) `\n  {p. p permutes B}\n  \\<subseteq> {p. p permutes A}\n  {p. p permutes A}\n  \\<subseteq> (\\<lambda>p a.\n                  if a \\<in> A then b_to_a (p (a_to_b a)) else a) `\n              {p. p permutes B}\n\ngoal (1 subgoal):\n 1. {p. p permutes A} =\n    (\\<lambda>p a. if a \\<in> A then b_to_a (p (a_to_b a)) else a) `\n    {p. p permutes B}", "by blast"], ["proof (state)\nthis:\n  {p. p permutes A} =\n  (\\<lambda>p a. if a \\<in> A then b_to_a (p (a_to_b a)) else a) `\n  {p. p permutes B}\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma inj_on_nat_permutes: assumes i: \"inj_on f (S :: nat set)\"\n  and fS: \"f \\<in> S \\<rightarrow> S\"\n  and fin: \"finite S\"\n  and f: \"\\<And> i. i \\<notin> S \\<Longrightarrow> f i = i\"\n  shows \"f permutes S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f permutes S", "unfolding permutes_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>x. x \\<notin> S \\<longrightarrow> f x = x) \\<and>\n    (\\<forall>y. \\<exists>!x. f x = y)", "proof (intro conjI allI impI, rule f)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x. x \\<notin> S \\<Longrightarrow> x \\<notin> S\n 2. \\<And>y. \\<exists>!x. f x = y", "fix y"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x. x \\<notin> S \\<Longrightarrow> x \\<notin> S\n 2. \\<And>y. \\<exists>!x. f x = y", "from endo_inj_surj[OF fin _ i] fS"], ["proof (chain)\npicking this:\n  f ` S \\<subseteq> S \\<Longrightarrow> f ` S = S\n  f \\<in> S \\<rightarrow> S", "have fs: \"f ` S = S\""], ["proof (prove)\nusing this:\n  f ` S \\<subseteq> S \\<Longrightarrow> f ` S = S\n  f \\<in> S \\<rightarrow> S\n\ngoal (1 subgoal):\n 1. f ` S = S", "by auto"], ["proof (state)\nthis:\n  f ` S = S\n\ngoal (2 subgoals):\n 1. \\<And>x. x \\<notin> S \\<Longrightarrow> x \\<notin> S\n 2. \\<And>y. \\<exists>!x. f x = y", "show \"\\<exists>!x. f x = y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>!x. f x = y", "proof (cases \"y \\<in> S\")"], ["proof (state)\ngoal (2 subgoals):\n 1. y \\<in> S \\<Longrightarrow> \\<exists>!x. f x = y\n 2. y \\<notin> S \\<Longrightarrow> \\<exists>!x. f x = y", "case False"], ["proof (state)\nthis:\n  y \\<notin> S\n\ngoal (2 subgoals):\n 1. y \\<in> S \\<Longrightarrow> \\<exists>!x. f x = y\n 2. y \\<notin> S \\<Longrightarrow> \\<exists>!x. f x = y", "thus ?thesis"], ["proof (prove)\nusing this:\n  y \\<notin> S\n\ngoal (1 subgoal):\n 1. \\<exists>!x. f x = y", "by (intro ex1I[of _ y], insert fS f, auto)"], ["proof (state)\nthis:\n  \\<exists>!x. f x = y\n\ngoal (1 subgoal):\n 1. y \\<in> S \\<Longrightarrow> \\<exists>!x. f x = y", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. y \\<in> S \\<Longrightarrow> \\<exists>!x. f x = y", "case True"], ["proof (state)\nthis:\n  y \\<in> S\n\ngoal (1 subgoal):\n 1. y \\<in> S \\<Longrightarrow> \\<exists>!x. f x = y", "with fs"], ["proof (chain)\npicking this:\n  f ` S = S\n  y \\<in> S", "obtain x where x: \"x \\<in> S\" and fx: \"f x = y\""], ["proof (prove)\nusing this:\n  f ` S = S\n  y \\<in> S\n\ngoal (1 subgoal):\n 1. (\\<And>x.\n        \\<lbrakk>x \\<in> S; f x = y\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by force"], ["proof (state)\nthis:\n  x \\<in> S\n  f x = y\n\ngoal (1 subgoal):\n 1. y \\<in> S \\<Longrightarrow> \\<exists>!x. f x = y", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>!x. f x = y", "proof (rule ex1I, rule fx)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xa. f xa = y \\<Longrightarrow> xa = x", "fix x'"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xa. f xa = y \\<Longrightarrow> xa = x", "assume fx': \"f x' = y\""], ["proof (state)\nthis:\n  f x' = y\n\ngoal (1 subgoal):\n 1. \\<And>xa. f xa = y \\<Longrightarrow> xa = x", "with True f[of x']"], ["proof (chain)\npicking this:\n  y \\<in> S\n  x' \\<notin> S \\<Longrightarrow> f x' = x'\n  f x' = y", "have \"x' \\<in> S\""], ["proof (prove)\nusing this:\n  y \\<in> S\n  x' \\<notin> S \\<Longrightarrow> f x' = x'\n  f x' = y\n\ngoal (1 subgoal):\n 1. x' \\<in> S", "by metis"], ["proof (state)\nthis:\n  x' \\<in> S\n\ngoal (1 subgoal):\n 1. \\<And>xa. f xa = y \\<Longrightarrow> xa = x", "from inj_onD[OF i fx[folded fx'] x this]"], ["proof (chain)\npicking this:\n  x = x'", "show \"x' = x\""], ["proof (prove)\nusing this:\n  x = x'\n\ngoal (1 subgoal):\n 1. x' = x", "by simp"], ["proof (state)\nthis:\n  x' = x\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>!x. f x = y\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>!x. f x = y\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<notin> S \\<Longrightarrow> x \\<notin> S", "qed"], ["", "lemma permutes_pair_eq:\n  assumes p: \"p permutes S\"\n  shows \"{ (p s, s) | s. s \\<in> S } = { (s, Hilbert_Choice.inv p s) | s. s \\<in> S }\"\n    (is \"?L = ?R\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. {(p s, s) |s. s \\<in> S} = {(s, inv p s) |s. s \\<in> S}", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. {(p s, s) |s. s \\<in> S} \\<subseteq> {(s, inv p s) |s. s \\<in> S}\n 2. {(s, inv p s) |s. s \\<in> S} \\<subseteq> {(p s, s) |s. s \\<in> S}", "show \"?L \\<subseteq> ?R\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {(p s, s) |s. s \\<in> S} \\<subseteq> {(s, inv p s) |s. s \\<in> S}", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {(p s, s) |s. s \\<in> S} \\<Longrightarrow>\n       x \\<in> {(s, inv p s) |s. s \\<in> S}", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {(p s, s) |s. s \\<in> S} \\<Longrightarrow>\n       x \\<in> {(s, inv p s) |s. s \\<in> S}", "assume \"x \\<in> ?L\""], ["proof (state)\nthis:\n  x \\<in> {(p s, s) |s. s \\<in> S}\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {(p s, s) |s. s \\<in> S} \\<Longrightarrow>\n       x \\<in> {(s, inv p s) |s. s \\<in> S}", "then"], ["proof (chain)\npicking this:\n  x \\<in> {(p s, s) |s. s \\<in> S}", "obtain s where x: \"x = (p s, s)\" and s: \"s \\<in> S\""], ["proof (prove)\nusing this:\n  x \\<in> {(p s, s) |s. s \\<in> S}\n\ngoal (1 subgoal):\n 1. (\\<And>s.\n        \\<lbrakk>x = (p s, s); s \\<in> S\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  x = (p s, s)\n  s \\<in> S\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {(p s, s) |s. s \\<in> S} \\<Longrightarrow>\n       x \\<in> {(s, inv p s) |s. s \\<in> S}", "note x"], ["proof (state)\nthis:\n  x = (p s, s)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {(p s, s) |s. s \\<in> S} \\<Longrightarrow>\n       x \\<in> {(s, inv p s) |s. s \\<in> S}", "also"], ["proof (state)\nthis:\n  x = (p s, s)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {(p s, s) |s. s \\<in> S} \\<Longrightarrow>\n       x \\<in> {(s, inv p s) |s. s \\<in> S}", "have \"(p s, s) = (p s, Hilbert_Choice.inv p (p s))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (p s, s) = (p s, inv p (p s))", "using permutes_inj[OF p] inv_f_f"], ["proof (prove)\nusing this:\n  inj p\n  inj ?f \\<Longrightarrow> inv ?f (?f ?x) = ?x\n\ngoal (1 subgoal):\n 1. (p s, s) = (p s, inv p (p s))", "by auto"], ["proof (state)\nthis:\n  (p s, s) = (p s, inv p (p s))\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {(p s, s) |s. s \\<in> S} \\<Longrightarrow>\n       x \\<in> {(s, inv p s) |s. s \\<in> S}", "also"], ["proof (state)\nthis:\n  (p s, s) = (p s, inv p (p s))\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {(p s, s) |s. s \\<in> S} \\<Longrightarrow>\n       x \\<in> {(s, inv p s) |s. s \\<in> S}", "have \"... \\<in> ?R\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (p s, inv p (p s)) \\<in> {(s, inv p s) |s. s \\<in> S}", "using s permutes_in_image[OF p]"], ["proof (prove)\nusing this:\n  s \\<in> S\n  (p ?x \\<in> S) = (?x \\<in> S)\n\ngoal (1 subgoal):\n 1. (p s, inv p (p s)) \\<in> {(s, inv p s) |s. s \\<in> S}", "by auto"], ["proof (state)\nthis:\n  (p s, inv p (p s)) \\<in> {(s, inv p s) |s. s \\<in> S}\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {(p s, s) |s. s \\<in> S} \\<Longrightarrow>\n       x \\<in> {(s, inv p s) |s. s \\<in> S}", "finally"], ["proof (chain)\npicking this:\n  x \\<in> {(s, inv p s) |s. s \\<in> S}", "show \"x \\<in> ?R\""], ["proof (prove)\nusing this:\n  x \\<in> {(s, inv p s) |s. s \\<in> S}\n\ngoal (1 subgoal):\n 1. x \\<in> {(s, inv p s) |s. s \\<in> S}", "."], ["proof (state)\nthis:\n  x \\<in> {(s, inv p s) |s. s \\<in> S}\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  {(p s, s) |s. s \\<in> S} \\<subseteq> {(s, inv p s) |s. s \\<in> S}\n\ngoal (1 subgoal):\n 1. {(s, inv p s) |s. s \\<in> S} \\<subseteq> {(p s, s) |s. s \\<in> S}", "show \"?R \\<subseteq> ?L\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {(s, inv p s) |s. s \\<in> S} \\<subseteq> {(p s, s) |s. s \\<in> S}", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {(s, inv p s) |s. s \\<in> S} \\<Longrightarrow>\n       x \\<in> {(p s, s) |s. s \\<in> S}", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {(s, inv p s) |s. s \\<in> S} \\<Longrightarrow>\n       x \\<in> {(p s, s) |s. s \\<in> S}", "assume \"x \\<in> ?R\""], ["proof (state)\nthis:\n  x \\<in> {(s, inv p s) |s. s \\<in> S}\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {(s, inv p s) |s. s \\<in> S} \\<Longrightarrow>\n       x \\<in> {(p s, s) |s. s \\<in> S}", "then"], ["proof (chain)\npicking this:\n  x \\<in> {(s, inv p s) |s. s \\<in> S}", "obtain s\n      where x: \"x = (s, Hilbert_Choice.inv p s)\" (is \"_ = (s, ?ips)\")\n        and s: \"s \\<in> S\""], ["proof (prove)\nusing this:\n  x \\<in> {(s, inv p s) |s. s \\<in> S}\n\ngoal (1 subgoal):\n 1. (\\<And>s.\n        \\<lbrakk>x = (s, inv p s); s \\<in> S\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  x = (s, inv p s)\n  s \\<in> S\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {(s, inv p s) |s. s \\<in> S} \\<Longrightarrow>\n       x \\<in> {(p s, s) |s. s \\<in> S}", "note x"], ["proof (state)\nthis:\n  x = (s, inv p s)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {(s, inv p s) |s. s \\<in> S} \\<Longrightarrow>\n       x \\<in> {(p s, s) |s. s \\<in> S}", "also"], ["proof (state)\nthis:\n  x = (s, inv p s)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {(s, inv p s) |s. s \\<in> S} \\<Longrightarrow>\n       x \\<in> {(p s, s) |s. s \\<in> S}", "have \"(s, ?ips) = (p ?ips, ?ips)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (s, inv p s) = (p (inv p s), inv p s)", "using inv_f_f[OF permutes_inj[OF permutes_inv[OF p]]]"], ["proof (prove)\nusing this:\n  inv (inv p) (inv p ?x) = ?x\n\ngoal (1 subgoal):\n 1. (s, inv p s) = (p (inv p s), inv p s)", "using inv_inv_eq[OF permutes_bij[OF p]]"], ["proof (prove)\nusing this:\n  inv (inv p) (inv p ?x) = ?x\n  inv (inv p) = p\n\ngoal (1 subgoal):\n 1. (s, inv p s) = (p (inv p s), inv p s)", "by auto"], ["proof (state)\nthis:\n  (s, inv p s) = (p (inv p s), inv p s)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {(s, inv p s) |s. s \\<in> S} \\<Longrightarrow>\n       x \\<in> {(p s, s) |s. s \\<in> S}", "also"], ["proof (state)\nthis:\n  (s, inv p s) = (p (inv p s), inv p s)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {(s, inv p s) |s. s \\<in> S} \\<Longrightarrow>\n       x \\<in> {(p s, s) |s. s \\<in> S}", "have \"... \\<in> ?L\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (p (inv p s), inv p s) \\<in> {(p s, s) |s. s \\<in> S}", "using s permutes_in_image[OF permutes_inv[OF p]]"], ["proof (prove)\nusing this:\n  s \\<in> S\n  (inv p ?x \\<in> S) = (?x \\<in> S)\n\ngoal (1 subgoal):\n 1. (p (inv p s), inv p s) \\<in> {(p s, s) |s. s \\<in> S}", "by auto"], ["proof (state)\nthis:\n  (p (inv p s), inv p s) \\<in> {(p s, s) |s. s \\<in> S}\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> {(s, inv p s) |s. s \\<in> S} \\<Longrightarrow>\n       x \\<in> {(p s, s) |s. s \\<in> S}", "finally"], ["proof (chain)\npicking this:\n  x \\<in> {(p s, s) |s. s \\<in> S}", "show \"x \\<in> ?L\""], ["proof (prove)\nusing this:\n  x \\<in> {(p s, s) |s. s \\<in> S}\n\ngoal (1 subgoal):\n 1. x \\<in> {(p s, s) |s. s \\<in> S}", "."], ["proof (state)\nthis:\n  x \\<in> {(p s, s) |s. s \\<in> S}\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  {(s, inv p s) |s. s \\<in> S} \\<subseteq> {(p s, s) |s. s \\<in> S}\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma inj_on_finite[simp]:\n  assumes inj: \"inj_on f A\" shows \"finite (f ` A) = finite A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (f ` A) = finite A", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. finite (f ` A) \\<Longrightarrow> finite A\n 2. finite A \\<Longrightarrow> finite (f ` A)", "assume fin: \"finite (f ` A)\""], ["proof (state)\nthis:\n  finite (f ` A)\n\ngoal (2 subgoals):\n 1. finite (f ` A) \\<Longrightarrow> finite A\n 2. finite A \\<Longrightarrow> finite (f ` A)", "show \"finite A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite A", "proof (cases \"card (f ` A) = 0\")"], ["proof (state)\ngoal (2 subgoals):\n 1. card (f ` A) = 0 \\<Longrightarrow> finite A\n 2. card (f ` A) \\<noteq> 0 \\<Longrightarrow> finite A", "case True"], ["proof (state)\nthis:\n  card (f ` A) = 0\n\ngoal (2 subgoals):\n 1. card (f ` A) = 0 \\<Longrightarrow> finite A\n 2. card (f ` A) \\<noteq> 0 \\<Longrightarrow> finite A", "thus ?thesis"], ["proof (prove)\nusing this:\n  card (f ` A) = 0\n\ngoal (1 subgoal):\n 1. finite A", "using fin"], ["proof (prove)\nusing this:\n  card (f ` A) = 0\n  finite (f ` A)\n\ngoal (1 subgoal):\n 1. finite A", "by auto"], ["proof (state)\nthis:\n  finite A\n\ngoal (1 subgoal):\n 1. card (f ` A) \\<noteq> 0 \\<Longrightarrow> finite A", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. card (f ` A) \\<noteq> 0 \\<Longrightarrow> finite A", "case False"], ["proof (state)\nthis:\n  card (f ` A) \\<noteq> 0\n\ngoal (1 subgoal):\n 1. card (f ` A) \\<noteq> 0 \\<Longrightarrow> finite A", "hence \"card A > 0\""], ["proof (prove)\nusing this:\n  card (f ` A) \\<noteq> 0\n\ngoal (1 subgoal):\n 1. 0 < card A", "unfolding card_image[OF inj]"], ["proof (prove)\nusing this:\n  card A \\<noteq> 0\n\ngoal (1 subgoal):\n 1. 0 < card A", "by auto"], ["proof (state)\nthis:\n  0 < card A\n\ngoal (1 subgoal):\n 1. card (f ` A) \\<noteq> 0 \\<Longrightarrow> finite A", "thus ?thesis"], ["proof (prove)\nusing this:\n  0 < card A\n\ngoal (1 subgoal):\n 1. finite A", "using card.infinite"], ["proof (prove)\nusing this:\n  0 < card A\n  infinite ?A \\<Longrightarrow> card ?A = 0\n\ngoal (1 subgoal):\n 1. finite A", "by force"], ["proof (state)\nthis:\n  finite A\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  finite A\n\ngoal (1 subgoal):\n 1. finite A \\<Longrightarrow> finite (f ` A)", "qed auto"], ["", "lemma permutes_prod:\n  assumes p: \"p permutes S\"\n  shows \"(\\<Prod>s\\<in>S. f (p s) s) = (\\<Prod>s\\<in>S. f s (Hilbert_Choice.inv p s))\"\n    (is \"?l = ?r\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Prod>s\\<in>S. f (p s) s) = (\\<Prod>s\\<in>S. f s (inv p s))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<Prod>s\\<in>S. f (p s) s) = (\\<Prod>s\\<in>S. f s (inv p s))", "let ?f = \"\\<lambda>(x,y). f x y\""], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<Prod>s\\<in>S. f (p s) s) = (\\<Prod>s\\<in>S. f s (inv p s))", "let ?ps = \"\\<lambda>s. (p s, s)\""], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<Prod>s\\<in>S. f (p s) s) = (\\<Prod>s\\<in>S. f s (inv p s))", "let ?ips = \"\\<lambda>s. (s, Hilbert_Choice.inv p s)\""], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<Prod>s\\<in>S. f (p s) s) = (\\<Prod>s\\<in>S. f s (inv p s))", "have inj1: \"inj_on ?ps S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. inj_on (\\<lambda>s. (p s, s)) S", "by (rule inj_onI;auto)"], ["proof (state)\nthis:\n  inj_on (\\<lambda>s. (p s, s)) S\n\ngoal (1 subgoal):\n 1. (\\<Prod>s\\<in>S. f (p s) s) = (\\<Prod>s\\<in>S. f s (inv p s))", "have inj2: \"inj_on ?ips S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. inj_on (\\<lambda>s. (s, inv p s)) S", "by (rule inj_onI;auto)"], ["proof (state)\nthis:\n  inj_on (\\<lambda>s. (s, inv p s)) S\n\ngoal (1 subgoal):\n 1. (\\<Prod>s\\<in>S. f (p s) s) = (\\<Prod>s\\<in>S. f s (inv p s))", "have \"?l = prod ?f (?ps ` S)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Prod>s\\<in>S. f (p s) s) =\n    (\\<Prod>(x, y)\\<in>(\\<lambda>s. (p s, s)) ` S. f x y)", "using prod.reindex[OF inj1, of ?f]"], ["proof (prove)\nusing this:\n  (\\<Prod>(x, y)\\<in>(\\<lambda>s. (p s, s)) ` S. f x y) =\n  prod ((\\<lambda>(x, y). f x y) \\<circ> (\\<lambda>s. (p s, s))) S\n\ngoal (1 subgoal):\n 1. (\\<Prod>s\\<in>S. f (p s) s) =\n    (\\<Prod>(x, y)\\<in>(\\<lambda>s. (p s, s)) ` S. f x y)", "by simp"], ["proof (state)\nthis:\n  (\\<Prod>s\\<in>S. f (p s) s) =\n  (\\<Prod>(x, y)\\<in>(\\<lambda>s. (p s, s)) ` S. f x y)\n\ngoal (1 subgoal):\n 1. (\\<Prod>s\\<in>S. f (p s) s) = (\\<Prod>s\\<in>S. f s (inv p s))", "also"], ["proof (state)\nthis:\n  (\\<Prod>s\\<in>S. f (p s) s) =\n  (\\<Prod>(x, y)\\<in>(\\<lambda>s. (p s, s)) ` S. f x y)\n\ngoal (1 subgoal):\n 1. (\\<Prod>s\\<in>S. f (p s) s) = (\\<Prod>s\\<in>S. f s (inv p s))", "have \"?ps ` S = {(p s, s) |s. s \\<in> S}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>s. (p s, s)) ` S = {(p s, s) |s. s \\<in> S}", "by auto"], ["proof (state)\nthis:\n  (\\<lambda>s. (p s, s)) ` S = {(p s, s) |s. s \\<in> S}\n\ngoal (1 subgoal):\n 1. (\\<Prod>s\\<in>S. f (p s) s) = (\\<Prod>s\\<in>S. f s (inv p s))", "also"], ["proof (state)\nthis:\n  (\\<lambda>s. (p s, s)) ` S = {(p s, s) |s. s \\<in> S}\n\ngoal (1 subgoal):\n 1. (\\<Prod>s\\<in>S. f (p s) s) = (\\<Prod>s\\<in>S. f s (inv p s))", "have \"... = {(s, Hilbert_Choice.inv p s) | s. s \\<in> S}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {(p s, s) |s. s \\<in> S} = {(s, inv p s) |s. s \\<in> S}", "unfolding permutes_pair_eq[OF p]"], ["proof (prove)\ngoal (1 subgoal):\n 1. {(s, inv p s) |s. s \\<in> S} = {(s, inv p s) |s. s \\<in> S}", "by simp"], ["proof (state)\nthis:\n  {(p s, s) |s. s \\<in> S} = {(s, inv p s) |s. s \\<in> S}\n\ngoal (1 subgoal):\n 1. (\\<Prod>s\\<in>S. f (p s) s) = (\\<Prod>s\\<in>S. f s (inv p s))", "also"], ["proof (state)\nthis:\n  {(p s, s) |s. s \\<in> S} = {(s, inv p s) |s. s \\<in> S}\n\ngoal (1 subgoal):\n 1. (\\<Prod>s\\<in>S. f (p s) s) = (\\<Prod>s\\<in>S. f s (inv p s))", "have \"... = ?ips ` S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {(s, inv p s) |s. s \\<in> S} = (\\<lambda>s. (s, inv p s)) ` S", "by auto"], ["proof (state)\nthis:\n  {(s, inv p s) |s. s \\<in> S} = (\\<lambda>s. (s, inv p s)) ` S\n\ngoal (1 subgoal):\n 1. (\\<Prod>s\\<in>S. f (p s) s) = (\\<Prod>s\\<in>S. f s (inv p s))", "also"], ["proof (state)\nthis:\n  {(s, inv p s) |s. s \\<in> S} = (\\<lambda>s. (s, inv p s)) ` S\n\ngoal (1 subgoal):\n 1. (\\<Prod>s\\<in>S. f (p s) s) = (\\<Prod>s\\<in>S. f s (inv p s))", "have \"prod ?f ... = ?r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Prod>(x, y)\\<in>(\\<lambda>s. (s, inv p s)) ` S. f x y) =\n    (\\<Prod>s\\<in>S. f s (inv p s))", "using prod.reindex[OF inj2, of ?f]"], ["proof (prove)\nusing this:\n  (\\<Prod>(x, y)\\<in>(\\<lambda>s. (s, inv p s)) ` S. f x y) =\n  prod ((\\<lambda>(x, y). f x y) \\<circ> (\\<lambda>s. (s, inv p s))) S\n\ngoal (1 subgoal):\n 1. (\\<Prod>(x, y)\\<in>(\\<lambda>s. (s, inv p s)) ` S. f x y) =\n    (\\<Prod>s\\<in>S. f s (inv p s))", "by simp"], ["proof (state)\nthis:\n  (\\<Prod>(x, y)\\<in>(\\<lambda>s. (s, inv p s)) ` S. f x y) =\n  (\\<Prod>s\\<in>S. f s (inv p s))\n\ngoal (1 subgoal):\n 1. (\\<Prod>s\\<in>S. f (p s) s) = (\\<Prod>s\\<in>S. f s (inv p s))", "finally"], ["proof (chain)\npicking this:\n  (\\<Prod>s\\<in>S. f (p s) s) = (\\<Prod>s\\<in>S. f s (inv p s))", "show ?thesis"], ["proof (prove)\nusing this:\n  (\\<Prod>s\\<in>S. f (p s) s) = (\\<Prod>s\\<in>S. f s (inv p s))\n\ngoal (1 subgoal):\n 1. (\\<Prod>s\\<in>S. f (p s) s) = (\\<Prod>s\\<in>S. f s (inv p s))", "."], ["proof (state)\nthis:\n  (\\<Prod>s\\<in>S. f (p s) s) = (\\<Prod>s\\<in>S. f s (inv p s))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma permutes_sum:\n  assumes p: \"p permutes S\"\n  shows \"(\\<Sum>s\\<in>S. f (p s) s) = (\\<Sum>s\\<in>S. f s (Hilbert_Choice.inv p s))\"\n    (is \"?l = ?r\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>s\\<in>S. f (p s) s) = (\\<Sum>s\\<in>S. f s (inv p s))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<Sum>s\\<in>S. f (p s) s) = (\\<Sum>s\\<in>S. f s (inv p s))", "let ?f = \"\\<lambda>(x,y). f x y\""], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<Sum>s\\<in>S. f (p s) s) = (\\<Sum>s\\<in>S. f s (inv p s))", "let ?ps = \"\\<lambda>s. (p s, s)\""], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<Sum>s\\<in>S. f (p s) s) = (\\<Sum>s\\<in>S. f s (inv p s))", "let ?ips = \"\\<lambda>s. (s, Hilbert_Choice.inv p s)\""], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<Sum>s\\<in>S. f (p s) s) = (\\<Sum>s\\<in>S. f s (inv p s))", "have inj1: \"inj_on ?ps S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. inj_on (\\<lambda>s. (p s, s)) S", "by (rule inj_onI;auto)"], ["proof (state)\nthis:\n  inj_on (\\<lambda>s. (p s, s)) S\n\ngoal (1 subgoal):\n 1. (\\<Sum>s\\<in>S. f (p s) s) = (\\<Sum>s\\<in>S. f s (inv p s))", "have inj2: \"inj_on ?ips S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. inj_on (\\<lambda>s. (s, inv p s)) S", "by (rule inj_onI;auto)"], ["proof (state)\nthis:\n  inj_on (\\<lambda>s. (s, inv p s)) S\n\ngoal (1 subgoal):\n 1. (\\<Sum>s\\<in>S. f (p s) s) = (\\<Sum>s\\<in>S. f s (inv p s))", "have \"?l = sum ?f (?ps ` S)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>s\\<in>S. f (p s) s) =\n    (\\<Sum>(x, y)\\<in>(\\<lambda>s. (p s, s)) ` S. f x y)", "using sum.reindex[OF inj1, of ?f]"], ["proof (prove)\nusing this:\n  (\\<Sum>(x, y)\\<in>(\\<lambda>s. (p s, s)) ` S. f x y) =\n  sum ((\\<lambda>(x, y). f x y) \\<circ> (\\<lambda>s. (p s, s))) S\n\ngoal (1 subgoal):\n 1. (\\<Sum>s\\<in>S. f (p s) s) =\n    (\\<Sum>(x, y)\\<in>(\\<lambda>s. (p s, s)) ` S. f x y)", "by simp"], ["proof (state)\nthis:\n  (\\<Sum>s\\<in>S. f (p s) s) =\n  (\\<Sum>(x, y)\\<in>(\\<lambda>s. (p s, s)) ` S. f x y)\n\ngoal (1 subgoal):\n 1. (\\<Sum>s\\<in>S. f (p s) s) = (\\<Sum>s\\<in>S. f s (inv p s))", "also"], ["proof (state)\nthis:\n  (\\<Sum>s\\<in>S. f (p s) s) =\n  (\\<Sum>(x, y)\\<in>(\\<lambda>s. (p s, s)) ` S. f x y)\n\ngoal (1 subgoal):\n 1. (\\<Sum>s\\<in>S. f (p s) s) = (\\<Sum>s\\<in>S. f s (inv p s))", "have \"?ps ` S = {(p s, s) |s. s \\<in> S}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>s. (p s, s)) ` S = {(p s, s) |s. s \\<in> S}", "by auto"], ["proof (state)\nthis:\n  (\\<lambda>s. (p s, s)) ` S = {(p s, s) |s. s \\<in> S}\n\ngoal (1 subgoal):\n 1. (\\<Sum>s\\<in>S. f (p s) s) = (\\<Sum>s\\<in>S. f s (inv p s))", "also"], ["proof (state)\nthis:\n  (\\<lambda>s. (p s, s)) ` S = {(p s, s) |s. s \\<in> S}\n\ngoal (1 subgoal):\n 1. (\\<Sum>s\\<in>S. f (p s) s) = (\\<Sum>s\\<in>S. f s (inv p s))", "have \"... = {(s, Hilbert_Choice.inv p s) | s. s \\<in> S}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {(p s, s) |s. s \\<in> S} = {(s, inv p s) |s. s \\<in> S}", "unfolding permutes_pair_eq[OF p]"], ["proof (prove)\ngoal (1 subgoal):\n 1. {(s, inv p s) |s. s \\<in> S} = {(s, inv p s) |s. s \\<in> S}", "by simp"], ["proof (state)\nthis:\n  {(p s, s) |s. s \\<in> S} = {(s, inv p s) |s. s \\<in> S}\n\ngoal (1 subgoal):\n 1. (\\<Sum>s\\<in>S. f (p s) s) = (\\<Sum>s\\<in>S. f s (inv p s))", "also"], ["proof (state)\nthis:\n  {(p s, s) |s. s \\<in> S} = {(s, inv p s) |s. s \\<in> S}\n\ngoal (1 subgoal):\n 1. (\\<Sum>s\\<in>S. f (p s) s) = (\\<Sum>s\\<in>S. f s (inv p s))", "have \"... = ?ips ` S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {(s, inv p s) |s. s \\<in> S} = (\\<lambda>s. (s, inv p s)) ` S", "by auto"], ["proof (state)\nthis:\n  {(s, inv p s) |s. s \\<in> S} = (\\<lambda>s. (s, inv p s)) ` S\n\ngoal (1 subgoal):\n 1. (\\<Sum>s\\<in>S. f (p s) s) = (\\<Sum>s\\<in>S. f s (inv p s))", "also"], ["proof (state)\nthis:\n  {(s, inv p s) |s. s \\<in> S} = (\\<lambda>s. (s, inv p s)) ` S\n\ngoal (1 subgoal):\n 1. (\\<Sum>s\\<in>S. f (p s) s) = (\\<Sum>s\\<in>S. f s (inv p s))", "have \"sum ?f ... = ?r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>(x, y)\\<in>(\\<lambda>s. (s, inv p s)) ` S. f x y) =\n    (\\<Sum>s\\<in>S. f s (inv p s))", "using sum.reindex[OF inj2, of ?f]"], ["proof (prove)\nusing this:\n  (\\<Sum>(x, y)\\<in>(\\<lambda>s. (s, inv p s)) ` S. f x y) =\n  sum ((\\<lambda>(x, y). f x y) \\<circ> (\\<lambda>s. (s, inv p s))) S\n\ngoal (1 subgoal):\n 1. (\\<Sum>(x, y)\\<in>(\\<lambda>s. (s, inv p s)) ` S. f x y) =\n    (\\<Sum>s\\<in>S. f s (inv p s))", "by simp"], ["proof (state)\nthis:\n  (\\<Sum>(x, y)\\<in>(\\<lambda>s. (s, inv p s)) ` S. f x y) =\n  (\\<Sum>s\\<in>S. f s (inv p s))\n\ngoal (1 subgoal):\n 1. (\\<Sum>s\\<in>S. f (p s) s) = (\\<Sum>s\\<in>S. f s (inv p s))", "finally"], ["proof (chain)\npicking this:\n  (\\<Sum>s\\<in>S. f (p s) s) = (\\<Sum>s\\<in>S. f s (inv p s))", "show ?thesis"], ["proof (prove)\nusing this:\n  (\\<Sum>s\\<in>S. f (p s) s) = (\\<Sum>s\\<in>S. f s (inv p s))\n\ngoal (1 subgoal):\n 1. (\\<Sum>s\\<in>S. f (p s) s) = (\\<Sum>s\\<in>S. f s (inv p s))", "."], ["proof (state)\nthis:\n  (\\<Sum>s\\<in>S. f (p s) s) = (\\<Sum>s\\<in>S. f s (inv p s))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma inv_inj_on_permutes: \"inj_on Hilbert_Choice.inv { p. p permutes S }\""], ["proof (prove)\ngoal (1 subgoal):\n 1. inj_on inv {p. p permutes S}", "proof (intro inj_onI, unfold mem_Collect_eq)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x permutes S; y permutes S; inv x = inv y\\<rbrakk>\n       \\<Longrightarrow> x = y", "let ?i = \"Hilbert_Choice.inv\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x permutes S; y permutes S; inv x = inv y\\<rbrakk>\n       \\<Longrightarrow> x = y", "fix p q"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x permutes S; y permutes S; inv x = inv y\\<rbrakk>\n       \\<Longrightarrow> x = y", "assume p: \"p permutes S\" and q: \"q permutes S\" and eq: \"?i p = ?i q\""], ["proof (state)\nthis:\n  p permutes S\n  q permutes S\n  inv p = inv q\n\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x permutes S; y permutes S; inv x = inv y\\<rbrakk>\n       \\<Longrightarrow> x = y", "have \"?i (?i p) = ?i (?i q)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. inv (inv p) = inv (inv q)", "using eq"], ["proof (prove)\nusing this:\n  inv p = inv q\n\ngoal (1 subgoal):\n 1. inv (inv p) = inv (inv q)", "by simp"], ["proof (state)\nthis:\n  inv (inv p) = inv (inv q)\n\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x permutes S; y permutes S; inv x = inv y\\<rbrakk>\n       \\<Longrightarrow> x = y", "thus \"p = q\""], ["proof (prove)\nusing this:\n  inv (inv p) = inv (inv q)\n\ngoal (1 subgoal):\n 1. p = q", "using inv_inv_eq[OF permutes_bij] p q"], ["proof (prove)\nusing this:\n  inv (inv p) = inv (inv q)\n  ?f permutes ?s1 \\<Longrightarrow> inv (inv ?f) = ?f\n  p permutes S\n  q permutes S\n\ngoal (1 subgoal):\n 1. p = q", "by metis"], ["proof (state)\nthis:\n  p = q\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma permutes_others:\n  assumes p: \"p permutes S\" and x: \"x \\<notin> S\" shows \"p x = x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. p x = x", "using p"], ["proof (prove)\nusing this:\n  p permutes S\n\ngoal (1 subgoal):\n 1. p x = x", "unfolding permutes_def"], ["proof (prove)\nusing this:\n  (\\<forall>x. x \\<notin> S \\<longrightarrow> p x = x) \\<and>\n  (\\<forall>y. \\<exists>!x. p x = y)\n\ngoal (1 subgoal):\n 1. p x = x", "using x"], ["proof (prove)\nusing this:\n  (\\<forall>x. x \\<notin> S \\<longrightarrow> p x = x) \\<and>\n  (\\<forall>y. \\<exists>!x. p x = y)\n  x \\<notin> S\n\ngoal (1 subgoal):\n 1. p x = x", "by simp"], ["", "end"]]}