{"file_name": "/home/qj213/afp-2021-10-22/thys/BDD/BinDag.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/BDD", "problem_names": ["lemma [simp]: \"Node lt a rt \\<noteq> lt\"", "lemma [simp]: \"lt \\<noteq> Node lt a rt\"", "lemma [simp]: \"Node lt a rt \\<noteq> rt\"", "lemma [simp]: \"rt \\<noteq> Node lt a rt\"", "lemma subdag_size: \"subdag t s \\<Longrightarrow> size s < size t\"", "lemma subdag_neq: \"subdag t s \\<Longrightarrow> t\\<noteq>s\"", "lemma subdag_trans [trans]: \"subdag t s \\<Longrightarrow> subdag s r \\<Longrightarrow> subdag t r\"", "lemma subdag_NodeD: \n  \"subdag t (Node lt a rt) \\<Longrightarrow> subdag t lt \\<and> subdag t rt\"", "lemma subdag_not_sym: \"\\<And>t. \\<lbrakk>subdag s t; subdag t s\\<rbrakk> \\<Longrightarrow> P\"", "lemma le_dag_refl: \"(x::dag) \\<le> x\"", "lemma le_dag_trans:\n  fixes x::dag and  y and z \n  assumes x_y: \"x \\<le> y\" and y_z: \"y \\<le> z\" \n  shows \"x \\<le> z\"", "lemma le_dag_antisym:\n  fixes x::dag and  y   \n  assumes x_y: \"x \\<le> y\" and y_x: \"y \\<le> x\" \n  shows \"x = y\"", "lemma dag_less_le: \n  fixes x::dag and y\n  shows \"(x < y) = (x \\<le> y \\<and> x \\<noteq> y)\"", "lemma less_dag_Tip [simp]: \"\\<not> (x < Tip)\"", "lemma less_dag_Node: \"x < (Node l a r) = \n  (x \\<le> l \\<or> x \\<le> r)\"", "lemma less_dag_Node': \"x < (Node l a r) = \n  (x=l \\<or> x=r \\<or> x < l \\<or> x < r)\"", "lemma less_Node_dag: \"(Node l a r) < x \\<Longrightarrow> l < x \\<and> r < x\"", "lemma less_dag_set_of: \"x < y \\<Longrightarrow> set_of x \\<subseteq> set_of y\"", "lemma le_dag_set_of: \"x \\<le> y \\<Longrightarrow> set_of x \\<subseteq> set_of y\"", "lemma DAG_less: \"DAG y \\<Longrightarrow> x < y \\<Longrightarrow> DAG x\"", "lemma less_DAG_set_of: \n  assumes x_less_y: \"x < y\" \n  assumes DAG_y: \"DAG y\"\n  shows \"set_of x \\<subset> set_of y\"", "lemma in_set_of_decomp: \n  \"p \\<in> set_of t = (\\<exists>l r. t=(Node l p r) \\<or> subdag t (Node l p r))\"\n  (is \"?A = ?B\")", "lemma Dag_Null [simp]: \"Dag Null l r  t = (t = Tip)\"", "lemma Dag_Ref [simp]: \n  \"p\\<noteq>Null \\<Longrightarrow> Dag p l r  t = (\\<exists>lt rt. t=Node lt p rt \\<and> \n                                Dag (l p) l r lt \\<and> Dag (r p) l r rt)\"", "lemma Null_notin_Dag [simp, intro]: \"\\<And>p l r. Dag p l r t \\<Longrightarrow> Null \\<notin> set_of t\"", "theorem notin_Dag_update_l [simp]:\n    \"\\<And> p. q \\<notin> set_of t \\<Longrightarrow> Dag p (l(q := y)) r  t = Dag p l r t\"", "theorem notin_Dag_update_r [simp]:\n    \"\\<And> p. q \\<notin> set_of t \\<Longrightarrow> Dag p l (r(q := y)) t = Dag p l r t\"", "lemma Dag_upd_same_l_lemma: \"\\<And>p. p\\<noteq>Null \\<Longrightarrow> \\<not> Dag p (l(p:=p)) r t\"", "lemma Dag_upd_same_l [simp]: \"Dag p (l(p:=p)) r t = (p=Null \\<and> t=Tip)\"", "lemma Dag_upd_same_r_lemma: \"\\<And>p. p\\<noteq>Null \\<Longrightarrow> \\<not> Dag p l (r(p:=p)) t\"", "lemma Dag_upd_same_r [simp]: \"Dag p l (r(p:=p)) t = (p=Null \\<and> t=Tip)\"", "lemma  Dag_update_l_new [simp]: \"\\<lbrakk>set_of t \\<subseteq> set alloc\\<rbrakk>\n     \\<Longrightarrow> Dag p (l(new (set alloc) := x)) r t = Dag p l r t\"", "lemma  Dag_update_r_new [simp]: \"\\<lbrakk>set_of t \\<subseteq> set alloc\\<rbrakk>\n     \\<Longrightarrow> Dag p l (r(new (set alloc) := x)) t = Dag p l r t\"", "lemma Dag_update_lI [intro]:\n    \"\\<lbrakk>Dag p l r t; q \\<notin> set_of t\\<rbrakk> \\<Longrightarrow> Dag p (l(q := y)) r t\"", "lemma Dag_update_rI [intro]:\n    \"\\<lbrakk>Dag p l r t; q \\<notin> set_of t\\<rbrakk> \\<Longrightarrow> Dag p l (r(q := y)) t\"", "lemma Dag_unique: \"\\<And> p t2. Dag p l r t1 \\<Longrightarrow> Dag p l r t2 \\<Longrightarrow> t1=t2\"", "lemma Dag_unique1: \"Dag p l r t \\<Longrightarrow> \\<exists>!t. Dag p l r t\"", "lemma Dag_subdag: \"\\<And> p. Dag p l r t \\<Longrightarrow> subdag t s \\<Longrightarrow> \\<exists> q. Dag q l r s\"", "lemma Dag_root_not_in_subdag_l [simp,intro]: \n  assumes \"Dag (l p) l r t\"\n  shows \"p \\<notin> set_of t\"", "lemma Dag_root_not_in_subdag_r [simp, intro]:\n  assumes \"Dag (r p) l r t\"\n  shows \"p \\<notin> set_of t\"", "lemma Dag_is_DAG: \"\\<And>p l r. Dag p l r t \\<Longrightarrow> DAG t\"", "lemma heaps_eq_Dag_eq:\n  \"\\<And>p. \\<forall>x \\<in> set_of t. l x = l' x \\<and> r x = r' x \n    \\<Longrightarrow> Dag p l r t = Dag p l' r' t\"", "lemma heaps_eq_DagI1: \n  \"\\<lbrakk>Dag p l r t; \\<forall>x\\<in>set_of t. l x = l' x \\<and> r x = r' x\\<rbrakk>\n    \\<Longrightarrow> Dag p l' r' t\"", "lemma heaps_eq_DagI2: \n  \"\\<lbrakk>Dag p l' r' t; \\<forall>x\\<in>set_of t. l x = l' x \\<and> r x = r' x\\<rbrakk>\n    \\<Longrightarrow> Dag p l r t\"", "lemma  Dag_unique_all_impl_simp [simp]: \n  \"Dag p l r t \\<Longrightarrow> (\\<forall>t. Dag p l r t \\<longrightarrow> P t) = P t\"", "lemma Dag_unique_ex_conj_simp [simp]: \n  \"Dag p l r t \\<Longrightarrow> (\\<exists>t. Dag p l r t \\<and> P t) = P t\"", "lemma Dags_eq_hp_eq: \n  \"\\<And>p p'. \\<lbrakk>Dag p l r t; Dag p' l' r' t\\<rbrakk> \\<Longrightarrow>\n    p'=p \\<and> (\\<forall>no \\<in> set_of t. l' no = l no \\<and> r' no = r no)\"", "lemma Dag_conv_isDag_dag: \"Dag p l r t = (isDag p l r \\<and> t=dag p l r)\"", "lemma Dag_dag: \"Dag p l r t \\<Longrightarrow> dag p l r = t\""], "translations": [["", "lemma [simp]: \"Node lt a rt \\<noteq> lt\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Node lt a rt \\<noteq> lt", "by (induct lt) auto"], ["", "lemma [simp]: \"lt \\<noteq> Node lt a rt\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lt \\<noteq> Node lt a rt", "by (induct lt) auto"], ["", "lemma [simp]: \"Node lt a rt \\<noteq> rt\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Node lt a rt \\<noteq> rt", "by (induct rt) auto"], ["", "lemma [simp]: \"rt \\<noteq> Node lt a rt\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rt \\<noteq> Node lt a rt", "by (induct rt) auto"], ["", "primrec set_of:: \"dag \\<Rightarrow> ref set\" where\n  set_of_Tip: \"set_of Tip = {}\"\n  | set_of_Node: \"set_of (Node lt a rt) = {a} \\<union> set_of lt \\<union> set_of rt\""], ["", "primrec DAG:: \"dag \\<Rightarrow> bool\" where\n  \"DAG Tip = True\"\n  | \"DAG (Node l a r) = (a \\<notin> set_of l \\<and> a \\<notin> set_of r \\<and> DAG l \\<and> DAG r)\""], ["", "primrec subdag:: \"dag \\<Rightarrow> dag \\<Rightarrow> bool\" where\n  \"subdag Tip t = False\"\n  | \"subdag (Node l a r) t = (t=l \\<or> t=r \\<or> subdag l t \\<or> subdag r t)\""], ["", "lemma subdag_size: \"subdag t s \\<Longrightarrow> size s < size t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. subdag t s \\<Longrightarrow> size s < size t", "by  (induct t) auto"], ["", "lemma subdag_neq: \"subdag t s \\<Longrightarrow> t\\<noteq>s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. subdag t s \\<Longrightarrow> t \\<noteq> s", "by (induct t) (auto dest: subdag_size)"], ["", "lemma subdag_trans [trans]: \"subdag t s \\<Longrightarrow> subdag s r \\<Longrightarrow> subdag t r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>subdag t s; subdag s r\\<rbrakk> \\<Longrightarrow> subdag t r", "by (induct t) auto"], ["", "lemma subdag_NodeD: \n  \"subdag t (Node lt a rt) \\<Longrightarrow> subdag t lt \\<and> subdag t rt\""], ["proof (prove)\ngoal (1 subgoal):\n 1. subdag t (Node lt a rt) \\<Longrightarrow> subdag t lt \\<and> subdag t rt", "by (induct t) auto"], ["", "lemma subdag_not_sym: \"\\<And>t. \\<lbrakk>subdag s t; subdag t s\\<rbrakk> \\<Longrightarrow> P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>t. \\<lbrakk>subdag s t; subdag t s\\<rbrakk> \\<Longrightarrow> P", "by (induct s) (auto dest: subdag_NodeD)"], ["", "instantiation dag :: order\nbegin"], ["", "definition\n  less_dag_def: \"s < (t::dag) \\<longleftrightarrow> subdag t s\""], ["", "definition\n  le_dag_def: \"s \\<le> (t::dag) \\<longleftrightarrow> s=t \\<or> s < t\""], ["", "lemma le_dag_refl: \"(x::dag) \\<le> x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<le> x", "by (simp add: le_dag_def)"], ["", "lemma le_dag_trans:\n  fixes x::dag and  y and z \n  assumes x_y: \"x \\<le> y\" and y_z: \"y \\<le> z\" \n  shows \"x \\<le> z\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<le> z", "proof (cases \"x=y\")"], ["proof (state)\ngoal (2 subgoals):\n 1. x = y \\<Longrightarrow> x \\<le> z\n 2. x \\<noteq> y \\<Longrightarrow> x \\<le> z", "case True"], ["proof (state)\nthis:\n  x = y\n\ngoal (2 subgoals):\n 1. x = y \\<Longrightarrow> x \\<le> z\n 2. x \\<noteq> y \\<Longrightarrow> x \\<le> z", "with y_z"], ["proof (chain)\npicking this:\n  y \\<le> z\n  x = y", "show ?thesis"], ["proof (prove)\nusing this:\n  y \\<le> z\n  x = y\n\ngoal (1 subgoal):\n 1. x \\<le> z", "by simp"], ["proof (state)\nthis:\n  x \\<le> z\n\ngoal (1 subgoal):\n 1. x \\<noteq> y \\<Longrightarrow> x \\<le> z", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. x \\<noteq> y \\<Longrightarrow> x \\<le> z", "case False"], ["proof (state)\nthis:\n  x \\<noteq> y\n\ngoal (1 subgoal):\n 1. x \\<noteq> y \\<Longrightarrow> x \\<le> z", "note x_neq_y = this"], ["proof (state)\nthis:\n  x \\<noteq> y\n\ngoal (1 subgoal):\n 1. x \\<noteq> y \\<Longrightarrow> x \\<le> z", "with x_y"], ["proof (chain)\npicking this:\n  x \\<le> y\n  x \\<noteq> y", "have x_less_y: \"x < y\""], ["proof (prove)\nusing this:\n  x \\<le> y\n  x \\<noteq> y\n\ngoal (1 subgoal):\n 1. x < y", "by (simp add: le_dag_def)"], ["proof (state)\nthis:\n  x < y\n\ngoal (1 subgoal):\n 1. x \\<noteq> y \\<Longrightarrow> x \\<le> z", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<le> z", "proof (cases \"y=z\")"], ["proof (state)\ngoal (2 subgoals):\n 1. y = z \\<Longrightarrow> x \\<le> z\n 2. y \\<noteq> z \\<Longrightarrow> x \\<le> z", "case True"], ["proof (state)\nthis:\n  y = z\n\ngoal (2 subgoals):\n 1. y = z \\<Longrightarrow> x \\<le> z\n 2. y \\<noteq> z \\<Longrightarrow> x \\<le> z", "with x_y"], ["proof (chain)\npicking this:\n  x \\<le> y\n  y = z", "show ?thesis"], ["proof (prove)\nusing this:\n  x \\<le> y\n  y = z\n\ngoal (1 subgoal):\n 1. x \\<le> z", "by simp"], ["proof (state)\nthis:\n  x \\<le> z\n\ngoal (1 subgoal):\n 1. y \\<noteq> z \\<Longrightarrow> x \\<le> z", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. y \\<noteq> z \\<Longrightarrow> x \\<le> z", "case False"], ["proof (state)\nthis:\n  y \\<noteq> z\n\ngoal (1 subgoal):\n 1. y \\<noteq> z \\<Longrightarrow> x \\<le> z", "with y_z"], ["proof (chain)\npicking this:\n  y \\<le> z\n  y \\<noteq> z", "have \"y < z\""], ["proof (prove)\nusing this:\n  y \\<le> z\n  y \\<noteq> z\n\ngoal (1 subgoal):\n 1. y < z", "by (simp add: le_dag_def)"], ["proof (state)\nthis:\n  y < z\n\ngoal (1 subgoal):\n 1. y \\<noteq> z \\<Longrightarrow> x \\<le> z", "with x_less_y"], ["proof (chain)\npicking this:\n  x < y\n  y < z", "have \"x < z\""], ["proof (prove)\nusing this:\n  x < y\n  y < z\n\ngoal (1 subgoal):\n 1. x < z", "by (auto simp add: less_dag_def intro: subdag_trans)"], ["proof (state)\nthis:\n  x < z\n\ngoal (1 subgoal):\n 1. y \\<noteq> z \\<Longrightarrow> x \\<le> z", "thus ?thesis"], ["proof (prove)\nusing this:\n  x < z\n\ngoal (1 subgoal):\n 1. x \\<le> z", "by (simp add: le_dag_def)"], ["proof (state)\nthis:\n  x \\<le> z\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  x \\<le> z\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma le_dag_antisym:\n  fixes x::dag and  y   \n  assumes x_y: \"x \\<le> y\" and y_x: \"y \\<le> x\" \n  shows \"x = y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x = y", "proof (cases \"x=y\")"], ["proof (state)\ngoal (2 subgoals):\n 1. x = y \\<Longrightarrow> x = y\n 2. x \\<noteq> y \\<Longrightarrow> x = y", "case True"], ["proof (state)\nthis:\n  x = y\n\ngoal (2 subgoals):\n 1. x = y \\<Longrightarrow> x = y\n 2. x \\<noteq> y \\<Longrightarrow> x = y", "thus ?thesis"], ["proof (prove)\nusing this:\n  x = y\n\ngoal (1 subgoal):\n 1. x = y", "."], ["proof (state)\nthis:\n  x = y\n\ngoal (1 subgoal):\n 1. x \\<noteq> y \\<Longrightarrow> x = y", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. x \\<noteq> y \\<Longrightarrow> x = y", "case False"], ["proof (state)\nthis:\n  x \\<noteq> y\n\ngoal (1 subgoal):\n 1. x \\<noteq> y \\<Longrightarrow> x = y", "with x_y y_x"], ["proof (chain)\npicking this:\n  x \\<le> y\n  y \\<le> x\n  x \\<noteq> y", "show ?thesis"], ["proof (prove)\nusing this:\n  x \\<le> y\n  y \\<le> x\n  x \\<noteq> y\n\ngoal (1 subgoal):\n 1. x = y", "by (auto simp add: less_dag_def le_dag_def intro: subdag_not_sym)"], ["proof (state)\nthis:\n  x = y\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma dag_less_le: \n  fixes x::dag and y\n  shows \"(x < y) = (x \\<le> y \\<and> x \\<noteq> y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (x < y) = (x \\<le> y \\<and> x \\<noteq> y)", "by (auto simp add: less_dag_def le_dag_def dest: subdag_neq)"], ["", "instance"], ["proof (prove)\ngoal (1 subgoal):\n 1. OFCLASS(dag, order_class)", "by standard (auto simp add: dag_less_le le_dag_refl intro: le_dag_trans dest: le_dag_antisym)"], ["", "end"], ["", "lemma less_dag_Tip [simp]: \"\\<not> (x < Tip)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> x < Tip", "by (simp add: less_dag_def)"], ["", "lemma less_dag_Node: \"x < (Node l a r) = \n  (x \\<le> l \\<or> x \\<le> r)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (x < Node l a r) = (x \\<le> l \\<or> x \\<le> r)", "by (auto simp add: order_le_less less_dag_def)"], ["", "lemma less_dag_Node': \"x < (Node l a r) = \n  (x=l \\<or> x=r \\<or> x < l \\<or> x < r)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (x < Node l a r) = (x = l \\<or> x = r \\<or> x < l \\<or> x < r)", "by (simp add: less_dag_def)"], ["", "lemma less_Node_dag: \"(Node l a r) < x \\<Longrightarrow> l < x \\<and> r < x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Node l a r < x \\<Longrightarrow> l < x \\<and> r < x", "by (auto simp add: less_dag_def dest: subdag_NodeD)"], ["", "lemma less_dag_set_of: \"x < y \\<Longrightarrow> set_of x \\<subseteq> set_of y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x < y \\<Longrightarrow> set_of x \\<subseteq> set_of y", "by (unfold less_dag_def, induct y, auto)"], ["", "lemma le_dag_set_of: \"x \\<le> y \\<Longrightarrow> set_of x \\<subseteq> set_of y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<le> y \\<Longrightarrow> set_of x \\<subseteq> set_of y", "apply (unfold le_dag_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. x = y \\<or> x < y \\<Longrightarrow> set_of x \\<subseteq> set_of y", "apply (erule disjE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. x = y \\<Longrightarrow> set_of x \\<subseteq> set_of y\n 2. x < y \\<Longrightarrow> set_of x \\<subseteq> set_of y", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. x < y \\<Longrightarrow> set_of x \\<subseteq> set_of y", "apply (erule less_dag_set_of)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma DAG_less: \"DAG y \\<Longrightarrow> x < y \\<Longrightarrow> DAG x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>DAG y; x < y\\<rbrakk> \\<Longrightarrow> DAG x", "by (induct y) (auto simp add: less_dag_Node')"], ["", "lemma less_DAG_set_of: \n  assumes x_less_y: \"x < y\" \n  assumes DAG_y: \"DAG y\"\n  shows \"set_of x \\<subset> set_of y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set_of x \\<subset> set_of y", "proof (cases y)"], ["proof (state)\ngoal (2 subgoals):\n 1. y = Tip \\<Longrightarrow> set_of x \\<subset> set_of y\n 2. \\<And>x21 x22 x23.\n       y = Node x21 x22 x23 \\<Longrightarrow> set_of x \\<subset> set_of y", "case Tip"], ["proof (state)\nthis:\n  y = Tip\n\ngoal (2 subgoals):\n 1. y = Tip \\<Longrightarrow> set_of x \\<subset> set_of y\n 2. \\<And>x21 x22 x23.\n       y = Node x21 x22 x23 \\<Longrightarrow> set_of x \\<subset> set_of y", "with x_less_y"], ["proof (chain)\npicking this:\n  x < y\n  y = Tip", "show ?thesis"], ["proof (prove)\nusing this:\n  x < y\n  y = Tip\n\ngoal (1 subgoal):\n 1. set_of x \\<subset> set_of y", "by simp"], ["proof (state)\nthis:\n  set_of x \\<subset> set_of y\n\ngoal (1 subgoal):\n 1. \\<And>x21 x22 x23.\n       y = Node x21 x22 x23 \\<Longrightarrow> set_of x \\<subset> set_of y", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x21 x22 x23.\n       y = Node x21 x22 x23 \\<Longrightarrow> set_of x \\<subset> set_of y", "case (Node l a r)"], ["proof (state)\nthis:\n  y = Node l a r\n\ngoal (1 subgoal):\n 1. \\<And>x21 x22 x23.\n       y = Node x21 x22 x23 \\<Longrightarrow> set_of x \\<subset> set_of y", "with DAG_y"], ["proof (chain)\npicking this:\n  DAG y\n  y = Node l a r", "obtain a: \"a \\<notin> set_of l\" \"a \\<notin> set_of r\""], ["proof (prove)\nusing this:\n  DAG y\n  y = Node l a r\n\ngoal (1 subgoal):\n 1. (\\<lbrakk>a \\<notin> set_of l; a \\<notin> set_of r\\<rbrakk>\n     \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by simp"], ["proof (state)\nthis:\n  a \\<notin> set_of l\n  a \\<notin> set_of r\n\ngoal (1 subgoal):\n 1. \\<And>x21 x22 x23.\n       y = Node x21 x22 x23 \\<Longrightarrow> set_of x \\<subset> set_of y", "from Node"], ["proof (chain)\npicking this:\n  y = Node l a r", "obtain l_less_y: \"l < y\" and r_less_y: \"r < y\""], ["proof (prove)\nusing this:\n  y = Node l a r\n\ngoal (1 subgoal):\n 1. (\\<lbrakk>l < y; r < y\\<rbrakk>\n     \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (simp add: less_dag_Node)"], ["proof (state)\nthis:\n  l < y\n  r < y\n\ngoal (1 subgoal):\n 1. \\<And>x21 x22 x23.\n       y = Node x21 x22 x23 \\<Longrightarrow> set_of x \\<subset> set_of y", "from Node a"], ["proof (chain)\npicking this:\n  y = Node l a r\n  a \\<notin> set_of l\n  a \\<notin> set_of r", "obtain \n    l_subset_y: \"set_of l \\<subset> set_of y\" and\n    r_subset_y: \"set_of r \\<subset> set_of y\""], ["proof (prove)\nusing this:\n  y = Node l a r\n  a \\<notin> set_of l\n  a \\<notin> set_of r\n\ngoal (1 subgoal):\n 1. (\\<lbrakk>set_of l \\<subset> set_of y;\n      set_of r \\<subset> set_of y\\<rbrakk>\n     \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  set_of l \\<subset> set_of y\n  set_of r \\<subset> set_of y\n\ngoal (1 subgoal):\n 1. \\<And>x21 x22 x23.\n       y = Node x21 x22 x23 \\<Longrightarrow> set_of x \\<subset> set_of y", "from Node x_less_y"], ["proof (chain)\npicking this:\n  y = Node l a r\n  x < y", "have \"x=l \\<or> x=r \\<or> x < l \\<or> x < r\""], ["proof (prove)\nusing this:\n  y = Node l a r\n  x < y\n\ngoal (1 subgoal):\n 1. x = l \\<or> x = r \\<or> x < l \\<or> x < r", "by (simp add: less_dag_Node')"], ["proof (state)\nthis:\n  x = l \\<or> x = r \\<or> x < l \\<or> x < r\n\ngoal (1 subgoal):\n 1. \\<And>x21 x22 x23.\n       y = Node x21 x22 x23 \\<Longrightarrow> set_of x \\<subset> set_of y", "thus ?thesis"], ["proof (prove)\nusing this:\n  x = l \\<or> x = r \\<or> x < l \\<or> x < r\n\ngoal (1 subgoal):\n 1. set_of x \\<subset> set_of y", "proof (elim disjE)"], ["proof (state)\ngoal (4 subgoals):\n 1. x = l \\<Longrightarrow> set_of x \\<subset> set_of y\n 2. x = r \\<Longrightarrow> set_of x \\<subset> set_of y\n 3. x < l \\<Longrightarrow> set_of x \\<subset> set_of y\n 4. x < r \\<Longrightarrow> set_of x \\<subset> set_of y", "assume \"x=l\""], ["proof (state)\nthis:\n  x = l\n\ngoal (4 subgoals):\n 1. x = l \\<Longrightarrow> set_of x \\<subset> set_of y\n 2. x = r \\<Longrightarrow> set_of x \\<subset> set_of y\n 3. x < l \\<Longrightarrow> set_of x \\<subset> set_of y\n 4. x < r \\<Longrightarrow> set_of x \\<subset> set_of y", "with l_subset_y"], ["proof (chain)\npicking this:\n  set_of l \\<subset> set_of y\n  x = l", "show ?thesis"], ["proof (prove)\nusing this:\n  set_of l \\<subset> set_of y\n  x = l\n\ngoal (1 subgoal):\n 1. set_of x \\<subset> set_of y", "by simp"], ["proof (state)\nthis:\n  set_of x \\<subset> set_of y\n\ngoal (3 subgoals):\n 1. x = r \\<Longrightarrow> set_of x \\<subset> set_of y\n 2. x < l \\<Longrightarrow> set_of x \\<subset> set_of y\n 3. x < r \\<Longrightarrow> set_of x \\<subset> set_of y", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. x = r \\<Longrightarrow> set_of x \\<subset> set_of y\n 2. x < l \\<Longrightarrow> set_of x \\<subset> set_of y\n 3. x < r \\<Longrightarrow> set_of x \\<subset> set_of y", "assume \"x=r\""], ["proof (state)\nthis:\n  x = r\n\ngoal (3 subgoals):\n 1. x = r \\<Longrightarrow> set_of x \\<subset> set_of y\n 2. x < l \\<Longrightarrow> set_of x \\<subset> set_of y\n 3. x < r \\<Longrightarrow> set_of x \\<subset> set_of y", "with r_subset_y"], ["proof (chain)\npicking this:\n  set_of r \\<subset> set_of y\n  x = r", "show ?thesis"], ["proof (prove)\nusing this:\n  set_of r \\<subset> set_of y\n  x = r\n\ngoal (1 subgoal):\n 1. set_of x \\<subset> set_of y", "by simp"], ["proof (state)\nthis:\n  set_of x \\<subset> set_of y\n\ngoal (2 subgoals):\n 1. x < l \\<Longrightarrow> set_of x \\<subset> set_of y\n 2. x < r \\<Longrightarrow> set_of x \\<subset> set_of y", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. x < l \\<Longrightarrow> set_of x \\<subset> set_of y\n 2. x < r \\<Longrightarrow> set_of x \\<subset> set_of y", "assume \"x < l\""], ["proof (state)\nthis:\n  x < l\n\ngoal (2 subgoals):\n 1. x < l \\<Longrightarrow> set_of x \\<subset> set_of y\n 2. x < r \\<Longrightarrow> set_of x \\<subset> set_of y", "hence \"set_of x \\<subseteq> set_of l\""], ["proof (prove)\nusing this:\n  x < l\n\ngoal (1 subgoal):\n 1. set_of x \\<subseteq> set_of l", "by (rule less_dag_set_of)"], ["proof (state)\nthis:\n  set_of x \\<subseteq> set_of l\n\ngoal (2 subgoals):\n 1. x < l \\<Longrightarrow> set_of x \\<subset> set_of y\n 2. x < r \\<Longrightarrow> set_of x \\<subset> set_of y", "also"], ["proof (state)\nthis:\n  set_of x \\<subseteq> set_of l\n\ngoal (2 subgoals):\n 1. x < l \\<Longrightarrow> set_of x \\<subset> set_of y\n 2. x < r \\<Longrightarrow> set_of x \\<subset> set_of y", "note l_subset_y"], ["proof (state)\nthis:\n  set_of l \\<subset> set_of y\n\ngoal (2 subgoals):\n 1. x < l \\<Longrightarrow> set_of x \\<subset> set_of y\n 2. x < r \\<Longrightarrow> set_of x \\<subset> set_of y", "finally"], ["proof (chain)\npicking this:\n  set_of x \\<subset> set_of y", "show ?thesis"], ["proof (prove)\nusing this:\n  set_of x \\<subset> set_of y\n\ngoal (1 subgoal):\n 1. set_of x \\<subset> set_of y", "."], ["proof (state)\nthis:\n  set_of x \\<subset> set_of y\n\ngoal (1 subgoal):\n 1. x < r \\<Longrightarrow> set_of x \\<subset> set_of y", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. x < r \\<Longrightarrow> set_of x \\<subset> set_of y", "assume \"x < r\""], ["proof (state)\nthis:\n  x < r\n\ngoal (1 subgoal):\n 1. x < r \\<Longrightarrow> set_of x \\<subset> set_of y", "hence \"set_of x \\<subseteq> set_of r\""], ["proof (prove)\nusing this:\n  x < r\n\ngoal (1 subgoal):\n 1. set_of x \\<subseteq> set_of r", "by (rule less_dag_set_of)"], ["proof (state)\nthis:\n  set_of x \\<subseteq> set_of r\n\ngoal (1 subgoal):\n 1. x < r \\<Longrightarrow> set_of x \\<subset> set_of y", "also"], ["proof (state)\nthis:\n  set_of x \\<subseteq> set_of r\n\ngoal (1 subgoal):\n 1. x < r \\<Longrightarrow> set_of x \\<subset> set_of y", "note r_subset_y"], ["proof (state)\nthis:\n  set_of r \\<subset> set_of y\n\ngoal (1 subgoal):\n 1. x < r \\<Longrightarrow> set_of x \\<subset> set_of y", "finally"], ["proof (chain)\npicking this:\n  set_of x \\<subset> set_of y", "show ?thesis"], ["proof (prove)\nusing this:\n  set_of x \\<subset> set_of y\n\ngoal (1 subgoal):\n 1. set_of x \\<subset> set_of y", "."], ["proof (state)\nthis:\n  set_of x \\<subset> set_of y\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  set_of x \\<subset> set_of y\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma in_set_of_decomp: \n  \"p \\<in> set_of t = (\\<exists>l r. t=(Node l p r) \\<or> subdag t (Node l p r))\"\n  (is \"?A = ?B\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. (p \\<in> set_of t) =\n    (\\<exists>l r. t = Node l p r \\<or> subdag t (Node l p r))", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. p \\<in> set_of t \\<Longrightarrow>\n    \\<exists>l r. t = Node l p r \\<or> subdag t (Node l p r)\n 2. \\<exists>l r.\n       t = Node l p r \\<or> subdag t (Node l p r) \\<Longrightarrow>\n    p \\<in> set_of t", "assume \"?A\""], ["proof (state)\nthis:\n  p \\<in> set_of t\n\ngoal (2 subgoals):\n 1. p \\<in> set_of t \\<Longrightarrow>\n    \\<exists>l r. t = Node l p r \\<or> subdag t (Node l p r)\n 2. \\<exists>l r.\n       t = Node l p r \\<or> subdag t (Node l p r) \\<Longrightarrow>\n    p \\<in> set_of t", "thus \"?B\""], ["proof (prove)\nusing this:\n  p \\<in> set_of t\n\ngoal (1 subgoal):\n 1. \\<exists>l r. t = Node l p r \\<or> subdag t (Node l p r)", "by (induct t) auto"], ["proof (state)\nthis:\n  \\<exists>l r. t = Node l p r \\<or> subdag t (Node l p r)\n\ngoal (1 subgoal):\n 1. \\<exists>l r.\n       t = Node l p r \\<or> subdag t (Node l p r) \\<Longrightarrow>\n    p \\<in> set_of t", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>l r.\n       t = Node l p r \\<or> subdag t (Node l p r) \\<Longrightarrow>\n    p \\<in> set_of t", "assume \"?B\""], ["proof (state)\nthis:\n  \\<exists>l r. t = Node l p r \\<or> subdag t (Node l p r)\n\ngoal (1 subgoal):\n 1. \\<exists>l r.\n       t = Node l p r \\<or> subdag t (Node l p r) \\<Longrightarrow>\n    p \\<in> set_of t", "thus \"?A\""], ["proof (prove)\nusing this:\n  \\<exists>l r. t = Node l p r \\<or> subdag t (Node l p r)\n\ngoal (1 subgoal):\n 1. p \\<in> set_of t", "by (induct t) auto"], ["proof (state)\nthis:\n  p \\<in> set_of t\n\ngoal:\nNo subgoals!", "qed"], ["", "primrec Dag:: \"ref \\<Rightarrow> (ref \\<Rightarrow> ref) \\<Rightarrow> (ref \\<Rightarrow> ref) \\<Rightarrow> dag \\<Rightarrow> bool\"\nwhere\n\"Dag p l r Tip = (p = Null)\" |\n\"Dag p l r (Node lt a rt) = (p = a \\<and> p \\<noteq> Null \\<and> \n                              Dag (l p) l r lt \\<and> Dag (r p) l r  rt)\""], ["", "lemma Dag_Null [simp]: \"Dag Null l r  t = (t = Tip)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Dag Null l r t = (t = Tip)", "by (cases t) simp_all"], ["", "lemma Dag_Ref [simp]: \n  \"p\\<noteq>Null \\<Longrightarrow> Dag p l r  t = (\\<exists>lt rt. t=Node lt p rt \\<and> \n                                Dag (l p) l r lt \\<and> Dag (r p) l r rt)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. p \\<noteq> Null \\<Longrightarrow>\n    Dag p l r t =\n    (\\<exists>lt rt.\n        t = Node lt p rt \\<and> Dag (l p) l r lt \\<and> Dag (r p) l r rt)", "by (cases t) auto"], ["", "lemma Null_notin_Dag [simp, intro]: \"\\<And>p l r. Dag p l r t \\<Longrightarrow> Null \\<notin> set_of t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>p l r. Dag p l r t \\<Longrightarrow> Null \\<notin> set_of t", "by (induct t) auto"], ["", "theorem notin_Dag_update_l [simp]:\n    \"\\<And> p. q \\<notin> set_of t \\<Longrightarrow> Dag p (l(q := y)) r  t = Dag p l r t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>p.\n       q \\<notin> set_of t \\<Longrightarrow>\n       Dag p (l(q := y)) r t = Dag p l r t", "by (induct t) auto"], ["", "theorem notin_Dag_update_r [simp]:\n    \"\\<And> p. q \\<notin> set_of t \\<Longrightarrow> Dag p l (r(q := y)) t = Dag p l r t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>p.\n       q \\<notin> set_of t \\<Longrightarrow>\n       Dag p l (r(q := y)) t = Dag p l r t", "by (induct t) auto"], ["", "lemma Dag_upd_same_l_lemma: \"\\<And>p. p\\<noteq>Null \\<Longrightarrow> \\<not> Dag p (l(p:=p)) r t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>p. p \\<noteq> Null \\<Longrightarrow> \\<not> Dag p (l(p := p)) r t", "apply (induct t)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>p.\n       p \\<noteq> Null \\<Longrightarrow> \\<not> Dag p (l(p := p)) r Tip\n 2. \\<And>t1 x2 t2 p.\n       \\<lbrakk>\\<And>p.\n                   p \\<noteq> Null \\<Longrightarrow>\n                   \\<not> Dag p (l(p := p)) r t1;\n        \\<And>p.\n           p \\<noteq> Null \\<Longrightarrow> \\<not> Dag p (l(p := p)) r t2;\n        p \\<noteq> Null\\<rbrakk>\n       \\<Longrightarrow> \\<not> Dag p (l(p := p)) r (Node t1 x2 t2)", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>t1 x2 t2 p.\n       \\<lbrakk>\\<And>p.\n                   p \\<noteq> Null \\<Longrightarrow>\n                   \\<not> Dag p (l(p := p)) r t1;\n        \\<And>p.\n           p \\<noteq> Null \\<Longrightarrow> \\<not> Dag p (l(p := p)) r t2;\n        p \\<noteq> Null\\<rbrakk>\n       \\<Longrightarrow> \\<not> Dag p (l(p := p)) r (Node t1 x2 t2)", "apply (simp (no_asm_simp) del: fun_upd_apply)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>t1 x2 t2 p.\n       \\<lbrakk>\\<And>p.\n                   p \\<noteq> Null \\<Longrightarrow>\n                   \\<not> Dag p (l(p := p)) r t1;\n        \\<And>p.\n           p \\<noteq> Null \\<Longrightarrow> \\<not> Dag p (l(p := p)) r t2;\n        p \\<noteq> Null\\<rbrakk>\n       \\<Longrightarrow> Dag ((l(p := p)) p) (l(p := p)) r\n                          t1 \\<longrightarrow>\n                         p = x2 \\<longrightarrow>\n                         \\<not> Dag (r x2) (l(x2 := x2)) r t2", "apply (simp (no_asm_simp) only: fun_upd_apply refl if_True)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>t1 x2 t2 p.\n       \\<lbrakk>\\<And>p.\n                   p \\<noteq> Null \\<Longrightarrow>\n                   \\<not> Dag p (l(p := p)) r t1;\n        \\<And>p.\n           p \\<noteq> Null \\<Longrightarrow> \\<not> Dag p (l(p := p)) r t2;\n        p \\<noteq> Null\\<rbrakk>\n       \\<Longrightarrow> Dag p (l(p := p)) r t1 \\<longrightarrow>\n                         p = x2 \\<longrightarrow>\n                         \\<not> Dag (r x2) (l(x2 := x2)) r t2", "apply blast"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma Dag_upd_same_l [simp]: \"Dag p (l(p:=p)) r t = (p=Null \\<and> t=Tip)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Dag p (l(p := p)) r t = (p = Null \\<and> t = Tip)", "apply (cases \"p=Null\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. p = Null \\<Longrightarrow>\n    Dag p (l(p := p)) r t = (p = Null \\<and> t = Tip)\n 2. p \\<noteq> Null \\<Longrightarrow>\n    Dag p (l(p := p)) r t = (p = Null \\<and> t = Tip)", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. p \\<noteq> Null \\<Longrightarrow>\n    Dag p (l(p := p)) r t = (p = Null \\<and> t = Tip)", "apply (fast dest: Dag_upd_same_l_lemma)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "text \\<open>@{thm[source] Dag_upd_same_l} prevents \n@{term \"p\\<noteq>Null \\<Longrightarrow> Dag p (l(p:=p)) r t = X\"} from looping, because of \n@{thm[source] Dag_Ref} and @{thm[source] fun_upd_apply}.\n\\<close>"], ["", "lemma Dag_upd_same_r_lemma: \"\\<And>p. p\\<noteq>Null \\<Longrightarrow> \\<not> Dag p l (r(p:=p)) t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>p. p \\<noteq> Null \\<Longrightarrow> \\<not> Dag p l (r(p := p)) t", "apply (induct t)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>p.\n       p \\<noteq> Null \\<Longrightarrow> \\<not> Dag p l (r(p := p)) Tip\n 2. \\<And>t1 x2 t2 p.\n       \\<lbrakk>\\<And>p.\n                   p \\<noteq> Null \\<Longrightarrow>\n                   \\<not> Dag p l (r(p := p)) t1;\n        \\<And>p.\n           p \\<noteq> Null \\<Longrightarrow> \\<not> Dag p l (r(p := p)) t2;\n        p \\<noteq> Null\\<rbrakk>\n       \\<Longrightarrow> \\<not> Dag p l (r(p := p)) (Node t1 x2 t2)", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>t1 x2 t2 p.\n       \\<lbrakk>\\<And>p.\n                   p \\<noteq> Null \\<Longrightarrow>\n                   \\<not> Dag p l (r(p := p)) t1;\n        \\<And>p.\n           p \\<noteq> Null \\<Longrightarrow> \\<not> Dag p l (r(p := p)) t2;\n        p \\<noteq> Null\\<rbrakk>\n       \\<Longrightarrow> \\<not> Dag p l (r(p := p)) (Node t1 x2 t2)", "apply (simp (no_asm_simp) del: fun_upd_apply)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>t1 x2 t2 p.\n       \\<lbrakk>\\<And>p.\n                   p \\<noteq> Null \\<Longrightarrow>\n                   \\<not> Dag p l (r(p := p)) t1;\n        \\<And>p.\n           p \\<noteq> Null \\<Longrightarrow> \\<not> Dag p l (r(p := p)) t2;\n        p \\<noteq> Null\\<rbrakk>\n       \\<Longrightarrow> Dag (l p) l (r(p := p)) t1 \\<longrightarrow>\n                         p = x2 \\<longrightarrow>\n                         \\<not> Dag ((r(x2 := x2)) x2) l (r(x2 := x2)) t2", "apply (simp (no_asm_simp) only: fun_upd_apply refl if_True)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>t1 x2 t2 p.\n       \\<lbrakk>\\<And>p.\n                   p \\<noteq> Null \\<Longrightarrow>\n                   \\<not> Dag p l (r(p := p)) t1;\n        \\<And>p.\n           p \\<noteq> Null \\<Longrightarrow> \\<not> Dag p l (r(p := p)) t2;\n        p \\<noteq> Null\\<rbrakk>\n       \\<Longrightarrow> Dag (l p) l (r(p := p)) t1 \\<longrightarrow>\n                         p = x2 \\<longrightarrow>\n                         \\<not> Dag x2 l (r(x2 := x2)) t2", "apply blast"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma Dag_upd_same_r [simp]: \"Dag p l (r(p:=p)) t = (p=Null \\<and> t=Tip)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Dag p l (r(p := p)) t = (p = Null \\<and> t = Tip)", "apply (cases \"p=Null\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. p = Null \\<Longrightarrow>\n    Dag p l (r(p := p)) t = (p = Null \\<and> t = Tip)\n 2. p \\<noteq> Null \\<Longrightarrow>\n    Dag p l (r(p := p)) t = (p = Null \\<and> t = Tip)", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. p \\<noteq> Null \\<Longrightarrow>\n    Dag p l (r(p := p)) t = (p = Null \\<and> t = Tip)", "apply (fast dest: Dag_upd_same_r_lemma)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma  Dag_update_l_new [simp]: \"\\<lbrakk>set_of t \\<subseteq> set alloc\\<rbrakk>\n     \\<Longrightarrow> Dag p (l(new (set alloc) := x)) r t = Dag p l r t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set_of t \\<subseteq> set alloc \\<Longrightarrow>\n    Dag p (l(new (set alloc) := x)) r t = Dag p l r t", "by (rule notin_Dag_update_l) fastforce"], ["", "lemma  Dag_update_r_new [simp]: \"\\<lbrakk>set_of t \\<subseteq> set alloc\\<rbrakk>\n     \\<Longrightarrow> Dag p l (r(new (set alloc) := x)) t = Dag p l r t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set_of t \\<subseteq> set alloc \\<Longrightarrow>\n    Dag p l (r(new (set alloc) := x)) t = Dag p l r t", "by (rule notin_Dag_update_r) fastforce"], ["", "lemma Dag_update_lI [intro]:\n    \"\\<lbrakk>Dag p l r t; q \\<notin> set_of t\\<rbrakk> \\<Longrightarrow> Dag p (l(q := y)) r t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Dag p l r t; q \\<notin> set_of t\\<rbrakk>\n    \\<Longrightarrow> Dag p (l(q := y)) r t", "by simp"], ["", "lemma Dag_update_rI [intro]:\n    \"\\<lbrakk>Dag p l r t; q \\<notin> set_of t\\<rbrakk> \\<Longrightarrow> Dag p l (r(q := y)) t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Dag p l r t; q \\<notin> set_of t\\<rbrakk>\n    \\<Longrightarrow> Dag p l (r(q := y)) t", "by simp"], ["", "lemma Dag_unique: \"\\<And> p t2. Dag p l r t1 \\<Longrightarrow> Dag p l r t2 \\<Longrightarrow> t1=t2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>p t2.\n       \\<lbrakk>Dag p l r t1; Dag p l r t2\\<rbrakk>\n       \\<Longrightarrow> t1 = t2", "by (induct t1) auto"], ["", "lemma Dag_unique1: \"Dag p l r t \\<Longrightarrow> \\<exists>!t. Dag p l r t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Dag p l r t \\<Longrightarrow> \\<exists>!t. Dag p l r t", "by (blast intro: Dag_unique)"], ["", "lemma Dag_subdag: \"\\<And> p. Dag p l r t \\<Longrightarrow> subdag t s \\<Longrightarrow> \\<exists> q. Dag q l r s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>p.\n       \\<lbrakk>Dag p l r t; subdag t s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>q. Dag q l r s", "by (induct t) auto"], ["", "lemma Dag_root_not_in_subdag_l [simp,intro]: \n  assumes \"Dag (l p) l r t\"\n  shows \"p \\<notin> set_of t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. p \\<notin> set_of t", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. p \\<notin> set_of t", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. p \\<notin> set_of t", "fix lt rt"], ["proof (state)\ngoal (1 subgoal):\n 1. p \\<notin> set_of t", "assume t: \"t = Node lt p rt\""], ["proof (state)\nthis:\n  t = Node lt p rt\n\ngoal (1 subgoal):\n 1. p \\<notin> set_of t", "from assms"], ["proof (chain)\npicking this:\n  Dag (l p) l r t", "have \"Dag (l p) l r lt\""], ["proof (prove)\nusing this:\n  Dag (l p) l r t\n\ngoal (1 subgoal):\n 1. Dag (l p) l r lt", "by (clarsimp simp only: t Dag.simps)"], ["proof (state)\nthis:\n  Dag (l p) l r lt\n\ngoal (1 subgoal):\n 1. p \\<notin> set_of t", "with assms"], ["proof (chain)\npicking this:\n  Dag (l p) l r t\n  Dag (l p) l r lt", "have \"t=lt\""], ["proof (prove)\nusing this:\n  Dag (l p) l r t\n  Dag (l p) l r lt\n\ngoal (1 subgoal):\n 1. t = lt", "by (rule Dag_unique)"], ["proof (state)\nthis:\n  t = lt\n\ngoal (1 subgoal):\n 1. p \\<notin> set_of t", "with t"], ["proof (chain)\npicking this:\n  t = Node lt p rt\n  t = lt", "have False"], ["proof (prove)\nusing this:\n  t = Node lt p rt\n  t = lt\n\ngoal (1 subgoal):\n 1. False", "by simp"], ["proof (state)\nthis:\n  False\n\ngoal (1 subgoal):\n 1. p \\<notin> set_of t", "}"], ["proof (state)\nthis:\n  t = Node ?lt2 p ?rt2 \\<Longrightarrow> False\n\ngoal (1 subgoal):\n 1. p \\<notin> set_of t", "moreover"], ["proof (state)\nthis:\n  t = Node ?lt2 p ?rt2 \\<Longrightarrow> False\n\ngoal (1 subgoal):\n 1. p \\<notin> set_of t", "{"], ["proof (state)\nthis:\n  t = Node ?lt2 p ?rt2 \\<Longrightarrow> False\n\ngoal (1 subgoal):\n 1. p \\<notin> set_of t", "fix lt rt"], ["proof (state)\ngoal (1 subgoal):\n 1. p \\<notin> set_of t", "assume subdag: \"subdag t (Node lt p rt)\""], ["proof (state)\nthis:\n  subdag t (Node lt p rt)\n\ngoal (1 subgoal):\n 1. p \\<notin> set_of t", "with assms"], ["proof (chain)\npicking this:\n  Dag (l p) l r t\n  subdag t (Node lt p rt)", "obtain q where \"Dag q l r (Node lt p rt)\""], ["proof (prove)\nusing this:\n  Dag (l p) l r t\n  subdag t (Node lt p rt)\n\ngoal (1 subgoal):\n 1. (\\<And>q.\n        Dag q l r (Node lt p rt) \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (rule Dag_subdag [elim_format]) iprover"], ["proof (state)\nthis:\n  Dag q l r (Node lt p rt)\n\ngoal (1 subgoal):\n 1. p \\<notin> set_of t", "hence \"Dag (l p) l r lt\""], ["proof (prove)\nusing this:\n  Dag q l r (Node lt p rt)\n\ngoal (1 subgoal):\n 1. Dag (l p) l r lt", "by auto"], ["proof (state)\nthis:\n  Dag (l p) l r lt\n\ngoal (1 subgoal):\n 1. p \\<notin> set_of t", "with assms"], ["proof (chain)\npicking this:\n  Dag (l p) l r t\n  Dag (l p) l r lt", "have \"t=lt\""], ["proof (prove)\nusing this:\n  Dag (l p) l r t\n  Dag (l p) l r lt\n\ngoal (1 subgoal):\n 1. t = lt", "by (rule Dag_unique)"], ["proof (state)\nthis:\n  t = lt\n\ngoal (1 subgoal):\n 1. p \\<notin> set_of t", "moreover"], ["proof (state)\nthis:\n  t = lt\n\ngoal (1 subgoal):\n 1. p \\<notin> set_of t", "have \"subdag t lt\""], ["proof (prove)\ngoal (1 subgoal):\n 1. subdag t lt", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. subdag t lt", "note subdag"], ["proof (state)\nthis:\n  subdag t (Node lt p rt)\n\ngoal (1 subgoal):\n 1. subdag t lt", "also"], ["proof (state)\nthis:\n  subdag t (Node lt p rt)\n\ngoal (1 subgoal):\n 1. subdag t lt", "have \"subdag (Node lt p rt) lt\""], ["proof (prove)\ngoal (1 subgoal):\n 1. subdag (Node lt p rt) lt", "by simp"], ["proof (state)\nthis:\n  subdag (Node lt p rt) lt\n\ngoal (1 subgoal):\n 1. subdag t lt", "finally"], ["proof (chain)\npicking this:\n  subdag t lt", "show ?thesis"], ["proof (prove)\nusing this:\n  subdag t lt\n\ngoal (1 subgoal):\n 1. subdag t lt", "."], ["proof (state)\nthis:\n  subdag t lt\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  subdag t lt\n\ngoal (1 subgoal):\n 1. p \\<notin> set_of t", "ultimately"], ["proof (chain)\npicking this:\n  t = lt\n  subdag t lt", "have False"], ["proof (prove)\nusing this:\n  t = lt\n  subdag t lt\n\ngoal (1 subgoal):\n 1. False", "by (simp add: subdag_neq)"], ["proof (state)\nthis:\n  False\n\ngoal (1 subgoal):\n 1. p \\<notin> set_of t", "}"], ["proof (state)\nthis:\n  subdag t (Node ?lt2 p ?rt2) \\<Longrightarrow> False\n\ngoal (1 subgoal):\n 1. p \\<notin> set_of t", "ultimately"], ["proof (chain)\npicking this:\n  t = Node ?lt2 p ?rt2 \\<Longrightarrow> False\n  subdag t (Node ?lt2 p ?rt2) \\<Longrightarrow> False", "show ?thesis"], ["proof (prove)\nusing this:\n  t = Node ?lt2 p ?rt2 \\<Longrightarrow> False\n  subdag t (Node ?lt2 p ?rt2) \\<Longrightarrow> False\n\ngoal (1 subgoal):\n 1. p \\<notin> set_of t", "by (auto simp add: in_set_of_decomp)"], ["proof (state)\nthis:\n  p \\<notin> set_of t\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma Dag_root_not_in_subdag_r [simp, intro]:\n  assumes \"Dag (r p) l r t\"\n  shows \"p \\<notin> set_of t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. p \\<notin> set_of t", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. p \\<notin> set_of t", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. p \\<notin> set_of t", "fix lt rt"], ["proof (state)\ngoal (1 subgoal):\n 1. p \\<notin> set_of t", "assume t: \"t = Node lt p rt\""], ["proof (state)\nthis:\n  t = Node lt p rt\n\ngoal (1 subgoal):\n 1. p \\<notin> set_of t", "from assms"], ["proof (chain)\npicking this:\n  Dag (r p) l r t", "have \"Dag (r p) l r rt\""], ["proof (prove)\nusing this:\n  Dag (r p) l r t\n\ngoal (1 subgoal):\n 1. Dag (r p) l r rt", "by (clarsimp simp only: t Dag.simps)"], ["proof (state)\nthis:\n  Dag (r p) l r rt\n\ngoal (1 subgoal):\n 1. p \\<notin> set_of t", "with assms"], ["proof (chain)\npicking this:\n  Dag (r p) l r t\n  Dag (r p) l r rt", "have \"t=rt\""], ["proof (prove)\nusing this:\n  Dag (r p) l r t\n  Dag (r p) l r rt\n\ngoal (1 subgoal):\n 1. t = rt", "by (rule Dag_unique)"], ["proof (state)\nthis:\n  t = rt\n\ngoal (1 subgoal):\n 1. p \\<notin> set_of t", "with t"], ["proof (chain)\npicking this:\n  t = Node lt p rt\n  t = rt", "have False"], ["proof (prove)\nusing this:\n  t = Node lt p rt\n  t = rt\n\ngoal (1 subgoal):\n 1. False", "by simp"], ["proof (state)\nthis:\n  False\n\ngoal (1 subgoal):\n 1. p \\<notin> set_of t", "}"], ["proof (state)\nthis:\n  t = Node ?lt2 p ?rt2 \\<Longrightarrow> False\n\ngoal (1 subgoal):\n 1. p \\<notin> set_of t", "moreover"], ["proof (state)\nthis:\n  t = Node ?lt2 p ?rt2 \\<Longrightarrow> False\n\ngoal (1 subgoal):\n 1. p \\<notin> set_of t", "{"], ["proof (state)\nthis:\n  t = Node ?lt2 p ?rt2 \\<Longrightarrow> False\n\ngoal (1 subgoal):\n 1. p \\<notin> set_of t", "fix lt rt"], ["proof (state)\ngoal (1 subgoal):\n 1. p \\<notin> set_of t", "assume subdag: \"subdag t (Node lt p rt)\""], ["proof (state)\nthis:\n  subdag t (Node lt p rt)\n\ngoal (1 subgoal):\n 1. p \\<notin> set_of t", "with assms"], ["proof (chain)\npicking this:\n  Dag (r p) l r t\n  subdag t (Node lt p rt)", "obtain q where \"Dag q l r (Node lt p rt)\""], ["proof (prove)\nusing this:\n  Dag (r p) l r t\n  subdag t (Node lt p rt)\n\ngoal (1 subgoal):\n 1. (\\<And>q.\n        Dag q l r (Node lt p rt) \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (rule Dag_subdag [elim_format]) iprover"], ["proof (state)\nthis:\n  Dag q l r (Node lt p rt)\n\ngoal (1 subgoal):\n 1. p \\<notin> set_of t", "hence \"Dag (r p) l r rt\""], ["proof (prove)\nusing this:\n  Dag q l r (Node lt p rt)\n\ngoal (1 subgoal):\n 1. Dag (r p) l r rt", "by auto"], ["proof (state)\nthis:\n  Dag (r p) l r rt\n\ngoal (1 subgoal):\n 1. p \\<notin> set_of t", "with assms"], ["proof (chain)\npicking this:\n  Dag (r p) l r t\n  Dag (r p) l r rt", "have \"t=rt\""], ["proof (prove)\nusing this:\n  Dag (r p) l r t\n  Dag (r p) l r rt\n\ngoal (1 subgoal):\n 1. t = rt", "by (rule Dag_unique)"], ["proof (state)\nthis:\n  t = rt\n\ngoal (1 subgoal):\n 1. p \\<notin> set_of t", "moreover"], ["proof (state)\nthis:\n  t = rt\n\ngoal (1 subgoal):\n 1. p \\<notin> set_of t", "have \"subdag t rt\""], ["proof (prove)\ngoal (1 subgoal):\n 1. subdag t rt", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. subdag t rt", "note subdag"], ["proof (state)\nthis:\n  subdag t (Node lt p rt)\n\ngoal (1 subgoal):\n 1. subdag t rt", "also"], ["proof (state)\nthis:\n  subdag t (Node lt p rt)\n\ngoal (1 subgoal):\n 1. subdag t rt", "have \"subdag (Node lt p rt) rt\""], ["proof (prove)\ngoal (1 subgoal):\n 1. subdag (Node lt p rt) rt", "by simp"], ["proof (state)\nthis:\n  subdag (Node lt p rt) rt\n\ngoal (1 subgoal):\n 1. subdag t rt", "finally"], ["proof (chain)\npicking this:\n  subdag t rt", "show ?thesis"], ["proof (prove)\nusing this:\n  subdag t rt\n\ngoal (1 subgoal):\n 1. subdag t rt", "."], ["proof (state)\nthis:\n  subdag t rt\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  subdag t rt\n\ngoal (1 subgoal):\n 1. p \\<notin> set_of t", "ultimately"], ["proof (chain)\npicking this:\n  t = rt\n  subdag t rt", "have False"], ["proof (prove)\nusing this:\n  t = rt\n  subdag t rt\n\ngoal (1 subgoal):\n 1. False", "by (simp add: subdag_neq)"], ["proof (state)\nthis:\n  False\n\ngoal (1 subgoal):\n 1. p \\<notin> set_of t", "}"], ["proof (state)\nthis:\n  subdag t (Node ?lt2 p ?rt2) \\<Longrightarrow> False\n\ngoal (1 subgoal):\n 1. p \\<notin> set_of t", "ultimately"], ["proof (chain)\npicking this:\n  t = Node ?lt2 p ?rt2 \\<Longrightarrow> False\n  subdag t (Node ?lt2 p ?rt2) \\<Longrightarrow> False", "show ?thesis"], ["proof (prove)\nusing this:\n  t = Node ?lt2 p ?rt2 \\<Longrightarrow> False\n  subdag t (Node ?lt2 p ?rt2) \\<Longrightarrow> False\n\ngoal (1 subgoal):\n 1. p \\<notin> set_of t", "by (auto simp add: in_set_of_decomp)"], ["proof (state)\nthis:\n  p \\<notin> set_of t\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma Dag_is_DAG: \"\\<And>p l r. Dag p l r t \\<Longrightarrow> DAG t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>p l r. Dag p l r t \\<Longrightarrow> DAG t", "by (induct t) auto"], ["", "lemma heaps_eq_Dag_eq:\n  \"\\<And>p. \\<forall>x \\<in> set_of t. l x = l' x \\<and> r x = r' x \n    \\<Longrightarrow> Dag p l r t = Dag p l' r' t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>p.\n       \\<forall>x\\<in>set_of t.\n          l x = l' x \\<and> r x = r' x \\<Longrightarrow>\n       Dag p l r t = Dag p l' r' t", "by (induct t) auto"], ["", "lemma heaps_eq_DagI1: \n  \"\\<lbrakk>Dag p l r t; \\<forall>x\\<in>set_of t. l x = l' x \\<and> r x = r' x\\<rbrakk>\n    \\<Longrightarrow> Dag p l' r' t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Dag p l r t;\n     \\<forall>x\\<in>set_of t. l x = l' x \\<and> r x = r' x\\<rbrakk>\n    \\<Longrightarrow> Dag p l' r' t", "by (rule heaps_eq_Dag_eq [THEN iffD1])"], ["", "lemma heaps_eq_DagI2: \n  \"\\<lbrakk>Dag p l' r' t; \\<forall>x\\<in>set_of t. l x = l' x \\<and> r x = r' x\\<rbrakk>\n    \\<Longrightarrow> Dag p l r t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Dag p l' r' t;\n     \\<forall>x\\<in>set_of t. l x = l' x \\<and> r x = r' x\\<rbrakk>\n    \\<Longrightarrow> Dag p l r t", "by (rule heaps_eq_Dag_eq [THEN iffD2]) auto"], ["", "lemma  Dag_unique_all_impl_simp [simp]: \n  \"Dag p l r t \\<Longrightarrow> (\\<forall>t. Dag p l r t \\<longrightarrow> P t) = P t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Dag p l r t \\<Longrightarrow>\n    (\\<forall>t. Dag p l r t \\<longrightarrow> P t) = P t", "by (auto dest: Dag_unique)"], ["", "lemma Dag_unique_ex_conj_simp [simp]: \n  \"Dag p l r t \\<Longrightarrow> (\\<exists>t. Dag p l r t \\<and> P t) = P t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Dag p l r t \\<Longrightarrow> (\\<exists>t. Dag p l r t \\<and> P t) = P t", "by (auto dest: Dag_unique)"], ["", "lemma Dags_eq_hp_eq: \n  \"\\<And>p p'. \\<lbrakk>Dag p l r t; Dag p' l' r' t\\<rbrakk> \\<Longrightarrow>\n    p'=p \\<and> (\\<forall>no \\<in> set_of t. l' no = l no \\<and> r' no = r no)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>p p'.\n       \\<lbrakk>Dag p l r t; Dag p' l' r' t\\<rbrakk>\n       \\<Longrightarrow> p' = p \\<and>\n                         (\\<forall>no\\<in>set_of t.\n                             l' no = l no \\<and> r' no = r no)", "by (induct t) auto"], ["", "definition isDag :: \"ref \\<Rightarrow> (ref \\<Rightarrow> ref) \\<Rightarrow> (ref \\<Rightarrow> ref) \\<Rightarrow> bool\"\n  where \"isDag p l r = (\\<exists>t. Dag p l r t)\""], ["", "definition dag :: \"ref \\<Rightarrow> (ref \\<Rightarrow> ref) \\<Rightarrow> (ref \\<Rightarrow> ref) \\<Rightarrow> dag\"\n  where \"dag p l r = (THE t. Dag p l r t)\""], ["", "lemma Dag_conv_isDag_dag: \"Dag p l r t = (isDag p l r \\<and> t=dag p l r)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Dag p l r t = (isDag p l r \\<and> t = dag p l r)", "apply (simp add: isDag_def dag_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. Dag p l r t =\n    ((\\<exists>t. Dag p l r t) \\<and> t = (THE t. Dag p l r t))", "apply (rule iffI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. Dag p l r t \\<Longrightarrow>\n    (\\<exists>t. Dag p l r t) \\<and> t = (THE t. Dag p l r t)\n 2. (\\<exists>t. Dag p l r t) \\<and>\n    t = (THE t. Dag p l r t) \\<Longrightarrow>\n    Dag p l r t", "apply (rule conjI)"], ["proof (prove)\ngoal (3 subgoals):\n 1. Dag p l r t \\<Longrightarrow> \\<exists>t. Dag p l r t\n 2. Dag p l r t \\<Longrightarrow> t = (THE t. Dag p l r t)\n 3. (\\<exists>t. Dag p l r t) \\<and>\n    t = (THE t. Dag p l r t) \\<Longrightarrow>\n    Dag p l r t", "apply blast"], ["proof (prove)\ngoal (2 subgoals):\n 1. Dag p l r t \\<Longrightarrow> t = (THE t. Dag p l r t)\n 2. (\\<exists>t. Dag p l r t) \\<and>\n    t = (THE t. Dag p l r t) \\<Longrightarrow>\n    Dag p l r t", "apply (subst the1_equality)"], ["proof (prove)\ngoal (4 subgoals):\n 1. Dag p l r t \\<Longrightarrow> Ex1 (Dag p l r)\n 2. Dag p l r t \\<Longrightarrow> Dag p l r ?y13\n 3. Dag p l r t \\<Longrightarrow> t = ?y13\n 4. (\\<exists>t. Dag p l r t) \\<and>\n    t = (THE t. Dag p l r t) \\<Longrightarrow>\n    Dag p l r t", "apply (erule Dag_unique1)"], ["proof (prove)\ngoal (3 subgoals):\n 1. Dag p l r t \\<Longrightarrow> Dag p l r ?y13\n 2. Dag p l r t \\<Longrightarrow> t = ?y13\n 3. (\\<exists>t. Dag p l r t) \\<and>\n    t = (THE t. Dag p l r t) \\<Longrightarrow>\n    Dag p l r t", "apply assumption"], ["proof (prove)\ngoal (2 subgoals):\n 1. Dag p l r t \\<Longrightarrow> t = t\n 2. (\\<exists>t. Dag p l r t) \\<and>\n    t = (THE t. Dag p l r t) \\<Longrightarrow>\n    Dag p l r t", "apply (rule refl)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<exists>t. Dag p l r t) \\<and>\n    t = (THE t. Dag p l r t) \\<Longrightarrow>\n    Dag p l r t", "apply clarify"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>ta.\n       \\<lbrakk>t = (THE t. Dag p l r t); Dag p l r ta\\<rbrakk>\n       \\<Longrightarrow> Dag p l r (THE t. Dag p l r t)", "apply (rule theI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>ta.\n       \\<lbrakk>t = (THE t. Dag p l r t); Dag p l r ta\\<rbrakk>\n       \\<Longrightarrow> Dag p l r (?a21 ta)\n 2. \\<And>ta taa.\n       \\<lbrakk>t = (THE t. Dag p l r t); Dag p l r ta;\n        Dag p l r taa\\<rbrakk>\n       \\<Longrightarrow> taa = ?a21 ta", "apply assumption"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>ta taa.\n       \\<lbrakk>t = (THE t. Dag p l r t); Dag p l r ta;\n        Dag p l r taa\\<rbrakk>\n       \\<Longrightarrow> taa = ta", "apply (erule (1) Dag_unique)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma Dag_dag: \"Dag p l r t \\<Longrightarrow> dag p l r = t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Dag p l r t \\<Longrightarrow> dag p l r = t", "by (simp add: Dag_conv_isDag_dag)"], ["", "end"]]}