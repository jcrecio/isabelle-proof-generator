{"file_name": "/home/qj213/afp-2021-10-22/thys/BDD/ShareRepProof.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/BDD", "problem_names": ["lemma (in ShareRep_impl) ShareRep_modifies:\n  shows \"\\<forall>\\<sigma>. \\<Gamma>\\<turnstile>{\\<sigma>}  PROC ShareRep (\\<acute>nodeslist, \\<acute>p) \n             {t. t may_only_modify_globals \\<sigma> in [rep]}\"", "lemma hd_filter_cons: \n\"\\<And> i. \\<lbrakk> P (xs ! i) p; i < length xs; \\<forall> no \\<in> set (take i xs). \\<not> P no p; \\<forall> a b.  P a b = P b a\\<rbrakk>\n  \\<Longrightarrow> xs ! i = hd (filter (P p) xs)\"", "lemma (in ShareRep_impl) ShareRep_spec_total:\nshows \n  \"\\<forall>\\<sigma> ns. \\<Gamma>,\\<Theta>\\<turnstile>\\<^sub>t \n  \\<lbrace>\\<sigma>. List \\<acute>nodeslist \\<acute>next ns \\<and>\n     (\\<forall>no \\<in> set ns. no \\<noteq> Null  \\<and> \n       ((no\\<rightarrow>\\<acute>low = Null) = (no\\<rightarrow>\\<acute>high = Null)) \\<and>\n       (isLeaf_pt \\<acute>p \\<acute>low \\<acute>high \\<longrightarrow> isLeaf_pt no \\<acute>low \\<acute>high) \\<and>\n       no\\<rightarrow>\\<acute>var = \\<acute>p\\<rightarrow>\\<acute>var) \\<and> \n       \\<acute>p \\<in> set ns\\<rbrace> \n  PROC ShareRep (\\<acute>nodeslist, \\<acute>p)\n  \\<lbrace> (\\<^bsup>\\<sigma>\\<^esup>p \\<rightarrow> \\<acute>rep = hd (filter (\\<lambda> sn. repNodes_eq sn \\<^bsup>\\<sigma>\\<^esup>p \\<^bsup>\\<sigma>\\<^esup>low \\<^bsup>\\<sigma>\\<^esup>high \\<^bsup>\\<sigma>\\<^esup>rep) ns)) \\<and>\n    (\\<forall>pt.  pt \\<noteq> \\<^bsup>\\<sigma>\\<^esup>p \\<longrightarrow> pt\\<rightarrow>\\<^bsup>\\<sigma>\\<^esup>rep = pt\\<rightarrow>\\<acute>rep) \\<and> \n    (\\<^bsup>\\<sigma>\\<^esup>p\\<rightarrow>\\<acute>rep\\<rightarrow>\\<^bsup>\\<sigma>\\<^esup>var = \\<^bsup>\\<sigma>\\<^esup>p \\<rightarrow> \\<^bsup>\\<sigma>\\<^esup>var)\\<rbrace>\""], "translations": [["", "lemma (in ShareRep_impl) ShareRep_modifies:\n  shows \"\\<forall>\\<sigma>. \\<Gamma>\\<turnstile>{\\<sigma>}  PROC ShareRep (\\<acute>nodeslist, \\<acute>p) \n             {t. t may_only_modify_globals \\<sigma> in [rep]}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>\\<sigma>.\n       \\<Gamma>\n          \\<turnstile> {\\<sigma>} PROC ShareRep(\\<acute>nodeslist,\\<acute>p)\n                       {t. t may_only_modify_globals \\<sigma> in [rep]}", "apply (hoare_rule HoarePartial.ProcRec1)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>\\<sigma>.\n       \\<Gamma>,(\\<Union>\\<sigma>.\n                    {({\\<sigma>}, ShareRep_'proc,\n                      {t. t may_only_modify_globals \\<sigma> in [rep]},\n                      {})})\n          \\<turnstile> {\\<sigma>}\n                       IF isLeaf_pt \\<acute>p \\<acute>low \\<acute>high\n                       THEN \\<acute>p\\<rightarrow>\\<acute>rep :==\n                            \\<acute>nodeslist\n                       ELSE WHILE \\<acute>nodeslist \\<noteq> Null \n                            DO IF repNodes_eq \\<acute>nodeslist \\<acute>p\n                                   \\<acute>low \\<acute>high \\<acute>rep\n                               THEN \\<acute>p\\<rightarrow>\\<acute>rep :==\n                                    \\<acute>nodeslist;;\n                                 \\<acute>nodeslist :== Null\n                               ELSE \\<acute>nodeslist :==\n                                    \\<acute>nodeslist\\<rightarrow>\\<acute>next\n                               FI \n                            OD\n                       FI\n                       {t. t may_only_modify_globals \\<sigma> in [rep]}", "apply (vcg spec=modifies)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma hd_filter_cons: \n\"\\<And> i. \\<lbrakk> P (xs ! i) p; i < length xs; \\<forall> no \\<in> set (take i xs). \\<not> P no p; \\<forall> a b.  P a b = P b a\\<rbrakk>\n  \\<Longrightarrow> xs ! i = hd (filter (P p) xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i.\n       \\<lbrakk>P (xs ! i) p; i < length xs;\n        \\<forall>no\\<in>set (take i xs). \\<not> P no p;\n        \\<forall>a b. P a b = P b a\\<rbrakk>\n       \\<Longrightarrow> xs ! i = hd (filter (P p) xs)", "apply (induct xs)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>i.\n       \\<lbrakk>P ([] ! i) p; i < length [];\n        \\<forall>no\\<in>set (take i []). \\<not> P no p;\n        \\<forall>a b. P a b = P b a\\<rbrakk>\n       \\<Longrightarrow> [] ! i = hd (filter (P p) [])\n 2. \\<And>a xs i.\n       \\<lbrakk>\\<And>i.\n                   \\<lbrakk>P (xs ! i) p; i < length xs;\n                    \\<forall>no\\<in>set (take i xs). \\<not> P no p;\n                    \\<forall>a b. P a b = P b a\\<rbrakk>\n                   \\<Longrightarrow> xs ! i = hd (filter (P p) xs);\n        P ((a # xs) ! i) p; i < length (a # xs);\n        \\<forall>no\\<in>set (take i (a # xs)). \\<not> P no p;\n        \\<forall>a b. P a b = P b a\\<rbrakk>\n       \\<Longrightarrow> (a # xs) ! i = hd (filter (P p) (a # xs))", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a xs i.\n       \\<lbrakk>\\<And>i.\n                   \\<lbrakk>P (xs ! i) p; i < length xs;\n                    \\<forall>no\\<in>set (take i xs). \\<not> P no p;\n                    \\<forall>a b. P a b = P b a\\<rbrakk>\n                   \\<Longrightarrow> xs ! i = hd (filter (P p) xs);\n        P ((a # xs) ! i) p; i < length (a # xs);\n        \\<forall>no\\<in>set (take i (a # xs)). \\<not> P no p;\n        \\<forall>a b. P a b = P b a\\<rbrakk>\n       \\<Longrightarrow> (a # xs) ! i = hd (filter (P p) (a # xs))", "apply (case_tac \"P a p\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a xs i.\n       \\<lbrakk>\\<And>i.\n                   \\<lbrakk>P (xs ! i) p; i < length xs;\n                    \\<forall>no\\<in>set (take i xs). \\<not> P no p;\n                    \\<forall>a b. P a b = P b a\\<rbrakk>\n                   \\<Longrightarrow> xs ! i = hd (filter (P p) xs);\n        P ((a # xs) ! i) p; i < length (a # xs);\n        \\<forall>no\\<in>set (take i (a # xs)). \\<not> P no p;\n        \\<forall>a b. P a b = P b a; P a p\\<rbrakk>\n       \\<Longrightarrow> (a # xs) ! i = hd (filter (P p) (a # xs))\n 2. \\<And>a xs i.\n       \\<lbrakk>\\<And>i.\n                   \\<lbrakk>P (xs ! i) p; i < length xs;\n                    \\<forall>no\\<in>set (take i xs). \\<not> P no p;\n                    \\<forall>a b. P a b = P b a\\<rbrakk>\n                   \\<Longrightarrow> xs ! i = hd (filter (P p) xs);\n        P ((a # xs) ! i) p; i < length (a # xs);\n        \\<forall>no\\<in>set (take i (a # xs)). \\<not> P no p;\n        \\<forall>a b. P a b = P b a; \\<not> P a p\\<rbrakk>\n       \\<Longrightarrow> (a # xs) ! i = hd (filter (P p) (a # xs))", "apply simp"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a xs i.\n       \\<lbrakk>\\<And>i.\n                   \\<lbrakk>P p (xs ! i); i < length xs;\n                    \\<forall>no\\<in>set (take i xs). \\<not> P no p\\<rbrakk>\n                   \\<Longrightarrow> xs ! i = hd (filter (P p) xs);\n        P p ((a # xs) ! i); i < Suc (length xs);\n        \\<forall>no\\<in>set (take i (a # xs)). \\<not> P no p;\n        \\<forall>a b. P a b = P b a; P a p\\<rbrakk>\n       \\<Longrightarrow> (a # xs) ! i = a\n 2. \\<And>a xs i.\n       \\<lbrakk>\\<And>i.\n                   \\<lbrakk>P (xs ! i) p; i < length xs;\n                    \\<forall>no\\<in>set (take i xs). \\<not> P no p;\n                    \\<forall>a b. P a b = P b a\\<rbrakk>\n                   \\<Longrightarrow> xs ! i = hd (filter (P p) xs);\n        P ((a # xs) ! i) p; i < length (a # xs);\n        \\<forall>no\\<in>set (take i (a # xs)). \\<not> P no p;\n        \\<forall>a b. P a b = P b a; \\<not> P a p\\<rbrakk>\n       \\<Longrightarrow> (a # xs) ! i = hd (filter (P p) (a # xs))", "apply (case_tac i)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>a xs i.\n       \\<lbrakk>\\<And>i.\n                   \\<lbrakk>P p (xs ! i); i < length xs;\n                    \\<forall>no\\<in>set (take i xs). \\<not> P no p\\<rbrakk>\n                   \\<Longrightarrow> xs ! i = hd (filter (P p) xs);\n        P p ((a # xs) ! i); i < Suc (length xs);\n        \\<forall>no\\<in>set (take i (a # xs)). \\<not> P no p;\n        \\<forall>a b. P a b = P b a; P a p; i = 0\\<rbrakk>\n       \\<Longrightarrow> (a # xs) ! i = a\n 2. \\<And>a xs i nat.\n       \\<lbrakk>\\<And>i.\n                   \\<lbrakk>P p (xs ! i); i < length xs;\n                    \\<forall>no\\<in>set (take i xs). \\<not> P no p\\<rbrakk>\n                   \\<Longrightarrow> xs ! i = hd (filter (P p) xs);\n        P p ((a # xs) ! i); i < Suc (length xs);\n        \\<forall>no\\<in>set (take i (a # xs)). \\<not> P no p;\n        \\<forall>a b. P a b = P b a; P a p; i = Suc nat\\<rbrakk>\n       \\<Longrightarrow> (a # xs) ! i = a\n 3. \\<And>a xs i.\n       \\<lbrakk>\\<And>i.\n                   \\<lbrakk>P (xs ! i) p; i < length xs;\n                    \\<forall>no\\<in>set (take i xs). \\<not> P no p;\n                    \\<forall>a b. P a b = P b a\\<rbrakk>\n                   \\<Longrightarrow> xs ! i = hd (filter (P p) xs);\n        P ((a # xs) ! i) p; i < length (a # xs);\n        \\<forall>no\\<in>set (take i (a # xs)). \\<not> P no p;\n        \\<forall>a b. P a b = P b a; \\<not> P a p\\<rbrakk>\n       \\<Longrightarrow> (a # xs) ! i = hd (filter (P p) (a # xs))", "apply simp"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a xs i nat.\n       \\<lbrakk>\\<And>i.\n                   \\<lbrakk>P p (xs ! i); i < length xs;\n                    \\<forall>no\\<in>set (take i xs). \\<not> P no p\\<rbrakk>\n                   \\<Longrightarrow> xs ! i = hd (filter (P p) xs);\n        P p ((a # xs) ! i); i < Suc (length xs);\n        \\<forall>no\\<in>set (take i (a # xs)). \\<not> P no p;\n        \\<forall>a b. P a b = P b a; P a p; i = Suc nat\\<rbrakk>\n       \\<Longrightarrow> (a # xs) ! i = a\n 2. \\<And>a xs i.\n       \\<lbrakk>\\<And>i.\n                   \\<lbrakk>P (xs ! i) p; i < length xs;\n                    \\<forall>no\\<in>set (take i xs). \\<not> P no p;\n                    \\<forall>a b. P a b = P b a\\<rbrakk>\n                   \\<Longrightarrow> xs ! i = hd (filter (P p) xs);\n        P ((a # xs) ! i) p; i < length (a # xs);\n        \\<forall>no\\<in>set (take i (a # xs)). \\<not> P no p;\n        \\<forall>a b. P a b = P b a; \\<not> P a p\\<rbrakk>\n       \\<Longrightarrow> (a # xs) ! i = hd (filter (P p) (a # xs))", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a xs i.\n       \\<lbrakk>\\<And>i.\n                   \\<lbrakk>P (xs ! i) p; i < length xs;\n                    \\<forall>no\\<in>set (take i xs). \\<not> P no p;\n                    \\<forall>a b. P a b = P b a\\<rbrakk>\n                   \\<Longrightarrow> xs ! i = hd (filter (P p) xs);\n        P ((a # xs) ! i) p; i < length (a # xs);\n        \\<forall>no\\<in>set (take i (a # xs)). \\<not> P no p;\n        \\<forall>a b. P a b = P b a; \\<not> P a p\\<rbrakk>\n       \\<Longrightarrow> (a # xs) ! i = hd (filter (P p) (a # xs))", "apply (case_tac i)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a xs i.\n       \\<lbrakk>\\<And>i.\n                   \\<lbrakk>P (xs ! i) p; i < length xs;\n                    \\<forall>no\\<in>set (take i xs). \\<not> P no p;\n                    \\<forall>a b. P a b = P b a\\<rbrakk>\n                   \\<Longrightarrow> xs ! i = hd (filter (P p) xs);\n        P ((a # xs) ! i) p; i < length (a # xs);\n        \\<forall>no\\<in>set (take i (a # xs)). \\<not> P no p;\n        \\<forall>a b. P a b = P b a; \\<not> P a p; i = 0\\<rbrakk>\n       \\<Longrightarrow> (a # xs) ! i = hd (filter (P p) (a # xs))\n 2. \\<And>a xs i nat.\n       \\<lbrakk>\\<And>i.\n                   \\<lbrakk>P (xs ! i) p; i < length xs;\n                    \\<forall>no\\<in>set (take i xs). \\<not> P no p;\n                    \\<forall>a b. P a b = P b a\\<rbrakk>\n                   \\<Longrightarrow> xs ! i = hd (filter (P p) xs);\n        P ((a # xs) ! i) p; i < length (a # xs);\n        \\<forall>no\\<in>set (take i (a # xs)). \\<not> P no p;\n        \\<forall>a b. P a b = P b a; \\<not> P a p; i = Suc nat\\<rbrakk>\n       \\<Longrightarrow> (a # xs) ! i = hd (filter (P p) (a # xs))", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a xs i nat.\n       \\<lbrakk>\\<And>i.\n                   \\<lbrakk>P (xs ! i) p; i < length xs;\n                    \\<forall>no\\<in>set (take i xs). \\<not> P no p;\n                    \\<forall>a b. P a b = P b a\\<rbrakk>\n                   \\<Longrightarrow> xs ! i = hd (filter (P p) xs);\n        P ((a # xs) ! i) p; i < length (a # xs);\n        \\<forall>no\\<in>set (take i (a # xs)). \\<not> P no p;\n        \\<forall>a b. P a b = P b a; \\<not> P a p; i = Suc nat\\<rbrakk>\n       \\<Longrightarrow> (a # xs) ! i = hd (filter (P p) (a # xs))", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in ShareRep_impl) ShareRep_spec_total:\nshows \n  \"\\<forall>\\<sigma> ns. \\<Gamma>,\\<Theta>\\<turnstile>\\<^sub>t \n  \\<lbrace>\\<sigma>. List \\<acute>nodeslist \\<acute>next ns \\<and>\n     (\\<forall>no \\<in> set ns. no \\<noteq> Null  \\<and> \n       ((no\\<rightarrow>\\<acute>low = Null) = (no\\<rightarrow>\\<acute>high = Null)) \\<and>\n       (isLeaf_pt \\<acute>p \\<acute>low \\<acute>high \\<longrightarrow> isLeaf_pt no \\<acute>low \\<acute>high) \\<and>\n       no\\<rightarrow>\\<acute>var = \\<acute>p\\<rightarrow>\\<acute>var) \\<and> \n       \\<acute>p \\<in> set ns\\<rbrace> \n  PROC ShareRep (\\<acute>nodeslist, \\<acute>p)\n  \\<lbrace> (\\<^bsup>\\<sigma>\\<^esup>p \\<rightarrow> \\<acute>rep = hd (filter (\\<lambda> sn. repNodes_eq sn \\<^bsup>\\<sigma>\\<^esup>p \\<^bsup>\\<sigma>\\<^esup>low \\<^bsup>\\<sigma>\\<^esup>high \\<^bsup>\\<sigma>\\<^esup>rep) ns)) \\<and>\n    (\\<forall>pt.  pt \\<noteq> \\<^bsup>\\<sigma>\\<^esup>p \\<longrightarrow> pt\\<rightarrow>\\<^bsup>\\<sigma>\\<^esup>rep = pt\\<rightarrow>\\<acute>rep) \\<and> \n    (\\<^bsup>\\<sigma>\\<^esup>p\\<rightarrow>\\<acute>rep\\<rightarrow>\\<^bsup>\\<sigma>\\<^esup>var = \\<^bsup>\\<sigma>\\<^esup>p \\<rightarrow> \\<^bsup>\\<sigma>\\<^esup>var)\\<rbrace>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>\\<sigma> ns.\n       \\<Gamma>,\\<Theta>\n          \\<turnstile>\\<^sub>t \\<lbrace>\\<sigma>. List \\<acute>nodeslist\n             \\<acute>next ns \\<and>\n            (\\<forall>no\\<in>set ns.\n                no \\<noteq> Null \\<and>\n                (no\\<rightarrow>\\<acute>low = Null) =\n                (no\\<rightarrow>\\<acute>high = Null) \\<and>\n                (isLeaf_pt \\<acute>p \\<acute>low\n                  \\<acute>high \\<longrightarrow>\n                 isLeaf_pt no \\<acute>low \\<acute>high) \\<and>\n                no\\<rightarrow>\\<acute>var =\n                \\<acute>p\\<rightarrow>\\<acute>var) \\<and>\n            \\<acute>p \\<in> set ns\\<rbrace>\n                               PROC ShareRep(\\<acute>nodeslist,\\<acute>p)\n                               \\<lbrace>\\<^bsup>\\<sigma>\\<^esup>p\\<rightarrow>\\<acute>rep =\n  hd (filter\n       (\\<lambda>sn.\n           repNodes_eq sn \\<^bsup>\\<sigma>\\<^esup>p\n            \\<^bsup>\\<sigma>\\<^esup>low \\<^bsup>\\<sigma>\\<^esup>high\n            \\<^bsup>\\<sigma>\\<^esup>rep)\n       ns) \\<and>\n  (\\<forall>pt.\n      pt \\<noteq> \\<^bsup>\\<sigma>\\<^esup>p \\<longrightarrow>\n      \\<^bsup>\\<sigma>\\<^esup>rep pt = pt\\<rightarrow>\\<acute>rep) \\<and>\n  \\<^bsup>\\<sigma>\\<^esup>var\n   (\\<^bsup>\\<sigma>\\<^esup>p\\<rightarrow>\\<acute>rep) =\n  \\<^bsup>\\<sigma>\\<^esup>var \\<^bsup>\\<sigma>\\<^esup>p\\<rbrace>", "apply (hoare_rule HoareTotal.ProcNoRec1)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>\\<sigma> ns.\n       \\<Gamma>,\\<Theta>\n          \\<turnstile>\\<^sub>t \\<lbrace>\\<sigma>. List \\<acute>nodeslist\n             \\<acute>next ns \\<and>\n            (\\<forall>no\\<in>set ns.\n                no \\<noteq> Null \\<and>\n                (no\\<rightarrow>\\<acute>low = Null) =\n                (no\\<rightarrow>\\<acute>high = Null) \\<and>\n                (isLeaf_pt \\<acute>p \\<acute>low\n                  \\<acute>high \\<longrightarrow>\n                 isLeaf_pt no \\<acute>low \\<acute>high) \\<and>\n                no\\<rightarrow>\\<acute>var =\n                \\<acute>p\\<rightarrow>\\<acute>var) \\<and>\n            \\<acute>p \\<in> set ns\\<rbrace>\n                               IF isLeaf_pt \\<acute>p \\<acute>low\n                                   \\<acute>high\n                               THEN \\<acute>p\\<rightarrow>\\<acute>rep :==\n                                    \\<acute>nodeslist\n                               ELSE WHILE \\<acute>nodeslist \\<noteq> Null \n                                    DO\nIF repNodes_eq \\<acute>nodeslist \\<acute>p \\<acute>low \\<acute>high\n    \\<acute>rep\nTHEN \\<acute>p\\<rightarrow>\\<acute>rep :== \\<acute>nodeslist;;\n  \\<acute>nodeslist :== Null\nELSE \\<acute>nodeslist :== \\<acute>nodeslist\\<rightarrow>\\<acute>next FI \n                                    OD\n                               FI\n                               \\<lbrace>\\<^bsup>\\<sigma>\\<^esup>p\\<rightarrow>\\<acute>rep =\n  hd (filter\n       (\\<lambda>sn.\n           repNodes_eq sn \\<^bsup>\\<sigma>\\<^esup>p\n            \\<^bsup>\\<sigma>\\<^esup>low \\<^bsup>\\<sigma>\\<^esup>high\n            \\<^bsup>\\<sigma>\\<^esup>rep)\n       ns) \\<and>\n  (\\<forall>pt.\n      pt \\<noteq> \\<^bsup>\\<sigma>\\<^esup>p \\<longrightarrow>\n      \\<^bsup>\\<sigma>\\<^esup>rep pt = pt\\<rightarrow>\\<acute>rep) \\<and>\n  \\<^bsup>\\<sigma>\\<^esup>var\n   (\\<^bsup>\\<sigma>\\<^esup>p\\<rightarrow>\\<acute>rep) =\n  \\<^bsup>\\<sigma>\\<^esup>var \\<^bsup>\\<sigma>\\<^esup>p\\<rbrace>", "apply (hoare_rule anno=  \n  \"IF (isLeaf_pt \\<acute>p \\<acute>low \\<acute>high) \n   THEN \\<acute>p \\<rightarrow> \\<acute>rep :== \\<acute>nodeslist\n   ELSE\n     WHILE (\\<acute>nodeslist \\<noteq> Null)  \n     INV \\<lbrace>\\<exists>prx sfx. List \\<acute>nodeslist \\<acute>next sfx \\<and> ns=prx@sfx \\<and> \n           \\<not> isLeaf_pt \\<acute>p \\<acute>low \\<acute>high \\<and>\n           (\\<forall>no \\<in> set ns. no \\<noteq> Null \\<and> \n             ((no\\<rightarrow>\\<^bsup>\\<sigma>\\<^esup>low = Null) = (no\\<rightarrow>\\<^bsup>\\<sigma>\\<^esup>high = Null)) \\<and>\n             (isLeaf_pt \\<^bsup>\\<sigma>\\<^esup>p \\<^bsup>\\<sigma>\\<^esup>low \\<^bsup>\\<sigma>\\<^esup>high \\<longrightarrow> isLeaf_pt no \\<^bsup>\\<sigma>\\<^esup>low \\<^bsup>\\<sigma>\\<^esup>high) \\<and>\n             no\\<rightarrow>\\<^bsup>\\<sigma>\\<^esup>var = \\<^bsup>\\<sigma>\\<^esup>p\\<rightarrow>\\<^bsup>\\<sigma>\\<^esup>var) \\<and> \n        \\<^bsup>\\<sigma>\\<^esup>p \\<in> set ns \\<and> \n        ((\\<exists>pt \\<in> set prx.  repNodes_eq pt \\<^bsup>\\<sigma>\\<^esup>p \\<^bsup>\\<sigma>\\<^esup>low \\<^bsup>\\<sigma>\\<^esup>high \\<^bsup>\\<sigma>\\<^esup>rep) \n         \\<longrightarrow> \\<acute>rep  \\<^bsup>\\<sigma>\\<^esup>p =  hd (filter (\\<lambda> sn. repNodes_eq sn \\<^bsup>\\<sigma>\\<^esup>p \\<^bsup>\\<sigma>\\<^esup>low \\<^bsup>\\<sigma>\\<^esup>high \\<^bsup>\\<sigma>\\<^esup>rep) prx) \\<and>\n             (\\<forall>pt. pt \\<noteq> \\<^bsup>\\<sigma>\\<^esup>p \\<longrightarrow> pt\\<rightarrow>\\<^bsup>\\<sigma>\\<^esup>rep = pt\\<rightarrow>\\<acute>rep)) \\<and>\n        ((\\<forall>pt \\<in> set prx.  \\<not> repNodes_eq pt \\<^bsup>\\<sigma>\\<^esup>p \\<^bsup>\\<sigma>\\<^esup>low \\<^bsup>\\<sigma>\\<^esup>high \\<^bsup>\\<sigma>\\<^esup>rep) \\<longrightarrow>  \\<^bsup>\\<sigma>\\<^esup>rep = \\<acute>rep) \\<and>\n        (\\<acute>nodeslist \\<noteq> Null \\<longrightarrow> \n           (\\<forall>pt \\<in> set prx. \\<not> repNodes_eq pt \\<^bsup>\\<sigma>\\<^esup>p \\<^bsup>\\<sigma>\\<^esup>low \\<^bsup>\\<sigma>\\<^esup>high \\<^bsup>\\<sigma>\\<^esup>rep)) \\<and>  \n        (\\<acute>p = \\<^bsup>\\<sigma>\\<^esup>p \\<and> \\<acute>high = \\<^bsup>\\<sigma>\\<^esup>high \\<and> \\<acute>low = \\<^bsup>\\<sigma>\\<^esup>low)\\<rbrace>\n     VAR MEASURE (length (list \\<acute>nodeslist \\<acute>next))  \n     DO\n       IF (repNodes_eq \\<acute>nodeslist \\<acute>p \\<acute>low \\<acute>high \\<acute>rep)\n       THEN \\<acute>p\\<rightarrow>\\<acute>rep :== \\<acute>nodeslist;; \\<acute>nodeslist :== Null\n       ELSE \\<acute>nodeslist :== \\<acute>nodeslist\\<rightarrow>\\<acute>next\n       FI\n     OD\n  FI\" in HoareTotal.annotateI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<sigma> ns.\n       \\<Gamma>,\\<Theta>\n          \\<turnstile>\\<^sub>t \\<lbrace>\\<sigma>. List \\<acute>nodeslist\n             \\<acute>next ns \\<and>\n            (\\<forall>no\\<in>set ns.\n                no \\<noteq> Null \\<and>\n                (no\\<rightarrow>\\<acute>low = Null) =\n                (no\\<rightarrow>\\<acute>high = Null) \\<and>\n                (isLeaf_pt \\<acute>p \\<acute>low\n                  \\<acute>high \\<longrightarrow>\n                 isLeaf_pt no \\<acute>low \\<acute>high) \\<and>\n                no\\<rightarrow>\\<acute>var =\n                \\<acute>p\\<rightarrow>\\<acute>var) \\<and>\n            \\<acute>p \\<in> set ns\\<rbrace>\n                               IF isLeaf_pt \\<acute>p \\<acute>low\n                                   \\<acute>high\n                               THEN \\<acute>p\\<rightarrow>\\<acute>rep :==\n                                    \\<acute>nodeslist\n                               ELSE WHILE \\<acute>nodeslist \\<noteq> Null\n                                    INV \\<lbrace>\\<exists>prx sfx.\n              List \\<acute>nodeslist \\<acute>next sfx \\<and>\n              ns = prx @ sfx \\<and>\n              \\<not> isLeaf_pt \\<acute>p \\<acute>low \\<acute>high \\<and>\n              (\\<forall>no\\<in>set ns.\n                  no \\<noteq> Null \\<and>\n                  (\\<^bsup>\\<sigma>\\<^esup>low no = Null) =\n                  (\\<^bsup>\\<sigma>\\<^esup>high no = Null) \\<and>\n                  (isLeaf_pt \\<^bsup>\\<sigma>\\<^esup>p\n                    \\<^bsup>\\<sigma>\\<^esup>low\n                    \\<^bsup>\\<sigma>\\<^esup>high \\<longrightarrow>\n                   isLeaf_pt no \\<^bsup>\\<sigma>\\<^esup>low\n                    \\<^bsup>\\<sigma>\\<^esup>high) \\<and>\n                  \\<^bsup>\\<sigma>\\<^esup>var no =\n                  \\<^bsup>\\<sigma>\\<^esup>var\n                   \\<^bsup>\\<sigma>\\<^esup>p) \\<and>\n              \\<^bsup>\\<sigma>\\<^esup>p \\<in> set ns \\<and>\n              ((\\<exists>pt\\<in>set prx.\n                   repNodes_eq pt \\<^bsup>\\<sigma>\\<^esup>p\n                    \\<^bsup>\\<sigma>\\<^esup>low \\<^bsup>\\<sigma>\\<^esup>high\n                    \\<^bsup>\\<sigma>\\<^esup>rep) \\<longrightarrow>\n               \\<^bsup>\\<sigma>\\<^esup>p\\<rightarrow>\\<acute>rep =\n               hd (filter\n                    (\\<lambda>sn.\n                        repNodes_eq sn \\<^bsup>\\<sigma>\\<^esup>p\n                         \\<^bsup>\\<sigma>\\<^esup>low\n                         \\<^bsup>\\<sigma>\\<^esup>high\n                         \\<^bsup>\\<sigma>\\<^esup>rep)\n                    prx) \\<and>\n               (\\<forall>pt.\n                   pt \\<noteq> \\<^bsup>\\<sigma>\\<^esup>p \\<longrightarrow>\n                   \\<^bsup>\\<sigma>\\<^esup>rep pt =\n                   pt\\<rightarrow>\\<acute>rep)) \\<and>\n              ((\\<forall>pt\\<in>set prx.\n                   \\<not> repNodes_eq pt \\<^bsup>\\<sigma>\\<^esup>p\n                           \\<^bsup>\\<sigma>\\<^esup>low\n                           \\<^bsup>\\<sigma>\\<^esup>high\n                           \\<^bsup>\\<sigma>\\<^esup>rep) \\<longrightarrow>\n               \\<^bsup>\\<sigma>\\<^esup>rep = \\<acute>rep) \\<and>\n              (\\<acute>nodeslist \\<noteq> Null \\<longrightarrow>\n               (\\<forall>pt\\<in>set prx.\n                   \\<not> repNodes_eq pt \\<^bsup>\\<sigma>\\<^esup>p\n                           \\<^bsup>\\<sigma>\\<^esup>low\n                           \\<^bsup>\\<sigma>\\<^esup>high\n                           \\<^bsup>\\<sigma>\\<^esup>rep)) \\<and>\n              \\<acute>p = \\<^bsup>\\<sigma>\\<^esup>p \\<and>\n              \\<acute>high = \\<^bsup>\\<sigma>\\<^esup>high \\<and>\n              \\<acute>low = \\<^bsup>\\<sigma>\\<^esup>low\\<rbrace>\n                                    VAR MEASURE length\n           (list \\<acute>nodeslist \\<acute>next) \n                                    DO\nIF repNodes_eq \\<acute>nodeslist \\<acute>p \\<acute>low \\<acute>high\n    \\<acute>rep\nTHEN \\<acute>p\\<rightarrow>\\<acute>rep :== \\<acute>nodeslist;;\n  \\<acute>nodeslist :== Null\nELSE \\<acute>nodeslist :== \\<acute>nodeslist\\<rightarrow>\\<acute>next FI \n                                    OD\n                               FI\n                               \\<lbrace>\\<^bsup>\\<sigma>\\<^esup>p\\<rightarrow>\\<acute>rep =\n  hd (filter\n       (\\<lambda>sn.\n           repNodes_eq sn \\<^bsup>\\<sigma>\\<^esup>p\n            \\<^bsup>\\<sigma>\\<^esup>low \\<^bsup>\\<sigma>\\<^esup>high\n            \\<^bsup>\\<sigma>\\<^esup>rep)\n       ns) \\<and>\n  (\\<forall>pt.\n      pt \\<noteq> \\<^bsup>\\<sigma>\\<^esup>p \\<longrightarrow>\n      \\<^bsup>\\<sigma>\\<^esup>rep pt = pt\\<rightarrow>\\<acute>rep) \\<and>\n  \\<^bsup>\\<sigma>\\<^esup>var\n   (\\<^bsup>\\<sigma>\\<^esup>p\\<rightarrow>\\<acute>rep) =\n  \\<^bsup>\\<sigma>\\<^esup>var \\<^bsup>\\<sigma>\\<^esup>p\\<rbrace>", "apply vcg"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>ns var low high rep next p nodeslist.\n       \\<lbrakk>List nodeslist next ns;\n        \\<forall>no\\<in>set ns.\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           (isLeaf_pt p low high \\<longrightarrow>\n            isLeaf_pt no low high) \\<and>\n           var no = var p;\n        p \\<in> set ns\\<rbrakk>\n       \\<Longrightarrow> (isLeaf_pt p low high \\<longrightarrow>\n                          (rep(p := nodeslist)) p =\n                          hd (filter\n                               (\\<lambda>sn. repNodes_eq sn p low high rep)\n                               ns) \\<and>\n                          (\\<forall>pt.\n                              pt \\<noteq> p \\<longrightarrow>\n                              rep pt = (rep(p := nodeslist)) pt) \\<and>\n                          var ((rep(p := nodeslist)) p) = var p) \\<and>\n                         (\\<not> isLeaf_pt p low high \\<longrightarrow>\n                          (\\<exists>prx sfx.\n                              List nodeslist next sfx \\<and>\n                              ns = prx @ sfx \\<and>\n                              \\<not> isLeaf_pt p low high \\<and>\n                              (\\<forall>no\\<in>set ns.\n                                  no \\<noteq> Null \\<and>\n                                  (low no = Null) = (high no = Null) \\<and>\n                                  (isLeaf_pt p low high \\<longrightarrow>\n                                   isLeaf_pt no low high) \\<and>\n                                  var no = var p) \\<and>\n                              p \\<in> set ns \\<and>\n                              ((\\<exists>pt\\<in>set prx.\n                                   repNodes_eq pt p low high\n                                    rep) \\<longrightarrow>\n                               rep p =\n                               hd (filter\n                                    (\\<lambda>sn.\n  repNodes_eq sn p low high rep)\n                                    prx) \\<and>\n                               (\\<forall>pt.\n                                   pt \\<noteq> p \\<longrightarrow>\n                                   rep pt = rep pt)) \\<and>\n                              ((\\<forall>pt\\<in>set prx.\n                                   \\<not> repNodes_eq pt p low high\n     rep) \\<longrightarrow>\n                               rep = rep) \\<and>\n                              (nodeslist \\<noteq> Null \\<longrightarrow>\n                               (\\<forall>pt\\<in>set prx.\n                                   \\<not> repNodes_eq pt p low high\n     rep)) \\<and>\n                              p = p \\<and> high = high \\<and> low = low))\n 2. \\<And>var low high rep p ns lowa higha repa next pa nodeslist.\n       \\<lbrakk>\\<exists>prx sfx.\n                   List nodeslist next sfx \\<and>\n                   ns = prx @ sfx \\<and>\n                   \\<not> isLeaf_pt pa lowa higha \\<and>\n                   (\\<forall>no\\<in>set ns.\n                       no \\<noteq> Null \\<and>\n                       (low no = Null) = (high no = Null) \\<and>\n                       (isLeaf_pt p low high \\<longrightarrow>\n                        isLeaf_pt no low high) \\<and>\n                       var no = var p) \\<and>\n                   p \\<in> set ns \\<and>\n                   ((\\<exists>pt\\<in>set prx.\n                        repNodes_eq pt p low high rep) \\<longrightarrow>\n                    repa p =\n                    hd (filter (\\<lambda>sn. repNodes_eq sn p low high rep)\n                         prx) \\<and>\n                    (\\<forall>pt.\n                        pt \\<noteq> p \\<longrightarrow>\n                        rep pt = repa pt)) \\<and>\n                   ((\\<forall>pt\\<in>set prx.\n                        \\<not> repNodes_eq pt p low high\n                                rep) \\<longrightarrow>\n                    rep = repa) \\<and>\n                   (nodeslist \\<noteq> Null \\<longrightarrow>\n                    (\\<forall>pt\\<in>set prx.\n                        \\<not> repNodes_eq pt p low high rep)) \\<and>\n                   pa = p \\<and> higha = high \\<and> lowa = low;\n        nodeslist \\<noteq> Null\\<rbrakk>\n       \\<Longrightarrow> (repNodes_eq nodeslist pa lowa higha\n                           repa \\<longrightarrow>\n                          length (list Null next)\n                          < length (list nodeslist next) \\<and>\n                          (\\<exists>prx sfx.\n                              List Null next sfx \\<and>\n                              ns = prx @ sfx \\<and>\n                              \\<not> isLeaf_pt pa lowa higha \\<and>\n                              (\\<forall>no\\<in>set ns.\n                                  no \\<noteq> Null \\<and>\n                                  (low no = Null) = (high no = Null) \\<and>\n                                  (isLeaf_pt p low high \\<longrightarrow>\n                                   isLeaf_pt no low high) \\<and>\n                                  var no = var p) \\<and>\n                              p \\<in> set ns \\<and>\n                              ((\\<exists>pt\\<in>set prx.\n                                   repNodes_eq pt p low high\n                                    rep) \\<longrightarrow>\n                               (repa(pa := nodeslist)) p =\n                               hd (filter\n                                    (\\<lambda>sn.\n  repNodes_eq sn p low high rep)\n                                    prx) \\<and>\n                               (\\<forall>pt.\n                                   pt \\<noteq> p \\<longrightarrow>\n                                   rep pt =\n                                   (repa(pa := nodeslist)) pt)) \\<and>\n                              ((\\<forall>pt\\<in>set prx.\n                                   \\<not> repNodes_eq pt p low high\n     rep) \\<longrightarrow>\n                               rep = repa(pa := nodeslist)) \\<and>\n                              (Null \\<noteq> Null \\<longrightarrow>\n                               (\\<forall>pt\\<in>set prx.\n                                   \\<not> repNodes_eq pt p low high\n     rep)) \\<and>\n                              pa = p \\<and>\n                              higha = high \\<and> lowa = low)) \\<and>\n                         (\\<not> repNodes_eq nodeslist pa lowa higha\n                                  repa \\<longrightarrow>\n                          length (list (next nodeslist) next)\n                          < length (list nodeslist next) \\<and>\n                          (\\<exists>prx sfx.\n                              List (next nodeslist) next sfx \\<and>\n                              ns = prx @ sfx \\<and>\n                              \\<not> isLeaf_pt pa lowa higha \\<and>\n                              (\\<forall>no\\<in>set ns.\n                                  no \\<noteq> Null \\<and>\n                                  (low no = Null) = (high no = Null) \\<and>\n                                  (isLeaf_pt p low high \\<longrightarrow>\n                                   isLeaf_pt no low high) \\<and>\n                                  var no = var p) \\<and>\n                              p \\<in> set ns \\<and>\n                              ((\\<exists>pt\\<in>set prx.\n                                   repNodes_eq pt p low high\n                                    rep) \\<longrightarrow>\n                               repa p =\n                               hd (filter\n                                    (\\<lambda>sn.\n  repNodes_eq sn p low high rep)\n                                    prx) \\<and>\n                               (\\<forall>pt.\n                                   pt \\<noteq> p \\<longrightarrow>\n                                   rep pt = repa pt)) \\<and>\n                              ((\\<forall>pt\\<in>set prx.\n                                   \\<not> repNodes_eq pt p low high\n     rep) \\<longrightarrow>\n                               rep = repa) \\<and>\n                              (next nodeslist \\<noteq>\n                               Null \\<longrightarrow>\n                               (\\<forall>pt\\<in>set prx.\n                                   \\<not> repNodes_eq pt p low high\n     rep)) \\<and>\n                              pa = p \\<and> higha = high \\<and> lowa = low))\n 3. \\<And>var low high rep p ns lowa higha repa next pa nodeslist.\n       \\<lbrakk>\\<exists>prx sfx.\n                   List nodeslist next sfx \\<and>\n                   ns = prx @ sfx \\<and>\n                   \\<not> isLeaf_pt pa lowa higha \\<and>\n                   (\\<forall>no\\<in>set ns.\n                       no \\<noteq> Null \\<and>\n                       (low no = Null) = (high no = Null) \\<and>\n                       (isLeaf_pt p low high \\<longrightarrow>\n                        isLeaf_pt no low high) \\<and>\n                       var no = var p) \\<and>\n                   p \\<in> set ns \\<and>\n                   ((\\<exists>pt\\<in>set prx.\n                        repNodes_eq pt p low high rep) \\<longrightarrow>\n                    repa p =\n                    hd (filter (\\<lambda>sn. repNodes_eq sn p low high rep)\n                         prx) \\<and>\n                    (\\<forall>pt.\n                        pt \\<noteq> p \\<longrightarrow>\n                        rep pt = repa pt)) \\<and>\n                   ((\\<forall>pt\\<in>set prx.\n                        \\<not> repNodes_eq pt p low high\n                                rep) \\<longrightarrow>\n                    rep = repa) \\<and>\n                   (nodeslist \\<noteq> Null \\<longrightarrow>\n                    (\\<forall>pt\\<in>set prx.\n                        \\<not> repNodes_eq pt p low high rep)) \\<and>\n                   pa = p \\<and> higha = high \\<and> lowa = low;\n        \\<not> nodeslist \\<noteq> Null\\<rbrakk>\n       \\<Longrightarrow> repa p =\n                         hd (filter\n                              (\\<lambda>sn. repNodes_eq sn p low high rep)\n                              ns) \\<and>\n                         (\\<forall>pt.\n                             pt \\<noteq> p \\<longrightarrow>\n                             rep pt = repa pt) \\<and>\n                         var (repa p) = var p", "using  [[simp_depth_limit = 2]]"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>ns var low high rep next p nodeslist.\n       \\<lbrakk>List nodeslist next ns;\n        \\<forall>no\\<in>set ns.\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           (isLeaf_pt p low high \\<longrightarrow>\n            isLeaf_pt no low high) \\<and>\n           var no = var p;\n        p \\<in> set ns\\<rbrakk>\n       \\<Longrightarrow> (isLeaf_pt p low high \\<longrightarrow>\n                          (rep(p := nodeslist)) p =\n                          hd (filter\n                               (\\<lambda>sn. repNodes_eq sn p low high rep)\n                               ns) \\<and>\n                          (\\<forall>pt.\n                              pt \\<noteq> p \\<longrightarrow>\n                              rep pt = (rep(p := nodeslist)) pt) \\<and>\n                          var ((rep(p := nodeslist)) p) = var p) \\<and>\n                         (\\<not> isLeaf_pt p low high \\<longrightarrow>\n                          (\\<exists>prx sfx.\n                              List nodeslist next sfx \\<and>\n                              ns = prx @ sfx \\<and>\n                              \\<not> isLeaf_pt p low high \\<and>\n                              (\\<forall>no\\<in>set ns.\n                                  no \\<noteq> Null \\<and>\n                                  (low no = Null) = (high no = Null) \\<and>\n                                  (isLeaf_pt p low high \\<longrightarrow>\n                                   isLeaf_pt no low high) \\<and>\n                                  var no = var p) \\<and>\n                              p \\<in> set ns \\<and>\n                              ((\\<exists>pt\\<in>set prx.\n                                   repNodes_eq pt p low high\n                                    rep) \\<longrightarrow>\n                               rep p =\n                               hd (filter\n                                    (\\<lambda>sn.\n  repNodes_eq sn p low high rep)\n                                    prx) \\<and>\n                               (\\<forall>pt.\n                                   pt \\<noteq> p \\<longrightarrow>\n                                   rep pt = rep pt)) \\<and>\n                              ((\\<forall>pt\\<in>set prx.\n                                   \\<not> repNodes_eq pt p low high\n     rep) \\<longrightarrow>\n                               rep = rep) \\<and>\n                              (nodeslist \\<noteq> Null \\<longrightarrow>\n                               (\\<forall>pt\\<in>set prx.\n                                   \\<not> repNodes_eq pt p low high\n     rep)) \\<and>\n                              p = p \\<and> high = high \\<and> low = low))\n 2. \\<And>var low high rep p ns lowa higha repa next pa nodeslist.\n       \\<lbrakk>\\<exists>prx sfx.\n                   List nodeslist next sfx \\<and>\n                   ns = prx @ sfx \\<and>\n                   \\<not> isLeaf_pt pa lowa higha \\<and>\n                   (\\<forall>no\\<in>set ns.\n                       no \\<noteq> Null \\<and>\n                       (low no = Null) = (high no = Null) \\<and>\n                       (isLeaf_pt p low high \\<longrightarrow>\n                        isLeaf_pt no low high) \\<and>\n                       var no = var p) \\<and>\n                   p \\<in> set ns \\<and>\n                   ((\\<exists>pt\\<in>set prx.\n                        repNodes_eq pt p low high rep) \\<longrightarrow>\n                    repa p =\n                    hd (filter (\\<lambda>sn. repNodes_eq sn p low high rep)\n                         prx) \\<and>\n                    (\\<forall>pt.\n                        pt \\<noteq> p \\<longrightarrow>\n                        rep pt = repa pt)) \\<and>\n                   ((\\<forall>pt\\<in>set prx.\n                        \\<not> repNodes_eq pt p low high\n                                rep) \\<longrightarrow>\n                    rep = repa) \\<and>\n                   (nodeslist \\<noteq> Null \\<longrightarrow>\n                    (\\<forall>pt\\<in>set prx.\n                        \\<not> repNodes_eq pt p low high rep)) \\<and>\n                   pa = p \\<and> higha = high \\<and> lowa = low;\n        nodeslist \\<noteq> Null\\<rbrakk>\n       \\<Longrightarrow> (repNodes_eq nodeslist pa lowa higha\n                           repa \\<longrightarrow>\n                          length (list Null next)\n                          < length (list nodeslist next) \\<and>\n                          (\\<exists>prx sfx.\n                              List Null next sfx \\<and>\n                              ns = prx @ sfx \\<and>\n                              \\<not> isLeaf_pt pa lowa higha \\<and>\n                              (\\<forall>no\\<in>set ns.\n                                  no \\<noteq> Null \\<and>\n                                  (low no = Null) = (high no = Null) \\<and>\n                                  (isLeaf_pt p low high \\<longrightarrow>\n                                   isLeaf_pt no low high) \\<and>\n                                  var no = var p) \\<and>\n                              p \\<in> set ns \\<and>\n                              ((\\<exists>pt\\<in>set prx.\n                                   repNodes_eq pt p low high\n                                    rep) \\<longrightarrow>\n                               (repa(pa := nodeslist)) p =\n                               hd (filter\n                                    (\\<lambda>sn.\n  repNodes_eq sn p low high rep)\n                                    prx) \\<and>\n                               (\\<forall>pt.\n                                   pt \\<noteq> p \\<longrightarrow>\n                                   rep pt =\n                                   (repa(pa := nodeslist)) pt)) \\<and>\n                              ((\\<forall>pt\\<in>set prx.\n                                   \\<not> repNodes_eq pt p low high\n     rep) \\<longrightarrow>\n                               rep = repa(pa := nodeslist)) \\<and>\n                              (Null \\<noteq> Null \\<longrightarrow>\n                               (\\<forall>pt\\<in>set prx.\n                                   \\<not> repNodes_eq pt p low high\n     rep)) \\<and>\n                              pa = p \\<and>\n                              higha = high \\<and> lowa = low)) \\<and>\n                         (\\<not> repNodes_eq nodeslist pa lowa higha\n                                  repa \\<longrightarrow>\n                          length (list (next nodeslist) next)\n                          < length (list nodeslist next) \\<and>\n                          (\\<exists>prx sfx.\n                              List (next nodeslist) next sfx \\<and>\n                              ns = prx @ sfx \\<and>\n                              \\<not> isLeaf_pt pa lowa higha \\<and>\n                              (\\<forall>no\\<in>set ns.\n                                  no \\<noteq> Null \\<and>\n                                  (low no = Null) = (high no = Null) \\<and>\n                                  (isLeaf_pt p low high \\<longrightarrow>\n                                   isLeaf_pt no low high) \\<and>\n                                  var no = var p) \\<and>\n                              p \\<in> set ns \\<and>\n                              ((\\<exists>pt\\<in>set prx.\n                                   repNodes_eq pt p low high\n                                    rep) \\<longrightarrow>\n                               repa p =\n                               hd (filter\n                                    (\\<lambda>sn.\n  repNodes_eq sn p low high rep)\n                                    prx) \\<and>\n                               (\\<forall>pt.\n                                   pt \\<noteq> p \\<longrightarrow>\n                                   rep pt = repa pt)) \\<and>\n                              ((\\<forall>pt\\<in>set prx.\n                                   \\<not> repNodes_eq pt p low high\n     rep) \\<longrightarrow>\n                               rep = repa) \\<and>\n                              (next nodeslist \\<noteq>\n                               Null \\<longrightarrow>\n                               (\\<forall>pt\\<in>set prx.\n                                   \\<not> repNodes_eq pt p low high\n     rep)) \\<and>\n                              pa = p \\<and> higha = high \\<and> lowa = low))\n 3. \\<And>var low high rep p ns lowa higha repa next pa nodeslist.\n       \\<lbrakk>\\<exists>prx sfx.\n                   List nodeslist next sfx \\<and>\n                   ns = prx @ sfx \\<and>\n                   \\<not> isLeaf_pt pa lowa higha \\<and>\n                   (\\<forall>no\\<in>set ns.\n                       no \\<noteq> Null \\<and>\n                       (low no = Null) = (high no = Null) \\<and>\n                       (isLeaf_pt p low high \\<longrightarrow>\n                        isLeaf_pt no low high) \\<and>\n                       var no = var p) \\<and>\n                   p \\<in> set ns \\<and>\n                   ((\\<exists>pt\\<in>set prx.\n                        repNodes_eq pt p low high rep) \\<longrightarrow>\n                    repa p =\n                    hd (filter (\\<lambda>sn. repNodes_eq sn p low high rep)\n                         prx) \\<and>\n                    (\\<forall>pt.\n                        pt \\<noteq> p \\<longrightarrow>\n                        rep pt = repa pt)) \\<and>\n                   ((\\<forall>pt\\<in>set prx.\n                        \\<not> repNodes_eq pt p low high\n                                rep) \\<longrightarrow>\n                    rep = repa) \\<and>\n                   (nodeslist \\<noteq> Null \\<longrightarrow>\n                    (\\<forall>pt\\<in>set prx.\n                        \\<not> repNodes_eq pt p low high rep)) \\<and>\n                   pa = p \\<and> higha = high \\<and> lowa = low;\n        \\<not> nodeslist \\<noteq> Null\\<rbrakk>\n       \\<Longrightarrow> repa p =\n                         hd (filter\n                              (\\<lambda>sn. repNodes_eq sn p low high rep)\n                              ns) \\<and>\n                         (\\<forall>pt.\n                             pt \\<noteq> p \\<longrightarrow>\n                             rep pt = repa pt) \\<and>\n                         var (repa p) = var p", "apply   (rule conjI)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>ns var low high rep next p nodeslist.\n       \\<lbrakk>List nodeslist next ns;\n        \\<forall>no\\<in>set ns.\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           (isLeaf_pt p low high \\<longrightarrow>\n            isLeaf_pt no low high) \\<and>\n           var no = var p;\n        p \\<in> set ns\\<rbrakk>\n       \\<Longrightarrow> isLeaf_pt p low high \\<longrightarrow>\n                         (rep(p := nodeslist)) p =\n                         hd (filter\n                              (\\<lambda>sn. repNodes_eq sn p low high rep)\n                              ns) \\<and>\n                         (\\<forall>pt.\n                             pt \\<noteq> p \\<longrightarrow>\n                             rep pt = (rep(p := nodeslist)) pt) \\<and>\n                         var ((rep(p := nodeslist)) p) = var p\n 2. \\<And>ns var low high rep next p nodeslist.\n       \\<lbrakk>List nodeslist next ns;\n        \\<forall>no\\<in>set ns.\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           (isLeaf_pt p low high \\<longrightarrow>\n            isLeaf_pt no low high) \\<and>\n           var no = var p;\n        p \\<in> set ns\\<rbrakk>\n       \\<Longrightarrow> \\<not> isLeaf_pt p low high \\<longrightarrow>\n                         (\\<exists>prx sfx.\n                             List nodeslist next sfx \\<and>\n                             ns = prx @ sfx \\<and>\n                             \\<not> isLeaf_pt p low high \\<and>\n                             (\\<forall>no\\<in>set ns.\n                                 no \\<noteq> Null \\<and>\n                                 (low no = Null) = (high no = Null) \\<and>\n                                 (isLeaf_pt p low high \\<longrightarrow>\n                                  isLeaf_pt no low high) \\<and>\n                                 var no = var p) \\<and>\n                             p \\<in> set ns \\<and>\n                             ((\\<exists>pt\\<in>set prx.\n                                  repNodes_eq pt p low high\n                                   rep) \\<longrightarrow>\n                              rep p =\n                              hd (filter\n                                   (\\<lambda>sn.\n repNodes_eq sn p low high rep)\n                                   prx) \\<and>\n                              (\\<forall>pt.\n                                  pt \\<noteq> p \\<longrightarrow>\n                                  rep pt = rep pt)) \\<and>\n                             ((\\<forall>pt\\<in>set prx.\n                                  \\<not> repNodes_eq pt p low high\n    rep) \\<longrightarrow>\n                              rep = rep) \\<and>\n                             (nodeslist \\<noteq> Null \\<longrightarrow>\n                              (\\<forall>pt\\<in>set prx.\n                                  \\<not> repNodes_eq pt p low high\n    rep)) \\<and>\n                             p = p \\<and> high = high \\<and> low = low)\n 3. \\<And>var low high rep p ns lowa higha repa next pa nodeslist.\n       \\<lbrakk>\\<exists>prx sfx.\n                   List nodeslist next sfx \\<and>\n                   ns = prx @ sfx \\<and>\n                   \\<not> isLeaf_pt pa lowa higha \\<and>\n                   (\\<forall>no\\<in>set ns.\n                       no \\<noteq> Null \\<and>\n                       (low no = Null) = (high no = Null) \\<and>\n                       (isLeaf_pt p low high \\<longrightarrow>\n                        isLeaf_pt no low high) \\<and>\n                       var no = var p) \\<and>\n                   p \\<in> set ns \\<and>\n                   ((\\<exists>pt\\<in>set prx.\n                        repNodes_eq pt p low high rep) \\<longrightarrow>\n                    repa p =\n                    hd (filter (\\<lambda>sn. repNodes_eq sn p low high rep)\n                         prx) \\<and>\n                    (\\<forall>pt.\n                        pt \\<noteq> p \\<longrightarrow>\n                        rep pt = repa pt)) \\<and>\n                   ((\\<forall>pt\\<in>set prx.\n                        \\<not> repNodes_eq pt p low high\n                                rep) \\<longrightarrow>\n                    rep = repa) \\<and>\n                   (nodeslist \\<noteq> Null \\<longrightarrow>\n                    (\\<forall>pt\\<in>set prx.\n                        \\<not> repNodes_eq pt p low high rep)) \\<and>\n                   pa = p \\<and> higha = high \\<and> lowa = low;\n        nodeslist \\<noteq> Null\\<rbrakk>\n       \\<Longrightarrow> (repNodes_eq nodeslist pa lowa higha\n                           repa \\<longrightarrow>\n                          length (list Null next)\n                          < length (list nodeslist next) \\<and>\n                          (\\<exists>prx sfx.\n                              List Null next sfx \\<and>\n                              ns = prx @ sfx \\<and>\n                              \\<not> isLeaf_pt pa lowa higha \\<and>\n                              (\\<forall>no\\<in>set ns.\n                                  no \\<noteq> Null \\<and>\n                                  (low no = Null) = (high no = Null) \\<and>\n                                  (isLeaf_pt p low high \\<longrightarrow>\n                                   isLeaf_pt no low high) \\<and>\n                                  var no = var p) \\<and>\n                              p \\<in> set ns \\<and>\n                              ((\\<exists>pt\\<in>set prx.\n                                   repNodes_eq pt p low high\n                                    rep) \\<longrightarrow>\n                               (repa(pa := nodeslist)) p =\n                               hd (filter\n                                    (\\<lambda>sn.\n  repNodes_eq sn p low high rep)\n                                    prx) \\<and>\n                               (\\<forall>pt.\n                                   pt \\<noteq> p \\<longrightarrow>\n                                   rep pt =\n                                   (repa(pa := nodeslist)) pt)) \\<and>\n                              ((\\<forall>pt\\<in>set prx.\n                                   \\<not> repNodes_eq pt p low high\n     rep) \\<longrightarrow>\n                               rep = repa(pa := nodeslist)) \\<and>\n                              (Null \\<noteq> Null \\<longrightarrow>\n                               (\\<forall>pt\\<in>set prx.\n                                   \\<not> repNodes_eq pt p low high\n     rep)) \\<and>\n                              pa = p \\<and>\n                              higha = high \\<and> lowa = low)) \\<and>\n                         (\\<not> repNodes_eq nodeslist pa lowa higha\n                                  repa \\<longrightarrow>\n                          length (list (next nodeslist) next)\n                          < length (list nodeslist next) \\<and>\n                          (\\<exists>prx sfx.\n                              List (next nodeslist) next sfx \\<and>\n                              ns = prx @ sfx \\<and>\n                              \\<not> isLeaf_pt pa lowa higha \\<and>\n                              (\\<forall>no\\<in>set ns.\n                                  no \\<noteq> Null \\<and>\n                                  (low no = Null) = (high no = Null) \\<and>\n                                  (isLeaf_pt p low high \\<longrightarrow>\n                                   isLeaf_pt no low high) \\<and>\n                                  var no = var p) \\<and>\n                              p \\<in> set ns \\<and>\n                              ((\\<exists>pt\\<in>set prx.\n                                   repNodes_eq pt p low high\n                                    rep) \\<longrightarrow>\n                               repa p =\n                               hd (filter\n                                    (\\<lambda>sn.\n  repNodes_eq sn p low high rep)\n                                    prx) \\<and>\n                               (\\<forall>pt.\n                                   pt \\<noteq> p \\<longrightarrow>\n                                   rep pt = repa pt)) \\<and>\n                              ((\\<forall>pt\\<in>set prx.\n                                   \\<not> repNodes_eq pt p low high\n     rep) \\<longrightarrow>\n                               rep = repa) \\<and>\n                              (next nodeslist \\<noteq>\n                               Null \\<longrightarrow>\n                               (\\<forall>pt\\<in>set prx.\n                                   \\<not> repNodes_eq pt p low high\n     rep)) \\<and>\n                              pa = p \\<and> higha = high \\<and> lowa = low))\n 4. \\<And>var low high rep p ns lowa higha repa next pa nodeslist.\n       \\<lbrakk>\\<exists>prx sfx.\n                   List nodeslist next sfx \\<and>\n                   ns = prx @ sfx \\<and>\n                   \\<not> isLeaf_pt pa lowa higha \\<and>\n                   (\\<forall>no\\<in>set ns.\n                       no \\<noteq> Null \\<and>\n                       (low no = Null) = (high no = Null) \\<and>\n                       (isLeaf_pt p low high \\<longrightarrow>\n                        isLeaf_pt no low high) \\<and>\n                       var no = var p) \\<and>\n                   p \\<in> set ns \\<and>\n                   ((\\<exists>pt\\<in>set prx.\n                        repNodes_eq pt p low high rep) \\<longrightarrow>\n                    repa p =\n                    hd (filter (\\<lambda>sn. repNodes_eq sn p low high rep)\n                         prx) \\<and>\n                    (\\<forall>pt.\n                        pt \\<noteq> p \\<longrightarrow>\n                        rep pt = repa pt)) \\<and>\n                   ((\\<forall>pt\\<in>set prx.\n                        \\<not> repNodes_eq pt p low high\n                                rep) \\<longrightarrow>\n                    rep = repa) \\<and>\n                   (nodeslist \\<noteq> Null \\<longrightarrow>\n                    (\\<forall>pt\\<in>set prx.\n                        \\<not> repNodes_eq pt p low high rep)) \\<and>\n                   pa = p \\<and> higha = high \\<and> lowa = low;\n        \\<not> nodeslist \\<noteq> Null\\<rbrakk>\n       \\<Longrightarrow> repa p =\n                         hd (filter\n                              (\\<lambda>sn. repNodes_eq sn p low high rep)\n                              ns) \\<and>\n                         (\\<forall>pt.\n                             pt \\<noteq> p \\<longrightarrow>\n                             rep pt = repa pt) \\<and>\n                         var (repa p) = var p", "apply    clarify"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>ns var low high rep next p nodeslist.\n       \\<lbrakk>List nodeslist next ns;\n        \\<forall>no\\<in>set ns.\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           (isLeaf_pt p low high \\<longrightarrow>\n            isLeaf_pt no low high) \\<and>\n           var no = var p;\n        p \\<in> set ns; isLeaf_pt p low high\\<rbrakk>\n       \\<Longrightarrow> (rep(p := nodeslist)) p =\n                         hd (filter\n                              (\\<lambda>sn. repNodes_eq sn p low high rep)\n                              ns) \\<and>\n                         (\\<forall>pt.\n                             pt \\<noteq> p \\<longrightarrow>\n                             rep pt = (rep(p := nodeslist)) pt) \\<and>\n                         var ((rep(p := nodeslist)) p) = var p\n 2. \\<And>ns var low high rep next p nodeslist.\n       \\<lbrakk>List nodeslist next ns;\n        \\<forall>no\\<in>set ns.\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           (isLeaf_pt p low high \\<longrightarrow>\n            isLeaf_pt no low high) \\<and>\n           var no = var p;\n        p \\<in> set ns\\<rbrakk>\n       \\<Longrightarrow> \\<not> isLeaf_pt p low high \\<longrightarrow>\n                         (\\<exists>prx sfx.\n                             List nodeslist next sfx \\<and>\n                             ns = prx @ sfx \\<and>\n                             \\<not> isLeaf_pt p low high \\<and>\n                             (\\<forall>no\\<in>set ns.\n                                 no \\<noteq> Null \\<and>\n                                 (low no = Null) = (high no = Null) \\<and>\n                                 (isLeaf_pt p low high \\<longrightarrow>\n                                  isLeaf_pt no low high) \\<and>\n                                 var no = var p) \\<and>\n                             p \\<in> set ns \\<and>\n                             ((\\<exists>pt\\<in>set prx.\n                                  repNodes_eq pt p low high\n                                   rep) \\<longrightarrow>\n                              rep p =\n                              hd (filter\n                                   (\\<lambda>sn.\n repNodes_eq sn p low high rep)\n                                   prx) \\<and>\n                              (\\<forall>pt.\n                                  pt \\<noteq> p \\<longrightarrow>\n                                  rep pt = rep pt)) \\<and>\n                             ((\\<forall>pt\\<in>set prx.\n                                  \\<not> repNodes_eq pt p low high\n    rep) \\<longrightarrow>\n                              rep = rep) \\<and>\n                             (nodeslist \\<noteq> Null \\<longrightarrow>\n                              (\\<forall>pt\\<in>set prx.\n                                  \\<not> repNodes_eq pt p low high\n    rep)) \\<and>\n                             p = p \\<and> high = high \\<and> low = low)\n 3. \\<And>var low high rep p ns lowa higha repa next pa nodeslist.\n       \\<lbrakk>\\<exists>prx sfx.\n                   List nodeslist next sfx \\<and>\n                   ns = prx @ sfx \\<and>\n                   \\<not> isLeaf_pt pa lowa higha \\<and>\n                   (\\<forall>no\\<in>set ns.\n                       no \\<noteq> Null \\<and>\n                       (low no = Null) = (high no = Null) \\<and>\n                       (isLeaf_pt p low high \\<longrightarrow>\n                        isLeaf_pt no low high) \\<and>\n                       var no = var p) \\<and>\n                   p \\<in> set ns \\<and>\n                   ((\\<exists>pt\\<in>set prx.\n                        repNodes_eq pt p low high rep) \\<longrightarrow>\n                    repa p =\n                    hd (filter (\\<lambda>sn. repNodes_eq sn p low high rep)\n                         prx) \\<and>\n                    (\\<forall>pt.\n                        pt \\<noteq> p \\<longrightarrow>\n                        rep pt = repa pt)) \\<and>\n                   ((\\<forall>pt\\<in>set prx.\n                        \\<not> repNodes_eq pt p low high\n                                rep) \\<longrightarrow>\n                    rep = repa) \\<and>\n                   (nodeslist \\<noteq> Null \\<longrightarrow>\n                    (\\<forall>pt\\<in>set prx.\n                        \\<not> repNodes_eq pt p low high rep)) \\<and>\n                   pa = p \\<and> higha = high \\<and> lowa = low;\n        nodeslist \\<noteq> Null\\<rbrakk>\n       \\<Longrightarrow> (repNodes_eq nodeslist pa lowa higha\n                           repa \\<longrightarrow>\n                          length (list Null next)\n                          < length (list nodeslist next) \\<and>\n                          (\\<exists>prx sfx.\n                              List Null next sfx \\<and>\n                              ns = prx @ sfx \\<and>\n                              \\<not> isLeaf_pt pa lowa higha \\<and>\n                              (\\<forall>no\\<in>set ns.\n                                  no \\<noteq> Null \\<and>\n                                  (low no = Null) = (high no = Null) \\<and>\n                                  (isLeaf_pt p low high \\<longrightarrow>\n                                   isLeaf_pt no low high) \\<and>\n                                  var no = var p) \\<and>\n                              p \\<in> set ns \\<and>\n                              ((\\<exists>pt\\<in>set prx.\n                                   repNodes_eq pt p low high\n                                    rep) \\<longrightarrow>\n                               (repa(pa := nodeslist)) p =\n                               hd (filter\n                                    (\\<lambda>sn.\n  repNodes_eq sn p low high rep)\n                                    prx) \\<and>\n                               (\\<forall>pt.\n                                   pt \\<noteq> p \\<longrightarrow>\n                                   rep pt =\n                                   (repa(pa := nodeslist)) pt)) \\<and>\n                              ((\\<forall>pt\\<in>set prx.\n                                   \\<not> repNodes_eq pt p low high\n     rep) \\<longrightarrow>\n                               rep = repa(pa := nodeslist)) \\<and>\n                              (Null \\<noteq> Null \\<longrightarrow>\n                               (\\<forall>pt\\<in>set prx.\n                                   \\<not> repNodes_eq pt p low high\n     rep)) \\<and>\n                              pa = p \\<and>\n                              higha = high \\<and> lowa = low)) \\<and>\n                         (\\<not> repNodes_eq nodeslist pa lowa higha\n                                  repa \\<longrightarrow>\n                          length (list (next nodeslist) next)\n                          < length (list nodeslist next) \\<and>\n                          (\\<exists>prx sfx.\n                              List (next nodeslist) next sfx \\<and>\n                              ns = prx @ sfx \\<and>\n                              \\<not> isLeaf_pt pa lowa higha \\<and>\n                              (\\<forall>no\\<in>set ns.\n                                  no \\<noteq> Null \\<and>\n                                  (low no = Null) = (high no = Null) \\<and>\n                                  (isLeaf_pt p low high \\<longrightarrow>\n                                   isLeaf_pt no low high) \\<and>\n                                  var no = var p) \\<and>\n                              p \\<in> set ns \\<and>\n                              ((\\<exists>pt\\<in>set prx.\n                                   repNodes_eq pt p low high\n                                    rep) \\<longrightarrow>\n                               repa p =\n                               hd (filter\n                                    (\\<lambda>sn.\n  repNodes_eq sn p low high rep)\n                                    prx) \\<and>\n                               (\\<forall>pt.\n                                   pt \\<noteq> p \\<longrightarrow>\n                                   rep pt = repa pt)) \\<and>\n                              ((\\<forall>pt\\<in>set prx.\n                                   \\<not> repNodes_eq pt p low high\n     rep) \\<longrightarrow>\n                               rep = repa) \\<and>\n                              (next nodeslist \\<noteq>\n                               Null \\<longrightarrow>\n                               (\\<forall>pt\\<in>set prx.\n                                   \\<not> repNodes_eq pt p low high\n     rep)) \\<and>\n                              pa = p \\<and> higha = high \\<and> lowa = low))\n 4. \\<And>var low high rep p ns lowa higha repa next pa nodeslist.\n       \\<lbrakk>\\<exists>prx sfx.\n                   List nodeslist next sfx \\<and>\n                   ns = prx @ sfx \\<and>\n                   \\<not> isLeaf_pt pa lowa higha \\<and>\n                   (\\<forall>no\\<in>set ns.\n                       no \\<noteq> Null \\<and>\n                       (low no = Null) = (high no = Null) \\<and>\n                       (isLeaf_pt p low high \\<longrightarrow>\n                        isLeaf_pt no low high) \\<and>\n                       var no = var p) \\<and>\n                   p \\<in> set ns \\<and>\n                   ((\\<exists>pt\\<in>set prx.\n                        repNodes_eq pt p low high rep) \\<longrightarrow>\n                    repa p =\n                    hd (filter (\\<lambda>sn. repNodes_eq sn p low high rep)\n                         prx) \\<and>\n                    (\\<forall>pt.\n                        pt \\<noteq> p \\<longrightarrow>\n                        rep pt = repa pt)) \\<and>\n                   ((\\<forall>pt\\<in>set prx.\n                        \\<not> repNodes_eq pt p low high\n                                rep) \\<longrightarrow>\n                    rep = repa) \\<and>\n                   (nodeslist \\<noteq> Null \\<longrightarrow>\n                    (\\<forall>pt\\<in>set prx.\n                        \\<not> repNodes_eq pt p low high rep)) \\<and>\n                   pa = p \\<and> higha = high \\<and> lowa = low;\n        \\<not> nodeslist \\<noteq> Null\\<rbrakk>\n       \\<Longrightarrow> repa p =\n                         hd (filter\n                              (\\<lambda>sn. repNodes_eq sn p low high rep)\n                              ns) \\<and>\n                         (\\<forall>pt.\n                             pt \\<noteq> p \\<longrightarrow>\n                             rep pt = repa pt) \\<and>\n                         var (repa p) = var p", "apply    (simp (no_asm_use))"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>ns var low high rep next p nodeslist.\n       \\<lbrakk>List nodeslist next ns;\n        \\<forall>no\\<in>set ns.\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           (isLeaf_pt p low high \\<longrightarrow>\n            isLeaf_pt no low high) \\<and>\n           var no = var p;\n        p \\<in> set ns; isLeaf_pt p low high\\<rbrakk>\n       \\<Longrightarrow> nodeslist =\n                         hd (filter\n                              (\\<lambda>sn. repNodes_eq sn p low high rep)\n                              ns) \\<and>\n                         var nodeslist = var p\n 2. \\<And>ns var low high rep next p nodeslist.\n       \\<lbrakk>List nodeslist next ns;\n        \\<forall>no\\<in>set ns.\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           (isLeaf_pt p low high \\<longrightarrow>\n            isLeaf_pt no low high) \\<and>\n           var no = var p;\n        p \\<in> set ns\\<rbrakk>\n       \\<Longrightarrow> \\<not> isLeaf_pt p low high \\<longrightarrow>\n                         (\\<exists>prx sfx.\n                             List nodeslist next sfx \\<and>\n                             ns = prx @ sfx \\<and>\n                             \\<not> isLeaf_pt p low high \\<and>\n                             (\\<forall>no\\<in>set ns.\n                                 no \\<noteq> Null \\<and>\n                                 (low no = Null) = (high no = Null) \\<and>\n                                 (isLeaf_pt p low high \\<longrightarrow>\n                                  isLeaf_pt no low high) \\<and>\n                                 var no = var p) \\<and>\n                             p \\<in> set ns \\<and>\n                             ((\\<exists>pt\\<in>set prx.\n                                  repNodes_eq pt p low high\n                                   rep) \\<longrightarrow>\n                              rep p =\n                              hd (filter\n                                   (\\<lambda>sn.\n repNodes_eq sn p low high rep)\n                                   prx) \\<and>\n                              (\\<forall>pt.\n                                  pt \\<noteq> p \\<longrightarrow>\n                                  rep pt = rep pt)) \\<and>\n                             ((\\<forall>pt\\<in>set prx.\n                                  \\<not> repNodes_eq pt p low high\n    rep) \\<longrightarrow>\n                              rep = rep) \\<and>\n                             (nodeslist \\<noteq> Null \\<longrightarrow>\n                              (\\<forall>pt\\<in>set prx.\n                                  \\<not> repNodes_eq pt p low high\n    rep)) \\<and>\n                             p = p \\<and> high = high \\<and> low = low)\n 3. \\<And>var low high rep p ns lowa higha repa next pa nodeslist.\n       \\<lbrakk>\\<exists>prx sfx.\n                   List nodeslist next sfx \\<and>\n                   ns = prx @ sfx \\<and>\n                   \\<not> isLeaf_pt pa lowa higha \\<and>\n                   (\\<forall>no\\<in>set ns.\n                       no \\<noteq> Null \\<and>\n                       (low no = Null) = (high no = Null) \\<and>\n                       (isLeaf_pt p low high \\<longrightarrow>\n                        isLeaf_pt no low high) \\<and>\n                       var no = var p) \\<and>\n                   p \\<in> set ns \\<and>\n                   ((\\<exists>pt\\<in>set prx.\n                        repNodes_eq pt p low high rep) \\<longrightarrow>\n                    repa p =\n                    hd (filter (\\<lambda>sn. repNodes_eq sn p low high rep)\n                         prx) \\<and>\n                    (\\<forall>pt.\n                        pt \\<noteq> p \\<longrightarrow>\n                        rep pt = repa pt)) \\<and>\n                   ((\\<forall>pt\\<in>set prx.\n                        \\<not> repNodes_eq pt p low high\n                                rep) \\<longrightarrow>\n                    rep = repa) \\<and>\n                   (nodeslist \\<noteq> Null \\<longrightarrow>\n                    (\\<forall>pt\\<in>set prx.\n                        \\<not> repNodes_eq pt p low high rep)) \\<and>\n                   pa = p \\<and> higha = high \\<and> lowa = low;\n        nodeslist \\<noteq> Null\\<rbrakk>\n       \\<Longrightarrow> (repNodes_eq nodeslist pa lowa higha\n                           repa \\<longrightarrow>\n                          length (list Null next)\n                          < length (list nodeslist next) \\<and>\n                          (\\<exists>prx sfx.\n                              List Null next sfx \\<and>\n                              ns = prx @ sfx \\<and>\n                              \\<not> isLeaf_pt pa lowa higha \\<and>\n                              (\\<forall>no\\<in>set ns.\n                                  no \\<noteq> Null \\<and>\n                                  (low no = Null) = (high no = Null) \\<and>\n                                  (isLeaf_pt p low high \\<longrightarrow>\n                                   isLeaf_pt no low high) \\<and>\n                                  var no = var p) \\<and>\n                              p \\<in> set ns \\<and>\n                              ((\\<exists>pt\\<in>set prx.\n                                   repNodes_eq pt p low high\n                                    rep) \\<longrightarrow>\n                               (repa(pa := nodeslist)) p =\n                               hd (filter\n                                    (\\<lambda>sn.\n  repNodes_eq sn p low high rep)\n                                    prx) \\<and>\n                               (\\<forall>pt.\n                                   pt \\<noteq> p \\<longrightarrow>\n                                   rep pt =\n                                   (repa(pa := nodeslist)) pt)) \\<and>\n                              ((\\<forall>pt\\<in>set prx.\n                                   \\<not> repNodes_eq pt p low high\n     rep) \\<longrightarrow>\n                               rep = repa(pa := nodeslist)) \\<and>\n                              (Null \\<noteq> Null \\<longrightarrow>\n                               (\\<forall>pt\\<in>set prx.\n                                   \\<not> repNodes_eq pt p low high\n     rep)) \\<and>\n                              pa = p \\<and>\n                              higha = high \\<and> lowa = low)) \\<and>\n                         (\\<not> repNodes_eq nodeslist pa lowa higha\n                                  repa \\<longrightarrow>\n                          length (list (next nodeslist) next)\n                          < length (list nodeslist next) \\<and>\n                          (\\<exists>prx sfx.\n                              List (next nodeslist) next sfx \\<and>\n                              ns = prx @ sfx \\<and>\n                              \\<not> isLeaf_pt pa lowa higha \\<and>\n                              (\\<forall>no\\<in>set ns.\n                                  no \\<noteq> Null \\<and>\n                                  (low no = Null) = (high no = Null) \\<and>\n                                  (isLeaf_pt p low high \\<longrightarrow>\n                                   isLeaf_pt no low high) \\<and>\n                                  var no = var p) \\<and>\n                              p \\<in> set ns \\<and>\n                              ((\\<exists>pt\\<in>set prx.\n                                   repNodes_eq pt p low high\n                                    rep) \\<longrightarrow>\n                               repa p =\n                               hd (filter\n                                    (\\<lambda>sn.\n  repNodes_eq sn p low high rep)\n                                    prx) \\<and>\n                               (\\<forall>pt.\n                                   pt \\<noteq> p \\<longrightarrow>\n                                   rep pt = repa pt)) \\<and>\n                              ((\\<forall>pt\\<in>set prx.\n                                   \\<not> repNodes_eq pt p low high\n     rep) \\<longrightarrow>\n                               rep = repa) \\<and>\n                              (next nodeslist \\<noteq>\n                               Null \\<longrightarrow>\n                               (\\<forall>pt\\<in>set prx.\n                                   \\<not> repNodes_eq pt p low high\n     rep)) \\<and>\n                              pa = p \\<and> higha = high \\<and> lowa = low))\n 4. \\<And>var low high rep p ns lowa higha repa next pa nodeslist.\n       \\<lbrakk>\\<exists>prx sfx.\n                   List nodeslist next sfx \\<and>\n                   ns = prx @ sfx \\<and>\n                   \\<not> isLeaf_pt pa lowa higha \\<and>\n                   (\\<forall>no\\<in>set ns.\n                       no \\<noteq> Null \\<and>\n                       (low no = Null) = (high no = Null) \\<and>\n                       (isLeaf_pt p low high \\<longrightarrow>\n                        isLeaf_pt no low high) \\<and>\n                       var no = var p) \\<and>\n                   p \\<in> set ns \\<and>\n                   ((\\<exists>pt\\<in>set prx.\n                        repNodes_eq pt p low high rep) \\<longrightarrow>\n                    repa p =\n                    hd (filter (\\<lambda>sn. repNodes_eq sn p low high rep)\n                         prx) \\<and>\n                    (\\<forall>pt.\n                        pt \\<noteq> p \\<longrightarrow>\n                        rep pt = repa pt)) \\<and>\n                   ((\\<forall>pt\\<in>set prx.\n                        \\<not> repNodes_eq pt p low high\n                                rep) \\<longrightarrow>\n                    rep = repa) \\<and>\n                   (nodeslist \\<noteq> Null \\<longrightarrow>\n                    (\\<forall>pt\\<in>set prx.\n                        \\<not> repNodes_eq pt p low high rep)) \\<and>\n                   pa = p \\<and> higha = high \\<and> lowa = low;\n        \\<not> nodeslist \\<noteq> Null\\<rbrakk>\n       \\<Longrightarrow> repa p =\n                         hd (filter\n                              (\\<lambda>sn. repNodes_eq sn p low high rep)\n                              ns) \\<and>\n                         (\\<forall>pt.\n                             pt \\<noteq> p \\<longrightarrow>\n                             rep pt = repa pt) \\<and>\n                         var (repa p) = var p", "prefer 2"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>ns var low high rep next p nodeslist.\n       \\<lbrakk>List nodeslist next ns;\n        \\<forall>no\\<in>set ns.\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           (isLeaf_pt p low high \\<longrightarrow>\n            isLeaf_pt no low high) \\<and>\n           var no = var p;\n        p \\<in> set ns\\<rbrakk>\n       \\<Longrightarrow> \\<not> isLeaf_pt p low high \\<longrightarrow>\n                         (\\<exists>prx sfx.\n                             List nodeslist next sfx \\<and>\n                             ns = prx @ sfx \\<and>\n                             \\<not> isLeaf_pt p low high \\<and>\n                             (\\<forall>no\\<in>set ns.\n                                 no \\<noteq> Null \\<and>\n                                 (low no = Null) = (high no = Null) \\<and>\n                                 (isLeaf_pt p low high \\<longrightarrow>\n                                  isLeaf_pt no low high) \\<and>\n                                 var no = var p) \\<and>\n                             p \\<in> set ns \\<and>\n                             ((\\<exists>pt\\<in>set prx.\n                                  repNodes_eq pt p low high\n                                   rep) \\<longrightarrow>\n                              rep p =\n                              hd (filter\n                                   (\\<lambda>sn.\n repNodes_eq sn p low high rep)\n                                   prx) \\<and>\n                              (\\<forall>pt.\n                                  pt \\<noteq> p \\<longrightarrow>\n                                  rep pt = rep pt)) \\<and>\n                             ((\\<forall>pt\\<in>set prx.\n                                  \\<not> repNodes_eq pt p low high\n    rep) \\<longrightarrow>\n                              rep = rep) \\<and>\n                             (nodeslist \\<noteq> Null \\<longrightarrow>\n                              (\\<forall>pt\\<in>set prx.\n                                  \\<not> repNodes_eq pt p low high\n    rep)) \\<and>\n                             p = p \\<and> high = high \\<and> low = low)\n 2. \\<And>ns var low high rep next p nodeslist.\n       \\<lbrakk>List nodeslist next ns;\n        \\<forall>no\\<in>set ns.\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           (isLeaf_pt p low high \\<longrightarrow>\n            isLeaf_pt no low high) \\<and>\n           var no = var p;\n        p \\<in> set ns; isLeaf_pt p low high\\<rbrakk>\n       \\<Longrightarrow> nodeslist =\n                         hd (filter\n                              (\\<lambda>sn. repNodes_eq sn p low high rep)\n                              ns) \\<and>\n                         var nodeslist = var p\n 3. \\<And>var low high rep p ns lowa higha repa next pa nodeslist.\n       \\<lbrakk>\\<exists>prx sfx.\n                   List nodeslist next sfx \\<and>\n                   ns = prx @ sfx \\<and>\n                   \\<not> isLeaf_pt pa lowa higha \\<and>\n                   (\\<forall>no\\<in>set ns.\n                       no \\<noteq> Null \\<and>\n                       (low no = Null) = (high no = Null) \\<and>\n                       (isLeaf_pt p low high \\<longrightarrow>\n                        isLeaf_pt no low high) \\<and>\n                       var no = var p) \\<and>\n                   p \\<in> set ns \\<and>\n                   ((\\<exists>pt\\<in>set prx.\n                        repNodes_eq pt p low high rep) \\<longrightarrow>\n                    repa p =\n                    hd (filter (\\<lambda>sn. repNodes_eq sn p low high rep)\n                         prx) \\<and>\n                    (\\<forall>pt.\n                        pt \\<noteq> p \\<longrightarrow>\n                        rep pt = repa pt)) \\<and>\n                   ((\\<forall>pt\\<in>set prx.\n                        \\<not> repNodes_eq pt p low high\n                                rep) \\<longrightarrow>\n                    rep = repa) \\<and>\n                   (nodeslist \\<noteq> Null \\<longrightarrow>\n                    (\\<forall>pt\\<in>set prx.\n                        \\<not> repNodes_eq pt p low high rep)) \\<and>\n                   pa = p \\<and> higha = high \\<and> lowa = low;\n        nodeslist \\<noteq> Null\\<rbrakk>\n       \\<Longrightarrow> (repNodes_eq nodeslist pa lowa higha\n                           repa \\<longrightarrow>\n                          length (list Null next)\n                          < length (list nodeslist next) \\<and>\n                          (\\<exists>prx sfx.\n                              List Null next sfx \\<and>\n                              ns = prx @ sfx \\<and>\n                              \\<not> isLeaf_pt pa lowa higha \\<and>\n                              (\\<forall>no\\<in>set ns.\n                                  no \\<noteq> Null \\<and>\n                                  (low no = Null) = (high no = Null) \\<and>\n                                  (isLeaf_pt p low high \\<longrightarrow>\n                                   isLeaf_pt no low high) \\<and>\n                                  var no = var p) \\<and>\n                              p \\<in> set ns \\<and>\n                              ((\\<exists>pt\\<in>set prx.\n                                   repNodes_eq pt p low high\n                                    rep) \\<longrightarrow>\n                               (repa(pa := nodeslist)) p =\n                               hd (filter\n                                    (\\<lambda>sn.\n  repNodes_eq sn p low high rep)\n                                    prx) \\<and>\n                               (\\<forall>pt.\n                                   pt \\<noteq> p \\<longrightarrow>\n                                   rep pt =\n                                   (repa(pa := nodeslist)) pt)) \\<and>\n                              ((\\<forall>pt\\<in>set prx.\n                                   \\<not> repNodes_eq pt p low high\n     rep) \\<longrightarrow>\n                               rep = repa(pa := nodeslist)) \\<and>\n                              (Null \\<noteq> Null \\<longrightarrow>\n                               (\\<forall>pt\\<in>set prx.\n                                   \\<not> repNodes_eq pt p low high\n     rep)) \\<and>\n                              pa = p \\<and>\n                              higha = high \\<and> lowa = low)) \\<and>\n                         (\\<not> repNodes_eq nodeslist pa lowa higha\n                                  repa \\<longrightarrow>\n                          length (list (next nodeslist) next)\n                          < length (list nodeslist next) \\<and>\n                          (\\<exists>prx sfx.\n                              List (next nodeslist) next sfx \\<and>\n                              ns = prx @ sfx \\<and>\n                              \\<not> isLeaf_pt pa lowa higha \\<and>\n                              (\\<forall>no\\<in>set ns.\n                                  no \\<noteq> Null \\<and>\n                                  (low no = Null) = (high no = Null) \\<and>\n                                  (isLeaf_pt p low high \\<longrightarrow>\n                                   isLeaf_pt no low high) \\<and>\n                                  var no = var p) \\<and>\n                              p \\<in> set ns \\<and>\n                              ((\\<exists>pt\\<in>set prx.\n                                   repNodes_eq pt p low high\n                                    rep) \\<longrightarrow>\n                               repa p =\n                               hd (filter\n                                    (\\<lambda>sn.\n  repNodes_eq sn p low high rep)\n                                    prx) \\<and>\n                               (\\<forall>pt.\n                                   pt \\<noteq> p \\<longrightarrow>\n                                   rep pt = repa pt)) \\<and>\n                              ((\\<forall>pt\\<in>set prx.\n                                   \\<not> repNodes_eq pt p low high\n     rep) \\<longrightarrow>\n                               rep = repa) \\<and>\n                              (next nodeslist \\<noteq>\n                               Null \\<longrightarrow>\n                               (\\<forall>pt\\<in>set prx.\n                                   \\<not> repNodes_eq pt p low high\n     rep)) \\<and>\n                              pa = p \\<and> higha = high \\<and> lowa = low))\n 4. \\<And>var low high rep p ns lowa higha repa next pa nodeslist.\n       \\<lbrakk>\\<exists>prx sfx.\n                   List nodeslist next sfx \\<and>\n                   ns = prx @ sfx \\<and>\n                   \\<not> isLeaf_pt pa lowa higha \\<and>\n                   (\\<forall>no\\<in>set ns.\n                       no \\<noteq> Null \\<and>\n                       (low no = Null) = (high no = Null) \\<and>\n                       (isLeaf_pt p low high \\<longrightarrow>\n                        isLeaf_pt no low high) \\<and>\n                       var no = var p) \\<and>\n                   p \\<in> set ns \\<and>\n                   ((\\<exists>pt\\<in>set prx.\n                        repNodes_eq pt p low high rep) \\<longrightarrow>\n                    repa p =\n                    hd (filter (\\<lambda>sn. repNodes_eq sn p low high rep)\n                         prx) \\<and>\n                    (\\<forall>pt.\n                        pt \\<noteq> p \\<longrightarrow>\n                        rep pt = repa pt)) \\<and>\n                   ((\\<forall>pt\\<in>set prx.\n                        \\<not> repNodes_eq pt p low high\n                                rep) \\<longrightarrow>\n                    rep = repa) \\<and>\n                   (nodeslist \\<noteq> Null \\<longrightarrow>\n                    (\\<forall>pt\\<in>set prx.\n                        \\<not> repNodes_eq pt p low high rep)) \\<and>\n                   pa = p \\<and> higha = high \\<and> lowa = low;\n        \\<not> nodeslist \\<noteq> Null\\<rbrakk>\n       \\<Longrightarrow> repa p =\n                         hd (filter\n                              (\\<lambda>sn. repNodes_eq sn p low high rep)\n                              ns) \\<and>\n                         (\\<forall>pt.\n                             pt \\<noteq> p \\<longrightarrow>\n                             rep pt = repa pt) \\<and>\n                         var (repa p) = var p", "apply    clarify"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>ns var low high rep next p nodeslist.\n       \\<lbrakk>List nodeslist next ns;\n        \\<forall>no\\<in>set ns.\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           (isLeaf_pt p low high \\<longrightarrow>\n            isLeaf_pt no low high) \\<and>\n           var no = var p;\n        p \\<in> set ns; \\<not> isLeaf_pt p low high\\<rbrakk>\n       \\<Longrightarrow> \\<exists>prx sfx.\n                            List nodeslist next sfx \\<and>\n                            ns = prx @ sfx \\<and>\n                            \\<not> isLeaf_pt p low high \\<and>\n                            (\\<forall>no\\<in>set ns.\n                                no \\<noteq> Null \\<and>\n                                (low no = Null) = (high no = Null) \\<and>\n                                (isLeaf_pt p low high \\<longrightarrow>\n                                 isLeaf_pt no low high) \\<and>\n                                var no = var p) \\<and>\n                            p \\<in> set ns \\<and>\n                            ((\\<exists>pt\\<in>set prx.\n                                 repNodes_eq pt p low high\n                                  rep) \\<longrightarrow>\n                             rep p =\n                             hd (filter\n                                  (\\<lambda>sn.\nrepNodes_eq sn p low high rep)\n                                  prx) \\<and>\n                             (\\<forall>pt.\n                                 pt \\<noteq> p \\<longrightarrow>\n                                 rep pt = rep pt)) \\<and>\n                            ((\\<forall>pt\\<in>set prx.\n                                 \\<not> repNodes_eq pt p low high\n   rep) \\<longrightarrow>\n                             rep = rep) \\<and>\n                            (nodeslist \\<noteq> Null \\<longrightarrow>\n                             (\\<forall>pt\\<in>set prx.\n                                 \\<not> repNodes_eq pt p low high\n   rep)) \\<and>\n                            p = p \\<and> high = high \\<and> low = low\n 2. \\<And>ns var low high rep next p nodeslist.\n       \\<lbrakk>List nodeslist next ns;\n        \\<forall>no\\<in>set ns.\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           (isLeaf_pt p low high \\<longrightarrow>\n            isLeaf_pt no low high) \\<and>\n           var no = var p;\n        p \\<in> set ns; isLeaf_pt p low high\\<rbrakk>\n       \\<Longrightarrow> nodeslist =\n                         hd (filter\n                              (\\<lambda>sn. repNodes_eq sn p low high rep)\n                              ns) \\<and>\n                         var nodeslist = var p\n 3. \\<And>var low high rep p ns lowa higha repa next pa nodeslist.\n       \\<lbrakk>\\<exists>prx sfx.\n                   List nodeslist next sfx \\<and>\n                   ns = prx @ sfx \\<and>\n                   \\<not> isLeaf_pt pa lowa higha \\<and>\n                   (\\<forall>no\\<in>set ns.\n                       no \\<noteq> Null \\<and>\n                       (low no = Null) = (high no = Null) \\<and>\n                       (isLeaf_pt p low high \\<longrightarrow>\n                        isLeaf_pt no low high) \\<and>\n                       var no = var p) \\<and>\n                   p \\<in> set ns \\<and>\n                   ((\\<exists>pt\\<in>set prx.\n                        repNodes_eq pt p low high rep) \\<longrightarrow>\n                    repa p =\n                    hd (filter (\\<lambda>sn. repNodes_eq sn p low high rep)\n                         prx) \\<and>\n                    (\\<forall>pt.\n                        pt \\<noteq> p \\<longrightarrow>\n                        rep pt = repa pt)) \\<and>\n                   ((\\<forall>pt\\<in>set prx.\n                        \\<not> repNodes_eq pt p low high\n                                rep) \\<longrightarrow>\n                    rep = repa) \\<and>\n                   (nodeslist \\<noteq> Null \\<longrightarrow>\n                    (\\<forall>pt\\<in>set prx.\n                        \\<not> repNodes_eq pt p low high rep)) \\<and>\n                   pa = p \\<and> higha = high \\<and> lowa = low;\n        nodeslist \\<noteq> Null\\<rbrakk>\n       \\<Longrightarrow> (repNodes_eq nodeslist pa lowa higha\n                           repa \\<longrightarrow>\n                          length (list Null next)\n                          < length (list nodeslist next) \\<and>\n                          (\\<exists>prx sfx.\n                              List Null next sfx \\<and>\n                              ns = prx @ sfx \\<and>\n                              \\<not> isLeaf_pt pa lowa higha \\<and>\n                              (\\<forall>no\\<in>set ns.\n                                  no \\<noteq> Null \\<and>\n                                  (low no = Null) = (high no = Null) \\<and>\n                                  (isLeaf_pt p low high \\<longrightarrow>\n                                   isLeaf_pt no low high) \\<and>\n                                  var no = var p) \\<and>\n                              p \\<in> set ns \\<and>\n                              ((\\<exists>pt\\<in>set prx.\n                                   repNodes_eq pt p low high\n                                    rep) \\<longrightarrow>\n                               (repa(pa := nodeslist)) p =\n                               hd (filter\n                                    (\\<lambda>sn.\n  repNodes_eq sn p low high rep)\n                                    prx) \\<and>\n                               (\\<forall>pt.\n                                   pt \\<noteq> p \\<longrightarrow>\n                                   rep pt =\n                                   (repa(pa := nodeslist)) pt)) \\<and>\n                              ((\\<forall>pt\\<in>set prx.\n                                   \\<not> repNodes_eq pt p low high\n     rep) \\<longrightarrow>\n                               rep = repa(pa := nodeslist)) \\<and>\n                              (Null \\<noteq> Null \\<longrightarrow>\n                               (\\<forall>pt\\<in>set prx.\n                                   \\<not> repNodes_eq pt p low high\n     rep)) \\<and>\n                              pa = p \\<and>\n                              higha = high \\<and> lowa = low)) \\<and>\n                         (\\<not> repNodes_eq nodeslist pa lowa higha\n                                  repa \\<longrightarrow>\n                          length (list (next nodeslist) next)\n                          < length (list nodeslist next) \\<and>\n                          (\\<exists>prx sfx.\n                              List (next nodeslist) next sfx \\<and>\n                              ns = prx @ sfx \\<and>\n                              \\<not> isLeaf_pt pa lowa higha \\<and>\n                              (\\<forall>no\\<in>set ns.\n                                  no \\<noteq> Null \\<and>\n                                  (low no = Null) = (high no = Null) \\<and>\n                                  (isLeaf_pt p low high \\<longrightarrow>\n                                   isLeaf_pt no low high) \\<and>\n                                  var no = var p) \\<and>\n                              p \\<in> set ns \\<and>\n                              ((\\<exists>pt\\<in>set prx.\n                                   repNodes_eq pt p low high\n                                    rep) \\<longrightarrow>\n                               repa p =\n                               hd (filter\n                                    (\\<lambda>sn.\n  repNodes_eq sn p low high rep)\n                                    prx) \\<and>\n                               (\\<forall>pt.\n                                   pt \\<noteq> p \\<longrightarrow>\n                                   rep pt = repa pt)) \\<and>\n                              ((\\<forall>pt\\<in>set prx.\n                                   \\<not> repNodes_eq pt p low high\n     rep) \\<longrightarrow>\n                               rep = repa) \\<and>\n                              (next nodeslist \\<noteq>\n                               Null \\<longrightarrow>\n                               (\\<forall>pt\\<in>set prx.\n                                   \\<not> repNodes_eq pt p low high\n     rep)) \\<and>\n                              pa = p \\<and> higha = high \\<and> lowa = low))\n 4. \\<And>var low high rep p ns lowa higha repa next pa nodeslist.\n       \\<lbrakk>\\<exists>prx sfx.\n                   List nodeslist next sfx \\<and>\n                   ns = prx @ sfx \\<and>\n                   \\<not> isLeaf_pt pa lowa higha \\<and>\n                   (\\<forall>no\\<in>set ns.\n                       no \\<noteq> Null \\<and>\n                       (low no = Null) = (high no = Null) \\<and>\n                       (isLeaf_pt p low high \\<longrightarrow>\n                        isLeaf_pt no low high) \\<and>\n                       var no = var p) \\<and>\n                   p \\<in> set ns \\<and>\n                   ((\\<exists>pt\\<in>set prx.\n                        repNodes_eq pt p low high rep) \\<longrightarrow>\n                    repa p =\n                    hd (filter (\\<lambda>sn. repNodes_eq sn p low high rep)\n                         prx) \\<and>\n                    (\\<forall>pt.\n                        pt \\<noteq> p \\<longrightarrow>\n                        rep pt = repa pt)) \\<and>\n                   ((\\<forall>pt\\<in>set prx.\n                        \\<not> repNodes_eq pt p low high\n                                rep) \\<longrightarrow>\n                    rep = repa) \\<and>\n                   (nodeslist \\<noteq> Null \\<longrightarrow>\n                    (\\<forall>pt\\<in>set prx.\n                        \\<not> repNodes_eq pt p low high rep)) \\<and>\n                   pa = p \\<and> higha = high \\<and> lowa = low;\n        \\<not> nodeslist \\<noteq> Null\\<rbrakk>\n       \\<Longrightarrow> repa p =\n                         hd (filter\n                              (\\<lambda>sn. repNodes_eq sn p low high rep)\n                              ns) \\<and>\n                         (\\<forall>pt.\n                             pt \\<noteq> p \\<longrightarrow>\n                             rep pt = repa pt) \\<and>\n                         var (repa p) = var p", "apply    (rule_tac x=\"[]\" in exI)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>ns var low high rep next p nodeslist.\n       \\<lbrakk>List nodeslist next ns;\n        \\<forall>no\\<in>set ns.\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           (isLeaf_pt p low high \\<longrightarrow>\n            isLeaf_pt no low high) \\<and>\n           var no = var p;\n        p \\<in> set ns; \\<not> isLeaf_pt p low high\\<rbrakk>\n       \\<Longrightarrow> \\<exists>sfx.\n                            List nodeslist next sfx \\<and>\n                            ns = [] @ sfx \\<and>\n                            \\<not> isLeaf_pt p low high \\<and>\n                            (\\<forall>no\\<in>set ns.\n                                no \\<noteq> Null \\<and>\n                                (low no = Null) = (high no = Null) \\<and>\n                                (isLeaf_pt p low high \\<longrightarrow>\n                                 isLeaf_pt no low high) \\<and>\n                                var no = var p) \\<and>\n                            p \\<in> set ns \\<and>\n                            ((\\<exists>pt\\<in>set [].\n                                 repNodes_eq pt p low high\n                                  rep) \\<longrightarrow>\n                             rep p =\n                             hd (filter\n                                  (\\<lambda>sn.\nrepNodes_eq sn p low high rep)\n                                  []) \\<and>\n                             (\\<forall>pt.\n                                 pt \\<noteq> p \\<longrightarrow>\n                                 rep pt = rep pt)) \\<and>\n                            ((\\<forall>pt\\<in>set [].\n                                 \\<not> repNodes_eq pt p low high\n   rep) \\<longrightarrow>\n                             rep = rep) \\<and>\n                            (nodeslist \\<noteq> Null \\<longrightarrow>\n                             (\\<forall>pt\\<in>set [].\n                                 \\<not> repNodes_eq pt p low high\n   rep)) \\<and>\n                            p = p \\<and> high = high \\<and> low = low\n 2. \\<And>ns var low high rep next p nodeslist.\n       \\<lbrakk>List nodeslist next ns;\n        \\<forall>no\\<in>set ns.\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           (isLeaf_pt p low high \\<longrightarrow>\n            isLeaf_pt no low high) \\<and>\n           var no = var p;\n        p \\<in> set ns; isLeaf_pt p low high\\<rbrakk>\n       \\<Longrightarrow> nodeslist =\n                         hd (filter\n                              (\\<lambda>sn. repNodes_eq sn p low high rep)\n                              ns) \\<and>\n                         var nodeslist = var p\n 3. \\<And>var low high rep p ns lowa higha repa next pa nodeslist.\n       \\<lbrakk>\\<exists>prx sfx.\n                   List nodeslist next sfx \\<and>\n                   ns = prx @ sfx \\<and>\n                   \\<not> isLeaf_pt pa lowa higha \\<and>\n                   (\\<forall>no\\<in>set ns.\n                       no \\<noteq> Null \\<and>\n                       (low no = Null) = (high no = Null) \\<and>\n                       (isLeaf_pt p low high \\<longrightarrow>\n                        isLeaf_pt no low high) \\<and>\n                       var no = var p) \\<and>\n                   p \\<in> set ns \\<and>\n                   ((\\<exists>pt\\<in>set prx.\n                        repNodes_eq pt p low high rep) \\<longrightarrow>\n                    repa p =\n                    hd (filter (\\<lambda>sn. repNodes_eq sn p low high rep)\n                         prx) \\<and>\n                    (\\<forall>pt.\n                        pt \\<noteq> p \\<longrightarrow>\n                        rep pt = repa pt)) \\<and>\n                   ((\\<forall>pt\\<in>set prx.\n                        \\<not> repNodes_eq pt p low high\n                                rep) \\<longrightarrow>\n                    rep = repa) \\<and>\n                   (nodeslist \\<noteq> Null \\<longrightarrow>\n                    (\\<forall>pt\\<in>set prx.\n                        \\<not> repNodes_eq pt p low high rep)) \\<and>\n                   pa = p \\<and> higha = high \\<and> lowa = low;\n        nodeslist \\<noteq> Null\\<rbrakk>\n       \\<Longrightarrow> (repNodes_eq nodeslist pa lowa higha\n                           repa \\<longrightarrow>\n                          length (list Null next)\n                          < length (list nodeslist next) \\<and>\n                          (\\<exists>prx sfx.\n                              List Null next sfx \\<and>\n                              ns = prx @ sfx \\<and>\n                              \\<not> isLeaf_pt pa lowa higha \\<and>\n                              (\\<forall>no\\<in>set ns.\n                                  no \\<noteq> Null \\<and>\n                                  (low no = Null) = (high no = Null) \\<and>\n                                  (isLeaf_pt p low high \\<longrightarrow>\n                                   isLeaf_pt no low high) \\<and>\n                                  var no = var p) \\<and>\n                              p \\<in> set ns \\<and>\n                              ((\\<exists>pt\\<in>set prx.\n                                   repNodes_eq pt p low high\n                                    rep) \\<longrightarrow>\n                               (repa(pa := nodeslist)) p =\n                               hd (filter\n                                    (\\<lambda>sn.\n  repNodes_eq sn p low high rep)\n                                    prx) \\<and>\n                               (\\<forall>pt.\n                                   pt \\<noteq> p \\<longrightarrow>\n                                   rep pt =\n                                   (repa(pa := nodeslist)) pt)) \\<and>\n                              ((\\<forall>pt\\<in>set prx.\n                                   \\<not> repNodes_eq pt p low high\n     rep) \\<longrightarrow>\n                               rep = repa(pa := nodeslist)) \\<and>\n                              (Null \\<noteq> Null \\<longrightarrow>\n                               (\\<forall>pt\\<in>set prx.\n                                   \\<not> repNodes_eq pt p low high\n     rep)) \\<and>\n                              pa = p \\<and>\n                              higha = high \\<and> lowa = low)) \\<and>\n                         (\\<not> repNodes_eq nodeslist pa lowa higha\n                                  repa \\<longrightarrow>\n                          length (list (next nodeslist) next)\n                          < length (list nodeslist next) \\<and>\n                          (\\<exists>prx sfx.\n                              List (next nodeslist) next sfx \\<and>\n                              ns = prx @ sfx \\<and>\n                              \\<not> isLeaf_pt pa lowa higha \\<and>\n                              (\\<forall>no\\<in>set ns.\n                                  no \\<noteq> Null \\<and>\n                                  (low no = Null) = (high no = Null) \\<and>\n                                  (isLeaf_pt p low high \\<longrightarrow>\n                                   isLeaf_pt no low high) \\<and>\n                                  var no = var p) \\<and>\n                              p \\<in> set ns \\<and>\n                              ((\\<exists>pt\\<in>set prx.\n                                   repNodes_eq pt p low high\n                                    rep) \\<longrightarrow>\n                               repa p =\n                               hd (filter\n                                    (\\<lambda>sn.\n  repNodes_eq sn p low high rep)\n                                    prx) \\<and>\n                               (\\<forall>pt.\n                                   pt \\<noteq> p \\<longrightarrow>\n                                   rep pt = repa pt)) \\<and>\n                              ((\\<forall>pt\\<in>set prx.\n                                   \\<not> repNodes_eq pt p low high\n     rep) \\<longrightarrow>\n                               rep = repa) \\<and>\n                              (next nodeslist \\<noteq>\n                               Null \\<longrightarrow>\n                               (\\<forall>pt\\<in>set prx.\n                                   \\<not> repNodes_eq pt p low high\n     rep)) \\<and>\n                              pa = p \\<and> higha = high \\<and> lowa = low))\n 4. \\<And>var low high rep p ns lowa higha repa next pa nodeslist.\n       \\<lbrakk>\\<exists>prx sfx.\n                   List nodeslist next sfx \\<and>\n                   ns = prx @ sfx \\<and>\n                   \\<not> isLeaf_pt pa lowa higha \\<and>\n                   (\\<forall>no\\<in>set ns.\n                       no \\<noteq> Null \\<and>\n                       (low no = Null) = (high no = Null) \\<and>\n                       (isLeaf_pt p low high \\<longrightarrow>\n                        isLeaf_pt no low high) \\<and>\n                       var no = var p) \\<and>\n                   p \\<in> set ns \\<and>\n                   ((\\<exists>pt\\<in>set prx.\n                        repNodes_eq pt p low high rep) \\<longrightarrow>\n                    repa p =\n                    hd (filter (\\<lambda>sn. repNodes_eq sn p low high rep)\n                         prx) \\<and>\n                    (\\<forall>pt.\n                        pt \\<noteq> p \\<longrightarrow>\n                        rep pt = repa pt)) \\<and>\n                   ((\\<forall>pt\\<in>set prx.\n                        \\<not> repNodes_eq pt p low high\n                                rep) \\<longrightarrow>\n                    rep = repa) \\<and>\n                   (nodeslist \\<noteq> Null \\<longrightarrow>\n                    (\\<forall>pt\\<in>set prx.\n                        \\<not> repNodes_eq pt p low high rep)) \\<and>\n                   pa = p \\<and> higha = high \\<and> lowa = low;\n        \\<not> nodeslist \\<noteq> Null\\<rbrakk>\n       \\<Longrightarrow> repa p =\n                         hd (filter\n                              (\\<lambda>sn. repNodes_eq sn p low high rep)\n                              ns) \\<and>\n                         (\\<forall>pt.\n                             pt \\<noteq> p \\<longrightarrow>\n                             rep pt = repa pt) \\<and>\n                         var (repa p) = var p", "apply    (rule_tac x=ns in exI)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>ns var low high rep next p nodeslist.\n       \\<lbrakk>List nodeslist next ns;\n        \\<forall>no\\<in>set ns.\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           (isLeaf_pt p low high \\<longrightarrow>\n            isLeaf_pt no low high) \\<and>\n           var no = var p;\n        p \\<in> set ns; \\<not> isLeaf_pt p low high\\<rbrakk>\n       \\<Longrightarrow> List nodeslist next ns \\<and>\n                         ns = [] @ ns \\<and>\n                         \\<not> isLeaf_pt p low high \\<and>\n                         (\\<forall>no\\<in>set ns.\n                             no \\<noteq> Null \\<and>\n                             (low no = Null) = (high no = Null) \\<and>\n                             (isLeaf_pt p low high \\<longrightarrow>\n                              isLeaf_pt no low high) \\<and>\n                             var no = var p) \\<and>\n                         p \\<in> set ns \\<and>\n                         ((\\<exists>pt\\<in>set [].\n                              repNodes_eq pt p low high\n                               rep) \\<longrightarrow>\n                          rep p =\n                          hd (filter\n                               (\\<lambda>sn. repNodes_eq sn p low high rep)\n                               []) \\<and>\n                          (\\<forall>pt.\n                              pt \\<noteq> p \\<longrightarrow>\n                              rep pt = rep pt)) \\<and>\n                         ((\\<forall>pt\\<in>set [].\n                              \\<not> repNodes_eq pt p low high\nrep) \\<longrightarrow>\n                          rep = rep) \\<and>\n                         (nodeslist \\<noteq> Null \\<longrightarrow>\n                          (\\<forall>pt\\<in>set [].\n                              \\<not> repNodes_eq pt p low high rep)) \\<and>\n                         p = p \\<and> high = high \\<and> low = low\n 2. \\<And>ns var low high rep next p nodeslist.\n       \\<lbrakk>List nodeslist next ns;\n        \\<forall>no\\<in>set ns.\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           (isLeaf_pt p low high \\<longrightarrow>\n            isLeaf_pt no low high) \\<and>\n           var no = var p;\n        p \\<in> set ns; isLeaf_pt p low high\\<rbrakk>\n       \\<Longrightarrow> nodeslist =\n                         hd (filter\n                              (\\<lambda>sn. repNodes_eq sn p low high rep)\n                              ns) \\<and>\n                         var nodeslist = var p\n 3. \\<And>var low high rep p ns lowa higha repa next pa nodeslist.\n       \\<lbrakk>\\<exists>prx sfx.\n                   List nodeslist next sfx \\<and>\n                   ns = prx @ sfx \\<and>\n                   \\<not> isLeaf_pt pa lowa higha \\<and>\n                   (\\<forall>no\\<in>set ns.\n                       no \\<noteq> Null \\<and>\n                       (low no = Null) = (high no = Null) \\<and>\n                       (isLeaf_pt p low high \\<longrightarrow>\n                        isLeaf_pt no low high) \\<and>\n                       var no = var p) \\<and>\n                   p \\<in> set ns \\<and>\n                   ((\\<exists>pt\\<in>set prx.\n                        repNodes_eq pt p low high rep) \\<longrightarrow>\n                    repa p =\n                    hd (filter (\\<lambda>sn. repNodes_eq sn p low high rep)\n                         prx) \\<and>\n                    (\\<forall>pt.\n                        pt \\<noteq> p \\<longrightarrow>\n                        rep pt = repa pt)) \\<and>\n                   ((\\<forall>pt\\<in>set prx.\n                        \\<not> repNodes_eq pt p low high\n                                rep) \\<longrightarrow>\n                    rep = repa) \\<and>\n                   (nodeslist \\<noteq> Null \\<longrightarrow>\n                    (\\<forall>pt\\<in>set prx.\n                        \\<not> repNodes_eq pt p low high rep)) \\<and>\n                   pa = p \\<and> higha = high \\<and> lowa = low;\n        nodeslist \\<noteq> Null\\<rbrakk>\n       \\<Longrightarrow> (repNodes_eq nodeslist pa lowa higha\n                           repa \\<longrightarrow>\n                          length (list Null next)\n                          < length (list nodeslist next) \\<and>\n                          (\\<exists>prx sfx.\n                              List Null next sfx \\<and>\n                              ns = prx @ sfx \\<and>\n                              \\<not> isLeaf_pt pa lowa higha \\<and>\n                              (\\<forall>no\\<in>set ns.\n                                  no \\<noteq> Null \\<and>\n                                  (low no = Null) = (high no = Null) \\<and>\n                                  (isLeaf_pt p low high \\<longrightarrow>\n                                   isLeaf_pt no low high) \\<and>\n                                  var no = var p) \\<and>\n                              p \\<in> set ns \\<and>\n                              ((\\<exists>pt\\<in>set prx.\n                                   repNodes_eq pt p low high\n                                    rep) \\<longrightarrow>\n                               (repa(pa := nodeslist)) p =\n                               hd (filter\n                                    (\\<lambda>sn.\n  repNodes_eq sn p low high rep)\n                                    prx) \\<and>\n                               (\\<forall>pt.\n                                   pt \\<noteq> p \\<longrightarrow>\n                                   rep pt =\n                                   (repa(pa := nodeslist)) pt)) \\<and>\n                              ((\\<forall>pt\\<in>set prx.\n                                   \\<not> repNodes_eq pt p low high\n     rep) \\<longrightarrow>\n                               rep = repa(pa := nodeslist)) \\<and>\n                              (Null \\<noteq> Null \\<longrightarrow>\n                               (\\<forall>pt\\<in>set prx.\n                                   \\<not> repNodes_eq pt p low high\n     rep)) \\<and>\n                              pa = p \\<and>\n                              higha = high \\<and> lowa = low)) \\<and>\n                         (\\<not> repNodes_eq nodeslist pa lowa higha\n                                  repa \\<longrightarrow>\n                          length (list (next nodeslist) next)\n                          < length (list nodeslist next) \\<and>\n                          (\\<exists>prx sfx.\n                              List (next nodeslist) next sfx \\<and>\n                              ns = prx @ sfx \\<and>\n                              \\<not> isLeaf_pt pa lowa higha \\<and>\n                              (\\<forall>no\\<in>set ns.\n                                  no \\<noteq> Null \\<and>\n                                  (low no = Null) = (high no = Null) \\<and>\n                                  (isLeaf_pt p low high \\<longrightarrow>\n                                   isLeaf_pt no low high) \\<and>\n                                  var no = var p) \\<and>\n                              p \\<in> set ns \\<and>\n                              ((\\<exists>pt\\<in>set prx.\n                                   repNodes_eq pt p low high\n                                    rep) \\<longrightarrow>\n                               repa p =\n                               hd (filter\n                                    (\\<lambda>sn.\n  repNodes_eq sn p low high rep)\n                                    prx) \\<and>\n                               (\\<forall>pt.\n                                   pt \\<noteq> p \\<longrightarrow>\n                                   rep pt = repa pt)) \\<and>\n                              ((\\<forall>pt\\<in>set prx.\n                                   \\<not> repNodes_eq pt p low high\n     rep) \\<longrightarrow>\n                               rep = repa) \\<and>\n                              (next nodeslist \\<noteq>\n                               Null \\<longrightarrow>\n                               (\\<forall>pt\\<in>set prx.\n                                   \\<not> repNodes_eq pt p low high\n     rep)) \\<and>\n                              pa = p \\<and> higha = high \\<and> lowa = low))\n 4. \\<And>var low high rep p ns lowa higha repa next pa nodeslist.\n       \\<lbrakk>\\<exists>prx sfx.\n                   List nodeslist next sfx \\<and>\n                   ns = prx @ sfx \\<and>\n                   \\<not> isLeaf_pt pa lowa higha \\<and>\n                   (\\<forall>no\\<in>set ns.\n                       no \\<noteq> Null \\<and>\n                       (low no = Null) = (high no = Null) \\<and>\n                       (isLeaf_pt p low high \\<longrightarrow>\n                        isLeaf_pt no low high) \\<and>\n                       var no = var p) \\<and>\n                   p \\<in> set ns \\<and>\n                   ((\\<exists>pt\\<in>set prx.\n                        repNodes_eq pt p low high rep) \\<longrightarrow>\n                    repa p =\n                    hd (filter (\\<lambda>sn. repNodes_eq sn p low high rep)\n                         prx) \\<and>\n                    (\\<forall>pt.\n                        pt \\<noteq> p \\<longrightarrow>\n                        rep pt = repa pt)) \\<and>\n                   ((\\<forall>pt\\<in>set prx.\n                        \\<not> repNodes_eq pt p low high\n                                rep) \\<longrightarrow>\n                    rep = repa) \\<and>\n                   (nodeslist \\<noteq> Null \\<longrightarrow>\n                    (\\<forall>pt\\<in>set prx.\n                        \\<not> repNodes_eq pt p low high rep)) \\<and>\n                   pa = p \\<and> higha = high \\<and> lowa = low;\n        \\<not> nodeslist \\<noteq> Null\\<rbrakk>\n       \\<Longrightarrow> repa p =\n                         hd (filter\n                              (\\<lambda>sn. repNodes_eq sn p low high rep)\n                              ns) \\<and>\n                         (\\<forall>pt.\n                             pt \\<noteq> p \\<longrightarrow>\n                             rep pt = repa pt) \\<and>\n                         var (repa p) = var p", "apply    (simp (no_asm_use))"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>ns var low high rep next p nodeslist.\n       \\<lbrakk>List nodeslist next ns;\n        \\<forall>no\\<in>set ns.\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           (isLeaf_pt p low high \\<longrightarrow>\n            isLeaf_pt no low high) \\<and>\n           var no = var p;\n        p \\<in> set ns; isLeaf_pt p low high\\<rbrakk>\n       \\<Longrightarrow> nodeslist =\n                         hd (filter\n                              (\\<lambda>sn. repNodes_eq sn p low high rep)\n                              ns) \\<and>\n                         var nodeslist = var p\n 2. \\<And>var low high rep p ns lowa higha repa next pa nodeslist.\n       \\<lbrakk>\\<exists>prx sfx.\n                   List nodeslist next sfx \\<and>\n                   ns = prx @ sfx \\<and>\n                   \\<not> isLeaf_pt pa lowa higha \\<and>\n                   (\\<forall>no\\<in>set ns.\n                       no \\<noteq> Null \\<and>\n                       (low no = Null) = (high no = Null) \\<and>\n                       (isLeaf_pt p low high \\<longrightarrow>\n                        isLeaf_pt no low high) \\<and>\n                       var no = var p) \\<and>\n                   p \\<in> set ns \\<and>\n                   ((\\<exists>pt\\<in>set prx.\n                        repNodes_eq pt p low high rep) \\<longrightarrow>\n                    repa p =\n                    hd (filter (\\<lambda>sn. repNodes_eq sn p low high rep)\n                         prx) \\<and>\n                    (\\<forall>pt.\n                        pt \\<noteq> p \\<longrightarrow>\n                        rep pt = repa pt)) \\<and>\n                   ((\\<forall>pt\\<in>set prx.\n                        \\<not> repNodes_eq pt p low high\n                                rep) \\<longrightarrow>\n                    rep = repa) \\<and>\n                   (nodeslist \\<noteq> Null \\<longrightarrow>\n                    (\\<forall>pt\\<in>set prx.\n                        \\<not> repNodes_eq pt p low high rep)) \\<and>\n                   pa = p \\<and> higha = high \\<and> lowa = low;\n        nodeslist \\<noteq> Null\\<rbrakk>\n       \\<Longrightarrow> (repNodes_eq nodeslist pa lowa higha\n                           repa \\<longrightarrow>\n                          length (list Null next)\n                          < length (list nodeslist next) \\<and>\n                          (\\<exists>prx sfx.\n                              List Null next sfx \\<and>\n                              ns = prx @ sfx \\<and>\n                              \\<not> isLeaf_pt pa lowa higha \\<and>\n                              (\\<forall>no\\<in>set ns.\n                                  no \\<noteq> Null \\<and>\n                                  (low no = Null) = (high no = Null) \\<and>\n                                  (isLeaf_pt p low high \\<longrightarrow>\n                                   isLeaf_pt no low high) \\<and>\n                                  var no = var p) \\<and>\n                              p \\<in> set ns \\<and>\n                              ((\\<exists>pt\\<in>set prx.\n                                   repNodes_eq pt p low high\n                                    rep) \\<longrightarrow>\n                               (repa(pa := nodeslist)) p =\n                               hd (filter\n                                    (\\<lambda>sn.\n  repNodes_eq sn p low high rep)\n                                    prx) \\<and>\n                               (\\<forall>pt.\n                                   pt \\<noteq> p \\<longrightarrow>\n                                   rep pt =\n                                   (repa(pa := nodeslist)) pt)) \\<and>\n                              ((\\<forall>pt\\<in>set prx.\n                                   \\<not> repNodes_eq pt p low high\n     rep) \\<longrightarrow>\n                               rep = repa(pa := nodeslist)) \\<and>\n                              (Null \\<noteq> Null \\<longrightarrow>\n                               (\\<forall>pt\\<in>set prx.\n                                   \\<not> repNodes_eq pt p low high\n     rep)) \\<and>\n                              pa = p \\<and>\n                              higha = high \\<and> lowa = low)) \\<and>\n                         (\\<not> repNodes_eq nodeslist pa lowa higha\n                                  repa \\<longrightarrow>\n                          length (list (next nodeslist) next)\n                          < length (list nodeslist next) \\<and>\n                          (\\<exists>prx sfx.\n                              List (next nodeslist) next sfx \\<and>\n                              ns = prx @ sfx \\<and>\n                              \\<not> isLeaf_pt pa lowa higha \\<and>\n                              (\\<forall>no\\<in>set ns.\n                                  no \\<noteq> Null \\<and>\n                                  (low no = Null) = (high no = Null) \\<and>\n                                  (isLeaf_pt p low high \\<longrightarrow>\n                                   isLeaf_pt no low high) \\<and>\n                                  var no = var p) \\<and>\n                              p \\<in> set ns \\<and>\n                              ((\\<exists>pt\\<in>set prx.\n                                   repNodes_eq pt p low high\n                                    rep) \\<longrightarrow>\n                               repa p =\n                               hd (filter\n                                    (\\<lambda>sn.\n  repNodes_eq sn p low high rep)\n                                    prx) \\<and>\n                               (\\<forall>pt.\n                                   pt \\<noteq> p \\<longrightarrow>\n                                   rep pt = repa pt)) \\<and>\n                              ((\\<forall>pt\\<in>set prx.\n                                   \\<not> repNodes_eq pt p low high\n     rep) \\<longrightarrow>\n                               rep = repa) \\<and>\n                              (next nodeslist \\<noteq>\n                               Null \\<longrightarrow>\n                               (\\<forall>pt\\<in>set prx.\n                                   \\<not> repNodes_eq pt p low high\n     rep)) \\<and>\n                              pa = p \\<and> higha = high \\<and> lowa = low))\n 3. \\<And>var low high rep p ns lowa higha repa next pa nodeslist.\n       \\<lbrakk>\\<exists>prx sfx.\n                   List nodeslist next sfx \\<and>\n                   ns = prx @ sfx \\<and>\n                   \\<not> isLeaf_pt pa lowa higha \\<and>\n                   (\\<forall>no\\<in>set ns.\n                       no \\<noteq> Null \\<and>\n                       (low no = Null) = (high no = Null) \\<and>\n                       (isLeaf_pt p low high \\<longrightarrow>\n                        isLeaf_pt no low high) \\<and>\n                       var no = var p) \\<and>\n                   p \\<in> set ns \\<and>\n                   ((\\<exists>pt\\<in>set prx.\n                        repNodes_eq pt p low high rep) \\<longrightarrow>\n                    repa p =\n                    hd (filter (\\<lambda>sn. repNodes_eq sn p low high rep)\n                         prx) \\<and>\n                    (\\<forall>pt.\n                        pt \\<noteq> p \\<longrightarrow>\n                        rep pt = repa pt)) \\<and>\n                   ((\\<forall>pt\\<in>set prx.\n                        \\<not> repNodes_eq pt p low high\n                                rep) \\<longrightarrow>\n                    rep = repa) \\<and>\n                   (nodeslist \\<noteq> Null \\<longrightarrow>\n                    (\\<forall>pt\\<in>set prx.\n                        \\<not> repNodes_eq pt p low high rep)) \\<and>\n                   pa = p \\<and> higha = high \\<and> lowa = low;\n        \\<not> nodeslist \\<noteq> Null\\<rbrakk>\n       \\<Longrightarrow> repa p =\n                         hd (filter\n                              (\\<lambda>sn. repNodes_eq sn p low high rep)\n                              ns) \\<and>\n                         (\\<forall>pt.\n                             pt \\<noteq> p \\<longrightarrow>\n                             rep pt = repa pt) \\<and>\n                         var (repa p) = var p", "prefer 2"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>var low high rep p ns lowa higha repa next pa nodeslist.\n       \\<lbrakk>\\<exists>prx sfx.\n                   List nodeslist next sfx \\<and>\n                   ns = prx @ sfx \\<and>\n                   \\<not> isLeaf_pt pa lowa higha \\<and>\n                   (\\<forall>no\\<in>set ns.\n                       no \\<noteq> Null \\<and>\n                       (low no = Null) = (high no = Null) \\<and>\n                       (isLeaf_pt p low high \\<longrightarrow>\n                        isLeaf_pt no low high) \\<and>\n                       var no = var p) \\<and>\n                   p \\<in> set ns \\<and>\n                   ((\\<exists>pt\\<in>set prx.\n                        repNodes_eq pt p low high rep) \\<longrightarrow>\n                    repa p =\n                    hd (filter (\\<lambda>sn. repNodes_eq sn p low high rep)\n                         prx) \\<and>\n                    (\\<forall>pt.\n                        pt \\<noteq> p \\<longrightarrow>\n                        rep pt = repa pt)) \\<and>\n                   ((\\<forall>pt\\<in>set prx.\n                        \\<not> repNodes_eq pt p low high\n                                rep) \\<longrightarrow>\n                    rep = repa) \\<and>\n                   (nodeslist \\<noteq> Null \\<longrightarrow>\n                    (\\<forall>pt\\<in>set prx.\n                        \\<not> repNodes_eq pt p low high rep)) \\<and>\n                   pa = p \\<and> higha = high \\<and> lowa = low;\n        nodeslist \\<noteq> Null\\<rbrakk>\n       \\<Longrightarrow> (repNodes_eq nodeslist pa lowa higha\n                           repa \\<longrightarrow>\n                          length (list Null next)\n                          < length (list nodeslist next) \\<and>\n                          (\\<exists>prx sfx.\n                              List Null next sfx \\<and>\n                              ns = prx @ sfx \\<and>\n                              \\<not> isLeaf_pt pa lowa higha \\<and>\n                              (\\<forall>no\\<in>set ns.\n                                  no \\<noteq> Null \\<and>\n                                  (low no = Null) = (high no = Null) \\<and>\n                                  (isLeaf_pt p low high \\<longrightarrow>\n                                   isLeaf_pt no low high) \\<and>\n                                  var no = var p) \\<and>\n                              p \\<in> set ns \\<and>\n                              ((\\<exists>pt\\<in>set prx.\n                                   repNodes_eq pt p low high\n                                    rep) \\<longrightarrow>\n                               (repa(pa := nodeslist)) p =\n                               hd (filter\n                                    (\\<lambda>sn.\n  repNodes_eq sn p low high rep)\n                                    prx) \\<and>\n                               (\\<forall>pt.\n                                   pt \\<noteq> p \\<longrightarrow>\n                                   rep pt =\n                                   (repa(pa := nodeslist)) pt)) \\<and>\n                              ((\\<forall>pt\\<in>set prx.\n                                   \\<not> repNodes_eq pt p low high\n     rep) \\<longrightarrow>\n                               rep = repa(pa := nodeslist)) \\<and>\n                              (Null \\<noteq> Null \\<longrightarrow>\n                               (\\<forall>pt\\<in>set prx.\n                                   \\<not> repNodes_eq pt p low high\n     rep)) \\<and>\n                              pa = p \\<and>\n                              higha = high \\<and> lowa = low)) \\<and>\n                         (\\<not> repNodes_eq nodeslist pa lowa higha\n                                  repa \\<longrightarrow>\n                          length (list (next nodeslist) next)\n                          < length (list nodeslist next) \\<and>\n                          (\\<exists>prx sfx.\n                              List (next nodeslist) next sfx \\<and>\n                              ns = prx @ sfx \\<and>\n                              \\<not> isLeaf_pt pa lowa higha \\<and>\n                              (\\<forall>no\\<in>set ns.\n                                  no \\<noteq> Null \\<and>\n                                  (low no = Null) = (high no = Null) \\<and>\n                                  (isLeaf_pt p low high \\<longrightarrow>\n                                   isLeaf_pt no low high) \\<and>\n                                  var no = var p) \\<and>\n                              p \\<in> set ns \\<and>\n                              ((\\<exists>pt\\<in>set prx.\n                                   repNodes_eq pt p low high\n                                    rep) \\<longrightarrow>\n                               repa p =\n                               hd (filter\n                                    (\\<lambda>sn.\n  repNodes_eq sn p low high rep)\n                                    prx) \\<and>\n                               (\\<forall>pt.\n                                   pt \\<noteq> p \\<longrightarrow>\n                                   rep pt = repa pt)) \\<and>\n                              ((\\<forall>pt\\<in>set prx.\n                                   \\<not> repNodes_eq pt p low high\n     rep) \\<longrightarrow>\n                               rep = repa) \\<and>\n                              (next nodeslist \\<noteq>\n                               Null \\<longrightarrow>\n                               (\\<forall>pt\\<in>set prx.\n                                   \\<not> repNodes_eq pt p low high\n     rep)) \\<and>\n                              pa = p \\<and> higha = high \\<and> lowa = low))\n 2. \\<And>ns var low high rep next p nodeslist.\n       \\<lbrakk>List nodeslist next ns;\n        \\<forall>no\\<in>set ns.\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           (isLeaf_pt p low high \\<longrightarrow>\n            isLeaf_pt no low high) \\<and>\n           var no = var p;\n        p \\<in> set ns; isLeaf_pt p low high\\<rbrakk>\n       \\<Longrightarrow> nodeslist =\n                         hd (filter\n                              (\\<lambda>sn. repNodes_eq sn p low high rep)\n                              ns) \\<and>\n                         var nodeslist = var p\n 3. \\<And>var low high rep p ns lowa higha repa next pa nodeslist.\n       \\<lbrakk>\\<exists>prx sfx.\n                   List nodeslist next sfx \\<and>\n                   ns = prx @ sfx \\<and>\n                   \\<not> isLeaf_pt pa lowa higha \\<and>\n                   (\\<forall>no\\<in>set ns.\n                       no \\<noteq> Null \\<and>\n                       (low no = Null) = (high no = Null) \\<and>\n                       (isLeaf_pt p low high \\<longrightarrow>\n                        isLeaf_pt no low high) \\<and>\n                       var no = var p) \\<and>\n                   p \\<in> set ns \\<and>\n                   ((\\<exists>pt\\<in>set prx.\n                        repNodes_eq pt p low high rep) \\<longrightarrow>\n                    repa p =\n                    hd (filter (\\<lambda>sn. repNodes_eq sn p low high rep)\n                         prx) \\<and>\n                    (\\<forall>pt.\n                        pt \\<noteq> p \\<longrightarrow>\n                        rep pt = repa pt)) \\<and>\n                   ((\\<forall>pt\\<in>set prx.\n                        \\<not> repNodes_eq pt p low high\n                                rep) \\<longrightarrow>\n                    rep = repa) \\<and>\n                   (nodeslist \\<noteq> Null \\<longrightarrow>\n                    (\\<forall>pt\\<in>set prx.\n                        \\<not> repNodes_eq pt p low high rep)) \\<and>\n                   pa = p \\<and> higha = high \\<and> lowa = low;\n        \\<not> nodeslist \\<noteq> Null\\<rbrakk>\n       \\<Longrightarrow> repa p =\n                         hd (filter\n                              (\\<lambda>sn. repNodes_eq sn p low high rep)\n                              ns) \\<and>\n                         (\\<forall>pt.\n                             pt \\<noteq> p \\<longrightarrow>\n                             rep pt = repa pt) \\<and>\n                         var (repa p) = var p", "apply   clarify"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>var low high rep p ns lowa higha repa next pa nodeslist prx sfx.\n       \\<lbrakk>nodeslist \\<noteq> Null; List nodeslist next sfx;\n        \\<not> isLeaf_pt p low high;\n        \\<forall>no\\<in>set (prx @ sfx).\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           (isLeaf_pt p low high \\<longrightarrow>\n            isLeaf_pt no low high) \\<and>\n           var no = var p;\n        p \\<in> set (prx @ sfx);\n        (\\<exists>pt\\<in>set prx.\n            repNodes_eq pt p low high repa) \\<longrightarrow>\n        repa p =\n        hd (filter (\\<lambda>sn. repNodes_eq sn p low high repa) prx) \\<and>\n        (\\<forall>pt. pt \\<noteq> p \\<longrightarrow> repa pt = repa pt);\n        \\<forall>pt\\<in>set prx.\n           \\<not> repNodes_eq pt p low high repa\\<rbrakk>\n       \\<Longrightarrow> (repNodes_eq nodeslist p low high\n                           repa \\<longrightarrow>\n                          length (list Null next)\n                          < length (list nodeslist next) \\<and>\n                          (\\<exists>prxa sfxa.\n                              List Null next sfxa \\<and>\n                              prx @ sfx = prxa @ sfxa \\<and>\n                              \\<not> isLeaf_pt p low high \\<and>\n                              (\\<forall>no\\<in>set (prx @ sfx).\n                                  no \\<noteq> Null \\<and>\n                                  (low no = Null) = (high no = Null) \\<and>\n                                  (isLeaf_pt p low high \\<longrightarrow>\n                                   isLeaf_pt no low high) \\<and>\n                                  var no = var p) \\<and>\n                              p \\<in> set (prx @ sfx) \\<and>\n                              ((\\<exists>pt\\<in>set prxa.\n                                   repNodes_eq pt p low high\n                                    repa) \\<longrightarrow>\n                               (repa(p := nodeslist)) p =\n                               hd (filter\n                                    (\\<lambda>sn.\n  repNodes_eq sn p low high repa)\n                                    prxa) \\<and>\n                               (\\<forall>pt.\n                                   pt \\<noteq> p \\<longrightarrow>\n                                   repa pt =\n                                   (repa(p := nodeslist)) pt)) \\<and>\n                              ((\\<forall>pt\\<in>set prxa.\n                                   \\<not> repNodes_eq pt p low high\n     repa) \\<longrightarrow>\n                               repa = repa(p := nodeslist)) \\<and>\n                              (Null \\<noteq> Null \\<longrightarrow>\n                               (\\<forall>pt\\<in>set prxa.\n                                   \\<not> repNodes_eq pt p low high\n     repa)) \\<and>\n                              p = p \\<and>\n                              high = high \\<and> low = low)) \\<and>\n                         (\\<not> repNodes_eq nodeslist p low high\n                                  repa \\<longrightarrow>\n                          length (list (next nodeslist) next)\n                          < length (list nodeslist next) \\<and>\n                          (\\<exists>prxa sfxa.\n                              List (next nodeslist) next sfxa \\<and>\n                              prx @ sfx = prxa @ sfxa \\<and>\n                              \\<not> isLeaf_pt p low high \\<and>\n                              (\\<forall>no\\<in>set (prx @ sfx).\n                                  no \\<noteq> Null \\<and>\n                                  (low no = Null) = (high no = Null) \\<and>\n                                  (isLeaf_pt p low high \\<longrightarrow>\n                                   isLeaf_pt no low high) \\<and>\n                                  var no = var p) \\<and>\n                              p \\<in> set (prx @ sfx) \\<and>\n                              ((\\<exists>pt\\<in>set prxa.\n                                   repNodes_eq pt p low high\n                                    repa) \\<longrightarrow>\n                               repa p =\n                               hd (filter\n                                    (\\<lambda>sn.\n  repNodes_eq sn p low high repa)\n                                    prxa) \\<and>\n                               (\\<forall>pt.\n                                   pt \\<noteq> p \\<longrightarrow>\n                                   repa pt = repa pt)) \\<and>\n                              ((\\<forall>pt\\<in>set prxa.\n                                   \\<not> repNodes_eq pt p low high\n     repa) \\<longrightarrow>\n                               repa = repa) \\<and>\n                              (next nodeslist \\<noteq>\n                               Null \\<longrightarrow>\n                               (\\<forall>pt\\<in>set prxa.\n                                   \\<not> repNodes_eq pt p low high\n     repa)) \\<and>\n                              p = p \\<and> high = high \\<and> low = low))\n 2. \\<And>ns var low high rep next p nodeslist.\n       \\<lbrakk>List nodeslist next ns;\n        \\<forall>no\\<in>set ns.\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           (isLeaf_pt p low high \\<longrightarrow>\n            isLeaf_pt no low high) \\<and>\n           var no = var p;\n        p \\<in> set ns; isLeaf_pt p low high\\<rbrakk>\n       \\<Longrightarrow> nodeslist =\n                         hd (filter\n                              (\\<lambda>sn. repNodes_eq sn p low high rep)\n                              ns) \\<and>\n                         var nodeslist = var p\n 3. \\<And>var low high rep p ns lowa higha repa next pa nodeslist.\n       \\<lbrakk>\\<exists>prx sfx.\n                   List nodeslist next sfx \\<and>\n                   ns = prx @ sfx \\<and>\n                   \\<not> isLeaf_pt pa lowa higha \\<and>\n                   (\\<forall>no\\<in>set ns.\n                       no \\<noteq> Null \\<and>\n                       (low no = Null) = (high no = Null) \\<and>\n                       (isLeaf_pt p low high \\<longrightarrow>\n                        isLeaf_pt no low high) \\<and>\n                       var no = var p) \\<and>\n                   p \\<in> set ns \\<and>\n                   ((\\<exists>pt\\<in>set prx.\n                        repNodes_eq pt p low high rep) \\<longrightarrow>\n                    repa p =\n                    hd (filter (\\<lambda>sn. repNodes_eq sn p low high rep)\n                         prx) \\<and>\n                    (\\<forall>pt.\n                        pt \\<noteq> p \\<longrightarrow>\n                        rep pt = repa pt)) \\<and>\n                   ((\\<forall>pt\\<in>set prx.\n                        \\<not> repNodes_eq pt p low high\n                                rep) \\<longrightarrow>\n                    rep = repa) \\<and>\n                   (nodeslist \\<noteq> Null \\<longrightarrow>\n                    (\\<forall>pt\\<in>set prx.\n                        \\<not> repNodes_eq pt p low high rep)) \\<and>\n                   pa = p \\<and> higha = high \\<and> lowa = low;\n        \\<not> nodeslist \\<noteq> Null\\<rbrakk>\n       \\<Longrightarrow> repa p =\n                         hd (filter\n                              (\\<lambda>sn. repNodes_eq sn p low high rep)\n                              ns) \\<and>\n                         (\\<forall>pt.\n                             pt \\<noteq> p \\<longrightarrow>\n                             rep pt = repa pt) \\<and>\n                         var (repa p) = var p", "apply   (rule conjI)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>var low high rep p ns lowa higha repa next pa nodeslist prx sfx.\n       \\<lbrakk>nodeslist \\<noteq> Null; List nodeslist next sfx;\n        \\<not> isLeaf_pt p low high;\n        \\<forall>no\\<in>set (prx @ sfx).\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           (isLeaf_pt p low high \\<longrightarrow>\n            isLeaf_pt no low high) \\<and>\n           var no = var p;\n        p \\<in> set (prx @ sfx);\n        (\\<exists>pt\\<in>set prx.\n            repNodes_eq pt p low high repa) \\<longrightarrow>\n        repa p =\n        hd (filter (\\<lambda>sn. repNodes_eq sn p low high repa) prx) \\<and>\n        (\\<forall>pt. pt \\<noteq> p \\<longrightarrow> repa pt = repa pt);\n        \\<forall>pt\\<in>set prx.\n           \\<not> repNodes_eq pt p low high repa\\<rbrakk>\n       \\<Longrightarrow> repNodes_eq nodeslist p low high\n                          repa \\<longrightarrow>\n                         length (list Null next)\n                         < length (list nodeslist next) \\<and>\n                         (\\<exists>prxa sfxa.\n                             List Null next sfxa \\<and>\n                             prx @ sfx = prxa @ sfxa \\<and>\n                             \\<not> isLeaf_pt p low high \\<and>\n                             (\\<forall>no\\<in>set (prx @ sfx).\n                                 no \\<noteq> Null \\<and>\n                                 (low no = Null) = (high no = Null) \\<and>\n                                 (isLeaf_pt p low high \\<longrightarrow>\n                                  isLeaf_pt no low high) \\<and>\n                                 var no = var p) \\<and>\n                             p \\<in> set (prx @ sfx) \\<and>\n                             ((\\<exists>pt\\<in>set prxa.\n                                  repNodes_eq pt p low high\n                                   repa) \\<longrightarrow>\n                              (repa(p := nodeslist)) p =\n                              hd (filter\n                                   (\\<lambda>sn.\n repNodes_eq sn p low high repa)\n                                   prxa) \\<and>\n                              (\\<forall>pt.\n                                  pt \\<noteq> p \\<longrightarrow>\n                                  repa pt =\n                                  (repa(p := nodeslist)) pt)) \\<and>\n                             ((\\<forall>pt\\<in>set prxa.\n                                  \\<not> repNodes_eq pt p low high\n    repa) \\<longrightarrow>\n                              repa = repa(p := nodeslist)) \\<and>\n                             (Null \\<noteq> Null \\<longrightarrow>\n                              (\\<forall>pt\\<in>set prxa.\n                                  \\<not> repNodes_eq pt p low high\n    repa)) \\<and>\n                             p = p \\<and> high = high \\<and> low = low)\n 2. \\<And>var low high rep p ns lowa higha repa next pa nodeslist prx sfx.\n       \\<lbrakk>nodeslist \\<noteq> Null; List nodeslist next sfx;\n        \\<not> isLeaf_pt p low high;\n        \\<forall>no\\<in>set (prx @ sfx).\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           (isLeaf_pt p low high \\<longrightarrow>\n            isLeaf_pt no low high) \\<and>\n           var no = var p;\n        p \\<in> set (prx @ sfx);\n        (\\<exists>pt\\<in>set prx.\n            repNodes_eq pt p low high repa) \\<longrightarrow>\n        repa p =\n        hd (filter (\\<lambda>sn. repNodes_eq sn p low high repa) prx) \\<and>\n        (\\<forall>pt. pt \\<noteq> p \\<longrightarrow> repa pt = repa pt);\n        \\<forall>pt\\<in>set prx.\n           \\<not> repNodes_eq pt p low high repa\\<rbrakk>\n       \\<Longrightarrow> \\<not> repNodes_eq nodeslist p low high\n                                 repa \\<longrightarrow>\n                         length (list (next nodeslist) next)\n                         < length (list nodeslist next) \\<and>\n                         (\\<exists>prxa sfxa.\n                             List (next nodeslist) next sfxa \\<and>\n                             prx @ sfx = prxa @ sfxa \\<and>\n                             \\<not> isLeaf_pt p low high \\<and>\n                             (\\<forall>no\\<in>set (prx @ sfx).\n                                 no \\<noteq> Null \\<and>\n                                 (low no = Null) = (high no = Null) \\<and>\n                                 (isLeaf_pt p low high \\<longrightarrow>\n                                  isLeaf_pt no low high) \\<and>\n                                 var no = var p) \\<and>\n                             p \\<in> set (prx @ sfx) \\<and>\n                             ((\\<exists>pt\\<in>set prxa.\n                                  repNodes_eq pt p low high\n                                   repa) \\<longrightarrow>\n                              repa p =\n                              hd (filter\n                                   (\\<lambda>sn.\n repNodes_eq sn p low high repa)\n                                   prxa) \\<and>\n                              (\\<forall>pt.\n                                  pt \\<noteq> p \\<longrightarrow>\n                                  repa pt = repa pt)) \\<and>\n                             ((\\<forall>pt\\<in>set prxa.\n                                  \\<not> repNodes_eq pt p low high\n    repa) \\<longrightarrow>\n                              repa = repa) \\<and>\n                             (next nodeslist \\<noteq> Null \\<longrightarrow>\n                              (\\<forall>pt\\<in>set prxa.\n                                  \\<not> repNodes_eq pt p low high\n    repa)) \\<and>\n                             p = p \\<and> high = high \\<and> low = low)\n 3. \\<And>ns var low high rep next p nodeslist.\n       \\<lbrakk>List nodeslist next ns;\n        \\<forall>no\\<in>set ns.\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           (isLeaf_pt p low high \\<longrightarrow>\n            isLeaf_pt no low high) \\<and>\n           var no = var p;\n        p \\<in> set ns; isLeaf_pt p low high\\<rbrakk>\n       \\<Longrightarrow> nodeslist =\n                         hd (filter\n                              (\\<lambda>sn. repNodes_eq sn p low high rep)\n                              ns) \\<and>\n                         var nodeslist = var p\n 4. \\<And>var low high rep p ns lowa higha repa next pa nodeslist.\n       \\<lbrakk>\\<exists>prx sfx.\n                   List nodeslist next sfx \\<and>\n                   ns = prx @ sfx \\<and>\n                   \\<not> isLeaf_pt pa lowa higha \\<and>\n                   (\\<forall>no\\<in>set ns.\n                       no \\<noteq> Null \\<and>\n                       (low no = Null) = (high no = Null) \\<and>\n                       (isLeaf_pt p low high \\<longrightarrow>\n                        isLeaf_pt no low high) \\<and>\n                       var no = var p) \\<and>\n                   p \\<in> set ns \\<and>\n                   ((\\<exists>pt\\<in>set prx.\n                        repNodes_eq pt p low high rep) \\<longrightarrow>\n                    repa p =\n                    hd (filter (\\<lambda>sn. repNodes_eq sn p low high rep)\n                         prx) \\<and>\n                    (\\<forall>pt.\n                        pt \\<noteq> p \\<longrightarrow>\n                        rep pt = repa pt)) \\<and>\n                   ((\\<forall>pt\\<in>set prx.\n                        \\<not> repNodes_eq pt p low high\n                                rep) \\<longrightarrow>\n                    rep = repa) \\<and>\n                   (nodeslist \\<noteq> Null \\<longrightarrow>\n                    (\\<forall>pt\\<in>set prx.\n                        \\<not> repNodes_eq pt p low high rep)) \\<and>\n                   pa = p \\<and> higha = high \\<and> lowa = low;\n        \\<not> nodeslist \\<noteq> Null\\<rbrakk>\n       \\<Longrightarrow> repa p =\n                         hd (filter\n                              (\\<lambda>sn. repNodes_eq sn p low high rep)\n                              ns) \\<and>\n                         (\\<forall>pt.\n                             pt \\<noteq> p \\<longrightarrow>\n                             rep pt = repa pt) \\<and>\n                         var (repa p) = var p", "apply    clarify"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>var low high rep p ns lowa higha repa next pa nodeslist prx sfx.\n       \\<lbrakk>nodeslist \\<noteq> Null; List nodeslist next sfx;\n        \\<not> isLeaf_pt p low high;\n        \\<forall>no\\<in>set (prx @ sfx).\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           (isLeaf_pt p low high \\<longrightarrow>\n            isLeaf_pt no low high) \\<and>\n           var no = var p;\n        p \\<in> set (prx @ sfx);\n        (\\<exists>pt\\<in>set prx.\n            repNodes_eq pt p low high repa) \\<longrightarrow>\n        repa p =\n        hd (filter (\\<lambda>sn. repNodes_eq sn p low high repa) prx) \\<and>\n        (\\<forall>pt. pt \\<noteq> p \\<longrightarrow> repa pt = repa pt);\n        \\<forall>pt\\<in>set prx. \\<not> repNodes_eq pt p low high repa;\n        repNodes_eq nodeslist p low high repa\\<rbrakk>\n       \\<Longrightarrow> length (list Null next)\n                         < length (list nodeslist next) \\<and>\n                         (\\<exists>prxa sfxa.\n                             List Null next sfxa \\<and>\n                             prx @ sfx = prxa @ sfxa \\<and>\n                             \\<not> isLeaf_pt p low high \\<and>\n                             (\\<forall>no\\<in>set (prx @ sfx).\n                                 no \\<noteq> Null \\<and>\n                                 (low no = Null) = (high no = Null) \\<and>\n                                 (isLeaf_pt p low high \\<longrightarrow>\n                                  isLeaf_pt no low high) \\<and>\n                                 var no = var p) \\<and>\n                             p \\<in> set (prx @ sfx) \\<and>\n                             ((\\<exists>pt\\<in>set prxa.\n                                  repNodes_eq pt p low high\n                                   repa) \\<longrightarrow>\n                              (repa(p := nodeslist)) p =\n                              hd (filter\n                                   (\\<lambda>sn.\n repNodes_eq sn p low high repa)\n                                   prxa) \\<and>\n                              (\\<forall>pt.\n                                  pt \\<noteq> p \\<longrightarrow>\n                                  repa pt =\n                                  (repa(p := nodeslist)) pt)) \\<and>\n                             ((\\<forall>pt\\<in>set prxa.\n                                  \\<not> repNodes_eq pt p low high\n    repa) \\<longrightarrow>\n                              repa = repa(p := nodeslist)) \\<and>\n                             (Null \\<noteq> Null \\<longrightarrow>\n                              (\\<forall>pt\\<in>set prxa.\n                                  \\<not> repNodes_eq pt p low high\n    repa)) \\<and>\n                             p = p \\<and> high = high \\<and> low = low)\n 2. \\<And>var low high rep p ns lowa higha repa next pa nodeslist prx sfx.\n       \\<lbrakk>nodeslist \\<noteq> Null; List nodeslist next sfx;\n        \\<not> isLeaf_pt p low high;\n        \\<forall>no\\<in>set (prx @ sfx).\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           (isLeaf_pt p low high \\<longrightarrow>\n            isLeaf_pt no low high) \\<and>\n           var no = var p;\n        p \\<in> set (prx @ sfx);\n        (\\<exists>pt\\<in>set prx.\n            repNodes_eq pt p low high repa) \\<longrightarrow>\n        repa p =\n        hd (filter (\\<lambda>sn. repNodes_eq sn p low high repa) prx) \\<and>\n        (\\<forall>pt. pt \\<noteq> p \\<longrightarrow> repa pt = repa pt);\n        \\<forall>pt\\<in>set prx.\n           \\<not> repNodes_eq pt p low high repa\\<rbrakk>\n       \\<Longrightarrow> \\<not> repNodes_eq nodeslist p low high\n                                 repa \\<longrightarrow>\n                         length (list (next nodeslist) next)\n                         < length (list nodeslist next) \\<and>\n                         (\\<exists>prxa sfxa.\n                             List (next nodeslist) next sfxa \\<and>\n                             prx @ sfx = prxa @ sfxa \\<and>\n                             \\<not> isLeaf_pt p low high \\<and>\n                             (\\<forall>no\\<in>set (prx @ sfx).\n                                 no \\<noteq> Null \\<and>\n                                 (low no = Null) = (high no = Null) \\<and>\n                                 (isLeaf_pt p low high \\<longrightarrow>\n                                  isLeaf_pt no low high) \\<and>\n                                 var no = var p) \\<and>\n                             p \\<in> set (prx @ sfx) \\<and>\n                             ((\\<exists>pt\\<in>set prxa.\n                                  repNodes_eq pt p low high\n                                   repa) \\<longrightarrow>\n                              repa p =\n                              hd (filter\n                                   (\\<lambda>sn.\n repNodes_eq sn p low high repa)\n                                   prxa) \\<and>\n                              (\\<forall>pt.\n                                  pt \\<noteq> p \\<longrightarrow>\n                                  repa pt = repa pt)) \\<and>\n                             ((\\<forall>pt\\<in>set prxa.\n                                  \\<not> repNodes_eq pt p low high\n    repa) \\<longrightarrow>\n                              repa = repa) \\<and>\n                             (next nodeslist \\<noteq> Null \\<longrightarrow>\n                              (\\<forall>pt\\<in>set prxa.\n                                  \\<not> repNodes_eq pt p low high\n    repa)) \\<and>\n                             p = p \\<and> high = high \\<and> low = low)\n 3. \\<And>ns var low high rep next p nodeslist.\n       \\<lbrakk>List nodeslist next ns;\n        \\<forall>no\\<in>set ns.\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           (isLeaf_pt p low high \\<longrightarrow>\n            isLeaf_pt no low high) \\<and>\n           var no = var p;\n        p \\<in> set ns; isLeaf_pt p low high\\<rbrakk>\n       \\<Longrightarrow> nodeslist =\n                         hd (filter\n                              (\\<lambda>sn. repNodes_eq sn p low high rep)\n                              ns) \\<and>\n                         var nodeslist = var p\n 4. \\<And>var low high rep p ns lowa higha repa next pa nodeslist.\n       \\<lbrakk>\\<exists>prx sfx.\n                   List nodeslist next sfx \\<and>\n                   ns = prx @ sfx \\<and>\n                   \\<not> isLeaf_pt pa lowa higha \\<and>\n                   (\\<forall>no\\<in>set ns.\n                       no \\<noteq> Null \\<and>\n                       (low no = Null) = (high no = Null) \\<and>\n                       (isLeaf_pt p low high \\<longrightarrow>\n                        isLeaf_pt no low high) \\<and>\n                       var no = var p) \\<and>\n                   p \\<in> set ns \\<and>\n                   ((\\<exists>pt\\<in>set prx.\n                        repNodes_eq pt p low high rep) \\<longrightarrow>\n                    repa p =\n                    hd (filter (\\<lambda>sn. repNodes_eq sn p low high rep)\n                         prx) \\<and>\n                    (\\<forall>pt.\n                        pt \\<noteq> p \\<longrightarrow>\n                        rep pt = repa pt)) \\<and>\n                   ((\\<forall>pt\\<in>set prx.\n                        \\<not> repNodes_eq pt p low high\n                                rep) \\<longrightarrow>\n                    rep = repa) \\<and>\n                   (nodeslist \\<noteq> Null \\<longrightarrow>\n                    (\\<forall>pt\\<in>set prx.\n                        \\<not> repNodes_eq pt p low high rep)) \\<and>\n                   pa = p \\<and> higha = high \\<and> lowa = low;\n        \\<not> nodeslist \\<noteq> Null\\<rbrakk>\n       \\<Longrightarrow> repa p =\n                         hd (filter\n                              (\\<lambda>sn. repNodes_eq sn p low high rep)\n                              ns) \\<and>\n                         (\\<forall>pt.\n                             pt \\<noteq> p \\<longrightarrow>\n                             rep pt = repa pt) \\<and>\n                         var (repa p) = var p", "apply    (rule conjI)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>var low high rep p ns lowa higha repa next pa nodeslist prx sfx.\n       \\<lbrakk>nodeslist \\<noteq> Null; List nodeslist next sfx;\n        \\<not> isLeaf_pt p low high;\n        \\<forall>no\\<in>set (prx @ sfx).\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           (isLeaf_pt p low high \\<longrightarrow>\n            isLeaf_pt no low high) \\<and>\n           var no = var p;\n        p \\<in> set (prx @ sfx);\n        (\\<exists>pt\\<in>set prx.\n            repNodes_eq pt p low high repa) \\<longrightarrow>\n        repa p =\n        hd (filter (\\<lambda>sn. repNodes_eq sn p low high repa) prx) \\<and>\n        (\\<forall>pt. pt \\<noteq> p \\<longrightarrow> repa pt = repa pt);\n        \\<forall>pt\\<in>set prx. \\<not> repNodes_eq pt p low high repa;\n        repNodes_eq nodeslist p low high repa\\<rbrakk>\n       \\<Longrightarrow> length (list Null next)\n                         < length (list nodeslist next)\n 2. \\<And>var low high rep p ns lowa higha repa next pa nodeslist prx sfx.\n       \\<lbrakk>nodeslist \\<noteq> Null; List nodeslist next sfx;\n        \\<not> isLeaf_pt p low high;\n        \\<forall>no\\<in>set (prx @ sfx).\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           (isLeaf_pt p low high \\<longrightarrow>\n            isLeaf_pt no low high) \\<and>\n           var no = var p;\n        p \\<in> set (prx @ sfx);\n        (\\<exists>pt\\<in>set prx.\n            repNodes_eq pt p low high repa) \\<longrightarrow>\n        repa p =\n        hd (filter (\\<lambda>sn. repNodes_eq sn p low high repa) prx) \\<and>\n        (\\<forall>pt. pt \\<noteq> p \\<longrightarrow> repa pt = repa pt);\n        \\<forall>pt\\<in>set prx. \\<not> repNodes_eq pt p low high repa;\n        repNodes_eq nodeslist p low high repa\\<rbrakk>\n       \\<Longrightarrow> \\<exists>prxa sfxa.\n                            List Null next sfxa \\<and>\n                            prx @ sfx = prxa @ sfxa \\<and>\n                            \\<not> isLeaf_pt p low high \\<and>\n                            (\\<forall>no\\<in>set (prx @ sfx).\n                                no \\<noteq> Null \\<and>\n                                (low no = Null) = (high no = Null) \\<and>\n                                (isLeaf_pt p low high \\<longrightarrow>\n                                 isLeaf_pt no low high) \\<and>\n                                var no = var p) \\<and>\n                            p \\<in> set (prx @ sfx) \\<and>\n                            ((\\<exists>pt\\<in>set prxa.\n                                 repNodes_eq pt p low high\n                                  repa) \\<longrightarrow>\n                             (repa(p := nodeslist)) p =\n                             hd (filter\n                                  (\\<lambda>sn.\nrepNodes_eq sn p low high repa)\n                                  prxa) \\<and>\n                             (\\<forall>pt.\n                                 pt \\<noteq> p \\<longrightarrow>\n                                 repa pt =\n                                 (repa(p := nodeslist)) pt)) \\<and>\n                            ((\\<forall>pt\\<in>set prxa.\n                                 \\<not> repNodes_eq pt p low high\n   repa) \\<longrightarrow>\n                             repa = repa(p := nodeslist)) \\<and>\n                            (Null \\<noteq> Null \\<longrightarrow>\n                             (\\<forall>pt\\<in>set prxa.\n                                 \\<not> repNodes_eq pt p low high\n   repa)) \\<and>\n                            p = p \\<and> high = high \\<and> low = low\n 3. \\<And>var low high rep p ns lowa higha repa next pa nodeslist prx sfx.\n       \\<lbrakk>nodeslist \\<noteq> Null; List nodeslist next sfx;\n        \\<not> isLeaf_pt p low high;\n        \\<forall>no\\<in>set (prx @ sfx).\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           (isLeaf_pt p low high \\<longrightarrow>\n            isLeaf_pt no low high) \\<and>\n           var no = var p;\n        p \\<in> set (prx @ sfx);\n        (\\<exists>pt\\<in>set prx.\n            repNodes_eq pt p low high repa) \\<longrightarrow>\n        repa p =\n        hd (filter (\\<lambda>sn. repNodes_eq sn p low high repa) prx) \\<and>\n        (\\<forall>pt. pt \\<noteq> p \\<longrightarrow> repa pt = repa pt);\n        \\<forall>pt\\<in>set prx.\n           \\<not> repNodes_eq pt p low high repa\\<rbrakk>\n       \\<Longrightarrow> \\<not> repNodes_eq nodeslist p low high\n                                 repa \\<longrightarrow>\n                         length (list (next nodeslist) next)\n                         < length (list nodeslist next) \\<and>\n                         (\\<exists>prxa sfxa.\n                             List (next nodeslist) next sfxa \\<and>\n                             prx @ sfx = prxa @ sfxa \\<and>\n                             \\<not> isLeaf_pt p low high \\<and>\n                             (\\<forall>no\\<in>set (prx @ sfx).\n                                 no \\<noteq> Null \\<and>\n                                 (low no = Null) = (high no = Null) \\<and>\n                                 (isLeaf_pt p low high \\<longrightarrow>\n                                  isLeaf_pt no low high) \\<and>\n                                 var no = var p) \\<and>\n                             p \\<in> set (prx @ sfx) \\<and>\n                             ((\\<exists>pt\\<in>set prxa.\n                                  repNodes_eq pt p low high\n                                   repa) \\<longrightarrow>\n                              repa p =\n                              hd (filter\n                                   (\\<lambda>sn.\n repNodes_eq sn p low high repa)\n                                   prxa) \\<and>\n                              (\\<forall>pt.\n                                  pt \\<noteq> p \\<longrightarrow>\n                                  repa pt = repa pt)) \\<and>\n                             ((\\<forall>pt\\<in>set prxa.\n                                  \\<not> repNodes_eq pt p low high\n    repa) \\<longrightarrow>\n                              repa = repa) \\<and>\n                             (next nodeslist \\<noteq> Null \\<longrightarrow>\n                              (\\<forall>pt\\<in>set prxa.\n                                  \\<not> repNodes_eq pt p low high\n    repa)) \\<and>\n                             p = p \\<and> high = high \\<and> low = low)\n 4. \\<And>ns var low high rep next p nodeslist.\n       \\<lbrakk>List nodeslist next ns;\n        \\<forall>no\\<in>set ns.\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           (isLeaf_pt p low high \\<longrightarrow>\n            isLeaf_pt no low high) \\<and>\n           var no = var p;\n        p \\<in> set ns; isLeaf_pt p low high\\<rbrakk>\n       \\<Longrightarrow> nodeslist =\n                         hd (filter\n                              (\\<lambda>sn. repNodes_eq sn p low high rep)\n                              ns) \\<and>\n                         var nodeslist = var p\n 5. \\<And>var low high rep p ns lowa higha repa next pa nodeslist.\n       \\<lbrakk>\\<exists>prx sfx.\n                   List nodeslist next sfx \\<and>\n                   ns = prx @ sfx \\<and>\n                   \\<not> isLeaf_pt pa lowa higha \\<and>\n                   (\\<forall>no\\<in>set ns.\n                       no \\<noteq> Null \\<and>\n                       (low no = Null) = (high no = Null) \\<and>\n                       (isLeaf_pt p low high \\<longrightarrow>\n                        isLeaf_pt no low high) \\<and>\n                       var no = var p) \\<and>\n                   p \\<in> set ns \\<and>\n                   ((\\<exists>pt\\<in>set prx.\n                        repNodes_eq pt p low high rep) \\<longrightarrow>\n                    repa p =\n                    hd (filter (\\<lambda>sn. repNodes_eq sn p low high rep)\n                         prx) \\<and>\n                    (\\<forall>pt.\n                        pt \\<noteq> p \\<longrightarrow>\n                        rep pt = repa pt)) \\<and>\n                   ((\\<forall>pt\\<in>set prx.\n                        \\<not> repNodes_eq pt p low high\n                                rep) \\<longrightarrow>\n                    rep = repa) \\<and>\n                   (nodeslist \\<noteq> Null \\<longrightarrow>\n                    (\\<forall>pt\\<in>set prx.\n                        \\<not> repNodes_eq pt p low high rep)) \\<and>\n                   pa = p \\<and> higha = high \\<and> lowa = low;\n        \\<not> nodeslist \\<noteq> Null\\<rbrakk>\n       \\<Longrightarrow> repa p =\n                         hd (filter\n                              (\\<lambda>sn. repNodes_eq sn p low high rep)\n                              ns) \\<and>\n                         (\\<forall>pt.\n                             pt \\<noteq> p \\<longrightarrow>\n                             rep pt = repa pt) \\<and>\n                         var (repa p) = var p", "apply     (clarsimp simp add: List_list)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>var low high rep p ns lowa higha repa next pa nodeslist prx sfx.\n       \\<lbrakk>nodeslist \\<noteq> Null; List nodeslist next sfx;\n        \\<not> isLeaf_pt p low high;\n        \\<forall>no\\<in>set (prx @ sfx).\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           (isLeaf_pt p low high \\<longrightarrow>\n            isLeaf_pt no low high) \\<and>\n           var no = var p;\n        p \\<in> set (prx @ sfx);\n        (\\<exists>pt\\<in>set prx.\n            repNodes_eq pt p low high repa) \\<longrightarrow>\n        repa p =\n        hd (filter (\\<lambda>sn. repNodes_eq sn p low high repa) prx) \\<and>\n        (\\<forall>pt. pt \\<noteq> p \\<longrightarrow> repa pt = repa pt);\n        \\<forall>pt\\<in>set prx. \\<not> repNodes_eq pt p low high repa;\n        repNodes_eq nodeslist p low high repa\\<rbrakk>\n       \\<Longrightarrow> \\<exists>prxa sfxa.\n                            List Null next sfxa \\<and>\n                            prx @ sfx = prxa @ sfxa \\<and>\n                            \\<not> isLeaf_pt p low high \\<and>\n                            (\\<forall>no\\<in>set (prx @ sfx).\n                                no \\<noteq> Null \\<and>\n                                (low no = Null) = (high no = Null) \\<and>\n                                (isLeaf_pt p low high \\<longrightarrow>\n                                 isLeaf_pt no low high) \\<and>\n                                var no = var p) \\<and>\n                            p \\<in> set (prx @ sfx) \\<and>\n                            ((\\<exists>pt\\<in>set prxa.\n                                 repNodes_eq pt p low high\n                                  repa) \\<longrightarrow>\n                             (repa(p := nodeslist)) p =\n                             hd (filter\n                                  (\\<lambda>sn.\nrepNodes_eq sn p low high repa)\n                                  prxa) \\<and>\n                             (\\<forall>pt.\n                                 pt \\<noteq> p \\<longrightarrow>\n                                 repa pt =\n                                 (repa(p := nodeslist)) pt)) \\<and>\n                            ((\\<forall>pt\\<in>set prxa.\n                                 \\<not> repNodes_eq pt p low high\n   repa) \\<longrightarrow>\n                             repa = repa(p := nodeslist)) \\<and>\n                            (Null \\<noteq> Null \\<longrightarrow>\n                             (\\<forall>pt\\<in>set prxa.\n                                 \\<not> repNodes_eq pt p low high\n   repa)) \\<and>\n                            p = p \\<and> high = high \\<and> low = low\n 2. \\<And>var low high rep p ns lowa higha repa next pa nodeslist prx sfx.\n       \\<lbrakk>nodeslist \\<noteq> Null; List nodeslist next sfx;\n        \\<not> isLeaf_pt p low high;\n        \\<forall>no\\<in>set (prx @ sfx).\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           (isLeaf_pt p low high \\<longrightarrow>\n            isLeaf_pt no low high) \\<and>\n           var no = var p;\n        p \\<in> set (prx @ sfx);\n        (\\<exists>pt\\<in>set prx.\n            repNodes_eq pt p low high repa) \\<longrightarrow>\n        repa p =\n        hd (filter (\\<lambda>sn. repNodes_eq sn p low high repa) prx) \\<and>\n        (\\<forall>pt. pt \\<noteq> p \\<longrightarrow> repa pt = repa pt);\n        \\<forall>pt\\<in>set prx.\n           \\<not> repNodes_eq pt p low high repa\\<rbrakk>\n       \\<Longrightarrow> \\<not> repNodes_eq nodeslist p low high\n                                 repa \\<longrightarrow>\n                         length (list (next nodeslist) next)\n                         < length (list nodeslist next) \\<and>\n                         (\\<exists>prxa sfxa.\n                             List (next nodeslist) next sfxa \\<and>\n                             prx @ sfx = prxa @ sfxa \\<and>\n                             \\<not> isLeaf_pt p low high \\<and>\n                             (\\<forall>no\\<in>set (prx @ sfx).\n                                 no \\<noteq> Null \\<and>\n                                 (low no = Null) = (high no = Null) \\<and>\n                                 (isLeaf_pt p low high \\<longrightarrow>\n                                  isLeaf_pt no low high) \\<and>\n                                 var no = var p) \\<and>\n                             p \\<in> set (prx @ sfx) \\<and>\n                             ((\\<exists>pt\\<in>set prxa.\n                                  repNodes_eq pt p low high\n                                   repa) \\<longrightarrow>\n                              repa p =\n                              hd (filter\n                                   (\\<lambda>sn.\n repNodes_eq sn p low high repa)\n                                   prxa) \\<and>\n                              (\\<forall>pt.\n                                  pt \\<noteq> p \\<longrightarrow>\n                                  repa pt = repa pt)) \\<and>\n                             ((\\<forall>pt\\<in>set prxa.\n                                  \\<not> repNodes_eq pt p low high\n    repa) \\<longrightarrow>\n                              repa = repa) \\<and>\n                             (next nodeslist \\<noteq> Null \\<longrightarrow>\n                              (\\<forall>pt\\<in>set prxa.\n                                  \\<not> repNodes_eq pt p low high\n    repa)) \\<and>\n                             p = p \\<and> high = high \\<and> low = low)\n 3. \\<And>ns var low high rep next p nodeslist.\n       \\<lbrakk>List nodeslist next ns;\n        \\<forall>no\\<in>set ns.\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           (isLeaf_pt p low high \\<longrightarrow>\n            isLeaf_pt no low high) \\<and>\n           var no = var p;\n        p \\<in> set ns; isLeaf_pt p low high\\<rbrakk>\n       \\<Longrightarrow> nodeslist =\n                         hd (filter\n                              (\\<lambda>sn. repNodes_eq sn p low high rep)\n                              ns) \\<and>\n                         var nodeslist = var p\n 4. \\<And>var low high rep p ns lowa higha repa next pa nodeslist.\n       \\<lbrakk>\\<exists>prx sfx.\n                   List nodeslist next sfx \\<and>\n                   ns = prx @ sfx \\<and>\n                   \\<not> isLeaf_pt pa lowa higha \\<and>\n                   (\\<forall>no\\<in>set ns.\n                       no \\<noteq> Null \\<and>\n                       (low no = Null) = (high no = Null) \\<and>\n                       (isLeaf_pt p low high \\<longrightarrow>\n                        isLeaf_pt no low high) \\<and>\n                       var no = var p) \\<and>\n                   p \\<in> set ns \\<and>\n                   ((\\<exists>pt\\<in>set prx.\n                        repNodes_eq pt p low high rep) \\<longrightarrow>\n                    repa p =\n                    hd (filter (\\<lambda>sn. repNodes_eq sn p low high rep)\n                         prx) \\<and>\n                    (\\<forall>pt.\n                        pt \\<noteq> p \\<longrightarrow>\n                        rep pt = repa pt)) \\<and>\n                   ((\\<forall>pt\\<in>set prx.\n                        \\<not> repNodes_eq pt p low high\n                                rep) \\<longrightarrow>\n                    rep = repa) \\<and>\n                   (nodeslist \\<noteq> Null \\<longrightarrow>\n                    (\\<forall>pt\\<in>set prx.\n                        \\<not> repNodes_eq pt p low high rep)) \\<and>\n                   pa = p \\<and> higha = high \\<and> lowa = low;\n        \\<not> nodeslist \\<noteq> Null\\<rbrakk>\n       \\<Longrightarrow> repa p =\n                         hd (filter\n                              (\\<lambda>sn. repNodes_eq sn p low high rep)\n                              ns) \\<and>\n                         (\\<forall>pt.\n                             pt \\<noteq> p \\<longrightarrow>\n                             rep pt = repa pt) \\<and>\n                         var (repa p) = var p", "(* solving termination contraint *)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>var low high rep p ns lowa higha repa next pa nodeslist prx sfx.\n       \\<lbrakk>nodeslist \\<noteq> Null; List nodeslist next sfx;\n        \\<not> isLeaf_pt p low high;\n        \\<forall>no\\<in>set (prx @ sfx).\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           (isLeaf_pt p low high \\<longrightarrow>\n            isLeaf_pt no low high) \\<and>\n           var no = var p;\n        p \\<in> set (prx @ sfx);\n        (\\<exists>pt\\<in>set prx.\n            repNodes_eq pt p low high repa) \\<longrightarrow>\n        repa p =\n        hd (filter (\\<lambda>sn. repNodes_eq sn p low high repa) prx) \\<and>\n        (\\<forall>pt. pt \\<noteq> p \\<longrightarrow> repa pt = repa pt);\n        \\<forall>pt\\<in>set prx. \\<not> repNodes_eq pt p low high repa;\n        repNodes_eq nodeslist p low high repa\\<rbrakk>\n       \\<Longrightarrow> \\<exists>prxa sfxa.\n                            List Null next sfxa \\<and>\n                            prx @ sfx = prxa @ sfxa \\<and>\n                            \\<not> isLeaf_pt p low high \\<and>\n                            (\\<forall>no\\<in>set (prx @ sfx).\n                                no \\<noteq> Null \\<and>\n                                (low no = Null) = (high no = Null) \\<and>\n                                (isLeaf_pt p low high \\<longrightarrow>\n                                 isLeaf_pt no low high) \\<and>\n                                var no = var p) \\<and>\n                            p \\<in> set (prx @ sfx) \\<and>\n                            ((\\<exists>pt\\<in>set prxa.\n                                 repNodes_eq pt p low high\n                                  repa) \\<longrightarrow>\n                             (repa(p := nodeslist)) p =\n                             hd (filter\n                                  (\\<lambda>sn.\nrepNodes_eq sn p low high repa)\n                                  prxa) \\<and>\n                             (\\<forall>pt.\n                                 pt \\<noteq> p \\<longrightarrow>\n                                 repa pt =\n                                 (repa(p := nodeslist)) pt)) \\<and>\n                            ((\\<forall>pt\\<in>set prxa.\n                                 \\<not> repNodes_eq pt p low high\n   repa) \\<longrightarrow>\n                             repa = repa(p := nodeslist)) \\<and>\n                            (Null \\<noteq> Null \\<longrightarrow>\n                             (\\<forall>pt\\<in>set prxa.\n                                 \\<not> repNodes_eq pt p low high\n   repa)) \\<and>\n                            p = p \\<and> high = high \\<and> low = low\n 2. \\<And>var low high rep p ns lowa higha repa next pa nodeslist prx sfx.\n       \\<lbrakk>nodeslist \\<noteq> Null; List nodeslist next sfx;\n        \\<not> isLeaf_pt p low high;\n        \\<forall>no\\<in>set (prx @ sfx).\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           (isLeaf_pt p low high \\<longrightarrow>\n            isLeaf_pt no low high) \\<and>\n           var no = var p;\n        p \\<in> set (prx @ sfx);\n        (\\<exists>pt\\<in>set prx.\n            repNodes_eq pt p low high repa) \\<longrightarrow>\n        repa p =\n        hd (filter (\\<lambda>sn. repNodes_eq sn p low high repa) prx) \\<and>\n        (\\<forall>pt. pt \\<noteq> p \\<longrightarrow> repa pt = repa pt);\n        \\<forall>pt\\<in>set prx.\n           \\<not> repNodes_eq pt p low high repa\\<rbrakk>\n       \\<Longrightarrow> \\<not> repNodes_eq nodeslist p low high\n                                 repa \\<longrightarrow>\n                         length (list (next nodeslist) next)\n                         < length (list nodeslist next) \\<and>\n                         (\\<exists>prxa sfxa.\n                             List (next nodeslist) next sfxa \\<and>\n                             prx @ sfx = prxa @ sfxa \\<and>\n                             \\<not> isLeaf_pt p low high \\<and>\n                             (\\<forall>no\\<in>set (prx @ sfx).\n                                 no \\<noteq> Null \\<and>\n                                 (low no = Null) = (high no = Null) \\<and>\n                                 (isLeaf_pt p low high \\<longrightarrow>\n                                  isLeaf_pt no low high) \\<and>\n                                 var no = var p) \\<and>\n                             p \\<in> set (prx @ sfx) \\<and>\n                             ((\\<exists>pt\\<in>set prxa.\n                                  repNodes_eq pt p low high\n                                   repa) \\<longrightarrow>\n                              repa p =\n                              hd (filter\n                                   (\\<lambda>sn.\n repNodes_eq sn p low high repa)\n                                   prxa) \\<and>\n                              (\\<forall>pt.\n                                  pt \\<noteq> p \\<longrightarrow>\n                                  repa pt = repa pt)) \\<and>\n                             ((\\<forall>pt\\<in>set prxa.\n                                  \\<not> repNodes_eq pt p low high\n    repa) \\<longrightarrow>\n                              repa = repa) \\<and>\n                             (next nodeslist \\<noteq> Null \\<longrightarrow>\n                              (\\<forall>pt\\<in>set prxa.\n                                  \\<not> repNodes_eq pt p low high\n    repa)) \\<and>\n                             p = p \\<and> high = high \\<and> low = low)\n 3. \\<And>ns var low high rep next p nodeslist.\n       \\<lbrakk>List nodeslist next ns;\n        \\<forall>no\\<in>set ns.\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           (isLeaf_pt p low high \\<longrightarrow>\n            isLeaf_pt no low high) \\<and>\n           var no = var p;\n        p \\<in> set ns; isLeaf_pt p low high\\<rbrakk>\n       \\<Longrightarrow> nodeslist =\n                         hd (filter\n                              (\\<lambda>sn. repNodes_eq sn p low high rep)\n                              ns) \\<and>\n                         var nodeslist = var p\n 4. \\<And>var low high rep p ns lowa higha repa next pa nodeslist.\n       \\<lbrakk>\\<exists>prx sfx.\n                   List nodeslist next sfx \\<and>\n                   ns = prx @ sfx \\<and>\n                   \\<not> isLeaf_pt pa lowa higha \\<and>\n                   (\\<forall>no\\<in>set ns.\n                       no \\<noteq> Null \\<and>\n                       (low no = Null) = (high no = Null) \\<and>\n                       (isLeaf_pt p low high \\<longrightarrow>\n                        isLeaf_pt no low high) \\<and>\n                       var no = var p) \\<and>\n                   p \\<in> set ns \\<and>\n                   ((\\<exists>pt\\<in>set prx.\n                        repNodes_eq pt p low high rep) \\<longrightarrow>\n                    repa p =\n                    hd (filter (\\<lambda>sn. repNodes_eq sn p low high rep)\n                         prx) \\<and>\n                    (\\<forall>pt.\n                        pt \\<noteq> p \\<longrightarrow>\n                        rep pt = repa pt)) \\<and>\n                   ((\\<forall>pt\\<in>set prx.\n                        \\<not> repNodes_eq pt p low high\n                                rep) \\<longrightarrow>\n                    rep = repa) \\<and>\n                   (nodeslist \\<noteq> Null \\<longrightarrow>\n                    (\\<forall>pt\\<in>set prx.\n                        \\<not> repNodes_eq pt p low high rep)) \\<and>\n                   pa = p \\<and> higha = high \\<and> lowa = low;\n        \\<not> nodeslist \\<noteq> Null\\<rbrakk>\n       \\<Longrightarrow> repa p =\n                         hd (filter\n                              (\\<lambda>sn. repNodes_eq sn p low high rep)\n                              ns) \\<and>\n                         (\\<forall>pt.\n                             pt \\<noteq> p \\<longrightarrow>\n                             rep pt = repa pt) \\<and>\n                         var (repa p) = var p", "apply    (simp (no_asm_use))"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>var low high p repa next nodeslist prx sfx.\n       \\<lbrakk>nodeslist \\<noteq> Null; List nodeslist next sfx;\n        \\<not> isLeaf_pt p low high;\n        \\<forall>no\\<in>set prx \\<union> set sfx.\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           (isLeaf_pt p low high \\<longrightarrow>\n            isLeaf_pt no low high) \\<and>\n           var no = var p;\n        p \\<in> set prx \\<or> p \\<in> set sfx;\n        (\\<exists>pt\\<in>set prx.\n            repNodes_eq pt p low high repa) \\<longrightarrow>\n        repa p =\n        hd (filter (\\<lambda>sn. repNodes_eq sn p low high repa) prx);\n        \\<forall>pt\\<in>set prx. \\<not> repNodes_eq pt p low high repa;\n        repNodes_eq nodeslist p low high repa\\<rbrakk>\n       \\<Longrightarrow> \\<not> isLeaf_pt p low high \\<and>\n                         (\\<forall>no\\<in>set prx \\<union> set sfx.\n                             no \\<noteq> Null \\<and>\n                             (low no = Null) = (high no = Null) \\<and>\n                             (isLeaf_pt p low high \\<longrightarrow>\n                              isLeaf_pt no low high) \\<and>\n                             var no = var p) \\<and>\n                         (p \\<in> set prx \\<or> p \\<in> set sfx) \\<and>\n                         ((\\<exists>pt\\<in>set prx \\<union> set sfx.\n                              repNodes_eq pt p low high\n                               repa) \\<longrightarrow>\n                          nodeslist =\n                          hd (filter\n                               (\\<lambda>sn. repNodes_eq sn p low high repa)\n                               prx @\n                              filter\n                               (\\<lambda>sn. repNodes_eq sn p low high repa)\n                               sfx)) \\<and>\n                         ((\\<forall>pt\\<in>set prx \\<union> set sfx.\n                              \\<not> repNodes_eq pt p low high\nrepa) \\<longrightarrow>\n                          repa = repa(p := nodeslist))\n 2. \\<And>var low high rep p ns lowa higha repa next pa nodeslist prx sfx.\n       \\<lbrakk>nodeslist \\<noteq> Null; List nodeslist next sfx;\n        \\<not> isLeaf_pt p low high;\n        \\<forall>no\\<in>set (prx @ sfx).\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           (isLeaf_pt p low high \\<longrightarrow>\n            isLeaf_pt no low high) \\<and>\n           var no = var p;\n        p \\<in> set (prx @ sfx);\n        (\\<exists>pt\\<in>set prx.\n            repNodes_eq pt p low high repa) \\<longrightarrow>\n        repa p =\n        hd (filter (\\<lambda>sn. repNodes_eq sn p low high repa) prx) \\<and>\n        (\\<forall>pt. pt \\<noteq> p \\<longrightarrow> repa pt = repa pt);\n        \\<forall>pt\\<in>set prx.\n           \\<not> repNodes_eq pt p low high repa\\<rbrakk>\n       \\<Longrightarrow> \\<not> repNodes_eq nodeslist p low high\n                                 repa \\<longrightarrow>\n                         length (list (next nodeslist) next)\n                         < length (list nodeslist next) \\<and>\n                         (\\<exists>prxa sfxa.\n                             List (next nodeslist) next sfxa \\<and>\n                             prx @ sfx = prxa @ sfxa \\<and>\n                             \\<not> isLeaf_pt p low high \\<and>\n                             (\\<forall>no\\<in>set (prx @ sfx).\n                                 no \\<noteq> Null \\<and>\n                                 (low no = Null) = (high no = Null) \\<and>\n                                 (isLeaf_pt p low high \\<longrightarrow>\n                                  isLeaf_pt no low high) \\<and>\n                                 var no = var p) \\<and>\n                             p \\<in> set (prx @ sfx) \\<and>\n                             ((\\<exists>pt\\<in>set prxa.\n                                  repNodes_eq pt p low high\n                                   repa) \\<longrightarrow>\n                              repa p =\n                              hd (filter\n                                   (\\<lambda>sn.\n repNodes_eq sn p low high repa)\n                                   prxa) \\<and>\n                              (\\<forall>pt.\n                                  pt \\<noteq> p \\<longrightarrow>\n                                  repa pt = repa pt)) \\<and>\n                             ((\\<forall>pt\\<in>set prxa.\n                                  \\<not> repNodes_eq pt p low high\n    repa) \\<longrightarrow>\n                              repa = repa) \\<and>\n                             (next nodeslist \\<noteq> Null \\<longrightarrow>\n                              (\\<forall>pt\\<in>set prxa.\n                                  \\<not> repNodes_eq pt p low high\n    repa)) \\<and>\n                             p = p \\<and> high = high \\<and> low = low)\n 3. \\<And>ns var low high rep next p nodeslist.\n       \\<lbrakk>List nodeslist next ns;\n        \\<forall>no\\<in>set ns.\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           (isLeaf_pt p low high \\<longrightarrow>\n            isLeaf_pt no low high) \\<and>\n           var no = var p;\n        p \\<in> set ns; isLeaf_pt p low high\\<rbrakk>\n       \\<Longrightarrow> nodeslist =\n                         hd (filter\n                              (\\<lambda>sn. repNodes_eq sn p low high rep)\n                              ns) \\<and>\n                         var nodeslist = var p\n 4. \\<And>var low high rep p ns lowa higha repa next pa nodeslist.\n       \\<lbrakk>\\<exists>prx sfx.\n                   List nodeslist next sfx \\<and>\n                   ns = prx @ sfx \\<and>\n                   \\<not> isLeaf_pt pa lowa higha \\<and>\n                   (\\<forall>no\\<in>set ns.\n                       no \\<noteq> Null \\<and>\n                       (low no = Null) = (high no = Null) \\<and>\n                       (isLeaf_pt p low high \\<longrightarrow>\n                        isLeaf_pt no low high) \\<and>\n                       var no = var p) \\<and>\n                   p \\<in> set ns \\<and>\n                   ((\\<exists>pt\\<in>set prx.\n                        repNodes_eq pt p low high rep) \\<longrightarrow>\n                    repa p =\n                    hd (filter (\\<lambda>sn. repNodes_eq sn p low high rep)\n                         prx) \\<and>\n                    (\\<forall>pt.\n                        pt \\<noteq> p \\<longrightarrow>\n                        rep pt = repa pt)) \\<and>\n                   ((\\<forall>pt\\<in>set prx.\n                        \\<not> repNodes_eq pt p low high\n                                rep) \\<longrightarrow>\n                    rep = repa) \\<and>\n                   (nodeslist \\<noteq> Null \\<longrightarrow>\n                    (\\<forall>pt\\<in>set prx.\n                        \\<not> repNodes_eq pt p low high rep)) \\<and>\n                   pa = p \\<and> higha = high \\<and> lowa = low;\n        \\<not> nodeslist \\<noteq> Null\\<rbrakk>\n       \\<Longrightarrow> repa p =\n                         hd (filter\n                              (\\<lambda>sn. repNodes_eq sn p low high rep)\n                              ns) \\<and>\n                         (\\<forall>pt.\n                             pt \\<noteq> p \\<longrightarrow>\n                             rep pt = repa pt) \\<and>\n                         var (repa p) = var p", "apply    (rule conjI)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>var low high p repa next nodeslist prx sfx.\n       \\<lbrakk>nodeslist \\<noteq> Null; List nodeslist next sfx;\n        \\<not> isLeaf_pt p low high;\n        \\<forall>no\\<in>set prx \\<union> set sfx.\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           (isLeaf_pt p low high \\<longrightarrow>\n            isLeaf_pt no low high) \\<and>\n           var no = var p;\n        p \\<in> set prx \\<or> p \\<in> set sfx;\n        (\\<exists>pt\\<in>set prx.\n            repNodes_eq pt p low high repa) \\<longrightarrow>\n        repa p =\n        hd (filter (\\<lambda>sn. repNodes_eq sn p low high repa) prx);\n        \\<forall>pt\\<in>set prx. \\<not> repNodes_eq pt p low high repa;\n        repNodes_eq nodeslist p low high repa\\<rbrakk>\n       \\<Longrightarrow> \\<not> isLeaf_pt p low high\n 2. \\<And>var low high p repa next nodeslist prx sfx.\n       \\<lbrakk>nodeslist \\<noteq> Null; List nodeslist next sfx;\n        \\<not> isLeaf_pt p low high;\n        \\<forall>no\\<in>set prx \\<union> set sfx.\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           (isLeaf_pt p low high \\<longrightarrow>\n            isLeaf_pt no low high) \\<and>\n           var no = var p;\n        p \\<in> set prx \\<or> p \\<in> set sfx;\n        (\\<exists>pt\\<in>set prx.\n            repNodes_eq pt p low high repa) \\<longrightarrow>\n        repa p =\n        hd (filter (\\<lambda>sn. repNodes_eq sn p low high repa) prx);\n        \\<forall>pt\\<in>set prx. \\<not> repNodes_eq pt p low high repa;\n        repNodes_eq nodeslist p low high repa\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>no\\<in>set prx \\<union> set sfx.\n                             no \\<noteq> Null \\<and>\n                             (low no = Null) = (high no = Null) \\<and>\n                             (isLeaf_pt p low high \\<longrightarrow>\n                              isLeaf_pt no low high) \\<and>\n                             var no = var p) \\<and>\n                         (p \\<in> set prx \\<or> p \\<in> set sfx) \\<and>\n                         ((\\<exists>pt\\<in>set prx \\<union> set sfx.\n                              repNodes_eq pt p low high\n                               repa) \\<longrightarrow>\n                          nodeslist =\n                          hd (filter\n                               (\\<lambda>sn. repNodes_eq sn p low high repa)\n                               prx @\n                              filter\n                               (\\<lambda>sn. repNodes_eq sn p low high repa)\n                               sfx)) \\<and>\n                         ((\\<forall>pt\\<in>set prx \\<union> set sfx.\n                              \\<not> repNodes_eq pt p low high\nrepa) \\<longrightarrow>\n                          repa = repa(p := nodeslist))\n 3. \\<And>var low high rep p ns lowa higha repa next pa nodeslist prx sfx.\n       \\<lbrakk>nodeslist \\<noteq> Null; List nodeslist next sfx;\n        \\<not> isLeaf_pt p low high;\n        \\<forall>no\\<in>set (prx @ sfx).\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           (isLeaf_pt p low high \\<longrightarrow>\n            isLeaf_pt no low high) \\<and>\n           var no = var p;\n        p \\<in> set (prx @ sfx);\n        (\\<exists>pt\\<in>set prx.\n            repNodes_eq pt p low high repa) \\<longrightarrow>\n        repa p =\n        hd (filter (\\<lambda>sn. repNodes_eq sn p low high repa) prx) \\<and>\n        (\\<forall>pt. pt \\<noteq> p \\<longrightarrow> repa pt = repa pt);\n        \\<forall>pt\\<in>set prx.\n           \\<not> repNodes_eq pt p low high repa\\<rbrakk>\n       \\<Longrightarrow> \\<not> repNodes_eq nodeslist p low high\n                                 repa \\<longrightarrow>\n                         length (list (next nodeslist) next)\n                         < length (list nodeslist next) \\<and>\n                         (\\<exists>prxa sfxa.\n                             List (next nodeslist) next sfxa \\<and>\n                             prx @ sfx = prxa @ sfxa \\<and>\n                             \\<not> isLeaf_pt p low high \\<and>\n                             (\\<forall>no\\<in>set (prx @ sfx).\n                                 no \\<noteq> Null \\<and>\n                                 (low no = Null) = (high no = Null) \\<and>\n                                 (isLeaf_pt p low high \\<longrightarrow>\n                                  isLeaf_pt no low high) \\<and>\n                                 var no = var p) \\<and>\n                             p \\<in> set (prx @ sfx) \\<and>\n                             ((\\<exists>pt\\<in>set prxa.\n                                  repNodes_eq pt p low high\n                                   repa) \\<longrightarrow>\n                              repa p =\n                              hd (filter\n                                   (\\<lambda>sn.\n repNodes_eq sn p low high repa)\n                                   prxa) \\<and>\n                              (\\<forall>pt.\n                                  pt \\<noteq> p \\<longrightarrow>\n                                  repa pt = repa pt)) \\<and>\n                             ((\\<forall>pt\\<in>set prxa.\n                                  \\<not> repNodes_eq pt p low high\n    repa) \\<longrightarrow>\n                              repa = repa) \\<and>\n                             (next nodeslist \\<noteq> Null \\<longrightarrow>\n                              (\\<forall>pt\\<in>set prxa.\n                                  \\<not> repNodes_eq pt p low high\n    repa)) \\<and>\n                             p = p \\<and> high = high \\<and> low = low)\n 4. \\<And>ns var low high rep next p nodeslist.\n       \\<lbrakk>List nodeslist next ns;\n        \\<forall>no\\<in>set ns.\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           (isLeaf_pt p low high \\<longrightarrow>\n            isLeaf_pt no low high) \\<and>\n           var no = var p;\n        p \\<in> set ns; isLeaf_pt p low high\\<rbrakk>\n       \\<Longrightarrow> nodeslist =\n                         hd (filter\n                              (\\<lambda>sn. repNodes_eq sn p low high rep)\n                              ns) \\<and>\n                         var nodeslist = var p\n 5. \\<And>var low high rep p ns lowa higha repa next pa nodeslist.\n       \\<lbrakk>\\<exists>prx sfx.\n                   List nodeslist next sfx \\<and>\n                   ns = prx @ sfx \\<and>\n                   \\<not> isLeaf_pt pa lowa higha \\<and>\n                   (\\<forall>no\\<in>set ns.\n                       no \\<noteq> Null \\<and>\n                       (low no = Null) = (high no = Null) \\<and>\n                       (isLeaf_pt p low high \\<longrightarrow>\n                        isLeaf_pt no low high) \\<and>\n                       var no = var p) \\<and>\n                   p \\<in> set ns \\<and>\n                   ((\\<exists>pt\\<in>set prx.\n                        repNodes_eq pt p low high rep) \\<longrightarrow>\n                    repa p =\n                    hd (filter (\\<lambda>sn. repNodes_eq sn p low high rep)\n                         prx) \\<and>\n                    (\\<forall>pt.\n                        pt \\<noteq> p \\<longrightarrow>\n                        rep pt = repa pt)) \\<and>\n                   ((\\<forall>pt\\<in>set prx.\n                        \\<not> repNodes_eq pt p low high\n                                rep) \\<longrightarrow>\n                    rep = repa) \\<and>\n                   (nodeslist \\<noteq> Null \\<longrightarrow>\n                    (\\<forall>pt\\<in>set prx.\n                        \\<not> repNodes_eq pt p low high rep)) \\<and>\n                   pa = p \\<and> higha = high \\<and> lowa = low;\n        \\<not> nodeslist \\<noteq> Null\\<rbrakk>\n       \\<Longrightarrow> repa p =\n                         hd (filter\n                              (\\<lambda>sn. repNodes_eq sn p low high rep)\n                              ns) \\<and>\n                         (\\<forall>pt.\n                             pt \\<noteq> p \\<longrightarrow>\n                             rep pt = repa pt) \\<and>\n                         var (repa p) = var p", "apply    assumption"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>var low high p repa next nodeslist prx sfx.\n       \\<lbrakk>nodeslist \\<noteq> Null; List nodeslist next sfx;\n        \\<not> isLeaf_pt p low high;\n        \\<forall>no\\<in>set prx \\<union> set sfx.\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           (isLeaf_pt p low high \\<longrightarrow>\n            isLeaf_pt no low high) \\<and>\n           var no = var p;\n        p \\<in> set prx \\<or> p \\<in> set sfx;\n        (\\<exists>pt\\<in>set prx.\n            repNodes_eq pt p low high repa) \\<longrightarrow>\n        repa p =\n        hd (filter (\\<lambda>sn. repNodes_eq sn p low high repa) prx);\n        \\<forall>pt\\<in>set prx. \\<not> repNodes_eq pt p low high repa;\n        repNodes_eq nodeslist p low high repa\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>no\\<in>set prx \\<union> set sfx.\n                             no \\<noteq> Null \\<and>\n                             (low no = Null) = (high no = Null) \\<and>\n                             (isLeaf_pt p low high \\<longrightarrow>\n                              isLeaf_pt no low high) \\<and>\n                             var no = var p) \\<and>\n                         (p \\<in> set prx \\<or> p \\<in> set sfx) \\<and>\n                         ((\\<exists>pt\\<in>set prx \\<union> set sfx.\n                              repNodes_eq pt p low high\n                               repa) \\<longrightarrow>\n                          nodeslist =\n                          hd (filter\n                               (\\<lambda>sn. repNodes_eq sn p low high repa)\n                               prx @\n                              filter\n                               (\\<lambda>sn. repNodes_eq sn p low high repa)\n                               sfx)) \\<and>\n                         ((\\<forall>pt\\<in>set prx \\<union> set sfx.\n                              \\<not> repNodes_eq pt p low high\nrepa) \\<longrightarrow>\n                          repa = repa(p := nodeslist))\n 2. \\<And>var low high rep p ns lowa higha repa next pa nodeslist prx sfx.\n       \\<lbrakk>nodeslist \\<noteq> Null; List nodeslist next sfx;\n        \\<not> isLeaf_pt p low high;\n        \\<forall>no\\<in>set (prx @ sfx).\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           (isLeaf_pt p low high \\<longrightarrow>\n            isLeaf_pt no low high) \\<and>\n           var no = var p;\n        p \\<in> set (prx @ sfx);\n        (\\<exists>pt\\<in>set prx.\n            repNodes_eq pt p low high repa) \\<longrightarrow>\n        repa p =\n        hd (filter (\\<lambda>sn. repNodes_eq sn p low high repa) prx) \\<and>\n        (\\<forall>pt. pt \\<noteq> p \\<longrightarrow> repa pt = repa pt);\n        \\<forall>pt\\<in>set prx.\n           \\<not> repNodes_eq pt p low high repa\\<rbrakk>\n       \\<Longrightarrow> \\<not> repNodes_eq nodeslist p low high\n                                 repa \\<longrightarrow>\n                         length (list (next nodeslist) next)\n                         < length (list nodeslist next) \\<and>\n                         (\\<exists>prxa sfxa.\n                             List (next nodeslist) next sfxa \\<and>\n                             prx @ sfx = prxa @ sfxa \\<and>\n                             \\<not> isLeaf_pt p low high \\<and>\n                             (\\<forall>no\\<in>set (prx @ sfx).\n                                 no \\<noteq> Null \\<and>\n                                 (low no = Null) = (high no = Null) \\<and>\n                                 (isLeaf_pt p low high \\<longrightarrow>\n                                  isLeaf_pt no low high) \\<and>\n                                 var no = var p) \\<and>\n                             p \\<in> set (prx @ sfx) \\<and>\n                             ((\\<exists>pt\\<in>set prxa.\n                                  repNodes_eq pt p low high\n                                   repa) \\<longrightarrow>\n                              repa p =\n                              hd (filter\n                                   (\\<lambda>sn.\n repNodes_eq sn p low high repa)\n                                   prxa) \\<and>\n                              (\\<forall>pt.\n                                  pt \\<noteq> p \\<longrightarrow>\n                                  repa pt = repa pt)) \\<and>\n                             ((\\<forall>pt\\<in>set prxa.\n                                  \\<not> repNodes_eq pt p low high\n    repa) \\<longrightarrow>\n                              repa = repa) \\<and>\n                             (next nodeslist \\<noteq> Null \\<longrightarrow>\n                              (\\<forall>pt\\<in>set prxa.\n                                  \\<not> repNodes_eq pt p low high\n    repa)) \\<and>\n                             p = p \\<and> high = high \\<and> low = low)\n 3. \\<And>ns var low high rep next p nodeslist.\n       \\<lbrakk>List nodeslist next ns;\n        \\<forall>no\\<in>set ns.\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           (isLeaf_pt p low high \\<longrightarrow>\n            isLeaf_pt no low high) \\<and>\n           var no = var p;\n        p \\<in> set ns; isLeaf_pt p low high\\<rbrakk>\n       \\<Longrightarrow> nodeslist =\n                         hd (filter\n                              (\\<lambda>sn. repNodes_eq sn p low high rep)\n                              ns) \\<and>\n                         var nodeslist = var p\n 4. \\<And>var low high rep p ns lowa higha repa next pa nodeslist.\n       \\<lbrakk>\\<exists>prx sfx.\n                   List nodeslist next sfx \\<and>\n                   ns = prx @ sfx \\<and>\n                   \\<not> isLeaf_pt pa lowa higha \\<and>\n                   (\\<forall>no\\<in>set ns.\n                       no \\<noteq> Null \\<and>\n                       (low no = Null) = (high no = Null) \\<and>\n                       (isLeaf_pt p low high \\<longrightarrow>\n                        isLeaf_pt no low high) \\<and>\n                       var no = var p) \\<and>\n                   p \\<in> set ns \\<and>\n                   ((\\<exists>pt\\<in>set prx.\n                        repNodes_eq pt p low high rep) \\<longrightarrow>\n                    repa p =\n                    hd (filter (\\<lambda>sn. repNodes_eq sn p low high rep)\n                         prx) \\<and>\n                    (\\<forall>pt.\n                        pt \\<noteq> p \\<longrightarrow>\n                        rep pt = repa pt)) \\<and>\n                   ((\\<forall>pt\\<in>set prx.\n                        \\<not> repNodes_eq pt p low high\n                                rep) \\<longrightarrow>\n                    rep = repa) \\<and>\n                   (nodeslist \\<noteq> Null \\<longrightarrow>\n                    (\\<forall>pt\\<in>set prx.\n                        \\<not> repNodes_eq pt p low high rep)) \\<and>\n                   pa = p \\<and> higha = high \\<and> lowa = low;\n        \\<not> nodeslist \\<noteq> Null\\<rbrakk>\n       \\<Longrightarrow> repa p =\n                         hd (filter\n                              (\\<lambda>sn. repNodes_eq sn p low high rep)\n                              ns) \\<and>\n                         (\\<forall>pt.\n                             pt \\<noteq> p \\<longrightarrow>\n                             rep pt = repa pt) \\<and>\n                         var (repa p) = var p", "prefer 2"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>var low high rep p ns lowa higha repa next pa nodeslist prx sfx.\n       \\<lbrakk>nodeslist \\<noteq> Null; List nodeslist next sfx;\n        \\<not> isLeaf_pt p low high;\n        \\<forall>no\\<in>set (prx @ sfx).\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           (isLeaf_pt p low high \\<longrightarrow>\n            isLeaf_pt no low high) \\<and>\n           var no = var p;\n        p \\<in> set (prx @ sfx);\n        (\\<exists>pt\\<in>set prx.\n            repNodes_eq pt p low high repa) \\<longrightarrow>\n        repa p =\n        hd (filter (\\<lambda>sn. repNodes_eq sn p low high repa) prx) \\<and>\n        (\\<forall>pt. pt \\<noteq> p \\<longrightarrow> repa pt = repa pt);\n        \\<forall>pt\\<in>set prx.\n           \\<not> repNodes_eq pt p low high repa\\<rbrakk>\n       \\<Longrightarrow> \\<not> repNodes_eq nodeslist p low high\n                                 repa \\<longrightarrow>\n                         length (list (next nodeslist) next)\n                         < length (list nodeslist next) \\<and>\n                         (\\<exists>prxa sfxa.\n                             List (next nodeslist) next sfxa \\<and>\n                             prx @ sfx = prxa @ sfxa \\<and>\n                             \\<not> isLeaf_pt p low high \\<and>\n                             (\\<forall>no\\<in>set (prx @ sfx).\n                                 no \\<noteq> Null \\<and>\n                                 (low no = Null) = (high no = Null) \\<and>\n                                 (isLeaf_pt p low high \\<longrightarrow>\n                                  isLeaf_pt no low high) \\<and>\n                                 var no = var p) \\<and>\n                             p \\<in> set (prx @ sfx) \\<and>\n                             ((\\<exists>pt\\<in>set prxa.\n                                  repNodes_eq pt p low high\n                                   repa) \\<longrightarrow>\n                              repa p =\n                              hd (filter\n                                   (\\<lambda>sn.\n repNodes_eq sn p low high repa)\n                                   prxa) \\<and>\n                              (\\<forall>pt.\n                                  pt \\<noteq> p \\<longrightarrow>\n                                  repa pt = repa pt)) \\<and>\n                             ((\\<forall>pt\\<in>set prxa.\n                                  \\<not> repNodes_eq pt p low high\n    repa) \\<longrightarrow>\n                              repa = repa) \\<and>\n                             (next nodeslist \\<noteq> Null \\<longrightarrow>\n                              (\\<forall>pt\\<in>set prxa.\n                                  \\<not> repNodes_eq pt p low high\n    repa)) \\<and>\n                             p = p \\<and> high = high \\<and> low = low)\n 2. \\<And>var low high p repa next nodeslist prx sfx.\n       \\<lbrakk>nodeslist \\<noteq> Null; List nodeslist next sfx;\n        \\<not> isLeaf_pt p low high;\n        \\<forall>no\\<in>set prx \\<union> set sfx.\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           (isLeaf_pt p low high \\<longrightarrow>\n            isLeaf_pt no low high) \\<and>\n           var no = var p;\n        p \\<in> set prx \\<or> p \\<in> set sfx;\n        (\\<exists>pt\\<in>set prx.\n            repNodes_eq pt p low high repa) \\<longrightarrow>\n        repa p =\n        hd (filter (\\<lambda>sn. repNodes_eq sn p low high repa) prx);\n        \\<forall>pt\\<in>set prx. \\<not> repNodes_eq pt p low high repa;\n        repNodes_eq nodeslist p low high repa\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>no\\<in>set prx \\<union> set sfx.\n                             no \\<noteq> Null \\<and>\n                             (low no = Null) = (high no = Null) \\<and>\n                             (isLeaf_pt p low high \\<longrightarrow>\n                              isLeaf_pt no low high) \\<and>\n                             var no = var p) \\<and>\n                         (p \\<in> set prx \\<or> p \\<in> set sfx) \\<and>\n                         ((\\<exists>pt\\<in>set prx \\<union> set sfx.\n                              repNodes_eq pt p low high\n                               repa) \\<longrightarrow>\n                          nodeslist =\n                          hd (filter\n                               (\\<lambda>sn. repNodes_eq sn p low high repa)\n                               prx @\n                              filter\n                               (\\<lambda>sn. repNodes_eq sn p low high repa)\n                               sfx)) \\<and>\n                         ((\\<forall>pt\\<in>set prx \\<union> set sfx.\n                              \\<not> repNodes_eq pt p low high\nrepa) \\<longrightarrow>\n                          repa = repa(p := nodeslist))\n 3. \\<And>ns var low high rep next p nodeslist.\n       \\<lbrakk>List nodeslist next ns;\n        \\<forall>no\\<in>set ns.\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           (isLeaf_pt p low high \\<longrightarrow>\n            isLeaf_pt no low high) \\<and>\n           var no = var p;\n        p \\<in> set ns; isLeaf_pt p low high\\<rbrakk>\n       \\<Longrightarrow> nodeslist =\n                         hd (filter\n                              (\\<lambda>sn. repNodes_eq sn p low high rep)\n                              ns) \\<and>\n                         var nodeslist = var p\n 4. \\<And>var low high rep p ns lowa higha repa next pa nodeslist.\n       \\<lbrakk>\\<exists>prx sfx.\n                   List nodeslist next sfx \\<and>\n                   ns = prx @ sfx \\<and>\n                   \\<not> isLeaf_pt pa lowa higha \\<and>\n                   (\\<forall>no\\<in>set ns.\n                       no \\<noteq> Null \\<and>\n                       (low no = Null) = (high no = Null) \\<and>\n                       (isLeaf_pt p low high \\<longrightarrow>\n                        isLeaf_pt no low high) \\<and>\n                       var no = var p) \\<and>\n                   p \\<in> set ns \\<and>\n                   ((\\<exists>pt\\<in>set prx.\n                        repNodes_eq pt p low high rep) \\<longrightarrow>\n                    repa p =\n                    hd (filter (\\<lambda>sn. repNodes_eq sn p low high rep)\n                         prx) \\<and>\n                    (\\<forall>pt.\n                        pt \\<noteq> p \\<longrightarrow>\n                        rep pt = repa pt)) \\<and>\n                   ((\\<forall>pt\\<in>set prx.\n                        \\<not> repNodes_eq pt p low high\n                                rep) \\<longrightarrow>\n                    rep = repa) \\<and>\n                   (nodeslist \\<noteq> Null \\<longrightarrow>\n                    (\\<forall>pt\\<in>set prx.\n                        \\<not> repNodes_eq pt p low high rep)) \\<and>\n                   pa = p \\<and> higha = high \\<and> lowa = low;\n        \\<not> nodeslist \\<noteq> Null\\<rbrakk>\n       \\<Longrightarrow> repa p =\n                         hd (filter\n                              (\\<lambda>sn. repNodes_eq sn p low high rep)\n                              ns) \\<and>\n                         (\\<forall>pt.\n                             pt \\<noteq> p \\<longrightarrow>\n                             rep pt = repa pt) \\<and>\n                         var (repa p) = var p", "apply    clarify"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>var low high rep p ns lowa higha repa next pa nodeslist prx sfx.\n       \\<lbrakk>nodeslist \\<noteq> Null; List nodeslist next sfx;\n        \\<not> isLeaf_pt p low high;\n        \\<forall>no\\<in>set (prx @ sfx).\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           (isLeaf_pt p low high \\<longrightarrow>\n            isLeaf_pt no low high) \\<and>\n           var no = var p;\n        p \\<in> set (prx @ sfx);\n        (\\<exists>pt\\<in>set prx.\n            repNodes_eq pt p low high repa) \\<longrightarrow>\n        repa p =\n        hd (filter (\\<lambda>sn. repNodes_eq sn p low high repa) prx) \\<and>\n        (\\<forall>pt. pt \\<noteq> p \\<longrightarrow> repa pt = repa pt);\n        \\<forall>pt\\<in>set prx. \\<not> repNodes_eq pt p low high repa;\n        \\<not> repNodes_eq nodeslist p low high repa\\<rbrakk>\n       \\<Longrightarrow> length (list (next nodeslist) next)\n                         < length (list nodeslist next) \\<and>\n                         (\\<exists>prxa sfxa.\n                             List (next nodeslist) next sfxa \\<and>\n                             prx @ sfx = prxa @ sfxa \\<and>\n                             \\<not> isLeaf_pt p low high \\<and>\n                             (\\<forall>no\\<in>set (prx @ sfx).\n                                 no \\<noteq> Null \\<and>\n                                 (low no = Null) = (high no = Null) \\<and>\n                                 (isLeaf_pt p low high \\<longrightarrow>\n                                  isLeaf_pt no low high) \\<and>\n                                 var no = var p) \\<and>\n                             p \\<in> set (prx @ sfx) \\<and>\n                             ((\\<exists>pt\\<in>set prxa.\n                                  repNodes_eq pt p low high\n                                   repa) \\<longrightarrow>\n                              repa p =\n                              hd (filter\n                                   (\\<lambda>sn.\n repNodes_eq sn p low high repa)\n                                   prxa) \\<and>\n                              (\\<forall>pt.\n                                  pt \\<noteq> p \\<longrightarrow>\n                                  repa pt = repa pt)) \\<and>\n                             ((\\<forall>pt\\<in>set prxa.\n                                  \\<not> repNodes_eq pt p low high\n    repa) \\<longrightarrow>\n                              repa = repa) \\<and>\n                             (next nodeslist \\<noteq> Null \\<longrightarrow>\n                              (\\<forall>pt\\<in>set prxa.\n                                  \\<not> repNodes_eq pt p low high\n    repa)) \\<and>\n                             p = p \\<and> high = high \\<and> low = low)\n 2. \\<And>var low high p repa next nodeslist prx sfx.\n       \\<lbrakk>nodeslist \\<noteq> Null; List nodeslist next sfx;\n        \\<not> isLeaf_pt p low high;\n        \\<forall>no\\<in>set prx \\<union> set sfx.\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           (isLeaf_pt p low high \\<longrightarrow>\n            isLeaf_pt no low high) \\<and>\n           var no = var p;\n        p \\<in> set prx \\<or> p \\<in> set sfx;\n        (\\<exists>pt\\<in>set prx.\n            repNodes_eq pt p low high repa) \\<longrightarrow>\n        repa p =\n        hd (filter (\\<lambda>sn. repNodes_eq sn p low high repa) prx);\n        \\<forall>pt\\<in>set prx. \\<not> repNodes_eq pt p low high repa;\n        repNodes_eq nodeslist p low high repa\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>no\\<in>set prx \\<union> set sfx.\n                             no \\<noteq> Null \\<and>\n                             (low no = Null) = (high no = Null) \\<and>\n                             (isLeaf_pt p low high \\<longrightarrow>\n                              isLeaf_pt no low high) \\<and>\n                             var no = var p) \\<and>\n                         (p \\<in> set prx \\<or> p \\<in> set sfx) \\<and>\n                         ((\\<exists>pt\\<in>set prx \\<union> set sfx.\n                              repNodes_eq pt p low high\n                               repa) \\<longrightarrow>\n                          nodeslist =\n                          hd (filter\n                               (\\<lambda>sn. repNodes_eq sn p low high repa)\n                               prx @\n                              filter\n                               (\\<lambda>sn. repNodes_eq sn p low high repa)\n                               sfx)) \\<and>\n                         ((\\<forall>pt\\<in>set prx \\<union> set sfx.\n                              \\<not> repNodes_eq pt p low high\nrepa) \\<longrightarrow>\n                          repa = repa(p := nodeslist))\n 3. \\<And>ns var low high rep next p nodeslist.\n       \\<lbrakk>List nodeslist next ns;\n        \\<forall>no\\<in>set ns.\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           (isLeaf_pt p low high \\<longrightarrow>\n            isLeaf_pt no low high) \\<and>\n           var no = var p;\n        p \\<in> set ns; isLeaf_pt p low high\\<rbrakk>\n       \\<Longrightarrow> nodeslist =\n                         hd (filter\n                              (\\<lambda>sn. repNodes_eq sn p low high rep)\n                              ns) \\<and>\n                         var nodeslist = var p\n 4. \\<And>var low high rep p ns lowa higha repa next pa nodeslist.\n       \\<lbrakk>\\<exists>prx sfx.\n                   List nodeslist next sfx \\<and>\n                   ns = prx @ sfx \\<and>\n                   \\<not> isLeaf_pt pa lowa higha \\<and>\n                   (\\<forall>no\\<in>set ns.\n                       no \\<noteq> Null \\<and>\n                       (low no = Null) = (high no = Null) \\<and>\n                       (isLeaf_pt p low high \\<longrightarrow>\n                        isLeaf_pt no low high) \\<and>\n                       var no = var p) \\<and>\n                   p \\<in> set ns \\<and>\n                   ((\\<exists>pt\\<in>set prx.\n                        repNodes_eq pt p low high rep) \\<longrightarrow>\n                    repa p =\n                    hd (filter (\\<lambda>sn. repNodes_eq sn p low high rep)\n                         prx) \\<and>\n                    (\\<forall>pt.\n                        pt \\<noteq> p \\<longrightarrow>\n                        rep pt = repa pt)) \\<and>\n                   ((\\<forall>pt\\<in>set prx.\n                        \\<not> repNodes_eq pt p low high\n                                rep) \\<longrightarrow>\n                    rep = repa) \\<and>\n                   (nodeslist \\<noteq> Null \\<longrightarrow>\n                    (\\<forall>pt\\<in>set prx.\n                        \\<not> repNodes_eq pt p low high rep)) \\<and>\n                   pa = p \\<and> higha = high \\<and> lowa = low;\n        \\<not> nodeslist \\<noteq> Null\\<rbrakk>\n       \\<Longrightarrow> repa p =\n                         hd (filter\n                              (\\<lambda>sn. repNodes_eq sn p low high rep)\n                              ns) \\<and>\n                         (\\<forall>pt.\n                             pt \\<noteq> p \\<longrightarrow>\n                             rep pt = repa pt) \\<and>\n                         var (repa p) = var p", "apply    (simp (no_asm_use))"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>var low high p repa next nodeslist prx sfx.\n       \\<lbrakk>nodeslist \\<noteq> Null; List nodeslist next sfx;\n        \\<not> isLeaf_pt p low high;\n        \\<forall>no\\<in>set prx \\<union> set sfx.\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           (isLeaf_pt p low high \\<longrightarrow>\n            isLeaf_pt no low high) \\<and>\n           var no = var p;\n        p \\<in> set prx \\<or> p \\<in> set sfx;\n        (\\<exists>pt\\<in>set prx.\n            repNodes_eq pt p low high repa) \\<longrightarrow>\n        repa p =\n        hd (filter (\\<lambda>sn. repNodes_eq sn p low high repa) prx);\n        \\<forall>pt\\<in>set prx. \\<not> repNodes_eq pt p low high repa;\n        \\<not> repNodes_eq nodeslist p low high repa\\<rbrakk>\n       \\<Longrightarrow> length (list (next nodeslist) next)\n                         < length (list nodeslist next) \\<and>\n                         (\\<exists>prxa sfxa.\n                             List (next nodeslist) next sfxa \\<and>\n                             prx @ sfx = prxa @ sfxa \\<and>\n                             \\<not> isLeaf_pt p low high \\<and>\n                             (\\<forall>no\\<in>set prx \\<union> set sfx.\n                                 no \\<noteq> Null \\<and>\n                                 (low no = Null) = (high no = Null) \\<and>\n                                 (isLeaf_pt p low high \\<longrightarrow>\n                                  isLeaf_pt no low high) \\<and>\n                                 var no = var p) \\<and>\n                             (p \\<in> set prx \\<or> p \\<in> set sfx) \\<and>\n                             ((\\<exists>pt\\<in>set prxa.\n                                  repNodes_eq pt p low high\n                                   repa) \\<longrightarrow>\n                              repa p =\n                              hd (filter\n                                   (\\<lambda>sn.\n repNodes_eq sn p low high repa)\n                                   prxa)) \\<and>\n                             (next nodeslist \\<noteq> Null \\<longrightarrow>\n                              (\\<forall>pt\\<in>set prxa.\n                                  \\<not> repNodes_eq pt p low high repa)))\n 2. \\<And>var low high p repa next nodeslist prx sfx.\n       \\<lbrakk>nodeslist \\<noteq> Null; List nodeslist next sfx;\n        \\<not> isLeaf_pt p low high;\n        \\<forall>no\\<in>set prx \\<union> set sfx.\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           (isLeaf_pt p low high \\<longrightarrow>\n            isLeaf_pt no low high) \\<and>\n           var no = var p;\n        p \\<in> set prx \\<or> p \\<in> set sfx;\n        (\\<exists>pt\\<in>set prx.\n            repNodes_eq pt p low high repa) \\<longrightarrow>\n        repa p =\n        hd (filter (\\<lambda>sn. repNodes_eq sn p low high repa) prx);\n        \\<forall>pt\\<in>set prx. \\<not> repNodes_eq pt p low high repa;\n        repNodes_eq nodeslist p low high repa\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>no\\<in>set prx \\<union> set sfx.\n                             no \\<noteq> Null \\<and>\n                             (low no = Null) = (high no = Null) \\<and>\n                             (isLeaf_pt p low high \\<longrightarrow>\n                              isLeaf_pt no low high) \\<and>\n                             var no = var p) \\<and>\n                         (p \\<in> set prx \\<or> p \\<in> set sfx) \\<and>\n                         ((\\<exists>pt\\<in>set prx \\<union> set sfx.\n                              repNodes_eq pt p low high\n                               repa) \\<longrightarrow>\n                          nodeslist =\n                          hd (filter\n                               (\\<lambda>sn. repNodes_eq sn p low high repa)\n                               prx @\n                              filter\n                               (\\<lambda>sn. repNodes_eq sn p low high repa)\n                               sfx)) \\<and>\n                         ((\\<forall>pt\\<in>set prx \\<union> set sfx.\n                              \\<not> repNodes_eq pt p low high\nrepa) \\<longrightarrow>\n                          repa = repa(p := nodeslist))\n 3. \\<And>ns var low high rep next p nodeslist.\n       \\<lbrakk>List nodeslist next ns;\n        \\<forall>no\\<in>set ns.\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           (isLeaf_pt p low high \\<longrightarrow>\n            isLeaf_pt no low high) \\<and>\n           var no = var p;\n        p \\<in> set ns; isLeaf_pt p low high\\<rbrakk>\n       \\<Longrightarrow> nodeslist =\n                         hd (filter\n                              (\\<lambda>sn. repNodes_eq sn p low high rep)\n                              ns) \\<and>\n                         var nodeslist = var p\n 4. \\<And>var low high rep p ns lowa higha repa next pa nodeslist.\n       \\<lbrakk>\\<exists>prx sfx.\n                   List nodeslist next sfx \\<and>\n                   ns = prx @ sfx \\<and>\n                   \\<not> isLeaf_pt pa lowa higha \\<and>\n                   (\\<forall>no\\<in>set ns.\n                       no \\<noteq> Null \\<and>\n                       (low no = Null) = (high no = Null) \\<and>\n                       (isLeaf_pt p low high \\<longrightarrow>\n                        isLeaf_pt no low high) \\<and>\n                       var no = var p) \\<and>\n                   p \\<in> set ns \\<and>\n                   ((\\<exists>pt\\<in>set prx.\n                        repNodes_eq pt p low high rep) \\<longrightarrow>\n                    repa p =\n                    hd (filter (\\<lambda>sn. repNodes_eq sn p low high rep)\n                         prx) \\<and>\n                    (\\<forall>pt.\n                        pt \\<noteq> p \\<longrightarrow>\n                        rep pt = repa pt)) \\<and>\n                   ((\\<forall>pt\\<in>set prx.\n                        \\<not> repNodes_eq pt p low high\n                                rep) \\<longrightarrow>\n                    rep = repa) \\<and>\n                   (nodeslist \\<noteq> Null \\<longrightarrow>\n                    (\\<forall>pt\\<in>set prx.\n                        \\<not> repNodes_eq pt p low high rep)) \\<and>\n                   pa = p \\<and> higha = high \\<and> lowa = low;\n        \\<not> nodeslist \\<noteq> Null\\<rbrakk>\n       \\<Longrightarrow> repa p =\n                         hd (filter\n                              (\\<lambda>sn. repNodes_eq sn p low high rep)\n                              ns) \\<and>\n                         (\\<forall>pt.\n                             pt \\<noteq> p \\<longrightarrow>\n                             rep pt = repa pt) \\<and>\n                         var (repa p) = var p", "apply    (rule conjI)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>var low high p repa next nodeslist prx sfx.\n       \\<lbrakk>nodeslist \\<noteq> Null; List nodeslist next sfx;\n        \\<not> isLeaf_pt p low high;\n        \\<forall>no\\<in>set prx \\<union> set sfx.\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           (isLeaf_pt p low high \\<longrightarrow>\n            isLeaf_pt no low high) \\<and>\n           var no = var p;\n        p \\<in> set prx \\<or> p \\<in> set sfx;\n        (\\<exists>pt\\<in>set prx.\n            repNodes_eq pt p low high repa) \\<longrightarrow>\n        repa p =\n        hd (filter (\\<lambda>sn. repNodes_eq sn p low high repa) prx);\n        \\<forall>pt\\<in>set prx. \\<not> repNodes_eq pt p low high repa;\n        \\<not> repNodes_eq nodeslist p low high repa\\<rbrakk>\n       \\<Longrightarrow> length (list (next nodeslist) next)\n                         < length (list nodeslist next)\n 2. \\<And>var low high p repa next nodeslist prx sfx.\n       \\<lbrakk>nodeslist \\<noteq> Null; List nodeslist next sfx;\n        \\<not> isLeaf_pt p low high;\n        \\<forall>no\\<in>set prx \\<union> set sfx.\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           (isLeaf_pt p low high \\<longrightarrow>\n            isLeaf_pt no low high) \\<and>\n           var no = var p;\n        p \\<in> set prx \\<or> p \\<in> set sfx;\n        (\\<exists>pt\\<in>set prx.\n            repNodes_eq pt p low high repa) \\<longrightarrow>\n        repa p =\n        hd (filter (\\<lambda>sn. repNodes_eq sn p low high repa) prx);\n        \\<forall>pt\\<in>set prx. \\<not> repNodes_eq pt p low high repa;\n        \\<not> repNodes_eq nodeslist p low high repa\\<rbrakk>\n       \\<Longrightarrow> \\<exists>prxa sfxa.\n                            List (next nodeslist) next sfxa \\<and>\n                            prx @ sfx = prxa @ sfxa \\<and>\n                            \\<not> isLeaf_pt p low high \\<and>\n                            (\\<forall>no\\<in>set prx \\<union> set sfx.\n                                no \\<noteq> Null \\<and>\n                                (low no = Null) = (high no = Null) \\<and>\n                                (isLeaf_pt p low high \\<longrightarrow>\n                                 isLeaf_pt no low high) \\<and>\n                                var no = var p) \\<and>\n                            (p \\<in> set prx \\<or> p \\<in> set sfx) \\<and>\n                            ((\\<exists>pt\\<in>set prxa.\n                                 repNodes_eq pt p low high\n                                  repa) \\<longrightarrow>\n                             repa p =\n                             hd (filter\n                                  (\\<lambda>sn.\nrepNodes_eq sn p low high repa)\n                                  prxa)) \\<and>\n                            (next nodeslist \\<noteq> Null \\<longrightarrow>\n                             (\\<forall>pt\\<in>set prxa.\n                                 \\<not> repNodes_eq pt p low high repa))\n 3. \\<And>var low high p repa next nodeslist prx sfx.\n       \\<lbrakk>nodeslist \\<noteq> Null; List nodeslist next sfx;\n        \\<not> isLeaf_pt p low high;\n        \\<forall>no\\<in>set prx \\<union> set sfx.\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           (isLeaf_pt p low high \\<longrightarrow>\n            isLeaf_pt no low high) \\<and>\n           var no = var p;\n        p \\<in> set prx \\<or> p \\<in> set sfx;\n        (\\<exists>pt\\<in>set prx.\n            repNodes_eq pt p low high repa) \\<longrightarrow>\n        repa p =\n        hd (filter (\\<lambda>sn. repNodes_eq sn p low high repa) prx);\n        \\<forall>pt\\<in>set prx. \\<not> repNodes_eq pt p low high repa;\n        repNodes_eq nodeslist p low high repa\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>no\\<in>set prx \\<union> set sfx.\n                             no \\<noteq> Null \\<and>\n                             (low no = Null) = (high no = Null) \\<and>\n                             (isLeaf_pt p low high \\<longrightarrow>\n                              isLeaf_pt no low high) \\<and>\n                             var no = var p) \\<and>\n                         (p \\<in> set prx \\<or> p \\<in> set sfx) \\<and>\n                         ((\\<exists>pt\\<in>set prx \\<union> set sfx.\n                              repNodes_eq pt p low high\n                               repa) \\<longrightarrow>\n                          nodeslist =\n                          hd (filter\n                               (\\<lambda>sn. repNodes_eq sn p low high repa)\n                               prx @\n                              filter\n                               (\\<lambda>sn. repNodes_eq sn p low high repa)\n                               sfx)) \\<and>\n                         ((\\<forall>pt\\<in>set prx \\<union> set sfx.\n                              \\<not> repNodes_eq pt p low high\nrepa) \\<longrightarrow>\n                          repa = repa(p := nodeslist))\n 4. \\<And>ns var low high rep next p nodeslist.\n       \\<lbrakk>List nodeslist next ns;\n        \\<forall>no\\<in>set ns.\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           (isLeaf_pt p low high \\<longrightarrow>\n            isLeaf_pt no low high) \\<and>\n           var no = var p;\n        p \\<in> set ns; isLeaf_pt p low high\\<rbrakk>\n       \\<Longrightarrow> nodeslist =\n                         hd (filter\n                              (\\<lambda>sn. repNodes_eq sn p low high rep)\n                              ns) \\<and>\n                         var nodeslist = var p\n 5. \\<And>var low high rep p ns lowa higha repa next pa nodeslist.\n       \\<lbrakk>\\<exists>prx sfx.\n                   List nodeslist next sfx \\<and>\n                   ns = prx @ sfx \\<and>\n                   \\<not> isLeaf_pt pa lowa higha \\<and>\n                   (\\<forall>no\\<in>set ns.\n                       no \\<noteq> Null \\<and>\n                       (low no = Null) = (high no = Null) \\<and>\n                       (isLeaf_pt p low high \\<longrightarrow>\n                        isLeaf_pt no low high) \\<and>\n                       var no = var p) \\<and>\n                   p \\<in> set ns \\<and>\n                   ((\\<exists>pt\\<in>set prx.\n                        repNodes_eq pt p low high rep) \\<longrightarrow>\n                    repa p =\n                    hd (filter (\\<lambda>sn. repNodes_eq sn p low high rep)\n                         prx) \\<and>\n                    (\\<forall>pt.\n                        pt \\<noteq> p \\<longrightarrow>\n                        rep pt = repa pt)) \\<and>\n                   ((\\<forall>pt\\<in>set prx.\n                        \\<not> repNodes_eq pt p low high\n                                rep) \\<longrightarrow>\n                    rep = repa) \\<and>\n                   (nodeslist \\<noteq> Null \\<longrightarrow>\n                    (\\<forall>pt\\<in>set prx.\n                        \\<not> repNodes_eq pt p low high rep)) \\<and>\n                   pa = p \\<and> higha = high \\<and> lowa = low;\n        \\<not> nodeslist \\<noteq> Null\\<rbrakk>\n       \\<Longrightarrow> repa p =\n                         hd (filter\n                              (\\<lambda>sn. repNodes_eq sn p low high rep)\n                              ns) \\<and>\n                         (\\<forall>pt.\n                             pt \\<noteq> p \\<longrightarrow>\n                             rep pt = repa pt) \\<and>\n                         var (repa p) = var p", "apply    (clarsimp simp add: List_list)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>var low high p repa next nodeslist prx sfx.\n       \\<lbrakk>nodeslist \\<noteq> Null; List nodeslist next sfx;\n        \\<not> isLeaf_pt p low high;\n        \\<forall>no\\<in>set prx \\<union> set sfx.\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           (isLeaf_pt p low high \\<longrightarrow>\n            isLeaf_pt no low high) \\<and>\n           var no = var p;\n        p \\<in> set prx \\<or> p \\<in> set sfx;\n        (\\<exists>pt\\<in>set prx.\n            repNodes_eq pt p low high repa) \\<longrightarrow>\n        repa p =\n        hd (filter (\\<lambda>sn. repNodes_eq sn p low high repa) prx);\n        \\<forall>pt\\<in>set prx. \\<not> repNodes_eq pt p low high repa;\n        \\<not> repNodes_eq nodeslist p low high repa\\<rbrakk>\n       \\<Longrightarrow> \\<exists>prxa sfxa.\n                            List (next nodeslist) next sfxa \\<and>\n                            prx @ sfx = prxa @ sfxa \\<and>\n                            \\<not> isLeaf_pt p low high \\<and>\n                            (\\<forall>no\\<in>set prx \\<union> set sfx.\n                                no \\<noteq> Null \\<and>\n                                (low no = Null) = (high no = Null) \\<and>\n                                (isLeaf_pt p low high \\<longrightarrow>\n                                 isLeaf_pt no low high) \\<and>\n                                var no = var p) \\<and>\n                            (p \\<in> set prx \\<or> p \\<in> set sfx) \\<and>\n                            ((\\<exists>pt\\<in>set prxa.\n                                 repNodes_eq pt p low high\n                                  repa) \\<longrightarrow>\n                             repa p =\n                             hd (filter\n                                  (\\<lambda>sn.\nrepNodes_eq sn p low high repa)\n                                  prxa)) \\<and>\n                            (next nodeslist \\<noteq> Null \\<longrightarrow>\n                             (\\<forall>pt\\<in>set prxa.\n                                 \\<not> repNodes_eq pt p low high repa))\n 2. \\<And>var low high p repa next nodeslist prx sfx.\n       \\<lbrakk>nodeslist \\<noteq> Null; List nodeslist next sfx;\n        \\<not> isLeaf_pt p low high;\n        \\<forall>no\\<in>set prx \\<union> set sfx.\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           (isLeaf_pt p low high \\<longrightarrow>\n            isLeaf_pt no low high) \\<and>\n           var no = var p;\n        p \\<in> set prx \\<or> p \\<in> set sfx;\n        (\\<exists>pt\\<in>set prx.\n            repNodes_eq pt p low high repa) \\<longrightarrow>\n        repa p =\n        hd (filter (\\<lambda>sn. repNodes_eq sn p low high repa) prx);\n        \\<forall>pt\\<in>set prx. \\<not> repNodes_eq pt p low high repa;\n        repNodes_eq nodeslist p low high repa\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>no\\<in>set prx \\<union> set sfx.\n                             no \\<noteq> Null \\<and>\n                             (low no = Null) = (high no = Null) \\<and>\n                             (isLeaf_pt p low high \\<longrightarrow>\n                              isLeaf_pt no low high) \\<and>\n                             var no = var p) \\<and>\n                         (p \\<in> set prx \\<or> p \\<in> set sfx) \\<and>\n                         ((\\<exists>pt\\<in>set prx \\<union> set sfx.\n                              repNodes_eq pt p low high\n                               repa) \\<longrightarrow>\n                          nodeslist =\n                          hd (filter\n                               (\\<lambda>sn. repNodes_eq sn p low high repa)\n                               prx @\n                              filter\n                               (\\<lambda>sn. repNodes_eq sn p low high repa)\n                               sfx)) \\<and>\n                         ((\\<forall>pt\\<in>set prx \\<union> set sfx.\n                              \\<not> repNodes_eq pt p low high\nrepa) \\<longrightarrow>\n                          repa = repa(p := nodeslist))\n 3. \\<And>ns var low high rep next p nodeslist.\n       \\<lbrakk>List nodeslist next ns;\n        \\<forall>no\\<in>set ns.\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           (isLeaf_pt p low high \\<longrightarrow>\n            isLeaf_pt no low high) \\<and>\n           var no = var p;\n        p \\<in> set ns; isLeaf_pt p low high\\<rbrakk>\n       \\<Longrightarrow> nodeslist =\n                         hd (filter\n                              (\\<lambda>sn. repNodes_eq sn p low high rep)\n                              ns) \\<and>\n                         var nodeslist = var p\n 4. \\<And>var low high rep p ns lowa higha repa next pa nodeslist.\n       \\<lbrakk>\\<exists>prx sfx.\n                   List nodeslist next sfx \\<and>\n                   ns = prx @ sfx \\<and>\n                   \\<not> isLeaf_pt pa lowa higha \\<and>\n                   (\\<forall>no\\<in>set ns.\n                       no \\<noteq> Null \\<and>\n                       (low no = Null) = (high no = Null) \\<and>\n                       (isLeaf_pt p low high \\<longrightarrow>\n                        isLeaf_pt no low high) \\<and>\n                       var no = var p) \\<and>\n                   p \\<in> set ns \\<and>\n                   ((\\<exists>pt\\<in>set prx.\n                        repNodes_eq pt p low high rep) \\<longrightarrow>\n                    repa p =\n                    hd (filter (\\<lambda>sn. repNodes_eq sn p low high rep)\n                         prx) \\<and>\n                    (\\<forall>pt.\n                        pt \\<noteq> p \\<longrightarrow>\n                        rep pt = repa pt)) \\<and>\n                   ((\\<forall>pt\\<in>set prx.\n                        \\<not> repNodes_eq pt p low high\n                                rep) \\<longrightarrow>\n                    rep = repa) \\<and>\n                   (nodeslist \\<noteq> Null \\<longrightarrow>\n                    (\\<forall>pt\\<in>set prx.\n                        \\<not> repNodes_eq pt p low high rep)) \\<and>\n                   pa = p \\<and> higha = high \\<and> lowa = low;\n        \\<not> nodeslist \\<noteq> Null\\<rbrakk>\n       \\<Longrightarrow> repa p =\n                         hd (filter\n                              (\\<lambda>sn. repNodes_eq sn p low high rep)\n                              ns) \\<and>\n                         (\\<forall>pt.\n                             pt \\<noteq> p \\<longrightarrow>\n                             rep pt = repa pt) \\<and>\n                         var (repa p) = var p", "(* solving termination constraint *)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>var low high p repa next nodeslist prx sfx.\n       \\<lbrakk>nodeslist \\<noteq> Null; List nodeslist next sfx;\n        \\<not> isLeaf_pt p low high;\n        \\<forall>no\\<in>set prx \\<union> set sfx.\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           (isLeaf_pt p low high \\<longrightarrow>\n            isLeaf_pt no low high) \\<and>\n           var no = var p;\n        p \\<in> set prx \\<or> p \\<in> set sfx;\n        (\\<exists>pt\\<in>set prx.\n            repNodes_eq pt p low high repa) \\<longrightarrow>\n        repa p =\n        hd (filter (\\<lambda>sn. repNodes_eq sn p low high repa) prx);\n        \\<forall>pt\\<in>set prx. \\<not> repNodes_eq pt p low high repa;\n        \\<not> repNodes_eq nodeslist p low high repa\\<rbrakk>\n       \\<Longrightarrow> \\<exists>prxa sfxa.\n                            List (next nodeslist) next sfxa \\<and>\n                            prx @ sfx = prxa @ sfxa \\<and>\n                            \\<not> isLeaf_pt p low high \\<and>\n                            (\\<forall>no\\<in>set prx \\<union> set sfx.\n                                no \\<noteq> Null \\<and>\n                                (low no = Null) = (high no = Null) \\<and>\n                                (isLeaf_pt p low high \\<longrightarrow>\n                                 isLeaf_pt no low high) \\<and>\n                                var no = var p) \\<and>\n                            (p \\<in> set prx \\<or> p \\<in> set sfx) \\<and>\n                            ((\\<exists>pt\\<in>set prxa.\n                                 repNodes_eq pt p low high\n                                  repa) \\<longrightarrow>\n                             repa p =\n                             hd (filter\n                                  (\\<lambda>sn.\nrepNodes_eq sn p low high repa)\n                                  prxa)) \\<and>\n                            (next nodeslist \\<noteq> Null \\<longrightarrow>\n                             (\\<forall>pt\\<in>set prxa.\n                                 \\<not> repNodes_eq pt p low high repa))\n 2. \\<And>var low high p repa next nodeslist prx sfx.\n       \\<lbrakk>nodeslist \\<noteq> Null; List nodeslist next sfx;\n        \\<not> isLeaf_pt p low high;\n        \\<forall>no\\<in>set prx \\<union> set sfx.\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           (isLeaf_pt p low high \\<longrightarrow>\n            isLeaf_pt no low high) \\<and>\n           var no = var p;\n        p \\<in> set prx \\<or> p \\<in> set sfx;\n        (\\<exists>pt\\<in>set prx.\n            repNodes_eq pt p low high repa) \\<longrightarrow>\n        repa p =\n        hd (filter (\\<lambda>sn. repNodes_eq sn p low high repa) prx);\n        \\<forall>pt\\<in>set prx. \\<not> repNodes_eq pt p low high repa;\n        repNodes_eq nodeslist p low high repa\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>no\\<in>set prx \\<union> set sfx.\n                             no \\<noteq> Null \\<and>\n                             (low no = Null) = (high no = Null) \\<and>\n                             (isLeaf_pt p low high \\<longrightarrow>\n                              isLeaf_pt no low high) \\<and>\n                             var no = var p) \\<and>\n                         (p \\<in> set prx \\<or> p \\<in> set sfx) \\<and>\n                         ((\\<exists>pt\\<in>set prx \\<union> set sfx.\n                              repNodes_eq pt p low high\n                               repa) \\<longrightarrow>\n                          nodeslist =\n                          hd (filter\n                               (\\<lambda>sn. repNodes_eq sn p low high repa)\n                               prx @\n                              filter\n                               (\\<lambda>sn. repNodes_eq sn p low high repa)\n                               sfx)) \\<and>\n                         ((\\<forall>pt\\<in>set prx \\<union> set sfx.\n                              \\<not> repNodes_eq pt p low high\nrepa) \\<longrightarrow>\n                          repa = repa(p := nodeslist))\n 3. \\<And>ns var low high rep next p nodeslist.\n       \\<lbrakk>List nodeslist next ns;\n        \\<forall>no\\<in>set ns.\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           (isLeaf_pt p low high \\<longrightarrow>\n            isLeaf_pt no low high) \\<and>\n           var no = var p;\n        p \\<in> set ns; isLeaf_pt p low high\\<rbrakk>\n       \\<Longrightarrow> nodeslist =\n                         hd (filter\n                              (\\<lambda>sn. repNodes_eq sn p low high rep)\n                              ns) \\<and>\n                         var nodeslist = var p\n 4. \\<And>var low high rep p ns lowa higha repa next pa nodeslist.\n       \\<lbrakk>\\<exists>prx sfx.\n                   List nodeslist next sfx \\<and>\n                   ns = prx @ sfx \\<and>\n                   \\<not> isLeaf_pt pa lowa higha \\<and>\n                   (\\<forall>no\\<in>set ns.\n                       no \\<noteq> Null \\<and>\n                       (low no = Null) = (high no = Null) \\<and>\n                       (isLeaf_pt p low high \\<longrightarrow>\n                        isLeaf_pt no low high) \\<and>\n                       var no = var p) \\<and>\n                   p \\<in> set ns \\<and>\n                   ((\\<exists>pt\\<in>set prx.\n                        repNodes_eq pt p low high rep) \\<longrightarrow>\n                    repa p =\n                    hd (filter (\\<lambda>sn. repNodes_eq sn p low high rep)\n                         prx) \\<and>\n                    (\\<forall>pt.\n                        pt \\<noteq> p \\<longrightarrow>\n                        rep pt = repa pt)) \\<and>\n                   ((\\<forall>pt\\<in>set prx.\n                        \\<not> repNodes_eq pt p low high\n                                rep) \\<longrightarrow>\n                    rep = repa) \\<and>\n                   (nodeslist \\<noteq> Null \\<longrightarrow>\n                    (\\<forall>pt\\<in>set prx.\n                        \\<not> repNodes_eq pt p low high rep)) \\<and>\n                   pa = p \\<and> higha = high \\<and> lowa = low;\n        \\<not> nodeslist \\<noteq> Null\\<rbrakk>\n       \\<Longrightarrow> repa p =\n                         hd (filter\n                              (\\<lambda>sn. repNodes_eq sn p low high rep)\n                              ns) \\<and>\n                         (\\<forall>pt.\n                             pt \\<noteq> p \\<longrightarrow>\n                             rep pt = repa pt) \\<and>\n                         var (repa p) = var p", "apply    (simp only: List_not_Null simp_thms triv_forall_equality)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>var low high p repa next nodeslist prx sfx.\n       \\<lbrakk>nodeslist \\<noteq> Null;\n        \\<exists>ps.\n           sfx = nodeslist # ps \\<and> List (next nodeslist) next ps;\n        \\<not> isLeaf_pt p low high;\n        \\<forall>no\\<in>set prx \\<union> set sfx.\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and> var no = var p;\n        p \\<in> set prx \\<or> p \\<in> set sfx;\n        (\\<exists>pt\\<in>set prx.\n            repNodes_eq pt p low high repa) \\<longrightarrow>\n        repa p =\n        hd (filter (\\<lambda>sn. repNodes_eq sn p low high repa) prx);\n        \\<forall>pt\\<in>set prx. \\<not> repNodes_eq pt p low high repa;\n        \\<not> repNodes_eq nodeslist p low high repa\\<rbrakk>\n       \\<Longrightarrow> \\<exists>prxa sfxa.\n                            List (next nodeslist) next sfxa \\<and>\n                            prx @ sfx = prxa @ sfxa \\<and>\n                            (\\<forall>no\\<in>set prx \\<union> set sfx.\n                                no \\<noteq> Null \\<and>\n                                (low no = Null) = (high no = Null) \\<and>\n                                var no = var p) \\<and>\n                            ((\\<exists>pt\\<in>set prxa.\n                                 repNodes_eq pt p low high\n                                  repa) \\<longrightarrow>\n                             repa p =\n                             hd (filter\n                                  (\\<lambda>sn.\nrepNodes_eq sn p low high repa)\n                                  prxa)) \\<and>\n                            (next nodeslist \\<noteq> Null \\<longrightarrow>\n                             (\\<forall>pt\\<in>set prxa.\n                                 \\<not> repNodes_eq pt p low high repa))\n 2. \\<And>var low high p repa next nodeslist prx sfx.\n       \\<lbrakk>nodeslist \\<noteq> Null; List nodeslist next sfx;\n        \\<not> isLeaf_pt p low high;\n        \\<forall>no\\<in>set prx \\<union> set sfx.\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           (isLeaf_pt p low high \\<longrightarrow>\n            isLeaf_pt no low high) \\<and>\n           var no = var p;\n        p \\<in> set prx \\<or> p \\<in> set sfx;\n        (\\<exists>pt\\<in>set prx.\n            repNodes_eq pt p low high repa) \\<longrightarrow>\n        repa p =\n        hd (filter (\\<lambda>sn. repNodes_eq sn p low high repa) prx);\n        \\<forall>pt\\<in>set prx. \\<not> repNodes_eq pt p low high repa;\n        repNodes_eq nodeslist p low high repa\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>no\\<in>set prx \\<union> set sfx.\n                             no \\<noteq> Null \\<and>\n                             (low no = Null) = (high no = Null) \\<and>\n                             (isLeaf_pt p low high \\<longrightarrow>\n                              isLeaf_pt no low high) \\<and>\n                             var no = var p) \\<and>\n                         (p \\<in> set prx \\<or> p \\<in> set sfx) \\<and>\n                         ((\\<exists>pt\\<in>set prx \\<union> set sfx.\n                              repNodes_eq pt p low high\n                               repa) \\<longrightarrow>\n                          nodeslist =\n                          hd (filter\n                               (\\<lambda>sn. repNodes_eq sn p low high repa)\n                               prx @\n                              filter\n                               (\\<lambda>sn. repNodes_eq sn p low high repa)\n                               sfx)) \\<and>\n                         ((\\<forall>pt\\<in>set prx \\<union> set sfx.\n                              \\<not> repNodes_eq pt p low high\nrepa) \\<longrightarrow>\n                          repa = repa(p := nodeslist))\n 3. \\<And>ns var low high rep next p nodeslist.\n       \\<lbrakk>List nodeslist next ns;\n        \\<forall>no\\<in>set ns.\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           (isLeaf_pt p low high \\<longrightarrow>\n            isLeaf_pt no low high) \\<and>\n           var no = var p;\n        p \\<in> set ns; isLeaf_pt p low high\\<rbrakk>\n       \\<Longrightarrow> nodeslist =\n                         hd (filter\n                              (\\<lambda>sn. repNodes_eq sn p low high rep)\n                              ns) \\<and>\n                         var nodeslist = var p\n 4. \\<And>var low high rep p ns lowa higha repa next pa nodeslist.\n       \\<lbrakk>\\<exists>prx sfx.\n                   List nodeslist next sfx \\<and>\n                   ns = prx @ sfx \\<and>\n                   \\<not> isLeaf_pt pa lowa higha \\<and>\n                   (\\<forall>no\\<in>set ns.\n                       no \\<noteq> Null \\<and>\n                       (low no = Null) = (high no = Null) \\<and>\n                       (isLeaf_pt p low high \\<longrightarrow>\n                        isLeaf_pt no low high) \\<and>\n                       var no = var p) \\<and>\n                   p \\<in> set ns \\<and>\n                   ((\\<exists>pt\\<in>set prx.\n                        repNodes_eq pt p low high rep) \\<longrightarrow>\n                    repa p =\n                    hd (filter (\\<lambda>sn. repNodes_eq sn p low high rep)\n                         prx) \\<and>\n                    (\\<forall>pt.\n                        pt \\<noteq> p \\<longrightarrow>\n                        rep pt = repa pt)) \\<and>\n                   ((\\<forall>pt\\<in>set prx.\n                        \\<not> repNodes_eq pt p low high\n                                rep) \\<longrightarrow>\n                    rep = repa) \\<and>\n                   (nodeslist \\<noteq> Null \\<longrightarrow>\n                    (\\<forall>pt\\<in>set prx.\n                        \\<not> repNodes_eq pt p low high rep)) \\<and>\n                   pa = p \\<and> higha = high \\<and> lowa = low;\n        \\<not> nodeslist \\<noteq> Null\\<rbrakk>\n       \\<Longrightarrow> repa p =\n                         hd (filter\n                              (\\<lambda>sn. repNodes_eq sn p low high rep)\n                              ns) \\<and>\n                         (\\<forall>pt.\n                             pt \\<noteq> p \\<longrightarrow>\n                             rep pt = repa pt) \\<and>\n                         var (repa p) = var p", "apply    clarify"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>var low high p repa next nodeslist prx sfx ps.\n       \\<lbrakk>nodeslist \\<noteq> Null; \\<not> isLeaf_pt p low high;\n        \\<forall>no\\<in>set prx \\<union> set (nodeslist # ps).\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and> var no = var p;\n        p \\<in> set prx \\<or> p \\<in> set (nodeslist # ps);\n        (\\<exists>pt\\<in>set prx.\n            repNodes_eq pt p low high repa) \\<longrightarrow>\n        repa p =\n        hd (filter (\\<lambda>sn. repNodes_eq sn p low high repa) prx);\n        \\<forall>pt\\<in>set prx. \\<not> repNodes_eq pt p low high repa;\n        \\<not> repNodes_eq nodeslist p low high repa;\n        List (next nodeslist) next ps\\<rbrakk>\n       \\<Longrightarrow> \\<exists>prxa sfx.\n                            List (next nodeslist) next sfx \\<and>\n                            prx @ nodeslist # ps = prxa @ sfx \\<and>\n                            (\\<forall>no\n\\<in>set prx \\<union> set (nodeslist # ps).\n                                no \\<noteq> Null \\<and>\n                                (low no = Null) = (high no = Null) \\<and>\n                                var no = var p) \\<and>\n                            ((\\<exists>pt\\<in>set prxa.\n                                 repNodes_eq pt p low high\n                                  repa) \\<longrightarrow>\n                             repa p =\n                             hd (filter\n                                  (\\<lambda>sn.\nrepNodes_eq sn p low high repa)\n                                  prxa)) \\<and>\n                            (next nodeslist \\<noteq> Null \\<longrightarrow>\n                             (\\<forall>pt\\<in>set prxa.\n                                 \\<not> repNodes_eq pt p low high repa))\n 2. \\<And>var low high p repa next nodeslist prx sfx.\n       \\<lbrakk>nodeslist \\<noteq> Null; List nodeslist next sfx;\n        \\<not> isLeaf_pt p low high;\n        \\<forall>no\\<in>set prx \\<union> set sfx.\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           (isLeaf_pt p low high \\<longrightarrow>\n            isLeaf_pt no low high) \\<and>\n           var no = var p;\n        p \\<in> set prx \\<or> p \\<in> set sfx;\n        (\\<exists>pt\\<in>set prx.\n            repNodes_eq pt p low high repa) \\<longrightarrow>\n        repa p =\n        hd (filter (\\<lambda>sn. repNodes_eq sn p low high repa) prx);\n        \\<forall>pt\\<in>set prx. \\<not> repNodes_eq pt p low high repa;\n        repNodes_eq nodeslist p low high repa\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>no\\<in>set prx \\<union> set sfx.\n                             no \\<noteq> Null \\<and>\n                             (low no = Null) = (high no = Null) \\<and>\n                             (isLeaf_pt p low high \\<longrightarrow>\n                              isLeaf_pt no low high) \\<and>\n                             var no = var p) \\<and>\n                         (p \\<in> set prx \\<or> p \\<in> set sfx) \\<and>\n                         ((\\<exists>pt\\<in>set prx \\<union> set sfx.\n                              repNodes_eq pt p low high\n                               repa) \\<longrightarrow>\n                          nodeslist =\n                          hd (filter\n                               (\\<lambda>sn. repNodes_eq sn p low high repa)\n                               prx @\n                              filter\n                               (\\<lambda>sn. repNodes_eq sn p low high repa)\n                               sfx)) \\<and>\n                         ((\\<forall>pt\\<in>set prx \\<union> set sfx.\n                              \\<not> repNodes_eq pt p low high\nrepa) \\<longrightarrow>\n                          repa = repa(p := nodeslist))\n 3. \\<And>ns var low high rep next p nodeslist.\n       \\<lbrakk>List nodeslist next ns;\n        \\<forall>no\\<in>set ns.\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           (isLeaf_pt p low high \\<longrightarrow>\n            isLeaf_pt no low high) \\<and>\n           var no = var p;\n        p \\<in> set ns; isLeaf_pt p low high\\<rbrakk>\n       \\<Longrightarrow> nodeslist =\n                         hd (filter\n                              (\\<lambda>sn. repNodes_eq sn p low high rep)\n                              ns) \\<and>\n                         var nodeslist = var p\n 4. \\<And>var low high rep p ns lowa higha repa next pa nodeslist.\n       \\<lbrakk>\\<exists>prx sfx.\n                   List nodeslist next sfx \\<and>\n                   ns = prx @ sfx \\<and>\n                   \\<not> isLeaf_pt pa lowa higha \\<and>\n                   (\\<forall>no\\<in>set ns.\n                       no \\<noteq> Null \\<and>\n                       (low no = Null) = (high no = Null) \\<and>\n                       (isLeaf_pt p low high \\<longrightarrow>\n                        isLeaf_pt no low high) \\<and>\n                       var no = var p) \\<and>\n                   p \\<in> set ns \\<and>\n                   ((\\<exists>pt\\<in>set prx.\n                        repNodes_eq pt p low high rep) \\<longrightarrow>\n                    repa p =\n                    hd (filter (\\<lambda>sn. repNodes_eq sn p low high rep)\n                         prx) \\<and>\n                    (\\<forall>pt.\n                        pt \\<noteq> p \\<longrightarrow>\n                        rep pt = repa pt)) \\<and>\n                   ((\\<forall>pt\\<in>set prx.\n                        \\<not> repNodes_eq pt p low high\n                                rep) \\<longrightarrow>\n                    rep = repa) \\<and>\n                   (nodeslist \\<noteq> Null \\<longrightarrow>\n                    (\\<forall>pt\\<in>set prx.\n                        \\<not> repNodes_eq pt p low high rep)) \\<and>\n                   pa = p \\<and> higha = high \\<and> lowa = low;\n        \\<not> nodeslist \\<noteq> Null\\<rbrakk>\n       \\<Longrightarrow> repa p =\n                         hd (filter\n                              (\\<lambda>sn. repNodes_eq sn p low high rep)\n                              ns) \\<and>\n                         (\\<forall>pt.\n                             pt \\<noteq> p \\<longrightarrow>\n                             rep pt = repa pt) \\<and>\n                         var (repa p) = var p", "apply    (simp only: triv_forall_equality)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>var low high p repa next nodeslist prx ps.\n       \\<lbrakk>nodeslist \\<noteq> Null; \\<not> isLeaf_pt p low high;\n        \\<forall>no\\<in>set prx \\<union> set (nodeslist # ps).\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and> var no = var p;\n        p \\<in> set prx \\<or> p \\<in> set (nodeslist # ps);\n        (\\<exists>pt\\<in>set prx.\n            repNodes_eq pt p low high repa) \\<longrightarrow>\n        repa p =\n        hd (filter (\\<lambda>sn. repNodes_eq sn p low high repa) prx);\n        \\<forall>pt\\<in>set prx. \\<not> repNodes_eq pt p low high repa;\n        \\<not> repNodes_eq nodeslist p low high repa;\n        List (next nodeslist) next ps\\<rbrakk>\n       \\<Longrightarrow> \\<exists>prxa sfx.\n                            List (next nodeslist) next sfx \\<and>\n                            prx @ nodeslist # ps = prxa @ sfx \\<and>\n                            (\\<forall>no\n\\<in>set prx \\<union> set (nodeslist # ps).\n                                no \\<noteq> Null \\<and>\n                                (low no = Null) = (high no = Null) \\<and>\n                                var no = var p) \\<and>\n                            ((\\<exists>pt\\<in>set prxa.\n                                 repNodes_eq pt p low high\n                                  repa) \\<longrightarrow>\n                             repa p =\n                             hd (filter\n                                  (\\<lambda>sn.\nrepNodes_eq sn p low high repa)\n                                  prxa)) \\<and>\n                            (next nodeslist \\<noteq> Null \\<longrightarrow>\n                             (\\<forall>pt\\<in>set prxa.\n                                 \\<not> repNodes_eq pt p low high repa))\n 2. \\<And>var low high p repa next nodeslist prx sfx.\n       \\<lbrakk>nodeslist \\<noteq> Null; List nodeslist next sfx;\n        \\<not> isLeaf_pt p low high;\n        \\<forall>no\\<in>set prx \\<union> set sfx.\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           (isLeaf_pt p low high \\<longrightarrow>\n            isLeaf_pt no low high) \\<and>\n           var no = var p;\n        p \\<in> set prx \\<or> p \\<in> set sfx;\n        (\\<exists>pt\\<in>set prx.\n            repNodes_eq pt p low high repa) \\<longrightarrow>\n        repa p =\n        hd (filter (\\<lambda>sn. repNodes_eq sn p low high repa) prx);\n        \\<forall>pt\\<in>set prx. \\<not> repNodes_eq pt p low high repa;\n        repNodes_eq nodeslist p low high repa\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>no\\<in>set prx \\<union> set sfx.\n                             no \\<noteq> Null \\<and>\n                             (low no = Null) = (high no = Null) \\<and>\n                             (isLeaf_pt p low high \\<longrightarrow>\n                              isLeaf_pt no low high) \\<and>\n                             var no = var p) \\<and>\n                         (p \\<in> set prx \\<or> p \\<in> set sfx) \\<and>\n                         ((\\<exists>pt\\<in>set prx \\<union> set sfx.\n                              repNodes_eq pt p low high\n                               repa) \\<longrightarrow>\n                          nodeslist =\n                          hd (filter\n                               (\\<lambda>sn. repNodes_eq sn p low high repa)\n                               prx @\n                              filter\n                               (\\<lambda>sn. repNodes_eq sn p low high repa)\n                               sfx)) \\<and>\n                         ((\\<forall>pt\\<in>set prx \\<union> set sfx.\n                              \\<not> repNodes_eq pt p low high\nrepa) \\<longrightarrow>\n                          repa = repa(p := nodeslist))\n 3. \\<And>ns var low high rep next p nodeslist.\n       \\<lbrakk>List nodeslist next ns;\n        \\<forall>no\\<in>set ns.\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           (isLeaf_pt p low high \\<longrightarrow>\n            isLeaf_pt no low high) \\<and>\n           var no = var p;\n        p \\<in> set ns; isLeaf_pt p low high\\<rbrakk>\n       \\<Longrightarrow> nodeslist =\n                         hd (filter\n                              (\\<lambda>sn. repNodes_eq sn p low high rep)\n                              ns) \\<and>\n                         var nodeslist = var p\n 4. \\<And>var low high rep p ns lowa higha repa next pa nodeslist.\n       \\<lbrakk>\\<exists>prx sfx.\n                   List nodeslist next sfx \\<and>\n                   ns = prx @ sfx \\<and>\n                   \\<not> isLeaf_pt pa lowa higha \\<and>\n                   (\\<forall>no\\<in>set ns.\n                       no \\<noteq> Null \\<and>\n                       (low no = Null) = (high no = Null) \\<and>\n                       (isLeaf_pt p low high \\<longrightarrow>\n                        isLeaf_pt no low high) \\<and>\n                       var no = var p) \\<and>\n                   p \\<in> set ns \\<and>\n                   ((\\<exists>pt\\<in>set prx.\n                        repNodes_eq pt p low high rep) \\<longrightarrow>\n                    repa p =\n                    hd (filter (\\<lambda>sn. repNodes_eq sn p low high rep)\n                         prx) \\<and>\n                    (\\<forall>pt.\n                        pt \\<noteq> p \\<longrightarrow>\n                        rep pt = repa pt)) \\<and>\n                   ((\\<forall>pt\\<in>set prx.\n                        \\<not> repNodes_eq pt p low high\n                                rep) \\<longrightarrow>\n                    rep = repa) \\<and>\n                   (nodeslist \\<noteq> Null \\<longrightarrow>\n                    (\\<forall>pt\\<in>set prx.\n                        \\<not> repNodes_eq pt p low high rep)) \\<and>\n                   pa = p \\<and> higha = high \\<and> lowa = low;\n        \\<not> nodeslist \\<noteq> Null\\<rbrakk>\n       \\<Longrightarrow> repa p =\n                         hd (filter\n                              (\\<lambda>sn. repNodes_eq sn p low high rep)\n                              ns) \\<and>\n                         (\\<forall>pt.\n                             pt \\<noteq> p \\<longrightarrow>\n                             rep pt = repa pt) \\<and>\n                         var (repa p) = var p", "apply    (rename_tac sfx)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>var low high p repa next nodeslist prx sfx.\n       \\<lbrakk>nodeslist \\<noteq> Null; \\<not> isLeaf_pt p low high;\n        \\<forall>no\\<in>set prx \\<union> set (nodeslist # sfx).\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and> var no = var p;\n        p \\<in> set prx \\<or> p \\<in> set (nodeslist # sfx);\n        (\\<exists>pt\\<in>set prx.\n            repNodes_eq pt p low high repa) \\<longrightarrow>\n        repa p =\n        hd (filter (\\<lambda>sn. repNodes_eq sn p low high repa) prx);\n        \\<forall>pt\\<in>set prx. \\<not> repNodes_eq pt p low high repa;\n        \\<not> repNodes_eq nodeslist p low high repa;\n        List (next nodeslist) next sfx\\<rbrakk>\n       \\<Longrightarrow> \\<exists>prxa sfxa.\n                            List (next nodeslist) next sfxa \\<and>\n                            prx @ nodeslist # sfx = prxa @ sfxa \\<and>\n                            (\\<forall>no\n\\<in>set prx \\<union> set (nodeslist # sfx).\n                                no \\<noteq> Null \\<and>\n                                (low no = Null) = (high no = Null) \\<and>\n                                var no = var p) \\<and>\n                            ((\\<exists>pt\\<in>set prxa.\n                                 repNodes_eq pt p low high\n                                  repa) \\<longrightarrow>\n                             repa p =\n                             hd (filter\n                                  (\\<lambda>sn.\nrepNodes_eq sn p low high repa)\n                                  prxa)) \\<and>\n                            (next nodeslist \\<noteq> Null \\<longrightarrow>\n                             (\\<forall>pt\\<in>set prxa.\n                                 \\<not> repNodes_eq pt p low high repa))\n 2. \\<And>var low high p repa next nodeslist prx sfx.\n       \\<lbrakk>nodeslist \\<noteq> Null; List nodeslist next sfx;\n        \\<not> isLeaf_pt p low high;\n        \\<forall>no\\<in>set prx \\<union> set sfx.\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           (isLeaf_pt p low high \\<longrightarrow>\n            isLeaf_pt no low high) \\<and>\n           var no = var p;\n        p \\<in> set prx \\<or> p \\<in> set sfx;\n        (\\<exists>pt\\<in>set prx.\n            repNodes_eq pt p low high repa) \\<longrightarrow>\n        repa p =\n        hd (filter (\\<lambda>sn. repNodes_eq sn p low high repa) prx);\n        \\<forall>pt\\<in>set prx. \\<not> repNodes_eq pt p low high repa;\n        repNodes_eq nodeslist p low high repa\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>no\\<in>set prx \\<union> set sfx.\n                             no \\<noteq> Null \\<and>\n                             (low no = Null) = (high no = Null) \\<and>\n                             (isLeaf_pt p low high \\<longrightarrow>\n                              isLeaf_pt no low high) \\<and>\n                             var no = var p) \\<and>\n                         (p \\<in> set prx \\<or> p \\<in> set sfx) \\<and>\n                         ((\\<exists>pt\\<in>set prx \\<union> set sfx.\n                              repNodes_eq pt p low high\n                               repa) \\<longrightarrow>\n                          nodeslist =\n                          hd (filter\n                               (\\<lambda>sn. repNodes_eq sn p low high repa)\n                               prx @\n                              filter\n                               (\\<lambda>sn. repNodes_eq sn p low high repa)\n                               sfx)) \\<and>\n                         ((\\<forall>pt\\<in>set prx \\<union> set sfx.\n                              \\<not> repNodes_eq pt p low high\nrepa) \\<longrightarrow>\n                          repa = repa(p := nodeslist))\n 3. \\<And>ns var low high rep next p nodeslist.\n       \\<lbrakk>List nodeslist next ns;\n        \\<forall>no\\<in>set ns.\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           (isLeaf_pt p low high \\<longrightarrow>\n            isLeaf_pt no low high) \\<and>\n           var no = var p;\n        p \\<in> set ns; isLeaf_pt p low high\\<rbrakk>\n       \\<Longrightarrow> nodeslist =\n                         hd (filter\n                              (\\<lambda>sn. repNodes_eq sn p low high rep)\n                              ns) \\<and>\n                         var nodeslist = var p\n 4. \\<And>var low high rep p ns lowa higha repa next pa nodeslist.\n       \\<lbrakk>\\<exists>prx sfx.\n                   List nodeslist next sfx \\<and>\n                   ns = prx @ sfx \\<and>\n                   \\<not> isLeaf_pt pa lowa higha \\<and>\n                   (\\<forall>no\\<in>set ns.\n                       no \\<noteq> Null \\<and>\n                       (low no = Null) = (high no = Null) \\<and>\n                       (isLeaf_pt p low high \\<longrightarrow>\n                        isLeaf_pt no low high) \\<and>\n                       var no = var p) \\<and>\n                   p \\<in> set ns \\<and>\n                   ((\\<exists>pt\\<in>set prx.\n                        repNodes_eq pt p low high rep) \\<longrightarrow>\n                    repa p =\n                    hd (filter (\\<lambda>sn. repNodes_eq sn p low high rep)\n                         prx) \\<and>\n                    (\\<forall>pt.\n                        pt \\<noteq> p \\<longrightarrow>\n                        rep pt = repa pt)) \\<and>\n                   ((\\<forall>pt\\<in>set prx.\n                        \\<not> repNodes_eq pt p low high\n                                rep) \\<longrightarrow>\n                    rep = repa) \\<and>\n                   (nodeslist \\<noteq> Null \\<longrightarrow>\n                    (\\<forall>pt\\<in>set prx.\n                        \\<not> repNodes_eq pt p low high rep)) \\<and>\n                   pa = p \\<and> higha = high \\<and> lowa = low;\n        \\<not> nodeslist \\<noteq> Null\\<rbrakk>\n       \\<Longrightarrow> repa p =\n                         hd (filter\n                              (\\<lambda>sn. repNodes_eq sn p low high rep)\n                              ns) \\<and>\n                         (\\<forall>pt.\n                             pt \\<noteq> p \\<longrightarrow>\n                             rep pt = repa pt) \\<and>\n                         var (repa p) = var p", "apply    (rule_tac x=\"prx@[nodeslist]\" in exI)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>var low high p repa next nodeslist prx sfx.\n       \\<lbrakk>nodeslist \\<noteq> Null; \\<not> isLeaf_pt p low high;\n        \\<forall>no\\<in>set prx \\<union> set (nodeslist # sfx).\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and> var no = var p;\n        p \\<in> set prx \\<or> p \\<in> set (nodeslist # sfx);\n        (\\<exists>pt\\<in>set prx.\n            repNodes_eq pt p low high repa) \\<longrightarrow>\n        repa p =\n        hd (filter (\\<lambda>sn. repNodes_eq sn p low high repa) prx);\n        \\<forall>pt\\<in>set prx. \\<not> repNodes_eq pt p low high repa;\n        \\<not> repNodes_eq nodeslist p low high repa;\n        List (next nodeslist) next sfx\\<rbrakk>\n       \\<Longrightarrow> \\<exists>sfxa.\n                            List (next nodeslist) next sfxa \\<and>\n                            prx @ nodeslist # sfx =\n                            (prx @ [nodeslist]) @ sfxa \\<and>\n                            (\\<forall>no\n\\<in>set prx \\<union> set (nodeslist # sfx).\n                                no \\<noteq> Null \\<and>\n                                (low no = Null) = (high no = Null) \\<and>\n                                var no = var p) \\<and>\n                            ((\\<exists>pt\\<in>set (prx @ [nodeslist]).\n                                 repNodes_eq pt p low high\n                                  repa) \\<longrightarrow>\n                             repa p =\n                             hd (filter\n                                  (\\<lambda>sn.\nrepNodes_eq sn p low high repa)\n                                  (prx @ [nodeslist]))) \\<and>\n                            (next nodeslist \\<noteq> Null \\<longrightarrow>\n                             (\\<forall>pt\\<in>set (prx @ [nodeslist]).\n                                 \\<not> repNodes_eq pt p low high repa))\n 2. \\<And>var low high p repa next nodeslist prx sfx.\n       \\<lbrakk>nodeslist \\<noteq> Null; List nodeslist next sfx;\n        \\<not> isLeaf_pt p low high;\n        \\<forall>no\\<in>set prx \\<union> set sfx.\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           (isLeaf_pt p low high \\<longrightarrow>\n            isLeaf_pt no low high) \\<and>\n           var no = var p;\n        p \\<in> set prx \\<or> p \\<in> set sfx;\n        (\\<exists>pt\\<in>set prx.\n            repNodes_eq pt p low high repa) \\<longrightarrow>\n        repa p =\n        hd (filter (\\<lambda>sn. repNodes_eq sn p low high repa) prx);\n        \\<forall>pt\\<in>set prx. \\<not> repNodes_eq pt p low high repa;\n        repNodes_eq nodeslist p low high repa\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>no\\<in>set prx \\<union> set sfx.\n                             no \\<noteq> Null \\<and>\n                             (low no = Null) = (high no = Null) \\<and>\n                             (isLeaf_pt p low high \\<longrightarrow>\n                              isLeaf_pt no low high) \\<and>\n                             var no = var p) \\<and>\n                         (p \\<in> set prx \\<or> p \\<in> set sfx) \\<and>\n                         ((\\<exists>pt\\<in>set prx \\<union> set sfx.\n                              repNodes_eq pt p low high\n                               repa) \\<longrightarrow>\n                          nodeslist =\n                          hd (filter\n                               (\\<lambda>sn. repNodes_eq sn p low high repa)\n                               prx @\n                              filter\n                               (\\<lambda>sn. repNodes_eq sn p low high repa)\n                               sfx)) \\<and>\n                         ((\\<forall>pt\\<in>set prx \\<union> set sfx.\n                              \\<not> repNodes_eq pt p low high\nrepa) \\<longrightarrow>\n                          repa = repa(p := nodeslist))\n 3. \\<And>ns var low high rep next p nodeslist.\n       \\<lbrakk>List nodeslist next ns;\n        \\<forall>no\\<in>set ns.\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           (isLeaf_pt p low high \\<longrightarrow>\n            isLeaf_pt no low high) \\<and>\n           var no = var p;\n        p \\<in> set ns; isLeaf_pt p low high\\<rbrakk>\n       \\<Longrightarrow> nodeslist =\n                         hd (filter\n                              (\\<lambda>sn. repNodes_eq sn p low high rep)\n                              ns) \\<and>\n                         var nodeslist = var p\n 4. \\<And>var low high rep p ns lowa higha repa next pa nodeslist.\n       \\<lbrakk>\\<exists>prx sfx.\n                   List nodeslist next sfx \\<and>\n                   ns = prx @ sfx \\<and>\n                   \\<not> isLeaf_pt pa lowa higha \\<and>\n                   (\\<forall>no\\<in>set ns.\n                       no \\<noteq> Null \\<and>\n                       (low no = Null) = (high no = Null) \\<and>\n                       (isLeaf_pt p low high \\<longrightarrow>\n                        isLeaf_pt no low high) \\<and>\n                       var no = var p) \\<and>\n                   p \\<in> set ns \\<and>\n                   ((\\<exists>pt\\<in>set prx.\n                        repNodes_eq pt p low high rep) \\<longrightarrow>\n                    repa p =\n                    hd (filter (\\<lambda>sn. repNodes_eq sn p low high rep)\n                         prx) \\<and>\n                    (\\<forall>pt.\n                        pt \\<noteq> p \\<longrightarrow>\n                        rep pt = repa pt)) \\<and>\n                   ((\\<forall>pt\\<in>set prx.\n                        \\<not> repNodes_eq pt p low high\n                                rep) \\<longrightarrow>\n                    rep = repa) \\<and>\n                   (nodeslist \\<noteq> Null \\<longrightarrow>\n                    (\\<forall>pt\\<in>set prx.\n                        \\<not> repNodes_eq pt p low high rep)) \\<and>\n                   pa = p \\<and> higha = high \\<and> lowa = low;\n        \\<not> nodeslist \\<noteq> Null\\<rbrakk>\n       \\<Longrightarrow> repa p =\n                         hd (filter\n                              (\\<lambda>sn. repNodes_eq sn p low high rep)\n                              ns) \\<and>\n                         (\\<forall>pt.\n                             pt \\<noteq> p \\<longrightarrow>\n                             rep pt = repa pt) \\<and>\n                         var (repa p) = var p", "apply    (rule_tac x=\"sfx\" in exI)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>var low high p repa next nodeslist prx sfx.\n       \\<lbrakk>nodeslist \\<noteq> Null; \\<not> isLeaf_pt p low high;\n        \\<forall>no\\<in>set prx \\<union> set (nodeslist # sfx).\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and> var no = var p;\n        p \\<in> set prx \\<or> p \\<in> set (nodeslist # sfx);\n        (\\<exists>pt\\<in>set prx.\n            repNodes_eq pt p low high repa) \\<longrightarrow>\n        repa p =\n        hd (filter (\\<lambda>sn. repNodes_eq sn p low high repa) prx);\n        \\<forall>pt\\<in>set prx. \\<not> repNodes_eq pt p low high repa;\n        \\<not> repNodes_eq nodeslist p low high repa;\n        List (next nodeslist) next sfx\\<rbrakk>\n       \\<Longrightarrow> List (next nodeslist) next sfx \\<and>\n                         prx @ nodeslist # sfx =\n                         (prx @ [nodeslist]) @ sfx \\<and>\n                         (\\<forall>no\\<in>set prx \\<union>\n    set (nodeslist # sfx).\n                             no \\<noteq> Null \\<and>\n                             (low no = Null) = (high no = Null) \\<and>\n                             var no = var p) \\<and>\n                         ((\\<exists>pt\\<in>set (prx @ [nodeslist]).\n                              repNodes_eq pt p low high\n                               repa) \\<longrightarrow>\n                          repa p =\n                          hd (filter\n                               (\\<lambda>sn. repNodes_eq sn p low high repa)\n                               (prx @ [nodeslist]))) \\<and>\n                         (next nodeslist \\<noteq> Null \\<longrightarrow>\n                          (\\<forall>pt\\<in>set (prx @ [nodeslist]).\n                              \\<not> repNodes_eq pt p low high repa))\n 2. \\<And>var low high p repa next nodeslist prx sfx.\n       \\<lbrakk>nodeslist \\<noteq> Null; List nodeslist next sfx;\n        \\<not> isLeaf_pt p low high;\n        \\<forall>no\\<in>set prx \\<union> set sfx.\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           (isLeaf_pt p low high \\<longrightarrow>\n            isLeaf_pt no low high) \\<and>\n           var no = var p;\n        p \\<in> set prx \\<or> p \\<in> set sfx;\n        (\\<exists>pt\\<in>set prx.\n            repNodes_eq pt p low high repa) \\<longrightarrow>\n        repa p =\n        hd (filter (\\<lambda>sn. repNodes_eq sn p low high repa) prx);\n        \\<forall>pt\\<in>set prx. \\<not> repNodes_eq pt p low high repa;\n        repNodes_eq nodeslist p low high repa\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>no\\<in>set prx \\<union> set sfx.\n                             no \\<noteq> Null \\<and>\n                             (low no = Null) = (high no = Null) \\<and>\n                             (isLeaf_pt p low high \\<longrightarrow>\n                              isLeaf_pt no low high) \\<and>\n                             var no = var p) \\<and>\n                         (p \\<in> set prx \\<or> p \\<in> set sfx) \\<and>\n                         ((\\<exists>pt\\<in>set prx \\<union> set sfx.\n                              repNodes_eq pt p low high\n                               repa) \\<longrightarrow>\n                          nodeslist =\n                          hd (filter\n                               (\\<lambda>sn. repNodes_eq sn p low high repa)\n                               prx @\n                              filter\n                               (\\<lambda>sn. repNodes_eq sn p low high repa)\n                               sfx)) \\<and>\n                         ((\\<forall>pt\\<in>set prx \\<union> set sfx.\n                              \\<not> repNodes_eq pt p low high\nrepa) \\<longrightarrow>\n                          repa = repa(p := nodeslist))\n 3. \\<And>ns var low high rep next p nodeslist.\n       \\<lbrakk>List nodeslist next ns;\n        \\<forall>no\\<in>set ns.\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           (isLeaf_pt p low high \\<longrightarrow>\n            isLeaf_pt no low high) \\<and>\n           var no = var p;\n        p \\<in> set ns; isLeaf_pt p low high\\<rbrakk>\n       \\<Longrightarrow> nodeslist =\n                         hd (filter\n                              (\\<lambda>sn. repNodes_eq sn p low high rep)\n                              ns) \\<and>\n                         var nodeslist = var p\n 4. \\<And>var low high rep p ns lowa higha repa next pa nodeslist.\n       \\<lbrakk>\\<exists>prx sfx.\n                   List nodeslist next sfx \\<and>\n                   ns = prx @ sfx \\<and>\n                   \\<not> isLeaf_pt pa lowa higha \\<and>\n                   (\\<forall>no\\<in>set ns.\n                       no \\<noteq> Null \\<and>\n                       (low no = Null) = (high no = Null) \\<and>\n                       (isLeaf_pt p low high \\<longrightarrow>\n                        isLeaf_pt no low high) \\<and>\n                       var no = var p) \\<and>\n                   p \\<in> set ns \\<and>\n                   ((\\<exists>pt\\<in>set prx.\n                        repNodes_eq pt p low high rep) \\<longrightarrow>\n                    repa p =\n                    hd (filter (\\<lambda>sn. repNodes_eq sn p low high rep)\n                         prx) \\<and>\n                    (\\<forall>pt.\n                        pt \\<noteq> p \\<longrightarrow>\n                        rep pt = repa pt)) \\<and>\n                   ((\\<forall>pt\\<in>set prx.\n                        \\<not> repNodes_eq pt p low high\n                                rep) \\<longrightarrow>\n                    rep = repa) \\<and>\n                   (nodeslist \\<noteq> Null \\<longrightarrow>\n                    (\\<forall>pt\\<in>set prx.\n                        \\<not> repNodes_eq pt p low high rep)) \\<and>\n                   pa = p \\<and> higha = high \\<and> lowa = low;\n        \\<not> nodeslist \\<noteq> Null\\<rbrakk>\n       \\<Longrightarrow> repa p =\n                         hd (filter\n                              (\\<lambda>sn. repNodes_eq sn p low high rep)\n                              ns) \\<and>\n                         (\\<forall>pt.\n                             pt \\<noteq> p \\<longrightarrow>\n                             rep pt = repa pt) \\<and>\n                         var (repa p) = var p", "apply    (rule conjI)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>var low high p repa next nodeslist prx sfx.\n       \\<lbrakk>nodeslist \\<noteq> Null; \\<not> isLeaf_pt p low high;\n        \\<forall>no\\<in>set prx \\<union> set (nodeslist # sfx).\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and> var no = var p;\n        p \\<in> set prx \\<or> p \\<in> set (nodeslist # sfx);\n        (\\<exists>pt\\<in>set prx.\n            repNodes_eq pt p low high repa) \\<longrightarrow>\n        repa p =\n        hd (filter (\\<lambda>sn. repNodes_eq sn p low high repa) prx);\n        \\<forall>pt\\<in>set prx. \\<not> repNodes_eq pt p low high repa;\n        \\<not> repNodes_eq nodeslist p low high repa;\n        List (next nodeslist) next sfx\\<rbrakk>\n       \\<Longrightarrow> List (next nodeslist) next sfx\n 2. \\<And>var low high p repa next nodeslist prx sfx.\n       \\<lbrakk>nodeslist \\<noteq> Null; \\<not> isLeaf_pt p low high;\n        \\<forall>no\\<in>set prx \\<union> set (nodeslist # sfx).\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and> var no = var p;\n        p \\<in> set prx \\<or> p \\<in> set (nodeslist # sfx);\n        (\\<exists>pt\\<in>set prx.\n            repNodes_eq pt p low high repa) \\<longrightarrow>\n        repa p =\n        hd (filter (\\<lambda>sn. repNodes_eq sn p low high repa) prx);\n        \\<forall>pt\\<in>set prx. \\<not> repNodes_eq pt p low high repa;\n        \\<not> repNodes_eq nodeslist p low high repa;\n        List (next nodeslist) next sfx\\<rbrakk>\n       \\<Longrightarrow> prx @ nodeslist # sfx =\n                         (prx @ [nodeslist]) @ sfx \\<and>\n                         (\\<forall>no\\<in>set prx \\<union>\n    set (nodeslist # sfx).\n                             no \\<noteq> Null \\<and>\n                             (low no = Null) = (high no = Null) \\<and>\n                             var no = var p) \\<and>\n                         ((\\<exists>pt\\<in>set (prx @ [nodeslist]).\n                              repNodes_eq pt p low high\n                               repa) \\<longrightarrow>\n                          repa p =\n                          hd (filter\n                               (\\<lambda>sn. repNodes_eq sn p low high repa)\n                               (prx @ [nodeslist]))) \\<and>\n                         (next nodeslist \\<noteq> Null \\<longrightarrow>\n                          (\\<forall>pt\\<in>set (prx @ [nodeslist]).\n                              \\<not> repNodes_eq pt p low high repa))\n 3. \\<And>var low high p repa next nodeslist prx sfx.\n       \\<lbrakk>nodeslist \\<noteq> Null; List nodeslist next sfx;\n        \\<not> isLeaf_pt p low high;\n        \\<forall>no\\<in>set prx \\<union> set sfx.\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           (isLeaf_pt p low high \\<longrightarrow>\n            isLeaf_pt no low high) \\<and>\n           var no = var p;\n        p \\<in> set prx \\<or> p \\<in> set sfx;\n        (\\<exists>pt\\<in>set prx.\n            repNodes_eq pt p low high repa) \\<longrightarrow>\n        repa p =\n        hd (filter (\\<lambda>sn. repNodes_eq sn p low high repa) prx);\n        \\<forall>pt\\<in>set prx. \\<not> repNodes_eq pt p low high repa;\n        repNodes_eq nodeslist p low high repa\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>no\\<in>set prx \\<union> set sfx.\n                             no \\<noteq> Null \\<and>\n                             (low no = Null) = (high no = Null) \\<and>\n                             (isLeaf_pt p low high \\<longrightarrow>\n                              isLeaf_pt no low high) \\<and>\n                             var no = var p) \\<and>\n                         (p \\<in> set prx \\<or> p \\<in> set sfx) \\<and>\n                         ((\\<exists>pt\\<in>set prx \\<union> set sfx.\n                              repNodes_eq pt p low high\n                               repa) \\<longrightarrow>\n                          nodeslist =\n                          hd (filter\n                               (\\<lambda>sn. repNodes_eq sn p low high repa)\n                               prx @\n                              filter\n                               (\\<lambda>sn. repNodes_eq sn p low high repa)\n                               sfx)) \\<and>\n                         ((\\<forall>pt\\<in>set prx \\<union> set sfx.\n                              \\<not> repNodes_eq pt p low high\nrepa) \\<longrightarrow>\n                          repa = repa(p := nodeslist))\n 4. \\<And>ns var low high rep next p nodeslist.\n       \\<lbrakk>List nodeslist next ns;\n        \\<forall>no\\<in>set ns.\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           (isLeaf_pt p low high \\<longrightarrow>\n            isLeaf_pt no low high) \\<and>\n           var no = var p;\n        p \\<in> set ns; isLeaf_pt p low high\\<rbrakk>\n       \\<Longrightarrow> nodeslist =\n                         hd (filter\n                              (\\<lambda>sn. repNodes_eq sn p low high rep)\n                              ns) \\<and>\n                         var nodeslist = var p\n 5. \\<And>var low high rep p ns lowa higha repa next pa nodeslist.\n       \\<lbrakk>\\<exists>prx sfx.\n                   List nodeslist next sfx \\<and>\n                   ns = prx @ sfx \\<and>\n                   \\<not> isLeaf_pt pa lowa higha \\<and>\n                   (\\<forall>no\\<in>set ns.\n                       no \\<noteq> Null \\<and>\n                       (low no = Null) = (high no = Null) \\<and>\n                       (isLeaf_pt p low high \\<longrightarrow>\n                        isLeaf_pt no low high) \\<and>\n                       var no = var p) \\<and>\n                   p \\<in> set ns \\<and>\n                   ((\\<exists>pt\\<in>set prx.\n                        repNodes_eq pt p low high rep) \\<longrightarrow>\n                    repa p =\n                    hd (filter (\\<lambda>sn. repNodes_eq sn p low high rep)\n                         prx) \\<and>\n                    (\\<forall>pt.\n                        pt \\<noteq> p \\<longrightarrow>\n                        rep pt = repa pt)) \\<and>\n                   ((\\<forall>pt\\<in>set prx.\n                        \\<not> repNodes_eq pt p low high\n                                rep) \\<longrightarrow>\n                    rep = repa) \\<and>\n                   (nodeslist \\<noteq> Null \\<longrightarrow>\n                    (\\<forall>pt\\<in>set prx.\n                        \\<not> repNodes_eq pt p low high rep)) \\<and>\n                   pa = p \\<and> higha = high \\<and> lowa = low;\n        \\<not> nodeslist \\<noteq> Null\\<rbrakk>\n       \\<Longrightarrow> repa p =\n                         hd (filter\n                              (\\<lambda>sn. repNodes_eq sn p low high rep)\n                              ns) \\<and>\n                         (\\<forall>pt.\n                             pt \\<noteq> p \\<longrightarrow>\n                             rep pt = repa pt) \\<and>\n                         var (repa p) = var p", "apply     assumption"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>var low high p repa next nodeslist prx sfx.\n       \\<lbrakk>nodeslist \\<noteq> Null; \\<not> isLeaf_pt p low high;\n        \\<forall>no\\<in>set prx \\<union> set (nodeslist # sfx).\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and> var no = var p;\n        p \\<in> set prx \\<or> p \\<in> set (nodeslist # sfx);\n        (\\<exists>pt\\<in>set prx.\n            repNodes_eq pt p low high repa) \\<longrightarrow>\n        repa p =\n        hd (filter (\\<lambda>sn. repNodes_eq sn p low high repa) prx);\n        \\<forall>pt\\<in>set prx. \\<not> repNodes_eq pt p low high repa;\n        \\<not> repNodes_eq nodeslist p low high repa;\n        List (next nodeslist) next sfx\\<rbrakk>\n       \\<Longrightarrow> prx @ nodeslist # sfx =\n                         (prx @ [nodeslist]) @ sfx \\<and>\n                         (\\<forall>no\\<in>set prx \\<union>\n    set (nodeslist # sfx).\n                             no \\<noteq> Null \\<and>\n                             (low no = Null) = (high no = Null) \\<and>\n                             var no = var p) \\<and>\n                         ((\\<exists>pt\\<in>set (prx @ [nodeslist]).\n                              repNodes_eq pt p low high\n                               repa) \\<longrightarrow>\n                          repa p =\n                          hd (filter\n                               (\\<lambda>sn. repNodes_eq sn p low high repa)\n                               (prx @ [nodeslist]))) \\<and>\n                         (next nodeslist \\<noteq> Null \\<longrightarrow>\n                          (\\<forall>pt\\<in>set (prx @ [nodeslist]).\n                              \\<not> repNodes_eq pt p low high repa))\n 2. \\<And>var low high p repa next nodeslist prx sfx.\n       \\<lbrakk>nodeslist \\<noteq> Null; List nodeslist next sfx;\n        \\<not> isLeaf_pt p low high;\n        \\<forall>no\\<in>set prx \\<union> set sfx.\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           (isLeaf_pt p low high \\<longrightarrow>\n            isLeaf_pt no low high) \\<and>\n           var no = var p;\n        p \\<in> set prx \\<or> p \\<in> set sfx;\n        (\\<exists>pt\\<in>set prx.\n            repNodes_eq pt p low high repa) \\<longrightarrow>\n        repa p =\n        hd (filter (\\<lambda>sn. repNodes_eq sn p low high repa) prx);\n        \\<forall>pt\\<in>set prx. \\<not> repNodes_eq pt p low high repa;\n        repNodes_eq nodeslist p low high repa\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>no\\<in>set prx \\<union> set sfx.\n                             no \\<noteq> Null \\<and>\n                             (low no = Null) = (high no = Null) \\<and>\n                             (isLeaf_pt p low high \\<longrightarrow>\n                              isLeaf_pt no low high) \\<and>\n                             var no = var p) \\<and>\n                         (p \\<in> set prx \\<or> p \\<in> set sfx) \\<and>\n                         ((\\<exists>pt\\<in>set prx \\<union> set sfx.\n                              repNodes_eq pt p low high\n                               repa) \\<longrightarrow>\n                          nodeslist =\n                          hd (filter\n                               (\\<lambda>sn. repNodes_eq sn p low high repa)\n                               prx @\n                              filter\n                               (\\<lambda>sn. repNodes_eq sn p low high repa)\n                               sfx)) \\<and>\n                         ((\\<forall>pt\\<in>set prx \\<union> set sfx.\n                              \\<not> repNodes_eq pt p low high\nrepa) \\<longrightarrow>\n                          repa = repa(p := nodeslist))\n 3. \\<And>ns var low high rep next p nodeslist.\n       \\<lbrakk>List nodeslist next ns;\n        \\<forall>no\\<in>set ns.\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           (isLeaf_pt p low high \\<longrightarrow>\n            isLeaf_pt no low high) \\<and>\n           var no = var p;\n        p \\<in> set ns; isLeaf_pt p low high\\<rbrakk>\n       \\<Longrightarrow> nodeslist =\n                         hd (filter\n                              (\\<lambda>sn. repNodes_eq sn p low high rep)\n                              ns) \\<and>\n                         var nodeslist = var p\n 4. \\<And>var low high rep p ns lowa higha repa next pa nodeslist.\n       \\<lbrakk>\\<exists>prx sfx.\n                   List nodeslist next sfx \\<and>\n                   ns = prx @ sfx \\<and>\n                   \\<not> isLeaf_pt pa lowa higha \\<and>\n                   (\\<forall>no\\<in>set ns.\n                       no \\<noteq> Null \\<and>\n                       (low no = Null) = (high no = Null) \\<and>\n                       (isLeaf_pt p low high \\<longrightarrow>\n                        isLeaf_pt no low high) \\<and>\n                       var no = var p) \\<and>\n                   p \\<in> set ns \\<and>\n                   ((\\<exists>pt\\<in>set prx.\n                        repNodes_eq pt p low high rep) \\<longrightarrow>\n                    repa p =\n                    hd (filter (\\<lambda>sn. repNodes_eq sn p low high rep)\n                         prx) \\<and>\n                    (\\<forall>pt.\n                        pt \\<noteq> p \\<longrightarrow>\n                        rep pt = repa pt)) \\<and>\n                   ((\\<forall>pt\\<in>set prx.\n                        \\<not> repNodes_eq pt p low high\n                                rep) \\<longrightarrow>\n                    rep = repa) \\<and>\n                   (nodeslist \\<noteq> Null \\<longrightarrow>\n                    (\\<forall>pt\\<in>set prx.\n                        \\<not> repNodes_eq pt p low high rep)) \\<and>\n                   pa = p \\<and> higha = high \\<and> lowa = low;\n        \\<not> nodeslist \\<noteq> Null\\<rbrakk>\n       \\<Longrightarrow> repa p =\n                         hd (filter\n                              (\\<lambda>sn. repNodes_eq sn p low high rep)\n                              ns) \\<and>\n                         (\\<forall>pt.\n                             pt \\<noteq> p \\<longrightarrow>\n                             rep pt = repa pt) \\<and>\n                         var (repa p) = var p", "apply    (rule conjI)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>var low high p repa next nodeslist prx sfx.\n       \\<lbrakk>nodeslist \\<noteq> Null; \\<not> isLeaf_pt p low high;\n        \\<forall>no\\<in>set prx \\<union> set (nodeslist # sfx).\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and> var no = var p;\n        p \\<in> set prx \\<or> p \\<in> set (nodeslist # sfx);\n        (\\<exists>pt\\<in>set prx.\n            repNodes_eq pt p low high repa) \\<longrightarrow>\n        repa p =\n        hd (filter (\\<lambda>sn. repNodes_eq sn p low high repa) prx);\n        \\<forall>pt\\<in>set prx. \\<not> repNodes_eq pt p low high repa;\n        \\<not> repNodes_eq nodeslist p low high repa;\n        List (next nodeslist) next sfx\\<rbrakk>\n       \\<Longrightarrow> prx @ nodeslist # sfx = (prx @ [nodeslist]) @ sfx\n 2. \\<And>var low high p repa next nodeslist prx sfx.\n       \\<lbrakk>nodeslist \\<noteq> Null; \\<not> isLeaf_pt p low high;\n        \\<forall>no\\<in>set prx \\<union> set (nodeslist # sfx).\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and> var no = var p;\n        p \\<in> set prx \\<or> p \\<in> set (nodeslist # sfx);\n        (\\<exists>pt\\<in>set prx.\n            repNodes_eq pt p low high repa) \\<longrightarrow>\n        repa p =\n        hd (filter (\\<lambda>sn. repNodes_eq sn p low high repa) prx);\n        \\<forall>pt\\<in>set prx. \\<not> repNodes_eq pt p low high repa;\n        \\<not> repNodes_eq nodeslist p low high repa;\n        List (next nodeslist) next sfx\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>no\\<in>set prx \\<union>\n    set (nodeslist # sfx).\n                             no \\<noteq> Null \\<and>\n                             (low no = Null) = (high no = Null) \\<and>\n                             var no = var p) \\<and>\n                         ((\\<exists>pt\\<in>set (prx @ [nodeslist]).\n                              repNodes_eq pt p low high\n                               repa) \\<longrightarrow>\n                          repa p =\n                          hd (filter\n                               (\\<lambda>sn. repNodes_eq sn p low high repa)\n                               (prx @ [nodeslist]))) \\<and>\n                         (next nodeslist \\<noteq> Null \\<longrightarrow>\n                          (\\<forall>pt\\<in>set (prx @ [nodeslist]).\n                              \\<not> repNodes_eq pt p low high repa))\n 3. \\<And>var low high p repa next nodeslist prx sfx.\n       \\<lbrakk>nodeslist \\<noteq> Null; List nodeslist next sfx;\n        \\<not> isLeaf_pt p low high;\n        \\<forall>no\\<in>set prx \\<union> set sfx.\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           (isLeaf_pt p low high \\<longrightarrow>\n            isLeaf_pt no low high) \\<and>\n           var no = var p;\n        p \\<in> set prx \\<or> p \\<in> set sfx;\n        (\\<exists>pt\\<in>set prx.\n            repNodes_eq pt p low high repa) \\<longrightarrow>\n        repa p =\n        hd (filter (\\<lambda>sn. repNodes_eq sn p low high repa) prx);\n        \\<forall>pt\\<in>set prx. \\<not> repNodes_eq pt p low high repa;\n        repNodes_eq nodeslist p low high repa\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>no\\<in>set prx \\<union> set sfx.\n                             no \\<noteq> Null \\<and>\n                             (low no = Null) = (high no = Null) \\<and>\n                             (isLeaf_pt p low high \\<longrightarrow>\n                              isLeaf_pt no low high) \\<and>\n                             var no = var p) \\<and>\n                         (p \\<in> set prx \\<or> p \\<in> set sfx) \\<and>\n                         ((\\<exists>pt\\<in>set prx \\<union> set sfx.\n                              repNodes_eq pt p low high\n                               repa) \\<longrightarrow>\n                          nodeslist =\n                          hd (filter\n                               (\\<lambda>sn. repNodes_eq sn p low high repa)\n                               prx @\n                              filter\n                               (\\<lambda>sn. repNodes_eq sn p low high repa)\n                               sfx)) \\<and>\n                         ((\\<forall>pt\\<in>set prx \\<union> set sfx.\n                              \\<not> repNodes_eq pt p low high\nrepa) \\<longrightarrow>\n                          repa = repa(p := nodeslist))\n 4. \\<And>ns var low high rep next p nodeslist.\n       \\<lbrakk>List nodeslist next ns;\n        \\<forall>no\\<in>set ns.\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           (isLeaf_pt p low high \\<longrightarrow>\n            isLeaf_pt no low high) \\<and>\n           var no = var p;\n        p \\<in> set ns; isLeaf_pt p low high\\<rbrakk>\n       \\<Longrightarrow> nodeslist =\n                         hd (filter\n                              (\\<lambda>sn. repNodes_eq sn p low high rep)\n                              ns) \\<and>\n                         var nodeslist = var p\n 5. \\<And>var low high rep p ns lowa higha repa next pa nodeslist.\n       \\<lbrakk>\\<exists>prx sfx.\n                   List nodeslist next sfx \\<and>\n                   ns = prx @ sfx \\<and>\n                   \\<not> isLeaf_pt pa lowa higha \\<and>\n                   (\\<forall>no\\<in>set ns.\n                       no \\<noteq> Null \\<and>\n                       (low no = Null) = (high no = Null) \\<and>\n                       (isLeaf_pt p low high \\<longrightarrow>\n                        isLeaf_pt no low high) \\<and>\n                       var no = var p) \\<and>\n                   p \\<in> set ns \\<and>\n                   ((\\<exists>pt\\<in>set prx.\n                        repNodes_eq pt p low high rep) \\<longrightarrow>\n                    repa p =\n                    hd (filter (\\<lambda>sn. repNodes_eq sn p low high rep)\n                         prx) \\<and>\n                    (\\<forall>pt.\n                        pt \\<noteq> p \\<longrightarrow>\n                        rep pt = repa pt)) \\<and>\n                   ((\\<forall>pt\\<in>set prx.\n                        \\<not> repNodes_eq pt p low high\n                                rep) \\<longrightarrow>\n                    rep = repa) \\<and>\n                   (nodeslist \\<noteq> Null \\<longrightarrow>\n                    (\\<forall>pt\\<in>set prx.\n                        \\<not> repNodes_eq pt p low high rep)) \\<and>\n                   pa = p \\<and> higha = high \\<and> lowa = low;\n        \\<not> nodeslist \\<noteq> Null\\<rbrakk>\n       \\<Longrightarrow> repa p =\n                         hd (filter\n                              (\\<lambda>sn. repNodes_eq sn p low high rep)\n                              ns) \\<and>\n                         (\\<forall>pt.\n                             pt \\<noteq> p \\<longrightarrow>\n                             rep pt = repa pt) \\<and>\n                         var (repa p) = var p", "apply     simp"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>var low high p repa next nodeslist prx sfx.\n       \\<lbrakk>nodeslist \\<noteq> Null; \\<not> isLeaf_pt p low high;\n        \\<forall>no\\<in>set prx \\<union> set (nodeslist # sfx).\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and> var no = var p;\n        p \\<in> set prx \\<or> p \\<in> set (nodeslist # sfx);\n        (\\<exists>pt\\<in>set prx.\n            repNodes_eq pt p low high repa) \\<longrightarrow>\n        repa p =\n        hd (filter (\\<lambda>sn. repNodes_eq sn p low high repa) prx);\n        \\<forall>pt\\<in>set prx. \\<not> repNodes_eq pt p low high repa;\n        \\<not> repNodes_eq nodeslist p low high repa;\n        List (next nodeslist) next sfx\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>no\\<in>set prx \\<union>\n    set (nodeslist # sfx).\n                             no \\<noteq> Null \\<and>\n                             (low no = Null) = (high no = Null) \\<and>\n                             var no = var p) \\<and>\n                         ((\\<exists>pt\\<in>set (prx @ [nodeslist]).\n                              repNodes_eq pt p low high\n                               repa) \\<longrightarrow>\n                          repa p =\n                          hd (filter\n                               (\\<lambda>sn. repNodes_eq sn p low high repa)\n                               (prx @ [nodeslist]))) \\<and>\n                         (next nodeslist \\<noteq> Null \\<longrightarrow>\n                          (\\<forall>pt\\<in>set (prx @ [nodeslist]).\n                              \\<not> repNodes_eq pt p low high repa))\n 2. \\<And>var low high p repa next nodeslist prx sfx.\n       \\<lbrakk>nodeslist \\<noteq> Null; List nodeslist next sfx;\n        \\<not> isLeaf_pt p low high;\n        \\<forall>no\\<in>set prx \\<union> set sfx.\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           (isLeaf_pt p low high \\<longrightarrow>\n            isLeaf_pt no low high) \\<and>\n           var no = var p;\n        p \\<in> set prx \\<or> p \\<in> set sfx;\n        (\\<exists>pt\\<in>set prx.\n            repNodes_eq pt p low high repa) \\<longrightarrow>\n        repa p =\n        hd (filter (\\<lambda>sn. repNodes_eq sn p low high repa) prx);\n        \\<forall>pt\\<in>set prx. \\<not> repNodes_eq pt p low high repa;\n        repNodes_eq nodeslist p low high repa\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>no\\<in>set prx \\<union> set sfx.\n                             no \\<noteq> Null \\<and>\n                             (low no = Null) = (high no = Null) \\<and>\n                             (isLeaf_pt p low high \\<longrightarrow>\n                              isLeaf_pt no low high) \\<and>\n                             var no = var p) \\<and>\n                         (p \\<in> set prx \\<or> p \\<in> set sfx) \\<and>\n                         ((\\<exists>pt\\<in>set prx \\<union> set sfx.\n                              repNodes_eq pt p low high\n                               repa) \\<longrightarrow>\n                          nodeslist =\n                          hd (filter\n                               (\\<lambda>sn. repNodes_eq sn p low high repa)\n                               prx @\n                              filter\n                               (\\<lambda>sn. repNodes_eq sn p low high repa)\n                               sfx)) \\<and>\n                         ((\\<forall>pt\\<in>set prx \\<union> set sfx.\n                              \\<not> repNodes_eq pt p low high\nrepa) \\<longrightarrow>\n                          repa = repa(p := nodeslist))\n 3. \\<And>ns var low high rep next p nodeslist.\n       \\<lbrakk>List nodeslist next ns;\n        \\<forall>no\\<in>set ns.\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           (isLeaf_pt p low high \\<longrightarrow>\n            isLeaf_pt no low high) \\<and>\n           var no = var p;\n        p \\<in> set ns; isLeaf_pt p low high\\<rbrakk>\n       \\<Longrightarrow> nodeslist =\n                         hd (filter\n                              (\\<lambda>sn. repNodes_eq sn p low high rep)\n                              ns) \\<and>\n                         var nodeslist = var p\n 4. \\<And>var low high rep p ns lowa higha repa next pa nodeslist.\n       \\<lbrakk>\\<exists>prx sfx.\n                   List nodeslist next sfx \\<and>\n                   ns = prx @ sfx \\<and>\n                   \\<not> isLeaf_pt pa lowa higha \\<and>\n                   (\\<forall>no\\<in>set ns.\n                       no \\<noteq> Null \\<and>\n                       (low no = Null) = (high no = Null) \\<and>\n                       (isLeaf_pt p low high \\<longrightarrow>\n                        isLeaf_pt no low high) \\<and>\n                       var no = var p) \\<and>\n                   p \\<in> set ns \\<and>\n                   ((\\<exists>pt\\<in>set prx.\n                        repNodes_eq pt p low high rep) \\<longrightarrow>\n                    repa p =\n                    hd (filter (\\<lambda>sn. repNodes_eq sn p low high rep)\n                         prx) \\<and>\n                    (\\<forall>pt.\n                        pt \\<noteq> p \\<longrightarrow>\n                        rep pt = repa pt)) \\<and>\n                   ((\\<forall>pt\\<in>set prx.\n                        \\<not> repNodes_eq pt p low high\n                                rep) \\<longrightarrow>\n                    rep = repa) \\<and>\n                   (nodeslist \\<noteq> Null \\<longrightarrow>\n                    (\\<forall>pt\\<in>set prx.\n                        \\<not> repNodes_eq pt p low high rep)) \\<and>\n                   pa = p \\<and> higha = high \\<and> lowa = low;\n        \\<not> nodeslist \\<noteq> Null\\<rbrakk>\n       \\<Longrightarrow> repa p =\n                         hd (filter\n                              (\\<lambda>sn. repNodes_eq sn p low high rep)\n                              ns) \\<and>\n                         (\\<forall>pt.\n                             pt \\<noteq> p \\<longrightarrow>\n                             rep pt = repa pt) \\<and>\n                         var (repa p) = var p", "prefer 4"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>var low high rep p ns lowa higha repa next pa nodeslist.\n       \\<lbrakk>\\<exists>prx sfx.\n                   List nodeslist next sfx \\<and>\n                   ns = prx @ sfx \\<and>\n                   \\<not> isLeaf_pt pa lowa higha \\<and>\n                   (\\<forall>no\\<in>set ns.\n                       no \\<noteq> Null \\<and>\n                       (low no = Null) = (high no = Null) \\<and>\n                       (isLeaf_pt p low high \\<longrightarrow>\n                        isLeaf_pt no low high) \\<and>\n                       var no = var p) \\<and>\n                   p \\<in> set ns \\<and>\n                   ((\\<exists>pt\\<in>set prx.\n                        repNodes_eq pt p low high rep) \\<longrightarrow>\n                    repa p =\n                    hd (filter (\\<lambda>sn. repNodes_eq sn p low high rep)\n                         prx) \\<and>\n                    (\\<forall>pt.\n                        pt \\<noteq> p \\<longrightarrow>\n                        rep pt = repa pt)) \\<and>\n                   ((\\<forall>pt\\<in>set prx.\n                        \\<not> repNodes_eq pt p low high\n                                rep) \\<longrightarrow>\n                    rep = repa) \\<and>\n                   (nodeslist \\<noteq> Null \\<longrightarrow>\n                    (\\<forall>pt\\<in>set prx.\n                        \\<not> repNodes_eq pt p low high rep)) \\<and>\n                   pa = p \\<and> higha = high \\<and> lowa = low;\n        \\<not> nodeslist \\<noteq> Null\\<rbrakk>\n       \\<Longrightarrow> repa p =\n                         hd (filter\n                              (\\<lambda>sn. repNodes_eq sn p low high rep)\n                              ns) \\<and>\n                         (\\<forall>pt.\n                             pt \\<noteq> p \\<longrightarrow>\n                             rep pt = repa pt) \\<and>\n                         var (repa p) = var p\n 2. \\<And>var low high p repa next nodeslist prx sfx.\n       \\<lbrakk>nodeslist \\<noteq> Null; \\<not> isLeaf_pt p low high;\n        \\<forall>no\\<in>set prx \\<union> set (nodeslist # sfx).\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and> var no = var p;\n        p \\<in> set prx \\<or> p \\<in> set (nodeslist # sfx);\n        (\\<exists>pt\\<in>set prx.\n            repNodes_eq pt p low high repa) \\<longrightarrow>\n        repa p =\n        hd (filter (\\<lambda>sn. repNodes_eq sn p low high repa) prx);\n        \\<forall>pt\\<in>set prx. \\<not> repNodes_eq pt p low high repa;\n        \\<not> repNodes_eq nodeslist p low high repa;\n        List (next nodeslist) next sfx\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>no\\<in>set prx \\<union>\n    set (nodeslist # sfx).\n                             no \\<noteq> Null \\<and>\n                             (low no = Null) = (high no = Null) \\<and>\n                             var no = var p) \\<and>\n                         ((\\<exists>pt\\<in>set (prx @ [nodeslist]).\n                              repNodes_eq pt p low high\n                               repa) \\<longrightarrow>\n                          repa p =\n                          hd (filter\n                               (\\<lambda>sn. repNodes_eq sn p low high repa)\n                               (prx @ [nodeslist]))) \\<and>\n                         (next nodeslist \\<noteq> Null \\<longrightarrow>\n                          (\\<forall>pt\\<in>set (prx @ [nodeslist]).\n                              \\<not> repNodes_eq pt p low high repa))\n 3. \\<And>var low high p repa next nodeslist prx sfx.\n       \\<lbrakk>nodeslist \\<noteq> Null; List nodeslist next sfx;\n        \\<not> isLeaf_pt p low high;\n        \\<forall>no\\<in>set prx \\<union> set sfx.\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           (isLeaf_pt p low high \\<longrightarrow>\n            isLeaf_pt no low high) \\<and>\n           var no = var p;\n        p \\<in> set prx \\<or> p \\<in> set sfx;\n        (\\<exists>pt\\<in>set prx.\n            repNodes_eq pt p low high repa) \\<longrightarrow>\n        repa p =\n        hd (filter (\\<lambda>sn. repNodes_eq sn p low high repa) prx);\n        \\<forall>pt\\<in>set prx. \\<not> repNodes_eq pt p low high repa;\n        repNodes_eq nodeslist p low high repa\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>no\\<in>set prx \\<union> set sfx.\n                             no \\<noteq> Null \\<and>\n                             (low no = Null) = (high no = Null) \\<and>\n                             (isLeaf_pt p low high \\<longrightarrow>\n                              isLeaf_pt no low high) \\<and>\n                             var no = var p) \\<and>\n                         (p \\<in> set prx \\<or> p \\<in> set sfx) \\<and>\n                         ((\\<exists>pt\\<in>set prx \\<union> set sfx.\n                              repNodes_eq pt p low high\n                               repa) \\<longrightarrow>\n                          nodeslist =\n                          hd (filter\n                               (\\<lambda>sn. repNodes_eq sn p low high repa)\n                               prx @\n                              filter\n                               (\\<lambda>sn. repNodes_eq sn p low high repa)\n                               sfx)) \\<and>\n                         ((\\<forall>pt\\<in>set prx \\<union> set sfx.\n                              \\<not> repNodes_eq pt p low high\nrepa) \\<longrightarrow>\n                          repa = repa(p := nodeslist))\n 4. \\<And>ns var low high rep next p nodeslist.\n       \\<lbrakk>List nodeslist next ns;\n        \\<forall>no\\<in>set ns.\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           (isLeaf_pt p low high \\<longrightarrow>\n            isLeaf_pt no low high) \\<and>\n           var no = var p;\n        p \\<in> set ns; isLeaf_pt p low high\\<rbrakk>\n       \\<Longrightarrow> nodeslist =\n                         hd (filter\n                              (\\<lambda>sn. repNodes_eq sn p low high rep)\n                              ns) \\<and>\n                         var nodeslist = var p", "apply   (elim exE conjE)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>var low high rep p ns lowa higha repa next pa nodeslist prx sfx.\n       \\<lbrakk>\\<not> nodeslist \\<noteq> Null; List nodeslist next sfx;\n        ns = prx @ sfx; \\<not> isLeaf_pt pa lowa higha;\n        \\<forall>no\\<in>set ns.\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           (isLeaf_pt p low high \\<longrightarrow>\n            isLeaf_pt no low high) \\<and>\n           var no = var p;\n        p \\<in> set ns;\n        (\\<exists>pt\\<in>set prx.\n            repNodes_eq pt p low high rep) \\<longrightarrow>\n        repa p =\n        hd (filter (\\<lambda>sn. repNodes_eq sn p low high rep) prx) \\<and>\n        (\\<forall>pt. pt \\<noteq> p \\<longrightarrow> rep pt = repa pt);\n        (\\<forall>pt\\<in>set prx.\n            \\<not> repNodes_eq pt p low high rep) \\<longrightarrow>\n        rep = repa;\n        nodeslist \\<noteq> Null \\<longrightarrow>\n        (\\<forall>pt\\<in>set prx. \\<not> repNodes_eq pt p low high rep);\n        pa = p; higha = high; lowa = low\\<rbrakk>\n       \\<Longrightarrow> repa p =\n                         hd (filter\n                              (\\<lambda>sn. repNodes_eq sn p low high rep)\n                              ns) \\<and>\n                         (\\<forall>pt.\n                             pt \\<noteq> p \\<longrightarrow>\n                             rep pt = repa pt) \\<and>\n                         var (repa p) = var p\n 2. \\<And>var low high p repa next nodeslist prx sfx.\n       \\<lbrakk>nodeslist \\<noteq> Null; \\<not> isLeaf_pt p low high;\n        \\<forall>no\\<in>set prx \\<union> set (nodeslist # sfx).\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and> var no = var p;\n        p \\<in> set prx \\<or> p \\<in> set (nodeslist # sfx);\n        (\\<exists>pt\\<in>set prx.\n            repNodes_eq pt p low high repa) \\<longrightarrow>\n        repa p =\n        hd (filter (\\<lambda>sn. repNodes_eq sn p low high repa) prx);\n        \\<forall>pt\\<in>set prx. \\<not> repNodes_eq pt p low high repa;\n        \\<not> repNodes_eq nodeslist p low high repa;\n        List (next nodeslist) next sfx\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>no\\<in>set prx \\<union>\n    set (nodeslist # sfx).\n                             no \\<noteq> Null \\<and>\n                             (low no = Null) = (high no = Null) \\<and>\n                             var no = var p) \\<and>\n                         ((\\<exists>pt\\<in>set (prx @ [nodeslist]).\n                              repNodes_eq pt p low high\n                               repa) \\<longrightarrow>\n                          repa p =\n                          hd (filter\n                               (\\<lambda>sn. repNodes_eq sn p low high repa)\n                               (prx @ [nodeslist]))) \\<and>\n                         (next nodeslist \\<noteq> Null \\<longrightarrow>\n                          (\\<forall>pt\\<in>set (prx @ [nodeslist]).\n                              \\<not> repNodes_eq pt p low high repa))\n 3. \\<And>var low high p repa next nodeslist prx sfx.\n       \\<lbrakk>nodeslist \\<noteq> Null; List nodeslist next sfx;\n        \\<not> isLeaf_pt p low high;\n        \\<forall>no\\<in>set prx \\<union> set sfx.\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           (isLeaf_pt p low high \\<longrightarrow>\n            isLeaf_pt no low high) \\<and>\n           var no = var p;\n        p \\<in> set prx \\<or> p \\<in> set sfx;\n        (\\<exists>pt\\<in>set prx.\n            repNodes_eq pt p low high repa) \\<longrightarrow>\n        repa p =\n        hd (filter (\\<lambda>sn. repNodes_eq sn p low high repa) prx);\n        \\<forall>pt\\<in>set prx. \\<not> repNodes_eq pt p low high repa;\n        repNodes_eq nodeslist p low high repa\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>no\\<in>set prx \\<union> set sfx.\n                             no \\<noteq> Null \\<and>\n                             (low no = Null) = (high no = Null) \\<and>\n                             (isLeaf_pt p low high \\<longrightarrow>\n                              isLeaf_pt no low high) \\<and>\n                             var no = var p) \\<and>\n                         (p \\<in> set prx \\<or> p \\<in> set sfx) \\<and>\n                         ((\\<exists>pt\\<in>set prx \\<union> set sfx.\n                              repNodes_eq pt p low high\n                               repa) \\<longrightarrow>\n                          nodeslist =\n                          hd (filter\n                               (\\<lambda>sn. repNodes_eq sn p low high repa)\n                               prx @\n                              filter\n                               (\\<lambda>sn. repNodes_eq sn p low high repa)\n                               sfx)) \\<and>\n                         ((\\<forall>pt\\<in>set prx \\<union> set sfx.\n                              \\<not> repNodes_eq pt p low high\nrepa) \\<longrightarrow>\n                          repa = repa(p := nodeslist))\n 4. \\<And>ns var low high rep next p nodeslist.\n       \\<lbrakk>List nodeslist next ns;\n        \\<forall>no\\<in>set ns.\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           (isLeaf_pt p low high \\<longrightarrow>\n            isLeaf_pt no low high) \\<and>\n           var no = var p;\n        p \\<in> set ns; isLeaf_pt p low high\\<rbrakk>\n       \\<Longrightarrow> nodeslist =\n                         hd (filter\n                              (\\<lambda>sn. repNodes_eq sn p low high rep)\n                              ns) \\<and>\n                         var nodeslist = var p", "apply   (simp (no_asm_use))"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>var low high rep p ns lowa higha repa next pa nodeslist prx sfx.\n       \\<lbrakk>nodeslist = Null; List nodeslist next sfx; ns = prx @ sfx;\n        \\<not> isLeaf_pt pa lowa higha;\n        \\<forall>no\\<in>set ns.\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           (isLeaf_pt p low high \\<longrightarrow>\n            isLeaf_pt no low high) \\<and>\n           var no = var p;\n        p \\<in> set ns;\n        (\\<exists>pt\\<in>set prx.\n            repNodes_eq pt p low high rep) \\<longrightarrow>\n        repa p =\n        hd (filter (\\<lambda>sn. repNodes_eq sn p low high rep) prx) \\<and>\n        (\\<forall>pt. pt \\<noteq> p \\<longrightarrow> rep pt = repa pt);\n        (\\<forall>pt\\<in>set prx.\n            \\<not> repNodes_eq pt p low high rep) \\<longrightarrow>\n        rep = repa;\n        nodeslist \\<noteq> Null \\<longrightarrow>\n        (\\<forall>pt\\<in>set prx. \\<not> repNodes_eq pt p low high rep);\n        pa = p; higha = high; lowa = low\\<rbrakk>\n       \\<Longrightarrow> repa p =\n                         hd (filter\n                              (\\<lambda>sn. repNodes_eq sn p low high rep)\n                              ns) \\<and>\n                         (\\<forall>pt.\n                             pt \\<noteq> p \\<longrightarrow>\n                             rep pt = repa pt) \\<and>\n                         var (repa p) = var p\n 2. \\<And>var low high p repa next nodeslist prx sfx.\n       \\<lbrakk>nodeslist \\<noteq> Null; \\<not> isLeaf_pt p low high;\n        \\<forall>no\\<in>set prx \\<union> set (nodeslist # sfx).\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and> var no = var p;\n        p \\<in> set prx \\<or> p \\<in> set (nodeslist # sfx);\n        (\\<exists>pt\\<in>set prx.\n            repNodes_eq pt p low high repa) \\<longrightarrow>\n        repa p =\n        hd (filter (\\<lambda>sn. repNodes_eq sn p low high repa) prx);\n        \\<forall>pt\\<in>set prx. \\<not> repNodes_eq pt p low high repa;\n        \\<not> repNodes_eq nodeslist p low high repa;\n        List (next nodeslist) next sfx\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>no\\<in>set prx \\<union>\n    set (nodeslist # sfx).\n                             no \\<noteq> Null \\<and>\n                             (low no = Null) = (high no = Null) \\<and>\n                             var no = var p) \\<and>\n                         ((\\<exists>pt\\<in>set (prx @ [nodeslist]).\n                              repNodes_eq pt p low high\n                               repa) \\<longrightarrow>\n                          repa p =\n                          hd (filter\n                               (\\<lambda>sn. repNodes_eq sn p low high repa)\n                               (prx @ [nodeslist]))) \\<and>\n                         (next nodeslist \\<noteq> Null \\<longrightarrow>\n                          (\\<forall>pt\\<in>set (prx @ [nodeslist]).\n                              \\<not> repNodes_eq pt p low high repa))\n 3. \\<And>var low high p repa next nodeslist prx sfx.\n       \\<lbrakk>nodeslist \\<noteq> Null; List nodeslist next sfx;\n        \\<not> isLeaf_pt p low high;\n        \\<forall>no\\<in>set prx \\<union> set sfx.\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           (isLeaf_pt p low high \\<longrightarrow>\n            isLeaf_pt no low high) \\<and>\n           var no = var p;\n        p \\<in> set prx \\<or> p \\<in> set sfx;\n        (\\<exists>pt\\<in>set prx.\n            repNodes_eq pt p low high repa) \\<longrightarrow>\n        repa p =\n        hd (filter (\\<lambda>sn. repNodes_eq sn p low high repa) prx);\n        \\<forall>pt\\<in>set prx. \\<not> repNodes_eq pt p low high repa;\n        repNodes_eq nodeslist p low high repa\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>no\\<in>set prx \\<union> set sfx.\n                             no \\<noteq> Null \\<and>\n                             (low no = Null) = (high no = Null) \\<and>\n                             (isLeaf_pt p low high \\<longrightarrow>\n                              isLeaf_pt no low high) \\<and>\n                             var no = var p) \\<and>\n                         (p \\<in> set prx \\<or> p \\<in> set sfx) \\<and>\n                         ((\\<exists>pt\\<in>set prx \\<union> set sfx.\n                              repNodes_eq pt p low high\n                               repa) \\<longrightarrow>\n                          nodeslist =\n                          hd (filter\n                               (\\<lambda>sn. repNodes_eq sn p low high repa)\n                               prx @\n                              filter\n                               (\\<lambda>sn. repNodes_eq sn p low high repa)\n                               sfx)) \\<and>\n                         ((\\<forall>pt\\<in>set prx \\<union> set sfx.\n                              \\<not> repNodes_eq pt p low high\nrepa) \\<longrightarrow>\n                          repa = repa(p := nodeslist))\n 4. \\<And>ns var low high rep next p nodeslist.\n       \\<lbrakk>List nodeslist next ns;\n        \\<forall>no\\<in>set ns.\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           (isLeaf_pt p low high \\<longrightarrow>\n            isLeaf_pt no low high) \\<and>\n           var no = var p;\n        p \\<in> set ns; isLeaf_pt p low high\\<rbrakk>\n       \\<Longrightarrow> nodeslist =\n                         hd (filter\n                              (\\<lambda>sn. repNodes_eq sn p low high rep)\n                              ns) \\<and>\n                         var nodeslist = var p", "apply   hypsubst"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>var low high rep p ns lowa higha repa next pa nodeslist prx sfx.\n       \\<lbrakk>List Null next sfx; \\<not> isLeaf_pt p low high;\n        \\<forall>no\\<in>set (prx @ sfx).\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           (isLeaf_pt p low high \\<longrightarrow>\n            isLeaf_pt no low high) \\<and>\n           var no = var p;\n        p \\<in> set (prx @ sfx);\n        (\\<exists>pt\\<in>set prx.\n            repNodes_eq pt p low high rep) \\<longrightarrow>\n        repa p =\n        hd (filter (\\<lambda>sn. repNodes_eq sn p low high rep) prx) \\<and>\n        (\\<forall>pt. pt \\<noteq> p \\<longrightarrow> rep pt = repa pt);\n        (\\<forall>pt\\<in>set prx.\n            \\<not> repNodes_eq pt p low high rep) \\<longrightarrow>\n        rep = repa;\n        Null \\<noteq> Null \\<longrightarrow>\n        (\\<forall>pt\\<in>set prx.\n            \\<not> repNodes_eq pt p low high rep)\\<rbrakk>\n       \\<Longrightarrow> repa p =\n                         hd (filter\n                              (\\<lambda>sn. repNodes_eq sn p low high rep)\n                              (prx @ sfx)) \\<and>\n                         (\\<forall>pt.\n                             pt \\<noteq> p \\<longrightarrow>\n                             rep pt = repa pt) \\<and>\n                         var (repa p) = var p\n 2. \\<And>var low high p repa next nodeslist prx sfx.\n       \\<lbrakk>nodeslist \\<noteq> Null; \\<not> isLeaf_pt p low high;\n        \\<forall>no\\<in>set prx \\<union> set (nodeslist # sfx).\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and> var no = var p;\n        p \\<in> set prx \\<or> p \\<in> set (nodeslist # sfx);\n        (\\<exists>pt\\<in>set prx.\n            repNodes_eq pt p low high repa) \\<longrightarrow>\n        repa p =\n        hd (filter (\\<lambda>sn. repNodes_eq sn p low high repa) prx);\n        \\<forall>pt\\<in>set prx. \\<not> repNodes_eq pt p low high repa;\n        \\<not> repNodes_eq nodeslist p low high repa;\n        List (next nodeslist) next sfx\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>no\\<in>set prx \\<union>\n    set (nodeslist # sfx).\n                             no \\<noteq> Null \\<and>\n                             (low no = Null) = (high no = Null) \\<and>\n                             var no = var p) \\<and>\n                         ((\\<exists>pt\\<in>set (prx @ [nodeslist]).\n                              repNodes_eq pt p low high\n                               repa) \\<longrightarrow>\n                          repa p =\n                          hd (filter\n                               (\\<lambda>sn. repNodes_eq sn p low high repa)\n                               (prx @ [nodeslist]))) \\<and>\n                         (next nodeslist \\<noteq> Null \\<longrightarrow>\n                          (\\<forall>pt\\<in>set (prx @ [nodeslist]).\n                              \\<not> repNodes_eq pt p low high repa))\n 3. \\<And>var low high p repa next nodeslist prx sfx.\n       \\<lbrakk>nodeslist \\<noteq> Null; List nodeslist next sfx;\n        \\<not> isLeaf_pt p low high;\n        \\<forall>no\\<in>set prx \\<union> set sfx.\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           (isLeaf_pt p low high \\<longrightarrow>\n            isLeaf_pt no low high) \\<and>\n           var no = var p;\n        p \\<in> set prx \\<or> p \\<in> set sfx;\n        (\\<exists>pt\\<in>set prx.\n            repNodes_eq pt p low high repa) \\<longrightarrow>\n        repa p =\n        hd (filter (\\<lambda>sn. repNodes_eq sn p low high repa) prx);\n        \\<forall>pt\\<in>set prx. \\<not> repNodes_eq pt p low high repa;\n        repNodes_eq nodeslist p low high repa\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>no\\<in>set prx \\<union> set sfx.\n                             no \\<noteq> Null \\<and>\n                             (low no = Null) = (high no = Null) \\<and>\n                             (isLeaf_pt p low high \\<longrightarrow>\n                              isLeaf_pt no low high) \\<and>\n                             var no = var p) \\<and>\n                         (p \\<in> set prx \\<or> p \\<in> set sfx) \\<and>\n                         ((\\<exists>pt\\<in>set prx \\<union> set sfx.\n                              repNodes_eq pt p low high\n                               repa) \\<longrightarrow>\n                          nodeslist =\n                          hd (filter\n                               (\\<lambda>sn. repNodes_eq sn p low high repa)\n                               prx @\n                              filter\n                               (\\<lambda>sn. repNodes_eq sn p low high repa)\n                               sfx)) \\<and>\n                         ((\\<forall>pt\\<in>set prx \\<union> set sfx.\n                              \\<not> repNodes_eq pt p low high\nrepa) \\<longrightarrow>\n                          repa = repa(p := nodeslist))\n 4. \\<And>ns var low high rep next p nodeslist.\n       \\<lbrakk>List nodeslist next ns;\n        \\<forall>no\\<in>set ns.\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           (isLeaf_pt p low high \\<longrightarrow>\n            isLeaf_pt no low high) \\<and>\n           var no = var p;\n        p \\<in> set ns; isLeaf_pt p low high\\<rbrakk>\n       \\<Longrightarrow> nodeslist =\n                         hd (filter\n                              (\\<lambda>sn. repNodes_eq sn p low high rep)\n                              ns) \\<and>\n                         var nodeslist = var p", "using  [[simp_depth_limit = 100]]"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>var low high rep p ns lowa higha repa next pa nodeslist prx sfx.\n       \\<lbrakk>List Null next sfx; \\<not> isLeaf_pt p low high;\n        \\<forall>no\\<in>set (prx @ sfx).\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           (isLeaf_pt p low high \\<longrightarrow>\n            isLeaf_pt no low high) \\<and>\n           var no = var p;\n        p \\<in> set (prx @ sfx);\n        (\\<exists>pt\\<in>set prx.\n            repNodes_eq pt p low high rep) \\<longrightarrow>\n        repa p =\n        hd (filter (\\<lambda>sn. repNodes_eq sn p low high rep) prx) \\<and>\n        (\\<forall>pt. pt \\<noteq> p \\<longrightarrow> rep pt = repa pt);\n        (\\<forall>pt\\<in>set prx.\n            \\<not> repNodes_eq pt p low high rep) \\<longrightarrow>\n        rep = repa;\n        Null \\<noteq> Null \\<longrightarrow>\n        (\\<forall>pt\\<in>set prx.\n            \\<not> repNodes_eq pt p low high rep)\\<rbrakk>\n       \\<Longrightarrow> repa p =\n                         hd (filter\n                              (\\<lambda>sn. repNodes_eq sn p low high rep)\n                              (prx @ sfx)) \\<and>\n                         (\\<forall>pt.\n                             pt \\<noteq> p \\<longrightarrow>\n                             rep pt = repa pt) \\<and>\n                         var (repa p) = var p\n 2. \\<And>var low high p repa next nodeslist prx sfx.\n       \\<lbrakk>nodeslist \\<noteq> Null; \\<not> isLeaf_pt p low high;\n        \\<forall>no\\<in>set prx \\<union> set (nodeslist # sfx).\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and> var no = var p;\n        p \\<in> set prx \\<or> p \\<in> set (nodeslist # sfx);\n        (\\<exists>pt\\<in>set prx.\n            repNodes_eq pt p low high repa) \\<longrightarrow>\n        repa p =\n        hd (filter (\\<lambda>sn. repNodes_eq sn p low high repa) prx);\n        \\<forall>pt\\<in>set prx. \\<not> repNodes_eq pt p low high repa;\n        \\<not> repNodes_eq nodeslist p low high repa;\n        List (next nodeslist) next sfx\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>no\\<in>set prx \\<union>\n    set (nodeslist # sfx).\n                             no \\<noteq> Null \\<and>\n                             (low no = Null) = (high no = Null) \\<and>\n                             var no = var p) \\<and>\n                         ((\\<exists>pt\\<in>set (prx @ [nodeslist]).\n                              repNodes_eq pt p low high\n                               repa) \\<longrightarrow>\n                          repa p =\n                          hd (filter\n                               (\\<lambda>sn. repNodes_eq sn p low high repa)\n                               (prx @ [nodeslist]))) \\<and>\n                         (next nodeslist \\<noteq> Null \\<longrightarrow>\n                          (\\<forall>pt\\<in>set (prx @ [nodeslist]).\n                              \\<not> repNodes_eq pt p low high repa))\n 3. \\<And>var low high p repa next nodeslist prx sfx.\n       \\<lbrakk>nodeslist \\<noteq> Null; List nodeslist next sfx;\n        \\<not> isLeaf_pt p low high;\n        \\<forall>no\\<in>set prx \\<union> set sfx.\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           (isLeaf_pt p low high \\<longrightarrow>\n            isLeaf_pt no low high) \\<and>\n           var no = var p;\n        p \\<in> set prx \\<or> p \\<in> set sfx;\n        (\\<exists>pt\\<in>set prx.\n            repNodes_eq pt p low high repa) \\<longrightarrow>\n        repa p =\n        hd (filter (\\<lambda>sn. repNodes_eq sn p low high repa) prx);\n        \\<forall>pt\\<in>set prx. \\<not> repNodes_eq pt p low high repa;\n        repNodes_eq nodeslist p low high repa\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>no\\<in>set prx \\<union> set sfx.\n                             no \\<noteq> Null \\<and>\n                             (low no = Null) = (high no = Null) \\<and>\n                             (isLeaf_pt p low high \\<longrightarrow>\n                              isLeaf_pt no low high) \\<and>\n                             var no = var p) \\<and>\n                         (p \\<in> set prx \\<or> p \\<in> set sfx) \\<and>\n                         ((\\<exists>pt\\<in>set prx \\<union> set sfx.\n                              repNodes_eq pt p low high\n                               repa) \\<longrightarrow>\n                          nodeslist =\n                          hd (filter\n                               (\\<lambda>sn. repNodes_eq sn p low high repa)\n                               prx @\n                              filter\n                               (\\<lambda>sn. repNodes_eq sn p low high repa)\n                               sfx)) \\<and>\n                         ((\\<forall>pt\\<in>set prx \\<union> set sfx.\n                              \\<not> repNodes_eq pt p low high\nrepa) \\<longrightarrow>\n                          repa = repa(p := nodeslist))\n 4. \\<And>ns var low high rep next p nodeslist.\n       \\<lbrakk>List nodeslist next ns;\n        \\<forall>no\\<in>set ns.\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           (isLeaf_pt p low high \\<longrightarrow>\n            isLeaf_pt no low high) \\<and>\n           var no = var p;\n        p \\<in> set ns; isLeaf_pt p low high\\<rbrakk>\n       \\<Longrightarrow> nodeslist =\n                         hd (filter\n                              (\\<lambda>sn. repNodes_eq sn p low high rep)\n                              ns) \\<and>\n                         var nodeslist = var p", "proof -"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>var low high rep p ns lowa higha repa next pa nodeslist prx sfx.\n       \\<lbrakk>List Null next sfx; \\<not> isLeaf_pt p low high;\n        \\<forall>no\\<in>set (prx @ sfx).\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           (isLeaf_pt p low high \\<longrightarrow>\n            isLeaf_pt no low high) \\<and>\n           var no = var p;\n        p \\<in> set (prx @ sfx);\n        (\\<exists>pt\\<in>set prx.\n            repNodes_eq pt p low high rep) \\<longrightarrow>\n        repa p =\n        hd (filter (\\<lambda>sn. repNodes_eq sn p low high rep) prx) \\<and>\n        (\\<forall>pt. pt \\<noteq> p \\<longrightarrow> rep pt = repa pt);\n        (\\<forall>pt\\<in>set prx.\n            \\<not> repNodes_eq pt p low high rep) \\<longrightarrow>\n        rep = repa;\n        Null \\<noteq> Null \\<longrightarrow>\n        (\\<forall>pt\\<in>set prx.\n            \\<not> repNodes_eq pt p low high rep)\\<rbrakk>\n       \\<Longrightarrow> repa p =\n                         hd (filter\n                              (\\<lambda>sn. repNodes_eq sn p low high rep)\n                              (prx @ sfx)) \\<and>\n                         (\\<forall>pt.\n                             pt \\<noteq> p \\<longrightarrow>\n                             rep pt = repa pt) \\<and>\n                         var (repa p) = var p\n 2. \\<And>var low high p repa next nodeslist prx sfx.\n       \\<lbrakk>nodeslist \\<noteq> Null; \\<not> isLeaf_pt p low high;\n        \\<forall>no\\<in>set prx \\<union> set (nodeslist # sfx).\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and> var no = var p;\n        p \\<in> set prx \\<or> p \\<in> set (nodeslist # sfx);\n        (\\<exists>pt\\<in>set prx.\n            repNodes_eq pt p low high repa) \\<longrightarrow>\n        repa p =\n        hd (filter (\\<lambda>sn. repNodes_eq sn p low high repa) prx);\n        \\<forall>pt\\<in>set prx. \\<not> repNodes_eq pt p low high repa;\n        \\<not> repNodes_eq nodeslist p low high repa;\n        List (next nodeslist) next sfx\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>no\\<in>set prx \\<union>\n    set (nodeslist # sfx).\n                             no \\<noteq> Null \\<and>\n                             (low no = Null) = (high no = Null) \\<and>\n                             var no = var p) \\<and>\n                         ((\\<exists>pt\\<in>set (prx @ [nodeslist]).\n                              repNodes_eq pt p low high\n                               repa) \\<longrightarrow>\n                          repa p =\n                          hd (filter\n                               (\\<lambda>sn. repNodes_eq sn p low high repa)\n                               (prx @ [nodeslist]))) \\<and>\n                         (next nodeslist \\<noteq> Null \\<longrightarrow>\n                          (\\<forall>pt\\<in>set (prx @ [nodeslist]).\n                              \\<not> repNodes_eq pt p low high repa))\n 3. \\<And>var low high p repa next nodeslist prx sfx.\n       \\<lbrakk>nodeslist \\<noteq> Null; List nodeslist next sfx;\n        \\<not> isLeaf_pt p low high;\n        \\<forall>no\\<in>set prx \\<union> set sfx.\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           (isLeaf_pt p low high \\<longrightarrow>\n            isLeaf_pt no low high) \\<and>\n           var no = var p;\n        p \\<in> set prx \\<or> p \\<in> set sfx;\n        (\\<exists>pt\\<in>set prx.\n            repNodes_eq pt p low high repa) \\<longrightarrow>\n        repa p =\n        hd (filter (\\<lambda>sn. repNodes_eq sn p low high repa) prx);\n        \\<forall>pt\\<in>set prx. \\<not> repNodes_eq pt p low high repa;\n        repNodes_eq nodeslist p low high repa\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>no\\<in>set prx \\<union> set sfx.\n                             no \\<noteq> Null \\<and>\n                             (low no = Null) = (high no = Null) \\<and>\n                             (isLeaf_pt p low high \\<longrightarrow>\n                              isLeaf_pt no low high) \\<and>\n                             var no = var p) \\<and>\n                         (p \\<in> set prx \\<or> p \\<in> set sfx) \\<and>\n                         ((\\<exists>pt\\<in>set prx \\<union> set sfx.\n                              repNodes_eq pt p low high\n                               repa) \\<longrightarrow>\n                          nodeslist =\n                          hd (filter\n                               (\\<lambda>sn. repNodes_eq sn p low high repa)\n                               prx @\n                              filter\n                               (\\<lambda>sn. repNodes_eq sn p low high repa)\n                               sfx)) \\<and>\n                         ((\\<forall>pt\\<in>set prx \\<union> set sfx.\n                              \\<not> repNodes_eq pt p low high\nrepa) \\<longrightarrow>\n                          repa = repa(p := nodeslist))\n 4. \\<And>ns var low high rep next p nodeslist.\n       \\<lbrakk>List nodeslist next ns;\n        \\<forall>no\\<in>set ns.\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           (isLeaf_pt p low high \\<longrightarrow>\n            isLeaf_pt no low high) \\<and>\n           var no = var p;\n        p \\<in> set ns; isLeaf_pt p low high\\<rbrakk>\n       \\<Longrightarrow> nodeslist =\n                         hd (filter\n                              (\\<lambda>sn. repNodes_eq sn p low high rep)\n                              ns) \\<and>\n                         var nodeslist = var p", "(* IF-THEN to postcondition *)"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>var low high rep p ns lowa higha repa next pa nodeslist prx sfx.\n       \\<lbrakk>List Null next sfx; \\<not> isLeaf_pt p low high;\n        \\<forall>no\\<in>set (prx @ sfx).\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           (isLeaf_pt p low high \\<longrightarrow>\n            isLeaf_pt no low high) \\<and>\n           var no = var p;\n        p \\<in> set (prx @ sfx);\n        (\\<exists>pt\\<in>set prx.\n            repNodes_eq pt p low high rep) \\<longrightarrow>\n        repa p =\n        hd (filter (\\<lambda>sn. repNodes_eq sn p low high rep) prx) \\<and>\n        (\\<forall>pt. pt \\<noteq> p \\<longrightarrow> rep pt = repa pt);\n        (\\<forall>pt\\<in>set prx.\n            \\<not> repNodes_eq pt p low high rep) \\<longrightarrow>\n        rep = repa;\n        Null \\<noteq> Null \\<longrightarrow>\n        (\\<forall>pt\\<in>set prx.\n            \\<not> repNodes_eq pt p low high rep)\\<rbrakk>\n       \\<Longrightarrow> repa p =\n                         hd (filter\n                              (\\<lambda>sn. repNodes_eq sn p low high rep)\n                              (prx @ sfx)) \\<and>\n                         (\\<forall>pt.\n                             pt \\<noteq> p \\<longrightarrow>\n                             rep pt = repa pt) \\<and>\n                         var (repa p) = var p\n 2. \\<And>var low high p repa next nodeslist prx sfx.\n       \\<lbrakk>nodeslist \\<noteq> Null; \\<not> isLeaf_pt p low high;\n        \\<forall>no\\<in>set prx \\<union> set (nodeslist # sfx).\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and> var no = var p;\n        p \\<in> set prx \\<or> p \\<in> set (nodeslist # sfx);\n        (\\<exists>pt\\<in>set prx.\n            repNodes_eq pt p low high repa) \\<longrightarrow>\n        repa p =\n        hd (filter (\\<lambda>sn. repNodes_eq sn p low high repa) prx);\n        \\<forall>pt\\<in>set prx. \\<not> repNodes_eq pt p low high repa;\n        \\<not> repNodes_eq nodeslist p low high repa;\n        List (next nodeslist) next sfx\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>no\\<in>set prx \\<union>\n    set (nodeslist # sfx).\n                             no \\<noteq> Null \\<and>\n                             (low no = Null) = (high no = Null) \\<and>\n                             var no = var p) \\<and>\n                         ((\\<exists>pt\\<in>set (prx @ [nodeslist]).\n                              repNodes_eq pt p low high\n                               repa) \\<longrightarrow>\n                          repa p =\n                          hd (filter\n                               (\\<lambda>sn. repNodes_eq sn p low high repa)\n                               (prx @ [nodeslist]))) \\<and>\n                         (next nodeslist \\<noteq> Null \\<longrightarrow>\n                          (\\<forall>pt\\<in>set (prx @ [nodeslist]).\n                              \\<not> repNodes_eq pt p low high repa))\n 3. \\<And>var low high p repa next nodeslist prx sfx.\n       \\<lbrakk>nodeslist \\<noteq> Null; List nodeslist next sfx;\n        \\<not> isLeaf_pt p low high;\n        \\<forall>no\\<in>set prx \\<union> set sfx.\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           (isLeaf_pt p low high \\<longrightarrow>\n            isLeaf_pt no low high) \\<and>\n           var no = var p;\n        p \\<in> set prx \\<or> p \\<in> set sfx;\n        (\\<exists>pt\\<in>set prx.\n            repNodes_eq pt p low high repa) \\<longrightarrow>\n        repa p =\n        hd (filter (\\<lambda>sn. repNodes_eq sn p low high repa) prx);\n        \\<forall>pt\\<in>set prx. \\<not> repNodes_eq pt p low high repa;\n        repNodes_eq nodeslist p low high repa\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>no\\<in>set prx \\<union> set sfx.\n                             no \\<noteq> Null \\<and>\n                             (low no = Null) = (high no = Null) \\<and>\n                             (isLeaf_pt p low high \\<longrightarrow>\n                              isLeaf_pt no low high) \\<and>\n                             var no = var p) \\<and>\n                         (p \\<in> set prx \\<or> p \\<in> set sfx) \\<and>\n                         ((\\<exists>pt\\<in>set prx \\<union> set sfx.\n                              repNodes_eq pt p low high\n                               repa) \\<longrightarrow>\n                          nodeslist =\n                          hd (filter\n                               (\\<lambda>sn. repNodes_eq sn p low high repa)\n                               prx @\n                              filter\n                               (\\<lambda>sn. repNodes_eq sn p low high repa)\n                               sfx)) \\<and>\n                         ((\\<forall>pt\\<in>set prx \\<union> set sfx.\n                              \\<not> repNodes_eq pt p low high\nrepa) \\<longrightarrow>\n                          repa = repa(p := nodeslist))\n 4. \\<And>ns var low high rep next p nodeslist.\n       \\<lbrakk>List nodeslist next ns;\n        \\<forall>no\\<in>set ns.\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           (isLeaf_pt p low high \\<longrightarrow>\n            isLeaf_pt no low high) \\<and>\n           var no = var p;\n        p \\<in> set ns; isLeaf_pt p low high\\<rbrakk>\n       \\<Longrightarrow> nodeslist =\n                         hd (filter\n                              (\\<lambda>sn. repNodes_eq sn p low high rep)\n                              ns) \\<and>\n                         var nodeslist = var p", "fix ns var low high rep \"next\" p nodeslist"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>var low high rep p ns lowa higha repa next pa nodeslist prx sfx.\n       \\<lbrakk>List Null next sfx; \\<not> isLeaf_pt p low high;\n        \\<forall>no\\<in>set (prx @ sfx).\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           (isLeaf_pt p low high \\<longrightarrow>\n            isLeaf_pt no low high) \\<and>\n           var no = var p;\n        p \\<in> set (prx @ sfx);\n        (\\<exists>pt\\<in>set prx.\n            repNodes_eq pt p low high rep) \\<longrightarrow>\n        repa p =\n        hd (filter (\\<lambda>sn. repNodes_eq sn p low high rep) prx) \\<and>\n        (\\<forall>pt. pt \\<noteq> p \\<longrightarrow> rep pt = repa pt);\n        (\\<forall>pt\\<in>set prx.\n            \\<not> repNodes_eq pt p low high rep) \\<longrightarrow>\n        rep = repa;\n        Null \\<noteq> Null \\<longrightarrow>\n        (\\<forall>pt\\<in>set prx.\n            \\<not> repNodes_eq pt p low high rep)\\<rbrakk>\n       \\<Longrightarrow> repa p =\n                         hd (filter\n                              (\\<lambda>sn. repNodes_eq sn p low high rep)\n                              (prx @ sfx)) \\<and>\n                         (\\<forall>pt.\n                             pt \\<noteq> p \\<longrightarrow>\n                             rep pt = repa pt) \\<and>\n                         var (repa p) = var p\n 2. \\<And>var low high p repa next nodeslist prx sfx.\n       \\<lbrakk>nodeslist \\<noteq> Null; \\<not> isLeaf_pt p low high;\n        \\<forall>no\\<in>set prx \\<union> set (nodeslist # sfx).\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and> var no = var p;\n        p \\<in> set prx \\<or> p \\<in> set (nodeslist # sfx);\n        (\\<exists>pt\\<in>set prx.\n            repNodes_eq pt p low high repa) \\<longrightarrow>\n        repa p =\n        hd (filter (\\<lambda>sn. repNodes_eq sn p low high repa) prx);\n        \\<forall>pt\\<in>set prx. \\<not> repNodes_eq pt p low high repa;\n        \\<not> repNodes_eq nodeslist p low high repa;\n        List (next nodeslist) next sfx\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>no\\<in>set prx \\<union>\n    set (nodeslist # sfx).\n                             no \\<noteq> Null \\<and>\n                             (low no = Null) = (high no = Null) \\<and>\n                             var no = var p) \\<and>\n                         ((\\<exists>pt\\<in>set (prx @ [nodeslist]).\n                              repNodes_eq pt p low high\n                               repa) \\<longrightarrow>\n                          repa p =\n                          hd (filter\n                               (\\<lambda>sn. repNodes_eq sn p low high repa)\n                               (prx @ [nodeslist]))) \\<and>\n                         (next nodeslist \\<noteq> Null \\<longrightarrow>\n                          (\\<forall>pt\\<in>set (prx @ [nodeslist]).\n                              \\<not> repNodes_eq pt p low high repa))\n 3. \\<And>var low high p repa next nodeslist prx sfx.\n       \\<lbrakk>nodeslist \\<noteq> Null; List nodeslist next sfx;\n        \\<not> isLeaf_pt p low high;\n        \\<forall>no\\<in>set prx \\<union> set sfx.\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           (isLeaf_pt p low high \\<longrightarrow>\n            isLeaf_pt no low high) \\<and>\n           var no = var p;\n        p \\<in> set prx \\<or> p \\<in> set sfx;\n        (\\<exists>pt\\<in>set prx.\n            repNodes_eq pt p low high repa) \\<longrightarrow>\n        repa p =\n        hd (filter (\\<lambda>sn. repNodes_eq sn p low high repa) prx);\n        \\<forall>pt\\<in>set prx. \\<not> repNodes_eq pt p low high repa;\n        repNodes_eq nodeslist p low high repa\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>no\\<in>set prx \\<union> set sfx.\n                             no \\<noteq> Null \\<and>\n                             (low no = Null) = (high no = Null) \\<and>\n                             (isLeaf_pt p low high \\<longrightarrow>\n                              isLeaf_pt no low high) \\<and>\n                             var no = var p) \\<and>\n                         (p \\<in> set prx \\<or> p \\<in> set sfx) \\<and>\n                         ((\\<exists>pt\\<in>set prx \\<union> set sfx.\n                              repNodes_eq pt p low high\n                               repa) \\<longrightarrow>\n                          nodeslist =\n                          hd (filter\n                               (\\<lambda>sn. repNodes_eq sn p low high repa)\n                               prx @\n                              filter\n                               (\\<lambda>sn. repNodes_eq sn p low high repa)\n                               sfx)) \\<and>\n                         ((\\<forall>pt\\<in>set prx \\<union> set sfx.\n                              \\<not> repNodes_eq pt p low high\nrepa) \\<longrightarrow>\n                          repa = repa(p := nodeslist))\n 4. \\<And>ns var low high rep next p nodeslist.\n       \\<lbrakk>List nodeslist next ns;\n        \\<forall>no\\<in>set ns.\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           (isLeaf_pt p low high \\<longrightarrow>\n            isLeaf_pt no low high) \\<and>\n           var no = var p;\n        p \\<in> set ns; isLeaf_pt p low high\\<rbrakk>\n       \\<Longrightarrow> nodeslist =\n                         hd (filter\n                              (\\<lambda>sn. repNodes_eq sn p low high rep)\n                              ns) \\<and>\n                         var nodeslist = var p", "assume ns: \"List nodeslist next ns\""], ["proof (state)\nthis:\n  List nodeslist next ns\n\ngoal (4 subgoals):\n 1. \\<And>var low high rep p ns lowa higha repa next pa nodeslist prx sfx.\n       \\<lbrakk>List Null next sfx; \\<not> isLeaf_pt p low high;\n        \\<forall>no\\<in>set (prx @ sfx).\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           (isLeaf_pt p low high \\<longrightarrow>\n            isLeaf_pt no low high) \\<and>\n           var no = var p;\n        p \\<in> set (prx @ sfx);\n        (\\<exists>pt\\<in>set prx.\n            repNodes_eq pt p low high rep) \\<longrightarrow>\n        repa p =\n        hd (filter (\\<lambda>sn. repNodes_eq sn p low high rep) prx) \\<and>\n        (\\<forall>pt. pt \\<noteq> p \\<longrightarrow> rep pt = repa pt);\n        (\\<forall>pt\\<in>set prx.\n            \\<not> repNodes_eq pt p low high rep) \\<longrightarrow>\n        rep = repa;\n        Null \\<noteq> Null \\<longrightarrow>\n        (\\<forall>pt\\<in>set prx.\n            \\<not> repNodes_eq pt p low high rep)\\<rbrakk>\n       \\<Longrightarrow> repa p =\n                         hd (filter\n                              (\\<lambda>sn. repNodes_eq sn p low high rep)\n                              (prx @ sfx)) \\<and>\n                         (\\<forall>pt.\n                             pt \\<noteq> p \\<longrightarrow>\n                             rep pt = repa pt) \\<and>\n                         var (repa p) = var p\n 2. \\<And>var low high p repa next nodeslist prx sfx.\n       \\<lbrakk>nodeslist \\<noteq> Null; \\<not> isLeaf_pt p low high;\n        \\<forall>no\\<in>set prx \\<union> set (nodeslist # sfx).\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and> var no = var p;\n        p \\<in> set prx \\<or> p \\<in> set (nodeslist # sfx);\n        (\\<exists>pt\\<in>set prx.\n            repNodes_eq pt p low high repa) \\<longrightarrow>\n        repa p =\n        hd (filter (\\<lambda>sn. repNodes_eq sn p low high repa) prx);\n        \\<forall>pt\\<in>set prx. \\<not> repNodes_eq pt p low high repa;\n        \\<not> repNodes_eq nodeslist p low high repa;\n        List (next nodeslist) next sfx\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>no\\<in>set prx \\<union>\n    set (nodeslist # sfx).\n                             no \\<noteq> Null \\<and>\n                             (low no = Null) = (high no = Null) \\<and>\n                             var no = var p) \\<and>\n                         ((\\<exists>pt\\<in>set (prx @ [nodeslist]).\n                              repNodes_eq pt p low high\n                               repa) \\<longrightarrow>\n                          repa p =\n                          hd (filter\n                               (\\<lambda>sn. repNodes_eq sn p low high repa)\n                               (prx @ [nodeslist]))) \\<and>\n                         (next nodeslist \\<noteq> Null \\<longrightarrow>\n                          (\\<forall>pt\\<in>set (prx @ [nodeslist]).\n                              \\<not> repNodes_eq pt p low high repa))\n 3. \\<And>var low high p repa next nodeslist prx sfx.\n       \\<lbrakk>nodeslist \\<noteq> Null; List nodeslist next sfx;\n        \\<not> isLeaf_pt p low high;\n        \\<forall>no\\<in>set prx \\<union> set sfx.\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           (isLeaf_pt p low high \\<longrightarrow>\n            isLeaf_pt no low high) \\<and>\n           var no = var p;\n        p \\<in> set prx \\<or> p \\<in> set sfx;\n        (\\<exists>pt\\<in>set prx.\n            repNodes_eq pt p low high repa) \\<longrightarrow>\n        repa p =\n        hd (filter (\\<lambda>sn. repNodes_eq sn p low high repa) prx);\n        \\<forall>pt\\<in>set prx. \\<not> repNodes_eq pt p low high repa;\n        repNodes_eq nodeslist p low high repa\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>no\\<in>set prx \\<union> set sfx.\n                             no \\<noteq> Null \\<and>\n                             (low no = Null) = (high no = Null) \\<and>\n                             (isLeaf_pt p low high \\<longrightarrow>\n                              isLeaf_pt no low high) \\<and>\n                             var no = var p) \\<and>\n                         (p \\<in> set prx \\<or> p \\<in> set sfx) \\<and>\n                         ((\\<exists>pt\\<in>set prx \\<union> set sfx.\n                              repNodes_eq pt p low high\n                               repa) \\<longrightarrow>\n                          nodeslist =\n                          hd (filter\n                               (\\<lambda>sn. repNodes_eq sn p low high repa)\n                               prx @\n                              filter\n                               (\\<lambda>sn. repNodes_eq sn p low high repa)\n                               sfx)) \\<and>\n                         ((\\<forall>pt\\<in>set prx \\<union> set sfx.\n                              \\<not> repNodes_eq pt p low high\nrepa) \\<longrightarrow>\n                          repa = repa(p := nodeslist))\n 4. \\<And>ns var low high rep next p nodeslist.\n       \\<lbrakk>List nodeslist next ns;\n        \\<forall>no\\<in>set ns.\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           (isLeaf_pt p low high \\<longrightarrow>\n            isLeaf_pt no low high) \\<and>\n           var no = var p;\n        p \\<in> set ns; isLeaf_pt p low high\\<rbrakk>\n       \\<Longrightarrow> nodeslist =\n                         hd (filter\n                              (\\<lambda>sn. repNodes_eq sn p low high rep)\n                              ns) \\<and>\n                         var nodeslist = var p", "assume no_prop:  \"\\<forall>no\\<in>set ns.\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           (isLeaf_pt p low high \\<longrightarrow> isLeaf_pt no low high) \\<and> var no = var p\""], ["proof (state)\nthis:\n  \\<forall>no\\<in>set ns.\n     no \\<noteq> Null \\<and>\n     (low no = Null) = (high no = Null) \\<and>\n     (isLeaf_pt p low high \\<longrightarrow> isLeaf_pt no low high) \\<and>\n     var no = var p\n\ngoal (4 subgoals):\n 1. \\<And>var low high rep p ns lowa higha repa next pa nodeslist prx sfx.\n       \\<lbrakk>List Null next sfx; \\<not> isLeaf_pt p low high;\n        \\<forall>no\\<in>set (prx @ sfx).\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           (isLeaf_pt p low high \\<longrightarrow>\n            isLeaf_pt no low high) \\<and>\n           var no = var p;\n        p \\<in> set (prx @ sfx);\n        (\\<exists>pt\\<in>set prx.\n            repNodes_eq pt p low high rep) \\<longrightarrow>\n        repa p =\n        hd (filter (\\<lambda>sn. repNodes_eq sn p low high rep) prx) \\<and>\n        (\\<forall>pt. pt \\<noteq> p \\<longrightarrow> rep pt = repa pt);\n        (\\<forall>pt\\<in>set prx.\n            \\<not> repNodes_eq pt p low high rep) \\<longrightarrow>\n        rep = repa;\n        Null \\<noteq> Null \\<longrightarrow>\n        (\\<forall>pt\\<in>set prx.\n            \\<not> repNodes_eq pt p low high rep)\\<rbrakk>\n       \\<Longrightarrow> repa p =\n                         hd (filter\n                              (\\<lambda>sn. repNodes_eq sn p low high rep)\n                              (prx @ sfx)) \\<and>\n                         (\\<forall>pt.\n                             pt \\<noteq> p \\<longrightarrow>\n                             rep pt = repa pt) \\<and>\n                         var (repa p) = var p\n 2. \\<And>var low high p repa next nodeslist prx sfx.\n       \\<lbrakk>nodeslist \\<noteq> Null; \\<not> isLeaf_pt p low high;\n        \\<forall>no\\<in>set prx \\<union> set (nodeslist # sfx).\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and> var no = var p;\n        p \\<in> set prx \\<or> p \\<in> set (nodeslist # sfx);\n        (\\<exists>pt\\<in>set prx.\n            repNodes_eq pt p low high repa) \\<longrightarrow>\n        repa p =\n        hd (filter (\\<lambda>sn. repNodes_eq sn p low high repa) prx);\n        \\<forall>pt\\<in>set prx. \\<not> repNodes_eq pt p low high repa;\n        \\<not> repNodes_eq nodeslist p low high repa;\n        List (next nodeslist) next sfx\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>no\\<in>set prx \\<union>\n    set (nodeslist # sfx).\n                             no \\<noteq> Null \\<and>\n                             (low no = Null) = (high no = Null) \\<and>\n                             var no = var p) \\<and>\n                         ((\\<exists>pt\\<in>set (prx @ [nodeslist]).\n                              repNodes_eq pt p low high\n                               repa) \\<longrightarrow>\n                          repa p =\n                          hd (filter\n                               (\\<lambda>sn. repNodes_eq sn p low high repa)\n                               (prx @ [nodeslist]))) \\<and>\n                         (next nodeslist \\<noteq> Null \\<longrightarrow>\n                          (\\<forall>pt\\<in>set (prx @ [nodeslist]).\n                              \\<not> repNodes_eq pt p low high repa))\n 3. \\<And>var low high p repa next nodeslist prx sfx.\n       \\<lbrakk>nodeslist \\<noteq> Null; List nodeslist next sfx;\n        \\<not> isLeaf_pt p low high;\n        \\<forall>no\\<in>set prx \\<union> set sfx.\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           (isLeaf_pt p low high \\<longrightarrow>\n            isLeaf_pt no low high) \\<and>\n           var no = var p;\n        p \\<in> set prx \\<or> p \\<in> set sfx;\n        (\\<exists>pt\\<in>set prx.\n            repNodes_eq pt p low high repa) \\<longrightarrow>\n        repa p =\n        hd (filter (\\<lambda>sn. repNodes_eq sn p low high repa) prx);\n        \\<forall>pt\\<in>set prx. \\<not> repNodes_eq pt p low high repa;\n        repNodes_eq nodeslist p low high repa\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>no\\<in>set prx \\<union> set sfx.\n                             no \\<noteq> Null \\<and>\n                             (low no = Null) = (high no = Null) \\<and>\n                             (isLeaf_pt p low high \\<longrightarrow>\n                              isLeaf_pt no low high) \\<and>\n                             var no = var p) \\<and>\n                         (p \\<in> set prx \\<or> p \\<in> set sfx) \\<and>\n                         ((\\<exists>pt\\<in>set prx \\<union> set sfx.\n                              repNodes_eq pt p low high\n                               repa) \\<longrightarrow>\n                          nodeslist =\n                          hd (filter\n                               (\\<lambda>sn. repNodes_eq sn p low high repa)\n                               prx @\n                              filter\n                               (\\<lambda>sn. repNodes_eq sn p low high repa)\n                               sfx)) \\<and>\n                         ((\\<forall>pt\\<in>set prx \\<union> set sfx.\n                              \\<not> repNodes_eq pt p low high\nrepa) \\<longrightarrow>\n                          repa = repa(p := nodeslist))\n 4. \\<And>ns var low high rep next p nodeslist.\n       \\<lbrakk>List nodeslist next ns;\n        \\<forall>no\\<in>set ns.\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           (isLeaf_pt p low high \\<longrightarrow>\n            isLeaf_pt no low high) \\<and>\n           var no = var p;\n        p \\<in> set ns; isLeaf_pt p low high\\<rbrakk>\n       \\<Longrightarrow> nodeslist =\n                         hd (filter\n                              (\\<lambda>sn. repNodes_eq sn p low high rep)\n                              ns) \\<and>\n                         var nodeslist = var p", "assume p_in_ns: \"p \\<in> set ns\""], ["proof (state)\nthis:\n  p \\<in> set ns\n\ngoal (4 subgoals):\n 1. \\<And>var low high rep p ns lowa higha repa next pa nodeslist prx sfx.\n       \\<lbrakk>List Null next sfx; \\<not> isLeaf_pt p low high;\n        \\<forall>no\\<in>set (prx @ sfx).\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           (isLeaf_pt p low high \\<longrightarrow>\n            isLeaf_pt no low high) \\<and>\n           var no = var p;\n        p \\<in> set (prx @ sfx);\n        (\\<exists>pt\\<in>set prx.\n            repNodes_eq pt p low high rep) \\<longrightarrow>\n        repa p =\n        hd (filter (\\<lambda>sn. repNodes_eq sn p low high rep) prx) \\<and>\n        (\\<forall>pt. pt \\<noteq> p \\<longrightarrow> rep pt = repa pt);\n        (\\<forall>pt\\<in>set prx.\n            \\<not> repNodes_eq pt p low high rep) \\<longrightarrow>\n        rep = repa;\n        Null \\<noteq> Null \\<longrightarrow>\n        (\\<forall>pt\\<in>set prx.\n            \\<not> repNodes_eq pt p low high rep)\\<rbrakk>\n       \\<Longrightarrow> repa p =\n                         hd (filter\n                              (\\<lambda>sn. repNodes_eq sn p low high rep)\n                              (prx @ sfx)) \\<and>\n                         (\\<forall>pt.\n                             pt \\<noteq> p \\<longrightarrow>\n                             rep pt = repa pt) \\<and>\n                         var (repa p) = var p\n 2. \\<And>var low high p repa next nodeslist prx sfx.\n       \\<lbrakk>nodeslist \\<noteq> Null; \\<not> isLeaf_pt p low high;\n        \\<forall>no\\<in>set prx \\<union> set (nodeslist # sfx).\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and> var no = var p;\n        p \\<in> set prx \\<or> p \\<in> set (nodeslist # sfx);\n        (\\<exists>pt\\<in>set prx.\n            repNodes_eq pt p low high repa) \\<longrightarrow>\n        repa p =\n        hd (filter (\\<lambda>sn. repNodes_eq sn p low high repa) prx);\n        \\<forall>pt\\<in>set prx. \\<not> repNodes_eq pt p low high repa;\n        \\<not> repNodes_eq nodeslist p low high repa;\n        List (next nodeslist) next sfx\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>no\\<in>set prx \\<union>\n    set (nodeslist # sfx).\n                             no \\<noteq> Null \\<and>\n                             (low no = Null) = (high no = Null) \\<and>\n                             var no = var p) \\<and>\n                         ((\\<exists>pt\\<in>set (prx @ [nodeslist]).\n                              repNodes_eq pt p low high\n                               repa) \\<longrightarrow>\n                          repa p =\n                          hd (filter\n                               (\\<lambda>sn. repNodes_eq sn p low high repa)\n                               (prx @ [nodeslist]))) \\<and>\n                         (next nodeslist \\<noteq> Null \\<longrightarrow>\n                          (\\<forall>pt\\<in>set (prx @ [nodeslist]).\n                              \\<not> repNodes_eq pt p low high repa))\n 3. \\<And>var low high p repa next nodeslist prx sfx.\n       \\<lbrakk>nodeslist \\<noteq> Null; List nodeslist next sfx;\n        \\<not> isLeaf_pt p low high;\n        \\<forall>no\\<in>set prx \\<union> set sfx.\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           (isLeaf_pt p low high \\<longrightarrow>\n            isLeaf_pt no low high) \\<and>\n           var no = var p;\n        p \\<in> set prx \\<or> p \\<in> set sfx;\n        (\\<exists>pt\\<in>set prx.\n            repNodes_eq pt p low high repa) \\<longrightarrow>\n        repa p =\n        hd (filter (\\<lambda>sn. repNodes_eq sn p low high repa) prx);\n        \\<forall>pt\\<in>set prx. \\<not> repNodes_eq pt p low high repa;\n        repNodes_eq nodeslist p low high repa\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>no\\<in>set prx \\<union> set sfx.\n                             no \\<noteq> Null \\<and>\n                             (low no = Null) = (high no = Null) \\<and>\n                             (isLeaf_pt p low high \\<longrightarrow>\n                              isLeaf_pt no low high) \\<and>\n                             var no = var p) \\<and>\n                         (p \\<in> set prx \\<or> p \\<in> set sfx) \\<and>\n                         ((\\<exists>pt\\<in>set prx \\<union> set sfx.\n                              repNodes_eq pt p low high\n                               repa) \\<longrightarrow>\n                          nodeslist =\n                          hd (filter\n                               (\\<lambda>sn. repNodes_eq sn p low high repa)\n                               prx @\n                              filter\n                               (\\<lambda>sn. repNodes_eq sn p low high repa)\n                               sfx)) \\<and>\n                         ((\\<forall>pt\\<in>set prx \\<union> set sfx.\n                              \\<not> repNodes_eq pt p low high\nrepa) \\<longrightarrow>\n                          repa = repa(p := nodeslist))\n 4. \\<And>ns var low high rep next p nodeslist.\n       \\<lbrakk>List nodeslist next ns;\n        \\<forall>no\\<in>set ns.\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           (isLeaf_pt p low high \\<longrightarrow>\n            isLeaf_pt no low high) \\<and>\n           var no = var p;\n        p \\<in> set ns; isLeaf_pt p low high\\<rbrakk>\n       \\<Longrightarrow> nodeslist =\n                         hd (filter\n                              (\\<lambda>sn. repNodes_eq sn p low high rep)\n                              ns) \\<and>\n                         var nodeslist = var p", "assume p_Leaf: \"isLeaf_pt p low high\""], ["proof (state)\nthis:\n  isLeaf_pt p low high\n\ngoal (4 subgoals):\n 1. \\<And>var low high rep p ns lowa higha repa next pa nodeslist prx sfx.\n       \\<lbrakk>List Null next sfx; \\<not> isLeaf_pt p low high;\n        \\<forall>no\\<in>set (prx @ sfx).\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           (isLeaf_pt p low high \\<longrightarrow>\n            isLeaf_pt no low high) \\<and>\n           var no = var p;\n        p \\<in> set (prx @ sfx);\n        (\\<exists>pt\\<in>set prx.\n            repNodes_eq pt p low high rep) \\<longrightarrow>\n        repa p =\n        hd (filter (\\<lambda>sn. repNodes_eq sn p low high rep) prx) \\<and>\n        (\\<forall>pt. pt \\<noteq> p \\<longrightarrow> rep pt = repa pt);\n        (\\<forall>pt\\<in>set prx.\n            \\<not> repNodes_eq pt p low high rep) \\<longrightarrow>\n        rep = repa;\n        Null \\<noteq> Null \\<longrightarrow>\n        (\\<forall>pt\\<in>set prx.\n            \\<not> repNodes_eq pt p low high rep)\\<rbrakk>\n       \\<Longrightarrow> repa p =\n                         hd (filter\n                              (\\<lambda>sn. repNodes_eq sn p low high rep)\n                              (prx @ sfx)) \\<and>\n                         (\\<forall>pt.\n                             pt \\<noteq> p \\<longrightarrow>\n                             rep pt = repa pt) \\<and>\n                         var (repa p) = var p\n 2. \\<And>var low high p repa next nodeslist prx sfx.\n       \\<lbrakk>nodeslist \\<noteq> Null; \\<not> isLeaf_pt p low high;\n        \\<forall>no\\<in>set prx \\<union> set (nodeslist # sfx).\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and> var no = var p;\n        p \\<in> set prx \\<or> p \\<in> set (nodeslist # sfx);\n        (\\<exists>pt\\<in>set prx.\n            repNodes_eq pt p low high repa) \\<longrightarrow>\n        repa p =\n        hd (filter (\\<lambda>sn. repNodes_eq sn p low high repa) prx);\n        \\<forall>pt\\<in>set prx. \\<not> repNodes_eq pt p low high repa;\n        \\<not> repNodes_eq nodeslist p low high repa;\n        List (next nodeslist) next sfx\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>no\\<in>set prx \\<union>\n    set (nodeslist # sfx).\n                             no \\<noteq> Null \\<and>\n                             (low no = Null) = (high no = Null) \\<and>\n                             var no = var p) \\<and>\n                         ((\\<exists>pt\\<in>set (prx @ [nodeslist]).\n                              repNodes_eq pt p low high\n                               repa) \\<longrightarrow>\n                          repa p =\n                          hd (filter\n                               (\\<lambda>sn. repNodes_eq sn p low high repa)\n                               (prx @ [nodeslist]))) \\<and>\n                         (next nodeslist \\<noteq> Null \\<longrightarrow>\n                          (\\<forall>pt\\<in>set (prx @ [nodeslist]).\n                              \\<not> repNodes_eq pt p low high repa))\n 3. \\<And>var low high p repa next nodeslist prx sfx.\n       \\<lbrakk>nodeslist \\<noteq> Null; List nodeslist next sfx;\n        \\<not> isLeaf_pt p low high;\n        \\<forall>no\\<in>set prx \\<union> set sfx.\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           (isLeaf_pt p low high \\<longrightarrow>\n            isLeaf_pt no low high) \\<and>\n           var no = var p;\n        p \\<in> set prx \\<or> p \\<in> set sfx;\n        (\\<exists>pt\\<in>set prx.\n            repNodes_eq pt p low high repa) \\<longrightarrow>\n        repa p =\n        hd (filter (\\<lambda>sn. repNodes_eq sn p low high repa) prx);\n        \\<forall>pt\\<in>set prx. \\<not> repNodes_eq pt p low high repa;\n        repNodes_eq nodeslist p low high repa\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>no\\<in>set prx \\<union> set sfx.\n                             no \\<noteq> Null \\<and>\n                             (low no = Null) = (high no = Null) \\<and>\n                             (isLeaf_pt p low high \\<longrightarrow>\n                              isLeaf_pt no low high) \\<and>\n                             var no = var p) \\<and>\n                         (p \\<in> set prx \\<or> p \\<in> set sfx) \\<and>\n                         ((\\<exists>pt\\<in>set prx \\<union> set sfx.\n                              repNodes_eq pt p low high\n                               repa) \\<longrightarrow>\n                          nodeslist =\n                          hd (filter\n                               (\\<lambda>sn. repNodes_eq sn p low high repa)\n                               prx @\n                              filter\n                               (\\<lambda>sn. repNodes_eq sn p low high repa)\n                               sfx)) \\<and>\n                         ((\\<forall>pt\\<in>set prx \\<union> set sfx.\n                              \\<not> repNodes_eq pt p low high\nrepa) \\<longrightarrow>\n                          repa = repa(p := nodeslist))\n 4. \\<And>ns var low high rep next p nodeslist.\n       \\<lbrakk>List nodeslist next ns;\n        \\<forall>no\\<in>set ns.\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           (isLeaf_pt p low high \\<longrightarrow>\n            isLeaf_pt no low high) \\<and>\n           var no = var p;\n        p \\<in> set ns; isLeaf_pt p low high\\<rbrakk>\n       \\<Longrightarrow> nodeslist =\n                         hd (filter\n                              (\\<lambda>sn. repNodes_eq sn p low high rep)\n                              ns) \\<and>\n                         var nodeslist = var p", "show \"nodeslist = hd [sn\\<leftarrow>ns . repNodes_eq sn p low high rep] \\<and>\n        var nodeslist = var p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. nodeslist =\n    hd (filter (\\<lambda>sn. repNodes_eq sn p low high rep) ns) \\<and>\n    var nodeslist = var p", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. nodeslist =\n    hd (filter (\\<lambda>sn. repNodes_eq sn p low high rep) ns) \\<and>\n    var nodeslist = var p", "from p_in_ns no_prop"], ["proof (chain)\npicking this:\n  p \\<in> set ns\n  \\<forall>no\\<in>set ns.\n     no \\<noteq> Null \\<and>\n     (low no = Null) = (high no = Null) \\<and>\n     (isLeaf_pt p low high \\<longrightarrow> isLeaf_pt no low high) \\<and>\n     var no = var p", "have p_not_Null: \"p\\<noteq>Null\""], ["proof (prove)\nusing this:\n  p \\<in> set ns\n  \\<forall>no\\<in>set ns.\n     no \\<noteq> Null \\<and>\n     (low no = Null) = (high no = Null) \\<and>\n     (isLeaf_pt p low high \\<longrightarrow> isLeaf_pt no low high) \\<and>\n     var no = var p\n\ngoal (1 subgoal):\n 1. p \\<noteq> Null", "using [[simp_depth_limit=2]]"], ["proof (prove)\nusing this:\n  p \\<in> set ns\n  \\<forall>no\\<in>set ns.\n     no \\<noteq> Null \\<and>\n     (low no = Null) = (high no = Null) \\<and>\n     (isLeaf_pt p low high \\<longrightarrow> isLeaf_pt no low high) \\<and>\n     var no = var p\n\ngoal (1 subgoal):\n 1. p \\<noteq> Null", "by auto"], ["proof (state)\nthis:\n  p \\<noteq> Null\n\ngoal (1 subgoal):\n 1. nodeslist =\n    hd (filter (\\<lambda>sn. repNodes_eq sn p low high rep) ns) \\<and>\n    var nodeslist = var p", "from p_in_ns"], ["proof (chain)\npicking this:\n  p \\<in> set ns", "have \"ns \\<noteq> []\""], ["proof (prove)\nusing this:\n  p \\<in> set ns\n\ngoal (1 subgoal):\n 1. ns \\<noteq> []", "by (cases ns) auto"], ["proof (state)\nthis:\n  ns \\<noteq> []\n\ngoal (1 subgoal):\n 1. nodeslist =\n    hd (filter (\\<lambda>sn. repNodes_eq sn p low high rep) ns) \\<and>\n    var nodeslist = var p", "with ns"], ["proof (chain)\npicking this:\n  List nodeslist next ns\n  ns \\<noteq> []", "obtain ns' where ns': \"ns = nodeslist#ns'\""], ["proof (prove)\nusing this:\n  List nodeslist next ns\n  ns \\<noteq> []\n\ngoal (1 subgoal):\n 1. (\\<And>ns'.\n        ns = nodeslist # ns' \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (cases \"nodeslist=Null\") auto"], ["proof (state)\nthis:\n  ns = nodeslist # ns'\n\ngoal (1 subgoal):\n 1. nodeslist =\n    hd (filter (\\<lambda>sn. repNodes_eq sn p low high rep) ns) \\<and>\n    var nodeslist = var p", "with no_prop p_Leaf"], ["proof (chain)\npicking this:\n  \\<forall>no\\<in>set ns.\n     no \\<noteq> Null \\<and>\n     (low no = Null) = (high no = Null) \\<and>\n     (isLeaf_pt p low high \\<longrightarrow> isLeaf_pt no low high) \\<and>\n     var no = var p\n  isLeaf_pt p low high\n  ns = nodeslist # ns'", "obtain \n      \"isLeaf_pt nodeslist low high\" and\n      var_eq: \"var nodeslist = var p\" and\n      \"nodeslist\\<noteq>Null\""], ["proof (prove)\nusing this:\n  \\<forall>no\\<in>set ns.\n     no \\<noteq> Null \\<and>\n     (low no = Null) = (high no = Null) \\<and>\n     (isLeaf_pt p low high \\<longrightarrow> isLeaf_pt no low high) \\<and>\n     var no = var p\n  isLeaf_pt p low high\n  ns = nodeslist # ns'\n\ngoal (1 subgoal):\n 1. (\\<lbrakk>isLeaf_pt nodeslist low high; var nodeslist = var p;\n      nodeslist \\<noteq> Null\\<rbrakk>\n     \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using [[simp_depth_limit=2]]"], ["proof (prove)\nusing this:\n  \\<forall>no\\<in>set ns.\n     no \\<noteq> Null \\<and>\n     (low no = Null) = (high no = Null) \\<and>\n     (isLeaf_pt p low high \\<longrightarrow> isLeaf_pt no low high) \\<and>\n     var no = var p\n  isLeaf_pt p low high\n  ns = nodeslist # ns'\n\ngoal (1 subgoal):\n 1. (\\<lbrakk>isLeaf_pt nodeslist low high; var nodeslist = var p;\n      nodeslist \\<noteq> Null\\<rbrakk>\n     \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  isLeaf_pt nodeslist low high\n  var nodeslist = var p\n  nodeslist \\<noteq> Null\n\ngoal (1 subgoal):\n 1. nodeslist =\n    hd (filter (\\<lambda>sn. repNodes_eq sn p low high rep) ns) \\<and>\n    var nodeslist = var p", "with p_not_Null p_Leaf"], ["proof (chain)\npicking this:\n  p \\<noteq> Null\n  isLeaf_pt p low high\n  isLeaf_pt nodeslist low high\n  var nodeslist = var p\n  nodeslist \\<noteq> Null", "have \"repNodes_eq nodeslist p low high rep\""], ["proof (prove)\nusing this:\n  p \\<noteq> Null\n  isLeaf_pt p low high\n  isLeaf_pt nodeslist low high\n  var nodeslist = var p\n  nodeslist \\<noteq> Null\n\ngoal (1 subgoal):\n 1. repNodes_eq nodeslist p low high rep", "by (simp add: repNodes_eq_def isLeaf_pt_def null_comp_def)"], ["proof (state)\nthis:\n  repNodes_eq nodeslist p low high rep\n\ngoal (1 subgoal):\n 1. nodeslist =\n    hd (filter (\\<lambda>sn. repNodes_eq sn p low high rep) ns) \\<and>\n    var nodeslist = var p", "with ns' var_eq"], ["proof (chain)\npicking this:\n  ns = nodeslist # ns'\n  var nodeslist = var p\n  repNodes_eq nodeslist p low high rep", "show ?thesis"], ["proof (prove)\nusing this:\n  ns = nodeslist # ns'\n  var nodeslist = var p\n  repNodes_eq nodeslist p low high rep\n\ngoal (1 subgoal):\n 1. nodeslist =\n    hd (filter (\\<lambda>sn. repNodes_eq sn p low high rep) ns) \\<and>\n    var nodeslist = var p", "by simp"], ["proof (state)\nthis:\n  nodeslist =\n  hd (filter (\\<lambda>sn. repNodes_eq sn p low high rep) ns) \\<and>\n  var nodeslist = var p\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  nodeslist =\n  hd (filter (\\<lambda>sn. repNodes_eq sn p low high rep) ns) \\<and>\n  var nodeslist = var p\n\ngoal (3 subgoals):\n 1. \\<And>var low high rep p ns lowa higha repa next pa nodeslist prx sfx.\n       \\<lbrakk>List Null next sfx; \\<not> isLeaf_pt p low high;\n        \\<forall>no\\<in>set (prx @ sfx).\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           (isLeaf_pt p low high \\<longrightarrow>\n            isLeaf_pt no low high) \\<and>\n           var no = var p;\n        p \\<in> set (prx @ sfx);\n        (\\<exists>pt\\<in>set prx.\n            repNodes_eq pt p low high rep) \\<longrightarrow>\n        repa p =\n        hd (filter (\\<lambda>sn. repNodes_eq sn p low high rep) prx) \\<and>\n        (\\<forall>pt. pt \\<noteq> p \\<longrightarrow> rep pt = repa pt);\n        (\\<forall>pt\\<in>set prx.\n            \\<not> repNodes_eq pt p low high rep) \\<longrightarrow>\n        rep = repa;\n        Null \\<noteq> Null \\<longrightarrow>\n        (\\<forall>pt\\<in>set prx.\n            \\<not> repNodes_eq pt p low high rep)\\<rbrakk>\n       \\<Longrightarrow> repa p =\n                         hd (filter\n                              (\\<lambda>sn. repNodes_eq sn p low high rep)\n                              (prx @ sfx)) \\<and>\n                         (\\<forall>pt.\n                             pt \\<noteq> p \\<longrightarrow>\n                             rep pt = repa pt) \\<and>\n                         var (repa p) = var p\n 2. \\<And>var low high p repa next nodeslist prx sfx.\n       \\<lbrakk>nodeslist \\<noteq> Null; \\<not> isLeaf_pt p low high;\n        \\<forall>no\\<in>set prx \\<union> set (nodeslist # sfx).\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and> var no = var p;\n        p \\<in> set prx \\<or> p \\<in> set (nodeslist # sfx);\n        (\\<exists>pt\\<in>set prx.\n            repNodes_eq pt p low high repa) \\<longrightarrow>\n        repa p =\n        hd (filter (\\<lambda>sn. repNodes_eq sn p low high repa) prx);\n        \\<forall>pt\\<in>set prx. \\<not> repNodes_eq pt p low high repa;\n        \\<not> repNodes_eq nodeslist p low high repa;\n        List (next nodeslist) next sfx\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>no\\<in>set prx \\<union>\n    set (nodeslist # sfx).\n                             no \\<noteq> Null \\<and>\n                             (low no = Null) = (high no = Null) \\<and>\n                             var no = var p) \\<and>\n                         ((\\<exists>pt\\<in>set (prx @ [nodeslist]).\n                              repNodes_eq pt p low high\n                               repa) \\<longrightarrow>\n                          repa p =\n                          hd (filter\n                               (\\<lambda>sn. repNodes_eq sn p low high repa)\n                               (prx @ [nodeslist]))) \\<and>\n                         (next nodeslist \\<noteq> Null \\<longrightarrow>\n                          (\\<forall>pt\\<in>set (prx @ [nodeslist]).\n                              \\<not> repNodes_eq pt p low high repa))\n 3. \\<And>var low high p repa next nodeslist prx sfx.\n       \\<lbrakk>nodeslist \\<noteq> Null; List nodeslist next sfx;\n        \\<not> isLeaf_pt p low high;\n        \\<forall>no\\<in>set prx \\<union> set sfx.\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           (isLeaf_pt p low high \\<longrightarrow>\n            isLeaf_pt no low high) \\<and>\n           var no = var p;\n        p \\<in> set prx \\<or> p \\<in> set sfx;\n        (\\<exists>pt\\<in>set prx.\n            repNodes_eq pt p low high repa) \\<longrightarrow>\n        repa p =\n        hd (filter (\\<lambda>sn. repNodes_eq sn p low high repa) prx);\n        \\<forall>pt\\<in>set prx. \\<not> repNodes_eq pt p low high repa;\n        repNodes_eq nodeslist p low high repa\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>no\\<in>set prx \\<union> set sfx.\n                             no \\<noteq> Null \\<and>\n                             (low no = Null) = (high no = Null) \\<and>\n                             (isLeaf_pt p low high \\<longrightarrow>\n                              isLeaf_pt no low high) \\<and>\n                             var no = var p) \\<and>\n                         (p \\<in> set prx \\<or> p \\<in> set sfx) \\<and>\n                         ((\\<exists>pt\\<in>set prx \\<union> set sfx.\n                              repNodes_eq pt p low high\n                               repa) \\<longrightarrow>\n                          nodeslist =\n                          hd (filter\n                               (\\<lambda>sn. repNodes_eq sn p low high repa)\n                               prx @\n                              filter\n                               (\\<lambda>sn. repNodes_eq sn p low high repa)\n                               sfx)) \\<and>\n                         ((\\<forall>pt\\<in>set prx \\<union> set sfx.\n                              \\<not> repNodes_eq pt p low high\nrepa) \\<longrightarrow>\n                          repa = repa(p := nodeslist))", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>var low high rep p ns lowa higha repa next pa nodeslist prx sfx.\n       \\<lbrakk>List Null next sfx; \\<not> isLeaf_pt p low high;\n        \\<forall>no\\<in>set (prx @ sfx).\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           (isLeaf_pt p low high \\<longrightarrow>\n            isLeaf_pt no low high) \\<and>\n           var no = var p;\n        p \\<in> set (prx @ sfx);\n        (\\<exists>pt\\<in>set prx.\n            repNodes_eq pt p low high rep) \\<longrightarrow>\n        repa p =\n        hd (filter (\\<lambda>sn. repNodes_eq sn p low high rep) prx) \\<and>\n        (\\<forall>pt. pt \\<noteq> p \\<longrightarrow> rep pt = repa pt);\n        (\\<forall>pt\\<in>set prx.\n            \\<not> repNodes_eq pt p low high rep) \\<longrightarrow>\n        rep = repa;\n        Null \\<noteq> Null \\<longrightarrow>\n        (\\<forall>pt\\<in>set prx.\n            \\<not> repNodes_eq pt p low high rep)\\<rbrakk>\n       \\<Longrightarrow> repa p =\n                         hd (filter\n                              (\\<lambda>sn. repNodes_eq sn p low high rep)\n                              (prx @ sfx)) \\<and>\n                         (\\<forall>pt.\n                             pt \\<noteq> p \\<longrightarrow>\n                             rep pt = repa pt) \\<and>\n                         var (repa p) = var p\n 2. \\<And>var low high p repa next nodeslist prx sfx.\n       \\<lbrakk>nodeslist \\<noteq> Null; \\<not> isLeaf_pt p low high;\n        \\<forall>no\\<in>set prx \\<union> set (nodeslist # sfx).\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and> var no = var p;\n        p \\<in> set prx \\<or> p \\<in> set (nodeslist # sfx);\n        (\\<exists>pt\\<in>set prx.\n            repNodes_eq pt p low high repa) \\<longrightarrow>\n        repa p =\n        hd (filter (\\<lambda>sn. repNodes_eq sn p low high repa) prx);\n        \\<forall>pt\\<in>set prx. \\<not> repNodes_eq pt p low high repa;\n        \\<not> repNodes_eq nodeslist p low high repa;\n        List (next nodeslist) next sfx\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>no\\<in>set prx \\<union>\n    set (nodeslist # sfx).\n                             no \\<noteq> Null \\<and>\n                             (low no = Null) = (high no = Null) \\<and>\n                             var no = var p) \\<and>\n                         ((\\<exists>pt\\<in>set (prx @ [nodeslist]).\n                              repNodes_eq pt p low high\n                               repa) \\<longrightarrow>\n                          repa p =\n                          hd (filter\n                               (\\<lambda>sn. repNodes_eq sn p low high repa)\n                               (prx @ [nodeslist]))) \\<and>\n                         (next nodeslist \\<noteq> Null \\<longrightarrow>\n                          (\\<forall>pt\\<in>set (prx @ [nodeslist]).\n                              \\<not> repNodes_eq pt p low high repa))\n 3. \\<And>var low high p repa next nodeslist prx sfx.\n       \\<lbrakk>nodeslist \\<noteq> Null; List nodeslist next sfx;\n        \\<not> isLeaf_pt p low high;\n        \\<forall>no\\<in>set prx \\<union> set sfx.\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           (isLeaf_pt p low high \\<longrightarrow>\n            isLeaf_pt no low high) \\<and>\n           var no = var p;\n        p \\<in> set prx \\<or> p \\<in> set sfx;\n        (\\<exists>pt\\<in>set prx.\n            repNodes_eq pt p low high repa) \\<longrightarrow>\n        repa p =\n        hd (filter (\\<lambda>sn. repNodes_eq sn p low high repa) prx);\n        \\<forall>pt\\<in>set prx. \\<not> repNodes_eq pt p low high repa;\n        repNodes_eq nodeslist p low high repa\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>no\\<in>set prx \\<union> set sfx.\n                             no \\<noteq> Null \\<and>\n                             (low no = Null) = (high no = Null) \\<and>\n                             (isLeaf_pt p low high \\<longrightarrow>\n                              isLeaf_pt no low high) \\<and>\n                             var no = var p) \\<and>\n                         (p \\<in> set prx \\<or> p \\<in> set sfx) \\<and>\n                         ((\\<exists>pt\\<in>set prx \\<union> set sfx.\n                              repNodes_eq pt p low high\n                               repa) \\<longrightarrow>\n                          nodeslist =\n                          hd (filter\n                               (\\<lambda>sn. repNodes_eq sn p low high repa)\n                               prx @\n                              filter\n                               (\\<lambda>sn. repNodes_eq sn p low high repa)\n                               sfx)) \\<and>\n                         ((\\<forall>pt\\<in>set prx \\<union> set sfx.\n                              \\<not> repNodes_eq pt p low high\nrepa) \\<longrightarrow>\n                          repa = repa(p := nodeslist))", "(* From invariant to postcondition *)"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>var low high rep p ns lowa higha repa next pa nodeslist prx sfx.\n       \\<lbrakk>List Null next sfx; \\<not> isLeaf_pt p low high;\n        \\<forall>no\\<in>set (prx @ sfx).\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           (isLeaf_pt p low high \\<longrightarrow>\n            isLeaf_pt no low high) \\<and>\n           var no = var p;\n        p \\<in> set (prx @ sfx);\n        (\\<exists>pt\\<in>set prx.\n            repNodes_eq pt p low high rep) \\<longrightarrow>\n        repa p =\n        hd (filter (\\<lambda>sn. repNodes_eq sn p low high rep) prx) \\<and>\n        (\\<forall>pt. pt \\<noteq> p \\<longrightarrow> rep pt = repa pt);\n        (\\<forall>pt\\<in>set prx.\n            \\<not> repNodes_eq pt p low high rep) \\<longrightarrow>\n        rep = repa;\n        Null \\<noteq> Null \\<longrightarrow>\n        (\\<forall>pt\\<in>set prx.\n            \\<not> repNodes_eq pt p low high rep)\\<rbrakk>\n       \\<Longrightarrow> repa p =\n                         hd (filter\n                              (\\<lambda>sn. repNodes_eq sn p low high rep)\n                              (prx @ sfx)) \\<and>\n                         (\\<forall>pt.\n                             pt \\<noteq> p \\<longrightarrow>\n                             rep pt = repa pt) \\<and>\n                         var (repa p) = var p\n 2. \\<And>var low high p repa next nodeslist prx sfx.\n       \\<lbrakk>nodeslist \\<noteq> Null; \\<not> isLeaf_pt p low high;\n        \\<forall>no\\<in>set prx \\<union> set (nodeslist # sfx).\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and> var no = var p;\n        p \\<in> set prx \\<or> p \\<in> set (nodeslist # sfx);\n        (\\<exists>pt\\<in>set prx.\n            repNodes_eq pt p low high repa) \\<longrightarrow>\n        repa p =\n        hd (filter (\\<lambda>sn. repNodes_eq sn p low high repa) prx);\n        \\<forall>pt\\<in>set prx. \\<not> repNodes_eq pt p low high repa;\n        \\<not> repNodes_eq nodeslist p low high repa;\n        List (next nodeslist) next sfx\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>no\\<in>set prx \\<union>\n    set (nodeslist # sfx).\n                             no \\<noteq> Null \\<and>\n                             (low no = Null) = (high no = Null) \\<and>\n                             var no = var p) \\<and>\n                         ((\\<exists>pt\\<in>set (prx @ [nodeslist]).\n                              repNodes_eq pt p low high\n                               repa) \\<longrightarrow>\n                          repa p =\n                          hd (filter\n                               (\\<lambda>sn. repNodes_eq sn p low high repa)\n                               (prx @ [nodeslist]))) \\<and>\n                         (next nodeslist \\<noteq> Null \\<longrightarrow>\n                          (\\<forall>pt\\<in>set (prx @ [nodeslist]).\n                              \\<not> repNodes_eq pt p low high repa))\n 3. \\<And>var low high p repa next nodeslist prx sfx.\n       \\<lbrakk>nodeslist \\<noteq> Null; List nodeslist next sfx;\n        \\<not> isLeaf_pt p low high;\n        \\<forall>no\\<in>set prx \\<union> set sfx.\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           (isLeaf_pt p low high \\<longrightarrow>\n            isLeaf_pt no low high) \\<and>\n           var no = var p;\n        p \\<in> set prx \\<or> p \\<in> set sfx;\n        (\\<exists>pt\\<in>set prx.\n            repNodes_eq pt p low high repa) \\<longrightarrow>\n        repa p =\n        hd (filter (\\<lambda>sn. repNodes_eq sn p low high repa) prx);\n        \\<forall>pt\\<in>set prx. \\<not> repNodes_eq pt p low high repa;\n        repNodes_eq nodeslist p low high repa\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>no\\<in>set prx \\<union> set sfx.\n                             no \\<noteq> Null \\<and>\n                             (low no = Null) = (high no = Null) \\<and>\n                             (isLeaf_pt p low high \\<longrightarrow>\n                              isLeaf_pt no low high) \\<and>\n                             var no = var p) \\<and>\n                         (p \\<in> set prx \\<or> p \\<in> set sfx) \\<and>\n                         ((\\<exists>pt\\<in>set prx \\<union> set sfx.\n                              repNodes_eq pt p low high\n                               repa) \\<longrightarrow>\n                          nodeslist =\n                          hd (filter\n                               (\\<lambda>sn. repNodes_eq sn p low high repa)\n                               prx @\n                              filter\n                               (\\<lambda>sn. repNodes_eq sn p low high repa)\n                               sfx)) \\<and>\n                         ((\\<forall>pt\\<in>set prx \\<union> set sfx.\n                              \\<not> repNodes_eq pt p low high\nrepa) \\<longrightarrow>\n                          repa = repa(p := nodeslist))", "fix var::\"ref\\<Rightarrow>nat\" and low high rep repa p prx sfx \"next\""], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>var low high rep p ns lowa higha repa next pa nodeslist prx sfx.\n       \\<lbrakk>List Null next sfx; \\<not> isLeaf_pt p low high;\n        \\<forall>no\\<in>set (prx @ sfx).\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           (isLeaf_pt p low high \\<longrightarrow>\n            isLeaf_pt no low high) \\<and>\n           var no = var p;\n        p \\<in> set (prx @ sfx);\n        (\\<exists>pt\\<in>set prx.\n            repNodes_eq pt p low high rep) \\<longrightarrow>\n        repa p =\n        hd (filter (\\<lambda>sn. repNodes_eq sn p low high rep) prx) \\<and>\n        (\\<forall>pt. pt \\<noteq> p \\<longrightarrow> rep pt = repa pt);\n        (\\<forall>pt\\<in>set prx.\n            \\<not> repNodes_eq pt p low high rep) \\<longrightarrow>\n        rep = repa;\n        Null \\<noteq> Null \\<longrightarrow>\n        (\\<forall>pt\\<in>set prx.\n            \\<not> repNodes_eq pt p low high rep)\\<rbrakk>\n       \\<Longrightarrow> repa p =\n                         hd (filter\n                              (\\<lambda>sn. repNodes_eq sn p low high rep)\n                              (prx @ sfx)) \\<and>\n                         (\\<forall>pt.\n                             pt \\<noteq> p \\<longrightarrow>\n                             rep pt = repa pt) \\<and>\n                         var (repa p) = var p\n 2. \\<And>var low high p repa next nodeslist prx sfx.\n       \\<lbrakk>nodeslist \\<noteq> Null; \\<not> isLeaf_pt p low high;\n        \\<forall>no\\<in>set prx \\<union> set (nodeslist # sfx).\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and> var no = var p;\n        p \\<in> set prx \\<or> p \\<in> set (nodeslist # sfx);\n        (\\<exists>pt\\<in>set prx.\n            repNodes_eq pt p low high repa) \\<longrightarrow>\n        repa p =\n        hd (filter (\\<lambda>sn. repNodes_eq sn p low high repa) prx);\n        \\<forall>pt\\<in>set prx. \\<not> repNodes_eq pt p low high repa;\n        \\<not> repNodes_eq nodeslist p low high repa;\n        List (next nodeslist) next sfx\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>no\\<in>set prx \\<union>\n    set (nodeslist # sfx).\n                             no \\<noteq> Null \\<and>\n                             (low no = Null) = (high no = Null) \\<and>\n                             var no = var p) \\<and>\n                         ((\\<exists>pt\\<in>set (prx @ [nodeslist]).\n                              repNodes_eq pt p low high\n                               repa) \\<longrightarrow>\n                          repa p =\n                          hd (filter\n                               (\\<lambda>sn. repNodes_eq sn p low high repa)\n                               (prx @ [nodeslist]))) \\<and>\n                         (next nodeslist \\<noteq> Null \\<longrightarrow>\n                          (\\<forall>pt\\<in>set (prx @ [nodeslist]).\n                              \\<not> repNodes_eq pt p low high repa))\n 3. \\<And>var low high p repa next nodeslist prx sfx.\n       \\<lbrakk>nodeslist \\<noteq> Null; List nodeslist next sfx;\n        \\<not> isLeaf_pt p low high;\n        \\<forall>no\\<in>set prx \\<union> set sfx.\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           (isLeaf_pt p low high \\<longrightarrow>\n            isLeaf_pt no low high) \\<and>\n           var no = var p;\n        p \\<in> set prx \\<or> p \\<in> set sfx;\n        (\\<exists>pt\\<in>set prx.\n            repNodes_eq pt p low high repa) \\<longrightarrow>\n        repa p =\n        hd (filter (\\<lambda>sn. repNodes_eq sn p low high repa) prx);\n        \\<forall>pt\\<in>set prx. \\<not> repNodes_eq pt p low high repa;\n        repNodes_eq nodeslist p low high repa\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>no\\<in>set prx \\<union> set sfx.\n                             no \\<noteq> Null \\<and>\n                             (low no = Null) = (high no = Null) \\<and>\n                             (isLeaf_pt p low high \\<longrightarrow>\n                              isLeaf_pt no low high) \\<and>\n                             var no = var p) \\<and>\n                         (p \\<in> set prx \\<or> p \\<in> set sfx) \\<and>\n                         ((\\<exists>pt\\<in>set prx \\<union> set sfx.\n                              repNodes_eq pt p low high\n                               repa) \\<longrightarrow>\n                          nodeslist =\n                          hd (filter\n                               (\\<lambda>sn. repNodes_eq sn p low high repa)\n                               prx @\n                              filter\n                               (\\<lambda>sn. repNodes_eq sn p low high repa)\n                               sfx)) \\<and>\n                         ((\\<forall>pt\\<in>set prx \\<union> set sfx.\n                              \\<not> repNodes_eq pt p low high\nrepa) \\<longrightarrow>\n                          repa = repa(p := nodeslist))", "assume sfx: \"List Null next sfx\""], ["proof (state)\nthis:\n  List Null next sfx\n\ngoal (3 subgoals):\n 1. \\<And>var low high rep p ns lowa higha repa next pa nodeslist prx sfx.\n       \\<lbrakk>List Null next sfx; \\<not> isLeaf_pt p low high;\n        \\<forall>no\\<in>set (prx @ sfx).\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           (isLeaf_pt p low high \\<longrightarrow>\n            isLeaf_pt no low high) \\<and>\n           var no = var p;\n        p \\<in> set (prx @ sfx);\n        (\\<exists>pt\\<in>set prx.\n            repNodes_eq pt p low high rep) \\<longrightarrow>\n        repa p =\n        hd (filter (\\<lambda>sn. repNodes_eq sn p low high rep) prx) \\<and>\n        (\\<forall>pt. pt \\<noteq> p \\<longrightarrow> rep pt = repa pt);\n        (\\<forall>pt\\<in>set prx.\n            \\<not> repNodes_eq pt p low high rep) \\<longrightarrow>\n        rep = repa;\n        Null \\<noteq> Null \\<longrightarrow>\n        (\\<forall>pt\\<in>set prx.\n            \\<not> repNodes_eq pt p low high rep)\\<rbrakk>\n       \\<Longrightarrow> repa p =\n                         hd (filter\n                              (\\<lambda>sn. repNodes_eq sn p low high rep)\n                              (prx @ sfx)) \\<and>\n                         (\\<forall>pt.\n                             pt \\<noteq> p \\<longrightarrow>\n                             rep pt = repa pt) \\<and>\n                         var (repa p) = var p\n 2. \\<And>var low high p repa next nodeslist prx sfx.\n       \\<lbrakk>nodeslist \\<noteq> Null; \\<not> isLeaf_pt p low high;\n        \\<forall>no\\<in>set prx \\<union> set (nodeslist # sfx).\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and> var no = var p;\n        p \\<in> set prx \\<or> p \\<in> set (nodeslist # sfx);\n        (\\<exists>pt\\<in>set prx.\n            repNodes_eq pt p low high repa) \\<longrightarrow>\n        repa p =\n        hd (filter (\\<lambda>sn. repNodes_eq sn p low high repa) prx);\n        \\<forall>pt\\<in>set prx. \\<not> repNodes_eq pt p low high repa;\n        \\<not> repNodes_eq nodeslist p low high repa;\n        List (next nodeslist) next sfx\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>no\\<in>set prx \\<union>\n    set (nodeslist # sfx).\n                             no \\<noteq> Null \\<and>\n                             (low no = Null) = (high no = Null) \\<and>\n                             var no = var p) \\<and>\n                         ((\\<exists>pt\\<in>set (prx @ [nodeslist]).\n                              repNodes_eq pt p low high\n                               repa) \\<longrightarrow>\n                          repa p =\n                          hd (filter\n                               (\\<lambda>sn. repNodes_eq sn p low high repa)\n                               (prx @ [nodeslist]))) \\<and>\n                         (next nodeslist \\<noteq> Null \\<longrightarrow>\n                          (\\<forall>pt\\<in>set (prx @ [nodeslist]).\n                              \\<not> repNodes_eq pt p low high repa))\n 3. \\<And>var low high p repa next nodeslist prx sfx.\n       \\<lbrakk>nodeslist \\<noteq> Null; List nodeslist next sfx;\n        \\<not> isLeaf_pt p low high;\n        \\<forall>no\\<in>set prx \\<union> set sfx.\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           (isLeaf_pt p low high \\<longrightarrow>\n            isLeaf_pt no low high) \\<and>\n           var no = var p;\n        p \\<in> set prx \\<or> p \\<in> set sfx;\n        (\\<exists>pt\\<in>set prx.\n            repNodes_eq pt p low high repa) \\<longrightarrow>\n        repa p =\n        hd (filter (\\<lambda>sn. repNodes_eq sn p low high repa) prx);\n        \\<forall>pt\\<in>set prx. \\<not> repNodes_eq pt p low high repa;\n        repNodes_eq nodeslist p low high repa\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>no\\<in>set prx \\<union> set sfx.\n                             no \\<noteq> Null \\<and>\n                             (low no = Null) = (high no = Null) \\<and>\n                             (isLeaf_pt p low high \\<longrightarrow>\n                              isLeaf_pt no low high) \\<and>\n                             var no = var p) \\<and>\n                         (p \\<in> set prx \\<or> p \\<in> set sfx) \\<and>\n                         ((\\<exists>pt\\<in>set prx \\<union> set sfx.\n                              repNodes_eq pt p low high\n                               repa) \\<longrightarrow>\n                          nodeslist =\n                          hd (filter\n                               (\\<lambda>sn. repNodes_eq sn p low high repa)\n                               prx @\n                              filter\n                               (\\<lambda>sn. repNodes_eq sn p low high repa)\n                               sfx)) \\<and>\n                         ((\\<forall>pt\\<in>set prx \\<union> set sfx.\n                              \\<not> repNodes_eq pt p low high\nrepa) \\<longrightarrow>\n                          repa = repa(p := nodeslist))", "assume p_in_ns: \"p \\<in> set (prx @ sfx)\""], ["proof (state)\nthis:\n  p \\<in> set (prx @ sfx)\n\ngoal (3 subgoals):\n 1. \\<And>var low high rep p ns lowa higha repa next pa nodeslist prx sfx.\n       \\<lbrakk>List Null next sfx; \\<not> isLeaf_pt p low high;\n        \\<forall>no\\<in>set (prx @ sfx).\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           (isLeaf_pt p low high \\<longrightarrow>\n            isLeaf_pt no low high) \\<and>\n           var no = var p;\n        p \\<in> set (prx @ sfx);\n        (\\<exists>pt\\<in>set prx.\n            repNodes_eq pt p low high rep) \\<longrightarrow>\n        repa p =\n        hd (filter (\\<lambda>sn. repNodes_eq sn p low high rep) prx) \\<and>\n        (\\<forall>pt. pt \\<noteq> p \\<longrightarrow> rep pt = repa pt);\n        (\\<forall>pt\\<in>set prx.\n            \\<not> repNodes_eq pt p low high rep) \\<longrightarrow>\n        rep = repa;\n        Null \\<noteq> Null \\<longrightarrow>\n        (\\<forall>pt\\<in>set prx.\n            \\<not> repNodes_eq pt p low high rep)\\<rbrakk>\n       \\<Longrightarrow> repa p =\n                         hd (filter\n                              (\\<lambda>sn. repNodes_eq sn p low high rep)\n                              (prx @ sfx)) \\<and>\n                         (\\<forall>pt.\n                             pt \\<noteq> p \\<longrightarrow>\n                             rep pt = repa pt) \\<and>\n                         var (repa p) = var p\n 2. \\<And>var low high p repa next nodeslist prx sfx.\n       \\<lbrakk>nodeslist \\<noteq> Null; \\<not> isLeaf_pt p low high;\n        \\<forall>no\\<in>set prx \\<union> set (nodeslist # sfx).\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and> var no = var p;\n        p \\<in> set prx \\<or> p \\<in> set (nodeslist # sfx);\n        (\\<exists>pt\\<in>set prx.\n            repNodes_eq pt p low high repa) \\<longrightarrow>\n        repa p =\n        hd (filter (\\<lambda>sn. repNodes_eq sn p low high repa) prx);\n        \\<forall>pt\\<in>set prx. \\<not> repNodes_eq pt p low high repa;\n        \\<not> repNodes_eq nodeslist p low high repa;\n        List (next nodeslist) next sfx\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>no\\<in>set prx \\<union>\n    set (nodeslist # sfx).\n                             no \\<noteq> Null \\<and>\n                             (low no = Null) = (high no = Null) \\<and>\n                             var no = var p) \\<and>\n                         ((\\<exists>pt\\<in>set (prx @ [nodeslist]).\n                              repNodes_eq pt p low high\n                               repa) \\<longrightarrow>\n                          repa p =\n                          hd (filter\n                               (\\<lambda>sn. repNodes_eq sn p low high repa)\n                               (prx @ [nodeslist]))) \\<and>\n                         (next nodeslist \\<noteq> Null \\<longrightarrow>\n                          (\\<forall>pt\\<in>set (prx @ [nodeslist]).\n                              \\<not> repNodes_eq pt p low high repa))\n 3. \\<And>var low high p repa next nodeslist prx sfx.\n       \\<lbrakk>nodeslist \\<noteq> Null; List nodeslist next sfx;\n        \\<not> isLeaf_pt p low high;\n        \\<forall>no\\<in>set prx \\<union> set sfx.\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           (isLeaf_pt p low high \\<longrightarrow>\n            isLeaf_pt no low high) \\<and>\n           var no = var p;\n        p \\<in> set prx \\<or> p \\<in> set sfx;\n        (\\<exists>pt\\<in>set prx.\n            repNodes_eq pt p low high repa) \\<longrightarrow>\n        repa p =\n        hd (filter (\\<lambda>sn. repNodes_eq sn p low high repa) prx);\n        \\<forall>pt\\<in>set prx. \\<not> repNodes_eq pt p low high repa;\n        repNodes_eq nodeslist p low high repa\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>no\\<in>set prx \\<union> set sfx.\n                             no \\<noteq> Null \\<and>\n                             (low no = Null) = (high no = Null) \\<and>\n                             (isLeaf_pt p low high \\<longrightarrow>\n                              isLeaf_pt no low high) \\<and>\n                             var no = var p) \\<and>\n                         (p \\<in> set prx \\<or> p \\<in> set sfx) \\<and>\n                         ((\\<exists>pt\\<in>set prx \\<union> set sfx.\n                              repNodes_eq pt p low high\n                               repa) \\<longrightarrow>\n                          nodeslist =\n                          hd (filter\n                               (\\<lambda>sn. repNodes_eq sn p low high repa)\n                               prx @\n                              filter\n                               (\\<lambda>sn. repNodes_eq sn p low high repa)\n                               sfx)) \\<and>\n                         ((\\<forall>pt\\<in>set prx \\<union> set sfx.\n                              \\<not> repNodes_eq pt p low high\nrepa) \\<longrightarrow>\n                          repa = repa(p := nodeslist))", "assume no_props: \"\\<forall>no\\<in>set (prx @ sfx).\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           (isLeaf_pt p low high \\<longrightarrow> isLeaf_pt no low high) \\<and> var no = var p\""], ["proof (state)\nthis:\n  \\<forall>no\\<in>set (prx @ sfx).\n     no \\<noteq> Null \\<and>\n     (low no = Null) = (high no = Null) \\<and>\n     (isLeaf_pt p low high \\<longrightarrow> isLeaf_pt no low high) \\<and>\n     var no = var p\n\ngoal (3 subgoals):\n 1. \\<And>var low high rep p ns lowa higha repa next pa nodeslist prx sfx.\n       \\<lbrakk>List Null next sfx; \\<not> isLeaf_pt p low high;\n        \\<forall>no\\<in>set (prx @ sfx).\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           (isLeaf_pt p low high \\<longrightarrow>\n            isLeaf_pt no low high) \\<and>\n           var no = var p;\n        p \\<in> set (prx @ sfx);\n        (\\<exists>pt\\<in>set prx.\n            repNodes_eq pt p low high rep) \\<longrightarrow>\n        repa p =\n        hd (filter (\\<lambda>sn. repNodes_eq sn p low high rep) prx) \\<and>\n        (\\<forall>pt. pt \\<noteq> p \\<longrightarrow> rep pt = repa pt);\n        (\\<forall>pt\\<in>set prx.\n            \\<not> repNodes_eq pt p low high rep) \\<longrightarrow>\n        rep = repa;\n        Null \\<noteq> Null \\<longrightarrow>\n        (\\<forall>pt\\<in>set prx.\n            \\<not> repNodes_eq pt p low high rep)\\<rbrakk>\n       \\<Longrightarrow> repa p =\n                         hd (filter\n                              (\\<lambda>sn. repNodes_eq sn p low high rep)\n                              (prx @ sfx)) \\<and>\n                         (\\<forall>pt.\n                             pt \\<noteq> p \\<longrightarrow>\n                             rep pt = repa pt) \\<and>\n                         var (repa p) = var p\n 2. \\<And>var low high p repa next nodeslist prx sfx.\n       \\<lbrakk>nodeslist \\<noteq> Null; \\<not> isLeaf_pt p low high;\n        \\<forall>no\\<in>set prx \\<union> set (nodeslist # sfx).\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and> var no = var p;\n        p \\<in> set prx \\<or> p \\<in> set (nodeslist # sfx);\n        (\\<exists>pt\\<in>set prx.\n            repNodes_eq pt p low high repa) \\<longrightarrow>\n        repa p =\n        hd (filter (\\<lambda>sn. repNodes_eq sn p low high repa) prx);\n        \\<forall>pt\\<in>set prx. \\<not> repNodes_eq pt p low high repa;\n        \\<not> repNodes_eq nodeslist p low high repa;\n        List (next nodeslist) next sfx\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>no\\<in>set prx \\<union>\n    set (nodeslist # sfx).\n                             no \\<noteq> Null \\<and>\n                             (low no = Null) = (high no = Null) \\<and>\n                             var no = var p) \\<and>\n                         ((\\<exists>pt\\<in>set (prx @ [nodeslist]).\n                              repNodes_eq pt p low high\n                               repa) \\<longrightarrow>\n                          repa p =\n                          hd (filter\n                               (\\<lambda>sn. repNodes_eq sn p low high repa)\n                               (prx @ [nodeslist]))) \\<and>\n                         (next nodeslist \\<noteq> Null \\<longrightarrow>\n                          (\\<forall>pt\\<in>set (prx @ [nodeslist]).\n                              \\<not> repNodes_eq pt p low high repa))\n 3. \\<And>var low high p repa next nodeslist prx sfx.\n       \\<lbrakk>nodeslist \\<noteq> Null; List nodeslist next sfx;\n        \\<not> isLeaf_pt p low high;\n        \\<forall>no\\<in>set prx \\<union> set sfx.\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           (isLeaf_pt p low high \\<longrightarrow>\n            isLeaf_pt no low high) \\<and>\n           var no = var p;\n        p \\<in> set prx \\<or> p \\<in> set sfx;\n        (\\<exists>pt\\<in>set prx.\n            repNodes_eq pt p low high repa) \\<longrightarrow>\n        repa p =\n        hd (filter (\\<lambda>sn. repNodes_eq sn p low high repa) prx);\n        \\<forall>pt\\<in>set prx. \\<not> repNodes_eq pt p low high repa;\n        repNodes_eq nodeslist p low high repa\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>no\\<in>set prx \\<union> set sfx.\n                             no \\<noteq> Null \\<and>\n                             (low no = Null) = (high no = Null) \\<and>\n                             (isLeaf_pt p low high \\<longrightarrow>\n                              isLeaf_pt no low high) \\<and>\n                             var no = var p) \\<and>\n                         (p \\<in> set prx \\<or> p \\<in> set sfx) \\<and>\n                         ((\\<exists>pt\\<in>set prx \\<union> set sfx.\n                              repNodes_eq pt p low high\n                               repa) \\<longrightarrow>\n                          nodeslist =\n                          hd (filter\n                               (\\<lambda>sn. repNodes_eq sn p low high repa)\n                               prx @\n                              filter\n                               (\\<lambda>sn. repNodes_eq sn p low high repa)\n                               sfx)) \\<and>\n                         ((\\<forall>pt\\<in>set prx \\<union> set sfx.\n                              \\<not> repNodes_eq pt p low high\nrepa) \\<longrightarrow>\n                          repa = repa(p := nodeslist))", "assume match_prx: \"(\\<exists>pt\\<in>set prx. repNodes_eq pt p low high rep) \\<longrightarrow>\n                       repa p = hd [sn\\<leftarrow>prx . repNodes_eq sn p low high rep] \\<and>\n                      (\\<forall>pt. pt \\<noteq> p \\<longrightarrow> rep pt = repa pt)\""], ["proof (state)\nthis:\n  (\\<exists>pt\\<in>set prx. repNodes_eq pt p low high rep) \\<longrightarrow>\n  repa p =\n  hd (filter (\\<lambda>sn. repNodes_eq sn p low high rep) prx) \\<and>\n  (\\<forall>pt. pt \\<noteq> p \\<longrightarrow> rep pt = repa pt)\n\ngoal (3 subgoals):\n 1. \\<And>var low high rep p ns lowa higha repa next pa nodeslist prx sfx.\n       \\<lbrakk>List Null next sfx; \\<not> isLeaf_pt p low high;\n        \\<forall>no\\<in>set (prx @ sfx).\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           (isLeaf_pt p low high \\<longrightarrow>\n            isLeaf_pt no low high) \\<and>\n           var no = var p;\n        p \\<in> set (prx @ sfx);\n        (\\<exists>pt\\<in>set prx.\n            repNodes_eq pt p low high rep) \\<longrightarrow>\n        repa p =\n        hd (filter (\\<lambda>sn. repNodes_eq sn p low high rep) prx) \\<and>\n        (\\<forall>pt. pt \\<noteq> p \\<longrightarrow> rep pt = repa pt);\n        (\\<forall>pt\\<in>set prx.\n            \\<not> repNodes_eq pt p low high rep) \\<longrightarrow>\n        rep = repa;\n        Null \\<noteq> Null \\<longrightarrow>\n        (\\<forall>pt\\<in>set prx.\n            \\<not> repNodes_eq pt p low high rep)\\<rbrakk>\n       \\<Longrightarrow> repa p =\n                         hd (filter\n                              (\\<lambda>sn. repNodes_eq sn p low high rep)\n                              (prx @ sfx)) \\<and>\n                         (\\<forall>pt.\n                             pt \\<noteq> p \\<longrightarrow>\n                             rep pt = repa pt) \\<and>\n                         var (repa p) = var p\n 2. \\<And>var low high p repa next nodeslist prx sfx.\n       \\<lbrakk>nodeslist \\<noteq> Null; \\<not> isLeaf_pt p low high;\n        \\<forall>no\\<in>set prx \\<union> set (nodeslist # sfx).\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and> var no = var p;\n        p \\<in> set prx \\<or> p \\<in> set (nodeslist # sfx);\n        (\\<exists>pt\\<in>set prx.\n            repNodes_eq pt p low high repa) \\<longrightarrow>\n        repa p =\n        hd (filter (\\<lambda>sn. repNodes_eq sn p low high repa) prx);\n        \\<forall>pt\\<in>set prx. \\<not> repNodes_eq pt p low high repa;\n        \\<not> repNodes_eq nodeslist p low high repa;\n        List (next nodeslist) next sfx\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>no\\<in>set prx \\<union>\n    set (nodeslist # sfx).\n                             no \\<noteq> Null \\<and>\n                             (low no = Null) = (high no = Null) \\<and>\n                             var no = var p) \\<and>\n                         ((\\<exists>pt\\<in>set (prx @ [nodeslist]).\n                              repNodes_eq pt p low high\n                               repa) \\<longrightarrow>\n                          repa p =\n                          hd (filter\n                               (\\<lambda>sn. repNodes_eq sn p low high repa)\n                               (prx @ [nodeslist]))) \\<and>\n                         (next nodeslist \\<noteq> Null \\<longrightarrow>\n                          (\\<forall>pt\\<in>set (prx @ [nodeslist]).\n                              \\<not> repNodes_eq pt p low high repa))\n 3. \\<And>var low high p repa next nodeslist prx sfx.\n       \\<lbrakk>nodeslist \\<noteq> Null; List nodeslist next sfx;\n        \\<not> isLeaf_pt p low high;\n        \\<forall>no\\<in>set prx \\<union> set sfx.\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           (isLeaf_pt p low high \\<longrightarrow>\n            isLeaf_pt no low high) \\<and>\n           var no = var p;\n        p \\<in> set prx \\<or> p \\<in> set sfx;\n        (\\<exists>pt\\<in>set prx.\n            repNodes_eq pt p low high repa) \\<longrightarrow>\n        repa p =\n        hd (filter (\\<lambda>sn. repNodes_eq sn p low high repa) prx);\n        \\<forall>pt\\<in>set prx. \\<not> repNodes_eq pt p low high repa;\n        repNodes_eq nodeslist p low high repa\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>no\\<in>set prx \\<union> set sfx.\n                             no \\<noteq> Null \\<and>\n                             (low no = Null) = (high no = Null) \\<and>\n                             (isLeaf_pt p low high \\<longrightarrow>\n                              isLeaf_pt no low high) \\<and>\n                             var no = var p) \\<and>\n                         (p \\<in> set prx \\<or> p \\<in> set sfx) \\<and>\n                         ((\\<exists>pt\\<in>set prx \\<union> set sfx.\n                              repNodes_eq pt p low high\n                               repa) \\<longrightarrow>\n                          nodeslist =\n                          hd (filter\n                               (\\<lambda>sn. repNodes_eq sn p low high repa)\n                               prx @\n                              filter\n                               (\\<lambda>sn. repNodes_eq sn p low high repa)\n                               sfx)) \\<and>\n                         ((\\<forall>pt\\<in>set prx \\<union> set sfx.\n                              \\<not> repNodes_eq pt p low high\nrepa) \\<longrightarrow>\n                          repa = repa(p := nodeslist))", "show \"repa p = hd [sn\\<leftarrow>prx @ sfx . repNodes_eq sn p low high rep] \\<and>\n          (\\<forall>pt. pt \\<noteq> p \\<longrightarrow> rep pt = repa pt) \\<and> var (repa p) = var p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. repa p =\n    hd (filter (\\<lambda>sn. repNodes_eq sn p low high rep)\n         (prx @ sfx)) \\<and>\n    (\\<forall>pt. pt \\<noteq> p \\<longrightarrow> rep pt = repa pt) \\<and>\n    var (repa p) = var p", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. repa p =\n    hd (filter (\\<lambda>sn. repNodes_eq sn p low high rep)\n         (prx @ sfx)) \\<and>\n    (\\<forall>pt. pt \\<noteq> p \\<longrightarrow> rep pt = repa pt) \\<and>\n    var (repa p) = var p", "from sfx"], ["proof (chain)\npicking this:\n  List Null next sfx", "have sfx_Nil: \"sfx=[]\""], ["proof (prove)\nusing this:\n  List Null next sfx\n\ngoal (1 subgoal):\n 1. sfx = []", "by simp"], ["proof (state)\nthis:\n  sfx = []\n\ngoal (1 subgoal):\n 1. repa p =\n    hd (filter (\\<lambda>sn. repNodes_eq sn p low high rep)\n         (prx @ sfx)) \\<and>\n    (\\<forall>pt. pt \\<noteq> p \\<longrightarrow> rep pt = repa pt) \\<and>\n    var (repa p) = var p", "with p_in_ns"], ["proof (chain)\npicking this:\n  p \\<in> set (prx @ sfx)\n  sfx = []", "have ex_match: \"(\\<exists>pt\\<in>set prx. repNodes_eq pt p low high rep)\""], ["proof (prove)\nusing this:\n  p \\<in> set (prx @ sfx)\n  sfx = []\n\ngoal (1 subgoal):\n 1. \\<exists>pt\\<in>set prx. repNodes_eq pt p low high rep", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>p \\<in> set (prx @ sfx); sfx = []\\<rbrakk>\n    \\<Longrightarrow> \\<exists>pt\\<in>set prx. repNodes_eq pt p low high rep", "apply (rule_tac x=p in bexI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>p \\<in> set (prx @ sfx); sfx = []\\<rbrakk>\n    \\<Longrightarrow> repNodes_eq p p low high rep\n 2. \\<lbrakk>p \\<in> set (prx @ sfx); sfx = []\\<rbrakk>\n    \\<Longrightarrow> p \\<in> set prx", "apply  (simp add: repNodes_eq_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>p \\<in> set (prx @ sfx); sfx = []\\<rbrakk>\n    \\<Longrightarrow> p \\<in> set prx", "apply simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  \\<exists>pt\\<in>set prx. repNodes_eq pt p low high rep\n\ngoal (1 subgoal):\n 1. repa p =\n    hd (filter (\\<lambda>sn. repNodes_eq sn p low high rep)\n         (prx @ sfx)) \\<and>\n    (\\<forall>pt. pt \\<noteq> p \\<longrightarrow> rep pt = repa pt) \\<and>\n    var (repa p) = var p", "hence not_empty: \"[sn\\<leftarrow>prx . repNodes_eq sn p low high rep] \\<noteq> []\""], ["proof (prove)\nusing this:\n  \\<exists>pt\\<in>set prx. repNodes_eq pt p low high rep\n\ngoal (1 subgoal):\n 1. filter (\\<lambda>sn. repNodes_eq sn p low high rep) prx \\<noteq> []", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>pt\\<in>set prx. repNodes_eq pt p low high rep \\<Longrightarrow>\n    filter (\\<lambda>sn. repNodes_eq sn p low high rep) prx \\<noteq> []", "apply (erule bexE)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>pt.\n       \\<lbrakk>pt \\<in> set prx; repNodes_eq pt p low high rep\\<rbrakk>\n       \\<Longrightarrow> filter (\\<lambda>sn. repNodes_eq sn p low high rep)\n                          prx \\<noteq>\n                         []", "apply (rule filter_not_empty)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>pt.\n       \\<lbrakk>pt \\<in> set prx; repNodes_eq pt p low high rep\\<rbrakk>\n       \\<Longrightarrow> ?x3 pt \\<in> set prx\n 2. \\<And>pt.\n       \\<lbrakk>pt \\<in> set prx; repNodes_eq pt p low high rep\\<rbrakk>\n       \\<Longrightarrow> repNodes_eq (?x3 pt) p low high rep", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  filter (\\<lambda>sn. repNodes_eq sn p low high rep) prx \\<noteq> []\n\ngoal (1 subgoal):\n 1. repa p =\n    hd (filter (\\<lambda>sn. repNodes_eq sn p low high rep)\n         (prx @ sfx)) \\<and>\n    (\\<forall>pt. pt \\<noteq> p \\<longrightarrow> rep pt = repa pt) \\<and>\n    var (repa p) = var p", "from ex_match match_prx"], ["proof (chain)\npicking this:\n  \\<exists>pt\\<in>set prx. repNodes_eq pt p low high rep\n  (\\<exists>pt\\<in>set prx. repNodes_eq pt p low high rep) \\<longrightarrow>\n  repa p =\n  hd (filter (\\<lambda>sn. repNodes_eq sn p low high rep) prx) \\<and>\n  (\\<forall>pt. pt \\<noteq> p \\<longrightarrow> rep pt = repa pt)", "obtain\n      found: \"repa p = hd [sn\\<leftarrow>prx . repNodes_eq sn p low high rep]\" and\n      unmodif: \"\\<forall>pt. pt \\<noteq> p \\<longrightarrow> rep pt = repa pt\""], ["proof (prove)\nusing this:\n  \\<exists>pt\\<in>set prx. repNodes_eq pt p low high rep\n  (\\<exists>pt\\<in>set prx. repNodes_eq pt p low high rep) \\<longrightarrow>\n  repa p =\n  hd (filter (\\<lambda>sn. repNodes_eq sn p low high rep) prx) \\<and>\n  (\\<forall>pt. pt \\<noteq> p \\<longrightarrow> rep pt = repa pt)\n\ngoal (1 subgoal):\n 1. (\\<lbrakk>repa p =\n              hd (filter (\\<lambda>sn. repNodes_eq sn p low high rep) prx);\n      \\<forall>pt. pt \\<noteq> p \\<longrightarrow> rep pt = repa pt\\<rbrakk>\n     \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  repa p = hd (filter (\\<lambda>sn. repNodes_eq sn p low high rep) prx)\n  \\<forall>pt. pt \\<noteq> p \\<longrightarrow> rep pt = repa pt\n\ngoal (1 subgoal):\n 1. repa p =\n    hd (filter (\\<lambda>sn. repNodes_eq sn p low high rep)\n         (prx @ sfx)) \\<and>\n    (\\<forall>pt. pt \\<noteq> p \\<longrightarrow> rep pt = repa pt) \\<and>\n    var (repa p) = var p", "from hd_filter_in_list [OF not_empty] found"], ["proof (chain)\npicking this:\n  hd (filter (\\<lambda>sn. repNodes_eq sn p low high rep) prx) \\<in> set prx\n  repa p = hd (filter (\\<lambda>sn. repNodes_eq sn p low high rep) prx)", "have \"repa p \\<in> set prx\""], ["proof (prove)\nusing this:\n  hd (filter (\\<lambda>sn. repNodes_eq sn p low high rep) prx) \\<in> set prx\n  repa p = hd (filter (\\<lambda>sn. repNodes_eq sn p low high rep) prx)\n\ngoal (1 subgoal):\n 1. repa p \\<in> set prx", "by simp"], ["proof (state)\nthis:\n  repa p \\<in> set prx\n\ngoal (1 subgoal):\n 1. repa p =\n    hd (filter (\\<lambda>sn. repNodes_eq sn p low high rep)\n         (prx @ sfx)) \\<and>\n    (\\<forall>pt. pt \\<noteq> p \\<longrightarrow> rep pt = repa pt) \\<and>\n    var (repa p) = var p", "with no_props"], ["proof (chain)\npicking this:\n  \\<forall>no\\<in>set (prx @ sfx).\n     no \\<noteq> Null \\<and>\n     (low no = Null) = (high no = Null) \\<and>\n     (isLeaf_pt p low high \\<longrightarrow> isLeaf_pt no low high) \\<and>\n     var no = var p\n  repa p \\<in> set prx", "have \"var (repa p) = var p\""], ["proof (prove)\nusing this:\n  \\<forall>no\\<in>set (prx @ sfx).\n     no \\<noteq> Null \\<and>\n     (low no = Null) = (high no = Null) \\<and>\n     (isLeaf_pt p low high \\<longrightarrow> isLeaf_pt no low high) \\<and>\n     var no = var p\n  repa p \\<in> set prx\n\ngoal (1 subgoal):\n 1. var (repa p) = var p", "using [[simp_depth_limit=2]]"], ["proof (prove)\nusing this:\n  \\<forall>no\\<in>set (prx @ sfx).\n     no \\<noteq> Null \\<and>\n     (low no = Null) = (high no = Null) \\<and>\n     (isLeaf_pt p low high \\<longrightarrow> isLeaf_pt no low high) \\<and>\n     var no = var p\n  repa p \\<in> set prx\n\ngoal (1 subgoal):\n 1. var (repa p) = var p", "by simp"], ["proof (state)\nthis:\n  var (repa p) = var p\n\ngoal (1 subgoal):\n 1. repa p =\n    hd (filter (\\<lambda>sn. repNodes_eq sn p low high rep)\n         (prx @ sfx)) \\<and>\n    (\\<forall>pt. pt \\<noteq> p \\<longrightarrow> rep pt = repa pt) \\<and>\n    var (repa p) = var p", "with found unmodif sfx_Nil"], ["proof (chain)\npicking this:\n  repa p = hd (filter (\\<lambda>sn. repNodes_eq sn p low high rep) prx)\n  \\<forall>pt. pt \\<noteq> p \\<longrightarrow> rep pt = repa pt\n  sfx = []\n  var (repa p) = var p", "show ?thesis"], ["proof (prove)\nusing this:\n  repa p = hd (filter (\\<lambda>sn. repNodes_eq sn p low high rep) prx)\n  \\<forall>pt. pt \\<noteq> p \\<longrightarrow> rep pt = repa pt\n  sfx = []\n  var (repa p) = var p\n\ngoal (1 subgoal):\n 1. repa p =\n    hd (filter (\\<lambda>sn. repNodes_eq sn p low high rep)\n         (prx @ sfx)) \\<and>\n    (\\<forall>pt. pt \\<noteq> p \\<longrightarrow> rep pt = repa pt) \\<and>\n    var (repa p) = var p", "by simp"], ["proof (state)\nthis:\n  repa p =\n  hd (filter (\\<lambda>sn. repNodes_eq sn p low high rep)\n       (prx @ sfx)) \\<and>\n  (\\<forall>pt. pt \\<noteq> p \\<longrightarrow> rep pt = repa pt) \\<and>\n  var (repa p) = var p\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  repa p =\n  hd (filter (\\<lambda>sn. repNodes_eq sn p low high rep)\n       (prx @ sfx)) \\<and>\n  (\\<forall>pt. pt \\<noteq> p \\<longrightarrow> rep pt = repa pt) \\<and>\n  var (repa p) = var p\n\ngoal (2 subgoals):\n 1. \\<And>var low high p repa next nodeslist prx sfx.\n       \\<lbrakk>nodeslist \\<noteq> Null; \\<not> isLeaf_pt p low high;\n        \\<forall>no\\<in>set prx \\<union> set (nodeslist # sfx).\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and> var no = var p;\n        p \\<in> set prx \\<or> p \\<in> set (nodeslist # sfx);\n        (\\<exists>pt\\<in>set prx.\n            repNodes_eq pt p low high repa) \\<longrightarrow>\n        repa p =\n        hd (filter (\\<lambda>sn. repNodes_eq sn p low high repa) prx);\n        \\<forall>pt\\<in>set prx. \\<not> repNodes_eq pt p low high repa;\n        \\<not> repNodes_eq nodeslist p low high repa;\n        List (next nodeslist) next sfx\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>no\\<in>set prx \\<union>\n    set (nodeslist # sfx).\n                             no \\<noteq> Null \\<and>\n                             (low no = Null) = (high no = Null) \\<and>\n                             var no = var p) \\<and>\n                         ((\\<exists>pt\\<in>set (prx @ [nodeslist]).\n                              repNodes_eq pt p low high\n                               repa) \\<longrightarrow>\n                          repa p =\n                          hd (filter\n                               (\\<lambda>sn. repNodes_eq sn p low high repa)\n                               (prx @ [nodeslist]))) \\<and>\n                         (next nodeslist \\<noteq> Null \\<longrightarrow>\n                          (\\<forall>pt\\<in>set (prx @ [nodeslist]).\n                              \\<not> repNodes_eq pt p low high repa))\n 2. \\<And>var low high p repa next nodeslist prx sfx.\n       \\<lbrakk>nodeslist \\<noteq> Null; List nodeslist next sfx;\n        \\<not> isLeaf_pt p low high;\n        \\<forall>no\\<in>set prx \\<union> set sfx.\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           (isLeaf_pt p low high \\<longrightarrow>\n            isLeaf_pt no low high) \\<and>\n           var no = var p;\n        p \\<in> set prx \\<or> p \\<in> set sfx;\n        (\\<exists>pt\\<in>set prx.\n            repNodes_eq pt p low high repa) \\<longrightarrow>\n        repa p =\n        hd (filter (\\<lambda>sn. repNodes_eq sn p low high repa) prx);\n        \\<forall>pt\\<in>set prx. \\<not> repNodes_eq pt p low high repa;\n        repNodes_eq nodeslist p low high repa\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>no\\<in>set prx \\<union> set sfx.\n                             no \\<noteq> Null \\<and>\n                             (low no = Null) = (high no = Null) \\<and>\n                             (isLeaf_pt p low high \\<longrightarrow>\n                              isLeaf_pt no low high) \\<and>\n                             var no = var p) \\<and>\n                         (p \\<in> set prx \\<or> p \\<in> set sfx) \\<and>\n                         ((\\<exists>pt\\<in>set prx \\<union> set sfx.\n                              repNodes_eq pt p low high\n                               repa) \\<longrightarrow>\n                          nodeslist =\n                          hd (filter\n                               (\\<lambda>sn. repNodes_eq sn p low high repa)\n                               prx @\n                              filter\n                               (\\<lambda>sn. repNodes_eq sn p low high repa)\n                               sfx)) \\<and>\n                         ((\\<forall>pt\\<in>set prx \\<union> set sfx.\n                              \\<not> repNodes_eq pt p low high\nrepa) \\<longrightarrow>\n                          repa = repa(p := nodeslist))", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>var low high p repa next nodeslist prx sfx.\n       \\<lbrakk>nodeslist \\<noteq> Null; \\<not> isLeaf_pt p low high;\n        \\<forall>no\\<in>set prx \\<union> set (nodeslist # sfx).\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and> var no = var p;\n        p \\<in> set prx \\<or> p \\<in> set (nodeslist # sfx);\n        (\\<exists>pt\\<in>set prx.\n            repNodes_eq pt p low high repa) \\<longrightarrow>\n        repa p =\n        hd (filter (\\<lambda>sn. repNodes_eq sn p low high repa) prx);\n        \\<forall>pt\\<in>set prx. \\<not> repNodes_eq pt p low high repa;\n        \\<not> repNodes_eq nodeslist p low high repa;\n        List (next nodeslist) next sfx\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>no\\<in>set prx \\<union>\n    set (nodeslist # sfx).\n                             no \\<noteq> Null \\<and>\n                             (low no = Null) = (high no = Null) \\<and>\n                             var no = var p) \\<and>\n                         ((\\<exists>pt\\<in>set (prx @ [nodeslist]).\n                              repNodes_eq pt p low high\n                               repa) \\<longrightarrow>\n                          repa p =\n                          hd (filter\n                               (\\<lambda>sn. repNodes_eq sn p low high repa)\n                               (prx @ [nodeslist]))) \\<and>\n                         (next nodeslist \\<noteq> Null \\<longrightarrow>\n                          (\\<forall>pt\\<in>set (prx @ [nodeslist]).\n                              \\<not> repNodes_eq pt p low high repa))\n 2. \\<And>var low high p repa next nodeslist prx sfx.\n       \\<lbrakk>nodeslist \\<noteq> Null; List nodeslist next sfx;\n        \\<not> isLeaf_pt p low high;\n        \\<forall>no\\<in>set prx \\<union> set sfx.\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           (isLeaf_pt p low high \\<longrightarrow>\n            isLeaf_pt no low high) \\<and>\n           var no = var p;\n        p \\<in> set prx \\<or> p \\<in> set sfx;\n        (\\<exists>pt\\<in>set prx.\n            repNodes_eq pt p low high repa) \\<longrightarrow>\n        repa p =\n        hd (filter (\\<lambda>sn. repNodes_eq sn p low high repa) prx);\n        \\<forall>pt\\<in>set prx. \\<not> repNodes_eq pt p low high repa;\n        repNodes_eq nodeslist p low high repa\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>no\\<in>set prx \\<union> set sfx.\n                             no \\<noteq> Null \\<and>\n                             (low no = Null) = (high no = Null) \\<and>\n                             (isLeaf_pt p low high \\<longrightarrow>\n                              isLeaf_pt no low high) \\<and>\n                             var no = var p) \\<and>\n                         (p \\<in> set prx \\<or> p \\<in> set sfx) \\<and>\n                         ((\\<exists>pt\\<in>set prx \\<union> set sfx.\n                              repNodes_eq pt p low high\n                               repa) \\<longrightarrow>\n                          nodeslist =\n                          hd (filter\n                               (\\<lambda>sn. repNodes_eq sn p low high repa)\n                               prx @\n                              filter\n                               (\\<lambda>sn. repNodes_eq sn p low high repa)\n                               sfx)) \\<and>\n                         ((\\<forall>pt\\<in>set prx \\<union> set sfx.\n                              \\<not> repNodes_eq pt p low high\nrepa) \\<longrightarrow>\n                          repa = repa(p := nodeslist))", "(* Invariant to invariant; ELSE part *)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>var low high p repa next nodeslist prx sfx.\n       \\<lbrakk>nodeslist \\<noteq> Null; \\<not> isLeaf_pt p low high;\n        \\<forall>no\\<in>set prx \\<union> set (nodeslist # sfx).\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and> var no = var p;\n        p \\<in> set prx \\<or> p \\<in> set (nodeslist # sfx);\n        (\\<exists>pt\\<in>set prx.\n            repNodes_eq pt p low high repa) \\<longrightarrow>\n        repa p =\n        hd (filter (\\<lambda>sn. repNodes_eq sn p low high repa) prx);\n        \\<forall>pt\\<in>set prx. \\<not> repNodes_eq pt p low high repa;\n        \\<not> repNodes_eq nodeslist p low high repa;\n        List (next nodeslist) next sfx\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>no\\<in>set prx \\<union>\n    set (nodeslist # sfx).\n                             no \\<noteq> Null \\<and>\n                             (low no = Null) = (high no = Null) \\<and>\n                             var no = var p) \\<and>\n                         ((\\<exists>pt\\<in>set (prx @ [nodeslist]).\n                              repNodes_eq pt p low high\n                               repa) \\<longrightarrow>\n                          repa p =\n                          hd (filter\n                               (\\<lambda>sn. repNodes_eq sn p low high repa)\n                               (prx @ [nodeslist]))) \\<and>\n                         (next nodeslist \\<noteq> Null \\<longrightarrow>\n                          (\\<forall>pt\\<in>set (prx @ [nodeslist]).\n                              \\<not> repNodes_eq pt p low high repa))\n 2. \\<And>var low high p repa next nodeslist prx sfx.\n       \\<lbrakk>nodeslist \\<noteq> Null; List nodeslist next sfx;\n        \\<not> isLeaf_pt p low high;\n        \\<forall>no\\<in>set prx \\<union> set sfx.\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           (isLeaf_pt p low high \\<longrightarrow>\n            isLeaf_pt no low high) \\<and>\n           var no = var p;\n        p \\<in> set prx \\<or> p \\<in> set sfx;\n        (\\<exists>pt\\<in>set prx.\n            repNodes_eq pt p low high repa) \\<longrightarrow>\n        repa p =\n        hd (filter (\\<lambda>sn. repNodes_eq sn p low high repa) prx);\n        \\<forall>pt\\<in>set prx. \\<not> repNodes_eq pt p low high repa;\n        repNodes_eq nodeslist p low high repa\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>no\\<in>set prx \\<union> set sfx.\n                             no \\<noteq> Null \\<and>\n                             (low no = Null) = (high no = Null) \\<and>\n                             (isLeaf_pt p low high \\<longrightarrow>\n                              isLeaf_pt no low high) \\<and>\n                             var no = var p) \\<and>\n                         (p \\<in> set prx \\<or> p \\<in> set sfx) \\<and>\n                         ((\\<exists>pt\\<in>set prx \\<union> set sfx.\n                              repNodes_eq pt p low high\n                               repa) \\<longrightarrow>\n                          nodeslist =\n                          hd (filter\n                               (\\<lambda>sn. repNodes_eq sn p low high repa)\n                               prx @\n                              filter\n                               (\\<lambda>sn. repNodes_eq sn p low high repa)\n                               sfx)) \\<and>\n                         ((\\<forall>pt\\<in>set prx \\<union> set sfx.\n                              \\<not> repNodes_eq pt p low high\nrepa) \\<longrightarrow>\n                          repa = repa(p := nodeslist))", "fix var low high p repa \"next\" nodeslist prx sfx"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>var low high p repa next nodeslist prx sfx.\n       \\<lbrakk>nodeslist \\<noteq> Null; \\<not> isLeaf_pt p low high;\n        \\<forall>no\\<in>set prx \\<union> set (nodeslist # sfx).\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and> var no = var p;\n        p \\<in> set prx \\<or> p \\<in> set (nodeslist # sfx);\n        (\\<exists>pt\\<in>set prx.\n            repNodes_eq pt p low high repa) \\<longrightarrow>\n        repa p =\n        hd (filter (\\<lambda>sn. repNodes_eq sn p low high repa) prx);\n        \\<forall>pt\\<in>set prx. \\<not> repNodes_eq pt p low high repa;\n        \\<not> repNodes_eq nodeslist p low high repa;\n        List (next nodeslist) next sfx\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>no\\<in>set prx \\<union>\n    set (nodeslist # sfx).\n                             no \\<noteq> Null \\<and>\n                             (low no = Null) = (high no = Null) \\<and>\n                             var no = var p) \\<and>\n                         ((\\<exists>pt\\<in>set (prx @ [nodeslist]).\n                              repNodes_eq pt p low high\n                               repa) \\<longrightarrow>\n                          repa p =\n                          hd (filter\n                               (\\<lambda>sn. repNodes_eq sn p low high repa)\n                               (prx @ [nodeslist]))) \\<and>\n                         (next nodeslist \\<noteq> Null \\<longrightarrow>\n                          (\\<forall>pt\\<in>set (prx @ [nodeslist]).\n                              \\<not> repNodes_eq pt p low high repa))\n 2. \\<And>var low high p repa next nodeslist prx sfx.\n       \\<lbrakk>nodeslist \\<noteq> Null; List nodeslist next sfx;\n        \\<not> isLeaf_pt p low high;\n        \\<forall>no\\<in>set prx \\<union> set sfx.\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           (isLeaf_pt p low high \\<longrightarrow>\n            isLeaf_pt no low high) \\<and>\n           var no = var p;\n        p \\<in> set prx \\<or> p \\<in> set sfx;\n        (\\<exists>pt\\<in>set prx.\n            repNodes_eq pt p low high repa) \\<longrightarrow>\n        repa p =\n        hd (filter (\\<lambda>sn. repNodes_eq sn p low high repa) prx);\n        \\<forall>pt\\<in>set prx. \\<not> repNodes_eq pt p low high repa;\n        repNodes_eq nodeslist p low high repa\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>no\\<in>set prx \\<union> set sfx.\n                             no \\<noteq> Null \\<and>\n                             (low no = Null) = (high no = Null) \\<and>\n                             (isLeaf_pt p low high \\<longrightarrow>\n                              isLeaf_pt no low high) \\<and>\n                             var no = var p) \\<and>\n                         (p \\<in> set prx \\<or> p \\<in> set sfx) \\<and>\n                         ((\\<exists>pt\\<in>set prx \\<union> set sfx.\n                              repNodes_eq pt p low high\n                               repa) \\<longrightarrow>\n                          nodeslist =\n                          hd (filter\n                               (\\<lambda>sn. repNodes_eq sn p low high repa)\n                               prx @\n                              filter\n                               (\\<lambda>sn. repNodes_eq sn p low high repa)\n                               sfx)) \\<and>\n                         ((\\<forall>pt\\<in>set prx \\<union> set sfx.\n                              \\<not> repNodes_eq pt p low high\nrepa) \\<longrightarrow>\n                          repa = repa(p := nodeslist))", "assume nodeslist_not_Null: \"nodeslist \\<noteq> Null\""], ["proof (state)\nthis:\n  nodeslist \\<noteq> Null\n\ngoal (2 subgoals):\n 1. \\<And>var low high p repa next nodeslist prx sfx.\n       \\<lbrakk>nodeslist \\<noteq> Null; \\<not> isLeaf_pt p low high;\n        \\<forall>no\\<in>set prx \\<union> set (nodeslist # sfx).\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and> var no = var p;\n        p \\<in> set prx \\<or> p \\<in> set (nodeslist # sfx);\n        (\\<exists>pt\\<in>set prx.\n            repNodes_eq pt p low high repa) \\<longrightarrow>\n        repa p =\n        hd (filter (\\<lambda>sn. repNodes_eq sn p low high repa) prx);\n        \\<forall>pt\\<in>set prx. \\<not> repNodes_eq pt p low high repa;\n        \\<not> repNodes_eq nodeslist p low high repa;\n        List (next nodeslist) next sfx\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>no\\<in>set prx \\<union>\n    set (nodeslist # sfx).\n                             no \\<noteq> Null \\<and>\n                             (low no = Null) = (high no = Null) \\<and>\n                             var no = var p) \\<and>\n                         ((\\<exists>pt\\<in>set (prx @ [nodeslist]).\n                              repNodes_eq pt p low high\n                               repa) \\<longrightarrow>\n                          repa p =\n                          hd (filter\n                               (\\<lambda>sn. repNodes_eq sn p low high repa)\n                               (prx @ [nodeslist]))) \\<and>\n                         (next nodeslist \\<noteq> Null \\<longrightarrow>\n                          (\\<forall>pt\\<in>set (prx @ [nodeslist]).\n                              \\<not> repNodes_eq pt p low high repa))\n 2. \\<And>var low high p repa next nodeslist prx sfx.\n       \\<lbrakk>nodeslist \\<noteq> Null; List nodeslist next sfx;\n        \\<not> isLeaf_pt p low high;\n        \\<forall>no\\<in>set prx \\<union> set sfx.\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           (isLeaf_pt p low high \\<longrightarrow>\n            isLeaf_pt no low high) \\<and>\n           var no = var p;\n        p \\<in> set prx \\<or> p \\<in> set sfx;\n        (\\<exists>pt\\<in>set prx.\n            repNodes_eq pt p low high repa) \\<longrightarrow>\n        repa p =\n        hd (filter (\\<lambda>sn. repNodes_eq sn p low high repa) prx);\n        \\<forall>pt\\<in>set prx. \\<not> repNodes_eq pt p low high repa;\n        repNodes_eq nodeslist p low high repa\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>no\\<in>set prx \\<union> set sfx.\n                             no \\<noteq> Null \\<and>\n                             (low no = Null) = (high no = Null) \\<and>\n                             (isLeaf_pt p low high \\<longrightarrow>\n                              isLeaf_pt no low high) \\<and>\n                             var no = var p) \\<and>\n                         (p \\<in> set prx \\<or> p \\<in> set sfx) \\<and>\n                         ((\\<exists>pt\\<in>set prx \\<union> set sfx.\n                              repNodes_eq pt p low high\n                               repa) \\<longrightarrow>\n                          nodeslist =\n                          hd (filter\n                               (\\<lambda>sn. repNodes_eq sn p low high repa)\n                               prx @\n                              filter\n                               (\\<lambda>sn. repNodes_eq sn p low high repa)\n                               sfx)) \\<and>\n                         ((\\<forall>pt\\<in>set prx \\<union> set sfx.\n                              \\<not> repNodes_eq pt p low high\nrepa) \\<longrightarrow>\n                          repa = repa(p := nodeslist))", "assume p_no_Leaf: \"\\<not> isLeaf_pt p low high\""], ["proof (state)\nthis:\n  \\<not> isLeaf_pt p low high\n\ngoal (2 subgoals):\n 1. \\<And>var low high p repa next nodeslist prx sfx.\n       \\<lbrakk>nodeslist \\<noteq> Null; \\<not> isLeaf_pt p low high;\n        \\<forall>no\\<in>set prx \\<union> set (nodeslist # sfx).\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and> var no = var p;\n        p \\<in> set prx \\<or> p \\<in> set (nodeslist # sfx);\n        (\\<exists>pt\\<in>set prx.\n            repNodes_eq pt p low high repa) \\<longrightarrow>\n        repa p =\n        hd (filter (\\<lambda>sn. repNodes_eq sn p low high repa) prx);\n        \\<forall>pt\\<in>set prx. \\<not> repNodes_eq pt p low high repa;\n        \\<not> repNodes_eq nodeslist p low high repa;\n        List (next nodeslist) next sfx\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>no\\<in>set prx \\<union>\n    set (nodeslist # sfx).\n                             no \\<noteq> Null \\<and>\n                             (low no = Null) = (high no = Null) \\<and>\n                             var no = var p) \\<and>\n                         ((\\<exists>pt\\<in>set (prx @ [nodeslist]).\n                              repNodes_eq pt p low high\n                               repa) \\<longrightarrow>\n                          repa p =\n                          hd (filter\n                               (\\<lambda>sn. repNodes_eq sn p low high repa)\n                               (prx @ [nodeslist]))) \\<and>\n                         (next nodeslist \\<noteq> Null \\<longrightarrow>\n                          (\\<forall>pt\\<in>set (prx @ [nodeslist]).\n                              \\<not> repNodes_eq pt p low high repa))\n 2. \\<And>var low high p repa next nodeslist prx sfx.\n       \\<lbrakk>nodeslist \\<noteq> Null; List nodeslist next sfx;\n        \\<not> isLeaf_pt p low high;\n        \\<forall>no\\<in>set prx \\<union> set sfx.\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           (isLeaf_pt p low high \\<longrightarrow>\n            isLeaf_pt no low high) \\<and>\n           var no = var p;\n        p \\<in> set prx \\<or> p \\<in> set sfx;\n        (\\<exists>pt\\<in>set prx.\n            repNodes_eq pt p low high repa) \\<longrightarrow>\n        repa p =\n        hd (filter (\\<lambda>sn. repNodes_eq sn p low high repa) prx);\n        \\<forall>pt\\<in>set prx. \\<not> repNodes_eq pt p low high repa;\n        repNodes_eq nodeslist p low high repa\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>no\\<in>set prx \\<union> set sfx.\n                             no \\<noteq> Null \\<and>\n                             (low no = Null) = (high no = Null) \\<and>\n                             (isLeaf_pt p low high \\<longrightarrow>\n                              isLeaf_pt no low high) \\<and>\n                             var no = var p) \\<and>\n                         (p \\<in> set prx \\<or> p \\<in> set sfx) \\<and>\n                         ((\\<exists>pt\\<in>set prx \\<union> set sfx.\n                              repNodes_eq pt p low high\n                               repa) \\<longrightarrow>\n                          nodeslist =\n                          hd (filter\n                               (\\<lambda>sn. repNodes_eq sn p low high repa)\n                               prx @\n                              filter\n                               (\\<lambda>sn. repNodes_eq sn p low high repa)\n                               sfx)) \\<and>\n                         ((\\<forall>pt\\<in>set prx \\<union> set sfx.\n                              \\<not> repNodes_eq pt p low high\nrepa) \\<longrightarrow>\n                          repa = repa(p := nodeslist))", "assume no_props: \"\\<forall>no\\<in>set prx \\<union> set (nodeslist # sfx).\n           no \\<noteq> Null \\<and> (low no = Null) = (high no = Null) \\<and> var no = var p\""], ["proof (state)\nthis:\n  \\<forall>no\\<in>set prx \\<union> set (nodeslist # sfx).\n     no \\<noteq> Null \\<and>\n     (low no = Null) = (high no = Null) \\<and> var no = var p\n\ngoal (2 subgoals):\n 1. \\<And>var low high p repa next nodeslist prx sfx.\n       \\<lbrakk>nodeslist \\<noteq> Null; \\<not> isLeaf_pt p low high;\n        \\<forall>no\\<in>set prx \\<union> set (nodeslist # sfx).\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and> var no = var p;\n        p \\<in> set prx \\<or> p \\<in> set (nodeslist # sfx);\n        (\\<exists>pt\\<in>set prx.\n            repNodes_eq pt p low high repa) \\<longrightarrow>\n        repa p =\n        hd (filter (\\<lambda>sn. repNodes_eq sn p low high repa) prx);\n        \\<forall>pt\\<in>set prx. \\<not> repNodes_eq pt p low high repa;\n        \\<not> repNodes_eq nodeslist p low high repa;\n        List (next nodeslist) next sfx\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>no\\<in>set prx \\<union>\n    set (nodeslist # sfx).\n                             no \\<noteq> Null \\<and>\n                             (low no = Null) = (high no = Null) \\<and>\n                             var no = var p) \\<and>\n                         ((\\<exists>pt\\<in>set (prx @ [nodeslist]).\n                              repNodes_eq pt p low high\n                               repa) \\<longrightarrow>\n                          repa p =\n                          hd (filter\n                               (\\<lambda>sn. repNodes_eq sn p low high repa)\n                               (prx @ [nodeslist]))) \\<and>\n                         (next nodeslist \\<noteq> Null \\<longrightarrow>\n                          (\\<forall>pt\\<in>set (prx @ [nodeslist]).\n                              \\<not> repNodes_eq pt p low high repa))\n 2. \\<And>var low high p repa next nodeslist prx sfx.\n       \\<lbrakk>nodeslist \\<noteq> Null; List nodeslist next sfx;\n        \\<not> isLeaf_pt p low high;\n        \\<forall>no\\<in>set prx \\<union> set sfx.\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           (isLeaf_pt p low high \\<longrightarrow>\n            isLeaf_pt no low high) \\<and>\n           var no = var p;\n        p \\<in> set prx \\<or> p \\<in> set sfx;\n        (\\<exists>pt\\<in>set prx.\n            repNodes_eq pt p low high repa) \\<longrightarrow>\n        repa p =\n        hd (filter (\\<lambda>sn. repNodes_eq sn p low high repa) prx);\n        \\<forall>pt\\<in>set prx. \\<not> repNodes_eq pt p low high repa;\n        repNodes_eq nodeslist p low high repa\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>no\\<in>set prx \\<union> set sfx.\n                             no \\<noteq> Null \\<and>\n                             (low no = Null) = (high no = Null) \\<and>\n                             (isLeaf_pt p low high \\<longrightarrow>\n                              isLeaf_pt no low high) \\<and>\n                             var no = var p) \\<and>\n                         (p \\<in> set prx \\<or> p \\<in> set sfx) \\<and>\n                         ((\\<exists>pt\\<in>set prx \\<union> set sfx.\n                              repNodes_eq pt p low high\n                               repa) \\<longrightarrow>\n                          nodeslist =\n                          hd (filter\n                               (\\<lambda>sn. repNodes_eq sn p low high repa)\n                               prx @\n                              filter\n                               (\\<lambda>sn. repNodes_eq sn p low high repa)\n                               sfx)) \\<and>\n                         ((\\<forall>pt\\<in>set prx \\<union> set sfx.\n                              \\<not> repNodes_eq pt p low high\nrepa) \\<longrightarrow>\n                          repa = repa(p := nodeslist))", "assume p_in_ns: \"p \\<in> set prx \\<or> p \\<in> set (nodeslist # sfx)\""], ["proof (state)\nthis:\n  p \\<in> set prx \\<or> p \\<in> set (nodeslist # sfx)\n\ngoal (2 subgoals):\n 1. \\<And>var low high p repa next nodeslist prx sfx.\n       \\<lbrakk>nodeslist \\<noteq> Null; \\<not> isLeaf_pt p low high;\n        \\<forall>no\\<in>set prx \\<union> set (nodeslist # sfx).\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and> var no = var p;\n        p \\<in> set prx \\<or> p \\<in> set (nodeslist # sfx);\n        (\\<exists>pt\\<in>set prx.\n            repNodes_eq pt p low high repa) \\<longrightarrow>\n        repa p =\n        hd (filter (\\<lambda>sn. repNodes_eq sn p low high repa) prx);\n        \\<forall>pt\\<in>set prx. \\<not> repNodes_eq pt p low high repa;\n        \\<not> repNodes_eq nodeslist p low high repa;\n        List (next nodeslist) next sfx\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>no\\<in>set prx \\<union>\n    set (nodeslist # sfx).\n                             no \\<noteq> Null \\<and>\n                             (low no = Null) = (high no = Null) \\<and>\n                             var no = var p) \\<and>\n                         ((\\<exists>pt\\<in>set (prx @ [nodeslist]).\n                              repNodes_eq pt p low high\n                               repa) \\<longrightarrow>\n                          repa p =\n                          hd (filter\n                               (\\<lambda>sn. repNodes_eq sn p low high repa)\n                               (prx @ [nodeslist]))) \\<and>\n                         (next nodeslist \\<noteq> Null \\<longrightarrow>\n                          (\\<forall>pt\\<in>set (prx @ [nodeslist]).\n                              \\<not> repNodes_eq pt p low high repa))\n 2. \\<And>var low high p repa next nodeslist prx sfx.\n       \\<lbrakk>nodeslist \\<noteq> Null; List nodeslist next sfx;\n        \\<not> isLeaf_pt p low high;\n        \\<forall>no\\<in>set prx \\<union> set sfx.\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           (isLeaf_pt p low high \\<longrightarrow>\n            isLeaf_pt no low high) \\<and>\n           var no = var p;\n        p \\<in> set prx \\<or> p \\<in> set sfx;\n        (\\<exists>pt\\<in>set prx.\n            repNodes_eq pt p low high repa) \\<longrightarrow>\n        repa p =\n        hd (filter (\\<lambda>sn. repNodes_eq sn p low high repa) prx);\n        \\<forall>pt\\<in>set prx. \\<not> repNodes_eq pt p low high repa;\n        repNodes_eq nodeslist p low high repa\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>no\\<in>set prx \\<union> set sfx.\n                             no \\<noteq> Null \\<and>\n                             (low no = Null) = (high no = Null) \\<and>\n                             (isLeaf_pt p low high \\<longrightarrow>\n                              isLeaf_pt no low high) \\<and>\n                             var no = var p) \\<and>\n                         (p \\<in> set prx \\<or> p \\<in> set sfx) \\<and>\n                         ((\\<exists>pt\\<in>set prx \\<union> set sfx.\n                              repNodes_eq pt p low high\n                               repa) \\<longrightarrow>\n                          nodeslist =\n                          hd (filter\n                               (\\<lambda>sn. repNodes_eq sn p low high repa)\n                               prx @\n                              filter\n                               (\\<lambda>sn. repNodes_eq sn p low high repa)\n                               sfx)) \\<and>\n                         ((\\<forall>pt\\<in>set prx \\<union> set sfx.\n                              \\<not> repNodes_eq pt p low high\nrepa) \\<longrightarrow>\n                          repa = repa(p := nodeslist))", "assume match_prx: \"(\\<exists>pt\\<in>set prx. repNodes_eq pt p low high repa) \\<longrightarrow>\n            repa p = hd [sn\\<leftarrow>prx . repNodes_eq sn p low high repa]\""], ["proof (state)\nthis:\n  (\\<exists>pt\\<in>set prx.\n      repNodes_eq pt p low high repa) \\<longrightarrow>\n  repa p = hd (filter (\\<lambda>sn. repNodes_eq sn p low high repa) prx)\n\ngoal (2 subgoals):\n 1. \\<And>var low high p repa next nodeslist prx sfx.\n       \\<lbrakk>nodeslist \\<noteq> Null; \\<not> isLeaf_pt p low high;\n        \\<forall>no\\<in>set prx \\<union> set (nodeslist # sfx).\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and> var no = var p;\n        p \\<in> set prx \\<or> p \\<in> set (nodeslist # sfx);\n        (\\<exists>pt\\<in>set prx.\n            repNodes_eq pt p low high repa) \\<longrightarrow>\n        repa p =\n        hd (filter (\\<lambda>sn. repNodes_eq sn p low high repa) prx);\n        \\<forall>pt\\<in>set prx. \\<not> repNodes_eq pt p low high repa;\n        \\<not> repNodes_eq nodeslist p low high repa;\n        List (next nodeslist) next sfx\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>no\\<in>set prx \\<union>\n    set (nodeslist # sfx).\n                             no \\<noteq> Null \\<and>\n                             (low no = Null) = (high no = Null) \\<and>\n                             var no = var p) \\<and>\n                         ((\\<exists>pt\\<in>set (prx @ [nodeslist]).\n                              repNodes_eq pt p low high\n                               repa) \\<longrightarrow>\n                          repa p =\n                          hd (filter\n                               (\\<lambda>sn. repNodes_eq sn p low high repa)\n                               (prx @ [nodeslist]))) \\<and>\n                         (next nodeslist \\<noteq> Null \\<longrightarrow>\n                          (\\<forall>pt\\<in>set (prx @ [nodeslist]).\n                              \\<not> repNodes_eq pt p low high repa))\n 2. \\<And>var low high p repa next nodeslist prx sfx.\n       \\<lbrakk>nodeslist \\<noteq> Null; List nodeslist next sfx;\n        \\<not> isLeaf_pt p low high;\n        \\<forall>no\\<in>set prx \\<union> set sfx.\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           (isLeaf_pt p low high \\<longrightarrow>\n            isLeaf_pt no low high) \\<and>\n           var no = var p;\n        p \\<in> set prx \\<or> p \\<in> set sfx;\n        (\\<exists>pt\\<in>set prx.\n            repNodes_eq pt p low high repa) \\<longrightarrow>\n        repa p =\n        hd (filter (\\<lambda>sn. repNodes_eq sn p low high repa) prx);\n        \\<forall>pt\\<in>set prx. \\<not> repNodes_eq pt p low high repa;\n        repNodes_eq nodeslist p low high repa\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>no\\<in>set prx \\<union> set sfx.\n                             no \\<noteq> Null \\<and>\n                             (low no = Null) = (high no = Null) \\<and>\n                             (isLeaf_pt p low high \\<longrightarrow>\n                              isLeaf_pt no low high) \\<and>\n                             var no = var p) \\<and>\n                         (p \\<in> set prx \\<or> p \\<in> set sfx) \\<and>\n                         ((\\<exists>pt\\<in>set prx \\<union> set sfx.\n                              repNodes_eq pt p low high\n                               repa) \\<longrightarrow>\n                          nodeslist =\n                          hd (filter\n                               (\\<lambda>sn. repNodes_eq sn p low high repa)\n                               prx @\n                              filter\n                               (\\<lambda>sn. repNodes_eq sn p low high repa)\n                               sfx)) \\<and>\n                         ((\\<forall>pt\\<in>set prx \\<union> set sfx.\n                              \\<not> repNodes_eq pt p low high\nrepa) \\<longrightarrow>\n                          repa = repa(p := nodeslist))", "assume nomatch_prx: \"\\<forall>pt\\<in>set prx. \\<not> repNodes_eq pt p low high repa\""], ["proof (state)\nthis:\n  \\<forall>pt\\<in>set prx. \\<not> repNodes_eq pt p low high repa\n\ngoal (2 subgoals):\n 1. \\<And>var low high p repa next nodeslist prx sfx.\n       \\<lbrakk>nodeslist \\<noteq> Null; \\<not> isLeaf_pt p low high;\n        \\<forall>no\\<in>set prx \\<union> set (nodeslist # sfx).\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and> var no = var p;\n        p \\<in> set prx \\<or> p \\<in> set (nodeslist # sfx);\n        (\\<exists>pt\\<in>set prx.\n            repNodes_eq pt p low high repa) \\<longrightarrow>\n        repa p =\n        hd (filter (\\<lambda>sn. repNodes_eq sn p low high repa) prx);\n        \\<forall>pt\\<in>set prx. \\<not> repNodes_eq pt p low high repa;\n        \\<not> repNodes_eq nodeslist p low high repa;\n        List (next nodeslist) next sfx\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>no\\<in>set prx \\<union>\n    set (nodeslist # sfx).\n                             no \\<noteq> Null \\<and>\n                             (low no = Null) = (high no = Null) \\<and>\n                             var no = var p) \\<and>\n                         ((\\<exists>pt\\<in>set (prx @ [nodeslist]).\n                              repNodes_eq pt p low high\n                               repa) \\<longrightarrow>\n                          repa p =\n                          hd (filter\n                               (\\<lambda>sn. repNodes_eq sn p low high repa)\n                               (prx @ [nodeslist]))) \\<and>\n                         (next nodeslist \\<noteq> Null \\<longrightarrow>\n                          (\\<forall>pt\\<in>set (prx @ [nodeslist]).\n                              \\<not> repNodes_eq pt p low high repa))\n 2. \\<And>var low high p repa next nodeslist prx sfx.\n       \\<lbrakk>nodeslist \\<noteq> Null; List nodeslist next sfx;\n        \\<not> isLeaf_pt p low high;\n        \\<forall>no\\<in>set prx \\<union> set sfx.\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           (isLeaf_pt p low high \\<longrightarrow>\n            isLeaf_pt no low high) \\<and>\n           var no = var p;\n        p \\<in> set prx \\<or> p \\<in> set sfx;\n        (\\<exists>pt\\<in>set prx.\n            repNodes_eq pt p low high repa) \\<longrightarrow>\n        repa p =\n        hd (filter (\\<lambda>sn. repNodes_eq sn p low high repa) prx);\n        \\<forall>pt\\<in>set prx. \\<not> repNodes_eq pt p low high repa;\n        repNodes_eq nodeslist p low high repa\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>no\\<in>set prx \\<union> set sfx.\n                             no \\<noteq> Null \\<and>\n                             (low no = Null) = (high no = Null) \\<and>\n                             (isLeaf_pt p low high \\<longrightarrow>\n                              isLeaf_pt no low high) \\<and>\n                             var no = var p) \\<and>\n                         (p \\<in> set prx \\<or> p \\<in> set sfx) \\<and>\n                         ((\\<exists>pt\\<in>set prx \\<union> set sfx.\n                              repNodes_eq pt p low high\n                               repa) \\<longrightarrow>\n                          nodeslist =\n                          hd (filter\n                               (\\<lambda>sn. repNodes_eq sn p low high repa)\n                               prx @\n                              filter\n                               (\\<lambda>sn. repNodes_eq sn p low high repa)\n                               sfx)) \\<and>\n                         ((\\<forall>pt\\<in>set prx \\<union> set sfx.\n                              \\<not> repNodes_eq pt p low high\nrepa) \\<longrightarrow>\n                          repa = repa(p := nodeslist))", "assume nomatch_nodeslist: \"\\<not> repNodes_eq nodeslist p low high repa\""], ["proof (state)\nthis:\n  \\<not> repNodes_eq nodeslist p low high repa\n\ngoal (2 subgoals):\n 1. \\<And>var low high p repa next nodeslist prx sfx.\n       \\<lbrakk>nodeslist \\<noteq> Null; \\<not> isLeaf_pt p low high;\n        \\<forall>no\\<in>set prx \\<union> set (nodeslist # sfx).\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and> var no = var p;\n        p \\<in> set prx \\<or> p \\<in> set (nodeslist # sfx);\n        (\\<exists>pt\\<in>set prx.\n            repNodes_eq pt p low high repa) \\<longrightarrow>\n        repa p =\n        hd (filter (\\<lambda>sn. repNodes_eq sn p low high repa) prx);\n        \\<forall>pt\\<in>set prx. \\<not> repNodes_eq pt p low high repa;\n        \\<not> repNodes_eq nodeslist p low high repa;\n        List (next nodeslist) next sfx\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>no\\<in>set prx \\<union>\n    set (nodeslist # sfx).\n                             no \\<noteq> Null \\<and>\n                             (low no = Null) = (high no = Null) \\<and>\n                             var no = var p) \\<and>\n                         ((\\<exists>pt\\<in>set (prx @ [nodeslist]).\n                              repNodes_eq pt p low high\n                               repa) \\<longrightarrow>\n                          repa p =\n                          hd (filter\n                               (\\<lambda>sn. repNodes_eq sn p low high repa)\n                               (prx @ [nodeslist]))) \\<and>\n                         (next nodeslist \\<noteq> Null \\<longrightarrow>\n                          (\\<forall>pt\\<in>set (prx @ [nodeslist]).\n                              \\<not> repNodes_eq pt p low high repa))\n 2. \\<And>var low high p repa next nodeslist prx sfx.\n       \\<lbrakk>nodeslist \\<noteq> Null; List nodeslist next sfx;\n        \\<not> isLeaf_pt p low high;\n        \\<forall>no\\<in>set prx \\<union> set sfx.\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           (isLeaf_pt p low high \\<longrightarrow>\n            isLeaf_pt no low high) \\<and>\n           var no = var p;\n        p \\<in> set prx \\<or> p \\<in> set sfx;\n        (\\<exists>pt\\<in>set prx.\n            repNodes_eq pt p low high repa) \\<longrightarrow>\n        repa p =\n        hd (filter (\\<lambda>sn. repNodes_eq sn p low high repa) prx);\n        \\<forall>pt\\<in>set prx. \\<not> repNodes_eq pt p low high repa;\n        repNodes_eq nodeslist p low high repa\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>no\\<in>set prx \\<union> set sfx.\n                             no \\<noteq> Null \\<and>\n                             (low no = Null) = (high no = Null) \\<and>\n                             (isLeaf_pt p low high \\<longrightarrow>\n                              isLeaf_pt no low high) \\<and>\n                             var no = var p) \\<and>\n                         (p \\<in> set prx \\<or> p \\<in> set sfx) \\<and>\n                         ((\\<exists>pt\\<in>set prx \\<union> set sfx.\n                              repNodes_eq pt p low high\n                               repa) \\<longrightarrow>\n                          nodeslist =\n                          hd (filter\n                               (\\<lambda>sn. repNodes_eq sn p low high repa)\n                               prx @\n                              filter\n                               (\\<lambda>sn. repNodes_eq sn p low high repa)\n                               sfx)) \\<and>\n                         ((\\<forall>pt\\<in>set prx \\<union> set sfx.\n                              \\<not> repNodes_eq pt p low high\nrepa) \\<longrightarrow>\n                          repa = repa(p := nodeslist))", "assume sfx: \"List (next nodeslist) next sfx\""], ["proof (state)\nthis:\n  List (next nodeslist) next sfx\n\ngoal (2 subgoals):\n 1. \\<And>var low high p repa next nodeslist prx sfx.\n       \\<lbrakk>nodeslist \\<noteq> Null; \\<not> isLeaf_pt p low high;\n        \\<forall>no\\<in>set prx \\<union> set (nodeslist # sfx).\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and> var no = var p;\n        p \\<in> set prx \\<or> p \\<in> set (nodeslist # sfx);\n        (\\<exists>pt\\<in>set prx.\n            repNodes_eq pt p low high repa) \\<longrightarrow>\n        repa p =\n        hd (filter (\\<lambda>sn. repNodes_eq sn p low high repa) prx);\n        \\<forall>pt\\<in>set prx. \\<not> repNodes_eq pt p low high repa;\n        \\<not> repNodes_eq nodeslist p low high repa;\n        List (next nodeslist) next sfx\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>no\\<in>set prx \\<union>\n    set (nodeslist # sfx).\n                             no \\<noteq> Null \\<and>\n                             (low no = Null) = (high no = Null) \\<and>\n                             var no = var p) \\<and>\n                         ((\\<exists>pt\\<in>set (prx @ [nodeslist]).\n                              repNodes_eq pt p low high\n                               repa) \\<longrightarrow>\n                          repa p =\n                          hd (filter\n                               (\\<lambda>sn. repNodes_eq sn p low high repa)\n                               (prx @ [nodeslist]))) \\<and>\n                         (next nodeslist \\<noteq> Null \\<longrightarrow>\n                          (\\<forall>pt\\<in>set (prx @ [nodeslist]).\n                              \\<not> repNodes_eq pt p low high repa))\n 2. \\<And>var low high p repa next nodeslist prx sfx.\n       \\<lbrakk>nodeslist \\<noteq> Null; List nodeslist next sfx;\n        \\<not> isLeaf_pt p low high;\n        \\<forall>no\\<in>set prx \\<union> set sfx.\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           (isLeaf_pt p low high \\<longrightarrow>\n            isLeaf_pt no low high) \\<and>\n           var no = var p;\n        p \\<in> set prx \\<or> p \\<in> set sfx;\n        (\\<exists>pt\\<in>set prx.\n            repNodes_eq pt p low high repa) \\<longrightarrow>\n        repa p =\n        hd (filter (\\<lambda>sn. repNodes_eq sn p low high repa) prx);\n        \\<forall>pt\\<in>set prx. \\<not> repNodes_eq pt p low high repa;\n        repNodes_eq nodeslist p low high repa\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>no\\<in>set prx \\<union> set sfx.\n                             no \\<noteq> Null \\<and>\n                             (low no = Null) = (high no = Null) \\<and>\n                             (isLeaf_pt p low high \\<longrightarrow>\n                              isLeaf_pt no low high) \\<and>\n                             var no = var p) \\<and>\n                         (p \\<in> set prx \\<or> p \\<in> set sfx) \\<and>\n                         ((\\<exists>pt\\<in>set prx \\<union> set sfx.\n                              repNodes_eq pt p low high\n                               repa) \\<longrightarrow>\n                          nodeslist =\n                          hd (filter\n                               (\\<lambda>sn. repNodes_eq sn p low high repa)\n                               prx @\n                              filter\n                               (\\<lambda>sn. repNodes_eq sn p low high repa)\n                               sfx)) \\<and>\n                         ((\\<forall>pt\\<in>set prx \\<union> set sfx.\n                              \\<not> repNodes_eq pt p low high\nrepa) \\<longrightarrow>\n                          repa = repa(p := nodeslist))", "show \"(\\<forall>no\\<in>set prx \\<union> set (nodeslist # sfx).\n              no \\<noteq> Null \\<and> (low no = Null) = (high no = Null) \\<and> var no = var p) \\<and>\n        ((\\<exists>pt\\<in>set (prx @ [nodeslist]). repNodes_eq pt p low high repa) \\<longrightarrow>\n           repa p = hd [sn\\<leftarrow>prx @ [nodeslist] . repNodes_eq sn p low high repa]) \\<and>\n        (next nodeslist \\<noteq> Null \\<longrightarrow>\n            (\\<forall>pt\\<in>set (prx @ [nodeslist]). \\<not> repNodes_eq pt p low high repa))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>no\\<in>set prx \\<union> set (nodeslist # sfx).\n        no \\<noteq> Null \\<and>\n        (low no = Null) = (high no = Null) \\<and> var no = var p) \\<and>\n    ((\\<exists>pt\\<in>set (prx @ [nodeslist]).\n         repNodes_eq pt p low high repa) \\<longrightarrow>\n     repa p =\n     hd (filter (\\<lambda>sn. repNodes_eq sn p low high repa)\n          (prx @ [nodeslist]))) \\<and>\n    (next nodeslist \\<noteq> Null \\<longrightarrow>\n     (\\<forall>pt\\<in>set (prx @ [nodeslist]).\n         \\<not> repNodes_eq pt p low high repa))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<forall>no\\<in>set prx \\<union> set (nodeslist # sfx).\n        no \\<noteq> Null \\<and>\n        (low no = Null) = (high no = Null) \\<and> var no = var p) \\<and>\n    ((\\<exists>pt\\<in>set (prx @ [nodeslist]).\n         repNodes_eq pt p low high repa) \\<longrightarrow>\n     repa p =\n     hd (filter (\\<lambda>sn. repNodes_eq sn p low high repa)\n          (prx @ [nodeslist]))) \\<and>\n    (next nodeslist \\<noteq> Null \\<longrightarrow>\n     (\\<forall>pt\\<in>set (prx @ [nodeslist]).\n         \\<not> repNodes_eq pt p low high repa))", "from nomatch_prx nomatch_nodeslist"], ["proof (chain)\npicking this:\n  \\<forall>pt\\<in>set prx. \\<not> repNodes_eq pt p low high repa\n  \\<not> repNodes_eq nodeslist p low high repa", "have \"((\\<exists>pt\\<in>set (prx @ [nodeslist]). repNodes_eq pt p low high repa) \\<longrightarrow>\n           repa p = hd [sn\\<leftarrow>prx @ [nodeslist] . repNodes_eq sn p low high repa])\""], ["proof (prove)\nusing this:\n  \\<forall>pt\\<in>set prx. \\<not> repNodes_eq pt p low high repa\n  \\<not> repNodes_eq nodeslist p low high repa\n\ngoal (1 subgoal):\n 1. (\\<exists>pt\\<in>set (prx @ [nodeslist]).\n        repNodes_eq pt p low high repa) \\<longrightarrow>\n    repa p =\n    hd (filter (\\<lambda>sn. repNodes_eq sn p low high repa)\n         (prx @ [nodeslist]))", "by auto"], ["proof (state)\nthis:\n  (\\<exists>pt\\<in>set (prx @ [nodeslist]).\n      repNodes_eq pt p low high repa) \\<longrightarrow>\n  repa p =\n  hd (filter (\\<lambda>sn. repNodes_eq sn p low high repa)\n       (prx @ [nodeslist]))\n\ngoal (1 subgoal):\n 1. (\\<forall>no\\<in>set prx \\<union> set (nodeslist # sfx).\n        no \\<noteq> Null \\<and>\n        (low no = Null) = (high no = Null) \\<and> var no = var p) \\<and>\n    ((\\<exists>pt\\<in>set (prx @ [nodeslist]).\n         repNodes_eq pt p low high repa) \\<longrightarrow>\n     repa p =\n     hd (filter (\\<lambda>sn. repNodes_eq sn p low high repa)\n          (prx @ [nodeslist]))) \\<and>\n    (next nodeslist \\<noteq> Null \\<longrightarrow>\n     (\\<forall>pt\\<in>set (prx @ [nodeslist]).\n         \\<not> repNodes_eq pt p low high repa))", "moreover"], ["proof (state)\nthis:\n  (\\<exists>pt\\<in>set (prx @ [nodeslist]).\n      repNodes_eq pt p low high repa) \\<longrightarrow>\n  repa p =\n  hd (filter (\\<lambda>sn. repNodes_eq sn p low high repa)\n       (prx @ [nodeslist]))\n\ngoal (1 subgoal):\n 1. (\\<forall>no\\<in>set prx \\<union> set (nodeslist # sfx).\n        no \\<noteq> Null \\<and>\n        (low no = Null) = (high no = Null) \\<and> var no = var p) \\<and>\n    ((\\<exists>pt\\<in>set (prx @ [nodeslist]).\n         repNodes_eq pt p low high repa) \\<longrightarrow>\n     repa p =\n     hd (filter (\\<lambda>sn. repNodes_eq sn p low high repa)\n          (prx @ [nodeslist]))) \\<and>\n    (next nodeslist \\<noteq> Null \\<longrightarrow>\n     (\\<forall>pt\\<in>set (prx @ [nodeslist]).\n         \\<not> repNodes_eq pt p low high repa))", "from nomatch_prx nomatch_nodeslist"], ["proof (chain)\npicking this:\n  \\<forall>pt\\<in>set prx. \\<not> repNodes_eq pt p low high repa\n  \\<not> repNodes_eq nodeslist p low high repa", "have \"(next nodeslist \\<noteq> Null \\<longrightarrow>\n            (\\<forall>pt\\<in>set (prx @ [nodeslist]). \\<not> repNodes_eq pt p low high repa))\""], ["proof (prove)\nusing this:\n  \\<forall>pt\\<in>set prx. \\<not> repNodes_eq pt p low high repa\n  \\<not> repNodes_eq nodeslist p low high repa\n\ngoal (1 subgoal):\n 1. next nodeslist \\<noteq> Null \\<longrightarrow>\n    (\\<forall>pt\\<in>set (prx @ [nodeslist]).\n        \\<not> repNodes_eq pt p low high repa)", "by auto"], ["proof (state)\nthis:\n  next nodeslist \\<noteq> Null \\<longrightarrow>\n  (\\<forall>pt\\<in>set (prx @ [nodeslist]).\n      \\<not> repNodes_eq pt p low high repa)\n\ngoal (1 subgoal):\n 1. (\\<forall>no\\<in>set prx \\<union> set (nodeslist # sfx).\n        no \\<noteq> Null \\<and>\n        (low no = Null) = (high no = Null) \\<and> var no = var p) \\<and>\n    ((\\<exists>pt\\<in>set (prx @ [nodeslist]).\n         repNodes_eq pt p low high repa) \\<longrightarrow>\n     repa p =\n     hd (filter (\\<lambda>sn. repNodes_eq sn p low high repa)\n          (prx @ [nodeslist]))) \\<and>\n    (next nodeslist \\<noteq> Null \\<longrightarrow>\n     (\\<forall>pt\\<in>set (prx @ [nodeslist]).\n         \\<not> repNodes_eq pt p low high repa))", "ultimately"], ["proof (chain)\npicking this:\n  (\\<exists>pt\\<in>set (prx @ [nodeslist]).\n      repNodes_eq pt p low high repa) \\<longrightarrow>\n  repa p =\n  hd (filter (\\<lambda>sn. repNodes_eq sn p low high repa)\n       (prx @ [nodeslist]))\n  next nodeslist \\<noteq> Null \\<longrightarrow>\n  (\\<forall>pt\\<in>set (prx @ [nodeslist]).\n      \\<not> repNodes_eq pt p low high repa)", "show ?thesis"], ["proof (prove)\nusing this:\n  (\\<exists>pt\\<in>set (prx @ [nodeslist]).\n      repNodes_eq pt p low high repa) \\<longrightarrow>\n  repa p =\n  hd (filter (\\<lambda>sn. repNodes_eq sn p low high repa)\n       (prx @ [nodeslist]))\n  next nodeslist \\<noteq> Null \\<longrightarrow>\n  (\\<forall>pt\\<in>set (prx @ [nodeslist]).\n      \\<not> repNodes_eq pt p low high repa)\n\ngoal (1 subgoal):\n 1. (\\<forall>no\\<in>set prx \\<union> set (nodeslist # sfx).\n        no \\<noteq> Null \\<and>\n        (low no = Null) = (high no = Null) \\<and> var no = var p) \\<and>\n    ((\\<exists>pt\\<in>set (prx @ [nodeslist]).\n         repNodes_eq pt p low high repa) \\<longrightarrow>\n     repa p =\n     hd (filter (\\<lambda>sn. repNodes_eq sn p low high repa)\n          (prx @ [nodeslist]))) \\<and>\n    (next nodeslist \\<noteq> Null \\<longrightarrow>\n     (\\<forall>pt\\<in>set (prx @ [nodeslist]).\n         \\<not> repNodes_eq pt p low high repa))", "using no_props"], ["proof (prove)\nusing this:\n  (\\<exists>pt\\<in>set (prx @ [nodeslist]).\n      repNodes_eq pt p low high repa) \\<longrightarrow>\n  repa p =\n  hd (filter (\\<lambda>sn. repNodes_eq sn p low high repa)\n       (prx @ [nodeslist]))\n  next nodeslist \\<noteq> Null \\<longrightarrow>\n  (\\<forall>pt\\<in>set (prx @ [nodeslist]).\n      \\<not> repNodes_eq pt p low high repa)\n  \\<forall>no\\<in>set prx \\<union> set (nodeslist # sfx).\n     no \\<noteq> Null \\<and>\n     (low no = Null) = (high no = Null) \\<and> var no = var p\n\ngoal (1 subgoal):\n 1. (\\<forall>no\\<in>set prx \\<union> set (nodeslist # sfx).\n        no \\<noteq> Null \\<and>\n        (low no = Null) = (high no = Null) \\<and> var no = var p) \\<and>\n    ((\\<exists>pt\\<in>set (prx @ [nodeslist]).\n         repNodes_eq pt p low high repa) \\<longrightarrow>\n     repa p =\n     hd (filter (\\<lambda>sn. repNodes_eq sn p low high repa)\n          (prx @ [nodeslist]))) \\<and>\n    (next nodeslist \\<noteq> Null \\<longrightarrow>\n     (\\<forall>pt\\<in>set (prx @ [nodeslist]).\n         \\<not> repNodes_eq pt p low high repa))", "by (intro conjI)"], ["proof (state)\nthis:\n  (\\<forall>no\\<in>set prx \\<union> set (nodeslist # sfx).\n      no \\<noteq> Null \\<and>\n      (low no = Null) = (high no = Null) \\<and> var no = var p) \\<and>\n  ((\\<exists>pt\\<in>set (prx @ [nodeslist]).\n       repNodes_eq pt p low high repa) \\<longrightarrow>\n   repa p =\n   hd (filter (\\<lambda>sn. repNodes_eq sn p low high repa)\n        (prx @ [nodeslist]))) \\<and>\n  (next nodeslist \\<noteq> Null \\<longrightarrow>\n   (\\<forall>pt\\<in>set (prx @ [nodeslist]).\n       \\<not> repNodes_eq pt p low high repa))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (\\<forall>no\\<in>set prx \\<union> set (nodeslist # sfx).\n      no \\<noteq> Null \\<and>\n      (low no = Null) = (high no = Null) \\<and> var no = var p) \\<and>\n  ((\\<exists>pt\\<in>set (prx @ [nodeslist]).\n       repNodes_eq pt p low high repa) \\<longrightarrow>\n   repa p =\n   hd (filter (\\<lambda>sn. repNodes_eq sn p low high repa)\n        (prx @ [nodeslist]))) \\<and>\n  (next nodeslist \\<noteq> Null \\<longrightarrow>\n   (\\<forall>pt\\<in>set (prx @ [nodeslist]).\n       \\<not> repNodes_eq pt p low high repa))\n\ngoal (1 subgoal):\n 1. \\<And>var low high p repa next nodeslist prx sfx.\n       \\<lbrakk>nodeslist \\<noteq> Null; List nodeslist next sfx;\n        \\<not> isLeaf_pt p low high;\n        \\<forall>no\\<in>set prx \\<union> set sfx.\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           (isLeaf_pt p low high \\<longrightarrow>\n            isLeaf_pt no low high) \\<and>\n           var no = var p;\n        p \\<in> set prx \\<or> p \\<in> set sfx;\n        (\\<exists>pt\\<in>set prx.\n            repNodes_eq pt p low high repa) \\<longrightarrow>\n        repa p =\n        hd (filter (\\<lambda>sn. repNodes_eq sn p low high repa) prx);\n        \\<forall>pt\\<in>set prx. \\<not> repNodes_eq pt p low high repa;\n        repNodes_eq nodeslist p low high repa\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>no\\<in>set prx \\<union> set sfx.\n                             no \\<noteq> Null \\<and>\n                             (low no = Null) = (high no = Null) \\<and>\n                             (isLeaf_pt p low high \\<longrightarrow>\n                              isLeaf_pt no low high) \\<and>\n                             var no = var p) \\<and>\n                         (p \\<in> set prx \\<or> p \\<in> set sfx) \\<and>\n                         ((\\<exists>pt\\<in>set prx \\<union> set sfx.\n                              repNodes_eq pt p low high\n                               repa) \\<longrightarrow>\n                          nodeslist =\n                          hd (filter\n                               (\\<lambda>sn. repNodes_eq sn p low high repa)\n                               prx @\n                              filter\n                               (\\<lambda>sn. repNodes_eq sn p low high repa)\n                               sfx)) \\<and>\n                         ((\\<forall>pt\\<in>set prx \\<union> set sfx.\n                              \\<not> repNodes_eq pt p low high\nrepa) \\<longrightarrow>\n                          repa = repa(p := nodeslist))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>var low high p repa next nodeslist prx sfx.\n       \\<lbrakk>nodeslist \\<noteq> Null; List nodeslist next sfx;\n        \\<not> isLeaf_pt p low high;\n        \\<forall>no\\<in>set prx \\<union> set sfx.\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           (isLeaf_pt p low high \\<longrightarrow>\n            isLeaf_pt no low high) \\<and>\n           var no = var p;\n        p \\<in> set prx \\<or> p \\<in> set sfx;\n        (\\<exists>pt\\<in>set prx.\n            repNodes_eq pt p low high repa) \\<longrightarrow>\n        repa p =\n        hd (filter (\\<lambda>sn. repNodes_eq sn p low high repa) prx);\n        \\<forall>pt\\<in>set prx. \\<not> repNodes_eq pt p low high repa;\n        repNodes_eq nodeslist p low high repa\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>no\\<in>set prx \\<union> set sfx.\n                             no \\<noteq> Null \\<and>\n                             (low no = Null) = (high no = Null) \\<and>\n                             (isLeaf_pt p low high \\<longrightarrow>\n                              isLeaf_pt no low high) \\<and>\n                             var no = var p) \\<and>\n                         (p \\<in> set prx \\<or> p \\<in> set sfx) \\<and>\n                         ((\\<exists>pt\\<in>set prx \\<union> set sfx.\n                              repNodes_eq pt p low high\n                               repa) \\<longrightarrow>\n                          nodeslist =\n                          hd (filter\n                               (\\<lambda>sn. repNodes_eq sn p low high repa)\n                               prx @\n                              filter\n                               (\\<lambda>sn. repNodes_eq sn p low high repa)\n                               sfx)) \\<and>\n                         ((\\<forall>pt\\<in>set prx \\<union> set sfx.\n                              \\<not> repNodes_eq pt p low high\nrepa) \\<longrightarrow>\n                          repa = repa(p := nodeslist))", "(* Invariant to invariant: THEN part *)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>var low high p repa next nodeslist prx sfx.\n       \\<lbrakk>nodeslist \\<noteq> Null; List nodeslist next sfx;\n        \\<not> isLeaf_pt p low high;\n        \\<forall>no\\<in>set prx \\<union> set sfx.\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           (isLeaf_pt p low high \\<longrightarrow>\n            isLeaf_pt no low high) \\<and>\n           var no = var p;\n        p \\<in> set prx \\<or> p \\<in> set sfx;\n        (\\<exists>pt\\<in>set prx.\n            repNodes_eq pt p low high repa) \\<longrightarrow>\n        repa p =\n        hd (filter (\\<lambda>sn. repNodes_eq sn p low high repa) prx);\n        \\<forall>pt\\<in>set prx. \\<not> repNodes_eq pt p low high repa;\n        repNodes_eq nodeslist p low high repa\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>no\\<in>set prx \\<union> set sfx.\n                             no \\<noteq> Null \\<and>\n                             (low no = Null) = (high no = Null) \\<and>\n                             (isLeaf_pt p low high \\<longrightarrow>\n                              isLeaf_pt no low high) \\<and>\n                             var no = var p) \\<and>\n                         (p \\<in> set prx \\<or> p \\<in> set sfx) \\<and>\n                         ((\\<exists>pt\\<in>set prx \\<union> set sfx.\n                              repNodes_eq pt p low high\n                               repa) \\<longrightarrow>\n                          nodeslist =\n                          hd (filter\n                               (\\<lambda>sn. repNodes_eq sn p low high repa)\n                               prx @\n                              filter\n                               (\\<lambda>sn. repNodes_eq sn p low high repa)\n                               sfx)) \\<and>\n                         ((\\<forall>pt\\<in>set prx \\<union> set sfx.\n                              \\<not> repNodes_eq pt p low high\nrepa) \\<longrightarrow>\n                          repa = repa(p := nodeslist))", "fix var low high p repa \"next\" nodeslist prx sfx"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>var low high p repa next nodeslist prx sfx.\n       \\<lbrakk>nodeslist \\<noteq> Null; List nodeslist next sfx;\n        \\<not> isLeaf_pt p low high;\n        \\<forall>no\\<in>set prx \\<union> set sfx.\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           (isLeaf_pt p low high \\<longrightarrow>\n            isLeaf_pt no low high) \\<and>\n           var no = var p;\n        p \\<in> set prx \\<or> p \\<in> set sfx;\n        (\\<exists>pt\\<in>set prx.\n            repNodes_eq pt p low high repa) \\<longrightarrow>\n        repa p =\n        hd (filter (\\<lambda>sn. repNodes_eq sn p low high repa) prx);\n        \\<forall>pt\\<in>set prx. \\<not> repNodes_eq pt p low high repa;\n        repNodes_eq nodeslist p low high repa\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>no\\<in>set prx \\<union> set sfx.\n                             no \\<noteq> Null \\<and>\n                             (low no = Null) = (high no = Null) \\<and>\n                             (isLeaf_pt p low high \\<longrightarrow>\n                              isLeaf_pt no low high) \\<and>\n                             var no = var p) \\<and>\n                         (p \\<in> set prx \\<or> p \\<in> set sfx) \\<and>\n                         ((\\<exists>pt\\<in>set prx \\<union> set sfx.\n                              repNodes_eq pt p low high\n                               repa) \\<longrightarrow>\n                          nodeslist =\n                          hd (filter\n                               (\\<lambda>sn. repNodes_eq sn p low high repa)\n                               prx @\n                              filter\n                               (\\<lambda>sn. repNodes_eq sn p low high repa)\n                               sfx)) \\<and>\n                         ((\\<forall>pt\\<in>set prx \\<union> set sfx.\n                              \\<not> repNodes_eq pt p low high\nrepa) \\<longrightarrow>\n                          repa = repa(p := nodeslist))", "assume nodeslist_not_Null: \"nodeslist \\<noteq> Null\""], ["proof (state)\nthis:\n  nodeslist \\<noteq> Null\n\ngoal (1 subgoal):\n 1. \\<And>var low high p repa next nodeslist prx sfx.\n       \\<lbrakk>nodeslist \\<noteq> Null; List nodeslist next sfx;\n        \\<not> isLeaf_pt p low high;\n        \\<forall>no\\<in>set prx \\<union> set sfx.\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           (isLeaf_pt p low high \\<longrightarrow>\n            isLeaf_pt no low high) \\<and>\n           var no = var p;\n        p \\<in> set prx \\<or> p \\<in> set sfx;\n        (\\<exists>pt\\<in>set prx.\n            repNodes_eq pt p low high repa) \\<longrightarrow>\n        repa p =\n        hd (filter (\\<lambda>sn. repNodes_eq sn p low high repa) prx);\n        \\<forall>pt\\<in>set prx. \\<not> repNodes_eq pt p low high repa;\n        repNodes_eq nodeslist p low high repa\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>no\\<in>set prx \\<union> set sfx.\n                             no \\<noteq> Null \\<and>\n                             (low no = Null) = (high no = Null) \\<and>\n                             (isLeaf_pt p low high \\<longrightarrow>\n                              isLeaf_pt no low high) \\<and>\n                             var no = var p) \\<and>\n                         (p \\<in> set prx \\<or> p \\<in> set sfx) \\<and>\n                         ((\\<exists>pt\\<in>set prx \\<union> set sfx.\n                              repNodes_eq pt p low high\n                               repa) \\<longrightarrow>\n                          nodeslist =\n                          hd (filter\n                               (\\<lambda>sn. repNodes_eq sn p low high repa)\n                               prx @\n                              filter\n                               (\\<lambda>sn. repNodes_eq sn p low high repa)\n                               sfx)) \\<and>\n                         ((\\<forall>pt\\<in>set prx \\<union> set sfx.\n                              \\<not> repNodes_eq pt p low high\nrepa) \\<longrightarrow>\n                          repa = repa(p := nodeslist))", "assume sfx: \"List nodeslist next sfx\""], ["proof (state)\nthis:\n  List nodeslist next sfx\n\ngoal (1 subgoal):\n 1. \\<And>var low high p repa next nodeslist prx sfx.\n       \\<lbrakk>nodeslist \\<noteq> Null; List nodeslist next sfx;\n        \\<not> isLeaf_pt p low high;\n        \\<forall>no\\<in>set prx \\<union> set sfx.\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           (isLeaf_pt p low high \\<longrightarrow>\n            isLeaf_pt no low high) \\<and>\n           var no = var p;\n        p \\<in> set prx \\<or> p \\<in> set sfx;\n        (\\<exists>pt\\<in>set prx.\n            repNodes_eq pt p low high repa) \\<longrightarrow>\n        repa p =\n        hd (filter (\\<lambda>sn. repNodes_eq sn p low high repa) prx);\n        \\<forall>pt\\<in>set prx. \\<not> repNodes_eq pt p low high repa;\n        repNodes_eq nodeslist p low high repa\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>no\\<in>set prx \\<union> set sfx.\n                             no \\<noteq> Null \\<and>\n                             (low no = Null) = (high no = Null) \\<and>\n                             (isLeaf_pt p low high \\<longrightarrow>\n                              isLeaf_pt no low high) \\<and>\n                             var no = var p) \\<and>\n                         (p \\<in> set prx \\<or> p \\<in> set sfx) \\<and>\n                         ((\\<exists>pt\\<in>set prx \\<union> set sfx.\n                              repNodes_eq pt p low high\n                               repa) \\<longrightarrow>\n                          nodeslist =\n                          hd (filter\n                               (\\<lambda>sn. repNodes_eq sn p low high repa)\n                               prx @\n                              filter\n                               (\\<lambda>sn. repNodes_eq sn p low high repa)\n                               sfx)) \\<and>\n                         ((\\<forall>pt\\<in>set prx \\<union> set sfx.\n                              \\<not> repNodes_eq pt p low high\nrepa) \\<longrightarrow>\n                          repa = repa(p := nodeslist))", "assume p_not_Leaf: \"\\<not> isLeaf_pt p low high\""], ["proof (state)\nthis:\n  \\<not> isLeaf_pt p low high\n\ngoal (1 subgoal):\n 1. \\<And>var low high p repa next nodeslist prx sfx.\n       \\<lbrakk>nodeslist \\<noteq> Null; List nodeslist next sfx;\n        \\<not> isLeaf_pt p low high;\n        \\<forall>no\\<in>set prx \\<union> set sfx.\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           (isLeaf_pt p low high \\<longrightarrow>\n            isLeaf_pt no low high) \\<and>\n           var no = var p;\n        p \\<in> set prx \\<or> p \\<in> set sfx;\n        (\\<exists>pt\\<in>set prx.\n            repNodes_eq pt p low high repa) \\<longrightarrow>\n        repa p =\n        hd (filter (\\<lambda>sn. repNodes_eq sn p low high repa) prx);\n        \\<forall>pt\\<in>set prx. \\<not> repNodes_eq pt p low high repa;\n        repNodes_eq nodeslist p low high repa\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>no\\<in>set prx \\<union> set sfx.\n                             no \\<noteq> Null \\<and>\n                             (low no = Null) = (high no = Null) \\<and>\n                             (isLeaf_pt p low high \\<longrightarrow>\n                              isLeaf_pt no low high) \\<and>\n                             var no = var p) \\<and>\n                         (p \\<in> set prx \\<or> p \\<in> set sfx) \\<and>\n                         ((\\<exists>pt\\<in>set prx \\<union> set sfx.\n                              repNodes_eq pt p low high\n                               repa) \\<longrightarrow>\n                          nodeslist =\n                          hd (filter\n                               (\\<lambda>sn. repNodes_eq sn p low high repa)\n                               prx @\n                              filter\n                               (\\<lambda>sn. repNodes_eq sn p low high repa)\n                               sfx)) \\<and>\n                         ((\\<forall>pt\\<in>set prx \\<union> set sfx.\n                              \\<not> repNodes_eq pt p low high\nrepa) \\<longrightarrow>\n                          repa = repa(p := nodeslist))", "assume no_props: \"\\<forall>no\\<in>set prx \\<union> set sfx.\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           (isLeaf_pt p low high \\<longrightarrow> isLeaf_pt no low high) \\<and> var no = var p\""], ["proof (state)\nthis:\n  \\<forall>no\\<in>set prx \\<union> set sfx.\n     no \\<noteq> Null \\<and>\n     (low no = Null) = (high no = Null) \\<and>\n     (isLeaf_pt p low high \\<longrightarrow> isLeaf_pt no low high) \\<and>\n     var no = var p\n\ngoal (1 subgoal):\n 1. \\<And>var low high p repa next nodeslist prx sfx.\n       \\<lbrakk>nodeslist \\<noteq> Null; List nodeslist next sfx;\n        \\<not> isLeaf_pt p low high;\n        \\<forall>no\\<in>set prx \\<union> set sfx.\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           (isLeaf_pt p low high \\<longrightarrow>\n            isLeaf_pt no low high) \\<and>\n           var no = var p;\n        p \\<in> set prx \\<or> p \\<in> set sfx;\n        (\\<exists>pt\\<in>set prx.\n            repNodes_eq pt p low high repa) \\<longrightarrow>\n        repa p =\n        hd (filter (\\<lambda>sn. repNodes_eq sn p low high repa) prx);\n        \\<forall>pt\\<in>set prx. \\<not> repNodes_eq pt p low high repa;\n        repNodes_eq nodeslist p low high repa\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>no\\<in>set prx \\<union> set sfx.\n                             no \\<noteq> Null \\<and>\n                             (low no = Null) = (high no = Null) \\<and>\n                             (isLeaf_pt p low high \\<longrightarrow>\n                              isLeaf_pt no low high) \\<and>\n                             var no = var p) \\<and>\n                         (p \\<in> set prx \\<or> p \\<in> set sfx) \\<and>\n                         ((\\<exists>pt\\<in>set prx \\<union> set sfx.\n                              repNodes_eq pt p low high\n                               repa) \\<longrightarrow>\n                          nodeslist =\n                          hd (filter\n                               (\\<lambda>sn. repNodes_eq sn p low high repa)\n                               prx @\n                              filter\n                               (\\<lambda>sn. repNodes_eq sn p low high repa)\n                               sfx)) \\<and>\n                         ((\\<forall>pt\\<in>set prx \\<union> set sfx.\n                              \\<not> repNodes_eq pt p low high\nrepa) \\<longrightarrow>\n                          repa = repa(p := nodeslist))", "assume p_in_ns: \"p \\<in> set prx \\<or> p \\<in> set sfx\""], ["proof (state)\nthis:\n  p \\<in> set prx \\<or> p \\<in> set sfx\n\ngoal (1 subgoal):\n 1. \\<And>var low high p repa next nodeslist prx sfx.\n       \\<lbrakk>nodeslist \\<noteq> Null; List nodeslist next sfx;\n        \\<not> isLeaf_pt p low high;\n        \\<forall>no\\<in>set prx \\<union> set sfx.\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           (isLeaf_pt p low high \\<longrightarrow>\n            isLeaf_pt no low high) \\<and>\n           var no = var p;\n        p \\<in> set prx \\<or> p \\<in> set sfx;\n        (\\<exists>pt\\<in>set prx.\n            repNodes_eq pt p low high repa) \\<longrightarrow>\n        repa p =\n        hd (filter (\\<lambda>sn. repNodes_eq sn p low high repa) prx);\n        \\<forall>pt\\<in>set prx. \\<not> repNodes_eq pt p low high repa;\n        repNodes_eq nodeslist p low high repa\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>no\\<in>set prx \\<union> set sfx.\n                             no \\<noteq> Null \\<and>\n                             (low no = Null) = (high no = Null) \\<and>\n                             (isLeaf_pt p low high \\<longrightarrow>\n                              isLeaf_pt no low high) \\<and>\n                             var no = var p) \\<and>\n                         (p \\<in> set prx \\<or> p \\<in> set sfx) \\<and>\n                         ((\\<exists>pt\\<in>set prx \\<union> set sfx.\n                              repNodes_eq pt p low high\n                               repa) \\<longrightarrow>\n                          nodeslist =\n                          hd (filter\n                               (\\<lambda>sn. repNodes_eq sn p low high repa)\n                               prx @\n                              filter\n                               (\\<lambda>sn. repNodes_eq sn p low high repa)\n                               sfx)) \\<and>\n                         ((\\<forall>pt\\<in>set prx \\<union> set sfx.\n                              \\<not> repNodes_eq pt p low high\nrepa) \\<longrightarrow>\n                          repa = repa(p := nodeslist))", "assume match_prx: \"(\\<exists>pt\\<in>set prx. repNodes_eq pt p low high repa) \\<longrightarrow>\n        repa p = hd [sn\\<leftarrow>prx . repNodes_eq sn p low high repa]\""], ["proof (state)\nthis:\n  (\\<exists>pt\\<in>set prx.\n      repNodes_eq pt p low high repa) \\<longrightarrow>\n  repa p = hd (filter (\\<lambda>sn. repNodes_eq sn p low high repa) prx)\n\ngoal (1 subgoal):\n 1. \\<And>var low high p repa next nodeslist prx sfx.\n       \\<lbrakk>nodeslist \\<noteq> Null; List nodeslist next sfx;\n        \\<not> isLeaf_pt p low high;\n        \\<forall>no\\<in>set prx \\<union> set sfx.\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           (isLeaf_pt p low high \\<longrightarrow>\n            isLeaf_pt no low high) \\<and>\n           var no = var p;\n        p \\<in> set prx \\<or> p \\<in> set sfx;\n        (\\<exists>pt\\<in>set prx.\n            repNodes_eq pt p low high repa) \\<longrightarrow>\n        repa p =\n        hd (filter (\\<lambda>sn. repNodes_eq sn p low high repa) prx);\n        \\<forall>pt\\<in>set prx. \\<not> repNodes_eq pt p low high repa;\n        repNodes_eq nodeslist p low high repa\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>no\\<in>set prx \\<union> set sfx.\n                             no \\<noteq> Null \\<and>\n                             (low no = Null) = (high no = Null) \\<and>\n                             (isLeaf_pt p low high \\<longrightarrow>\n                              isLeaf_pt no low high) \\<and>\n                             var no = var p) \\<and>\n                         (p \\<in> set prx \\<or> p \\<in> set sfx) \\<and>\n                         ((\\<exists>pt\\<in>set prx \\<union> set sfx.\n                              repNodes_eq pt p low high\n                               repa) \\<longrightarrow>\n                          nodeslist =\n                          hd (filter\n                               (\\<lambda>sn. repNodes_eq sn p low high repa)\n                               prx @\n                              filter\n                               (\\<lambda>sn. repNodes_eq sn p low high repa)\n                               sfx)) \\<and>\n                         ((\\<forall>pt\\<in>set prx \\<union> set sfx.\n                              \\<not> repNodes_eq pt p low high\nrepa) \\<longrightarrow>\n                          repa = repa(p := nodeslist))", "assume nomatch_prx: \"\\<forall>pt\\<in>set prx. \\<not> repNodes_eq pt p low high repa\""], ["proof (state)\nthis:\n  \\<forall>pt\\<in>set prx. \\<not> repNodes_eq pt p low high repa\n\ngoal (1 subgoal):\n 1. \\<And>var low high p repa next nodeslist prx sfx.\n       \\<lbrakk>nodeslist \\<noteq> Null; List nodeslist next sfx;\n        \\<not> isLeaf_pt p low high;\n        \\<forall>no\\<in>set prx \\<union> set sfx.\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           (isLeaf_pt p low high \\<longrightarrow>\n            isLeaf_pt no low high) \\<and>\n           var no = var p;\n        p \\<in> set prx \\<or> p \\<in> set sfx;\n        (\\<exists>pt\\<in>set prx.\n            repNodes_eq pt p low high repa) \\<longrightarrow>\n        repa p =\n        hd (filter (\\<lambda>sn. repNodes_eq sn p low high repa) prx);\n        \\<forall>pt\\<in>set prx. \\<not> repNodes_eq pt p low high repa;\n        repNodes_eq nodeslist p low high repa\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>no\\<in>set prx \\<union> set sfx.\n                             no \\<noteq> Null \\<and>\n                             (low no = Null) = (high no = Null) \\<and>\n                             (isLeaf_pt p low high \\<longrightarrow>\n                              isLeaf_pt no low high) \\<and>\n                             var no = var p) \\<and>\n                         (p \\<in> set prx \\<or> p \\<in> set sfx) \\<and>\n                         ((\\<exists>pt\\<in>set prx \\<union> set sfx.\n                              repNodes_eq pt p low high\n                               repa) \\<longrightarrow>\n                          nodeslist =\n                          hd (filter\n                               (\\<lambda>sn. repNodes_eq sn p low high repa)\n                               prx @\n                              filter\n                               (\\<lambda>sn. repNodes_eq sn p low high repa)\n                               sfx)) \\<and>\n                         ((\\<forall>pt\\<in>set prx \\<union> set sfx.\n                              \\<not> repNodes_eq pt p low high\nrepa) \\<longrightarrow>\n                          repa = repa(p := nodeslist))", "assume match: \"repNodes_eq nodeslist p low high repa\""], ["proof (state)\nthis:\n  repNodes_eq nodeslist p low high repa\n\ngoal (1 subgoal):\n 1. \\<And>var low high p repa next nodeslist prx sfx.\n       \\<lbrakk>nodeslist \\<noteq> Null; List nodeslist next sfx;\n        \\<not> isLeaf_pt p low high;\n        \\<forall>no\\<in>set prx \\<union> set sfx.\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           (isLeaf_pt p low high \\<longrightarrow>\n            isLeaf_pt no low high) \\<and>\n           var no = var p;\n        p \\<in> set prx \\<or> p \\<in> set sfx;\n        (\\<exists>pt\\<in>set prx.\n            repNodes_eq pt p low high repa) \\<longrightarrow>\n        repa p =\n        hd (filter (\\<lambda>sn. repNodes_eq sn p low high repa) prx);\n        \\<forall>pt\\<in>set prx. \\<not> repNodes_eq pt p low high repa;\n        repNodes_eq nodeslist p low high repa\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>no\\<in>set prx \\<union> set sfx.\n                             no \\<noteq> Null \\<and>\n                             (low no = Null) = (high no = Null) \\<and>\n                             (isLeaf_pt p low high \\<longrightarrow>\n                              isLeaf_pt no low high) \\<and>\n                             var no = var p) \\<and>\n                         (p \\<in> set prx \\<or> p \\<in> set sfx) \\<and>\n                         ((\\<exists>pt\\<in>set prx \\<union> set sfx.\n                              repNodes_eq pt p low high\n                               repa) \\<longrightarrow>\n                          nodeslist =\n                          hd (filter\n                               (\\<lambda>sn. repNodes_eq sn p low high repa)\n                               prx @\n                              filter\n                               (\\<lambda>sn. repNodes_eq sn p low high repa)\n                               sfx)) \\<and>\n                         ((\\<forall>pt\\<in>set prx \\<union> set sfx.\n                              \\<not> repNodes_eq pt p low high\nrepa) \\<longrightarrow>\n                          repa = repa(p := nodeslist))", "show \"(\\<forall>no\\<in>set prx \\<union> set sfx.\n              no \\<noteq> Null \\<and>\n              (low no = Null) = (high no = Null) \\<and>\n              (isLeaf_pt p low high \\<longrightarrow> isLeaf_pt no low high) \\<and> var no = var p) \\<and>\n        (p \\<in> set prx \\<or> p \\<in> set sfx) \\<and>\n        ((\\<exists>pt\\<in>set prx \\<union> set sfx. repNodes_eq pt p low high repa) \\<longrightarrow>\n           nodeslist =\n           hd ([sn\\<leftarrow>prx . repNodes_eq sn p low high repa] @\n               [sn\\<leftarrow>sfx . repNodes_eq sn p low high repa])) \\<and>\n        ((\\<forall>pt\\<in>set prx \\<union> set sfx. \\<not> repNodes_eq pt p low high repa) \\<longrightarrow>\n           repa = repa(p := nodeslist))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>no\\<in>set prx \\<union> set sfx.\n        no \\<noteq> Null \\<and>\n        (low no = Null) = (high no = Null) \\<and>\n        (isLeaf_pt p low high \\<longrightarrow>\n         isLeaf_pt no low high) \\<and>\n        var no = var p) \\<and>\n    (p \\<in> set prx \\<or> p \\<in> set sfx) \\<and>\n    ((\\<exists>pt\\<in>set prx \\<union> set sfx.\n         repNodes_eq pt p low high repa) \\<longrightarrow>\n     nodeslist =\n     hd (filter (\\<lambda>sn. repNodes_eq sn p low high repa) prx @\n         filter (\\<lambda>sn. repNodes_eq sn p low high repa) sfx)) \\<and>\n    ((\\<forall>pt\\<in>set prx \\<union> set sfx.\n         \\<not> repNodes_eq pt p low high repa) \\<longrightarrow>\n     repa = repa(p := nodeslist))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<forall>no\\<in>set prx \\<union> set sfx.\n        no \\<noteq> Null \\<and>\n        (low no = Null) = (high no = Null) \\<and>\n        (isLeaf_pt p low high \\<longrightarrow>\n         isLeaf_pt no low high) \\<and>\n        var no = var p) \\<and>\n    (p \\<in> set prx \\<or> p \\<in> set sfx) \\<and>\n    ((\\<exists>pt\\<in>set prx \\<union> set sfx.\n         repNodes_eq pt p low high repa) \\<longrightarrow>\n     nodeslist =\n     hd (filter (\\<lambda>sn. repNodes_eq sn p low high repa) prx @\n         filter (\\<lambda>sn. repNodes_eq sn p low high repa) sfx)) \\<and>\n    ((\\<forall>pt\\<in>set prx \\<union> set sfx.\n         \\<not> repNodes_eq pt p low high repa) \\<longrightarrow>\n     repa = repa(p := nodeslist))", "from nodeslist_not_Null sfx"], ["proof (chain)\npicking this:\n  nodeslist \\<noteq> Null\n  List nodeslist next sfx", "obtain sfx' where sfx': \"sfx=nodeslist#sfx'\""], ["proof (prove)\nusing this:\n  nodeslist \\<noteq> Null\n  List nodeslist next sfx\n\ngoal (1 subgoal):\n 1. (\\<And>sfx'.\n        sfx = nodeslist # sfx' \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (cases \"nodeslist=Null\") auto"], ["proof (state)\nthis:\n  sfx = nodeslist # sfx'\n\ngoal (1 subgoal):\n 1. (\\<forall>no\\<in>set prx \\<union> set sfx.\n        no \\<noteq> Null \\<and>\n        (low no = Null) = (high no = Null) \\<and>\n        (isLeaf_pt p low high \\<longrightarrow>\n         isLeaf_pt no low high) \\<and>\n        var no = var p) \\<and>\n    (p \\<in> set prx \\<or> p \\<in> set sfx) \\<and>\n    ((\\<exists>pt\\<in>set prx \\<union> set sfx.\n         repNodes_eq pt p low high repa) \\<longrightarrow>\n     nodeslist =\n     hd (filter (\\<lambda>sn. repNodes_eq sn p low high repa) prx @\n         filter (\\<lambda>sn. repNodes_eq sn p low high repa) sfx)) \\<and>\n    ((\\<forall>pt\\<in>set prx \\<union> set sfx.\n         \\<not> repNodes_eq pt p low high repa) \\<longrightarrow>\n     repa = repa(p := nodeslist))", "from nomatch_prx match sfx'"], ["proof (chain)\npicking this:\n  \\<forall>pt\\<in>set prx. \\<not> repNodes_eq pt p low high repa\n  repNodes_eq nodeslist p low high repa\n  sfx = nodeslist # sfx'", "have hd: \"hd ([sn\\<leftarrow>prx . repNodes_eq sn p low high repa] @\n               [sn\\<leftarrow>sfx . repNodes_eq sn p low high repa]) = nodeslist\""], ["proof (prove)\nusing this:\n  \\<forall>pt\\<in>set prx. \\<not> repNodes_eq pt p low high repa\n  repNodes_eq nodeslist p low high repa\n  sfx = nodeslist # sfx'\n\ngoal (1 subgoal):\n 1. hd (filter (\\<lambda>sn. repNodes_eq sn p low high repa) prx @\n        filter (\\<lambda>sn. repNodes_eq sn p low high repa) sfx) =\n    nodeslist", "by simp"], ["proof (state)\nthis:\n  hd (filter (\\<lambda>sn. repNodes_eq sn p low high repa) prx @\n      filter (\\<lambda>sn. repNodes_eq sn p low high repa) sfx) =\n  nodeslist\n\ngoal (1 subgoal):\n 1. (\\<forall>no\\<in>set prx \\<union> set sfx.\n        no \\<noteq> Null \\<and>\n        (low no = Null) = (high no = Null) \\<and>\n        (isLeaf_pt p low high \\<longrightarrow>\n         isLeaf_pt no low high) \\<and>\n        var no = var p) \\<and>\n    (p \\<in> set prx \\<or> p \\<in> set sfx) \\<and>\n    ((\\<exists>pt\\<in>set prx \\<union> set sfx.\n         repNodes_eq pt p low high repa) \\<longrightarrow>\n     nodeslist =\n     hd (filter (\\<lambda>sn. repNodes_eq sn p low high repa) prx @\n         filter (\\<lambda>sn. repNodes_eq sn p low high repa) sfx)) \\<and>\n    ((\\<forall>pt\\<in>set prx \\<union> set sfx.\n         \\<not> repNodes_eq pt p low high repa) \\<longrightarrow>\n     repa = repa(p := nodeslist))", "from match sfx'"], ["proof (chain)\npicking this:\n  repNodes_eq nodeslist p low high repa\n  sfx = nodeslist # sfx'", "have triv: \"((\\<forall>pt\\<in>set prx \\<union> set sfx. \\<not> repNodes_eq pt p low high repa) \\<longrightarrow>\n           repa = repa(p := nodeslist))\""], ["proof (prove)\nusing this:\n  repNodes_eq nodeslist p low high repa\n  sfx = nodeslist # sfx'\n\ngoal (1 subgoal):\n 1. (\\<forall>pt\\<in>set prx \\<union> set sfx.\n        \\<not> repNodes_eq pt p low high repa) \\<longrightarrow>\n    repa = repa(p := nodeslist)", "by simp"], ["proof (state)\nthis:\n  (\\<forall>pt\\<in>set prx \\<union> set sfx.\n      \\<not> repNodes_eq pt p low high repa) \\<longrightarrow>\n  repa = repa(p := nodeslist)\n\ngoal (1 subgoal):\n 1. (\\<forall>no\\<in>set prx \\<union> set sfx.\n        no \\<noteq> Null \\<and>\n        (low no = Null) = (high no = Null) \\<and>\n        (isLeaf_pt p low high \\<longrightarrow>\n         isLeaf_pt no low high) \\<and>\n        var no = var p) \\<and>\n    (p \\<in> set prx \\<or> p \\<in> set sfx) \\<and>\n    ((\\<exists>pt\\<in>set prx \\<union> set sfx.\n         repNodes_eq pt p low high repa) \\<longrightarrow>\n     nodeslist =\n     hd (filter (\\<lambda>sn. repNodes_eq sn p low high repa) prx @\n         filter (\\<lambda>sn. repNodes_eq sn p low high repa) sfx)) \\<and>\n    ((\\<forall>pt\\<in>set prx \\<union> set sfx.\n         \\<not> repNodes_eq pt p low high repa) \\<longrightarrow>\n     repa = repa(p := nodeslist))", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>no\\<in>set prx \\<union> set sfx.\n        no \\<noteq> Null \\<and>\n        (low no = Null) = (high no = Null) \\<and>\n        (isLeaf_pt p low high \\<longrightarrow>\n         isLeaf_pt no low high) \\<and>\n        var no = var p) \\<and>\n    (p \\<in> set prx \\<or> p \\<in> set sfx) \\<and>\n    ((\\<exists>pt\\<in>set prx \\<union> set sfx.\n         repNodes_eq pt p low high repa) \\<longrightarrow>\n     nodeslist =\n     hd (filter (\\<lambda>sn. repNodes_eq sn p low high repa) prx @\n         filter (\\<lambda>sn. repNodes_eq sn p low high repa) sfx)) \\<and>\n    ((\\<forall>pt\\<in>set prx \\<union> set sfx.\n         \\<not> repNodes_eq pt p low high repa) \\<longrightarrow>\n     repa = repa(p := nodeslist))", "apply (rule conjI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<forall>no\\<in>set prx \\<union> set sfx.\n       no \\<noteq> Null \\<and>\n       (low no = Null) = (high no = Null) \\<and>\n       (isLeaf_pt p low high \\<longrightarrow> isLeaf_pt no low high) \\<and>\n       var no = var p\n 2. (p \\<in> set prx \\<or> p \\<in> set sfx) \\<and>\n    ((\\<exists>pt\\<in>set prx \\<union> set sfx.\n         repNodes_eq pt p low high repa) \\<longrightarrow>\n     nodeslist =\n     hd (filter (\\<lambda>sn. repNodes_eq sn p low high repa) prx @\n         filter (\\<lambda>sn. repNodes_eq sn p low high repa) sfx)) \\<and>\n    ((\\<forall>pt\\<in>set prx \\<union> set sfx.\n         \\<not> repNodes_eq pt p low high repa) \\<longrightarrow>\n     repa = repa(p := nodeslist))", "apply (rule no_props)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (p \\<in> set prx \\<or> p \\<in> set sfx) \\<and>\n    ((\\<exists>pt\\<in>set prx \\<union> set sfx.\n         repNodes_eq pt p low high repa) \\<longrightarrow>\n     nodeslist =\n     hd (filter (\\<lambda>sn. repNodes_eq sn p low high repa) prx @\n         filter (\\<lambda>sn. repNodes_eq sn p low high repa) sfx)) \\<and>\n    ((\\<forall>pt\\<in>set prx \\<union> set sfx.\n         \\<not> repNodes_eq pt p low high repa) \\<longrightarrow>\n     repa = repa(p := nodeslist))", "apply (intro conjI)"], ["proof (prove)\ngoal (3 subgoals):\n 1. p \\<in> set prx \\<or> p \\<in> set sfx\n 2. (\\<exists>pt\\<in>set prx \\<union> set sfx.\n        repNodes_eq pt p low high repa) \\<longrightarrow>\n    nodeslist =\n    hd (filter (\\<lambda>sn. repNodes_eq sn p low high repa) prx @\n        filter (\\<lambda>sn. repNodes_eq sn p low high repa) sfx)\n 3. (\\<forall>pt\\<in>set prx \\<union> set sfx.\n        \\<not> repNodes_eq pt p low high repa) \\<longrightarrow>\n    repa = repa(p := nodeslist)", "apply   (rule p_in_ns)"], ["proof (prove)\ngoal (2 subgoals):\n 1. (\\<exists>pt\\<in>set prx \\<union> set sfx.\n        repNodes_eq pt p low high repa) \\<longrightarrow>\n    nodeslist =\n    hd (filter (\\<lambda>sn. repNodes_eq sn p low high repa) prx @\n        filter (\\<lambda>sn. repNodes_eq sn p low high repa) sfx)\n 2. (\\<forall>pt\\<in>set prx \\<union> set sfx.\n        \\<not> repNodes_eq pt p low high repa) \\<longrightarrow>\n    repa = repa(p := nodeslist)", "apply  (simp add: hd)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>pt\\<in>set prx \\<union> set sfx.\n        \\<not> repNodes_eq pt p low high repa) \\<longrightarrow>\n    repa = repa(p := nodeslist)", "apply (rule triv)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  (\\<forall>no\\<in>set prx \\<union> set sfx.\n      no \\<noteq> Null \\<and>\n      (low no = Null) = (high no = Null) \\<and>\n      (isLeaf_pt p low high \\<longrightarrow> isLeaf_pt no low high) \\<and>\n      var no = var p) \\<and>\n  (p \\<in> set prx \\<or> p \\<in> set sfx) \\<and>\n  ((\\<exists>pt\\<in>set prx \\<union> set sfx.\n       repNodes_eq pt p low high repa) \\<longrightarrow>\n   nodeslist =\n   hd (filter (\\<lambda>sn. repNodes_eq sn p low high repa) prx @\n       filter (\\<lambda>sn. repNodes_eq sn p low high repa) sfx)) \\<and>\n  ((\\<forall>pt\\<in>set prx \\<union> set sfx.\n       \\<not> repNodes_eq pt p low high repa) \\<longrightarrow>\n   repa = repa(p := nodeslist))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (\\<forall>no\\<in>set prx \\<union> set sfx.\n      no \\<noteq> Null \\<and>\n      (low no = Null) = (high no = Null) \\<and>\n      (isLeaf_pt p low high \\<longrightarrow> isLeaf_pt no low high) \\<and>\n      var no = var p) \\<and>\n  (p \\<in> set prx \\<or> p \\<in> set sfx) \\<and>\n  ((\\<exists>pt\\<in>set prx \\<union> set sfx.\n       repNodes_eq pt p low high repa) \\<longrightarrow>\n   nodeslist =\n   hd (filter (\\<lambda>sn. repNodes_eq sn p low high repa) prx @\n       filter (\\<lambda>sn. repNodes_eq sn p low high repa) sfx)) \\<and>\n  ((\\<forall>pt\\<in>set prx \\<union> set sfx.\n       \\<not> repNodes_eq pt p low high repa) \\<longrightarrow>\n   repa = repa(p := nodeslist))\n\ngoal:\nNo subgoals!", "qed"], ["", "end"]]}